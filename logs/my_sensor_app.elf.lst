
c:/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
c:/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800112d

Program Header:
0x70000001 off    0x0000fabc vaddr 0x0800fabc paddr 0x0800fabc align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x0000fad4 memsz 0x0000fad4 flags rwx
    LOAD off    0x00010110 vaddr 0x20000110 paddr 0x0800fad4 align 2**16
         filesz 0x000000fc memsz 0x000000fc flags rw-
    LOAD off    0x00010210 vaddr 0x20000210 paddr 0x0800fbd0 align 2**16
         filesz 0x00000000 memsz 0x00002d68 flags rw-
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x0000010c flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  08001000  08001000  00001000  2**0  ALLOC
  1 .text              0000ea9a  08001020  08001020  00001020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx         00000018  0800fabc  0800fabc  0000fabc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 0000010c  20000000  20000000  00020000  2**0  ALLOC
  4 .coredata          00000000  2000010c  2000010c  0001020c  2**0  CONTENTS
  5 .data              000000fc  20000110  0800fad4  00010110  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .corebss           00000000  2000020c  2000020c  0001020c  2**0  CONTENTS
  7 .bss               00002d68  20000210  0800fbd0  00010210  2**3  ALLOC
  8 .ARM.attributes    00000033  00000000  00000000  0001020c  2**0  CONTENTS, READONLY
  9 .comment           0000007f  00000000  00000000  0001023f  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  000102be  2**0  CONTENTS, READONLY
 11 .debug_line        00044817  00000000  00000000  000102c2  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        0007f2f6  00000000  00000000  00054ad9  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      0000edc2  00000000  00000000  000d3dcf  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     00002d98  00000000  00000000  000e2b98  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0003a475  00000000  00000000  000e5930  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00014af0  00000000  00000000  0011fda8  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         00024414  00000000  00000000  00134898  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame       0000c100  00000000  00000000  00158cac  2**2  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo     00000003  00000000  00000000  00164dac  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_pubnames    00007efb  00000000  00000000  00164daf  2**0  CONTENTS, READONLY, DEBUGGING
 21 .debug_pubtypes    000080f7  00000000  00000000  0016ccaa  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08001000 l    d  .imghdr	00000000 .imghdr
08001020 l    d  .text	00000000 .text
0800fabc l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
2000010c l    d  .coredata	00000000 .coredata
20000110 l    d  .data	00000000 .data
2000020c l    d  .corebss	00000000 .corebss
20000210 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 startup_stm32f103xb.o
f108f85f l       *ABS*	00000000 BootRAM
08001138 l       .text	00000000 LoopCopyDataInit
08001130 l       .text	00000000 CopyDataInit
0800114c l       .text	00000000 LoopFillZerobss
08001146 l       .text	00000000 FillZerobss
0800115c l       .text	00000000 LoopFillZeroCoreBss
08001156 l       .text	00000000 FillZeroCoreBss
08001188 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 system_stm32f1xx.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 app.7srcpc5i-cgu.0
00001358 l       .debug_str	00000000 
000032fb l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
0000334c l       .debug_str	00000000 
000032bd l       .debug_str	00000000 
00003292 l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000325f l       .debug_str	00000000 
00003256 l       .debug_str	00000000 
00003342 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00008bcd l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
000031bb l       .debug_str	00000000 
0000335a l       .debug_str	00000000 
000031b3 l       .debug_str	00000000 
0000316b l       .debug_str	00000000 
00003166 l       .debug_str	00000000 
0000313c l       .debug_str	00000000 
00003138 l       .debug_str	00000000 
0000312f l       .debug_str	00000000 
000030e8 l       .debug_str	00000000 
000030a8 l       .debug_str	00000000 
00003060 l       .debug_str	00000000 
0000303d l       .debug_str	00000000 
00003056 l       .debug_str	00000000 
00003025 l       .debug_str	00000000 
00002ffe l       .debug_str	00000000 
000005bf l       .debug_str	00000000 
00000383 l       .debug_str	00000000 
00002ff5 l       .debug_str	00000000 
00002fec l       .debug_str	00000000 
00002fe2 l       .debug_str	00000000 
0002eca8 l       .debug_str	00000000 
00002faa l       .debug_str	00000000 
00002f5b l       .debug_str	00000000 
00002f08 l       .debug_str	00000000 
00002e98 l       .debug_str	00000000 
000332f1 l       .debug_str	00000000 
00002e6e l       .debug_str	00000000 
00002e59 l       .debug_str	00000000 
00003330 l       .debug_str	00000000 
00002e52 l       .debug_str	00000000 
00002e3d l       .debug_str	00000000 
00002e2a l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002de2 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00002dc4 l       .debug_str	00000000 
00002dbc l       .debug_str	00000000 
0002d4bd l       .debug_str	00000000 
00002db5 l       .debug_str	00000000 
00002d49 l       .debug_str	00000000 
00002ce5 l       .debug_str	00000000 
00002cdd l       .debug_str	00000000 
00002cc8 l       .debug_str	00000000 
0003094e l       .debug_str	00000000 
000002ff l       .debug_str	00000000 
00008175 l       .debug_str	00000000 
0002e757 l       .debug_str	00000000 
00008161 l       .debug_str	00000000 
0000332c l       .debug_str	00000000 
000301a0 l       .debug_str	00000000 
00033311 l       .debug_str	00000000 
00037585 l       .debug_str	00000000 
000075f1 l       .debug_str	00000000 
0003925a l       .debug_str	00000000 
00037bd4 l       .debug_str	00000000 
00003326 l       .debug_str	00000000 
00003320 l       .debug_str	00000000 
0000330e l       .debug_str	00000000 
0000060a l       .debug_str	00000000 
0000064b l       .debug_str	00000000 
0000003e l       .debug_str	00000000 
000344e3 l       .debug_str	00000000 
0000065f l       .debug_str	00000000 
0000066a l       .debug_str	00000000 
00000678 l       .debug_str	00000000 
0002f63d l       .debug_str	00000000 
0000069b l       .debug_str	00000000 
0000067f l       .debug_str	00000000 
00000687 l       .debug_str	00000000 
0000068b l       .debug_str	00000000 
00000694 l       .debug_str	00000000 
0002e928 l       .debug_str	00000000 
000052fb l       .debug_str	00000000 
0000556c l       .debug_str	00000000 
00007655 l       .debug_str	00000000 
0000069e l       .debug_str	00000000 
00000bc4 l       .debug_str	00000000 
000006a6 l       .debug_str	00000000 
00007644 l       .debug_str	00000000 
00006c6e l       .debug_str	00000000 
000006dd l       .debug_str	00000000 
000006e0 l       .debug_str	00000000 
000006e4 l       .debug_str	00000000 
00022b16 l       .debug_str	00000000 
0000b9a0 l       .debug_str	00000000 
00000b67 l       .debug_str	00000000 
000006eb l       .debug_str	00000000 
000006f0 l       .debug_str	00000000 
000006f6 l       .debug_str	00000000 
000006fd l       .debug_str	00000000 
000368f3 l       .debug_str	00000000 
000010dc l       .debug_str	00000000 
00000705 l       .debug_str	00000000 
0000070d l       .debug_str	00000000 
00000718 l       .debug_str	00000000 
00000723 l       .debug_str	00000000 
00000730 l       .debug_str	00000000 
0000073b l       .debug_str	00000000 
00000743 l       .debug_str	00000000 
0000074e l       .debug_str	00000000 
00000759 l       .debug_str	00000000 
00000763 l       .debug_str	00000000 
0000076e l       .debug_str	00000000 
00000779 l       .debug_str	00000000 
00000786 l       .debug_str	00000000 
00000792 l       .debug_str	00000000 
0000079f l       .debug_str	00000000 
000007ad l       .debug_str	00000000 
000007b7 l       .debug_str	00000000 
000075dd l       .debug_str	00000000 
000007c4 l       .debug_str	00000000 
000007c8 l       .debug_str	00000000 
000007d3 l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
0002df61 l       .debug_str	00000000 
000007de l       .debug_str	00000000 
000007e7 l       .debug_str	00000000 
00000843 l       .debug_str	00000000 
00007551 l       .debug_str	00000000 
000356ed l       .debug_str	00000000 
000012be l       .debug_str	00000000 
0000769e l       .debug_str	00000000 
00000848 l       .debug_str	00000000 
000000c6 l       .debug_str	00000000 
0003954b l       .debug_str	00000000 
000104b9 l       .debug_str	00000000 
0002de14 l       .debug_str	00000000 
0000084d l       .debug_str	00000000 
00039ad3 l       .debug_str	00000000 
00000852 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
00000865 l       .debug_str	00000000 
00030827 l       .debug_str	00000000 
0000086f l       .debug_str	00000000 
00004340 l       .debug_str	00000000 
00000877 l       .debug_str	00000000 
0000087e l       .debug_str	00000000 
00000892 l       .debug_str	00000000 
0000089e l       .debug_str	00000000 
000008a9 l       .debug_str	00000000 
000008b0 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
00030768 l       .debug_str	00000000 
000347b7 l       .debug_str	00000000 
00008b18 l       .debug_str	00000000 
000008b6 l       .debug_str	00000000 
0000098e l       .debug_str	00000000 
000008c5 l       .debug_str	00000000 
000008c9 l       .debug_str	00000000 
000008d2 l       .debug_str	00000000 
000008de l       .debug_str	00000000 
00000903 l       .debug_str	00000000 
000008f7 l       .debug_str	00000000 
00000908 l       .debug_str	00000000 
00000912 l       .debug_str	00000000 
00000982 l       .debug_str	00000000 
00000970 l       .debug_str	00000000 
00039631 l       .debug_str	00000000 
0000098d l       .debug_str	00000000 
00000995 l       .debug_str	00000000 
000009ac l       .debug_str	00000000 
000009d0 l       .debug_str	00000000 
0003095c l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00000a15 l       .debug_str	00000000 
00000a05 l       .debug_str	00000000 
00000a1f l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000a7c l       .debug_str	00000000 
00000a8a l       .debug_str	00000000 
00000a83 l       .debug_str	00000000 
00000a8f l       .debug_str	00000000 
00035f0a l       .debug_str	00000000 
00000a97 l       .debug_str	00000000 
00000a9c l       .debug_str	00000000 
00000a9f l       .debug_str	00000000 
000338d6 l       .debug_str	00000000 
00000aa8 l       .debug_str	00000000 
00000aaf l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000ab5 l       .debug_str	00000000 
000343c0 l       .debug_str	00000000 
00000abd l       .debug_str	00000000 
00000ae2 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000aeb l       .debug_str	00000000 
00000b0a l       .debug_str	00000000 
00008482 l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6a l       .debug_str	00000000 
00000ba7 l       .debug_str	00000000 
0003386b l       .debug_str	00000000 
00000056 l       .debug_str	00000000 
00003392 l       .debug_str	00000000 
00000bbb l       .debug_str	00000000 
00033a5a l       .debug_str	00000000 
00000bc9 l       .debug_str	00000000 
00000bce l       .debug_str	00000000 
00008bd1 l       .debug_str	00000000 
00000bd4 l       .debug_str	00000000 
00000cfa l       .debug_str	00000000 
00000cd9 l       .debug_str	00000000 
00000be4 l       .debug_str	00000000 
00002b5a l       .debug_str	00000000 
0000464a l       .debug_str	00000000 
00000bfb l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c50 l       .debug_str	00000000 
00036975 l       .debug_str	00000000 
00000c65 l       .debug_str	00000000 
00000c6e l       .debug_str	00000000 
00000c78 l       .debug_str	00000000 
00000c7d l       .debug_str	00000000 
00000c83 l       .debug_str	00000000 
00000c88 l       .debug_str	00000000 
00008476 l       .debug_str	00000000 
00007550 l       .debug_str	00000000 
00000c8d l       .debug_str	00000000 
00000c99 l       .debug_str	00000000 
00000cd4 l       .debug_str	00000000 
00023650 l       .debug_str	00000000 
000033da l       .debug_str	00000000 
00000ce5 l       .debug_str	00000000 
00000477 l       .debug_str	00000000 
0000470f l       .debug_str	00000000 
00000d06 l       .debug_str	00000000 
00000d14 l       .debug_str	00000000 
00000d1d l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
00000d3a l       .debug_str	00000000 
0001176c l       .debug_str	00000000 
0003019f l       .debug_str	00000000 
00031c18 l       .debug_str	00000000 
00000d4e l       .debug_str	00000000 
00000dbe l       .debug_str	00000000 
00000df4 l       .debug_str	00000000 
00000e26 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00000ec4 l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
00000f2e l       .debug_str	00000000 
00000f55 l       .debug_str	00000000 
0003821c l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000f59 l       .debug_str	00000000 
00000f98 l       .debug_str	00000000 
00000fae l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00000fb7 l       .debug_str	00000000 
000157a6 l       .debug_str	00000000 
00000fbe l       .debug_str	00000000 
00000fca l       .debug_str	00000000 
00000fd2 l       .debug_str	00000000 
0000102c l       .debug_str	00000000 
0000108e l       .debug_str	00000000 
00001099 l       .debug_str	00000000 
000010e0 l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00001176 l       .debug_str	00000000 
000011bb l       .debug_str	00000000 
000011c4 l       .debug_str	00000000 
000011d4 l       .debug_str	00000000 
000011dc l       .debug_str	00000000 
00001231 l       .debug_str	00000000 
0000128e l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
000012a3 l       .debug_str	00000000 
000012af l       .debug_str	00000000 
000012bb l       .debug_str	00000000 
000012c4 l       .debug_str	00000000 
000012cc l       .debug_str	00000000 
000004d2 l       .debug_str	00000000 
000012d4 l       .debug_str	00000000 
00001302 l       .debug_str	00000000 
000012e9 l       .debug_str	00000000 
00001309 l       .debug_str	00000000 
00001310 l       .debug_str	00000000 
00001318 l       .debug_str	00000000 
000005b4 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000004e3 l       .debug_str	00000000 
000003a8 l       .debug_str	00000000 
00007fd0 l       .debug_str	00000000 
0000038e l       .debug_str	00000000 
000004dc l       .debug_str	00000000 
00000412 l       .debug_str	00000000 
0002e1b1 l       .debug_str	00000000 
000004a3 l       .debug_str	00000000 
000003a2 l       .debug_str	00000000 
0003456d l       .debug_str	00000000 
0002d67c l       .debug_str	00000000 
0000132b l       .debug_str	00000000 
00002cb8 l       .debug_str	00000000 
00001294 l       .debug_str	00000000 
0002fa2c l       .debug_str	00000000 
000003e5 l       .debug_str	00000000 
00000534 l       .debug_str	00000000 
00000481 l       .debug_str	00000000 
000003b4 l       .debug_str	00000000 
0000138d l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00001414 l       .debug_str	00000000 
0000046d l       .debug_str	00000000 
0000059e l       .debug_str	00000000 
00000562 l       .debug_str	00000000 
0000147a l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000005a6 l       .debug_str	00000000 
00000593 l       .debug_str	00000000 
00000527 l       .debug_str	00000000 
0000035a l       .debug_str	00000000 
00001498 l       .debug_str	00000000 
0000050c l       .debug_str	00000000 
000004d3 l       .debug_str	00000000 
000003cd l       .debug_str	00000000 
000014ae l       .debug_str	00000000 
000014d4 l       .debug_str	00000000 
00000378 l       .debug_str	00000000 
000014ea l       .debug_str	00000000 
00007680 l       .debug_str	00000000 
000014b3 l       .debug_str	00000000 
00001500 l       .debug_str	00000000 
00024405 l       .debug_str	00000000 
00001517 l       .debug_str	00000000 
0000151f l       .debug_str	00000000 
00001528 l       .debug_str	00000000 
00002a3d l       .debug_str	00000000 
00001531 l       .debug_str	00000000 
0003922b l       .debug_str	00000000 
00001539 l       .debug_str	00000000 
00001545 l       .debug_str	00000000 
00001550 l       .debug_str	00000000 
00001558 l       .debug_str	00000000 
00001560 l       .debug_str	00000000 
000015dc l       .debug_str	00000000 
00001660 l       .debug_str	00000000 
0000175c l       .debug_str	00000000 
00001860 l       .debug_str	00000000 
0000186e l       .debug_str	00000000 
00001879 l       .debug_str	00000000 
000018a6 l       .debug_str	00000000 
00001883 l       .debug_str	00000000 
000018b1 l       .debug_str	00000000 
0000192c l       .debug_str	00000000 
000019af l       .debug_str	00000000 
000019bd l       .debug_str	00000000 
00001a1c l       .debug_str	00000000 
00001a83 l       .debug_str	00000000 
00001a99 l       .debug_str	00000000 
00001aa9 l       .debug_str	00000000 
00030974 l       .debug_str	00000000 
00001ab8 l       .debug_str	00000000 
00001abe l       .debug_str	00000000 
00001ac4 l       .debug_str	00000000 
00001aca l       .debug_str	00000000 
00001ad6 l       .debug_str	00000000 
00001ade l       .debug_str	00000000 
000376f4 l       .debug_str	00000000 
00001ae6 l       .debug_str	00000000 
00001b2c l       .debug_str	00000000 
00001b09 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b7c l       .debug_str	00000000 
00031123 l       .debug_str	00000000 
00001bc4 l       .debug_str	00000000 
00001bca l       .debug_str	00000000 
00001bd0 l       .debug_str	00000000 
00001bf9 l       .debug_str	00000000 
00001bd6 l       .debug_str	00000000 
00001c0b l       .debug_str	00000000 
00001c4d l       .debug_str	00000000 
000313e0 l       .debug_str	00000000 
00001c97 l       .debug_str	00000000 
00001c9d l       .debug_str	00000000 
00001ca3 l       .debug_str	00000000 
00001ccc l       .debug_str	00000000 
00001ca9 l       .debug_str	00000000 
00001cde l       .debug_str	00000000 
00001d20 l       .debug_str	00000000 
00031c48 l       .debug_str	00000000 
00001d6a l       .debug_str	00000000 
00001d70 l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d7c l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00001d82 l       .debug_str	00000000 
00001db6 l       .debug_str	00000000 
00001df7 l       .debug_str	00000000 
00001e40 l       .debug_str	00000000 
00001e45 l       .debug_str	00000000 
000314eb l       .debug_str	00000000 
00001e4a l       .debug_str	00000000 
00001e50 l       .debug_str	00000000 
00001e56 l       .debug_str	00000000 
00001e7f l       .debug_str	00000000 
00001e5c l       .debug_str	00000000 
00001e90 l       .debug_str	00000000 
00001ed1 l       .debug_str	00000000 
000308bd l       .debug_str	00000000 
00001f1a l       .debug_str	00000000 
00001f46 l       .debug_str	00000000 
00001f23 l       .debug_str	00000000 
00001f57 l       .debug_str	00000000 
00001f98 l       .debug_str	00000000 
00001fe1 l       .debug_str	00000000 
00031870 l       .debug_str	00000000 
00001fe6 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00001ff6 l       .debug_str	00000000 
00002021 l       .debug_str	00000000 
00001ffe l       .debug_str	00000000 
00002033 l       .debug_str	00000000 
00002075 l       .debug_str	00000000 
00031290 l       .debug_str	00000000 
000020bf l       .debug_str	00000000 
000020c5 l       .debug_str	00000000 
000020cb l       .debug_str	00000000 
000020d1 l       .debug_str	00000000 
000020d7 l       .debug_str	00000000 
000020df l       .debug_str	00000000 
000020ed l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
0000210d l       .debug_str	00000000 
00002118 l       .debug_str	00000000 
00002123 l       .debug_str	00000000 
0000212e l       .debug_str	00000000 
00002135 l       .debug_str	00000000 
0000217b l       .debug_str	00000000 
00002158 l       .debug_str	00000000 
0000218d l       .debug_str	00000000 
000021cf l       .debug_str	00000000 
00031b9d l       .debug_str	00000000 
00002219 l       .debug_str	00000000 
00002246 l       .debug_str	00000000 
00002223 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0000229a l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
000022e9 l       .debug_str	00000000 
00002316 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00002328 l       .debug_str	00000000 
0000236a l       .debug_str	00000000 
000023b4 l       .debug_str	00000000 
00002433 l       .debug_str	00000000 
000023c8 l       .debug_str	00000000 
000023d8 l       .debug_str	00000000 
000023e1 l       .debug_str	00000000 
000023ec l       .debug_str	00000000 
000023fb l       .debug_str	00000000 
00002410 l       .debug_str	00000000 
00002441 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
00002583 l       .debug_str	00000000 
0000258e l       .debug_str	00000000 
00002597 l       .debug_str	00000000 
000025db l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025ee l       .debug_str	00000000 
00002671 l       .debug_str	00000000 
000026fc l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002764 l       .debug_str	00000000 
000027b8 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000027e9 l       .debug_str	00000000 
00002835 l       .debug_str	00000000 
00002889 l       .debug_str	00000000 
0000289f l       .debug_str	00000000 
000028b3 l       .debug_str	00000000 
000028fa l       .debug_str	00000000 
00002949 l       .debug_str	00000000 
00002975 l       .debug_str	00000000 
00002952 l       .debug_str	00000000 
00002983 l       .debug_str	00000000 
00002989 l       .debug_str	00000000 
00002991 l       .debug_str	00000000 
00002998 l       .debug_str	00000000 
000029a0 l       .debug_str	00000000 
000029ab l       .debug_str	00000000 
000029b3 l       .debug_str	00000000 
00007f88 l       .debug_str	00000000 
000029c2 l       .debug_str	00000000 
000029cd l       .debug_str	00000000 
000029d9 l       .debug_str	00000000 
000029e4 l       .debug_str	00000000 
000029f5 l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
00002a03 l       .debug_str	00000000 
00002a0a l       .debug_str	00000000 
00002a14 l       .debug_str	00000000 
00002a1c l       .debug_str	00000000 
00002a24 l       .debug_str	00000000 
00002a46 l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a5d l       .debug_str	00000000 
00002a65 l       .debug_str	00000000 
00002a6e l       .debug_str	00000000 
00000466 l       .debug_str	00000000 
00002a79 l       .debug_str	00000000 
00002a84 l       .debug_str	00000000 
00002a8f l       .debug_str	00000000 
00002a9f l       .debug_str	00000000 
0003086d l       .debug_str	00000000 
00003003 l       .debug_str	00000000 
00002aa9 l       .debug_str	00000000 
00002ae1 l       .debug_str	00000000 
00002b21 l       .debug_str	00000000 
00002b28 l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
0000301c l       .debug_str	00000000 
00002b47 l       .debug_str	00000000 
00002b57 l       .debug_str	00000000 
00002b66 l       .debug_str	00000000 
00002b6e l       .debug_str	00000000 
00002b75 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002bbe l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002bce l       .debug_str	00000000 
00002be3 l       .debug_str	00000000 
00002bec l       .debug_str	00000000 
00002c49 l       .debug_str	00000000 
00002cae l       .debug_str	00000000 
0003289f l       .debug_str	00000000 
0800d668 l     O .text	0000000c _ZN3app10app_sensor13SENSOR_DEVICE17h0ed6b347457819dfE
080012ea l     F .text	00000362 _ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE
0800121a l     F .text	0000003a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d87f6531d0ca4e0E
08001254 l     F .text	0000003a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h34b7478360faddecE
0800128e l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0bdb5d41856bc834E
0800129a l     F .text	00000050 _ZN4core6result13unwrap_failed17h2598843d1764ab0eE
00000000 l    df *ABS*	00000000 cortex-m.o
00000000 l    df *ABS*	00000000 mynewt.3wdrjj3j-cgu.0
000015dc l       .debug_str	00000000 
000068bf l       .debug_str	00000000 
00006831 l       .debug_str	00000000 
000067c1 l       .debug_str	00000000 
00006750 l       .debug_str	00000000 
000066e1 l       .debug_str	00000000 
00006664 l       .debug_str	00000000 
000065d8 l       .debug_str	00000000 
0002d5d7 l       .debug_str	00000000 
000065a4 l       .debug_str	00000000 
00006599 l       .debug_str	00000000 
00006562 l       .debug_str	00000000 
0000654b l       .debug_str	00000000 
0000650a l       .debug_str	00000000 
000076c8 l       .debug_str	00000000 
000064f4 l       .debug_str	00000000 
000064b4 l       .debug_str	00000000 
0002eefb l       .debug_str	00000000 
0000649f l       .debug_str	00000000 
00006460 l       .debug_str	00000000 
00030e0e l       .debug_str	00000000 
0000640d l       .debug_str	00000000 
000063f9 l       .debug_str	00000000 
000076bc l       .debug_str	00000000 
000063bb l       .debug_str	00000000 
00031b89 l       .debug_str	00000000 
0003178d l       .debug_str	00000000 
0000637f l       .debug_str	00000000 
00006374 l       .debug_str	00000000 
000384b5 l       .debug_str	00000000 
0000633f l       .debug_str	00000000 
000062c7 l       .debug_str	00000000 
000306e1 l       .debug_str	00000000 
00006240 l       .debug_str	00000000 
000061cf l       .debug_str	00000000 
0000615a l       .debug_str	00000000 
000060dd l       .debug_str	00000000 
00006063 l       .debug_str	00000000 
000076b7 l       .debug_str	00000000 
00005feb l       .debug_str	00000000 
000076b2 l       .debug_str	00000000 
00005f84 l       .debug_str	00000000 
000076ad l       .debug_str	00000000 
00005f1c l       .debug_str	00000000 
000076a2 l       .debug_str	00000000 
00005eac l       .debug_str	00000000 
00007697 l       .debug_str	00000000 
00005e41 l       .debug_str	00000000 
00007692 l       .debug_str	00000000 
00005dd9 l       .debug_str	00000000 
0000768d l       .debug_str	00000000 
00005d72 l       .debug_str	00000000 
00007688 l       .debug_str	00000000 
00005d08 l       .debug_str	00000000 
00007667 l       .debug_str	00000000 
00005c9d l       .debug_str	00000000 
0000765a l       .debug_str	00000000 
0000e43c l       .debug_str	00000000 
000302b8 l       .debug_str	00000000 
00005c34 l       .debug_str	00000000 
00007649 l       .debug_str	00000000 
000032bd l       .debug_str	00000000 
000177d1 l       .debug_str	00000000 
00003292 l       .debug_str	00000000 
0000763f l       .debug_str	00000000 
00005c01 l       .debug_str	00000000 
00037585 l       .debug_str	00000000 
00005be8 l       .debug_str	00000000 
000103f3 l       .debug_str	00000000 
00005bb3 l       .debug_str	00000000 
00007612 l       .debug_str	00000000 
00003256 l       .debug_str	00000000 
00007607 l       .debug_str	00000000 
00005b69 l       .debug_str	00000000 
00005b60 l       .debug_str	00000000 
00005b18 l       .debug_str	00000000 
00005ad0 l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
00005a88 l       .debug_str	00000000 
00005a59 l       .debug_str	00000000 
000075fe l       .debug_str	00000000 
00005a11 l       .debug_str	00000000 
00005a08 l       .debug_str	00000000 
000059c0 l       .debug_str	00000000 
000059a1 l       .debug_str	00000000 
00005959 l       .debug_str	00000000 
00037f7c l       .debug_str	00000000 
0000594a l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0000760c l       .debug_str	00000000 
00005929 l       .debug_str	00000000 
00005920 l       .debug_str	00000000 
000058f3 l       .debug_str	00000000 
000058ec l       .debug_str	00000000 
000058e2 l       .debug_str	00000000 
0000588f l       .debug_str	00000000 
00005883 l       .debug_str	00000000 
0000583e l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
000075f0 l       .debug_str	00000000 
00005822 l       .debug_str	00000000 
000057d9 l       .debug_str	00000000 
00002b59 l       .debug_str	00000000 
000057b7 l       .debug_str	00000000 
000057ce l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
000057ab l       .debug_str	00000000 
0003925a l       .debug_str	00000000 
000057a1 l       .debug_str	00000000 
00030df8 l       .debug_str	00000000 
0000570c l       .debug_str	00000000 
000075f1 l       .debug_str	00000000 
0002d581 l       .debug_str	00000000 
0003925b l       .debug_str	00000000 
000056db l       .debug_str	00000000 
00033311 l       .debug_str	00000000 
000056cd l       .debug_str	00000000 
00038238 l       .debug_str	00000000 
000056ce l       .debug_str	00000000 
000075e9 l       .debug_str	00000000 
000056bf l       .debug_str	00000000 
000332f1 l       .debug_str	00000000 
00005652 l       .debug_str	00000000 
00007555 l       .debug_str	00000000 
00016fa0 l       .debug_str	00000000 
00006379 l       .debug_str	00000000 
00003326 l       .debug_str	00000000 
00037bd4 l       .debug_str	00000000 
00005646 l       .debug_str	00000000 
0000754b l       .debug_str	00000000 
000055d5 l       .debug_str	00000000 
00007545 l       .debug_str	00000000 
00008bcd l       .debug_str	00000000 
00007d96 l       .debug_str	00000000 
00005572 l       .debug_str	00000000 
0000753f l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
00007513 l       .debug_str	00000000 
0000556b l       .debug_str	00000000 
0000750d l       .debug_str	00000000 
0000555d l       .debug_str	00000000 
000074af l       .debug_str	00000000 
000054ec l       .debug_str	00000000 
00000df4 l       .debug_str	00000000 
000054e6 l       .debug_str	00000000 
00031b55 l       .debug_str	00000000 
000054dc l       .debug_str	00000000 
00005463 l       .debug_str	00000000 
00033e60 l       .debug_str	00000000 
0001a5da l       .debug_str	00000000 
00005459 l       .debug_str	00000000 
000053f5 l       .debug_str	00000000 
000074a1 l       .debug_str	00000000 
000053ef l       .debug_str	00000000 
000053be l       .debug_str	00000000 
000053af l       .debug_str	00000000 
00005361 l       .debug_str	00000000 
0000745e l       .debug_str	00000000 
00005353 l       .debug_str	00000000 
00005301 l       .debug_str	00000000 
000052f9 l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
000052fa l       .debug_str	00000000 
000052ef l       .debug_str	00000000 
0000740b l       .debug_str	00000000 
000052db l       .debug_str	00000000 
0002ec63 l       .debug_str	00000000 
00005288 l       .debug_str	00000000 
000073c9 l       .debug_str	00000000 
00031bb0 l       .debug_str	00000000 
00000ec4 l       .debug_str	00000000 
00005284 l       .debug_str	00000000 
000073b8 l       .debug_str	00000000 
0000526c l       .debug_str	00000000 
00007372 l       .debug_str	00000000 
0000522e l       .debug_str	00000000 
00005223 l       .debug_str	00000000 
0000735b l       .debug_str	00000000 
00005219 l       .debug_str	00000000 
0000730f l       .debug_str	00000000 
0000520e l       .debug_str	00000000 
000316e8 l       .debug_str	00000000 
00005208 l       .debug_str	00000000 
000051fe l       .debug_str	00000000 
000051f8 l       .debug_str	00000000 
000051f0 l       .debug_str	00000000 
000072cb l       .debug_str	00000000 
0000518d l       .debug_str	00000000 
00002f5b l       .debug_str	00000000 
000334ee l       .debug_str	00000000 
00030f58 l       .debug_str	00000000 
0000515c l       .debug_str	00000000 
00005150 l       .debug_str	00000000 
00005100 l       .debug_str	00000000 
00007280 l       .debug_str	00000000 
000050f6 l       .debug_str	00000000 
00039734 l       .debug_str	00000000 
00031c18 l       .debug_str	00000000 
000050ed l       .debug_str	00000000 
00007249 l       .debug_str	00000000 
000050e4 l       .debug_str	00000000 
0000509d l       .debug_str	00000000 
00005091 l       .debug_str	00000000 
000322ff l       .debug_str	00000000 
0000504a l       .debug_str	00000000 
000020cf l       .debug_str	00000000 
00007216 l       .debug_str	00000000 
000338ca l       .debug_str	00000000 
00005046 l       .debug_str	00000000 
00003060 l       .debug_str	00000000 
00005038 l       .debug_str	00000000 
0002edaf l       .debug_str	00000000 
00005028 l       .debug_str	00000000 
000071dc l       .debug_str	00000000 
00004fdd l       .debug_str	00000000 
00032959 l       .debug_str	00000000 
00004fb1 l       .debug_str	00000000 
000071a7 l       .debug_str	00000000 
00004f89 l       .debug_str	00000000 
00007196 l       .debug_str	00000000 
00004f4f l       .debug_str	00000000 
00007160 l       .debug_str	00000000 
00004f27 l       .debug_str	00000000 
00007155 l       .debug_str	00000000 
00004efa l       .debug_str	00000000 
00007125 l       .debug_str	00000000 
00004ed2 l       .debug_str	00000000 
0000711d l       .debug_str	00000000 
00004e89 l       .debug_str	00000000 
000070f1 l       .debug_str	00000000 
00004e61 l       .debug_str	00000000 
000070c9 l       .debug_str	00000000 
00004e38 l       .debug_str	00000000 
000070bf l       .debug_str	00000000 
00004e31 l       .debug_str	00000000 
0003163d l       .debug_str	00000000 
00004e06 l       .debug_str	00000000 
00004e25 l       .debug_str	00000000 
00004dfc l       .debug_str	00000000 
00004dd1 l       .debug_str	00000000 
00004df0 l       .debug_str	00000000 
000244d0 l       .debug_str	00000000 
0002ff23 l       .debug_str	00000000 
00004db7 l       .debug_str	00000000 
00022ad9 l       .debug_str	00000000 
00004d9f l       .debug_str	00000000 
00004d85 l       .debug_str	00000000 
00004d73 l       .debug_str	00000000 
00004d5a l       .debug_str	00000000 
00004d49 l       .debug_str	00000000 
00004d30 l       .debug_str	00000000 
00004d1f l       .debug_str	00000000 
00000401 l       .debug_str	00000000 
00004d05 l       .debug_str	00000000 
00007091 l       .debug_str	00000000 
00014f1b l       .debug_str	00000000 
00007069 l       .debug_str	00000000 
00032c83 l       .debug_str	00000000 
00006fe4 l       .debug_str	00000000 
000344ec l       .debug_str	00000000 
00006fbd l       .debug_str	00000000 
00006f38 l       .debug_str	00000000 
00006eb0 l       .debug_str	00000000 
00006e30 l       .debug_str	00000000 
00006db4 l       .debug_str	00000000 
00006d9e l       .debug_str	00000000 
00006d19 l       .debug_str	00000000 
00006d0d l       .debug_str	00000000 
00006cbd l       .debug_str	00000000 
00022d1c l       .debug_str	00000000 
00006c75 l       .debug_str	00000000 
00006c68 l       .debug_str	00000000 
00006c17 l       .debug_str	00000000 
0002e725 l       .debug_str	00000000 
00006bcc l       .debug_str	00000000 
00006bc0 l       .debug_str	00000000 
00006b70 l       .debug_str	00000000 
00006b43 l       .debug_str	00000000 
00006b34 l       .debug_str	00000000 
00004cea l       .debug_str	00000000 
00006ae1 l       .debug_str	00000000 
00004cd7 l       .debug_str	00000000 
00006ad8 l       .debug_str	00000000 
00006a8c l       .debug_str	00000000 
00006a77 l       .debug_str	00000000 
0002e3fc l       .debug_str	00000000 
00006a1e l       .debug_str	00000000 
000069ae l       .debug_str	00000000 
0000060a l       .debug_str	00000000 
00003363 l       .debug_str	00000000 
0000003e l       .debug_str	00000000 
00000877 l       .debug_str	00000000 
0000069b l       .debug_str	00000000 
00007551 l       .debug_str	00000000 
00007550 l       .debug_str	00000000 
00000678 l       .debug_str	00000000 
0003386b l       .debug_str	00000000 
00000056 l       .debug_str	00000000 
0000337a l       .debug_str	00000000 
0000338b l       .debug_str	00000000 
0002f63d l       .debug_str	00000000 
0000067f l       .debug_str	00000000 
00000687 l       .debug_str	00000000 
0000068b l       .debug_str	00000000 
00000694 l       .debug_str	00000000 
0002e928 l       .debug_str	00000000 
000052fb l       .debug_str	00000000 
0000556c l       .debug_str	00000000 
00007655 l       .debug_str	00000000 
0000069e l       .debug_str	00000000 
00000bc4 l       .debug_str	00000000 
00000bbb l       .debug_str	00000000 
00002b5a l       .debug_str	00000000 
0000464a l       .debug_str	00000000 
00003396 l       .debug_str	00000000 
00007644 l       .debug_str	00000000 
00006c6e l       .debug_str	00000000 
0000769e l       .debug_str	00000000 
000006dd l       .debug_str	00000000 
00008b18 l       .debug_str	00000000 
00039ad3 l       .debug_str	00000000 
000010dc l       .debug_str	00000000 
00000705 l       .debug_str	00000000 
0000070d l       .debug_str	00000000 
00000718 l       .debug_str	00000000 
00000723 l       .debug_str	00000000 
00000730 l       .debug_str	00000000 
0000073b l       .debug_str	00000000 
00000743 l       .debug_str	00000000 
0000074e l       .debug_str	00000000 
00000759 l       .debug_str	00000000 
00000763 l       .debug_str	00000000 
0000076e l       .debug_str	00000000 
00000779 l       .debug_str	00000000 
00000786 l       .debug_str	00000000 
00000792 l       .debug_str	00000000 
0000079f l       .debug_str	00000000 
000007ad l       .debug_str	00000000 
000007b7 l       .debug_str	00000000 
000075dd l       .debug_str	00000000 
00023650 l       .debug_str	00000000 
000006e0 l       .debug_str	00000000 
000033da l       .debug_str	00000000 
00003392 l       .debug_str	00000000 
00033a5a l       .debug_str	00000000 
0000084d l       .debug_str	00000000 
00000bc9 l       .debug_str	00000000 
00000bce l       .debug_str	00000000 
00008bd1 l       .debug_str	00000000 
00000bd4 l       .debug_str	00000000 
00000cfa l       .debug_str	00000000 
00000ce5 l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
00003402 l       .debug_str	00000000 
0000087e l       .debug_str	00000000 
00003417 l       .debug_str	00000000 
00003452 l       .debug_str	00000000 
00000fae l       .debug_str	00000000 
00002b57 l       .debug_str	00000000 
00002b66 l       .debug_str	00000000 
0002de14 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00000fb7 l       .debug_str	00000000 
000157a6 l       .debug_str	00000000 
00000fbe l       .debug_str	00000000 
00000fca l       .debug_str	00000000 
000007c4 l       .debug_str	00000000 
000007c8 l       .debug_str	00000000 
000007d3 l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000be4 l       .debug_str	00000000 
00000fd2 l       .debug_str	00000000 
00000852 l       .debug_str	00000000 
0000102c l       .debug_str	00000000 
0000108e l       .debug_str	00000000 
00001099 l       .debug_str	00000000 
000010e0 l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00001176 l       .debug_str	00000000 
000011bb l       .debug_str	00000000 
000011c4 l       .debug_str	00000000 
000011d4 l       .debug_str	00000000 
000011dc l       .debug_str	00000000 
00001231 l       .debug_str	00000000 
0000128e l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
000012a3 l       .debug_str	00000000 
000012af l       .debug_str	00000000 
000012bb l       .debug_str	00000000 
000012c4 l       .debug_str	00000000 
000012cc l       .debug_str	00000000 
000004d2 l       .debug_str	00000000 
000012d4 l       .debug_str	00000000 
00001302 l       .debug_str	00000000 
000012e9 l       .debug_str	00000000 
00001309 l       .debug_str	00000000 
00001310 l       .debug_str	00000000 
00001318 l       .debug_str	00000000 
000005b4 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000004e3 l       .debug_str	00000000 
000003a8 l       .debug_str	00000000 
00007fd0 l       .debug_str	00000000 
0000038e l       .debug_str	00000000 
000004dc l       .debug_str	00000000 
00000412 l       .debug_str	00000000 
0002e1b1 l       .debug_str	00000000 
000004a3 l       .debug_str	00000000 
000003a2 l       .debug_str	00000000 
0003456d l       .debug_str	00000000 
0002d67c l       .debug_str	00000000 
0000132b l       .debug_str	00000000 
00001358 l       .debug_str	00000000 
00001294 l       .debug_str	00000000 
0002fa2c l       .debug_str	00000000 
000003e5 l       .debug_str	00000000 
00000534 l       .debug_str	00000000 
00000481 l       .debug_str	00000000 
000003b4 l       .debug_str	00000000 
0000138d l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00001414 l       .debug_str	00000000 
0000046d l       .debug_str	00000000 
0000059e l       .debug_str	00000000 
00000562 l       .debug_str	00000000 
0000147a l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000005a6 l       .debug_str	00000000 
00000593 l       .debug_str	00000000 
00000527 l       .debug_str	00000000 
0000035a l       .debug_str	00000000 
00001498 l       .debug_str	00000000 
0000050c l       .debug_str	00000000 
000004d3 l       .debug_str	00000000 
000003cd l       .debug_str	00000000 
000014ae l       .debug_str	00000000 
000014d4 l       .debug_str	00000000 
00000378 l       .debug_str	00000000 
000014ea l       .debug_str	00000000 
00007680 l       .debug_str	00000000 
000014b3 l       .debug_str	00000000 
00001500 l       .debug_str	00000000 
00024405 l       .debug_str	00000000 
00001517 l       .debug_str	00000000 
0000151f l       .debug_str	00000000 
00001528 l       .debug_str	00000000 
00002a3d l       .debug_str	00000000 
00001531 l       .debug_str	00000000 
0003922b l       .debug_str	00000000 
00001539 l       .debug_str	00000000 
00001545 l       .debug_str	00000000 
00001550 l       .debug_str	00000000 
00001558 l       .debug_str	00000000 
00001660 l       .debug_str	00000000 
0000175c l       .debug_str	00000000 
00001860 l       .debug_str	00000000 
0000186e l       .debug_str	00000000 
00001879 l       .debug_str	00000000 
000018a6 l       .debug_str	00000000 
00001883 l       .debug_str	00000000 
000018b1 l       .debug_str	00000000 
0000192c l       .debug_str	00000000 
000019af l       .debug_str	00000000 
000019bd l       .debug_str	00000000 
00001a1c l       .debug_str	00000000 
00001a83 l       .debug_str	00000000 
00001a99 l       .debug_str	00000000 
00001aa9 l       .debug_str	00000000 
00030974 l       .debug_str	00000000 
0000098e l       .debug_str	00000000 
00001ab8 l       .debug_str	00000000 
00001abe l       .debug_str	00000000 
00001ac4 l       .debug_str	00000000 
00001aca l       .debug_str	00000000 
00001ad6 l       .debug_str	00000000 
0003954b l       .debug_str	00000000 
00001ade l       .debug_str	00000000 
000376f4 l       .debug_str	00000000 
00001ae6 l       .debug_str	00000000 
00001b2c l       .debug_str	00000000 
00001b09 l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b7c l       .debug_str	00000000 
00031123 l       .debug_str	00000000 
00001bc4 l       .debug_str	00000000 
00001bca l       .debug_str	00000000 
00001bd0 l       .debug_str	00000000 
00001bf9 l       .debug_str	00000000 
00001bd6 l       .debug_str	00000000 
00001c0b l       .debug_str	00000000 
00001c4d l       .debug_str	00000000 
000313e0 l       .debug_str	00000000 
00001c97 l       .debug_str	00000000 
00001c9d l       .debug_str	00000000 
00001ca3 l       .debug_str	00000000 
00001ccc l       .debug_str	00000000 
00001ca9 l       .debug_str	00000000 
00001cde l       .debug_str	00000000 
00001d20 l       .debug_str	00000000 
00031c48 l       .debug_str	00000000 
00001d6a l       .debug_str	00000000 
00001d70 l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d7c l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00001d82 l       .debug_str	00000000 
00001db6 l       .debug_str	00000000 
00001df7 l       .debug_str	00000000 
00001e40 l       .debug_str	00000000 
00001e45 l       .debug_str	00000000 
000314eb l       .debug_str	00000000 
00001e4a l       .debug_str	00000000 
00001e50 l       .debug_str	00000000 
00001e56 l       .debug_str	00000000 
00001e7f l       .debug_str	00000000 
00001e5c l       .debug_str	00000000 
00001e90 l       .debug_str	00000000 
00001ed1 l       .debug_str	00000000 
000308bd l       .debug_str	00000000 
00001f1a l       .debug_str	00000000 
00001f46 l       .debug_str	00000000 
00001f23 l       .debug_str	00000000 
00001f57 l       .debug_str	00000000 
00001f98 l       .debug_str	00000000 
00001fe1 l       .debug_str	00000000 
00031870 l       .debug_str	00000000 
00001fe6 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00001ff6 l       .debug_str	00000000 
00002021 l       .debug_str	00000000 
00001ffe l       .debug_str	00000000 
00002033 l       .debug_str	00000000 
00002075 l       .debug_str	00000000 
00031290 l       .debug_str	00000000 
000020bf l       .debug_str	00000000 
000020c5 l       .debug_str	00000000 
000020cb l       .debug_str	00000000 
000020d1 l       .debug_str	00000000 
000020d7 l       .debug_str	00000000 
000020df l       .debug_str	00000000 
000020ed l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
0000210d l       .debug_str	00000000 
00002118 l       .debug_str	00000000 
00002123 l       .debug_str	00000000 
0000212e l       .debug_str	00000000 
00002135 l       .debug_str	00000000 
0000217b l       .debug_str	00000000 
00002158 l       .debug_str	00000000 
0000218d l       .debug_str	00000000 
000021cf l       .debug_str	00000000 
00031b9d l       .debug_str	00000000 
00002219 l       .debug_str	00000000 
00002246 l       .debug_str	00000000 
00002223 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0000229a l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
000022e9 l       .debug_str	00000000 
00002316 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00002328 l       .debug_str	00000000 
0000236a l       .debug_str	00000000 
000023b4 l       .debug_str	00000000 
0001176c l       .debug_str	00000000 
00002433 l       .debug_str	00000000 
000023c8 l       .debug_str	00000000 
000023d8 l       .debug_str	00000000 
000023e1 l       .debug_str	00000000 
000023ec l       .debug_str	00000000 
000023fb l       .debug_str	00000000 
00002410 l       .debug_str	00000000 
00002441 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
00002583 l       .debug_str	00000000 
0000258e l       .debug_str	00000000 
00002597 l       .debug_str	00000000 
000025db l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025ee l       .debug_str	00000000 
00002671 l       .debug_str	00000000 
000026fc l       .debug_str	00000000 
00002718 l       .debug_str	00000000 
00002764 l       .debug_str	00000000 
000027b8 l       .debug_str	00000000 
000027d5 l       .debug_str	00000000 
000027e9 l       .debug_str	00000000 
00002835 l       .debug_str	00000000 
00002889 l       .debug_str	00000000 
0000289f l       .debug_str	00000000 
000028b3 l       .debug_str	00000000 
000028fa l       .debug_str	00000000 
00002949 l       .debug_str	00000000 
00002975 l       .debug_str	00000000 
00002952 l       .debug_str	00000000 
00002983 l       .debug_str	00000000 
00002989 l       .debug_str	00000000 
00002991 l       .debug_str	00000000 
00002998 l       .debug_str	00000000 
000029a0 l       .debug_str	00000000 
000029ab l       .debug_str	00000000 
000029b3 l       .debug_str	00000000 
00007f88 l       .debug_str	00000000 
000029c2 l       .debug_str	00000000 
000029cd l       .debug_str	00000000 
000029d9 l       .debug_str	00000000 
000029e4 l       .debug_str	00000000 
000029f5 l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
00002a03 l       .debug_str	00000000 
00002a0a l       .debug_str	00000000 
00002a14 l       .debug_str	00000000 
00002a1c l       .debug_str	00000000 
00002a24 l       .debug_str	00000000 
00002a46 l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a5d l       .debug_str	00000000 
00002a65 l       .debug_str	00000000 
00002a6e l       .debug_str	00000000 
00000466 l       .debug_str	00000000 
00002a79 l       .debug_str	00000000 
00002a84 l       .debug_str	00000000 
00002a8f l       .debug_str	00000000 
00002a9f l       .debug_str	00000000 
0003086d l       .debug_str	00000000 
00003003 l       .debug_str	00000000 
00002aa9 l       .debug_str	00000000 
00002ae1 l       .debug_str	00000000 
00002b21 l       .debug_str	00000000 
00002b28 l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
0000301c l       .debug_str	00000000 
00002b47 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002bce l       .debug_str	00000000 
00002be3 l       .debug_str	00000000 
00002bec l       .debug_str	00000000 
00002c49 l       .debug_str	00000000 
00002cae l       .debug_str	00000000 
00002cb8 l       .debug_str	00000000 
00002cc8 l       .debug_str	00000000 
00002cdd l       .debug_str	00000000 
00002ce5 l       .debug_str	00000000 
00002d49 l       .debug_str	00000000 
00002db5 l       .debug_str	00000000 
00002dbc l       .debug_str	00000000 
00002dc4 l       .debug_str	00000000 
00002e05 l       .debug_str	00000000 
00002de2 l       .debug_str	00000000 
00002e15 l       .debug_str	00000000 
00002e2a l       .debug_str	00000000 
00002e3d l       .debug_str	00000000 
00002e52 l       .debug_str	00000000 
00002e59 l       .debug_str	00000000 
00002e6e l       .debug_str	00000000 
00001560 l       .debug_str	00000000 
00004c9d l       .debug_str	00000000 
00002b6e l       .debug_str	00000000 
00002b75 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002bbe l       .debug_str	00000000 
00003464 l       .debug_str	00000000 
0002efbf l       .debug_str	00000000 
000034a0 l       .debug_str	00000000 
000034ad l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034c5 l       .debug_str	00000000 
00005181 l       .debug_str	00000000 
000034d2 l       .debug_str	00000000 
00003516 l       .debug_str	00000000 
00003524 l       .debug_str	00000000 
0002f532 l       .debug_str	00000000 
000396a6 l       .debug_str	00000000 
0000352d l       .debug_str	00000000 
0000358f l       .debug_str	00000000 
000035f9 l       .debug_str	00000000 
00003628 l       .debug_str	00000000 
00003607 l       .debug_str	00000000 
0000363c l       .debug_str	00000000 
00003647 l       .debug_str	00000000 
000012be l       .debug_str	00000000 
00006b64 l       .debug_str	00000000 
0000364d l       .debug_str	00000000 
00003692 l       .debug_str	00000000 
000036a0 l       .debug_str	00000000 
000006e4 l       .debug_str	00000000 
00022b16 l       .debug_str	00000000 
0000b9a0 l       .debug_str	00000000 
00000b67 l       .debug_str	00000000 
000006eb l       .debug_str	00000000 
000006f0 l       .debug_str	00000000 
000006f6 l       .debug_str	00000000 
000006fd l       .debug_str	00000000 
000368f3 l       .debug_str	00000000 
0000070a l       .debug_str	00000000 
000036e5 l       .debug_str	00000000 
00007535 l       .debug_str	00000000 
000007de l       .debug_str	00000000 
000036f4 l       .debug_str	00000000 
00003754 l       .debug_str	00000000 
00000843 l       .debug_str	00000000 
00005939 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
000356ed l       .debug_str	00000000 
00000848 l       .debug_str	00000000 
000000c6 l       .debug_str	00000000 
000104b9 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
00000865 l       .debug_str	00000000 
00030827 l       .debug_str	00000000 
0000086f l       .debug_str	00000000 
00004340 l       .debug_str	00000000 
00000892 l       .debug_str	00000000 
0000089e l       .debug_str	00000000 
000008a9 l       .debug_str	00000000 
000008b0 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
00030768 l       .debug_str	00000000 
000347b7 l       .debug_str	00000000 
000008b6 l       .debug_str	00000000 
000008c5 l       .debug_str	00000000 
000008c9 l       .debug_str	00000000 
000008d2 l       .debug_str	00000000 
000008de l       .debug_str	00000000 
00000903 l       .debug_str	00000000 
000008f7 l       .debug_str	00000000 
00000908 l       .debug_str	00000000 
00000912 l       .debug_str	00000000 
00000982 l       .debug_str	00000000 
00000970 l       .debug_str	00000000 
00039631 l       .debug_str	00000000 
0000098d l       .debug_str	00000000 
00000995 l       .debug_str	00000000 
000009ac l       .debug_str	00000000 
000009d0 l       .debug_str	00000000 
0003095c l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00000a15 l       .debug_str	00000000 
00000a05 l       .debug_str	00000000 
0000375d l       .debug_str	00000000 
00003766 l       .debug_str	00000000 
0000377a l       .debug_str	00000000 
0000f431 l       .debug_str	00000000 
00003783 l       .debug_str	00000000 
0000470f l       .debug_str	00000000 
0000378e l       .debug_str	00000000 
0002df61 l       .debug_str	00000000 
00003799 l       .debug_str	00000000 
0000750e l       .debug_str	00000000 
000037f6 l       .debug_str	00000000 
00007514 l       .debug_str	00000000 
00000a1f l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
000007e7 l       .debug_str	00000000 
00003862 l       .debug_str	00000000 
000031b3 l       .debug_str	00000000 
000038aa l       .debug_str	00000000 
00007546 l       .debug_str	00000000 
00000a7c l       .debug_str	00000000 
00000a8a l       .debug_str	00000000 
00000a83 l       .debug_str	00000000 
00000a8f l       .debug_str	00000000 
00035f0a l       .debug_str	00000000 
00000a97 l       .debug_str	00000000 
00000a9c l       .debug_str	00000000 
00000a9f l       .debug_str	00000000 
000338d6 l       .debug_str	00000000 
00000aa8 l       .debug_str	00000000 
00000aaf l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000ab5 l       .debug_str	00000000 
000343c0 l       .debug_str	00000000 
00000abd l       .debug_str	00000000 
00000ae2 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000aeb l       .debug_str	00000000 
00000b0a l       .debug_str	00000000 
00008482 l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
000336b9 l       .debug_str	00000000 
00003907 l       .debug_str	00000000 
0000392f l       .debug_str	00000000 
00003954 l       .debug_str	00000000 
000302b6 l       .debug_str	00000000 
00002fe2 l       .debug_str	00000000 
00002fec l       .debug_str	00000000 
00002ff5 l       .debug_str	00000000 
00000383 l       .debug_str	00000000 
000005bf l       .debug_str	00000000 
00002ffe l       .debug_str	00000000 
00003025 l       .debug_str	00000000 
00003056 l       .debug_str	00000000 
0000303d l       .debug_str	00000000 
00003959 l       .debug_str	00000000 
0000059f l       .debug_str	00000000 
00003966 l       .debug_str	00000000 
00003961 l       .debug_str	00000000 
0000398a l       .debug_str	00000000 
0000397f l       .debug_str	00000000 
000039a3 l       .debug_str	00000000 
000039cb l       .debug_str	00000000 
000039f2 l       .debug_str	00000000 
000039fc l       .debug_str	00000000 
00034e45 l       .debug_str	00000000 
00003a04 l       .debug_str	00000000 
00003a0b l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00003a10 l       .debug_str	00000000 
00003a38 l       .debug_str	00000000 
00003a2e l       .debug_str	00000000 
00003a50 l       .debug_str	00000000 
00003a78 l       .debug_str	00000000 
00003a9e l       .debug_str	00000000 
00003ac6 l       .debug_str	00000000 
00003ae9 l       .debug_str	00000000 
00003af1 l       .debug_str	00000000 
00003afa l       .debug_str	00000000 
00003b08 l       .debug_str	00000000 
00003b0f l       .debug_str	00000000 
00003b16 l       .debug_str	00000000 
00003b26 l       .debug_str	00000000 
00003b2f l       .debug_str	00000000 
00003b3d l       .debug_str	00000000 
00003b4b l       .debug_str	00000000 
00003b57 l       .debug_str	00000000 
0002de2a l       .debug_str	00000000 
00003b63 l       .debug_str	00000000 
00003b72 l       .debug_str	00000000 
00003b7a l       .debug_str	00000000 
00003b93 l       .debug_str	00000000 
00003ba4 l       .debug_str	00000000 
00003bac l       .debug_str	00000000 
00003bdf l       .debug_str	00000000 
00003bc6 l       .debug_str	00000000 
00003beb l       .debug_str	00000000 
000012c7 l       .debug_str	00000000 
00003c1d l       .debug_str	00000000 
00003c04 l       .debug_str	00000000 
00003c28 l       .debug_str	00000000 
00003c31 l       .debug_str	00000000 
00003c65 l       .debug_str	00000000 
00003c4c l       .debug_str	00000000 
00003c72 l       .debug_str	00000000 
00003c7a l       .debug_str	00000000 
00003c9b l       .debug_str	00000000 
00003cb1 l       .debug_str	00000000 
00003cbc l       .debug_str	00000000 
00003ccc l       .debug_str	00000000 
00003cd0 l       .debug_str	00000000 
00003c93 l       .debug_str	00000000 
00003ceb l       .debug_str	00000000 
00003d13 l       .debug_str	00000000 
00003d37 l       .debug_str	00000000 
00003d5f l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
00003dae l       .debug_str	00000000 
00003dda l       .debug_str	00000000 
00003e02 l       .debug_str	00000000 
00003e26 l       .debug_str	00000000 
00003e2f l       .debug_str	00000000 
00003e44 l       .debug_str	00000000 
00003e4f l       .debug_str	00000000 
00003e56 l       .debug_str	00000000 
00003e7e l       .debug_str	00000000 
00003ea1 l       .debug_str	00000000 
00003ec9 l       .debug_str	00000000 
00003efd l       .debug_str	00000000 
00003f25 l       .debug_str	00000000 
00003f5b l       .debug_str	00000000 
00003f83 l       .debug_str	00000000 
00003fbc l       .debug_str	00000000 
00003fe4 l       .debug_str	00000000 
00004015 l       .debug_str	00000000 
0000403d l       .debug_str	00000000 
00031334 l       .debug_str	00000000 
0000406a l       .debug_str	00000000 
0000407d l       .debug_str	00000000 
00004088 l       .debug_str	00000000 
000043a5 l       .debug_str	00000000 
000043b3 l       .debug_str	00000000 
00004098 l       .debug_str	00000000 
000040c0 l       .debug_str	00000000 
000040f4 l       .debug_str	00000000 
000395bc l       .debug_str	00000000 
00007a52 l       .debug_str	00000000 
00039a68 l       .debug_str	00000000 
00039fd1 l       .debug_str	00000000 
00004121 l       .debug_str	00000000 
000041b6 l       .debug_str	00000000 
00034b0c l       .debug_str	00000000 
000041c2 l       .debug_str	00000000 
000041dd l       .debug_str	00000000 
000041c6 l       .debug_str	00000000 
000381af l       .debug_str	00000000 
000041ea l       .debug_str	00000000 
00000ba7 l       .debug_str	00000000 
00000cd9 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c50 l       .debug_str	00000000 
00036975 l       .debug_str	00000000 
00000c65 l       .debug_str	00000000 
00000c6e l       .debug_str	00000000 
00000c78 l       .debug_str	00000000 
00000c7d l       .debug_str	00000000 
00000c83 l       .debug_str	00000000 
00000c88 l       .debug_str	00000000 
00008476 l       .debug_str	00000000 
00004228 l       .debug_str	00000000 
00000f2e l       .debug_str	00000000 
00000f55 l       .debug_str	00000000 
0003821c l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0002d4a7 l       .debug_str	00000000 
0000426c l       .debug_str	00000000 
00004297 l       .debug_str	00000000 
0002d5fc l       .debug_str	00000000 
0000760d l       .debug_str	00000000 
0000429e l       .debug_str	00000000 
00032f8c l       .debug_str	00000000 
000042a3 l       .debug_str	00000000 
000042b4 l       .debug_str	00000000 
000042cd l       .debug_str	00000000 
000042d0 l       .debug_str	00000000 
000042e1 l       .debug_str	00000000 
00000a8b l       .debug_str	00000000 
000042fa l       .debug_str	00000000 
0000430f l       .debug_str	00000000 
0000432c l       .debug_str	00000000 
00004336 l       .debug_str	00000000 
0000433b l       .debug_str	00000000 
00004348 l       .debug_str	00000000 
0000434f l       .debug_str	00000000 
00004357 l       .debug_str	00000000 
0000435f l       .debug_str	00000000 
00004366 l       .debug_str	00000000 
0000438f l       .debug_str	00000000 
00004372 l       .debug_str	00000000 
0000436d l       .debug_str	00000000 
0000439a l       .debug_str	00000000 
000043c1 l       .debug_str	00000000 
0000440d l       .debug_str	00000000 
00004461 l       .debug_str	00000000 
0000447a l       .debug_str	00000000 
000044a2 l       .debug_str	00000000 
000044db l       .debug_str	00000000 
00004503 l       .debug_str	00000000 
0000452e l       .debug_str	00000000 
00004537 l       .debug_str	00000000 
00004579 l       .debug_str	00000000 
000045c3 l       .debug_str	00000000 
000045ca l       .debug_str	00000000 
0002ea13 l       .debug_str	00000000 
000045d8 l       .debug_str	00000000 
00004600 l       .debug_str	00000000 
0000462d l       .debug_str	00000000 
00004635 l       .debug_str	00000000 
0000463f l       .debug_str	00000000 
00037ac3 l       .debug_str	00000000 
0002f4b3 l       .debug_str	00000000 
00004645 l       .debug_str	00000000 
0000464e l       .debug_str	00000000 
00004664 l       .debug_str	00000000 
00004682 l       .debug_str	00000000 
0000468b l       .debug_str	00000000 
00004694 l       .debug_str	00000000 
000046aa l       .debug_str	00000000 
000046c8 l       .debug_str	00000000 
000046d2 l       .debug_str	00000000 
000046cd l       .debug_str	00000000 
000046d6 l       .debug_str	00000000 
000046ec l       .debug_str	00000000 
0002f21e l       .debug_str	00000000 
0002f954 l       .debug_str	00000000 
0000470a l       .debug_str	00000000 
00004714 l       .debug_str	00000000 
0000472b l       .debug_str	00000000 
0000474a l       .debug_str	00000000 
0002f3ea l       .debug_str	00000000 
00004754 l       .debug_str	00000000 
0002f677 l       .debug_str	00000000 
0002f963 l       .debug_str	00000000 
00004761 l       .debug_str	00000000 
000047af l       .debug_str	00000000 
00030428 l       .debug_str	00000000 
00004805 l       .debug_str	00000000 
0000480a l       .debug_str	00000000 
00004810 l       .debug_str	00000000 
00004819 l       .debug_str	00000000 
00004842 l       .debug_str	00000000 
00004890 l       .debug_str	00000000 
000049b4 l       .debug_str	00000000 
000048e6 l       .debug_str	00000000 
0000490f l       .debug_str	00000000 
0000495d l       .debug_str	00000000 
000049b3 l       .debug_str	00000000 
000049bd l       .debug_str	00000000 
000049e6 l       .debug_str	00000000 
00004a34 l       .debug_str	00000000 
00004a8a l       .debug_str	00000000 
00004a90 l       .debug_str	00000000 
00004ab9 l       .debug_str	00000000 
00004b07 l       .debug_str	00000000 
00004b5d l       .debug_str	00000000 
00004b66 l       .debug_str	00000000 
00004b8f l       .debug_str	00000000 
00004bdd l       .debug_str	00000000 
00004c33 l       .debug_str	00000000 
0003146a l       .debug_str	00000000 
00004c4e l       .debug_str	00000000 
00004c57 l       .debug_str	00000000 
00004c5e l       .debug_str	00000000 
00004c6b l       .debug_str	00000000 
00006930 l       .debug_str	00000000 
080017de l     F .text	00000052 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0aa02af027a21484E
08001830 l     F .text	0000003a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h24a37d0be695a87dE
0800186a l     F .text	0000003c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e18813c7e529e80E
080018a6 l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h6cddc1d5a292b1e6E
20000118 l     O .data	00000018 _ZN6mynewt2hw6sensor17LISTENER_INTERNAL17h8e78dc4f5758a23eE
0800194a l     F .text	00000004 _ZN6mynewt2hw6sensor21null_sensor_data_func17hb73afa768c6c9e6aE
00000000 l    df *ABS*	00000000 core.6gxsn4hc-cgu.0
0000060a l       .debug_str	00000000 
000076e5 l       .debug_str	00000000 
000076f8 l       .debug_str	00000000 
00007644 l       .debug_str	00000000 
0002df61 l       .debug_str	00000000 
00007729 l       .debug_str	00000000 
00007731 l       .debug_str	00000000 
0000773a l       .debug_str	00000000 
00007783 l       .debug_str	00000000 
0000769e l       .debug_str	00000000 
0000087e l       .debug_str	00000000 
00007741 l       .debug_str	00000000 
00007780 l       .debug_str	00000000 
00007789 l       .debug_str	00000000 
000077cb l       .debug_str	00000000 
000077d5 l       .debug_str	00000000 
00007818 l       .debug_str	00000000 
00007822 l       .debug_str	00000000 
00007865 l       .debug_str	00000000 
0000786f l       .debug_str	00000000 
000078b2 l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00007902 l       .debug_str	00000000 
0000790d l       .debug_str	00000000 
00007952 l       .debug_str	00000000 
00007958 l       .debug_str	00000000 
00000687 l       .debug_str	00000000 
0001176c l       .debug_str	00000000 
00003ccc l       .debug_str	00000000 
00007f88 l       .debug_str	00000000 
00007965 l       .debug_str	00000000 
00007969 l       .debug_str	00000000 
00007979 l       .debug_str	00000000 
00000877 l       .debug_str	00000000 
00003320 l       .debug_str	00000000 
000007de l       .debug_str	00000000 
000079bf l       .debug_str	00000000 
000079d4 l       .debug_str	00000000 
00007a52 l       .debug_str	00000000 
000079de l       .debug_str	00000000 
000079e7 l       .debug_str	00000000 
00000a8b l       .debug_str	00000000 
000008b0 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
0000069b l       .debug_str	00000000 
00000694 l       .debug_str	00000000 
00039631 l       .debug_str	00000000 
0000098d l       .debug_str	00000000 
0000098e l       .debug_str	00000000 
00007551 l       .debug_str	00000000 
00039ad3 l       .debug_str	00000000 
000079ef l       .debug_str	00000000 
00008453 l       .debug_str	00000000 
00008627 l       .debug_str	00000000 
000356ed l       .debug_str	00000000 
00007a00 l       .debug_str	00000000 
0002ed0b l       .debug_str	00000000 
0002d9e0 l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
00007a12 l       .debug_str	00000000 
0002de14 l       .debug_str	00000000 
0000084d l       .debug_str	00000000 
000000c6 l       .debug_str	00000000 
00037904 l       .debug_str	00000000 
000313c4 l       .debug_str	00000000 
00007a1c l       .debug_str	00000000 
00007a21 l       .debug_str	00000000 
00036e7d l       .debug_str	00000000 
00007a2c l       .debug_str	00000000 
000002f2 l       .debug_str	00000000 
00007a36 l       .debug_str	00000000 
000080cc l       .debug_str	00000000 
00007a40 l       .debug_str	00000000 
000052fb l       .debug_str	00000000 
0000810c l       .debug_str	00000000 
00000852 l       .debug_str	00000000 
000082f6 l       .debug_str	00000000 
00007a4e l       .debug_str	00000000 
00007a57 l       .debug_str	00000000 
00007a59 l       .debug_str	00000000 
00007acd l       .debug_str	00000000 
0000838f l       .debug_str	00000000 
00007ae5 l       .debug_str	00000000 
00008112 l       .debug_str	00000000 
000080ec l       .debug_str	00000000 
00008127 l       .debug_str	00000000 
00008469 l       .debug_str	00000000 
00008358 l       .debug_str	00000000 
00007aea l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
000083e0 l       .debug_str	00000000 
00008423 l       .debug_str	00000000 
00007b74 l       .debug_str	00000000 
000177d1 l       .debug_str	00000000 
00030045 l       .debug_str	00000000 
00039fd1 l       .debug_str	00000000 
0000849b l       .debug_str	00000000 
00008327 l       .debug_str	00000000 
00007be8 l       .debug_str	00000000 
00034b0c l       .debug_str	00000000 
00007c40 l       .debug_str	00000000 
00007c48 l       .debug_str	00000000 
00007c50 l       .debug_str	00000000 
0000068b l       .debug_str	00000000 
0002e928 l       .debug_str	00000000 
00000a8a l       .debug_str	00000000 
00007c59 l       .debug_str	00000000 
00007c60 l       .debug_str	00000000 
00007c6c l       .debug_str	00000000 
00007c73 l       .debug_str	00000000 
00007c7d l       .debug_str	00000000 
00007c8a l       .debug_str	00000000 
00007c97 l       .debug_str	00000000 
0000470f l       .debug_str	00000000 
00007cac l       .debug_str	00000000 
00030d8b l       .debug_str	00000000 
00007cb5 l       .debug_str	00000000 
00007cc9 l       .debug_str	00000000 
00037f7c l       .debug_str	00000000 
0000556c l       .debug_str	00000000 
00007cdf l       .debug_str	00000000 
00007ce4 l       .debug_str	00000000 
00007cf6 l       .debug_str	00000000 
00007d1e l       .debug_str	00000000 
00007d28 l       .debug_str	00000000 
00007d38 l       .debug_str	00000000 
00007d91 l       .debug_str	00000000 
00007d99 l       .debug_str	00000000 
00007da6 l       .debug_str	00000000 
00007db3 l       .debug_str	00000000 
00008501 l       .debug_str	00000000 
00033f45 l       .debug_str	00000000 
00007dc0 l       .debug_str	00000000 
00007ded l       .debug_str	00000000 
00007e1c l       .debug_str	00000000 
00007e43 l       .debug_str	00000000 
00007e62 l       .debug_str	00000000 
00007e72 l       .debug_str	00000000 
00022b16 l       .debug_str	00000000 
00007ea4 l       .debug_str	00000000 
00007eb3 l       .debug_str	00000000 
00007ebe l       .debug_str	00000000 
0000377a l       .debug_str	00000000 
00030827 l       .debug_str	00000000 
0000086f l       .debug_str	00000000 
00004340 l       .debug_str	00000000 
00000892 l       .debug_str	00000000 
0000089e l       .debug_str	00000000 
00007ef3 l       .debug_str	00000000 
00007f1e l       .debug_str	00000000 
00007efe l       .debug_str	00000000 
00007f04 l       .debug_str	00000000 
00031eaf l       .debug_str	00000000 
000340a0 l       .debug_str	00000000 
00007f29 l       .debug_str	00000000 
00032e6c l       .debug_str	00000000 
00008b18 l       .debug_str	00000000 
00008b11 l       .debug_str	00000000 
00007f2f l       .debug_str	00000000 
00008b3f l       .debug_str	00000000 
00008b73 l       .debug_str	00000000 
00007f35 l       .debug_str	00000000 
00015299 l       .debug_str	00000000 
00007f73 l       .debug_str	00000000 
00008b1c l       .debug_str	00000000 
00008b69 l       .debug_str	00000000 
00007f54 l       .debug_str	00000000 
00007f41 l       .debug_str	00000000 
00007f5a l       .debug_str	00000000 
00007f82 l       .debug_str	00000000 
00007f87 l       .debug_str	00000000 
00007f8c l       .debug_str	00000000 
00007f92 l       .debug_str	00000000 
00007f9a l       .debug_str	00000000 
000243b0 l       .debug_str	00000000 
000148c8 l       .debug_str	00000000 
00021853 l       .debug_str	00000000 
00007f9f l       .debug_str	00000000 
00007fc7 l       .debug_str	00000000 
00007fa9 l       .debug_str	00000000 
0000556b l       .debug_str	00000000 
00007fd0 l       .debug_str	00000000 
00007fcf l       .debug_str	00000000 
000052fa l       .debug_str	00000000 
0000464a l       .debug_str	00000000 
0000750e l       .debug_str	00000000 
00007fd4 l       .debug_str	00000000 
00007fdc l       .debug_str	00000000 
000149f6 l       .debug_str	00000000 
00007fe2 l       .debug_str	00000000 
00008009 l       .debug_str	00000000 
00007fed l       .debug_str	00000000 
00007d32 l       .debug_str	00000000 
00008011 l       .debug_str	00000000 
0000802e l       .debug_str	00000000 
00008019 l       .debug_str	00000000 
0000803d l       .debug_str	00000000 
00008041 l       .debug_str	00000000 
0000804e l       .debug_str	00000000 
00008057 l       .debug_str	00000000 
0002d4dd l       .debug_str	00000000 
0000806d l       .debug_str	00000000 
00008061 l       .debug_str	00000000 
0000807a l       .debug_str	00000000 
00008082 l       .debug_str	00000000 
0000808e l       .debug_str	00000000 
000080b1 l       .debug_str	00000000 
0000809b l       .debug_str	00000000 
000080bf l       .debug_str	00000000 
000080df l       .debug_str	00000000 
000080ff l       .debug_str	00000000 
0000811a l       .debug_str	00000000 
00008135 l       .debug_str	00000000 
0000813b l       .debug_str	00000000 
0000813f l       .debug_str	00000000 
00008150 l       .debug_str	00000000 
00008143 l       .debug_str	00000000 
0000332c l       .debug_str	00000000 
00008161 l       .debug_str	00000000 
00008160 l       .debug_str	00000000 
00000a7c l       .debug_str	00000000 
00000a83 l       .debug_str	00000000 
00000a8f l       .debug_str	00000000 
0000b9a0 l       .debug_str	00000000 
00000b67 l       .debug_str	00000000 
00035f0a l       .debug_str	00000000 
00000a97 l       .debug_str	00000000 
00000a9c l       .debug_str	00000000 
00000a9f l       .debug_str	00000000 
000338d6 l       .debug_str	00000000 
00000848 l       .debug_str	00000000 
0003954b l       .debug_str	00000000 
000006eb l       .debug_str	00000000 
000006f0 l       .debug_str	00000000 
000006f6 l       .debug_str	00000000 
000006fd l       .debug_str	00000000 
000368f3 l       .debug_str	00000000 
000012be l       .debug_str	00000000 
00000865 l       .debug_str	00000000 
00000aa8 l       .debug_str	00000000 
00000aaf l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000ab5 l       .debug_str	00000000 
000343c0 l       .debug_str	00000000 
000104b9 l       .debug_str	00000000 
00000abd l       .debug_str	00000000 
00000ae2 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000aeb l       .debug_str	00000000 
00000b0a l       .debug_str	00000000 
0003095c l       .debug_str	00000000 
00030768 l       .debug_str	00000000 
000347b7 l       .debug_str	00000000 
000008b6 l       .debug_str	00000000 
000008c5 l       .debug_str	00000000 
000008c9 l       .debug_str	00000000 
000008d2 l       .debug_str	00000000 
000008de l       .debug_str	00000000 
00000903 l       .debug_str	00000000 
000008f7 l       .debug_str	00000000 
00000908 l       .debug_str	00000000 
00006c6e l       .debug_str	00000000 
000006dd l       .debug_str	00000000 
000006e0 l       .debug_str	00000000 
000006e4 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
000008a9 l       .debug_str	00000000 
00000995 l       .debug_str	00000000 
000009ac l       .debug_str	00000000 
000009d0 l       .debug_str	00000000 
00000a15 l       .debug_str	00000000 
00000a05 l       .debug_str	00000000 
00000912 l       .debug_str	00000000 
00000982 l       .debug_str	00000000 
00000970 l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00008482 l       .debug_str	00000000 
00008476 l       .debug_str	00000000 
00008175 l       .debug_str	00000000 
00008166 l       .debug_str	00000000 
0003094e l       .debug_str	00000000 
0002d4bd l       .debug_str	00000000 
00003330 l       .debug_str	00000000 
0000335a l       .debug_str	00000000 
0000334c l       .debug_str	00000000 
00003326 l       .debug_str	00000000 
00007546 l       .debug_str	00000000 
000081b3 l       .debug_str	00000000 
00008193 l       .debug_str	00000000 
0000820c l       .debug_str	00000000 
000081ec l       .debug_str	00000000 
0002d4cf l       .debug_str	00000000 
00008263 l       .debug_str	00000000 
00008268 l       .debug_str	00000000 
0000826e l       .debug_str	00000000 
00008291 l       .debug_str	00000000 
00008273 l       .debug_str	00000000 
0000829c l       .debug_str	00000000 
000082e7 l       .debug_str	00000000 
00008318 l       .debug_str	00000000 
00008349 l       .debug_str	00000000 
00008378 l       .debug_str	00000000 
000083c9 l       .debug_str	00000000 
00008414 l       .debug_str	00000000 
00008445 l       .debug_str	00000000 
0000845c l       .debug_str	00000000 
00008475 l       .debug_str	00000000 
0000848c l       .debug_str	00000000 
000084cc l       .debug_str	00000000 
000084ba l       .debug_str	00000000 
000084b9 l       .debug_str	00000000 
000084d7 l       .debug_str	00000000 
000084e0 l       .debug_str	00000000 
000084ed l       .debug_str	00000000 
000084ec l       .debug_str	00000000 
000084f5 l       .debug_str	00000000 
00008522 l       .debug_str	00000000 
0000850d l       .debug_str	00000000 
0000853f l       .debug_str	00000000 
0000854b l       .debug_str	00000000 
000085f5 l       .debug_str	00000000 
00008557 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
00008567 l       .debug_str	00000000 
00008575 l       .debug_str	00000000 
0000857c l       .debug_str	00000000 
00008584 l       .debug_str	00000000 
0000858b l       .debug_str	00000000 
000085d1 l       .debug_str	00000000 
000085ac l       .debug_str	00000000 
00008597 l       .debug_str	00000000 
000085bc l       .debug_str	00000000 
000085e0 l       .debug_str	00000000 
00008610 l       .debug_str	00000000 
00008601 l       .debug_str	00000000 
0000861b l       .debug_str	00000000 
000374cc l       .debug_str	00000000 
00008644 l       .debug_str	00000000 
0000862d l       .debug_str	00000000 
00008662 l       .debug_str	00000000 
00008685 l       .debug_str	00000000 
0000866e l       .debug_str	00000000 
000086cf l       .debug_str	00000000 
000086c3 l       .debug_str	00000000 
00007d2d l       .debug_str	00000000 
000086ec l       .debug_str	00000000 
000086d5 l       .debug_str	00000000 
00008735 l       .debug_str	00000000 
0000875d l       .debug_str	00000000 
00008746 l       .debug_str	00000000 
000338ca l       .debug_str	00000000 
000020cf l       .debug_str	00000000 
00033e60 l       .debug_str	00000000 
0000880c l       .debug_str	00000000 
000087ee l       .debug_str	00000000 
00008902 l       .debug_str	00000000 
000088e2 l       .debug_str	00000000 
00008975 l       .debug_str	00000000 
00008955 l       .debug_str	00000000 
00039993 l       .debug_str	00000000 
000089c8 l       .debug_str	00000000 
000089cc l       .debug_str	00000000 
00030185 l       .debug_str	00000000 
00038496 l       .debug_str	00000000 
000089cf l       .debug_str	00000000 
000089d2 l       .debug_str	00000000 
00008a98 l       .debug_str	00000000 
000089d6 l       .debug_str	00000000 
000089d5 l       .debug_str	00000000 
000089db l       .debug_str	00000000 
00008ae6 l       .debug_str	00000000 
0002ed1e l       .debug_str	00000000 
000089f9 l       .debug_str	00000000 
000089e7 l       .debug_str	00000000 
00008a1e l       .debug_str	00000000 
00008aad l       .debug_str	00000000 
00008a3c l       .debug_str	00000000 
00008a2a l       .debug_str	00000000 
00008a61 l       .debug_str	00000000 
00008a7a l       .debug_str	00000000 
00008a68 l       .debug_str	00000000 
00008a86 l       .debug_str	00000000 
00008a9e l       .debug_str	00000000 
00008ad7 l       .debug_str	00000000 
00008b10 l       .debug_str	00000000 
00008b1b l       .debug_str	00000000 
00008b3e l       .debug_str	00000000 
00008b72 l       .debug_str	00000000 
00008b88 l       .debug_str	00000000 
00008ba7 l       .debug_str	00000000 
00008b91 l       .debug_str	00000000 
00008bbf l       .debug_str	00000000 
00008bb3 l       .debug_str	00000000 
00008bcd l       .debug_str	00000000 
00008bcc l       .debug_str	00000000 
000010dc l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00008bd1 l       .debug_str	00000000 
00008bd0 l       .debug_str	00000000 
000046d2 l       .debug_str	00000000 
00008bd5 l       .debug_str	00000000 
00008bda l       .debug_str	00000000 
00008c21 l       .debug_str	00000000 
00008c2f l       .debug_str	00000000 
00008c39 l       .debug_str	00000000 
0001a5da l       .debug_str	00000000 
0003163d l       .debug_str	00000000 
00008c40 l       .debug_str	00000000 
00008c49 l       .debug_str	00000000 
00008c84 l       .debug_str	00000000 
00008c8e l       .debug_str	00000000 
00008d15 l       .debug_str	00000000 
00008d24 l       .debug_str	00000000 
00008dae l       .debug_str	00000000 
00008e2a l       .debug_str	00000000 
00008e5a l       .debug_str	00000000 
000057a1 l       .debug_str	00000000 
00008ed1 l       .debug_str	00000000 
00008f1f l       .debug_str	00000000 
00008f2f l       .debug_str	00000000 
00008f7a l       .debug_str	00000000 
00008f88 l       .debug_str	00000000 
00009016 l       .debug_str	00000000 
00009025 l       .debug_str	00000000 
0000907a l       .debug_str	00000000 
00009083 l       .debug_str	00000000 
000090cc l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000090d8 l       .debug_str	00000000 
000090e1 l       .debug_str	00000000 
000090f7 l       .debug_str	00000000 
00009104 l       .debug_str	00000000 
00009149 l       .debug_str	00000000 
0000915d l       .debug_str	00000000 
00005822 l       .debug_str	00000000 
000091a6 l       .debug_str	00000000 
00005883 l       .debug_str	00000000 
000091eb l       .debug_str	00000000 
00005028 l       .debug_str	00000000 
00009234 l       .debug_str	00000000 
00005091 l       .debug_str	00000000 
00009279 l       .debug_str	00000000 
000092b3 l       .debug_str	00000000 
000092bc l       .debug_str	00000000 
000092f9 l       .debug_str	00000000 
00009304 l       .debug_str	00000000 
00009350 l       .debug_str	00000000 
00009368 l       .debug_str	00000000 
000093ca l       .debug_str	00000000 
0000588b l       .debug_str	00000000 
00031b55 l       .debug_str	00000000 
00009f01 l       .debug_str	00000000 
000093ff l       .debug_str	00000000 
00009428 l       .debug_str	00000000 
00009433 l       .debug_str	00000000 
00009458 l       .debug_str	00000000 
0000945c l       .debug_str	00000000 
000094eb l       .debug_str	00000000 
00009522 l       .debug_str	00000000 
000095a8 l       .debug_str	00000000 
000095ee l       .debug_str	00000000 
000095f7 l       .debug_str	00000000 
00009680 l       .debug_str	00000000 
00009693 l       .debug_str	00000000 
000096de l       .debug_str	00000000 
00009726 l       .debug_str	00000000 
000097ac l       .debug_str	00000000 
00009801 l       .debug_str	00000000 
0000980a l       .debug_str	00000000 
00009866 l       .debug_str	00000000 
000098e9 l       .debug_str	00000000 
000098f4 l       .debug_str	00000000 
0000997a l       .debug_str	00000000 
000099ef l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
00009a1b l       .debug_str	00000000 
00009a24 l       .debug_str	00000000 
00009a2d l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009b11 l       .debug_str	00000000 
00009b9a l       .debug_str	00000000 
00009ba9 l       .debug_str	00000000 
00009c3d l       .debug_str	00000000 
00009c63 l       .debug_str	00000000 
00009cdf l       .debug_str	00000000 
000054e6 l       .debug_str	00000000 
00009d1a l       .debug_str	00000000 
00009d7f l       .debug_str	00000000 
00009d86 l       .debug_str	00000000 
00009de4 l       .debug_str	00000000 
00009df5 l       .debug_str	00000000 
00009e02 l       .debug_str	00000000 
00009e3b l       .debug_str	00000000 
00009e51 l       .debug_str	00000000 
00009e91 l       .debug_str	00000000 
00009e9d l       .debug_str	00000000 
00009efa l       .debug_str	00000000 
00009f05 l       .debug_str	00000000 
00009f35 l       .debug_str	00000000 
00009f61 l       .debug_str	00000000 
00009fcd l       .debug_str	00000000 
00009fd9 l       .debug_str	00000000 
0000a009 l       .debug_str	00000000 
0000a045 l       .debug_str	00000000 
0000a08f l       .debug_str	00000000 
0000a09f l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000a0d4 l       .debug_str	00000000 
0000a119 l       .debug_str	00000000 
0000a124 l       .debug_str	00000000 
0000a164 l       .debug_str	00000000 
0000a172 l       .debug_str	00000000 
0000a1fe l       .debug_str	00000000 
0000a27a l       .debug_str	00000000 
0000a29a l       .debug_str	00000000 
0000a2f4 l       .debug_str	00000000 
0000a301 l       .debug_str	00000000 
000219d9 l       .debug_str	00000000 
0000a339 l       .debug_str	00000000 
0000a372 l       .debug_str	00000000 
00039a68 l       .debug_str	00000000 
0000a37a l       .debug_str	00000000 
000041b6 l       .debug_str	00000000 
0000a40f l       .debug_str	00000000 
0000901b l       .debug_str	00000000 
0000a456 l       .debug_str	00000000 
0000a4ce l       .debug_str	00000000 
0000a505 l       .debug_str	00000000 
0000a54e l       .debug_str	00000000 
0000a599 l       .debug_str	00000000 
0000a5d8 l       .debug_str	00000000 
0000a5fc l       .debug_str	00000000 
0000a644 l       .debug_str	00000000 
0000a651 l       .debug_str	00000000 
0000a6a8 l       .debug_str	00000000 
00032795 l       .debug_str	00000000 
0000a6b4 l       .debug_str	00000000 
0000a711 l       .debug_str	00000000 
0000a73d l       .debug_str	00000000 
0000a74a l       .debug_str	00000000 
0000a7b1 l       .debug_str	00000000 
00007697 l       .debug_str	00000000 
0000a7fb l       .debug_str	00000000 
0000a80d l       .debug_str	00000000 
0000a817 l       .debug_str	00000000 
0000a859 l       .debug_str	00000000 
0000a8e0 l       .debug_str	00000000 
0000a8ee l       .debug_str	00000000 
0000a96a l       .debug_str	00000000 
0000a997 l       .debug_str	00000000 
0000aa0e l       .debug_str	00000000 
0000aa17 l       .debug_str	00000000 
0000f5c9 l       .debug_str	00000000 
0000aa60 l       .debug_str	00000000 
0000aaa6 l       .debug_str	00000000 
0000aaae l       .debug_str	00000000 
0000ab3e l       .debug_str	00000000 
0000ab54 l       .debug_str	00000000 
0000ab5c l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
0000ab7d l       .debug_str	00000000 
0000abc2 l       .debug_str	00000000 
0000abd5 l       .debug_str	00000000 
0003821c l       .debug_str	00000000 
0000abdf l       .debug_str	00000000 
0000abe2 l       .debug_str	00000000 
0000ac1a l       .debug_str	00000000 
0000ac24 l       .debug_str	00000000 
0000ac60 l       .debug_str	00000000 
0000ac6d l       .debug_str	00000000 
0000acb3 l       .debug_str	00000000 
0000acc0 l       .debug_str	00000000 
0000ce55 l       .debug_str	00000000 
0000acf2 l       .debug_str	00000000 
0000ad42 l       .debug_str	00000000 
0000ad59 l       .debug_str	00000000 
0000ad6d l       .debug_str	00000000 
0000adca l       .debug_str	00000000 
0000add9 l       .debug_str	00000000 
0000ae63 l       .debug_str	00000000 
0000aedf l       .debug_str	00000000 
0000af0e l       .debug_str	00000000 
0000af1f l       .debug_str	00000000 
0000af79 l       .debug_str	00000000 
0000af88 l       .debug_str	00000000 
0000b00b l       .debug_str	00000000 
0000b015 l       .debug_str	00000000 
0000b09b l       .debug_str	00000000 
0000b110 l       .debug_str	00000000 
0000b13b l       .debug_str	00000000 
0000b1c4 l       .debug_str	00000000 
0000b203 l       .debug_str	00000000 
0000b27c l       .debug_str	00000000 
0000b292 l       .debug_str	00000000 
0000b29b l       .debug_str	00000000 
0000b2eb l       .debug_str	00000000 
0000b2f5 l       .debug_str	00000000 
0000b38c l       .debug_str	00000000 
0000b3a4 l       .debug_str	00000000 
0000b43b l       .debug_str	00000000 
0000b474 l       .debug_str	00000000 
0000b48d l       .debug_str	00000000 
00007fd9 l       .debug_str	00000000 
0000b4f2 l       .debug_str	00000000 
0000b53d l       .debug_str	00000000 
0000b584 l       .debug_str	00000000 
000058e2 l       .debug_str	00000000 
0000b5d9 l       .debug_str	00000000 
0000b5dd l       .debug_str	00000000 
0000b99e l       .debug_str	00000000 
0000b5e2 l       .debug_str	00000000 
0002ff23 l       .debug_str	00000000 
00005223 l       .debug_str	00000000 
0000b614 l       .debug_str	00000000 
0000526c l       .debug_str	00000000 
0000b652 l       .debug_str	00000000 
000052db l       .debug_str	00000000 
0000b6a5 l       .debug_str	00000000 
0000b731 l       .debug_str	00000000 
0000b73f l       .debug_str	00000000 
0000b7bb l       .debug_str	00000000 
0000b7da l       .debug_str	00000000 
0000b825 l       .debug_str	00000000 
0000b832 l       .debug_str	00000000 
0000b874 l       .debug_str	00000000 
0000b884 l       .debug_str	00000000 
0000b8f8 l       .debug_str	00000000 
0000b917 l       .debug_str	00000000 
0000b962 l       .debug_str	00000000 
0000b983 l       .debug_str	00000000 
0000b9a3 l       .debug_str	00000000 
0000b9bd l       .debug_str	00000000 
0000b9e4 l       .debug_str	00000000 
0000ba03 l       .debug_str	00000000 
0000ba45 l       .debug_str	00000000 
000128bf l       .debug_str	00000000 
00024234 l       .debug_str	00000000 
0000ba6e l       .debug_str	00000000 
0000ba8a l       .debug_str	00000000 
0000ba94 l       .debug_str	00000000 
0000bb20 l       .debug_str	00000000 
0000bb9c l       .debug_str	00000000 
0000bbcd l       .debug_str	00000000 
0000bc59 l       .debug_str	00000000 
0000bc6b l       .debug_str	00000000 
0000bcf3 l       .debug_str	00000000 
0000bd68 l       .debug_str	00000000 
0000bd95 l       .debug_str	00000000 
0000bde0 l       .debug_str	00000000 
0000be28 l       .debug_str	00000000 
0000beab l       .debug_str	00000000 
0000becb l       .debug_str	00000000 
0000bf51 l       .debug_str	00000000 
0000bfc6 l       .debug_str	00000000 
0000c007 l       .debug_str	00000000 
0000c011 l       .debug_str	00000000 
0000c03a l       .debug_str	00000000 
0000c045 l       .debug_str	00000000 
0000c06a l       .debug_str	00000000 
0000c0a3 l       .debug_str	00000000 
0000c0ab l       .debug_str	00000000 
0000c17d l       .debug_str	00000000 
0000c0f2 l       .debug_str	00000000 
0000c178 l       .debug_str	00000000 
0000c186 l       .debug_str	00000000 
0000c1c7 l       .debug_str	00000000 
0000c1ea l       .debug_str	00000000 
0000c225 l       .debug_str	00000000 
0000c22f l       .debug_str	00000000 
0000c2b9 l       .debug_str	00000000 
0000c2eb l       .debug_str	00000000 
0000c35f l       .debug_str	00000000 
0000c3a1 l       .debug_str	00000000 
0000c44a l       .debug_str	00000000 
0000c45b l       .debug_str	00000000 
0000c4d7 l       .debug_str	00000000 
0000c4fc l       .debug_str	00000000 
0000c502 l       .debug_str	00000000 
0000c54f l       .debug_str	00000000 
0000c5a2 l       .debug_str	00000000 
0000c5aa l       .debug_str	00000000 
0000c5b0 l       .debug_str	00000000 
000006de l       .debug_str	00000000 
0000c5b4 l       .debug_str	00000000 
0000c5bd l       .debug_str	00000000 
0000c622 l       .debug_str	00000000 
0000c631 l       .debug_str	00000000 
0000c696 l       .debug_str	00000000 
0000c6e0 l       .debug_str	00000000 
0000c6ef l       .debug_str	00000000 
0000c725 l       .debug_str	00000000 
0000c72e l       .debug_str	00000000 
0000c772 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7c3 l       .debug_str	00000000 
0000c7ce l       .debug_str	00000000 
000051f0 l       .debug_str	00000000 
0000c831 l       .debug_str	00000000 
00007d96 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
000054dc l       .debug_str	00000000 
0000c903 l       .debug_str	00000000 
0000c965 l       .debug_str	00000000 
0000c96d l       .debug_str	00000000 
0000c9b3 l       .debug_str	00000000 
0000c9c1 l       .debug_str	00000000 
0000ca09 l       .debug_str	00000000 
0000ca13 l       .debug_str	00000000 
0000ca54 l       .debug_str	00000000 
0000ca6e l       .debug_str	00000000 
0000ca73 l       .debug_str	00000000 
0000ca83 l       .debug_str	00000000 
0000cacc l       .debug_str	00000000 
0000cada l       .debug_str	00000000 
0000cb22 l       .debug_str	00000000 
0000cb6c l       .debug_str	00000000 
0000cb7d l       .debug_str	00000000 
0001054c l       .debug_str	00000000 
0000cc15 l       .debug_str	00000000 
00039e9c l       .debug_str	00000000 
0000ccaf l       .debug_str	00000000 
0000cd21 l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
0000cd4b l       .debug_str	00000000 
0003397f l       .debug_str	00000000 
0000cd5b l       .debug_str	00000000 
0000cda6 l       .debug_str	00000000 
0000cdaf l       .debug_str	00000000 
0000cdf8 l       .debug_str	00000000 
0000ce08 l       .debug_str	00000000 
0000ce4d l       .debug_str	00000000 
0000ce59 l       .debug_str	00000000 
0000ceb5 l       .debug_str	00000000 
0000cefe l       .debug_str	00000000 
0000cf43 l       .debug_str	00000000 
0000cf9f l       .debug_str	00000000 
0000cfe8 l       .debug_str	00000000 
0000d02d l       .debug_str	00000000 
0000d089 l       .debug_str	00000000 
0000d0d1 l       .debug_str	00000000 
0000d115 l       .debug_str	00000000 
0000d170 l       .debug_str	00000000 
0000d1cb l       .debug_str	00000000 
0000d213 l       .debug_str	00000000 
0000d257 l       .debug_str	00000000 
0000d2b2 l       .debug_str	00000000 
0000d2fa l       .debug_str	00000000 
0000d33e l       .debug_str	00000000 
0000d389 l       .debug_str	00000000 
0000d3d0 l       .debug_str	00000000 
0000d42e l       .debug_str	00000000 
0000d48c l       .debug_str	00000000 
0000d4d6 l       .debug_str	00000000 
0000d51c l       .debug_str	00000000 
0000d579 l       .debug_str	00000000 
0000d5c3 l       .debug_str	00000000 
0000d609 l       .debug_str	00000000 
0000d666 l       .debug_str	00000000 
0000d6b0 l       .debug_str	00000000 
0000d6f6 l       .debug_str	00000000 
0000d753 l       .debug_str	00000000 
0000d79e l       .debug_str	00000000 
0000d7e5 l       .debug_str	00000000 
0000d843 l       .debug_str	00000000 
0000d88e l       .debug_str	00000000 
0000d8d5 l       .debug_str	00000000 
0000d933 l       .debug_str	00000000 
0000d97e l       .debug_str	00000000 
0000d9c5 l       .debug_str	00000000 
0000da23 l       .debug_str	00000000 
0000da6c l       .debug_str	00000000 
0000dab1 l       .debug_str	00000000 
0000db0d l       .debug_str	00000000 
0000db69 l       .debug_str	00000000 
0000dbb2 l       .debug_str	00000000 
0000dbf7 l       .debug_str	00000000 
0000dc40 l       .debug_str	00000000 
0000dc85 l       .debug_str	00000000 
0000dce1 l       .debug_str	00000000 
0000dd2a l       .debug_str	00000000 
0000dd6f l       .debug_str	00000000 
0000ddcb l       .debug_str	00000000 
0000de14 l       .debug_str	00000000 
0000de59 l       .debug_str	00000000 
0000deb5 l       .debug_str	00000000 
0000defd l       .debug_str	00000000 
0000df41 l       .debug_str	00000000 
0000df9c l       .debug_str	00000000 
0000dff7 l       .debug_str	00000000 
0000e03f l       .debug_str	00000000 
0000e083 l       .debug_str	00000000 
0000e0cd l       .debug_str	00000000 
0000e113 l       .debug_str	00000000 
0000e170 l       .debug_str	00000000 
0000e1ba l       .debug_str	00000000 
0000e200 l       .debug_str	00000000 
0000e25d l       .debug_str	00000000 
0000e2a6 l       .debug_str	00000000 
0000e2eb l       .debug_str	00000000 
0000e347 l       .debug_str	00000000 
0000e3a3 l       .debug_str	00000000 
0000e3b1 l       .debug_str	00000000 
0000e3f0 l       .debug_str	00000000 
0000e425 l       .debug_str	00000000 
0002f3ea l       .debug_str	00000000 
0000e42f l       .debug_str	00000000 
0000e435 l       .debug_str	00000000 
0000e444 l       .debug_str	00000000 
0000e47e l       .debug_str	00000000 
000075eb l       .debug_str	00000000 
0000e485 l       .debug_str	00000000 
0000e517 l       .debug_str	00000000 
0000e550 l       .debug_str	00000000 
0000e566 l       .debug_str	00000000 
0000e58d l       .debug_str	00000000 
0000e59a l       .debug_str	00000000 
0000e5d4 l       .debug_str	00000000 
000336b9 l       .debug_str	00000000 
0000e5f3 l       .debug_str	00000000 
0000e619 l       .debug_str	00000000 
0000e625 l       .debug_str	00000000 
0000e67f l       .debug_str	00000000 
0000e68d l       .debug_str	00000000 
0000e727 l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000e742 l       .debug_str	00000000 
0000e7e9 l       .debug_str	00000000 
0000e822 l       .debug_str	00000000 
0000e827 l       .debug_str	00000000 
0000e82e l       .debug_str	00000000 
0000e864 l       .debug_str	00000000 
0000e874 l       .debug_str	00000000 
0000e879 l       .debug_str	00000000 
0000e888 l       .debug_str	00000000 
0000e893 l       .debug_str	00000000 
00035420 l       .debug_str	00000000 
0000e8cd l       .debug_str	00000000 
0000e916 l       .debug_str	00000000 
0000e95d l       .debug_str	00000000 
0000e992 l       .debug_str	00000000 
0000e99c l       .debug_str	00000000 
0000e9d8 l       .debug_str	00000000 
0000e9e9 l       .debug_str	00000000 
0000ea22 l       .debug_str	00000000 
0000ea2f l       .debug_str	00000000 
0000ea3e l       .debug_str	00000000 
0000c62a l       .debug_str	00000000 
0000ea87 l       .debug_str	00000000 
0000eabd l       .debug_str	00000000 
0000eac8 l       .debug_str	00000000 
0000eb2d l       .debug_str	00000000 
0000eb8d l       .debug_str	00000000 
0000ebf3 l       .debug_str	00000000 
0000ec5a l       .debug_str	00000000 
0000eccd l       .debug_str	00000000 
0000ed2c l       .debug_str	00000000 
0000ed37 l       .debug_str	00000000 
0000ed9e l       .debug_str	00000000 
0000edbe l       .debug_str	00000000 
0000edfd l       .debug_str	00000000 
0000ee1c l       .debug_str	00000000 
000005c4 l       .debug_str	00000000 
0000ee8f l       .debug_str	00000000 
0000ef0c l       .debug_str	00000000 
0000ef71 l       .debug_str	00000000 
0000efd1 l       .debug_str	00000000 
0000f044 l       .debug_str	00000000 
0000f0c1 l       .debug_str	00000000 
0000f139 l       .debug_str	00000000 
0000f143 l       .debug_str	00000000 
0000f1b8 l       .debug_str	00000000 
000301a0 l       .debug_str	00000000 
0002e757 l       .debug_str	00000000 
000002ff l       .debug_str	00000000 
00003342 l       .debug_str	00000000 
0000f232 l       .debug_str	00000000 
0000f26e l       .debug_str	00000000 
0000f277 l       .debug_str	00000000 
0000f2be l       .debug_str	00000000 
0000f2d1 l       .debug_str	00000000 
0000f32f l       .debug_str	00000000 
0000f386 l       .debug_str	00000000 
0000f3e0 l       .debug_str	00000000 
0000f3ea l       .debug_str	00000000 
0000f42d l       .debug_str	00000000 
0000f438 l       .debug_str	00000000 
0000f444 l       .debug_str	00000000 
0002db99 l       .debug_str	00000000 
0000f482 l       .debug_str	00000000 
0000f4c4 l       .debug_str	00000000 
0000f4ed l       .debug_str	00000000 
0000f52e l       .debug_str	00000000 
0000f538 l       .debug_str	00000000 
000007c4 l       .debug_str	00000000 
0000f594 l       .debug_str	00000000 
0000f5c3 l       .debug_str	00000000 
0000f5d4 l       .debug_str	00000000 
0000f626 l       .debug_str	00000000 
0000f62d l       .debug_str	00000000 
0000f664 l       .debug_str	00000000 
0000f670 l       .debug_str	00000000 
0000f6ae l       .debug_str	00000000 
0000f6c1 l       .debug_str	00000000 
0000f739 l       .debug_str	00000000 
0000f777 l       .debug_str	00000000 
0000b27d l       .debug_str	00000000 
0000f7ef l       .debug_str	00000000 
0000f83e l       .debug_str	00000000 
0000f8d4 l       .debug_str	00000000 
0000f90d l       .debug_str	00000000 
0000f985 l       .debug_str	00000000 
0000f9fd l       .debug_str	00000000 
0000fa4c l       .debug_str	00000000 
0000fae2 l       .debug_str	00000000 
0000fb2d l       .debug_str	00000000 
0000fb49 l       .debug_str	00000000 
0000fbc2 l       .debug_str	00000000 
0000fc4b l       .debug_str	00000000 
0000fc53 l       .debug_str	00000000 
0000fca3 l       .debug_str	00000000 
0000fd3a l       .debug_str	00000000 
0000fdd1 l       .debug_str	00000000 
0000fe0a l       .debug_str	00000000 
0000fe93 l       .debug_str	00000000 
0000ff0c l       .debug_str	00000000 
0000ff5c l       .debug_str	00000000 
0000fff3 l       .debug_str	00000000 
00010030 l       .debug_str	00000000 
0001003f l       .debug_str	00000000 
000103eb l       .debug_str	00000000 
00010088 l       .debug_str	00000000 
00014f1b l       .debug_str	00000000 
000100c5 l       .debug_str	00000000 
0001013a l       .debug_str	00000000 
00010163 l       .debug_str	00000000 
00005459 l       .debug_str	00000000 
000101c7 l       .debug_str	00000000 
00010240 l       .debug_str	00000000 
0000555d l       .debug_str	00000000 
000102b1 l       .debug_str	00000000 
00010325 l       .debug_str	00000000 
0001033a l       .debug_str	00000000 
00010383 l       .debug_str	00000000 
00010392 l       .debug_str	00000000 
000103e3 l       .debug_str	00000000 
000103fa l       .debug_str	00000000 
00013112 l       .debug_str	00000000 
00010461 l       .debug_str	00000000 
0001046d l       .debug_str	00000000 
000336ae l       .debug_str	00000000 
00010473 l       .debug_str	00000000 
0001047d l       .debug_str	00000000 
000104af l       .debug_str	00000000 
000104bf l       .debug_str	00000000 
00010547 l       .debug_str	00000000 
00010550 l       .debug_str	00000000 
00005939 l       .debug_str	00000000 
000105bd l       .debug_str	00000000 
000105fc l       .debug_str	00000000 
0001060b l       .debug_str	00000000 
0001063d l       .debug_str	00000000 
00010664 l       .debug_str	00000000 
000106ce l       .debug_str	00000000 
0001073e l       .debug_str	00000000 
0001076c l       .debug_str	00000000 
00010778 l       .debug_str	00000000 
000107ad l       .debug_str	00000000 
000107c0 l       .debug_str	00000000 
00010814 l       .debug_str	00000000 
00010825 l       .debug_str	00000000 
00010875 l       .debug_str	00000000 
0001c15d l       .debug_str	00000000 
00010882 l       .debug_str	00000000 
00010889 l       .debug_str	00000000 
0001089a l       .debug_str	00000000 
000108e9 l       .debug_str	00000000 
000108f9 l       .debug_str	00000000 
00010951 l       .debug_str	00000000 
000109a6 l       .debug_str	00000000 
00010966 l       .debug_str	00000000 
000109a3 l       .debug_str	00000000 
000109b0 l       .debug_str	00000000 
00010a44 l       .debug_str	00000000 
00010ada l       .debug_str	00000000 
00010b4c l       .debug_str	00000000 
00010b72 l       .debug_str	00000000 
00010c11 l       .debug_str	00000000 
00010c1f l       .debug_str	00000000 
00010c90 l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
00010ce4 l       .debug_str	00000000 
00010d87 l       .debug_str	00000000 
00010d94 l       .debug_str	00000000 
00010dd9 l       .debug_str	00000000 
00010df6 l       .debug_str	00000000 
00010eae l       .debug_str	00000000 
00010ef3 l       .debug_str	00000000 
00010eff l       .debug_str	00000000 
00010f09 l       .debug_str	00000000 
00010f13 l       .debug_str	00000000 
00010f83 l       .debug_str	00000000 
00010fa8 l       .debug_str	00000000 
00011017 l       .debug_str	00000000 
0001103d l       .debug_str	00000000 
000110ac l       .debug_str	00000000 
000110d6 l       .debug_str	00000000 
0001115c l       .debug_str	00000000 
000111ee l       .debug_str	00000000 
00011216 l       .debug_str	00000000 
00011252 l       .debug_str	00000000 
0001126c l       .debug_str	00000000 
00011279 l       .debug_str	00000000 
000112b5 l       .debug_str	00000000 
000112c2 l       .debug_str	00000000 
0002d8c0 l       .debug_str	00000000 
00011300 l       .debug_str	00000000 
00011346 l       .debug_str	00000000 
000113ce l       .debug_str	00000000 
000113e5 l       .debug_str	00000000 
0001143f l       .debug_str	00000000 
00011485 l       .debug_str	00000000 
0001149b l       .debug_str	00000000 
0001151b l       .debug_str	00000000 
00011af7 l       .debug_str	00000000 
00011529 l       .debug_str	00000000 
00011568 l       .debug_str	00000000 
000115a6 l       .debug_str	00000000 
00011630 l       .debug_str	00000000 
00011645 l       .debug_str	00000000 
00011696 l       .debug_str	00000000 
000116a4 l       .debug_str	00000000 
000116a9 l       .debug_str	00000000 
00011704 l       .debug_str	00000000 
00012212 l       .debug_str	00000000 
0001175b l       .debug_str	00000000 
000321bd l       .debug_str	00000000 
000321c2 l       .debug_str	00000000 
00011765 l       .debug_str	00000000 
00011770 l       .debug_str	00000000 
00011777 l       .debug_str	00000000 
00011785 l       .debug_str	00000000 
000302c9 l       .debug_str	00000000 
00010891 l       .debug_str	00000000 
000117ca l       .debug_str	00000000 
00024e42 l       .debug_str	00000000 
0001180c l       .debug_str	00000000 
0001184c l       .debug_str	00000000 
0001185c l       .debug_str	00000000 
000118e5 l       .debug_str	00000000 
0001191f l       .debug_str	00000000 
0001194e l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
00011a50 l       .debug_str	00000000 
00011add l       .debug_str	00000000 
00011af0 l       .debug_str	00000000 
00011b00 l       .debug_str	00000000 
00011b4c l       .debug_str	00000000 
00011b8f l       .debug_str	00000000 
00011c26 l       .debug_str	00000000 
00011c40 l       .debug_str	00000000 
00011c74 l       .debug_str	00000000 
00011c86 l       .debug_str	00000000 
00011cbf l       .debug_str	00000000 
00011cdf l       .debug_str	00000000 
00011d5d l       .debug_str	00000000 
00011d65 l       .debug_str	00000000 
00011dac l       .debug_str	00000000 
00011dda l       .debug_str	00000000 
00011e5a l       .debug_str	00000000 
00011e99 l       .debug_str	00000000 
00011f23 l       .debug_str	00000000 
00011f6f l       .debug_str	00000000 
00011f8b l       .debug_str	00000000 
00011f96 l       .debug_str	00000000 
00011ff8 l       .debug_str	00000000 
0001204f l       .debug_str	00000000 
000120dc l       .debug_str	00000000 
00012128 l       .debug_str	00000000 
000121bf l       .debug_str	00000000 
00012209 l       .debug_str	00000000 
00012223 l       .debug_str	00000000 
0001227d l       .debug_str	00000000 
00012286 l       .debug_str	00000000 
000122e5 l       .debug_str	00000000 
0001233c l       .debug_str	00000000 
00012395 l       .debug_str	00000000 
000123aa l       .debug_str	00000000 
000123f5 l       .debug_str	00000000 
00012408 l       .debug_str	00000000 
00012455 l       .debug_str	00000000 
000124a0 l       .debug_str	00000000 
000124b3 l       .debug_str	00000000 
0001250c l       .debug_str	00000000 
00012521 l       .debug_str	00000000 
0001256c l       .debug_str	00000000 
0001257f l       .debug_str	00000000 
000125cc l       .debug_str	00000000 
00012617 l       .debug_str	00000000 
0001262a l       .debug_str	00000000 
00012663 l       .debug_str	00000000 
0001268d l       .debug_str	00000000 
000126f1 l       .debug_str	00000000 
00012729 l       .debug_str	00000000 
00012735 l       .debug_str	00000000 
00012772 l       .debug_str	00000000 
000127d4 l       .debug_str	00000000 
00012815 l       .debug_str	00000000 
0001281e l       .debug_str	00000000 
0001287c l       .debug_str	00000000 
000128b5 l       .debug_str	00000000 
000128c4 l       .debug_str	00000000 
00012903 l       .debug_str	00000000 
00012918 l       .debug_str	00000000 
0001295e l       .debug_str	00000000 
0001296b l       .debug_str	00000000 
00012971 l       .debug_str	00000000 
000129aa l       .debug_str	00000000 
00012a36 l       .debug_str	00000000 
00012a72 l       .debug_str	00000000 
00034448 l       .debug_str	00000000 
00012a84 l       .debug_str	00000000 
00012abc l       .debug_str	00000000 
00012ac8 l       .debug_str	00000000 
00012b05 l       .debug_str	00000000 
00012b67 l       .debug_str	00000000 
00012ba8 l       .debug_str	00000000 
00012c06 l       .debug_str	00000000 
00012c40 l       .debug_str	00000000 
00012c9a l       .debug_str	00000000 
00012ce3 l       .debug_str	00000000 
00012cf3 l       .debug_str	00000000 
00012d2c l       .debug_str	00000000 
00012dae l       .debug_str	00000000 
00012de8 l       .debug_str	00000000 
00012e42 l       .debug_str	00000000 
00012e7d l       .debug_str	00000000 
00012edd l       .debug_str	00000000 
00012f18 l       .debug_str	00000000 
00012f78 l       .debug_str	00000000 
00012fb6 l       .debug_str	00000000 
00013014 l       .debug_str	00000000 
00013052 l       .debug_str	00000000 
000130b0 l       .debug_str	00000000 
0001310d l       .debug_str	00000000 
0001311b l       .debug_str	00000000 
00013158 l       .debug_str	00000000 
00013163 l       .debug_str	00000000 
000131da l       .debug_str	00000000 
000131e5 l       .debug_str	00000000 
00013266 l       .debug_str	00000000 
000132ac l       .debug_str	00000000 
000132d3 l       .debug_str	00000000 
00013369 l       .debug_str	00000000 
00013401 l       .debug_str	00000000 
00013473 l       .debug_str	00000000 
0001349b l       .debug_str	00000000 
00013551 l       .debug_str	00000000 
00013596 l       .debug_str	00000000 
000023c2 l       .debug_str	00000000 
000135d8 l       .debug_str	00000000 
00013633 l       .debug_str	00000000 
00013667 l       .debug_str	00000000 
00013679 l       .debug_str	00000000 
000136b4 l       .debug_str	00000000 
000136b9 l       .debug_str	00000000 
00013712 l       .debug_str	00000000 
00013773 l       .debug_str	00000000 
00013790 l       .debug_str	00000000 
0000f431 l       .debug_str	00000000 
00003783 l       .debug_str	00000000 
0000378e l       .debug_str	00000000 
000137d2 l       .debug_str	00000000 
00013812 l       .debug_str	00000000 
0001386c l       .debug_str	00000000 
000138ae l       .debug_str	00000000 
00013909 l       .debug_str	00000000 
0001394b l       .debug_str	00000000 
00013956 l       .debug_str	00000000 
000305b3 l       .debug_str	00000000 
00013996 l       .debug_str	00000000 
000139f0 l       .debug_str	00000000 
000139f9 l       .debug_str	00000000 
00013a3b l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00013a9e l       .debug_str	00000000 
00013ae0 l       .debug_str	00000000 
00013ae9 l       .debug_str	00000000 
00013b26 l       .debug_str	00000000 
00013b7d l       .debug_str	00000000 
00013bbf l       .debug_str	00000000 
00013c17 l       .debug_str	00000000 
00013c66 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
00013c72 l       .debug_str	00000000 
00013ca3 l       .debug_str	00000000 
00013cce l       .debug_str	00000000 
00013d1c l       .debug_str	00000000 
00013d23 l       .debug_str	00000000 
00013d27 l       .debug_str	00000000 
00013d8c l       .debug_str	00000000 
00013dbd l       .debug_str	00000000 
00013dc8 l       .debug_str	00000000 
00013e21 l       .debug_str	00000000 
00013e6c l       .debug_str	00000000 
00013e8a l       .debug_str	00000000 
00013ed2 l       .debug_str	00000000 
00013eed l       .debug_str	00000000 
00013f34 l       .debug_str	00000000 
00013f50 l       .debug_str	00000000 
00013fde l       .debug_str	00000000 
0001402a l       .debug_str	00000000 
00014047 l       .debug_str	00000000 
00014071 l       .debug_str	00000000 
00014093 l       .debug_str	00000000 
000140a6 l       .debug_str	00000000 
000140b1 l       .debug_str	00000000 
000140fe l       .debug_str	00000000 
00014143 l       .debug_str	00000000 
00014182 l       .debug_str	00000000 
000141ce l       .debug_str	00000000 
0001425d l       .debug_str	00000000 
000142aa l       .debug_str	00000000 
00014330 l       .debug_str	00000000 
00039b1a l       .debug_str	00000000 
0001435f l       .debug_str	00000000 
00014393 l       .debug_str	00000000 
0001439c l       .debug_str	00000000 
00014410 l       .debug_str	00000000 
0001442c l       .debug_str	00000000 
0001446e l       .debug_str	00000000 
00014494 l       .debug_str	00000000 
000144ca l       .debug_str	00000000 
000144d3 l       .debug_str	00000000 
00014561 l       .debug_str	00000000 
000145a7 l       .debug_str	00000000 
000145ee l       .debug_str	00000000 
00014633 l       .debug_str	00000000 
00014672 l       .debug_str	00000000 
000146b8 l       .debug_str	00000000 
00014747 l       .debug_str	00000000 
0001478e l       .debug_str	00000000 
00014814 l       .debug_str	00000000 
00014833 l       .debug_str	00000000 
0001486f l       .debug_str	00000000 
0001488e l       .debug_str	00000000 
000148c3 l       .debug_str	00000000 
000148cd l       .debug_str	00000000 
0003146a l       .debug_str	00000000 
00014938 l       .debug_str	00000000 
0001496d l       .debug_str	00000000 
00014977 l       .debug_str	00000000 
000149aa l       .debug_str	00000000 
000149b2 l       .debug_str	00000000 
000149be l       .debug_str	00000000 
000396a6 l       .debug_str	00000000 
000149f2 l       .debug_str	00000000 
000149ff l       .debug_str	00000000 
00014a3c l       .debug_str	00000000 
00014a4b l       .debug_str	00000000 
00014ab2 l       .debug_str	00000000 
00014acf l       .debug_str	00000000 
00014b0e l       .debug_str	00000000 
00014b2a l       .debug_str	00000000 
00014b66 l       .debug_str	00000000 
00014b8c l       .debug_str	00000000 
00014bcb l       .debug_str	00000000 
00014bdb l       .debug_str	00000000 
00014c42 l       .debug_str	00000000 
00014c4e l       .debug_str	00000000 
00014cb2 l       .debug_str	00000000 
00014d19 l       .debug_str	00000000 
00014d3b l       .debug_str	00000000 
00014d72 l       .debug_str	00000000 
00014d88 l       .debug_str	00000000 
00014dd7 l       .debug_str	00000000 
00014de3 l       .debug_str	00000000 
00014eb5 l       .debug_str	00000000 
00014e2a l       .debug_str	00000000 
00014eb0 l       .debug_str	00000000 
00014ed4 l       .debug_str	00000000 
00014f0f l       .debug_str	00000000 
00014f1f l       .debug_str	00000000 
000395bc l       .debug_str	00000000 
00014f60 l       .debug_str	00000000 
00014f9a l       .debug_str	00000000 
00014fa9 l       .debug_str	00000000 
00014fe2 l       .debug_str	00000000 
00014ff0 l       .debug_str	00000000 
00015029 l       .debug_str	00000000 
00015037 l       .debug_str	00000000 
0001508b l       .debug_str	00000000 
000150a8 l       .debug_str	00000000 
000150f5 l       .debug_str	00000000 
000150fb l       .debug_str	00000000 
00015108 l       .debug_str	00000000 
00015143 l       .debug_str	00000000 
0001516b l       .debug_str	00000000 
000151cd l       .debug_str	00000000 
0000eac2 l       .debug_str	00000000 
00015236 l       .debug_str	00000000 
00015ae9 l       .debug_str	00000000 
00015283 l       .debug_str	00000000 
00037a30 l       .debug_str	00000000 
00015290 l       .debug_str	00000000 
0001529e l       .debug_str	00000000 
000152af l       .debug_str	00000000 
000152bf l       .debug_str	00000000 
0001530a l       .debug_str	00000000 
00015314 l       .debug_str	00000000 
00015397 l       .debug_str	00000000 
000153c7 l       .debug_str	00000000 
0001544f l       .debug_str	00000000 
000154c4 l       .debug_str	00000000 
00015517 l       .debug_str	00000000 
000155a3 l       .debug_str	00000000 
000155db l       .debug_str	00000000 
00015626 l       .debug_str	00000000 
00015657 l       .debug_str	00000000 
0001569f l       .debug_str	00000000 
000156cd l       .debug_str	00000000 
00015721 l       .debug_str	00000000 
00015747 l       .debug_str	00000000 
0001579b l       .debug_str	00000000 
00033e77 l       .debug_str	00000000 
000354a5 l       .debug_str	00000000 
000157a3 l       .debug_str	00000000 
000157a9 l       .debug_str	00000000 
000157b2 l       .debug_str	00000000 
000157ea l       .debug_str	00000000 
00015807 l       .debug_str	00000000 
00015843 l       .debug_str	00000000 
00015860 l       .debug_str	00000000 
000158bc l       .debug_str	00000000 
000158f4 l       .debug_str	00000000 
00015950 l       .debug_str	00000000 
00015988 l       .debug_str	00000000 
00015994 l       .debug_str	00000000 
000159d2 l       .debug_str	00000000 
000159ec l       .debug_str	00000000 
00015a42 l       .debug_str	00000000 
00015aa9 l       .debug_str	00000000 
00015ae1 l       .debug_str	00000000 
00015aed l       .debug_str	00000000 
00015b54 l       .debug_str	00000000 
00015b8d l       .debug_str	00000000 
00015bcc l       .debug_str	00000000 
000321c7 l       .debug_str	00000000 
00015bdd l       .debug_str	00000000 
00015be0 l       .debug_str	00000000 
00015be3 l       .debug_str	00000000 
0001177c l       .debug_str	00000000 
00015be6 l       .debug_str	00000000 
00015c5a l       .debug_str	00000000 
00015c69 l       .debug_str	00000000 
00015cb4 l       .debug_str	00000000 
00015ccc l       .debug_str	00000000 
00015cc5 l       .debug_str	00000000 
00015cd5 l       .debug_str	00000000 
00015cdf l       .debug_str	00000000 
00015cf6 l       .debug_str	00000000 
00015d05 l       .debug_str	00000000 
00015d47 l       .debug_str	00000000 
00015d60 l       .debug_str	00000000 
00015ddf l       .debug_str	00000000 
00015dfe l       .debug_str	00000000 
00015e62 l       .debug_str	00000000 
00015ec0 l       .debug_str	00000000 
00015ed0 l       .debug_str	00000000 
00015f09 l       .debug_str	00000000 
00015f1d l       .debug_str	00000000 
00015f5d l       .debug_str	00000000 
00015f68 l       .debug_str	00000000 
00015fa4 l       .debug_str	00000000 
00015faf l       .debug_str	00000000 
00015fc0 l       .debug_str	00000000 
00016014 l       .debug_str	00000000 
00016040 l       .debug_str	00000000 
0001604c l       .debug_str	00000000 
00016099 l       .debug_str	00000000 
000160ac l       .debug_str	00000000 
0003355b l       .debug_str	00000000 
00016117 l       .debug_str	00000000 
0001612c l       .debug_str	00000000 
00016136 l       .debug_str	00000000 
00036563 l       .debug_str	00000000 
0001613b l       .debug_str	00000000 
0001616c l       .debug_str	00000000 
0001617f l       .debug_str	00000000 
000161b0 l       .debug_str	00000000 
000161c4 l       .debug_str	00000000 
000161cf l       .debug_str	00000000 
000161ed l       .debug_str	00000000 
00016228 l       .debug_str	00000000 
0001625e l       .debug_str	00000000 
0001628f l       .debug_str	00000000 
000162a3 l       .debug_str	00000000 
000162ec l       .debug_str	00000000 
00016331 l       .debug_str	00000000 
000057d9 l       .debug_str	00000000 
0000583e l       .debug_str	00000000 
0001638d l       .debug_str	00000000 
000163e9 l       .debug_str	00000000 
000163f4 l       .debug_str	00000000 
00016412 l       .debug_str	00000000 
0001644d l       .debug_str	00000000 
00016483 l       .debug_str	00000000 
000164b4 l       .debug_str	00000000 
000164c8 l       .debug_str	00000000 
000164d3 l       .debug_str	00000000 
000164f1 l       .debug_str	00000000 
0001652c l       .debug_str	00000000 
00016562 l       .debug_str	00000000 
00016593 l       .debug_str	00000000 
0001ed42 l       .debug_str	00000000 
000165a8 l       .debug_str	00000000 
000165b4 l       .debug_str	00000000 
000165d3 l       .debug_str	00000000 
0001660e l       .debug_str	00000000 
00016645 l       .debug_str	00000000 
00016676 l       .debug_str	00000000 
00016689 l       .debug_str	00000000 
00016693 l       .debug_str	00000000 
000166b0 l       .debug_str	00000000 
000166eb l       .debug_str	00000000 
00016720 l       .debug_str	00000000 
00016751 l       .debug_str	00000000 
00016765 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0001678e l       .debug_str	00000000 
000167c9 l       .debug_str	00000000 
000167ff l       .debug_str	00000000 
00016830 l       .debug_str	00000000 
00016844 l       .debug_str	00000000 
0001688d l       .debug_str	00000000 
000168d2 l       .debug_str	00000000 
0001692e l       .debug_str	00000000 
00016977 l       .debug_str	00000000 
000169bc l       .debug_str	00000000 
00016a18 l       .debug_str	00000000 
00016a61 l       .debug_str	00000000 
00016aa6 l       .debug_str	00000000 
00016b02 l       .debug_str	00000000 
00016b0d l       .debug_str	00000000 
00016b2b l       .debug_str	00000000 
00016b66 l       .debug_str	00000000 
00016b9c l       .debug_str	00000000 
00016c0b l       .debug_str	00000000 
00016c46 l       .debug_str	00000000 
00016c77 l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
00016c96 l       .debug_str	00000000 
00016cb4 l       .debug_str	00000000 
00016cef l       .debug_str	00000000 
00016d25 l       .debug_str	00000000 
00016d94 l       .debug_str	00000000 
00016dcf l       .debug_str	00000000 
00016e00 l       .debug_str	00000000 
00016e15 l       .debug_str	00000000 
00016e1a l       .debug_str	00000000 
00016e26 l       .debug_str	00000000 
00016e45 l       .debug_str	00000000 
00016e80 l       .debug_str	00000000 
00016eb7 l       .debug_str	00000000 
00016f26 l       .debug_str	00000000 
00016f62 l       .debug_str	00000000 
00016f9a l       .debug_str	00000000 
00016fa6 l       .debug_str	00000000 
00016fe3 l       .debug_str	00000000 
0001706c l       .debug_str	00000000 
000170c6 l       .debug_str	00000000 
00017146 l       .debug_str	00000000 
000171b2 l       .debug_str	00000000 
0001723d l       .debug_str	00000000 
000172ae l       .debug_str	00000000 
000172ee l       .debug_str	00000000 
0001735e l       .debug_str	00000000 
0001739f l       .debug_str	00000000 
00017402 l       .debug_str	00000000 
00017441 l       .debug_str	00000000 
00017452 l       .debug_str	00000000 
0001745d l       .debug_str	00000000 
000174b8 l       .debug_str	00000000 
000174c1 l       .debug_str	00000000 
0001756a l       .debug_str	00000000 
000175de l       .debug_str	00000000 
0001763d l       .debug_str	00000000 
000174bc l       .debug_str	00000000 
000176a6 l       .debug_str	00000000 
00017704 l       .debug_str	00000000 
0001777b l       .debug_str	00000000 
00017786 l       .debug_str	00000000 
000177cd l       .debug_str	00000000 
000177d7 l       .debug_str	00000000 
00017820 l       .debug_str	00000000 
0001782c l       .debug_str	00000000 
000178a0 l       .debug_str	00000000 
00017922 l       .debug_str	00000000 
0001793f l       .debug_str	00000000 
000179df l       .debug_str	00000000 
00017a03 l       .debug_str	00000000 
00017a3c l       .debug_str	00000000 
00017a5c l       .debug_str	00000000 
00017ab6 l       .debug_str	00000000 
00017ac3 l       .debug_str	00000000 
00017b35 l       .debug_str	00000000 
00017b99 l       .debug_str	00000000 
00017ba4 l       .debug_str	00000000 
00017c1d l       .debug_str	00000000 
00017c29 l       .debug_str	00000000 
00017ca5 l       .debug_str	00000000 
00017cab l       .debug_str	00000000 
00017cb2 l       .debug_str	00000000 
00017cee l       .debug_str	00000000 
00017d66 l       .debug_str	00000000 
00017d9c l       .debug_str	00000000 
00017de5 l       .debug_str	00000000 
00017e2f l       .debug_str	00000000 
00017e6e l       .debug_str	00000000 
00017e91 l       .debug_str	00000000 
00017eec l       .debug_str	00000000 
00017f49 l       .debug_str	00000000 
00017f74 l       .debug_str	00000000 
00017fdb l       .debug_str	00000000 
00018024 l       .debug_str	00000000 
000180ad l       .debug_str	00000000 
00018106 l       .debug_str	00000000 
00018186 l       .debug_str	00000000 
000181f1 l       .debug_str	00000000 
0001827c l       .debug_str	00000000 
000182ec l       .debug_str	00000000 
0001832c l       .debug_str	00000000 
0001839b l       .debug_str	00000000 
000183dc l       .debug_str	00000000 
0001843e l       .debug_str	00000000 
0001847d l       .debug_str	00000000 
000184dc l       .debug_str	00000000 
00018585 l       .debug_str	00000000 
000185f8 l       .debug_str	00000000 
00018657 l       .debug_str	00000000 
000186bf l       .debug_str	00000000 
0001871d l       .debug_str	00000000 
00018793 l       .debug_str	00000000 
000187d0 l       .debug_str	00000000 
0001885f l       .debug_str	00000000 
00018894 l       .debug_str	00000000 
0001891a l       .debug_str	00000000 
000189a3 l       .debug_str	00000000 
000189f7 l       .debug_str	00000000 
000053af l       .debug_str	00000000 
00018a45 l       .debug_str	00000000 
00018ad3 l       .debug_str	00000000 
00018b27 l       .debug_str	00000000 
00018b66 l       .debug_str	00000000 
00018bb1 l       .debug_str	00000000 
00018bfa l       .debug_str	00000000 
00018c05 l       .debug_str	00000000 
00018c87 l       .debug_str	00000000 
00018ca3 l       .debug_str	00000000 
00018d43 l       .debug_str	00000000 
00018d66 l       .debug_str	00000000 
00018d9f l       .debug_str	00000000 
00018dbd l       .debug_str	00000000 
00018e16 l       .debug_str	00000000 
00018e6f l       .debug_str	00000000 
00018eac l       .debug_str	00000000 
00018f0d l       .debug_str	00000000 
00018f7e l       .debug_str	00000000 
00018fae l       .debug_str	00000000 
00018ff4 l       .debug_str	00000000 
00019066 l       .debug_str	00000000 
000190fa l       .debug_str	00000000 
0001911e l       .debug_str	00000000 
0001919a l       .debug_str	00000000 
000191d4 l       .debug_str	00000000 
00019213 l       .debug_str	00000000 
000192b6 l       .debug_str	00000000 
000192ef l       .debug_str	00000000 
0001934b l       .debug_str	00000000 
000193c7 l       .debug_str	00000000 
0001941f l       .debug_str	00000000 
0001943f l       .debug_str	00000000 
00019498 l       .debug_str	00000000 
000194f1 l       .debug_str	00000000 
0001954a l       .debug_str	00000000 
000195a4 l       .debug_str	00000000 
000195da l       .debug_str	00000000 
000195ea l       .debug_str	00000000 
000195f9 l       .debug_str	00000000 
00019602 l       .debug_str	00000000 
00019639 l       .debug_str	00000000 
00019675 l       .debug_str	00000000 
00019685 l       .debug_str	00000000 
000196e1 l       .debug_str	00000000 
00019743 l       .debug_str	00000000 
0000a2fd l       .debug_str	00000000 
0001978d l       .debug_str	00000000 
000197c8 l       .debug_str	00000000 
000197ed l       .debug_str	00000000 
0001984c l       .debug_str	00000000 
00019896 l       .debug_str	00000000 
000198d1 l       .debug_str	00000000 
000198f6 l       .debug_str	00000000 
00019955 l       .debug_str	00000000 
000199be l       .debug_str	00000000 
000199c7 l       .debug_str	00000000 
000007e7 l       .debug_str	00000000 
000199fe l       .debug_str	00000000 
00019a60 l       .debug_str	00000000 
00019abf l       .debug_str	00000000 
00019b1e l       .debug_str	00000000 
00019b54 l       .debug_str	00000000 
00019b65 l       .debug_str	00000000 
00019b75 l       .debug_str	00000000 
00019b7f l       .debug_str	00000000 
00019bb7 l       .debug_str	00000000 
00019c14 l       .debug_str	00000000 
00019c77 l       .debug_str	00000000 
00019cc2 l       .debug_str	00000000 
00019cfd l       .debug_str	00000000 
00019d23 l       .debug_str	00000000 
00019d83 l       .debug_str	00000000 
00019dce l       .debug_str	00000000 
00019e09 l       .debug_str	00000000 
00019e2f l       .debug_str	00000000 
00019e8f l       .debug_str	00000000 
00019ec5 l       .debug_str	00000000 
00019ed6 l       .debug_str	00000000 
00019ee6 l       .debug_str	00000000 
00019ef0 l       .debug_str	00000000 
00019f28 l       .debug_str	00000000 
00019f85 l       .debug_str	00000000 
00019fe8 l       .debug_str	00000000 
0001a048 l       .debug_str	00000000 
0001a0a8 l       .debug_str	00000000 
0001a0de l       .debug_str	00000000 
0001a0ef l       .debug_str	00000000 
0001a0ff l       .debug_str	00000000 
0001a109 l       .debug_str	00000000 
00000a1f l       .debug_str	00000000 
0001a141 l       .debug_str	00000000 
0001a1a4 l       .debug_str	00000000 
0001a1ef l       .debug_str	00000000 
0001a22a l       .debug_str	00000000 
0001a250 l       .debug_str	00000000 
0001a2b0 l       .debug_str	00000000 
0001a2fb l       .debug_str	00000000 
0001a336 l       .debug_str	00000000 
0001a35c l       .debug_str	00000000 
0001a3bc l       .debug_str	00000000 
0001a3f2 l       .debug_str	00000000 
0001a403 l       .debug_str	00000000 
0001a413 l       .debug_str	00000000 
0001a41d l       .debug_str	00000000 
000038aa l       .debug_str	00000000 
0001a455 l       .debug_str	00000000 
0001a4b8 l       .debug_str	00000000 
0001a518 l       .debug_str	00000000 
0001a578 l       .debug_str	00000000 
0001a5ae l       .debug_str	00000000 
00005208 l       .debug_str	00000000 
0001a5c1 l       .debug_str	00000000 
0001a5d3 l       .debug_str	00000000 
0001a5df l       .debug_str	00000000 
0001a61a l       .debug_str	00000000 
0001a679 l       .debug_str	00000000 
0001a6de l       .debug_str	00000000 
0001a740 l       .debug_str	00000000 
0001a77b l       .debug_str	00000000 
0001a7a3 l       .debug_str	00000000 
0001a805 l       .debug_str	00000000 
0001a83b l       .debug_str	00000000 
0001a84e l       .debug_str	00000000 
0001a860 l       .debug_str	00000000 
0001a86c l       .debug_str	00000000 
0001a8a7 l       .debug_str	00000000 
0001a90b l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
0001a98c l       .debug_str	00000000 
0001a9f2 l       .debug_str	00000000 
0001aa72 l       .debug_str	00000000 
0001aac1 l       .debug_str	00000000 
0001ab37 l       .debug_str	00000000 
0001abad l       .debug_str	00000000 
0001ac82 l       .debug_str	00000000 
0001acdf l       .debug_str	00000000 
0001ad3d l       .debug_str	00000000 
0001ad9e l       .debug_str	00000000 
0001ada8 l       .debug_str	00000000 
0001adff l       .debug_str	00000000 
0001ae6c l       .debug_str	00000000 
0001aea7 l       .debug_str	00000000 
0001af27 l       .debug_str	00000000 
0001af96 l       .debug_str	00000000 
0001b014 l       .debug_str	00000000 
0001b067 l       .debug_str	00000000 
0001b0d5 l       .debug_str	00000000 
0001b16d l       .debug_str	00000000 
0001b1fa l       .debug_str	00000000 
0001b288 l       .debug_str	00000000 
0001b316 l       .debug_str	00000000 
0001b424 l       .debug_str	00000000 
0001b498 l       .debug_str	00000000 
0001b4d8 l       .debug_str	00000000 
0001b521 l       .debug_str	00000000 
0001b579 l       .debug_str	00000000 
0001b5bd l       .debug_str	00000000 
0001b61f l       .debug_str	00000000 
0001b698 l       .debug_str	00000000 
0001b6ff l       .debug_str	00000000 
0001b756 l       .debug_str	00000000 
0001b7e0 l       .debug_str	00000000 
0001b7fd l       .debug_str	00000000 
0001b887 l       .debug_str	00000000 
0001b8a9 l       .debug_str	00000000 
0001b8ed l       .debug_str	00000000 
0001b95d l       .debug_str	00000000 
0001ba13 l       .debug_str	00000000 
0001baa3 l       .debug_str	00000000 
0001bb3b l       .debug_str	00000000 
0001bbe8 l       .debug_str	00000000 
0001bc7e l       .debug_str	00000000 
0001bd0f l       .debug_str	00000000 
0001bd53 l       .debug_str	00000000 
0001bda4 l       .debug_str	00000000 
0001be28 l       .debug_str	00000000 
0001beb4 l       .debug_str	00000000 
0001bf39 l       .debug_str	00000000 
0001bf3e l       .debug_str	00000000 
0001bfca l       .debug_str	00000000 
0001bfd3 l       .debug_str	00000000 
0001c075 l       .debug_str	00000000 
0001c104 l       .debug_str	00000000 
0001c156 l       .debug_str	00000000 
0001c165 l       .debug_str	00000000 
0001c1ac l       .debug_str	00000000 
0001c262 l       .debug_str	00000000 
0001c312 l       .debug_str	00000000 
0001c37f l       .debug_str	00000000 
0001c3b4 l       .debug_str	00000000 
0001c434 l       .debug_str	00000000 
0001c49f l       .debug_str	00000000 
0001c51d l       .debug_str	00000000 
0001c56c l       .debug_str	00000000 
0001c5cb l       .debug_str	00000000 
0001c62f l       .debug_str	00000000 
0001c650 l       .debug_str	00000000 
0001c6e8 l       .debug_str	00000000 
0001c78c l       .debug_str	00000000 
0001c822 l       .debug_str	00000000 
0001c8aa l       .debug_str	00000000 
0001c920 l       .debug_str	00000000 
0001c969 l       .debug_str	00000000 
0001c9c3 l       .debug_str	00000000 
0001ca07 l       .debug_str	00000000 
0001ca66 l       .debug_str	00000000 
0001cae1 l       .debug_str	00000000 
0001cb48 l       .debug_str	00000000 
0001cba1 l       .debug_str	00000000 
0001cc2b l       .debug_str	00000000 
0001cc6f l       .debug_str	00000000 
0001ccf3 l       .debug_str	00000000 
0001cd7b l       .debug_str	00000000 
0001cdcd l       .debug_str	00000000 
0001ce4b l       .debug_str	00000000 
0001ced0 l       .debug_str	00000000 
0001cf72 l       .debug_str	00000000 
0001cffd l       .debug_str	00000000 
0001d0b3 l       .debug_str	00000000 
0001d15a l       .debug_str	00000000 
0001d1c7 l       .debug_str	00000000 
0001d1fc l       .debug_str	00000000 
0001d27c l       .debug_str	00000000 
0001d2e7 l       .debug_str	00000000 
0001d365 l       .debug_str	00000000 
0001d3b4 l       .debug_str	00000000 
0001d413 l       .debug_str	00000000 
0001d477 l       .debug_str	00000000 
0001d498 l       .debug_str	00000000 
0001d530 l       .debug_str	00000000 
0001d5d4 l       .debug_str	00000000 
0001d66a l       .debug_str	00000000 
0001d6f2 l       .debug_str	00000000 
0001d768 l       .debug_str	00000000 
0001d7b1 l       .debug_str	00000000 
0001d80b l       .debug_str	00000000 
0001d84f l       .debug_str	00000000 
0001d8ae l       .debug_str	00000000 
0001d929 l       .debug_str	00000000 
0001d990 l       .debug_str	00000000 
0001d9e9 l       .debug_str	00000000 
0001da73 l       .debug_str	00000000 
0001dab7 l       .debug_str	00000000 
0001db3b l       .debug_str	00000000 
0001dbc3 l       .debug_str	00000000 
0001dc41 l       .debug_str	00000000 
0001dcc6 l       .debug_str	00000000 
0001dd68 l       .debug_str	00000000 
0001ddf3 l       .debug_str	00000000 
0001dea9 l       .debug_str	00000000 
0001df50 l       .debug_str	00000000 
0001df90 l       .debug_str	00000000 
0001dfad l       .debug_str	00000000 
0001dff1 l       .debug_str	00000000 
0001e012 l       .debug_str	00000000 
0001e052 l       .debug_str	00000000 
0001e06f l       .debug_str	00000000 
0001e0b3 l       .debug_str	00000000 
0001e0d4 l       .debug_str	00000000 
0001e136 l       .debug_str	00000000 
0001e19d l       .debug_str	00000000 
0001e1d8 l       .debug_str	00000000 
0001e1fb l       .debug_str	00000000 
0001e261 l       .debug_str	00000000 
0001e29c l       .debug_str	00000000 
0001e2be l       .debug_str	00000000 
0001e2f9 l       .debug_str	00000000 
0001e31d l       .debug_str	00000000 
0001e358 l       .debug_str	00000000 
0001e37b l       .debug_str	00000000 
0001e3b6 l       .debug_str	00000000 
0001e3da l       .debug_str	00000000 
0001e415 l       .debug_str	00000000 
0001e438 l       .debug_str	00000000 
0001e481 l       .debug_str	00000000 
0001e4c7 l       .debug_str	00000000 
0001e512 l       .debug_str	00000000 
0001e545 l       .debug_str	00000000 
0001e580 l       .debug_str	00000000 
0001e5a4 l       .debug_str	00000000 
0001e630 l       .debug_str	00000000 
0001e664 l       .debug_str	00000000 
0001e6e0 l       .debug_str	00000000 
0001e725 l       .debug_str	00000000 
0001e770 l       .debug_str	00000000 
0001e7d2 l       .debug_str	00000000 
0001e80d l       .debug_str	00000000 
0001e830 l       .debug_str	00000000 
0001e86b l       .debug_str	00000000 
0001e891 l       .debug_str	00000000 
0001e8dc l       .debug_str	00000000 
0001e917 l       .debug_str	00000000 
0001e93d l       .debug_str	00000000 
0001e978 l       .debug_str	00000000 
0001e99d l       .debug_str	00000000 
0001e9e9 l       .debug_str	00000000 
0001ea4c l       .debug_str	00000000 
0001ea87 l       .debug_str	00000000 
0001eaab l       .debug_str	00000000 
0001eae6 l       .debug_str	00000000 
0001eb0d l       .debug_str	00000000 
0001eb59 l       .debug_str	00000000 
0001eb94 l       .debug_str	00000000 
0001ebbb l       .debug_str	00000000 
0001ec06 l       .debug_str	00000000 
0001ec52 l       .debug_str	00000000 
0001ec9e l       .debug_str	00000000 
0001ecea l       .debug_str	00000000 
0001ecf1 l       .debug_str	00000000 
0001ed3f l       .debug_str	00000000 
0001ed47 l       .debug_str	00000000 
0001edb0 l       .debug_str	00000000 
0001ede3 l       .debug_str	00000000 
0001ee61 l       .debug_str	00000000 
0001ee73 l       .debug_str	00000000 
0001eed8 l       .debug_str	00000000 
0001eefa l       .debug_str	00000000 
0001ef59 l       .debug_str	00000000 
0001efa4 l       .debug_str	00000000 
0001effe l       .debug_str	00000000 
0001f071 l       .debug_str	00000000 
0001f07e l       .debug_str	00000000 
0001f0e3 l       .debug_str	00000000 
0001f155 l       .debug_str	00000000 
0001f1a2 l       .debug_str	00000000 
0001f1d9 l       .debug_str	00000000 
0001f1e4 l       .debug_str	00000000 
000031b3 l       .debug_str	00000000 
0001f232 l       .debug_str	00000000 
0001f27a l       .debug_str	00000000 
0001f284 l       .debug_str	00000000 
0001f2c0 l       .debug_str	00000000 
0001f2e3 l       .debug_str	00000000 
0001f31d l       .debug_str	00000000 
0001f358 l       .debug_str	00000000 
0001f3c4 l       .debug_str	00000000 
0001f409 l       .debug_str	00000000 
0001f469 l       .debug_str	00000000 
0001f488 l       .debug_str	00000000 
0001f4e8 l       .debug_str	00000000 
0001f503 l       .debug_str	00000000 
0001f55a l       .debug_str	00000000 
0001f5a2 l       .debug_str	00000000 
0001f5bc l       .debug_str	00000000 
0001f61b l       .debug_str	00000000 
0001f67b l       .debug_str	00000000 
0001f69a l       .debug_str	00000000 
0001f70c l       .debug_str	00000000 
0001f7df l       .debug_str	00000000 
00003799 l       .debug_str	00000000 
0001f83e l       .debug_str	00000000 
0001f8a1 l       .debug_str	00000000 
0001f901 l       .debug_str	00000000 
0001f961 l       .debug_str	00000000 
0001f9ca l       .debug_str	00000000 
0001fa07 l       .debug_str	00000000 
0001fa6a l       .debug_str	00000000 
0001fad8 l       .debug_str	00000000 
0001fb3d l       .debug_str	00000000 
0001fba7 l       .debug_str	00000000 
0001fc04 l       .debug_str	00000000 
0001fc42 l       .debug_str	00000000 
0001fc51 l       .debug_str	00000000 
0001fc8c l       .debug_str	00000000 
0001fc99 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
0001fd18 l       .debug_str	00000000 
0001fd81 l       .debug_str	00000000 
0001fe11 l       .debug_str	00000000 
0001fe6b l       .debug_str	00000000 
0001fed3 l       .debug_str	00000000 
0001feee l       .debug_str	00000000 
0001ff41 l       .debug_str	00000000 
0001ff8f l       .debug_str	00000000 
0001ff99 l       .debug_str	00000000 
0001ffe1 l       .debug_str	00000000 
0001ffed l       .debug_str	00000000 
00020061 l       .debug_str	00000000 
0002006c l       .debug_str	00000000 
000200a8 l       .debug_str	00000000 
000200cf l       .debug_str	00000000 
0002011a l       .debug_str	00000000 
00020127 l       .debug_str	00000000 
0002013a l       .debug_str	00000000 
00020145 l       .debug_str	00000000 
00020187 l       .debug_str	00000000 
0002019c l       .debug_str	00000000 
000201e4 l       .debug_str	00000000 
00020247 l       .debug_str	00000000 
00020269 l       .debug_str	00000000 
000202b9 l       .debug_str	00000000 
00020326 l       .debug_str	00000000 
00020396 l       .debug_str	00000000 
000203de l       .debug_str	00000000 
000203e7 l       .debug_str	00000000 
00020461 l       .debug_str	00000000 
000204ae l       .debug_str	00000000 
00020528 l       .debug_str	00000000 
00020575 l       .debug_str	00000000 
000205c7 l       .debug_str	00000000 
00020625 l       .debug_str	00000000 
00003256 l       .debug_str	00000000 
0002066d l       .debug_str	00000000 
000206ca l       .debug_str	00000000 
0002072d l       .debug_str	00000000 
0002078d l       .debug_str	00000000 
000207ed l       .debug_str	00000000 
0002084d l       .debug_str	00000000 
000208a9 l       .debug_str	00000000 
00020909 l       .debug_str	00000000 
00020983 l       .debug_str	00000000 
000209d4 l       .debug_str	00000000 
0002e78f l       .debug_str	00000000 
00020a1e l       .debug_str	00000000 
00020a28 l       .debug_str	00000000 
00020a2c l       .debug_str	00000000 
00020a30 l       .debug_str	00000000 
00020a35 l       .debug_str	00000000 
00020a6a l       .debug_str	00000000 
00020a90 l       .debug_str	00000000 
00020ac5 l       .debug_str	00000000 
00020af9 l       .debug_str	00000000 
00020b2e l       .debug_str	00000000 
00020b53 l       .debug_str	00000000 
00020b88 l       .debug_str	00000000 
00020ba1 l       .debug_str	00000000 
00020bd6 l       .debug_str	00000000 
00020c0b l       .debug_str	00000000 
00020c40 l       .debug_str	00000000 
00020c7e l       .debug_str	00000000 
00020cb3 l       .debug_str	00000000 
00020d3e l       .debug_str	00000000 
00020d73 l       .debug_str	00000000 
00020dbe l       .debug_str	00000000 
00020df3 l       .debug_str	00000000 
00020e4a l       .debug_str	00000000 
00020e7f l       .debug_str	00000000 
00020eb4 l       .debug_str	00000000 
00020f25 l       .debug_str	00000000 
00020f38 l       .debug_str	00000000 
00020fa9 l       .debug_str	00000000 
00020fec l       .debug_str	00000000 
00020ff6 l       .debug_str	00000000 
00021040 l       .debug_str	00000000 
00021087 l       .debug_str	00000000 
000210d4 l       .debug_str	00000000 
0002111e l       .debug_str	00000000 
00021150 l       .debug_str	00000000 
00021184 l       .debug_str	00000000 
000211bd l       .debug_str	00000000 
000211f9 l       .debug_str	00000000 
0002120b l       .debug_str	00000000 
0002124c l       .debug_str	00000000 
00021259 l       .debug_str	00000000 
00021298 l       .debug_str	00000000 
000212a3 l       .debug_str	00000000 
000212df l       .debug_str	00000000 
000212ed l       .debug_str	00000000 
00021321 l       .debug_str	00000000 
0002135d l       .debug_str	00000000 
000213b9 l       .debug_str	00000000 
000213c0 l       .debug_str	00000000 
0002141e l       .debug_str	00000000 
00021427 l       .debug_str	00000000 
0002148e l       .debug_str	00000000 
0002149f l       .debug_str	00000000 
000214fc l       .debug_str	00000000 
00021504 l       .debug_str	00000000 
00021563 l       .debug_str	00000000 
0002156d l       .debug_str	00000000 
000215c9 l       .debug_str	00000000 
00021627 l       .debug_str	00000000 
0002168e l       .debug_str	00000000 
000216eb l       .debug_str	00000000 
0002174a l       .debug_str	00000000 
00021783 l       .debug_str	00000000 
0002178d l       .debug_str	00000000 
000217c8 l       .debug_str	00000000 
00021806 l       .debug_str	00000000 
00021814 l       .debug_str	00000000 
0002184d l       .debug_str	00000000 
00021857 l       .debug_str	00000000 
000218bf l       .debug_str	00000000 
000218f2 l       .debug_str	00000000 
000218fc l       .debug_str	00000000 
00021932 l       .debug_str	00000000 
0002193e l       .debug_str	00000000 
00021975 l       .debug_str	00000000 
00021982 l       .debug_str	00000000 
000219c6 l       .debug_str	00000000 
000219e0 l       .debug_str	00000000 
00021a21 l       .debug_str	00000000 
00021a80 l       .debug_str	00000000 
00021ab1 l       .debug_str	00000000 
00021ac7 l       .debug_str	00000000 
00021af8 l       .debug_str	00000000 
00021b0e l       .debug_str	00000000 
00021b43 l       .debug_str	00000000 
00021ba0 l       .debug_str	00000000 
00021bfe l       .debug_str	00000000 
00021c63 l       .debug_str	00000000 
00021c6e l       .debug_str	00000000 
00021cd2 l       .debug_str	00000000 
00021d31 l       .debug_str	00000000 
00021d91 l       .debug_str	00000000 
00021dd7 l       .debug_str	00000000 
00021e17 l       .debug_str	00000000 
00021e9f l       .debug_str	00000000 
00032c83 l       .debug_str	00000000 
00021f26 l       .debug_str	00000000 
00021f59 l       .debug_str	00000000 
00021fcd l       .debug_str	00000000 
00022046 l       .debug_str	00000000 
000220cf l       .debug_str	00000000 
0002212c l       .debug_str	00000000 
0002218d l       .debug_str	00000000 
000221e7 l       .debug_str	00000000 
00022243 l       .debug_str	00000000 
000222a0 l       .debug_str	00000000 
000222ff l       .debug_str	00000000 
00022367 l       .debug_str	00000000 
000223d1 l       .debug_str	00000000 
0002243a l       .debug_str	00000000 
00022498 l       .debug_str	00000000 
0002250a l       .debug_str	00000000 
0002250e l       .debug_str	00000000 
00022581 l       .debug_str	00000000 
000225df l       .debug_str	00000000 
00022655 l       .debug_str	00000000 
000226b1 l       .debug_str	00000000 
00022722 l       .debug_str	00000000 
00022798 l       .debug_str	00000000 
000227cf l       .debug_str	00000000 
0002282f l       .debug_str	00000000 
0002288b l       .debug_str	00000000 
000228c0 l       .debug_str	00000000 
000228f5 l       .debug_str	00000000 
0002292b l       .debug_str	00000000 
00022986 l       .debug_str	00000000 
000229c8 l       .debug_str	00000000 
000229f9 l       .debug_str	00000000 
00022a2a l       .debug_str	00000000 
00022a5d l       .debug_str	00000000 
00022a64 l       .debug_str	00000000 
00022a91 l       .debug_str	00000000 
00022acc l       .debug_str	00000000 
00022adf l       .debug_str	00000000 
00022b10 l       .debug_str	00000000 
00022b1a l       .debug_str	00000000 
00022b86 l       .debug_str	00000000 
00022bdb l       .debug_str	00000000 
00022c0e l       .debug_str	00000000 
00022c1c l       .debug_str	00000000 
00022c70 l       .debug_str	00000000 
00022ca1 l       .debug_str	00000000 
00022cd3 l       .debug_str	00000000 
00022d0c l       .debug_str	00000000 
00022d21 l       .debug_str	00000000 
00022d5c l       .debug_str	00000000 
00022d73 l       .debug_str	00000000 
00022db1 l       .debug_str	00000000 
00022dcb l       .debug_str	00000000 
00022e2d l       .debug_str	00000000 
00022e52 l       .debug_str	00000000 
00022ead l       .debug_str	00000000 
00022ebc l       .debug_str	00000000 
00022f31 l       .debug_str	00000000 
00022f4e l       .debug_str	00000000 
00022f88 l       .debug_str	00000000 
00022fc5 l       .debug_str	00000000 
00022fd0 l       .debug_str	00000000 
00023008 l       .debug_str	00000000 
0002300f l       .debug_str	00000000 
0002308e l       .debug_str	00000000 
000230ee l       .debug_str	00000000 
0002314c l       .debug_str	00000000 
000231aa l       .debug_str	00000000 
000231e2 l       .debug_str	00000000 
00023217 l       .debug_str	00000000 
00023242 l       .debug_str	00000000 
0002324c l       .debug_str	00000000 
0002327c l       .debug_str	00000000 
0002328a l       .debug_str	00000000 
000232e3 l       .debug_str	00000000 
0002335f l       .debug_str	00000000 
000233c3 l       .debug_str	00000000 
00023427 l       .debug_str	00000000 
0002345d l       .debug_str	00000000 
00023471 l       .debug_str	00000000 
000234b2 l       .debug_str	00000000 
000234ca l       .debug_str	00000000 
0002357e l       .debug_str	00000000 
000235b1 l       .debug_str	00000000 
000235c2 l       .debug_str	00000000 
00023608 l       .debug_str	00000000 
00023615 l       .debug_str	00000000 
00023652 l       .debug_str	00000000 
00023696 l       .debug_str	00000000 
000236d7 l       .debug_str	00000000 
00023719 l       .debug_str	00000000 
00023723 l       .debug_str	00000000 
00023767 l       .debug_str	00000000 
00023772 l       .debug_str	00000000 
000237c0 l       .debug_str	00000000 
0002380e l       .debug_str	00000000 
00023854 l       .debug_str	00000000 
0002389c l       .debug_str	00000000 
000238e4 l       .debug_str	00000000 
0000e43c l       .debug_str	00000000 
0002394b l       .debug_str	00000000 
000239a4 l       .debug_str	00000000 
000239ea l       .debug_str	00000000 
00023a0d l       .debug_str	00000000 
00023a53 l       .debug_str	00000000 
00023a76 l       .debug_str	00000000 
00023abf l       .debug_str	00000000 
00023ae5 l       .debug_str	00000000 
00023b2e l       .debug_str	00000000 
00023b54 l       .debug_str	00000000 
00023b9e l       .debug_str	00000000 
00023bc5 l       .debug_str	00000000 
00023c0f l       .debug_str	00000000 
00023c36 l       .debug_str	00000000 
00023c83 l       .debug_str	00000000 
00023cad l       .debug_str	00000000 
00023cfa l       .debug_str	00000000 
00023d24 l       .debug_str	00000000 
00023d8c l       .debug_str	00000000 
00023dc9 l       .debug_str	00000000 
00023e05 l       .debug_str	00000000 
00023e41 l       .debug_str	00000000 
00023e7a l       .debug_str	00000000 
00023eb3 l       .debug_str	00000000 
00023eed l       .debug_str	00000000 
00023f20 l       .debug_str	00000000 
00023f4c l       .debug_str	00000000 
00023fa2 l       .debug_str	00000000 
00023fcd l       .debug_str	00000000 
00024025 l       .debug_str	00000000 
0002407b l       .debug_str	00000000 
000240b4 l       .debug_str	00000000 
000240bf l       .debug_str	00000000 
000240f8 l       .debug_str	00000000 
00024103 l       .debug_str	00000000 
0002412a l       .debug_str	00000000 
00024163 l       .debug_str	00000000 
000241aa l       .debug_str	00000000 
000241b7 l       .debug_str	00000000 
00024406 l       .debug_str	00000000 
000241e6 l       .debug_str	00000000 
00024226 l       .debug_str	00000000 
0002423a l       .debug_str	00000000 
0002427c l       .debug_str	00000000 
000242ad l       .debug_str	00000000 
000242dd l       .debug_str	00000000 
0002430e l       .debug_str	00000000 
0002433f l       .debug_str	00000000 
00024374 l       .debug_str	00000000 
000243ab l       .debug_str	00000000 
000243b6 l       .debug_str	00000000 
000243f6 l       .debug_str	00000000 
0002440a l       .debug_str	00000000 
00024446 l       .debug_str	00000000 
00024456 l       .debug_str	00000000 
0002448b l       .debug_str	00000000 
00024495 l       .debug_str	00000000 
000244ca l       .debug_str	00000000 
000244d4 l       .debug_str	00000000 
00024529 l       .debug_str	00000000 
00024571 l       .debug_str	00000000 
000245b7 l       .debug_str	00000000 
000245fe l       .debug_str	00000000 
00024647 l       .debug_str	00000000 
00024691 l       .debug_str	00000000 
000246e3 l       .debug_str	00000000 
00024781 l       .debug_str	00000000 
000247eb l       .debug_str	00000000 
000247f6 l       .debug_str	00000000 
00024860 l       .debug_str	00000000 
0002486b l       .debug_str	00000000 
000248e6 l       .debug_str	00000000 
0002495b l       .debug_str	00000000 
00024966 l       .debug_str	00000000 
000249db l       .debug_str	00000000 
000249e6 l       .debug_str	00000000 
00024a3d l       .debug_str	00000000 
00024aa1 l       .debug_str	00000000 
00024aad l       .debug_str	00000000 
00024aec l       .debug_str	00000000 
00022ad9 l       .debug_str	00000000 
00024b21 l       .debug_str	00000000 
00024b62 l       .debug_str	00000000 
00024b65 l       .debug_str	00000000 
00033db3 l       .debug_str	00000000 
00024ba5 l       .debug_str	00000000 
00024bef l       .debug_str	00000000 
00024bfa l       .debug_str	00000000 
00024c48 l       .debug_str	00000000 
00024c57 l       .debug_str	00000000 
00024c9b l       .debug_str	00000000 
00024ca1 l       .debug_str	00000000 
00024ce9 l       .debug_str	00000000 
00024cf3 l       .debug_str	00000000 
00024d3b l       .debug_str	00000000 
00024d45 l       .debug_str	00000000 
00024d91 l       .debug_str	00000000 
00024d9e l       .debug_str	00000000 
00024de6 l       .debug_str	00000000 
00024df0 l       .debug_str	00000000 
00024e3a l       .debug_str	00000000 
00024e4e l       .debug_str	00000000 
00024e90 l       .debug_str	00000000 
00024e99 l       .debug_str	00000000 
00024edb l       .debug_str	00000000 
00024ee4 l       .debug_str	00000000 
00024f40 l       .debug_str	00000000 
00024f9a l       .debug_str	00000000 
00024ff5 l       .debug_str	00000000 
0002504f l       .debug_str	00000000 
0000cace l       .debug_str	00000000 
00025095 l       .debug_str	00000000 
000250fb l       .debug_str	00000000 
00025132 l       .debug_str	00000000 
0002513a l       .debug_str	00000000 
00025172 l       .debug_str	00000000 
0002517b l       .debug_str	00000000 
000251b3 l       .debug_str	00000000 
000251bc l       .debug_str	00000000 
000251f3 l       .debug_str	00000000 
000251fb l       .debug_str	00000000 
00025233 l       .debug_str	00000000 
0002523c l       .debug_str	00000000 
00025274 l       .debug_str	00000000 
0002527d l       .debug_str	00000000 
000252b4 l       .debug_str	00000000 
000252bc l       .debug_str	00000000 
00025336 l       .debug_str	00000000 
000253b0 l       .debug_str	00000000 
0002542a l       .debug_str	00000000 
000254a6 l       .debug_str	00000000 
00025504 l       .debug_str	00000000 
0002550d l       .debug_str	00000000 
0002556c l       .debug_str	00000000 
000255cb l       .debug_str	00000000 
0002562a l       .debug_str	00000000 
0002568a l       .debug_str	00000000 
000256e8 l       .debug_str	00000000 
00025747 l       .debug_str	00000000 
000257a6 l       .debug_str	00000000 
00025805 l       .debug_str	00000000 
00025865 l       .debug_str	00000000 
000258cc l       .debug_str	00000000 
00025937 l       .debug_str	00000000 
00025992 l       .debug_str	00000000 
000259ed l       .debug_str	00000000 
00025a4f l       .debug_str	00000000 
00025ab4 l       .debug_str	00000000 
00025b1d l       .debug_str	00000000 
00025b83 l       .debug_str	00000000 
00025bd8 l       .debug_str	00000000 
00025c2d l       .debug_str	00000000 
00025c87 l       .debug_str	00000000 
00025ce1 l       .debug_str	00000000 
00025d1e l       .debug_str	00000000 
00025d58 l       .debug_str	00000000 
00025d61 l       .debug_str	00000000 
00025d9b l       .debug_str	00000000 
00025da4 l       .debug_str	00000000 
00025de1 l       .debug_str	00000000 
0000a2f9 l       .debug_str	00000000 
00025e1a l       .debug_str	00000000 
00025e7b l       .debug_str	00000000 
00025ed9 l       .debug_str	00000000 
00025f1a l       .debug_str	00000000 
00025f58 l       .debug_str	00000000 
00025f99 l       .debug_str	00000000 
00025fd2 l       .debug_str	00000000 
00026011 l       .debug_str	00000000 
0002604f l       .debug_str	00000000 
0002608d l       .debug_str	00000000 
000260ce l       .debug_str	00000000 
00026112 l       .debug_str	00000000 
0002614f l       .debug_str	00000000 
000261b5 l       .debug_str	00000000 
0002621c l       .debug_str	00000000 
0002627f l       .debug_str	00000000 
000262da l       .debug_str	00000000 
00026321 l       .debug_str	00000000 
00026330 l       .debug_str	00000000 
00026378 l       .debug_str	00000000 
000263c0 l       .debug_str	00000000 
00026408 l       .debug_str	00000000 
00026451 l       .debug_str	00000000 
0002649b l       .debug_str	00000000 
000264e2 l       .debug_str	00000000 
00026535 l       .debug_str	00000000 
00026550 l       .debug_str	00000000 
00026598 l       .debug_str	00000000 
000265ec l       .debug_str	00000000 
00026634 l       .debug_str	00000000 
00026688 l       .debug_str	00000000 
000266d0 l       .debug_str	00000000 
00026724 l       .debug_str	00000000 
0002676d l       .debug_str	00000000 
000267c2 l       .debug_str	00000000 
0002680c l       .debug_str	00000000 
00026864 l       .debug_str	00000000 
000268c6 l       .debug_str	00000000 
00026925 l       .debug_str	00000000 
00026985 l       .debug_str	00000000 
000269e5 l       .debug_str	00000000 
00026a45 l       .debug_str	00000000 
00026aa6 l       .debug_str	00000000 
00026b05 l       .debug_str	00000000 
00026b65 l       .debug_str	00000000 
00026bc5 l       .debug_str	00000000 
00026c25 l       .debug_str	00000000 
00026c86 l       .debug_str	00000000 
00026ce3 l       .debug_str	00000000 
00026d3e l       .debug_str	00000000 
00026d9c l       .debug_str	00000000 
00026df2 l       .debug_str	00000000 
00026e46 l       .debug_str	00000000 
00026ea7 l       .debug_str	00000000 
00026f06 l       .debug_str	00000000 
00026f65 l       .debug_str	00000000 
00026fc4 l       .debug_str	00000000 
00027024 l       .debug_str	00000000 
00027084 l       .debug_str	00000000 
000270e4 l       .debug_str	00000000 
00027144 l       .debug_str	00000000 
000271a6 l       .debug_str	00000000 
00027208 l       .debug_str	00000000 
0002726e l       .debug_str	00000000 
000272d6 l       .debug_str	00000000 
0002733d l       .debug_str	00000000 
00027399 l       .debug_str	00000000 
000273fa l       .debug_str	00000000 
0002745b l       .debug_str	00000000 
000274b5 l       .debug_str	00000000 
0002750f l       .debug_str	00000000 
00027569 l       .debug_str	00000000 
000275c7 l       .debug_str	00000000 
00027620 l       .debug_str	00000000 
00027678 l       .debug_str	00000000 
000276f4 l       .debug_str	00000000 
0002775d l       .debug_str	00000000 
000277d9 l       .debug_str	00000000 
00027855 l       .debug_str	00000000 
000278c2 l       .debug_str	00000000 
0002793e l       .debug_str	00000000 
000279a7 l       .debug_str	00000000 
00027a01 l       .debug_str	00000000 
00027a55 l       .debug_str	00000000 
00027ab6 l       .debug_str	00000000 
00027b19 l       .debug_str	00000000 
00027b81 l       .debug_str	00000000 
00027be3 l       .debug_str	00000000 
00027c49 l       .debug_str	00000000 
00027cab l       .debug_str	00000000 
00027d10 l       .debug_str	00000000 
00027d73 l       .debug_str	00000000 
00027dcf l       .debug_str	00000000 
00027e26 l       .debug_str	00000000 
00027e7f l       .debug_str	00000000 
00027ed2 l       .debug_str	00000000 
00027f2e l       .debug_str	00000000 
00027f94 l       .debug_str	00000000 
00027fe7 l       .debug_str	00000000 
0002803d l       .debug_str	00000000 
0002809a l       .debug_str	00000000 
000280fc l       .debug_str	00000000 
00028155 l       .debug_str	00000000 
000281b0 l       .debug_str	00000000 
0002820b l       .debug_str	00000000 
00028266 l       .debug_str	00000000 
000282c3 l       .debug_str	00000000 
00028320 l       .debug_str	00000000 
0002837f l       .debug_str	00000000 
000283dc l       .debug_str	00000000 
00028435 l       .debug_str	00000000 
00028494 l       .debug_str	00000000 
000284f3 l       .debug_str	00000000 
00028554 l       .debug_str	00000000 
000285b6 l       .debug_str	00000000 
00028618 l       .debug_str	00000000 
00028679 l       .debug_str	00000000 
000286db l       .debug_str	00000000 
0002873d l       .debug_str	00000000 
0000a375 l       .debug_str	00000000 
00028786 l       .debug_str	00000000 
000287d2 l       .debug_str	00000000 
000287da l       .debug_str	00000000 
00028824 l       .debug_str	00000000 
0002886f l       .debug_str	00000000 
00028876 l       .debug_str	00000000 
000288c1 l       .debug_str	00000000 
0002890c l       .debug_str	00000000 
00028958 l       .debug_str	00000000 
000289a2 l       .debug_str	00000000 
000289ef l       .debug_str	00000000 
00028a3a l       .debug_str	00000000 
00028a86 l       .debug_str	00000000 
00028ad2 l       .debug_str	00000000 
00028b1e l       .debug_str	00000000 
00028b6b l       .debug_str	00000000 
00028bb5 l       .debug_str	00000000 
00028c02 l       .debug_str	00000000 
00028c4d l       .debug_str	00000000 
00028c99 l       .debug_str	00000000 
00028ce5 l       .debug_str	00000000 
00028d31 l       .debug_str	00000000 
00028d7e l       .debug_str	00000000 
00028dc8 l       .debug_str	00000000 
00028e15 l       .debug_str	00000000 
00028e60 l       .debug_str	00000000 
00028eac l       .debug_str	00000000 
00028ef8 l       .debug_str	00000000 
00028f44 l       .debug_str	00000000 
00028f91 l       .debug_str	00000000 
00028fdc l       .debug_str	00000000 
0002902a l       .debug_str	00000000 
00029076 l       .debug_str	00000000 
000290c3 l       .debug_str	00000000 
00029110 l       .debug_str	00000000 
0002915d l       .debug_str	00000000 
000291ab l       .debug_str	00000000 
000291f6 l       .debug_str	00000000 
00029241 l       .debug_str	00000000 
0002928d l       .debug_str	00000000 
000292d9 l       .debug_str	00000000 
00029326 l       .debug_str	00000000 
00029372 l       .debug_str	00000000 
000293bf l       .debug_str	00000000 
0002940c l       .debug_str	00000000 
0002946b l       .debug_str	00000000 
000294c8 l       .debug_str	00000000 
00029524 l       .debug_str	00000000 
00029582 l       .debug_str	00000000 
000295df l       .debug_str	00000000 
0002963d l       .debug_str	00000000 
0002969a l       .debug_str	00000000 
000296f8 l       .debug_str	00000000 
00029755 l       .debug_str	00000000 
000297b4 l       .debug_str	00000000 
00029812 l       .debug_str	00000000 
00029873 l       .debug_str	00000000 
000298d4 l       .debug_str	00000000 
00029905 l       .debug_str	00000000 
0002990d l       .debug_str	00000000 
0002993e l       .debug_str	00000000 
00029946 l       .debug_str	00000000 
00029974 l       .debug_str	00000000 
0002997d l       .debug_str	00000000 
000299dd l       .debug_str	00000000 
00029a3d l       .debug_str	00000000 
00029a94 l       .debug_str	00000000 
00029ae7 l       .debug_str	00000000 
00029b2f l       .debug_str	00000000 
00029b7e l       .debug_str	00000000 
00029bc6 l       .debug_str	00000000 
00029be0 l       .debug_str	00000000 
00029c28 l       .debug_str	00000000 
00029c50 l       .debug_str	00000000 
00029c98 l       .debug_str	00000000 
00029cd5 l       .debug_str	00000000 
00029d1d l       .debug_str	00000000 
00029d3f l       .debug_str	00000000 
00029d87 l       .debug_str	00000000 
00029dcf l       .debug_str	00000000 
00029e17 l       .debug_str	00000000 
00029e34 l       .debug_str	00000000 
00029e7c l       .debug_str	00000000 
00029eb2 l       .debug_str	00000000 
00029efa l       .debug_str	00000000 
00029f22 l       .debug_str	00000000 
00029f6a l       .debug_str	00000000 
00029fc7 l       .debug_str	00000000 
0002a00f l       .debug_str	00000000 
0002a030 l       .debug_str	00000000 
0002a078 l       .debug_str	00000000 
0002a083 l       .debug_str	00000000 
0002a0cb l       .debug_str	00000000 
0002a12f l       .debug_str	00000000 
0002a177 l       .debug_str	00000000 
0002a1ac l       .debug_str	00000000 
0002a1f4 l       .debug_str	00000000 
0002a225 l       .debug_str	00000000 
0002a26d l       .debug_str	00000000 
0002a297 l       .debug_str	00000000 
0002a2df l       .debug_str	00000000 
0002a327 l       .debug_str	00000000 
0002a330 l       .debug_str	00000000 
0002a378 l       .debug_str	00000000 
0002a3ad l       .debug_str	00000000 
0002a3f5 l       .debug_str	00000000 
0002a4ed l       .debug_str	00000000 
0002a535 l       .debug_str	00000000 
0002a53e l       .debug_str	00000000 
00005a08 l       .debug_str	00000000 
0002a586 l       .debug_str	00000000 
0002a5ce l       .debug_str	00000000 
0002a5d7 l       .debug_str	00000000 
0002a61f l       .debug_str	00000000 
0002a678 l       .debug_str	00000000 
0002a6c0 l       .debug_str	00000000 
0002a6c9 l       .debug_str	00000000 
0002a711 l       .debug_str	00000000 
0002a74c l       .debug_str	00000000 
0002a794 l       .debug_str	00000000 
0002a7dc l       .debug_str	00000000 
0002a7e9 l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0002a831 l       .debug_str	00000000 
0002a879 l       .debug_str	00000000 
0002a8a1 l       .debug_str	00000000 
0002a8e9 l       .debug_str	00000000 
0002a916 l       .debug_str	00000000 
0002a95e l       .debug_str	00000000 
0002a979 l       .debug_str	00000000 
0002a9c1 l       .debug_str	00000000 
0002aa09 l       .debug_str	00000000 
0002aa25 l       .debug_str	00000000 
0002aa6d l       .debug_str	00000000 
0002aaa2 l       .debug_str	00000000 
0002aaea l       .debug_str	00000000 
0002ab0e l       .debug_str	00000000 
0002ab56 l       .debug_str	00000000 
0002ab7b l       .debug_str	00000000 
0002abc3 l       .debug_str	00000000 
0002ac6f l       .debug_str	00000000 
0002acb7 l       .debug_str	00000000 
0002acd3 l       .debug_str	00000000 
0002ad1b l       .debug_str	00000000 
0002ad38 l       .debug_str	00000000 
0002ad80 l       .debug_str	00000000 
0002adb9 l       .debug_str	00000000 
0002ae01 l       .debug_str	00000000 
0002ae17 l       .debug_str	00000000 
0002ae5f l       .debug_str	00000000 
0002aea7 l       .debug_str	00000000 
0002aebd l       .debug_str	00000000 
0002af05 l       .debug_str	00000000 
0002af2c l       .debug_str	00000000 
0002af74 l       .debug_str	00000000 
0002af91 l       .debug_str	00000000 
0002afd9 l       .debug_str	00000000 
0002b014 l       .debug_str	00000000 
0002b05c l       .debug_str	00000000 
0002b0a4 l       .debug_str	00000000 
0002b0c6 l       .debug_str	00000000 
00005b60 l       .debug_str	00000000 
0002b10e l       .debug_str	00000000 
0002b156 l       .debug_str	00000000 
0002b160 l       .debug_str	00000000 
0002b1a8 l       .debug_str	00000000 
0002b1f0 l       .debug_str	00000000 
0002b267 l       .debug_str	00000000 
0002b2af l       .debug_str	00000000 
0002b2d8 l       .debug_str	00000000 
0002b320 l       .debug_str	00000000 
0002b32a l       .debug_str	00000000 
0002b372 l       .debug_str	00000000 
0002b3e9 l       .debug_str	00000000 
0002b431 l       .debug_str	00000000 
0002b439 l       .debug_str	00000000 
0002b481 l       .debug_str	00000000 
0002b4a9 l       .debug_str	00000000 
0002b4f1 l       .debug_str	00000000 
0002b539 l       .debug_str	00000000 
0002b548 l       .debug_str	00000000 
0002b590 l       .debug_str	00000000 
0002b5c1 l       .debug_str	00000000 
0002b609 l       .debug_str	00000000 
0002b62d l       .debug_str	00000000 
0002b675 l       .debug_str	00000000 
0002b67f l       .debug_str	00000000 
0002b6c7 l       .debug_str	00000000 
0002b6d0 l       .debug_str	00000000 
0002b718 l       .debug_str	00000000 
0002b736 l       .debug_str	00000000 
0002b77e l       .debug_str	00000000 
0002b7c6 l       .debug_str	00000000 
0002b7f9 l       .debug_str	00000000 
0002b841 l       .debug_str	00000000 
0002b8bc l       .debug_str	00000000 
0002b906 l       .debug_str	00000000 
0002b950 l       .debug_str	00000000 
0002b9b9 l       .debug_str	00000000 
0002ba16 l       .debug_str	00000000 
0002ba79 l       .debug_str	00000000 
0002bacf l       .debug_str	00000000 
0002bb25 l       .debug_str	00000000 
0002bb7e l       .debug_str	00000000 
0002bbd6 l       .debug_str	00000000 
0002bc3a l       .debug_str	00000000 
0002bcc0 l       .debug_str	00000000 
0002bcc6 l       .debug_str	00000000 
0002bd4c l       .debug_str	00000000 
0002bd52 l       .debug_str	00000000 
0002bdd4 l       .debug_str	00000000 
0002be56 l       .debug_str	00000000 
0002bed9 l       .debug_str	00000000 
0002bee0 l       .debug_str	00000000 
0002bf63 l       .debug_str	00000000 
0002bf6a l       .debug_str	00000000 
0002bff0 l       .debug_str	00000000 
0002c076 l       .debug_str	00000000 
0002c0f9 l       .debug_str	00000000 
0002c17c l       .debug_str	00000000 
0002c1fe l       .debug_str	00000000 
0002c284 l       .debug_str	00000000 
0002c30a l       .debug_str	00000000 
0002c394 l       .debug_str	00000000 
0002c41c l       .debug_str	00000000 
0002c4a4 l       .debug_str	00000000 
0002c502 l       .debug_str	00000000 
0002c560 l       .debug_str	00000000 
0002c5be l       .debug_str	00000000 
0002c61d l       .debug_str	00000000 
0002c67b l       .debug_str	00000000 
0002c6da l       .debug_str	00000000 
0002c738 l       .debug_str	00000000 
0002c797 l       .debug_str	00000000 
0002c7f6 l       .debug_str	00000000 
0002c855 l       .debug_str	00000000 
0002c8b3 l       .debug_str	00000000 
0002c912 l       .debug_str	00000000 
0002c971 l       .debug_str	00000000 
0002c9d0 l       .debug_str	00000000 
0002ca2f l       .debug_str	00000000 
0002ca8e l       .debug_str	00000000 
0002caed l       .debug_str	00000000 
0002cb4c l       .debug_str	00000000 
0002cbab l       .debug_str	00000000 
0002cc0a l       .debug_str	00000000 
0002cc69 l       .debug_str	00000000 
0002ccc8 l       .debug_str	00000000 
0002cd27 l       .debug_str	00000000 
0002cd86 l       .debug_str	00000000 
0002cde5 l       .debug_str	00000000 
0002ce44 l       .debug_str	00000000 
0002cea3 l       .debug_str	00000000 
0002cf02 l       .debug_str	00000000 
0002cf61 l       .debug_str	00000000 
0002cfc0 l       .debug_str	00000000 
0002d020 l       .debug_str	00000000 
0002d07f l       .debug_str	00000000 
0002d0de l       .debug_str	00000000 
0002d13d l       .debug_str	00000000 
0002d19d l       .debug_str	00000000 
0002d1fc l       .debug_str	00000000 
0002d25b l       .debug_str	00000000 
0002d2bb l       .debug_str	00000000 
0002d31a l       .debug_str	00000000 
0002d380 l       .debug_str	00000000 
0002d3bb l       .debug_str	00000000 
08002062 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h60b349e3a3967a18E
08003d1a l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h8430cdf27e8fe239E
08002a44 l     F .text	0000000a _ZN4core3fmt10ArgumentV110show_usize17h0a1563fc3dacf510E
08003aae l     F .text	00000102 _ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE
08003bdc l     F .text	00000118 _ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E
08003606 l     F .text	00000170 _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E
08002958 l     F .text	00000096 _ZN4core3fmt5Write10write_char17h46ea92a99ad03871E
080029ee l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17h1dde8e33e3292656E
08002eb8 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E
0800200e l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h012e98b5b5cd1768E
08002010 l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h02a68ac691a00745E
08002012 l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h605f2bc604187c4eE
08003420 l     F .text	000000fe _ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E
0800351e l     F .text	000000e8 _ZN4core7unicode9printable5check17h6013a5f54a0956d6E
08002a18 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hc1dd88ddb83e927aE
08002a1e l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hbaabbcf1c32c6171E
08002a12 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hd3215ca6ed83c00eE
08002014 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbc81ca56d6e023e9E
0800e090 l     O .text	00000016 str.h
0800e0d0 l     O .text	00000020 str.j
00000000 l    df *ABS*	00000000 semihosting_console.c
08003d28 l     F .text	00000024 __semihost
08003d4c l     F .text	00000010 debugger_connected
08003d5c l     F .text	0000002e semihost_write
08003e30 l     F .text	0000001c semihosting_console_write_ch
20000250 l     O .bss	00000004 semihost_mbuf
20000130 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20000254 l     O .bss	00000010 avail_queue
20000264 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20000270 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sensor_coap.c
08003ff0 l     F .text	00000010 handle_coap_response
08004100 l     F .text	000000e4 prepare_coap_request
080042b4 l     F .text	000000a8 dispatch_coap_request
20000274 l     O .bss	00000004 coap_json_mbuf
20000278 l     O .bss	00000004 oc_c_message
2000027c l     O .bss	0000006c oc_c_request
200002e8 l     O .bss	00000004 oc_c_rsp
200002f0 l     O .bss	00000008 oc_sem
200002f8 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
080044ec l     F .text	00000024 start_transport_callback
200002fc l     O .bss	00000020 callout.8332
2000031c l     O .bss	00000004 current_uri
20000320 l     O .bss	00000021 device_id_text
20000344 l     O .bss	0000000c hw_id
20000350 l     O .bss	00000004 hw_id_len
20000354 l     O .bss	00000020 sensor_network_endpoints
20000374 l     O .bss	00000028 sensor_network_interfaces
200003a0 l     O .bss	00000008 sensor_node_address
200003a8 l     O .bss	00000037 sensor_node_names_buf
20000131 l     O .data	00000001 current_iface_type
20000134 l     O .data	00000014 sensor_node_names
0800f288 l     O .text	0000000f COAP_HOST
0800f298 l     O .text	00000036 COAP_URI
0800f2d0 l     O .text	0000000c COLLECTOR_NODE_HW_ID
0800f2dc l     O .text	0000003c SENSOR_NODE_HW_IDS
0800f340 l     O .text	00000008 sensor_network_encoding
0800f3b4 l     O .text	00000008 sensor_network_shortname
0800f3c0 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 oc_buffer.c
08004910 l     F .text	00000030 oc_buffer_tx
08004940 l     F .text	0000002c oc_buffer_rx
200003e0 l     O .bss	00000018 oc_inq
200003f8 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_rep.c
20000410 l     O .bss	0000001c oc_rep_objects
2000042c l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 oc_ri.c
08004a24 l     F .text	00000040 free_client_cb
08004a64 l     F .text	0000000a oc_ri_remove_cb
2000045c l     O .bss	000000c8 oc_client_cb_area
20000524 l     O .bss	0000001c oc_client_cb_pool
20000540 l     O .bss	00000004 oc_client_cbs
00000000 l    df *ABS*	00000000 coap.c
08004b68 l     F .text	00000012 coap_log_2
08004b7a l     F .text	00000016 coap_option_nibble
08004b90 l     F .text	0000008c coap_append_opt_hdr
08004c1c l     F .text	00000086 coap_append_array_opt
08004ca2 l     F .text	0000009c coap_append_int_opt
20000544 l     O .bss	00000002 current_mid
00000000 l    df *ABS*	00000000 adaptor.c
20000548 l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 random.c
00000000 l    df *ABS*	00000000 oc_helpers.c
00000000 l    df *ABS*	00000000 sysinit.c
0800528e l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 json_encode.c
080053c0 l     F .text	00000200 json_encode_value
00000000 l    df *ABS*	00000000 stm32_hw_id.c
00000000 l    df *ABS*	00000000 sensor.c
08005644 l     F .text	00000028 sensor_mgr_remove
0800566c l     F .text	0000005c sensor_mgr_insert
080056c8 l     F .text	0000000a sensor_type_traits_empty
080056d4 l     F .text	0000000c sensor_mgr_evq_set
08005712 l     F .text	0000005c sensor_read_data_func
0800576e l     F .text	00000014 sensor_mgr_match_bydevname
08005784 l     F .text	00000050 sensor_base_ts_update_event
080057d4 l     F .text	00000050 sensor_up_timestamp
0800585c l     F .text	000000a4 sensor_mgr_init
08005bb4 l     F .text	0000007c sensor_mgr_wakeup_event
0800597a l     F .text	00000014 sensor_update_poll_rate
0800598e l     F .text	00000032 sensor_update_nextrun
080059c0 l     F .text	0000001e sensor_calc_nextrun_delta
080059e0 l     F .text	00000024 sensor_find_min_nextrun_sensor
08005b3c l     F .text	0000004a sensor_mgr_poll_bytype
08005b86 l     F .text	0000002e sensor_poll_per_type_trait
2000054c l     O .bss	00000078 sensor_notify_evt_area
200005c4 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
08005f58 l     F .text	00000016 os_main
200006e8 l     O .bss	00001000 os_main_stack
200005e8 l     O .bss	00000100 g_idle_task_stack
200016e8 l     O .bss	00000050 os_main_task
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
08006268 l     F .text	0000005c os_dev_add
080062c4 l     F .text	00000026 os_dev_initialize
080062ea l     F .text	00000020 os_dev_init
20001738 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20001740 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
08006998 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
08006aac l     F .text	0000002c os_msys_find_pool
08006b18 l     F .text	00000044 os_msys_init_once
20001750 l     O .bss	00000db0 os_msys_1_data
20002500 l     O .bss	0000000c os_msys_1_mbuf_pool
2000250c l     O .bss	0000001c os_msys_1_mempool
2000014c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
08006d6c l     F .text	00000020 os_sanity_check_list_lock
08006d8c l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
08007200 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
080072f0 l     F .text	00000058 os_deltatime
08007348 l     F .text	0000005c os_time_tick
20002530 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 HAL_CM3.o
08007494 l       .text	00000000 SVC_User
080074b2 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 malloc.c
08007530 l     F .text	00000004 malloc_lock_nop
08007534 l     F .text	00000002 malloc_unlock_nop
08007536 l     F .text	00000048 __malloc_from_block
08007580 l     F .text	00000064 __free_block
20000164 l     O .data	00000018 __malloc_head
2000017c l     O .data	00000004 malloc_lock
20000180 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
080076e4 l       .text	00000000 test1
080076d8 l       .text	00000000 loop1
080076ea l       .text	00000000 res1
08007706 l       .text	00000000 test2
0800770e l       .text	00000000 done
080076fa l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0800771a l       .text	00000000 test1
08007716 l       .text	00000000 loop1
08007728 l       .text	00000000 test2
08007724 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
08007790 l     F .text	000000c0 ui2a
08007850 l     F .text	00000020 i2a
08007870 l     F .text	00000030 a2d
080078a0 l     F .text	00000036 a2i
080078d6 l     F .text	0000002a putf
08007900 l     F .text	0000011c putchw
08007a1c l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
08007df8 l     F .text	00000004 stdin_read
08007dfc l     F .text	00000010 stdout_write
20000184 l     O .data	00000004 _stdin
20000188 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 hal_os_tick.c
00000000 l    df *ABS*	00000000 low_power.c
20002560 l     O .bss	00000004 end_time
2000256c l     O .bss	00000004 start_time
20000190 l     O .data	00000004 max_sleep
20000194 l     O .data	00000004 standby_wakeup.6514
00000000 l    df *ABS*	00000000 pwr.c
00000000 l    df *ABS*	00000000 rcc.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 alarm.c
0800844c l     F .text	000000a4 alarm_setup
20002570 l     O .bss	00000004 alarmCount
20002574 l     O .bss	00000004 alarmFunc
2000257c l     O .bss	00000004 tickCount
20002580 l     O .bss	00000004 tickFunc
20002584 l     O .bss	00000001 timerStarted.6483
00000000 l    df *ABS*	00000000 json_helper.c
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 sensor_helper.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 bluepill_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
0800875c l     F .text	00000010 LL_GPIO_AF_DisableRemap_USART2
0800876c l     F .text	00000072 clock_config
20002588 l     O .bss	0000003c hal_uart0
0800f68c l     O .text	00000018 uart_cfg
00000000 l    df *ABS*	00000000 uart_hal.c
08008854 l     F .text	0000001a uart_hal_blocking_tx
0800886e l     F .text	0000001a uart_hal_start_rx
08008888 l     F .text	0000001a uart_hal_start_tx
080088a2 l     F .text	00000030 uart_hal_resume
080088d2 l     F .text	0000002e uart_hal_suspend
08008900 l     F .text	00000016 uart_hal_close
08008916 l     F .text	00000082 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
08008a00 l     F .text	00000012 stm32_flash_sector_info
08008a12 l     F .text	0000000a stm32_flash_init
08008a1c l     F .text	00000008 stm32_flash_erase_sector
08008a24 l     F .text	0000000e stm32_flash_read
08008a34 l     F .text	0000008c stm32_flash_write_linear
08008ac0 l     F .text	00000010 stm32_flash_write
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 hal_timer.c
08008b0c l     F .text	00000050 stm32_tmr_reg_irq
08008b5c l     F .text	0000002e hal_timer_cnt
08008b8c l     F .text	000000c0 stm32_hw_setup
08008cdc l     F .text	00000010 stm32_tmr0_irq
08008c4c l     F .text	0000005a stm32_tmr_cbs
08008ca6 l     F .text	00000036 stm32_tmr_irq
0800f6d8 l     O .text	0000000c stm32_tmr_devs
00000000 l    df *ABS*	00000000 hal_uart.c
08008e60 l     F .text	00000098 uart_irq_handler
08008ef8 l     F .text	0000000a uart_irq1
08008f02 l     F .text	0000000a uart_irq2
08008f0c l     F .text	0000000a uart_irq3
08008f18 l     F .text	00000070 hal_uart_set_nvic
200025c4 l     O .bss	00000018 uart_irqs
200025dc l     O .bss	0000001c uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 sbrk.c
20000198 l     O .data	00000004 brk.4103
00000000 l    df *ABS*	00000000 hal_gpio.c
080094a4 l     F .text	00000094 hal_gpio_clk_enable
0800f6e4 l     O .text	00000014 portmap
00000000 l    df *ABS*	00000000 stm32f1xx_hal_flash.c
08009658 l     F .text	0000001c FLASH_Program_HalfWord
08009674 l     F .text	00000074 FLASH_SetErrorCode
00000000 l    df *ABS*	00000000 stm32f1xx_hal_flash_ex.c
08009818 l     F .text	00000024 FLASH_MassErase
00000000 l    df *ABS*	00000000 stm32f1xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_iwdg.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_rcc.c
08009c28 l     F .text	0000002c RCC_Delay
00000000 l    df *ABS*	00000000 stm32f1xx_hal_tim.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_timer_freq.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_dma.c
0800a3bc l     F .text	0000002c DMA_SetConfig
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 creator.c
200025f8 l     O .bss	0000006c __compound_literal.0
20002664 l     O .bss	00000048 stm32f1_adc1_dev
2000019c l     O .data	00000018 adc1_config
200001b4 l     O .data	00000030 adc1_handle
00000000 l    df *ABS*	00000000 adc_stm32f1.c
0800a4a8 l     F .text	00000060 stm32f1_resolve_adc_gpio
0800a508 l     F .text	00000008 stm32f1_adc_size_buffer
0800a510 l     F .text	0000001e stm32f1_adc_read_buffer
0800a52e l     F .text	0000000e stm32f1_adc_release_buffer
0800a53c l     F .text	0000000e stm32f1_adc_set_buffer
0800a54c l     F .text	00000040 stm32f1_adc_clk_disable
0800a58c l     F .text	00000052 stm32f1_adc_read_channel
0800a5e0 l     F .text	00000034 stm32f1_adc_sample
0800a614 l     F .text	00000086 stm32f1_adc_configure_channel
0800a69a l     F .text	00000046 stm32f1_adc_uninit
0800a6e0 l     F .text	0000001c stm32f1_adc_close
0800a6fc l     F .text	0000003c config_clk
0800a738 l     F .text	0000005c stm32f1_adc_clk_enable
0800a794 l     F .text	00000016 stm32f1_adc_dma_init
0800a7aa l     F .text	00000030 stm32f1_adc_init
0800a7da l     F .text	00000048 stm32f1_adc_open
200026ac l     O .bss	00000010 stm32f1_adc_stats
0800f728 l     O .text	0000001c stm32f1_adc_funcs
00000000 l    df *ABS*	00000000 creator.cpp
0800a8a4 l     F .text	00000050 _ZL13config_devicev
200026bc l     O .bss	00000038 _ZL5bc95g
200001e4 l     O .data	00000014 _ZL16uart_0_itf_bc95g
00000000 l    df *ABS*	00000000 driver.cpp
0800a954 l     F .text	0000000c _ZL16internal_timeoutm
0800a960 l     F .text	00000004 _ZL3cfgP5bc95g
0800a964 l     F .text	00000002 _ZL11bc95g_eventPv
0800a966 l     F .text	00000010 _ZL13nibble_to_hexh
0800a978 l     F .text	00000024 _ZL11get_commandP5bc95g9CommandId
0800a99c l     F .text	0000001c _ZL18register_transportPKcPvS0_th
0800a9b8 l     F .text	00000024 _ZL11bc95g_closeP6os_dev
0800a9dc l     F .text	0000005c _ZL13internal_initPcmS_mS_mb
0800aa38 l     F .text	00000010 _ZL18internal_configurei
0800aa48 l     F .text	00000014 _ZL15internal_attachPFvPvES_
0800aa5c l     F .text	0000007c _ZL10bc95g_openP6os_devmPv
0800aad8 l     F .text	00000014 _ZL9expect_okP5bc95g
0800aaec l     F .text	00000012 _ZL5sleept
0800ab00 l     F .text	00000090 _ZL11wait_for_okP5bc95g
0800ab90 l     F .text	00000020 _ZL8send_atpP5bc95g
0800abb0 l     F .text	00000038 _ZL12send_commandP5bc95g9CommandId
0800abe8 l     F .text	00000038 _ZL16send_command_intP5bc95g9CommandIdi
0800ac20 l     F .text	00000078 _ZL19prepare_to_transmitP5bc95g
0800ac98 l     F .text	0000009c _ZL10send_queryP5bc95g9CommandIdPiS2_
0800ad34 l     F .text	00000052 _ZL15wait_for_attachP5bc95g
0800ad88 l     F .text	00000064 _ZL14send_query_intP5bc95g9CommandIdPi
0800adec l     F .text	00000062 _ZL21wait_for_registrationP5bc95g
0800ae4e l     F .text	0000005e _ZL17attach_to_networkP5bc95g
0800aeac l     F .text	0000005c _ZL8send_hexP5bc95gPKht
0800af08 l     F .text	00000060 _ZL9send_dataP5bc95gPKhtP7os_mbuf
0800af68 l     F .text	000000c4 _ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf
200026f4 l     O .bss	00000100 _ZL15bc95g_rx_buffer
200027f4 l     O .bss	00000190 _ZL15bc95g_tx_buffer
20002984 l     O .bss	00000100 _ZL19bc95g_parser_buffer
20002a84 l     O .bss	0000003c _ZL6parser
20002ac0 l     O .bss	0000004c _ZL6serial
20002b0c l     O .bss	00000004 _ZL7packets
200001f8 l     O .data	00000001 _ZL10first_open
0800f794 l     O .text	00000014 _ZL13network_iface
0800f7f0 l     O .text	00000004 _ZL3ATP
0800f7f4 l     O .text	00000044 _ZL8COMMANDS
00000000 l    df *ABS*	00000000 transport.cpp
0800b18c l     F .text	00000004 _ZL10oc_ep_sizePK11oc_endpoint
0800b190 l     F .text	00000004 _ZL14oc_ep_has_connPK11oc_endpoint
0800b194 l     F .text	00000004 _ZL7oc_initv
0800b198 l     F .text	00000002 _ZL11oc_shutdownv
0800b19c l     F .text	00000028 _ZL9oc_ep_strPciPK11oc_endpoint
0800b1c4 l     F .text	000001b8 _ZL11oc_tx_ucastP7os_mbuf
20002b10 l     O .bss	00000004 _ZL14network_device
20002b14 l     O .bss	00000004 _ZL6server
20002b18 l     O .bss	00000001 _ZZL11oc_tx_ucastP7os_mbufE8sequence
200001f9 l     O .data	00000001 _ZL12transport_id
0800f930 l     O .text	00000024 _ZL9transport
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 ATParser.cpp
00000000 l    df *ABS*	00000000 BufferedSerial.cpp
0800b81c l     F .text	00000002 _ZL12uart_tx_donePv
0800b968 l     F .text	00000034 _ZL12uart_rx_charPvh
0800b9d8 l     F .text	00000016 _ZL12uart_tx_charPv
00000000 l    df *ABS*	00000000 MyBuffer.cpp
00000000 l    df *ABS*	00000000 creator.c
0800ba80 l     F .text	00000050 config_device
20002c24 l     O .bss	00000014 adc_1_itf_temp_stm32
20002c38 l     O .bss	000000d0 temp_stm32_dev
00000000 l    df *ABS*	00000000 temp_stm32.c
0800bb2c l     F .text	0000001c temp_stm32_sensor_get_config
0800bb48 l     F .text	0000001e temp_stm32_close
0800bb68 l     F .text	000000a8 temp_stm32_open
0800bd80 l     F .text	00000088 temp_stm32_sensor_read
20000200 l     O .data	0000000c temp_channel_config
0800fa0c l     O .text	00000028 g_temp_stm32_sensor_driver
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 flash_map.c
0800be3a l     F .text	00000078 flash_map_read_mfg
20002d08 l     O .bss	00000078 mfg_areas.6497
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0800bf90 l     F .text	00000094 mfg_seek_next_aux
0800c024 l     F .text	00000070 mfg_read_mmr
0800c094 l     F .text	00000054 mfg_read_next_mmr
0800c0e8 l     F .text	0000003c mfg_open_flash_area
0800c124 l     F .text	00000044 mfg_read_tlv_body
0800c1f0 l     F .text	0000004e mfg_read_mmr_refs
20002d80 l     O .bss	00000001 mfg_initialized
20002d84 l     O .bss	00000018 mfg_mmrs
20002d9c l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 vsscanf.c
00000000 l    df *ABS*	00000000 adc.c
00000000 l    df *ABS*	00000000 hal_flash.c
0800c7d4 l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 stm32f1xx_hal_adc.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_adc_ex.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_rcc_ex.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 bluepill_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 srand48.c
08005248 g     F .text	0000000a oc_random_rand
08001188  w    F .text	00000002 RTC_Alarm_IRQHandler
08003ddc g     F .text	00000054 console_buffer
08001188  w    F .text	00000002 EXTI2_IRQHandler
0800c86e  w    F .text	00000002 HAL_ADC_MspInit
0800d614 g     O .text	00000008 APBPrescTable
08005d60 g     F .text	00000034 os_arch_start
20002f78 g       .bss	00000000 __HeapBase
20002f1c g     O .bss	00000008 g_os_task_list
08005ed8 g     F .text	00000080 os_idle_task
0800ca3c g     F .text	0000000a ADC_DMAHalfConvCplt
08002900 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E
08009ad8 g     F .text	000000e0 HAL_GPIO_DeInit
20002f2c g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
08007de0 g     F .text	00000018 fmemopen_w
08001188  w    F .text	00000002 DebugMon_Handler
20002f00 g     O .bss	00000008 g_os_mempool_list
080060f0 g     F .text	0000001a os_callout_init
0800610c g     F .text	0000003c os_callout_stop
080075e4 g     F .text	00000050 add_malloc_block
080031de g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE
0800b07e g     F .text	0000001c bc95g_connect
0800642c g     F .text	00000054 os_eventq_put
08005178 g     F .text	00000038 oc_transport_register
08001a7a g     F .text	00000002 _ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h594cb8d9aced4d5eE
20000110 g       .data	00000000 __data_start__
080085d8 g     F .text	0000001c json_helper_close_array
08007ce4 g     F .text	00000024 printf
08005ad4 g     F .text	00000068 sensor_read
0800f630 g     O .text	00000004 stdout
0800d2ea g     F .text	00000010 vsprintf
080037d4 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17hb0ae5251a2953077E
0800a224 g     F .text	00000020 HAL_RCC_GetPCLK1Freq
080084f0 g     F .text	00000030 rtc_isr
080095a0 g     F .text	0000002c hal_gpio_write
08001188  w    F .text	00000002 TIM1_CC_IRQHandler
0800a244 g     F .text	00000020 HAL_RCC_GetPCLK2Freq
0800f6bc g     O .text	0000001c stm32_flash_funcs
08004000 g     F .text	0000004c json_write_mbuf
08005cbc g     F .text	000000a0 os_arch_os_init
08001188  w    F .text	00000002 HardFault_Handler
08008cec g     F .text	000000b4 hal_timer_init
0800c17a g     F .text	0000001a mfg_seek_next_with_type
08005d94 g     F .text	0000005c os_arch_os_start
0800b0d4 g     F .text	0000004c bc95g_socket_open
080081d0 g     F .text	0000000c exti_reset_request
0800b37c g     F .text	00000024 init_bc95g_endpoint
08005252 g     F .text	0000002c oc_new_string
080052ac g     F .text	00000014 __wrap_coap_receive
080074e2 g     F .text	0000000c SysTick_Handler
0800841c g     F .text	00000030 rtc_auto_awake
2000010c g       .coredata	00000000 __coredata_end__
08009bc6 g     F .text	0000000c HAL_GPIO_WritePin
0800521c g     F .text	00000024 oc_init
08002a70 g     F .text	00000200 _ZN4core3fmt5write17hfeb861b024853061E
0800593c g     F .text	00000014 sensor_mgr_find_next_bydevname
08001188  w    F .text	00000002 PVD_IRQHandler
08006a74 g     F .text	00000026 os_memblock_put
08006b6c g     F .text	00000020 os_msys_get_pkthdr
20002f70 g     O .bss	00000004 flash_map
0800fad4 g       *ABS*	00000000 _sidata
0800a218 g     F .text	0000000c HAL_RCC_GetHCLKFreq
080074b8 g     F .text	0000002a PendSV_Handler
08001188  w    F .text	00000002 NMI_Handler
0800fad4 g       .ARM.exidx	00000000 __exidx_end
08001020 g       .text	00000000 __isr_vector_start
0800a8f4 g     F .text	00000060 bc95g_create
08001188  w    F .text	00000002 EXTI3_IRQHandler
08007db0 g     F .text	0000002e memfile_write
08005c3c g     F .text	00000014 os_arch_ctx_sw
0800a030 g     F .text	00000070 HAL_RCC_GetSysClockFreq
0800b8dc g     F .text	0000004c _ZN14BufferedSerial5fgetcEi
08008998 g     F .text	00000068 uart_hal_init
08008ad4 g     F .text	0000002c hal_system_reset
08005f7c g     F .text	00000070 os_init_idle_task
0800b53c g     F .text	00000030 _ZN8ATParser7vprintfEPKcSt9__va_list
20000164 g       .data	00000000 __aeabi_unwind_cpp_pr0
0800806c g     F .text	00000010 pwr_clear_wakeup_flag
08006ee8 g     F .text	0000000c os_sched_set_current_task
0800fad4 g       .ARM.exidx	00000000 __etext
08009bd2 g     F .text	0000004a HAL_IWDG_Init
2000020c g       .corebss	00000000 __corebss_start__
08006bd4 g     F .text	000000b8 os_mutex_release
0800239e g     F .text	0000031e _ZN4core3str16slice_error_fail17h1c355556f2a38f35E
08006db8 g     F .text	00000024 os_sanity_check_register
08007eb0 g     F .text	00000008 power_timer_alarm
080073f0 g     F .text	00000026 os_time_delay
0800a330 g     F .text	00000038 stm32_mcu_flash_erase_sector
20002da8 g     O .bss	0000004c coap_json_encoder
20000210 g       .bss	00000000 _sbss
0800c194 g     F .text	0000000a mfg_read_tlv_flash_area
08003fe4 g     F .text	0000000c console_get_ticks
080020be g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E
08003832 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h748e245dbb816a9eE
08006896 g     F .text	000000be os_mbuf_prepend
0800c240 g     F .text	00000572 vsscanf
0800a45c g     F .text	00000002 sensor_dev_create
0800a3e8 g     F .text	00000074 HAL_DMA_Start_IT
08006a9c g     F .text	00000010 os_mempool_module_init
080018aa g     F .text	000000a0 _ZN6mynewt2hw6sensor17register_listener17hc8145e7a396d72e6E
08005c62 g     F .text	0000000a os_arch_in_critical
08001ede g     F .text	00000014 _ZN6mynewt4libs14sensor_network13get_device_id17h087866bad0e5b5f0E
08004690 g     F .text	00000070 get_hardware_id
08009904 g     F .text	000001d4 HAL_GPIO_Init
08007f00 g     F .text	00000120 power_sleep
08009c1c g     F .text	0000000c HAL_IWDG_Refresh
08005c30 g     F .text	0000000a timer_handler
08006378 g     F .text	00000020 os_dev_lookup
08003908 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17he3ba660dd7ebe35fE
08006ef4 g     F .text	00000090 os_sched_sleep
08004380 g     F .text	0000001c json_rep_end_root_object
08003f24 g     F .text	00000004 semihosting_console_init
080041e4 g     F .text	00000080 prepare_sensor_post
08007714 g     F .text	0000001a memcpy
0800c870 g     F .text	00000170 HAL_ADC_PollForConversion
080031ce g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE
08009400 g     F .text	00000034 hal_watchdog_init
20002df8 g     O .bss	00000010 coap_json_value
08002084 g     F .text	0000003a _ZN4core9panicking5panic17h138a849f37d3ac2dE
08006250 g     F .text	0000000c os_cputime_init
08001188  w    F .text	00000002 EXTI0_IRQHandler
08005608 g     F .text	0000001c json_encode_array_finish
08001188  w    F .text	00000002 I2C2_EV_IRQHandler
0800235a g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE
0800d2fc g     F .text	00000000 .hidden __aeabi_uldivmod
00000020 g       *ABS*	00000000 _imghdr_size
08006eac g     F .text	00000030 os_sched_ctx_sw_hook
20002da0 g     O .bss	00000004 console_is_midline
08006644 g     F .text	00000014 os_mbuf_free
08001c62 g     F .text	00000010 _ZN6mynewt6kernel2os15eventq_dflt_get17h0173394645c51d0dE
20000110 g     O .data	00000004 SystemCoreClock
20002e30 g     O .bss	00000034 sensor_mgr
0800be34 g     F .text	00000002 oc_register_ip6
08005c6c g     F .text	00000038 os_arch_task_stack_init
08007634 g     F .text	0000006c malloc
08005240 g     F .text	00000008 oc_clock_time
08005106 g     F .text	00000024 coap_set_header_uri_path
0800bef4 g     F .text	00000026 flash_area_read
080017da g     F .text	00000000 __bkpt
08005150 g     F .text	0000000e coap_set_header_observe
08005df4 g     F .text	0000004c __assert_func
0800cd04 g     F .text	00000130 HAL_ADC_Start_DMA
08007038 g     F .text	00000040 os_sched_wakeup_ticks
08003f50 g     F .text	0000004c console_pkg_init
0800837c g     F .text	00000034 rtc_clear_flag
08001188  w    F .text	00000002 UsageFault_Handler
08007d08 g     F .text	0000003a vsnprintf
08008610 g     F .text	0000001c json_helper_object_array_end_item
0800471c g     F .text	0000001a is_standalone_node
20002ef8 g     O .bss	00000008 g_callout_list
080049ac g     F .text	00000028 oc_send_message
0800d600 g     F .text	00000004 __aeabi_memcpy
08001188  w    F .text	00000002 ADC1_2_IRQHandler
080050f8 g     F .text	0000000e coap_set_header_accept
0800ba5c g     F .text	00000004 _ZN14BufferedSerial4baudEm
08007a80 g     F .text	0000025c tfp_format
08004d50 g     F .text	0000001a coap_init_message
20005000 g       .bss	00000000 __HeapLimit
20000210 g       .bss	00000000 __bss_start__
08008ad0 g     F .text	00000004 hal_debugger_connected
08009bb8 g     F .text	0000000e HAL_GPIO_ReadPin
0800b120 g     F .text	0000004e bc95g_socket_close
0800ba72  w    F .text	0000000c _ZN8MyBufferIcE4initEPcm
0800a368 g     F .text	00000054 stm32_hal_timer_get_freq
20000110 g       .data	00000000 _sdata
08001188  w    F .text	00000002 SPI1_IRQHandler
08009860 g     F .text	000000a4 HAL_FLASHEx_Erase
0800d32c g     F .text	000002ce .hidden __udivmoddi4
0800b478 g     F .text	00000014 _okfailed
080045c8 g     F .text	0000000c init_server_post
0800ca60 g     F .text	00000138 HAL_ADC_ConfigChannel
200001fc g     O .data	00000004 _nbt
08001188  w    F .text	00000002 TAMPER_IRQHandler
0800477c g     F .text	000000c0 sensor_network_init
08004264 g     F .text	00000050 json_rep_finalize
20002f14 g     O .bss	00000004 g_current_task
08006ddc g     F .text	0000006c os_sanity_run
08005160 g     F .text	0000000c oc_evq_get
08005c50 g     F .text	0000000c os_arch_save_sr
080093d0 g     F .text	00000030 hal_uart_close
08006a10 g     F .text	00000014 os_mempool_init
08007418 g     F .text	00000038 os_gettimeofday
08004460 g     F .text	00000074 sensor_network_start_transport
20002f24 g     O .bss	00000001 g_task_id
08003cf4 g     F .text	00000026 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17hf1595badf4d53d6dE
20002da4 g     O .bss	00000001 g_console_input_ignore
0800b0b6 g     F .text	0000001e bc95g_detach
0800f6a4 g     O .text	00000018 stm32_flash_dev
20002f50 g     O .bss	00000020 pFlash
080081f8 g     F .text	0000001c rtc_exit_config_mode
0800ce80 g     F .text	00000110 HAL_ADC_Init
08009068 g     F .text	00000038 hal_uart_blocking_tx
0800faba g       .text	00000000 __exidx_start
0800d1d0 g     F .text	0000011a strntoumax
0800d600 g     F .text	00000004 __aeabi_memcpy4
08004510 g     F .text	000000b8 sensor_network_init_post
08006e48 g     F .text	00000010 os_sanity_init
08006690 g     F .text	000000aa os_mbuf_append
0800c19e g     F .text	0000000a mfg_read_tlv_mmr_ref
08007458 g     F .text	00000014 os_set_env
080087e0 g     F .text	00000010 hal_bsp_flash_dev
0800805c g     F .text	00000010 pwr_disable_backup_domain_write_protect
08003a46 g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u64$GT$3fmt17ha9c56ab3b32cf62bE
0800483c g     F .text	000000d4 sensor_network_register_interface
0800f628 g     O .text	00000008 MemFile_methods
20002f08 g     O .bss	0000000c g_os_sanity_check_mu
08001c72 g     F .text	0000001e _ZN6mynewt2hw6sensor8bindings4read17h61569d040c39b7f7E
08008144 g     F .text	0000001c rcc_periph_clock_enable
08001188  w    F .text	00000002 DMA1_Channel4_IRQHandler
08005a04 g     F .text	00000064 sensor_set_poll_rate_ms
08005ab4 g     F .text	00000020 sensor_register_listener
08009460 g     F .text	00000044 _sbrk
08003bd2 g     F .text	0000000a _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h75cd43405bee1ff8E
0800bc10 g     F .text	0000002c temp_stm32_default_cfg
08003dd4 g     F .text	00000008 disable_buffer
0800cfcc g     F .text	000000ec HAL_ADCEx_Calibration_Start
08003f9c g     F .text	00000048 console_printf
08003ebc g     F .text	0000002c console_dump
08004700 g     F .text	0000001c is_collector_node
08003f46 g     F .text	00000008 console_blocking_mode
0800a864 g     F .text	00000040 stm32f1_adc_dev_init
2000020c g       .corebss	00000000 __corebss_end__
08001218 g     F .text	00000002 _init
08007e84 g     F .text	00000024 power_sync_time
08003bd2 g     F .text	0000000a _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h490cd499cca46fe6E
08003210 g     F .text	00000210 _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E
08008020 g     F .text	0000003c power_init
0800212e g     F .text	000001e8 _ZN4core5slice6memchr6memchr17hd4a19258abae6159E
0800b16e g     F .text	0000001e bc95g_socket_tx_mbuf
08001188  w    F .text	00000002 USART3_IRQHandler
08005824 g     F .text	0000001c sensor_mgr_lock
08001188  w    F .text	00000002 RTC_IRQHandler
0800b516 g     F .text	00000026 _ZN8ATParser5writeEPKci
20002f78 g       .bss	00000000 _ebss
08001a0c g     F .text	00000036 _ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE
0800527e g     F .text	00000010 oc_free_string
08005fec g     F .text	000000b0 os_init
08001188  w    F .text	00000002 DMA1_Channel7_IRQHandler
0800112c  w    F .text	0000003e Reset_Handler
08004364 g     F .text	0000001c json_rep_start_root_object
0800a2a0 g     F .text	00000074 TIM_Base_SetConfig
0800b99c g     F .text	0000003c _ZN14BufferedSerial5txIrqEv
0800516c g     F .text	0000000c oc_evq_set
08001188  w    F .text	00000002 CAN1_RX1_IRQHandler
0800b02c g     F .text	00000040 bc95g_init
20002e28 g     O .bss	00000001 sysinit_active
080065d2 g     F .text	0000000a os_mbuf_pool_init
0800963c g     F .text	0000001c hal_gpio_toggle
080074ee g     F .text	0000001e os_default_irq_asm
08007078 g     F .text	0000000c os_sched_next_task
08006e58 g     F .text	00000054 os_sched_insert
080086b4 g     F .text	0000002a get_temp_raw_data
08006148 g     F .text	00000078 os_callout_reset
0800c1a8 g     F .text	00000038 mfg_init
08004aa0 g     F .text	00000020 oc_ri_remove_client_cb_by_mid
0800640c g     F .text	00000010 os_dev_reset
08003204 g     F .text	0000000c _ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h8845cd1bde16499dE
08005624 g     F .text	00000004 hal_bsp_hw_id_len
08001188  w    F .text	00000002 TIM4_IRQHandler
080050ea g     F .text	0000000e coap_set_header_content_format
0800d600 g     F .text	00000004 __aeabi_memcpy8
08006bc0 g     F .text	00000014 os_mutex_init
08002074 g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h122f9d519f4a246bE
0800bf1c g     F .text	00000070 flash_map_init
08007d44 g     F .text	00000014 vprintf
08005f70 g     F .text	0000000c os_started
20000000 g       .bss	00000000 _ram_start
08006ffc g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0800977c g     F .text	0000009c HAL_FLASH_Program
08001188  w    F .text	00000002 I2C1_EV_IRQHandler
080082fc g     F .text	00000040 rtc_interrupt_enable
08008520 g     F .text	0000002c rtc_alarm_isr
0800b4fc g     F .text	0000001a _ZN8ATParser5flushEv
08004678 g     F .text	00000018 is_sensor_node
2000020c g       .data	00000000 __data_end__
08004d40 g     F .text	00000010 coap_get_mid
08001188  w    F .text	00000002 DMA1_Channel6_IRQHandler
0800b7c8 g     F .text	0000001c _ZN8ATParser6printfEPKcz
20002f28 g     O .bss	00000004 g_os_time
08001d46 g     F .text	000000b6 _ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17ha6adf4a3b1bf31c9E
08008f88 g     F .text	00000044 hal_uart_init_cbs
08009450 g     F .text	00000010 hal_watchdog_tickle
20002f78 g       .bss	00000000 __bss_end__
08003bb0 g     F .text	0000000a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h4a5378243facc467E
080049d4 g     F .text	00000028 oc_buffer_init
080065dc g     F .text	00000032 os_mbuf_get
08001188  w    F .text	00000002 TIM3_IRQHandler
08001188  w    F .text	00000002 RCC_IRQHandler
0800862c g     F .text	00000030 json_helper_set_int
08001188  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
080050bc g     F .text	00000016 coap_send_message
0800865c g     F .text	00000048 json_helper_set_text_string
08001188  w    F .text	00000002 DMA1_Channel1_IRQHandler
08001762 g     F .text	00000078 rust_begin_unwind
08006b5c g     F .text	00000010 os_msys_reset
08001188 g       .text	00000002 Default_Handler
0800983c g     F .text	00000024 FLASH_PageErase
08001204 g     F .text	00000014 _start
0800d604 g     O .text	00000010 AHBPrescTable
0800b9ee g     F .text	00000030 _ZN14BufferedSerial5primeEv
08003e4c g     F .text	00000070 console_printhex
0800cf90 g     F .text	0000003a HAL_ADC_Stop
080083b0 g     F .text	00000030 rtc_check_flag
08009710 g     F .text	0000006c FLASH_WaitForLastOperation
0800b800 g     F .text	0000001c _ZN8ATParser4recvEPKcz
0800746c g     F .text	00000006 os_arch_init_task_stack
08002316 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17hfa6ff34b8fd07644E
0800673a g     F .text	000000b8 os_mbuf_dup
080064fa g     F .text	00000018 os_eventq_run
080039de g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u64$GT$3fmt17h1bf045a2a754efdcE
080085b4 g     F .text	00000024 json_helper_set_array
08003908 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6fa9611feb1808ceE
08001188  w    F .text	00000002 EXTI15_10_IRQHandler
0800cc18 g     F .text	000000ec HAL_ADC_Start
0800808c g     F .text	00000010 rcc_rtc_clock_enabled_flag
08001aa8 g     F .text	000000ae _ZN6mynewt4Strn3new17hf631d8ed365ce2adE
08004ac0 g     F .text	000000a8 oc_ri_alloc_client_cb
080026bc g     F .text	00000158 _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E
20002ea0 g     O .bss	00000050 g_idle_task
080095cc g     F .text	00000050 hal_gpio_init_out
0800961c g     F .text	00000020 hal_gpio_read
20000148 g     O .data	00000004 sysinit_panic_cb
08009570 g     F .text	00000030 hal_gpio_deinit_stm
0800a0a0 g     F .text	00000178 HAL_RCC_ClockConfig
20002528 g     O .bss	00000004 g_os_sanity_check_list
08005950 g     F .text	00000008 sensor_pkg_init
08001a9a g     F .text	0000000e _ZN6mynewt7sysinit17h162e190ad004d957E
08009028 g     F .text	00000040 hal_uart_start_tx
08006a24 g     F .text	00000032 os_memblock_get
08006f84 g     F .text	00000078 os_sched_wakeup
20002c20 g     O .bss	00000004 rx_ptr
0800656e g     F .text	00000026 os_mqueue_get
080070d4 g     F .text	00000010 os_sem_init
08003832 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E
20002578 g     O .bss	00000004 rtc_configured
080086de g     F .text	00000030 mem_init_mbuf_pool
08002a4e g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17hd71f50db4d05698dE
08005e40 g     F .text	00000098 os_default_irq
0800a460 g     F .text	00000048 stm32f1_adc_create
20002f18 g     O .bss	00000004 g_os_last_ctx_sw_time
080070e4 g     F .text	00000064 os_sem_release
080080ac g     F .text	00000098 rcc_set_rtc_clock_source
080076cc g     F .text	00000048 memcmp
08005ca4 g     F .text	00000018 os_arch_init
2000010c g       .coredata	00000000 __coredata_start__
08001a7c g     F .text	00000002 _ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h1ffd6ed576a88ca6E
2000020c g       .corebss	00000000 __ecorebss
0800d1b4 g     F .text	0000001c sscanf
0800d5fc  w    F .text	00000002 .hidden __aeabi_ldiv0
08001188  w    F .text	00000002 EXTI9_5_IRQHandler
08005294 g     F .text	0000000c sysinit_start
08001b56 g     F .text	00000102 _ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E
08008da0 g     F .text	0000009c hal_timer_config
08002078 g     F .text	00000008 _ZN4core5panic8Location4file17ha9ce911e26883425E
08006398 g     F .text	00000044 os_dev_open
08007e2c g     F .text	00000018 __wrap_os_tick_init
080045d4 g     F .text	00000064 sensor_network_prepare_post
0800194e g     F .text	00000004 _ZN6mynewt3sys7console6buffer17h0c7d2f77d88e1e76E
080083e0 g     F .text	0000003c rtc_awake_from_standby
0800807c g     F .text	00000010 pwr_set_standby_mode
08007148 g     F .text	000000b8 os_sem_pend
08009434 g     F .text	0000001c hal_watchdog_enable
08008b00 g     F .text	00000008 HAL_GetTick
080050d2 g     F .text	00000018 coap_set_token
08004738 g     F .text	00000044 get_device_id
0800a824 g     F .text	00000040 HAL_ADC_ErrorCallback
0800496c g     F .text	00000040 oc_allocate_mbuf
08006594 g     F .text	0000003e os_mqueue_put
0800404c g     F .text	00000028 init_sensor_coap
08006ad8 g     F .text	00000040 os_msys_register
20002ef0 g     O .bss	00000004 g_os_idle_ctr
0800beb4 g     F .text	00000040 flash_area_open
08001188  w    F .text	00000002 SPI2_IRQHandler
080040b8 g     F .text	00000028 json_rep_reset
20002b20 g     O .bss	00000100 rx_buf
08008214 g     F .text	00000074 rtc_awake_from_off
0800772e g     F .text	00000016 memset
0800194e g     F .text	00000004 _ZN6mynewt3sys7console5print17hc20173b212ba6415E
08001188  w    F .text	00000002 MemManage_Handler
08001020 g       .text	00000000 __isr_vector
0800164c g     F .text	00000116 main
08003ee8 g     F .text	0000003c console_out_nolock
20002568 g     O .bss	00000004 network_is_busy
08002eea g     F .text	000002e4 _ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E
0800b06c g     F .text	0000000e bc95g_default_cfg
0800bad0 g     F .text	0000005c temp_stm32_create
08008580 g     F .text	00000034 platform_set_alarm
080055e8 g     F .text	00000020 json_encode_array_start
080086a4 g     F .text	00000010 rust_sysinit
080051b0 g     F .text	00000020 oc_send_buffer
080052a0 g     F .text	0000000c sysinit_end
0800bf8c g     F .text	00000002 modlog_init
08007472 g     F .text	00000046 SVC_Handler
0800b88c g     F .text	00000040 _ZN14BufferedSerial4initEPcmS0_mPKc
08007e44 g     F .text	00000020 target_enter_sleep_mode
20002e08 g     O .bss	00000020 oc_transports
0800a264 g     F .text	0000003c HAL_RCC_GetClockConfig
0800c81a g     F .text	00000054 hal_flash_read
080044d4 g     F .text	00000018 start_server_transport
08001a7e g     F .text	0000001c _ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h7bf5d80ec9025fc4E
0800d0b8 g     F .text	000000fc HAL_RCCEx_GetPeriphCLKFreq
08006554 g     F .text	00000008 os_eventq_dflt_get
08008e3c g     F .text	00000024 hal_timer_read
08007ea8 g     F .text	00000008 power_timer_tick
0800be30 g     F .text	00000002 oc_register_gatt
08006480 g     F .text	0000007a os_eventq_get
0800be08 g     F .text	00000028 temp_stm32_config
0800b8d0 g     F .text	0000000c _ZN14BufferedSerial8readableEv
0800b09a g     F .text	0000001c bc95g_attach
0800667c g     F .text	00000014 os_mbuf_len
08007450 g     F .text	00000006 os_time_ms_to_ticks
20002da5 g     O .bss	00000001 g_silence_console
08001188  w    F .text	00000002 DMA1_Channel5_IRQHandler
0800621c g     F .text	00000034 os_callout_wakeup_ticks
08001188  w    F .text	00000002 EXTI4_IRQHandler
08005958 g     F .text	00000018 sensor_lock
0800b48c g     F .text	00000028 _log
08001188  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
20002f74 g     O .bss	00000004 flash_map_entries
080067f2 g     F .text	000000a4 os_mbuf_adj
08003908 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E
08001020 g       .imghdr	00000000 __text
08003908 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17h136c33dad23d062bE
080018a8 g     F .text	00000002 _ZN6mynewt2hw6sensor10as_untyped17hac565a0d3178f153E
0800c168 g     F .text	00000012 mfg_seek_next
08001c90 g     F .text	000000b6 _ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h54ccd726782ab7b0E
08007764 g     F .text	0000001c strcmp
08005900 g     F .text	0000003c sensor_mgr_find_next
08006edc g     F .text	0000000c os_sched_get_current_task
08003f28 g     F .text	0000001e console_write
080081bc g     F .text	00000014 exti_enable_request
08007520 g     F .text	00000010 lrand48
08005628 g     F .text	0000001c hal_bsp_hw_id
08008178 g     F .text	00000044 exti_set_trigger
0800ba44 g     F .text	00000018 _ZN14BufferedSerial6attachEPFvPvES0_i
0800118c g     F .text	00000044 SystemInit
0800625c g     F .text	0000000a os_cputime_get32
0800b56c g     F .text	00000058 _ZN8ATParser5vsendEPKcSt9__va_list
08003776 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h3b71bd20fd2652bfE
08008288 g     F .text	00000020 rtc_set_alarm_time
08006512 g     F .text	00000040 os_eventq_remove
080055e0 g     F .text	00000008 json_encode_array_name
080052c0 g     F .text	00000002 _fini
08004638 g     F .text	00000026 sensor_network_do_post
08003832 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hf8d291ae99884edaE
08005850 g     F .text	0000000c sensor_mgr_evq_get
08001188  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
08007744 g     F .text	00000020 sprintf
0800ba1e g     F .text	00000026 _ZN14BufferedSerial4putcEi
08007084 g     F .text	00000022 os_sched
080051d0 g     F .text	0000004c oc_send_multicast_message
08008fcc g     F .text	0000005c hal_uart_start_rx
08002814 g     F .text	000000ec _ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E
08006c8c g     F .text	000000e0 os_mutex_pend
0800512a g     F .text	00000026 coap_set_header_uri_query
00000000 g       .svc_table	00000000 SVC_Table
08001188  w    F .text	00000002 DMA1_Channel3_IRQHandler
08003bba g     F .text	00000018 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17h35833e1076b6bfecE
08001ef4 g     F .text	0000011a _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE
20002f34 g     O .bss	00000010 stm32_tmr0
080052c4 g     F .text	0000003c json_encode_object_start
08008b08 g     F .text	00000004 HAL_InitTick
08004d6c g     F .text	0000034e coap_serialize_message
20005000 g       .bss	00000000 __StackTop
0800809c g     F .text	00000010 rcc_enable_rtc_clock
08005970 g     F .text	0000000a sensor_unlock
0800655c g     F .text	00000012 os_mqueue_init
08001188  w    F .text	00000002 TIM1_UP_IRQHandler
08001970 g     F .text	0000009c _ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E
08003d8c g     F .text	00000048 console_flush
08008160 g     F .text	00000018 nvic_enable_irq
200002ec g     O .bss	00000004 oc_content_format
0800ba60  w    F .text	00000012 _ZN8MyBufferIcE5clearEv
080020fe g     F .text	00000030 _ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE
08001188  w    F .text	00000002 WWDG_IRQHandler
0800854c g     F .text	00000034 platform_start_timer
0800b928 g     F .text	00000040 _ZN14BufferedSerial5rxIrqEh
080082a8 g     F .text	00000020 rtc_set_prescale_val
0800b3a0 g     F .text	0000001c init_bc95g_server
20002e64 g     O .bss	00000020 st_up_osco
080061c0 g     F .text	0000005c os_callout_tick
0800b3bc g     F .text	000000bc bc95g_register_transport
0800fa60 g     O .text	00000048 sysflash_map_dflt
08007e64 g     F .text	00000020 target_enter_deep_sleep_standby_mode
0800465e g     F .text	00000018 do_server_post
08001188  w    F .text	00000002 TIM2_IRQHandler
0800112c g       .text	00000000 __isr_vector_end
0800609c g     F .text	0000001a os_start
0800b7e4 g     F .text	0000001c _ZN8ATParser4sendEPKcz
08007eb8 g     F .text	00000048 power_standby_wakeup
08001ebc g     F .text	00000012 _ZN6mynewt4libs14sensor_network12prepare_post17hf47b658e9dd92751E
080090a0 g     F .text	00000310 hal_uart_config
080082c8 g     F .text	00000014 rtc_get_counter_val
08005a68 g     F .text	0000002e sensor_mgr_register
20000210 g     O .bss	00000040 _ZN6mynewt8encoding12coap_context12COAP_CONTEXT17hfe1f05c9061f8395E
0800435c g     F .text	00000008 do_sensor_post
0800cb98 g     F .text	00000080 ADC_Enable
08001188  w    F .text	00000002 TIM1_BRK_IRQHandler
0800b4e6 g     F .text	0000000a _ZN8ATParser4putcEc
20005000 g       .imghdr	00000000 _estack
080085f4 g     F .text	0000001c json_helper_object_array_start_item
08006954 g     F .text	00000044 os_mbuf_concat
08001188  w    F .text	00000002 EXTI1_IRQHandler
08007e0c g     F .text	0000001e __wrap_os_tick_idle
0800c1e0 g     F .text	00000010 mfg_open
20000154 g     O .data	00000008 g_os_run_list
2000020c g       .data	00000000 _edata
080011d0 g     F .text	00000034 NVIC_Relocate
0800be32 g     F .text	00000002 oc_register_ip4
08003a46 g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E
0800870e g     F .text	0000004c sysinit_app
08005840 g     F .text	00000010 sensor_mgr_unlock
200005e0 g     O .bss	00000004 os_flags
08005300 g     F .text	00000054 json_encode_object_key
08004a70 g     F .text	00000030 oc_ri_mem_init
080096e8 g     F .text	00000028 HAL_FLASH_Unlock
08005c5c g     F .text	00000006 os_arch_restore_sr
08005354 g     F .text	0000006c json_encode_object_entry
0800bc3c g     F .text	00000084 temp_stm32_init
08003776 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE
20005000 g       *ABS*	00000000 __StackLimit
20002ef4 g     O .bss	00000004 g_os_started
0800833c g     F .text	00000040 rtc_interrupt_disable
080063dc g     F .text	0000002e os_dev_close
20002b1c g     O .bss	00000004 debug_bc95g
08001188  w    F .text	00000002 USART2_IRQHandler
0800439c g     F .text	000000c4 sensor_network_register_transport
08009c54 g     F .text	000003dc HAL_RCC_OscConfig
080049fc g     F .text	00000028 oc_rep_init
08001020 g     O .text	00000000 g_pfnVectors
08002080 g     F .text	00000004 _ZN4core5panic8Location4line17h997c0352f671f211E
0800c9e8 g     F .text	00000052 ADC_DMAConvCplt
080055c0 g     F .text	00000020 json_encode_object_finish
08006658 g     F .text	00000024 os_mbuf_free_chain
08006b8c g     F .text	00000034 os_msys_init
08001188  w    F .text	00000002 I2C2_ER_IRQHandler
08001188  w    F .text	00000002 DMA1_Channel2_IRQHandler
080073a4 g     F .text	0000000c os_time_get
08002c70 g     F .text	00000248 _ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE
08001a42 g     F .text	00000038 _ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E
0800196c g     F .text	00000004 _ZN6mynewt3sys7console5flush17h2f347bab6c242839E
08001952 g     F .text	00000014 _ZN6mynewt3sys7console10print_strn17h03267ec31f7327aaE
20002e88 g     O .bss	00000018 sensor_base_ts
080056e0 g     F .text	00000032 sensor_mgr_match_bytype
080040e0 g     F .text	00000020 json_rep_new
0800660e g     F .text	00000036 os_mbuf_get_pkthdr
0800d5fc  w    F .text	00000002 .hidden __aeabi_idiv0
0800a314 g     F .text	0000001c TIM_CCxChannelCmd
08001188  w    F .text	00000002 CAN1_SCE_IRQHandler
0800ca3a  w    F .text	00000002 HAL_ADC_ConvHalfCpltCallback
08001188  w    F .text	00000002 FLASH_IRQHandler
08004074 g     F .text	00000044 init_sensor_post
08007218 g     F .text	000000d8 os_task_init
08001188  w    F .text	00000002 BusFault_Handler
08001188  w    F .text	00000002 USART1_IRQHandler
08003bba g     F .text	00000018 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h8362f63c9a899390E
08007780 g     F .text	00000010 strlen
0800630c g     F .text	00000040 os_dev_create
08006a56 g     F .text	0000001e os_memblock_put_from_cb
0800641c g     F .text	00000010 os_eventq_init
080073b0 g     F .text	00000040 os_time_advance
080070a8 g     F .text	0000002c os_sched_resort
08001dfc g     F .text	0000000e _ZN6mynewt4libs14sensor_network22start_server_transport17hacf1950a2bf8e132E
08001966 g     F .text	00000006 _ZN6mynewt3sys7console8printhex17h434896f5fcfc2044E
0800c7f2 g     F .text	00000028 hal_flash_init
08001188  w    F .text	00000002 I2C1_ER_IRQHandler
080031d6 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE
0800ca46 g     F .text	0000001a ADC_DMAError
080082dc g     F .text	00000020 rtc_set_counter_val
08005a96 g     F .text	0000001e sensor_init
0800b4b4 g     F .text	00000032 _ZN8ATParser4initER14BufferedSerialPciPKcib
0800c7b4 g     F .text	00000020 adc_chan_config
080039de g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E
20002f44 g     O .bss	0000000c g_wdt_cfg
0800634c g     F .text	0000002c os_dev_initialize_all
0800bcc0 g     F .text	000000c0 temp_stm32_get_raw_temperature
080037d4 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E
0800b5c4 g     F .text	00000204 _ZN8ATParser5vrecvEPKcSt9__va_list
2000015c g     O .data	00000008 g_os_sleep_list
08007d58 g     F .text	00000058 jrand48
080087f0 g     F .text	00000064 hal_bsp_init
08001c58 g     F .text	0000000a _ZN6mynewt6kernel2os10eventq_run17h00ed7b6e5ed865a7E
080060b8 g     F .text	00000038 os_pkg_init
0800b07a g     F .text	00000004 bc95g_config
08003832 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h2d12e58c2cdf8b30E
08009538 g     F .text	00000038 hal_gpio_init_stm
08001e0a g     F .text	000000b2 _ZN6mynewt4libs14sensor_network16init_server_post17h864e17c9ed4d984fE
20002564 g     O .bss	00000004 network_has_transmitted
08006da8 g     F .text	00000010 os_sanity_check_init
0800fad4 g       *ABS*	00000000 __ecoredata
080093b0 g     F .text	00000020 hal_uart_init
0800b820 g     F .text	0000006c _Z10setup_uartP14BufferedSerial
08001188  w    F .text	00000002 USBWakeUp_IRQHandler
08007cdc g     F .text	00000008 vfprintf
08001ece g     F .text	00000010 _ZN6mynewt4libs14sensor_network14do_server_post17hc5b5f69d66a9019aE
0800ce34 g     F .text	0000004c ADC_ConversionStop_Disable
0800be38 g     F .text	00000002 oc_register_serial
0800b4f0 g     F .text	0000000c _ZN8ATParser5fgetcEv
0800b8cc g     F .text	00000004 _ZN14BufferedSerial9configureEi
080076a0 g     F .text	0000002c free
0800c9e6  w    F .text	00000002 HAL_ADC_ConvCpltCallback
0800c9e0 g     F .text	00000006 HAL_ADC_GetValue
080081dc g     F .text	0000001c rtc_enter_config_mode
0800be36 g     F .text	00000002 oc_register_lora



Disassembly of section .text:

08001020 <__isr_vector>:
 8001020:	20005000 	.word	0x20005000
 8001024:	0800112d 	.word	0x0800112d
 8001028:	08001189 	.word	0x08001189
 800102c:	08001189 	.word	0x08001189
 8001030:	08001189 	.word	0x08001189
 8001034:	08001189 	.word	0x08001189
 8001038:	08001189 	.word	0x08001189
	...
 800104c:	08007473 	.word	0x08007473
 8001050:	08001189 	.word	0x08001189
 8001054:	00000000 	.word	0x00000000
 8001058:	080074b9 	.word	0x080074b9
 800105c:	080074e3 	.word	0x080074e3
 8001060:	08001189 	.word	0x08001189
 8001064:	08001189 	.word	0x08001189
 8001068:	08001189 	.word	0x08001189
 800106c:	08001189 	.word	0x08001189
 8001070:	08001189 	.word	0x08001189
 8001074:	08001189 	.word	0x08001189
 8001078:	08001189 	.word	0x08001189
 800107c:	08001189 	.word	0x08001189
 8001080:	08001189 	.word	0x08001189
 8001084:	08001189 	.word	0x08001189
 8001088:	08001189 	.word	0x08001189
 800108c:	08001189 	.word	0x08001189
 8001090:	08001189 	.word	0x08001189
 8001094:	08001189 	.word	0x08001189
 8001098:	08001189 	.word	0x08001189
 800109c:	08001189 	.word	0x08001189
 80010a0:	08001189 	.word	0x08001189
 80010a4:	08001189 	.word	0x08001189
 80010a8:	08001189 	.word	0x08001189
 80010ac:	08001189 	.word	0x08001189
 80010b0:	08001189 	.word	0x08001189
 80010b4:	08001189 	.word	0x08001189
 80010b8:	08001189 	.word	0x08001189
 80010bc:	08001189 	.word	0x08001189
 80010c0:	08001189 	.word	0x08001189
 80010c4:	08001189 	.word	0x08001189
 80010c8:	08001189 	.word	0x08001189
 80010cc:	08001189 	.word	0x08001189
 80010d0:	08001189 	.word	0x08001189
 80010d4:	08001189 	.word	0x08001189
 80010d8:	08001189 	.word	0x08001189
 80010dc:	08001189 	.word	0x08001189
 80010e0:	08001189 	.word	0x08001189
 80010e4:	08001189 	.word	0x08001189
 80010e8:	08001189 	.word	0x08001189
 80010ec:	08001189 	.word	0x08001189
 80010f0:	08001189 	.word	0x08001189
 80010f4:	08001189 	.word	0x08001189
 80010f8:	08001189 	.word	0x08001189
 80010fc:	08001189 	.word	0x08001189
 8001100:	08001189 	.word	0x08001189
 8001104:	08001189 	.word	0x08001189
 8001108:	08001189 	.word	0x08001189
	...
 8001128:	f108f85f 	.word	0xf108f85f

0800112c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800112c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800112e:	e003      	b.n	8001138 <LoopCopyDataInit>

08001130 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <LoopFillZeroCoreBss+0x10>)
  ldr r3, [r3, r1]
 8001132:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001134:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001136:	3104      	adds	r1, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopFillZeroCoreBss+0x14>)
  ldr r3, =_edata
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <LoopFillZeroCoreBss+0x18>)
  adds r2, r0, r1
 800113c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001140:	d3f6      	bcc.n	8001130 <CopyDataInit>

  ldr r2, =_sbss
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <LoopFillZeroCoreBss+0x1c>)
  b LoopFillZerobss
 8001144:	e002      	b.n	800114c <LoopFillZerobss>

08001146 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001148:	f842 3b04 	str.w	r3, [r2], #4

0800114c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <LoopFillZeroCoreBss+0x20>)
  cmp r2, r3
 800114e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001150:	d3f9      	bcc.n	8001146 <FillZerobss>

/* Mynewt specific corebss clearing. */
  ldr   r2, =__corebss_start__
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <LoopFillZeroCoreBss+0x24>)
  b     LoopFillZeroCoreBss
 8001154:	e002      	b.n	800115c <LoopFillZeroCoreBss>

08001156 <FillZeroCoreBss>:

/* Zero fill the bss segment. */
FillZeroCoreBss:
  movs  r3, #0
 8001156:	2300      	movs	r3, #0
  str   r3, [r2], #4
 8001158:	f842 3b04 	str.w	r3, [r2], #4

0800115c <LoopFillZeroCoreBss>:

LoopFillZeroCoreBss:
  ldr   r3, =__corebss_end__
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <LoopFillZeroCoreBss+0x28>)
  cmp   r2, r3
 800115e:	429a      	cmp	r2, r3
  bcc   FillZeroCoreBss
 8001160:	d3f9      	bcc.n	8001156 <FillZeroCoreBss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001162:	f000 f813 	bl	800118c <SystemInit>
/* Call libc's entry point.*/
  bl  _start
 8001166:	f000 f84d 	bl	8001204 <_start>
 800116a:	0000      	.short	0x0000
  ldr r3, =_sidata
 800116c:	0800fad4 	.word	0x0800fad4
  ldr r0, =_sdata
 8001170:	20000110 	.word	0x20000110
  ldr r3, =_edata
 8001174:	2000020c 	.word	0x2000020c
  ldr r2, =_sbss
 8001178:	20000210 	.word	0x20000210
  ldr r3, = _ebss
 800117c:	20002f78 	.word	0x20002f78
  ldr   r2, =__corebss_start__
 8001180:	2000020c 	.word	0x2000020c
  ldr   r3, =__corebss_end__
 8001184:	2000020c 	.word	0x2000020c

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>
	...

0800118c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800118c:	b508      	push	{r3, lr}
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <SystemInit+0x3c>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	f042 0201 	orr.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001198:	6859      	ldr	r1, [r3, #4]
 800119a:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <SystemInit+0x40>)
 800119c:	400a      	ands	r2, r1
 800119e:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011aa:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80011ba:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011bc:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011c0:	609a      	str	r2, [r3, #8]
    SystemInit_ExtMemCtl(); 
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Relocate the vector table */
  NVIC_Relocate();
 80011c2:	f000 f805 	bl	80011d0 <NVIC_Relocate>
}
 80011c6:	bd08      	pop	{r3, pc}
 80011c8:	40021000 	.word	0x40021000
 80011cc:	f8ff0000 	.word	0xf8ff0000

080011d0 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
 80011d0:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <NVIC_Relocate+0x28>)
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <NVIC_Relocate+0x2c>)
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d00a      	beq.n	80011ee <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	e006      	b.n	80011ea <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <NVIC_Relocate+0x2c>)
 80011de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <NVIC_Relocate+0x28>)
 80011e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
 80011e8:	3301      	adds	r3, #1
 80011ea:	2b3a      	cmp	r3, #58	; 0x3a
 80011ec:	ddf6      	ble.n	80011dc <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
 80011ee:	4a02      	ldr	r2, [pc, #8]	; (80011f8 <NVIC_Relocate+0x28>)
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <NVIC_Relocate+0x30>)
 80011f2:	609a      	str	r2, [r3, #8]
#endif
}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000000 	.word	0x20000000
 80011fc:	08001020 	.word	0x08001020
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
 8001204:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
 8001206:	4803      	ldr	r0, [pc, #12]	; (8001214 <_start+0x10>)
 8001208:	f004 fef0 	bl	8005fec <os_init>
    os_start();
 800120c:	f004 ff46 	bl	800609c <os_start>
#endif
}
 8001210:	bd08      	pop	{r3, pc}
 8001212:	bf00      	nop
 8001214:	0800164d 	.word	0x0800164d

08001218 <_init>:

void
_init(void)
{
}
 8001218:	4770      	bx	lr

0800121a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d87f6531d0ca4e0E>:
 800121a:	b5b0      	push	{r4, r5, r7, lr}
 800121c:	6805      	ldr	r5, [r0, #0]
 800121e:	4608      	mov	r0, r1
 8001220:	460c      	mov	r4, r1
 8001222:	f001 ffd4 	bl	80031ce <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>
 8001226:	b128      	cbz	r0, 8001234 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d87f6531d0ca4e0E+0x1a>
 8001228:	4628      	mov	r0, r5
 800122a:	4621      	mov	r1, r4
 800122c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001230:	f002 baa1 	b.w	8003776 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE>
 8001234:	4620      	mov	r0, r4
 8001236:	f001 ffce 	bl	80031d6 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>
 800123a:	b128      	cbz	r0, 8001248 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d87f6531d0ca4e0E+0x2e>
 800123c:	4628      	mov	r0, r5
 800123e:	4621      	mov	r1, r4
 8001240:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001244:	f002 bac6 	b.w	80037d4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E>
 8001248:	4628      	mov	r0, r5
 800124a:	4621      	mov	r1, r4
 800124c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001250:	f002 bcae 	b.w	8003bb0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h4a5378243facc467E>

08001254 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h34b7478360faddecE>:
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	6805      	ldr	r5, [r0, #0]
 8001258:	4608      	mov	r0, r1
 800125a:	460c      	mov	r4, r1
 800125c:	f001 ffb7 	bl	80031ce <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>
 8001260:	b128      	cbz	r0, 800126e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h34b7478360faddecE+0x1a>
 8001262:	4628      	mov	r0, r5
 8001264:	4621      	mov	r1, r4
 8001266:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800126a:	f002 bae2 	b.w	8003832 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E>
 800126e:	4620      	mov	r0, r4
 8001270:	f001 ffb1 	bl	80031d6 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>
 8001274:	b128      	cbz	r0, 8001282 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h34b7478360faddecE+0x2e>
 8001276:	4628      	mov	r0, r5
 8001278:	4621      	mov	r1, r4
 800127a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800127e:	f002 bb43 	b.w	8003908 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E>
 8001282:	4628      	mov	r0, r5
 8001284:	4621      	mov	r1, r4
 8001286:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800128a:	f002 bc96 	b.w	8003bba <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h8362f63c9a899390E>

0800128e <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0bdb5d41856bc834E>:
 800128e:	460a      	mov	r2, r1
 8001290:	e9d0 3100 	ldrd	r3, r1, [r0]
 8001294:	4618      	mov	r0, r3
 8001296:	f001 bfb5 	b.w	8003204 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h8845cd1bde16499dE>

0800129a <_ZN4core6result13unwrap_failed17h2598843d1764ab0eE>:
 800129a:	b08e      	sub	sp, #56	; 0x38
 800129c:	2208      	movs	r2, #8
 800129e:	e9cd 0201 	strd	r0, r2, [sp, #4]
 80012a2:	f641 60f5 	movw	r0, #7925	; 0x1ef5
 80012a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80012aa:	9103      	str	r1, [sp, #12]
 80012ac:	900d      	str	r0, [sp, #52]	; 0x34
 80012ae:	a803      	add	r0, sp, #12
 80012b0:	900c      	str	r0, [sp, #48]	; 0x30
 80012b2:	f241 208f 	movw	r0, #4751	; 0x128f
 80012b6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80012ba:	a90a      	add	r1, sp, #40	; 0x28
 80012bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80012be:	a801      	add	r0, sp, #4
 80012c0:	900a      	str	r0, [sp, #40]	; 0x28
 80012c2:	2002      	movs	r0, #2
 80012c4:	9009      	str	r0, [sp, #36]	; 0x24
 80012c6:	9108      	str	r1, [sp, #32]
 80012c8:	2100      	movs	r1, #0
 80012ca:	9107      	str	r1, [sp, #28]
 80012cc:	e9cd 0105 	strd	r0, r1, [sp, #20]
 80012d0:	f24d 6020 	movw	r0, #54816	; 0xd620
 80012d4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80012d8:	f24d 6148 	movw	r1, #54856	; 0xd648
 80012dc:	9004      	str	r0, [sp, #16]
 80012de:	a804      	add	r0, sp, #16
 80012e0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80012e4:	f000 ff0b 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 80012e8:	defe      	udf	#254	; 0xfe

080012ea <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE>:
    Ok(())
}

///  This listener function is called every 10 seconds by Mynewt to handle the polled sensor data.
///  Return 0 if we have handled the sensor data successfully.
extern fn handle_sensor_data(sensor: sensor_ptr, _arg: sensor_arg, 
 80012ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012ee:	b099      	sub	sp, #100	; 0x64
 80012f0:	4605      	mov	r5, r0
    sensor_data: sensor_data_ptr, sensor_type: sensor_type_t) -> MynewtError {
    console::print("Rust handle_sensor_data\n");
 80012f2:	f24d 60c0 	movw	r0, #54976	; 0xd6c0
 80012f6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80012fa:	2118      	movs	r1, #24
 80012fc:	4614      	mov	r4, r2
 80012fe:	f000 fb26 	bl	800194e <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>

    //  Check that the temperature data is valid.
    if sensor_data.is_null() { return MynewtError::SYS_EINVAL; }  //  Exit if data is missing
 8001302:	2c00      	cmp	r4, #0
 8001304:	d04d      	beq.n	80013a2 <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE+0xb8>
    assert!(!sensor.is_null(), "null sensor");
 8001306:	2d00      	cmp	r5, #0
 8001308:	f000 8122 	beq.w	8001550 <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE+0x266>

///  Convert the raw temperature value received from Mynewt into a `SensorValue` for transmission, which includes the sensor data key `t`. 
///  `sensor_type` indicates the type of data in `sensor_data`.
#[allow(non_snake_case, unused_variables)]
fn convert_sensor_data(sensor_data: sensor_data_ptr, sensor_type: sensor_type_t) -> SensorValue {
    console::print("TMP listener got rawtmp\n");
 800130c:	f24d 7012 	movw	r0, #55058	; 0xd712
 8001310:	2118      	movs	r1, #24
 8001312:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001316:	f000 fb1a 	bl	800194e <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
 800131a:	ad01      	add	r5, sp, #4
 800131c:	2600      	movs	r6, #0
        key: &TEMP_SENSOR_KEY,  //  Sensor data key is `t`
        val: match sensor_type {
            SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW => {  //  If this is raw temperature...
                //  Interpret the sensor data as a `sensor_temp_raw_data` struct that contains raw temp.
                let mut rawtempdata = fill_zero!(sensor_temp_raw_data);
                let rc = unsafe { sensor::get_temp_raw_data(sensor_data, &mut rawtempdata) };
 800131e:	4620      	mov	r0, r4
                let mut rawtempdata = fill_zero!(sensor_temp_raw_data);
 8001320:	f88d 6008 	strb.w	r6, [sp, #8]
                let rc = unsafe { sensor::get_temp_raw_data(sensor_data, &mut rawtempdata) };
 8001324:	4629      	mov	r1, r5
                let mut rawtempdata = fill_zero!(sensor_temp_raw_data);
 8001326:	9601      	str	r6, [sp, #4]
                let rc = unsafe { sensor::get_temp_raw_data(sensor_data, &mut rawtempdata) };
 8001328:	f007 f9c4 	bl	80086b4 <get_temp_raw_data>
                assert_eq!(rc, 0, "rawtmp fail");
 800132c:	2800      	cmp	r0, #0
                let rc = unsafe { sensor::get_temp_raw_data(sensor_data, &mut rawtempdata) };
 800132e:	9003      	str	r0, [sp, #12]
                assert_eq!(rc, 0, "rawtmp fail");
 8001330:	f040 8115 	bne.w	800155e <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE+0x274>
                //  Check that the raw temperature data is valid.
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
 8001334:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001338:	2800      	cmp	r0, #0
 800133a:	f000 814b 	beq.w	80015d4 <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE+0x2ea>
///   {"key":"device", "value":"0102030405060708090a0b0c0d0e0f10"},
///   {"key":"t",      "value":1715}
/// ]}
/// ```
pub fn send_sensor_data(val: &SensorValue) -> MynewtResult<()>  {  //  Returns an error code upon error.
    console::print("Rust send_sensor_data\n");
 800133e:	f64d 0024 	movw	r0, #55332	; 0xd824
 8001342:	2116      	movs	r1, #22
 8001344:	f6c0 0000 	movt	r0, #2048	; 0x800
                //  Raw temperature data is valid.  Return it.
                SensorValueType::Uint(rawtempdata.strd_temp_raw)  //  Raw Temperature in integer (0 to 4095)
 8001348:	9c01      	ldr	r4, [sp, #4]
 800134a:	f000 fb00 	bl	800194e <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
 800134e:	a812      	add	r0, sp, #72	; 0x48
    //  Get a randomly-generated device ID that changes each time we restart the device.
    let device_id = sensor_network::get_device_id() ? ;
 8001350:	f000 fdc5 	bl	8001ede <_ZN6mynewt4libs14sensor_network13get_device_id17h087866bad0e5b5f0E>
 8001354:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
 8001358:	2901      	cmp	r1, #1
 800135a:	d015      	beq.n	8001388 <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE+0x9e>
 800135c:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8001360:	ab04      	add	r3, sp, #16
 8001362:	ad12      	add	r5, sp, #72	; 0x48
 8001364:	c307      	stmia	r3!, {r0, r1, r2}

    //  Start composing the CoAP Server message with the sensor data in the payload.  This will 
    //  block other tasks from composing and posting CoAP messages (through a semaphore).
    //  We only have 1 memory buffer for composing CoAP messages so it needs to be locked.
    let rc = sensor_network::init_server_post( strn!(()) ) ? ;  //  `strn!(())` means use default CoAP URI in `syscfg.yml`
 8001366:	f24d 71b8 	movw	r1, #55224	; 0xd7b8
 800136a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800136e:	4628      	mov	r0, r5
 8001370:	2201      	movs	r2, #1
 8001372:	f000 fb99 	bl	8001aa8 <_ZN6mynewt4Strn3new17hf631d8ed365ce2adE>
 8001376:	a80a      	add	r0, sp, #40	; 0x28
 8001378:	4629      	mov	r1, r5
 800137a:	f000 fd46 	bl	8001e0a <_ZN6mynewt4libs14sensor_network16init_server_post17h864e17c9ed4d984fE>
 800137e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001380:	b2c1      	uxtb	r1, r0
 8001382:	2901      	cmp	r1, #1
 8001384:	d112      	bne.n	80013ac <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE+0xc2>
 8001386:	980b      	ldr	r0, [sp, #44]	; 0x2c
    if let Err(err) = res {  //  `if let` will assign `err` to the error code inside `res`
 8001388:	3006      	adds	r0, #6
 800138a:	d106      	bne.n	800139a <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE+0xb0>
            console::print("TMP network not ready\n");
 800138c:	f24d 60fc 	movw	r0, #55036	; 0xd6fc
 8001390:	2116      	movs	r1, #22
 8001392:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001396:	f000 fada 	bl	800194e <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
 800139a:	2000      	movs	r0, #0
}
 800139c:	b019      	add	sp, #100	; 0x64
 800139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013a2:	f06f 0001 	mvn.w	r0, #1
 80013a6:	b019      	add	sp, #100	; 0x64
 80013a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

    //  If network transport not ready, tell caller (Sensor Listener) to try again later.
    if !rc { return Err(MynewtError::SYS_EAGAIN); }
 80013ac:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 80013b0:	d0ec      	beq.n	800138c <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE+0xa2>
 80013b2:	a812      	add	r0, sp, #72	; 0x48

    //  Compose the CoAP Payload using the coap!() macro.
    //  Select @json or @cbor To encode CoAP Payload in JSON or CBOR format.
    let _payload = coap!( @json {        
 80013b4:	2132      	movs	r1, #50	; 0x32
 80013b6:	f000 fd81 	bl	8001ebc <_ZN6mynewt4libs14sensor_network12prepare_post17hf47b658e9dd92751E>
 80013ba:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80013be:	2801      	cmp	r0, #1
 80013c0:	f000 80b1 	beq.w	8001526 <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE+0x23c>
 80013c4:	f002 ffce 	bl	8004364 <json_rep_start_root_object>
 80013c8:	f240 2a10 	movw	sl, #528	; 0x210
 80013cc:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 80013d0:	4650      	mov	r0, sl
 80013d2:	f000 fb52 	bl	8001a7a <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h594cb8d9aced4d5eE>
 80013d6:	f64d 013a 	movw	r1, #55354	; 0xd83a
 80013da:	4607      	mov	r7, r0
 80013dc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80013e0:	4650      	mov	r0, sl
 80013e2:	2207      	movs	r2, #7
 80013e4:	f000 fb12 	bl	8001a0c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 80013e8:	4601      	mov	r1, r0
 80013ea:	4638      	mov	r0, r7
 80013ec:	f007 f8e2 	bl	80085b4 <json_helper_set_array>
 80013f0:	f64d 0941 	movw	r9, #55361	; 0xd841
 80013f4:	4650      	mov	r0, sl
 80013f6:	f6c0 0900 	movt	r9, #2048	; 0x800
 80013fa:	220d      	movs	r2, #13
 80013fc:	4649      	mov	r1, r9
 80013fe:	f000 fb05 	bl	8001a0c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 8001402:	f007 f8f7 	bl	80085f4 <json_helper_object_array_start_item>
 8001406:	ae0a      	add	r6, sp, #40	; 0x28
 8001408:	f24d 713c 	movw	r1, #55100	; 0xd73c
 800140c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001410:	2204      	movs	r2, #4
 8001412:	4630      	mov	r0, r6
 8001414:	f000 fb48 	bl	8001aa8 <_ZN6mynewt4Strn3new17hf631d8ed365ce2adE>
 8001418:	af12      	add	r7, sp, #72	; 0x48
 800141a:	f64d 014e 	movw	r1, #55374	; 0xd84e
 800141e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001422:	2207      	movs	r2, #7
 8001424:	4638      	mov	r0, r7
 8001426:	f000 fb3f 	bl	8001aa8 <_ZN6mynewt4Strn3new17hf631d8ed365ce2adE>
 800142a:	4650      	mov	r0, sl
 800142c:	4631      	mov	r1, r6
 800142e:	463a      	mov	r2, r7
 8001430:	f000 fa9e 	bl	8001970 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E>
 8001434:	ae12      	add	r6, sp, #72	; 0x48
 8001436:	f64d 0155 	movw	r1, #55381	; 0xd855
 800143a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800143e:	2206      	movs	r2, #6
 8001440:	4630      	mov	r0, r6
 8001442:	f000 fb31 	bl	8001aa8 <_ZN6mynewt4Strn3new17hf631d8ed365ce2adE>
 8001446:	aa04      	add	r2, sp, #16
 8001448:	4650      	mov	r0, sl
 800144a:	4631      	mov	r1, r6
 800144c:	f000 fa90 	bl	8001970 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E>
 8001450:	4650      	mov	r0, sl
 8001452:	4649      	mov	r1, r9
 8001454:	220d      	movs	r2, #13
 8001456:	f000 fad9 	bl	8001a0c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 800145a:	f007 f8d9 	bl	8008610 <json_helper_object_array_end_item>
 800145e:	4650      	mov	r0, sl
 8001460:	4649      	mov	r1, r9
 8001462:	220d      	movs	r2, #13
 8001464:	f000 fad2 	bl	8001a0c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 8001468:	f007 f8c4 	bl	80085f4 <json_helper_object_array_start_item>
 800146c:	f64d 005b 	movw	r0, #55387	; 0xd85b
 8001470:	2103      	movs	r1, #3
 8001472:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001476:	f000 fb01 	bl	8001a7c <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h1ffd6ed576a88ca6E>
 800147a:	4606      	mov	r6, r0
 800147c:	f24d 702c 	movw	r0, #55084	; 0xd72c
 8001480:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001484:	460f      	mov	r7, r1
 8001486:	f000 fafa 	bl	8001a7e <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h7bf5d80ec9025fc4E>
 800148a:	4605      	mov	r5, r0
 800148c:	4650      	mov	r0, sl
 800148e:	468b      	mov	fp, r1
 8001490:	f000 faf3 	bl	8001a7a <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h594cb8d9aced4d5eE>
 8001494:	4680      	mov	r8, r0
 8001496:	4650      	mov	r0, sl
 8001498:	4631      	mov	r1, r6
 800149a:	463a      	mov	r2, r7
 800149c:	f000 fab6 	bl	8001a0c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 80014a0:	4606      	mov	r6, r0
 80014a2:	4650      	mov	r0, sl
 80014a4:	4629      	mov	r1, r5
 80014a6:	465a      	mov	r2, fp
 80014a8:	f000 facb 	bl	8001a42 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4640      	mov	r0, r8
 80014b0:	4631      	mov	r1, r6
 80014b2:	f007 f8d3 	bl	800865c <json_helper_set_text_string>
 80014b6:	f64d 005e 	movw	r0, #55390	; 0xd85e
 80014ba:	2105      	movs	r1, #5
 80014bc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80014c0:	f000 fadc 	bl	8001a7c <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h1ffd6ed576a88ca6E>
 80014c4:	4605      	mov	r5, r0
 80014c6:	4650      	mov	r0, sl
 80014c8:	460e      	mov	r6, r1
 80014ca:	f000 fad6 	bl	8001a7a <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h594cb8d9aced4d5eE>
 80014ce:	4607      	mov	r7, r0
 80014d0:	4650      	mov	r0, sl
 80014d2:	4629      	mov	r1, r5
 80014d4:	4632      	mov	r2, r6
 80014d6:	f000 fa99 	bl	8001a0c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 80014da:	4601      	mov	r1, r0
 80014dc:	4638      	mov	r0, r7
 80014de:	4622      	mov	r2, r4
 80014e0:	2300      	movs	r3, #0
 80014e2:	f007 f8a3 	bl	800862c <json_helper_set_int>
 80014e6:	4650      	mov	r0, sl
 80014e8:	4649      	mov	r1, r9
 80014ea:	220d      	movs	r2, #13
 80014ec:	f000 fa8e 	bl	8001a0c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 80014f0:	f007 f88e 	bl	8008610 <json_helper_object_array_end_item>
 80014f4:	4650      	mov	r0, sl
 80014f6:	f000 fac0 	bl	8001a7a <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h594cb8d9aced4d5eE>
 80014fa:	f64d 013a 	movw	r1, #55354	; 0xd83a
 80014fe:	4604      	mov	r4, r0
 8001500:	4650      	mov	r0, sl
 8001502:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001506:	2207      	movs	r2, #7
 8001508:	f000 fa80 	bl	8001a0c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 800150c:	4601      	mov	r1, r0
 800150e:	4620      	mov	r0, r4
 8001510:	f007 f862 	bl	80085d8 <json_helper_close_array>
 8001514:	f002 ff34 	bl	8004380 <json_rep_end_root_object>
 8001518:	a812      	add	r0, sp, #72	; 0x48
    });

    //  Post the CoAP Server message to the CoAP Background Task for transmission.  After posting the
    //  message to the background task, we release a semaphore that unblocks other requests
    //  to compose and post CoAP messages.
    sensor_network::do_server_post() ? ;
 800151a:	f000 fcd8 	bl	8001ece <_ZN6mynewt4libs14sensor_network14do_server_post17hc5b5f69d66a9019aE>
 800151e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8001522:	2801      	cmp	r0, #1
 8001524:	d104      	bne.n	8001530 <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE+0x246>
 8001526:	9813      	ldr	r0, [sp, #76]	; 0x4c
    if let Err(err) = res {  //  `if let` will assign `err` to the error code inside `res`
 8001528:	3006      	adds	r0, #6
 800152a:	f43f af2f 	beq.w	800138c <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE+0xa2>
 800152e:	e734      	b.n	800139a <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE+0xb0>

    //  Display the URL with the random device ID for viewing the sensor data.
    console::print("NET view your sensor at \nhttps://blue-pill-geolocate.appspot.com?device=");
 8001530:	f64d 0063 	movw	r0, #55395	; 0xd863
 8001534:	2148      	movs	r1, #72	; 0x48
 8001536:	f6c0 0000 	movt	r0, #2048	; 0x800
 800153a:	f000 fa08 	bl	800194e <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
 800153e:	a804      	add	r0, sp, #16
    console::print_strn(&device_id); console::print("\n");
 8001540:	f000 fa07 	bl	8001952 <_ZN6mynewt3sys7console10print_strn17h03267ec31f7327aaE>
 8001544:	f64d 00ab 	movw	r0, #55467	; 0xd8ab
 8001548:	2101      	movs	r1, #1
 800154a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800154e:	e722      	b.n	8001396 <_ZN3app10app_sensor18handle_sensor_data17hbbfb8632db424dbeE+0xac>
    assert!(!sensor.is_null(), "null sensor");
 8001550:	f24d 60e4 	movw	r0, #55012	; 0xd6e4
 8001554:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001558:	f000 fd94 	bl	8002084 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 800155c:	defe      	udf	#254	; 0xfe
 800155e:	a803      	add	r0, sp, #12
                assert_eq!(rc, 0, "rawtmp fail");
 8001560:	9010      	str	r0, [sp, #64]	; 0x40
 8001562:	f24d 7038 	movw	r0, #55096	; 0xd738
 8001566:	9617      	str	r6, [sp, #92]	; 0x5c
 8001568:	f6c0 0000 	movt	r0, #2048	; 0x800
 800156c:	a911      	add	r1, sp, #68	; 0x44
 800156e:	9011      	str	r0, [sp, #68]	; 0x44
 8001570:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8001574:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001578:	9016      	str	r0, [sp, #88]	; 0x58
 800157a:	2001      	movs	r0, #1
 800157c:	e9cd 6614 	strd	r6, r6, [sp, #80]	; 0x50
 8001580:	9013      	str	r0, [sp, #76]	; 0x4c
 8001582:	f24d 70a0 	movw	r0, #55200	; 0xd7a0
 8001586:	f6c0 0000 	movt	r0, #2048	; 0x800
 800158a:	9012      	str	r0, [sp, #72]	; 0x48
 800158c:	f642 204f 	movw	r0, #10831	; 0x2a4f
 8001590:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001594:	900f      	str	r0, [sp, #60]	; 0x3c
 8001596:	a812      	add	r0, sp, #72	; 0x48
 8001598:	900e      	str	r0, [sp, #56]	; 0x38
 800159a:	f241 2055 	movw	r0, #4693	; 0x1255
 800159e:	f6c0 0000 	movt	r0, #2048	; 0x800
 80015a2:	900d      	str	r0, [sp, #52]	; 0x34
 80015a4:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 80015a8:	a810      	add	r0, sp, #64	; 0x40
 80015aa:	a90a      	add	r1, sp, #40	; 0x28
 80015ac:	900a      	str	r0, [sp, #40]	; 0x28
 80015ae:	2003      	movs	r0, #3
 80015b0:	9009      	str	r0, [sp, #36]	; 0x24
 80015b2:	e9cd 6107 	strd	r6, r1, [sp, #28]
 80015b6:	f24d 71a8 	movw	r1, #55208	; 0xd7a8
 80015ba:	e9cd 0605 	strd	r0, r6, [sp, #20]
 80015be:	f24d 707c 	movw	r0, #55164	; 0xd77c
 80015c2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80015c6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80015ca:	9004      	str	r0, [sp, #16]
 80015cc:	a804      	add	r0, sp, #16
 80015ce:	f000 fd96 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 80015d2:	defe      	udf	#254	; 0xfe
 80015d4:	1d28      	adds	r0, r5, #4
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
 80015d6:	9010      	str	r0, [sp, #64]	; 0x40
 80015d8:	f24d 70b8 	movw	r0, #55224	; 0xd7b8
 80015dc:	f24d 611c 	movw	r1, #54812	; 0xd61c
 80015e0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80015e4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80015e8:	9011      	str	r0, [sp, #68]	; 0x44
 80015ea:	2000      	movs	r0, #0
 80015ec:	9017      	str	r0, [sp, #92]	; 0x5c
 80015ee:	aa11      	add	r2, sp, #68	; 0x44
 80015f0:	9116      	str	r1, [sp, #88]	; 0x58
 80015f2:	2101      	movs	r1, #1
 80015f4:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
 80015f8:	9113      	str	r1, [sp, #76]	; 0x4c
 80015fa:	f64d 010c 	movw	r1, #55308	; 0xd80c
 80015fe:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001602:	9112      	str	r1, [sp, #72]	; 0x48
 8001604:	f642 214f 	movw	r1, #10831	; 0x2a4f
 8001608:	f6c0 0100 	movt	r1, #2048	; 0x800
 800160c:	910f      	str	r1, [sp, #60]	; 0x3c
 800160e:	a912      	add	r1, sp, #72	; 0x48
 8001610:	910e      	str	r1, [sp, #56]	; 0x38
 8001612:	f241 211b 	movw	r1, #4635	; 0x121b
 8001616:	f6c0 0100 	movt	r1, #2048	; 0x800
 800161a:	910d      	str	r1, [sp, #52]	; 0x34
 800161c:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 8001620:	a910      	add	r1, sp, #64	; 0x40
 8001622:	aa0a      	add	r2, sp, #40	; 0x28
 8001624:	910a      	str	r1, [sp, #40]	; 0x28
 8001626:	2103      	movs	r1, #3
 8001628:	9109      	str	r1, [sp, #36]	; 0x24
 800162a:	e9cd 0207 	strd	r0, r2, [sp, #28]
 800162e:	e9cd 1005 	strd	r1, r0, [sp, #20]
 8001632:	f24d 70e8 	movw	r0, #55272	; 0xd7e8
 8001636:	f6c0 0000 	movt	r0, #2048	; 0x800
 800163a:	f64d 0114 	movw	r1, #55316	; 0xd814
 800163e:	9004      	str	r0, [sp, #16]
 8001640:	a804      	add	r0, sp, #16
 8001642:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001646:	f000 fd5a 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 800164a:	defe      	udf	#254	; 0xfe

0800164c <main>:
};

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
 800164c:	b08a      	sub	sp, #40	; 0x28
    //  Initialise the Mynewt packages and Blue Pill internal temperature sensor driver.
    //  Start the CoAP / OIC Background Task to transmit CoAP messages.  Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/bluepill_my_sensor/generated/src/bluepill_my_sensor-sysinit-app.c
    mynewt::sysinit();
 800164e:	f000 fa24 	bl	8001a9a <_ZN6mynewt7sysinit17h162e190ad004d957E>

    //  Start the Server Transport for sending sensor data to CoAP Server over NB-IoT.
    sensor_network::start_server_transport()
 8001652:	f000 fbd3 	bl	8001dfc <_ZN6mynewt4libs14sensor_network22start_server_transport17hacf1950a2bf8e132E>
 8001656:	2801      	cmp	r0, #1
 8001658:	d16c      	bne.n	8001734 <main+0xe8>
    console::print("Rust TMP poll\n");
 800165a:	f24d 6074 	movw	r0, #54900	; 0xd674
 800165e:	210e      	movs	r1, #14
 8001660:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001664:	f000 f973 	bl	800194e <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
    let sensor = sensor::mgr_find_next_bydevname(&SENSOR_DEVICE, core::ptr::null_mut()) ? ;
 8001668:	f24d 6168 	movw	r1, #54888	; 0xd668
 800166c:	a804      	add	r0, sp, #16
 800166e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001672:	2200      	movs	r2, #0
 8001674:	f000 fb0c 	bl	8001c90 <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h54ccd726782ab7b0E>
 8001678:	e9dd 0404 	ldrd	r0, r4, [sp, #16]
 800167c:	2801      	cmp	r0, #1
 800167e:	d103      	bne.n	8001688 <main+0x3c>
 8001680:	4621      	mov	r1, r4
 8001682:	2901      	cmp	r1, #1
 8001684:	d03a      	beq.n	80016fc <main+0xb0>
 8001686:	e065      	b.n	8001754 <main+0x108>
    assert!(!sensor.is_null(), "no sensor");
 8001688:	2c00      	cmp	r4, #0
 800168a:	d05b      	beq.n	8001744 <main+0xf8>

extern {
    fn power_standby_wakeup() -> i32;
}
fn standby_wakeup() -> bool {
    if unsafe { power_standby_wakeup() == 0 } { false }
 800168c:	f006 fc14 	bl	8007eb8 <power_standby_wakeup>
    if !standby_wakeup() {
 8001690:	b1a8      	cbz	r0, 80016be <main+0x72>
            sensor::as_untyped(handle_sensor_data),  //  Handler function
 8001692:	f241 20eb 	movw	r0, #4843	; 0x12eb
 8001696:	f6c0 0000 	movt	r0, #2048	; 0x800
 800169a:	f000 f905 	bl	80018a8 <_ZN6mynewt2hw6sensor10as_untyped17hac565a0d3178f153E>
 800169e:	2200      	movs	r2, #0
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
        sensor::read(
 80016a4:	e9cd 0200 	strd	r0, r2, [sp]
 80016a8:	4620      	mov	r0, r4
 80016aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ae:	2300      	movs	r3, #0
 80016b0:	9102      	str	r1, [sp, #8]
 80016b2:	f000 fade 	bl	8001c72 <_ZN6mynewt2hw6sensor8bindings4read17h61569d040c39b7f7E>
 80016b6:	4601      	mov	r1, r0
 80016b8:	2901      	cmp	r1, #1
 80016ba:	d01f      	beq.n	80016fc <main+0xb0>
 80016bc:	e04a      	b.n	8001754 <main+0x108>
        sensor::set_poll_rate_ms(&SENSOR_DEVICE, SENSOR_POLL_TIME) ? ;
 80016be:	f24d 6068 	movw	r0, #54888	; 0xd668
 80016c2:	f644 6120 	movw	r1, #20000	; 0x4e20
 80016c6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80016ca:	f000 fb3c 	bl	8001d46 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17ha6adf4a3b1bf31c9E>
 80016ce:	2801      	cmp	r0, #1
 80016d0:	d13f      	bne.n	8001752 <main+0x106>
            sl_func       : sensor::as_untyped(handle_sensor_data),  //  Listener function
 80016d2:	f241 20eb 	movw	r0, #4843	; 0x12eb
 80016d6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80016da:	f000 f8e5 	bl	80018a8 <_ZN6mynewt2hw6sensor10as_untyped17hac565a0d3178f153E>
 80016de:	2100      	movs	r1, #0
 80016e0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
        sensor::register_listener(sensor, listener) ? ;  //  `?` means in case of error, return error now.
 80016e4:	9105      	str	r1, [sp, #20]
 80016e6:	9204      	str	r2, [sp, #16]
 80016e8:	9108      	str	r1, [sp, #32]
 80016ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80016ee:	a904      	add	r1, sp, #16
 80016f0:	4620      	mov	r0, r4
 80016f2:	f000 f8da 	bl	80018aa <_ZN6mynewt2hw6sensor17register_listener17hc8145e7a396d72e6E>
 80016f6:	4601      	mov	r1, r0
 80016f8:	2901      	cmp	r1, #1
 80016fa:	d12b      	bne.n	8001754 <main+0x108>
 80016fc:	ac04      	add	r4, sp, #16
        .expect("TMP fail");

    //  Main event loop
    loop {                            //  Loop forever...
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
 80016fe:	4620      	mov	r0, r4
 8001700:	f000 faaf 	bl	8001c62 <_ZN6mynewt6kernel2os15eventq_dflt_get17h0173394645c51d0dE>
 8001704:	9804      	ldr	r0, [sp, #16]
 8001706:	2801      	cmp	r0, #1
 8001708:	d00c      	beq.n	8001724 <main+0xd8>
 800170a:	9805      	ldr	r0, [sp, #20]
        os::eventq_run(               //  Processing events...
 800170c:	f000 faa4 	bl	8001c58 <_ZN6mynewt6kernel2os10eventq_run17h00ed7b6e5ed865a7E>
 8001710:	2801      	cmp	r0, #1
 8001712:	d0f4      	beq.n	80016fe <main+0xb2>
 8001714:	4601      	mov	r1, r0
 8001716:	f64d 00c4 	movw	r0, #55492	; 0xd8c4
 800171a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800171e:	f7ff fdbc 	bl	800129a <_ZN4core6result13unwrap_failed17h2598843d1764ab0eE>
 8001722:	defe      	udf	#254	; 0xfe
 8001724:	9905      	ldr	r1, [sp, #20]
 8001726:	f64d 00bc 	movw	r0, #55484	; 0xd8bc
 800172a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800172e:	f7ff fdb4 	bl	800129a <_ZN4core6result13unwrap_failed17h2598843d1764ab0eE>
 8001732:	defe      	udf	#254	; 0xfe
 8001734:	4601      	mov	r1, r0
 8001736:	f64d 00ac 	movw	r0, #55468	; 0xd8ac
 800173a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800173e:	f7ff fdac 	bl	800129a <_ZN4core6result13unwrap_failed17h2598843d1764ab0eE>
 8001742:	defe      	udf	#254	; 0xfe
    assert!(!sensor.is_null(), "no sensor");
 8001744:	f24d 60a8 	movw	r0, #54952	; 0xd6a8
 8001748:	f6c0 0000 	movt	r0, #2048	; 0x800
 800174c:	f000 fc9a 	bl	8002084 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8001750:	defe      	udf	#254	; 0xfe
 8001752:	4601      	mov	r1, r0
 8001754:	f64d 00b4 	movw	r0, #55476	; 0xd8b4
 8001758:	f6c0 0000 	movt	r0, #2048	; 0x800
 800175c:	f7ff fd9d 	bl	800129a <_ZN4core6result13unwrap_failed17h2598843d1764ab0eE>
 8001760:	defe      	udf	#254	; 0xfe

08001762 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
 8001762:	4604      	mov	r4, r0
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
 8001764:	f64d 00d4 	movw	r0, #55508	; 0xd8d4
 8001768:	f6c0 0000 	movt	r0, #2048	; 0x800
 800176c:	2106      	movs	r1, #6
 800176e:	f000 f8ee 	bl	800194e <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
    if let Some(location) = info.location() {
 8001772:	4620      	mov	r0, r4
 8001774:	f000 fc7e 	bl	8002074 <_ZN4core5panic9PanicInfo8location17h122f9d519f4a246bE>
 8001778:	b318      	cbz	r0, 80017c2 <rust_begin_unwind+0x60>
 800177a:	4604      	mov	r4, r0
        let file = location.file();
 800177c:	f000 fc7c 	bl	8002078 <_ZN4core5panic8Location4file17ha9ce911e26883425E>
 8001780:	4605      	mov	r5, r0
        let line = location.line();
 8001782:	4620      	mov	r0, r4
        let file = location.file();
 8001784:	460e      	mov	r6, r1
        let line = location.line();
 8001786:	f000 fc7b 	bl	8002080 <_ZN4core5panic8Location4line17h997c0352f671f211E>
 800178a:	4604      	mov	r4, r0
        console::print("at ");        console::buffer(&file);
 800178c:	f64d 00e1 	movw	r0, #55521	; 0xd8e1
 8001790:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001794:	2103      	movs	r1, #3
 8001796:	f000 f8da 	bl	800194e <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
 800179a:	4628      	mov	r0, r5
 800179c:	4631      	mov	r1, r6
 800179e:	f000 f8d6 	bl	800194e <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
        console::print(" line 0x");   console::printhex(line as u8);  //  TODO: Print in decimal not hex. Allow more than 255 lines.
 80017a2:	f64d 00cc 	movw	r0, #55500	; 0xd8cc
 80017a6:	2108      	movs	r1, #8
 80017a8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80017ac:	f000 f8cf 	bl	800194e <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
 80017b0:	4620      	mov	r0, r4
 80017b2:	f000 f8d8 	bl	8001966 <_ZN6mynewt3sys7console8printhex17h434896f5fcfc2044E>
        console::print("\n");         console::flush();
 80017b6:	f64d 00ab 	movw	r0, #55467	; 0xd8ab
 80017ba:	2101      	movs	r1, #1
 80017bc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80017c0:	e004      	b.n	80017cc <rust_begin_unwind+0x6a>
    } else {
        console::print("no loc\n");   console::flush();
 80017c2:	f64d 00da 	movw	r0, #55514	; 0xd8da
 80017c6:	2107      	movs	r1, #7
 80017c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80017cc:	f000 f8bf 	bl	800194e <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
 80017d0:	f000 f8cc 	bl	800196c <_ZN6mynewt3sys7console5flush17h2f347bab6c242839E>
        () => unsafe {
            extern "C" {
                fn __bkpt();
            }

            __bkpt();
 80017d4:	f000 f801 	bl	80017da <__bkpt>
    }
    //  Pause in the debugger.
    bkpt();
    //  Loop forever so that device won't restart.
    loop {}
 80017d8:	e7fe      	b.n	80017d8 <rust_begin_unwind+0x76>

080017da <__bkpt>:
 80017da:	be00      	bkpt	0x0000
 80017dc:	4770      	bx	lr

080017de <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0aa02af027a21484E>:
 80017de:	b5b0      	push	{r4, r5, r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	6805      	ldr	r5, [r0, #0]
 80017e4:	466c      	mov	r4, sp
 80017e6:	6828      	ldr	r0, [r5, #0]
 80017e8:	b1a8      	cbz	r0, 8001816 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0aa02af027a21484E+0x38>
 80017ea:	f64d 1238 	movw	r2, #55608	; 0xd938
 80017ee:	4620      	mov	r0, r4
 80017f0:	f6c0 0200 	movt	r2, #2048	; 0x800
 80017f4:	2304      	movs	r3, #4
 80017f6:	f001 fcf2 	bl	80031de <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 80017fa:	f64d 1248 	movw	r2, #55624	; 0xd948
 80017fe:	a903      	add	r1, sp, #12
 8001800:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001804:	4620      	mov	r0, r4
 8001806:	9503      	str	r5, [sp, #12]
 8001808:	f001 f804 	bl	8002814 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E>
 800180c:	4620      	mov	r0, r4
 800180e:	f001 f877 	bl	8002900 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 8001812:	b004      	add	sp, #16
 8001814:	bdb0      	pop	{r4, r5, r7, pc}
 8001816:	f64d 123c 	movw	r2, #55612	; 0xd93c
 800181a:	4620      	mov	r0, r4
 800181c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001820:	2304      	movs	r3, #4
 8001822:	f001 fcdc 	bl	80031de <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 8001826:	4620      	mov	r0, r4
 8001828:	f001 f86a 	bl	8002900 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 800182c:	b004      	add	sp, #16
 800182e:	bdb0      	pop	{r4, r5, r7, pc}

08001830 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h24a37d0be695a87dE>:
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	6805      	ldr	r5, [r0, #0]
 8001834:	4608      	mov	r0, r1
 8001836:	460c      	mov	r4, r1
 8001838:	f001 fcc9 	bl	80031ce <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>
 800183c:	b128      	cbz	r0, 800184a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h24a37d0be695a87dE+0x1a>
 800183e:	4628      	mov	r0, r5
 8001840:	4621      	mov	r1, r4
 8001842:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001846:	f002 b8ca 	b.w	80039de <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E>
 800184a:	4620      	mov	r0, r4
 800184c:	f001 fcc3 	bl	80031d6 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>
 8001850:	b128      	cbz	r0, 800185e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h24a37d0be695a87dE+0x2e>
 8001852:	4628      	mov	r0, r5
 8001854:	4621      	mov	r1, r4
 8001856:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800185a:	f002 b8f4 	b.w	8003a46 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E>
 800185e:	4628      	mov	r0, r5
 8001860:	4621      	mov	r1, r4
 8001862:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001866:	f002 ba45 	b.w	8003cf4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17hf1595badf4d53d6dE>

0800186a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e18813c7e529e80E>:
 800186a:	b5b0      	push	{r4, r5, r7, lr}
 800186c:	6800      	ldr	r0, [r0, #0]
 800186e:	460c      	mov	r4, r1
 8001870:	6805      	ldr	r5, [r0, #0]
 8001872:	4608      	mov	r0, r1
 8001874:	f001 fcab 	bl	80031ce <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>
 8001878:	b128      	cbz	r0, 8001886 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e18813c7e529e80E+0x1c>
 800187a:	4628      	mov	r0, r5
 800187c:	4621      	mov	r1, r4
 800187e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001882:	f001 bf78 	b.w	8003776 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE>
 8001886:	4620      	mov	r0, r4
 8001888:	f001 fca5 	bl	80031d6 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>
 800188c:	b128      	cbz	r0, 800189a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e18813c7e529e80E+0x30>
 800188e:	4628      	mov	r0, r5
 8001890:	4621      	mov	r1, r4
 8001892:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001896:	f001 bf9d 	b.w	80037d4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E>
 800189a:	4628      	mov	r0, r5
 800189c:	4621      	mov	r1, r4
 800189e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80018a2:	f002 b985 	b.w	8003bb0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h4a5378243facc467E>

080018a6 <_ZN4core3ptr18real_drop_in_place17h6cddc1d5a292b1e6E>:
 80018a6:	4770      	bx	lr

080018a8 <_ZN6mynewt2hw6sensor10as_untyped17hac565a0d3178f153E>:
        ::core::mem::transmute::
            <sensor_data_func, sensor_data_func_untyped>
            (typed)
    };
    Some(untyped)
}
 80018a8:	4770      	bx	lr

080018aa <_ZN6mynewt2hw6sensor17register_listener17hc8145e7a396d72e6E>:
///  For more information on the type of callbacks available, see the documentation
///  for the sensor listener structure.
///  `sensor`: The sensor to register a listener on.
///  `listener`: The listener to register onto the sensor.
///  Returns `Ok()` on success, `Err()` containing `MynewtError` error code on failure.
pub fn register_listener(sensor: *mut sensor, listener: sensor_listener) -> MynewtResult<()> {  //  Returns an error code upon error. 
 80018aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ac:	b095      	sub	sp, #84	; 0x54
 80018ae:	468c      	mov	ip, r1
    unsafe { assert_eq!(LISTENER_INTERNAL.sl_sensor_type, 0, "reg lis") };  //  Make sure it's not used.
 80018b0:	f240 1118 	movw	r1, #280	; 0x118
 80018b4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80018b8:	e9d1 3200 	ldrd	r3, r2, [r1]
 80018bc:	431a      	orrs	r2, r3
 80018be:	d109      	bne.n	80018d4 <_ZN6mynewt2hw6sensor17register_listener17hc8145e7a396d72e6E+0x2a>
    //  Copy the caller's listener to the internal listener.
    unsafe { LISTENER_INTERNAL = listener };
 80018c0:	e89c 40f8 	ldmia.w	ip, {r3, r4, r5, r6, r7, lr}
 80018c4:	460a      	mov	r2, r1
 80018c6:	e882 40f8 	stmia.w	r2, {r3, r4, r5, r6, r7, lr}
    //  Pass the internal listener to the unsafe Mynewt API.
    unsafe { sensor_register_listener(sensor, &mut LISTENER_INTERNAL) };
 80018ca:	f004 f8f3 	bl	8005ab4 <sensor_register_listener>
    Ok(())
}
 80018ce:	2001      	movs	r0, #1
 80018d0:	b015      	add	sp, #84	; 0x54
 80018d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    unsafe { assert_eq!(LISTENER_INTERNAL.sl_sensor_type, 0, "reg lis") };  //  Make sure it's not used.
 80018d4:	f64d 1058 	movw	r0, #55640	; 0xd958
 80018d8:	910d      	str	r1, [sp, #52]	; 0x34
 80018da:	f64d 1138 	movw	r1, #55608	; 0xd938
 80018de:	f6c0 0000 	movt	r0, #2048	; 0x800
 80018e2:	900e      	str	r0, [sp, #56]	; 0x38
 80018e4:	2000      	movs	r0, #0
 80018e6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80018ea:	9014      	str	r0, [sp, #80]	; 0x50
 80018ec:	9113      	str	r1, [sp, #76]	; 0x4c
 80018ee:	2101      	movs	r1, #1
 80018f0:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
 80018f4:	aa0e      	add	r2, sp, #56	; 0x38
 80018f6:	9110      	str	r1, [sp, #64]	; 0x40
 80018f8:	f64d 1178 	movw	r1, #55672	; 0xd978
 80018fc:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001900:	910f      	str	r1, [sp, #60]	; 0x3c
 8001902:	f642 214f 	movw	r1, #10831	; 0x2a4f
 8001906:	f6c0 0100 	movt	r1, #2048	; 0x800
 800190a:	910c      	str	r1, [sp, #48]	; 0x30
 800190c:	a90f      	add	r1, sp, #60	; 0x3c
 800190e:	910b      	str	r1, [sp, #44]	; 0x2c
 8001910:	f641 0131 	movw	r1, #6193	; 0x1831
 8001914:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001918:	910a      	str	r1, [sp, #40]	; 0x28
 800191a:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800191e:	a90d      	add	r1, sp, #52	; 0x34
 8001920:	aa07      	add	r2, sp, #28
 8001922:	9107      	str	r1, [sp, #28]
 8001924:	2103      	movs	r1, #3
 8001926:	9106      	str	r1, [sp, #24]
 8001928:	e9cd 0204 	strd	r0, r2, [sp, #16]
 800192c:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8001930:	f64d 1020 	movw	r0, #55584	; 0xd920
 8001934:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001938:	f64d 119c 	movw	r1, #55708	; 0xd99c
 800193c:	9001      	str	r0, [sp, #4]
 800193e:	a801      	add	r0, sp, #4
 8001940:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001944:	f000 fbdb 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001948:	defe      	udf	#254	; 0xfe

0800194a <_ZN6mynewt2hw6sensor21null_sensor_data_func17hb73afa768c6c9e6aE>:
extern fn null_sensor_data_func(
    _sensor: sensor_ptr, 
    _arg: sensor_arg, 
    _sensor_data: sensor_data_ptr, 
    _sensor_type: sensor_type_t) -> i32
    { 0 }
 800194a:	2000      	movs	r0, #0
 800194c:	4770      	bx	lr

0800194e <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn print(msg: &str) {
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
 800194e:	f002 ba45 	b.w	8003ddc <console_buffer>

08001952 <_ZN6mynewt3sys7console10print_strn17h03267ec31f7327aaE>:
}

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn print_strn(msg: &crate::Strn) {
 8001952:	b510      	push	{r4, lr}
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
 8001954:	6844      	ldr	r4, [r0, #4]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
 8001956:	f000 f8fe 	bl	8001b56 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E>
 800195a:	4601      	mov	r1, r0
 800195c:	4620      	mov	r0, r4
 800195e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001962:	f002 ba3b 	b.w	8003ddc <console_buffer>

08001966 <_ZN6mynewt3sys7console8printhex17h434896f5fcfc2044E>:
}

///  Write a byte in hexadecimal to the output buffer.
///  C API: `void console_printhex(uint8_t v)`
pub fn printhex(v: u8) {
    unsafe { console_printhex(v); }
 8001966:	b2c0      	uxtb	r0, r0
 8001968:	f002 ba70 	b.w	8003e4c <console_printhex>

0800196c <_ZN6mynewt3sys7console5flush17h2f347bab6c242839E>:
}

///  Flush the output buffer to the console.
pub fn flush() {
    unsafe { console_flush(); }
 800196c:	f002 ba0e 	b.w	8003d8c <console_flush>

08001970 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E>:
static mut cbor_encoder0: CborEncoder = fill_zero!(CborEncoder);
static mut cbor_encoder1: CborEncoder = fill_zero!(CborEncoder);

impl CoapContext {

    pub fn json_set_text_string(&mut self, key: &Strn, value: &Strn) {
 8001970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001972:	b081      	sub	sp, #4
 8001974:	4604      	mov	r4, r0
        let key_cstr: *const u8 =
            match key.rep {
                StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 8001976:	7808      	ldrb	r0, [r1, #0]
 8001978:	4616      	mov	r6, r2
 800197a:	2801      	cmp	r0, #1
 800197c:	d104      	bne.n	8001988 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x18>
                StrnRep::CStr(cstr)  => { cstr }
 800197e:	684d      	ldr	r5, [r1, #4]
            };
        let value_cstr: *const u8 =
            match value.rep {
                StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 8001980:	7830      	ldrb	r0, [r6, #0]
 8001982:	2801      	cmp	r0, #1
 8001984:	d016      	beq.n	80019b4 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x44>
 8001986:	e017      	b.n	80019b8 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x48>
                StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 8001988:	e9d1 5701 	ldrd	r5, r7, [r1, #4]
 800198c:	2f01      	cmp	r7, #1
 800198e:	d304      	bcc.n	800199a <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x2a>
 8001990:	1e78      	subs	r0, r7, #1
 8001992:	42b8      	cmp	r0, r7
 8001994:	d201      	bcs.n	800199a <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x2a>
 8001996:	5c28      	ldrb	r0, [r5, r0]
    /// Given a key `s`, return a `*char` pointer that is null-terminated. Used for encoding COAP keys.
    /// If `s` is null-terminated, return it as a pointer. Else copy `s` to the static buffer,
    /// append null and return the buffer as a pointer.
    pub fn key_to_cstr(&mut self, s: &[u8]) -> *const u8 {                
        //  If null-terminated, return as pointer.
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 8001998:	b148      	cbz	r0, 80019ae <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x3e>
        //  Else copy into static key buffer and return pointer to buffer.
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 800199a:	2f20      	cmp	r7, #32
 800199c:	d228      	bcs.n	80019f0 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x80>
 800199e:	4620      	mov	r0, r4
 80019a0:	4629      	mov	r1, r5
 80019a2:	463a      	mov	r2, r7
 80019a4:	f00b fe2c 	bl	800d600 <__aeabi_memcpy>
 80019a8:	2000      	movs	r0, #0
 80019aa:	4625      	mov	r5, r4
        self.key_buffer[..s.len()].copy_from_slice(s);
        self.key_buffer[s.len()] = 0;
 80019ac:	55e0      	strb	r0, [r4, r7]
                StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 80019ae:	7830      	ldrb	r0, [r6, #0]
 80019b0:	2801      	cmp	r0, #1
 80019b2:	d101      	bne.n	80019b8 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x48>
                StrnRep::CStr(cstr)  => { cstr }
 80019b4:	6872      	ldr	r2, [r6, #4]
 80019b6:	e014      	b.n	80019e2 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x72>
                StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 80019b8:	e9d6 2601 	ldrd	r2, r6, [r6, #4]
 80019bc:	2e01      	cmp	r6, #1
 80019be:	d304      	bcc.n	80019ca <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x5a>
 80019c0:	1e70      	subs	r0, r6, #1
 80019c2:	42b0      	cmp	r0, r6
 80019c4:	d201      	bcs.n	80019ca <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x5a>
 80019c6:	5c10      	ldrb	r0, [r2, r0]
    /// Given a value `s`, return a `*char` pointer that is null-terminated. Used for encoding COAP values.
    /// If `s` is null-terminated, return it as a pointer. Else copy `s` to the static buffer,
    /// append null and return the buffer as a pointer.
    pub fn value_to_cstr(&mut self, s: &[u8]) -> *const u8 {
        //  If null-terminated, return as pointer.
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 80019c8:	b158      	cbz	r0, 80019e2 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x72>
        //  Else copy into static value buffer and return pointer to buffer.
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 80019ca:	2e20      	cmp	r6, #32
 80019cc:	d217      	bcs.n	80019fe <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x8e>
 80019ce:	f104 0720 	add.w	r7, r4, #32
 80019d2:	4611      	mov	r1, r2
 80019d4:	4632      	mov	r2, r6
 80019d6:	4638      	mov	r0, r7
 80019d8:	f00b fe12 	bl	800d600 <__aeabi_memcpy>
 80019dc:	2000      	movs	r0, #0
 80019de:	463a      	mov	r2, r7
        self.value_buffer[..s.len()].copy_from_slice(s);
        self.value_buffer[s.len()] = 0;
 80019e0:	55b8      	strb	r0, [r7, r6]
            crate::libs::mynewt_rust::json_helper_set_text_string(
 80019e2:	4620      	mov	r0, r4
 80019e4:	4629      	mov	r1, r5
 80019e6:	b001      	add	sp, #4
 80019e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80019ec:	f006 be36 	b.w	800865c <json_helper_set_text_string>
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 80019f0:	f64d 10e4 	movw	r0, #55780	; 0xd9e4
 80019f4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019f8:	f000 fb44 	bl	8002084 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 80019fc:	defe      	udf	#254	; 0xfe
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 80019fe:	f64d 2008 	movw	r0, #55816	; 0xda08
 8001a02:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a06:	f000 fb3d 	bl	8002084 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8001a0a:	defe      	udf	#254	; 0xfe

08001a0c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>:
    pub fn key_to_cstr(&mut self, s: &[u8]) -> *const u8 {                
 8001a0c:	b5b0      	push	{r4, r5, r7, lr}
 8001a0e:	4604      	mov	r4, r0
 8001a10:	1e50      	subs	r0, r2, #1
 8001a12:	4615      	mov	r5, r2
 8001a14:	d303      	bcc.n	8001a1e <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE+0x12>
 8001a16:	42a8      	cmp	r0, r5
 8001a18:	d201      	bcs.n	8001a1e <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE+0x12>
 8001a1a:	5c08      	ldrb	r0, [r1, r0]
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 8001a1c:	b140      	cbz	r0, 8001a30 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE+0x24>
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 8001a1e:	2d20      	cmp	r5, #32
 8001a20:	d208      	bcs.n	8001a34 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE+0x28>
 8001a22:	4620      	mov	r0, r4
 8001a24:	462a      	mov	r2, r5
 8001a26:	f00b fdeb 	bl	800d600 <__aeabi_memcpy>
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	4621      	mov	r1, r4
        self.key_buffer[s.len()] = 0;
 8001a2e:	5560      	strb	r0, [r4, r5]
    }
 8001a30:	4608      	mov	r0, r1
 8001a32:	bdb0      	pop	{r4, r5, r7, pc}
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 8001a34:	f64d 10e4 	movw	r0, #55780	; 0xd9e4
 8001a38:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a3c:	f000 fb22 	bl	8002084 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8001a40:	defe      	udf	#254	; 0xfe

08001a42 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E>:
    pub fn value_to_cstr(&mut self, s: &[u8]) -> *const u8 {
 8001a42:	b5b0      	push	{r4, r5, r7, lr}
 8001a44:	4614      	mov	r4, r2
 8001a46:	3a01      	subs	r2, #1
 8001a48:	d303      	bcc.n	8001a52 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E+0x10>
 8001a4a:	42a2      	cmp	r2, r4
 8001a4c:	d201      	bcs.n	8001a52 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E+0x10>
 8001a4e:	5c8a      	ldrb	r2, [r1, r2]
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 8001a50:	b152      	cbz	r2, 8001a68 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E+0x26>
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 8001a52:	2c20      	cmp	r4, #32
 8001a54:	d20a      	bcs.n	8001a6c <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E+0x2a>
 8001a56:	f100 0520 	add.w	r5, r0, #32
 8001a5a:	4622      	mov	r2, r4
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	f00b fdcf 	bl	800d600 <__aeabi_memcpy>
 8001a62:	2000      	movs	r0, #0
 8001a64:	4629      	mov	r1, r5
        self.value_buffer[s.len()] = 0;
 8001a66:	5528      	strb	r0, [r5, r4]
        self.value_buffer.as_ptr() as *const u8
    }
 8001a68:	4608      	mov	r0, r1
 8001a6a:	bdb0      	pop	{r4, r5, r7, pc}
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 8001a6c:	f64d 2008 	movw	r0, #55816	; 0xda08
 8001a70:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a74:	f000 fb06 	bl	8002084 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8001a78:	defe      	udf	#254	; 0xfe

08001a7a <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h594cb8d9aced4d5eE>:

    /// Cast itself as a `*mut c_void`
    pub fn to_void_ptr(&mut self) -> *mut c_void {
        let ptr: *mut CoapContext = self;
        ptr as *mut c_void
    }
 8001a7a:	4770      	bx	lr

08001a7c <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h1ffd6ed576a88ca6E>:
/// Convert the type to array of bytes that may or may not end with null
impl ToBytesOptionalNull for str {
    /// Convert the type to array of bytes that may or may not end with null
    fn to_bytes_optional_nul(&self) -> &[u8] {
        self.as_bytes()
    }
 8001a7c:	4770      	bx	lr

08001a7e <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h7bf5d80ec9025fc4E>:
/// Convert the type to array of bytes that may or may not end with null. Strn always ends with null.
impl ToBytesOptionalNull for crate::Strn {
    /// Convert the type to array of bytes that may or may not end with null. Strn always ends with null.
    fn to_bytes_optional_nul(&self) -> &[u8] {
        match self.rep {
            StrnRep::ByteStr(bs) => { bs }
 8001a7e:	7801      	ldrb	r1, [r0, #0]
 8001a80:	2901      	cmp	r1, #1
 8001a82:	bf1e      	ittt	ne
 8001a84:	e9d0 2101 	ldrdne	r2, r1, [r0, #4]
            StrnRep::CStr(_cstr)  => { assert!(false, "strn bytes"); &[] }
            //  TODO: unsafe { ::core::mem::transmute::<*const u8, &[u8]>(cstr) }
        }
    }
 8001a88:	4610      	movne	r0, r2
 8001a8a:	4770      	bxne	lr
            StrnRep::CStr(_cstr)  => { assert!(false, "strn bytes"); &[] }
 8001a8c:	f64d 202c 	movw	r0, #55852	; 0xda2c
 8001a90:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a94:	f000 faf6 	bl	8002084 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8001a98:	defe      	udf	#254	; 0xfe

08001a9a <_ZN6mynewt7sysinit17h162e190ad004d957E>:
pub fn sysinit() {
 8001a9a:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
 8001a9c:	f006 fe02 	bl	80086a4 <rust_sysinit>
 8001aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001aa4:	f002 b972 	b.w	8003d8c <console_flush>

08001aa8 <_ZN6mynewt4Strn3new17hf631d8ed365ce2adE>:
    pub fn new(bs: &'static [u8]) -> Strn {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b096      	sub	sp, #88	; 0x58
 8001aac:	f1b2 0e01 	subs.w	lr, r2, #1
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	bf28      	it	cs
 8001ab6:	eb01 030e 	addcs.w	r3, r1, lr
 8001aba:	4596      	cmp	lr, r2
 8001abc:	f04f 0c00 	mov.w	ip, #0
 8001ac0:	bf28      	it	cs
 8001ac2:	4663      	movcs	r3, ip
 8001ac4:	2b00      	cmp	r3, #0
        assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	d009      	beq.n	8001ade <_ZN6mynewt4Strn3new17hf631d8ed365ce2adE+0x36>
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
        Strn { 
 8001ace:	bf01      	itttt	eq
 8001ad0:	e9c0 1201 	strdeq	r1, r2, [r0, #4]
 8001ad4:	2100      	moveq	r1, #0
 8001ad6:	7001      	strbeq	r1, [r0, #0]
    }
 8001ad8:	b016      	addeq	sp, #88	; 0x58
 8001ada:	bf08      	it	eq
 8001adc:	bd80      	popeq	{r7, pc}
 8001ade:	a801      	add	r0, sp, #4
        assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001ae0:	900e      	str	r0, [sp, #56]	; 0x38
 8001ae2:	f64d 10b0 	movw	r0, #55728	; 0xd9b0
 8001ae6:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001aea:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001aee:	a90f      	add	r1, sp, #60	; 0x3c
 8001af0:	900f      	str	r0, [sp, #60]	; 0x3c
 8001af2:	f64d 1038 	movw	r0, #55608	; 0xd938
 8001af6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001afa:	9014      	str	r0, [sp, #80]	; 0x50
 8001afc:	2001      	movs	r0, #1
 8001afe:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8001b02:	9011      	str	r0, [sp, #68]	; 0x44
 8001b04:	f64d 204c 	movw	r0, #55884	; 0xda4c
 8001b08:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b0c:	9010      	str	r0, [sp, #64]	; 0x40
 8001b0e:	f642 204f 	movw	r0, #10831	; 0x2a4f
 8001b12:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b16:	900d      	str	r0, [sp, #52]	; 0x34
 8001b18:	a810      	add	r0, sp, #64	; 0x40
 8001b1a:	900c      	str	r0, [sp, #48]	; 0x30
 8001b1c:	f241 70df 	movw	r0, #6111	; 0x17df
 8001b20:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b24:	900b      	str	r0, [sp, #44]	; 0x2c
 8001b26:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001b2a:	a80e      	add	r0, sp, #56	; 0x38
 8001b2c:	a908      	add	r1, sp, #32
 8001b2e:	9008      	str	r0, [sp, #32]
 8001b30:	2003      	movs	r0, #3
 8001b32:	9007      	str	r0, [sp, #28]
 8001b34:	e9cd c105 	strd	ip, r1, [sp, #20]
 8001b38:	f64d 216c 	movw	r1, #55916	; 0xda6c
 8001b3c:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001b40:	f64d 1020 	movw	r0, #55584	; 0xd920
 8001b44:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b48:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001b4c:	9002      	str	r0, [sp, #8]
 8001b4e:	a802      	add	r0, sp, #8
 8001b50:	f000 fad5 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001b54:	defe      	udf	#254	; 0xfe

08001b56 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E>:
            StrnRep::CStr(cstr)  => { cstr }
        }
    }

    /// Return the length of the string, excluding the terminating null. For safety, we limit to 128.
    pub fn len(&self) -> usize {
 8001b56:	b096      	sub	sp, #88	; 0x58
        match self.rep {
            StrnRep::ByteStr(bs) => { 
 8001b58:	7801      	ldrb	r1, [r0, #0]
 8001b5a:	2901      	cmp	r1, #1
 8001b5c:	d119      	bne.n	8001b92 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0x3c>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
                bs.len() - 1  //  Don't count the terminating null.
            }
            StrnRep::CStr(cstr)  => { 
 8001b5e:	6841      	ldr	r1, [r0, #4]
                //  Look for the null termination.
                if cstr.is_null() { return 0; }
 8001b60:	2900      	cmp	r1, #0
 8001b62:	d067      	beq.n	8001c34 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0xde>
 8001b64:	2200      	movs	r2, #0
 8001b66:	4610      	mov	r0, r2
                for len in 0..127 {
                    let ptr: *const u8 =  ((cstr as u32) + len) as *const u8;
                    if unsafe { *ptr } == 0 { return len as usize; }                    
 8001b68:	5c8a      	ldrb	r2, [r1, r2]
 8001b6a:	2a00      	cmp	r2, #0
 8001b6c:	d063      	beq.n	8001c36 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0xe0>
                    let ptr: *const u8 =  ((cstr as u32) + len) as *const u8;
 8001b6e:	180a      	adds	r2, r1, r0
                    if unsafe { *ptr } == 0 { return len as usize; }                    
 8001b70:	7853      	ldrb	r3, [r2, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d061      	beq.n	8001c3a <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0xe4>
 8001b76:	7893      	ldrb	r3, [r2, #2]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d062      	beq.n	8001c42 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0xec>
 8001b7c:	1cc3      	adds	r3, r0, #3
 8001b7e:	2b7e      	cmp	r3, #126	; 0x7e
 8001b80:	d863      	bhi.n	8001c4a <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0xf4>
 8001b82:	78d3      	ldrb	r3, [r2, #3]
 8001b84:	1d02      	adds	r2, r0, #4
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ed      	bne.n	8001b66 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0x10>
 8001b8a:	f040 0003 	orr.w	r0, r0, #3
                }
                assert!(false, "big strn");  //  String too long
                return 128 as usize;
            }
        }
    }
 8001b8e:	b016      	add	sp, #88	; 0x58
 8001b90:	4770      	bx	lr
            StrnRep::ByteStr(bs) => { 
 8001b92:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8001b96:	1e48      	subs	r0, r1, #1
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	f04f 0c00 	mov.w	ip, #0
 8001ba0:	bf28      	it	cs
 8001ba2:	181a      	addcs	r2, r3, r0
 8001ba4:	4288      	cmp	r0, r1
 8001ba6:	bf28      	it	cs
 8001ba8:	4662      	movcs	r2, ip
 8001baa:	2a00      	cmp	r2, #0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001bac:	9201      	str	r2, [sp, #4]
 8001bae:	d005      	beq.n	8001bbc <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0x66>
 8001bb0:	7810      	ldrb	r0, [r2, #0]
 8001bb2:	2800      	cmp	r0, #0
                bs.len() - 1  //  Don't count the terminating null.
 8001bb4:	bf02      	ittt	eq
 8001bb6:	1e48      	subeq	r0, r1, #1
    }
 8001bb8:	b016      	addeq	sp, #88	; 0x58
 8001bba:	4770      	bxeq	lr
 8001bbc:	a801      	add	r0, sp, #4
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001bbe:	900e      	str	r0, [sp, #56]	; 0x38
 8001bc0:	f64d 10b0 	movw	r0, #55728	; 0xd9b0
 8001bc4:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001bc8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bcc:	a90f      	add	r1, sp, #60	; 0x3c
 8001bce:	900f      	str	r0, [sp, #60]	; 0x3c
 8001bd0:	f64d 1038 	movw	r0, #55608	; 0xd938
 8001bd4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bd8:	9014      	str	r0, [sp, #80]	; 0x50
 8001bda:	2001      	movs	r0, #1
 8001bdc:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8001be0:	9011      	str	r0, [sp, #68]	; 0x44
 8001be2:	f64d 204c 	movw	r0, #55884	; 0xda4c
 8001be6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bea:	9010      	str	r0, [sp, #64]	; 0x40
 8001bec:	f642 204f 	movw	r0, #10831	; 0x2a4f
 8001bf0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bf4:	900d      	str	r0, [sp, #52]	; 0x34
 8001bf6:	a810      	add	r0, sp, #64	; 0x40
 8001bf8:	900c      	str	r0, [sp, #48]	; 0x30
 8001bfa:	f241 70df 	movw	r0, #6111	; 0x17df
 8001bfe:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c02:	900b      	str	r0, [sp, #44]	; 0x2c
 8001c04:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001c08:	a80e      	add	r0, sp, #56	; 0x38
 8001c0a:	a908      	add	r1, sp, #32
 8001c0c:	9008      	str	r0, [sp, #32]
 8001c0e:	2003      	movs	r0, #3
 8001c10:	9007      	str	r0, [sp, #28]
 8001c12:	e9cd c105 	strd	ip, r1, [sp, #20]
 8001c16:	f64d 2194 	movw	r1, #55956	; 0xda94
 8001c1a:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001c1e:	f64d 1020 	movw	r0, #55584	; 0xd920
 8001c22:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c26:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001c2a:	9002      	str	r0, [sp, #8]
 8001c2c:	a802      	add	r0, sp, #8
 8001c2e:	f000 fa66 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001c32:	defe      	udf	#254	; 0xfe
 8001c34:	2000      	movs	r0, #0
    }
 8001c36:	b016      	add	sp, #88	; 0x58
 8001c38:	4770      	bx	lr
 8001c3a:	f040 0001 	orr.w	r0, r0, #1
 8001c3e:	b016      	add	sp, #88	; 0x58
 8001c40:	4770      	bx	lr
 8001c42:	f040 0002 	orr.w	r0, r0, #2
 8001c46:	b016      	add	sp, #88	; 0x58
 8001c48:	4770      	bx	lr
                assert!(false, "big strn");  //  String too long
 8001c4a:	f64d 207c 	movw	r0, #55932	; 0xda7c
 8001c4e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c52:	f000 fa17 	bl	8002084 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8001c56:	defe      	udf	#254	; 0xfe

08001c58 <_ZN6mynewt6kernel2os10eventq_run17h00ed7b6e5ed865a7E>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	f004 fc4e 	bl	80064fa <os_eventq_run>
 8001c5e:	2001      	movs	r0, #1
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_ZN6mynewt6kernel2os15eventq_dflt_get17h0173394645c51d0dE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001c62:	b510      	push	{r4, lr}
 8001c64:	4604      	mov	r4, r0
 8001c66:	f004 fc75 	bl	8006554 <os_eventq_dflt_get>
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	e9c4 1000 	strd	r1, r0, [r4]
 8001c70:	bd10      	pop	{r4, pc}

08001c72 <_ZN6mynewt2hw6sensor8bindings4read17h61569d040c39b7f7E>:
    pub fn sensor_unregister_notifier(
        sensor: *mut sensor,
        notifier: *mut sensor_notifier,
    ) -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	9908      	ldr	r1, [sp, #32]
 8001c78:	9102      	str	r1, [sp, #8]
 8001c7a:	9907      	ldr	r1, [sp, #28]
 8001c7c:	9101      	str	r1, [sp, #4]
 8001c7e:	9906      	ldr	r1, [sp, #24]
 8001c80:	9100      	str	r1, [sp, #0]
 8001c82:	f003 ff27 	bl	8005ad4 <sensor_read>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	bf08      	it	eq
 8001c8a:	2001      	moveq	r0, #1
 8001c8c:	b004      	add	sp, #16
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h54ccd726782ab7b0E>:
    #[doc = ""]
    #[doc = " Return: A pointer to the sensor object matching that sensor type, or NULL if"]
    #[doc = "         none found."]
    pub fn sensor_mgr_find_next_bytype(type_: sensor_type_t, sensor: *mut sensor) -> *mut sensor;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001c90:	b510      	push	{r4, lr}
 8001c92:	b096      	sub	sp, #88	; 0x58
 8001c94:	4604      	mov	r4, r0
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
        match self.rep {
            StrnRep::ByteStr(bs) => {         
 8001c96:	780b      	ldrb	r3, [r1, #0]
 8001c98:	6848      	ldr	r0, [r1, #4]
 8001c9a:	4696      	mov	lr, r2
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d00e      	beq.n	8001cbe <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h54ccd726782ab7b0E+0x2e>
 8001ca0:	6889      	ldr	r1, [r1, #8]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f04f 0c00 	mov.w	ip, #0
 8001ca8:	1e4a      	subs	r2, r1, #1
 8001caa:	bf28      	it	cs
 8001cac:	1883      	addcs	r3, r0, r2
 8001cae:	428a      	cmp	r2, r1
 8001cb0:	bf28      	it	cs
 8001cb2:	4663      	movcs	r3, ip
 8001cb4:	2b00      	cmp	r3, #0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	d009      	beq.n	8001cce <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h54ccd726782ab7b0E+0x3e>
 8001cba:	7819      	ldrb	r1, [r3, #0]
 8001cbc:	b939      	cbnz	r1, 8001cce <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h54ccd726782ab7b0E+0x3e>
 8001cbe:	4671      	mov	r1, lr
 8001cc0:	f003 fe3c 	bl	800593c <sensor_mgr_find_next_bydevname>
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	e9c4 1000 	strd	r1, r0, [r4]
 8001cca:	b016      	add	sp, #88	; 0x58
 8001ccc:	bd10      	pop	{r4, pc}
 8001cce:	a801      	add	r0, sp, #4
 8001cd0:	900e      	str	r0, [sp, #56]	; 0x38
 8001cd2:	f64d 10b0 	movw	r0, #55728	; 0xd9b0
 8001cd6:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001cda:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001cde:	a90f      	add	r1, sp, #60	; 0x3c
 8001ce0:	900f      	str	r0, [sp, #60]	; 0x3c
 8001ce2:	f64d 1038 	movw	r0, #55608	; 0xd938
 8001ce6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001cea:	9014      	str	r0, [sp, #80]	; 0x50
 8001cec:	2001      	movs	r0, #1
 8001cee:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8001cf2:	9011      	str	r0, [sp, #68]	; 0x44
 8001cf4:	f64d 204c 	movw	r0, #55884	; 0xda4c
 8001cf8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001cfc:	9010      	str	r0, [sp, #64]	; 0x40
 8001cfe:	f642 204f 	movw	r0, #10831	; 0x2a4f
 8001d02:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d06:	900d      	str	r0, [sp, #52]	; 0x34
 8001d08:	a810      	add	r0, sp, #64	; 0x40
 8001d0a:	900c      	str	r0, [sp, #48]	; 0x30
 8001d0c:	f241 70df 	movw	r0, #6111	; 0x17df
 8001d10:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d14:	900b      	str	r0, [sp, #44]	; 0x2c
 8001d16:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001d1a:	a80e      	add	r0, sp, #56	; 0x38
 8001d1c:	a908      	add	r1, sp, #32
 8001d1e:	9008      	str	r0, [sp, #32]
 8001d20:	2003      	movs	r0, #3
 8001d22:	9007      	str	r0, [sp, #28]
 8001d24:	e9cd c105 	strd	ip, r1, [sp, #20]
 8001d28:	f64d 21a4 	movw	r1, #55972	; 0xdaa4
 8001d2c:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001d30:	f64d 1020 	movw	r0, #55584	; 0xd920
 8001d34:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d38:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001d3c:	9002      	str	r0, [sp, #8]
 8001d3e:	a802      	add	r0, sp, #8
 8001d40:	f000 f9dd 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001d44:	defe      	udf	#254	; 0xfe

08001d46 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17ha6adf4a3b1bf31c9E>:
    #[doc = " - __`arg`__: type to check"]
    #[doc = ""]
    #[doc = " Return: 1 if matches, 0 if it doesn't match."]
    pub fn sensor_mgr_match_bytype(sensor: *mut sensor, arg1: *mut ::cty::c_void) -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b096      	sub	sp, #88	; 0x58
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6840      	ldr	r0, [r0, #4]
            StrnRep::ByteStr(bs) => {         
 8001d4e:	7813      	ldrb	r3, [r2, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d010      	beq.n	8001d76 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17ha6adf4a3b1bf31c9E+0x30>
 8001d54:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f04f 0c00 	mov.w	ip, #0
 8001d5e:	f1be 0201 	subs.w	r2, lr, #1
 8001d62:	bf28      	it	cs
 8001d64:	1883      	addcs	r3, r0, r2
 8001d66:	4572      	cmp	r2, lr
 8001d68:	bf28      	it	cs
 8001d6a:	4663      	movcs	r3, ip
 8001d6c:	2b00      	cmp	r3, #0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	d008      	beq.n	8001d84 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17ha6adf4a3b1bf31c9E+0x3e>
 8001d72:	781a      	ldrb	r2, [r3, #0]
 8001d74:	b932      	cbnz	r2, 8001d84 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17ha6adf4a3b1bf31c9E+0x3e>
 8001d76:	f003 fe45 	bl	8005a04 <sensor_set_poll_rate_ms>
 8001d7a:	2800      	cmp	r0, #0
 8001d7c:	bf08      	it	eq
 8001d7e:	2001      	moveq	r0, #1
 8001d80:	b016      	add	sp, #88	; 0x58
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	a801      	add	r0, sp, #4
 8001d86:	900e      	str	r0, [sp, #56]	; 0x38
 8001d88:	f64d 10b0 	movw	r0, #55728	; 0xd9b0
 8001d8c:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001d90:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d94:	a90f      	add	r1, sp, #60	; 0x3c
 8001d96:	900f      	str	r0, [sp, #60]	; 0x3c
 8001d98:	f64d 1038 	movw	r0, #55608	; 0xd938
 8001d9c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001da0:	9014      	str	r0, [sp, #80]	; 0x50
 8001da2:	2001      	movs	r0, #1
 8001da4:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8001da8:	9011      	str	r0, [sp, #68]	; 0x44
 8001daa:	f64d 204c 	movw	r0, #55884	; 0xda4c
 8001dae:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001db2:	9010      	str	r0, [sp, #64]	; 0x40
 8001db4:	f642 204f 	movw	r0, #10831	; 0x2a4f
 8001db8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001dbc:	900d      	str	r0, [sp, #52]	; 0x34
 8001dbe:	a810      	add	r0, sp, #64	; 0x40
 8001dc0:	900c      	str	r0, [sp, #48]	; 0x30
 8001dc2:	f241 70df 	movw	r0, #6111	; 0x17df
 8001dc6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001dca:	900b      	str	r0, [sp, #44]	; 0x2c
 8001dcc:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001dd0:	a80e      	add	r0, sp, #56	; 0x38
 8001dd2:	a908      	add	r1, sp, #32
 8001dd4:	9008      	str	r0, [sp, #32]
 8001dd6:	2003      	movs	r0, #3
 8001dd8:	9007      	str	r0, [sp, #28]
 8001dda:	e9cd c105 	strd	ip, r1, [sp, #20]
 8001dde:	f64d 21a4 	movw	r1, #55972	; 0xdaa4
 8001de2:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001de6:	f64d 1020 	movw	r0, #55584	; 0xd920
 8001dea:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001dee:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001df2:	9002      	str	r0, [sp, #8]
 8001df4:	a802      	add	r0, sp, #8
 8001df6:	f000 f982 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001dfa:	defe      	udf	#254	; 0xfe

08001dfc <_ZN6mynewt4libs14sensor_network22start_server_transport17hacf1950a2bf8e132E>:
impl Default for sensor_network_interface {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	f002 fb69 	bl	80044d4 <start_server_transport>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	bf08      	it	eq
 8001e06:	2001      	moveq	r0, #1
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <_ZN6mynewt4libs14sensor_network16init_server_post17h864e17c9ed4d984fE>:
    pub fn register_collector_transport() -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    pub fn sensor_network_register_transport(iface_type: u8) -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001e0a:	b510      	push	{r4, lr}
 8001e0c:	b096      	sub	sp, #88	; 0x58
 8001e0e:	4604      	mov	r4, r0
            StrnRep::ByteStr(bs) => {         
 8001e10:	780a      	ldrb	r2, [r1, #0]
 8001e12:	6848      	ldr	r0, [r1, #4]
 8001e14:	2a01      	cmp	r2, #1
 8001e16:	d00e      	beq.n	8001e36 <_ZN6mynewt4libs14sensor_network16init_server_post17h864e17c9ed4d984fE+0x2c>
 8001e18:	688b      	ldr	r3, [r1, #8]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f04f 0c00 	mov.w	ip, #0
 8001e20:	1e59      	subs	r1, r3, #1
 8001e22:	bf28      	it	cs
 8001e24:	1842      	addcs	r2, r0, r1
 8001e26:	4299      	cmp	r1, r3
 8001e28:	bf28      	it	cs
 8001e2a:	4662      	movcs	r2, ip
 8001e2c:	2a00      	cmp	r2, #0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001e2e:	9201      	str	r2, [sp, #4]
 8001e30:	d008      	beq.n	8001e44 <_ZN6mynewt4libs14sensor_network16init_server_post17h864e17c9ed4d984fE+0x3a>
 8001e32:	7811      	ldrb	r1, [r2, #0]
 8001e34:	b931      	cbnz	r1, 8001e44 <_ZN6mynewt4libs14sensor_network16init_server_post17h864e17c9ed4d984fE+0x3a>
 8001e36:	f002 fbc7 	bl	80045c8 <init_server_post>
 8001e3a:	7060      	strb	r0, [r4, #1]
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	7020      	strb	r0, [r4, #0]
 8001e40:	b016      	add	sp, #88	; 0x58
 8001e42:	bd10      	pop	{r4, pc}
 8001e44:	a801      	add	r0, sp, #4
 8001e46:	900e      	str	r0, [sp, #56]	; 0x38
 8001e48:	f64d 10b0 	movw	r0, #55728	; 0xd9b0
 8001e4c:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001e50:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001e54:	a90f      	add	r1, sp, #60	; 0x3c
 8001e56:	900f      	str	r0, [sp, #60]	; 0x3c
 8001e58:	f64d 1038 	movw	r0, #55608	; 0xd938
 8001e5c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001e60:	9014      	str	r0, [sp, #80]	; 0x50
 8001e62:	2001      	movs	r0, #1
 8001e64:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8001e68:	9011      	str	r0, [sp, #68]	; 0x44
 8001e6a:	f64d 204c 	movw	r0, #55884	; 0xda4c
 8001e6e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001e72:	9010      	str	r0, [sp, #64]	; 0x40
 8001e74:	f642 204f 	movw	r0, #10831	; 0x2a4f
 8001e78:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001e7c:	900d      	str	r0, [sp, #52]	; 0x34
 8001e7e:	a810      	add	r0, sp, #64	; 0x40
 8001e80:	900c      	str	r0, [sp, #48]	; 0x30
 8001e82:	f241 70df 	movw	r0, #6111	; 0x17df
 8001e86:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001e8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8001e8c:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001e90:	a80e      	add	r0, sp, #56	; 0x38
 8001e92:	a908      	add	r1, sp, #32
 8001e94:	9008      	str	r0, [sp, #32]
 8001e96:	2003      	movs	r0, #3
 8001e98:	9007      	str	r0, [sp, #28]
 8001e9a:	e9cd c105 	strd	ip, r1, [sp, #20]
 8001e9e:	f64d 21a4 	movw	r1, #55972	; 0xdaa4
 8001ea2:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001ea6:	f64d 1020 	movw	r0, #55584	; 0xd920
 8001eaa:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001eae:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001eb2:	9002      	str	r0, [sp, #8]
 8001eb4:	a802      	add	r0, sp, #8
 8001eb6:	f000 f922 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001eba:	defe      	udf	#254	; 0xfe

08001ebc <_ZN6mynewt4libs14sensor_network12prepare_post17hf47b658e9dd92751E>:
    pub fn init_collector_post() -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    pub fn sensor_network_init_post(iface_type: u8, uri: *const ::cty::c_char) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001ebc:	b510      	push	{r4, lr}
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	f002 fb87 	bl	80045d4 <sensor_network_prepare_post>
 8001ec6:	7060      	strb	r0, [r4, #1]
 8001ec8:	2000      	movs	r0, #0
 8001eca:	7020      	strb	r0, [r4, #0]
 8001ecc:	bd10      	pop	{r4, pc}

08001ece <_ZN6mynewt4libs14sensor_network14do_server_post17hc5b5f69d66a9019aE>:
    pub fn sensor_network_prepare_post(encoding: ::cty::c_int) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001ece:	b510      	push	{r4, lr}
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	f002 fbc4 	bl	800465e <do_server_post>
 8001ed6:	7060      	strb	r0, [r4, #1]
 8001ed8:	2000      	movs	r0, #0
 8001eda:	7020      	strb	r0, [r4, #0]
 8001edc:	bd10      	pop	{r4, pc}

08001ede <_ZN6mynewt4libs14sensor_network13get_device_id17h087866bad0e5b5f0E>:
    pub fn should_send_to_collector(
        val: *mut sensor_value,
        device_name: *const ::cty::c_char,
    ) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001ede:	b510      	push	{r4, lr}
 8001ee0:	4604      	mov	r4, r0
 8001ee2:	f002 fc29 	bl	8004738 <get_device_id>
 8001ee6:	60a0      	str	r0, [r4, #8]
 8001ee8:	2001      	movs	r0, #1
 8001eea:	7120      	strb	r0, [r4, #4]
 8001eec:	2000      	movs	r0, #0
 8001eee:	6020      	str	r0, [r4, #0]
 8001ef0:	bd10      	pop	{r4, pc}
	...

08001ef4 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE>:
    #[derive(Debug, PartialEq)]
 8001ef4:	b510      	push	{r4, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	6802      	ldr	r2, [r0, #0]
 8001efa:	f102 000f 	add.w	r0, r2, #15
 8001efe:	280e      	cmp	r0, #14
 8001f00:	d80f      	bhi.n	8001f22 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x2e>
 8001f02:	e8df f000 	tbb	[pc, r0]
 8001f06:	1908      	.short	0x1908
 8001f08:	352f2721 	.word	0x352f2721
 8001f0c:	4f49413b 	.word	0x4f49413b
 8001f10:	69615b55 	.word	0x69615b55
 8001f14:	006f      	.short	0x006f
 8001f16:	f64d 22c0 	movw	r2, #56000	; 0xdac0
 8001f1a:	ac01      	add	r4, sp, #4
 8001f1c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f20:	e037      	b.n	8001f92 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x9e>
 8001f22:	2001      	movs	r0, #1
 8001f24:	ac01      	add	r4, sp, #4
 8001f26:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8001f2a:	4282      	cmp	r2, r0
 8001f2c:	d162      	bne.n	8001ff4 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x100>
 8001f2e:	f64d 22b4 	movw	r2, #55988	; 0xdab4
 8001f32:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f36:	e04c      	b.n	8001fd2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xde>
 8001f38:	ac01      	add	r4, sp, #4
 8001f3a:	f64d 22c9 	movw	r2, #56009	; 0xdac9
 8001f3e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f42:	230d      	movs	r3, #13
 8001f44:	4620      	mov	r0, r4
 8001f46:	e05b      	b.n	8002000 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x10c>
 8001f48:	f64d 22d6 	movw	r2, #56022	; 0xdad6
 8001f4c:	ac01      	add	r4, sp, #4
 8001f4e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f52:	e03e      	b.n	8001fd2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xde>
 8001f54:	ac01      	add	r4, sp, #4
 8001f56:	f64d 22e2 	movw	r2, #56034	; 0xdae2
 8001f5a:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f5e:	230b      	movs	r3, #11
 8001f60:	4620      	mov	r0, r4
 8001f62:	e04d      	b.n	8002000 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x10c>
 8001f64:	f64d 22ed 	movw	r2, #56045	; 0xdaed
 8001f68:	ac01      	add	r4, sp, #4
 8001f6a:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f6e:	e030      	b.n	8001fd2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xde>
 8001f70:	f64d 22f9 	movw	r2, #56057	; 0xdaf9
 8001f74:	ac01      	add	r4, sp, #4
 8001f76:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f7a:	e038      	b.n	8001fee <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xfa>
 8001f7c:	f64d 3203 	movw	r2, #56067	; 0xdb03
 8001f80:	ac01      	add	r4, sp, #4
 8001f82:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f86:	e032      	b.n	8001fee <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xfa>
 8001f88:	f64d 320d 	movw	r2, #56077	; 0xdb0d
 8001f8c:	ac01      	add	r4, sp, #4
 8001f8e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001f92:	4620      	mov	r0, r4
 8001f94:	2309      	movs	r3, #9
 8001f96:	e033      	b.n	8002000 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x10c>
 8001f98:	f64d 3216 	movw	r2, #56086	; 0xdb16
 8001f9c:	ac01      	add	r4, sp, #4
 8001f9e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001fa2:	e024      	b.n	8001fee <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xfa>
 8001fa4:	f64d 3220 	movw	r2, #56096	; 0xdb20
 8001fa8:	ac01      	add	r4, sp, #4
 8001faa:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001fae:	e01e      	b.n	8001fee <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xfa>
 8001fb0:	f64d 322a 	movw	r2, #56106	; 0xdb2a
 8001fb4:	ac01      	add	r4, sp, #4
 8001fb6:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001fba:	e01f      	b.n	8001ffc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x108>
 8001fbc:	f64d 3231 	movw	r2, #56113	; 0xdb31
 8001fc0:	ac01      	add	r4, sp, #4
 8001fc2:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001fc6:	e012      	b.n	8001fee <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xfa>
 8001fc8:	f64d 323b 	movw	r2, #56123	; 0xdb3b
 8001fcc:	ac01      	add	r4, sp, #4
 8001fce:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	230c      	movs	r3, #12
 8001fd6:	e013      	b.n	8002000 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x10c>
 8001fd8:	f64d 3247 	movw	r2, #56135	; 0xdb47
 8001fdc:	ac01      	add	r4, sp, #4
 8001fde:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001fe2:	e004      	b.n	8001fee <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xfa>
 8001fe4:	f64d 3251 	movw	r2, #56145	; 0xdb51
 8001fe8:	ac01      	add	r4, sp, #4
 8001fea:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001fee:	4620      	mov	r0, r4
 8001ff0:	230a      	movs	r3, #10
 8001ff2:	e005      	b.n	8002000 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x10c>
 8001ff4:	f64d 325b 	movw	r2, #56155	; 0xdb5b
 8001ff8:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	2307      	movs	r3, #7
 8002000:	f001 f8ed 	bl	80031de <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 8002004:	4620      	mov	r0, r4
 8002006:	f000 fc7b 	bl	8002900 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 800200a:	b004      	add	sp, #16
 800200c:	bd10      	pop	{r4, pc}

0800200e <_ZN4core3ptr18real_drop_in_place17h012e98b5b5cd1768E>:
 800200e:	4770      	bx	lr

08002010 <_ZN4core3ptr18real_drop_in_place17h02a68ac691a00745E>:
 8002010:	4770      	bx	lr

08002012 <_ZN4core3ptr18real_drop_in_place17h605f2bc604187c4eE>:
 8002012:	4770      	bx	lr

08002014 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbc81ca56d6e023e9E>:
 8002014:	b5b0      	push	{r4, r5, r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	460c      	mov	r4, r1
 800201a:	4605      	mov	r5, r0
 800201c:	f001 faf3 	bl	8003606 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E>
 8002020:	b9a8      	cbnz	r0, 800204e <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbc81ca56d6e023e9E+0x3a>
 8002022:	f64d 3364 	movw	r3, #56164	; 0xdb64
 8002026:	2200      	movs	r2, #0
 8002028:	f6c0 0300 	movt	r3, #2048	; 0x800
 800202c:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002030:	9205      	str	r2, [sp, #20]
 8002032:	9304      	str	r3, [sp, #16]
 8002034:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8002038:	2201      	movs	r2, #1
 800203a:	9201      	str	r2, [sp, #4]
 800203c:	f64d 32cc 	movw	r2, #56268	; 0xdbcc
 8002040:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002044:	9200      	str	r2, [sp, #0]
 8002046:	466a      	mov	r2, sp
 8002048:	f000 fd12 	bl	8002a70 <_ZN4core3fmt5write17hfeb861b024853061E>
 800204c:	b110      	cbz	r0, 8002054 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbc81ca56d6e023e9E+0x40>
 800204e:	2001      	movs	r0, #1
 8002050:	b006      	add	sp, #24
 8002052:	bdb0      	pop	{r4, r5, r7, pc}
 8002054:	1d28      	adds	r0, r5, #4
 8002056:	4621      	mov	r1, r4
 8002058:	b006      	add	sp, #24
 800205a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800205e:	f001 bad2 	b.w	8003606 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E>

08002062 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h60b349e3a3967a18E>:
 8002062:	f642 205e 	movw	r0, #10846	; 0x2a5e
 8002066:	f24b 21fd 	movw	r1, #45821	; 0xb2fd
 800206a:	f6c5 401d 	movt	r0, #23581	; 0x5c1d
 800206e:	f2c1 6181 	movt	r1, #5761	; 0x1681
 8002072:	4770      	bx	lr

08002074 <_ZN4core5panic9PanicInfo8location17h122f9d519f4a246bE>:
 8002074:	300c      	adds	r0, #12
 8002076:	4770      	bx	lr

08002078 <_ZN4core5panic8Location4file17ha9ce911e26883425E>:
 8002078:	e9d0 2100 	ldrd	r2, r1, [r0]
 800207c:	4610      	mov	r0, r2
 800207e:	4770      	bx	lr

08002080 <_ZN4core5panic8Location4line17h997c0352f671f211E>:
 8002080:	6880      	ldr	r0, [r0, #8]
 8002082:	4770      	bx	lr

08002084 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>:
 8002084:	b08c      	sub	sp, #48	; 0x30
 8002086:	e890 5006 	ldmia.w	r0, {r1, r2, ip, lr}
 800208a:	e9d0 3004 	ldrd	r3, r0, [r0, #16]
 800208e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8002092:	f64d 3264 	movw	r2, #56164	; 0xdb64
 8002096:	2100      	movs	r1, #0
 8002098:	f6c0 0200 	movt	r2, #2048	; 0x800
 800209c:	9105      	str	r1, [sp, #20]
 800209e:	9204      	str	r2, [sp, #16]
 80020a0:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80020a4:	2101      	movs	r1, #1
 80020a6:	9101      	str	r1, [sp, #4]
 80020a8:	a906      	add	r1, sp, #24
 80020aa:	9100      	str	r1, [sp, #0]
 80020ac:	a908      	add	r1, sp, #32
 80020ae:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80020b2:	4668      	mov	r0, sp
 80020b4:	e9cd ce08 	strd	ip, lr, [sp, #32]
 80020b8:	f000 f821 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 80020bc:	defe      	udf	#254	; 0xfe

080020be <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>:
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	4603      	mov	r3, r0
 80020c2:	f643 30d3 	movw	r0, #15315	; 0x3bd3
 80020c6:	e9cd 1200 	strd	r1, r2, [sp]
 80020ca:	f6c0 0000 	movt	r0, #2048	; 0x800
 80020ce:	4669      	mov	r1, sp
 80020d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80020d2:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 80020d6:	a801      	add	r0, sp, #4
 80020d8:	9008      	str	r0, [sp, #32]
 80020da:	2002      	movs	r0, #2
 80020dc:	a908      	add	r1, sp, #32
 80020de:	9007      	str	r0, [sp, #28]
 80020e0:	9106      	str	r1, [sp, #24]
 80020e2:	2100      	movs	r1, #0
 80020e4:	9105      	str	r1, [sp, #20]
 80020e6:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80020ea:	f64d 404c 	movw	r0, #56396	; 0xdc4c
 80020ee:	f6c0 0000 	movt	r0, #2048	; 0x800
 80020f2:	4619      	mov	r1, r3
 80020f4:	9002      	str	r0, [sp, #8]
 80020f6:	a802      	add	r0, sp, #8
 80020f8:	f000 f801 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 80020fc:	defe      	udf	#254	; 0xfe

080020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>:
 80020fe:	b088      	sub	sp, #32
 8002100:	e9d1 c300 	ldrd	ip, r3, [r1]
 8002104:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 8002108:	9107      	str	r1, [sp, #28]
 800210a:	e9cd 3205 	strd	r3, r2, [sp, #20]
 800210e:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8002112:	f64d 4028 	movw	r0, #56360	; 0xdc28
 8002116:	f6c0 0000 	movt	r0, #2048	; 0x800
 800211a:	9002      	str	r0, [sp, #8]
 800211c:	f64d 3064 	movw	r0, #56164	; 0xdb64
 8002120:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002124:	9001      	str	r0, [sp, #4]
 8002126:	a801      	add	r0, sp, #4
 8002128:	f7ff fb1b 	bl	8001762 <rust_begin_unwind>
 800212c:	defe      	udf	#254	; 0xfe

0800212e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E>:
 800212e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002132:	b081      	sub	sp, #4
 8002134:	f011 0303 	ands.w	r3, r1, #3
 8002138:	4684      	mov	ip, r0
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	bf18      	it	ne
 8002140:	f1d3 0e04 	rsbsne	lr, r3, #4
 8002144:	d150      	bne.n	80021e8 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xba>
 8002146:	fa5f f38c 	uxtb.w	r3, ip
 800214a:	2a08      	cmp	r2, #8
 800214c:	d31d      	bcc.n	800218a <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x5c>
 800214e:	f1a2 0c08 	sub.w	ip, r2, #8
 8002152:	4560      	cmp	r0, ip
 8002154:	d819      	bhi.n	800218a <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x5c>
 8002156:	f04f 3701 	mov.w	r7, #16843009	; 0x1010101
 800215a:	fb03 f507 	mul.w	r5, r3, r7
 800215e:	580f      	ldr	r7, [r1, r0]
 8002160:	406f      	eors	r7, r5
 8002162:	f1a7 3401 	sub.w	r4, r7, #16843009	; 0x1010101
 8002166:	ea24 0707 	bic.w	r7, r4, r7
 800216a:	180c      	adds	r4, r1, r0
 800216c:	6864      	ldr	r4, [r4, #4]
 800216e:	406c      	eors	r4, r5
 8002170:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
 8002174:	43a6      	bics	r6, r4
 8002176:	4337      	orrs	r7, r6
 8002178:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 800217c:	d102      	bne.n	8002184 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x56>
 800217e:	3008      	adds	r0, #8
 8002180:	4560      	cmp	r0, ip
 8002182:	d9ec      	bls.n	800215e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x30>
 8002184:	4290      	cmp	r0, r2
 8002186:	f200 80c2 	bhi.w	800230e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1e0>
 800218a:	180c      	adds	r4, r1, r0
 800218c:	eb01 0e02 	add.w	lr, r1, r2
 8002190:	eba2 0c00 	sub.w	ip, r2, r0
 8002194:	2100      	movs	r1, #0
 8002196:	4626      	mov	r6, r4
 8002198:	2200      	movs	r2, #0
 800219a:	ebae 0606 	sub.w	r6, lr, r6
 800219e:	1865      	adds	r5, r4, r1
 80021a0:	2e03      	cmp	r6, #3
 80021a2:	f240 8081 	bls.w	80022a8 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x17a>
 80021a6:	782e      	ldrb	r6, [r5, #0]
 80021a8:	1af7      	subs	r7, r6, r3
 80021aa:	bf18      	it	ne
 80021ac:	2701      	movne	r7, #1
 80021ae:	443a      	add	r2, r7
 80021b0:	429e      	cmp	r6, r3
 80021b2:	d016      	beq.n	80021e2 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 80021b4:	786e      	ldrb	r6, [r5, #1]
 80021b6:	1af7      	subs	r7, r6, r3
 80021b8:	bf18      	it	ne
 80021ba:	2701      	movne	r7, #1
 80021bc:	443a      	add	r2, r7
 80021be:	429e      	cmp	r6, r3
 80021c0:	d00f      	beq.n	80021e2 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 80021c2:	78ae      	ldrb	r6, [r5, #2]
 80021c4:	1af7      	subs	r7, r6, r3
 80021c6:	bf18      	it	ne
 80021c8:	2701      	movne	r7, #1
 80021ca:	443a      	add	r2, r7
 80021cc:	429e      	cmp	r6, r3
 80021ce:	d008      	beq.n	80021e2 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 80021d0:	78ef      	ldrb	r7, [r5, #3]
 80021d2:	3104      	adds	r1, #4
 80021d4:	1afe      	subs	r6, r7, r3
 80021d6:	bf18      	it	ne
 80021d8:	2601      	movne	r6, #1
 80021da:	4432      	add	r2, r6
 80021dc:	1d2e      	adds	r6, r5, #4
 80021de:	429f      	cmp	r7, r3
 80021e0:	d1db      	bne.n	800219a <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x6c>
 80021e2:	2101      	movs	r1, #1
 80021e4:	1813      	adds	r3, r2, r0
 80021e6:	e02c      	b.n	8002242 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x114>
 80021e8:	4596      	cmp	lr, r2
 80021ea:	bf88      	it	hi
 80021ec:	4696      	movhi	lr, r2
 80021ee:	eb01 080e 	add.w	r8, r1, lr
 80021f2:	2300      	movs	r3, #0
 80021f4:	4674      	mov	r4, lr
 80021f6:	460d      	mov	r5, r1
 80021f8:	eba8 0605 	sub.w	r6, r8, r5
 80021fc:	2e03      	cmp	r6, #3
 80021fe:	d925      	bls.n	800224c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x11e>
 8002200:	782f      	ldrb	r7, [r5, #0]
 8002202:	fa5f f68c 	uxtb.w	r6, ip
 8002206:	1bb8      	subs	r0, r7, r6
 8002208:	bf18      	it	ne
 800220a:	2001      	movne	r0, #1
 800220c:	4403      	add	r3, r0
 800220e:	42b7      	cmp	r7, r6
 8002210:	d016      	beq.n	8002240 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 8002212:	7868      	ldrb	r0, [r5, #1]
 8002214:	1b87      	subs	r7, r0, r6
 8002216:	bf18      	it	ne
 8002218:	2701      	movne	r7, #1
 800221a:	443b      	add	r3, r7
 800221c:	42b0      	cmp	r0, r6
 800221e:	d00f      	beq.n	8002240 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 8002220:	78a8      	ldrb	r0, [r5, #2]
 8002222:	1b87      	subs	r7, r0, r6
 8002224:	bf18      	it	ne
 8002226:	2701      	movne	r7, #1
 8002228:	443b      	add	r3, r7
 800222a:	42b0      	cmp	r0, r6
 800222c:	d008      	beq.n	8002240 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 800222e:	78e8      	ldrb	r0, [r5, #3]
 8002230:	3c04      	subs	r4, #4
 8002232:	3504      	adds	r5, #4
 8002234:	1b87      	subs	r7, r0, r6
 8002236:	bf18      	it	ne
 8002238:	2701      	movne	r7, #1
 800223a:	443b      	add	r3, r7
 800223c:	42b0      	cmp	r0, r6
 800223e:	d1db      	bne.n	80021f8 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xca>
 8002240:	2101      	movs	r1, #1
 8002242:	4608      	mov	r0, r1
 8002244:	4619      	mov	r1, r3
 8002246:	b001      	add	sp, #4
 8002248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800224c:	2c00      	cmp	r4, #0
 800224e:	d05c      	beq.n	800230a <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1dc>
 8002250:	462f      	mov	r7, r5
 8002252:	fa5f f68c 	uxtb.w	r6, ip
 8002256:	f817 9b01 	ldrb.w	r9, [r7], #1
 800225a:	ebb9 0006 	subs.w	r0, r9, r6
 800225e:	bf18      	it	ne
 8002260:	2001      	movne	r0, #1
 8002262:	4403      	add	r3, r0
 8002264:	45b1      	cmp	r9, r6
 8002266:	d0eb      	beq.n	8002240 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 8002268:	4547      	cmp	r7, r8
 800226a:	d04e      	beq.n	800230a <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1dc>
 800226c:	7868      	ldrb	r0, [r5, #1]
 800226e:	1b87      	subs	r7, r0, r6
 8002270:	bf18      	it	ne
 8002272:	2701      	movne	r7, #1
 8002274:	443b      	add	r3, r7
 8002276:	42b0      	cmp	r0, r6
 8002278:	d0e2      	beq.n	8002240 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 800227a:	1ca8      	adds	r0, r5, #2
 800227c:	4540      	cmp	r0, r8
 800227e:	d044      	beq.n	800230a <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1dc>
 8002280:	78a8      	ldrb	r0, [r5, #2]
 8002282:	1b87      	subs	r7, r0, r6
 8002284:	bf18      	it	ne
 8002286:	2701      	movne	r7, #1
 8002288:	443b      	add	r3, r7
 800228a:	42b0      	cmp	r0, r6
 800228c:	d0d8      	beq.n	8002240 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 800228e:	1ce8      	adds	r0, r5, #3
 8002290:	4540      	cmp	r0, r8
 8002292:	d03a      	beq.n	800230a <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1dc>
 8002294:	78e8      	ldrb	r0, [r5, #3]
 8002296:	3c04      	subs	r4, #4
 8002298:	3504      	adds	r5, #4
 800229a:	1b87      	subs	r7, r0, r6
 800229c:	bf18      	it	ne
 800229e:	2701      	movne	r7, #1
 80022a0:	443b      	add	r3, r7
 80022a2:	42b0      	cmp	r0, r6
 80022a4:	d1d2      	bne.n	800224c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x11e>
 80022a6:	e7cb      	b.n	8002240 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 80022a8:	ebac 0401 	sub.w	r4, ip, r1
 80022ac:	b35c      	cbz	r4, 8002306 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1d8>
 80022ae:	4629      	mov	r1, r5
 80022b0:	f811 7b01 	ldrb.w	r7, [r1], #1
 80022b4:	1afe      	subs	r6, r7, r3
 80022b6:	bf18      	it	ne
 80022b8:	2601      	movne	r6, #1
 80022ba:	4432      	add	r2, r6
 80022bc:	429f      	cmp	r7, r3
 80022be:	f43f af90 	beq.w	80021e2 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 80022c2:	4571      	cmp	r1, lr
 80022c4:	d01f      	beq.n	8002306 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1d8>
 80022c6:	7869      	ldrb	r1, [r5, #1]
 80022c8:	1acf      	subs	r7, r1, r3
 80022ca:	bf18      	it	ne
 80022cc:	2701      	movne	r7, #1
 80022ce:	443a      	add	r2, r7
 80022d0:	4299      	cmp	r1, r3
 80022d2:	f43f af86 	beq.w	80021e2 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 80022d6:	1ca9      	adds	r1, r5, #2
 80022d8:	4571      	cmp	r1, lr
 80022da:	d014      	beq.n	8002306 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1d8>
 80022dc:	78a9      	ldrb	r1, [r5, #2]
 80022de:	1acf      	subs	r7, r1, r3
 80022e0:	bf18      	it	ne
 80022e2:	2701      	movne	r7, #1
 80022e4:	443a      	add	r2, r7
 80022e6:	4299      	cmp	r1, r3
 80022e8:	f43f af7b 	beq.w	80021e2 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 80022ec:	1ce9      	adds	r1, r5, #3
 80022ee:	4571      	cmp	r1, lr
 80022f0:	d009      	beq.n	8002306 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1d8>
 80022f2:	78e9      	ldrb	r1, [r5, #3]
 80022f4:	3c04      	subs	r4, #4
 80022f6:	3504      	adds	r5, #4
 80022f8:	1acf      	subs	r7, r1, r3
 80022fa:	bf18      	it	ne
 80022fc:	2701      	movne	r7, #1
 80022fe:	443a      	add	r2, r7
 8002300:	4299      	cmp	r1, r3
 8002302:	d1d3      	bne.n	80022ac <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x17e>
 8002304:	e76d      	b.n	80021e2 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 8002306:	2100      	movs	r1, #0
 8002308:	e76c      	b.n	80021e4 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb6>
 800230a:	4670      	mov	r0, lr
 800230c:	e71b      	b.n	8002146 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x18>
 800230e:	4611      	mov	r1, r2
 8002310:	f000 f823 	bl	800235a <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8002314:	defe      	udf	#254	; 0xfe

08002316 <_ZN4core5slice20slice_index_len_fail17hfa6ff34b8fd07644E>:
 8002316:	b08c      	sub	sp, #48	; 0x30
 8002318:	e9cd 0100 	strd	r0, r1, [sp]
 800231c:	f643 30d3 	movw	r0, #15315	; 0x3bd3
 8002320:	a901      	add	r1, sp, #4
 8002322:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002326:	900b      	str	r0, [sp, #44]	; 0x2c
 8002328:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 800232c:	4668      	mov	r0, sp
 800232e:	9008      	str	r0, [sp, #32]
 8002330:	2002      	movs	r0, #2
 8002332:	a908      	add	r1, sp, #32
 8002334:	9007      	str	r0, [sp, #28]
 8002336:	9106      	str	r1, [sp, #24]
 8002338:	2100      	movs	r1, #0
 800233a:	9105      	str	r1, [sp, #20]
 800233c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8002340:	f64d 5078 	movw	r0, #56696	; 0xdd78
 8002344:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002348:	f64d 5188 	movw	r1, #56712	; 0xdd88
 800234c:	9002      	str	r0, [sp, #8]
 800234e:	a802      	add	r0, sp, #8
 8002350:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002354:	f7ff fed3 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8002358:	defe      	udf	#254	; 0xfe

0800235a <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>:
 800235a:	b08c      	sub	sp, #48	; 0x30
 800235c:	e9cd 0100 	strd	r0, r1, [sp]
 8002360:	f643 30d3 	movw	r0, #15315	; 0x3bd3
 8002364:	a901      	add	r1, sp, #4
 8002366:	f6c0 0000 	movt	r0, #2048	; 0x800
 800236a:	900b      	str	r0, [sp, #44]	; 0x2c
 800236c:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8002370:	4668      	mov	r0, sp
 8002372:	9008      	str	r0, [sp, #32]
 8002374:	2002      	movs	r0, #2
 8002376:	a908      	add	r1, sp, #32
 8002378:	9007      	str	r0, [sp, #28]
 800237a:	9106      	str	r1, [sp, #24]
 800237c:	2100      	movs	r1, #0
 800237e:	9105      	str	r1, [sp, #20]
 8002380:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8002384:	f64d 50bc 	movw	r0, #56764	; 0xddbc
 8002388:	f6c0 0000 	movt	r0, #2048	; 0x800
 800238c:	f64d 51cc 	movw	r1, #56780	; 0xddcc
 8002390:	9002      	str	r0, [sp, #8]
 8002392:	a802      	add	r0, sp, #8
 8002394:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002398:	f7ff feb1 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 800239c:	defe      	udf	#254	; 0xfe

0800239e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E>:
 800239e:	b09a      	sub	sp, #104	; 0x68
 80023a0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80023a4:	e9cd 2300 	strd	r2, r3, [sp]
 80023a8:	d802      	bhi.n	80023b0 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x12>
 80023aa:	2501      	movs	r5, #1
 80023ac:	468c      	mov	ip, r1
 80023ae:	e03e      	b.n	800242e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x90>
 80023b0:	f1c1 0e00 	rsb	lr, r1, #0
 80023b4:	f44f 7c80 	mov.w	ip, #256	; 0x100
 80023b8:	458c      	cmp	ip, r1
 80023ba:	d205      	bcs.n	80023c8 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x2a>
 80023bc:	f910 400c 	ldrsb.w	r4, [r0, ip]
 80023c0:	f114 0f41 	cmn.w	r4, #65	; 0x41
 80023c4:	f300 80ee 	bgt.w	80025a4 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x206>
 80023c8:	eb0e 040c 	add.w	r4, lr, ip
 80023cc:	f1ac 0601 	sub.w	r6, ip, #1
 80023d0:	2c01      	cmp	r4, #1
 80023d2:	d02a      	beq.n	800242a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 80023d4:	428e      	cmp	r6, r1
 80023d6:	d206      	bcs.n	80023e6 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x48>
 80023d8:	eb00 050c 	add.w	r5, r0, ip
 80023dc:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
 80023e0:	f115 0f41 	cmn.w	r5, #65	; 0x41
 80023e4:	dc21      	bgt.n	800242a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 80023e6:	f1ac 0602 	sub.w	r6, ip, #2
 80023ea:	2c02      	cmp	r4, #2
 80023ec:	d01d      	beq.n	800242a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 80023ee:	428e      	cmp	r6, r1
 80023f0:	d206      	bcs.n	8002400 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x62>
 80023f2:	eb00 050c 	add.w	r5, r0, ip
 80023f6:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
 80023fa:	f115 0f41 	cmn.w	r5, #65	; 0x41
 80023fe:	dc14      	bgt.n	800242a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 8002400:	f1ac 0603 	sub.w	r6, ip, #3
 8002404:	2c03      	cmp	r4, #3
 8002406:	d010      	beq.n	800242a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 8002408:	428e      	cmp	r6, r1
 800240a:	d206      	bcs.n	800241a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x7c>
 800240c:	eb00 050c 	add.w	r5, r0, ip
 8002410:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
 8002414:	f115 0f41 	cmn.w	r5, #65	; 0x41
 8002418:	dc07      	bgt.n	800242a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 800241a:	f1bc 0c04 	subs.w	ip, ip, #4
 800241e:	f04f 0500 	mov.w	r5, #0
 8002422:	d004      	beq.n	800242e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x90>
 8002424:	2c04      	cmp	r4, #4
 8002426:	d1c7      	bne.n	80023b8 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a>
 8002428:	e001      	b.n	800242e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x90>
 800242a:	2500      	movs	r5, #0
 800242c:	46b4      	mov	ip, r6
 800242e:	2605      	movs	r6, #5
 8002430:	2d00      	cmp	r5, #0
 8002432:	f64d 6592 	movw	r5, #56978	; 0xde92
 8002436:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 800243a:	bf18      	it	ne
 800243c:	2600      	movne	r6, #0
 800243e:	9605      	str	r6, [sp, #20]
 8002440:	f64d 3664 	movw	r6, #56164	; 0xdb64
 8002444:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002448:	f6c0 0600 	movt	r6, #2048	; 0x800
 800244c:	bf18      	it	ne
 800244e:	4635      	movne	r5, r6
 8002450:	428a      	cmp	r2, r1
 8002452:	9504      	str	r5, [sp, #16]
 8002454:	bf98      	it	ls
 8002456:	428b      	cmpls	r3, r1
 8002458:	d929      	bls.n	80024ae <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x110>
 800245a:	428a      	cmp	r2, r1
 800245c:	f643 501b 	movw	r0, #15643	; 0x3d1b
 8002460:	a904      	add	r1, sp, #16
 8002462:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002466:	bf88      	it	hi
 8002468:	4613      	movhi	r3, r2
 800246a:	9308      	str	r3, [sp, #32]
 800246c:	9015      	str	r0, [sp, #84]	; 0x54
 800246e:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
 8002472:	a802      	add	r0, sp, #8
 8002474:	9012      	str	r0, [sp, #72]	; 0x48
 8002476:	f643 30d3 	movw	r0, #15315	; 0x3bd3
 800247a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800247e:	a910      	add	r1, sp, #64	; 0x40
 8002480:	9011      	str	r0, [sp, #68]	; 0x44
 8002482:	a808      	add	r0, sp, #32
 8002484:	9010      	str	r0, [sp, #64]	; 0x40
 8002486:	2003      	movs	r0, #3
 8002488:	900f      	str	r0, [sp, #60]	; 0x3c
 800248a:	910e      	str	r1, [sp, #56]	; 0x38
 800248c:	2100      	movs	r1, #0
 800248e:	910d      	str	r1, [sp, #52]	; 0x34
 8002490:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8002494:	f64d 60b8 	movw	r0, #57016	; 0xdeb8
 8002498:	f6c0 0000 	movt	r0, #2048	; 0x800
 800249c:	f64d 61d0 	movw	r1, #57040	; 0xded0
 80024a0:	900a      	str	r0, [sp, #40]	; 0x28
 80024a2:	a80a      	add	r0, sp, #40	; 0x28
 80024a4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80024a8:	f7ff fe29 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 80024ac:	defe      	udf	#254	; 0xfe
 80024ae:	429a      	cmp	r2, r3
 80024b0:	f200 80db 	bhi.w	800266a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x2cc>
 80024b4:	2a00      	cmp	r2, #0
 80024b6:	bf18      	it	ne
 80024b8:	4291      	cmpne	r1, r2
 80024ba:	d156      	bne.n	800256a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1cc>
 80024bc:	461a      	mov	r2, r3
 80024be:	2a00      	cmp	r2, #0
 80024c0:	9206      	str	r2, [sp, #24]
 80024c2:	bf18      	it	ne
 80024c4:	428a      	cmpne	r2, r1
 80024c6:	d103      	bne.n	80024d0 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x132>
 80024c8:	4613      	mov	r3, r2
 80024ca:	428b      	cmp	r3, r1
 80024cc:	d03c      	beq.n	8002548 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1aa>
 80024ce:	e042      	b.n	8002556 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1b8>
 80024d0:	f1a0 0c01 	sub.w	ip, r0, #1
 80024d4:	f101 0e02 	add.w	lr, r1, #2
 80024d8:	1ccc      	adds	r4, r1, #3
 80024da:	1c4d      	adds	r5, r1, #1
 80024dc:	1d0e      	adds	r6, r1, #4
 80024de:	428a      	cmp	r2, r1
 80024e0:	d206      	bcs.n	80024f0 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x152>
 80024e2:	eb0c 0302 	add.w	r3, ip, r2
 80024e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80024ea:	f113 0f40 	cmn.w	r3, #64	; 0x40
 80024ee:	daeb      	bge.n	80024c8 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x12a>
 80024f0:	1e53      	subs	r3, r2, #1
 80024f2:	bf18      	it	ne
 80024f4:	4295      	cmpne	r5, r2
 80024f6:	d025      	beq.n	8002544 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 80024f8:	428b      	cmp	r3, r1
 80024fa:	d204      	bcs.n	8002506 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x168>
 80024fc:	f91c 7002 	ldrsb.w	r7, [ip, r2]
 8002500:	f117 0f41 	cmn.w	r7, #65	; 0x41
 8002504:	dc1e      	bgt.n	8002544 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 8002506:	1e93      	subs	r3, r2, #2
 8002508:	bf18      	it	ne
 800250a:	4596      	cmpne	lr, r2
 800250c:	d01a      	beq.n	8002544 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 800250e:	428b      	cmp	r3, r1
 8002510:	d206      	bcs.n	8002520 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x182>
 8002512:	eb0c 0702 	add.w	r7, ip, r2
 8002516:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
 800251a:	f117 0f41 	cmn.w	r7, #65	; 0x41
 800251e:	dc11      	bgt.n	8002544 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 8002520:	1ed3      	subs	r3, r2, #3
 8002522:	bf18      	it	ne
 8002524:	4294      	cmpne	r4, r2
 8002526:	d00d      	beq.n	8002544 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 8002528:	428b      	cmp	r3, r1
 800252a:	d206      	bcs.n	800253a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x19c>
 800252c:	eb0c 0702 	add.w	r7, ip, r2
 8002530:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
 8002534:	f117 0f41 	cmn.w	r7, #65	; 0x41
 8002538:	dc04      	bgt.n	8002544 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 800253a:	1f13      	subs	r3, r2, #4
 800253c:	d002      	beq.n	8002544 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 800253e:	4296      	cmp	r6, r2
 8002540:	461a      	mov	r2, r3
 8002542:	d1cc      	bne.n	80024de <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x140>
 8002544:	428b      	cmp	r3, r1
 8002546:	d106      	bne.n	8002556 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1b8>
 8002548:	f64d 5020 	movw	r0, #56608	; 0xdd20
 800254c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002550:	f7ff fd98 	bl	8002084 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8002554:	defe      	udf	#254	; 0xfe
 8002556:	18c4      	adds	r4, r0, r3
 8002558:	4625      	mov	r5, r4
 800255a:	f915 6b01 	ldrsb.w	r6, [r5], #1
 800255e:	2e00      	cmp	r6, #0
 8002560:	b2f2      	uxtb	r2, r6
 8002562:	db09      	blt.n	8002578 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1da>
 8002564:	9207      	str	r2, [sp, #28]
 8002566:	2101      	movs	r1, #1
 8002568:	e048      	b.n	80025fc <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x25e>
 800256a:	d9a8      	bls.n	80024be <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x120>
 800256c:	5686      	ldrsb	r6, [r0, r2]
 800256e:	f116 0f40 	cmn.w	r6, #64	; 0x40
 8002572:	bfa8      	it	ge
 8002574:	461a      	movge	r2, r3
 8002576:	e7a2      	b.n	80024be <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x120>
 8002578:	4408      	add	r0, r1
 800257a:	4285      	cmp	r5, r0
 800257c:	d102      	bne.n	8002584 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1e6>
 800257e:	2500      	movs	r5, #0
 8002580:	4606      	mov	r6, r0
 8002582:	e003      	b.n	800258c <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1ee>
 8002584:	7861      	ldrb	r1, [r4, #1]
 8002586:	1ca6      	adds	r6, r4, #2
 8002588:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 800258c:	f002 011f 	and.w	r1, r2, #31
 8002590:	2ae0      	cmp	r2, #224	; 0xe0
 8002592:	d304      	bcc.n	800259e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x200>
 8002594:	4286      	cmp	r6, r0
 8002596:	d107      	bne.n	80025a8 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x20a>
 8002598:	2400      	movs	r4, #0
 800259a:	4606      	mov	r6, r0
 800259c:	e008      	b.n	80025b0 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x212>
 800259e:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
 80025a2:	e01c      	b.n	80025de <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x240>
 80025a4:	2500      	movs	r5, #0
 80025a6:	e742      	b.n	800242e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x90>
 80025a8:	f816 4b01 	ldrb.w	r4, [r6], #1
 80025ac:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 80025b0:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
 80025b4:	2af0      	cmp	r2, #240	; 0xf0
 80025b6:	d310      	bcc.n	80025da <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x23c>
 80025b8:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80025bc:	ea02 4181 	and.w	r1, r2, r1, lsl #18
 80025c0:	4286      	cmp	r6, r0
 80025c2:	bf1a      	itte	ne
 80025c4:	7830      	ldrbne	r0, [r6, #0]
 80025c6:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
 80025ca:	2000      	moveq	r0, #0
 80025cc:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
 80025d0:	4408      	add	r0, r1
 80025d2:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 80025d6:	d0b7      	beq.n	8002548 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1aa>
 80025d8:	e001      	b.n	80025de <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x240>
 80025da:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
 80025de:	2880      	cmp	r0, #128	; 0x80
 80025e0:	9007      	str	r0, [sp, #28]
 80025e2:	d201      	bcs.n	80025e8 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x24a>
 80025e4:	2101      	movs	r1, #1
 80025e6:	e009      	b.n	80025fc <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x25e>
 80025e8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80025ec:	d201      	bcs.n	80025f2 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x254>
 80025ee:	2102      	movs	r1, #2
 80025f0:	e004      	b.n	80025fc <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x25e>
 80025f2:	2104      	movs	r1, #4
 80025f4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80025f8:	bf38      	it	cc
 80025fa:	2103      	movcc	r1, #3
 80025fc:	4419      	add	r1, r3
 80025fe:	9308      	str	r3, [sp, #32]
 8002600:	9109      	str	r1, [sp, #36]	; 0x24
 8002602:	f643 511b 	movw	r1, #15643	; 0x3d1b
 8002606:	aa04      	add	r2, sp, #16
 8002608:	f6c0 0100 	movt	r1, #2048	; 0x800
 800260c:	9119      	str	r1, [sp, #100]	; 0x64
 800260e:	a808      	add	r0, sp, #32
 8002610:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
 8002614:	a902      	add	r1, sp, #8
 8002616:	9116      	str	r1, [sp, #88]	; 0x58
 8002618:	f242 0115 	movw	r1, #8213	; 0x2015
 800261c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002620:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8002624:	f243 2011 	movw	r0, #12817	; 0x3211
 8002628:	f6c0 0000 	movt	r0, #2048	; 0x800
 800262c:	a910      	add	r1, sp, #64	; 0x40
 800262e:	9013      	str	r0, [sp, #76]	; 0x4c
 8002630:	a807      	add	r0, sp, #28
 8002632:	9012      	str	r0, [sp, #72]	; 0x48
 8002634:	f643 30d3 	movw	r0, #15315	; 0x3bd3
 8002638:	f6c0 0000 	movt	r0, #2048	; 0x800
 800263c:	9011      	str	r0, [sp, #68]	; 0x44
 800263e:	a806      	add	r0, sp, #24
 8002640:	9010      	str	r0, [sp, #64]	; 0x40
 8002642:	2005      	movs	r0, #5
 8002644:	900f      	str	r0, [sp, #60]	; 0x3c
 8002646:	910e      	str	r1, [sp, #56]	; 0x38
 8002648:	2100      	movs	r1, #0
 800264a:	910d      	str	r1, [sp, #52]	; 0x34
 800264c:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8002650:	f64d 704c 	movw	r0, #57164	; 0xdf4c
 8002654:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002658:	f64d 7174 	movw	r1, #57204	; 0xdf74
 800265c:	900a      	str	r0, [sp, #40]	; 0x28
 800265e:	a80a      	add	r0, sp, #40	; 0x28
 8002660:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002664:	f7ff fd4b 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8002668:	defe      	udf	#254	; 0xfe
 800266a:	f643 501b 	movw	r0, #15643	; 0x3d1b
 800266e:	a904      	add	r1, sp, #16
 8002670:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002674:	9017      	str	r0, [sp, #92]	; 0x5c
 8002676:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
 800267a:	a802      	add	r0, sp, #8
 800267c:	9014      	str	r0, [sp, #80]	; 0x50
 800267e:	f643 30d3 	movw	r0, #15315	; 0x3bd3
 8002682:	a901      	add	r1, sp, #4
 8002684:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002688:	9013      	str	r0, [sp, #76]	; 0x4c
 800268a:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800268e:	4668      	mov	r0, sp
 8002690:	9010      	str	r0, [sp, #64]	; 0x40
 8002692:	2004      	movs	r0, #4
 8002694:	a910      	add	r1, sp, #64	; 0x40
 8002696:	900f      	str	r0, [sp, #60]	; 0x3c
 8002698:	910e      	str	r1, [sp, #56]	; 0x38
 800269a:	2100      	movs	r1, #0
 800269c:	910d      	str	r1, [sp, #52]	; 0x34
 800269e:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 80026a2:	f64d 60f0 	movw	r0, #57072	; 0xdef0
 80026a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80026aa:	f64d 7110 	movw	r1, #57104	; 0xdf10
 80026ae:	900a      	str	r0, [sp, #40]	; 0x28
 80026b0:	a80a      	add	r0, sp, #40	; 0x28
 80026b2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80026b6:	f7ff fd22 	bl	80020fe <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 80026ba:	defe      	udf	#254	; 0xfe

080026bc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E>:
 80026bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c0:	b089      	sub	sp, #36	; 0x24
 80026c2:	f04f 0900 	mov.w	r9, #0
 80026c6:	2a00      	cmp	r2, #0
 80026c8:	f000 808d 	beq.w	80027e6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x12a>
 80026cc:	f10d 0b08 	add.w	fp, sp, #8
 80026d0:	4682      	mov	sl, r0
 80026d2:	4690      	mov	r8, r2
 80026d4:	460d      	mov	r5, r1
 80026d6:	f10b 0018 	add.w	r0, fp, #24
 80026da:	9001      	str	r0, [sp, #4]
 80026dc:	f89a 0008 	ldrb.w	r0, [sl, #8]
 80026e0:	b150      	cbz	r0, 80026f8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x3c>
 80026e2:	e9da 0100 	ldrd	r0, r1, [sl]
 80026e6:	2204      	movs	r2, #4
 80026e8:	68cb      	ldr	r3, [r1, #12]
 80026ea:	f64d 4168 	movw	r1, #56424	; 0xdc68
 80026ee:	f6c0 0100 	movt	r1, #2048	; 0x800
 80026f2:	4798      	blx	r3
 80026f4:	2800      	cmp	r0, #0
 80026f6:	d171      	bne.n	80027dc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x120>
 80026f8:	200a      	movs	r0, #10
 80026fa:	2101      	movs	r1, #1
 80026fc:	9008      	str	r0, [sp, #32]
 80026fe:	4642      	mov	r2, r8
 8002700:	9107      	str	r1, [sp, #28]
 8002702:	4629      	mov	r1, r5
 8002704:	e9cd 8005 	strd	r8, r0, [sp, #20]
 8002708:	a802      	add	r0, sp, #8
 800270a:	e880 0320 	stmia.w	r0, {r5, r8, r9}
 800270e:	200a      	movs	r0, #10
 8002710:	e006      	b.n	8002720 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x64>
 8002712:	9902      	ldr	r1, [sp, #8]
 8002714:	eba0 0209 	sub.w	r2, r0, r9
 8002718:	eb0b 0004 	add.w	r0, fp, r4
 800271c:	4449      	add	r1, r9
 800271e:	7dc0      	ldrb	r0, [r0, #23]
 8002720:	f7ff fd05 	bl	800212e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E>
 8002724:	2801      	cmp	r0, #1
 8002726:	d14f      	bne.n	80027c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x10c>
 8002728:	9804      	ldr	r0, [sp, #16]
 800272a:	9c07      	ldr	r4, [sp, #28]
 800272c:	4408      	add	r0, r1
 800272e:	f100 0901 	add.w	r9, r0, #1
 8002732:	f8cd 9010 	str.w	r9, [sp, #16]
 8002736:	45a1      	cmp	r9, r4
 8002738:	d201      	bcs.n	800273e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x82>
 800273a:	9e03      	ldr	r6, [sp, #12]
 800273c:	e015      	b.n	800276a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xae>
 800273e:	9e03      	ldr	r6, [sp, #12]
 8002740:	4620      	mov	r0, r4
 8002742:	454e      	cmp	r6, r9
 8002744:	bf38      	it	cc
 8002746:	2000      	movcc	r0, #0
 8002748:	d30f      	bcc.n	800276a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xae>
 800274a:	2c05      	cmp	r4, #5
 800274c:	d24f      	bcs.n	80027ee <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x132>
 800274e:	42a0      	cmp	r0, r4
 8002750:	d10b      	bne.n	800276a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xae>
 8002752:	9802      	ldr	r0, [sp, #8]
 8002754:	eba9 0704 	sub.w	r7, r9, r4
 8002758:	9901      	ldr	r1, [sp, #4]
 800275a:	4438      	add	r0, r7
 800275c:	4288      	cmp	r0, r1
 800275e:	d036      	beq.n	80027ce <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x112>
 8002760:	9901      	ldr	r1, [sp, #4]
 8002762:	4622      	mov	r2, r4
 8002764:	f004 ffb2 	bl	80076cc <memcmp>
 8002768:	b388      	cbz	r0, 80027ce <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x112>
 800276a:	9805      	ldr	r0, [sp, #20]
 800276c:	4548      	cmp	r0, r9
 800276e:	bf28      	it	cs
 8002770:	4286      	cmpcs	r6, r0
 8002772:	d2ce      	bcs.n	8002712 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x56>
 8002774:	f04f 0900 	mov.w	r9, #0
 8002778:	4644      	mov	r4, r8
 800277a:	f88a 9008 	strb.w	r9, [sl, #8]
 800277e:	eba8 0604 	sub.w	r6, r8, r4
 8002782:	fab4 f184 	clz	r1, r4
 8002786:	fab6 f086 	clz	r0, r6
 800278a:	0949      	lsrs	r1, r1, #5
 800278c:	0940      	lsrs	r0, r0, #5
 800278e:	ea51 0700 	orrs.w	r7, r1, r0
 8002792:	e9da 0100 	ldrd	r0, r1, [sl]
 8002796:	d105      	bne.n	80027a4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xe8>
 8002798:	45a0      	cmp	r8, r4
 800279a:	d92d      	bls.n	80027f8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x13c>
 800279c:	572a      	ldrsb	r2, [r5, r4]
 800279e:	f112 0f41 	cmn.w	r2, #65	; 0x41
 80027a2:	dd29      	ble.n	80027f8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x13c>
 80027a4:	68cb      	ldr	r3, [r1, #12]
 80027a6:	4629      	mov	r1, r5
 80027a8:	4622      	mov	r2, r4
 80027aa:	4798      	blx	r3
 80027ac:	b9b0      	cbnz	r0, 80027dc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x120>
 80027ae:	b92f      	cbnz	r7, 80027bc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x100>
 80027b0:	45a0      	cmp	r8, r4
 80027b2:	d928      	bls.n	8002806 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x14a>
 80027b4:	5728      	ldrsb	r0, [r5, r4]
 80027b6:	f110 0f41 	cmn.w	r0, #65	; 0x41
 80027ba:	dd24      	ble.n	8002806 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x14a>
 80027bc:	4425      	add	r5, r4
 80027be:	2e00      	cmp	r6, #0
 80027c0:	46b0      	mov	r8, r6
 80027c2:	f47f af8b 	bne.w	80026dc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x20>
 80027c6:	e00c      	b.n	80027e2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x126>
 80027c8:	9805      	ldr	r0, [sp, #20]
 80027ca:	9004      	str	r0, [sp, #16]
 80027cc:	e7d2      	b.n	8002774 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xb8>
 80027ce:	2001      	movs	r0, #1
 80027d0:	1c7c      	adds	r4, r7, #1
 80027d2:	f88a 0008 	strb.w	r0, [sl, #8]
 80027d6:	f04f 0900 	mov.w	r9, #0
 80027da:	e7d0      	b.n	800277e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xc2>
 80027dc:	f04f 0901 	mov.w	r9, #1
 80027e0:	e001      	b.n	80027e6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x12a>
 80027e2:	f04f 0900 	mov.w	r9, #0
 80027e6:	4648      	mov	r0, r9
 80027e8:	b009      	add	sp, #36	; 0x24
 80027ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027ee:	4620      	mov	r0, r4
 80027f0:	2104      	movs	r1, #4
 80027f2:	f7ff fd90 	bl	8002316 <_ZN4core5slice20slice_index_len_fail17hfa6ff34b8fd07644E>
 80027f6:	defe      	udf	#254	; 0xfe
 80027f8:	4628      	mov	r0, r5
 80027fa:	4641      	mov	r1, r8
 80027fc:	2200      	movs	r2, #0
 80027fe:	4623      	mov	r3, r4
 8002800:	f7ff fdcd 	bl	800239e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E>
 8002804:	defe      	udf	#254	; 0xfe
 8002806:	4628      	mov	r0, r5
 8002808:	4641      	mov	r1, r8
 800280a:	4622      	mov	r2, r4
 800280c:	4643      	mov	r3, r8
 800280e:	f7ff fdc6 	bl	800239e <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E>
 8002812:	defe      	udf	#254	; 0xfe

08002814 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E>:
 8002814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002818:	b091      	sub	sp, #68	; 0x44
 800281a:	4604      	mov	r4, r0
 800281c:	7a00      	ldrb	r0, [r0, #8]
 800281e:	b140      	cbz	r0, 8002832 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0x1e>
 8002820:	2001      	movs	r0, #1
 8002822:	7220      	strb	r0, [r4, #8]
 8002824:	6860      	ldr	r0, [r4, #4]
 8002826:	3001      	adds	r0, #1
 8002828:	6060      	str	r0, [r4, #4]
 800282a:	4620      	mov	r0, r4
 800282c:	b011      	add	sp, #68	; 0x44
 800282e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002832:	e9d4 3000 	ldrd	r3, r0, [r4]
 8002836:	460d      	mov	r5, r1
 8002838:	4616      	mov	r6, r2
 800283a:	7819      	ldrb	r1, [r3, #0]
 800283c:	0749      	lsls	r1, r1, #29
 800283e:	d419      	bmi.n	8002874 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0x60>
 8002840:	f24e 026e 	movw	r2, #57454	; 0xe06e
 8002844:	f24e 016a 	movw	r1, #57450	; 0xe06a
 8002848:	f6c0 0200 	movt	r2, #2048	; 0x800
 800284c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002850:	2800      	cmp	r0, #0
 8002852:	bf08      	it	eq
 8002854:	4611      	moveq	r1, r2
 8002856:	f04f 0202 	mov.w	r2, #2
 800285a:	bf08      	it	eq
 800285c:	2201      	moveq	r2, #1
 800285e:	e9d3 0306 	ldrd	r0, r3, [r3, #24]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4798      	blx	r3
 8002866:	2800      	cmp	r0, #0
 8002868:	d1da      	bne.n	8002820 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xc>
 800286a:	68f2      	ldr	r2, [r6, #12]
 800286c:	4628      	mov	r0, r5
 800286e:	6821      	ldr	r1, [r4, #0]
 8002870:	4790      	blx	r2
 8002872:	e7d6      	b.n	8002822 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xe>
 8002874:	b958      	cbnz	r0, 800288e <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0x7a>
 8002876:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800287a:	2202      	movs	r2, #2
 800287c:	68cb      	ldr	r3, [r1, #12]
 800287e:	f24e 016c 	movw	r1, #57452	; 0xe06c
 8002882:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002886:	4798      	blx	r3
 8002888:	2800      	cmp	r0, #0
 800288a:	d1c9      	bne.n	8002820 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xc>
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	2000      	movs	r0, #0
 8002890:	2201      	movs	r2, #1
 8002892:	9003      	str	r0, [sp, #12]
 8002894:	f103 0e08 	add.w	lr, r3, #8
 8002898:	e9cd 0001 	strd	r0, r0, [sp, #4]
 800289c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80028a0:	f88d 200c 	strb.w	r2, [sp, #12]
 80028a4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80028a8:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80028ac:	e9d3 170a 	ldrd	r1, r7, [r3, #40]	; 0x28
 80028b0:	e9d3 2000 	ldrd	r2, r0, [r3]
 80028b4:	e89e 5c00 	ldmia.w	lr, {sl, fp, ip, lr}
 80028b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028bc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80028c0:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80028c4:	f24e 0050 	movw	r0, #57424	; 0xe050
 80028c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80028cc:	e9cd 170e 	strd	r1, r7, [sp, #56]	; 0x38
 80028d0:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80028d4:	a904      	add	r1, sp, #16
 80028d6:	900b      	str	r0, [sp, #44]	; 0x2c
 80028d8:	a801      	add	r0, sp, #4
 80028da:	900a      	str	r0, [sp, #40]	; 0x28
 80028dc:	a806      	add	r0, sp, #24
 80028de:	e880 5c00 	stmia.w	r0, {sl, fp, ip, lr}
 80028e2:	4628      	mov	r0, r5
 80028e4:	68f2      	ldr	r2, [r6, #12]
 80028e6:	4790      	blx	r2
 80028e8:	2800      	cmp	r0, #0
 80028ea:	d199      	bne.n	8002820 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xc>
 80028ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80028f0:	2202      	movs	r2, #2
 80028f2:	68cb      	ldr	r3, [r1, #12]
 80028f4:	f24e 0168 	movw	r1, #57448	; 0xe068
 80028f8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80028fc:	4798      	blx	r3
 80028fe:	e790      	b.n	8002822 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xe>

08002900 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>:
 8002900:	b5b0      	push	{r4, r5, r7, lr}
 8002902:	4604      	mov	r4, r0
 8002904:	7a05      	ldrb	r5, [r0, #8]
 8002906:	6840      	ldr	r0, [r0, #4]
 8002908:	b308      	cbz	r0, 800294e <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x4e>
 800290a:	b10d      	cbz	r5, 8002910 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x10>
 800290c:	2501      	movs	r5, #1
 800290e:	e01d      	b.n	800294c <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x4c>
 8002910:	2801      	cmp	r0, #1
 8002912:	d110      	bne.n	8002936 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x36>
 8002914:	7a60      	ldrb	r0, [r4, #9]
 8002916:	b170      	cbz	r0, 8002936 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x36>
 8002918:	6821      	ldr	r1, [r4, #0]
 800291a:	7808      	ldrb	r0, [r1, #0]
 800291c:	0740      	lsls	r0, r0, #29
 800291e:	d40a      	bmi.n	8002936 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x36>
 8002920:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8002924:	2201      	movs	r2, #1
 8002926:	68cb      	ldr	r3, [r1, #12]
 8002928:	f24e 016f 	movw	r1, #57455	; 0xe06f
 800292c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002930:	2501      	movs	r5, #1
 8002932:	4798      	blx	r3
 8002934:	b950      	cbnz	r0, 800294c <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x4c>
 8002936:	6821      	ldr	r1, [r4, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 800293e:	68cb      	ldr	r3, [r1, #12]
 8002940:	f24e 0170 	movw	r1, #57456	; 0xe070
 8002944:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002948:	4798      	blx	r3
 800294a:	4605      	mov	r5, r0
 800294c:	7225      	strb	r5, [r4, #8]
 800294e:	2d00      	cmp	r5, #0
 8002950:	bf18      	it	ne
 8002952:	2501      	movne	r5, #1
 8002954:	4628      	mov	r0, r5
 8002956:	bdb0      	pop	{r4, r5, r7, pc}

08002958 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E>:
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	2200      	movs	r2, #0
 800295e:	297f      	cmp	r1, #127	; 0x7f
 8002960:	9201      	str	r2, [sp, #4]
 8002962:	d803      	bhi.n	800296c <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x14>
 8002964:	f88d 1004 	strb.w	r1, [sp, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	e03b      	b.n	80029e4 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x8c>
 800296c:	ebb2 2fd1 	cmp.w	r2, r1, lsr #11
 8002970:	d10b      	bne.n	800298a <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x32>
 8002972:	2202      	movs	r2, #2
 8002974:	098b      	lsrs	r3, r1, #6
 8002976:	f362 119f 	bfi	r1, r2, #6, #26
 800297a:	f88d 1005 	strb.w	r1, [sp, #5]
 800297e:	2106      	movs	r1, #6
 8002980:	f361 135f 	bfi	r3, r1, #5, #27
 8002984:	f88d 3004 	strb.w	r3, [sp, #4]
 8002988:	e02c      	b.n	80029e4 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x8c>
 800298a:	2200      	movs	r2, #0
 800298c:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
 8002990:	d112      	bne.n	80029b8 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x60>
 8002992:	2202      	movs	r2, #2
 8002994:	460b      	mov	r3, r1
 8002996:	f362 139f 	bfi	r3, r2, #6, #26
 800299a:	f88d 3006 	strb.w	r3, [sp, #6]
 800299e:	098b      	lsrs	r3, r1, #6
 80029a0:	0b09      	lsrs	r1, r1, #12
 80029a2:	f362 139f 	bfi	r3, r2, #6, #26
 80029a6:	220e      	movs	r2, #14
 80029a8:	f362 111f 	bfi	r1, r2, #4, #28
 80029ac:	f88d 3005 	strb.w	r3, [sp, #5]
 80029b0:	f88d 1004 	strb.w	r1, [sp, #4]
 80029b4:	2203      	movs	r2, #3
 80029b6:	e015      	b.n	80029e4 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x8c>
 80029b8:	2202      	movs	r2, #2
 80029ba:	460b      	mov	r3, r1
 80029bc:	f362 139f 	bfi	r3, r2, #6, #26
 80029c0:	f88d 3007 	strb.w	r3, [sp, #7]
 80029c4:	23f0      	movs	r3, #240	; 0xf0
 80029c6:	ea43 4391 	orr.w	r3, r3, r1, lsr #18
 80029ca:	f88d 3004 	strb.w	r3, [sp, #4]
 80029ce:	098b      	lsrs	r3, r1, #6
 80029d0:	0b09      	lsrs	r1, r1, #12
 80029d2:	f362 139f 	bfi	r3, r2, #6, #26
 80029d6:	f362 119f 	bfi	r1, r2, #6, #26
 80029da:	2204      	movs	r2, #4
 80029dc:	f88d 3006 	strb.w	r3, [sp, #6]
 80029e0:	f88d 1005 	strb.w	r1, [sp, #5]
 80029e4:	a901      	add	r1, sp, #4
 80029e6:	f7ff fe69 	bl	80026bc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E>
 80029ea:	b002      	add	sp, #8
 80029ec:	bd80      	pop	{r7, pc}

080029ee <_ZN4core3fmt5Write9write_fmt17h1dde8e33e3292656E>:
 80029ee:	b570      	push	{r4, r5, r6, lr}
 80029f0:	b088      	sub	sp, #32
 80029f2:	9001      	str	r0, [sp, #4]
 80029f4:	aa02      	add	r2, sp, #8
 80029f6:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
 80029fa:	f24e 0174 	movw	r1, #57460	; 0xe074
 80029fe:	4610      	mov	r0, r2
 8002a00:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002a04:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
 8002a08:	a801      	add	r0, sp, #4
 8002a0a:	f000 f831 	bl	8002a70 <_ZN4core3fmt5write17hfeb861b024853061E>
 8002a0e:	b008      	add	sp, #32
 8002a10:	bd70      	pop	{r4, r5, r6, pc}

08002a12 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hd3215ca6ed83c00eE>:
 8002a12:	6800      	ldr	r0, [r0, #0]
 8002a14:	f7ff be52 	b.w	80026bc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E>

08002a18 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hc1dd88ddb83e927aE>:
 8002a18:	6800      	ldr	r0, [r0, #0]
 8002a1a:	f7ff bf9d 	b.w	8002958 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E>

08002a1e <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hbaabbcf1c32c6171E>:
 8002a1e:	b570      	push	{r4, r5, r6, lr}
 8002a20:	b088      	sub	sp, #32
 8002a22:	6800      	ldr	r0, [r0, #0]
 8002a24:	aa02      	add	r2, sp, #8
 8002a26:	9001      	str	r0, [sp, #4]
 8002a28:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	f24e 0174 	movw	r1, #57460	; 0xe074
 8002a32:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002a36:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
 8002a3a:	a801      	add	r0, sp, #4
 8002a3c:	f000 f818 	bl	8002a70 <_ZN4core3fmt5write17hfeb861b024853061E>
 8002a40:	b008      	add	sp, #32
 8002a42:	bd70      	pop	{r4, r5, r6, pc}

08002a44 <_ZN4core3fmt10ArgumentV110show_usize17h0a1563fc3dacf510E>:
 8002a44:	6800      	ldr	r0, [r0, #0]
 8002a46:	460a      	mov	r2, r1
 8002a48:	2101      	movs	r1, #1
 8002a4a:	f001 b830 	b.w	8003aae <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>

08002a4e <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17hd71f50db4d05698dE>:
 8002a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
 8002a58:	466a      	mov	r2, sp
 8002a5a:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
 8002a5e:	4613      	mov	r3, r2
 8002a60:	4660      	mov	r0, ip
 8002a62:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
 8002a66:	f000 f803 	bl	8002a70 <_ZN4core3fmt5write17hfeb861b024853061E>
 8002a6a:	b006      	add	sp, #24
 8002a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a70 <_ZN4core3fmt5write17hfeb861b024853061E>:
 8002a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a74:	b08d      	sub	sp, #52	; 0x34
 8002a76:	2303      	movs	r3, #3
 8002a78:	e9d2 5404 	ldrd	r5, r4, [r2, #16]
 8002a7c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8002a80:	2320      	movs	r3, #32
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	2300      	movs	r3, #0
 8002a86:	f10d 0c18 	add.w	ip, sp, #24
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
 8002a90:	e88c 0023 	stmia.w	ip, {r0, r1, r5}
 8002a94:	6897      	ldr	r7, [r2, #8]
 8002a96:	9304      	str	r3, [sp, #16]
 8002a98:	2f00      	cmp	r7, #0
 8002a9a:	9302      	str	r3, [sp, #8]
 8002a9c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8002aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8002aa2:	f000 8097 	beq.w	8002bd4 <_ZN4core3fmt5write17hfeb861b024853061E+0x164>
 8002aa6:	e9d2 ba00 	ldrd	fp, sl, [r2]
 8002aaa:	68d4      	ldr	r4, [r2, #12]
 8002aac:	4554      	cmp	r4, sl
 8002aae:	bf88      	it	hi
 8002ab0:	4654      	movhi	r4, sl
 8002ab2:	2c00      	cmp	r4, #0
 8002ab4:	f000 80b2 	beq.w	8002c1c <_ZN4core3fmt5write17hfeb861b024853061E+0x1ac>
 8002ab8:	68cb      	ldr	r3, [r1, #12]
 8002aba:	e9db 1200 	ldrd	r1, r2, [fp]
 8002abe:	4798      	blx	r3
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	f040 80b8 	bne.w	8002c36 <_ZN4core3fmt5write17hfeb861b024853061E+0x1c6>
 8002ac6:	f642 2945 	movw	r9, #10821	; 0x2a45
 8002aca:	2500      	movs	r5, #0
 8002acc:	f6c0 0900 	movt	r9, #2048	; 0x800
 8002ad0:	46e8      	mov	r8, sp
 8002ad2:	68b8      	ldr	r0, [r7, #8]
 8002ad4:	9001      	str	r0, [sp, #4]
 8002ad6:	f897 0020 	ldrb.w	r0, [r7, #32]
 8002ada:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	9000      	str	r0, [sp, #0]
 8002ae2:	69b8      	ldr	r0, [r7, #24]
 8002ae4:	2801      	cmp	r0, #1
 8002ae6:	d011      	beq.n	8002b0c <_ZN4core3fmt5write17hfeb861b024853061E+0x9c>
 8002ae8:	2802      	cmp	r0, #2
 8002aea:	d003      	beq.n	8002af4 <_ZN4core3fmt5write17hfeb861b024853061E+0x84>
 8002aec:	2803      	cmp	r0, #3
 8002aee:	d01d      	beq.n	8002b2c <_ZN4core3fmt5write17hfeb861b024853061E+0xbc>
 8002af0:	69f9      	ldr	r1, [r7, #28]
 8002af2:	e019      	b.n	8002b28 <_ZN4core3fmt5write17hfeb861b024853061E+0xb8>
 8002af4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002af8:	4288      	cmp	r0, r1
 8002afa:	d017      	beq.n	8002b2c <_ZN4core3fmt5write17hfeb861b024853061E+0xbc>
 8002afc:	f100 0108 	add.w	r1, r0, #8
 8002b00:	9108      	str	r1, [sp, #32]
 8002b02:	6841      	ldr	r1, [r0, #4]
 8002b04:	4549      	cmp	r1, r9
 8002b06:	d111      	bne.n	8002b2c <_ZN4core3fmt5write17hfeb861b024853061E+0xbc>
 8002b08:	6800      	ldr	r0, [r0, #0]
 8002b0a:	e00c      	b.n	8002b26 <_ZN4core3fmt5write17hfeb861b024853061E+0xb6>
 8002b0c:	69f9      	ldr	r1, [r7, #28]
 8002b0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002b10:	4291      	cmp	r1, r2
 8002b12:	f080 8098 	bcs.w	8002c46 <_ZN4core3fmt5write17hfeb861b024853061E+0x1d6>
 8002b16:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002b18:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8002b1c:	6852      	ldr	r2, [r2, #4]
 8002b1e:	454a      	cmp	r2, r9
 8002b20:	d104      	bne.n	8002b2c <_ZN4core3fmt5write17hfeb861b024853061E+0xbc>
 8002b22:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 8002b26:	6801      	ldr	r1, [r0, #0]
 8002b28:	2001      	movs	r0, #1
 8002b2a:	e000      	b.n	8002b2e <_ZN4core3fmt5write17hfeb861b024853061E+0xbe>
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b32:	6938      	ldr	r0, [r7, #16]
 8002b34:	2801      	cmp	r0, #1
 8002b36:	d011      	beq.n	8002b5c <_ZN4core3fmt5write17hfeb861b024853061E+0xec>
 8002b38:	2802      	cmp	r0, #2
 8002b3a:	d003      	beq.n	8002b44 <_ZN4core3fmt5write17hfeb861b024853061E+0xd4>
 8002b3c:	2803      	cmp	r0, #3
 8002b3e:	d01c      	beq.n	8002b7a <_ZN4core3fmt5write17hfeb861b024853061E+0x10a>
 8002b40:	6979      	ldr	r1, [r7, #20]
 8002b42:	e018      	b.n	8002b76 <_ZN4core3fmt5write17hfeb861b024853061E+0x106>
 8002b44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002b48:	4288      	cmp	r0, r1
 8002b4a:	d016      	beq.n	8002b7a <_ZN4core3fmt5write17hfeb861b024853061E+0x10a>
 8002b4c:	f100 0108 	add.w	r1, r0, #8
 8002b50:	9108      	str	r1, [sp, #32]
 8002b52:	6841      	ldr	r1, [r0, #4]
 8002b54:	4549      	cmp	r1, r9
 8002b56:	d110      	bne.n	8002b7a <_ZN4core3fmt5write17hfeb861b024853061E+0x10a>
 8002b58:	6800      	ldr	r0, [r0, #0]
 8002b5a:	e00b      	b.n	8002b74 <_ZN4core3fmt5write17hfeb861b024853061E+0x104>
 8002b5c:	6979      	ldr	r1, [r7, #20]
 8002b5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002b60:	4291      	cmp	r1, r2
 8002b62:	d270      	bcs.n	8002c46 <_ZN4core3fmt5write17hfeb861b024853061E+0x1d6>
 8002b64:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002b66:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8002b6a:	6852      	ldr	r2, [r2, #4]
 8002b6c:	454a      	cmp	r2, r9
 8002b6e:	d104      	bne.n	8002b7a <_ZN4core3fmt5write17hfeb861b024853061E+0x10a>
 8002b70:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 8002b74:	6801      	ldr	r1, [r0, #0]
 8002b76:	2001      	movs	r0, #1
 8002b78:	e000      	b.n	8002b7c <_ZN4core3fmt5write17hfeb861b024853061E+0x10c>
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002b80:	6838      	ldr	r0, [r7, #0]
 8002b82:	2801      	cmp	r0, #1
 8002b84:	d107      	bne.n	8002b96 <_ZN4core3fmt5write17hfeb861b024853061E+0x126>
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002b8a:	4291      	cmp	r1, r2
 8002b8c:	d262      	bcs.n	8002c54 <_ZN4core3fmt5write17hfeb861b024853061E+0x1e4>
 8002b8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002b90:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8002b94:	e006      	b.n	8002ba4 <_ZN4core3fmt5write17hfeb861b024853061E+0x134>
 8002b96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002b9a:	4288      	cmp	r0, r1
 8002b9c:	d061      	beq.n	8002c62 <_ZN4core3fmt5write17hfeb861b024853061E+0x1f2>
 8002b9e:	f100 0108 	add.w	r1, r0, #8
 8002ba2:	9108      	str	r1, [sp, #32]
 8002ba4:	1d01      	adds	r1, r0, #4
 8002ba6:	6800      	ldr	r0, [r0, #0]
 8002ba8:	680a      	ldr	r2, [r1, #0]
 8002baa:	4641      	mov	r1, r8
 8002bac:	4790      	blx	r2
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	d141      	bne.n	8002c36 <_ZN4core3fmt5write17hfeb861b024853061E+0x1c6>
 8002bb2:	1c6e      	adds	r6, r5, #1
 8002bb4:	42a6      	cmp	r6, r4
 8002bb6:	d232      	bcs.n	8002c1e <_ZN4core3fmt5write17hfeb861b024853061E+0x1ae>
 8002bb8:	eb0b 00c5 	add.w	r0, fp, r5, lsl #3
 8002bbc:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8002bc0:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4798      	blx	r3
 8002bc8:	3724      	adds	r7, #36	; 0x24
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	4635      	mov	r5, r6
 8002bce:	f43f af80 	beq.w	8002ad2 <_ZN4core3fmt5write17hfeb861b024853061E+0x62>
 8002bd2:	e030      	b.n	8002c36 <_ZN4core3fmt5write17hfeb861b024853061E+0x1c6>
 8002bd4:	e9d2 ba00 	ldrd	fp, sl, [r2]
 8002bd8:	4554      	cmp	r4, sl
 8002bda:	bf88      	it	hi
 8002bdc:	4654      	movhi	r4, sl
 8002bde:	b1ec      	cbz	r4, 8002c1c <_ZN4core3fmt5write17hfeb861b024853061E+0x1ac>
 8002be0:	68cb      	ldr	r3, [r1, #12]
 8002be2:	e9db 1200 	ldrd	r1, r2, [fp]
 8002be6:	4798      	blx	r3
 8002be8:	bb28      	cbnz	r0, 8002c36 <_ZN4core3fmt5write17hfeb861b024853061E+0x1c6>
 8002bea:	2700      	movs	r7, #0
 8002bec:	46e8      	mov	r8, sp
 8002bee:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 8002bf2:	f855 0037 	ldr.w	r0, [r5, r7, lsl #3]
 8002bf6:	684a      	ldr	r2, [r1, #4]
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	4790      	blx	r2
 8002bfc:	b9d8      	cbnz	r0, 8002c36 <_ZN4core3fmt5write17hfeb861b024853061E+0x1c6>
 8002bfe:	1c7e      	adds	r6, r7, #1
 8002c00:	42a6      	cmp	r6, r4
 8002c02:	d20c      	bcs.n	8002c1e <_ZN4core3fmt5write17hfeb861b024853061E+0x1ae>
 8002c04:	eb0b 00c7 	add.w	r0, fp, r7, lsl #3
 8002c08:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8002c0c:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4798      	blx	r3
 8002c14:	2800      	cmp	r0, #0
 8002c16:	4637      	mov	r7, r6
 8002c18:	d0e9      	beq.n	8002bee <_ZN4core3fmt5write17hfeb861b024853061E+0x17e>
 8002c1a:	e00c      	b.n	8002c36 <_ZN4core3fmt5write17hfeb861b024853061E+0x1c6>
 8002c1c:	2600      	movs	r6, #0
 8002c1e:	45b2      	cmp	sl, r6
 8002c20:	d90d      	bls.n	8002c3e <_ZN4core3fmt5write17hfeb861b024853061E+0x1ce>
 8002c22:	eb0b 00c6 	add.w	r0, fp, r6, lsl #3
 8002c26:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
 8002c2a:	6842      	ldr	r2, [r0, #4]
 8002c2c:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	4798      	blx	r3
 8002c34:	b118      	cbz	r0, 8002c3e <_ZN4core3fmt5write17hfeb861b024853061E+0x1ce>
 8002c36:	2001      	movs	r0, #1
 8002c38:	b00d      	add	sp, #52	; 0x34
 8002c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c3e:	2000      	movs	r0, #0
 8002c40:	b00d      	add	sp, #52	; 0x34
 8002c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c46:	f24e 00b8 	movw	r0, #57528	; 0xe0b8
 8002c4a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002c4e:	f7ff fa36 	bl	80020be <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 8002c52:	defe      	udf	#254	; 0xfe
 8002c54:	f24e 00a8 	movw	r0, #57512	; 0xe0a8
 8002c58:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002c5c:	f7ff fa2f 	bl	80020be <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 8002c60:	defe      	udf	#254	; 0xfe
 8002c62:	f64d 5020 	movw	r0, #56608	; 0xdd20
 8002c66:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002c6a:	f7ff fa0b 	bl	8002084 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8002c6e:	defe      	udf	#254	; 0xfe

08002c70 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>:
 8002c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c74:	b083      	sub	sp, #12
 8002c76:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
 8002c7a:	461f      	mov	r7, r3
 8002c7c:	4692      	mov	sl, r2
 8002c7e:	4604      	mov	r4, r0
 8002c80:	b1c9      	cbz	r1, 8002cb6 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x46>
 8002c82:	f8d4 e000 	ldr.w	lr, [r4]
 8002c86:	f04f 082b 	mov.w	r8, #43	; 0x2b
 8002c8a:	f01e 0101 	ands.w	r1, lr, #1
 8002c8e:	bf08      	it	eq
 8002c90:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
 8002c94:	eb01 0b09 	add.w	fp, r1, r9
 8002c98:	ea5f 714e 	movs.w	r1, lr, lsl #29
 8002c9c:	d514      	bpl.n	8002cc8 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x58>
 8002c9e:	b1bf      	cbz	r7, 8002cd0 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x60>
 8002ca0:	1e79      	subs	r1, r7, #1
 8002ca2:	f007 0c03 	and.w	ip, r7, #3
 8002ca6:	2903      	cmp	r1, #3
 8002ca8:	d214      	bcs.n	8002cd4 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x64>
 8002caa:	2100      	movs	r1, #0
 8002cac:	4653      	mov	r3, sl
 8002cae:	f1bc 0f00 	cmp.w	ip, #0
 8002cb2:	d136      	bne.n	8002d22 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xb2>
 8002cb4:	e04d      	b.n	8002d52 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 8002cb6:	f8d4 e000 	ldr.w	lr, [r4]
 8002cba:	f109 0b01 	add.w	fp, r9, #1
 8002cbe:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8002cc2:	ea5f 714e 	movs.w	r1, lr, lsl #29
 8002cc6:	d4ea      	bmi.n	8002c9e <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x2e>
 8002cc8:	2700      	movs	r7, #0
 8002cca:	f04f 0a00 	mov.w	sl, #0
 8002cce:	e044      	b.n	8002d5a <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xea>
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	e03e      	b.n	8002d52 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 8002cd4:	e9cd 9601 	strd	r9, r6, [sp, #4]
 8002cd8:	ebac 0607 	sub.w	r6, ip, r7
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4653      	mov	r3, sl
 8002ce0:	781d      	ldrb	r5, [r3, #0]
 8002ce2:	785a      	ldrb	r2, [r3, #1]
 8002ce4:	7898      	ldrb	r0, [r3, #2]
 8002ce6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
 8002cea:	f893 9003 	ldrb.w	r9, [r3, #3]
 8002cee:	2d80      	cmp	r5, #128	; 0x80
 8002cf0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002cf4:	bf08      	it	eq
 8002cf6:	3101      	addeq	r1, #1
 8002cf8:	2a80      	cmp	r2, #128	; 0x80
 8002cfa:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8002cfe:	bf08      	it	eq
 8002d00:	3101      	addeq	r1, #1
 8002d02:	2880      	cmp	r0, #128	; 0x80
 8002d04:	f009 00c0 	and.w	r0, r9, #192	; 0xc0
 8002d08:	bf08      	it	eq
 8002d0a:	3101      	addeq	r1, #1
 8002d0c:	2880      	cmp	r0, #128	; 0x80
 8002d0e:	bf08      	it	eq
 8002d10:	3101      	addeq	r1, #1
 8002d12:	3304      	adds	r3, #4
 8002d14:	3604      	adds	r6, #4
 8002d16:	d1e3      	bne.n	8002ce0 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x70>
 8002d18:	e9dd 9601 	ldrd	r9, r6, [sp, #4]
 8002d1c:	f1bc 0f00 	cmp.w	ip, #0
 8002d20:	d017      	beq.n	8002d52 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 8002d22:	7818      	ldrb	r0, [r3, #0]
 8002d24:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8002d28:	2880      	cmp	r0, #128	; 0x80
 8002d2a:	bf08      	it	eq
 8002d2c:	3101      	addeq	r1, #1
 8002d2e:	f1bc 0f01 	cmp.w	ip, #1
 8002d32:	d00e      	beq.n	8002d52 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 8002d34:	7858      	ldrb	r0, [r3, #1]
 8002d36:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8002d3a:	2880      	cmp	r0, #128	; 0x80
 8002d3c:	bf08      	it	eq
 8002d3e:	3101      	addeq	r1, #1
 8002d40:	f1bc 0f02 	cmp.w	ip, #2
 8002d44:	d005      	beq.n	8002d52 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 8002d46:	7898      	ldrb	r0, [r3, #2]
 8002d48:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8002d4c:	2880      	cmp	r0, #128	; 0x80
 8002d4e:	bf08      	it	eq
 8002d50:	3101      	addeq	r1, #1
 8002d52:	eb0b 0007 	add.w	r0, fp, r7
 8002d56:	eba0 0b01 	sub.w	fp, r0, r1
 8002d5a:	68a0      	ldr	r0, [r4, #8]
 8002d5c:	2801      	cmp	r0, #1
 8002d5e:	d115      	bne.n	8002d8c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x11c>
 8002d60:	68e5      	ldr	r5, [r4, #12]
 8002d62:	455d      	cmp	r5, fp
 8002d64:	d912      	bls.n	8002d8c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x11c>
 8002d66:	ea5f 700e 	movs.w	r0, lr, lsl #28
 8002d6a:	9602      	str	r6, [sp, #8]
 8002d6c:	d423      	bmi.n	8002db6 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x146>
 8002d6e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002d72:	eba5 000b 	sub.w	r0, r5, fp
 8002d76:	2903      	cmp	r1, #3
 8002d78:	bf08      	it	eq
 8002d7a:	2101      	moveq	r1, #1
 8002d7c:	078a      	lsls	r2, r1, #30
 8002d7e:	d036      	beq.n	8002dee <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x17e>
 8002d80:	2902      	cmp	r1, #2
 8002d82:	d036      	beq.n	8002df2 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x182>
 8002d84:	2100      	movs	r1, #0
 8002d86:	4605      	mov	r5, r0
 8002d88:	9101      	str	r1, [sp, #4]
 8002d8a:	e036      	b.n	8002dfa <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x18a>
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	4641      	mov	r1, r8
 8002d90:	4652      	mov	r2, sl
 8002d92:	463b      	mov	r3, r7
 8002d94:	f000 f890 	bl	8002eb8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E>
 8002d98:	b120      	cbz	r0, 8002da4 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x134>
 8002d9a:	2601      	movs	r6, #1
 8002d9c:	4630      	mov	r0, r6
 8002d9e:	b003      	add	sp, #12
 8002da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002da4:	69e1      	ldr	r1, [r4, #28]
 8002da6:	464a      	mov	r2, r9
 8002da8:	69a0      	ldr	r0, [r4, #24]
 8002daa:	68cb      	ldr	r3, [r1, #12]
 8002dac:	4631      	mov	r1, r6
 8002dae:	b003      	add	sp, #12
 8002db0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	4718      	bx	r3
 8002db6:	2601      	movs	r6, #1
 8002db8:	2030      	movs	r0, #48	; 0x30
 8002dba:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 8002dbe:	4641      	mov	r1, r8
 8002dc0:	6060      	str	r0, [r4, #4]
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4652      	mov	r2, sl
 8002dc6:	463b      	mov	r3, r7
 8002dc8:	f000 f876 	bl	8002eb8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d1e5      	bne.n	8002d9c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12c>
 8002dd0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002dd4:	eba5 000b 	sub.w	r0, r5, fp
 8002dd8:	2903      	cmp	r1, #3
 8002dda:	bf08      	it	eq
 8002ddc:	2101      	moveq	r1, #1
 8002dde:	078a      	lsls	r2, r1, #30
 8002de0:	d03a      	beq.n	8002e58 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1e8>
 8002de2:	2902      	cmp	r1, #2
 8002de4:	d03b      	beq.n	8002e5e <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1ee>
 8002de6:	f04f 0800 	mov.w	r8, #0
 8002dea:	4605      	mov	r5, r0
 8002dec:	e03b      	b.n	8002e66 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1f6>
 8002dee:	2500      	movs	r5, #0
 8002df0:	e002      	b.n	8002df8 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x188>
 8002df2:	0845      	lsrs	r5, r0, #1
 8002df4:	3001      	adds	r0, #1
 8002df6:	0840      	lsrs	r0, r0, #1
 8002df8:	9001      	str	r0, [sp, #4]
 8002dfa:	f04f 36ff 	mov.w	r6, #4294967295
 8002dfe:	3601      	adds	r6, #1
 8002e00:	42ae      	cmp	r6, r5
 8002e02:	d207      	bcs.n	8002e14 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1a4>
 8002e04:	6861      	ldr	r1, [r4, #4]
 8002e06:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 8002e0a:	6912      	ldr	r2, [r2, #16]
 8002e0c:	4790      	blx	r2
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	d0f5      	beq.n	8002dfe <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x18e>
 8002e12:	e7c2      	b.n	8002d9a <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 8002e14:	4620      	mov	r0, r4
 8002e16:	4641      	mov	r1, r8
 8002e18:	4652      	mov	r2, sl
 8002e1a:	463b      	mov	r3, r7
 8002e1c:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8002e20:	f000 f84a 	bl	8002eb8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d1b8      	bne.n	8002d9a <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 8002e28:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002e2c:	464a      	mov	r2, r9
 8002e2e:	68cb      	ldr	r3, [r1, #12]
 8002e30:	9902      	ldr	r1, [sp, #8]
 8002e32:	4798      	blx	r3
 8002e34:	2800      	cmp	r0, #0
 8002e36:	d1b0      	bne.n	8002d9a <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 8002e38:	e9d4 8406 	ldrd	r8, r4, [r4, #24]
 8002e3c:	f04f 37ff 	mov.w	r7, #4294967295
 8002e40:	9d01      	ldr	r5, [sp, #4]
 8002e42:	2601      	movs	r6, #1
 8002e44:	3701      	adds	r7, #1
 8002e46:	42af      	cmp	r7, r5
 8002e48:	d234      	bcs.n	8002eb4 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x244>
 8002e4a:	6922      	ldr	r2, [r4, #16]
 8002e4c:	4640      	mov	r0, r8
 8002e4e:	4659      	mov	r1, fp
 8002e50:	4790      	blx	r2
 8002e52:	2800      	cmp	r0, #0
 8002e54:	d0f6      	beq.n	8002e44 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1d4>
 8002e56:	e7a1      	b.n	8002d9c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12c>
 8002e58:	2500      	movs	r5, #0
 8002e5a:	4680      	mov	r8, r0
 8002e5c:	e003      	b.n	8002e66 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1f6>
 8002e5e:	0845      	lsrs	r5, r0, #1
 8002e60:	3001      	adds	r0, #1
 8002e62:	ea4f 0850 	mov.w	r8, r0, lsr #1
 8002e66:	f04f 36ff 	mov.w	r6, #4294967295
 8002e6a:	3601      	adds	r6, #1
 8002e6c:	42ae      	cmp	r6, r5
 8002e6e:	d207      	bcs.n	8002e80 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x210>
 8002e70:	6861      	ldr	r1, [r4, #4]
 8002e72:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 8002e76:	6912      	ldr	r2, [r2, #16]
 8002e78:	4790      	blx	r2
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d0f5      	beq.n	8002e6a <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1fa>
 8002e7e:	e78c      	b.n	8002d9a <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 8002e80:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8002e84:	464a      	mov	r2, r9
 8002e86:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002e8a:	68cb      	ldr	r3, [r1, #12]
 8002e8c:	9902      	ldr	r1, [sp, #8]
 8002e8e:	4798      	blx	r3
 8002e90:	2800      	cmp	r0, #0
 8002e92:	f47f af82 	bne.w	8002d9a <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 8002e96:	e9d4 7406 	ldrd	r7, r4, [r4, #24]
 8002e9a:	f04f 35ff 	mov.w	r5, #4294967295
 8002e9e:	2601      	movs	r6, #1
 8002ea0:	3501      	adds	r5, #1
 8002ea2:	4545      	cmp	r5, r8
 8002ea4:	d206      	bcs.n	8002eb4 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x244>
 8002ea6:	6922      	ldr	r2, [r4, #16]
 8002ea8:	4638      	mov	r0, r7
 8002eaa:	4651      	mov	r1, sl
 8002eac:	4790      	blx	r2
 8002eae:	2800      	cmp	r0, #0
 8002eb0:	d0f6      	beq.n	8002ea0 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x230>
 8002eb2:	e773      	b.n	8002d9c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12c>
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	e771      	b.n	8002d9c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12c>

08002eb8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	461c      	mov	r4, r3
 8002ebc:	4615      	mov	r5, r2
 8002ebe:	4606      	mov	r6, r0
 8002ec0:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 8002ec4:	d006      	beq.n	8002ed4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E+0x1c>
 8002ec6:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
 8002eca:	6912      	ldr	r2, [r2, #16]
 8002ecc:	4790      	blx	r2
 8002ece:	b108      	cbz	r0, 8002ed4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E+0x1c>
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	bd70      	pop	{r4, r5, r6, pc}
 8002ed4:	b13d      	cbz	r5, 8002ee6 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E+0x2e>
 8002ed6:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 8002eda:	4622      	mov	r2, r4
 8002edc:	68cb      	ldr	r3, [r1, #12]
 8002ede:	4629      	mov	r1, r5
 8002ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002ee4:	4718      	bx	r3
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	bd70      	pop	{r4, r5, r6, pc}

08002eea <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E>:
 8002eea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eee:	b081      	sub	sp, #4
 8002ef0:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002ef4:	4682      	mov	sl, r0
 8002ef6:	6900      	ldr	r0, [r0, #16]
 8002ef8:	4691      	mov	r9, r2
 8002efa:	4688      	mov	r8, r1
 8002efc:	f1be 0f01 	cmp.w	lr, #1
 8002f00:	d10f      	bne.n	8002f22 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x38>
 8002f02:	b988      	cbnz	r0, 8002f28 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x3e>
 8002f04:	f1b9 0f00 	cmp.w	r9, #0
 8002f08:	f000 80a9 	beq.w	800305e <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x174>
 8002f0c:	f1a9 0001 	sub.w	r0, r9, #1
 8002f10:	f009 0103 	and.w	r1, r9, #3
 8002f14:	2803      	cmp	r0, #3
 8002f16:	d25f      	bcs.n	8002fd8 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xee>
 8002f18:	2000      	movs	r0, #0
 8002f1a:	4642      	mov	r2, r8
 8002f1c:	2900      	cmp	r1, #0
 8002f1e:	d17b      	bne.n	8003018 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x12e>
 8002f20:	e09e      	b.n	8003060 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 8002f22:	2800      	cmp	r0, #0
 8002f24:	f000 80b1 	beq.w	800308a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1a0>
 8002f28:	f1b9 0f00 	cmp.w	r9, #0
 8002f2c:	d04d      	beq.n	8002fca <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xe0>
 8002f2e:	f8da 0014 	ldr.w	r0, [sl, #20]
 8002f32:	eb08 0109 	add.w	r1, r8, r9
 8002f36:	2200      	movs	r2, #0
 8002f38:	4644      	mov	r4, r8
 8002f3a:	4647      	mov	r7, r8
 8002f3c:	43c3      	mvns	r3, r0
 8002f3e:	4626      	mov	r6, r4
 8002f40:	f916 5b01 	ldrsb.w	r5, [r6], #1
 8002f44:	2d00      	cmp	r5, #0
 8002f46:	b2e8      	uxtb	r0, r5
 8002f48:	da28      	bge.n	8002f9c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xb2>
 8002f4a:	428e      	cmp	r6, r1
 8002f4c:	d005      	beq.n	8002f5a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x70>
 8002f4e:	7865      	ldrb	r5, [r4, #1]
 8002f50:	1ca6      	adds	r6, r4, #2
 8002f52:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8002f56:	4634      	mov	r4, r6
 8002f58:	e001      	b.n	8002f5e <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x74>
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	f000 0b1f 	and.w	fp, r0, #31
 8002f62:	28e0      	cmp	r0, #224	; 0xe0
 8002f64:	d307      	bcc.n	8002f76 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x8c>
 8002f66:	428c      	cmp	r4, r1
 8002f68:	d008      	beq.n	8002f7c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x92>
 8002f6a:	f814 6b01 	ldrb.w	r6, [r4], #1
 8002f6e:	f006 0c3f 	and.w	ip, r6, #63	; 0x3f
 8002f72:	4626      	mov	r6, r4
 8002f74:	e005      	b.n	8002f82 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x98>
 8002f76:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
 8002f7a:	e00f      	b.n	8002f9c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xb2>
 8002f7c:	f04f 0c00 	mov.w	ip, #0
 8002f80:	460c      	mov	r4, r1
 8002f82:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
 8002f86:	28f0      	cmp	r0, #240	; 0xf0
 8002f88:	d306      	bcc.n	8002f98 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xae>
 8002f8a:	428c      	cmp	r4, r1
 8002f8c:	d010      	beq.n	8002fb0 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xc6>
 8002f8e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002f92:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002f96:	e00d      	b.n	8002fb4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xca>
 8002f98:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
 8002f9c:	4634      	mov	r4, r6
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	d051      	beq.n	8003046 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x15c>
 8002fa2:	1bd0      	subs	r0, r2, r7
 8002fa4:	42a1      	cmp	r1, r4
 8002fa6:	eb00 0204 	add.w	r2, r0, r4
 8002faa:	4627      	mov	r7, r4
 8002fac:	d1c7      	bne.n	8002f3e <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x54>
 8002fae:	e04d      	b.n	800304c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x162>
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	4634      	mov	r4, r6
 8002fb4:	f44f 16e0 	mov.w	r6, #1835008	; 0x1c0000
 8002fb8:	ea06 468b 	and.w	r6, r6, fp, lsl #18
 8002fbc:	ea46 1685 	orr.w	r6, r6, r5, lsl #6
 8002fc0:	4430      	add	r0, r6
 8002fc2:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8002fc6:	d1ea      	bne.n	8002f9e <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xb4>
 8002fc8:	e040      	b.n	800304c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x162>
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f1be 0f00 	cmp.w	lr, #0
 8002fd0:	d140      	bne.n	8003054 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x16a>
 8002fd2:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8002fd6:	e05d      	b.n	8003094 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1aa>
 8002fd8:	eba1 0309 	sub.w	r3, r1, r9
 8002fdc:	2000      	movs	r0, #0
 8002fde:	4642      	mov	r2, r8
 8002fe0:	7817      	ldrb	r7, [r2, #0]
 8002fe2:	7856      	ldrb	r6, [r2, #1]
 8002fe4:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
 8002fe8:	7895      	ldrb	r5, [r2, #2]
 8002fea:	78d4      	ldrb	r4, [r2, #3]
 8002fec:	2f80      	cmp	r7, #128	; 0x80
 8002fee:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
 8002ff2:	bf08      	it	eq
 8002ff4:	3001      	addeq	r0, #1
 8002ff6:	2f80      	cmp	r7, #128	; 0x80
 8002ff8:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
 8002ffc:	bf08      	it	eq
 8002ffe:	3001      	addeq	r0, #1
 8003000:	2f80      	cmp	r7, #128	; 0x80
 8003002:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
 8003006:	bf08      	it	eq
 8003008:	3001      	addeq	r0, #1
 800300a:	2f80      	cmp	r7, #128	; 0x80
 800300c:	bf08      	it	eq
 800300e:	3001      	addeq	r0, #1
 8003010:	3204      	adds	r2, #4
 8003012:	3304      	adds	r3, #4
 8003014:	d1e4      	bne.n	8002fe0 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xf6>
 8003016:	b319      	cbz	r1, 8003060 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 8003018:	7813      	ldrb	r3, [r2, #0]
 800301a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800301e:	2b80      	cmp	r3, #128	; 0x80
 8003020:	bf08      	it	eq
 8003022:	3001      	addeq	r0, #1
 8003024:	2901      	cmp	r1, #1
 8003026:	d01b      	beq.n	8003060 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 8003028:	7853      	ldrb	r3, [r2, #1]
 800302a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800302e:	2b80      	cmp	r3, #128	; 0x80
 8003030:	bf08      	it	eq
 8003032:	3001      	addeq	r0, #1
 8003034:	2902      	cmp	r1, #2
 8003036:	d013      	beq.n	8003060 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 8003038:	7891      	ldrb	r1, [r2, #2]
 800303a:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
 800303e:	2980      	cmp	r1, #128	; 0x80
 8003040:	bf08      	it	eq
 8003042:	3001      	addeq	r0, #1
 8003044:	e00c      	b.n	8003060 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 8003046:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 800304a:	d175      	bne.n	8003138 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x24e>
 800304c:	464a      	mov	r2, r9
 800304e:	f1be 0f00 	cmp.w	lr, #0
 8003052:	d0be      	beq.n	8002fd2 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xe8>
 8003054:	4691      	mov	r9, r2
 8003056:	f1b9 0f00 	cmp.w	r9, #0
 800305a:	f47f af57 	bne.w	8002f0c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22>
 800305e:	2000      	movs	r0, #0
 8003060:	eba9 0100 	sub.w	r1, r9, r0
 8003064:	f8da 000c 	ldr.w	r0, [sl, #12]
 8003068:	4281      	cmp	r1, r0
 800306a:	d20e      	bcs.n	800308a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1a0>
 800306c:	f1b9 0f00 	cmp.w	r9, #0
 8003070:	d016      	beq.n	80030a0 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1b6>
 8003072:	f1a9 0101 	sub.w	r1, r9, #1
 8003076:	f009 0c03 	and.w	ip, r9, #3
 800307a:	2903      	cmp	r1, #3
 800307c:	d212      	bcs.n	80030a4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1ba>
 800307e:	2100      	movs	r1, #0
 8003080:	4643      	mov	r3, r8
 8003082:	f1bc 0f00 	cmp.w	ip, #0
 8003086:	d12f      	bne.n	80030e8 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1fe>
 8003088:	e046      	b.n	8003118 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 800308a:	f8da 101c 	ldr.w	r1, [sl, #28]
 800308e:	464a      	mov	r2, r9
 8003090:	f8da 0018 	ldr.w	r0, [sl, #24]
 8003094:	68cb      	ldr	r3, [r1, #12]
 8003096:	4641      	mov	r1, r8
 8003098:	b001      	add	sp, #4
 800309a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800309e:	4718      	bx	r3
 80030a0:	2100      	movs	r1, #0
 80030a2:	e039      	b.n	8003118 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 80030a4:	ebac 0709 	sub.w	r7, ip, r9
 80030a8:	2100      	movs	r1, #0
 80030aa:	4643      	mov	r3, r8
 80030ac:	781e      	ldrb	r6, [r3, #0]
 80030ae:	785d      	ldrb	r5, [r3, #1]
 80030b0:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
 80030b4:	789c      	ldrb	r4, [r3, #2]
 80030b6:	78da      	ldrb	r2, [r3, #3]
 80030b8:	2e80      	cmp	r6, #128	; 0x80
 80030ba:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 80030be:	bf08      	it	eq
 80030c0:	3101      	addeq	r1, #1
 80030c2:	2e80      	cmp	r6, #128	; 0x80
 80030c4:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
 80030c8:	bf08      	it	eq
 80030ca:	3101      	addeq	r1, #1
 80030cc:	2e80      	cmp	r6, #128	; 0x80
 80030ce:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80030d2:	bf08      	it	eq
 80030d4:	3101      	addeq	r1, #1
 80030d6:	2a80      	cmp	r2, #128	; 0x80
 80030d8:	bf08      	it	eq
 80030da:	3101      	addeq	r1, #1
 80030dc:	3304      	adds	r3, #4
 80030de:	3704      	adds	r7, #4
 80030e0:	d1e4      	bne.n	80030ac <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1c2>
 80030e2:	f1bc 0f00 	cmp.w	ip, #0
 80030e6:	d017      	beq.n	8003118 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80030ee:	2a80      	cmp	r2, #128	; 0x80
 80030f0:	bf08      	it	eq
 80030f2:	3101      	addeq	r1, #1
 80030f4:	f1bc 0f01 	cmp.w	ip, #1
 80030f8:	d00e      	beq.n	8003118 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 80030fa:	785a      	ldrb	r2, [r3, #1]
 80030fc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003100:	2a80      	cmp	r2, #128	; 0x80
 8003102:	bf08      	it	eq
 8003104:	3101      	addeq	r1, #1
 8003106:	f1bc 0f02 	cmp.w	ip, #2
 800310a:	d005      	beq.n	8003118 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 800310c:	789a      	ldrb	r2, [r3, #2]
 800310e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8003112:	2a80      	cmp	r2, #128	; 0x80
 8003114:	bf08      	it	eq
 8003116:	3101      	addeq	r1, #1
 8003118:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 800311c:	eba1 0109 	sub.w	r1, r1, r9
 8003120:	4408      	add	r0, r1
 8003122:	1eda      	subs	r2, r3, #3
 8003124:	bf18      	it	ne
 8003126:	461a      	movne	r2, r3
 8003128:	0793      	lsls	r3, r2, #30
 800312a:	d00b      	beq.n	8003144 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x25a>
 800312c:	2a02      	cmp	r2, #2
 800312e:	d00c      	beq.n	800314a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x260>
 8003130:	f04f 0b00 	mov.w	fp, #0
 8003134:	4604      	mov	r4, r0
 8003136:	e00c      	b.n	8003152 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x268>
 8003138:	2a00      	cmp	r2, #0
 800313a:	bf18      	it	ne
 800313c:	454a      	cmpne	r2, r9
 800313e:	d134      	bne.n	80031aa <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2c0>
 8003140:	4640      	mov	r0, r8
 8003142:	e03b      	b.n	80031bc <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2d2>
 8003144:	2400      	movs	r4, #0
 8003146:	4683      	mov	fp, r0
 8003148:	e003      	b.n	8003152 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x268>
 800314a:	0844      	lsrs	r4, r0, #1
 800314c:	3001      	adds	r0, #1
 800314e:	ea4f 0b50 	mov.w	fp, r0, lsr #1
 8003152:	f04f 35ff 	mov.w	r5, #4294967295
 8003156:	3501      	adds	r5, #1
 8003158:	42a5      	cmp	r5, r4
 800315a:	d208      	bcs.n	800316e <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x284>
 800315c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003160:	e9da 0206 	ldrd	r0, r2, [sl, #24]
 8003164:	6912      	ldr	r2, [r2, #16]
 8003166:	4790      	blx	r2
 8003168:	2800      	cmp	r0, #0
 800316a:	d0f4      	beq.n	8003156 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x26c>
 800316c:	e015      	b.n	800319a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2b0>
 800316e:	f8da 7004 	ldr.w	r7, [sl, #4]
 8003172:	464a      	mov	r2, r9
 8003174:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8003178:	68cb      	ldr	r3, [r1, #12]
 800317a:	4641      	mov	r1, r8
 800317c:	4798      	blx	r3
 800317e:	b960      	cbnz	r0, 800319a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2b0>
 8003180:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 8003184:	f04f 36ff 	mov.w	r6, #4294967295
 8003188:	3601      	adds	r6, #1
 800318a:	455e      	cmp	r6, fp
 800318c:	d209      	bcs.n	80031a2 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2b8>
 800318e:	692a      	ldr	r2, [r5, #16]
 8003190:	4620      	mov	r0, r4
 8003192:	4639      	mov	r1, r7
 8003194:	4790      	blx	r2
 8003196:	2800      	cmp	r0, #0
 8003198:	d0f6      	beq.n	8003188 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x29e>
 800319a:	2001      	movs	r0, #1
 800319c:	b001      	add	sp, #4
 800319e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031a2:	2000      	movs	r0, #0
 80031a4:	b001      	add	sp, #4
 80031a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031aa:	454a      	cmp	r2, r9
 80031ac:	d204      	bcs.n	80031b8 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2ce>
 80031ae:	f918 0002 	ldrsb.w	r0, [r8, r2]
 80031b2:	f110 0f40 	cmn.w	r0, #64	; 0x40
 80031b6:	dac3      	bge.n	8003140 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x256>
 80031b8:	2200      	movs	r2, #0
 80031ba:	2000      	movs	r0, #0
 80031bc:	2800      	cmp	r0, #0
 80031be:	bf0c      	ite	eq
 80031c0:	464a      	moveq	r2, r9
 80031c2:	4680      	movne	r8, r0
 80031c4:	f1be 0f00 	cmp.w	lr, #0
 80031c8:	f47f af44 	bne.w	8003054 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x16a>
 80031cc:	e701      	b.n	8002fd2 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xe8>

080031ce <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>:
 80031ce:	7800      	ldrb	r0, [r0, #0]
 80031d0:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80031d4:	4770      	bx	lr

080031d6 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>:
 80031d6:	7800      	ldrb	r0, [r0, #0]
 80031d8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80031dc:	4770      	bx	lr

080031de <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>:
 80031de:	b570      	push	{r4, r5, r6, lr}
 80031e0:	460d      	mov	r5, r1
 80031e2:	4606      	mov	r6, r0
 80031e4:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 80031e8:	461c      	mov	r4, r3
 80031ea:	68cb      	ldr	r3, [r1, #12]
 80031ec:	4611      	mov	r1, r2
 80031ee:	4622      	mov	r2, r4
 80031f0:	4798      	blx	r3
 80031f2:	7230      	strb	r0, [r6, #8]
 80031f4:	fab4 f084 	clz	r0, r4
 80031f8:	0940      	lsrs	r0, r0, #5
 80031fa:	7270      	strb	r0, [r6, #9]
 80031fc:	2000      	movs	r0, #0
 80031fe:	e9c6 5000 	strd	r5, r0, [r6]
 8003202:	bd70      	pop	{r4, r5, r6, pc}

08003204 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h8845cd1bde16499dE>:
 8003204:	460b      	mov	r3, r1
 8003206:	4601      	mov	r1, r0
 8003208:	4610      	mov	r0, r2
 800320a:	461a      	mov	r2, r3
 800320c:	f7ff be6d 	b.w	8002eea <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E>

08003210 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E>:
 8003210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003214:	b085      	sub	sp, #20
 8003216:	460c      	mov	r4, r1
 8003218:	4605      	mov	r5, r0
 800321a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 800321e:	690a      	ldr	r2, [r1, #16]
 8003220:	2127      	movs	r1, #39	; 0x27
 8003222:	4790      	blx	r2
 8003224:	b118      	cbz	r0, 800322e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1e>
 8003226:	2001      	movs	r0, #1
 8003228:	b005      	add	sp, #20
 800322a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800322e:	682d      	ldr	r5, [r5, #0]
 8003230:	f1a5 0009 	sub.w	r0, r5, #9
 8003234:	281e      	cmp	r0, #30
 8003236:	d816      	bhi.n	8003266 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x56>
 8003238:	2702      	movs	r7, #2
 800323a:	2674      	movs	r6, #116	; 0x74
 800323c:	e8df f000 	tbb	[pc, r0]
 8003240:	17171086 	.word	0x17171086
 8003244:	1717173a 	.word	0x1717173a
 8003248:	17171717 	.word	0x17171717
 800324c:	17171717 	.word	0x17171717
 8003250:	17171717 	.word	0x17171717
 8003254:	17171717 	.word	0x17171717
 8003258:	17171517 	.word	0x17171517
 800325c:	00151717 	.word	0x00151717
 8003260:	2702      	movs	r7, #2
 8003262:	266e      	movs	r6, #110	; 0x6e
 8003264:	e028      	b.n	80032b8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xa8>
 8003266:	2d5c      	cmp	r5, #92	; 0x5c
 8003268:	d101      	bne.n	800326e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x5e>
 800326a:	2702      	movs	r7, #2
 800326c:	e06d      	b.n	800334a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x13a>
 800326e:	f64e 4060 	movw	r0, #60512	; 0xec60
 8003272:	4629      	mov	r1, r5
 8003274:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003278:	f000 f8d2 	bl	8003420 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E>
 800327c:	2800      	cmp	r0, #0
 800327e:	d159      	bne.n	8003334 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 8003280:	2000      	movs	r0, #0
 8003282:	ebb0 4f15 	cmp.w	r0, r5, lsr #16
 8003286:	d118      	bne.n	80032ba <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xaa>
 8003288:	f24e 21bf 	movw	r1, #58047	; 0xe2bf
 800328c:	f240 122f 	movw	r2, #303	; 0x12f
 8003290:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003294:	f24e 1390 	movw	r3, #57744	; 0xe190
 8003298:	e9cd 2100 	strd	r2, r1, [sp]
 800329c:	f24e 1140 	movw	r1, #57664	; 0xe140
 80032a0:	f44f 709e 	mov.w	r0, #316	; 0x13c
 80032a4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80032a8:	9002      	str	r0, [sp, #8]
 80032aa:	f6c0 0300 	movt	r3, #2048	; 0x800
 80032ae:	4628      	mov	r0, r5
 80032b0:	2228      	movs	r2, #40	; 0x28
 80032b2:	e019      	b.n	80032e8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xd8>
 80032b4:	2702      	movs	r7, #2
 80032b6:	2672      	movs	r6, #114	; 0x72
 80032b8:	e048      	b.n	800334c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x13c>
 80032ba:	ebb0 4f55 	cmp.w	r0, r5, lsr #17
 80032be:	d118      	bne.n	80032f2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xe2>
 80032c0:	f24e 41db 	movw	r1, #58587	; 0xe4db
 80032c4:	229e      	movs	r2, #158	; 0x9e
 80032c6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80032ca:	f24e 433d 	movw	r3, #58429	; 0xe43d
 80032ce:	e9cd 2100 	strd	r2, r1, [sp]
 80032d2:	f24e 31fb 	movw	r1, #58363	; 0xe3fb
 80032d6:	f240 107d 	movw	r0, #381	; 0x17d
 80032da:	f6c0 0100 	movt	r1, #2048	; 0x800
 80032de:	9002      	str	r0, [sp, #8]
 80032e0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80032e4:	4628      	mov	r0, r5
 80032e6:	2221      	movs	r2, #33	; 0x21
 80032e8:	f000 f919 	bl	800351e <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E>
 80032ec:	b310      	cbz	r0, 8003334 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 80032ee:	2701      	movs	r7, #1
 80032f0:	e7bc      	b.n	800326c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x5c>
 80032f2:	f240 10ef 	movw	r0, #495	; 0x1ef
 80032f6:	f2c0 000e 	movt	r0, #14
 80032fa:	4285      	cmp	r5, r0
 80032fc:	d81a      	bhi.n	8003334 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 80032fe:	f240 50e2 	movw	r0, #1506	; 0x5e2
 8003302:	f240 61e2 	movw	r1, #1762	; 0x6e2
 8003306:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
 800330a:	f2c0 010b 	movt	r1, #11
 800330e:	4428      	add	r0, r5
 8003310:	4288      	cmp	r0, r1
 8003312:	d30f      	bcc.n	8003334 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 8003314:	f241 401f 	movw	r0, #5151	; 0x141f
 8003318:	f640 411f 	movw	r1, #3103	; 0xc1f
 800331c:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
 8003320:	4428      	add	r0, r5
 8003322:	4288      	cmp	r0, r1
 8003324:	bf21      	itttt	cs
 8003326:	f243 105e 	movwcs	r0, #12638	; 0x315e
 800332a:	f6cf 70fd 	movtcs	r0, #65533	; 0xfffd
 800332e:	4428      	addcs	r0, r5
 8003330:	280e      	cmpcs	r0, #14
 8003332:	d25c      	bcs.n	80033ee <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1de>
 8003334:	f045 0001 	orr.w	r0, r5, #1
 8003338:	f04f 0905 	mov.w	r9, #5
 800333c:	fab0 f080 	clz	r0, r0
 8003340:	2703      	movs	r7, #3
 8003342:	2107      	movs	r1, #7
 8003344:	ea81 0090 	eor.w	r0, r1, r0, lsr #2
 8003348:	9004      	str	r0, [sp, #16]
 800334a:	462e      	mov	r6, r5
 800334c:	f04f 0b1c 	mov.w	fp, #28
 8003350:	f04f 0a01 	mov.w	sl, #1
 8003354:	2502      	movs	r5, #2
 8003356:	f04f 0804 	mov.w	r8, #4
 800335a:	2f01      	cmp	r7, #1
 800335c:	d011      	beq.n	8003382 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x172>
 800335e:	2f02      	cmp	r7, #2
 8003360:	d012      	beq.n	8003388 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x178>
 8003362:	2f03      	cmp	r7, #3
 8003364:	d13b      	bne.n	80033de <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1ce>
 8003366:	fa5f f089 	uxtb.w	r0, r9
 800336a:	3801      	subs	r0, #1
 800336c:	2804      	cmp	r0, #4
 800336e:	d836      	bhi.n	80033de <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1ce>
 8003370:	e8df f000 	tbb	[pc, r0]
 8003374:	221e0d03 	.word	0x221e0d03
 8003378:	0027      	.short	0x0027
 800337a:	f029 09ff 	bic.w	r9, r9, #255	; 0xff
 800337e:	217d      	movs	r1, #125	; 0x7d
 8003380:	e025      	b.n	80033ce <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1be>
 8003382:	2700      	movs	r7, #0
 8003384:	4631      	mov	r1, r6
 8003386:	e023      	b.n	80033d0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1c0>
 8003388:	215c      	movs	r1, #92	; 0x5c
 800338a:	2701      	movs	r7, #1
 800338c:	e020      	b.n	80033d0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1c0>
 800338e:	9a04      	ldr	r2, [sp, #16]
 8003390:	ea0b 0082 	and.w	r0, fp, r2, lsl #2
 8003394:	fa26 f000 	lsr.w	r0, r6, r0
 8003398:	f000 000f 	and.w	r0, r0, #15
 800339c:	f100 0157 	add.w	r1, r0, #87	; 0x57
 80033a0:	280a      	cmp	r0, #10
 80033a2:	bf38      	it	cc
 80033a4:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
 80033a8:	b17a      	cbz	r2, 80033ca <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1ba>
 80033aa:	3a01      	subs	r2, #1
 80033ac:	9204      	str	r2, [sp, #16]
 80033ae:	e00e      	b.n	80033ce <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1be>
 80033b0:	f365 0907 	bfi	r9, r5, #0, #8
 80033b4:	217b      	movs	r1, #123	; 0x7b
 80033b6:	e00a      	b.n	80033ce <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1be>
 80033b8:	2703      	movs	r7, #3
 80033ba:	2175      	movs	r1, #117	; 0x75
 80033bc:	f367 0907 	bfi	r9, r7, #0, #8
 80033c0:	e006      	b.n	80033d0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1c0>
 80033c2:	f368 0907 	bfi	r9, r8, #0, #8
 80033c6:	215c      	movs	r1, #92	; 0x5c
 80033c8:	e001      	b.n	80033ce <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1be>
 80033ca:	f36a 0907 	bfi	r9, sl, #0, #8
 80033ce:	2703      	movs	r7, #3
 80033d0:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 80033d4:	6912      	ldr	r2, [r2, #16]
 80033d6:	4790      	blx	r2
 80033d8:	2800      	cmp	r0, #0
 80033da:	d0be      	beq.n	800335a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x14a>
 80033dc:	e723      	b.n	8003226 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x16>
 80033de:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 80033e2:	690a      	ldr	r2, [r1, #16]
 80033e4:	2127      	movs	r1, #39	; 0x27
 80033e6:	b005      	add	sp, #20
 80033e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ec:	4710      	bx	r2
 80033ee:	f64b 011e 	movw	r1, #47134	; 0xb81e
 80033f2:	f025 0001 	bic.w	r0, r5, #1
 80033f6:	f2c0 0102 	movt	r1, #2
 80033fa:	4288      	cmp	r0, r1
 80033fc:	f43f af9a 	beq.w	8003334 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 8003400:	f645 1029 	movw	r0, #22825	; 0x5929
 8003404:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
 8003408:	4428      	add	r0, r5
 800340a:	2829      	cmp	r0, #41	; 0x29
 800340c:	bf21      	itttt	cs
 800340e:	f644 00cb 	movwcs	r0, #18635	; 0x48cb
 8003412:	f6cf 70fd 	movtcs	r0, #65533	; 0xfffd
 8003416:	4428      	addcs	r0, r5
 8003418:	280a      	cmpcs	r0, #10
 800341a:	f63f af68 	bhi.w	80032ee <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xde>
 800341e:	e789      	b.n	8003334 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>

08003420 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E>:
 8003420:	b580      	push	{r7, lr}
 8003422:	2200      	movs	r2, #0
 8003424:	ebb2 2fd1 	cmp.w	r2, r1, lsr #11
 8003428:	d106      	bne.n	8003438 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0x18>
 800342a:	f06f 0207 	mvn.w	r2, #7
 800342e:	ea02 02d1 	and.w	r2, r2, r1, lsr #3
 8003432:	eb00 0c02 	add.w	ip, r0, r2
 8003436:	e030      	b.n	800349a <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0x7a>
 8003438:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
 800343c:	d110      	bne.n	8003460 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0x40>
 800343e:	f06f 021f 	mvn.w	r2, #31
 8003442:	eb02 1291 	add.w	r2, r2, r1, lsr #6
 8003446:	0953      	lsrs	r3, r2, #5
 8003448:	2b1e      	cmp	r3, #30
 800344a:	d842      	bhi.n	80034d2 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xb2>
 800344c:	4402      	add	r2, r0
 800344e:	f892 3118 	ldrb.w	r3, [r2, #280]	; 0x118
 8003452:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 8003456:	429a      	cmp	r2, r3
 8003458:	d945      	bls.n	80034e6 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xc6>
 800345a:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800345e:	e01a      	b.n	8003496 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0x76>
 8003460:	f06f 020f 	mvn.w	r2, #15
 8003464:	eb02 3211 	add.w	r2, r2, r1, lsr #12
 8003468:	2aff      	cmp	r2, #255	; 0xff
 800346a:	d841      	bhi.n	80034f0 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xd0>
 800346c:	4402      	add	r2, r0
 800346e:	f892 24f8 	ldrb.w	r2, [r2, #1272]	; 0x4f8
 8003472:	f3c1 1385 	ubfx	r3, r1, #6, #6
 8003476:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800347a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800347e:	4293      	cmp	r3, r2
 8003480:	d240      	bcs.n	8003504 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xe4>
 8003482:	f8d0 c108 	ldr.w	ip, [r0, #264]	; 0x108
 8003486:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 800348a:	f81c 3003 	ldrb.w	r3, [ip, r3]
 800348e:	429a      	cmp	r2, r3
 8003490:	d93d      	bls.n	800350e <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xee>
 8003492:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8003496:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
 800349a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800349e:	f04f 0e01 	mov.w	lr, #1
 80034a2:	f1c1 0020 	rsb	r0, r1, #32
 80034a6:	f1a1 0220 	sub.w	r2, r1, #32
 80034aa:	2a00      	cmp	r2, #0
 80034ac:	fa0e f101 	lsl.w	r1, lr, r1
 80034b0:	fa2e f000 	lsr.w	r0, lr, r0
 80034b4:	bfa8      	it	ge
 80034b6:	fa0e f002 	lslge.w	r0, lr, r2
 80034ba:	e9dc c300 	ldrd	ip, r3, [ip]
 80034be:	2a00      	cmp	r2, #0
 80034c0:	bfa8      	it	ge
 80034c2:	2100      	movge	r1, #0
 80034c4:	4018      	ands	r0, r3
 80034c6:	ea01 010c 	and.w	r1, r1, ip
 80034ca:	4308      	orrs	r0, r1
 80034cc:	bf18      	it	ne
 80034ce:	2001      	movne	r0, #1
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	f24e 00f0 	movw	r0, #57584	; 0xe0f0
 80034d6:	4611      	mov	r1, r2
 80034d8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80034dc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80034e0:	f7fe fded 	bl	80020be <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 80034e4:	defe      	udf	#254	; 0xfe
 80034e6:	f24e 1000 	movw	r0, #57600	; 0xe100
 80034ea:	f6c0 0000 	movt	r0, #2048	; 0x800
 80034ee:	e012      	b.n	8003516 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xf6>
 80034f0:	f24e 1010 	movw	r0, #57616	; 0xe110
 80034f4:	4611      	mov	r1, r2
 80034f6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80034fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034fe:	f7fe fdde 	bl	80020be <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 8003502:	defe      	udf	#254	; 0xfe
 8003504:	f24e 1020 	movw	r0, #57632	; 0xe120
 8003508:	f6c0 0000 	movt	r0, #2048	; 0x800
 800350c:	e003      	b.n	8003516 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xf6>
 800350e:	f24e 1030 	movw	r0, #57648	; 0xe130
 8003512:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003516:	4619      	mov	r1, r3
 8003518:	f7fe fdd1 	bl	80020be <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 800351c:	defe      	udf	#254	; 0xfe

0800351e <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E>:
 800351e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003522:	b081      	sub	sp, #4
 8003524:	fa1f fa80 	uxth.w	sl, r0
 8003528:	b3a2      	cbz	r2, 8003594 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x76>
 800352a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800352e:	eb01 0842 	add.w	r8, r1, r2, lsl #1
 8003532:	ea4f 291a 	mov.w	r9, sl, lsr #8
 8003536:	f04f 0e00 	mov.w	lr, #0
 800353a:	784f      	ldrb	r7, [r1, #1]
 800353c:	4672      	mov	r2, lr
 800353e:	780c      	ldrb	r4, [r1, #0]
 8003540:	3102      	adds	r1, #2
 8003542:	44be      	add	lr, r7
 8003544:	454c      	cmp	r4, r9
 8003546:	d122      	bne.n	800358e <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x70>
 8003548:	4596      	cmp	lr, r2
 800354a:	d352      	bcc.n	80035f2 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xd4>
 800354c:	45e6      	cmp	lr, ip
 800354e:	d855      	bhi.n	80035fc <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xde>
 8003550:	189c      	adds	r4, r3, r2
 8003552:	eb04 0b07 	add.w	fp, r4, r7
 8003556:	b1df      	cbz	r7, 8003590 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x72>
 8003558:	4625      	mov	r5, r4
 800355a:	b2c6      	uxtb	r6, r0
 800355c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003560:	42b2      	cmp	r2, r6
 8003562:	d037      	beq.n	80035d4 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xb6>
 8003564:	455d      	cmp	r5, fp
 8003566:	d013      	beq.n	8003590 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x72>
 8003568:	7862      	ldrb	r2, [r4, #1]
 800356a:	42b2      	cmp	r2, r6
 800356c:	d032      	beq.n	80035d4 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xb6>
 800356e:	1ca2      	adds	r2, r4, #2
 8003570:	455a      	cmp	r2, fp
 8003572:	d00d      	beq.n	8003590 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x72>
 8003574:	78a2      	ldrb	r2, [r4, #2]
 8003576:	42b2      	cmp	r2, r6
 8003578:	d02c      	beq.n	80035d4 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xb6>
 800357a:	1ce2      	adds	r2, r4, #3
 800357c:	455a      	cmp	r2, fp
 800357e:	d007      	beq.n	8003590 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x72>
 8003580:	1d22      	adds	r2, r4, #4
 8003582:	78e4      	ldrb	r4, [r4, #3]
 8003584:	3f04      	subs	r7, #4
 8003586:	42b4      	cmp	r4, r6
 8003588:	4614      	mov	r4, r2
 800358a:	d1e4      	bne.n	8003556 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x38>
 800358c:	e022      	b.n	80035d4 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xb6>
 800358e:	d801      	bhi.n	8003594 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x76>
 8003590:	4541      	cmp	r1, r8
 8003592:	d1d2      	bne.n	800353a <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x1c>
 8003594:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003596:	b1f8      	cbz	r0, 80035d8 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xba>
 8003598:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800359a:	1831      	adds	r1, r6, r0
 800359c:	2001      	movs	r0, #1
 800359e:	4632      	mov	r2, r6
 80035a0:	f812 3b01 	ldrb.w	r3, [r2], #1
 80035a4:	b25f      	sxtb	r7, r3
 80035a6:	f1b7 3fff 	cmp.w	r7, #4294967295
 80035aa:	dd01      	ble.n	80035b0 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x92>
 80035ac:	4616      	mov	r6, r2
 80035ae:	e007      	b.n	80035c0 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xa2>
 80035b0:	428a      	cmp	r2, r1
 80035b2:	d017      	beq.n	80035e4 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xc6>
 80035b4:	7873      	ldrb	r3, [r6, #1]
 80035b6:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 80035ba:	3602      	adds	r6, #2
 80035bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80035c0:	ebaa 0a03 	sub.w	sl, sl, r3
 80035c4:	f1ba 0f00 	cmp.w	sl, #0
 80035c8:	db07      	blt.n	80035da <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xbc>
 80035ca:	f080 0001 	eor.w	r0, r0, #1
 80035ce:	428e      	cmp	r6, r1
 80035d0:	d1e5      	bne.n	800359e <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x80>
 80035d2:	e002      	b.n	80035da <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xbc>
 80035d4:	2000      	movs	r0, #0
 80035d6:	e000      	b.n	80035da <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xbc>
 80035d8:	2001      	movs	r0, #1
 80035da:	f000 0001 	and.w	r0, r0, #1
 80035de:	b001      	add	sp, #4
 80035e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e4:	f64d 5020 	movw	r0, #56608	; 0xdd20
 80035e8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80035ec:	f7fe fd4a 	bl	8002084 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 80035f0:	defe      	udf	#254	; 0xfe
 80035f2:	4610      	mov	r0, r2
 80035f4:	4671      	mov	r1, lr
 80035f6:	f7fe feb0 	bl	800235a <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 80035fa:	defe      	udf	#254	; 0xfe
 80035fc:	4670      	mov	r0, lr
 80035fe:	4661      	mov	r1, ip
 8003600:	f7fe fe89 	bl	8002316 <_ZN4core5slice20slice_index_len_fail17hfa6ff34b8fd07644E>
 8003604:	defe      	udf	#254	; 0xfe

08003606 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E>:
 8003606:	b5b0      	push	{r4, r5, r7, lr}
 8003608:	b0a2      	sub	sp, #136	; 0x88
 800360a:	468c      	mov	ip, r1
 800360c:	6809      	ldr	r1, [r1, #0]
 800360e:	06ca      	lsls	r2, r1, #27
 8003610:	d409      	bmi.n	8003626 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x20>
 8003612:	6800      	ldr	r0, [r0, #0]
 8003614:	0689      	lsls	r1, r1, #26
 8003616:	d448      	bmi.n	80036aa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0xa4>
 8003618:	2101      	movs	r1, #1
 800361a:	4662      	mov	r2, ip
 800361c:	b022      	add	sp, #136	; 0x88
 800361e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003622:	f000 ba44 	b.w	8003aae <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>
 8003626:	6800      	ldr	r0, [r0, #0]
 8003628:	f10d 0e08 	add.w	lr, sp, #8
 800362c:	2281      	movs	r2, #129	; 0x81
 800362e:	2300      	movs	r3, #0
 8003630:	f000 010f 	and.w	r1, r0, #15
 8003634:	f101 0457 	add.w	r4, r1, #87	; 0x57
 8003638:	290a      	cmp	r1, #10
 800363a:	bf38      	it	cc
 800363c:	f101 0430 	addcc.w	r4, r1, #48	; 0x30
 8003640:	eb0e 0102 	add.w	r1, lr, r2
 8003644:	ebb3 1f10 	cmp.w	r3, r0, lsr #4
 8003648:	f801 4c02 	strb.w	r4, [r1, #-2]
 800364c:	d071      	beq.n	8003732 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x12c>
 800364e:	0904      	lsrs	r4, r0, #4
 8003650:	f004 040f 	and.w	r4, r4, #15
 8003654:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003658:	2c0a      	cmp	r4, #10
 800365a:	bf38      	it	cc
 800365c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003660:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 8003664:	f801 5c03 	strb.w	r5, [r1, #-3]
 8003668:	d078      	beq.n	800375c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x156>
 800366a:	0a04      	lsrs	r4, r0, #8
 800366c:	f004 040f 	and.w	r4, r4, #15
 8003670:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003674:	2c0a      	cmp	r4, #10
 8003676:	bf38      	it	cc
 8003678:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 800367c:	ebb3 3f10 	cmp.w	r3, r0, lsr #12
 8003680:	f801 5c04 	strb.w	r5, [r1, #-4]
 8003684:	d072      	beq.n	800376c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x166>
 8003686:	0b04      	lsrs	r4, r0, #12
 8003688:	3a04      	subs	r2, #4
 800368a:	f004 040f 	and.w	r4, r4, #15
 800368e:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003692:	2c0a      	cmp	r4, #10
 8003694:	bf38      	it	cc
 8003696:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 800369a:	f801 5c05 	strb.w	r5, [r1, #-5]
 800369e:	0c01      	lsrs	r1, r0, #16
 80036a0:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
 80036a4:	4608      	mov	r0, r1
 80036a6:	d1c3      	bne.n	8003630 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x2a>
 80036a8:	e03f      	b.n	800372a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x124>
 80036aa:	f10d 0e08 	add.w	lr, sp, #8
 80036ae:	2281      	movs	r2, #129	; 0x81
 80036b0:	2300      	movs	r3, #0
 80036b2:	f000 010f 	and.w	r1, r0, #15
 80036b6:	f101 0437 	add.w	r4, r1, #55	; 0x37
 80036ba:	290a      	cmp	r1, #10
 80036bc:	bf38      	it	cc
 80036be:	f101 0430 	addcc.w	r4, r1, #48	; 0x30
 80036c2:	eb0e 0102 	add.w	r1, lr, r2
 80036c6:	ebb3 1f10 	cmp.w	r3, r0, lsr #4
 80036ca:	f801 4c02 	strb.w	r4, [r1, #-2]
 80036ce:	d030      	beq.n	8003732 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x12c>
 80036d0:	0904      	lsrs	r4, r0, #4
 80036d2:	f004 040f 	and.w	r4, r4, #15
 80036d6:	f104 0537 	add.w	r5, r4, #55	; 0x37
 80036da:	2c0a      	cmp	r4, #10
 80036dc:	bf38      	it	cc
 80036de:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 80036e2:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 80036e6:	f801 5c03 	strb.w	r5, [r1, #-3]
 80036ea:	d037      	beq.n	800375c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x156>
 80036ec:	0a04      	lsrs	r4, r0, #8
 80036ee:	f004 040f 	and.w	r4, r4, #15
 80036f2:	f104 0537 	add.w	r5, r4, #55	; 0x37
 80036f6:	2c0a      	cmp	r4, #10
 80036f8:	bf38      	it	cc
 80036fa:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 80036fe:	ebb3 3f10 	cmp.w	r3, r0, lsr #12
 8003702:	f801 5c04 	strb.w	r5, [r1, #-4]
 8003706:	d031      	beq.n	800376c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x166>
 8003708:	0b04      	lsrs	r4, r0, #12
 800370a:	3a04      	subs	r2, #4
 800370c:	f004 040f 	and.w	r4, r4, #15
 8003710:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8003714:	2c0a      	cmp	r4, #10
 8003716:	bf38      	it	cc
 8003718:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 800371c:	f801 5c05 	strb.w	r5, [r1, #-5]
 8003720:	0c01      	lsrs	r1, r0, #16
 8003722:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
 8003726:	4608      	mov	r0, r1
 8003728:	d1c3      	bne.n	80036b2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0xac>
 800372a:	1e50      	subs	r0, r2, #1
 800372c:	2881      	cmp	r0, #129	; 0x81
 800372e:	d305      	bcc.n	800373c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x136>
 8003730:	e018      	b.n	8003764 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x15e>
 8003732:	1e51      	subs	r1, r2, #1
 8003734:	1e90      	subs	r0, r2, #2
 8003736:	460a      	mov	r2, r1
 8003738:	2881      	cmp	r0, #129	; 0x81
 800373a:	d213      	bcs.n	8003764 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x15e>
 800373c:	f1c2 0181 	rsb	r1, r2, #129	; 0x81
 8003740:	f64d 7284 	movw	r2, #57220	; 0xdf84
 8003744:	4470      	add	r0, lr
 8003746:	f6c0 0200 	movt	r2, #2048	; 0x800
 800374a:	e9cd 0100 	strd	r0, r1, [sp]
 800374e:	4660      	mov	r0, ip
 8003750:	2101      	movs	r1, #1
 8003752:	2302      	movs	r3, #2
 8003754:	f7ff fa8c 	bl	8002c70 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8003758:	b022      	add	sp, #136	; 0x88
 800375a:	bdb0      	pop	{r4, r5, r7, pc}
 800375c:	1ed0      	subs	r0, r2, #3
 800375e:	3a02      	subs	r2, #2
 8003760:	2881      	cmp	r0, #129	; 0x81
 8003762:	d3eb      	bcc.n	800373c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x136>
 8003764:	2180      	movs	r1, #128	; 0x80
 8003766:	f7fe fdf8 	bl	800235a <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 800376a:	defe      	udf	#254	; 0xfe
 800376c:	1f10      	subs	r0, r2, #4
 800376e:	3a03      	subs	r2, #3
 8003770:	2881      	cmp	r0, #129	; 0x81
 8003772:	d3e3      	bcc.n	800373c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x136>
 8003774:	e7f6      	b.n	8003764 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x15e>

08003776 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE>:
 8003776:	b580      	push	{r7, lr}
 8003778:	b0a2      	sub	sp, #136	; 0x88
 800377a:	7802      	ldrb	r2, [r0, #0]
 800377c:	468c      	mov	ip, r1
 800377e:	f002 030f 	and.w	r3, r2, #15
 8003782:	f103 0057 	add.w	r0, r3, #87	; 0x57
 8003786:	2b0a      	cmp	r3, #10
 8003788:	bf38      	it	cc
 800378a:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
 800378e:	2300      	movs	r3, #0
 8003790:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8003794:	d00b      	beq.n	80037ae <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE+0x38>
 8003796:	0913      	lsrs	r3, r2, #4
 8003798:	f103 0157 	add.w	r1, r3, #87	; 0x57
 800379c:	2aa0      	cmp	r2, #160	; 0xa0
 800379e:	bf38      	it	cc
 80037a0:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
 80037a4:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 80037a8:	227e      	movs	r2, #126	; 0x7e
 80037aa:	2302      	movs	r3, #2
 80037ac:	e001      	b.n	80037b2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE+0x3c>
 80037ae:	227f      	movs	r2, #127	; 0x7f
 80037b0:	2301      	movs	r3, #1
 80037b2:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
 80037b6:	a802      	add	r0, sp, #8
 80037b8:	4410      	add	r0, r2
 80037ba:	f64d 7284 	movw	r2, #57220	; 0xdf84
 80037be:	e9cd 0300 	strd	r0, r3, [sp]
 80037c2:	f6c0 0200 	movt	r2, #2048	; 0x800
 80037c6:	4660      	mov	r0, ip
 80037c8:	2101      	movs	r1, #1
 80037ca:	2302      	movs	r3, #2
 80037cc:	f7ff fa50 	bl	8002c70 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 80037d0:	b022      	add	sp, #136	; 0x88
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E>:
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b0a2      	sub	sp, #136	; 0x88
 80037d8:	7802      	ldrb	r2, [r0, #0]
 80037da:	468c      	mov	ip, r1
 80037dc:	f002 030f 	and.w	r3, r2, #15
 80037e0:	f103 0037 	add.w	r0, r3, #55	; 0x37
 80037e4:	2b0a      	cmp	r3, #10
 80037e6:	bf38      	it	cc
 80037e8:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
 80037ec:	2300      	movs	r3, #0
 80037ee:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 80037f2:	d00b      	beq.n	800380c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E+0x38>
 80037f4:	0913      	lsrs	r3, r2, #4
 80037f6:	f103 0137 	add.w	r1, r3, #55	; 0x37
 80037fa:	2aa0      	cmp	r2, #160	; 0xa0
 80037fc:	bf38      	it	cc
 80037fe:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
 8003802:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 8003806:	227e      	movs	r2, #126	; 0x7e
 8003808:	2302      	movs	r3, #2
 800380a:	e001      	b.n	8003810 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E+0x3c>
 800380c:	227f      	movs	r2, #127	; 0x7f
 800380e:	2301      	movs	r3, #1
 8003810:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
 8003814:	a802      	add	r0, sp, #8
 8003816:	4410      	add	r0, r2
 8003818:	f64d 7284 	movw	r2, #57220	; 0xdf84
 800381c:	e9cd 0300 	strd	r0, r3, [sp]
 8003820:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003824:	4660      	mov	r0, ip
 8003826:	2101      	movs	r1, #1
 8003828:	2302      	movs	r3, #2
 800382a:	f7ff fa21 	bl	8002c70 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 800382e:	b022      	add	sp, #136	; 0x88
 8003830:	bd80      	pop	{r7, pc}

08003832 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E>:
 8003832:	b5b0      	push	{r4, r5, r7, lr}
 8003834:	b0a2      	sub	sp, #136	; 0x88
 8003836:	6800      	ldr	r0, [r0, #0]
 8003838:	f10d 0e08 	add.w	lr, sp, #8
 800383c:	468c      	mov	ip, r1
 800383e:	2381      	movs	r3, #129	; 0x81
 8003840:	2100      	movs	r1, #0
 8003842:	f000 020f 	and.w	r2, r0, #15
 8003846:	f102 0457 	add.w	r4, r2, #87	; 0x57
 800384a:	2a0a      	cmp	r2, #10
 800384c:	bf38      	it	cc
 800384e:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
 8003852:	eb0e 0203 	add.w	r2, lr, r3
 8003856:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
 800385a:	f802 4c02 	strb.w	r4, [r2, #-2]
 800385e:	d030      	beq.n	80038c2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0x90>
 8003860:	0904      	lsrs	r4, r0, #4
 8003862:	f004 040f 	and.w	r4, r4, #15
 8003866:	f104 0557 	add.w	r5, r4, #87	; 0x57
 800386a:	2c0a      	cmp	r4, #10
 800386c:	bf38      	it	cc
 800386e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003872:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 8003876:	f802 5c03 	strb.w	r5, [r2, #-3]
 800387a:	d028      	beq.n	80038ce <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0x9c>
 800387c:	0a04      	lsrs	r4, r0, #8
 800387e:	f004 040f 	and.w	r4, r4, #15
 8003882:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003886:	2c0a      	cmp	r4, #10
 8003888:	bf38      	it	cc
 800388a:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 800388e:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
 8003892:	f802 5c04 	strb.w	r5, [r2, #-4]
 8003896:	d01f      	beq.n	80038d8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xa6>
 8003898:	0b04      	lsrs	r4, r0, #12
 800389a:	3b04      	subs	r3, #4
 800389c:	f004 040f 	and.w	r4, r4, #15
 80038a0:	f104 0557 	add.w	r5, r4, #87	; 0x57
 80038a4:	2c0a      	cmp	r4, #10
 80038a6:	bf38      	it	cc
 80038a8:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 80038ac:	f802 5c05 	strb.w	r5, [r2, #-5]
 80038b0:	0c02      	lsrs	r2, r0, #16
 80038b2:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
 80038b6:	4610      	mov	r0, r2
 80038b8:	d1c3      	bne.n	8003842 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0x10>
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	2881      	cmp	r0, #129	; 0x81
 80038be:	d30f      	bcc.n	80038e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xae>
 80038c0:	e01e      	b.n	8003900 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xce>
 80038c2:	1e59      	subs	r1, r3, #1
 80038c4:	1e98      	subs	r0, r3, #2
 80038c6:	460b      	mov	r3, r1
 80038c8:	2881      	cmp	r0, #129	; 0x81
 80038ca:	d309      	bcc.n	80038e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xae>
 80038cc:	e018      	b.n	8003900 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xce>
 80038ce:	1ed8      	subs	r0, r3, #3
 80038d0:	3b02      	subs	r3, #2
 80038d2:	2881      	cmp	r0, #129	; 0x81
 80038d4:	d304      	bcc.n	80038e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xae>
 80038d6:	e013      	b.n	8003900 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xce>
 80038d8:	1f18      	subs	r0, r3, #4
 80038da:	3b03      	subs	r3, #3
 80038dc:	2881      	cmp	r0, #129	; 0x81
 80038de:	d20f      	bcs.n	8003900 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xce>
 80038e0:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
 80038e4:	f64d 7284 	movw	r2, #57220	; 0xdf84
 80038e8:	4470      	add	r0, lr
 80038ea:	f6c0 0200 	movt	r2, #2048	; 0x800
 80038ee:	e9cd 0100 	strd	r0, r1, [sp]
 80038f2:	4660      	mov	r0, ip
 80038f4:	2101      	movs	r1, #1
 80038f6:	2302      	movs	r3, #2
 80038f8:	f7ff f9ba 	bl	8002c70 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 80038fc:	b022      	add	sp, #136	; 0x88
 80038fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003900:	2180      	movs	r1, #128	; 0x80
 8003902:	f7fe fd2a 	bl	800235a <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8003906:	defe      	udf	#254	; 0xfe

08003908 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E>:
 8003908:	b5b0      	push	{r4, r5, r7, lr}
 800390a:	b0a2      	sub	sp, #136	; 0x88
 800390c:	6800      	ldr	r0, [r0, #0]
 800390e:	f10d 0e08 	add.w	lr, sp, #8
 8003912:	468c      	mov	ip, r1
 8003914:	2381      	movs	r3, #129	; 0x81
 8003916:	2100      	movs	r1, #0
 8003918:	f000 020f 	and.w	r2, r0, #15
 800391c:	f102 0437 	add.w	r4, r2, #55	; 0x37
 8003920:	2a0a      	cmp	r2, #10
 8003922:	bf38      	it	cc
 8003924:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
 8003928:	eb0e 0203 	add.w	r2, lr, r3
 800392c:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
 8003930:	f802 4c02 	strb.w	r4, [r2, #-2]
 8003934:	d030      	beq.n	8003998 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0x90>
 8003936:	0904      	lsrs	r4, r0, #4
 8003938:	f004 040f 	and.w	r4, r4, #15
 800393c:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8003940:	2c0a      	cmp	r4, #10
 8003942:	bf38      	it	cc
 8003944:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003948:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 800394c:	f802 5c03 	strb.w	r5, [r2, #-3]
 8003950:	d028      	beq.n	80039a4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0x9c>
 8003952:	0a04      	lsrs	r4, r0, #8
 8003954:	f004 040f 	and.w	r4, r4, #15
 8003958:	f104 0537 	add.w	r5, r4, #55	; 0x37
 800395c:	2c0a      	cmp	r4, #10
 800395e:	bf38      	it	cc
 8003960:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003964:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
 8003968:	f802 5c04 	strb.w	r5, [r2, #-4]
 800396c:	d01f      	beq.n	80039ae <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xa6>
 800396e:	0b04      	lsrs	r4, r0, #12
 8003970:	3b04      	subs	r3, #4
 8003972:	f004 040f 	and.w	r4, r4, #15
 8003976:	f104 0537 	add.w	r5, r4, #55	; 0x37
 800397a:	2c0a      	cmp	r4, #10
 800397c:	bf38      	it	cc
 800397e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003982:	f802 5c05 	strb.w	r5, [r2, #-5]
 8003986:	0c02      	lsrs	r2, r0, #16
 8003988:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
 800398c:	4610      	mov	r0, r2
 800398e:	d1c3      	bne.n	8003918 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0x10>
 8003990:	1e58      	subs	r0, r3, #1
 8003992:	2881      	cmp	r0, #129	; 0x81
 8003994:	d30f      	bcc.n	80039b6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xae>
 8003996:	e01e      	b.n	80039d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xce>
 8003998:	1e59      	subs	r1, r3, #1
 800399a:	1e98      	subs	r0, r3, #2
 800399c:	460b      	mov	r3, r1
 800399e:	2881      	cmp	r0, #129	; 0x81
 80039a0:	d309      	bcc.n	80039b6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xae>
 80039a2:	e018      	b.n	80039d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xce>
 80039a4:	1ed8      	subs	r0, r3, #3
 80039a6:	3b02      	subs	r3, #2
 80039a8:	2881      	cmp	r0, #129	; 0x81
 80039aa:	d304      	bcc.n	80039b6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xae>
 80039ac:	e013      	b.n	80039d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xce>
 80039ae:	1f18      	subs	r0, r3, #4
 80039b0:	3b03      	subs	r3, #3
 80039b2:	2881      	cmp	r0, #129	; 0x81
 80039b4:	d20f      	bcs.n	80039d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xce>
 80039b6:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
 80039ba:	f64d 7284 	movw	r2, #57220	; 0xdf84
 80039be:	4470      	add	r0, lr
 80039c0:	f6c0 0200 	movt	r2, #2048	; 0x800
 80039c4:	e9cd 0100 	strd	r0, r1, [sp]
 80039c8:	4660      	mov	r0, ip
 80039ca:	2101      	movs	r1, #1
 80039cc:	2302      	movs	r3, #2
 80039ce:	f7ff f94f 	bl	8002c70 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 80039d2:	b022      	add	sp, #136	; 0x88
 80039d4:	bdb0      	pop	{r4, r5, r7, pc}
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	f7fe fcbf 	bl	800235a <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 80039dc:	defe      	udf	#254	; 0xfe

080039de <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E>:
 80039de:	b510      	push	{r4, lr}
 80039e0:	b0a2      	sub	sp, #136	; 0x88
 80039e2:	468c      	mov	ip, r1
 80039e4:	e9d0 2100 	ldrd	r2, r1, [r0]
 80039e8:	f10d 0e08 	add.w	lr, sp, #8
 80039ec:	237f      	movs	r3, #127	; 0x7f
 80039ee:	1c58      	adds	r0, r3, #1
 80039f0:	d013      	beq.n	8003a1a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E+0x3c>
 80039f2:	f002 000f 	and.w	r0, r2, #15
 80039f6:	f100 0457 	add.w	r4, r0, #87	; 0x57
 80039fa:	280a      	cmp	r0, #10
 80039fc:	bf38      	it	cc
 80039fe:	f100 0430 	addcc.w	r4, r0, #48	; 0x30
 8003a02:	0910      	lsrs	r0, r2, #4
 8003a04:	ea40 7201 	orr.w	r2, r0, r1, lsl #28
 8003a08:	f80e 4003 	strb.w	r4, [lr, r3]
 8003a0c:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
 8003a10:	3b01      	subs	r3, #1
 8003a12:	0909      	lsrs	r1, r1, #4
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d1ea      	bne.n	80039ee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E+0x10>
 8003a18:	1c58      	adds	r0, r3, #1
 8003a1a:	2881      	cmp	r0, #129	; 0x81
 8003a1c:	d20f      	bcs.n	8003a3e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E+0x60>
 8003a1e:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
 8003a22:	f64d 7284 	movw	r2, #57220	; 0xdf84
 8003a26:	4470      	add	r0, lr
 8003a28:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003a2c:	e9cd 0100 	strd	r0, r1, [sp]
 8003a30:	4660      	mov	r0, ip
 8003a32:	2101      	movs	r1, #1
 8003a34:	2302      	movs	r3, #2
 8003a36:	f7ff f91b 	bl	8002c70 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8003a3a:	b022      	add	sp, #136	; 0x88
 8003a3c:	bd10      	pop	{r4, pc}
 8003a3e:	2180      	movs	r1, #128	; 0x80
 8003a40:	f7fe fc8b 	bl	800235a <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8003a44:	defe      	udf	#254	; 0xfe

08003a46 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E>:
 8003a46:	b510      	push	{r4, lr}
 8003a48:	b0a2      	sub	sp, #136	; 0x88
 8003a4a:	468c      	mov	ip, r1
 8003a4c:	e9d0 2100 	ldrd	r2, r1, [r0]
 8003a50:	f10d 0e08 	add.w	lr, sp, #8
 8003a54:	237f      	movs	r3, #127	; 0x7f
 8003a56:	1c58      	adds	r0, r3, #1
 8003a58:	d013      	beq.n	8003a82 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E+0x3c>
 8003a5a:	f002 000f 	and.w	r0, r2, #15
 8003a5e:	f100 0437 	add.w	r4, r0, #55	; 0x37
 8003a62:	280a      	cmp	r0, #10
 8003a64:	bf38      	it	cc
 8003a66:	f100 0430 	addcc.w	r4, r0, #48	; 0x30
 8003a6a:	0910      	lsrs	r0, r2, #4
 8003a6c:	ea40 7201 	orr.w	r2, r0, r1, lsl #28
 8003a70:	f80e 4003 	strb.w	r4, [lr, r3]
 8003a74:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	0909      	lsrs	r1, r1, #4
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d1ea      	bne.n	8003a56 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E+0x10>
 8003a80:	1c58      	adds	r0, r3, #1
 8003a82:	2881      	cmp	r0, #129	; 0x81
 8003a84:	d20f      	bcs.n	8003aa6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E+0x60>
 8003a86:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
 8003a8a:	f64d 7284 	movw	r2, #57220	; 0xdf84
 8003a8e:	4470      	add	r0, lr
 8003a90:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003a94:	e9cd 0100 	strd	r0, r1, [sp]
 8003a98:	4660      	mov	r0, ip
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	f7ff f8e7 	bl	8002c70 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8003aa2:	b022      	add	sp, #136	; 0x88
 8003aa4:	bd10      	pop	{r4, pc}
 8003aa6:	2180      	movs	r1, #128	; 0x80
 8003aa8:	f7fe fc57 	bl	800235a <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8003aac:	defe      	udf	#254	; 0xfe

08003aae <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>:
 8003aae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab2:	b08f      	sub	sp, #60	; 0x3c
 8003ab4:	4617      	mov	r7, r2
 8003ab6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003aba:	4290      	cmp	r0, r2
 8003abc:	d346      	bcc.n	8003b4c <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0x9e>
 8003abe:	f241 7959 	movw	r9, #5977	; 0x1759
 8003ac2:	f248 5a1f 	movw	sl, #34079	; 0x851f
 8003ac6:	f64d 7686 	movw	r6, #57222	; 0xdf86
 8003aca:	f24e 08ff 	movw	r8, #57599	; 0xe0ff
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
 8003ad4:	f2c5 1aeb 	movt	sl, #20971	; 0x51eb
 8003ad8:	f6c0 0600 	movt	r6, #2048	; 0x800
 8003adc:	f04f 0b64 	mov.w	fp, #100	; 0x64
 8003ae0:	f2c0 58f5 	movt	r8, #1525	; 0x5f5
 8003ae4:	e9cd 1703 	strd	r1, r7, [sp, #12]
 8003ae8:	fba0 4709 	umull	r4, r7, r0, r9
 8003aec:	f10d 0115 	add.w	r1, sp, #21
 8003af0:	18cd      	adds	r5, r1, r3
 8003af2:	3b04      	subs	r3, #4
 8003af4:	4540      	cmp	r0, r8
 8003af6:	ea4f 3457 	mov.w	r4, r7, lsr #13
 8003afa:	fb04 0712 	mls	r7, r4, r2, r0
 8003afe:	4620      	mov	r0, r4
 8003b00:	fba7 ce0a 	umull	ip, lr, r7, sl
 8003b04:	ea4f 115e 	mov.w	r1, lr, lsr #5
 8003b08:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 8003b0c:	fb01 711b 	mls	r1, r1, fp, r7
 8003b10:	f8a5 2023 	strh.w	r2, [r5, #35]	; 0x23
 8003b14:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b18:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8003b1c:	f8a5 1025 	strh.w	r1, [r5, #37]	; 0x25
 8003b20:	d8e2      	bhi.n	8003ae8 <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0x3a>
 8003b22:	e9dd 1703 	ldrd	r1, r7, [sp, #12]
 8003b26:	f103 0227 	add.w	r2, r3, #39	; 0x27
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	2863      	cmp	r0, #99	; 0x63
 8003b2e:	dc10      	bgt.n	8003b52 <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0xa4>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b09      	cmp	r3, #9
 8003b34:	dd25      	ble.n	8003b82 <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0xd4>
 8003b36:	f64d 7086 	movw	r0, #57222	; 0xdf86
 8003b3a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003b3e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8003b42:	1e90      	subs	r0, r2, #2
 8003b44:	f10d 0215 	add.w	r2, sp, #21
 8003b48:	5213      	strh	r3, [r2, r0]
 8003b4a:	e01f      	b.n	8003b8c <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0xde>
 8003b4c:	2227      	movs	r2, #39	; 0x27
 8003b4e:	2863      	cmp	r0, #99	; 0x63
 8003b50:	ddee      	ble.n	8003b30 <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0x82>
 8003b52:	f248 531f 	movw	r3, #34079	; 0x851f
 8003b56:	b286      	uxth	r6, r0
 8003b58:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003b5c:	3a02      	subs	r2, #2
 8003b5e:	fba6 6303 	umull	r6, r3, r6, r3
 8003b62:	2664      	movs	r6, #100	; 0x64
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	fb03 0016 	mls	r0, r3, r6, r0
 8003b6a:	f64d 7686 	movw	r6, #57222	; 0xdf86
 8003b6e:	f6c0 0600 	movt	r6, #2048	; 0x800
 8003b72:	b280      	uxth	r0, r0
 8003b74:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8003b78:	f10d 0615 	add.w	r6, sp, #21
 8003b7c:	52b0      	strh	r0, [r6, r2]
 8003b7e:	2b09      	cmp	r3, #9
 8003b80:	dcd9      	bgt.n	8003b36 <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0x88>
 8003b82:	1e50      	subs	r0, r2, #1
 8003b84:	f10d 0215 	add.w	r2, sp, #21
 8003b88:	3330      	adds	r3, #48	; 0x30
 8003b8a:	5413      	strb	r3, [r2, r0]
 8003b8c:	f1c0 0327 	rsb	r3, r0, #39	; 0x27
 8003b90:	f10d 0215 	add.w	r2, sp, #21
 8003b94:	4410      	add	r0, r2
 8003b96:	f64d 3264 	movw	r2, #56164	; 0xdb64
 8003b9a:	e9cd 0300 	strd	r0, r3, [sp]
 8003b9e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003ba2:	4638      	mov	r0, r7
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f7ff f863 	bl	8002c70 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8003baa:	b00f      	add	sp, #60	; 0x3c
 8003bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003bb0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h4a5378243facc467E>:
 8003bb0:	7800      	ldrb	r0, [r0, #0]
 8003bb2:	460a      	mov	r2, r1
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	f7ff bf7a 	b.w	8003aae <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>

08003bba <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h8362f63c9a899390E>:
 8003bba:	6800      	ldr	r0, [r0, #0]
 8003bbc:	460a      	mov	r2, r1
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003bc4:	bfc8      	it	gt
 8003bc6:	2101      	movgt	r1, #1
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	bf48      	it	mi
 8003bcc:	4240      	negmi	r0, r0
 8003bce:	f7ff bf6e 	b.w	8003aae <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>

08003bd2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h490cd499cca46fe6E>:
 8003bd2:	6800      	ldr	r0, [r0, #0]
 8003bd4:	460a      	mov	r2, r1
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	f7ff bf69 	b.w	8003aae <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>

08003bdc <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E>:
 8003bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be0:	b08f      	sub	sp, #60	; 0x3c
 8003be2:	4606      	mov	r6, r0
 8003be4:	f242 7010 	movw	r0, #10000	; 0x2710
 8003be8:	1a30      	subs	r0, r6, r0
 8003bea:	461d      	mov	r5, r3
 8003bec:	4614      	mov	r4, r2
 8003bee:	f171 0000 	sbcs.w	r0, r1, #0
 8003bf2:	d34c      	bcc.n	8003c8e <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0xb2>
 8003bf4:	f64d 7886 	movw	r8, #57222	; 0xdf86
 8003bf8:	f24e 0bff 	movw	fp, #57599	; 0xe0ff
 8003bfc:	460f      	mov	r7, r1
 8003bfe:	f6c0 0800 	movt	r8, #2048	; 0x800
 8003c02:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003c06:	f2c0 5bf5 	movt	fp, #1525	; 0x5f5
 8003c0a:	f04f 0a00 	mov.w	sl, #0
 8003c0e:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8003c12:	4630      	mov	r0, r6
 8003c14:	4639      	mov	r1, r7
 8003c16:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f009 fb6e 	bl	800d2fc <__aeabi_uldivmod>
 8003c20:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c24:	f248 531f 	movw	r3, #34079	; 0x851f
 8003c28:	fb00 6212 	mls	r2, r0, r2, r6
 8003c2c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003c30:	f10d 0515 	add.w	r5, sp, #21
 8003c34:	4455      	add	r5, sl
 8003c36:	f1aa 0a04 	sub.w	sl, sl, #4
 8003c3a:	fba2 3403 	umull	r3, r4, r2, r3
 8003c3e:	0963      	lsrs	r3, r4, #5
 8003c40:	fb03 2219 	mls	r2, r3, r9, r2
 8003c44:	f838 4013 	ldrh.w	r4, [r8, r3, lsl #1]
 8003c48:	f8a5 4023 	strh.w	r4, [r5, #35]	; 0x23
 8003c4c:	f838 2012 	ldrh.w	r2, [r8, r2, lsl #1]
 8003c50:	f8a5 2025 	strh.w	r2, [r5, #37]	; 0x25
 8003c54:	ebbb 0206 	subs.w	r2, fp, r6
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	4606      	mov	r6, r0
 8003c5e:	41ba      	sbcs	r2, r7
 8003c60:	460f      	mov	r7, r1
 8003c62:	d3d6      	bcc.n	8003c12 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0x36>
 8003c64:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
 8003c68:	f10a 0127 	add.w	r1, sl, #39	; 0x27
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	2e63      	cmp	r6, #99	; 0x63
 8003c70:	dc10      	bgt.n	8003c94 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0xb8>
 8003c72:	4630      	mov	r0, r6
 8003c74:	2809      	cmp	r0, #9
 8003c76:	dd25      	ble.n	8003cc4 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0xe8>
 8003c78:	f64d 7286 	movw	r2, #57222	; 0xdf86
 8003c7c:	3902      	subs	r1, #2
 8003c7e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003c82:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
 8003c86:	f10d 0215 	add.w	r2, sp, #21
 8003c8a:	5250      	strh	r0, [r2, r1]
 8003c8c:	e01f      	b.n	8003cce <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0xf2>
 8003c8e:	2127      	movs	r1, #39	; 0x27
 8003c90:	2e63      	cmp	r6, #99	; 0x63
 8003c92:	ddee      	ble.n	8003c72 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0x96>
 8003c94:	f248 521f 	movw	r2, #34079	; 0x851f
 8003c98:	b2b0      	uxth	r0, r6
 8003c9a:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
 8003c9e:	f64d 7386 	movw	r3, #57222	; 0xdf86
 8003ca2:	fba0 0202 	umull	r0, r2, r0, r2
 8003ca6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003caa:	3902      	subs	r1, #2
 8003cac:	0950      	lsrs	r0, r2, #5
 8003cae:	2264      	movs	r2, #100	; 0x64
 8003cb0:	fb00 6212 	mls	r2, r0, r2, r6
 8003cb4:	b292      	uxth	r2, r2
 8003cb6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003cba:	f10d 0315 	add.w	r3, sp, #21
 8003cbe:	525a      	strh	r2, [r3, r1]
 8003cc0:	2809      	cmp	r0, #9
 8003cc2:	dcd9      	bgt.n	8003c78 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0x9c>
 8003cc4:	3901      	subs	r1, #1
 8003cc6:	f10d 0215 	add.w	r2, sp, #21
 8003cca:	3030      	adds	r0, #48	; 0x30
 8003ccc:	5450      	strb	r0, [r2, r1]
 8003cce:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
 8003cd2:	f10d 0215 	add.w	r2, sp, #21
 8003cd6:	4411      	add	r1, r2
 8003cd8:	f64d 3264 	movw	r2, #56164	; 0xdb64
 8003cdc:	e9cd 1000 	strd	r1, r0, [sp]
 8003ce0:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f7fe ffc1 	bl	8002c70 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8003cee:	b00f      	add	sp, #60	; 0x3c
 8003cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003cf4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17hf1595badf4d53d6dE>:
 8003cf4:	468c      	mov	ip, r1
 8003cf6:	e9d0 0100 	ldrd	r0, r1, [r0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f1b1 3fff 	cmp.w	r1, #4294967295
 8003d00:	bfc8      	it	gt
 8003d02:	2201      	movgt	r2, #1
 8003d04:	eb10 70e1 	adds.w	r0, r0, r1, asr #31
 8003d08:	eb41 73e1 	adc.w	r3, r1, r1, asr #31
 8003d0c:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 8003d10:	ea83 71e1 	eor.w	r1, r3, r1, asr #31
 8003d14:	4663      	mov	r3, ip
 8003d16:	f7ff bf61 	b.w	8003bdc <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E>

08003d1a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h8430cdf27e8fe239E>:
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	e9d0 1200 	ldrd	r1, r2, [r0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff b8e2 	b.w	8002eea <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E>
	...

08003d28 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
 8003d28:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <__semihost+0x20>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	b143      	cbz	r3, 8003d40 <__semihost+0x18>
static int __semihost(int command, void* message) {
 8003d2e:	b410      	push	{r4}
 8003d30:	4602      	mov	r2, r0
 8003d32:	460c      	mov	r4, r1
    __asm( 
 8003d34:	4610      	mov	r0, r2
 8003d36:	4621      	mov	r1, r4
 8003d38:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
 8003d3a:	2000      	movs	r0, #0
}
 8003d3c:	bc10      	pop	{r4}
 8003d3e:	4770      	bx	lr
    if (!log_enabled) return -1;
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000130 	.word	0x20000130

08003d4c <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
 8003d4c:	4b02      	ldr	r3, [pc, #8]	; (8003d58 <debugger_connected+0xc>)
 8003d4e:	6818      	ldr	r0, [r3, #0]
}
 8003d50:	f000 0001 	and.w	r0, r0, #1
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	e000edf0 	.word	0xe000edf0

08003d5c <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
 8003d5c:	b570      	push	{r4, r5, r6, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	4606      	mov	r6, r0
 8003d62:	460d      	mov	r5, r1
 8003d64:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING
    return 0;
#else
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
 8003d66:	f7ff fff1 	bl	8003d4c <debugger_connected>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	b108      	cbz	r0, 8003d72 <semihost_write+0x16>
    if (length == 0) { return 0; }
 8003d6e:	b91c      	cbnz	r4, 8003d78 <semihost_write+0x1c>
 8003d70:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	b004      	add	sp, #16
 8003d76:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
 8003d78:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
 8003d7a:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
 8003d7c:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
 8003d7e:	a901      	add	r1, sp, #4
 8003d80:	2005      	movs	r0, #5
 8003d82:	f7ff ffd1 	bl	8003d28 <__semihost>
 8003d86:	4603      	mov	r3, r0
 8003d88:	e7f3      	b.n	8003d72 <semihost_write+0x16>
	...

08003d8c <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
 8003d8c:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <console_flush+0x3c>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	b1bb      	cbz	r3, 8003dc4 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <console_flush+0x40>)
 8003d96:	681d      	ldr	r5, [r3, #0]
 8003d98:	b1a5      	cbz	r5, 8003dc4 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <console_flush+0x44>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
 8003da2:	b97b      	cbnz	r3, 8003dc4 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
 8003da4:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <console_flush+0x40>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
 8003daa:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
 8003dac:	e005      	b.n	8003dba <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
 8003dae:	88e2      	ldrh	r2, [r4, #6]
 8003db0:	6821      	ldr	r1, [r4, #0]
 8003db2:	2002      	movs	r0, #2
 8003db4:	f7ff ffd2 	bl	8003d5c <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
 8003db8:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
 8003dba:	2c00      	cmp	r4, #0
 8003dbc:	d1f7      	bne.n	8003dae <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f002 fc4a 	bl	8006658 <os_mbuf_free_chain>
}
 8003dc4:	bd38      	pop	{r3, r4, r5, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000130 	.word	0x20000130
 8003dcc:	20000250 	.word	0x20000250
 8003dd0:	e000ed00 	.word	0xe000ed00

08003dd4 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
 8003dd4:	b508      	push	{r3, lr}
 8003dd6:	f7ff ffd9 	bl	8003d8c <console_flush>
 8003dda:	bd08      	pop	{r3, pc}

08003ddc <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
 8003ddc:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
 8003dde:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <console_buffer+0x4c>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	b903      	cbnz	r3, 8003de6 <console_buffer+0xa>
    //  Limit the buffer size.  Quit if too big.
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
}
 8003de4:	bd38      	pop	{r3, r4, r5, pc}
 8003de6:	460d      	mov	r5, r1
 8003de8:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
 8003dea:	f7ff ffaf 	bl	8003d4c <debugger_connected>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d0f8      	beq.n	8003de4 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
 8003df2:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <console_buffer+0x50>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	b173      	cbz	r3, 8003e16 <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <console_buffer+0x50>)
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	f002 fc3e 	bl	800667c <os_mbuf_len>
 8003e00:	4428      	add	r0, r5
 8003e02:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8003e06:	d2ed      	bcs.n	8003de4 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
 8003e08:	b2aa      	uxth	r2, r5
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <console_buffer+0x50>)
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	f002 fc3e 	bl	8006690 <os_mbuf_append>
 8003e14:	e7e6      	b.n	8003de4 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
 8003e16:	2100      	movs	r1, #0
 8003e18:	b2a8      	uxth	r0, r5
 8003e1a:	f002 fea7 	bl	8006b6c <os_msys_get_pkthdr>
 8003e1e:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <console_buffer+0x50>)
 8003e20:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
 8003e22:	2800      	cmp	r0, #0
 8003e24:	d1e8      	bne.n	8003df8 <console_buffer+0x1c>
 8003e26:	e7dd      	b.n	8003de4 <console_buffer+0x8>
 8003e28:	20000130 	.word	0x20000130
 8003e2c:	20000250 	.word	0x20000250

08003e30 <semihosting_console_write_ch>:
	//  Append "length" number of bytes from "buffer" to the output buffer in hex format.
    if (buffer == NULL || len == 0) { return; }
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
}

static void semihosting_console_write_ch(char c) {
 8003e30:	b500      	push	{lr}
 8003e32:	b083      	sub	sp, #12
 8003e34:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
 8003e38:	280d      	cmp	r0, #13
 8003e3a:	d004      	beq.n	8003e46 <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	f10d 0007 	add.w	r0, sp, #7
 8003e42:	f7ff ffcb 	bl	8003ddc <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
 8003e46:	b003      	add	sp, #12
 8003e48:	f85d fb04 	ldr.w	pc, [sp], #4

08003e4c <console_printhex>:
void console_printhex(uint8_t v) {
 8003e4c:	b510      	push	{r4, lr}
 8003e4e:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 8003e50:	2310      	movs	r3, #16
    int length = 0;
 8003e52:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 8003e54:	e005      	b.n	8003e62 <console_printhex+0x16>
        v = v % divisor;
 8003e56:	fbb0 f1f3 	udiv	r1, r0, r3
 8003e5a:	fb03 0011 	mls	r0, r3, r1, r0
 8003e5e:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	b18b      	cbz	r3, 8003e88 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
 8003e64:	fbb0 f4f3 	udiv	r4, r0, r3
 8003e68:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8003e6c:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8003e6e:	2939      	cmp	r1, #57	; 0x39
 8003e70:	d902      	bls.n	8003e78 <console_printhex+0x2c>
 8003e72:	f104 0157 	add.w	r1, r4, #87	; 0x57
 8003e76:	b2c9      	uxtb	r1, r1
            if (length < size) {
 8003e78:	2a02      	cmp	r2, #2
 8003e7a:	dcec      	bgt.n	8003e56 <console_printhex+0xa>
                buffer[length++] = digit;
 8003e7c:	ac02      	add	r4, sp, #8
 8003e7e:	4414      	add	r4, r2
 8003e80:	f804 1c04 	strb.w	r1, [r4, #-4]
 8003e84:	3201      	adds	r2, #1
 8003e86:	e7e6      	b.n	8003e56 <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
 8003e88:	b92a      	cbnz	r2, 8003e96 <console_printhex+0x4a>
 8003e8a:	ab02      	add	r3, sp, #8
 8003e8c:	4413      	add	r3, r2
 8003e8e:	2130      	movs	r1, #48	; 0x30
 8003e90:	f803 1c04 	strb.w	r1, [r3, #-4]
 8003e94:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
 8003e96:	2a02      	cmp	r2, #2
 8003e98:	dc04      	bgt.n	8003ea4 <console_printhex+0x58>
 8003e9a:	ab02      	add	r3, sp, #8
 8003e9c:	441a      	add	r2, r3
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
 8003eaa:	a801      	add	r0, sp, #4
 8003eac:	f003 fc68 	bl	8007780 <strlen>
 8003eb0:	4601      	mov	r1, r0
 8003eb2:	a801      	add	r0, sp, #4
 8003eb4:	f7ff ff92 	bl	8003ddc <console_buffer>
}
 8003eb8:	b002      	add	sp, #8
 8003eba:	bd10      	pop	{r4, pc}

08003ebc <console_dump>:
    if (buffer == NULL || len == 0) { return; }
 8003ebc:	b180      	cbz	r0, 8003ee0 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
 8003ebe:	b570      	push	{r4, r5, r6, lr}
 8003ec0:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
 8003ec2:	b161      	cbz	r1, 8003ede <console_dump+0x22>
 8003ec4:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
 8003ec6:	2400      	movs	r4, #0
 8003ec8:	e007      	b.n	8003eda <console_dump+0x1e>
 8003eca:	5d30      	ldrb	r0, [r6, r4]
 8003ecc:	f7ff ffbe 	bl	8003e4c <console_printhex>
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4804      	ldr	r0, [pc, #16]	; (8003ee4 <console_dump+0x28>)
 8003ed4:	f7ff ff82 	bl	8003ddc <console_buffer>
 8003ed8:	3401      	adds	r4, #1
 8003eda:	42ac      	cmp	r4, r5
 8003edc:	d3f5      	bcc.n	8003eca <console_dump+0xe>
}
 8003ede:	bd70      	pop	{r4, r5, r6, pc}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	0800f668 	.word	0x0800f668

08003ee8 <console_out_nolock>:

int console_out_nolock(int character) {
 8003ee8:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
 8003eea:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <console_out_nolock+0x34>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	b953      	cbnz	r3, 8003f08 <console_out_nolock+0x20>
 8003ef2:	4604      	mov	r4, r0
    if ('\n' == c) {
 8003ef4:	2d0a      	cmp	r5, #10
 8003ef6:	d009      	beq.n	8003f0c <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <console_out_nolock+0x38>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
 8003efe:	4628      	mov	r0, r5
 8003f00:	f7ff ff96 	bl	8003e30 <semihosting_console_write_ch>
    return character;
 8003f04:	4620      	mov	r0, r4
}
 8003f06:	bd38      	pop	{r3, r4, r5, pc}
 8003f08:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
 8003f0a:	e7fc      	b.n	8003f06 <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
 8003f0c:	200d      	movs	r0, #13
 8003f0e:	f7ff ff8f 	bl	8003e30 <semihosting_console_write_ch>
        console_is_midline = 0;
 8003f12:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <console_out_nolock+0x38>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	e7f1      	b.n	8003efe <console_out_nolock+0x16>
 8003f1a:	bf00      	nop
 8003f1c:	20002da5 	.word	0x20002da5
 8003f20:	20002da0 	.word	0x20002da0

08003f24 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
 8003f24:	2000      	movs	r0, #0
 8003f26:	4770      	bx	lr

08003f28 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	4606      	mov	r6, r0
 8003f2c:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
 8003f2e:	2400      	movs	r4, #0
 8003f30:	42ac      	cmp	r4, r5
 8003f32:	da07      	bge.n	8003f44 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
 8003f34:	5d30      	ldrb	r0, [r6, r4]
 8003f36:	f7ff ffd7 	bl	8003ee8 <console_out_nolock>
 8003f3a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f3e:	d001      	beq.n	8003f44 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
 8003f40:	3401      	adds	r4, #1
 8003f42:	e7f5      	b.n	8003f30 <console_write+0x8>
    }
}
 8003f44:	bd70      	pop	{r4, r5, r6, pc}

08003f46 <console_blocking_mode>:

void console_blocking_mode(void) {
 8003f46:	b508      	push	{r3, lr}
    disable_buffer();
 8003f48:	f7ff ff44 	bl	8003dd4 <disable_buffer>
}
 8003f4c:	bd08      	pop	{r3, pc}
	...

08003f50 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
 8003f50:	b510      	push	{r4, lr}
 8003f52:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 8003f54:	4b0d      	ldr	r3, [pc, #52]	; (8003f8c <console_pkg_init+0x3c>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b193      	cbz	r3, 8003f80 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
 8003f5a:	480d      	ldr	r0, [pc, #52]	; (8003f90 <console_pkg_init+0x40>)
 8003f5c:	f002 fa5e 	bl	800641c <os_eventq_init>
    os_mutex_init(&console_write_lock);
 8003f60:	480c      	ldr	r0, [pc, #48]	; (8003f94 <console_pkg_init+0x44>)
 8003f62:	f002 fe2d 	bl	8006bc0 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
 8003f66:	f7ff ffdd 	bl	8003f24 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
 8003f6a:	b138      	cbz	r0, 8003f7c <console_pkg_init+0x2c>
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	9000      	str	r0, [sp, #0]
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <console_pkg_init+0x48>)
 8003f72:	681c      	ldr	r4, [r3, #0]
 8003f74:	4603      	mov	r3, r0
 8003f76:	4602      	mov	r2, r0
 8003f78:	4601      	mov	r1, r0
 8003f7a:	47a0      	blx	r4
}
 8003f7c:	b002      	add	sp, #8
 8003f7e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
 8003f80:	461a      	mov	r2, r3
 8003f82:	4619      	mov	r1, r3
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 ff35 	bl	8005df4 <__assert_func>
 8003f8a:	bf00      	nop
 8003f8c:	20002e28 	.word	0x20002e28
 8003f90:	20000254 	.word	0x20000254
 8003f94:	20000264 	.word	0x20000264
 8003f98:	20000148 	.word	0x20000148

08003f9c <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
 8003f9c:	b40f      	push	{r0, r1, r2, r3}
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
 8003fa2:	f000 f81f 	bl	8003fe4 <console_get_ticks>
 8003fa6:	b160      	cbz	r0, 8003fc2 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <console_printf+0x40>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	b10b      	cbz	r3, 8003fb2 <console_printf+0x16>
    num_chars = 0;
 8003fae:	2400      	movs	r4, #0
 8003fb0:	e008      	b.n	8003fc4 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
 8003fb2:	f003 f9f7 	bl	80073a4 <os_time_get>
 8003fb6:	4601      	mov	r1, r0
 8003fb8:	4809      	ldr	r0, [pc, #36]	; (8003fe0 <console_printf+0x44>)
 8003fba:	f003 fe93 	bl	8007ce4 <printf>
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	e000      	b.n	8003fc4 <console_printf+0x28>
    num_chars = 0;
 8003fc2:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
 8003fc4:	a905      	add	r1, sp, #20
 8003fc6:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
 8003fc8:	9804      	ldr	r0, [sp, #16]
 8003fca:	f003 febb 	bl	8007d44 <vprintf>
    va_end(args);

    return num_chars;
}
 8003fce:	4420      	add	r0, r4
 8003fd0:	b002      	add	sp, #8
 8003fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fd6:	b004      	add	sp, #16
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20002da0 	.word	0x20002da0
 8003fe0:	0800f258 	.word	0x0800f258

08003fe4 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
 8003fe4:	4b01      	ldr	r3, [pc, #4]	; (8003fec <console_get_ticks+0x8>)
 8003fe6:	7818      	ldrb	r0, [r3, #0]
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000270 	.word	0x20000270

08003ff0 <handle_coap_response>:
bool sensor_coap_ready(void) {
    return oc_sensor_coap_ready;
}

///  Handle CoAP response.
static void handle_coap_response(oc_client_response_t *data) {
 8003ff0:	b508      	push	{r3, lr}
    console_printf("handle_coap\n");
 8003ff2:	4802      	ldr	r0, [pc, #8]	; (8003ffc <handle_coap_response+0xc>)
 8003ff4:	f7ff ffd2 	bl	8003f9c <console_printf>
}
 8003ff8:	bd08      	pop	{r3, pc}
 8003ffa:	bf00      	nop
 8003ffc:	0800f260 	.word	0x0800f260

08004000 <json_write_mbuf>:
struct json_value coap_json_value;
///  The mbuf that contains the outgoing CoAP payload.
static struct os_mbuf *coap_json_mbuf;  

///  Write the JSON to the mbuf for the outgoing CoAP message.
int json_write_mbuf(void *buf, char *data, int len) {
 8004000:	b508      	push	{r3, lr}
    if (oc_content_format != APPLICATION_JSON) { return 0; }  //  Exit if we are encoding CBOR, not JSON.
 8004002:	4b10      	ldr	r3, [pc, #64]	; (8004044 <json_write_mbuf+0x44>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b32      	cmp	r3, #50	; 0x32
 8004008:	d001      	beq.n	800400e <json_write_mbuf+0xe>
    assert(data);
    //  console_printf("json "); console_buffer(data, len); console_printf("\n");  ////
    int rc = os_mbuf_append(coap_json_mbuf, data, len);  assert(rc == 0);
    if (rc) { return -1; }
    return 0;
}
 800400a:	2000      	movs	r0, #0
 800400c:	bd08      	pop	{r3, pc}
    assert(coap_json_mbuf);
 800400e:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <json_write_mbuf+0x48>)
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	b158      	cbz	r0, 800402c <json_write_mbuf+0x2c>
    assert(data);
 8004014:	b181      	cbz	r1, 8004038 <json_write_mbuf+0x38>
    int rc = os_mbuf_append(coap_json_mbuf, data, len);  assert(rc == 0);
 8004016:	b292      	uxth	r2, r2
 8004018:	f002 fb3a 	bl	8006690 <os_mbuf_append>
 800401c:	2800      	cmp	r0, #0
 800401e:	d0f4      	beq.n	800400a <json_write_mbuf+0xa>
 8004020:	2300      	movs	r3, #0
 8004022:	461a      	mov	r2, r3
 8004024:	4619      	mov	r1, r3
 8004026:	4618      	mov	r0, r3
 8004028:	f001 fee4 	bl	8005df4 <__assert_func>
    assert(coap_json_mbuf);
 800402c:	2300      	movs	r3, #0
 800402e:	461a      	mov	r2, r3
 8004030:	4619      	mov	r1, r3
 8004032:	4618      	mov	r0, r3
 8004034:	f001 fede 	bl	8005df4 <__assert_func>
    assert(data);
 8004038:	2300      	movs	r3, #0
 800403a:	461a      	mov	r2, r3
 800403c:	4619      	mov	r1, r3
 800403e:	4618      	mov	r0, r3
 8004040:	f001 fed8 	bl	8005df4 <__assert_func>
 8004044:	200002ec 	.word	0x200002ec
 8004048:	20000274 	.word	0x20000274

0800404c <init_sensor_coap>:
void init_sensor_coap(void) {
 800404c:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
 800404e:	2101      	movs	r1, #1
 8004050:	4806      	ldr	r0, [pc, #24]	; (800406c <init_sensor_coap+0x20>)
 8004052:	f003 f83f 	bl	80070d4 <os_sem_init>
    assert(rc == OS_OK);
 8004056:	b918      	cbnz	r0, 8004060 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <init_sensor_coap+0x24>)
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
}
 800405e:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
 8004060:	2300      	movs	r3, #0
 8004062:	461a      	mov	r2, r3
 8004064:	4619      	mov	r1, r3
 8004066:	4618      	mov	r0, r3
 8004068:	f001 fec4 	bl	8005df4 <__assert_func>
 800406c:	200002f0 	.word	0x200002f0
 8004070:	200002f8 	.word	0x200002f8

08004074 <init_sensor_post>:
{
 8004074:	b508      	push	{r3, lr}
    assert(oc_sensor_coap_ready);  assert(server);
 8004076:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <init_sensor_post+0x3c>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	b143      	cbz	r3, 800408e <init_sensor_post+0x1a>
 800407c:	b160      	cbz	r0, 8004098 <init_sensor_post+0x24>
    os_error_t rc = os_sem_pend(&oc_sem, OS_TIMEOUT_NEVER);  //  Allow only 1 task to be creating a sensor request at any time.
 800407e:	f04f 31ff 	mov.w	r1, #4294967295
 8004082:	480c      	ldr	r0, [pc, #48]	; (80040b4 <init_sensor_post+0x40>)
 8004084:	f003 f860 	bl	8007148 <os_sem_pend>
    assert(rc == OS_OK);
 8004088:	b960      	cbnz	r0, 80040a4 <init_sensor_post+0x30>
}
 800408a:	2001      	movs	r0, #1
 800408c:	bd08      	pop	{r3, pc}
    assert(oc_sensor_coap_ready);  assert(server);
 800408e:	461a      	mov	r2, r3
 8004090:	4619      	mov	r1, r3
 8004092:	4618      	mov	r0, r3
 8004094:	f001 feae 	bl	8005df4 <__assert_func>
 8004098:	2300      	movs	r3, #0
 800409a:	461a      	mov	r2, r3
 800409c:	4619      	mov	r1, r3
 800409e:	4618      	mov	r0, r3
 80040a0:	f001 fea8 	bl	8005df4 <__assert_func>
    assert(rc == OS_OK);
 80040a4:	2300      	movs	r3, #0
 80040a6:	461a      	mov	r2, r3
 80040a8:	4619      	mov	r1, r3
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 fea2 	bl	8005df4 <__assert_func>
 80040b0:	200002f8 	.word	0x200002f8
 80040b4:	200002f0 	.word	0x200002f0

080040b8 <json_rep_reset>:
    cbor_encoder_init(&g_encoder, &cnt_writer.enc, 0);
#endif  //  MYNEWT_VAL(COAP_CBOR_ENCODING) && MYNEWT_VAL(COAP_JSON_ENCODING)
}

///  Close the current JSON CoAP payload.  Erase the JSON encoder.
void json_rep_reset(void) {
 80040b8:	b510      	push	{r4, lr}
    coap_json_mbuf = NULL;
 80040ba:	2100      	movs	r1, #0
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <json_rep_reset+0x1c>)
 80040be:	6019      	str	r1, [r3, #0]
    memset(&coap_json_encoder, 0, sizeof(coap_json_encoder));  //  Erase the encoder.
 80040c0:	4c05      	ldr	r4, [pc, #20]	; (80040d8 <json_rep_reset+0x20>)
 80040c2:	2248      	movs	r2, #72	; 0x48
 80040c4:	4620      	mov	r0, r4
 80040c6:	f003 fb32 	bl	800772e <memset>
    coap_json_encoder.je_write = json_write_mbuf;
 80040ca:	4b04      	ldr	r3, [pc, #16]	; (80040dc <json_rep_reset+0x24>)
 80040cc:	f844 3c04 	str.w	r3, [r4, #-4]
}
 80040d0:	bd10      	pop	{r4, pc}
 80040d2:	bf00      	nop
 80040d4:	20000274 	.word	0x20000274
 80040d8:	20002dac 	.word	0x20002dac
 80040dc:	08004001 	.word	0x08004001

080040e0 <json_rep_new>:
void json_rep_new(struct os_mbuf *m) {
 80040e0:	b510      	push	{r4, lr}
    assert(m);
 80040e2:	b128      	cbz	r0, 80040f0 <json_rep_new+0x10>
 80040e4:	4604      	mov	r4, r0
    json_rep_reset();  //  Erase the JSON encoder.
 80040e6:	f7ff ffe7 	bl	80040b8 <json_rep_reset>
    coap_json_mbuf = m;
 80040ea:	4b04      	ldr	r3, [pc, #16]	; (80040fc <json_rep_new+0x1c>)
 80040ec:	601c      	str	r4, [r3, #0]
}
 80040ee:	bd10      	pop	{r4, pc}
    assert(m);
 80040f0:	2300      	movs	r3, #0
 80040f2:	461a      	mov	r2, r3
 80040f4:	4619      	mov	r1, r3
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 fe7c 	bl	8005df4 <__assert_func>
 80040fc:	20000274 	.word	0x20000274

08004100 <prepare_coap_request>:
{
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	4604      	mov	r4, r0
 8004104:	460e      	mov	r6, r1
    oc_c_rsp = os_msys_get_pkthdr(0, 0);
 8004106:	2100      	movs	r1, #0
 8004108:	4608      	mov	r0, r1
 800410a:	f002 fd2f 	bl	8006b6c <os_msys_get_pkthdr>
 800410e:	4b31      	ldr	r3, [pc, #196]	; (80041d4 <prepare_coap_request+0xd4>)
 8004110:	6018      	str	r0, [r3, #0]
    if (!oc_c_rsp) {
 8004112:	2800      	cmp	r0, #0
 8004114:	d05b      	beq.n	80041ce <prepare_coap_request+0xce>
    oc_c_message = oc_allocate_mbuf(&cb->server.endpoint);
 8004116:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800411a:	f000 fc27 	bl	800496c <oc_allocate_mbuf>
 800411e:	4b2e      	ldr	r3, [pc, #184]	; (80041d8 <prepare_coap_request+0xd8>)
 8004120:	6018      	str	r0, [r3, #0]
    if (!oc_c_message) {
 8004122:	2800      	cmp	r0, #0
 8004124:	d04c      	beq.n	80041c0 <prepare_coap_request+0xc0>
    if (oc_content_format == APPLICATION_JSON) { 
 8004126:	4b2d      	ldr	r3, [pc, #180]	; (80041dc <prepare_coap_request+0xdc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b32      	cmp	r3, #50	; 0x32
 800412c:	d027      	beq.n	800417e <prepare_coap_request+0x7e>
    else if (oc_content_format == APPLICATION_CBOR) { 
 800412e:	2b3c      	cmp	r3, #60	; 0x3c
 8004130:	d12a      	bne.n	8004188 <prepare_coap_request+0x88>
    coap_init_message(oc_c_request, type, cb->method, cb->mid);
 8004132:	4d2b      	ldr	r5, [pc, #172]	; (80041e0 <prepare_coap_request+0xe0>)
 8004134:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004136:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 800413a:	2101      	movs	r1, #1
 800413c:	4628      	mov	r0, r5
 800413e:	f000 fe07 	bl	8004d50 <coap_init_message>
    coap_set_header_accept(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
 8004142:	4b26      	ldr	r3, [pc, #152]	; (80041dc <prepare_coap_request+0xdc>)
 8004144:	6819      	ldr	r1, [r3, #0]
 8004146:	4628      	mov	r0, r5
 8004148:	f000 ffd6 	bl	80050f8 <coap_set_header_accept>
    coap_set_token(oc_c_request, cb->token, cb->token_len);
 800414c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8004150:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8004154:	4628      	mov	r0, r5
 8004156:	f000 ffbc 	bl	80050d2 <coap_set_token>
    coap_set_header_uri_path(oc_c_request, oc_string(cb->uri));
 800415a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800415c:	4628      	mov	r0, r5
 800415e:	f000 ffd2 	bl	8005106 <coap_set_header_uri_path>
    if (cb->observe_seq != -1) {
 8004162:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004164:	f1b1 3fff 	cmp.w	r1, #4294967295
 8004168:	d114      	bne.n	8004194 <prepare_coap_request+0x94>
    if (query && oc_string_len(*query)) {
 800416a:	b116      	cbz	r6, 8004172 <prepare_coap_request+0x72>
 800416c:	8833      	ldrh	r3, [r6, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d814      	bhi.n	800419c <prepare_coap_request+0x9c>
    if (cb->observe_seq == -1 && cb->qos == LOW_QOS) {
 8004172:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d015      	beq.n	80041a6 <prepare_coap_request+0xa6>
    return true;
 800417a:	2001      	movs	r0, #1
 800417c:	e028      	b.n	80041d0 <prepare_coap_request+0xd0>
        json_rep_new(oc_c_rsp); 
 800417e:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <prepare_coap_request+0xd4>)
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	f7ff ffad 	bl	80040e0 <json_rep_new>
 8004186:	e7d4      	b.n	8004132 <prepare_coap_request+0x32>
    else { assert(0); }  //  Unknown CoAP content format.
 8004188:	2300      	movs	r3, #0
 800418a:	461a      	mov	r2, r3
 800418c:	4619      	mov	r1, r3
 800418e:	4618      	mov	r0, r3
 8004190:	f001 fe30 	bl	8005df4 <__assert_func>
        coap_set_header_observe(oc_c_request, cb->observe_seq);
 8004194:	4628      	mov	r0, r5
 8004196:	f000 ffdb 	bl	8005150 <coap_set_header_observe>
 800419a:	e7e6      	b.n	800416a <prepare_coap_request+0x6a>
        coap_set_header_uri_query(oc_c_request, oc_string(*query));
 800419c:	6871      	ldr	r1, [r6, #4]
 800419e:	4810      	ldr	r0, [pc, #64]	; (80041e0 <prepare_coap_request+0xe0>)
 80041a0:	f000 ffc3 	bl	800512a <coap_set_header_uri_query>
 80041a4:	e7e5      	b.n	8004172 <prepare_coap_request+0x72>
    if (cb->observe_seq == -1 && cb->qos == LOW_QOS) {
 80041a6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d001      	beq.n	80041b2 <prepare_coap_request+0xb2>
    return true;
 80041ae:	2001      	movs	r0, #1
 80041b0:	e00e      	b.n	80041d0 <prepare_coap_request+0xd0>
        os_callout_reset(&cb->callout,
 80041b2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80041b6:	1d20      	adds	r0, r4, #4
 80041b8:	f001 ffc6 	bl	8006148 <os_callout_reset>
    return true;
 80041bc:	2001      	movs	r0, #1
 80041be:	e007      	b.n	80041d0 <prepare_coap_request+0xd0>
    os_mbuf_free_chain(oc_c_rsp);
 80041c0:	4c04      	ldr	r4, [pc, #16]	; (80041d4 <prepare_coap_request+0xd4>)
 80041c2:	6820      	ldr	r0, [r4, #0]
 80041c4:	f002 fa48 	bl	8006658 <os_mbuf_free_chain>
    oc_c_rsp = NULL;
 80041c8:	2000      	movs	r0, #0
 80041ca:	6020      	str	r0, [r4, #0]
    return false;
 80041cc:	e000      	b.n	80041d0 <prepare_coap_request+0xd0>
        return false;
 80041ce:	2000      	movs	r0, #0
}
 80041d0:	bd70      	pop	{r4, r5, r6, pc}
 80041d2:	bf00      	nop
 80041d4:	200002e8 	.word	0x200002e8
 80041d8:	20000278 	.word	0x20000278
 80041dc:	200002ec 	.word	0x200002ec
 80041e0:	2000027c 	.word	0x2000027c

080041e4 <prepare_sensor_post>:
{
 80041e4:	b510      	push	{r4, lr}
 80041e6:	b082      	sub	sp, #8
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <prepare_sensor_post+0x70>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	b1a3      	cbz	r3, 8004218 <prepare_sensor_post+0x34>
 80041ee:	460c      	mov	r4, r1
 80041f0:	b1b8      	cbz	r0, 8004222 <prepare_sensor_post+0x3e>
 80041f2:	b1e1      	cbz	r1, 800422e <prepare_sensor_post+0x4a>
    if (coap_content_format == 0) { coap_content_format = COAP_CONTENT_FORMAT; }
 80041f4:	b902      	cbnz	r2, 80041f8 <prepare_sensor_post+0x14>
 80041f6:	2232      	movs	r2, #50	; 0x32
    oc_content_format = coap_content_format;
 80041f8:	4b17      	ldr	r3, [pc, #92]	; (8004258 <prepare_sensor_post+0x74>)
 80041fa:	601a      	str	r2, [r3, #0]
    cb = oc_ri_alloc_client_cb(uri, server, OC_POST, handler, qos);
 80041fc:	2301      	movs	r3, #1
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	4b16      	ldr	r3, [pc, #88]	; (800425c <prepare_sensor_post+0x78>)
 8004202:	2202      	movs	r2, #2
 8004204:	4601      	mov	r1, r0
 8004206:	4620      	mov	r0, r4
 8004208:	f000 fc5a 	bl	8004ac0 <oc_ri_alloc_client_cb>
    if (!cb) {
 800420c:	b1a8      	cbz	r0, 800423a <prepare_sensor_post+0x56>
    status = prepare_coap_request(cb, NULL);
 800420e:	2100      	movs	r1, #0
 8004210:	f7ff ff76 	bl	8004100 <prepare_coap_request>
}
 8004214:	b002      	add	sp, #8
 8004216:	bd10      	pop	{r4, pc}
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 8004218:	461a      	mov	r2, r3
 800421a:	4619      	mov	r1, r3
 800421c:	4618      	mov	r0, r3
 800421e:	f001 fde9 	bl	8005df4 <__assert_func>
 8004222:	2300      	movs	r3, #0
 8004224:	461a      	mov	r2, r3
 8004226:	4619      	mov	r1, r3
 8004228:	4618      	mov	r0, r3
 800422a:	f001 fde3 	bl	8005df4 <__assert_func>
 800422e:	2300      	movs	r3, #0
 8004230:	461a      	mov	r2, r3
 8004232:	4619      	mov	r1, r3
 8004234:	4618      	mov	r0, r3
 8004236:	f001 fddd 	bl	8005df4 <__assert_func>
        os_error_t rc = os_sem_release(&oc_sem);  //  Failed.  Release the semaphore.
 800423a:	4809      	ldr	r0, [pc, #36]	; (8004260 <prepare_sensor_post+0x7c>)
 800423c:	f002 ff52 	bl	80070e4 <os_sem_release>
        assert(rc == OS_OK);
 8004240:	b908      	cbnz	r0, 8004246 <prepare_sensor_post+0x62>
        return false;
 8004242:	2000      	movs	r0, #0
 8004244:	e7e6      	b.n	8004214 <prepare_sensor_post+0x30>
        assert(rc == OS_OK);
 8004246:	2300      	movs	r3, #0
 8004248:	461a      	mov	r2, r3
 800424a:	4619      	mov	r1, r3
 800424c:	4618      	mov	r0, r3
 800424e:	f001 fdd1 	bl	8005df4 <__assert_func>
 8004252:	bf00      	nop
 8004254:	200002f8 	.word	0x200002f8
 8004258:	200002ec 	.word	0x200002ec
 800425c:	08003ff1 	.word	0x08003ff1
 8004260:	200002f0 	.word	0x200002f0

08004264 <json_rep_finalize>:

///  Finalise the payload and return the payload size.
int json_rep_finalize(void) {
 8004264:	b538      	push	{r3, r4, r5, lr}
    assert(coap_json_mbuf);
 8004266:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <json_rep_finalize+0x44>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	b13b      	cbz	r3, 800427c <json_rep_finalize+0x18>
    int size = OS_MBUF_PKTLEN(coap_json_mbuf);
 800426c:	8a1d      	ldrh	r5, [r3, #16]
#define DUMP_COAP
#ifdef DUMP_COAP
    console_printf("NET payload size %d\n", size); struct os_mbuf *m = coap_json_mbuf;
 800426e:	4629      	mov	r1, r5
 8004270:	480e      	ldr	r0, [pc, #56]	; (80042ac <json_rep_finalize+0x48>)
 8004272:	f7ff fe93 	bl	8003f9c <console_printf>
 8004276:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <json_rep_finalize+0x44>)
 8004278:	681c      	ldr	r4, [r3, #0]
    while (m) {
 800427a:	e00c      	b.n	8004296 <json_rep_finalize+0x32>
    assert(coap_json_mbuf);
 800427c:	461a      	mov	r2, r3
 800427e:	4619      	mov	r1, r3
 8004280:	4618      	mov	r0, r3
 8004282:	f001 fdb7 	bl	8005df4 <__assert_func>
        console_buffer((const char *) (m->om_databuf + m->om_pkthdr_len), m->om_len);
 8004286:	f104 0010 	add.w	r0, r4, #16
 800428a:	7963      	ldrb	r3, [r4, #5]
 800428c:	88e1      	ldrh	r1, [r4, #6]
 800428e:	4418      	add	r0, r3
 8004290:	f7ff fda4 	bl	8003ddc <console_buffer>
        m = m->om_next.sle_next;
 8004294:	68e4      	ldr	r4, [r4, #12]
    while (m) {
 8004296:	2c00      	cmp	r4, #0
 8004298:	d1f5      	bne.n	8004286 <json_rep_finalize+0x22>
    } console_printf("\n");
 800429a:	4805      	ldr	r0, [pc, #20]	; (80042b0 <json_rep_finalize+0x4c>)
 800429c:	f7ff fe7e 	bl	8003f9c <console_printf>
#endif  //  DUMP_COAP

    json_rep_reset();
 80042a0:	f7ff ff0a 	bl	80040b8 <json_rep_reset>
    return size;
}
 80042a4:	4628      	mov	r0, r5
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	20000274 	.word	0x20000274
 80042ac:	0800f270 	.word	0x0800f270
 80042b0:	0800f75c 	.word	0x0800f75c

080042b4 <dispatch_coap_request>:
{
 80042b4:	b510      	push	{r4, lr}
    assert(oc_content_format);
 80042b6:	4b24      	ldr	r3, [pc, #144]	; (8004348 <dispatch_coap_request+0x94>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	b31b      	cbz	r3, 8004304 <dispatch_coap_request+0x50>
        (oc_content_format == APPLICATION_JSON) ? json_rep_finalize() :
 80042bc:	2b32      	cmp	r3, #50	; 0x32
 80042be:	d026      	beq.n	800430e <dispatch_coap_request+0x5a>
        os_mbuf_free_chain(oc_c_rsp);
 80042c0:	4b22      	ldr	r3, [pc, #136]	; (800434c <dispatch_coap_request+0x98>)
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	f002 f9c8 	bl	8006658 <os_mbuf_free_chain>
    oc_c_rsp = NULL;
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <dispatch_coap_request+0x98>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
    if (oc_c_message) {
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <dispatch_coap_request+0x9c>)
 80042d0:	6819      	ldr	r1, [r3, #0]
 80042d2:	2900      	cmp	r1, #0
 80042d4:	d030      	beq.n	8004338 <dispatch_coap_request+0x84>
        if (!coap_serialize_message(oc_c_request, oc_c_message)) {
 80042d6:	481f      	ldr	r0, [pc, #124]	; (8004354 <dispatch_coap_request+0xa0>)
 80042d8:	f000 fd48 	bl	8004d6c <coap_serialize_message>
 80042dc:	bb38      	cbnz	r0, 800432e <dispatch_coap_request+0x7a>
            coap_send_message(oc_c_message, 0);
 80042de:	2100      	movs	r1, #0
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <dispatch_coap_request+0x9c>)
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	f000 feea 	bl	80050bc <coap_send_message>
        oc_ri_remove_client_cb_by_mid(oc_c_request->mid);
 80042e8:	4b1a      	ldr	r3, [pc, #104]	; (8004354 <dispatch_coap_request+0xa0>)
 80042ea:	8898      	ldrh	r0, [r3, #4]
 80042ec:	f000 fbd8 	bl	8004aa0 <oc_ri_remove_client_cb_by_mid>
        oc_c_message = NULL;
 80042f0:	4b17      	ldr	r3, [pc, #92]	; (8004350 <dispatch_coap_request+0x9c>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
        ret = true;
 80042f6:	2401      	movs	r4, #1
    os_error_t rc = os_sem_release(&oc_sem);  //  Request completed.  Release the semaphore for another request.
 80042f8:	4817      	ldr	r0, [pc, #92]	; (8004358 <dispatch_coap_request+0xa4>)
 80042fa:	f002 fef3 	bl	80070e4 <os_sem_release>
    assert(rc == OS_OK);
 80042fe:	b9e8      	cbnz	r0, 800433c <dispatch_coap_request+0x88>
}
 8004300:	4620      	mov	r0, r4
 8004302:	bd10      	pop	{r4, pc}
    assert(oc_content_format);
 8004304:	461a      	mov	r2, r3
 8004306:	4619      	mov	r1, r3
 8004308:	4618      	mov	r0, r3
 800430a:	f001 fd73 	bl	8005df4 <__assert_func>
        (oc_content_format == APPLICATION_JSON) ? json_rep_finalize() :
 800430e:	f7ff ffa9 	bl	8004264 <json_rep_finalize>
    if (response_length) {
 8004312:	4603      	mov	r3, r0
 8004314:	2800      	cmp	r0, #0
 8004316:	d0d3      	beq.n	80042c0 <dispatch_coap_request+0xc>
        oc_c_request->payload_m = oc_c_rsp;
 8004318:	480e      	ldr	r0, [pc, #56]	; (8004354 <dispatch_coap_request+0xa0>)
 800431a:	4a0c      	ldr	r2, [pc, #48]	; (800434c <dispatch_coap_request+0x98>)
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	6682      	str	r2, [r0, #104]	; 0x68
        oc_c_request->payload_len = response_length;
 8004320:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
        coap_set_header_content_format(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
 8004324:	4b08      	ldr	r3, [pc, #32]	; (8004348 <dispatch_coap_request+0x94>)
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	f000 fedf 	bl	80050ea <coap_set_header_content_format>
 800432c:	e7cc      	b.n	80042c8 <dispatch_coap_request+0x14>
            os_mbuf_free_chain(oc_c_message);
 800432e:	4b08      	ldr	r3, [pc, #32]	; (8004350 <dispatch_coap_request+0x9c>)
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	f002 f991 	bl	8006658 <os_mbuf_free_chain>
 8004336:	e7d7      	b.n	80042e8 <dispatch_coap_request+0x34>
    bool ret = false;
 8004338:	2400      	movs	r4, #0
 800433a:	e7dd      	b.n	80042f8 <dispatch_coap_request+0x44>
    assert(rc == OS_OK);
 800433c:	2300      	movs	r3, #0
 800433e:	461a      	mov	r2, r3
 8004340:	4619      	mov	r1, r3
 8004342:	4618      	mov	r0, r3
 8004344:	f001 fd56 	bl	8005df4 <__assert_func>
 8004348:	200002ec 	.word	0x200002ec
 800434c:	200002e8 	.word	0x200002e8
 8004350:	20000278 	.word	0x20000278
 8004354:	2000027c 	.word	0x2000027c
 8004358:	200002f0 	.word	0x200002f0

0800435c <do_sensor_post>:
{
 800435c:	b508      	push	{r3, lr}
    return dispatch_coap_request();
 800435e:	f7ff ffa9 	bl	80042b4 <dispatch_coap_request>
}
 8004362:	bd08      	pop	{r3, pc}

08004364 <json_rep_start_root_object>:

/// Start the JSON representation.  Assume top level is object.
/// ```
/// --> {
/// ```
void json_rep_start_root_object(void) {
 8004364:	b508      	push	{r3, lr}
    int rc = json_encode_object_start(&coap_json_encoder);  assert(rc == 0);
 8004366:	4805      	ldr	r0, [pc, #20]	; (800437c <json_rep_start_root_object+0x18>)
 8004368:	f000 ffac 	bl	80052c4 <json_encode_object_start>
 800436c:	b900      	cbnz	r0, 8004370 <json_rep_start_root_object+0xc>
}
 800436e:	bd08      	pop	{r3, pc}
    int rc = json_encode_object_start(&coap_json_encoder);  assert(rc == 0);
 8004370:	2300      	movs	r3, #0
 8004372:	461a      	mov	r2, r3
 8004374:	4619      	mov	r1, r3
 8004376:	4618      	mov	r0, r3
 8004378:	f001 fd3c 	bl	8005df4 <__assert_func>
 800437c:	20002da8 	.word	0x20002da8

08004380 <json_rep_end_root_object>:

///  End the JSON representation.  Assume top level is object.
///  ```
///  {... --> {...}
///  ```
void json_rep_end_root_object(void) {
 8004380:	b508      	push	{r3, lr}
    int rc = json_encode_object_finish(&coap_json_encoder);  assert(rc == 0);
 8004382:	4805      	ldr	r0, [pc, #20]	; (8004398 <json_rep_end_root_object+0x18>)
 8004384:	f001 f91c 	bl	80055c0 <json_encode_object_finish>
 8004388:	b900      	cbnz	r0, 800438c <json_rep_end_root_object+0xc>
}
 800438a:	bd08      	pop	{r3, pc}
    int rc = json_encode_object_finish(&coap_json_encoder);  assert(rc == 0);
 800438c:	2300      	movs	r3, #0
 800438e:	461a      	mov	r2, r3
 8004390:	4619      	mov	r1, r3
 8004392:	4618      	mov	r0, r3
 8004394:	f001 fd2e 	bl	8005df4 <__assert_func>
 8004398:	20002da8 	.word	0x20002da8

0800439c <sensor_network_register_transport>:
    int rc = sensor_network_register_transport(i);
    assert(rc == 0);
    return rc;
}

int sensor_network_register_transport(uint8_t iface_type) {
 800439c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439e:	b083      	sub	sp, #12
    //  Register the Network Interface as the network transport for CoAP Server or CoAP Collector.
    //  Return 0 if successful.
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 80043a0:	2801      	cmp	r0, #1
 80043a2:	d838      	bhi.n	8004416 <sensor_network_register_transport+0x7a>
 80043a4:	4604      	mov	r4, r0
    struct sensor_network_interface *iface = &sensor_network_interfaces[iface_type];
    if (iface->transport_registered) { return 0; }  //  Quit if transport already registered and endpoint has been created.
 80043a6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80043aa:	009a      	lsls	r2, r3, #2
 80043ac:	4b26      	ldr	r3, [pc, #152]	; (8004448 <sensor_network_register_transport+0xac>)
 80043ae:	4413      	add	r3, r2
 80043b0:	7c1b      	ldrb	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d146      	bne.n	8004444 <sensor_network_register_transport+0xa8>

    void *endpoint = &sensor_network_endpoints[iface_type];
 80043b6:	4e25      	ldr	r6, [pc, #148]	; (800444c <sensor_network_register_transport+0xb0>)
 80043b8:	eb06 1600 	add.w	r6, r6, r0, lsl #4
    //  If endpoint has not been created, register the transport for the interface and create the endpoint.
    assert(iface->network_device);  assert(iface->register_transport_func);
 80043bc:	4b22      	ldr	r3, [pc, #136]	; (8004448 <sensor_network_register_transport+0xac>)
 80043be:	4413      	add	r3, r2
 80043c0:	685d      	ldr	r5, [r3, #4]
 80043c2:	b375      	cbz	r5, 8004422 <sensor_network_register_transport+0x86>
 80043c4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80043c8:	009a      	lsls	r2, r3, #2
 80043ca:	4b1f      	ldr	r3, [pc, #124]	; (8004448 <sensor_network_register_transport+0xac>)
 80043cc:	4413      	add	r3, r2
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	b36b      	cbz	r3, 800442e <sensor_network_register_transport+0x92>
    const char *network_device = iface->network_device;
    console_printf("%s%s %s\n", _net, sensor_network_shortname[iface_type], network_device);
 80043d2:	462b      	mov	r3, r5
 80043d4:	4a1e      	ldr	r2, [pc, #120]	; (8004450 <sensor_network_register_transport+0xb4>)
 80043d6:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80043da:	491e      	ldr	r1, [pc, #120]	; (8004454 <sensor_network_register_transport+0xb8>)
 80043dc:	481e      	ldr	r0, [pc, #120]	; (8004458 <sensor_network_register_transport+0xbc>)
 80043de:	f7ff fddd 	bl	8003f9c <console_printf>

    //  TODO: Host and port are not needed for Collector.
    int rc = iface->register_transport_func(network_device, endpoint, COAP_HOST, MYNEWT_VAL(COAP_PORT), MAX_ENDPOINT_SIZE);
 80043e2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80043e6:	009a      	lsls	r2, r3, #2
 80043e8:	4b17      	ldr	r3, [pc, #92]	; (8004448 <sensor_network_register_transport+0xac>)
 80043ea:	4413      	add	r3, r2
 80043ec:	68df      	ldr	r7, [r3, #12]
 80043ee:	2310      	movs	r3, #16
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	f241 6333 	movw	r3, #5683	; 0x1633
 80043f6:	4a19      	ldr	r2, [pc, #100]	; (800445c <sensor_network_register_transport+0xc0>)
 80043f8:	4631      	mov	r1, r6
 80043fa:	4628      	mov	r0, r5
 80043fc:	47b8      	blx	r7
    assert(rc == 0);
 80043fe:	4602      	mov	r2, r0
 8004400:	b9d0      	cbnz	r0, 8004438 <sensor_network_register_transport+0x9c>
    iface->transport_registered = 1;
 8004402:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004406:	00a1      	lsls	r1, r4, #2
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <sensor_network_register_transport+0xac>)
 800440a:	440b      	add	r3, r1
 800440c:	2101      	movs	r1, #1
 800440e:	7419      	strb	r1, [r3, #16]
    return rc;
}
 8004410:	4610      	mov	r0, r2
 8004412:	b003      	add	sp, #12
 8004414:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 8004416:	2300      	movs	r3, #0
 8004418:	461a      	mov	r2, r3
 800441a:	4619      	mov	r1, r3
 800441c:	4618      	mov	r0, r3
 800441e:	f001 fce9 	bl	8005df4 <__assert_func>
    assert(iface->network_device);  assert(iface->register_transport_func);
 8004422:	2300      	movs	r3, #0
 8004424:	461a      	mov	r2, r3
 8004426:	4619      	mov	r1, r3
 8004428:	4618      	mov	r0, r3
 800442a:	f001 fce3 	bl	8005df4 <__assert_func>
 800442e:	461a      	mov	r2, r3
 8004430:	4619      	mov	r1, r3
 8004432:	4618      	mov	r0, r3
 8004434:	f001 fcde 	bl	8005df4 <__assert_func>
    assert(rc == 0);
 8004438:	2300      	movs	r3, #0
 800443a:	461a      	mov	r2, r3
 800443c:	4619      	mov	r1, r3
 800443e:	4618      	mov	r0, r3
 8004440:	f001 fcd8 	bl	8005df4 <__assert_func>
    if (iface->transport_registered) { return 0; }  //  Quit if transport already registered and endpoint has been created.
 8004444:	2200      	movs	r2, #0
 8004446:	e7e3      	b.n	8004410 <sensor_network_register_transport+0x74>
 8004448:	20000374 	.word	0x20000374
 800444c:	20000354 	.word	0x20000354
 8004450:	0800f3b4 	.word	0x0800f3b4
 8004454:	0800f3a0 	.word	0x0800f3a0
 8004458:	0800f3a8 	.word	0x0800f3a8
 800445c:	0800f288 	.word	0x0800f288

08004460 <sensor_network_start_transport>:
int sensor_network_start_transport(uint8_t iface_type) {
 8004460:	b570      	push	{r4, r5, r6, lr}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 8004462:	2801      	cmp	r0, #1
 8004464:	d80a      	bhi.n	800447c <sensor_network_start_transport+0x1c>
 8004466:	4604      	mov	r4, r0
    if (iface->transport_registered) { return 0; }  //  Quit if transport already registered and endpoint has been created.
 8004468:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800446c:	009a      	lsls	r2, r3, #2
 800446e:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <sensor_network_start_transport+0x68>)
 8004470:	4413      	add	r3, r2
 8004472:	7c1b      	ldrb	r3, [r3, #16]
 8004474:	b143      	cbz	r3, 8004488 <sensor_network_start_transport+0x28>
 8004476:	2500      	movs	r5, #0
}
 8004478:	4628      	mov	r0, r5
 800447a:	bd70      	pop	{r4, r5, r6, pc}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800447c:	2300      	movs	r3, #0
 800447e:	461a      	mov	r2, r3
 8004480:	4619      	mov	r1, r3
 8004482:	4618      	mov	r0, r3
 8004484:	f001 fcb6 	bl	8005df4 <__assert_func>
    if (!power_standby_wakeup()) {
 8004488:	f003 fd16 	bl	8007eb8 <power_standby_wakeup>
 800448c:	4605      	mov	r5, r0
 800448e:	b158      	cbz	r0, 80044a8 <sensor_network_start_transport+0x48>
        int rc = sensor_network_register_transport(iface_type);  assert(rc == 0);
 8004490:	4620      	mov	r0, r4
 8004492:	f7ff ff83 	bl	800439c <sensor_network_register_transport>
 8004496:	4605      	mov	r5, r0
 8004498:	2800      	cmp	r0, #0
 800449a:	d0ed      	beq.n	8004478 <sensor_network_start_transport+0x18>
 800449c:	2300      	movs	r3, #0
 800449e:	461a      	mov	r2, r3
 80044a0:	4619      	mov	r1, r3
 80044a2:	4618      	mov	r0, r3
 80044a4:	f001 fca6 	bl	8005df4 <__assert_func>
        os_callout_init(&callout, os_eventq_dflt_get(), start_transport_callback, (void *)(uint32_t)iface_type);
 80044a8:	f002 f854 	bl	8006554 <os_eventq_dflt_get>
 80044ac:	4e07      	ldr	r6, [pc, #28]	; (80044cc <sensor_network_start_transport+0x6c>)
 80044ae:	4623      	mov	r3, r4
 80044b0:	4a07      	ldr	r2, [pc, #28]	; (80044d0 <sensor_network_start_transport+0x70>)
 80044b2:	4601      	mov	r1, r0
 80044b4:	4630      	mov	r0, r6
 80044b6:	f001 fe1b 	bl	80060f0 <os_callout_init>
        os_callout_reset(&callout, 1 * OS_TICKS_PER_SEC);  //  Trigger the callout in 1 second
 80044ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80044be:	4630      	mov	r0, r6
 80044c0:	f001 fe42 	bl	8006148 <os_callout_reset>
        return 0;       
 80044c4:	e7d8      	b.n	8004478 <sensor_network_start_transport+0x18>
 80044c6:	bf00      	nop
 80044c8:	20000374 	.word	0x20000374
 80044cc:	200002fc 	.word	0x200002fc
 80044d0:	080044ed 	.word	0x080044ed

080044d4 <start_server_transport>:
int start_server_transport(void) {
 80044d4:	b508      	push	{r3, lr}
    int rc = sensor_network_start_transport(i);
 80044d6:	2000      	movs	r0, #0
 80044d8:	f7ff ffc2 	bl	8004460 <sensor_network_start_transport>
    assert(rc == 0);
 80044dc:	b900      	cbnz	r0, 80044e0 <start_server_transport+0xc>
}
 80044de:	bd08      	pop	{r3, pc}
    assert(rc == 0);
 80044e0:	2300      	movs	r3, #0
 80044e2:	461a      	mov	r2, r3
 80044e4:	4619      	mov	r1, r3
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 fc84 	bl	8005df4 <__assert_func>

080044ec <start_transport_callback>:
static void start_transport_callback(struct os_event *ev) {
 80044ec:	b510      	push	{r4, lr}
    uint8_t iface_type = (uint8_t)(uint32_t)ev->ev_arg;
 80044ee:	7a04      	ldrb	r4, [r0, #8]
    console_printf("NET start\n");
 80044f0:	4806      	ldr	r0, [pc, #24]	; (800450c <start_transport_callback+0x20>)
 80044f2:	f7ff fd53 	bl	8003f9c <console_printf>
    rc = sensor_network_register_transport(iface_type);  assert(rc == 0);
 80044f6:	4620      	mov	r0, r4
 80044f8:	f7ff ff50 	bl	800439c <sensor_network_register_transport>
 80044fc:	b900      	cbnz	r0, 8004500 <start_transport_callback+0x14>
}
 80044fe:	bd10      	pop	{r4, pc}
    rc = sensor_network_register_transport(iface_type);  assert(rc == 0);
 8004500:	2300      	movs	r3, #0
 8004502:	461a      	mov	r2, r3
 8004504:	4619      	mov	r1, r3
 8004506:	4618      	mov	r0, r3
 8004508:	f001 fc74 	bl	8005df4 <__assert_func>
 800450c:	0800f3e8 	.word	0x0800f3e8

08004510 <sensor_network_init_post>:

//  Interface type and URI of the CoAP message being composed.
static uint8_t current_iface_type = 0xff;
static const char *current_uri = NULL;

bool sensor_network_init_post(uint8_t iface_type, const char *uri) {
 8004510:	b510      	push	{r4, lr}
    //  Start composing the CoAP Server or Collector message with the sensor data in the payload.  This will 
    //  block other tasks from composing and posting CoAP messages (through a semaphore).
    //  We only have 1 memory buffer for composing CoAP messages so it needs to be locked.
    //  Return true if successful, false if network has not been registered.
    if (uri == NULL || uri[0] == 0) { uri = COAP_URI; }
 8004512:	b341      	cbz	r1, 8004566 <sensor_network_init_post+0x56>
 8004514:	460a      	mov	r2, r1
 8004516:	780b      	ldrb	r3, [r1, #0]
 8004518:	b33b      	cbz	r3, 800456a <sensor_network_init_post+0x5a>
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800451a:	b342      	cbz	r2, 800456e <sensor_network_init_post+0x5e>
 800451c:	2801      	cmp	r0, #1
 800451e:	d82c      	bhi.n	800457a <sensor_network_init_post+0x6a>
    struct sensor_network_interface *iface = &sensor_network_interfaces[iface_type];
    void *endpoint = &sensor_network_endpoints[iface_type];
 8004520:	4923      	ldr	r1, [pc, #140]	; (80045b0 <sensor_network_init_post+0xa0>)
 8004522:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    assert(iface->network_device);  assert(iface->register_transport_func);  assert(endpoint);
 8004526:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800452a:	009c      	lsls	r4, r3, #2
 800452c:	4b21      	ldr	r3, [pc, #132]	; (80045b4 <sensor_network_init_post+0xa4>)
 800452e:	4423      	add	r3, r4
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	b343      	cbz	r3, 8004586 <sensor_network_init_post+0x76>
 8004534:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004538:	009c      	lsls	r4, r3, #2
 800453a:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <sensor_network_init_post+0xa4>)
 800453c:	4423      	add	r3, r4
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	b333      	cbz	r3, 8004590 <sensor_network_init_post+0x80>
    if (!iface->transport_registered) {
 8004542:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004546:	009c      	lsls	r4, r3, #2
 8004548:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <sensor_network_init_post+0xa4>)
 800454a:	4423      	add	r3, r4
 800454c:	7c1b      	ldrb	r3, [r3, #16]
 800454e:	b323      	cbz	r3, 800459a <sensor_network_init_post+0x8a>
        //  If transport has not been registered, wait for the transport to be registered.
        console_printf("NET network not ready\n");
        return false;
    }
    current_iface_type = iface_type;
 8004550:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <sensor_network_init_post+0xa8>)
 8004552:	7018      	strb	r0, [r3, #0]
    current_uri = uri;
 8004554:	4b19      	ldr	r3, [pc, #100]	; (80045bc <sensor_network_init_post+0xac>)
 8004556:	601a      	str	r2, [r3, #0]
    bool status = init_sensor_post(endpoint);
 8004558:	4608      	mov	r0, r1
 800455a:	f7ff fd8b 	bl	8004074 <init_sensor_post>
    assert(status);
 800455e:	4603      	mov	r3, r0
 8004560:	b300      	cbz	r0, 80045a4 <sensor_network_init_post+0x94>
    return status;
}
 8004562:	4618      	mov	r0, r3
 8004564:	bd10      	pop	{r4, pc}
    if (uri == NULL || uri[0] == 0) { uri = COAP_URI; }
 8004566:	4a16      	ldr	r2, [pc, #88]	; (80045c0 <sensor_network_init_post+0xb0>)
 8004568:	e7d7      	b.n	800451a <sensor_network_init_post+0xa>
 800456a:	4a15      	ldr	r2, [pc, #84]	; (80045c0 <sensor_network_init_post+0xb0>)
 800456c:	e7d5      	b.n	800451a <sensor_network_init_post+0xa>
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800456e:	2300      	movs	r3, #0
 8004570:	461a      	mov	r2, r3
 8004572:	4619      	mov	r1, r3
 8004574:	4618      	mov	r0, r3
 8004576:	f001 fc3d 	bl	8005df4 <__assert_func>
 800457a:	2300      	movs	r3, #0
 800457c:	461a      	mov	r2, r3
 800457e:	4619      	mov	r1, r3
 8004580:	4618      	mov	r0, r3
 8004582:	f001 fc37 	bl	8005df4 <__assert_func>
    assert(iface->network_device);  assert(iface->register_transport_func);  assert(endpoint);
 8004586:	461a      	mov	r2, r3
 8004588:	4619      	mov	r1, r3
 800458a:	4618      	mov	r0, r3
 800458c:	f001 fc32 	bl	8005df4 <__assert_func>
 8004590:	461a      	mov	r2, r3
 8004592:	4619      	mov	r1, r3
 8004594:	4618      	mov	r0, r3
 8004596:	f001 fc2d 	bl	8005df4 <__assert_func>
        console_printf("NET network not ready\n");
 800459a:	480a      	ldr	r0, [pc, #40]	; (80045c4 <sensor_network_init_post+0xb4>)
 800459c:	f7ff fcfe 	bl	8003f9c <console_printf>
        return false;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e7de      	b.n	8004562 <sensor_network_init_post+0x52>
    assert(status);
 80045a4:	2300      	movs	r3, #0
 80045a6:	461a      	mov	r2, r3
 80045a8:	4619      	mov	r1, r3
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 fc22 	bl	8005df4 <__assert_func>
 80045b0:	20000354 	.word	0x20000354
 80045b4:	20000374 	.word	0x20000374
 80045b8:	20000131 	.word	0x20000131
 80045bc:	2000031c 	.word	0x2000031c
 80045c0:	0800f298 	.word	0x0800f298
 80045c4:	0800f388 	.word	0x0800f388

080045c8 <init_server_post>:
bool init_server_post(const char *uri) {
 80045c8:	b508      	push	{r3, lr}
    bool status = sensor_network_init_post(i, uri);
 80045ca:	4601      	mov	r1, r0
 80045cc:	2000      	movs	r0, #0
 80045ce:	f7ff ff9f 	bl	8004510 <sensor_network_init_post>
}
 80045d2:	bd08      	pop	{r3, pc}

080045d4 <sensor_network_prepare_post>:

bool sensor_network_prepare_post(int encoding) {
 80045d4:	b508      	push	{r3, lr}
    //  Set the encoding format for the CoAP message: APPLICATION_JSON or APPLICATION_CBOR.  If set to 0, use the default encoding format.
    //  Return true if successful.
    uint8_t iface_type = current_iface_type;
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <sensor_network_prepare_post+0x54>)
 80045d8:	781a      	ldrb	r2, [r3, #0]
    const char *uri = current_uri;
 80045da:	4b14      	ldr	r3, [pc, #80]	; (800462c <sensor_network_prepare_post+0x58>)
 80045dc:	6819      	ldr	r1, [r3, #0]
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 80045de:	b161      	cbz	r1, 80045fa <sensor_network_prepare_post+0x26>
 80045e0:	2a01      	cmp	r2, #1
 80045e2:	d810      	bhi.n	8004606 <sensor_network_prepare_post+0x32>
    void *endpoint = &sensor_network_endpoints[iface_type];
 80045e4:	4b12      	ldr	r3, [pc, #72]	; (8004630 <sensor_network_prepare_post+0x5c>)
 80045e6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    assert(endpoint);

    //  Use the specified encoding. If not specified, select the default encoding for the interface type.
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
 80045ea:	2800      	cmp	r0, #0
 80045ec:	dd11      	ble.n	8004612 <sensor_network_prepare_post+0x3e>
    bool status = prepare_sensor_post(endpoint, uri, enc);
 80045ee:	4602      	mov	r2, r0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fdf7 	bl	80041e4 <prepare_sensor_post>
    assert(status);
 80045f6:	b180      	cbz	r0, 800461a <sensor_network_prepare_post+0x46>
    return status;
}
 80045f8:	bd08      	pop	{r3, pc}
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 80045fa:	2300      	movs	r3, #0
 80045fc:	461a      	mov	r2, r3
 80045fe:	4619      	mov	r1, r3
 8004600:	4618      	mov	r0, r3
 8004602:	f001 fbf7 	bl	8005df4 <__assert_func>
 8004606:	2300      	movs	r3, #0
 8004608:	461a      	mov	r2, r3
 800460a:	4619      	mov	r1, r3
 800460c:	4618      	mov	r0, r3
 800460e:	f001 fbf1 	bl	8005df4 <__assert_func>
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
 8004612:	4808      	ldr	r0, [pc, #32]	; (8004634 <sensor_network_prepare_post+0x60>)
 8004614:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8004618:	e7e9      	b.n	80045ee <sensor_network_prepare_post+0x1a>
    assert(status);
 800461a:	2300      	movs	r3, #0
 800461c:	461a      	mov	r2, r3
 800461e:	4619      	mov	r1, r3
 8004620:	4618      	mov	r0, r3
 8004622:	f001 fbe7 	bl	8005df4 <__assert_func>
 8004626:	bf00      	nop
 8004628:	20000131 	.word	0x20000131
 800462c:	2000031c 	.word	0x2000031c
 8004630:	20000354 	.word	0x20000354
 8004634:	0800f340 	.word	0x0800f340

08004638 <sensor_network_do_post>:
    bool status = sensor_network_do_post(i);
    assert(status);
    return status;
}

bool sensor_network_do_post(uint8_t iface_type) {
 8004638:	b508      	push	{r3, lr}
    //  Post the CoAP Server or Collector message to the CoAP Background Task for transmission.  After posting the
    //  message to the background task, we release a semaphore that unblocks other requests
    //  to compose and post CoAP messages.
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800463a:	2801      	cmp	r0, #1
 800463c:	d803      	bhi.n	8004646 <sensor_network_do_post+0xe>
    bool status = do_sensor_post();
 800463e:	f7ff fe8d 	bl	800435c <do_sensor_post>
    assert(status);
 8004642:	b130      	cbz	r0, 8004652 <sensor_network_do_post+0x1a>
    return status;
}
 8004644:	bd08      	pop	{r3, pc}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 8004646:	2300      	movs	r3, #0
 8004648:	461a      	mov	r2, r3
 800464a:	4619      	mov	r1, r3
 800464c:	4618      	mov	r0, r3
 800464e:	f001 fbd1 	bl	8005df4 <__assert_func>
    assert(status);
 8004652:	2300      	movs	r3, #0
 8004654:	461a      	mov	r2, r3
 8004656:	4619      	mov	r1, r3
 8004658:	4618      	mov	r0, r3
 800465a:	f001 fbcb 	bl	8005df4 <__assert_func>

0800465e <do_server_post>:
bool do_server_post(void) {    
 800465e:	b508      	push	{r3, lr}
    bool status = sensor_network_do_post(i);
 8004660:	2000      	movs	r0, #0
 8004662:	f7ff ffe9 	bl	8004638 <sensor_network_do_post>
    assert(status);
 8004666:	b100      	cbz	r0, 800466a <do_server_post+0xc>
}
 8004668:	bd08      	pop	{r3, pc}
    assert(status);
 800466a:	2300      	movs	r3, #0
 800466c:	461a      	mov	r2, r3
 800466e:	4619      	mov	r1, r3
 8004670:	4618      	mov	r0, r3
 8004672:	f001 fbbf 	bl	8005df4 <__assert_func>
	...

08004678 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <is_sensor_node+0x14>)
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	4313      	orrs	r3, r2
 8004680:	d101      	bne.n	8004686 <is_sensor_node+0xe>
    return false;
 8004682:	2000      	movs	r0, #0
}
 8004684:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
 8004686:	2001      	movs	r0, #1
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	200003a0 	.word	0x200003a0

08004690 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
 8004690:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
 8004692:	4b16      	ldr	r3, [pc, #88]	; (80046ec <get_hardware_id+0x5c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	b10b      	cbz	r3, 800469c <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
 8004698:	4815      	ldr	r0, [pc, #84]	; (80046f0 <get_hardware_id+0x60>)
 800469a:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 800469c:	f000 ffc2 	bl	8005624 <hal_bsp_hw_id_len>
 80046a0:	4b12      	ldr	r3, [pc, #72]	; (80046ec <get_hardware_id+0x5c>)
 80046a2:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 80046a4:	280b      	cmp	r0, #11
 80046a6:	d914      	bls.n	80046d2 <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 80046a8:	210c      	movs	r1, #12
 80046aa:	4811      	ldr	r0, [pc, #68]	; (80046f0 <get_hardware_id+0x60>)
 80046ac:	f000 ffbc 	bl	8005628 <hal_bsp_hw_id>
 80046b0:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <get_hardware_id+0x5c>)
 80046b2:	6018      	str	r0, [r3, #0]
 80046b4:	2800      	cmp	r0, #0
 80046b6:	dd12      	ble.n	80046de <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
 80046b8:	490e      	ldr	r1, [pc, #56]	; (80046f4 <get_hardware_id+0x64>)
 80046ba:	480f      	ldr	r0, [pc, #60]	; (80046f8 <get_hardware_id+0x68>)
 80046bc:	f7ff fc6e 	bl	8003f9c <console_printf>
 80046c0:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <get_hardware_id+0x5c>)
 80046c2:	6819      	ldr	r1, [r3, #0]
 80046c4:	480a      	ldr	r0, [pc, #40]	; (80046f0 <get_hardware_id+0x60>)
 80046c6:	f7ff fbf9 	bl	8003ebc <console_dump>
 80046ca:	480c      	ldr	r0, [pc, #48]	; (80046fc <get_hardware_id+0x6c>)
 80046cc:	f7ff fc66 	bl	8003f9c <console_printf>
 80046d0:	e7e2      	b.n	8004698 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 80046d2:	2300      	movs	r3, #0
 80046d4:	461a      	mov	r2, r3
 80046d6:	4619      	mov	r1, r3
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 fb8b 	bl	8005df4 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 80046de:	2300      	movs	r3, #0
 80046e0:	461a      	mov	r2, r3
 80046e2:	4619      	mov	r1, r3
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 fb85 	bl	8005df4 <__assert_func>
 80046ea:	bf00      	nop
 80046ec:	20000350 	.word	0x20000350
 80046f0:	20000344 	.word	0x20000344
 80046f4:	0800f3a0 	.word	0x0800f3a0
 80046f8:	0800f338 	.word	0x0800f338
 80046fc:	0800f75c 	.word	0x0800f75c

08004700 <is_collector_node>:
bool is_collector_node(void) {
 8004700:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
 8004702:	f7ff ffc5 	bl	8004690 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
 8004706:	220c      	movs	r2, #12
 8004708:	4903      	ldr	r1, [pc, #12]	; (8004718 <is_collector_node+0x18>)
 800470a:	f002 ffdf 	bl	80076cc <memcmp>
 800470e:	b108      	cbz	r0, 8004714 <is_collector_node+0x14>
    return false; 
 8004710:	2000      	movs	r0, #0
}
 8004712:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
 8004714:	2001      	movs	r0, #1
 8004716:	e7fc      	b.n	8004712 <is_collector_node+0x12>
 8004718:	0800f2d0 	.word	0x0800f2d0

0800471c <is_standalone_node>:
bool is_standalone_node(void) {
 800471c:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
 800471e:	f7ff ffef 	bl	8004700 <is_collector_node>
 8004722:	b928      	cbnz	r0, 8004730 <is_standalone_node+0x14>
 8004724:	4604      	mov	r4, r0
 8004726:	f7ff ffa7 	bl	8004678 <is_sensor_node>
 800472a:	b910      	cbnz	r0, 8004732 <is_standalone_node+0x16>
 800472c:	2401      	movs	r4, #1
 800472e:	e000      	b.n	8004732 <is_standalone_node+0x16>
    return false;
 8004730:	2400      	movs	r4, #0
}
 8004732:	4620      	mov	r0, r4
 8004734:	bd10      	pop	{r4, pc}
	...

08004738 <get_device_id>:

const char *get_device_id(void) {
 8004738:	b538      	push	{r3, r4, r5, lr}
    //  Get the randomly-generated Device ID that will be sent in every CoAP Server message.  Changes upon restart.
    if (device_id_text[0]) { return device_id_text; }
 800473a:	4b0c      	ldr	r3, [pc, #48]	; (800476c <get_device_id+0x34>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	b99b      	cbnz	r3, 8004768 <get_device_id+0x30>
    //  Create a random device ID based on HMAC pseudorandom number generator e.g. 0xab 0xcd 0xef ...
    int rc = hmac_prng_generate(device_id, DEVICE_ID_LENGTH);  assert(rc == 0);
#endif  //  MYNEWT_VAL(HMAC_PRNG)
    char *s = device_id_text; int i;
    //  Convert to text e.g. abcdef...
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
 8004740:	2400      	movs	r4, #0
    char *s = device_id_text; int i;
 8004742:	4d0a      	ldr	r5, [pc, #40]	; (800476c <get_device_id+0x34>)
 8004744:	e006      	b.n	8004754 <get_device_id+0x1c>
        sprintf(s, "%02x", device_id[i]);
 8004746:	2200      	movs	r2, #0
 8004748:	4909      	ldr	r1, [pc, #36]	; (8004770 <get_device_id+0x38>)
 800474a:	4628      	mov	r0, r5
 800474c:	f002 fffa 	bl	8007744 <sprintf>
        s += 2;
 8004750:	3502      	adds	r5, #2
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
 8004752:	3401      	adds	r4, #1
 8004754:	2c0f      	cmp	r4, #15
 8004756:	ddf6      	ble.n	8004746 <get_device_id+0xe>
    }
    device_id_text[DEVICE_ID_TEXT_LENGTH - 1] = 0;
 8004758:	4a04      	ldr	r2, [pc, #16]	; (800476c <get_device_id+0x34>)
 800475a:	2300      	movs	r3, #0
 800475c:	f882 3020 	strb.w	r3, [r2, #32]
    console_printf("%srandom device id %s\n", _net, device_id_text);
 8004760:	4904      	ldr	r1, [pc, #16]	; (8004774 <get_device_id+0x3c>)
 8004762:	4805      	ldr	r0, [pc, #20]	; (8004778 <get_device_id+0x40>)
 8004764:	f7ff fc1a 	bl	8003f9c <console_printf>
    return device_id_text;
}
 8004768:	4800      	ldr	r0, [pc, #0]	; (800476c <get_device_id+0x34>)
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	20000320 	.word	0x20000320
 8004770:	0800f318 	.word	0x0800f318
 8004774:	0800f3a0 	.word	0x0800f3a0
 8004778:	0800f320 	.word	0x0800f320

0800477c <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
 800477c:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 800477e:	2400      	movs	r4, #0
 8004780:	2c04      	cmp	r4, #4
 8004782:	dc15      	bgt.n	80047b0 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
 8004784:	4b23      	ldr	r3, [pc, #140]	; (8004814 <sensor_network_init+0x98>)
 8004786:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	4922      	ldr	r1, [pc, #136]	; (8004818 <sensor_network_init+0x9c>)
 8004790:	4822      	ldr	r0, [pc, #136]	; (800481c <sensor_network_init+0xa0>)
 8004792:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004796:	f002 ffd5 	bl	8007744 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
 800479a:	3001      	adds	r0, #1
 800479c:	280b      	cmp	r0, #11
 800479e:	dc01      	bgt.n	80047a4 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 80047a0:	3401      	adds	r4, #1
 80047a2:	e7ed      	b.n	8004780 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
 80047a4:	2300      	movs	r3, #0
 80047a6:	461a      	mov	r2, r3
 80047a8:	4619      	mov	r1, r3
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 fb22 	bl	8005df4 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
 80047b0:	f7ff ff6e 	bl	8004690 <get_hardware_id>
 80047b4:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 80047b6:	2400      	movs	r4, #0
 80047b8:	2c04      	cmp	r4, #4
 80047ba:	dc19      	bgt.n	80047f0 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
 80047bc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80047c0:	0093      	lsls	r3, r2, #2
 80047c2:	220c      	movs	r2, #12
 80047c4:	4916      	ldr	r1, [pc, #88]	; (8004820 <sensor_network_init+0xa4>)
 80047c6:	4419      	add	r1, r3
 80047c8:	4628      	mov	r0, r5
 80047ca:	f002 ff7f 	bl	80076cc <memcmp>
 80047ce:	b108      	cbz	r0, 80047d4 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 80047d0:	3401      	adds	r4, #1
 80047d2:	e7f1      	b.n	80047b8 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
 80047d4:	4b0f      	ldr	r3, [pc, #60]	; (8004814 <sensor_network_init+0x98>)
 80047d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80047da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047de:	4b11      	ldr	r3, [pc, #68]	; (8004824 <sensor_network_init+0xa8>)
 80047e0:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
 80047e4:	1c63      	adds	r3, r4, #1
 80047e6:	4a10      	ldr	r2, [pc, #64]	; (8004828 <sensor_network_init+0xac>)
 80047e8:	4910      	ldr	r1, [pc, #64]	; (800482c <sensor_network_init+0xb0>)
 80047ea:	4811      	ldr	r0, [pc, #68]	; (8004830 <sensor_network_init+0xb4>)
 80047ec:	f7ff fbd6 	bl	8003f9c <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
 80047f0:	f7ff ff86 	bl	8004700 <is_collector_node>
 80047f4:	b940      	cbnz	r0, 8004808 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
 80047f6:	f7ff ff91 	bl	800471c <is_standalone_node>
 80047fa:	b150      	cbz	r0, 8004812 <sensor_network_init+0x96>
 80047fc:	4a0a      	ldr	r2, [pc, #40]	; (8004828 <sensor_network_init+0xac>)
 80047fe:	490b      	ldr	r1, [pc, #44]	; (800482c <sensor_network_init+0xb0>)
 8004800:	480c      	ldr	r0, [pc, #48]	; (8004834 <sensor_network_init+0xb8>)
 8004802:	f7ff fbcb 	bl	8003f9c <console_printf>
}
 8004806:	e004      	b.n	8004812 <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
 8004808:	4a07      	ldr	r2, [pc, #28]	; (8004828 <sensor_network_init+0xac>)
 800480a:	4908      	ldr	r1, [pc, #32]	; (800482c <sensor_network_init+0xb0>)
 800480c:	480a      	ldr	r0, [pc, #40]	; (8004838 <sensor_network_init+0xbc>)
 800480e:	f7ff fbc5 	bl	8003f9c <console_printf>
}
 8004812:	bd38      	pop	{r3, r4, r5, pc}
 8004814:	0800f3c0 	.word	0x0800f3c0
 8004818:	0800f348 	.word	0x0800f348
 800481c:	20000134 	.word	0x20000134
 8004820:	0800f2dc 	.word	0x0800f2dc
 8004824:	200003a0 	.word	0x200003a0
 8004828:	0800f350 	.word	0x0800f350
 800482c:	0800f3a0 	.word	0x0800f3a0
 8004830:	0800f358 	.word	0x0800f358
 8004834:	0800f378 	.word	0x0800f378
 8004838:	0800f368 	.word	0x0800f368

0800483c <sensor_network_register_interface>:

int sensor_network_register_interface(const struct sensor_network_interface *iface) {
 800483c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  Register the Network Interface (e.g. BC95-G, ESP8266, nRF24L01) for the Sensor Network.
    assert(iface);
 800483e:	2800      	cmp	r0, #0
 8004840:	d033      	beq.n	80048aa <sensor_network_register_interface+0x6e>
 8004842:	4603      	mov	r3, r0
    uint8_t i = iface->iface_type;  assert(i >= 0 && i < MAX_INTERFACE_TYPES);
 8004844:	7802      	ldrb	r2, [r0, #0]
 8004846:	2a01      	cmp	r2, #1
 8004848:	d835      	bhi.n	80048b6 <sensor_network_register_interface+0x7a>
    assert(iface->network_device);  assert(iface->server_endpoint_size);  assert(iface->register_transport_func);
 800484a:	6841      	ldr	r1, [r0, #4]
 800484c:	2900      	cmp	r1, #0
 800484e:	d038      	beq.n	80048c2 <sensor_network_register_interface+0x86>
 8004850:	7a01      	ldrb	r1, [r0, #8]
 8004852:	2900      	cmp	r1, #0
 8004854:	d03b      	beq.n	80048ce <sensor_network_register_interface+0x92>
 8004856:	68c0      	ldr	r0, [r0, #12]
 8004858:	2800      	cmp	r0, #0
 800485a:	d03e      	beq.n	80048da <sensor_network_register_interface+0x9e>
    assert(iface->server_endpoint_size <= MAX_ENDPOINT_SIZE);     //  Need to increase MAX_ENDPOINT_SIZE.
 800485c:	2910      	cmp	r1, #16
 800485e:	d842      	bhi.n	80048e6 <sensor_network_register_interface+0xaa>
    assert(sensor_network_interfaces[i].network_device == NULL);  //  Interface already registered.
 8004860:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004864:	0088      	lsls	r0, r1, #2
 8004866:	4926      	ldr	r1, [pc, #152]	; (8004900 <sensor_network_register_interface+0xc4>)
 8004868:	4401      	add	r1, r0
 800486a:	6849      	ldr	r1, [r1, #4]
 800486c:	2900      	cmp	r1, #0
 800486e:	d140      	bne.n	80048f2 <sensor_network_register_interface+0xb6>
    memcpy(&sensor_network_interfaces[i], iface, sizeof(struct sensor_network_interface));  //  Copy the interface.
 8004870:	4d23      	ldr	r5, [pc, #140]	; (8004900 <sensor_network_register_interface+0xc4>)
 8004872:	0091      	lsls	r1, r2, #2
 8004874:	4411      	add	r1, r2
 8004876:	008c      	lsls	r4, r1, #2
 8004878:	1929      	adds	r1, r5, r4
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8004880:	689f      	ldr	r7, [r3, #8]
 8004882:	68de      	ldr	r6, [r3, #12]
 8004884:	5128      	str	r0, [r5, r4]
 8004886:	f8c1 c004 	str.w	ip, [r1, #4]
 800488a:	608f      	str	r7, [r1, #8]
 800488c:	60ce      	str	r6, [r1, #12]
 800488e:	6918      	ldr	r0, [r3, #16]
 8004890:	6108      	str	r0, [r1, #16]
    sensor_network_interfaces[i].transport_registered = 0;        //  We defer the registration of the transport till first use.
 8004892:	2400      	movs	r4, #0
 8004894:	740c      	strb	r4, [r1, #16]
    console_printf("%s%s %s\n", _net, sensor_network_shortname[i], sensor_network_interfaces[i].network_device);
 8004896:	684b      	ldr	r3, [r1, #4]
 8004898:	491a      	ldr	r1, [pc, #104]	; (8004904 <sensor_network_register_interface+0xc8>)
 800489a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800489e:	491a      	ldr	r1, [pc, #104]	; (8004908 <sensor_network_register_interface+0xcc>)
 80048a0:	481a      	ldr	r0, [pc, #104]	; (800490c <sensor_network_register_interface+0xd0>)
 80048a2:	f7ff fb7b 	bl	8003f9c <console_printf>
    return 0;
}
 80048a6:	4620      	mov	r0, r4
 80048a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(iface);
 80048aa:	2300      	movs	r3, #0
 80048ac:	461a      	mov	r2, r3
 80048ae:	4619      	mov	r1, r3
 80048b0:	4618      	mov	r0, r3
 80048b2:	f001 fa9f 	bl	8005df4 <__assert_func>
    uint8_t i = iface->iface_type;  assert(i >= 0 && i < MAX_INTERFACE_TYPES);
 80048b6:	2300      	movs	r3, #0
 80048b8:	461a      	mov	r2, r3
 80048ba:	4619      	mov	r1, r3
 80048bc:	4618      	mov	r0, r3
 80048be:	f001 fa99 	bl	8005df4 <__assert_func>
    assert(iface->network_device);  assert(iface->server_endpoint_size);  assert(iface->register_transport_func);
 80048c2:	2300      	movs	r3, #0
 80048c4:	461a      	mov	r2, r3
 80048c6:	4619      	mov	r1, r3
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 fa93 	bl	8005df4 <__assert_func>
 80048ce:	2300      	movs	r3, #0
 80048d0:	461a      	mov	r2, r3
 80048d2:	4619      	mov	r1, r3
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 fa8d 	bl	8005df4 <__assert_func>
 80048da:	2300      	movs	r3, #0
 80048dc:	461a      	mov	r2, r3
 80048de:	4619      	mov	r1, r3
 80048e0:	4618      	mov	r0, r3
 80048e2:	f001 fa87 	bl	8005df4 <__assert_func>
    assert(iface->server_endpoint_size <= MAX_ENDPOINT_SIZE);     //  Need to increase MAX_ENDPOINT_SIZE.
 80048e6:	2300      	movs	r3, #0
 80048e8:	461a      	mov	r2, r3
 80048ea:	4619      	mov	r1, r3
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 fa81 	bl	8005df4 <__assert_func>
    assert(sensor_network_interfaces[i].network_device == NULL);  //  Interface already registered.
 80048f2:	2300      	movs	r3, #0
 80048f4:	461a      	mov	r2, r3
 80048f6:	4619      	mov	r1, r3
 80048f8:	4618      	mov	r0, r3
 80048fa:	f001 fa7b 	bl	8005df4 <__assert_func>
 80048fe:	bf00      	nop
 8004900:	20000374 	.word	0x20000374
 8004904:	0800f3b4 	.word	0x0800f3b4
 8004908:	0800f3a0 	.word	0x0800f3a0
 800490c:	0800f3a8 	.word	0x0800f3a8

08004910 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
 8004910:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
 8004912:	e002      	b.n	800491a <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fc4b 	bl	80051b0 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
 800491a:	4808      	ldr	r0, [pc, #32]	; (800493c <oc_buffer_tx+0x2c>)
 800491c:	f001 fe27 	bl	800656e <os_mqueue_get>
 8004920:	4603      	mov	r3, r0
 8004922:	b148      	cbz	r0, 8004938 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
 8004924:	2200      	movs	r2, #0
 8004926:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
 8004928:	7e1a      	ldrb	r2, [r3, #24]
 800492a:	f012 0f08 	tst.w	r2, #8
 800492e:	d0f1      	beq.n	8004914 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fc4d 	bl	80051d0 <oc_send_multicast_message>
 8004936:	e7f0      	b.n	800491a <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
 8004938:	bd08      	pop	{r3, pc}
 800493a:	bf00      	nop
 800493c:	200003f8 	.word	0x200003f8

08004940 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
 8004940:	b500      	push	{lr}
 8004942:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
 8004944:	4808      	ldr	r0, [pc, #32]	; (8004968 <oc_buffer_rx+0x28>)
 8004946:	f001 fe12 	bl	800656e <os_mqueue_get>
 800494a:	9001      	str	r0, [sp, #4]
 800494c:	b140      	cbz	r0, 8004960 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
 800494e:	a801      	add	r0, sp, #4
 8004950:	f000 fcac 	bl	80052ac <__wrap_coap_receive>
#endif
        if (m) {
 8004954:	9801      	ldr	r0, [sp, #4]
 8004956:	2800      	cmp	r0, #0
 8004958:	d0f4      	beq.n	8004944 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
 800495a:	f001 fe7d 	bl	8006658 <os_mbuf_free_chain>
 800495e:	e7f1      	b.n	8004944 <oc_buffer_rx+0x4>
        }
    }
}
 8004960:	b003      	add	sp, #12
 8004962:	f85d fb04 	ldr.w	pc, [sp], #4
 8004966:	bf00      	nop
 8004968:	200003e0 	.word	0x200003e0

0800496c <oc_allocate_mbuf>:
{
 800496c:	b570      	push	{r4, r5, r6, lr}
};

static inline int
oc_endpoint_size(struct oc_endpoint *oe)
{
    assert(oc_transports[oe->ep.oe_type]);
 800496e:	7803      	ldrb	r3, [r0, #0]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4a0c      	ldr	r2, [pc, #48]	; (80049a8 <oc_allocate_mbuf+0x3c>)
 8004976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800497a:	b183      	cbz	r3, 800499e <oc_allocate_mbuf+0x32>
 800497c:	4604      	mov	r4, r0
    return oc_transports[oe->ep.oe_type]->ot_ep_size(oe);
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4798      	blx	r3
 8004982:	4606      	mov	r6, r0
    m = os_msys_get_pkthdr(0, ep_size);
 8004984:	b281      	uxth	r1, r0
 8004986:	2000      	movs	r0, #0
 8004988:	f002 f8f0 	bl	8006b6c <os_msys_get_pkthdr>
    if (!m) {
 800498c:	4605      	mov	r5, r0
 800498e:	b120      	cbz	r0, 800499a <oc_allocate_mbuf+0x2e>
    memcpy(OC_MBUF_ENDPOINT(m), oe, ep_size);
 8004990:	4632      	mov	r2, r6
 8004992:	4621      	mov	r1, r4
 8004994:	3018      	adds	r0, #24
 8004996:	f002 febd 	bl	8007714 <memcpy>
}
 800499a:	4628      	mov	r0, r5
 800499c:	bd70      	pop	{r4, r5, r6, pc}
    assert(oc_transports[oe->ep.oe_type]);
 800499e:	461a      	mov	r2, r3
 80049a0:	4619      	mov	r1, r3
 80049a2:	4618      	mov	r0, r3
 80049a4:	f001 fa26 	bl	8005df4 <__assert_func>
 80049a8:	20002e08 	.word	0x20002e08

080049ac <oc_send_message>:
{
 80049ac:	b510      	push	{r4, lr}
 80049ae:	4604      	mov	r4, r0
    rc = os_mqueue_put(&oc_outq, oc_evq_get(), m);
 80049b0:	f000 fbd6 	bl	8005160 <oc_evq_get>
 80049b4:	4622      	mov	r2, r4
 80049b6:	4601      	mov	r1, r0
 80049b8:	4805      	ldr	r0, [pc, #20]	; (80049d0 <oc_send_message+0x24>)
 80049ba:	f001 fdeb 	bl	8006594 <os_mqueue_put>
    assert(rc == 0);
 80049be:	b900      	cbnz	r0, 80049c2 <oc_send_message+0x16>
}
 80049c0:	bd10      	pop	{r4, pc}
    assert(rc == 0);
 80049c2:	2300      	movs	r3, #0
 80049c4:	461a      	mov	r2, r3
 80049c6:	4619      	mov	r1, r3
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fa13 	bl	8005df4 <__assert_func>
 80049ce:	bf00      	nop
 80049d0:	200003f8 	.word	0x200003f8

080049d4 <oc_buffer_init>:

void
oc_buffer_init(void)
{
 80049d4:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
 80049d6:	2200      	movs	r2, #0
 80049d8:	4904      	ldr	r1, [pc, #16]	; (80049ec <oc_buffer_init+0x18>)
 80049da:	4805      	ldr	r0, [pc, #20]	; (80049f0 <oc_buffer_init+0x1c>)
 80049dc:	f001 fdbe 	bl	800655c <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
 80049e0:	2200      	movs	r2, #0
 80049e2:	4904      	ldr	r1, [pc, #16]	; (80049f4 <oc_buffer_init+0x20>)
 80049e4:	4804      	ldr	r0, [pc, #16]	; (80049f8 <oc_buffer_init+0x24>)
 80049e6:	f001 fdb9 	bl	800655c <os_mqueue_init>
}
 80049ea:	bd08      	pop	{r3, pc}
 80049ec:	08004941 	.word	0x08004941
 80049f0:	200003e0 	.word	0x200003e0
 80049f4:	08004911 	.word	0x08004911
 80049f8:	200003f8 	.word	0x200003f8

080049fc <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
 80049fc:	b500      	push	{lr}
 80049fe:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
 8004a00:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <oc_rep_init+0x1c>)
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <oc_rep_init+0x20>)
 8004a06:	2218      	movs	r2, #24
 8004a08:	2102      	movs	r1, #2
 8004a0a:	4805      	ldr	r0, [pc, #20]	; (8004a20 <oc_rep_init+0x24>)
 8004a0c:	f002 f800 	bl	8006a10 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
 8004a10:	b003      	add	sp, #12
 8004a12:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a16:	bf00      	nop
 8004a18:	0800f3fc 	.word	0x0800f3fc
 8004a1c:	2000042c 	.word	0x2000042c
 8004a20:	20000410 	.word	0x20000410

08004a24 <free_client_cb>:
}

#ifdef OC_CLIENT
static void
free_client_cb(oc_client_cb_t *cb)
{
 8004a24:	b510      	push	{r4, lr}
 8004a26:	4604      	mov	r4, r0
    os_callout_stop(&cb->callout);
 8004a28:	3004      	adds	r0, #4
 8004a2a:	f001 fb6f 	bl	800610c <os_callout_stop>
    oc_free_string(&cb->uri);
 8004a2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a32:	f000 fc24 	bl	800527e <oc_free_string>
    SLIST_REMOVE(&oc_client_cbs, cb, oc_client_cb, next);
 8004a36:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <free_client_cb+0x38>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	42a2      	cmp	r2, r4
 8004a3c:	d103      	bne.n	8004a46 <free_client_cb+0x22>
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	e005      	b.n	8004a50 <free_client_cb+0x2c>
 8004a44:	461a      	mov	r2, r3
 8004a46:	6813      	ldr	r3, [r2, #0]
 8004a48:	42a3      	cmp	r3, r4
 8004a4a:	d1fb      	bne.n	8004a44 <free_client_cb+0x20>
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6013      	str	r3, [r2, #0]
    os_memblock_put(&oc_client_cb_pool, cb);
 8004a50:	4621      	mov	r1, r4
 8004a52:	4803      	ldr	r0, [pc, #12]	; (8004a60 <free_client_cb+0x3c>)
 8004a54:	f002 f80e 	bl	8006a74 <os_memblock_put>
}
 8004a58:	bd10      	pop	{r4, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000540 	.word	0x20000540
 8004a60:	20000524 	.word	0x20000524

08004a64 <oc_ri_remove_cb>:
    return NULL;
}

static void
oc_ri_remove_cb(struct os_event *ev)
{
 8004a64:	b508      	push	{r3, lr}
    struct oc_client_cb *cb;

    cb = ev->ev_arg;

    free_client_cb(cb);
 8004a66:	6880      	ldr	r0, [r0, #8]
 8004a68:	f7ff ffdc 	bl	8004a24 <free_client_cb>
}
 8004a6c:	bd08      	pop	{r3, pc}
	...

08004a70 <oc_ri_mem_init>:
{
 8004a70:	b500      	push	{lr}
 8004a72:	b083      	sub	sp, #12
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
 8004a74:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <oc_ri_mem_init+0x24>)
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <oc_ri_mem_init+0x28>)
 8004a7a:	2264      	movs	r2, #100	; 0x64
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	4807      	ldr	r0, [pc, #28]	; (8004a9c <oc_ri_mem_init+0x2c>)
 8004a80:	f001 ffc6 	bl	8006a10 <os_mempool_init>
    oc_rep_init();
 8004a84:	f7ff ffba 	bl	80049fc <oc_rep_init>
    oc_buffer_init();
 8004a88:	f7ff ffa4 	bl	80049d4 <oc_buffer_init>
}
 8004a8c:	b003      	add	sp, #12
 8004a8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a92:	bf00      	nop
 8004a94:	0800f408 	.word	0x0800f408
 8004a98:	2000045c 	.word	0x2000045c
 8004a9c:	20000524 	.word	0x20000524

08004aa0 <oc_ri_remove_client_cb_by_mid>:
{
 8004aa0:	b508      	push	{r3, lr}
    SLIST_FOREACH(cb, &oc_client_cbs, next) {
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <oc_ri_remove_client_cb_by_mid+0x1c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	b123      	cbz	r3, 8004ab2 <oc_ri_remove_client_cb_by_mid+0x12>
        if (cb->mid == mid) {
 8004aa8:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8004aaa:	4282      	cmp	r2, r0
 8004aac:	d001      	beq.n	8004ab2 <oc_ri_remove_client_cb_by_mid+0x12>
    SLIST_FOREACH(cb, &oc_client_cbs, next) {
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	e7f9      	b.n	8004aa6 <oc_ri_remove_client_cb_by_mid+0x6>
    if (cb) {
 8004ab2:	b113      	cbz	r3, 8004aba <oc_ri_remove_client_cb_by_mid+0x1a>
        free_client_cb(cb);
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff ffb5 	bl	8004a24 <free_client_cb>
}
 8004aba:	bd08      	pop	{r3, pc}
 8004abc:	20000540 	.word	0x20000540

08004ac0 <oc_ri_alloc_client_cb>:

oc_client_cb_t *
oc_ri_alloc_client_cb(const char *uri, oc_server_handle_t *server,
                      oc_method_t method, void *handler, oc_qos_t qos)
{
 8004ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac4:	4680      	mov	r8, r0
 8004ac6:	460e      	mov	r6, r1
 8004ac8:	4617      	mov	r7, r2
 8004aca:	461d      	mov	r5, r3
    oc_client_cb_t *cb;

    cb = os_memblock_get(&oc_client_cb_pool);
 8004acc:	4823      	ldr	r0, [pc, #140]	; (8004b5c <oc_ri_alloc_client_cb+0x9c>)
 8004ace:	f001 ffa9 	bl	8006a24 <os_memblock_get>
    if (!cb) {
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d03e      	beq.n	8004b56 <oc_ri_alloc_client_cb+0x96>
        return NULL;
    }
    cb->mid = coap_get_mid();
 8004ad8:	f000 f932 	bl	8004d40 <coap_get_mid>
 8004adc:	86e0      	strh	r0, [r4, #54]	; 0x36
    oc_new_string(&cb->uri, uri);
 8004ade:	4641      	mov	r1, r8
 8004ae0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ae4:	f000 fbb5 	bl	8005252 <oc_new_string>
    cb->method = method;
 8004ae8:	f884 7061 	strb.w	r7, [r4, #97]	; 0x61
    cb->qos = qos;
 8004aec:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004af0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    cb->handler = handler;
 8004af4:	6525      	str	r5, [r4, #80]	; 0x50
    cb->token_len = 8;
 8004af6:	2308      	movs	r3, #8
 8004af8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    int i = 0;
 8004afc:	2500      	movs	r5, #0
    uint16_t r;
    while (i < cb->token_len) {
 8004afe:	e005      	b.n	8004b0c <oc_ri_alloc_client_cb+0x4c>
        r = oc_random_rand();
 8004b00:	f000 fba2 	bl	8005248 <oc_random_rand>
        memcpy(cb->token + i, &r, sizeof(r));
 8004b04:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 8004b08:	5358      	strh	r0, [r3, r5]
        i += sizeof(r);
 8004b0a:	3502      	adds	r5, #2
    while (i < cb->token_len) {
 8004b0c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8004b10:	42ab      	cmp	r3, r5
 8004b12:	dcf5      	bgt.n	8004b00 <oc_ri_alloc_client_cb+0x40>
    }
    cb->discovery = false;
 8004b14:	2300      	movs	r3, #0
 8004b16:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    cb->timestamp = oc_clock_time();
 8004b1a:	f000 fb91 	bl	8005240 <oc_clock_time>
 8004b1e:	65e0      	str	r0, [r4, #92]	; 0x5c
    cb->observe_seq = -1;
 8004b20:	f04f 33ff 	mov.w	r3, #4294967295
 8004b24:	65a3      	str	r3, [r4, #88]	; 0x58
    memcpy(&cb->server, server, sizeof(oc_server_handle_t));
 8004b26:	6831      	ldr	r1, [r6, #0]
 8004b28:	6872      	ldr	r2, [r6, #4]
 8004b2a:	68b5      	ldr	r5, [r6, #8]
 8004b2c:	68f0      	ldr	r0, [r6, #12]
 8004b2e:	63a1      	str	r1, [r4, #56]	; 0x38
 8004b30:	63e2      	str	r2, [r4, #60]	; 0x3c
 8004b32:	6425      	str	r5, [r4, #64]	; 0x40
 8004b34:	6460      	str	r0, [r4, #68]	; 0x44
 8004b36:	6931      	ldr	r1, [r6, #16]
 8004b38:	6972      	ldr	r2, [r6, #20]
 8004b3a:	64a1      	str	r1, [r4, #72]	; 0x48
 8004b3c:	64e2      	str	r2, [r4, #76]	; 0x4c

    os_callout_init(&cb->callout, oc_evq_get(), oc_ri_remove_cb, cb);
 8004b3e:	f000 fb0f 	bl	8005160 <oc_evq_get>
 8004b42:	4623      	mov	r3, r4
 8004b44:	4a06      	ldr	r2, [pc, #24]	; (8004b60 <oc_ri_alloc_client_cb+0xa0>)
 8004b46:	4601      	mov	r1, r0
 8004b48:	1d20      	adds	r0, r4, #4
 8004b4a:	f001 fad1 	bl	80060f0 <os_callout_init>

    SLIST_INSERT_HEAD(&oc_client_cbs, cb, next);
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <oc_ri_alloc_client_cb+0xa4>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	6022      	str	r2, [r4, #0]
 8004b54:	601c      	str	r4, [r3, #0]
    return cb;
}
 8004b56:	4620      	mov	r0, r4
 8004b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b5c:	20000524 	.word	0x20000524
 8004b60:	08004a65 	.word	0x08004a65
 8004b64:	20000540 	.word	0x20000540

08004b68 <coap_log_2>:
/*---------------------------------------------------------------------------*/
/*- Local helper functions --------------------------------------------------*/
/*---------------------------------------------------------------------------*/
static uint16_t
coap_log_2(uint16_t value)
{
 8004b68:	4602      	mov	r2, r0
    uint16_t result = 0;
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	e000      	b.n	8004b70 <coap_log_2+0x8>

    do {
        value = value >> 1;
        result++;
 8004b6e:	4618      	mov	r0, r3
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	b29b      	uxth	r3, r3
    } while (value);
 8004b74:	0852      	lsrs	r2, r2, #1
 8004b76:	d1fa      	bne.n	8004b6e <coap_log_2+0x6>

    return (result - 1);
}
 8004b78:	4770      	bx	lr

08004b7a <coap_option_nibble>:
}
/*---------------------------------------------------------------------------*/
static uint8_t
coap_option_nibble(unsigned int value)
{
    if (value < 13) {
 8004b7a:	280c      	cmp	r0, #12
 8004b7c:	d904      	bls.n	8004b88 <coap_option_nibble+0xe>
        return value;
    } else if (value <= 0xFF + 13) {
 8004b7e:	f5b0 7f86 	cmp.w	r0, #268	; 0x10c
 8004b82:	d803      	bhi.n	8004b8c <coap_option_nibble+0x12>
        return 13;
 8004b84:	200d      	movs	r0, #13
 8004b86:	4770      	bx	lr
        return value;
 8004b88:	b2c0      	uxtb	r0, r0
 8004b8a:	4770      	bx	lr
    } else {
        return 14;
 8004b8c:	200e      	movs	r0, #14
    }
}
 8004b8e:	4770      	bx	lr

08004b90 <coap_append_opt_hdr>:
/*---------------------------------------------------------------------------*/

static int
coap_append_opt_hdr(struct os_mbuf *m, unsigned int delta, size_t length)
{
 8004b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b92:	b083      	sub	sp, #12
 8004b94:	4606      	mov	r6, r0
 8004b96:	460d      	mov	r5, r1
 8004b98:	4614      	mov	r4, r2
    uint8_t buffer[4];
    size_t written = 0;

    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 8004b9a:	4608      	mov	r0, r1
 8004b9c:	f7ff ffed 	bl	8004b7a <coap_option_nibble>
 8004ba0:	0107      	lsls	r7, r0, #4
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f7ff ffe9 	bl	8004b7a <coap_option_nibble>
 8004ba8:	b240      	sxtb	r0, r0
 8004baa:	4338      	orrs	r0, r7
 8004bac:	f88d 0004 	strb.w	r0, [sp, #4]

    if (delta > 268) {
 8004bb0:	f5b5 7f86 	cmp.w	r5, #268	; 0x10c
 8004bb4:	d914      	bls.n	8004be0 <coap_append_opt_hdr+0x50>
        buffer[++written] = ((delta - 269) >> 8) & 0xff;
 8004bb6:	f2a5 130d 	subw	r3, r5, #269	; 0x10d
 8004bba:	0a1b      	lsrs	r3, r3, #8
 8004bbc:	f88d 3005 	strb.w	r3, [sp, #5]
        buffer[++written] = (delta - 269) & 0xff;
 8004bc0:	3d0d      	subs	r5, #13
 8004bc2:	f88d 5006 	strb.w	r5, [sp, #6]
 8004bc6:	2202      	movs	r2, #2
    } else if (delta > 12) {
        buffer[++written] = (delta - 13);
    }

    if (length > 268) {
 8004bc8:	f5b4 7f86 	cmp.w	r4, #268	; 0x10c
 8004bcc:	d811      	bhi.n	8004bf2 <coap_append_opt_hdr+0x62>
        buffer[++written] = ((length - 269) >> 8) & 0xff;
        buffer[++written] = (length - 269) & 0xff;
    } else if (length > 12) {
 8004bce:	2c0c      	cmp	r4, #12
 8004bd0:	d91c      	bls.n	8004c0c <coap_append_opt_hdr+0x7c>
        buffer[++written] = (length - 13);
 8004bd2:	3201      	adds	r2, #1
 8004bd4:	3c0d      	subs	r4, #13
 8004bd6:	ab02      	add	r3, sp, #8
 8004bd8:	4413      	add	r3, r2
 8004bda:	f803 4c04 	strb.w	r4, [r3, #-4]
 8004bde:	e015      	b.n	8004c0c <coap_append_opt_hdr+0x7c>
    } else if (delta > 12) {
 8004be0:	2d0c      	cmp	r5, #12
 8004be2:	d904      	bls.n	8004bee <coap_append_opt_hdr+0x5e>
        buffer[++written] = (delta - 13);
 8004be4:	3d0d      	subs	r5, #13
 8004be6:	f88d 5005 	strb.w	r5, [sp, #5]
 8004bea:	2201      	movs	r2, #1
 8004bec:	e7ec      	b.n	8004bc8 <coap_append_opt_hdr+0x38>
    size_t written = 0;
 8004bee:	2200      	movs	r2, #0
 8004bf0:	e7ea      	b.n	8004bc8 <coap_append_opt_hdr+0x38>
        buffer[++written] = ((length - 269) >> 8) & 0xff;
 8004bf2:	f2a4 130d 	subw	r3, r4, #269	; 0x10d
 8004bf6:	0a1b      	lsrs	r3, r3, #8
 8004bf8:	a902      	add	r1, sp, #8
 8004bfa:	4411      	add	r1, r2
 8004bfc:	f801 3c03 	strb.w	r3, [r1, #-3]
        buffer[++written] = (length - 269) & 0xff;
 8004c00:	3202      	adds	r2, #2
 8004c02:	3c0d      	subs	r4, #13
 8004c04:	ab02      	add	r3, sp, #8
 8004c06:	4413      	add	r3, r2
 8004c08:	f803 4c04 	strb.w	r4, [r3, #-4]
    }

    return os_mbuf_append(m, buffer, written + 1);
 8004c0c:	3201      	adds	r2, #1
 8004c0e:	b292      	uxth	r2, r2
 8004c10:	a901      	add	r1, sp, #4
 8004c12:	4630      	mov	r0, r6
 8004c14:	f001 fd3c 	bl	8006690 <os_mbuf_append>
}
 8004c18:	b003      	add	sp, #12
 8004c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c1c <coap_append_array_opt>:
/*---------------------------------------------------------------------------*/
static int
coap_append_array_opt(struct os_mbuf *m,
                      unsigned int number, unsigned int current_number,
                      uint8_t *array, size_t length, char split_char)
{
 8004c1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c20:	4682      	mov	sl, r0
 8004c22:	468b      	mov	fp, r1
 8004c24:	4611      	mov	r1, r2
 8004c26:	461e      	mov	r6, r3
 8004c28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004c2a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    uint8_t *part_end = NULL;
    size_t blk;

    OC_LOG(DEBUG, "ARRAY type %u, len %zu\n", number, length);

    if (split_char != '\0') {
 8004c2e:	f1b9 0f00 	cmp.w	r9, #0
 8004c32:	d027      	beq.n	8004c84 <coap_append_array_opt+0x68>
    uint8_t *part_start = array;
 8004c34:	4698      	mov	r8, r3
        for (j = 0; j <= length + 1; ++j) {
 8004c36:	2400      	movs	r4, #0
 8004c38:	e015      	b.n	8004c66 <coap_append_array_opt+0x4a>
            if (array[j] == split_char || j == length) {
                part_end = array + j;
                blk = part_end - part_start;
 8004c3a:	eba5 0508 	sub.w	r5, r5, r8

                rc = coap_append_opt_hdr(m, number - current_number, blk);
 8004c3e:	462a      	mov	r2, r5
 8004c40:	ebab 0101 	sub.w	r1, fp, r1
 8004c44:	4650      	mov	r0, sl
 8004c46:	f7ff ffa3 	bl	8004b90 <coap_append_opt_hdr>
                if (rc) {
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	b9b8      	cbnz	r0, 8004c7e <coap_append_array_opt+0x62>
                    return rc;
                }
                rc = os_mbuf_append(m, part_start, blk);
 8004c4e:	b2aa      	uxth	r2, r5
 8004c50:	4641      	mov	r1, r8
 8004c52:	4650      	mov	r0, sl
 8004c54:	f001 fd1c 	bl	8006690 <os_mbuf_append>
                if (rc) {
 8004c58:	4603      	mov	r3, r0
 8004c5a:	b980      	cbnz	r0, 8004c7e <coap_append_array_opt+0x62>
                }

                OC_LOG(DEBUG, "OPTION type %u, delta %u, len %zu\n", number,
                    number - current_number, (int)blk);

                ++j; /* skip the splitter */
 8004c5c:	3401      	adds	r4, #1
                current_number = number;
                part_start = array + j;
 8004c5e:	eb06 0804 	add.w	r8, r6, r4
                current_number = number;
 8004c62:	4659      	mov	r1, fp
        for (j = 0; j <= length + 1; ++j) {
 8004c64:	3401      	adds	r4, #1
 8004c66:	1c7b      	adds	r3, r7, #1
 8004c68:	4622      	mov	r2, r4
 8004c6a:	42a3      	cmp	r3, r4
 8004c6c:	d306      	bcc.n	8004c7c <coap_append_array_opt+0x60>
            if (array[j] == split_char || j == length) {
 8004c6e:	1935      	adds	r5, r6, r4
 8004c70:	5d33      	ldrb	r3, [r6, r4]
 8004c72:	454b      	cmp	r3, r9
 8004c74:	d0e1      	beq.n	8004c3a <coap_append_array_opt+0x1e>
 8004c76:	42ba      	cmp	r2, r7
 8004c78:	d1f4      	bne.n	8004c64 <coap_append_array_opt+0x48>
 8004c7a:	e7de      	b.n	8004c3a <coap_append_array_opt+0x1e>

        OC_LOG(DEBUG, "OPTION type %u, delta %u, len %zu\n", number,
            number - current_number, length);
    }

    return 0;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = coap_append_opt_hdr(m, number - current_number, length);
 8004c84:	463a      	mov	r2, r7
 8004c86:	ebab 0101 	sub.w	r1, fp, r1
 8004c8a:	f7ff ff81 	bl	8004b90 <coap_append_opt_hdr>
        if (rc) {
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d1f4      	bne.n	8004c7e <coap_append_array_opt+0x62>
        rc = os_mbuf_append(m, array, length);
 8004c94:	b2ba      	uxth	r2, r7
 8004c96:	4631      	mov	r1, r6
 8004c98:	4650      	mov	r0, sl
 8004c9a:	f001 fcf9 	bl	8006690 <os_mbuf_append>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	e7ed      	b.n	8004c7e <coap_append_array_opt+0x62>

08004ca2 <coap_append_int_opt>:
{
 8004ca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	9001      	str	r0, [sp, #4]
 8004caa:	4610      	mov	r0, r2
 8004cac:	461c      	mov	r4, r3
    if (0xFF000000 & value) {
 8004cae:	f013 4b7f 	ands.w	fp, r3, #4278190080	; 0xff000000
 8004cb2:	d13b      	bne.n	8004d2c <coap_append_int_opt+0x8a>
    size_t i = 0;
 8004cb4:	f04f 0800 	mov.w	r8, #0
    if (0xFFFF0000 & value) {
 8004cb8:	0c25      	lsrs	r5, r4, #16
 8004cba:	042d      	lsls	r5, r5, #16
 8004cbc:	2d00      	cmp	r5, #0
 8004cbe:	d038      	beq.n	8004d32 <coap_append_int_opt+0x90>
        ++i;
 8004cc0:	f108 0701 	add.w	r7, r8, #1
    if (0xFFFFFF00 & value) {
 8004cc4:	f034 0aff 	bics.w	sl, r4, #255	; 0xff
 8004cc8:	d035      	beq.n	8004d36 <coap_append_int_opt+0x94>
        ++i;
 8004cca:	1c7e      	adds	r6, r7, #1
    if (0xFFFFFFFF & value) {
 8004ccc:	b3ac      	cbz	r4, 8004d3a <coap_append_int_opt+0x98>
        ++i;
 8004cce:	f106 0901 	add.w	r9, r6, #1
    rc = coap_append_opt_hdr(m, number - current_number, i);
 8004cd2:	464a      	mov	r2, r9
 8004cd4:	1a09      	subs	r1, r1, r0
 8004cd6:	9801      	ldr	r0, [sp, #4]
 8004cd8:	f7ff ff5a 	bl	8004b90 <coap_append_opt_hdr>
    if (rc) {
 8004cdc:	4603      	mov	r3, r0
 8004cde:	bb08      	cbnz	r0, 8004d24 <coap_append_int_opt+0x82>
    if (0xFF000000 & value) {
 8004ce0:	f1bb 0f00 	cmp.w	fp, #0
 8004ce4:	d002      	beq.n	8004cec <coap_append_int_opt+0x4a>
        buffer[i++] = (uint8_t)(value >> 24);
 8004ce6:	0e23      	lsrs	r3, r4, #24
 8004ce8:	f88d 300c 	strb.w	r3, [sp, #12]
    if (0xFFFF0000 & value) {
 8004cec:	b12d      	cbz	r5, 8004cfa <coap_append_int_opt+0x58>
        buffer[i++] = (uint8_t)(value >> 16);
 8004cee:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8004cf2:	aa04      	add	r2, sp, #16
 8004cf4:	4490      	add	r8, r2
 8004cf6:	f808 3c04 	strb.w	r3, [r8, #-4]
    if (0xFFFFFF00 & value) {
 8004cfa:	f1ba 0f00 	cmp.w	sl, #0
 8004cfe:	d005      	beq.n	8004d0c <coap_append_int_opt+0x6a>
        buffer[i++] = (uint8_t)(value >> 8);
 8004d00:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8004d04:	aa04      	add	r2, sp, #16
 8004d06:	4417      	add	r7, r2
 8004d08:	f807 3c04 	strb.w	r3, [r7, #-4]
    if (0xFFFFFFFF & value) {
 8004d0c:	b11c      	cbz	r4, 8004d16 <coap_append_int_opt+0x74>
        buffer[i++] = (uint8_t)(value);
 8004d0e:	ab04      	add	r3, sp, #16
 8004d10:	441e      	add	r6, r3
 8004d12:	f806 4c04 	strb.w	r4, [r6, #-4]
    return os_mbuf_append(m, buffer, i);
 8004d16:	fa1f f289 	uxth.w	r2, r9
 8004d1a:	a903      	add	r1, sp, #12
 8004d1c:	9801      	ldr	r0, [sp, #4]
 8004d1e:	f001 fcb7 	bl	8006690 <os_mbuf_append>
 8004d22:	4603      	mov	r3, r0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	b005      	add	sp, #20
 8004d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ++i;
 8004d2c:	f04f 0801 	mov.w	r8, #1
 8004d30:	e7c2      	b.n	8004cb8 <coap_append_int_opt+0x16>
 8004d32:	4647      	mov	r7, r8
 8004d34:	e7c6      	b.n	8004cc4 <coap_append_int_opt+0x22>
 8004d36:	463e      	mov	r6, r7
 8004d38:	e7c8      	b.n	8004ccc <coap_append_int_opt+0x2a>
 8004d3a:	46b1      	mov	r9, r6
 8004d3c:	e7c9      	b.n	8004cd2 <coap_append_int_opt+0x30>
	...

08004d40 <coap_get_mid>:
}
/*---------------------------------------------------------------------------*/
uint16_t
coap_get_mid(void)
{
    return ++current_mid;
 8004d40:	4b02      	ldr	r3, [pc, #8]	; (8004d4c <coap_get_mid+0xc>)
 8004d42:	8818      	ldrh	r0, [r3, #0]
 8004d44:	3001      	adds	r0, #1
 8004d46:	b280      	uxth	r0, r0
 8004d48:	8018      	strh	r0, [r3, #0]
}
 8004d4a:	4770      	bx	lr
 8004d4c:	20000544 	.word	0x20000544

08004d50 <coap_init_message>:
/*---------------------------------------------------------------------------*/
void
coap_init_message(coap_packet_t *pkt, coap_message_type_t type,
                  uint8_t code, uint16_t mid)
{
 8004d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d52:	4604      	mov	r4, r0
 8004d54:	460f      	mov	r7, r1
 8004d56:	4616      	mov	r6, r2
 8004d58:	461d      	mov	r5, r3
    /* Important thing */
    memset(pkt, 0, sizeof(coap_packet_t));
 8004d5a:	226c      	movs	r2, #108	; 0x6c
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	f002 fce6 	bl	800772e <memset>

    pkt->type = type;
 8004d62:	7067      	strb	r7, [r4, #1]
    pkt->code = code;
 8004d64:	70a6      	strb	r6, [r4, #2]
    pkt->mid = mid;
 8004d66:	80a5      	strh	r5, [r4, #4]
}
 8004d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d6c <coap_serialize_message>:

/*---------------------------------------------------------------------------*/

int
coap_serialize_message(coap_packet_t *pkt, struct os_mbuf *m)
{
 8004d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	4604      	mov	r4, r0
 8004d74:	460d      	mov	r5, r1
    uint32_t u32;
    int tcp_hdr;
    int len, data_len;

    /* Initialize */
    pkt->version = 1;
 8004d76:	2301      	movs	r3, #1
 8004d78:	7003      	strb	r3, [r0, #0]
 * Whether transport uses TCP-style headers or not.
 */
static inline int
oc_endpoint_use_tcp(struct oc_endpoint *oe)
{
    return oc_transports[oe->ep.oe_type]->ot_flags & OC_TRANSPORT_USE_TCP;
 8004d7a:	7e0b      	ldrb	r3, [r1, #24]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	4aaf      	ldr	r2, [pc, #700]	; (8005040 <coap_serialize_message+0x2d4>)
 8004d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d86:	781e      	ldrb	r6, [r3, #0]
 8004d88:	f006 0601 	and.w	r6, r6, #1

    /*
     * Move data pointer, leave enough space to insert coap header and
     * token before options.
     */
    m->om_data += (sizeof(struct coap_tcp_hdr32) + pkt->token_len);
 8004d8c:	7983      	ldrb	r3, [r0, #6]
 8004d8e:	1d9a      	adds	r2, r3, #6
 8004d90:	680b      	ldr	r3, [r1, #0]
 8004d92:	4413      	add	r3, r2
 8004d94:	600b      	str	r3, [r1, #0]
    COAP_SERIALIZE_BYTE_OPT(pkt, m, COAP_OPTION_ETAG, etag, "ETag");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_IF_NONE_MATCH,
        content_format - pkt-> content_format /* hack to get a zero field */,
                           "If-None-Match");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_OBSERVE, observe, "Observe");
 8004d96:	7bc3      	ldrb	r3, [r0, #15]
 8004d98:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d9c:	d177      	bne.n	8004e8e <coap_serialize_message+0x122>
    current_number = 0;
 8004d9e:	2700      	movs	r7, #0
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_URI_PORT, uri_port,
                              "Uri-Port");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_PATH,
                              location_path, '/', "Location-Path");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 8004da0:	7c23      	ldrb	r3, [r4, #16]
 8004da2:	f013 0f08 	tst.w	r3, #8
 8004da6:	d17c      	bne.n	8004ea2 <coap_serialize_message+0x136>
                              "Uri-Path");

    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_CONTENT_FORMAT, content_format,
 8004da8:	7c23      	ldrb	r3, [r4, #16]
 8004daa:	f013 0f10 	tst.w	r3, #16
 8004dae:	f040 8086 	bne.w	8004ebe <coap_serialize_message+0x152>
                           "Content-Format");
#if 0
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_MAX_AGE, max_age, "Max-Age");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 8004db2:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f2c0 808b 	blt.w	8004ed2 <coap_serialize_message+0x166>
                              "Uri-Query");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_ACCEPT, accept, "Accept");
 8004dbc:	7c63      	ldrb	r3, [r4, #17]
 8004dbe:	f013 0f02 	tst.w	r3, #2
 8004dc2:	f040 8094 	bne.w	8004eee <coap_serialize_message+0x182>
#if 0
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_QUERY,
                              location_query, '&', "Location-Query");
#endif
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
 8004dc6:	f994 3011 	ldrsb.w	r3, [r4, #17]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f2c0 8098 	blt.w	8004f00 <coap_serialize_message+0x194>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK1, block1, "Block1");
 8004dd0:	7ca3      	ldrb	r3, [r4, #18]
 8004dd2:	f013 0f08 	tst.w	r3, #8
 8004dd6:	d019      	beq.n	8004e0c <coap_serialize_message+0xa0>
 8004dd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004dda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004dde:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8004de2:	b10b      	cbz	r3, 8004de8 <coap_serialize_message+0x7c>
 8004de4:	f048 0808 	orr.w	r8, r8, #8
 8004de8:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
 8004dec:	0900      	lsrs	r0, r0, #4
 8004dee:	f7ff febb 	bl	8004b68 <coap_log_2>
 8004df2:	f000 030f 	and.w	r3, r0, #15
 8004df6:	ea43 0308 	orr.w	r3, r3, r8
 8004dfa:	463a      	mov	r2, r7
 8004dfc:	211b      	movs	r1, #27
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f7ff ff4f 	bl	8004ca2 <coap_append_int_opt>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	f040 80a5 	bne.w	8004f54 <coap_serialize_message+0x1e8>
 8004e0a:	271b      	movs	r7, #27
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE2, size2, "Size2");
 8004e0c:	7ca3      	ldrb	r3, [r4, #18]
 8004e0e:	f013 0f10 	tst.w	r3, #16
 8004e12:	f040 808d 	bne.w	8004f30 <coap_serialize_message+0x1c4>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_URI, proxy_uri, '\0',
                              "Proxy-Uri");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_SCHEME, proxy_scheme,
                              '\0', "Proxy-Scheme");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
 8004e16:	7da3      	ldrb	r3, [r4, #22]
 8004e18:	f013 0f10 	tst.w	r3, #16
 8004e1c:	f040 8091 	bne.w	8004f42 <coap_serialize_message+0x1d6>

    /* Payload marker */
    if (pkt->payload_len) {
 8004e20:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f040 80a0 	bne.w	8004f6a <coap_serialize_message+0x1fe>
        if (os_mbuf_append(m, "\xff", 1)) {
            goto err_mem;
        }
    }
    data_len = OS_MBUF_PKTLEN(m) + pkt->payload_len;
 8004e2a:	8a2f      	ldrh	r7, [r5, #16]
 8004e2c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004e30:	441f      	add	r7, r3

    /*
     * Set header fields, aka CoAP header alignment nightmare.
     */
    if (!tcp_hdr) {
 8004e32:	2e00      	cmp	r6, #0
 8004e34:	f000 80a1 	beq.w	8004f7a <coap_serialize_message+0x20e>
        cuh->code = pkt->code;
        u16 = htons(pkt->mid);
        memcpy(&cuh->id, &u16, sizeof(u16));
        memcpy(cuh + 1, pkt->token, pkt->token_len);
    } else {
        if (data_len < 13) {
 8004e38:	2f0c      	cmp	r7, #12
 8004e3a:	f340 80cf 	ble.w	8004fdc <coap_serialize_message+0x270>
            cth0 = (struct coap_tcp_hdr0 *)m->om_data;
            cth0->data_len = data_len;
            cth0->token_len = pkt->token_len;
            cth0->code = pkt->code;
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
        } else if (data_len < 269) {
 8004e3e:	f5b7 7f86 	cmp.w	r7, #268	; 0x10c
 8004e42:	f340 80e2 	ble.w	800500a <coap_serialize_message+0x29e>
            cth8->type = COAP_TCP_TYPE8;
            cth8->token_len = pkt->token_len;
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
            cth8->code = pkt->code;
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
        } else if (data_len < 65805) {
 8004e46:	4b7f      	ldr	r3, [pc, #508]	; (8005044 <coap_serialize_message+0x2d8>)
 8004e48:	429f      	cmp	r7, r3
 8004e4a:	f300 80ff 	bgt.w	800504c <coap_serialize_message+0x2e0>
            len = sizeof(struct coap_tcp_hdr16) + pkt->token_len;
 8004e4e:	79a1      	ldrb	r1, [r4, #6]
            os_mbuf_prepend(m, len);
 8004e50:	3104      	adds	r1, #4
 8004e52:	4628      	mov	r0, r5
 8004e54:	f001 fd1f 	bl	8006896 <os_mbuf_prepend>
            cth16 = (struct coap_tcp_hdr16 *)m->om_data;
 8004e58:	6828      	ldr	r0, [r5, #0]
            cth16->type = COAP_TCP_TYPE16;
 8004e5a:	7803      	ldrb	r3, [r0, #0]
 8004e5c:	220e      	movs	r2, #14
 8004e5e:	f362 1307 	bfi	r3, r2, #4, #4
 8004e62:	7003      	strb	r3, [r0, #0]
            cth16->token_len = pkt->token_len;
 8004e64:	79a2      	ldrb	r2, [r4, #6]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f362 0303 	bfi	r3, r2, #0, #4
 8004e6c:	7003      	strb	r3, [r0, #0]
            u16 = htons(data_len - COAP_TCP_LENGTH16_OFF);
 8004e6e:	f2a7 170d 	subw	r7, r7, #269	; 0x10d
 8004e72:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8004e76:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
            memcpy(&cth16->data_len, &u16, sizeof(u16));
 8004e7a:	f8a0 7001 	strh.w	r7, [r0, #1]
            cth16->code = pkt->code;
 8004e7e:	78a3      	ldrb	r3, [r4, #2]
 8004e80:	70c3      	strb	r3, [r0, #3]
            memcpy(cth16 + 1, pkt->token, pkt->token_len);
 8004e82:	79a2      	ldrb	r2, [r4, #6]
 8004e84:	1de1      	adds	r1, r4, #7
 8004e86:	3004      	adds	r0, #4
 8004e88:	f002 fc44 	bl	8007714 <memcpy>
 8004e8c:	e096      	b.n	8004fbc <coap_serialize_message+0x250>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_OBSERVE, observe, "Observe");
 8004e8e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004e90:	2200      	movs	r2, #0
 8004e92:	2106      	movs	r1, #6
 8004e94:	4628      	mov	r0, r5
 8004e96:	f7ff ff04 	bl	8004ca2 <coap_append_int_opt>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d15a      	bne.n	8004f54 <coap_serialize_message+0x1e8>
 8004e9e:	2706      	movs	r7, #6
 8004ea0:	e77e      	b.n	8004da0 <coap_serialize_message+0x34>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 8004ea2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ea4:	222f      	movs	r2, #47	; 0x2f
 8004ea6:	9201      	str	r2, [sp, #4]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004eac:	463a      	mov	r2, r7
 8004eae:	210b      	movs	r1, #11
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f7ff feb3 	bl	8004c1c <coap_append_array_opt>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d14c      	bne.n	8004f54 <coap_serialize_message+0x1e8>
 8004eba:	270b      	movs	r7, #11
 8004ebc:	e774      	b.n	8004da8 <coap_serialize_message+0x3c>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_CONTENT_FORMAT, content_format,
 8004ebe:	8b23      	ldrh	r3, [r4, #24]
 8004ec0:	463a      	mov	r2, r7
 8004ec2:	210c      	movs	r1, #12
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f7ff feec 	bl	8004ca2 <coap_append_int_opt>
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d142      	bne.n	8004f54 <coap_serialize_message+0x1e8>
 8004ece:	270c      	movs	r7, #12
 8004ed0:	e76f      	b.n	8004db2 <coap_serialize_message+0x46>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 8004ed2:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
 8004ed6:	2226      	movs	r2, #38	; 0x26
 8004ed8:	9201      	str	r2, [sp, #4]
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004ede:	463a      	mov	r2, r7
 8004ee0:	210f      	movs	r1, #15
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f7ff fe9a 	bl	8004c1c <coap_append_array_opt>
 8004ee8:	bba0      	cbnz	r0, 8004f54 <coap_serialize_message+0x1e8>
 8004eea:	270f      	movs	r7, #15
 8004eec:	e766      	b.n	8004dbc <coap_serialize_message+0x50>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_ACCEPT, accept, "Accept");
 8004eee:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8004ef0:	463a      	mov	r2, r7
 8004ef2:	2111      	movs	r1, #17
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f7ff fed4 	bl	8004ca2 <coap_append_int_opt>
 8004efa:	bb58      	cbnz	r0, 8004f54 <coap_serialize_message+0x1e8>
 8004efc:	2711      	movs	r7, #17
 8004efe:	e762      	b.n	8004dc6 <coap_serialize_message+0x5a>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
 8004f00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f06:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004f0a:	b10b      	cbz	r3, 8004f10 <coap_serialize_message+0x1a4>
 8004f0c:	f048 0808 	orr.w	r8, r8, #8
 8004f10:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8004f12:	0900      	lsrs	r0, r0, #4
 8004f14:	f7ff fe28 	bl	8004b68 <coap_log_2>
 8004f18:	f000 030f 	and.w	r3, r0, #15
 8004f1c:	ea43 0308 	orr.w	r3, r3, r8
 8004f20:	463a      	mov	r2, r7
 8004f22:	2117      	movs	r1, #23
 8004f24:	4628      	mov	r0, r5
 8004f26:	f7ff febc 	bl	8004ca2 <coap_append_int_opt>
 8004f2a:	b998      	cbnz	r0, 8004f54 <coap_serialize_message+0x1e8>
 8004f2c:	2717      	movs	r7, #23
 8004f2e:	e74f      	b.n	8004dd0 <coap_serialize_message+0x64>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE2, size2, "Size2");
 8004f30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004f32:	463a      	mov	r2, r7
 8004f34:	211c      	movs	r1, #28
 8004f36:	4628      	mov	r0, r5
 8004f38:	f7ff feb3 	bl	8004ca2 <coap_append_int_opt>
 8004f3c:	b950      	cbnz	r0, 8004f54 <coap_serialize_message+0x1e8>
 8004f3e:	271c      	movs	r7, #28
 8004f40:	e769      	b.n	8004e16 <coap_serialize_message+0xaa>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
 8004f42:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f44:	463a      	mov	r2, r7
 8004f46:	213c      	movs	r1, #60	; 0x3c
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f7ff feaa 	bl	8004ca2 <coap_append_int_opt>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	f43f af66 	beq.w	8004e20 <coap_serialize_message+0xb4>
        OS_MBUF_PKTLEN(m), OS_MBUF_PKTLEN(m) - pkt->payload_len,
        pkt->payload_len);

    return 0;
err_mem:
    if (pkt->payload_m) {
 8004f54:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004f56:	2800      	cmp	r0, #0
 8004f58:	f000 80ac 	beq.w	80050b4 <coap_serialize_message+0x348>
        os_mbuf_free_chain(pkt->payload_m);
 8004f5c:	f001 fb7c 	bl	8006658 <os_mbuf_free_chain>
    }
    STATS_INC(coap_stats, oerr);
    return -1;
 8004f60:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004f64:	b002      	add	sp, #8
 8004f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (os_mbuf_append(m, "\xff", 1)) {
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	4936      	ldr	r1, [pc, #216]	; (8005048 <coap_serialize_message+0x2dc>)
 8004f6e:	4628      	mov	r0, r5
 8004f70:	f001 fb8e 	bl	8006690 <os_mbuf_append>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d1ed      	bne.n	8004f54 <coap_serialize_message+0x1e8>
 8004f78:	e757      	b.n	8004e2a <coap_serialize_message+0xbe>
        len = sizeof(struct coap_udp_hdr) + pkt->token_len;
 8004f7a:	79a1      	ldrb	r1, [r4, #6]
        os_mbuf_prepend(m, len);
 8004f7c:	3104      	adds	r1, #4
 8004f7e:	4628      	mov	r0, r5
 8004f80:	f001 fc89 	bl	8006896 <os_mbuf_prepend>
        cuh = (struct coap_udp_hdr *)m->om_data;
 8004f84:	6828      	ldr	r0, [r5, #0]
        cuh->version = pkt->version;
 8004f86:	7822      	ldrb	r2, [r4, #0]
 8004f88:	7803      	ldrb	r3, [r0, #0]
 8004f8a:	f362 1387 	bfi	r3, r2, #6, #2
 8004f8e:	7003      	strb	r3, [r0, #0]
        cuh->type = pkt->type;
 8004f90:	7862      	ldrb	r2, [r4, #1]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	f362 1305 	bfi	r3, r2, #4, #2
 8004f98:	7003      	strb	r3, [r0, #0]
        cuh->token_len = pkt->token_len;
 8004f9a:	79a2      	ldrb	r2, [r4, #6]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	f362 0303 	bfi	r3, r2, #0, #4
 8004fa2:	7003      	strb	r3, [r0, #0]
        cuh->code = pkt->code;
 8004fa4:	78a3      	ldrb	r3, [r4, #2]
 8004fa6:	7043      	strb	r3, [r0, #1]
        u16 = htons(pkt->mid);
 8004fa8:	88a2      	ldrh	r2, [r4, #4]
 8004faa:	0213      	lsls	r3, r2, #8
 8004fac:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
        memcpy(&cuh->id, &u16, sizeof(u16));
 8004fb0:	8043      	strh	r3, [r0, #2]
        memcpy(cuh + 1, pkt->token, pkt->token_len);
 8004fb2:	79a2      	ldrb	r2, [r4, #6]
 8004fb4:	1de1      	adds	r1, r4, #7
 8004fb6:	3004      	adds	r0, #4
 8004fb8:	f002 fbac 	bl	8007714 <memcpy>
    if (pkt->payload_m) {
 8004fbc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d076      	beq.n	80050b0 <coap_serialize_message+0x344>
        assert(pkt->payload_len <= OS_MBUF_PKTLEN(pkt->payload_m));
 8004fc2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004fc6:	8a01      	ldrh	r1, [r0, #16]
 8004fc8:	428b      	cmp	r3, r1
 8004fca:	d867      	bhi.n	800509c <coap_serialize_message+0x330>
        if (pkt->payload_len < OS_MBUF_PKTLEN(pkt->payload_m)) {
 8004fcc:	428b      	cmp	r3, r1
 8004fce:	d36b      	bcc.n	80050a8 <coap_serialize_message+0x33c>
        os_mbuf_concat(m, pkt->payload_m);
 8004fd0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f001 fcbe 	bl	8006954 <os_mbuf_concat>
    return 0;
 8004fd8:	2000      	movs	r0, #0
 8004fda:	e7c3      	b.n	8004f64 <coap_serialize_message+0x1f8>
            len = sizeof(struct coap_tcp_hdr0) + pkt->token_len;
 8004fdc:	79a1      	ldrb	r1, [r4, #6]
            os_mbuf_prepend(m, len);
 8004fde:	3102      	adds	r1, #2
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f001 fc58 	bl	8006896 <os_mbuf_prepend>
            cth0 = (struct coap_tcp_hdr0 *)m->om_data;
 8004fe6:	6828      	ldr	r0, [r5, #0]
            cth0->data_len = data_len;
 8004fe8:	7803      	ldrb	r3, [r0, #0]
 8004fea:	f367 1307 	bfi	r3, r7, #4, #4
 8004fee:	7003      	strb	r3, [r0, #0]
            cth0->token_len = pkt->token_len;
 8004ff0:	79a2      	ldrb	r2, [r4, #6]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f362 0303 	bfi	r3, r2, #0, #4
 8004ff8:	7003      	strb	r3, [r0, #0]
            cth0->code = pkt->code;
 8004ffa:	78a3      	ldrb	r3, [r4, #2]
 8004ffc:	7043      	strb	r3, [r0, #1]
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
 8004ffe:	79a2      	ldrb	r2, [r4, #6]
 8005000:	1de1      	adds	r1, r4, #7
 8005002:	3002      	adds	r0, #2
 8005004:	f002 fb86 	bl	8007714 <memcpy>
 8005008:	e7d8      	b.n	8004fbc <coap_serialize_message+0x250>
            len = sizeof(struct coap_tcp_hdr8) + pkt->token_len;
 800500a:	79a1      	ldrb	r1, [r4, #6]
            os_mbuf_prepend(m, len);
 800500c:	3103      	adds	r1, #3
 800500e:	4628      	mov	r0, r5
 8005010:	f001 fc41 	bl	8006896 <os_mbuf_prepend>
            cth8 = (struct coap_tcp_hdr8 *)m->om_data;
 8005014:	6828      	ldr	r0, [r5, #0]
            cth8->type = COAP_TCP_TYPE8;
 8005016:	7803      	ldrb	r3, [r0, #0]
 8005018:	220d      	movs	r2, #13
 800501a:	f362 1307 	bfi	r3, r2, #4, #4
 800501e:	7003      	strb	r3, [r0, #0]
            cth8->token_len = pkt->token_len;
 8005020:	79a2      	ldrb	r2, [r4, #6]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	f362 0303 	bfi	r3, r2, #0, #4
 8005028:	7003      	strb	r3, [r0, #0]
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
 800502a:	3f0d      	subs	r7, #13
 800502c:	7047      	strb	r7, [r0, #1]
            cth8->code = pkt->code;
 800502e:	78a3      	ldrb	r3, [r4, #2]
 8005030:	7083      	strb	r3, [r0, #2]
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
 8005032:	79a2      	ldrb	r2, [r4, #6]
 8005034:	1de1      	adds	r1, r4, #7
 8005036:	3003      	adds	r0, #3
 8005038:	f002 fb6c 	bl	8007714 <memcpy>
 800503c:	e7be      	b.n	8004fbc <coap_serialize_message+0x250>
 800503e:	bf00      	nop
 8005040:	20002e08 	.word	0x20002e08
 8005044:	0001010c 	.word	0x0001010c
 8005048:	0800f414 	.word	0x0800f414
            len = sizeof(struct coap_tcp_hdr32) + pkt->token_len;
 800504c:	79a1      	ldrb	r1, [r4, #6]
            os_mbuf_prepend(m, len);
 800504e:	3106      	adds	r1, #6
 8005050:	4628      	mov	r0, r5
 8005052:	f001 fc20 	bl	8006896 <os_mbuf_prepend>
            cth32 = (struct coap_tcp_hdr32 *)m->om_data;
 8005056:	6828      	ldr	r0, [r5, #0]
            cth32->type = COAP_TCP_TYPE32;
 8005058:	7803      	ldrb	r3, [r0, #0]
 800505a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800505e:	7003      	strb	r3, [r0, #0]
            cth32->token_len = pkt->token_len;
 8005060:	79a2      	ldrb	r2, [r4, #6]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f362 0303 	bfi	r3, r2, #0, #4
 8005068:	7003      	strb	r3, [r0, #0]
            u32 = htonl(data_len - COAP_TCP_LENGTH32_OFF);
 800506a:	f5a7 3780 	sub.w	r7, r7, #65536	; 0x10000
 800506e:	f2a7 170d 	subw	r7, r7, #269	; 0x10d
 8005072:	123b      	asrs	r3, r7, #8
 8005074:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005078:	ea43 6317 	orr.w	r3, r3, r7, lsr #24
 800507c:	023a      	lsls	r2, r7, #8
 800507e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8005082:	4313      	orrs	r3, r2
 8005084:	ea43 6707 	orr.w	r7, r3, r7, lsl #24
            memcpy(&cth32->data_len, &u32, sizeof(u32));
 8005088:	f8c0 7001 	str.w	r7, [r0, #1]
            cth32->code = pkt->code;
 800508c:	78a3      	ldrb	r3, [r4, #2]
 800508e:	7143      	strb	r3, [r0, #5]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 8005090:	79a2      	ldrb	r2, [r4, #6]
 8005092:	1de1      	adds	r1, r4, #7
 8005094:	3006      	adds	r0, #6
 8005096:	f002 fb3d 	bl	8007714 <memcpy>
 800509a:	e78f      	b.n	8004fbc <coap_serialize_message+0x250>
        assert(pkt->payload_len <= OS_MBUF_PKTLEN(pkt->payload_m));
 800509c:	2300      	movs	r3, #0
 800509e:	461a      	mov	r2, r3
 80050a0:	4619      	mov	r1, r3
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fea6 	bl	8005df4 <__assert_func>
            os_mbuf_adj(pkt->payload_m,
 80050a8:	1ac9      	subs	r1, r1, r3
 80050aa:	f001 fba2 	bl	80067f2 <os_mbuf_adj>
 80050ae:	e78f      	b.n	8004fd0 <coap_serialize_message+0x264>
    return 0;
 80050b0:	2000      	movs	r0, #0
 80050b2:	e757      	b.n	8004f64 <coap_serialize_message+0x1f8>
    return -1;
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	e754      	b.n	8004f64 <coap_serialize_message+0x1f8>
 80050ba:	bf00      	nop

080050bc <coap_send_message>:
/*---------------------------------------------------------------------------*/
void
coap_send_message(struct os_mbuf *m, int dup)
{
 80050bc:	b508      	push	{r3, lr}
 80050be:	4603      	mov	r3, r0
    OC_LOG(INFO, "coap_send_message(): (%u) %s\n", OS_MBUF_PKTLEN(m),
      dup ? "dup" : "");

    STATS_INC(coap_stats, oframe);

    if (dup) {
 80050c0:	b119      	cbz	r1, 80050ca <coap_send_message+0xe>
        m = os_mbuf_dup(m);
 80050c2:	f001 fb3a 	bl	800673a <os_mbuf_dup>
        if (!m) {
 80050c6:	4603      	mov	r3, r0
 80050c8:	b110      	cbz	r0, 80050d0 <coap_send_message+0x14>
            STATS_INC(coap_stats, oerr);
            return;
        }
    }
    oc_send_message(m);
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff fc6e 	bl	80049ac <oc_send_message>
}
 80050d0:	bd08      	pop	{r3, pc}

080050d2 <coap_set_token>:
    }
}
/*---------------------------------------------------------------------------*/
int
coap_set_token(coap_packet_t *pkt, const uint8_t *token, size_t token_len)
{
 80050d2:	b510      	push	{r4, lr}
    pkt->token_len = MIN(COAP_TOKEN_LEN, token_len);
 80050d4:	2a08      	cmp	r2, #8
 80050d6:	bf28      	it	cs
 80050d8:	2208      	movcs	r2, #8
 80050da:	b2d4      	uxtb	r4, r2
 80050dc:	7184      	strb	r4, [r0, #6]
    memcpy(pkt->token, token, pkt->token_len);
 80050de:	4622      	mov	r2, r4
 80050e0:	3007      	adds	r0, #7
 80050e2:	f002 fb17 	bl	8007714 <memcpy>

    return pkt->token_len;
}
 80050e6:	4620      	mov	r0, r4
 80050e8:	bd10      	pop	{r4, pc}

080050ea <coap_set_header_content_format>:
}
#endif
int
coap_set_header_content_format(coap_packet_t *pkt, unsigned int format)
{
    pkt->content_format = format;
 80050ea:	8301      	strh	r1, [r0, #24]
    SET_OPTION(pkt, COAP_OPTION_CONTENT_FORMAT);
 80050ec:	7c03      	ldrb	r3, [r0, #16]
 80050ee:	f043 0310 	orr.w	r3, r3, #16
 80050f2:	7403      	strb	r3, [r0, #16]
    return 1;
}
 80050f4:	2001      	movs	r0, #1
 80050f6:	4770      	bx	lr

080050f8 <coap_set_header_accept>:

#ifdef OC_CLIENT
int
coap_set_header_accept(coap_packet_t *pkt, unsigned int accept)
{
    pkt->accept = accept;
 80050f8:	8681      	strh	r1, [r0, #52]	; 0x34
    SET_OPTION(pkt, COAP_OPTION_ACCEPT);
 80050fa:	7c43      	ldrb	r3, [r0, #17]
 80050fc:	f043 0302 	orr.w	r3, r3, #2
 8005100:	7443      	strb	r3, [r0, #17]
    return 1;
}
 8005102:	2001      	movs	r0, #1
 8005104:	4770      	bx	lr

08005106 <coap_set_header_uri_path>:
    return maxlen;
}
#ifdef OC_CLIENT
int
coap_set_header_uri_path(coap_packet_t *pkt, const char *path)
{
 8005106:	b510      	push	{r4, lr}
 8005108:	4604      	mov	r4, r0
    while (path[0] == '/') {
 800510a:	e000      	b.n	800510e <coap_set_header_uri_path+0x8>
        ++path;
 800510c:	3101      	adds	r1, #1
    while (path[0] == '/') {
 800510e:	780b      	ldrb	r3, [r1, #0]
 8005110:	2b2f      	cmp	r3, #47	; 0x2f
 8005112:	d0fb      	beq.n	800510c <coap_set_header_uri_path+0x6>
    }
    pkt->uri_path = (char *)path;
 8005114:	62e1      	str	r1, [r4, #44]	; 0x2c
    pkt->uri_path_len = strlen(path);
 8005116:	4608      	mov	r0, r1
 8005118:	f002 fb32 	bl	8007780 <strlen>
 800511c:	b280      	uxth	r0, r0
 800511e:	8560      	strh	r0, [r4, #42]	; 0x2a

    SET_OPTION(pkt, COAP_OPTION_URI_PATH);
 8005120:	7c23      	ldrb	r3, [r4, #16]
 8005122:	f043 0308 	orr.w	r3, r3, #8
 8005126:	7423      	strb	r3, [r4, #16]
    return pkt->uri_path_len;
}
 8005128:	bd10      	pop	{r4, pc}

0800512a <coap_set_header_uri_query>:
    return maxlen;
}
#ifdef OC_CLIENT
int
coap_set_header_uri_query(coap_packet_t *pkt, const char *query)
{
 800512a:	b510      	push	{r4, lr}
 800512c:	4604      	mov	r4, r0
    while (query[0] == '?') {
 800512e:	e000      	b.n	8005132 <coap_set_header_uri_query+0x8>
        ++query;
 8005130:	3101      	adds	r1, #1
    while (query[0] == '?') {
 8005132:	780b      	ldrb	r3, [r1, #0]
 8005134:	2b3f      	cmp	r3, #63	; 0x3f
 8005136:	d0fb      	beq.n	8005130 <coap_set_header_uri_query+0x6>
    }
    pkt->uri_query = (char *)query;
 8005138:	65e1      	str	r1, [r4, #92]	; 0x5c
    pkt->uri_query_len = strlen(query);
 800513a:	4608      	mov	r0, r1
 800513c:	f002 fb20 	bl	8007780 <strlen>
 8005140:	b280      	uxth	r0, r0
 8005142:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58

    SET_OPTION(pkt, COAP_OPTION_URI_QUERY);
 8005146:	7c23      	ldrb	r3, [r4, #16]
 8005148:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800514c:	7423      	strb	r3, [r4, #16]
    return pkt->uri_query_len;
}
 800514e:	bd10      	pop	{r4, pc}

08005150 <coap_set_header_observe>:
}

int
coap_set_header_observe(coap_packet_t *pkt, uint32_t observe)
{
    pkt->observe = observe;
 8005150:	6301      	str	r1, [r0, #48]	; 0x30
    SET_OPTION(pkt, COAP_OPTION_OBSERVE);
 8005152:	7bc3      	ldrb	r3, [r0, #15]
 8005154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005158:	73c3      	strb	r3, [r0, #15]
    return 1;
}
 800515a:	2001      	movs	r0, #1
 800515c:	4770      	bx	lr
	...

08005160 <oc_evq_get>:

struct os_eventq *
oc_evq_get(void)
{
    return oc_evq;
}
 8005160:	4b01      	ldr	r3, [pc, #4]	; (8005168 <oc_evq_get+0x8>)
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	20000548 	.word	0x20000548

0800516c <oc_evq_set>:

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
 800516c:	4b01      	ldr	r3, [pc, #4]	; (8005174 <oc_evq_set+0x8>)
 800516e:	6018      	str	r0, [r3, #0]
}
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000548 	.word	0x20000548

08005178 <oc_transport_register>:

int8_t
oc_transport_register(const struct oc_transport *ot)
{
    int i;
    int first = -1;
 8005178:	f04f 31ff 	mov.w	r1, #4294967295

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 800517c:	2300      	movs	r3, #0
 800517e:	e000      	b.n	8005182 <oc_transport_register+0xa>
 8005180:	3301      	adds	r3, #1
 8005182:	2b07      	cmp	r3, #7
 8005184:	dc0d      	bgt.n	80051a2 <oc_transport_register+0x2a>
        if (oc_transports[i] == ot) {
 8005186:	4a09      	ldr	r2, [pc, #36]	; (80051ac <oc_transport_register+0x34>)
 8005188:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800518c:	4282      	cmp	r2, r0
 800518e:	d00a      	beq.n	80051a6 <oc_transport_register+0x2e>
            return -1;
        }
        if (oc_transports[i] == NULL && first < 0) {
 8005190:	2a00      	cmp	r2, #0
 8005192:	d1f5      	bne.n	8005180 <oc_transport_register+0x8>
 8005194:	2900      	cmp	r1, #0
 8005196:	daf3      	bge.n	8005180 <oc_transport_register+0x8>
            oc_transports[i] = ot;
 8005198:	4a04      	ldr	r2, [pc, #16]	; (80051ac <oc_transport_register+0x34>)
 800519a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
            first = i;
 800519e:	4619      	mov	r1, r3
 80051a0:	e7ee      	b.n	8005180 <oc_transport_register+0x8>
        }
    }
    return first;
 80051a2:	b248      	sxtb	r0, r1
 80051a4:	4770      	bx	lr
            return -1;
 80051a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80051aa:	4770      	bx	lr
 80051ac:	20002e08 	.word	0x20002e08

080051b0 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
 80051b0:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
 80051b2:	7e03      	ldrb	r3, [r0, #24]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4a04      	ldr	r2, [pc, #16]	; (80051cc <oc_send_buffer+0x1c>)
 80051ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
 80051be:	b113      	cbz	r3, 80051c6 <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
 80051c4:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
 80051c6:	f001 fa47 	bl	8006658 <os_mbuf_free_chain>
}
 80051ca:	e7fb      	b.n	80051c4 <oc_send_buffer+0x14>
 80051cc:	20002e08 	.word	0x20002e08

080051d0 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
 80051d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d4:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 80051d6:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
 80051d8:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 80051da:	e002      	b.n	80051e2 <oc_send_multicast_message+0x12>
 80051dc:	4635      	mov	r5, r6
 80051de:	3401      	adds	r4, #1
 80051e0:	462e      	mov	r6, r5
 80051e2:	2c07      	cmp	r4, #7
 80051e4:	dc12      	bgt.n	800520c <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <oc_send_multicast_message+0x48>)
 80051e8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80051ec:	2d00      	cmp	r5, #0
 80051ee:	d0f5      	beq.n	80051dc <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
 80051f0:	2e00      	cmp	r6, #0
 80051f2:	d0f4      	beq.n	80051de <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
 80051f4:	4638      	mov	r0, r7
 80051f6:	f001 faa0 	bl	800673a <os_mbuf_dup>
 80051fa:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
 80051fc:	6933      	ldr	r3, [r6, #16]
 80051fe:	4638      	mov	r0, r7
 8005200:	4798      	blx	r3
            if (!n) {
 8005202:	f1b8 0f00 	cmp.w	r8, #0
 8005206:	d005      	beq.n	8005214 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
 8005208:	4647      	mov	r7, r8
 800520a:	e7e8      	b.n	80051de <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
 800520c:	b116      	cbz	r6, 8005214 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
 800520e:	6933      	ldr	r3, [r6, #16]
 8005210:	4638      	mov	r0, r7
 8005212:	4798      	blx	r3
    }
}
 8005214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005218:	20002e08 	.word	0x20002e08

0800521c <oc_init>:
    return rc;
}

void
oc_init(void)
{
 800521c:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
 800521e:	4b07      	ldr	r3, [pc, #28]	; (800523c <oc_init+0x20>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	b133      	cbz	r3, 8005232 <oc_init+0x16>
    oc_ri_mem_init();
 8005224:	f7ff fc24 	bl	8004a70 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
 8005228:	f001 f994 	bl	8006554 <os_eventq_dflt_get>
 800522c:	f7ff ff9e 	bl	800516c <oc_evq_set>
}
 8005230:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
 8005232:	461a      	mov	r2, r3
 8005234:	4619      	mov	r1, r3
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fddc 	bl	8005df4 <__assert_func>
 800523c:	20002e28 	.word	0x20002e28

08005240 <oc_clock_time>:
void oc_clock_init(void)
{
    /* in mynewt clock is initialized elsewhere */
}
oc_clock_time_t oc_clock_time(void)
{
 8005240:	b508      	push	{r3, lr}
    return os_time_get();
 8005242:	f002 f8af 	bl	80073a4 <os_time_get>
}
 8005246:	bd08      	pop	{r3, pc}

08005248 <oc_random_rand>:
{
    srand(seed);
}

unsigned short oc_random_rand(void)
{
 8005248:	b508      	push	{r3, lr}
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
 800524a:	f002 f969 	bl	8007520 <lrand48>
    return rand();
}
 800524e:	b280      	uxth	r0, r0
 8005250:	bd08      	pop	{r3, pc}

08005252 <oc_new_string>:
#include "oic/port/mynewt/config.h"
#include "oic/oc_helpers.h"

void
oc_new_string(oc_string_t *os, const char str[])
{
 8005252:	b570      	push	{r4, r5, r6, lr}
 8005254:	4605      	mov	r5, r0
 8005256:	460e      	mov	r6, r1
    int len = strlen(str);
 8005258:	4608      	mov	r0, r1
 800525a:	f002 fa91 	bl	8007780 <strlen>
 800525e:	4604      	mov	r4, r0

    os->os_str = malloc(len + 1);
 8005260:	3001      	adds	r0, #1
 8005262:	f002 f9e7 	bl	8007634 <malloc>
 8005266:	6068      	str	r0, [r5, #4]
    if (os->os_str) {
 8005268:	b140      	cbz	r0, 800527c <oc_new_string+0x2a>
        os->os_sz = len + 1;
 800526a:	1c63      	adds	r3, r4, #1
 800526c:	802b      	strh	r3, [r5, #0]
        memcpy(os->os_str, str, len);
 800526e:	4622      	mov	r2, r4
 8005270:	4631      	mov	r1, r6
 8005272:	f002 fa4f 	bl	8007714 <memcpy>
        os->os_str[len] = '\0';
 8005276:	686b      	ldr	r3, [r5, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	551a      	strb	r2, [r3, r4]
    }
}
 800527c:	bd70      	pop	{r4, r5, r6, pc}

0800527e <oc_free_string>:
    }
}

void
oc_free_string(oc_string_t *os)
{
 800527e:	b510      	push	{r4, lr}
 8005280:	4604      	mov	r4, r0
    free(os->os_str);
 8005282:	6840      	ldr	r0, [r0, #4]
 8005284:	f002 fa0c 	bl	80076a0 <free>
    os->os_sz = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	8023      	strh	r3, [r4, #0]
}
 800528c:	bd10      	pop	{r4, pc}

0800528e <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
 800528e:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
 8005290:	f000 fdb0 	bl	8005df4 <__assert_func>

08005294 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
 8005294:	4b01      	ldr	r3, [pc, #4]	; (800529c <sysinit_start+0x8>)
 8005296:	2201      	movs	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
}
 800529a:	4770      	bx	lr
 800529c:	20002e28 	.word	0x20002e28

080052a0 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
 80052a0:	4b01      	ldr	r3, [pc, #4]	; (80052a8 <sysinit_end+0x8>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]
}
 80052a6:	4770      	bx	lr
 80052a8:	20002e28 	.word	0x20002e28

080052ac <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
 80052ac:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
 80052ae:	4803      	ldr	r0, [pc, #12]	; (80052bc <__wrap_coap_receive+0x10>)
 80052b0:	f7fe fe74 	bl	8003f9c <console_printf>
    return -1;
}
 80052b4:	f04f 30ff 	mov.w	r0, #4294967295
 80052b8:	bd08      	pop	{r3, pc}
 80052ba:	bf00      	nop
 80052bc:	0800f418 	.word	0x0800f418

080052c0 <_fini>:
//  Other Functions

//  Dummy destructor for global C++ objects, since our program never terminates.  
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
void _fini(void) { }
 80052c0:	4770      	bx	lr
	...

080052c4 <json_encode_object_start>:
    (__e)->je_write((__e)->je_arg, "]", sizeof("]")-1);


int
json_encode_object_start(struct json_encoder *encoder)
{
 80052c4:	b510      	push	{r4, lr}
 80052c6:	4604      	mov	r4, r0
    if (encoder->je_wr_commas) {
 80052c8:	7a03      	ldrb	r3, [r0, #8]
 80052ca:	f013 0f01 	tst.w	r3, #1
 80052ce:	d008      	beq.n	80052e2 <json_encode_object_start+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 80052d0:	6803      	ldr	r3, [r0, #0]
 80052d2:	2201      	movs	r2, #1
 80052d4:	4908      	ldr	r1, [pc, #32]	; (80052f8 <json_encode_object_start+0x34>)
 80052d6:	6840      	ldr	r0, [r0, #4]
 80052d8:	4798      	blx	r3
        encoder->je_wr_commas = 0;
 80052da:	7a23      	ldrb	r3, [r4, #8]
 80052dc:	f36f 0300 	bfc	r3, #0, #1
 80052e0:	7223      	strb	r3, [r4, #8]
    }
    JSON_ENCODE_OBJECT_START(encoder);
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	2201      	movs	r2, #1
 80052e6:	4905      	ldr	r1, [pc, #20]	; (80052fc <json_encode_object_start+0x38>)
 80052e8:	6860      	ldr	r0, [r4, #4]
 80052ea:	4798      	blx	r3
    encoder->je_wr_commas = 0;
 80052ec:	7a23      	ldrb	r3, [r4, #8]
 80052ee:	f36f 0300 	bfc	r3, #0, #1
 80052f2:	7223      	strb	r3, [r4, #8]

    return (0);
}
 80052f4:	2000      	movs	r0, #0
 80052f6:	bd10      	pop	{r4, pc}
 80052f8:	0800f440 	.word	0x0800f440
 80052fc:	0800f444 	.word	0x0800f444

08005300 <json_encode_object_key>:
    return (rc);
}

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	4604      	mov	r4, r0
 8005304:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
 8005306:	7a03      	ldrb	r3, [r0, #8]
 8005308:	f013 0f01 	tst.w	r3, #1
 800530c:	d008      	beq.n	8005320 <json_encode_object_key+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 800530e:	6803      	ldr	r3, [r0, #0]
 8005310:	2201      	movs	r2, #1
 8005312:	490d      	ldr	r1, [pc, #52]	; (8005348 <json_encode_object_key+0x48>)
 8005314:	6840      	ldr	r0, [r0, #4]
 8005316:	4798      	blx	r3
        encoder->je_wr_commas = 0;
 8005318:	7a23      	ldrb	r3, [r4, #8]
 800531a:	f36f 0300 	bfc	r3, #0, #1
 800531e:	7223      	strb	r3, [r4, #8]
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	2201      	movs	r2, #1
 8005324:	4909      	ldr	r1, [pc, #36]	; (800534c <json_encode_object_key+0x4c>)
 8005326:	6860      	ldr	r0, [r4, #4]
 8005328:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
 800532a:	6826      	ldr	r6, [r4, #0]
 800532c:	4628      	mov	r0, r5
 800532e:	f002 fa27 	bl	8007780 <strlen>
 8005332:	4602      	mov	r2, r0
 8005334:	4629      	mov	r1, r5
 8005336:	6860      	ldr	r0, [r4, #4]
 8005338:	47b0      	blx	r6
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	2203      	movs	r2, #3
 800533e:	4904      	ldr	r1, [pc, #16]	; (8005350 <json_encode_object_key+0x50>)
 8005340:	6860      	ldr	r0, [r4, #4]
 8005342:	4798      	blx	r3

    return (0);
}
 8005344:	2000      	movs	r0, #0
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	0800f440 	.word	0x0800f440
 800534c:	0800f438 	.word	0x0800f438
 8005350:	0800f43c 	.word	0x0800f43c

08005354 <json_encode_object_entry>:

int
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
 8005354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005356:	4604      	mov	r4, r0
 8005358:	460d      	mov	r5, r1
 800535a:	4616      	mov	r6, r2
    int rc;

    if (encoder->je_wr_commas) {
 800535c:	7a03      	ldrb	r3, [r0, #8]
 800535e:	f013 0f01 	tst.w	r3, #1
 8005362:	d008      	beq.n	8005376 <json_encode_object_entry+0x22>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 8005364:	6803      	ldr	r3, [r0, #0]
 8005366:	2201      	movs	r2, #1
 8005368:	4912      	ldr	r1, [pc, #72]	; (80053b4 <json_encode_object_entry+0x60>)
 800536a:	6840      	ldr	r0, [r0, #4]
 800536c:	4798      	blx	r3
        encoder->je_wr_commas = 0;
 800536e:	7a23      	ldrb	r3, [r4, #8]
 8005370:	f36f 0300 	bfc	r3, #0, #1
 8005374:	7223      	strb	r3, [r4, #8]
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	2201      	movs	r2, #1
 800537a:	490f      	ldr	r1, [pc, #60]	; (80053b8 <json_encode_object_entry+0x64>)
 800537c:	6860      	ldr	r0, [r4, #4]
 800537e:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
 8005380:	6827      	ldr	r7, [r4, #0]
 8005382:	4628      	mov	r0, r5
 8005384:	f002 f9fc 	bl	8007780 <strlen>
 8005388:	4602      	mov	r2, r0
 800538a:	4629      	mov	r1, r5
 800538c:	6860      	ldr	r0, [r4, #4]
 800538e:	47b8      	blx	r7
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	2203      	movs	r2, #3
 8005394:	4909      	ldr	r1, [pc, #36]	; (80053bc <json_encode_object_entry+0x68>)
 8005396:	6860      	ldr	r0, [r4, #4]
 8005398:	4798      	blx	r3

    rc = json_encode_value(encoder, val);
 800539a:	4631      	mov	r1, r6
 800539c:	4620      	mov	r0, r4
 800539e:	f000 f80f 	bl	80053c0 <json_encode_value>
    if (rc != 0) {
 80053a2:	4602      	mov	r2, r0
 80053a4:	b918      	cbnz	r0, 80053ae <json_encode_object_entry+0x5a>
        goto err;
    }
    encoder->je_wr_commas = 1;
 80053a6:	7a23      	ldrb	r3, [r4, #8]
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
 80053ae:	4610      	mov	r0, r2
 80053b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b2:	bf00      	nop
 80053b4:	0800f440 	.word	0x0800f440
 80053b8:	0800f438 	.word	0x0800f438
 80053bc:	0800f43c 	.word	0x0800f43c

080053c0 <json_encode_value>:
{
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	4605      	mov	r5, r0
 80053c4:	460c      	mov	r4, r1
    switch (jv->jv_type) {
 80053c6:	784b      	ldrb	r3, [r1, #1]
 80053c8:	2b05      	cmp	r3, #5
 80053ca:	f200 80d4 	bhi.w	8005576 <json_encode_value+0x1b6>
 80053ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 80053d2:	0006      	.short	0x0006
 80053d4:	0029001a 	.word	0x0029001a
 80053d8:	008f0038 	.word	0x008f0038
 80053dc:	00b4      	.short	0x00b4
            len = sprintf(encoder->je_encode_buf, "%s",
 80053de:	f100 0609 	add.w	r6, r0, #9
                    jv->jv_val.u > 0 ? "true" : "false");
 80053e2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
            len = sprintf(encoder->je_encode_buf, "%s",
 80053e6:	4313      	orrs	r3, r2
 80053e8:	d10b      	bne.n	8005402 <json_encode_value+0x42>
 80053ea:	4a64      	ldr	r2, [pc, #400]	; (800557c <json_encode_value+0x1bc>)
 80053ec:	4964      	ldr	r1, [pc, #400]	; (8005580 <json_encode_value+0x1c0>)
 80053ee:	4630      	mov	r0, r6
 80053f0:	f002 f9a8 	bl	8007744 <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	4602      	mov	r2, r0
 80053f8:	4631      	mov	r1, r6
 80053fa:	6868      	ldr	r0, [r5, #4]
 80053fc:	4798      	blx	r3
    return (0);
 80053fe:	2300      	movs	r3, #0
            break;
 8005400:	e074      	b.n	80054ec <json_encode_value+0x12c>
            len = sprintf(encoder->je_encode_buf, "%s",
 8005402:	4a60      	ldr	r2, [pc, #384]	; (8005584 <json_encode_value+0x1c4>)
 8005404:	e7f2      	b.n	80053ec <json_encode_value+0x2c>
            len = sprintf(encoder->je_encode_buf, "%llu",
 8005406:	f100 0609 	add.w	r6, r0, #9
 800540a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800540e:	495e      	ldr	r1, [pc, #376]	; (8005588 <json_encode_value+0x1c8>)
 8005410:	4630      	mov	r0, r6
 8005412:	f002 f997 	bl	8007744 <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
 8005416:	682b      	ldr	r3, [r5, #0]
 8005418:	4602      	mov	r2, r0
 800541a:	4631      	mov	r1, r6
 800541c:	6868      	ldr	r0, [r5, #4]
 800541e:	4798      	blx	r3
    return (0);
 8005420:	2300      	movs	r3, #0
            break;
 8005422:	e063      	b.n	80054ec <json_encode_value+0x12c>
            len = sprintf(encoder->je_encode_buf, "%lld",
 8005424:	f100 0609 	add.w	r6, r0, #9
 8005428:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800542c:	4957      	ldr	r1, [pc, #348]	; (800558c <json_encode_value+0x1cc>)
 800542e:	4630      	mov	r0, r6
 8005430:	f002 f988 	bl	8007744 <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
 8005434:	682b      	ldr	r3, [r5, #0]
 8005436:	4602      	mov	r2, r0
 8005438:	4631      	mov	r1, r6
 800543a:	6868      	ldr	r0, [r5, #4]
 800543c:	4798      	blx	r3
    return (0);
 800543e:	2300      	movs	r3, #0
            break;
 8005440:	e054      	b.n	80054ec <json_encode_value+0x12c>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 8005442:	6803      	ldr	r3, [r0, #0]
 8005444:	2201      	movs	r2, #1
 8005446:	4952      	ldr	r1, [pc, #328]	; (8005590 <json_encode_value+0x1d0>)
 8005448:	6840      	ldr	r0, [r0, #4]
 800544a:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 800544c:	2600      	movs	r6, #0
 800544e:	e01a      	b.n	8005486 <json_encode_value+0xc6>
                switch (jv->jv_val.str[i]) {
 8005450:	2b22      	cmp	r3, #34	; 0x22
 8005452:	d00c      	beq.n	800546e <json_encode_value+0xae>
 8005454:	d807      	bhi.n	8005466 <json_encode_value+0xa6>
 8005456:	2b0d      	cmp	r3, #13
 8005458:	d125      	bne.n	80054a6 <json_encode_value+0xe6>
                        encoder->je_write(encoder->je_arg, "\\r",
 800545a:	682b      	ldr	r3, [r5, #0]
 800545c:	2202      	movs	r2, #2
 800545e:	494d      	ldr	r1, [pc, #308]	; (8005594 <json_encode_value+0x1d4>)
 8005460:	6868      	ldr	r0, [r5, #4]
 8005462:	4798      	blx	r3
                        break;
 8005464:	e00e      	b.n	8005484 <json_encode_value+0xc4>
                switch (jv->jv_val.str[i]) {
 8005466:	2b2f      	cmp	r3, #47	; 0x2f
 8005468:	d001      	beq.n	800546e <json_encode_value+0xae>
 800546a:	2b5c      	cmp	r3, #92	; 0x5c
 800546c:	d11b      	bne.n	80054a6 <json_encode_value+0xe6>
                        encoder->je_write(encoder->je_arg, "\\",
 800546e:	682b      	ldr	r3, [r5, #0]
 8005470:	2201      	movs	r2, #1
 8005472:	4949      	ldr	r1, [pc, #292]	; (8005598 <json_encode_value+0x1d8>)
 8005474:	6868      	ldr	r0, [r5, #4]
 8005476:	4798      	blx	r3
                        encoder->je_write(encoder->je_arg,
 8005478:	682b      	ldr	r3, [r5, #0]
                                (char *) &jv->jv_val.str[i], 1);
 800547a:	68a1      	ldr	r1, [r4, #8]
                        encoder->je_write(encoder->je_arg,
 800547c:	2201      	movs	r2, #1
 800547e:	4439      	add	r1, r7
 8005480:	6868      	ldr	r0, [r5, #4]
 8005482:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 8005484:	3601      	adds	r6, #1
 8005486:	8863      	ldrh	r3, [r4, #2]
 8005488:	42b3      	cmp	r3, r6
 800548a:	dd29      	ble.n	80054e0 <json_encode_value+0x120>
                switch (jv->jv_val.str[i]) {
 800548c:	68a3      	ldr	r3, [r4, #8]
 800548e:	4637      	mov	r7, r6
 8005490:	1999      	adds	r1, r3, r6
 8005492:	5d9b      	ldrb	r3, [r3, r6]
 8005494:	2b0c      	cmp	r3, #12
 8005496:	d017      	beq.n	80054c8 <json_encode_value+0x108>
 8005498:	d8da      	bhi.n	8005450 <json_encode_value+0x90>
 800549a:	2b09      	cmp	r3, #9
 800549c:	d008      	beq.n	80054b0 <json_encode_value+0xf0>
 800549e:	2b0a      	cmp	r3, #10
 80054a0:	d00c      	beq.n	80054bc <json_encode_value+0xfc>
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d016      	beq.n	80054d4 <json_encode_value+0x114>
                        encoder->je_write(encoder->je_arg,
 80054a6:	682b      	ldr	r3, [r5, #0]
 80054a8:	2201      	movs	r2, #1
 80054aa:	6868      	ldr	r0, [r5, #4]
 80054ac:	4798      	blx	r3
                        break;
 80054ae:	e7e9      	b.n	8005484 <json_encode_value+0xc4>
                        encoder->je_write(encoder->je_arg, "\\t",
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	2202      	movs	r2, #2
 80054b4:	4939      	ldr	r1, [pc, #228]	; (800559c <json_encode_value+0x1dc>)
 80054b6:	6868      	ldr	r0, [r5, #4]
 80054b8:	4798      	blx	r3
                        break;
 80054ba:	e7e3      	b.n	8005484 <json_encode_value+0xc4>
                        encoder->je_write(encoder->je_arg, "\\n",
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	2202      	movs	r2, #2
 80054c0:	4937      	ldr	r1, [pc, #220]	; (80055a0 <json_encode_value+0x1e0>)
 80054c2:	6868      	ldr	r0, [r5, #4]
 80054c4:	4798      	blx	r3
                        break;
 80054c6:	e7dd      	b.n	8005484 <json_encode_value+0xc4>
                        encoder->je_write(encoder->je_arg, "\\f",
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	2202      	movs	r2, #2
 80054cc:	4935      	ldr	r1, [pc, #212]	; (80055a4 <json_encode_value+0x1e4>)
 80054ce:	6868      	ldr	r0, [r5, #4]
 80054d0:	4798      	blx	r3
                        break;
 80054d2:	e7d7      	b.n	8005484 <json_encode_value+0xc4>
                        encoder->je_write(encoder->je_arg, "\\b",
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	2202      	movs	r2, #2
 80054d8:	4933      	ldr	r1, [pc, #204]	; (80055a8 <json_encode_value+0x1e8>)
 80054da:	6868      	ldr	r0, [r5, #4]
 80054dc:	4798      	blx	r3
                        break;
 80054de:	e7d1      	b.n	8005484 <json_encode_value+0xc4>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	2201      	movs	r2, #1
 80054e4:	492a      	ldr	r1, [pc, #168]	; (8005590 <json_encode_value+0x1d0>)
 80054e6:	6868      	ldr	r0, [r5, #4]
 80054e8:	4798      	blx	r3
    return (0);
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            JSON_ENCODE_ARRAY_START(encoder);
 80054f0:	6803      	ldr	r3, [r0, #0]
 80054f2:	2201      	movs	r2, #1
 80054f4:	492d      	ldr	r1, [pc, #180]	; (80055ac <json_encode_value+0x1ec>)
 80054f6:	6840      	ldr	r0, [r0, #4]
 80054f8:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 80054fa:	2600      	movs	r6, #0
 80054fc:	e000      	b.n	8005500 <json_encode_value+0x140>
 80054fe:	3601      	adds	r6, #1
 8005500:	8863      	ldrh	r3, [r4, #2]
 8005502:	42b3      	cmp	r3, r6
 8005504:	dd12      	ble.n	800552c <json_encode_value+0x16c>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
 8005506:	68e3      	ldr	r3, [r4, #12]
 8005508:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800550c:	4628      	mov	r0, r5
 800550e:	f7ff ff57 	bl	80053c0 <json_encode_value>
                if (rc != 0) {
 8005512:	4603      	mov	r3, r0
 8005514:	2800      	cmp	r0, #0
 8005516:	d1e9      	bne.n	80054ec <json_encode_value+0x12c>
                if (i != jv->jv_len - 1) {
 8005518:	8863      	ldrh	r3, [r4, #2]
 800551a:	3b01      	subs	r3, #1
 800551c:	42b3      	cmp	r3, r6
 800551e:	d0ee      	beq.n	80054fe <json_encode_value+0x13e>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	2201      	movs	r2, #1
 8005524:	4922      	ldr	r1, [pc, #136]	; (80055b0 <json_encode_value+0x1f0>)
 8005526:	6868      	ldr	r0, [r5, #4]
 8005528:	4798      	blx	r3
 800552a:	e7e8      	b.n	80054fe <json_encode_value+0x13e>
            JSON_ENCODE_ARRAY_END(encoder);
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	2201      	movs	r2, #1
 8005530:	4920      	ldr	r1, [pc, #128]	; (80055b4 <json_encode_value+0x1f4>)
 8005532:	6868      	ldr	r0, [r5, #4]
 8005534:	4798      	blx	r3
    return (0);
 8005536:	2300      	movs	r3, #0
            break;
 8005538:	e7d8      	b.n	80054ec <json_encode_value+0x12c>
            JSON_ENCODE_OBJECT_START(encoder);
 800553a:	6803      	ldr	r3, [r0, #0]
 800553c:	2201      	movs	r2, #1
 800553e:	491e      	ldr	r1, [pc, #120]	; (80055b8 <json_encode_value+0x1f8>)
 8005540:	6840      	ldr	r0, [r0, #4]
 8005542:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 8005544:	2600      	movs	r6, #0
 8005546:	8863      	ldrh	r3, [r4, #2]
 8005548:	42b3      	cmp	r3, r6
 800554a:	dd0d      	ble.n	8005568 <json_encode_value+0x1a8>
                        jv->jv_val.composite.keys[i],
 800554c:	68a3      	ldr	r3, [r4, #8]
                        jv->jv_val.composite.values[i]);
 800554e:	68e2      	ldr	r2, [r4, #12]
                rc = json_encode_object_entry(encoder,
 8005550:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8005554:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8005558:	4628      	mov	r0, r5
 800555a:	f7ff fefb 	bl	8005354 <json_encode_object_entry>
                if (rc != 0) {
 800555e:	4603      	mov	r3, r0
 8005560:	2800      	cmp	r0, #0
 8005562:	d1c3      	bne.n	80054ec <json_encode_value+0x12c>
            for (i = 0; i < jv->jv_len; i++) {
 8005564:	3601      	adds	r6, #1
 8005566:	e7ee      	b.n	8005546 <json_encode_value+0x186>
            JSON_ENCODE_OBJECT_END(encoder);
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	2201      	movs	r2, #1
 800556c:	4913      	ldr	r1, [pc, #76]	; (80055bc <json_encode_value+0x1fc>)
 800556e:	6868      	ldr	r0, [r5, #4]
 8005570:	4798      	blx	r3
    return (0);
 8005572:	2300      	movs	r3, #0
            break;
 8005574:	e7ba      	b.n	80054ec <json_encode_value+0x12c>
            rc = -1;
 8005576:	f04f 33ff 	mov.w	r3, #4294967295
 800557a:	e7b7      	b.n	80054ec <json_encode_value+0x12c>
 800557c:	0800f450 	.word	0x0800f450
 8005580:	0800f9c8 	.word	0x0800f9c8
 8005584:	0800f448 	.word	0x0800f448
 8005588:	0800f458 	.word	0x0800f458
 800558c:	0800f460 	.word	0x0800f460
 8005590:	0800f438 	.word	0x0800f438
 8005594:	0800f470 	.word	0x0800f470
 8005598:	0800f468 	.word	0x0800f468
 800559c:	0800f46c 	.word	0x0800f46c
 80055a0:	0800f474 	.word	0x0800f474
 80055a4:	0800f478 	.word	0x0800f478
 80055a8:	0800f47c 	.word	0x0800f47c
 80055ac:	0800f480 	.word	0x0800f480
 80055b0:	0800f440 	.word	0x0800f440
 80055b4:	0800f484 	.word	0x0800f484
 80055b8:	0800f444 	.word	0x0800f444
 80055bc:	0800f488 	.word	0x0800f488

080055c0 <json_encode_object_finish>:

int
json_encode_object_finish(struct json_encoder *encoder)
{
 80055c0:	b510      	push	{r4, lr}
 80055c2:	4604      	mov	r4, r0
    JSON_ENCODE_OBJECT_END(encoder);
 80055c4:	6803      	ldr	r3, [r0, #0]
 80055c6:	2201      	movs	r2, #1
 80055c8:	4904      	ldr	r1, [pc, #16]	; (80055dc <json_encode_object_finish+0x1c>)
 80055ca:	6840      	ldr	r0, [r0, #4]
 80055cc:	4798      	blx	r3
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
 80055ce:	7a23      	ldrb	r3, [r4, #8]
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	7223      	strb	r3, [r4, #8]

    return (0);
}
 80055d6:	2000      	movs	r0, #0
 80055d8:	bd10      	pop	{r4, pc}
 80055da:	bf00      	nop
 80055dc:	0800f488 	.word	0x0800f488

080055e0 <json_encode_array_name>:

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
 80055e0:	b508      	push	{r3, lr}
    return json_encode_object_key(encoder, name);
 80055e2:	f7ff fe8d 	bl	8005300 <json_encode_object_key>
}
 80055e6:	bd08      	pop	{r3, pc}

080055e8 <json_encode_array_start>:

int
json_encode_array_start(struct json_encoder *encoder)
{
 80055e8:	b510      	push	{r4, lr}
 80055ea:	4604      	mov	r4, r0
    JSON_ENCODE_ARRAY_START(encoder);
 80055ec:	6803      	ldr	r3, [r0, #0]
 80055ee:	2201      	movs	r2, #1
 80055f0:	4904      	ldr	r1, [pc, #16]	; (8005604 <json_encode_array_start+0x1c>)
 80055f2:	6840      	ldr	r0, [r0, #4]
 80055f4:	4798      	blx	r3
    encoder->je_wr_commas = 0;
 80055f6:	7a23      	ldrb	r3, [r4, #8]
 80055f8:	f36f 0300 	bfc	r3, #0, #1
 80055fc:	7223      	strb	r3, [r4, #8]

    return (0);
}
 80055fe:	2000      	movs	r0, #0
 8005600:	bd10      	pop	{r4, pc}
 8005602:	bf00      	nop
 8005604:	0800f480 	.word	0x0800f480

08005608 <json_encode_array_finish>:
}


int
json_encode_array_finish(struct json_encoder *encoder)
{
 8005608:	b508      	push	{r3, lr}
    encoder->je_wr_commas = 1;
 800560a:	7a03      	ldrb	r3, [r0, #8]
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	7203      	strb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
 8005612:	6803      	ldr	r3, [r0, #0]
 8005614:	2201      	movs	r2, #1
 8005616:	4902      	ldr	r1, [pc, #8]	; (8005620 <json_encode_array_finish+0x18>)
 8005618:	6840      	ldr	r0, [r0, #4]
 800561a:	4798      	blx	r3

    return (0);
}
 800561c:	2000      	movs	r0, #0
 800561e:	bd08      	pop	{r3, pc}
 8005620:	0800f484 	.word	0x0800f484

08005624 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return STM32_HW_ID_LEN;
}
 8005624:	200c      	movs	r0, #12
 8005626:	4770      	bx	lr

08005628 <hal_bsp_hw_id>:

int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
 8005628:	b510      	push	{r4, lr}
    int cnt;

    cnt = min(STM32_HW_ID_LEN, max_len);
 800562a:	290c      	cmp	r1, #12
 800562c:	bfa8      	it	ge
 800562e:	210c      	movge	r1, #12
 8005630:	460c      	mov	r4, r1
    memcpy(id, (void *)UID_BASE, cnt);
 8005632:	460a      	mov	r2, r1
 8005634:	4902      	ldr	r1, [pc, #8]	; (8005640 <hal_bsp_hw_id+0x18>)
 8005636:	f002 f86d 	bl	8007714 <memcpy>

    return cnt;
}
 800563a:	4620      	mov	r0, r4
 800563c:	bd10      	pop	{r4, pc}
 800563e:	bf00      	nop
 8005640:	1ffff7e8 	.word	0x1ffff7e8

08005644 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
 8005644:	4b08      	ldr	r3, [pc, #32]	; (8005668 <sensor_mgr_remove+0x24>)
 8005646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005648:	4282      	cmp	r2, r0
 800564a:	d104      	bne.n	8005656 <sensor_mgr_remove+0x12>
 800564c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005650:	631a      	str	r2, [r3, #48]	; 0x30
 8005652:	4770      	bx	lr
 8005654:	461a      	mov	r2, r3
 8005656:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800565a:	4283      	cmp	r3, r0
 800565c:	d1fa      	bne.n	8005654 <sensor_mgr_remove+0x10>
 800565e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005662:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8005666:	4770      	bx	lr
 8005668:	20002e30 	.word	0x20002e30

0800566c <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
 800566c:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
 800566e:	6a03      	ldr	r3, [r0, #32]
 8005670:	b98b      	cbnz	r3, 8005696 <sensor_mgr_insert+0x2a>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 8005672:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <sensor_mgr_insert+0x58>)
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
 8005676:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 8005678:	e002      	b.n	8005680 <sensor_mgr_insert+0x14>
            prev = cursor;
 800567a:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800567c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1fa      	bne.n	800567a <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
 8005684:	b1c1      	cbz	r1, 80056b8 <sensor_mgr_insert+0x4c>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
 8005686:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800568a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 800568e:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
 8005692:	bc10      	pop	{r4}
 8005694:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 8005696:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <sensor_mgr_insert+0x58>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
 800569a:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f1      	beq.n	8005684 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
 80056a0:	6a1a      	ldr	r2, [r3, #32]
 80056a2:	2a00      	cmp	r2, #0
 80056a4:	d0ee      	beq.n	8005684 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
 80056a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80056a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80056aa:	1b12      	subs	r2, r2, r4
 80056ac:	2a00      	cmp	r2, #0
 80056ae:	dbe9      	blt.n	8005684 <sensor_mgr_insert+0x18>
        prev = cursor;
 80056b0:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 80056b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b6:	e7f1      	b.n	800569c <sensor_mgr_insert+0x30>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
 80056b8:	4b02      	ldr	r3, [pc, #8]	; (80056c4 <sensor_mgr_insert+0x58>)
 80056ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056bc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 80056c0:	6318      	str	r0, [r3, #48]	; 0x30
 80056c2:	e7e6      	b.n	8005692 <sensor_mgr_insert+0x26>
 80056c4:	20002e30 	.word	0x20002e30

080056c8 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
 80056c8:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
 80056ca:	fab0 f080 	clz	r0, r0
 80056ce:	0940      	lsrs	r0, r0, #5
 80056d0:	4770      	bx	lr
	...

080056d4 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
 80056d4:	4b01      	ldr	r3, [pc, #4]	; (80056dc <sensor_mgr_evq_set+0x8>)
 80056d6:	62d8      	str	r0, [r3, #44]	; 0x2c
}
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	20002e30 	.word	0x20002e30

080056e0 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
 80056e0:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
 80056e4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80056e8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80056ec:	ea02 0b04 	and.w	fp, r2, r4
 80056f0:	ea03 0c05 	and.w	ip, r3, r5
 80056f4:	f100 0118 	add.w	r1, r0, #24
 80056f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80056fc:	ea0b 0200 	and.w	r2, fp, r0
 8005700:	ea0c 0301 	and.w	r3, ip, r1
 8005704:	4313      	orrs	r3, r2
}
 8005706:	bf14      	ite	ne
 8005708:	2001      	movne	r0, #1
 800570a:	2000      	moveq	r0, #0
 800570c:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8005710:	4770      	bx	lr

08005712 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
 8005712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005716:	b083      	sub	sp, #12
 8005718:	4605      	mov	r5, r0
 800571a:	4689      	mov	r9, r1
 800571c:	4690      	mov	r8, r2
 800571e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
 8005722:	790b      	ldrb	r3, [r1, #4]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d013      	beq.n	8005750 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
 8005728:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 800572a:	e000      	b.n	800572e <sensor_read_data_func+0x1c>
 800572c:	6924      	ldr	r4, [r4, #16]
 800572e:	b17c      	cbz	r4, 8005750 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
 8005730:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005734:	ea00 0206 	and.w	r2, r0, r6
 8005738:	ea01 0307 	and.w	r3, r1, r7
 800573c:	4313      	orrs	r3, r2
 800573e:	d0f5      	beq.n	800572c <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
 8005740:	68a3      	ldr	r3, [r4, #8]
 8005742:	68e1      	ldr	r1, [r4, #12]
 8005744:	e9cd 6700 	strd	r6, r7, [sp]
 8005748:	4642      	mov	r2, r8
 800574a:	4628      	mov	r0, r5
 800574c:	4798      	blx	r3
 800574e:	e7ed      	b.n	800572c <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
 8005750:	f8d9 3000 	ldr.w	r3, [r9]
 8005754:	b14b      	cbz	r3, 800576a <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
 8005756:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800575a:	e9cd 6700 	strd	r6, r7, [sp]
 800575e:	4642      	mov	r2, r8
 8005760:	4628      	mov	r0, r5
 8005762:	4798      	blx	r3
    }

    return (0);
}
 8005764:	b003      	add	sp, #12
 8005766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
 800576a:	2000      	movs	r0, #0
 800576c:	e7fa      	b.n	8005764 <sensor_read_data_func+0x52>

0800576e <sensor_mgr_match_bydevname>:
{
 800576e:	b508      	push	{r3, lr}
    if (!strcmp(sensor->s_dev->od_name, devname)) {
 8005770:	6803      	ldr	r3, [r0, #0]
 8005772:	69d8      	ldr	r0, [r3, #28]
 8005774:	f001 fff6 	bl	8007764 <strcmp>
 8005778:	b108      	cbz	r0, 800577e <sensor_mgr_match_bydevname+0x10>
    return (0);
 800577a:	2000      	movs	r0, #0
}
 800577c:	bd08      	pop	{r3, pc}
        return (1);
 800577e:	2001      	movs	r0, #1
 8005780:	e7fc      	b.n	800577c <sensor_mgr_match_bydevname+0xe>
	...

08005784 <sensor_base_ts_update_event>:
{
 8005784:	b530      	push	{r4, r5, lr}
 8005786:	b087      	sub	sp, #28
    ticks = os_time_get();
 8005788:	f001 fe0c 	bl	80073a4 <os_time_get>
 800578c:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
 800578e:	a901      	add	r1, sp, #4
 8005790:	a802      	add	r0, sp, #8
 8005792:	f001 fe41 	bl	8007418 <os_gettimeofday>
    if (rc) {
 8005796:	b148      	cbz	r0, 80057ac <sensor_base_ts_update_event+0x28>
        ticks += OS_TICKS_PER_SEC * 600;
 8005798:	f504 2412 	add.w	r4, r4, #598016	; 0x92000
 800579c:	f504 64f8 	add.w	r4, r4, #1984	; 0x7c0
    os_callout_reset(&st_up_osco, ticks);
 80057a0:	4621      	mov	r1, r4
 80057a2:	480a      	ldr	r0, [pc, #40]	; (80057cc <sensor_base_ts_update_event+0x48>)
 80057a4:	f000 fcd0 	bl	8006148 <os_callout_reset>
}
 80057a8:	b007      	add	sp, #28
 80057aa:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
 80057ac:	f504 14f4 	add.w	r4, r4, #1998848	; 0x1e8000
 80057b0:	f504 6490 	add.w	r4, r4, #1152	; 0x480
    sensor_base_ts.st_ostv = ostv;
 80057b4:	4d06      	ldr	r5, [pc, #24]	; (80057d0 <sensor_base_ts_update_event+0x4c>)
 80057b6:	ab06      	add	r3, sp, #24
 80057b8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80057bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
 80057c0:	9b01      	ldr	r3, [sp, #4]
 80057c2:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
 80057c4:	f000 fd4a 	bl	800625c <os_cputime_get32>
 80057c8:	6168      	str	r0, [r5, #20]
 80057ca:	e7e9      	b.n	80057a0 <sensor_base_ts_update_event+0x1c>
 80057cc:	20002e64 	.word	0x20002e64
 80057d0:	20002e88 	.word	0x20002e88

080057d4 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
 80057d4:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
 80057d8:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
 80057da:	f000 fd3f 	bl	800625c <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
 80057de:	4a0e      	ldr	r2, [pc, #56]	; (8005818 <sensor_up_timestamp+0x44>)
 80057e0:	6955      	ldr	r5, [r2, #20]
 80057e2:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
 80057e4:	6460      	str	r0, [r4, #68]	; 0x44
 80057e6:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 80057e8:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 80057ec:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 80057ee:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 80057f0:	4b0a      	ldr	r3, [pc, #40]	; (800581c <sensor_up_timestamp+0x48>)
 80057f2:	fba3 c305 	umull	ip, r3, r3, r5
 80057f6:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 80057f8:	eb10 0b03 	adds.w	fp, r0, r3
 80057fc:	f141 0c00 	adc.w	ip, r1, #0
 8005800:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
 8005804:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
 8005808:	4905      	ldr	r1, [pc, #20]	; (8005820 <sensor_up_timestamp+0x4c>)
 800580a:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
 800580e:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
 8005810:	63a1      	str	r1, [r4, #56]	; 0x38

}
 8005812:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
 8005816:	bf00      	nop
 8005818:	20002e88 	.word	0x20002e88
 800581c:	431bde83 	.word	0x431bde83
 8005820:	000f4240 	.word	0x000f4240

08005824 <sensor_mgr_lock>:
{
 8005824:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
 8005826:	f04f 31ff 	mov.w	r1, #4294967295
 800582a:	4804      	ldr	r0, [pc, #16]	; (800583c <sensor_mgr_lock+0x18>)
 800582c:	f001 fa2e 	bl	8006c8c <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 8005830:	b108      	cbz	r0, 8005836 <sensor_mgr_lock+0x12>
 8005832:	2809      	cmp	r0, #9
 8005834:	d000      	beq.n	8005838 <sensor_mgr_lock+0x14>
}
 8005836:	bd08      	pop	{r3, pc}
        return (0);
 8005838:	2000      	movs	r0, #0
 800583a:	e7fc      	b.n	8005836 <sensor_mgr_lock+0x12>
 800583c:	20002e30 	.word	0x20002e30

08005840 <sensor_mgr_unlock>:
{
 8005840:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
 8005842:	4802      	ldr	r0, [pc, #8]	; (800584c <sensor_mgr_unlock+0xc>)
 8005844:	f001 f9c6 	bl	8006bd4 <os_mutex_release>
}
 8005848:	bd08      	pop	{r3, pc}
 800584a:	bf00      	nop
 800584c:	20002e30 	.word	0x20002e30

08005850 <sensor_mgr_evq_get>:
}
 8005850:	4b01      	ldr	r3, [pc, #4]	; (8005858 <sensor_mgr_evq_get+0x8>)
 8005852:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20002e30 	.word	0x20002e30

0800585c <sensor_mgr_init>:
{
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
 8005860:	f000 fe78 	bl	8006554 <os_eventq_dflt_get>
 8005864:	f7ff ff36 	bl	80056d4 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
 8005868:	4b1d      	ldr	r3, [pc, #116]	; (80058e0 <sensor_mgr_init+0x84>)
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <sensor_mgr_init+0x88>)
 800586e:	2218      	movs	r2, #24
 8005870:	2105      	movs	r1, #5
 8005872:	481d      	ldr	r0, [pc, #116]	; (80058e8 <sensor_mgr_init+0x8c>)
 8005874:	f001 f8cc 	bl	8006a10 <os_mempool_init>
    assert(rc == OS_OK);
 8005878:	bb58      	cbnz	r0, 80058d2 <sensor_mgr_init+0x76>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
 800587a:	f7ff ffe9 	bl	8005850 <sensor_mgr_evq_get>
 800587e:	4e1b      	ldr	r6, [pc, #108]	; (80058ec <sensor_mgr_init+0x90>)
 8005880:	2300      	movs	r3, #0
 8005882:	4a1b      	ldr	r2, [pc, #108]	; (80058f0 <sensor_mgr_init+0x94>)
 8005884:	4601      	mov	r1, r0
 8005886:	4630      	mov	r0, r6
 8005888:	f000 fc32 	bl	80060f0 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
 800588c:	ad04      	add	r5, sp, #16
 800588e:	a903      	add	r1, sp, #12
 8005890:	4628      	mov	r0, r5
 8005892:	f001 fdc1 	bl	8007418 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
 8005896:	4c17      	ldr	r4, [pc, #92]	; (80058f4 <sensor_mgr_init+0x98>)
 8005898:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800589c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
 80058a0:	9b03      	ldr	r3, [sp, #12]
 80058a2:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
 80058a4:	f000 fcda 	bl	800625c <os_cputime_get32>
 80058a8:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
 80058aa:	f7ff ffd1 	bl	8005850 <sensor_mgr_evq_get>
 80058ae:	4c12      	ldr	r4, [pc, #72]	; (80058f8 <sensor_mgr_init+0x9c>)
 80058b0:	2300      	movs	r3, #0
 80058b2:	4a12      	ldr	r2, [pc, #72]	; (80058fc <sensor_mgr_init+0xa0>)
 80058b4:	4601      	mov	r1, r0
 80058b6:	4620      	mov	r0, r4
 80058b8:	f000 fc1a 	bl	80060f0 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
 80058bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 fc41 	bl	8006148 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
 80058c6:	f1a6 000c 	sub.w	r0, r6, #12
 80058ca:	f001 f979 	bl	8006bc0 <os_mutex_init>
}
 80058ce:	b008      	add	sp, #32
 80058d0:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
 80058d2:	2300      	movs	r3, #0
 80058d4:	461a      	mov	r2, r3
 80058d6:	4619      	mov	r1, r3
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fa8b 	bl	8005df4 <__assert_func>
 80058de:	bf00      	nop
 80058e0:	0800f48c 	.word	0x0800f48c
 80058e4:	2000054c 	.word	0x2000054c
 80058e8:	200005c4 	.word	0x200005c4
 80058ec:	20002e3c 	.word	0x20002e3c
 80058f0:	08005bb5 	.word	0x08005bb5
 80058f4:	20002e88 	.word	0x20002e88
 80058f8:	20002e64 	.word	0x20002e64
 80058fc:	08005785 	.word	0x08005785

08005900 <sensor_mgr_find_next>:
{
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	4605      	mov	r5, r0
 8005904:	460e      	mov	r6, r1
 8005906:	4614      	mov	r4, r2
    rc = sensor_mgr_lock();
 8005908:	f7ff ff8c 	bl	8005824 <sensor_mgr_lock>
    if (rc != 0) {
 800590c:	b988      	cbnz	r0, 8005932 <sensor_mgr_find_next+0x32>
    if (cursor == NULL) {
 800590e:	b14c      	cbz	r4, 8005924 <sensor_mgr_find_next+0x24>
        cursor = SLIST_NEXT(prev_cursor, s_next);
 8005910:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
    while (cursor != NULL) {
 8005914:	b14c      	cbz	r4, 800592a <sensor_mgr_find_next+0x2a>
        if (compare_func(cursor, arg)) {
 8005916:	4631      	mov	r1, r6
 8005918:	4620      	mov	r0, r4
 800591a:	47a8      	blx	r5
 800591c:	b928      	cbnz	r0, 800592a <sensor_mgr_find_next+0x2a>
        cursor = SLIST_NEXT(cursor, s_next);
 800591e:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 8005922:	e7f7      	b.n	8005914 <sensor_mgr_find_next+0x14>
        cursor = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <sensor_mgr_find_next+0x38>)
 8005926:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005928:	e7f4      	b.n	8005914 <sensor_mgr_find_next+0x14>
    sensor_mgr_unlock();
 800592a:	f7ff ff89 	bl	8005840 <sensor_mgr_unlock>
}
 800592e:	4620      	mov	r0, r4
 8005930:	bd70      	pop	{r4, r5, r6, pc}
    cursor = NULL;
 8005932:	2400      	movs	r4, #0
    return (cursor);
 8005934:	e7fb      	b.n	800592e <sensor_mgr_find_next+0x2e>
 8005936:	bf00      	nop
 8005938:	20002e30 	.word	0x20002e30

0800593c <sensor_mgr_find_next_bydevname>:
{
 800593c:	b508      	push	{r3, lr}
    return (sensor_mgr_find_next(sensor_mgr_match_bydevname, (char *)devname,
 800593e:	460a      	mov	r2, r1
 8005940:	4601      	mov	r1, r0
 8005942:	4802      	ldr	r0, [pc, #8]	; (800594c <sensor_mgr_find_next_bydevname+0x10>)
 8005944:	f7ff ffdc 	bl	8005900 <sensor_mgr_find_next>
}
 8005948:	bd08      	pop	{r3, pc}
 800594a:	bf00      	nop
 800594c:	0800576f 	.word	0x0800576f

08005950 <sensor_pkg_init>:
{
 8005950:	b508      	push	{r3, lr}
    sensor_mgr_init();
 8005952:	f7ff ff83 	bl	800585c <sensor_mgr_init>
}
 8005956:	bd08      	pop	{r3, pc}

08005958 <sensor_lock>:
{
 8005958:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
 800595a:	f04f 31ff 	mov.w	r1, #4294967295
 800595e:	3004      	adds	r0, #4
 8005960:	f001 f994 	bl	8006c8c <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 8005964:	b108      	cbz	r0, 800596a <sensor_lock+0x12>
 8005966:	2809      	cmp	r0, #9
 8005968:	d000      	beq.n	800596c <sensor_lock+0x14>
}
 800596a:	bd08      	pop	{r3, pc}
        return (0);
 800596c:	2000      	movs	r0, #0
 800596e:	e7fc      	b.n	800596a <sensor_lock+0x12>

08005970 <sensor_unlock>:
{
 8005970:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
 8005972:	3004      	adds	r0, #4
 8005974:	f001 f92e 	bl	8006bd4 <os_mutex_release>
}
 8005978:	bd08      	pop	{r3, pc}

0800597a <sensor_update_poll_rate>:
{
 800597a:	b538      	push	{r3, r4, r5, lr}
 800597c:	4604      	mov	r4, r0
 800597e:	460d      	mov	r5, r1
    sensor_lock(sensor);
 8005980:	f7ff ffea 	bl	8005958 <sensor_lock>
    sensor->s_poll_rate = poll_rate;
 8005984:	6225      	str	r5, [r4, #32]
    sensor_unlock(sensor);
 8005986:	4620      	mov	r0, r4
 8005988:	f7ff fff2 	bl	8005970 <sensor_unlock>
}
 800598c:	bd38      	pop	{r3, r4, r5, pc}

0800598e <sensor_update_nextrun>:
{
 800598e:	b530      	push	{r4, r5, lr}
 8005990:	b083      	sub	sp, #12
 8005992:	4604      	mov	r4, r0
 8005994:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
 8005996:	a901      	add	r1, sp, #4
 8005998:	6a00      	ldr	r0, [r0, #32]
 800599a:	f001 fd59 	bl	8007450 <os_time_ms_to_ticks>
    sensor_lock(sensor);
 800599e:	4620      	mov	r0, r4
 80059a0:	f7ff ffda 	bl	8005958 <sensor_lock>
    sensor_mgr_remove(sensor);
 80059a4:	4620      	mov	r0, r4
 80059a6:	f7ff fe4d 	bl	8005644 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
 80059aa:	9b01      	ldr	r3, [sp, #4]
 80059ac:	441d      	add	r5, r3
 80059ae:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
 80059b0:	4620      	mov	r0, r4
 80059b2:	f7ff fe5b 	bl	800566c <sensor_mgr_insert>
    sensor_unlock(sensor);
 80059b6:	4620      	mov	r0, r4
 80059b8:	f7ff ffda 	bl	8005970 <sensor_unlock>
}
 80059bc:	b003      	add	sp, #12
 80059be:	bd30      	pop	{r4, r5, pc}

080059c0 <sensor_calc_nextrun_delta>:
{
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4605      	mov	r5, r0
 80059c4:	460c      	mov	r4, r1
    sensor_lock(sensor);
 80059c6:	f7ff ffc7 	bl	8005958 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
 80059ca:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
 80059cc:	1b0c      	subs	r4, r1, r4
 80059ce:	d404      	bmi.n	80059da <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
 80059d0:	4628      	mov	r0, r5
 80059d2:	f7ff ffcd 	bl	8005970 <sensor_unlock>
}
 80059d6:	4620      	mov	r0, r4
 80059d8:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
 80059da:	2400      	movs	r4, #0
 80059dc:	e7f8      	b.n	80059d0 <sensor_calc_nextrun_delta+0x10>
	...

080059e0 <sensor_find_min_nextrun_sensor>:
{
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	4606      	mov	r6, r0
 80059e4:	460d      	mov	r5, r1
    sensor_mgr_lock();
 80059e6:	f7ff ff1d 	bl	8005824 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 80059ea:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <sensor_find_min_nextrun_sensor+0x20>)
 80059ec:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
 80059ee:	4631      	mov	r1, r6
 80059f0:	4620      	mov	r0, r4
 80059f2:	f7ff ffe5 	bl	80059c0 <sensor_calc_nextrun_delta>
 80059f6:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
 80059f8:	f7ff ff22 	bl	8005840 <sensor_mgr_unlock>
}
 80059fc:	4620      	mov	r0, r4
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	20002e30 	.word	0x20002e30

08005a04 <sensor_set_poll_rate_ms>:
{
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	4604      	mov	r4, r0
 8005a0a:	460d      	mov	r5, r1
    os_callout_stop(&sensor_mgr.mgr_wakeup_callout);
 8005a0c:	4815      	ldr	r0, [pc, #84]	; (8005a64 <sensor_set_poll_rate_ms+0x60>)
 8005a0e:	f000 fb7d 	bl	800610c <os_callout_stop>
    sensor = sensor_mgr_find_next_bydevname(devname, NULL);
 8005a12:	2100      	movs	r1, #0
 8005a14:	4620      	mov	r0, r4
 8005a16:	f7ff ff91 	bl	800593c <sensor_mgr_find_next_bydevname>
    if (!sensor) {
 8005a1a:	b1f8      	cbz	r0, 8005a5c <sensor_set_poll_rate_ms+0x58>
 8005a1c:	4604      	mov	r4, r0
    sensor_lock(sensor);
 8005a1e:	f7ff ff9b 	bl	8005958 <sensor_lock>
    now = os_time_get();
 8005a22:	f001 fcbf 	bl	80073a4 <os_time_get>
 8005a26:	4606      	mov	r6, r0
    os_time_ms_to_ticks(poll_rate, &next_wakeup);
 8005a28:	a901      	add	r1, sp, #4
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f001 fd10 	bl	8007450 <os_time_ms_to_ticks>
    sensor_update_poll_rate(sensor, poll_rate);
 8005a30:	4629      	mov	r1, r5
 8005a32:	4620      	mov	r0, r4
 8005a34:	f7ff ffa1 	bl	800597a <sensor_update_poll_rate>
    sensor_update_nextrun(sensor, now);
 8005a38:	4631      	mov	r1, r6
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	f7ff ffa7 	bl	800598e <sensor_update_nextrun>
    sensor_unlock(sensor);
 8005a40:	4620      	mov	r0, r4
 8005a42:	f7ff ff95 	bl	8005970 <sensor_unlock>
    sensor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
 8005a46:	a901      	add	r1, sp, #4
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f7ff ffc9 	bl	80059e0 <sensor_find_min_nextrun_sensor>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 8005a4e:	9901      	ldr	r1, [sp, #4]
 8005a50:	4804      	ldr	r0, [pc, #16]	; (8005a64 <sensor_set_poll_rate_ms+0x60>)
 8005a52:	f000 fb79 	bl	8006148 <os_callout_reset>
    return 0;
 8005a56:	2000      	movs	r0, #0
}
 8005a58:	b002      	add	sp, #8
 8005a5a:	bd70      	pop	{r4, r5, r6, pc}
    return rc;
 8005a5c:	f06f 0001 	mvn.w	r0, #1
 8005a60:	e7fa      	b.n	8005a58 <sensor_set_poll_rate_ms+0x54>
 8005a62:	bf00      	nop
 8005a64:	20002e3c 	.word	0x20002e3c

08005a68 <sensor_mgr_register>:
{
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
 8005a6c:	f7ff feda 	bl	8005824 <sensor_mgr_lock>
    if (rc != 0) {
 8005a70:	4604      	mov	r4, r0
 8005a72:	b108      	cbz	r0, 8005a78 <sensor_mgr_register+0x10>
}
 8005a74:	4620      	mov	r0, r4
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f7ff ff6d 	bl	8005958 <sensor_lock>
    if (rc != 0) {
 8005a7e:	4604      	mov	r4, r0
 8005a80:	2800      	cmp	r0, #0
 8005a82:	d1f7      	bne.n	8005a74 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
 8005a84:	4628      	mov	r0, r5
 8005a86:	f7ff fdf1 	bl	800566c <sensor_mgr_insert>
    sensor_unlock(sensor);
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	f7ff ff70 	bl	8005970 <sensor_unlock>
    sensor_mgr_unlock();
 8005a90:	f7ff fed6 	bl	8005840 <sensor_mgr_unlock>
    return (0);
 8005a94:	e7ee      	b.n	8005a74 <sensor_mgr_register+0xc>

08005a96 <sensor_init>:
{
 8005a96:	b538      	push	{r3, r4, r5, lr}
 8005a98:	4604      	mov	r4, r0
 8005a9a:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
 8005a9c:	2288      	movs	r2, #136	; 0x88
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	f001 fe45 	bl	800772e <memset>
    rc = os_mutex_init(&sensor->s_lock);
 8005aa4:	1d20      	adds	r0, r4, #4
 8005aa6:	f001 f88b 	bl	8006bc0 <os_mutex_init>
    if (rc != 0) {
 8005aaa:	4603      	mov	r3, r0
 8005aac:	b900      	cbnz	r0, 8005ab0 <sensor_init+0x1a>
    sensor->s_dev = dev;
 8005aae:	6025      	str	r5, [r4, #0]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}

08005ab4 <sensor_register_listener>:
{
 8005ab4:	b570      	push	{r4, r5, r6, lr}
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	460e      	mov	r6, r1
    rc = sensor_lock(sensor);
 8005aba:	f7ff ff4d 	bl	8005958 <sensor_lock>
    if (rc != 0) {
 8005abe:	4605      	mov	r5, r0
 8005ac0:	b108      	cbz	r0, 8005ac6 <sensor_register_listener+0x12>
}
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	bd70      	pop	{r4, r5, r6, pc}
    SLIST_INSERT_HEAD(&sensor->s_listener_list, listener, sl_next);
 8005ac6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005ac8:	6133      	str	r3, [r6, #16]
 8005aca:	66e6      	str	r6, [r4, #108]	; 0x6c
    sensor_unlock(sensor);
 8005acc:	4620      	mov	r0, r4
 8005ace:	f7ff ff4f 	bl	8005970 <sensor_unlock>
    return (0);
 8005ad2:	e7f6      	b.n	8005ac2 <sensor_register_listener+0xe>

08005ad4 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
 8005ad4:	b530      	push	{r4, r5, lr}
 8005ad6:	b089      	sub	sp, #36	; 0x24
 8005ad8:	4604      	mov	r4, r0
 8005ada:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
 8005ade:	f7ff ff3b 	bl	8005958 <sensor_lock>
    if (rc) {
 8005ae2:	4605      	mov	r5, r0
 8005ae4:	b9f8      	cbnz	r0, 8005b26 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
 8005ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ae8:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
 8005aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aec:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
 8005aee:	a904      	add	r1, sp, #16
 8005af0:	4620      	mov	r0, r4
 8005af2:	f7ff fdf5 	bl	80056e0 <sensor_mgr_match_bytype>
 8005af6:	b1e0      	cbz	r0, 8005b32 <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
 8005af8:	4620      	mov	r0, r4
 8005afa:	f7ff fe6b 	bl	80057d4 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 8005afe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b00:	6819      	ldr	r1, [r3, #0]
 8005b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b04:	9302      	str	r3, [sp, #8]
 8005b06:	ab06      	add	r3, sp, #24
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <sensor_read+0x64>)
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b12:	4620      	mov	r0, r4
 8005b14:	4788      	blx	r1
                                  timeout);
    if (rc) {
 8005b16:	4605      	mov	r5, r0
 8005b18:	b128      	cbz	r0, 8005b26 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
 8005b1a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005b1c:	b11b      	cbz	r3, 8005b26 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
 8005b1e:	4602      	mov	r2, r0
 8005b20:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005b22:	4620      	mov	r0, r4
 8005b24:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
 8005b26:	4620      	mov	r0, r4
 8005b28:	f7ff ff22 	bl	8005970 <sensor_unlock>
    return (rc);
}
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	b009      	add	sp, #36	; 0x24
 8005b30:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
 8005b32:	f06f 0503 	mvn.w	r5, #3
 8005b36:	e7f6      	b.n	8005b26 <sensor_read+0x52>
 8005b38:	08005713 	.word	0x08005713

08005b3c <sensor_mgr_poll_bytype>:
{
 8005b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	4616      	mov	r6, r2
 8005b42:	461f      	mov	r7, r3
 8005b44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
 8005b46:	b10c      	cbz	r4, 8005b4c <sensor_mgr_poll_bytype+0x10>
 8005b48:	8aa3      	ldrh	r3, [r4, #20]
 8005b4a:	b9cb      	cbnz	r3, 8005b80 <sensor_mgr_poll_bytype+0x44>
 8005b4c:	4632      	mov	r2, r6
 8005b4e:	463b      	mov	r3, r7
 8005b50:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
 8005b52:	f04f 31ff 	mov.w	r1, #4294967295
 8005b56:	9102      	str	r1, [sp, #8]
 8005b58:	2100      	movs	r1, #0
 8005b5a:	9101      	str	r1, [sp, #4]
 8005b5c:	9100      	str	r1, [sp, #0]
 8005b5e:	f7ff ffb9 	bl	8005ad4 <sensor_read>
        sensor_lock(sensor);
 8005b62:	4628      	mov	r0, r5
 8005b64:	f7ff fef8 	bl	8005958 <sensor_lock>
        if (stt) {
 8005b68:	b12c      	cbz	r4, 8005b76 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
 8005b6a:	8aa3      	ldrh	r3, [r4, #20]
 8005b6c:	b91b      	cbnz	r3, 8005b76 <sensor_mgr_poll_bytype+0x3a>
 8005b6e:	8a63      	ldrh	r3, [r4, #18]
 8005b70:	b10b      	cbz	r3, 8005b76 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
 8005b72:	3b01      	subs	r3, #1
 8005b74:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
 8005b76:	4628      	mov	r0, r5
 8005b78:	f7ff fefa 	bl	8005970 <sensor_unlock>
}
 8005b7c:	b005      	add	sp, #20
 8005b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
 8005b80:	3b01      	subs	r3, #1
 8005b82:	82a3      	strh	r3, [r4, #20]
}
 8005b84:	e7fa      	b.n	8005b7c <sensor_mgr_poll_bytype+0x40>

08005b86 <sensor_poll_per_type_trait>:
{
 8005b86:	b570      	push	{r4, r5, r6, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	4605      	mov	r5, r0
 8005b8c:	460e      	mov	r6, r1
    sensor_lock(sensor);
 8005b8e:	f7ff fee3 	bl	8005958 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 8005b92:	6fec      	ldr	r4, [r5, #124]	; 0x7c
 8005b94:	e007      	b.n	8005ba6 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
 8005b96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005b9a:	9601      	str	r6, [sp, #4]
 8005b9c:	9400      	str	r4, [sp, #0]
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	f7ff ffcc 	bl	8005b3c <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 8005ba4:	6a24      	ldr	r4, [r4, #32]
 8005ba6:	2c00      	cmp	r4, #0
 8005ba8:	d1f5      	bne.n	8005b96 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
 8005baa:	4628      	mov	r0, r5
 8005bac:	f7ff fee0 	bl	8005970 <sensor_unlock>
}
 8005bb0:	b002      	add	sp, #8
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}

08005bb4 <sensor_mgr_wakeup_event>:
{
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	b084      	sub	sp, #16
    now = os_time_get();
 8005bb8:	f001 fbf4 	bl	80073a4 <os_time_get>
 8005bbc:	4605      	mov	r5, r0
    sensor_mgr_lock();
 8005bbe:	f7ff fe31 	bl	8005824 <sensor_mgr_lock>
 8005bc2:	e012      	b.n	8005bea <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f7ff fed3 	bl	8005970 <sensor_unlock>
            sensor_mgr_unlock();
 8005bca:	f7ff fe39 	bl	8005840 <sensor_mgr_unlock>
}
 8005bce:	b004      	add	sp, #16
 8005bd0:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
 8005bd2:	4632      	mov	r2, r6
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f7ff ffd5 	bl	8005b86 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4620      	mov	r0, r4
 8005be0:	f7ff fed5 	bl	800598e <sensor_update_nextrun>
        sensor_unlock(cursor);
 8005be4:	4620      	mov	r0, r4
 8005be6:	f7ff fec3 	bl	8005970 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
 8005bea:	a903      	add	r1, sp, #12
 8005bec:	4628      	mov	r0, r5
 8005bee:	f7ff fef7 	bl	80059e0 <sensor_find_min_nextrun_sensor>
 8005bf2:	4604      	mov	r4, r0
        sensor_lock(cursor);
 8005bf4:	f7ff feb0 	bl	8005958 <sensor_lock>
        if (!cursor->s_poll_rate) {
 8005bf8:	6a23      	ldr	r3, [r4, #32]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0e2      	beq.n	8005bc4 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
 8005bfe:	9e03      	ldr	r6, [sp, #12]
 8005c00:	b96e      	cbnz	r6, 8005c1e <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
 8005c02:	4620      	mov	r0, r4
 8005c04:	f7ff fd60 	bl	80056c8 <sensor_type_traits_empty>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d0e2      	beq.n	8005bd2 <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
 8005c0c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8005c10:	9501      	str	r5, [sp, #4]
 8005c12:	2100      	movs	r1, #0
 8005c14:	9100      	str	r1, [sp, #0]
 8005c16:	4620      	mov	r0, r4
 8005c18:	f7ff ff90 	bl	8005b3c <sensor_mgr_poll_bytype>
 8005c1c:	e7de      	b.n	8005bdc <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
 8005c1e:	f7ff fe0f 	bl	8005840 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 8005c22:	9903      	ldr	r1, [sp, #12]
 8005c24:	4801      	ldr	r0, [pc, #4]	; (8005c2c <sensor_mgr_wakeup_event+0x78>)
 8005c26:	f000 fa8f 	bl	8006148 <os_callout_reset>
 8005c2a:	e7d0      	b.n	8005bce <sensor_mgr_wakeup_event+0x1a>
 8005c2c:	20002e3c 	.word	0x20002e3c

08005c30 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
 8005c30:	b508      	push	{r3, lr}
    os_time_advance(1);
 8005c32:	2001      	movs	r0, #1
 8005c34:	f001 fbbc 	bl	80073b0 <os_time_advance>
}
 8005c38:	bd08      	pop	{r3, pc}
	...

08005c3c <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
 8005c3c:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
 8005c3e:	f001 f935 	bl	8006eac <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 8005c42:	4b02      	ldr	r3, [pc, #8]	; (8005c4c <os_arch_ctx_sw+0x10>)
 8005c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c48:	605a      	str	r2, [r3, #4]
}
 8005c4a:	bd08      	pop	{r3, pc}
 8005c4c:	e000ed00 	.word	0xe000ed00

08005c50 <os_arch_save_sr>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c50:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005c54:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
 8005c56:	f000 0001 	and.w	r0, r0, #1
 8005c5a:	4770      	bx	lr

08005c5c <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
 8005c5c:	b900      	cbnz	r0, 8005c60 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
 8005c5e:	b662      	cpsie	i
        __enable_irq();
    }
}
 8005c60:	4770      	bx	lr

08005c62 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c62:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
 8005c66:	f000 0001 	and.w	r0, r0, #1
 8005c6a:	4770      	bx	lr

08005c6c <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
 8005c6c:	b570      	push	{r4, r5, r6, lr}
 8005c6e:	4606      	mov	r6, r0
 8005c70:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
 8005c72:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
 8005c76:	2309      	movs	r3, #9
 8005c78:	e003      	b.n	8005c82 <os_arch_task_stack_init+0x16>
        s[i] = 0;
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
 8005c80:	3301      	adds	r3, #1
 8005c82:	2b0d      	cmp	r3, #13
 8005c84:	ddf9      	ble.n	8005c7a <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
 8005c86:	4620      	mov	r0, r4
 8005c88:	f001 fbf0 	bl	800746c <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
 8005c8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c90:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
 8005c94:	6973      	ldr	r3, [r6, #20]
 8005c96:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
 8005c9a:	69b3      	ldr	r3, [r6, #24]
 8005c9c:	f845 3c20 	str.w	r3, [r5, #-32]

    return (s);
}
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}

08005ca4 <os_arch_init>:

void
os_arch_init(void)
{
 8005ca4:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8005ca6:	4a04      	ldr	r2, [pc, #16]	; (8005cb8 <os_arch_init+0x14>)
 8005ca8:	6953      	ldr	r3, [r2, #20]
 8005caa:	f043 0310 	orr.w	r3, r3, #16
 8005cae:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
 8005cb0:	f000 f964 	bl	8005f7c <os_init_idle_task>
}
 8005cb4:	bd08      	pop	{r3, pc}
 8005cb6:	bf00      	nop
 8005cb8:	e000ed00 	.word	0xe000ed00

08005cbc <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cbe:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
 8005cc2:	b90c      	cbnz	r4, 8005cc8 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
 8005cc4:	2400      	movs	r4, #0
 8005cc6:	e009      	b.n	8005cdc <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
 8005cc8:	2007      	movs	r0, #7
 8005cca:	e038      	b.n	8005d3e <os_arch_os_init+0x82>
            NVIC->IP[i] = -1;
 8005ccc:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
 8005cd0:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8005cd4:	26ff      	movs	r6, #255	; 0xff
 8005cd6:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
 8005cda:	3401      	adds	r4, #1
 8005cdc:	2cef      	cmp	r4, #239	; 0xef
 8005cde:	d9f5      	bls.n	8005ccc <os_arch_os_init+0x10>
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005ce0:	4c19      	ldr	r4, [pc, #100]	; (8005d48 <os_arch_os_init+0x8c>)
 8005ce2:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005ce4:	4e19      	ldr	r6, [pc, #100]	; (8005d4c <os_arch_os_init+0x90>)
 8005ce6:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005ce8:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005cea:	4e19      	ldr	r6, [pc, #100]	; (8005d50 <os_arch_os_init+0x94>)
 8005cec:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005cee:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005cf0:	4e18      	ldr	r6, [pc, #96]	; (8005d54 <os_arch_os_init+0x98>)
 8005cf2:	63ee      	str	r6, [r5, #60]	; 0x3c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005cf4:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005cf6:	4f18      	ldr	r7, [pc, #96]	; (8005d58 <os_arch_os_init+0x9c>)
 8005cf8:	60af      	str	r7, [r5, #8]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005cfa:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005cfc:	60ef      	str	r7, [r5, #12]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005cfe:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005d00:	612f      	str	r7, [r5, #16]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005d02:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005d04:	616f      	str	r7, [r5, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005d06:	68a4      	ldr	r4, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005d08:	61a7      	str	r7, [r4, #24]
        NVIC_SetVector(NonMaskableInt_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(-13, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(MemoryManagement_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(BusFault_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(UsageFault_IRQn, (uint32_t)os_default_irq_asm);
        for (i = 0; i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
 8005d0a:	2400      	movs	r4, #0
 8005d0c:	e006      	b.n	8005d1c <os_arch_os_init+0x60>
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
 8005d0e:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005d10:	4e0d      	ldr	r6, [pc, #52]	; (8005d48 <os_arch_os_init+0x8c>)
 8005d12:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005d14:	3510      	adds	r5, #16
 8005d16:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
 8005d1a:	3401      	adds	r4, #1
 8005d1c:	2c2a      	cmp	r4, #42	; 0x2a
 8005d1e:	ddf6      	ble.n	8005d0e <os_arch_os_init+0x52>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d20:	4c09      	ldr	r4, [pc, #36]	; (8005d48 <os_arch_os_init+0x8c>)
 8005d22:	25f0      	movs	r5, #240	; 0xf0
 8005d24:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8005d28:	2510      	movs	r5, #16
 8005d2a:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8005d2c:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVC_IRQ_NUMBER, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
 8005d30:	f014 0f01 	tst.w	r4, #1
 8005d34:	d004      	beq.n	8005d40 <os_arch_os_init+0x84>
    SVC_Call(os_arch_init);
 8005d36:	f8df c024 	ldr.w	ip, [pc, #36]	; 8005d5c <os_arch_os_init+0xa0>
 8005d3a:	df00      	svc	0
        err = OS_OK;
 8005d3c:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
 8005d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
 8005d40:	f7ff ffb0 	bl	8005ca4 <os_arch_init>
        err = OS_OK;
 8005d44:	2000      	movs	r0, #0
 8005d46:	e7fa      	b.n	8005d3e <os_arch_os_init+0x82>
 8005d48:	e000ed00 	.word	0xe000ed00
 8005d4c:	08007473 	.word	0x08007473
 8005d50:	080074b9 	.word	0x080074b9
 8005d54:	080074e3 	.word	0x080074e3
 8005d58:	080074ef 	.word	0x080074ef
 8005d5c:	08005ca5 	.word	0x08005ca5

08005d60 <os_arch_start>:

uint32_t
os_arch_start(void)
{
 8005d60:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
 8005d62:	f001 f989 	bl	8007078 <os_sched_next_task>
 8005d66:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
 8005d68:	f001 f8be 	bl	8006ee8 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
 8005d6c:	6823      	ldr	r3, [r4, #0]
 8005d6e:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005d70:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
 8005d74:	210e      	movs	r1, #14
 8005d76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d7a:	f002 f857 	bl	8007e2c <__wrap_os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
 8005d7e:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <os_arch_start+0x30>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
 8005d84:	4620      	mov	r0, r4
 8005d86:	f7ff ff59 	bl	8005c3c <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
 8005d8a:	69a0      	ldr	r0, [r4, #24]
 8005d8c:	bd10      	pop	{r4, pc}
 8005d8e:	bf00      	nop
 8005d90:	20002ef4 	.word	0x20002ef4

08005d94 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
 8005d94:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
 8005d96:	4814      	ldr	r0, [pc, #80]	; (8005de8 <os_arch_os_start+0x54>)
 8005d98:	6800      	ldr	r0, [r0, #0]
 8005d9a:	3804      	subs	r0, #4
 8005d9c:	f001 fb5c 	bl	8007458 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da0:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
 8005da4:	b9d4      	cbnz	r4, 8005ddc <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8005da6:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
 8005daa:	f004 0403 	and.w	r4, r4, #3
 8005dae:	2c03      	cmp	r4, #3
 8005db0:	d808      	bhi.n	8005dc4 <os_arch_os_start+0x30>
 8005db2:	e8df f004 	tbb	[pc, r4]
 8005db6:	1515      	.short	0x1515
 8005db8:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
 8005dba:	4c0c      	ldr	r4, [pc, #48]	; (8005dec <os_arch_os_start+0x58>)
 8005dbc:	6824      	ldr	r4, [r4, #0]
 8005dbe:	f014 0f01 	tst.w	r4, #1
 8005dc2:	d10f      	bne.n	8005de4 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
 8005dc4:	f8df c028 	ldr.w	ip, [pc, #40]	; 8005df0 <os_arch_os_start+0x5c>
 8005dc8:	df00      	svc	0
 8005dca:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
 8005dcc:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
 8005dce:	4c07      	ldr	r4, [pc, #28]	; (8005dec <os_arch_os_start+0x58>)
 8005dd0:	6824      	ldr	r4, [r4, #0]
 8005dd2:	f014 0f01 	tst.w	r4, #1
 8005dd6:	d1f5      	bne.n	8005dc4 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
 8005dd8:	2008      	movs	r0, #8
 8005dda:	e7f7      	b.n	8005dcc <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
 8005ddc:	2007      	movs	r0, #7
 8005dde:	e7f5      	b.n	8005dcc <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
 8005de0:	2008      	movs	r0, #8
 8005de2:	e7f3      	b.n	8005dcc <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
 8005de4:	2008      	movs	r0, #8
 8005de6:	e7f1      	b.n	8005dcc <os_arch_os_start+0x38>
 8005de8:	20002ea0 	.word	0x20002ea0
 8005dec:	200005e0 	.word	0x200005e0
 8005df0:	08005d61 	.word	0x08005d61

08005df4 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
 8005df4:	b508      	push	{r3, lr}
 8005df6:	4675      	mov	r5, lr
 8005df8:	4604      	mov	r4, r0
 8005dfa:	460e      	mov	r6, r1
    int sr;

    OS_ENTER_CRITICAL(sr);
 8005dfc:	f7ff ff28 	bl	8005c50 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
 8005e00:	f7fe f8a1 	bl	8003f46 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
 8005e04:	b18c      	cbz	r4, 8005e2a <__assert_func+0x36>
 8005e06:	4633      	mov	r3, r6
 8005e08:	4622      	mov	r2, r4
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	4809      	ldr	r0, [pc, #36]	; (8005e34 <__assert_func+0x40>)
 8005e0e:	f7fe f8c5 	bl	8003f9c <console_printf>

    if (hal_debugger_connected()) {
 8005e12:	f002 fe5d 	bl	8008ad0 <hal_debugger_connected>
 8005e16:	b100      	cbz	r0, 8005e1a <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
       asm("bkpt");
 8005e18:	be00      	bkpt	0x0000
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
 8005e1a:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <__assert_func+0x44>)
 8005e1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e20:	605a      	str	r2, [r3, #4]
    asm("isb");
 8005e22:	f3bf 8f6f 	isb	sy
    hal_system_reset();
 8005e26:	f002 fe55 	bl	8008ad4 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	4803      	ldr	r0, [pc, #12]	; (8005e3c <__assert_func+0x48>)
 8005e2e:	f7fe f8b5 	bl	8003f9c <console_printf>
 8005e32:	e7ee      	b.n	8005e12 <__assert_func+0x1e>
 8005e34:	0800f4b0 	.word	0x0800f4b0
 8005e38:	e000ed00 	.word	0xe000ed00
 8005e3c:	0800f4a0 	.word	0x0800f4a0

08005e40 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
 8005e40:	b500      	push	{lr}
 8005e42:	b083      	sub	sp, #12
 8005e44:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t *orig_sp;
#endif

    console_blocking_mode();
 8005e46:	f7fe f87e 	bl	8003f46 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
 8005e4a:	4d1b      	ldr	r5, [pc, #108]	; (8005eb8 <os_default_irq+0x78>)
 8005e4c:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005e54:	4819      	ldr	r0, [pc, #100]	; (8005ebc <os_default_irq+0x7c>)
 8005e56:	f7fe f8a1 	bl	8003f9c <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
 8005e5a:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
 8005e5c:	6883      	ldr	r3, [r0, #8]
 8005e5e:	6842      	ldr	r2, [r0, #4]
 8005e60:	6801      	ldr	r1, [r0, #0]
 8005e62:	68c0      	ldr	r0, [r0, #12]
 8005e64:	9000      	str	r0, [sp, #0]
 8005e66:	4816      	ldr	r0, [pc, #88]	; (8005ec0 <os_default_irq+0x80>)
 8005e68:	f7fe f898 	bl	8003f9c <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
 8005e6c:	6923      	ldr	r3, [r4, #16]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	68e3      	ldr	r3, [r4, #12]
 8005e72:	68a2      	ldr	r2, [r4, #8]
 8005e74:	6861      	ldr	r1, [r4, #4]
 8005e76:	4813      	ldr	r0, [pc, #76]	; (8005ec4 <os_default_irq+0x84>)
 8005e78:	f7fe f890 	bl	8003f9c <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
 8005e7c:	6a23      	ldr	r3, [r4, #32]
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	69e3      	ldr	r3, [r4, #28]
 8005e82:	69a2      	ldr	r2, [r4, #24]
 8005e84:	6961      	ldr	r1, [r4, #20]
 8005e86:	4810      	ldr	r0, [pc, #64]	; (8005ec8 <os_default_irq+0x88>)
 8005e88:	f7fe f888 	bl	8003f9c <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
 8005e8c:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
 8005e8e:	6983      	ldr	r3, [r0, #24]
 8005e90:	6942      	ldr	r2, [r0, #20]
 8005e92:	6901      	ldr	r1, [r0, #16]
 8005e94:	69c0      	ldr	r0, [r0, #28]
 8005e96:	9000      	str	r0, [sp, #0]
 8005e98:	480c      	ldr	r0, [pc, #48]	; (8005ecc <os_default_irq+0x8c>)
 8005e9a:	f7fe f87f 	bl	8003f9c <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
 8005e9e:	6869      	ldr	r1, [r5, #4]
 8005ea0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005ea2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005ea4:	480a      	ldr	r0, [pc, #40]	; (8005ed0 <os_default_irq+0x90>)
 8005ea6:	f7fe f879 	bl	8003f9c <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
 8005eaa:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8005eac:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005eae:	4809      	ldr	r0, [pc, #36]	; (8005ed4 <os_default_irq+0x94>)
 8005eb0:	f7fe f874 	bl	8003f9c <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
 8005eb4:	f002 fe0e 	bl	8008ad4 <hal_system_reset>
 8005eb8:	e000ed00 	.word	0xe000ed00
 8005ebc:	0800f4c8 	.word	0x0800f4c8
 8005ec0:	0800f4fc 	.word	0x0800f4fc
 8005ec4:	0800f530 	.word	0x0800f530
 8005ec8:	0800f564 	.word	0x0800f564
 8005ecc:	0800f598 	.word	0x0800f598
 8005ed0:	0800f5cc 	.word	0x0800f5cc
 8005ed4:	0800f5f4 	.word	0x0800f5f4

08005ed8 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
 8005eda:	f003 fab9 	bl	8009450 <hal_watchdog_tickle>
    sanity_last = 0;
 8005ede:	2500      	movs	r5, #0
 8005ee0:	e00b      	b.n	8005efa <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
 8005ee2:	f000 ff7b 	bl	8006ddc <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
 8005ee6:	f003 fab3 	bl	8009450 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
 8005eea:	4625      	mov	r5, r4
 8005eec:	e012      	b.n	8005f14 <os_idle_task+0x3c>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
 8005eee:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
 8005ef0:	f001 ff8c 	bl	8007e0c <__wrap_os_tick_idle>
        OS_EXIT_CRITICAL(sr);
 8005ef4:	4638      	mov	r0, r7
 8005ef6:	f7ff feb1 	bl	8005c5c <os_arch_restore_sr>
        ++g_os_idle_ctr;
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <os_idle_task+0x78>)
 8005efc:	6813      	ldr	r3, [r2, #0]
 8005efe:	3301      	adds	r3, #1
 8005f00:	6013      	str	r3, [r2, #0]
        now = os_time_get();
 8005f02:	f001 fa4f 	bl	80073a4 <os_time_get>
 8005f06:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
 8005f08:	f505 536a 	add.w	r3, r5, #14976	; 0x3a80
 8005f0c:	3318      	adds	r3, #24
 8005f0e:	1ac3      	subs	r3, r0, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	dce6      	bgt.n	8005ee2 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
 8005f14:	f7ff fe9c 	bl	8005c50 <os_arch_save_sr>
 8005f18:	4607      	mov	r7, r0
        now = os_time_get();
 8005f1a:	f001 fa43 	bl	80073a4 <os_time_get>
 8005f1e:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
 8005f20:	f001 f88a 	bl	8007038 <os_sched_wakeup_ticks>
 8005f24:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
 8005f26:	4630      	mov	r0, r6
 8005f28:	f000 f978 	bl	800621c <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
 8005f2c:	42a0      	cmp	r0, r4
 8005f2e:	bf28      	it	cs
 8005f30:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
 8005f32:	f505 536a 	add.w	r3, r5, #14976	; 0x3a80
 8005f36:	3318      	adds	r3, #24
 8005f38:	1b9b      	subs	r3, r3, r6
 8005f3a:	4298      	cmp	r0, r3
 8005f3c:	bf28      	it	cs
 8005f3e:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
 8005f40:	2863      	cmp	r0, #99	; 0x63
 8005f42:	d9d4      	bls.n	8005eee <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
 8005f44:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <os_idle_task+0x7c>)
 8005f46:	4298      	cmp	r0, r3
 8005f48:	d9d2      	bls.n	8005ef0 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
 8005f4a:	4802      	ldr	r0, [pc, #8]	; (8005f54 <os_idle_task+0x7c>)
 8005f4c:	e7d0      	b.n	8005ef0 <os_idle_task+0x18>
 8005f4e:	bf00      	nop
 8005f50:	20002ef0 	.word	0x20002ef0
 8005f54:	000927c0 	.word	0x000927c0

08005f58 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
 8005f58:	b508      	push	{r3, lr}
 8005f5a:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4608      	mov	r0, r1
 8005f60:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
 8005f62:	2300      	movs	r3, #0
 8005f64:	461a      	mov	r2, r3
 8005f66:	4619      	mov	r1, r3
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff ff43 	bl	8005df4 <__assert_func>
	...

08005f70 <os_started>:
}
 8005f70:	4b01      	ldr	r3, [pc, #4]	; (8005f78 <os_started+0x8>)
 8005f72:	6818      	ldr	r0, [r3, #0]
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	20002ef4 	.word	0x20002ef4

08005f7c <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
 8005f7c:	b500      	push	{lr}
 8005f7e:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
 8005f80:	2340      	movs	r3, #64	; 0x40
 8005f82:	9303      	str	r3, [sp, #12]
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <os_init_idle_task+0x60>)
 8005f86:	9302      	str	r3, [sp, #8]
 8005f88:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8c:	9301      	str	r3, [sp, #4]
 8005f8e:	23ff      	movs	r3, #255	; 0xff
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	2300      	movs	r3, #0
 8005f94:	4a12      	ldr	r2, [pc, #72]	; (8005fe0 <os_init_idle_task+0x64>)
 8005f96:	4913      	ldr	r1, [pc, #76]	; (8005fe4 <os_init_idle_task+0x68>)
 8005f98:	4813      	ldr	r0, [pc, #76]	; (8005fe8 <os_init_idle_task+0x6c>)
 8005f9a:	f001 f93d 	bl	8007218 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
 8005f9e:	b950      	cbnz	r0, 8005fb6 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
 8005fa0:	f000 ff52 	bl	8006e48 <os_sanity_init>
    assert(rc == 0);
 8005fa4:	b968      	cbnz	r0, 8005fc2 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
 8005fa6:	f247 5030 	movw	r0, #30000	; 0x7530
 8005faa:	f003 fa29 	bl	8009400 <hal_watchdog_init>
    assert(rc == 0);
 8005fae:	b970      	cbnz	r0, 8005fce <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
 8005fb0:	b005      	add	sp, #20
 8005fb2:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff ff19 	bl	8005df4 <__assert_func>
    assert(rc == 0);
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff ff13 	bl	8005df4 <__assert_func>
    assert(rc == 0);
 8005fce:	2300      	movs	r3, #0
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff ff0d 	bl	8005df4 <__assert_func>
 8005fda:	bf00      	nop
 8005fdc:	200005e8 	.word	0x200005e8
 8005fe0:	08005ed9 	.word	0x08005ed9
 8005fe4:	0800f618 	.word	0x0800f618
 8005fe8:	20002ea0 	.word	0x20002ea0

08005fec <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
 8005fec:	b510      	push	{r4, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
 8005ff2:	4b24      	ldr	r3, [pc, #144]	; (8006084 <os_init+0x98>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
 8005ffa:	4b23      	ldr	r3, [pc, #140]	; (8006088 <os_init+0x9c>)
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
 8006000:	f000 faa8 	bl	8006554 <os_eventq_dflt_get>
 8006004:	f000 fa0a 	bl	800641c <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
 8006008:	f000 fa00 	bl	800640c <os_dev_reset>

    err = os_arch_os_init();
 800600c:	f7ff fe56 	bl	8005cbc <os_arch_os_init>
    assert(err == OS_OK);
 8006010:	bb00      	cbnz	r0, 8006054 <os_init+0x68>

    if (main_fn) {
 8006012:	b18c      	cbz	r4, 8006038 <os_init+0x4c>
        err = os_task_init(&os_main_task, "main", os_main, main_fn,
 8006014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006018:	9303      	str	r3, [sp, #12]
 800601a:	4b1c      	ldr	r3, [pc, #112]	; (800608c <os_init+0xa0>)
 800601c:	9302      	str	r3, [sp, #8]
 800601e:	f04f 33ff 	mov.w	r3, #4294967295
 8006022:	9301      	str	r3, [sp, #4]
 8006024:	237f      	movs	r3, #127	; 0x7f
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	4623      	mov	r3, r4
 800602a:	4a19      	ldr	r2, [pc, #100]	; (8006090 <os_init+0xa4>)
 800602c:	4919      	ldr	r1, [pc, #100]	; (8006094 <os_init+0xa8>)
 800602e:	481a      	ldr	r0, [pc, #104]	; (8006098 <os_init+0xac>)
 8006030:	f001 f8f2 	bl	8007218 <os_task_init>
 8006034:	b2c0      	uxtb	r0, r0
                           OS_MAIN_TASK_PRIO, OS_WAIT_FOREVER, os_main_stack,
                           OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
 8006036:	b998      	cbnz	r0, 8006060 <os_init+0x74>
    }
    /* Call bsp related OS initializations */
    hal_bsp_init();
 8006038:	f002 fbda 	bl	80087f0 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
 800603c:	2001      	movs	r0, #1
 800603e:	f000 f985 	bl	800634c <os_dev_initialize_all>
 8006042:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
 8006044:	b990      	cbnz	r0, 800606c <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
 8006046:	2002      	movs	r0, #2
 8006048:	f000 f980 	bl	800634c <os_dev_initialize_all>
 800604c:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
 800604e:	b998      	cbnz	r0, 8006078 <os_init+0x8c>
}
 8006050:	b004      	add	sp, #16
 8006052:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
 8006054:	2300      	movs	r3, #0
 8006056:	461a      	mov	r2, r3
 8006058:	4619      	mov	r1, r3
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff feca 	bl	8005df4 <__assert_func>
        assert(err == 0);
 8006060:	2300      	movs	r3, #0
 8006062:	461a      	mov	r2, r3
 8006064:	4619      	mov	r1, r3
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fec4 	bl	8005df4 <__assert_func>
    assert(err == OS_OK);
 800606c:	2300      	movs	r3, #0
 800606e:	461a      	mov	r2, r3
 8006070:	4619      	mov	r1, r3
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff febe 	bl	8005df4 <__assert_func>
    assert(err == OS_OK);
 8006078:	2300      	movs	r3, #0
 800607a:	461a      	mov	r2, r3
 800607c:	4619      	mov	r1, r3
 800607e:	4618      	mov	r0, r3
 8006080:	f7ff feb8 	bl	8005df4 <__assert_func>
 8006084:	20002ef8 	.word	0x20002ef8
 8006088:	20002f1c 	.word	0x20002f1c
 800608c:	200006e8 	.word	0x200006e8
 8006090:	08005f59 	.word	0x08005f59
 8006094:	0800f610 	.word	0x0800f610
 8006098:	200016e8 	.word	0x200016e8

0800609c <os_start>:

void
os_start(void)
{
 800609c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
 800609e:	f003 f9c9 	bl	8009434 <hal_watchdog_enable>

    err = os_arch_os_start();
 80060a2:	f7ff fe77 	bl	8005d94 <os_arch_os_start>
    assert(err == OS_OK);
 80060a6:	b900      	cbnz	r0, 80060aa <os_start+0xe>
#else
    assert(0);
#endif
}
 80060a8:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
 80060aa:	2300      	movs	r3, #0
 80060ac:	461a      	mov	r2, r3
 80060ae:	4619      	mov	r1, r3
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff fe9f 	bl	8005df4 <__assert_func>
	...

080060b8 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
 80060b8:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 80060ba:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <os_pkg_init+0x34>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	b14b      	cbz	r3, 80060d4 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
 80060c0:	2003      	movs	r0, #3
 80060c2:	f000 f943 	bl	800634c <os_dev_initialize_all>
 80060c6:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
 80060c8:	b948      	cbnz	r0, 80060de <os_pkg_init+0x26>

    os_mempool_module_init();
 80060ca:	f000 fce7 	bl	8006a9c <os_mempool_module_init>
    os_msys_init();
 80060ce:	f000 fd5d 	bl	8006b8c <os_msys_init>
}
 80060d2:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
 80060d4:	461a      	mov	r2, r3
 80060d6:	4619      	mov	r1, r3
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff fe8b 	bl	8005df4 <__assert_func>
    assert(err == OS_OK);
 80060de:	2300      	movs	r3, #0
 80060e0:	461a      	mov	r2, r3
 80060e2:	4619      	mov	r1, r3
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fe85 	bl	8005df4 <__assert_func>
 80060ea:	bf00      	nop
 80060ec:	20002e28 	.word	0x20002e28

080060f0 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	4604      	mov	r4, r0
 80060f4:	460d      	mov	r5, r1
 80060f6:	4617      	mov	r7, r2
 80060f8:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
 80060fa:	2220      	movs	r2, #32
 80060fc:	2100      	movs	r1, #0
 80060fe:	f001 fb16 	bl	800772e <memset>
    c->c_ev.ev_cb = ev_cb;
 8006102:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
 8006104:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
 8006106:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
 8006108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800610c <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
 8006110:	f7ff fd9e 	bl	8005c50 <os_arch_save_sr>
 8006114:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
 8006116:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
 8006118:	b13b      	cbz	r3, 800612a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 800611a:	69a2      	ldr	r2, [r4, #24]
 800611c:	b172      	cbz	r2, 800613c <os_callout_stop+0x30>
 800611e:	61d3      	str	r3, [r2, #28]
 8006120:	69e3      	ldr	r3, [r4, #28]
 8006122:	69a2      	ldr	r2, [r4, #24]
 8006124:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
 8006126:	2300      	movs	r3, #0
 8006128:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
 800612a:	6920      	ldr	r0, [r4, #16]
 800612c:	b110      	cbz	r0, 8006134 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
 800612e:	4621      	mov	r1, r4
 8006130:	f000 f9ef 	bl	8006512 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
 8006134:	4628      	mov	r0, r5
 8006136:	f7ff fd91 	bl	8005c5c <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
 800613a:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 800613c:	4a01      	ldr	r2, [pc, #4]	; (8006144 <os_callout_stop+0x38>)
 800613e:	6053      	str	r3, [r2, #4]
 8006140:	e7ee      	b.n	8006120 <os_callout_stop+0x14>
 8006142:	bf00      	nop
 8006144:	20002ef8 	.word	0x20002ef8

08006148 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
 8006148:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
 800614a:	6903      	ldr	r3, [r0, #16]
 800614c:	b1c3      	cbz	r3, 8006180 <os_callout_reset+0x38>
 800614e:	4605      	mov	r5, r0
 8006150:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
 8006152:	2900      	cmp	r1, #0
 8006154:	db2f      	blt.n	80061b6 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
 8006156:	f7ff fd7b 	bl	8005c50 <os_arch_save_sr>
 800615a:	4606      	mov	r6, r0

    os_callout_stop(c);
 800615c:	4628      	mov	r0, r5
 800615e:	f7ff ffd5 	bl	800610c <os_callout_stop>

    if (ticks == 0) {
 8006162:	b904      	cbnz	r4, 8006166 <os_callout_reset+0x1e>
        ticks = 1;
 8006164:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
 8006166:	f001 f91d 	bl	80073a4 <os_time_get>
 800616a:	4420      	add	r0, r4
 800616c:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 800616e:	4b13      	ldr	r3, [pc, #76]	; (80061bc <os_callout_reset+0x74>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	b153      	cbz	r3, 800618a <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
 8006174:	695a      	ldr	r2, [r3, #20]
 8006176:	1a82      	subs	r2, r0, r2
 8006178:	2a00      	cmp	r2, #0
 800617a:	db06      	blt.n	800618a <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	e7f8      	b.n	8006172 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
 8006180:	461a      	mov	r2, r3
 8006182:	4619      	mov	r1, r3
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fe35 	bl	8005df4 <__assert_func>
            break;
        }
    }

    if (entry) {
 800618a:	b15b      	cbz	r3, 80061a4 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
 800618c:	69da      	ldr	r2, [r3, #28]
 800618e:	61ea      	str	r2, [r5, #28]
 8006190:	61ab      	str	r3, [r5, #24]
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	6015      	str	r5, [r2, #0]
 8006196:	3518      	adds	r5, #24
 8006198:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
 800619a:	4630      	mov	r0, r6
 800619c:	f7ff fd5e 	bl	8005c5c <os_arch_restore_sr>

    ret = OS_OK;
 80061a0:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
 80061a2:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
 80061a4:	2300      	movs	r3, #0
 80061a6:	61ab      	str	r3, [r5, #24]
 80061a8:	4b04      	ldr	r3, [pc, #16]	; (80061bc <os_callout_reset+0x74>)
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	61ea      	str	r2, [r5, #28]
 80061ae:	6015      	str	r5, [r2, #0]
 80061b0:	3518      	adds	r5, #24
 80061b2:	605d      	str	r5, [r3, #4]
 80061b4:	e7f1      	b.n	800619a <os_callout_reset+0x52>
        ret = OS_EINVAL;
 80061b6:	2002      	movs	r0, #2
    return ret;
 80061b8:	e7f3      	b.n	80061a2 <os_callout_reset+0x5a>
 80061ba:	bf00      	nop
 80061bc:	20002ef8 	.word	0x20002ef8

080061c0 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
 80061c0:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
 80061c2:	f001 f8ef 	bl	80073a4 <os_time_get>
 80061c6:	4605      	mov	r5, r0
 80061c8:	e00f      	b.n	80061ea <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 80061ca:	69e2      	ldr	r2, [r4, #28]
 80061cc:	4b12      	ldr	r3, [pc, #72]	; (8006218 <os_callout_tick+0x58>)
 80061ce:	605a      	str	r2, [r3, #4]
 80061d0:	69e3      	ldr	r3, [r4, #28]
 80061d2:	69a2      	ldr	r2, [r4, #24]
 80061d4:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
 80061da:	f7ff fd3f 	bl	8005c5c <os_arch_restore_sr>

        if (c) {
 80061de:	b1d4      	cbz	r4, 8006216 <os_callout_tick+0x56>
            if (c->c_evq) {
 80061e0:	6920      	ldr	r0, [r4, #16]
 80061e2:	b9a0      	cbnz	r0, 800620e <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
 80061e4:	6863      	ldr	r3, [r4, #4]
 80061e6:	4620      	mov	r0, r4
 80061e8:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
 80061ea:	f7ff fd31 	bl	8005c50 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
 80061ee:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <os_callout_tick+0x58>)
 80061f0:	681c      	ldr	r4, [r3, #0]
        if (c) {
 80061f2:	2c00      	cmp	r4, #0
 80061f4:	d0f1      	beq.n	80061da <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
 80061f6:	6963      	ldr	r3, [r4, #20]
 80061f8:	1aeb      	subs	r3, r5, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	db05      	blt.n	800620a <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 80061fe:	69a3      	ldr	r3, [r4, #24]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0e2      	beq.n	80061ca <os_callout_tick+0xa>
 8006204:	69e2      	ldr	r2, [r4, #28]
 8006206:	61da      	str	r2, [r3, #28]
 8006208:	e7e2      	b.n	80061d0 <os_callout_tick+0x10>
                c = NULL;
 800620a:	2400      	movs	r4, #0
 800620c:	e7e5      	b.n	80061da <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
 800620e:	4621      	mov	r1, r4
 8006210:	f000 f90c 	bl	800642c <os_eventq_put>
 8006214:	e7e9      	b.n	80061ea <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	20002ef8 	.word	0x20002ef8

0800621c <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
 800621c:	b510      	push	{r4, lr}
 800621e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
 8006220:	f7ff fd1f 	bl	8005c62 <os_arch_in_critical>
 8006224:	b130      	cbz	r0, 8006234 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
 8006226:	4b09      	ldr	r3, [pc, #36]	; (800624c <os_callout_wakeup_ticks+0x30>)
 8006228:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
 800622a:	b15b      	cbz	r3, 8006244 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
 800622c:	6958      	ldr	r0, [r3, #20]
 800622e:	1b00      	subs	r0, r0, r4
 8006230:	d406      	bmi.n	8006240 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
 8006232:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
 8006234:	2300      	movs	r3, #0
 8006236:	461a      	mov	r2, r3
 8006238:	4619      	mov	r1, r3
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff fdda 	bl	8005df4 <__assert_func>
            rt = 0;     /* callout time is in the past */
 8006240:	2000      	movs	r0, #0
 8006242:	e7f6      	b.n	8006232 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
 8006244:	f04f 30ff 	mov.w	r0, #4294967295
    return (rt);
 8006248:	e7f3      	b.n	8006232 <os_callout_wakeup_ticks+0x16>
 800624a:	bf00      	nop
 800624c:	20002ef8 	.word	0x20002ef8

08006250 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
 8006250:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
 8006252:	4601      	mov	r1, r0
 8006254:	2000      	movs	r0, #0
 8006256:	f002 fda3 	bl	8008da0 <hal_timer_config>
    return rc;
}
 800625a:	bd08      	pop	{r3, pc}

0800625c <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
 800625c:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
 800625e:	2000      	movs	r0, #0
 8006260:	f002 fdec 	bl	8008e3c <hal_timer_read>
    return cpu_time;
}
 8006264:	bd08      	pop	{r3, pc}
	...

08006268 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
 8006268:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
 800626a:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <os_dev_add+0x58>)
 800626c:	681d      	ldr	r5, [r3, #0]
 800626e:	b115      	cbz	r5, 8006276 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 8006270:	462b      	mov	r3, r5
    prev_dev = NULL;
 8006272:	2400      	movs	r4, #0
 8006274:	e008      	b.n	8006288 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 8006276:	4603      	mov	r3, r0
 8006278:	f843 5f20 	str.w	r5, [r3, #32]!
 800627c:	4a10      	ldr	r2, [pc, #64]	; (80062c0 <os_dev_add+0x58>)
 800627e:	6053      	str	r3, [r2, #4]
 8006280:	6010      	str	r0, [r2, #0]
        return (0);
 8006282:	e010      	b.n	80062a6 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
 8006284:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	b143      	cbz	r3, 800629c <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
 800628a:	7e01      	ldrb	r1, [r0, #24]
 800628c:	7e1a      	ldrb	r2, [r3, #24]
 800628e:	4291      	cmp	r1, r2
 8006290:	d304      	bcc.n	800629c <os_dev_add+0x34>
 8006292:	d1f7      	bne.n	8006284 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
 8006294:	7e41      	ldrb	r1, [r0, #25]
 8006296:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
 8006298:	4291      	cmp	r1, r2
 800629a:	d2f3      	bcs.n	8006284 <os_dev_add+0x1c>
    }

    if (prev_dev) {
 800629c:	b15c      	cbz	r4, 80062b6 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 800629e:	6a23      	ldr	r3, [r4, #32]
 80062a0:	6203      	str	r3, [r0, #32]
 80062a2:	b11b      	cbz	r3, 80062ac <os_dev_add+0x44>
 80062a4:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
 80062a6:	2000      	movs	r0, #0
 80062a8:	bc30      	pop	{r4, r5}
 80062aa:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 80062ac:	f100 0320 	add.w	r3, r0, #32
 80062b0:	4a03      	ldr	r2, [pc, #12]	; (80062c0 <os_dev_add+0x58>)
 80062b2:	6053      	str	r3, [r2, #4]
 80062b4:	e7f6      	b.n	80062a4 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 80062b6:	6205      	str	r5, [r0, #32]
 80062b8:	4b01      	ldr	r3, [pc, #4]	; (80062c0 <os_dev_add+0x58>)
 80062ba:	6018      	str	r0, [r3, #0]
 80062bc:	e7f3      	b.n	80062a6 <os_dev_add+0x3e>
 80062be:	bf00      	nop
 80062c0:	20001738 	.word	0x20001738

080062c4 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
 80062c4:	b510      	push	{r4, lr}
 80062c6:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
 80062c8:	6903      	ldr	r3, [r0, #16]
 80062ca:	6941      	ldr	r1, [r0, #20]
 80062cc:	4798      	blx	r3
    if (rc != 0) {
 80062ce:	4603      	mov	r3, r0
 80062d0:	b128      	cbz	r0, 80062de <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
 80062d2:	7ee2      	ldrb	r2, [r4, #27]
 80062d4:	f012 0f08 	tst.w	r2, #8
 80062d8:	d105      	bne.n	80062e6 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	e003      	b.n	80062e6 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
 80062de:	7ee2      	ldrb	r2, [r4, #27]
 80062e0:	f042 0201 	orr.w	r2, r2, #1
 80062e4:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	bd10      	pop	{r4, pc}

080062ea <os_dev_init>:
    dev->od_name = name;
 80062ea:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
 80062ec:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
 80062ee:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
 80062f4:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
 80062f6:	9a00      	ldr	r2, [sp, #0]
 80062f8:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
 80062fa:	9a01      	ldr	r2, [sp, #4]
 80062fc:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
 80062fe:	6003      	str	r3, [r0, #0]
 8006300:	6043      	str	r3, [r0, #4]
 8006302:	6083      	str	r3, [r0, #8]
 8006304:	60c3      	str	r3, [r0, #12]
}
 8006306:	4618      	mov	r0, r3
 8006308:	4770      	bx	lr
	...

0800630c <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
 800630c:	b530      	push	{r4, r5, lr}
 800630e:	b083      	sub	sp, #12
 8006310:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
 8006312:	9c07      	ldr	r4, [sp, #28]
 8006314:	9401      	str	r4, [sp, #4]
 8006316:	9c06      	ldr	r4, [sp, #24]
 8006318:	9400      	str	r4, [sp, #0]
 800631a:	f7ff ffe6 	bl	80062ea <os_dev_init>
    if (rc != 0) {
 800631e:	4603      	mov	r3, r0
 8006320:	b110      	cbz	r0, 8006328 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
 8006322:	4618      	mov	r0, r3
 8006324:	b003      	add	sp, #12
 8006326:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
 8006328:	4628      	mov	r0, r5
 800632a:	f7ff ff9d 	bl	8006268 <os_dev_add>
    if (rc != 0) {
 800632e:	4603      	mov	r3, r0
 8006330:	2800      	cmp	r0, #0
 8006332:	d1f6      	bne.n	8006322 <os_dev_create+0x16>
    if (g_os_started) {
 8006334:	4a04      	ldr	r2, [pc, #16]	; (8006348 <os_dev_create+0x3c>)
 8006336:	6812      	ldr	r2, [r2, #0]
 8006338:	2a00      	cmp	r2, #0
 800633a:	d0f2      	beq.n	8006322 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
 800633c:	4628      	mov	r0, r5
 800633e:	f7ff ffc1 	bl	80062c4 <os_dev_initialize>
 8006342:	4603      	mov	r3, r0
    return (rc);
 8006344:	e7ed      	b.n	8006322 <os_dev_create+0x16>
 8006346:	bf00      	nop
 8006348:	20002ef4 	.word	0x20002ef4

0800634c <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8006350:	4b08      	ldr	r3, [pc, #32]	; (8006374 <os_dev_initialize_all+0x28>)
 8006352:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
 8006354:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8006356:	e000      	b.n	800635a <os_dev_initialize_all+0xe>
 8006358:	6a24      	ldr	r4, [r4, #32]
 800635a:	b144      	cbz	r4, 800636e <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
 800635c:	7e23      	ldrb	r3, [r4, #24]
 800635e:	42ab      	cmp	r3, r5
 8006360:	d1fa      	bne.n	8006358 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
 8006362:	4620      	mov	r0, r4
 8006364:	f7ff ffae 	bl	80062c4 <os_dev_initialize>
            if (rc) {
 8006368:	4602      	mov	r2, r0
 800636a:	2800      	cmp	r0, #0
 800636c:	d0f4      	beq.n	8006358 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
 800636e:	4610      	mov	r0, r2
 8006370:	bd38      	pop	{r3, r4, r5, pc}
 8006372:	bf00      	nop
 8006374:	20001738 	.word	0x20001738

08006378 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 800637c:	4b05      	ldr	r3, [pc, #20]	; (8006394 <os_dev_lookup+0x1c>)
 800637e:	681c      	ldr	r4, [r3, #0]
 8006380:	b134      	cbz	r4, 8006390 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
 8006382:	4629      	mov	r1, r5
 8006384:	69e0      	ldr	r0, [r4, #28]
 8006386:	f001 f9ed 	bl	8007764 <strcmp>
 800638a:	b108      	cbz	r0, 8006390 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 800638c:	6a24      	ldr	r4, [r4, #32]
 800638e:	e7f7      	b.n	8006380 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
 8006390:	4620      	mov	r0, r4
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	20001738 	.word	0x20001738

08006398 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	460d      	mov	r5, r1
 800639c:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
 800639e:	f7ff ffeb 	bl	8006378 <os_dev_lookup>
    if (dev == NULL) {
 80063a2:	4604      	mov	r4, r0
 80063a4:	b1a0      	cbz	r0, 80063d0 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
 80063a6:	7ec3      	ldrb	r3, [r0, #27]
 80063a8:	f013 0f01 	tst.w	r3, #1
 80063ac:	d012      	beq.n	80063d4 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
 80063ae:	6803      	ldr	r3, [r0, #0]
 80063b0:	b11b      	cbz	r3, 80063ba <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
 80063b2:	4632      	mov	r2, r6
 80063b4:	4629      	mov	r1, r5
 80063b6:	4798      	blx	r3
        if (rc != 0) {
 80063b8:	b970      	cbnz	r0, 80063d8 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
 80063ba:	f7ff fc49 	bl	8005c50 <os_arch_save_sr>
    ++dev->od_open_ref;
 80063be:	7ea3      	ldrb	r3, [r4, #26]
 80063c0:	3301      	adds	r3, #1
 80063c2:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
 80063c4:	7ee3      	ldrb	r3, [r4, #27]
 80063c6:	f043 0302 	orr.w	r3, r3, #2
 80063ca:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
 80063cc:	f7ff fc46 	bl	8005c5c <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
 80063d0:	4620      	mov	r0, r4
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
 80063d4:	2400      	movs	r4, #0
 80063d6:	e7fb      	b.n	80063d0 <os_dev_open+0x38>
    return (NULL);
 80063d8:	2400      	movs	r4, #0
 80063da:	e7f9      	b.n	80063d0 <os_dev_open+0x38>

080063dc <os_dev_close>:

int
os_dev_close(struct os_dev *dev)
{
 80063dc:	b510      	push	{r4, lr}
 80063de:	4604      	mov	r4, r0
    int rc;
    os_sr_t sr;

    if (dev->od_handlers.od_close) {
 80063e0:	68c3      	ldr	r3, [r0, #12]
 80063e2:	b113      	cbz	r3, 80063ea <os_dev_close+0xe>
        rc = dev->od_handlers.od_close(dev);
 80063e4:	4798      	blx	r3
        if (rc != 0) {
 80063e6:	4603      	mov	r3, r0
 80063e8:	b968      	cbnz	r0, 8006406 <os_dev_close+0x2a>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
 80063ea:	f7ff fc31 	bl	8005c50 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
 80063ee:	7ea3      	ldrb	r3, [r4, #26]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	76a3      	strb	r3, [r4, #26]
 80063f6:	b91b      	cbnz	r3, 8006400 <os_dev_close+0x24>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
 80063f8:	7ee3      	ldrb	r3, [r4, #27]
 80063fa:	f023 0306 	bic.w	r3, r3, #6
 80063fe:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
 8006400:	f7ff fc2c 	bl	8005c5c <os_arch_restore_sr>

    return (0);
 8006404:	2300      	movs	r3, #0
err:
    return (rc);
}
 8006406:	4618      	mov	r0, r3
 8006408:	bd10      	pop	{r4, pc}
	...

0800640c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
 800640c:	4b02      	ldr	r3, [pc, #8]	; (8006418 <os_dev_reset+0xc>)
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	605b      	str	r3, [r3, #4]
}
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	20001738 	.word	0x20001738

0800641c <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
 800641c:	2200      	movs	r2, #0
 800641e:	6002      	str	r2, [r0, #0]
 8006420:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
 8006422:	4603      	mov	r3, r0
 8006424:	f843 2f08 	str.w	r2, [r3, #8]!
 8006428:	60c3      	str	r3, [r0, #12]
}
 800642a:	4770      	bx	lr

0800642c <os_eventq_put>:
    return evq->evq_list.stqh_last != NULL;
}

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
 800642c:	b570      	push	{r4, r5, r6, lr}
 800642e:	4605      	mov	r5, r0
 8006430:	460c      	mov	r4, r1
    int resched;
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 8006432:	f7ff fc0d 	bl	8005c50 <os_arch_save_sr>
 8006436:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
 8006438:	7823      	ldrb	r3, [r4, #0]
 800643a:	b9a3      	cbnz	r3, 8006466 <os_eventq_put+0x3a>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
 800643c:	2301      	movs	r3, #1
 800643e:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
 8006440:	2300      	movs	r3, #0
 8006442:	60e3      	str	r3, [r4, #12]
 8006444:	68eb      	ldr	r3, [r5, #12]
 8006446:	601c      	str	r4, [r3, #0]
 8006448:	340c      	adds	r4, #12
 800644a:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
 800644c:	6868      	ldr	r0, [r5, #4]
 800644e:	b188      	cbz	r0, 8006474 <os_eventq_put+0x48>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
 8006450:	7b03      	ldrb	r3, [r0, #12]
 8006452:	2b02      	cmp	r3, #2
 8006454:	d00a      	beq.n	800646c <os_eventq_put+0x40>
    resched = 0;
 8006456:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
 8006458:	2300      	movs	r3, #0
 800645a:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
 800645c:	4630      	mov	r0, r6
 800645e:	f7ff fbfd 	bl	8005c5c <os_arch_restore_sr>

    if (resched) {
 8006462:	b94c      	cbnz	r4, 8006478 <os_eventq_put+0x4c>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
 8006464:	bd70      	pop	{r4, r5, r6, pc}
        OS_EXIT_CRITICAL(sr);
 8006466:	f7ff fbf9 	bl	8005c5c <os_arch_restore_sr>
 800646a:	e7fb      	b.n	8006464 <os_eventq_put+0x38>
            os_sched_wakeup(evq->evq_task);
 800646c:	f000 fd8a 	bl	8006f84 <os_sched_wakeup>
            resched = 1;
 8006470:	2401      	movs	r4, #1
 8006472:	e7f1      	b.n	8006458 <os_eventq_put+0x2c>
    resched = 0;
 8006474:	2400      	movs	r4, #0
 8006476:	e7f1      	b.n	800645c <os_eventq_put+0x30>
        os_sched(NULL);
 8006478:	2000      	movs	r0, #0
 800647a:	f000 fe03 	bl	8007084 <os_sched>
 800647e:	e7f1      	b.n	8006464 <os_eventq_put+0x38>

08006480 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
 8006484:	f000 fd2a 	bl	8006edc <os_sched_get_current_task>
 8006488:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
 800648a:	682b      	ldr	r3, [r5, #0]
 800648c:	4283      	cmp	r3, r0
 800648e:	d001      	beq.n	8006494 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
 8006490:	b9db      	cbnz	r3, 80064ca <os_eventq_get+0x4a>
            evq->evq_owner = t;
 8006492:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
 8006494:	f7ff fbdc 	bl	8005c50 <os_arch_save_sr>
 8006498:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
 800649a:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
 800649c:	b9de      	cbnz	r6, 80064d6 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
 800649e:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
 80064a0:	f04f 31ff 	mov.w	r1, #4294967295
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 fd25 	bl	8006ef4 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
 80064aa:	7b63      	ldrb	r3, [r4, #13]
 80064ac:	f043 0308 	orr.w	r3, r3, #8
 80064b0:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
 80064b2:	4638      	mov	r0, r7
 80064b4:	f7ff fbd2 	bl	8005c5c <os_arch_restore_sr>

        os_sched(NULL);
 80064b8:	2000      	movs	r0, #0
 80064ba:	f000 fde3 	bl	8007084 <os_sched>

        OS_ENTER_CRITICAL(sr);
 80064be:	f7ff fbc7 	bl	8005c50 <os_arch_save_sr>
 80064c2:	4607      	mov	r7, r0
        evq->evq_task = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	606b      	str	r3, [r5, #4]
        goto pull_one;
 80064c8:	e7e7      	b.n	800649a <os_eventq_get+0x1a>
            assert(0);
 80064ca:	2300      	movs	r3, #0
 80064cc:	461a      	mov	r2, r3
 80064ce:	4619      	mov	r1, r3
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7ff fc8f 	bl	8005df4 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 80064d6:	68f3      	ldr	r3, [r6, #12]
 80064d8:	60ab      	str	r3, [r5, #8]
 80064da:	b153      	cbz	r3, 80064f2 <os_eventq_get+0x72>
        ev->ev_queued = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
 80064e0:	7b63      	ldrb	r3, [r4, #13]
 80064e2:	f023 0308 	bic.w	r3, r3, #8
 80064e6:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
 80064e8:	4638      	mov	r0, r7
 80064ea:	f7ff fbb7 	bl	8005c5c <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
 80064ee:	4630      	mov	r0, r6
 80064f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 80064f2:	f105 0308 	add.w	r3, r5, #8
 80064f6:	60eb      	str	r3, [r5, #12]
 80064f8:	e7f0      	b.n	80064dc <os_eventq_get+0x5c>

080064fa <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
 80064fa:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
 80064fc:	f7ff ffc0 	bl	8006480 <os_eventq_get>
    assert(ev->ev_cb != NULL);
 8006500:	6843      	ldr	r3, [r0, #4]
 8006502:	b10b      	cbz	r3, 8006508 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
 8006504:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
 8006506:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
 8006508:	461a      	mov	r2, r3
 800650a:	4619      	mov	r1, r3
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fc71 	bl	8005df4 <__assert_func>

08006512 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
 8006512:	b538      	push	{r3, r4, r5, lr}
 8006514:	4605      	mov	r5, r0
 8006516:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 8006518:	f7ff fb9a 	bl	8005c50 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
 800651c:	7823      	ldrb	r3, [r4, #0]
 800651e:	b183      	cbz	r3, 8006542 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 8006520:	68aa      	ldr	r2, [r5, #8]
 8006522:	42a2      	cmp	r2, r4
 8006524:	d107      	bne.n	8006536 <os_eventq_remove+0x24>
 8006526:	68d3      	ldr	r3, [r2, #12]
 8006528:	60ab      	str	r3, [r5, #8]
 800652a:	b953      	cbnz	r3, 8006542 <os_eventq_remove+0x30>
 800652c:	f105 0308 	add.w	r3, r5, #8
 8006530:	60eb      	str	r3, [r5, #12]
 8006532:	e006      	b.n	8006542 <os_eventq_remove+0x30>
 8006534:	461a      	mov	r2, r3
 8006536:	68d3      	ldr	r3, [r2, #12]
 8006538:	42a3      	cmp	r3, r4
 800653a:	d1fb      	bne.n	8006534 <os_eventq_remove+0x22>
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	60d3      	str	r3, [r2, #12]
 8006540:	b123      	cbz	r3, 800654c <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
 8006546:	f7ff fb89 	bl	8005c5c <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
 800654a:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 800654c:	320c      	adds	r2, #12
 800654e:	60ea      	str	r2, [r5, #12]
 8006550:	e7f7      	b.n	8006542 <os_eventq_remove+0x30>
	...

08006554 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
 8006554:	4800      	ldr	r0, [pc, #0]	; (8006558 <os_eventq_dflt_get+0x4>)
 8006556:	4770      	bx	lr
 8006558:	20001740 	.word	0x20001740

0800655c <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
 800655c:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
 800655e:	2000      	movs	r0, #0
 8006560:	6018      	str	r0, [r3, #0]
 8006562:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
 8006564:	6098      	str	r0, [r3, #8]
 8006566:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
 8006568:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
 800656a:	611a      	str	r2, [r3, #16]

    return (0);
}
 800656c:	4770      	bx	lr

0800656e <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
 800656e:	b538      	push	{r3, r4, r5, lr}
 8006570:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
 8006572:	f7ff fb6d 	bl	8005c50 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
 8006576:	682c      	ldr	r4, [r5, #0]
    if (mp) {
 8006578:	b114      	cbz	r4, 8006580 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
 800657a:	6863      	ldr	r3, [r4, #4]
 800657c:	602b      	str	r3, [r5, #0]
 800657e:	b12b      	cbz	r3, 800658c <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
 8006580:	f7ff fb6c 	bl	8005c5c <os_arch_restore_sr>

    if (mp) {
 8006584:	b124      	cbz	r4, 8006590 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
 8006586:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
 800658a:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
 800658c:	606d      	str	r5, [r5, #4]
 800658e:	e7f7      	b.n	8006580 <os_mqueue_get+0x12>
        m = NULL;
 8006590:	2000      	movs	r0, #0
    return (m);
 8006592:	e7fa      	b.n	800658a <os_mqueue_get+0x1c>

08006594 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
 8006596:	7953      	ldrb	r3, [r2, #5]
 8006598:	2b07      	cmp	r3, #7
 800659a:	d916      	bls.n	80065ca <os_mqueue_put+0x36>
 800659c:	4614      	mov	r4, r2
 800659e:	460e      	mov	r6, r1
 80065a0:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
 80065a2:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
 80065a6:	f7ff fb53 	bl	8005c50 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
 80065aa:	2300      	movs	r3, #0
 80065ac:	f844 3f14 	str.w	r3, [r4, #20]!
 80065b0:	686b      	ldr	r3, [r5, #4]
 80065b2:	601f      	str	r7, [r3, #0]
 80065b4:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
 80065b6:	f7ff fb51 	bl	8005c5c <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
 80065ba:	b146      	cbz	r6, 80065ce <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
 80065bc:	f105 0108 	add.w	r1, r5, #8
 80065c0:	4630      	mov	r0, r6
 80065c2:	f7ff ff33 	bl	800642c <os_eventq_put>
    }

    return (0);
 80065c6:	2000      	movs	r0, #0
 80065c8:	e000      	b.n	80065cc <os_mqueue_put+0x38>
err:
    return (rc);
 80065ca:	2002      	movs	r0, #2
}
 80065cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
 80065ce:	2000      	movs	r0, #0
 80065d0:	e7fc      	b.n	80065cc <os_mqueue_put+0x38>

080065d2 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
 80065d2:	3a10      	subs	r2, #16
 80065d4:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
 80065d6:	6041      	str	r1, [r0, #4]

    return (0);
}
 80065d8:	2000      	movs	r0, #0
 80065da:	4770      	bx	lr

080065dc <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
 80065dc:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
 80065de:	8803      	ldrh	r3, [r0, #0]
 80065e0:	428b      	cmp	r3, r1
 80065e2:	d312      	bcc.n	800660a <os_mbuf_get+0x2e>
 80065e4:	460d      	mov	r5, r1
 80065e6:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
 80065e8:	6840      	ldr	r0, [r0, #4]
 80065ea:	f000 fa1b 	bl	8006a24 <os_memblock_get>
    if (!om) {
 80065ee:	4603      	mov	r3, r0
 80065f0:	b148      	cbz	r0, 8006606 <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
 80065f2:	2200      	movs	r2, #0
 80065f4:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
 80065f6:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
 80065f8:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
 80065fa:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
 80065fc:	f100 0110 	add.w	r1, r0, #16
 8006600:	4429      	add	r1, r5
 8006602:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
 8006604:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
 8006606:	4618      	mov	r0, r3
 8006608:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
 800660a:	2300      	movs	r3, #0
    return om;
 800660c:	e7fb      	b.n	8006606 <os_mbuf_get+0x2a>

0800660e <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
 800660e:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
 8006610:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
 8006614:	8803      	ldrh	r3, [r0, #0]
 8006616:	42ab      	cmp	r3, r5
 8006618:	d310      	bcc.n	800663c <os_mbuf_get_pkthdr+0x2e>
 800661a:	2dff      	cmp	r5, #255	; 0xff
 800661c:	d810      	bhi.n	8006640 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
 800661e:	2100      	movs	r1, #0
 8006620:	f7ff ffdc 	bl	80065dc <os_mbuf_get>
    if (om) {
 8006624:	4603      	mov	r3, r0
 8006626:	b138      	cbz	r0, 8006638 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
 8006628:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
 800662a:	6802      	ldr	r2, [r0, #0]
 800662c:	4415      	add	r5, r2
 800662e:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
 8006630:	2200      	movs	r2, #0
 8006632:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
 8006634:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
 8006636:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
 8006638:	4618      	mov	r0, r3
 800663a:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	e7fb      	b.n	8006638 <os_mbuf_get_pkthdr+0x2a>
 8006640:	2300      	movs	r3, #0
    return om;
 8006642:	e7f9      	b.n	8006638 <os_mbuf_get_pkthdr+0x2a>

08006644 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
 8006644:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
 8006646:	6883      	ldr	r3, [r0, #8]
 8006648:	b123      	cbz	r3, 8006654 <os_mbuf_free+0x10>
 800664a:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
 800664c:	6858      	ldr	r0, [r3, #4]
 800664e:	f000 fa11 	bl	8006a74 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
 8006652:	bd08      	pop	{r3, pc}
    rc = 0;
 8006654:	2000      	movs	r0, #0
    return (rc);
 8006656:	e7fc      	b.n	8006652 <os_mbuf_free+0xe>

08006658 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
 8006658:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
 800665a:	b160      	cbz	r0, 8006676 <os_mbuf_free_chain+0x1e>
{
 800665c:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
 800665e:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff ffef 	bl	8006644 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
 8006666:	4623      	mov	r3, r4
        if (rc != 0) {
 8006668:	4602      	mov	r2, r0
 800666a:	b910      	cbnz	r0, 8006672 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
 800666c:	2c00      	cmp	r4, #0
 800666e:	d1f6      	bne.n	800665e <os_mbuf_free_chain+0x6>
    }

    rc = 0;
 8006670:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
 8006672:	4610      	mov	r0, r2
 8006674:	bd10      	pop	{r4, pc}
    rc = 0;
 8006676:	2200      	movs	r2, #0
}
 8006678:	4610      	mov	r0, r2
 800667a:	4770      	bx	lr

0800667c <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
 800667c:	2300      	movs	r3, #0
    while (om != NULL) {
 800667e:	e003      	b.n	8006688 <os_mbuf_len+0xc>
        len += om->om_len;
 8006680:	88c2      	ldrh	r2, [r0, #6]
 8006682:	4413      	add	r3, r2
 8006684:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
 8006686:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
 8006688:	2800      	cmp	r0, #0
 800668a:	d1f9      	bne.n	8006680 <os_mbuf_len+0x4>
    }

    return len;
}
 800668c:	4618      	mov	r0, r3
 800668e:	4770      	bx	lr

08006690 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
 8006690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
 8006694:	2800      	cmp	r0, #0
 8006696:	d04e      	beq.n	8006736 <os_mbuf_append+0xa6>
 8006698:	460f      	mov	r7, r1
 800669a:	4691      	mov	r9, r2
 800669c:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
 800669e:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
 80066a2:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
 80066a4:	e000      	b.n	80066a8 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
 80066a6:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
 80066a8:	68eb      	ldr	r3, [r5, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1fb      	bne.n	80066a6 <os_mbuf_append+0x16>
    }

    remainder = len;
 80066ae:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
 80066b0:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 80066b2:	f105 0410 	add.w	r4, r5, #16
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	441c      	add	r4, r3
      (om->om_data + om->om_len);
 80066ba:	6828      	ldr	r0, [r5, #0]
 80066bc:	88eb      	ldrh	r3, [r5, #6]
 80066be:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 80066c0:	1a24      	subs	r4, r4, r0
 80066c2:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
 80066c4:	b164      	cbz	r4, 80066e0 <os_mbuf_append+0x50>
        if (space > remainder) {
 80066c6:	454c      	cmp	r4, r9
 80066c8:	dd00      	ble.n	80066cc <os_mbuf_append+0x3c>
            space = remainder;
 80066ca:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
 80066cc:	4622      	mov	r2, r4
 80066ce:	4639      	mov	r1, r7
 80066d0:	f001 f820 	bl	8007714 <memcpy>

        last->om_len += space;
 80066d4:	88eb      	ldrh	r3, [r5, #6]
 80066d6:	4423      	add	r3, r4
 80066d8:	80eb      	strh	r3, [r5, #6]
        data += space;
 80066da:	4427      	add	r7, r4
        remainder -= space;
 80066dc:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
 80066e0:	2e00      	cmp	r6, #0
 80066e2:	dd16      	ble.n	8006712 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
 80066e4:	2100      	movs	r1, #0
 80066e6:	4640      	mov	r0, r8
 80066e8:	f7ff ff78 	bl	80065dc <os_mbuf_get>
        if (!new) {
 80066ec:	4604      	mov	r4, r0
 80066ee:	b180      	cbz	r0, 8006712 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
 80066f0:	f8b8 2000 	ldrh.w	r2, [r8]
 80066f4:	42b2      	cmp	r2, r6
 80066f6:	bfa8      	it	ge
 80066f8:	4632      	movge	r2, r6
 80066fa:	b292      	uxth	r2, r2
 80066fc:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
 80066fe:	4639      	mov	r1, r7
 8006700:	6800      	ldr	r0, [r0, #0]
 8006702:	f001 f807 	bl	8007714 <memcpy>
        data += new->om_len;
 8006706:	88e3      	ldrh	r3, [r4, #6]
 8006708:	441f      	add	r7, r3
        remainder -= new->om_len;
 800670a:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
 800670c:	60ec      	str	r4, [r5, #12]
        last = new;
 800670e:	4625      	mov	r5, r4
 8006710:	e7e6      	b.n	80066e0 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
 8006712:	f89a 3005 	ldrb.w	r3, [sl, #5]
 8006716:	2b07      	cmp	r3, #7
 8006718:	d908      	bls.n	800672c <os_mbuf_append+0x9c>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
 800671a:	eba9 0906 	sub.w	r9, r9, r6
 800671e:	fa1f f989 	uxth.w	r9, r9
 8006722:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 8006726:	4499      	add	r9, r3
 8006728:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
 800672c:	b106      	cbz	r6, 8006730 <os_mbuf_append+0xa0>
        rc = OS_ENOMEM;
 800672e:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
 8006730:	4630      	mov	r0, r6
 8006732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
 8006736:	2602      	movs	r6, #2
 8006738:	e7fa      	b.n	8006730 <os_mbuf_append+0xa0>

0800673a <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
 800673a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673e:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
 8006740:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
 8006744:	2700      	movs	r7, #0
    head = NULL;
 8006746:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
 8006748:	e017      	b.n	800677a <os_mbuf_dup+0x40>
    startoff = 0;
 800674a:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 800674c:	4623      	mov	r3, r4
 800674e:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
 8006752:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8006754:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
 8006756:	b299      	uxth	r1, r3
 8006758:	4640      	mov	r0, r8
 800675a:	f7ff ff3f 	bl	80065dc <os_mbuf_get>
 800675e:	4605      	mov	r5, r0
 8006760:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
 8006762:	b188      	cbz	r0, 8006788 <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
 8006764:	7923      	ldrb	r3, [r4, #4]
 8006766:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
 8006768:	88e3      	ldrh	r3, [r4, #6]
 800676a:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
 800676c:	88e2      	ldrh	r2, [r4, #6]
 800676e:	6821      	ldr	r1, [r4, #0]
 8006770:	6828      	ldr	r0, [r5, #0]
 8006772:	f000 ffcf 	bl	8007714 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
 8006776:	68e4      	ldr	r4, [r4, #12]
 8006778:	462f      	mov	r7, r5
 800677a:	b14c      	cbz	r4, 8006790 <os_mbuf_dup+0x56>
        if (head) {
 800677c:	b15e      	cbz	r6, 8006796 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
 800677e:	7963      	ldrb	r3, [r4, #5]
 8006780:	2b07      	cmp	r3, #7
 8006782:	d9e2      	bls.n	800674a <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
 8006784:	b299      	uxth	r1, r3
 8006786:	e7e1      	b.n	800674c <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
 8006788:	4630      	mov	r0, r6
 800678a:	f7ff ff65 	bl	8006658 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
 800678e:	462e      	mov	r6, r5
}
 8006790:	4630      	mov	r0, r6
 8006792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
 8006796:	7963      	ldrb	r3, [r4, #5]
 8006798:	2b07      	cmp	r3, #7
 800679a:	d911      	bls.n	80067c0 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
 800679c:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 800679e:	4623      	mov	r3, r4
 80067a0:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
 80067a4:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 80067a6:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
 80067a8:	b299      	uxth	r1, r3
 80067aa:	4640      	mov	r0, r8
 80067ac:	f7ff ff16 	bl	80065dc <os_mbuf_get>
            if (!head) {
 80067b0:	4606      	mov	r6, r0
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d0ec      	beq.n	8006790 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
 80067b6:	7963      	ldrb	r3, [r4, #5]
 80067b8:	2b07      	cmp	r3, #7
 80067ba:	d803      	bhi.n	80067c4 <os_mbuf_dup+0x8a>
            copy = head;
 80067bc:	4605      	mov	r5, r0
 80067be:	e7d1      	b.n	8006764 <os_mbuf_dup+0x2a>
    startoff = 0;
 80067c0:	2100      	movs	r1, #0
 80067c2:	e7ec      	b.n	800679e <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
 80067c4:	88c3      	ldrh	r3, [r0, #6]
 80067c6:	b973      	cbnz	r3, 80067e6 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
 80067c8:	f100 0510 	add.w	r5, r0, #16
 80067cc:	7962      	ldrb	r2, [r4, #5]
 80067ce:	f104 0110 	add.w	r1, r4, #16
 80067d2:	4628      	mov	r0, r5
 80067d4:	f000 ff9e 	bl	8007714 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
 80067d8:	7963      	ldrb	r3, [r4, #5]
 80067da:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
 80067dc:	7963      	ldrb	r3, [r4, #5]
 80067de:	441d      	add	r5, r3
 80067e0:	6035      	str	r5, [r6, #0]
            copy = head;
 80067e2:	4635      	mov	r5, r6
 80067e4:	e7be      	b.n	8006764 <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
 80067e6:	2300      	movs	r3, #0
 80067e8:	461a      	mov	r2, r3
 80067ea:	4619      	mov	r1, r3
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff fb01 	bl	8005df4 <__assert_func>

080067f2 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d04e      	beq.n	8006894 <os_mbuf_adj+0xa2>
{
 80067f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f8:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
 80067fa:	2900      	cmp	r1, #0
 80067fc:	db1c      	blt.n	8006838 <os_mbuf_adj+0x46>
    if ((m = mp) == NULL)
 80067fe:	4602      	mov	r2, r0
    int len = req_len;
 8006800:	460b      	mov	r3, r1
 8006802:	e005      	b.n	8006810 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
 8006804:	1ac0      	subs	r0, r0, r3
 8006806:	80d0      	strh	r0, [r2, #6]
                m->om_data += len;
 8006808:	6810      	ldr	r0, [r2, #0]
 800680a:	4403      	add	r3, r0
 800680c:	6013      	str	r3, [r2, #0]
                len = 0;
 800680e:	2300      	movs	r3, #0
        while (m != NULL && len > 0) {
 8006810:	b14a      	cbz	r2, 8006826 <os_mbuf_adj+0x34>
 8006812:	2b00      	cmp	r3, #0
 8006814:	dd07      	ble.n	8006826 <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
 8006816:	88d0      	ldrh	r0, [r2, #6]
 8006818:	4298      	cmp	r0, r3
 800681a:	dcf3      	bgt.n	8006804 <os_mbuf_adj+0x12>
                len -= m->om_len;
 800681c:	1a1b      	subs	r3, r3, r0
                m->om_len = 0;
 800681e:	2000      	movs	r0, #0
 8006820:	80d0      	strh	r0, [r2, #6]
                m = SLIST_NEXT(m, om_next);
 8006822:	68d2      	ldr	r2, [r2, #12]
 8006824:	e7f4      	b.n	8006810 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
 8006826:	7962      	ldrb	r2, [r4, #5]
 8006828:	2a07      	cmp	r2, #7
 800682a:	d904      	bls.n	8006836 <os_mbuf_adj+0x44>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
 800682c:	1a5b      	subs	r3, r3, r1
 800682e:	b29b      	uxth	r3, r3
 8006830:	8a22      	ldrh	r2, [r4, #16]
 8006832:	4413      	add	r3, r2
 8006834:	8223      	strh	r3, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
 8006836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len = -len;
 8006838:	424f      	negs	r7, r1
        count = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	e000      	b.n	8006840 <os_mbuf_adj+0x4e>
            m = SLIST_NEXT(m, om_next);
 800683e:	4628      	mov	r0, r5
            count += m->om_len;
 8006840:	88c2      	ldrh	r2, [r0, #6]
 8006842:	4413      	add	r3, r2
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
 8006844:	68c5      	ldr	r5, [r0, #12]
 8006846:	2d00      	cmp	r5, #0
 8006848:	d1f9      	bne.n	800683e <os_mbuf_adj+0x4c>
        if (m->om_len >= len) {
 800684a:	42ba      	cmp	r2, r7
 800684c:	db09      	blt.n	8006862 <os_mbuf_adj+0x70>
            m->om_len -= len;
 800684e:	b2bf      	uxth	r7, r7
 8006850:	1bd2      	subs	r2, r2, r7
 8006852:	80c2      	strh	r2, [r0, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
 8006854:	7963      	ldrb	r3, [r4, #5]
 8006856:	2b07      	cmp	r3, #7
 8006858:	d9ed      	bls.n	8006836 <os_mbuf_adj+0x44>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
 800685a:	8a23      	ldrh	r3, [r4, #16]
 800685c:	1bdf      	subs	r7, r3, r7
 800685e:	8227      	strh	r7, [r4, #16]
 8006860:	e7e9      	b.n	8006836 <os_mbuf_adj+0x44>
        if (count < 0)
 8006862:	18cb      	adds	r3, r1, r3
 8006864:	d40b      	bmi.n	800687e <os_mbuf_adj+0x8c>
        if (OS_MBUF_IS_PKTHDR(m))
 8006866:	7962      	ldrb	r2, [r4, #5]
 8006868:	2a07      	cmp	r2, #7
 800686a:	d900      	bls.n	800686e <os_mbuf_adj+0x7c>
            OS_MBUF_PKTHDR(m)->omp_len = count;
 800686c:	8223      	strh	r3, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
 800686e:	2c00      	cmp	r4, #0
 8006870:	d0e1      	beq.n	8006836 <os_mbuf_adj+0x44>
            if (m->om_len >= count) {
 8006872:	88e2      	ldrh	r2, [r4, #6]
 8006874:	429a      	cmp	r2, r3
 8006876:	da04      	bge.n	8006882 <os_mbuf_adj+0x90>
            count -= m->om_len;
 8006878:	1a9b      	subs	r3, r3, r2
        for (; m; m = SLIST_NEXT(m, om_next)) {
 800687a:	68e4      	ldr	r4, [r4, #12]
 800687c:	e7f7      	b.n	800686e <os_mbuf_adj+0x7c>
            count = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	e7f1      	b.n	8006866 <os_mbuf_adj+0x74>
                m->om_len = count;
 8006882:	80e3      	strh	r3, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
 8006884:	68e0      	ldr	r0, [r4, #12]
 8006886:	2800      	cmp	r0, #0
 8006888:	d0d5      	beq.n	8006836 <os_mbuf_adj+0x44>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
 800688a:	f7ff fee5 	bl	8006658 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	60e3      	str	r3, [r4, #12]
 8006892:	e7d0      	b.n	8006836 <os_mbuf_adj+0x44>
 8006894:	4770      	bx	lr

08006896 <os_mbuf_prepend>:
    }
}

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
 8006896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006898:	4604      	mov	r4, r0
 800689a:	460e      	mov	r6, r1
 800689c:	e019      	b.n	80068d2 <os_mbuf_prepend+0x3c>
 800689e:	2000      	movs	r0, #0
 80068a0:	e01b      	b.n	80068da <os_mbuf_prepend+0x44>
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
 80068a2:	2100      	movs	r1, #0
 80068a4:	68a0      	ldr	r0, [r4, #8]
 80068a6:	f7ff fe99 	bl	80065dc <os_mbuf_get>
 80068aa:	4605      	mov	r5, r0
        }
        if (p == NULL) {
 80068ac:	2d00      	cmp	r5, #0
 80068ae:	d033      	beq.n	8006918 <os_mbuf_prepend+0x82>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
 80068b0:	7963      	ldrb	r3, [r4, #5]
 80068b2:	2b07      	cmp	r3, #7
 80068b4:	d836      	bhi.n	8006924 <os_mbuf_prepend+0x8e>
    omp = om->om_omp;
 80068b6:	68aa      	ldr	r2, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 80068b8:	f105 0310 	add.w	r3, r5, #16
 80068bc:	8812      	ldrh	r2, [r2, #0]
 80068be:	4413      	add	r3, r2
      (om->om_data + om->om_len);
 80068c0:	682a      	ldr	r2, [r5, #0]
 80068c2:	88e9      	ldrh	r1, [r5, #6]
 80068c4:	4411      	add	r1, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 80068c6:	1a5b      	subs	r3, r3, r1
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	4413      	add	r3, r2
 80068cc:	602b      	str	r3, [r5, #0]

        SLIST_NEXT(p, om_next) = om;
 80068ce:	60ec      	str	r4, [r5, #12]
        om = p;
 80068d0:	462c      	mov	r4, r5
    if (OS_MBUF_IS_PKTHDR(om)) {
 80068d2:	7961      	ldrb	r1, [r4, #5]
 80068d4:	2907      	cmp	r1, #7
 80068d6:	d9e2      	bls.n	800689e <os_mbuf_prepend+0x8>
        startoff = om->om_pkthdr_len;
 80068d8:	b288      	uxth	r0, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 80068da:	4623      	mov	r3, r4
 80068dc:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
 80068e0:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	b29b      	uxth	r3, r3
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
 80068e6:	429e      	cmp	r6, r3
 80068e8:	da00      	bge.n	80068ec <os_mbuf_prepend+0x56>
 80068ea:	4633      	mov	r3, r6
        om->om_data -= leading;
 80068ec:	1ad2      	subs	r2, r2, r3
 80068ee:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
 80068f0:	b298      	uxth	r0, r3
 80068f2:	88e2      	ldrh	r2, [r4, #6]
 80068f4:	4402      	add	r2, r0
 80068f6:	80e2      	strh	r2, [r4, #6]
        if (OS_MBUF_IS_PKTHDR(om)) {
 80068f8:	2907      	cmp	r1, #7
 80068fa:	d902      	bls.n	8006902 <os_mbuf_prepend+0x6c>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
 80068fc:	8a22      	ldrh	r2, [r4, #16]
 80068fe:	4410      	add	r0, r2
 8006900:	8220      	strh	r0, [r4, #16]
        if (len == 0) {
 8006902:	1af6      	subs	r6, r6, r3
 8006904:	d00c      	beq.n	8006920 <os_mbuf_prepend+0x8a>
        if (OS_MBUF_IS_PKTHDR(om)) {
 8006906:	2907      	cmp	r1, #7
 8006908:	d9cb      	bls.n	80068a2 <os_mbuf_prepend+0xc>
            p = os_mbuf_get_pkthdr(om->om_omp,
 800690a:	3908      	subs	r1, #8
 800690c:	b2c9      	uxtb	r1, r1
 800690e:	68a0      	ldr	r0, [r4, #8]
 8006910:	f7ff fe7d 	bl	800660e <os_mbuf_get_pkthdr>
 8006914:	4605      	mov	r5, r0
 8006916:	e7c9      	b.n	80068ac <os_mbuf_prepend+0x16>
            os_mbuf_free_chain(om);
 8006918:	4620      	mov	r0, r4
 800691a:	f7ff fe9d 	bl	8006658 <os_mbuf_free_chain>
            om = NULL;
 800691e:	462c      	mov	r4, r5
    }

    return om;
}
 8006920:	4620      	mov	r0, r4
 8006922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(new_buf->om_len == 0);
 8006924:	88eb      	ldrh	r3, [r5, #6]
 8006926:	b97b      	cbnz	r3, 8006948 <os_mbuf_prepend+0xb2>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
 8006928:	f105 0710 	add.w	r7, r5, #16
 800692c:	7962      	ldrb	r2, [r4, #5]
 800692e:	f104 0110 	add.w	r1, r4, #16
 8006932:	4638      	mov	r0, r7
 8006934:	f000 feee 	bl	8007714 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
 8006938:	7963      	ldrb	r3, [r4, #5]
 800693a:	716b      	strb	r3, [r5, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
 800693c:	7963      	ldrb	r3, [r4, #5]
 800693e:	441f      	add	r7, r3
 8006940:	602f      	str	r7, [r5, #0]
            om->om_pkthdr_len = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	7163      	strb	r3, [r4, #5]
 8006946:	e7b6      	b.n	80068b6 <os_mbuf_prepend+0x20>
    assert(new_buf->om_len == 0);
 8006948:	2300      	movs	r3, #0
 800694a:	461a      	mov	r2, r3
 800694c:	4619      	mov	r1, r3
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fa50 	bl	8005df4 <__assert_func>

08006954 <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
 8006954:	4602      	mov	r2, r0
 8006956:	e000      	b.n	800695a <os_mbuf_concat+0x6>
        next = SLIST_NEXT(cur, om_next);
        if (next == NULL) {
            break;
        }

        cur = next;
 8006958:	461a      	mov	r2, r3
        next = SLIST_NEXT(cur, om_next);
 800695a:	68d3      	ldr	r3, [r2, #12]
        if (next == NULL) {
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1fb      	bne.n	8006958 <os_mbuf_concat+0x4>
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
 8006960:	60d1      	str	r1, [r2, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
 8006962:	7943      	ldrb	r3, [r0, #5]
 8006964:	2b07      	cmp	r3, #7
 8006966:	d914      	bls.n	8006992 <os_mbuf_concat+0x3e>
        if (OS_MBUF_IS_PKTHDR(second)) {
 8006968:	794b      	ldrb	r3, [r1, #5]
 800696a:	2b07      	cmp	r3, #7
 800696c:	d80d      	bhi.n	800698a <os_mbuf_concat+0x36>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
        } else {
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
 800696e:	460b      	mov	r3, r1
 8006970:	b179      	cbz	r1, 8006992 <os_mbuf_concat+0x3e>
{
 8006972:	b410      	push	{r4}
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
 8006974:	88da      	ldrh	r2, [r3, #6]
 8006976:	8a04      	ldrh	r4, [r0, #16]
 8006978:	4422      	add	r2, r4
 800697a:	8202      	strh	r2, [r0, #16]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1f8      	bne.n	8006974 <os_mbuf_concat+0x20>
            }
        }
    }

    second->om_pkthdr_len = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	714b      	strb	r3, [r1, #5]
}
 8006986:	bc10      	pop	{r4}
 8006988:	4770      	bx	lr
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
 800698a:	8a0b      	ldrh	r3, [r1, #16]
 800698c:	8a02      	ldrh	r2, [r0, #16]
 800698e:	4413      	add	r3, r2
 8006990:	8203      	strh	r3, [r0, #16]
    second->om_pkthdr_len = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	714b      	strb	r3, [r1, #5]
 8006996:	4770      	bx	lr

08006998 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
 8006998:	2800      	cmp	r0, #0
 800699a:	d031      	beq.n	8006a00 <os_mempool_init_internal+0x68>
{
 800699c:	b430      	push	{r4, r5}
 800699e:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
 80069a0:	2a00      	cmp	r2, #0
 80069a2:	d02f      	beq.n	8006a04 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
 80069a4:	b1bb      	cbz	r3, 80069d6 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
 80069a6:	b113      	cbz	r3, 80069ae <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
 80069a8:	f013 0f03 	tst.w	r3, #3
 80069ac:	d12c      	bne.n	8006a08 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
 80069ae:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
 80069b0:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
 80069b2:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
 80069b4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80069b8:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
 80069ba:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
 80069bc:	60e3      	str	r3, [r4, #12]
    mp->name = name;
 80069be:	9802      	ldr	r0, [sp, #8]
 80069c0:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
 80069c2:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
 80069c4:	b199      	cbz	r1, 80069ee <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
 80069c6:	f012 0f03 	tst.w	r2, #3
 80069ca:	d002      	beq.n	80069d2 <os_mempool_init_internal+0x3a>
 80069cc:	f022 0203 	bic.w	r2, r2, #3
 80069d0:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
 80069d2:	2001      	movs	r0, #1
 80069d4:	e007      	b.n	80069e6 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
 80069d6:	2900      	cmp	r1, #0
 80069d8:	d0e5      	beq.n	80069a6 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
 80069da:	2003      	movs	r0, #3
 80069dc:	e00e      	b.n	80069fc <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
 80069de:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
 80069e0:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
 80069e2:	3001      	adds	r0, #1
            block_addr += true_block_size;
 80069e4:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
 80069e6:	4281      	cmp	r1, r0
 80069e8:	dcf9      	bgt.n	80069de <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
 80069ee:	2000      	movs	r0, #0
 80069f0:	6120      	str	r0, [r4, #16]
 80069f2:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <os_mempool_init_internal+0x74>)
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	6014      	str	r4, [r2, #0]
 80069f8:	3410      	adds	r4, #16
 80069fa:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
 80069fc:	bc30      	pop	{r4, r5}
 80069fe:	4770      	bx	lr
        return OS_INVALID_PARM;
 8006a00:	2003      	movs	r0, #3
}
 8006a02:	4770      	bx	lr
        return OS_INVALID_PARM;
 8006a04:	2003      	movs	r0, #3
 8006a06:	e7f9      	b.n	80069fc <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
 8006a08:	2004      	movs	r0, #4
 8006a0a:	e7f7      	b.n	80069fc <os_mempool_init_internal+0x64>
 8006a0c:	20002f00 	.word	0x20002f00

08006a10 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
 8006a10:	b510      	push	{r4, lr}
 8006a12:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
 8006a14:	2400      	movs	r4, #0
 8006a16:	9401      	str	r4, [sp, #4]
 8006a18:	9c04      	ldr	r4, [sp, #16]
 8006a1a:	9400      	str	r4, [sp, #0]
 8006a1c:	f7ff ffbc 	bl	8006998 <os_mempool_init_internal>
}
 8006a20:	b002      	add	sp, #8
 8006a22:	bd10      	pop	{r4, pc}

08006a24 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
 8006a24:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
 8006a26:	b1a0      	cbz	r0, 8006a52 <os_memblock_get+0x2e>
 8006a28:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
 8006a2a:	f7ff f911 	bl	8005c50 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
 8006a2e:	88e3      	ldrh	r3, [r4, #6]
 8006a30:	b153      	cbz	r3, 8006a48 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
 8006a32:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
 8006a34:	682a      	ldr	r2, [r5, #0]
 8006a36:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
 8006a3e:	8922      	ldrh	r2, [r4, #8]
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d202      	bcs.n	8006a4a <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
 8006a44:	8123      	strh	r3, [r4, #8]
 8006a46:	e000      	b.n	8006a4a <os_memblock_get+0x26>
    block = NULL;
 8006a48:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
 8006a4a:	f7ff f907 	bl	8005c5c <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
 8006a4e:	4628      	mov	r0, r5
 8006a50:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
 8006a52:	2500      	movs	r5, #0
    return (void *)block;
 8006a54:	e7fb      	b.n	8006a4e <os_memblock_get+0x2a>

08006a56 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
 8006a56:	b538      	push	{r3, r4, r5, lr}
 8006a58:	4604      	mov	r4, r0
 8006a5a:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
 8006a5c:	f7ff f8f8 	bl	8005c50 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
 8006a60:	6963      	ldr	r3, [r4, #20]
 8006a62:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
 8006a64:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
 8006a66:	88e3      	ldrh	r3, [r4, #6]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
 8006a6c:	f7ff f8f6 	bl	8005c5c <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
 8006a70:	2000      	movs	r0, #0
 8006a72:	bd38      	pop	{r3, r4, r5, pc}

08006a74 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
 8006a74:	b168      	cbz	r0, 8006a92 <os_memblock_put+0x1e>
{
 8006a76:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
 8006a78:	b169      	cbz	r1, 8006a96 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
 8006a7a:	7a83      	ldrb	r3, [r0, #10]
 8006a7c:	f013 0f01 	tst.w	r3, #1
 8006a80:	d004      	beq.n	8006a8c <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
 8006a82:	69c3      	ldr	r3, [r0, #28]
 8006a84:	b113      	cbz	r3, 8006a8c <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
 8006a86:	6a02      	ldr	r2, [r0, #32]
 8006a88:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
 8006a8a:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
 8006a8c:	f7ff ffe3 	bl	8006a56 <os_memblock_put_from_cb>
 8006a90:	e7fb      	b.n	8006a8a <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
 8006a92:	2003      	movs	r0, #3
}
 8006a94:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 8006a96:	2003      	movs	r0, #3
 8006a98:	e7f7      	b.n	8006a8a <os_memblock_put+0x16>
	...

08006a9c <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
 8006a9c:	4b02      	ldr	r3, [pc, #8]	; (8006aa8 <os_mempool_module_init+0xc>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	605b      	str	r3, [r3, #4]
}
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	20002f00 	.word	0x20002f00

08006aac <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <os_msys_find_pool+0x28>)
 8006aae:	6819      	ldr	r1, [r3, #0]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	b123      	cbz	r3, 8006abe <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
 8006ab4:	881a      	ldrh	r2, [r3, #0]
 8006ab6:	4282      	cmp	r2, r0
 8006ab8:	d201      	bcs.n	8006abe <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	e7f9      	b.n	8006ab2 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
 8006abe:	b10b      	cbz	r3, 8006ac4 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
 8006ac4:	b119      	cbz	r1, 8006ace <os_msys_find_pool+0x22>
 8006ac6:	4b03      	ldr	r3, [pc, #12]	; (8006ad4 <os_msys_find_pool+0x28>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	3b08      	subs	r3, #8
 8006acc:	e7f8      	b.n	8006ac0 <os_msys_find_pool+0x14>
 8006ace:	460b      	mov	r3, r1
    return (pool);
 8006ad0:	e7f6      	b.n	8006ac0 <os_msys_find_pool+0x14>
 8006ad2:	bf00      	nop
 8006ad4:	2000014c 	.word	0x2000014c

08006ad8 <os_msys_register>:
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 8006ad8:	4b0e      	ldr	r3, [pc, #56]	; (8006b14 <os_msys_register+0x3c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	b12b      	cbz	r3, 8006aea <os_msys_register+0x12>
        if (new_pool->omp_databuf_len > pool->omp_databuf_len) {
 8006ade:	8801      	ldrh	r1, [r0, #0]
 8006ae0:	881a      	ldrh	r2, [r3, #0]
 8006ae2:	4291      	cmp	r1, r2
 8006ae4:	d801      	bhi.n	8006aea <os_msys_register+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	e7f8      	b.n	8006adc <os_msys_register+0x4>
    if (pool) {
 8006aea:	b153      	cbz	r3, 8006b02 <os_msys_register+0x2a>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, pool, new_pool, omp_next);
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	6082      	str	r2, [r0, #8]
 8006af0:	b112      	cbz	r2, 8006af8 <os_msys_register+0x20>
 8006af2:	6098      	str	r0, [r3, #8]
}
 8006af4:	2000      	movs	r0, #0
 8006af6:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, pool, new_pool, omp_next);
 8006af8:	f100 0208 	add.w	r2, r0, #8
 8006afc:	4905      	ldr	r1, [pc, #20]	; (8006b14 <os_msys_register+0x3c>)
 8006afe:	604a      	str	r2, [r1, #4]
 8006b00:	e7f7      	b.n	8006af2 <os_msys_register+0x1a>
        STAILQ_INSERT_TAIL(&g_msys_pool_list, new_pool, omp_next);
 8006b02:	2300      	movs	r3, #0
 8006b04:	6083      	str	r3, [r0, #8]
 8006b06:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <os_msys_register+0x3c>)
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	6010      	str	r0, [r2, #0]
 8006b0c:	3008      	adds	r0, #8
 8006b0e:	6058      	str	r0, [r3, #4]
 8006b10:	e7f0      	b.n	8006af4 <os_msys_register+0x1c>
 8006b12:	bf00      	nop
 8006b14:	2000014c 	.word	0x2000014c

08006b18 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
 8006b18:	b530      	push	{r4, r5, lr}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
 8006b1e:	9d07      	ldr	r5, [sp, #28]
 8006b20:	9501      	str	r5, [sp, #4]
 8006b22:	9d06      	ldr	r5, [sp, #24]
 8006b24:	9500      	str	r5, [sp, #0]
 8006b26:	f001 fdda 	bl	80086de <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
 8006b2a:	b138      	cbz	r0, 8006b3c <os_msys_init_once+0x24>
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	9000      	str	r0, [sp, #0]
 8006b30:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <os_msys_init_once+0x40>)
 8006b32:	681d      	ldr	r5, [r3, #0]
 8006b34:	4603      	mov	r3, r0
 8006b36:	4602      	mov	r2, r0
 8006b38:	4601      	mov	r1, r0
 8006b3a:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f7ff ffcb 	bl	8006ad8 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
 8006b42:	b138      	cbz	r0, 8006b54 <os_msys_init_once+0x3c>
 8006b44:	2000      	movs	r0, #0
 8006b46:	9000      	str	r0, [sp, #0]
 8006b48:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <os_msys_init_once+0x40>)
 8006b4a:	681c      	ldr	r4, [r3, #0]
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	4602      	mov	r2, r0
 8006b50:	4601      	mov	r1, r0
 8006b52:	47a0      	blx	r4
}
 8006b54:	b003      	add	sp, #12
 8006b56:	bd30      	pop	{r4, r5, pc}
 8006b58:	20000148 	.word	0x20000148

08006b5c <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
 8006b5c:	4b02      	ldr	r3, [pc, #8]	; (8006b68 <os_msys_reset+0xc>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	605b      	str	r3, [r3, #4]
}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	2000014c 	.word	0x2000014c

08006b6c <os_msys_get_pkthdr>:
{
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	460c      	mov	r4, r1
    total_pkthdr_len =  user_hdr_len + sizeof(struct os_mbuf_pkthdr);
 8006b70:	f101 0308 	add.w	r3, r1, #8
 8006b74:	b29b      	uxth	r3, r3
    pool = os_msys_find_pool(dsize + total_pkthdr_len);
 8006b76:	4418      	add	r0, r3
 8006b78:	b280      	uxth	r0, r0
 8006b7a:	f7ff ff97 	bl	8006aac <os_msys_find_pool>
    if (!pool) {
 8006b7e:	b118      	cbz	r0, 8006b88 <os_msys_get_pkthdr+0x1c>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
 8006b80:	b2e1      	uxtb	r1, r4
 8006b82:	f7ff fd44 	bl	800660e <os_mbuf_get_pkthdr>
}
 8006b86:	bd10      	pop	{r4, pc}
    return (NULL);
 8006b88:	2000      	movs	r0, #0
 8006b8a:	e7fc      	b.n	8006b86 <os_msys_get_pkthdr+0x1a>

08006b8c <os_msys_init>:

void
os_msys_init(void)
{
 8006b8c:	b500      	push	{lr}
 8006b8e:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
 8006b90:	f7ff ffe4 	bl	8006b5c <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
 8006b94:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <os_msys_init+0x24>)
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	f44f 7392 	mov.w	r3, #292	; 0x124
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	230c      	movs	r3, #12
 8006ba0:	4a04      	ldr	r2, [pc, #16]	; (8006bb4 <os_msys_init+0x28>)
 8006ba2:	4905      	ldr	r1, [pc, #20]	; (8006bb8 <os_msys_init+0x2c>)
 8006ba4:	4805      	ldr	r0, [pc, #20]	; (8006bbc <os_msys_init+0x30>)
 8006ba6:	f7ff ffb7 	bl	8006b18 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
 8006baa:	b003      	add	sp, #12
 8006bac:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bb0:	0800f620 	.word	0x0800f620
 8006bb4:	20002500 	.word	0x20002500
 8006bb8:	2000250c 	.word	0x2000250c
 8006bbc:	20001750 	.word	0x20001750

08006bc0 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	b128      	cbz	r0, 8006bd0 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
 8006bc8:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
 8006bca:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
 8006bcc:	6018      	str	r0, [r3, #0]
 8006bce:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 8006bd0:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
 8006bd2:	4770      	bx	lr

08006bd4 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
 8006bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
 8006bd6:	4b2c      	ldr	r3, [pc, #176]	; (8006c88 <os_mutex_release+0xb4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d04d      	beq.n	8006c7a <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d04d      	beq.n	8006c7e <os_mutex_release+0xaa>
 8006be2:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
 8006be4:	f000 f97a 	bl	8006edc <os_sched_get_current_task>
 8006be8:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
 8006bea:	88e3      	ldrh	r3, [r4, #6]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d048      	beq.n	8006c82 <os_mutex_release+0xae>
 8006bf0:	68a2      	ldr	r2, [r4, #8]
 8006bf2:	4282      	cmp	r2, r0
 8006bf4:	d001      	beq.n	8006bfa <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
 8006bf6:	2005      	movs	r0, #5
 8006bf8:	e040      	b.n	8006c7c <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d003      	beq.n	8006c06 <os_mutex_release+0x32>
        --mu->mu_level;
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
 8006c02:	2000      	movs	r0, #0
        goto done;
 8006c04:	e03a      	b.n	8006c7c <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
 8006c06:	f7ff f823 	bl	8005c50 <os_arch_save_sr>
 8006c0a:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
 8006c0c:	88e3      	ldrh	r3, [r4, #6]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
 8006c12:	7aea      	ldrb	r2, [r5, #11]
 8006c14:	7963      	ldrb	r3, [r4, #5]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d11e      	bne.n	8006c58 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
 8006c1a:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
 8006c1c:	b146      	cbz	r6, 8006c30 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
 8006c1e:	69f3      	ldr	r3, [r6, #28]
 8006c20:	b1fb      	cbz	r3, 8006c62 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
 8006c22:	4630      	mov	r0, r6
 8006c24:	f000 f9ae 	bl	8006f84 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
 8006c2c:	7af3      	ldrb	r3, [r6, #11]
 8006c2e:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
 8006c30:	60a6      	str	r6, [r4, #8]
    if (rdy) {
 8006c32:	b116      	cbz	r6, 8006c3a <os_mutex_release+0x66>
        rdy->t_lockcnt++;
 8006c34:	7bb3      	ldrb	r3, [r6, #14]
 8006c36:	3301      	adds	r3, #1
 8006c38:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
 8006c3a:	7bab      	ldrb	r3, [r5, #14]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
 8006c40:	f000 fa1a 	bl	8007078 <os_sched_next_task>
 8006c44:	4604      	mov	r4, r0
    if (rdy != current) {
 8006c46:	4285      	cmp	r5, r0
 8006c48:	d010      	beq.n	8006c6c <os_mutex_release+0x98>
        resched = 1;
 8006c4a:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
 8006c4c:	4638      	mov	r0, r7
 8006c4e:	f7ff f805 	bl	8005c5c <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
 8006c52:	b96d      	cbnz	r5, 8006c70 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
 8006c54:	2000      	movs	r0, #0
 8006c56:	e011      	b.n	8006c7c <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
 8006c58:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f000 fa24 	bl	80070a8 <os_sched_resort>
 8006c60:	e7db      	b.n	8006c1a <os_mutex_release+0x46>
        assert(rdy->t_obj);
 8006c62:	461a      	mov	r2, r3
 8006c64:	4619      	mov	r1, r3
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff f8c4 	bl	8005df4 <__assert_func>
    resched = 0;
 8006c6c:	2500      	movs	r5, #0
 8006c6e:	e7ed      	b.n	8006c4c <os_mutex_release+0x78>
        os_sched(rdy);
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fa07 	bl	8007084 <os_sched>
    ret = OS_OK;
 8006c76:	2000      	movs	r0, #0
 8006c78:	e000      	b.n	8006c7c <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
 8006c7a:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
 8006c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
 8006c7e:	2003      	movs	r0, #3
 8006c80:	e7fc      	b.n	8006c7c <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
 8006c82:	2005      	movs	r0, #5
 8006c84:	e7fa      	b.n	8006c7c <os_mutex_release+0xa8>
 8006c86:	bf00      	nop
 8006c88:	20002ef4 	.word	0x20002ef4

08006c8c <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
 8006c8c:	4b36      	ldr	r3, [pc, #216]	; (8006d68 <os_mutex_pend+0xdc>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d065      	beq.n	8006d60 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d065      	beq.n	8006d64 <os_mutex_pend+0xd8>
{
 8006c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c9c:	460f      	mov	r7, r1
 8006c9e:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
 8006ca0:	f7fe ffd6 	bl	8005c50 <os_arch_save_sr>
 8006ca4:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
 8006ca6:	f000 f919 	bl	8006edc <os_sched_get_current_task>
 8006caa:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
 8006cac:	88e3      	ldrh	r3, [r4, #6]
 8006cae:	b19b      	cbz	r3, 8006cd8 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
 8006cb0:	68a2      	ldr	r2, [r4, #8]
 8006cb2:	4282      	cmp	r2, r0
 8006cb4:	d01e      	beq.n	8006cf4 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
 8006cb6:	b327      	cbz	r7, 8006d02 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
 8006cb8:	7ad1      	ldrb	r1, [r2, #11]
 8006cba:	7ac3      	ldrb	r3, [r0, #11]
 8006cbc:	4299      	cmp	r1, r3
 8006cbe:	d825      	bhi.n	8006d0c <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
 8006cc0:	6821      	ldr	r1, [r4, #0]
 8006cc2:	b369      	cbz	r1, 8006d20 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 8006cc4:	460b      	mov	r3, r1
    last = NULL;
 8006cc6:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 8006cc8:	b32b      	cbz	r3, 8006d16 <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
 8006cca:	7ae8      	ldrb	r0, [r5, #11]
 8006ccc:	7ada      	ldrb	r2, [r3, #11]
 8006cce:	4290      	cmp	r0, r2
 8006cd0:	d321      	bcc.n	8006d16 <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
 8006cd2:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 8006cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd6:	e7f7      	b.n	8006cc8 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
 8006cd8:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
 8006cda:	7ac3      	ldrb	r3, [r0, #11]
 8006cdc:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
 8006cde:	7b83      	ldrb	r3, [r0, #14]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
 8006ce8:	4640      	mov	r0, r8
 8006cea:	f7fe ffb7 	bl	8005c5c <os_arch_restore_sr>
        ret = OS_OK;
 8006cee:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
 8006cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
 8006cf8:	4640      	mov	r0, r8
 8006cfa:	f7fe ffaf 	bl	8005c5c <os_arch_restore_sr>
        ret = OS_OK;
 8006cfe:	2000      	movs	r0, #0
        goto done;
 8006d00:	e7f6      	b.n	8006cf0 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
 8006d02:	4640      	mov	r0, r8
 8006d04:	f7fe ffaa 	bl	8005c5c <os_arch_restore_sr>
        ret = OS_TIMEOUT;
 8006d08:	2006      	movs	r0, #6
        goto done;
 8006d0a:	e7f1      	b.n	8006cf0 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
 8006d0c:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
 8006d0e:	68a0      	ldr	r0, [r4, #8]
 8006d10:	f000 f9ca 	bl	80070a8 <os_sched_resort>
 8006d14:	e7d4      	b.n	8006cc0 <os_mutex_pend+0x34>
    if (last) {
 8006d16:	b11e      	cbz	r6, 8006d20 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
 8006d18:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8006d1a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8006d1c:	64f5      	str	r5, [r6, #76]	; 0x4c
 8006d1e:	e001      	b.n	8006d24 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
 8006d20:	64e9      	str	r1, [r5, #76]	; 0x4c
 8006d22:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
 8006d24:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
 8006d26:	7b6b      	ldrb	r3, [r5, #13]
 8006d28:	f043 0304 	orr.w	r3, r3, #4
 8006d2c:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
 8006d2e:	4639      	mov	r1, r7
 8006d30:	4628      	mov	r0, r5
 8006d32:	f000 f8df 	bl	8006ef4 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
 8006d36:	4640      	mov	r0, r8
 8006d38:	f7fe ff90 	bl	8005c5c <os_arch_restore_sr>
    os_sched(NULL);
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	f000 f9a1 	bl	8007084 <os_sched>
    OS_ENTER_CRITICAL(sr);
 8006d42:	f7fe ff85 	bl	8005c50 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
 8006d46:	7b6b      	ldrb	r3, [r5, #13]
 8006d48:	f023 0304 	bic.w	r3, r3, #4
 8006d4c:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
 8006d4e:	f7fe ff85 	bl	8005c5c <os_arch_restore_sr>
    if (mu->mu_owner == current) {
 8006d52:	68a3      	ldr	r3, [r4, #8]
 8006d54:	42ab      	cmp	r3, r5
 8006d56:	d001      	beq.n	8006d5c <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
 8006d58:	2006      	movs	r0, #6
 8006d5a:	e7c9      	b.n	8006cf0 <os_mutex_pend+0x64>
        ret = OS_OK;
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	e7c7      	b.n	8006cf0 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
 8006d60:	2009      	movs	r0, #9
 8006d62:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 8006d64:	2003      	movs	r0, #3
}
 8006d66:	4770      	bx	lr
 8006d68:	20002ef4 	.word	0x20002ef4

08006d6c <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
 8006d6c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
 8006d6e:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <os_sanity_check_list_lock+0x18>)
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	b900      	cbnz	r0, 8006d76 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
 8006d74:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
 8006d76:	f04f 31ff 	mov.w	r1, #4294967295
 8006d7a:	4803      	ldr	r0, [pc, #12]	; (8006d88 <os_sanity_check_list_lock+0x1c>)
 8006d7c:	f7ff ff86 	bl	8006c8c <os_mutex_pend>
err:
 8006d80:	e7f8      	b.n	8006d74 <os_sanity_check_list_lock+0x8>
 8006d82:	bf00      	nop
 8006d84:	20002ef4 	.word	0x20002ef4
 8006d88:	20002f08 	.word	0x20002f08

08006d8c <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
 8006d8c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
 8006d8e:	4b04      	ldr	r3, [pc, #16]	; (8006da0 <os_sanity_check_list_unlock+0x14>)
 8006d90:	6818      	ldr	r0, [r3, #0]
 8006d92:	b900      	cbnz	r0, 8006d96 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
 8006d94:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
 8006d96:	4803      	ldr	r0, [pc, #12]	; (8006da4 <os_sanity_check_list_unlock+0x18>)
 8006d98:	f7ff ff1c 	bl	8006bd4 <os_mutex_release>
err:
 8006d9c:	e7fa      	b.n	8006d94 <os_sanity_check_list_unlock+0x8>
 8006d9e:	bf00      	nop
 8006da0:	20002ef4 	.word	0x20002ef4
 8006da4:	20002f08 	.word	0x20002f08

08006da8 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
 8006da8:	2300      	movs	r3, #0
 8006daa:	6003      	str	r3, [r0, #0]
 8006dac:	6043      	str	r3, [r0, #4]
 8006dae:	6083      	str	r3, [r0, #8]
 8006db0:	60c3      	str	r3, [r0, #12]
 8006db2:	6103      	str	r3, [r0, #16]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	4770      	bx	lr

08006db8 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
 8006db8:	b510      	push	{r4, lr}
 8006dba:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
 8006dbc:	f7ff ffd6 	bl	8006d6c <os_sanity_check_list_lock>
    if (rc != OS_OK) {
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	b108      	cbz	r0, 8006dc8 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
 8006dc8:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <os_sanity_check_register+0x20>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	6122      	str	r2, [r4, #16]
 8006dce:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
 8006dd0:	f7ff ffdc 	bl	8006d8c <os_sanity_check_list_unlock>
 8006dd4:	4603      	mov	r3, r0
err:
 8006dd6:	e7f5      	b.n	8006dc4 <os_sanity_check_register+0xc>
 8006dd8:	20002528 	.word	0x20002528

08006ddc <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
 8006ddc:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
 8006dde:	f7ff ffc5 	bl	8006d6c <os_sanity_check_list_lock>
    if (rc != 0) {
 8006de2:	b910      	cbnz	r0, 8006dea <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 8006de4:	4b17      	ldr	r3, [pc, #92]	; (8006e44 <os_sanity_run+0x68>)
 8006de6:	681c      	ldr	r4, [r3, #0]
 8006de8:	e00e      	b.n	8006e08 <os_sanity_run+0x2c>
        assert(0);
 8006dea:	2300      	movs	r3, #0
 8006dec:	461a      	mov	r2, r3
 8006dee:	4619      	mov	r1, r3
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fe ffff 	bl	8005df4 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
 8006df6:	f000 fad5 	bl	80073a4 <os_time_get>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	6862      	ldr	r2, [r4, #4]
 8006dfe:	4413      	add	r3, r2
 8006e00:	1ac3      	subs	r3, r0, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	dc0d      	bgt.n	8006e22 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 8006e06:	6924      	ldr	r4, [r4, #16]
 8006e08:	b18c      	cbz	r4, 8006e2e <os_sanity_run+0x52>
        if (sc->sc_func) {
 8006e0a:	68a3      	ldr	r3, [r4, #8]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0f2      	beq.n	8006df6 <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
 8006e10:	68e1      	ldr	r1, [r4, #12]
 8006e12:	4620      	mov	r0, r4
 8006e14:	4798      	blx	r3
            if (rc == OS_OK) {
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d1ed      	bne.n	8006df6 <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
 8006e1a:	f000 fac3 	bl	80073a4 <os_time_get>
 8006e1e:	6020      	str	r0, [r4, #0]
                continue;
 8006e20:	e7f1      	b.n	8006e06 <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
 8006e22:	2300      	movs	r3, #0
 8006e24:	461a      	mov	r2, r3
 8006e26:	4619      	mov	r1, r3
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe ffe3 	bl	8005df4 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
 8006e2e:	f7ff ffad 	bl	8006d8c <os_sanity_check_list_unlock>
    if (rc != 0) {
 8006e32:	b900      	cbnz	r0, 8006e36 <os_sanity_run+0x5a>
        assert(0);
    }
}
 8006e34:	bd10      	pop	{r4, pc}
        assert(0);
 8006e36:	2300      	movs	r3, #0
 8006e38:	461a      	mov	r2, r3
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fe ffd9 	bl	8005df4 <__assert_func>
 8006e42:	bf00      	nop
 8006e44:	20002528 	.word	0x20002528

08006e48 <os_sanity_init>:

int
os_sanity_init(void)
{
 8006e48:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
 8006e4a:	4802      	ldr	r0, [pc, #8]	; (8006e54 <os_sanity_init+0xc>)
 8006e4c:	f7ff feb8 	bl	8006bc0 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
 8006e50:	bd08      	pop	{r3, pc}
 8006e52:	bf00      	nop
 8006e54:	20002f08 	.word	0x20002f08

08006e58 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
 8006e58:	7b03      	ldrb	r3, [r0, #12]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d001      	beq.n	8006e62 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
 8006e5e:	2002      	movs	r0, #2
}
 8006e60:	4770      	bx	lr
{
 8006e62:	b510      	push	{r4, lr}
 8006e64:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
 8006e66:	f7fe fef3 	bl	8005c50 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 8006e6a:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <os_sched_insert+0x50>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	b12b      	cbz	r3, 8006e7c <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
 8006e70:	7ae1      	ldrb	r1, [r4, #11]
 8006e72:	7ada      	ldrb	r2, [r3, #11]
 8006e74:	4291      	cmp	r1, r2
 8006e76:	d301      	bcc.n	8006e7c <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 8006e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7a:	e7f8      	b.n	8006e6e <os_sched_insert+0x16>
    if (entry) {
 8006e7c:	b153      	cbz	r3, 8006e94 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
 8006e7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e80:	64a2      	str	r2, [r4, #72]	; 0x48
 8006e82:	6463      	str	r3, [r4, #68]	; 0x44
 8006e84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e86:	6014      	str	r4, [r2, #0]
 8006e88:	3444      	adds	r4, #68	; 0x44
 8006e8a:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
 8006e8c:	f7fe fee6 	bl	8005c5c <os_arch_restore_sr>
    return (0);
 8006e90:	2000      	movs	r0, #0
}
 8006e92:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
 8006e94:	2300      	movs	r3, #0
 8006e96:	6463      	str	r3, [r4, #68]	; 0x44
 8006e98:	4b03      	ldr	r3, [pc, #12]	; (8006ea8 <os_sched_insert+0x50>)
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	64a2      	str	r2, [r4, #72]	; 0x48
 8006e9e:	6014      	str	r4, [r2, #0]
 8006ea0:	3444      	adds	r4, #68	; 0x44
 8006ea2:	605c      	str	r4, [r3, #4]
 8006ea4:	e7f2      	b.n	8006e8c <os_sched_insert+0x34>
 8006ea6:	bf00      	nop
 8006ea8:	20000154 	.word	0x20000154

08006eac <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
 8006eac:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
 8006eae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
 8006eb4:	4b06      	ldr	r3, [pc, #24]	; (8006ed0 <os_sched_ctx_sw_hook+0x24>)
 8006eb6:	681c      	ldr	r4, [r3, #0]
 8006eb8:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <os_sched_ctx_sw_hook+0x28>)
 8006eba:	6818      	ldr	r0, [r3, #0]
 8006ebc:	4906      	ldr	r1, [pc, #24]	; (8006ed8 <os_sched_ctx_sw_hook+0x2c>)
 8006ebe:	680b      	ldr	r3, [r1, #0]
 8006ec0:	1ac2      	subs	r2, r0, r3
 8006ec2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ec4:	4413      	add	r3, r2
 8006ec6:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
 8006ec8:	6008      	str	r0, [r1, #0]
}
 8006eca:	bc10      	pop	{r4}
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	20002f14 	.word	0x20002f14
 8006ed4:	20002f28 	.word	0x20002f28
 8006ed8:	20002f18 	.word	0x20002f18

08006edc <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
 8006edc:	4b01      	ldr	r3, [pc, #4]	; (8006ee4 <os_sched_get_current_task+0x8>)
 8006ede:	6818      	ldr	r0, [r3, #0]
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20002f14 	.word	0x20002f14

08006ee8 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
 8006ee8:	4b01      	ldr	r3, [pc, #4]	; (8006ef0 <os_sched_set_current_task+0x8>)
 8006eea:	6018      	str	r0, [r3, #0]
}
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20002f14 	.word	0x20002f14

08006ef4 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8006efa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006efc:	b1d3      	cbz	r3, 8006f34 <os_sched_sleep+0x40>
 8006efe:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006f00:	649a      	str	r2, [r3, #72]	; 0x48
 8006f02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006f04:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006f06:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
 8006f0c:	f000 fa4a 	bl	80073a4 <os_time_get>
 8006f10:	4428      	add	r0, r5
 8006f12:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
 8006f14:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006f18:	d010      	beq.n	8006f3c <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 8006f1a:	4b18      	ldr	r3, [pc, #96]	; (8006f7c <os_sched_sleep+0x88>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	b1d3      	cbz	r3, 8006f56 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 8006f20:	7b5a      	ldrb	r2, [r3, #13]
 8006f22:	f012 0f01 	tst.w	r2, #1
 8006f26:	d116      	bne.n	8006f56 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
 8006f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f2a:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	dc12      	bgt.n	8006f56 <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 8006f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f32:	e7f4      	b.n	8006f1e <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8006f34:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006f36:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <os_sched_sleep+0x8c>)
 8006f38:	605a      	str	r2, [r3, #4]
 8006f3a:	e7e2      	b.n	8006f02 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
 8006f3c:	7b63      	ldrb	r3, [r4, #13]
 8006f3e:	f043 0301 	orr.w	r3, r3, #1
 8006f42:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 8006f44:	2300      	movs	r3, #0
 8006f46:	6463      	str	r3, [r4, #68]	; 0x44
 8006f48:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <os_sched_sleep+0x88>)
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	64a2      	str	r2, [r4, #72]	; 0x48
 8006f4e:	6014      	str	r4, [r2, #0]
 8006f50:	3444      	adds	r4, #68	; 0x44
 8006f52:	605c      	str	r4, [r3, #4]
 8006f54:	e007      	b.n	8006f66 <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
 8006f56:	b143      	cbz	r3, 8006f6a <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
 8006f58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f5a:	64a2      	str	r2, [r4, #72]	; 0x48
 8006f5c:	6463      	str	r3, [r4, #68]	; 0x44
 8006f5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f60:	6014      	str	r4, [r2, #0]
 8006f62:	3444      	adds	r4, #68	; 0x44
 8006f64:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
 8006f66:	2000      	movs	r0, #0
 8006f68:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6463      	str	r3, [r4, #68]	; 0x44
 8006f6e:	4b03      	ldr	r3, [pc, #12]	; (8006f7c <os_sched_sleep+0x88>)
 8006f70:	685a      	ldr	r2, [r3, #4]
 8006f72:	64a2      	str	r2, [r4, #72]	; 0x48
 8006f74:	6014      	str	r4, [r2, #0]
 8006f76:	3444      	adds	r4, #68	; 0x44
 8006f78:	605c      	str	r4, [r3, #4]
 8006f7a:	e7f4      	b.n	8006f66 <os_sched_sleep+0x72>
 8006f7c:	2000015c 	.word	0x2000015c
 8006f80:	20000154 	.word	0x20000154

08006f84 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
 8006f84:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
 8006f86:	7b03      	ldrb	r3, [r0, #12]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d108      	bne.n	8006f9e <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
 8006f8c:	69c3      	ldr	r3, [r0, #28]
 8006f8e:	b1db      	cbz	r3, 8006fc8 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	b152      	cbz	r2, 8006faa <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 8006f94:	4282      	cmp	r2, r0
 8006f96:	d10f      	bne.n	8006fb8 <os_sched_wakeup+0x34>
 8006f98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	e011      	b.n	8006fc2 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe ff25 	bl	8005df4 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
 8006faa:	2300      	movs	r3, #0
 8006fac:	461a      	mov	r2, r3
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fe ff1f 	bl	8005df4 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006fba:	4283      	cmp	r3, r0
 8006fbc:	d1fb      	bne.n	8006fb6 <os_sched_wakeup+0x32>
 8006fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
 8006fc6:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
 8006fd0:	7b43      	ldrb	r3, [r0, #13]
 8006fd2:	f023 0301 	bic.w	r3, r3, #1
 8006fd6:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 8006fd8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006fda:	b143      	cbz	r3, 8006fee <os_sched_wakeup+0x6a>
 8006fdc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006fde:	649a      	str	r2, [r3, #72]	; 0x48
 8006fe0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006fe2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006fe4:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
 8006fe6:	f7ff ff37 	bl	8006e58 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
 8006fea:	2000      	movs	r0, #0
 8006fec:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 8006fee:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006ff0:	4b01      	ldr	r3, [pc, #4]	; (8006ff8 <os_sched_wakeup+0x74>)
 8006ff2:	605a      	str	r2, [r3, #4]
 8006ff4:	e7f4      	b.n	8006fe0 <os_sched_wakeup+0x5c>
 8006ff6:	bf00      	nop
 8006ff8:	2000015c 	.word	0x2000015c

08006ffc <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
 8006ffc:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
 8006ffe:	f000 f9d1 	bl	80073a4 <os_time_get>
 8007002:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
 8007004:	f7fe fe24 	bl	8005c50 <os_arch_save_sr>
 8007008:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
 800700a:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <os_sched_os_timer_exp+0x38>)
 800700c:	6818      	ldr	r0, [r3, #0]
    while (t) {
 800700e:	b160      	cbz	r0, 800702a <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
 8007010:	7b43      	ldrb	r3, [r0, #13]
 8007012:	f013 0f01 	tst.w	r3, #1
 8007016:	d108      	bne.n	800702a <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
 8007018:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
 800701a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800701c:	1aeb      	subs	r3, r5, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	db03      	blt.n	800702a <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
 8007022:	f7ff ffaf 	bl	8006f84 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
 8007026:	4620      	mov	r0, r4
 8007028:	e7f1      	b.n	800700e <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
 800702a:	4630      	mov	r0, r6
 800702c:	f7fe fe16 	bl	8005c5c <os_arch_restore_sr>
}
 8007030:	bd70      	pop	{r4, r5, r6, pc}
 8007032:	bf00      	nop
 8007034:	2000015c 	.word	0x2000015c

08007038 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
 8007038:	b510      	push	{r4, lr}
 800703a:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
 800703c:	f7fe fe11 	bl	8005c62 <os_arch_in_critical>
 8007040:	b150      	cbz	r0, 8007058 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
 8007042:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <os_sched_wakeup_ticks+0x3c>)
 8007044:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
 8007046:	b17b      	cbz	r3, 8007068 <os_sched_wakeup_ticks+0x30>
 8007048:	7b5a      	ldrb	r2, [r3, #13]
 800704a:	f012 0f01 	tst.w	r2, #1
 800704e:	d10e      	bne.n	800706e <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
 8007050:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007052:	1b00      	subs	r0, r0, r4
 8007054:	d406      	bmi.n	8007064 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
 8007056:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
 8007058:	2300      	movs	r3, #0
 800705a:	461a      	mov	r2, r3
 800705c:	4619      	mov	r1, r3
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe fec8 	bl	8005df4 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
 8007064:	2000      	movs	r0, #0
 8007066:	e7f6      	b.n	8007056 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
 8007068:	f04f 30ff 	mov.w	r0, #4294967295
 800706c:	e7f3      	b.n	8007056 <os_sched_wakeup_ticks+0x1e>
 800706e:	f04f 30ff 	mov.w	r0, #4294967295
    return (rt);
 8007072:	e7f0      	b.n	8007056 <os_sched_wakeup_ticks+0x1e>
 8007074:	2000015c 	.word	0x2000015c

08007078 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
 8007078:	4b01      	ldr	r3, [pc, #4]	; (8007080 <os_sched_next_task+0x8>)
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	20000154 	.word	0x20000154

08007084 <os_sched>:
{
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
 8007088:	f7fe fde2 	bl	8005c50 <os_arch_save_sr>
 800708c:	4605      	mov	r5, r0
    if (!next_t) {
 800708e:	b134      	cbz	r4, 800709e <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
 8007090:	4620      	mov	r0, r4
 8007092:	f7fe fdd3 	bl	8005c3c <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
 8007096:	4628      	mov	r0, r5
 8007098:	f7fe fde0 	bl	8005c5c <os_arch_restore_sr>
}
 800709c:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
 800709e:	f7ff ffeb 	bl	8007078 <os_sched_next_task>
 80070a2:	4604      	mov	r4, r0
 80070a4:	e7f4      	b.n	8007090 <os_sched+0xc>
	...

080070a8 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
 80070a8:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
 80070aa:	7b03      	ldrb	r3, [r0, #12]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d000      	beq.n	80070b2 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
 80070b0:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 80070b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80070b4:	b13b      	cbz	r3, 80070c6 <os_sched_resort+0x1e>
 80070b6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80070b8:	649a      	str	r2, [r3, #72]	; 0x48
 80070ba:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80070bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070be:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
 80070c0:	f7ff feca 	bl	8006e58 <os_sched_insert>
}
 80070c4:	e7f4      	b.n	80070b0 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 80070c6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80070c8:	4b01      	ldr	r3, [pc, #4]	; (80070d0 <os_sched_resort+0x28>)
 80070ca:	605a      	str	r2, [r3, #4]
 80070cc:	e7f5      	b.n	80070ba <os_sched_resort+0x12>
 80070ce:	bf00      	nop
 80070d0:	20000154 	.word	0x20000154

080070d4 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
 80070d4:	4603      	mov	r3, r0
 80070d6:	b118      	cbz	r0, 80070e0 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
 80070d8:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
 80070da:	2000      	movs	r0, #0
 80070dc:	6018      	str	r0, [r3, #0]
 80070de:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 80070e0:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
 80070e2:	4770      	bx	lr

080070e4 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
 80070e6:	4b17      	ldr	r3, [pc, #92]	; (8007144 <os_sem_release+0x60>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	b33b      	cbz	r3, 800713c <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 80070ec:	b340      	cbz	r0, 8007140 <os_sem_release+0x5c>
 80070ee:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
 80070f0:	f7ff fef4 	bl	8006edc <os_sched_get_current_task>
 80070f4:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
 80070f6:	f7fe fdab 	bl	8005c50 <os_arch_save_sr>
 80070fa:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
 80070fc:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
 80070fe:	b165      	cbz	r5, 800711a <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 8007100:	7b6b      	ldrb	r3, [r5, #13]
 8007102:	f023 0302 	bic.w	r3, r3, #2
 8007106:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
 8007108:	4628      	mov	r0, r5
 800710a:	f7ff ff3b 	bl	8006f84 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
 800710e:	7afa      	ldrb	r2, [r7, #11]
 8007110:	7aeb      	ldrb	r3, [r5, #11]
 8007112:	429a      	cmp	r2, r3
 8007114:	d80b      	bhi.n	800712e <os_sem_release+0x4a>
    resched = 0;
 8007116:	2400      	movs	r4, #0
 8007118:	e003      	b.n	8007122 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
 800711a:	88e3      	ldrh	r3, [r4, #6]
 800711c:	3301      	adds	r3, #1
 800711e:	80e3      	strh	r3, [r4, #6]
    resched = 0;
 8007120:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
 8007122:	4630      	mov	r0, r6
 8007124:	f7fe fd9a 	bl	8005c5c <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
 8007128:	b91c      	cbnz	r4, 8007132 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
 800712a:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
 800712c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
 800712e:	2401      	movs	r4, #1
 8007130:	e7f7      	b.n	8007122 <os_sem_release+0x3e>
        os_sched(rdy);
 8007132:	4628      	mov	r0, r5
 8007134:	f7ff ffa6 	bl	8007084 <os_sched>
    ret = OS_OK;
 8007138:	2000      	movs	r0, #0
 800713a:	e7f7      	b.n	800712c <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
 800713c:	2009      	movs	r0, #9
 800713e:	e7f5      	b.n	800712c <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
 8007140:	2003      	movs	r0, #3
 8007142:	e7f3      	b.n	800712c <os_sem_release+0x48>
 8007144:	20002ef4 	.word	0x20002ef4

08007148 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
 8007148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
 800714a:	4b2c      	ldr	r3, [pc, #176]	; (80071fc <os_sem_pend+0xb4>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d04f      	beq.n	80071f2 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 8007152:	2800      	cmp	r0, #0
 8007154:	d04f      	beq.n	80071f6 <os_sem_pend+0xae>
 8007156:	460d      	mov	r5, r1
 8007158:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
 800715a:	f7ff febf 	bl	8006edc <os_sched_get_current_task>
 800715e:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
 8007160:	f7fe fd76 	bl	8005c50 <os_arch_save_sr>
 8007164:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
 8007166:	88e3      	ldrh	r3, [r4, #6]
 8007168:	b14b      	cbz	r3, 800717e <os_sem_pend+0x36>
        sem->sem_tokens--;
 800716a:	3b01      	subs	r3, #1
 800716c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
 800716e:	2400      	movs	r4, #0
    sched = 0;
 8007170:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
 8007172:	4638      	mov	r0, r7
 8007174:	f7fe fd72 	bl	8005c5c <os_arch_restore_sr>

    if (sched) {
 8007178:	bb45      	cbnz	r5, 80071cc <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
 800717a:	4620      	mov	r0, r4
 800717c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
 800717e:	b315      	cbz	r5, 80071c6 <os_sem_pend+0x7e>
        current->t_obj = sem;
 8007180:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
 8007182:	7b73      	ldrb	r3, [r6, #13]
 8007184:	f043 0302 	orr.w	r3, r3, #2
 8007188:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
 800718a:	f8d4 c000 	ldr.w	ip, [r4]
 800718e:	f1bc 0f00 	cmp.w	ip, #0
 8007192:	d00e      	beq.n	80071b2 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 8007194:	4663      	mov	r3, ip
        last = NULL;
 8007196:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 8007198:	b133      	cbz	r3, 80071a8 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
 800719a:	7af1      	ldrb	r1, [r6, #11]
 800719c:	7ada      	ldrb	r2, [r3, #11]
 800719e:	4291      	cmp	r1, r2
 80071a0:	d302      	bcc.n	80071a8 <os_sem_pend+0x60>
                last = entry;
 80071a2:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 80071a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a6:	e7f7      	b.n	8007198 <os_sem_pend+0x50>
        if (last) {
 80071a8:	b118      	cbz	r0, 80071b2 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
 80071aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80071ac:	64f3      	str	r3, [r6, #76]	; 0x4c
 80071ae:	64c6      	str	r6, [r0, #76]	; 0x4c
 80071b0:	e002      	b.n	80071b8 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
 80071b2:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
 80071b6:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
 80071b8:	4629      	mov	r1, r5
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7ff fe9a 	bl	8006ef4 <os_sched_sleep>
        ret = OS_OK;
 80071c0:	2400      	movs	r4, #0
        sched = 1;
 80071c2:	2501      	movs	r5, #1
 80071c4:	e7d5      	b.n	8007172 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
 80071c6:	2406      	movs	r4, #6
    sched = 0;
 80071c8:	2500      	movs	r5, #0
 80071ca:	e7d2      	b.n	8007172 <os_sem_pend+0x2a>
        os_sched(NULL);
 80071cc:	2000      	movs	r0, #0
 80071ce:	f7ff ff59 	bl	8007084 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
 80071d2:	7b73      	ldrb	r3, [r6, #13]
 80071d4:	f013 0f02 	tst.w	r3, #2
 80071d8:	d101      	bne.n	80071de <os_sem_pend+0x96>
            ret = OS_OK;
 80071da:	2400      	movs	r4, #0
 80071dc:	e7cd      	b.n	800717a <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
 80071de:	f7fe fd37 	bl	8005c50 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 80071e2:	7b73      	ldrb	r3, [r6, #13]
 80071e4:	f023 0302 	bic.w	r3, r3, #2
 80071e8:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
 80071ea:	f7fe fd37 	bl	8005c5c <os_arch_restore_sr>
            ret = OS_TIMEOUT;
 80071ee:	2406      	movs	r4, #6
 80071f0:	e7c3      	b.n	800717a <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
 80071f2:	2409      	movs	r4, #9
 80071f4:	e7c1      	b.n	800717a <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
 80071f6:	2403      	movs	r4, #3
 80071f8:	e7bf      	b.n	800717a <os_sem_pend+0x32>
 80071fa:	bf00      	nop
 80071fc:	20002ef4 	.word	0x20002ef4

08007200 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
 8007200:	2300      	movs	r3, #0
 8007202:	e003      	b.n	800720c <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
 8007204:	4a03      	ldr	r2, [pc, #12]	; (8007214 <_clear_stack+0x14>)
 8007206:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
 800720a:	3301      	adds	r3, #1
 800720c:	428b      	cmp	r3, r1
 800720e:	dbf9      	blt.n	8007204 <_clear_stack+0x4>
    }
}
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	deadbeef 	.word	0xdeadbeef

08007218 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
 8007218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800721c:	4604      	mov	r4, r0
 800721e:	460f      	mov	r7, r1
 8007220:	4690      	mov	r8, r2
 8007222:	461d      	mov	r5, r3
 8007224:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
 8007228:	2250      	movs	r2, #80	; 0x50
 800722a:	2100      	movs	r1, #0
 800722c:	f000 fa7f 	bl	800772e <memset>

    t->t_func = func;
 8007230:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
 8007234:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
 8007236:	f7fe fd0b 	bl	8005c50 <os_arch_save_sr>
    rc = g_task_id;
 800723a:	4b2b      	ldr	r3, [pc, #172]	; (80072e8 <os_task_init+0xd0>)
 800723c:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
 800723e:	1c6a      	adds	r2, r5, #1
 8007240:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
 8007242:	f7fe fd0b 	bl	8005c5c <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
 8007246:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
 8007248:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800724c:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
 800724e:	2301      	movs	r3, #1
 8007250:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
 8007252:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
 8007254:	2300      	movs	r3, #0
 8007256:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
 8007258:	f104 0720 	add.w	r7, r4, #32
 800725c:	4638      	mov	r0, r7
 800725e:	f7ff fda3 	bl	8006da8 <os_sanity_check_init>
    if (rc != OS_OK) {
 8007262:	4605      	mov	r5, r0
 8007264:	2800      	cmp	r0, #0
 8007266:	d132      	bne.n	80072ce <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
 8007268:	9b07      	ldr	r3, [sp, #28]
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726e:	d005      	beq.n	800727c <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
 8007270:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
 8007272:	4638      	mov	r0, r7
 8007274:	f7ff fda0 	bl	8006db8 <os_sanity_check_register>
        if (rc != OS_OK) {
 8007278:	4605      	mov	r5, r0
 800727a:	bb40      	cbnz	r0, 80072ce <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
 800727c:	4631      	mov	r1, r6
 800727e:	9808      	ldr	r0, [sp, #32]
 8007280:	f7ff ffbe 	bl	8007200 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
 8007284:	9b08      	ldr	r3, [sp, #32]
 8007286:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 800728a:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
 800728c:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
 800728e:	4632      	mov	r2, r6
 8007290:	4620      	mov	r0, r4
 8007292:	f7fe fceb 	bl	8005c6c <os_arch_task_stack_init>
 8007296:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 8007298:	4b14      	ldr	r3, [pc, #80]	; (80072ec <os_task_init+0xd4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	b15b      	cbz	r3, 80072b6 <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
 800729e:	7ae1      	ldrb	r1, [r4, #11]
 80072a0:	7ada      	ldrb	r2, [r3, #11]
 80072a2:	4291      	cmp	r1, r2
 80072a4:	d001      	beq.n	80072aa <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 80072a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a8:	e7f8      	b.n	800729c <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
 80072aa:	2300      	movs	r3, #0
 80072ac:	461a      	mov	r2, r3
 80072ae:	4619      	mov	r1, r3
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe fd9f 	bl	8005df4 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
 80072b6:	6423      	str	r3, [r4, #64]	; 0x40
 80072b8:	4b0c      	ldr	r3, [pc, #48]	; (80072ec <os_task_init+0xd4>)
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	6014      	str	r4, [r2, #0]
 80072be:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80072c2:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
 80072c4:	4620      	mov	r0, r4
 80072c6:	f7ff fdc7 	bl	8006e58 <os_sched_insert>
 80072ca:	4605      	mov	r5, r0
    if (rc != OS_OK) {
 80072cc:	b110      	cbz	r0, 80072d4 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
 80072ce:	4628      	mov	r0, r5
 80072d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
 80072d4:	f7fe fe4c 	bl	8005f70 <os_started>
 80072d8:	b908      	cbnz	r0, 80072de <os_task_init+0xc6>
    return (0);
 80072da:	4605      	mov	r5, r0
 80072dc:	e7f7      	b.n	80072ce <os_task_init+0xb6>
        os_sched(NULL);
 80072de:	2000      	movs	r0, #0
 80072e0:	f7ff fed0 	bl	8007084 <os_sched>
 80072e4:	e7f3      	b.n	80072ce <os_task_init+0xb6>
 80072e6:	bf00      	nop
 80072e8:	20002f24 	.word	0x20002f24
 80072ec:	20002f1c 	.word	0x20002f1c

080072f0 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
 80072f0:	e92d 0870 	stmdb	sp!, {r4, r5, r6, fp}
 80072f4:	460e      	mov	r6, r1
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
 80072f6:	4c12      	ldr	r4, [pc, #72]	; (8007340 <os_deltatime+0x50>)
 80072f8:	fba4 3400 	umull	r3, r4, r4, r0
 80072fc:	09a4      	lsrs	r4, r4, #6
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
 80072fe:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8007302:	fb05 0314 	mls	r3, r5, r4, r0
    os_timeradd(base, &tvdelta, result);
 8007306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800730a:	eb10 0b04 	adds.w	fp, r0, r4
 800730e:	f141 0c00 	adc.w	ip, r1, #0
 8007312:	e9c2 bc00 	strd	fp, ip, [r2]
 8007316:	68b4      	ldr	r4, [r6, #8]
 8007318:	fb05 4303 	mla	r3, r5, r3, r4
 800731c:	6093      	str	r3, [r2, #8]
 800731e:	4c09      	ldr	r4, [pc, #36]	; (8007344 <os_deltatime+0x54>)
 8007320:	42a3      	cmp	r3, r4
 8007322:	dd0a      	ble.n	800733a <os_deltatime+0x4a>
 8007324:	f11b 0001 	adds.w	r0, fp, #1
 8007328:	f14c 0100 	adc.w	r1, ip, #0
 800732c:	e9c2 0100 	strd	r0, r1, [r2]
 8007330:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 8007334:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8007338:	6093      	str	r3, [r2, #8]
}
 800733a:	e8bd 0870 	ldmia.w	sp!, {r4, r5, r6, fp}
 800733e:	4770      	bx	lr
 8007340:	10624dd3 	.word	0x10624dd3
 8007344:	000f423f 	.word	0x000f423f

08007348 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
 8007348:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
 800734a:	1e04      	subs	r4, r0, #0
 800734c:	db0d      	blt.n	800736a <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
 800734e:	f7fe fc7f 	bl	8005c50 <os_arch_save_sr>
 8007352:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
 8007354:	4a11      	ldr	r2, [pc, #68]	; (800739c <os_time_tick+0x54>)
 8007356:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
 8007358:	18e0      	adds	r0, r4, r3
 800735a:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
 800735c:	ea90 0f03 	teq	r0, r3
 8007360:	d409      	bmi.n	8007376 <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
 8007362:	4628      	mov	r0, r5
 8007364:	f7fe fc7a 	bl	8005c5c <os_arch_restore_sr>
}
 8007368:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
 800736a:	2300      	movs	r3, #0
 800736c:	461a      	mov	r2, r3
 800736e:	4619      	mov	r1, r3
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe fd3f 	bl	8005df4 <__assert_func>
        delta = g_os_time - basetod.ostime;
 8007376:	4e0a      	ldr	r6, [pc, #40]	; (80073a0 <os_time_tick+0x58>)
 8007378:	4631      	mov	r1, r6
 800737a:	f851 4b08 	ldr.w	r4, [r1], #8
 800737e:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
 8007380:	460a      	mov	r2, r1
 8007382:	4620      	mov	r0, r4
 8007384:	f7ff ffb4 	bl	80072f0 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
 8007388:	f106 0118 	add.w	r1, r6, #24
 800738c:	460a      	mov	r2, r1
 800738e:	4620      	mov	r0, r4
 8007390:	f7ff ffae 	bl	80072f0 <os_deltatime>
        basetod.ostime = g_os_time;
 8007394:	4b01      	ldr	r3, [pc, #4]	; (800739c <os_time_tick+0x54>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6033      	str	r3, [r6, #0]
 800739a:	e7e2      	b.n	8007362 <os_time_tick+0x1a>
 800739c:	20002f28 	.word	0x20002f28
 80073a0:	20002530 	.word	0x20002530

080073a4 <os_time_get>:
}
 80073a4:	4b01      	ldr	r3, [pc, #4]	; (80073ac <os_time_get+0x8>)
 80073a6:	6818      	ldr	r0, [r3, #0]
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	20002f28 	.word	0x20002f28

080073b0 <os_time_advance>:

void
os_time_advance(int ticks)
{
 80073b0:	b510      	push	{r4, lr}
    assert(ticks >= 0);
 80073b2:	1e04      	subs	r4, r0, #0
 80073b4:	db09      	blt.n	80073ca <os_time_advance+0x1a>

    if (ticks > 0) {
 80073b6:	2c00      	cmp	r4, #0
 80073b8:	dd06      	ble.n	80073c8 <os_time_advance+0x18>
        if (!os_started()) {
 80073ba:	f7fe fdd9 	bl	8005f70 <os_started>
 80073be:	b950      	cbnz	r0, 80073d6 <os_time_advance+0x26>
            g_os_time += ticks;
 80073c0:	4a0a      	ldr	r2, [pc, #40]	; (80073ec <os_time_advance+0x3c>)
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	441c      	add	r4, r3
 80073c6:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
 80073c8:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
 80073ca:	2300      	movs	r3, #0
 80073cc:	461a      	mov	r2, r3
 80073ce:	4619      	mov	r1, r3
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fe fd0f 	bl	8005df4 <__assert_func>
            os_time_tick(ticks);
 80073d6:	4620      	mov	r0, r4
 80073d8:	f7ff ffb6 	bl	8007348 <os_time_tick>
            os_callout_tick();
 80073dc:	f7fe fef0 	bl	80061c0 <os_callout_tick>
            os_sched_os_timer_exp();
 80073e0:	f7ff fe0c 	bl	8006ffc <os_sched_os_timer_exp>
            os_sched(NULL);
 80073e4:	2000      	movs	r0, #0
 80073e6:	f7ff fe4d 	bl	8007084 <os_sched>
}
 80073ea:	e7ed      	b.n	80073c8 <os_time_advance+0x18>
 80073ec:	20002f28 	.word	0x20002f28

080073f0 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
 80073f0:	b900      	cbnz	r0, 80073f4 <os_time_delay+0x4>
 80073f2:	4770      	bx	lr
{
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
 80073f8:	f7fe fc2a 	bl	8005c50 <os_arch_save_sr>
 80073fc:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
 80073fe:	f7ff fd6d 	bl	8006edc <os_sched_get_current_task>
 8007402:	4621      	mov	r1, r4
 8007404:	f7ff fd76 	bl	8006ef4 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
 8007408:	4628      	mov	r0, r5
 800740a:	f7fe fc27 	bl	8005c5c <os_arch_restore_sr>
        os_sched(NULL);
 800740e:	2000      	movs	r0, #0
 8007410:	f7ff fe38 	bl	8007084 <os_sched>
    }
}
 8007414:	bd38      	pop	{r3, r4, r5, pc}
	...

08007418 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	4605      	mov	r5, r0
 800741c:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
 800741e:	f7fe fc17 	bl	8005c50 <os_arch_save_sr>
 8007422:	4606      	mov	r6, r0
    if (tv != NULL) {
 8007424:	b145      	cbz	r5, 8007438 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
 8007426:	f7ff ffbd 	bl	80073a4 <os_time_get>
 800742a:	4908      	ldr	r1, [pc, #32]	; (800744c <os_gettimeofday+0x34>)
 800742c:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
 8007430:	462a      	mov	r2, r5
 8007432:	1ac0      	subs	r0, r0, r3
 8007434:	f7ff ff5c 	bl	80072f0 <os_deltatime>
    }

    if (tz != NULL) {
 8007438:	b114      	cbz	r4, 8007440 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
 800743a:	4b04      	ldr	r3, [pc, #16]	; (800744c <os_gettimeofday+0x34>)
 800743c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800743e:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
 8007440:	4630      	mov	r0, r6
 8007442:	f7fe fc0b 	bl	8005c5c <os_arch_restore_sr>

    return (0);
}
 8007446:	2000      	movs	r0, #0
 8007448:	bd70      	pop	{r4, r5, r6, pc}
 800744a:	bf00      	nop
 800744c:	20002530 	.word	0x20002530

08007450 <os_time_ms_to_ticks>:
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    uint64_t ticks;

#if OS_TICKS_PER_SEC == 1000
    *out_ticks = ms;
 8007450:	6008      	str	r0, [r1, #0]
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    return 0;
}
 8007452:	2000      	movs	r0, #0
 8007454:	4770      	bx	lr
	...

08007458 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
 8007458:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
 800745c:	482b      	ldr	r0, [pc, #172]	; (800750c <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
 800745e:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
 8007460:	3002      	adds	r0, #2
        MSR     CONTROL,R0
 8007462:	f380 8814 	msr	CONTROL, r0
        ISB
 8007466:	f3bf 8f6f 	isb	sy
        BX      LR
 800746a:	4770      	bx	lr

0800746c <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
 800746c:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
 8007470:	4770      	bx	lr

08007472 <SVC_Handler>:
        .global SVC_Handler
SVC_Handler:
        .fnstart
        .cantunwind

        MRS     R0,PSP                  /* Read PSP */
 8007472:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
 8007476:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
 8007478:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
 800747c:	b951      	cbnz	r1, 8007494 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 800747e:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8007482:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
 8007484:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 8007486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
 800748a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
 800748e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        BX      LR                      /* Return from interrupt */
 8007492:	4770      	bx	lr

08007494 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8007494:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
 8007496:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
 8007498:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
 800749a:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
 800749c:	d809      	bhi.n	80074b2 <SVC_Done>

        LDR     R4,=SVC_Table-4
 800749e:	4c1d      	ldr	r4, [pc, #116]	; (8007514 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
 80074a0:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 80074a4:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
 80074a8:	47a0      	blx	r4

        MRS     R12,PSP
 80074aa:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
 80074ae:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

080074b2 <SVC_Done>:
SVC_Done:
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 80074b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
 80074b6:	4770      	bx	lr

080074b8 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 80074b8:	4b17      	ldr	r3, [pc, #92]	; (8007518 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
 80074ba:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
 80074bc:	4b17      	ldr	r3, [pc, #92]	; (800751c <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
 80074be:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
 80074c0:	4291      	cmp	r1, r2
        IT      EQ
 80074c2:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
 80074c4:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
 80074c6:	f3ef 8c09 	mrs	ip, PSP
        STMDB   R12!,{R4-R11}           /* Save Old context */
 80074ca:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
 80074ce:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
 80074d2:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
 80074d4:	f8d2 c000 	ldr.w	ip, [r2]
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
 80074d8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        MSR     PSP,R12                 /* Write PSP */
 80074dc:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
 80074e0:	4770      	bx	lr

080074e2 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 80074e2:	b510      	push	{r4, lr}
        BL      timer_handler
 80074e4:	f7fe fba4 	bl	8005c30 <timer_handler>
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 80074e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
 80074ec:	4770      	bx	lr

080074ee <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
 80074ee:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
 80074f2:	bf0c      	ite	eq
        MRSEQ   R3,MSP
 80074f4:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
 80074f8:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
 80074fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
 8007500:	4668      	mov	r0, sp
        BL      os_default_irq
 8007502:	f7fe fc9d 	bl	8005e40 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
 8007506:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        BX      LR
 800750a:	4770      	bx	lr
        LDR     R0,=os_flags
 800750c:	200005e0 	.word	0x200005e0
        LDR     R2,=SVC_Count
 8007510:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
 8007514:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 8007518:	20000154 	.word	0x20000154
        LDR     R3,=g_current_task      /* Get current task */
 800751c:	20002f14 	.word	0x20002f14

08007520 <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
 8007520:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
 8007522:	4802      	ldr	r0, [pc, #8]	; (800752c <lrand48+0xc>)
 8007524:	f000 fc18 	bl	8007d58 <jrand48>
}
 8007528:	0840      	lsrs	r0, r0, #1
 800752a:	bd08      	pop	{r3, pc}
 800752c:	20002f2c 	.word	0x20002f2c

08007530 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
 8007530:	2001      	movs	r0, #1
 8007532:	4770      	bx	lr

08007534 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
 8007534:	4770      	bx	lr

08007536 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
 8007536:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
 8007538:	f101 0320 	add.w	r3, r1, #32
 800753c:	4293      	cmp	r3, r2
 800753e:	d907      	bls.n	8007550 <__malloc_from_block+0x1a>
        nfp->next_free = fpn = fp->next_free;
        nfp->prev_free = fpp = fp->prev_free;
        fpn->prev_free = nfp;
        fpp->next_free = nfp;
    } else {
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
 8007540:	2300      	movs	r3, #0
 8007542:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
 8007544:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
 8007546:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
 8007548:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
 800754a:	615a      	str	r2, [r3, #20]
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
 800754c:	3010      	adds	r0, #16
 800754e:	4770      	bx	lr
{
 8007550:	b430      	push	{r4, r5}
        nfp = (struct free_arena_header *)((char *)fp + size);
 8007552:	1843      	adds	r3, r0, r1
        na = fp->a.next;
 8007554:	6884      	ldr	r4, [r0, #8]
        nfp->a.type = ARENA_TYPE_FREE;
 8007556:	2501      	movs	r5, #1
 8007558:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
 800755a:	1a52      	subs	r2, r2, r1
 800755c:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
 800755e:	2200      	movs	r2, #0
 8007560:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
 8007562:	6041      	str	r1, [r0, #4]
        nfp->a.prev = fp;
 8007564:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
 8007566:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
 8007568:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
 800756a:	6083      	str	r3, [r0, #8]
        nfp->next_free = fpn = fp->next_free;
 800756c:	6901      	ldr	r1, [r0, #16]
 800756e:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
 8007570:	6942      	ldr	r2, [r0, #20]
 8007572:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
 8007574:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
 8007576:	6113      	str	r3, [r2, #16]
}
 8007578:	3010      	adds	r0, #16
 800757a:	bc30      	pop	{r4, r5}
 800757c:	4770      	bx	lr
	...

08007580 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
 8007580:	b410      	push	{r4}
 8007582:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
 8007584:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
 8007586:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
 8007588:	6802      	ldr	r2, [r0, #0]
 800758a:	2a01      	cmp	r2, #1
 800758c:	d00e      	beq.n	80075ac <__free_block+0x2c>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
 800758e:	2201      	movs	r2, #1
 8007590:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
 8007592:	4a13      	ldr	r2, [pc, #76]	; (80075e0 <__free_block+0x60>)
 8007594:	6910      	ldr	r0, [r2, #16]
 8007596:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
 8007598:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
 800759a:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	6153      	str	r3, [r2, #20]
 80075a0:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
 80075a2:	680b      	ldr	r3, [r1, #0]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d00b      	beq.n	80075c0 <__free_block+0x40>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
 80075a8:	bc10      	pop	{r4}
 80075aa:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
 80075ac:	6842      	ldr	r2, [r0, #4]
 80075ae:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
 80075b0:	429c      	cmp	r4, r3
 80075b2:	d1ec      	bne.n	800758e <__free_block+0xe>
        pah->a.size += ah->a.size;
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	441a      	add	r2, r3
 80075b8:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
 80075ba:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
 80075bc:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
 80075be:	e7f0      	b.n	80075a2 <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
 80075c0:	6843      	ldr	r3, [r0, #4]
 80075c2:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
 80075c4:	428a      	cmp	r2, r1
 80075c6:	d1ef      	bne.n	80075a8 <__free_block+0x28>
        ah->a.size += nah->a.size;
 80075c8:	684a      	ldr	r2, [r1, #4]
 80075ca:	4413      	add	r3, r2
 80075cc:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
 80075ce:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
 80075d0:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
 80075d2:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
 80075d4:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
 80075d6:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
 80075d8:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
 80075da:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
 80075dc:	60da      	str	r2, [r3, #12]
    return ah;
 80075de:	e7e3      	b.n	80075a8 <__free_block+0x28>
 80075e0:	20000164 	.word	0x20000164

080075e4 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
 80075e4:	2917      	cmp	r1, #23
 80075e6:	d91e      	bls.n	8007626 <add_malloc_block+0x42>
{
 80075e8:	b510      	push	{r4, lr}
 80075ea:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
 80075ec:	2301      	movs	r3, #1
 80075ee:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
 80075f0:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
 80075f2:	4b0d      	ldr	r3, [pc, #52]	; (8007628 <add_malloc_block+0x44>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4798      	blx	r3
 80075f8:	b1a0      	cbz	r0, 8007624 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
 80075fa:	4b0c      	ldr	r3, [pc, #48]	; (800762c <add_malloc_block+0x48>)
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	2a02      	cmp	r2, #2
 8007602:	d003      	beq.n	800760c <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
 8007604:	42a3      	cmp	r3, r4
 8007606:	d301      	bcc.n	800760c <add_malloc_block+0x28>
         pah = pah->a.prev) {
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	e7f8      	b.n	80075fe <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
 8007610:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
 8007612:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
 8007614:	68a3      	ldr	r3, [r4, #8]
 8007616:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
 8007618:	4620      	mov	r0, r4
 800761a:	f7ff ffb1 	bl	8007580 <__free_block>

    malloc_unlock();
 800761e:	4b04      	ldr	r3, [pc, #16]	; (8007630 <add_malloc_block+0x4c>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4798      	blx	r3
}
 8007624:	bd10      	pop	{r4, pc}
 8007626:	4770      	bx	lr
 8007628:	2000017c 	.word	0x2000017c
 800762c:	20000164 	.word	0x20000164
 8007630:	20000180 	.word	0x20000180

08007634 <malloc>:
{
 8007634:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
 8007636:	1e43      	subs	r3, r0, #1
 8007638:	f113 0f12 	cmn.w	r3, #18
 800763c:	d826      	bhi.n	800768c <malloc+0x58>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
 800763e:	f100 041f 	add.w	r4, r0, #31
 8007642:	f024 040f 	bic.w	r4, r4, #15
    if (!malloc_lock())
 8007646:	4b13      	ldr	r3, [pc, #76]	; (8007694 <malloc+0x60>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4798      	blx	r3
 800764c:	b300      	cbz	r0, 8007690 <malloc+0x5c>
    void *result = NULL;
 800764e:	2500      	movs	r5, #0
 8007650:	e00d      	b.n	800766e <malloc+0x3a>
            result = __malloc_from_block(fp, size);
 8007652:	4621      	mov	r1, r4
 8007654:	f7ff ff6f 	bl	8007536 <__malloc_from_block>
 8007658:	4605      	mov	r5, r0
    if (result == NULL) {
 800765a:	b995      	cbnz	r5, 8007682 <malloc+0x4e>
        more_mem = _sbrk(size);
 800765c:	4620      	mov	r0, r4
 800765e:	f001 feff 	bl	8009460 <_sbrk>
        if (more_mem != (void *)-1) {
 8007662:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007666:	d00c      	beq.n	8007682 <malloc+0x4e>
            add_malloc_block(more_mem, size);
 8007668:	4621      	mov	r1, r4
 800766a:	f7ff ffbb 	bl	80075e4 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
 800766e:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <malloc+0x64>)
 8007670:	6918      	ldr	r0, [r3, #16]
 8007672:	6803      	ldr	r3, [r0, #0]
 8007674:	2b02      	cmp	r3, #2
 8007676:	d0f0      	beq.n	800765a <malloc+0x26>
        if (fp->a.size >= size) {
 8007678:	6843      	ldr	r3, [r0, #4]
 800767a:	42a3      	cmp	r3, r4
 800767c:	d2e9      	bcs.n	8007652 <malloc+0x1e>
         fp = fp->next_free) {
 800767e:	6900      	ldr	r0, [r0, #16]
 8007680:	e7f7      	b.n	8007672 <malloc+0x3e>
    malloc_unlock();
 8007682:	4b06      	ldr	r3, [pc, #24]	; (800769c <malloc+0x68>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4798      	blx	r3
}
 8007688:	4628      	mov	r0, r5
 800768a:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
 800768c:	2500      	movs	r5, #0
 800768e:	e7fb      	b.n	8007688 <malloc+0x54>
        return NULL;
 8007690:	2500      	movs	r5, #0
 8007692:	e7f9      	b.n	8007688 <malloc+0x54>
 8007694:	2000017c 	.word	0x2000017c
 8007698:	20000164 	.word	0x20000164
 800769c:	20000180 	.word	0x20000180

080076a0 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
 80076a0:	b170      	cbz	r0, 80076c0 <free+0x20>
{
 80076a2:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
 80076a4:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
 80076a8:	4b06      	ldr	r3, [pc, #24]	; (80076c4 <free+0x24>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4798      	blx	r3
 80076ae:	b900      	cbnz	r0, 80076b2 <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
 80076b0:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
 80076b2:	4620      	mov	r0, r4
 80076b4:	f7ff ff64 	bl	8007580 <__free_block>
    malloc_unlock();
 80076b8:	4b03      	ldr	r3, [pc, #12]	; (80076c8 <free+0x28>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4798      	blx	r3
 80076be:	e7f7      	b.n	80076b0 <free+0x10>
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	2000017c 	.word	0x2000017c
 80076c8:	20000180 	.word	0x20000180

080076cc <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
 80076cc:	b470      	push	{r4, r5, r6}
 80076ce:	f04f 0500 	mov.w	r5, #0
 80076d2:	f022 0603 	bic.w	r6, r2, #3
 80076d6:	e005      	b.n	80076e4 <test1>

080076d8 <loop1>:
 80076d8:	5943      	ldr	r3, [r0, r5]
 80076da:	594c      	ldr	r4, [r1, r5]
 80076dc:	42a3      	cmp	r3, r4
 80076de:	d104      	bne.n	80076ea <res1>
 80076e0:	f105 0504 	add.w	r5, r5, #4

080076e4 <test1>:
 80076e4:	42b5      	cmp	r5, r6
 80076e6:	d1f7      	bne.n	80076d8 <loop1>
 80076e8:	e00d      	b.n	8007706 <test2>

080076ea <res1>:
 80076ea:	ba1b      	rev	r3, r3
 80076ec:	ba24      	rev	r4, r4
 80076ee:	1b1b      	subs	r3, r3, r4
 80076f0:	bf8c      	ite	hi
 80076f2:	2301      	movhi	r3, #1
 80076f4:	f04f 33ff 	movls.w	r3, #4294967295
 80076f8:	e009      	b.n	800770e <done>

080076fa <loop2>:
 80076fa:	5d43      	ldrb	r3, [r0, r5]
 80076fc:	5d4c      	ldrb	r4, [r1, r5]
 80076fe:	1b1b      	subs	r3, r3, r4
 8007700:	d105      	bne.n	800770e <done>
 8007702:	f105 0501 	add.w	r5, r5, #1

08007706 <test2>:
 8007706:	4295      	cmp	r5, r2
 8007708:	d1f7      	bne.n	80076fa <loop2>
 800770a:	f04f 0300 	mov.w	r3, #0

0800770e <done>:
 800770e:	4618      	mov	r0, r3
 8007710:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
 8007712:	4770      	bx	lr

08007714 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
 8007714:	e001      	b.n	800771a <test1>

08007716 <loop1>:
 8007716:	588b      	ldr	r3, [r1, r2]
 8007718:	5083      	str	r3, [r0, r2]

0800771a <test1>:
 800771a:	3a04      	subs	r2, #4
 800771c:	d5fb      	bpl.n	8007716 <loop1>
 800771e:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
 8007722:	e001      	b.n	8007728 <test2>

08007724 <loop2>:
 8007724:	5c8b      	ldrb	r3, [r1, r2]
 8007726:	5483      	strb	r3, [r0, r2]

08007728 <test2>:
 8007728:	3a01      	subs	r2, #1
 800772a:	d5fb      	bpl.n	8007724 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
 800772c:	4770      	bx	lr

0800772e <memset>:

#include <string.h>
#include <stdint.h>

void *memset(void *dst, int c, size_t n)
{
 800772e:	b410      	push	{r4}
	char *q = dst;
 8007730:	4603      	mov	r3, r0
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#else
	while (n--) {
 8007732:	e002      	b.n	800773a <memset+0xc>
		*q++ = c;
 8007734:	7019      	strb	r1, [r3, #0]
 8007736:	3301      	adds	r3, #1
	while (n--) {
 8007738:	4622      	mov	r2, r4
 800773a:	1e54      	subs	r4, r2, #1
 800773c:	2a00      	cmp	r2, #0
 800773e:	d1f9      	bne.n	8007734 <memset+0x6>
	}
#endif

	return dst;
}
 8007740:	bc10      	pop	{r4}
 8007742:	4770      	bx	lr

08007744 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
 8007744:	b40e      	push	{r1, r2, r3}
 8007746:	b500      	push	{lr}
 8007748:	b082      	sub	sp, #8
 800774a:	ab03      	add	r3, sp, #12
 800774c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
 8007750:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
 8007752:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007756:	f000 fad7 	bl	8007d08 <vsnprintf>
	va_end(ap);

	return rv;
}
 800775a:	b002      	add	sp, #8
 800775c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007760:	b003      	add	sp, #12
 8007762:	4770      	bx	lr

08007764 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
 8007764:	b430      	push	{r4, r5}
 8007766:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
 8007768:	1c55      	adds	r5, r2, #1
 800776a:	7813      	ldrb	r3, [r2, #0]
 800776c:	1c4c      	adds	r4, r1, #1
 800776e:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
 8007770:	1a18      	subs	r0, r3, r0
 8007772:	d103      	bne.n	800777c <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
 8007774:	462a      	mov	r2, r5
 8007776:	4621      	mov	r1, r4
		if (d || !ch)
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f5      	bne.n	8007768 <strcmp+0x4>
			break;
	}

	return d;
}
 800777c:	bc30      	pop	{r4, r5}
 800777e:	4770      	bx	lr

08007780 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
 8007780:	4603      	mov	r3, r0
	while (*ss)
 8007782:	e000      	b.n	8007786 <strlen+0x6>
		ss++;
 8007784:	3301      	adds	r3, #1
	while (*ss)
 8007786:	781a      	ldrb	r2, [r3, #0]
 8007788:	2a00      	cmp	r2, #0
 800778a:	d1fb      	bne.n	8007784 <strlen+0x4>
	return ss - s;
}
 800778c:	1a18      	subs	r0, r3, r0
 800778e:	4770      	bx	lr

08007790 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
 8007790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	e9cd 0100 	strd	r0, r1, [sp]
 800779a:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
 800779c:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
 80077a0:	2401      	movs	r4, #1
 80077a2:	2500      	movs	r5, #0
    while (num / d >= p->base)
 80077a4:	e004      	b.n	80077b0 <ui2a+0x20>
        d *= p->base;
 80077a6:	fb06 f305 	mul.w	r3, r6, r5
 80077aa:	fba4 4506 	umull	r4, r5, r4, r6
 80077ae:	441d      	add	r5, r3
    while (num / d >= p->base)
 80077b0:	4622      	mov	r2, r4
 80077b2:	462b      	mov	r3, r5
 80077b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077b8:	f005 fda0 	bl	800d2fc <__aeabi_uldivmod>
 80077bc:	f899 6003 	ldrb.w	r6, [r9, #3]
 80077c0:	2700      	movs	r7, #0
 80077c2:	42b9      	cmp	r1, r7
 80077c4:	bf08      	it	eq
 80077c6:	42b0      	cmpeq	r0, r6
 80077c8:	d2ed      	bcs.n	80077a6 <ui2a+0x16>
    int n = 0;
 80077ca:	f04f 0a00 	mov.w	sl, #0
 80077ce:	e007      	b.n	80077e0 <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 80077d0:	2330      	movs	r3, #48	; 0x30
 80077d2:	441e      	add	r6, r3
 80077d4:	f888 6000 	strb.w	r6, [r8]
            ++n;
 80077d8:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 80077dc:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
 80077e0:	ea54 0305 	orrs.w	r3, r4, r5
 80077e4:	d02e      	beq.n	8007844 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
 80077e6:	4622      	mov	r2, r4
 80077e8:	462b      	mov	r3, r5
 80077ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077ee:	f005 fd85 	bl	800d2fc <__aeabi_uldivmod>
 80077f2:	4606      	mov	r6, r0
 80077f4:	460f      	mov	r7, r1
        num %= d;
 80077f6:	4622      	mov	r2, r4
 80077f8:	462b      	mov	r3, r5
 80077fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077fe:	f005 fd7d 	bl	800d2fc <__aeabi_uldivmod>
 8007802:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
 8007806:	f899 2003 	ldrb.w	r2, [r9, #3]
 800780a:	2300      	movs	r3, #0
 800780c:	4620      	mov	r0, r4
 800780e:	4629      	mov	r1, r5
 8007810:	f005 fd74 	bl	800d2fc <__aeabi_uldivmod>
 8007814:	4604      	mov	r4, r0
 8007816:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
 8007818:	f1ba 0f00 	cmp.w	sl, #0
 800781c:	d105      	bne.n	800782a <ui2a+0x9a>
 800781e:	ea56 0307 	orrs.w	r3, r6, r7
 8007822:	d102      	bne.n	800782a <ui2a+0x9a>
 8007824:	ea54 0305 	orrs.w	r3, r4, r5
 8007828:	d1da      	bne.n	80077e0 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 800782a:	2f00      	cmp	r7, #0
 800782c:	bf08      	it	eq
 800782e:	2e0a      	cmpeq	r6, #10
 8007830:	d3ce      	bcc.n	80077d0 <ui2a+0x40>
 8007832:	f899 3002 	ldrb.w	r3, [r9, #2]
 8007836:	f013 0f04 	tst.w	r3, #4
 800783a:	d001      	beq.n	8007840 <ui2a+0xb0>
 800783c:	2337      	movs	r3, #55	; 0x37
 800783e:	e7c8      	b.n	80077d2 <ui2a+0x42>
 8007840:	2357      	movs	r3, #87	; 0x57
 8007842:	e7c6      	b.n	80077d2 <ui2a+0x42>
        }
    }
    *bf = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	f888 3000 	strb.w	r3, [r8]
}
 800784a:	b002      	add	sp, #8
 800784c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007850 <i2a>:

static void i2a(long long int num, struct param *p)
{
 8007850:	b508      	push	{r3, lr}
    if (num < 0) {
 8007852:	2800      	cmp	r0, #0
 8007854:	f171 0300 	sbcs.w	r3, r1, #0
 8007858:	db02      	blt.n	8007860 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
 800785a:	f7ff ff99 	bl	8007790 <ui2a>
}
 800785e:	bd08      	pop	{r3, pc}
        num = -num;
 8007860:	4240      	negs	r0, r0
 8007862:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
 8007866:	7893      	ldrb	r3, [r2, #2]
 8007868:	f043 0301 	orr.w	r3, r3, #1
 800786c:	7093      	strb	r3, [r2, #2]
 800786e:	e7f4      	b.n	800785a <i2a+0xa>

08007870 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
 8007870:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b09      	cmp	r3, #9
 8007878:	d90b      	bls.n	8007892 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
 800787a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b05      	cmp	r3, #5
 8007882:	d908      	bls.n	8007896 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
 8007884:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b05      	cmp	r3, #5
 800788c:	d805      	bhi.n	800789a <a2d+0x2a>
        return ch - 'A' + 10;
 800788e:	3837      	subs	r0, #55	; 0x37
 8007890:	4770      	bx	lr
        return ch - '0';
 8007892:	3830      	subs	r0, #48	; 0x30
 8007894:	4770      	bx	lr
        return ch - 'a' + 10;
 8007896:	3857      	subs	r0, #87	; 0x57
 8007898:	4770      	bx	lr
    else
        return -1;
 800789a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800789e:	4770      	bx	lr

080078a0 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
 80078a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a4:	4605      	mov	r5, r0
 80078a6:	4688      	mov	r8, r1
 80078a8:	4617      	mov	r7, r2
 80078aa:	4699      	mov	r9, r3
    const char *p = *src;
 80078ac:	680c      	ldr	r4, [r1, #0]
    int num = 0;
 80078ae:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
 80078b0:	4628      	mov	r0, r5
 80078b2:	f7ff ffdd 	bl	8007870 <a2d>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	db06      	blt.n	80078c8 <a2i+0x28>
        if (digit > base)
 80078ba:	42b8      	cmp	r0, r7
 80078bc:	dc04      	bgt.n	80078c8 <a2i+0x28>
            break;
        num = num * base + digit;
 80078be:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
 80078c2:	7825      	ldrb	r5, [r4, #0]
 80078c4:	3401      	adds	r4, #1
 80078c6:	e7f3      	b.n	80078b0 <a2i+0x10>
    }
    *src = p;
 80078c8:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
 80078cc:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
 80078d0:	4628      	mov	r0, r5
 80078d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080078d6 <putf>:

static int putf(FILE *putp, char c)
{
 80078d6:	b500      	push	{lr}
 80078d8:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
 80078da:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
 80078de:	6803      	ldr	r3, [r0, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	b14b      	cbz	r3, 80078f8 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
 80078e4:	2201      	movs	r2, #1
 80078e6:	f10d 0107 	add.w	r1, sp, #7
 80078ea:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
 80078ec:	2801      	cmp	r0, #1
 80078ee:	d005      	beq.n	80078fc <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
 80078f0:	2000      	movs	r0, #0
    else
        return 1;
}
 80078f2:	b003      	add	sp, #12
 80078f4:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
 80078f8:	2000      	movs	r0, #0
 80078fa:	e7fa      	b.n	80078f2 <putf+0x1c>
        return 1;
 80078fc:	2001      	movs	r0, #1
 80078fe:	e7f8      	b.n	80078f2 <putf+0x1c>

08007900 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
 8007900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007904:	4606      	mov	r6, r0
 8007906:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
 8007908:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
 800790a:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
 800790c:	e001      	b.n	8007912 <putchw+0x12>
        n--;
 800790e:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
 8007910:	4613      	mov	r3, r2
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	b10b      	cbz	r3, 800791c <putchw+0x1c>
 8007918:	2c00      	cmp	r4, #0
 800791a:	dcf8      	bgt.n	800790e <putchw+0xe>
    if (p->sign)
 800791c:	78bb      	ldrb	r3, [r7, #2]
 800791e:	f013 0f01 	tst.w	r3, #1
 8007922:	d000      	beq.n	8007926 <putchw+0x26>
        n--;
 8007924:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
 8007926:	887b      	ldrh	r3, [r7, #2]
 8007928:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
 800792c:	b29b      	uxth	r3, r3
 800792e:	f241 0202 	movw	r2, #4098	; 0x1002
 8007932:	4293      	cmp	r3, r2
 8007934:	d01c      	beq.n	8007970 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
 8007936:	f640 0202 	movw	r2, #2050	; 0x802
 800793a:	4293      	cmp	r3, r2
 800793c:	d01a      	beq.n	8007974 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	4d35      	ldr	r5, [pc, #212]	; (8007a18 <putchw+0x118>)
 8007942:	401d      	ands	r5, r3
 8007944:	b1f5      	cbz	r5, 8007984 <putchw+0x84>
    unsigned written = 0;
 8007946:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
 8007948:	78bb      	ldrb	r3, [r7, #2]
 800794a:	f013 0f01 	tst.w	r3, #1
 800794e:	d11f      	bne.n	8007990 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
 8007950:	887b      	ldrh	r3, [r7, #2]
 8007952:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
 8007956:	b29b      	uxth	r3, r3
 8007958:	f241 0202 	movw	r2, #4098	; 0x1002
 800795c:	4293      	cmp	r3, r2
 800795e:	d01d      	beq.n	800799c <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
 8007960:	f640 0202 	movw	r2, #2050	; 0x802
 8007964:	4293      	cmp	r3, r2
 8007966:	d02a      	beq.n	80079be <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
 8007968:	787b      	ldrb	r3, [r7, #1]
 800796a:	bba3      	cbnz	r3, 80079d6 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
 800796c:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
 800796e:	e03d      	b.n	80079ec <putchw+0xec>
        n -= 2;
 8007970:	3c02      	subs	r4, #2
 8007972:	e7e4      	b.n	800793e <putchw+0x3e>
        n--;
 8007974:	3c01      	subs	r4, #1
 8007976:	e7e2      	b.n	800793e <putchw+0x3e>
            written += putf(putp, ' ');
 8007978:	2120      	movs	r1, #32
 800797a:	4630      	mov	r0, r6
 800797c:	f7ff ffab 	bl	80078d6 <putf>
 8007980:	4405      	add	r5, r0
        while (n-- > 0)
 8007982:	4644      	mov	r4, r8
 8007984:	f104 38ff 	add.w	r8, r4, #4294967295
 8007988:	2c00      	cmp	r4, #0
 800798a:	dcf5      	bgt.n	8007978 <putchw+0x78>
 800798c:	4644      	mov	r4, r8
 800798e:	e7db      	b.n	8007948 <putchw+0x48>
        written += putf(putp, '-');
 8007990:	212d      	movs	r1, #45	; 0x2d
 8007992:	4630      	mov	r0, r6
 8007994:	f7ff ff9f 	bl	80078d6 <putf>
 8007998:	4405      	add	r5, r0
 800799a:	e7d9      	b.n	8007950 <putchw+0x50>
        written += putf(putp, '0');
 800799c:	2130      	movs	r1, #48	; 0x30
 800799e:	4630      	mov	r0, r6
 80079a0:	f7ff ff99 	bl	80078d6 <putf>
 80079a4:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
 80079a6:	78bb      	ldrb	r3, [r7, #2]
 80079a8:	f013 0f04 	tst.w	r3, #4
 80079ac:	d005      	beq.n	80079ba <putchw+0xba>
 80079ae:	2158      	movs	r1, #88	; 0x58
 80079b0:	4630      	mov	r0, r6
 80079b2:	f7ff ff90 	bl	80078d6 <putf>
 80079b6:	4405      	add	r5, r0
 80079b8:	e7d6      	b.n	8007968 <putchw+0x68>
 80079ba:	2178      	movs	r1, #120	; 0x78
 80079bc:	e7f8      	b.n	80079b0 <putchw+0xb0>
        written += putf(putp, '0');
 80079be:	2130      	movs	r1, #48	; 0x30
 80079c0:	4630      	mov	r0, r6
 80079c2:	f7ff ff88 	bl	80078d6 <putf>
 80079c6:	4405      	add	r5, r0
 80079c8:	e7ce      	b.n	8007968 <putchw+0x68>
            written += putf(putp, '0');
 80079ca:	2130      	movs	r1, #48	; 0x30
 80079cc:	4630      	mov	r0, r6
 80079ce:	f7ff ff82 	bl	80078d6 <putf>
 80079d2:	4405      	add	r5, r0
        while (n-- > 0)
 80079d4:	4644      	mov	r4, r8
 80079d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80079da:	2c00      	cmp	r4, #0
 80079dc:	dcf5      	bgt.n	80079ca <putchw+0xca>
 80079de:	4644      	mov	r4, r8
 80079e0:	e7c4      	b.n	800796c <putchw+0x6c>
        written += putf(putp, ch);
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7ff ff77 	bl	80078d6 <putf>
 80079e8:	4405      	add	r5, r0
    while ((ch = *bf++))
 80079ea:	4643      	mov	r3, r8
 80079ec:	f103 0801 	add.w	r8, r3, #1
 80079f0:	7819      	ldrb	r1, [r3, #0]
 80079f2:	2900      	cmp	r1, #0
 80079f4:	d1f5      	bne.n	80079e2 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
 80079f6:	78bb      	ldrb	r3, [r7, #2]
 80079f8:	f013 0f08 	tst.w	r3, #8
 80079fc:	d106      	bne.n	8007a0c <putchw+0x10c>
 80079fe:	e008      	b.n	8007a12 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
 8007a00:	2120      	movs	r1, #32
 8007a02:	4630      	mov	r0, r6
 8007a04:	f7ff ff67 	bl	80078d6 <putf>
 8007a08:	4405      	add	r5, r0
        while (n-- > 0)
 8007a0a:	463c      	mov	r4, r7
 8007a0c:	1e67      	subs	r7, r4, #1
 8007a0e:	2c00      	cmp	r4, #0
 8007a10:	dcf6      	bgt.n	8007a00 <putchw+0x100>
    }
    
    return written;
}
 8007a12:	4628      	mov	r0, r5
 8007a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a18:	0008ff00 	.word	0x0008ff00

08007a1c <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
 8007a1c:	b160      	cbz	r0, 8007a38 <intarg+0x1c>
 8007a1e:	2801      	cmp	r0, #1
 8007a20:	d017      	beq.n	8007a52 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
 8007a22:	bb19      	cbnz	r1, 8007a6c <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
 8007a24:	6813      	ldr	r3, [r2, #0]
 8007a26:	3307      	adds	r3, #7
 8007a28:	f023 0307 	bic.w	r3, r3, #7
 8007a2c:	f103 0108 	add.w	r1, r3, #8
 8007a30:	6011      	str	r1, [r2, #0]
 8007a32:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
 8007a36:	4770      	bx	lr
        if (sign) {
 8007a38:	b129      	cbz	r1, 8007a46 <intarg+0x2a>
            val = va_arg(*va, int);
 8007a3a:	6813      	ldr	r3, [r2, #0]
 8007a3c:	1d19      	adds	r1, r3, #4
 8007a3e:	6011      	str	r1, [r2, #0]
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	17c1      	asrs	r1, r0, #31
 8007a44:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
 8007a46:	6813      	ldr	r3, [r2, #0]
 8007a48:	1d19      	adds	r1, r3, #4
 8007a4a:	6011      	str	r1, [r2, #0]
 8007a4c:	6818      	ldr	r0, [r3, #0]
 8007a4e:	2100      	movs	r1, #0
 8007a50:	4770      	bx	lr
        if (sign) {
 8007a52:	b129      	cbz	r1, 8007a60 <intarg+0x44>
            val = va_arg(*va, long);
 8007a54:	6813      	ldr	r3, [r2, #0]
 8007a56:	1d19      	adds	r1, r3, #4
 8007a58:	6011      	str	r1, [r2, #0]
 8007a5a:	6818      	ldr	r0, [r3, #0]
 8007a5c:	17c1      	asrs	r1, r0, #31
 8007a5e:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
 8007a60:	6813      	ldr	r3, [r2, #0]
 8007a62:	1d19      	adds	r1, r3, #4
 8007a64:	6011      	str	r1, [r2, #0]
 8007a66:	6818      	ldr	r0, [r3, #0]
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4770      	bx	lr
            val = va_arg(*va, long long);
 8007a6c:	6813      	ldr	r3, [r2, #0]
 8007a6e:	3307      	adds	r3, #7
 8007a70:	f023 0307 	bic.w	r3, r3, #7
 8007a74:	f103 0108 	add.w	r1, r3, #8
 8007a78:	6011      	str	r1, [r2, #0]
 8007a7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a7e:	4770      	bx	lr

08007a80 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	b08a      	sub	sp, #40	; 0x28
 8007a84:	4605      	mov	r5, r0
 8007a86:	9101      	str	r1, [sp, #4]
 8007a88:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
 8007a8a:	ab02      	add	r3, sp, #8
 8007a8c:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
 8007a8e:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
 8007a90:	9b01      	ldr	r3, [sp, #4]
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	9201      	str	r2, [sp, #4]
 8007a96:	7819      	ldrb	r1, [r3, #0]
 8007a98:	2900      	cmp	r1, #0
 8007a9a:	f000 811c 	beq.w	8007cd6 <tfp_format+0x256>
        if (ch != '%') {
 8007a9e:	2925      	cmp	r1, #37	; 0x25
 8007aa0:	d004      	beq.n	8007aac <tfp_format+0x2c>
            written += putf(putp, ch);
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f7ff ff17 	bl	80078d6 <putf>
 8007aa8:	4404      	add	r4, r0
 8007aaa:	e7f1      	b.n	8007a90 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
 8007aac:	2200      	movs	r2, #0
 8007aae:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
 8007ab2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
 8007ab6:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
 8007aba:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 8007abe:	f362 0382 	bfi	r3, r2, #2, #1
 8007ac2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
 8007ac6:	9b01      	ldr	r3, [sp, #4]
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	9201      	str	r2, [sp, #4]
 8007acc:	7818      	ldrb	r0, [r3, #0]
 8007ace:	b128      	cbz	r0, 8007adc <tfp_format+0x5c>
                switch (ch) {
 8007ad0:	282d      	cmp	r0, #45	; 0x2d
 8007ad2:	d04e      	beq.n	8007b72 <tfp_format+0xf2>
 8007ad4:	2830      	cmp	r0, #48	; 0x30
 8007ad6:	d03c      	beq.n	8007b52 <tfp_format+0xd2>
 8007ad8:	2823      	cmp	r0, #35	; 0x23
 8007ada:	d043      	beq.n	8007b64 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
 8007adc:	282a      	cmp	r0, #42	; 0x2a
 8007ade:	d052      	beq.n	8007b86 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
 8007ae0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	2b09      	cmp	r3, #9
 8007ae8:	d961      	bls.n	8007bae <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
 8007aea:	286c      	cmp	r0, #108	; 0x6c
 8007aec:	d065      	beq.n	8007bba <tfp_format+0x13a>
            lng = 0;
 8007aee:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
 8007af0:	287a      	cmp	r0, #122	; 0x7a
 8007af2:	d06f      	beq.n	8007bd4 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
 8007af4:	2869      	cmp	r0, #105	; 0x69
 8007af6:	f000 808e 	beq.w	8007c16 <tfp_format+0x196>
 8007afa:	d970      	bls.n	8007bde <tfp_format+0x15e>
 8007afc:	2873      	cmp	r0, #115	; 0x73
 8007afe:	f000 80dd 	beq.w	8007cbc <tfp_format+0x23c>
 8007b02:	f200 8099 	bhi.w	8007c38 <tfp_format+0x1b8>
 8007b06:	286f      	cmp	r0, #111	; 0x6f
 8007b08:	f000 80c7 	beq.w	8007c9a <tfp_format+0x21a>
 8007b0c:	2870      	cmp	r0, #112	; 0x70
 8007b0e:	d1bf      	bne.n	8007a90 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
 8007b10:	9b00      	ldr	r3, [sp, #0]
 8007b12:	1d1a      	adds	r2, r3, #4
 8007b14:	9200      	str	r2, [sp, #0]
 8007b16:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
 8007b18:	2310      	movs	r3, #16
 8007b1a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
 8007b1e:	aa08      	add	r2, sp, #32
 8007b20:	2100      	movs	r1, #0
 8007b22:	f7ff fe35 	bl	8007790 <ui2a>
                p.width = 2 * sizeof(void*);
 8007b26:	2308      	movs	r3, #8
 8007b28:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
 8007b32:	2130      	movs	r1, #48	; 0x30
 8007b34:	4628      	mov	r0, r5
 8007b36:	f7ff fece 	bl	80078d6 <putf>
 8007b3a:	4404      	add	r4, r0
                written += putf(putp, 'x');
 8007b3c:	2178      	movs	r1, #120	; 0x78
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f7ff fec9 	bl	80078d6 <putf>
 8007b44:	4404      	add	r4, r0
                written += putchw(putp, &p);
 8007b46:	a908      	add	r1, sp, #32
 8007b48:	4628      	mov	r0, r5
 8007b4a:	f7ff fed9 	bl	8007900 <putchw>
 8007b4e:	4404      	add	r4, r0
                break;
 8007b50:	e79e      	b.n	8007a90 <tfp_format+0x10>
                    if (!p.left) {
 8007b52:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8007b56:	f013 0f08 	tst.w	r3, #8
 8007b5a:	d1b4      	bne.n	8007ac6 <tfp_format+0x46>
                        p.lz = 1;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
 8007b62:	e7b0      	b.n	8007ac6 <tfp_format+0x46>
                    p.alt = 1;
 8007b64:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8007b68:	f043 0302 	orr.w	r3, r3, #2
 8007b6c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
 8007b70:	e7a9      	b.n	8007ac6 <tfp_format+0x46>
                    p.left = 1;
 8007b72:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8007b76:	f043 0308 	orr.w	r3, r3, #8
 8007b7a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
 8007b84:	e79f      	b.n	8007ac6 <tfp_format+0x46>
                i = intarg(0, 1, &va);
 8007b86:	466a      	mov	r2, sp
 8007b88:	2101      	movs	r1, #1
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	f7ff ff46 	bl	8007a1c <intarg>
                if (i > UCHAR_MAX) {
 8007b90:	28ff      	cmp	r0, #255	; 0xff
 8007b92:	dd07      	ble.n	8007ba4 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
 8007b94:	23ff      	movs	r3, #255	; 0xff
 8007b96:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
 8007b9a:	9b01      	ldr	r3, [sp, #4]
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	9201      	str	r2, [sp, #4]
 8007ba0:	7818      	ldrb	r0, [r3, #0]
 8007ba2:	e7a2      	b.n	8007aea <tfp_format+0x6a>
                } else if (i > 0) {
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	ddf8      	ble.n	8007b9a <tfp_format+0x11a>
                    p.width = i;
 8007ba8:	f88d 0020 	strb.w	r0, [sp, #32]
 8007bac:	e7f5      	b.n	8007b9a <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
 8007bae:	ab08      	add	r3, sp, #32
 8007bb0:	220a      	movs	r2, #10
 8007bb2:	a901      	add	r1, sp, #4
 8007bb4:	f7ff fe74 	bl	80078a0 <a2i>
 8007bb8:	e797      	b.n	8007aea <tfp_format+0x6a>
                ch = *(fmt++);
 8007bba:	9b01      	ldr	r3, [sp, #4]
 8007bbc:	1c5a      	adds	r2, r3, #1
 8007bbe:	9201      	str	r2, [sp, #4]
 8007bc0:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
 8007bc2:	286c      	cmp	r0, #108	; 0x6c
 8007bc4:	d001      	beq.n	8007bca <tfp_format+0x14a>
                lng = 1;
 8007bc6:	2601      	movs	r6, #1
 8007bc8:	e792      	b.n	8007af0 <tfp_format+0x70>
                    ch = *(fmt++);
 8007bca:	1c9a      	adds	r2, r3, #2
 8007bcc:	9201      	str	r2, [sp, #4]
 8007bce:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
 8007bd0:	2602      	movs	r6, #2
 8007bd2:	e78d      	b.n	8007af0 <tfp_format+0x70>
                ch = *(fmt++);
 8007bd4:	9b01      	ldr	r3, [sp, #4]
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	9201      	str	r2, [sp, #4]
 8007bda:	7818      	ldrb	r0, [r3, #0]
 8007bdc:	e78a      	b.n	8007af4 <tfp_format+0x74>
            switch (ch) {
 8007bde:	2858      	cmp	r0, #88	; 0x58
 8007be0:	d040      	beq.n	8007c64 <tfp_format+0x1e4>
 8007be2:	d80a      	bhi.n	8007bfa <tfp_format+0x17a>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d076      	beq.n	8007cd6 <tfp_format+0x256>
 8007be8:	2825      	cmp	r0, #37	; 0x25
 8007bea:	f47f af51 	bne.w	8007a90 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
 8007bee:	4601      	mov	r1, r0
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f7ff fe70 	bl	80078d6 <putf>
 8007bf6:	4404      	add	r4, r0
                break;
 8007bf8:	e74a      	b.n	8007a90 <tfp_format+0x10>
            switch (ch) {
 8007bfa:	2863      	cmp	r0, #99	; 0x63
 8007bfc:	d108      	bne.n	8007c10 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
 8007bfe:	9b00      	ldr	r3, [sp, #0]
 8007c00:	1d1a      	adds	r2, r3, #4
 8007c02:	9200      	str	r2, [sp, #0]
 8007c04:	7819      	ldrb	r1, [r3, #0]
 8007c06:	4628      	mov	r0, r5
 8007c08:	f7ff fe65 	bl	80078d6 <putf>
 8007c0c:	4404      	add	r4, r0
                break;
 8007c0e:	e73f      	b.n	8007a90 <tfp_format+0x10>
            switch (ch) {
 8007c10:	2864      	cmp	r0, #100	; 0x64
 8007c12:	f47f af3d 	bne.w	8007a90 <tfp_format+0x10>
                p.base = 10;
 8007c16:	230a      	movs	r3, #10
 8007c18:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
 8007c1c:	466a      	mov	r2, sp
 8007c1e:	2101      	movs	r1, #1
 8007c20:	4630      	mov	r0, r6
 8007c22:	f7ff fefb 	bl	8007a1c <intarg>
 8007c26:	aa08      	add	r2, sp, #32
 8007c28:	f7ff fe12 	bl	8007850 <i2a>
                written += putchw(putp, &p);
 8007c2c:	a908      	add	r1, sp, #32
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f7ff fe66 	bl	8007900 <putchw>
 8007c34:	4404      	add	r4, r0
                break;
 8007c36:	e72b      	b.n	8007a90 <tfp_format+0x10>
            switch (ch) {
 8007c38:	2875      	cmp	r0, #117	; 0x75
 8007c3a:	d110      	bne.n	8007c5e <tfp_format+0x1de>
                p.base = 10;
 8007c3c:	230a      	movs	r3, #10
 8007c3e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
 8007c42:	466a      	mov	r2, sp
 8007c44:	2100      	movs	r1, #0
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7ff fee8 	bl	8007a1c <intarg>
 8007c4c:	aa08      	add	r2, sp, #32
 8007c4e:	f7ff fd9f 	bl	8007790 <ui2a>
                written += putchw(putp, &p);
 8007c52:	a908      	add	r1, sp, #32
 8007c54:	4628      	mov	r0, r5
 8007c56:	f7ff fe53 	bl	8007900 <putchw>
 8007c5a:	4404      	add	r4, r0
                break;
 8007c5c:	e718      	b.n	8007a90 <tfp_format+0x10>
            switch (ch) {
 8007c5e:	2878      	cmp	r0, #120	; 0x78
 8007c60:	f47f af16 	bne.w	8007a90 <tfp_format+0x10>
                p.base = 16;
 8007c64:	2310      	movs	r3, #16
 8007c66:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
 8007c6a:	2858      	cmp	r0, #88	; 0x58
 8007c6c:	bf14      	ite	ne
 8007c6e:	2300      	movne	r3, #0
 8007c70:	2301      	moveq	r3, #1
 8007c72:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 8007c76:	f363 0282 	bfi	r2, r3, #2, #1
 8007c7a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
 8007c7e:	466a      	mov	r2, sp
 8007c80:	2100      	movs	r1, #0
 8007c82:	4630      	mov	r0, r6
 8007c84:	f7ff feca 	bl	8007a1c <intarg>
 8007c88:	aa08      	add	r2, sp, #32
 8007c8a:	f7ff fd81 	bl	8007790 <ui2a>
                written += putchw(putp, &p);
 8007c8e:	a908      	add	r1, sp, #32
 8007c90:	4628      	mov	r0, r5
 8007c92:	f7ff fe35 	bl	8007900 <putchw>
 8007c96:	4404      	add	r4, r0
                break;
 8007c98:	e6fa      	b.n	8007a90 <tfp_format+0x10>
                p.base = 8;
 8007c9a:	2308      	movs	r3, #8
 8007c9c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
 8007ca0:	466a      	mov	r2, sp
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f7ff feb9 	bl	8007a1c <intarg>
 8007caa:	aa08      	add	r2, sp, #32
 8007cac:	f7ff fd70 	bl	8007790 <ui2a>
                written += putchw(putp, &p);
 8007cb0:	a908      	add	r1, sp, #32
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f7ff fe24 	bl	8007900 <putchw>
 8007cb8:	4404      	add	r4, r0
                break;
 8007cba:	e6e9      	b.n	8007a90 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	1d1a      	adds	r2, r3, #4
 8007cc0:	9200      	str	r2, [sp, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
 8007cc6:	a908      	add	r1, sp, #32
 8007cc8:	4628      	mov	r0, r5
 8007cca:	f7ff fe19 	bl	8007900 <putchw>
 8007cce:	4404      	add	r4, r0
                p.bf = bf;
 8007cd0:	ab02      	add	r3, sp, #8
 8007cd2:	9309      	str	r3, [sp, #36]	; 0x24
                break;
 8007cd4:	e6dc      	b.n	8007a90 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	b00a      	add	sp, #40	; 0x28
 8007cda:	bd70      	pop	{r4, r5, r6, pc}

08007cdc <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
 8007cdc:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
 8007cde:	f7ff fecf 	bl	8007a80 <tfp_format>
}
 8007ce2:	bd08      	pop	{r3, pc}

08007ce4 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
 8007ce4:	b40f      	push	{r0, r1, r2, r3}
 8007ce6:	b500      	push	{lr}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	aa04      	add	r2, sp, #16
 8007cec:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
 8007cf0:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
 8007cf2:	4b04      	ldr	r3, [pc, #16]	; (8007d04 <printf+0x20>)
 8007cf4:	6818      	ldr	r0, [r3, #0]
 8007cf6:	f7ff fff1 	bl	8007cdc <vfprintf>
    va_end(va);
    return rv;
}
 8007cfa:	b003      	add	sp, #12
 8007cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d00:	b004      	add	sp, #16
 8007d02:	4770      	bx	lr
 8007d04:	0800f630 	.word	0x0800f630

08007d08 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
 8007d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	4616      	mov	r6, r2
 8007d12:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
 8007d14:	460a      	mov	r2, r1
 8007d16:	4601      	mov	r1, r0
 8007d18:	4668      	mov	r0, sp
 8007d1a:	f000 f861 	bl	8007de0 <fmemopen_w>
    tfp_format(f, fmt, va);
 8007d1e:	463a      	mov	r2, r7
 8007d20:	4631      	mov	r1, r6
 8007d22:	f7ff fead 	bl	8007a80 <tfp_format>
    if (size > 0) {
 8007d26:	b12c      	cbz	r4, 8007d34 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
 8007d28:	9b02      	ldr	r3, [sp, #8]
 8007d2a:	42a3      	cmp	r3, r4
 8007d2c:	d305      	bcc.n	8007d3a <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
 8007d2e:	3c01      	subs	r4, #1
 8007d30:	2300      	movs	r3, #0
 8007d32:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
 8007d34:	9802      	ldr	r0, [sp, #8]
 8007d36:	b005      	add	sp, #20
 8007d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
 8007d3a:	9b01      	ldr	r3, [sp, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	701a      	strb	r2, [r3, #0]
 8007d40:	e7f8      	b.n	8007d34 <vsnprintf+0x2c>
	...

08007d44 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
 8007d44:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
 8007d46:	460a      	mov	r2, r1
 8007d48:	4601      	mov	r1, r0
 8007d4a:	4b02      	ldr	r3, [pc, #8]	; (8007d54 <vprintf+0x10>)
 8007d4c:	6818      	ldr	r0, [r3, #0]
 8007d4e:	f7ff ffc5 	bl	8007cdc <vfprintf>
}
 8007d52:	bd08      	pop	{r3, pc}
 8007d54:	0800f630 	.word	0x0800f630

08007d58 <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
 8007d58:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
 8007d5c:	4601      	mov	r1, r0
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
 8007d5e:	f8b0 b000 	ldrh.w	fp, [r0]
 8007d62:	f04f 0c00 	mov.w	ip, #0
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
 8007d66:	8846      	ldrh	r6, [r0, #2]
 8007d68:	0c35      	lsrs	r5, r6, #16
 8007d6a:	0434      	lsls	r4, r6, #16
	x = (uint64_t) (uint16_t) xsubi[0] +
 8007d6c:	eb1b 0204 	adds.w	r2, fp, r4
 8007d70:	eb4c 0305 	adc.w	r3, ip, r5
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
 8007d74:	2400      	movs	r4, #0
 8007d76:	8885      	ldrh	r5, [r0, #4]
	x = (uint64_t) (uint16_t) xsubi[0] +
 8007d78:	1916      	adds	r6, r2, r4
 8007d7a:	eb43 0705 	adc.w	r7, r3, r5

	x = (0x5deece66dULL * x) + 0xb;
 8007d7e:	4c0b      	ldr	r4, [pc, #44]	; (8007dac <jrand48+0x54>)
 8007d80:	2005      	movs	r0, #5
 8007d82:	fb00 f006 	mul.w	r0, r0, r6
 8007d86:	fb04 0007 	mla	r0, r4, r7, r0
 8007d8a:	fba6 2304 	umull	r2, r3, r6, r4
 8007d8e:	4403      	add	r3, r0
 8007d90:	f112 040b 	adds.w	r4, r2, #11
 8007d94:	f143 0500 	adc.w	r5, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
 8007d98:	800c      	strh	r4, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
 8007d9a:	0c20      	lsrs	r0, r4, #16
 8007d9c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8007da0:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
 8007da2:	808d      	strh	r5, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
 8007da4:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	deece66d 	.word	0xdeece66d

08007db0 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
 8007db0:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
 8007db2:	2500      	movs	r5, #0
    
    while (n--)
 8007db4:	e000      	b.n	8007db8 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
 8007db6:	4622      	mov	r2, r4
    while (n--)
 8007db8:	1e54      	subs	r4, r2, #1
 8007dba:	b16a      	cbz	r2, 8007dd8 <memfile_write+0x28>
        f->bytes_written++;
 8007dbc:	6883      	ldr	r3, [r0, #8]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
 8007dc2:	68c2      	ldr	r2, [r0, #12]
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d8f6      	bhi.n	8007db6 <memfile_write+0x6>
            *f->buffer++ = *bp++;
 8007dc8:	6843      	ldr	r3, [r0, #4]
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	6042      	str	r2, [r0, #4]
 8007dce:	780a      	ldrb	r2, [r1, #0]
 8007dd0:	701a      	strb	r2, [r3, #0]
            i++;
 8007dd2:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
 8007dd4:	3101      	adds	r1, #1
 8007dd6:	e7ee      	b.n	8007db6 <memfile_write+0x6>
        }
    }
    
    return i;
}
 8007dd8:	4628      	mov	r0, r5
 8007dda:	bc30      	pop	{r4, r5}
 8007ddc:	4770      	bx	lr
	...

08007de0 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
 8007de0:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
 8007de2:	4c04      	ldr	r4, [pc, #16]	; (8007df4 <fmemopen_w+0x14>)
 8007de4:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
 8007de6:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
 8007de8:	2100      	movs	r1, #0
 8007dea:	6081      	str	r1, [r0, #8]
    storage->size = size;
 8007dec:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
 8007dee:	bc10      	pop	{r4}
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	0800f628 	.word	0x0800f628

08007df8 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
 8007df8:	2000      	movs	r0, #0
 8007dfa:	4770      	bx	lr

08007dfc <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
 8007dfc:	b510      	push	{r4, lr}
 8007dfe:	4608      	mov	r0, r1
 8007e00:	4614      	mov	r4, r2
    console_write(bp, n);
 8007e02:	4611      	mov	r1, r2
 8007e04:	f7fc f890 	bl	8003f28 <console_write>
    return n;
}
 8007e08:	4620      	mov	r0, r4
 8007e0a:	bd10      	pop	{r4, pc}

08007e0c <__wrap_os_tick_idle>:
extern void power_init(uint32_t os_ticks_per_sec, uint32_t reload_val, int prio);
extern void power_sleep(os_time_t ticks);

void
__wrap_os_tick_idle(os_time_t ticks)
{
 8007e0c:	b510      	push	{r4, lr}
 8007e0e:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
 8007e10:	f7fd ff27 	bl	8005c62 <os_arch_in_critical>
 8007e14:	b118      	cbz	r0, 8007e1e <__wrap_os_tick_idle+0x12>
#ifdef LOW_POWER
    //  Sleep for the number of ticks.
    power_sleep(ticks);
 8007e16:	4620      	mov	r0, r4
 8007e18:	f000 f872 	bl	8007f00 <power_sleep>
    //  console_buffer(".", 1);
    //  console_printhex(ticks);
    __DSB();
    __WFI();
#endif  //  LOW_POWER
}
 8007e1c:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
 8007e1e:	2300      	movs	r3, #0
 8007e20:	461a      	mov	r2, r3
 8007e22:	4619      	mov	r1, r3
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fd ffe5 	bl	8005df4 <__assert_func>
	...

08007e2c <__wrap_os_tick_init>:

void
__wrap_os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
 8007e2c:	b508      	push	{r3, lr}
    uint32_t reload_val;

    reload_val = ((uint64_t)SystemCoreClock / os_ticks_per_sec) - 1;
 8007e2e:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <__wrap_os_tick_init+0x14>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	fbb3 f3f0 	udiv	r3, r3, r0

#ifdef LOW_POWER
    //  Init the power management.
    power_init(os_ticks_per_sec, reload_val, prio);
 8007e36:	460a      	mov	r2, r1
 8007e38:	1e59      	subs	r1, r3, #1
 8007e3a:	f000 f8f1 	bl	8008020 <power_init>
    DBGMCU->CR |= (DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
#else
    DBGMCU->CR |= (DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
#endif
#endif  //  LOW_POWER
}
 8007e3e:	bd08      	pop	{r3, pc}
 8007e40:	20000110 	.word	0x20000110

08007e44 <target_enter_sleep_mode>:
void target_enter_sleep_mode(void) {
    //  To enter Sleep Now Mode: WFI (Wait for Interrupt) or WFE (Wait for Event) while:
    //  – SLEEPDEEP = 0 and
    //  – SLEEPONEXIT = 0 
    //  Assume caller has set RTC Wakeup Alarm.
    _CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);    //  Clear SLEEPDEEP bit of Cortex System Control Register.
 8007e44:	4b06      	ldr	r3, [pc, #24]	; (8007e60 <target_enter_sleep_mode+0x1c>)
 8007e46:	691a      	ldr	r2, [r3, #16]
 8007e48:	f022 0204 	bic.w	r2, r2, #4
 8007e4c:	611a      	str	r2, [r3, #16]
    _CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);  //  Clear SLEEPONEXIT bit of Cortex System Control Register.
 8007e4e:	691a      	ldr	r2, [r3, #16]
 8007e50:	f022 0202 	bic.w	r2, r2, #2
 8007e54:	611a      	str	r2, [r3, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007e56:	f3bf 8f4f 	dsb	sy
    __DSB();
    __WFI();  //  Wait for interrupt from RTC Alarm.
 8007e5a:	bf30      	wfi
}
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	e000ed00 	.word	0xe000ed00

08007e64 <target_enter_deep_sleep_standby_mode>:
    _SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);        //  Set SLEEPDEEP bit of Cortex System Control Register.
    __DSB();
    __WFI();  //  Wait for interrupt from RTC Alarm.
}

void target_enter_deep_sleep_standby_mode(void) {
 8007e64:	b508      	push	{r3, lr}
    //  – Set PDDS bit in Power Control register (PWR_CR)
    //  – Clear WUF bit in Power Control/Status register (PWR_CSR)
    //  – No interrupt (for WFI) or event (for WFI) is pending
    //  Assume caller has set RTC Wakeup Alarm.

    pwr_set_standby_mode();   //  Set PWR_CR_PDDS.
 8007e66:	f000 f909 	bl	800807c <pwr_set_standby_mode>
    pwr_clear_wakeup_flag();  //  Clear WUF.    
 8007e6a:	f000 f8ff 	bl	800806c <pwr_clear_wakeup_flag>
    _SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);  //  Set SLEEPDEEP bit of Cortex System Control Register.
 8007e6e:	4a04      	ldr	r2, [pc, #16]	; (8007e80 <target_enter_deep_sleep_standby_mode+0x1c>)
 8007e70:	6913      	ldr	r3, [r2, #16]
 8007e72:	f043 0304 	orr.w	r3, r3, #4
 8007e76:	6113      	str	r3, [r2, #16]
 8007e78:	f3bf 8f4f 	dsb	sy
    __DSB();
    __WFI();  //  Wait for interrupt from RTC Alarm.
 8007e7c:	bf30      	wfi
}
 8007e7e:	bd08      	pop	{r3, pc}
 8007e80:	e000ed00 	.word	0xe000ed00

08007e84 <power_sync_time>:

void power_sync_time() {
 8007e84:	b500      	push	{lr}
 8007e86:	b083      	sub	sp, #12
    //  Sync the OS time to the RTC time.  Warning: This function must be safe to be called from an interrupt handler.

    //  Compute the ticks elapsed.
    volatile uint32_t now = rtc_get_counter_val();
 8007e88:	f000 fa1e 	bl	80082c8 <rtc_get_counter_val>
 8007e8c:	9001      	str	r0, [sp, #4]
    int diff_ticks = now - g_os_time;
 8007e8e:	9801      	ldr	r0, [sp, #4]
 8007e90:	4b04      	ldr	r3, [pc, #16]	; (8007ea4 <power_sync_time+0x20>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	1ac0      	subs	r0, r0, r3

    //  If ticks elapsed is above 0, update the OS clock.
    if (diff_ticks <= 0) { return; }
 8007e96:	2800      	cmp	r0, #0
 8007e98:	dd01      	ble.n	8007e9e <power_sync_time+0x1a>
    os_time_advance(diff_ticks);
 8007e9a:	f7ff fa89 	bl	80073b0 <os_time_advance>
}
 8007e9e:	b003      	add	sp, #12
 8007ea0:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ea4:	20002f28 	.word	0x20002f28

08007ea8 <power_timer_tick>:

void power_timer_tick() {
 8007ea8:	b508      	push	{r3, lr}
    //  This is called every millisecond.
    //  Warning: This is called from an interrupt handler.
    power_sync_time();
 8007eaa:	f7ff ffeb 	bl	8007e84 <power_sync_time>
}
 8007eae:	bd08      	pop	{r3, pc}

08007eb0 <power_timer_alarm>:

void power_timer_alarm() {
 8007eb0:	b508      	push	{r3, lr}
    //  This is called when the Real-Time Clock alarm is triggered.
    //  Warning: This is called from an interrupt handler.
    power_sync_time();
 8007eb2:	f7ff ffe7 	bl	8007e84 <power_sync_time>
}
 8007eb6:	bd08      	pop	{r3, pc}

08007eb8 <power_standby_wakeup>:
#define __HAL_PWR_GET_FLAG(__FLAG__) ((PWR->CSR & (__FLAG__)) == (__FLAG__))
#define __HAL_PWR_CLEAR_FLAG(__FLAG__) SET_BIT(PWR->CR, ((__FLAG__) << 2))
#define PWR_FLAG_WU                     PWR_CSR_WUF
#define PWR_FLAG_SB                     PWR_CSR_SBF

int power_standby_wakeup(void) {
 8007eb8:	b508      	push	{r3, lr}
    //  Return 1 if we have been woken up from Deep Sleep Standby Mode, 0 otherwise.
    static int standby_wakeup = -1;
    if (standby_wakeup == -1) {
 8007eba:	4b0f      	ldr	r3, [pc, #60]	; (8007ef8 <power_standby_wakeup+0x40>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec2:	d002      	beq.n	8007eca <power_standby_wakeup+0x12>
        else { standby_wakeup = 0; }  //  Not a wakeup from standby
        //  Clear the PWR flag.
        __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU|PWR_FLAG_SB);
    }
    return standby_wakeup;
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <power_standby_wakeup+0x40>)
 8007ec6:	6818      	ldr	r0, [r3, #0]
 8007ec8:	bd08      	pop	{r3, pc}
        rcc_periph_clock_enable(RCC_PWR);  //  Must power on the PWR register before accessing
 8007eca:	f44f 7067 	mov.w	r0, #924	; 0x39c
 8007ece:	f000 f939 	bl	8008144 <rcc_periph_clock_enable>
        if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB)) { standby_wakeup = 1; }  //  Wakeup from standby
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <power_standby_wakeup+0x44>)
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f013 0f02 	tst.w	r3, #2
 8007eda:	d008      	beq.n	8007eee <power_standby_wakeup+0x36>
 8007edc:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <power_standby_wakeup+0x40>)
 8007ede:	2201      	movs	r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]
        __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU|PWR_FLAG_SB);
 8007ee2:	4a06      	ldr	r2, [pc, #24]	; (8007efc <power_standby_wakeup+0x44>)
 8007ee4:	6813      	ldr	r3, [r2, #0]
 8007ee6:	f043 030c 	orr.w	r3, r3, #12
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	e7ea      	b.n	8007ec4 <power_standby_wakeup+0xc>
        else { standby_wakeup = 0; }  //  Not a wakeup from standby
 8007eee:	4b02      	ldr	r3, [pc, #8]	; (8007ef8 <power_standby_wakeup+0x40>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	e7f5      	b.n	8007ee2 <power_standby_wakeup+0x2a>
 8007ef6:	bf00      	nop
 8007ef8:	20000194 	.word	0x20000194
 8007efc:	40007000 	.word	0x40007000

08007f00 <power_sleep>:
void power_sleep(os_time_t ticks) {    
 8007f00:	b508      	push	{r3, lr}
    if (ticks < 10) { ticks = 10; }  //  Force to sleep at least 10 milliseconds
 8007f02:	2809      	cmp	r0, #9
 8007f04:	d800      	bhi.n	8007f08 <power_sleep+0x8>
 8007f06:	200a      	movs	r0, #10
    if (network_is_busy || ticks == 0) { power_sync_time(); return; }
 8007f08:	4b3a      	ldr	r3, [pc, #232]	; (8007ff4 <power_sleep+0xf4>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d153      	bne.n	8007fb8 <power_sleep+0xb8>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	d051      	beq.n	8007fb8 <power_sleep+0xb8>
    if (network_has_transmitted) { 
 8007f14:	4b38      	ldr	r3, [pc, #224]	; (8007ff8 <power_sleep+0xf8>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d150      	bne.n	8007fbe <power_sleep+0xbe>
    uint32_t diff_time = end_time - start_time;
 8007f1c:	4b37      	ldr	r3, [pc, #220]	; (8007ffc <power_sleep+0xfc>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a37      	ldr	r2, [pc, #220]	; (8008000 <power_sleep+0x100>)
 8007f22:	6812      	ldr	r2, [r2, #0]
 8007f24:	1a9b      	subs	r3, r3, r2
    if (diff_time > max_sleep) { max_sleep = diff_time; }    
 8007f26:	4a37      	ldr	r2, [pc, #220]	; (8008004 <power_sleep+0x104>)
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d201      	bcs.n	8007f32 <power_sleep+0x32>
 8007f2e:	4a35      	ldr	r2, [pc, #212]	; (8008004 <power_sleep+0x104>)
 8007f30:	6013      	str	r3, [r2, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f32:	4b35      	ldr	r3, [pc, #212]	; (8008008 <power_sleep+0x108>)
 8007f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007f3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8007f4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007f50:	f3bf 8f6f 	isb	sy
 8007f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8007f5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8007f6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8007f7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8007f8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007f90:	f3bf 8f6f 	isb	sy
    platform_set_alarm(ticks);
 8007f94:	f000 faf4 	bl	8008580 <platform_set_alarm>
    start_time = rtc_get_counter_val();
 8007f98:	f000 f996 	bl	80082c8 <rtc_get_counter_val>
 8007f9c:	4b18      	ldr	r3, [pc, #96]	; (8008000 <power_sleep+0x100>)
 8007f9e:	6018      	str	r0, [r3, #0]
    if (!network_has_transmitted) {
 8007fa0:	4b15      	ldr	r3, [pc, #84]	; (8007ff8 <power_sleep+0xf8>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	bb1b      	cbnz	r3, 8007fee <power_sleep+0xee>
        target_enter_sleep_mode();  //  Enter Sleep Now Mode
 8007fa6:	f7ff ff4d 	bl	8007e44 <target_enter_sleep_mode>
    end_time = rtc_get_counter_val();
 8007faa:	f000 f98d 	bl	80082c8 <rtc_get_counter_val>
 8007fae:	4b13      	ldr	r3, [pc, #76]	; (8007ffc <power_sleep+0xfc>)
 8007fb0:	6018      	str	r0, [r3, #0]
    power_sync_time();
 8007fb2:	f7ff ff67 	bl	8007e84 <power_sync_time>
 8007fb6:	e001      	b.n	8007fbc <power_sleep+0xbc>
    if (network_is_busy || ticks == 0) { power_sync_time(); return; }
 8007fb8:	f7ff ff64 	bl	8007e84 <power_sync_time>
}
 8007fbc:	bd08      	pop	{r3, pc}
        int wakeup = power_standby_wakeup(); console_printf("wakeup %d\n", wakeup);
 8007fbe:	f7ff ff7b 	bl	8007eb8 <power_standby_wakeup>
 8007fc2:	4601      	mov	r1, r0
 8007fc4:	4811      	ldr	r0, [pc, #68]	; (800800c <power_sleep+0x10c>)
 8007fc6:	f7fb ffe9 	bl	8003f9c <console_printf>
        uint32_t time = rtc_get_counter_val(); console_printf("time %d secs\n", (int) (time / 1000));
 8007fca:	f000 f97d 	bl	80082c8 <rtc_get_counter_val>
 8007fce:	4910      	ldr	r1, [pc, #64]	; (8008010 <power_sleep+0x110>)
 8007fd0:	fba1 3100 	umull	r3, r1, r1, r0
 8007fd4:	0989      	lsrs	r1, r1, #6
 8007fd6:	480f      	ldr	r0, [pc, #60]	; (8008014 <power_sleep+0x114>)
 8007fd8:	f7fb ffe0 	bl	8003f9c <console_printf>
        console_printf("deep sleep %d secs\n", (int) (ticks / 1000)); 
 8007fdc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007fe0:	480d      	ldr	r0, [pc, #52]	; (8008018 <power_sleep+0x118>)
 8007fe2:	f7fb ffdb 	bl	8003f9c <console_printf>
        console_flush();
 8007fe6:	f7fb fed1 	bl	8003d8c <console_flush>
        ticks = ((os_time_t) 10) * 60 * 1000;  //  Sleep for 10 minutes.
 8007fea:	480c      	ldr	r0, [pc, #48]	; (800801c <power_sleep+0x11c>)
 8007fec:	e796      	b.n	8007f1c <power_sleep+0x1c>
        target_enter_deep_sleep_standby_mode();      //  Enter Deep Sleep Standby Mode. Will not return. Device will restart upon waking.
 8007fee:	f7ff ff39 	bl	8007e64 <target_enter_deep_sleep_standby_mode>
 8007ff2:	e7da      	b.n	8007faa <power_sleep+0xaa>
 8007ff4:	20002568 	.word	0x20002568
 8007ff8:	20002564 	.word	0x20002564
 8007ffc:	20002560 	.word	0x20002560
 8008000:	2000256c 	.word	0x2000256c
 8008004:	20000190 	.word	0x20000190
 8008008:	e000e100 	.word	0xe000e100
 800800c:	0800f634 	.word	0x0800f634
 8008010:	10624dd3 	.word	0x10624dd3
 8008014:	0800f640 	.word	0x0800f640
 8008018:	0800f650 	.word	0x0800f650
 800801c:	000927c0 	.word	0x000927c0

08008020 <power_init>:
void power_init(uint32_t os_ticks_per_sec, uint32_t reload_val, int prio) {
 8008020:	b508      	push	{r3, lr}
    assert(os_ticks_per_sec == 1000);  //  Assume 1 millisecond tick.
 8008022:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008026:	d107      	bne.n	8008038 <power_init+0x18>
    platform_start_timer(power_timer_tick, power_timer_alarm);
 8008028:	4909      	ldr	r1, [pc, #36]	; (8008050 <power_init+0x30>)
 800802a:	480a      	ldr	r0, [pc, #40]	; (8008054 <power_init+0x34>)
 800802c:	f000 fa8e 	bl	800854c <platform_start_timer>
    if (power_standby_wakeup()) {
 8008030:	f7ff ff42 	bl	8007eb8 <power_standby_wakeup>
 8008034:	b930      	cbnz	r0, 8008044 <power_init+0x24>
}
 8008036:	bd08      	pop	{r3, pc}
    assert(os_ticks_per_sec == 1000);  //  Assume 1 millisecond tick.
 8008038:	2300      	movs	r3, #0
 800803a:	461a      	mov	r2, r3
 800803c:	4619      	mov	r1, r3
 800803e:	4618      	mov	r0, r3
 8008040:	f7fd fed8 	bl	8005df4 <__assert_func>
        g_os_time = rtc_get_counter_val();
 8008044:	f000 f940 	bl	80082c8 <rtc_get_counter_val>
 8008048:	4b03      	ldr	r3, [pc, #12]	; (8008058 <power_init+0x38>)
 800804a:	6018      	str	r0, [r3, #0]
}
 800804c:	e7f3      	b.n	8008036 <power_init+0x16>
 800804e:	bf00      	nop
 8008050:	08007eb1 	.word	0x08007eb1
 8008054:	08007ea9 	.word	0x08007ea9
 8008058:	20002f28 	.word	0x20002f28

0800805c <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
        PWR->CR |= PWR_CR_DBP;
 800805c:	4a02      	ldr	r2, [pc, #8]	; (8008068 <pwr_disable_backup_domain_write_protect+0xc>)
 800805e:	6813      	ldr	r3, [r2, #0]
 8008060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008064:	6013      	str	r3, [r2, #0]
}
 8008066:	4770      	bx	lr
 8008068:	40007000 	.word	0x40007000

0800806c <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
        PWR->CR |= PWR_CR_CWUF;
 800806c:	4a02      	ldr	r2, [pc, #8]	; (8008078 <pwr_clear_wakeup_flag+0xc>)
 800806e:	6813      	ldr	r3, [r2, #0]
 8008070:	f043 0304 	orr.w	r3, r3, #4
 8008074:	6013      	str	r3, [r2, #0]
}
 8008076:	4770      	bx	lr
 8008078:	40007000 	.word	0x40007000

0800807c <pwr_set_standby_mode>:
 
*/

void pwr_set_standby_mode(void)
{
        PWR->CR |= PWR_CR_PDDS;
 800807c:	4a02      	ldr	r2, [pc, #8]	; (8008088 <pwr_set_standby_mode+0xc>)
 800807e:	6813      	ldr	r3, [r2, #0]
 8008080:	f043 0302 	orr.w	r3, r3, #2
 8008084:	6013      	str	r3, [r2, #0]
}
 8008086:	4770      	bx	lr
 8008088:	40007000 	.word	0x40007000

0800808c <rcc_rtc_clock_enabled_flag>:
@returns uint32_t. Nonzero if the RTC Clock is enabled.
*/

uint32_t rcc_rtc_clock_enabled_flag(void)
{
    return RCC->BDCR & RCC_BDCR_RTCEN;
 800808c:	4b02      	ldr	r3, [pc, #8]	; (8008098 <rcc_rtc_clock_enabled_flag+0xc>)
 800808e:	6a18      	ldr	r0, [r3, #32]
}
 8008090:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	40021000 	.word	0x40021000

0800809c <rcc_enable_rtc_clock>:
/** @brief RCC Enable the RTC clock
*/

void rcc_enable_rtc_clock(void)
{
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800809c:	4a02      	ldr	r2, [pc, #8]	; (80080a8 <rcc_enable_rtc_clock+0xc>)
 800809e:	6a13      	ldr	r3, [r2, #32]
 80080a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a4:	6213      	str	r3, [r2, #32]
}
 80080a6:	4770      	bx	lr
 80080a8:	40021000 	.word	0x40021000

080080ac <rcc_set_rtc_clock_source>:

void rcc_set_rtc_clock_source(enum rcc_osc clock_source)
{
        uint32_t reg32;

        switch (clock_source) {
 80080ac:	2806      	cmp	r0, #6
 80080ae:	d846      	bhi.n	800813e <rcc_set_rtc_clock_source+0x92>
 80080b0:	e8df f000 	tbb	[pc, r0]
 80080b4:	2c404040 	.word	0x2c404040
 80080b8:	0440      	.short	0x0440
 80080ba:	18          	.byte	0x18
 80080bb:	00          	.byte	0x00
        case RCC_LSE:
                /* Turn the LSE on and wait while it stabilises. */
                RCC->BDCR |= RCC_BDCR_LSEON;
 80080bc:	4a20      	ldr	r2, [pc, #128]	; (8008140 <rcc_set_rtc_clock_source+0x94>)
 80080be:	6a13      	ldr	r3, [r2, #32]
 80080c0:	f043 0301 	orr.w	r3, r3, #1
 80080c4:	6213      	str	r3, [r2, #32]
                while ((reg32 = (RCC->BDCR & RCC_BDCR_LSERDY)) == 0);
 80080c6:	4b1e      	ldr	r3, [pc, #120]	; (8008140 <rcc_set_rtc_clock_source+0x94>)
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	f013 0f02 	tst.w	r3, #2
 80080ce:	d0fa      	beq.n	80080c6 <rcc_set_rtc_clock_source+0x1a>

                /* Choose LSE as the RTC clock source. */
                RCC->BDCR &= ~((1 << 8) | (1 << 9));
 80080d0:	4b1b      	ldr	r3, [pc, #108]	; (8008140 <rcc_set_rtc_clock_source+0x94>)
 80080d2:	6a1a      	ldr	r2, [r3, #32]
 80080d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80080d8:	621a      	str	r2, [r3, #32]
                RCC->BDCR |= (1 << 8);
 80080da:	6a1a      	ldr	r2, [r3, #32]
 80080dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080e0:	621a      	str	r2, [r3, #32]
                break;
 80080e2:	4770      	bx	lr
        case RCC_LSI:
                /* Turn the LSI on and wait while it stabilises. */
                RCC->CSR |= RCC_CSR_LSION;
 80080e4:	4a16      	ldr	r2, [pc, #88]	; (8008140 <rcc_set_rtc_clock_source+0x94>)
 80080e6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80080e8:	f043 0301 	orr.w	r3, r3, #1
 80080ec:	6253      	str	r3, [r2, #36]	; 0x24
                while ((reg32 = (RCC->CSR & RCC_CSR_LSIRDY)) == 0);
 80080ee:	4b14      	ldr	r3, [pc, #80]	; (8008140 <rcc_set_rtc_clock_source+0x94>)
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	f013 0f02 	tst.w	r3, #2
 80080f6:	d0fa      	beq.n	80080ee <rcc_set_rtc_clock_source+0x42>

                /* Choose LSI as the RTC clock source. */
                RCC->BDCR &= ~((1 << 8) | (1 << 9));
 80080f8:	4b11      	ldr	r3, [pc, #68]	; (8008140 <rcc_set_rtc_clock_source+0x94>)
 80080fa:	6a1a      	ldr	r2, [r3, #32]
 80080fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008100:	621a      	str	r2, [r3, #32]
                RCC->BDCR |= (1 << 9);
 8008102:	6a1a      	ldr	r2, [r3, #32]
 8008104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008108:	621a      	str	r2, [r3, #32]
                break;
 800810a:	4770      	bx	lr
        case RCC_HSE:
                /* Turn the HSE on and wait while it stabilises. */
                RCC->CR |= RCC_CR_HSEON;
 800810c:	4a0c      	ldr	r2, [pc, #48]	; (8008140 <rcc_set_rtc_clock_source+0x94>)
 800810e:	6813      	ldr	r3, [r2, #0]
 8008110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008114:	6013      	str	r3, [r2, #0]
                while ((reg32 = (RCC->CR & RCC_CR_HSERDY)) == 0);
 8008116:	4b0a      	ldr	r3, [pc, #40]	; (8008140 <rcc_set_rtc_clock_source+0x94>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800811e:	d0fa      	beq.n	8008116 <rcc_set_rtc_clock_source+0x6a>

                /* Choose HSE as the RTC clock source. */
                RCC->BDCR &= ~((1 << 8) | (1 << 9));
 8008120:	4b07      	ldr	r3, [pc, #28]	; (8008140 <rcc_set_rtc_clock_source+0x94>)
 8008122:	6a1a      	ldr	r2, [r3, #32]
 8008124:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008128:	621a      	str	r2, [r3, #32]
                RCC->BDCR |= (1 << 9) | (1 << 8);
 800812a:	6a1a      	ldr	r2, [r3, #32]
 800812c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008130:	621a      	str	r2, [r3, #32]
                break;
 8008132:	4770      	bx	lr
        case RCC_PLL2:
        case RCC_PLL3:
        case RCC_HSI:
                /* Unusable clock source, here to prevent warnings. */
                /* Turn off clock sources to RTC. */
                RCC->BDCR &= ~((1 << 8) | (1 << 9));
 8008134:	4a02      	ldr	r2, [pc, #8]	; (8008140 <rcc_set_rtc_clock_source+0x94>)
 8008136:	6a13      	ldr	r3, [r2, #32]
 8008138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800813c:	6213      	str	r3, [r2, #32]
                break;
        }
}
 800813e:	4770      	bx	lr
 8008140:	40021000 	.word	0x40021000

08008144 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
        _RCC_REG(clken) |= _RCC_BIT(clken);
 8008144:	0943      	lsrs	r3, r0, #5
 8008146:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800814a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	f000 001f 	and.w	r0, r0, #31
 8008154:	2101      	movs	r1, #1
 8008156:	fa01 f000 	lsl.w	r0, r1, r0
 800815a:	4310      	orrs	r0, r2
 800815c:	6018      	str	r0, [r3, #0]
}
 800815e:	4770      	bx	lr

08008160 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
 */

void nvic_enable_irq(uint8_t irqn)
{
        NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8008160:	f000 021f 	and.w	r2, r0, #31
 8008164:	0940      	lsrs	r0, r0, #5
 8008166:	0080      	lsls	r0, r0, #2
 8008168:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800816c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8008170:	2301      	movs	r3, #1
 8008172:	4093      	lsls	r3, r2
 8008174:	6003      	str	r3, [r0, #0]
}
 8008176:	4770      	bx	lr

08008178 <exti_set_trigger>:
///////////////////////////////////////////////////////////////////////////////
//  EXTI Peripheral API (from libopencm3 STM32F1)

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
    switch (trig) {
 8008178:	2901      	cmp	r1, #1
 800817a:	d00c      	beq.n	8008196 <exti_set_trigger+0x1e>
 800817c:	b111      	cbz	r1, 8008184 <exti_set_trigger+0xc>
 800817e:	2902      	cmp	r1, #2
 8008180:	d012      	beq.n	80081a8 <exti_set_trigger+0x30>
 8008182:	4770      	bx	lr
    case EXTI_TRIGGER_RISING:
        EXTI->RTSR |= extis;
 8008184:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <exti_set_trigger+0x40>)
 8008186:	689a      	ldr	r2, [r3, #8]
 8008188:	4302      	orrs	r2, r0
 800818a:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~extis;
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	ea22 0000 	bic.w	r0, r2, r0
 8008192:	60d8      	str	r0, [r3, #12]
        break;
 8008194:	4770      	bx	lr
    case EXTI_TRIGGER_FALLING:
        EXTI->RTSR &= ~extis;
 8008196:	4b08      	ldr	r3, [pc, #32]	; (80081b8 <exti_set_trigger+0x40>)
 8008198:	689a      	ldr	r2, [r3, #8]
 800819a:	ea22 0200 	bic.w	r2, r2, r0
 800819e:	609a      	str	r2, [r3, #8]
        EXTI->FTSR |= extis;
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	4310      	orrs	r0, r2
 80081a4:	60d8      	str	r0, [r3, #12]
        break;
 80081a6:	4770      	bx	lr
    case EXTI_TRIGGER_BOTH:
        EXTI->RTSR |= extis;
 80081a8:	4b03      	ldr	r3, [pc, #12]	; (80081b8 <exti_set_trigger+0x40>)
 80081aa:	689a      	ldr	r2, [r3, #8]
 80081ac:	4302      	orrs	r2, r0
 80081ae:	609a      	str	r2, [r3, #8]
        EXTI->FTSR |= extis;
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	4310      	orrs	r0, r2
 80081b4:	60d8      	str	r0, [r3, #12]
        break;
    }
}
 80081b6:	4770      	bx	lr
 80081b8:	40010400 	.word	0x40010400

080081bc <exti_enable_request>:

void exti_enable_request(uint32_t extis)
{
    /* Enable interrupts. */
    EXTI->IMR |= extis;
 80081bc:	4b03      	ldr	r3, [pc, #12]	; (80081cc <exti_enable_request+0x10>)
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	4302      	orrs	r2, r0
 80081c2:	601a      	str	r2, [r3, #0]

    /* Enable events. */
    EXTI->EMR |= extis;
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	4310      	orrs	r0, r2
 80081c8:	6058      	str	r0, [r3, #4]
}
 80081ca:	4770      	bx	lr
 80081cc:	40010400 	.word	0x40010400

080081d0 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
        EXTI_RPR1 = extis;
        EXTI_FPR1 = extis;
#else
        EXTI->PR = extis;
 80081d0:	4b01      	ldr	r3, [pc, #4]	; (80081d8 <exti_reset_request+0x8>)
 80081d2:	6158      	str	r0, [r3, #20]
#endif
}
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	40010400 	.word	0x40010400

080081dc <rtc_enter_config_mode>:
void rtc_enter_config_mode(void)
{
    uint32_t reg32;

    /* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
    while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 80081dc:	4b05      	ldr	r3, [pc, #20]	; (80081f4 <rtc_enter_config_mode+0x18>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f013 0f20 	tst.w	r3, #32
 80081e4:	d0fa      	beq.n	80081dc <rtc_enter_config_mode>

    /* Enter configuration mode. */
    RTC_CRL |= RTC_CRL_CNF;
 80081e6:	4a03      	ldr	r2, [pc, #12]	; (80081f4 <rtc_enter_config_mode+0x18>)
 80081e8:	6813      	ldr	r3, [r2, #0]
 80081ea:	f043 0310 	orr.w	r3, r3, #16
 80081ee:	6013      	str	r3, [r2, #0]
}
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	40002804 	.word	0x40002804

080081f8 <rtc_exit_config_mode>:
void rtc_exit_config_mode(void)
{
    uint32_t reg32;

    /* Exit configuration mode. */
    RTC_CRL &= ~RTC_CRL_CNF;
 80081f8:	4a05      	ldr	r2, [pc, #20]	; (8008210 <rtc_exit_config_mode+0x18>)
 80081fa:	6813      	ldr	r3, [r2, #0]
 80081fc:	f023 0310 	bic.w	r3, r3, #16
 8008200:	6013      	str	r3, [r2, #0]

    /* Wait until the RTOFF bit is 1 (our RTC register write finished). */
    while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8008202:	4b03      	ldr	r3, [pc, #12]	; (8008210 <rtc_exit_config_mode+0x18>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f013 0f20 	tst.w	r3, #32
 800820a:	d0fa      	beq.n	8008202 <rtc_exit_config_mode+0xa>
}
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	40002804 	.word	0x40002804

08008214 <rtc_awake_from_off>:
{
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4604      	mov	r4, r0
        rcc_periph_clock_enable(RCC_PWR);
 8008218:	f44f 7067 	mov.w	r0, #924	; 0x39c
 800821c:	f7ff ff92 	bl	8008144 <rcc_periph_clock_enable>
        rcc_periph_clock_enable(RCC_BKP);
 8008220:	f240 309b 	movw	r0, #923	; 0x39b
 8008224:	f7ff ff8e 	bl	8008144 <rcc_periph_clock_enable>
        pwr_disable_backup_domain_write_protect();
 8008228:	f7ff ff18 	bl	800805c <pwr_disable_backup_domain_write_protect>
        rcc_set_rtc_clock_source(clock_source);
 800822c:	4620      	mov	r0, r4
 800822e:	f7ff ff3d 	bl	80080ac <rcc_set_rtc_clock_source>
        RTC_CRH = 0;
 8008232:	2400      	movs	r4, #0
 8008234:	4b10      	ldr	r3, [pc, #64]	; (8008278 <rtc_awake_from_off+0x64>)
 8008236:	601c      	str	r4, [r3, #0]
        RTC_CRL = 0;
 8008238:	4d10      	ldr	r5, [pc, #64]	; (800827c <rtc_awake_from_off+0x68>)
 800823a:	602c      	str	r4, [r5, #0]
        rcc_enable_rtc_clock();
 800823c:	f7ff ff2e 	bl	800809c <rcc_enable_rtc_clock>
        rtc_enter_config_mode();
 8008240:	f7ff ffcc 	bl	80081dc <rtc_enter_config_mode>
        RTC_PRLH = 0;
 8008244:	4b0e      	ldr	r3, [pc, #56]	; (8008280 <rtc_awake_from_off+0x6c>)
 8008246:	601c      	str	r4, [r3, #0]
        RTC_PRLL = 0;
 8008248:	3304      	adds	r3, #4
 800824a:	601c      	str	r4, [r3, #0]
        RTC_CNTH = 0;
 800824c:	330c      	adds	r3, #12
 800824e:	601c      	str	r4, [r3, #0]
        RTC_CNTL = 0;
 8008250:	3304      	adds	r3, #4
 8008252:	601c      	str	r4, [r3, #0]
        RTC_ALRH = 0xFFFF;
 8008254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008258:	4a0a      	ldr	r2, [pc, #40]	; (8008284 <rtc_awake_from_off+0x70>)
 800825a:	6013      	str	r3, [r2, #0]
        RTC_ALRL = 0xFFFF;
 800825c:	3204      	adds	r2, #4
 800825e:	6013      	str	r3, [r2, #0]
        rtc_exit_config_mode();
 8008260:	f7ff ffca 	bl	80081f8 <rtc_exit_config_mode>
        RTC_CRL &= ~RTC_CRL_RSF;
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	f023 0308 	bic.w	r3, r3, #8
 800826a:	602b      	str	r3, [r5, #0]
        while ((reg32 = (RTC_CRL & RTC_CRL_RSF)) == 0);
 800826c:	4b03      	ldr	r3, [pc, #12]	; (800827c <rtc_awake_from_off+0x68>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f013 0f08 	tst.w	r3, #8
 8008274:	d0fa      	beq.n	800826c <rtc_awake_from_off+0x58>
}
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	40002800 	.word	0x40002800
 800827c:	40002804 	.word	0x40002804
 8008280:	40002808 	.word	0x40002808
 8008284:	40002820 	.word	0x40002820

08008288 <rtc_set_alarm_time>:
 
@param[in] alarm_time uint32_t. time at which the alarm event is triggered.
*/

void rtc_set_alarm_time(uint32_t alarm_time)
{
 8008288:	b510      	push	{r4, lr}
 800828a:	4604      	mov	r4, r0
        rtc_enter_config_mode();
 800828c:	f7ff ffa6 	bl	80081dc <rtc_enter_config_mode>
        RTC_ALRL = (alarm_time & 0x0000ffff);
 8008290:	b2a2      	uxth	r2, r4
 8008292:	4b04      	ldr	r3, [pc, #16]	; (80082a4 <rtc_set_alarm_time+0x1c>)
 8008294:	601a      	str	r2, [r3, #0]
        RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 8008296:	0c24      	lsrs	r4, r4, #16
 8008298:	3b04      	subs	r3, #4
 800829a:	601c      	str	r4, [r3, #0]
        rtc_exit_config_mode();
 800829c:	f7ff ffac 	bl	80081f8 <rtc_exit_config_mode>
}
 80082a0:	bd10      	pop	{r4, pc}
 80082a2:	bf00      	nop
 80082a4:	40002824 	.word	0x40002824

080082a8 <rtc_set_prescale_val>:
 
@param[in] prescale_val uint32_t. 20 bit prescale divider.
*/

void rtc_set_prescale_val(uint32_t prescale_val)
{
 80082a8:	b510      	push	{r4, lr}
 80082aa:	4604      	mov	r4, r0
        rtc_enter_config_mode();
 80082ac:	f7ff ff96 	bl	80081dc <rtc_enter_config_mode>
        RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 80082b0:	b2a2      	uxth	r2, r4
 80082b2:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <rtc_set_prescale_val+0x1c>)
 80082b4:	601a      	str	r2, [r3, #0]
        RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 80082b6:	f3c4 4403 	ubfx	r4, r4, #16, #4
 80082ba:	3b04      	subs	r3, #4
 80082bc:	601c      	str	r4, [r3, #0]
        rtc_exit_config_mode();
 80082be:	f7ff ff9b 	bl	80081f8 <rtc_exit_config_mode>
}
 80082c2:	bd10      	pop	{r4, pc}
 80082c4:	4000280c 	.word	0x4000280c

080082c8 <rtc_get_counter_val>:
@returns uint32_t: the 32 bit counter value.
*/

uint32_t rtc_get_counter_val(void)
{
        return (RTC_CNTH << 16) | RTC_CNTL;
 80082c8:	4b03      	ldr	r3, [pc, #12]	; (80082d8 <rtc_get_counter_val+0x10>)
 80082ca:	6818      	ldr	r0, [r3, #0]
 80082cc:	3304      	adds	r3, #4
 80082ce:	681b      	ldr	r3, [r3, #0]
}
 80082d0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	40002818 	.word	0x40002818

080082dc <rtc_set_counter_val>:
 
@param[in] counter_val 32 bit time setting for the counter.
*/

void rtc_set_counter_val(uint32_t counter_val)
{
 80082dc:	b510      	push	{r4, lr}
 80082de:	4604      	mov	r4, r0
        rtc_enter_config_mode();
 80082e0:	f7ff ff7c 	bl	80081dc <rtc_enter_config_mode>
        RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 80082e4:	0c22      	lsrs	r2, r4, #16
 80082e6:	4b04      	ldr	r3, [pc, #16]	; (80082f8 <rtc_set_counter_val+0x1c>)
 80082e8:	601a      	str	r2, [r3, #0]
        RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 80082ea:	b2a4      	uxth	r4, r4
 80082ec:	3304      	adds	r3, #4
 80082ee:	601c      	str	r4, [r3, #0]
        rtc_exit_config_mode();
 80082f0:	f7ff ff82 	bl	80081f8 <rtc_exit_config_mode>
}
 80082f4:	bd10      	pop	{r4, pc}
 80082f6:	bf00      	nop
 80082f8:	40002818 	.word	0x40002818

080082fc <rtc_interrupt_enable>:
 
@param[in] flag_val ::rtcflag_t: The flag to enable.
*/

void rtc_interrupt_enable(rtcflag_t flag_val)
{
 80082fc:	b510      	push	{r4, lr}
 80082fe:	4604      	mov	r4, r0
        rtc_enter_config_mode();
 8008300:	f7ff ff6c 	bl	80081dc <rtc_enter_config_mode>

        /* Set the correct interrupt enable. */
        switch (flag_val) {
 8008304:	2c01      	cmp	r4, #1
 8008306:	d00b      	beq.n	8008320 <rtc_interrupt_enable+0x24>
 8008308:	b124      	cbz	r4, 8008314 <rtc_interrupt_enable+0x18>
 800830a:	2c02      	cmp	r4, #2
 800830c:	d00e      	beq.n	800832c <rtc_interrupt_enable+0x30>
        case RTC_OW:
                RTC_CRH |= RTC_CRH_OWIE;
                break;
        }

        rtc_exit_config_mode();
 800830e:	f7ff ff73 	bl	80081f8 <rtc_exit_config_mode>
}
 8008312:	bd10      	pop	{r4, pc}
                RTC_CRH |= RTC_CRH_SECIE;
 8008314:	4a08      	ldr	r2, [pc, #32]	; (8008338 <rtc_interrupt_enable+0x3c>)
 8008316:	6813      	ldr	r3, [r2, #0]
 8008318:	f043 0301 	orr.w	r3, r3, #1
 800831c:	6013      	str	r3, [r2, #0]
                break;
 800831e:	e7f6      	b.n	800830e <rtc_interrupt_enable+0x12>
                RTC_CRH |= RTC_CRH_ALRIE;
 8008320:	4a05      	ldr	r2, [pc, #20]	; (8008338 <rtc_interrupt_enable+0x3c>)
 8008322:	6813      	ldr	r3, [r2, #0]
 8008324:	f043 0302 	orr.w	r3, r3, #2
 8008328:	6013      	str	r3, [r2, #0]
                break;
 800832a:	e7f0      	b.n	800830e <rtc_interrupt_enable+0x12>
                RTC_CRH |= RTC_CRH_OWIE;
 800832c:	4a02      	ldr	r2, [pc, #8]	; (8008338 <rtc_interrupt_enable+0x3c>)
 800832e:	6813      	ldr	r3, [r2, #0]
 8008330:	f043 0304 	orr.w	r3, r3, #4
 8008334:	6013      	str	r3, [r2, #0]
                break;
 8008336:	e7ea      	b.n	800830e <rtc_interrupt_enable+0x12>
 8008338:	40002800 	.word	0x40002800

0800833c <rtc_interrupt_disable>:
 
@param[in] flag_val ::rtcflag_t: The flag to disable.
*/

void rtc_interrupt_disable(rtcflag_t flag_val)
{
 800833c:	b510      	push	{r4, lr}
 800833e:	4604      	mov	r4, r0
        rtc_enter_config_mode();
 8008340:	f7ff ff4c 	bl	80081dc <rtc_enter_config_mode>

        /* Disable the correct interrupt enable. */
        switch (flag_val) {
 8008344:	2c01      	cmp	r4, #1
 8008346:	d00b      	beq.n	8008360 <rtc_interrupt_disable+0x24>
 8008348:	b124      	cbz	r4, 8008354 <rtc_interrupt_disable+0x18>
 800834a:	2c02      	cmp	r4, #2
 800834c:	d00e      	beq.n	800836c <rtc_interrupt_disable+0x30>
        case RTC_OW:
                RTC_CRH &= ~RTC_CRH_OWIE;
                break;
        }

        rtc_exit_config_mode();
 800834e:	f7ff ff53 	bl	80081f8 <rtc_exit_config_mode>
}
 8008352:	bd10      	pop	{r4, pc}
                RTC_CRH &= ~RTC_CRH_SECIE;
 8008354:	4a08      	ldr	r2, [pc, #32]	; (8008378 <rtc_interrupt_disable+0x3c>)
 8008356:	6813      	ldr	r3, [r2, #0]
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	6013      	str	r3, [r2, #0]
                break;
 800835e:	e7f6      	b.n	800834e <rtc_interrupt_disable+0x12>
                RTC_CRH &= ~RTC_CRH_ALRIE;
 8008360:	4a05      	ldr	r2, [pc, #20]	; (8008378 <rtc_interrupt_disable+0x3c>)
 8008362:	6813      	ldr	r3, [r2, #0]
 8008364:	f023 0302 	bic.w	r3, r3, #2
 8008368:	6013      	str	r3, [r2, #0]
                break;
 800836a:	e7f0      	b.n	800834e <rtc_interrupt_disable+0x12>
                RTC_CRH &= ~RTC_CRH_OWIE;
 800836c:	4a02      	ldr	r2, [pc, #8]	; (8008378 <rtc_interrupt_disable+0x3c>)
 800836e:	6813      	ldr	r3, [r2, #0]
 8008370:	f023 0304 	bic.w	r3, r3, #4
 8008374:	6013      	str	r3, [r2, #0]
                break;
 8008376:	e7ea      	b.n	800834e <rtc_interrupt_disable+0x12>
 8008378:	40002800 	.word	0x40002800

0800837c <rtc_clear_flag>:
void rtc_clear_flag(rtcflag_t flag_val)
{
        /* Configuration mode not needed. */

        /* Clear the correct flag. */
        switch (flag_val) {
 800837c:	2801      	cmp	r0, #1
 800837e:	d009      	beq.n	8008394 <rtc_clear_flag+0x18>
 8008380:	b110      	cbz	r0, 8008388 <rtc_clear_flag+0xc>
 8008382:	2802      	cmp	r0, #2
 8008384:	d00c      	beq.n	80083a0 <rtc_clear_flag+0x24>
 8008386:	4770      	bx	lr
        case RTC_SEC:
                RTC_CRL &= ~RTC_CRL_SECF;
 8008388:	4a08      	ldr	r2, [pc, #32]	; (80083ac <rtc_clear_flag+0x30>)
 800838a:	6813      	ldr	r3, [r2, #0]
 800838c:	f023 0301 	bic.w	r3, r3, #1
 8008390:	6013      	str	r3, [r2, #0]
                break;
 8008392:	4770      	bx	lr
        case RTC_ALR:
                RTC_CRL &= ~RTC_CRL_ALRF;
 8008394:	4a05      	ldr	r2, [pc, #20]	; (80083ac <rtc_clear_flag+0x30>)
 8008396:	6813      	ldr	r3, [r2, #0]
 8008398:	f023 0302 	bic.w	r3, r3, #2
 800839c:	6013      	str	r3, [r2, #0]
                break;
 800839e:	4770      	bx	lr
        case RTC_OW:
                RTC_CRL &= ~RTC_CRL_OWF;
 80083a0:	4a02      	ldr	r2, [pc, #8]	; (80083ac <rtc_clear_flag+0x30>)
 80083a2:	6813      	ldr	r3, [r2, #0]
 80083a4:	f023 0304 	bic.w	r3, r3, #4
 80083a8:	6013      	str	r3, [r2, #0]
                break;
        }
}
 80083aa:	4770      	bx	lr
 80083ac:	40002804 	.word	0x40002804

080083b0 <rtc_check_flag>:
uint32_t rtc_check_flag(rtcflag_t flag_val)
{
        uint32_t reg32;

        /* Read correct flag. */
        switch (flag_val) {
 80083b0:	2801      	cmp	r0, #1
 80083b2:	d009      	beq.n	80083c8 <rtc_check_flag+0x18>
 80083b4:	b118      	cbz	r0, 80083be <rtc_check_flag+0xe>
 80083b6:	2802      	cmp	r0, #2
 80083b8:	d00b      	beq.n	80083d2 <rtc_check_flag+0x22>
                break;
        case RTC_OW:
                reg32 = RTC_CRL & RTC_CRL_OWF;
                break;
        default:
                reg32 = 0;
 80083ba:	2000      	movs	r0, #0
                break;
        }

        return reg32;
}
 80083bc:	4770      	bx	lr
                reg32 = RTC_CRL & RTC_CRL_SECF;
 80083be:	4b07      	ldr	r3, [pc, #28]	; (80083dc <rtc_check_flag+0x2c>)
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	f000 0001 	and.w	r0, r0, #1
                break;
 80083c6:	4770      	bx	lr
                reg32 = RTC_CRL & RTC_CRL_ALRF;
 80083c8:	4b04      	ldr	r3, [pc, #16]	; (80083dc <rtc_check_flag+0x2c>)
 80083ca:	6818      	ldr	r0, [r3, #0]
 80083cc:	f000 0002 	and.w	r0, r0, #2
                break;
 80083d0:	4770      	bx	lr
                reg32 = RTC_CRL & RTC_CRL_OWF;
 80083d2:	4b02      	ldr	r3, [pc, #8]	; (80083dc <rtc_check_flag+0x2c>)
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f000 0004 	and.w	r0, r0, #4
                break;
 80083da:	4770      	bx	lr
 80083dc:	40002804 	.word	0x40002804

080083e0 <rtc_awake_from_standby>:
Enable the backup domain clocks, enable write access to the backup
domain and the RTC, and synchronise the RTC register access.
*/

void rtc_awake_from_standby(void)
{
 80083e0:	b508      	push	{r3, lr}
        uint32_t reg32;

        /* Enable power and backup interface clocks. */
        rcc_periph_clock_enable(RCC_PWR);
 80083e2:	f44f 7067 	mov.w	r0, #924	; 0x39c
 80083e6:	f7ff fead 	bl	8008144 <rcc_periph_clock_enable>
        rcc_periph_clock_enable(RCC_BKP);
 80083ea:	f240 309b 	movw	r0, #923	; 0x39b
 80083ee:	f7ff fea9 	bl	8008144 <rcc_periph_clock_enable>

        /* Enable access to the backup registers and the RTC. */
        pwr_disable_backup_domain_write_protect();
 80083f2:	f7ff fe33 	bl	800805c <pwr_disable_backup_domain_write_protect>

        /* Wait for the RSF bit in RTC_CRL to be set by hardware. */
        RTC_CRL &= ~RTC_CRL_RSF;
 80083f6:	4a08      	ldr	r2, [pc, #32]	; (8008418 <rtc_awake_from_standby+0x38>)
 80083f8:	6813      	ldr	r3, [r2, #0]
 80083fa:	f023 0308 	bic.w	r3, r3, #8
 80083fe:	6013      	str	r3, [r2, #0]
        while ((reg32 = (RTC_CRL & RTC_CRL_RSF)) == 0);
 8008400:	4b05      	ldr	r3, [pc, #20]	; (8008418 <rtc_awake_from_standby+0x38>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f013 0f08 	tst.w	r3, #8
 8008408:	d0fa      	beq.n	8008400 <rtc_awake_from_standby+0x20>

        /* Wait for the last write operation to finish. */
        /* TODO: Necessary? */
        while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 800840a:	4b03      	ldr	r3, [pc, #12]	; (8008418 <rtc_awake_from_standby+0x38>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f013 0f20 	tst.w	r3, #32
 8008412:	d0fa      	beq.n	800840a <rtc_awake_from_standby+0x2a>
 8008414:	bd08      	pop	{r3, pc}
 8008416:	bf00      	nop
 8008418:	40002804 	.word	0x40002804

0800841c <rtc_auto_awake>:
{
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4605      	mov	r5, r0
 8008420:	460c      	mov	r4, r1
        rcc_periph_clock_enable(RCC_PWR);
 8008422:	f44f 7067 	mov.w	r0, #924	; 0x39c
 8008426:	f7ff fe8d 	bl	8008144 <rcc_periph_clock_enable>
        rcc_periph_clock_enable(RCC_BKP);
 800842a:	f240 309b 	movw	r0, #923	; 0x39b
 800842e:	f7ff fe89 	bl	8008144 <rcc_periph_clock_enable>
        reg32 = rcc_rtc_clock_enabled_flag();
 8008432:	f7ff fe2b 	bl	800808c <rcc_rtc_clock_enabled_flag>
        if (reg32 != 0) {
 8008436:	b930      	cbnz	r0, 8008446 <rtc_auto_awake+0x2a>
                rtc_awake_from_off(clock_source);
 8008438:	4628      	mov	r0, r5
 800843a:	f7ff feeb 	bl	8008214 <rtc_awake_from_off>
                rtc_set_prescale_val(prescale_val);
 800843e:	4620      	mov	r0, r4
 8008440:	f7ff ff32 	bl	80082a8 <rtc_set_prescale_val>
}
 8008444:	bd38      	pop	{r3, r4, r5, pc}
                rtc_awake_from_standby();
 8008446:	f7ff ffcb 	bl	80083e0 <rtc_awake_from_standby>
 800844a:	e7fb      	b.n	8008444 <rtc_auto_awake+0x28>

0800844c <alarm_setup>:
void rtc_alarm_isr(void);

/// alarm_setup() will set this to 1 when RTC has been configured. Used by libs/adc_stm32f1/src/adc_stm32f1.c to prevent configuring RTC twice.
int rtc_configured = 0;

static void alarm_setup(void) {
 800844c:	b510      	push	{r4, lr}
    //  Setup RTC interrupts for tick and alarm wakeup.
    rtc_configured = 1;  //  Tell adc_stm32f1 that the clocks have already been configured, don't configure again.
 800844e:	2401      	movs	r4, #1
 8008450:	4b23      	ldr	r3, [pc, #140]	; (80084e0 <alarm_setup+0x94>)
 8008452:	601c      	str	r4, [r3, #0]

    //  Power on the RTC before using.
    rcc_enable_rtc_clock();
 8008454:	f7ff fe22 	bl	800809c <rcc_enable_rtc_clock>
    rtc_interrupt_disable(RTC_SEC);
 8008458:	2000      	movs	r0, #0
 800845a:	f7ff ff6f 	bl	800833c <rtc_interrupt_disable>
    rtc_interrupt_disable(RTC_ALR);
 800845e:	4620      	mov	r0, r4
 8008460:	f7ff ff6c 	bl	800833c <rtc_interrupt_disable>
    rtc_interrupt_disable(RTC_OW);
 8008464:	2002      	movs	r0, #2
 8008466:	f7ff ff69 	bl	800833c <rtc_interrupt_disable>

    if (!power_standby_wakeup()) {  //  At power on...
 800846a:	f7ff fd25 	bl	8007eb8 <power_standby_wakeup>
 800846e:	b348      	cbz	r0, 80084c4 <alarm_setup+0x78>

    } else {  //  At standby wakeup...
        //  From: https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f1/stm32vl-discovery/rtc/rtc.c
        //  rtc_auto_awake(): If the RTC is pre-configured just allow access, don't reconfigure.
        //  Otherwise enable it with the clock source and set the prescale value.
        rtc_auto_awake(clock_source, prescale);
 8008470:	2120      	movs	r1, #32
 8008472:	2005      	movs	r0, #5
 8008474:	f7ff ffd2 	bl	800841c <rtc_auto_awake>
    }
    
    exti_set_trigger(EXTI17, EXTI_TRIGGER_RISING);  //  Enable alarm wakeup via the interrupt
 8008478:	2100      	movs	r1, #0
 800847a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800847e:	f7ff fe7b 	bl	8008178 <exti_set_trigger>
    exti_enable_request(EXTI17);
 8008482:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008486:	f7ff fe99 	bl	80081bc <exti_enable_request>
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800848a:	4b16      	ldr	r3, [pc, #88]	; (80084e4 <alarm_setup+0x98>)
 800848c:	689a      	ldr	r2, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800848e:	4916      	ldr	r1, [pc, #88]	; (80084e8 <alarm_setup+0x9c>)
 8008490:	64d1      	str	r1, [r2, #76]	; 0x4c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8008492:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008494:	4a15      	ldr	r2, [pc, #84]	; (80084ec <alarm_setup+0xa0>)
 8008496:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

    NVIC_SetVector(RTC_IRQn,       (uint32_t) rtc_isr);        //  Set the Interrupt Service Routine for RTC
    NVIC_SetVector(RTC_Alarm_IRQn, (uint32_t) rtc_alarm_isr);  //  Set the Interrupt Service Routine for RTC Alarm
    
    nvic_enable_irq(NVIC_RTC_IRQ);        //  Enable RTC tick interrupt processing
 800849a:	2003      	movs	r0, #3
 800849c:	f7ff fe60 	bl	8008160 <nvic_enable_irq>
    nvic_enable_irq(NVIC_RTC_ALARM_IRQ);  //  Enable RTC alarm wakeup interrupt processing
 80084a0:	2029      	movs	r0, #41	; 0x29
 80084a2:	f7ff fe5d 	bl	8008160 <nvic_enable_irq>
  __ASM volatile ("cpsid i" : : : "memory");
 80084a6:	b672      	cpsid	i

    __disable_irq();                      //  Disable interrupts while we make changes
    rtc_clear_flag(RTC_SEC);
 80084a8:	2000      	movs	r0, #0
 80084aa:	f7ff ff67 	bl	800837c <rtc_clear_flag>
    rtc_clear_flag(RTC_ALR);
 80084ae:	2001      	movs	r0, #1
 80084b0:	f7ff ff64 	bl	800837c <rtc_clear_flag>
    rtc_clear_flag(RTC_OW);
 80084b4:	2002      	movs	r0, #2
 80084b6:	f7ff ff61 	bl	800837c <rtc_clear_flag>
    rtc_interrupt_enable(RTC_ALR);        //  Allow RTC to generate alarm interrupts
 80084ba:	2001      	movs	r0, #1
 80084bc:	f7ff ff1e 	bl	80082fc <rtc_interrupt_enable>
  __ASM volatile ("cpsie i" : : : "memory");
 80084c0:	b662      	cpsie	i
    //  rtc_interrupt_enable(RTC_SEC);    //  Not used: Allow RTC to generate tick interrupts
    __enable_irq();                       //  Enable interrupts
}
 80084c2:	bd10      	pop	{r4, pc}
        rtc_awake_from_off(clock_source);  //  This will enable RTC.
 80084c4:	2005      	movs	r0, #5
 80084c6:	f7ff fea5 	bl	8008214 <rtc_awake_from_off>
        rtc_set_prescale_val(prescale);
 80084ca:	2020      	movs	r0, #32
 80084cc:	f7ff feec 	bl	80082a8 <rtc_set_prescale_val>
        rtc_set_counter_val(0);              //  Start counting millisecond ticks from 0
 80084d0:	2000      	movs	r0, #0
 80084d2:	f7ff ff03 	bl	80082dc <rtc_set_counter_val>
        rtc_set_alarm_time((uint32_t) -1);   //  Reset alarm to -1 or 0xffffffff so we don't trigger now
 80084d6:	f04f 30ff 	mov.w	r0, #4294967295
 80084da:	f7ff fed5 	bl	8008288 <rtc_set_alarm_time>
 80084de:	e7cb      	b.n	8008478 <alarm_setup+0x2c>
 80084e0:	20002578 	.word	0x20002578
 80084e4:	e000ed00 	.word	0xe000ed00
 80084e8:	080084f1 	.word	0x080084f1
 80084ec:	08008521 	.word	0x08008521

080084f0 <rtc_isr>:
volatile uint32_t platform_get_alarm(void) {
    //  Get alarm time.
    return rtc_get_alarm_val();
}

void rtc_isr(void) {
 80084f0:	b508      	push	{r3, lr}
    //  Interrupt Service Routine for RTC Tick, Alarm, Overflow.  Don't call any I/O functions here.
    //  Alarm handled by rtc_alarm_isr()
    if (rtc_check_flag(RTC_SEC)) {
 80084f2:	2000      	movs	r0, #0
 80084f4:	f7ff ff5c 	bl	80083b0 <rtc_check_flag>
 80084f8:	b900      	cbnz	r0, 80084fc <rtc_isr+0xc>
        tickCount++;
        //  Call the tick function.
        if (tickFunc != NULL) { tickFunc(); }
        return;
    }
}
 80084fa:	bd08      	pop	{r3, pc}
        rtc_clear_flag(RTC_SEC);
 80084fc:	2000      	movs	r0, #0
 80084fe:	f7ff ff3d 	bl	800837c <rtc_clear_flag>
        tickCount++;
 8008502:	4a05      	ldr	r2, [pc, #20]	; (8008518 <rtc_isr+0x28>)
 8008504:	6813      	ldr	r3, [r2, #0]
 8008506:	3301      	adds	r3, #1
 8008508:	6013      	str	r3, [r2, #0]
        if (tickFunc != NULL) { tickFunc(); }
 800850a:	4b04      	ldr	r3, [pc, #16]	; (800851c <rtc_isr+0x2c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0f3      	beq.n	80084fa <rtc_isr+0xa>
 8008512:	4798      	blx	r3
 8008514:	e7f1      	b.n	80084fa <rtc_isr+0xa>
 8008516:	bf00      	nop
 8008518:	2000257c 	.word	0x2000257c
 800851c:	20002580 	.word	0x20002580

08008520 <rtc_alarm_isr>:

void rtc_alarm_isr(void) {
 8008520:	b508      	push	{r3, lr}
    //  Interrupt Service Routine for RTC Alarm Wakeup.  Don't call any I/O functions here.
    //  The RTC alarm appears as EXTI 17 which must be reset independently of the RTC alarm flag.
    exti_reset_request(EXTI17);
 8008522:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008526:	f7ff fe53 	bl	80081d0 <exti_reset_request>
    rtc_clear_flag(RTC_ALR);
 800852a:	2001      	movs	r0, #1
 800852c:	f7ff ff26 	bl	800837c <rtc_clear_flag>
    alarmCount++;
 8008530:	4a04      	ldr	r2, [pc, #16]	; (8008544 <rtc_alarm_isr+0x24>)
 8008532:	6813      	ldr	r3, [r2, #0]
 8008534:	3301      	adds	r3, #1
 8008536:	6013      	str	r3, [r2, #0]
    //  Call the alarm function.
    if (alarmFunc != NULL) { alarmFunc(); }
 8008538:	4b03      	ldr	r3, [pc, #12]	; (8008548 <rtc_alarm_isr+0x28>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	b103      	cbz	r3, 8008540 <rtc_alarm_isr+0x20>
 800853e:	4798      	blx	r3
}
 8008540:	bd08      	pop	{r3, pc}
 8008542:	bf00      	nop
 8008544:	20002570 	.word	0x20002570
 8008548:	20002574 	.word	0x20002574

0800854c <platform_start_timer>:
void platform_start_timer(void (*tickFunc0)(void), void (*alarmFunc0)(void)) {
 800854c:	b508      	push	{r3, lr}
    tickFunc = tickFunc0;    //  Allow tickFunc to be modified at every call to platform_start_timer().
 800854e:	4b08      	ldr	r3, [pc, #32]	; (8008570 <platform_start_timer+0x24>)
 8008550:	6018      	str	r0, [r3, #0]
    alarmFunc = alarmFunc0;  //  Allow alarmFunc to be modified at every call to platform_start_timer().
 8008552:	4b08      	ldr	r3, [pc, #32]	; (8008574 <platform_start_timer+0x28>)
 8008554:	6019      	str	r1, [r3, #0]
    if (timerStarted) { return; }
 8008556:	4b08      	ldr	r3, [pc, #32]	; (8008578 <platform_start_timer+0x2c>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	b103      	cbz	r3, 800855e <platform_start_timer+0x12>
}
 800855c:	bd08      	pop	{r3, pc}
    timerStarted = true;
 800855e:	4b06      	ldr	r3, [pc, #24]	; (8008578 <platform_start_timer+0x2c>)
 8008560:	2201      	movs	r2, #1
 8008562:	701a      	strb	r2, [r3, #0]
    console_printf("platform_start_timer\n");
 8008564:	4805      	ldr	r0, [pc, #20]	; (800857c <platform_start_timer+0x30>)
 8008566:	f7fb fd19 	bl	8003f9c <console_printf>
    alarm_setup();
 800856a:	f7ff ff6f 	bl	800844c <alarm_setup>
 800856e:	e7f5      	b.n	800855c <platform_start_timer+0x10>
 8008570:	20002580 	.word	0x20002580
 8008574:	20002574 	.word	0x20002574
 8008578:	20002584 	.word	0x20002584
 800857c:	0800f66c 	.word	0x0800f66c

08008580 <platform_set_alarm>:
void platform_set_alarm(uint32_t millisec) {
 8008580:	b510      	push	{r4, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	4604      	mov	r4, r0
    if (!alarmFunc) { console_printf("alm? "); }
 8008586:	4b09      	ldr	r3, [pc, #36]	; (80085ac <platform_set_alarm+0x2c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	b153      	cbz	r3, 80085a2 <platform_set_alarm+0x22>
    volatile uint32_t now = rtc_get_counter_val();
 800858c:	f7ff fe9c 	bl	80082c8 <rtc_get_counter_val>
 8008590:	9001      	str	r0, [sp, #4]
    pwr_disable_backup_domain_write_protect();
 8008592:	f7ff fd63 	bl	800805c <pwr_disable_backup_domain_write_protect>
    rtc_set_alarm_time(now + millisec);
 8008596:	9801      	ldr	r0, [sp, #4]
 8008598:	4420      	add	r0, r4
 800859a:	f7ff fe75 	bl	8008288 <rtc_set_alarm_time>
}
 800859e:	b002      	add	sp, #8
 80085a0:	bd10      	pop	{r4, pc}
    if (!alarmFunc) { console_printf("alm? "); }
 80085a2:	4803      	ldr	r0, [pc, #12]	; (80085b0 <platform_set_alarm+0x30>)
 80085a4:	f7fb fcfa 	bl	8003f9c <console_printf>
 80085a8:	e7f0      	b.n	800858c <platform_set_alarm+0xc>
 80085aa:	bf00      	nop
 80085ac:	20002574 	.word	0x20002574
 80085b0:	0800f664 	.word	0x0800f664

080085b4 <json_helper_set_array>:
#include <sensor_coap/sensor_coap.h>
#include <mynewt_rust/json_helper.h>

//  Assume we are writing an object now.  Write the key name and start a child array.
//  {a:b --> {a:b, key:[
void json_helper_set_array(void *object, const char *key) {
 80085b4:	b510      	push	{r4, lr}
    assert(key);
 80085b6:	b139      	cbz	r1, 80085c8 <json_helper_set_array+0x14>
    //  console_printf("json_helper_set_array: %s\n", key); ////
    json_rep_set_array_k(object, (char *) key);
 80085b8:	4c06      	ldr	r4, [pc, #24]	; (80085d4 <json_helper_set_array+0x20>)
 80085ba:	4620      	mov	r0, r4
 80085bc:	f7fd f810 	bl	80055e0 <json_encode_array_name>
 80085c0:	4620      	mov	r0, r4
 80085c2:	f7fd f811 	bl	80055e8 <json_encode_array_start>
}
 80085c6:	bd10      	pop	{r4, pc}
    assert(key);
 80085c8:	2300      	movs	r3, #0
 80085ca:	461a      	mov	r2, r3
 80085cc:	4619      	mov	r1, r3
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fd fc10 	bl	8005df4 <__assert_func>
 80085d4:	20002da8 	.word	0x20002da8

080085d8 <json_helper_close_array>:

//  End the child array and resume writing the parent object.
//  {a:b, key:[... --> {a:b, key:[...]
void json_helper_close_array(void *object, const char *key) {
 80085d8:	b508      	push	{r3, lr}
    assert(key);
 80085da:	b119      	cbz	r1, 80085e4 <json_helper_close_array+0xc>
    json_rep_close_array(object, key);
 80085dc:	4804      	ldr	r0, [pc, #16]	; (80085f0 <json_helper_close_array+0x18>)
 80085de:	f7fd f813 	bl	8005608 <json_encode_array_finish>
}
 80085e2:	bd08      	pop	{r3, pc}
    assert(key);
 80085e4:	2300      	movs	r3, #0
 80085e6:	461a      	mov	r2, r3
 80085e8:	4619      	mov	r1, r3
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fd fc02 	bl	8005df4 <__assert_func>
 80085f0:	20002da8 	.word	0x20002da8

080085f4 <json_helper_object_array_start_item>:

//  Assume we have called set_array.  Start an array item, assumed to be an object.
//  [... --> [...,
void json_helper_object_array_start_item(const char *key) {
 80085f4:	b508      	push	{r3, lr}
    assert(key);
 80085f6:	b118      	cbz	r0, 8008600 <json_helper_object_array_start_item+0xc>
    //  console_printf("json_helper_object_array_start_item: %s\n", key); ////
    json_rep_object_array_start_item(key);
 80085f8:	4804      	ldr	r0, [pc, #16]	; (800860c <json_helper_object_array_start_item+0x18>)
 80085fa:	f7fc fe63 	bl	80052c4 <json_encode_object_start>
}
 80085fe:	bd08      	pop	{r3, pc}
    assert(key);
 8008600:	2300      	movs	r3, #0
 8008602:	461a      	mov	r2, r3
 8008604:	4619      	mov	r1, r3
 8008606:	4618      	mov	r0, r3
 8008608:	f7fd fbf4 	bl	8005df4 <__assert_func>
 800860c:	20002da8 	.word	0x20002da8

08008610 <json_helper_object_array_end_item>:

//  End an array item, assumed to be an object.
//  [... --> [...,
void json_helper_object_array_end_item(const char *key) {
 8008610:	b508      	push	{r3, lr}
    assert(key);
 8008612:	b118      	cbz	r0, 800861c <json_helper_object_array_end_item+0xc>
    json_rep_object_array_end_item(key);
 8008614:	4804      	ldr	r0, [pc, #16]	; (8008628 <json_helper_object_array_end_item+0x18>)
 8008616:	f7fc ffd3 	bl	80055c0 <json_encode_object_finish>
}
 800861a:	bd08      	pop	{r3, pc}
    assert(key);
 800861c:	2300      	movs	r3, #0
 800861e:	461a      	mov	r2, r3
 8008620:	4619      	mov	r1, r3
 8008622:	4618      	mov	r0, r3
 8008624:	f7fd fbe6 	bl	8005df4 <__assert_func>
 8008628:	20002da8 	.word	0x20002da8

0800862c <json_helper_set_int>:

//  Encode a value into JSON: int, unsigned int, float, text, ...
void json_helper_set_int(void *object, const char *key, uint64_t value) {
 800862c:	b538      	push	{r3, r4, r5, lr}
    assert(key);
 800862e:	b159      	cbz	r1, 8008648 <json_helper_set_int+0x1c>
 8008630:	4614      	mov	r4, r2
 8008632:	461d      	mov	r5, r3
    //  console_printf("json_helper_set_int: %s\n", key); ////
    json_rep_set_int_k(object, (char *) key, value);
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <json_helper_set_int+0x28>)
 8008636:	2202      	movs	r2, #2
 8008638:	705a      	strb	r2, [r3, #1]
 800863a:	e9c3 4502 	strd	r4, r5, [r3, #8]
 800863e:	461a      	mov	r2, r3
 8008640:	4805      	ldr	r0, [pc, #20]	; (8008658 <json_helper_set_int+0x2c>)
 8008642:	f7fc fe87 	bl	8005354 <json_encode_object_entry>
}
 8008646:	bd38      	pop	{r3, r4, r5, pc}
    assert(key);
 8008648:	2300      	movs	r3, #0
 800864a:	461a      	mov	r2, r3
 800864c:	4619      	mov	r1, r3
 800864e:	4618      	mov	r0, r3
 8008650:	f7fd fbd0 	bl	8005df4 <__assert_func>
 8008654:	20002df8 	.word	0x20002df8
 8008658:	20002da8 	.word	0x20002da8

0800865c <json_helper_set_text_string>:
void json_helper_set_float(void *object, const char *key, float value) {
    assert(key);
    json_rep_set_float_k(object, (char *) key, value);
}

void json_helper_set_text_string(void *object, const char *key, const char *value) {
 800865c:	b570      	push	{r4, r5, r6, lr}
    assert(key);
 800865e:	b181      	cbz	r1, 8008682 <json_helper_set_text_string+0x26>
 8008660:	4615      	mov	r5, r2
 8008662:	460e      	mov	r6, r1
    assert(value);
 8008664:	b19a      	cbz	r2, 800868e <json_helper_set_text_string+0x32>
    //  console_printf("json_helper_set_text_string: %s\n", key); ////
    json_rep_set_text_string_k(object, (char *) key, value);
 8008666:	4c0d      	ldr	r4, [pc, #52]	; (800869c <json_helper_set_text_string+0x40>)
 8008668:	2303      	movs	r3, #3
 800866a:	7063      	strb	r3, [r4, #1]
 800866c:	4610      	mov	r0, r2
 800866e:	f7ff f887 	bl	8007780 <strlen>
 8008672:	8060      	strh	r0, [r4, #2]
 8008674:	60a5      	str	r5, [r4, #8]
 8008676:	4622      	mov	r2, r4
 8008678:	4631      	mov	r1, r6
 800867a:	4809      	ldr	r0, [pc, #36]	; (80086a0 <json_helper_set_text_string+0x44>)
 800867c:	f7fc fe6a 	bl	8005354 <json_encode_object_entry>
}
 8008680:	bd70      	pop	{r4, r5, r6, pc}
    assert(key);
 8008682:	2300      	movs	r3, #0
 8008684:	461a      	mov	r2, r3
 8008686:	4619      	mov	r1, r3
 8008688:	4618      	mov	r0, r3
 800868a:	f7fd fbb3 	bl	8005df4 <__assert_func>
    assert(value);
 800868e:	2300      	movs	r3, #0
 8008690:	461a      	mov	r2, r3
 8008692:	4619      	mov	r1, r3
 8008694:	4618      	mov	r0, r3
 8008696:	f7fd fbad 	bl	8005df4 <__assert_func>
 800869a:	bf00      	nop
 800869c:	20002df8 	.word	0x20002df8
 80086a0:	20002da8 	.word	0x20002da8

080086a4 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
 80086a4:	b508      	push	{r3, lr}
    sysinit();
 80086a6:	f7fc fdf5 	bl	8005294 <sysinit_start>
 80086aa:	f000 f830 	bl	800870e <sysinit_app>
 80086ae:	f7fc fdf7 	bl	80052a0 <sysinit_end>
}
 80086b2:	bd08      	pop	{r3, pc}

080086b4 <get_temp_raw_data>:
#include <custom_sensor/custom_sensor.h>
#include <mynewt_rust/sensor_helper.h>

///  Interpret `sensor_data` as a `sensor_temp_raw_data` struct that contains raw temp.
///  Copy the sensor data into `dest`.  Return 0 if successful.
int get_temp_raw_data(void *sensor_data, struct sensor_temp_raw_data *dest) {
 80086b4:	b508      	push	{r3, lr}
    assert(sensor_data); assert(dest);
 80086b6:	b130      	cbz	r0, 80086c6 <get_temp_raw_data+0x12>
 80086b8:	b159      	cbz	r1, 80086d2 <get_temp_raw_data+0x1e>
    struct sensor_temp_raw_data *src = (struct sensor_temp_raw_data *) sensor_data;
    memcpy(dest, src, sizeof(struct sensor_temp_raw_data));
 80086ba:	6802      	ldr	r2, [r0, #0]
 80086bc:	600a      	str	r2, [r1, #0]
 80086be:	7903      	ldrb	r3, [r0, #4]
 80086c0:	710b      	strb	r3, [r1, #4]
    return 0;
}
 80086c2:	2000      	movs	r0, #0
 80086c4:	bd08      	pop	{r3, pc}
    assert(sensor_data); assert(dest);
 80086c6:	2300      	movs	r3, #0
 80086c8:	461a      	mov	r2, r3
 80086ca:	4619      	mov	r1, r3
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fd fb91 	bl	8005df4 <__assert_func>
 80086d2:	2300      	movs	r3, #0
 80086d4:	461a      	mov	r2, r3
 80086d6:	4619      	mov	r1, r3
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fd fb8b 	bl	8005df4 <__assert_func>

080086de <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
 80086de:	b570      	push	{r4, r5, r6, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	460c      	mov	r4, r1
 80086e4:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
 80086e6:	b29d      	uxth	r5, r3
 80086e8:	9b07      	ldr	r3, [sp, #28]
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	4603      	mov	r3, r0
 80086ee:	9a06      	ldr	r2, [sp, #24]
 80086f0:	4629      	mov	r1, r5
 80086f2:	4620      	mov	r0, r4
 80086f4:	f7fe f98c 	bl	8006a10 <os_mempool_init>
    if (rc != 0) {
 80086f8:	b108      	cbz	r0, 80086fe <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
 80086fa:	b002      	add	sp, #8
 80086fc:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
 80086fe:	462b      	mov	r3, r5
 8008700:	9a06      	ldr	r2, [sp, #24]
 8008702:	b292      	uxth	r2, r2
 8008704:	4621      	mov	r1, r4
 8008706:	4630      	mov	r0, r6
 8008708:	f7fd ff63 	bl	80065d2 <os_mbuf_pool_init>
 800870c:	e7f5      	b.n	80086fa <mem_init_mbuf_pool+0x1c>

0800870e <sysinit_app>:
void bc95g_create(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
 800870e:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
 8008710:	f7fd fcd2 	bl	80060b8 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
 8008714:	f003 fc02 	bl	800bf1c <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
 8008718:	f7fb fc1a 	bl	8003f50 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
 800871c:	f003 fd44 	bl	800c1a8 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
 8008720:	f003 fc34 	bl	800bf8c <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
 8008724:	f7fc fd7a 	bl	800521c <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
 8008728:	f003 fb82 	bl	800be30 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
 800872c:	f003 fb81 	bl	800be32 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
 8008730:	f003 fb80 	bl	800be34 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
 8008734:	f003 fb7f 	bl	800be36 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
 8008738:	f003 fb7e 	bl	800be38 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
 800873c:	f001 fe8e 	bl	800a45c <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
 8008740:	f7fd f906 	bl	8005950 <sensor_pkg_init>

    /*** Stage 610 */
    /* 610.0: stm32f1_adc_create (libs/adc_stm32f1) */
    stm32f1_adc_create();
 8008744:	f001 fe8c 	bl	800a460 <stm32f1_adc_create>

    /*** Stage 620 */
    /* 620.0: temp_stm32_create (libs/temp_stm32) */
    temp_stm32_create();
 8008748:	f003 f9c2 	bl	800bad0 <temp_stm32_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
 800874c:	f7fc f816 	bl	800477c <sensor_network_init>

    /*** Stage 650 */
    /* 650.0: bc95g_create (libs/bc95g) */
    bc95g_create();
 8008750:	f002 f8d0 	bl	800a8f4 <bc95g_create>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
 8008754:	f7fb fc7a 	bl	800404c <init_sensor_coap>
}
 8008758:	bd08      	pop	{r3, pc}
	...

0800875c <LL_GPIO_AF_DisableRemap_USART2>:
  * @note  DISABLE: No remap (CTS/PA0, RTS/PA1, TX/PA2, RX/PA3, CK/PA4)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_DisableRemap_USART2(void)
{
  CLEAR_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP);
 800875c:	4a02      	ldr	r2, [pc, #8]	; (8008768 <LL_GPIO_AF_DisableRemap_USART2+0xc>)
 800875e:	6853      	ldr	r3, [r2, #4]
 8008760:	f023 0308 	bic.w	r3, r3, #8
 8008764:	6053      	str	r3, [r2, #4]
}
 8008766:	4770      	bx	lr
 8008768:	40010000 	.word	0x40010000

0800876c <clock_config>:
    return dump_cfg;
}

static void
clock_config(void)
{
 800876c:	b500      	push	{lr}
 800876e:	b091      	sub	sp, #68	; 0x44
    RCC_ClkInitTypeDef clkinitstruct = { 0 };
 8008770:	2100      	movs	r1, #0
 8008772:	910b      	str	r1, [sp, #44]	; 0x2c
 8008774:	910c      	str	r1, [sp, #48]	; 0x30
 8008776:	910d      	str	r1, [sp, #52]	; 0x34
 8008778:	910e      	str	r1, [sp, #56]	; 0x38
 800877a:	910f      	str	r1, [sp, #60]	; 0x3c
    RCC_OscInitTypeDef oscinitstruct = { 0 };
 800877c:	2220      	movs	r2, #32
 800877e:	a802      	add	r0, sp, #8
 8008780:	f7fe ffd5 	bl	800772e <memset>

    /* Configure PLL ------------------------------------------------------*/
    /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
    /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
    /* Enable HSI and activate PLL with HSi_DIV2 as source */
    oscinitstruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008784:	2302      	movs	r3, #2
 8008786:	9301      	str	r3, [sp, #4]
    oscinitstruct.HSEState = RCC_HSE_OFF;
    oscinitstruct.LSEState = RCC_LSE_OFF;
    oscinitstruct.HSIState = RCC_HSI_ON;
 8008788:	2201      	movs	r2, #1
 800878a:	9205      	str	r2, [sp, #20]
    oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800878c:	2210      	movs	r2, #16
 800878e:	9206      	str	r2, [sp, #24]
    oscinitstruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    oscinitstruct.PLL.PLLState = RCC_PLL_ON;
 8008790:	9308      	str	r3, [sp, #32]
    oscinitstruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
    oscinitstruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8008792:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8008796:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK) {
 8008798:	a801      	add	r0, sp, #4
 800879a:	f001 fa5b 	bl	8009c54 <HAL_RCC_OscConfig>
 800879e:	b990      	cbnz	r0, 80087c6 <clock_config+0x5a>
        assert(0);
    }

    /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
       clocks dividers */
    clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80087a0:	230f      	movs	r3, #15
 80087a2:	930b      	str	r3, [sp, #44]	; 0x2c
                               RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
    clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80087a4:	2102      	movs	r1, #2
 80087a6:	910c      	str	r1, [sp, #48]	; 0x30
    clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80087a8:	2300      	movs	r3, #0
 80087aa:	930d      	str	r3, [sp, #52]	; 0x34
    clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80087ac:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80087b0:	930f      	str	r3, [sp, #60]	; 0x3c
    clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80087b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087b6:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) {
 80087b8:	a80b      	add	r0, sp, #44	; 0x2c
 80087ba:	f001 fc71 	bl	800a0a0 <HAL_RCC_ClockConfig>
 80087be:	b940      	cbnz	r0, 80087d2 <clock_config+0x66>
        assert(0);
    }
}
 80087c0:	b011      	add	sp, #68	; 0x44
 80087c2:	f85d fb04 	ldr.w	pc, [sp], #4
        assert(0);
 80087c6:	2300      	movs	r3, #0
 80087c8:	461a      	mov	r2, r3
 80087ca:	4619      	mov	r1, r3
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fd fb11 	bl	8005df4 <__assert_func>
        assert(0);
 80087d2:	2300      	movs	r3, #0
 80087d4:	461a      	mov	r2, r3
 80087d6:	4619      	mov	r1, r3
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fd fb0b 	bl	8005df4 <__assert_func>
	...

080087e0 <hal_bsp_flash_dev>:
    if (id != 0) {
 80087e0:	b908      	cbnz	r0, 80087e6 <hal_bsp_flash_dev+0x6>
    return &stm32_flash_dev;
 80087e2:	4802      	ldr	r0, [pc, #8]	; (80087ec <hal_bsp_flash_dev+0xc>)
}
 80087e4:	4770      	bx	lr
        return NULL;
 80087e6:	2000      	movs	r0, #0
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	0800f6a4 	.word	0x0800f6a4

080087f0 <hal_bsp_init>:

void
hal_bsp_init(void)
{
 80087f0:	b500      	push	{lr}
 80087f2:	b083      	sub	sp, #12
    int rc;

    (void)rc;

    clock_config();
 80087f4:	f7ff ffba 	bl	800876c <clock_config>

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &hal_uart0, "uart0",
 80087f8:	4b11      	ldr	r3, [pc, #68]	; (8008840 <hal_bsp_init+0x50>)
 80087fa:	9301      	str	r3, [sp, #4]
 80087fc:	4b11      	ldr	r3, [pc, #68]	; (8008844 <hal_bsp_init+0x54>)
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	2300      	movs	r3, #0
 8008802:	2201      	movs	r2, #1
 8008804:	4910      	ldr	r1, [pc, #64]	; (8008848 <hal_bsp_init+0x58>)
 8008806:	4811      	ldr	r0, [pc, #68]	; (800884c <hal_bsp_init+0x5c>)
 8008808:	f7fd fd80 	bl	800630c <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *)&uart_cfg[0]);
    assert(rc == 0);
 800880c:	b958      	cbnz	r0, 8008826 <hal_bsp_init+0x36>
#endif

#if MYNEWT_VAL(TIMER_0)
    hal_timer_init(0, TIM2);
 800880e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008812:	2000      	movs	r0, #0
 8008814:	f000 fa6a 	bl	8008cec <hal_timer_init>
#if MYNEWT_VAL(TIMER_2)
    hal_timer_init(2, TIM4);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
 8008818:	480d      	ldr	r0, [pc, #52]	; (8008850 <hal_bsp_init+0x60>)
 800881a:	f7fd fd19 	bl	8006250 <os_cputime_init>
    assert(rc == 0);
 800881e:	b940      	cbnz	r0, 8008832 <hal_bsp_init+0x42>
#if MYNEWT_VAL(I2C_0)
    rc = hal_i2c_init(0, &i2c_cfg0);
    assert(rc == 0);
#endif

}
 8008820:	b003      	add	sp, #12
 8008822:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 8008826:	2300      	movs	r3, #0
 8008828:	461a      	mov	r2, r3
 800882a:	4619      	mov	r1, r3
 800882c:	4618      	mov	r0, r3
 800882e:	f7fd fae1 	bl	8005df4 <__assert_func>
    assert(rc == 0);
 8008832:	2300      	movs	r3, #0
 8008834:	461a      	mov	r2, r3
 8008836:	4619      	mov	r1, r3
 8008838:	4618      	mov	r0, r3
 800883a:	f7fd fadb 	bl	8005df4 <__assert_func>
 800883e:	bf00      	nop
 8008840:	0800f68c 	.word	0x0800f68c
 8008844:	08008999 	.word	0x08008999
 8008848:	0800f684 	.word	0x0800f684
 800884c:	20002588 	.word	0x20002588
 8008850:	000f4240 	.word	0x000f4240

08008854 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
 8008854:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 8008856:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008858:	b118      	cbz	r0, 8008862 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
 800885a:	3801      	subs	r0, #1
 800885c:	f000 fc04 	bl	8009068 <hal_uart_blocking_tx>
}
 8008860:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
 8008862:	2300      	movs	r3, #0
 8008864:	461a      	mov	r2, r3
 8008866:	4619      	mov	r1, r3
 8008868:	4618      	mov	r0, r3
 800886a:	f7fd fac3 	bl	8005df4 <__assert_func>

0800886e <uart_hal_start_rx>:
{
 800886e:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 8008870:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008872:	b118      	cbz	r0, 800887c <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
 8008874:	3801      	subs	r0, #1
 8008876:	f000 fba9 	bl	8008fcc <hal_uart_start_rx>
}
 800887a:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
 800887c:	2300      	movs	r3, #0
 800887e:	461a      	mov	r2, r3
 8008880:	4619      	mov	r1, r3
 8008882:	4618      	mov	r0, r3
 8008884:	f7fd fab6 	bl	8005df4 <__assert_func>

08008888 <uart_hal_start_tx>:
{
 8008888:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 800888a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800888c:	b118      	cbz	r0, 8008896 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
 800888e:	3801      	subs	r0, #1
 8008890:	f000 fbca 	bl	8009028 <hal_uart_start_tx>
}
 8008894:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
 8008896:	2300      	movs	r3, #0
 8008898:	461a      	mov	r2, r3
 800889a:	4619      	mov	r1, r3
 800889c:	4618      	mov	r0, r3
 800889e:	f7fd faa9 	bl	8005df4 <__assert_func>

080088a2 <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
 80088a2:	b530      	push	{r4, r5, lr}
 80088a4:	b083      	sub	sp, #12
    return (intptr_t)(dev->ud_priv) - 1;
 80088a6:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_dev *dev = (struct uart_dev *)odev;
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
 80088a8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80088aa:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 80088ae:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
 80088b2:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
 80088b6:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
 80088ba:	9001      	str	r0, [sp, #4]
 80088bc:	9500      	str	r5, [sp, #0]
 80088be:	1e60      	subs	r0, r4, #1
 80088c0:	f000 fbee 	bl	80090a0 <hal_uart_config>
    if (rc) {
 80088c4:	4603      	mov	r3, r0
 80088c6:	b910      	cbnz	r0, 80088ce <uart_hal_resume+0x2c>
        return OS_EINVAL;
    }

    return OS_OK;
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	b003      	add	sp, #12
 80088cc:	bd30      	pop	{r4, r5, pc}
        return OS_EINVAL;
 80088ce:	2302      	movs	r3, #2
 80088d0:	e7fa      	b.n	80088c8 <uart_hal_resume+0x26>

080088d2 <uart_hal_suspend>:
{
 80088d2:	b570      	push	{r4, r5, r6, lr}
 80088d4:	4606      	mov	r6, r0
 80088d6:	460c      	mov	r4, r1
 80088d8:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
 80088da:	f7fe fd63 	bl	80073a4 <os_time_get>
 80088de:	1a20      	subs	r0, r4, r0
 80088e0:	2800      	cmp	r0, #0
 80088e2:	dc08      	bgt.n	80088f6 <uart_hal_suspend+0x24>
 80088e4:	b155      	cbz	r5, 80088fc <uart_hal_suspend+0x2a>
    return (intptr_t)(dev->ud_priv) - 1;
 80088e6:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
 80088e8:	3801      	subs	r0, #1
 80088ea:	f000 fd71 	bl	80093d0 <hal_uart_close>
    if (rc) {
 80088ee:	4603      	mov	r3, r0
 80088f0:	b110      	cbz	r0, 80088f8 <uart_hal_suspend+0x26>
        return OS_EINVAL;
 80088f2:	2302      	movs	r3, #2
 80088f4:	e000      	b.n	80088f8 <uart_hal_suspend+0x26>
        return OS_EINVAL;
 80088f6:	2302      	movs	r3, #2
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
 80088fc:	2302      	movs	r3, #2
 80088fe:	e7fb      	b.n	80088f8 <uart_hal_suspend+0x26>

08008900 <uart_hal_close>:
{
 8008900:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
 8008902:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
 8008904:	3801      	subs	r0, #1
 8008906:	f000 fd63 	bl	80093d0 <hal_uart_close>
    if (rc) {
 800890a:	4603      	mov	r3, r0
 800890c:	b908      	cbnz	r0, 8008912 <uart_hal_close+0x12>
}
 800890e:	4618      	mov	r0, r3
 8008910:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
 8008912:	2302      	movs	r3, #2
 8008914:	e7fb      	b.n	800890e <uart_hal_close+0xe>

08008916 <uart_hal_open>:
{
 8008916:	b530      	push	{r4, r5, lr}
 8008918:	b083      	sub	sp, #12
 800891a:	4605      	mov	r5, r0
    assert(dev->ud_priv);
 800891c:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800891e:	2800      	cmp	r0, #0
 8008920:	d02c      	beq.n	800897c <uart_hal_open+0x66>
 8008922:	4614      	mov	r4, r2
    if (!uc) {
 8008924:	2a00      	cmp	r2, #0
 8008926:	d02f      	beq.n	8008988 <uart_hal_open+0x72>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
 8008928:	7eeb      	ldrb	r3, [r5, #27]
 800892a:	f013 0f02 	tst.w	r3, #2
 800892e:	d12d      	bne.n	800898c <uart_hal_open+0x76>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
 8008930:	7913      	ldrb	r3, [r2, #4]
 8008932:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
 8008936:	79d3      	ldrb	r3, [r2, #7]
 8008938:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
 800893c:	7993      	ldrb	r3, [r2, #6]
 800893e:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
 8008942:	6813      	ldr	r3, [r2, #0]
 8008944:	632b      	str	r3, [r5, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
 8008946:	7953      	ldrb	r3, [r2, #5]
 8008948:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
 800894c:	6953      	ldr	r3, [r2, #20]
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	68d3      	ldr	r3, [r2, #12]
 8008952:	6912      	ldr	r2, [r2, #16]
 8008954:	68a1      	ldr	r1, [r4, #8]
 8008956:	3801      	subs	r0, #1
 8008958:	f000 fb16 	bl	8008f88 <hal_uart_init_cbs>
    if (rc) {
 800895c:	b9d0      	cbnz	r0, 8008994 <uart_hal_open+0x7e>
    return (intptr_t)(dev->ud_priv) - 1;
 800895e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
 8008960:	6821      	ldr	r1, [r4, #0]
 8008962:	7922      	ldrb	r2, [r4, #4]
 8008964:	7963      	ldrb	r3, [r4, #5]
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
 8008966:	79a5      	ldrb	r5, [r4, #6]
 8008968:	79e4      	ldrb	r4, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
 800896a:	9401      	str	r4, [sp, #4]
 800896c:	9500      	str	r5, [sp, #0]
 800896e:	3801      	subs	r0, #1
 8008970:	f000 fb96 	bl	80090a0 <hal_uart_config>
    if (rc) {
 8008974:	4603      	mov	r3, r0
 8008976:	b150      	cbz	r0, 800898e <uart_hal_open+0x78>
        return OS_EINVAL;
 8008978:	2302      	movs	r3, #2
 800897a:	e008      	b.n	800898e <uart_hal_open+0x78>
    assert(dev->ud_priv);
 800897c:	2300      	movs	r3, #0
 800897e:	461a      	mov	r2, r3
 8008980:	4619      	mov	r1, r3
 8008982:	4618      	mov	r0, r3
 8008984:	f7fd fa36 	bl	8005df4 <__assert_func>
        return OS_EINVAL;
 8008988:	2302      	movs	r3, #2
 800898a:	e000      	b.n	800898e <uart_hal_open+0x78>
        return OS_EBUSY;
 800898c:	230b      	movs	r3, #11
}
 800898e:	4618      	mov	r0, r3
 8008990:	b003      	add	sp, #12
 8008992:	bd30      	pop	{r4, r5, pc}
        return OS_EINVAL;
 8008994:	2302      	movs	r3, #2
 8008996:	e7fa      	b.n	800898e <uart_hal_open+0x78>

08008998 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	4604      	mov	r4, r0
 800899c:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
 800899e:	69c5      	ldr	r5, [r0, #28]
 80089a0:	4628      	mov	r0, r5
 80089a2:	f7fe feed 	bl	8007780 <strlen>
 80089a6:	3801      	subs	r0, #1
 80089a8:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((int) ch)) {
 80089aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089ae:	2b09      	cmp	r3, #9
 80089b0:	d816      	bhi.n	80089e0 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
 80089b2:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
 80089b6:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
 80089b8:	4b0a      	ldr	r3, [pc, #40]	; (80089e4 <uart_hal_init+0x4c>)
 80089ba:	6023      	str	r3, [r4, #0]
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <uart_hal_init+0x50>)
 80089be:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
 80089c0:	4b0a      	ldr	r3, [pc, #40]	; (80089ec <uart_hal_init+0x54>)
 80089c2:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
 80089c4:	4b0a      	ldr	r3, [pc, #40]	; (80089f0 <uart_hal_init+0x58>)
 80089c6:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
 80089c8:	4b0a      	ldr	r3, [pc, #40]	; (80089f4 <uart_hal_init+0x5c>)
 80089ca:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
 80089cc:	4b0a      	ldr	r3, [pc, #40]	; (80089f8 <uart_hal_init+0x60>)
 80089ce:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
 80089d0:	4b0a      	ldr	r3, [pc, #40]	; (80089fc <uart_hal_init+0x64>)
 80089d2:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
 80089d4:	4631      	mov	r1, r6
 80089d6:	3830      	subs	r0, #48	; 0x30
 80089d8:	f000 fcea 	bl	80093b0 <hal_uart_init>

    return OS_OK;
 80089dc:	2000      	movs	r0, #0
}
 80089de:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
 80089e0:	2002      	movs	r0, #2
 80089e2:	e7fc      	b.n	80089de <uart_hal_init+0x46>
 80089e4:	08008917 	.word	0x08008917
 80089e8:	08008901 	.word	0x08008901
 80089ec:	080088d3 	.word	0x080088d3
 80089f0:	080088a3 	.word	0x080088a3
 80089f4:	08008889 	.word	0x08008889
 80089f8:	0800886f 	.word	0x0800886f
 80089fc:	08008855 	.word	0x08008855

08008a00 <stm32_flash_sector_info>:
        uint32_t *address, uint32_t *sz)
{
    (void)dev;

#if FLASH_IS_LINEAR
    *address = dev->hf_base_addr + _FLASH_SECTOR_SIZE * idx;
 8008a00:	6840      	ldr	r0, [r0, #4]
 8008a02:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8008a06:	6011      	str	r1, [r2, #0]
    *sz = _FLASH_SECTOR_SIZE;
 8008a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a0c:	601a      	str	r2, [r3, #0]
    *address = stm32_flash_sectors[idx];
    *sz = stm32_flash_sectors[idx + 1] - stm32_flash_sectors[idx];
#endif

    return 0;
}
 8008a0e:	2000      	movs	r0, #0
 8008a10:	4770      	bx	lr

08008a12 <stm32_flash_init>:

static int
stm32_flash_init(const struct hal_flash *dev)
{
 8008a12:	b508      	push	{r3, lr}
    (void)dev;
    STM32_HAL_FLASH_INIT();
 8008a14:	f000 fe68 	bl	80096e8 <HAL_FLASH_Unlock>
    return 0;
}
 8008a18:	2000      	movs	r0, #0
 8008a1a:	bd08      	pop	{r3, pc}

08008a1c <stm32_flash_erase_sector>:
{
 8008a1c:	b508      	push	{r3, lr}
    return stm32_mcu_flash_erase_sector(dev, sector_address);
 8008a1e:	f001 fc87 	bl	800a330 <stm32_mcu_flash_erase_sector>
}
 8008a22:	bd08      	pop	{r3, pc}

08008a24 <stm32_flash_read>:
{
 8008a24:	b508      	push	{r3, lr}
 8008a26:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
 8008a28:	461a      	mov	r2, r3
 8008a2a:	f7fe fe73 	bl	8007714 <memcpy>
}
 8008a2e:	2000      	movs	r0, #0
 8008a30:	bd08      	pop	{r3, pc}
	...

08008a34 <stm32_flash_write_linear>:
{
 8008a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	4683      	mov	fp, r0
 8008a3c:	460f      	mov	r7, r1
 8008a3e:	4692      	mov	sl, r2
 8008a40:	461e      	mov	r6, r3
    align = dev->hf_align;
 8008a42:	f8d0 9010 	ldr.w	r9, [r0, #16]
    num_words = ((num_bytes - 1) >> 1) + 1;
 8008a46:	f103 38ff 	add.w	r8, r3, #4294967295
 8008a4a:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8008a4e:	f108 0801 	add.w	r8, r8, #1
    STM32_HAL_FLASH_CLEAR_ERRORS();
 8008a52:	4b1a      	ldr	r3, [pc, #104]	; (8008abc <stm32_flash_write_linear+0x88>)
 8008a54:	2235      	movs	r2, #53	; 0x35
 8008a56:	60da      	str	r2, [r3, #12]
    for (i = 0; i < num_words; i++) {
 8008a58:	2500      	movs	r5, #0
 8008a5a:	e013      	b.n	8008a84 <stm32_flash_write_linear+0x50>
            memcpy(&val, &((uint8_t *)src)[i * align], align);
 8008a5c:	4622      	mov	r2, r4
 8008a5e:	fb04 a105 	mla	r1, r4, r5, sl
 8008a62:	4668      	mov	r0, sp
 8008a64:	f7fe fe56 	bl	8007714 <memcpy>
        rc = HAL_FLASH_Program(FLASH_PROGRAM_TYPE, address, val);
 8008a68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	2001      	movs	r0, #1
 8008a70:	f000 fe84 	bl	800977c <HAL_FLASH_Program>
 8008a74:	4603      	mov	r3, r0
        if (rc != HAL_OK) {
 8008a76:	b9e8      	cbnz	r0, 8008ab4 <stm32_flash_write_linear+0x80>
        address += align;
 8008a78:	4427      	add	r7, r4
        num_bytes -= align;
 8008a7a:	1b36      	subs	r6, r6, r4
        if (!(i % 32)) {
 8008a7c:	f015 0f1f 	tst.w	r5, #31
 8008a80:	d014      	beq.n	8008aac <stm32_flash_write_linear+0x78>
    for (i = 0; i < num_words; i++) {
 8008a82:	3501      	adds	r5, #1
 8008a84:	4545      	cmp	r5, r8
 8008a86:	d214      	bcs.n	8008ab2 <stm32_flash_write_linear+0x7e>
        if (num_bytes < align) {
 8008a88:	fa5f f489 	uxtb.w	r4, r9
 8008a8c:	42a6      	cmp	r6, r4
 8008a8e:	d2e5      	bcs.n	8008a5c <stm32_flash_write_linear+0x28>
            memcpy(&val, &((uint8_t *)src)[i * align], num_bytes);
 8008a90:	4632      	mov	r2, r6
 8008a92:	fb04 a105 	mla	r1, r4, r5, sl
 8008a96:	4668      	mov	r0, sp
 8008a98:	f7fe fe3c 	bl	8007714 <memcpy>
            memset((uint32_t *)&val + num_bytes, dev->hf_erased_val, align - num_bytes);
 8008a9c:	1ba2      	subs	r2, r4, r6
 8008a9e:	f89b 1014 	ldrb.w	r1, [fp, #20]
 8008aa2:	eb0d 0086 	add.w	r0, sp, r6, lsl #2
 8008aa6:	f7fe fe42 	bl	800772e <memset>
 8008aaa:	e7dd      	b.n	8008a68 <stm32_flash_write_linear+0x34>
            hal_watchdog_tickle();
 8008aac:	f000 fcd0 	bl	8009450 <hal_watchdog_tickle>
 8008ab0:	e7e7      	b.n	8008a82 <stm32_flash_write_linear+0x4e>
    return 0;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	b003      	add	sp, #12
 8008ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abc:	40022000 	.word	0x40022000

08008ac0 <stm32_flash_write>:
    if (!num_bytes) {
 8008ac0:	b11b      	cbz	r3, 8008aca <stm32_flash_write+0xa>
{
 8008ac2:	b510      	push	{r4, lr}
    return stm32_flash_write_linear(dev, address, src, num_bytes);
 8008ac4:	f7ff ffb6 	bl	8008a34 <stm32_flash_write_linear>
}
 8008ac8:	bd10      	pop	{r4, pc}
        return -1;
 8008aca:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008ace:	4770      	bx	lr

08008ad0 <hal_debugger_connected>:
int
hal_debugger_connected(void)
{
    /* FIXME */
    return 0;
}
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	4770      	bx	lr

08008ad4 <hal_system_reset>:
{
 8008ad4:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
 8008ad6:	f7ff fffb 	bl	8008ad0 <hal_debugger_connected>
 8008ada:	b100      	cbz	r0, 8008ade <hal_system_reset+0xa>
            asm("bkpt");
 8008adc:	be00      	bkpt	0x0000
  __ASM volatile ("dsb 0xF":::"memory");
 8008ade:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008ae2:	4905      	ldr	r1, [pc, #20]	; (8008af8 <hal_system_reset+0x24>)
 8008ae4:	68ca      	ldr	r2, [r1, #12]
 8008ae6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008aea:	4b04      	ldr	r3, [pc, #16]	; (8008afc <hal_system_reset+0x28>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	60cb      	str	r3, [r1, #12]
 8008af0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008af4:	bf00      	nop
 8008af6:	e7fd      	b.n	8008af4 <hal_system_reset+0x20>
 8008af8:	e000ed00 	.word	0xe000ed00
 8008afc:	05fa0004 	.word	0x05fa0004

08008b00 <HAL_GetTick>:

uint32_t
HAL_GetTick(void)
{
 8008b00:	b508      	push	{r3, lr}
    return os_time_get();
 8008b02:	f7fe fc4f 	bl	80073a4 <os_time_get>
}
 8008b06:	bd08      	pop	{r3, pc}

08008b08 <HAL_InitTick>:

HAL_StatusTypeDef
HAL_InitTick (uint32_t TickPriority)
{
    return HAL_OK;
}
 8008b08:	2000      	movs	r0, #0
 8008b0a:	4770      	bx	lr

08008b0c <stm32_tmr_reg_irq>:
  if ((int32_t)(IRQn) >= 0)
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	db17      	blt.n	8008b40 <stm32_tmr_reg_irq+0x34>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b10:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 8008b14:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8008b18:	22f0      	movs	r2, #240	; 0xf0
 8008b1a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8008b1e:	4b0c      	ldr	r3, [pc, #48]	; (8008b50 <stm32_tmr_reg_irq+0x44>)
 8008b20:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008b22:	f100 0210 	add.w	r2, r0, #16
 8008b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	db07      	blt.n	8008b3e <stm32_tmr_reg_irq+0x32>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b2e:	f000 021f 	and.w	r2, r0, #31
 8008b32:	0940      	lsrs	r0, r0, #5
 8008b34:	2301      	movs	r3, #1
 8008b36:	4093      	lsls	r3, r2
 8008b38:	4a06      	ldr	r2, [pc, #24]	; (8008b54 <stm32_tmr_reg_irq+0x48>)
 8008b3a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
stm32_tmr_reg_irq(IRQn_Type irqn, uint32_t func)
{
    NVIC_SetPriority(irqn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irqn, func);
    NVIC_EnableIRQ(irqn);
}
 8008b3e:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b40:	f000 020f 	and.w	r2, r0, #15
 8008b44:	4b04      	ldr	r3, [pc, #16]	; (8008b58 <stm32_tmr_reg_irq+0x4c>)
 8008b46:	4413      	add	r3, r2
 8008b48:	22f0      	movs	r2, #240	; 0xf0
 8008b4a:	761a      	strb	r2, [r3, #24]
 8008b4c:	e7e7      	b.n	8008b1e <stm32_tmr_reg_irq+0x12>
 8008b4e:	bf00      	nop
 8008b50:	e000ed00 	.word	0xe000ed00
 8008b54:	e000e100 	.word	0xe000e100
 8008b58:	e000ecfc 	.word	0xe000ecfc

08008b5c <hal_timer_cnt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b5c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008b60:	b672      	cpsid	i
{
    uint32_t cnt;
    int sr;

    __HAL_DISABLE_INTERRUPTS(sr);
    if (tmr->sht_regs->SR & TIM_SR_UIF) {
 8008b62:	6803      	ldr	r3, [r0, #0]
 8008b64:	6919      	ldr	r1, [r3, #16]
 8008b66:	f011 0f01 	tst.w	r1, #1
 8008b6a:	d007      	beq.n	8008b7c <hal_timer_cnt+0x20>
        /*
         * Just overflowed
         */
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 8008b6c:	6841      	ldr	r1, [r0, #4]
 8008b6e:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8008b72:	6041      	str	r1, [r0, #4]
        tmr->sht_regs->SR &= ~TIM_SR_UIF;
 8008b74:	6919      	ldr	r1, [r3, #16]
 8008b76:	f021 0101 	bic.w	r1, r1, #1
 8008b7a:	6119      	str	r1, [r3, #16]
    }
    cnt = tmr->sht_oflow + tmr->sht_regs->CNT;
 8008b7c:	6843      	ldr	r3, [r0, #4]
 8008b7e:	6801      	ldr	r1, [r0, #0]
 8008b80:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8008b82:	4418      	add	r0, r3
    __HAL_ENABLE_INTERRUPTS(sr);
 8008b84:	b902      	cbnz	r2, 8008b88 <hal_timer_cnt+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 8008b86:	b662      	cpsie	i

    return cnt;
}
 8008b88:	4770      	bx	lr
	...

08008b8c <stm32_hw_setup>:
{
 8008b8c:	b530      	push	{r4, r5, lr}
 8008b8e:	b085      	sub	sp, #20
    switch (num) {
 8008b90:	b978      	cbnz	r0, 8008bb2 <stm32_hw_setup+0x26>
 8008b92:	460c      	mov	r4, r1
        func = (uint32_t)stm32_tmr0_irq;
 8008b94:	4d28      	ldr	r5, [pc, #160]	; (8008c38 <stm32_hw_setup+0xac>)
    if (regs == TIM1) {
 8008b96:	4b29      	ldr	r3, [pc, #164]	; (8008c3c <stm32_hw_setup+0xb0>)
 8008b98:	4299      	cmp	r1, r3
 8008b9a:	d010      	beq.n	8008bbe <stm32_hw_setup+0x32>
    if (regs == TIM2) {
 8008b9c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8008ba0:	d01c      	beq.n	8008bdc <stm32_hw_setup+0x50>
    if (regs == TIM3) {
 8008ba2:	4b27      	ldr	r3, [pc, #156]	; (8008c40 <stm32_hw_setup+0xb4>)
 8008ba4:	429c      	cmp	r4, r3
 8008ba6:	d028      	beq.n	8008bfa <stm32_hw_setup+0x6e>
    if (regs == TIM4) {
 8008ba8:	4b26      	ldr	r3, [pc, #152]	; (8008c44 <stm32_hw_setup+0xb8>)
 8008baa:	429c      	cmp	r4, r3
 8008bac:	d034      	beq.n	8008c18 <stm32_hw_setup+0x8c>
}
 8008bae:	b005      	add	sp, #20
 8008bb0:	bd30      	pop	{r4, r5, pc}
        assert(0);
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fd f91b 	bl	8005df4 <__assert_func>
        stm32_tmr_reg_irq(TIM1_UP_TIM10_IRQn, func);
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	2019      	movs	r0, #25
 8008bc2:	f7ff ffa3 	bl	8008b0c <stm32_tmr_reg_irq>
        __HAL_RCC_TIM1_CLK_ENABLE();
 8008bc6:	4b20      	ldr	r3, [pc, #128]	; (8008c48 <stm32_hw_setup+0xbc>)
 8008bc8:	699a      	ldr	r2, [r3, #24]
 8008bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bce:	619a      	str	r2, [r3, #24]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	9b00      	ldr	r3, [sp, #0]
 8008bda:	e7df      	b.n	8008b9c <stm32_hw_setup+0x10>
        stm32_tmr_reg_irq(TIM2_IRQn, func);
 8008bdc:	4629      	mov	r1, r5
 8008bde:	201c      	movs	r0, #28
 8008be0:	f7ff ff94 	bl	8008b0c <stm32_tmr_reg_irq>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8008be4:	4b18      	ldr	r3, [pc, #96]	; (8008c48 <stm32_hw_setup+0xbc>)
 8008be6:	69da      	ldr	r2, [r3, #28]
 8008be8:	f042 0201 	orr.w	r2, r2, #1
 8008bec:	61da      	str	r2, [r3, #28]
 8008bee:	69db      	ldr	r3, [r3, #28]
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	9301      	str	r3, [sp, #4]
 8008bf6:	9b01      	ldr	r3, [sp, #4]
 8008bf8:	e7d3      	b.n	8008ba2 <stm32_hw_setup+0x16>
        stm32_tmr_reg_irq(TIM3_IRQn, func);
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	201d      	movs	r0, #29
 8008bfe:	f7ff ff85 	bl	8008b0c <stm32_tmr_reg_irq>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8008c02:	4b11      	ldr	r3, [pc, #68]	; (8008c48 <stm32_hw_setup+0xbc>)
 8008c04:	69da      	ldr	r2, [r3, #28]
 8008c06:	f042 0202 	orr.w	r2, r2, #2
 8008c0a:	61da      	str	r2, [r3, #28]
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	f003 0302 	and.w	r3, r3, #2
 8008c12:	9302      	str	r3, [sp, #8]
 8008c14:	9b02      	ldr	r3, [sp, #8]
 8008c16:	e7c7      	b.n	8008ba8 <stm32_hw_setup+0x1c>
        stm32_tmr_reg_irq(TIM4_IRQn, func);
 8008c18:	4629      	mov	r1, r5
 8008c1a:	201e      	movs	r0, #30
 8008c1c:	f7ff ff76 	bl	8008b0c <stm32_tmr_reg_irq>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8008c20:	4b09      	ldr	r3, [pc, #36]	; (8008c48 <stm32_hw_setup+0xbc>)
 8008c22:	69da      	ldr	r2, [r3, #28]
 8008c24:	f042 0204 	orr.w	r2, r2, #4
 8008c28:	61da      	str	r2, [r3, #28]
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	9303      	str	r3, [sp, #12]
 8008c32:	9b03      	ldr	r3, [sp, #12]
}
 8008c34:	e7bb      	b.n	8008bae <stm32_hw_setup+0x22>
 8008c36:	bf00      	nop
 8008c38:	08008cdd 	.word	0x08008cdd
 8008c3c:	40012c00 	.word	0x40012c00
 8008c40:	40000400 	.word	0x40000400
 8008c44:	40000800 	.word	0x40000800
 8008c48:	40021000 	.word	0x40021000

08008c4c <stm32_tmr_cbs>:
{
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4605      	mov	r5, r0
    while ((ht = TAILQ_FIRST(&tmr->sht_timers)) != NULL) {
 8008c50:	e009      	b.n	8008c66 <stm32_tmr_cbs+0x1a>
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 8008c52:	6963      	ldr	r3, [r4, #20]
 8008c54:	60eb      	str	r3, [r5, #12]
 8008c56:	6963      	ldr	r3, [r4, #20]
 8008c58:	6922      	ldr	r2, [r4, #16]
 8008c5a:	601a      	str	r2, [r3, #0]
            ht->link.tqe_prev = NULL;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	6163      	str	r3, [r4, #20]
            ht->cb_func(ht->cb_arg);
 8008c60:	6863      	ldr	r3, [r4, #4]
 8008c62:	68a0      	ldr	r0, [r4, #8]
 8008c64:	4798      	blx	r3
    while ((ht = TAILQ_FIRST(&tmr->sht_timers)) != NULL) {
 8008c66:	68ac      	ldr	r4, [r5, #8]
 8008c68:	b164      	cbz	r4, 8008c84 <stm32_tmr_cbs+0x38>
        cnt = hal_timer_cnt(tmr);
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f7ff ff76 	bl	8008b5c <hal_timer_cnt>
        if (((int32_t)(cnt - ht->expiry)) >= 0) {
 8008c70:	68e3      	ldr	r3, [r4, #12]
 8008c72:	1ac0      	subs	r0, r0, r3
 8008c74:	2800      	cmp	r0, #0
 8008c76:	db05      	blt.n	8008c84 <stm32_tmr_cbs+0x38>
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d0e9      	beq.n	8008c52 <stm32_tmr_cbs+0x6>
 8008c7e:	6962      	ldr	r2, [r4, #20]
 8008c80:	615a      	str	r2, [r3, #20]
 8008c82:	e7e8      	b.n	8008c56 <stm32_tmr_cbs+0xa>
    ht = TAILQ_FIRST(&tmr->sht_timers);
 8008c84:	68ab      	ldr	r3, [r5, #8]
    if (ht) {
 8008c86:	b11b      	cbz	r3, 8008c90 <stm32_tmr_cbs+0x44>
        tmr->sht_regs->CCR1 = ht->expiry;
 8008c88:	682a      	ldr	r2, [r5, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	6353      	str	r3, [r2, #52]	; 0x34
}
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
        TIM_CCxChannelCmd(tmr->sht_regs, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008c90:	2200      	movs	r2, #0
 8008c92:	4611      	mov	r1, r2
 8008c94:	6828      	ldr	r0, [r5, #0]
 8008c96:	f001 fb3d 	bl	800a314 <TIM_CCxChannelCmd>
        tmr->sht_regs->DIER &= ~TIM_DIER_CC1IE;
 8008c9a:	682a      	ldr	r2, [r5, #0]
 8008c9c:	68d3      	ldr	r3, [r2, #12]
 8008c9e:	f023 0302 	bic.w	r3, r3, #2
 8008ca2:	60d3      	str	r3, [r2, #12]
}
 8008ca4:	e7f3      	b.n	8008c8e <stm32_tmr_cbs+0x42>

08008ca6 <stm32_tmr_irq>:
{
 8008ca6:	b538      	push	{r3, r4, r5, lr}
 8008ca8:	4605      	mov	r5, r0
    sr = tmr->sht_regs->SR;
 8008caa:	6803      	ldr	r3, [r0, #0]
 8008cac:	691b      	ldr	r3, [r3, #16]
    if (sr & TIM_SR_UIF) {
 8008cae:	f013 0f01 	tst.w	r3, #1
 8008cb2:	d00b      	beq.n	8008ccc <stm32_tmr_irq+0x26>
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 8008cb4:	6842      	ldr	r2, [r0, #4]
 8008cb6:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008cba:	6042      	str	r2, [r0, #4]
        clr |= TIM_SR_UIF;
 8008cbc:	2401      	movs	r4, #1
    if (sr & TIM_SR_CC1IF) {
 8008cbe:	f013 0f02 	tst.w	r3, #2
 8008cc2:	d105      	bne.n	8008cd0 <stm32_tmr_irq+0x2a>
    tmr->sht_regs->SR = ~clr;
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	43e4      	mvns	r4, r4
 8008cc8:	611c      	str	r4, [r3, #16]
}
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t clr = 0;
 8008ccc:	2400      	movs	r4, #0
 8008cce:	e7f6      	b.n	8008cbe <stm32_tmr_irq+0x18>
        clr |= TIM_SR_CC1IF;
 8008cd0:	f044 0402 	orr.w	r4, r4, #2
        stm32_tmr_cbs(tmr);
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f7ff ffb9 	bl	8008c4c <stm32_tmr_cbs>
 8008cda:	e7f3      	b.n	8008cc4 <stm32_tmr_irq+0x1e>

08008cdc <stm32_tmr0_irq>:
{
 8008cdc:	b508      	push	{r3, lr}
    stm32_tmr_irq(&stm32_tmr0);
 8008cde:	4802      	ldr	r0, [pc, #8]	; (8008ce8 <stm32_tmr0_irq+0xc>)
 8008ce0:	f7ff ffe1 	bl	8008ca6 <stm32_tmr_irq>
}
 8008ce4:	bd08      	pop	{r3, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20002f34 	.word	0x20002f34

08008cec <hal_timer_init>:
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num]) ||
 8008cec:	2802      	cmp	r0, #2
 8008cee:	dc40      	bgt.n	8008d72 <hal_timer_init+0x86>
 8008cf0:	4b26      	ldr	r3, [pc, #152]	; (8008d8c <hal_timer_init+0xa0>)
 8008cf2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d03e      	beq.n	8008d78 <hal_timer_init+0x8c>
 8008cfa:	2900      	cmp	r1, #0
 8008cfc:	d03f      	beq.n	8008d7e <hal_timer_init+0x92>
    regs = tmr->sht_regs = (TIM_TypeDef *)cfg;
 8008cfe:	6019      	str	r1, [r3, #0]
    if (!IS_TIM_CC1_INSTANCE(regs)) {
 8008d00:	4b23      	ldr	r3, [pc, #140]	; (8008d90 <hal_timer_init+0xa4>)
 8008d02:	4299      	cmp	r1, r3
 8008d04:	d00a      	beq.n	8008d1c <hal_timer_init+0x30>
 8008d06:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8008d0a:	d007      	beq.n	8008d1c <hal_timer_init+0x30>
 8008d0c:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8008d10:	4299      	cmp	r1, r3
 8008d12:	d003      	beq.n	8008d1c <hal_timer_init+0x30>
 8008d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d18:	4299      	cmp	r1, r3
 8008d1a:	d133      	bne.n	8008d84 <hal_timer_init+0x98>
{
 8008d1c:	b510      	push	{r4, lr}
 8008d1e:	460c      	mov	r4, r1
    stm32_hw_setup(num, regs);
 8008d20:	f7ff ff34 	bl	8008b8c <stm32_hw_setup>
    if (regs == TIM1) {
 8008d24:	4b1a      	ldr	r3, [pc, #104]	; (8008d90 <hal_timer_init+0xa4>)
 8008d26:	429c      	cmp	r4, r3
 8008d28:	d00a      	beq.n	8008d40 <hal_timer_init+0x54>
    if (regs == TIM2) {
 8008d2a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8008d2e:	d00d      	beq.n	8008d4c <hal_timer_init+0x60>
    if (regs == TIM3) {
 8008d30:	4b18      	ldr	r3, [pc, #96]	; (8008d94 <hal_timer_init+0xa8>)
 8008d32:	429c      	cmp	r4, r3
 8008d34:	d010      	beq.n	8008d58 <hal_timer_init+0x6c>
    if (regs == TIM4) {
 8008d36:	4b18      	ldr	r3, [pc, #96]	; (8008d98 <hal_timer_init+0xac>)
 8008d38:	429c      	cmp	r4, r3
 8008d3a:	d013      	beq.n	8008d64 <hal_timer_init+0x78>
    return 0;
 8008d3c:	2000      	movs	r0, #0
}
 8008d3e:	bd10      	pop	{r4, pc}
        __HAL_DBGMCU_FREEZE_TIM1();
 8008d40:	4a16      	ldr	r2, [pc, #88]	; (8008d9c <hal_timer_init+0xb0>)
 8008d42:	6853      	ldr	r3, [r2, #4]
 8008d44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d48:	6053      	str	r3, [r2, #4]
 8008d4a:	e7ee      	b.n	8008d2a <hal_timer_init+0x3e>
        __HAL_DBGMCU_FREEZE_TIM2();
 8008d4c:	4a13      	ldr	r2, [pc, #76]	; (8008d9c <hal_timer_init+0xb0>)
 8008d4e:	6853      	ldr	r3, [r2, #4]
 8008d50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008d54:	6053      	str	r3, [r2, #4]
 8008d56:	e7eb      	b.n	8008d30 <hal_timer_init+0x44>
        __HAL_DBGMCU_FREEZE_TIM3();
 8008d58:	4a10      	ldr	r2, [pc, #64]	; (8008d9c <hal_timer_init+0xb0>)
 8008d5a:	6853      	ldr	r3, [r2, #4]
 8008d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d60:	6053      	str	r3, [r2, #4]
 8008d62:	e7e8      	b.n	8008d36 <hal_timer_init+0x4a>
        __HAL_DBGMCU_FREEZE_TIM4();
 8008d64:	4a0d      	ldr	r2, [pc, #52]	; (8008d9c <hal_timer_init+0xb0>)
 8008d66:	6853      	ldr	r3, [r2, #4]
 8008d68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008d6c:	6053      	str	r3, [r2, #4]
    return 0;
 8008d6e:	2000      	movs	r0, #0
 8008d70:	e7e5      	b.n	8008d3e <hal_timer_init+0x52>
        return -1;
 8008d72:	f04f 30ff 	mov.w	r0, #4294967295
 8008d76:	4770      	bx	lr
 8008d78:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7c:	4770      	bx	lr
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d82:	4770      	bx	lr
        return -1;
 8008d84:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	0800f6d8 	.word	0x0800f6d8
 8008d90:	40012c00 	.word	0x40012c00
 8008d94:	40000400 	.word	0x40000400
 8008d98:	40000800 	.word	0x40000800
 8008d9c:	e0042000 	.word	0xe0042000

08008da0 <hal_timer_config>:
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8008da0:	2802      	cmp	r0, #2
 8008da2:	dc3a      	bgt.n	8008e1a <hal_timer_config+0x7a>
{
 8008da4:	b530      	push	{r4, r5, lr}
 8008da6:	b087      	sub	sp, #28
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8008da8:	4b22      	ldr	r3, [pc, #136]	; (8008e34 <hal_timer_config+0x94>)
 8008daa:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8008dae:	2d00      	cmp	r5, #0
 8008db0:	d036      	beq.n	8008e20 <hal_timer_config+0x80>
    if (!IS_TIM_CC1_INSTANCE(tmr->sht_regs)) {
 8008db2:	6828      	ldr	r0, [r5, #0]
 8008db4:	4b20      	ldr	r3, [pc, #128]	; (8008e38 <hal_timer_config+0x98>)
 8008db6:	4298      	cmp	r0, r3
 8008db8:	d00a      	beq.n	8008dd0 <hal_timer_config+0x30>
 8008dba:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008dbe:	d007      	beq.n	8008dd0 <hal_timer_config+0x30>
 8008dc0:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8008dc4:	4298      	cmp	r0, r3
 8008dc6:	d003      	beq.n	8008dd0 <hal_timer_config+0x30>
 8008dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dcc:	4298      	cmp	r0, r3
 8008dce:	d12a      	bne.n	8008e26 <hal_timer_config+0x86>
 8008dd0:	460c      	mov	r4, r1
    prescaler = stm32_hal_timer_get_freq(tmr->sht_regs) / freq_hz;
 8008dd2:	f001 fac9 	bl	800a368 <stm32_hal_timer_get_freq>
 8008dd6:	fbb0 f0f4 	udiv	r0, r0, r4
    if (prescaler > 0xffff) {
 8008dda:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8008dde:	d225      	bcs.n	8008e2c <hal_timer_config+0x8c>
    memset(&init, 0, sizeof(init));
 8008de0:	2400      	movs	r4, #0
 8008de2:	9401      	str	r4, [sp, #4]
 8008de4:	9403      	str	r4, [sp, #12]
 8008de6:	9404      	str	r4, [sp, #16]
 8008de8:	9405      	str	r4, [sp, #20]
    init.Period = 0xffff;
 8008dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008dee:	9302      	str	r3, [sp, #8]
    init.Prescaler = prescaler;
 8008df0:	9000      	str	r0, [sp, #0]
    tmr->sht_regs->CR1 = TIM_CR1_URS;
 8008df2:	682b      	ldr	r3, [r5, #0]
 8008df4:	2204      	movs	r2, #4
 8008df6:	601a      	str	r2, [r3, #0]
    tmr->sht_regs->DIER = TIM_DIER_UIE;
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	60da      	str	r2, [r3, #12]
    TIM_Base_SetConfig(tmr->sht_regs, &init);
 8008dfe:	4669      	mov	r1, sp
 8008e00:	6828      	ldr	r0, [r5, #0]
 8008e02:	f001 fa4d 	bl	800a2a0 <TIM_Base_SetConfig>
    tmr->sht_regs->SR = 0;
 8008e06:	682b      	ldr	r3, [r5, #0]
 8008e08:	611c      	str	r4, [r3, #16]
    tmr->sht_regs->CR1 |= TIM_CR1_CEN;
 8008e0a:	682a      	ldr	r2, [r5, #0]
 8008e0c:	6813      	ldr	r3, [r2, #0]
 8008e0e:	f043 0301 	orr.w	r3, r3, #1
 8008e12:	6013      	str	r3, [r2, #0]
    return 0;
 8008e14:	4620      	mov	r0, r4
}
 8008e16:	b007      	add	sp, #28
 8008e18:	bd30      	pop	{r4, r5, pc}
        return -1;
 8008e1a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e1e:	4770      	bx	lr
        return -1;
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295
 8008e24:	e7f7      	b.n	8008e16 <hal_timer_config+0x76>
        return -1;
 8008e26:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2a:	e7f4      	b.n	8008e16 <hal_timer_config+0x76>
        return -1;
 8008e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e30:	e7f1      	b.n	8008e16 <hal_timer_config+0x76>
 8008e32:	bf00      	nop
 8008e34:	0800f6d8 	.word	0x0800f6d8
 8008e38:	40012c00 	.word	0x40012c00

08008e3c <hal_timer_read>:
uint32_t
hal_timer_read(int num)
{
    struct stm32_hal_tmr *tmr;

    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8008e3c:	2802      	cmp	r0, #2
 8008e3e:	dc07      	bgt.n	8008e50 <hal_timer_read+0x14>
{
 8008e40:	b508      	push	{r3, lr}
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8008e42:	4b06      	ldr	r3, [pc, #24]	; (8008e5c <hal_timer_read+0x20>)
 8008e44:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008e48:	b128      	cbz	r0, 8008e56 <hal_timer_read+0x1a>
        return -1;
    }
    return hal_timer_cnt(tmr);
 8008e4a:	f7ff fe87 	bl	8008b5c <hal_timer_cnt>
}
 8008e4e:	bd08      	pop	{r3, pc}
        return -1;
 8008e50:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008e54:	4770      	bx	lr
        return -1;
 8008e56:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5a:	e7f8      	b.n	8008e4e <hal_timer_read+0x12>
 8008e5c:	0800f6d8 	.word	0x0800f6d8

08008e60 <uart_irq_handler>:
    return 0;
}

static void
uart_irq_handler(int num)
{
 8008e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cr1;
    int data;
    int rc;

    ui = &uart_irqs[num];
    ++ui->ui_cnt;
 8008e62:	4a24      	ldr	r2, [pc, #144]	; (8008ef4 <uart_irq_handler+0x94>)
 8008e64:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8008e68:	684b      	ldr	r3, [r1, #4]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	604b      	str	r3, [r1, #4]
    u = ui->ui_uart;
 8008e6e:	f852 4030 	ldr.w	r4, [r2, r0, lsl #3]
    regs = u->u_regs;
 8008e72:	6825      	ldr	r5, [r4, #0]

    isr = STATUS(regs);
 8008e74:	682e      	ldr	r6, [r5, #0]
    if (isr & RXNE) {
 8008e76:	f016 0f20 	tst.w	r6, #32
 8008e7a:	d007      	beq.n	8008e8c <uart_irq_handler+0x2c>
        data = RXDR(regs);
 8008e7c:	686f      	ldr	r7, [r5, #4]
        rc = u->u_rx_func(u->u_func_arg, data);
 8008e7e:	68a3      	ldr	r3, [r4, #8]
 8008e80:	b2ff      	uxtb	r7, r7
 8008e82:	4639      	mov	r1, r7
 8008e84:	6960      	ldr	r0, [r4, #20]
 8008e86:	4798      	blx	r3
        if (rc < 0) {
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	db1f      	blt.n	8008ecc <uart_irq_handler+0x6c>
            regs->CR1 &= ~USART_CR1_RXNEIE;
            u->u_rx_data = data;
            u->u_rx_stall = 1;
        }
    }
    if (isr & (TXE | TC)) {
 8008e8c:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8008e90:	d01b      	beq.n	8008eca <uart_irq_handler+0x6a>
        cr1 = regs->CR1;
 8008e92:	68ef      	ldr	r7, [r5, #12]
        if (isr & TXE) {
 8008e94:	f016 0f80 	tst.w	r6, #128	; 0x80
 8008e98:	d005      	beq.n	8008ea6 <uart_irq_handler+0x46>
            data = u->u_tx_func(u->u_func_arg);
 8008e9a:	68e3      	ldr	r3, [r4, #12]
 8008e9c:	6960      	ldr	r0, [r4, #20]
 8008e9e:	4798      	blx	r3
            if (data < 0) {
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	db1d      	blt.n	8008ee0 <uart_irq_handler+0x80>
                cr1 &= ~USART_CR1_TXEIE;
                cr1 |= USART_CR1_TCIE;
                u->u_tx_end = 1;
            } else {
                TXDR(regs) = data;
 8008ea4:	6068      	str	r0, [r5, #4]
            }
        }
        if (u->u_tx_end == 1 && isr & TC) {
 8008ea6:	7923      	ldrb	r3, [r4, #4]
 8008ea8:	f013 0f04 	tst.w	r3, #4
 8008eac:	d00c      	beq.n	8008ec8 <uart_irq_handler+0x68>
 8008eae:	f016 0f40 	tst.w	r6, #64	; 0x40
 8008eb2:	d009      	beq.n	8008ec8 <uart_irq_handler+0x68>
            if (u->u_tx_done) {
 8008eb4:	6923      	ldr	r3, [r4, #16]
 8008eb6:	b10b      	cbz	r3, 8008ebc <uart_irq_handler+0x5c>
                u->u_tx_done(u->u_func_arg);
 8008eb8:	6960      	ldr	r0, [r4, #20]
 8008eba:	4798      	blx	r3
            }
            u->u_tx_end = 0;
 8008ebc:	7923      	ldrb	r3, [r4, #4]
 8008ebe:	f36f 0382 	bfc	r3, #2, #1
 8008ec2:	7123      	strb	r3, [r4, #4]
            cr1 &= ~USART_CR1_TCIE;
 8008ec4:	f027 0740 	bic.w	r7, r7, #64	; 0x40
        }
        regs->CR1 = cr1;
 8008ec8:	60ef      	str	r7, [r5, #12]
    /* clear overrun */
    if (isr & USART_ISR_ORE) {
        regs->ICR |= USART_ICR_ORECF;
    }
#endif
}
 8008eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            regs->CR1 &= ~USART_CR1_RXNEIE;
 8008ecc:	68eb      	ldr	r3, [r5, #12]
 8008ece:	f023 0320 	bic.w	r3, r3, #32
 8008ed2:	60eb      	str	r3, [r5, #12]
            u->u_rx_data = data;
 8008ed4:	7167      	strb	r7, [r4, #5]
            u->u_rx_stall = 1;
 8008ed6:	7923      	ldrb	r3, [r4, #4]
 8008ed8:	f043 0302 	orr.w	r3, r3, #2
 8008edc:	7123      	strb	r3, [r4, #4]
 8008ede:	e7d5      	b.n	8008e8c <uart_irq_handler+0x2c>
                cr1 &= ~USART_CR1_TXEIE;
 8008ee0:	f027 0780 	bic.w	r7, r7, #128	; 0x80
                cr1 |= USART_CR1_TCIE;
 8008ee4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
                u->u_tx_end = 1;
 8008ee8:	7923      	ldrb	r3, [r4, #4]
 8008eea:	f043 0304 	orr.w	r3, r3, #4
 8008eee:	7123      	strb	r3, [r4, #4]
 8008ef0:	e7d9      	b.n	8008ea6 <uart_irq_handler+0x46>
 8008ef2:	bf00      	nop
 8008ef4:	200025c4 	.word	0x200025c4

08008ef8 <uart_irq1>:
    while (!(STATUS(regs) & TC));
}

static void
uart_irq1(void)
{
 8008ef8:	b508      	push	{r3, lr}
    uart_irq_handler(0);
 8008efa:	2000      	movs	r0, #0
 8008efc:	f7ff ffb0 	bl	8008e60 <uart_irq_handler>
}
 8008f00:	bd08      	pop	{r3, pc}

08008f02 <uart_irq2>:

static void
uart_irq2(void)
{
 8008f02:	b508      	push	{r3, lr}
    uart_irq_handler(1);
 8008f04:	2001      	movs	r0, #1
 8008f06:	f7ff ffab 	bl	8008e60 <uart_irq_handler>

}
 8008f0a:	bd08      	pop	{r3, pc}

08008f0c <uart_irq3>:

#ifdef USART3_BASE
static void
uart_irq3(void)
{
 8008f0c:	b508      	push	{r3, lr}
    uart_irq_handler(2);
 8008f0e:	2002      	movs	r0, #2
 8008f10:	f7ff ffa6 	bl	8008e60 <uart_irq_handler>
}
 8008f14:	bd08      	pop	{r3, pc}
	...

08008f18 <hal_uart_set_nvic>:
}
#endif

static void
hal_uart_set_nvic(IRQn_Type irqn, struct hal_uart *uart)
{
 8008f18:	b508      	push	{r3, lr}
    uint32_t isr;
    struct hal_uart_irq *ui = NULL;

    switch (irqn) {
 8008f1a:	2826      	cmp	r0, #38	; 0x26
 8008f1c:	d01e      	beq.n	8008f5c <hal_uart_set_nvic+0x44>
 8008f1e:	2827      	cmp	r0, #39	; 0x27
 8008f20:	d01f      	beq.n	8008f62 <hal_uart_set_nvic+0x4a>
 8008f22:	2825      	cmp	r0, #37	; 0x25
 8008f24:	d005      	beq.n	8008f32 <hal_uart_set_nvic+0x1a>
        isr = (uint32_t)&uart_irq8;
        ui = &uart_irqs[7];
        break;
#endif
    default:
        assert(0);
 8008f26:	2300      	movs	r3, #0
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fc ff61 	bl	8005df4 <__assert_func>
        isr = (uint32_t)&uart_irq1;
 8008f32:	4a0d      	ldr	r2, [pc, #52]	; (8008f68 <hal_uart_set_nvic+0x50>)
        ui = &uart_irqs[0];
 8008f34:	4b0d      	ldr	r3, [pc, #52]	; (8008f6c <hal_uart_set_nvic+0x54>)
        break;
    }

    if (ui) {
 8008f36:	b183      	cbz	r3, 8008f5a <hal_uart_set_nvic+0x42>
        ui->ui_uart = uart;
 8008f38:	6019      	str	r1, [r3, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8008f3a:	4b0d      	ldr	r3, [pc, #52]	; (8008f70 <hal_uart_set_nvic+0x58>)
 8008f3c:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008f3e:	f100 0110 	add.w	r1, r0, #16
 8008f42:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
  if ((int32_t)(IRQn) >= 0)
 8008f46:	2800      	cmp	r0, #0
 8008f48:	db07      	blt.n	8008f5a <hal_uart_set_nvic+0x42>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f4a:	f000 021f 	and.w	r2, r0, #31
 8008f4e:	0940      	lsrs	r0, r0, #5
 8008f50:	2301      	movs	r3, #1
 8008f52:	4093      	lsls	r3, r2
 8008f54:	4a07      	ldr	r2, [pc, #28]	; (8008f74 <hal_uart_set_nvic+0x5c>)
 8008f56:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

        NVIC_SetVector(irqn, isr);
        NVIC_EnableIRQ(irqn);
    }
}
 8008f5a:	bd08      	pop	{r3, pc}
        isr = (uint32_t)&uart_irq2;
 8008f5c:	4a06      	ldr	r2, [pc, #24]	; (8008f78 <hal_uart_set_nvic+0x60>)
        ui = &uart_irqs[1];
 8008f5e:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <hal_uart_set_nvic+0x64>)
        break;
 8008f60:	e7e9      	b.n	8008f36 <hal_uart_set_nvic+0x1e>
        isr = (uint32_t)&uart_irq3;
 8008f62:	4a07      	ldr	r2, [pc, #28]	; (8008f80 <hal_uart_set_nvic+0x68>)
        ui = &uart_irqs[2];
 8008f64:	4b07      	ldr	r3, [pc, #28]	; (8008f84 <hal_uart_set_nvic+0x6c>)
        break;
 8008f66:	e7e6      	b.n	8008f36 <hal_uart_set_nvic+0x1e>
 8008f68:	08008ef9 	.word	0x08008ef9
 8008f6c:	200025c4 	.word	0x200025c4
 8008f70:	e000ed00 	.word	0xe000ed00
 8008f74:	e000e100 	.word	0xe000e100
 8008f78:	08008f03 	.word	0x08008f03
 8008f7c:	200025cc 	.word	0x200025cc
 8008f80:	08008f0d 	.word	0x08008f0d
 8008f84:	200025d4 	.word	0x200025d4

08008f88 <hal_uart_init_cbs>:
    if (port >= UART_CNT || u->u_open) {
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	dc16      	bgt.n	8008fba <hal_uart_init_cbs+0x32>
{
 8008f8c:	b4f0      	push	{r4, r5, r6, r7}
    if (port >= UART_CNT || u->u_open) {
 8008f8e:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 8008f92:	00a5      	lsls	r5, r4, #2
 8008f94:	4c0c      	ldr	r4, [pc, #48]	; (8008fc8 <hal_uart_init_cbs+0x40>)
 8008f96:	442c      	add	r4, r5
 8008f98:	7924      	ldrb	r4, [r4, #4]
 8008f9a:	f014 0f01 	tst.w	r4, #1
 8008f9e:	d10f      	bne.n	8008fc0 <hal_uart_init_cbs+0x38>
    u->u_rx_func = rx_func;
 8008fa0:	4e09      	ldr	r6, [pc, #36]	; (8008fc8 <hal_uart_init_cbs+0x40>)
 8008fa2:	00c5      	lsls	r5, r0, #3
 8008fa4:	1a2f      	subs	r7, r5, r0
 8008fa6:	00bc      	lsls	r4, r7, #2
 8008fa8:	4434      	add	r4, r6
 8008faa:	60a3      	str	r3, [r4, #8]
    u->u_tx_func = tx_func;
 8008fac:	60e1      	str	r1, [r4, #12]
    u->u_tx_done = tx_done;
 8008fae:	6122      	str	r2, [r4, #16]
    u->u_func_arg = arg;
 8008fb0:	9b04      	ldr	r3, [sp, #16]
 8008fb2:	6163      	str	r3, [r4, #20]
    return 0;
 8008fb4:	2000      	movs	r0, #0
}
 8008fb6:	bcf0      	pop	{r4, r5, r6, r7}
 8008fb8:	4770      	bx	lr
        return -1;
 8008fba:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008fbe:	4770      	bx	lr
        return -1;
 8008fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc4:	e7f7      	b.n	8008fb6 <hal_uart_init_cbs+0x2e>
 8008fc6:	bf00      	nop
 8008fc8:	200025dc 	.word	0x200025dc

08008fcc <hal_uart_start_rx>:
{
 8008fcc:	b538      	push	{r3, r4, r5, lr}
    if (u->u_rx_stall) {
 8008fce:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8008fd2:	009a      	lsls	r2, r3, #2
 8008fd4:	4b13      	ldr	r3, [pc, #76]	; (8009024 <hal_uart_start_rx+0x58>)
 8008fd6:	4413      	add	r3, r2
 8008fd8:	791b      	ldrb	r3, [r3, #4]
 8008fda:	f013 0f02 	tst.w	r3, #2
 8008fde:	d01f      	beq.n	8009020 <hal_uart_start_rx+0x54>
 8008fe0:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fe2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008fe6:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_data);
 8008fe8:	00c2      	lsls	r2, r0, #3
 8008fea:	1a12      	subs	r2, r2, r0
 8008fec:	0091      	lsls	r1, r2, #2
 8008fee:	4b0d      	ldr	r3, [pc, #52]	; (8009024 <hal_uart_start_rx+0x58>)
 8008ff0:	440b      	add	r3, r1
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	7959      	ldrb	r1, [r3, #5]
 8008ff6:	6958      	ldr	r0, [r3, #20]
 8008ff8:	4790      	blx	r2
        if (rc == 0) {
 8008ffa:	b978      	cbnz	r0, 800901c <hal_uart_start_rx+0x50>
            u->u_rx_stall = 0;
 8008ffc:	4a09      	ldr	r2, [pc, #36]	; (8009024 <hal_uart_start_rx+0x58>)
 8008ffe:	00e0      	lsls	r0, r4, #3
 8009000:	1b01      	subs	r1, r0, r4
 8009002:	008b      	lsls	r3, r1, #2
 8009004:	4413      	add	r3, r2
 8009006:	7919      	ldrb	r1, [r3, #4]
 8009008:	f36f 0141 	bfc	r1, #1, #1
 800900c:	7119      	strb	r1, [r3, #4]
            u->u_regs->CR1 |= USART_CR1_RXNEIE;
 800900e:	1b04      	subs	r4, r0, r4
 8009010:	00a3      	lsls	r3, r4, #2
 8009012:	58d2      	ldr	r2, [r2, r3]
 8009014:	68d3      	ldr	r3, [r2, #12]
 8009016:	f043 0320 	orr.w	r3, r3, #32
 800901a:	60d3      	str	r3, [r2, #12]
        __HAL_ENABLE_INTERRUPTS(sr);
 800901c:	b905      	cbnz	r5, 8009020 <hal_uart_start_rx+0x54>
  __ASM volatile ("cpsie i" : : : "memory");
 800901e:	b662      	cpsie	i
}
 8009020:	bd38      	pop	{r3, r4, r5, pc}
 8009022:	bf00      	nop
 8009024:	200025dc 	.word	0x200025dc

08009028 <hal_uart_start_tx>:
{
 8009028:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800902a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800902e:	b672      	cpsid	i
    u->u_regs->CR1 &= ~USART_CR1_TCIE;
 8009030:	4b0c      	ldr	r3, [pc, #48]	; (8009064 <hal_uart_start_tx+0x3c>)
 8009032:	00c2      	lsls	r2, r0, #3
 8009034:	1a14      	subs	r4, r2, r0
 8009036:	00a1      	lsls	r1, r4, #2
 8009038:	585e      	ldr	r6, [r3, r1]
 800903a:	68f4      	ldr	r4, [r6, #12]
 800903c:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8009040:	60f4      	str	r4, [r6, #12]
    u->u_regs->CR1 |= USART_CR1_TXEIE;
 8009042:	585c      	ldr	r4, [r3, r1]
 8009044:	68e1      	ldr	r1, [r4, #12]
 8009046:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800904a:	60e1      	str	r1, [r4, #12]
    u->u_tx_end = 0;
 800904c:	1a10      	subs	r0, r2, r0
 800904e:	0082      	lsls	r2, r0, #2
 8009050:	4413      	add	r3, r2
 8009052:	791a      	ldrb	r2, [r3, #4]
 8009054:	f36f 0282 	bfc	r2, #2, #1
 8009058:	711a      	strb	r2, [r3, #4]
    __HAL_ENABLE_INTERRUPTS(sr);
 800905a:	b905      	cbnz	r5, 800905e <hal_uart_start_tx+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
 800905c:	b662      	cpsie	i
}
 800905e:	bc70      	pop	{r4, r5, r6}
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	200025dc 	.word	0x200025dc

08009068 <hal_uart_blocking_tx>:
    if (port >= UART_CNT || !u->u_open) {
 8009068:	2800      	cmp	r0, #0
 800906a:	dd00      	ble.n	800906e <hal_uart_blocking_tx+0x6>
}
 800906c:	4770      	bx	lr
    if (port >= UART_CNT || !u->u_open) {
 800906e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8009072:	009a      	lsls	r2, r3, #2
 8009074:	4b09      	ldr	r3, [pc, #36]	; (800909c <hal_uart_blocking_tx+0x34>)
 8009076:	4413      	add	r3, r2
 8009078:	791b      	ldrb	r3, [r3, #4]
 800907a:	f013 0f01 	tst.w	r3, #1
 800907e:	d0f5      	beq.n	800906c <hal_uart_blocking_tx+0x4>
    regs = u->u_regs;
 8009080:	4613      	mov	r3, r2
 8009082:	4a06      	ldr	r2, [pc, #24]	; (800909c <hal_uart_blocking_tx+0x34>)
 8009084:	58d3      	ldr	r3, [r2, r3]
    while (!(STATUS(regs) & TXE));
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	f012 0f80 	tst.w	r2, #128	; 0x80
 800908c:	d0fb      	beq.n	8009086 <hal_uart_blocking_tx+0x1e>
    TXDR(regs) = data;
 800908e:	6059      	str	r1, [r3, #4]
    while (!(STATUS(regs) & TC));
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	f012 0f40 	tst.w	r2, #64	; 0x40
 8009096:	d0fb      	beq.n	8009090 <hal_uart_blocking_tx+0x28>
 8009098:	e7e8      	b.n	800906c <hal_uart_blocking_tx+0x4>
 800909a:	bf00      	nop
 800909c:	200025dc 	.word	0x200025dc

080090a0 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
 80090a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	b085      	sub	sp, #20
 80090a6:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 80090aa:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
    uint32_t cr1, cr2, cr3;
#if MYNEWT_VAL(MCU_STM32F1)
    GPIO_InitTypeDef gpio;
#endif

    if (port >= UART_CNT) {
 80090ae:	1e04      	subs	r4, r0, #0
 80090b0:	f300 816e 	bgt.w	8009390 <hal_uart_config+0x2f0>
        return -1;
    }

    u = &uarts[port];
 80090b4:	00e5      	lsls	r5, r4, #3
 80090b6:	1b2d      	subs	r5, r5, r4
 80090b8:	00a8      	lsls	r0, r5, #2
 80090ba:	4dba      	ldr	r5, [pc, #744]	; (80093a4 <hal_uart_config+0x304>)
 80090bc:	eb05 0800 	add.w	r8, r5, r0
    if (u->u_open) {
 80090c0:	f898 0004 	ldrb.w	r0, [r8, #4]
 80090c4:	f010 0f01 	tst.w	r0, #1
 80090c8:	f040 8165 	bne.w	8009396 <hal_uart_config+0x2f6>
 80090cc:	461f      	mov	r7, r3
 80090ce:	4691      	mov	r9, r2
 80090d0:	460e      	mov	r6, r1
        return -1;
    }
    cfg = u->u_cfg;
 80090d2:	f8d8 5018 	ldr.w	r5, [r8, #24]
    assert(cfg);
 80090d6:	2d00      	cmp	r5, #0
 80090d8:	f000 80e2 	beq.w	80092a0 <hal_uart_config+0x200>

#if MYNEWT_VAL(MCU_STM32F1)
    gpio.Mode = GPIO_MODE_AF_PP;
 80090dc:	2302      	movs	r3, #2
 80090de:	9301      	str	r3, [sp, #4]
    gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80090e0:	2303      	movs	r3, #3
 80090e2:	9303      	str	r3, [sp, #12]

    gpio.Pull = GPIO_PULLUP;
 80090e4:	2301      	movs	r3, #1
 80090e6:	9302      	str	r3, [sp, #8]
    hal_gpio_init_stm(cfg->suc_pin_tx, &gpio);
 80090e8:	4669      	mov	r1, sp
 80090ea:	f995 000c 	ldrsb.w	r0, [r5, #12]
 80090ee:	f000 fa23 	bl	8009538 <hal_gpio_init_stm>
    if (flow_ctl == HAL_UART_FLOW_CTL_RTS_CTS) {
 80090f2:	f1ba 0f01 	cmp.w	sl, #1
 80090f6:	f000 80d9 	beq.w	80092ac <hal_uart_config+0x20c>
        hal_gpio_init_stm(cfg->suc_pin_rts, &gpio);
    }

    gpio.Mode = GPIO_MODE_AF_INPUT;
 80090fa:	2300      	movs	r3, #0
 80090fc:	9301      	str	r3, [sp, #4]
    hal_gpio_init_stm(cfg->suc_pin_rx, &gpio);
 80090fe:	4669      	mov	r1, sp
 8009100:	f995 000d 	ldrsb.w	r0, [r5, #13]
 8009104:	f000 fa18 	bl	8009538 <hal_gpio_init_stm>
    if (flow_ctl == HAL_UART_FLOW_CTL_RTS_CTS) {
 8009108:	f1ba 0f01 	cmp.w	sl, #1
 800910c:	f000 80d4 	beq.w	80092b8 <hal_uart_config+0x218>
        hal_gpio_init_stm(cfg->suc_pin_cts, &gpio);
    }

    if (cfg->suc_pin_remap_fn) {
 8009110:	692b      	ldr	r3, [r5, #16]
 8009112:	b103      	cbz	r3, 8009116 <hal_uart_config+0x76>
        cfg->suc_pin_remap_fn();
 8009114:	4798      	blx	r3
     * pin config
     * UART config
     * nvic config
     * enable uart
     */
    cr1 = cfg->suc_uart->CR1;
 8009116:	6829      	ldr	r1, [r5, #0]
 8009118:	68cb      	ldr	r3, [r1, #12]
    cr2 = cfg->suc_uart->CR2;
 800911a:	690a      	ldr	r2, [r1, #16]
    cr3 = cfg->suc_uart->CR3;
 800911c:	6949      	ldr	r1, [r1, #20]

    cr1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_RE);
 800911e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009122:	f023 0304 	bic.w	r3, r3, #4
#if !MYNEWT_VAL(MCU_STM32F1)
    cr1 &= ~(USART_CR1_OVER8);
#endif
    cr2 &= ~(USART_CR2_STOP);
 8009126:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    cr3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE);
 800912a:	f421 7140 	bic.w	r1, r1, #768	; 0x300

    switch (databits) {
 800912e:	f1b9 0f08 	cmp.w	r9, #8
 8009132:	d005      	beq.n	8009140 <hal_uart_config+0xa0>
 8009134:	f1b9 0f09 	cmp.w	r9, #9
 8009138:	f040 80c4 	bne.w	80092c4 <hal_uart_config+0x224>
    case 8:
        cr1 |= UART_WORDLENGTH_8B;
        break;
    case 9:
        cr1 |= UART_WORDLENGTH_9B;
 800913c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    default:
        assert(0);
        return -1;
    }

    switch (stopbits) {
 8009140:	2f01      	cmp	r7, #1
 8009142:	d004      	beq.n	800914e <hal_uart_config+0xae>
 8009144:	2f02      	cmp	r7, #2
 8009146:	f040 8129 	bne.w	800939c <hal_uart_config+0x2fc>
    case 1:
        cr2 |= UART_STOPBITS_1;
        break;
    case 2:
        cr2 |= UART_STOPBITS_2;
 800914a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
        break;
    default:
        return -1;
    }

    switch (parity) {
 800914e:	f1bb 0f01 	cmp.w	fp, #1
 8009152:	f000 80bd 	beq.w	80092d0 <hal_uart_config+0x230>
 8009156:	f1bb 0f02 	cmp.w	fp, #2
 800915a:	f000 80bc 	beq.w	80092d6 <hal_uart_config+0x236>
    case HAL_UART_PARITY_EVEN:
        cr1 |= UART_PARITY_EVEN;
        break;
    }

    switch (flow_ctl) {
 800915e:	f1ba 0f01 	cmp.w	sl, #1
 8009162:	d10b      	bne.n	800917c <hal_uart_config+0xdc>
    case HAL_UART_FLOW_CTL_NONE:
        cr3 |= UART_HWCONTROL_NONE;
        break;
    case HAL_UART_FLOW_CTL_RTS_CTS:
        cr3 |= UART_HWCONTROL_RTS_CTS;
 8009164:	f441 7140 	orr.w	r1, r1, #768	; 0x300
        if (cfg->suc_pin_rts < 0 || cfg->suc_pin_cts < 0) {
 8009168:	f995 000e 	ldrsb.w	r0, [r5, #14]
 800916c:	2800      	cmp	r0, #0
 800916e:	f2c0 80b5 	blt.w	80092dc <hal_uart_config+0x23c>
 8009172:	f995 000f 	ldrsb.w	r0, [r5, #15]
 8009176:	2800      	cmp	r0, #0
 8009178:	f2c0 80b0 	blt.w	80092dc <hal_uart_config+0x23c>
    }

#if !MYNEWT_VAL(MCU_STM32F1)
    cr1 |= (UART_MODE_RX | UART_MODE_TX | UART_OVERSAMPLING_16);
#else
    cr1 |= (UART_MODE_TX_RX | UART_OVERSAMPLING_16);
 800917c:	f043 030c 	orr.w	r3, r3, #12
#endif

    *cfg->suc_rcc_reg |= cfg->suc_rcc_dev;
 8009180:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8009184:	f8dc 7000 	ldr.w	r7, [ip]
 8009188:	68a8      	ldr	r0, [r5, #8]
 800918a:	4338      	orrs	r0, r7
 800918c:	f8cc 0000 	str.w	r0, [ip]
        hal_gpio_init_af(cfg->suc_pin_rts, cfg->suc_pin_af, 0, 0);
        hal_gpio_init_af(cfg->suc_pin_cts, cfg->suc_pin_af, 0, 0);
    }
#endif

    u->u_regs = cfg->suc_uart;
 8009190:	f8d5 e000 	ldr.w	lr, [r5]
 8009194:	f8df c20c 	ldr.w	ip, [pc, #524]	; 80093a4 <hal_uart_config+0x304>
 8009198:	00e7      	lsls	r7, r4, #3
 800919a:	1b3f      	subs	r7, r7, r4
 800919c:	00b8      	lsls	r0, r7, #2
 800919e:	f84c e000 	str.w	lr, [ip, r0]
    u->u_regs->CR3 = cr3;
 80091a2:	f8ce 1014 	str.w	r1, [lr, #20]
    u->u_regs->CR2 = cr2;
 80091a6:	f85c 1000 	ldr.w	r1, [ip, r0]
 80091aa:	610a      	str	r2, [r1, #16]
    u->u_regs->CR1 = cr1;
 80091ac:	f85c 2000 	ldr.w	r2, [ip, r0]
 80091b0:	60d3      	str	r3, [r2, #12]
#ifdef USART6_BASE
    if (cfg->suc_uart == USART1 || cfg->suc_uart == USART6) {
#else
    if (cfg->suc_uart == USART1) {
 80091b2:	682a      	ldr	r2, [r5, #0]
 80091b4:	4b7c      	ldr	r3, [pc, #496]	; (80093a8 <hal_uart_config+0x308>)
 80091b6:	429a      	cmp	r2, r3
 80091b8:	f000 8096 	beq.w	80092e8 <hal_uart_config+0x248>
#else
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK2Freq(), baudrate);
#endif

    } else {
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
 80091bc:	f001 f832 	bl	800a224 <HAL_RCC_GetPCLK1Freq>
 80091c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80091c4:	eb00 0780 	add.w	r7, r0, r0, lsl #2
 80091c8:	00b6      	lsls	r6, r6, #2
 80091ca:	fbb7 f7f6 	udiv	r7, r7, r6
 80091ce:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 80093ac <hal_uart_config+0x30c>
 80091d2:	fbaa 3707 	umull	r3, r7, sl, r7
 80091d6:	097f      	lsrs	r7, r7, #5
 80091d8:	013f      	lsls	r7, r7, #4
 80091da:	f001 f823 	bl	800a224 <HAL_RCC_GetPCLK1Freq>
 80091de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80091e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80091e6:	fbb0 f9f6 	udiv	r9, r0, r6
 80091ea:	f001 f81b 	bl	800a224 <HAL_RCC_GetPCLK1Freq>
 80091ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80091f2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80091f6:	fbb3 f3f6 	udiv	r3, r3, r6
 80091fa:	fbaa 2303 	umull	r2, r3, sl, r3
 80091fe:	095b      	lsrs	r3, r3, #5
 8009200:	f04f 0b64 	mov.w	fp, #100	; 0x64
 8009204:	fb0b 9313 	mls	r3, fp, r3, r9
 8009208:	011b      	lsls	r3, r3, #4
 800920a:	3332      	adds	r3, #50	; 0x32
 800920c:	fbaa 2303 	umull	r2, r3, sl, r3
 8009210:	095b      	lsrs	r3, r3, #5
 8009212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009216:	441f      	add	r7, r3
 8009218:	f001 f804 	bl	800a224 <HAL_RCC_GetPCLK1Freq>
 800921c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009220:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009224:	fbb0 f9f6 	udiv	r9, r0, r6
 8009228:	f000 fffc 	bl	800a224 <HAL_RCC_GetPCLK1Freq>
 800922c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009230:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009234:	fbb0 f6f6 	udiv	r6, r0, r6
 8009238:	fbaa 3606 	umull	r3, r6, sl, r6
 800923c:	0976      	lsrs	r6, r6, #5
 800923e:	fb0b 9b16 	mls	fp, fp, r6, r9
 8009242:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 8009246:	f10b 0b32 	add.w	fp, fp, #50	; 0x32
 800924a:	fbaa 3a0b 	umull	r3, sl, sl, fp
 800924e:	f3ca 1a43 	ubfx	sl, sl, #5, #4
 8009252:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8009256:	0093      	lsls	r3, r2, #2
 8009258:	4a52      	ldr	r2, [pc, #328]	; (80093a4 <hal_uart_config+0x304>)
 800925a:	58d3      	ldr	r3, [r2, r3]
 800925c:	4457      	add	r7, sl
 800925e:	609f      	str	r7, [r3, #8]
    }

    (void)RXDR(u->u_regs);
 8009260:	4e50      	ldr	r6, [pc, #320]	; (80093a4 <hal_uart_config+0x304>)
 8009262:	00e7      	lsls	r7, r4, #3
 8009264:	1b3b      	subs	r3, r7, r4
 8009266:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800926a:	f856 3009 	ldr.w	r3, [r6, r9]
 800926e:	685a      	ldr	r2, [r3, #4]
    (void)STATUS(u->u_regs);
 8009270:	681b      	ldr	r3, [r3, #0]
    hal_uart_set_nvic(cfg->suc_irqn, u);
 8009272:	4641      	mov	r1, r8
 8009274:	f995 0014 	ldrsb.w	r0, [r5, #20]
 8009278:	f7ff fe4e 	bl	8008f18 <hal_uart_set_nvic>

    u->u_regs->CR1 |= (USART_CR1_RXNEIE | USART_CR1_UE);
 800927c:	f856 2009 	ldr.w	r2, [r6, r9]
 8009280:	68d3      	ldr	r3, [r2, #12]
 8009282:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009286:	f043 0320 	orr.w	r3, r3, #32
 800928a:	60d3      	str	r3, [r2, #12]
    u->u_open = 1;
 800928c:	464b      	mov	r3, r9
 800928e:	4433      	add	r3, r6
 8009290:	791a      	ldrb	r2, [r3, #4]
 8009292:	f042 0201 	orr.w	r2, r2, #1
 8009296:	711a      	strb	r2, [r3, #4]

    return 0;
 8009298:	2000      	movs	r0, #0
}
 800929a:	b005      	add	sp, #20
 800929c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(cfg);
 80092a0:	2300      	movs	r3, #0
 80092a2:	461a      	mov	r2, r3
 80092a4:	4619      	mov	r1, r3
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fc fda4 	bl	8005df4 <__assert_func>
        hal_gpio_init_stm(cfg->suc_pin_rts, &gpio);
 80092ac:	4669      	mov	r1, sp
 80092ae:	f995 000e 	ldrsb.w	r0, [r5, #14]
 80092b2:	f000 f941 	bl	8009538 <hal_gpio_init_stm>
 80092b6:	e720      	b.n	80090fa <hal_uart_config+0x5a>
        hal_gpio_init_stm(cfg->suc_pin_cts, &gpio);
 80092b8:	4669      	mov	r1, sp
 80092ba:	f995 000f 	ldrsb.w	r0, [r5, #15]
 80092be:	f000 f93b 	bl	8009538 <hal_gpio_init_stm>
 80092c2:	e725      	b.n	8009110 <hal_uart_config+0x70>
        assert(0);
 80092c4:	2300      	movs	r3, #0
 80092c6:	461a      	mov	r2, r3
 80092c8:	4619      	mov	r1, r3
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fc fd92 	bl	8005df4 <__assert_func>
        cr1 |= UART_PARITY_ODD;
 80092d0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
        break;
 80092d4:	e743      	b.n	800915e <hal_uart_config+0xbe>
        cr1 |= UART_PARITY_EVEN;
 80092d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
        break;
 80092da:	e740      	b.n	800915e <hal_uart_config+0xbe>
            assert(0);
 80092dc:	2300      	movs	r3, #0
 80092de:	461a      	mov	r2, r3
 80092e0:	4619      	mov	r1, r3
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fc fd86 	bl	8005df4 <__assert_func>
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK2Freq(), baudrate);
 80092e8:	f000 ffac 	bl	800a244 <HAL_RCC_GetPCLK2Freq>
 80092ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80092f0:	eb00 0780 	add.w	r7, r0, r0, lsl #2
 80092f4:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 80092f8:	fbb7 f7fa 	udiv	r7, r7, sl
 80092fc:	4e2b      	ldr	r6, [pc, #172]	; (80093ac <hal_uart_config+0x30c>)
 80092fe:	fba6 3707 	umull	r3, r7, r6, r7
 8009302:	097f      	lsrs	r7, r7, #5
 8009304:	013f      	lsls	r7, r7, #4
 8009306:	f000 ff9d 	bl	800a244 <HAL_RCC_GetPCLK2Freq>
 800930a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800930e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009312:	fbb0 f9fa 	udiv	r9, r0, sl
 8009316:	f000 ff95 	bl	800a244 <HAL_RCC_GetPCLK2Freq>
 800931a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800931e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8009322:	fbb3 f3fa 	udiv	r3, r3, sl
 8009326:	fba6 2303 	umull	r2, r3, r6, r3
 800932a:	095b      	lsrs	r3, r3, #5
 800932c:	f04f 0b64 	mov.w	fp, #100	; 0x64
 8009330:	fb0b 9313 	mls	r3, fp, r3, r9
 8009334:	011b      	lsls	r3, r3, #4
 8009336:	3332      	adds	r3, #50	; 0x32
 8009338:	fba6 2303 	umull	r2, r3, r6, r3
 800933c:	095b      	lsrs	r3, r3, #5
 800933e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009342:	441f      	add	r7, r3
 8009344:	f000 ff7e 	bl	800a244 <HAL_RCC_GetPCLK2Freq>
 8009348:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800934c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009350:	fbb0 f9fa 	udiv	r9, r0, sl
 8009354:	f000 ff76 	bl	800a244 <HAL_RCC_GetPCLK2Freq>
 8009358:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800935c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009360:	fbb0 fafa 	udiv	sl, r0, sl
 8009364:	fba6 3a0a 	umull	r3, sl, r6, sl
 8009368:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800936c:	fb0b 991a 	mls	r9, fp, sl, r9
 8009370:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8009374:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8009378:	fba6 3609 	umull	r3, r6, r6, r9
 800937c:	f3c6 1643 	ubfx	r6, r6, #5, #4
 8009380:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8009384:	0093      	lsls	r3, r2, #2
 8009386:	4a07      	ldr	r2, [pc, #28]	; (80093a4 <hal_uart_config+0x304>)
 8009388:	58d3      	ldr	r3, [r2, r3]
 800938a:	4437      	add	r7, r6
 800938c:	609f      	str	r7, [r3, #8]
 800938e:	e767      	b.n	8009260 <hal_uart_config+0x1c0>
        return -1;
 8009390:	f04f 30ff 	mov.w	r0, #4294967295
 8009394:	e781      	b.n	800929a <hal_uart_config+0x1fa>
        return -1;
 8009396:	f04f 30ff 	mov.w	r0, #4294967295
 800939a:	e77e      	b.n	800929a <hal_uart_config+0x1fa>
        return -1;
 800939c:	f04f 30ff 	mov.w	r0, #4294967295
 80093a0:	e77b      	b.n	800929a <hal_uart_config+0x1fa>
 80093a2:	bf00      	nop
 80093a4:	200025dc 	.word	0x200025dc
 80093a8:	40013800 	.word	0x40013800
 80093ac:	51eb851f 	.word	0x51eb851f

080093b0 <hal_uart_init>:
int
hal_uart_init(int port, void *arg)
{
    struct hal_uart *u;

    if (port >= UART_CNT) {
 80093b0:	2800      	cmp	r0, #0
 80093b2:	dc07      	bgt.n	80093c4 <hal_uart_init+0x14>
        return -1;
    }
    u = &uarts[port];
    u->u_cfg = (const struct stm32_uart_cfg *)arg;
 80093b4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80093b8:	0082      	lsls	r2, r0, #2
 80093ba:	4b04      	ldr	r3, [pc, #16]	; (80093cc <hal_uart_init+0x1c>)
 80093bc:	4413      	add	r3, r2
 80093be:	6199      	str	r1, [r3, #24]

    return 0;
 80093c0:	2000      	movs	r0, #0
 80093c2:	4770      	bx	lr
        return -1;
 80093c4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	200025dc 	.word	0x200025dc

080093d0 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct hal_uart *u;

    if (port >= UART_CNT) {
 80093d0:	2800      	cmp	r0, #0
 80093d2:	dc10      	bgt.n	80093f6 <hal_uart_close+0x26>
{
 80093d4:	b410      	push	{r4}
        return -1;
    }
    u = &uarts[port];

    u->u_open = 0;
 80093d6:	4909      	ldr	r1, [pc, #36]	; (80093fc <hal_uart_close+0x2c>)
 80093d8:	00c3      	lsls	r3, r0, #3
 80093da:	1a1c      	subs	r4, r3, r0
 80093dc:	00a2      	lsls	r2, r4, #2
 80093de:	440a      	add	r2, r1
 80093e0:	7914      	ldrb	r4, [r2, #4]
 80093e2:	f36f 0400 	bfc	r4, #0, #1
 80093e6:	7114      	strb	r4, [r2, #4]
    u->u_regs->CR1 = 0;
 80093e8:	1a18      	subs	r0, r3, r0
 80093ea:	0083      	lsls	r3, r0, #2
 80093ec:	58cb      	ldr	r3, [r1, r3]
 80093ee:	2000      	movs	r0, #0
 80093f0:	60d8      	str	r0, [r3, #12]

    return 0;
}
 80093f2:	bc10      	pop	{r4}
 80093f4:	4770      	bx	lr
        return -1;
 80093f6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80093fa:	4770      	bx	lr
 80093fc:	200025dc 	.word	0x200025dc

08009400 <hal_watchdog_init>:
{
    uint32_t reload;

    /* Max prescaler is 256 */
    reload = 32768 / 256;
    reload = (reload * expire_msecs) / 1000;
 8009400:	01c0      	lsls	r0, r0, #7
 8009402:	4b09      	ldr	r3, [pc, #36]	; (8009428 <hal_watchdog_init+0x28>)
 8009404:	fba3 3000 	umull	r3, r0, r3, r0
 8009408:	0980      	lsrs	r0, r0, #6

    /* Check to make sure we are not trying a reload value that is too large */
    if (reload > IWDG_RLR_RL) {
 800940a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800940e:	d207      	bcs.n	8009420 <hal_watchdog_init+0x20>
        return -1;
    }

    g_wdt_cfg.Instance = IWDG;
 8009410:	4b06      	ldr	r3, [pc, #24]	; (800942c <hal_watchdog_init+0x2c>)
 8009412:	4a07      	ldr	r2, [pc, #28]	; (8009430 <hal_watchdog_init+0x30>)
 8009414:	601a      	str	r2, [r3, #0]
    g_wdt_cfg.Init.Prescaler = IWDG_PRESCALER_256;
 8009416:	2206      	movs	r2, #6
 8009418:	605a      	str	r2, [r3, #4]
    g_wdt_cfg.Init.Reload = reload;
 800941a:	6098      	str	r0, [r3, #8]
    STM32_HAL_WATCHDOG_CUSTOM_INIT(&g_wdt_cfg);

    return 0;
 800941c:	2000      	movs	r0, #0
 800941e:	4770      	bx	lr
        return -1;
 8009420:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	10624dd3 	.word	0x10624dd3
 800942c:	20002f44 	.word	0x20002f44
 8009430:	40003000 	.word	0x40003000

08009434 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
 8009434:	b508      	push	{r3, lr}
    __HAL_DBGMCU_FREEZE_IWDG();
 8009436:	4a04      	ldr	r2, [pc, #16]	; (8009448 <hal_watchdog_enable+0x14>)
 8009438:	6853      	ldr	r3, [r2, #4]
 800943a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800943e:	6053      	str	r3, [r2, #4]
    HAL_IWDG_Init(&g_wdt_cfg);
 8009440:	4802      	ldr	r0, [pc, #8]	; (800944c <hal_watchdog_enable+0x18>)
 8009442:	f000 fbc6 	bl	8009bd2 <HAL_IWDG_Init>
}
 8009446:	bd08      	pop	{r3, pc}
 8009448:	e0042000 	.word	0xe0042000
 800944c:	20002f44 	.word	0x20002f44

08009450 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
 8009450:	b508      	push	{r3, lr}
    HAL_IWDG_Refresh(&g_wdt_cfg);
 8009452:	4802      	ldr	r0, [pc, #8]	; (800945c <hal_watchdog_tickle+0xc>)
 8009454:	f000 fbe2 	bl	8009c1c <HAL_IWDG_Refresh>
}
 8009458:	bd08      	pop	{r3, pc}
 800945a:	bf00      	nop
 800945c:	20002f44 	.word	0x20002f44

08009460 <_sbrk>:
{
    static char *brk = &__HeapBase;

    void *prev_brk;

    if (incr < 0) {
 8009460:	1e03      	subs	r3, r0, #0
 8009462:	db09      	blt.n	8009478 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (&__HeapLimit - brk >= incr) {
 8009464:	4a0c      	ldr	r2, [pc, #48]	; (8009498 <_sbrk+0x38>)
 8009466:	6810      	ldr	r0, [r2, #0]
 8009468:	4a0c      	ldr	r2, [pc, #48]	; (800949c <_sbrk+0x3c>)
 800946a:	1a12      	subs	r2, r2, r0
 800946c:	429a      	cmp	r2, r3
 800946e:	db0f      	blt.n	8009490 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
 8009470:	4403      	add	r3, r0
 8009472:	4a09      	ldr	r2, [pc, #36]	; (8009498 <_sbrk+0x38>)
 8009474:	6013      	str	r3, [r2, #0]
 8009476:	4770      	bx	lr
        if (brk - incr < &__HeapBase) {
 8009478:	4a07      	ldr	r2, [pc, #28]	; (8009498 <_sbrk+0x38>)
 800947a:	6810      	ldr	r0, [r2, #0]
 800947c:	4403      	add	r3, r0
 800947e:	4a08      	ldr	r2, [pc, #32]	; (80094a0 <_sbrk+0x40>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d302      	bcc.n	800948a <_sbrk+0x2a>
            brk -= incr;
 8009484:	4a04      	ldr	r2, [pc, #16]	; (8009498 <_sbrk+0x38>)
 8009486:	6013      	str	r3, [r2, #0]
 8009488:	4770      	bx	lr
            prev_brk = (void *)-1;
 800948a:	f04f 30ff 	mov.w	r0, #4294967295
 800948e:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
 8009490:	f04f 30ff 	mov.w	r0, #4294967295
        }
    }

    return prev_brk;
}
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20000198 	.word	0x20000198
 800949c:	20005000 	.word	0x20005000
 80094a0:	20002f78 	.word	0x20002f78

080094a4 <hal_gpio_clk_enable>:
 *
 * @param port_idx
 */
static void
hal_gpio_clk_enable(uint32_t port_idx)
{
 80094a4:	b500      	push	{lr}
 80094a6:	b087      	sub	sp, #28
    switch (port_idx) {
 80094a8:	2804      	cmp	r0, #4
 80094aa:	d83d      	bhi.n	8009528 <hal_gpio_clk_enable+0x84>
 80094ac:	e8df f000 	tbb	[pc, r0]
 80094b0:	261b1003 	.word	0x261b1003
 80094b4:	31          	.byte	0x31
 80094b5:	00          	.byte	0x00
#if defined GPIOA_BASE
    case 0:
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80094b6:	4b1f      	ldr	r3, [pc, #124]	; (8009534 <hal_gpio_clk_enable+0x90>)
 80094b8:	699a      	ldr	r2, [r3, #24]
 80094ba:	f042 0204 	orr.w	r2, r2, #4
 80094be:	619a      	str	r2, [r3, #24]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	f003 0304 	and.w	r3, r3, #4
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	9b01      	ldr	r3, [sp, #4]
#endif
    default:
        assert(0);
        break;
    }
}
 80094ca:	b007      	add	sp, #28
 80094cc:	f85d fb04 	ldr.w	pc, [sp], #4
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80094d0:	4b18      	ldr	r3, [pc, #96]	; (8009534 <hal_gpio_clk_enable+0x90>)
 80094d2:	699a      	ldr	r2, [r3, #24]
 80094d4:	f042 0208 	orr.w	r2, r2, #8
 80094d8:	619a      	str	r2, [r3, #24]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	f003 0308 	and.w	r3, r3, #8
 80094e0:	9302      	str	r3, [sp, #8]
 80094e2:	9b02      	ldr	r3, [sp, #8]
        break;
 80094e4:	e7f1      	b.n	80094ca <hal_gpio_clk_enable+0x26>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80094e6:	4b13      	ldr	r3, [pc, #76]	; (8009534 <hal_gpio_clk_enable+0x90>)
 80094e8:	699a      	ldr	r2, [r3, #24]
 80094ea:	f042 0210 	orr.w	r2, r2, #16
 80094ee:	619a      	str	r2, [r3, #24]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	f003 0310 	and.w	r3, r3, #16
 80094f6:	9303      	str	r3, [sp, #12]
 80094f8:	9b03      	ldr	r3, [sp, #12]
        break;
 80094fa:	e7e6      	b.n	80094ca <hal_gpio_clk_enable+0x26>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80094fc:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <hal_gpio_clk_enable+0x90>)
 80094fe:	699a      	ldr	r2, [r3, #24]
 8009500:	f042 0220 	orr.w	r2, r2, #32
 8009504:	619a      	str	r2, [r3, #24]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	f003 0320 	and.w	r3, r3, #32
 800950c:	9304      	str	r3, [sp, #16]
 800950e:	9b04      	ldr	r3, [sp, #16]
        break;
 8009510:	e7db      	b.n	80094ca <hal_gpio_clk_enable+0x26>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8009512:	4b08      	ldr	r3, [pc, #32]	; (8009534 <hal_gpio_clk_enable+0x90>)
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800951a:	619a      	str	r2, [r3, #24]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009522:	9305      	str	r3, [sp, #20]
 8009524:	9b05      	ldr	r3, [sp, #20]
        break;
 8009526:	e7d0      	b.n	80094ca <hal_gpio_clk_enable+0x26>
        assert(0);
 8009528:	2300      	movs	r3, #0
 800952a:	461a      	mov	r2, r3
 800952c:	4619      	mov	r1, r3
 800952e:	4618      	mov	r0, r3
 8009530:	f7fc fc60 	bl	8005df4 <__assert_func>
 8009534:	40021000 	.word	0x40021000

08009538 <hal_gpio_init_stm>:
 *
 * @return int
 */
int
hal_gpio_init_stm(int pin, GPIO_InitTypeDef *cfg)
{
 8009538:	b538      	push	{r3, r4, r5, lr}
    int port;
    uint32_t mcu_pin_mask;

    /* Is this a valid pin? */
    port = MCU_GPIO_PIN_PORT(pin);
 800953a:	f3c0 1503 	ubfx	r5, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 800953e:	2d04      	cmp	r5, #4
 8009540:	dc11      	bgt.n	8009566 <hal_gpio_init_stm+0x2e>
 8009542:	460c      	mov	r4, r1
        return -1;
    }

    mcu_pin_mask = GPIO_MASK(pin);
 8009544:	f000 000f 	and.w	r0, r0, #15
 8009548:	2301      	movs	r3, #1
 800954a:	fa03 f000 	lsl.w	r0, r3, r0
    cfg->Pin = mcu_pin_mask;
 800954e:	6008      	str	r0, [r1, #0]

    /* Enable the GPIO clock */
    hal_gpio_clk_enable(port);
 8009550:	4628      	mov	r0, r5
 8009552:	f7ff ffa7 	bl	80094a4 <hal_gpio_clk_enable>

    /* Initialize pin as an input, setting proper mode */
    HAL_GPIO_Init(portmap[port], cfg);
 8009556:	4621      	mov	r1, r4
 8009558:	4b04      	ldr	r3, [pc, #16]	; (800956c <hal_gpio_init_stm+0x34>)
 800955a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800955e:	f000 f9d1 	bl	8009904 <HAL_GPIO_Init>

    return 0;
 8009562:	2000      	movs	r0, #0
}
 8009564:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
 8009566:	f04f 30ff 	mov.w	r0, #4294967295
 800956a:	e7fb      	b.n	8009564 <hal_gpio_init_stm+0x2c>
 800956c:	0800f6e4 	.word	0x0800f6e4

08009570 <hal_gpio_deinit_stm>:
 *
 * @return int
 */
int
hal_gpio_deinit_stm(int pin, GPIO_InitTypeDef *cfg)
{
 8009570:	b510      	push	{r4, lr}
    int port;
    uint32_t mcu_pin_mask;

    /* Is this a valid pin? */
    port = MCU_GPIO_PIN_PORT(pin);
 8009572:	f3c0 1403 	ubfx	r4, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 8009576:	2c04      	cmp	r4, #4
 8009578:	dc0d      	bgt.n	8009596 <hal_gpio_deinit_stm+0x26>
 800957a:	460a      	mov	r2, r1
        return -1;
    }

    mcu_pin_mask = GPIO_MASK(pin);
 800957c:	f000 000f 	and.w	r0, r0, #15
 8009580:	2301      	movs	r3, #1
 8009582:	fa03 f100 	lsl.w	r1, r3, r0
    cfg->Pin = mcu_pin_mask;
 8009586:	6011      	str	r1, [r2, #0]

    /* Initialize pin as an input, setting proper mode */
    HAL_GPIO_DeInit(portmap[port], cfg->Pin);
 8009588:	4b04      	ldr	r3, [pc, #16]	; (800959c <hal_gpio_deinit_stm+0x2c>)
 800958a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800958e:	f000 faa3 	bl	8009ad8 <HAL_GPIO_DeInit>

    return 0;
 8009592:	2000      	movs	r0, #0
}
 8009594:	bd10      	pop	{r4, pc}
        return -1;
 8009596:	f04f 30ff 	mov.w	r0, #4294967295
 800959a:	e7fb      	b.n	8009594 <hal_gpio_deinit_stm+0x24>
 800959c:	0800f6e4 	.word	0x0800f6e4

080095a0 <hal_gpio_write>:
 *
 * @param pin Pin to set
 * @param val Value to set pin (0:low 1:high)
 */
void hal_gpio_write(int pin, int val)
{
 80095a0:	b510      	push	{r4, lr}
    int port;
    uint32_t mcu_pin_mask;
    GPIO_PinState state;

    port = MCU_GPIO_PIN_PORT(pin);
 80095a2:	f3c0 1403 	ubfx	r4, r0, #4, #4
    mcu_pin_mask = GPIO_MASK(pin);
 80095a6:	f000 000f 	and.w	r0, r0, #15
 80095aa:	2301      	movs	r3, #1
 80095ac:	fa03 f000 	lsl.w	r0, r3, r0

    if (val) {
 80095b0:	b939      	cbnz	r1, 80095c2 <hal_gpio_write+0x22>
        state = GPIO_PIN_SET;
    } else {
        state = GPIO_PIN_RESET;
 80095b2:	2200      	movs	r2, #0
    }

    HAL_GPIO_WritePin(portmap[port], mcu_pin_mask, state);
 80095b4:	b281      	uxth	r1, r0
 80095b6:	4b04      	ldr	r3, [pc, #16]	; (80095c8 <hal_gpio_write+0x28>)
 80095b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80095bc:	f000 fb03 	bl	8009bc6 <HAL_GPIO_WritePin>
}
 80095c0:	bd10      	pop	{r4, pc}
        state = GPIO_PIN_SET;
 80095c2:	461a      	mov	r2, r3
 80095c4:	e7f6      	b.n	80095b4 <hal_gpio_write+0x14>
 80095c6:	bf00      	nop
 80095c8:	0800f6e4 	.word	0x0800f6e4

080095cc <hal_gpio_init_out>:
{
 80095cc:	b570      	push	{r4, r5, r6, lr}
 80095ce:	b084      	sub	sp, #16
    port = MCU_GPIO_PIN_PORT(pin);
 80095d0:	f3c0 1503 	ubfx	r5, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 80095d4:	2d04      	cmp	r5, #4
 80095d6:	dc1c      	bgt.n	8009612 <hal_gpio_init_out+0x46>
 80095d8:	460e      	mov	r6, r1
 80095da:	4604      	mov	r4, r0
    hal_gpio_clk_enable(port);
 80095dc:	4628      	mov	r0, r5
 80095de:	f7ff ff61 	bl	80094a4 <hal_gpio_clk_enable>
    hal_gpio_write(pin, val);
 80095e2:	4631      	mov	r1, r6
 80095e4:	4620      	mov	r0, r4
 80095e6:	f7ff ffdb 	bl	80095a0 <hal_gpio_write>
    cfg.Pin = GPIO_MASK(pin);
 80095ea:	f004 000f 	and.w	r0, r4, #15
 80095ee:	2301      	movs	r3, #1
 80095f0:	fa03 f000 	lsl.w	r0, r3, r0
 80095f4:	9000      	str	r0, [sp, #0]
    cfg.Mode = GPIO_MODE_OUTPUT_PP;
 80095f6:	9301      	str	r3, [sp, #4]
    cfg.Pull = GPIO_NOPULL;
 80095f8:	2400      	movs	r4, #0
 80095fa:	9402      	str	r4, [sp, #8]
    cfg.Speed = GPIO_SPEED_FREQ_HIGH;
 80095fc:	2303      	movs	r3, #3
 80095fe:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(portmap[port], &cfg);
 8009600:	4669      	mov	r1, sp
 8009602:	4b05      	ldr	r3, [pc, #20]	; (8009618 <hal_gpio_init_out+0x4c>)
 8009604:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009608:	f000 f97c 	bl	8009904 <HAL_GPIO_Init>
    return 0;
 800960c:	4620      	mov	r0, r4
}
 800960e:	b004      	add	sp, #16
 8009610:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8009612:	f04f 30ff 	mov.w	r0, #4294967295
 8009616:	e7fa      	b.n	800960e <hal_gpio_init_out+0x42>
 8009618:	0800f6e4 	.word	0x0800f6e4

0800961c <hal_gpio_read>:
 * @param pin Pin number to read
 *
 * @return int 0: low, 1: high
 */
int hal_gpio_read(int pin)
{
 800961c:	b508      	push	{r3, lr}
    int port;
    uint32_t mcu_pin_mask;

    port = MCU_GPIO_PIN_PORT(pin);
 800961e:	f3c0 1203 	ubfx	r2, r0, #4, #4
    mcu_pin_mask = GPIO_MASK(pin);
 8009622:	f000 000f 	and.w	r0, r0, #15
 8009626:	2101      	movs	r1, #1
 8009628:	4081      	lsls	r1, r0
    return HAL_GPIO_ReadPin(portmap[port], mcu_pin_mask);
 800962a:	b289      	uxth	r1, r1
 800962c:	4b02      	ldr	r3, [pc, #8]	; (8009638 <hal_gpio_read+0x1c>)
 800962e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009632:	f000 fac1 	bl	8009bb8 <HAL_GPIO_ReadPin>
}
 8009636:	bd08      	pop	{r3, pc}
 8009638:	0800f6e4 	.word	0x0800f6e4

0800963c <hal_gpio_toggle>:
 * @param pin Pin number to toggle
 *
 * @return current pin state int 0: low 1 : high
 */
int hal_gpio_toggle(int pin)
{
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4605      	mov	r5, r0
    int pin_state = (hal_gpio_read(pin) != 1);
 8009640:	f7ff ffec 	bl	800961c <hal_gpio_read>
 8009644:	f110 34ff 	adds.w	r4, r0, #4294967295
 8009648:	bf18      	it	ne
 800964a:	2401      	movne	r4, #1
    hal_gpio_write(pin, pin_state);
 800964c:	4621      	mov	r1, r4
 800964e:	4628      	mov	r0, r5
 8009650:	f7ff ffa6 	bl	80095a0 <hal_gpio_write>
    return pin_state;
}
 8009654:	4620      	mov	r0, r4
 8009656:	bd38      	pop	{r3, r4, r5, pc}

08009658 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009658:	4b04      	ldr	r3, [pc, #16]	; (800966c <FLASH_Program_HalfWord+0x14>)
 800965a:	2200      	movs	r2, #0
 800965c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800965e:	4a04      	ldr	r2, [pc, #16]	; (8009670 <FLASH_Program_HalfWord+0x18>)
 8009660:	6913      	ldr	r3, [r2, #16]
 8009662:	f043 0301 	orr.w	r3, r3, #1
 8009666:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8009668:	8001      	strh	r1, [r0, #0]
}
 800966a:	4770      	bx	lr
 800966c:	20002f50 	.word	0x20002f50
 8009670:	40022000 	.word	0x40022000

08009674 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8009674:	4b1a      	ldr	r3, [pc, #104]	; (80096e0 <FLASH_SetErrorCode+0x6c>)
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	f013 0f10 	tst.w	r3, #16
 800967c:	d027      	beq.n	80096ce <FLASH_SetErrorCode+0x5a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800967e:	4a19      	ldr	r2, [pc, #100]	; (80096e4 <FLASH_SetErrorCode+0x70>)
 8009680:	69d3      	ldr	r3, [r2, #28]
 8009682:	f043 0302 	orr.w	r3, r3, #2
 8009686:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8009688:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800968a:	4a15      	ldr	r2, [pc, #84]	; (80096e0 <FLASH_SetErrorCode+0x6c>)
 800968c:	68d2      	ldr	r2, [r2, #12]
 800968e:	f012 0f04 	tst.w	r2, #4
 8009692:	d006      	beq.n	80096a2 <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8009694:	4913      	ldr	r1, [pc, #76]	; (80096e4 <FLASH_SetErrorCode+0x70>)
 8009696:	69ca      	ldr	r2, [r1, #28]
 8009698:	f042 0201 	orr.w	r2, r2, #1
 800969c:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800969e:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80096a2:	4a0f      	ldr	r2, [pc, #60]	; (80096e0 <FLASH_SetErrorCode+0x6c>)
 80096a4:	69d2      	ldr	r2, [r2, #28]
 80096a6:	f012 0f01 	tst.w	r2, #1
 80096aa:	d009      	beq.n	80096c0 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80096ac:	490d      	ldr	r1, [pc, #52]	; (80096e4 <FLASH_SetErrorCode+0x70>)
 80096ae:	69ca      	ldr	r2, [r1, #28]
 80096b0:	f042 0204 	orr.w	r2, r2, #4
 80096b4:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80096b6:	490a      	ldr	r1, [pc, #40]	; (80096e0 <FLASH_SetErrorCode+0x6c>)
 80096b8:	69ca      	ldr	r2, [r1, #28]
 80096ba:	f022 0201 	bic.w	r2, r2, #1
 80096be:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80096c0:	f240 1201 	movw	r2, #257	; 0x101
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d004      	beq.n	80096d2 <FLASH_SetErrorCode+0x5e>
 80096c8:	4a05      	ldr	r2, [pc, #20]	; (80096e0 <FLASH_SetErrorCode+0x6c>)
 80096ca:	60d3      	str	r3, [r2, #12]
}  
 80096cc:	4770      	bx	lr
  uint32_t flags = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	e7db      	b.n	800968a <FLASH_SetErrorCode+0x16>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80096d2:	4a03      	ldr	r2, [pc, #12]	; (80096e0 <FLASH_SetErrorCode+0x6c>)
 80096d4:	69d3      	ldr	r3, [r2, #28]
 80096d6:	f023 0301 	bic.w	r3, r3, #1
 80096da:	61d3      	str	r3, [r2, #28]
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	40022000 	.word	0x40022000
 80096e4:	20002f50 	.word	0x20002f50

080096e8 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80096e8:	4b07      	ldr	r3, [pc, #28]	; (8009708 <HAL_FLASH_Unlock+0x20>)
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096f0:	d007      	beq.n	8009702 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80096f2:	4b05      	ldr	r3, [pc, #20]	; (8009708 <HAL_FLASH_Unlock+0x20>)
 80096f4:	4a05      	ldr	r2, [pc, #20]	; (800970c <HAL_FLASH_Unlock+0x24>)
 80096f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80096f8:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80096fc:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 80096fe:	2000      	movs	r0, #0
 8009700:	4770      	bx	lr
    return HAL_ERROR;
 8009702:	2001      	movs	r0, #1
}
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	40022000 	.word	0x40022000
 800970c:	45670123 	.word	0x45670123

08009710 <FLASH_WaitForLastOperation>:
{
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009714:	f7ff f9f4 	bl	8008b00 <HAL_GetTick>
 8009718:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800971a:	4b17      	ldr	r3, [pc, #92]	; (8009778 <FLASH_WaitForLastOperation+0x68>)
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	f013 0f01 	tst.w	r3, #1
 8009722:	d00a      	beq.n	800973a <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8009724:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009728:	d0f7      	beq.n	800971a <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800972a:	b30c      	cbz	r4, 8009770 <FLASH_WaitForLastOperation+0x60>
 800972c:	f7ff f9e8 	bl	8008b00 <HAL_GetTick>
 8009730:	1b40      	subs	r0, r0, r5
 8009732:	42a0      	cmp	r0, r4
 8009734:	d9f1      	bls.n	800971a <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8009736:	2003      	movs	r0, #3
 8009738:	e019      	b.n	800976e <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800973a:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <FLASH_WaitForLastOperation+0x68>)
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	f013 0f20 	tst.w	r3, #32
 8009742:	d002      	beq.n	800974a <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009744:	4b0c      	ldr	r3, [pc, #48]	; (8009778 <FLASH_WaitForLastOperation+0x68>)
 8009746:	2220      	movs	r2, #32
 8009748:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800974a:	4b0b      	ldr	r3, [pc, #44]	; (8009778 <FLASH_WaitForLastOperation+0x68>)
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f013 0f10 	tst.w	r3, #16
 8009752:	d109      	bne.n	8009768 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8009754:	4b08      	ldr	r3, [pc, #32]	; (8009778 <FLASH_WaitForLastOperation+0x68>)
 8009756:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8009758:	f013 0f01 	tst.w	r3, #1
 800975c:	d104      	bne.n	8009768 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800975e:	4b06      	ldr	r3, [pc, #24]	; (8009778 <FLASH_WaitForLastOperation+0x68>)
 8009760:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8009762:	f013 0f04 	tst.w	r3, #4
 8009766:	d005      	beq.n	8009774 <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8009768:	f7ff ff84 	bl	8009674 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800976c:	2001      	movs	r0, #1
}
 800976e:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 8009770:	2003      	movs	r0, #3
 8009772:	e7fc      	b.n	800976e <FLASH_WaitForLastOperation+0x5e>
  return HAL_OK;
 8009774:	2000      	movs	r0, #0
 8009776:	e7fa      	b.n	800976e <FLASH_WaitForLastOperation+0x5e>
 8009778:	40022000 	.word	0x40022000

0800977c <HAL_FLASH_Program>:
{
 800977c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8009780:	4c23      	ldr	r4, [pc, #140]	; (8009810 <HAL_FLASH_Program+0x94>)
 8009782:	7e24      	ldrb	r4, [r4, #24]
 8009784:	2c01      	cmp	r4, #1
 8009786:	d041      	beq.n	800980c <HAL_FLASH_Program+0x90>
 8009788:	461e      	mov	r6, r3
 800978a:	4690      	mov	r8, r2
 800978c:	460f      	mov	r7, r1
 800978e:	4604      	mov	r4, r0
 8009790:	4b1f      	ldr	r3, [pc, #124]	; (8009810 <HAL_FLASH_Program+0x94>)
 8009792:	2201      	movs	r2, #1
 8009794:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009796:	f24c 3050 	movw	r0, #50000	; 0xc350
 800979a:	f7ff ffb9 	bl	8009710 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800979e:	4603      	mov	r3, r0
 80097a0:	bb70      	cbnz	r0, 8009800 <HAL_FLASH_Program+0x84>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80097a2:	2c01      	cmp	r4, #1
 80097a4:	d029      	beq.n	80097fa <HAL_FLASH_Program+0x7e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80097a6:	2c02      	cmp	r4, #2
 80097a8:	d024      	beq.n	80097f4 <HAL_FLASH_Program+0x78>
      nbiterations = 4U;
 80097aa:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 80097ae:	2400      	movs	r4, #0
 80097b0:	454c      	cmp	r4, r9
 80097b2:	d225      	bcs.n	8009800 <HAL_FLASH_Program+0x84>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80097b4:	0121      	lsls	r1, r4, #4
 80097b6:	f1c1 0220 	rsb	r2, r1, #32
 80097ba:	f1a1 0320 	sub.w	r3, r1, #32
 80097be:	fa28 f101 	lsr.w	r1, r8, r1
 80097c2:	fa06 f202 	lsl.w	r2, r6, r2
 80097c6:	4311      	orrs	r1, r2
 80097c8:	fa26 f303 	lsr.w	r3, r6, r3
 80097cc:	4319      	orrs	r1, r3
 80097ce:	b289      	uxth	r1, r1
 80097d0:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 80097d4:	f7ff ff40 	bl	8009658 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80097d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80097dc:	f7ff ff98 	bl	8009710 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80097e0:	4b0c      	ldr	r3, [pc, #48]	; (8009814 <HAL_FLASH_Program+0x98>)
 80097e2:	691d      	ldr	r5, [r3, #16]
 80097e4:	f025 0501 	bic.w	r5, r5, #1
 80097e8:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 80097ea:	4603      	mov	r3, r0
 80097ec:	b940      	cbnz	r0, 8009800 <HAL_FLASH_Program+0x84>
    for (index = 0U; index < nbiterations; index++)
 80097ee:	3401      	adds	r4, #1
 80097f0:	b2e4      	uxtb	r4, r4
 80097f2:	e7dd      	b.n	80097b0 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 80097f4:	f04f 0902 	mov.w	r9, #2
 80097f8:	e7d9      	b.n	80097ae <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 80097fa:	f04f 0901 	mov.w	r9, #1
 80097fe:	e7d6      	b.n	80097ae <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 8009800:	4a03      	ldr	r2, [pc, #12]	; (8009810 <HAL_FLASH_Program+0x94>)
 8009802:	2100      	movs	r1, #0
 8009804:	7611      	strb	r1, [r2, #24]
}
 8009806:	4618      	mov	r0, r3
 8009808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800980c:	2302      	movs	r3, #2
 800980e:	e7fa      	b.n	8009806 <HAL_FLASH_Program+0x8a>
 8009810:	20002f50 	.word	0x20002f50
 8009814:	40022000 	.word	0x40022000

08009818 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009818:	4b06      	ldr	r3, [pc, #24]	; (8009834 <FLASH_MassErase+0x1c>)
 800981a:	2200      	movs	r2, #0
 800981c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800981e:	4b06      	ldr	r3, [pc, #24]	; (8009838 <FLASH_MassErase+0x20>)
 8009820:	691a      	ldr	r2, [r3, #16]
 8009822:	f042 0204 	orr.w	r2, r2, #4
 8009826:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009828:	691a      	ldr	r2, [r3, #16]
 800982a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800982e:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	20002f50 	.word	0x20002f50
 8009838:	40022000 	.word	0x40022000

0800983c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800983c:	4b06      	ldr	r3, [pc, #24]	; (8009858 <FLASH_PageErase+0x1c>)
 800983e:	2200      	movs	r2, #0
 8009840:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009842:	4b06      	ldr	r3, [pc, #24]	; (800985c <FLASH_PageErase+0x20>)
 8009844:	691a      	ldr	r2, [r3, #16]
 8009846:	f042 0202 	orr.w	r2, r2, #2
 800984a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800984c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800984e:	691a      	ldr	r2, [r3, #16]
 8009850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009854:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8009856:	4770      	bx	lr
 8009858:	20002f50 	.word	0x20002f50
 800985c:	40022000 	.word	0x40022000

08009860 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 8009860:	4b26      	ldr	r3, [pc, #152]	; (80098fc <HAL_FLASHEx_Erase+0x9c>)
 8009862:	7e1b      	ldrb	r3, [r3, #24]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d046      	beq.n	80098f6 <HAL_FLASHEx_Erase+0x96>
{
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	460e      	mov	r6, r1
 800986c:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 800986e:	4b23      	ldr	r3, [pc, #140]	; (80098fc <HAL_FLASHEx_Erase+0x9c>)
 8009870:	2201      	movs	r2, #1
 8009872:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009874:	6803      	ldr	r3, [r0, #0]
 8009876:	2b02      	cmp	r3, #2
 8009878:	d020      	beq.n	80098bc <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800987a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800987e:	f7ff ff47 	bl	8009710 <FLASH_WaitForLastOperation>
 8009882:	bb90      	cbnz	r0, 80098ea <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 8009884:	f04f 33ff 	mov.w	r3, #4294967295
 8009888:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 800988a:	68a5      	ldr	r5, [r4, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 800988c:	2201      	movs	r2, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800988e:	68e1      	ldr	r1, [r4, #12]
 8009890:	68a3      	ldr	r3, [r4, #8]
 8009892:	eb03 2381 	add.w	r3, r3, r1, lsl #10
        for(address = pEraseInit->PageAddress;
 8009896:	42ab      	cmp	r3, r5
 8009898:	d928      	bls.n	80098ec <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 800989a:	4628      	mov	r0, r5
 800989c:	f7ff ffce 	bl	800983c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80098a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80098a4:	f7ff ff34 	bl	8009710 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80098a8:	4a15      	ldr	r2, [pc, #84]	; (8009900 <HAL_FLASHEx_Erase+0xa0>)
 80098aa:	6913      	ldr	r3, [r2, #16]
 80098ac:	f023 0302 	bic.w	r3, r3, #2
 80098b0:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 80098b2:	4602      	mov	r2, r0
 80098b4:	b9b8      	cbnz	r0, 80098e6 <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 80098b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80098ba:	e7e8      	b.n	800988e <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80098bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80098c0:	f7ff ff26 	bl	8009710 <FLASH_WaitForLastOperation>
 80098c4:	b108      	cbz	r0, 80098ca <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 80098c6:	2201      	movs	r2, #1
 80098c8:	e010      	b.n	80098ec <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 80098ca:	2001      	movs	r0, #1
 80098cc:	f7ff ffa4 	bl	8009818 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80098d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80098d4:	f7ff ff1c 	bl	8009710 <FLASH_WaitForLastOperation>
 80098d8:	4602      	mov	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80098da:	4909      	ldr	r1, [pc, #36]	; (8009900 <HAL_FLASHEx_Erase+0xa0>)
 80098dc:	690b      	ldr	r3, [r1, #16]
 80098de:	f023 0304 	bic.w	r3, r3, #4
 80098e2:	610b      	str	r3, [r1, #16]
 80098e4:	e002      	b.n	80098ec <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 80098e6:	6035      	str	r5, [r6, #0]
            break;
 80098e8:	e000      	b.n	80098ec <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 80098ea:	2201      	movs	r2, #1
  __HAL_UNLOCK(&pFlash);
 80098ec:	4b03      	ldr	r3, [pc, #12]	; (80098fc <HAL_FLASHEx_Erase+0x9c>)
 80098ee:	2100      	movs	r1, #0
 80098f0:	7619      	strb	r1, [r3, #24]
}
 80098f2:	4610      	mov	r0, r2
 80098f4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 80098f6:	2202      	movs	r2, #2
}
 80098f8:	4610      	mov	r0, r2
 80098fa:	4770      	bx	lr
 80098fc:	20002f50 	.word	0x20002f50
 8009900:	40022000 	.word	0x40022000

08009904 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009904:	b4f0      	push	{r4, r5, r6, r7}
 8009906:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8009908:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800990a:	4635      	mov	r5, r6
 800990c:	e0a1      	b.n	8009a52 <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800990e:	2c00      	cmp	r4, #0
 8009910:	d059      	beq.n	80099c6 <HAL_GPIO_Init+0xc2>
 8009912:	2c01      	cmp	r4, #1
 8009914:	d100      	bne.n	8009918 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009916:	68ce      	ldr	r6, [r1, #12]
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009918:	2bff      	cmp	r3, #255	; 0xff
 800991a:	d868      	bhi.n	80099ee <HAL_GPIO_Init+0xea>
 800991c:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800991e:	2bff      	cmp	r3, #255	; 0xff
 8009920:	d868      	bhi.n	80099f4 <HAL_GPIO_Init+0xf0>
 8009922:	00ac      	lsls	r4, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8009924:	f8dc 2000 	ldr.w	r2, [ip]
 8009928:	270f      	movs	r7, #15
 800992a:	40a7      	lsls	r7, r4
 800992c:	ea22 0207 	bic.w	r2, r2, r7
 8009930:	fa06 f404 	lsl.w	r4, r6, r4
 8009934:	4322      	orrs	r2, r4
 8009936:	f8cc 2000 	str.w	r2, [ip]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800993a:	684a      	ldr	r2, [r1, #4]
 800993c:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8009940:	f000 8086 	beq.w	8009a50 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009944:	4a5e      	ldr	r2, [pc, #376]	; (8009ac0 <HAL_GPIO_Init+0x1bc>)
 8009946:	6994      	ldr	r4, [r2, #24]
 8009948:	f044 0401 	orr.w	r4, r4, #1
 800994c:	6194      	str	r4, [r2, #24]
 800994e:	6992      	ldr	r2, [r2, #24]
 8009950:	f002 0201 	and.w	r2, r2, #1
 8009954:	9201      	str	r2, [sp, #4]
 8009956:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8009958:	08ac      	lsrs	r4, r5, #2
 800995a:	1ca7      	adds	r7, r4, #2
 800995c:	4a59      	ldr	r2, [pc, #356]	; (8009ac4 <HAL_GPIO_Init+0x1c0>)
 800995e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8009962:	f005 0703 	and.w	r7, r5, #3
 8009966:	00bf      	lsls	r7, r7, #2
 8009968:	f04f 0c0f 	mov.w	ip, #15
 800996c:	fa0c fc07 	lsl.w	ip, ip, r7
 8009970:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009974:	4a54      	ldr	r2, [pc, #336]	; (8009ac8 <HAL_GPIO_Init+0x1c4>)
 8009976:	4290      	cmp	r0, r2
 8009978:	d042      	beq.n	8009a00 <HAL_GPIO_Init+0xfc>
 800997a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800997e:	4290      	cmp	r0, r2
 8009980:	d07f      	beq.n	8009a82 <HAL_GPIO_Init+0x17e>
 8009982:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009986:	4290      	cmp	r0, r2
 8009988:	d07d      	beq.n	8009a86 <HAL_GPIO_Init+0x182>
 800998a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800998e:	4290      	cmp	r0, r2
 8009990:	d034      	beq.n	80099fc <HAL_GPIO_Init+0xf8>
 8009992:	2204      	movs	r2, #4
 8009994:	e035      	b.n	8009a02 <HAL_GPIO_Init+0xfe>
      switch (GPIO_Init->Mode)
 8009996:	4f4d      	ldr	r7, [pc, #308]	; (8009acc <HAL_GPIO_Init+0x1c8>)
 8009998:	42bc      	cmp	r4, r7
 800999a:	d014      	beq.n	80099c6 <HAL_GPIO_Init+0xc2>
 800999c:	d90b      	bls.n	80099b6 <HAL_GPIO_Init+0xb2>
 800999e:	4f4c      	ldr	r7, [pc, #304]	; (8009ad0 <HAL_GPIO_Init+0x1cc>)
 80099a0:	42bc      	cmp	r4, r7
 80099a2:	d010      	beq.n	80099c6 <HAL_GPIO_Init+0xc2>
 80099a4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80099a8:	42bc      	cmp	r4, r7
 80099aa:	d00c      	beq.n	80099c6 <HAL_GPIO_Init+0xc2>
 80099ac:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80099b0:	42bc      	cmp	r4, r7
 80099b2:	d1b1      	bne.n	8009918 <HAL_GPIO_Init+0x14>
 80099b4:	e007      	b.n	80099c6 <HAL_GPIO_Init+0xc2>
 80099b6:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80099ba:	42bc      	cmp	r4, r7
 80099bc:	d003      	beq.n	80099c6 <HAL_GPIO_Init+0xc2>
 80099be:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80099c2:	42bc      	cmp	r4, r7
 80099c4:	d1a8      	bne.n	8009918 <HAL_GPIO_Init+0x14>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80099c6:	688c      	ldr	r4, [r1, #8]
 80099c8:	b17c      	cbz	r4, 80099ea <HAL_GPIO_Init+0xe6>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80099ca:	2c01      	cmp	r4, #1
 80099cc:	d008      	beq.n	80099e0 <HAL_GPIO_Init+0xdc>
            GPIOx->BRR = ioposition;
 80099ce:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80099d0:	2608      	movs	r6, #8
 80099d2:	e7a1      	b.n	8009918 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80099d4:	68ce      	ldr	r6, [r1, #12]
 80099d6:	3608      	adds	r6, #8
          break;
 80099d8:	e79e      	b.n	8009918 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80099da:	68ce      	ldr	r6, [r1, #12]
 80099dc:	360c      	adds	r6, #12
          break;
 80099de:	e79b      	b.n	8009918 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 80099e0:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80099e2:	2608      	movs	r6, #8
 80099e4:	e798      	b.n	8009918 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80099e6:	2600      	movs	r6, #0
 80099e8:	e796      	b.n	8009918 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80099ea:	2604      	movs	r6, #4
 80099ec:	e794      	b.n	8009918 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80099ee:	f100 0c04 	add.w	ip, r0, #4
 80099f2:	e794      	b.n	800991e <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80099f4:	f1a5 0408 	sub.w	r4, r5, #8
 80099f8:	00a4      	lsls	r4, r4, #2
 80099fa:	e793      	b.n	8009924 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80099fc:	2203      	movs	r2, #3
 80099fe:	e000      	b.n	8009a02 <HAL_GPIO_Init+0xfe>
 8009a00:	2200      	movs	r2, #0
 8009a02:	40ba      	lsls	r2, r7
 8009a04:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 8009a08:	3402      	adds	r4, #2
 8009a0a:	4f2e      	ldr	r7, [pc, #184]	; (8009ac4 <HAL_GPIO_Init+0x1c0>)
 8009a0c:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009a10:	684a      	ldr	r2, [r1, #4]
 8009a12:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8009a16:	d038      	beq.n	8009a8a <HAL_GPIO_Init+0x186>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8009a18:	4c2e      	ldr	r4, [pc, #184]	; (8009ad4 <HAL_GPIO_Init+0x1d0>)
 8009a1a:	6822      	ldr	r2, [r4, #0]
 8009a1c:	431a      	orrs	r2, r3
 8009a1e:	6022      	str	r2, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009a20:	684a      	ldr	r2, [r1, #4]
 8009a22:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8009a26:	d036      	beq.n	8009a96 <HAL_GPIO_Init+0x192>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8009a28:	4c2a      	ldr	r4, [pc, #168]	; (8009ad4 <HAL_GPIO_Init+0x1d0>)
 8009a2a:	6862      	ldr	r2, [r4, #4]
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	6062      	str	r2, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009a30:	684a      	ldr	r2, [r1, #4]
 8009a32:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8009a36:	d034      	beq.n	8009aa2 <HAL_GPIO_Init+0x19e>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8009a38:	4c26      	ldr	r4, [pc, #152]	; (8009ad4 <HAL_GPIO_Init+0x1d0>)
 8009a3a:	68a2      	ldr	r2, [r4, #8]
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	60a2      	str	r2, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009a40:	684a      	ldr	r2, [r1, #4]
 8009a42:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8009a46:	d032      	beq.n	8009aae <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8009a48:	4c22      	ldr	r4, [pc, #136]	; (8009ad4 <HAL_GPIO_Init+0x1d0>)
 8009a4a:	68e2      	ldr	r2, [r4, #12]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	60e3      	str	r3, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8009a50:	3501      	adds	r5, #1
 8009a52:	2d0f      	cmp	r5, #15
 8009a54:	d831      	bhi.n	8009aba <HAL_GPIO_Init+0x1b6>
    ioposition = (0x01U << position);
 8009a56:	2201      	movs	r2, #1
 8009a58:	40aa      	lsls	r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009a5a:	680b      	ldr	r3, [r1, #0]
 8009a5c:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d1f6      	bne.n	8009a50 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 8009a62:	684c      	ldr	r4, [r1, #4]
 8009a64:	2c12      	cmp	r4, #18
 8009a66:	d0b8      	beq.n	80099da <HAL_GPIO_Init+0xd6>
 8009a68:	d895      	bhi.n	8009996 <HAL_GPIO_Init+0x92>
 8009a6a:	2c02      	cmp	r4, #2
 8009a6c:	d0b2      	beq.n	80099d4 <HAL_GPIO_Init+0xd0>
 8009a6e:	f67f af4e 	bls.w	800990e <HAL_GPIO_Init+0xa>
 8009a72:	2c03      	cmp	r4, #3
 8009a74:	d0b7      	beq.n	80099e6 <HAL_GPIO_Init+0xe2>
 8009a76:	2c11      	cmp	r4, #17
 8009a78:	f47f af4e 	bne.w	8009918 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009a7c:	68ce      	ldr	r6, [r1, #12]
 8009a7e:	3604      	adds	r6, #4
          break;
 8009a80:	e74a      	b.n	8009918 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009a82:	2201      	movs	r2, #1
 8009a84:	e7bd      	b.n	8009a02 <HAL_GPIO_Init+0xfe>
 8009a86:	2202      	movs	r2, #2
 8009a88:	e7bb      	b.n	8009a02 <HAL_GPIO_Init+0xfe>
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8009a8a:	4c12      	ldr	r4, [pc, #72]	; (8009ad4 <HAL_GPIO_Init+0x1d0>)
 8009a8c:	6822      	ldr	r2, [r4, #0]
 8009a8e:	ea22 0203 	bic.w	r2, r2, r3
 8009a92:	6022      	str	r2, [r4, #0]
 8009a94:	e7c4      	b.n	8009a20 <HAL_GPIO_Init+0x11c>
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8009a96:	4c0f      	ldr	r4, [pc, #60]	; (8009ad4 <HAL_GPIO_Init+0x1d0>)
 8009a98:	6862      	ldr	r2, [r4, #4]
 8009a9a:	ea22 0203 	bic.w	r2, r2, r3
 8009a9e:	6062      	str	r2, [r4, #4]
 8009aa0:	e7c6      	b.n	8009a30 <HAL_GPIO_Init+0x12c>
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8009aa2:	4c0c      	ldr	r4, [pc, #48]	; (8009ad4 <HAL_GPIO_Init+0x1d0>)
 8009aa4:	68a2      	ldr	r2, [r4, #8]
 8009aa6:	ea22 0203 	bic.w	r2, r2, r3
 8009aaa:	60a2      	str	r2, [r4, #8]
 8009aac:	e7c8      	b.n	8009a40 <HAL_GPIO_Init+0x13c>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8009aae:	4c09      	ldr	r4, [pc, #36]	; (8009ad4 <HAL_GPIO_Init+0x1d0>)
 8009ab0:	68e2      	ldr	r2, [r4, #12]
 8009ab2:	ea22 0303 	bic.w	r3, r2, r3
 8009ab6:	60e3      	str	r3, [r4, #12]
 8009ab8:	e7ca      	b.n	8009a50 <HAL_GPIO_Init+0x14c>
        }
      }
    }
  }
}
 8009aba:	b002      	add	sp, #8
 8009abc:	bcf0      	pop	{r4, r5, r6, r7}
 8009abe:	4770      	bx	lr
 8009ac0:	40021000 	.word	0x40021000
 8009ac4:	40010000 	.word	0x40010000
 8009ac8:	40010800 	.word	0x40010800
 8009acc:	10210000 	.word	0x10210000
 8009ad0:	10310000 	.word	0x10310000
 8009ad4:	40010400 	.word	0x40010400

08009ad8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8009ad8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00U;
 8009ada:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8009adc:	e00e      	b.n	8009afc <HAL_GPIO_DeInit+0x24>
    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009ade:	f100 0c04 	add.w	ip, r0, #4
 8009ae2:	e015      	b.n	8009b10 <HAL_GPIO_DeInit+0x38>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8009ae4:	f1a4 0608 	sub.w	r6, r4, #8
 8009ae8:	00b7      	lsls	r7, r6, #2
 8009aea:	e014      	b.n	8009b16 <HAL_GPIO_DeInit+0x3e>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = AFIO->EXTICR[position >> 2U];
      tmp &= 0x0FU << (4U * (position & 0x03U));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009aec:	2703      	movs	r7, #3
 8009aee:	e000      	b.n	8009af2 <HAL_GPIO_DeInit+0x1a>
 8009af0:	2700      	movs	r7, #0
 8009af2:	fa07 f202 	lsl.w	r2, r7, r2
 8009af6:	42b2      	cmp	r2, r6
 8009af8:	d03e      	beq.n	8009b78 <HAL_GPIO_DeInit+0xa0>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8009afa:	3401      	adds	r4, #1
  while ((GPIO_Pin >> position) != 0U)
 8009afc:	fa31 f304 	lsrs.w	r3, r1, r4
 8009b00:	d051      	beq.n	8009ba6 <HAL_GPIO_DeInit+0xce>
    iocurrent = (GPIO_Pin) & (1U << position);
 8009b02:	2301      	movs	r3, #1
 8009b04:	40a3      	lsls	r3, r4
    if (iocurrent)
 8009b06:	400b      	ands	r3, r1
 8009b08:	d0f7      	beq.n	8009afa <HAL_GPIO_DeInit+0x22>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009b0a:	2bff      	cmp	r3, #255	; 0xff
 8009b0c:	d8e7      	bhi.n	8009ade <HAL_GPIO_DeInit+0x6>
 8009b0e:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8009b10:	2bff      	cmp	r3, #255	; 0xff
 8009b12:	d8e7      	bhi.n	8009ae4 <HAL_GPIO_DeInit+0xc>
 8009b14:	00a7      	lsls	r7, r4, #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 8009b16:	f8dc 2000 	ldr.w	r2, [ip]
 8009b1a:	250f      	movs	r5, #15
 8009b1c:	fa05 f607 	lsl.w	r6, r5, r7
 8009b20:	ea22 0206 	bic.w	r2, r2, r6
 8009b24:	2604      	movs	r6, #4
 8009b26:	40be      	lsls	r6, r7
 8009b28:	4332      	orrs	r2, r6
 8009b2a:	f8cc 2000 	str.w	r2, [ip]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009b2e:	68c2      	ldr	r2, [r0, #12]
 8009b30:	43db      	mvns	r3, r3
 8009b32:	401a      	ands	r2, r3
 8009b34:	60c2      	str	r2, [r0, #12]
      tmp = AFIO->EXTICR[position >> 2U];
 8009b36:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8009b3a:	f10c 0602 	add.w	r6, ip, #2
 8009b3e:	4a1b      	ldr	r2, [pc, #108]	; (8009bac <HAL_GPIO_DeInit+0xd4>)
 8009b40:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 8009b44:	f004 0203 	and.w	r2, r4, #3
 8009b48:	0092      	lsls	r2, r2, #2
 8009b4a:	4095      	lsls	r5, r2
 8009b4c:	402e      	ands	r6, r5
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009b4e:	4f18      	ldr	r7, [pc, #96]	; (8009bb0 <HAL_GPIO_DeInit+0xd8>)
 8009b50:	42b8      	cmp	r0, r7
 8009b52:	d0cd      	beq.n	8009af0 <HAL_GPIO_DeInit+0x18>
 8009b54:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8009b58:	42b8      	cmp	r0, r7
 8009b5a:	d009      	beq.n	8009b70 <HAL_GPIO_DeInit+0x98>
 8009b5c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8009b60:	42b8      	cmp	r0, r7
 8009b62:	d007      	beq.n	8009b74 <HAL_GPIO_DeInit+0x9c>
 8009b64:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8009b68:	42b8      	cmp	r0, r7
 8009b6a:	d0bf      	beq.n	8009aec <HAL_GPIO_DeInit+0x14>
 8009b6c:	2704      	movs	r7, #4
 8009b6e:	e7c0      	b.n	8009af2 <HAL_GPIO_DeInit+0x1a>
 8009b70:	2701      	movs	r7, #1
 8009b72:	e7be      	b.n	8009af2 <HAL_GPIO_DeInit+0x1a>
 8009b74:	2702      	movs	r7, #2
 8009b76:	e7bc      	b.n	8009af2 <HAL_GPIO_DeInit+0x1a>
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 8009b78:	4f0c      	ldr	r7, [pc, #48]	; (8009bac <HAL_GPIO_DeInit+0xd4>)
 8009b7a:	f10c 0202 	add.w	r2, ip, #2
 8009b7e:	f857 6022 	ldr.w	r6, [r7, r2, lsl #2]
 8009b82:	ea26 0505 	bic.w	r5, r6, r5
 8009b86:	f847 5022 	str.w	r5, [r7, r2, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009b8a:	4a0a      	ldr	r2, [pc, #40]	; (8009bb4 <HAL_GPIO_DeInit+0xdc>)
 8009b8c:	6815      	ldr	r5, [r2, #0]
 8009b8e:	401d      	ands	r5, r3
 8009b90:	6015      	str	r5, [r2, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009b92:	6855      	ldr	r5, [r2, #4]
 8009b94:	401d      	ands	r5, r3
 8009b96:	6055      	str	r5, [r2, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009b98:	6895      	ldr	r5, [r2, #8]
 8009b9a:	401d      	ands	r5, r3
 8009b9c:	6095      	str	r5, [r2, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009b9e:	68d5      	ldr	r5, [r2, #12]
 8009ba0:	402b      	ands	r3, r5
 8009ba2:	60d3      	str	r3, [r2, #12]
 8009ba4:	e7a9      	b.n	8009afa <HAL_GPIO_DeInit+0x22>
  }
}
 8009ba6:	bcf0      	pop	{r4, r5, r6, r7}
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	40010000 	.word	0x40010000
 8009bb0:	40010800 	.word	0x40010800
 8009bb4:	40010400 	.word	0x40010400

08009bb8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009bb8:	6883      	ldr	r3, [r0, #8]
 8009bba:	4219      	tst	r1, r3
 8009bbc:	d101      	bne.n	8009bc2 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009bbe:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8009bc0:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8009bc2:	2001      	movs	r0, #1
 8009bc4:	4770      	bx	lr

08009bc6 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009bc6:	b912      	cbnz	r2, 8009bce <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009bc8:	0409      	lsls	r1, r1, #16
 8009bca:	6101      	str	r1, [r0, #16]
  }
}
 8009bcc:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8009bce:	6101      	str	r1, [r0, #16]
 8009bd0:	4770      	bx	lr

08009bd2 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8009bd2:	b308      	cbz	r0, 8009c18 <HAL_IWDG_Init+0x46>
{
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8009bd8:	6803      	ldr	r3, [r0, #0]
 8009bda:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009bde:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009be0:	6803      	ldr	r3, [r0, #0]
 8009be2:	f245 5255 	movw	r2, #21845	; 0x5555
 8009be6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009be8:	6803      	ldr	r3, [r0, #0]
 8009bea:	6842      	ldr	r2, [r0, #4]
 8009bec:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009bee:	6803      	ldr	r3, [r0, #0]
 8009bf0:	6882      	ldr	r2, [r0, #8]
 8009bf2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009bf4:	f7fe ff84 	bl	8008b00 <HAL_GetTick>
 8009bf8:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	68da      	ldr	r2, [r3, #12]
 8009bfe:	b132      	cbz	r2, 8009c0e <HAL_IWDG_Init+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009c00:	f7fe ff7e 	bl	8008b00 <HAL_GetTick>
 8009c04:	1b40      	subs	r0, r0, r5
 8009c06:	2830      	cmp	r0, #48	; 0x30
 8009c08:	d9f7      	bls.n	8009bfa <HAL_IWDG_Init+0x28>
    {
      return HAL_TIMEOUT;
 8009c0a:	2003      	movs	r0, #3
 8009c0c:	e003      	b.n	8009c16 <HAL_IWDG_Init+0x44>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009c0e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009c12:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009c14:	2000      	movs	r0, #0
}
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009c18:	2001      	movs	r0, #1
}
 8009c1a:	4770      	bx	lr

08009c1c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009c1c:	6803      	ldr	r3, [r0, #0]
 8009c1e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009c22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8009c24:	2000      	movs	r0, #0
 8009c26:	4770      	bx	lr

08009c28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009c28:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009c2a:	4b08      	ldr	r3, [pc, #32]	; (8009c4c <RCC_Delay+0x24>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a08      	ldr	r2, [pc, #32]	; (8009c50 <RCC_Delay+0x28>)
 8009c30:	fba2 2303 	umull	r2, r3, r2, r3
 8009c34:	0a5b      	lsrs	r3, r3, #9
 8009c36:	fb00 f003 	mul.w	r0, r0, r3
 8009c3a:	9001      	str	r0, [sp, #4]
  do 
  {
    __NOP();
 8009c3c:	bf00      	nop
  } 
  while (Delay --);
 8009c3e:	9b01      	ldr	r3, [sp, #4]
 8009c40:	1e5a      	subs	r2, r3, #1
 8009c42:	9201      	str	r2, [sp, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1f9      	bne.n	8009c3c <RCC_Delay+0x14>
}
 8009c48:	b002      	add	sp, #8
 8009c4a:	4770      	bx	lr
 8009c4c:	20000110 	.word	0x20000110
 8009c50:	10624dd3 	.word	0x10624dd3

08009c54 <HAL_RCC_OscConfig>:
{
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c5a:	6803      	ldr	r3, [r0, #0]
 8009c5c:	f013 0f01 	tst.w	r3, #1
 8009c60:	d02c      	beq.n	8009cbc <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8009c62:	4bab      	ldr	r3, [pc, #684]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	f003 030c 	and.w	r3, r3, #12
 8009c6a:	2b04      	cmp	r3, #4
 8009c6c:	d01d      	beq.n	8009caa <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009c6e:	4ba8      	ldr	r3, [pc, #672]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f003 030c 	and.w	r3, r3, #12
 8009c76:	2b08      	cmp	r3, #8
 8009c78:	d012      	beq.n	8009ca0 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c7a:	6863      	ldr	r3, [r4, #4]
 8009c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c80:	d041      	beq.n	8009d06 <HAL_RCC_OscConfig+0xb2>
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d155      	bne.n	8009d32 <HAL_RCC_OscConfig+0xde>
 8009c86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c8a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	e037      	b.n	8009d10 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009ca0:	4b9b      	ldr	r3, [pc, #620]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009ca8:	d0e7      	beq.n	8009c7a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009caa:	4b99      	ldr	r3, [pc, #612]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009cb2:	d003      	beq.n	8009cbc <HAL_RCC_OscConfig+0x68>
 8009cb4:	6863      	ldr	r3, [r4, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 81ae 	beq.w	800a018 <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	f013 0f02 	tst.w	r3, #2
 8009cc2:	d076      	beq.n	8009db2 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8009cc4:	4b92      	ldr	r3, [pc, #584]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	f013 0f0c 	tst.w	r3, #12
 8009ccc:	d05f      	beq.n	8009d8e <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009cce:	4b90      	ldr	r3, [pc, #576]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f003 030c 	and.w	r3, r3, #12
 8009cd6:	2b08      	cmp	r3, #8
 8009cd8:	d054      	beq.n	8009d84 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 808a 	beq.w	8009df6 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8009ce2:	4b8c      	ldr	r3, [pc, #560]	; (8009f14 <HAL_RCC_OscConfig+0x2c0>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009ce8:	f7fe ff0a 	bl	8008b00 <HAL_GetTick>
 8009cec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cee:	4b88      	ldr	r3, [pc, #544]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f013 0f02 	tst.w	r3, #2
 8009cf6:	d175      	bne.n	8009de4 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009cf8:	f7fe ff02 	bl	8008b00 <HAL_GetTick>
 8009cfc:	1b40      	subs	r0, r0, r5
 8009cfe:	2802      	cmp	r0, #2
 8009d00:	d9f5      	bls.n	8009cee <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 8009d02:	2003      	movs	r0, #3
 8009d04:	e18b      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d06:	4a82      	ldr	r2, [pc, #520]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009d08:	6813      	ldr	r3, [r2, #0]
 8009d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d0e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d10:	6863      	ldr	r3, [r4, #4]
 8009d12:	b343      	cbz	r3, 8009d66 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8009d14:	f7fe fef4 	bl	8008b00 <HAL_GetTick>
 8009d18:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d1a:	4b7d      	ldr	r3, [pc, #500]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009d22:	d1cb      	bne.n	8009cbc <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d24:	f7fe feec 	bl	8008b00 <HAL_GetTick>
 8009d28:	1b40      	subs	r0, r0, r5
 8009d2a:	2864      	cmp	r0, #100	; 0x64
 8009d2c:	d9f5      	bls.n	8009d1a <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8009d2e:	2003      	movs	r0, #3
 8009d30:	e175      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d36:	d009      	beq.n	8009d4c <HAL_RCC_OscConfig+0xf8>
 8009d38:	4b75      	ldr	r3, [pc, #468]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009d40:	601a      	str	r2, [r3, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	e7e1      	b.n	8009d10 <HAL_RCC_OscConfig+0xbc>
 8009d4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009d50:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009d5a:	601a      	str	r2, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	e7d4      	b.n	8009d10 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 8009d66:	f7fe fecb 	bl	8008b00 <HAL_GetTick>
 8009d6a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d6c:	4b68      	ldr	r3, [pc, #416]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009d74:	d0a2      	beq.n	8009cbc <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009d76:	f7fe fec3 	bl	8008b00 <HAL_GetTick>
 8009d7a:	1b40      	subs	r0, r0, r5
 8009d7c:	2864      	cmp	r0, #100	; 0x64
 8009d7e:	d9f5      	bls.n	8009d6c <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8009d80:	2003      	movs	r0, #3
 8009d82:	e14c      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009d84:	4b62      	ldr	r3, [pc, #392]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009d8c:	d1a5      	bne.n	8009cda <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d8e:	4b60      	ldr	r3, [pc, #384]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f013 0f02 	tst.w	r3, #2
 8009d96:	d004      	beq.n	8009da2 <HAL_RCC_OscConfig+0x14e>
 8009d98:	6923      	ldr	r3, [r4, #16]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d001      	beq.n	8009da2 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8009d9e:	2001      	movs	r0, #1
 8009da0:	e13d      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009da2:	4a5b      	ldr	r2, [pc, #364]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009da4:	6813      	ldr	r3, [r2, #0]
 8009da6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009daa:	6961      	ldr	r1, [r4, #20]
 8009dac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009db0:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	f013 0f08 	tst.w	r3, #8
 8009db8:	d032      	beq.n	8009e20 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009dba:	69a3      	ldr	r3, [r4, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d05b      	beq.n	8009e78 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 8009dc0:	4b55      	ldr	r3, [pc, #340]	; (8009f18 <HAL_RCC_OscConfig+0x2c4>)
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009dc6:	f7fe fe9b 	bl	8008b00 <HAL_GetTick>
 8009dca:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009dcc:	4b50      	ldr	r3, [pc, #320]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	f013 0f02 	tst.w	r3, #2
 8009dd4:	d121      	bne.n	8009e1a <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009dd6:	f7fe fe93 	bl	8008b00 <HAL_GetTick>
 8009dda:	1b40      	subs	r0, r0, r5
 8009ddc:	2802      	cmp	r0, #2
 8009dde:	d9f5      	bls.n	8009dcc <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8009de0:	2003      	movs	r0, #3
 8009de2:	e11c      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009de4:	4a4a      	ldr	r2, [pc, #296]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009de6:	6813      	ldr	r3, [r2, #0]
 8009de8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009dec:	6961      	ldr	r1, [r4, #20]
 8009dee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	e7dd      	b.n	8009db2 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8009df6:	4b47      	ldr	r3, [pc, #284]	; (8009f14 <HAL_RCC_OscConfig+0x2c0>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009dfc:	f7fe fe80 	bl	8008b00 <HAL_GetTick>
 8009e00:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e02:	4b43      	ldr	r3, [pc, #268]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f013 0f02 	tst.w	r3, #2
 8009e0a:	d0d2      	beq.n	8009db2 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e0c:	f7fe fe78 	bl	8008b00 <HAL_GetTick>
 8009e10:	1b40      	subs	r0, r0, r5
 8009e12:	2802      	cmp	r0, #2
 8009e14:	d9f5      	bls.n	8009e02 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8009e16:	2003      	movs	r0, #3
 8009e18:	e101      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
      RCC_Delay(1);
 8009e1a:	2001      	movs	r0, #1
 8009e1c:	f7ff ff04 	bl	8009c28 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	f013 0f04 	tst.w	r3, #4
 8009e26:	f000 8097 	beq.w	8009f58 <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e2a:	4b39      	ldr	r3, [pc, #228]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8009e32:	d133      	bne.n	8009e9c <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e34:	4b36      	ldr	r3, [pc, #216]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009e36:	69da      	ldr	r2, [r3, #28]
 8009e38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009e3c:	61da      	str	r2, [r3, #28]
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8009e48:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e4a:	4b34      	ldr	r3, [pc, #208]	; (8009f1c <HAL_RCC_OscConfig+0x2c8>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009e52:	d025      	beq.n	8009ea0 <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e54:	68e3      	ldr	r3, [r4, #12]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d036      	beq.n	8009ec8 <HAL_RCC_OscConfig+0x274>
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d14c      	bne.n	8009ef8 <HAL_RCC_OscConfig+0x2a4>
 8009e5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e62:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8009e66:	6a1a      	ldr	r2, [r3, #32]
 8009e68:	f022 0201 	bic.w	r2, r2, #1
 8009e6c:	621a      	str	r2, [r3, #32]
 8009e6e:	6a1a      	ldr	r2, [r3, #32]
 8009e70:	f022 0204 	bic.w	r2, r2, #4
 8009e74:	621a      	str	r2, [r3, #32]
 8009e76:	e02c      	b.n	8009ed2 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_DISABLE();
 8009e78:	4b27      	ldr	r3, [pc, #156]	; (8009f18 <HAL_RCC_OscConfig+0x2c4>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009e7e:	f7fe fe3f 	bl	8008b00 <HAL_GetTick>
 8009e82:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e84:	4b22      	ldr	r3, [pc, #136]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e88:	f013 0f02 	tst.w	r3, #2
 8009e8c:	d0c8      	beq.n	8009e20 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e8e:	f7fe fe37 	bl	8008b00 <HAL_GetTick>
 8009e92:	1b40      	subs	r0, r0, r5
 8009e94:	2802      	cmp	r0, #2
 8009e96:	d9f5      	bls.n	8009e84 <HAL_RCC_OscConfig+0x230>
          return HAL_TIMEOUT;
 8009e98:	2003      	movs	r0, #3
 8009e9a:	e0c0      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 8009e9c:	2500      	movs	r5, #0
 8009e9e:	e7d4      	b.n	8009e4a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ea0:	4a1e      	ldr	r2, [pc, #120]	; (8009f1c <HAL_RCC_OscConfig+0x2c8>)
 8009ea2:	6813      	ldr	r3, [r2, #0]
 8009ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ea8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8009eaa:	f7fe fe29 	bl	8008b00 <HAL_GetTick>
 8009eae:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009eb0:	4b1a      	ldr	r3, [pc, #104]	; (8009f1c <HAL_RCC_OscConfig+0x2c8>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009eb8:	d1cc      	bne.n	8009e54 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009eba:	f7fe fe21 	bl	8008b00 <HAL_GetTick>
 8009ebe:	1b80      	subs	r0, r0, r6
 8009ec0:	2864      	cmp	r0, #100	; 0x64
 8009ec2:	d9f5      	bls.n	8009eb0 <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 8009ec4:	2003      	movs	r0, #3
 8009ec6:	e0aa      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ec8:	4a11      	ldr	r2, [pc, #68]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009eca:	6a13      	ldr	r3, [r2, #32]
 8009ecc:	f043 0301 	orr.w	r3, r3, #1
 8009ed0:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009ed2:	68e3      	ldr	r3, [r4, #12]
 8009ed4:	b373      	cbz	r3, 8009f34 <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 8009ed6:	f7fe fe13 	bl	8008b00 <HAL_GetTick>
 8009eda:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009edc:	4b0c      	ldr	r3, [pc, #48]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009ede:	6a1b      	ldr	r3, [r3, #32]
 8009ee0:	f013 0f02 	tst.w	r3, #2
 8009ee4:	d137      	bne.n	8009f56 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ee6:	f7fe fe0b 	bl	8008b00 <HAL_GetTick>
 8009eea:	1b80      	subs	r0, r0, r6
 8009eec:	f241 3388 	movw	r3, #5000	; 0x1388
 8009ef0:	4298      	cmp	r0, r3
 8009ef2:	d9f3      	bls.n	8009edc <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 8009ef4:	2003      	movs	r0, #3
 8009ef6:	e092      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ef8:	2b05      	cmp	r3, #5
 8009efa:	d011      	beq.n	8009f20 <HAL_RCC_OscConfig+0x2cc>
 8009efc:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <HAL_RCC_OscConfig+0x2bc>)
 8009efe:	6a1a      	ldr	r2, [r3, #32]
 8009f00:	f022 0201 	bic.w	r2, r2, #1
 8009f04:	621a      	str	r2, [r3, #32]
 8009f06:	6a1a      	ldr	r2, [r3, #32]
 8009f08:	f022 0204 	bic.w	r2, r2, #4
 8009f0c:	621a      	str	r2, [r3, #32]
 8009f0e:	e7e0      	b.n	8009ed2 <HAL_RCC_OscConfig+0x27e>
 8009f10:	40021000 	.word	0x40021000
 8009f14:	42420000 	.word	0x42420000
 8009f18:	42420480 	.word	0x42420480
 8009f1c:	40007000 	.word	0x40007000
 8009f20:	4b41      	ldr	r3, [pc, #260]	; (800a028 <HAL_RCC_OscConfig+0x3d4>)
 8009f22:	6a1a      	ldr	r2, [r3, #32]
 8009f24:	f042 0204 	orr.w	r2, r2, #4
 8009f28:	621a      	str	r2, [r3, #32]
 8009f2a:	6a1a      	ldr	r2, [r3, #32]
 8009f2c:	f042 0201 	orr.w	r2, r2, #1
 8009f30:	621a      	str	r2, [r3, #32]
 8009f32:	e7ce      	b.n	8009ed2 <HAL_RCC_OscConfig+0x27e>
      tickstart = HAL_GetTick();
 8009f34:	f7fe fde4 	bl	8008b00 <HAL_GetTick>
 8009f38:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f3a:	4b3b      	ldr	r3, [pc, #236]	; (800a028 <HAL_RCC_OscConfig+0x3d4>)
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	f013 0f02 	tst.w	r3, #2
 8009f42:	d008      	beq.n	8009f56 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f44:	f7fe fddc 	bl	8008b00 <HAL_GetTick>
 8009f48:	1b80      	subs	r0, r0, r6
 8009f4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8009f4e:	4298      	cmp	r0, r3
 8009f50:	d9f3      	bls.n	8009f3a <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 8009f52:	2003      	movs	r0, #3
 8009f54:	e063      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 8009f56:	b9e5      	cbnz	r5, 8009f92 <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f58:	69e3      	ldr	r3, [r4, #28]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d05e      	beq.n	800a01c <HAL_RCC_OscConfig+0x3c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f5e:	4a32      	ldr	r2, [pc, #200]	; (800a028 <HAL_RCC_OscConfig+0x3d4>)
 8009f60:	6852      	ldr	r2, [r2, #4]
 8009f62:	f002 020c 	and.w	r2, r2, #12
 8009f66:	2a08      	cmp	r2, #8
 8009f68:	d05b      	beq.n	800a022 <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d017      	beq.n	8009f9e <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 8009f6e:	4b2f      	ldr	r3, [pc, #188]	; (800a02c <HAL_RCC_OscConfig+0x3d8>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009f74:	f7fe fdc4 	bl	8008b00 <HAL_GetTick>
 8009f78:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009f7a:	4b2b      	ldr	r3, [pc, #172]	; (800a028 <HAL_RCC_OscConfig+0x3d4>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009f82:	d047      	beq.n	800a014 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f84:	f7fe fdbc 	bl	8008b00 <HAL_GetTick>
 8009f88:	1b00      	subs	r0, r0, r4
 8009f8a:	2802      	cmp	r0, #2
 8009f8c:	d9f5      	bls.n	8009f7a <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 8009f8e:	2003      	movs	r0, #3
 8009f90:	e045      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f92:	4a25      	ldr	r2, [pc, #148]	; (800a028 <HAL_RCC_OscConfig+0x3d4>)
 8009f94:	69d3      	ldr	r3, [r2, #28]
 8009f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f9a:	61d3      	str	r3, [r2, #28]
 8009f9c:	e7dc      	b.n	8009f58 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 8009f9e:	4b23      	ldr	r3, [pc, #140]	; (800a02c <HAL_RCC_OscConfig+0x3d8>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009fa4:	f7fe fdac 	bl	8008b00 <HAL_GetTick>
 8009fa8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009faa:	4b1f      	ldr	r3, [pc, #124]	; (800a028 <HAL_RCC_OscConfig+0x3d4>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009fb2:	d006      	beq.n	8009fc2 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fb4:	f7fe fda4 	bl	8008b00 <HAL_GetTick>
 8009fb8:	1b40      	subs	r0, r0, r5
 8009fba:	2802      	cmp	r0, #2
 8009fbc:	d9f5      	bls.n	8009faa <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8009fbe:	2003      	movs	r0, #3
 8009fc0:	e02d      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009fc2:	6a23      	ldr	r3, [r4, #32]
 8009fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc8:	d01a      	beq.n	800a000 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fca:	4917      	ldr	r1, [pc, #92]	; (800a028 <HAL_RCC_OscConfig+0x3d4>)
 8009fcc:	684b      	ldr	r3, [r1, #4]
 8009fce:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8009fd2:	6a22      	ldr	r2, [r4, #32]
 8009fd4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009fd6:	4302      	orrs	r2, r0
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8009fdc:	4b13      	ldr	r3, [pc, #76]	; (800a02c <HAL_RCC_OscConfig+0x3d8>)
 8009fde:	2201      	movs	r2, #1
 8009fe0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009fe2:	f7fe fd8d 	bl	8008b00 <HAL_GetTick>
 8009fe6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009fe8:	4b0f      	ldr	r3, [pc, #60]	; (800a028 <HAL_RCC_OscConfig+0x3d4>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009ff0:	d10e      	bne.n	800a010 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ff2:	f7fe fd85 	bl	8008b00 <HAL_GetTick>
 8009ff6:	1b00      	subs	r0, r0, r4
 8009ff8:	2802      	cmp	r0, #2
 8009ffa:	d9f5      	bls.n	8009fe8 <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 8009ffc:	2003      	movs	r0, #3
 8009ffe:	e00e      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a000:	4a09      	ldr	r2, [pc, #36]	; (800a028 <HAL_RCC_OscConfig+0x3d4>)
 800a002:	6853      	ldr	r3, [r2, #4]
 800a004:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a008:	68a1      	ldr	r1, [r4, #8]
 800a00a:	430b      	orrs	r3, r1
 800a00c:	6053      	str	r3, [r2, #4]
 800a00e:	e7dc      	b.n	8009fca <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 800a010:	2000      	movs	r0, #0
 800a012:	e004      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
 800a014:	2000      	movs	r0, #0
 800a016:	e002      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 800a018:	2001      	movs	r0, #1
 800a01a:	e000      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 800a01c:	2000      	movs	r0, #0
}
 800a01e:	b002      	add	sp, #8
 800a020:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800a022:	2001      	movs	r0, #1
 800a024:	e7fb      	b.n	800a01e <HAL_RCC_OscConfig+0x3ca>
 800a026:	bf00      	nop
 800a028:	40021000 	.word	0x40021000
 800a02c:	42420060 	.word	0x42420060

0800a030 <HAL_RCC_GetSysClockFreq>:
{
 800a030:	b410      	push	{r4}
 800a032:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800a034:	4c16      	ldr	r4, [pc, #88]	; (800a090 <HAL_RCC_GetSysClockFreq+0x60>)
 800a036:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a03a:	f10d 0c18 	add.w	ip, sp, #24
 800a03e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800a042:	8a23      	ldrh	r3, [r4, #16]
 800a044:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800a048:	4b12      	ldr	r3, [pc, #72]	; (800a094 <HAL_RCC_GetSysClockFreq+0x64>)
 800a04a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800a04c:	f003 020c 	and.w	r2, r3, #12
 800a050:	2a08      	cmp	r2, #8
 800a052:	d11a      	bne.n	800a08a <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a054:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800a058:	4462      	add	r2, ip
 800a05a:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a05e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a062:	d105      	bne.n	800a070 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a064:	4b0c      	ldr	r3, [pc, #48]	; (800a098 <HAL_RCC_GetSysClockFreq+0x68>)
 800a066:	fb03 f000 	mul.w	r0, r3, r0
}
 800a06a:	b007      	add	sp, #28
 800a06c:	bc10      	pop	{r4}
 800a06e:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a070:	4b08      	ldr	r3, [pc, #32]	; (800a094 <HAL_RCC_GetSysClockFreq+0x64>)
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800a078:	4463      	add	r3, ip
 800a07a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800a07e:	4b07      	ldr	r3, [pc, #28]	; (800a09c <HAL_RCC_GetSysClockFreq+0x6c>)
 800a080:	fbb3 f3f2 	udiv	r3, r3, r2
 800a084:	fb00 f003 	mul.w	r0, r0, r3
 800a088:	e7ef      	b.n	800a06a <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 800a08a:	4804      	ldr	r0, [pc, #16]	; (800a09c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800a08c:	e7ed      	b.n	800a06a <HAL_RCC_GetSysClockFreq+0x3a>
 800a08e:	bf00      	nop
 800a090:	0800f6f8 	.word	0x0800f6f8
 800a094:	40021000 	.word	0x40021000
 800a098:	003d0900 	.word	0x003d0900
 800a09c:	007a1200 	.word	0x007a1200

0800a0a0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800a0a0:	4b59      	ldr	r3, [pc, #356]	; (800a208 <HAL_RCC_ClockConfig+0x168>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f003 0307 	and.w	r3, r3, #7
 800a0a8:	428b      	cmp	r3, r1
 800a0aa:	d20c      	bcs.n	800a0c6 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0ac:	4a56      	ldr	r2, [pc, #344]	; (800a208 <HAL_RCC_ClockConfig+0x168>)
 800a0ae:	6813      	ldr	r3, [r2, #0]
 800a0b0:	f023 0307 	bic.w	r3, r3, #7
 800a0b4:	430b      	orrs	r3, r1
 800a0b6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a0b8:	6813      	ldr	r3, [r2, #0]
 800a0ba:	f003 0307 	and.w	r3, r3, #7
 800a0be:	428b      	cmp	r3, r1
 800a0c0:	d001      	beq.n	800a0c6 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 800a0c2:	2001      	movs	r0, #1
}
 800a0c4:	4770      	bx	lr
{
 800a0c6:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0c8:	6803      	ldr	r3, [r0, #0]
 800a0ca:	f013 0f02 	tst.w	r3, #2
 800a0ce:	d006      	beq.n	800a0de <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0d0:	4a4e      	ldr	r2, [pc, #312]	; (800a20c <HAL_RCC_ClockConfig+0x16c>)
 800a0d2:	6853      	ldr	r3, [r2, #4]
 800a0d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0d8:	6884      	ldr	r4, [r0, #8]
 800a0da:	4323      	orrs	r3, r4
 800a0dc:	6053      	str	r3, [r2, #4]
 800a0de:	460c      	mov	r4, r1
 800a0e0:	4605      	mov	r5, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0e2:	6803      	ldr	r3, [r0, #0]
 800a0e4:	f013 0f01 	tst.w	r3, #1
 800a0e8:	d052      	beq.n	800a190 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0ea:	6843      	ldr	r3, [r0, #4]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d023      	beq.n	800a138 <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d028      	beq.n	800a146 <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0f4:	4a45      	ldr	r2, [pc, #276]	; (800a20c <HAL_RCC_ClockConfig+0x16c>)
 800a0f6:	6812      	ldr	r2, [r2, #0]
 800a0f8:	f012 0f02 	tst.w	r2, #2
 800a0fc:	f000 8082 	beq.w	800a204 <HAL_RCC_ClockConfig+0x164>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a100:	4942      	ldr	r1, [pc, #264]	; (800a20c <HAL_RCC_ClockConfig+0x16c>)
 800a102:	684a      	ldr	r2, [r1, #4]
 800a104:	f022 0203 	bic.w	r2, r2, #3
 800a108:	4313      	orrs	r3, r2
 800a10a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800a10c:	f7fe fcf8 	bl	8008b00 <HAL_GetTick>
 800a110:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a112:	686b      	ldr	r3, [r5, #4]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d01d      	beq.n	800a154 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d02a      	beq.n	800a172 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800a11c:	4b3b      	ldr	r3, [pc, #236]	; (800a20c <HAL_RCC_ClockConfig+0x16c>)
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f013 0f0c 	tst.w	r3, #12
 800a124:	d034      	beq.n	800a190 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a126:	f7fe fceb 	bl	8008b00 <HAL_GetTick>
 800a12a:	1b80      	subs	r0, r0, r6
 800a12c:	f241 3388 	movw	r3, #5000	; 0x1388
 800a130:	4298      	cmp	r0, r3
 800a132:	d9f3      	bls.n	800a11c <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 800a134:	2003      	movs	r0, #3
 800a136:	e064      	b.n	800a202 <HAL_RCC_ClockConfig+0x162>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a138:	4a34      	ldr	r2, [pc, #208]	; (800a20c <HAL_RCC_ClockConfig+0x16c>)
 800a13a:	6812      	ldr	r2, [r2, #0]
 800a13c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800a140:	d1de      	bne.n	800a100 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 800a142:	2001      	movs	r0, #1
 800a144:	e05d      	b.n	800a202 <HAL_RCC_ClockConfig+0x162>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a146:	4a31      	ldr	r2, [pc, #196]	; (800a20c <HAL_RCC_ClockConfig+0x16c>)
 800a148:	6812      	ldr	r2, [r2, #0]
 800a14a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800a14e:	d1d7      	bne.n	800a100 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 800a150:	2001      	movs	r0, #1
 800a152:	e056      	b.n	800a202 <HAL_RCC_ClockConfig+0x162>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800a154:	4b2d      	ldr	r3, [pc, #180]	; (800a20c <HAL_RCC_ClockConfig+0x16c>)
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f003 030c 	and.w	r3, r3, #12
 800a15c:	2b04      	cmp	r3, #4
 800a15e:	d017      	beq.n	800a190 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a160:	f7fe fcce 	bl	8008b00 <HAL_GetTick>
 800a164:	1b80      	subs	r0, r0, r6
 800a166:	f241 3388 	movw	r3, #5000	; 0x1388
 800a16a:	4298      	cmp	r0, r3
 800a16c:	d9f2      	bls.n	800a154 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 800a16e:	2003      	movs	r0, #3
 800a170:	e047      	b.n	800a202 <HAL_RCC_ClockConfig+0x162>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a172:	4b26      	ldr	r3, [pc, #152]	; (800a20c <HAL_RCC_ClockConfig+0x16c>)
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f003 030c 	and.w	r3, r3, #12
 800a17a:	2b08      	cmp	r3, #8
 800a17c:	d008      	beq.n	800a190 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a17e:	f7fe fcbf 	bl	8008b00 <HAL_GetTick>
 800a182:	1b80      	subs	r0, r0, r6
 800a184:	f241 3388 	movw	r3, #5000	; 0x1388
 800a188:	4298      	cmp	r0, r3
 800a18a:	d9f2      	bls.n	800a172 <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 800a18c:	2003      	movs	r0, #3
 800a18e:	e038      	b.n	800a202 <HAL_RCC_ClockConfig+0x162>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800a190:	4b1d      	ldr	r3, [pc, #116]	; (800a208 <HAL_RCC_ClockConfig+0x168>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0307 	and.w	r3, r3, #7
 800a198:	42a3      	cmp	r3, r4
 800a19a:	d90c      	bls.n	800a1b6 <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a19c:	4a1a      	ldr	r2, [pc, #104]	; (800a208 <HAL_RCC_ClockConfig+0x168>)
 800a19e:	6813      	ldr	r3, [r2, #0]
 800a1a0:	f023 0307 	bic.w	r3, r3, #7
 800a1a4:	4323      	orrs	r3, r4
 800a1a6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a1a8:	6813      	ldr	r3, [r2, #0]
 800a1aa:	f003 0307 	and.w	r3, r3, #7
 800a1ae:	42a3      	cmp	r3, r4
 800a1b0:	d001      	beq.n	800a1b6 <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 800a1b2:	2001      	movs	r0, #1
 800a1b4:	e025      	b.n	800a202 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1b6:	682b      	ldr	r3, [r5, #0]
 800a1b8:	f013 0f04 	tst.w	r3, #4
 800a1bc:	d006      	beq.n	800a1cc <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a1be:	4a13      	ldr	r2, [pc, #76]	; (800a20c <HAL_RCC_ClockConfig+0x16c>)
 800a1c0:	6853      	ldr	r3, [r2, #4]
 800a1c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a1c6:	68e9      	ldr	r1, [r5, #12]
 800a1c8:	430b      	orrs	r3, r1
 800a1ca:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1cc:	682b      	ldr	r3, [r5, #0]
 800a1ce:	f013 0f08 	tst.w	r3, #8
 800a1d2:	d007      	beq.n	800a1e4 <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a1d4:	4a0d      	ldr	r2, [pc, #52]	; (800a20c <HAL_RCC_ClockConfig+0x16c>)
 800a1d6:	6853      	ldr	r3, [r2, #4]
 800a1d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a1dc:	6929      	ldr	r1, [r5, #16]
 800a1de:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a1e2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a1e4:	f7ff ff24 	bl	800a030 <HAL_RCC_GetSysClockFreq>
 800a1e8:	4b08      	ldr	r3, [pc, #32]	; (800a20c <HAL_RCC_ClockConfig+0x16c>)
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a1f0:	4a07      	ldr	r2, [pc, #28]	; (800a210 <HAL_RCC_ClockConfig+0x170>)
 800a1f2:	5cd3      	ldrb	r3, [r2, r3]
 800a1f4:	40d8      	lsrs	r0, r3
 800a1f6:	4b07      	ldr	r3, [pc, #28]	; (800a214 <HAL_RCC_ClockConfig+0x174>)
 800a1f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800a1fa:	200f      	movs	r0, #15
 800a1fc:	f7fe fc84 	bl	8008b08 <HAL_InitTick>
  return HAL_OK;
 800a200:	2000      	movs	r0, #0
}
 800a202:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800a204:	2001      	movs	r0, #1
 800a206:	e7fc      	b.n	800a202 <HAL_RCC_ClockConfig+0x162>
 800a208:	40022000 	.word	0x40022000
 800a20c:	40021000 	.word	0x40021000
 800a210:	0800d604 	.word	0x0800d604
 800a214:	20000110 	.word	0x20000110

0800a218 <HAL_RCC_GetHCLKFreq>:
}
 800a218:	4b01      	ldr	r3, [pc, #4]	; (800a220 <HAL_RCC_GetHCLKFreq+0x8>)
 800a21a:	6818      	ldr	r0, [r3, #0]
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	20000110 	.word	0x20000110

0800a224 <HAL_RCC_GetPCLK1Freq>:
{
 800a224:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a226:	f7ff fff7 	bl	800a218 <HAL_RCC_GetHCLKFreq>
 800a22a:	4b04      	ldr	r3, [pc, #16]	; (800a23c <HAL_RCC_GetPCLK1Freq+0x18>)
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a232:	4a03      	ldr	r2, [pc, #12]	; (800a240 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a234:	5cd3      	ldrb	r3, [r2, r3]
}    
 800a236:	40d8      	lsrs	r0, r3
 800a238:	bd08      	pop	{r3, pc}
 800a23a:	bf00      	nop
 800a23c:	40021000 	.word	0x40021000
 800a240:	0800d614 	.word	0x0800d614

0800a244 <HAL_RCC_GetPCLK2Freq>:
{
 800a244:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a246:	f7ff ffe7 	bl	800a218 <HAL_RCC_GetHCLKFreq>
 800a24a:	4b04      	ldr	r3, [pc, #16]	; (800a25c <HAL_RCC_GetPCLK2Freq+0x18>)
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a252:	4a03      	ldr	r2, [pc, #12]	; (800a260 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a254:	5cd3      	ldrb	r3, [r2, r3]
} 
 800a256:	40d8      	lsrs	r0, r3
 800a258:	bd08      	pop	{r3, pc}
 800a25a:	bf00      	nop
 800a25c:	40021000 	.word	0x40021000
 800a260:	0800d614 	.word	0x0800d614

0800a264 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a264:	230f      	movs	r3, #15
 800a266:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a268:	4b0b      	ldr	r3, [pc, #44]	; (800a298 <HAL_RCC_GetClockConfig+0x34>)
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	f002 0203 	and.w	r2, r2, #3
 800a270:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800a272:	685a      	ldr	r2, [r3, #4]
 800a274:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800a278:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800a280:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	08db      	lsrs	r3, r3, #3
 800a286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a28a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800a28c:	4b03      	ldr	r3, [pc, #12]	; (800a29c <HAL_RCC_GetClockConfig+0x38>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 0307 	and.w	r3, r3, #7
 800a294:	600b      	str	r3, [r1, #0]
}
 800a296:	4770      	bx	lr
 800a298:	40021000 	.word	0x40021000
 800a29c:	40022000 	.word	0x40022000

0800a2a0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 800a2a0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2a2:	4a1b      	ldr	r2, [pc, #108]	; (800a310 <TIM_Base_SetConfig+0x70>)
 800a2a4:	4290      	cmp	r0, r2
 800a2a6:	d00a      	beq.n	800a2be <TIM_Base_SetConfig+0x1e>
 800a2a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a2ac:	d007      	beq.n	800a2be <TIM_Base_SetConfig+0x1e>
 800a2ae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a2b2:	4290      	cmp	r0, r2
 800a2b4:	d003      	beq.n	800a2be <TIM_Base_SetConfig+0x1e>
 800a2b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2ba:	4290      	cmp	r0, r2
 800a2bc:	d103      	bne.n	800a2c6 <TIM_Base_SetConfig+0x26>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a2c2:	684a      	ldr	r2, [r1, #4]
 800a2c4:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2c6:	4a12      	ldr	r2, [pc, #72]	; (800a310 <TIM_Base_SetConfig+0x70>)
 800a2c8:	4290      	cmp	r0, r2
 800a2ca:	d00a      	beq.n	800a2e2 <TIM_Base_SetConfig+0x42>
 800a2cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a2d0:	d007      	beq.n	800a2e2 <TIM_Base_SetConfig+0x42>
 800a2d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800a2d6:	4290      	cmp	r0, r2
 800a2d8:	d003      	beq.n	800a2e2 <TIM_Base_SetConfig+0x42>
 800a2da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a2de:	4290      	cmp	r0, r2
 800a2e0:	d103      	bne.n	800a2ea <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2e6:	68ca      	ldr	r2, [r1, #12]
 800a2e8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 800a2ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800a2ee:	694a      	ldr	r2, [r1, #20]
 800a2f0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800a2f2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2f4:	688b      	ldr	r3, [r1, #8]
 800a2f6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800a2f8:	680b      	ldr	r3, [r1, #0]
 800a2fa:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2fc:	4b04      	ldr	r3, [pc, #16]	; (800a310 <TIM_Base_SetConfig+0x70>)
 800a2fe:	4298      	cmp	r0, r3
 800a300:	d002      	beq.n	800a308 <TIM_Base_SetConfig+0x68>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800a302:	2301      	movs	r3, #1
 800a304:	6143      	str	r3, [r0, #20]
}
 800a306:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800a308:	690b      	ldr	r3, [r1, #16]
 800a30a:	6303      	str	r3, [r0, #48]	; 0x30
 800a30c:	e7f9      	b.n	800a302 <TIM_Base_SetConfig+0x62>
 800a30e:	bf00      	nop
 800a310:	40012c00 	.word	0x40012c00

0800a314 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a314:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800a316:	2301      	movs	r3, #1
 800a318:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a31c:	6a03      	ldr	r3, [r0, #32]
 800a31e:	ea23 0304 	bic.w	r3, r3, r4
 800a322:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800a324:	6a03      	ldr	r3, [r0, #32]
 800a326:	408a      	lsls	r2, r1
 800a328:	4313      	orrs	r3, r2
 800a32a:	6203      	str	r3, [r0, #32]
}
 800a32c:	bc10      	pop	{r4}
 800a32e:	4770      	bx	lr

0800a330 <stm32_mcu_flash_erase_sector>:
    FLASH_EraseInitTypeDef eraseinit;
    uint32_t PageError;

    (void)PageError;

    if ((sector_address & ~(_FLASH_SECTOR_SIZE - 1)) == sector_address) {
 800a330:	f421 737f 	bic.w	r3, r1, #1020	; 0x3fc
 800a334:	f023 0303 	bic.w	r3, r3, #3
 800a338:	428b      	cmp	r3, r1
 800a33a:	d10f      	bne.n	800a35c <stm32_mcu_flash_erase_sector+0x2c>
{
 800a33c:	b500      	push	{lr}
 800a33e:	b087      	sub	sp, #28
        eraseinit.TypeErase = FLASH_TYPEERASE_PAGES;
 800a340:	2300      	movs	r3, #0
 800a342:	9302      	str	r3, [sp, #8]
        eraseinit.Banks = FLASH_BANK_1;
 800a344:	2301      	movs	r3, #1
 800a346:	9303      	str	r3, [sp, #12]
        eraseinit.PageAddress = sector_address;
 800a348:	9104      	str	r1, [sp, #16]
        eraseinit.NbPages = _FLASH_SECTOR_SIZE / FLASH_PAGE_SIZE;
 800a34a:	9305      	str	r3, [sp, #20]
        if (HAL_FLASHEx_Erase(&eraseinit, &PageError) == HAL_OK) {
 800a34c:	a901      	add	r1, sp, #4
 800a34e:	a802      	add	r0, sp, #8
 800a350:	f7ff fa86 	bl	8009860 <HAL_FLASHEx_Erase>
 800a354:	b928      	cbnz	r0, 800a362 <stm32_mcu_flash_erase_sector+0x32>
            return 0;
        }
    }

    return -1;
}
 800a356:	b007      	add	sp, #28
 800a358:	f85d fb04 	ldr.w	pc, [sp], #4
    return -1;
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a360:	4770      	bx	lr
    return -1;
 800a362:	f04f 30ff 	mov.w	r0, #4294967295
 800a366:	e7f6      	b.n	800a356 <stm32_mcu_flash_erase_sector+0x26>

0800a368 <stm32_hal_timer_get_freq>:
 * of a timer.
 */

uint32_t
stm32_hal_timer_get_freq(void *regs)
{
 800a368:	b510      	push	{r4, lr}
 800a36a:	b086      	sub	sp, #24
 800a36c:	4604      	mov	r4, r0
    RCC_ClkInitTypeDef clocks;
    uint32_t fl;
    uint32_t freq;

    HAL_RCC_GetClockConfig(&clocks, &fl);
 800a36e:	4669      	mov	r1, sp
 800a370:	a801      	add	r0, sp, #4
 800a372:	f7ff ff77 	bl	800a264 <HAL_RCC_GetClockConfig>

    /*
     * Assuming RCC_DCKCFGR->TIMPRE is 0.
     * There's just APB2 timers here.
     */
    switch ((uintptr_t)regs) {
 800a376:	4b0f      	ldr	r3, [pc, #60]	; (800a3b4 <stm32_hal_timer_get_freq+0x4c>)
 800a378:	429c      	cmp	r4, r3
 800a37a:	d013      	beq.n	800a3a4 <stm32_hal_timer_get_freq+0x3c>
 800a37c:	d90c      	bls.n	800a398 <stm32_hal_timer_get_freq+0x30>
 800a37e:	4b0e      	ldr	r3, [pc, #56]	; (800a3b8 <stm32_hal_timer_get_freq+0x50>)
 800a380:	429c      	cmp	r4, r3
 800a382:	d00f      	beq.n	800a3a4 <stm32_hal_timer_get_freq+0x3c>
 800a384:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 800a388:	429c      	cmp	r4, r3
 800a38a:	d108      	bne.n	800a39e <stm32_hal_timer_get_freq+0x36>
    case (uintptr_t)TIM16:
#endif
#ifdef TIM17
    case (uintptr_t)TIM17:
#endif
        freq = HAL_RCC_GetPCLK2Freq();
 800a38c:	f7ff ff5a 	bl	800a244 <HAL_RCC_GetPCLK2Freq>
        if (clocks.APB2CLKDivider) {
 800a390:	9b05      	ldr	r3, [sp, #20]
 800a392:	b12b      	cbz	r3, 800a3a0 <stm32_hal_timer_get_freq+0x38>
            freq *= 2;
 800a394:	0040      	lsls	r0, r0, #1
 800a396:	e003      	b.n	800a3a0 <stm32_hal_timer_get_freq+0x38>
    switch ((uintptr_t)regs) {
 800a398:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800a39c:	d002      	beq.n	800a3a4 <stm32_hal_timer_get_freq+0x3c>
        if (clocks.APB1CLKDivider) {
            freq *= 2;
        }
        break;
    default:
        return 0;
 800a39e:	2000      	movs	r0, #0
    }
    return freq;
}
 800a3a0:	b006      	add	sp, #24
 800a3a2:	bd10      	pop	{r4, pc}
        freq = HAL_RCC_GetPCLK1Freq();
 800a3a4:	f7ff ff3e 	bl	800a224 <HAL_RCC_GetPCLK1Freq>
        if (clocks.APB1CLKDivider) {
 800a3a8:	9b04      	ldr	r3, [sp, #16]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0f8      	beq.n	800a3a0 <stm32_hal_timer_get_freq+0x38>
            freq *= 2;
 800a3ae:	0040      	lsls	r0, r0, #1
 800a3b0:	e7f6      	b.n	800a3a0 <stm32_hal_timer_get_freq+0x38>
 800a3b2:	bf00      	nop
 800a3b4:	40000400 	.word	0x40000400
 800a3b8:	40000800 	.word	0x40000800

0800a3bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a3bc:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a3be:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800a3c0:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800a3c2:	2401      	movs	r4, #1
 800a3c4:	40b4      	lsls	r4, r6
 800a3c6:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a3c8:	6804      	ldr	r4, [r0, #0]
 800a3ca:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a3cc:	6843      	ldr	r3, [r0, #4]
 800a3ce:	2b10      	cmp	r3, #16
 800a3d0:	d005      	beq.n	800a3de <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800a3d2:	6803      	ldr	r3, [r0, #0]
 800a3d4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800a3d6:	6803      	ldr	r3, [r0, #0]
 800a3d8:	60da      	str	r2, [r3, #12]
  }
}
 800a3da:	bc70      	pop	{r4, r5, r6}
 800a3dc:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800a3de:	6803      	ldr	r3, [r0, #0]
 800a3e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800a3e2:	6803      	ldr	r3, [r0, #0]
 800a3e4:	60d9      	str	r1, [r3, #12]
 800a3e6:	e7f8      	b.n	800a3da <DMA_SetConfig+0x1e>

0800a3e8 <HAL_DMA_Start_IT>:
{
 800a3e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 800a3ea:	f890 4020 	ldrb.w	r4, [r0, #32]
 800a3ee:	2c01      	cmp	r4, #1
 800a3f0:	d032      	beq.n	800a458 <HAL_DMA_Start_IT+0x70>
 800a3f2:	2401      	movs	r4, #1
 800a3f4:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800a3f8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 800a3fc:	2c01      	cmp	r4, #1
 800a3fe:	d004      	beq.n	800a40a <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 800a400:	2300      	movs	r3, #0
 800a402:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 800a406:	2002      	movs	r0, #2
}
 800a408:	bd38      	pop	{r3, r4, r5, pc}
 800a40a:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800a40c:	2002      	movs	r0, #2
 800a40e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a412:	2000      	movs	r0, #0
 800a414:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800a416:	6825      	ldr	r5, [r4, #0]
 800a418:	6828      	ldr	r0, [r5, #0]
 800a41a:	f020 0001 	bic.w	r0, r0, #1
 800a41e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a420:	4620      	mov	r0, r4
 800a422:	f7ff ffcb 	bl	800a3bc <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 800a426:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a428:	b15b      	cbz	r3, 800a442 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a42a:	6822      	ldr	r2, [r4, #0]
 800a42c:	6813      	ldr	r3, [r2, #0]
 800a42e:	f043 030e 	orr.w	r3, r3, #14
 800a432:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800a434:	6822      	ldr	r2, [r4, #0]
 800a436:	6813      	ldr	r3, [r2, #0]
 800a438:	f043 0301 	orr.w	r3, r3, #1
 800a43c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a43e:	2000      	movs	r0, #0
 800a440:	e7e2      	b.n	800a408 <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a442:	6822      	ldr	r2, [r4, #0]
 800a444:	6813      	ldr	r3, [r2, #0]
 800a446:	f023 0304 	bic.w	r3, r3, #4
 800a44a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a44c:	6822      	ldr	r2, [r4, #0]
 800a44e:	6813      	ldr	r3, [r2, #0]
 800a450:	f043 030a 	orr.w	r3, r3, #10
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	e7ed      	b.n	800a434 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 800a458:	2002      	movs	r0, #2
 800a45a:	e7d5      	b.n	800a408 <HAL_DMA_Start_IT+0x20>

0800a45c <sensor_dev_create>:
    assert(rc == 0);

    rc = config_bme680_sensor();
    assert(rc == 0);
#endif
}
 800a45c:	4770      	bx	lr
	...

0800a460 <stm32f1_adc_create>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 800a460:	b500      	push	{lr}
 800a462:	b083      	sub	sp, #12
    console_printf("ADC create " DEVICE_NAME "\n");
 800a464:	480b      	ldr	r0, [pc, #44]	; (800a494 <stm32f1_adc_create+0x34>)
 800a466:	f7f9 fd99 	bl	8003f9c <console_printf>

    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 800a46a:	4b0b      	ldr	r3, [pc, #44]	; (800a498 <stm32f1_adc_create+0x38>)
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	4b0b      	ldr	r3, [pc, #44]	; (800a49c <stm32f1_adc_create+0x3c>)
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	2300      	movs	r3, #0
 800a474:	2201      	movs	r2, #1
 800a476:	490a      	ldr	r1, [pc, #40]	; (800a4a0 <stm32f1_adc_create+0x40>)
 800a478:	480a      	ldr	r0, [pc, #40]	; (800a4a4 <stm32f1_adc_create+0x44>)
 800a47a:	f7fb ff47 	bl	800630c <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0,  //  For BSP: OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
 800a47e:	b910      	cbnz	r0, 800a486 <stm32f1_adc_create+0x26>
}
 800a480:	b003      	add	sp, #12
 800a482:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 800a486:	2300      	movs	r3, #0
 800a488:	461a      	mov	r2, r3
 800a48a:	4619      	mov	r1, r3
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7fb fcb1 	bl	8005df4 <__assert_func>
 800a492:	bf00      	nop
 800a494:	0800f70c 	.word	0x0800f70c
 800a498:	2000019c 	.word	0x2000019c
 800a49c:	0800a865 	.word	0x0800a865
 800a4a0:	0800f720 	.word	0x0800f720
 800a4a4:	20002664 	.word	0x20002664

0800a4a8 <stm32f1_resolve_adc_gpio>:

static int
stm32f1_resolve_adc_gpio(ADC_HandleTypeDef *adc, uint8_t cnum,
        GPIO_InitTypeDef *gpio)
{
    uintptr_t adc_addr = (uintptr_t)adc->Instance;
 800a4a8:	6803      	ldr	r3, [r0, #0]
    uint32_t pin;
    int rc;

    rc = OS_OK;
    switch (adc_addr) {
 800a4aa:	4816      	ldr	r0, [pc, #88]	; (800a504 <stm32f1_resolve_adc_gpio+0x5c>)
 800a4ac:	4283      	cmp	r3, r0
 800a4ae:	d003      	beq.n	800a4b8 <stm32f1_resolve_adc_gpio+0x10>
 800a4b0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800a4b4:	4283      	cmp	r3, r0
 800a4b6:	d120      	bne.n	800a4fa <stm32f1_resolve_adc_gpio+0x52>
        case (uintptr_t)ADC1:
#endif
#if defined(ADC2)
        case (uintptr_t)ADC2:
#endif
            switch(cnum) {
 800a4b8:	3904      	subs	r1, #4
 800a4ba:	290b      	cmp	r1, #11
 800a4bc:	d81f      	bhi.n	800a4fe <stm32f1_resolve_adc_gpio+0x56>
 800a4be:	e8df f001 	tbb	[pc, r1]
 800a4c2:	1406      	.short	0x1406
 800a4c4:	0e0c0a08 	.word	0x0e0c0a08
 800a4c8:	1e1e1e1e 	.word	0x1e1e1e1e
 800a4cc:	1210      	.short	0x1210
                case ADC_CHANNEL_4:
                    pin = ADC12_CH4_PIN;
 800a4ce:	2304      	movs	r3, #4
 800a4d0:	e00c      	b.n	800a4ec <stm32f1_resolve_adc_gpio+0x44>
                    goto done;
                case ADC_CHANNEL_5:
                    pin = ADC12_CH5_PIN;
                    goto done;
                case ADC_CHANNEL_6:
                    pin = ADC12_CH6_PIN;
 800a4d2:	2306      	movs	r3, #6
                    goto done;
 800a4d4:	e00a      	b.n	800a4ec <stm32f1_resolve_adc_gpio+0x44>
                case ADC_CHANNEL_7:
                    pin = ADC12_CH7_PIN;
 800a4d6:	2307      	movs	r3, #7
                    goto done;
 800a4d8:	e008      	b.n	800a4ec <stm32f1_resolve_adc_gpio+0x44>
                case ADC_CHANNEL_8:
                    pin = ADC12_CH8_PIN;
 800a4da:	2310      	movs	r3, #16
                    goto done;
 800a4dc:	e006      	b.n	800a4ec <stm32f1_resolve_adc_gpio+0x44>
                case ADC_CHANNEL_9:
                    pin = ADC12_CH9_PIN;
 800a4de:	2311      	movs	r3, #17
                    goto done;
 800a4e0:	e004      	b.n	800a4ec <stm32f1_resolve_adc_gpio+0x44>
                case ADC_CHANNEL_14:
                    pin = ADC12_CH14_PIN;
 800a4e2:	2324      	movs	r3, #36	; 0x24
                    goto done;
 800a4e4:	e002      	b.n	800a4ec <stm32f1_resolve_adc_gpio+0x44>
                case ADC_CHANNEL_15:
                    pin = ADC12_CH15_PIN;
 800a4e6:	2325      	movs	r3, #37	; 0x25
                    goto done;
 800a4e8:	e000      	b.n	800a4ec <stm32f1_resolve_adc_gpio+0x44>
                    pin = ADC12_CH5_PIN;
 800a4ea:	2305      	movs	r3, #5
        default:
            rc = OS_EINVAL;
            return rc;
    }
done:
    *gpio = (GPIO_InitTypeDef) {
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	6090      	str	r0, [r2, #8]
 800a4f0:	60d0      	str	r0, [r2, #12]
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	6053      	str	r3, [r2, #4]
        .Pin = pin,
        .Mode = GPIO_MODE_ANALOG,
        .Pull = GPIO_NOPULL,
        //// .Alternate = pin
    };
    return rc;
 800a4f8:	4770      	bx	lr
            return rc;
 800a4fa:	2002      	movs	r0, #2
 800a4fc:	4770      	bx	lr
 800a4fe:	2002      	movs	r0, #2
}
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	40012400 	.word	0x40012400

0800a508 <stm32f1_adc_size_buffer>:
 * @return Length of buffer in bytes
 */
static int
stm32f1_adc_size_buffer(struct adc_dev *dev, int chans, int samples)
{
    return (sizeof(uint32_t) * chans * samples);
 800a508:	fb02 f201 	mul.w	r2, r2, r1
}
 800a50c:	0090      	lsls	r0, r2, #2
 800a50e:	4770      	bx	lr

0800a510 <stm32f1_adc_read_buffer>:
{
 800a510:	b508      	push	{r3, lr}
    assert(off < buf_len);
 800a512:	4293      	cmp	r3, r2
 800a514:	da05      	bge.n	800a522 <stm32f1_adc_read_buffer+0x12>
    *result = *((uint32_t *)buf + off);
 800a516:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800a51a:	9b02      	ldr	r3, [sp, #8]
 800a51c:	601a      	str	r2, [r3, #0]
}
 800a51e:	2000      	movs	r0, #0
 800a520:	bd08      	pop	{r3, pc}
    assert(off < buf_len);
 800a522:	2300      	movs	r3, #0
 800a524:	461a      	mov	r2, r3
 800a526:	4619      	mov	r1, r3
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fb fc63 	bl	8005df4 <__assert_func>

0800a52e <stm32f1_adc_release_buffer>:
{
 800a52e:	b508      	push	{r3, lr}
    assert(0);  //  Not implemented.
 800a530:	2300      	movs	r3, #0
 800a532:	461a      	mov	r2, r3
 800a534:	4619      	mov	r1, r3
 800a536:	4618      	mov	r0, r3
 800a538:	f7fb fc5c 	bl	8005df4 <__assert_func>

0800a53c <stm32f1_adc_set_buffer>:
{
 800a53c:	b508      	push	{r3, lr}
    assert(0);  //  Not implemented.
 800a53e:	2300      	movs	r3, #0
 800a540:	461a      	mov	r2, r3
 800a542:	4619      	mov	r1, r3
 800a544:	4618      	mov	r0, r3
 800a546:	f7fb fc55 	bl	8005df4 <__assert_func>
	...

0800a54c <stm32f1_adc_clk_disable>:
{
 800a54c:	b508      	push	{r3, lr}
    uintptr_t adc_addr = (uintptr_t)hadc->Instance;
 800a54e:	6803      	ldr	r3, [r0, #0]
    switch (adc_addr) {
 800a550:	4a0c      	ldr	r2, [pc, #48]	; (800a584 <stm32f1_adc_clk_disable+0x38>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d009      	beq.n	800a56a <stm32f1_adc_clk_disable+0x1e>
 800a556:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d10b      	bne.n	800a576 <stm32f1_adc_clk_disable+0x2a>
            __HAL_RCC_ADC2_CLK_DISABLE();
 800a55e:	4a0a      	ldr	r2, [pc, #40]	; (800a588 <stm32f1_adc_clk_disable+0x3c>)
 800a560:	6993      	ldr	r3, [r2, #24]
 800a562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a566:	6193      	str	r3, [r2, #24]
            break;
 800a568:	e004      	b.n	800a574 <stm32f1_adc_clk_disable+0x28>
            __HAL_RCC_ADC1_CLK_DISABLE();
 800a56a:	4a07      	ldr	r2, [pc, #28]	; (800a588 <stm32f1_adc_clk_disable+0x3c>)
 800a56c:	6993      	ldr	r3, [r2, #24]
 800a56e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a572:	6193      	str	r3, [r2, #24]
}
 800a574:	bd08      	pop	{r3, pc}
            assert(0);
 800a576:	2300      	movs	r3, #0
 800a578:	461a      	mov	r2, r3
 800a57a:	4619      	mov	r1, r3
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fb fc39 	bl	8005df4 <__assert_func>
 800a582:	bf00      	nop
 800a584:	40012400 	.word	0x40012400
 800a588:	40021000 	.word	0x40021000

0800a58c <stm32f1_adc_read_channel>:
{
 800a58c:	b538      	push	{r3, r4, r5, lr}
    assert(dev != NULL && result != NULL);
 800a58e:	b1d0      	cbz	r0, 800a5c6 <stm32f1_adc_read_channel+0x3a>
 800a590:	4615      	mov	r5, r2
 800a592:	b1c2      	cbz	r2, 800a5c6 <stm32f1_adc_read_channel+0x3a>
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 800a594:	6943      	ldr	r3, [r0, #20]
    hadc = cfg->sac_adc_handle;
 800a596:	695c      	ldr	r4, [r3, #20]
    while (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK);  // Calibrate AD converter.
 800a598:	4620      	mov	r0, r4
 800a59a:	f002 fd17 	bl	800cfcc <HAL_ADCEx_Calibration_Start>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	d1fa      	bne.n	800a598 <stm32f1_adc_read_channel+0xc>
    HAL_ADC_Start(hadc);
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f002 fb38 	bl	800cc18 <HAL_ADC_Start>
    HAL_StatusTypeDef rc = HAL_ADC_PollForConversion(hadc, 10 * 1000);  //  Wait up to 10 seconds.  TODO: Yield to task scheduler while waiting.
 800a5a8:	f242 7110 	movw	r1, #10000	; 0x2710
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f002 f95f 	bl	800c870 <HAL_ADC_PollForConversion>
    assert(rc == HAL_OK);
 800a5b2:	b970      	cbnz	r0, 800a5d2 <stm32f1_adc_read_channel+0x46>
    val = HAL_ADC_GetValue(hadc);
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	f002 fa13 	bl	800c9e0 <HAL_ADC_GetValue>
    *result = val;
 800a5ba:	6028      	str	r0, [r5, #0]
    HAL_ADC_Stop(hadc);
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f002 fce7 	bl	800cf90 <HAL_ADC_Stop>
}
 800a5c2:	2000      	movs	r0, #0
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
    assert(dev != NULL && result != NULL);
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fb fc11 	bl	8005df4 <__assert_func>
    assert(rc == HAL_OK);
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fb fc0b 	bl	8005df4 <__assert_func>
	...

0800a5e0 <stm32f1_adc_sample>:
{
 800a5e0:	b508      	push	{r3, lr}
    assert(dev);
 800a5e2:	b140      	cbz	r0, 800a5f6 <stm32f1_adc_sample+0x16>
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 800a5e4:	6943      	ldr	r3, [r0, #20]
    if (HAL_ADC_Start_DMA(hadc, cfg->primarybuf, cfg->buflen) != HAL_OK) {
 800a5e6:	691a      	ldr	r2, [r3, #16]
 800a5e8:	6899      	ldr	r1, [r3, #8]
 800a5ea:	6958      	ldr	r0, [r3, #20]
 800a5ec:	f002 fb8a 	bl	800cd04 <HAL_ADC_Start_DMA>
 800a5f0:	b938      	cbnz	r0, 800a602 <stm32f1_adc_sample+0x22>
    rc = OS_OK;
 800a5f2:	2000      	movs	r0, #0
}
 800a5f4:	bd08      	pop	{r3, pc}
    assert(dev);
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fb fbf9 	bl	8005df4 <__assert_func>
        ++stm32f1_adc_stats.adc_dma_start_error;
 800a602:	4a03      	ldr	r2, [pc, #12]	; (800a610 <stm32f1_adc_sample+0x30>)
 800a604:	8953      	ldrh	r3, [r2, #10]
 800a606:	3301      	adds	r3, #1
 800a608:	8153      	strh	r3, [r2, #10]
    rc = OS_EINVAL;
 800a60a:	2002      	movs	r0, #2
        goto err;
 800a60c:	e7f2      	b.n	800a5f4 <stm32f1_adc_sample+0x14>
 800a60e:	bf00      	nop
 800a610:	200026ac 	.word	0x200026ac

0800a614 <stm32f1_adc_configure_channel>:
{
 800a614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a618:	b085      	sub	sp, #20
    if (dev == NULL && !IS_ADC_CHANNEL(cnum)) {
 800a61a:	4605      	mov	r5, r0
 800a61c:	b380      	cbz	r0, 800a680 <stm32f1_adc_configure_channel+0x6c>
 800a61e:	460c      	mov	r4, r1
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 800a620:	696b      	ldr	r3, [r5, #20]
    hadc = cfg->sac_adc_handle;
 800a622:	695f      	ldr	r7, [r3, #20]
    chan_cfg = &((struct adc_chan_config *)cfg->sac_chans)[cnum];
 800a624:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800a628:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800a62c:	005e      	lsls	r6, r3, #1
 800a62e:	eb08 0906 	add.w	r9, r8, r6
    if ((HAL_ADC_ConfigChannel(hadc, cfgdata)) != HAL_OK) {
 800a632:	4611      	mov	r1, r2
 800a634:	4638      	mov	r0, r7
 800a636:	f002 fa13 	bl	800ca60 <HAL_ADC_ConfigChannel>
 800a63a:	bb28      	cbnz	r0, 800a688 <stm32f1_adc_configure_channel+0x74>
    dev->ad_chans[cnum].c_res = chan_cfg->c_res;
 800a63c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a63e:	4433      	add	r3, r6
 800a640:	f899 2002 	ldrb.w	r2, [r9, #2]
 800a644:	709a      	strb	r2, [r3, #2]
    dev->ad_chans[cnum].c_refmv = chan_cfg->c_refmv;
 800a646:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a648:	f838 2006 	ldrh.w	r2, [r8, r6]
 800a64c:	539a      	strh	r2, [r3, r6]
    dev->ad_chans[cnum].c_configured = 1;
 800a64e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a650:	4433      	add	r3, r6
 800a652:	2201      	movs	r2, #1
 800a654:	70da      	strb	r2, [r3, #3]
    dev->ad_chans[cnum].c_cnum = cnum;
 800a656:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a658:	441e      	add	r6, r3
 800a65a:	7134      	strb	r4, [r6, #4]
    if (cnum == ADC_CHANNEL_TEMPSENSOR || cnum == ADC_CHANNEL_VREFINT) {
 800a65c:	f1a4 0310 	sub.w	r3, r4, #16
 800a660:	b2db      	uxtb	r3, r3
 800a662:	4293      	cmp	r3, r2
 800a664:	d912      	bls.n	800a68c <stm32f1_adc_configure_channel+0x78>
    if (stm32f1_resolve_adc_gpio(hadc, cnum, &gpio_td)) {
 800a666:	466a      	mov	r2, sp
 800a668:	4621      	mov	r1, r4
 800a66a:	4638      	mov	r0, r7
 800a66c:	f7ff ff1c 	bl	800a4a8 <stm32f1_resolve_adc_gpio>
 800a670:	4604      	mov	r4, r0
 800a672:	b980      	cbnz	r0, 800a696 <stm32f1_adc_configure_channel+0x82>
    hal_gpio_init_stm(gpio_td.Pin, &gpio_td);
 800a674:	a904      	add	r1, sp, #16
 800a676:	f851 0d10 	ldr.w	r0, [r1, #-16]!
 800a67a:	f7fe ff5d 	bl	8009538 <hal_gpio_init_stm>
    return (OS_OK);
 800a67e:	e006      	b.n	800a68e <stm32f1_adc_configure_channel+0x7a>
    if (dev == NULL && !IS_ADC_CHANNEL(cnum)) {
 800a680:	2911      	cmp	r1, #17
 800a682:	d9cc      	bls.n	800a61e <stm32f1_adc_configure_channel+0xa>
    return (rc);
 800a684:	2402      	movs	r4, #2
 800a686:	e002      	b.n	800a68e <stm32f1_adc_configure_channel+0x7a>
 800a688:	2402      	movs	r4, #2
 800a68a:	e000      	b.n	800a68e <stm32f1_adc_configure_channel+0x7a>
        return OS_OK;
 800a68c:	2400      	movs	r4, #0
}
 800a68e:	4620      	mov	r0, r4
 800a690:	b005      	add	sp, #20
 800a692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (rc);
 800a696:	2402      	movs	r4, #2
 800a698:	e7f9      	b.n	800a68e <stm32f1_adc_configure_channel+0x7a>

0800a69a <stm32f1_adc_uninit>:
{
 800a69a:	b530      	push	{r4, r5, lr}
 800a69c:	b085      	sub	sp, #20
    assert(dev);
 800a69e:	b198      	cbz	r0, 800a6c8 <stm32f1_adc_uninit+0x2e>
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 800a6a0:	6942      	ldr	r2, [r0, #20]
    hadc = cfg->sac_adc_handle;
 800a6a2:	6954      	ldr	r4, [r2, #20]
    cnum = dev->ad_chans->c_cnum;
 800a6a4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a6a6:	791d      	ldrb	r5, [r3, #4]
    stm32f1_adc_clk_disable(hadc);
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f7ff ff4f 	bl	800a54c <stm32f1_adc_clk_disable>
    if (cnum != ADC_CHANNEL_TEMPSENSOR && cnum != ADC_CHANNEL_VREFINT) {
 800a6ae:	f1a5 0310 	sub.w	r3, r5, #16
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d905      	bls.n	800a6c4 <stm32f1_adc_uninit+0x2a>
        if (stm32f1_resolve_adc_gpio(hadc, cnum, &gpio_td)) {
 800a6b8:	466a      	mov	r2, sp
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f7ff fef3 	bl	800a4a8 <stm32f1_resolve_adc_gpio>
 800a6c2:	b138      	cbz	r0, 800a6d4 <stm32f1_adc_uninit+0x3a>
}
 800a6c4:	b005      	add	sp, #20
 800a6c6:	bd30      	pop	{r4, r5, pc}
    assert(dev);
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fb fb90 	bl	8005df4 <__assert_func>
        if (hal_gpio_deinit_stm(gpio_td.Pin, &gpio_td)) {
 800a6d4:	a904      	add	r1, sp, #16
 800a6d6:	f851 0d10 	ldr.w	r0, [r1, #-16]!
 800a6da:	f7fe ff49 	bl	8009570 <hal_gpio_deinit_stm>
    return;
 800a6de:	e7f1      	b.n	800a6c4 <stm32f1_adc_uninit+0x2a>

0800a6e0 <stm32f1_adc_close>:
{
 800a6e0:	b510      	push	{r4, lr}
 800a6e2:	4604      	mov	r4, r0
    stm32f1_adc_uninit(dev);
 800a6e4:	f7ff ffd9 	bl	800a69a <stm32f1_adc_uninit>
    if (os_started()) {
 800a6e8:	f7fb fc42 	bl	8005f70 <os_started>
 800a6ec:	b908      	cbnz	r0, 800a6f2 <stm32f1_adc_close+0x12>
}
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	bd10      	pop	{r4, pc}
        os_mutex_release(&dev->ad_lock);
 800a6f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a6f6:	f7fc fa6d 	bl	8006bd4 <os_mutex_release>
 800a6fa:	e7f8      	b.n	800a6ee <stm32f1_adc_close+0xe>

0800a6fc <config_clk>:
    if (rtc_configured) { return; }
 800a6fc:	4b0d      	ldr	r3, [pc, #52]	; (800a734 <config_clk+0x38>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	b103      	cbz	r3, 800a704 <config_clk+0x8>
 800a702:	4770      	bx	lr
{
 800a704:	b500      	push	{lr}
 800a706:	b087      	sub	sp, #28
    RCC_ClkInitTypeDef clkinitstruct = { 0 };
 800a708:	9303      	str	r3, [sp, #12]
 800a70a:	9304      	str	r3, [sp, #16]
    clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK2);
 800a70c:	2309      	movs	r3, #9
 800a70e:	9301      	str	r3, [sp, #4]
    clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  //  Value 2
 800a710:	2102      	movs	r1, #2
 800a712:	9102      	str	r1, [sp, #8]
    clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV8;  //  Value 1536
 800a714:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a718:	9305      	str	r3, [sp, #20]
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) { assert(0); }  //  Latency=2
 800a71a:	a801      	add	r0, sp, #4
 800a71c:	f7ff fcc0 	bl	800a0a0 <HAL_RCC_ClockConfig>
 800a720:	b910      	cbnz	r0, 800a728 <config_clk+0x2c>
}
 800a722:	b007      	add	sp, #28
 800a724:	f85d fb04 	ldr.w	pc, [sp], #4
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) { assert(0); }  //  Latency=2
 800a728:	2300      	movs	r3, #0
 800a72a:	461a      	mov	r2, r3
 800a72c:	4619      	mov	r1, r3
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fb fb60 	bl	8005df4 <__assert_func>
 800a734:	20002578 	.word	0x20002578

0800a738 <stm32f1_adc_clk_enable>:
{
 800a738:	b510      	push	{r4, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	4604      	mov	r4, r0
    config_clk();  ////  Added to configure the ADC clock.
 800a73e:	f7ff ffdd 	bl	800a6fc <config_clk>
    uintptr_t adc_addr = (uintptr_t)hadc->Instance;
 800a742:	6823      	ldr	r3, [r4, #0]
    switch (adc_addr) {
 800a744:	4a11      	ldr	r2, [pc, #68]	; (800a78c <stm32f1_adc_clk_enable+0x54>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d00e      	beq.n	800a768 <stm32f1_adc_clk_enable+0x30>
 800a74a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a74e:	4293      	cmp	r3, r2
 800a750:	d116      	bne.n	800a780 <stm32f1_adc_clk_enable+0x48>
            __HAL_RCC_ADC2_CLK_ENABLE();
 800a752:	4b0f      	ldr	r3, [pc, #60]	; (800a790 <stm32f1_adc_clk_enable+0x58>)
 800a754:	699a      	ldr	r2, [r3, #24]
 800a756:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a75a:	619a      	str	r2, [r3, #24]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a762:	9301      	str	r3, [sp, #4]
 800a764:	9b01      	ldr	r3, [sp, #4]
            break;
 800a766:	e009      	b.n	800a77c <stm32f1_adc_clk_enable+0x44>
            __HAL_RCC_ADC1_CLK_ENABLE();
 800a768:	4b09      	ldr	r3, [pc, #36]	; (800a790 <stm32f1_adc_clk_enable+0x58>)
 800a76a:	699a      	ldr	r2, [r3, #24]
 800a76c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a770:	619a      	str	r2, [r3, #24]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	9b00      	ldr	r3, [sp, #0]
}
 800a77c:	b002      	add	sp, #8
 800a77e:	bd10      	pop	{r4, pc}
            assert(0);
 800a780:	2300      	movs	r3, #0
 800a782:	461a      	mov	r2, r3
 800a784:	4619      	mov	r1, r3
 800a786:	4618      	mov	r0, r3
 800a788:	f7fb fb34 	bl	8005df4 <__assert_func>
 800a78c:	40012400 	.word	0x40012400
 800a790:	40021000 	.word	0x40021000

0800a794 <stm32f1_adc_dma_init>:
{
 800a794:	b508      	push	{r3, lr}
    assert(hadc);
 800a796:	b110      	cbz	r0, 800a79e <stm32f1_adc_dma_init+0xa>
    stm32f1_adc_clk_enable(hadc);
 800a798:	f7ff ffce 	bl	800a738 <stm32f1_adc_clk_enable>
}
 800a79c:	bd08      	pop	{r3, pc}
    assert(hadc);
 800a79e:	2300      	movs	r3, #0
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fb fb25 	bl	8005df4 <__assert_func>

0800a7aa <stm32f1_adc_init>:
{
 800a7aa:	b510      	push	{r4, lr}
    assert(dev);
 800a7ac:	b148      	cbz	r0, 800a7c2 <stm32f1_adc_init+0x18>
    adc_config = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 800a7ae:	6943      	ldr	r3, [r0, #20]
    hadc = adc_config->sac_adc_handle;
 800a7b0:	695c      	ldr	r4, [r3, #20]
    stm32f1_adc_dma_init(hadc);
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f7ff ffee 	bl	800a794 <stm32f1_adc_dma_init>
    if (HAL_ADC_Init(hadc) != HAL_OK) {
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f002 fb61 	bl	800ce80 <HAL_ADC_Init>
 800a7be:	b930      	cbnz	r0, 800a7ce <stm32f1_adc_init+0x24>
}
 800a7c0:	bd10      	pop	{r4, pc}
    assert(dev);
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7fb fb13 	bl	8005df4 <__assert_func>
        assert(0);
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7fb fb0d 	bl	8005df4 <__assert_func>

0800a7da <stm32f1_adc_open>:
{
 800a7da:	b538      	push	{r3, r4, r5, lr}
    assert(odev);
 800a7dc:	b168      	cbz	r0, 800a7fa <stm32f1_adc_open+0x20>
 800a7de:	460d      	mov	r5, r1
 800a7e0:	4604      	mov	r4, r0
    if (os_started()) {
 800a7e2:	f7fb fbc5 	bl	8005f70 <os_started>
 800a7e6:	b970      	cbnz	r0, 800a806 <stm32f1_adc_open+0x2c>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
 800a7e8:	7ee3      	ldrb	r3, [r4, #27]
 800a7ea:	f013 0f02 	tst.w	r3, #2
 800a7ee:	d112      	bne.n	800a816 <stm32f1_adc_open+0x3c>
    stm32f1_adc_init(dev);
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f7ff ffda 	bl	800a7aa <stm32f1_adc_init>
    return (OS_OK);
 800a7f6:	2000      	movs	r0, #0
}
 800a7f8:	bd38      	pop	{r3, r4, r5, pc}
    assert(odev);
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	4619      	mov	r1, r3
 800a800:	4618      	mov	r0, r3
 800a802:	f7fb faf7 	bl	8005df4 <__assert_func>
        rc = os_mutex_pend(&dev->ad_lock, wait);
 800a806:	4629      	mov	r1, r5
 800a808:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a80c:	f7fc fa3e 	bl	8006c8c <os_mutex_pend>
        if (rc != OS_OK) {
 800a810:	2800      	cmp	r0, #0
 800a812:	d0e9      	beq.n	800a7e8 <stm32f1_adc_open+0xe>
err:
 800a814:	e7f0      	b.n	800a7f8 <stm32f1_adc_open+0x1e>
        os_mutex_release(&dev->ad_lock);
 800a816:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a81a:	f7fc f9db 	bl	8006bd4 <os_mutex_release>
        rc = OS_EBUSY;
 800a81e:	200b      	movs	r0, #11
        goto err;
 800a820:	e7ea      	b.n	800a7f8 <stm32f1_adc_open+0x1e>
	...

0800a824 <HAL_ADC_ErrorCallback>:
    ++stm32f1_adc_stats.adc_error;
 800a824:	4a0e      	ldr	r2, [pc, #56]	; (800a860 <HAL_ADC_ErrorCallback+0x3c>)
 800a826:	8853      	ldrh	r3, [r2, #2]
 800a828:	3301      	adds	r3, #1
 800a82a:	8053      	strh	r3, [r2, #2]
    if (hadc->ErrorCode & HAL_ADC_ERROR_DMA) {
 800a82c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a82e:	f013 0f04 	tst.w	r3, #4
 800a832:	d10c      	bne.n	800a84e <HAL_ADC_ErrorCallback+0x2a>
    } else if (hadc->ErrorCode & HAL_ADC_ERROR_OVR) {
 800a834:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a836:	f013 0f02 	tst.w	r3, #2
 800a83a:	d10c      	bne.n	800a856 <HAL_ADC_ErrorCallback+0x32>
    } else if (hadc->ErrorCode & HAL_ADC_ERROR_INTERNAL) {
 800a83c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a83e:	f013 0f01 	tst.w	r3, #1
 800a842:	d003      	beq.n	800a84c <HAL_ADC_ErrorCallback+0x28>
        ++stm32f1_adc_stats.adc_internal_error;
 800a844:	4a06      	ldr	r2, [pc, #24]	; (800a860 <HAL_ADC_ErrorCallback+0x3c>)
 800a846:	89d3      	ldrh	r3, [r2, #14]
 800a848:	3301      	adds	r3, #1
 800a84a:	81d3      	strh	r3, [r2, #14]
}
 800a84c:	4770      	bx	lr
        ++stm32f1_adc_stats.adc_dma_xfer_failed;
 800a84e:	8893      	ldrh	r3, [r2, #4]
 800a850:	3301      	adds	r3, #1
 800a852:	8093      	strh	r3, [r2, #4]
 800a854:	4770      	bx	lr
        ++stm32f1_adc_stats.adc_dma_overrun;
 800a856:	4a02      	ldr	r2, [pc, #8]	; (800a860 <HAL_ADC_ErrorCallback+0x3c>)
 800a858:	8993      	ldrh	r3, [r2, #12]
 800a85a:	3301      	adds	r3, #1
 800a85c:	8193      	strh	r3, [r2, #12]
 800a85e:	4770      	bx	lr
 800a860:	200026ac 	.word	0x200026ac

0800a864 <stm32f1_adc_dev_init>:
 * @param2 stm32f1 ADC device cfg ptr
 * @return OS_OK on success
 */
int
stm32f1_adc_dev_init(struct os_dev *odev, void *arg)
{
 800a864:	b538      	push	{r3, r4, r5, lr}
    struct stm32f1_adc_dev_cfg *sac;
    struct adc_dev *dev;

    sac = (struct stm32f1_adc_dev_cfg *) arg;

    assert(sac != NULL);
 800a866:	b181      	cbz	r1, 800a88a <stm32f1_adc_dev_init+0x26>
 800a868:	4604      	mov	r4, r0
 800a86a:	460d      	mov	r5, r1

    dev = (struct adc_dev *)odev;

    os_mutex_init(&dev->ad_lock);
 800a86c:	3024      	adds	r0, #36	; 0x24
 800a86e:	f7fc f9a7 	bl	8006bc0 <os_mutex_init>

    dev->ad_chans = (void *) sac->sac_chans;
 800a872:	686b      	ldr	r3, [r5, #4]
 800a874:	6363      	str	r3, [r4, #52]	; 0x34
    dev->ad_chan_count = sac->sac_chan_count;
 800a876:	782b      	ldrb	r3, [r5, #0]
 800a878:	63a3      	str	r3, [r4, #56]	; 0x38

    OS_DEV_SETHANDLERS(odev, stm32f1_adc_open, stm32f1_adc_close);
 800a87a:	4b07      	ldr	r3, [pc, #28]	; (800a898 <stm32f1_adc_dev_init+0x34>)
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	4b07      	ldr	r3, [pc, #28]	; (800a89c <stm32f1_adc_dev_init+0x38>)
 800a880:	60e3      	str	r3, [r4, #12]

    dev->ad_funcs = &stm32f1_adc_funcs;
 800a882:	4b07      	ldr	r3, [pc, #28]	; (800a8a0 <stm32f1_adc_dev_init+0x3c>)
 800a884:	6323      	str	r3, [r4, #48]	; 0x30
    ADC_HandleTypeDef *hadc = cfg->sac_adc_handle;
    HAL_StatusTypeDef rc = HAL_ADC_Init(hadc);  ////  Added HAL initalisation, which was missing from the STM32F4 code.
    if (rc != HAL_OK) { return rc; }
#endif  //  NOTUSED
    return (OS_OK);
}
 800a886:	2000      	movs	r0, #0
 800a888:	bd38      	pop	{r3, r4, r5, pc}
    assert(sac != NULL);
 800a88a:	2300      	movs	r3, #0
 800a88c:	461a      	mov	r2, r3
 800a88e:	4619      	mov	r1, r3
 800a890:	4618      	mov	r0, r3
 800a892:	f7fb faaf 	bl	8005df4 <__assert_func>
 800a896:	bf00      	nop
 800a898:	0800a7db 	.word	0x0800a7db
 800a89c:	0800a6e1 	.word	0x0800a6e1
 800a8a0:	0800f728 	.word	0x0800f728

0800a8a4 <_ZL13config_devicev>:
    rc = config_device();
    assert(rc == 0);
}

//  Device configuration
static int config_device(void) {
 800a8a4:	b530      	push	{r4, r5, lr}
 800a8a6:	b085      	sub	sp, #20
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f04f 31ff 	mov.w	r1, #4294967295
 800a8ae:	4810      	ldr	r0, [pc, #64]	; (800a8f0 <_ZL13config_devicev+0x4c>)
 800a8b0:	f7fb fd72 	bl	8006398 <os_dev_open>
    assert(dev != NULL);
 800a8b4:	b178      	cbz	r0, 800a8d6 <_ZL13config_devicev+0x32>
 800a8b6:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
 800a8b8:	4668      	mov	r0, sp
 800a8ba:	f000 fbd7 	bl	800b06c <bc95g_default_cfg>
    assert(rc == 0);
 800a8be:	b980      	cbnz	r0, 800a8e2 <_ZL13config_devicev+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 800a8c0:	4669      	mov	r1, sp
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 fbd9 	bl	800b07a <bc95g_config>
 800a8c8:	4605      	mov	r5, r0
    os_dev_close(dev);
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f7fb fd86 	bl	80063dc <os_dev_close>
    return rc;
}
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	b005      	add	sp, #20
 800a8d4:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	461a      	mov	r2, r3
 800a8da:	4619      	mov	r1, r3
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7fb fa89 	bl	8005df4 <__assert_func>
    assert(rc == 0);
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fb fa83 	bl	8005df4 <__assert_func>
 800a8ee:	bf00      	nop
 800a8f0:	0800f744 	.word	0x0800f744

0800a8f4 <bc95g_create>:
void DEVICE_CREATE(void) {
 800a8f4:	b500      	push	{lr}
 800a8f6:	b083      	sub	sp, #12
    console_printf("%screate " DEVICE_NAME "\n", _nbt);
 800a8f8:	4b10      	ldr	r3, [pc, #64]	; (800a93c <bc95g_create+0x48>)
 800a8fa:	6819      	ldr	r1, [r3, #0]
 800a8fc:	4810      	ldr	r0, [pc, #64]	; (800a940 <bc95g_create+0x4c>)
 800a8fe:	f7f9 fb4d 	bl	8003f9c <console_printf>
        DEVICE_INIT, (void *) &DEVICE_ITF);
 800a902:	4b10      	ldr	r3, [pc, #64]	; (800a944 <bc95g_create+0x50>)
 800a904:	9301      	str	r3, [sp, #4]
 800a906:	4b10      	ldr	r3, [pc, #64]	; (800a948 <bc95g_create+0x54>)
 800a908:	9300      	str	r3, [sp, #0]
 800a90a:	2300      	movs	r3, #0
 800a90c:	2201      	movs	r2, #1
 800a90e:	490f      	ldr	r1, [pc, #60]	; (800a94c <bc95g_create+0x58>)
 800a910:	480f      	ldr	r0, [pc, #60]	; (800a950 <bc95g_create+0x5c>)
 800a912:	f7fb fcfb 	bl	800630c <os_dev_create>
    assert(rc == 0);
 800a916:	b928      	cbnz	r0, 800a924 <bc95g_create+0x30>
    rc = config_device();
 800a918:	f7ff ffc4 	bl	800a8a4 <_ZL13config_devicev>
    assert(rc == 0);
 800a91c:	b940      	cbnz	r0, 800a930 <bc95g_create+0x3c>
}
 800a91e:	b003      	add	sp, #12
 800a920:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 800a924:	2300      	movs	r3, #0
 800a926:	461a      	mov	r2, r3
 800a928:	4619      	mov	r1, r3
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fb fa62 	bl	8005df4 <__assert_func>
    assert(rc == 0);
 800a930:	2300      	movs	r3, #0
 800a932:	461a      	mov	r2, r3
 800a934:	4619      	mov	r1, r3
 800a936:	4618      	mov	r0, r3
 800a938:	f7fb fa5c 	bl	8005df4 <__assert_func>
 800a93c:	200001fc 	.word	0x200001fc
 800a940:	0800f74c 	.word	0x0800f74c
 800a944:	200001e4 	.word	0x200001e4
 800a948:	0800b02d 	.word	0x0800b02d
 800a94c:	0800f744 	.word	0x0800f744
 800a950:	200026bc 	.word	0x200026bc

0800a954 <_ZL16internal_timeoutm>:
    * Allows timeout to be changed between commands
    *
    * @param timeout timeout of the connection
    */
    void setTimeout(int timeout) {
        _timeout = timeout;
 800a954:	4b01      	ldr	r3, [pc, #4]	; (800a95c <_ZL16internal_timeoutm+0x8>)
 800a956:	60d8      	str	r0, [r3, #12]
}

/// Set the response timeout
static void internal_timeout(uint32_t timeout_ms) {
    parser.setTimeout(timeout_ms);
}
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	20002a84 	.word	0x20002a84

0800a960 <_ZL3cfgP5bc95g>:

/////////////////////////////////////////////////////////
//  Device Creation Functions

/// Return the BC95G Config
static bc95g_cfg *cfg(struct bc95g *dev) { return &dev->cfg; }
 800a960:	3024      	adds	r0, #36	; 0x24
 800a962:	4770      	bx	lr

0800a964 <_ZL11bc95g_eventPv>:
        if (_cbs[i].callback) {
            _cbs[i].callback(_cbs[i].data);
        }
    }
#endif  //  TODO
}
 800a964:	4770      	bx	lr

0800a966 <_ZL13nibble_to_hexh>:

/// Given n=0..15, return '0'..'f'.
static char nibble_to_hex(uint8_t n) {
    return (n < 10)
        ? '0' + n
        : 'a' + n - 10;
 800a966:	2809      	cmp	r0, #9
 800a968:	d902      	bls.n	800a970 <_ZL13nibble_to_hexh+0xa>
 800a96a:	3057      	adds	r0, #87	; 0x57
 800a96c:	b2c0      	uxtb	r0, r0
}
 800a96e:	4770      	bx	lr
        : 'a' + n - 10;
 800a970:	3030      	adds	r0, #48	; 0x30
 800a972:	b2c0      	uxtb	r0, r0
 800a974:	4770      	bx	lr
	...

0800a978 <_ZL11get_commandP5bc95g9CommandId>:
static const char *get_command(struct bc95g *dev, enum CommandId id) {
 800a978:	b508      	push	{r3, lr}
    assert(id < (sizeof(COMMANDS) / sizeof(COMMANDS[0])));  //  Invalid id
 800a97a:	2910      	cmp	r1, #16
 800a97c:	d805      	bhi.n	800a98a <_ZL11get_commandP5bc95g9CommandId+0x12>
    const char *cmd = COMMANDS[id];
 800a97e:	4b06      	ldr	r3, [pc, #24]	; (800a998 <_ZL11get_commandP5bc95g9CommandId+0x20>)
 800a980:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    dev->last_error = id;  //  Set command ID as the last error.
 800a984:	6341      	str	r1, [r0, #52]	; 0x34
}
 800a986:	4618      	mov	r0, r3
 800a988:	bd08      	pop	{r3, pc}
    assert(id < (sizeof(COMMANDS) / sizeof(COMMANDS[0])));  //  Invalid id
 800a98a:	2300      	movs	r3, #0
 800a98c:	461a      	mov	r2, r3
 800a98e:	4619      	mov	r1, r3
 800a990:	4618      	mov	r0, r3
 800a992:	f7fb fa2f 	bl	8005df4 <__assert_func>
 800a996:	bf00      	nop
 800a998:	0800f7f4 	.word	0x0800f7f4

0800a99c <_ZL18register_transportPKcPvS0_th>:
static int register_transport(const char *network_device, void *server_endpoint, const char *host, uint16_t port, uint8_t server_endpoint_size) {
 800a99c:	b510      	push	{r4, lr}
    assert(server_endpoint_size >= sizeof(struct bc95g_server));  //  Server Endpoint too small
 800a99e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 800a9a2:	2c0f      	cmp	r4, #15
 800a9a4:	d902      	bls.n	800a9ac <_ZL18register_transportPKcPvS0_th+0x10>
    int rc = bc95g_register_transport(network_device, (struct bc95g_server *) server_endpoint, host, port);
 800a9a6:	f000 fd09 	bl	800b3bc <bc95g_register_transport>
}
 800a9aa:	bd10      	pop	{r4, pc}
    assert(server_endpoint_size >= sizeof(struct bc95g_server));  //  Server Endpoint too small
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fb fa1e 	bl	8005df4 <__assert_func>

0800a9b8 <_ZL11bc95g_closeP6os_dev>:
static int bc95g_close(struct os_dev *dev0) {
 800a9b8:	b510      	push	{r4, lr}
 800a9ba:	4604      	mov	r4, r0
    console_printf("]\n");  console_flush();  ////
 800a9bc:	4806      	ldr	r0, [pc, #24]	; (800a9d8 <_ZL11bc95g_closeP6os_dev+0x20>)
 800a9be:	f7f9 faed 	bl	8003f9c <console_printf>
 800a9c2:	f7f9 f9e3 	bl	8003d8c <console_flush>
    assert(dev0);
 800a9c6:	b10c      	cbz	r4, 800a9cc <_ZL11bc95g_closeP6os_dev+0x14>
}
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	bd10      	pop	{r4, pc}
    assert(dev0);
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fb fa0e 	bl	8005df4 <__assert_func>
 800a9d8:	0800f780 	.word	0x0800f780

0800a9dc <_ZL13internal_initPcmS_mS_mb>:
    char *parserbuf, uint32_t parserbuf_size, bool debug) {
 800a9dc:	b570      	push	{r4, r5, r6, lr}
 800a9de:	b084      	sub	sp, #16
    serial.init(txbuf, txbuf_size, rxbuf, rxbuf_size);
 800a9e0:	4c11      	ldr	r4, [pc, #68]	; (800aa28 <_ZL13internal_initPcmS_mS_mb+0x4c>)
 800a9e2:	2500      	movs	r5, #0
 800a9e4:	9501      	str	r5, [sp, #4]
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	460a      	mov	r2, r1
 800a9ec:	4601      	mov	r1, r0
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f000 ff4c 	bl	800b88c <_ZN14BufferedSerial4initEPcmS0_mPKc>
    parser.init(serial, parserbuf, parserbuf_size);
 800a9f4:	4e0d      	ldr	r6, [pc, #52]	; (800aa2c <_ZL13internal_initPcmS_mS_mb+0x50>)
 800a9f6:	9502      	str	r5, [sp, #8]
 800a9f8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800a9fc:	9301      	str	r3, [sp, #4]
 800a9fe:	4b0c      	ldr	r3, [pc, #48]	; (800aa30 <_ZL13internal_initPcmS_mS_mb+0x54>)
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa04:	9a08      	ldr	r2, [sp, #32]
 800aa06:	4621      	mov	r1, r4
 800aa08:	4630      	mov	r0, r6
 800aa0a:	f000 fd53 	bl	800b4b4 <_ZN8ATParser4initER14BufferedSerialPciPKcib>
    packets = 0;
 800aa0e:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <_ZL13internal_initPcmS_mS_mb+0x58>)
 800aa10:	601d      	str	r5, [r3, #0]
    serial.baud(9600);  //  TODO: Increase the bitrate
 800aa12:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800aa16:	4620      	mov	r0, r4
 800aa18:	f001 f820 	bl	800ba5c <_ZN14BufferedSerial4baudEm>
    * Allows echo to be on or off
    *
    * @param echo 1 for echo and 0 turns it off
    */
    void debugOn(uint8_t on) {
        dbg_on = (on) ? 1 : 0;
 800aa1c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800aa20:	7633      	strb	r3, [r6, #24]
}
 800aa22:	b004      	add	sp, #16
 800aa24:	bd70      	pop	{r4, r5, r6, pc}
 800aa26:	bf00      	nop
 800aa28:	20002ac0 	.word	0x20002ac0
 800aa2c:	20002a84 	.word	0x20002a84
 800aa30:	0800f790 	.word	0x0800f790
 800aa34:	20002b0c 	.word	0x20002b0c

0800aa38 <_ZL18internal_configurei>:
static void internal_configure(int uart) {
 800aa38:	b508      	push	{r3, lr}
    serial.configure(uart);
 800aa3a:	4601      	mov	r1, r0
 800aa3c:	4801      	ldr	r0, [pc, #4]	; (800aa44 <_ZL18internal_configurei+0xc>)
 800aa3e:	f000 ff45 	bl	800b8cc <_ZN14BufferedSerial9configureEi>
}
 800aa42:	bd08      	pop	{r3, pc}
 800aa44:	20002ac0 	.word	0x20002ac0

0800aa48 <_ZL15internal_attachPFvPvES_>:
static void internal_attach(void (*func)(void *), void *arg) {
 800aa48:	b508      	push	{r3, lr}
    serial.attach(func, arg);
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	460a      	mov	r2, r1
 800aa4e:	4601      	mov	r1, r0
 800aa50:	4801      	ldr	r0, [pc, #4]	; (800aa58 <_ZL15internal_attachPFvPvES_+0x10>)
 800aa52:	f000 fff7 	bl	800ba44 <_ZN14BufferedSerial6attachEPFvPvES0_i>
}
 800aa56:	bd08      	pop	{r3, pc}
 800aa58:	20002ac0 	.word	0x20002ac0

0800aa5c <_ZL10bc95g_openP6os_devmPv>:
static int bc95g_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 800aa5c:	b510      	push	{r4, lr}
 800aa5e:	b084      	sub	sp, #16
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 800aa60:	4b17      	ldr	r3, [pc, #92]	; (800aac0 <_ZL10bc95g_openP6os_devmPv+0x64>)
 800aa62:	781b      	ldrb	r3, [r3, #0]
 800aa64:	b30b      	cbz	r3, 800aaaa <_ZL10bc95g_openP6os_devmPv+0x4e>
 800aa66:	4604      	mov	r4, r0
    first_open = false;
 800aa68:	4b15      	ldr	r3, [pc, #84]	; (800aac0 <_ZL10bc95g_openP6os_devmPv+0x64>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	701a      	strb	r2, [r3, #0]
    console_printf("[\n");  ////
 800aa6e:	4815      	ldr	r0, [pc, #84]	; (800aac4 <_ZL10bc95g_openP6os_devmPv+0x68>)
 800aa70:	f7f9 fa94 	bl	8003f9c <console_printf>
    assert(dev0);
 800aa74:	b1ec      	cbz	r4, 800aab2 <_ZL10bc95g_openP6os_devmPv+0x56>
    memset(cfg->sockets, 0, sizeof(cfg->sockets));
 800aa76:	2300      	movs	r3, #0
 800aa78:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa7c:	6323      	str	r3, [r4, #48]	; 0x30
    internal_init(
 800aa7e:	9302      	str	r3, [sp, #8]
 800aa80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	4a10      	ldr	r2, [pc, #64]	; (800aac8 <_ZL10bc95g_openP6os_devmPv+0x6c>)
 800aa88:	9200      	str	r2, [sp, #0]
 800aa8a:	4a10      	ldr	r2, [pc, #64]	; (800aacc <_ZL10bc95g_openP6os_devmPv+0x70>)
 800aa8c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800aa90:	480f      	ldr	r0, [pc, #60]	; (800aad0 <_ZL10bc95g_openP6os_devmPv+0x74>)
 800aa92:	f7ff ffa3 	bl	800a9dc <_ZL13internal_initPcmS_mS_mb>
    internal_configure(cfg->uart);         //  Configure the UART port.  0 means UART2.
 800aa96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aa98:	f7ff ffce 	bl	800aa38 <_ZL18internal_configurei>
    internal_attach(&bc95g_event, dev);    //  Set the callback for BC95G events.
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	480d      	ldr	r0, [pc, #52]	; (800aad4 <_ZL10bc95g_openP6os_devmPv+0x78>)
 800aaa0:	f7ff ffd2 	bl	800aa48 <_ZL15internal_attachPFvPvES_>
}
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	b004      	add	sp, #16
 800aaa8:	bd10      	pop	{r4, pc}
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 800aaaa:	4806      	ldr	r0, [pc, #24]	; (800aac4 <_ZL10bc95g_openP6os_devmPv+0x68>)
 800aaac:	f7f9 fa76 	bl	8003f9c <console_printf>
 800aab0:	e7f8      	b.n	800aaa4 <_ZL10bc95g_openP6os_devmPv+0x48>
    assert(dev0);
 800aab2:	2300      	movs	r3, #0
 800aab4:	461a      	mov	r2, r3
 800aab6:	4619      	mov	r1, r3
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fb f99b 	bl	8005df4 <__assert_func>
 800aabe:	bf00      	nop
 800aac0:	200001f8 	.word	0x200001f8
 800aac4:	0800f760 	.word	0x0800f760
 800aac8:	20002984 	.word	0x20002984
 800aacc:	200026f4 	.word	0x200026f4
 800aad0:	200027f4 	.word	0x200027f4
 800aad4:	0800a965 	.word	0x0800a965

0800aad8 <_ZL9expect_okP5bc95g>:
static bool expect_ok(struct bc95g *dev) {
 800aad8:	b508      	push	{r3, lr}
    return parser.recv("OK");
 800aada:	4902      	ldr	r1, [pc, #8]	; (800aae4 <_ZL9expect_okP5bc95g+0xc>)
 800aadc:	4802      	ldr	r0, [pc, #8]	; (800aae8 <_ZL9expect_okP5bc95g+0x10>)
 800aade:	f000 fe8f 	bl	800b800 <_ZN8ATParser4recvEPKcz>
}
 800aae2:	bd08      	pop	{r3, pc}
 800aae4:	0800f838 	.word	0x0800f838
 800aae8:	20002a84 	.word	0x20002a84

0800aaec <_ZL5sleept>:
static bool sleep(uint16_t seconds) {
 800aaec:	b508      	push	{r3, lr}
    os_time_delay(seconds * OS_TICKS_PER_SEC);
 800aaee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aaf2:	fb03 f000 	mul.w	r0, r3, r0
 800aaf6:	f7fc fc7b 	bl	80073f0 <os_time_delay>
}
 800aafa:	2001      	movs	r0, #1
 800aafc:	bd08      	pop	{r3, pc}
	...

0800ab00 <_ZL11wait_for_okP5bc95g>:
static bool wait_for_ok(struct bc95g *dev) {
 800ab00:	b538      	push	{r3, r4, r5, lr}
        parser.send("AT") &&
 800ab02:	491f      	ldr	r1, [pc, #124]	; (800ab80 <_ZL11wait_for_okP5bc95g+0x80>)
 800ab04:	481f      	ldr	r0, [pc, #124]	; (800ab84 <_ZL11wait_for_okP5bc95g+0x84>)
 800ab06:	f000 fe6d 	bl	800b7e4 <_ZN8ATParser4sendEPKcz>
 800ab0a:	b128      	cbz	r0, 800ab18 <_ZL11wait_for_okP5bc95g+0x18>
        parser.recv("OK")
 800ab0c:	491e      	ldr	r1, [pc, #120]	; (800ab88 <_ZL11wait_for_okP5bc95g+0x88>)
 800ab0e:	481d      	ldr	r0, [pc, #116]	; (800ab84 <_ZL11wait_for_okP5bc95g+0x84>)
 800ab10:	f000 fe76 	bl	800b800 <_ZN8ATParser4recvEPKcz>
        parser.send("AT") &&
 800ab14:	4605      	mov	r5, r0
 800ab16:	b930      	cbnz	r0, 800ab26 <_ZL11wait_for_okP5bc95g+0x26>
        parser.send("\r\nAT") &&
 800ab18:	491c      	ldr	r1, [pc, #112]	; (800ab8c <_ZL11wait_for_okP5bc95g+0x8c>)
 800ab1a:	481a      	ldr	r0, [pc, #104]	; (800ab84 <_ZL11wait_for_okP5bc95g+0x84>)
 800ab1c:	f000 fe62 	bl	800b7e4 <_ZN8ATParser4sendEPKcz>
 800ab20:	b928      	cbnz	r0, 800ab2e <_ZL11wait_for_okP5bc95g+0x2e>
static bool wait_for_ok(struct bc95g *dev) {
 800ab22:	2400      	movs	r4, #0
 800ab24:	e015      	b.n	800ab52 <_ZL11wait_for_okP5bc95g+0x52>
    if (res) { parser.flush(); return true; }
 800ab26:	4817      	ldr	r0, [pc, #92]	; (800ab84 <_ZL11wait_for_okP5bc95g+0x84>)
 800ab28:	f000 fce8 	bl	800b4fc <_ZN8ATParser5flushEv>
 800ab2c:	e025      	b.n	800ab7a <_ZL11wait_for_okP5bc95g+0x7a>
        parser.recv("OK")
 800ab2e:	4916      	ldr	r1, [pc, #88]	; (800ab88 <_ZL11wait_for_okP5bc95g+0x88>)
 800ab30:	4814      	ldr	r0, [pc, #80]	; (800ab84 <_ZL11wait_for_okP5bc95g+0x84>)
 800ab32:	f000 fe65 	bl	800b800 <_ZN8ATParser4recvEPKcz>
        parser.send("\r\nAT") &&
 800ab36:	4605      	mov	r5, r0
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d0f2      	beq.n	800ab22 <_ZL11wait_for_okP5bc95g+0x22>
    if (res) { parser.flush(); return true; }
 800ab3c:	4811      	ldr	r0, [pc, #68]	; (800ab84 <_ZL11wait_for_okP5bc95g+0x84>)
 800ab3e:	f000 fcdd 	bl	800b4fc <_ZN8ATParser5flushEv>
 800ab42:	e01a      	b.n	800ab7a <_ZL11wait_for_okP5bc95g+0x7a>
        console_flush();
 800ab44:	f7f9 f922 	bl	8003d8c <console_flush>
        sleep(1);
 800ab48:	2001      	movs	r0, #1
 800ab4a:	f7ff ffcf 	bl	800aaec <_ZL5sleept>
    for (uint8_t i = 0; i < 20; i++) {
 800ab4e:	3401      	adds	r4, #1
 800ab50:	b2e4      	uxtb	r4, r4
 800ab52:	2c13      	cmp	r4, #19
 800ab54:	d810      	bhi.n	800ab78 <_ZL11wait_for_okP5bc95g+0x78>
            parser.send("AT") &&
 800ab56:	490a      	ldr	r1, [pc, #40]	; (800ab80 <_ZL11wait_for_okP5bc95g+0x80>)
 800ab58:	480a      	ldr	r0, [pc, #40]	; (800ab84 <_ZL11wait_for_okP5bc95g+0x84>)
 800ab5a:	f000 fe43 	bl	800b7e4 <_ZN8ATParser4sendEPKcz>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d0f0      	beq.n	800ab44 <_ZL11wait_for_okP5bc95g+0x44>
            parser.recv("OK")
 800ab62:	4909      	ldr	r1, [pc, #36]	; (800ab88 <_ZL11wait_for_okP5bc95g+0x88>)
 800ab64:	4807      	ldr	r0, [pc, #28]	; (800ab84 <_ZL11wait_for_okP5bc95g+0x84>)
 800ab66:	f000 fe4b 	bl	800b800 <_ZN8ATParser4recvEPKcz>
            parser.send("AT") &&
 800ab6a:	4605      	mov	r5, r0
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d0e9      	beq.n	800ab44 <_ZL11wait_for_okP5bc95g+0x44>
        if (res) { parser.flush(); return true; }        
 800ab70:	4804      	ldr	r0, [pc, #16]	; (800ab84 <_ZL11wait_for_okP5bc95g+0x84>)
 800ab72:	f000 fcc3 	bl	800b4fc <_ZN8ATParser5flushEv>
 800ab76:	e000      	b.n	800ab7a <_ZL11wait_for_okP5bc95g+0x7a>
    return false;  //  Can't get OK after 20 retries, quit.
 800ab78:	2500      	movs	r5, #0
}
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	bd38      	pop	{r3, r4, r5, pc}
 800ab7e:	bf00      	nop
 800ab80:	0800f784 	.word	0x0800f784
 800ab84:	20002a84 	.word	0x20002a84
 800ab88:	0800f838 	.word	0x0800f838
 800ab8c:	0800f788 	.word	0x0800f788

0800ab90 <_ZL8send_atpP5bc95g>:
static bool send_atp(struct bc95g *dev) {
 800ab90:	b508      	push	{r3, lr}
    return parser.write(ATP, sizeof(ATP) - 1) > 0;
 800ab92:	2203      	movs	r2, #3
 800ab94:	4904      	ldr	r1, [pc, #16]	; (800aba8 <_ZL8send_atpP5bc95g+0x18>)
 800ab96:	4805      	ldr	r0, [pc, #20]	; (800abac <_ZL8send_atpP5bc95g+0x1c>)
 800ab98:	f000 fcbd 	bl	800b516 <_ZN8ATParser5writeEPKci>
}
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	bfd4      	ite	le
 800aba0:	2000      	movle	r0, #0
 800aba2:	2001      	movgt	r0, #1
 800aba4:	bd08      	pop	{r3, pc}
 800aba6:	bf00      	nop
 800aba8:	0800f7f0 	.word	0x0800f7f0
 800abac:	20002a84 	.word	0x20002a84

0800abb0 <_ZL12send_commandP5bc95g9CommandId>:
static bool send_command(struct bc95g *dev, enum CommandId id) {
 800abb0:	b570      	push	{r4, r5, r6, lr}
 800abb2:	4605      	mov	r5, r0
    const char *cmd = get_command(dev, id);
 800abb4:	f7ff fee0 	bl	800a978 <_ZL11get_commandP5bc95g9CommandId>
 800abb8:	4606      	mov	r6, r0
        send_atp(dev) &&
 800abba:	4628      	mov	r0, r5
 800abbc:	f7ff ffe8 	bl	800ab90 <_ZL8send_atpP5bc95g>
        parser.send(cmd) &&
 800abc0:	4604      	mov	r4, r0
 800abc2:	b918      	cbnz	r0, 800abcc <_ZL12send_commandP5bc95g9CommandId+0x1c>
    console_flush();
 800abc4:	f7f9 f8e2 	bl	8003d8c <console_flush>
}
 800abc8:	4620      	mov	r0, r4
 800abca:	bd70      	pop	{r4, r5, r6, pc}
        parser.send(cmd) &&
 800abcc:	4631      	mov	r1, r6
 800abce:	4805      	ldr	r0, [pc, #20]	; (800abe4 <_ZL12send_commandP5bc95g9CommandId+0x34>)
 800abd0:	f000 fe08 	bl	800b7e4 <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 800abd4:	4604      	mov	r4, r0
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d0f4      	beq.n	800abc4 <_ZL12send_commandP5bc95g9CommandId+0x14>
        expect_ok(dev)
 800abda:	4628      	mov	r0, r5
 800abdc:	f7ff ff7c 	bl	800aad8 <_ZL9expect_okP5bc95g>
 800abe0:	4604      	mov	r4, r0
 800abe2:	e7ef      	b.n	800abc4 <_ZL12send_commandP5bc95g9CommandId+0x14>
 800abe4:	20002a84 	.word	0x20002a84

0800abe8 <_ZL16send_command_intP5bc95g9CommandIdi>:
static bool send_command_int(struct bc95g *dev, enum CommandId id, int arg) {
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	4604      	mov	r4, r0
 800abec:	4616      	mov	r6, r2
    const char *cmd = get_command(dev, id);
 800abee:	f7ff fec3 	bl	800a978 <_ZL11get_commandP5bc95g9CommandId>
 800abf2:	4605      	mov	r5, r0
        send_atp(dev) &&
 800abf4:	4620      	mov	r0, r4
 800abf6:	f7ff ffcb 	bl	800ab90 <_ZL8send_atpP5bc95g>
        parser.send(cmd, arg) &&
 800abfa:	4603      	mov	r3, r0
 800abfc:	b908      	cbnz	r0, 800ac02 <_ZL16send_command_intP5bc95g9CommandIdi+0x1a>
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	bd70      	pop	{r4, r5, r6, pc}
        parser.send(cmd, arg) &&
 800ac02:	4632      	mov	r2, r6
 800ac04:	4629      	mov	r1, r5
 800ac06:	4805      	ldr	r0, [pc, #20]	; (800ac1c <_ZL16send_command_intP5bc95g9CommandIdi+0x34>)
 800ac08:	f000 fdec 	bl	800b7e4 <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d0f5      	beq.n	800abfe <_ZL16send_command_intP5bc95g9CommandIdi+0x16>
        expect_ok(dev)
 800ac12:	4620      	mov	r0, r4
 800ac14:	f7ff ff60 	bl	800aad8 <_ZL9expect_okP5bc95g>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	e7f0      	b.n	800abfe <_ZL16send_command_intP5bc95g9CommandIdi+0x16>
 800ac1c:	20002a84 	.word	0x20002a84

0800ac20 <_ZL19prepare_to_transmitP5bc95g>:
static bool prepare_to_transmit(struct bc95g *dev) {
 800ac20:	b510      	push	{r4, lr}
 800ac22:	4604      	mov	r4, r0
        wait_for_ok(dev) &&
 800ac24:	f7ff ff6c 	bl	800ab00 <_ZL11wait_for_okP5bc95g>
        (parser.flush() == 0) &&
 800ac28:	4603      	mov	r3, r0
 800ac2a:	b908      	cbnz	r0, 800ac30 <_ZL19prepare_to_transmitP5bc95g+0x10>
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	bd10      	pop	{r4, pc}
        send_command(dev, NCONFIG) &&
 800ac30:	2101      	movs	r1, #1
 800ac32:	4620      	mov	r0, r4
 800ac34:	f7ff ffbc 	bl	800abb0 <_ZL12send_commandP5bc95g9CommandId>
        wait_for_ok(dev) &&
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d0f6      	beq.n	800ac2c <_ZL19prepare_to_transmitP5bc95g+0xc>
        send_command(dev, QREGSWT) &&
 800ac3e:	2102      	movs	r1, #2
 800ac40:	4620      	mov	r0, r4
 800ac42:	f7ff ffb5 	bl	800abb0 <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, NCONFIG) &&
 800ac46:	4603      	mov	r3, r0
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d0ef      	beq.n	800ac2c <_ZL19prepare_to_transmitP5bc95g+0xc>
        send_command(dev, NRB) &&
 800ac4c:	2103      	movs	r1, #3
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f7ff ffae 	bl	800abb0 <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, QREGSWT) &&
 800ac54:	4603      	mov	r3, r0
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d0e8      	beq.n	800ac2c <_ZL19prepare_to_transmitP5bc95g+0xc>
        parser.send("AT") &&
 800ac5a:	490d      	ldr	r1, [pc, #52]	; (800ac90 <_ZL19prepare_to_transmitP5bc95g+0x70>)
 800ac5c:	480d      	ldr	r0, [pc, #52]	; (800ac94 <_ZL19prepare_to_transmitP5bc95g+0x74>)
 800ac5e:	f000 fdc1 	bl	800b7e4 <_ZN8ATParser4sendEPKcz>
        send_command(dev, NRB) &&
 800ac62:	4603      	mov	r3, r0
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d0e1      	beq.n	800ac2c <_ZL19prepare_to_transmitP5bc95g+0xc>
        expect_ok(dev) &&
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f7ff ff35 	bl	800aad8 <_ZL9expect_okP5bc95g>
        parser.send("AT") &&
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d0db      	beq.n	800ac2c <_ZL19prepare_to_transmitP5bc95g+0xc>
        (parser.flush() == 0) &&
 800ac74:	4807      	ldr	r0, [pc, #28]	; (800ac94 <_ZL19prepare_to_transmitP5bc95g+0x74>)
 800ac76:	f000 fc41 	bl	800b4fc <_ZN8ATParser5flushEv>
        expect_ok(dev) &&
 800ac7a:	b108      	cbz	r0, 800ac80 <_ZL19prepare_to_transmitP5bc95g+0x60>
        (parser.flush() == 0) &&
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e7d5      	b.n	800ac2c <_ZL19prepare_to_transmitP5bc95g+0xc>
        send_command_int(dev, NBAND, MYNEWT_VAL(NBIOT_BAND))
 800ac80:	2208      	movs	r2, #8
 800ac82:	2104      	movs	r1, #4
 800ac84:	4620      	mov	r0, r4
 800ac86:	f7ff ffaf 	bl	800abe8 <_ZL16send_command_intP5bc95g9CommandIdi>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	e7ce      	b.n	800ac2c <_ZL19prepare_to_transmitP5bc95g+0xc>
 800ac8e:	bf00      	nop
 800ac90:	0800f784 	.word	0x0800f784
 800ac94:	20002a84 	.word	0x20002a84

0800ac98 <_ZL10send_queryP5bc95g9CommandIdPiS2_>:
static bool send_query(struct bc95g *dev, enum CommandId id, int *res1, int *res2) {
 800ac98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9c:	b088      	sub	sp, #32
    assert(res1);
 800ac9e:	b1e2      	cbz	r2, 800acda <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x42>
 800aca0:	4604      	mov	r4, r0
 800aca2:	461d      	mov	r5, r3
 800aca4:	4617      	mov	r7, r2
    const char *cmd = get_command(dev, id);
 800aca6:	f7ff fe67 	bl	800a978 <_ZL11get_commandP5bc95g9CommandId>
 800acaa:	4680      	mov	r8, r0
    char cmd_response[17];  memset(cmd_response, 0, sizeof(cmd_response));
 800acac:	2300      	movs	r3, #0
 800acae:	9303      	str	r3, [sp, #12]
 800acb0:	9304      	str	r3, [sp, #16]
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	9306      	str	r3, [sp, #24]
 800acb6:	f88d 301c 	strb.w	r3, [sp, #28]
    *res1 = -1; 
 800acba:	f04f 33ff 	mov.w	r3, #4294967295
 800acbe:	603b      	str	r3, [r7, #0]
    if (res2) { *res2 = -1; }
 800acc0:	b105      	cbz	r5, 800acc4 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x2c>
 800acc2:	602b      	str	r3, [r5, #0]
        send_atp(dev) &&
 800acc4:	4620      	mov	r0, r4
 800acc6:	f7ff ff63 	bl	800ab90 <_ZL8send_atpP5bc95g>
        ) &&
 800acca:	4606      	mov	r6, r0
 800accc:	b958      	cbnz	r0, 800ace6 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x4e>
    console_flush();
 800acce:	f7f9 f85d 	bl	8003d8c <console_flush>
}
 800acd2:	4630      	mov	r0, r6
 800acd4:	b008      	add	sp, #32
 800acd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(res1);
 800acda:	2300      	movs	r3, #0
 800acdc:	461a      	mov	r2, r3
 800acde:	4619      	mov	r1, r3
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fb f887 	bl	8005df4 <__assert_func>
        parser.send(cmd) && (
 800ace6:	4641      	mov	r1, r8
 800ace8:	480f      	ldr	r0, [pc, #60]	; (800ad28 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x90>)
 800acea:	f000 fd7b 	bl	800b7e4 <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 800acee:	4606      	mov	r6, r0
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d0ec      	beq.n	800acce <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x36>
        ) &&
 800acf4:	b175      	cbz	r5, 800ad14 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x7c>
            : parser.recv("+%16[^:]:%d,%d", cmd_response, res1, res2)  //  Note: cmd is max 16 chars
 800acf6:	9500      	str	r5, [sp, #0]
 800acf8:	463b      	mov	r3, r7
 800acfa:	aa03      	add	r2, sp, #12
 800acfc:	490b      	ldr	r1, [pc, #44]	; (800ad2c <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x94>)
 800acfe:	480a      	ldr	r0, [pc, #40]	; (800ad28 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x90>)
 800ad00:	f000 fd7e 	bl	800b800 <_ZN8ATParser4recvEPKcz>
            ? parser.recv("+%16[^:]:%d", cmd_response, res1)  //  Note: cmd is max 16 chars
 800ad04:	4606      	mov	r6, r0
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d0e1      	beq.n	800acce <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x36>
        expect_ok(dev)
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f7ff fee4 	bl	800aad8 <_ZL9expect_okP5bc95g>
 800ad10:	4606      	mov	r6, r0
 800ad12:	e7dc      	b.n	800acce <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x36>
            ? parser.recv("+%16[^:]:%d", cmd_response, res1)  //  Note: cmd is max 16 chars
 800ad14:	463b      	mov	r3, r7
 800ad16:	aa03      	add	r2, sp, #12
 800ad18:	4905      	ldr	r1, [pc, #20]	; (800ad30 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x98>)
 800ad1a:	4803      	ldr	r0, [pc, #12]	; (800ad28 <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x90>)
 800ad1c:	f000 fd70 	bl	800b800 <_ZN8ATParser4recvEPKcz>
        parser.send(cmd) && (
 800ad20:	4606      	mov	r6, r0
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d1f1      	bne.n	800ad0a <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x72>
 800ad26:	e7d2      	b.n	800acce <_ZL10send_queryP5bc95g9CommandIdPiS2_+0x36>
 800ad28:	20002a84 	.word	0x20002a84
 800ad2c:	0800f770 	.word	0x0800f770
 800ad30:	0800f764 	.word	0x0800f764

0800ad34 <_ZL15wait_for_attachP5bc95g>:
static bool wait_for_attach(struct bc95g *dev) {
 800ad34:	b530      	push	{r4, r5, lr}
 800ad36:	b083      	sub	sp, #12
 800ad38:	4605      	mov	r5, r0
    for (uint8_t i = 0; i < MAX_ATTACH_RETRIES; i++) {
 800ad3a:	2400      	movs	r4, #0
 800ad3c:	2c27      	cmp	r4, #39	; 0x27
 800ad3e:	d81e      	bhi.n	800ad7e <_ZL15wait_for_attachP5bc95g+0x4a>
        int state = -1;
 800ad40:	aa02      	add	r2, sp, #8
 800ad42:	f04f 33ff 	mov.w	r3, #4294967295
 800ad46:	f842 3d04 	str.w	r3, [r2, #-4]!
        bool res = send_query(dev, CGATT_QUERY, &state, NULL);
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	210b      	movs	r1, #11
 800ad4e:	4628      	mov	r0, r5
 800ad50:	f7ff ffa2 	bl	800ac98 <_ZL10send_queryP5bc95g9CommandIdPiS2_>
        if (!res) { return false; }  //  If send failed, quit.
 800ad54:	4602      	mov	r2, r0
 800ad56:	b198      	cbz	r0, 800ad80 <_ZL15wait_for_attachP5bc95g+0x4c>
        assert(state >= 0);
 800ad58:	9b01      	ldr	r3, [sp, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	db09      	blt.n	800ad72 <_ZL15wait_for_attachP5bc95g+0x3e>
        if (state == 1) { return true; }  //  If attached, exit.
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d00e      	beq.n	800ad80 <_ZL15wait_for_attachP5bc95g+0x4c>
        console_flush();
 800ad62:	f7f9 f813 	bl	8003d8c <console_flush>
        sleep(2);
 800ad66:	2002      	movs	r0, #2
 800ad68:	f7ff fec0 	bl	800aaec <_ZL5sleept>
    for (uint8_t i = 0; i < MAX_ATTACH_RETRIES; i++) {
 800ad6c:	3401      	adds	r4, #1
 800ad6e:	b2e4      	uxtb	r4, r4
 800ad70:	e7e4      	b.n	800ad3c <_ZL15wait_for_attachP5bc95g+0x8>
        assert(state >= 0);
 800ad72:	2300      	movs	r3, #0
 800ad74:	461a      	mov	r2, r3
 800ad76:	4619      	mov	r1, r3
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7fb f83b 	bl	8005df4 <__assert_func>
    return false;  //  Not attached after retries, quit.
 800ad7e:	2200      	movs	r2, #0
}
 800ad80:	4610      	mov	r0, r2
 800ad82:	b003      	add	sp, #12
 800ad84:	bd30      	pop	{r4, r5, pc}
	...

0800ad88 <_ZL14send_query_intP5bc95g9CommandIdPi>:
static bool send_query_int(struct bc95g *dev, enum CommandId id, int *result) {
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(result);
 800ad8a:	b182      	cbz	r2, 800adae <_ZL14send_query_intP5bc95g9CommandIdPi+0x26>
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	4616      	mov	r6, r2
    const char *cmd = get_command(dev, id);
 800ad90:	f7ff fdf2 	bl	800a978 <_ZL11get_commandP5bc95g9CommandId>
 800ad94:	4607      	mov	r7, r0
    *result = -1;
 800ad96:	f04f 33ff 	mov.w	r3, #4294967295
 800ad9a:	6033      	str	r3, [r6, #0]
        send_atp(dev) &&
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f7ff fef7 	bl	800ab90 <_ZL8send_atpP5bc95g>
        parser.recv("%d", result) &&
 800ada2:	4605      	mov	r5, r0
 800ada4:	b948      	cbnz	r0, 800adba <_ZL14send_query_intP5bc95g9CommandIdPi+0x32>
    console_flush();
 800ada6:	f7f8 fff1 	bl	8003d8c <console_flush>
}
 800adaa:	4628      	mov	r0, r5
 800adac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(result);
 800adae:	2300      	movs	r3, #0
 800adb0:	461a      	mov	r2, r3
 800adb2:	4619      	mov	r1, r3
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fb f81d 	bl	8005df4 <__assert_func>
        parser.send(cmd) &&
 800adba:	4639      	mov	r1, r7
 800adbc:	4809      	ldr	r0, [pc, #36]	; (800ade4 <_ZL14send_query_intP5bc95g9CommandIdPi+0x5c>)
 800adbe:	f000 fd11 	bl	800b7e4 <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 800adc2:	4605      	mov	r5, r0
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d0ee      	beq.n	800ada6 <_ZL14send_query_intP5bc95g9CommandIdPi+0x1e>
        parser.recv("%d", result) &&
 800adc8:	4632      	mov	r2, r6
 800adca:	4907      	ldr	r1, [pc, #28]	; (800ade8 <_ZL14send_query_intP5bc95g9CommandIdPi+0x60>)
 800adcc:	4805      	ldr	r0, [pc, #20]	; (800ade4 <_ZL14send_query_intP5bc95g9CommandIdPi+0x5c>)
 800adce:	f000 fd17 	bl	800b800 <_ZN8ATParser4recvEPKcz>
        parser.send(cmd) &&
 800add2:	4605      	mov	r5, r0
 800add4:	2800      	cmp	r0, #0
 800add6:	d0e6      	beq.n	800ada6 <_ZL14send_query_intP5bc95g9CommandIdPi+0x1e>
        expect_ok(dev)
 800add8:	4620      	mov	r0, r4
 800adda:	f7ff fe7d 	bl	800aad8 <_ZL9expect_okP5bc95g>
 800adde:	4605      	mov	r5, r0
 800ade0:	e7e1      	b.n	800ada6 <_ZL14send_query_intP5bc95g9CommandIdPi+0x1e>
 800ade2:	bf00      	nop
 800ade4:	20002a84 	.word	0x20002a84
 800ade8:	0800f8e0 	.word	0x0800f8e0

0800adec <_ZL21wait_for_registrationP5bc95g>:
static bool wait_for_registration(struct bc95g *dev) {
 800adec:	b530      	push	{r4, r5, lr}
 800adee:	b083      	sub	sp, #12
 800adf0:	4605      	mov	r5, r0
    hal_gpio_init_out(LED_BLINK_PIN, 1);
 800adf2:	2101      	movs	r1, #1
 800adf4:	202d      	movs	r0, #45	; 0x2d
 800adf6:	f7fe fbe9 	bl	80095cc <hal_gpio_init_out>
    for (uint8_t i = 0; i < MAX_REGISTRATION_RETRIES; i++) {
 800adfa:	2400      	movs	r4, #0
 800adfc:	2c27      	cmp	r4, #39	; 0x27
 800adfe:	d822      	bhi.n	800ae46 <_ZL21wait_for_registrationP5bc95g+0x5a>
        int code = -1, status = -1;
 800ae00:	f04f 32ff 	mov.w	r2, #4294967295
 800ae04:	9200      	str	r2, [sp, #0]
 800ae06:	ab02      	add	r3, sp, #8
 800ae08:	f843 2d04 	str.w	r2, [r3, #-4]!
        bool res = send_query(dev, CEREG_QUERY, &code, &status);
 800ae0c:	466a      	mov	r2, sp
 800ae0e:	2109      	movs	r1, #9
 800ae10:	4628      	mov	r0, r5
 800ae12:	f7ff ff41 	bl	800ac98 <_ZL10send_queryP5bc95g9CommandIdPiS2_>
        if (!res) { return false; }  //  If send failed, quit.
 800ae16:	4602      	mov	r2, r0
 800ae18:	b1b0      	cbz	r0, 800ae48 <_ZL21wait_for_registrationP5bc95g+0x5c>
        assert(status >= 0);
 800ae1a:	9b01      	ldr	r3, [sp, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	db0c      	blt.n	800ae3a <_ZL21wait_for_registrationP5bc95g+0x4e>
        if (status == 1) { return true; }  //  If registered, exit.
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d011      	beq.n	800ae48 <_ZL21wait_for_registrationP5bc95g+0x5c>
        hal_gpio_toggle(LED_BLINK_PIN);  //  Blink the LED.
 800ae24:	202d      	movs	r0, #45	; 0x2d
 800ae26:	f7fe fc09 	bl	800963c <hal_gpio_toggle>
        console_flush();
 800ae2a:	f7f8 ffaf 	bl	8003d8c <console_flush>
        sleep(2);
 800ae2e:	2002      	movs	r0, #2
 800ae30:	f7ff fe5c 	bl	800aaec <_ZL5sleept>
    for (uint8_t i = 0; i < MAX_REGISTRATION_RETRIES; i++) {
 800ae34:	3401      	adds	r4, #1
 800ae36:	b2e4      	uxtb	r4, r4
 800ae38:	e7e0      	b.n	800adfc <_ZL21wait_for_registrationP5bc95g+0x10>
        assert(status >= 0);
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	4619      	mov	r1, r3
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fa ffd7 	bl	8005df4 <__assert_func>
    return false;  //  Not registered after retries, quit.
 800ae46:	2200      	movs	r2, #0
}
 800ae48:	4610      	mov	r0, r2
 800ae4a:	b003      	add	sp, #12
 800ae4c:	bd30      	pop	{r4, r5, pc}

0800ae4e <_ZL17attach_to_networkP5bc95g>:
static bool attach_to_network(struct bc95g *dev) {
 800ae4e:	b510      	push	{r4, lr}
 800ae50:	4604      	mov	r4, r0
        wait_for_ok(dev) &&
 800ae52:	f7ff fe55 	bl	800ab00 <_ZL11wait_for_okP5bc95g>
        wait_for_attach(dev) &&
 800ae56:	4603      	mov	r3, r0
 800ae58:	b908      	cbnz	r0, 800ae5e <_ZL17attach_to_networkP5bc95g+0x10>
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	bd10      	pop	{r4, pc}
        send_command(dev, CFUN_QUERY) &&
 800ae5e:	2107      	movs	r1, #7
 800ae60:	4620      	mov	r0, r4
 800ae62:	f7ff fea5 	bl	800abb0 <_ZL12send_commandP5bc95g9CommandId>
        wait_for_ok(dev) &&
 800ae66:	4603      	mov	r3, r0
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d0f6      	beq.n	800ae5a <_ZL17attach_to_networkP5bc95g+0xc>
        send_command(dev, CFUN_ENABLE) &&
 800ae6c:	2105      	movs	r1, #5
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f7ff fe9e 	bl	800abb0 <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, CFUN_QUERY) &&
 800ae74:	4603      	mov	r3, r0
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d0ef      	beq.n	800ae5a <_ZL17attach_to_networkP5bc95g+0xc>
        send_command(dev, CGATT) &&
 800ae7a:	210a      	movs	r1, #10
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f7ff fe97 	bl	800abb0 <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, CFUN_ENABLE) &&
 800ae82:	4603      	mov	r3, r0
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d0e8      	beq.n	800ae5a <_ZL17attach_to_networkP5bc95g+0xc>
        send_command(dev, CEREG) &&
 800ae88:	2108      	movs	r1, #8
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f7ff fe90 	bl	800abb0 <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, CGATT) &&
 800ae90:	4603      	mov	r3, r0
 800ae92:	2800      	cmp	r0, #0
 800ae94:	d0e1      	beq.n	800ae5a <_ZL17attach_to_networkP5bc95g+0xc>
        wait_for_registration(dev) &&
 800ae96:	4620      	mov	r0, r4
 800ae98:	f7ff ffa8 	bl	800adec <_ZL21wait_for_registrationP5bc95g>
        send_command(dev, CEREG) &&
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d0db      	beq.n	800ae5a <_ZL17attach_to_networkP5bc95g+0xc>
        wait_for_attach(dev) &&
 800aea2:	4620      	mov	r0, r4
 800aea4:	f7ff ff46 	bl	800ad34 <_ZL15wait_for_attachP5bc95g>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	e7d6      	b.n	800ae5a <_ZL17attach_to_networkP5bc95g+0xc>

0800aeac <_ZL8send_hexP5bc95gPKht>:

/// Send the data as hex digits.
static bool send_hex(struct bc95g *dev, const uint8_t *data, uint16_t size) {
 800aeac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeae:	b083      	sub	sp, #12
 800aeb0:	460f      	mov	r7, r1
 800aeb2:	4616      	mov	r6, r2
    console_dump(data, size); console_printf("\n");
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	f7f9 f800 	bl	8003ebc <console_dump>
 800aebc:	4810      	ldr	r0, [pc, #64]	; (800af00 <_ZL8send_hexP5bc95gPKht+0x54>)
 800aebe:	f7f9 f86d 	bl	8003f9c <console_printf>
    char hex[2];
    for (uint16_t i = 0; i < size; i++) {
 800aec2:	2400      	movs	r4, #0
 800aec4:	42b4      	cmp	r4, r6
 800aec6:	d215      	bcs.n	800aef4 <_ZL8send_hexP5bc95gPKht+0x48>
        uint8_t b = data[i];
 800aec8:	5d3d      	ldrb	r5, [r7, r4]
        hex[0] = nibble_to_hex(b >> 4);
 800aeca:	0928      	lsrs	r0, r5, #4
 800aecc:	f7ff fd4b 	bl	800a966 <_ZL13nibble_to_hexh>
 800aed0:	f88d 0004 	strb.w	r0, [sp, #4]
        hex[1] = nibble_to_hex(b & 0xf);
 800aed4:	f005 000f 	and.w	r0, r5, #15
 800aed8:	f7ff fd45 	bl	800a966 <_ZL13nibble_to_hexh>
 800aedc:	f88d 0005 	strb.w	r0, [sp, #5]
        int res = parser.write(hex, 2);
 800aee0:	2202      	movs	r2, #2
 800aee2:	a901      	add	r1, sp, #4
 800aee4:	4807      	ldr	r0, [pc, #28]	; (800af04 <_ZL8send_hexP5bc95gPKht+0x58>)
 800aee6:	f000 fb16 	bl	800b516 <_ZN8ATParser5writeEPKci>
        if (res <= 0) { return false; }
 800aeea:	2800      	cmp	r0, #0
 800aeec:	dd05      	ble.n	800aefa <_ZL8send_hexP5bc95gPKht+0x4e>
    for (uint16_t i = 0; i < size; i++) {
 800aeee:	3401      	adds	r4, #1
 800aef0:	b2a4      	uxth	r4, r4
 800aef2:	e7e7      	b.n	800aec4 <_ZL8send_hexP5bc95gPKht+0x18>
    }
    return true;
 800aef4:	2001      	movs	r0, #1
}
 800aef6:	b003      	add	sp, #12
 800aef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (res <= 0) { return false; }
 800aefa:	2000      	movs	r0, #0
 800aefc:	e7fb      	b.n	800aef6 <_ZL8send_hexP5bc95gPKht+0x4a>
 800aefe:	bf00      	nop
 800af00:	0800f75c 	.word	0x0800f75c
 800af04:	20002a84 	.word	0x20002a84

0800af08 <_ZL9send_dataP5bc95gPKhtP7os_mbuf>:

/// Send the `data` buffer if `data` is non-null, or the chain of mbufs.
static bool send_data(struct bc95g *dev, const uint8_t *data, uint16_t length, struct os_mbuf *mbuf) {
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	4606      	mov	r6, r0
 800af0c:	461c      	mov	r4, r3
    if (data && length > 0) {
 800af0e:	b101      	cbz	r1, 800af12 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0xa>
 800af10:	b99a      	cbnz	r2, 800af3a <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x32>
        //  Send the data buffer as hex digits.
        return send_hex(dev, data, length);
    }
    //  Send the mbuf chain.
    assert(mbuf);
 800af12:	b1b4      	cbz	r4, 800af42 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x3a>
    uint32_t chain_size = OS_MBUF_PKTLEN(mbuf);  //  Length of the mbuf chain.
    const char *_f = "send mbuf";
    console_printf("%s%s %u...\n", _nbt, _f, (unsigned) chain_size);  console_flush();
 800af14:	8a23      	ldrh	r3, [r4, #16]
 800af16:	4a11      	ldr	r2, [pc, #68]	; (800af5c <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x54>)
 800af18:	4911      	ldr	r1, [pc, #68]	; (800af60 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x58>)
 800af1a:	6809      	ldr	r1, [r1, #0]
 800af1c:	4811      	ldr	r0, [pc, #68]	; (800af64 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x5c>)
 800af1e:	f7f9 f83d 	bl	8003f9c <console_printf>
 800af22:	f7f8 ff33 	bl	8003d8c <console_flush>
    struct os_mbuf *m = mbuf;
    bool result = true;
    while (m) {  //  Send each mbuf in the chain.
 800af26:	b194      	cbz	r4, 800af4e <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x46>
        const uint8_t *data = OS_MBUF_DATA(m, const uint8_t *);  //  Fetch the mbuf data.
        uint16_t size = m->om_len;  //  Fetch the size for the single mbuf.
        bool res = send_hex(dev, data, size);
 800af28:	88e2      	ldrh	r2, [r4, #6]
 800af2a:	6821      	ldr	r1, [r4, #0]
 800af2c:	4630      	mov	r0, r6
 800af2e:	f7ff ffbd 	bl	800aeac <_ZL8send_hexP5bc95gPKht>
        if (!res) { result = false; break; }
 800af32:	4605      	mov	r5, r0
 800af34:	b160      	cbz	r0, 800af50 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x48>
        m = m->om_next.sle_next;   //  Fetch next mbuf in the list.
 800af36:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  Send each mbuf in the chain.
 800af38:	e7f5      	b.n	800af26 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x1e>
        return send_hex(dev, data, length);
 800af3a:	f7ff ffb7 	bl	800aeac <_ZL8send_hexP5bc95gPKht>
 800af3e:	4605      	mov	r5, r0
 800af40:	e00a      	b.n	800af58 <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x50>
    assert(mbuf);
 800af42:	2300      	movs	r3, #0
 800af44:	461a      	mov	r2, r3
 800af46:	4619      	mov	r1, r3
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fa ff53 	bl	8005df4 <__assert_func>
    bool result = true;
 800af4e:	2501      	movs	r5, #1
    }
    _log(_f, result);
 800af50:	4629      	mov	r1, r5
 800af52:	4802      	ldr	r0, [pc, #8]	; (800af5c <_ZL9send_dataP5bc95gPKhtP7os_mbuf+0x54>)
 800af54:	f000 fa9a 	bl	800b48c <_log>
    return result;
}
 800af58:	4628      	mov	r0, r5
 800af5a:	bd70      	pop	{r4, r5, r6, pc}
 800af5c:	0800f83c 	.word	0x0800f83c
 800af60:	200001fc 	.word	0x200001fc
 800af64:	0800f848 	.word	0x0800f848

0800af68 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf>:

/// Transmit the `data` buffer if `data` is non-null, or the chain of mbufs.  Return number of bytes sent.
static int send_tx_command(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, 
    const uint8_t *data, uint16_t length, uint8_t sequence, struct os_mbuf *mbuf) {
 800af68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af6c:	b086      	sub	sp, #24
 800af6e:	4606      	mov	r6, r0
 800af70:	4617      	mov	r7, r2
 800af72:	4698      	mov	r8, r3
 800af74:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
    uint16_t local_port = socket->local_port;
 800af78:	880d      	ldrh	r5, [r1, #0]
    int local_port_response = -1, length_response = -1;
 800af7a:	f04f 31ff 	mov.w	r1, #4294967295
 800af7e:	9105      	str	r1, [sp, #20]
 800af80:	9104      	str	r1, [sp, #16]
#ifdef TRANSMIT_FLAGS
    console_printf("AT> NSOSTF=%d,%s,%d,%s,%d,\n", local_port, host, port, TRANSMIT_FLAGS, length);
 800af82:	9401      	str	r4, [sp, #4]
 800af84:	4922      	ldr	r1, [pc, #136]	; (800b010 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xa8>)
 800af86:	9100      	str	r1, [sp, #0]
 800af88:	4629      	mov	r1, r5
 800af8a:	4822      	ldr	r0, [pc, #136]	; (800b014 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xac>)
 800af8c:	f7f9 f806 	bl	8003f9c <console_printf>
#else
    console_printf("AT> NSOST=%d,%s,%d,%d,\n",     local_port, host, port, length);
#endif  //  TRANSMIT_FLAGS
    internal_timeout(BC95G_SEND_TIMEOUT);
 800af90:	f242 7010 	movw	r0, #10000	; 0x2710
 800af94:	f7ff fcde 	bl	800a954 <_ZL16internal_timeoutm>
    bool res = (
        send_atp(dev) &&  //  Will pause between commands.
 800af98:	4630      	mov	r0, r6
 800af9a:	f7ff fdf9 	bl	800ab90 <_ZL8send_atpP5bc95g>
        parser.printf("NSOST=%d,%s,%d,%d,",
            local_port, host, port, length) &&
#endif  //  TRANSMIT_FLAGS
        send_data(dev, data, length, mbuf) &&
        parser.send(",%d", sequence) &&
        parser.recv("%d,%d", &local_port_response, &length_response) &&
 800af9e:	b920      	cbnz	r0, 800afaa <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x42>
        parser.recv("OK")
    );
    return res ? length : 0;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	b006      	add	sp, #24
 800afa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        parser.printf("NSOSTF=%d,%s,%d,%s,%d,",
 800afaa:	9402      	str	r4, [sp, #8]
 800afac:	4b18      	ldr	r3, [pc, #96]	; (800b010 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xa8>)
 800afae:	9301      	str	r3, [sp, #4]
 800afb0:	f8cd 8000 	str.w	r8, [sp]
 800afb4:	463b      	mov	r3, r7
 800afb6:	462a      	mov	r2, r5
 800afb8:	4917      	ldr	r1, [pc, #92]	; (800b018 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xb0>)
 800afba:	4818      	ldr	r0, [pc, #96]	; (800b01c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xb4>)
 800afbc:	f000 fc04 	bl	800b7c8 <_ZN8ATParser6printfEPKcz>
        send_atp(dev) &&  //  Will pause between commands.
 800afc0:	4603      	mov	r3, r0
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d0ed      	beq.n	800afa2 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x3a>
        send_data(dev, data, length, mbuf) &&
 800afc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afc8:	4622      	mov	r2, r4
 800afca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800afcc:	4630      	mov	r0, r6
 800afce:	f7ff ff9b 	bl	800af08 <_ZL9send_dataP5bc95gPKhtP7os_mbuf>
            local_port, host, port, TRANSMIT_FLAGS, length) &&
 800afd2:	b908      	cbnz	r0, 800afd8 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x70>
    return res ? length : 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	e7e4      	b.n	800afa2 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x3a>
        parser.send(",%d", sequence) &&
 800afd8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 800afdc:	4910      	ldr	r1, [pc, #64]	; (800b020 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xb8>)
 800afde:	480f      	ldr	r0, [pc, #60]	; (800b01c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xb4>)
 800afe0:	f000 fc00 	bl	800b7e4 <_ZN8ATParser4sendEPKcz>
        send_data(dev, data, length, mbuf) &&
 800afe4:	b908      	cbnz	r0, 800afea <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x82>
    return res ? length : 0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	e7db      	b.n	800afa2 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x3a>
        parser.recv("%d,%d", &local_port_response, &length_response) &&
 800afea:	ab04      	add	r3, sp, #16
 800afec:	aa05      	add	r2, sp, #20
 800afee:	490d      	ldr	r1, [pc, #52]	; (800b024 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xbc>)
 800aff0:	480a      	ldr	r0, [pc, #40]	; (800b01c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xb4>)
 800aff2:	f000 fc05 	bl	800b800 <_ZN8ATParser4recvEPKcz>
        parser.send(",%d", sequence) &&
 800aff6:	b908      	cbnz	r0, 800affc <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x94>
    return res ? length : 0;
 800aff8:	2300      	movs	r3, #0
 800affa:	e7d2      	b.n	800afa2 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x3a>
        parser.recv("OK")
 800affc:	490a      	ldr	r1, [pc, #40]	; (800b028 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xc0>)
 800affe:	4807      	ldr	r0, [pc, #28]	; (800b01c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xb4>)
 800b000:	f000 fbfe 	bl	800b800 <_ZN8ATParser4recvEPKcz>
        parser.recv("%d,%d", &local_port_response, &length_response) &&
 800b004:	b108      	cbz	r0, 800b00a <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0xa2>
    return res ? length : 0;
 800b006:	4623      	mov	r3, r4
 800b008:	e7cb      	b.n	800afa2 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x3a>
 800b00a:	2300      	movs	r3, #0
 800b00c:	e7c9      	b.n	800afa2 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf+0x3a>
 800b00e:	bf00      	nop
 800b010:	0800f7c4 	.word	0x0800f7c4
 800b014:	0800f7a8 	.word	0x0800f7a8
 800b018:	0800f7cc 	.word	0x0800f7cc
 800b01c:	20002a84 	.word	0x20002a84
 800b020:	0800f7e4 	.word	0x0800f7e4
 800b024:	0800f7e8 	.word	0x0800f7e8
 800b028:	0800f838 	.word	0x0800f838

0800b02c <bc95g_init>:
int bc95g_init(struct os_dev *dev0, void *arg) {
 800b02c:	b508      	push	{r3, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 800b02e:	b189      	cbz	r1, 800b054 <bc95g_init+0x28>
 800b030:	b198      	cbz	r0, 800b05a <bc95g_init+0x2e>
    OS_DEV_SETHANDLERS(dev0, bc95g_open, bc95g_close);
 800b032:	4b0b      	ldr	r3, [pc, #44]	; (800b060 <bc95g_init+0x34>)
 800b034:	6003      	str	r3, [r0, #0]
 800b036:	4b0b      	ldr	r3, [pc, #44]	; (800b064 <bc95g_init+0x38>)
 800b038:	60c3      	str	r3, [r0, #12]
    rc = sensor_network_register_interface(&network_iface);
 800b03a:	480b      	ldr	r0, [pc, #44]	; (800b068 <bc95g_init+0x3c>)
 800b03c:	f7f9 fbfe 	bl	800483c <sensor_network_register_interface>
    assert(rc == 0);
 800b040:	4603      	mov	r3, r0
 800b042:	b908      	cbnz	r0, 800b048 <bc95g_init+0x1c>
}
 800b044:	4618      	mov	r0, r3
 800b046:	bd08      	pop	{r3, pc}
    assert(rc == 0);
 800b048:	2300      	movs	r3, #0
 800b04a:	461a      	mov	r2, r3
 800b04c:	4619      	mov	r1, r3
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fa fed0 	bl	8005df4 <__assert_func>
    return rc;
 800b054:	f06f 0308 	mvn.w	r3, #8
 800b058:	e7f4      	b.n	800b044 <bc95g_init+0x18>
 800b05a:	f06f 0308 	mvn.w	r3, #8
 800b05e:	e7f1      	b.n	800b044 <bc95g_init+0x18>
 800b060:	0800aa5d 	.word	0x0800aa5d
 800b064:	0800a9b9 	.word	0x0800a9b9
 800b068:	0800f794 	.word	0x0800f794

0800b06c <bc95g_default_cfg>:
    memset(cfg, 0, sizeof(struct bc95g_cfg));  //  Zero the entire object.
 800b06c:	2300      	movs	r3, #0
 800b06e:	6043      	str	r3, [r0, #4]
 800b070:	6083      	str	r3, [r0, #8]
 800b072:	60c3      	str	r3, [r0, #12]
    cfg->uart = 0;  //  Default to UART number 0, which is UART2.
 800b074:	6003      	str	r3, [r0, #0]
}
 800b076:	4618      	mov	r0, r3
 800b078:	4770      	bx	lr

0800b07a <bc95g_config>:
}
 800b07a:	2000      	movs	r0, #0
 800b07c:	4770      	bx	lr

0800b07e <bc95g_connect>:
int bc95g_connect(struct bc95g *dev) {
 800b07e:	b510      	push	{r4, lr}
 800b080:	4604      	mov	r4, r0
    internal_timeout(BC95G_CONNECT_TIMEOUT);
 800b082:	f242 7010 	movw	r0, #10000	; 0x2710
 800b086:	f7ff fc65 	bl	800a954 <_ZL16internal_timeoutm>
        prepare_to_transmit(dev)
 800b08a:	4620      	mov	r0, r4
 800b08c:	f7ff fdc8 	bl	800ac20 <_ZL19prepare_to_transmitP5bc95g>
    ) ? 0 : dev->last_error;
 800b090:	b908      	cbnz	r0, 800b096 <bc95g_connect+0x18>
 800b092:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800b094:	bd10      	pop	{r4, pc}
    ) ? 0 : dev->last_error;
 800b096:	2000      	movs	r0, #0
 800b098:	e7fc      	b.n	800b094 <bc95g_connect+0x16>

0800b09a <bc95g_attach>:
int bc95g_attach(struct bc95g *dev) {
 800b09a:	b510      	push	{r4, lr}
 800b09c:	4604      	mov	r4, r0
    internal_timeout(BC95G_CONNECT_TIMEOUT);
 800b09e:	f242 7010 	movw	r0, #10000	; 0x2710
 800b0a2:	f7ff fc57 	bl	800a954 <_ZL16internal_timeoutm>
        attach_to_network(dev)
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f7ff fed1 	bl	800ae4e <_ZL17attach_to_networkP5bc95g>
    ) ? 0 : dev->last_error;
 800b0ac:	b908      	cbnz	r0, 800b0b2 <bc95g_attach+0x18>
 800b0ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800b0b0:	bd10      	pop	{r4, pc}
    ) ? 0 : dev->last_error;
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	e7fc      	b.n	800b0b0 <bc95g_attach+0x16>

0800b0b6 <bc95g_detach>:
int bc95g_detach(struct bc95g *dev) {
 800b0b6:	b510      	push	{r4, lr}
 800b0b8:	4604      	mov	r4, r0
    internal_timeout(BC95G_CONNECT_TIMEOUT);
 800b0ba:	f242 7010 	movw	r0, #10000	; 0x2710
 800b0be:	f7ff fc49 	bl	800a954 <_ZL16internal_timeoutm>
        send_command(dev, CFUN_DISABLE)
 800b0c2:	2106      	movs	r1, #6
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f7ff fd73 	bl	800abb0 <_ZL12send_commandP5bc95g9CommandId>
    ) ? 0 : dev->last_error;
 800b0ca:	b908      	cbnz	r0, 800b0d0 <bc95g_detach+0x1a>
 800b0cc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800b0ce:	bd10      	pop	{r4, pc}
    ) ? 0 : dev->last_error;
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	e7fc      	b.n	800b0ce <bc95g_detach+0x18>

0800b0d4 <bc95g_socket_open>:
int bc95g_socket_open(struct bc95g *dev, struct bc95g_socket **socket_ptr) {
 800b0d4:	b570      	push	{r4, r5, r6, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	4605      	mov	r5, r0
 800b0da:	460e      	mov	r6, r1
    int local_port = 0;
 800b0dc:	ac02      	add	r4, sp, #8
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f844 3d04 	str.w	r3, [r4, #-4]!
    internal_timeout(BC95G_MISC_TIMEOUT);
 800b0e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b0e8:	f7ff fc34 	bl	800a954 <_ZL16internal_timeoutm>
    bool res = send_query_int(dev, NSOCR, &local_port);
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	210c      	movs	r1, #12
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	f7ff fe49 	bl	800ad88 <_ZL14send_query_intP5bc95g9CommandIdPi>
    if (!res) { return dev->last_error; }
 800b0f6:	b158      	cbz	r0, 800b110 <bc95g_socket_open+0x3c>
    assert(local_port > 0);
 800b0f8:	9c01      	ldr	r4, [sp, #4]
 800b0fa:	2c00      	cmp	r4, #0
 800b0fc:	dd0a      	ble.n	800b114 <bc95g_socket_open+0x40>
    bc95g_socket *socket = &cfg(dev)->sockets[0];
 800b0fe:	4628      	mov	r0, r5
 800b100:	f7ff fc2e 	bl	800a960 <_ZL3cfgP5bc95g>
 800b104:	1d03      	adds	r3, r0, #4
    socket->local_port = (uint16_t) local_port;
 800b106:	8084      	strh	r4, [r0, #4]
    *socket_ptr = socket;
 800b108:	6033      	str	r3, [r6, #0]
    return 0;
 800b10a:	2000      	movs	r0, #0
}
 800b10c:	b002      	add	sp, #8
 800b10e:	bd70      	pop	{r4, r5, r6, pc}
    if (!res) { return dev->last_error; }
 800b110:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800b112:	e7fb      	b.n	800b10c <bc95g_socket_open+0x38>
    assert(local_port > 0);
 800b114:	2300      	movs	r3, #0
 800b116:	461a      	mov	r2, r3
 800b118:	4619      	mov	r1, r3
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fa fe6a 	bl	8005df4 <__assert_func>

0800b120 <bc95g_socket_close>:
int bc95g_socket_close(struct bc95g *dev, struct bc95g_socket *socket) {
 800b120:	b538      	push	{r3, r4, r5, lr}
    assert(socket && socket == &cfg(dev)->sockets[0]);
 800b122:	b199      	cbz	r1, 800b14c <bc95g_socket_close+0x2c>
 800b124:	4605      	mov	r5, r0
 800b126:	460c      	mov	r4, r1
 800b128:	f7ff fc1a 	bl	800a960 <_ZL3cfgP5bc95g>
 800b12c:	3004      	adds	r0, #4
 800b12e:	42a0      	cmp	r0, r4
 800b130:	d10c      	bne.n	800b14c <bc95g_socket_close+0x2c>
    internal_timeout(BC95G_MISC_TIMEOUT);
 800b132:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b136:	f7ff fc0d 	bl	800a954 <_ZL16internal_timeoutm>
    int local_port = socket->local_port;
 800b13a:	8822      	ldrh	r2, [r4, #0]
    assert(local_port > 0);
 800b13c:	b162      	cbz	r2, 800b158 <bc95g_socket_close+0x38>
    bool res = send_command_int(dev, NSOCL, local_port);
 800b13e:	210e      	movs	r1, #14
 800b140:	4628      	mov	r0, r5
 800b142:	f7ff fd51 	bl	800abe8 <_ZL16send_command_intP5bc95g9CommandIdi>
    if (!res) { return dev->last_error; }
 800b146:	b968      	cbnz	r0, 800b164 <bc95g_socket_close+0x44>
 800b148:	6b68      	ldr	r0, [r5, #52]	; 0x34
}
 800b14a:	bd38      	pop	{r3, r4, r5, pc}
    assert(socket && socket == &cfg(dev)->sockets[0]);
 800b14c:	2300      	movs	r3, #0
 800b14e:	461a      	mov	r2, r3
 800b150:	4619      	mov	r1, r3
 800b152:	4618      	mov	r0, r3
 800b154:	f7fa fe4e 	bl	8005df4 <__assert_func>
    assert(local_port > 0);
 800b158:	2300      	movs	r3, #0
 800b15a:	461a      	mov	r2, r3
 800b15c:	4619      	mov	r1, r3
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fa fe48 	bl	8005df4 <__assert_func>
    memset(socket, 0, sizeof(bc95g_socket));
 800b164:	2000      	movs	r0, #0
 800b166:	6020      	str	r0, [r4, #0]
 800b168:	6060      	str	r0, [r4, #4]
 800b16a:	60a0      	str	r0, [r4, #8]
    return 0;
 800b16c:	e7ed      	b.n	800b14a <bc95g_socket_close+0x2a>

0800b16e <bc95g_socket_tx_mbuf>:
int bc95g_socket_tx(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, const uint8_t *data, uint16_t length, uint8_t sequence) {
    //  Transmit the buffer through the socket.  `length` is the number of bytes in `data`.  `sequence` is a running message sequence number 1 to 255.  Return number of bytes transmitted.
    return send_tx_command(dev, socket, host, port, data, length, sequence, NULL);
}

int bc95g_socket_tx_mbuf(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, uint8_t sequence, struct os_mbuf *mbuf) {
 800b16e:	b530      	push	{r4, r5, lr}
 800b170:	b085      	sub	sp, #20
 800b172:	9c09      	ldr	r4, [sp, #36]	; 0x24
    //  Transmit the chain of mbufs through the socket.  `sequence` is a running message sequence number 1 to 255.  Return number of bytes transmitted.
    uint16_t length = OS_MBUF_PKTLEN(mbuf);  //  Length of the mbuf chain.
 800b174:	8a25      	ldrh	r5, [r4, #16]
    return send_tx_command(dev, socket, host, port, NULL, length, sequence, mbuf);
 800b176:	9403      	str	r4, [sp, #12]
 800b178:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800b17c:	9402      	str	r4, [sp, #8]
 800b17e:	9501      	str	r5, [sp, #4]
 800b180:	2400      	movs	r4, #0
 800b182:	9400      	str	r4, [sp, #0]
 800b184:	f7ff fef0 	bl	800af68 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf>
}
 800b188:	b005      	add	sp, #20
 800b18a:	bd30      	pop	{r4, r5, pc}

0800b18c <_ZL10oc_ep_sizePK11oc_endpoint>:
}

static uint8_t oc_ep_size(const struct oc_endpoint *oe) {
    //  Return the size of the endpoint.  OIC will allocate space to store this endpoint in the transmitted mbuf.
    return sizeof(struct bc95g_endpoint);
}
 800b18c:	200c      	movs	r0, #12
 800b18e:	4770      	bx	lr

0800b190 <_ZL14oc_ep_has_connPK11oc_endpoint>:

static int oc_ep_has_conn(const struct oc_endpoint *oe) {
    //  Return true if the endpoint is connected.  We always return false.
    //  console_printf("oc_ep_has_conn\n");
    return 0;
}
 800b190:	2000      	movs	r0, #0
 800b192:	4770      	bx	lr

0800b194 <_ZL7oc_initv>:

static int oc_init(void) {
    //  Init the endpoint.
    //  console_printf("oc_init\n");
    return 0;
}
 800b194:	2000      	movs	r0, #0
 800b196:	4770      	bx	lr

0800b198 <_ZL11oc_shutdownv>:

static void oc_shutdown(void) {
    //  Shutdown the endpoint.
    //  console_printf("oc_shutdown\n");
}
 800b198:	4770      	bx	lr
	...

0800b19c <_ZL9oc_ep_strPciPK11oc_endpoint>:
static char *oc_ep_str(char *ptr, int maxlen, const struct oc_endpoint *oe) {
 800b19c:	b510      	push	{r4, lr}
 800b19e:	4604      	mov	r4, r0
    console_printf("NBT str\n");
 800b1a0:	4806      	ldr	r0, [pc, #24]	; (800b1bc <_ZL9oc_ep_strPciPK11oc_endpoint+0x20>)
 800b1a2:	f7f8 fefb 	bl	8003f9c <console_printf>
    strcpy(ptr, "TODO:oc_ep_str");
 800b1a6:	4b06      	ldr	r3, [pc, #24]	; (800b1c0 <_ZL9oc_ep_strPciPK11oc_endpoint+0x24>)
 800b1a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b1aa:	6020      	str	r0, [r4, #0]
 800b1ac:	6061      	str	r1, [r4, #4]
 800b1ae:	60a2      	str	r2, [r4, #8]
 800b1b0:	881a      	ldrh	r2, [r3, #0]
 800b1b2:	789b      	ldrb	r3, [r3, #2]
 800b1b4:	81a2      	strh	r2, [r4, #12]
 800b1b6:	73a3      	strb	r3, [r4, #14]
}
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	bd10      	pop	{r4, pc}
 800b1bc:	0800f914 	.word	0x0800f914
 800b1c0:	0800f920 	.word	0x0800f920

0800b1c4 <_ZL11oc_tx_ucastP7os_mbuf>:
static void oc_tx_ucast(struct os_mbuf *m) {
 800b1c4:	b530      	push	{r4, r5, lr}
 800b1c6:	b085      	sub	sp, #20
    assert(m);  assert(OS_MBUF_USRHDR_LEN(m) >= sizeof(struct bc95g_endpoint));
 800b1c8:	2800      	cmp	r0, #0
 800b1ca:	d06c      	beq.n	800b2a6 <_ZL11oc_tx_ucastP7os_mbuf+0xe2>
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	7943      	ldrb	r3, [r0, #5]
 800b1d0:	3b08      	subs	r3, #8
 800b1d2:	2b0b      	cmp	r3, #11
 800b1d4:	d96d      	bls.n	800b2b2 <_ZL11oc_tx_ucastP7os_mbuf+0xee>
    assert(endpoint);  assert(endpoint->host);  assert(endpoint->port);  //  Host and endpoint should be in the endpoint.
 800b1d6:	f110 0f18 	cmn.w	r0, #24
 800b1da:	d070      	beq.n	800b2be <_ZL11oc_tx_ucastP7os_mbuf+0xfa>
 800b1dc:	69c1      	ldr	r1, [r0, #28]
 800b1de:	2900      	cmp	r1, #0
 800b1e0:	d073      	beq.n	800b2ca <_ZL11oc_tx_ucastP7os_mbuf+0x106>
 800b1e2:	8c02      	ldrh	r2, [r0, #32]
 800b1e4:	2a00      	cmp	r2, #0
 800b1e6:	d076      	beq.n	800b2d6 <_ZL11oc_tx_ucastP7os_mbuf+0x112>
    assert(server);  assert(endpoint->host == server->endpoint.host);  assert(endpoint->port == server->endpoint.port);  //  We only support 1 server connection. Must match the message endpoint.
 800b1e8:	4b5e      	ldr	r3, [pc, #376]	; (800b364 <_ZL11oc_tx_ucastP7os_mbuf+0x1a0>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d078      	beq.n	800b2e2 <_ZL11oc_tx_ucastP7os_mbuf+0x11e>
 800b1f0:	6858      	ldr	r0, [r3, #4]
 800b1f2:	4281      	cmp	r1, r0
 800b1f4:	d17a      	bne.n	800b2ec <_ZL11oc_tx_ucastP7os_mbuf+0x128>
 800b1f6:	891b      	ldrh	r3, [r3, #8]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d17d      	bne.n	800b2f8 <_ZL11oc_tx_ucastP7os_mbuf+0x134>
    assert(network_device);
 800b1fc:	4b5a      	ldr	r3, [pc, #360]	; (800b368 <_ZL11oc_tx_ucastP7os_mbuf+0x1a4>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d07f      	beq.n	800b304 <_ZL11oc_tx_ucastP7os_mbuf+0x140>
    sequence++;
 800b204:	4a59      	ldr	r2, [pc, #356]	; (800b36c <_ZL11oc_tx_ucastP7os_mbuf+0x1a8>)
 800b206:	7813      	ldrb	r3, [r2, #0]
 800b208:	3301      	adds	r3, #1
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	7013      	strb	r3, [r2, #0]
    if (sequence == 0) { sequence = 1; }
 800b20e:	b913      	cbnz	r3, 800b216 <_ZL11oc_tx_ucastP7os_mbuf+0x52>
 800b210:	4613      	mov	r3, r2
 800b212:	2201      	movs	r2, #1
 800b214:	701a      	strb	r2, [r3, #0]
    hal_gpio_toggle(LED_BLINK_PIN);
 800b216:	202d      	movs	r0, #45	; 0x2d
 800b218:	f7fe fa10 	bl	800963c <hal_gpio_toggle>
        network_is_busy = 1;  //  Tell the Task Scheduler not to sleep (because it causes dropped UART response)
 800b21c:	4b54      	ldr	r3, [pc, #336]	; (800b370 <_ZL11oc_tx_ucastP7os_mbuf+0x1ac>)
 800b21e:	2201      	movs	r2, #1
 800b220:	601a      	str	r2, [r3, #0]
        struct bc95g *dev = (struct bc95g *) os_dev_open(network_device, OS_TIMEOUT_NEVER, NULL);  //  network_device is `bc95g_0`
 800b222:	2200      	movs	r2, #0
 800b224:	f04f 31ff 	mov.w	r1, #4294967295
 800b228:	4b4f      	ldr	r3, [pc, #316]	; (800b368 <_ZL11oc_tx_ucastP7os_mbuf+0x1a4>)
 800b22a:	6818      	ldr	r0, [r3, #0]
 800b22c:	f7fb f8b4 	bl	8006398 <os_dev_open>
        assert(dev != NULL);
 800b230:	4605      	mov	r5, r0
 800b232:	2800      	cmp	r0, #0
 800b234:	d06b      	beq.n	800b30e <_ZL11oc_tx_ucastP7os_mbuf+0x14a>
        console_printf("NBT send udp\n");
 800b236:	484f      	ldr	r0, [pc, #316]	; (800b374 <_ZL11oc_tx_ucastP7os_mbuf+0x1b0>)
 800b238:	f7f8 feb0 	bl	8003f9c <console_printf>
        rc = bc95g_attach(dev);
 800b23c:	4628      	mov	r0, r5
 800b23e:	f7ff ff2c 	bl	800b09a <bc95g_attach>
        assert(rc == 0);
 800b242:	2800      	cmp	r0, #0
 800b244:	d169      	bne.n	800b31a <_ZL11oc_tx_ucastP7os_mbuf+0x156>
        bc95g_socket *socket = NULL;
 800b246:	a904      	add	r1, sp, #16
 800b248:	2300      	movs	r3, #0
 800b24a:	f841 3d04 	str.w	r3, [r1, #-4]!
        rc = bc95g_socket_open(dev, &socket);
 800b24e:	4628      	mov	r0, r5
 800b250:	f7ff ff40 	bl	800b0d4 <bc95g_socket_open>
        assert(rc == 0);  assert(socket);
 800b254:	2800      	cmp	r0, #0
 800b256:	d166      	bne.n	800b326 <_ZL11oc_tx_ucastP7os_mbuf+0x162>
 800b258:	9903      	ldr	r1, [sp, #12]
 800b25a:	2900      	cmp	r1, #0
 800b25c:	d069      	beq.n	800b332 <_ZL11oc_tx_ucastP7os_mbuf+0x16e>
        rc = bc95g_socket_tx_mbuf(dev, socket, endpoint->host, endpoint->port, sequence, m);
 800b25e:	69e2      	ldr	r2, [r4, #28]
 800b260:	8c23      	ldrh	r3, [r4, #32]
 800b262:	4842      	ldr	r0, [pc, #264]	; (800b36c <_ZL11oc_tx_ucastP7os_mbuf+0x1a8>)
 800b264:	7800      	ldrb	r0, [r0, #0]
 800b266:	9401      	str	r4, [sp, #4]
 800b268:	9000      	str	r0, [sp, #0]
 800b26a:	4628      	mov	r0, r5
 800b26c:	f7ff ff7f 	bl	800b16e <bc95g_socket_tx_mbuf>
        assert(rc > 0);
 800b270:	2800      	cmp	r0, #0
 800b272:	dd64      	ble.n	800b33e <_ZL11oc_tx_ucastP7os_mbuf+0x17a>
        rc = bc95g_socket_close(dev, socket);
 800b274:	9903      	ldr	r1, [sp, #12]
 800b276:	4628      	mov	r0, r5
 800b278:	f7ff ff52 	bl	800b120 <bc95g_socket_close>
        assert(rc == 0);
 800b27c:	2800      	cmp	r0, #0
 800b27e:	d164      	bne.n	800b34a <_ZL11oc_tx_ucastP7os_mbuf+0x186>
        rc = bc95g_detach(dev);
 800b280:	4628      	mov	r0, r5
 800b282:	f7ff ff18 	bl	800b0b6 <bc95g_detach>
        os_dev_close((struct os_dev *) dev);
 800b286:	4628      	mov	r0, r5
 800b288:	f7fb f8a8 	bl	80063dc <os_dev_close>
        network_is_busy = 0;  //  Tell the Task Scheduler it's OK to sleep.
 800b28c:	4b38      	ldr	r3, [pc, #224]	; (800b370 <_ZL11oc_tx_ucastP7os_mbuf+0x1ac>)
 800b28e:	2200      	movs	r2, #0
 800b290:	601a      	str	r2, [r3, #0]
        network_has_transmitted = 1;
 800b292:	4b39      	ldr	r3, [pc, #228]	; (800b378 <_ZL11oc_tx_ucastP7os_mbuf+0x1b4>)
 800b294:	2201      	movs	r2, #1
 800b296:	601a      	str	r2, [r3, #0]
    rc = os_mbuf_free_chain(m);  assert(rc == 0);
 800b298:	4620      	mov	r0, r4
 800b29a:	f7fb f9dd 	bl	8006658 <os_mbuf_free_chain>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d159      	bne.n	800b356 <_ZL11oc_tx_ucastP7os_mbuf+0x192>
}
 800b2a2:	b005      	add	sp, #20
 800b2a4:	bd30      	pop	{r4, r5, pc}
    assert(m);  assert(OS_MBUF_USRHDR_LEN(m) >= sizeof(struct bc95g_endpoint));
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fa fda1 	bl	8005df4 <__assert_func>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fa fd9b 	bl	8005df4 <__assert_func>
    assert(endpoint);  assert(endpoint->host);  assert(endpoint->port);  //  Host and endpoint should be in the endpoint.
 800b2be:	2300      	movs	r3, #0
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fa fd95 	bl	8005df4 <__assert_func>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7fa fd8f 	bl	8005df4 <__assert_func>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	461a      	mov	r2, r3
 800b2da:	4619      	mov	r1, r3
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fa fd89 	bl	8005df4 <__assert_func>
    assert(server);  assert(endpoint->host == server->endpoint.host);  assert(endpoint->port == server->endpoint.port);  //  We only support 1 server connection. Must match the message endpoint.
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7fa fd84 	bl	8005df4 <__assert_func>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fa fd7e 	bl	8005df4 <__assert_func>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7fa fd78 	bl	8005df4 <__assert_func>
    assert(network_device);
 800b304:	461a      	mov	r2, r3
 800b306:	4619      	mov	r1, r3
 800b308:	4618      	mov	r0, r3
 800b30a:	f7fa fd73 	bl	8005df4 <__assert_func>
        assert(dev != NULL);
 800b30e:	2300      	movs	r3, #0
 800b310:	461a      	mov	r2, r3
 800b312:	4619      	mov	r1, r3
 800b314:	4618      	mov	r0, r3
 800b316:	f7fa fd6d 	bl	8005df4 <__assert_func>
        assert(rc == 0);
 800b31a:	2300      	movs	r3, #0
 800b31c:	461a      	mov	r2, r3
 800b31e:	4619      	mov	r1, r3
 800b320:	4618      	mov	r0, r3
 800b322:	f7fa fd67 	bl	8005df4 <__assert_func>
        assert(rc == 0);  assert(socket);
 800b326:	2300      	movs	r3, #0
 800b328:	461a      	mov	r2, r3
 800b32a:	4619      	mov	r1, r3
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fa fd61 	bl	8005df4 <__assert_func>
 800b332:	2300      	movs	r3, #0
 800b334:	461a      	mov	r2, r3
 800b336:	4619      	mov	r1, r3
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fa fd5b 	bl	8005df4 <__assert_func>
        assert(rc > 0);
 800b33e:	2300      	movs	r3, #0
 800b340:	461a      	mov	r2, r3
 800b342:	4619      	mov	r1, r3
 800b344:	4618      	mov	r0, r3
 800b346:	f7fa fd55 	bl	8005df4 <__assert_func>
        assert(rc == 0);
 800b34a:	2300      	movs	r3, #0
 800b34c:	461a      	mov	r2, r3
 800b34e:	4619      	mov	r1, r3
 800b350:	4618      	mov	r0, r3
 800b352:	f7fa fd4f 	bl	8005df4 <__assert_func>
    rc = os_mbuf_free_chain(m);  assert(rc == 0);
 800b356:	2300      	movs	r3, #0
 800b358:	461a      	mov	r2, r3
 800b35a:	4619      	mov	r1, r3
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fa fd49 	bl	8005df4 <__assert_func>
 800b362:	bf00      	nop
 800b364:	20002b14 	.word	0x20002b14
 800b368:	20002b10 	.word	0x20002b10
 800b36c:	20002b18 	.word	0x20002b18
 800b370:	20002568 	.word	0x20002568
 800b374:	0800f904 	.word	0x0800f904
 800b378:	20002564 	.word	0x20002564

0800b37c <init_bc95g_endpoint>:
int init_bc95g_endpoint(struct bc95g_endpoint *endpoint, const char *host, uint16_t port) {
 800b37c:	b410      	push	{r4}
    endpoint->ep.oe_type = transport_id;  //  Populate our transport ID so that OIC will call our functions.
 800b37e:	7803      	ldrb	r3, [r0, #0]
 800b380:	4c06      	ldr	r4, [pc, #24]	; (800b39c <init_bc95g_endpoint+0x20>)
 800b382:	7824      	ldrb	r4, [r4, #0]
 800b384:	f364 0302 	bfi	r3, r4, #0, #3
    endpoint->ep.oe_flags = 0;
 800b388:	f36f 03c7 	bfc	r3, #3, #5
 800b38c:	7003      	strb	r3, [r0, #0]
    if (host) { 
 800b38e:	b109      	cbz	r1, 800b394 <init_bc95g_endpoint+0x18>
        endpoint->host = host;
 800b390:	6041      	str	r1, [r0, #4]
        endpoint->port = port;
 800b392:	8102      	strh	r2, [r0, #8]
}
 800b394:	2000      	movs	r0, #0
 800b396:	bc10      	pop	{r4}
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop
 800b39c:	200001f9 	.word	0x200001f9

0800b3a0 <init_bc95g_server>:
int init_bc95g_server(struct bc95g_server *server, const char *host, uint16_t port) {
 800b3a0:	b510      	push	{r4, lr}
 800b3a2:	4604      	mov	r4, r0
    int rc = init_bc95g_endpoint(&server->endpoint, host, port);  assert(rc == 0);
 800b3a4:	f7ff ffea 	bl	800b37c <init_bc95g_endpoint>
 800b3a8:	b910      	cbnz	r0, 800b3b0 <init_bc95g_server+0x10>
    server->handle = (struct oc_server_handle *) server;
 800b3aa:	60e4      	str	r4, [r4, #12]
}
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	bd10      	pop	{r4, pc}
    int rc = init_bc95g_endpoint(&server->endpoint, host, port);  assert(rc == 0);
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7fa fd1c 	bl	8005df4 <__assert_func>

0800b3bc <bc95g_register_transport>:
int bc95g_register_transport(const char *network_device0, struct bc95g_server *server0, const char *host, uint16_t port) {
 800b3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(network_device0);  assert(server0);
 800b3c0:	b388      	cbz	r0, 800b426 <bc95g_register_transport+0x6a>
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	4617      	mov	r7, r2
 800b3c6:	4698      	mov	r8, r3
 800b3c8:	4605      	mov	r5, r0
 800b3ca:	b391      	cbz	r1, 800b432 <bc95g_register_transport+0x76>
        network_is_busy = 1;  //  Tell the Task Scheduler not to sleep (because it causes dropped UART response)
 800b3cc:	4b25      	ldr	r3, [pc, #148]	; (800b464 <bc95g_register_transport+0xa8>)
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]
        struct bc95g *dev = (struct bc95g *) os_dev_open(network_device0, OS_TIMEOUT_NEVER, NULL);  //  BC95G_DEVICE is "bc95g_0"
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f04f 31ff 	mov.w	r1, #4294967295
 800b3d8:	f7fa ffde 	bl	8006398 <os_dev_open>
        assert(dev != NULL);
 800b3dc:	4606      	mov	r6, r0
 800b3de:	b370      	cbz	r0, 800b43e <bc95g_register_transport+0x82>
        transport_id = oc_transport_register(&transport);
 800b3e0:	4821      	ldr	r0, [pc, #132]	; (800b468 <bc95g_register_transport+0xac>)
 800b3e2:	f7f9 fec9 	bl	8005178 <oc_transport_register>
 800b3e6:	4b21      	ldr	r3, [pc, #132]	; (800b46c <bc95g_register_transport+0xb0>)
 800b3e8:	7018      	strb	r0, [r3, #0]
        int rc = init_bc95g_server(server0, host, port);
 800b3ea:	4642      	mov	r2, r8
 800b3ec:	4639      	mov	r1, r7
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f7ff ffd6 	bl	800b3a0 <init_bc95g_server>
        assert(rc == 0);
 800b3f4:	bb48      	cbnz	r0, 800b44a <bc95g_register_transport+0x8e>
        if (!power_standby_wakeup()) {
 800b3f6:	f7fc fd5f 	bl	8007eb8 <power_standby_wakeup>
 800b3fa:	b918      	cbnz	r0, 800b404 <bc95g_register_transport+0x48>
            rc = bc95g_connect(dev);
 800b3fc:	4630      	mov	r0, r6
 800b3fe:	f7ff fe3e 	bl	800b07e <bc95g_connect>
            assert(rc == 0);
 800b402:	bb40      	cbnz	r0, 800b456 <bc95g_register_transport+0x9a>
        network_device = network_device0;
 800b404:	4b1a      	ldr	r3, [pc, #104]	; (800b470 <bc95g_register_transport+0xb4>)
 800b406:	601d      	str	r5, [r3, #0]
        server = server0;
 800b408:	4b1a      	ldr	r3, [pc, #104]	; (800b474 <bc95g_register_transport+0xb8>)
 800b40a:	601c      	str	r4, [r3, #0]
        os_dev_close((struct os_dev *) dev);
 800b40c:	4630      	mov	r0, r6
 800b40e:	f7fa ffe5 	bl	80063dc <os_dev_close>
        network_is_busy = 0;  //  Tell the Task Scheduler it's OK to sleep.
 800b412:	2400      	movs	r4, #0
 800b414:	4b13      	ldr	r3, [pc, #76]	; (800b464 <bc95g_register_transport+0xa8>)
 800b416:	601c      	str	r4, [r3, #0]
    hal_gpio_init_out(LED_BLINK_PIN, 1);
 800b418:	2101      	movs	r1, #1
 800b41a:	202d      	movs	r0, #45	; 0x2d
 800b41c:	f7fe f8d6 	bl	80095cc <hal_gpio_init_out>
}
 800b420:	4620      	mov	r0, r4
 800b422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(network_device0);  assert(server0);
 800b426:	2300      	movs	r3, #0
 800b428:	461a      	mov	r2, r3
 800b42a:	4619      	mov	r1, r3
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7fa fce1 	bl	8005df4 <__assert_func>
 800b432:	2300      	movs	r3, #0
 800b434:	461a      	mov	r2, r3
 800b436:	4619      	mov	r1, r3
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fa fcdb 	bl	8005df4 <__assert_func>
        assert(dev != NULL);
 800b43e:	2300      	movs	r3, #0
 800b440:	461a      	mov	r2, r3
 800b442:	4619      	mov	r1, r3
 800b444:	4618      	mov	r0, r3
 800b446:	f7fa fcd5 	bl	8005df4 <__assert_func>
        assert(rc == 0);
 800b44a:	2300      	movs	r3, #0
 800b44c:	461a      	mov	r2, r3
 800b44e:	4619      	mov	r1, r3
 800b450:	4618      	mov	r0, r3
 800b452:	f7fa fccf 	bl	8005df4 <__assert_func>
            assert(rc == 0);
 800b456:	2300      	movs	r3, #0
 800b458:	461a      	mov	r2, r3
 800b45a:	4619      	mov	r1, r3
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fa fcc9 	bl	8005df4 <__assert_func>
 800b462:	bf00      	nop
 800b464:	20002568 	.word	0x20002568
 800b468:	0800f930 	.word	0x0800f930
 800b46c:	200001f9 	.word	0x200001f9
 800b470:	20002b10 	.word	0x20002b10
 800b474:	20002b14 	.word	0x20002b14

0800b478 <_okfailed>:

const char *_nbt = "NBT ";  //  Trailer for console output
int debug_bc95g = 0;

const char *_okfailed(int ok) {
    if (ok) { return " OK\n"; }
 800b478:	b908      	cbnz	r0, 800b47e <_okfailed+0x6>
    return " FAILED\n";
 800b47a:	4802      	ldr	r0, [pc, #8]	; (800b484 <_okfailed+0xc>)
}
 800b47c:	4770      	bx	lr
    if (ok) { return " OK\n"; }
 800b47e:	4802      	ldr	r0, [pc, #8]	; (800b488 <_okfailed+0x10>)
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	0800f964 	.word	0x0800f964
 800b488:	0800f95c 	.word	0x0800f95c

0800b48c <_log>:

void _log(const char *func, int ok) {
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4605      	mov	r5, r0
    console_printf("%s%s%s", _nbt, func, _okfailed(ok));
 800b490:	4b06      	ldr	r3, [pc, #24]	; (800b4ac <_log+0x20>)
 800b492:	681c      	ldr	r4, [r3, #0]
 800b494:	4608      	mov	r0, r1
 800b496:	f7ff ffef 	bl	800b478 <_okfailed>
 800b49a:	4603      	mov	r3, r0
 800b49c:	462a      	mov	r2, r5
 800b49e:	4621      	mov	r1, r4
 800b4a0:	4803      	ldr	r0, [pc, #12]	; (800b4b0 <_log+0x24>)
 800b4a2:	f7f8 fd7b 	bl	8003f9c <console_printf>
    console_flush();
 800b4a6:	f7f8 fc71 	bl	8003d8c <console_flush>
}
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	200001fc 	.word	0x200001fc
 800b4b0:	0800f954 	.word	0x0800f954

0800b4b4 <_ZN8ATParser4initER14BufferedSerialPciPKcib>:
//  e.g.  debug_if(dbg_on, "AT> %s\r\n", _buffer)
#define debug_if(dbg_on, format, arg) console_printf(format, arg)
//  #define debug_if(dbg_on, format, arg) {}

void ATParser::init(BufferedSerial &serial, char *buffer, int buffer_size, const char *delimiter, int timeout, bool debug)
{
 800b4b4:	b510      	push	{r4, lr}
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	9802      	ldr	r0, [sp, #8]
    _serial = &serial;
 800b4ba:	6021      	str	r1, [r4, #0]
    _buffer = buffer;
 800b4bc:	6062      	str	r2, [r4, #4]
    _buffer_size = buffer_size; 
 800b4be:	60a3      	str	r3, [r4, #8]
        _timeout = timeout;
 800b4c0:	9b03      	ldr	r3, [sp, #12]
 800b4c2:	60e3      	str	r3, [r4, #12]
        _delimiter = delimiter;
 800b4c4:	6120      	str	r0, [r4, #16]
        _delim_size = strlen(delimiter);
 800b4c6:	f7fc f95b 	bl	8007780 <strlen>
 800b4ca:	6160      	str	r0, [r4, #20]
        dbg_on = (on) ? 1 : 0;
 800b4cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800b4d0:	7623      	strb	r3, [r4, #24]
    setTimeout(timeout);
    setDelimiter(delimiter);
    debugOn(debug);
    for (int k = 0; k < MAX_OOBS; k++) { _oobs[k].len = 0; }  //  Init the callbacks.
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	dc05      	bgt.n	800b4e4 <_ZN8ATParser4initER14BufferedSerialPciPKcib+0x30>
 800b4d8:	eb04 1203 	add.w	r2, r4, r3, lsl #4
 800b4dc:	2100      	movs	r1, #0
 800b4de:	61d1      	str	r1, [r2, #28]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	e7f7      	b.n	800b4d4 <_ZN8ATParser4initER14BufferedSerialPciPKcib+0x20>
}
 800b4e4:	bd10      	pop	{r4, pc}

0800b4e6 <_ZN8ATParser4putcEc>:

// getc/putc handling with timeouts
int ATParser::putc(char c)
{
 800b4e6:	b508      	push	{r3, lr}
    //  TODO: Handle timeout.
    return _serial->putc(c);
 800b4e8:	6800      	ldr	r0, [r0, #0]
 800b4ea:	f000 fa98 	bl	800ba1e <_ZN14BufferedSerial4putcEi>
}
 800b4ee:	bd08      	pop	{r3, pc}

0800b4f0 <_ZN8ATParser5fgetcEv>:

int ATParser::getc()
{
 800b4f0:	b508      	push	{r3, lr}
    //  Return the next received byte.  If no data, block until the timeout.
    return _serial->getc(_timeout);
 800b4f2:	68c1      	ldr	r1, [r0, #12]
 800b4f4:	6800      	ldr	r0, [r0, #0]
 800b4f6:	f000 f9f1 	bl	800b8dc <_ZN14BufferedSerial5fgetcEi>
}
 800b4fa:	bd08      	pop	{r3, pc}

0800b4fc <_ZN8ATParser5flushEv>:

int ATParser::flush()
{
 800b4fc:	b510      	push	{r4, lr}
 800b4fe:	4604      	mov	r4, r0
    while (_serial->readable()) {
 800b500:	6820      	ldr	r0, [r4, #0]
 800b502:	f000 f9e5 	bl	800b8d0 <_ZN14BufferedSerial8readableEv>
 800b506:	b120      	cbz	r0, 800b512 <_ZN8ATParser5flushEv+0x16>
        _serial->getc(0);  //  Do not wait for data to be available.
 800b508:	2100      	movs	r1, #0
 800b50a:	6820      	ldr	r0, [r4, #0]
 800b50c:	f000 f9e6 	bl	800b8dc <_ZN14BufferedSerial5fgetcEi>
    while (_serial->readable()) {
 800b510:	e7f6      	b.n	800b500 <_ZN8ATParser5flushEv+0x4>
    }
    return 0;
}
 800b512:	2000      	movs	r0, #0
 800b514:	bd10      	pop	{r4, pc}

0800b516 <_ZN8ATParser5writeEPKci>:


// read/write handling with timeouts
int ATParser::write(const char *data, int size)
{
 800b516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b518:	4607      	mov	r7, r0
 800b51a:	460e      	mov	r6, r1
 800b51c:	4615      	mov	r5, r2
    int i = 0;
 800b51e:	2400      	movs	r4, #0
    for ( ; i < size; i++) {
 800b520:	42ac      	cmp	r4, r5
 800b522:	da09      	bge.n	800b538 <_ZN8ATParser5writeEPKci+0x22>
        if (putc(data[i]) < 0) {
 800b524:	5d31      	ldrb	r1, [r6, r4]
 800b526:	4638      	mov	r0, r7
 800b528:	f7ff ffdd 	bl	800b4e6 <_ZN8ATParser4putcEc>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	db01      	blt.n	800b534 <_ZN8ATParser5writeEPKci+0x1e>
    for ( ; i < size; i++) {
 800b530:	3401      	adds	r4, #1
 800b532:	e7f5      	b.n	800b520 <_ZN8ATParser5writeEPKci+0xa>
            return -1;
 800b534:	f04f 34ff 	mov.w	r4, #4294967295
        }
    }
    return i;
}
 800b538:	4620      	mov	r0, r4
 800b53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b53c <_ZN8ATParser7vprintfEPKcSt9__va_list>:
}


// printf/scanf handling
int ATParser::vprintf(const char *format, va_list args)
{
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4605      	mov	r5, r0
    if (vsprintf(_buffer, format, args) < 0) {
 800b540:	6840      	ldr	r0, [r0, #4]
 800b542:	f001 fed2 	bl	800d2ea <vsprintf>
 800b546:	2800      	cmp	r0, #0
 800b548:	db0a      	blt.n	800b560 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x24>
        return false;
    }
    int i = 0;
 800b54a:	2400      	movs	r4, #0
    for ( ; _buffer[i]; i++) {
 800b54c:	686b      	ldr	r3, [r5, #4]
 800b54e:	5d19      	ldrb	r1, [r3, r4]
 800b550:	b151      	cbz	r1, 800b568 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x2c>
        if (putc(_buffer[i]) < 0) {
 800b552:	4628      	mov	r0, r5
 800b554:	f7ff ffc7 	bl	800b4e6 <_ZN8ATParser4putcEc>
 800b558:	2800      	cmp	r0, #0
 800b55a:	db03      	blt.n	800b564 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x28>
    for ( ; _buffer[i]; i++) {
 800b55c:	3401      	adds	r4, #1
 800b55e:	e7f5      	b.n	800b54c <_ZN8ATParser7vprintfEPKcSt9__va_list+0x10>
        return false;
 800b560:	2400      	movs	r4, #0
 800b562:	e001      	b.n	800b568 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x2c>
            return -1;
 800b564:	f04f 34ff 	mov.w	r4, #4294967295
        }
    }
    return i;
}
 800b568:	4620      	mov	r0, r4
 800b56a:	bd38      	pop	{r3, r4, r5, pc}

0800b56c <_ZN8ATParser5vsendEPKcSt9__va_list>:
}


// Command parsing with line handling
bool ATParser::vsend(const char *command, va_list args)
{
 800b56c:	b538      	push	{r3, r4, r5, lr}
 800b56e:	4604      	mov	r4, r0
    // Create and send command
    if (vsprintf(_buffer, command, args) < 0) {
 800b570:	6840      	ldr	r0, [r0, #4]
 800b572:	f001 feba 	bl	800d2ea <vsprintf>
 800b576:	2800      	cmp	r0, #0
 800b578:	db1b      	blt.n	800b5b2 <_ZN8ATParser5vsendEPKcSt9__va_list+0x46>
        return false;
    }
    for (int i = 0; _buffer[i]; i++) {
 800b57a:	2500      	movs	r5, #0
 800b57c:	6863      	ldr	r3, [r4, #4]
 800b57e:	5d59      	ldrb	r1, [r3, r5]
 800b580:	b131      	cbz	r1, 800b590 <_ZN8ATParser5vsendEPKcSt9__va_list+0x24>
        if (putc(_buffer[i]) < 0) {
 800b582:	4620      	mov	r0, r4
 800b584:	f7ff ffaf 	bl	800b4e6 <_ZN8ATParser4putcEc>
 800b588:	2800      	cmp	r0, #0
 800b58a:	db14      	blt.n	800b5b6 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4a>
    for (int i = 0; _buffer[i]; i++) {
 800b58c:	3501      	adds	r5, #1
 800b58e:	e7f5      	b.n	800b57c <_ZN8ATParser5vsendEPKcSt9__va_list+0x10>
            return false;
        }
    }

    // Finish with newline
    for (int i = 0; _delimiter[i]; i++) {
 800b590:	2500      	movs	r5, #0
 800b592:	6923      	ldr	r3, [r4, #16]
 800b594:	5d59      	ldrb	r1, [r3, r5]
 800b596:	b131      	cbz	r1, 800b5a6 <_ZN8ATParser5vsendEPKcSt9__va_list+0x3a>
        if (putc(_delimiter[i]) < 0) {
 800b598:	4620      	mov	r0, r4
 800b59a:	f7ff ffa4 	bl	800b4e6 <_ZN8ATParser4putcEc>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	db0b      	blt.n	800b5ba <_ZN8ATParser5vsendEPKcSt9__va_list+0x4e>
    for (int i = 0; _delimiter[i]; i++) {
 800b5a2:	3501      	adds	r5, #1
 800b5a4:	e7f5      	b.n	800b592 <_ZN8ATParser5vsendEPKcSt9__va_list+0x26>
            return false;
        }
    }

    debug_if(dbg_on, "AT> %s\r\n", _buffer);
 800b5a6:	6861      	ldr	r1, [r4, #4]
 800b5a8:	4805      	ldr	r0, [pc, #20]	; (800b5c0 <_ZN8ATParser5vsendEPKcSt9__va_list+0x54>)
 800b5aa:	f7f8 fcf7 	bl	8003f9c <console_printf>
    return true;
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	e002      	b.n	800b5b8 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4c>
        return false;
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	e000      	b.n	800b5b8 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4c>
            return false;
 800b5b6:	2000      	movs	r0, #0
}
 800b5b8:	bd38      	pop	{r3, r4, r5, pc}
            return false;
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	e7fc      	b.n	800b5b8 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4c>
 800b5be:	bf00      	nop
 800b5c0:	0800f9e0 	.word	0x0800f9e0

0800b5c4 <_ZN8ATParser5vrecvEPKcSt9__va_list>:

bool ATParser::vrecv(const char *response, va_list args)
{
 800b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c8:	b087      	sub	sp, #28
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	460f      	mov	r7, r1
 800b5ce:	9201      	str	r2, [sp, #4]
    // Iterate through each line in the expected response
    while (response[0]) {
 800b5d0:	783b      	ldrb	r3, [r7, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 80e7 	beq.w	800b7a6 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e2>
        // Since response is const, we need to copy it into our buffer to
        // add the line's null terminator and clobber value-matches with asterisks.
        //
        // We just use the beginning of the buffer to avoid unnecessary allocations.
        int i = 0;
        int offset = 0;
 800b5d8:	f04f 0800 	mov.w	r8, #0
        int i = 0;
 800b5dc:	4644      	mov	r4, r8
 800b5de:	e004      	b.n	800b5ea <_ZN8ATParser5vrecvEPKcSt9__va_list+0x26>
            } else if (response[i] == '%' && response[i+1] != '%' && response[i+1] != '*') {
                _buffer[offset++] = '%';
                _buffer[offset++] = '*';
                i++;
            } else {
                _buffer[offset++] = response[i++];
 800b5e0:	686b      	ldr	r3, [r5, #4]
 800b5e2:	f803 6008 	strb.w	r6, [r3, r8]
 800b5e6:	f108 0801 	add.w	r8, r8, #1
        while (response[i]) {
 800b5ea:	46a1      	mov	r9, r4
 800b5ec:	5d3e      	ldrb	r6, [r7, r4]
 800b5ee:	b1e6      	cbz	r6, 800b62a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x66>
            if (memcmp(&response[i+1-_delim_size], _delimiter, _delim_size) == 0) {
 800b5f0:	3401      	adds	r4, #1
 800b5f2:	696a      	ldr	r2, [r5, #20]
 800b5f4:	1aa0      	subs	r0, r4, r2
 800b5f6:	6929      	ldr	r1, [r5, #16]
 800b5f8:	4438      	add	r0, r7
 800b5fa:	f7fc f867 	bl	80076cc <memcmp>
 800b5fe:	b1a0      	cbz	r0, 800b62a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x66>
            } else if (response[i] == '%' && response[i+1] != '%' && response[i+1] != '*') {
 800b600:	2e25      	cmp	r6, #37	; 0x25
 800b602:	d1ed      	bne.n	800b5e0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1c>
 800b604:	44b9      	add	r9, r7
 800b606:	f899 3001 	ldrb.w	r3, [r9, #1]
 800b60a:	2b25      	cmp	r3, #37	; 0x25
 800b60c:	d0e8      	beq.n	800b5e0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1c>
 800b60e:	2b2a      	cmp	r3, #42	; 0x2a
 800b610:	d0e6      	beq.n	800b5e0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1c>
                _buffer[offset++] = '%';
 800b612:	686a      	ldr	r2, [r5, #4]
 800b614:	f108 0301 	add.w	r3, r8, #1
 800b618:	2125      	movs	r1, #37	; 0x25
 800b61a:	f802 1008 	strb.w	r1, [r2, r8]
                _buffer[offset++] = '*';
 800b61e:	686a      	ldr	r2, [r5, #4]
 800b620:	212a      	movs	r1, #42	; 0x2a
 800b622:	54d1      	strb	r1, [r2, r3]
 800b624:	f108 0802 	add.w	r8, r8, #2
                i++;
 800b628:	e7df      	b.n	800b5ea <_ZN8ATParser5vrecvEPKcSt9__va_list+0x26>
        }

        // Scanf has very poor support for catching errors
        // fortunately, we can abuse the %n specifier to determine
        // if the entire string was matched.
        _buffer[offset++] = '%';
 800b62a:	686a      	ldr	r2, [r5, #4]
 800b62c:	f108 0301 	add.w	r3, r8, #1
 800b630:	2125      	movs	r1, #37	; 0x25
 800b632:	f802 1008 	strb.w	r1, [r2, r8]
        _buffer[offset++] = 'n';
 800b636:	6869      	ldr	r1, [r5, #4]
 800b638:	f108 0202 	add.w	r2, r8, #2
 800b63c:	206e      	movs	r0, #110	; 0x6e
 800b63e:	54c8      	strb	r0, [r1, r3]
        _buffer[offset++] = 0;
 800b640:	6869      	ldr	r1, [r5, #4]
 800b642:	f108 0603 	add.w	r6, r8, #3
 800b646:	2300      	movs	r3, #0
 800b648:	548b      	strb	r3, [r1, r2]
        // format string that only stores the matched characters (%n).
        // The other reads in the actual matched values.
        //
        // We keep trying the match until we succeed or some other error
        // derails us.
        int j = 0, last_count = -1; char *last_scan = _buffer;
 800b64a:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800b64e:	469b      	mov	fp, r3

        while (true) {
            // Receive next character
            int c = getc();
 800b650:	4628      	mov	r0, r5
 800b652:	f7ff ff4d 	bl	800b4f0 <_ZN8ATParser5fgetcEv>
            if (c < 0) {
 800b656:	f1b0 0800 	subs.w	r8, r0, #0
 800b65a:	da0a      	bge.n	800b672 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xae>
                console_printf("AT response mismatch: found \"%s\"\n   expected \"%s\"\n", last_scan, _buffer);  console_flush();
 800b65c:	686a      	ldr	r2, [r5, #4]
 800b65e:	4649      	mov	r1, r9
 800b660:	4852      	ldr	r0, [pc, #328]	; (800b7ac <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e8>)
 800b662:	f7f8 fc9b 	bl	8003f9c <console_printf>
 800b666:	f7f8 fb91 	bl	8003d8c <console_flush>
                ////asm("bkpt");
                return false;
 800b66a:	2000      	movs	r0, #0
            }
        }
    }

    return true;
}
 800b66c:	b007      	add	sp, #28
 800b66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            _buffer[offset + j++] = c;
 800b672:	686a      	ldr	r2, [r5, #4]
 800b674:	f10b 0a01 	add.w	sl, fp, #1
 800b678:	eb0b 0306 	add.w	r3, fp, r6
 800b67c:	f802 8003 	strb.w	r8, [r2, r3]
            _buffer[offset + j] = 0;
 800b680:	686b      	ldr	r3, [r5, #4]
 800b682:	eb06 020a 	add.w	r2, r6, sl
 800b686:	9202      	str	r2, [sp, #8]
 800b688:	f04f 0900 	mov.w	r9, #0
 800b68c:	f803 9002 	strb.w	r9, [r3, r2]
 800b690:	e001      	b.n	800b696 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xd2>
            for (int k = 0; k < MAX_OOBS; k++) {
 800b692:	f109 0901 	add.w	r9, r9, #1
 800b696:	f1b9 0f01 	cmp.w	r9, #1
 800b69a:	dc20      	bgt.n	800b6de <_ZN8ATParser5vrecvEPKcSt9__va_list+0x11a>
                if (_oobs[k].len == 0) { continue; }  //  Skip empty callbacks.
 800b69c:	eb05 1309 	add.w	r3, r5, r9, lsl #4
 800b6a0:	69da      	ldr	r2, [r3, #28]
 800b6a2:	2a00      	cmp	r2, #0
 800b6a4:	d0f5      	beq.n	800b692 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xce>
                if (
 800b6a6:	4552      	cmp	r2, sl
 800b6a8:	d1f3      	bne.n	800b692 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xce>
                    memcmp(_oobs[k].prefix, _buffer+offset, _oobs[k].len) == 0
 800b6aa:	6a1b      	ldr	r3, [r3, #32]
 800b6ac:	9303      	str	r3, [sp, #12]
 800b6ae:	6869      	ldr	r1, [r5, #4]
 800b6b0:	4431      	add	r1, r6
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fc f80a 	bl	80076cc <memcmp>
                    j == (int) _oobs[k].len && 
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d1ea      	bne.n	800b692 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xce>
                    debug_if(dbg_on, "AT! %s\r\n", _oobs[k].prefix);
 800b6bc:	9903      	ldr	r1, [sp, #12]
 800b6be:	483c      	ldr	r0, [pc, #240]	; (800b7b0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1ec>)
 800b6c0:	f7f8 fc6c 	bl	8003f9c <console_printf>
                    _oobs[k].cb(_oobs[k].arg);
 800b6c4:	f109 0302 	add.w	r3, r9, #2
 800b6c8:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800b6cc:	685a      	ldr	r2, [r3, #4]
 800b6ce:	6898      	ldr	r0, [r3, #8]
 800b6d0:	4790      	blx	r2
                    return vrecv(response, args);
 800b6d2:	9a01      	ldr	r2, [sp, #4]
 800b6d4:	4639      	mov	r1, r7
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f7ff ff74 	bl	800b5c4 <_ZN8ATParser5vrecvEPKcSt9__va_list>
 800b6dc:	e7c6      	b.n	800b66c <_ZN8ATParser5vrecvEPKcSt9__va_list+0xa8>
            int count = -1;
 800b6de:	aa06      	add	r2, sp, #24
 800b6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6e4:	f842 3d04 	str.w	r3, [r2, #-4]!
            sscanf(_buffer+offset, _buffer, &count);
 800b6e8:	6868      	ldr	r0, [r5, #4]
 800b6ea:	9603      	str	r6, [sp, #12]
 800b6ec:	4601      	mov	r1, r0
 800b6ee:	4430      	add	r0, r6
 800b6f0:	f001 fd60 	bl	800d1b4 <sscanf>
            last_count = count; last_scan = _buffer + offset;
 800b6f4:	9905      	ldr	r1, [sp, #20]
 800b6f6:	686b      	ldr	r3, [r5, #4]
 800b6f8:	eb03 0906 	add.w	r9, r3, r6
            if (debug_bc95g && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 800b6fc:	4a2d      	ldr	r2, [pc, #180]	; (800b7b4 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f0>)
 800b6fe:	6812      	ldr	r2, [r2, #0]
 800b700:	b112      	cbz	r2, 800b708 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
 800b702:	f1b8 0f0a 	cmp.w	r8, #10
 800b706:	d01c      	beq.n	800b742 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x17e>
            if (count == j) {
 800b708:	9b05      	ldr	r3, [sp, #20]
 800b70a:	4553      	cmp	r3, sl
 800b70c:	d02a      	beq.n	800b764 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1a0>
            if (j+1 >= _buffer_size - offset ||
 800b70e:	f10b 0b02 	add.w	fp, fp, #2
 800b712:	68ab      	ldr	r3, [r5, #8]
 800b714:	1b9b      	subs	r3, r3, r6
 800b716:	459b      	cmp	fp, r3
 800b718:	da09      	bge.n	800b72e <_ZN8ATParser5vrecvEPKcSt9__va_list+0x16a>
                strcmp(&_buffer[offset + j-_delim_size], _delimiter) == 0) {
 800b71a:	6868      	ldr	r0, [r5, #4]
 800b71c:	696b      	ldr	r3, [r5, #20]
 800b71e:	9a02      	ldr	r2, [sp, #8]
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	6929      	ldr	r1, [r5, #16]
 800b724:	4418      	add	r0, r3
 800b726:	f7fc f81d 	bl	8007764 <strcmp>
            if (j+1 >= _buffer_size - offset ||
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d136      	bne.n	800b79c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d8>
                if (_buffer[offset] != '\r' && _buffer[offset] != '\n') {  //  Skip blank lines.
 800b72e:	686b      	ldr	r3, [r5, #4]
 800b730:	1999      	adds	r1, r3, r6
 800b732:	5d9b      	ldrb	r3, [r3, r6]
 800b734:	2b0d      	cmp	r3, #13
 800b736:	d033      	beq.n	800b7a0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1dc>
 800b738:	2b0a      	cmp	r3, #10
 800b73a:	d129      	bne.n	800b790 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1cc>
                j = 0;
 800b73c:	f04f 0b00 	mov.w	fp, #0
        }
 800b740:	e786      	b.n	800b650 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x8c>
            if (debug_bc95g && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 800b742:	5d9b      	ldrb	r3, [r3, r6]
 800b744:	2b0a      	cmp	r3, #10
 800b746:	d0df      	beq.n	800b708 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
 800b748:	2b0d      	cmp	r3, #13
 800b74a:	d0dd      	beq.n	800b708 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
                if (last_count > 0) { console_printf("  < %d / %s", last_count, last_scan); }
 800b74c:	2900      	cmp	r1, #0
 800b74e:	dd04      	ble.n	800b75a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x196>
 800b750:	464a      	mov	r2, r9
 800b752:	4819      	ldr	r0, [pc, #100]	; (800b7b8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f4>)
 800b754:	f7f8 fc22 	bl	8003f9c <console_printf>
 800b758:	e7d6      	b.n	800b708 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
                else { console_printf("  < %s", last_scan); }
 800b75a:	4649      	mov	r1, r9
 800b75c:	4817      	ldr	r0, [pc, #92]	; (800b7bc <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f8>)
 800b75e:	f7f8 fc1d 	bl	8003f9c <console_printf>
 800b762:	e7d1      	b.n	800b708 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
                debug_if(dbg_on, "AT= %s\r\n", _buffer+offset);
 800b764:	6869      	ldr	r1, [r5, #4]
 800b766:	9e03      	ldr	r6, [sp, #12]
 800b768:	4431      	add	r1, r6
 800b76a:	4815      	ldr	r0, [pc, #84]	; (800b7c0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1fc>)
 800b76c:	f7f8 fc16 	bl	8003f9c <console_printf>
                memcpy(_buffer, response, i);
 800b770:	4622      	mov	r2, r4
 800b772:	4639      	mov	r1, r7
 800b774:	6868      	ldr	r0, [r5, #4]
 800b776:	f7fb ffcd 	bl	8007714 <memcpy>
                _buffer[i] = 0;
 800b77a:	686b      	ldr	r3, [r5, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	551a      	strb	r2, [r3, r4]
                vsscanf(_buffer+offset, _buffer, args);
 800b780:	6868      	ldr	r0, [r5, #4]
 800b782:	9a01      	ldr	r2, [sp, #4]
 800b784:	4601      	mov	r1, r0
 800b786:	4430      	add	r0, r6
 800b788:	f000 fd5a 	bl	800c240 <vsscanf>
                response += i;
 800b78c:	4427      	add	r7, r4
 800b78e:	e71f      	b.n	800b5d0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xc>
                    debug_if(dbg_on, "AT< %s", _buffer+offset);
 800b790:	480c      	ldr	r0, [pc, #48]	; (800b7c4 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x200>)
 800b792:	f7f8 fc03 	bl	8003f9c <console_printf>
                j = 0;
 800b796:	f04f 0b00 	mov.w	fp, #0
 800b79a:	e759      	b.n	800b650 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x8c>
            _buffer[offset + j++] = c;
 800b79c:	46d3      	mov	fp, sl
 800b79e:	e757      	b.n	800b650 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x8c>
                j = 0;
 800b7a0:	f04f 0b00 	mov.w	fp, #0
 800b7a4:	e754      	b.n	800b650 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x8c>
    return true;
 800b7a6:	2001      	movs	r0, #1
 800b7a8:	e760      	b.n	800b66c <_ZN8ATParser5vrecvEPKcSt9__va_list+0xa8>
 800b7aa:	bf00      	nop
 800b7ac:	0800f978 	.word	0x0800f978
 800b7b0:	0800f9ac 	.word	0x0800f9ac
 800b7b4:	20002b1c 	.word	0x20002b1c
 800b7b8:	0800f9b8 	.word	0x0800f9b8
 800b7bc:	0800f9c4 	.word	0x0800f9c4
 800b7c0:	0800f9cc 	.word	0x0800f9cc
 800b7c4:	0800f9d8 	.word	0x0800f9d8

0800b7c8 <_ZN8ATParser6printfEPKcz>:


// Mapping to vararg functions
int ATParser::printf(const char *format, ...)
{
 800b7c8:	b40e      	push	{r1, r2, r3}
 800b7ca:	b500      	push	{lr}
 800b7cc:	b082      	sub	sp, #8
 800b7ce:	aa03      	add	r2, sp, #12
 800b7d0:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, format);
 800b7d4:	9201      	str	r2, [sp, #4]
    int res = vprintf(format, args);
 800b7d6:	f7ff feb1 	bl	800b53c <_ZN8ATParser7vprintfEPKcSt9__va_list>
    va_end(args);
    return res;
}
 800b7da:	b002      	add	sp, #8
 800b7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7e0:	b003      	add	sp, #12
 800b7e2:	4770      	bx	lr

0800b7e4 <_ZN8ATParser4sendEPKcz>:
    va_end(args);
    return res;
}

bool ATParser::send(const char *command, ...)
{
 800b7e4:	b40e      	push	{r1, r2, r3}
 800b7e6:	b500      	push	{lr}
 800b7e8:	b082      	sub	sp, #8
 800b7ea:	aa03      	add	r2, sp, #12
 800b7ec:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, command);
 800b7f0:	9201      	str	r2, [sp, #4]
    bool res = vsend(command, args);
 800b7f2:	f7ff febb 	bl	800b56c <_ZN8ATParser5vsendEPKcSt9__va_list>
    va_end(args);
    return res;
}
 800b7f6:	b002      	add	sp, #8
 800b7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7fc:	b003      	add	sp, #12
 800b7fe:	4770      	bx	lr

0800b800 <_ZN8ATParser4recvEPKcz>:

bool ATParser::recv(const char *response, ...)
{
 800b800:	b40e      	push	{r1, r2, r3}
 800b802:	b500      	push	{lr}
 800b804:	b082      	sub	sp, #8
 800b806:	aa03      	add	r2, sp, #12
 800b808:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, response);
 800b80c:	9201      	str	r2, [sp, #4]
    bool res = vrecv(response, args);
 800b80e:	f7ff fed9 	bl	800b5c4 <_ZN8ATParser5vrecvEPKcSt9__va_list>
    va_end(args);
    return res;
}
 800b812:	b002      	add	sp, #8
 800b814:	f85d eb04 	ldr.w	lr, [sp], #4
 800b818:	b003      	add	sp, #12
 800b81a:	4770      	bx	lr

0800b81c <_ZL12uart_tx_donePv>:
    return rc;
}

static void uart_tx_done(void *arg) {
    //  UART driver reports that transmission is complete.  Do nothing.
}
 800b81c:	4770      	bx	lr
	...

0800b820 <_Z10setup_uartP14BufferedSerial>:

int setup_uart(BufferedSerial *serial) {
 800b820:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b822:	b083      	sub	sp, #12
 800b824:	4604      	mov	r4, r0
    //  Configure the UART port HAL settings.
    int rc;
    int uart = serial->_uart;
 800b826:	6c46      	ldr	r6, [r0, #68]	; 0x44
    uint32_t baud = serial->_baud;
 800b828:	6c87      	ldr	r7, [r0, #72]	; 0x48

    //  Init rx buffer.
    memset(rx_buf, 0, sizeof(rx_buf));
 800b82a:	4d13      	ldr	r5, [pc, #76]	; (800b878 <_Z10setup_uartP14BufferedSerial+0x58>)
 800b82c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b830:	2100      	movs	r1, #0
 800b832:	4628      	mov	r0, r5
 800b834:	f7fb ff7b 	bl	800772e <memset>
    rx_ptr = rx_buf;
 800b838:	4b10      	ldr	r3, [pc, #64]	; (800b87c <_Z10setup_uartP14BufferedSerial+0x5c>)
 800b83a:	601d      	str	r5, [r3, #0]

    //  Define the UART callbacks.
    rc = hal_uart_init_cbs(uart,
 800b83c:	9400      	str	r4, [sp, #0]
 800b83e:	4b10      	ldr	r3, [pc, #64]	; (800b880 <_Z10setup_uartP14BufferedSerial+0x60>)
 800b840:	4a10      	ldr	r2, [pc, #64]	; (800b884 <_Z10setup_uartP14BufferedSerial+0x64>)
 800b842:	4911      	ldr	r1, [pc, #68]	; (800b888 <_Z10setup_uartP14BufferedSerial+0x68>)
 800b844:	4630      	mov	r0, r6
 800b846:	f7fd fb9f 	bl	8008f88 <hal_uart_init_cbs>
        uart_tx_char, uart_tx_done,
        uart_rx_char, serial);
    if (rc != 0) { return rc; }
 800b84a:	4603      	mov	r3, r0
 800b84c:	b950      	cbnz	r0, 800b864 <_Z10setup_uartP14BufferedSerial+0x44>

    //  Set UART parameters.
    assert(baud != 0);
 800b84e:	b167      	cbz	r7, 800b86a <_Z10setup_uartP14BufferedSerial+0x4a>
    rc = hal_uart_config(uart,
 800b850:	2300      	movs	r3, #0
 800b852:	9301      	str	r3, [sp, #4]
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	2301      	movs	r3, #1
 800b858:	2208      	movs	r2, #8
 800b85a:	4639      	mov	r1, r7
 800b85c:	4630      	mov	r0, r6
 800b85e:	f7fd fc1f 	bl	80090a0 <hal_uart_config>
 800b862:	4603      	mov	r3, r0
        HAL_UART_PARITY_NONE,
        HAL_UART_FLOW_CTL_NONE
    );
    if (rc != 0) { return rc; }
    return 0;
}
 800b864:	4618      	mov	r0, r3
 800b866:	b003      	add	sp, #12
 800b868:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(baud != 0);
 800b86a:	2300      	movs	r3, #0
 800b86c:	461a      	mov	r2, r3
 800b86e:	4619      	mov	r1, r3
 800b870:	4618      	mov	r0, r3
 800b872:	f7fa fabf 	bl	8005df4 <__assert_func>
 800b876:	bf00      	nop
 800b878:	20002b20 	.word	0x20002b20
 800b87c:	20002c20 	.word	0x20002c20
 800b880:	0800b969 	.word	0x0800b969
 800b884:	0800b81d 	.word	0x0800b81d
 800b888:	0800b9d9 	.word	0x0800b9d9

0800b88c <_ZN14BufferedSerial4initEPcmS0_mPKc>:

void BufferedSerial::init(char *txbuf, uint32_t txbuf_size, char *rxbuf, uint32_t rxbuf_size, const char* name)
{
 800b88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88e:	4604      	mov	r4, r0
 800b890:	461f      	mov	r7, r3
 800b892:	9e06      	ldr	r6, [sp, #24]
    _initialised = 0;
 800b894:	2500      	movs	r5, #0
 800b896:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    _uart = 0;
 800b89a:	6445      	str	r5, [r0, #68]	; 0x44
    _baud = 0;
 800b89c:	6485      	str	r5, [r0, #72]	; 0x48
    _txbuf_size = txbuf_size;
 800b89e:	6202      	str	r2, [r0, #32]
    _rxbuf_size = rxbuf_size;
 800b8a0:	6246      	str	r6, [r0, #36]	; 0x24
    _txbuf.init(txbuf, txbuf_size);
 800b8a2:	f000 f8e6 	bl	800ba72 <_ZN8MyBufferIcE4initEPcm>
    _rxbuf.init(rxbuf, rxbuf_size);
 800b8a6:	4632      	mov	r2, r6
 800b8a8:	4639      	mov	r1, r7
 800b8aa:	f104 0010 	add.w	r0, r4, #16
 800b8ae:	f000 f8e0 	bl	800ba72 <_ZN8MyBufferIcE4initEPcm>
    os_error_t rc = os_sem_init(&_rx_sem, 0);  //  Init to 0 tokens, so caller will block until data is available.
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800b8b8:	f7fb fc0c 	bl	80070d4 <os_sem_init>
    assert(rc == OS_OK);
 800b8bc:	b900      	cbnz	r0, 800b8c0 <_ZN14BufferedSerial4initEPcmS0_mPKc+0x34>
}
 800b8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(rc == OS_OK);
 800b8c0:	462b      	mov	r3, r5
 800b8c2:	462a      	mov	r2, r5
 800b8c4:	4629      	mov	r1, r5
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	f7fa fa94 	bl	8005df4 <__assert_func>

0800b8cc <_ZN14BufferedSerial9configureEi>:

void BufferedSerial::configure(int uart) {
    _uart = uart;
 800b8cc:	6441      	str	r1, [r0, #68]	; 0x44
}
 800b8ce:	4770      	bx	lr

0800b8d0 <_ZN14BufferedSerial8readableEv>:
}

template <class T>
inline uint32_t MyBuffer<T>::available(void)
{
    return (_wloc == _rloc) ? 0 : 1;
 800b8d0:	6942      	ldr	r2, [r0, #20]
 800b8d2:	6980      	ldr	r0, [r0, #24]

int BufferedSerial::readable(void)
{
    return _rxbuf.available();  // note: look if things are in the buffer
}
 800b8d4:	1a10      	subs	r0, r2, r0
 800b8d6:	bf18      	it	ne
 800b8d8:	2001      	movne	r0, #1
 800b8da:	4770      	bx	lr

0800b8dc <_ZN14BufferedSerial5fgetcEi>:
{
    return 1;   // buffer allows overwriting by design, always true
}

int BufferedSerial::getc(int timeout)
{
 800b8dc:	b510      	push	{r4, lr}
 800b8de:	4604      	mov	r4, r0
    //  If no data available, wait until the timeout for data.
    os_sem_pend(&_rx_sem, timeout * OS_TICKS_PER_SEC / 1000);
 800b8e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b8e4:	fb03 f101 	mul.w	r1, r3, r1
 800b8e8:	4b0e      	ldr	r3, [pc, #56]	; (800b924 <_ZN14BufferedSerial5fgetcEi+0x48>)
 800b8ea:	fb83 2301 	smull	r2, r3, r3, r1
 800b8ee:	17c9      	asrs	r1, r1, #31
 800b8f0:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 800b8f4:	302c      	adds	r0, #44	; 0x2c
 800b8f6:	f7fb fc27 	bl	8007148 <os_sem_pend>
 800b8fa:	6962      	ldr	r2, [r4, #20]
 800b8fc:	69a3      	ldr	r3, [r4, #24]
    if (_rxbuf.available()) { return _rxbuf.get(); }
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d00d      	beq.n	800b91e <_ZN14BufferedSerial5fgetcEi+0x42>
    T data_pos = _buf[_rloc++];
 800b902:	6922      	ldr	r2, [r4, #16]
 800b904:	69a3      	ldr	r3, [r4, #24]
 800b906:	1c59      	adds	r1, r3, #1
 800b908:	61a1      	str	r1, [r4, #24]
 800b90a:	5cd0      	ldrb	r0, [r2, r3]
    _rloc %= (_size-1);
 800b90c:	69a1      	ldr	r1, [r4, #24]
 800b90e:	69e3      	ldr	r3, [r4, #28]
 800b910:	3b01      	subs	r3, #1
 800b912:	fbb1 f2f3 	udiv	r2, r1, r3
 800b916:	fb03 1312 	mls	r3, r3, r2, r1
 800b91a:	61a3      	str	r3, [r4, #24]
    return -1;
}
 800b91c:	bd10      	pop	{r4, pc}
    return -1;
 800b91e:	f04f 30ff 	mov.w	r0, #4294967295
 800b922:	e7fb      	b.n	800b91c <_ZN14BufferedSerial5fgetcEi+0x40>
 800b924:	10624dd3 	.word	0x10624dd3

0800b928 <_ZN14BufferedSerial5rxIrqEh>:
    }
    return 0;
}

int BufferedSerial::rxIrq(uint8_t byte)
{
 800b928:	b510      	push	{r4, lr}
 800b92a:	4604      	mov	r4, r0
    _buf[_wloc++] = data;
 800b92c:	6902      	ldr	r2, [r0, #16]
 800b92e:	6943      	ldr	r3, [r0, #20]
 800b930:	1c58      	adds	r0, r3, #1
 800b932:	6160      	str	r0, [r4, #20]
 800b934:	54d1      	strb	r1, [r2, r3]
    _wloc %= (_size-1);
 800b936:	6961      	ldr	r1, [r4, #20]
 800b938:	69e3      	ldr	r3, [r4, #28]
 800b93a:	3b01      	subs	r3, #1
 800b93c:	fbb1 f2f3 	udiv	r2, r1, r3
 800b940:	fb03 1312 	mls	r3, r3, r2, r1
 800b944:	6163      	str	r3, [r4, #20]
    //  UART driver reports incoming byte of data. Return -1 if data was dropped.
    _rxbuf.put(byte);  //  Add to TX buffer.
    os_error_t rc = os_sem_release(&_rx_sem);  //  Signal to semaphore that data is available.
 800b946:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800b94a:	f7fb fbcb 	bl	80070e4 <os_sem_release>
    assert(rc == OS_OK);
 800b94e:	b928      	cbnz	r0, 800b95c <_ZN14BufferedSerial5rxIrqEh+0x34>
    //  Trigger callback if necessary
    if (_cbs[RxIrq]) { _cbs[RxIrq](_cbs_arg[RxIrq]); }
 800b950:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b952:	b10b      	cbz	r3, 800b958 <_ZN14BufferedSerial5rxIrqEh+0x30>
 800b954:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b956:	4798      	blx	r3
    return 0;
}
 800b958:	2000      	movs	r0, #0
 800b95a:	bd10      	pop	{r4, pc}
    assert(rc == OS_OK);
 800b95c:	2300      	movs	r3, #0
 800b95e:	461a      	mov	r2, r3
 800b960:	4619      	mov	r1, r3
 800b962:	4618      	mov	r0, r3
 800b964:	f7fa fa46 	bl	8005df4 <__assert_func>

0800b968 <_ZL12uart_rx_charPvh>:
static int uart_rx_char(void *arg, uint8_t byte) {
 800b968:	b510      	push	{r4, lr}
    if (rx_ptr - rx_buf < (int) sizeof(rx_buf)) { *rx_ptr++ = byte; }  //  Save to rx buffer.
 800b96a:	4b0a      	ldr	r3, [pc, #40]	; (800b994 <_ZL12uart_rx_charPvh+0x2c>)
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	4b0a      	ldr	r3, [pc, #40]	; (800b998 <_ZL12uart_rx_charPvh+0x30>)
 800b970:	1ad3      	subs	r3, r2, r3
 800b972:	2bff      	cmp	r3, #255	; 0xff
 800b974:	dc03      	bgt.n	800b97e <_ZL12uart_rx_charPvh+0x16>
 800b976:	1c54      	adds	r4, r2, #1
 800b978:	4b06      	ldr	r3, [pc, #24]	; (800b994 <_ZL12uart_rx_charPvh+0x2c>)
 800b97a:	601c      	str	r4, [r3, #0]
 800b97c:	7011      	strb	r1, [r2, #0]
    assert(arg != NULL);
 800b97e:	b110      	cbz	r0, 800b986 <_ZL12uart_rx_charPvh+0x1e>
    int rc = serial->rxIrq(byte);
 800b980:	f7ff ffd2 	bl	800b928 <_ZN14BufferedSerial5rxIrqEh>
}
 800b984:	bd10      	pop	{r4, pc}
    assert(arg != NULL);
 800b986:	2300      	movs	r3, #0
 800b988:	461a      	mov	r2, r3
 800b98a:	4619      	mov	r1, r3
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7fa fa31 	bl	8005df4 <__assert_func>
 800b992:	bf00      	nop
 800b994:	20002c20 	.word	0x20002c20
 800b998:	20002b20 	.word	0x20002b20

0800b99c <_ZN14BufferedSerial5txIrqEv>:

int BufferedSerial::txIrq(void)
{
 800b99c:	b510      	push	{r4, lr}
    return (_wloc == _rloc) ? 0 : 1;
 800b99e:	6842      	ldr	r2, [r0, #4]
 800b9a0:	6883      	ldr	r3, [r0, #8]
    //  UART driver asks for more data to send. Return -1 if no more data is available for TX.
    if(_txbuf.available()) {
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d00e      	beq.n	800b9c4 <_ZN14BufferedSerial5txIrqEv+0x28>
    T data_pos = _buf[_rloc++];
 800b9a6:	6802      	ldr	r2, [r0, #0]
 800b9a8:	6883      	ldr	r3, [r0, #8]
 800b9aa:	1c59      	adds	r1, r3, #1
 800b9ac:	6081      	str	r1, [r0, #8]
 800b9ae:	5cd3      	ldrb	r3, [r2, r3]
    _rloc %= (_size-1);
 800b9b0:	6884      	ldr	r4, [r0, #8]
 800b9b2:	68c2      	ldr	r2, [r0, #12]
 800b9b4:	3a01      	subs	r2, #1
 800b9b6:	fbb4 f1f2 	udiv	r1, r4, r2
 800b9ba:	fb02 4211 	mls	r2, r2, r1, r4
 800b9be:	6082      	str	r2, [r0, #8]
        uint8_t byte = _txbuf.get();  //  Get data from TX buffer.
        return byte;
 800b9c0:	4618      	mov	r0, r3
    }
    //  Trigger callback if no more data to send.
    if (_cbs[TxIrq]) { _cbs[TxIrq](_cbs_arg[TxIrq]); }
    return -1;
}
 800b9c2:	bd10      	pop	{r4, pc}
    if (_cbs[TxIrq]) { _cbs[TxIrq](_cbs_arg[TxIrq]); }
 800b9c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b9c6:	b123      	cbz	r3, 800b9d2 <_ZN14BufferedSerial5txIrqEv+0x36>
 800b9c8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800b9ca:	4798      	blx	r3
    return -1;
 800b9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d0:	e7f7      	b.n	800b9c2 <_ZN14BufferedSerial5txIrqEv+0x26>
 800b9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d6:	e7f4      	b.n	800b9c2 <_ZN14BufferedSerial5txIrqEv+0x26>

0800b9d8 <_ZL12uart_tx_charPv>:
static int uart_tx_char(void *arg) {    
 800b9d8:	b508      	push	{r3, lr}
    assert(arg != NULL);
 800b9da:	b110      	cbz	r0, 800b9e2 <_ZL12uart_tx_charPv+0xa>
    int byte = serial->txIrq();
 800b9dc:	f7ff ffde 	bl	800b99c <_ZN14BufferedSerial5txIrqEv>
}
 800b9e0:	bd08      	pop	{r3, pc}
    assert(arg != NULL);
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7fa fa03 	bl	8005df4 <__assert_func>

0800b9ee <_ZN14BufferedSerial5primeEv>:

void BufferedSerial::prime(void)
{
 800b9ee:	b510      	push	{r4, lr}
 800b9f0:	4604      	mov	r4, r0
    if (!_initialised) {
 800b9f2:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800b9f6:	b92b      	cbnz	r3, 800ba04 <_ZN14BufferedSerial5primeEv+0x16>
        //  Configure the UART port on first use.
        _initialised = 1;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        int rc = setup_uart(this);
 800b9fe:	f7ff ff0f 	bl	800b820 <_Z10setup_uartP14BufferedSerial>
        assert(rc == 0);
 800ba02:	b930      	cbnz	r0, 800ba12 <_ZN14BufferedSerial5primeEv+0x24>
    }
    hal_uart_start_rx(_uart);  //  Start receiving UART data.
 800ba04:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ba06:	f7fd fae1 	bl	8008fcc <hal_uart_start_rx>
    hal_uart_start_tx(_uart);  //  Start transmitting UART data.
 800ba0a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ba0c:	f7fd fb0c 	bl	8009028 <hal_uart_start_tx>
}
 800ba10:	bd10      	pop	{r4, pc}
        assert(rc == 0);
 800ba12:	2300      	movs	r3, #0
 800ba14:	461a      	mov	r2, r3
 800ba16:	4619      	mov	r1, r3
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fa f9eb 	bl	8005df4 <__assert_func>

0800ba1e <_ZN14BufferedSerial4putcEi>:
{
 800ba1e:	b538      	push	{r3, r4, r5, lr}
 800ba20:	460c      	mov	r4, r1
    _buf[_wloc++] = data;
 800ba22:	6801      	ldr	r1, [r0, #0]
 800ba24:	6842      	ldr	r2, [r0, #4]
 800ba26:	1c55      	adds	r5, r2, #1
 800ba28:	6045      	str	r5, [r0, #4]
 800ba2a:	548c      	strb	r4, [r1, r2]
    _wloc %= (_size-1);
 800ba2c:	6845      	ldr	r5, [r0, #4]
 800ba2e:	68c2      	ldr	r2, [r0, #12]
 800ba30:	3a01      	subs	r2, #1
 800ba32:	fbb5 f1f2 	udiv	r1, r5, r2
 800ba36:	fb02 5211 	mls	r2, r2, r1, r5
 800ba3a:	6042      	str	r2, [r0, #4]
    BufferedSerial::prime();
 800ba3c:	f7ff ffd7 	bl	800b9ee <_ZN14BufferedSerial5primeEv>
}
 800ba40:	4620      	mov	r0, r4
 800ba42:	bd38      	pop	{r3, r4, r5, pc}

0800ba44 <_ZN14BufferedSerial6attachEPFvPvES0_i>:

void BufferedSerial::attach(void (*func)(void *), void *arg, IrqType type)
{
 800ba44:	b410      	push	{r4}
    _cbs[type] = func;
 800ba46:	f103 040c 	add.w	r4, r3, #12
 800ba4a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800ba4e:	6061      	str	r1, [r4, #4]
    _cbs_arg[type] = arg;
 800ba50:	330e      	adds	r3, #14
 800ba52:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ba56:	6042      	str	r2, [r0, #4]
}
 800ba58:	bc10      	pop	{r4}
 800ba5a:	4770      	bx	lr

0800ba5c <_ZN14BufferedSerial4baudEm>:

void BufferedSerial::baud(uint32_t baud0)
{
    _baud = baud0;
 800ba5c:	6481      	str	r1, [r0, #72]	; 0x48
}
 800ba5e:	4770      	bx	lr

0800ba60 <_ZN8MyBufferIcE5clearEv>:
{ 
    return this->_size; 
}

template <class T>
void MyBuffer<T>::clear(void)
 800ba60:	b508      	push	{r3, lr}
{
    _wloc = 0;
 800ba62:	2100      	movs	r1, #0
 800ba64:	6041      	str	r1, [r0, #4]
    _rloc = 0;
 800ba66:	6081      	str	r1, [r0, #8]
    memset(_buf, 0, _size);
 800ba68:	68c2      	ldr	r2, [r0, #12]
 800ba6a:	6800      	ldr	r0, [r0, #0]
 800ba6c:	f7fb fe5f 	bl	800772e <memset>
    
    return;
}
 800ba70:	bd08      	pop	{r3, pc}

0800ba72 <_ZN8MyBufferIcE4initEPcm>:
void MyBuffer<T>::init(T *buffer, uint32_t size)
 800ba72:	b508      	push	{r3, lr}
    _buf = buffer;
 800ba74:	6001      	str	r1, [r0, #0]
    _size = size;
 800ba76:	60c2      	str	r2, [r0, #12]
    clear();    
 800ba78:	f7ff fff2 	bl	800ba60 <_ZN8MyBufferIcE5clearEv>
}
 800ba7c:	bd08      	pop	{r3, pc}
	...

0800ba80 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
 800ba80:	b530      	push	{r4, r5, lr}
 800ba82:	b087      	sub	sp, #28
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 800ba84:	2200      	movs	r2, #0
 800ba86:	f04f 31ff 	mov.w	r1, #4294967295
 800ba8a:	4810      	ldr	r0, [pc, #64]	; (800bacc <config_device+0x4c>)
 800ba8c:	f7fa fc84 	bl	8006398 <os_dev_open>
    assert(dev != NULL);
 800ba90:	b178      	cbz	r0, 800bab2 <config_device+0x32>
 800ba92:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
 800ba94:	4668      	mov	r0, sp
 800ba96:	f000 f8bb 	bl	800bc10 <temp_stm32_default_cfg>
    assert(rc == 0);
 800ba9a:	b980      	cbnz	r0, 800babe <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 800ba9c:	4669      	mov	r1, sp
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 f9b2 	bl	800be08 <temp_stm32_config>
 800baa4:	4605      	mov	r5, r0
    os_dev_close(dev);
 800baa6:	4620      	mov	r0, r4
 800baa8:	f7fa fc98 	bl	80063dc <os_dev_close>
    return rc;
}
 800baac:	4628      	mov	r0, r5
 800baae:	b007      	add	sp, #28
 800bab0:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
 800bab2:	2300      	movs	r3, #0
 800bab4:	461a      	mov	r2, r3
 800bab6:	4619      	mov	r1, r3
 800bab8:	4618      	mov	r0, r3
 800baba:	f7fa f99b 	bl	8005df4 <__assert_func>
    assert(rc == 0);
 800babe:	2300      	movs	r3, #0
 800bac0:	461a      	mov	r2, r3
 800bac2:	4619      	mov	r1, r3
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7fa f995 	bl	8005df4 <__assert_func>
 800baca:	bf00      	nop
 800bacc:	0800f9ec 	.word	0x0800f9ec

0800bad0 <temp_stm32_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 800bad0:	b510      	push	{r4, lr}
 800bad2:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
 800bad4:	4c10      	ldr	r4, [pc, #64]	; (800bb18 <temp_stm32_create+0x48>)
 800bad6:	4621      	mov	r1, r4
 800bad8:	4810      	ldr	r0, [pc, #64]	; (800bb1c <temp_stm32_create+0x4c>)
 800bada:	f7f8 fa5f 	bl	8003f9c <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 800bade:	4b10      	ldr	r3, [pc, #64]	; (800bb20 <temp_stm32_create+0x50>)
 800bae0:	9301      	str	r3, [sp, #4]
 800bae2:	4b10      	ldr	r3, [pc, #64]	; (800bb24 <temp_stm32_create+0x54>)
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	2300      	movs	r3, #0
 800bae8:	2201      	movs	r2, #1
 800baea:	4621      	mov	r1, r4
 800baec:	480e      	ldr	r0, [pc, #56]	; (800bb28 <temp_stm32_create+0x58>)
 800baee:	f7fa fc0d 	bl	800630c <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
 800baf2:	b920      	cbnz	r0, 800bafe <temp_stm32_create+0x2e>

    //  Configure the device.
    rc = config_device();
 800baf4:	f7ff ffc4 	bl	800ba80 <config_device>
    assert(rc == 0);
 800baf8:	b938      	cbnz	r0, 800bb0a <temp_stm32_create+0x3a>
}
 800bafa:	b002      	add	sp, #8
 800bafc:	bd10      	pop	{r4, pc}
    assert(rc == 0);
 800bafe:	2300      	movs	r3, #0
 800bb00:	461a      	mov	r2, r3
 800bb02:	4619      	mov	r1, r3
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7fa f975 	bl	8005df4 <__assert_func>
    assert(rc == 0);
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	4619      	mov	r1, r3
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fa f96f 	bl	8005df4 <__assert_func>
 800bb16:	bf00      	nop
 800bb18:	0800f9ec 	.word	0x0800f9ec
 800bb1c:	0800f9fc 	.word	0x0800f9fc
 800bb20:	20002c24 	.word	0x20002c24
 800bb24:	0800bc3d 	.word	0x0800bc3d
 800bb28:	20002c38 	.word	0x20002c38

0800bb2c <temp_stm32_sensor_get_config>:

static int temp_stm32_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
 800bb2c:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
 800bb30:	2100      	movs	r1, #0
 800bb32:	ea50 0301 	orrs.w	r3, r0, r1
 800bb36:	d004      	beq.n	800bb42 <temp_stm32_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
 800bb38:	9b00      	ldr	r3, [sp, #0]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	701a      	strb	r2, [r3, #0]
    return (0);
 800bb3e:	2000      	movs	r0, #0
 800bb40:	4770      	bx	lr
err:
    return (rc);
 800bb42:	f06f 0001 	mvn.w	r0, #1
}
 800bb46:	4770      	bx	lr

0800bb48 <temp_stm32_close>:
    if (dev->adc) {
 800bb48:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 800bb4c:	b14b      	cbz	r3, 800bb62 <temp_stm32_close+0x1a>
static int temp_stm32_close(struct os_dev *dev0) {
 800bb4e:	b510      	push	{r4, lr}
 800bb50:	4604      	mov	r4, r0
        os_dev_close((struct os_dev *) dev->adc);
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fa fc42 	bl	80063dc <os_dev_close>
        dev->adc = NULL;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
}
 800bb5e:	2000      	movs	r0, #0
 800bb60:	bd10      	pop	{r4, pc}
 800bb62:	2000      	movs	r0, #0
 800bb64:	4770      	bx	lr
	...

0800bb68 <temp_stm32_open>:
static int temp_stm32_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 800bb68:	b510      	push	{r4, lr}
    dev = (struct temp_stm32 *) dev0;  assert(dev);  
 800bb6a:	b308      	cbz	r0, 800bbb0 <temp_stm32_open+0x48>
 800bb6c:	4604      	mov	r4, r0
    cfg = &dev->cfg; assert(cfg); assert(cfg->adc_channel);  assert(cfg->adc_channel_cfg);  assert(cfg->adc_dev_name);
 800bb6e:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
 800bb72:	d023      	beq.n	800bbbc <temp_stm32_open+0x54>
 800bb74:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
 800bb78:	b333      	cbz	r3, 800bbc8 <temp_stm32_open+0x60>
 800bb7a:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 800bb7e:	b343      	cbz	r3, 800bbd2 <temp_stm32_open+0x6a>
 800bb80:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 800bb84:	b350      	cbz	r0, 800bbdc <temp_stm32_open+0x74>
    dev->adc = (struct adc_dev *) os_dev_open(cfg->adc_dev_name, timeout, cfg->adc_open_arg);
 800bb86:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 800bb8a:	f7fa fc05 	bl	8006398 <os_dev_open>
 800bb8e:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    assert(dev->adc);
 800bb92:	b348      	cbz	r0, 800bbe8 <temp_stm32_open+0x80>
    console_printf("ADC open ch 16\n");  ////
 800bb94:	481d      	ldr	r0, [pc, #116]	; (800bc0c <temp_stm32_open+0xa4>)
 800bb96:	f7f8 fa01 	bl	8003f9c <console_printf>
    rc = adc_chan_config(dev->adc, cfg->adc_channel, cfg->adc_channel_cfg);
 800bb9a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800bb9e:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
 800bba2:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 800bba6:	f000 fe05 	bl	800c7b4 <adc_chan_config>
    if (rc) { 
 800bbaa:	bb18      	cbnz	r0, 800bbf4 <temp_stm32_open+0x8c>
}
 800bbac:	2000      	movs	r0, #0
 800bbae:	bd10      	pop	{r4, pc}
    dev = (struct temp_stm32 *) dev0;  assert(dev);  
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fa f91c 	bl	8005df4 <__assert_func>
    cfg = &dev->cfg; assert(cfg); assert(cfg->adc_channel);  assert(cfg->adc_channel_cfg);  assert(cfg->adc_dev_name);
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7fa f916 	bl	8005df4 <__assert_func>
 800bbc8:	461a      	mov	r2, r3
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fa f911 	bl	8005df4 <__assert_func>
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fa f90c 	bl	8005df4 <__assert_func>
 800bbdc:	2300      	movs	r3, #0
 800bbde:	461a      	mov	r2, r3
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fa f906 	bl	8005df4 <__assert_func>
    assert(dev->adc);
 800bbe8:	2300      	movs	r3, #0
 800bbea:	461a      	mov	r2, r3
 800bbec:	4619      	mov	r1, r3
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7fa f900 	bl	8005df4 <__assert_func>
        if (dev->adc) { os_dev_close((struct os_dev *) dev->adc); }
 800bbf4:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 800bbf8:	b108      	cbz	r0, 800bbfe <temp_stm32_open+0x96>
 800bbfa:	f7fa fbef 	bl	80063dc <os_dev_close>
    assert(rc == 0);
 800bbfe:	2300      	movs	r3, #0
 800bc00:	461a      	mov	r2, r3
 800bc02:	4619      	mov	r1, r3
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fa f8f5 	bl	8005df4 <__assert_func>
 800bc0a:	bf00      	nop
 800bc0c:	0800fa50 	.word	0x0800fa50

0800bc10 <temp_stm32_default_cfg>:
int temp_stm32_default_cfg(struct temp_stm32_cfg *cfg) {
 800bc10:	b430      	push	{r4, r5}
 800bc12:	4603      	mov	r3, r0
    memset(cfg, 0, sizeof(struct temp_stm32_cfg));  //  Zero the entire object.
 800bc14:	2000      	movs	r0, #0
 800bc16:	60d8      	str	r0, [r3, #12]
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
 800bc18:	f04f 34ff 	mov.w	r4, #4294967295
 800bc1c:	2500      	movs	r5, #0
 800bc1e:	e9c3 4500 	strd	r4, r5, [r3]
    cfg->adc_dev_name    = STM32F1_ADC1_DEVICE;     //  For STM32F1: adc1
 800bc22:	4a04      	ldr	r2, [pc, #16]	; (800bc34 <temp_stm32_default_cfg+0x24>)
 800bc24:	609a      	str	r2, [r3, #8]
    cfg->adc_channel     = ADC_CHANNEL_TEMPSENSOR;  //  For STM32F1: 16
 800bc26:	2210      	movs	r2, #16
 800bc28:	731a      	strb	r2, [r3, #12]
    cfg->adc_open_arg    = NULL;
 800bc2a:	6118      	str	r0, [r3, #16]
    cfg->adc_channel_cfg = &temp_channel_config;    //  Configure the temperature channel.
 800bc2c:	4a02      	ldr	r2, [pc, #8]	; (800bc38 <temp_stm32_default_cfg+0x28>)
 800bc2e:	615a      	str	r2, [r3, #20]
}
 800bc30:	bc30      	pop	{r4, r5}
 800bc32:	4770      	bx	lr
 800bc34:	0800f720 	.word	0x0800f720
 800bc38:	20000200 	.word	0x20000200

0800bc3c <temp_stm32_init>:
int temp_stm32_init(struct os_dev *dev0, void *arg) {
 800bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 800bc3e:	b391      	cbz	r1, 800bca6 <temp_stm32_init+0x6a>
 800bc40:	460d      	mov	r5, r1
 800bc42:	b398      	cbz	r0, 800bcac <temp_stm32_init+0x70>
 800bc44:	4604      	mov	r4, r0
    dev->adc = NULL;
 800bc46:	2300      	movs	r3, #0
 800bc48:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
    rc = temp_stm32_default_cfg(&dev->cfg);
 800bc4c:	30b0      	adds	r0, #176	; 0xb0
 800bc4e:	f7ff ffdf 	bl	800bc10 <temp_stm32_default_cfg>
    if (rc) { goto err; }
 800bc52:	4603      	mov	r3, r0
 800bc54:	b108      	cbz	r0, 800bc5a <temp_stm32_init+0x1e>
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
 800bc5a:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
 800bc5e:	4621      	mov	r1, r4
 800bc60:	4630      	mov	r0, r6
 800bc62:	f7f9 ff18 	bl	8005a96 <sensor_init>
    if (rc != 0) { goto err; }
 800bc66:	4603      	mov	r3, r0
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d1f4      	bne.n	800bc56 <temp_stm32_init+0x1a>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
 800bc6c:	4b11      	ldr	r3, [pc, #68]	; (800bcb4 <temp_stm32_init+0x78>)
 800bc6e:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
 800bc70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800bc74:	2300      	movs	r3, #0
 800bc76:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 800bc7a:	682a      	ldr	r2, [r5, #0]
 800bc7c:	686f      	ldr	r7, [r5, #4]
 800bc7e:	68a8      	ldr	r0, [r5, #8]
 800bc80:	68e9      	ldr	r1, [r5, #12]
 800bc82:	6722      	str	r2, [r4, #112]	; 0x70
 800bc84:	6767      	str	r7, [r4, #116]	; 0x74
 800bc86:	67a0      	str	r0, [r4, #120]	; 0x78
 800bc88:	67e1      	str	r1, [r4, #124]	; 0x7c
 800bc8a:	692a      	ldr	r2, [r5, #16]
 800bc8c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
 800bc90:	4630      	mov	r0, r6
 800bc92:	f7f9 fee9 	bl	8005a68 <sensor_mgr_register>
    if (rc != 0) { goto err; }
 800bc96:	4603      	mov	r3, r0
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d1dc      	bne.n	800bc56 <temp_stm32_init+0x1a>
    OS_DEV_SETHANDLERS(dev0, temp_stm32_open, temp_stm32_close);
 800bc9c:	4a06      	ldr	r2, [pc, #24]	; (800bcb8 <temp_stm32_init+0x7c>)
 800bc9e:	6022      	str	r2, [r4, #0]
 800bca0:	4a06      	ldr	r2, [pc, #24]	; (800bcbc <temp_stm32_init+0x80>)
 800bca2:	60e2      	str	r2, [r4, #12]
    return (0);
 800bca4:	e7d7      	b.n	800bc56 <temp_stm32_init+0x1a>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 800bca6:	f06f 0308 	mvn.w	r3, #8
 800bcaa:	e7d4      	b.n	800bc56 <temp_stm32_init+0x1a>
 800bcac:	f06f 0308 	mvn.w	r3, #8
 800bcb0:	e7d1      	b.n	800bc56 <temp_stm32_init+0x1a>
 800bcb2:	bf00      	nop
 800bcb4:	0800fa0c 	.word	0x0800fa0c
 800bcb8:	0800bb69 	.word	0x0800bb69
 800bcbc:	0800bb49 	.word	0x0800bb49

0800bcc0 <temp_stm32_get_raw_temperature>:
int temp_stm32_get_raw_temperature(struct temp_stm32 *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
 800bcc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc4:	b082      	sub	sp, #8
 800bcc6:	4680      	mov	r8, r0
 800bcc8:	4689      	mov	r9, r1
 800bcca:	4617      	mov	r7, r2
 800bccc:	469a      	mov	sl, r3
    console_printf("STM read int temp sensor\n");  ////
 800bcce:	482b      	ldr	r0, [pc, #172]	; (800bd7c <temp_stm32_get_raw_temperature+0xbc>)
 800bcd0:	f7f8 f964 	bl	8003f9c <console_printf>
    assert(dev->adc);  assert(temp_sum);
 800bcd4:	f8d8 30cc 	ldr.w	r3, [r8, #204]	; 0xcc
 800bcd8:	b12b      	cbz	r3, 800bce6 <temp_stm32_get_raw_temperature+0x26>
 800bcda:	b14f      	cbz	r7, 800bcf0 <temp_stm32_get_raw_temperature+0x30>
    *temp_sum = 0;
 800bcdc:	2500      	movs	r5, #0
 800bcde:	603d      	str	r5, [r7, #0]
    uint8_t lastdiff = 0;  //  Delta between current raw temperature and previous raw temperature
 800bce0:	462e      	mov	r6, r5
    int lasttemp = 0;      //  Previous raw temperature
 800bce2:	462c      	mov	r4, r5
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 800bce4:	e01c      	b.n	800bd20 <temp_stm32_get_raw_temperature+0x60>
    assert(dev->adc);  assert(temp_sum);
 800bce6:	461a      	mov	r2, r3
 800bce8:	4619      	mov	r1, r3
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fa f882 	bl	8005df4 <__assert_func>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fa f87c 	bl	8005df4 <__assert_func>
        assert(rc == 0);
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	461a      	mov	r2, r3
 800bd00:	4619      	mov	r1, r3
 800bd02:	4618      	mov	r0, r3
 800bd04:	f7fa f876 	bl	8005df4 <__assert_func>
        assert(rawtemp > 0);  //  If equals 0, it means we haven't sampled any values.  Check the above note.
 800bd08:	2300      	movs	r3, #0
 800bd0a:	461a      	mov	r2, r3
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fa f870 	bl	8005df4 <__assert_func>
        *temp_sum += rawtemp;  //  Accumulate the raw temperature.
 800bd14:	6839      	ldr	r1, [r7, #0]
 800bd16:	9c01      	ldr	r4, [sp, #4]
 800bd18:	4421      	add	r1, r4
 800bd1a:	6039      	str	r1, [r7, #0]
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 800bd1c:	3501      	adds	r5, #1
        lastdiff = diff;
 800bd1e:	4616      	mov	r6, r2
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 800bd20:	454d      	cmp	r5, r9
 800bd22:	da26      	bge.n	800bd72 <temp_stm32_get_raw_temperature+0xb2>
        rawtemp = -1;
 800bd24:	aa02      	add	r2, sp, #8
 800bd26:	f04f 33ff 	mov.w	r3, #4294967295
 800bd2a:	f842 3d04 	str.w	r3, [r2, #-4]!
        rc = adc_read_channel(dev->adc, ADC_CHANNEL_TEMPSENSOR, &rawtemp);
 800bd2e:	f8d8 00cc 	ldr.w	r0, [r8, #204]	; 0xcc
 * @return 0 on success, non-zero error code on failure
 */
static inline int
adc_read_channel(struct adc_dev *dev, uint8_t ch, int *result)
{
    return (dev->ad_funcs->af_read_channel(dev, ch, result));
 800bd32:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	2110      	movs	r1, #16
 800bd38:	4798      	blx	r3
        assert(rc == 0);
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	d1de      	bne.n	800bcfc <temp_stm32_get_raw_temperature+0x3c>
        assert(rawtemp > 0);  //  If equals 0, it means we haven't sampled any values.  Check the above note.
 800bd3e:	9a01      	ldr	r2, [sp, #4]
 800bd40:	2a00      	cmp	r2, #0
 800bd42:	dde1      	ble.n	800bd08 <temp_stm32_get_raw_temperature+0x48>
        uint8_t diff = (rawtemp - lasttemp) & 0xf;  //  Delta between this and last reading, keeping lower 4 bits.
 800bd44:	b2d2      	uxtb	r2, r2
 800bd46:	b2e4      	uxtb	r4, r4
 800bd48:	1b12      	subs	r2, r2, r4
 800bd4a:	f002 020f 	and.w	r2, r2, #15
        if (i % 2 == 1) {
 800bd4e:	2d00      	cmp	r5, #0
 800bd50:	f005 0301 	and.w	r3, r5, #1
 800bd54:	bfb8      	it	lt
 800bd56:	425b      	neglt	r3, r3
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d1db      	bne.n	800bd14 <temp_stm32_get_raw_temperature+0x54>
            uint8_t i2 = i >> 1;  //  i2 is (i / 2)
 800bd5c:	106b      	asrs	r3, r5, #1
            uint8_t b = diff + (lastdiff << 4);    //  Combine current delta (4 bits) and previous delta (4 bits) to make 8 bits.
 800bd5e:	eb02 1606 	add.w	r6, r2, r6, lsl #4
 800bd62:	b2f6      	uxtb	r6, r6
            if (temp_diff) { temp_diff[i2] = b; }  //  Save the combined delta into temp_diff as entropy.
 800bd64:	f1ba 0f00 	cmp.w	sl, #0
 800bd68:	d0d4      	beq.n	800bd14 <temp_stm32_get_raw_temperature+0x54>
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	f80a 6003 	strb.w	r6, [sl, r3]
 800bd70:	e7d0      	b.n	800bd14 <temp_stm32_get_raw_temperature+0x54>
}
 800bd72:	2000      	movs	r0, #0
 800bd74:	b002      	add	sp, #8
 800bd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd7a:	bf00      	nop
 800bd7c:	0800fa34 	.word	0x0800fa34

0800bd80 <temp_stm32_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	b086      	sub	sp, #24
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 800bd84:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
 800bd88:	2500      	movs	r5, #0
 800bd8a:	ea54 0305 	orrs.w	r3, r4, r5
 800bd8e:	d038      	beq.n	800be02 <temp_stm32_sensor_read+0x82>
 800bd90:	4604      	mov	r4, r0
    dev = (struct temp_stm32 *) SENSOR_GET_DEVICE(sensor); assert(dev);
 800bd92:	6805      	ldr	r5, [r0, #0]
 800bd94:	b165      	cbz	r5, 800bdb0 <temp_stm32_sensor_read+0x30>
    rawtemp = -1;
 800bd96:	f04f 33ff 	mov.w	r3, #4294967295
 800bd9a:	9303      	str	r3, [sp, #12]
        rc = temp_stm32_open((struct os_dev *) dev, 0, NULL);
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	4611      	mov	r1, r2
 800bda0:	4628      	mov	r0, r5
 800bda2:	f7ff fee1 	bl	800bb68 <temp_stm32_open>
        if (rc) { goto err; }
 800bda6:	4606      	mov	r6, r0
 800bda8:	b140      	cbz	r0, 800bdbc <temp_stm32_sensor_read+0x3c>
}
 800bdaa:	4630      	mov	r0, r6
 800bdac:	b006      	add	sp, #24
 800bdae:	bd70      	pop	{r4, r5, r6, pc}
    dev = (struct temp_stm32 *) SENSOR_GET_DEVICE(sensor); assert(dev);
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fa f81c 	bl	8005df4 <__assert_func>
        rc = temp_stm32_get_raw_temperature(dev, 1, &rawtemp, NULL);
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	aa03      	add	r2, sp, #12
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	f7ff ff7c 	bl	800bcc0 <temp_stm32_get_raw_temperature>
 800bdc8:	4606      	mov	r6, r0
        temp_stm32_close((struct os_dev *) dev);
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f7ff febc 	bl	800bb48 <temp_stm32_close>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
 800bdd0:	2e00      	cmp	r6, #0
 800bdd2:	d1ea      	bne.n	800bdaa <temp_stm32_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
 800bdd4:	9b03      	ldr	r3, [sp, #12]
 800bdd6:	9304      	str	r3, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
 800bdd8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800bddc:	f043 0301 	orr.w	r3, r3, #1
 800bde0:	f88d 3014 	strb.w	r3, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
 800bde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d0df      	beq.n	800bdaa <temp_stm32_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
 800bdea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800bdee:	2300      	movs	r3, #0
 800bdf0:	e9cd 2300 	strd	r2, r3, [sp]
 800bdf4:	aa04      	add	r2, sp, #16
 800bdf6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdfc:	4798      	blx	r3
 800bdfe:	4606      	mov	r6, r0
 800be00:	e7d3      	b.n	800bdaa <temp_stm32_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 800be02:	f06f 0601 	mvn.w	r6, #1
 800be06:	e7d0      	b.n	800bdaa <temp_stm32_sensor_read+0x2a>

0800be08 <temp_stm32_config>:
 * @param Sensor device temp_stm32 structure
 * @param Sensor device temp_stm32_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stm32_config(struct temp_stm32 *dev, struct temp_stm32_cfg *cfg) {
 800be08:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 800be0a:	f110 0f70 	cmn.w	r0, #112	; 0x70
 800be0e:	d009      	beq.n	800be24 <temp_stm32_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
 800be10:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
 800be14:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
 800be18:	e9d1 2300 	ldrd	r2, r3, [r1]
 800be1c:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
 800be20:	2000      	movs	r0, #0
 800be22:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 800be24:	2300      	movs	r3, #0
 800be26:	461a      	mov	r2, r3
 800be28:	4619      	mov	r1, r3
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7f9 ffe2 	bl	8005df4 <__assert_func>

0800be30 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
 800be30:	4770      	bx	lr

0800be32 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
 800be32:	4770      	bx	lr

0800be34 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
 800be34:	4770      	bx	lr

0800be36 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
 800be36:	4770      	bx	lr

0800be38 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
 800be38:	4770      	bx	lr

0800be3a <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
 800be3a:	b570      	push	{r4, r5, r6, lr}
 800be3c:	b086      	sub	sp, #24
 800be3e:	4605      	mov	r5, r0
 800be40:	460e      	mov	r6, r1
 800be42:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
 800be44:	2300      	movs	r3, #0
 800be46:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
 800be48:	f000 f9ae 	bl	800c1a8 <mfg_init>

    mfg_open(&reader);
 800be4c:	a801      	add	r0, sp, #4
 800be4e:	f000 f9c7 	bl	800c1e0 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
 800be52:	6823      	ldr	r3, [r4, #0]
 800be54:	42ab      	cmp	r3, r5
 800be56:	da29      	bge.n	800beac <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
 800be58:	2102      	movs	r1, #2
 800be5a:	a801      	add	r0, sp, #4
 800be5c:	f000 f98d 	bl	800c17a <mfg_seek_next_with_type>
 800be60:	4603      	mov	r3, r0
        switch (rc) {
 800be62:	f110 0f0f 	cmn.w	r0, #15
 800be66:	d003      	beq.n	800be70 <flash_map_read_mfg+0x36>
 800be68:	b120      	cbz	r0, 800be74 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	b006      	add	sp, #24
 800be6e:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
 800be70:	2300      	movs	r3, #0
 800be72:	e7fa      	b.n	800be6a <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
 800be74:	a903      	add	r1, sp, #12
 800be76:	a801      	add	r0, sp, #4
 800be78:	f000 f98c 	bl	800c194 <mfg_read_tlv_flash_area>
        if (rc != 0) {
 800be7c:	4603      	mov	r3, r0
 800be7e:	2800      	cmp	r0, #0
 800be80:	d1f3      	bne.n	800be6a <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800be88:	009a      	lsls	r2, r3, #2
 800be8a:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
 800be8c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800be90:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
 800be92:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800be96:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
 800be98:	f8dd 200e 	ldr.w	r2, [sp, #14]
 800be9c:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
 800be9e:	f8dd 2012 	ldr.w	r2, [sp, #18]
 800bea2:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
 800bea4:	6823      	ldr	r3, [r4, #0]
 800bea6:	3301      	adds	r3, #1
 800bea8:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
 800beaa:	e7d2      	b.n	800be52 <flash_map_read_mfg+0x18>
            return -1;
 800beac:	f04f 33ff 	mov.w	r3, #4294967295
 800beb0:	e7db      	b.n	800be6a <flash_map_read_mfg+0x30>
	...

0800beb4 <flash_area_open>:
{
 800beb4:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
 800beb6:	4b0d      	ldr	r3, [pc, #52]	; (800beec <flash_area_open+0x38>)
 800beb8:	681d      	ldr	r5, [r3, #0]
 800beba:	b1a5      	cbz	r5, 800bee6 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
 800bebc:	2300      	movs	r3, #0
 800bebe:	4a0c      	ldr	r2, [pc, #48]	; (800bef0 <flash_area_open+0x3c>)
 800bec0:	6812      	ldr	r2, [r2, #0]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	dd0b      	ble.n	800bede <flash_area_open+0x2a>
        area = flash_map + i;
 800bec6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800beca:	00a2      	lsls	r2, r4, #2
 800becc:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
 800bece:	5caa      	ldrb	r2, [r5, r2]
 800bed0:	4282      	cmp	r2, r0
 800bed2:	d001      	beq.n	800bed8 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
 800bed4:	3301      	adds	r3, #1
 800bed6:	e7f2      	b.n	800bebe <flash_area_open+0xa>
            *fap = area;
 800bed8:	600c      	str	r4, [r1, #0]
            return 0;
 800beda:	2000      	movs	r0, #0
 800bedc:	e001      	b.n	800bee2 <flash_area_open+0x2e>
    return SYS_ENOENT;
 800bede:	f06f 0003 	mvn.w	r0, #3
}
 800bee2:	bc30      	pop	{r4, r5}
 800bee4:	4770      	bx	lr
        return SYS_EACCES;
 800bee6:	f06f 0006 	mvn.w	r0, #6
 800beea:	e7fa      	b.n	800bee2 <flash_area_open+0x2e>
 800beec:	20002f70 	.word	0x20002f70
 800bef0:	20002f74 	.word	0x20002f74

0800bef4 <flash_area_read>:
{
 800bef4:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
 800bef6:	6884      	ldr	r4, [r0, #8]
 800bef8:	428c      	cmp	r4, r1
 800befa:	d308      	bcc.n	800bf0e <flash_area_read+0x1a>
 800befc:	18cd      	adds	r5, r1, r3
 800befe:	42ac      	cmp	r4, r5
 800bf00:	d308      	bcc.n	800bf14 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
 800bf02:	6844      	ldr	r4, [r0, #4]
 800bf04:	4421      	add	r1, r4
 800bf06:	7840      	ldrb	r0, [r0, #1]
 800bf08:	f000 fc87 	bl	800c81a <hal_flash_read>
}
 800bf0c:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
 800bf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf12:	e7fb      	b.n	800bf0c <flash_area_read+0x18>
 800bf14:	f04f 30ff 	mov.w	r0, #4294967295
 800bf18:	e7f8      	b.n	800bf0c <flash_area_read+0x18>
	...

0800bf1c <flash_map_init>:

void
flash_map_init(void)
{
 800bf1c:	b510      	push	{r4, lr}
 800bf1e:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 800bf20:	4b14      	ldr	r3, [pc, #80]	; (800bf74 <flash_map_init+0x58>)
 800bf22:	781b      	ldrb	r3, [r3, #0]
 800bf24:	b303      	cbz	r3, 800bf68 <flash_map_init+0x4c>

    rc = hal_flash_init();
 800bf26:	f000 fc64 	bl	800c7f2 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
 800bf2a:	b138      	cbz	r0, 800bf3c <flash_map_init+0x20>
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	9000      	str	r0, [sp, #0]
 800bf30:	4b11      	ldr	r3, [pc, #68]	; (800bf78 <flash_map_init+0x5c>)
 800bf32:	681c      	ldr	r4, [r3, #0]
 800bf34:	4603      	mov	r3, r0
 800bf36:	4602      	mov	r2, r0
 800bf38:	4601      	mov	r1, r0
 800bf3a:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
 800bf3c:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <flash_map_init+0x60>)
 800bf3e:	4a10      	ldr	r2, [pc, #64]	; (800bf80 <flash_map_init+0x64>)
 800bf40:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
 800bf42:	4b10      	ldr	r3, [pc, #64]	; (800bf84 <flash_map_init+0x68>)
 800bf44:	2206      	movs	r2, #6
 800bf46:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
 800bf48:	aa03      	add	r2, sp, #12
 800bf4a:	490f      	ldr	r1, [pc, #60]	; (800bf88 <flash_map_init+0x6c>)
 800bf4c:	200a      	movs	r0, #10
 800bf4e:	f7ff ff74 	bl	800be3a <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
 800bf52:	b938      	cbnz	r0, 800bf64 <flash_map_init+0x48>
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	dd04      	ble.n	800bf64 <flash_map_init+0x48>
        flash_map = mfg_areas;
 800bf5a:	4a08      	ldr	r2, [pc, #32]	; (800bf7c <flash_map_init+0x60>)
 800bf5c:	490a      	ldr	r1, [pc, #40]	; (800bf88 <flash_map_init+0x6c>)
 800bf5e:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
 800bf60:	4a08      	ldr	r2, [pc, #32]	; (800bf84 <flash_map_init+0x68>)
 800bf62:	6013      	str	r3, [r2, #0]
    }
}
 800bf64:	b004      	add	sp, #16
 800bf66:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
 800bf68:	461a      	mov	r2, r3
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7f9 ff41 	bl	8005df4 <__assert_func>
 800bf72:	bf00      	nop
 800bf74:	20002e28 	.word	0x20002e28
 800bf78:	20000148 	.word	0x20000148
 800bf7c:	20002f70 	.word	0x20002f70
 800bf80:	0800fa60 	.word	0x0800fa60
 800bf84:	20002f74 	.word	0x20002f74
 800bf88:	20002d08 	.word	0x20002d08

0800bf8c <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
 800bf8c:	4770      	bx	lr
	...

0800bf90 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
 800bf90:	b530      	push	{r4, r5, lr}
 800bf92:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
 800bf94:	7885      	ldrb	r5, [r0, #2]
 800bf96:	4b21      	ldr	r3, [pc, #132]	; (800c01c <mfg_seek_next_aux+0x8c>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	429d      	cmp	r5, r3
 800bf9c:	da32      	bge.n	800c004 <mfg_seek_next_aux+0x74>
 800bf9e:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
 800bfa0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800bfa4:	0093      	lsls	r3, r2, #2
 800bfa6:	a901      	add	r1, sp, #4
 800bfa8:	4a1d      	ldr	r2, [pc, #116]	; (800c020 <mfg_seek_next_aux+0x90>)
 800bfaa:	5cd0      	ldrb	r0, [r2, r3]
 800bfac:	f7ff ff82 	bl	800beb4 <flash_area_open>
    if (rc != 0) {
 800bfb0:	bb58      	cbnz	r0, 800c00a <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
 800bfb2:	6862      	ldr	r2, [r4, #4]
 800bfb4:	b9c2      	cbnz	r2, 800bfe8 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
 800bfb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfba:	00aa      	lsls	r2, r5, #2
 800bfbc:	4b18      	ldr	r3, [pc, #96]	; (800c020 <mfg_seek_next_aux+0x90>)
 800bfbe:	4413      	add	r3, r2
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
 800bfc4:	6861      	ldr	r1, [r4, #4]
 800bfc6:	9801      	ldr	r0, [sp, #4]
 800bfc8:	6883      	ldr	r3, [r0, #8]
 800bfca:	3b08      	subs	r3, #8
 800bfcc:	4299      	cmp	r1, r3
 800bfce:	d310      	bcc.n	800bff2 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
 800bfd0:	78a3      	ldrb	r3, [r4, #2]
 800bfd2:	1c59      	adds	r1, r3, #1
 800bfd4:	4a11      	ldr	r2, [pc, #68]	; (800c01c <mfg_seek_next_aux+0x8c>)
 800bfd6:	6812      	ldr	r2, [r2, #0]
 800bfd8:	4291      	cmp	r1, r2
 800bfda:	da19      	bge.n	800c010 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
 800bfdc:	2200      	movs	r2, #0
 800bfde:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
 800bfe0:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
 800bfe2:	f06f 0305 	mvn.w	r3, #5
 800bfe6:	e015      	b.n	800c014 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
 800bfe8:	7863      	ldrb	r3, [r4, #1]
 800bfea:	4413      	add	r3, r2
 800bfec:	3302      	adds	r3, #2
 800bfee:	6063      	str	r3, [r4, #4]
 800bff0:	e7e8      	b.n	800bfc4 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
 800bff2:	2302      	movs	r3, #2
 800bff4:	4622      	mov	r2, r4
 800bff6:	f7ff ff7d 	bl	800bef4 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
 800bffa:	4603      	mov	r3, r0
 800bffc:	b150      	cbz	r0, 800c014 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
 800bffe:	f06f 0304 	mvn.w	r3, #4
 800c002:	e007      	b.n	800c014 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
 800c004:	f06f 0301 	mvn.w	r3, #1
 800c008:	e004      	b.n	800c014 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
 800c00a:	f06f 0304 	mvn.w	r3, #4
 800c00e:	e001      	b.n	800c014 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
 800c010:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
 800c014:	4618      	mov	r0, r3
 800c016:	b003      	add	sp, #12
 800c018:	bd30      	pop	{r4, r5, pc}
 800c01a:	bf00      	nop
 800c01c:	20002d9c 	.word	0x20002d9c
 800c020:	20002d84 	.word	0x20002d84

0800c024 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
 800c024:	b530      	push	{r4, r5, lr}
 800c026:	b085      	sub	sp, #20
 800c028:	4605      	mov	r5, r0
 800c02a:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
 800c02c:	a903      	add	r1, sp, #12
 800c02e:	f7ff ff41 	bl	800beb4 <flash_area_open>
    if (rc != 0) {
 800c032:	b9e8      	cbnz	r0, 800c070 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
 800c034:	9803      	ldr	r0, [sp, #12]
 800c036:	6881      	ldr	r1, [r0, #8]
 800c038:	2308      	movs	r3, #8
 800c03a:	aa01      	add	r2, sp, #4
 800c03c:	3908      	subs	r1, #8
 800c03e:	f7ff ff59 	bl	800bef4 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
 800c042:	4601      	mov	r1, r0
 800c044:	b9b8      	cbnz	r0, 800c076 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
 800c046:	9a02      	ldr	r2, [sp, #8]
 800c048:	4b11      	ldr	r3, [pc, #68]	; (800c090 <mfg_read_mmr+0x6c>)
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d116      	bne.n	800c07c <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
 800c04e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c052:	2b02      	cmp	r3, #2
 800c054:	d115      	bne.n	800c082 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
 800c056:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800c05a:	9b03      	ldr	r3, [sp, #12]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d812      	bhi.n	800c088 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
 800c062:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
 800c064:	7025      	strb	r5, [r4, #0]
 800c066:	6063      	str	r3, [r4, #4]
 800c068:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
 800c06a:	4608      	mov	r0, r1
 800c06c:	b005      	add	sp, #20
 800c06e:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
 800c070:	f06f 0104 	mvn.w	r1, #4
 800c074:	e7f9      	b.n	800c06a <mfg_read_mmr+0x46>
        return SYS_EIO;
 800c076:	f06f 0104 	mvn.w	r1, #4
 800c07a:	e7f6      	b.n	800c06a <mfg_read_mmr+0x46>
        return SYS_ENODEV;
 800c07c:	f06f 0108 	mvn.w	r1, #8
 800c080:	e7f3      	b.n	800c06a <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
 800c082:	f06f 010b 	mvn.w	r1, #11
 800c086:	e7f0      	b.n	800c06a <mfg_read_mmr+0x46>
        return SYS_ENODEV;
 800c088:	f06f 0108 	mvn.w	r1, #8
 800c08c:	e7ed      	b.n	800c06a <mfg_read_mmr+0x46>
 800c08e:	bf00      	nop
 800c090:	3bb2a269 	.word	0x3bb2a269

0800c094 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
 800c094:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
 800c096:	2300      	movs	r3, #0
 800c098:	4a11      	ldr	r2, [pc, #68]	; (800c0e0 <mfg_read_next_mmr+0x4c>)
 800c09a:	6812      	ldr	r2, [r2, #0]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	dd08      	ble.n	800c0b2 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
 800c0a0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800c0a4:	008a      	lsls	r2, r1, #2
 800c0a6:	490f      	ldr	r1, [pc, #60]	; (800c0e4 <mfg_read_next_mmr+0x50>)
 800c0a8:	5c8a      	ldrb	r2, [r1, r2]
 800c0aa:	4282      	cmp	r2, r0
 800c0ac:	d011      	beq.n	800c0d2 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	e7f2      	b.n	800c098 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
 800c0b2:	2a01      	cmp	r2, #1
 800c0b4:	dc11      	bgt.n	800c0da <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
 800c0b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800c0ba:	0093      	lsls	r3, r2, #2
 800c0bc:	4909      	ldr	r1, [pc, #36]	; (800c0e4 <mfg_read_next_mmr+0x50>)
 800c0be:	4419      	add	r1, r3
 800c0c0:	f7ff ffb0 	bl	800c024 <mfg_read_mmr>
    if (rc != 0) {
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	b930      	cbnz	r0, 800c0d6 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
 800c0c8:	4905      	ldr	r1, [pc, #20]	; (800c0e0 <mfg_read_next_mmr+0x4c>)
 800c0ca:	680a      	ldr	r2, [r1, #0]
 800c0cc:	3201      	adds	r2, #1
 800c0ce:	600a      	str	r2, [r1, #0]
    return 0;
 800c0d0:	e001      	b.n	800c0d6 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
 800c0d2:	f06f 030a 	mvn.w	r3, #10
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
 800c0da:	f04f 33ff 	mov.w	r3, #4294967295
 800c0de:	e7fa      	b.n	800c0d6 <mfg_read_next_mmr+0x42>
 800c0e0:	20002d9c 	.word	0x20002d9c
 800c0e4:	20002d84 	.word	0x20002d84

0800c0e8 <mfg_open_flash_area>:
{
 800c0e8:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
 800c0ea:	7883      	ldrb	r3, [r0, #2]
 800c0ec:	4a0b      	ldr	r2, [pc, #44]	; (800c11c <mfg_open_flash_area+0x34>)
 800c0ee:	6812      	ldr	r2, [r2, #0]
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	da0a      	bge.n	800c10a <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
 800c0f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c0f8:	009a      	lsls	r2, r3, #2
 800c0fa:	4b09      	ldr	r3, [pc, #36]	; (800c120 <mfg_open_flash_area+0x38>)
 800c0fc:	5c98      	ldrb	r0, [r3, r2]
 800c0fe:	f7ff fed9 	bl	800beb4 <flash_area_open>
    if (rc != 0) {
 800c102:	4603      	mov	r3, r0
 800c104:	b938      	cbnz	r0, 800c116 <mfg_open_flash_area+0x2e>
}
 800c106:	4618      	mov	r0, r3
 800c108:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
 800c10a:	2300      	movs	r3, #0
 800c10c:	461a      	mov	r2, r3
 800c10e:	4619      	mov	r1, r3
 800c110:	4618      	mov	r0, r3
 800c112:	f7f9 fe6f 	bl	8005df4 <__assert_func>
        return SYS_EIO;
 800c116:	f06f 0304 	mvn.w	r3, #4
 800c11a:	e7f4      	b.n	800c106 <mfg_open_flash_area+0x1e>
 800c11c:	20002d9c 	.word	0x20002d9c
 800c120:	20002d84 	.word	0x20002d84

0800c124 <mfg_read_tlv_body>:
{
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	4606      	mov	r6, r0
 800c12a:	460c      	mov	r4, r1
 800c12c:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
 800c12e:	a901      	add	r1, sp, #4
 800c130:	f7ff ffda 	bl	800c0e8 <mfg_open_flash_area>
    if (rc != 0) {
 800c134:	4603      	mov	r3, r0
 800c136:	b110      	cbz	r0, 800c13e <mfg_read_tlv_body+0x1a>
}
 800c138:	4618      	mov	r0, r3
 800c13a:	b002      	add	sp, #8
 800c13c:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
 800c13e:	462a      	mov	r2, r5
 800c140:	2100      	movs	r1, #0
 800c142:	4620      	mov	r0, r4
 800c144:	f7fb faf3 	bl	800772e <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
 800c148:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
 800c14a:	6871      	ldr	r1, [r6, #4]
 800c14c:	42ab      	cmp	r3, r5
 800c14e:	bfa8      	it	ge
 800c150:	462b      	movge	r3, r5
 800c152:	4622      	mov	r2, r4
 800c154:	3102      	adds	r1, #2
 800c156:	9801      	ldr	r0, [sp, #4]
 800c158:	f7ff fecc 	bl	800bef4 <flash_area_read>
    if (rc != 0) {
 800c15c:	4603      	mov	r3, r0
 800c15e:	2800      	cmp	r0, #0
 800c160:	d0ea      	beq.n	800c138 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
 800c162:	f06f 0304 	mvn.w	r3, #4
 800c166:	e7e7      	b.n	800c138 <mfg_read_tlv_body+0x14>

0800c168 <mfg_seek_next>:
{
 800c168:	b510      	push	{r4, lr}
 800c16a:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
 800c16c:	4620      	mov	r0, r4
 800c16e:	f7ff ff0f 	bl	800bf90 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
 800c172:	f110 0f06 	cmn.w	r0, #6
 800c176:	d0f9      	beq.n	800c16c <mfg_seek_next+0x4>
}
 800c178:	bd10      	pop	{r4, pc}

0800c17a <mfg_seek_next_with_type>:
{
 800c17a:	b538      	push	{r3, r4, r5, lr}
 800c17c:	4604      	mov	r4, r0
 800c17e:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
 800c180:	4620      	mov	r0, r4
 800c182:	f7ff fff1 	bl	800c168 <mfg_seek_next>
        if (rc != 0) {
 800c186:	4602      	mov	r2, r0
 800c188:	b910      	cbnz	r0, 800c190 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
 800c18a:	7823      	ldrb	r3, [r4, #0]
 800c18c:	42ab      	cmp	r3, r5
 800c18e:	d1f7      	bne.n	800c180 <mfg_seek_next_with_type+0x6>
}
 800c190:	4610      	mov	r0, r2
 800c192:	bd38      	pop	{r3, r4, r5, pc}

0800c194 <mfg_read_tlv_flash_area>:
{
 800c194:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
 800c196:	220a      	movs	r2, #10
 800c198:	f7ff ffc4 	bl	800c124 <mfg_read_tlv_body>
}
 800c19c:	bd08      	pop	{r3, pc}

0800c19e <mfg_read_tlv_mmr_ref>:
{
 800c19e:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	f7ff ffbf 	bl	800c124 <mfg_read_tlv_body>
}
 800c1a6:	bd08      	pop	{r3, pc}

0800c1a8 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
 800c1a8:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
 800c1aa:	4b0b      	ldr	r3, [pc, #44]	; (800c1d8 <mfg_init+0x30>)
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	b94b      	cbnz	r3, 800c1c4 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
 800c1b0:	4b09      	ldr	r3, [pc, #36]	; (800c1d8 <mfg_init+0x30>)
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 800c1b6:	4b09      	ldr	r3, [pc, #36]	; (800c1dc <mfg_init+0x34>)
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	b123      	cbz	r3, 800c1c6 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
 800c1bc:	2000      	movs	r0, #0
 800c1be:	f7ff ff69 	bl	800c094 <mfg_read_next_mmr>
    if (rc != 0) {
 800c1c2:	b128      	cbz	r0, 800c1d0 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
 800c1c4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7f9 fe12 	bl	8005df4 <__assert_func>
    rc = mfg_read_mmr_refs();
 800c1d0:	f000 f80e 	bl	800c1f0 <mfg_read_mmr_refs>
err:
 800c1d4:	e7f6      	b.n	800c1c4 <mfg_init+0x1c>
 800c1d6:	bf00      	nop
 800c1d8:	20002d80 	.word	0x20002d80
 800c1dc:	20002e28 	.word	0x20002e28

0800c1e0 <mfg_open>:
{
 800c1e0:	b510      	push	{r4, lr}
 800c1e2:	4604      	mov	r4, r0
    mfg_init();
 800c1e4:	f7ff ffe0 	bl	800c1a8 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	6023      	str	r3, [r4, #0]
 800c1ec:	6063      	str	r3, [r4, #4]
}
 800c1ee:	bd10      	pop	{r4, pc}

0800c1f0 <mfg_read_mmr_refs>:
{
 800c1f0:	b500      	push	{lr}
 800c1f2:	b085      	sub	sp, #20
    mfg_open(&reader);
 800c1f4:	a801      	add	r0, sp, #4
 800c1f6:	f7ff fff3 	bl	800c1e0 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
 800c1fa:	2104      	movs	r1, #4
 800c1fc:	eb0d 0001 	add.w	r0, sp, r1
 800c200:	f7ff ffbb 	bl	800c17a <mfg_seek_next_with_type>
 800c204:	4603      	mov	r3, r0
        switch (rc) {
 800c206:	f110 0f0f 	cmn.w	r0, #15
 800c20a:	d004      	beq.n	800c216 <mfg_read_mmr_refs+0x26>
 800c20c:	b128      	cbz	r0, 800c21a <mfg_read_mmr_refs+0x2a>
}
 800c20e:	4618      	mov	r0, r3
 800c210:	b005      	add	sp, #20
 800c212:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
 800c216:	2300      	movs	r3, #0
 800c218:	e7f9      	b.n	800c20e <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
 800c21a:	a903      	add	r1, sp, #12
 800c21c:	a801      	add	r0, sp, #4
 800c21e:	f7ff ffbe 	bl	800c19e <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
 800c222:	4603      	mov	r3, r0
 800c224:	2800      	cmp	r0, #0
 800c226:	d1f2      	bne.n	800c20e <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
 800c228:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800c22c:	f7ff ff32 	bl	800c094 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
 800c230:	4603      	mov	r3, r0
 800c232:	2800      	cmp	r0, #0
 800c234:	d0e1      	beq.n	800c1fa <mfg_read_mmr_refs+0xa>
 800c236:	f110 0f0b 	cmn.w	r0, #11
 800c23a:	d0de      	beq.n	800c1fa <mfg_read_mmr_refs+0xa>
 800c23c:	e7e7      	b.n	800c20e <mfg_read_mmr_refs+0x1e>
	...

0800c240 <vsscanf>:
{
	return (int)(bitmap[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1;
}

int vsscanf(const char *buffer, const char *format, va_list ap)
{
 800c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c244:	b08f      	sub	sp, #60	; 0x3c
 800c246:	9002      	str	r0, [sp, #8]
 800c248:	9203      	str	r2, [sp, #12]
	const char *p = format;
	char ch;
	unsigned char uc;
	const char *q = buffer;
 800c24a:	4605      	mov	r5, r0
	enum bail bail = bail_none;
	int sign;
	int converted = 0;	/* Successful conversions */
	unsigned long matchmap[((1 << CHAR_BIT) + (LONG_BIT - 1)) / LONG_BIT];
	int matchinv = 0;	/* Is match map inverted? */
	unsigned char range_start = 0;
 800c24c:	f04f 0a00 	mov.w	sl, #0
	int matchinv = 0;	/* Is match map inverted? */
 800c250:	46d1      	mov	r9, sl
	int converted = 0;	/* Successful conversions */
 800c252:	f8cd a000 	str.w	sl, [sp]
	char *sarg = NULL;	/* %s %c or %[ string argument */
 800c256:	4657      	mov	r7, sl
	} state = st_normal;
 800c258:	4652      	mov	r2, sl
	enum flags flags = 0;
 800c25a:	46d3      	mov	fp, sl
	unsigned int width = UINT_MAX;
 800c25c:	f04f 34ff 	mov.w	r4, #4294967295
	int rank = rank_int;	/* Default rank */
 800c260:	f8cd a004 	str.w	sl, [sp, #4]
 800c264:	4623      	mov	r3, r4
 800c266:	4654      	mov	r4, sl
 800c268:	4698      	mov	r8, r3
	(void)sign;

	while ((ch = *p++) && !bail) {
 800c26a:	e1f6      	b.n	800c65a <vsscanf+0x41a>
		switch (state) {
		case st_normal:
			if (ch == '%') {
 800c26c:	2b25      	cmp	r3, #37	; 0x25
 800c26e:	f000 8270 	beq.w	800c752 <vsscanf+0x512>
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
 800c272:	2b20      	cmp	r3, #32
 800c274:	d00b      	beq.n	800c28e <vsscanf+0x4e>
 800c276:	2b0a      	cmp	r3, #10
 800c278:	d009      	beq.n	800c28e <vsscanf+0x4e>
 800c27a:	2b09      	cmp	r3, #9
 800c27c:	d007      	beq.n	800c28e <vsscanf+0x4e>
 800c27e:	2b0d      	cmp	r3, #13
 800c280:	d005      	beq.n	800c28e <vsscanf+0x4e>
				rank = rank_int;
				width = UINT_MAX;
			} else if (isspace((unsigned char)ch)) {
				q = skipspace(q);
			} else {
				if (*q == ch)
 800c282:	7829      	ldrb	r1, [r5, #0]
 800c284:	4299      	cmp	r1, r3
 800c286:	d00c      	beq.n	800c2a2 <vsscanf+0x62>
					q++;
				else
					bail = bail_err; /* Match failure */
 800c288:	2402      	movs	r4, #2
 800c28a:	e1e5      	b.n	800c658 <vsscanf+0x418>
		p++;
 800c28c:	3501      	adds	r5, #1
	while (isspace((unsigned char)*p))
 800c28e:	782b      	ldrb	r3, [r5, #0]
 800c290:	2b20      	cmp	r3, #32
 800c292:	d0fb      	beq.n	800c28c <vsscanf+0x4c>
 800c294:	2b0a      	cmp	r3, #10
 800c296:	d0f9      	beq.n	800c28c <vsscanf+0x4c>
 800c298:	2b09      	cmp	r3, #9
 800c29a:	d0f7      	beq.n	800c28c <vsscanf+0x4c>
 800c29c:	2b0d      	cmp	r3, #13
 800c29e:	d0f5      	beq.n	800c28c <vsscanf+0x4c>
 800c2a0:	e1da      	b.n	800c658 <vsscanf+0x418>
					q++;
 800c2a2:	3501      	adds	r5, #1
 800c2a4:	e1d8      	b.n	800c658 <vsscanf+0x418>
			}
			break;

		case st_flags:
			switch (ch) {
 800c2a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c2a8:	d00c      	beq.n	800c2c4 <vsscanf+0x84>
 800c2aa:	f0c0 825a 	bcc.w	800c762 <vsscanf+0x522>
 800c2ae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c2b2:	2a09      	cmp	r2, #9
 800c2b4:	f200 8255 	bhi.w	800c762 <vsscanf+0x522>
			case '*':
				flags |= FL_SPLAT;
				break;
			case '0'...'9':
				width = (ch - '0');
 800c2b8:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
				state = st_width;
				flags |= FL_WIDTH;
 800c2bc:	f04b 0b04 	orr.w	fp, fp, #4
				state = st_width;
 800c2c0:	2202      	movs	r2, #2
				break;
 800c2c2:	e1c9      	b.n	800c658 <vsscanf+0x418>
				flags |= FL_SPLAT;
 800c2c4:	f04b 0b01 	orr.w	fp, fp, #1
				break;
 800c2c8:	e1c6      	b.n	800c658 <vsscanf+0x418>
				break;
			}
			break;

		case st_width:
			if (ch >= '0' && ch <= '9') {
 800c2ca:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800c2ce:	b2c0      	uxtb	r0, r0
 800c2d0:	2809      	cmp	r0, #9
 800c2d2:	f200 8249 	bhi.w	800c768 <vsscanf+0x528>
				width = width * 10 + (ch - '0');
 800c2d6:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 800c2da:	ea4f 0148 	mov.w	r1, r8, lsl #1
 800c2de:	eb03 0801 	add.w	r8, r3, r1
 800c2e2:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800c2e6:	e1b7      	b.n	800c658 <vsscanf+0x418>
				p--;	/* Process this character again */
			}
			break;

		case st_modifiers:
			switch (ch) {
 800c2e8:	f1a3 014c 	sub.w	r1, r3, #76	; 0x4c
 800c2ec:	292e      	cmp	r1, #46	; 0x2e
 800c2ee:	d83b      	bhi.n	800c368 <vsscanf+0x128>
 800c2f0:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c2f4:	003a002f 	.word	0x003a002f
 800c2f8:	003a003a 	.word	0x003a003a
 800c2fc:	003a003a 	.word	0x003a003a
 800c300:	003a003a 	.word	0x003a003a
 800c304:	003a003a 	.word	0x003a003a
 800c308:	003a003a 	.word	0x003a003a
 800c30c:	003a003a 	.word	0x003a003a
 800c310:	003a003a 	.word	0x003a003a
 800c314:	003a003a 	.word	0x003a003a
 800c318:	003a003a 	.word	0x003a003a
 800c31c:	003a003a 	.word	0x003a003a
 800c320:	003a003a 	.word	0x003a003a
 800c324:	003a003a 	.word	0x003a003a
 800c328:	003a003a 	.word	0x003a003a
 800c32c:	003a0032 	.word	0x003a0032
 800c330:	003a002f 	.word	0x003a002f
 800c334:	003a0036 	.word	0x003a0036
 800c338:	003a003a 	.word	0x003a003a
 800c33c:	002f003a 	.word	0x002f003a
 800c340:	003a003a 	.word	0x003a003a
 800c344:	003a023d 	.word	0x003a023d
 800c348:	003a003a 	.word	0x003a003a
 800c34c:	003a003a 	.word	0x003a003a
 800c350:	023d      	.short	0x023d
				break;
			case 'l':
				rank++;	/* Longer rank */
				break;
			case 'j':
				rank = INTMAX_RANK;
 800c352:	2302      	movs	r3, #2
 800c354:	9301      	str	r3, [sp, #4]
 800c356:	e17f      	b.n	800c658 <vsscanf+0x418>
				rank--;	/* Shorter rank */
 800c358:	9b01      	ldr	r3, [sp, #4]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	9301      	str	r3, [sp, #4]
				break;
 800c35e:	e17b      	b.n	800c658 <vsscanf+0x418>
				rank++;	/* Longer rank */
 800c360:	9b01      	ldr	r3, [sp, #4]
 800c362:	3301      	adds	r3, #1
 800c364:	9301      	str	r3, [sp, #4]
				break;
 800c366:	e177      	b.n	800c658 <vsscanf+0x418>
				/* Output modifiers - terminal sequences */
				/* Next state will be normal */
				state = st_normal;

				/* Canonicalize rank */
				if (rank < MIN_RANK)
 800c368:	9a01      	ldr	r2, [sp, #4]
 800c36a:	f112 0f02 	cmn.w	r2, #2
 800c36e:	db04      	blt.n	800c37a <vsscanf+0x13a>
					rank = MIN_RANK;
				else if (rank > MAX_RANK)
 800c370:	2a02      	cmp	r2, #2
 800c372:	dd05      	ble.n	800c380 <vsscanf+0x140>
					rank = MAX_RANK;
 800c374:	2202      	movs	r2, #2
 800c376:	9201      	str	r2, [sp, #4]
 800c378:	e002      	b.n	800c380 <vsscanf+0x140>
					rank = MIN_RANK;
 800c37a:	f06f 0201 	mvn.w	r2, #1
 800c37e:	9201      	str	r2, [sp, #4]

				switch (ch) {
 800c380:	3b25      	subs	r3, #37	; 0x25
 800c382:	2b53      	cmp	r3, #83	; 0x53
 800c384:	f200 81f6 	bhi.w	800c774 <vsscanf+0x534>
 800c388:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c38c:	01f4014e 	.word	0x01f4014e
 800c390:	01f401f4 	.word	0x01f401f4
 800c394:	01f401f4 	.word	0x01f401f4
 800c398:	01f401f4 	.word	0x01f401f4
 800c39c:	01f401f4 	.word	0x01f401f4
 800c3a0:	01f401f4 	.word	0x01f401f4
 800c3a4:	01f401f4 	.word	0x01f401f4
 800c3a8:	01f401f4 	.word	0x01f401f4
 800c3ac:	01f401f4 	.word	0x01f401f4
 800c3b0:	01f401f4 	.word	0x01f401f4
 800c3b4:	01f401f4 	.word	0x01f401f4
 800c3b8:	01f401f4 	.word	0x01f401f4
 800c3bc:	01f401f4 	.word	0x01f401f4
 800c3c0:	01f401f4 	.word	0x01f401f4
 800c3c4:	01f401f4 	.word	0x01f401f4
 800c3c8:	01f401f4 	.word	0x01f401f4
 800c3cc:	01f401f4 	.word	0x01f401f4
 800c3d0:	01f401f4 	.word	0x01f401f4
 800c3d4:	01f401f4 	.word	0x01f401f4
 800c3d8:	01f401f4 	.word	0x01f401f4
 800c3dc:	01f401f4 	.word	0x01f401f4
 800c3e0:	007801f4 	.word	0x007801f4
 800c3e4:	01f401f4 	.word	0x01f401f4
 800c3e8:	01f401f4 	.word	0x01f401f4
 800c3ec:	01f401f4 	.word	0x01f401f4
 800c3f0:	005a01f4 	.word	0x005a01f4
 800c3f4:	01f401f4 	.word	0x01f401f4
 800c3f8:	01f4013c 	.word	0x01f4013c
 800c3fc:	01f401f4 	.word	0x01f401f4
 800c400:	01f401f4 	.word	0x01f401f4
 800c404:	01f401f4 	.word	0x01f401f4
 800c408:	005400cb 	.word	0x005400cb
 800c40c:	01f401f4 	.word	0x01f401f4
 800c410:	01f401f4 	.word	0x01f401f4
 800c414:	01f4007d 	.word	0x01f4007d
 800c418:	01f401f4 	.word	0x01f401f4
 800c41c:	005c01f4 	.word	0x005c01f4
 800c420:	00780056 	.word	0x00780056
 800c424:	01f401f4 	.word	0x01f401f4
 800c428:	01f400f7 	.word	0x01f400f7
 800c42c:	01f40058 	.word	0x01f40058
 800c430:	005a01f4 	.word	0x005a01f4
					base = 0;
					sign = 1;
					goto scan_int;

				case 'd':	/* Decimal integer */
					base = 10;
 800c434:	220a      	movs	r2, #10
					sign = 1;
					goto scan_int;
 800c436:	e029      	b.n	800c48c <vsscanf+0x24c>

				case 'o':	/* Octal integer */
					base = 8;
 800c438:	2208      	movs	r2, #8
					sign = 0;
					goto scan_int;
 800c43a:	e027      	b.n	800c48c <vsscanf+0x24c>

				case 'u':	/* Unsigned decimal integer */
					base = 10;
 800c43c:	220a      	movs	r2, #10
					sign = 0;
					goto scan_int;
 800c43e:	e025      	b.n	800c48c <vsscanf+0x24c>

				case 'x':	/* Hexadecimal integer */
				case 'X':
					base = 16;
 800c440:	2210      	movs	r2, #16
					sign = 0;
					goto scan_int;
 800c442:	e023      	b.n	800c48c <vsscanf+0x24c>

				case 'n':	/* # of characters consumed */
					val = (q - buffer);
 800c444:	9b02      	ldr	r3, [sp, #8]
 800c446:	1ae8      	subs	r0, r5, r3
 800c448:	17c1      	asrs	r1, r0, #31
					if (!(flags & FL_SPLAT))
						converted++;
					/* fall through */

				      set_integer:
					if (!(flags & FL_SPLAT)) {
 800c44a:	f01b 0f01 	tst.w	fp, #1
 800c44e:	f040 8197 	bne.w	800c780 <vsscanf+0x540>
						switch (rank) {
 800c452:	9b01      	ldr	r3, [sp, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d04e      	beq.n	800c4f6 <vsscanf+0x2b6>
 800c458:	2b00      	cmp	r3, #0
 800c45a:	dd37      	ble.n	800c4cc <vsscanf+0x28c>
 800c45c:	9a01      	ldr	r2, [sp, #4]
 800c45e:	2a02      	cmp	r2, #2
 800c460:	d057      	beq.n	800c512 <vsscanf+0x2d2>
 800c462:	db4f      	blt.n	800c504 <vsscanf+0x2c4>
 800c464:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c468:	429a      	cmp	r2, r3
 800c46a:	f040 818b 	bne.w	800c784 <vsscanf+0x544>
							*va_arg(ap,
								unsigned long
								long *) = val;
							break;
						case rank_ptr:
							*va_arg(ap, void **) =
 800c46e:	9b03      	ldr	r3, [sp, #12]
 800c470:	1d1a      	adds	r2, r3, #4
 800c472:	9203      	str	r2, [sp, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	6018      	str	r0, [r3, #0]
				state = st_normal;
 800c478:	2200      	movs	r2, #0
								(void *)
								(uintptr_t)val;
							break;
 800c47a:	e0ed      	b.n	800c658 <vsscanf+0x418>
					base = 0;
 800c47c:	2200      	movs	r2, #0
					rank = rank_ptr;
 800c47e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c482:	9301      	str	r3, [sp, #4]
 800c484:	e002      	b.n	800c48c <vsscanf+0x24c>
					base = 0;
 800c486:	2200      	movs	r2, #0
 800c488:	e000      	b.n	800c48c <vsscanf+0x24c>
		p++;
 800c48a:	3501      	adds	r5, #1
	while (isspace((unsigned char)*p))
 800c48c:	782b      	ldrb	r3, [r5, #0]
 800c48e:	2b20      	cmp	r3, #32
 800c490:	d0fb      	beq.n	800c48a <vsscanf+0x24a>
 800c492:	2b0a      	cmp	r3, #10
 800c494:	d0f9      	beq.n	800c48a <vsscanf+0x24a>
 800c496:	2b09      	cmp	r3, #9
 800c498:	d0f7      	beq.n	800c48a <vsscanf+0x24a>
 800c49a:	2b0d      	cmp	r3, #13
 800c49c:	d0f5      	beq.n	800c48a <vsscanf+0x24a>
					if (!*q) {
 800c49e:	b913      	cbnz	r3, 800c4a6 <vsscanf+0x266>
						bail = bail_eof;
 800c4a0:	2401      	movs	r4, #1
				state = st_normal;
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	e0d8      	b.n	800c658 <vsscanf+0x418>
					val =
 800c4a6:	4643      	mov	r3, r8
 800c4a8:	a90d      	add	r1, sp, #52	; 0x34
 800c4aa:	4628      	mov	r0, r5
 800c4ac:	f000 fe90 	bl	800d1d0 <strntoumax>
					if (qq == q) {
 800c4b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4b2:	42ab      	cmp	r3, r5
 800c4b4:	f000 8161 	beq.w	800c77a <vsscanf+0x53a>
					if (!(flags & FL_SPLAT))
 800c4b8:	f01b 0f01 	tst.w	fp, #1
 800c4bc:	d104      	bne.n	800c4c8 <vsscanf+0x288>
						converted++;
 800c4be:	9a00      	ldr	r2, [sp, #0]
 800c4c0:	3201      	adds	r2, #1
 800c4c2:	9200      	str	r2, [sp, #0]
					q = qq;
 800c4c4:	461d      	mov	r5, r3
 800c4c6:	e7c0      	b.n	800c44a <vsscanf+0x20a>
 800c4c8:	461d      	mov	r5, r3
 800c4ca:	e7be      	b.n	800c44a <vsscanf+0x20a>
						switch (rank) {
 800c4cc:	f113 0f02 	cmn.w	r3, #2
 800c4d0:	d00a      	beq.n	800c4e8 <vsscanf+0x2a8>
 800c4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d6:	f040 8155 	bne.w	800c784 <vsscanf+0x544>
							*va_arg(ap,
 800c4da:	9b03      	ldr	r3, [sp, #12]
 800c4dc:	1d1a      	adds	r2, r3, #4
 800c4de:	9203      	str	r2, [sp, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
								*) = val;
 800c4e2:	8018      	strh	r0, [r3, #0]
				state = st_normal;
 800c4e4:	2200      	movs	r2, #0
							break;
 800c4e6:	e0b7      	b.n	800c658 <vsscanf+0x418>
							*va_arg(ap,
 800c4e8:	9b03      	ldr	r3, [sp, #12]
 800c4ea:	1d1a      	adds	r2, r3, #4
 800c4ec:	9203      	str	r2, [sp, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
								= val;
 800c4f0:	7018      	strb	r0, [r3, #0]
				state = st_normal;
 800c4f2:	2200      	movs	r2, #0
							break;
 800c4f4:	e0b0      	b.n	800c658 <vsscanf+0x418>
							*va_arg(ap,
 800c4f6:	9b03      	ldr	r3, [sp, #12]
 800c4f8:	1d1a      	adds	r2, r3, #4
 800c4fa:	9203      	str	r2, [sp, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
							    = val;
 800c4fe:	6018      	str	r0, [r3, #0]
				state = st_normal;
 800c500:	2200      	movs	r2, #0
							break;
 800c502:	e0a9      	b.n	800c658 <vsscanf+0x418>
							*va_arg(ap,
 800c504:	9b03      	ldr	r3, [sp, #12]
 800c506:	1d1a      	adds	r2, r3, #4
 800c508:	9203      	str	r2, [sp, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
								= val;
 800c50c:	6018      	str	r0, [r3, #0]
				state = st_normal;
 800c50e:	2200      	movs	r2, #0
							break;
 800c510:	e0a2      	b.n	800c658 <vsscanf+0x418>
							*va_arg(ap,
 800c512:	9b03      	ldr	r3, [sp, #12]
 800c514:	1d1a      	adds	r2, r3, #4
 800c516:	9203      	str	r2, [sp, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
								long *) = val;
 800c51a:	e9c3 0100 	strd	r0, r1, [r3]
				state = st_normal;
 800c51e:	2200      	movs	r2, #0
							break;
 800c520:	e09a      	b.n	800c658 <vsscanf+0x418>
					}
					break;

				case 'c':	/* Character */
					/* Default width == 1 */
					width = (flags & FL_WIDTH) ? width : 1;
 800c522:	f01b 0f04 	tst.w	fp, #4
 800c526:	d011      	beq.n	800c54c <vsscanf+0x30c>
 800c528:	4643      	mov	r3, r8
					if (flags & FL_SPLAT) {
 800c52a:	f01b 0f01 	tst.w	fp, #1
 800c52e:	d10f      	bne.n	800c550 <vsscanf+0x310>
								bail = bail_eof;
								break;
							}
						}
					} else {
						sarg = va_arg(ap, char *);
 800c530:	9a03      	ldr	r2, [sp, #12]
 800c532:	1d11      	adds	r1, r2, #4
 800c534:	9103      	str	r1, [sp, #12]
 800c536:	6817      	ldr	r7, [r2, #0]
						while (width--) {
 800c538:	f103 38ff 	add.w	r8, r3, #4294967295
 800c53c:	b1ab      	cbz	r3, 800c56a <vsscanf+0x32a>
							if (!*q) {
 800c53e:	782b      	ldrb	r3, [r5, #0]
 800c540:	b193      	cbz	r3, 800c568 <vsscanf+0x328>
								bail = bail_eof;
								break;
							}
							*sarg++ = *q++;
 800c542:	3501      	adds	r5, #1
 800c544:	703b      	strb	r3, [r7, #0]
 800c546:	3701      	adds	r7, #1
						while (width--) {
 800c548:	4643      	mov	r3, r8
 800c54a:	e7f5      	b.n	800c538 <vsscanf+0x2f8>
					width = (flags & FL_WIDTH) ? width : 1;
 800c54c:	2301      	movs	r3, #1
 800c54e:	e7ec      	b.n	800c52a <vsscanf+0x2ea>
						while (width--) {
 800c550:	f103 38ff 	add.w	r8, r3, #4294967295
 800c554:	b133      	cbz	r3, 800c564 <vsscanf+0x324>
							if (!*q) {
 800c556:	782a      	ldrb	r2, [r5, #0]
						while (width--) {
 800c558:	4643      	mov	r3, r8
							if (!*q) {
 800c55a:	2a00      	cmp	r2, #0
 800c55c:	d1f8      	bne.n	800c550 <vsscanf+0x310>
								bail = bail_eof;
 800c55e:	2401      	movs	r4, #1
				state = st_normal;
 800c560:	2200      	movs	r2, #0
 800c562:	e079      	b.n	800c658 <vsscanf+0x418>
 800c564:	2200      	movs	r2, #0
 800c566:	e077      	b.n	800c658 <vsscanf+0x418>
								bail = bail_eof;
 800c568:	2401      	movs	r4, #1
						}
						if (!bail)
 800c56a:	2c00      	cmp	r4, #0
 800c56c:	f040 810c 	bne.w	800c788 <vsscanf+0x548>
							converted++;
 800c570:	9b00      	ldr	r3, [sp, #0]
 800c572:	3301      	adds	r3, #1
 800c574:	9300      	str	r3, [sp, #0]
				state = st_normal;
 800c576:	2200      	movs	r2, #0
 800c578:	e06e      	b.n	800c658 <vsscanf+0x418>
					}
					break;

				case 's':	/* String */
					uc = 1;	/* Anything nonzero */
					if (flags & FL_SPLAT) {
 800c57a:	f01b 0f01 	tst.w	fp, #1
 800c57e:	d010      	beq.n	800c5a2 <vsscanf+0x362>
					uc = 1;	/* Anything nonzero */
 800c580:	2301      	movs	r3, #1
 800c582:	4641      	mov	r1, r8
						while (width-- && (uc = *q) &&
 800c584:	1e4a      	subs	r2, r1, #1
 800c586:	b389      	cbz	r1, 800c5ec <vsscanf+0x3ac>
 800c588:	782b      	ldrb	r3, [r5, #0]
 800c58a:	b38b      	cbz	r3, 800c5f0 <vsscanf+0x3b0>
 800c58c:	2b20      	cmp	r3, #32
 800c58e:	d031      	beq.n	800c5f4 <vsscanf+0x3b4>
 800c590:	2b0a      	cmp	r3, #10
 800c592:	d031      	beq.n	800c5f8 <vsscanf+0x3b8>
 800c594:	2b09      	cmp	r3, #9
 800c596:	d031      	beq.n	800c5fc <vsscanf+0x3bc>
 800c598:	2b0d      	cmp	r3, #13
 800c59a:	d031      	beq.n	800c600 <vsscanf+0x3c0>
						       !isspace(uc)) {
							q++;
 800c59c:	3501      	adds	r5, #1
						while (width-- && (uc = *q) &&
 800c59e:	4611      	mov	r1, r2
 800c5a0:	e7f0      	b.n	800c584 <vsscanf+0x344>
						}
					} else {
						char *sp;
						sp = sarg = va_arg(ap, char *);
 800c5a2:	9b03      	ldr	r3, [sp, #12]
 800c5a4:	1d1a      	adds	r2, r3, #4
 800c5a6:	9203      	str	r2, [sp, #12]
 800c5a8:	681f      	ldr	r7, [r3, #0]
 800c5aa:	463a      	mov	r2, r7
						while (width-- && (uc = *q) &&
 800c5ac:	4641      	mov	r1, r8
					uc = 1;	/* Anything nonzero */
 800c5ae:	2301      	movs	r3, #1
						while (width-- && (uc = *q) &&
 800c5b0:	f101 38ff 	add.w	r8, r1, #4294967295
 800c5b4:	b171      	cbz	r1, 800c5d4 <vsscanf+0x394>
 800c5b6:	782b      	ldrb	r3, [r5, #0]
 800c5b8:	b163      	cbz	r3, 800c5d4 <vsscanf+0x394>
 800c5ba:	2b20      	cmp	r3, #32
 800c5bc:	d00a      	beq.n	800c5d4 <vsscanf+0x394>
 800c5be:	2b0a      	cmp	r3, #10
 800c5c0:	d008      	beq.n	800c5d4 <vsscanf+0x394>
 800c5c2:	2b09      	cmp	r3, #9
 800c5c4:	d006      	beq.n	800c5d4 <vsscanf+0x394>
 800c5c6:	2b0d      	cmp	r3, #13
 800c5c8:	d004      	beq.n	800c5d4 <vsscanf+0x394>
						       !isspace(uc)) {
							*sp++ = uc;
 800c5ca:	7013      	strb	r3, [r2, #0]
							q++;
 800c5cc:	3501      	adds	r5, #1
						while (width-- && (uc = *q) &&
 800c5ce:	4641      	mov	r1, r8
							*sp++ = uc;
 800c5d0:	3201      	adds	r2, #1
 800c5d2:	e7ed      	b.n	800c5b0 <vsscanf+0x370>
						}
						if (sarg != sp) {
 800c5d4:	42ba      	cmp	r2, r7
 800c5d6:	d004      	beq.n	800c5e2 <vsscanf+0x3a2>
							/* Terminate output */
							*sp = '\0';
 800c5d8:	2100      	movs	r1, #0
 800c5da:	7011      	strb	r1, [r2, #0]
							converted++;
 800c5dc:	9a00      	ldr	r2, [sp, #0]
 800c5de:	3201      	adds	r2, #1
 800c5e0:	9200      	str	r2, [sp, #0]
						}
					}
					if (!uc)
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f000 80d2 	beq.w	800c78c <vsscanf+0x54c>
				state = st_normal;
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	e035      	b.n	800c658 <vsscanf+0x418>
						while (width-- && (uc = *q) &&
 800c5ec:	4690      	mov	r8, r2
 800c5ee:	e7f8      	b.n	800c5e2 <vsscanf+0x3a2>
 800c5f0:	4690      	mov	r8, r2
 800c5f2:	e7f6      	b.n	800c5e2 <vsscanf+0x3a2>
 800c5f4:	4690      	mov	r8, r2
 800c5f6:	e7f4      	b.n	800c5e2 <vsscanf+0x3a2>
 800c5f8:	4690      	mov	r8, r2
 800c5fa:	e7f2      	b.n	800c5e2 <vsscanf+0x3a2>
 800c5fc:	4690      	mov	r8, r2
 800c5fe:	e7f0      	b.n	800c5e2 <vsscanf+0x3a2>
 800c600:	4690      	mov	r8, r2
 800c602:	e7ee      	b.n	800c5e2 <vsscanf+0x3a2>
						bail = bail_eof;
					break;

				case '[':	/* Character range */
					sarg = (flags & FL_SPLAT) ? NULL
						: va_arg(ap, char *);
 800c604:	f01b 0f01 	tst.w	fp, #1
 800c608:	d104      	bne.n	800c614 <vsscanf+0x3d4>
 800c60a:	9b03      	ldr	r3, [sp, #12]
 800c60c:	1d1a      	adds	r2, r3, #4
 800c60e:	9203      	str	r2, [sp, #12]
 800c610:	681f      	ldr	r7, [r3, #0]
 800c612:	e000      	b.n	800c616 <vsscanf+0x3d6>
 800c614:	2700      	movs	r7, #0
					state = st_match_init;
					matchinv = 0;
					memset(matchmap, 0, sizeof matchmap);
 800c616:	2220      	movs	r2, #32
 800c618:	2100      	movs	r1, #0
 800c61a:	a805      	add	r0, sp, #20
 800c61c:	f7fb f887 	bl	800772e <memset>
					matchinv = 0;
 800c620:	f04f 0900 	mov.w	r9, #0
					state = st_match_init;
 800c624:	2204      	movs	r2, #4
					break;
 800c626:	e017      	b.n	800c658 <vsscanf+0x418>

				case '%':	/* %% sequence */
					if (*q == '%')
 800c628:	782b      	ldrb	r3, [r5, #0]
 800c62a:	2b25      	cmp	r3, #37	; 0x25
 800c62c:	d002      	beq.n	800c634 <vsscanf+0x3f4>
						q++;
					else
						bail = bail_err;
 800c62e:	2402      	movs	r4, #2
				state = st_normal;
 800c630:	2200      	movs	r2, #0
 800c632:	e011      	b.n	800c658 <vsscanf+0x418>
						q++;
 800c634:	3501      	adds	r5, #1
				state = st_normal;
 800c636:	2200      	movs	r2, #0
 800c638:	e00e      	b.n	800c658 <vsscanf+0x418>
				}
			}
			break;

		case st_match_init:	/* Initial state for %[ match */
			if (ch == '^' && !(flags & FL_INV)) {
 800c63a:	2b5e      	cmp	r3, #94	; 0x5e
 800c63c:	d028      	beq.n	800c690 <vsscanf+0x450>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 800c63e:	0958      	lsrs	r0, r3, #5
 800c640:	a905      	add	r1, sp, #20
 800c642:	f003 031f 	and.w	r3, r3, #31
 800c646:	2201      	movs	r2, #1
 800c648:	fa02 f303 	lsl.w	r3, r2, r3
 800c64c:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 800c650:	431a      	orrs	r2, r3
 800c652:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
				matchinv = 1;
			} else {
				set_bit(matchmap, (unsigned char)ch);
				state = st_match;
 800c656:	2205      	movs	r2, #5
 800c658:	4631      	mov	r1, r6
	while ((ch = *p++) && !bail) {
 800c65a:	1c4e      	adds	r6, r1, #1
 800c65c:	780b      	ldrb	r3, [r1, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f000 809a 	beq.w	800c798 <vsscanf+0x558>
 800c664:	2c00      	cmp	r4, #0
 800c666:	f040 8097 	bne.w	800c798 <vsscanf+0x558>
		switch (state) {
 800c66a:	2a06      	cmp	r2, #6
 800c66c:	d8f4      	bhi.n	800c658 <vsscanf+0x418>
 800c66e:	a001      	add	r0, pc, #4	; (adr r0, 800c674 <vsscanf+0x434>)
 800c670:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800c674:	0800c26d 	.word	0x0800c26d
 800c678:	0800c2a7 	.word	0x0800c2a7
 800c67c:	0800c2cb 	.word	0x0800c2cb
 800c680:	0800c2e9 	.word	0x0800c2e9
 800c684:	0800c63b 	.word	0x0800c63b
 800c688:	0800c69d 	.word	0x0800c69d
 800c68c:	0800c6c1 	.word	0x0800c6c1
			if (ch == '^' && !(flags & FL_INV)) {
 800c690:	f01b 0f02 	tst.w	fp, #2
 800c694:	d1d3      	bne.n	800c63e <vsscanf+0x3fe>
				matchinv = 1;
 800c696:	f04f 0901 	mov.w	r9, #1
 800c69a:	e7dd      	b.n	800c658 <vsscanf+0x418>
			}
			break;

		case st_match:	/* Main state for %[ match */
			if (ch == ']') {
 800c69c:	2b5d      	cmp	r3, #93	; 0x5d
 800c69e:	d02e      	beq.n	800c6fe <vsscanf+0x4be>
				state = st_normal;  ////  Added: State should return to normal after matching.
				goto match_run;
			} else if (ch == '-') {
 800c6a0:	2b2d      	cmp	r3, #45	; 0x2d
 800c6a2:	d076      	beq.n	800c792 <vsscanf+0x552>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 800c6a4:	0958      	lsrs	r0, r3, #5
 800c6a6:	a905      	add	r1, sp, #20
 800c6a8:	f003 0c1f 	and.w	ip, r3, #31
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	fa03 fc0c 	lsl.w	ip, r3, ip
 800c6b2:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800c6b6:	ea43 030c 	orr.w	r3, r3, ip
 800c6ba:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 800c6be:	e7cb      	b.n	800c658 <vsscanf+0x418>
				set_bit(matchmap, (unsigned char)ch);
			}
			break;

		case st_match_range:	/* %[ match after - */
			if (ch == ']') {
 800c6c0:	2b5d      	cmp	r3, #93	; 0x5d
 800c6c2:	d001      	beq.n	800c6c8 <vsscanf+0x488>
				/* - was last character */
				set_bit(matchmap, (unsigned char)'-');
				goto match_run;
			} else {
				int i;
				for (i = range_start; i < (unsigned char)ch;
 800c6c4:	4651      	mov	r1, sl
 800c6c6:	e016      	b.n	800c6f6 <vsscanf+0x4b6>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 800c6c8:	9b06      	ldr	r3, [sp, #24]
 800c6ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c6ce:	9306      	str	r3, [sp, #24]
				state = st_match;
			}
			break;

		      match_run:	/* Match expression finished */
			qq = q;
 800c6d0:	950d      	str	r5, [sp, #52]	; 0x34
			uc = 1;	/* Anything nonzero */
 800c6d2:	2001      	movs	r0, #1
 800c6d4:	4641      	mov	r1, r8
			while (width && (uc = *q)
 800c6d6:	e015      	b.n	800c704 <vsscanf+0x4c4>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 800c6d8:	ea4f 1c51 	mov.w	ip, r1, lsr #5
 800c6dc:	a805      	add	r0, sp, #20
 800c6de:	f001 0e1f 	and.w	lr, r1, #31
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	fa02 fe0e 	lsl.w	lr, r2, lr
 800c6e8:	f850 202c 	ldr.w	r2, [r0, ip, lsl #2]
 800c6ec:	ea42 020e 	orr.w	r2, r2, lr
 800c6f0:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
				     i++)
 800c6f4:	3101      	adds	r1, #1
				for (i = range_start; i < (unsigned char)ch;
 800c6f6:	428b      	cmp	r3, r1
 800c6f8:	dcee      	bgt.n	800c6d8 <vsscanf+0x498>
				state = st_match;
 800c6fa:	2205      	movs	r2, #5
 800c6fc:	e7ac      	b.n	800c658 <vsscanf+0x418>
				state = st_normal;  ////  Added: State should return to normal after matching.
 800c6fe:	2200      	movs	r2, #0
 800c700:	e7e6      	b.n	800c6d0 <vsscanf+0x490>
			       && test_bit(matchmap, uc)^matchinv) {
				if (sarg)
					*sarg++ = uc;
				q++;
 800c702:	3501      	adds	r5, #1
			while (width && (uc = *q)
 800c704:	b1a9      	cbz	r1, 800c732 <vsscanf+0x4f2>
 800c706:	7828      	ldrb	r0, [r5, #0]
 800c708:	b198      	cbz	r0, 800c732 <vsscanf+0x4f2>
	return (int)(bitmap[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1;
 800c70a:	0943      	lsrs	r3, r0, #5
 800c70c:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 800c710:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800c714:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800c718:	f000 0c1f 	and.w	ip, r0, #31
 800c71c:	fa23 f30c 	lsr.w	r3, r3, ip
 800c720:	f003 0301 	and.w	r3, r3, #1
			       && test_bit(matchmap, uc)^matchinv) {
 800c724:	4599      	cmp	r9, r3
 800c726:	d004      	beq.n	800c732 <vsscanf+0x4f2>
				if (sarg)
 800c728:	2f00      	cmp	r7, #0
 800c72a:	d0ea      	beq.n	800c702 <vsscanf+0x4c2>
					*sarg++ = uc;
 800c72c:	7038      	strb	r0, [r7, #0]
 800c72e:	3701      	adds	r7, #1
 800c730:	e7e7      	b.n	800c702 <vsscanf+0x4c2>
 800c732:	4688      	mov	r8, r1
			}
			if (q != qq) {   ////  Previously: if (q != qq && sarg) {
 800c734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c736:	42ab      	cmp	r3, r5
 800c738:	d009      	beq.n	800c74e <vsscanf+0x50e>
				if (sarg) {  ////  Added: For "%*...[...]" format, don't bail out.
 800c73a:	b127      	cbz	r7, 800c746 <vsscanf+0x506>
					*sarg = '\0';
 800c73c:	2300      	movs	r3, #0
 800c73e:	703b      	strb	r3, [r7, #0]
					converted++;
 800c740:	9b00      	ldr	r3, [sp, #0]
 800c742:	3301      	adds	r3, #1
 800c744:	9300      	str	r3, [sp, #0]
				}
			} else {
				bail = bail_err;
			}
			if (!uc)
 800c746:	2800      	cmp	r0, #0
 800c748:	d186      	bne.n	800c658 <vsscanf+0x418>
				bail = bail_eof;
 800c74a:	2401      	movs	r4, #1
 800c74c:	e784      	b.n	800c658 <vsscanf+0x418>
				bail = bail_err;
 800c74e:	2402      	movs	r4, #2
 800c750:	e7f9      	b.n	800c746 <vsscanf+0x506>
				state = st_flags;
 800c752:	2201      	movs	r2, #1
				flags = 0;
 800c754:	f04f 0b00 	mov.w	fp, #0
				width = UINT_MAX;
 800c758:	f04f 38ff 	mov.w	r8, #4294967295
				rank = rank_int;
 800c75c:	f8cd b004 	str.w	fp, [sp, #4]
 800c760:	e77a      	b.n	800c658 <vsscanf+0x418>
				p--;	/* Process this character again */
 800c762:	460e      	mov	r6, r1
				state = st_modifiers;
 800c764:	2203      	movs	r2, #3
 800c766:	e777      	b.n	800c658 <vsscanf+0x418>
				p--;	/* Process this character again */
 800c768:	460e      	mov	r6, r1
				state = st_modifiers;
 800c76a:	2203      	movs	r2, #3
 800c76c:	e774      	b.n	800c658 <vsscanf+0x418>
				rank = SIZE_T_RANK;
 800c76e:	2301      	movs	r3, #1
 800c770:	9301      	str	r3, [sp, #4]
 800c772:	e771      	b.n	800c658 <vsscanf+0x418>
					bail = bail_err;
 800c774:	2402      	movs	r4, #2
				state = st_normal;
 800c776:	2200      	movs	r2, #0
 800c778:	e76e      	b.n	800c658 <vsscanf+0x418>
						bail = bail_err;
 800c77a:	2402      	movs	r4, #2
				state = st_normal;
 800c77c:	2200      	movs	r2, #0
 800c77e:	e76b      	b.n	800c658 <vsscanf+0x418>
 800c780:	2200      	movs	r2, #0
 800c782:	e769      	b.n	800c658 <vsscanf+0x418>
 800c784:	2200      	movs	r2, #0
 800c786:	e767      	b.n	800c658 <vsscanf+0x418>
 800c788:	2200      	movs	r2, #0
 800c78a:	e765      	b.n	800c658 <vsscanf+0x418>
						bail = bail_eof;
 800c78c:	2401      	movs	r4, #1
				state = st_normal;
 800c78e:	2200      	movs	r2, #0
 800c790:	e762      	b.n	800c658 <vsscanf+0x418>
				range_start = (unsigned char)ch;
 800c792:	469a      	mov	sl, r3
				state = st_match_range;
 800c794:	2206      	movs	r2, #6
 800c796:	e75f      	b.n	800c658 <vsscanf+0x418>
			break;
		}
	}

	if (bail == bail_eof && !converted)
 800c798:	2c01      	cmp	r4, #1
 800c79a:	d003      	beq.n	800c7a4 <vsscanf+0x564>
		converted = -1;	/* Return EOF (-1) */

	return converted;
}
 800c79c:	9800      	ldr	r0, [sp, #0]
 800c79e:	b00f      	add	sp, #60	; 0x3c
 800c7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bail == bail_eof && !converted)
 800c7a4:	9b00      	ldr	r3, [sp, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1f8      	bne.n	800c79c <vsscanf+0x55c>
		converted = -1;	/* Return EOF (-1) */
 800c7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ae:	9300      	str	r3, [sp, #0]
	return converted;
 800c7b0:	e7f4      	b.n	800c79c <vsscanf+0x55c>
 800c7b2:	bf00      	nop

0800c7b4 <adc_chan_config>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
adc_chan_config(struct adc_dev *dev, uint8_t cnum, void *data)
{
 800c7b4:	b510      	push	{r4, lr}
    assert(dev->ad_funcs->af_configure_channel != NULL);
 800c7b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	b123      	cbz	r3, 800c7c6 <adc_chan_config+0x12>

    if (cnum >= dev->ad_chan_count) {
 800c7bc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800c7be:	42a1      	cmp	r1, r4
 800c7c0:	da06      	bge.n	800c7d0 <adc_chan_config+0x1c>
        return (EINVAL);
    }

    return (dev->ad_funcs->af_configure_channel(dev, cnum, data));
 800c7c2:	4798      	blx	r3
}
 800c7c4:	bd10      	pop	{r4, pc}
    assert(dev->ad_funcs->af_configure_channel != NULL);
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7f9 fb12 	bl	8005df4 <__assert_func>
        return (EINVAL);
 800c7d0:	2016      	movs	r0, #22
 800c7d2:	e7f7      	b.n	800c7c4 <adc_chan_config+0x10>

0800c7d4 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
 800c7d4:	6843      	ldr	r3, [r0, #4]
 800c7d6:	428b      	cmp	r3, r1
 800c7d8:	d808      	bhi.n	800c7ec <hal_flash_check_addr+0x18>
 800c7da:	6882      	ldr	r2, [r0, #8]
 800c7dc:	4413      	add	r3, r2
 800c7de:	428b      	cmp	r3, r1
 800c7e0:	d301      	bcc.n	800c7e6 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
 800c7e2:	2000      	movs	r0, #0
}
 800c7e4:	4770      	bx	lr
        return SYS_EINVAL;
 800c7e6:	f06f 0001 	mvn.w	r0, #1
 800c7ea:	4770      	bx	lr
 800c7ec:	f06f 0001 	mvn.w	r0, #1
 800c7f0:	4770      	bx	lr

0800c7f2 <hal_flash_init>:
{
 800c7f2:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
 800c7f4:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
 800c7f6:	462c      	mov	r4, r5
 800c7f8:	e001      	b.n	800c7fe <hal_flash_init+0xc>
 800c7fa:	3401      	adds	r4, #1
 800c7fc:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
 800c7fe:	4620      	mov	r0, r4
 800c800:	f7fb ffee 	bl	80087e0 <hal_bsp_flash_dev>
        if (!hf) {
 800c804:	b138      	cbz	r0, 800c816 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
 800c806:	6802      	ldr	r2, [r0, #0]
 800c808:	6952      	ldr	r2, [r2, #20]
 800c80a:	4790      	blx	r2
 800c80c:	2800      	cmp	r0, #0
 800c80e:	d0f4      	beq.n	800c7fa <hal_flash_init+0x8>
            rc = SYS_EIO;
 800c810:	f06f 0504 	mvn.w	r5, #4
 800c814:	e7f1      	b.n	800c7fa <hal_flash_init+0x8>
}
 800c816:	4628      	mov	r0, r5
 800c818:	bd38      	pop	{r3, r4, r5, pc}

0800c81a <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
 800c81a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c81e:	460d      	mov	r5, r1
 800c820:	4690      	mov	r8, r2
 800c822:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
 800c824:	f7fb ffdc 	bl	80087e0 <hal_bsp_flash_dev>
    if (!hf) {
 800c828:	b1c0      	cbz	r0, 800c85c <hal_flash_read+0x42>
 800c82a:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
 800c82c:	4629      	mov	r1, r5
 800c82e:	f7ff ffd1 	bl	800c7d4 <hal_flash_check_addr>
 800c832:	b9b0      	cbnz	r0, 800c862 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
 800c834:	19a9      	adds	r1, r5, r6
 800c836:	4620      	mov	r0, r4
 800c838:	f7ff ffcc 	bl	800c7d4 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
 800c83c:	b9a0      	cbnz	r0, 800c868 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	681f      	ldr	r7, [r3, #0]
 800c842:	4633      	mov	r3, r6
 800c844:	4642      	mov	r2, r8
 800c846:	4629      	mov	r1, r5
 800c848:	4620      	mov	r0, r4
 800c84a:	47b8      	blx	r7
    if (rc != 0) {
 800c84c:	4603      	mov	r3, r0
 800c84e:	b910      	cbnz	r0, 800c856 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
 800c850:	4618      	mov	r0, r3
 800c852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
 800c856:	f06f 0304 	mvn.w	r3, #4
 800c85a:	e7f9      	b.n	800c850 <hal_flash_read+0x36>
        return SYS_EINVAL;
 800c85c:	f06f 0301 	mvn.w	r3, #1
 800c860:	e7f6      	b.n	800c850 <hal_flash_read+0x36>
        return SYS_EINVAL;
 800c862:	f06f 0301 	mvn.w	r3, #1
 800c866:	e7f3      	b.n	800c850 <hal_flash_read+0x36>
 800c868:	f06f 0301 	mvn.w	r3, #1
 800c86c:	e7f0      	b.n	800c850 <hal_flash_read+0x36>

0800c86e <HAL_ADC_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 800c86e:	4770      	bx	lr

0800c870 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800c870:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c872:	b083      	sub	sp, #12
 800c874:	4605      	mov	r5, r0
 800c876:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800c878:	2300      	movs	r3, #0
 800c87a:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800c87c:	f7fc f940 	bl	8008b00 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	689a      	ldr	r2, [r3, #8]
 800c884:	f412 7f80 	tst.w	r2, #256	; 0x100
 800c888:	d123      	bne.n	800c8d2 <HAL_ADC_PollForConversion+0x62>
 800c88a:	4606      	mov	r6, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800c88c:	685a      	ldr	r2, [r3, #4]
 800c88e:	f412 7f80 	tst.w	r2, #256	; 0x100
 800c892:	d103      	bne.n	800c89c <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800c894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800c896:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800c89a:	d024      	beq.n	800c8e6 <HAL_ADC_PollForConversion+0x76>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800c89c:	4b4b      	ldr	r3, [pc, #300]	; (800c9cc <HAL_ADC_PollForConversion+0x15c>)
 800c89e:	681f      	ldr	r7, [r3, #0]
 800c8a0:	2002      	movs	r0, #2
 800c8a2:	f000 fc09 	bl	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800c8a6:	fbb7 f0f0 	udiv	r0, r7, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800c8aa:	682b      	ldr	r3, [r5, #0]
 800c8ac:	6919      	ldr	r1, [r3, #16]
 800c8ae:	4a48      	ldr	r2, [pc, #288]	; (800c9d0 <HAL_ADC_PollForConversion+0x160>)
 800c8b0:	4211      	tst	r1, r2
 800c8b2:	d12f      	bne.n	800c914 <HAL_ADC_PollForConversion+0xa4>
 800c8b4:	68d9      	ldr	r1, [r3, #12]
 800c8b6:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 800c8ba:	4211      	tst	r1, r2
 800c8bc:	d12a      	bne.n	800c914 <HAL_ADC_PollForConversion+0xa4>
 800c8be:	6919      	ldr	r1, [r3, #16]
 800c8c0:	4a44      	ldr	r2, [pc, #272]	; (800c9d4 <HAL_ADC_PollForConversion+0x164>)
 800c8c2:	4211      	tst	r1, r2
 800c8c4:	d139      	bne.n	800c93a <HAL_ADC_PollForConversion+0xca>
 800c8c6:	68da      	ldr	r2, [r3, #12]
 800c8c8:	4b43      	ldr	r3, [pc, #268]	; (800c9d8 <HAL_ADC_PollForConversion+0x168>)
 800c8ca:	421a      	tst	r2, r3
 800c8cc:	d037      	beq.n	800c93e <HAL_ADC_PollForConversion+0xce>
 800c8ce:	2729      	movs	r7, #41	; 0x29
 800c8d0:	e03a      	b.n	800c948 <HAL_ADC_PollForConversion+0xd8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c8d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c8d4:	f043 0320 	orr.w	r3, r3, #32
 800c8d8:	62ab      	str	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800c8da:	2300      	movs	r3, #0
 800c8dc:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    return HAL_ERROR;
 800c8e0:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 800c8e2:	b003      	add	sp, #12
 800c8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800c8e6:	682b      	ldr	r3, [r5, #0]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f013 0f02 	tst.w	r3, #2
 800c8ee:	d148      	bne.n	800c982 <HAL_ADC_PollForConversion+0x112>
      if(Timeout != HAL_MAX_DELAY)
 800c8f0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c8f4:	d0f7      	beq.n	800c8e6 <HAL_ADC_PollForConversion+0x76>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800c8f6:	b124      	cbz	r4, 800c902 <HAL_ADC_PollForConversion+0x92>
 800c8f8:	f7fc f902 	bl	8008b00 <HAL_GetTick>
 800c8fc:	1b80      	subs	r0, r0, r6
 800c8fe:	42a0      	cmp	r0, r4
 800c900:	d9f1      	bls.n	800c8e6 <HAL_ADC_PollForConversion+0x76>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c902:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c904:	f043 0304 	orr.w	r3, r3, #4
 800c908:	62ab      	str	r3, [r5, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800c90a:	2300      	movs	r3, #0
 800c90c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
          return HAL_TIMEOUT;
 800c910:	2003      	movs	r0, #3
 800c912:	e7e6      	b.n	800c8e2 <HAL_ADC_PollForConversion+0x72>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800c914:	6919      	ldr	r1, [r3, #16]
 800c916:	4a2f      	ldr	r2, [pc, #188]	; (800c9d4 <HAL_ADC_PollForConversion+0x164>)
 800c918:	4211      	tst	r1, r2
 800c91a:	d104      	bne.n	800c926 <HAL_ADC_PollForConversion+0xb6>
 800c91c:	68d9      	ldr	r1, [r3, #12]
 800c91e:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 800c922:	4211      	tst	r1, r2
 800c924:	d00d      	beq.n	800c942 <HAL_ADC_PollForConversion+0xd2>
 800c926:	6919      	ldr	r1, [r3, #16]
 800c928:	4a2c      	ldr	r2, [pc, #176]	; (800c9dc <HAL_ADC_PollForConversion+0x16c>)
 800c92a:	400a      	ands	r2, r1
 800c92c:	b95a      	cbnz	r2, 800c946 <HAL_ADC_PollForConversion+0xd6>
 800c92e:	68da      	ldr	r2, [r3, #12]
 800c930:	4b2a      	ldr	r3, [pc, #168]	; (800c9dc <HAL_ADC_PollForConversion+0x16c>)
 800c932:	4013      	ands	r3, r2
 800c934:	b15b      	cbz	r3, 800c94e <HAL_ADC_PollForConversion+0xde>
 800c936:	27fc      	movs	r7, #252	; 0xfc
 800c938:	e006      	b.n	800c948 <HAL_ADC_PollForConversion+0xd8>
 800c93a:	2729      	movs	r7, #41	; 0x29
 800c93c:	e004      	b.n	800c948 <HAL_ADC_PollForConversion+0xd8>
 800c93e:	2714      	movs	r7, #20
 800c940:	e002      	b.n	800c948 <HAL_ADC_PollForConversion+0xd8>
 800c942:	2754      	movs	r7, #84	; 0x54
 800c944:	e000      	b.n	800c948 <HAL_ADC_PollForConversion+0xd8>
 800c946:	27fc      	movs	r7, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800c948:	fb07 f700 	mul.w	r7, r7, r0
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800c94c:	e004      	b.n	800c958 <HAL_ADC_PollForConversion+0xe8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800c94e:	2754      	movs	r7, #84	; 0x54
 800c950:	e7fa      	b.n	800c948 <HAL_ADC_PollForConversion+0xd8>
      Conversion_Timeout_CPU_cycles ++;
 800c952:	9b01      	ldr	r3, [sp, #4]
 800c954:	3301      	adds	r3, #1
 800c956:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800c958:	9b01      	ldr	r3, [sp, #4]
 800c95a:	42bb      	cmp	r3, r7
 800c95c:	d211      	bcs.n	800c982 <HAL_ADC_PollForConversion+0x112>
      if(Timeout != HAL_MAX_DELAY)
 800c95e:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c962:	d0f6      	beq.n	800c952 <HAL_ADC_PollForConversion+0xe2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c964:	b124      	cbz	r4, 800c970 <HAL_ADC_PollForConversion+0x100>
 800c966:	f7fc f8cb 	bl	8008b00 <HAL_GetTick>
 800c96a:	1b80      	subs	r0, r0, r6
 800c96c:	42a0      	cmp	r0, r4
 800c96e:	d9f0      	bls.n	800c952 <HAL_ADC_PollForConversion+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c970:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c972:	f043 0304 	orr.w	r3, r3, #4
 800c976:	62ab      	str	r3, [r5, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800c978:	2300      	movs	r3, #0
 800c97a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
          return HAL_TIMEOUT;
 800c97e:	2003      	movs	r0, #3
 800c980:	e7af      	b.n	800c8e2 <HAL_ADC_PollForConversion+0x72>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800c982:	682b      	ldr	r3, [r5, #0]
 800c984:	f06f 0212 	mvn.w	r2, #18
 800c988:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c98a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c98c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c990:	62ab      	str	r3, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800c992:	682b      	ldr	r3, [r5, #0]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800c99a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800c99e:	d001      	beq.n	800c9a4 <HAL_ADC_PollForConversion+0x134>
  return HAL_OK;
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	e79e      	b.n	800c8e2 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800c9a4:	68eb      	ldr	r3, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800c9a6:	b96b      	cbnz	r3, 800c9c4 <HAL_ADC_PollForConversion+0x154>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c9a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c9aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9ae:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c9b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c9b2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800c9b6:	d107      	bne.n	800c9c8 <HAL_ADC_PollForConversion+0x158>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c9b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c9ba:	f043 0301 	orr.w	r3, r3, #1
 800c9be:	62ab      	str	r3, [r5, #40]	; 0x28
  return HAL_OK;
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	e78e      	b.n	800c8e2 <HAL_ADC_PollForConversion+0x72>
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	e78c      	b.n	800c8e2 <HAL_ADC_PollForConversion+0x72>
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	e78a      	b.n	800c8e2 <HAL_ADC_PollForConversion+0x72>
 800c9cc:	20000110 	.word	0x20000110
 800c9d0:	24924924 	.word	0x24924924
 800c9d4:	12492492 	.word	0x12492492
 800c9d8:	00492492 	.word	0x00492492
 800c9dc:	00249249 	.word	0x00249249

0800c9e0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800c9e0:	6803      	ldr	r3, [r0, #0]
 800c9e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800c9e4:	4770      	bx	lr

0800c9e6 <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800c9e6:	4770      	bx	lr

0800c9e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c9e8:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c9ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800c9ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9ee:	f012 0f50 	tst.w	r2, #80	; 0x50
 800c9f2:	d003      	beq.n	800c9fc <ADC_DMAConvCplt+0x14>
    HAL_ADC_ConvCpltCallback(hadc); 
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800c9f4:	6a1b      	ldr	r3, [r3, #32]
 800c9f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9f8:	4798      	blx	r3
  }
}
 800c9fa:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c9fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca02:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	6892      	ldr	r2, [r2, #8]
 800ca08:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800ca0c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800ca10:	d003      	beq.n	800ca1a <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc); 
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7ff ffe7 	bl	800c9e6 <HAL_ADC_ConvCpltCallback>
 800ca18:	e7ef      	b.n	800c9fa <ADC_DMAConvCplt+0x12>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800ca1a:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800ca1c:	2a00      	cmp	r2, #0
 800ca1e:	d1f8      	bne.n	800ca12 <ADC_DMAConvCplt+0x2a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800ca20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ca26:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ca28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca2a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800ca2e:	d1f0      	bne.n	800ca12 <ADC_DMAConvCplt+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ca30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca32:	f042 0201 	orr.w	r2, r2, #1
 800ca36:	629a      	str	r2, [r3, #40]	; 0x28
 800ca38:	e7eb      	b.n	800ca12 <ADC_DMAConvCplt+0x2a>

0800ca3a <HAL_ADC_ConvHalfCpltCallback>:
}
 800ca3a:	4770      	bx	lr

0800ca3c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ca3c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800ca3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800ca40:	f7ff fffb 	bl	800ca3a <HAL_ADC_ConvHalfCpltCallback>
}
 800ca44:	bd08      	pop	{r3, pc}

0800ca46 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800ca46:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ca48:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800ca4a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ca4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca50:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800ca52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ca54:	f043 0304 	orr.w	r3, r3, #4
 800ca58:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800ca5a:	f7fd fee3 	bl	800a824 <HAL_ADC_ErrorCallback>
}
 800ca5e:	bd08      	pop	{r3, pc}

0800ca60 <HAL_ADC_ConfigChannel>:
{ 
 800ca60:	b430      	push	{r4, r5}
 800ca62:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 800ca64:	2300      	movs	r3, #0
 800ca66:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800ca68:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	f000 808b 	beq.w	800cb88 <HAL_ADC_ConfigChannel+0x128>
 800ca72:	4602      	mov	r2, r0
 800ca74:	2301      	movs	r3, #1
 800ca76:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800ca7a:	684b      	ldr	r3, [r1, #4]
 800ca7c:	2b06      	cmp	r3, #6
 800ca7e:	d829      	bhi.n	800cad4 <HAL_ADC_ConfigChannel+0x74>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800ca80:	6805      	ldr	r5, [r0, #0]
 800ca82:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800ca84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ca88:	3b05      	subs	r3, #5
 800ca8a:	241f      	movs	r4, #31
 800ca8c:	409c      	lsls	r4, r3
 800ca8e:	ea20 0004 	bic.w	r0, r0, r4
 800ca92:	680c      	ldr	r4, [r1, #0]
 800ca94:	fa04 f303 	lsl.w	r3, r4, r3
 800ca98:	4303      	orrs	r3, r0
 800ca9a:	636b      	str	r3, [r5, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800ca9c:	680b      	ldr	r3, [r1, #0]
 800ca9e:	2b09      	cmp	r3, #9
 800caa0:	d938      	bls.n	800cb14 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800caa2:	6815      	ldr	r5, [r2, #0]
 800caa4:	68e8      	ldr	r0, [r5, #12]
 800caa6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800caaa:	3b1e      	subs	r3, #30
 800caac:	2407      	movs	r4, #7
 800caae:	409c      	lsls	r4, r3
 800cab0:	ea20 0004 	bic.w	r0, r0, r4
 800cab4:	688c      	ldr	r4, [r1, #8]
 800cab6:	fa04 f303 	lsl.w	r3, r4, r3
 800caba:	4303      	orrs	r3, r0
 800cabc:	60eb      	str	r3, [r5, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800cabe:	680b      	ldr	r3, [r1, #0]
 800cac0:	3b10      	subs	r3, #16
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d934      	bls.n	800cb30 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cac6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800cac8:	2300      	movs	r3, #0
 800caca:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 800cace:	b002      	add	sp, #8
 800cad0:	bc30      	pop	{r4, r5}
 800cad2:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 800cad4:	2b0c      	cmp	r3, #12
 800cad6:	d80e      	bhi.n	800caf6 <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800cad8:	6805      	ldr	r5, [r0, #0]
 800cada:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800cadc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cae0:	3b23      	subs	r3, #35	; 0x23
 800cae2:	241f      	movs	r4, #31
 800cae4:	409c      	lsls	r4, r3
 800cae6:	ea20 0004 	bic.w	r0, r0, r4
 800caea:	680c      	ldr	r4, [r1, #0]
 800caec:	fa04 f303 	lsl.w	r3, r4, r3
 800caf0:	4303      	orrs	r3, r0
 800caf2:	632b      	str	r3, [r5, #48]	; 0x30
 800caf4:	e7d2      	b.n	800ca9c <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800caf6:	6805      	ldr	r5, [r0, #0]
 800caf8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800cafa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cafe:	3b41      	subs	r3, #65	; 0x41
 800cb00:	241f      	movs	r4, #31
 800cb02:	409c      	lsls	r4, r3
 800cb04:	ea20 0004 	bic.w	r0, r0, r4
 800cb08:	680c      	ldr	r4, [r1, #0]
 800cb0a:	fa04 f303 	lsl.w	r3, r4, r3
 800cb0e:	4303      	orrs	r3, r0
 800cb10:	62eb      	str	r3, [r5, #44]	; 0x2c
 800cb12:	e7c3      	b.n	800ca9c <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800cb14:	6815      	ldr	r5, [r2, #0]
 800cb16:	6928      	ldr	r0, [r5, #16]
 800cb18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cb1c:	2407      	movs	r4, #7
 800cb1e:	409c      	lsls	r4, r3
 800cb20:	ea20 0004 	bic.w	r0, r0, r4
 800cb24:	688c      	ldr	r4, [r1, #8]
 800cb26:	fa04 f303 	lsl.w	r3, r4, r3
 800cb2a:	4303      	orrs	r3, r0
 800cb2c:	612b      	str	r3, [r5, #16]
 800cb2e:	e7c6      	b.n	800cabe <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 800cb30:	6813      	ldr	r3, [r2, #0]
 800cb32:	4816      	ldr	r0, [pc, #88]	; (800cb8c <HAL_ADC_ConfigChannel+0x12c>)
 800cb34:	4283      	cmp	r3, r0
 800cb36:	d005      	beq.n	800cb44 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cb38:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800cb3a:	f043 0320 	orr.w	r3, r3, #32
 800cb3e:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800cb40:	2001      	movs	r0, #1
 800cb42:	e7c1      	b.n	800cac8 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800cb44:	6898      	ldr	r0, [r3, #8]
 800cb46:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800cb4a:	d11b      	bne.n	800cb84 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800cb4c:	6898      	ldr	r0, [r3, #8]
 800cb4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800cb52:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800cb54:	680b      	ldr	r3, [r1, #0]
 800cb56:	2b10      	cmp	r3, #16
 800cb58:	d001      	beq.n	800cb5e <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cb5a:	2000      	movs	r0, #0
 800cb5c:	e7b4      	b.n	800cac8 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800cb5e:	4b0c      	ldr	r3, [pc, #48]	; (800cb90 <HAL_ADC_ConfigChannel+0x130>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	490c      	ldr	r1, [pc, #48]	; (800cb94 <HAL_ADC_ConfigChannel+0x134>)
 800cb64:	fba1 1303 	umull	r1, r3, r1, r3
 800cb68:	0c9b      	lsrs	r3, r3, #18
 800cb6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cb6e:	0059      	lsls	r1, r3, #1
 800cb70:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800cb72:	e002      	b.n	800cb7a <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 800cb74:	9b01      	ldr	r3, [sp, #4]
 800cb76:	3b01      	subs	r3, #1
 800cb78:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800cb7a:	9b01      	ldr	r3, [sp, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d1f9      	bne.n	800cb74 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cb80:	2000      	movs	r0, #0
 800cb82:	e7a1      	b.n	800cac8 <HAL_ADC_ConfigChannel+0x68>
 800cb84:	2000      	movs	r0, #0
 800cb86:	e79f      	b.n	800cac8 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 800cb88:	2002      	movs	r0, #2
 800cb8a:	e7a0      	b.n	800cace <HAL_ADC_ConfigChannel+0x6e>
 800cb8c:	40012400 	.word	0x40012400
 800cb90:	20000110 	.word	0x20000110
 800cb94:	431bde83 	.word	0x431bde83

0800cb98 <ADC_Enable>:
{
 800cb98:	b530      	push	{r4, r5, lr}
 800cb9a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800cba0:	6803      	ldr	r3, [r0, #0]
 800cba2:	689a      	ldr	r2, [r3, #8]
 800cba4:	f012 0f01 	tst.w	r2, #1
 800cba8:	d12e      	bne.n	800cc08 <ADC_Enable+0x70>
    __HAL_ADC_ENABLE(hadc);
 800cbaa:	689a      	ldr	r2, [r3, #8]
 800cbac:	f042 0201 	orr.w	r2, r2, #1
 800cbb0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800cbb2:	4b17      	ldr	r3, [pc, #92]	; (800cc10 <ADC_Enable+0x78>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a17      	ldr	r2, [pc, #92]	; (800cc14 <ADC_Enable+0x7c>)
 800cbb8:	fba2 2303 	umull	r2, r3, r2, r3
 800cbbc:	0c9b      	lsrs	r3, r3, #18
 800cbbe:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800cbc0:	e002      	b.n	800cbc8 <ADC_Enable+0x30>
      wait_loop_index--;
 800cbc2:	9b01      	ldr	r3, [sp, #4]
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800cbc8:	9b01      	ldr	r3, [sp, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1f9      	bne.n	800cbc2 <ADC_Enable+0x2a>
 800cbce:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800cbd0:	f7fb ff96 	bl	8008b00 <HAL_GetTick>
 800cbd4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800cbd6:	6823      	ldr	r3, [r4, #0]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	f013 0f01 	tst.w	r3, #1
 800cbde:	d111      	bne.n	800cc04 <ADC_Enable+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800cbe0:	f7fb ff8e 	bl	8008b00 <HAL_GetTick>
 800cbe4:	1b40      	subs	r0, r0, r5
 800cbe6:	2802      	cmp	r0, #2
 800cbe8:	d9f5      	bls.n	800cbd6 <ADC_Enable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cbea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cbec:	f043 0310 	orr.w	r3, r3, #16
 800cbf0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cbf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cbf4:	f043 0301 	orr.w	r3, r3, #1
 800cbf8:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 800cc00:	2001      	movs	r0, #1
 800cc02:	e002      	b.n	800cc0a <ADC_Enable+0x72>
  return HAL_OK;
 800cc04:	2000      	movs	r0, #0
 800cc06:	e000      	b.n	800cc0a <ADC_Enable+0x72>
 800cc08:	2000      	movs	r0, #0
}
 800cc0a:	b003      	add	sp, #12
 800cc0c:	bd30      	pop	{r4, r5, pc}
 800cc0e:	bf00      	nop
 800cc10:	20000110 	.word	0x20000110
 800cc14:	431bde83 	.word	0x431bde83

0800cc18 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800cc18:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d06a      	beq.n	800ccf6 <HAL_ADC_Start+0xde>
{
 800cc20:	b510      	push	{r4, lr}
 800cc22:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800cc24:	2301      	movs	r3, #1
 800cc26:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800cc2a:	f7ff ffb5 	bl	800cb98 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800cc2e:	4602      	mov	r2, r0
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d15b      	bne.n	800ccec <HAL_ADC_Start+0xd4>
    ADC_STATE_CLR_SET(hadc->State,
 800cc34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cc36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc3a:	f023 0301 	bic.w	r3, r3, #1
 800cc3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc42:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800cc44:	6823      	ldr	r3, [r4, #0]
 800cc46:	492d      	ldr	r1, [pc, #180]	; (800ccfc <HAL_ADC_Start+0xe4>)
 800cc48:	428b      	cmp	r3, r1
 800cc4a:	d027      	beq.n	800cc9c <HAL_ADC_Start+0x84>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800cc4c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800cc4e:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 800cc52:	62a1      	str	r1, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800cc54:	6859      	ldr	r1, [r3, #4]
 800cc56:	f411 6f80 	tst.w	r1, #1024	; 0x400
 800cc5a:	d005      	beq.n	800cc68 <HAL_ADC_Start+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800cc5c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800cc5e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800cc62:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800cc66:	62a1      	str	r1, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800cc68:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800cc6a:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 800cc6e:	d02b      	beq.n	800ccc8 <HAL_ADC_Start+0xb0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800cc70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cc72:	f021 0106 	bic.w	r1, r1, #6
 800cc76:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800cc78:	2100      	movs	r1, #0
 800cc7a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800cc7e:	f06f 0102 	mvn.w	r1, #2
 800cc82:	6019      	str	r1, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800cc84:	6823      	ldr	r3, [r4, #0]
 800cc86:	6899      	ldr	r1, [r3, #8]
 800cc88:	f401 2160 	and.w	r1, r1, #917504	; 0xe0000
 800cc8c:	f5b1 2f60 	cmp.w	r1, #917504	; 0xe0000
 800cc90:	d01d      	beq.n	800ccce <HAL_ADC_Start+0xb6>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800cc92:	6899      	ldr	r1, [r3, #8]
 800cc94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cc98:	6099      	str	r1, [r3, #8]
 800cc9a:	e02a      	b.n	800ccf2 <HAL_ADC_Start+0xda>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800cc9c:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800cca0:	6849      	ldr	r1, [r1, #4]
 800cca2:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 800cca6:	d0d1      	beq.n	800cc4c <HAL_ADC_Start+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800cca8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ccaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ccae:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800ccb0:	4913      	ldr	r1, [pc, #76]	; (800cd00 <HAL_ADC_Start+0xe8>)
 800ccb2:	6849      	ldr	r1, [r1, #4]
 800ccb4:	f411 6f80 	tst.w	r1, #1024	; 0x400
 800ccb8:	d0d6      	beq.n	800cc68 <HAL_ADC_Start+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800ccba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ccbc:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800ccc0:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800ccc4:	62a1      	str	r1, [r4, #40]	; 0x28
 800ccc6:	e7cf      	b.n	800cc68 <HAL_ADC_Start+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 800ccc8:	2100      	movs	r1, #0
 800ccca:	62e1      	str	r1, [r4, #44]	; 0x2c
 800cccc:	e7d4      	b.n	800cc78 <HAL_ADC_Start+0x60>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800ccce:	490b      	ldr	r1, [pc, #44]	; (800ccfc <HAL_ADC_Start+0xe4>)
 800ccd0:	428b      	cmp	r3, r1
 800ccd2:	d004      	beq.n	800ccde <HAL_ADC_Start+0xc6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800ccd4:	6899      	ldr	r1, [r3, #8]
 800ccd6:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 800ccda:	6099      	str	r1, [r3, #8]
 800ccdc:	e009      	b.n	800ccf2 <HAL_ADC_Start+0xda>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800ccde:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800cce2:	6849      	ldr	r1, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800cce4:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 800cce8:	d1d3      	bne.n	800cc92 <HAL_ADC_Start+0x7a>
 800ccea:	e7f3      	b.n	800ccd4 <HAL_ADC_Start+0xbc>
    __HAL_UNLOCK(hadc);
 800ccec:	2300      	movs	r3, #0
 800ccee:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800ccf2:	4610      	mov	r0, r2
 800ccf4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800ccf6:	2202      	movs	r2, #2
}
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	4770      	bx	lr
 800ccfc:	40012800 	.word	0x40012800
 800cd00:	40012400 	.word	0x40012400

0800cd04 <HAL_ADC_Start_DMA>:
{
 800cd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800cd06:	6804      	ldr	r4, [r0, #0]
 800cd08:	4d45      	ldr	r5, [pc, #276]	; (800ce20 <HAL_ADC_Start_DMA+0x11c>)
 800cd0a:	42ac      	cmp	r4, r5
 800cd0c:	d05b      	beq.n	800cdc6 <HAL_ADC_Start_DMA+0xc2>
 800cd0e:	4b45      	ldr	r3, [pc, #276]	; (800ce24 <HAL_ADC_Start_DMA+0x120>)
 800cd10:	429c      	cmp	r4, r3
 800cd12:	d058      	beq.n	800cdc6 <HAL_ADC_Start_DMA+0xc2>
    __HAL_LOCK(hadc);
 800cd14:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800cd18:	2c01      	cmp	r4, #1
 800cd1a:	d07e      	beq.n	800ce1a <HAL_ADC_Start_DMA+0x116>
 800cd1c:	4616      	mov	r6, r2
 800cd1e:	460d      	mov	r5, r1
 800cd20:	4604      	mov	r4, r0
 800cd22:	2301      	movs	r3, #1
 800cd24:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800cd28:	f7ff ff36 	bl	800cb98 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800cd2c:	4607      	mov	r7, r0
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d16e      	bne.n	800ce10 <HAL_ADC_Start_DMA+0x10c>
      ADC_STATE_CLR_SET(hadc->State,
 800cd32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800cd38:	f023 0301 	bic.w	r3, r3, #1
 800cd3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd40:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800cd42:	6822      	ldr	r2, [r4, #0]
 800cd44:	4b37      	ldr	r3, [pc, #220]	; (800ce24 <HAL_ADC_Start_DMA+0x120>)
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d044      	beq.n	800cdd4 <HAL_ADC_Start_DMA+0xd0>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800cd4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cd50:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800cd52:	6853      	ldr	r3, [r2, #4]
 800cd54:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800cd58:	d005      	beq.n	800cd66 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800cd5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800cd60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd64:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800cd66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd68:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800cd6c:	d048      	beq.n	800ce00 <HAL_ADC_Start_DMA+0xfc>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800cd6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cd70:	f023 0306 	bic.w	r3, r3, #6
 800cd74:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800cd76:	2300      	movs	r3, #0
 800cd78:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800cd7c:	6a23      	ldr	r3, [r4, #32]
 800cd7e:	4a2a      	ldr	r2, [pc, #168]	; (800ce28 <HAL_ADC_Start_DMA+0x124>)
 800cd80:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800cd82:	6a23      	ldr	r3, [r4, #32]
 800cd84:	4a29      	ldr	r2, [pc, #164]	; (800ce2c <HAL_ADC_Start_DMA+0x128>)
 800cd86:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800cd88:	6a23      	ldr	r3, [r4, #32]
 800cd8a:	4a29      	ldr	r2, [pc, #164]	; (800ce30 <HAL_ADC_Start_DMA+0x12c>)
 800cd8c:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800cd8e:	6823      	ldr	r3, [r4, #0]
 800cd90:	f06f 0202 	mvn.w	r2, #2
 800cd94:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800cd96:	6822      	ldr	r2, [r4, #0]
 800cd98:	6893      	ldr	r3, [r2, #8]
 800cd9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd9e:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800cda0:	6821      	ldr	r1, [r4, #0]
 800cda2:	4633      	mov	r3, r6
 800cda4:	462a      	mov	r2, r5
 800cda6:	314c      	adds	r1, #76	; 0x4c
 800cda8:	6a20      	ldr	r0, [r4, #32]
 800cdaa:	f7fd fb1d 	bl	800a3e8 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800cdae:	6822      	ldr	r2, [r4, #0]
 800cdb0:	6893      	ldr	r3, [r2, #8]
 800cdb2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800cdb6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800cdba:	d024      	beq.n	800ce06 <HAL_ADC_Start_DMA+0x102>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800cdbc:	6893      	ldr	r3, [r2, #8]
 800cdbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdc2:	6093      	str	r3, [r2, #8]
 800cdc4:	e027      	b.n	800ce16 <HAL_ADC_Start_DMA+0x112>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800cdc6:	4b16      	ldr	r3, [pc, #88]	; (800ce20 <HAL_ADC_Start_DMA+0x11c>)
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800cdce:	d0a1      	beq.n	800cd14 <HAL_ADC_Start_DMA+0x10>
    tmp_hal_status = HAL_ERROR;
 800cdd0:	2701      	movs	r7, #1
 800cdd2:	e020      	b.n	800ce16 <HAL_ADC_Start_DMA+0x112>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800cdd4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800cdde:	d0b4      	beq.n	800cd4a <HAL_ADC_Start_DMA+0x46>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800cde0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cde2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cde6:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800cde8:	4b0d      	ldr	r3, [pc, #52]	; (800ce20 <HAL_ADC_Start_DMA+0x11c>)
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800cdf0:	d0b9      	beq.n	800cd66 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800cdf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cdf4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800cdf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cdfc:	62a3      	str	r3, [r4, #40]	; 0x28
 800cdfe:	e7b2      	b.n	800cd66 <HAL_ADC_Start_DMA+0x62>
        ADC_CLEAR_ERRORCODE(hadc);
 800ce00:	2300      	movs	r3, #0
 800ce02:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce04:	e7b7      	b.n	800cd76 <HAL_ADC_Start_DMA+0x72>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800ce06:	6893      	ldr	r3, [r2, #8]
 800ce08:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800ce0c:	6093      	str	r3, [r2, #8]
 800ce0e:	e002      	b.n	800ce16 <HAL_ADC_Start_DMA+0x112>
      __HAL_UNLOCK(hadc);
 800ce10:	2300      	movs	r3, #0
 800ce12:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800ce16:	4638      	mov	r0, r7
 800ce18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 800ce1a:	2702      	movs	r7, #2
 800ce1c:	e7fb      	b.n	800ce16 <HAL_ADC_Start_DMA+0x112>
 800ce1e:	bf00      	nop
 800ce20:	40012400 	.word	0x40012400
 800ce24:	40012800 	.word	0x40012800
 800ce28:	0800c9e9 	.word	0x0800c9e9
 800ce2c:	0800ca3d 	.word	0x0800ca3d
 800ce30:	0800ca47 	.word	0x0800ca47

0800ce34 <ADC_ConversionStop_Disable>:
{
 800ce34:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ce36:	6803      	ldr	r3, [r0, #0]
 800ce38:	689a      	ldr	r2, [r3, #8]
 800ce3a:	f012 0f01 	tst.w	r2, #1
 800ce3e:	d101      	bne.n	800ce44 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 800ce40:	2000      	movs	r0, #0
}
 800ce42:	bd38      	pop	{r3, r4, r5, pc}
 800ce44:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800ce46:	689a      	ldr	r2, [r3, #8]
 800ce48:	f022 0201 	bic.w	r2, r2, #1
 800ce4c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800ce4e:	f7fb fe57 	bl	8008b00 <HAL_GetTick>
 800ce52:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800ce54:	6823      	ldr	r3, [r4, #0]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	f013 0f01 	tst.w	r3, #1
 800ce5c:	d00e      	beq.n	800ce7c <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ce5e:	f7fb fe4f 	bl	8008b00 <HAL_GetTick>
 800ce62:	1b40      	subs	r0, r0, r5
 800ce64:	2802      	cmp	r0, #2
 800ce66:	d9f5      	bls.n	800ce54 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ce68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ce6a:	f043 0310 	orr.w	r3, r3, #16
 800ce6e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ce70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ce72:	f043 0301 	orr.w	r3, r3, #1
 800ce76:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 800ce78:	2001      	movs	r0, #1
 800ce7a:	e7e2      	b.n	800ce42 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	e7e0      	b.n	800ce42 <ADC_ConversionStop_Disable+0xe>

0800ce80 <HAL_ADC_Init>:
  if(hadc == NULL)
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d07f      	beq.n	800cf84 <HAL_ADC_Init+0x104>
{
 800ce84:	b538      	push	{r3, r4, r5, lr}
 800ce86:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ce88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d033      	beq.n	800cef6 <HAL_ADC_Init+0x76>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f7ff ffd0 	bl	800ce34 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800ce94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ce96:	f013 0310 	ands.w	r3, r3, #16
 800ce9a:	d16d      	bne.n	800cf78 <HAL_ADC_Init+0xf8>
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d16b      	bne.n	800cf78 <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 800cea0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800cea2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800cea6:	f022 0202 	bic.w	r2, r2, #2
 800ceaa:	f042 0202 	orr.w	r2, r2, #2
 800ceae:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800ceb0:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800ceb2:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800ceb4:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800ceb6:	68e5      	ldr	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800ceb8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800cebc:	68a1      	ldr	r1, [r4, #8]
 800cebe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800cec2:	d021      	beq.n	800cf08 <HAL_ADC_Init+0x88>
 800cec4:	2901      	cmp	r1, #1
 800cec6:	d01c      	beq.n	800cf02 <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800cec8:	6961      	ldr	r1, [r4, #20]
 800ceca:	2901      	cmp	r1, #1
 800cecc:	d01f      	beq.n	800cf0e <HAL_ADC_Init+0x8e>
      MODIFY_REG(hadc->Instance->CR1,
 800cece:	6825      	ldr	r5, [r4, #0]
 800ced0:	6869      	ldr	r1, [r5, #4]
 800ced2:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 800ced6:	430b      	orrs	r3, r1
 800ced8:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800ceda:	6821      	ldr	r1, [r4, #0]
 800cedc:	688d      	ldr	r5, [r1, #8]
 800cede:	4b2a      	ldr	r3, [pc, #168]	; (800cf88 <HAL_ADC_Init+0x108>)
 800cee0:	402b      	ands	r3, r5
 800cee2:	4313      	orrs	r3, r2
 800cee4:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800cee6:	68a3      	ldr	r3, [r4, #8]
 800cee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceec:	d020      	beq.n	800cf30 <HAL_ADC_Init+0xb0>
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d01e      	beq.n	800cf30 <HAL_ADC_Init+0xb0>
  uint32_t tmp_sqr1 = 0U;
 800cef2:	2100      	movs	r1, #0
 800cef4:	e01f      	b.n	800cf36 <HAL_ADC_Init+0xb6>
    ADC_CLEAR_ERRORCODE(hadc);
 800cef6:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800cef8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800cefc:	f7ff fcb7 	bl	800c86e <HAL_ADC_MspInit>
 800cf00:	e7c5      	b.n	800ce8e <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800cf02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf06:	e7df      	b.n	800cec8 <HAL_ADC_Init+0x48>
 800cf08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf0c:	e7dc      	b.n	800cec8 <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800cf0e:	b935      	cbnz	r5, 800cf1e <HAL_ADC_Init+0x9e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800cf10:	69a1      	ldr	r1, [r4, #24]
 800cf12:	3901      	subs	r1, #1
 800cf14:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 800cf18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cf1c:	e7d7      	b.n	800cece <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cf1e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800cf20:	f041 0120 	orr.w	r1, r1, #32
 800cf24:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cf26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cf28:	f041 0101 	orr.w	r1, r1, #1
 800cf2c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800cf2e:	e7ce      	b.n	800cece <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800cf30:	6923      	ldr	r3, [r4, #16]
 800cf32:	3b01      	subs	r3, #1
 800cf34:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800cf36:	6825      	ldr	r5, [r4, #0]
 800cf38:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800cf3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cf3e:	430b      	orrs	r3, r1
 800cf40:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800cf42:	6823      	ldr	r3, [r4, #0]
 800cf44:	6899      	ldr	r1, [r3, #8]
 800cf46:	4b11      	ldr	r3, [pc, #68]	; (800cf8c <HAL_ADC_Init+0x10c>)
 800cf48:	400b      	ands	r3, r1
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d00b      	beq.n	800cf66 <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 800cf4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf50:	f023 0312 	bic.w	r3, r3, #18
 800cf54:	f043 0310 	orr.w	r3, r3, #16
 800cf58:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cf5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cf5c:	f043 0301 	orr.w	r3, r3, #1
 800cf60:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 800cf62:	2001      	movs	r0, #1
 800cf64:	e00d      	b.n	800cf82 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 800cf66:	2300      	movs	r3, #0
 800cf68:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800cf6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf6c:	f023 0303 	bic.w	r3, r3, #3
 800cf70:	f043 0301 	orr.w	r3, r3, #1
 800cf74:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf76:	e004      	b.n	800cf82 <HAL_ADC_Init+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cf78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf7a:	f043 0310 	orr.w	r3, r3, #16
 800cf7e:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800cf80:	2001      	movs	r0, #1
}
 800cf82:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800cf84:	2001      	movs	r0, #1
}
 800cf86:	4770      	bx	lr
 800cf88:	ffe1f7fd 	.word	0xffe1f7fd
 800cf8c:	ff1f0efe 	.word	0xff1f0efe

0800cf90 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800cf90:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d015      	beq.n	800cfc4 <HAL_ADC_Stop+0x34>
{
 800cf98:	b510      	push	{r4, lr}
 800cf9a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800cfa2:	f7ff ff47 	bl	800ce34 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	b938      	cbnz	r0, 800cfba <HAL_ADC_Stop+0x2a>
    ADC_STATE_CLR_SET(hadc->State,
 800cfaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cfac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800cfb0:	f023 0301 	bic.w	r3, r3, #1
 800cfb4:	f043 0301 	orr.w	r3, r3, #1
 800cfb8:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 800cfba:	2300      	movs	r3, #0
 800cfbc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800cfc4:	2202      	movs	r2, #2
}
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	4770      	bx	lr
	...

0800cfcc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800cfcc:	b570      	push	{r4, r5, r6, lr}
 800cfce:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800cfd4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d068      	beq.n	800d0ae <HAL_ADCEx_Calibration_Start+0xe2>
 800cfdc:	4604      	mov	r4, r0
 800cfde:	2301      	movs	r3, #1
 800cfe0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800cfe4:	f7ff ff26 	bl	800ce34 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800cfe8:	4605      	mov	r5, r0
 800cfea:	b128      	cbz	r0, 800cff8 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cfec:	2300      	movs	r3, #0
 800cfee:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800cff2:	4628      	mov	r0, r5
 800cff4:	b002      	add	sp, #8
 800cff6:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800cff8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cffa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800cffe:	f023 0302 	bic.w	r3, r3, #2
 800d002:	f043 0302 	orr.w	r3, r3, #2
 800d006:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800d008:	4b2a      	ldr	r3, [pc, #168]	; (800d0b4 <HAL_ADCEx_Calibration_Start+0xe8>)
 800d00a:	681e      	ldr	r6, [r3, #0]
 800d00c:	2002      	movs	r0, #2
 800d00e:	f000 f853 	bl	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d012:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800d016:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 800d018:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800d01a:	e002      	b.n	800d022 <HAL_ADCEx_Calibration_Start+0x56>
      wait_loop_index--;
 800d01c:	9b01      	ldr	r3, [sp, #4]
 800d01e:	3b01      	subs	r3, #1
 800d020:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800d022:	9b01      	ldr	r3, [sp, #4]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d1f9      	bne.n	800d01c <HAL_ADCEx_Calibration_Start+0x50>
    ADC_Enable(hadc);
 800d028:	4620      	mov	r0, r4
 800d02a:	f7ff fdb5 	bl	800cb98 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800d02e:	6822      	ldr	r2, [r4, #0]
 800d030:	6893      	ldr	r3, [r2, #8]
 800d032:	f043 0308 	orr.w	r3, r3, #8
 800d036:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800d038:	f7fb fd62 	bl	8008b00 <HAL_GetTick>
 800d03c:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800d03e:	6823      	ldr	r3, [r4, #0]
 800d040:	689a      	ldr	r2, [r3, #8]
 800d042:	f012 0f08 	tst.w	r2, #8
 800d046:	d00f      	beq.n	800d068 <HAL_ADCEx_Calibration_Start+0x9c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800d048:	f7fb fd5a 	bl	8008b00 <HAL_GetTick>
 800d04c:	1b80      	subs	r0, r0, r6
 800d04e:	280a      	cmp	r0, #10
 800d050:	d9f5      	bls.n	800d03e <HAL_ADCEx_Calibration_Start+0x72>
        ADC_STATE_CLR_SET(hadc->State,
 800d052:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d054:	f023 0312 	bic.w	r3, r3, #18
 800d058:	f043 0310 	orr.w	r3, r3, #16
 800d05c:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800d05e:	2300      	movs	r3, #0
 800d060:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 800d064:	2501      	movs	r5, #1
 800d066:	e7c4      	b.n	800cff2 <HAL_ADCEx_Calibration_Start+0x26>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800d068:	689a      	ldr	r2, [r3, #8]
 800d06a:	f042 0204 	orr.w	r2, r2, #4
 800d06e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800d070:	f7fb fd46 	bl	8008b00 <HAL_GetTick>
 800d074:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800d076:	6823      	ldr	r3, [r4, #0]
 800d078:	689b      	ldr	r3, [r3, #8]
 800d07a:	f013 0f04 	tst.w	r3, #4
 800d07e:	d00f      	beq.n	800d0a0 <HAL_ADCEx_Calibration_Start+0xd4>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800d080:	f7fb fd3e 	bl	8008b00 <HAL_GetTick>
 800d084:	1b80      	subs	r0, r0, r6
 800d086:	280a      	cmp	r0, #10
 800d088:	d9f5      	bls.n	800d076 <HAL_ADCEx_Calibration_Start+0xaa>
        ADC_STATE_CLR_SET(hadc->State,
 800d08a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d08c:	f023 0312 	bic.w	r3, r3, #18
 800d090:	f043 0310 	orr.w	r3, r3, #16
 800d094:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800d096:	2300      	movs	r3, #0
 800d098:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 800d09c:	2501      	movs	r5, #1
 800d09e:	e7a8      	b.n	800cff2 <HAL_ADCEx_Calibration_Start+0x26>
    ADC_STATE_CLR_SET(hadc->State,
 800d0a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d0a2:	f023 0303 	bic.w	r3, r3, #3
 800d0a6:	f043 0301 	orr.w	r3, r3, #1
 800d0aa:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0ac:	e79e      	b.n	800cfec <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 800d0ae:	2502      	movs	r5, #2
 800d0b0:	e79f      	b.n	800cff2 <HAL_ADCEx_Calibration_Start+0x26>
 800d0b2:	bf00      	nop
 800d0b4:	20000110 	.word	0x20000110

0800d0b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d0b8:	b530      	push	{r4, r5, lr}
 800d0ba:	b087      	sub	sp, #28
 800d0bc:	4605      	mov	r5, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800d0be:	4c38      	ldr	r4, [pc, #224]	; (800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 800d0c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d0c4:	f10d 0c18 	add.w	ip, sp, #24
 800d0c8:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800d0cc:	8a23      	ldrh	r3, [r4, #16]
 800d0ce:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800d0d2:	2d02      	cmp	r5, #2
 800d0d4:	d050      	beq.n	800d178 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800d0d6:	2d10      	cmp	r5, #16
 800d0d8:	d003      	beq.n	800d0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 800d0da:	2d01      	cmp	r5, #1
 800d0dc:	d02b      	beq.n	800d136 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  uint32_t temp_reg = 0U, frequency = 0U;
 800d0de:	2000      	movs	r0, #0
 800d0e0:	e054      	b.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800d0e2:	4b30      	ldr	r3, [pc, #192]	; (800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800d0e4:	685a      	ldr	r2, [r3, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800d0ec:	d050      	beq.n	800d190 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800d0ee:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800d0f2:	a906      	add	r1, sp, #24
 800d0f4:	440b      	add	r3, r1
 800d0f6:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800d0fa:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800d0fe:	d016      	beq.n	800d12e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800d100:	4b28      	ldr	r3, [pc, #160]	; (800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800d108:	440b      	add	r3, r1
 800d10a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800d10e:	4b26      	ldr	r3, [pc, #152]	; (800d1a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 800d110:	fbb3 f3f2 	udiv	r3, r3, r2
 800d114:	fb00 f003 	mul.w	r0, r0, r3
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800d118:	4b22      	ldr	r3, [pc, #136]	; (800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800d120:	d134      	bne.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 800d122:	0040      	lsls	r0, r0, #1
 800d124:	4b21      	ldr	r3, [pc, #132]	; (800d1ac <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 800d126:	fba3 3000 	umull	r3, r0, r3, r0
 800d12a:	0840      	lsrs	r0, r0, #1
 800d12c:	e02e      	b.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800d12e:	4b20      	ldr	r3, [pc, #128]	; (800d1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 800d130:	fb03 f000 	mul.w	r0, r3, r0
 800d134:	e7f0      	b.n	800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800d136:	4b1b      	ldr	r3, [pc, #108]	; (800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800d138:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800d13a:	f240 3202 	movw	r2, #770	; 0x302
 800d13e:	401a      	ands	r2, r3
 800d140:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800d144:	d026      	beq.n	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800d146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d14a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d14e:	d004      	beq.n	800d15a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800d150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d154:	d009      	beq.n	800d16a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
        frequency = HSE_VALUE / 128U;
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 800d156:	2000      	movs	r0, #0
 800d158:	e018      	b.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800d15a:	4a12      	ldr	r2, [pc, #72]	; (800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800d15c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d15e:	f012 0f02 	tst.w	r2, #2
 800d162:	d0f5      	beq.n	800d150 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        frequency = LSI_VALUE;
 800d164:	f649 4040 	movw	r0, #40000	; 0x9c40
 800d168:	e010      	b.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800d16a:	4b0e      	ldr	r3, [pc, #56]	; (800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800d172:	d112      	bne.n	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        frequency = 0U;
 800d174:	2000      	movs	r0, #0
 800d176:	e009      	b.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800d178:	f7fd f864 	bl	800a244 <HAL_RCC_GetPCLK2Freq>
 800d17c:	4b09      	ldr	r3, [pc, #36]	; (800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800d184:	3301      	adds	r3, #1
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      break;
    }
  }
  return(frequency);
}
 800d18c:	b007      	add	sp, #28
 800d18e:	bd30      	pop	{r4, r5, pc}
  uint32_t temp_reg = 0U, frequency = 0U;
 800d190:	2000      	movs	r0, #0
 800d192:	e7fb      	b.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = LSE_VALUE;
 800d194:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800d198:	e7f8      	b.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = HSE_VALUE / 128U;
 800d19a:	f24f 4024 	movw	r0, #62500	; 0xf424
  return(frequency);
 800d19e:	e7f5      	b.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800d1a0:	0800faa8 	.word	0x0800faa8
 800d1a4:	40021000 	.word	0x40021000
 800d1a8:	007a1200 	.word	0x007a1200
 800d1ac:	aaaaaaab 	.word	0xaaaaaaab
 800d1b0:	003d0900 	.word	0x003d0900

0800d1b4 <sscanf>:
 */

#include <stdio.h>

int sscanf(const char *str, const char *format, ...)
{
 800d1b4:	b40e      	push	{r1, r2, r3}
 800d1b6:	b500      	push	{lr}
 800d1b8:	b082      	sub	sp, #8
 800d1ba:	aa03      	add	r2, sp, #12
 800d1bc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	int rv;

	va_start(ap, format);
 800d1c0:	9201      	str	r2, [sp, #4]
	rv = vsscanf(str, format, ap);
 800d1c2:	f7ff f83d 	bl	800c240 <vsscanf>
	va_end(ap);

	return rv;
}
 800d1c6:	b002      	add	sp, #8
 800d1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1cc:	b003      	add	sp, #12
 800d1ce:	4770      	bx	lr

0800d1d0 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
 800d1d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d1d4:	4605      	mov	r5, r0
 800d1d6:	468c      	mov	ip, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
 800d1d8:	e001      	b.n	800d1de <strntoumax+0xe>
		nptr++;
 800d1da:	3501      	adds	r5, #1
		n--;
 800d1dc:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
 800d1de:	b143      	cbz	r3, 800d1f2 <strntoumax+0x22>
 800d1e0:	7828      	ldrb	r0, [r5, #0]
 800d1e2:	2820      	cmp	r0, #32
 800d1e4:	d0f9      	beq.n	800d1da <strntoumax+0xa>
 800d1e6:	280a      	cmp	r0, #10
 800d1e8:	d0f7      	beq.n	800d1da <strntoumax+0xa>
 800d1ea:	2809      	cmp	r0, #9
 800d1ec:	d0f5      	beq.n	800d1da <strntoumax+0xa>
 800d1ee:	280d      	cmp	r0, #13
 800d1f0:	d0f3      	beq.n	800d1da <strntoumax+0xa>
	}

	/* Single optional + or - */
	if (n) {
 800d1f2:	b1a3      	cbz	r3, 800d21e <strntoumax+0x4e>
		char c = *nptr;
 800d1f4:	f895 e000 	ldrb.w	lr, [r5]
		if (c == '-' || c == '+') {
 800d1f8:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
 800d1fc:	d005      	beq.n	800d20a <strntoumax+0x3a>
 800d1fe:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
 800d202:	d002      	beq.n	800d20a <strntoumax+0x3a>
	int minus = 0;
 800d204:	f04f 0e00 	mov.w	lr, #0
 800d208:	e00b      	b.n	800d222 <strntoumax+0x52>
			minus = (c == '-');
 800d20a:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
 800d20e:	bf14      	ite	ne
 800d210:	f04f 0e00 	movne.w	lr, #0
 800d214:	f04f 0e01 	moveq.w	lr, #1
			nptr++;
 800d218:	3501      	adds	r5, #1
			n--;
 800d21a:	3b01      	subs	r3, #1
 800d21c:	e001      	b.n	800d222 <strntoumax+0x52>
	int minus = 0;
 800d21e:	f04f 0e00 	mov.w	lr, #0
		}
	}

	if (base == 0) {
 800d222:	b9ba      	cbnz	r2, 800d254 <strntoumax+0x84>
		if (n >= 2 && nptr[0] == '0' &&
 800d224:	2b01      	cmp	r3, #1
 800d226:	d902      	bls.n	800d22e <strntoumax+0x5e>
 800d228:	782a      	ldrb	r2, [r5, #0]
 800d22a:	2a30      	cmp	r2, #48	; 0x30
 800d22c:	d005      	beq.n	800d23a <strntoumax+0x6a>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
 800d22e:	b32b      	cbz	r3, 800d27c <strntoumax+0xac>
 800d230:	782a      	ldrb	r2, [r5, #0]
 800d232:	2a30      	cmp	r2, #48	; 0x30
 800d234:	d00a      	beq.n	800d24c <strntoumax+0x7c>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
 800d236:	220a      	movs	r2, #10
 800d238:	e00e      	b.n	800d258 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800d23a:	786a      	ldrb	r2, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
 800d23c:	2a78      	cmp	r2, #120	; 0x78
 800d23e:	d001      	beq.n	800d244 <strntoumax+0x74>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800d240:	2a58      	cmp	r2, #88	; 0x58
 800d242:	d1f4      	bne.n	800d22e <strntoumax+0x5e>
			n -= 2;
 800d244:	3b02      	subs	r3, #2
			nptr += 2;
 800d246:	3502      	adds	r5, #2
			base = 16;
 800d248:	2210      	movs	r2, #16
 800d24a:	e005      	b.n	800d258 <strntoumax+0x88>
			n--;
 800d24c:	3b01      	subs	r3, #1
			nptr++;
 800d24e:	3501      	adds	r5, #1
			base = 8;
 800d250:	2208      	movs	r2, #8
 800d252:	e001      	b.n	800d258 <strntoumax+0x88>
		}
	} else if (base == 16) {
 800d254:	2a10      	cmp	r2, #16
 800d256:	d004      	beq.n	800d262 <strntoumax+0x92>
			base = 10;
 800d258:	f04f 0800 	mov.w	r8, #0
 800d25c:	f04f 0900 	mov.w	r9, #0
 800d260:	e025      	b.n	800d2ae <strntoumax+0xde>
		if (n >= 2 && nptr[0] == '0' &&
 800d262:	2b01      	cmp	r3, #1
 800d264:	d9f8      	bls.n	800d258 <strntoumax+0x88>
 800d266:	7829      	ldrb	r1, [r5, #0]
 800d268:	2930      	cmp	r1, #48	; 0x30
 800d26a:	d1f5      	bne.n	800d258 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800d26c:	7869      	ldrb	r1, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
 800d26e:	2978      	cmp	r1, #120	; 0x78
 800d270:	d001      	beq.n	800d276 <strntoumax+0xa6>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800d272:	2958      	cmp	r1, #88	; 0x58
 800d274:	d1f0      	bne.n	800d258 <strntoumax+0x88>
			n -= 2;
 800d276:	3b02      	subs	r3, #2
			nptr += 2;
 800d278:	3502      	adds	r5, #2
 800d27a:	e7ed      	b.n	800d258 <strntoumax+0x88>
			base = 10;
 800d27c:	220a      	movs	r2, #10
 800d27e:	e7eb      	b.n	800d258 <strntoumax+0x88>
	} else if (ch >= 'A' && ch <= 'Z') {
 800d280:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800d284:	2e19      	cmp	r6, #25
 800d286:	d81a      	bhi.n	800d2be <strntoumax+0xee>
		return ch - 'A' + 10;
 800d288:	3c37      	subs	r4, #55	; 0x37
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
 800d28a:	2c00      	cmp	r4, #0
 800d28c:	db1d      	blt.n	800d2ca <strntoumax+0xfa>
 800d28e:	42a2      	cmp	r2, r4
 800d290:	dd1b      	ble.n	800d2ca <strntoumax+0xfa>
		v = v * base + d;
 800d292:	fb02 f109 	mul.w	r1, r2, r9
 800d296:	17d7      	asrs	r7, r2, #31
 800d298:	fb08 1607 	mla	r6, r8, r7, r1
 800d29c:	fba2 0108 	umull	r0, r1, r2, r8
 800d2a0:	4431      	add	r1, r6
 800d2a2:	eb10 0804 	adds.w	r8, r0, r4
 800d2a6:	eb41 79e4 	adc.w	r9, r1, r4, asr #31
		n--;
 800d2aa:	3b01      	subs	r3, #1
		nptr++;
 800d2ac:	3501      	adds	r5, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
 800d2ae:	b163      	cbz	r3, 800d2ca <strntoumax+0xfa>
 800d2b0:	782c      	ldrb	r4, [r5, #0]
	if (ch >= '0' && ch <= '9') {
 800d2b2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800d2b6:	2e09      	cmp	r6, #9
 800d2b8:	d8e2      	bhi.n	800d280 <strntoumax+0xb0>
		return ch - '0';
 800d2ba:	4634      	mov	r4, r6
 800d2bc:	e7e5      	b.n	800d28a <strntoumax+0xba>
	} else if (ch >= 'a' && ch <= 'z') {
 800d2be:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800d2c2:	2e19      	cmp	r6, #25
 800d2c4:	d801      	bhi.n	800d2ca <strntoumax+0xfa>
		return ch - 'a' + 10;
 800d2c6:	3c57      	subs	r4, #87	; 0x57
 800d2c8:	e7df      	b.n	800d28a <strntoumax+0xba>
	}

	if (endptr)
 800d2ca:	f1bc 0f00 	cmp.w	ip, #0
 800d2ce:	d001      	beq.n	800d2d4 <strntoumax+0x104>
		*endptr = (char *)nptr;
 800d2d0:	f8cc 5000 	str.w	r5, [ip]

	return minus ? -v : v;
 800d2d4:	f1be 0f00 	cmp.w	lr, #0
 800d2d8:	d003      	beq.n	800d2e2 <strntoumax+0x112>
 800d2da:	f1d8 0800 	rsbs	r8, r8, #0
 800d2de:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
}
 800d2e2:	4640      	mov	r0, r8
 800d2e4:	4649      	mov	r1, r9
 800d2e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d2ea <vsprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int vsprintf(char *buffer, const char *format, va_list ap)
{
 800d2ea:	b508      	push	{r3, lr}
	return vsnprintf(buffer, SIZE_MAX/2, format, ap);
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	460a      	mov	r2, r1
 800d2f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d2f4:	f7fa fd08 	bl	8007d08 <vsnprintf>
}
 800d2f8:	bd08      	pop	{r3, pc}
	...

0800d2fc <__aeabi_uldivmod>:
 800d2fc:	b953      	cbnz	r3, 800d314 <__aeabi_uldivmod+0x18>
 800d2fe:	b94a      	cbnz	r2, 800d314 <__aeabi_uldivmod+0x18>
 800d300:	2900      	cmp	r1, #0
 800d302:	bf08      	it	eq
 800d304:	2800      	cmpeq	r0, #0
 800d306:	bf1c      	itt	ne
 800d308:	f04f 31ff 	movne.w	r1, #4294967295
 800d30c:	f04f 30ff 	movne.w	r0, #4294967295
 800d310:	f000 b974 	b.w	800d5fc <__aeabi_idiv0>
 800d314:	f1ad 0c08 	sub.w	ip, sp, #8
 800d318:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800d31c:	f000 f806 	bl	800d32c <__udivmoddi4>
 800d320:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d328:	b004      	add	sp, #16
 800d32a:	4770      	bx	lr

0800d32c <__udivmoddi4>:
 800d32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d330:	468c      	mov	ip, r1
 800d332:	4604      	mov	r4, r0
 800d334:	9e08      	ldr	r6, [sp, #32]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d14b      	bne.n	800d3d2 <__udivmoddi4+0xa6>
 800d33a:	428a      	cmp	r2, r1
 800d33c:	4615      	mov	r5, r2
 800d33e:	d967      	bls.n	800d410 <__udivmoddi4+0xe4>
 800d340:	fab2 f282 	clz	r2, r2
 800d344:	b14a      	cbz	r2, 800d35a <__udivmoddi4+0x2e>
 800d346:	f1c2 0720 	rsb	r7, r2, #32
 800d34a:	fa01 f302 	lsl.w	r3, r1, r2
 800d34e:	fa20 f707 	lsr.w	r7, r0, r7
 800d352:	4095      	lsls	r5, r2
 800d354:	ea47 0c03 	orr.w	ip, r7, r3
 800d358:	4094      	lsls	r4, r2
 800d35a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800d35e:	fbbc f7fe 	udiv	r7, ip, lr
 800d362:	fa1f f885 	uxth.w	r8, r5
 800d366:	fb0e c317 	mls	r3, lr, r7, ip
 800d36a:	fb07 f908 	mul.w	r9, r7, r8
 800d36e:	0c21      	lsrs	r1, r4, #16
 800d370:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d374:	4599      	cmp	r9, r3
 800d376:	d909      	bls.n	800d38c <__udivmoddi4+0x60>
 800d378:	18eb      	adds	r3, r5, r3
 800d37a:	f107 31ff 	add.w	r1, r7, #4294967295
 800d37e:	f080 811c 	bcs.w	800d5ba <__udivmoddi4+0x28e>
 800d382:	4599      	cmp	r9, r3
 800d384:	f240 8119 	bls.w	800d5ba <__udivmoddi4+0x28e>
 800d388:	3f02      	subs	r7, #2
 800d38a:	442b      	add	r3, r5
 800d38c:	eba3 0309 	sub.w	r3, r3, r9
 800d390:	fbb3 f0fe 	udiv	r0, r3, lr
 800d394:	fb0e 3310 	mls	r3, lr, r0, r3
 800d398:	fb00 f108 	mul.w	r1, r0, r8
 800d39c:	b2a4      	uxth	r4, r4
 800d39e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800d3a2:	42a1      	cmp	r1, r4
 800d3a4:	d909      	bls.n	800d3ba <__udivmoddi4+0x8e>
 800d3a6:	192c      	adds	r4, r5, r4
 800d3a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3ac:	f080 8107 	bcs.w	800d5be <__udivmoddi4+0x292>
 800d3b0:	42a1      	cmp	r1, r4
 800d3b2:	f240 8104 	bls.w	800d5be <__udivmoddi4+0x292>
 800d3b6:	3802      	subs	r0, #2
 800d3b8:	442c      	add	r4, r5
 800d3ba:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800d3be:	2700      	movs	r7, #0
 800d3c0:	1a64      	subs	r4, r4, r1
 800d3c2:	b11e      	cbz	r6, 800d3cc <__udivmoddi4+0xa0>
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	40d4      	lsrs	r4, r2
 800d3c8:	e9c6 4300 	strd	r4, r3, [r6]
 800d3cc:	4639      	mov	r1, r7
 800d3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3d2:	428b      	cmp	r3, r1
 800d3d4:	d909      	bls.n	800d3ea <__udivmoddi4+0xbe>
 800d3d6:	2e00      	cmp	r6, #0
 800d3d8:	f000 80ec 	beq.w	800d5b4 <__udivmoddi4+0x288>
 800d3dc:	2700      	movs	r7, #0
 800d3de:	e9c6 0100 	strd	r0, r1, [r6]
 800d3e2:	4638      	mov	r0, r7
 800d3e4:	4639      	mov	r1, r7
 800d3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ea:	fab3 f783 	clz	r7, r3
 800d3ee:	2f00      	cmp	r7, #0
 800d3f0:	d148      	bne.n	800d484 <__udivmoddi4+0x158>
 800d3f2:	428b      	cmp	r3, r1
 800d3f4:	d302      	bcc.n	800d3fc <__udivmoddi4+0xd0>
 800d3f6:	4282      	cmp	r2, r0
 800d3f8:	f200 80fb 	bhi.w	800d5f2 <__udivmoddi4+0x2c6>
 800d3fc:	1a84      	subs	r4, r0, r2
 800d3fe:	eb61 0303 	sbc.w	r3, r1, r3
 800d402:	2001      	movs	r0, #1
 800d404:	469c      	mov	ip, r3
 800d406:	2e00      	cmp	r6, #0
 800d408:	d0e0      	beq.n	800d3cc <__udivmoddi4+0xa0>
 800d40a:	e9c6 4c00 	strd	r4, ip, [r6]
 800d40e:	e7dd      	b.n	800d3cc <__udivmoddi4+0xa0>
 800d410:	b902      	cbnz	r2, 800d414 <__udivmoddi4+0xe8>
 800d412:	deff      	udf	#255	; 0xff
 800d414:	fab2 f282 	clz	r2, r2
 800d418:	2a00      	cmp	r2, #0
 800d41a:	f040 808f 	bne.w	800d53c <__udivmoddi4+0x210>
 800d41e:	2701      	movs	r7, #1
 800d420:	1b49      	subs	r1, r1, r5
 800d422:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d426:	fa1f f985 	uxth.w	r9, r5
 800d42a:	fbb1 fef8 	udiv	lr, r1, r8
 800d42e:	fb08 111e 	mls	r1, r8, lr, r1
 800d432:	fb09 f00e 	mul.w	r0, r9, lr
 800d436:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800d43a:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 800d43e:	4298      	cmp	r0, r3
 800d440:	d907      	bls.n	800d452 <__udivmoddi4+0x126>
 800d442:	18eb      	adds	r3, r5, r3
 800d444:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d448:	d202      	bcs.n	800d450 <__udivmoddi4+0x124>
 800d44a:	4298      	cmp	r0, r3
 800d44c:	f200 80cd 	bhi.w	800d5ea <__udivmoddi4+0x2be>
 800d450:	468e      	mov	lr, r1
 800d452:	1a1b      	subs	r3, r3, r0
 800d454:	fbb3 f0f8 	udiv	r0, r3, r8
 800d458:	fb08 3310 	mls	r3, r8, r0, r3
 800d45c:	fb09 f900 	mul.w	r9, r9, r0
 800d460:	b2a4      	uxth	r4, r4
 800d462:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800d466:	45a1      	cmp	r9, r4
 800d468:	d907      	bls.n	800d47a <__udivmoddi4+0x14e>
 800d46a:	192c      	adds	r4, r5, r4
 800d46c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d470:	d202      	bcs.n	800d478 <__udivmoddi4+0x14c>
 800d472:	45a1      	cmp	r9, r4
 800d474:	f200 80b6 	bhi.w	800d5e4 <__udivmoddi4+0x2b8>
 800d478:	4618      	mov	r0, r3
 800d47a:	eba4 0409 	sub.w	r4, r4, r9
 800d47e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800d482:	e79e      	b.n	800d3c2 <__udivmoddi4+0x96>
 800d484:	f1c7 0520 	rsb	r5, r7, #32
 800d488:	40bb      	lsls	r3, r7
 800d48a:	fa22 fc05 	lsr.w	ip, r2, r5
 800d48e:	ea4c 0c03 	orr.w	ip, ip, r3
 800d492:	fa21 f405 	lsr.w	r4, r1, r5
 800d496:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800d49a:	fbb4 f9fe 	udiv	r9, r4, lr
 800d49e:	fa1f f88c 	uxth.w	r8, ip
 800d4a2:	fb0e 4419 	mls	r4, lr, r9, r4
 800d4a6:	fa20 f305 	lsr.w	r3, r0, r5
 800d4aa:	40b9      	lsls	r1, r7
 800d4ac:	fb09 fa08 	mul.w	sl, r9, r8
 800d4b0:	4319      	orrs	r1, r3
 800d4b2:	0c0b      	lsrs	r3, r1, #16
 800d4b4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800d4b8:	45a2      	cmp	sl, r4
 800d4ba:	fa02 f207 	lsl.w	r2, r2, r7
 800d4be:	fa00 f307 	lsl.w	r3, r0, r7
 800d4c2:	d90b      	bls.n	800d4dc <__udivmoddi4+0x1b0>
 800d4c4:	eb1c 0404 	adds.w	r4, ip, r4
 800d4c8:	f109 30ff 	add.w	r0, r9, #4294967295
 800d4cc:	f080 8088 	bcs.w	800d5e0 <__udivmoddi4+0x2b4>
 800d4d0:	45a2      	cmp	sl, r4
 800d4d2:	f240 8085 	bls.w	800d5e0 <__udivmoddi4+0x2b4>
 800d4d6:	f1a9 0902 	sub.w	r9, r9, #2
 800d4da:	4464      	add	r4, ip
 800d4dc:	eba4 040a 	sub.w	r4, r4, sl
 800d4e0:	fbb4 f0fe 	udiv	r0, r4, lr
 800d4e4:	fb0e 4410 	mls	r4, lr, r0, r4
 800d4e8:	fb00 fa08 	mul.w	sl, r0, r8
 800d4ec:	b289      	uxth	r1, r1
 800d4ee:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800d4f2:	45a2      	cmp	sl, r4
 800d4f4:	d908      	bls.n	800d508 <__udivmoddi4+0x1dc>
 800d4f6:	eb1c 0404 	adds.w	r4, ip, r4
 800d4fa:	f100 31ff 	add.w	r1, r0, #4294967295
 800d4fe:	d26b      	bcs.n	800d5d8 <__udivmoddi4+0x2ac>
 800d500:	45a2      	cmp	sl, r4
 800d502:	d969      	bls.n	800d5d8 <__udivmoddi4+0x2ac>
 800d504:	3802      	subs	r0, #2
 800d506:	4464      	add	r4, ip
 800d508:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800d50c:	fba0 8902 	umull	r8, r9, r0, r2
 800d510:	eba4 040a 	sub.w	r4, r4, sl
 800d514:	454c      	cmp	r4, r9
 800d516:	4641      	mov	r1, r8
 800d518:	46ce      	mov	lr, r9
 800d51a:	d354      	bcc.n	800d5c6 <__udivmoddi4+0x29a>
 800d51c:	d051      	beq.n	800d5c2 <__udivmoddi4+0x296>
 800d51e:	2e00      	cmp	r6, #0
 800d520:	d069      	beq.n	800d5f6 <__udivmoddi4+0x2ca>
 800d522:	1a5a      	subs	r2, r3, r1
 800d524:	eb64 040e 	sbc.w	r4, r4, lr
 800d528:	fa04 f505 	lsl.w	r5, r4, r5
 800d52c:	fa22 f307 	lsr.w	r3, r2, r7
 800d530:	40fc      	lsrs	r4, r7
 800d532:	431d      	orrs	r5, r3
 800d534:	e9c6 5400 	strd	r5, r4, [r6]
 800d538:	2700      	movs	r7, #0
 800d53a:	e747      	b.n	800d3cc <__udivmoddi4+0xa0>
 800d53c:	4095      	lsls	r5, r2
 800d53e:	f1c2 0320 	rsb	r3, r2, #32
 800d542:	fa21 f003 	lsr.w	r0, r1, r3
 800d546:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d54a:	fbb0 f7f8 	udiv	r7, r0, r8
 800d54e:	fa1f f985 	uxth.w	r9, r5
 800d552:	fb08 0017 	mls	r0, r8, r7, r0
 800d556:	fa24 f303 	lsr.w	r3, r4, r3
 800d55a:	4091      	lsls	r1, r2
 800d55c:	fb07 fc09 	mul.w	ip, r7, r9
 800d560:	430b      	orrs	r3, r1
 800d562:	0c19      	lsrs	r1, r3, #16
 800d564:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d568:	458c      	cmp	ip, r1
 800d56a:	fa04 f402 	lsl.w	r4, r4, r2
 800d56e:	d907      	bls.n	800d580 <__udivmoddi4+0x254>
 800d570:	1869      	adds	r1, r5, r1
 800d572:	f107 30ff 	add.w	r0, r7, #4294967295
 800d576:	d231      	bcs.n	800d5dc <__udivmoddi4+0x2b0>
 800d578:	458c      	cmp	ip, r1
 800d57a:	d92f      	bls.n	800d5dc <__udivmoddi4+0x2b0>
 800d57c:	3f02      	subs	r7, #2
 800d57e:	4429      	add	r1, r5
 800d580:	eba1 010c 	sub.w	r1, r1, ip
 800d584:	fbb1 f0f8 	udiv	r0, r1, r8
 800d588:	fb08 1c10 	mls	ip, r8, r0, r1
 800d58c:	fb00 fe09 	mul.w	lr, r0, r9
 800d590:	b299      	uxth	r1, r3
 800d592:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800d596:	458e      	cmp	lr, r1
 800d598:	d907      	bls.n	800d5aa <__udivmoddi4+0x27e>
 800d59a:	1869      	adds	r1, r5, r1
 800d59c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d5a0:	d218      	bcs.n	800d5d4 <__udivmoddi4+0x2a8>
 800d5a2:	458e      	cmp	lr, r1
 800d5a4:	d916      	bls.n	800d5d4 <__udivmoddi4+0x2a8>
 800d5a6:	3802      	subs	r0, #2
 800d5a8:	4429      	add	r1, r5
 800d5aa:	eba1 010e 	sub.w	r1, r1, lr
 800d5ae:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800d5b2:	e73a      	b.n	800d42a <__udivmoddi4+0xfe>
 800d5b4:	4637      	mov	r7, r6
 800d5b6:	4630      	mov	r0, r6
 800d5b8:	e708      	b.n	800d3cc <__udivmoddi4+0xa0>
 800d5ba:	460f      	mov	r7, r1
 800d5bc:	e6e6      	b.n	800d38c <__udivmoddi4+0x60>
 800d5be:	4618      	mov	r0, r3
 800d5c0:	e6fb      	b.n	800d3ba <__udivmoddi4+0x8e>
 800d5c2:	4543      	cmp	r3, r8
 800d5c4:	d2ab      	bcs.n	800d51e <__udivmoddi4+0x1f2>
 800d5c6:	ebb8 0102 	subs.w	r1, r8, r2
 800d5ca:	eb69 020c 	sbc.w	r2, r9, ip
 800d5ce:	3801      	subs	r0, #1
 800d5d0:	4696      	mov	lr, r2
 800d5d2:	e7a4      	b.n	800d51e <__udivmoddi4+0x1f2>
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	e7e8      	b.n	800d5aa <__udivmoddi4+0x27e>
 800d5d8:	4608      	mov	r0, r1
 800d5da:	e795      	b.n	800d508 <__udivmoddi4+0x1dc>
 800d5dc:	4607      	mov	r7, r0
 800d5de:	e7cf      	b.n	800d580 <__udivmoddi4+0x254>
 800d5e0:	4681      	mov	r9, r0
 800d5e2:	e77b      	b.n	800d4dc <__udivmoddi4+0x1b0>
 800d5e4:	3802      	subs	r0, #2
 800d5e6:	442c      	add	r4, r5
 800d5e8:	e747      	b.n	800d47a <__udivmoddi4+0x14e>
 800d5ea:	f1ae 0e02 	sub.w	lr, lr, #2
 800d5ee:	442b      	add	r3, r5
 800d5f0:	e72f      	b.n	800d452 <__udivmoddi4+0x126>
 800d5f2:	4638      	mov	r0, r7
 800d5f4:	e707      	b.n	800d406 <__udivmoddi4+0xda>
 800d5f6:	4637      	mov	r7, r6
 800d5f8:	e6e8      	b.n	800d3cc <__udivmoddi4+0xa0>
 800d5fa:	bf00      	nop

0800d5fc <__aeabi_idiv0>:
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop

0800d600 <__aeabi_memcpy>:
 800d600:	f7fa b888 	b.w	8007714 <memcpy>

0800d604 <AHBPrescTable>:
	...
 800d60c:	0201 0403 0706 0908                         ........

0800d614 <APBPrescTable>:
 800d614:	0000 0000 0201 0403 203a 0000 d61c 0800     ........: ......
 800d624:	0000 0000 d61c 0800 0002 0000 7273 2f63     ............src/
 800d634:	696c 6362 726f 2f65 6572 7573 746c 722e     libcore/result.r
 800d644:	0073 0000 d630 0800 0015 0000 03e7 0000     s...0...........
 800d654:	0005 0000 6574 706d 735f 6d74 3233 305f     ....temp_stm32_0
 800d664:	0000 0000                                   ....

0800d668 <_ZN3app10app_sensor13SENSOR_DEVICE17h0ed6b347457819dfE>:
 800d668:	0000 0000 d658 0800 000d 0000 7552 7473     ....X.......Rust
 800d678:	5420 504d 7020 6c6f 0a6c 6f6e 7320 6e65      TMP poll.no sen
 800d688:	6f73 7272 7375 5c74 7061 5c70 7273 5c63     sorrust\app\src\
 800d698:	7061 5f70 6573 736e 726f 722e 0073 0000     app_sensor.rs...
 800d6a8:	d682 0800 0009 0000 d68b 0800 001a 0000     ................
 800d6b8:	0036 0000 0005 0000 7552 7473 6820 6e61     6.......Rust han
 800d6c8:	6c64 5f65 6573 736e 726f 645f 7461 0a61     dle_sensor_data.
 800d6d8:	756e 6c6c 7320 6e65 6f73 0072 d6d8 0800     null sensor.....
 800d6e8:	000b 0000 d68b 0800 001a 0000 005c 0000     ............\...
 800d6f8:	0005 0000 4d54 2050 656e 7774 726f 206b     ....TMP network 
 800d708:	6f6e 2074 6572 6461 0a79 4d54 2050 696c     not ready.TMP li
 800d718:	7473 6e65 7265 6720 746f 7220 7761 6d74     stener got rawtm
 800d728:	0a70 0074 0000 0000 d72a 0800 0002 0000     p.t.....*.......
 800d738:	0000 0000 656b 0079 7361 6573 7472 6f69     ....key.assertio
 800d748:	206e 6166 6c69 6465 203a 2860 656c 7466     n failed: `(left
 800d758:	3d20 203d 6972 6867 2974 0a60 2020 656c      == right)`.  le
 800d768:	7466 203a 6060 0a2c 7220 6769 7468 203a     ft: ``,. right: 
 800d778:	6060 203a d740 0800 002d 0000 d76d 0800     ``: @...-...m...
 800d788:	000c 0000 d779 0800 0003 0000 6172 7477     ....y.......rawt
 800d798:	706d 6620 6961 006c d794 0800 000b 0000     mp fail.........
 800d7a8:	d68b 0800 001a 0000 0081 0000 0011 0000     ................
 800d7b8:	6100 7373 7265 6974 6e6f 6620 6961 656c     .assertion faile
 800d7c8:	3a64 6020 6c28 6665 2074 3d21 7220 6769     d: `(left != rig
 800d7d8:	7468 6029 200a 6c20 6665 3a74 6020 0000     ht)`.  left: `..
 800d7e8:	d7b9 0800 002d 0000 d76d 0800 000c 0000     ....-...m.......
 800d7f8:	d779 0800 0003 0000 6162 2064 6172 7477     y.......bad rawt
 800d808:	706d 0000 d800 0800 000a 0000 d68b 0800     mp..............
 800d818:	001a 0000 0083 0000 0011 0000 7552 7473     ............Rust
 800d828:	7320 6e65 5f64 6573 736e 726f 645f 7461      send_sensor_dat
 800d838:	0a61 6176 756c 7365 4300 414f 5f50 4f43     a.values.COAP_CO
 800d848:	544e 5845 0054 6564 6976 6563 7600 6c61     NTEXT.device.val
 800d858:	6575 6b00 7965 6176 756c 4e65 5445 7620     ue.keyvalueNET v
 800d868:	6569 2077 6f79 7275 7320 6e65 6f73 2072     iew your sensor 
 800d878:	7461 0a20 7468 7074 3a73 2f2f 6c62 6575     at .https://blue
 800d888:	702d 6c69 2d6c 6567 6c6f 636f 7461 2e65     -pill-geolocate.
 800d898:	7061 7370 6f70 2e74 6f63 3f6d 6564 6976     appspot.com?devi
 800d8a8:	6563 0a3d 454e 2054 6166 6c69 4d54 2050     ce=.NET failTMP 
 800d8b8:	6166 6c69 4547 2054 6166 6c69 5552 204e     failGET failRUN 
 800d8c8:	6166 6c69 6c20 6e69 2065 7830 6170 696e     fail line 0xpani
 800d8d8:	2063 6f6e 6c20 636f 610a 2074 7361 6573     c no loc.at asse
 800d8e8:	7472 6f69 206e 6166 6c69 6465 203a 2860     rtion failed: `(
 800d8f8:	656c 7466 3d20 203d 6972 6867 2974 0a60     left == right)`.
 800d908:	2020 656c 7466 203a 6060 0a2c 7220 6769       left: ``,. rig
 800d918:	7468 203a 6060 203a d8e4 0800 002d 0000     ht: ``: ....-...
 800d928:	d911 0800 000c 0000 d91d 0800 0003 0000     ................
 800d938:	6f53 656d 6f4e 656e 6d5f 7061 6f72 746f     SomeNone_maproot
 800d948:	18a7 0800 0004 0000 0004 0000 186b 0800     ............k...
	...
 800d960:	6e65 2063 6166 6c69 6962 2067 7473 6e72     enc failbig strn
 800d970:	6572 2067 696c 0073 d970 0800 0007 0000     reg lis.p.......
 800d980:	7572 7473 6d5c 6e79 7765 5c74 7273 5c63     rust\mynewt\src\
 800d990:	7768 735c 6e65 6f73 2e72 7372 d980 0800     hw\sensor.rs....
 800d9a0:	001c 0000 004c 0000 000e 0000 0000 0000     ....L...........
 800d9b0:	d9ac 0800 6962 2067 656b 7279 7375 5c74     ....big keyrust\
 800d9c0:	796d 656e 7477 735c 6372 655c 636e 646f     mynewt\src\encod
 800d9d0:	6e69 5c67 6f63 7061 635f 6e6f 6574 7478     ing\coap_context
 800d9e0:	722e 0073 d9b4 0800 0007 0000 d9bb 0800     .rs.............
 800d9f0:	0028 0000 003d 0000 0009 0000 6962 2067     (...=.......big 
 800da00:	6176 756c 0065 0000 d9fc 0800 0009 0000     value...........
 800da10:	d9bb 0800 0028 0000 004a 0000 0009 0000     ....(...J.......
 800da20:	7473 6e72 6220 7479 7365 0000 da20 0800     strn bytes.. ...
 800da30:	000a 0000 d9bb 0800 0028 0000 00bc 0000     ........(.......
 800da40:	0028 0000 6f6e 6e20 6c75 006c da44 0800     (...no null.D...
 800da50:	0007 0000 7572 7473 6d5c 6e79 7765 5c74     ....rust\mynewt\
 800da60:	7273 5c63 696c 2e62 7372 0000 da54 0800     src\lib.rs..T...
 800da70:	0016 0000 0078 0000 0009 0000 d968 0800     ....x.......h...
 800da80:	0008 0000 da54 0800 0016 0000 009b 0000     ....T...........
 800da90:	0011 0000 da54 0800 0016 0000 0091 0000     ....T...........
 800daa0:	0011 0000 da54 0800 0016 0000 00c5 0000     ....T...........
 800dab0:	0011 0000 5953 5f53 5045 5245 5355 5245     ....SYS_EPERUSER
 800dac0:	5953 5f53 4445 4e4f 5345 5359 455f 4552     SYS_EDONESYS_ERE
 800dad0:	4f4d 4554 4f49 5953 5f53 5545 4b4e 4f4e     MOTEIOSYS_EUNKNO
 800dae0:	4e57 5953 5f53 4e45 544f 5553 5350 5359     WNSYS_ENOTSUPSYS
 800daf0:	455f 4c41 4552 4441 5359 5359 455f 4152     _EALREADYSYS_ERA
 800db00:	474e 5345 5359 455f 4f4e 4544 5356 5359     NGESYS_ENODEVSYS
 800db10:	455f 5542 5953 5953 5f53 4145 4343 5345     _EBUSYSYS_EACCES
 800db20:	5953 5f53 4145 4147 4e49 5953 5f53 4945     SYS_EAGAINSYS_EI
 800db30:	534f 5359 455f 4f4e 4e45 5354 5359 455f     OSYS_ENOENTSYS_E
 800db40:	4954 454d 554f 5354 5359 455f 4e49 4156     TIMEOUTSYS_EINVA
 800db50:	534c 5359 455f 4f4e 454d 534d 5359 455f     LSYS_ENOMEMSYS_E
 800db60:	4b4f 0060 0000 0000 7273 2f63 696c 6362     OK`.....src/libc
 800db70:	726f 2f65 756e 2f6d 6564 3263 6c66 2f74     ore/num/dec2flt/
 800db80:	6172 6677 2e70 7372 6e69 6564 2078 756f     rawfp.rsindex ou
 800db90:	2074 666f 6220 756f 646e 3a73 7420 6568     t of bounds: the
 800dba0:	6c20 6e65 6920 2073 3e00 0000 0001 0000      len is .>......
	...
 800dbb8:	0020 0000 0000 0000 c000 0000 0300 0000      ...............
 800dbc8:	2e2e 0000 dbc8 0800 0002 0000 0000 0000     ................
 800dbd8:	6c61 6572 6461 2079 6f62 7272 776f 6465     already borrowed
 800dbe8:	2029 6877 6e65 7320 696c 6963 676e 6020     ) when slicing `
 800dbf8:	ffff ffff 0000 0000 0000 0000 0000 8000     ................
 800dc08:	6843 7261 7254 4679 6f72 456d 7272 726f     CharTryFromError
 800dc18:	6544 6f63 6564 7455 3166 4536 7272 726f     DecodeUtf16Error
 800dc28:	2013 0800 0000 0000 0001 0000 2063 0800     . ..........c ..
 800dc38:	6220 7475 7420 6568 6920 646e 7865 6920      but the index i
 800dc48:	2073 0000 db88 0800 0020 0000 dc38 0800     s ...... ...8...
 800dc58:	0012 0000 7469 7265 7449 7265 3c20 203d     ....iterIter <= 
 800dc68:	2020 2020 7274 6575 6164 6174 616d 746e         truedatamant
 800dc78:	6c70 7375 655a 6f72 6f43 7970 696b 646e     plusZeroCopykind
 800dc88:	654c 7373 6f63 6564 7954 6570 6f44 656e     LesscodeTypeDone
 800dc98:	6843 7261 6966 656c 696c 656e 6142 6b63     CharfilelineBack
 800dca8:	6f42 6874 6f53 656d 6f4e 656e 7449 6d65     BothSomeNoneItem
 800dcb8:	6174 6c69 654c 7466 6177 656b 7264 706f     tailLeftwakedrop
 800dcc8:	3875 3278 3869 3278 3875 3478 3869 3478     u8x2i8x2u8x4i8x4
 800dcd8:	3875 3878 3869 3878 6163 6c6c 6465 6020     u8x8i8x8called `
 800dce8:	704f 6974 6e6f 3a3a 6e75 7277 7061 2928     Option::unwrap()
 800dcf8:	2060 6e6f 6120 6020 6f4e 656e 2060 6176     ` on a `None` va
 800dd08:	756c 7365 6372 6c2f 6269 6f63 6572 6f2f     luesrc/libcore/o
 800dd18:	7470 6f69 2e6e 7372 dce0 0800 002b 0000     ption.rs....+...
 800dd28:	dd0b 0800 0015 0000 015b 0000 0015 0000     ........[.......
 800dd38:	7273 2f63 696c 6362 726f 2f65 6c73 6369     src/libcore/slic
 800dd48:	2f65 6f6d 2e64 7372 6e69 6564 2078 6f20     e/mod.rsindex  o
 800dd58:	7475 6f20 2066 6172 676e 2065 6f66 2072     ut of range for 
 800dd68:	6c73 6369 2065 666f 6c20 6e65 7467 2068     slice of length 
 800dd78:	dd50 0800 0006 0000 dd56 0800 0022 0000     P.......V..."...
 800dd88:	dd38 0800 0018 0000 0a09 0000 0005 0000     8...............
 800dd98:	6c73 6369 2065 6e69 6564 2078 7473 7261     slice index star
 800dda8:	7374 6120 2074 6220 7475 6520 646e 2073     ts at  but ends 
 800ddb8:	7461 0020 dd98 0800 0016 0000 ddae 0800     at .............
 800ddc8:	000d 0000 dd38 0800 0018 0000 0a0f 0000     ....8...........
 800ddd8:	0005 0000 6966 696e 6873 6465 6168 7379     ....finishedhays
 800dde8:	6174 6b63 2820 7962 6574 2073 6e49 6966     tack (bytes Infi
 800ddf8:	696e 6574 694d 756e 5273 7761 654e 6167     niteMinusRawNega
 800de08:	6974 6576 6f50 6973 6974 6576 6e69 6574     tivePositiveinte
 800de18:	7267 6c61 764f 7265 6c66 776f 6f6c 6163     gralOverflowloca
 800de28:	6974 6e6f 6f4c 6163 6974 6e6f 6162 6b63     tionLocationback
 800de38:	7469 7265 6e49 6f74 7449 7265 6573 7261     iterIntoItersear
 800de48:	6863 7265 6f70 6973 6974 6e6f 7263 7469     cherpositioncrit
 800de58:	705f 736f 694c 656e 4173 796e 6152 5777     _posLinesAnyRawW
 800de68:	6b61 7265 6c41 6f6c 4563 7272 6e55 6170     akerAllocErrUnpa
 800de78:	6b63 6465 7273 2f63 696c 6362 726f 2f65     ckedsrc/libcore/
 800de88:	7473 2f72 6f6d 2e64 7372 2e5b 2e2e 625d     str/mod.rs[...]b
 800de98:	7479 2065 6e69 6564 2078 6920 2073 756f     yte index  is ou
 800dea8:	2074 666f 6220 756f 646e 2073 666f 6020     t of bounds of `
 800deb8:	de97 0800 000b 0000 dea2 0800 0016 0000     ................
 800dec8:	db62 0800 0001 0000 de7c 0800 0016 0000     b.......|.......
 800ded8:	07e1 0000 0009 0000 6562 6967 206e 3d3c     ........begin <=
 800dee8:	6520 646e 2820 0000 dee0 0800 000e 0000      end (..........
 800def8:	dc64 0800 0004 0000 dbe8 0800 0010 0000     d...............
 800df08:	db62 0800 0001 0000 de7c 0800 0016 0000     b.......|.......
 800df18:	07e5 0000 0005 0000 6920 2073 6f6e 2074     ........ is not 
 800df28:	2061 6863 7261 6220 756f 646e 7261 3b79     a char boundary;
 800df38:	6920 2074 7369 6920 736e 6469 2065 2029      it is inside ) 
 800df48:	666f 6020 de97 0800 000b 0000 df20 0800     of `........ ...
 800df58:	0026 0000 ddec 0800 0008 0000 df46 0800     &...........F...
 800df68:	0006 0000 db62 0800 0001 0000 de7c 0800     ....b.......|...
 800df78:	0016 0000 07f2 0000 0005 0000 7830 3030     ............0x00
 800df88:	3130 3230 3330 3430 3530 3630 3730 3830     0102030405060708
 800df98:	3930 3031 3131 3231 3331 3431 3531 3631     0910111213141516
 800dfa8:	3731 3831 3931 3032 3132 3232 3332 3432     1718192021222324
 800dfb8:	3532 3632 3732 3832 3932 3033 3133 3233     2526272829303132
 800dfc8:	3333 3433 3533 3633 3733 3833 3933 3034     3334353637383940
 800dfd8:	3134 3234 3334 3434 3534 3634 3734 3834     4142434445464748
 800dfe8:	3934 3035 3135 3235 3335 3435 3535 3635     4950515253545556
 800dff8:	3735 3835 3935 3036 3136 3236 3336 3436     5758596061626364
 800e008:	3536 3636 3736 3836 3936 3037 3137 3237     6566676869707172
 800e018:	3337 3437 3537 3637 3737 3837 3937 3038     7374757677787980
 800e028:	3138 3238 3338 3438 3538 3638 3738 3838     8182838485868788
 800e038:	3938 3039 3139 3239 3339 3439 3539 3639     8990919293949596
 800e048:	3739 3839 3939 0000 2011 0800 000c 0000     979899... ......
 800e058:	0004 0000 26bd 0800 2959 0800 29ef 0800     .....&..Y)...)..
 800e068:	0a2c 202c 0a28 2c28 0029 0000 200f 0800     ,., (.(,).... ..
 800e078:	0004 0000 0004 0000 2a13 0800 2a19 0800     .........*...*..
 800e088:	2a1f 0800 0000 0000                         .*......

0800e090 <str.h>:
 800e090:	7273 2f63 696c 6362 726f 2f65 6d66 2f74     src/libcore/fmt/
 800e0a0:	6f6d 2e64 7372 0000 e090 0800 0016 0000     mod.rs..........
 800e0b0:	0448 0000 0028 0000 e090 0800 0016 0000     H...(...........
 800e0c0:	0454 0000 0011 0000 0000 0000 0000 0000     T...............

0800e0d0 <str.j>:
 800e0d0:	7273 2f63 696c 6362 726f 2f65 6e75 6369     src/libcore/unic
 800e0e0:	646f 2f65 6f62 6c6f 745f 6972 2e65 7372     ode/bool_trie.rs
 800e0f0:	e0d0 0800 0020 0000 0027 0000 0019 0000     .... ...'.......
 800e100:	e0d0 0800 0020 0000 0028 0000 0020 0000     .... ...(... ...
 800e110:	e0d0 0800 0020 0000 002a 0000 0019 0000     .... ...*.......
 800e120:	e0d0 0800 0020 0000 002b 0000 0018 0000     .... ...+.......
 800e130:	e0d0 0800 0020 0000 002c 0000 0020 0000     .... ...,... ...
 800e140:	0100 0503 0605 0306 0607 0808 1109 1c0a     ................
 800e150:	190b 140c 120d 160e 040f 0310 1212 0913     ................
 800e160:	0116 0517 0218 0319 071a 021c 011d 161f     ................
 800e170:	0320 062b 022c 0b2d 012e 0330 0231 0232      .+.,.-...0.1.2.
 800e180:	02a9 04aa 08ab 02fa 05fb 04fd 03fe 09ff     ................
 800e190:	78ad 8b79 a28d 5730 8b58 908c 1d1c 0edd     .xy...0WX.......
 800e1a0:	4b0f fb4c 2efc 3f2f 5d5c b55f 84e2 8e8d     .KL.../?\]_.....
 800e1b0:	9291 b1a9 bbba c6c5 cac9 e4de ffe5 0400     ................
 800e1c0:	1211 3129 3734 3b3a 493d 5d4a 8e84 a992     ..)147:;=IJ]....
 800e1d0:	b4b1 bbba cac6 cfce e5e4 0400 0e0d 1211     ................
 800e1e0:	3129 3a34 453b 4946 5e4a 6564 9184 9d9b     )14:;EFIJ^de....
 800e1f0:	cec9 0dcf 2911 4945 6457 8d65 a991 bab4     .....)EIWde.....
 800e200:	c5bb dfc9 e5e4 04f0 110d 4945 6564 8180     ..........EIde..
 800e210:	b284 bebc d5bf f0d7 83f1 8685 8b89 988c     ................
 800e220:	a4a0 a8a6 aca9 beba c5bf cec7 dacf 48db     ...............H
 800e230:	bd98 c6cd cfce 4e49 574f 5e59 895f 8f8e     ......INOWY^_...
 800e240:	b6b1 bfb7 c6c1 d7c7 1611 5b17 f65c fef7     ...........[\...
 800e250:	80ff 6d0d de71 0edf 1f0f 6f6e 1d1c 7d5f     ...mq.....no.._}
 800e260:	ae7e bbaf fabc 1716 1f1e 4746 4f4e 5a58     ~.........FGNOXZ
 800e270:	5e5c 7f7e c5b5 d5d4 f0dc f5f1 7372 748f     \^~.........rs.t
 800e280:	9675 c997 2fff 265f 2f2e afa7 bfb7 cfc7     u..../_&./......
 800e290:	dfd7 409a 9897 8f30 ff1f ffce 4f4e 5b5a     ...@..0.....NOZ[
 800e2a0:	0807 100f 2f27 efee 6f6e 3d37 423f 9045     ....'/..no7=?BE.
 800e2b0:	fe91 53ff 7567 c9c8 d1d0 d9d8 fee7 00ff     ...Sgu..........
 800e2c0:	5f20 8222 04df 4482 1b08 0604 8111 0eac      _"....D........
 800e2d0:	ab80 1e35 8015 03e0 0819 0401 042f 0434     ..5........./.4.
 800e2e0:	0307 0701 0706 0a11 0f50 0712 0855 0402     ........P...U...
 800e2f0:	0a1c 0309 0308 0307 0302 0303 040c 0305     ................
 800e300:	060b 0e01 0515 033a 0711 0506 0810 0756     ......:.......V.
 800e310:	0702 0d15 0450 0343 032d 0401 0611 0c0f     ....P.C.-.......
 800e320:	043a 251d 060d 204c 046d 256a c880 8205     :..%..L m.j%....
 800e330:	03b0 061a fd82 5903 1507 170b 1409 140c     .......Y........
 800e340:	6a0c 0a06 1a06 5906 2b07 4605 2c0a 0c04     .j.....Y.+.F.,..
 800e350:	0104 3103 2c0b 1a04 0b06 8003 06ac 060a     ...1.,..........
 800e360:	411f 044c 032d 0874 033c 030f 073c 0838     .AL.-.t.<...<.8.
 800e370:	062a ff82 1811 2f08 2d11 2003 2110 800f     *....../.-. .!..
 800e380:	048c 9782 0b19 8815 0594 052f 073b 0e02     ........../.;...
 800e390:	0918 af80 7431 800c 1ad6 050c ff80 8005     ....1t..........
 800e3a0:	05b6 0c24 c69b d20a 1030 8d84 3703 8109     ..$.....0....7..
 800e3b0:	145c b880 8008 3dba 0435 060a 0838 0846     \......=5...8.F.
 800e3c0:	060c 0b74 031e 045a 0959 8380 1c18 160a     ..t...Z.Y.......
 800e3d0:	4609 800a 068a a4ab 170c 3104 04a1 da81     .F.........1....
 800e3e0:	0726 050c 8005 11a5 6d81 7810 2a28 4c06     &........m.x(*.L
 800e3f0:	8004 048d be80 1b03 0f03 000d 0106 0301     ................
 800e400:	0401 0802 0908 0a02 0b05 1002 1101 1204     ................
 800e410:	1305 1411 1502 1702 1a02 1c02 1d05 2408     ...............$
 800e420:	6a01 6b03 bc02 d102 d402 d50c d609 d702     .j.k............
 800e430:	da02 e001 e805 ee02 f020 f904 0c04 3b27     ........ .....';
 800e440:	4e3e 8f4f 9e9e 069f 0907 3d36 563e d0f3     >NO.......6=>V..
 800e450:	04d1 1814 3736 5756 35bd cfce 12e0 8987     ....67VW.5......
 800e460:	9e8e 0d04 110e 2912 3431 453a 4946 4e4a     .......)14:EFIJN
 800e470:	644f 5a65 b65c 1bb7 841c 0985 9037 a891     OdeZ\.......7...
 800e480:	0a07 3e3b 6966 928f 5f6f efee 625a 9b9a     ..;>fi..o_..Zb..
 800e490:	2827 9d55 a1a0 a4a3 a8a7 baad c4bc 0b06     '(U.............
 800e4a0:	150c 3a1d 453f a651 cca7 a0cd 1907 221a     ...:?EQ........"
 800e4b0:	c525 04c6 2320 2625 3328 3a38 4a48 504c     %... #%&(38:HJLP
 800e4c0:	5553 5856 5c5a 605e 6563 6b66 7873 7f7d     SUVXZ\^`cefksx}.
 800e4d0:	a48a afaa c0b0 3fd0 7271 5e7b 7b22 0305     .......?qr{^"{..
 800e4e0:	2d04 6503 0104 2e2f 8280 031d 0f31 041c     .-.e../.....1...
 800e4f0:	0924 051e 052b 0444 2a0e aa80 2406 2404     $...+.D..*...$.$
 800e500:	2804 3408 010b 9080 3781 1609 080a 9880     .(.4.....7......
 800e510:	0339 0863 3009 0516 0321 051b 4001 0438     9.c..0..!....@8.
 800e520:	054b 042f 070a 0709 2040 0427 090c 0336     K./.....@ '...6.
 800e530:	053a 071a 0c04 5007 3749 0d33 0733 082e     :......PI73.3...
 800e540:	810a 1f26 8180 0828 802a 4ea6 1e04 430f     ..&...(.*..N...C
 800e550:	190e 0a07 4706 2709 7509 3f0b 2a41 3b06     .....G.'.u.?A*.;
 800e560:	0a05 5106 0106 1005 0503 8b80 215f 0848     ...Q........_!H.
 800e570:	800a 5ea6 4522 0a0b 0d06 3813 0a08 2c36     ...^"E.....8..6,
 800e580:	1004 c080 643c 0c53 8101 4800 5308 391d     ....<dS....H.S.9
 800e590:	0781 0a46 031d 4947 0337 080e 060a 0739     ..F...GI7.....9.
 800e5a0:	810a 1936 0781 9a83 7566 800b 8ac4 84bc     ..6.....fu......
 800e5b0:	8f2f 82d1 a147 82b9 0739 042a 6002 0a26     /...G...9.*..`&.
 800e5c0:	0a46 0528 8213 5bb0 4565 2f0b 1110 0240     F.(....[eE./..@.
 800e5d0:	971e 0ef2 f382 0da5 1f81 8151 898c 6b04     ..........Q....k
 800e5e0:	0d05 0903 1007 6093 f680 730a 6e08 4617     .......`...s.n.F
 800e5f0:	9a80 0c14 0957 8019 8187 0347 4285 150f     ....W.....G..B..
 800e600:	5085 872b 80d5 29d7 054b 040a 8302 4411     .P+....)K......D
 800e610:	4b81 063c 0401 0555 341b 8102 2c0e 6404     .K<...U..4...,.d
 800e620:	560c 0d0a 5c03 3d04 1d39 2c0d 0904 0207     .V...\.=9..,....
 800e630:	060e 9a80 d583 0d0b 0a03 7406 590c 0c27     ...........t.Y'.
 800e640:	3804 0a08 2806 1e08 0c52 6704 2903 0a0d     .8...(..R..g.)..
 800e650:	0306 300d 0e60 9285 0000 fbc0 3eef 0000     ...0`........>..
 800e660:	0000 0e00 0000 0000 0000 0000 0000 0000     ................
 800e670:	0000 fff8 fffb ffff 0007 0000 0000 1400     ................
 800e680:	21fe 00fe 000c 0000 0002 0000 0000 5000     .!.............P
 800e690:	201e 0080 000c 4000 0006 0000 0000 1000     . .....@........
 800e6a0:	3986 0002 0000 0023 21be 0000 000c fc00     .9....#..!......
 800e6b0:	0002 0000 0000 d000 201e 00c0 000c 0000     ......... ......
 800e6c0:	0004 0000 0000 4000 2001 0080 0000 0000     .......@. ......
 800e6d0:	0011 0000 0000 c000 3dc1 0060 000c 0000     .........=`.....
 800e6e0:	0002 0000 0000 9000 3044 0060 000c 0000     ........D0`.....
 800e6f0:	0003 0000 0000 5800 201e 0080 000c 0000     .......X. ......
 800e700:	8400 805c 0000 0000 0000 0000 0000 07f2     ..\.............
 800e710:	7f80 0000 0000 0000 0000 0000 0000 1bf2     ................
 800e720:	3f00 0000 0000 0000 0000 0300 0000 02a0     .?..............
 800e730:	0000 0000 0000 7ffe e0df feff ffff 1fff     ................
 800e740:	0040 0000 0000 0000 0000 0000 e000 66fd     @..............f
 800e750:	0000 c300 0001 001e 2064 2000 0000 0000     ........d . ....
 800e760:	0000 e000 0000 0000 0000 001c 0000 001c     ................
 800e770:	0000 000c 0000 000c 0000 0000 0000 3fb0     ...............?
 800e780:	fe40 200f 0000 0000 3800 0000 0000 0000     @.. .....8......
 800e790:	0060 0000 0200 0000 0000 0000 0187 0e04     `...............
 800e7a0:	0000 0980 0000 0000 0000 7f40 1fe5 9ff8     ..........@.....
 800e7b0:	0000 0000 0000 7fff 000f 0000 0000 17d0     ................
 800e7c0:	0004 0000 f800 000f 0003 0000 3b3c 0000     ............<;..
 800e7d0:	0000 0000 a340 0003 0000 0000 f000 00cf     ....@...........
 800e7e0:	0000 fff7 21fd 0310 ffff ffff ffff fbff     .....!..........
 800e7f0:	1000 0000 0000 0000 0000 ffff ffff 0001     ................
 800e800:	0000 0000 8000 0003 0000 0000 0000 8000     ................
 800e810:	0000 0000 ffff ffff 0000 0000 fc00 0000     ................
 800e820:	0000 0600 0000 0000 0000 0000 8000 3ff7     ...............?
 800e830:	0000 c000 0000 0000 0000 0000 0000 0003     ................
 800e840:	0844 0000 0060 0000 0030 0000 ffff 8003     D...`...0.......
 800e850:	0000 0000 3fc0 0000 ff80 0003 0000 0000     .....?..........
 800e860:	0007 0000 0000 13c8 0000 0000 0020 0000     ............ ...
 800e870:	0000 0000 7e00 0066 1008 0000 0000 1000     .....~f.........
 800e880:	0000 0000 0000 c19d 0002 0000 3000 0040     .............0@.
 800e890:	0000 0000 2120 0000 0000 4000 0000 0000     .... !.....@....
 800e8a0:	ffff 0000 ffff 0000 0000 0000 0000 0100     ................
 800e8b0:	0000 0200 0300 0000 0000 0000 0000 0000     ................
	...
 800e8d0:	0004 0500 0000 0000 0000 0000 0006 0000     ................
 800e8e0:	0000 0000 0700 0000 0908 000a 0c0b 0e0d     ................
 800e8f0:	000f 1000 1211 0000 1413 1615 0000 1817     ................
 800e900:	1a19 001b 001c 0000 001d 0000 0000 0000     ................
 800e910:	1f1e 0020 0000 0000 0021 0022 2423 0025     .. .....!.".#$%.
 800e920:	0000 2600 0000 0000 0000 0000 0000 0000     ...&............
	...
 800e990:	0000 2700 0028 0000 0000 0000 0000 0000     ...'(...........
 800e9a0:	0000 0000 0000 0029 0000 0000 0000 0000     ......).........
	...
 800e9d8:	0000 002a 0000 0000 0000 0000 0000 0000     ..*.............
 800e9e8:	0000 0000 2b00 002c 2d00 0000 0000 0000     .....+,..-......
	...
 800ea10:	2f2e 0030 0000 0000 0000 0000 0000 0000     ./0.............
	...
 800ea28:	0031 0000 0000 0000 0000 0000 0000 0000     1...............
	...
 800ea48:	0000 3200 3300 0000 0000 0000 0000 0000     ...2.3..........
	...
 800ea68:	3534 0000 3535 3635 0000 0000 0000 0000     45..5556........
	...
 800eab4:	0000 2000 0000 0000 0001 0000 0000 0000     ... ............
 800eac4:	0000 07c0 f06e 0000 0000 8700 0000 0000     ....n...........
 800ead4:	0060 0000 0000 0000 00f0 0000 ffc0 0001     `...............
 800eae4:	0000 0000 0002 0000 0000 ff00 007f 0000     ................
 800eaf4:	0000 8000 0003 0000 0000 0678 0007 0000     ..........x.....
 800eb04:	ef80 001f 0000 0000 0000 0008 0003 0000     ................
 800eb14:	0000 7fc0 1e00 0000 0000 0000 0000 0000     ................
 800eb24:	8000 40d3 0000 8000 07f8 0000 0003 0000     ...@............
 800eb34:	0000 5800 0001 0080 1fc0 001f 0000 0000     ...X............
 800eb44:	0000 ff00 005c 4000 0000 0000 0000 0000     ....\..@........
 800eb54:	0000 a5f9 000d 0000 0000 0000 0000 0000     ................
 800eb64:	8000 b03c 0001 3000 0000 0000 0000 0000     ..<....0........
 800eb74:	0000 a7f8 0001 0000 0000 0000 0000 0000     ................
 800eb84:	2800 00bf 0000 e000 0fbc 0000 0000 0000     .(..............
 800eb94:	8000 06ff 07fe 0000 0000 79f8 0080 0e7e     ...........y..~.
 800eba4:	0000 0000 fc00 037f 0000 0000 0000 0000     ................
 800ebb4:	0000 bf7f 0000 fffc fcff 006d 0000 0000     ..........m.....
 800ebc4:	0000 b47e 00bf 0000 0000 0000 0000 00a3     ..~.............
	...
 800ebdc:	0000 0018 0000 0000 0000 001f 0000 0000     ................
 800ebec:	0000 007f 8000 0007 0000 0000 0000 6000     ...............`
	...
 800ec04:	c3a0 f807 0fe7 0000 3c00 0000 001c 0000     .........<......
 800ec14:	0000 0000 ffff ffff ffff f87f ffff ffff     ................
 800ec24:	1fff 0020 0010 f800 fffe 0000 ff7f f9ff     .. .............
 800ec34:	07db 0000 0000 007f 0000 0000 07f0 0000     ................
	...
 800ec4c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 800ec5c:	ffff 0000 0000 0000 0000 0000 0000 0000     ................
	...
 800ecc0:	ffff ffff ffff ffff ffff ffff ffff 0000     ................
	...
 800ecf0:	03f8 0000 0000 0000 0000 0000 0000 0000     ................
	...
 800ed10:	0000 fffe ffff bfff 00b6 0000 0000 0000     ................
 800ed20:	0000 07ff 0000 0000 f800 ffff 0000 0001     ................
	...
 800ed38:	0000 9fc0 3d9f 0000 0000 0002 0000 ffff     .....=..........
 800ed48:	07ff 0000 0000 0000 0000 0000 ffc0 0001     ................
 800ed58:	0000 0000 f800 200f e658 0800 004a 0000     ....... X...J...
 800ed68:	e8a8 0800 0200 0000 eaa8 0800 0037 0000     ............7...
 800ed78:	0100 0302 0504 0706 0908 0a08 0c0b 0e0d     ................
 800ed88:	100f 1211 1413 1502 1716 1918 1b1a 1d1c     ................
 800ed98:	1f1e 0220 0202 0202 0202 0202 2102 0202     .. ..........!..
 800eda8:	0202 0202 0202 0202 0202 0202 2322 2524     ............"#$%
 800edb8:	0226 0227 0228 0202 2a29 022b 2d2c 2f2e     &.'.(...)*+.,-./
 800edc8:	0230 3102 0202 3202 0202 0202 0202 0202     0..1...2........
 800edd8:	0233 3402 0202 0202 0202 0202 0202 0202     3..4............
 800ede8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800edf8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ee08:	0202 3502 3602 3702 0202 0202 0202 0202     ...5.6.7........
 800ee18:	0238 0239 0202 0202 0202 0202 0202 0202     8.9.............
 800ee28:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ee38:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ee48:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ee58:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ee68:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ee78:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ee88:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ee98:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800eea8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800eeb8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800eec8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800eed8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800eee8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800eef8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ef08:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ef18:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ef28:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ef38:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ef48:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ef58:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ef68:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ef78:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ef88:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ef98:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800efa8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800efb8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800efc8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800efd8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800efe8:	0202 0202 0202 0202 3a02 3c3b 0202 0202     .........:;<....
 800eff8:	023d 3e02 403f 4241 4443 4645 0202 4702     =..>?@ABCDEF...G
 800f008:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f018:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f028:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f038:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f048:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f058:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f068:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f078:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f088:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f098:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f0a8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f0b8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f0c8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f0d8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f0e8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f0f8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f108:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f118:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f128:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f138:	0202 0202 0202 0202 0202 0202 0248 0202     ............H...
 800f148:	0202 0202 0202 0202 0249 0202 0202 023b     ........I.....;.
 800f158:	0100 0202 0202 0203 0202 0402 0502 0206     ................
 800f168:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f178:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f188:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f198:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f1a8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f1b8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f1c8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f1d8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f1e8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f1f8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f208:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f218:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f228:	0207 0202 0202 0202 0202 0202 0202 0202     ................
 800f238:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f248:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800f258:	3025 6c36 2075 0000 6168 646e 656c 635f     %06lu ..handle_c
 800f268:	616f 0a70 0000 0000 454e 2054 6170 6c79     oap.....NET payl
 800f278:	616f 2064 6973 657a 2520 0a64 0000 0000     oad size %d.....

0800f288 <COAP_HOST>:
 800f288:	3031 2e34 3931 2e39 3538 322e 3131 0000     104.199.85.211..

0800f298 <COAP_URI>:
 800f298:	3276 742f 6968 676e 2f73 5649 6952 4342     v2/things/IVRiBC
 800f2a8:	5263 4836 7050 435f 5a63 4649 4f66 465a     cR6HPp_CcZIFfOZF
 800f2b8:	7a78 695f 6e7a 3569 6378 4b5f 2d4f 676b     xz_izni5xc_KO-kg
 800f2c8:	4153 5932 0038 0000                         SA2Y8...

0800f2d0 <COLLECTOR_NODE_HW_ID>:
 800f2d0:	ff57 066a 7878 5054 2949 6724               W.j.xxTPI)$g

0800f2dc <SENSOR_NODE_HW_IDS>:
 800f2dc:	ff38 066d 574e 3634 5825 4308 0201 0403     8.m.NW46%X.C....
 800f2ec:	0605 0807 0a09 020b 0201 0403 0605 0807     ................
 800f2fc:	0a09 030b 0201 0403 0605 0807 0a09 040b     ................
 800f30c:	0201 0403 0605 0807 0a09 050b 3025 7832     ............%02x
 800f31c:	0000 0000 7325 6172 646e 6d6f 6420 7665     ....%srandom dev
 800f32c:	6369 2065 6469 2520 0a73 0000 7325 7768     ice id %s...%shw
 800f33c:	6469 0020                                   id .

0800f340 <sensor_network_encoding>:
 800f340:	0032 0000 003c 0000 3025 3031 6c6c 0078     2...<...%010llx.
 800f350:	6e20 646f 2065 0000 7325 6573 736e 726f      node ..%ssensor
 800f360:	7325 2523 0a64 0000 7325 6f63 6c6c 6365     %s#%d...%scollec
 800f370:	6f74 2572 0a73 0000 7325 7473 6e61 6164     tor%s...%sstanda
 800f380:	6f6c 656e 7325 000a 454e 2054 656e 7774     lone%s..NET netw
 800f390:	726f 206b 6f6e 2074 6572 6461 0a79 0000     ork not ready...
 800f3a0:	454e 2054 0000 0000 7325 7325 2520 0a73     NET ....%s%s %s.
 800f3b0:	0000 0000                                   ....

0800f3b4 <sensor_network_shortname>:
 800f3b4:	f3f4 0800 f3f8 0800 0000 0000               ............

0800f3c0 <sensor_node_addresses>:
 800f3c0:	b6f1 b4b5 00b3 0000 b6cd b4b5 00b3 0000     ................
 800f3d0:	b6a3 b4b5 00b3 0000 b60f b4b5 00b3 0000     ................
 800f3e0:	b605 b4b5 00b3 0000 454e 2054 7473 7261     ........NET star
 800f3f0:	0a74 0000 7673 0072 6f63 006c 636f 725f     t...svr.col.oc_r
 800f400:	7065 6f5f 0000 0000 636f 635f 5f6c 6263     ep_o....oc_cl_cb
 800f410:	0073 0000 00ff 0000 6f63 7061 725f 6365     s.......coap_rec
 800f420:	6965 6576 4e20 544f 4920 504d 454c 454d     eive NOT IMPLEME
 800f430:	544e 4445 000a 0000 0022 0000 3a22 0020     NTED...."...": .
 800f440:	002c 0000 007b 0000 7274 6575 0000 0000     ,...{...true....
 800f450:	6166 736c 0065 0000 6c25 756c 0000 0000     false...%llu....
 800f460:	6c25 646c 0000 0000 005c 0000 745c 0000     %lld....\...\t..
 800f470:	725c 0000 6e5c 0000 665c 0000 625c 0000     \r..\n..\f..\b..
 800f480:	005b 0000 005d 0000 007d 0000 6573 736e     [...]...}...sens
 800f490:	726f 6e5f 746f 6669 655f 7476 0073 0000     or_notif_evts...
 800f4a0:	7341 6573 7472 4020 3020 2578 0a78 0000     Assert @ 0x%x...
 800f4b0:	7341 6573 7472 4020 3020 2578 2078 202d     Assert @ 0x%x - 
 800f4c0:	7325 253a 0a64 0000 6e55 6168 646e 656c     %s:%d...Unhandle
 800f4d0:	2064 6e69 6574 7272 7075 2074 2528 646c     d interrupt (%ld
 800f4e0:	2c29 6520 6378 7065 6974 6e6f 7320 2070     ), exception sp 
 800f4f0:	7830 3025 6c38 0a78 0000 0000 7220 3a30     0x%08lx..... r0:
 800f500:	7830 3025 6c38 2078 7220 3a31 7830 3025     0x%08lx  r1:0x%0
 800f510:	6c38 2078 7220 3a32 7830 3025 6c38 2078     8lx  r2:0x%08lx 
 800f520:	7220 3a33 7830 3025 6c38 0a78 0000 0000      r3:0x%08lx.....
 800f530:	7220 3a34 7830 3025 6c38 2078 7220 3a35      r4:0x%08lx  r5:
 800f540:	7830 3025 6c38 2078 7220 3a36 7830 3025     0x%08lx  r6:0x%0
 800f550:	6c38 2078 7220 3a37 7830 3025 6c38 0a78     8lx  r7:0x%08lx.
 800f560:	0000 0000 7220 3a38 7830 3025 6c38 2078     .... r8:0x%08lx 
 800f570:	7220 3a39 7830 3025 6c38 2078 3172 3a30      r9:0x%08lx r10:
 800f580:	7830 3025 6c38 2078 3172 3a31 7830 3025     0x%08lx r11:0x%0
 800f590:	6c38 0a78 0000 0000 3172 3a32 7830 3025     8lx.....r12:0x%0
 800f5a0:	6c38 2078 6c20 3a72 7830 3025 6c38 2078     8lx  lr:0x%08lx 
 800f5b0:	7020 3a63 7830 3025 6c38 2078 7370 3a72      pc:0x%08lx psr:
 800f5c0:	7830 3025 6c38 0a78 0000 0000 4349 5253     0x%08lx.....ICSR
 800f5d0:	303a 2578 3830 786c 4820 5346 3a52 7830     :0x%08lx HFSR:0x
 800f5e0:	3025 6c38 2078 4643 5253 303a 2578 3830     %08lx CFSR:0x%08
 800f5f0:	786c 000a 4642 5241 303a 2578 3830 786c     lx..BFAR:0x%08lx
 800f600:	4d20 464d 5241 303a 2578 3830 786c 000a      MMFAR:0x%08lx..
 800f610:	616d 6e69 0000 0000 6469 656c 0000 0000     main....idle....
 800f620:	736d 7379 315f 0000                         msys_1..

0800f628 <MemFile_methods>:
 800f628:	7db1 0800 0000 0000                         .}......

0800f630 <stdout>:
 800f630:	0184 2000 6177 656b 7075 2520 0a64 0000     ... wakeup %d...
 800f640:	6974 656d 2520 2064 6573 7363 000a 0000     time %d secs....
 800f650:	6564 7065 7320 656c 7065 2520 2064 6573     deep sleep %d se
 800f660:	7363 000a 6c61 3f6d 0020 0000 6c70 7461     cs..alm? ...plat
 800f670:	6f66 6d72 735f 6174 7472 745f 6d69 7265     form_start_timer
 800f680:	000a 0000 6175 7472 0030 0000               ....uart0...

0800f68c <uart_cfg>:
 800f68c:	4400 4000 101c 4002 0000 0002 0302 ffff     .D.@...@........
 800f69c:	875d 0800 0026 0000                         ]...&...

0800f6a4 <stm32_flash_dev>:
 800f6a4:	f6bc 0800 0000 0800 0000 0002 0080 0000     ................
 800f6b4:	0002 0000 00ff 0000                         ........

0800f6bc <stm32_flash_funcs>:
 800f6bc:	8a25 0800 8ac1 0800 8a1d 0800 8a01 0800     %...............
 800f6cc:	0000 0000 8a13 0800 0000 0000               ............

0800f6d8 <stm32_tmr_devs>:
 800f6d8:	2f34 2000 0000 0000 0000 0000               4/. ........

0800f6e4 <portmap>:
 800f6e4:	0800 4001 0c00 4001 1000 4001 1400 4001     ...@...@...@...@
 800f6f4:	1800 4001 0302 0504 0706 0908 0b0a 0d0c     ...@............
 800f704:	0f0e 1010 0201 0000 4441 2043 7263 6165     ........ADC crea
 800f714:	6574 6120 6364 0a31 0000 0000 6461 3163     te adc1.....adc1
 800f724:	0000 0000                                   ....

0800f728 <stm32f1_adc_funcs>:
 800f728:	a615 0800 a5e1 0800 a58d 0800 a53d 0800     ............=...
 800f738:	a52f 0800 a511 0800 a509 0800 6362 3539     /...........bc95
 800f748:	5f67 0030 7325 7263 6165 6574 6220 3963     g_0.%screate bc9
 800f758:	6735 305f 000a 0000 0a5b 0000 252b 3631     5g_0....[...+%16
 800f768:	5e5b 5d3a 253a 0064 252b 3631 5e5b 5d3a     [^:]:%d.+%16[^:]
 800f778:	253a 2c64 6425 0000 0a5d 0000 5441 0000     :%d,%d..]...AT..
 800f788:	0a0d 5441 0000 0000 0a0d 0000               ..AT........

0800f794 <_ZL13network_iface>:
 800f794:	0000 0000 f744 0800 0010 0000 a99d 0800     ....D...........
 800f7a4:	0000 0000 5441 203e 534e 534f 4654 253d     ....AT> NSOSTF=%
 800f7b4:	2c64 7325 252c 2c64 7325 252c 2c64 000a     d,%s,%d,%s,%d,..
 800f7c4:	7830 3032 0030 0000 534e 534f 4654 253d     0x200...NSOSTF=%
 800f7d4:	2c64 7325 252c 2c64 7325 252c 2c64 0000     d,%s,%d,%s,%d,..
 800f7e4:	252c 0064 6425 252c 0064 0000               ,%d.%d,%d...

0800f7f0 <_ZL3ATP>:
 800f7f0:	5441 002b                                   AT+.

0800f7f4 <_ZL8COMMANDS>:
 800f7f4:	f9b4 0800 f854 0800 f870 0800 f87c 0800     ....T...p...|...
 800f804:	f880 0800 f88c 0800 f894 0800 f89c 0800     ................
 800f814:	f8a4 0800 f8ac 0800 f8b4 0800 f8bc 0800     ................
 800f824:	f8c4 0800 f8d8 0800 f8e4 0800 f8f0 0800     ................
 800f834:	f8f8 0800 4b4f 0000 6573 646e 6d20 7562     ....OK..send mbu
 800f844:	0066 0000 7325 7325 2520 2e75 2e2e 000a     f...%s%s %u.....
 800f854:	434e 4e4f 4946 3d47 5541 4f54 4f43 4e4e     NCONFIG=AUTOCONN
 800f864:	4345 2c54 4146 534c 0045 0000 5251 4745     ECT,FALSE...QREG
 800f874:	5753 3d54 0032 0000 524e 0042 424e 4e41     SWT=2...NRB.NBAN
 800f884:	3d44 6425 0000 0000 4643 4e55 313d 0000     D=%d....CFUN=1..
 800f894:	4643 4e55 303d 0000 4643 4e55 003f 0000     CFUN=0..CFUN?...
 800f8a4:	4543 4552 3d47 0030 4543 4552 3f47 0000     CEREG=0.CEREG?..
 800f8b4:	4743 5441 3d54 0031 4743 5441 3f54 0000     CGATT=1.CGATT?..
 800f8c4:	534e 434f 3d52 4744 4152 2c4d 3731 302c     NSOCR=DGRAM,17,0
 800f8d4:	312c 0000 534e 524f 3d46 2c31 6425 0000     ,1..NSORF=1,%d..
 800f8e4:	534e 434f 3d4c 6425 0000 0000 4743 4150     NSOCL=%d....CGPA
 800f8f4:	4444 0052 554e 5345 4154 5354 0000 0000     DDR.NUESTATS....
 800f904:	424e 2054 6573 646e 7520 7064 000a 0000     NBT send udp....
 800f914:	424e 2054 7473 0a72 0000 0000 4f54 4f44     NBT str.....TODO
 800f924:	6f3a 5f63 7065 735f 7274 0000               :oc_ep_str..

0800f930 <_ZL9transport>:
 800f930:	0000 0000 b18d 0800 b191 0800 b1c5 0800     ................
	...
 800f948:	b19d 0800 b195 0800 b199 0800 7325 7325     ............%s%s
 800f958:	7325 0000 4f20 0a4b 0000 0000 4620 4941     %s.. OK..... FAI
 800f968:	454c 0a44 0000 0000 424e 2054 0000 0000     LED.....NBT ....
 800f978:	5441 7220 7365 6f70 736e 2065 696d 6d73     AT response mism
 800f988:	7461 6863 203a 6f66 6e75 2064 2522 2273     atch: found "%s"
 800f998:	200a 2020 7865 6570 7463 6465 2220 7325     .   expected "%s
 800f9a8:	0a22 0000 5441 2021 7325 0a0d 0000 0000     "...AT! %s......
 800f9b8:	2020 203c 6425 2f20 2520 0073 2020 203c       < %d / %s.  < 
 800f9c8:	7325 0000 5441 203d 7325 0a0d 0000 0000     %s..AT= %s......
 800f9d8:	5441 203c 7325 0000 5441 203e 7325 0a0d     AT< %s..AT> %s..
 800f9e8:	0000 0000 6574 706d 735f 6d74 3233 305f     ....temp_stm32_0
 800f9f8:	0000 0000 4d54 2050 7263 6165 6574 2520     ....TMP create %
 800fa08:	0a73 0000                                   s...

0800fa0c <g_temp_stm32_sensor_driver>:
 800fa0c:	bd81 0800 bb2d 0800 0000 0000 0000 0000     ....-...........
	...
 800fa34:	5453 204d 6572 6461 6920 746e 7420 6d65     STM read int tem
 800fa44:	2070 6573 736e 726f 000a 0000 4441 2043     p sensor....ADC 
 800fa54:	706f 6e65 6320 2068 3631 000a               open ch 16..

0800fa60 <sysflash_map_dflt>:
 800fa60:	0000 0000 0000 0800 1000 0000 0001 0000     ................
 800fa70:	1000 0800 f000 0000 0002 0000 4010 0801     .............@..
 800fa80:	0000 0000 0003 0000 4020 0801 0000 0000     ........ @......
 800fa90:	0010 0000 0000 0801 2000 0000 0011 0000     ......... ......
 800faa0:	2000 0801 2000 0000 0302 0504 0706 0908     . ... ..........
 800fab0:	0b0a 0d0c 0f0e 1010 0201                    ..........

c:/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  60082	    252	  11924	  72258	  11a42	c:/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
