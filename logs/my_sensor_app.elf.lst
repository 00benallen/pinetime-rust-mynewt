
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800112d

Program Header:
0x70000001 off    0x0000dc5c vaddr 0x0800dc5c paddr 0x0800dc5c align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x0000dc74 memsz 0x0000dc74 flags rwx
    LOAD off    0x0001010c vaddr 0x2000010c paddr 0x0800dc74 align 2**16
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x00010208 vaddr 0x20000208 paddr 0x0800dd6c align 2**16
         filesz 0x00000000 memsz 0x00003480 flags rw-
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x0000010c flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  08001000  08001000  00001000  2**0  ALLOC
  1 .text              0000cc3c  08001020  08001020  00001020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx         00000018  0800dc5c  0800dc5c  0000dc5c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 0000010c  20000000  20000000  00020000  2**0  ALLOC
  4 .coredata          00000000  2000010c  2000010c  00010204  2**0  CONTENTS
  5 .data              000000f8  2000010c  0800dc74  0001010c  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .corebss           00000000  20000204  20000204  00010204  2**0  CONTENTS
  7 .bss               00003480  20000208  0800dd6c  00010208  2**3  ALLOC
  8 .ARM.attributes    00000033  00000000  00000000  00010204  2**0  CONTENTS, READONLY
  9 .comment           0000007f  00000000  00000000  00010237  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  000102b6  2**0  CONTENTS, READONLY
 11 .debug_line        0002ac44  00000000  00000000  000102ba  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        0006bd12  00000000  00000000  0003aefe  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      0001000f  00000000  00000000  000a6c10  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     00003210  00000000  00000000  000b6c20  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0000fb72  00000000  00000000  000b9e30  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      000033d8  00000000  00000000  000c99a8  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         000288c7  00000000  00000000  000ccd80  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame       000087e4  00000000  00000000  000f5648  2**2  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo     00000002  00000000  00000000  000fde2c  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_pubnames    000000a9  00000000  00000000  000fde2e  2**0  CONTENTS, READONLY, DEBUGGING
 21 .debug_pubtypes    00000085  00000000  00000000  000fded7  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08001000 l    d  .imghdr	00000000 .imghdr
08001020 l    d  .text	00000000 .text
0800dc5c l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
2000010c l    d  .coredata	00000000 .coredata
2000010c l    d  .data	00000000 .data
20000204 l    d  .corebss	00000000 .corebss
20000208 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 startup_stm32f103xb.o
f108f85f l       *ABS*	00000000 BootRAM
08001138 l       .text	00000000 LoopCopyDataInit
08001130 l       .text	00000000 CopyDataInit
0800114c l       .text	00000000 LoopFillZerobss
08001146 l       .text	00000000 FillZerobss
0800115c l       .text	00000000 LoopFillZeroCoreBss
08001156 l       .text	00000000 FillZeroCoreBss
08001188 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 system_stm32f1xx.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 sysinit.c
0800122a l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 bluepill_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
080012a4 l     F .text	00000028 sensor_mgr_remove
080012cc l     F .text	0000005c sensor_mgr_insert
08001328 l     F .text	0000000a sensor_type_traits_empty
08001334 l     F .text	0000000c sensor_mgr_evq_set
08001372 l     F .text	0000005c sensor_read_data_func
080013ce l     F .text	00000014 sensor_mgr_match_bydevname
080013e4 l     F .text	00000050 sensor_base_ts_update_event
08001434 l     F .text	00000050 sensor_up_timestamp
080014bc l     F .text	000000a4 sensor_mgr_init
0800177c l     F .text	0000007c sensor_mgr_wakeup_event
080015da l     F .text	00000032 sensor_update_nextrun
0800160c l     F .text	0000001e sensor_calc_nextrun_delta
0800162c l     F .text	00000024 sensor_find_min_nextrun_sensor
08001704 l     F .text	0000004a sensor_mgr_poll_bytype
0800174e l     F .text	0000002e sensor_poll_per_type_trait
20000208 l     O .bss	00000078 sensor_notify_evt_area
20000280 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0800195c l     F .text	00000016 os_main
200003a0 l     O .bss	00001000 os_main_stack
200002a0 l     O .bss	00000100 g_idle_task_stack
200013a0 l     O .bss	00000050 os_main_task
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
08001c6c l     F .text	0000005c os_dev_add
08001cc8 l     F .text	00000026 os_dev_initialize
08001cee l     F .text	00000020 os_dev_init
200013f0 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
200013f8 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
08001ecc l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
08001fe0 l     F .text	0000002c os_msys_find_pool
0800204c l     F .text	00000044 os_msys_init_once
20001408 l     O .bss	00000db0 os_msys_1_data
200021b8 l     O .bss	0000000c os_msys_1_mbuf_pool
200021c4 l     O .bss	0000001c os_msys_1_mempool
20000114 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
080022a0 l     F .text	00000020 os_sanity_check_list_lock
080022c0 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
08002608 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
080026f8 l     F .text	00000058 os_deltatime
08002750 l     F .text	0000005c os_time_tick
200021e8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 HAL_CM3.o
08002e34 l       .text	00000000 SVC_User
08002e52 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 malloc.c
08002ec0 l     F .text	00000004 malloc_lock_nop
08002ec4 l     F .text	00000002 malloc_unlock_nop
08002ec6 l     F .text	00000048 __malloc_from_block
08002f10 l     F .text	00000080 __free_block
2000012c l     O .data	00000018 __malloc_head
20000144 l     O .data	00000004 malloc_lock
20000148 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
08003090 l       .text	00000000 test1
08003084 l       .text	00000000 loop1
08003096 l       .text	00000000 res1
080030b2 l       .text	00000000 test2
080030ba l       .text	00000000 done
080030a6 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
080030c6 l       .text	00000000 test1
080030c2 l       .text	00000000 loop1
080030d4 l       .text	00000000 test2
080030d0 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 creator.c
2000221c l     O .bss	0000006c __compound_literal.0
20002288 l     O .bss	00000048 stm32f1_adc1_dev
2000014c l     O .data	00000018 adc1_config
20000164 l     O .data	00000030 adc1_handle
00000000 l    df *ABS*	00000000 adc_stm32f1.c
08003178 l     F .text	00000060 stm32f1_resolve_adc_gpio
080031d8 l     F .text	00000008 stm32f1_adc_size_buffer
080031e0 l     F .text	0000001e stm32f1_adc_read_buffer
080031fe l     F .text	0000000e stm32f1_adc_release_buffer
0800320c l     F .text	0000000e stm32f1_adc_set_buffer
0800321c l     F .text	00000040 stm32f1_adc_clk_disable
0800325c l     F .text	00000052 stm32f1_adc_read_channel
080032b0 l     F .text	00000034 stm32f1_adc_sample
080032e4 l     F .text	00000086 stm32f1_adc_configure_channel
0800336a l     F .text	00000046 stm32f1_adc_uninit
080033b0 l     F .text	0000001c stm32f1_adc_close
080033cc l     F .text	00000032 config_clk
08003400 l     F .text	0000005c stm32f1_adc_clk_enable
0800345c l     F .text	00000016 stm32f1_adc_dma_init
08003472 l     F .text	00000030 stm32f1_adc_init
080034a2 l     F .text	00000048 stm32f1_adc_open
200022d0 l     O .bss	00000010 stm32f1_adc_stats
0800d234 l     O .text	0000001c stm32f1_adc_funcs
00000000 l    df *ABS*	00000000 creator.cpp
0800356c l     F .text	00000050 _ZL13config_devicev
200022e0 l     O .bss	000000c4 _ZL7esp8266
20000194 l     O .data	00000014 _ZL18uart_0_itf_esp8266
00000000 l    df *ABS*	00000000 driver.cpp
0800361c l     F .text	00000006 _ZL3drvP7esp8266
08003622 l     F .text	00000004 _ZL3cfgP7esp8266
08003626 l     F .text	00000002 _ZL13esp8266_eventPv
08003628 l     F .text	0000001c _ZL18register_transportPKcPvS0_th
08003644 l     F .text	00000024 _ZL13esp8266_closeP6os_dev
08003668 l     F .text	000000a8 _ZL12esp8266_openP6os_devmPv
08003710 l     F .text	00000078 _ZL16internal_connectP7esp8266
200023a4 l     O .bss	000000d8 _ZL10controller
2000247c l     O .bss	00000100 _ZL17esp8266_rx_buffer
2000257c l     O .bss	00000190 _ZL17esp8266_tx_buffer
2000270c l     O .bss	00000100 _ZL21esp8266_parser_buffer
200001a8 l     O .data	00000001 _ZL10first_open
0800d274 l     O .text	00000016 _ZL13WIFI_PASSWORD
0800d290 l     O .text	00000014 _ZL13network_iface
0800d2a4 l     O .text	00000008 _ZL9WIFI_SSID
00000000 l    df *ABS*	00000000 transport.cpp
08003970 l     F .text	00000004 _ZL10oc_ep_sizePK11oc_endpoint
08003974 l     F .text	00000004 _ZL14oc_ep_has_connPK11oc_endpoint
08003978 l     F .text	00000004 _ZL7oc_initv
0800397c l     F .text	00000002 _ZL11oc_shutdownv
08003980 l     F .text	00000028 _ZL9oc_ep_strPciPK11oc_endpoint
080039a8 l     F .text	00000128 _ZL11oc_tx_ucastP7os_mbuf
2000280c l     O .bss	00000004 _ZL14network_device
20002810 l     O .bss	00000004 _ZL6server
20002814 l     O .bss	00000004 _ZL6socket
200001a9 l     O .data	00000001 _ZL12transport_id
0800d2e0 l     O .text	00000024 _ZL9transport
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 Controller.cpp
00000000 l    df *ABS*	00000000 ATParser.cpp
00000000 l    df *ABS*	00000000 BufferedSerial.cpp
0800447a l     F .text	00000002 _ZL12uart_tx_donePv
0800447c l     F .text	0000006c _ZL10setup_uartP14BufferedSerial
080045c4 l     F .text	00000034 _ZL12uart_rx_charPvh
08004634 l     F .text	00000016 _ZL12uart_tx_charPv
00000000 l    df *ABS*	00000000 MyBuffer.cpp
00000000 l    df *ABS*	00000000 hmac_prng.c
20002920 l     O .bss	0000000c hw_id
2000292c l     O .bss	00000004 hw_id_len
20002930 l     O .bss	00000138 prng
20002a68 l     O .bss	00000020 seed
00000000 l    df *ABS*	00000000 creator.cpp
080047e0 l     F .text	00000044 _ZL13config_devicev
20002a88 l     O .bss	00000078 _ZL8nrf24l01
00000000 l    df *ABS*	00000000 driver.cpp
08004890 l     F .text	00000004 _ZL3drvP8nrf24l01
08004894 l     F .text	00000018 _ZL16default_callbackP8os_event
080048ac l     F .text	00000020 _ZL14nrf24l01_closeP6os_dev
080048cc l     F .text	0000001c _ZL18register_transportPKcPvS0_th
080048e8 l     F .text	00000018 _ZL20nrf24l01_irq_handlerPv
08004900 l     F .text	00000144 _ZL13nrf24l01_openP6os_devmPv
08004a44 l     F .text	00000020 _Z41__static_initialization_and_destruction_0ii
08004e00 l     F .text	0000000e _GLOBAL__sub_I_nrf24l01_init
20002b00 l     O .bss	0000001c _ZL10controller
20002b1c l     O .bss	00000010 _ZL14nrf24l01_event
20002b30 l     O .bss	00000008 _ZL19sensor_node_address
200001b0 l     O .data	00000001 _ZL10first_open
0800d590 l     O .text	00000014 _ZL13network_iface
00000000 l    df *ABS*	00000000 nRF24L01P.cpp
08004e0e l     F .text	0000000c _ZL7wait_usm
00000000 l    df *ABS*	00000000 transport.cpp
080059f8 l     F .text	00000004 _ZL10oc_ep_sizePK11oc_endpoint
080059fc l     F .text	00000004 _ZL14oc_ep_has_connPK11oc_endpoint
08005a00 l     F .text	00000004 _ZL7oc_initv
08005a04 l     F .text	00000002 _ZL11oc_shutdownv
08005a08 l     F .text	00000028 _ZL9oc_ep_strPciPK11oc_endpoint
08005a30 l     F .text	000000c4 _ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf
08005af4 l     F .text	00000114 _ZL11oc_tx_ucastP7os_mbuf
20002b38 l     O .bss	00000004 _ZL14network_device
20002b3c l     O .bss	0000000c _ZL18nrf24l01_tx_buffer
20002b48 l     O .bss	00000004 _ZL6server
20002b4c l     O .bss	00000001 _ZZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbufE8tx_count
200001b1 l     O .data	00000001 _ZL12transport_id
0800d7f0 l     O .text	00000024 _ZL9transport
00000000 l    df *ABS*	00000000 creator.c
08005ce4 l     F .text	00000048 config_device
20002b50 l     O .bss	00000064 itf_remote_sensor
20002bb8 l     O .bss	00000438 remote_sensor_dev
00000000 l    df *ABS*	00000000 remote_sensor.c
08005db8 l     F .text	00000034 sensor_get_config_internal
08005dec l     F .text	00000004 sensor_close_internal
08005df0 l     F .text	0000002c save_humid
08005e1c l     F .text	0000002c save_press
08005e48 l     F .text	0000002c save_temp
08005e74 l     F .text	00000022 save_temp_raw
08005e96 l     F .text	00000026 sensor_open_internal
08005ebc l     F .text	000000a8 sensor_read_internal
0800d82c l     O .text	00000028 g_sensor_driver
0800d854 l     O .text	00000050 sensor_types
00000000 l    df *ABS*	00000000 route_coap.c
08006070 l     F .text	00000058 decode_coap_payload
080060c8 l     F .text	000000d4 process_coap_message
0800619c l     F .text	000000d4 receive_callback
20002ff0 l     O .bss	0000000c rxData
00000000 l    df *ABS*	00000000 console.c
20002ffc l     O .bss	00000010 avail_queue
2000300c l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 semihosting_console.c
08006378 l     F .text	00000024 __semihost
0800639c l     F .text	0000001e semihost_write
08006458 l     F .text	0000001c semihosting_console_write_ch
20003018 l     O .bss	00000004 semihost_mbuf
200001b8 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 ticks.c
2000301c l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sensor_coap.c
20003020 l     O .bss	00000008 oc_sem
20003028 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000302c l     O .bss	0000000c hw_id
20003038 l     O .bss	00000004 hw_id_len
2000303c l     O .bss	00000028 sensor_network_interfaces
20003068 l     O .bss	00000008 sensor_node_address
20003070 l     O .bss	00000037 sensor_node_names_buf
200001bc l     O .data	00000014 sensor_node_names
0800d8c0 l     O .text	0000000c COLLECTOR_NODE_HW_ID
0800d8cc l     O .text	0000003c SENSOR_NODE_HW_IDS
0800d964 l     O .text	00000008 sensor_network_shortname
0800d970 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
080067fc l     F .text	00000050 config_device
200030a8 l     O .bss	00000014 adc_1_itf_temp_stm32
200030c0 l     O .bss	000000d0 temp_stm32_dev
00000000 l    df *ABS*	00000000 temp_stm32.c
080068a4 l     F .text	0000001c temp_stm32_sensor_get_config
080068c0 l     F .text	0000001e temp_stm32_close
080068e0 l     F .text	000000a8 temp_stm32_open
08006af8 l     F .text	00000088 temp_stm32_sensor_read
200001d0 l     O .data	0000000c temp_channel_config
0800d9bc l     O .text	00000028 g_temp_stm32_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
08006ba8 l     F .text	00000030 oc_buffer_tx
08006bd8 l     F .text	0000002c oc_buffer_rx
20003190 l     O .bss	00000018 oc_inq
200031a8 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_rep.c
08006c2c l     F .text	00000010 _free_rep
08006c3c l     F .text	0000001c _alloc_rep
08006c58 l     F .text	000004c4 oc_parse_rep_value
200031c0 l     O .bss	0000001c oc_rep_objects
200031dc l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 oc_ri.c
2000320c l     O .bss	000000c8 oc_client_cb_area
200032d4 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
200032f0 l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_helpers.c
00000000 l    df *ABS*	00000000 flash_map.c
0800741a l     F .text	00000078 flash_map_read_mfg
200032f4 l     O .bss	00000078 mfg_areas.6497
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
08007570 l     F .text	00000094 mfg_seek_next_aux
08007604 l     F .text	00000070 mfg_read_mmr
08007674 l     F .text	00000054 mfg_read_next_mmr
080076c8 l     F .text	0000003c mfg_open_flash_area
08007704 l     F .text	00000044 mfg_read_tlv_body
080077d0 l     F .text	0000004e mfg_read_mmr_refs
2000336c l     O .bss	00000001 mfg_initialized
20003370 l     O .bss	00000018 mfg_mmrs
20003388 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 send_coap.c
00000000 l    df *ABS*	00000000 vsscanf.c
00000000 l    df *ABS*	00000000 hmac_prng.c
08007dd8 l     F .text	000000cc update
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 hmac.c
08007f3c l     F .text	00000038 rekey
00000000 l    df *ABS*	00000000 sha256.c
08008080 l     F .text	000001b0 compress
0800da90 l     O .text	00000100 k256
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
080083ba l     F .text	0000001e cbor_mbuf_reader_cpy
080083d8 l     F .text	0000001c cbor_mbuf_reader_get8
080083f4 l     F .text	00000018 cbor_mbuf_reader_cmp
0800840c l     F .text	0000001e cbor_mbuf_reader_get64
0800842a l     F .text	0000001a cbor_mbuf_reader_get32
08008444 l     F .text	00000020 cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cborparser.c
080084b4 l     F .text	00000024 is_fixed_type
080084d8 l     F .text	00000004 iterate_noop
080084dc l     F .text	0000013c preparse_value
08008618 l     F .text	0000004c preparse_next_value
08008664 l     F .text	000000aa extract_length
0800870e l     F .text	00000170 iterate_string_chunks
0800887e l     F .text	000000d8 advance_internal
08008ba0 l     F .text	00000084 advance_recursive
00000000 l    df *ABS*	00000000 hal_bsp.c
08008c5c l     F .text	00000010 LL_GPIO_AF_DisableRemap_USART2
08008c6c l     F .text	00000072 clock_config
2000338c l     O .bss	0000003c hal_uart0
0800db98 l     O .text	00000018 uart_cfg
00000000 l    df *ABS*	00000000 adc.c
00000000 l    df *ABS*	00000000 uart_hal.c
08008d90 l     F .text	0000001a uart_hal_blocking_tx
08008daa l     F .text	0000001a uart_hal_start_rx
08008dc4 l     F .text	0000001a uart_hal_start_tx
08008dde l     F .text	00000030 uart_hal_resume
08008e0e l     F .text	0000002e uart_hal_suspend
08008e3c l     F .text	00000016 uart_hal_close
08008e52 l     F .text	00000082 uart_hal_open
00000000 l    df *ABS*	00000000 hal_flash.c
08008f3c l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 hal_flash.c
08008fd6 l     F .text	00000012 stm32_flash_sector_info
08008fe8 l     F .text	0000000a stm32_flash_init
08008ff2 l     F .text	00000008 stm32_flash_erase_sector
08008ffa l     F .text	0000000e stm32_flash_read
08009008 l     F .text	0000008c stm32_flash_write_linear
08009094 l     F .text	00000010 stm32_flash_write
00000000 l    df *ABS*	00000000 hal_gpio.c
080090a4 l     F .text	0000002c ext_irq_handler
080090d0 l     F .text	00000018 ext_irq0
080090e8 l     F .text	00000018 ext_irq1
08009100 l     F .text	00000018 ext_irq2
08009118 l     F .text	00000018 ext_irq3
08009130 l     F .text	00000018 ext_irq4
08009148 l     F .text	00000020 ext_irq9_5
08009168 l     F .text	00000020 ext_irq15_10
08009188 l     F .text	00000018 hal_gpio_pin_to_irq
080091a0 l     F .text	00000094 hal_gpio_clk_enable
08009234 l     F .text	000000a8 hal_gpio_set_nvic
200033c8 l     O .bss	00000080 gpio_irq_handlers
0800dbe4 l     O .text	00000014 portmap
00000000 l    df *ABS*	00000000 hal_os_tick.c
00000000 l    df *ABS*	00000000 hal_spi.c
080094f8 l     F .text	0000001a spim_irq_handler
08009514 l     F .text	00000020 stm32_resolve_spi_irq
08009534 l     F .text	0000004a spis_irq_handler
08009580 l     F .text	00000060 spi_irq_handler
080095e0 l     F .text	00000010 spi1_irq_handler
080095f0 l     F .text	00000040 stm32_spi_resolve_prescaler
08009630 l     F .text	000000e8 spi_ss_isr
20003448 l     O .bss	00000018 spi_stat
0800dbf8 l     O .text	00000018 stm32_hal_spis
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 hal_timer.c
08009b54 l     F .text	00000050 stm32_tmr_reg_irq
08009ba4 l     F .text	0000002e hal_timer_cnt
08009bd4 l     F .text	000000c0 stm32_hw_setup
08009d24 l     F .text	00000010 stm32_tmr0_irq
08009c94 l     F .text	0000005a stm32_tmr_cbs
08009cee l     F .text	00000036 stm32_tmr_irq
0800dc10 l     O .text	0000000c stm32_tmr_devs
00000000 l    df *ABS*	00000000 hal_uart.c
08009ea8 l     F .text	00000098 uart_irq_handler
08009f40 l     F .text	0000000a uart_irq1
08009f4a l     F .text	0000000a uart_irq2
08009f54 l     F .text	0000000a uart_irq3
08009f60 l     F .text	00000070 hal_uart_set_nvic
20003460 l     O .bss	00000018 uart_irqs
20003478 l     O .bss	0000001c uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 sbrk.c
200001f0 l     O .data	00000004 brk.4103
00000000 l    df *ABS*	00000000 stm32_driver_mod_spi.c
0800a4ec l     F .text	00000052 SPI_WaitFlagStateUntilTimeout
0800a53e l     F .text	00000028 SPI_CheckFlag_BSY
0800a568 l     F .text	00000090 SPI_CloseTx_ISR
0800a5f8 l     F .text	00000024 SPI_TxISR_8BIT
0800a61c l     F .text	00000026 SPI_TxISR_16BIT
00000000 l    df *ABS*	00000000 stm32_hw_id.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_adc.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_adc_ex.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_dma.c
0800af58 l     F .text	0000002c DMA_SetConfig
00000000 l    df *ABS*	00000000 stm32f1xx_hal_flash.c
0800b090 l     F .text	0000001c FLASH_Program_HalfWord
0800b0ac l     F .text	00000074 FLASH_SetErrorCode
00000000 l    df *ABS*	00000000 stm32f1xx_hal_flash_ex.c
0800b250 l     F .text	00000024 FLASH_MassErase
00000000 l    df *ABS*	00000000 stm32f1xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_iwdg.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_rcc.c
0800b660 l     F .text	0000002c RCC_Delay
00000000 l    df *ABS*	00000000 stm32f1xx_hal_rcc_ex.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_spi.c
0800bdd4 l     F .text	00000096 SPI_WaitFlagStateUntilTimeout
0800be6a l     F .text	00000028 SPI_CheckFlag_BSY
0800c23c l     F .text	00000010 SPI_DMAAbortOnError
00000000 l    df *ABS*	00000000 stm32f1xx_hal_tim.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_timer_freq.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0800c5fa l     F .text	000000c0 ui2a
0800c6ba l     F .text	00000020 i2a
0800c6da l     F .text	00000030 a2d
0800c70a l     F .text	00000036 a2i
0800c740 l     F .text	0000002a putf
0800c76c l     F .text	0000011c putchw
0800c888 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0800cc1c l     F .text	00000004 stdin_read
0800cc20 l     F .text	00000010 stdout_write
200001f4 l     O .data	00000004 _stdin
200001f8 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 3ez56hdq55zucvtg
00000a8a l       .debug_str	00000000 
0000f9e0 l       .debug_str	00000000 
0000fa21 l       .debug_str	00000000 
00000052 l       .debug_str	00000000 
0000fa2c l       .debug_str	00000000 
0000fac6 l       .debug_str	00000000 
00008e58 l       .debug_str	00000000 
0000faa9 l       .debug_str	00000000 
0000fa31 l       .debug_str	00000000 
0000fa3a l       .debug_str	00000000 
0000fa7b l       .debug_str	00000000 
0000fa84 l       .debug_str	00000000 
0000fa94 l       .debug_str	00000000 
0000fa8d l       .debug_str	00000000 
0000b579 l       .debug_str	00000000 
0000fa97 l       .debug_str	00000000 
0000fa9d l       .debug_str	00000000 
0000faa3 l       .debug_str	00000000 
0000faa8 l       .debug_str	00000000 
0000faad l       .debug_str	00000000 
00002eac l       .debug_str	00000000 
0000fab3 l       .debug_str	00000000 
0000fac4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vmgs9grk9b25wiv
0000fa84 l       .debug_str	00000000 
0000faa3 l       .debug_str	00000000 
0000b579 l       .debug_str	00000000 
0000fa9d l       .debug_str	00000000 
0000f9e0 l       .debug_str	00000000 
0000fa21 l       .debug_str	00000000 
00000052 l       .debug_str	00000000 
0000fa2c l       .debug_str	00000000 
0000faca l       .debug_str	00000000 
0000fa31 l       .debug_str	00000000 
0000fa94 l       .debug_str	00000000 
0000b2ea l       .debug_str	00000000 
0000fad0 l       .debug_str	00000000 
0000fb16 l       .debug_str	00000000 
0000fa97 l       .debug_str	00000000 
0000fb1e l       .debug_str	00000000 
0000fb67 l       .debug_str	00000000 
0000fa8d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 bluepill_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
08008956 g     F .text	00000078 _cbor_value_decode_int64_internal
08001188  w    F .text	00000002 RTC_Alarm_IRQHandler
0800640c g     F .text	0000004c console_buffer
08001188  w    F .text	00000002 EXTI2_IRQHandler
0800a70c  w    F .text	00000002 HAL_ADC_MspInit
0800d074 g     O .text	00000008 APBPrescTable
080073a2 g     F .text	00000014 oc_alloc_string
0800298c g     F .text	00000034 os_arch_start
20003688 g       .bss	00000000 __HeapBase
20003584 g     O .bss	00000008 g_os_task_list
080018dc g     F .text	00000080 os_idle_task
0800a8dc g     F .text	0000000a ADC_DMAHalfConvCplt
0800b510 g     F .text	000000e0 HAL_GPIO_DeInit
200035e0 g     O .bss	0000006c stm32_hal_spi0
00000000 g       .svc_table	00000000 SVC_Count
0800cc04 g     F .text	00000018 fmemopen_w
08001188  w    F .text	00000002 DebugMon_Handler
08002c9a g     F .text	0000005a os_mbuf_copydata
08003f80 g     F .text	000000c4 _ZN7ESP82668sendMBufEiP7os_mbuf
20003568 g     O .bss	00000008 g_os_mempool_list
08001af4 g     F .text	0000001a os_callout_init
08001b10 g     F .text	0000003c os_callout_stop
08002f90 g     F .text	00000050 add_malloc_block
08005d2c g     F .text	0000008c remote_sensor_create
08001e30 g     F .text	00000054 os_eventq_put
080072d0 g     F .text	00000038 oc_transport_register
08008230 g     F .text	0000005c tc_sha256_init
2000010c g       .data	00000000 __data_start__
080050d8 g     F .text	00000012 _ZN9nRF24L01P14getRfFrequencyEv
0800cb50 g     F .text	00000024 printf
0800169c g     F .text	00000068 sensor_read
0800dc4c g     O .text	00000004 stdout
0800cbc4 g     F .text	00000010 vsprintf
0800bc5c g     F .text	00000020 HAL_RCC_GetPCLK1Freq
08009344 g     F .text	0000002c hal_gpio_write
08001188  w    F .text	00000002 TIM1_CC_IRQHandler
0800bc7c g     F .text	00000020 HAL_RCC_GetPCLK2Freq
0800dbc8 g     O .text	0000001c stm32_flash_funcs
080055b8 g     F .text	000000b0 _ZN9nRF24L01P12getTxAddressEv
080028e8 g     F .text	000000a0 os_arch_os_init
08001188  w    F .text	00000002 HardFault_Handler
08009d34 g     F .text	000000b4 hal_timer_init
0800775a g     F .text	0000001a mfg_seek_next_with_type
080029c0 g     F .text	0000005c os_arch_os_start
08004f04 g     F .text	00000058 _ZN9nRF24L01P15setTransferSizeEii
08007850 g     F .text	00000014 __wrap_coap_receive
08002e82 g     F .text	0000000c SysTick_Handler
2000010c g       .coredata	00000000 __coredata_end__
0800b5fe g     F .text	0000000c HAL_GPIO_WritePin
08007374 g     F .text	00000024 oc_init
0800159c g     F .text	00000014 sensor_mgr_find_next_bydevname
080035bc g     F .text	00000060 esp8266_create
08001188  w    F .text	00000002 PVD_IRQHandler
08001fa8 g     F .text	00000026 os_memblock_put
080020a0 g     F .text	00000020 os_msys_get_pkthdr
08004f9e g     F .text	00000028 _ZN9nRF24L01P11getRegisterEi
200035bc g     O .bss	00000004 flash_map
0800dc74 g       *ABS*	00000000 _sidata
0800bc50 g     F .text	0000000c HAL_RCC_GetHCLKFreq
08002e58 g     F .text	0000002a PendSV_Handler
20002818 g     O .bss	00000004 debug_vrecv
08001188  w    F .text	00000002 NMI_Handler
0800dc74 g       .ARM.exidx	00000000 __exidx_end
08001020 g       .text	00000000 __isr_vector_start
08001188  w    F .text	00000002 EXTI3_IRQHandler
0800cbd4 g     F .text	0000002e memfile_write
08002868 g     F .text	00000014 os_arch_ctx_sw
0800ba68 g     F .text	00000070 HAL_RCC_GetSysClockFreq
080037dc g     F .text	00000004 esp8266_config
08004538 g     F .text	0000004c _ZN14BufferedSerial5fgetcEi
08008ed4 g     F .text	00000068 uart_hal_init
08009b1c g     F .text	0000002c hal_system_reset
08001980 g     F .text	00000070 os_init_idle_task
08006642 g     F .text	00000008 get_collector_node_address
2000012c g       .data	00000000 __aeabi_unwind_cpp_pr0
0800241c g     F .text	0000000c os_sched_set_current_task
0800dc74 g       .ARM.exidx	00000000 __etext
200001ac g     O .data	00000004 _esp
0800b60a g     F .text	0000004a HAL_IWDG_Init
20000204 g       .corebss	00000000 __corebss_start__
08002108 g     F .text	000000b8 os_mutex_release
08009718 g     F .text	00000024 stm32_resolve_spi_irq_handler
080022ec g     F .text	00000024 os_sanity_check_register
080027f8 g     F .text	00000026 os_time_delay
0800c2dc g     F .text	00000038 stm32_mcu_flash_erase_sector
20000208 g       .bss	00000000 _sbss
08002d6e g     F .text	00000088 os_mbuf_copyinto
08007774 g     F .text	0000000a mfg_read_tlv_flash_area
08006550 g     F .text	0000000c console_get_ticks
080089ce g     F .text	00000020 cbor_parser_init
08004e34 g     F .text	0000000e _ZN9nRF24L01P7disableEv
08007864 g     F .text	00000572 vsscanf
080012a0 g     F .text	00000002 sensor_dev_create
0800af84 g     F .text	00000074 HAL_DMA_Start_IT
08006270 g     F .text	0000004c remote_sensor_start
08001fd0 g     F .text	00000010 os_mempool_module_init
080040b6 g     F .text	00000004 _ZN7ESP826610setTimeoutEm
0800288e g     F .text	0000000a os_arch_in_critical
0800659c g     F .text	00000070 get_hardware_id
0800b33c g     F .text	000001d4 HAL_GPIO_Init
080040ba g     F .text	0000000c _ZN7ESP82666attachEPFvPvES0_
0800b654 g     F .text	0000000c HAL_IWDG_Refresh
0800285e g     F .text	0000000a timer_handler
08001d7c g     F .text	00000020 os_dev_lookup
08002428 g     F .text	00000090 os_sched_sleep
0800654c g     F .text	00000004 semihosting_console_init
080030c0 g     F .text	0000001a memcpy
080050ec g     F .text	00000070 _ZN9nRF24L01P16setRfOutputPowerEi
0800a710 g     F .text	00000170 HAL_ADC_PollForConversion
0800a448 g     F .text	00000034 hal_watchdog_init
080046dc g     F .text	00000104 hmac_prng_init
08001c54 g     F .text	0000000c os_cputime_init
08001188  w    F .text	00000002 EXTI0_IRQHandler
08001188  w    F .text	00000002 I2C2_EV_IRQHandler
08005c08 g     F .text	00000024 init_nrf24l01_endpoint
0800ccd0 g     F .text	00000000 .hidden __aeabi_uldivmod
00000020 g       *ABS*	00000000 _imghdr_size
080023e0 g     F .text	00000030 os_sched_ctx_sw_hook
20003594 g     O .bss	00000004 console_is_midline
08002aca g     F .text	00000014 os_mbuf_free
2000010c g     O .data	00000004 SystemCoreClock
08004f80 g     F .text	0000000c _ZN9nRF24L01P22disableAutoAcknowledgeEv
20003498 g     O .bss	00000034 sensor_mgr
0800739c g     F .text	00000002 oc_register_ip6
08003ecc g     F .text	00000048 _ZN7ESP826612getIPAddressEv
08002898 g     F .text	00000038 os_arch_task_stack_init
08002fe0 g     F .text	0000006c malloc
080074d4 g     F .text	00000026 flash_area_read
080017f8 g     F .text	0000004c __assert_func
08004d30 g     F .text	00000072 nrf24l01_receive
0800aba4 g     F .text	00000130 HAL_ADC_Start_DMA
0800256c g     F .text	00000040 os_sched_wakeup_ticks
080062e4 g     F .text	0000004c console_pkg_init
08001188  w    F .text	00000002 UsageFault_Handler
0800cb74 g     F .text	0000003a vsnprintf
08006628 g     F .text	0000001a is_standalone_node
20003560 g     O .bss	00000008 g_callout_list
08001188  w    F .text	00000002 ADC1_2_IRQHandler
080046b8 g     F .text	00000004 _ZN14BufferedSerial4baudEm
0800c8ec g     F .text	0000025c tfp_format
20005000 g       .bss	00000000 __HeapLimit
20000208 g       .bss	00000000 __bss_start__
08009b18 g     F .text	00000004 hal_debugger_connected
0800b5f0 g     F .text	0000000e HAL_GPIO_ReadPin
080038e8 g     F .text	00000058 esp8266_socket_connect
08003e24 g     F .text	00000040 _ZN7ESP82664dhcpEbi
080046ce  w    F .text	0000000c _ZN8MyBufferIcE4initEPcm
200035c4 g     O .bss	0000001c ext_irq_counts
0800c314 g     F .text	00000054 stm32_hal_timer_get_freq
2000010c g       .data	00000000 _sdata
08001188  w    F .text	00000002 SPI1_IRQHandler
0800b298 g     F .text	000000a4 HAL_FLASHEx_Erase
0800cd00 g     F .text	000002ce .hidden __udivmoddi4
08005668 g     F .text	0000001c _ZN9nRF24L01P17getStatusRegisterEv
08003bec g     F .text	00000014 _okfailed
0800664c g     F .text	0000000c get_sensor_node_address
08005040 g     F .text	00000040 _ZN9nRF24L01P15setTransmitModeEv
0800a900 g     F .text	00000138 HAL_ADC_ConfigChannel
08001188  w    F .text	00000002 TAMPER_IRQHandler
08004e1a g     F .text	00000006 _ZN9nRF24L01PC2Ev
08006668 g     F .text	000000c0 sensor_network_init
08008b64 g     F .text	0000003c _cbor_value_copy_string
08004044 g     F .text	0000005c _ZN7ESP826615_packet_handlerEv
2000357c g     O .bss	00000004 g_current_task
08002310 g     F .text	0000006c os_sanity_run
0800287c g     F .text	0000000c os_arch_save_sr
0800a418 g     F .text	00000030 hal_uart_close
08001f44 g     F .text	00000014 os_mempool_init
08002820 g     F .text	00000038 os_gettimeofday
2000358c g     O .bss	00000001 g_task_id
20003598 g     O .bss	00000001 g_console_input_ignore
0800dbb0 g     O .text	00000018 stm32_flash_dev
20003668 g     O .bss	00000020 pFlash
0800ad20 g     F .text	00000110 HAL_ADC_Init
0800a0b0 g     F .text	00000038 hal_uart_blocking_tx
0800dc5c g       .text	00000000 __exidx_start
0800c4e0 g     F .text	0000011a strntoumax
0800237c g     F .text	00000010 os_sanity_init
08002b16 g     F .text	000000aa os_mbuf_append
0800777e g     F .text	0000000a mfg_read_tlv_mmr_ref
08002df8 g     F .text	00000014 os_set_env
08008ce0 g     F .text	00000010 hal_bsp_flash_dev
08006728 g     F .text	000000d4 sensor_network_register_interface
0800dc44 g     O .text	00000008 MemFile_methods
20003570 g     O .bss	0000000c g_os_sanity_check_mu
08001188  w    F .text	00000002 DMA1_Channel4_IRQHandler
08005258 g     F .text	00000054 _ZN9nRF24L01P11setCrcWidthEi
08004cb8 g     F .text	00000078 nrf24l01_send
0800a4a8 g     F .text	00000044 _sbrk
08006988 g     F .text	0000002c temp_stm32_default_cfg
08008c48 g     F .text	00000014 cbor_value_calculate_string_length
08006404 g     F .text	00000008 disable_buffer
080094a0 g     F .text	0000001c os_tick_idle
08004fc8 g     F .text	00000038 _ZN9nRF24L01P7powerUpEv
0800ae6c g     F .text	000000ec HAL_ADCEx_Calibration_Start
08006330 g     F .text	00000048 console_printf
200001b4 g     O .data	00000004 _nrf
080064e4 g     F .text	0000002c console_dump
0800660c g     F .text	0000001c is_collector_node
200001dc g     O .data	00000014 spi0_cfg
08005fd0 g     F .text	00000018 remote_sensor_default_cfg
080062da g     F .text	00000008 console_blocking_mode
0800be94  w    F .text	00000080 HAL_SPI_Init
080051b4 g     F .text	00000058 _ZN9nRF24L01P14setAirDataRateEi
080089ee g     F .text	00000138 cbor_value_enter_container
0800352c g     F .text	00000040 stm32f1_adc_dev_init
20000204 g       .corebss	00000000 __corebss_end__
0800c150 g     F .text	000000ec HAL_SPI_IRQHandler
08001218 g     F .text	00000002 _init
08004824 g     F .text	0000006c nrf24l01_create
08005892 g     F .text	00000020 _ZN9nRF24L01P7flushTxEv
08003884 g     F .text	00000064 esp8266_socket_open
08003f14 g     F .text	0000006c _ZN7ESP82664openEPKciS1_i
0800be92  w    F .text	00000002 HAL_SPI_MspInit
080056d0 g     F .text	00000018 _ZN9nRF24L01P12readablePipeEv
0800cc30 g     F .text	0000009e .hidden __aeabi_d2f
08001188  w    F .text	00000002 USART3_IRQHandler
080094bc g     F .text	0000003c os_tick_init
08001484 g     F .text	0000001c sensor_mgr_lock
08001188  w    F .text	00000002 RTC_IRQHandler
08004126 g     F .text	00000026 _ZN8ATParser5writeEPKci
20003688 g       .bss	00000000 _ebss
080073b6 g     F .text	00000010 oc_free_string
080019f0 g     F .text	000000b0 os_init
08001188  w    F .text	00000002 DMA1_Channel7_IRQHandler
0800112c  w    F .text	0000003e Reset_Handler
08003c28 g     F .text	00000058 _ZN7ESP82664initEPcmS0_mS0_mb
0800c24c g     F .text	00000074 TIM_Base_SetConfig
080045f8 g     F .text	0000003c _ZN14BufferedSerial5txIrqEv
080072c4 g     F .text	0000000c oc_evq_set
08001188  w    F .text	00000002 CAN1_RX1_IRQHandler
20003494 g     O .bss	00000001 sysinit_active
08002a58 g     F .text	0000000a os_mbuf_pool_init
080082e2 g     F .text	000000d8 tc_sha256_final
08002e8e g     F .text	0000001e os_default_irq_asm
080025ac g     F .text	0000000c os_sched_next_task
08004ec4 g     F .text	00000040 _ZN9nRF24L01P14setRfFrequencyEi
0800238c g     F .text	00000054 os_sched_insert
08004e20 g     F .text	00000014 _ZN9nRF24L01P6enableEv
08001b4c g     F .text	00000078 os_callout_reset
08007788 g     F .text	00000038 mfg_init
08001e10 g     F .text	00000010 os_dev_reset
0800a6ea g     F .text	00000004 hal_bsp_hw_id_len
08001188  w    F .text	00000002 TIM4_IRQHandler
080020f4 g     F .text	00000014 os_mutex_init
080054ac g     F .text	0000010c _ZN9nRF24L01P12getRxAddressEi
080074fc g     F .text	00000070 flash_map_init
0800cbb0 g     F .text	00000014 vprintf
08001974 g     F .text	0000000c os_started
20000000 g       .bss	00000000 _ram_start
08002530 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0800b1b4 g     F .text	0000009c HAL_FLASH_Program
080073e2 g     F .text	00000010 _oc_free_array
08001188  w    F .text	00000002 I2C1_EV_IRQHandler
08008c24 g     F .text	00000024 cbor_value_advance
08005328 g     F .text	000000e4 _ZN9nRF24L01P12setRxAddressEyii
080057c0 g     F .text	000000b2 _ZN9nRF24L01P5writeEiPci
0800410e g     F .text	00000018 _ZN8ATParser5flushEv
08006584 g     F .text	00000018 is_sensor_node
20000204 g       .data	00000000 __data_end__
08007ffe g     F .text	0000001e tc_hmac_init
08001188  w    F .text	00000002 DMA1_Channel6_IRQHandler
0800d034 g     F .text	0000001c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h2f0f6af234e01f66E
20003590 g     O .bss	00000004 g_os_time
0800515c g     F .text	00000058 _ZN9nRF24L01P16getRfOutputPowerEv
0800973c g     F .text	0000004c hal_spi_init
08009fd0 g     F .text	00000044 hal_uart_init_cbs
0800a498 g     F .text	00000010 hal_watchdog_tickle
20003688 g       .bss	00000000 __bss_end__
08006c04 g     F .text	00000028 oc_buffer_init
08002a62 g     F .text	00000032 os_mbuf_get
08004e42 g     F .text	0000000c _ZN9nRF24L01P6selectEv
08001188  w    F .text	00000002 TIM3_IRQHandler
08001188  w    F .text	00000002 RCC_IRQHandler
08001188  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
08004f5c g     F .text	00000024 _ZN9nRF24L01P17disableAllRxPipesEv
08001188  w    F .text	00000002 DMA1_Channel1_IRQHandler
08005fe8 g     F .text	00000088 remote_sensor_init
08002090 g     F .text	00000010 os_msys_reset
08001188 g       .text	00000002 Default_Handler
0800b274 g     F .text	00000024 FLASH_PageErase
08001204 g     F .text	00000014 _start
0800d064 g     O .text	00000010 AHBPrescTable
0800464a g     F .text	00000030 _ZN14BufferedSerial5primeEv
08006474 g     F .text	00000070 console_printhex
0800ae30 g     F .text	0000003a HAL_ADC_Stop
08004c18 g     F .text	000000a0 nrf24l01_config
0800b148 g     F .text	0000006c FLASH_WaitForLastOperation
080043ec g     F .text	0000001c _ZN8ATParser4recvEPKcz
08002e0c g     F .text	00000006 os_arch_init_task_stack
08002bc0 g     F .text	000000b8 os_mbuf_dup
080052ac g     F .text	00000038 _ZN9nRF24L01P15getTransferSizeEi
08001188  w    F .text	00000002 EXTI15_10_IRQHandler
0800aab8 g     F .text	000000ec HAL_ADC_Start
08007ef0 g     F .text	00000044 tc_hmac_prng_reseed
20003508 g     O .bss	00000050 g_idle_task
08009370 g     F .text	00000050 hal_gpio_init_out
080093c0 g     F .text	00000020 hal_gpio_read
20000110 g     O .data	00000004 sysinit_panic_cb
08009314 g     F .text	00000030 hal_gpio_deinit_stm
0800bad8 g     F .text	00000178 HAL_RCC_ClockConfig
200021e0 g     O .bss	00000004 g_os_sanity_check_list
0800310c g     F .text	00000024 strncpy
080015b0 g     F .text	00000008 sensor_pkg_init
0800a070 g     F .text	00000040 hal_uart_start_tx
08001f58 g     F .text	00000032 os_memblock_get
080024b8 g     F .text	00000078 os_sched_wakeup
2000291c g     O .bss	00000004 rx_ptr
08003c80 g     F .text	0000000c _ZN7ESP82669configureEi
08002a32 g     F .text	00000026 os_mqueue_get
080052e4 g     F .text	00000044 _ZN9nRF24L01P21enableAutoAcknowledgeEi
0800c368 g     F .text	00000010 os_sem_init
08003c8c g     F .text	00000088 _ZN7ESP82667setEchoEb
080073f2 g     F .text	00000028 _oc_alloc_string_array
08007ea4 g     F .text	0000004c tc_hmac_prng_init
0800781e g     F .text	00000030 mem_init_mbuf_pool
08004f8c g     F .text	00000012 _ZN9nRF24L01P21disableAutoRetransmitEv
08001844 g     F .text	00000098 os_default_irq
08003130 g     F .text	00000048 stm32f1_adc_create
080097a8 g     F .text	00000090 hal_spi_slave_set_def_tx_val
20003580 g     O .bss	00000004 g_os_last_ctx_sw_time
0800c378 g     F .text	00000064 os_sem_release
080056e8 g     F .text	000000d8 _ZN9nRF24L01P4readEiPci
08004e1a g     F .text	00000006 _ZN9nRF24L01PC1Ev
08003e64 g     F .text	00000068 _ZN7ESP82667connectEPKcS1_
08003078 g     F .text	00000048 memcmp
080028d0 g     F .text	00000018 os_arch_init
2000010c g       .coredata	00000000 __coredata_start__
20000204 g       .corebss	00000000 __ecorebss
0800c4b4 g     F .text	0000001c sscanf
0800cfd0  w    F .text	00000002 .hidden __aeabi_ldiv0
08001188  w    F .text	00000002 EXTI9_5_IRQHandler
08001230 g     F .text	0000000c sysinit_start
08009de8 g     F .text	0000009c hal_timer_config
08004a64 g     F .text	00000110 nrf24l01_init
08001d9c g     F .text	00000044 os_dev_open
08006660 g     F .text	00000008 get_sensor_node_names
08004b74 g     F .text	000000a4 nrf24l01_default_cfg
0800c3dc g     F .text	000000b8 os_sem_pend
0800a47c g     F .text	0000001c hal_watchdog_enable
0800414c g     F .text	00000026 _ZN8ATParser4readEPci
0800c14c  w    F .text	00000002 HAL_SPI_TxCpltCallback
08009b48 g     F .text	00000008 HAL_GetTick
080034ec g     F .text	00000040 HAL_ADC_ErrorCallback
0800655c g     F .text	00000028 init_sensor_coap
0800200c g     F .text	00000040 os_msys_register
20003558 g     O .bss	00000004 g_os_idle_ctr
08007494 g     F .text	00000040 flash_area_open
08005000 g     F .text	00000040 _ZN9nRF24L01P14setReceiveModeEv
08001188  w    F .text	00000002 SPI2_IRQHandler
2000281c g     O .bss	00000100 rx_buf
08002cf4 g     F .text	0000007a os_mbuf_cmpf
080073c6 g     F .text	0000001c _oc_new_array
080030da g     F .text	00000016 memset
08001188  w    F .text	00000002 MemManage_Handler
08001020 g       .text	00000000 __isr_vector
0800cfd4 g     F .text	00000060 main
08006510 g     F .text	0000003c console_out_nolock
08003ad0 g     F .text	00000024 init_esp8266_endpoint
0800684c g     F .text	00000058 temp_stm32_create
0800bf14 g     F .text	00000238 HAL_SPI_TransmitReceive
0800121a g     F .text	00000010 rust_sysinit
08007308 g     F .text	00000020 oc_send_buffer
0800123c g     F .text	0000000c sysinit_end
0800756c g     F .text	00000002 modlog_init
08002e12 g     F .text	00000046 SVC_Handler
080044e8 g     F .text	00000040 _ZN14BufferedSerial4initEPcmS0_mPKc
0800cc30 g     F .text	0000009e .hidden __truncdfsf2
08005872 g     F .text	00000020 _ZN9nRF24L01P7flushRxEv
2000359c g     O .bss	00000020 oc_transports
0800bc9c g     F .text	0000003c HAL_RCC_GetClockConfig
08008f82 g     F .text	00000054 hal_flash_read
0800bcd8 g     F .text	000000fc HAL_RCCEx_GetPeriphCLKFreq
08001ec4 g     F .text	00000008 os_eventq_dflt_get
08009e84 g     F .text	00000024 hal_timer_read
08007398 g     F .text	00000002 oc_register_gatt
08006b80 g     F .text	00000028 temp_stm32_config
0800452c g     F .text	0000000c _ZN14BufferedSerial8readableEv
08002b02 g     F .text	00000014 os_mbuf_len
20003599 g     O .bss	00000001 g_silence_console
08002858 g     F .text	00000006 os_time_ms_to_ticks
08001188  w    F .text	00000002 DMA1_Channel5_IRQHandler
08001c20 g     F .text	00000034 os_callout_wakeup_ticks
08001188  w    F .text	00000002 EXTI4_IRQHandler
080015b8 g     F .text	00000018 sensor_lock
08003c00 g     F .text	00000028 _log
08001188  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
200035c0 g     O .bss	00000004 flash_map_entries
08001020 g       .imghdr	00000000 __text
08007748 g     F .text	00000012 mfg_seek_next
080030f0 g     F .text	0000001c strcmp
08001560 g     F .text	0000003c sensor_mgr_find_next
08002410 g     F .text	0000000c os_sched_get_current_task
080062bc g     F .text	0000001e console_write
080058c4 g     F .text	00000134 _ZN9nRF24L01P4initEiiiiiiiiihhyPKyh
0800a6f0 g     F .text	0000001c hal_bsp_hw_id
080046a0 g     F .text	00000018 _ZN14BufferedSerial6attachEPFvPvES0_i
0800118c g     F .text	00000044 SystemInit
08001c60 g     F .text	0000000a os_cputime_get32
08005c2c g     F .text	0000001c init_nrf24l01_server
080040a0 g     F .text	00000016 _Z14packet_handlerPv
08004174 g     F .text	00000058 _ZN8ATParser5vsendEPKcSt9__va_list
080050ac g     F .text	0000002c _ZN9nRF24L01P18disableRxInterruptEv
08001e84 g     F .text	00000040 os_eventq_remove
080014b0 g     F .text	0000000c sensor_mgr_evq_get
08001188  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
0800c494 g     F .text	00000020 sprintf
08004408 g     F .text	00000072 _ZN8ATParser3oobEPKcPFvPvES2_
08004da2 g     F .text	0000001a nrf24l01_readable_pipe
0800467a g     F .text	00000026 _ZN14BufferedSerial4putcEi
080025b8 g     F .text	00000022 os_sched
080058b2 g     F .text	00000010 _ZN9nRF24L01P9flushTxRxEv
08007328 g     F .text	0000004c oc_send_multicast_message
0800a014 g     F .text	0000005c hal_uart_start_rx
080021c0 g     F .text	000000e0 os_mutex_pend
08005f64 g     F .text	00000044 remote_sensor_lookup_type
00000000 g       .svc_table	00000000 SVC_Table
08001188  w    F .text	00000002 DMA1_Channel3_IRQHandler
08009aa8 g     F .text	00000070 hal_spi_tx_val
2000364c g     O .bss	00000010 stm32_tmr0
08005080 g     F .text	0000002c _ZN9nRF24L01P17enableRxInterruptEv
08003d14 g     F .text	00000088 _ZN7ESP82665resetEv
08009b50 g     F .text	00000004 HAL_InitTick
20005000 g       .bss	00000000 __StackTop
080015d0 g     F .text	0000000a sensor_unlock
08002a20 g     F .text	00000012 os_mqueue_init
08001188  w    F .text	00000002 TIM1_UP_IRQHandler
08003d9c g     F .text	00000088 _ZN7ESP82667startupEi
080063bc g     F .text	00000048 console_flush
08009838 g     F .text	00000270 hal_spi_config
080046bc  w    F .text	00000012 _ZN8MyBufferIcE5clearEv
08001188  w    F .text	00000002 WWDG_IRQHandler
08007f74 g     F .text	0000008a tc_hmac_set_key
08004584 g     F .text	00000040 _ZN14BufferedSerial5rxIrqEh
200034cc g     O .bss	00000020 st_up_osco
0800828c g     F .text	00000056 tc_sha256_update
08001bc4 g     F .text	0000005c os_callout_tick
0800da28 g     O .text	00000048 sysflash_map_dflt
08001188  w    F .text	00000002 TIM2_IRQHandler
0800112c g       .text	00000000 __isr_vector_end
08001aa0 g     F .text	0000001a os_start
080043d0 g     F .text	0000001c _ZN8ATParser4sendEPKcz
08007f34 g     F .text	00000008 _set
08009788 g     F .text	00000020 hal_spi_enable
08006658 g     F .text	00000008 get_sensor_node_addresses
0800a0e8 g     F .text	00000310 hal_uart_config
08001650 g     F .text	0000002e sensor_mgr_register
08004e7a g     F .text	0000004a _ZN9nRF24L01P11setRegisterEii
0800aa38 g     F .text	00000080 ADC_Enable
08001188  w    F .text	00000002 TIM1_BRK_IRQHandler
080040f8 g     F .text	0000000a _ZN8ATParser4putcEc
20005000 g       .imghdr	00000000 _estack
08001188  w    F .text	00000002 EXTI1_IRQHandler
08003940 g     F .text	00000030 esp8266_socket_send_mbuf
080077c0 g     F .text	00000010 mfg_open
2000011c g     O .data	00000008 g_os_run_list
08005c48 g     F .text	0000009c nrf24l01_register_transport
20000204 g       .data	00000000 _edata
080011d0 g     F .text	00000034 NVIC_Relocate
0800739a g     F .text	00000002 oc_register_ip4
08005fa8 g     F .text	00000028 remote_sensor_config
08001248 g     F .text	00000058 sysinit_app
080014a0 g     F .text	00000010 sensor_mgr_unlock
20002218 g     O .bss	00000004 os_flags
08007294 g     F .text	00000030 oc_ri_mem_init
0800b120 g     F .text	00000028 HAL_FLASH_Unlock
08002888 g     F .text	00000006 os_arch_restore_sr
08004e5a g     F .text	00000020 _ZN9nRF24L01P8spiWriteEh
080069b4 g     F .text	00000084 temp_stm32_init
20005000 g       *ABS*	00000000 __StackLimit
2000355c g     O .bss	00000004 g_os_started
08001de0 g     F .text	0000002e os_dev_close
08001188  w    F .text	00000002 USART2_IRQHandler
0800b68c g     F .text	000003dc HAL_RCC_OscConfig
08008b26 g     F .text	0000003e cbor_value_leave_container
0800726c g     F .text	00000028 oc_rep_init
08001020 g     O .text	00000000 g_pfnVectors
0800a888 g     F .text	00000052 ADC_DMAConvCplt
08002ade g     F .text	00000024 os_mbuf_free_chain
080020c0 g     F .text	00000034 os_msys_init
0800520c g     F .text	0000004c _ZN9nRF24L01P14getAirDataRateEv
08001188  w    F .text	00000002 I2C2_ER_IRQHandler
08002c78 g     F .text	00000022 os_mbuf_off
08001188  w    F .text	00000002 DMA1_Channel2_IRQHandler
080093e0 g     F .text	00000020 hal_gpio_irq_enable
080027ac g     F .text	0000000c os_time_get
08004dbc g     F .text	0000001c nrf24l01_set_rx_callback
200034f0 g     O .bss	00000018 sensor_base_ts
08001340 g     F .text	00000032 sensor_mgr_match_bytype
08002a94 g     F .text	00000036 os_mbuf_get_pkthdr
0800cfd0  w    F .text	00000002 .hidden __aeabi_idiv0
08008464 g     F .text	00000050 cbor_mbuf_reader_init
0800c2c0 g     F .text	0000001c TIM_CCxChannelCmd
0800c14e  w    F .text	00000002 HAL_SPI_ErrorCallback
08001188  w    F .text	00000002 CAN1_SCE_IRQHandler
0800a8da  w    F .text	00000002 HAL_ADC_ConvHalfCpltCallback
08001188  w    F .text	00000002 FLASH_IRQHandler
08002620 g     F .text	000000d8 os_task_init
08001188  w    F .text	00000002 BusFault_Handler
08001188  w    F .text	00000002 USART1_IRQHandler
0800c4d0 g     F .text	00000010 strlen
08001d10 g     F .text	00000040 os_dev_create
08001f8a g     F .text	0000001e os_memblock_put_from_cb
0800540c g     F .text	000000a0 _ZN9nRF24L01P12setTxAddressEyi
08001e20 g     F .text	00000010 os_eventq_init
080027b8 g     F .text	00000040 os_time_advance
08003788 g     F .text	00000040 esp8266_init
080025dc g     F .text	0000002c os_sched_resort
08007192 g     F .text	000000d8 oc_parse_rep
0800801c g     F .text	00000010 tc_hmac_update
08008f5a g     F .text	00000028 hal_flash_init
08004e4e g     F .text	0000000c _ZN9nRF24L01P8deselectEv
08001188  w    F .text	00000002 I2C1_ER_IRQHandler
08005684 g     F .text	0000004c _ZN9nRF24L01P8readableEi
0800a644 g     F .text	00000060 HAL_SPI_QueueTransmit
08003b10 g     F .text	000000dc esp8266_register_transport
08003af4 g     F .text	0000001c init_esp8266_server
0800a8e6 g     F .text	0000001a ADC_DMAError
0800167e g     F .text	0000001e sensor_init
080040c6 g     F .text	00000032 _ZN8ATParser4initER14BufferedSerialPciPKcib
08008d70 g     F .text	00000020 adc_chan_config
2000365c g     O .bss	0000000c g_wdt_cfg
08001d50 g     F .text	0000002c os_dev_initialize_all
08006a38 g     F .text	000000c0 temp_stm32_get_raw_temperature
0800a6a4 g     F .text	00000046 HAL_SPI_Transmit_IT_Custom
080041cc g     F .text	00000204 _ZN8ATParser5vrecvEPKcSt9__va_list
20000124 g     O .data	00000008 g_os_sleep_list
08004dd8 g     F .text	00000028 nrf24l01_flush_txrx
08008cf0 g     F .text	00000080 hal_bsp_init
08001abc g     F .text	00000038 os_pkg_init
080092dc g     F .text	00000038 hal_gpio_init_stm
0800382c g     F .text	00000058 esp8266_connect
0800802c g     F .text	00000052 tc_hmac_final
080022dc g     F .text	00000010 os_sanity_check_init
0800dc74 g       *ABS*	00000000 __ecoredata
0800a3f8 g     F .text	00000020 hal_uart_init
0800aff8 g     F .text	00000098 HAL_DMA_Abort_IT
0800711c g     F .text	00000076 oc_free_rep
08001188  w    F .text	00000002 USBWakeUp_IRQHandler
0800cb48 g     F .text	00000008 vfprintf
0800acd4 g     F .text	0000004c ADC_ConversionStop_Disable
0800d050 g     F .text	00000014 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hab484211479aaa78E
080073a0 g     F .text	00000002 oc_register_serial
08009424 g     F .text	0000007c hal_gpio_irq_init
08004102 g     F .text	0000000c _ZN8ATParser5fgetcEv
08004528 g     F .text	00000004 _ZN14BufferedSerial9configureEi
080037c8 g     F .text	00000014 esp8266_default_cfg
08009400 g     F .text	00000024 hal_gpio_irq_disable
0800304c g     F .text	0000002c free
0800a886  w    F .text	00000002 HAL_ADC_ConvCpltCallback
080037e0 g     F .text	0000004c esp8266_set_credentials
0800a880 g     F .text	00000006 HAL_ADC_GetValue
0800739e g     F .text	00000002 oc_register_lora



Disassembly of section .text:

08001020 <__isr_vector>:
 8001020:	20005000 	.word	0x20005000
 8001024:	0800112d 	.word	0x0800112d
 8001028:	08001189 	.word	0x08001189
 800102c:	08001189 	.word	0x08001189
 8001030:	08001189 	.word	0x08001189
 8001034:	08001189 	.word	0x08001189
 8001038:	08001189 	.word	0x08001189
	...
 800104c:	08002e13 	.word	0x08002e13
 8001050:	08001189 	.word	0x08001189
 8001054:	00000000 	.word	0x00000000
 8001058:	08002e59 	.word	0x08002e59
 800105c:	08002e83 	.word	0x08002e83
 8001060:	08001189 	.word	0x08001189
 8001064:	08001189 	.word	0x08001189
 8001068:	08001189 	.word	0x08001189
 800106c:	08001189 	.word	0x08001189
 8001070:	08001189 	.word	0x08001189
 8001074:	08001189 	.word	0x08001189
 8001078:	08001189 	.word	0x08001189
 800107c:	08001189 	.word	0x08001189
 8001080:	08001189 	.word	0x08001189
 8001084:	08001189 	.word	0x08001189
 8001088:	08001189 	.word	0x08001189
 800108c:	08001189 	.word	0x08001189
 8001090:	08001189 	.word	0x08001189
 8001094:	08001189 	.word	0x08001189
 8001098:	08001189 	.word	0x08001189
 800109c:	08001189 	.word	0x08001189
 80010a0:	08001189 	.word	0x08001189
 80010a4:	08001189 	.word	0x08001189
 80010a8:	08001189 	.word	0x08001189
 80010ac:	08001189 	.word	0x08001189
 80010b0:	08001189 	.word	0x08001189
 80010b4:	08001189 	.word	0x08001189
 80010b8:	08001189 	.word	0x08001189
 80010bc:	08001189 	.word	0x08001189
 80010c0:	08001189 	.word	0x08001189
 80010c4:	08001189 	.word	0x08001189
 80010c8:	08001189 	.word	0x08001189
 80010cc:	08001189 	.word	0x08001189
 80010d0:	08001189 	.word	0x08001189
 80010d4:	08001189 	.word	0x08001189
 80010d8:	08001189 	.word	0x08001189
 80010dc:	08001189 	.word	0x08001189
 80010e0:	08001189 	.word	0x08001189
 80010e4:	08001189 	.word	0x08001189
 80010e8:	08001189 	.word	0x08001189
 80010ec:	08001189 	.word	0x08001189
 80010f0:	08001189 	.word	0x08001189
 80010f4:	08001189 	.word	0x08001189
 80010f8:	08001189 	.word	0x08001189
 80010fc:	08001189 	.word	0x08001189
 8001100:	08001189 	.word	0x08001189
 8001104:	08001189 	.word	0x08001189
 8001108:	08001189 	.word	0x08001189
	...
 8001128:	f108f85f 	.word	0xf108f85f

0800112c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800112c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800112e:	e003      	b.n	8001138 <LoopCopyDataInit>

08001130 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <LoopFillZeroCoreBss+0x10>)
  ldr r3, [r3, r1]
 8001132:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001134:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001136:	3104      	adds	r1, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopFillZeroCoreBss+0x14>)
  ldr r3, =_edata
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <LoopFillZeroCoreBss+0x18>)
  adds r2, r0, r1
 800113c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001140:	d3f6      	bcc.n	8001130 <CopyDataInit>

  ldr r2, =_sbss
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <LoopFillZeroCoreBss+0x1c>)
  b LoopFillZerobss
 8001144:	e002      	b.n	800114c <LoopFillZerobss>

08001146 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001148:	f842 3b04 	str.w	r3, [r2], #4

0800114c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <LoopFillZeroCoreBss+0x20>)
  cmp r2, r3
 800114e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001150:	d3f9      	bcc.n	8001146 <FillZerobss>

/* Mynewt specific corebss clearing. */
  ldr   r2, =__corebss_start__
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <LoopFillZeroCoreBss+0x24>)
  b     LoopFillZeroCoreBss
 8001154:	e002      	b.n	800115c <LoopFillZeroCoreBss>

08001156 <FillZeroCoreBss>:

/* Zero fill the bss segment. */
FillZeroCoreBss:
  movs  r3, #0
 8001156:	2300      	movs	r3, #0
  str   r3, [r2], #4
 8001158:	f842 3b04 	str.w	r3, [r2], #4

0800115c <LoopFillZeroCoreBss>:

LoopFillZeroCoreBss:
  ldr   r3, =__corebss_end__
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <LoopFillZeroCoreBss+0x28>)
  cmp   r2, r3
 800115e:	429a      	cmp	r2, r3
  bcc   FillZeroCoreBss
 8001160:	d3f9      	bcc.n	8001156 <FillZeroCoreBss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001162:	f000 f813 	bl	800118c <SystemInit>
/* Call libc's entry point.*/
  bl  _start
 8001166:	f000 f84d 	bl	8001204 <_start>
 800116a:	0000      	.short	0x0000
  ldr r3, =_sidata
 800116c:	0800dc74 	.word	0x0800dc74
  ldr r0, =_sdata
 8001170:	2000010c 	.word	0x2000010c
  ldr r3, =_edata
 8001174:	20000204 	.word	0x20000204
  ldr r2, =_sbss
 8001178:	20000208 	.word	0x20000208
  ldr r3, = _ebss
 800117c:	20003688 	.word	0x20003688
  ldr   r2, =__corebss_start__
 8001180:	20000204 	.word	0x20000204
  ldr   r3, =__corebss_end__
 8001184:	20000204 	.word	0x20000204

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>
	...

0800118c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800118c:	b508      	push	{r3, lr}
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <SystemInit+0x3c>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	f042 0201 	orr.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001198:	6859      	ldr	r1, [r3, #4]
 800119a:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <SystemInit+0x40>)
 800119c:	400a      	ands	r2, r1
 800119e:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011aa:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80011ba:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011bc:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011c0:	609a      	str	r2, [r3, #8]
    SystemInit_ExtMemCtl(); 
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Relocate the vector table */
  NVIC_Relocate();
 80011c2:	f000 f805 	bl	80011d0 <NVIC_Relocate>
}
 80011c6:	bd08      	pop	{r3, pc}
 80011c8:	40021000 	.word	0x40021000
 80011cc:	f8ff0000 	.word	0xf8ff0000

080011d0 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
 80011d0:	4a09      	ldr	r2, [pc, #36]	; (80011f8 <NVIC_Relocate+0x28>)
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <NVIC_Relocate+0x2c>)
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d00a      	beq.n	80011ee <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
 80011d8:	2300      	movs	r3, #0
 80011da:	e006      	b.n	80011ea <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <NVIC_Relocate+0x2c>)
 80011de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <NVIC_Relocate+0x28>)
 80011e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
 80011e8:	3301      	adds	r3, #1
 80011ea:	2b3a      	cmp	r3, #58	; 0x3a
 80011ec:	ddf6      	ble.n	80011dc <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
 80011ee:	4a02      	ldr	r2, [pc, #8]	; (80011f8 <NVIC_Relocate+0x28>)
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <NVIC_Relocate+0x30>)
 80011f2:	609a      	str	r2, [r3, #8]
#endif
}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000000 	.word	0x20000000
 80011fc:	08001020 	.word	0x08001020
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
 8001204:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
 8001206:	4803      	ldr	r0, [pc, #12]	; (8001214 <_start+0x10>)
 8001208:	f000 fbf2 	bl	80019f0 <os_init>
    os_start();
 800120c:	f000 fc48 	bl	8001aa0 <os_start>
#endif
}
 8001210:	bd08      	pop	{r3, pc}
 8001212:	bf00      	nop
 8001214:	0800cfd5 	.word	0x0800cfd5

08001218 <_init>:

void
_init(void)
{
}
 8001218:	4770      	bx	lr

0800121a <rust_sysinit>:
#include <sysinit/sysinit.h>  //  Contains all app settings consolidated from "apps/my_sensor_app/syscfg.yml" and "targets/bluepill_my_sensor/syscfg.yml"

void rust_sysinit() {
 800121a:	b508      	push	{r3, lr}
    sysinit();
 800121c:	f000 f808 	bl	8001230 <sysinit_start>
 8001220:	f000 f812 	bl	8001248 <sysinit_app>
 8001224:	f000 f80a 	bl	800123c <sysinit_end>
}
 8001228:	bd08      	pop	{r3, pc}

0800122a <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
 800122a:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
 800122c:	f000 fae4 	bl	80017f8 <__assert_func>

08001230 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
 8001230:	4b01      	ldr	r3, [pc, #4]	; (8001238 <sysinit_start+0x8>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	4770      	bx	lr
 8001238:	20003494 	.word	0x20003494

0800123c <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
 800123c:	4b01      	ldr	r3, [pc, #4]	; (8001244 <sysinit_end+0x8>)
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
}
 8001242:	4770      	bx	lr
 8001244:	20003494 	.word	0x20003494

08001248 <sysinit_app>:
void init_sensor_coap(void);
void remote_sensor_create(void);

void
sysinit_app(void)
{
 8001248:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
 800124a:	f000 fc37 	bl	8001abc <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
 800124e:	f006 f955 	bl	80074fc <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
 8001252:	f005 f847 	bl	80062e4 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
 8001256:	f006 fa97 	bl	8007788 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
 800125a:	f006 f987 	bl	800756c <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
 800125e:	f006 f889 	bl	8007374 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
 8001262:	f006 f899 	bl	8007398 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
 8001266:	f006 f898 	bl	800739a <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
 800126a:	f006 f897 	bl	800739c <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
 800126e:	f006 f896 	bl	800739e <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
 8001272:	f006 f895 	bl	80073a0 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
 8001276:	f000 f813 	bl	80012a0 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
 800127a:	f000 f999 	bl	80015b0 <sensor_pkg_init>

    /*** Stage 610 */
    /* 610.0: stm32f1_adc_create (libs/adc_stm32f1) */
    stm32f1_adc_create();
 800127e:	f001 ff57 	bl	8003130 <stm32f1_adc_create>

    /*** Stage 620 */
    /* 620.0: temp_stm32_create (libs/temp_stm32) */
    temp_stm32_create();
 8001282:	f005 fae3 	bl	800684c <temp_stm32_create>

    /*** Stage 630 */
    /* 630.0: hmac_prng_init (libs/hmac_prng) */
    hmac_prng_init();
 8001286:	f003 fa29 	bl	80046dc <hmac_prng_init>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
 800128a:	f005 f9ed 	bl	8006668 <sensor_network_init>

    /*** Stage 650 */
    /* 650.0: esp8266_create (libs/esp8266) */
    esp8266_create();
 800128e:	f002 f995 	bl	80035bc <esp8266_create>
    /* 650.1: nrf24l01_create (libs/nrf24l01) */
    nrf24l01_create();
 8001292:	f003 fac7 	bl	8004824 <nrf24l01_create>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
 8001296:	f005 f961 	bl	800655c <init_sensor_coap>

    /*** Stage 670 */
    /* 670.0: remote_sensor_create (libs/remote_sensor) */
    remote_sensor_create();
 800129a:	f004 fd47 	bl	8005d2c <remote_sensor_create>
}
 800129e:	bd08      	pop	{r3, pc}

080012a0 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_bme680_sensor();
    assert(rc == 0);
#endif
}
 80012a0:	4770      	bx	lr
	...

080012a4 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <sensor_mgr_remove+0x24>)
 80012a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a8:	4282      	cmp	r2, r0
 80012aa:	d104      	bne.n	80012b6 <sensor_mgr_remove+0x12>
 80012ac:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
 80012b2:	4770      	bx	lr
 80012b4:	461a      	mov	r2, r3
 80012b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80012ba:	4283      	cmp	r3, r0
 80012bc:	d1fa      	bne.n	80012b4 <sensor_mgr_remove+0x10>
 80012be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80012c6:	4770      	bx	lr
 80012c8:	20003498 	.word	0x20003498

080012cc <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
 80012cc:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
 80012ce:	6a03      	ldr	r3, [r0, #32]
 80012d0:	b98b      	cbnz	r3, 80012f6 <sensor_mgr_insert+0x2a>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <sensor_mgr_insert+0x58>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
 80012d6:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 80012d8:	e002      	b.n	80012e0 <sensor_mgr_insert+0x14>
            prev = cursor;
 80012da:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 80012dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1fa      	bne.n	80012da <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
 80012e4:	b1c1      	cbz	r1, 8001318 <sensor_mgr_insert+0x4c>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
 80012e6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 80012ea:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 80012ee:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
 80012f2:	bc10      	pop	{r4}
 80012f4:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <sensor_mgr_insert+0x58>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
 80012fa:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f1      	beq.n	80012e4 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
 8001300:	6a1a      	ldr	r2, [r3, #32]
 8001302:	2a00      	cmp	r2, #0
 8001304:	d0ee      	beq.n	80012e4 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
 8001306:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001308:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800130a:	1b12      	subs	r2, r2, r4
 800130c:	2a00      	cmp	r2, #0
 800130e:	dbe9      	blt.n	80012e4 <sensor_mgr_insert+0x18>
        prev = cursor;
 8001310:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 8001312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001316:	e7f1      	b.n	80012fc <sensor_mgr_insert+0x30>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
 8001318:	4b02      	ldr	r3, [pc, #8]	; (8001324 <sensor_mgr_insert+0x58>)
 800131a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800131c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8001320:	6318      	str	r0, [r3, #48]	; 0x30
 8001322:	e7e6      	b.n	80012f2 <sensor_mgr_insert+0x26>
 8001324:	20003498 	.word	0x20003498

08001328 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
 8001328:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
 800132a:	fab0 f080 	clz	r0, r0
 800132e:	0940      	lsrs	r0, r0, #5
 8001330:	4770      	bx	lr
	...

08001334 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
 8001334:	4b01      	ldr	r3, [pc, #4]	; (800133c <sensor_mgr_evq_set+0x8>)
 8001336:	62d8      	str	r0, [r3, #44]	; 0x2c
}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20003498 	.word	0x20003498

08001340 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
 8001340:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
 8001344:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001348:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 800134c:	ea02 0b04 	and.w	fp, r2, r4
 8001350:	ea03 0c05 	and.w	ip, r3, r5
 8001354:	f100 0118 	add.w	r1, r0, #24
 8001358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800135c:	ea0b 0200 	and.w	r2, fp, r0
 8001360:	ea0c 0301 	and.w	r3, ip, r1
 8001364:	4313      	orrs	r3, r2
}
 8001366:	bf14      	ite	ne
 8001368:	2001      	movne	r0, #1
 800136a:	2000      	moveq	r0, #0
 800136c:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
 8001370:	4770      	bx	lr

08001372 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
 8001372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001376:	b083      	sub	sp, #12
 8001378:	4605      	mov	r5, r0
 800137a:	4689      	mov	r9, r1
 800137c:	4690      	mov	r8, r2
 800137e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
 8001382:	790b      	ldrb	r3, [r1, #4]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d013      	beq.n	80013b0 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
 8001388:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 800138a:	e000      	b.n	800138e <sensor_read_data_func+0x1c>
 800138c:	6924      	ldr	r4, [r4, #16]
 800138e:	b17c      	cbz	r4, 80013b0 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
 8001390:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001394:	ea00 0206 	and.w	r2, r0, r6
 8001398:	ea01 0307 	and.w	r3, r1, r7
 800139c:	4313      	orrs	r3, r2
 800139e:	d0f5      	beq.n	800138c <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
 80013a0:	68a3      	ldr	r3, [r4, #8]
 80013a2:	68e1      	ldr	r1, [r4, #12]
 80013a4:	e9cd 6700 	strd	r6, r7, [sp]
 80013a8:	4642      	mov	r2, r8
 80013aa:	4628      	mov	r0, r5
 80013ac:	4798      	blx	r3
 80013ae:	e7ed      	b.n	800138c <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
 80013b0:	f8d9 3000 	ldr.w	r3, [r9]
 80013b4:	b14b      	cbz	r3, 80013ca <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
 80013b6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80013ba:	e9cd 6700 	strd	r6, r7, [sp]
 80013be:	4642      	mov	r2, r8
 80013c0:	4628      	mov	r0, r5
 80013c2:	4798      	blx	r3
    }

    return (0);
}
 80013c4:	b003      	add	sp, #12
 80013c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
 80013ca:	2000      	movs	r0, #0
 80013cc:	e7fa      	b.n	80013c4 <sensor_read_data_func+0x52>

080013ce <sensor_mgr_match_bydevname>:
{
 80013ce:	b508      	push	{r3, lr}
    if (!strcmp(sensor->s_dev->od_name, devname)) {
 80013d0:	6803      	ldr	r3, [r0, #0]
 80013d2:	69d8      	ldr	r0, [r3, #28]
 80013d4:	f001 fe8c 	bl	80030f0 <strcmp>
 80013d8:	b108      	cbz	r0, 80013de <sensor_mgr_match_bydevname+0x10>
    return (0);
 80013da:	2000      	movs	r0, #0
}
 80013dc:	bd08      	pop	{r3, pc}
        return (1);
 80013de:	2001      	movs	r0, #1
 80013e0:	e7fc      	b.n	80013dc <sensor_mgr_match_bydevname+0xe>
	...

080013e4 <sensor_base_ts_update_event>:
{
 80013e4:	b530      	push	{r4, r5, lr}
 80013e6:	b087      	sub	sp, #28
    ticks = os_time_get();
 80013e8:	f001 f9e0 	bl	80027ac <os_time_get>
 80013ec:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
 80013ee:	a901      	add	r1, sp, #4
 80013f0:	a802      	add	r0, sp, #8
 80013f2:	f001 fa15 	bl	8002820 <os_gettimeofday>
    if (rc) {
 80013f6:	b148      	cbz	r0, 800140c <sensor_base_ts_update_event+0x28>
        ticks += OS_TICKS_PER_SEC * 600;
 80013f8:	f504 2412 	add.w	r4, r4, #598016	; 0x92000
 80013fc:	f504 64f8 	add.w	r4, r4, #1984	; 0x7c0
    os_callout_reset(&st_up_osco, ticks);
 8001400:	4621      	mov	r1, r4
 8001402:	480a      	ldr	r0, [pc, #40]	; (800142c <sensor_base_ts_update_event+0x48>)
 8001404:	f000 fba2 	bl	8001b4c <os_callout_reset>
}
 8001408:	b007      	add	sp, #28
 800140a:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
 800140c:	f504 14f4 	add.w	r4, r4, #1998848	; 0x1e8000
 8001410:	f504 6490 	add.w	r4, r4, #1152	; 0x480
    sensor_base_ts.st_ostv = ostv;
 8001414:	4d06      	ldr	r5, [pc, #24]	; (8001430 <sensor_base_ts_update_event+0x4c>)
 8001416:	ab06      	add	r3, sp, #24
 8001418:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800141c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
 8001420:	9b01      	ldr	r3, [sp, #4]
 8001422:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
 8001424:	f000 fc1c 	bl	8001c60 <os_cputime_get32>
 8001428:	6168      	str	r0, [r5, #20]
 800142a:	e7e9      	b.n	8001400 <sensor_base_ts_update_event+0x1c>
 800142c:	200034cc 	.word	0x200034cc
 8001430:	200034f0 	.word	0x200034f0

08001434 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
 8001434:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
 8001438:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
 800143a:	f000 fc11 	bl	8001c60 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <sensor_up_timestamp+0x44>)
 8001440:	6955      	ldr	r5, [r2, #20]
 8001442:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
 8001444:	6460      	str	r0, [r4, #68]	; 0x44
 8001446:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8001448:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 800144c:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 800144e:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <sensor_up_timestamp+0x48>)
 8001452:	fba3 c305 	umull	ip, r3, r3, r5
 8001456:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8001458:	eb10 0b03 	adds.w	fp, r0, r3
 800145c:	f141 0c00 	adc.w	ip, r1, #0
 8001460:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
 8001464:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
 8001468:	4905      	ldr	r1, [pc, #20]	; (8001480 <sensor_up_timestamp+0x4c>)
 800146a:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
 800146e:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
 8001470:	63a1      	str	r1, [r4, #56]	; 0x38

}
 8001472:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
 8001476:	bf00      	nop
 8001478:	200034f0 	.word	0x200034f0
 800147c:	431bde83 	.word	0x431bde83
 8001480:	000f4240 	.word	0x000f4240

08001484 <sensor_mgr_lock>:
{
 8001484:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
 8001486:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800148a:	4804      	ldr	r0, [pc, #16]	; (800149c <sensor_mgr_lock+0x18>)
 800148c:	f000 fe98 	bl	80021c0 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 8001490:	b108      	cbz	r0, 8001496 <sensor_mgr_lock+0x12>
 8001492:	2809      	cmp	r0, #9
 8001494:	d000      	beq.n	8001498 <sensor_mgr_lock+0x14>
}
 8001496:	bd08      	pop	{r3, pc}
        return (0);
 8001498:	2000      	movs	r0, #0
 800149a:	e7fc      	b.n	8001496 <sensor_mgr_lock+0x12>
 800149c:	20003498 	.word	0x20003498

080014a0 <sensor_mgr_unlock>:
{
 80014a0:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
 80014a2:	4802      	ldr	r0, [pc, #8]	; (80014ac <sensor_mgr_unlock+0xc>)
 80014a4:	f000 fe30 	bl	8002108 <os_mutex_release>
}
 80014a8:	bd08      	pop	{r3, pc}
 80014aa:	bf00      	nop
 80014ac:	20003498 	.word	0x20003498

080014b0 <sensor_mgr_evq_get>:
}
 80014b0:	4b01      	ldr	r3, [pc, #4]	; (80014b8 <sensor_mgr_evq_get+0x8>)
 80014b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20003498 	.word	0x20003498

080014bc <sensor_mgr_init>:
{
 80014bc:	b570      	push	{r4, r5, r6, lr}
 80014be:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
 80014c0:	f000 fd00 	bl	8001ec4 <os_eventq_dflt_get>
 80014c4:	f7ff ff36 	bl	8001334 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <sensor_mgr_init+0x84>)
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <sensor_mgr_init+0x88>)
 80014ce:	2218      	movs	r2, #24
 80014d0:	2105      	movs	r1, #5
 80014d2:	481d      	ldr	r0, [pc, #116]	; (8001548 <sensor_mgr_init+0x8c>)
 80014d4:	f000 fd36 	bl	8001f44 <os_mempool_init>
    assert(rc == OS_OK);
 80014d8:	bb58      	cbnz	r0, 8001532 <sensor_mgr_init+0x76>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
 80014da:	f7ff ffe9 	bl	80014b0 <sensor_mgr_evq_get>
 80014de:	4e1b      	ldr	r6, [pc, #108]	; (800154c <sensor_mgr_init+0x90>)
 80014e0:	2300      	movs	r3, #0
 80014e2:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <sensor_mgr_init+0x94>)
 80014e4:	4601      	mov	r1, r0
 80014e6:	4630      	mov	r0, r6
 80014e8:	f000 fb04 	bl	8001af4 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
 80014ec:	ad04      	add	r5, sp, #16
 80014ee:	a903      	add	r1, sp, #12
 80014f0:	4628      	mov	r0, r5
 80014f2:	f001 f995 	bl	8002820 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
 80014f6:	4c17      	ldr	r4, [pc, #92]	; (8001554 <sensor_mgr_init+0x98>)
 80014f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
 8001500:	9b03      	ldr	r3, [sp, #12]
 8001502:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
 8001504:	f000 fbac 	bl	8001c60 <os_cputime_get32>
 8001508:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
 800150a:	f7ff ffd1 	bl	80014b0 <sensor_mgr_evq_get>
 800150e:	4c12      	ldr	r4, [pc, #72]	; (8001558 <sensor_mgr_init+0x9c>)
 8001510:	2300      	movs	r3, #0
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <sensor_mgr_init+0xa0>)
 8001514:	4601      	mov	r1, r0
 8001516:	4620      	mov	r0, r4
 8001518:	f000 faec 	bl	8001af4 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
 800151c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001520:	4620      	mov	r0, r4
 8001522:	f000 fb13 	bl	8001b4c <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
 8001526:	f1a6 000c 	sub.w	r0, r6, #12
 800152a:	f000 fde3 	bl	80020f4 <os_mutex_init>
}
 800152e:	b008      	add	sp, #32
 8001530:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
 8001532:	2300      	movs	r3, #0
 8001534:	461a      	mov	r2, r3
 8001536:	4619      	mov	r1, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f000 f95d 	bl	80017f8 <__assert_func>
 800153e:	bf00      	nop
 8001540:	0800d07c 	.word	0x0800d07c
 8001544:	20000208 	.word	0x20000208
 8001548:	20000280 	.word	0x20000280
 800154c:	200034a4 	.word	0x200034a4
 8001550:	0800177d 	.word	0x0800177d
 8001554:	200034f0 	.word	0x200034f0
 8001558:	200034cc 	.word	0x200034cc
 800155c:	080013e5 	.word	0x080013e5

08001560 <sensor_mgr_find_next>:
{
 8001560:	b570      	push	{r4, r5, r6, lr}
 8001562:	4605      	mov	r5, r0
 8001564:	460e      	mov	r6, r1
 8001566:	4614      	mov	r4, r2
    rc = sensor_mgr_lock();
 8001568:	f7ff ff8c 	bl	8001484 <sensor_mgr_lock>
    if (rc != 0) {
 800156c:	b988      	cbnz	r0, 8001592 <sensor_mgr_find_next+0x32>
    if (cursor == NULL) {
 800156e:	b14c      	cbz	r4, 8001584 <sensor_mgr_find_next+0x24>
        cursor = SLIST_NEXT(prev_cursor, s_next);
 8001570:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
    while (cursor != NULL) {
 8001574:	b14c      	cbz	r4, 800158a <sensor_mgr_find_next+0x2a>
        if (compare_func(cursor, arg)) {
 8001576:	4631      	mov	r1, r6
 8001578:	4620      	mov	r0, r4
 800157a:	47a8      	blx	r5
 800157c:	b928      	cbnz	r0, 800158a <sensor_mgr_find_next+0x2a>
        cursor = SLIST_NEXT(cursor, s_next);
 800157e:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 8001582:	e7f7      	b.n	8001574 <sensor_mgr_find_next+0x14>
        cursor = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <sensor_mgr_find_next+0x38>)
 8001586:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001588:	e7f4      	b.n	8001574 <sensor_mgr_find_next+0x14>
    sensor_mgr_unlock();
 800158a:	f7ff ff89 	bl	80014a0 <sensor_mgr_unlock>
}
 800158e:	4620      	mov	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
    cursor = NULL;
 8001592:	2400      	movs	r4, #0
    return (cursor);
 8001594:	e7fb      	b.n	800158e <sensor_mgr_find_next+0x2e>
 8001596:	bf00      	nop
 8001598:	20003498 	.word	0x20003498

0800159c <sensor_mgr_find_next_bydevname>:
{
 800159c:	b508      	push	{r3, lr}
    return (sensor_mgr_find_next(sensor_mgr_match_bydevname, (char *)devname,
 800159e:	460a      	mov	r2, r1
 80015a0:	4601      	mov	r1, r0
 80015a2:	4802      	ldr	r0, [pc, #8]	; (80015ac <sensor_mgr_find_next_bydevname+0x10>)
 80015a4:	f7ff ffdc 	bl	8001560 <sensor_mgr_find_next>
}
 80015a8:	bd08      	pop	{r3, pc}
 80015aa:	bf00      	nop
 80015ac:	080013cf 	.word	0x080013cf

080015b0 <sensor_pkg_init>:
{
 80015b0:	b508      	push	{r3, lr}
    sensor_mgr_init();
 80015b2:	f7ff ff83 	bl	80014bc <sensor_mgr_init>
}
 80015b6:	bd08      	pop	{r3, pc}

080015b8 <sensor_lock>:
{
 80015b8:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
 80015ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015be:	3004      	adds	r0, #4
 80015c0:	f000 fdfe 	bl	80021c0 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 80015c4:	b108      	cbz	r0, 80015ca <sensor_lock+0x12>
 80015c6:	2809      	cmp	r0, #9
 80015c8:	d000      	beq.n	80015cc <sensor_lock+0x14>
}
 80015ca:	bd08      	pop	{r3, pc}
        return (0);
 80015cc:	2000      	movs	r0, #0
 80015ce:	e7fc      	b.n	80015ca <sensor_lock+0x12>

080015d0 <sensor_unlock>:
{
 80015d0:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
 80015d2:	3004      	adds	r0, #4
 80015d4:	f000 fd98 	bl	8002108 <os_mutex_release>
}
 80015d8:	bd08      	pop	{r3, pc}

080015da <sensor_update_nextrun>:
{
 80015da:	b530      	push	{r4, r5, lr}
 80015dc:	b083      	sub	sp, #12
 80015de:	4604      	mov	r4, r0
 80015e0:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
 80015e2:	a901      	add	r1, sp, #4
 80015e4:	6a00      	ldr	r0, [r0, #32]
 80015e6:	f001 f937 	bl	8002858 <os_time_ms_to_ticks>
    sensor_lock(sensor);
 80015ea:	4620      	mov	r0, r4
 80015ec:	f7ff ffe4 	bl	80015b8 <sensor_lock>
    sensor_mgr_remove(sensor);
 80015f0:	4620      	mov	r0, r4
 80015f2:	f7ff fe57 	bl	80012a4 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
 80015f6:	9b01      	ldr	r3, [sp, #4]
 80015f8:	441d      	add	r5, r3
 80015fa:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
 80015fc:	4620      	mov	r0, r4
 80015fe:	f7ff fe65 	bl	80012cc <sensor_mgr_insert>
    sensor_unlock(sensor);
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff ffe4 	bl	80015d0 <sensor_unlock>
}
 8001608:	b003      	add	sp, #12
 800160a:	bd30      	pop	{r4, r5, pc}

0800160c <sensor_calc_nextrun_delta>:
{
 800160c:	b538      	push	{r3, r4, r5, lr}
 800160e:	4605      	mov	r5, r0
 8001610:	460c      	mov	r4, r1
    sensor_lock(sensor);
 8001612:	f7ff ffd1 	bl	80015b8 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
 8001616:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
 8001618:	1b0c      	subs	r4, r1, r4
 800161a:	d404      	bmi.n	8001626 <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
 800161c:	4628      	mov	r0, r5
 800161e:	f7ff ffd7 	bl	80015d0 <sensor_unlock>
}
 8001622:	4620      	mov	r0, r4
 8001624:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
 8001626:	2400      	movs	r4, #0
 8001628:	e7f8      	b.n	800161c <sensor_calc_nextrun_delta+0x10>
	...

0800162c <sensor_find_min_nextrun_sensor>:
{
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	4606      	mov	r6, r0
 8001630:	460d      	mov	r5, r1
    sensor_mgr_lock();
 8001632:	f7ff ff27 	bl	8001484 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <sensor_find_min_nextrun_sensor+0x20>)
 8001638:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
 800163a:	4631      	mov	r1, r6
 800163c:	4620      	mov	r0, r4
 800163e:	f7ff ffe5 	bl	800160c <sensor_calc_nextrun_delta>
 8001642:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
 8001644:	f7ff ff2c 	bl	80014a0 <sensor_mgr_unlock>
}
 8001648:	4620      	mov	r0, r4
 800164a:	bd70      	pop	{r4, r5, r6, pc}
 800164c:	20003498 	.word	0x20003498

08001650 <sensor_mgr_register>:
{
 8001650:	b538      	push	{r3, r4, r5, lr}
 8001652:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
 8001654:	f7ff ff16 	bl	8001484 <sensor_mgr_lock>
    if (rc != 0) {
 8001658:	4604      	mov	r4, r0
 800165a:	b108      	cbz	r0, 8001660 <sensor_mgr_register+0x10>
}
 800165c:	4620      	mov	r0, r4
 800165e:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
 8001660:	4628      	mov	r0, r5
 8001662:	f7ff ffa9 	bl	80015b8 <sensor_lock>
    if (rc != 0) {
 8001666:	4604      	mov	r4, r0
 8001668:	2800      	cmp	r0, #0
 800166a:	d1f7      	bne.n	800165c <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
 800166c:	4628      	mov	r0, r5
 800166e:	f7ff fe2d 	bl	80012cc <sensor_mgr_insert>
    sensor_unlock(sensor);
 8001672:	4628      	mov	r0, r5
 8001674:	f7ff ffac 	bl	80015d0 <sensor_unlock>
    sensor_mgr_unlock();
 8001678:	f7ff ff12 	bl	80014a0 <sensor_mgr_unlock>
    return (0);
 800167c:	e7ee      	b.n	800165c <sensor_mgr_register+0xc>

0800167e <sensor_init>:
{
 800167e:	b538      	push	{r3, r4, r5, lr}
 8001680:	4604      	mov	r4, r0
 8001682:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
 8001684:	2288      	movs	r2, #136	; 0x88
 8001686:	2100      	movs	r1, #0
 8001688:	f001 fd27 	bl	80030da <memset>
    rc = os_mutex_init(&sensor->s_lock);
 800168c:	1d20      	adds	r0, r4, #4
 800168e:	f000 fd31 	bl	80020f4 <os_mutex_init>
    if (rc != 0) {
 8001692:	4603      	mov	r3, r0
 8001694:	b900      	cbnz	r0, 8001698 <sensor_init+0x1a>
    sensor->s_dev = dev;
 8001696:	6025      	str	r5, [r4, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	bd38      	pop	{r3, r4, r5, pc}

0800169c <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
 800169c:	b530      	push	{r4, r5, lr}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	4604      	mov	r4, r0
 80016a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
 80016a6:	f7ff ff87 	bl	80015b8 <sensor_lock>
    if (rc) {
 80016aa:	4605      	mov	r5, r0
 80016ac:	b9f8      	cbnz	r0, 80016ee <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
 80016ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80016b0:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
 80016b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80016b4:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
 80016b6:	a904      	add	r1, sp, #16
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff fe41 	bl	8001340 <sensor_mgr_match_bytype>
 80016be:	b1e0      	cbz	r0, 80016fa <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7ff feb7 	bl	8001434 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 80016c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80016c8:	6819      	ldr	r1, [r3, #0]
 80016ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	ab06      	add	r3, sp, #24
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <sensor_read+0x64>)
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80016da:	4620      	mov	r0, r4
 80016dc:	4788      	blx	r1
                                  timeout);
    if (rc) {
 80016de:	4605      	mov	r5, r0
 80016e0:	b128      	cbz	r0, 80016ee <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
 80016e2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80016e4:	b11b      	cbz	r3, 80016ee <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
 80016e6:	4602      	mov	r2, r0
 80016e8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80016ea:	4620      	mov	r0, r4
 80016ec:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff ff6e 	bl	80015d0 <sensor_unlock>
    return (rc);
}
 80016f4:	4628      	mov	r0, r5
 80016f6:	b009      	add	sp, #36	; 0x24
 80016f8:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
 80016fa:	f06f 0503 	mvn.w	r5, #3
 80016fe:	e7f6      	b.n	80016ee <sensor_read+0x52>
 8001700:	08001373 	.word	0x08001373

08001704 <sensor_mgr_poll_bytype>:
{
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	b085      	sub	sp, #20
 8001708:	4616      	mov	r6, r2
 800170a:	461f      	mov	r7, r3
 800170c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
 800170e:	b10c      	cbz	r4, 8001714 <sensor_mgr_poll_bytype+0x10>
 8001710:	8aa3      	ldrh	r3, [r4, #20]
 8001712:	b9cb      	cbnz	r3, 8001748 <sensor_mgr_poll_bytype+0x44>
 8001714:	4632      	mov	r2, r6
 8001716:	463b      	mov	r3, r7
 8001718:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
 800171a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800171e:	9102      	str	r1, [sp, #8]
 8001720:	2100      	movs	r1, #0
 8001722:	9101      	str	r1, [sp, #4]
 8001724:	9100      	str	r1, [sp, #0]
 8001726:	f7ff ffb9 	bl	800169c <sensor_read>
        sensor_lock(sensor);
 800172a:	4628      	mov	r0, r5
 800172c:	f7ff ff44 	bl	80015b8 <sensor_lock>
        if (stt) {
 8001730:	b12c      	cbz	r4, 800173e <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
 8001732:	8aa3      	ldrh	r3, [r4, #20]
 8001734:	b91b      	cbnz	r3, 800173e <sensor_mgr_poll_bytype+0x3a>
 8001736:	8a63      	ldrh	r3, [r4, #18]
 8001738:	b10b      	cbz	r3, 800173e <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
 800173a:	3b01      	subs	r3, #1
 800173c:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
 800173e:	4628      	mov	r0, r5
 8001740:	f7ff ff46 	bl	80015d0 <sensor_unlock>
}
 8001744:	b005      	add	sp, #20
 8001746:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
 8001748:	3b01      	subs	r3, #1
 800174a:	82a3      	strh	r3, [r4, #20]
}
 800174c:	e7fa      	b.n	8001744 <sensor_mgr_poll_bytype+0x40>

0800174e <sensor_poll_per_type_trait>:
{
 800174e:	b570      	push	{r4, r5, r6, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	4605      	mov	r5, r0
 8001754:	460e      	mov	r6, r1
    sensor_lock(sensor);
 8001756:	f7ff ff2f 	bl	80015b8 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 800175a:	6fec      	ldr	r4, [r5, #124]	; 0x7c
 800175c:	e007      	b.n	800176e <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
 800175e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001762:	9601      	str	r6, [sp, #4]
 8001764:	9400      	str	r4, [sp, #0]
 8001766:	4628      	mov	r0, r5
 8001768:	f7ff ffcc 	bl	8001704 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 800176c:	6a24      	ldr	r4, [r4, #32]
 800176e:	2c00      	cmp	r4, #0
 8001770:	d1f5      	bne.n	800175e <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
 8001772:	4628      	mov	r0, r5
 8001774:	f7ff ff2c 	bl	80015d0 <sensor_unlock>
}
 8001778:	b002      	add	sp, #8
 800177a:	bd70      	pop	{r4, r5, r6, pc}

0800177c <sensor_mgr_wakeup_event>:
{
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	b084      	sub	sp, #16
    now = os_time_get();
 8001780:	f001 f814 	bl	80027ac <os_time_get>
 8001784:	4605      	mov	r5, r0
    sensor_mgr_lock();
 8001786:	f7ff fe7d 	bl	8001484 <sensor_mgr_lock>
 800178a:	e012      	b.n	80017b2 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
 800178c:	4620      	mov	r0, r4
 800178e:	f7ff ff1f 	bl	80015d0 <sensor_unlock>
            sensor_mgr_unlock();
 8001792:	f7ff fe85 	bl	80014a0 <sensor_mgr_unlock>
}
 8001796:	b004      	add	sp, #16
 8001798:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
 800179a:	4632      	mov	r2, r6
 800179c:	4629      	mov	r1, r5
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff ffd5 	bl	800174e <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
 80017a4:	4629      	mov	r1, r5
 80017a6:	4620      	mov	r0, r4
 80017a8:	f7ff ff17 	bl	80015da <sensor_update_nextrun>
        sensor_unlock(cursor);
 80017ac:	4620      	mov	r0, r4
 80017ae:	f7ff ff0f 	bl	80015d0 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
 80017b2:	a903      	add	r1, sp, #12
 80017b4:	4628      	mov	r0, r5
 80017b6:	f7ff ff39 	bl	800162c <sensor_find_min_nextrun_sensor>
 80017ba:	4604      	mov	r4, r0
        sensor_lock(cursor);
 80017bc:	f7ff fefc 	bl	80015b8 <sensor_lock>
        if (!cursor->s_poll_rate) {
 80017c0:	6a23      	ldr	r3, [r4, #32]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0e2      	beq.n	800178c <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
 80017c6:	9e03      	ldr	r6, [sp, #12]
 80017c8:	b96e      	cbnz	r6, 80017e6 <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
 80017ca:	4620      	mov	r0, r4
 80017cc:	f7ff fdac 	bl	8001328 <sensor_type_traits_empty>
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d0e2      	beq.n	800179a <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
 80017d4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80017d8:	9501      	str	r5, [sp, #4]
 80017da:	2100      	movs	r1, #0
 80017dc:	9100      	str	r1, [sp, #0]
 80017de:	4620      	mov	r0, r4
 80017e0:	f7ff ff90 	bl	8001704 <sensor_mgr_poll_bytype>
 80017e4:	e7de      	b.n	80017a4 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
 80017e6:	f7ff fe5b 	bl	80014a0 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 80017ea:	9903      	ldr	r1, [sp, #12]
 80017ec:	4801      	ldr	r0, [pc, #4]	; (80017f4 <sensor_mgr_wakeup_event+0x78>)
 80017ee:	f000 f9ad 	bl	8001b4c <os_callout_reset>
 80017f2:	e7d0      	b.n	8001796 <sensor_mgr_wakeup_event+0x1a>
 80017f4:	200034a4 	.word	0x200034a4

080017f8 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
 80017f8:	b508      	push	{r3, lr}
 80017fa:	4675      	mov	r5, lr
 80017fc:	4604      	mov	r4, r0
 80017fe:	460e      	mov	r6, r1
    int sr;

    OS_ENTER_CRITICAL(sr);
 8001800:	f001 f83c 	bl	800287c <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
 8001804:	f004 fd69 	bl	80062da <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
 8001808:	b18c      	cbz	r4, 800182e <__assert_func+0x36>
 800180a:	4633      	mov	r3, r6
 800180c:	4622      	mov	r2, r4
 800180e:	4629      	mov	r1, r5
 8001810:	4809      	ldr	r0, [pc, #36]	; (8001838 <__assert_func+0x40>)
 8001812:	f004 fd8d 	bl	8006330 <console_printf>

    if (hal_debugger_connected()) {
 8001816:	f008 f97f 	bl	8009b18 <hal_debugger_connected>
 800181a:	b100      	cbz	r0, 800181e <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
       asm("bkpt");
 800181c:	be00      	bkpt	0x0000
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <__assert_func+0x44>)
 8001820:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001824:	605a      	str	r2, [r3, #4]
    asm("isb");
 8001826:	f3bf 8f6f 	isb	sy
    hal_system_reset();
 800182a:	f008 f977 	bl	8009b1c <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
 800182e:	4629      	mov	r1, r5
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <__assert_func+0x48>)
 8001832:	f004 fd7d 	bl	8006330 <console_printf>
 8001836:	e7ee      	b.n	8001816 <__assert_func+0x1e>
 8001838:	0800d0a0 	.word	0x0800d0a0
 800183c:	e000ed00 	.word	0xe000ed00
 8001840:	0800d090 	.word	0x0800d090

08001844 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
 8001844:	b500      	push	{lr}
 8001846:	b083      	sub	sp, #12
 8001848:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t *orig_sp;
#endif

    console_blocking_mode();
 800184a:	f004 fd46 	bl	80062da <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
 800184e:	4d1b      	ldr	r5, [pc, #108]	; (80018bc <os_default_irq+0x78>)
 8001850:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
 8001852:	6822      	ldr	r2, [r4, #0]
 8001854:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001858:	4819      	ldr	r0, [pc, #100]	; (80018c0 <os_default_irq+0x7c>)
 800185a:	f004 fd69 	bl	8006330 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
 800185e:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
 8001860:	6883      	ldr	r3, [r0, #8]
 8001862:	6842      	ldr	r2, [r0, #4]
 8001864:	6801      	ldr	r1, [r0, #0]
 8001866:	68c0      	ldr	r0, [r0, #12]
 8001868:	9000      	str	r0, [sp, #0]
 800186a:	4816      	ldr	r0, [pc, #88]	; (80018c4 <os_default_irq+0x80>)
 800186c:	f004 fd60 	bl	8006330 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
 8001870:	6923      	ldr	r3, [r4, #16]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	68e3      	ldr	r3, [r4, #12]
 8001876:	68a2      	ldr	r2, [r4, #8]
 8001878:	6861      	ldr	r1, [r4, #4]
 800187a:	4813      	ldr	r0, [pc, #76]	; (80018c8 <os_default_irq+0x84>)
 800187c:	f004 fd58 	bl	8006330 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
 8001880:	6a23      	ldr	r3, [r4, #32]
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	69e3      	ldr	r3, [r4, #28]
 8001886:	69a2      	ldr	r2, [r4, #24]
 8001888:	6961      	ldr	r1, [r4, #20]
 800188a:	4810      	ldr	r0, [pc, #64]	; (80018cc <os_default_irq+0x88>)
 800188c:	f004 fd50 	bl	8006330 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
 8001890:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
 8001892:	6983      	ldr	r3, [r0, #24]
 8001894:	6942      	ldr	r2, [r0, #20]
 8001896:	6901      	ldr	r1, [r0, #16]
 8001898:	69c0      	ldr	r0, [r0, #28]
 800189a:	9000      	str	r0, [sp, #0]
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <os_default_irq+0x8c>)
 800189e:	f004 fd47 	bl	8006330 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
 80018a2:	6869      	ldr	r1, [r5, #4]
 80018a4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80018a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80018a8:	480a      	ldr	r0, [pc, #40]	; (80018d4 <os_default_irq+0x90>)
 80018aa:	f004 fd41 	bl	8006330 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
 80018ae:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80018b0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80018b2:	4809      	ldr	r0, [pc, #36]	; (80018d8 <os_default_irq+0x94>)
 80018b4:	f004 fd3c 	bl	8006330 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
 80018b8:	f008 f930 	bl	8009b1c <hal_system_reset>
 80018bc:	e000ed00 	.word	0xe000ed00
 80018c0:	0800d0b8 	.word	0x0800d0b8
 80018c4:	0800d0ec 	.word	0x0800d0ec
 80018c8:	0800d120 	.word	0x0800d120
 80018cc:	0800d154 	.word	0x0800d154
 80018d0:	0800d188 	.word	0x0800d188
 80018d4:	0800d1bc 	.word	0x0800d1bc
 80018d8:	0800d1e4 	.word	0x0800d1e4

080018dc <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
 80018de:	f008 fddb 	bl	800a498 <hal_watchdog_tickle>
    sanity_last = 0;
 80018e2:	2500      	movs	r5, #0
 80018e4:	e00b      	b.n	80018fe <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
 80018e6:	f000 fd13 	bl	8002310 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
 80018ea:	f008 fdd5 	bl	800a498 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
 80018ee:	4625      	mov	r5, r4
 80018f0:	e012      	b.n	8001918 <os_idle_task+0x3c>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
 80018f2:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
 80018f4:	f007 fdd4 	bl	80094a0 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
 80018f8:	4638      	mov	r0, r7
 80018fa:	f000 ffc5 	bl	8002888 <os_arch_restore_sr>
        ++g_os_idle_ctr;
 80018fe:	4a15      	ldr	r2, [pc, #84]	; (8001954 <os_idle_task+0x78>)
 8001900:	6813      	ldr	r3, [r2, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	6013      	str	r3, [r2, #0]
        now = os_time_get();
 8001906:	f000 ff51 	bl	80027ac <os_time_get>
 800190a:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
 800190c:	f505 536a 	add.w	r3, r5, #14976	; 0x3a80
 8001910:	3318      	adds	r3, #24
 8001912:	1ac3      	subs	r3, r0, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	dce6      	bgt.n	80018e6 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
 8001918:	f000 ffb0 	bl	800287c <os_arch_save_sr>
 800191c:	4607      	mov	r7, r0
        now = os_time_get();
 800191e:	f000 ff45 	bl	80027ac <os_time_get>
 8001922:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
 8001924:	f000 fe22 	bl	800256c <os_sched_wakeup_ticks>
 8001928:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
 800192a:	4630      	mov	r0, r6
 800192c:	f000 f978 	bl	8001c20 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
 8001930:	42a0      	cmp	r0, r4
 8001932:	bf28      	it	cs
 8001934:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
 8001936:	f505 536a 	add.w	r3, r5, #14976	; 0x3a80
 800193a:	3318      	adds	r3, #24
 800193c:	1b9b      	subs	r3, r3, r6
 800193e:	4298      	cmp	r0, r3
 8001940:	bf28      	it	cs
 8001942:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
 8001944:	2863      	cmp	r0, #99	; 0x63
 8001946:	d9d4      	bls.n	80018f2 <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <os_idle_task+0x7c>)
 800194a:	4298      	cmp	r0, r3
 800194c:	d9d2      	bls.n	80018f4 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
 800194e:	4802      	ldr	r0, [pc, #8]	; (8001958 <os_idle_task+0x7c>)
 8001950:	e7d0      	b.n	80018f4 <os_idle_task+0x18>
 8001952:	bf00      	nop
 8001954:	20003558 	.word	0x20003558
 8001958:	000927c0 	.word	0x000927c0

0800195c <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
 800195c:	b508      	push	{r3, lr}
 800195e:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
 8001960:	2100      	movs	r1, #0
 8001962:	4608      	mov	r0, r1
 8001964:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
 8001966:	2300      	movs	r3, #0
 8001968:	461a      	mov	r2, r3
 800196a:	4619      	mov	r1, r3
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff43 	bl	80017f8 <__assert_func>
	...

08001974 <os_started>:
}
 8001974:	4b01      	ldr	r3, [pc, #4]	; (800197c <os_started+0x8>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	2000355c 	.word	0x2000355c

08001980 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
 8001980:	b500      	push	{lr}
 8001982:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
 8001984:	2340      	movs	r3, #64	; 0x40
 8001986:	9303      	str	r3, [sp, #12]
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <os_init_idle_task+0x60>)
 800198a:	9302      	str	r3, [sp, #8]
 800198c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	23ff      	movs	r3, #255	; 0xff
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2300      	movs	r3, #0
 8001998:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <os_init_idle_task+0x64>)
 800199a:	4913      	ldr	r1, [pc, #76]	; (80019e8 <os_init_idle_task+0x68>)
 800199c:	4813      	ldr	r0, [pc, #76]	; (80019ec <os_init_idle_task+0x6c>)
 800199e:	f000 fe3f 	bl	8002620 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
 80019a2:	b950      	cbnz	r0, 80019ba <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
 80019a4:	f000 fcea 	bl	800237c <os_sanity_init>
    assert(rc == 0);
 80019a8:	b968      	cbnz	r0, 80019c6 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
 80019aa:	f247 5030 	movw	r0, #30000	; 0x7530
 80019ae:	f008 fd4b 	bl	800a448 <hal_watchdog_init>
    assert(rc == 0);
 80019b2:	b970      	cbnz	r0, 80019d2 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
 80019b4:	b005      	add	sp, #20
 80019b6:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 80019ba:	2300      	movs	r3, #0
 80019bc:	461a      	mov	r2, r3
 80019be:	4619      	mov	r1, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff19 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 80019c6:	2300      	movs	r3, #0
 80019c8:	461a      	mov	r2, r3
 80019ca:	4619      	mov	r1, r3
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff13 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 80019d2:	2300      	movs	r3, #0
 80019d4:	461a      	mov	r2, r3
 80019d6:	4619      	mov	r1, r3
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff0d 	bl	80017f8 <__assert_func>
 80019de:	bf00      	nop
 80019e0:	200002a0 	.word	0x200002a0
 80019e4:	080018dd 	.word	0x080018dd
 80019e8:	0800d208 	.word	0x0800d208
 80019ec:	20003508 	.word	0x20003508

080019f0 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
 80019f0:	b510      	push	{r4, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
 80019f6:	4b24      	ldr	r3, [pc, #144]	; (8001a88 <os_init+0x98>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
 80019fe:	4b23      	ldr	r3, [pc, #140]	; (8001a8c <os_init+0x9c>)
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
 8001a04:	f000 fa5e 	bl	8001ec4 <os_eventq_dflt_get>
 8001a08:	f000 fa0a 	bl	8001e20 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
 8001a0c:	f000 fa00 	bl	8001e10 <os_dev_reset>

    err = os_arch_os_init();
 8001a10:	f000 ff6a 	bl	80028e8 <os_arch_os_init>
    assert(err == OS_OK);
 8001a14:	bb00      	cbnz	r0, 8001a58 <os_init+0x68>

    if (main_fn) {
 8001a16:	b18c      	cbz	r4, 8001a3c <os_init+0x4c>
        err = os_task_init(&os_main_task, "main", os_main, main_fn,
 8001a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1c:	9303      	str	r3, [sp, #12]
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <os_init+0xa0>)
 8001a20:	9302      	str	r3, [sp, #8]
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	237f      	movs	r3, #127	; 0x7f
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	4623      	mov	r3, r4
 8001a2e:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <os_init+0xa4>)
 8001a30:	4919      	ldr	r1, [pc, #100]	; (8001a98 <os_init+0xa8>)
 8001a32:	481a      	ldr	r0, [pc, #104]	; (8001a9c <os_init+0xac>)
 8001a34:	f000 fdf4 	bl	8002620 <os_task_init>
 8001a38:	b2c0      	uxtb	r0, r0
                           OS_MAIN_TASK_PRIO, OS_WAIT_FOREVER, os_main_stack,
                           OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
 8001a3a:	b998      	cbnz	r0, 8001a64 <os_init+0x74>
    }
    /* Call bsp related OS initializations */
    hal_bsp_init();
 8001a3c:	f007 f958 	bl	8008cf0 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
 8001a40:	2001      	movs	r0, #1
 8001a42:	f000 f985 	bl	8001d50 <os_dev_initialize_all>
 8001a46:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
 8001a48:	b990      	cbnz	r0, 8001a70 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
 8001a4a:	2002      	movs	r0, #2
 8001a4c:	f000 f980 	bl	8001d50 <os_dev_initialize_all>
 8001a50:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
 8001a52:	b998      	cbnz	r0, 8001a7c <os_init+0x8c>
}
 8001a54:	b004      	add	sp, #16
 8001a56:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
 8001a58:	2300      	movs	r3, #0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff feca 	bl	80017f8 <__assert_func>
        assert(err == 0);
 8001a64:	2300      	movs	r3, #0
 8001a66:	461a      	mov	r2, r3
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fec4 	bl	80017f8 <__assert_func>
    assert(err == OS_OK);
 8001a70:	2300      	movs	r3, #0
 8001a72:	461a      	mov	r2, r3
 8001a74:	4619      	mov	r1, r3
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff febe 	bl	80017f8 <__assert_func>
    assert(err == OS_OK);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4619      	mov	r1, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff feb8 	bl	80017f8 <__assert_func>
 8001a88:	20003560 	.word	0x20003560
 8001a8c:	20003584 	.word	0x20003584
 8001a90:	200003a0 	.word	0x200003a0
 8001a94:	0800195d 	.word	0x0800195d
 8001a98:	0800d200 	.word	0x0800d200
 8001a9c:	200013a0 	.word	0x200013a0

08001aa0 <os_start>:

void
os_start(void)
{
 8001aa0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
 8001aa2:	f008 fceb 	bl	800a47c <hal_watchdog_enable>

    err = os_arch_os_start();
 8001aa6:	f000 ff8b 	bl	80029c0 <os_arch_os_start>
    assert(err == OS_OK);
 8001aaa:	b900      	cbnz	r0, 8001aae <os_start+0xe>
#else
    assert(0);
#endif
}
 8001aac:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fe9f 	bl	80017f8 <__assert_func>
	...

08001abc <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
 8001abc:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <os_pkg_init+0x34>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b14b      	cbz	r3, 8001ad8 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
 8001ac4:	2003      	movs	r0, #3
 8001ac6:	f000 f943 	bl	8001d50 <os_dev_initialize_all>
 8001aca:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
 8001acc:	b948      	cbnz	r0, 8001ae2 <os_pkg_init+0x26>

    os_mempool_module_init();
 8001ace:	f000 fa7f 	bl	8001fd0 <os_mempool_module_init>
    os_msys_init();
 8001ad2:	f000 faf5 	bl	80020c0 <os_msys_init>
}
 8001ad6:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4619      	mov	r1, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fe8b 	bl	80017f8 <__assert_func>
    assert(err == OS_OK);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fe85 	bl	80017f8 <__assert_func>
 8001aee:	bf00      	nop
 8001af0:	20003494 	.word	0x20003494

08001af4 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	4604      	mov	r4, r0
 8001af8:	460d      	mov	r5, r1
 8001afa:	4617      	mov	r7, r2
 8001afc:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
 8001afe:	2220      	movs	r2, #32
 8001b00:	2100      	movs	r1, #0
 8001b02:	f001 faea 	bl	80030da <memset>
    c->c_ev.ev_cb = ev_cb;
 8001b06:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
 8001b08:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
 8001b0a:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
 8001b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b10 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
 8001b10:	b538      	push	{r3, r4, r5, lr}
 8001b12:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
 8001b14:	f000 feb2 	bl	800287c <os_arch_save_sr>
 8001b18:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
 8001b1a:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
 8001b1c:	b13b      	cbz	r3, 8001b2e <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 8001b1e:	69a2      	ldr	r2, [r4, #24]
 8001b20:	b172      	cbz	r2, 8001b40 <os_callout_stop+0x30>
 8001b22:	61d3      	str	r3, [r2, #28]
 8001b24:	69e3      	ldr	r3, [r4, #28]
 8001b26:	69a2      	ldr	r2, [r4, #24]
 8001b28:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
 8001b2e:	6920      	ldr	r0, [r4, #16]
 8001b30:	b110      	cbz	r0, 8001b38 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
 8001b32:	4621      	mov	r1, r4
 8001b34:	f000 f9a6 	bl	8001e84 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
 8001b38:	4628      	mov	r0, r5
 8001b3a:	f000 fea5 	bl	8002888 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
 8001b3e:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 8001b40:	4a01      	ldr	r2, [pc, #4]	; (8001b48 <os_callout_stop+0x38>)
 8001b42:	6053      	str	r3, [r2, #4]
 8001b44:	e7ee      	b.n	8001b24 <os_callout_stop+0x14>
 8001b46:	bf00      	nop
 8001b48:	20003560 	.word	0x20003560

08001b4c <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
 8001b4c:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
 8001b4e:	6903      	ldr	r3, [r0, #16]
 8001b50:	b1c3      	cbz	r3, 8001b84 <os_callout_reset+0x38>
 8001b52:	4605      	mov	r5, r0
 8001b54:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
 8001b56:	2900      	cmp	r1, #0
 8001b58:	db2f      	blt.n	8001bba <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
 8001b5a:	f000 fe8f 	bl	800287c <os_arch_save_sr>
 8001b5e:	4606      	mov	r6, r0

    os_callout_stop(c);
 8001b60:	4628      	mov	r0, r5
 8001b62:	f7ff ffd5 	bl	8001b10 <os_callout_stop>

    if (ticks == 0) {
 8001b66:	b904      	cbnz	r4, 8001b6a <os_callout_reset+0x1e>
        ticks = 1;
 8001b68:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
 8001b6a:	f000 fe1f 	bl	80027ac <os_time_get>
 8001b6e:	4420      	add	r0, r4
 8001b70:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8001b72:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <os_callout_reset+0x74>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b153      	cbz	r3, 8001b8e <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
 8001b78:	695a      	ldr	r2, [r3, #20]
 8001b7a:	1a82      	subs	r2, r0, r2
 8001b7c:	2a00      	cmp	r2, #0
 8001b7e:	db06      	blt.n	8001b8e <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	e7f8      	b.n	8001b76 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
 8001b84:	461a      	mov	r2, r3
 8001b86:	4619      	mov	r1, r3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fe35 	bl	80017f8 <__assert_func>
            break;
        }
    }

    if (entry) {
 8001b8e:	b15b      	cbz	r3, 8001ba8 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	61ea      	str	r2, [r5, #28]
 8001b94:	61ab      	str	r3, [r5, #24]
 8001b96:	69da      	ldr	r2, [r3, #28]
 8001b98:	6015      	str	r5, [r2, #0]
 8001b9a:	3518      	adds	r5, #24
 8001b9c:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f000 fe72 	bl	8002888 <os_arch_restore_sr>

    ret = OS_OK;
 8001ba4:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
 8001ba6:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61ab      	str	r3, [r5, #24]
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <os_callout_reset+0x74>)
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	61ea      	str	r2, [r5, #28]
 8001bb2:	6015      	str	r5, [r2, #0]
 8001bb4:	3518      	adds	r5, #24
 8001bb6:	605d      	str	r5, [r3, #4]
 8001bb8:	e7f1      	b.n	8001b9e <os_callout_reset+0x52>
        ret = OS_EINVAL;
 8001bba:	2002      	movs	r0, #2
    return ret;
 8001bbc:	e7f3      	b.n	8001ba6 <os_callout_reset+0x5a>
 8001bbe:	bf00      	nop
 8001bc0:	20003560 	.word	0x20003560

08001bc4 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
 8001bc4:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
 8001bc6:	f000 fdf1 	bl	80027ac <os_time_get>
 8001bca:	4605      	mov	r5, r0
 8001bcc:	e00f      	b.n	8001bee <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 8001bce:	69e2      	ldr	r2, [r4, #28]
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <os_callout_tick+0x58>)
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	69e3      	ldr	r3, [r4, #28]
 8001bd6:	69a2      	ldr	r2, [r4, #24]
 8001bd8:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
 8001bde:	f000 fe53 	bl	8002888 <os_arch_restore_sr>

        if (c) {
 8001be2:	b1d4      	cbz	r4, 8001c1a <os_callout_tick+0x56>
            if (c->c_evq) {
 8001be4:	6920      	ldr	r0, [r4, #16]
 8001be6:	b9a0      	cbnz	r0, 8001c12 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
 8001be8:	6863      	ldr	r3, [r4, #4]
 8001bea:	4620      	mov	r0, r4
 8001bec:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
 8001bee:	f000 fe45 	bl	800287c <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <os_callout_tick+0x58>)
 8001bf4:	681c      	ldr	r4, [r3, #0]
        if (c) {
 8001bf6:	2c00      	cmp	r4, #0
 8001bf8:	d0f1      	beq.n	8001bde <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
 8001bfa:	6963      	ldr	r3, [r4, #20]
 8001bfc:	1aeb      	subs	r3, r5, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db05      	blt.n	8001c0e <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 8001c02:	69a3      	ldr	r3, [r4, #24]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0e2      	beq.n	8001bce <os_callout_tick+0xa>
 8001c08:	69e2      	ldr	r2, [r4, #28]
 8001c0a:	61da      	str	r2, [r3, #28]
 8001c0c:	e7e2      	b.n	8001bd4 <os_callout_tick+0x10>
                c = NULL;
 8001c0e:	2400      	movs	r4, #0
 8001c10:	e7e5      	b.n	8001bde <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
 8001c12:	4621      	mov	r1, r4
 8001c14:	f000 f90c 	bl	8001e30 <os_eventq_put>
 8001c18:	e7e9      	b.n	8001bee <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
 8001c1a:	bd38      	pop	{r3, r4, r5, pc}
 8001c1c:	20003560 	.word	0x20003560

08001c20 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
 8001c20:	b510      	push	{r4, lr}
 8001c22:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
 8001c24:	f000 fe33 	bl	800288e <os_arch_in_critical>
 8001c28:	b130      	cbz	r0, 8001c38 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <os_callout_wakeup_ticks+0x30>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
 8001c2e:	b15b      	cbz	r3, 8001c48 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
 8001c30:	6958      	ldr	r0, [r3, #20]
 8001c32:	1b00      	subs	r0, r0, r4
 8001c34:	d406      	bmi.n	8001c44 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
 8001c36:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fdda 	bl	80017f8 <__assert_func>
            rt = 0;     /* callout time is in the past */
 8001c44:	2000      	movs	r0, #0
 8001c46:	e7f6      	b.n	8001c36 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
 8001c4c:	e7f3      	b.n	8001c36 <os_callout_wakeup_ticks+0x16>
 8001c4e:	bf00      	nop
 8001c50:	20003560 	.word	0x20003560

08001c54 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
 8001c54:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
 8001c56:	4601      	mov	r1, r0
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f008 f8c5 	bl	8009de8 <hal_timer_config>
    return rc;
}
 8001c5e:	bd08      	pop	{r3, pc}

08001c60 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
 8001c60:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
 8001c62:	2000      	movs	r0, #0
 8001c64:	f008 f90e 	bl	8009e84 <hal_timer_read>
    return cpu_time;
}
 8001c68:	bd08      	pop	{r3, pc}
	...

08001c6c <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
 8001c6c:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <os_dev_add+0x58>)
 8001c70:	681d      	ldr	r5, [r3, #0]
 8001c72:	b115      	cbz	r5, 8001c7a <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 8001c74:	462b      	mov	r3, r5
    prev_dev = NULL;
 8001c76:	2400      	movs	r4, #0
 8001c78:	e008      	b.n	8001c8c <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f843 5f20 	str.w	r5, [r3, #32]!
 8001c80:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <os_dev_add+0x58>)
 8001c82:	6053      	str	r3, [r2, #4]
 8001c84:	6010      	str	r0, [r2, #0]
        return (0);
 8001c86:	e010      	b.n	8001caa <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
 8001c88:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	b143      	cbz	r3, 8001ca0 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
 8001c8e:	7e01      	ldrb	r1, [r0, #24]
 8001c90:	7e1a      	ldrb	r2, [r3, #24]
 8001c92:	4291      	cmp	r1, r2
 8001c94:	d304      	bcc.n	8001ca0 <os_dev_add+0x34>
 8001c96:	d1f7      	bne.n	8001c88 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
 8001c98:	7e41      	ldrb	r1, [r0, #25]
 8001c9a:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
 8001c9c:	4291      	cmp	r1, r2
 8001c9e:	d2f3      	bcs.n	8001c88 <os_dev_add+0x1c>
    }

    if (prev_dev) {
 8001ca0:	b15c      	cbz	r4, 8001cba <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 8001ca2:	6a23      	ldr	r3, [r4, #32]
 8001ca4:	6203      	str	r3, [r0, #32]
 8001ca6:	b11b      	cbz	r3, 8001cb0 <os_dev_add+0x44>
 8001ca8:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
 8001caa:	2000      	movs	r0, #0
 8001cac:	bc30      	pop	{r4, r5}
 8001cae:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 8001cb0:	f100 0320 	add.w	r3, r0, #32
 8001cb4:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <os_dev_add+0x58>)
 8001cb6:	6053      	str	r3, [r2, #4]
 8001cb8:	e7f6      	b.n	8001ca8 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 8001cba:	6205      	str	r5, [r0, #32]
 8001cbc:	4b01      	ldr	r3, [pc, #4]	; (8001cc4 <os_dev_add+0x58>)
 8001cbe:	6018      	str	r0, [r3, #0]
 8001cc0:	e7f3      	b.n	8001caa <os_dev_add+0x3e>
 8001cc2:	bf00      	nop
 8001cc4:	200013f0 	.word	0x200013f0

08001cc8 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
 8001cc8:	b510      	push	{r4, lr}
 8001cca:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
 8001ccc:	6903      	ldr	r3, [r0, #16]
 8001cce:	6941      	ldr	r1, [r0, #20]
 8001cd0:	4798      	blx	r3
    if (rc != 0) {
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	b128      	cbz	r0, 8001ce2 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
 8001cd6:	7ee2      	ldrb	r2, [r4, #27]
 8001cd8:	f012 0f08 	tst.w	r2, #8
 8001cdc:	d105      	bne.n	8001cea <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e003      	b.n	8001cea <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
 8001ce2:	7ee2      	ldrb	r2, [r4, #27]
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	bd10      	pop	{r4, pc}

08001cee <os_dev_init>:
    dev->od_name = name;
 8001cee:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
 8001cf0:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
 8001cf2:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
 8001cf8:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
 8001cfa:	9a00      	ldr	r2, [sp, #0]
 8001cfc:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
 8001cfe:	9a01      	ldr	r2, [sp, #4]
 8001d00:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
 8001d02:	6003      	str	r3, [r0, #0]
 8001d04:	6043      	str	r3, [r0, #4]
 8001d06:	6083      	str	r3, [r0, #8]
 8001d08:	60c3      	str	r3, [r0, #12]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	4770      	bx	lr
	...

08001d10 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
 8001d10:	b530      	push	{r4, r5, lr}
 8001d12:	b083      	sub	sp, #12
 8001d14:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
 8001d16:	9c07      	ldr	r4, [sp, #28]
 8001d18:	9401      	str	r4, [sp, #4]
 8001d1a:	9c06      	ldr	r4, [sp, #24]
 8001d1c:	9400      	str	r4, [sp, #0]
 8001d1e:	f7ff ffe6 	bl	8001cee <os_dev_init>
    if (rc != 0) {
 8001d22:	4603      	mov	r3, r0
 8001d24:	b110      	cbz	r0, 8001d2c <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	b003      	add	sp, #12
 8001d2a:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	f7ff ff9d 	bl	8001c6c <os_dev_add>
    if (rc != 0) {
 8001d32:	4603      	mov	r3, r0
 8001d34:	2800      	cmp	r0, #0
 8001d36:	d1f6      	bne.n	8001d26 <os_dev_create+0x16>
    if (g_os_started) {
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <os_dev_create+0x3c>)
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	2a00      	cmp	r2, #0
 8001d3e:	d0f2      	beq.n	8001d26 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
 8001d40:	4628      	mov	r0, r5
 8001d42:	f7ff ffc1 	bl	8001cc8 <os_dev_initialize>
 8001d46:	4603      	mov	r3, r0
    return (rc);
 8001d48:	e7ed      	b.n	8001d26 <os_dev_create+0x16>
 8001d4a:	bf00      	nop
 8001d4c:	2000355c 	.word	0x2000355c

08001d50 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
 8001d50:	b538      	push	{r3, r4, r5, lr}
 8001d52:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <os_dev_initialize_all+0x28>)
 8001d56:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
 8001d58:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8001d5a:	e000      	b.n	8001d5e <os_dev_initialize_all+0xe>
 8001d5c:	6a24      	ldr	r4, [r4, #32]
 8001d5e:	b144      	cbz	r4, 8001d72 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
 8001d60:	7e23      	ldrb	r3, [r4, #24]
 8001d62:	42ab      	cmp	r3, r5
 8001d64:	d1fa      	bne.n	8001d5c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7ff ffae 	bl	8001cc8 <os_dev_initialize>
            if (rc) {
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	2800      	cmp	r0, #0
 8001d70:	d0f4      	beq.n	8001d5c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
 8001d72:	4610      	mov	r0, r2
 8001d74:	bd38      	pop	{r3, r4, r5, pc}
 8001d76:	bf00      	nop
 8001d78:	200013f0 	.word	0x200013f0

08001d7c <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
 8001d7c:	b538      	push	{r3, r4, r5, lr}
 8001d7e:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <os_dev_lookup+0x1c>)
 8001d82:	681c      	ldr	r4, [r3, #0]
 8001d84:	b134      	cbz	r4, 8001d94 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
 8001d86:	4629      	mov	r1, r5
 8001d88:	69e0      	ldr	r0, [r4, #28]
 8001d8a:	f001 f9b1 	bl	80030f0 <strcmp>
 8001d8e:	b108      	cbz	r0, 8001d94 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8001d90:	6a24      	ldr	r4, [r4, #32]
 8001d92:	e7f7      	b.n	8001d84 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
 8001d94:	4620      	mov	r0, r4
 8001d96:	bd38      	pop	{r3, r4, r5, pc}
 8001d98:	200013f0 	.word	0x200013f0

08001d9c <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	460d      	mov	r5, r1
 8001da0:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
 8001da2:	f7ff ffeb 	bl	8001d7c <os_dev_lookup>
    if (dev == NULL) {
 8001da6:	4604      	mov	r4, r0
 8001da8:	b1a0      	cbz	r0, 8001dd4 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
 8001daa:	7ec3      	ldrb	r3, [r0, #27]
 8001dac:	f013 0f01 	tst.w	r3, #1
 8001db0:	d012      	beq.n	8001dd8 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
 8001db2:	6803      	ldr	r3, [r0, #0]
 8001db4:	b11b      	cbz	r3, 8001dbe <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
 8001db6:	4632      	mov	r2, r6
 8001db8:	4629      	mov	r1, r5
 8001dba:	4798      	blx	r3
        if (rc != 0) {
 8001dbc:	b970      	cbnz	r0, 8001ddc <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
 8001dbe:	f000 fd5d 	bl	800287c <os_arch_save_sr>
    ++dev->od_open_ref;
 8001dc2:	7ea3      	ldrb	r3, [r4, #26]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
 8001dc8:	7ee3      	ldrb	r3, [r4, #27]
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
 8001dd0:	f000 fd5a 	bl	8002888 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
 8001dd8:	2400      	movs	r4, #0
 8001dda:	e7fb      	b.n	8001dd4 <os_dev_open+0x38>
    return (NULL);
 8001ddc:	2400      	movs	r4, #0
 8001dde:	e7f9      	b.n	8001dd4 <os_dev_open+0x38>

08001de0 <os_dev_close>:

int
os_dev_close(struct os_dev *dev)
{
 8001de0:	b510      	push	{r4, lr}
 8001de2:	4604      	mov	r4, r0
    int rc;
    os_sr_t sr;

    if (dev->od_handlers.od_close) {
 8001de4:	68c3      	ldr	r3, [r0, #12]
 8001de6:	b113      	cbz	r3, 8001dee <os_dev_close+0xe>
        rc = dev->od_handlers.od_close(dev);
 8001de8:	4798      	blx	r3
        if (rc != 0) {
 8001dea:	4603      	mov	r3, r0
 8001dec:	b968      	cbnz	r0, 8001e0a <os_dev_close+0x2a>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
 8001dee:	f000 fd45 	bl	800287c <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
 8001df2:	7ea3      	ldrb	r3, [r4, #26]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	76a3      	strb	r3, [r4, #26]
 8001dfa:	b91b      	cbnz	r3, 8001e04 <os_dev_close+0x24>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
 8001dfc:	7ee3      	ldrb	r3, [r4, #27]
 8001dfe:	f023 0306 	bic.w	r3, r3, #6
 8001e02:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
 8001e04:	f000 fd40 	bl	8002888 <os_arch_restore_sr>

    return (0);
 8001e08:	2300      	movs	r3, #0
err:
    return (rc);
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd10      	pop	{r4, pc}
	...

08001e10 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
 8001e10:	4b02      	ldr	r3, [pc, #8]	; (8001e1c <os_dev_reset+0xc>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605b      	str	r3, [r3, #4]
}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	200013f0 	.word	0x200013f0

08001e20 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
 8001e20:	2200      	movs	r2, #0
 8001e22:	6002      	str	r2, [r0, #0]
 8001e24:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
 8001e26:	4603      	mov	r3, r0
 8001e28:	f843 2f08 	str.w	r2, [r3, #8]!
 8001e2c:	60c3      	str	r3, [r0, #12]
}
 8001e2e:	4770      	bx	lr

08001e30 <os_eventq_put>:
    return evq->evq_list.stqh_last != NULL;
}

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
 8001e30:	b570      	push	{r4, r5, r6, lr}
 8001e32:	4605      	mov	r5, r0
 8001e34:	460c      	mov	r4, r1
    int resched;
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 8001e36:	f000 fd21 	bl	800287c <os_arch_save_sr>
 8001e3a:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
 8001e3c:	7823      	ldrb	r3, [r4, #0]
 8001e3e:	b9a3      	cbnz	r3, 8001e6a <os_eventq_put+0x3a>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
 8001e40:	2301      	movs	r3, #1
 8001e42:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
 8001e44:	2300      	movs	r3, #0
 8001e46:	60e3      	str	r3, [r4, #12]
 8001e48:	68eb      	ldr	r3, [r5, #12]
 8001e4a:	601c      	str	r4, [r3, #0]
 8001e4c:	340c      	adds	r4, #12
 8001e4e:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
 8001e50:	6868      	ldr	r0, [r5, #4]
 8001e52:	b188      	cbz	r0, 8001e78 <os_eventq_put+0x48>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
 8001e54:	7b03      	ldrb	r3, [r0, #12]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d00a      	beq.n	8001e70 <os_eventq_put+0x40>
    resched = 0;
 8001e5a:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
 8001e60:	4630      	mov	r0, r6
 8001e62:	f000 fd11 	bl	8002888 <os_arch_restore_sr>

    if (resched) {
 8001e66:	b94c      	cbnz	r4, 8001e7c <os_eventq_put+0x4c>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
 8001e68:	bd70      	pop	{r4, r5, r6, pc}
        OS_EXIT_CRITICAL(sr);
 8001e6a:	f000 fd0d 	bl	8002888 <os_arch_restore_sr>
 8001e6e:	e7fb      	b.n	8001e68 <os_eventq_put+0x38>
            os_sched_wakeup(evq->evq_task);
 8001e70:	f000 fb22 	bl	80024b8 <os_sched_wakeup>
            resched = 1;
 8001e74:	2401      	movs	r4, #1
 8001e76:	e7f1      	b.n	8001e5c <os_eventq_put+0x2c>
    resched = 0;
 8001e78:	2400      	movs	r4, #0
 8001e7a:	e7f1      	b.n	8001e60 <os_eventq_put+0x30>
        os_sched(NULL);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f000 fb9b 	bl	80025b8 <os_sched>
 8001e82:	e7f1      	b.n	8001e68 <os_eventq_put+0x38>

08001e84 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
 8001e84:	b538      	push	{r3, r4, r5, lr}
 8001e86:	4605      	mov	r5, r0
 8001e88:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 8001e8a:	f000 fcf7 	bl	800287c <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
 8001e8e:	7823      	ldrb	r3, [r4, #0]
 8001e90:	b183      	cbz	r3, 8001eb4 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 8001e92:	68aa      	ldr	r2, [r5, #8]
 8001e94:	42a2      	cmp	r2, r4
 8001e96:	d107      	bne.n	8001ea8 <os_eventq_remove+0x24>
 8001e98:	68d3      	ldr	r3, [r2, #12]
 8001e9a:	60ab      	str	r3, [r5, #8]
 8001e9c:	b953      	cbnz	r3, 8001eb4 <os_eventq_remove+0x30>
 8001e9e:	f105 0308 	add.w	r3, r5, #8
 8001ea2:	60eb      	str	r3, [r5, #12]
 8001ea4:	e006      	b.n	8001eb4 <os_eventq_remove+0x30>
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68d3      	ldr	r3, [r2, #12]
 8001eaa:	42a3      	cmp	r3, r4
 8001eac:	d1fb      	bne.n	8001ea6 <os_eventq_remove+0x22>
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60d3      	str	r3, [r2, #12]
 8001eb2:	b123      	cbz	r3, 8001ebe <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
 8001eb8:	f000 fce6 	bl	8002888 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
 8001ebc:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 8001ebe:	320c      	adds	r2, #12
 8001ec0:	60ea      	str	r2, [r5, #12]
 8001ec2:	e7f7      	b.n	8001eb4 <os_eventq_remove+0x30>

08001ec4 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
 8001ec4:	4800      	ldr	r0, [pc, #0]	; (8001ec8 <os_eventq_dflt_get+0x4>)
 8001ec6:	4770      	bx	lr
 8001ec8:	200013f8 	.word	0x200013f8

08001ecc <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	d031      	beq.n	8001f34 <os_mempool_init_internal+0x68>
{
 8001ed0:	b430      	push	{r4, r5}
 8001ed2:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	d02f      	beq.n	8001f38 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
 8001ed8:	b1bb      	cbz	r3, 8001f0a <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
 8001eda:	b113      	cbz	r3, 8001ee2 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
 8001edc:	f013 0f03 	tst.w	r3, #3
 8001ee0:	d12c      	bne.n	8001f3c <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
 8001ee2:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
 8001ee4:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
 8001ee6:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
 8001ee8:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001eec:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
 8001eee:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
 8001ef0:	60e3      	str	r3, [r4, #12]
    mp->name = name;
 8001ef2:	9802      	ldr	r0, [sp, #8]
 8001ef4:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
 8001ef6:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
 8001ef8:	b199      	cbz	r1, 8001f22 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
 8001efa:	f012 0f03 	tst.w	r2, #3
 8001efe:	d002      	beq.n	8001f06 <os_mempool_init_internal+0x3a>
 8001f00:	f022 0203 	bic.w	r2, r2, #3
 8001f04:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
 8001f06:	2001      	movs	r0, #1
 8001f08:	e007      	b.n	8001f1a <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
 8001f0a:	2900      	cmp	r1, #0
 8001f0c:	d0e5      	beq.n	8001eda <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
 8001f0e:	2003      	movs	r0, #3
 8001f10:	e00e      	b.n	8001f30 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
 8001f12:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
 8001f14:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
 8001f16:	3001      	adds	r0, #1
            block_addr += true_block_size;
 8001f18:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
 8001f1a:	4281      	cmp	r1, r0
 8001f1c:	dcf9      	bgt.n	8001f12 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
 8001f22:	2000      	movs	r0, #0
 8001f24:	6120      	str	r0, [r4, #16]
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <os_mempool_init_internal+0x74>)
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	6014      	str	r4, [r2, #0]
 8001f2c:	3410      	adds	r4, #16
 8001f2e:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
 8001f30:	bc30      	pop	{r4, r5}
 8001f32:	4770      	bx	lr
        return OS_INVALID_PARM;
 8001f34:	2003      	movs	r0, #3
}
 8001f36:	4770      	bx	lr
        return OS_INVALID_PARM;
 8001f38:	2003      	movs	r0, #3
 8001f3a:	e7f9      	b.n	8001f30 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
 8001f3c:	2004      	movs	r0, #4
 8001f3e:	e7f7      	b.n	8001f30 <os_mempool_init_internal+0x64>
 8001f40:	20003568 	.word	0x20003568

08001f44 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
 8001f44:	b510      	push	{r4, lr}
 8001f46:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
 8001f48:	2400      	movs	r4, #0
 8001f4a:	9401      	str	r4, [sp, #4]
 8001f4c:	9c04      	ldr	r4, [sp, #16]
 8001f4e:	9400      	str	r4, [sp, #0]
 8001f50:	f7ff ffbc 	bl	8001ecc <os_mempool_init_internal>
}
 8001f54:	b002      	add	sp, #8
 8001f56:	bd10      	pop	{r4, pc}

08001f58 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
 8001f58:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
 8001f5a:	b1a0      	cbz	r0, 8001f86 <os_memblock_get+0x2e>
 8001f5c:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
 8001f5e:	f000 fc8d 	bl	800287c <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
 8001f62:	88e3      	ldrh	r3, [r4, #6]
 8001f64:	b153      	cbz	r3, 8001f7c <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
 8001f66:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
 8001f68:	682a      	ldr	r2, [r5, #0]
 8001f6a:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
 8001f72:	8922      	ldrh	r2, [r4, #8]
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d202      	bcs.n	8001f7e <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
 8001f78:	8123      	strh	r3, [r4, #8]
 8001f7a:	e000      	b.n	8001f7e <os_memblock_get+0x26>
    block = NULL;
 8001f7c:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
 8001f7e:	f000 fc83 	bl	8002888 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
 8001f82:	4628      	mov	r0, r5
 8001f84:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
 8001f86:	2500      	movs	r5, #0
    return (void *)block;
 8001f88:	e7fb      	b.n	8001f82 <os_memblock_get+0x2a>

08001f8a <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
 8001f8a:	b538      	push	{r3, r4, r5, lr}
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
 8001f90:	f000 fc74 	bl	800287c <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
 8001f94:	6963      	ldr	r3, [r4, #20]
 8001f96:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
 8001f98:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
 8001f9a:	88e3      	ldrh	r3, [r4, #6]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
 8001fa0:	f000 fc72 	bl	8002888 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}

08001fa8 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
 8001fa8:	b168      	cbz	r0, 8001fc6 <os_memblock_put+0x1e>
{
 8001faa:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
 8001fac:	b169      	cbz	r1, 8001fca <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
 8001fae:	7a83      	ldrb	r3, [r0, #10]
 8001fb0:	f013 0f01 	tst.w	r3, #1
 8001fb4:	d004      	beq.n	8001fc0 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
 8001fb6:	69c3      	ldr	r3, [r0, #28]
 8001fb8:	b113      	cbz	r3, 8001fc0 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
 8001fba:	6a02      	ldr	r2, [r0, #32]
 8001fbc:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
 8001fbe:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
 8001fc0:	f7ff ffe3 	bl	8001f8a <os_memblock_put_from_cb>
 8001fc4:	e7fb      	b.n	8001fbe <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
 8001fc6:	2003      	movs	r0, #3
}
 8001fc8:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 8001fca:	2003      	movs	r0, #3
 8001fcc:	e7f7      	b.n	8001fbe <os_memblock_put+0x16>
	...

08001fd0 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
 8001fd0:	4b02      	ldr	r3, [pc, #8]	; (8001fdc <os_mempool_module_init+0xc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605b      	str	r3, [r3, #4]
}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20003568 	.word	0x20003568

08001fe0 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <os_msys_find_pool+0x28>)
 8001fe2:	6819      	ldr	r1, [r3, #0]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	b123      	cbz	r3, 8001ff2 <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
 8001fe8:	881a      	ldrh	r2, [r3, #0]
 8001fea:	4282      	cmp	r2, r0
 8001fec:	d201      	bcs.n	8001ff2 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	e7f9      	b.n	8001fe6 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
 8001ff2:	b10b      	cbz	r3, 8001ff8 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
 8001ff8:	b119      	cbz	r1, 8002002 <os_msys_find_pool+0x22>
 8001ffa:	4b03      	ldr	r3, [pc, #12]	; (8002008 <os_msys_find_pool+0x28>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	3b08      	subs	r3, #8
 8002000:	e7f8      	b.n	8001ff4 <os_msys_find_pool+0x14>
 8002002:	460b      	mov	r3, r1
    return (pool);
 8002004:	e7f6      	b.n	8001ff4 <os_msys_find_pool+0x14>
 8002006:	bf00      	nop
 8002008:	20000114 	.word	0x20000114

0800200c <os_msys_register>:
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <os_msys_register+0x3c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	b12b      	cbz	r3, 800201e <os_msys_register+0x12>
        if (new_pool->omp_databuf_len > pool->omp_databuf_len) {
 8002012:	8801      	ldrh	r1, [r0, #0]
 8002014:	881a      	ldrh	r2, [r3, #0]
 8002016:	4291      	cmp	r1, r2
 8002018:	d801      	bhi.n	800201e <os_msys_register+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	e7f8      	b.n	8002010 <os_msys_register+0x4>
    if (pool) {
 800201e:	b153      	cbz	r3, 8002036 <os_msys_register+0x2a>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, pool, new_pool, omp_next);
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	6082      	str	r2, [r0, #8]
 8002024:	b112      	cbz	r2, 800202c <os_msys_register+0x20>
 8002026:	6098      	str	r0, [r3, #8]
}
 8002028:	2000      	movs	r0, #0
 800202a:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, pool, new_pool, omp_next);
 800202c:	f100 0208 	add.w	r2, r0, #8
 8002030:	4905      	ldr	r1, [pc, #20]	; (8002048 <os_msys_register+0x3c>)
 8002032:	604a      	str	r2, [r1, #4]
 8002034:	e7f7      	b.n	8002026 <os_msys_register+0x1a>
        STAILQ_INSERT_TAIL(&g_msys_pool_list, new_pool, omp_next);
 8002036:	2300      	movs	r3, #0
 8002038:	6083      	str	r3, [r0, #8]
 800203a:	4b03      	ldr	r3, [pc, #12]	; (8002048 <os_msys_register+0x3c>)
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	6010      	str	r0, [r2, #0]
 8002040:	3008      	adds	r0, #8
 8002042:	6058      	str	r0, [r3, #4]
 8002044:	e7f0      	b.n	8002028 <os_msys_register+0x1c>
 8002046:	bf00      	nop
 8002048:	20000114 	.word	0x20000114

0800204c <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
 800204c:	b530      	push	{r4, r5, lr}
 800204e:	b083      	sub	sp, #12
 8002050:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
 8002052:	9d07      	ldr	r5, [sp, #28]
 8002054:	9501      	str	r5, [sp, #4]
 8002056:	9d06      	ldr	r5, [sp, #24]
 8002058:	9500      	str	r5, [sp, #0]
 800205a:	f005 fbe0 	bl	800781e <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
 800205e:	b138      	cbz	r0, 8002070 <os_msys_init_once+0x24>
 8002060:	2000      	movs	r0, #0
 8002062:	9000      	str	r0, [sp, #0]
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <os_msys_init_once+0x40>)
 8002066:	681d      	ldr	r5, [r3, #0]
 8002068:	4603      	mov	r3, r0
 800206a:	4602      	mov	r2, r0
 800206c:	4601      	mov	r1, r0
 800206e:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
 8002070:	4620      	mov	r0, r4
 8002072:	f7ff ffcb 	bl	800200c <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
 8002076:	b138      	cbz	r0, 8002088 <os_msys_init_once+0x3c>
 8002078:	2000      	movs	r0, #0
 800207a:	9000      	str	r0, [sp, #0]
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <os_msys_init_once+0x40>)
 800207e:	681c      	ldr	r4, [r3, #0]
 8002080:	4603      	mov	r3, r0
 8002082:	4602      	mov	r2, r0
 8002084:	4601      	mov	r1, r0
 8002086:	47a0      	blx	r4
}
 8002088:	b003      	add	sp, #12
 800208a:	bd30      	pop	{r4, r5, pc}
 800208c:	20000110 	.word	0x20000110

08002090 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
 8002090:	4b02      	ldr	r3, [pc, #8]	; (800209c <os_msys_reset+0xc>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605b      	str	r3, [r3, #4]
}
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000114 	.word	0x20000114

080020a0 <os_msys_get_pkthdr>:
{
 80020a0:	b510      	push	{r4, lr}
 80020a2:	460c      	mov	r4, r1
    total_pkthdr_len =  user_hdr_len + sizeof(struct os_mbuf_pkthdr);
 80020a4:	f101 0308 	add.w	r3, r1, #8
 80020a8:	b29b      	uxth	r3, r3
    pool = os_msys_find_pool(dsize + total_pkthdr_len);
 80020aa:	4418      	add	r0, r3
 80020ac:	b280      	uxth	r0, r0
 80020ae:	f7ff ff97 	bl	8001fe0 <os_msys_find_pool>
    if (!pool) {
 80020b2:	b118      	cbz	r0, 80020bc <os_msys_get_pkthdr+0x1c>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
 80020b4:	b2e1      	uxtb	r1, r4
 80020b6:	f000 fced 	bl	8002a94 <os_mbuf_get_pkthdr>
}
 80020ba:	bd10      	pop	{r4, pc}
    return (NULL);
 80020bc:	2000      	movs	r0, #0
 80020be:	e7fc      	b.n	80020ba <os_msys_get_pkthdr+0x1a>

080020c0 <os_msys_init>:

void
os_msys_init(void)
{
 80020c0:	b500      	push	{lr}
 80020c2:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
 80020c4:	f7ff ffe4 	bl	8002090 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <os_msys_init+0x24>)
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	f44f 7392 	mov.w	r3, #292	; 0x124
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	230c      	movs	r3, #12
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <os_msys_init+0x28>)
 80020d6:	4905      	ldr	r1, [pc, #20]	; (80020ec <os_msys_init+0x2c>)
 80020d8:	4805      	ldr	r0, [pc, #20]	; (80020f0 <os_msys_init+0x30>)
 80020da:	f7ff ffb7 	bl	800204c <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
 80020de:	b003      	add	sp, #12
 80020e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80020e4:	0800d210 	.word	0x0800d210
 80020e8:	200021b8 	.word	0x200021b8
 80020ec:	200021c4 	.word	0x200021c4
 80020f0:	20001408 	.word	0x20001408

080020f4 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
 80020f4:	4603      	mov	r3, r0
 80020f6:	b128      	cbz	r0, 8002104 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
 80020f8:	2000      	movs	r0, #0
 80020fa:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
 80020fc:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
 80020fe:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
 8002100:	6018      	str	r0, [r3, #0]
 8002102:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 8002104:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
 8002106:	4770      	bx	lr

08002108 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
 800210a:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <os_mutex_release+0xb4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d04d      	beq.n	80021ae <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 8002112:	2800      	cmp	r0, #0
 8002114:	d04d      	beq.n	80021b2 <os_mutex_release+0xaa>
 8002116:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
 8002118:	f000 f97a 	bl	8002410 <os_sched_get_current_task>
 800211c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
 800211e:	88e3      	ldrh	r3, [r4, #6]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d048      	beq.n	80021b6 <os_mutex_release+0xae>
 8002124:	68a2      	ldr	r2, [r4, #8]
 8002126:	4282      	cmp	r2, r0
 8002128:	d001      	beq.n	800212e <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
 800212a:	2005      	movs	r0, #5
 800212c:	e040      	b.n	80021b0 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
 800212e:	2b01      	cmp	r3, #1
 8002130:	d003      	beq.n	800213a <os_mutex_release+0x32>
        --mu->mu_level;
 8002132:	3b01      	subs	r3, #1
 8002134:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
 8002136:	2000      	movs	r0, #0
        goto done;
 8002138:	e03a      	b.n	80021b0 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
 800213a:	f000 fb9f 	bl	800287c <os_arch_save_sr>
 800213e:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
 8002140:	88e3      	ldrh	r3, [r4, #6]
 8002142:	3b01      	subs	r3, #1
 8002144:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
 8002146:	7aea      	ldrb	r2, [r5, #11]
 8002148:	7963      	ldrb	r3, [r4, #5]
 800214a:	429a      	cmp	r2, r3
 800214c:	d11e      	bne.n	800218c <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
 800214e:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
 8002150:	b146      	cbz	r6, 8002164 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
 8002152:	69f3      	ldr	r3, [r6, #28]
 8002154:	b1fb      	cbz	r3, 8002196 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
 8002156:	4630      	mov	r0, r6
 8002158:	f000 f9ae 	bl	80024b8 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
 800215c:	2301      	movs	r3, #1
 800215e:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
 8002160:	7af3      	ldrb	r3, [r6, #11]
 8002162:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
 8002164:	60a6      	str	r6, [r4, #8]
    if (rdy) {
 8002166:	b116      	cbz	r6, 800216e <os_mutex_release+0x66>
        rdy->t_lockcnt++;
 8002168:	7bb3      	ldrb	r3, [r6, #14]
 800216a:	3301      	adds	r3, #1
 800216c:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
 800216e:	7bab      	ldrb	r3, [r5, #14]
 8002170:	3b01      	subs	r3, #1
 8002172:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
 8002174:	f000 fa1a 	bl	80025ac <os_sched_next_task>
 8002178:	4604      	mov	r4, r0
    if (rdy != current) {
 800217a:	4285      	cmp	r5, r0
 800217c:	d010      	beq.n	80021a0 <os_mutex_release+0x98>
        resched = 1;
 800217e:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
 8002180:	4638      	mov	r0, r7
 8002182:	f000 fb81 	bl	8002888 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
 8002186:	b96d      	cbnz	r5, 80021a4 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
 8002188:	2000      	movs	r0, #0
 800218a:	e011      	b.n	80021b0 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
 800218c:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
 800218e:	4628      	mov	r0, r5
 8002190:	f000 fa24 	bl	80025dc <os_sched_resort>
 8002194:	e7db      	b.n	800214e <os_mutex_release+0x46>
        assert(rdy->t_obj);
 8002196:	461a      	mov	r2, r3
 8002198:	4619      	mov	r1, r3
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fb2c 	bl	80017f8 <__assert_func>
    resched = 0;
 80021a0:	2500      	movs	r5, #0
 80021a2:	e7ed      	b.n	8002180 <os_mutex_release+0x78>
        os_sched(rdy);
 80021a4:	4620      	mov	r0, r4
 80021a6:	f000 fa07 	bl	80025b8 <os_sched>
    ret = OS_OK;
 80021aa:	2000      	movs	r0, #0
 80021ac:	e000      	b.n	80021b0 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
 80021ae:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
 80021b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
 80021b2:	2003      	movs	r0, #3
 80021b4:	e7fc      	b.n	80021b0 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
 80021b6:	2005      	movs	r0, #5
 80021b8:	e7fa      	b.n	80021b0 <os_mutex_release+0xa8>
 80021ba:	bf00      	nop
 80021bc:	2000355c 	.word	0x2000355c

080021c0 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
 80021c0:	4b36      	ldr	r3, [pc, #216]	; (800229c <os_mutex_pend+0xdc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d065      	beq.n	8002294 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d065      	beq.n	8002298 <os_mutex_pend+0xd8>
{
 80021cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021d0:	460f      	mov	r7, r1
 80021d2:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
 80021d4:	f000 fb52 	bl	800287c <os_arch_save_sr>
 80021d8:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
 80021da:	f000 f919 	bl	8002410 <os_sched_get_current_task>
 80021de:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
 80021e0:	88e3      	ldrh	r3, [r4, #6]
 80021e2:	b19b      	cbz	r3, 800220c <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
 80021e4:	68a2      	ldr	r2, [r4, #8]
 80021e6:	4282      	cmp	r2, r0
 80021e8:	d01e      	beq.n	8002228 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
 80021ea:	b327      	cbz	r7, 8002236 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
 80021ec:	7ad1      	ldrb	r1, [r2, #11]
 80021ee:	7ac3      	ldrb	r3, [r0, #11]
 80021f0:	4299      	cmp	r1, r3
 80021f2:	d825      	bhi.n	8002240 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
 80021f4:	6821      	ldr	r1, [r4, #0]
 80021f6:	b369      	cbz	r1, 8002254 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 80021f8:	460b      	mov	r3, r1
    last = NULL;
 80021fa:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 80021fc:	b32b      	cbz	r3, 800224a <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
 80021fe:	7ae8      	ldrb	r0, [r5, #11]
 8002200:	7ada      	ldrb	r2, [r3, #11]
 8002202:	4290      	cmp	r0, r2
 8002204:	d321      	bcc.n	800224a <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
 8002206:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 8002208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220a:	e7f7      	b.n	80021fc <os_mutex_pend+0x3c>
        mu->mu_owner = current;
 800220c:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
 800220e:	7ac3      	ldrb	r3, [r0, #11]
 8002210:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
 8002212:	7b83      	ldrb	r3, [r0, #14]
 8002214:	3301      	adds	r3, #1
 8002216:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
 8002218:	2301      	movs	r3, #1
 800221a:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
 800221c:	4640      	mov	r0, r8
 800221e:	f000 fb33 	bl	8002888 <os_arch_restore_sr>
        ret = OS_OK;
 8002222:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
 8002224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
 8002228:	3301      	adds	r3, #1
 800222a:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
 800222c:	4640      	mov	r0, r8
 800222e:	f000 fb2b 	bl	8002888 <os_arch_restore_sr>
        ret = OS_OK;
 8002232:	2000      	movs	r0, #0
        goto done;
 8002234:	e7f6      	b.n	8002224 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
 8002236:	4640      	mov	r0, r8
 8002238:	f000 fb26 	bl	8002888 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
 800223c:	2006      	movs	r0, #6
        goto done;
 800223e:	e7f1      	b.n	8002224 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
 8002240:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
 8002242:	68a0      	ldr	r0, [r4, #8]
 8002244:	f000 f9ca 	bl	80025dc <os_sched_resort>
 8002248:	e7d4      	b.n	80021f4 <os_mutex_pend+0x34>
    if (last) {
 800224a:	b11e      	cbz	r6, 8002254 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
 800224c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800224e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8002250:	64f5      	str	r5, [r6, #76]	; 0x4c
 8002252:	e001      	b.n	8002258 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
 8002254:	64e9      	str	r1, [r5, #76]	; 0x4c
 8002256:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
 8002258:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
 800225a:	7b6b      	ldrb	r3, [r5, #13]
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
 8002262:	4639      	mov	r1, r7
 8002264:	4628      	mov	r0, r5
 8002266:	f000 f8df 	bl	8002428 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
 800226a:	4640      	mov	r0, r8
 800226c:	f000 fb0c 	bl	8002888 <os_arch_restore_sr>
    os_sched(NULL);
 8002270:	2000      	movs	r0, #0
 8002272:	f000 f9a1 	bl	80025b8 <os_sched>
    OS_ENTER_CRITICAL(sr);
 8002276:	f000 fb01 	bl	800287c <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
 800227a:	7b6b      	ldrb	r3, [r5, #13]
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
 8002282:	f000 fb01 	bl	8002888 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
 8002286:	68a3      	ldr	r3, [r4, #8]
 8002288:	42ab      	cmp	r3, r5
 800228a:	d001      	beq.n	8002290 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
 800228c:	2006      	movs	r0, #6
 800228e:	e7c9      	b.n	8002224 <os_mutex_pend+0x64>
        ret = OS_OK;
 8002290:	2000      	movs	r0, #0
 8002292:	e7c7      	b.n	8002224 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
 8002294:	2009      	movs	r0, #9
 8002296:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 8002298:	2003      	movs	r0, #3
}
 800229a:	4770      	bx	lr
 800229c:	2000355c 	.word	0x2000355c

080022a0 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
 80022a0:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <os_sanity_check_list_lock+0x18>)
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	b900      	cbnz	r0, 80022aa <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
 80022a8:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
 80022aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022ae:	4803      	ldr	r0, [pc, #12]	; (80022bc <os_sanity_check_list_lock+0x1c>)
 80022b0:	f7ff ff86 	bl	80021c0 <os_mutex_pend>
err:
 80022b4:	e7f8      	b.n	80022a8 <os_sanity_check_list_lock+0x8>
 80022b6:	bf00      	nop
 80022b8:	2000355c 	.word	0x2000355c
 80022bc:	20003570 	.word	0x20003570

080022c0 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
 80022c0:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <os_sanity_check_list_unlock+0x14>)
 80022c4:	6818      	ldr	r0, [r3, #0]
 80022c6:	b900      	cbnz	r0, 80022ca <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
 80022c8:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
 80022ca:	4803      	ldr	r0, [pc, #12]	; (80022d8 <os_sanity_check_list_unlock+0x18>)
 80022cc:	f7ff ff1c 	bl	8002108 <os_mutex_release>
err:
 80022d0:	e7fa      	b.n	80022c8 <os_sanity_check_list_unlock+0x8>
 80022d2:	bf00      	nop
 80022d4:	2000355c 	.word	0x2000355c
 80022d8:	20003570 	.word	0x20003570

080022dc <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
 80022dc:	2300      	movs	r3, #0
 80022de:	6003      	str	r3, [r0, #0]
 80022e0:	6043      	str	r3, [r0, #4]
 80022e2:	6083      	str	r3, [r0, #8]
 80022e4:	60c3      	str	r3, [r0, #12]
 80022e6:	6103      	str	r3, [r0, #16]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	4770      	bx	lr

080022ec <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
 80022ec:	b510      	push	{r4, lr}
 80022ee:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
 80022f0:	f7ff ffd6 	bl	80022a0 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
 80022f4:	4603      	mov	r3, r0
 80022f6:	b108      	cbz	r0, 80022fc <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <os_sanity_check_register+0x20>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	6122      	str	r2, [r4, #16]
 8002302:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
 8002304:	f7ff ffdc 	bl	80022c0 <os_sanity_check_list_unlock>
 8002308:	4603      	mov	r3, r0
err:
 800230a:	e7f5      	b.n	80022f8 <os_sanity_check_register+0xc>
 800230c:	200021e0 	.word	0x200021e0

08002310 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
 8002310:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
 8002312:	f7ff ffc5 	bl	80022a0 <os_sanity_check_list_lock>
    if (rc != 0) {
 8002316:	b910      	cbnz	r0, 800231e <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 8002318:	4b17      	ldr	r3, [pc, #92]	; (8002378 <os_sanity_run+0x68>)
 800231a:	681c      	ldr	r4, [r3, #0]
 800231c:	e00e      	b.n	800233c <os_sanity_run+0x2c>
        assert(0);
 800231e:	2300      	movs	r3, #0
 8002320:	461a      	mov	r2, r3
 8002322:	4619      	mov	r1, r3
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fa67 	bl	80017f8 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
 800232a:	f000 fa3f 	bl	80027ac <os_time_get>
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	6862      	ldr	r2, [r4, #4]
 8002332:	4413      	add	r3, r2
 8002334:	1ac3      	subs	r3, r0, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	dc0d      	bgt.n	8002356 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 800233a:	6924      	ldr	r4, [r4, #16]
 800233c:	b18c      	cbz	r4, 8002362 <os_sanity_run+0x52>
        if (sc->sc_func) {
 800233e:	68a3      	ldr	r3, [r4, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f2      	beq.n	800232a <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
 8002344:	68e1      	ldr	r1, [r4, #12]
 8002346:	4620      	mov	r0, r4
 8002348:	4798      	blx	r3
            if (rc == OS_OK) {
 800234a:	2800      	cmp	r0, #0
 800234c:	d1ed      	bne.n	800232a <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
 800234e:	f000 fa2d 	bl	80027ac <os_time_get>
 8002352:	6020      	str	r0, [r4, #0]
                continue;
 8002354:	e7f1      	b.n	800233a <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
 8002356:	2300      	movs	r3, #0
 8002358:	461a      	mov	r2, r3
 800235a:	4619      	mov	r1, r3
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fa4b 	bl	80017f8 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
 8002362:	f7ff ffad 	bl	80022c0 <os_sanity_check_list_unlock>
    if (rc != 0) {
 8002366:	b900      	cbnz	r0, 800236a <os_sanity_run+0x5a>
        assert(0);
    }
}
 8002368:	bd10      	pop	{r4, pc}
        assert(0);
 800236a:	2300      	movs	r3, #0
 800236c:	461a      	mov	r2, r3
 800236e:	4619      	mov	r1, r3
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fa41 	bl	80017f8 <__assert_func>
 8002376:	bf00      	nop
 8002378:	200021e0 	.word	0x200021e0

0800237c <os_sanity_init>:

int
os_sanity_init(void)
{
 800237c:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
 800237e:	4802      	ldr	r0, [pc, #8]	; (8002388 <os_sanity_init+0xc>)
 8002380:	f7ff feb8 	bl	80020f4 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
 8002384:	bd08      	pop	{r3, pc}
 8002386:	bf00      	nop
 8002388:	20003570 	.word	0x20003570

0800238c <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
 800238c:	7b03      	ldrb	r3, [r0, #12]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d001      	beq.n	8002396 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
 8002392:	2002      	movs	r0, #2
}
 8002394:	4770      	bx	lr
{
 8002396:	b510      	push	{r4, lr}
 8002398:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
 800239a:	f000 fa6f 	bl	800287c <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <os_sched_insert+0x50>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	b12b      	cbz	r3, 80023b0 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
 80023a4:	7ae1      	ldrb	r1, [r4, #11]
 80023a6:	7ada      	ldrb	r2, [r3, #11]
 80023a8:	4291      	cmp	r1, r2
 80023aa:	d301      	bcc.n	80023b0 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	e7f8      	b.n	80023a2 <os_sched_insert+0x16>
    if (entry) {
 80023b0:	b153      	cbz	r3, 80023c8 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
 80023b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023b4:	64a2      	str	r2, [r4, #72]	; 0x48
 80023b6:	6463      	str	r3, [r4, #68]	; 0x44
 80023b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023ba:	6014      	str	r4, [r2, #0]
 80023bc:	3444      	adds	r4, #68	; 0x44
 80023be:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
 80023c0:	f000 fa62 	bl	8002888 <os_arch_restore_sr>
    return (0);
 80023c4:	2000      	movs	r0, #0
}
 80023c6:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
 80023c8:	2300      	movs	r3, #0
 80023ca:	6463      	str	r3, [r4, #68]	; 0x44
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <os_sched_insert+0x50>)
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	64a2      	str	r2, [r4, #72]	; 0x48
 80023d2:	6014      	str	r4, [r2, #0]
 80023d4:	3444      	adds	r4, #68	; 0x44
 80023d6:	605c      	str	r4, [r3, #4]
 80023d8:	e7f2      	b.n	80023c0 <os_sched_insert+0x34>
 80023da:	bf00      	nop
 80023dc:	2000011c 	.word	0x2000011c

080023e0 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
 80023e0:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
 80023e2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80023e4:	3301      	adds	r3, #1
 80023e6:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <os_sched_ctx_sw_hook+0x24>)
 80023ea:	681c      	ldr	r4, [r3, #0]
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <os_sched_ctx_sw_hook+0x28>)
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	4906      	ldr	r1, [pc, #24]	; (800240c <os_sched_ctx_sw_hook+0x2c>)
 80023f2:	680b      	ldr	r3, [r1, #0]
 80023f4:	1ac2      	subs	r2, r0, r3
 80023f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023f8:	4413      	add	r3, r2
 80023fa:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
 80023fc:	6008      	str	r0, [r1, #0]
}
 80023fe:	bc10      	pop	{r4}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	2000357c 	.word	0x2000357c
 8002408:	20003590 	.word	0x20003590
 800240c:	20003580 	.word	0x20003580

08002410 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
 8002410:	4b01      	ldr	r3, [pc, #4]	; (8002418 <os_sched_get_current_task+0x8>)
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	2000357c 	.word	0x2000357c

0800241c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
 800241c:	4b01      	ldr	r3, [pc, #4]	; (8002424 <os_sched_set_current_task+0x8>)
 800241e:	6018      	str	r0, [r3, #0]
}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	2000357c 	.word	0x2000357c

08002428 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
 8002428:	b538      	push	{r3, r4, r5, lr}
 800242a:	4604      	mov	r4, r0
 800242c:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 800242e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002430:	b1d3      	cbz	r3, 8002468 <os_sched_sleep+0x40>
 8002432:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002434:	649a      	str	r2, [r3, #72]	; 0x48
 8002436:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002438:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800243a:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
 800243c:	2302      	movs	r3, #2
 800243e:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
 8002440:	f000 f9b4 	bl	80027ac <os_time_get>
 8002444:	4428      	add	r0, r5
 8002446:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
 8002448:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800244c:	d010      	beq.n	8002470 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 800244e:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <os_sched_sleep+0x88>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	b1d3      	cbz	r3, 800248a <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 8002454:	7b5a      	ldrb	r2, [r3, #13]
 8002456:	f012 0f01 	tst.w	r2, #1
 800245a:	d116      	bne.n	800248a <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
 800245c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800245e:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 8002460:	2a00      	cmp	r2, #0
 8002462:	dc12      	bgt.n	800248a <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	e7f4      	b.n	8002452 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8002468:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <os_sched_sleep+0x8c>)
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	e7e2      	b.n	8002436 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
 8002470:	7b63      	ldrb	r3, [r4, #13]
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 8002478:	2300      	movs	r3, #0
 800247a:	6463      	str	r3, [r4, #68]	; 0x44
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <os_sched_sleep+0x88>)
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	64a2      	str	r2, [r4, #72]	; 0x48
 8002482:	6014      	str	r4, [r2, #0]
 8002484:	3444      	adds	r4, #68	; 0x44
 8002486:	605c      	str	r4, [r3, #4]
 8002488:	e007      	b.n	800249a <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
 800248a:	b143      	cbz	r3, 800249e <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
 800248c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800248e:	64a2      	str	r2, [r4, #72]	; 0x48
 8002490:	6463      	str	r3, [r4, #68]	; 0x44
 8002492:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002494:	6014      	str	r4, [r2, #0]
 8002496:	3444      	adds	r4, #68	; 0x44
 8002498:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
 800249a:	2000      	movs	r0, #0
 800249c:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 800249e:	2300      	movs	r3, #0
 80024a0:	6463      	str	r3, [r4, #68]	; 0x44
 80024a2:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <os_sched_sleep+0x88>)
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	64a2      	str	r2, [r4, #72]	; 0x48
 80024a8:	6014      	str	r4, [r2, #0]
 80024aa:	3444      	adds	r4, #68	; 0x44
 80024ac:	605c      	str	r4, [r3, #4]
 80024ae:	e7f4      	b.n	800249a <os_sched_sleep+0x72>
 80024b0:	20000124 	.word	0x20000124
 80024b4:	2000011c 	.word	0x2000011c

080024b8 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
 80024b8:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
 80024ba:	7b03      	ldrb	r3, [r0, #12]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d108      	bne.n	80024d2 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
 80024c0:	69c3      	ldr	r3, [r0, #28]
 80024c2:	b1db      	cbz	r3, 80024fc <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	b152      	cbz	r2, 80024de <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 80024c8:	4282      	cmp	r2, r0
 80024ca:	d10f      	bne.n	80024ec <os_sched_wakeup+0x34>
 80024cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e011      	b.n	80024f6 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
 80024d2:	2300      	movs	r3, #0
 80024d4:	461a      	mov	r2, r3
 80024d6:	4619      	mov	r1, r3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff f98d 	bl	80017f8 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
 80024de:	2300      	movs	r3, #0
 80024e0:	461a      	mov	r2, r3
 80024e2:	4619      	mov	r1, r3
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff f987 	bl	80017f8 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 80024ea:	461a      	mov	r2, r3
 80024ec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80024ee:	4283      	cmp	r3, r0
 80024f0:	d1fb      	bne.n	80024ea <os_sched_wakeup+0x32>
 80024f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f4:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
 80024fa:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
 80024fc:	2301      	movs	r3, #1
 80024fe:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
 8002504:	7b43      	ldrb	r3, [r0, #13]
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 800250c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800250e:	b143      	cbz	r3, 8002522 <os_sched_wakeup+0x6a>
 8002510:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002512:	649a      	str	r2, [r3, #72]	; 0x48
 8002514:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002516:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002518:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
 800251a:	f7ff ff37 	bl	800238c <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
 800251e:	2000      	movs	r0, #0
 8002520:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 8002522:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002524:	4b01      	ldr	r3, [pc, #4]	; (800252c <os_sched_wakeup+0x74>)
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	e7f4      	b.n	8002514 <os_sched_wakeup+0x5c>
 800252a:	bf00      	nop
 800252c:	20000124 	.word	0x20000124

08002530 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
 8002530:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
 8002532:	f000 f93b 	bl	80027ac <os_time_get>
 8002536:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
 8002538:	f000 f9a0 	bl	800287c <os_arch_save_sr>
 800253c:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <os_sched_os_timer_exp+0x38>)
 8002540:	6818      	ldr	r0, [r3, #0]
    while (t) {
 8002542:	b160      	cbz	r0, 800255e <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
 8002544:	7b43      	ldrb	r3, [r0, #13]
 8002546:	f013 0f01 	tst.w	r3, #1
 800254a:	d108      	bne.n	800255e <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
 800254c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
 800254e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002550:	1aeb      	subs	r3, r5, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	db03      	blt.n	800255e <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
 8002556:	f7ff ffaf 	bl	80024b8 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
 800255a:	4620      	mov	r0, r4
 800255c:	e7f1      	b.n	8002542 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
 800255e:	4630      	mov	r0, r6
 8002560:	f000 f992 	bl	8002888 <os_arch_restore_sr>
}
 8002564:	bd70      	pop	{r4, r5, r6, pc}
 8002566:	bf00      	nop
 8002568:	20000124 	.word	0x20000124

0800256c <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
 800256c:	b510      	push	{r4, lr}
 800256e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
 8002570:	f000 f98d 	bl	800288e <os_arch_in_critical>
 8002574:	b150      	cbz	r0, 800258c <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <os_sched_wakeup_ticks+0x3c>)
 8002578:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
 800257a:	b17b      	cbz	r3, 800259c <os_sched_wakeup_ticks+0x30>
 800257c:	7b5a      	ldrb	r2, [r3, #13]
 800257e:	f012 0f01 	tst.w	r2, #1
 8002582:	d10e      	bne.n	80025a2 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
 8002584:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002586:	1b00      	subs	r0, r0, r4
 8002588:	d406      	bmi.n	8002598 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
 800258a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
 800258c:	2300      	movs	r3, #0
 800258e:	461a      	mov	r2, r3
 8002590:	4619      	mov	r1, r3
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff f930 	bl	80017f8 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
 8002598:	2000      	movs	r0, #0
 800259a:	e7f6      	b.n	800258a <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
 800259c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025a0:	e7f3      	b.n	800258a <os_sched_wakeup_ticks+0x1e>
 80025a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
 80025a6:	e7f0      	b.n	800258a <os_sched_wakeup_ticks+0x1e>
 80025a8:	20000124 	.word	0x20000124

080025ac <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
 80025ac:	4b01      	ldr	r3, [pc, #4]	; (80025b4 <os_sched_next_task+0x8>)
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	2000011c 	.word	0x2000011c

080025b8 <os_sched>:
{
 80025b8:	b538      	push	{r3, r4, r5, lr}
 80025ba:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
 80025bc:	f000 f95e 	bl	800287c <os_arch_save_sr>
 80025c0:	4605      	mov	r5, r0
    if (!next_t) {
 80025c2:	b134      	cbz	r4, 80025d2 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
 80025c4:	4620      	mov	r0, r4
 80025c6:	f000 f94f 	bl	8002868 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
 80025ca:	4628      	mov	r0, r5
 80025cc:	f000 f95c 	bl	8002888 <os_arch_restore_sr>
}
 80025d0:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
 80025d2:	f7ff ffeb 	bl	80025ac <os_sched_next_task>
 80025d6:	4604      	mov	r4, r0
 80025d8:	e7f4      	b.n	80025c4 <os_sched+0xc>
	...

080025dc <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
 80025dc:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
 80025de:	7b03      	ldrb	r3, [r0, #12]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d000      	beq.n	80025e6 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
 80025e4:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 80025e6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80025e8:	b13b      	cbz	r3, 80025fa <os_sched_resort+0x1e>
 80025ea:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80025ec:	649a      	str	r2, [r3, #72]	; 0x48
 80025ee:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80025f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80025f2:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
 80025f4:	f7ff feca 	bl	800238c <os_sched_insert>
}
 80025f8:	e7f4      	b.n	80025e4 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 80025fa:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80025fc:	4b01      	ldr	r3, [pc, #4]	; (8002604 <os_sched_resort+0x28>)
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	e7f5      	b.n	80025ee <os_sched_resort+0x12>
 8002602:	bf00      	nop
 8002604:	2000011c 	.word	0x2000011c

08002608 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
 8002608:	2300      	movs	r3, #0
 800260a:	e003      	b.n	8002614 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
 800260c:	4a03      	ldr	r2, [pc, #12]	; (800261c <_clear_stack+0x14>)
 800260e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
 8002612:	3301      	adds	r3, #1
 8002614:	428b      	cmp	r3, r1
 8002616:	dbf9      	blt.n	800260c <_clear_stack+0x4>
    }
}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	deadbeef 	.word	0xdeadbeef

08002620 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
 8002620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002624:	4604      	mov	r4, r0
 8002626:	460f      	mov	r7, r1
 8002628:	4690      	mov	r8, r2
 800262a:	461d      	mov	r5, r3
 800262c:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
 8002630:	2250      	movs	r2, #80	; 0x50
 8002632:	2100      	movs	r1, #0
 8002634:	f000 fd51 	bl	80030da <memset>

    t->t_func = func;
 8002638:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
 800263c:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
 800263e:	f000 f91d 	bl	800287c <os_arch_save_sr>
    rc = g_task_id;
 8002642:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <os_task_init+0xd0>)
 8002644:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
 8002646:	1c6a      	adds	r2, r5, #1
 8002648:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
 800264a:	f000 f91d 	bl	8002888 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
 800264e:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
 8002650:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002654:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
 8002656:	2301      	movs	r3, #1
 8002658:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
 800265a:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
 8002660:	f104 0720 	add.w	r7, r4, #32
 8002664:	4638      	mov	r0, r7
 8002666:	f7ff fe39 	bl	80022dc <os_sanity_check_init>
    if (rc != OS_OK) {
 800266a:	4605      	mov	r5, r0
 800266c:	2800      	cmp	r0, #0
 800266e:	d132      	bne.n	80026d6 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
 8002670:	9b07      	ldr	r3, [sp, #28]
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002676:	d005      	beq.n	8002684 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
 8002678:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
 800267a:	4638      	mov	r0, r7
 800267c:	f7ff fe36 	bl	80022ec <os_sanity_check_register>
        if (rc != OS_OK) {
 8002680:	4605      	mov	r5, r0
 8002682:	bb40      	cbnz	r0, 80026d6 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
 8002684:	4631      	mov	r1, r6
 8002686:	9808      	ldr	r0, [sp, #32]
 8002688:	f7ff ffbe 	bl	8002608 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
 800268c:	9b08      	ldr	r3, [sp, #32]
 800268e:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 8002692:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
 8002694:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
 8002696:	4632      	mov	r2, r6
 8002698:	4620      	mov	r0, r4
 800269a:	f000 f8fd 	bl	8002898 <os_arch_task_stack_init>
 800269e:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <os_task_init+0xd4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b15b      	cbz	r3, 80026be <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
 80026a6:	7ae1      	ldrb	r1, [r4, #11]
 80026a8:	7ada      	ldrb	r2, [r3, #11]
 80026aa:	4291      	cmp	r1, r2
 80026ac:	d001      	beq.n	80026b2 <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	e7f8      	b.n	80026a4 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
 80026b2:	2300      	movs	r3, #0
 80026b4:	461a      	mov	r2, r3
 80026b6:	4619      	mov	r1, r3
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff f89d 	bl	80017f8 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
 80026be:	6423      	str	r3, [r4, #64]	; 0x40
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <os_task_init+0xd4>)
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	6014      	str	r4, [r2, #0]
 80026c6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80026ca:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
 80026cc:	4620      	mov	r0, r4
 80026ce:	f7ff fe5d 	bl	800238c <os_sched_insert>
 80026d2:	4605      	mov	r5, r0
    if (rc != OS_OK) {
 80026d4:	b110      	cbz	r0, 80026dc <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
 80026d6:	4628      	mov	r0, r5
 80026d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
 80026dc:	f7ff f94a 	bl	8001974 <os_started>
 80026e0:	b908      	cbnz	r0, 80026e6 <os_task_init+0xc6>
    return (0);
 80026e2:	4605      	mov	r5, r0
 80026e4:	e7f7      	b.n	80026d6 <os_task_init+0xb6>
        os_sched(NULL);
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7ff ff66 	bl	80025b8 <os_sched>
 80026ec:	e7f3      	b.n	80026d6 <os_task_init+0xb6>
 80026ee:	bf00      	nop
 80026f0:	2000358c 	.word	0x2000358c
 80026f4:	20003584 	.word	0x20003584

080026f8 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
 80026f8:	e92d 0870 	stmdb	sp!, {r4, r5, r6, fp}
 80026fc:	460e      	mov	r6, r1
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
 80026fe:	4c12      	ldr	r4, [pc, #72]	; (8002748 <os_deltatime+0x50>)
 8002700:	fba4 3400 	umull	r3, r4, r4, r0
 8002704:	09a4      	lsrs	r4, r4, #6
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
 8002706:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800270a:	fb05 0314 	mls	r3, r5, r4, r0
    os_timeradd(base, &tvdelta, result);
 800270e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002712:	eb10 0b04 	adds.w	fp, r0, r4
 8002716:	f141 0c00 	adc.w	ip, r1, #0
 800271a:	e9c2 bc00 	strd	fp, ip, [r2]
 800271e:	68b4      	ldr	r4, [r6, #8]
 8002720:	fb05 4303 	mla	r3, r5, r3, r4
 8002724:	6093      	str	r3, [r2, #8]
 8002726:	4c09      	ldr	r4, [pc, #36]	; (800274c <os_deltatime+0x54>)
 8002728:	42a3      	cmp	r3, r4
 800272a:	dd0a      	ble.n	8002742 <os_deltatime+0x4a>
 800272c:	f11b 0001 	adds.w	r0, fp, #1
 8002730:	f14c 0100 	adc.w	r1, ip, #0
 8002734:	e9c2 0100 	strd	r0, r1, [r2]
 8002738:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 800273c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8002740:	6093      	str	r3, [r2, #8]
}
 8002742:	e8bd 0870 	ldmia.w	sp!, {r4, r5, r6, fp}
 8002746:	4770      	bx	lr
 8002748:	10624dd3 	.word	0x10624dd3
 800274c:	000f423f 	.word	0x000f423f

08002750 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
 8002750:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
 8002752:	1e04      	subs	r4, r0, #0
 8002754:	db0d      	blt.n	8002772 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
 8002756:	f000 f891 	bl	800287c <os_arch_save_sr>
 800275a:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
 800275c:	4a11      	ldr	r2, [pc, #68]	; (80027a4 <os_time_tick+0x54>)
 800275e:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
 8002760:	18e0      	adds	r0, r4, r3
 8002762:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
 8002764:	ea90 0f03 	teq	r0, r3
 8002768:	d409      	bmi.n	800277e <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
 800276a:	4628      	mov	r0, r5
 800276c:	f000 f88c 	bl	8002888 <os_arch_restore_sr>
}
 8002770:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
 8002772:	2300      	movs	r3, #0
 8002774:	461a      	mov	r2, r3
 8002776:	4619      	mov	r1, r3
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff f83d 	bl	80017f8 <__assert_func>
        delta = g_os_time - basetod.ostime;
 800277e:	4e0a      	ldr	r6, [pc, #40]	; (80027a8 <os_time_tick+0x58>)
 8002780:	4631      	mov	r1, r6
 8002782:	f851 4b08 	ldr.w	r4, [r1], #8
 8002786:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
 8002788:	460a      	mov	r2, r1
 800278a:	4620      	mov	r0, r4
 800278c:	f7ff ffb4 	bl	80026f8 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
 8002790:	f106 0118 	add.w	r1, r6, #24
 8002794:	460a      	mov	r2, r1
 8002796:	4620      	mov	r0, r4
 8002798:	f7ff ffae 	bl	80026f8 <os_deltatime>
        basetod.ostime = g_os_time;
 800279c:	4b01      	ldr	r3, [pc, #4]	; (80027a4 <os_time_tick+0x54>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6033      	str	r3, [r6, #0]
 80027a2:	e7e2      	b.n	800276a <os_time_tick+0x1a>
 80027a4:	20003590 	.word	0x20003590
 80027a8:	200021e8 	.word	0x200021e8

080027ac <os_time_get>:
}
 80027ac:	4b01      	ldr	r3, [pc, #4]	; (80027b4 <os_time_get+0x8>)
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20003590 	.word	0x20003590

080027b8 <os_time_advance>:

void
os_time_advance(int ticks)
{
 80027b8:	b510      	push	{r4, lr}
    assert(ticks >= 0);
 80027ba:	1e04      	subs	r4, r0, #0
 80027bc:	db09      	blt.n	80027d2 <os_time_advance+0x1a>

    if (ticks > 0) {
 80027be:	2c00      	cmp	r4, #0
 80027c0:	dd06      	ble.n	80027d0 <os_time_advance+0x18>
        if (!os_started()) {
 80027c2:	f7ff f8d7 	bl	8001974 <os_started>
 80027c6:	b950      	cbnz	r0, 80027de <os_time_advance+0x26>
            g_os_time += ticks;
 80027c8:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <os_time_advance+0x3c>)
 80027ca:	6813      	ldr	r3, [r2, #0]
 80027cc:	441c      	add	r4, r3
 80027ce:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
 80027d0:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
 80027d2:	2300      	movs	r3, #0
 80027d4:	461a      	mov	r2, r3
 80027d6:	4619      	mov	r1, r3
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff f80d 	bl	80017f8 <__assert_func>
            os_time_tick(ticks);
 80027de:	4620      	mov	r0, r4
 80027e0:	f7ff ffb6 	bl	8002750 <os_time_tick>
            os_callout_tick();
 80027e4:	f7ff f9ee 	bl	8001bc4 <os_callout_tick>
            os_sched_os_timer_exp();
 80027e8:	f7ff fea2 	bl	8002530 <os_sched_os_timer_exp>
            os_sched(NULL);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7ff fee3 	bl	80025b8 <os_sched>
}
 80027f2:	e7ed      	b.n	80027d0 <os_time_advance+0x18>
 80027f4:	20003590 	.word	0x20003590

080027f8 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
 80027f8:	b900      	cbnz	r0, 80027fc <os_time_delay+0x4>
 80027fa:	4770      	bx	lr
{
 80027fc:	b538      	push	{r3, r4, r5, lr}
 80027fe:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
 8002800:	f000 f83c 	bl	800287c <os_arch_save_sr>
 8002804:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
 8002806:	f7ff fe03 	bl	8002410 <os_sched_get_current_task>
 800280a:	4621      	mov	r1, r4
 800280c:	f7ff fe0c 	bl	8002428 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
 8002810:	4628      	mov	r0, r5
 8002812:	f000 f839 	bl	8002888 <os_arch_restore_sr>
        os_sched(NULL);
 8002816:	2000      	movs	r0, #0
 8002818:	f7ff fece 	bl	80025b8 <os_sched>
    }
}
 800281c:	bd38      	pop	{r3, r4, r5, pc}
	...

08002820 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	4605      	mov	r5, r0
 8002824:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
 8002826:	f000 f829 	bl	800287c <os_arch_save_sr>
 800282a:	4606      	mov	r6, r0
    if (tv != NULL) {
 800282c:	b145      	cbz	r5, 8002840 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
 800282e:	f7ff ffbd 	bl	80027ac <os_time_get>
 8002832:	4908      	ldr	r1, [pc, #32]	; (8002854 <os_gettimeofday+0x34>)
 8002834:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
 8002838:	462a      	mov	r2, r5
 800283a:	1ac0      	subs	r0, r0, r3
 800283c:	f7ff ff5c 	bl	80026f8 <os_deltatime>
    }

    if (tz != NULL) {
 8002840:	b114      	cbz	r4, 8002848 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
 8002842:	4b04      	ldr	r3, [pc, #16]	; (8002854 <os_gettimeofday+0x34>)
 8002844:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002846:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
 8002848:	4630      	mov	r0, r6
 800284a:	f000 f81d 	bl	8002888 <os_arch_restore_sr>

    return (0);
}
 800284e:	2000      	movs	r0, #0
 8002850:	bd70      	pop	{r4, r5, r6, pc}
 8002852:	bf00      	nop
 8002854:	200021e8 	.word	0x200021e8

08002858 <os_time_ms_to_ticks>:
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    uint64_t ticks;

#if OS_TICKS_PER_SEC == 1000
    *out_ticks = ms;
 8002858:	6008      	str	r0, [r1, #0]
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    return 0;
}
 800285a:	2000      	movs	r0, #0
 800285c:	4770      	bx	lr

0800285e <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
 800285e:	b508      	push	{r3, lr}
    os_time_advance(1);
 8002860:	2001      	movs	r0, #1
 8002862:	f7ff ffa9 	bl	80027b8 <os_time_advance>
}
 8002866:	bd08      	pop	{r3, pc}

08002868 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
 8002868:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
 800286a:	f7ff fdb9 	bl	80023e0 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 800286e:	4b02      	ldr	r3, [pc, #8]	; (8002878 <os_arch_ctx_sw+0x10>)
 8002870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002874:	605a      	str	r2, [r3, #4]
}
 8002876:	bd08      	pop	{r3, pc}
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <os_arch_save_sr>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800287c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002880:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
 8002882:	f000 0001 	and.w	r0, r0, #1
 8002886:	4770      	bx	lr

08002888 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
 8002888:	b900      	cbnz	r0, 800288c <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
 800288a:	b662      	cpsie	i
        __enable_irq();
    }
}
 800288c:	4770      	bx	lr

0800288e <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800288e:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
 8002892:	f000 0001 	and.w	r0, r0, #1
 8002896:	4770      	bx	lr

08002898 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	4606      	mov	r6, r0
 800289c:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
 800289e:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
 80028a2:	2309      	movs	r3, #9
 80028a4:	e003      	b.n	80028ae <os_arch_task_stack_init+0x16>
        s[i] = 0;
 80028a6:	2200      	movs	r2, #0
 80028a8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
 80028ac:	3301      	adds	r3, #1
 80028ae:	2b0d      	cmp	r3, #13
 80028b0:	ddf9      	ble.n	80028a6 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
 80028b2:	4620      	mov	r0, r4
 80028b4:	f000 faaa 	bl	8002e0c <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
 80028b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028bc:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
 80028c0:	6973      	ldr	r3, [r6, #20]
 80028c2:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
 80028c6:	69b3      	ldr	r3, [r6, #24]
 80028c8:	f845 3c20 	str.w	r3, [r5, #-32]

    return (s);
}
 80028cc:	4620      	mov	r0, r4
 80028ce:	bd70      	pop	{r4, r5, r6, pc}

080028d0 <os_arch_init>:

void
os_arch_init(void)
{
 80028d0:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 80028d2:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <os_arch_init+0x14>)
 80028d4:	6953      	ldr	r3, [r2, #20]
 80028d6:	f043 0310 	orr.w	r3, r3, #16
 80028da:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
 80028dc:	f7ff f850 	bl	8001980 <os_init_idle_task>
}
 80028e0:	bd08      	pop	{r3, pc}
 80028e2:	bf00      	nop
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
 80028e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028ea:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
 80028ee:	b90c      	cbnz	r4, 80028f4 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
 80028f0:	2400      	movs	r4, #0
 80028f2:	e009      	b.n	8002908 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
 80028f4:	2007      	movs	r0, #7
 80028f6:	e038      	b.n	800296a <os_arch_os_init+0x82>
            NVIC->IP[i] = -1;
 80028f8:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
 80028fc:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8002900:	26ff      	movs	r6, #255	; 0xff
 8002902:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
 8002906:	3401      	adds	r4, #1
 8002908:	2cef      	cmp	r4, #239	; 0xef
 800290a:	d9f5      	bls.n	80028f8 <os_arch_os_init+0x10>
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800290c:	4c19      	ldr	r4, [pc, #100]	; (8002974 <os_arch_os_init+0x8c>)
 800290e:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8002910:	4e19      	ldr	r6, [pc, #100]	; (8002978 <os_arch_os_init+0x90>)
 8002912:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8002914:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8002916:	4e19      	ldr	r6, [pc, #100]	; (800297c <os_arch_os_init+0x94>)
 8002918:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800291a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800291c:	4e18      	ldr	r6, [pc, #96]	; (8002980 <os_arch_os_init+0x98>)
 800291e:	63ee      	str	r6, [r5, #60]	; 0x3c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8002920:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8002922:	4f18      	ldr	r7, [pc, #96]	; (8002984 <os_arch_os_init+0x9c>)
 8002924:	60af      	str	r7, [r5, #8]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8002926:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8002928:	60ef      	str	r7, [r5, #12]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800292a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800292c:	612f      	str	r7, [r5, #16]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800292e:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8002930:	616f      	str	r7, [r5, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8002932:	68a4      	ldr	r4, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8002934:	61a7      	str	r7, [r4, #24]
        NVIC_SetVector(NonMaskableInt_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(-13, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(MemoryManagement_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(BusFault_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(UsageFault_IRQn, (uint32_t)os_default_irq_asm);
        for (i = 0; i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
 8002936:	2400      	movs	r4, #0
 8002938:	e006      	b.n	8002948 <os_arch_os_init+0x60>
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
 800293a:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800293c:	4e0d      	ldr	r6, [pc, #52]	; (8002974 <os_arch_os_init+0x8c>)
 800293e:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8002940:	3510      	adds	r5, #16
 8002942:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
 8002946:	3401      	adds	r4, #1
 8002948:	2c2a      	cmp	r4, #42	; 0x2a
 800294a:	ddf6      	ble.n	800293a <os_arch_os_init+0x52>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	4c09      	ldr	r4, [pc, #36]	; (8002974 <os_arch_os_init+0x8c>)
 800294e:	25f0      	movs	r5, #240	; 0xf0
 8002950:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8002954:	2510      	movs	r5, #16
 8002956:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002958:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVC_IRQ_NUMBER, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
 800295c:	f014 0f01 	tst.w	r4, #1
 8002960:	d004      	beq.n	800296c <os_arch_os_init+0x84>
    SVC_Call(os_arch_init);
 8002962:	f8df c024 	ldr.w	ip, [pc, #36]	; 8002988 <os_arch_os_init+0xa0>
 8002966:	df00      	svc	0
        err = OS_OK;
 8002968:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
 800296a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
 800296c:	f7ff ffb0 	bl	80028d0 <os_arch_init>
        err = OS_OK;
 8002970:	2000      	movs	r0, #0
 8002972:	e7fa      	b.n	800296a <os_arch_os_init+0x82>
 8002974:	e000ed00 	.word	0xe000ed00
 8002978:	08002e13 	.word	0x08002e13
 800297c:	08002e59 	.word	0x08002e59
 8002980:	08002e83 	.word	0x08002e83
 8002984:	08002e8f 	.word	0x08002e8f
 8002988:	080028d1 	.word	0x080028d1

0800298c <os_arch_start>:

uint32_t
os_arch_start(void)
{
 800298c:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
 800298e:	f7ff fe0d 	bl	80025ac <os_sched_next_task>
 8002992:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
 8002994:	f7ff fd42 	bl	800241c <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800299c:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
 80029a0:	210e      	movs	r1, #14
 80029a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a6:	f006 fd89 	bl	80094bc <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
 80029aa:	4b04      	ldr	r3, [pc, #16]	; (80029bc <os_arch_start+0x30>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7ff ff59 	bl	8002868 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
 80029b6:	69a0      	ldr	r0, [r4, #24]
 80029b8:	bd10      	pop	{r4, pc}
 80029ba:	bf00      	nop
 80029bc:	2000355c 	.word	0x2000355c

080029c0 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
 80029c0:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
 80029c2:	4814      	ldr	r0, [pc, #80]	; (8002a14 <os_arch_os_start+0x54>)
 80029c4:	6800      	ldr	r0, [r0, #0]
 80029c6:	3804      	subs	r0, #4
 80029c8:	f000 fa16 	bl	8002df8 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029cc:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
 80029d0:	b9d4      	cbnz	r4, 8002a08 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80029d2:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
 80029d6:	f004 0403 	and.w	r4, r4, #3
 80029da:	2c03      	cmp	r4, #3
 80029dc:	d808      	bhi.n	80029f0 <os_arch_os_start+0x30>
 80029de:	e8df f004 	tbb	[pc, r4]
 80029e2:	1515      	.short	0x1515
 80029e4:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
 80029e6:	4c0c      	ldr	r4, [pc, #48]	; (8002a18 <os_arch_os_start+0x58>)
 80029e8:	6824      	ldr	r4, [r4, #0]
 80029ea:	f014 0f01 	tst.w	r4, #1
 80029ee:	d10f      	bne.n	8002a10 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
 80029f0:	f8df c028 	ldr.w	ip, [pc, #40]	; 8002a1c <os_arch_os_start+0x5c>
 80029f4:	df00      	svc	0
 80029f6:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
 80029f8:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
 80029fa:	4c07      	ldr	r4, [pc, #28]	; (8002a18 <os_arch_os_start+0x58>)
 80029fc:	6824      	ldr	r4, [r4, #0]
 80029fe:	f014 0f01 	tst.w	r4, #1
 8002a02:	d1f5      	bne.n	80029f0 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
 8002a04:	2008      	movs	r0, #8
 8002a06:	e7f7      	b.n	80029f8 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
 8002a08:	2007      	movs	r0, #7
 8002a0a:	e7f5      	b.n	80029f8 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
 8002a0c:	2008      	movs	r0, #8
 8002a0e:	e7f3      	b.n	80029f8 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
 8002a10:	2008      	movs	r0, #8
 8002a12:	e7f1      	b.n	80029f8 <os_arch_os_start+0x38>
 8002a14:	20003508 	.word	0x20003508
 8002a18:	20002218 	.word	0x20002218
 8002a1c:	0800298d 	.word	0x0800298d

08002a20 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
 8002a20:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
 8002a22:	2000      	movs	r0, #0
 8002a24:	6018      	str	r0, [r3, #0]
 8002a26:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
 8002a28:	6098      	str	r0, [r3, #8]
 8002a2a:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
 8002a2c:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
 8002a2e:	611a      	str	r2, [r3, #16]

    return (0);
}
 8002a30:	4770      	bx	lr

08002a32 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
 8002a32:	b538      	push	{r3, r4, r5, lr}
 8002a34:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
 8002a36:	f7ff ff21 	bl	800287c <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
 8002a3a:	682c      	ldr	r4, [r5, #0]
    if (mp) {
 8002a3c:	b114      	cbz	r4, 8002a44 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
 8002a3e:	6863      	ldr	r3, [r4, #4]
 8002a40:	602b      	str	r3, [r5, #0]
 8002a42:	b12b      	cbz	r3, 8002a50 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
 8002a44:	f7ff ff20 	bl	8002888 <os_arch_restore_sr>

    if (mp) {
 8002a48:	b124      	cbz	r4, 8002a54 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
 8002a4a:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
 8002a50:	606d      	str	r5, [r5, #4]
 8002a52:	e7f7      	b.n	8002a44 <os_mqueue_get+0x12>
        m = NULL;
 8002a54:	2000      	movs	r0, #0
    return (m);
 8002a56:	e7fa      	b.n	8002a4e <os_mqueue_get+0x1c>

08002a58 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
 8002a58:	3a10      	subs	r2, #16
 8002a5a:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
 8002a5c:	6041      	str	r1, [r0, #4]

    return (0);
}
 8002a5e:	2000      	movs	r0, #0
 8002a60:	4770      	bx	lr

08002a62 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
 8002a62:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
 8002a64:	8803      	ldrh	r3, [r0, #0]
 8002a66:	428b      	cmp	r3, r1
 8002a68:	d312      	bcc.n	8002a90 <os_mbuf_get+0x2e>
 8002a6a:	460d      	mov	r5, r1
 8002a6c:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
 8002a6e:	6840      	ldr	r0, [r0, #4]
 8002a70:	f7ff fa72 	bl	8001f58 <os_memblock_get>
    if (!om) {
 8002a74:	4603      	mov	r3, r0
 8002a76:	b148      	cbz	r0, 8002a8c <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
 8002a78:	2200      	movs	r2, #0
 8002a7a:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
 8002a7c:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
 8002a7e:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
 8002a80:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
 8002a82:	f100 0110 	add.w	r1, r0, #16
 8002a86:	4429      	add	r1, r5
 8002a88:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
 8002a8a:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
 8002a90:	2300      	movs	r3, #0
    return om;
 8002a92:	e7fb      	b.n	8002a8c <os_mbuf_get+0x2a>

08002a94 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
 8002a94:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
 8002a96:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
 8002a9a:	8803      	ldrh	r3, [r0, #0]
 8002a9c:	42ab      	cmp	r3, r5
 8002a9e:	d310      	bcc.n	8002ac2 <os_mbuf_get_pkthdr+0x2e>
 8002aa0:	2dff      	cmp	r5, #255	; 0xff
 8002aa2:	d810      	bhi.n	8002ac6 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	f7ff ffdc 	bl	8002a62 <os_mbuf_get>
    if (om) {
 8002aaa:	4603      	mov	r3, r0
 8002aac:	b138      	cbz	r0, 8002abe <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
 8002aae:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
 8002ab0:	6802      	ldr	r2, [r0, #0]
 8002ab2:	4415      	add	r5, r2
 8002ab4:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
 8002aba:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
 8002abc:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e7fb      	b.n	8002abe <os_mbuf_get_pkthdr+0x2a>
 8002ac6:	2300      	movs	r3, #0
    return om;
 8002ac8:	e7f9      	b.n	8002abe <os_mbuf_get_pkthdr+0x2a>

08002aca <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
 8002aca:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
 8002acc:	6883      	ldr	r3, [r0, #8]
 8002ace:	b123      	cbz	r3, 8002ada <os_mbuf_free+0x10>
 8002ad0:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
 8002ad2:	6858      	ldr	r0, [r3, #4]
 8002ad4:	f7ff fa68 	bl	8001fa8 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
 8002ad8:	bd08      	pop	{r3, pc}
    rc = 0;
 8002ada:	2000      	movs	r0, #0
    return (rc);
 8002adc:	e7fc      	b.n	8002ad8 <os_mbuf_free+0xe>

08002ade <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
 8002ade:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
 8002ae0:	b160      	cbz	r0, 8002afc <os_mbuf_free_chain+0x1e>
{
 8002ae2:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
 8002ae4:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ffef 	bl	8002aca <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
 8002aec:	4623      	mov	r3, r4
        if (rc != 0) {
 8002aee:	4602      	mov	r2, r0
 8002af0:	b910      	cbnz	r0, 8002af8 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
 8002af2:	2c00      	cmp	r4, #0
 8002af4:	d1f6      	bne.n	8002ae4 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
 8002af6:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
 8002af8:	4610      	mov	r0, r2
 8002afa:	bd10      	pop	{r4, pc}
    rc = 0;
 8002afc:	2200      	movs	r2, #0
}
 8002afe:	4610      	mov	r0, r2
 8002b00:	4770      	bx	lr

08002b02 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
 8002b02:	2300      	movs	r3, #0
    while (om != NULL) {
 8002b04:	e003      	b.n	8002b0e <os_mbuf_len+0xc>
        len += om->om_len;
 8002b06:	88c2      	ldrh	r2, [r0, #6]
 8002b08:	4413      	add	r3, r2
 8002b0a:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
 8002b0c:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d1f9      	bne.n	8002b06 <os_mbuf_len+0x4>
    }

    return len;
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	4770      	bx	lr

08002b16 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
 8002b16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	d04e      	beq.n	8002bbc <os_mbuf_append+0xa6>
 8002b1e:	460f      	mov	r7, r1
 8002b20:	4691      	mov	r9, r2
 8002b22:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
 8002b24:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
 8002b28:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
 8002b2a:	e000      	b.n	8002b2e <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
 8002b2c:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
 8002b2e:	68eb      	ldr	r3, [r5, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1fb      	bne.n	8002b2c <os_mbuf_append+0x16>
    }

    remainder = len;
 8002b34:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
 8002b36:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 8002b38:	f105 0410 	add.w	r4, r5, #16
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	441c      	add	r4, r3
      (om->om_data + om->om_len);
 8002b40:	6828      	ldr	r0, [r5, #0]
 8002b42:	88eb      	ldrh	r3, [r5, #6]
 8002b44:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 8002b46:	1a24      	subs	r4, r4, r0
 8002b48:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
 8002b4a:	b164      	cbz	r4, 8002b66 <os_mbuf_append+0x50>
        if (space > remainder) {
 8002b4c:	454c      	cmp	r4, r9
 8002b4e:	dd00      	ble.n	8002b52 <os_mbuf_append+0x3c>
            space = remainder;
 8002b50:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
 8002b52:	4622      	mov	r2, r4
 8002b54:	4639      	mov	r1, r7
 8002b56:	f000 fab3 	bl	80030c0 <memcpy>

        last->om_len += space;
 8002b5a:	88eb      	ldrh	r3, [r5, #6]
 8002b5c:	4423      	add	r3, r4
 8002b5e:	80eb      	strh	r3, [r5, #6]
        data += space;
 8002b60:	4427      	add	r7, r4
        remainder -= space;
 8002b62:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
 8002b66:	2e00      	cmp	r6, #0
 8002b68:	dd16      	ble.n	8002b98 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4640      	mov	r0, r8
 8002b6e:	f7ff ff78 	bl	8002a62 <os_mbuf_get>
        if (!new) {
 8002b72:	4604      	mov	r4, r0
 8002b74:	b180      	cbz	r0, 8002b98 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
 8002b76:	f8b8 2000 	ldrh.w	r2, [r8]
 8002b7a:	42b2      	cmp	r2, r6
 8002b7c:	bfa8      	it	ge
 8002b7e:	4632      	movge	r2, r6
 8002b80:	b292      	uxth	r2, r2
 8002b82:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
 8002b84:	4639      	mov	r1, r7
 8002b86:	6800      	ldr	r0, [r0, #0]
 8002b88:	f000 fa9a 	bl	80030c0 <memcpy>
        data += new->om_len;
 8002b8c:	88e3      	ldrh	r3, [r4, #6]
 8002b8e:	441f      	add	r7, r3
        remainder -= new->om_len;
 8002b90:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
 8002b92:	60ec      	str	r4, [r5, #12]
        last = new;
 8002b94:	4625      	mov	r5, r4
 8002b96:	e7e6      	b.n	8002b66 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
 8002b98:	f89a 3005 	ldrb.w	r3, [sl, #5]
 8002b9c:	2b07      	cmp	r3, #7
 8002b9e:	d908      	bls.n	8002bb2 <os_mbuf_append+0x9c>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
 8002ba0:	eba9 0906 	sub.w	r9, r9, r6
 8002ba4:	fa1f f989 	uxth.w	r9, r9
 8002ba8:	f8ba 3010 	ldrh.w	r3, [sl, #16]
 8002bac:	4499      	add	r9, r3
 8002bae:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
 8002bb2:	b106      	cbz	r6, 8002bb6 <os_mbuf_append+0xa0>
        rc = OS_ENOMEM;
 8002bb4:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
 8002bb6:	4630      	mov	r0, r6
 8002bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
 8002bbc:	2602      	movs	r6, #2
 8002bbe:	e7fa      	b.n	8002bb6 <os_mbuf_append+0xa0>

08002bc0 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
 8002bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc4:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
 8002bc6:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
 8002bca:	2700      	movs	r7, #0
    head = NULL;
 8002bcc:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
 8002bce:	e017      	b.n	8002c00 <os_mbuf_dup+0x40>
    startoff = 0;
 8002bd0:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
 8002bd8:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8002bda:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
 8002bdc:	b299      	uxth	r1, r3
 8002bde:	4640      	mov	r0, r8
 8002be0:	f7ff ff3f 	bl	8002a62 <os_mbuf_get>
 8002be4:	4605      	mov	r5, r0
 8002be6:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
 8002be8:	b188      	cbz	r0, 8002c0e <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
 8002bea:	7923      	ldrb	r3, [r4, #4]
 8002bec:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
 8002bee:	88e3      	ldrh	r3, [r4, #6]
 8002bf0:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
 8002bf2:	88e2      	ldrh	r2, [r4, #6]
 8002bf4:	6821      	ldr	r1, [r4, #0]
 8002bf6:	6828      	ldr	r0, [r5, #0]
 8002bf8:	f000 fa62 	bl	80030c0 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
 8002bfc:	68e4      	ldr	r4, [r4, #12]
 8002bfe:	462f      	mov	r7, r5
 8002c00:	b14c      	cbz	r4, 8002c16 <os_mbuf_dup+0x56>
        if (head) {
 8002c02:	b15e      	cbz	r6, 8002c1c <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
 8002c04:	7963      	ldrb	r3, [r4, #5]
 8002c06:	2b07      	cmp	r3, #7
 8002c08:	d9e2      	bls.n	8002bd0 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
 8002c0a:	b299      	uxth	r1, r3
 8002c0c:	e7e1      	b.n	8002bd2 <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
 8002c0e:	4630      	mov	r0, r6
 8002c10:	f7ff ff65 	bl	8002ade <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
 8002c14:	462e      	mov	r6, r5
}
 8002c16:	4630      	mov	r0, r6
 8002c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
 8002c1c:	7963      	ldrb	r3, [r4, #5]
 8002c1e:	2b07      	cmp	r3, #7
 8002c20:	d911      	bls.n	8002c46 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
 8002c22:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8002c24:	4623      	mov	r3, r4
 8002c26:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
 8002c2a:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8002c2c:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
 8002c2e:	b299      	uxth	r1, r3
 8002c30:	4640      	mov	r0, r8
 8002c32:	f7ff ff16 	bl	8002a62 <os_mbuf_get>
            if (!head) {
 8002c36:	4606      	mov	r6, r0
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d0ec      	beq.n	8002c16 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
 8002c3c:	7963      	ldrb	r3, [r4, #5]
 8002c3e:	2b07      	cmp	r3, #7
 8002c40:	d803      	bhi.n	8002c4a <os_mbuf_dup+0x8a>
            copy = head;
 8002c42:	4605      	mov	r5, r0
 8002c44:	e7d1      	b.n	8002bea <os_mbuf_dup+0x2a>
    startoff = 0;
 8002c46:	2100      	movs	r1, #0
 8002c48:	e7ec      	b.n	8002c24 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
 8002c4a:	88c3      	ldrh	r3, [r0, #6]
 8002c4c:	b973      	cbnz	r3, 8002c6c <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
 8002c4e:	f100 0510 	add.w	r5, r0, #16
 8002c52:	7962      	ldrb	r2, [r4, #5]
 8002c54:	f104 0110 	add.w	r1, r4, #16
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f000 fa31 	bl	80030c0 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
 8002c5e:	7963      	ldrb	r3, [r4, #5]
 8002c60:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
 8002c62:	7963      	ldrb	r3, [r4, #5]
 8002c64:	441d      	add	r5, r3
 8002c66:	6035      	str	r5, [r6, #0]
            copy = head;
 8002c68:	4635      	mov	r5, r6
 8002c6a:	e7be      	b.n	8002bea <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4619      	mov	r1, r3
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fdc0 	bl	80017f8 <__assert_func>

08002c78 <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
 8002c78:	b170      	cbz	r0, 8002c98 <os_mbuf_off+0x20>
{
 8002c7a:	b410      	push	{r4}
 8002c7c:	e002      	b.n	8002c84 <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
 8002c7e:	1ac9      	subs	r1, r1, r3
        cur = next;
 8002c80:	4620      	mov	r0, r4
        if (cur == NULL) {
 8002c82:	b13c      	cbz	r4, 8002c94 <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
 8002c84:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
 8002c86:	88c3      	ldrh	r3, [r0, #6]
 8002c88:	428b      	cmp	r3, r1
 8002c8a:	dc02      	bgt.n	8002c92 <os_mbuf_off+0x1a>
 8002c8c:	d1f7      	bne.n	8002c7e <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
 8002c8e:	2c00      	cmp	r4, #0
 8002c90:	d1f5      	bne.n	8002c7e <os_mbuf_off+0x6>
            *out_off = off;
 8002c92:	8011      	strh	r1, [r2, #0]
    }
}
 8002c94:	bc10      	pop	{r4}
 8002c96:	4770      	bx	lr
 8002c98:	4770      	bx	lr

08002c9a <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
 8002c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
 8002ca0:	4616      	mov	r6, r2
 8002ca2:	b312      	cbz	r2, 8002cea <os_mbuf_copydata+0x50>
        return 0;
    }

    udst = dst;

    while (off > 0) {
 8002ca4:	2900      	cmp	r1, #0
 8002ca6:	dd06      	ble.n	8002cb6 <os_mbuf_copydata+0x1c>
        if (!m) {
 8002ca8:	b30c      	cbz	r4, 8002cee <os_mbuf_copydata+0x54>
            return (-1);
        }

        if (off < m->om_len)
 8002caa:	88e3      	ldrh	r3, [r4, #6]
 8002cac:	428b      	cmp	r3, r1
 8002cae:	dc02      	bgt.n	8002cb6 <os_mbuf_copydata+0x1c>
            break;
        off -= m->om_len;
 8002cb0:	1ac9      	subs	r1, r1, r3
        m = SLIST_NEXT(m, om_next);
 8002cb2:	68e4      	ldr	r4, [r4, #12]
 8002cb4:	e7f6      	b.n	8002ca4 <os_mbuf_copydata+0xa>
    }
    while (len > 0 && m != NULL) {
 8002cb6:	2e00      	cmp	r6, #0
 8002cb8:	dd10      	ble.n	8002cdc <os_mbuf_copydata+0x42>
 8002cba:	b17c      	cbz	r4, 8002cdc <os_mbuf_copydata+0x42>
        count = min(m->om_len - off, len);
 8002cbc:	88e5      	ldrh	r5, [r4, #6]
 8002cbe:	1a6d      	subs	r5, r5, r1
 8002cc0:	42b5      	cmp	r5, r6
 8002cc2:	bfa8      	it	ge
 8002cc4:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	462a      	mov	r2, r5
 8002cca:	4419      	add	r1, r3
 8002ccc:	4638      	mov	r0, r7
 8002cce:	f000 f9f7 	bl	80030c0 <memcpy>
        len -= count;
 8002cd2:	1b76      	subs	r6, r6, r5
        udst += count;
 8002cd4:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
 8002cd6:	68e4      	ldr	r4, [r4, #12]
        off = 0;
 8002cd8:	2100      	movs	r1, #0
 8002cda:	e7ec      	b.n	8002cb6 <os_mbuf_copydata+0x1c>
    }

    return (len > 0 ? -1 : 0);
 8002cdc:	2e00      	cmp	r6, #0
 8002cde:	dc01      	bgt.n	8002ce4 <os_mbuf_copydata+0x4a>
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	e003      	b.n	8002cec <os_mbuf_copydata+0x52>
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ce8:	e000      	b.n	8002cec <os_mbuf_copydata+0x52>
        return 0;
 8002cea:	4610      	mov	r0, r2
}
 8002cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return (-1);
 8002cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cf2:	e7fb      	b.n	8002cec <os_mbuf_copydata+0x52>

08002cf4 <os_mbuf_cmpf>:
    }
}

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
 8002cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cf8:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
 8002cfa:	1e1e      	subs	r6, r3, #0
 8002cfc:	dd2d      	ble.n	8002d5a <os_mbuf_cmpf+0x66>
 8002cfe:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
 8002d00:	f10d 0206 	add.w	r2, sp, #6
 8002d04:	f7ff ffb8 	bl	8002c78 <os_mbuf_off>
 8002d08:	4604      	mov	r4, r0
    data_off = 0;
 8002d0a:	f04f 0800 	mov.w	r8, #0
 8002d0e:	e009      	b.n	8002d24 <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
 8002d10:	4445      	add	r5, r8
 8002d12:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
 8002d16:	45b0      	cmp	r8, r6
 8002d18:	d027      	beq.n	8002d6a <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
 8002d1a:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
 8002d22:	b1bc      	cbz	r4, 8002d54 <os_mbuf_cmpf+0x60>
        if (om == NULL) {
 8002d24:	b1f4      	cbz	r4, 8002d64 <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
 8002d26:	eba6 0208 	sub.w	r2, r6, r8
 8002d2a:	88e3      	ldrh	r3, [r4, #6]
 8002d2c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002d30:	1a1b      	subs	r3, r3, r0
 8002d32:	429a      	cmp	r2, r3
 8002d34:	bfa8      	it	ge
 8002d36:	461a      	movge	r2, r3
 8002d38:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
 8002d3a:	2d00      	cmp	r5, #0
 8002d3c:	d0e8      	beq.n	8002d10 <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	462a      	mov	r2, r5
 8002d42:	eb07 0108 	add.w	r1, r7, r8
 8002d46:	4418      	add	r0, r3
 8002d48:	f000 f996 	bl	8003078 <memcmp>
            if (rc != 0) {
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	d0de      	beq.n	8002d10 <os_mbuf_cmpf+0x1c>
 8002d52:	e003      	b.n	8002d5c <os_mbuf_cmpf+0x68>
            return INT_MAX;
 8002d54:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002d58:	e000      	b.n	8002d5c <os_mbuf_cmpf+0x68>
        return 0;
 8002d5a:	2300      	movs	r3, #0
        }
    }
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	b002      	add	sp, #8
 8002d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
 8002d64:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002d68:	e7f8      	b.n	8002d5c <os_mbuf_cmpf+0x68>
            return 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e7f6      	b.n	8002d5c <os_mbuf_cmpf+0x68>

08002d6e <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
 8002d6e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d72:	b083      	sub	sp, #12
 8002d74:	4681      	mov	r9, r0
 8002d76:	4688      	mov	r8, r1
 8002d78:	4617      	mov	r7, r2
 8002d7a:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
 8002d7c:	f10d 0206 	add.w	r2, sp, #6
 8002d80:	f7ff ff7a 	bl	8002c78 <os_mbuf_off>
    if (cur == NULL) {
 8002d84:	4605      	mov	r5, r0
 8002d86:	b948      	cbnz	r0, 8002d9c <os_mbuf_copyinto+0x2e>
        return -1;
 8002d88:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002d8c:	e02d      	b.n	8002dea <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
 8002d8e:	b366      	cbz	r6, 8002dea <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
 8002d90:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
 8002d92:	b1ab      	cbz	r3, 8002dc0 <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
 8002d94:	2200      	movs	r2, #0
 8002d96:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
 8002d9a:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
 8002d9c:	88ec      	ldrh	r4, [r5, #6]
 8002d9e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002da2:	1ae4      	subs	r4, r4, r3
 8002da4:	42b4      	cmp	r4, r6
 8002da6:	bfa8      	it	ge
 8002da8:	4634      	movge	r4, r6
        if (copylen > 0) {
 8002daa:	2c00      	cmp	r4, #0
 8002dac:	ddef      	ble.n	8002d8e <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
 8002dae:	6828      	ldr	r0, [r5, #0]
 8002db0:	4622      	mov	r2, r4
 8002db2:	4639      	mov	r1, r7
 8002db4:	4418      	add	r0, r3
 8002db6:	f000 f983 	bl	80030c0 <memcpy>
            sptr += copylen;
 8002dba:	4427      	add	r7, r4
            len -= copylen;
 8002dbc:	1b36      	subs	r6, r6, r4
 8002dbe:	e7e6      	b.n	8002d8e <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
 8002dc0:	b2b2      	uxth	r2, r6
 8002dc2:	4639      	mov	r1, r7
 8002dc4:	4628      	mov	r0, r5
 8002dc6:	f7ff fea6 	bl	8002b16 <os_mbuf_append>
    if (rc != 0) {
 8002dca:	b968      	cbnz	r0, 8002de8 <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
 8002dcc:	f899 2005 	ldrb.w	r2, [r9, #5]
 8002dd0:	2a07      	cmp	r2, #7
 8002dd2:	d90e      	bls.n	8002df2 <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
 8002dd4:	4446      	add	r6, r8
 8002dd6:	f8b9 8010 	ldrh.w	r8, [r9, #16]
 8002dda:	4546      	cmp	r6, r8
 8002ddc:	bfb8      	it	lt
 8002dde:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
 8002de0:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
 8002de4:	4606      	mov	r6, r0
 8002de6:	e000      	b.n	8002dea <os_mbuf_copyinto+0x7c>
        return rc;
 8002de8:	4606      	mov	r6, r0
}
 8002dea:	4630      	mov	r0, r6
 8002dec:	b003      	add	sp, #12
 8002dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8002df2:	4606      	mov	r6, r0
 8002df4:	e7f9      	b.n	8002dea <os_mbuf_copyinto+0x7c>
	...

08002df8 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
 8002df8:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
 8002dfc:	482b      	ldr	r0, [pc, #172]	; (8002eac <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
 8002dfe:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
 8002e00:	3002      	adds	r0, #2
        MSR     CONTROL,R0
 8002e02:	f380 8814 	msr	CONTROL, r0
        ISB
 8002e06:	f3bf 8f6f 	isb	sy
        BX      LR
 8002e0a:	4770      	bx	lr

08002e0c <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
 8002e0c:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
 8002e10:	4770      	bx	lr

08002e12 <SVC_Handler>:
        .global SVC_Handler
SVC_Handler:
        .fnstart
        .cantunwind

        MRS     R0,PSP                  /* Read PSP */
 8002e12:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
 8002e16:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
 8002e18:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
 8002e1c:	b951      	cbnz	r1, 8002e34 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 8002e1e:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8002e22:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
 8002e24:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 8002e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
 8002e2a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
 8002e2e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        BX      LR                      /* Return from interrupt */
 8002e32:	4770      	bx	lr

08002e34 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8002e34:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
 8002e36:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
 8002e38:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
 8002e3a:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
 8002e3c:	d809      	bhi.n	8002e52 <SVC_Done>

        LDR     R4,=SVC_Table-4
 8002e3e:	4c1d      	ldr	r4, [pc, #116]	; (8002eb4 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
 8002e40:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 8002e44:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
 8002e48:	47a0      	blx	r4

        MRS     R12,PSP
 8002e4a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
 8002e4e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

08002e52 <SVC_Done>:
SVC_Done:
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 8002e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
 8002e56:	4770      	bx	lr

08002e58 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
 8002e5a:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
 8002e5c:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
 8002e5e:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
 8002e60:	4291      	cmp	r1, r2
        IT      EQ
 8002e62:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
 8002e64:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
 8002e66:	f3ef 8c09 	mrs	ip, PSP
        STMDB   R12!,{R4-R11}           /* Save Old context */
 8002e6a:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
 8002e6e:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
 8002e72:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
 8002e74:	f8d2 c000 	ldr.w	ip, [r2]
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
 8002e78:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        MSR     PSP,R12                 /* Write PSP */
 8002e7c:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
 8002e80:	4770      	bx	lr

08002e82 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8002e82:	b510      	push	{r4, lr}
        BL      timer_handler
 8002e84:	f7ff fceb 	bl	800285e <timer_handler>
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 8002e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
 8002e8c:	4770      	bx	lr

08002e8e <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
 8002e8e:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
 8002e92:	bf0c      	ite	eq
        MRSEQ   R3,MSP
 8002e94:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
 8002e98:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
 8002e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
 8002ea0:	4668      	mov	r0, sp
        BL      os_default_irq
 8002ea2:	f7fe fccf 	bl	8001844 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
 8002ea6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        BX      LR
 8002eaa:	4770      	bx	lr
        LDR     R0,=os_flags
 8002eac:	20002218 	.word	0x20002218
        LDR     R2,=SVC_Count
 8002eb0:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
 8002eb4:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 8002eb8:	2000011c 	.word	0x2000011c
        LDR     R3,=g_current_task      /* Get current task */
 8002ebc:	2000357c 	.word	0x2000357c

08002ec0 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
 8002ec0:	2001      	movs	r0, #1
 8002ec2:	4770      	bx	lr

08002ec4 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
 8002ec4:	4770      	bx	lr

08002ec6 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
 8002ec6:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
 8002ec8:	f101 0320 	add.w	r3, r1, #32
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d907      	bls.n	8002ee0 <__malloc_from_block+0x1a>
        nfp->next_free = fpn = fp->next_free;
        nfp->prev_free = fpp = fp->prev_free;
        fpn->prev_free = nfp;
        fpp->next_free = nfp;
    } else {
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
 8002ed4:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
 8002ed6:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
 8002ed8:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
 8002eda:	615a      	str	r2, [r3, #20]
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
 8002edc:	3010      	adds	r0, #16
 8002ede:	4770      	bx	lr
{
 8002ee0:	b430      	push	{r4, r5}
        nfp = (struct free_arena_header *)((char *)fp + size);
 8002ee2:	1843      	adds	r3, r0, r1
        na = fp->a.next;
 8002ee4:	6884      	ldr	r4, [r0, #8]
        nfp->a.type = ARENA_TYPE_FREE;
 8002ee6:	2501      	movs	r5, #1
 8002ee8:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
 8002eea:	1a52      	subs	r2, r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
 8002eee:	2200      	movs	r2, #0
 8002ef0:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
 8002ef2:	6041      	str	r1, [r0, #4]
        nfp->a.prev = fp;
 8002ef4:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
 8002ef6:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
 8002ef8:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
 8002efa:	6083      	str	r3, [r0, #8]
        nfp->next_free = fpn = fp->next_free;
 8002efc:	6901      	ldr	r1, [r0, #16]
 8002efe:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
 8002f00:	6942      	ldr	r2, [r0, #20]
 8002f02:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
 8002f04:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
 8002f06:	6113      	str	r3, [r2, #16]
}
 8002f08:	3010      	adds	r0, #16
 8002f0a:	bc30      	pop	{r4, r5}
 8002f0c:	4770      	bx	lr
	...

08002f10 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
 8002f10:	b510      	push	{r4, lr}
    struct free_arena_header *pah, *nah;
    assert(ah); ////
 8002f12:	b1a0      	cbz	r0, 8002f3e <__free_block+0x2e>
 8002f14:	4603      	mov	r3, r0

    pah = ah->a.prev;
 8002f16:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
 8002f18:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
 8002f1a:	6802      	ldr	r2, [r0, #0]
 8002f1c:	2a01      	cmp	r2, #1
 8002f1e:	d014      	beq.n	8002f4a <__free_block+0x3a>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
 8002f20:	2201      	movs	r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
        ah->next_free = __malloc_head.next_free;
 8002f24:	4a19      	ldr	r2, [pc, #100]	; (8002f8c <__free_block+0x7c>)
 8002f26:	6910      	ldr	r0, [r2, #16]
 8002f28:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
 8002f2a:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
 8002f2c:	6113      	str	r3, [r2, #16]
        assert(ah->next_free); ////
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	b1aa      	cbz	r2, 8002f5e <__free_block+0x4e>
        ah->next_free->prev_free = ah;
 8002f32:	6153      	str	r3, [r2, #20]
 8002f34:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
 8002f36:	680b      	ldr	r3, [r1, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d016      	beq.n	8002f6a <__free_block+0x5a>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
 8002f3c:	bd10      	pop	{r4, pc}
    assert(ah); ////
 8002f3e:	2300      	movs	r3, #0
 8002f40:	461a      	mov	r2, r3
 8002f42:	4619      	mov	r1, r3
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe fc57 	bl	80017f8 <__assert_func>
        (char *)pah + pah->a.size == (char *)ah) {
 8002f4a:	6842      	ldr	r2, [r0, #4]
 8002f4c:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
 8002f4e:	429c      	cmp	r4, r3
 8002f50:	d1e6      	bne.n	8002f20 <__free_block+0x10>
        pah->a.size += ah->a.size;
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	441a      	add	r2, r3
 8002f56:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
 8002f58:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
 8002f5a:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
 8002f5c:	e7eb      	b.n	8002f36 <__free_block+0x26>
        assert(ah->next_free); ////
 8002f5e:	2300      	movs	r3, #0
 8002f60:	461a      	mov	r2, r3
 8002f62:	4619      	mov	r1, r3
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe fc47 	bl	80017f8 <__assert_func>
        (char *)ah + ah->a.size == (char *)nah) {
 8002f6a:	6843      	ldr	r3, [r0, #4]
 8002f6c:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
 8002f6e:	428a      	cmp	r2, r1
 8002f70:	d1e4      	bne.n	8002f3c <__free_block+0x2c>
        ah->a.size += nah->a.size;
 8002f72:	684a      	ldr	r2, [r1, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
 8002f78:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
 8002f7a:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
 8002f7c:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
 8002f7e:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
 8002f80:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
 8002f82:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
 8002f84:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
 8002f86:	60da      	str	r2, [r3, #12]
    return ah;
 8002f88:	e7d8      	b.n	8002f3c <__free_block+0x2c>
 8002f8a:	bf00      	nop
 8002f8c:	2000012c 	.word	0x2000012c

08002f90 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
 8002f90:	2917      	cmp	r1, #23
 8002f92:	d91e      	bls.n	8002fd2 <add_malloc_block+0x42>
{
 8002f94:	b510      	push	{r4, lr}
 8002f96:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
 8002f9c:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <add_malloc_block+0x44>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4798      	blx	r3
 8002fa4:	b1a0      	cbz	r0, 8002fd0 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <add_malloc_block+0x48>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2a02      	cmp	r2, #2
 8002fae:	d003      	beq.n	8002fb8 <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
 8002fb0:	42a3      	cmp	r3, r4
 8002fb2:	d301      	bcc.n	8002fb8 <add_malloc_block+0x28>
         pah = pah->a.prev) {
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	e7f8      	b.n	8002faa <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
 8002fbc:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
 8002fbe:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
 8002fc0:	68a3      	ldr	r3, [r4, #8]
 8002fc2:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f7ff ffa3 	bl	8002f10 <__free_block>

    malloc_unlock();
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <add_malloc_block+0x4c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4798      	blx	r3
}
 8002fd0:	bd10      	pop	{r4, pc}
 8002fd2:	4770      	bx	lr
 8002fd4:	20000144 	.word	0x20000144
 8002fd8:	2000012c 	.word	0x2000012c
 8002fdc:	20000148 	.word	0x20000148

08002fe0 <malloc>:
{
 8002fe0:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
 8002fe2:	1e43      	subs	r3, r0, #1
 8002fe4:	f113 0f12 	cmn.w	r3, #18
 8002fe8:	d826      	bhi.n	8003038 <malloc+0x58>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
 8002fea:	f100 041f 	add.w	r4, r0, #31
 8002fee:	f024 040f 	bic.w	r4, r4, #15
    if (!malloc_lock())
 8002ff2:	4b13      	ldr	r3, [pc, #76]	; (8003040 <malloc+0x60>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4798      	blx	r3
 8002ff8:	b300      	cbz	r0, 800303c <malloc+0x5c>
    void *result = NULL;
 8002ffa:	2500      	movs	r5, #0
 8002ffc:	e00d      	b.n	800301a <malloc+0x3a>
            result = __malloc_from_block(fp, size);
 8002ffe:	4621      	mov	r1, r4
 8003000:	f7ff ff61 	bl	8002ec6 <__malloc_from_block>
 8003004:	4605      	mov	r5, r0
    if (result == NULL) {
 8003006:	b995      	cbnz	r5, 800302e <malloc+0x4e>
        more_mem = _sbrk(size);
 8003008:	4620      	mov	r0, r4
 800300a:	f007 fa4d 	bl	800a4a8 <_sbrk>
        if (more_mem != (void *)-1) {
 800300e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003012:	d00c      	beq.n	800302e <malloc+0x4e>
            add_malloc_block(more_mem, size);
 8003014:	4621      	mov	r1, r4
 8003016:	f7ff ffbb 	bl	8002f90 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <malloc+0x64>)
 800301c:	6918      	ldr	r0, [r3, #16]
 800301e:	6803      	ldr	r3, [r0, #0]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d0f0      	beq.n	8003006 <malloc+0x26>
        if (fp->a.size >= size) {
 8003024:	6843      	ldr	r3, [r0, #4]
 8003026:	42a3      	cmp	r3, r4
 8003028:	d2e9      	bcs.n	8002ffe <malloc+0x1e>
         fp = fp->next_free) {
 800302a:	6900      	ldr	r0, [r0, #16]
 800302c:	e7f7      	b.n	800301e <malloc+0x3e>
    malloc_unlock();
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <malloc+0x68>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4798      	blx	r3
}
 8003034:	4628      	mov	r0, r5
 8003036:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
 8003038:	2500      	movs	r5, #0
 800303a:	e7fb      	b.n	8003034 <malloc+0x54>
        return NULL;
 800303c:	2500      	movs	r5, #0
 800303e:	e7f9      	b.n	8003034 <malloc+0x54>
 8003040:	20000144 	.word	0x20000144
 8003044:	2000012c 	.word	0x2000012c
 8003048:	20000148 	.word	0x20000148

0800304c <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
 800304c:	b170      	cbz	r0, 800306c <free+0x20>
{
 800304e:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
 8003050:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <free+0x24>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4798      	blx	r3
 800305a:	b900      	cbnz	r0, 800305e <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
 800305c:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
 800305e:	4620      	mov	r0, r4
 8003060:	f7ff ff56 	bl	8002f10 <__free_block>
    malloc_unlock();
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <free+0x28>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4798      	blx	r3
 800306a:	e7f7      	b.n	800305c <free+0x10>
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000144 	.word	0x20000144
 8003074:	20000148 	.word	0x20000148

08003078 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
 8003078:	b470      	push	{r4, r5, r6}
 800307a:	f04f 0500 	mov.w	r5, #0
 800307e:	f022 0603 	bic.w	r6, r2, #3
 8003082:	e005      	b.n	8003090 <test1>

08003084 <loop1>:
 8003084:	5943      	ldr	r3, [r0, r5]
 8003086:	594c      	ldr	r4, [r1, r5]
 8003088:	42a3      	cmp	r3, r4
 800308a:	d104      	bne.n	8003096 <res1>
 800308c:	f105 0504 	add.w	r5, r5, #4

08003090 <test1>:
 8003090:	42b5      	cmp	r5, r6
 8003092:	d1f7      	bne.n	8003084 <loop1>
 8003094:	e00d      	b.n	80030b2 <test2>

08003096 <res1>:
 8003096:	ba1b      	rev	r3, r3
 8003098:	ba24      	rev	r4, r4
 800309a:	1b1b      	subs	r3, r3, r4
 800309c:	bf8c      	ite	hi
 800309e:	2301      	movhi	r3, #1
 80030a0:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
 80030a4:	e009      	b.n	80030ba <done>

080030a6 <loop2>:
 80030a6:	5d43      	ldrb	r3, [r0, r5]
 80030a8:	5d4c      	ldrb	r4, [r1, r5]
 80030aa:	1b1b      	subs	r3, r3, r4
 80030ac:	d105      	bne.n	80030ba <done>
 80030ae:	f105 0501 	add.w	r5, r5, #1

080030b2 <test2>:
 80030b2:	4295      	cmp	r5, r2
 80030b4:	d1f7      	bne.n	80030a6 <loop2>
 80030b6:	f04f 0300 	mov.w	r3, #0

080030ba <done>:
 80030ba:	4618      	mov	r0, r3
 80030bc:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
 80030be:	4770      	bx	lr

080030c0 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
 80030c0:	e001      	b.n	80030c6 <test1>

080030c2 <loop1>:
 80030c2:	588b      	ldr	r3, [r1, r2]
 80030c4:	5083      	str	r3, [r0, r2]

080030c6 <test1>:
 80030c6:	3a04      	subs	r2, #4
 80030c8:	d5fb      	bpl.n	80030c2 <loop1>
 80030ca:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
 80030ce:	e001      	b.n	80030d4 <test2>

080030d0 <loop2>:
 80030d0:	5c8b      	ldrb	r3, [r1, r2]
 80030d2:	5483      	strb	r3, [r0, r2]

080030d4 <test2>:
 80030d4:	3a01      	subs	r2, #1
 80030d6:	d5fb      	bpl.n	80030d0 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
 80030d8:	4770      	bx	lr

080030da <memset>:

#include <string.h>
#include <stdint.h>

void *memset(void *dst, int c, size_t n)
{
 80030da:	b410      	push	{r4}
	char *q = dst;
 80030dc:	4603      	mov	r3, r0
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#else
	while (n--) {
 80030de:	e002      	b.n	80030e6 <memset+0xc>
		*q++ = c;
 80030e0:	7019      	strb	r1, [r3, #0]
 80030e2:	3301      	adds	r3, #1
	while (n--) {
 80030e4:	4622      	mov	r2, r4
 80030e6:	1e54      	subs	r4, r2, #1
 80030e8:	2a00      	cmp	r2, #0
 80030ea:	d1f9      	bne.n	80030e0 <memset+0x6>
	}
#endif

	return dst;
}
 80030ec:	bc10      	pop	{r4}
 80030ee:	4770      	bx	lr

080030f0 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
 80030f0:	b430      	push	{r4, r5}
 80030f2:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
 80030f4:	1c55      	adds	r5, r2, #1
 80030f6:	7813      	ldrb	r3, [r2, #0]
 80030f8:	1c4c      	adds	r4, r1, #1
 80030fa:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
 80030fc:	1a18      	subs	r0, r3, r0
 80030fe:	d103      	bne.n	8003108 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
 8003100:	462a      	mov	r2, r5
 8003102:	4621      	mov	r1, r4
		if (d || !ch)
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f5      	bne.n	80030f4 <strcmp+0x4>
			break;
	}

	return d;
}
 8003108:	bc30      	pop	{r4, r5}
 800310a:	4770      	bx	lr

0800310c <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	4606      	mov	r6, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
 8003110:	b14a      	cbz	r2, 8003126 <strncpy+0x1a>
		n--;
 8003112:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
 8003114:	1c4d      	adds	r5, r1, #1
 8003116:	780b      	ldrb	r3, [r1, #0]
 8003118:	1c44      	adds	r4, r0, #1
 800311a:	7003      	strb	r3, [r0, #0]
		if (!ch)
 800311c:	b113      	cbz	r3, 8003124 <strncpy+0x18>
		*q++ = ch = *p++;
 800311e:	4629      	mov	r1, r5
 8003120:	4620      	mov	r0, r4
 8003122:	e7f5      	b.n	8003110 <strncpy+0x4>
 8003124:	4620      	mov	r0, r4
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
 8003126:	2100      	movs	r1, #0
 8003128:	f7ff ffd7 	bl	80030da <memset>

	return dst;
}
 800312c:	4630      	mov	r0, r6
 800312e:	bd70      	pop	{r4, r5, r6, pc}

08003130 <stm32f1_adc_create>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 8003130:	b500      	push	{lr}
 8003132:	b083      	sub	sp, #12
    console_printf("ADC create " DEVICE_NAME "\n");
 8003134:	480b      	ldr	r0, [pc, #44]	; (8003164 <stm32f1_adc_create+0x34>)
 8003136:	f003 f8fb 	bl	8006330 <console_printf>

    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <stm32f1_adc_create+0x38>)
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <stm32f1_adc_create+0x3c>)
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2300      	movs	r3, #0
 8003144:	2201      	movs	r2, #1
 8003146:	490a      	ldr	r1, [pc, #40]	; (8003170 <stm32f1_adc_create+0x40>)
 8003148:	480a      	ldr	r0, [pc, #40]	; (8003174 <stm32f1_adc_create+0x44>)
 800314a:	f7fe fde1 	bl	8001d10 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0,  //  For BSP: OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
 800314e:	b910      	cbnz	r0, 8003156 <stm32f1_adc_create+0x26>
}
 8003150:	b003      	add	sp, #12
 8003152:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 8003156:	2300      	movs	r3, #0
 8003158:	461a      	mov	r2, r3
 800315a:	4619      	mov	r1, r3
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe fb4b 	bl	80017f8 <__assert_func>
 8003162:	bf00      	nop
 8003164:	0800d218 	.word	0x0800d218
 8003168:	2000014c 	.word	0x2000014c
 800316c:	0800352d 	.word	0x0800352d
 8003170:	0800d22c 	.word	0x0800d22c
 8003174:	20002288 	.word	0x20002288

08003178 <stm32f1_resolve_adc_gpio>:

static int
stm32f1_resolve_adc_gpio(ADC_HandleTypeDef *adc, uint8_t cnum,
        GPIO_InitTypeDef *gpio)
{
    uintptr_t adc_addr = (uintptr_t)adc->Instance;
 8003178:	6803      	ldr	r3, [r0, #0]
    uint32_t pin;
    int rc;

    rc = OS_OK;
    switch (adc_addr) {
 800317a:	4816      	ldr	r0, [pc, #88]	; (80031d4 <stm32f1_resolve_adc_gpio+0x5c>)
 800317c:	4283      	cmp	r3, r0
 800317e:	d003      	beq.n	8003188 <stm32f1_resolve_adc_gpio+0x10>
 8003180:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003184:	4283      	cmp	r3, r0
 8003186:	d120      	bne.n	80031ca <stm32f1_resolve_adc_gpio+0x52>
        case (uintptr_t)ADC1:
#endif
#if defined(ADC2)
        case (uintptr_t)ADC2:
#endif
            switch(cnum) {
 8003188:	3904      	subs	r1, #4
 800318a:	290b      	cmp	r1, #11
 800318c:	d81f      	bhi.n	80031ce <stm32f1_resolve_adc_gpio+0x56>
 800318e:	e8df f001 	tbb	[pc, r1]
 8003192:	1406      	.short	0x1406
 8003194:	0e0c0a08 	.word	0x0e0c0a08
 8003198:	1e1e1e1e 	.word	0x1e1e1e1e
 800319c:	1210      	.short	0x1210
                case ADC_CHANNEL_4:
                    pin = ADC12_CH4_PIN;
 800319e:	2304      	movs	r3, #4
 80031a0:	e00c      	b.n	80031bc <stm32f1_resolve_adc_gpio+0x44>
                    goto done;
                case ADC_CHANNEL_5:
                    pin = ADC12_CH5_PIN;
                    goto done;
                case ADC_CHANNEL_6:
                    pin = ADC12_CH6_PIN;
 80031a2:	2306      	movs	r3, #6
                    goto done;
 80031a4:	e00a      	b.n	80031bc <stm32f1_resolve_adc_gpio+0x44>
                case ADC_CHANNEL_7:
                    pin = ADC12_CH7_PIN;
 80031a6:	2307      	movs	r3, #7
                    goto done;
 80031a8:	e008      	b.n	80031bc <stm32f1_resolve_adc_gpio+0x44>
                case ADC_CHANNEL_8:
                    pin = ADC12_CH8_PIN;
 80031aa:	2310      	movs	r3, #16
                    goto done;
 80031ac:	e006      	b.n	80031bc <stm32f1_resolve_adc_gpio+0x44>
                case ADC_CHANNEL_9:
                    pin = ADC12_CH9_PIN;
 80031ae:	2311      	movs	r3, #17
                    goto done;
 80031b0:	e004      	b.n	80031bc <stm32f1_resolve_adc_gpio+0x44>
                case ADC_CHANNEL_14:
                    pin = ADC12_CH14_PIN;
 80031b2:	2324      	movs	r3, #36	; 0x24
                    goto done;
 80031b4:	e002      	b.n	80031bc <stm32f1_resolve_adc_gpio+0x44>
                case ADC_CHANNEL_15:
                    pin = ADC12_CH15_PIN;
 80031b6:	2325      	movs	r3, #37	; 0x25
                    goto done;
 80031b8:	e000      	b.n	80031bc <stm32f1_resolve_adc_gpio+0x44>
                    pin = ADC12_CH5_PIN;
 80031ba:	2305      	movs	r3, #5
        default:
            rc = OS_EINVAL;
            return rc;
    }
done:
    *gpio = (GPIO_InitTypeDef) {
 80031bc:	2000      	movs	r0, #0
 80031be:	6090      	str	r0, [r2, #8]
 80031c0:	60d0      	str	r0, [r2, #12]
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	2303      	movs	r3, #3
 80031c6:	6053      	str	r3, [r2, #4]
        .Pin = pin,
        .Mode = GPIO_MODE_ANALOG,
        .Pull = GPIO_NOPULL,
        //// .Alternate = pin
    };
    return rc;
 80031c8:	4770      	bx	lr
            return rc;
 80031ca:	2002      	movs	r0, #2
 80031cc:	4770      	bx	lr
 80031ce:	2002      	movs	r0, #2
}
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40012400 	.word	0x40012400

080031d8 <stm32f1_adc_size_buffer>:
 * @return Length of buffer in bytes
 */
static int
stm32f1_adc_size_buffer(struct adc_dev *dev, int chans, int samples)
{
    return (sizeof(uint32_t) * chans * samples);
 80031d8:	fb02 f201 	mul.w	r2, r2, r1
}
 80031dc:	0090      	lsls	r0, r2, #2
 80031de:	4770      	bx	lr

080031e0 <stm32f1_adc_read_buffer>:
{
 80031e0:	b508      	push	{r3, lr}
    assert(off < buf_len);
 80031e2:	4293      	cmp	r3, r2
 80031e4:	da05      	bge.n	80031f2 <stm32f1_adc_read_buffer+0x12>
    *result = *((uint32_t *)buf + off);
 80031e6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80031ea:	9b02      	ldr	r3, [sp, #8]
 80031ec:	601a      	str	r2, [r3, #0]
}
 80031ee:	2000      	movs	r0, #0
 80031f0:	bd08      	pop	{r3, pc}
    assert(off < buf_len);
 80031f2:	2300      	movs	r3, #0
 80031f4:	461a      	mov	r2, r3
 80031f6:	4619      	mov	r1, r3
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fe fafd 	bl	80017f8 <__assert_func>

080031fe <stm32f1_adc_release_buffer>:
{
 80031fe:	b508      	push	{r3, lr}
    assert(0);  //  Not implemented.
 8003200:	2300      	movs	r3, #0
 8003202:	461a      	mov	r2, r3
 8003204:	4619      	mov	r1, r3
 8003206:	4618      	mov	r0, r3
 8003208:	f7fe faf6 	bl	80017f8 <__assert_func>

0800320c <stm32f1_adc_set_buffer>:
{
 800320c:	b508      	push	{r3, lr}
    assert(0);  //  Not implemented.
 800320e:	2300      	movs	r3, #0
 8003210:	461a      	mov	r2, r3
 8003212:	4619      	mov	r1, r3
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe faef 	bl	80017f8 <__assert_func>
	...

0800321c <stm32f1_adc_clk_disable>:
{
 800321c:	b508      	push	{r3, lr}
    uintptr_t adc_addr = (uintptr_t)hadc->Instance;
 800321e:	6803      	ldr	r3, [r0, #0]
    switch (adc_addr) {
 8003220:	4a0c      	ldr	r2, [pc, #48]	; (8003254 <stm32f1_adc_clk_disable+0x38>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d009      	beq.n	800323a <stm32f1_adc_clk_disable+0x1e>
 8003226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800322a:	4293      	cmp	r3, r2
 800322c:	d10b      	bne.n	8003246 <stm32f1_adc_clk_disable+0x2a>
            __HAL_RCC_ADC2_CLK_DISABLE();
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <stm32f1_adc_clk_disable+0x3c>)
 8003230:	6993      	ldr	r3, [r2, #24]
 8003232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003236:	6193      	str	r3, [r2, #24]
            break;
 8003238:	e004      	b.n	8003244 <stm32f1_adc_clk_disable+0x28>
            __HAL_RCC_ADC1_CLK_DISABLE();
 800323a:	4a07      	ldr	r2, [pc, #28]	; (8003258 <stm32f1_adc_clk_disable+0x3c>)
 800323c:	6993      	ldr	r3, [r2, #24]
 800323e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003242:	6193      	str	r3, [r2, #24]
}
 8003244:	bd08      	pop	{r3, pc}
            assert(0);
 8003246:	2300      	movs	r3, #0
 8003248:	461a      	mov	r2, r3
 800324a:	4619      	mov	r1, r3
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe fad3 	bl	80017f8 <__assert_func>
 8003252:	bf00      	nop
 8003254:	40012400 	.word	0x40012400
 8003258:	40021000 	.word	0x40021000

0800325c <stm32f1_adc_read_channel>:
{
 800325c:	b538      	push	{r3, r4, r5, lr}
    assert(dev != NULL && result != NULL);
 800325e:	b1d0      	cbz	r0, 8003296 <stm32f1_adc_read_channel+0x3a>
 8003260:	4615      	mov	r5, r2
 8003262:	b1c2      	cbz	r2, 8003296 <stm32f1_adc_read_channel+0x3a>
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 8003264:	6943      	ldr	r3, [r0, #20]
    hadc = cfg->sac_adc_handle;
 8003266:	695c      	ldr	r4, [r3, #20]
    while (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK);  // Calibrate AD converter.
 8003268:	4620      	mov	r0, r4
 800326a:	f007 fdff 	bl	800ae6c <HAL_ADCEx_Calibration_Start>
 800326e:	2800      	cmp	r0, #0
 8003270:	d1fa      	bne.n	8003268 <stm32f1_adc_read_channel+0xc>
    HAL_ADC_Start(hadc);
 8003272:	4620      	mov	r0, r4
 8003274:	f007 fc20 	bl	800aab8 <HAL_ADC_Start>
    HAL_StatusTypeDef rc = HAL_ADC_PollForConversion(hadc, 10 * 1000);  //  Wait up to 10 seconds.  TODO: Yield to task scheduler while waiting.
 8003278:	f242 7110 	movw	r1, #10000	; 0x2710
 800327c:	4620      	mov	r0, r4
 800327e:	f007 fa47 	bl	800a710 <HAL_ADC_PollForConversion>
    assert(rc == HAL_OK);
 8003282:	b970      	cbnz	r0, 80032a2 <stm32f1_adc_read_channel+0x46>
    val = HAL_ADC_GetValue(hadc);
 8003284:	4620      	mov	r0, r4
 8003286:	f007 fafb 	bl	800a880 <HAL_ADC_GetValue>
    *result = val;
 800328a:	6028      	str	r0, [r5, #0]
    HAL_ADC_Stop(hadc);
 800328c:	4620      	mov	r0, r4
 800328e:	f007 fdcf 	bl	800ae30 <HAL_ADC_Stop>
}
 8003292:	2000      	movs	r0, #0
 8003294:	bd38      	pop	{r3, r4, r5, pc}
    assert(dev != NULL && result != NULL);
 8003296:	2300      	movs	r3, #0
 8003298:	461a      	mov	r2, r3
 800329a:	4619      	mov	r1, r3
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe faab 	bl	80017f8 <__assert_func>
    assert(rc == HAL_OK);
 80032a2:	2300      	movs	r3, #0
 80032a4:	461a      	mov	r2, r3
 80032a6:	4619      	mov	r1, r3
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe faa5 	bl	80017f8 <__assert_func>
	...

080032b0 <stm32f1_adc_sample>:
{
 80032b0:	b508      	push	{r3, lr}
    assert(dev);
 80032b2:	b140      	cbz	r0, 80032c6 <stm32f1_adc_sample+0x16>
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 80032b4:	6943      	ldr	r3, [r0, #20]
    if (HAL_ADC_Start_DMA(hadc, cfg->primarybuf, cfg->buflen) != HAL_OK) {
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	6899      	ldr	r1, [r3, #8]
 80032ba:	6958      	ldr	r0, [r3, #20]
 80032bc:	f007 fc72 	bl	800aba4 <HAL_ADC_Start_DMA>
 80032c0:	b938      	cbnz	r0, 80032d2 <stm32f1_adc_sample+0x22>
    rc = OS_OK;
 80032c2:	2000      	movs	r0, #0
}
 80032c4:	bd08      	pop	{r3, pc}
    assert(dev);
 80032c6:	2300      	movs	r3, #0
 80032c8:	461a      	mov	r2, r3
 80032ca:	4619      	mov	r1, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fe fa93 	bl	80017f8 <__assert_func>
        ++stm32f1_adc_stats.adc_dma_start_error;
 80032d2:	4a03      	ldr	r2, [pc, #12]	; (80032e0 <stm32f1_adc_sample+0x30>)
 80032d4:	8953      	ldrh	r3, [r2, #10]
 80032d6:	3301      	adds	r3, #1
 80032d8:	8153      	strh	r3, [r2, #10]
    rc = OS_EINVAL;
 80032da:	2002      	movs	r0, #2
        goto err;
 80032dc:	e7f2      	b.n	80032c4 <stm32f1_adc_sample+0x14>
 80032de:	bf00      	nop
 80032e0:	200022d0 	.word	0x200022d0

080032e4 <stm32f1_adc_configure_channel>:
{
 80032e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032e8:	b085      	sub	sp, #20
    if (dev == NULL && !IS_ADC_CHANNEL(cnum)) {
 80032ea:	4605      	mov	r5, r0
 80032ec:	b380      	cbz	r0, 8003350 <stm32f1_adc_configure_channel+0x6c>
 80032ee:	460c      	mov	r4, r1
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 80032f0:	696b      	ldr	r3, [r5, #20]
    hadc = cfg->sac_adc_handle;
 80032f2:	695f      	ldr	r7, [r3, #20]
    chan_cfg = &((struct adc_chan_config *)cfg->sac_chans)[cnum];
 80032f4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80032f8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80032fc:	005e      	lsls	r6, r3, #1
 80032fe:	eb08 0906 	add.w	r9, r8, r6
    if ((HAL_ADC_ConfigChannel(hadc, cfgdata)) != HAL_OK) {
 8003302:	4611      	mov	r1, r2
 8003304:	4638      	mov	r0, r7
 8003306:	f007 fafb 	bl	800a900 <HAL_ADC_ConfigChannel>
 800330a:	bb28      	cbnz	r0, 8003358 <stm32f1_adc_configure_channel+0x74>
    dev->ad_chans[cnum].c_res = chan_cfg->c_res;
 800330c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800330e:	4433      	add	r3, r6
 8003310:	f899 2002 	ldrb.w	r2, [r9, #2]
 8003314:	709a      	strb	r2, [r3, #2]
    dev->ad_chans[cnum].c_refmv = chan_cfg->c_refmv;
 8003316:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003318:	f838 2006 	ldrh.w	r2, [r8, r6]
 800331c:	539a      	strh	r2, [r3, r6]
    dev->ad_chans[cnum].c_configured = 1;
 800331e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003320:	4433      	add	r3, r6
 8003322:	2201      	movs	r2, #1
 8003324:	70da      	strb	r2, [r3, #3]
    dev->ad_chans[cnum].c_cnum = cnum;
 8003326:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003328:	441e      	add	r6, r3
 800332a:	7134      	strb	r4, [r6, #4]
    if (cnum == ADC_CHANNEL_TEMPSENSOR || cnum == ADC_CHANNEL_VREFINT) {
 800332c:	f1a4 0310 	sub.w	r3, r4, #16
 8003330:	b2db      	uxtb	r3, r3
 8003332:	4293      	cmp	r3, r2
 8003334:	d912      	bls.n	800335c <stm32f1_adc_configure_channel+0x78>
    if (stm32f1_resolve_adc_gpio(hadc, cnum, &gpio_td)) {
 8003336:	466a      	mov	r2, sp
 8003338:	4621      	mov	r1, r4
 800333a:	4638      	mov	r0, r7
 800333c:	f7ff ff1c 	bl	8003178 <stm32f1_resolve_adc_gpio>
 8003340:	4604      	mov	r4, r0
 8003342:	b980      	cbnz	r0, 8003366 <stm32f1_adc_configure_channel+0x82>
    hal_gpio_init_stm(gpio_td.Pin, &gpio_td);
 8003344:	a904      	add	r1, sp, #16
 8003346:	f851 0d10 	ldr.w	r0, [r1, #-16]!
 800334a:	f005 ffc7 	bl	80092dc <hal_gpio_init_stm>
    return (OS_OK);
 800334e:	e006      	b.n	800335e <stm32f1_adc_configure_channel+0x7a>
    if (dev == NULL && !IS_ADC_CHANNEL(cnum)) {
 8003350:	2911      	cmp	r1, #17
 8003352:	d9cc      	bls.n	80032ee <stm32f1_adc_configure_channel+0xa>
    return (rc);
 8003354:	2402      	movs	r4, #2
 8003356:	e002      	b.n	800335e <stm32f1_adc_configure_channel+0x7a>
 8003358:	2402      	movs	r4, #2
 800335a:	e000      	b.n	800335e <stm32f1_adc_configure_channel+0x7a>
        return OS_OK;
 800335c:	2400      	movs	r4, #0
}
 800335e:	4620      	mov	r0, r4
 8003360:	b005      	add	sp, #20
 8003362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (rc);
 8003366:	2402      	movs	r4, #2
 8003368:	e7f9      	b.n	800335e <stm32f1_adc_configure_channel+0x7a>

0800336a <stm32f1_adc_uninit>:
{
 800336a:	b530      	push	{r4, r5, lr}
 800336c:	b085      	sub	sp, #20
    assert(dev);
 800336e:	b198      	cbz	r0, 8003398 <stm32f1_adc_uninit+0x2e>
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 8003370:	6942      	ldr	r2, [r0, #20]
    hadc = cfg->sac_adc_handle;
 8003372:	6954      	ldr	r4, [r2, #20]
    cnum = dev->ad_chans->c_cnum;
 8003374:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003376:	791d      	ldrb	r5, [r3, #4]
    stm32f1_adc_clk_disable(hadc);
 8003378:	4620      	mov	r0, r4
 800337a:	f7ff ff4f 	bl	800321c <stm32f1_adc_clk_disable>
    if (cnum != ADC_CHANNEL_TEMPSENSOR && cnum != ADC_CHANNEL_VREFINT) {
 800337e:	f1a5 0310 	sub.w	r3, r5, #16
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	d905      	bls.n	8003394 <stm32f1_adc_uninit+0x2a>
        if (stm32f1_resolve_adc_gpio(hadc, cnum, &gpio_td)) {
 8003388:	466a      	mov	r2, sp
 800338a:	4629      	mov	r1, r5
 800338c:	4620      	mov	r0, r4
 800338e:	f7ff fef3 	bl	8003178 <stm32f1_resolve_adc_gpio>
 8003392:	b138      	cbz	r0, 80033a4 <stm32f1_adc_uninit+0x3a>
}
 8003394:	b005      	add	sp, #20
 8003396:	bd30      	pop	{r4, r5, pc}
    assert(dev);
 8003398:	2300      	movs	r3, #0
 800339a:	461a      	mov	r2, r3
 800339c:	4619      	mov	r1, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fa2a 	bl	80017f8 <__assert_func>
        if (hal_gpio_deinit_stm(gpio_td.Pin, &gpio_td)) {
 80033a4:	a904      	add	r1, sp, #16
 80033a6:	f851 0d10 	ldr.w	r0, [r1, #-16]!
 80033aa:	f005 ffb3 	bl	8009314 <hal_gpio_deinit_stm>
    return;
 80033ae:	e7f1      	b.n	8003394 <stm32f1_adc_uninit+0x2a>

080033b0 <stm32f1_adc_close>:
{
 80033b0:	b510      	push	{r4, lr}
 80033b2:	4604      	mov	r4, r0
    stm32f1_adc_uninit(dev);
 80033b4:	f7ff ffd9 	bl	800336a <stm32f1_adc_uninit>
    if (os_started()) {
 80033b8:	f7fe fadc 	bl	8001974 <os_started>
 80033bc:	b908      	cbnz	r0, 80033c2 <stm32f1_adc_close+0x12>
}
 80033be:	2000      	movs	r0, #0
 80033c0:	bd10      	pop	{r4, pc}
        os_mutex_release(&dev->ad_lock);
 80033c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80033c6:	f7fe fe9f 	bl	8002108 <os_mutex_release>
 80033ca:	e7f8      	b.n	80033be <stm32f1_adc_close+0xe>

080033cc <config_clk>:
{
 80033cc:	b500      	push	{lr}
 80033ce:	b087      	sub	sp, #28
    RCC_ClkInitTypeDef clkinitstruct = { 0 };
 80033d0:	2300      	movs	r3, #0
 80033d2:	9303      	str	r3, [sp, #12]
 80033d4:	9304      	str	r3, [sp, #16]
    clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK2);
 80033d6:	2309      	movs	r3, #9
 80033d8:	9301      	str	r3, [sp, #4]
    clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  //  Value 2
 80033da:	2102      	movs	r1, #2
 80033dc:	9102      	str	r1, [sp, #8]
    clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV8;  //  Value 1536
 80033de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033e2:	9305      	str	r3, [sp, #20]
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) { assert(0); }  //  Latency=2
 80033e4:	a801      	add	r0, sp, #4
 80033e6:	f008 fb77 	bl	800bad8 <HAL_RCC_ClockConfig>
 80033ea:	b910      	cbnz	r0, 80033f2 <config_clk+0x26>
}
 80033ec:	b007      	add	sp, #28
 80033ee:	f85d fb04 	ldr.w	pc, [sp], #4
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) { assert(0); }  //  Latency=2
 80033f2:	2300      	movs	r3, #0
 80033f4:	461a      	mov	r2, r3
 80033f6:	4619      	mov	r1, r3
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fe f9fd 	bl	80017f8 <__assert_func>
	...

08003400 <stm32f1_adc_clk_enable>:
{
 8003400:	b510      	push	{r4, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	4604      	mov	r4, r0
    config_clk();  ////  Added to configure the ADC clock.
 8003406:	f7ff ffe1 	bl	80033cc <config_clk>
    uintptr_t adc_addr = (uintptr_t)hadc->Instance;
 800340a:	6823      	ldr	r3, [r4, #0]
    switch (adc_addr) {
 800340c:	4a11      	ldr	r2, [pc, #68]	; (8003454 <stm32f1_adc_clk_enable+0x54>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00e      	beq.n	8003430 <stm32f1_adc_clk_enable+0x30>
 8003412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003416:	4293      	cmp	r3, r2
 8003418:	d116      	bne.n	8003448 <stm32f1_adc_clk_enable+0x48>
            __HAL_RCC_ADC2_CLK_ENABLE();
 800341a:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <stm32f1_adc_clk_enable+0x58>)
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003422:	619a      	str	r2, [r3, #24]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342a:	9301      	str	r3, [sp, #4]
 800342c:	9b01      	ldr	r3, [sp, #4]
            break;
 800342e:	e009      	b.n	8003444 <stm32f1_adc_clk_enable+0x44>
            __HAL_RCC_ADC1_CLK_ENABLE();
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <stm32f1_adc_clk_enable+0x58>)
 8003432:	699a      	ldr	r2, [r3, #24]
 8003434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003438:	619a      	str	r2, [r3, #24]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	9b00      	ldr	r3, [sp, #0]
}
 8003444:	b002      	add	sp, #8
 8003446:	bd10      	pop	{r4, pc}
            assert(0);
 8003448:	2300      	movs	r3, #0
 800344a:	461a      	mov	r2, r3
 800344c:	4619      	mov	r1, r3
 800344e:	4618      	mov	r0, r3
 8003450:	f7fe f9d2 	bl	80017f8 <__assert_func>
 8003454:	40012400 	.word	0x40012400
 8003458:	40021000 	.word	0x40021000

0800345c <stm32f1_adc_dma_init>:
{
 800345c:	b508      	push	{r3, lr}
    assert(hadc);
 800345e:	b110      	cbz	r0, 8003466 <stm32f1_adc_dma_init+0xa>
    stm32f1_adc_clk_enable(hadc);
 8003460:	f7ff ffce 	bl	8003400 <stm32f1_adc_clk_enable>
}
 8003464:	bd08      	pop	{r3, pc}
    assert(hadc);
 8003466:	2300      	movs	r3, #0
 8003468:	461a      	mov	r2, r3
 800346a:	4619      	mov	r1, r3
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe f9c3 	bl	80017f8 <__assert_func>

08003472 <stm32f1_adc_init>:
{
 8003472:	b510      	push	{r4, lr}
    assert(dev);
 8003474:	b148      	cbz	r0, 800348a <stm32f1_adc_init+0x18>
    adc_config = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 8003476:	6943      	ldr	r3, [r0, #20]
    hadc = adc_config->sac_adc_handle;
 8003478:	695c      	ldr	r4, [r3, #20]
    stm32f1_adc_dma_init(hadc);
 800347a:	4620      	mov	r0, r4
 800347c:	f7ff ffee 	bl	800345c <stm32f1_adc_dma_init>
    if (HAL_ADC_Init(hadc) != HAL_OK) {
 8003480:	4620      	mov	r0, r4
 8003482:	f007 fc4d 	bl	800ad20 <HAL_ADC_Init>
 8003486:	b930      	cbnz	r0, 8003496 <stm32f1_adc_init+0x24>
}
 8003488:	bd10      	pop	{r4, pc}
    assert(dev);
 800348a:	2300      	movs	r3, #0
 800348c:	461a      	mov	r2, r3
 800348e:	4619      	mov	r1, r3
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe f9b1 	bl	80017f8 <__assert_func>
        assert(0);
 8003496:	2300      	movs	r3, #0
 8003498:	461a      	mov	r2, r3
 800349a:	4619      	mov	r1, r3
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe f9ab 	bl	80017f8 <__assert_func>

080034a2 <stm32f1_adc_open>:
{
 80034a2:	b538      	push	{r3, r4, r5, lr}
    assert(odev);
 80034a4:	b168      	cbz	r0, 80034c2 <stm32f1_adc_open+0x20>
 80034a6:	460d      	mov	r5, r1
 80034a8:	4604      	mov	r4, r0
    if (os_started()) {
 80034aa:	f7fe fa63 	bl	8001974 <os_started>
 80034ae:	b970      	cbnz	r0, 80034ce <stm32f1_adc_open+0x2c>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
 80034b0:	7ee3      	ldrb	r3, [r4, #27]
 80034b2:	f013 0f02 	tst.w	r3, #2
 80034b6:	d112      	bne.n	80034de <stm32f1_adc_open+0x3c>
    stm32f1_adc_init(dev);
 80034b8:	4620      	mov	r0, r4
 80034ba:	f7ff ffda 	bl	8003472 <stm32f1_adc_init>
    return (OS_OK);
 80034be:	2000      	movs	r0, #0
}
 80034c0:	bd38      	pop	{r3, r4, r5, pc}
    assert(odev);
 80034c2:	2300      	movs	r3, #0
 80034c4:	461a      	mov	r2, r3
 80034c6:	4619      	mov	r1, r3
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe f995 	bl	80017f8 <__assert_func>
        rc = os_mutex_pend(&dev->ad_lock, wait);
 80034ce:	4629      	mov	r1, r5
 80034d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034d4:	f7fe fe74 	bl	80021c0 <os_mutex_pend>
        if (rc != OS_OK) {
 80034d8:	2800      	cmp	r0, #0
 80034da:	d0e9      	beq.n	80034b0 <stm32f1_adc_open+0xe>
err:
 80034dc:	e7f0      	b.n	80034c0 <stm32f1_adc_open+0x1e>
        os_mutex_release(&dev->ad_lock);
 80034de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034e2:	f7fe fe11 	bl	8002108 <os_mutex_release>
        rc = OS_EBUSY;
 80034e6:	200b      	movs	r0, #11
        goto err;
 80034e8:	e7ea      	b.n	80034c0 <stm32f1_adc_open+0x1e>
	...

080034ec <HAL_ADC_ErrorCallback>:
    ++stm32f1_adc_stats.adc_error;
 80034ec:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <HAL_ADC_ErrorCallback+0x3c>)
 80034ee:	8853      	ldrh	r3, [r2, #2]
 80034f0:	3301      	adds	r3, #1
 80034f2:	8053      	strh	r3, [r2, #2]
    if (hadc->ErrorCode & HAL_ADC_ERROR_DMA) {
 80034f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80034f6:	f013 0f04 	tst.w	r3, #4
 80034fa:	d10c      	bne.n	8003516 <HAL_ADC_ErrorCallback+0x2a>
    } else if (hadc->ErrorCode & HAL_ADC_ERROR_OVR) {
 80034fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80034fe:	f013 0f02 	tst.w	r3, #2
 8003502:	d10c      	bne.n	800351e <HAL_ADC_ErrorCallback+0x32>
    } else if (hadc->ErrorCode & HAL_ADC_ERROR_INTERNAL) {
 8003504:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003506:	f013 0f01 	tst.w	r3, #1
 800350a:	d003      	beq.n	8003514 <HAL_ADC_ErrorCallback+0x28>
        ++stm32f1_adc_stats.adc_internal_error;
 800350c:	4a06      	ldr	r2, [pc, #24]	; (8003528 <HAL_ADC_ErrorCallback+0x3c>)
 800350e:	89d3      	ldrh	r3, [r2, #14]
 8003510:	3301      	adds	r3, #1
 8003512:	81d3      	strh	r3, [r2, #14]
}
 8003514:	4770      	bx	lr
        ++stm32f1_adc_stats.adc_dma_xfer_failed;
 8003516:	8893      	ldrh	r3, [r2, #4]
 8003518:	3301      	adds	r3, #1
 800351a:	8093      	strh	r3, [r2, #4]
 800351c:	4770      	bx	lr
        ++stm32f1_adc_stats.adc_dma_overrun;
 800351e:	4a02      	ldr	r2, [pc, #8]	; (8003528 <HAL_ADC_ErrorCallback+0x3c>)
 8003520:	8993      	ldrh	r3, [r2, #12]
 8003522:	3301      	adds	r3, #1
 8003524:	8193      	strh	r3, [r2, #12]
 8003526:	4770      	bx	lr
 8003528:	200022d0 	.word	0x200022d0

0800352c <stm32f1_adc_dev_init>:
 * @param2 stm32f1 ADC device cfg ptr
 * @return OS_OK on success
 */
int
stm32f1_adc_dev_init(struct os_dev *odev, void *arg)
{
 800352c:	b538      	push	{r3, r4, r5, lr}
    struct stm32f1_adc_dev_cfg *sac;
    struct adc_dev *dev;

    sac = (struct stm32f1_adc_dev_cfg *) arg;

    assert(sac != NULL);
 800352e:	b181      	cbz	r1, 8003552 <stm32f1_adc_dev_init+0x26>
 8003530:	4604      	mov	r4, r0
 8003532:	460d      	mov	r5, r1

    dev = (struct adc_dev *)odev;

    os_mutex_init(&dev->ad_lock);
 8003534:	3024      	adds	r0, #36	; 0x24
 8003536:	f7fe fddd 	bl	80020f4 <os_mutex_init>

    dev->ad_chans = (void *) sac->sac_chans;
 800353a:	686b      	ldr	r3, [r5, #4]
 800353c:	6363      	str	r3, [r4, #52]	; 0x34
    dev->ad_chan_count = sac->sac_chan_count;
 800353e:	782b      	ldrb	r3, [r5, #0]
 8003540:	63a3      	str	r3, [r4, #56]	; 0x38

    OS_DEV_SETHANDLERS(odev, stm32f1_adc_open, stm32f1_adc_close);
 8003542:	4b07      	ldr	r3, [pc, #28]	; (8003560 <stm32f1_adc_dev_init+0x34>)
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	4b07      	ldr	r3, [pc, #28]	; (8003564 <stm32f1_adc_dev_init+0x38>)
 8003548:	60e3      	str	r3, [r4, #12]

    dev->ad_funcs = &stm32f1_adc_funcs;
 800354a:	4b07      	ldr	r3, [pc, #28]	; (8003568 <stm32f1_adc_dev_init+0x3c>)
 800354c:	6323      	str	r3, [r4, #48]	; 0x30
    ADC_HandleTypeDef *hadc = cfg->sac_adc_handle;
    HAL_StatusTypeDef rc = HAL_ADC_Init(hadc);  ////  Added HAL initalisation, which was missing from the STM32F4 code.
    if (rc != HAL_OK) { return rc; }
#endif  //  NOTUSED
    return (OS_OK);
}
 800354e:	2000      	movs	r0, #0
 8003550:	bd38      	pop	{r3, r4, r5, pc}
    assert(sac != NULL);
 8003552:	2300      	movs	r3, #0
 8003554:	461a      	mov	r2, r3
 8003556:	4619      	mov	r1, r3
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe f94d 	bl	80017f8 <__assert_func>
 800355e:	bf00      	nop
 8003560:	080034a3 	.word	0x080034a3
 8003564:	080033b1 	.word	0x080033b1
 8003568:	0800d234 	.word	0x0800d234

0800356c <_ZL13config_devicev>:
    rc = config_device();
    assert(rc == 0);
}

//  Device configuration
static int config_device(void) {
 800356c:	b530      	push	{r4, r5, lr}
 800356e:	b0a9      	sub	sp, #164	; 0xa4
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 8003570:	2200      	movs	r2, #0
 8003572:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003576:	4810      	ldr	r0, [pc, #64]	; (80035b8 <_ZL13config_devicev+0x4c>)
 8003578:	f7fe fc10 	bl	8001d9c <os_dev_open>
    assert(dev != NULL);
 800357c:	b178      	cbz	r0, 800359e <_ZL13config_devicev+0x32>
 800357e:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
 8003580:	a801      	add	r0, sp, #4
 8003582:	f000 f921 	bl	80037c8 <esp8266_default_cfg>
    assert(rc == 0);
 8003586:	b980      	cbnz	r0, 80035aa <_ZL13config_devicev+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 8003588:	a901      	add	r1, sp, #4
 800358a:	4620      	mov	r0, r4
 800358c:	f000 f926 	bl	80037dc <esp8266_config>
 8003590:	4605      	mov	r5, r0
    os_dev_close(dev);
 8003592:	4620      	mov	r0, r4
 8003594:	f7fe fc24 	bl	8001de0 <os_dev_close>
    return rc;
}
 8003598:	4628      	mov	r0, r5
 800359a:	b029      	add	sp, #164	; 0xa4
 800359c:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
 800359e:	2300      	movs	r3, #0
 80035a0:	461a      	mov	r2, r3
 80035a2:	4619      	mov	r1, r3
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fe f927 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 80035aa:	2300      	movs	r3, #0
 80035ac:	461a      	mov	r2, r3
 80035ae:	4619      	mov	r1, r3
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe f921 	bl	80017f8 <__assert_func>
 80035b6:	bf00      	nop
 80035b8:	0800d250 	.word	0x0800d250

080035bc <esp8266_create>:
void DEVICE_CREATE(void) {
 80035bc:	b500      	push	{lr}
 80035be:	b083      	sub	sp, #12
    console_printf("%screate " DEVICE_NAME "\n", _esp);
 80035c0:	4b10      	ldr	r3, [pc, #64]	; (8003604 <esp8266_create+0x48>)
 80035c2:	6819      	ldr	r1, [r3, #0]
 80035c4:	4810      	ldr	r0, [pc, #64]	; (8003608 <esp8266_create+0x4c>)
 80035c6:	f002 feb3 	bl	8006330 <console_printf>
        DEVICE_INIT, (void *) &DEVICE_ITF);
 80035ca:	4b10      	ldr	r3, [pc, #64]	; (800360c <esp8266_create+0x50>)
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <esp8266_create+0x54>)
 80035d0:	9300      	str	r3, [sp, #0]
 80035d2:	2300      	movs	r3, #0
 80035d4:	2201      	movs	r2, #1
 80035d6:	490f      	ldr	r1, [pc, #60]	; (8003614 <esp8266_create+0x58>)
 80035d8:	480f      	ldr	r0, [pc, #60]	; (8003618 <esp8266_create+0x5c>)
 80035da:	f7fe fb99 	bl	8001d10 <os_dev_create>
    assert(rc == 0);
 80035de:	b928      	cbnz	r0, 80035ec <esp8266_create+0x30>
    rc = config_device();
 80035e0:	f7ff ffc4 	bl	800356c <_ZL13config_devicev>
    assert(rc == 0);
 80035e4:	b940      	cbnz	r0, 80035f8 <esp8266_create+0x3c>
}
 80035e6:	b003      	add	sp, #12
 80035e8:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 80035ec:	2300      	movs	r3, #0
 80035ee:	461a      	mov	r2, r3
 80035f0:	4619      	mov	r1, r3
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe f900 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 80035f8:	2300      	movs	r3, #0
 80035fa:	461a      	mov	r2, r3
 80035fc:	4619      	mov	r1, r3
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe f8fa 	bl	80017f8 <__assert_func>
 8003604:	200001ac 	.word	0x200001ac
 8003608:	0800d25c 	.word	0x0800d25c
 800360c:	20000194 	.word	0x20000194
 8003610:	08003789 	.word	0x08003789
 8003614:	0800d250 	.word	0x0800d250
 8003618:	200022e0 	.word	0x200022e0

0800361c <_ZL3drvP7esp8266>:
//  Device Creation Functions

static void esp8266_event(void *drv);
static int internal_connect(struct esp8266 *dev);

static ESP8266 *drv(struct esp8266 *dev) { return (ESP8266 *)(dev->controller); }  //  Return the ESP8266 Controller
 800361c:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8003620:	4770      	bx	lr

08003622 <_ZL3cfgP7esp8266>:
static esp8266_cfg *cfg(struct esp8266 *dev) { return &dev->cfg; }                 //  Return the ESP8266 Config
 8003622:	3024      	adds	r0, #36	; 0x24
 8003624:	4770      	bx	lr

08003626 <_ZL13esp8266_eventPv>:
        if (_cbs[i].callback) {
            _cbs[i].callback(_cbs[i].data);
        }
    }
#endif  //  TODO
}
 8003626:	4770      	bx	lr

08003628 <_ZL18register_transportPKcPvS0_th>:
static int register_transport(const char *network_device, void *server_endpoint, const char *host, uint16_t port, uint8_t server_endpoint_size) {
 8003628:	b510      	push	{r4, lr}
    assert(server_endpoint_size >= sizeof(struct esp8266_server));  //  Server Endpoint too small
 800362a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 800362e:	2c0f      	cmp	r4, #15
 8003630:	d902      	bls.n	8003638 <_ZL18register_transportPKcPvS0_th+0x10>
    int rc = esp8266_register_transport(network_device, (struct esp8266_server *) server_endpoint, host, port);
 8003632:	f000 fa6d 	bl	8003b10 <esp8266_register_transport>
}
 8003636:	bd10      	pop	{r4, pc}
    assert(server_endpoint_size >= sizeof(struct esp8266_server));  //  Server Endpoint too small
 8003638:	2300      	movs	r3, #0
 800363a:	461a      	mov	r2, r3
 800363c:	4619      	mov	r1, r3
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe f8da 	bl	80017f8 <__assert_func>

08003644 <_ZL13esp8266_closeP6os_dev>:
static int esp8266_close(struct os_dev *dev0) {
 8003644:	b510      	push	{r4, lr}
 8003646:	4604      	mov	r4, r0
    console_printf("]\n");  console_flush();  ////
 8003648:	4806      	ldr	r0, [pc, #24]	; (8003664 <_ZL13esp8266_closeP6os_dev+0x20>)
 800364a:	f002 fe71 	bl	8006330 <console_printf>
 800364e:	f002 feb5 	bl	80063bc <console_flush>
    assert(dev0);
 8003652:	b10c      	cbz	r4, 8003658 <_ZL13esp8266_closeP6os_dev+0x14>
}
 8003654:	2000      	movs	r0, #0
 8003656:	bd10      	pop	{r4, pc}
    assert(dev0);
 8003658:	2300      	movs	r3, #0
 800365a:	461a      	mov	r2, r3
 800365c:	4619      	mov	r1, r3
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe f8ca 	bl	80017f8 <__assert_func>
 8003664:	0800d28c 	.word	0x0800d28c

08003668 <_ZL12esp8266_openP6os_devmPv>:
static int esp8266_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 8003668:	b530      	push	{r4, r5, lr}
 800366a:	b085      	sub	sp, #20
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 800366c:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <_ZL12esp8266_openP6os_devmPv+0x8c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d035      	beq.n	80036e0 <_ZL12esp8266_openP6os_devmPv+0x78>
 8003674:	4604      	mov	r4, r0
    first_open = false;
 8003676:	4b1f      	ldr	r3, [pc, #124]	; (80036f4 <_ZL12esp8266_openP6os_devmPv+0x8c>)
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
    console_printf("[\n");  ////
 800367c:	481e      	ldr	r0, [pc, #120]	; (80036f8 <_ZL12esp8266_openP6os_devmPv+0x90>)
 800367e:	f002 fe57 	bl	8006330 <console_printf>
    assert(dev0);
 8003682:	b38c      	cbz	r4, 80036e8 <_ZL12esp8266_openP6os_devmPv+0x80>
    dev->controller = &controller;
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <_ZL12esp8266_openP6os_devmPv+0x94>)
 8003686:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    memset(cfg->_ids, 0, sizeof(cfg->_ids));
 800368a:	2500      	movs	r5, #0
 800368c:	f8a4 508b 	strh.w	r5, [r4, #139]	; 0x8b
    memset(cfg->_cbs, 0, sizeof(cfg->_cbs));
 8003690:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
 8003694:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
 8003698:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 800369c:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
    drv(dev)->init(
 80036a0:	4620      	mov	r0, r4
 80036a2:	f7ff ffbb 	bl	800361c <_ZL3drvP7esp8266>
 80036a6:	9503      	str	r5, [sp, #12]
 80036a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ac:	9302      	str	r3, [sp, #8]
 80036ae:	4a14      	ldr	r2, [pc, #80]	; (8003700 <_ZL12esp8266_openP6os_devmPv+0x98>)
 80036b0:	9201      	str	r2, [sp, #4]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	4b13      	ldr	r3, [pc, #76]	; (8003704 <_ZL12esp8266_openP6os_devmPv+0x9c>)
 80036b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80036ba:	4913      	ldr	r1, [pc, #76]	; (8003708 <_ZL12esp8266_openP6os_devmPv+0xa0>)
 80036bc:	f000 fab4 	bl	8003c28 <_ZN7ESP82664initEPcmS0_mS0_mb>
    drv(dev)->configure(cfg->uart);         //  Configure the UART port.  0 means UART2.
 80036c0:	4620      	mov	r0, r4
 80036c2:	f7ff ffab 	bl	800361c <_ZL3drvP7esp8266>
 80036c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80036c8:	f000 fada 	bl	8003c80 <_ZN7ESP82669configureEi>
    drv(dev)->attach(&esp8266_event, dev);  //  Set the callback for ESP8266 events.
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7ff ffa5 	bl	800361c <_ZL3drvP7esp8266>
 80036d2:	4622      	mov	r2, r4
 80036d4:	490d      	ldr	r1, [pc, #52]	; (800370c <_ZL12esp8266_openP6os_devmPv+0xa4>)
 80036d6:	f000 fcf0 	bl	80040ba <_ZN7ESP82666attachEPFvPvES0_>
}
 80036da:	2000      	movs	r0, #0
 80036dc:	b005      	add	sp, #20
 80036de:	bd30      	pop	{r4, r5, pc}
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 80036e0:	4805      	ldr	r0, [pc, #20]	; (80036f8 <_ZL12esp8266_openP6os_devmPv+0x90>)
 80036e2:	f002 fe25 	bl	8006330 <console_printf>
 80036e6:	e7f8      	b.n	80036da <_ZL12esp8266_openP6os_devmPv+0x72>
    assert(dev0);
 80036e8:	2300      	movs	r3, #0
 80036ea:	461a      	mov	r2, r3
 80036ec:	4619      	mov	r1, r3
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe f882 	bl	80017f8 <__assert_func>
 80036f4:	200001a8 	.word	0x200001a8
 80036f8:	0800d270 	.word	0x0800d270
 80036fc:	200023a4 	.word	0x200023a4
 8003700:	2000270c 	.word	0x2000270c
 8003704:	2000247c 	.word	0x2000247c
 8003708:	2000257c 	.word	0x2000257c
 800370c:	08003627 	.word	0x08003627

08003710 <_ZL16internal_connectP7esp8266>:
static int internal_connect(struct esp8266 *dev) {
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4604      	mov	r4, r0
    drv(dev)->setTimeout(ESP8266_CONNECT_TIMEOUT);
 8003714:	f7ff ff82 	bl	800361c <_ZL3drvP7esp8266>
 8003718:	f242 7110 	movw	r1, #10000	; 0x2710
 800371c:	f000 fccb 	bl	80040b6 <_ZN7ESP826610setTimeoutEm>
    if (!drv(dev)->startup(3)) { return NSAPI_ERROR_DEVICE_ERROR; }
 8003720:	4620      	mov	r0, r4
 8003722:	f7ff ff7b 	bl	800361c <_ZL3drvP7esp8266>
 8003726:	2103      	movs	r1, #3
 8003728:	f000 fb38 	bl	8003d9c <_ZN7ESP82667startupEi>
 800372c:	b300      	cbz	r0, 8003770 <_ZL16internal_connectP7esp8266+0x60>
    if (!drv(dev)->dhcp(true, 1)) { return NSAPI_ERROR_DHCP_FAILURE; }
 800372e:	4620      	mov	r0, r4
 8003730:	f7ff ff74 	bl	800361c <_ZL3drvP7esp8266>
 8003734:	2201      	movs	r2, #1
 8003736:	4611      	mov	r1, r2
 8003738:	f000 fb74 	bl	8003e24 <_ZN7ESP82664dhcpEbi>
 800373c:	b1d0      	cbz	r0, 8003774 <_ZL16internal_connectP7esp8266+0x64>
    if (!drv(dev)->connect(cfg(dev)->ap_ssid, cfg(dev)->ap_pass)) { return NSAPI_ERROR_NO_CONNECTION; }
 800373e:	4620      	mov	r0, r4
 8003740:	f7ff ff6c 	bl	800361c <_ZL3drvP7esp8266>
 8003744:	4605      	mov	r5, r0
 8003746:	4620      	mov	r0, r4
 8003748:	f7ff ff6b 	bl	8003622 <_ZL3cfgP7esp8266>
 800374c:	f100 0227 	add.w	r2, r0, #39	; 0x27
 8003750:	1d01      	adds	r1, r0, #4
 8003752:	4628      	mov	r0, r5
 8003754:	f000 fb86 	bl	8003e64 <_ZN7ESP82667connectEPKcS1_>
 8003758:	b170      	cbz	r0, 8003778 <_ZL16internal_connectP7esp8266+0x68>
    if (!drv(dev)->getIPAddress()) { return NSAPI_ERROR_DHCP_FAILURE; }
 800375a:	4620      	mov	r0, r4
 800375c:	f7ff ff5e 	bl	800361c <_ZL3drvP7esp8266>
 8003760:	f000 fbb4 	bl	8003ecc <_ZN7ESP826612getIPAddressEv>
 8003764:	b108      	cbz	r0, 800376a <_ZL16internal_connectP7esp8266+0x5a>
    return NSAPI_ERROR_OK;
 8003766:	2000      	movs	r0, #0
}
 8003768:	bd38      	pop	{r3, r4, r5, pc}
    if (!drv(dev)->getIPAddress()) { return NSAPI_ERROR_DHCP_FAILURE; }
 800376a:	f6a0 30c2 	subw	r0, r0, #3010	; 0xbc2
 800376e:	e7fb      	b.n	8003768 <_ZL16internal_connectP7esp8266+0x58>
    if (!drv(dev)->startup(3)) { return NSAPI_ERROR_DEVICE_ERROR; }
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <_ZL16internal_connectP7esp8266+0x6c>)
 8003772:	e7f9      	b.n	8003768 <_ZL16internal_connectP7esp8266+0x58>
    if (!drv(dev)->dhcp(true, 1)) { return NSAPI_ERROR_DHCP_FAILURE; }
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <_ZL16internal_connectP7esp8266+0x70>)
 8003776:	e7f7      	b.n	8003768 <_ZL16internal_connectP7esp8266+0x58>
    if (!drv(dev)->connect(cfg(dev)->ap_ssid, cfg(dev)->ap_pass)) { return NSAPI_ERROR_NO_CONNECTION; }
 8003778:	4802      	ldr	r0, [pc, #8]	; (8003784 <_ZL16internal_connectP7esp8266+0x74>)
 800377a:	e7f5      	b.n	8003768 <_ZL16internal_connectP7esp8266+0x58>
 800377c:	fffff43c 	.word	0xfffff43c
 8003780:	fffff43e 	.word	0xfffff43e
 8003784:	fffff444 	.word	0xfffff444

08003788 <esp8266_init>:
int esp8266_init(struct os_dev *dev0, void *arg) {
 8003788:	b508      	push	{r3, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 800378a:	b189      	cbz	r1, 80037b0 <esp8266_init+0x28>
 800378c:	b198      	cbz	r0, 80037b6 <esp8266_init+0x2e>
    OS_DEV_SETHANDLERS(dev0, esp8266_open, esp8266_close);
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <esp8266_init+0x34>)
 8003790:	6003      	str	r3, [r0, #0]
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <esp8266_init+0x38>)
 8003794:	60c3      	str	r3, [r0, #12]
    rc = sensor_network_register_interface(&network_iface);
 8003796:	480b      	ldr	r0, [pc, #44]	; (80037c4 <esp8266_init+0x3c>)
 8003798:	f002 ffc6 	bl	8006728 <sensor_network_register_interface>
    assert(rc == 0);
 800379c:	4603      	mov	r3, r0
 800379e:	b908      	cbnz	r0, 80037a4 <esp8266_init+0x1c>
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd08      	pop	{r3, pc}
    assert(rc == 0);
 80037a4:	2300      	movs	r3, #0
 80037a6:	461a      	mov	r2, r3
 80037a8:	4619      	mov	r1, r3
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe f824 	bl	80017f8 <__assert_func>
    return rc;
 80037b0:	f06f 0308 	mvn.w	r3, #8
 80037b4:	e7f4      	b.n	80037a0 <esp8266_init+0x18>
 80037b6:	f06f 0308 	mvn.w	r3, #8
 80037ba:	e7f1      	b.n	80037a0 <esp8266_init+0x18>
 80037bc:	08003669 	.word	0x08003669
 80037c0:	08003645 	.word	0x08003645
 80037c4:	0800d290 	.word	0x0800d290

080037c8 <esp8266_default_cfg>:
int esp8266_default_cfg(struct esp8266_cfg *cfg) {
 80037c8:	b510      	push	{r4, lr}
 80037ca:	4604      	mov	r4, r0
    memset(cfg, 0, sizeof(struct esp8266_cfg));  //  Zero the entire object.
 80037cc:	2298      	movs	r2, #152	; 0x98
 80037ce:	2100      	movs	r1, #0
 80037d0:	3004      	adds	r0, #4
 80037d2:	f7ff fc82 	bl	80030da <memset>
    cfg->uart = 0;  //  Default to UART number 0, which is UART2.
 80037d6:	2000      	movs	r0, #0
 80037d8:	6020      	str	r0, [r4, #0]
}
 80037da:	bd10      	pop	{r4, pc}

080037dc <esp8266_config>:
}
 80037dc:	2000      	movs	r0, #0
 80037de:	4770      	bx	lr

080037e0 <esp8266_set_credentials>:
int esp8266_set_credentials(struct esp8266 *dev, const char *ssid, const char *pass, nsapi_security_t security) {
 80037e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037e4:	4689      	mov	r9, r1
 80037e6:	4690      	mov	r8, r2
 80037e8:	461f      	mov	r7, r3
    memset(cfg(dev)->ap_ssid, 0, sizeof(cfg(dev)->ap_ssid));
 80037ea:	f7ff ff1a 	bl	8003622 <_ZL3cfgP7esp8266>
 80037ee:	4604      	mov	r4, r0
 80037f0:	1d05      	adds	r5, r0, #4
 80037f2:	2621      	movs	r6, #33	; 0x21
 80037f4:	4632      	mov	r2, r6
 80037f6:	2100      	movs	r1, #0
 80037f8:	4628      	mov	r0, r5
 80037fa:	f7ff fc6e 	bl	80030da <memset>
    strncpy(cfg(dev)->ap_ssid, ssid, sizeof(cfg(dev)->ap_ssid));
 80037fe:	4632      	mov	r2, r6
 8003800:	4649      	mov	r1, r9
 8003802:	4628      	mov	r0, r5
 8003804:	f7ff fc82 	bl	800310c <strncpy>
    memset(cfg(dev)->ap_pass, 0, sizeof(cfg(dev)->ap_pass));
 8003808:	f104 0527 	add.w	r5, r4, #39	; 0x27
 800380c:	2640      	movs	r6, #64	; 0x40
 800380e:	4632      	mov	r2, r6
 8003810:	2100      	movs	r1, #0
 8003812:	4628      	mov	r0, r5
 8003814:	f7ff fc61 	bl	80030da <memset>
    strncpy(cfg(dev)->ap_pass, pass, sizeof(cfg(dev)->ap_pass));
 8003818:	4632      	mov	r2, r6
 800381a:	4641      	mov	r1, r8
 800381c:	4628      	mov	r0, r5
 800381e:	f7ff fc75 	bl	800310c <strncpy>
    cfg(dev)->ap_sec = security;
 8003822:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
}
 8003826:	2000      	movs	r0, #0
 8003828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800382c <esp8266_connect>:
int esp8266_connect(struct esp8266 *dev, const char *ssid, const char *pass) {
 800382c:	b510      	push	{r4, lr}
 800382e:	4604      	mov	r4, r0
    if (!ssid) { ssid = WIFI_SSID; }
 8003830:	4608      	mov	r0, r1
 8003832:	b161      	cbz	r1, 800384e <esp8266_connect+0x22>
    if (!pass) { pass = WIFI_PASSWORD; }
 8003834:	b16a      	cbz	r2, 8003852 <esp8266_connect+0x26>
    assert(dev);  assert(ssid);  assert(pass);
 8003836:	b174      	cbz	r4, 8003856 <esp8266_connect+0x2a>
 8003838:	b198      	cbz	r0, 8003862 <esp8266_connect+0x36>
 800383a:	b1c2      	cbz	r2, 800386e <esp8266_connect+0x42>
    esp8266_set_credentials(dev, ssid, pass, NSAPI_SECURITY_UNKNOWN);  //  Save the credentials.
 800383c:	23ff      	movs	r3, #255	; 0xff
 800383e:	4601      	mov	r1, r0
 8003840:	4620      	mov	r0, r4
 8003842:	f7ff ffcd 	bl	80037e0 <esp8266_set_credentials>
    return internal_connect(dev);  //  Connect with the saved credentials.
 8003846:	4620      	mov	r0, r4
 8003848:	f7ff ff62 	bl	8003710 <_ZL16internal_connectP7esp8266>
}
 800384c:	bd10      	pop	{r4, pc}
    if (!ssid) { ssid = WIFI_SSID; }
 800384e:	480b      	ldr	r0, [pc, #44]	; (800387c <esp8266_connect+0x50>)
 8003850:	e7f0      	b.n	8003834 <esp8266_connect+0x8>
    if (!pass) { pass = WIFI_PASSWORD; }
 8003852:	4a0b      	ldr	r2, [pc, #44]	; (8003880 <esp8266_connect+0x54>)
 8003854:	e7ef      	b.n	8003836 <esp8266_connect+0xa>
    assert(dev);  assert(ssid);  assert(pass);
 8003856:	2300      	movs	r3, #0
 8003858:	461a      	mov	r2, r3
 800385a:	4619      	mov	r1, r3
 800385c:	4618      	mov	r0, r3
 800385e:	f7fd ffcb 	bl	80017f8 <__assert_func>
 8003862:	2300      	movs	r3, #0
 8003864:	461a      	mov	r2, r3
 8003866:	4619      	mov	r1, r3
 8003868:	4618      	mov	r0, r3
 800386a:	f7fd ffc5 	bl	80017f8 <__assert_func>
 800386e:	2300      	movs	r3, #0
 8003870:	461a      	mov	r2, r3
 8003872:	4619      	mov	r1, r3
 8003874:	4618      	mov	r0, r3
 8003876:	f7fd ffbf 	bl	80017f8 <__assert_func>
 800387a:	bf00      	nop
 800387c:	0800d2a4 	.word	0x0800d2a4
 8003880:	0800d274 	.word	0x0800d274

08003884 <esp8266_socket_open>:
        return NSAPI_ERROR_DEVICE_ERROR;
    }
    return NSAPI_ERROR_OK;
}

int esp8266_socket_open(struct esp8266 *dev, void **handle, nsapi_protocol_t proto) {
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	4607      	mov	r7, r0
 8003888:	460d      	mov	r5, r1
 800388a:	4616      	mov	r6, r2
    //  Allocate a socket.  Return 0 if successful.
    int id = -1;
    for (int i = 0; i < ESP8266_SOCKET_COUNT; i++) {
 800388c:	2400      	movs	r4, #0
 800388e:	2c01      	cmp	r4, #1
 8003890:	dc0d      	bgt.n	80038ae <esp8266_socket_open+0x2a>
        if (!cfg(dev)->_ids[i]) {
 8003892:	4638      	mov	r0, r7
 8003894:	f7ff fec5 	bl	8003622 <_ZL3cfgP7esp8266>
 8003898:	1903      	adds	r3, r0, r4
 800389a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800389e:	b10b      	cbz	r3, 80038a4 <esp8266_socket_open+0x20>
    for (int i = 0; i < ESP8266_SOCKET_COUNT; i++) {
 80038a0:	3401      	adds	r4, #1
 80038a2:	e7f4      	b.n	800388e <esp8266_socket_open+0xa>
            id = i;
            cfg(dev)->_ids[i] = true;
 80038a4:	4420      	add	r0, r4
 80038a6:	2301      	movs	r3, #1
 80038a8:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
            break;
 80038ac:	e001      	b.n	80038b2 <esp8266_socket_open+0x2e>
    int id = -1;
 80038ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        }
    }
    if (id == -1) { return NSAPI_ERROR_NO_SOCKET; }  //  No more sockets available.
 80038b2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80038b6:	d011      	beq.n	80038dc <esp8266_socket_open+0x58>

    //  Init the socket.
    struct esp8266_socket *socket = &cfg(dev)->_sockets[id];
 80038b8:	4638      	mov	r0, r7
 80038ba:	f7ff feb2 	bl	8003622 <_ZL3cfgP7esp8266>
 80038be:	0123      	lsls	r3, r4, #4
 80038c0:	3368      	adds	r3, #104	; 0x68
 80038c2:	4403      	add	r3, r0
    if (!socket) { return NSAPI_ERROR_NO_SOCKET; }
 80038c4:	3304      	adds	r3, #4
 80038c6:	d00b      	beq.n	80038e0 <esp8266_socket_open+0x5c>
    socket->id = id;
 80038c8:	eb00 1204 	add.w	r2, r0, r4, lsl #4
 80038cc:	66d4      	str	r4, [r2, #108]	; 0x6c
    socket->proto = proto;
 80038ce:	f882 6070 	strb.w	r6, [r2, #112]	; 0x70
    socket->connected = false;
 80038d2:	2000      	movs	r0, #0
 80038d4:	f882 0071 	strb.w	r0, [r2, #113]	; 0x71
    *handle = socket;
 80038d8:	602b      	str	r3, [r5, #0]
    return 0;
}
 80038da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (id == -1) { return NSAPI_ERROR_NO_SOCKET; }  //  No more sockets available.
 80038dc:	4801      	ldr	r0, [pc, #4]	; (80038e4 <esp8266_socket_open+0x60>)
 80038de:	e7fc      	b.n	80038da <esp8266_socket_open+0x56>
    if (!socket) { return NSAPI_ERROR_NO_SOCKET; }
 80038e0:	4800      	ldr	r0, [pc, #0]	; (80038e4 <esp8266_socket_open+0x60>)
 80038e2:	e7fa      	b.n	80038da <esp8266_socket_open+0x56>
 80038e4:	fffff443 	.word	0xfffff443

080038e8 <esp8266_socket_connect>:
    if (!drv(dev)->close(socket->id)) { err = NSAPI_ERROR_DEVICE_ERROR; }
    cfg(dev)->_ids[socket->id] = false;
    return err;
}

int esp8266_socket_connect(struct esp8266 *dev, void *handle, const char *host, uint16_t port) {
 80038e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	4680      	mov	r8, r0
 80038f0:	460c      	mov	r4, r1
 80038f2:	4616      	mov	r6, r2
 80038f4:	461f      	mov	r7, r3
    //  Connect the socket to the host and port via UDP or TCP.  Return 0 if successful.
    //  Note: Host must point to a static string that will never change.
    struct esp8266_socket *socket = (struct esp8266_socket *)handle;
    drv(dev)->setTimeout(ESP8266_MISC_TIMEOUT);
 80038f6:	f7ff fe91 	bl	800361c <_ZL3drvP7esp8266>
 80038fa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80038fe:	f000 fbda 	bl	80040b6 <_ZN7ESP826610setTimeoutEm>
    const char *proto = (socket->proto == NSAPI_UDP) ? "UDP" : "TCP";
 8003902:	7923      	ldrb	r3, [r4, #4]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d010      	beq.n	800392a <esp8266_socket_connect+0x42>
 8003908:	4d0a      	ldr	r5, [pc, #40]	; (8003934 <esp8266_socket_connect+0x4c>)
    if (!drv(dev)->open(proto, socket->id, host, port)) {
 800390a:	4640      	mov	r0, r8
 800390c:	f7ff fe86 	bl	800361c <_ZL3drvP7esp8266>
 8003910:	9700      	str	r7, [sp, #0]
 8003912:	4633      	mov	r3, r6
 8003914:	6822      	ldr	r2, [r4, #0]
 8003916:	4629      	mov	r1, r5
 8003918:	f000 fafc 	bl	8003f14 <_ZN7ESP82664openEPKciS1_i>
 800391c:	b138      	cbz	r0, 800392e <esp8266_socket_connect+0x46>
        return NSAPI_ERROR_DEVICE_ERROR;
    }
    socket->connected = true;
 800391e:	2301      	movs	r3, #1
 8003920:	7163      	strb	r3, [r4, #5]
    return 0;
 8003922:	2000      	movs	r0, #0
}
 8003924:	b002      	add	sp, #8
 8003926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const char *proto = (socket->proto == NSAPI_UDP) ? "UDP" : "TCP";
 800392a:	4d03      	ldr	r5, [pc, #12]	; (8003938 <esp8266_socket_connect+0x50>)
 800392c:	e7ed      	b.n	800390a <esp8266_socket_connect+0x22>
        return NSAPI_ERROR_DEVICE_ERROR;
 800392e:	4803      	ldr	r0, [pc, #12]	; (800393c <esp8266_socket_connect+0x54>)
 8003930:	e7f8      	b.n	8003924 <esp8266_socket_connect+0x3c>
 8003932:	bf00      	nop
 8003934:	0800d2b0 	.word	0x0800d2b0
 8003938:	0800d2ac 	.word	0x0800d2ac
 800393c:	fffff43c 	.word	0xfffff43c

08003940 <esp8266_socket_send_mbuf>:
        return NSAPI_ERROR_DEVICE_ERROR;
    }
    return size;
}

int esp8266_socket_send_mbuf(struct esp8266 *dev, void *handle, struct os_mbuf *m) {
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	4606      	mov	r6, r0
 8003944:	460d      	mov	r5, r1
 8003946:	4614      	mov	r4, r2
    //  Send the chain of mbufs to the socket.  Return number of bytes sent.
    struct esp8266_socket *socket = (struct esp8266_socket *)handle;
    drv(dev)->setTimeout(ESP8266_SEND_TIMEOUT);
 8003948:	f7ff fe68 	bl	800361c <_ZL3drvP7esp8266>
 800394c:	f242 7110 	movw	r1, #10000	; 0x2710
 8003950:	f000 fbb1 	bl	80040b6 <_ZN7ESP826610setTimeoutEm>
    if (!drv(dev)->sendMBuf(socket->id, m)) {
 8003954:	4630      	mov	r0, r6
 8003956:	f7ff fe61 	bl	800361c <_ZL3drvP7esp8266>
 800395a:	4622      	mov	r2, r4
 800395c:	6829      	ldr	r1, [r5, #0]
 800395e:	f000 fb0f 	bl	8003f80 <_ZN7ESP82668sendMBufEiP7os_mbuf>
 8003962:	b108      	cbz	r0, 8003968 <esp8266_socket_send_mbuf+0x28>
        return NSAPI_ERROR_DEVICE_ERROR;
    }
    int size = OS_MBUF_PKTLEN(m);  //  Length of the mbuf chain.
 8003964:	8a20      	ldrh	r0, [r4, #16]
    return size;
}
 8003966:	bd70      	pop	{r4, r5, r6, pc}
        return NSAPI_ERROR_DEVICE_ERROR;
 8003968:	4800      	ldr	r0, [pc, #0]	; (800396c <esp8266_socket_send_mbuf+0x2c>)
 800396a:	e7fc      	b.n	8003966 <esp8266_socket_send_mbuf+0x26>
 800396c:	fffff43c 	.word	0xfffff43c

08003970 <_ZL10oc_ep_sizePK11oc_endpoint>:
}

static uint8_t oc_ep_size(const struct oc_endpoint *oe) {
    //  Return the size of the endpoint.  OIC will allocate space to store this endpoint in the transmitted mbuf.
    return sizeof(struct esp8266_endpoint);
}
 8003970:	200c      	movs	r0, #12
 8003972:	4770      	bx	lr

08003974 <_ZL14oc_ep_has_connPK11oc_endpoint>:

static int oc_ep_has_conn(const struct oc_endpoint *oe) {
    //  Return true if the endpoint is connected.  We always return false.
    //  console_printf("oc_ep_has_conn\n");
    return 0;
}
 8003974:	2000      	movs	r0, #0
 8003976:	4770      	bx	lr

08003978 <_ZL7oc_initv>:

static int oc_init(void) {
    //  Init the endpoint.
    //  console_printf("oc_init\n");
    return 0;
}
 8003978:	2000      	movs	r0, #0
 800397a:	4770      	bx	lr

0800397c <_ZL11oc_shutdownv>:

static void oc_shutdown(void) {
    //  Shutdown the endpoint.
    //  console_printf("oc_shutdown\n");
}
 800397c:	4770      	bx	lr
	...

08003980 <_ZL9oc_ep_strPciPK11oc_endpoint>:
static char *oc_ep_str(char *ptr, int maxlen, const struct oc_endpoint *oe) {
 8003980:	b510      	push	{r4, lr}
 8003982:	4604      	mov	r4, r0
    console_printf("ESP str\n");
 8003984:	4806      	ldr	r0, [pc, #24]	; (80039a0 <_ZL9oc_ep_strPciPK11oc_endpoint+0x20>)
 8003986:	f002 fcd3 	bl	8006330 <console_printf>
    strcpy(ptr, "TODO:oc_ep_str");
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <_ZL9oc_ep_strPciPK11oc_endpoint+0x24>)
 800398c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800398e:	6020      	str	r0, [r4, #0]
 8003990:	6061      	str	r1, [r4, #4]
 8003992:	60a2      	str	r2, [r4, #8]
 8003994:	881a      	ldrh	r2, [r3, #0]
 8003996:	789b      	ldrb	r3, [r3, #2]
 8003998:	81a2      	strh	r2, [r4, #12]
 800399a:	73a3      	strb	r3, [r4, #14]
}
 800399c:	4620      	mov	r0, r4
 800399e:	bd10      	pop	{r4, pc}
 80039a0:	0800d2c4 	.word	0x0800d2c4
 80039a4:	0800d2d0 	.word	0x0800d2d0

080039a8 <_ZL11oc_tx_ucastP7os_mbuf>:
static void oc_tx_ucast(struct os_mbuf *m) {
 80039a8:	b538      	push	{r3, r4, r5, lr}
    assert(m);  assert(OS_MBUF_USRHDR_LEN(m) >= sizeof(struct esp8266_endpoint));
 80039aa:	2800      	cmp	r0, #0
 80039ac:	d03b      	beq.n	8003a26 <_ZL11oc_tx_ucastP7os_mbuf+0x7e>
 80039ae:	4604      	mov	r4, r0
 80039b0:	7943      	ldrb	r3, [r0, #5]
 80039b2:	3b08      	subs	r3, #8
 80039b4:	2b0b      	cmp	r3, #11
 80039b6:	d93c      	bls.n	8003a32 <_ZL11oc_tx_ucastP7os_mbuf+0x8a>
    assert(endpoint);  assert(endpoint->host);  assert(endpoint->port);  //  Host and endpoint should be in the endpoint.
 80039b8:	f110 0f18 	cmn.w	r0, #24
 80039bc:	d03f      	beq.n	8003a3e <_ZL11oc_tx_ucastP7os_mbuf+0x96>
 80039be:	69c1      	ldr	r1, [r0, #28]
 80039c0:	2900      	cmp	r1, #0
 80039c2:	d042      	beq.n	8003a4a <_ZL11oc_tx_ucastP7os_mbuf+0xa2>
 80039c4:	8c02      	ldrh	r2, [r0, #32]
 80039c6:	2a00      	cmp	r2, #0
 80039c8:	d045      	beq.n	8003a56 <_ZL11oc_tx_ucastP7os_mbuf+0xae>
    assert(server);  assert(endpoint->host == server->endpoint.host);  assert(endpoint->port == server->endpoint.port);  //  We only support 1 server connection. Must match the message endpoint.
 80039ca:	4b3d      	ldr	r3, [pc, #244]	; (8003ac0 <_ZL11oc_tx_ucastP7os_mbuf+0x118>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d047      	beq.n	8003a62 <_ZL11oc_tx_ucastP7os_mbuf+0xba>
 80039d2:	6858      	ldr	r0, [r3, #4]
 80039d4:	4281      	cmp	r1, r0
 80039d6:	d149      	bne.n	8003a6c <_ZL11oc_tx_ucastP7os_mbuf+0xc4>
 80039d8:	891b      	ldrh	r3, [r3, #8]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d14c      	bne.n	8003a78 <_ZL11oc_tx_ucastP7os_mbuf+0xd0>
    assert(network_device);  assert(socket);
 80039de:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <_ZL11oc_tx_ucastP7os_mbuf+0x11c>)
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d04e      	beq.n	8003a84 <_ZL11oc_tx_ucastP7os_mbuf+0xdc>
 80039e6:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <_ZL11oc_tx_ucastP7os_mbuf+0x120>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d050      	beq.n	8003a90 <_ZL11oc_tx_ucastP7os_mbuf+0xe8>
        struct esp8266 *dev = (struct esp8266 *) os_dev_open(network_device, OS_TIMEOUT_NEVER, NULL);  //  ESP8266_DEVICE is "esp8266_0"
 80039ee:	2200      	movs	r2, #0
 80039f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039f4:	f7fe f9d2 	bl	8001d9c <os_dev_open>
        assert(dev != NULL);
 80039f8:	4605      	mov	r5, r0
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d04d      	beq.n	8003a9a <_ZL11oc_tx_ucastP7os_mbuf+0xf2>
        console_printf("ESP send udp\n");
 80039fe:	4833      	ldr	r0, [pc, #204]	; (8003acc <_ZL11oc_tx_ucastP7os_mbuf+0x124>)
 8003a00:	f002 fc96 	bl	8006330 <console_printf>
        rc = esp8266_socket_send_mbuf(dev, socket, m);  
 8003a04:	4622      	mov	r2, r4
 8003a06:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <_ZL11oc_tx_ucastP7os_mbuf+0x120>)
 8003a08:	6819      	ldr	r1, [r3, #0]
 8003a0a:	4628      	mov	r0, r5
 8003a0c:	f7ff ff98 	bl	8003940 <esp8266_socket_send_mbuf>
        assert(rc > 0);
 8003a10:	2800      	cmp	r0, #0
 8003a12:	dd48      	ble.n	8003aa6 <_ZL11oc_tx_ucastP7os_mbuf+0xfe>
        os_dev_close((struct os_dev *) dev);
 8003a14:	4628      	mov	r0, r5
 8003a16:	f7fe f9e3 	bl	8001de0 <os_dev_close>
    rc = os_mbuf_free_chain(m);  assert(rc == 0);
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	f7ff f85f 	bl	8002ade <os_mbuf_free_chain>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d146      	bne.n	8003ab2 <_ZL11oc_tx_ucastP7os_mbuf+0x10a>
}
 8003a24:	bd38      	pop	{r3, r4, r5, pc}
    assert(m);  assert(OS_MBUF_USRHDR_LEN(m) >= sizeof(struct esp8266_endpoint));
 8003a26:	2300      	movs	r3, #0
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fd fee3 	bl	80017f8 <__assert_func>
 8003a32:	2300      	movs	r3, #0
 8003a34:	461a      	mov	r2, r3
 8003a36:	4619      	mov	r1, r3
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fd fedd 	bl	80017f8 <__assert_func>
    assert(endpoint);  assert(endpoint->host);  assert(endpoint->port);  //  Host and endpoint should be in the endpoint.
 8003a3e:	2300      	movs	r3, #0
 8003a40:	461a      	mov	r2, r3
 8003a42:	4619      	mov	r1, r3
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fd fed7 	bl	80017f8 <__assert_func>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fd fed1 	bl	80017f8 <__assert_func>
 8003a56:	2300      	movs	r3, #0
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7fd fecb 	bl	80017f8 <__assert_func>
    assert(server);  assert(endpoint->host == server->endpoint.host);  assert(endpoint->port == server->endpoint.port);  //  We only support 1 server connection. Must match the message endpoint.
 8003a62:	461a      	mov	r2, r3
 8003a64:	4619      	mov	r1, r3
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd fec6 	bl	80017f8 <__assert_func>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	461a      	mov	r2, r3
 8003a70:	4619      	mov	r1, r3
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd fec0 	bl	80017f8 <__assert_func>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd feba 	bl	80017f8 <__assert_func>
    assert(network_device);  assert(socket);
 8003a84:	2300      	movs	r3, #0
 8003a86:	461a      	mov	r2, r3
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fd feb4 	bl	80017f8 <__assert_func>
 8003a90:	461a      	mov	r2, r3
 8003a92:	4619      	mov	r1, r3
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fd feaf 	bl	80017f8 <__assert_func>
        assert(dev != NULL);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fd fea9 	bl	80017f8 <__assert_func>
        assert(rc > 0);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fd fea3 	bl	80017f8 <__assert_func>
    rc = os_mbuf_free_chain(m);  assert(rc == 0);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fd fe9d 	bl	80017f8 <__assert_func>
 8003abe:	bf00      	nop
 8003ac0:	20002810 	.word	0x20002810
 8003ac4:	2000280c 	.word	0x2000280c
 8003ac8:	20002814 	.word	0x20002814
 8003acc:	0800d2b4 	.word	0x0800d2b4

08003ad0 <init_esp8266_endpoint>:
int init_esp8266_endpoint(struct esp8266_endpoint *endpoint, const char *host, uint16_t port) {
 8003ad0:	b410      	push	{r4}
    endpoint->ep.oe_type = transport_id;  //  Populate our transport ID so that OIC will call our functions.
 8003ad2:	7803      	ldrb	r3, [r0, #0]
 8003ad4:	4c06      	ldr	r4, [pc, #24]	; (8003af0 <init_esp8266_endpoint+0x20>)
 8003ad6:	7824      	ldrb	r4, [r4, #0]
 8003ad8:	f364 0302 	bfi	r3, r4, #0, #3
    endpoint->ep.oe_flags = 0;
 8003adc:	f36f 03c7 	bfc	r3, #3, #5
 8003ae0:	7003      	strb	r3, [r0, #0]
    if (host) { 
 8003ae2:	b109      	cbz	r1, 8003ae8 <init_esp8266_endpoint+0x18>
        endpoint->host = host;
 8003ae4:	6041      	str	r1, [r0, #4]
        endpoint->port = port;
 8003ae6:	8102      	strh	r2, [r0, #8]
}
 8003ae8:	2000      	movs	r0, #0
 8003aea:	bc10      	pop	{r4}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	200001a9 	.word	0x200001a9

08003af4 <init_esp8266_server>:
int init_esp8266_server(struct esp8266_server *server, const char *host, uint16_t port) {
 8003af4:	b510      	push	{r4, lr}
 8003af6:	4604      	mov	r4, r0
    int rc = init_esp8266_endpoint(&server->endpoint, host, port);  assert(rc == 0);
 8003af8:	f7ff ffea 	bl	8003ad0 <init_esp8266_endpoint>
 8003afc:	b910      	cbnz	r0, 8003b04 <init_esp8266_server+0x10>
    server->handle = (struct oc_server_handle *) server;
 8003afe:	60e4      	str	r4, [r4, #12]
}
 8003b00:	2000      	movs	r0, #0
 8003b02:	bd10      	pop	{r4, pc}
    int rc = init_esp8266_endpoint(&server->endpoint, host, port);  assert(rc == 0);
 8003b04:	2300      	movs	r3, #0
 8003b06:	461a      	mov	r2, r3
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd fe74 	bl	80017f8 <__assert_func>

08003b10 <esp8266_register_transport>:
int esp8266_register_transport(const char *network_device0, struct esp8266_server *server0, const char *host, uint16_t port) {
 8003b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(network_device0);  assert(server0);
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d035      	beq.n	8003b84 <esp8266_register_transport+0x74>
 8003b18:	460c      	mov	r4, r1
 8003b1a:	4617      	mov	r7, r2
 8003b1c:	4698      	mov	r8, r3
 8003b1e:	4606      	mov	r6, r0
 8003b20:	2900      	cmp	r1, #0
 8003b22:	d035      	beq.n	8003b90 <esp8266_register_transport+0x80>
        struct esp8266 *dev = (struct esp8266 *) os_dev_open(network_device0, OS_TIMEOUT_NEVER, NULL);  //  ESP8266_DEVICE is "esp8266_0"
 8003b24:	2200      	movs	r2, #0
 8003b26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b2a:	f7fe f937 	bl	8001d9c <os_dev_open>
        assert(dev != NULL);
 8003b2e:	4605      	mov	r5, r0
 8003b30:	b3a0      	cbz	r0, 8003b9c <esp8266_register_transport+0x8c>
        transport_id = oc_transport_register(&transport);
 8003b32:	4829      	ldr	r0, [pc, #164]	; (8003bd8 <esp8266_register_transport+0xc8>)
 8003b34:	f003 fbcc 	bl	80072d0 <oc_transport_register>
 8003b38:	4b28      	ldr	r3, [pc, #160]	; (8003bdc <esp8266_register_transport+0xcc>)
 8003b3a:	7018      	strb	r0, [r3, #0]
        int rc = init_esp8266_server(server0, host, port);
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	4639      	mov	r1, r7
 8003b40:	4620      	mov	r0, r4
 8003b42:	f7ff ffd7 	bl	8003af4 <init_esp8266_server>
        assert(rc == 0);
 8003b46:	bb78      	cbnz	r0, 8003ba8 <esp8266_register_transport+0x98>
        rc = esp8266_connect(dev, NULL, NULL);  
 8003b48:	2200      	movs	r2, #0
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	f7ff fe6d 	bl	800382c <esp8266_connect>
        assert(rc == 0);
 8003b52:	bb78      	cbnz	r0, 8003bb4 <esp8266_register_transport+0xa4>
        rc = esp8266_socket_open(dev, &socket, NSAPI_UDP);
 8003b54:	2201      	movs	r2, #1
 8003b56:	4922      	ldr	r1, [pc, #136]	; (8003be0 <esp8266_register_transport+0xd0>)
 8003b58:	4628      	mov	r0, r5
 8003b5a:	f7ff fe93 	bl	8003884 <esp8266_socket_open>
        assert(rc == 0);
 8003b5e:	bb78      	cbnz	r0, 8003bc0 <esp8266_register_transport+0xb0>
        rc = esp8266_socket_connect(dev, socket, server0->endpoint.host, server0->endpoint.port);
 8003b60:	8923      	ldrh	r3, [r4, #8]
 8003b62:	6862      	ldr	r2, [r4, #4]
 8003b64:	491e      	ldr	r1, [pc, #120]	; (8003be0 <esp8266_register_transport+0xd0>)
 8003b66:	6809      	ldr	r1, [r1, #0]
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f7ff febd 	bl	80038e8 <esp8266_socket_connect>
        assert(rc == 0);
 8003b6e:	bb68      	cbnz	r0, 8003bcc <esp8266_register_transport+0xbc>
        network_device = network_device0;
 8003b70:	4b1c      	ldr	r3, [pc, #112]	; (8003be4 <esp8266_register_transport+0xd4>)
 8003b72:	601e      	str	r6, [r3, #0]
        server = server0;
 8003b74:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <esp8266_register_transport+0xd8>)
 8003b76:	601c      	str	r4, [r3, #0]
        os_dev_close((struct os_dev *) dev);
 8003b78:	4628      	mov	r0, r5
 8003b7a:	f7fe f931 	bl	8001de0 <os_dev_close>
}
 8003b7e:	2000      	movs	r0, #0
 8003b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(network_device0);  assert(server0);
 8003b84:	2300      	movs	r3, #0
 8003b86:	461a      	mov	r2, r3
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd fe34 	bl	80017f8 <__assert_func>
 8003b90:	2300      	movs	r3, #0
 8003b92:	461a      	mov	r2, r3
 8003b94:	4619      	mov	r1, r3
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd fe2e 	bl	80017f8 <__assert_func>
        assert(dev != NULL);
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd fe28 	bl	80017f8 <__assert_func>
        assert(rc == 0);
 8003ba8:	2300      	movs	r3, #0
 8003baa:	461a      	mov	r2, r3
 8003bac:	4619      	mov	r1, r3
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fd fe22 	bl	80017f8 <__assert_func>
        assert(rc == 0);
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fd fe1c 	bl	80017f8 <__assert_func>
        assert(rc == 0);
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd fe16 	bl	80017f8 <__assert_func>
        assert(rc == 0);
 8003bcc:	2300      	movs	r3, #0
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fd fe10 	bl	80017f8 <__assert_func>
 8003bd8:	0800d2e0 	.word	0x0800d2e0
 8003bdc:	200001a9 	.word	0x200001a9
 8003be0:	20002814 	.word	0x20002814
 8003be4:	2000280c 	.word	0x2000280c
 8003be8:	20002810 	.word	0x20002810

08003bec <_okfailed>:
//  Logging Functions: Put common strings here to reduce space.

const char *_esp = "ESP ";  //  Trailer for console output

const char *_okfailed(int ok) {
    if (ok) { return " OK\n"; }
 8003bec:	b908      	cbnz	r0, 8003bf2 <_okfailed+0x6>
    return " FAILED\n";
 8003bee:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <_okfailed+0xc>)
}
 8003bf0:	4770      	bx	lr
    if (ok) { return " OK\n"; }
 8003bf2:	4802      	ldr	r0, [pc, #8]	; (8003bfc <_okfailed+0x10>)
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	0800d314 	.word	0x0800d314
 8003bfc:	0800d30c 	.word	0x0800d30c

08003c00 <_log>:

void _log(const char *func, int ok) {
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	4605      	mov	r5, r0
    console_printf("%s%s%s", _esp, func, _okfailed(ok));
 8003c04:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <_log+0x20>)
 8003c06:	681c      	ldr	r4, [r3, #0]
 8003c08:	4608      	mov	r0, r1
 8003c0a:	f7ff ffef 	bl	8003bec <_okfailed>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	462a      	mov	r2, r5
 8003c12:	4621      	mov	r1, r4
 8003c14:	4803      	ldr	r0, [pc, #12]	; (8003c24 <_log+0x24>)
 8003c16:	f002 fb8b 	bl	8006330 <console_printf>
    console_flush();
 8003c1a:	f002 fbcf 	bl	80063bc <console_flush>
}
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
 8003c20:	200001ac 	.word	0x200001ac
 8003c24:	0800d304 	.word	0x0800d304

08003c28 <_ZN7ESP82664initEPcmS0_mS0_mb>:

extern "C" int debug_vrecv;

void ESP8266::init(char *txbuf, uint32_t txbuf_size, char *rxbuf, uint32_t rxbuf_size, 
    char *parserbuf, uint32_t parserbuf_size, bool debug)
{
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	4604      	mov	r4, r0
    _uart = 0;
 8003c2e:	2600      	movs	r6, #0
 8003c30:	4605      	mov	r5, r0
 8003c32:	f845 6b04 	str.w	r6, [r5], #4
    _serial.init(txbuf, txbuf_size, rxbuf, rxbuf_size);
 8003c36:	9601      	str	r6, [sp, #4]
 8003c38:	9808      	ldr	r0, [sp, #32]
 8003c3a:	9000      	str	r0, [sp, #0]
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f000 fc53 	bl	80044e8 <_ZN14BufferedSerial4initEPcmS0_mPKc>
    _parser.init(_serial, parserbuf, parserbuf_size);
 8003c42:	9602      	str	r6, [sp, #8]
 8003c44:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <_ZN7ESP82664initEPcmS0_mS0_mb+0x54>)
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c52:	4629      	mov	r1, r5
 8003c54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003c58:	f000 fa35 	bl	80040c6 <_ZN8ATParser4initER14BufferedSerialPciPKcib>
    _packets = 0;
 8003c5c:	4623      	mov	r3, r4
 8003c5e:	f843 6f8c 	str.w	r6, [r3, #140]!
    _packets_end = &_packets;
 8003c62:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    _serial.baud(115200);
 8003c66:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f000 fd24 	bl	80046b8 <_ZN14BufferedSerial4baudEm>
    * Allows echo to be on or off
    *
    * @param echo 1 for echo and 0 turns it off
    */
    void debugOn(uint8_t on) {
        dbg_on = (on) ? 1 : 0;
 8003c70:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8003c74:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    _parser.debugOn(debug);
}
 8003c78:	b004      	add	sp, #16
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
 8003c7c:	0800d6a8 	.word	0x0800d6a8

08003c80 <_ZN7ESP82669configureEi>:

void ESP8266::configure(int uart) {
 8003c80:	b508      	push	{r3, lr}
    _uart = uart;
 8003c82:	f840 1b04 	str.w	r1, [r0], #4
    _serial.configure(uart);
 8003c86:	f000 fc4f 	bl	8004528 <_ZN14BufferedSerial9configureEi>
}
 8003c8a:	bd08      	pop	{r3, pc}

08003c8c <_ZN7ESP82667setEchoEb>:
void packet_handler(void *arg) {
    assert(arg != NULL);
    ((ESP8266 *)arg)->_packet_handler();
}

bool ESP8266::setEcho(bool echoEnabled) {
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	4606      	mov	r6, r0
    //  Turn command echoing on or off.
    const char *_f = "setEcho";
    console_printf("%s%s %s...\n", _esp, _f, echoEnabled ? "on" : "off"); console_flush(); 
 8003c90:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <_ZN7ESP82667setEchoEb+0x68>)
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	460f      	mov	r7, r1
 8003c96:	b149      	cbz	r1, 8003cac <_ZN7ESP82667setEchoEb+0x20>
 8003c98:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <_ZN7ESP82667setEchoEb+0x6c>)
 8003c9a:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <_ZN7ESP82667setEchoEb+0x70>)
 8003c9c:	4601      	mov	r1, r0
 8003c9e:	4818      	ldr	r0, [pc, #96]	; (8003d00 <_ZN7ESP82667setEchoEb+0x74>)
 8003ca0:	f002 fb46 	bl	8006330 <console_printf>
 8003ca4:	f002 fb8a 	bl	80063bc <console_flush>
    for (int i = 0; i < 2; i++) {  //  Try twice in case of error...
 8003ca8:	2400      	movs	r4, #0
 8003caa:	e007      	b.n	8003cbc <_ZN7ESP82667setEchoEb+0x30>
    console_printf("%s%s %s...\n", _esp, _f, echoEnabled ? "on" : "off"); console_flush(); 
 8003cac:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <_ZN7ESP82667setEchoEb+0x78>)
 8003cae:	e7f4      	b.n	8003c9a <_ZN7ESP82667setEchoEb+0xe>
        if (
            _parser.send(       //  Send echo on or off command.
 8003cb0:	4915      	ldr	r1, [pc, #84]	; (8003d08 <_ZN7ESP82667setEchoEb+0x7c>)
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	f000 fb8c 	bl	80043d0 <_ZN8ATParser4sendEPKcz>
                echoEnabled 
                ? "\r\nATE1"
                : "\r\nATE0"
            ) &&
 8003cb8:	b940      	cbnz	r0, 8003ccc <_ZN7ESP82667setEchoEb+0x40>
    for (int i = 0; i < 2; i++) {  //  Try twice in case of error...
 8003cba:	3401      	adds	r4, #1
 8003cbc:	2c01      	cmp	r4, #1
 8003cbe:	dc11      	bgt.n	8003ce4 <_ZN7ESP82667setEchoEb+0x58>
            _parser.send(       //  Send echo on or off command.
 8003cc0:	f106 0550 	add.w	r5, r6, #80	; 0x50
 8003cc4:	2f00      	cmp	r7, #0
 8003cc6:	d0f3      	beq.n	8003cb0 <_ZN7ESP82667setEchoEb+0x24>
 8003cc8:	4910      	ldr	r1, [pc, #64]	; (8003d0c <_ZN7ESP82667setEchoEb+0x80>)
 8003cca:	e7f2      	b.n	8003cb2 <_ZN7ESP82667setEchoEb+0x26>
            _parser.recv("OK")  //  Wait for OK response.
 8003ccc:	4910      	ldr	r1, [pc, #64]	; (8003d10 <_ZN7ESP82667setEchoEb+0x84>)
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f000 fb8c 	bl	80043ec <_ZN8ATParser4recvEPKcz>
            ) &&
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	d0ef      	beq.n	8003cba <_ZN7ESP82667setEchoEb+0x2e>
        ) {
            _log(_f, true);
 8003cda:	2101      	movs	r1, #1
 8003cdc:	4807      	ldr	r0, [pc, #28]	; (8003cfc <_ZN7ESP82667setEchoEb+0x70>)
 8003cde:	f7ff ff8f 	bl	8003c00 <_log>
            return true; 
 8003ce2:	e004      	b.n	8003cee <_ZN7ESP82667setEchoEb+0x62>
        }
    }
    _log(_f, false);
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4805      	ldr	r0, [pc, #20]	; (8003cfc <_ZN7ESP82667setEchoEb+0x70>)
 8003ce8:	f7ff ff8a 	bl	8003c00 <_log>
    return false;
 8003cec:	2500      	movs	r5, #0
}
 8003cee:	4628      	mov	r0, r5
 8003cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	200001ac 	.word	0x200001ac
 8003cf8:	0800d450 	.word	0x0800d450
 8003cfc:	0800d468 	.word	0x0800d468
 8003d00:	0800d470 	.word	0x0800d470
 8003d04:	0800d454 	.word	0x0800d454
 8003d08:	0800d460 	.word	0x0800d460
 8003d0c:	0800d458 	.word	0x0800d458
 8003d10:	0800d47c 	.word	0x0800d47c

08003d14 <_ZN7ESP82665resetEv>:
    _parser.oob("+IPD", packet_handler, this); //  Call the packet handler when network data is received.
    return success;
}

bool ESP8266::reset(void)
{
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	4606      	mov	r6, r0
    //  debug_vrecv = 1;  ////
    const char *_f = "reset";    
    bool ret = false;
    console_printf("%s%s...\n", _esp, _f); console_flush(); 
 8003d18:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <_ZN7ESP82665resetEv+0x6c>)
 8003d1a:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <_ZN7ESP82665resetEv+0x70>)
 8003d1c:	6819      	ldr	r1, [r3, #0]
 8003d1e:	481a      	ldr	r0, [pc, #104]	; (8003d88 <_ZN7ESP82665resetEv+0x74>)
 8003d20:	f002 fb06 	bl	8006330 <console_printf>
 8003d24:	f002 fb4a 	bl	80063bc <console_flush>
    for (int i = 0; i < 2; i++) {
 8003d28:	2400      	movs	r4, #0
 8003d2a:	e000      	b.n	8003d2e <_ZN7ESP82665resetEv+0x1a>
 8003d2c:	3401      	adds	r4, #1
 8003d2e:	2c01      	cmp	r4, #1
 8003d30:	dc1e      	bgt.n	8003d70 <_ZN7ESP82665resetEv+0x5c>
        if (
            _parser.send("\r\nAT+RST")
 8003d32:	f106 0550 	add.w	r5, r6, #80	; 0x50
 8003d36:	4915      	ldr	r1, [pc, #84]	; (8003d8c <_ZN7ESP82665resetEv+0x78>)
 8003d38:	4628      	mov	r0, r5
 8003d3a:	f000 fb49 	bl	80043d0 <_ZN8ATParser4sendEPKcz>
            && _parser.recv("OK")  //  Wait for response.
#ifndef TOOO
            && _parser.recv("ready")  //  TODO: Wait for response: "ready" or "[System Ready, Vendor:www.ai-thinker.com]"
            && _parser.recv("\r\n")   //  Wait for end of the line
 8003d3e:	2800      	cmp	r0, #0
 8003d40:	d0f4      	beq.n	8003d2c <_ZN7ESP82665resetEv+0x18>
            && _parser.recv("OK")  //  Wait for response.
 8003d42:	4913      	ldr	r1, [pc, #76]	; (8003d90 <_ZN7ESP82665resetEv+0x7c>)
 8003d44:	4628      	mov	r0, r5
 8003d46:	f000 fb51 	bl	80043ec <_ZN8ATParser4recvEPKcz>
 8003d4a:	2800      	cmp	r0, #0
 8003d4c:	d0ee      	beq.n	8003d2c <_ZN7ESP82665resetEv+0x18>
            && _parser.recv("ready")  //  TODO: Wait for response: "ready" or "[System Ready, Vendor:www.ai-thinker.com]"
 8003d4e:	4911      	ldr	r1, [pc, #68]	; (8003d94 <_ZN7ESP82665resetEv+0x80>)
 8003d50:	4628      	mov	r0, r5
 8003d52:	f000 fb4b 	bl	80043ec <_ZN8ATParser4recvEPKcz>
 8003d56:	2800      	cmp	r0, #0
 8003d58:	d0e8      	beq.n	8003d2c <_ZN7ESP82665resetEv+0x18>
            && _parser.recv("\r\n")   //  Wait for end of the line
 8003d5a:	490f      	ldr	r1, [pc, #60]	; (8003d98 <_ZN7ESP82665resetEv+0x84>)
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	f000 fb45 	bl	80043ec <_ZN8ATParser4recvEPKcz>
 8003d62:	4607      	mov	r7, r0
 8003d64:	2800      	cmp	r0, #0
 8003d66:	d0e1      	beq.n	8003d2c <_ZN7ESP82665resetEv+0x18>
#else
            && _parser.recv("jump")  //  Wait for last line of response: "jump to run user1 @ 1000"
            && _parser.recv("\r\n")  //  Wait for end of the line
#endif  //  TODO
        ) {
            _parser.flush();  //  Discard the rest of the response before sending next command.
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f000 f9d0 	bl	800410e <_ZN8ATParser5flushEv>
            ret = true;
            break;
 8003d6e:	e000      	b.n	8003d72 <_ZN7ESP82665resetEv+0x5e>
    bool ret = false;
 8003d70:	2700      	movs	r7, #0
        }
    }
    _log(_f, ret);
 8003d72:	4639      	mov	r1, r7
 8003d74:	4802      	ldr	r0, [pc, #8]	; (8003d80 <_ZN7ESP82665resetEv+0x6c>)
 8003d76:	f7ff ff43 	bl	8003c00 <_log>
    //  debug_vrecv = 0;  ////    
    return true;
}
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	0800d3bc 	.word	0x0800d3bc
 8003d84:	200001ac 	.word	0x200001ac
 8003d88:	0800d3c4 	.word	0x0800d3c4
 8003d8c:	0800d3d0 	.word	0x0800d3d0
 8003d90:	0800d47c 	.word	0x0800d47c
 8003d94:	0800d3dc 	.word	0x0800d3dc
 8003d98:	0800d6a8 	.word	0x0800d6a8

08003d9c <_ZN7ESP82667startupEi>:
{
 8003d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(mode < 1 || mode > 3) {
 8003d9e:	1e4b      	subs	r3, r1, #1
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d902      	bls.n	8003daa <_ZN7ESP82667startupEi+0xe>
        return false;
 8003da4:	2600      	movs	r6, #0
}
 8003da6:	4630      	mov	r0, r6
 8003da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003daa:	460d      	mov	r5, r1
 8003dac:	4604      	mov	r4, r0
        reset()            //  Restart the ESP8266 module.
 8003dae:	f7ff ffb1 	bl	8003d14 <_ZN7ESP82665resetEv>
        && _parser.recv("OK");                 //  Wait for response.
 8003db2:	4606      	mov	r6, r0
 8003db4:	b938      	cbnz	r0, 8003dc6 <_ZN7ESP82667startupEi+0x2a>
    _parser.oob("+IPD", packet_handler, this); //  Call the packet handler when network data is received.
 8003db6:	4623      	mov	r3, r4
 8003db8:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <_ZN7ESP82667startupEi+0x74>)
 8003dba:	4916      	ldr	r1, [pc, #88]	; (8003e14 <_ZN7ESP82667startupEi+0x78>)
 8003dbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003dc0:	f000 fb22 	bl	8004408 <_ZN8ATParser3oobEPKcPFvPvES2_>
    return success;
 8003dc4:	e7ef      	b.n	8003da6 <_ZN7ESP82667startupEi+0xa>
        && setEcho(false)  //  Disable command echo to speed up response processing.
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f7ff ff5f 	bl	8003c8c <_ZN7ESP82667setEchoEb>
 8003dce:	4606      	mov	r6, r0
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d0f0      	beq.n	8003db6 <_ZN7ESP82667startupEi+0x1a>
        && _parser.send("AT+CWMODE=%d", mode)  //  Set the mode to WiFi Client, WiFi Access Point, or both.
 8003dd4:	f104 0750 	add.w	r7, r4, #80	; 0x50
 8003dd8:	462a      	mov	r2, r5
 8003dda:	490f      	ldr	r1, [pc, #60]	; (8003e18 <_ZN7ESP82667startupEi+0x7c>)
 8003ddc:	4638      	mov	r0, r7
 8003dde:	f000 faf7 	bl	80043d0 <_ZN8ATParser4sendEPKcz>
 8003de2:	4606      	mov	r6, r0
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d0e6      	beq.n	8003db6 <_ZN7ESP82667startupEi+0x1a>
        && _parser.recv("OK")                  //  Wait for response.
 8003de8:	490c      	ldr	r1, [pc, #48]	; (8003e1c <_ZN7ESP82667startupEi+0x80>)
 8003dea:	4638      	mov	r0, r7
 8003dec:	f000 fafe 	bl	80043ec <_ZN8ATParser4recvEPKcz>
 8003df0:	4606      	mov	r6, r0
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d0df      	beq.n	8003db6 <_ZN7ESP82667startupEi+0x1a>
        && _parser.send("AT+CIPMUX=1")         //  Allow multiple TCP/UDP connections.
 8003df6:	490a      	ldr	r1, [pc, #40]	; (8003e20 <_ZN7ESP82667startupEi+0x84>)
 8003df8:	4638      	mov	r0, r7
 8003dfa:	f000 fae9 	bl	80043d0 <_ZN8ATParser4sendEPKcz>
 8003dfe:	4606      	mov	r6, r0
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d0d8      	beq.n	8003db6 <_ZN7ESP82667startupEi+0x1a>
        && _parser.recv("OK");                 //  Wait for response.
 8003e04:	4905      	ldr	r1, [pc, #20]	; (8003e1c <_ZN7ESP82667startupEi+0x80>)
 8003e06:	4638      	mov	r0, r7
 8003e08:	f000 faf0 	bl	80043ec <_ZN8ATParser4recvEPKcz>
 8003e0c:	4606      	mov	r6, r0
 8003e0e:	e7d2      	b.n	8003db6 <_ZN7ESP82667startupEi+0x1a>
 8003e10:	080040a1 	.word	0x080040a1
 8003e14:	0800d49c 	.word	0x0800d49c
 8003e18:	0800d480 	.word	0x0800d480
 8003e1c:	0800d47c 	.word	0x0800d47c
 8003e20:	0800d490 	.word	0x0800d490

08003e24 <_ZN7ESP82664dhcpEbi>:

bool ESP8266::dhcp(bool enabled, int mode)
{
    //only 3 valid modes
    if(mode < 0 || mode > 2) {
 8003e24:	2a02      	cmp	r2, #2
 8003e26:	d816      	bhi.n	8003e56 <_ZN7ESP82664dhcpEbi+0x32>
{
 8003e28:	b510      	push	{r4, lr}
        return false;
    }

    return _parser.send("AT+CWDHCP=%d,%d", enabled?1:0, mode)
 8003e2a:	f100 0450 	add.w	r4, r0, #80	; 0x50
 8003e2e:	b151      	cbz	r1, 8003e46 <_ZN7ESP82664dhcpEbi+0x22>
 8003e30:	2101      	movs	r1, #1
 8003e32:	4613      	mov	r3, r2
 8003e34:	460a      	mov	r2, r1
 8003e36:	4909      	ldr	r1, [pc, #36]	; (8003e5c <_ZN7ESP82664dhcpEbi+0x38>)
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f000 fac9 	bl	80043d0 <_ZN8ATParser4sendEPKcz>
        && _parser.recv("OK");
 8003e3e:	4603      	mov	r3, r0
 8003e40:	b918      	cbnz	r0, 8003e4a <_ZN7ESP82664dhcpEbi+0x26>
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	bd10      	pop	{r4, pc}
    return _parser.send("AT+CWDHCP=%d,%d", enabled?1:0, mode)
 8003e46:	2100      	movs	r1, #0
 8003e48:	e7f3      	b.n	8003e32 <_ZN7ESP82664dhcpEbi+0xe>
        && _parser.recv("OK");
 8003e4a:	4905      	ldr	r1, [pc, #20]	; (8003e60 <_ZN7ESP82664dhcpEbi+0x3c>)
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f000 facd 	bl	80043ec <_ZN8ATParser4recvEPKcz>
 8003e52:	4603      	mov	r3, r0
 8003e54:	e7f5      	b.n	8003e42 <_ZN7ESP82664dhcpEbi+0x1e>
        return false;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	4770      	bx	lr
 8003e5c:	0800d354 	.word	0x0800d354
 8003e60:	0800d47c 	.word	0x0800d47c

08003e64 <_ZN7ESP82667connectEPKcS1_>:

bool ESP8266::connect(const char *ap, const char *passPhrase)
{
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	4605      	mov	r5, r0
 8003e68:	460c      	mov	r4, r1
 8003e6a:	4616      	mov	r6, r2
    const char *_f = "connect";
    console_printf("%s%s...\n", _esp, _f);  console_flush();
 8003e6c:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <_ZN7ESP82667connectEPKcS1_+0x50>)
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <_ZN7ESP82667connectEPKcS1_+0x54>)
 8003e70:	6819      	ldr	r1, [r3, #0]
 8003e72:	4812      	ldr	r0, [pc, #72]	; (8003ebc <_ZN7ESP82667connectEPKcS1_+0x58>)
 8003e74:	f002 fa5c 	bl	8006330 <console_printf>
 8003e78:	f002 faa0 	bl	80063bc <console_flush>
    bool ret = _parser.send("AT+CWJAP=\"%s\",\"%s\"", ap, passPhrase)
 8003e7c:	3550      	adds	r5, #80	; 0x50
 8003e7e:	4633      	mov	r3, r6
 8003e80:	4622      	mov	r2, r4
 8003e82:	490f      	ldr	r1, [pc, #60]	; (8003ec0 <_ZN7ESP82667connectEPKcS1_+0x5c>)
 8003e84:	4628      	mov	r0, r5
 8003e86:	f000 faa3 	bl	80043d0 <_ZN8ATParser4sendEPKcz>
        && _parser.recv("OK");
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	b940      	cbnz	r0, 8003ea0 <_ZN7ESP82667connectEPKcS1_+0x3c>
    _log(_f, ret);  
 8003e8e:	4621      	mov	r1, r4
 8003e90:	4808      	ldr	r0, [pc, #32]	; (8003eb4 <_ZN7ESP82667connectEPKcS1_+0x50>)
 8003e92:	f7ff feb5 	bl	8003c00 <_log>
    if (!ret) { console_printf("*** Check WIFI_SSID and WIFI_PASSWORD in targets/bluepill_my_sensor/syscfg.yml\n"); }
 8003e96:	b14c      	cbz	r4, 8003eac <_ZN7ESP82667connectEPKcS1_+0x48>
    console_flush();
 8003e98:	f002 fa90 	bl	80063bc <console_flush>
    return ret;
}
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	bd70      	pop	{r4, r5, r6, pc}
        && _parser.recv("OK");
 8003ea0:	4908      	ldr	r1, [pc, #32]	; (8003ec4 <_ZN7ESP82667connectEPKcS1_+0x60>)
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f000 faa2 	bl	80043ec <_ZN8ATParser4recvEPKcz>
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	e7f0      	b.n	8003e8e <_ZN7ESP82667connectEPKcS1_+0x2a>
    if (!ret) { console_printf("*** Check WIFI_SSID and WIFI_PASSWORD in targets/bluepill_my_sensor/syscfg.yml\n"); }
 8003eac:	4806      	ldr	r0, [pc, #24]	; (8003ec8 <_ZN7ESP82667connectEPKcS1_+0x64>)
 8003eae:	f002 fa3f 	bl	8006330 <console_printf>
 8003eb2:	e7f1      	b.n	8003e98 <_ZN7ESP82667connectEPKcS1_+0x34>
 8003eb4:	0800d3e4 	.word	0x0800d3e4
 8003eb8:	200001ac 	.word	0x200001ac
 8003ebc:	0800d3c4 	.word	0x0800d3c4
 8003ec0:	0800d3ec 	.word	0x0800d3ec
 8003ec4:	0800d47c 	.word	0x0800d47c
 8003ec8:	0800d400 	.word	0x0800d400

08003ecc <_ZN7ESP826612getIPAddressEv>:
{
    return _parser.send("AT+CWQAP") && _parser.recv("OK");
}

const char *ESP8266::getIPAddress(void)
{
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	4604      	mov	r4, r0
    if (!(_parser.send("AT+CIFSR")
 8003ed0:	f100 0550 	add.w	r5, r0, #80	; 0x50
 8003ed4:	490c      	ldr	r1, [pc, #48]	; (8003f08 <_ZN7ESP826612getIPAddressEv+0x3c>)
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f000 fa7a 	bl	80043d0 <_ZN8ATParser4sendEPKcz>
 8003edc:	b168      	cbz	r0, 8003efa <_ZN7ESP826612getIPAddressEv+0x2e>
        && _parser.recv("+CIFSR:STAIP,\"%15[^\"]\"", _ip_buffer)
 8003ede:	3494      	adds	r4, #148	; 0x94
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	490a      	ldr	r1, [pc, #40]	; (8003f0c <_ZN7ESP826612getIPAddressEv+0x40>)
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f000 fa81 	bl	80043ec <_ZN8ATParser4recvEPKcz>
 8003eea:	b140      	cbz	r0, 8003efe <_ZN7ESP826612getIPAddressEv+0x32>
        && _parser.recv("OK"))) {
 8003eec:	4908      	ldr	r1, [pc, #32]	; (8003f10 <_ZN7ESP826612getIPAddressEv+0x44>)
 8003eee:	4628      	mov	r0, r5
 8003ef0:	f000 fa7c 	bl	80043ec <_ZN8ATParser4recvEPKcz>
    if (!(_parser.send("AT+CIFSR")
 8003ef4:	b128      	cbz	r0, 8003f02 <_ZN7ESP826612getIPAddressEv+0x36>
        return 0;
    }

    return _ip_buffer;
}
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 8003efa:	2400      	movs	r4, #0
 8003efc:	e7fb      	b.n	8003ef6 <_ZN7ESP826612getIPAddressEv+0x2a>
 8003efe:	2400      	movs	r4, #0
 8003f00:	e7f9      	b.n	8003ef6 <_ZN7ESP826612getIPAddressEv+0x2a>
 8003f02:	2400      	movs	r4, #0
 8003f04:	e7f7      	b.n	8003ef6 <_ZN7ESP826612getIPAddressEv+0x2a>
 8003f06:	bf00      	nop
 8003f08:	0800d328 	.word	0x0800d328
 8003f0c:	0800d334 	.word	0x0800d334
 8003f10:	0800d47c 	.word	0x0800d47c

08003f14 <_ZN7ESP82664openEPKciS1_i>:
    _log(_f, cnt > 0);
    return cnt;
}

bool ESP8266::open(const char *type, int id, const char* addr, int port)
{
 8003f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f16:	b083      	sub	sp, #12
    const char *_f = "open";
    //IDs only 0-4
    if(id > 4) {
 8003f18:	2a04      	cmp	r2, #4
 8003f1a:	dd03      	ble.n	8003f24 <_ZN7ESP82664openEPKciS1_i+0x10>
        return false;
 8003f1c:	2500      	movs	r5, #0
    console_printf("%s%s...\n", _esp, _f);  console_flush();
    bool ret = _parser.send("AT+CIPSTART=%d,\"%s\",\"%s\",%d", id, type, addr, port)
        && _parser.recv("OK");
    _log(_f, ret);
    return ret;
}
 8003f1e:	4628      	mov	r0, r5
 8003f20:	b003      	add	sp, #12
 8003f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f24:	461f      	mov	r7, r3
 8003f26:	4615      	mov	r5, r2
 8003f28:	460e      	mov	r6, r1
 8003f2a:	4604      	mov	r4, r0
    console_printf("%s%s...\n", _esp, _f);  console_flush();
 8003f2c:	4a0f      	ldr	r2, [pc, #60]	; (8003f6c <_ZN7ESP82664openEPKciS1_i+0x58>)
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <_ZN7ESP82664openEPKciS1_i+0x5c>)
 8003f30:	6819      	ldr	r1, [r3, #0]
 8003f32:	4810      	ldr	r0, [pc, #64]	; (8003f74 <_ZN7ESP82664openEPKciS1_i+0x60>)
 8003f34:	f002 f9fc 	bl	8006330 <console_printf>
 8003f38:	f002 fa40 	bl	80063bc <console_flush>
    bool ret = _parser.send("AT+CIPSTART=%d,\"%s\",\"%s\",%d", id, type, addr, port)
 8003f3c:	3450      	adds	r4, #80	; 0x50
 8003f3e:	9b08      	ldr	r3, [sp, #32]
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	9700      	str	r7, [sp, #0]
 8003f44:	4633      	mov	r3, r6
 8003f46:	462a      	mov	r2, r5
 8003f48:	490b      	ldr	r1, [pc, #44]	; (8003f78 <_ZN7ESP82664openEPKciS1_i+0x64>)
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f000 fa40 	bl	80043d0 <_ZN8ATParser4sendEPKcz>
        && _parser.recv("OK");
 8003f50:	4605      	mov	r5, r0
 8003f52:	b920      	cbnz	r0, 8003f5e <_ZN7ESP82664openEPKciS1_i+0x4a>
    _log(_f, ret);
 8003f54:	4629      	mov	r1, r5
 8003f56:	4805      	ldr	r0, [pc, #20]	; (8003f6c <_ZN7ESP82664openEPKciS1_i+0x58>)
 8003f58:	f7ff fe52 	bl	8003c00 <_log>
    return ret;
 8003f5c:	e7df      	b.n	8003f1e <_ZN7ESP82664openEPKciS1_i+0xa>
        && _parser.recv("OK");
 8003f5e:	4907      	ldr	r1, [pc, #28]	; (8003f7c <_ZN7ESP82664openEPKciS1_i+0x68>)
 8003f60:	4620      	mov	r0, r4
 8003f62:	f000 fa43 	bl	80043ec <_ZN8ATParser4recvEPKcz>
 8003f66:	4605      	mov	r5, r0
 8003f68:	e7f4      	b.n	8003f54 <_ZN7ESP82664openEPKciS1_i+0x40>
 8003f6a:	bf00      	nop
 8003f6c:	0800d364 	.word	0x0800d364
 8003f70:	200001ac 	.word	0x200001ac
 8003f74:	0800d3c4 	.word	0x0800d3c4
 8003f78:	0800d36c 	.word	0x0800d36c
 8003f7c:	0800d47c 	.word	0x0800d47c

08003f80 <_ZN7ESP82668sendMBufEiP7os_mbuf>:
    _log(_f, false);
    return false;
}

bool ESP8266::sendMBuf(int id,  struct os_mbuf *m0)
{
 8003f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f84:	4681      	mov	r9, r0
 8003f86:	4688      	mov	r8, r1
 8003f88:	4617      	mov	r7, r2
    //  Send the chain of mbufs.
    uint32_t amount = OS_MBUF_PKTLEN(m0);  //  Length of the mbuf chain.
 8003f8a:	8a16      	ldrh	r6, [r2, #16]
    const char *_f = "send mbuf";
    console_printf("%s%s %u...\n", _esp, _f, (unsigned) amount);  console_flush();
 8003f8c:	4633      	mov	r3, r6
 8003f8e:	4a26      	ldr	r2, [pc, #152]	; (8004028 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xa8>)
 8003f90:	4926      	ldr	r1, [pc, #152]	; (800402c <_ZN7ESP82668sendMBufEiP7os_mbuf+0xac>)
 8003f92:	6809      	ldr	r1, [r1, #0]
 8003f94:	4826      	ldr	r0, [pc, #152]	; (8004030 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xb0>)
 8003f96:	f002 f9cb 	bl	8006330 <console_printf>
 8003f9a:	f002 fa0f 	bl	80063bc <console_flush>
    //  May take a second try if device is busy
    for (unsigned i = 0; i < 2; i++) {
 8003f9e:	2400      	movs	r4, #0
 8003fa0:	e000      	b.n	8003fa4 <_ZN7ESP82668sendMBufEiP7os_mbuf+0x24>
 8003fa2:	3401      	adds	r4, #1
 8003fa4:	2c01      	cmp	r4, #1
 8003fa6:	d828      	bhi.n	8003ffa <_ZN7ESP82668sendMBufEiP7os_mbuf+0x7a>
        if (_parser.send("AT+CIPSEND=%d,%d", id, amount)
 8003fa8:	f109 0550 	add.w	r5, r9, #80	; 0x50
 8003fac:	4633      	mov	r3, r6
 8003fae:	4642      	mov	r2, r8
 8003fb0:	4920      	ldr	r1, [pc, #128]	; (8004034 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xb4>)
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f000 fa0c 	bl	80043d0 <_ZN8ATParser4sendEPKcz>
            && _parser.recv(">")) {
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	d0f2      	beq.n	8003fa2 <_ZN7ESP82668sendMBufEiP7os_mbuf+0x22>
 8003fbc:	491e      	ldr	r1, [pc, #120]	; (8004038 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xb8>)
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f000 fa14 	bl	80043ec <_ZN8ATParser4recvEPKcz>
 8003fc4:	4682      	mov	sl, r0
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d0eb      	beq.n	8003fa2 <_ZN7ESP82668sendMBufEiP7os_mbuf+0x22>
            struct os_mbuf *m = m0;
            bool failed = false;
            while (m) {  //  For each mbuf in the list...
 8003fca:	b18f      	cbz	r7, 8003ff0 <_ZN7ESP82668sendMBufEiP7os_mbuf+0x70>
                const char *data = OS_MBUF_DATA(m, const char *);  //  Fetch the data.
 8003fcc:	683c      	ldr	r4, [r7, #0]
                int size = m->om_len;  //  Fetch the size.
 8003fce:	88fe      	ldrh	r6, [r7, #6]
                console_dump((const uint8_t *) data, size); console_printf("\n");
 8003fd0:	4631      	mov	r1, r6
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f002 fa86 	bl	80064e4 <console_dump>
 8003fd8:	4818      	ldr	r0, [pc, #96]	; (800403c <_ZN7ESP82668sendMBufEiP7os_mbuf+0xbc>)
 8003fda:	f002 f9a9 	bl	8006330 <console_printf>
                if (_parser.write(data, size) < 0) {   //  If the writing failed, retry.
 8003fde:	4632      	mov	r2, r6
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f000 f89f 	bl	8004126 <_ZN8ATParser5writeEPKci>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	db03      	blt.n	8003ff4 <_ZN7ESP82668sendMBufEiP7os_mbuf+0x74>
                    failed = true;
                    break;
                }
                m = m->om_next.sle_next;   //  Fetch next mbuf in the list.
 8003fec:	68ff      	ldr	r7, [r7, #12]
            while (m) {  //  For each mbuf in the list...
 8003fee:	e7ec      	b.n	8003fca <_ZN7ESP82668sendMBufEiP7os_mbuf+0x4a>
            bool failed = false;
 8003ff0:	f04f 0a00 	mov.w	sl, #0
            }
            if (failed) { break; }
 8003ff4:	f1ba 0f00 	cmp.w	sl, #0
 8003ff8:	d007      	beq.n	800400a <_ZN7ESP82668sendMBufEiP7os_mbuf+0x8a>
            if (!_parser.recv("SEND OK")) { break; }
            _log(_f, true);  console_flush();
            return true;
        }
    }
    _log(_f, false);
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	480a      	ldr	r0, [pc, #40]	; (8004028 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xa8>)
 8003ffe:	f7ff fdff 	bl	8003c00 <_log>
    return false;
 8004002:	2400      	movs	r4, #0
}
 8004004:	4620      	mov	r0, r4
 8004006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (!_parser.recv("SEND OK")) { break; }
 800400a:	490d      	ldr	r1, [pc, #52]	; (8004040 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xc0>)
 800400c:	4628      	mov	r0, r5
 800400e:	f000 f9ed 	bl	80043ec <_ZN8ATParser4recvEPKcz>
 8004012:	4604      	mov	r4, r0
 8004014:	2800      	cmp	r0, #0
 8004016:	d0f0      	beq.n	8003ffa <_ZN7ESP82668sendMBufEiP7os_mbuf+0x7a>
            _log(_f, true);  console_flush();
 8004018:	2101      	movs	r1, #1
 800401a:	4803      	ldr	r0, [pc, #12]	; (8004028 <_ZN7ESP82668sendMBufEiP7os_mbuf+0xa8>)
 800401c:	f7ff fdf0 	bl	8003c00 <_log>
 8004020:	f002 f9cc 	bl	80063bc <console_flush>
 8004024:	e7ee      	b.n	8004004 <_ZN7ESP82668sendMBufEiP7os_mbuf+0x84>
 8004026:	bf00      	nop
 8004028:	0800d4a4 	.word	0x0800d4a4
 800402c:	200001ac 	.word	0x200001ac
 8004030:	0800d390 	.word	0x0800d390
 8004034:	0800d39c 	.word	0x0800d39c
 8004038:	0800d3b0 	.word	0x0800d3b0
 800403c:	0800d5fc 	.word	0x0800d5fc
 8004040:	0800d3b4 	.word	0x0800d3b4

08004044 <_ZN7ESP826615_packet_handlerEv>:

void ESP8266::_packet_handler()
{
 8004044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004046:	b083      	sub	sp, #12
 8004048:	4604      	mov	r4, r0
    int id;
    uint32_t amount;

    // parse out the packet
    if (!_parser.recv(",%d,%d:", &id, &amount)) {
 800404a:	f100 0550 	add.w	r5, r0, #80	; 0x50
 800404e:	466b      	mov	r3, sp
 8004050:	aa01      	add	r2, sp, #4
 8004052:	4912      	ldr	r1, [pc, #72]	; (800409c <_ZN7ESP826615_packet_handlerEv+0x58>)
 8004054:	4628      	mov	r0, r5
 8004056:	f000 f9c9 	bl	80043ec <_ZN8ATParser4recvEPKcz>
 800405a:	b908      	cbnz	r0, 8004060 <_ZN7ESP826615_packet_handlerEv+0x1c>
    }

    // append to packet list
    *_packets_end = packet;
    _packets_end = &packet->next;
}
 800405c:	b003      	add	sp, #12
 800405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    struct packet *packet = (struct packet*)malloc(
 8004060:	9f00      	ldr	r7, [sp, #0]
            sizeof(struct packet) + amount);
 8004062:	f107 000c 	add.w	r0, r7, #12
 8004066:	f7fe ffbb 	bl	8002fe0 <malloc>
    if (!packet) {
 800406a:	4606      	mov	r6, r0
 800406c:	2800      	cmp	r0, #0
 800406e:	d0f5      	beq.n	800405c <_ZN7ESP826615_packet_handlerEv+0x18>
    packet->id = id;
 8004070:	9b01      	ldr	r3, [sp, #4]
 8004072:	6043      	str	r3, [r0, #4]
    packet->len = amount;
 8004074:	6087      	str	r7, [r0, #8]
    packet->next = 0;
 8004076:	4601      	mov	r1, r0
 8004078:	2300      	movs	r3, #0
 800407a:	f841 3b0c 	str.w	r3, [r1], #12
    if (!(_parser.read((char*)(packet + 1), amount))) {
 800407e:	9a00      	ldr	r2, [sp, #0]
 8004080:	4628      	mov	r0, r5
 8004082:	f000 f863 	bl	800414c <_ZN8ATParser4readEPci>
 8004086:	b128      	cbz	r0, 8004094 <_ZN7ESP826615_packet_handlerEv+0x50>
    *_packets_end = packet;
 8004088:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800408c:	601e      	str	r6, [r3, #0]
    _packets_end = &packet->next;
 800408e:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 8004092:	e7e3      	b.n	800405c <_ZN7ESP826615_packet_handlerEv+0x18>
        free(packet);
 8004094:	4630      	mov	r0, r6
 8004096:	f7fe ffd9 	bl	800304c <free>
        return;
 800409a:	e7df      	b.n	800405c <_ZN7ESP826615_packet_handlerEv+0x18>
 800409c:	0800d34c 	.word	0x0800d34c

080040a0 <_Z14packet_handlerPv>:
void packet_handler(void *arg) {
 80040a0:	b508      	push	{r3, lr}
    assert(arg != NULL);
 80040a2:	b110      	cbz	r0, 80040aa <_Z14packet_handlerPv+0xa>
    ((ESP8266 *)arg)->_packet_handler();
 80040a4:	f7ff ffce 	bl	8004044 <_ZN7ESP826615_packet_handlerEv>
}
 80040a8:	bd08      	pop	{r3, pc}
    assert(arg != NULL);
 80040aa:	2300      	movs	r3, #0
 80040ac:	461a      	mov	r2, r3
 80040ae:	4619      	mov	r1, r3
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fd fba1 	bl	80017f8 <__assert_func>

080040b6 <_ZN7ESP826610setTimeoutEm>:
        _timeout = timeout;
 80040b6:	65c1      	str	r1, [r0, #92]	; 0x5c
}

void ESP8266::setTimeout(uint32_t timeout_ms)
{
    _parser.setTimeout(timeout_ms);
}
 80040b8:	4770      	bx	lr

080040ba <_ZN7ESP82666attachEPFvPvES0_>:
{
    return _serial.writeable();
}

void ESP8266::attach(void (*func)(void *), void *arg)
{
 80040ba:	b508      	push	{r3, lr}
    _serial.attach(func, arg);
 80040bc:	2300      	movs	r3, #0
 80040be:	3004      	adds	r0, #4
 80040c0:	f000 faee 	bl	80046a0 <_ZN14BufferedSerial6attachEPFvPvES0_i>
}
 80040c4:	bd08      	pop	{r3, pc}

080040c6 <_ZN8ATParser4initER14BufferedSerialPciPKcib>:
//  #define debug_if(dbg_on, format, arg) {}

extern "C" int debug_vrecv; int debug_vrecv = 0;  ////

void ATParser::init(BufferedSerial &serial, char *buffer, int buffer_size, const char *delimiter, int timeout, bool debug)
{
 80040c6:	b510      	push	{r4, lr}
 80040c8:	4604      	mov	r4, r0
 80040ca:	9802      	ldr	r0, [sp, #8]
    _serial = &serial;
 80040cc:	6021      	str	r1, [r4, #0]
    _buffer = buffer;
 80040ce:	6062      	str	r2, [r4, #4]
    _buffer_size = buffer_size; 
 80040d0:	60a3      	str	r3, [r4, #8]
 80040d2:	9b03      	ldr	r3, [sp, #12]
 80040d4:	60e3      	str	r3, [r4, #12]
        _delimiter = delimiter;
 80040d6:	6120      	str	r0, [r4, #16]
        _delim_size = strlen(delimiter);
 80040d8:	f008 f9fa 	bl	800c4d0 <strlen>
 80040dc:	6160      	str	r0, [r4, #20]
        dbg_on = (on) ? 1 : 0;
 80040de:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80040e2:	7623      	strb	r3, [r4, #24]
    setTimeout(timeout);
    setDelimiter(delimiter);
    debugOn(debug);
    for (int k = 0; k < MAX_OOBS; k++) { _oobs[k].len = 0; }  //  Init the callbacks.
 80040e4:	2300      	movs	r3, #0
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	dc05      	bgt.n	80040f6 <_ZN8ATParser4initER14BufferedSerialPciPKcib+0x30>
 80040ea:	eb04 1203 	add.w	r2, r4, r3, lsl #4
 80040ee:	2100      	movs	r1, #0
 80040f0:	61d1      	str	r1, [r2, #28]
 80040f2:	3301      	adds	r3, #1
 80040f4:	e7f7      	b.n	80040e6 <_ZN8ATParser4initER14BufferedSerialPciPKcib+0x20>
}
 80040f6:	bd10      	pop	{r4, pc}

080040f8 <_ZN8ATParser4putcEc>:

// getc/putc handling with timeouts
int ATParser::putc(char c)
{
 80040f8:	b508      	push	{r3, lr}
    //  TODO: Handle timeout.
    return _serial->putc(c);
 80040fa:	6800      	ldr	r0, [r0, #0]
 80040fc:	f000 fabd 	bl	800467a <_ZN14BufferedSerial4putcEi>
}
 8004100:	bd08      	pop	{r3, pc}

08004102 <_ZN8ATParser5fgetcEv>:

int ATParser::getc()
{
 8004102:	b508      	push	{r3, lr}
    //  Return the next received byte.  If no data, block until the timeout.
    return _serial->getc(_timeout);
 8004104:	68c1      	ldr	r1, [r0, #12]
 8004106:	6800      	ldr	r0, [r0, #0]
 8004108:	f000 fa16 	bl	8004538 <_ZN14BufferedSerial5fgetcEi>
}
 800410c:	bd08      	pop	{r3, pc}

0800410e <_ZN8ATParser5flushEv>:

void ATParser::flush()
{
 800410e:	b510      	push	{r4, lr}
 8004110:	4604      	mov	r4, r0
    while (_serial->readable()) {
 8004112:	6820      	ldr	r0, [r4, #0]
 8004114:	f000 fa0a 	bl	800452c <_ZN14BufferedSerial8readableEv>
 8004118:	b120      	cbz	r0, 8004124 <_ZN8ATParser5flushEv+0x16>
        _serial->getc(0);  //  Do not wait for data to be available.
 800411a:	2100      	movs	r1, #0
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	f000 fa0b 	bl	8004538 <_ZN14BufferedSerial5fgetcEi>
    while (_serial->readable()) {
 8004122:	e7f6      	b.n	8004112 <_ZN8ATParser5flushEv+0x4>
    }
}
 8004124:	bd10      	pop	{r4, pc}

08004126 <_ZN8ATParser5writeEPKci>:


// read/write handling with timeouts
int ATParser::write(const char *data, int size)
{
 8004126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004128:	4607      	mov	r7, r0
 800412a:	460e      	mov	r6, r1
 800412c:	4615      	mov	r5, r2
    int i = 0;
 800412e:	2400      	movs	r4, #0
    for ( ; i < size; i++) {
 8004130:	42ac      	cmp	r4, r5
 8004132:	da09      	bge.n	8004148 <_ZN8ATParser5writeEPKci+0x22>
        if (putc(data[i]) < 0) {
 8004134:	5d31      	ldrb	r1, [r6, r4]
 8004136:	4638      	mov	r0, r7
 8004138:	f7ff ffde 	bl	80040f8 <_ZN8ATParser4putcEc>
 800413c:	2800      	cmp	r0, #0
 800413e:	db01      	blt.n	8004144 <_ZN8ATParser5writeEPKci+0x1e>
    for ( ; i < size; i++) {
 8004140:	3401      	adds	r4, #1
 8004142:	e7f5      	b.n	8004130 <_ZN8ATParser5writeEPKci+0xa>
            return -1;
 8004144:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        }
    }
    return i;
}
 8004148:	4620      	mov	r0, r4
 800414a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800414c <_ZN8ATParser4readEPci>:

int ATParser::read(char *data, int size)
{
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	4606      	mov	r6, r0
 8004150:	460f      	mov	r7, r1
 8004152:	4615      	mov	r5, r2
    int i = 0;
 8004154:	2400      	movs	r4, #0
    for ( ; i < size; i++) {
 8004156:	42ac      	cmp	r4, r5
 8004158:	da09      	bge.n	800416e <_ZN8ATParser4readEPci+0x22>
        int c = getc();
 800415a:	4630      	mov	r0, r6
 800415c:	f7ff ffd1 	bl	8004102 <_ZN8ATParser5fgetcEv>
        if (c < 0) {
 8004160:	2800      	cmp	r0, #0
 8004162:	db02      	blt.n	800416a <_ZN8ATParser4readEPci+0x1e>
            return -1;
        }
        data[i] = c;
 8004164:	5538      	strb	r0, [r7, r4]
    for ( ; i < size; i++) {
 8004166:	3401      	adds	r4, #1
 8004168:	e7f5      	b.n	8004156 <_ZN8ATParser4readEPci+0xa>
            return -1;
 800416a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    }
    return i;
}
 800416e:	4620      	mov	r0, r4
 8004170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004174 <_ZN8ATParser5vsendEPKcSt9__va_list>:
}


// Command parsing with line handling
bool ATParser::vsend(const char *command, va_list args)
{
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	4604      	mov	r4, r0
    // Create and send command
    if (vsprintf(_buffer, command, args) < 0) {
 8004178:	6840      	ldr	r0, [r0, #4]
 800417a:	f008 fd23 	bl	800cbc4 <vsprintf>
 800417e:	2800      	cmp	r0, #0
 8004180:	db1b      	blt.n	80041ba <_ZN8ATParser5vsendEPKcSt9__va_list+0x46>
        return false;
    }
    for (int i = 0; _buffer[i]; i++) {
 8004182:	2500      	movs	r5, #0
 8004184:	6863      	ldr	r3, [r4, #4]
 8004186:	5d59      	ldrb	r1, [r3, r5]
 8004188:	b131      	cbz	r1, 8004198 <_ZN8ATParser5vsendEPKcSt9__va_list+0x24>
        if (putc(_buffer[i]) < 0) {
 800418a:	4620      	mov	r0, r4
 800418c:	f7ff ffb4 	bl	80040f8 <_ZN8ATParser4putcEc>
 8004190:	2800      	cmp	r0, #0
 8004192:	db14      	blt.n	80041be <_ZN8ATParser5vsendEPKcSt9__va_list+0x4a>
    for (int i = 0; _buffer[i]; i++) {
 8004194:	3501      	adds	r5, #1
 8004196:	e7f5      	b.n	8004184 <_ZN8ATParser5vsendEPKcSt9__va_list+0x10>
            return false;
        }
    }

    // Finish with newline
    for (int i = 0; _delimiter[i]; i++) {
 8004198:	2500      	movs	r5, #0
 800419a:	6923      	ldr	r3, [r4, #16]
 800419c:	5d59      	ldrb	r1, [r3, r5]
 800419e:	b131      	cbz	r1, 80041ae <_ZN8ATParser5vsendEPKcSt9__va_list+0x3a>
        if (putc(_delimiter[i]) < 0) {
 80041a0:	4620      	mov	r0, r4
 80041a2:	f7ff ffa9 	bl	80040f8 <_ZN8ATParser4putcEc>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	db0b      	blt.n	80041c2 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4e>
    for (int i = 0; _delimiter[i]; i++) {
 80041aa:	3501      	adds	r5, #1
 80041ac:	e7f5      	b.n	800419a <_ZN8ATParser5vsendEPKcSt9__va_list+0x26>
            return false;
        }
    }

    debug_if(dbg_on, "AT> %s\r\n", _buffer);
 80041ae:	6861      	ldr	r1, [r4, #4]
 80041b0:	4805      	ldr	r0, [pc, #20]	; (80041c8 <_ZN8ATParser5vsendEPKcSt9__va_list+0x54>)
 80041b2:	f002 f8bd 	bl	8006330 <console_printf>
    return true;
 80041b6:	2001      	movs	r0, #1
 80041b8:	e002      	b.n	80041c0 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4c>
        return false;
 80041ba:	2000      	movs	r0, #0
 80041bc:	e000      	b.n	80041c0 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4c>
            return false;
 80041be:	2000      	movs	r0, #0
}
 80041c0:	bd38      	pop	{r3, r4, r5, pc}
            return false;
 80041c2:	2000      	movs	r0, #0
 80041c4:	e7fc      	b.n	80041c0 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4c>
 80041c6:	bf00      	nop
 80041c8:	0800d518 	.word	0x0800d518

080041cc <_ZN8ATParser5vrecvEPKcSt9__va_list>:

bool ATParser::vrecv(const char *response, va_list args)
{
 80041cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d0:	b087      	sub	sp, #28
 80041d2:	4605      	mov	r5, r0
 80041d4:	460f      	mov	r7, r1
 80041d6:	9201      	str	r2, [sp, #4]
    // Iterate through each line in the expected response
    while (response[0]) {
 80041d8:	783b      	ldrb	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80e7 	beq.w	80043ae <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e2>
        // Since response is const, we need to copy it into our buffer to
        // add the line's null terminator and clobber value-matches with asterisks.
        //
        // We just use the beginning of the buffer to avoid unnecessary allocations.
        int i = 0;
        int offset = 0;
 80041e0:	f04f 0800 	mov.w	r8, #0
        int i = 0;
 80041e4:	4644      	mov	r4, r8
 80041e6:	e004      	b.n	80041f2 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x26>
            } else if (response[i] == '%' && response[i+1] != '%' && response[i+1] != '*') {
                _buffer[offset++] = '%';
                _buffer[offset++] = '*';
                i++;
            } else {
                _buffer[offset++] = response[i++];
 80041e8:	686b      	ldr	r3, [r5, #4]
 80041ea:	f803 6008 	strb.w	r6, [r3, r8]
 80041ee:	f108 0801 	add.w	r8, r8, #1
        while (response[i]) {
 80041f2:	46a1      	mov	r9, r4
 80041f4:	5d3e      	ldrb	r6, [r7, r4]
 80041f6:	b1e6      	cbz	r6, 8004232 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x66>
            if (memcmp(&response[i+1-_delim_size], _delimiter, _delim_size) == 0) {
 80041f8:	3401      	adds	r4, #1
 80041fa:	696a      	ldr	r2, [r5, #20]
 80041fc:	1aa0      	subs	r0, r4, r2
 80041fe:	6929      	ldr	r1, [r5, #16]
 8004200:	4438      	add	r0, r7
 8004202:	f7fe ff39 	bl	8003078 <memcmp>
 8004206:	b1a0      	cbz	r0, 8004232 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x66>
            } else if (response[i] == '%' && response[i+1] != '%' && response[i+1] != '*') {
 8004208:	2e25      	cmp	r6, #37	; 0x25
 800420a:	d1ed      	bne.n	80041e8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1c>
 800420c:	44b9      	add	r9, r7
 800420e:	f899 3001 	ldrb.w	r3, [r9, #1]
 8004212:	2b25      	cmp	r3, #37	; 0x25
 8004214:	d0e8      	beq.n	80041e8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1c>
 8004216:	2b2a      	cmp	r3, #42	; 0x2a
 8004218:	d0e6      	beq.n	80041e8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1c>
                _buffer[offset++] = '%';
 800421a:	686a      	ldr	r2, [r5, #4]
 800421c:	f108 0301 	add.w	r3, r8, #1
 8004220:	2125      	movs	r1, #37	; 0x25
 8004222:	f802 1008 	strb.w	r1, [r2, r8]
                _buffer[offset++] = '*';
 8004226:	686a      	ldr	r2, [r5, #4]
 8004228:	212a      	movs	r1, #42	; 0x2a
 800422a:	54d1      	strb	r1, [r2, r3]
 800422c:	f108 0802 	add.w	r8, r8, #2
                i++;
 8004230:	e7df      	b.n	80041f2 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x26>
        }

        // Scanf has very poor support for catching errors
        // fortunately, we can abuse the %n specifier to determine
        // if the entire string was matched.
        _buffer[offset++] = '%';
 8004232:	686a      	ldr	r2, [r5, #4]
 8004234:	f108 0301 	add.w	r3, r8, #1
 8004238:	2125      	movs	r1, #37	; 0x25
 800423a:	f802 1008 	strb.w	r1, [r2, r8]
        _buffer[offset++] = 'n';
 800423e:	6869      	ldr	r1, [r5, #4]
 8004240:	f108 0202 	add.w	r2, r8, #2
 8004244:	206e      	movs	r0, #110	; 0x6e
 8004246:	54c8      	strb	r0, [r1, r3]
        _buffer[offset++] = 0;
 8004248:	6869      	ldr	r1, [r5, #4]
 800424a:	f108 0603 	add.w	r6, r8, #3
 800424e:	2300      	movs	r3, #0
 8004250:	548b      	strb	r3, [r1, r2]
        // format string that only stores the matched characters (%n).
        // The other reads in the actual matched values.
        //
        // We keep trying the match until we succeed or some other error
        // derails us.
        int j = 0, last_count = -1; char *last_scan = _buffer;
 8004252:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8004256:	469b      	mov	fp, r3

        while (true) {
            // Recieve next character
            int c = getc();
 8004258:	4628      	mov	r0, r5
 800425a:	f7ff ff52 	bl	8004102 <_ZN8ATParser5fgetcEv>
            if (c < 0) {
 800425e:	f1b0 0800 	subs.w	r8, r0, #0
 8004262:	da0a      	bge.n	800427a <_ZN8ATParser5vrecvEPKcSt9__va_list+0xae>
                console_printf("AT response mismatch: found \"%s\"\n   expected \"%s\"\n", last_scan, _buffer);  console_flush();
 8004264:	686a      	ldr	r2, [r5, #4]
 8004266:	4649      	mov	r1, r9
 8004268:	4852      	ldr	r0, [pc, #328]	; (80043b4 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e8>)
 800426a:	f002 f861 	bl	8006330 <console_printf>
 800426e:	f002 f8a5 	bl	80063bc <console_flush>
                return false;
 8004272:	2000      	movs	r0, #0
            }
        }
    }

    return true;
}
 8004274:	b007      	add	sp, #28
 8004276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            _buffer[offset + j++] = c;
 800427a:	686a      	ldr	r2, [r5, #4]
 800427c:	f10b 0a01 	add.w	sl, fp, #1
 8004280:	eb0b 0306 	add.w	r3, fp, r6
 8004284:	f802 8003 	strb.w	r8, [r2, r3]
            _buffer[offset + j] = 0;
 8004288:	686b      	ldr	r3, [r5, #4]
 800428a:	eb06 020a 	add.w	r2, r6, sl
 800428e:	9202      	str	r2, [sp, #8]
 8004290:	f04f 0900 	mov.w	r9, #0
 8004294:	f803 9002 	strb.w	r9, [r3, r2]
 8004298:	e001      	b.n	800429e <_ZN8ATParser5vrecvEPKcSt9__va_list+0xd2>
            for (int k = 0; k < MAX_OOBS; k++) {
 800429a:	f109 0901 	add.w	r9, r9, #1
 800429e:	f1b9 0f01 	cmp.w	r9, #1
 80042a2:	dc20      	bgt.n	80042e6 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x11a>
                if (_oobs[k].len == 0) { continue; }  //  Skip empty callbacks.
 80042a4:	eb05 1309 	add.w	r3, r5, r9, lsl #4
 80042a8:	69da      	ldr	r2, [r3, #28]
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	d0f5      	beq.n	800429a <_ZN8ATParser5vrecvEPKcSt9__va_list+0xce>
                if (
 80042ae:	4552      	cmp	r2, sl
 80042b0:	d1f3      	bne.n	800429a <_ZN8ATParser5vrecvEPKcSt9__va_list+0xce>
                    memcmp(_oobs[k].prefix, _buffer+offset, _oobs[k].len) == 0
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	9303      	str	r3, [sp, #12]
 80042b6:	6869      	ldr	r1, [r5, #4]
 80042b8:	4431      	add	r1, r6
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe fedc 	bl	8003078 <memcmp>
                    j == (int) _oobs[k].len && 
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d1ea      	bne.n	800429a <_ZN8ATParser5vrecvEPKcSt9__va_list+0xce>
                    debug_if(dbg_on, "AT! %s\r\n", _oobs[k].prefix);
 80042c4:	9903      	ldr	r1, [sp, #12]
 80042c6:	483c      	ldr	r0, [pc, #240]	; (80043b8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1ec>)
 80042c8:	f002 f832 	bl	8006330 <console_printf>
                    _oobs[k].cb(_oobs[k].arg);
 80042cc:	f109 0302 	add.w	r3, r9, #2
 80042d0:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	6898      	ldr	r0, [r3, #8]
 80042d8:	4790      	blx	r2
                    return vrecv(response, args);
 80042da:	9a01      	ldr	r2, [sp, #4]
 80042dc:	4639      	mov	r1, r7
 80042de:	4628      	mov	r0, r5
 80042e0:	f7ff ff74 	bl	80041cc <_ZN8ATParser5vrecvEPKcSt9__va_list>
 80042e4:	e7c6      	b.n	8004274 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xa8>
            int count = -1;
 80042e6:	aa06      	add	r2, sp, #24
 80042e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042ec:	f842 3d04 	str.w	r3, [r2, #-4]!
            sscanf(_buffer+offset, _buffer, &count);
 80042f0:	6868      	ldr	r0, [r5, #4]
 80042f2:	9603      	str	r6, [sp, #12]
 80042f4:	4601      	mov	r1, r0
 80042f6:	4430      	add	r0, r6
 80042f8:	f008 f8dc 	bl	800c4b4 <sscanf>
            last_count = count; last_scan = _buffer + offset;
 80042fc:	9905      	ldr	r1, [sp, #20]
 80042fe:	686b      	ldr	r3, [r5, #4]
 8004300:	eb03 0906 	add.w	r9, r3, r6
            if (debug_vrecv && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 8004304:	4a2d      	ldr	r2, [pc, #180]	; (80043bc <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f0>)
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	b112      	cbz	r2, 8004310 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
 800430a:	f1b8 0f0a 	cmp.w	r8, #10
 800430e:	d01c      	beq.n	800434a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x17e>
            if (count == j) {
 8004310:	9b05      	ldr	r3, [sp, #20]
 8004312:	4553      	cmp	r3, sl
 8004314:	d02a      	beq.n	800436c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1a0>
            if (j+1 >= _buffer_size - offset ||
 8004316:	f10b 0b02 	add.w	fp, fp, #2
 800431a:	68ab      	ldr	r3, [r5, #8]
 800431c:	1b9b      	subs	r3, r3, r6
 800431e:	459b      	cmp	fp, r3
 8004320:	da09      	bge.n	8004336 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x16a>
                strcmp(&_buffer[offset + j-_delim_size], _delimiter) == 0) {
 8004322:	6868      	ldr	r0, [r5, #4]
 8004324:	696b      	ldr	r3, [r5, #20]
 8004326:	9a02      	ldr	r2, [sp, #8]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	6929      	ldr	r1, [r5, #16]
 800432c:	4418      	add	r0, r3
 800432e:	f7fe fedf 	bl	80030f0 <strcmp>
            if (j+1 >= _buffer_size - offset ||
 8004332:	2800      	cmp	r0, #0
 8004334:	d136      	bne.n	80043a4 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d8>
                if (_buffer[offset] != '\r' && _buffer[offset] != '\n') {  //  Skip blank lines.
 8004336:	686b      	ldr	r3, [r5, #4]
 8004338:	1999      	adds	r1, r3, r6
 800433a:	5d9b      	ldrb	r3, [r3, r6]
 800433c:	2b0d      	cmp	r3, #13
 800433e:	d033      	beq.n	80043a8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1dc>
 8004340:	2b0a      	cmp	r3, #10
 8004342:	d129      	bne.n	8004398 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1cc>
                j = 0;
 8004344:	f04f 0b00 	mov.w	fp, #0
        }
 8004348:	e786      	b.n	8004258 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x8c>
            if (debug_vrecv && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 800434a:	5d9b      	ldrb	r3, [r3, r6]
 800434c:	2b0a      	cmp	r3, #10
 800434e:	d0df      	beq.n	8004310 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
 8004350:	2b0d      	cmp	r3, #13
 8004352:	d0dd      	beq.n	8004310 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
                if (last_count > 0) { console_printf("  < %d / %s", last_count, last_scan); }
 8004354:	2900      	cmp	r1, #0
 8004356:	dd04      	ble.n	8004362 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x196>
 8004358:	464a      	mov	r2, r9
 800435a:	4819      	ldr	r0, [pc, #100]	; (80043c0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f4>)
 800435c:	f001 ffe8 	bl	8006330 <console_printf>
 8004360:	e7d6      	b.n	8004310 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
                else { console_printf("  < %s", last_scan); }
 8004362:	4649      	mov	r1, r9
 8004364:	4817      	ldr	r0, [pc, #92]	; (80043c4 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f8>)
 8004366:	f001 ffe3 	bl	8006330 <console_printf>
 800436a:	e7d1      	b.n	8004310 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x144>
                debug_if(dbg_on, "AT= %s\r\n", _buffer+offset);
 800436c:	6869      	ldr	r1, [r5, #4]
 800436e:	9e03      	ldr	r6, [sp, #12]
 8004370:	4431      	add	r1, r6
 8004372:	4815      	ldr	r0, [pc, #84]	; (80043c8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1fc>)
 8004374:	f001 ffdc 	bl	8006330 <console_printf>
                memcpy(_buffer, response, i);
 8004378:	4622      	mov	r2, r4
 800437a:	4639      	mov	r1, r7
 800437c:	6868      	ldr	r0, [r5, #4]
 800437e:	f7fe fe9f 	bl	80030c0 <memcpy>
                _buffer[i] = 0;
 8004382:	686b      	ldr	r3, [r5, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	551a      	strb	r2, [r3, r4]
                vsscanf(_buffer+offset, _buffer, args);
 8004388:	6868      	ldr	r0, [r5, #4]
 800438a:	9a01      	ldr	r2, [sp, #4]
 800438c:	4601      	mov	r1, r0
 800438e:	4430      	add	r0, r6
 8004390:	f003 fa68 	bl	8007864 <vsscanf>
                response += i;
 8004394:	4427      	add	r7, r4
 8004396:	e71f      	b.n	80041d8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xc>
                    debug_if(dbg_on, "AT< %s", _buffer+offset);
 8004398:	480c      	ldr	r0, [pc, #48]	; (80043cc <_ZN8ATParser5vrecvEPKcSt9__va_list+0x200>)
 800439a:	f001 ffc9 	bl	8006330 <console_printf>
                j = 0;
 800439e:	f04f 0b00 	mov.w	fp, #0
 80043a2:	e759      	b.n	8004258 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x8c>
            _buffer[offset + j++] = c;
 80043a4:	46d3      	mov	fp, sl
 80043a6:	e757      	b.n	8004258 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x8c>
                j = 0;
 80043a8:	f04f 0b00 	mov.w	fp, #0
 80043ac:	e754      	b.n	8004258 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x8c>
    return true;
 80043ae:	2001      	movs	r0, #1
 80043b0:	e760      	b.n	8004274 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xa8>
 80043b2:	bf00      	nop
 80043b4:	0800d4b0 	.word	0x0800d4b0
 80043b8:	0800d4e4 	.word	0x0800d4e4
 80043bc:	20002818 	.word	0x20002818
 80043c0:	0800d4f0 	.word	0x0800d4f0
 80043c4:	0800d4fc 	.word	0x0800d4fc
 80043c8:	0800d504 	.word	0x0800d504
 80043cc:	0800d510 	.word	0x0800d510

080043d0 <_ZN8ATParser4sendEPKcz>:
    va_end(args);
    return res;
}

bool ATParser::send(const char *command, ...)
{
 80043d0:	b40e      	push	{r1, r2, r3}
 80043d2:	b500      	push	{lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	aa03      	add	r2, sp, #12
 80043d8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, command);
 80043dc:	9201      	str	r2, [sp, #4]
    bool res = vsend(command, args);
 80043de:	f7ff fec9 	bl	8004174 <_ZN8ATParser5vsendEPKcSt9__va_list>
    va_end(args);
    return res;
}
 80043e2:	b002      	add	sp, #8
 80043e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e8:	b003      	add	sp, #12
 80043ea:	4770      	bx	lr

080043ec <_ZN8ATParser4recvEPKcz>:

bool ATParser::recv(const char *response, ...)
{
 80043ec:	b40e      	push	{r1, r2, r3}
 80043ee:	b500      	push	{lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	aa03      	add	r2, sp, #12
 80043f4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, response);
 80043f8:	9201      	str	r2, [sp, #4]
    bool res = vrecv(response, args);
 80043fa:	f7ff fee7 	bl	80041cc <_ZN8ATParser5vrecvEPKcSt9__va_list>
    va_end(args);
    return res;
}
 80043fe:	b002      	add	sp, #8
 8004400:	f85d eb04 	ldr.w	lr, [sp], #4
 8004404:	b003      	add	sp, #12
 8004406:	4770      	bx	lr

08004408 <_ZN8ATParser3oobEPKcPFvPvES2_>:

// oob registration
void ATParser::oob(const char *prefix, void (*func)(void *), void *arg)
{
 8004408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800440c:	4605      	mov	r5, r0
 800440e:	460e      	mov	r6, r1
 8004410:	4690      	mov	r8, r2
 8004412:	4699      	mov	r9, r3
    for (int k = 0; k < MAX_OOBS; k++) { 
 8004414:	2400      	movs	r4, #0
 8004416:	2c01      	cmp	r4, #1
 8004418:	dc29      	bgt.n	800446e <_ZN8ATParser3oobEPKcPFvPvES2_+0x66>
        if (_oobs[k].len == strlen(prefix) &&
 800441a:	eb05 1304 	add.w	r3, r5, r4, lsl #4
 800441e:	69df      	ldr	r7, [r3, #28]
 8004420:	4630      	mov	r0, r6
 8004422:	f008 f855 	bl	800c4d0 <strlen>
 8004426:	4287      	cmp	r7, r0
 8004428:	d00d      	beq.n	8004446 <_ZN8ATParser3oobEPKcPFvPvES2_+0x3e>
            _oobs[k].prefix == prefix &&
            _oobs[k].cb == func &&
            _oobs[k].arg == arg) { return; }  //  Skip duplicate callback.
        if (_oobs[k].len != 0) { continue; }  //  Find an empty callback. 
 800442a:	b9f7      	cbnz	r7, 800446a <_ZN8ATParser3oobEPKcPFvPvES2_+0x62>

        //  Assign the callback.
        _oobs[k].len = strlen(prefix);
 800442c:	eb05 1304 	add.w	r3, r5, r4, lsl #4
 8004430:	61d8      	str	r0, [r3, #28]
        _oobs[k].prefix = prefix;
 8004432:	621e      	str	r6, [r3, #32]
        _oobs[k].cb = func;
 8004434:	3402      	adds	r4, #2
 8004436:	eb05 1404 	add.w	r4, r5, r4, lsl #4
 800443a:	f8c4 8004 	str.w	r8, [r4, #4]
        _oobs[k].arg = arg;
 800443e:	f8c4 9008 	str.w	r9, [r4, #8]
        return;
    }
    assert(0);  //  Too many callbacks.
}
 8004442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            _oobs[k].prefix == prefix &&
 8004446:	eb05 1304 	add.w	r3, r5, r4, lsl #4
 800444a:	6a1b      	ldr	r3, [r3, #32]
        if (_oobs[k].len == strlen(prefix) &&
 800444c:	42b3      	cmp	r3, r6
 800444e:	d1ec      	bne.n	800442a <_ZN8ATParser3oobEPKcPFvPvES2_+0x22>
            _oobs[k].cb == func &&
 8004450:	1ca3      	adds	r3, r4, #2
 8004452:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8004456:	685b      	ldr	r3, [r3, #4]
            _oobs[k].prefix == prefix &&
 8004458:	4543      	cmp	r3, r8
 800445a:	d1e6      	bne.n	800442a <_ZN8ATParser3oobEPKcPFvPvES2_+0x22>
            _oobs[k].arg == arg) { return; }  //  Skip duplicate callback.
 800445c:	1ca3      	adds	r3, r4, #2
 800445e:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8004462:	689b      	ldr	r3, [r3, #8]
            _oobs[k].cb == func &&
 8004464:	454b      	cmp	r3, r9
 8004466:	d1e0      	bne.n	800442a <_ZN8ATParser3oobEPKcPFvPvES2_+0x22>
 8004468:	e7eb      	b.n	8004442 <_ZN8ATParser3oobEPKcPFvPvES2_+0x3a>
    for (int k = 0; k < MAX_OOBS; k++) { 
 800446a:	3401      	adds	r4, #1
 800446c:	e7d3      	b.n	8004416 <_ZN8ATParser3oobEPKcPFvPvES2_+0xe>
    assert(0);  //  Too many callbacks.
 800446e:	2300      	movs	r3, #0
 8004470:	461a      	mov	r2, r3
 8004472:	4619      	mov	r1, r3
 8004474:	4618      	mov	r0, r3
 8004476:	f7fd f9bf 	bl	80017f8 <__assert_func>

0800447a <_ZL12uart_tx_donePv>:
    //  We wait 5 seconds for the current command to complete, 
    //  then trigger the next_cmd callout to switch to next ESP8266 command.
    int rc = os_callout_reset(&next_cmd_callout, OS_TICKS_PER_SEC * 5);
    assert(rc == 0);
#endif  //  TEST_UART
}
 800447a:	4770      	bx	lr

0800447c <_ZL10setup_uartP14BufferedSerial>:
        hal_uart_start_rx(MY_UART);  //  Start receiving UART data.
        hal_uart_start_tx(MY_UART);  //  Start transmitting UART data.
    }
#endif  //  TEST_UART

static int setup_uart(BufferedSerial *serial) {
 800447c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447e:	b083      	sub	sp, #12
 8004480:	4604      	mov	r4, r0
    int rc;
#ifndef TEST_UART
    int uart = serial->_uart;
 8004482:	6c46      	ldr	r6, [r0, #68]	; 0x44
    uint32_t baud = serial->_baud;
 8004484:	6c87      	ldr	r7, [r0, #72]	; 0x48
#else
    int uart = MY_UART;
    uint32_t baud = 115200;
#endif  //  TEST_UART
    //  Init rx buffer.
    memset(rx_buf, 0, sizeof(rx_buf));
 8004486:	4d13      	ldr	r5, [pc, #76]	; (80044d4 <_ZL10setup_uartP14BufferedSerial+0x58>)
 8004488:	f44f 7280 	mov.w	r2, #256	; 0x100
 800448c:	2100      	movs	r1, #0
 800448e:	4628      	mov	r0, r5
 8004490:	f7fe fe23 	bl	80030da <memset>
    rx_ptr = rx_buf;
 8004494:	4b10      	ldr	r3, [pc, #64]	; (80044d8 <_ZL10setup_uartP14BufferedSerial+0x5c>)
 8004496:	601d      	str	r5, [r3, #0]
        tx_ptr = tx_buf;
        //  Define the next_cmd callout to switch to next ESP8266 command.
        os_callout_init(&next_cmd_callout, os_eventq_dflt_get(), next_cmd, NULL);
    #endif  //  TEST_UART
    //  Define the UART callbacks.
    rc = hal_uart_init_cbs(uart,
 8004498:	9400      	str	r4, [sp, #0]
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <_ZL10setup_uartP14BufferedSerial+0x60>)
 800449c:	4a10      	ldr	r2, [pc, #64]	; (80044e0 <_ZL10setup_uartP14BufferedSerial+0x64>)
 800449e:	4911      	ldr	r1, [pc, #68]	; (80044e4 <_ZL10setup_uartP14BufferedSerial+0x68>)
 80044a0:	4630      	mov	r0, r6
 80044a2:	f005 fd95 	bl	8009fd0 <hal_uart_init_cbs>
        uart_tx_char, uart_tx_done,
        uart_rx_char, serial);
    if (rc != 0) { return rc; }
 80044a6:	4603      	mov	r3, r0
 80044a8:	b950      	cbnz	r0, 80044c0 <_ZL10setup_uartP14BufferedSerial+0x44>
    //  Set UART parameters.
    assert(baud != 0);
 80044aa:	b167      	cbz	r7, 80044c6 <_ZL10setup_uartP14BufferedSerial+0x4a>
    rc = hal_uart_config(uart,
 80044ac:	2300      	movs	r3, #0
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	2301      	movs	r3, #1
 80044b4:	2208      	movs	r2, #8
 80044b6:	4639      	mov	r1, r7
 80044b8:	4630      	mov	r0, r6
 80044ba:	f005 fe15 	bl	800a0e8 <hal_uart_config>
 80044be:	4603      	mov	r3, r0
        //  Don't call console_printf() tx/rx or some UART data will be dropped.
        hal_uart_start_rx(MY_UART);  //  Start receiving UART data.
        hal_uart_start_tx(MY_UART);  //  Start transmitting UART data.
    #endif  //  TEST_UART
    return 0;
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	b003      	add	sp, #12
 80044c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(baud != 0);
 80044c6:	2300      	movs	r3, #0
 80044c8:	461a      	mov	r2, r3
 80044ca:	4619      	mov	r1, r3
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fd f993 	bl	80017f8 <__assert_func>
 80044d2:	bf00      	nop
 80044d4:	2000281c 	.word	0x2000281c
 80044d8:	2000291c 	.word	0x2000291c
 80044dc:	080045c5 	.word	0x080045c5
 80044e0:	0800447b 	.word	0x0800447b
 80044e4:	08004635 	.word	0x08004635

080044e8 <_ZN14BufferedSerial4initEPcmS0_mPKc>:

void BufferedSerial::init(char *txbuf, uint32_t txbuf_size, char *rxbuf, uint32_t rxbuf_size, const char* name)
{
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	4604      	mov	r4, r0
 80044ec:	461f      	mov	r7, r3
 80044ee:	9e06      	ldr	r6, [sp, #24]
    _initialised = 0;
 80044f0:	2500      	movs	r5, #0
 80044f2:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    _uart = 0;
 80044f6:	6445      	str	r5, [r0, #68]	; 0x44
    _baud = 0;
 80044f8:	6485      	str	r5, [r0, #72]	; 0x48
    _txbuf_size = txbuf_size;
 80044fa:	6202      	str	r2, [r0, #32]
    _rxbuf_size = rxbuf_size;
 80044fc:	6246      	str	r6, [r0, #36]	; 0x24
    _txbuf.init(txbuf, txbuf_size);
 80044fe:	f000 f8e6 	bl	80046ce <_ZN8MyBufferIcE4initEPcm>
    _rxbuf.init(rxbuf, rxbuf_size);
 8004502:	4632      	mov	r2, r6
 8004504:	4639      	mov	r1, r7
 8004506:	f104 0010 	add.w	r0, r4, #16
 800450a:	f000 f8e0 	bl	80046ce <_ZN8MyBufferIcE4initEPcm>
    os_error_t rc = os_sem_init(&_rx_sem, 0);  //  Init to 0 tokens, so caller will block until data is available.
 800450e:	4629      	mov	r1, r5
 8004510:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8004514:	f007 ff28 	bl	800c368 <os_sem_init>
    assert(rc == OS_OK);
 8004518:	b900      	cbnz	r0, 800451c <_ZN14BufferedSerial4initEPcmS0_mPKc+0x34>
}
 800451a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(rc == OS_OK);
 800451c:	462b      	mov	r3, r5
 800451e:	462a      	mov	r2, r5
 8004520:	4629      	mov	r1, r5
 8004522:	4628      	mov	r0, r5
 8004524:	f7fd f968 	bl	80017f8 <__assert_func>

08004528 <_ZN14BufferedSerial9configureEi>:

void BufferedSerial::configure(int uart) {
    _uart = uart;
 8004528:	6441      	str	r1, [r0, #68]	; 0x44
}
 800452a:	4770      	bx	lr

0800452c <_ZN14BufferedSerial8readableEv>:
}

template <class T>
inline uint32_t MyBuffer<T>::available(void)
{
    return (_wloc == _rloc) ? 0 : 1;
 800452c:	6942      	ldr	r2, [r0, #20]
 800452e:	6980      	ldr	r0, [r0, #24]

int BufferedSerial::readable(void)
{
    return _rxbuf.available();  // note: look if things are in the buffer
}
 8004530:	1a10      	subs	r0, r2, r0
 8004532:	bf18      	it	ne
 8004534:	2001      	movne	r0, #1
 8004536:	4770      	bx	lr

08004538 <_ZN14BufferedSerial5fgetcEi>:
{
    return 1;   // buffer allows overwriting by design, always true
}

int BufferedSerial::getc(int timeout)
{
 8004538:	b510      	push	{r4, lr}
 800453a:	4604      	mov	r4, r0
    //  If no data available, wait until the timeout for data.
    os_sem_pend(&_rx_sem, timeout * OS_TICKS_PER_SEC / 1000);
 800453c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004540:	fb03 f101 	mul.w	r1, r3, r1
 8004544:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <_ZN14BufferedSerial5fgetcEi+0x48>)
 8004546:	fb83 2301 	smull	r2, r3, r3, r1
 800454a:	17c9      	asrs	r1, r1, #31
 800454c:	ebc1 11a3 	rsb	r1, r1, r3, asr #6
 8004550:	302c      	adds	r0, #44	; 0x2c
 8004552:	f007 ff43 	bl	800c3dc <os_sem_pend>
 8004556:	6962      	ldr	r2, [r4, #20]
 8004558:	69a3      	ldr	r3, [r4, #24]
    if (_rxbuf.available()) { return _rxbuf.get(); }
 800455a:	429a      	cmp	r2, r3
 800455c:	d00d      	beq.n	800457a <_ZN14BufferedSerial5fgetcEi+0x42>
    T data_pos = _buf[_rloc++];
 800455e:	6922      	ldr	r2, [r4, #16]
 8004560:	69a3      	ldr	r3, [r4, #24]
 8004562:	1c59      	adds	r1, r3, #1
 8004564:	61a1      	str	r1, [r4, #24]
 8004566:	5cd0      	ldrb	r0, [r2, r3]
    _rloc %= (_size-1);
 8004568:	69a1      	ldr	r1, [r4, #24]
 800456a:	69e3      	ldr	r3, [r4, #28]
 800456c:	3b01      	subs	r3, #1
 800456e:	fbb1 f2f3 	udiv	r2, r1, r3
 8004572:	fb03 1312 	mls	r3, r3, r2, r1
 8004576:	61a3      	str	r3, [r4, #24]
    return -1;
}
 8004578:	bd10      	pop	{r4, pc}
    return -1;
 800457a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800457e:	e7fb      	b.n	8004578 <_ZN14BufferedSerial5fgetcEi+0x40>
 8004580:	10624dd3 	.word	0x10624dd3

08004584 <_ZN14BufferedSerial5rxIrqEh>:
    }
    return 0;
}

int BufferedSerial::rxIrq(uint8_t byte)
{
 8004584:	b510      	push	{r4, lr}
 8004586:	4604      	mov	r4, r0
    _buf[_wloc++] = data;
 8004588:	6902      	ldr	r2, [r0, #16]
 800458a:	6943      	ldr	r3, [r0, #20]
 800458c:	1c58      	adds	r0, r3, #1
 800458e:	6160      	str	r0, [r4, #20]
 8004590:	54d1      	strb	r1, [r2, r3]
    _wloc %= (_size-1);
 8004592:	6961      	ldr	r1, [r4, #20]
 8004594:	69e3      	ldr	r3, [r4, #28]
 8004596:	3b01      	subs	r3, #1
 8004598:	fbb1 f2f3 	udiv	r2, r1, r3
 800459c:	fb03 1312 	mls	r3, r3, r2, r1
 80045a0:	6163      	str	r3, [r4, #20]
    //  UART driver reports incoming byte of data. Return -1 if data was dropped.
    _rxbuf.put(byte);  //  Add to TX buffer.
    os_error_t rc = os_sem_release(&_rx_sem);  //  Signal to semaphore that data is available.
 80045a2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80045a6:	f007 fee7 	bl	800c378 <os_sem_release>
    assert(rc == OS_OK);
 80045aa:	b928      	cbnz	r0, 80045b8 <_ZN14BufferedSerial5rxIrqEh+0x34>
    //  Trigger callback if necessary
    if (_cbs[RxIrq]) { _cbs[RxIrq](_cbs_arg[RxIrq]); }
 80045ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045ae:	b10b      	cbz	r3, 80045b4 <_ZN14BufferedSerial5rxIrqEh+0x30>
 80045b0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80045b2:	4798      	blx	r3
    return 0;
}
 80045b4:	2000      	movs	r0, #0
 80045b6:	bd10      	pop	{r4, pc}
    assert(rc == OS_OK);
 80045b8:	2300      	movs	r3, #0
 80045ba:	461a      	mov	r2, r3
 80045bc:	4619      	mov	r1, r3
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fd f91a 	bl	80017f8 <__assert_func>

080045c4 <_ZL12uart_rx_charPvh>:
static int uart_rx_char(void *arg, uint8_t byte) {
 80045c4:	b510      	push	{r4, lr}
    if (rx_ptr - rx_buf < (int) sizeof(rx_buf)) { *rx_ptr++ = byte; }  //  Save to rx buffer.
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <_ZL12uart_rx_charPvh+0x2c>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <_ZL12uart_rx_charPvh+0x30>)
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2bff      	cmp	r3, #255	; 0xff
 80045d0:	dc03      	bgt.n	80045da <_ZL12uart_rx_charPvh+0x16>
 80045d2:	1c54      	adds	r4, r2, #1
 80045d4:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <_ZL12uart_rx_charPvh+0x2c>)
 80045d6:	601c      	str	r4, [r3, #0]
 80045d8:	7011      	strb	r1, [r2, #0]
    assert(arg != NULL);
 80045da:	b110      	cbz	r0, 80045e2 <_ZL12uart_rx_charPvh+0x1e>
    int rc = serial->rxIrq(byte);
 80045dc:	f7ff ffd2 	bl	8004584 <_ZN14BufferedSerial5rxIrqEh>
}
 80045e0:	bd10      	pop	{r4, pc}
    assert(arg != NULL);
 80045e2:	2300      	movs	r3, #0
 80045e4:	461a      	mov	r2, r3
 80045e6:	4619      	mov	r1, r3
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fd f905 	bl	80017f8 <__assert_func>
 80045ee:	bf00      	nop
 80045f0:	2000291c 	.word	0x2000291c
 80045f4:	2000281c 	.word	0x2000281c

080045f8 <_ZN14BufferedSerial5txIrqEv>:

int BufferedSerial::txIrq(void)
{
 80045f8:	b510      	push	{r4, lr}
    return (_wloc == _rloc) ? 0 : 1;
 80045fa:	6842      	ldr	r2, [r0, #4]
 80045fc:	6883      	ldr	r3, [r0, #8]
    //  UART driver asks for more data to send. Return -1 if no more data is available for TX.
    if(_txbuf.available()) {
 80045fe:	429a      	cmp	r2, r3
 8004600:	d00e      	beq.n	8004620 <_ZN14BufferedSerial5txIrqEv+0x28>
    T data_pos = _buf[_rloc++];
 8004602:	6802      	ldr	r2, [r0, #0]
 8004604:	6883      	ldr	r3, [r0, #8]
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	6081      	str	r1, [r0, #8]
 800460a:	5cd3      	ldrb	r3, [r2, r3]
    _rloc %= (_size-1);
 800460c:	6884      	ldr	r4, [r0, #8]
 800460e:	68c2      	ldr	r2, [r0, #12]
 8004610:	3a01      	subs	r2, #1
 8004612:	fbb4 f1f2 	udiv	r1, r4, r2
 8004616:	fb02 4211 	mls	r2, r2, r1, r4
 800461a:	6082      	str	r2, [r0, #8]
        uint8_t byte = _txbuf.get();  //  Get data from TX buffer.
        return byte;
 800461c:	4618      	mov	r0, r3
    }
    //  Trigger callback if no more data to send.
    if (_cbs[TxIrq]) { _cbs[TxIrq](_cbs_arg[TxIrq]); }
    return -1;
}
 800461e:	bd10      	pop	{r4, pc}
    if (_cbs[TxIrq]) { _cbs[TxIrq](_cbs_arg[TxIrq]); }
 8004620:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004622:	b123      	cbz	r3, 800462e <_ZN14BufferedSerial5txIrqEv+0x36>
 8004624:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004626:	4798      	blx	r3
    return -1;
 8004628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800462c:	e7f7      	b.n	800461e <_ZN14BufferedSerial5txIrqEv+0x26>
 800462e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004632:	e7f4      	b.n	800461e <_ZN14BufferedSerial5txIrqEv+0x26>

08004634 <_ZL12uart_tx_charPv>:
static int uart_tx_char(void *arg) {    
 8004634:	b508      	push	{r3, lr}
    assert(arg != NULL);
 8004636:	b110      	cbz	r0, 800463e <_ZL12uart_tx_charPv+0xa>
    int byte = serial->txIrq();
 8004638:	f7ff ffde 	bl	80045f8 <_ZN14BufferedSerial5txIrqEv>
}
 800463c:	bd08      	pop	{r3, pc}
    assert(arg != NULL);
 800463e:	2300      	movs	r3, #0
 8004640:	461a      	mov	r2, r3
 8004642:	4619      	mov	r1, r3
 8004644:	4618      	mov	r0, r3
 8004646:	f7fd f8d7 	bl	80017f8 <__assert_func>

0800464a <_ZN14BufferedSerial5primeEv>:

void BufferedSerial::prime(void)
{
 800464a:	b510      	push	{r4, lr}
 800464c:	4604      	mov	r4, r0
    if (!_initialised) {
 800464e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8004652:	b92b      	cbnz	r3, 8004660 <_ZN14BufferedSerial5primeEv+0x16>
        //  Configure the UART port on first use.
        _initialised = 1;
 8004654:	2301      	movs	r3, #1
 8004656:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
        int rc = setup_uart(this);
 800465a:	f7ff ff0f 	bl	800447c <_ZL10setup_uartP14BufferedSerial>
        assert(rc == 0);
 800465e:	b930      	cbnz	r0, 800466e <_ZN14BufferedSerial5primeEv+0x24>
    }
    hal_uart_start_rx(_uart);  //  Start receiving UART data.
 8004660:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004662:	f005 fcd7 	bl	800a014 <hal_uart_start_rx>
    hal_uart_start_tx(_uart);  //  Start transmitting UART data.
 8004666:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004668:	f005 fd02 	bl	800a070 <hal_uart_start_tx>
}
 800466c:	bd10      	pop	{r4, pc}
        assert(rc == 0);
 800466e:	2300      	movs	r3, #0
 8004670:	461a      	mov	r2, r3
 8004672:	4619      	mov	r1, r3
 8004674:	4618      	mov	r0, r3
 8004676:	f7fd f8bf 	bl	80017f8 <__assert_func>

0800467a <_ZN14BufferedSerial4putcEi>:
{
 800467a:	b538      	push	{r3, r4, r5, lr}
 800467c:	460c      	mov	r4, r1
    _buf[_wloc++] = data;
 800467e:	6801      	ldr	r1, [r0, #0]
 8004680:	6842      	ldr	r2, [r0, #4]
 8004682:	1c55      	adds	r5, r2, #1
 8004684:	6045      	str	r5, [r0, #4]
 8004686:	548c      	strb	r4, [r1, r2]
    _wloc %= (_size-1);
 8004688:	6845      	ldr	r5, [r0, #4]
 800468a:	68c2      	ldr	r2, [r0, #12]
 800468c:	3a01      	subs	r2, #1
 800468e:	fbb5 f1f2 	udiv	r1, r5, r2
 8004692:	fb02 5211 	mls	r2, r2, r1, r5
 8004696:	6042      	str	r2, [r0, #4]
    BufferedSerial::prime();
 8004698:	f7ff ffd7 	bl	800464a <_ZN14BufferedSerial5primeEv>
}
 800469c:	4620      	mov	r0, r4
 800469e:	bd38      	pop	{r3, r4, r5, pc}

080046a0 <_ZN14BufferedSerial6attachEPFvPvES0_i>:

void BufferedSerial::attach(void (*func)(void *), void *arg, IrqType type)
{
 80046a0:	b410      	push	{r4}
    _cbs[type] = func;
 80046a2:	f103 040c 	add.w	r4, r3, #12
 80046a6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80046aa:	6061      	str	r1, [r4, #4]
    _cbs_arg[type] = arg;
 80046ac:	330e      	adds	r3, #14
 80046ae:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80046b2:	6042      	str	r2, [r0, #4]
}
 80046b4:	bc10      	pop	{r4}
 80046b6:	4770      	bx	lr

080046b8 <_ZN14BufferedSerial4baudEm>:

void BufferedSerial::baud(uint32_t baud0)
{
    _baud = baud0;
 80046b8:	6481      	str	r1, [r0, #72]	; 0x48
}
 80046ba:	4770      	bx	lr

080046bc <_ZN8MyBufferIcE5clearEv>:
{ 
    return this->_size; 
}

template <class T>
void MyBuffer<T>::clear(void)
 80046bc:	b508      	push	{r3, lr}
{
    _wloc = 0;
 80046be:	2100      	movs	r1, #0
 80046c0:	6041      	str	r1, [r0, #4]
    _rloc = 0;
 80046c2:	6081      	str	r1, [r0, #8]
    memset(_buf, 0, _size);
 80046c4:	68c2      	ldr	r2, [r0, #12]
 80046c6:	6800      	ldr	r0, [r0, #0]
 80046c8:	f7fe fd07 	bl	80030da <memset>
    
    return;
}
 80046cc:	bd08      	pop	{r3, pc}

080046ce <_ZN8MyBufferIcE4initEPcm>:
void MyBuffer<T>::init(T *buffer, uint32_t size)
 80046ce:	b508      	push	{r3, lr}
    _buf = buffer;
 80046d0:	6001      	str	r1, [r0, #0]
    _size = size;
 80046d2:	60c2      	str	r2, [r0, #12]
    clear();    
 80046d4:	f7ff fff2 	bl	80046bc <_ZN8MyBufferIcE5clearEv>
}
 80046d8:	bd08      	pop	{r3, pc}
	...

080046dc <hmac_prng_init>:
static struct tc_hmac_prng_struct prng;  //  TinyCrypt HMAC PRNG.
static uint8_t hw_id[12];  //  Hardware ID is 12 bytes for STM32
static int hw_id_len;      //  Actual length of hardware ID
static uint8_t seed[32];   //  Seed must be >= 32 bytes long

void hmac_prng_init(void) {
 80046dc:	b530      	push	{r4, r5, lr}
 80046de:	b085      	sub	sp, #20
#define ENTROPY
#ifdef ENTROPY
    //  Use the internal temperature sensor as a source of entropy (noise) for the generator.
    int rawtemp;
    //  Open the temp_stm32 internal temperature sensor driver.  Assumes already started with "stm32f1_adc_create();  temp_stm32_create();""
    struct temp_stm32 *dev = (struct temp_stm32 *) os_dev_open(TEMP_STM32_DEVICE, OS_TIMEOUT_NEVER, NULL);  assert(dev);
 80046e0:	2200      	movs	r2, #0
 80046e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046e6:	4836      	ldr	r0, [pc, #216]	; (80047c0 <hmac_prng_init+0xe4>)
 80046e8:	f7fd fb58 	bl	8001d9c <os_dev_open>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d043      	beq.n	8004778 <hmac_prng_init+0x9c>
 80046f0:	4604      	mov	r4, r0

    //  Fetch 32 bytes of temperature noise into the seed array.
    rc = temp_stm32_get_raw_temperature(dev, sizeof(seed) * 2, &rawtemp, seed); assert(rc == 0);
 80046f2:	4b34      	ldr	r3, [pc, #208]	; (80047c4 <hmac_prng_init+0xe8>)
 80046f4:	aa03      	add	r2, sp, #12
 80046f6:	2140      	movs	r1, #64	; 0x40
 80046f8:	f002 f99e 	bl	8006a38 <temp_stm32_get_raw_temperature>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d141      	bne.n	8004784 <hmac_prng_init+0xa8>
    os_dev_close((struct os_dev *) dev);  //  Close the driver.
 8004700:	4620      	mov	r0, r4
 8004702:	f7fd fb6d 	bl	8001de0 <os_dev_close>
#endif  //  ENTROPY

    //  Fetch the hardware ID.  This is unique across all microcontrollers.  
    hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 8004706:	f005 fff0 	bl	800a6ea <hal_bsp_hw_id_len>
 800470a:	4b2f      	ldr	r3, [pc, #188]	; (80047c8 <hmac_prng_init+0xec>)
 800470c:	6018      	str	r0, [r3, #0]
    assert(hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 800470e:	280b      	cmp	r0, #11
 8004710:	d93e      	bls.n	8004790 <hmac_prng_init+0xb4>
    hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 8004712:	210c      	movs	r1, #12
 8004714:	482d      	ldr	r0, [pc, #180]	; (80047cc <hmac_prng_init+0xf0>)
 8004716:	f005 ffeb 	bl	800a6f0 <hal_bsp_hw_id>
 800471a:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <hmac_prng_init+0xec>)
 800471c:	6018      	str	r0, [r3, #0]
 800471e:	2800      	cmp	r0, #0
 8004720:	dd3c      	ble.n	800479c <hmac_prng_init+0xc0>

    //  Personalise the random number generator with the hardware ID.
    //  TinyCrypt uses the hardware ID to prevent generating similar random numbers across microcontrollers.
    console_printf("RND personalise with hw id "); console_dump(hw_id, hw_id_len); console_printf("\n"); console_flush(); ////
 8004722:	482b      	ldr	r0, [pc, #172]	; (80047d0 <hmac_prng_init+0xf4>)
 8004724:	f001 fe04 	bl	8006330 <console_printf>
 8004728:	4d27      	ldr	r5, [pc, #156]	; (80047c8 <hmac_prng_init+0xec>)
 800472a:	4c28      	ldr	r4, [pc, #160]	; (80047cc <hmac_prng_init+0xf0>)
 800472c:	6829      	ldr	r1, [r5, #0]
 800472e:	4620      	mov	r0, r4
 8004730:	f001 fed8 	bl	80064e4 <console_dump>
 8004734:	4827      	ldr	r0, [pc, #156]	; (80047d4 <hmac_prng_init+0xf8>)
 8004736:	f001 fdfb 	bl	8006330 <console_printf>
 800473a:	f001 fe3f 	bl	80063bc <console_flush>
    rc = tc_hmac_prng_init(&prng, hw_id, hw_id_len);  assert(rc);
 800473e:	682a      	ldr	r2, [r5, #0]
 8004740:	4621      	mov	r1, r4
 8004742:	4825      	ldr	r0, [pc, #148]	; (80047d8 <hmac_prng_init+0xfc>)
 8004744:	f003 fbae 	bl	8007ea4 <tc_hmac_prng_init>
 8004748:	b370      	cbz	r0, 80047a8 <hmac_prng_init+0xcc>

#ifdef ENTROPY
    console_printf("RND seed with temp entropy "); console_dump(seed, sizeof(seed)); console_printf("\n"); console_flush(); ////
 800474a:	4824      	ldr	r0, [pc, #144]	; (80047dc <hmac_prng_init+0x100>)
 800474c:	f001 fdf0 	bl	8006330 <console_printf>
 8004750:	4c1c      	ldr	r4, [pc, #112]	; (80047c4 <hmac_prng_init+0xe8>)
 8004752:	2120      	movs	r1, #32
 8004754:	4620      	mov	r0, r4
 8004756:	f001 fec5 	bl	80064e4 <console_dump>
 800475a:	481e      	ldr	r0, [pc, #120]	; (80047d4 <hmac_prng_init+0xf8>)
 800475c:	f001 fde8 	bl	8006330 <console_printf>
 8004760:	f001 fe2c 	bl	80063bc <console_flush>
#else
    console_printf("NO ENTROPY\n");
#endif  //  ENTROPY

    //  Use the temperature entropy data to seed the generator.  Seed must be >= 32 bytes long.
    rc = tc_hmac_prng_reseed(&prng, seed, sizeof(seed), NULL, 0);
 8004764:	2300      	movs	r3, #0
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	2220      	movs	r2, #32
 800476a:	4621      	mov	r1, r4
 800476c:	481a      	ldr	r0, [pc, #104]	; (80047d8 <hmac_prng_init+0xfc>)
 800476e:	f003 fbbf 	bl	8007ef0 <tc_hmac_prng_reseed>
    assert(rc);
 8004772:	b1f8      	cbz	r0, 80047b4 <hmac_prng_init+0xd8>
}
 8004774:	b005      	add	sp, #20
 8004776:	bd30      	pop	{r4, r5, pc}
    struct temp_stm32 *dev = (struct temp_stm32 *) os_dev_open(TEMP_STM32_DEVICE, OS_TIMEOUT_NEVER, NULL);  assert(dev);
 8004778:	2300      	movs	r3, #0
 800477a:	461a      	mov	r2, r3
 800477c:	4619      	mov	r1, r3
 800477e:	4618      	mov	r0, r3
 8004780:	f7fd f83a 	bl	80017f8 <__assert_func>
    rc = temp_stm32_get_raw_temperature(dev, sizeof(seed) * 2, &rawtemp, seed); assert(rc == 0);
 8004784:	2300      	movs	r3, #0
 8004786:	461a      	mov	r2, r3
 8004788:	4619      	mov	r1, r3
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd f834 	bl	80017f8 <__assert_func>
    assert(hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 8004790:	2300      	movs	r3, #0
 8004792:	461a      	mov	r2, r3
 8004794:	4619      	mov	r1, r3
 8004796:	4618      	mov	r0, r3
 8004798:	f7fd f82e 	bl	80017f8 <__assert_func>
    hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 800479c:	2300      	movs	r3, #0
 800479e:	461a      	mov	r2, r3
 80047a0:	4619      	mov	r1, r3
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fd f828 	bl	80017f8 <__assert_func>
    rc = tc_hmac_prng_init(&prng, hw_id, hw_id_len);  assert(rc);
 80047a8:	2300      	movs	r3, #0
 80047aa:	461a      	mov	r2, r3
 80047ac:	4619      	mov	r1, r3
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fd f822 	bl	80017f8 <__assert_func>
    assert(rc);
 80047b4:	2300      	movs	r3, #0
 80047b6:	461a      	mov	r2, r3
 80047b8:	4619      	mov	r1, r3
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fd f81c 	bl	80017f8 <__assert_func>
 80047c0:	0800d524 	.word	0x0800d524
 80047c4:	20002a68 	.word	0x20002a68
 80047c8:	2000292c 	.word	0x2000292c
 80047cc:	20002920 	.word	0x20002920
 80047d0:	0800d534 	.word	0x0800d534
 80047d4:	0800d5fc 	.word	0x0800d5fc
 80047d8:	20002930 	.word	0x20002930
 80047dc:	0800d550 	.word	0x0800d550

080047e0 <_ZL13config_devicev>:
    rc = config_device();
    assert(rc == 0);
}

//  Device configuration
static int config_device(void) {
 80047e0:	b538      	push	{r3, r4, r5, lr}
    struct os_dev *dev0; ////
    struct DEVICE_DEV *dev; ////
    struct DEVICE_CFG *cfg; ////

    //  Fetch the device.
    dev0 = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 80047e2:	2200      	movs	r2, #0
 80047e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047e8:	480d      	ldr	r0, [pc, #52]	; (8004820 <_ZL13config_devicev+0x40>)
 80047ea:	f7fd fad7 	bl	8001d9c <os_dev_open>
    assert(dev0 != NULL);
 80047ee:	b158      	cbz	r0, 8004808 <_ZL13config_devicev+0x28>
 80047f0:	4604      	mov	r4, r0
    dev = (struct DEVICE_DEV *) dev0;
    cfg = &dev->cfg;
    assert(cfg != NULL);
 80047f2:	f110 0128 	adds.w	r1, r0, #40	; 0x28
 80047f6:	d00d      	beq.n	8004814 <_ZL13config_devicev+0x34>
    //  Get the default config for the device.
    ////rc = DEVICE_CFG_DEFAULT(&cfg);
    ////assert(rc == 0);

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC(dev, cfg); ////
 80047f8:	f000 fa0e 	bl	8004c18 <nrf24l01_config>
 80047fc:	4605      	mov	r5, r0
    os_dev_close(dev0);
 80047fe:	4620      	mov	r0, r4
 8004800:	f7fd faee 	bl	8001de0 <os_dev_close>
    return rc;
}
 8004804:	4628      	mov	r0, r5
 8004806:	bd38      	pop	{r3, r4, r5, pc}
    assert(dev0 != NULL);
 8004808:	2300      	movs	r3, #0
 800480a:	461a      	mov	r2, r3
 800480c:	4619      	mov	r1, r3
 800480e:	4618      	mov	r0, r3
 8004810:	f7fc fff2 	bl	80017f8 <__assert_func>
    assert(cfg != NULL);
 8004814:	2300      	movs	r3, #0
 8004816:	461a      	mov	r2, r3
 8004818:	4619      	mov	r1, r3
 800481a:	4618      	mov	r0, r3
 800481c:	f7fc ffec 	bl	80017f8 <__assert_func>
 8004820:	0800d56c 	.word	0x0800d56c

08004824 <nrf24l01_create>:
void DEVICE_CREATE(void) {
 8004824:	b500      	push	{lr}
 8004826:	b083      	sub	sp, #12
    console_printf("NRF create " DEVICE_NAME "\n");
 8004828:	4814      	ldr	r0, [pc, #80]	; (800487c <nrf24l01_create+0x58>)
 800482a:	f001 fd81 	bl	8006330 <console_printf>
    rc = DEVICE_CFG_DEFAULT(&DEVICE_INSTANCE.cfg);
 800482e:	4814      	ldr	r0, [pc, #80]	; (8004880 <nrf24l01_create+0x5c>)
 8004830:	f000 f9a0 	bl	8004b74 <nrf24l01_default_cfg>
    assert(rc == 0);
 8004834:	b978      	cbnz	r0, 8004856 <nrf24l01_create+0x32>
    rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 8004836:	2300      	movs	r3, #0
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	4a12      	ldr	r2, [pc, #72]	; (8004884 <nrf24l01_create+0x60>)
 800483c:	9200      	str	r2, [sp, #0]
 800483e:	2201      	movs	r2, #1
 8004840:	4911      	ldr	r1, [pc, #68]	; (8004888 <nrf24l01_create+0x64>)
 8004842:	4812      	ldr	r0, [pc, #72]	; (800488c <nrf24l01_create+0x68>)
 8004844:	f7fd fa64 	bl	8001d10 <os_dev_create>
    assert(rc == 0);
 8004848:	b958      	cbnz	r0, 8004862 <nrf24l01_create+0x3e>
    rc = config_device();
 800484a:	f7ff ffc9 	bl	80047e0 <_ZL13config_devicev>
    assert(rc == 0);
 800484e:	b970      	cbnz	r0, 800486e <nrf24l01_create+0x4a>
}
 8004850:	b003      	add	sp, #12
 8004852:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 8004856:	2300      	movs	r3, #0
 8004858:	461a      	mov	r2, r3
 800485a:	4619      	mov	r1, r3
 800485c:	4618      	mov	r0, r3
 800485e:	f7fc ffcb 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 8004862:	2300      	movs	r3, #0
 8004864:	461a      	mov	r2, r3
 8004866:	4619      	mov	r1, r3
 8004868:	4618      	mov	r0, r3
 800486a:	f7fc ffc5 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 800486e:	2300      	movs	r3, #0
 8004870:	461a      	mov	r2, r3
 8004872:	4619      	mov	r1, r3
 8004874:	4618      	mov	r0, r3
 8004876:	f7fc ffbf 	bl	80017f8 <__assert_func>
 800487a:	bf00      	nop
 800487c:	0800d578 	.word	0x0800d578
 8004880:	20002ab0 	.word	0x20002ab0
 8004884:	08004a65 	.word	0x08004a65
 8004888:	0800d56c 	.word	0x0800d56c
 800488c:	20002a88 	.word	0x20002a88

08004890 <_ZL3drvP8nrf24l01>:
};

/////////////////////////////////////////////////////////
//  Device Creation Functions

static nRF24L01P *drv(struct nrf24l01 *dev) { return (nRF24L01P *)(dev->controller); }  //  Return the controller instance
 8004890:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8004892:	4770      	bx	lr

08004894 <_ZL16default_callbackP8os_event>:
    //  We forward to the Default Event Queue for deferred processing.  Don't do any processing here.
	nrf24l01_event.ev_arg = arg;
	os_eventq_put(os_eventq_dflt_get(), &nrf24l01_event);  //  This triggers the callback function.
}

static void default_callback(struct os_event *ev) {
 8004894:	b508      	push	{r3, lr}
    //  Default receive callback that does nothing.
    console_printf("%sno callback\n", _nrf);
 8004896:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <_ZL16default_callbackP8os_event+0x10>)
 8004898:	6819      	ldr	r1, [r3, #0]
 800489a:	4803      	ldr	r0, [pc, #12]	; (80048a8 <_ZL16default_callbackP8os_event+0x14>)
 800489c:	f001 fd48 	bl	8006330 <console_printf>
}
 80048a0:	bd08      	pop	{r3, pc}
 80048a2:	bf00      	nop
 80048a4:	200001b4 	.word	0x200001b4
 80048a8:	0800d61c 	.word	0x0800d61c

080048ac <_ZL14nrf24l01_closeP6os_dev>:
static int nrf24l01_close(struct os_dev *dev0) {
 80048ac:	b510      	push	{r4, lr}
 80048ae:	4604      	mov	r4, r0
    console_printf("}\n");
 80048b0:	4805      	ldr	r0, [pc, #20]	; (80048c8 <_ZL14nrf24l01_closeP6os_dev+0x1c>)
 80048b2:	f001 fd3d 	bl	8006330 <console_printf>
    assert(dev0);
 80048b6:	b10c      	cbz	r4, 80048bc <_ZL14nrf24l01_closeP6os_dev+0x10>
}
 80048b8:	2000      	movs	r0, #0
 80048ba:	bd10      	pop	{r4, pc}
    assert(dev0);
 80048bc:	2300      	movs	r3, #0
 80048be:	461a      	mov	r2, r3
 80048c0:	4619      	mov	r1, r3
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fc ff98 	bl	80017f8 <__assert_func>
 80048c8:	0800d618 	.word	0x0800d618

080048cc <_ZL18register_transportPKcPvS0_th>:
static int register_transport(const char *network_device, void *server_endpoint, const char *host, uint16_t port, uint8_t server_endpoint_size) {
 80048cc:	b510      	push	{r4, lr}
    assert(server_endpoint_size >= sizeof(struct nrf24l01_server));  //  Server Endpoint too small
 80048ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80048d2:	2c0f      	cmp	r4, #15
 80048d4:	d902      	bls.n	80048dc <_ZL18register_transportPKcPvS0_th+0x10>
    int rc = nrf24l01_register_transport(network_device, (struct nrf24l01_server *) server_endpoint, host, port);
 80048d6:	f001 f9b7 	bl	8005c48 <nrf24l01_register_transport>
}
 80048da:	bd10      	pop	{r4, pc}
    assert(server_endpoint_size >= sizeof(struct nrf24l01_server));  //  Server Endpoint too small
 80048dc:	2300      	movs	r3, #0
 80048de:	461a      	mov	r2, r3
 80048e0:	4619      	mov	r1, r3
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fc ff88 	bl	80017f8 <__assert_func>

080048e8 <_ZL20nrf24l01_irq_handlerPv>:
static void nrf24l01_irq_handler(void *arg) {
 80048e8:	b510      	push	{r4, lr}
	nrf24l01_event.ev_arg = arg;
 80048ea:	4c04      	ldr	r4, [pc, #16]	; (80048fc <_ZL20nrf24l01_irq_handlerPv+0x14>)
 80048ec:	60a0      	str	r0, [r4, #8]
	os_eventq_put(os_eventq_dflt_get(), &nrf24l01_event);  //  This triggers the callback function.
 80048ee:	f7fd fae9 	bl	8001ec4 <os_eventq_dflt_get>
 80048f2:	4621      	mov	r1, r4
 80048f4:	f7fd fa9c 	bl	8001e30 <os_eventq_put>
}
 80048f8:	bd10      	pop	{r4, pc}
 80048fa:	bf00      	nop
 80048fc:	20002b1c 	.word	0x20002b1c

08004900 <_ZL13nrf24l01_openP6os_devmPv>:
static int nrf24l01_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 8004900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004902:	b083      	sub	sp, #12
    assert(dev0);
 8004904:	b160      	cbz	r0, 8004920 <_ZL13nrf24l01_openP6os_devmPv+0x20>
 8004906:	4605      	mov	r5, r0
    console_printf("{\n");  ////
 8004908:	4846      	ldr	r0, [pc, #280]	; (8004a24 <_ZL13nrf24l01_openP6os_devmPv+0x124>)
 800490a:	f001 fd11 	bl	8006330 <console_printf>
    if (!dev->is_configured) { return 0; }
 800490e:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8004912:	b113      	cbz	r3, 800491a <_ZL13nrf24l01_openP6os_devmPv+0x1a>
    if (!first_open) { return 0; }
 8004914:	4b44      	ldr	r3, [pc, #272]	; (8004a28 <_ZL13nrf24l01_openP6os_devmPv+0x128>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	b943      	cbnz	r3, 800492c <_ZL13nrf24l01_openP6os_devmPv+0x2c>
}
 800491a:	2000      	movs	r0, #0
 800491c:	b003      	add	sp, #12
 800491e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(dev0);
 8004920:	2300      	movs	r3, #0
 8004922:	461a      	mov	r2, r3
 8004924:	4619      	mov	r1, r3
 8004926:	4618      	mov	r0, r3
 8004928:	f7fc ff66 	bl	80017f8 <__assert_func>
    first_open = false;
 800492c:	2400      	movs	r4, #0
 800492e:	4b3e      	ldr	r3, [pc, #248]	; (8004a28 <_ZL13nrf24l01_openP6os_devmPv+0x128>)
 8004930:	701c      	strb	r4, [r3, #0]
    console_printf( "%sfreq: %d MHz\r\n",         _nrf, drv(dev)->getRfFrequency() );
 8004932:	4e3e      	ldr	r6, [pc, #248]	; (8004a2c <_ZL13nrf24l01_openP6os_devmPv+0x12c>)
 8004934:	6837      	ldr	r7, [r6, #0]
 8004936:	4628      	mov	r0, r5
 8004938:	f7ff ffaa 	bl	8004890 <_ZL3drvP8nrf24l01>
 800493c:	f000 fbcc 	bl	80050d8 <_ZN9nRF24L01P14getRfFrequencyEv>
 8004940:	4602      	mov	r2, r0
 8004942:	4639      	mov	r1, r7
 8004944:	483a      	ldr	r0, [pc, #232]	; (8004a30 <_ZL13nrf24l01_openP6os_devmPv+0x130>)
 8004946:	f001 fcf3 	bl	8006330 <console_printf>
    console_printf( "%spwr: %d dBm\r\n",          _nrf, drv(dev)->getRfOutputPower() );
 800494a:	6837      	ldr	r7, [r6, #0]
 800494c:	4628      	mov	r0, r5
 800494e:	f7ff ff9f 	bl	8004890 <_ZL3drvP8nrf24l01>
 8004952:	f000 fc03 	bl	800515c <_ZN9nRF24L01P16getRfOutputPowerEv>
 8004956:	4602      	mov	r2, r0
 8004958:	4639      	mov	r1, r7
 800495a:	4836      	ldr	r0, [pc, #216]	; (8004a34 <_ZL13nrf24l01_openP6os_devmPv+0x134>)
 800495c:	f001 fce8 	bl	8006330 <console_printf>
    console_printf( "%sdata rate: %d kbps\r\n",   _nrf, drv(dev)->getAirDataRate() );
 8004960:	6836      	ldr	r6, [r6, #0]
 8004962:	4628      	mov	r0, r5
 8004964:	f7ff ff94 	bl	8004890 <_ZL3drvP8nrf24l01>
 8004968:	f000 fc50 	bl	800520c <_ZN9nRF24L01P14getAirDataRateEv>
 800496c:	4602      	mov	r2, r0
 800496e:	4631      	mov	r1, r6
 8004970:	4831      	ldr	r0, [pc, #196]	; (8004a38 <_ZL13nrf24l01_openP6os_devmPv+0x138>)
 8004972:	f001 fcdd 	bl	8006330 <console_printf>
    for (int i = 0; i <= NRL24L01_MAX_RX_PIPES; i++) {
 8004976:	2c05      	cmp	r4, #5
 8004978:	dc0f      	bgt.n	800499a <_ZL13nrf24l01_openP6os_devmPv+0x9a>
        console_printf( "%sP%d tx size: %d bytes\r\n", _nrf, i, 
 800497a:	4b2c      	ldr	r3, [pc, #176]	; (8004a2c <_ZL13nrf24l01_openP6os_devmPv+0x12c>)
 800497c:	681e      	ldr	r6, [r3, #0]
 800497e:	4628      	mov	r0, r5
 8004980:	f7ff ff86 	bl	8004890 <_ZL3drvP8nrf24l01>
 8004984:	4621      	mov	r1, r4
 8004986:	f000 fc91 	bl	80052ac <_ZN9nRF24L01P15getTransferSizeEi>
 800498a:	4603      	mov	r3, r0
 800498c:	4622      	mov	r2, r4
 800498e:	4631      	mov	r1, r6
 8004990:	482a      	ldr	r0, [pc, #168]	; (8004a3c <_ZL13nrf24l01_openP6os_devmPv+0x13c>)
 8004992:	f001 fccd 	bl	8006330 <console_printf>
    for (int i = 0; i <= NRL24L01_MAX_RX_PIPES; i++) {
 8004996:	3401      	adds	r4, #1
 8004998:	e7ed      	b.n	8004976 <_ZL13nrf24l01_openP6os_devmPv+0x76>
    for (int i = 0; i <= NRL24L01_MAX_RX_PIPES; i++) {
 800499a:	2400      	movs	r4, #0
 800499c:	e00c      	b.n	80049b8 <_ZL13nrf24l01_openP6os_devmPv+0xb8>
                ? drv(dev)->getTxAddress()
 800499e:	4628      	mov	r0, r5
 80049a0:	f7ff ff76 	bl	8004890 <_ZL3drvP8nrf24l01>
        console_printf( "%sP%d addr: 0x%010llX\r\n", _nrf, i, 
 80049a4:	f000 fe08 	bl	80055b8 <_ZN9nRF24L01P12getTxAddressEv>
 80049a8:	e9cd 0100 	strd	r0, r1, [sp]
 80049ac:	4622      	mov	r2, r4
 80049ae:	4631      	mov	r1, r6
 80049b0:	4823      	ldr	r0, [pc, #140]	; (8004a40 <_ZL13nrf24l01_openP6os_devmPv+0x140>)
 80049b2:	f001 fcbd 	bl	8006330 <console_printf>
    for (int i = 0; i <= NRL24L01_MAX_RX_PIPES; i++) {
 80049b6:	3401      	adds	r4, #1
 80049b8:	2c05      	cmp	r4, #5
 80049ba:	dc0a      	bgt.n	80049d2 <_ZL13nrf24l01_openP6os_devmPv+0xd2>
        console_printf( "%sP%d addr: 0x%010llX\r\n", _nrf, i, 
 80049bc:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <_ZL13nrf24l01_openP6os_devmPv+0x12c>)
 80049be:	681e      	ldr	r6, [r3, #0]
 80049c0:	2c00      	cmp	r4, #0
 80049c2:	d0ec      	beq.n	800499e <_ZL13nrf24l01_openP6os_devmPv+0x9e>
                : drv(dev)->getRxAddress(NRF24L01P_PIPE_P0 + i)
 80049c4:	4628      	mov	r0, r5
 80049c6:	f7ff ff63 	bl	8004890 <_ZL3drvP8nrf24l01>
        console_printf( "%sP%d addr: 0x%010llX\r\n", _nrf, i, 
 80049ca:	4621      	mov	r1, r4
 80049cc:	f000 fd6e 	bl	80054ac <_ZN9nRF24L01P12getRxAddressEi>
 80049d0:	e7ea      	b.n	80049a8 <_ZL13nrf24l01_openP6os_devmPv+0xa8>
    drv(dev)->powerUp();
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7ff ff5c 	bl	8004890 <_ZL3drvP8nrf24l01>
 80049d8:	f000 faf6 	bl	8004fc8 <_ZN9nRF24L01P7powerUpEv>
    if (is_collector_node()) {
 80049dc:	f001 fe16 	bl	800660c <is_collector_node>
 80049e0:	b1a0      	cbz	r0, 8004a0c <_ZL13nrf24l01_openP6os_devmPv+0x10c>
        drv(dev)->setReceiveMode(); 
 80049e2:	4628      	mov	r0, r5
 80049e4:	f7ff ff54 	bl	8004890 <_ZL3drvP8nrf24l01>
 80049e8:	f000 fb0a 	bl	8005000 <_ZN9nRF24L01P14setReceiveModeEv>
    if (dev->cfg.irq_pin == MCU_GPIO_PIN_NONE) { drv(dev)->disableRxInterrupt(); }
 80049ec:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80049ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d010      	beq.n	8004a18 <_ZL13nrf24l01_openP6os_devmPv+0x118>
    else { drv(dev)->enableRxInterrupt(); }
 80049f6:	4628      	mov	r0, r5
 80049f8:	f7ff ff4a 	bl	8004890 <_ZL3drvP8nrf24l01>
 80049fc:	f000 fb40 	bl	8005080 <_ZN9nRF24L01P17enableRxInterruptEv>
    drv(dev)->enable();
 8004a00:	4628      	mov	r0, r5
 8004a02:	f7ff ff45 	bl	8004890 <_ZL3drvP8nrf24l01>
 8004a06:	f000 fa0b 	bl	8004e20 <_ZN9nRF24L01P6enableEv>
    return 0;
 8004a0a:	e786      	b.n	800491a <_ZL13nrf24l01_openP6os_devmPv+0x1a>
        drv(dev)->setTransmitMode(); 
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f7ff ff3f 	bl	8004890 <_ZL3drvP8nrf24l01>
 8004a12:	f000 fb15 	bl	8005040 <_ZN9nRF24L01P15setTransmitModeEv>
 8004a16:	e7e9      	b.n	80049ec <_ZL13nrf24l01_openP6os_devmPv+0xec>
    if (dev->cfg.irq_pin == MCU_GPIO_PIN_NONE) { drv(dev)->disableRxInterrupt(); }
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f7ff ff39 	bl	8004890 <_ZL3drvP8nrf24l01>
 8004a1e:	f000 fb45 	bl	80050ac <_ZN9nRF24L01P18disableRxInterruptEv>
 8004a22:	e7ed      	b.n	8004a00 <_ZL13nrf24l01_openP6os_devmPv+0x100>
 8004a24:	0800d5a4 	.word	0x0800d5a4
 8004a28:	200001b0 	.word	0x200001b0
 8004a2c:	200001b4 	.word	0x200001b4
 8004a30:	0800d5a8 	.word	0x0800d5a8
 8004a34:	0800d5bc 	.word	0x0800d5bc
 8004a38:	0800d5cc 	.word	0x0800d5cc
 8004a3c:	0800d5e4 	.word	0x0800d5e4
 8004a40:	0800d600 	.word	0x0800d600

08004a44 <_Z41__static_initialization_and_destruction_0ii>:
    //  Flush the transmit and receive buffers.  Return 0 if successful.
    assert(dev);
    drv(dev)->flushTx();
    drv(dev)->flushRx();
    return 0;
}
 8004a44:	2801      	cmp	r0, #1
 8004a46:	d000      	beq.n	8004a4a <_Z41__static_initialization_and_destruction_0ii+0x6>
 8004a48:	4770      	bx	lr
 8004a4a:	b508      	push	{r3, lr}
 8004a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a50:	4299      	cmp	r1, r3
 8004a52:	d000      	beq.n	8004a56 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8004a54:	bd08      	pop	{r3, pc}
static nRF24L01P controller;    //  The single controller instance.  TODO: Support multiple instances.
 8004a56:	4802      	ldr	r0, [pc, #8]	; (8004a60 <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 8004a58:	f000 f9df 	bl	8004e1a <_ZN9nRF24L01PC1Ev>
}
 8004a5c:	e7fa      	b.n	8004a54 <_Z41__static_initialization_and_destruction_0ii+0x10>
 8004a5e:	bf00      	nop
 8004a60:	20002b00 	.word	0x20002b00

08004a64 <nrf24l01_init>:
int nrf24l01_init(struct os_dev *dev0, void *arg) {
 8004a64:	b510      	push	{r4, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	4604      	mov	r4, r0
    console_printf("%sinit\n", _nrf);
 8004a6a:	4b38      	ldr	r3, [pc, #224]	; (8004b4c <nrf24l01_init+0xe8>)
 8004a6c:	6819      	ldr	r1, [r3, #0]
 8004a6e:	4838      	ldr	r0, [pc, #224]	; (8004b50 <nrf24l01_init+0xec>)
 8004a70:	f001 fc5e 	bl	8006330 <console_printf>
    if (!dev0) { rc = SYS_ENODEV; goto err; }
 8004a74:	2c00      	cmp	r4, #0
 8004a76:	d066      	beq.n	8004b46 <nrf24l01_init+0xe2>
    dev->is_configured = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    cfg = &dev->cfg;  assert(cfg);
 8004a7e:	f114 0f28 	cmn.w	r4, #40	; 0x28
 8004a82:	d029      	beq.n	8004ad8 <nrf24l01_init+0x74>
    dev->controller = &controller;
 8004a84:	4b33      	ldr	r3, [pc, #204]	; (8004b54 <nrf24l01_init+0xf0>)
 8004a86:	6763      	str	r3, [r4, #116]	; 0x74
    rc = hal_spi_config(cfg->spi_num, &cfg->spi_settings);
 8004a88:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8004a8c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004a8e:	f004 fed3 	bl	8009838 <hal_spi_config>
    assert(rc == 0);
 8004a92:	4603      	mov	r3, r0
 8004a94:	bb28      	cbnz	r0, 8004ae2 <nrf24l01_init+0x7e>
    if (rc == EINVAL) { goto err; }
 8004a96:	2816      	cmp	r0, #22
 8004a98:	d01b      	beq.n	8004ad2 <nrf24l01_init+0x6e>
    rc = hal_spi_enable(cfg->spi_num);
 8004a9a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004a9c:	f004 fe74 	bl	8009788 <hal_spi_enable>
    assert(rc == 0);
 8004aa0:	bb28      	cbnz	r0, 8004aee <nrf24l01_init+0x8a>
    rc = hal_gpio_init_out(cfg->cs_pin, 1);
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004aa6:	f004 fc63 	bl	8009370 <hal_gpio_init_out>
    assert(rc == 0);
 8004aaa:	bb30      	cbnz	r0, 8004afa <nrf24l01_init+0x96>
    rc = hal_gpio_init_out(cfg->ce_pin, 1);
 8004aac:	2101      	movs	r1, #1
 8004aae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004ab0:	f004 fc5e 	bl	8009370 <hal_gpio_init_out>
    assert(rc == 0);
 8004ab4:	bb38      	cbnz	r0, 8004b06 <nrf24l01_init+0xa2>
    OS_DEV_SETHANDLERS(dev0, nrf24l01_open, nrf24l01_close);
 8004ab6:	4b28      	ldr	r3, [pc, #160]	; (8004b58 <nrf24l01_init+0xf4>)
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	4b28      	ldr	r3, [pc, #160]	; (8004b5c <nrf24l01_init+0xf8>)
 8004abc:	60e3      	str	r3, [r4, #12]
    if (cfg->irq_pin != MCU_GPIO_PIN_NONE) {
 8004abe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d124      	bne.n	8004b12 <nrf24l01_init+0xae>
    rc = sensor_network_register_interface(&network_iface);
 8004ac8:	4825      	ldr	r0, [pc, #148]	; (8004b60 <nrf24l01_init+0xfc>)
 8004aca:	f001 fe2d 	bl	8006728 <sensor_network_register_interface>
    assert(rc == 0);
 8004ace:	4603      	mov	r3, r0
 8004ad0:	bb98      	cbnz	r0, 8004b3a <nrf24l01_init+0xd6>
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	b002      	add	sp, #8
 8004ad6:	bd10      	pop	{r4, pc}
    cfg = &dev->cfg;  assert(cfg);
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4619      	mov	r1, r3
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fc fe8b 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fc fe85 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 8004aee:	2300      	movs	r3, #0
 8004af0:	461a      	mov	r2, r3
 8004af2:	4619      	mov	r1, r3
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fc fe7f 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 8004afa:	2300      	movs	r3, #0
 8004afc:	461a      	mov	r2, r3
 8004afe:	4619      	mov	r1, r3
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fc fe79 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 8004b06:	2300      	movs	r3, #0
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fc fe73 	bl	80017f8 <__assert_func>
        console_printf("%senable irq\n", _nrf);
 8004b12:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <nrf24l01_init+0xe8>)
 8004b14:	6819      	ldr	r1, [r3, #0]
 8004b16:	4813      	ldr	r0, [pc, #76]	; (8004b64 <nrf24l01_init+0x100>)
 8004b18:	f001 fc0a 	bl	8006330 <console_printf>
        nrf24l01_event.ev_cb = default_callback;
 8004b1c:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <nrf24l01_init+0x104>)
 8004b1e:	4a13      	ldr	r2, [pc, #76]	; (8004b6c <nrf24l01_init+0x108>)
 8004b20:	605a      	str	r2, [r3, #4]
        hal_gpio_irq_init(cfg->irq_pin, nrf24l01_irq_handler, NULL,
 8004b22:	2301      	movs	r3, #1
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	2302      	movs	r3, #2
 8004b28:	2200      	movs	r2, #0
 8004b2a:	4911      	ldr	r1, [pc, #68]	; (8004b70 <nrf24l01_init+0x10c>)
 8004b2c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004b2e:	f004 fc79 	bl	8009424 <hal_gpio_irq_init>
	    hal_gpio_irq_enable(cfg->irq_pin);
 8004b32:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004b34:	f004 fc54 	bl	80093e0 <hal_gpio_irq_enable>
 8004b38:	e7c6      	b.n	8004ac8 <nrf24l01_init+0x64>
    assert(rc == 0);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fc fe59 	bl	80017f8 <__assert_func>
    if (!dev0) { rc = SYS_ENODEV; goto err; }
 8004b46:	f06f 0308 	mvn.w	r3, #8
 8004b4a:	e7c2      	b.n	8004ad2 <nrf24l01_init+0x6e>
 8004b4c:	200001b4 	.word	0x200001b4
 8004b50:	0800d644 	.word	0x0800d644
 8004b54:	20002b00 	.word	0x20002b00
 8004b58:	08004901 	.word	0x08004901
 8004b5c:	080048ad 	.word	0x080048ad
 8004b60:	0800d590 	.word	0x0800d590
 8004b64:	0800d64c 	.word	0x0800d64c
 8004b68:	20002b1c 	.word	0x20002b1c
 8004b6c:	08004895 	.word	0x08004895
 8004b70:	080048e9 	.word	0x080048e9

08004b74 <nrf24l01_default_cfg>:
int nrf24l01_default_cfg(struct nrf24l01_cfg *cfg) {
 8004b74:	b510      	push	{r4, lr}
    assert(cfg);  console_printf("%sdefcfg\n", _nrf);
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d034      	beq.n	8004be4 <nrf24l01_default_cfg+0x70>
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <nrf24l01_default_cfg+0x98>)
 8004b7e:	6819      	ldr	r1, [r3, #0]
 8004b80:	4823      	ldr	r0, [pc, #140]	; (8004c10 <nrf24l01_default_cfg+0x9c>)
 8004b82:	f001 fbd5 	bl	8006330 <console_printf>
    memset(cfg, 0, sizeof(struct nrf24l01_cfg));  //  Zero the entire object.
 8004b86:	2246      	movs	r2, #70	; 0x46
 8004b88:	2100      	movs	r1, #0
 8004b8a:	1ca0      	adds	r0, r4, #2
 8004b8c:	f7fe faa5 	bl	80030da <memset>
    cfg->spi_settings.data_order = HAL_SPI_MSB_FIRST;       //  Data order
 8004b90:	2300      	movs	r3, #0
 8004b92:	7063      	strb	r3, [r4, #1]
    cfg->spi_settings.data_mode  = HAL_SPI_MODE0;           //  Data mode of SPI driver: ClockPhase = 0, ClockPolarity = 0
 8004b94:	7023      	strb	r3, [r4, #0]
    cfg->spi_settings.word_size  = HAL_SPI_WORD_SIZE_8BIT;  //  Word size of the SPI transaction
 8004b96:	70a3      	strb	r3, [r4, #2]
    cfg->spi_settings.baudrate   = MYNEWT_VAL(NRF24L01_SPI_BAUDRATE);  //  Baudrate in kHz e.g. 200 kHz (slow, for testing)
 8004b98:	22c8      	movs	r2, #200	; 0xc8
 8004b9a:	6062      	str	r2, [r4, #4]
    cfg->cs_pin     = MYNEWT_VAL(NRF24L01_CS_PIN);   //  e.g. PB2
 8004b9c:	2212      	movs	r2, #18
 8004b9e:	6122      	str	r2, [r4, #16]
    cfg->ce_pin     = MYNEWT_VAL(NRF24L01_CE_PIN);   //  e.g. PB0
 8004ba0:	2210      	movs	r2, #16
 8004ba2:	6162      	str	r2, [r4, #20]
    cfg->freq           = MYNEWT_VAL(NRF24L01_FREQ);        //  e.g. 2,476 kHz (channel 76)
 8004ba4:	f640 12ac 	movw	r2, #2476	; 0x9ac
 8004ba8:	61e2      	str	r2, [r4, #28]
    cfg->data_rate      = MYNEWT_VAL(NRF24L01_DATA_RATE);   //  e.g. 250 kbps, Slowest, longest range, but only supported by nRF24L01+
 8004baa:	22fa      	movs	r2, #250	; 0xfa
 8004bac:	6262      	str	r2, [r4, #36]	; 0x24
    cfg->crc_width       = MYNEWT_VAL(NRF24L01_CRC_WIDTH);   //  e.g. 8 bits for CRC
 8004bae:	2208      	movs	r2, #8
 8004bb0:	62a2      	str	r2, [r4, #40]	; 0x28
    cfg->tx_size         = MYNEWT_VAL(NRF24L01_TX_SIZE);     //  e.g. 12 bytes. Each packet has this size
 8004bb2:	220c      	movs	r2, #12
 8004bb4:	62e2      	str	r2, [r4, #44]	; 0x2c
    cfg->auto_ack        = MYNEWT_VAL(NRF24L01_AUTO_ACK);    //  e.g. 0 for No acknowledgements
 8004bb6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    cfg->auto_retransmit = MYNEWT_VAL(NRF24L01_AUTO_RETRANSMIT);  //  e.g. 0 for No retransmission
 8004bba:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    if (is_collector_node()) {                                  //  If this is the Collector Node...
 8004bbe:	f001 fd25 	bl	800660c <is_collector_node>
 8004bc2:	b9a8      	cbnz	r0, 8004bf0 <nrf24l01_default_cfg+0x7c>
        sensor_node_address = get_sensor_node_address();
 8004bc4:	f001 fd42 	bl	800664c <get_sensor_node_address>
 8004bc8:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <nrf24l01_default_cfg+0xa0>)
 8004bca:	e9c3 0100 	strd	r0, r1, [r3]
        cfg->irq_pin            = MCU_GPIO_PIN_NONE;      //  Disable rx interrupts for Sensor Nodes
 8004bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bd2:	61a2      	str	r2, [r4, #24]
        cfg->tx_address         = sensor_node_address;    //  Sensor Node address
 8004bd4:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
        cfg->rx_addresses       = &sensor_node_address;   //  Listen to itself only. For handling acknowledgements in future
 8004bd8:	6423      	str	r3, [r4, #64]	; 0x40
        cfg->rx_addresses_len   = 1;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8004be0:	2000      	movs	r0, #0
 8004be2:	bd10      	pop	{r4, pc}
    assert(cfg);  console_printf("%sdefcfg\n", _nrf);
 8004be4:	2300      	movs	r3, #0
 8004be6:	461a      	mov	r2, r3
 8004be8:	4619      	mov	r1, r3
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc fe04 	bl	80017f8 <__assert_func>
        cfg->irq_pin            = MYNEWT_VAL(NRF24L01_IRQ_PIN); //  e.g. MCU_GPIO_PORTA(15) means Collector Node gets rx interrupts on PA15
 8004bf0:	230f      	movs	r3, #15
 8004bf2:	61a3      	str	r3, [r4, #24]
        cfg->tx_address         = get_collector_node_address(); //  Collector Node address
 8004bf4:	f001 fd25 	bl	8006642 <get_collector_node_address>
 8004bf8:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
        cfg->rx_addresses       = get_sensor_node_addresses();  //  Listen to all Sensor Nodes
 8004bfc:	f001 fd2c 	bl	8006658 <get_sensor_node_addresses>
 8004c00:	6420      	str	r0, [r4, #64]	; 0x40
        cfg->rx_addresses_len   = SENSOR_NETWORK_SIZE;    //  Number of Sensor Nodes to listen
 8004c02:	2305      	movs	r3, #5
 8004c04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004c08:	e7ea      	b.n	8004be0 <nrf24l01_default_cfg+0x6c>
 8004c0a:	bf00      	nop
 8004c0c:	200001b4 	.word	0x200001b4
 8004c10:	0800d638 	.word	0x0800d638
 8004c14:	20002b30 	.word	0x20002b30

08004c18 <nrf24l01_config>:
int nrf24l01_config(struct nrf24l01 *dev, struct nrf24l01_cfg *cfg) {
 8004c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c1c:	b08d      	sub	sp, #52	; 0x34
 8004c1e:	4605      	mov	r5, r0
 8004c20:	460c      	mov	r4, r1
    console_printf("%sconfig\n", _nrf);
 8004c22:	4b23      	ldr	r3, [pc, #140]	; (8004cb0 <nrf24l01_config+0x98>)
 8004c24:	6819      	ldr	r1, [r3, #0]
 8004c26:	4823      	ldr	r0, [pc, #140]	; (8004cb4 <nrf24l01_config+0x9c>)
 8004c28:	f001 fb82 	bl	8006330 <console_printf>
    assert(dev);  assert(cfg);
 8004c2c:	2d00      	cmp	r5, #0
 8004c2e:	d02c      	beq.n	8004c8a <nrf24l01_config+0x72>
 8004c30:	2c00      	cmp	r4, #0
 8004c32:	d030      	beq.n	8004c96 <nrf24l01_config+0x7e>
    int rc = drv(dev)->init(cfg->spi_num,       cfg->cs_pin,        cfg->ce_pin,    cfg->irq_pin,
 8004c34:	4628      	mov	r0, r5
 8004c36:	f7ff fe2b 	bl	8004890 <_ZL3drvP8nrf24l01>
 8004c3a:	68a1      	ldr	r1, [r4, #8]
 8004c3c:	6922      	ldr	r2, [r4, #16]
 8004c3e:	6963      	ldr	r3, [r4, #20]
 8004c40:	69a6      	ldr	r6, [r4, #24]
 8004c42:	9600      	str	r6, [sp, #0]
 8004c44:	69e6      	ldr	r6, [r4, #28]
 8004c46:	9601      	str	r6, [sp, #4]
 8004c48:	6a26      	ldr	r6, [r4, #32]
 8004c4a:	9602      	str	r6, [sp, #8]
 8004c4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004c4e:	9603      	str	r6, [sp, #12]
 8004c50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c52:	9604      	str	r6, [sp, #16]
 8004c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c56:	9605      	str	r6, [sp, #20]
 8004c58:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
 8004c5c:	f894 7031 	ldrb.w	r7, [r4, #49]	; 0x31
 8004c60:	e9d4 890e 	ldrd	r8, r9, [r4, #56]	; 0x38
 8004c64:	6c26      	ldr	r6, [r4, #64]	; 0x40
 8004c66:	960a      	str	r6, [sp, #40]	; 0x28
 8004c68:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
        cfg->tx_address,    cfg->rx_addresses,  cfg->rx_addresses_len);
 8004c6c:	940b      	str	r4, [sp, #44]	; 0x2c
 8004c6e:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8004c72:	9707      	str	r7, [sp, #28]
 8004c74:	f8cd c018 	str.w	ip, [sp, #24]
 8004c78:	f000 fe24 	bl	80058c4 <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh>
    assert(rc == 0);
 8004c7c:	b988      	cbnz	r0, 8004ca2 <nrf24l01_config+0x8a>
    dev->is_configured = 1;
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
}
 8004c84:	b00d      	add	sp, #52	; 0x34
 8004c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    assert(dev);  assert(cfg);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fc fdb1 	bl	80017f8 <__assert_func>
 8004c96:	2300      	movs	r3, #0
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fc fdab 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fc fda5 	bl	80017f8 <__assert_func>
 8004cae:	bf00      	nop
 8004cb0:	200001b4 	.word	0x200001b4
 8004cb4:	0800d62c 	.word	0x0800d62c

08004cb8 <nrf24l01_send>:
int nrf24l01_send(struct nrf24l01 *dev, uint8_t *buf, uint8_t size) {
 8004cb8:	b570      	push	{r4, r5, r6, lr}
    assert(dev);  assert(buf);  assert(size > 0);
 8004cba:	b1d8      	cbz	r0, 8004cf4 <nrf24l01_send+0x3c>
 8004cbc:	460d      	mov	r5, r1
 8004cbe:	4614      	mov	r4, r2
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	b1e9      	cbz	r1, 8004d00 <nrf24l01_send+0x48>
 8004cc4:	b312      	cbz	r2, 8004d0c <nrf24l01_send+0x54>
    console_printf("%s>> ", _nrf); console_dump(buf, size); console_printf("\n");
 8004cc6:	4b17      	ldr	r3, [pc, #92]	; (8004d24 <nrf24l01_send+0x6c>)
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	4817      	ldr	r0, [pc, #92]	; (8004d28 <nrf24l01_send+0x70>)
 8004ccc:	f001 fb30 	bl	8006330 <console_printf>
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f001 fc06 	bl	80064e4 <console_dump>
 8004cd8:	4814      	ldr	r0, [pc, #80]	; (8004d2c <nrf24l01_send+0x74>)
 8004cda:	f001 fb29 	bl	8006330 <console_printf>
    int rc = drv(dev)->write(NRF24L01P_PIPE_P0 /* Ignored */, (char *) buf, size);
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f7ff fdd6 	bl	8004890 <_ZL3drvP8nrf24l01>
 8004ce4:	4623      	mov	r3, r4
 8004ce6:	462a      	mov	r2, r5
 8004ce8:	2100      	movs	r1, #0
 8004cea:	f000 fd69 	bl	80057c0 <_ZN9nRF24L01P5writeEiPci>
    assert(rc == size);
 8004cee:	4284      	cmp	r4, r0
 8004cf0:	d112      	bne.n	8004d18 <nrf24l01_send+0x60>
}
 8004cf2:	bd70      	pop	{r4, r5, r6, pc}
    assert(dev);  assert(buf);  assert(size > 0);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fc fd7c 	bl	80017f8 <__assert_func>
 8004d00:	2300      	movs	r3, #0
 8004d02:	461a      	mov	r2, r3
 8004d04:	4619      	mov	r1, r3
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fc fd76 	bl	80017f8 <__assert_func>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4619      	mov	r1, r3
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fc fd70 	bl	80017f8 <__assert_func>
    assert(rc == size);
 8004d18:	2300      	movs	r3, #0
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fc fd6a 	bl	80017f8 <__assert_func>
 8004d24:	200001b4 	.word	0x200001b4
 8004d28:	0800d65c 	.word	0x0800d65c
 8004d2c:	0800d5fc 	.word	0x0800d5fc

08004d30 <nrf24l01_receive>:
int nrf24l01_receive(struct nrf24l01 *dev, int pipe, uint8_t *buf, uint8_t size) {
 8004d30:	b570      	push	{r4, r5, r6, lr}
    assert(dev);  assert(pipe > 0);  assert(pipe <= 5);  assert(buf);  assert(size > 0);
 8004d32:	b190      	cbz	r0, 8004d5a <nrf24l01_receive+0x2a>
 8004d34:	460c      	mov	r4, r1
 8004d36:	4615      	mov	r5, r2
 8004d38:	461e      	mov	r6, r3
 8004d3a:	2900      	cmp	r1, #0
 8004d3c:	dd13      	ble.n	8004d66 <nrf24l01_receive+0x36>
 8004d3e:	2905      	cmp	r1, #5
 8004d40:	dc17      	bgt.n	8004d72 <nrf24l01_receive+0x42>
 8004d42:	b1e2      	cbz	r2, 8004d7e <nrf24l01_receive+0x4e>
 8004d44:	b30e      	cbz	r6, 8004d8a <nrf24l01_receive+0x5a>
    int rc = drv(dev)->read(pipe, (char *) buf, size);
 8004d46:	f7ff fda3 	bl	8004890 <_ZL3drvP8nrf24l01>
 8004d4a:	4633      	mov	r3, r6
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	4621      	mov	r1, r4
 8004d50:	f000 fcca 	bl	80056e8 <_ZN9nRF24L01P4readEiPci>
    assert(rc > 0);
 8004d54:	2800      	cmp	r0, #0
 8004d56:	dd1e      	ble.n	8004d96 <nrf24l01_receive+0x66>
}
 8004d58:	bd70      	pop	{r4, r5, r6, pc}
    assert(dev);  assert(pipe > 0);  assert(pipe <= 5);  assert(buf);  assert(size > 0);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fc fd49 	bl	80017f8 <__assert_func>
 8004d66:	2300      	movs	r3, #0
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7fc fd43 	bl	80017f8 <__assert_func>
 8004d72:	2300      	movs	r3, #0
 8004d74:	461a      	mov	r2, r3
 8004d76:	4619      	mov	r1, r3
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fc fd3d 	bl	80017f8 <__assert_func>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	461a      	mov	r2, r3
 8004d82:	4619      	mov	r1, r3
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fc fd37 	bl	80017f8 <__assert_func>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fc fd31 	bl	80017f8 <__assert_func>
    assert(rc > 0);
 8004d96:	2300      	movs	r3, #0
 8004d98:	461a      	mov	r2, r3
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fc fd2b 	bl	80017f8 <__assert_func>

08004da2 <nrf24l01_readable_pipe>:
int nrf24l01_readable_pipe(struct nrf24l01 *dev) {
 8004da2:	b508      	push	{r3, lr}
    assert(dev);
 8004da4:	b120      	cbz	r0, 8004db0 <nrf24l01_readable_pipe+0xe>
    int rc = drv(dev)->readablePipe();
 8004da6:	f7ff fd73 	bl	8004890 <_ZL3drvP8nrf24l01>
 8004daa:	f000 fc91 	bl	80056d0 <_ZN9nRF24L01P12readablePipeEv>
}
 8004dae:	bd08      	pop	{r3, pc}
    assert(dev);
 8004db0:	2300      	movs	r3, #0
 8004db2:	461a      	mov	r2, r3
 8004db4:	4619      	mov	r1, r3
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fc fd1e 	bl	80017f8 <__assert_func>

08004dbc <nrf24l01_set_rx_callback>:
int nrf24l01_set_rx_callback(struct nrf24l01 *dev, void (*callback)(struct os_event *ev)) {
 8004dbc:	b508      	push	{r3, lr}
    assert(callback);
 8004dbe:	b119      	cbz	r1, 8004dc8 <nrf24l01_set_rx_callback+0xc>
    nrf24l01_event.ev_cb = callback;
 8004dc0:	4a04      	ldr	r2, [pc, #16]	; (8004dd4 <nrf24l01_set_rx_callback+0x18>)
 8004dc2:	6051      	str	r1, [r2, #4]
}
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	bd08      	pop	{r3, pc}
    assert(callback);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fc fd12 	bl	80017f8 <__assert_func>
 8004dd4:	20002b1c 	.word	0x20002b1c

08004dd8 <nrf24l01_flush_txrx>:
int nrf24l01_flush_txrx(struct nrf24l01 *dev) {
 8004dd8:	b510      	push	{r4, lr}
    assert(dev);
 8004dda:	b158      	cbz	r0, 8004df4 <nrf24l01_flush_txrx+0x1c>
 8004ddc:	4604      	mov	r4, r0
    drv(dev)->flushTx();
 8004dde:	f7ff fd57 	bl	8004890 <_ZL3drvP8nrf24l01>
 8004de2:	f000 fd56 	bl	8005892 <_ZN9nRF24L01P7flushTxEv>
    drv(dev)->flushRx();
 8004de6:	4620      	mov	r0, r4
 8004de8:	f7ff fd52 	bl	8004890 <_ZL3drvP8nrf24l01>
 8004dec:	f000 fd41 	bl	8005872 <_ZN9nRF24L01P7flushRxEv>
}
 8004df0:	2000      	movs	r0, #0
 8004df2:	bd10      	pop	{r4, pc}
    assert(dev);
 8004df4:	2300      	movs	r3, #0
 8004df6:	461a      	mov	r2, r3
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fc fcfc 	bl	80017f8 <__assert_func>

08004e00 <_GLOBAL__sub_I_nrf24l01_init>:
}
 8004e00:	b508      	push	{r3, lr}
 8004e02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e06:	2001      	movs	r0, #1
 8004e08:	f7ff fe1c 	bl	8004a44 <_Z41__static_initialization_and_destruction_0ii>
 8004e0c:	bd08      	pop	{r3, pc}

08004e0e <_ZL7wait_usm>:
#endif  //  OS_TICKS_PER_SEC

//  Halt upon error.
#define error(fmt, arg1, arg2) { console_printf(fmt, arg1, arg2); console_flush(); assert(0); }

static void wait_us(uint32_t microsecs) {
 8004e0e:	b508      	push	{r3, lr}
    //  Wait for the number of microseconds.
    //  Originally:    microsecs * OS_TICKS_PER_SEC / 1000000
    //  Equivalent to: microsecs / USEC_PER_OS_TICK
    //  Here we approximate with Log Base 2 to avoid division.  Always approximate to give higher not lower number of ticks.
    uint32_t ticks = (microsecs >> USEC_PER_OS_TICK_LOG2) + 1;  //  Add 1 to avoid 0 ticks.
 8004e10:	0a40      	lsrs	r0, r0, #9
    //  console_printf("wait %u ticks\n", (unsigned) ticks);
    os_time_delay(ticks);
 8004e12:	3001      	adds	r0, #1
 8004e14:	f7fd fcf0 	bl	80027f8 <os_time_delay>
}
 8004e18:	bd08      	pop	{r3, pc}

08004e1a <_ZN9nRF24L01PC1Ev>:
/**
 * Methods
 */

nRF24L01P::nRF24L01P() {
    mode = _NRF24L01P_MODE_UNKNOWN;
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	6142      	str	r2, [r0, #20]
}
 8004e1e:	4770      	bx	lr

08004e20 <_ZN9nRF24L01P6enableEv>:

    config |= _NRF24L01P_CONFIG_MASK_RX_DR;
    setRegister(_NRF24L01P_REG_CONFIG, config);
}

void nRF24L01P::enable(void) {
 8004e20:	b508      	push	{r3, lr}

    ce_value = 1;
 8004e22:	2101      	movs	r1, #1
 8004e24:	6101      	str	r1, [r0, #16]
    hal_gpio_write(ce_pin, ce_value);  //  Set CE Pin to high.
 8004e26:	6880      	ldr	r0, [r0, #8]
 8004e28:	f004 fa8c 	bl	8009344 <hal_gpio_write>
    wait_us( _NRF24L01P_TIMING_Tpece2csn_us );
 8004e2c:	2004      	movs	r0, #4
 8004e2e:	f7ff ffee 	bl	8004e0e <_ZL7wait_usm>

}
 8004e32:	bd08      	pop	{r3, pc}

08004e34 <_ZN9nRF24L01P7disableEv>:


void nRF24L01P::disable(void) {
 8004e34:	b508      	push	{r3, lr}

    ce_value = 0;
 8004e36:	2100      	movs	r1, #0
 8004e38:	6101      	str	r1, [r0, #16]
    hal_gpio_write(ce_pin, ce_value);  //  Set CE Pin to low.
 8004e3a:	6880      	ldr	r0, [r0, #8]
 8004e3c:	f004 fa82 	bl	8009344 <hal_gpio_write>

}
 8004e40:	bd08      	pop	{r3, pc}

08004e42 <_ZN9nRF24L01P6selectEv>:

    return status;

}

void nRF24L01P::select(void) {
 8004e42:	b508      	push	{r3, lr}
    hal_gpio_write(cs_pin, 0);  //  Select the module.
 8004e44:	2100      	movs	r1, #0
 8004e46:	6840      	ldr	r0, [r0, #4]
 8004e48:	f004 fa7c 	bl	8009344 <hal_gpio_write>
}
 8004e4c:	bd08      	pop	{r3, pc}

08004e4e <_ZN9nRF24L01P8deselectEv>:

void nRF24L01P::deselect(void) {
 8004e4e:	b508      	push	{r3, lr}
    hal_gpio_write(cs_pin, 1);  //  Deselect the module.
 8004e50:	2101      	movs	r1, #1
 8004e52:	6840      	ldr	r0, [r0, #4]
 8004e54:	f004 fa76 	bl	8009344 <hal_gpio_write>
}
 8004e58:	bd08      	pop	{r3, pc}

08004e5a <_ZN9nRF24L01P8spiWriteEh>:
    //  Flush tx and rx.
    flushTx();
    flushRx();
}

uint8_t nRF24L01P::spiWrite(uint8_t val) {
 8004e5a:	b508      	push	{r3, lr}
    //  Write 8-bit val to the SPI port.  Return the result of the write.  
    //  Fail with an assertion error if SPI port was configured as slave.
    //  Need to provide this wrapper because hal_spi_tx_val() returns 16-bit 
    //  values that need to be truncated to 8 bits.
    uint16_t status = hal_spi_tx_val(spi_num, val);
 8004e5c:	6800      	ldr	r0, [r0, #0]
 8004e5e:	f004 fe23 	bl	8009aa8 <hal_spi_tx_val>
    assert(status != 0xffff);  //  SPI configured wrongly as slave.
 8004e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e66:	4298      	cmp	r0, r3
 8004e68:	d001      	beq.n	8004e6e <_ZN9nRF24L01P8spiWriteEh+0x14>
    return status & 0xff;      //  Return only 8 bits.
}
 8004e6a:	b2c0      	uxtb	r0, r0
 8004e6c:	bd08      	pop	{r3, pc}
    assert(status != 0xffff);  //  SPI configured wrongly as slave.
 8004e6e:	2300      	movs	r3, #0
 8004e70:	461a      	mov	r2, r3
 8004e72:	4619      	mov	r1, r3
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fc fcbf 	bl	80017f8 <__assert_func>

08004e7a <_ZN9nRF24L01P11setRegisterEii>:
void nRF24L01P::setRegister(int regAddress, int regData) {
 8004e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	460d      	mov	r5, r1
 8004e80:	4617      	mov	r7, r2
    int originalCe = ce_value;
 8004e82:	6906      	ldr	r6, [r0, #16]
    disable();
 8004e84:	f7ff ffd6 	bl	8004e34 <_ZN9nRF24L01P7disableEv>
    int cn = (_NRF24L01P_SPI_CMD_WR_REG | (regAddress & _NRF24L01P_REG_ADDRESS_MASK));
 8004e88:	f005 051f 	and.w	r5, r5, #31
 8004e8c:	f045 0520 	orr.w	r5, r5, #32
    select();  //  Set CS Pin to low.
 8004e90:	4620      	mov	r0, r4
 8004e92:	f7ff ffd6 	bl	8004e42 <_ZN9nRF24L01P6selectEv>
    spiWrite(cn);
 8004e96:	4629      	mov	r1, r5
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f7ff ffde 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
    spiWrite(regData & 0xFF);
 8004e9e:	b2f9      	uxtb	r1, r7
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f7ff ffda 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
    deselect();  //  Set CS Pin to high.
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f7ff ffd1 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
    if (originalCe) { enable(); }   //  Set CE Pin to high.
 8004eac:	b936      	cbnz	r6, 8004ebc <_ZN9nRF24L01P11setRegisterEii+0x42>
    else { disable(); }             //  Set CE Pin to low.
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f7ff ffc0 	bl	8004e34 <_ZN9nRF24L01P7disableEv>
    wait_us( _NRF24L01P_TIMING_Tpece2csn_us );
 8004eb4:	2004      	movs	r0, #4
 8004eb6:	f7ff ffaa 	bl	8004e0e <_ZL7wait_usm>
}
 8004eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (originalCe) { enable(); }   //  Set CE Pin to high.
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f7ff ffaf 	bl	8004e20 <_ZN9nRF24L01P6enableEv>
 8004ec2:	e7f7      	b.n	8004eb4 <_ZN9nRF24L01P11setRegisterEii+0x3a>

08004ec4 <_ZN9nRF24L01P14setRfFrequencyEi>:
void nRF24L01P::setRfFrequency(int frequency) {
 8004ec4:	b508      	push	{r3, lr}
    if ( ( frequency < NRF24L01P_MIN_RF_FREQUENCY ) || ( frequency > NRF24L01P_MAX_RF_FREQUENCY ) ) {
 8004ec6:	f5a1 6316 	sub.w	r3, r1, #2400	; 0x960
 8004eca:	2b7d      	cmp	r3, #125	; 0x7d
 8004ecc:	d807      	bhi.n	8004ede <_ZN9nRF24L01P14setRfFrequencyEi+0x1a>
    int channel = ( frequency - NRF24L01P_MIN_RF_FREQUENCY ) & 0x7F;
 8004ece:	f5a1 6216 	sub.w	r2, r1, #2400	; 0x960
    setRegister(_NRF24L01P_REG_RF_CH, channel);
 8004ed2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ed6:	2105      	movs	r1, #5
 8004ed8:	f7ff ffcf 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
}
 8004edc:	bd08      	pop	{r3, pc}
        error( "%sbad freq %d\r\n", _nrf, frequency );
 8004ede:	460a      	mov	r2, r1
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <_ZN9nRF24L01P14setRfFrequencyEi+0x38>)
 8004ee2:	6819      	ldr	r1, [r3, #0]
 8004ee4:	4806      	ldr	r0, [pc, #24]	; (8004f00 <_ZN9nRF24L01P14setRfFrequencyEi+0x3c>)
 8004ee6:	f001 fa23 	bl	8006330 <console_printf>
 8004eea:	f001 fa67 	bl	80063bc <console_flush>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fc fc7f 	bl	80017f8 <__assert_func>
 8004efa:	bf00      	nop
 8004efc:	200001b4 	.word	0x200001b4
 8004f00:	0800d6fc 	.word	0x0800d6fc

08004f04 <_ZN9nRF24L01P15setTransferSizeEii>:
void nRF24L01P::setTransferSize(int size, int pipe) {
 8004f04:	b508      	push	{r3, lr}
 8004f06:	4613      	mov	r3, r2
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 8004f08:	2a05      	cmp	r2, #5
 8004f0a:	d808      	bhi.n	8004f1e <_ZN9nRF24L01P15setTransferSizeEii+0x1a>
    if ( ( size < 0 ) || ( size > _NRF24L01P_RX_FIFO_SIZE ) ) {
 8004f0c:	2920      	cmp	r1, #32
 8004f0e:	d813      	bhi.n	8004f38 <_ZN9nRF24L01P15setTransferSizeEii+0x34>
    setRegister(rxPwPxRegister, ( size & _NRF24L01P_RX_PW_Px_MASK ) );
 8004f10:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 8004f14:	f103 0111 	add.w	r1, r3, #17
 8004f18:	f7ff ffaf 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
}
 8004f1c:	bd08      	pop	{r3, pc}
        error( "%sbad tx size %d\r\n", _nrf, pipe );
 8004f1e:	4b0d      	ldr	r3, [pc, #52]	; (8004f54 <_ZN9nRF24L01P15setTransferSizeEii+0x50>)
 8004f20:	6819      	ldr	r1, [r3, #0]
 8004f22:	480d      	ldr	r0, [pc, #52]	; (8004f58 <_ZN9nRF24L01P15setTransferSizeEii+0x54>)
 8004f24:	f001 fa04 	bl	8006330 <console_printf>
 8004f28:	f001 fa48 	bl	80063bc <console_flush>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4619      	mov	r1, r3
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fc fc60 	bl	80017f8 <__assert_func>
        error( "%sbad tx size %d\r\n", _nrf, size );
 8004f38:	460a      	mov	r2, r1
 8004f3a:	4b06      	ldr	r3, [pc, #24]	; (8004f54 <_ZN9nRF24L01P15setTransferSizeEii+0x50>)
 8004f3c:	6819      	ldr	r1, [r3, #0]
 8004f3e:	4806      	ldr	r0, [pc, #24]	; (8004f58 <_ZN9nRF24L01P15setTransferSizeEii+0x54>)
 8004f40:	f001 f9f6 	bl	8006330 <console_printf>
 8004f44:	f001 fa3a 	bl	80063bc <console_flush>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fc fc52 	bl	80017f8 <__assert_func>
 8004f54:	200001b4 	.word	0x200001b4
 8004f58:	0800d71c 	.word	0x0800d71c

08004f5c <_ZN9nRF24L01P17disableAllRxPipesEv>:
void nRF24L01P::disableAllRxPipes(void) {
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	4604      	mov	r4, r0
    console_printf("%sdisable rx\n", _nrf); ////
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <_ZN9nRF24L01P17disableAllRxPipesEv+0x1c>)
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	4805      	ldr	r0, [pc, #20]	; (8004f7c <_ZN9nRF24L01P17disableAllRxPipesEv+0x20>)
 8004f66:	f001 f9e3 	bl	8006330 <console_printf>
    setRegister(_NRF24L01P_REG_EN_RXADDR, _NRF24L01P_EN_RXADDR_NONE);
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2102      	movs	r1, #2
 8004f6e:	4620      	mov	r0, r4
 8004f70:	f7ff ff83 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
}
 8004f74:	bd10      	pop	{r4, pc}
 8004f76:	bf00      	nop
 8004f78:	200001b4 	.word	0x200001b4
 8004f7c:	0800d750 	.word	0x0800d750

08004f80 <_ZN9nRF24L01P22disableAutoAcknowledgeEv>:
void nRF24L01P::disableAutoAcknowledge(void) {
 8004f80:	b508      	push	{r3, lr}
    setRegister(_NRF24L01P_REG_EN_AA, _NRF24L01P_EN_AA_NONE);
 8004f82:	2200      	movs	r2, #0
 8004f84:	2101      	movs	r1, #1
 8004f86:	f7ff ff78 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
}
 8004f8a:	bd08      	pop	{r3, pc}

08004f8c <_ZN9nRF24L01P21disableAutoRetransmitEv>:
void nRF24L01P::disableAutoRetransmit(void) {
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	4604      	mov	r4, r0
    setRegister(_NRF24L01P_REG_SETUP_RETR, _NRF24L01P_SETUP_RETR_NONE);
 8004f90:	2200      	movs	r2, #0
 8004f92:	2104      	movs	r1, #4
 8004f94:	f7ff ff71 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
    a_retr_enabled = false;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	7623      	strb	r3, [r4, #24]
}
 8004f9c:	bd10      	pop	{r4, pc}

08004f9e <_ZN9nRF24L01P11getRegisterEi>:
int nRF24L01P::getRegister(int regAddress) {
 8004f9e:	b538      	push	{r3, r4, r5, lr}
 8004fa0:	4604      	mov	r4, r0
    int cn = (_NRF24L01P_SPI_CMD_RD_REG | (regAddress & _NRF24L01P_REG_ADDRESS_MASK));
 8004fa2:	f001 051f 	and.w	r5, r1, #31
    select();  //  Set CS Pin to low.
 8004fa6:	f7ff ff4c 	bl	8004e42 <_ZN9nRF24L01P6selectEv>
    spiWrite(cn);
 8004faa:	4629      	mov	r1, r5
 8004fac:	4620      	mov	r0, r4
 8004fae:	f7ff ff54 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
    int dn = spiWrite(_NRF24L01P_SPI_CMD_NOP);
 8004fb2:	21ff      	movs	r1, #255	; 0xff
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f7ff ff50 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
 8004fba:	4605      	mov	r5, r0
    deselect();  //  Set CS Pin to high.
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f7ff ff46 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
}
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	bd38      	pop	{r3, r4, r5, pc}
	...

08004fc8 <_ZN9nRF24L01P7powerUpEv>:
void nRF24L01P::powerUp(void) {
 8004fc8:	b510      	push	{r4, lr}
 8004fca:	4604      	mov	r4, r0
    console_printf("%spower up\n", _nrf); ////
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <_ZN9nRF24L01P7powerUpEv+0x30>)
 8004fce:	6819      	ldr	r1, [r3, #0]
 8004fd0:	480a      	ldr	r0, [pc, #40]	; (8004ffc <_ZN9nRF24L01P7powerUpEv+0x34>)
 8004fd2:	f001 f9ad 	bl	8006330 <console_printf>
    int config = getRegister(_NRF24L01P_REG_CONFIG);
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f7ff ffe0 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
    setRegister(_NRF24L01P_REG_CONFIG, config);
 8004fde:	f040 0202 	orr.w	r2, r0, #2
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f7ff ff48 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
    wait_us( _NRF24L01P_TIMING_Tpd2stby_us );
 8004fea:	f241 1094 	movw	r0, #4500	; 0x1194
 8004fee:	f7ff ff0e 	bl	8004e0e <_ZL7wait_usm>
    mode = _NRF24L01P_MODE_STANDBY;
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	6163      	str	r3, [r4, #20]
}
 8004ff6:	bd10      	pop	{r4, pc}
 8004ff8:	200001b4 	.word	0x200001b4
 8004ffc:	0800d794 	.word	0x0800d794

08005000 <_ZN9nRF24L01P14setReceiveModeEv>:
void nRF24L01P::setReceiveMode(void) {
 8005000:	b510      	push	{r4, lr}
 8005002:	4604      	mov	r4, r0
    console_printf("%srx mode\n", _nrf); ////
 8005004:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <_ZN9nRF24L01P14setReceiveModeEv+0x38>)
 8005006:	6819      	ldr	r1, [r3, #0]
 8005008:	480c      	ldr	r0, [pc, #48]	; (800503c <_ZN9nRF24L01P14setReceiveModeEv+0x3c>)
 800500a:	f001 f991 	bl	8006330 <console_printf>
    if ( _NRF24L01P_MODE_POWER_DOWN == mode ) { powerUp(); }
 800500e:	6963      	ldr	r3, [r4, #20]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d00c      	beq.n	800502e <_ZN9nRF24L01P14setReceiveModeEv+0x2e>
    int config = getRegister(_NRF24L01P_REG_CONFIG);
 8005014:	2100      	movs	r1, #0
 8005016:	4620      	mov	r0, r4
 8005018:	f7ff ffc1 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
    setRegister(_NRF24L01P_REG_CONFIG, config);
 800501c:	f040 0201 	orr.w	r2, r0, #1
 8005020:	2100      	movs	r1, #0
 8005022:	4620      	mov	r0, r4
 8005024:	f7ff ff29 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
    mode = _NRF24L01P_MODE_RX;
 8005028:	2303      	movs	r3, #3
 800502a:	6163      	str	r3, [r4, #20]
}
 800502c:	bd10      	pop	{r4, pc}
    if ( _NRF24L01P_MODE_POWER_DOWN == mode ) { powerUp(); }
 800502e:	4620      	mov	r0, r4
 8005030:	f7ff ffca 	bl	8004fc8 <_ZN9nRF24L01P7powerUpEv>
 8005034:	e7ee      	b.n	8005014 <_ZN9nRF24L01P14setReceiveModeEv+0x14>
 8005036:	bf00      	nop
 8005038:	200001b4 	.word	0x200001b4
 800503c:	0800d6f0 	.word	0x0800d6f0

08005040 <_ZN9nRF24L01P15setTransmitModeEv>:
void nRF24L01P::setTransmitMode(void) {
 8005040:	b510      	push	{r4, lr}
 8005042:	4604      	mov	r4, r0
    console_printf("%stx mode\n", _nrf); ////
 8005044:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <_ZN9nRF24L01P15setTransmitModeEv+0x38>)
 8005046:	6819      	ldr	r1, [r3, #0]
 8005048:	480c      	ldr	r0, [pc, #48]	; (800507c <_ZN9nRF24L01P15setTransmitModeEv+0x3c>)
 800504a:	f001 f971 	bl	8006330 <console_printf>
    if ( _NRF24L01P_MODE_POWER_DOWN == mode ) { powerUp(); }
 800504e:	6963      	ldr	r3, [r4, #20]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d00c      	beq.n	800506e <_ZN9nRF24L01P15setTransmitModeEv+0x2e>
    int config = getRegister(_NRF24L01P_REG_CONFIG);
 8005054:	2100      	movs	r1, #0
 8005056:	4620      	mov	r0, r4
 8005058:	f7ff ffa1 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
    setRegister(_NRF24L01P_REG_CONFIG, config);
 800505c:	f020 0201 	bic.w	r2, r0, #1
 8005060:	2100      	movs	r1, #0
 8005062:	4620      	mov	r0, r4
 8005064:	f7ff ff09 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
    mode = _NRF24L01P_MODE_TX;
 8005068:	2304      	movs	r3, #4
 800506a:	6163      	str	r3, [r4, #20]
}
 800506c:	bd10      	pop	{r4, pc}
    if ( _NRF24L01P_MODE_POWER_DOWN == mode ) { powerUp(); }
 800506e:	4620      	mov	r0, r4
 8005070:	f7ff ffaa 	bl	8004fc8 <_ZN9nRF24L01P7powerUpEv>
 8005074:	e7ee      	b.n	8005054 <_ZN9nRF24L01P15setTransmitModeEv+0x14>
 8005076:	bf00      	nop
 8005078:	200001b4 	.word	0x200001b4
 800507c:	0800d730 	.word	0x0800d730

08005080 <_ZN9nRF24L01P17enableRxInterruptEv>:
void nRF24L01P::enableRxInterrupt(void) {
 8005080:	b510      	push	{r4, lr}
 8005082:	4604      	mov	r4, r0
    console_printf("%senable int\n", _nrf); ////
 8005084:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <_ZN9nRF24L01P17enableRxInterruptEv+0x24>)
 8005086:	6819      	ldr	r1, [r3, #0]
 8005088:	4807      	ldr	r0, [pc, #28]	; (80050a8 <_ZN9nRF24L01P17enableRxInterruptEv+0x28>)
 800508a:	f001 f951 	bl	8006330 <console_printf>
    int config = getRegister(_NRF24L01P_REG_CONFIG);
 800508e:	2100      	movs	r1, #0
 8005090:	4620      	mov	r0, r4
 8005092:	f7ff ff84 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
    setRegister(_NRF24L01P_REG_CONFIG, config);
 8005096:	f020 0240 	bic.w	r2, r0, #64	; 0x40
 800509a:	2100      	movs	r1, #0
 800509c:	4620      	mov	r0, r4
 800509e:	f7ff feec 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
}
 80050a2:	bd10      	pop	{r4, pc}
 80050a4:	200001b4 	.word	0x200001b4
 80050a8:	0800d760 	.word	0x0800d760

080050ac <_ZN9nRF24L01P18disableRxInterruptEv>:
void nRF24L01P::disableRxInterrupt(void) {
 80050ac:	b510      	push	{r4, lr}
 80050ae:	4604      	mov	r4, r0
    console_printf("%sdisable int\n", _nrf); ////
 80050b0:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <_ZN9nRF24L01P18disableRxInterruptEv+0x24>)
 80050b2:	6819      	ldr	r1, [r3, #0]
 80050b4:	4807      	ldr	r0, [pc, #28]	; (80050d4 <_ZN9nRF24L01P18disableRxInterruptEv+0x28>)
 80050b6:	f001 f93b 	bl	8006330 <console_printf>
    int config = getRegister(_NRF24L01P_REG_CONFIG);
 80050ba:	2100      	movs	r1, #0
 80050bc:	4620      	mov	r0, r4
 80050be:	f7ff ff6e 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
    setRegister(_NRF24L01P_REG_CONFIG, config);
 80050c2:	f040 0240 	orr.w	r2, r0, #64	; 0x40
 80050c6:	2100      	movs	r1, #0
 80050c8:	4620      	mov	r0, r4
 80050ca:	f7ff fed6 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
}
 80050ce:	bd10      	pop	{r4, pc}
 80050d0:	200001b4 	.word	0x200001b4
 80050d4:	0800d770 	.word	0x0800d770

080050d8 <_ZN9nRF24L01P14getRfFrequencyEv>:
int nRF24L01P::getRfFrequency(void) {
 80050d8:	b508      	push	{r3, lr}
    int channel = getRegister(_NRF24L01P_REG_RF_CH) & 0x7F;
 80050da:	2105      	movs	r1, #5
 80050dc:	f7ff ff5f 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
 80050e0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
 80050e4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
 80050e8:	bd08      	pop	{r3, pc}
	...

080050ec <_ZN9nRF24L01P16setRfOutputPowerEi>:
void nRF24L01P::setRfOutputPower(int power) {
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4605      	mov	r5, r0
 80050f0:	460c      	mov	r4, r1
    int rfSetup = getRegister(_NRF24L01P_REG_RF_SETUP) & ~_NRF24L01P_RF_SETUP_RF_PWR_MASK;
 80050f2:	2106      	movs	r1, #6
 80050f4:	f7ff ff53 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
 80050f8:	f020 0206 	bic.w	r2, r0, #6
    switch ( power ) {
 80050fc:	f104 0312 	add.w	r3, r4, #18
 8005100:	2b12      	cmp	r3, #18
 8005102:	d818      	bhi.n	8005136 <_ZN9nRF24L01P16setRfOutputPowerEi+0x4a>
 8005104:	e8df f003 	tbb	[pc, r3]
 8005108:	1717170c 	.word	0x1717170c
 800510c:	17141717 	.word	0x17141717
 8005110:	17171717 	.word	0x17171717
 8005114:	17171711 	.word	0x17171711
 8005118:	1717      	.short	0x1717
 800511a:	0a          	.byte	0x0a
 800511b:	00          	.byte	0x00
            rfSetup |= _NRF24L01P_RF_SETUP_RF_PWR_0DBM;
 800511c:	f042 0206 	orr.w	r2, r2, #6
    setRegister(_NRF24L01P_REG_RF_SETUP, rfSetup);
 8005120:	2106      	movs	r1, #6
 8005122:	4628      	mov	r0, r5
 8005124:	f7ff fea9 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
}
 8005128:	bd38      	pop	{r3, r4, r5, pc}
            rfSetup |= _NRF24L01P_RF_SETUP_RF_PWR_MINUS_6DBM;
 800512a:	f042 0204 	orr.w	r2, r2, #4
            break;
 800512e:	e7f7      	b.n	8005120 <_ZN9nRF24L01P16setRfOutputPowerEi+0x34>
            rfSetup |= _NRF24L01P_RF_SETUP_RF_PWR_MINUS_12DBM;
 8005130:	f042 0202 	orr.w	r2, r2, #2
            break;
 8005134:	e7f4      	b.n	8005120 <_ZN9nRF24L01P16setRfOutputPowerEi+0x34>
            error( "%sbad power %d\r\n", _nrf, power );
 8005136:	4622      	mov	r2, r4
 8005138:	4b06      	ldr	r3, [pc, #24]	; (8005154 <_ZN9nRF24L01P16setRfOutputPowerEi+0x68>)
 800513a:	6819      	ldr	r1, [r3, #0]
 800513c:	4806      	ldr	r0, [pc, #24]	; (8005158 <_ZN9nRF24L01P16setRfOutputPowerEi+0x6c>)
 800513e:	f001 f8f7 	bl	8006330 <console_printf>
 8005142:	f001 f93b 	bl	80063bc <console_flush>
 8005146:	2300      	movs	r3, #0
 8005148:	461a      	mov	r2, r3
 800514a:	4619      	mov	r1, r3
 800514c:	4618      	mov	r0, r3
 800514e:	f7fc fb53 	bl	80017f8 <__assert_func>
 8005152:	bf00      	nop
 8005154:	200001b4 	.word	0x200001b4
 8005158:	0800d73c 	.word	0x0800d73c

0800515c <_ZN9nRF24L01P16getRfOutputPowerEv>:
int nRF24L01P::getRfOutputPower(void) {
 800515c:	b508      	push	{r3, lr}
    int rfPwr = getRegister(_NRF24L01P_REG_RF_SETUP) & _NRF24L01P_RF_SETUP_RF_PWR_MASK;
 800515e:	2106      	movs	r1, #6
 8005160:	f7ff ff1d 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
 8005164:	f000 0006 	and.w	r0, r0, #6
    switch ( rfPwr ) {
 8005168:	2806      	cmp	r0, #6
 800516a:	d80b      	bhi.n	8005184 <_ZN9nRF24L01P16getRfOutputPowerEv+0x28>
 800516c:	e8df f000 	tbb	[pc, r0]
 8005170:	0a040a07 	.word	0x0a040a07
 8005174:	0a1a      	.short	0x0a1a
 8005176:	18          	.byte	0x18
 8005177:	00          	.byte	0x00
            return NRF24L01P_TX_PWR_MINUS_12_DB;
 8005178:	f06f 000b 	mvn.w	r0, #11
}
 800517c:	bd08      	pop	{r3, pc}
            return NRF24L01P_TX_PWR_MINUS_18_DB;
 800517e:	f06f 0011 	mvn.w	r0, #17
 8005182:	e7fb      	b.n	800517c <_ZN9nRF24L01P16getRfOutputPowerEv+0x20>
            error( "%sbad power %d\r\n", _nrf, rfPwr );
 8005184:	4602      	mov	r2, r0
 8005186:	4b09      	ldr	r3, [pc, #36]	; (80051ac <_ZN9nRF24L01P16getRfOutputPowerEv+0x50>)
 8005188:	6819      	ldr	r1, [r3, #0]
 800518a:	4809      	ldr	r0, [pc, #36]	; (80051b0 <_ZN9nRF24L01P16getRfOutputPowerEv+0x54>)
 800518c:	f001 f8d0 	bl	8006330 <console_printf>
 8005190:	f001 f914 	bl	80063bc <console_flush>
 8005194:	2300      	movs	r3, #0
 8005196:	461a      	mov	r2, r3
 8005198:	4619      	mov	r1, r3
 800519a:	4618      	mov	r0, r3
 800519c:	f7fc fb2c 	bl	80017f8 <__assert_func>
            return NRF24L01P_TX_PWR_ZERO_DB;
 80051a0:	2000      	movs	r0, #0
 80051a2:	e7eb      	b.n	800517c <_ZN9nRF24L01P16getRfOutputPowerEv+0x20>
            return NRF24L01P_TX_PWR_MINUS_6_DB;
 80051a4:	f06f 0005 	mvn.w	r0, #5
 80051a8:	e7e8      	b.n	800517c <_ZN9nRF24L01P16getRfOutputPowerEv+0x20>
 80051aa:	bf00      	nop
 80051ac:	200001b4 	.word	0x200001b4
 80051b0:	0800d73c 	.word	0x0800d73c

080051b4 <_ZN9nRF24L01P14setAirDataRateEi>:
void nRF24L01P::setAirDataRate(int rate) {
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4605      	mov	r5, r0
 80051b8:	460c      	mov	r4, r1
    int rfSetup = getRegister(_NRF24L01P_REG_RF_SETUP) & ~_NRF24L01P_RF_SETUP_RF_DR_MASK;
 80051ba:	2106      	movs	r1, #6
 80051bc:	f7ff feef 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
 80051c0:	f020 0228 	bic.w	r2, r0, #40	; 0x28
    switch ( rate ) {
 80051c4:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80051c8:	d014      	beq.n	80051f4 <_ZN9nRF24L01P14setAirDataRateEi+0x40>
 80051ca:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80051ce:	d016      	beq.n	80051fe <_ZN9nRF24L01P14setAirDataRateEi+0x4a>
 80051d0:	2cfa      	cmp	r4, #250	; 0xfa
 80051d2:	d00d      	beq.n	80051f0 <_ZN9nRF24L01P14setAirDataRateEi+0x3c>
            error( "%sbad data rate %d\r\n", _nrf, rate );
 80051d4:	4622      	mov	r2, r4
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <_ZN9nRF24L01P14setAirDataRateEi+0x50>)
 80051d8:	6819      	ldr	r1, [r3, #0]
 80051da:	480b      	ldr	r0, [pc, #44]	; (8005208 <_ZN9nRF24L01P14setAirDataRateEi+0x54>)
 80051dc:	f001 f8a8 	bl	8006330 <console_printf>
 80051e0:	f001 f8ec 	bl	80063bc <console_flush>
 80051e4:	2300      	movs	r3, #0
 80051e6:	461a      	mov	r2, r3
 80051e8:	4619      	mov	r1, r3
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fc fb04 	bl	80017f8 <__assert_func>
            rfSetup |= _NRF24L01P_RF_SETUP_RF_DR_250KBPS;
 80051f0:	f042 0220 	orr.w	r2, r2, #32
    setRegister(_NRF24L01P_REG_RF_SETUP, rfSetup);
 80051f4:	2106      	movs	r1, #6
 80051f6:	4628      	mov	r0, r5
 80051f8:	f7ff fe3f 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
}
 80051fc:	bd38      	pop	{r3, r4, r5, pc}
            rfSetup |= _NRF24L01P_RF_SETUP_RF_DR_2MBPS;
 80051fe:	f042 0208 	orr.w	r2, r2, #8
            break;
 8005202:	e7f7      	b.n	80051f4 <_ZN9nRF24L01P14setAirDataRateEi+0x40>
 8005204:	200001b4 	.word	0x200001b4
 8005208:	0800d6d8 	.word	0x0800d6d8

0800520c <_ZN9nRF24L01P14getAirDataRateEv>:
int nRF24L01P::getAirDataRate(void) {
 800520c:	b508      	push	{r3, lr}
    int rfDataRate = getRegister(_NRF24L01P_REG_RF_SETUP) & _NRF24L01P_RF_SETUP_RF_DR_MASK;
 800520e:	2106      	movs	r1, #6
 8005210:	f7ff fec5 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
 8005214:	f000 0028 	and.w	r0, r0, #40	; 0x28
    switch ( rfDataRate ) {
 8005218:	2808      	cmp	r0, #8
 800521a:	d010      	beq.n	800523e <_ZN9nRF24L01P14getAirDataRateEv+0x32>
 800521c:	2820      	cmp	r0, #32
 800521e:	d011      	beq.n	8005244 <_ZN9nRF24L01P14getAirDataRateEv+0x38>
 8005220:	b190      	cbz	r0, 8005248 <_ZN9nRF24L01P14getAirDataRateEv+0x3c>
            error( "%sbad data rate %d\r\n", _nrf, rfDataRate );
 8005222:	4602      	mov	r2, r0
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <_ZN9nRF24L01P14getAirDataRateEv+0x44>)
 8005226:	6819      	ldr	r1, [r3, #0]
 8005228:	480a      	ldr	r0, [pc, #40]	; (8005254 <_ZN9nRF24L01P14getAirDataRateEv+0x48>)
 800522a:	f001 f881 	bl	8006330 <console_printf>
 800522e:	f001 f8c5 	bl	80063bc <console_flush>
 8005232:	2300      	movs	r3, #0
 8005234:	461a      	mov	r2, r3
 8005236:	4619      	mov	r1, r3
 8005238:	4618      	mov	r0, r3
 800523a:	f7fc fadd 	bl	80017f8 <__assert_func>
            return NRF24L01P_DATARATE_2_MBPS;
 800523e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
 8005242:	bd08      	pop	{r3, pc}
            return NRF24L01P_DATARATE_250_KBPS;
 8005244:	20fa      	movs	r0, #250	; 0xfa
 8005246:	e7fc      	b.n	8005242 <_ZN9nRF24L01P14getAirDataRateEv+0x36>
            return NRF24L01P_DATARATE_1_MBPS;
 8005248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800524c:	e7f9      	b.n	8005242 <_ZN9nRF24L01P14getAirDataRateEv+0x36>
 800524e:	bf00      	nop
 8005250:	200001b4 	.word	0x200001b4
 8005254:	0800d6d8 	.word	0x0800d6d8

08005258 <_ZN9nRF24L01P11setCrcWidthEi>:
void nRF24L01P::setCrcWidth(int width) {
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4605      	mov	r5, r0
 800525c:	460c      	mov	r4, r1
    int config = getRegister(_NRF24L01P_REG_CONFIG) & ~_NRF24L01P_CONFIG_CRC_MASK;
 800525e:	2100      	movs	r1, #0
 8005260:	f7ff fe9d 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
 8005264:	f020 020c 	bic.w	r2, r0, #12
    switch ( width ) {
 8005268:	2c08      	cmp	r4, #8
 800526a:	d010      	beq.n	800528e <_ZN9nRF24L01P11setCrcWidthEi+0x36>
 800526c:	2c10      	cmp	r4, #16
 800526e:	d015      	beq.n	800529c <_ZN9nRF24L01P11setCrcWidthEi+0x44>
 8005270:	b17c      	cbz	r4, 8005292 <_ZN9nRF24L01P11setCrcWidthEi+0x3a>
            error( "%sbad crc width %d\r\n", _nrf, width );
 8005272:	4622      	mov	r2, r4
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <_ZN9nRF24L01P11setCrcWidthEi+0x4c>)
 8005276:	6819      	ldr	r1, [r3, #0]
 8005278:	480b      	ldr	r0, [pc, #44]	; (80052a8 <_ZN9nRF24L01P11setCrcWidthEi+0x50>)
 800527a:	f001 f859 	bl	8006330 <console_printf>
 800527e:	f001 f89d 	bl	80063bc <console_flush>
 8005282:	2300      	movs	r3, #0
 8005284:	461a      	mov	r2, r3
 8005286:	4619      	mov	r1, r3
 8005288:	4618      	mov	r0, r3
 800528a:	f7fc fab5 	bl	80017f8 <__assert_func>
            config |= _NRF24L01P_CONFIG_CRC_8BIT;
 800528e:	f042 0208 	orr.w	r2, r2, #8
    setRegister(_NRF24L01P_REG_CONFIG, config);
 8005292:	2100      	movs	r1, #0
 8005294:	4628      	mov	r0, r5
 8005296:	f7ff fdf0 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
}
 800529a:	bd38      	pop	{r3, r4, r5, pc}
            config |= _NRF24L01P_CONFIG_CRC_16BIT;
 800529c:	f042 020c 	orr.w	r2, r2, #12
            break;
 80052a0:	e7f7      	b.n	8005292 <_ZN9nRF24L01P11setCrcWidthEi+0x3a>
 80052a2:	bf00      	nop
 80052a4:	200001b4 	.word	0x200001b4
 80052a8:	0800d664 	.word	0x0800d664

080052ac <_ZN9nRF24L01P15getTransferSizeEi>:
int nRF24L01P::getTransferSize(int pipe) {
 80052ac:	b508      	push	{r3, lr}
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 80052ae:	2905      	cmp	r1, #5
 80052b0:	d805      	bhi.n	80052be <_ZN9nRF24L01P15getTransferSizeEi+0x12>
    int size = getRegister(rxPwPxRegister);
 80052b2:	3111      	adds	r1, #17
 80052b4:	f7ff fe73 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
}
 80052b8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80052bc:	bd08      	pop	{r3, pc}
        error( "%sbad pipe %d\r\n", _nrf, pipe );
 80052be:	460a      	mov	r2, r1
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <_ZN9nRF24L01P15getTransferSizeEi+0x30>)
 80052c2:	6819      	ldr	r1, [r3, #0]
 80052c4:	4806      	ldr	r0, [pc, #24]	; (80052e0 <_ZN9nRF24L01P15getTransferSizeEi+0x34>)
 80052c6:	f001 f833 	bl	8006330 <console_printf>
 80052ca:	f001 f877 	bl	80063bc <console_flush>
 80052ce:	2300      	movs	r3, #0
 80052d0:	461a      	mov	r2, r3
 80052d2:	4619      	mov	r1, r3
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fc fa8f 	bl	80017f8 <__assert_func>
 80052da:	bf00      	nop
 80052dc:	200001b4 	.word	0x200001b4
 80052e0:	0800d70c 	.word	0x0800d70c

080052e4 <_ZN9nRF24L01P21enableAutoAcknowledgeEi>:
void nRF24L01P::enableAutoAcknowledge(int pipe) {
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	460c      	mov	r4, r1
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 80052e8:	2905      	cmp	r1, #5
 80052ea:	d80b      	bhi.n	8005304 <_ZN9nRF24L01P21enableAutoAcknowledgeEi+0x20>
 80052ec:	4605      	mov	r5, r0
    int enAA = getRegister(_NRF24L01P_REG_EN_AA);
 80052ee:	2101      	movs	r1, #1
 80052f0:	f7ff fe55 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
    enAA |= ( 1 << (pipe - NRF24L01P_PIPE_P0) );
 80052f4:	2101      	movs	r1, #1
 80052f6:	fa01 f204 	lsl.w	r2, r1, r4
    setRegister(_NRF24L01P_REG_EN_AA, enAA);
 80052fa:	4302      	orrs	r2, r0
 80052fc:	4628      	mov	r0, r5
 80052fe:	f7ff fdbc 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
}
 8005302:	bd38      	pop	{r3, r4, r5, pc}
        error( "%sbad ack pipe %d\r\n", _nrf, pipe );
 8005304:	460a      	mov	r2, r1
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <_ZN9nRF24L01P21enableAutoAcknowledgeEi+0x3c>)
 8005308:	6819      	ldr	r1, [r3, #0]
 800530a:	4806      	ldr	r0, [pc, #24]	; (8005324 <_ZN9nRF24L01P21enableAutoAcknowledgeEi+0x40>)
 800530c:	f001 f810 	bl	8006330 <console_printf>
 8005310:	f001 f854 	bl	80063bc <console_flush>
 8005314:	2300      	movs	r3, #0
 8005316:	461a      	mov	r2, r3
 8005318:	4619      	mov	r1, r3
 800531a:	4618      	mov	r0, r3
 800531c:	f7fc fa6c 	bl	80017f8 <__assert_func>
 8005320:	200001b4 	.word	0x200001b4
 8005324:	0800d780 	.word	0x0800d780

08005328 <_ZN9nRF24L01P12setRxAddressEyii>:
void nRF24L01P::setRxAddress(unsigned long long address, int width, int pipe) {
 8005328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800532c:	9d08      	ldr	r5, [sp, #32]
 800532e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 8005332:	f1b9 0f05 	cmp.w	r9, #5
 8005336:	d820      	bhi.n	800537a <_ZN9nRF24L01P12setRxAddressEyii+0x52>
 8005338:	4680      	mov	r8, r0
 800533a:	4614      	mov	r4, r2
 800533c:	461f      	mov	r7, r3
    if ( ( pipe == NRF24L01P_PIPE_P0 ) || ( pipe == NRF24L01P_PIPE_P1 ) ) {
 800533e:	f1b9 0f01 	cmp.w	r9, #1
 8005342:	d928      	bls.n	8005396 <_ZN9nRF24L01P12setRxAddressEyii+0x6e>
        width = 1;
 8005344:	2501      	movs	r5, #1
    int rxAddrPxRegister = _NRF24L01P_REG_RX_ADDR_P0 + ( pipe - NRF24L01P_PIPE_P0 );
 8005346:	f109 060a 	add.w	r6, r9, #10
    int cn = (_NRF24L01P_SPI_CMD_WR_REG | (rxAddrPxRegister & _NRF24L01P_REG_ADDRESS_MASK));
 800534a:	f006 061f 	and.w	r6, r6, #31
 800534e:	f046 0620 	orr.w	r6, r6, #32
    select();  //  Set CS Pin to low.
 8005352:	4640      	mov	r0, r8
 8005354:	f7ff fd75 	bl	8004e42 <_ZN9nRF24L01P6selectEv>
    spiWrite(cn);
 8005358:	4631      	mov	r1, r6
 800535a:	4640      	mov	r0, r8
 800535c:	f7ff fd7d 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
    while ( width-- > 0 ) {
 8005360:	1e6e      	subs	r6, r5, #1
 8005362:	2d00      	cmp	r5, #0
 8005364:	dd3d      	ble.n	80053e2 <_ZN9nRF24L01P12setRxAddressEyii+0xba>
        spiWrite((int) (address & 0xFF));
 8005366:	b2e1      	uxtb	r1, r4
 8005368:	4640      	mov	r0, r8
 800536a:	f7ff fd76 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
        address >>= 8;
 800536e:	0a24      	lsrs	r4, r4, #8
 8005370:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 8005374:	0a3f      	lsrs	r7, r7, #8
    while ( width-- > 0 ) {
 8005376:	4635      	mov	r5, r6
 8005378:	e7f2      	b.n	8005360 <_ZN9nRF24L01P12setRxAddressEyii+0x38>
        error( "%sbad rx pipe %d\r\n", _nrf, pipe );
 800537a:	464a      	mov	r2, r9
 800537c:	4b21      	ldr	r3, [pc, #132]	; (8005404 <_ZN9nRF24L01P12setRxAddressEyii+0xdc>)
 800537e:	6819      	ldr	r1, [r3, #0]
 8005380:	4821      	ldr	r0, [pc, #132]	; (8005408 <_ZN9nRF24L01P12setRxAddressEyii+0xe0>)
 8005382:	f000 ffd5 	bl	8006330 <console_printf>
 8005386:	f001 f819 	bl	80063bc <console_flush>
 800538a:	2300      	movs	r3, #0
 800538c:	461a      	mov	r2, r3
 800538e:	4619      	mov	r1, r3
 8005390:	4618      	mov	r0, r3
 8005392:	f7fc fa31 	bl	80017f8 <__assert_func>
        int setupAw = getRegister(_NRF24L01P_REG_SETUP_AW) & ~_NRF24L01P_SETUP_AW_AW_MASK;
 8005396:	2103      	movs	r1, #3
 8005398:	f7ff fe01 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
 800539c:	f020 0203 	bic.w	r2, r0, #3
        switch ( width ) {
 80053a0:	2d04      	cmp	r5, #4
 80053a2:	d00a      	beq.n	80053ba <_ZN9nRF24L01P12setRxAddressEyii+0x92>
 80053a4:	2d05      	cmp	r5, #5
 80053a6:	d00b      	beq.n	80053c0 <_ZN9nRF24L01P12setRxAddressEyii+0x98>
 80053a8:	2d03      	cmp	r5, #3
 80053aa:	d10c      	bne.n	80053c6 <_ZN9nRF24L01P12setRxAddressEyii+0x9e>
                setupAw |= _NRF24L01P_SETUP_AW_AW_3BYTE;
 80053ac:	f042 0201 	orr.w	r2, r2, #1
        setRegister(_NRF24L01P_REG_SETUP_AW, setupAw);
 80053b0:	2103      	movs	r1, #3
 80053b2:	4640      	mov	r0, r8
 80053b4:	f7ff fd61 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
 80053b8:	e7c5      	b.n	8005346 <_ZN9nRF24L01P12setRxAddressEyii+0x1e>
                setupAw |= _NRF24L01P_SETUP_AW_AW_4BYTE;
 80053ba:	f042 0202 	orr.w	r2, r2, #2
                break;
 80053be:	e7f7      	b.n	80053b0 <_ZN9nRF24L01P12setRxAddressEyii+0x88>
                setupAw |= _NRF24L01P_SETUP_AW_AW_5BYTE;
 80053c0:	f042 0203 	orr.w	r2, r2, #3
                break;
 80053c4:	e7f4      	b.n	80053b0 <_ZN9nRF24L01P12setRxAddressEyii+0x88>
                error( "%sbad rx pipe %d\r\n", _nrf, width );
 80053c6:	462a      	mov	r2, r5
 80053c8:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <_ZN9nRF24L01P12setRxAddressEyii+0xdc>)
 80053ca:	6819      	ldr	r1, [r3, #0]
 80053cc:	480e      	ldr	r0, [pc, #56]	; (8005408 <_ZN9nRF24L01P12setRxAddressEyii+0xe0>)
 80053ce:	f000 ffaf 	bl	8006330 <console_printf>
 80053d2:	f000 fff3 	bl	80063bc <console_flush>
 80053d6:	2300      	movs	r3, #0
 80053d8:	461a      	mov	r2, r3
 80053da:	4619      	mov	r1, r3
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fc fa0b 	bl	80017f8 <__assert_func>
    deselect();  //  Set CS Pin to high.
 80053e2:	4640      	mov	r0, r8
 80053e4:	f7ff fd33 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
    int enRxAddr = getRegister(_NRF24L01P_REG_EN_RXADDR);
 80053e8:	2102      	movs	r1, #2
 80053ea:	4640      	mov	r0, r8
 80053ec:	f7ff fdd7 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
    enRxAddr |= (1 << ( pipe - NRF24L01P_PIPE_P0 ) );
 80053f0:	2201      	movs	r2, #1
 80053f2:	fa02 f209 	lsl.w	r2, r2, r9
    setRegister(_NRF24L01P_REG_EN_RXADDR, enRxAddr);
 80053f6:	4302      	orrs	r2, r0
 80053f8:	2102      	movs	r1, #2
 80053fa:	4640      	mov	r0, r8
 80053fc:	f7ff fd3d 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
}
 8005400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005404:	200001b4 	.word	0x200001b4
 8005408:	0800d698 	.word	0x0800d698

0800540c <_ZN9nRF24L01P12setTxAddressEyi>:
void nRF24L01P::setTxAddress(unsigned long long address, int width) {
 800540c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005410:	4680      	mov	r8, r0
 8005412:	4614      	mov	r4, r2
 8005414:	461e      	mov	r6, r3
 8005416:	9d06      	ldr	r5, [sp, #24]
    console_printf("%sset tx addr\n", _nrf); ////
 8005418:	4b21      	ldr	r3, [pc, #132]	; (80054a0 <_ZN9nRF24L01P12setTxAddressEyi+0x94>)
 800541a:	6819      	ldr	r1, [r3, #0]
 800541c:	4821      	ldr	r0, [pc, #132]	; (80054a4 <_ZN9nRF24L01P12setTxAddressEyi+0x98>)
 800541e:	f000 ff87 	bl	8006330 <console_printf>
    int setupAw = getRegister(_NRF24L01P_REG_SETUP_AW) & ~_NRF24L01P_SETUP_AW_AW_MASK;
 8005422:	2103      	movs	r1, #3
 8005424:	4640      	mov	r0, r8
 8005426:	f7ff fdba 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
 800542a:	f020 0203 	bic.w	r2, r0, #3
    switch ( width ) {
 800542e:	2d04      	cmp	r5, #4
 8005430:	d01d      	beq.n	800546e <_ZN9nRF24L01P12setTxAddressEyi+0x62>
 8005432:	2d05      	cmp	r5, #5
 8005434:	d01e      	beq.n	8005474 <_ZN9nRF24L01P12setTxAddressEyi+0x68>
 8005436:	2d03      	cmp	r5, #3
 8005438:	d11f      	bne.n	800547a <_ZN9nRF24L01P12setTxAddressEyi+0x6e>
            setupAw |= _NRF24L01P_SETUP_AW_AW_3BYTE;
 800543a:	f042 0201 	orr.w	r2, r2, #1
    setRegister(_NRF24L01P_REG_SETUP_AW, setupAw);
 800543e:	2103      	movs	r1, #3
 8005440:	4640      	mov	r0, r8
 8005442:	f7ff fd1a 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
    select();  //  Set CS Pin to low.
 8005446:	4640      	mov	r0, r8
 8005448:	f7ff fcfb 	bl	8004e42 <_ZN9nRF24L01P6selectEv>
    spiWrite(cn);
 800544c:	2130      	movs	r1, #48	; 0x30
 800544e:	4640      	mov	r0, r8
 8005450:	f7ff fd03 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
    while ( width-- > 0 ) {
 8005454:	1e6f      	subs	r7, r5, #1
 8005456:	2d00      	cmp	r5, #0
 8005458:	dd1d      	ble.n	8005496 <_ZN9nRF24L01P12setTxAddressEyi+0x8a>
        spiWrite((int) (address & 0xFF));
 800545a:	b2e1      	uxtb	r1, r4
 800545c:	4640      	mov	r0, r8
 800545e:	f7ff fcfc 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
        address >>= 8;
 8005462:	0a24      	lsrs	r4, r4, #8
 8005464:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
 8005468:	0a36      	lsrs	r6, r6, #8
    while ( width-- > 0 ) {
 800546a:	463d      	mov	r5, r7
 800546c:	e7f2      	b.n	8005454 <_ZN9nRF24L01P12setTxAddressEyi+0x48>
            setupAw |= _NRF24L01P_SETUP_AW_AW_4BYTE;
 800546e:	f042 0202 	orr.w	r2, r2, #2
            break;
 8005472:	e7e4      	b.n	800543e <_ZN9nRF24L01P12setTxAddressEyi+0x32>
            setupAw |= _NRF24L01P_SETUP_AW_AW_5BYTE;
 8005474:	f042 0203 	orr.w	r2, r2, #3
            break;
 8005478:	e7e1      	b.n	800543e <_ZN9nRF24L01P12setTxAddressEyi+0x32>
            error( "%sbad tx addr width %d\r\n", _nrf, width );
 800547a:	462a      	mov	r2, r5
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <_ZN9nRF24L01P12setTxAddressEyi+0x94>)
 800547e:	6819      	ldr	r1, [r3, #0]
 8005480:	4809      	ldr	r0, [pc, #36]	; (80054a8 <_ZN9nRF24L01P12setTxAddressEyi+0x9c>)
 8005482:	f000 ff55 	bl	8006330 <console_printf>
 8005486:	f000 ff99 	bl	80063bc <console_flush>
 800548a:	2300      	movs	r3, #0
 800548c:	461a      	mov	r2, r3
 800548e:	4619      	mov	r1, r3
 8005490:	4618      	mov	r0, r3
 8005492:	f7fc f9b1 	bl	80017f8 <__assert_func>
    deselect();  //  Set CS Pin to high.
 8005496:	4640      	mov	r0, r8
 8005498:	f7ff fcd9 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
}
 800549c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054a0:	200001b4 	.word	0x200001b4
 80054a4:	0800d6ac 	.word	0x0800d6ac
 80054a8:	0800d6bc 	.word	0x0800d6bc

080054ac <_ZN9nRF24L01P12getRxAddressEi>:
unsigned long long nRF24L01P::getRxAddress(int pipe) {
 80054ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b0:	b083      	sub	sp, #12
 80054b2:	468b      	mov	fp, r1
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 80054b4:	2905      	cmp	r1, #5
 80054b6:	d833      	bhi.n	8005520 <_ZN9nRF24L01P12getRxAddressEi+0x74>
 80054b8:	4607      	mov	r7, r0
    if ( ( pipe == NRF24L01P_PIPE_P0 ) || ( pipe == NRF24L01P_PIPE_P1 ) ) {
 80054ba:	2901      	cmp	r1, #1
 80054bc:	d93e      	bls.n	800553c <_ZN9nRF24L01P12getRxAddressEi+0x90>
        width = 1;
 80054be:	f04f 0a01 	mov.w	sl, #1
    int rxAddrPxRegister = _NRF24L01P_REG_RX_ADDR_P0 + ( pipe - NRF24L01P_PIPE_P0 );
 80054c2:	f10b 060a 	add.w	r6, fp, #10
    int cn = (_NRF24L01P_SPI_CMD_RD_REG | (rxAddrPxRegister & _NRF24L01P_REG_ADDRESS_MASK));
 80054c6:	f006 061f 	and.w	r6, r6, #31
    select();  //  Set CS Pin to low.
 80054ca:	4638      	mov	r0, r7
 80054cc:	f7ff fcb9 	bl	8004e42 <_ZN9nRF24L01P6selectEv>
    spiWrite(cn);
 80054d0:	4631      	mov	r1, r6
 80054d2:	4638      	mov	r0, r7
 80054d4:	f7ff fcc1 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
    for ( int i=0; i<width; i++ ) {
 80054d8:	2600      	movs	r6, #0
    unsigned long long address = 0;
 80054da:	f04f 0800 	mov.w	r8, #0
 80054de:	f04f 0900 	mov.w	r9, #0
    for ( int i=0; i<width; i++ ) {
 80054e2:	45b2      	cmp	sl, r6
 80054e4:	dd4c      	ble.n	8005580 <_ZN9nRF24L01P12getRxAddressEi+0xd4>
        address |= ( ( (unsigned long long)( spiWrite(_NRF24L01P_SPI_CMD_NOP) & 0xFF ) ) << (i*8) );
 80054e6:	21ff      	movs	r1, #255	; 0xff
 80054e8:	4638      	mov	r0, r7
 80054ea:	f7ff fcb6 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
 80054ee:	b2c2      	uxtb	r2, r0
 80054f0:	2300      	movs	r3, #0
 80054f2:	e9cd 2300 	strd	r2, r3, [sp]
 80054f6:	00f3      	lsls	r3, r6, #3
 80054f8:	f1a3 0120 	sub.w	r1, r3, #32
 80054fc:	f1c3 0220 	rsb	r2, r3, #32
 8005500:	2500      	movs	r5, #0
 8005502:	9800      	ldr	r0, [sp, #0]
 8005504:	fa00 f101 	lsl.w	r1, r0, r1
 8005508:	430d      	orrs	r5, r1
 800550a:	fa20 f202 	lsr.w	r2, r0, r2
 800550e:	4315      	orrs	r5, r2
 8005510:	4602      	mov	r2, r0
 8005512:	409a      	lsls	r2, r3
 8005514:	ea48 0802 	orr.w	r8, r8, r2
 8005518:	ea49 0905 	orr.w	r9, r9, r5
    for ( int i=0; i<width; i++ ) {
 800551c:	3601      	adds	r6, #1
 800551e:	e7e0      	b.n	80054e2 <_ZN9nRF24L01P12getRxAddressEi+0x36>
        error( "%sbad rx pipe %d\r\n", _nrf, pipe );
 8005520:	460a      	mov	r2, r1
 8005522:	4b22      	ldr	r3, [pc, #136]	; (80055ac <_ZN9nRF24L01P12getRxAddressEi+0x100>)
 8005524:	6819      	ldr	r1, [r3, #0]
 8005526:	4822      	ldr	r0, [pc, #136]	; (80055b0 <_ZN9nRF24L01P12getRxAddressEi+0x104>)
 8005528:	f000 ff02 	bl	8006330 <console_printf>
 800552c:	f000 ff46 	bl	80063bc <console_flush>
 8005530:	2300      	movs	r3, #0
 8005532:	461a      	mov	r2, r3
 8005534:	4619      	mov	r1, r3
 8005536:	4618      	mov	r0, r3
 8005538:	f7fc f95e 	bl	80017f8 <__assert_func>
        int setupAw = getRegister(_NRF24L01P_REG_SETUP_AW) & _NRF24L01P_SETUP_AW_AW_MASK;
 800553c:	2103      	movs	r1, #3
 800553e:	f7ff fd2e 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
 8005542:	f000 0003 	and.w	r0, r0, #3
        switch ( setupAw ) {
 8005546:	2802      	cmp	r0, #2
 8005548:	d017      	beq.n	800557a <_ZN9nRF24L01P12getRxAddressEi+0xce>
 800554a:	2803      	cmp	r0, #3
 800554c:	d004      	beq.n	8005558 <_ZN9nRF24L01P12getRxAddressEi+0xac>
 800554e:	2801      	cmp	r0, #1
 8005550:	d105      	bne.n	800555e <_ZN9nRF24L01P12getRxAddressEi+0xb2>
                width = 3;
 8005552:	f04f 0a03 	mov.w	sl, #3
 8005556:	e7b4      	b.n	80054c2 <_ZN9nRF24L01P12getRxAddressEi+0x16>
                width = 5;
 8005558:	f04f 0a05 	mov.w	sl, #5
                break;
 800555c:	e7b1      	b.n	80054c2 <_ZN9nRF24L01P12getRxAddressEi+0x16>
                error( "%sbad rx addr width %d\r\n", _nrf, setupAw );
 800555e:	4602      	mov	r2, r0
 8005560:	4b12      	ldr	r3, [pc, #72]	; (80055ac <_ZN9nRF24L01P12getRxAddressEi+0x100>)
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	4813      	ldr	r0, [pc, #76]	; (80055b4 <_ZN9nRF24L01P12getRxAddressEi+0x108>)
 8005566:	f000 fee3 	bl	8006330 <console_printf>
 800556a:	f000 ff27 	bl	80063bc <console_flush>
 800556e:	2300      	movs	r3, #0
 8005570:	461a      	mov	r2, r3
 8005572:	4619      	mov	r1, r3
 8005574:	4618      	mov	r0, r3
 8005576:	f7fc f93f 	bl	80017f8 <__assert_func>
                width = 4;
 800557a:	f04f 0a04 	mov.w	sl, #4
 800557e:	e7a0      	b.n	80054c2 <_ZN9nRF24L01P12getRxAddressEi+0x16>
    deselect();  //  Set CS Pin to high.
 8005580:	4638      	mov	r0, r7
 8005582:	f7ff fc64 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
    if ( !( ( pipe == NRF24L01P_PIPE_P0 ) || ( pipe == NRF24L01P_PIPE_P1 ) ) ) {
 8005586:	f1bb 0f01 	cmp.w	fp, #1
 800558a:	d804      	bhi.n	8005596 <_ZN9nRF24L01P12getRxAddressEi+0xea>
}
 800558c:	4640      	mov	r0, r8
 800558e:	4649      	mov	r1, r9
 8005590:	b003      	add	sp, #12
 8005592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        address |= ( getRxAddress(NRF24L01P_PIPE_P1) & ~((unsigned long long) 0xFF) );
 8005596:	2101      	movs	r1, #1
 8005598:	4638      	mov	r0, r7
 800559a:	f7ff ff87 	bl	80054ac <_ZN9nRF24L01P12getRxAddressEi>
 800559e:	f020 03ff 	bic.w	r3, r0, #255	; 0xff
 80055a2:	ea48 0803 	orr.w	r8, r8, r3
 80055a6:	ea49 0901 	orr.w	r9, r9, r1
 80055aa:	e7ef      	b.n	800558c <_ZN9nRF24L01P12getRxAddressEi+0xe0>
 80055ac:	200001b4 	.word	0x200001b4
 80055b0:	0800d698 	.word	0x0800d698
 80055b4:	0800d67c 	.word	0x0800d67c

080055b8 <_ZN9nRF24L01P12getTxAddressEv>:
unsigned long long nRF24L01P::getTxAddress(void) {
 80055b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	4607      	mov	r7, r0
    int setupAw = getRegister(_NRF24L01P_REG_SETUP_AW) & _NRF24L01P_SETUP_AW_AW_MASK;
 80055be:	2103      	movs	r1, #3
 80055c0:	f7ff fced 	bl	8004f9e <_ZN9nRF24L01P11getRegisterEi>
 80055c4:	f000 0003 	and.w	r0, r0, #3
    switch ( setupAw ) {
 80055c8:	2802      	cmp	r0, #2
 80055ca:	d03e      	beq.n	800564a <_ZN9nRF24L01P12getTxAddressEv+0x92>
 80055cc:	2803      	cmp	r0, #3
 80055ce:	d004      	beq.n	80055da <_ZN9nRF24L01P12getTxAddressEv+0x22>
 80055d0:	2801      	cmp	r0, #1
 80055d2:	d12c      	bne.n	800562e <_ZN9nRF24L01P12getTxAddressEv+0x76>
            width = 3;
 80055d4:	f04f 0a03 	mov.w	sl, #3
 80055d8:	e001      	b.n	80055de <_ZN9nRF24L01P12getTxAddressEv+0x26>
            width = 5;
 80055da:	f04f 0a05 	mov.w	sl, #5
    select();  //  Set CS Pin to low.
 80055de:	4638      	mov	r0, r7
 80055e0:	f7ff fc2f 	bl	8004e42 <_ZN9nRF24L01P6selectEv>
    spiWrite(cn);
 80055e4:	2110      	movs	r1, #16
 80055e6:	4638      	mov	r0, r7
 80055e8:	f7ff fc37 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
    for ( int i=0; i<width; i++ ) {
 80055ec:	2600      	movs	r6, #0
    unsigned long long address = 0;
 80055ee:	f04f 0800 	mov.w	r8, #0
 80055f2:	f04f 0900 	mov.w	r9, #0
    for ( int i=0; i<width; i++ ) {
 80055f6:	45b2      	cmp	sl, r6
 80055f8:	dd2a      	ble.n	8005650 <_ZN9nRF24L01P12getTxAddressEv+0x98>
        address |= ( ( (unsigned long long)( spiWrite(_NRF24L01P_SPI_CMD_NOP) & 0xFF ) ) << (i*8) );
 80055fa:	21ff      	movs	r1, #255	; 0xff
 80055fc:	4638      	mov	r0, r7
 80055fe:	f7ff fc2c 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
 8005602:	fa5f fb80 	uxtb.w	fp, r0
 8005606:	00f3      	lsls	r3, r6, #3
 8005608:	f1a3 0120 	sub.w	r1, r3, #32
 800560c:	f1c3 0220 	rsb	r2, r3, #32
 8005610:	2500      	movs	r5, #0
 8005612:	fa0b f101 	lsl.w	r1, fp, r1
 8005616:	430d      	orrs	r5, r1
 8005618:	fa2b f202 	lsr.w	r2, fp, r2
 800561c:	4315      	orrs	r5, r2
 800561e:	fa0b f403 	lsl.w	r4, fp, r3
 8005622:	ea48 0804 	orr.w	r8, r8, r4
 8005626:	ea49 0905 	orr.w	r9, r9, r5
    for ( int i=0; i<width; i++ ) {
 800562a:	3601      	adds	r6, #1
 800562c:	e7e3      	b.n	80055f6 <_ZN9nRF24L01P12getTxAddressEv+0x3e>
            error( "%sbad tx addr width %d\r\n", _nrf, setupAw );
 800562e:	4602      	mov	r2, r0
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <_ZN9nRF24L01P12getTxAddressEv+0xa8>)
 8005632:	6819      	ldr	r1, [r3, #0]
 8005634:	480b      	ldr	r0, [pc, #44]	; (8005664 <_ZN9nRF24L01P12getTxAddressEv+0xac>)
 8005636:	f000 fe7b 	bl	8006330 <console_printf>
 800563a:	f000 febf 	bl	80063bc <console_flush>
 800563e:	2300      	movs	r3, #0
 8005640:	461a      	mov	r2, r3
 8005642:	4619      	mov	r1, r3
 8005644:	4618      	mov	r0, r3
 8005646:	f7fc f8d7 	bl	80017f8 <__assert_func>
            width = 4;
 800564a:	f04f 0a04 	mov.w	sl, #4
 800564e:	e7c6      	b.n	80055de <_ZN9nRF24L01P12getTxAddressEv+0x26>
    deselect();  //  Set CS Pin to high.
 8005650:	4638      	mov	r0, r7
 8005652:	f7ff fbfc 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
}
 8005656:	4640      	mov	r0, r8
 8005658:	4649      	mov	r1, r9
 800565a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565e:	bf00      	nop
 8005660:	200001b4 	.word	0x200001b4
 8005664:	0800d6bc 	.word	0x0800d6bc

08005668 <_ZN9nRF24L01P17getStatusRegisterEv>:
int nRF24L01P::getStatusRegister(void) {
 8005668:	b538      	push	{r3, r4, r5, lr}
 800566a:	4604      	mov	r4, r0
    select();  //  Set CS Pin to low.
 800566c:	f7ff fbe9 	bl	8004e42 <_ZN9nRF24L01P6selectEv>
    int status = spiWrite(_NRF24L01P_SPI_CMD_NOP);
 8005670:	21ff      	movs	r1, #255	; 0xff
 8005672:	4620      	mov	r0, r4
 8005674:	f7ff fbf1 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
 8005678:	4605      	mov	r5, r0
    deselect();  //  Set CS Pin to high.
 800567a:	4620      	mov	r0, r4
 800567c:	f7ff fbe7 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
}
 8005680:	4628      	mov	r0, r5
 8005682:	bd38      	pop	{r3, r4, r5, pc}

08005684 <_ZN9nRF24L01P8readableEi>:
bool nRF24L01P::readable(int pipe) {
 8005684:	b510      	push	{r4, lr}
 8005686:	460c      	mov	r4, r1
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 8005688:	2905      	cmp	r1, #5
 800568a:	d80b      	bhi.n	80056a4 <_ZN9nRF24L01P8readableEi+0x20>
    int status = getStatusRegister();
 800568c:	f7ff ffec 	bl	8005668 <_ZN9nRF24L01P17getStatusRegisterEv>
    return ( ( status & _NRF24L01P_STATUS_RX_DR ) && ( ( ( status & _NRF24L01P_STATUS_RX_P_NO ) >> 1 ) == ( pipe & 0x7 ) ) );
 8005690:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005694:	d014      	beq.n	80056c0 <_ZN9nRF24L01P8readableEi+0x3c>
 8005696:	ea84 0460 	eor.w	r4, r4, r0, asr #1
 800569a:	f014 0f07 	tst.w	r4, #7
 800569e:	d011      	beq.n	80056c4 <_ZN9nRF24L01P8readableEi+0x40>
 80056a0:	2000      	movs	r0, #0
 80056a2:	e00e      	b.n	80056c2 <_ZN9nRF24L01P8readableEi+0x3e>
        error( "%sbad readable pipe %d\r\n", _nrf, pipe );
 80056a4:	460a      	mov	r2, r1
 80056a6:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <_ZN9nRF24L01P8readableEi+0x44>)
 80056a8:	6819      	ldr	r1, [r3, #0]
 80056aa:	4808      	ldr	r0, [pc, #32]	; (80056cc <_ZN9nRF24L01P8readableEi+0x48>)
 80056ac:	f000 fe40 	bl	8006330 <console_printf>
 80056b0:	f000 fe84 	bl	80063bc <console_flush>
 80056b4:	2300      	movs	r3, #0
 80056b6:	461a      	mov	r2, r3
 80056b8:	4619      	mov	r1, r3
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fc f89c 	bl	80017f8 <__assert_func>
    return ( ( status & _NRF24L01P_STATUS_RX_DR ) && ( ( ( status & _NRF24L01P_STATUS_RX_P_NO ) >> 1 ) == ( pipe & 0x7 ) ) );
 80056c0:	2000      	movs	r0, #0
}
 80056c2:	bd10      	pop	{r4, pc}
    return ( ( status & _NRF24L01P_STATUS_RX_DR ) && ( ( ( status & _NRF24L01P_STATUS_RX_P_NO ) >> 1 ) == ( pipe & 0x7 ) ) );
 80056c4:	2001      	movs	r0, #1
 80056c6:	e7fc      	b.n	80056c2 <_ZN9nRF24L01P8readableEi+0x3e>
 80056c8:	200001b4 	.word	0x200001b4
 80056cc:	0800d7a0 	.word	0x0800d7a0

080056d0 <_ZN9nRF24L01P12readablePipeEv>:
int nRF24L01P::readablePipe(void) {
 80056d0:	b508      	push	{r3, lr}
    int status = getStatusRegister();
 80056d2:	f7ff ffc9 	bl	8005668 <_ZN9nRF24L01P17getStatusRegisterEv>
    if (! (status & _NRF24L01P_STATUS_RX_DR) ) { return -1; }  //  Nothing to read now.
 80056d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056da:	d002      	beq.n	80056e2 <_ZN9nRF24L01P12readablePipeEv+0x12>
    return ( status & _NRF24L01P_STATUS_RX_P_NO ) >> 1;  //  Return the pipe number.
 80056dc:	f3c0 0042 	ubfx	r0, r0, #1, #3
}
 80056e0:	bd08      	pop	{r3, pc}
    if (! (status & _NRF24L01P_STATUS_RX_DR) ) { return -1; }  //  Nothing to read now.
 80056e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056e6:	e7fb      	b.n	80056e0 <_ZN9nRF24L01P12readablePipeEv+0x10>

080056e8 <_ZN9nRF24L01P4readEiPci>:
int nRF24L01P::read(int pipe, char *data, int count) {
 80056e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if ( ( pipe < NRF24L01P_PIPE_P0 ) || ( pipe > NRF24L01P_PIPE_P5 ) ) {
 80056ec:	2905      	cmp	r1, #5
 80056ee:	d80f      	bhi.n	8005710 <_ZN9nRF24L01P4readEiPci+0x28>
 80056f0:	4605      	mov	r5, r0
 80056f2:	4614      	mov	r4, r2
 80056f4:	461e      	mov	r6, r3
    if ( count <= 0 ) return 0;
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	dd5c      	ble.n	80057b4 <_ZN9nRF24L01P4readEiPci+0xcc>
    if ( count > _NRF24L01P_RX_FIFO_SIZE ) count = _NRF24L01P_RX_FIFO_SIZE;
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	dd00      	ble.n	8005700 <_ZN9nRF24L01P4readEiPci+0x18>
 80056fe:	2620      	movs	r6, #32
    if ( readable(pipe) ) {
 8005700:	4628      	mov	r0, r5
 8005702:	f7ff ffbf 	bl	8005684 <_ZN9nRF24L01P8readableEi>
 8005706:	b988      	cbnz	r0, 800572c <_ZN9nRF24L01P4readEiPci+0x44>
        return 0;
 8005708:	2700      	movs	r7, #0
}
 800570a:	4638      	mov	r0, r7
 800570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        error( "%sbad rx pipe %d\r\n", _nrf, pipe );
 8005710:	460a      	mov	r2, r1
 8005712:	4b29      	ldr	r3, [pc, #164]	; (80057b8 <_ZN9nRF24L01P4readEiPci+0xd0>)
 8005714:	6819      	ldr	r1, [r3, #0]
 8005716:	4829      	ldr	r0, [pc, #164]	; (80057bc <_ZN9nRF24L01P4readEiPci+0xd4>)
 8005718:	f000 fe0a 	bl	8006330 <console_printf>
 800571c:	f000 fe4e 	bl	80063bc <console_flush>
 8005720:	2300      	movs	r3, #0
 8005722:	461a      	mov	r2, r3
 8005724:	4619      	mov	r1, r3
 8005726:	4618      	mov	r0, r3
 8005728:	f7fc f866 	bl	80017f8 <__assert_func>
        select();  //  Set CS Pin to low.
 800572c:	4628      	mov	r0, r5
 800572e:	f7ff fb88 	bl	8004e42 <_ZN9nRF24L01P6selectEv>
        spiWrite(_NRF24L01P_SPI_CMD_R_RX_PL_WID);
 8005732:	2160      	movs	r1, #96	; 0x60
 8005734:	4628      	mov	r0, r5
 8005736:	f7ff fb90 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
        int rxPayloadWidth = spiWrite(_NRF24L01P_SPI_CMD_NOP);
 800573a:	21ff      	movs	r1, #255	; 0xff
 800573c:	4628      	mov	r0, r5
 800573e:	f7ff fb8c 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
 8005742:	4680      	mov	r8, r0
 8005744:	4607      	mov	r7, r0
        deselect();  //  Set CS Pin to high.
 8005746:	4628      	mov	r0, r5
 8005748:	f7ff fb81 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
        if ( ( rxPayloadWidth < 0 ) || ( rxPayloadWidth > _NRF24L01P_RX_FIFO_SIZE ) ) {
 800574c:	f1b8 0f20 	cmp.w	r8, #32
 8005750:	d816      	bhi.n	8005780 <_ZN9nRF24L01P4readEiPci+0x98>
            if ( rxPayloadWidth < count ) count = rxPayloadWidth;
 8005752:	4546      	cmp	r6, r8
 8005754:	dc00      	bgt.n	8005758 <_ZN9nRF24L01P4readEiPci+0x70>
 8005756:	4637      	mov	r7, r6
            select();  //  Set CS Pin to low.
 8005758:	4628      	mov	r0, r5
 800575a:	f7ff fb72 	bl	8004e42 <_ZN9nRF24L01P6selectEv>
            spiWrite(_NRF24L01P_SPI_CMD_RD_RX_PAYLOAD);
 800575e:	2161      	movs	r1, #97	; 0x61
 8005760:	4628      	mov	r0, r5
 8005762:	f7ff fb7a 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
            for ( int i = 0; i < count; i++ ) {
 8005766:	2600      	movs	r6, #0
 8005768:	42b7      	cmp	r7, r6
 800576a:	dd1a      	ble.n	80057a2 <_ZN9nRF24L01P4readEiPci+0xba>
                *data++ = spiWrite(_NRF24L01P_SPI_CMD_NOP);
 800576c:	f104 0801 	add.w	r8, r4, #1
 8005770:	21ff      	movs	r1, #255	; 0xff
 8005772:	4628      	mov	r0, r5
 8005774:	f7ff fb71 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
 8005778:	7020      	strb	r0, [r4, #0]
            for ( int i = 0; i < count; i++ ) {
 800577a:	3601      	adds	r6, #1
                *data++ = spiWrite(_NRF24L01P_SPI_CMD_NOP);
 800577c:	4644      	mov	r4, r8
            for ( int i = 0; i < count; i++ ) {
 800577e:	e7f3      	b.n	8005768 <_ZN9nRF24L01P4readEiPci+0x80>
            select();  //  Set CS Pin to low.
 8005780:	4628      	mov	r0, r5
 8005782:	f7ff fb5e 	bl	8004e42 <_ZN9nRF24L01P6selectEv>
            spiWrite(_NRF24L01P_SPI_CMD_FLUSH_RX);
 8005786:	21e2      	movs	r1, #226	; 0xe2
 8005788:	4628      	mov	r0, r5
 800578a:	f7ff fb66 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
            spiWrite(_NRF24L01P_SPI_CMD_NOP);
 800578e:	21ff      	movs	r1, #255	; 0xff
 8005790:	4628      	mov	r0, r5
 8005792:	f7ff fb62 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
            deselect();  //  Set CS Pin to high.
 8005796:	4628      	mov	r0, r5
 8005798:	f7ff fb59 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
    return -1;
 800579c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80057a0:	e7b3      	b.n	800570a <_ZN9nRF24L01P4readEiPci+0x22>
            deselect();  //  Set CS Pin to high.
 80057a2:	4628      	mov	r0, r5
 80057a4:	f7ff fb53 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
            setRegister(_NRF24L01P_REG_STATUS, _NRF24L01P_STATUS_RX_DR);
 80057a8:	2240      	movs	r2, #64	; 0x40
 80057aa:	2107      	movs	r1, #7
 80057ac:	4628      	mov	r0, r5
 80057ae:	f7ff fb64 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
            return count;
 80057b2:	e7aa      	b.n	800570a <_ZN9nRF24L01P4readEiPci+0x22>
    if ( count <= 0 ) return 0;
 80057b4:	2700      	movs	r7, #0
 80057b6:	e7a8      	b.n	800570a <_ZN9nRF24L01P4readEiPci+0x22>
 80057b8:	200001b4 	.word	0x200001b4
 80057bc:	0800d698 	.word	0x0800d698

080057c0 <_ZN9nRF24L01P5writeEiPci>:
int nRF24L01P::write(int pipe, char *data, int count) {
 80057c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c4:	4604      	mov	r4, r0
 80057c6:	4616      	mov	r6, r2
 80057c8:	461f      	mov	r7, r3
    int originalCe = ce_value;
 80057ca:	f8d0 9010 	ldr.w	r9, [r0, #16]
    disable();  //  Set CE Pin to low.
 80057ce:	f7ff fb31 	bl	8004e34 <_ZN9nRF24L01P7disableEv>
    if ( count <= 0 ) return 0;
 80057d2:	2f00      	cmp	r7, #0
 80057d4:	dd4b      	ble.n	800586e <_ZN9nRF24L01P5writeEiPci+0xae>
    if ( count > _NRF24L01P_TX_FIFO_SIZE ) count = _NRF24L01P_TX_FIFO_SIZE;
 80057d6:	2f20      	cmp	r7, #32
 80057d8:	dd00      	ble.n	80057dc <_ZN9nRF24L01P5writeEiPci+0x1c>
 80057da:	2720      	movs	r7, #32
    setRegister(_NRF24L01P_REG_STATUS, _NRF24L01P_STATUS_TX_DS);
 80057dc:	2220      	movs	r2, #32
 80057de:	2107      	movs	r1, #7
 80057e0:	4620      	mov	r0, r4
 80057e2:	f7ff fb4a 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
    select();  //  Set CS Pin to low.
 80057e6:	4620      	mov	r0, r4
 80057e8:	f7ff fb2b 	bl	8004e42 <_ZN9nRF24L01P6selectEv>
    spiWrite(_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
 80057ec:	21a0      	movs	r1, #160	; 0xa0
 80057ee:	4620      	mov	r0, r4
 80057f0:	f7ff fb33 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
    for ( int i = 0; i < count; i++ ) {
 80057f4:	2500      	movs	r5, #0
 80057f6:	42af      	cmp	r7, r5
 80057f8:	dd08      	ble.n	800580c <_ZN9nRF24L01P5writeEiPci+0x4c>
        spiWrite(*data++);
 80057fa:	f106 0801 	add.w	r8, r6, #1
 80057fe:	7831      	ldrb	r1, [r6, #0]
 8005800:	4620      	mov	r0, r4
 8005802:	f7ff fb2a 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
    for ( int i = 0; i < count; i++ ) {
 8005806:	3501      	adds	r5, #1
        spiWrite(*data++);
 8005808:	4646      	mov	r6, r8
    for ( int i = 0; i < count; i++ ) {
 800580a:	e7f4      	b.n	80057f6 <_ZN9nRF24L01P5writeEiPci+0x36>
    deselect();  //  Set CS Pin to high.
 800580c:	4620      	mov	r0, r4
 800580e:	f7ff fb1e 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
    int originalMode = mode;
 8005812:	6965      	ldr	r5, [r4, #20]
    setTransmitMode();
 8005814:	4620      	mov	r0, r4
 8005816:	f7ff fc13 	bl	8005040 <_ZN9nRF24L01P15setTransmitModeEv>
    enable();  //  Set CE Pin to high.
 800581a:	4620      	mov	r0, r4
 800581c:	f7ff fb00 	bl	8004e20 <_ZN9nRF24L01P6enableEv>
    wait_us(_NRF24L01P_TIMING_Thce_us);
 8005820:	200a      	movs	r0, #10
 8005822:	f7ff faf4 	bl	8004e0e <_ZL7wait_usm>
    disable();  //  Set CE Pin to low.
 8005826:	4620      	mov	r0, r4
 8005828:	f7ff fb04 	bl	8004e34 <_ZN9nRF24L01P7disableEv>
    while ( !( getStatusRegister() & _NRF24L01P_STATUS_TX_DS ) ) {
 800582c:	4620      	mov	r0, r4
 800582e:	f7ff ff1b 	bl	8005668 <_ZN9nRF24L01P17getStatusRegisterEv>
 8005832:	f010 0f20 	tst.w	r0, #32
 8005836:	d0f9      	beq.n	800582c <_ZN9nRF24L01P5writeEiPci+0x6c>
    setRegister(_NRF24L01P_REG_STATUS, _NRF24L01P_STATUS_TX_DS);
 8005838:	2220      	movs	r2, #32
 800583a:	2107      	movs	r1, #7
 800583c:	4620      	mov	r0, r4
 800583e:	f7ff fb1c 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
    if ( originalMode == _NRF24L01P_MODE_RX ) {
 8005842:	2d03      	cmp	r5, #3
 8005844:	d00b      	beq.n	800585e <_ZN9nRF24L01P5writeEiPci+0x9e>
    if (originalCe) { enable(); }   //  Set CE Pin to high.
 8005846:	f1b9 0f00 	cmp.w	r9, #0
 800584a:	d00c      	beq.n	8005866 <_ZN9nRF24L01P5writeEiPci+0xa6>
 800584c:	4620      	mov	r0, r4
 800584e:	f7ff fae7 	bl	8004e20 <_ZN9nRF24L01P6enableEv>
    wait_us( _NRF24L01P_TIMING_Tpece2csn_us );
 8005852:	2004      	movs	r0, #4
 8005854:	f7ff fadb 	bl	8004e0e <_ZL7wait_usm>
}
 8005858:	4638      	mov	r0, r7
 800585a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        setReceiveMode();
 800585e:	4620      	mov	r0, r4
 8005860:	f7ff fbce 	bl	8005000 <_ZN9nRF24L01P14setReceiveModeEv>
 8005864:	e7ef      	b.n	8005846 <_ZN9nRF24L01P5writeEiPci+0x86>
    else { disable(); }             //  Set CE Pin to low.
 8005866:	4620      	mov	r0, r4
 8005868:	f7ff fae4 	bl	8004e34 <_ZN9nRF24L01P7disableEv>
 800586c:	e7f1      	b.n	8005852 <_ZN9nRF24L01P5writeEiPci+0x92>
    if ( count <= 0 ) return 0;
 800586e:	2700      	movs	r7, #0
 8005870:	e7f2      	b.n	8005858 <_ZN9nRF24L01P5writeEiPci+0x98>

08005872 <_ZN9nRF24L01P7flushRxEv>:
void nRF24L01P::flushRx(void) {
 8005872:	b510      	push	{r4, lr}
 8005874:	4604      	mov	r4, r0
    select();  //  Set CS Pin to low.
 8005876:	f7ff fae4 	bl	8004e42 <_ZN9nRF24L01P6selectEv>
    spiWrite(_NRF24L01P_SPI_CMD_FLUSH_RX);
 800587a:	21e2      	movs	r1, #226	; 0xe2
 800587c:	4620      	mov	r0, r4
 800587e:	f7ff faec 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
    spiWrite(_NRF24L01P_SPI_CMD_NOP);
 8005882:	21ff      	movs	r1, #255	; 0xff
 8005884:	4620      	mov	r0, r4
 8005886:	f7ff fae8 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
    deselect();  //  Set CS Pin to high.
 800588a:	4620      	mov	r0, r4
 800588c:	f7ff fadf 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
}
 8005890:	bd10      	pop	{r4, pc}

08005892 <_ZN9nRF24L01P7flushTxEv>:
void nRF24L01P::flushTx(void) {
 8005892:	b510      	push	{r4, lr}
 8005894:	4604      	mov	r4, r0
    select();  //  Set CS Pin to low.
 8005896:	f7ff fad4 	bl	8004e42 <_ZN9nRF24L01P6selectEv>
    spiWrite(_NRF24L01P_SPI_CMD_FLUSH_TX);
 800589a:	21e1      	movs	r1, #225	; 0xe1
 800589c:	4620      	mov	r0, r4
 800589e:	f7ff fadc 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
    spiWrite(_NRF24L01P_SPI_CMD_NOP);
 80058a2:	21ff      	movs	r1, #255	; 0xff
 80058a4:	4620      	mov	r0, r4
 80058a6:	f7ff fad8 	bl	8004e5a <_ZN9nRF24L01P8spiWriteEh>
    deselect();  //  Set CS Pin to high.
 80058aa:	4620      	mov	r0, r4
 80058ac:	f7ff facf 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
}
 80058b0:	bd10      	pop	{r4, pc}

080058b2 <_ZN9nRF24L01P9flushTxRxEv>:
void nRF24L01P::flushTxRx(void) {
 80058b2:	b510      	push	{r4, lr}
 80058b4:	4604      	mov	r4, r0
    flushTx();
 80058b6:	f7ff ffec 	bl	8005892 <_ZN9nRF24L01P7flushTxEv>
    flushRx();
 80058ba:	4620      	mov	r0, r4
 80058bc:	f7ff ffd9 	bl	8005872 <_ZN9nRF24L01P7flushRxEv>
}
 80058c0:	bd10      	pop	{r4, pc}
	...

080058c4 <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh>:
    ) {
 80058c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80058ce:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
 80058d2:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80058d6:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
    assert(rx_addresses);  assert(rx_addresses_len <= 5);
 80058da:	f1b8 0f00 	cmp.w	r8, #0
 80058de:	d050      	beq.n	8005982 <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0xbe>
 80058e0:	4604      	mov	r4, r0
 80058e2:	2e05      	cmp	r6, #5
 80058e4:	d853      	bhi.n	800598e <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0xca>
    mode = _NRF24L01P_MODE_UNKNOWN;
 80058e6:	2500      	movs	r5, #0
 80058e8:	6145      	str	r5, [r0, #20]
    spi_num = spi_num0;
 80058ea:	6001      	str	r1, [r0, #0]
    cs_pin = cs_pin0;
 80058ec:	6042      	str	r2, [r0, #4]
    ce_pin = ce_pin0;
 80058ee:	6083      	str	r3, [r0, #8]
    irq_pin = irq_pin0;
 80058f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f2:	60c3      	str	r3, [r0, #12]
    wait_us(_NRF24L01P_TIMING_Tundef2pd_us);    // Wait for Power-on reset
 80058f4:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80059f4 <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0x130>
 80058f8:	4648      	mov	r0, r9
 80058fa:	f7ff fa88 	bl	8004e0e <_ZL7wait_usm>
    disable();   //  Set CE Pin to low.
 80058fe:	4620      	mov	r0, r4
 8005900:	f7ff fa98 	bl	8004e34 <_ZN9nRF24L01P7disableEv>
    deselect();  //  Set CS Pin to high.
 8005904:	4620      	mov	r0, r4
 8005906:	f7ff faa2 	bl	8004e4e <_ZN9nRF24L01P8deselectEv>
    wait_us(_NRF24L01P_TIMING_Tundef2pd_us);    // Wait for Power-on reset
 800590a:	4648      	mov	r0, r9
 800590c:	f7ff fa7f 	bl	8004e0e <_ZL7wait_usm>
    setRegister(_NRF24L01P_REG_CONFIG, 0);      // Power Down
 8005910:	462a      	mov	r2, r5
 8005912:	4629      	mov	r1, r5
 8005914:	4620      	mov	r0, r4
 8005916:	f7ff fab0 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
    wait_us(_NRF24L01P_TIMING_Tundef2pd_us);    // Wait for Power-down
 800591a:	4648      	mov	r0, r9
 800591c:	f7ff fa77 	bl	8004e0e <_ZL7wait_usm>
    setRegister(_NRF24L01P_REG_STATUS, _NRF24L01P_STATUS_MAX_RT|_NRF24L01P_STATUS_TX_DS|_NRF24L01P_STATUS_RX_DR);   // Clear any pending interrupts
 8005920:	2270      	movs	r2, #112	; 0x70
 8005922:	2107      	movs	r1, #7
 8005924:	4620      	mov	r0, r4
 8005926:	f7ff faa8 	bl	8004e7a <_ZN9nRF24L01P11setRegisterEii>
    disableAllRxPipes();
 800592a:	4620      	mov	r0, r4
 800592c:	f7ff fb16 	bl	8004f5c <_ZN9nRF24L01P17disableAllRxPipesEv>
    setRfFrequency(freq);
 8005930:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005932:	4620      	mov	r0, r4
 8005934:	f7ff fac6 	bl	8004ec4 <_ZN9nRF24L01P14setRfFrequencyEi>
    setRfOutputPower(power);
 8005938:	990c      	ldr	r1, [sp, #48]	; 0x30
 800593a:	4620      	mov	r0, r4
 800593c:	f7ff fbd6 	bl	80050ec <_ZN9nRF24L01P16setRfOutputPowerEi>
    setAirDataRate(data_rate);
 8005940:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005942:	4620      	mov	r0, r4
 8005944:	f7ff fc36 	bl	80051b4 <_ZN9nRF24L01P14setAirDataRateEi>
    setCrcWidth(crc_width);
 8005948:	990e      	ldr	r1, [sp, #56]	; 0x38
 800594a:	4620      	mov	r0, r4
 800594c:	f7ff fc84 	bl	8005258 <_ZN9nRF24L01P11setCrcWidthEi>
    setTxAddress(tx_address, DEFAULT_NRF24L01P_ADDRESS_WIDTH);
 8005950:	2305      	movs	r3, #5
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005958:	4620      	mov	r0, r4
 800595a:	f7ff fd57 	bl	800540c <_ZN9nRF24L01P12setTxAddressEyi>
    setTransferSize(tx_size, NRF24L01P_PIPE_P0);
 800595e:	462a      	mov	r2, r5
 8005960:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005962:	4620      	mov	r0, r4
 8005964:	f7ff face 	bl	8004f04 <_ZN9nRF24L01P15setTransferSizeEii>
    if (auto_ack) { enableAutoAcknowledge(NRF24L01P_PIPE_P0); }
 8005968:	b1bf      	cbz	r7, 800599a <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0xd6>
 800596a:	4629      	mov	r1, r5
 800596c:	4620      	mov	r0, r4
 800596e:	f7ff fcb9 	bl	80052e4 <_ZN9nRF24L01P21enableAutoAcknowledgeEi>
    if (auto_retransmit) { assert(0); /* TODO: enableAutoRetransmit(4000, 3); */ }
 8005972:	f1ba 0f00 	cmp.w	sl, #0
 8005976:	d114      	bne.n	80059a2 <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0xde>
    else { disableAutoRetransmit(); }
 8005978:	4620      	mov	r0, r4
 800597a:	f7ff fb07 	bl	8004f8c <_ZN9nRF24L01P21disableAutoRetransmitEv>
    for (int i = 0; i < rx_addresses_len; i++) {
 800597e:	2300      	movs	r3, #0
 8005980:	e016      	b.n	80059b0 <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0xec>
    assert(rx_addresses);  assert(rx_addresses_len <= 5);
 8005982:	2300      	movs	r3, #0
 8005984:	461a      	mov	r2, r3
 8005986:	4619      	mov	r1, r3
 8005988:	4618      	mov	r0, r3
 800598a:	f7fb ff35 	bl	80017f8 <__assert_func>
 800598e:	2300      	movs	r3, #0
 8005990:	461a      	mov	r2, r3
 8005992:	4619      	mov	r1, r3
 8005994:	4618      	mov	r0, r3
 8005996:	f7fb ff2f 	bl	80017f8 <__assert_func>
    else { disableAutoAcknowledge(); }
 800599a:	4620      	mov	r0, r4
 800599c:	f7ff faf0 	bl	8004f80 <_ZN9nRF24L01P22disableAutoAcknowledgeEv>
 80059a0:	e7e7      	b.n	8005972 <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0xae>
    if (auto_retransmit) { assert(0); /* TODO: enableAutoRetransmit(4000, 3); */ }
 80059a2:	2300      	movs	r3, #0
 80059a4:	461a      	mov	r2, r3
 80059a6:	4619      	mov	r1, r3
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fb ff25 	bl	80017f8 <__assert_func>
    ) {
 80059ae:	462b      	mov	r3, r5
    for (int i = 0; i < rx_addresses_len; i++) {
 80059b0:	429e      	cmp	r6, r3
 80059b2:	dd16      	ble.n	80059e2 <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0x11e>
        int pipe = NRF24L01P_PIPE_P1 + i;  //  rx pipes start at 1.
 80059b4:	1c5d      	adds	r5, r3, #1
        setRxAddress(rx_addresses[i], DEFAULT_NRF24L01P_ADDRESS_WIDTH, pipe);
 80059b6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	9501      	str	r5, [sp, #4]
 80059c0:	2105      	movs	r1, #5
 80059c2:	9100      	str	r1, [sp, #0]
 80059c4:	4620      	mov	r0, r4
 80059c6:	f7ff fcaf 	bl	8005328 <_ZN9nRF24L01P12setRxAddressEyii>
        setTransferSize(tx_size, pipe);
 80059ca:	462a      	mov	r2, r5
 80059cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80059ce:	4620      	mov	r0, r4
 80059d0:	f7ff fa98 	bl	8004f04 <_ZN9nRF24L01P15setTransferSizeEii>
        if (auto_ack) { enableAutoAcknowledge(pipe); }
 80059d4:	2f00      	cmp	r7, #0
 80059d6:	d0ea      	beq.n	80059ae <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0xea>
 80059d8:	4629      	mov	r1, r5
 80059da:	4620      	mov	r0, r4
 80059dc:	f7ff fc82 	bl	80052e4 <_ZN9nRF24L01P21enableAutoAcknowledgeEi>
 80059e0:	e7e5      	b.n	80059ae <_ZN9nRF24L01P4initEiiiiiiiiihhyPKyh+0xea>
    flushTxRx();
 80059e2:	4620      	mov	r0, r4
 80059e4:	f7ff ff65 	bl	80058b2 <_ZN9nRF24L01P9flushTxRxEv>
    mode = _NRF24L01P_MODE_POWER_DOWN;
 80059e8:	2301      	movs	r3, #1
 80059ea:	6163      	str	r3, [r4, #20]
}
 80059ec:	2000      	movs	r0, #0
 80059ee:	b002      	add	sp, #8
 80059f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f4:	000186a0 	.word	0x000186a0

080059f8 <_ZL10oc_ep_sizePK11oc_endpoint>:
}

static uint8_t oc_ep_size(const struct oc_endpoint *oe) {
    //  Return the size of the endpoint.  OIC will allocate space to store this endpoint in the transmitted mbuf.
    return sizeof(struct nrf24l01_endpoint);
}
 80059f8:	200c      	movs	r0, #12
 80059fa:	4770      	bx	lr

080059fc <_ZL14oc_ep_has_connPK11oc_endpoint>:

static int oc_ep_has_conn(const struct oc_endpoint *oe) {
    //  Return true if the endpoint is connected.  We always return false.
    //  console_printf("oc_ep_has_conn\n");
    return 0;
}
 80059fc:	2000      	movs	r0, #0
 80059fe:	4770      	bx	lr

08005a00 <_ZL7oc_initv>:

static int oc_init(void) {
    //  Init the endpoint.
    //  console_printf("oc_init\n");
    return 0;
}
 8005a00:	2000      	movs	r0, #0
 8005a02:	4770      	bx	lr

08005a04 <_ZL11oc_shutdownv>:

static void oc_shutdown(void) {
    //  Shutdown the endpoint.
    //  console_printf("oc_shutdown\n");
}
 8005a04:	4770      	bx	lr
	...

08005a08 <_ZL9oc_ep_strPciPK11oc_endpoint>:
static char *oc_ep_str(char *ptr, int maxlen, const struct oc_endpoint *oe) {
 8005a08:	b510      	push	{r4, lr}
 8005a0a:	4604      	mov	r4, r0
    console_printf("nrfstr\n");
 8005a0c:	4806      	ldr	r0, [pc, #24]	; (8005a28 <_ZL9oc_ep_strPciPK11oc_endpoint+0x20>)
 8005a0e:	f000 fc8f 	bl	8006330 <console_printf>
    strcpy(ptr, "TODO:oc_ep_str");
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <_ZL9oc_ep_strPciPK11oc_endpoint+0x24>)
 8005a14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005a16:	6020      	str	r0, [r4, #0]
 8005a18:	6061      	str	r1, [r4, #4]
 8005a1a:	60a2      	str	r2, [r4, #8]
 8005a1c:	881a      	ldrh	r2, [r3, #0]
 8005a1e:	789b      	ldrb	r3, [r3, #2]
 8005a20:	81a2      	strh	r2, [r4, #12]
 8005a22:	73a3      	strb	r3, [r4, #14]
}
 8005a24:	4620      	mov	r0, r4
 8005a26:	bd10      	pop	{r4, pc}
 8005a28:	0800d7e8 	.word	0x0800d7e8
 8005a2c:	0800d2d0 	.word	0x0800d2d0

08005a30 <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf>:
static int nrf24l01_tx_mbuf(struct nrf24l01 *dev, struct os_mbuf *mbuf) {
 8005a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a34:	4681      	mov	r9, r0
 8005a36:	460d      	mov	r5, r1
    int mbuf_num = 0;
 8005a38:	2600      	movs	r6, #0
    while (m) {  //  For each mbuf in the list...
 8005a3a:	2d00      	cmp	r5, #0
 8005a3c:	d049      	beq.n	8005ad2 <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0xa2>
        const char *data = OS_MBUF_DATA(m, const char *);  //  Fetch the data.
 8005a3e:	682f      	ldr	r7, [r5, #0]
        int size = m->om_len;  //  Fetch the size.
 8005a40:	88ec      	ldrh	r4, [r5, #6]
 8005a42:	46a0      	mov	r8, r4
        console_printf("%s%s len %02d: ", _nrf, (mbuf_num == 0 ? "header" : "payload"), size);
 8005a44:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0xa8>)
 8005a46:	6819      	ldr	r1, [r3, #0]
 8005a48:	b9d6      	cbnz	r6, 8005a80 <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0x50>
 8005a4a:	4a24      	ldr	r2, [pc, #144]	; (8005adc <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0xac>)
 8005a4c:	4623      	mov	r3, r4
 8005a4e:	4824      	ldr	r0, [pc, #144]	; (8005ae0 <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0xb0>)
 8005a50:	f000 fc6e 	bl	8006330 <console_printf>
        console_dump((const uint8_t *) data, size); console_printf("\n");
 8005a54:	46a2      	mov	sl, r4
 8005a56:	4621      	mov	r1, r4
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f000 fd43 	bl	80064e4 <console_dump>
 8005a5e:	4821      	ldr	r0, [pc, #132]	; (8005ae4 <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0xb4>)
 8005a60:	f000 fc66 	bl	8006330 <console_printf>
        if (mbuf_num == 1) {  //  If this is the second mbuf, i.e. the CoAP Payload, not the CoAP Header...
 8005a64:	2e01      	cmp	r6, #1
 8005a66:	d131      	bne.n	8005acc <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0x9c>
            assert(size > 0);
 8005a68:	f1b8 0f00 	cmp.w	r8, #0
 8005a6c:	d00a      	beq.n	8005a84 <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0x54>
            if (size <= 0 || size > MYNEWT_VAL(NRF24L01_TX_SIZE)) { rc = 0; break; }  //  Too small or too big, quit.
 8005a6e:	1e63      	subs	r3, r4, #1
 8005a70:	2b0b      	cmp	r3, #11
 8005a72:	d90d      	bls.n	8005a90 <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0x60>
 8005a74:	2400      	movs	r4, #0
    console_flush();
 8005a76:	f000 fca1 	bl	80063bc <console_flush>
}
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        console_printf("%s%s len %02d: ", _nrf, (mbuf_num == 0 ? "header" : "payload"), size);
 8005a80:	4a19      	ldr	r2, [pc, #100]	; (8005ae8 <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0xb8>)
 8005a82:	e7e3      	b.n	8005a4c <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0x1c>
            assert(size > 0);
 8005a84:	2300      	movs	r3, #0
 8005a86:	461a      	mov	r2, r3
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fb feb4 	bl	80017f8 <__assert_func>
            memset(nrf24l01_tx_buffer, 0, MYNEWT_VAL(NRF24L01_TX_SIZE));
 8005a90:	4c16      	ldr	r4, [pc, #88]	; (8005aec <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0xbc>)
 8005a92:	2300      	movs	r3, #0
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	6063      	str	r3, [r4, #4]
 8005a98:	60a3      	str	r3, [r4, #8]
            memcpy(nrf24l01_tx_buffer, data, size);
 8005a9a:	4652      	mov	r2, sl
 8005a9c:	4639      	mov	r1, r7
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f7fd fb0e 	bl	80030c0 <memcpy>
            static uint8_t tx_count = 0;  nrf24l01_tx_buffer[MYNEWT_VAL(NRF24L01_TX_SIZE) - 1] = tx_count++;
 8005aa4:	4a12      	ldr	r2, [pc, #72]	; (8005af0 <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0xc0>)
 8005aa6:	7813      	ldrb	r3, [r2, #0]
 8005aa8:	1c59      	adds	r1, r3, #1
 8005aaa:	7011      	strb	r1, [r2, #0]
 8005aac:	72e3      	strb	r3, [r4, #11]
            rc = nrf24l01_send(dev, nrf24l01_tx_buffer, MYNEWT_VAL(NRF24L01_TX_SIZE));
 8005aae:	220c      	movs	r2, #12
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	4648      	mov	r0, r9
 8005ab4:	f7ff f900 	bl	8004cb8 <nrf24l01_send>
 8005ab8:	4604      	mov	r4, r0
            assert(rc != -1);
 8005aba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005abe:	d1da      	bne.n	8005a76 <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0x46>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fb fe96 	bl	80017f8 <__assert_func>
        mbuf_num++;
 8005acc:	3601      	adds	r6, #1
        m = m->om_next.sle_next;   //  Fetch next mbuf in the list.
 8005ace:	68ed      	ldr	r5, [r5, #12]
    while (m) {  //  For each mbuf in the list...
 8005ad0:	e7b3      	b.n	8005a3a <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0xa>
    int rc = 0;
 8005ad2:	2400      	movs	r4, #0
 8005ad4:	e7cf      	b.n	8005a76 <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf+0x46>
 8005ad6:	bf00      	nop
 8005ad8:	200001b4 	.word	0x200001b4
 8005adc:	0800d7c8 	.word	0x0800d7c8
 8005ae0:	0800d7d8 	.word	0x0800d7d8
 8005ae4:	0800d5fc 	.word	0x0800d5fc
 8005ae8:	0800d7d0 	.word	0x0800d7d0
 8005aec:	20002b3c 	.word	0x20002b3c
 8005af0:	20002b4c 	.word	0x20002b4c

08005af4 <_ZL11oc_tx_ucastP7os_mbuf>:
static void oc_tx_ucast(struct os_mbuf *m) {
 8005af4:	b538      	push	{r3, r4, r5, lr}
    assert(m);  assert(OS_MBUF_USRHDR_LEN(m) >= sizeof(struct nrf24l01_endpoint));
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d037      	beq.n	8005b6a <_ZL11oc_tx_ucastP7os_mbuf+0x76>
 8005afa:	4604      	mov	r4, r0
 8005afc:	7943      	ldrb	r3, [r0, #5]
 8005afe:	3b08      	subs	r3, #8
 8005b00:	2b0b      	cmp	r3, #11
 8005b02:	d938      	bls.n	8005b76 <_ZL11oc_tx_ucastP7os_mbuf+0x82>
    assert(endpoint);  assert(endpoint->host);  assert(endpoint->port);  //  Host and endpoint should be in the endpoint.
 8005b04:	f110 0f18 	cmn.w	r0, #24
 8005b08:	d03b      	beq.n	8005b82 <_ZL11oc_tx_ucastP7os_mbuf+0x8e>
 8005b0a:	69c1      	ldr	r1, [r0, #28]
 8005b0c:	2900      	cmp	r1, #0
 8005b0e:	d03e      	beq.n	8005b8e <_ZL11oc_tx_ucastP7os_mbuf+0x9a>
 8005b10:	8c02      	ldrh	r2, [r0, #32]
 8005b12:	2a00      	cmp	r2, #0
 8005b14:	d041      	beq.n	8005b9a <_ZL11oc_tx_ucastP7os_mbuf+0xa6>
    assert(server);  assert(endpoint->host == server->endpoint.host);  assert(endpoint->port == server->endpoint.port);  //  We only support 1 server connection. Must match the message endpoint.
 8005b16:	4b38      	ldr	r3, [pc, #224]	; (8005bf8 <_ZL11oc_tx_ucastP7os_mbuf+0x104>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d043      	beq.n	8005ba6 <_ZL11oc_tx_ucastP7os_mbuf+0xb2>
 8005b1e:	6858      	ldr	r0, [r3, #4]
 8005b20:	4281      	cmp	r1, r0
 8005b22:	d145      	bne.n	8005bb0 <_ZL11oc_tx_ucastP7os_mbuf+0xbc>
 8005b24:	891b      	ldrh	r3, [r3, #8]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d148      	bne.n	8005bbc <_ZL11oc_tx_ucastP7os_mbuf+0xc8>
    assert(network_device);
 8005b2a:	4b34      	ldr	r3, [pc, #208]	; (8005bfc <_ZL11oc_tx_ucastP7os_mbuf+0x108>)
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d04a      	beq.n	8005bc8 <_ZL11oc_tx_ucastP7os_mbuf+0xd4>
        struct nrf24l01 *dev = (struct nrf24l01 *) os_dev_open(network_device, OS_TIMEOUT_NEVER, NULL);  //  network_device is "nrf24l01_0"
 8005b32:	2200      	movs	r2, #0
 8005b34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b38:	f7fc f930 	bl	8001d9c <os_dev_open>
        assert(dev != NULL);
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d048      	beq.n	8005bd4 <_ZL11oc_tx_ucastP7os_mbuf+0xe0>
        console_printf("%stx mbuf\n", _nrf);
 8005b42:	4b2f      	ldr	r3, [pc, #188]	; (8005c00 <_ZL11oc_tx_ucastP7os_mbuf+0x10c>)
 8005b44:	6819      	ldr	r1, [r3, #0]
 8005b46:	482f      	ldr	r0, [pc, #188]	; (8005c04 <_ZL11oc_tx_ucastP7os_mbuf+0x110>)
 8005b48:	f000 fbf2 	bl	8006330 <console_printf>
        rc = nrf24l01_tx_mbuf(dev, m);  
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f7ff ff6e 	bl	8005a30 <_ZL16nrf24l01_tx_mbufP8nrf24l01P7os_mbuf>
        assert(rc > 0);
 8005b54:	2800      	cmp	r0, #0
 8005b56:	dd43      	ble.n	8005be0 <_ZL11oc_tx_ucastP7os_mbuf+0xec>
        os_dev_close((struct os_dev *) dev);
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f7fc f941 	bl	8001de0 <os_dev_close>
    rc = os_mbuf_free_chain(m);  assert(rc == 0);
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f7fc ffbd 	bl	8002ade <os_mbuf_free_chain>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d141      	bne.n	8005bec <_ZL11oc_tx_ucastP7os_mbuf+0xf8>
}
 8005b68:	bd38      	pop	{r3, r4, r5, pc}
    assert(m);  assert(OS_MBUF_USRHDR_LEN(m) >= sizeof(struct nrf24l01_endpoint));
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fb fe41 	bl	80017f8 <__assert_func>
 8005b76:	2300      	movs	r3, #0
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fb fe3b 	bl	80017f8 <__assert_func>
    assert(endpoint);  assert(endpoint->host);  assert(endpoint->port);  //  Host and endpoint should be in the endpoint.
 8005b82:	2300      	movs	r3, #0
 8005b84:	461a      	mov	r2, r3
 8005b86:	4619      	mov	r1, r3
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fb fe35 	bl	80017f8 <__assert_func>
 8005b8e:	2300      	movs	r3, #0
 8005b90:	461a      	mov	r2, r3
 8005b92:	4619      	mov	r1, r3
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fb fe2f 	bl	80017f8 <__assert_func>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fb fe29 	bl	80017f8 <__assert_func>
    assert(server);  assert(endpoint->host == server->endpoint.host);  assert(endpoint->port == server->endpoint.port);  //  We only support 1 server connection. Must match the message endpoint.
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fb fe24 	bl	80017f8 <__assert_func>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7fb fe1e 	bl	80017f8 <__assert_func>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fb fe18 	bl	80017f8 <__assert_func>
    assert(network_device);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	461a      	mov	r2, r3
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fb fe12 	bl	80017f8 <__assert_func>
        assert(dev != NULL);
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fb fe0c 	bl	80017f8 <__assert_func>
        assert(rc > 0);
 8005be0:	2300      	movs	r3, #0
 8005be2:	461a      	mov	r2, r3
 8005be4:	4619      	mov	r1, r3
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fb fe06 	bl	80017f8 <__assert_func>
    rc = os_mbuf_free_chain(m);  assert(rc == 0);
 8005bec:	2300      	movs	r3, #0
 8005bee:	461a      	mov	r2, r3
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fb fe00 	bl	80017f8 <__assert_func>
 8005bf8:	20002b48 	.word	0x20002b48
 8005bfc:	20002b38 	.word	0x20002b38
 8005c00:	200001b4 	.word	0x200001b4
 8005c04:	0800d7bc 	.word	0x0800d7bc

08005c08 <init_nrf24l01_endpoint>:
int init_nrf24l01_endpoint(struct nrf24l01_endpoint *endpoint, const char *host, uint16_t port) {
 8005c08:	b410      	push	{r4}
    endpoint->ep.oe_type = transport_id;  //  Populate our transport ID so that OIC will call our functions.
 8005c0a:	7803      	ldrb	r3, [r0, #0]
 8005c0c:	4c06      	ldr	r4, [pc, #24]	; (8005c28 <init_nrf24l01_endpoint+0x20>)
 8005c0e:	7824      	ldrb	r4, [r4, #0]
 8005c10:	f364 0302 	bfi	r3, r4, #0, #3
    endpoint->ep.oe_flags = 0;
 8005c14:	f36f 03c7 	bfc	r3, #3, #5
 8005c18:	7003      	strb	r3, [r0, #0]
    if (host) { 
 8005c1a:	b109      	cbz	r1, 8005c20 <init_nrf24l01_endpoint+0x18>
        endpoint->host = host;
 8005c1c:	6041      	str	r1, [r0, #4]
        endpoint->port = port;
 8005c1e:	8102      	strh	r2, [r0, #8]
}
 8005c20:	2000      	movs	r0, #0
 8005c22:	bc10      	pop	{r4}
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	200001b1 	.word	0x200001b1

08005c2c <init_nrf24l01_server>:
int init_nrf24l01_server(struct nrf24l01_server *server, const char *host, uint16_t port) {
 8005c2c:	b510      	push	{r4, lr}
 8005c2e:	4604      	mov	r4, r0
    int rc = init_nrf24l01_endpoint(&server->endpoint, host, port);  assert(rc == 0);
 8005c30:	f7ff ffea 	bl	8005c08 <init_nrf24l01_endpoint>
 8005c34:	b910      	cbnz	r0, 8005c3c <init_nrf24l01_server+0x10>
    server->handle = (struct oc_server_handle *) server;
 8005c36:	60e4      	str	r4, [r4, #12]
}
 8005c38:	2000      	movs	r0, #0
 8005c3a:	bd10      	pop	{r4, pc}
    int rc = init_nrf24l01_endpoint(&server->endpoint, host, port);  assert(rc == 0);
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	461a      	mov	r2, r3
 8005c40:	4619      	mov	r1, r3
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fb fdd8 	bl	80017f8 <__assert_func>

08005c48 <nrf24l01_register_transport>:
int nrf24l01_register_transport(const char *network_device0, struct nrf24l01_server *server0, const char *host, uint16_t port) {
 8005c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(network_device0);  assert(server0);
 8005c4c:	b320      	cbz	r0, 8005c98 <nrf24l01_register_transport+0x50>
 8005c4e:	460c      	mov	r4, r1
 8005c50:	4617      	mov	r7, r2
 8005c52:	4698      	mov	r8, r3
 8005c54:	4605      	mov	r5, r0
 8005c56:	b329      	cbz	r1, 8005ca4 <nrf24l01_register_transport+0x5c>
        struct nrf24l01 *dev = (struct nrf24l01 *) os_dev_open(network_device0, OS_TIMEOUT_NEVER, NULL);  //  network_device0 is "nrf24l01_0"
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c5e:	f7fc f89d 	bl	8001d9c <os_dev_open>
        assert(dev != NULL);
 8005c62:	4606      	mov	r6, r0
 8005c64:	b320      	cbz	r0, 8005cb0 <nrf24l01_register_transport+0x68>
        transport_id = oc_transport_register(&transport);
 8005c66:	481b      	ldr	r0, [pc, #108]	; (8005cd4 <nrf24l01_register_transport+0x8c>)
 8005c68:	f001 fb32 	bl	80072d0 <oc_transport_register>
 8005c6c:	4b1a      	ldr	r3, [pc, #104]	; (8005cd8 <nrf24l01_register_transport+0x90>)
 8005c6e:	7018      	strb	r0, [r3, #0]
        int rc = init_nrf24l01_server(server0, host, port);
 8005c70:	4642      	mov	r2, r8
 8005c72:	4639      	mov	r1, r7
 8005c74:	4620      	mov	r0, r4
 8005c76:	f7ff ffd9 	bl	8005c2c <init_nrf24l01_server>
        assert(rc == 0);
 8005c7a:	b9f8      	cbnz	r0, 8005cbc <nrf24l01_register_transport+0x74>
        rc = nrf24l01_flush_txrx(dev);
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f7ff f8ab 	bl	8004dd8 <nrf24l01_flush_txrx>
        assert(rc == 0);
 8005c82:	bb08      	cbnz	r0, 8005cc8 <nrf24l01_register_transport+0x80>
        network_device = network_device0;
 8005c84:	4b15      	ldr	r3, [pc, #84]	; (8005cdc <nrf24l01_register_transport+0x94>)
 8005c86:	601d      	str	r5, [r3, #0]
        server = server0;
 8005c88:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <nrf24l01_register_transport+0x98>)
 8005c8a:	601c      	str	r4, [r3, #0]
        os_dev_close((struct os_dev *) dev);
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f7fc f8a7 	bl	8001de0 <os_dev_close>
}
 8005c92:	2000      	movs	r0, #0
 8005c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(network_device0);  assert(server0);
 8005c98:	2300      	movs	r3, #0
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fb fdaa 	bl	80017f8 <__assert_func>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fb fda4 	bl	80017f8 <__assert_func>
        assert(dev != NULL);
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fb fd9e 	bl	80017f8 <__assert_func>
        assert(rc == 0);
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fb fd98 	bl	80017f8 <__assert_func>
        assert(rc == 0);
 8005cc8:	2300      	movs	r3, #0
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fb fd92 	bl	80017f8 <__assert_func>
 8005cd4:	0800d7f0 	.word	0x0800d7f0
 8005cd8:	200001b1 	.word	0x200001b1
 8005cdc:	20002b38 	.word	0x20002b38
 8005ce0:	20002b48 	.word	0x20002b48

08005ce4 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(const char *name) {
 8005ce4:	b530      	push	{r4, r5, lr}
 8005ce6:	b085      	sub	sp, #20
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(name, OS_TIMEOUT_NEVER, NULL);
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005cee:	f7fc f855 	bl	8001d9c <os_dev_open>
    assert(dev != NULL);
 8005cf2:	b178      	cbz	r0, 8005d14 <config_device+0x30>
 8005cf4:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
 8005cf6:	4668      	mov	r0, sp
 8005cf8:	f000 f96a 	bl	8005fd0 <remote_sensor_default_cfg>
    assert(rc == 0);
 8005cfc:	b980      	cbnz	r0, 8005d20 <config_device+0x3c>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 8005cfe:	4669      	mov	r1, sp
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 f951 	bl	8005fa8 <remote_sensor_config>
 8005d06:	4605      	mov	r5, r0
    os_dev_close(dev);
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f7fc f869 	bl	8001de0 <os_dev_close>
    return rc;
}
 8005d0e:	4628      	mov	r0, r5
 8005d10:	b005      	add	sp, #20
 8005d12:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
 8005d14:	2300      	movs	r3, #0
 8005d16:	461a      	mov	r2, r3
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fb fd6c 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 8005d20:	2300      	movs	r3, #0
 8005d22:	461a      	mov	r2, r3
 8005d24:	4619      	mov	r1, r3
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fb fd66 	bl	80017f8 <__assert_func>

08005d2c <remote_sensor_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	b082      	sub	sp, #8
    if (!is_collector_node()) { return; }  //  Remote Sensors are applicable only for Collector Node.
 8005d30:	f000 fc6c 	bl	800660c <is_collector_node>
 8005d34:	b3b0      	cbz	r0, 8005da4 <remote_sensor_create+0x78>
    for (int i = 0; i < DEVICE_COUNT; i++) {
 8005d36:	2400      	movs	r4, #0
 8005d38:	2c04      	cmp	r4, #4
 8005d3a:	dc31      	bgt.n	8005da0 <remote_sensor_create+0x74>
        console_printf("RSN listen %s\n", DEVICE_NAME[i]);  ////
 8005d3c:	f000 fc90 	bl	8006660 <get_sensor_node_names>
 8005d40:	00a5      	lsls	r5, r4, #2
 8005d42:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
 8005d46:	4818      	ldr	r0, [pc, #96]	; (8005da8 <remote_sensor_create+0x7c>)
 8005d48:	f000 faf2 	bl	8006330 <console_printf>

        //  Create the device.
        int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE[i], DEVICE_NAME[i],
 8005d4c:	4b17      	ldr	r3, [pc, #92]	; (8005dac <remote_sensor_create+0x80>)
 8005d4e:	26d8      	movs	r6, #216	; 0xd8
 8005d50:	fb06 3604 	mla	r6, r6, r4, r3
 8005d54:	f000 fc84 	bl	8006660 <get_sensor_node_names>
 8005d58:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
            OS_DEV_INIT_PRIMARY, 0, 
            DEVICE_INIT, (void *) &DEVICE_ITF[i]);
 8005d5c:	192b      	adds	r3, r5, r4
 8005d5e:	009a      	lsls	r2, r3, #2
 8005d60:	4b13      	ldr	r3, [pc, #76]	; (8005db0 <remote_sensor_create+0x84>)
 8005d62:	4413      	add	r3, r2
        int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE[i], DEVICE_NAME[i],
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <remote_sensor_create+0x88>)
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4630      	mov	r0, r6
 8005d70:	f7fb ffce 	bl	8001d10 <os_dev_create>
        assert(rc == 0);
 8005d74:	b940      	cbnz	r0, 8005d88 <remote_sensor_create+0x5c>

        //  Configure the device.
        rc = config_device(DEVICE_NAME[i]);
 8005d76:	f000 fc73 	bl	8006660 <get_sensor_node_names>
 8005d7a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8005d7e:	f7ff ffb1 	bl	8005ce4 <config_device>
        assert(rc == 0);
 8005d82:	b938      	cbnz	r0, 8005d94 <remote_sensor_create+0x68>
    for (int i = 0; i < DEVICE_COUNT; i++) {
 8005d84:	3401      	adds	r4, #1
 8005d86:	e7d7      	b.n	8005d38 <remote_sensor_create+0xc>
        assert(rc == 0);
 8005d88:	2300      	movs	r3, #0
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fb fd32 	bl	80017f8 <__assert_func>
        assert(rc == 0);
 8005d94:	2300      	movs	r3, #0
 8005d96:	461a      	mov	r2, r3
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fb fd2c 	bl	80017f8 <__assert_func>
    }
#ifdef DEVICE_START
    //  Start the device after creation.
    DEVICE_START();
 8005da0:	f000 fa66 	bl	8006270 <remote_sensor_start>
#endif  //  DEVICE_START
}
 8005da4:	b002      	add	sp, #8
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	0800d81c 	.word	0x0800d81c
 8005dac:	20002bb8 	.word	0x20002bb8
 8005db0:	20002b50 	.word	0x20002b50
 8005db4:	08005fe9 	.word	0x08005fe9

08005db8 <sensor_get_config_internal>:
err:
    return (rc);
}

static int sensor_get_config_internal(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
 8005db8:	b4f0      	push	{r4, r5, r6, r7}
 8005dba:	4616      	mov	r6, r2
 8005dbc:	461f      	mov	r7, r3
    //  Return the type of the sensor value returned by the sensor.    
    const struct sensor_type_descriptor *st = sensor_types;
 8005dbe:	490a      	ldr	r1, [pc, #40]	; (8005de8 <sensor_get_config_internal+0x30>)
    while (st->type) { 
 8005dc0:	684b      	ldr	r3, [r1, #4]
 8005dc2:	b16b      	cbz	r3, 8005de0 <sensor_get_config_internal+0x28>
        if (type & st->type) {
 8005dc4:	ea06 0403 	and.w	r4, r6, r3
 8005dc8:	ea07 75e3 	and.w	r5, r7, r3, asr #31
 8005dcc:	ea54 0305 	orrs.w	r3, r4, r5
 8005dd0:	d101      	bne.n	8005dd6 <sensor_get_config_internal+0x1e>
            cfg->sc_valtype = st->valtype;
            return 0;
        }
        st++; 
 8005dd2:	3110      	adds	r1, #16
 8005dd4:	e7f4      	b.n	8005dc0 <sensor_get_config_internal+0x8>
            cfg->sc_valtype = st->valtype;
 8005dd6:	688a      	ldr	r2, [r1, #8]
 8005dd8:	9b04      	ldr	r3, [sp, #16]
 8005dda:	701a      	strb	r2, [r3, #0]
            return 0;
 8005ddc:	2000      	movs	r0, #0
 8005dde:	e001      	b.n	8005de4 <sensor_get_config_internal+0x2c>
    }
    return SYS_EINVAL;
 8005de0:	f06f 0001 	mvn.w	r0, #1
}
 8005de4:	bcf0      	pop	{r4, r5, r6, r7}
 8005de6:	4770      	bx	lr
 8005de8:	0800d854 	.word	0x0800d854

08005dec <sensor_close_internal>:
}

static int sensor_close_internal(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
 8005dec:	2000      	movs	r0, #0
 8005dee:	4770      	bx	lr

08005df0 <save_humid>:

/////////////////////////////////////////////////////////
//  Remote Sensor Type #4: Save Sensor Value

#ifdef MYNEWT_VAL_REMOTE_SENSOR_TYPE_4__FIELD  //  If Remote Sensor Type #4 is configured...
    _SAVE_SENSOR_VALUE(
 8005df0:	b510      	push	{r4, lr}
 8005df2:	780b      	ldrb	r3, [r1, #0]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d10b      	bne.n	8005e10 <save_humid+0x20>
 8005df8:	4604      	mov	r4, r0
 8005dfa:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8005dfe:	f006 ff17 	bl	800cc30 <__aeabi_d2f>
 8005e02:	6020      	str	r0, [r4, #0]
 8005e04:	7923      	ldrb	r3, [r4, #4]
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	7123      	strb	r3, [r4, #4]
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	bd10      	pop	{r4, pc}
 8005e10:	2300      	movs	r3, #0
 8005e12:	461a      	mov	r2, r3
 8005e14:	4619      	mov	r1, r3
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fb fcee 	bl	80017f8 <__assert_func>

08005e1c <save_press>:
    _SAVE_SENSOR_VALUE(
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	780b      	ldrb	r3, [r1, #0]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d10b      	bne.n	8005e3c <save_press+0x20>
 8005e24:	4604      	mov	r4, r0
 8005e26:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8005e2a:	f006 ff01 	bl	800cc30 <__aeabi_d2f>
 8005e2e:	6020      	str	r0, [r4, #0]
 8005e30:	7923      	ldrb	r3, [r4, #4]
 8005e32:	f043 0301 	orr.w	r3, r3, #1
 8005e36:	7123      	strb	r3, [r4, #4]
 8005e38:	4620      	mov	r0, r4
 8005e3a:	bd10      	pop	{r4, pc}
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	461a      	mov	r2, r3
 8005e40:	4619      	mov	r1, r3
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fb fcd8 	bl	80017f8 <__assert_func>

08005e48 <save_temp>:
    _SAVE_SENSOR_VALUE(
 8005e48:	b510      	push	{r4, lr}
 8005e4a:	780b      	ldrb	r3, [r1, #0]
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d10b      	bne.n	8005e68 <save_temp+0x20>
 8005e50:	4604      	mov	r4, r0
 8005e52:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8005e56:	f006 feeb 	bl	800cc30 <__aeabi_d2f>
 8005e5a:	6020      	str	r0, [r4, #0]
 8005e5c:	7923      	ldrb	r3, [r4, #4]
 8005e5e:	f043 0301 	orr.w	r3, r3, #1
 8005e62:	7123      	strb	r3, [r4, #4]
 8005e64:	4620      	mov	r0, r4
 8005e66:	bd10      	pop	{r4, pc}
 8005e68:	2300      	movs	r3, #0
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fb fcc2 	bl	80017f8 <__assert_func>

08005e74 <save_temp_raw>:
    _SAVE_SENSOR_VALUE(
 8005e74:	b508      	push	{r3, lr}
 8005e76:	780b      	ldrb	r3, [r1, #0]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d106      	bne.n	8005e8a <save_temp_raw+0x16>
 8005e7c:	690b      	ldr	r3, [r1, #16]
 8005e7e:	6003      	str	r3, [r0, #0]
 8005e80:	7903      	ldrb	r3, [r0, #4]
 8005e82:	f043 0301 	orr.w	r3, r3, #1
 8005e86:	7103      	strb	r3, [r0, #4]
 8005e88:	bd08      	pop	{r3, pc}
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fb fcb1 	bl	80017f8 <__assert_func>

08005e96 <sensor_open_internal>:
static int sensor_open_internal(struct os_dev *dev0, uint32_t timeout, void *arg) {
 8005e96:	b508      	push	{r3, lr}
    dev = (struct remote_sensor *) dev0;  assert(dev);  
 8005e98:	b120      	cbz	r0, 8005ea4 <sensor_open_internal+0xe>
    cfg = &dev->cfg; assert(cfg);
 8005e9a:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
 8005e9e:	d007      	beq.n	8005eb0 <sensor_open_internal+0x1a>
}
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	bd08      	pop	{r3, pc}
    dev = (struct remote_sensor *) dev0;  assert(dev);  
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fb fca4 	bl	80017f8 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fb fc9e 	bl	80017f8 <__assert_func>

08005ebc <sensor_read_internal>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 8005ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005ec4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    assert(sensor);
 8005ec6:	b168      	cbz	r0, 8005ee4 <sensor_read_internal+0x28>
 8005ec8:	4614      	mov	r4, r2
 8005eca:	461d      	mov	r5, r3
 8005ecc:	4680      	mov	r8, r0
    if (!data_func) { return 0; }  //  If no Listener Function, then don't continue.
 8005ece:	2f00      	cmp	r7, #0
 8005ed0:	d040      	beq.n	8005f54 <sensor_read_internal+0x98>
    assert(data_arg);
 8005ed2:	b16e      	cbz	r6, 8005ef0 <sensor_read_internal+0x34>
    oc_rep_t *rep = (oc_rep_t *) src->user_arg;  //  Contains type and value.
 8005ed4:	f8d6 e004 	ldr.w	lr, [r6, #4]
    assert(rep);
 8005ed8:	f1be 0f00 	cmp.w	lr, #0
 8005edc:	d00e      	beq.n	8005efc <sensor_read_internal+0x40>
    const struct sensor_type_descriptor *st = sensor_types;
 8005ede:	f8df c080 	ldr.w	ip, [pc, #128]	; 8005f60 <sensor_read_internal+0xa4>
 8005ee2:	e013      	b.n	8005f0c <sensor_read_internal+0x50>
    assert(sensor);
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fb fc84 	bl	80017f8 <__assert_func>
    assert(data_arg);
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fb fc7e 	bl	80017f8 <__assert_func>
    assert(rep);
 8005efc:	2300      	movs	r3, #0
 8005efe:	461a      	mov	r2, r3
 8005f00:	4619      	mov	r1, r3
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fb fc78 	bl	80017f8 <__assert_func>
    while (st->type && type != st->type) { st++; }
 8005f08:	f10c 0c10 	add.w	ip, ip, #16
 8005f0c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8005f10:	b122      	cbz	r2, 8005f1c <sensor_read_internal+0x60>
 8005f12:	17d1      	asrs	r1, r2, #31
 8005f14:	42a9      	cmp	r1, r5
 8005f16:	bf08      	it	eq
 8005f18:	42a2      	cmpeq	r2, r4
 8005f1a:	d1f5      	bne.n	8005f08 <sensor_read_internal+0x4c>
    if (type != st->type) { rc = SYS_EINVAL; goto err; }
 8005f1c:	17d3      	asrs	r3, r2, #31
 8005f1e:	42ab      	cmp	r3, r5
 8005f20:	bf08      	it	eq
 8005f22:	42a2      	cmpeq	r2, r4
 8005f24:	d118      	bne.n	8005f58 <sensor_read_internal+0x9c>
    void *d = st->save_func(&data, rep);  
 8005f26:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8005f2a:	4671      	mov	r1, lr
 8005f2c:	a802      	add	r0, sp, #8
 8005f2e:	4798      	blx	r3
    rc = data_func(sensor, data_arg, d, type);
 8005f30:	e9cd 4500 	strd	r4, r5, [sp]
 8005f34:	4602      	mov	r2, r0
 8005f36:	4631      	mov	r1, r6
 8005f38:	4640      	mov	r0, r8
 8005f3a:	47b8      	blx	r7
    assert(rc == 0);
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	b918      	cbnz	r0, 8005f48 <sensor_read_internal+0x8c>
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	b004      	add	sp, #16
 8005f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(rc == 0);
 8005f48:	2300      	movs	r3, #0
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fb fc52 	bl	80017f8 <__assert_func>
    if (!data_func) { return 0; }  //  If no Listener Function, then don't continue.
 8005f54:	2300      	movs	r3, #0
 8005f56:	e7f3      	b.n	8005f40 <sensor_read_internal+0x84>
    return rc;
 8005f58:	f06f 0301 	mvn.w	r3, #1
 8005f5c:	e7f0      	b.n	8005f40 <sensor_read_internal+0x84>
 8005f5e:	bf00      	nop
 8005f60:	0800d854 	.word	0x0800d854

08005f64 <remote_sensor_lookup_type>:
sensor_type_t remote_sensor_lookup_type(const char *name) {
 8005f64:	b570      	push	{r4, r5, r6, lr}
    assert(name);
 8005f66:	b158      	cbz	r0, 8005f80 <remote_sensor_lookup_type+0x1c>
 8005f68:	4606      	mov	r6, r0
    const struct sensor_type_descriptor *st = sensor_types;
 8005f6a:	4c0e      	ldr	r4, [pc, #56]	; (8005fa4 <remote_sensor_lookup_type+0x40>)
    while (st->type) {
 8005f6c:	6865      	ldr	r5, [r4, #4]
 8005f6e:	b1b5      	cbz	r5, 8005f9e <remote_sensor_lookup_type+0x3a>
        assert(st->name);
 8005f70:	6821      	ldr	r1, [r4, #0]
 8005f72:	b159      	cbz	r1, 8005f8c <remote_sensor_lookup_type+0x28>
        if (strcmp(name, st->name) == 0) { return st->type; }
 8005f74:	4630      	mov	r0, r6
 8005f76:	f7fd f8bb 	bl	80030f0 <strcmp>
 8005f7a:	b168      	cbz	r0, 8005f98 <remote_sensor_lookup_type+0x34>
        st++; 
 8005f7c:	3410      	adds	r4, #16
 8005f7e:	e7f5      	b.n	8005f6c <remote_sensor_lookup_type+0x8>
    assert(name);
 8005f80:	2300      	movs	r3, #0
 8005f82:	461a      	mov	r2, r3
 8005f84:	4619      	mov	r1, r3
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fb fc36 	bl	80017f8 <__assert_func>
        assert(st->name);
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	461a      	mov	r2, r3
 8005f90:	4619      	mov	r1, r3
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fb fc30 	bl	80017f8 <__assert_func>
        if (strcmp(name, st->name) == 0) { return st->type; }
 8005f98:	4628      	mov	r0, r5
 8005f9a:	17e9      	asrs	r1, r5, #31
 8005f9c:	e001      	b.n	8005fa2 <remote_sensor_lookup_type+0x3e>
    return 0;
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	2100      	movs	r1, #0
}
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	0800d854 	.word	0x0800d854

08005fa8 <remote_sensor_config>:
int remote_sensor_config(struct remote_sensor *dev, struct remote_sensor_cfg *cfg) {
 8005fa8:	b508      	push	{r3, lr}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 8005faa:	f110 0f70 	cmn.w	r0, #112	; 0x70
 8005fae:	d009      	beq.n	8005fc4 <remote_sensor_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
 8005fb0:	e9d1 2300 	ldrd	r2, r3, [r1]
 * @param mask The mask
 */
static inline int
sensor_set_type_mask(struct sensor *sensor, sensor_type_t mask)
{
    sensor->s_mask = mask;
 8005fb4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    dev->cfg.bc_s_mask = cfg->bc_s_mask;
 8005fb8:	e9d1 2300 	ldrd	r2, r3, [r1]
 8005fbc:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
}
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fb fc14 	bl	80017f8 <__assert_func>

08005fd0 <remote_sensor_default_cfg>:
int remote_sensor_default_cfg(struct remote_sensor_cfg *cfg) {
 8005fd0:	b430      	push	{r4, r5}
    memset(cfg, 0, sizeof(struct remote_sensor_cfg));  //  Zero the entire object.
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	6083      	str	r3, [r0, #8]
 8005fd6:	60c3      	str	r3, [r0, #12]
    cfg->bc_s_mask = SENSOR_TYPE_ALL;  //  Return all sensor values, i.e. temperature.
 8005fd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005fdc:	2500      	movs	r5, #0
 8005fde:	e9c0 4500 	strd	r4, r5, [r0]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	bc30      	pop	{r4, r5}
 8005fe6:	4770      	bx	lr

08005fe8 <remote_sensor_init>:
int remote_sensor_init(struct os_dev *dev0, void *arg) {
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!dev0) { rc = SYS_ENODEV; goto err; }
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d034      	beq.n	8006058 <remote_sensor_init+0x70>
 8005fee:	4604      	mov	r4, r0
 8005ff0:	460d      	mov	r5, r1
    rc = remote_sensor_default_cfg(&dev->cfg);
 8005ff2:	30b0      	adds	r0, #176	; 0xb0
 8005ff4:	f7ff ffec 	bl	8005fd0 <remote_sensor_default_cfg>
    if (rc) { goto err; }
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	b108      	cbz	r0, 8006000 <remote_sensor_init+0x18>
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
 8006000:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
 8006004:	4621      	mov	r1, r4
 8006006:	4630      	mov	r0, r6
 8006008:	f7fb fb39 	bl	800167e <sensor_init>
    if (rc != 0) { goto err; }
 800600c:	4603      	mov	r3, r0
 800600e:	2800      	cmp	r0, #0
 8006010:	d1f4      	bne.n	8005ffc <remote_sensor_init+0x14>
    int all_types = 0;  const struct sensor_type_descriptor *st = sensor_types;
 8006012:	4a13      	ldr	r2, [pc, #76]	; (8006060 <remote_sensor_init+0x78>)
 8006014:	e001      	b.n	800601a <remote_sensor_init+0x32>
    while (st->type) { all_types |= st->type; st++; }
 8006016:	4303      	orrs	r3, r0
 8006018:	3210      	adds	r2, #16
 800601a:	6850      	ldr	r0, [r2, #4]
 800601c:	2800      	cmp	r0, #0
 800601e:	d1fa      	bne.n	8006016 <remote_sensor_init+0x2e>
    rc = sensor_set_driver(sensor, all_types, (struct sensor_driver *) &g_sensor_driver);
 8006020:	4618      	mov	r0, r3
 8006022:	17d9      	asrs	r1, r3, #31
    sensor->s_funcs = driver;
 8006024:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <remote_sensor_init+0x7c>)
 8006026:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
 8006028:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 800602c:	682a      	ldr	r2, [r5, #0]
 800602e:	686f      	ldr	r7, [r5, #4]
 8006030:	68a8      	ldr	r0, [r5, #8]
 8006032:	68e9      	ldr	r1, [r5, #12]
 8006034:	6722      	str	r2, [r4, #112]	; 0x70
 8006036:	6767      	str	r7, [r4, #116]	; 0x74
 8006038:	67a0      	str	r0, [r4, #120]	; 0x78
 800603a:	67e1      	str	r1, [r4, #124]	; 0x7c
 800603c:	692a      	ldr	r2, [r5, #16]
 800603e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
 8006042:	4630      	mov	r0, r6
 8006044:	f7fb fb04 	bl	8001650 <sensor_mgr_register>
    if (rc != 0) { goto err; }
 8006048:	4603      	mov	r3, r0
 800604a:	2800      	cmp	r0, #0
 800604c:	d1d6      	bne.n	8005ffc <remote_sensor_init+0x14>
    OS_DEV_SETHANDLERS(dev0, sensor_open_internal, sensor_close_internal);
 800604e:	4a06      	ldr	r2, [pc, #24]	; (8006068 <remote_sensor_init+0x80>)
 8006050:	6022      	str	r2, [r4, #0]
 8006052:	4a06      	ldr	r2, [pc, #24]	; (800606c <remote_sensor_init+0x84>)
 8006054:	60e2      	str	r2, [r4, #12]
    return (0);
 8006056:	e7d1      	b.n	8005ffc <remote_sensor_init+0x14>
    if (!dev0) { rc = SYS_ENODEV; goto err; }
 8006058:	f06f 0308 	mvn.w	r3, #8
 800605c:	e7ce      	b.n	8005ffc <remote_sensor_init+0x14>
 800605e:	bf00      	nop
 8006060:	0800d854 	.word	0x0800d854
 8006064:	0800d82c 	.word	0x0800d82c
 8006068:	08005e97 	.word	0x08005e97
 800606c:	08005ded 	.word	0x08005ded

08006070 <decode_coap_payload>:
    //  Free the decoded representation.
    oc_free_rep(first_rep);
    return 0;
}

static int decode_coap_payload(uint8_t *data, uint8_t size, oc_rep_t **out_rep) {
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006072:	4606      	mov	r6, r0
 8006074:	460d      	mov	r5, r1
 8006076:	4617      	mov	r7, r2
    //  Convert data buffer to mbuf, since oc_parse_rep() only accepts mbuf.
    int rc;
    struct os_mbuf *om;

    //  Get a packet header mbuf.
    om = os_msys_get_pkthdr(MYNEWT_VAL(NRF24L01_TX_SIZE), 4);
 8006078:	2104      	movs	r1, #4
 800607a:	200c      	movs	r0, #12
 800607c:	f7fc f810 	bl	80020a0 <os_msys_get_pkthdr>
    assert(om);
 8006080:	b198      	cbz	r0, 80060aa <decode_coap_payload+0x3a>
 8006082:	4604      	mov	r4, r0
    if (!om) { return -1; }

    //  Copy data buffer into mbuf.
    rc = os_mbuf_copyinto(om, 0, data, size);
 8006084:	462b      	mov	r3, r5
 8006086:	4632      	mov	r2, r6
 8006088:	2100      	movs	r1, #0
 800608a:	f7fc fe70 	bl	8002d6e <os_mbuf_copyinto>
    if (rc) { rc = -2; goto exit; }  //  Out of mbufs.
 800608e:	b9c0      	cbnz	r0, 80060c2 <decode_coap_payload+0x52>

    //  Parse the mbuf.
    rc = oc_parse_rep(om, 0, size, out_rep);
 8006090:	463b      	mov	r3, r7
 8006092:	462a      	mov	r2, r5
 8006094:	2100      	movs	r1, #0
 8006096:	4620      	mov	r0, r4
 8006098:	f001 f87b 	bl	8007192 <oc_parse_rep>
 800609c:	4605      	mov	r5, r0
    assert(rc == 0);
 800609e:	b950      	cbnz	r0, 80060b6 <decode_coap_payload+0x46>

exit:
    //  Free the mbuf.
    os_mbuf_free_chain(om);
 80060a0:	4620      	mov	r0, r4
 80060a2:	f7fc fd1c 	bl	8002ade <os_mbuf_free_chain>
    return rc;
}
 80060a6:	4628      	mov	r0, r5
 80060a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(om);
 80060aa:	2300      	movs	r3, #0
 80060ac:	461a      	mov	r2, r3
 80060ae:	4619      	mov	r1, r3
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fb fba1 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 80060b6:	2300      	movs	r3, #0
 80060b8:	461a      	mov	r2, r3
 80060ba:	4619      	mov	r1, r3
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fb fb9b 	bl	80017f8 <__assert_func>
    if (rc) { rc = -2; goto exit; }  //  Out of mbufs.
 80060c2:	f06f 0501 	mvn.w	r5, #1
 80060c6:	e7eb      	b.n	80060a0 <decode_coap_payload+0x30>

080060c8 <process_coap_message>:
static int process_coap_message(const char *name, uint8_t *data, uint8_t size0) {
 80060c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ca:	b087      	sub	sp, #28
    assert(name);  assert(data);  assert(size0 > 0);
 80060cc:	b140      	cbz	r0, 80060e0 <process_coap_message+0x18>
 80060ce:	460c      	mov	r4, r1
 80060d0:	4611      	mov	r1, r2
 80060d2:	4606      	mov	r6, r0
 80060d4:	b154      	cbz	r4, 80060ec <process_coap_message+0x24>
 80060d6:	b17a      	cbz	r2, 80060f8 <process_coap_message+0x30>
    data[size - 1] = 0;  //  Erase sequence number.
 80060d8:	1e53      	subs	r3, r2, #1
 80060da:	2200      	movs	r2, #0
 80060dc:	54e2      	strb	r2, [r4, r3]
    while (size > 0 && data[size - 1] == 0) { size--; }  //  Discard trailing zeroes.
 80060de:	e013      	b.n	8006108 <process_coap_message+0x40>
    assert(name);  assert(data);  assert(size0 > 0);
 80060e0:	2300      	movs	r3, #0
 80060e2:	461a      	mov	r2, r3
 80060e4:	4619      	mov	r1, r3
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fb fb86 	bl	80017f8 <__assert_func>
 80060ec:	2300      	movs	r3, #0
 80060ee:	461a      	mov	r2, r3
 80060f0:	4619      	mov	r1, r3
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fb fb80 	bl	80017f8 <__assert_func>
 80060f8:	2300      	movs	r3, #0
 80060fa:	461a      	mov	r2, r3
 80060fc:	4619      	mov	r1, r3
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fb fb7a 	bl	80017f8 <__assert_func>
    while (size > 0 && data[size - 1] == 0) { size--; }  //  Discard trailing zeroes.
 8006104:	3901      	subs	r1, #1
 8006106:	b2c9      	uxtb	r1, r1
 8006108:	b121      	cbz	r1, 8006114 <process_coap_message+0x4c>
 800610a:	1863      	adds	r3, r4, r1
 800610c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d0f7      	beq.n	8006104 <process_coap_message+0x3c>
    oc_rep_t *rep = NULL;
 8006114:	aa06      	add	r2, sp, #24
 8006116:	2300      	movs	r3, #0
 8006118:	f842 3d04 	str.w	r3, [r2, #-4]!
    int rc = decode_coap_payload(data, size, &rep);
 800611c:	4620      	mov	r0, r4
 800611e:	f7ff ffa7 	bl	8006070 <decode_coap_payload>
    assert(rc == 0);
 8006122:	b9e8      	cbnz	r0, 8006160 <process_coap_message+0x98>
    oc_rep_t *first_rep = rep;
 8006124:	9f05      	ldr	r7, [sp, #20]
    while(rep) {
 8006126:	9b05      	ldr	r3, [sp, #20]
 8006128:	b393      	cbz	r3, 8006190 <process_coap_message+0xc8>
        sensor_type_t type = remote_sensor_lookup_type(oc_string(rep->name));  
 800612a:	68d8      	ldr	r0, [r3, #12]
 800612c:	f7ff ff1a 	bl	8005f64 <remote_sensor_lookup_type>
 8006130:	4604      	mov	r4, r0
 8006132:	460d      	mov	r5, r1
        assert(type);  //  Unknown field name
 8006134:	ea54 0305 	orrs.w	r3, r4, r5
 8006138:	d018      	beq.n	800616c <process_coap_message+0xa4>
        struct sensor *remote_sensor = sensor_mgr_find_next_bydevname(name, NULL);
 800613a:	2100      	movs	r1, #0
 800613c:	4630      	mov	r0, r6
 800613e:	f7fb fa2d 	bl	800159c <sensor_mgr_find_next_bydevname>
        assert(remote_sensor);  //  Sensor not found
 8006142:	b1c8      	cbz	r0, 8006178 <process_coap_message+0xb0>
        rc = sensor_read(remote_sensor, type, NULL, rep, 0);
 8006144:	2300      	movs	r3, #0
 8006146:	9302      	str	r3, [sp, #8]
 8006148:	9a05      	ldr	r2, [sp, #20]
 800614a:	9201      	str	r2, [sp, #4]
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	4622      	mov	r2, r4
 8006150:	462b      	mov	r3, r5
 8006152:	f7fb faa3 	bl	800169c <sensor_read>
        assert(rc == 0);
 8006156:	b9a8      	cbnz	r0, 8006184 <process_coap_message+0xbc>
        rep = rep->next;
 8006158:	9b05      	ldr	r3, [sp, #20]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	e7e2      	b.n	8006126 <process_coap_message+0x5e>
    assert(rc == 0);
 8006160:	2300      	movs	r3, #0
 8006162:	461a      	mov	r2, r3
 8006164:	4619      	mov	r1, r3
 8006166:	4618      	mov	r0, r3
 8006168:	f7fb fb46 	bl	80017f8 <__assert_func>
        assert(type);  //  Unknown field name
 800616c:	2300      	movs	r3, #0
 800616e:	461a      	mov	r2, r3
 8006170:	4619      	mov	r1, r3
 8006172:	4618      	mov	r0, r3
 8006174:	f7fb fb40 	bl	80017f8 <__assert_func>
        assert(remote_sensor);  //  Sensor not found
 8006178:	2300      	movs	r3, #0
 800617a:	461a      	mov	r2, r3
 800617c:	4619      	mov	r1, r3
 800617e:	4618      	mov	r0, r3
 8006180:	f7fb fb3a 	bl	80017f8 <__assert_func>
        assert(rc == 0);
 8006184:	2300      	movs	r3, #0
 8006186:	461a      	mov	r2, r3
 8006188:	4619      	mov	r1, r3
 800618a:	4618      	mov	r0, r3
 800618c:	f7fb fb34 	bl	80017f8 <__assert_func>
    oc_free_rep(first_rep);
 8006190:	4638      	mov	r0, r7
 8006192:	f000 ffc3 	bl	800711c <oc_free_rep>
}
 8006196:	2000      	movs	r0, #0
 8006198:	b007      	add	sp, #28
 800619a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800619c <receive_callback>:
static void receive_callback(struct os_event *ev) {
 800619c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const char **sensor_node_names = get_sensor_node_names();
 80061a0:	f000 fa5e 	bl	8006660 <get_sensor_node_names>
    assert(sensor_node_names);
 80061a4:	b110      	cbz	r0, 80061ac <receive_callback+0x10>
 80061a6:	4681      	mov	r9, r0
    for (i = 0; i < NRL24L01_MAX_RX_PIPES * 2; i++) {
 80061a8:	2700      	movs	r7, #0
 80061aa:	e016      	b.n	80061da <receive_callback+0x3e>
    assert(sensor_node_names);
 80061ac:	2300      	movs	r3, #0
 80061ae:	461a      	mov	r2, r3
 80061b0:	4619      	mov	r1, r3
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fb fb20 	bl	80017f8 <__assert_func>
            assert(dev != NULL);
 80061b8:	2300      	movs	r3, #0
 80061ba:	461a      	mov	r2, r3
 80061bc:	4619      	mov	r1, r3
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fb fb1a 	bl	80017f8 <__assert_func>
                assert(rxDataCnt > 0 && rxDataCnt <= MYNEWT_VAL(NRF24L01_TX_SIZE));
 80061c4:	2300      	movs	r3, #0
 80061c6:	461a      	mov	r2, r3
 80061c8:	4619      	mov	r1, r3
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fb fb14 	bl	80017f8 <__assert_func>
        const char *name = NULL;
 80061d0:	f04f 0800 	mov.w	r8, #0
        int rxDataCnt = 0;
 80061d4:	4645      	mov	r5, r8
 80061d6:	e01e      	b.n	8006216 <receive_callback+0x7a>
    for (i = 0; i < NRL24L01_MAX_RX_PIPES * 2; i++) {
 80061d8:	3701      	adds	r7, #1
 80061da:	2f09      	cmp	r7, #9
 80061dc:	dc3b      	bgt.n	8006256 <receive_callback+0xba>
            struct nrf24l01 *dev = (struct nrf24l01 *) os_dev_open(NRF24L01_DEVICE, OS_TIMEOUT_NEVER, NULL);
 80061de:	2200      	movs	r2, #0
 80061e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80061e4:	481d      	ldr	r0, [pc, #116]	; (800625c <receive_callback+0xc0>)
 80061e6:	f7fb fdd9 	bl	8001d9c <os_dev_open>
            assert(dev != NULL);
 80061ea:	4604      	mov	r4, r0
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d0e3      	beq.n	80061b8 <receive_callback+0x1c>
            pipe = nrf24l01_readable_pipe(dev);
 80061f0:	f7fe fdd7 	bl	8004da2 <nrf24l01_readable_pipe>
            if (pipe > 0) {
 80061f4:	1e06      	subs	r6, r0, #0
 80061f6:	ddeb      	ble.n	80061d0 <receive_callback+0x34>
                rxDataCnt = nrf24l01_receive(dev, pipe, rxData, MYNEWT_VAL(NRF24L01_TX_SIZE));
 80061f8:	230c      	movs	r3, #12
 80061fa:	4a19      	ldr	r2, [pc, #100]	; (8006260 <receive_callback+0xc4>)
 80061fc:	4631      	mov	r1, r6
 80061fe:	4620      	mov	r0, r4
 8006200:	f7fe fd96 	bl	8004d30 <nrf24l01_receive>
 8006204:	4605      	mov	r5, r0
                assert(rxDataCnt > 0 && rxDataCnt <= MYNEWT_VAL(NRF24L01_TX_SIZE));
 8006206:	1e43      	subs	r3, r0, #1
 8006208:	2b0b      	cmp	r3, #11
 800620a:	d8db      	bhi.n	80061c4 <receive_callback+0x28>
                name = sensor_node_names[pipe - 1];
 800620c:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
 8006210:	3b01      	subs	r3, #1
 8006212:	f859 8023 	ldr.w	r8, [r9, r3, lsl #2]
            os_dev_close((struct os_dev *) dev);
 8006216:	4620      	mov	r0, r4
 8006218:	f7fb fde2 	bl	8001de0 <os_dev_close>
        if (pipe <= 0) { break; }
 800621c:	2e00      	cmp	r6, #0
 800621e:	dd1a      	ble.n	8006256 <receive_callback+0xba>
        if (rxDataCnt > 0) { 
 8006220:	2d00      	cmp	r5, #0
 8006222:	ddd9      	ble.n	80061d8 <receive_callback+0x3c>
            console_printf("%srx ", _nrf); console_dump((const uint8_t *) rxData, rxDataCnt); console_printf("\n"); 
 8006224:	490f      	ldr	r1, [pc, #60]	; (8006264 <receive_callback+0xc8>)
 8006226:	4810      	ldr	r0, [pc, #64]	; (8006268 <receive_callback+0xcc>)
 8006228:	f000 f882 	bl	8006330 <console_printf>
 800622c:	4c0c      	ldr	r4, [pc, #48]	; (8006260 <receive_callback+0xc4>)
 800622e:	4629      	mov	r1, r5
 8006230:	4620      	mov	r0, r4
 8006232:	f000 f957 	bl	80064e4 <console_dump>
 8006236:	480d      	ldr	r0, [pc, #52]	; (800626c <receive_callback+0xd0>)
 8006238:	f000 f87a 	bl	8006330 <console_printf>
            int rc = process_coap_message(name, rxData, rxDataCnt);  //  Process the incoming message and trigger the Remote Sensor.
 800623c:	b2ea      	uxtb	r2, r5
 800623e:	4621      	mov	r1, r4
 8006240:	4640      	mov	r0, r8
 8006242:	f7ff ff41 	bl	80060c8 <process_coap_message>
            assert(rc == 0);
 8006246:	2800      	cmp	r0, #0
 8006248:	d0c6      	beq.n	80061d8 <receive_callback+0x3c>
 800624a:	2300      	movs	r3, #0
 800624c:	461a      	mov	r2, r3
 800624e:	4619      	mov	r1, r3
 8006250:	4618      	mov	r0, r3
 8006252:	f7fb fad1 	bl	80017f8 <__assert_func>
}
 8006256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800625a:	bf00      	nop
 800625c:	0800d56c 	.word	0x0800d56c
 8006260:	20002ff0 	.word	0x20002ff0
 8006264:	0800d814 	.word	0x0800d814
 8006268:	0800d8b0 	.word	0x0800d8b0
 800626c:	0800d5fc 	.word	0x0800d5fc

08006270 <remote_sensor_start>:
int remote_sensor_start(void) {
 8006270:	b510      	push	{r4, lr}
    if (!is_collector_node()) { return 0; }  //  Only start for Collector Nodes, not Sensor Nodes.
 8006272:	f000 f9cb 	bl	800660c <is_collector_node>
 8006276:	b908      	cbnz	r0, 800627c <remote_sensor_start+0xc>
}
 8006278:	2000      	movs	r0, #0
 800627a:	bd10      	pop	{r4, pc}
        struct nrf24l01 *dev = (struct nrf24l01 *) os_dev_open(NRF24L01_DEVICE, OS_TIMEOUT_NEVER, NULL);
 800627c:	2200      	movs	r2, #0
 800627e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006282:	480c      	ldr	r0, [pc, #48]	; (80062b4 <remote_sensor_start+0x44>)
 8006284:	f7fb fd8a 	bl	8001d9c <os_dev_open>
        assert(dev != NULL);
 8006288:	4604      	mov	r4, r0
 800628a:	b138      	cbz	r0, 800629c <remote_sensor_start+0x2c>
        int rc = nrf24l01_set_rx_callback(dev, receive_callback);
 800628c:	490a      	ldr	r1, [pc, #40]	; (80062b8 <remote_sensor_start+0x48>)
 800628e:	f7fe fd95 	bl	8004dbc <nrf24l01_set_rx_callback>
        assert(rc == 0);
 8006292:	b948      	cbnz	r0, 80062a8 <remote_sensor_start+0x38>
        os_dev_close((struct os_dev *) dev);        
 8006294:	4620      	mov	r0, r4
 8006296:	f7fb fda3 	bl	8001de0 <os_dev_close>
    return 0;
 800629a:	e7ed      	b.n	8006278 <remote_sensor_start+0x8>
        assert(dev != NULL);
 800629c:	2300      	movs	r3, #0
 800629e:	461a      	mov	r2, r3
 80062a0:	4619      	mov	r1, r3
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fb faa8 	bl	80017f8 <__assert_func>
        assert(rc == 0);
 80062a8:	2300      	movs	r3, #0
 80062aa:	461a      	mov	r2, r3
 80062ac:	4619      	mov	r1, r3
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fb faa2 	bl	80017f8 <__assert_func>
 80062b4:	0800d56c 	.word	0x0800d56c
 80062b8:	0800619d 	.word	0x0800619d

080062bc <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	4606      	mov	r6, r0
 80062c0:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
 80062c2:	2400      	movs	r4, #0
 80062c4:	42ac      	cmp	r4, r5
 80062c6:	da07      	bge.n	80062d8 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
 80062c8:	5d30      	ldrb	r0, [r6, r4]
 80062ca:	f000 f921 	bl	8006510 <console_out_nolock>
 80062ce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80062d2:	d001      	beq.n	80062d8 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
 80062d4:	3401      	adds	r4, #1
 80062d6:	e7f5      	b.n	80062c4 <console_write+0x8>
    }
}
 80062d8:	bd70      	pop	{r4, r5, r6, pc}

080062da <console_blocking_mode>:

void console_blocking_mode(void) {
 80062da:	b508      	push	{r3, lr}
    disable_buffer();
 80062dc:	f000 f892 	bl	8006404 <disable_buffer>
}
 80062e0:	bd08      	pop	{r3, pc}
	...

080062e4 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
 80062e4:	b510      	push	{r4, lr}
 80062e6:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 80062e8:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <console_pkg_init+0x3c>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	b193      	cbz	r3, 8006314 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
 80062ee:	480d      	ldr	r0, [pc, #52]	; (8006324 <console_pkg_init+0x40>)
 80062f0:	f7fb fd96 	bl	8001e20 <os_eventq_init>
    os_mutex_init(&console_write_lock);
 80062f4:	480c      	ldr	r0, [pc, #48]	; (8006328 <console_pkg_init+0x44>)
 80062f6:	f7fb fefd 	bl	80020f4 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
 80062fa:	f000 f927 	bl	800654c <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
 80062fe:	b138      	cbz	r0, 8006310 <console_pkg_init+0x2c>
 8006300:	2000      	movs	r0, #0
 8006302:	9000      	str	r0, [sp, #0]
 8006304:	4b09      	ldr	r3, [pc, #36]	; (800632c <console_pkg_init+0x48>)
 8006306:	681c      	ldr	r4, [r3, #0]
 8006308:	4603      	mov	r3, r0
 800630a:	4602      	mov	r2, r0
 800630c:	4601      	mov	r1, r0
 800630e:	47a0      	blx	r4
}
 8006310:	b002      	add	sp, #8
 8006312:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
 8006314:	461a      	mov	r2, r3
 8006316:	4619      	mov	r1, r3
 8006318:	4618      	mov	r0, r3
 800631a:	f7fb fa6d 	bl	80017f8 <__assert_func>
 800631e:	bf00      	nop
 8006320:	20003494 	.word	0x20003494
 8006324:	20002ffc 	.word	0x20002ffc
 8006328:	2000300c 	.word	0x2000300c
 800632c:	20000110 	.word	0x20000110

08006330 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
 8006330:	b40f      	push	{r0, r1, r2, r3}
 8006332:	b510      	push	{r4, lr}
 8006334:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
 8006336:	f000 f90b 	bl	8006550 <console_get_ticks>
 800633a:	b160      	cbz	r0, 8006356 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
 800633c:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <console_printf+0x40>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	b10b      	cbz	r3, 8006346 <console_printf+0x16>
    num_chars = 0;
 8006342:	2400      	movs	r4, #0
 8006344:	e008      	b.n	8006358 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
 8006346:	f7fc fa31 	bl	80027ac <os_time_get>
 800634a:	4601      	mov	r1, r0
 800634c:	4809      	ldr	r0, [pc, #36]	; (8006374 <console_printf+0x44>)
 800634e:	f006 fbff 	bl	800cb50 <printf>
 8006352:	4604      	mov	r4, r0
 8006354:	e000      	b.n	8006358 <console_printf+0x28>
    num_chars = 0;
 8006356:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
 8006358:	a905      	add	r1, sp, #20
 800635a:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
 800635c:	9804      	ldr	r0, [sp, #16]
 800635e:	f006 fc27 	bl	800cbb0 <vprintf>
    va_end(args);

    return num_chars;
}
 8006362:	4420      	add	r0, r4
 8006364:	b002      	add	sp, #8
 8006366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800636a:	b004      	add	sp, #16
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	20003594 	.word	0x20003594
 8006374:	0800d8b8 	.word	0x0800d8b8

08006378 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
 8006378:	4b07      	ldr	r3, [pc, #28]	; (8006398 <__semihost+0x20>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	b143      	cbz	r3, 8006390 <__semihost+0x18>
static int __semihost(int command, void* message) {
 800637e:	b410      	push	{r4}
 8006380:	4602      	mov	r2, r0
 8006382:	460c      	mov	r4, r1
    __asm( 
 8006384:	4610      	mov	r0, r2
 8006386:	4621      	mov	r1, r4
 8006388:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
 800638a:	2000      	movs	r0, #0
}
 800638c:	bc10      	pop	{r4}
 800638e:	4770      	bx	lr
    if (!log_enabled) return -1;
 8006390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	200001b8 	.word	0x200001b8

0800639c <semihost_write>:
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
    if (length == 0) { return 0; }
 800639c:	b90a      	cbnz	r2, 80063a2 <semihost_write+0x6>
 800639e:	2000      	movs	r0, #0
    uint32_t args[3];
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
}
 80063a0:	4770      	bx	lr
static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
 80063a2:	b500      	push	{lr}
 80063a4:	b085      	sub	sp, #20
    args[0] = (uint32_t)fh;
 80063a6:	9001      	str	r0, [sp, #4]
    args[1] = (uint32_t)buffer;
 80063a8:	9102      	str	r1, [sp, #8]
    args[2] = (uint32_t)length;
 80063aa:	9203      	str	r2, [sp, #12]
    return __semihost(SYS_WRITE, args);
 80063ac:	a901      	add	r1, sp, #4
 80063ae:	2005      	movs	r0, #5
 80063b0:	f7ff ffe2 	bl	8006378 <__semihost>
}
 80063b4:	b005      	add	sp, #20
 80063b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080063bc <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
 80063bc:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 80063be:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <console_flush+0x3c>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	b1bb      	cbz	r3, 80063f4 <console_flush+0x38>
    if (!semihost_mbuf) { return; }  //  Buffer is empty, nothing to write.
 80063c4:	4b0d      	ldr	r3, [pc, #52]	; (80063fc <console_flush+0x40>)
 80063c6:	681d      	ldr	r5, [r3, #0]
 80063c8:	b1a5      	cbz	r5, 80063f4 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80063ca:	4b0d      	ldr	r3, [pc, #52]	; (8006400 <console_flush+0x44>)
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }  //  Don't flush if we are called during an interrupt.
 80063d2:	b97b      	cbnz	r3, 80063f4 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
 80063d4:	4b09      	ldr	r3, [pc, #36]	; (80063fc <console_flush+0x40>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
 80063da:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
 80063dc:	e005      	b.n	80063ea <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
 80063de:	88e2      	ldrh	r2, [r4, #6]
 80063e0:	6821      	ldr	r1, [r4, #0]
 80063e2:	2002      	movs	r0, #2
 80063e4:	f7ff ffda 	bl	800639c <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
 80063e8:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
 80063ea:	2c00      	cmp	r4, #0
 80063ec:	d1f7      	bne.n	80063de <console_flush+0x22>
    }
    os_mbuf_free_chain(old);  //  Deallocate the old chain.
 80063ee:	4628      	mov	r0, r5
 80063f0:	f7fc fb75 	bl	8002ade <os_mbuf_free_chain>
}
 80063f4:	bd38      	pop	{r3, r4, r5, pc}
 80063f6:	bf00      	nop
 80063f8:	200001b8 	.word	0x200001b8
 80063fc:	20003018 	.word	0x20003018
 8006400:	e000ed00 	.word	0xe000ed00

08006404 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
 8006404:	b508      	push	{r3, lr}
 8006406:	f7ff ffd9 	bl	80063bc <console_flush>
 800640a:	bd08      	pop	{r3, pc}

0800640c <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
 800640c:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
    int rc;
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 800640e:	4b10      	ldr	r3, [pc, #64]	; (8006450 <console_buffer+0x44>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	b163      	cbz	r3, 800642e <console_buffer+0x22>
 8006414:	460d      	mov	r5, r1
 8006416:	4604      	mov	r4, r0
    if (!semihost_mbuf) {  //  Allocate mbuf if not already allocated.
 8006418:	4b0e      	ldr	r3, [pc, #56]	; (8006454 <console_buffer+0x48>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	b143      	cbz	r3, 8006430 <console_buffer+0x24>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
    }
    //  Limit the buffer size.  Quit if too big.
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
 800641e:	4b0d      	ldr	r3, [pc, #52]	; (8006454 <console_buffer+0x48>)
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	f7fc fb6e 	bl	8002b02 <os_mbuf_len>
 8006426:	4428      	add	r0, r5
 8006428:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800642c:	d309      	bcc.n	8006442 <console_buffer+0x36>
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
}
 800642e:	bd38      	pop	{r3, r4, r5, pc}
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
 8006430:	2100      	movs	r1, #0
 8006432:	b2a8      	uxth	r0, r5
 8006434:	f7fb fe34 	bl	80020a0 <os_msys_get_pkthdr>
 8006438:	4b06      	ldr	r3, [pc, #24]	; (8006454 <console_buffer+0x48>)
 800643a:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
 800643c:	2800      	cmp	r0, #0
 800643e:	d1ee      	bne.n	800641e <console_buffer+0x12>
 8006440:	e7f5      	b.n	800642e <console_buffer+0x22>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
 8006442:	b2aa      	uxth	r2, r5
 8006444:	4621      	mov	r1, r4
 8006446:	4b03      	ldr	r3, [pc, #12]	; (8006454 <console_buffer+0x48>)
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	f7fc fb64 	bl	8002b16 <os_mbuf_append>
 800644e:	e7ee      	b.n	800642e <console_buffer+0x22>
 8006450:	200001b8 	.word	0x200001b8
 8006454:	20003018 	.word	0x20003018

08006458 <semihosting_console_write_ch>:
	//  Append "length" number of bytes from "buffer" to the output buffer in hex format.
    if (buffer == NULL || len == 0) { return; }
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
}

static void semihosting_console_write_ch(char c) {
 8006458:	b500      	push	{lr}
 800645a:	b083      	sub	sp, #12
 800645c:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
 8006460:	280d      	cmp	r0, #13
 8006462:	d004      	beq.n	800646e <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
 8006464:	2101      	movs	r1, #1
 8006466:	f10d 0007 	add.w	r0, sp, #7
 800646a:	f7ff ffcf 	bl	800640c <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
 800646e:	b003      	add	sp, #12
 8006470:	f85d fb04 	ldr.w	pc, [sp], #4

08006474 <console_printhex>:
void console_printhex(uint8_t v) {
 8006474:	b510      	push	{r4, lr}
 8006476:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 8006478:	2310      	movs	r3, #16
    int length = 0;
 800647a:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 800647c:	e005      	b.n	800648a <console_printhex+0x16>
        v = v % divisor;
 800647e:	fbb0 f1f3 	udiv	r1, r0, r3
 8006482:	fb03 0011 	mls	r0, r3, r1, r0
 8006486:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 8006488:	091b      	lsrs	r3, r3, #4
 800648a:	b18b      	cbz	r3, 80064b0 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
 800648c:	fbb0 f4f3 	udiv	r4, r0, r3
 8006490:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8006494:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8006496:	2939      	cmp	r1, #57	; 0x39
 8006498:	d902      	bls.n	80064a0 <console_printhex+0x2c>
 800649a:	f104 0157 	add.w	r1, r4, #87	; 0x57
 800649e:	b2c9      	uxtb	r1, r1
            if (length < size) {
 80064a0:	2a02      	cmp	r2, #2
 80064a2:	dcec      	bgt.n	800647e <console_printhex+0xa>
                buffer[length++] = digit;
 80064a4:	ac02      	add	r4, sp, #8
 80064a6:	4414      	add	r4, r2
 80064a8:	f804 1c04 	strb.w	r1, [r4, #-4]
 80064ac:	3201      	adds	r2, #1
 80064ae:	e7e6      	b.n	800647e <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
 80064b0:	b92a      	cbnz	r2, 80064be <console_printhex+0x4a>
 80064b2:	ab02      	add	r3, sp, #8
 80064b4:	4413      	add	r3, r2
 80064b6:	2130      	movs	r1, #48	; 0x30
 80064b8:	f803 1c04 	strb.w	r1, [r3, #-4]
 80064bc:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
 80064be:	2a02      	cmp	r2, #2
 80064c0:	dc04      	bgt.n	80064cc <console_printhex+0x58>
 80064c2:	ab02      	add	r3, sp, #8
 80064c4:	441a      	add	r2, r3
 80064c6:	2300      	movs	r3, #0
 80064c8:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 80064cc:	2300      	movs	r3, #0
 80064ce:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
 80064d2:	a801      	add	r0, sp, #4
 80064d4:	f005 fffc 	bl	800c4d0 <strlen>
 80064d8:	4601      	mov	r1, r0
 80064da:	a801      	add	r0, sp, #4
 80064dc:	f7ff ff96 	bl	800640c <console_buffer>
}
 80064e0:	b002      	add	sp, #8
 80064e2:	bd10      	pop	{r4, pc}

080064e4 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
 80064e4:	b180      	cbz	r0, 8006508 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
 80064e6:	b570      	push	{r4, r5, r6, lr}
 80064e8:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
 80064ea:	b161      	cbz	r1, 8006506 <console_dump+0x22>
 80064ec:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
 80064ee:	2400      	movs	r4, #0
 80064f0:	e007      	b.n	8006502 <console_dump+0x1e>
 80064f2:	5d30      	ldrb	r0, [r6, r4]
 80064f4:	f7ff ffbe 	bl	8006474 <console_printhex>
 80064f8:	2101      	movs	r1, #1
 80064fa:	4804      	ldr	r0, [pc, #16]	; (800650c <console_dump+0x28>)
 80064fc:	f7ff ff86 	bl	800640c <console_buffer>
 8006500:	3401      	adds	r4, #1
 8006502:	42ac      	cmp	r4, r5
 8006504:	d3f5      	bcc.n	80064f2 <console_dump+0xe>
}
 8006506:	bd70      	pop	{r4, r5, r6, pc}
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	0800d660 	.word	0x0800d660

08006510 <console_out_nolock>:

int console_out_nolock(int character) {
 8006510:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
 8006512:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
 8006514:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <console_out_nolock+0x34>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	b953      	cbnz	r3, 8006530 <console_out_nolock+0x20>
 800651a:	4604      	mov	r4, r0
    if ('\n' == c) {
 800651c:	2d0a      	cmp	r5, #10
 800651e:	d009      	beq.n	8006534 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
 8006520:	4b09      	ldr	r3, [pc, #36]	; (8006548 <console_out_nolock+0x38>)
 8006522:	2201      	movs	r2, #1
 8006524:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
 8006526:	4628      	mov	r0, r5
 8006528:	f7ff ff96 	bl	8006458 <semihosting_console_write_ch>
    return character;
 800652c:	4620      	mov	r0, r4
}
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
 8006532:	e7fc      	b.n	800652e <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
 8006534:	200d      	movs	r0, #13
 8006536:	f7ff ff8f 	bl	8006458 <semihosting_console_write_ch>
        console_is_midline = 0;
 800653a:	4b03      	ldr	r3, [pc, #12]	; (8006548 <console_out_nolock+0x38>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	e7f1      	b.n	8006526 <console_out_nolock+0x16>
 8006542:	bf00      	nop
 8006544:	20003599 	.word	0x20003599
 8006548:	20003594 	.word	0x20003594

0800654c <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
 800654c:	2000      	movs	r0, #0
 800654e:	4770      	bx	lr

08006550 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
 8006550:	4b01      	ldr	r3, [pc, #4]	; (8006558 <console_get_ticks+0x8>)
 8006552:	7818      	ldrb	r0, [r3, #0]
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	2000301c 	.word	0x2000301c

0800655c <init_sensor_coap>:


///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

void init_sensor_coap(void) {
 800655c:	b508      	push	{r3, lr}
    //  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
 800655e:	2101      	movs	r1, #1
 8006560:	4806      	ldr	r0, [pc, #24]	; (800657c <init_sensor_coap+0x20>)
 8006562:	f005 ff01 	bl	800c368 <os_sem_init>
    assert(rc == OS_OK);
 8006566:	b918      	cbnz	r0, 8006570 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
 8006568:	4b05      	ldr	r3, [pc, #20]	; (8006580 <init_sensor_coap+0x24>)
 800656a:	2201      	movs	r2, #1
 800656c:	701a      	strb	r2, [r3, #0]
}
 800656e:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
 8006570:	2300      	movs	r3, #0
 8006572:	461a      	mov	r2, r3
 8006574:	4619      	mov	r1, r3
 8006576:	4618      	mov	r0, r3
 8006578:	f7fb f93e 	bl	80017f8 <__assert_func>
 800657c:	20003020 	.word	0x20003020
 8006580:	20003028 	.word	0x20003028

08006584 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
 8006584:	4b04      	ldr	r3, [pc, #16]	; (8006598 <is_sensor_node+0x14>)
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	4313      	orrs	r3, r2
 800658c:	d101      	bne.n	8006592 <is_sensor_node+0xe>
    return false;
 800658e:	2000      	movs	r0, #0
}
 8006590:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
 8006592:	2001      	movs	r0, #1
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	20003068 	.word	0x20003068

0800659c <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
 800659c:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
 800659e:	4b16      	ldr	r3, [pc, #88]	; (80065f8 <get_hardware_id+0x5c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	b10b      	cbz	r3, 80065a8 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
 80065a4:	4815      	ldr	r0, [pc, #84]	; (80065fc <get_hardware_id+0x60>)
 80065a6:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 80065a8:	f004 f89f 	bl	800a6ea <hal_bsp_hw_id_len>
 80065ac:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <get_hardware_id+0x5c>)
 80065ae:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 80065b0:	280b      	cmp	r0, #11
 80065b2:	d914      	bls.n	80065de <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 80065b4:	210c      	movs	r1, #12
 80065b6:	4811      	ldr	r0, [pc, #68]	; (80065fc <get_hardware_id+0x60>)
 80065b8:	f004 f89a 	bl	800a6f0 <hal_bsp_hw_id>
 80065bc:	4b0e      	ldr	r3, [pc, #56]	; (80065f8 <get_hardware_id+0x5c>)
 80065be:	6018      	str	r0, [r3, #0]
 80065c0:	2800      	cmp	r0, #0
 80065c2:	dd12      	ble.n	80065ea <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
 80065c4:	490e      	ldr	r1, [pc, #56]	; (8006600 <get_hardware_id+0x64>)
 80065c6:	480f      	ldr	r0, [pc, #60]	; (8006604 <get_hardware_id+0x68>)
 80065c8:	f7ff feb2 	bl	8006330 <console_printf>
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <get_hardware_id+0x5c>)
 80065ce:	6819      	ldr	r1, [r3, #0]
 80065d0:	480a      	ldr	r0, [pc, #40]	; (80065fc <get_hardware_id+0x60>)
 80065d2:	f7ff ff87 	bl	80064e4 <console_dump>
 80065d6:	480c      	ldr	r0, [pc, #48]	; (8006608 <get_hardware_id+0x6c>)
 80065d8:	f7ff feaa 	bl	8006330 <console_printf>
 80065dc:	e7e2      	b.n	80065a4 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 80065de:	2300      	movs	r3, #0
 80065e0:	461a      	mov	r2, r3
 80065e2:	4619      	mov	r1, r3
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fb f907 	bl	80017f8 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 80065ea:	2300      	movs	r3, #0
 80065ec:	461a      	mov	r2, r3
 80065ee:	4619      	mov	r1, r3
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fb f901 	bl	80017f8 <__assert_func>
 80065f6:	bf00      	nop
 80065f8:	20003038 	.word	0x20003038
 80065fc:	2000302c 	.word	0x2000302c
 8006600:	0800d950 	.word	0x0800d950
 8006604:	0800d908 	.word	0x0800d908
 8006608:	0800d5fc 	.word	0x0800d5fc

0800660c <is_collector_node>:
bool is_collector_node(void) {
 800660c:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
 800660e:	f7ff ffc5 	bl	800659c <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
 8006612:	220c      	movs	r2, #12
 8006614:	4903      	ldr	r1, [pc, #12]	; (8006624 <is_collector_node+0x18>)
 8006616:	f7fc fd2f 	bl	8003078 <memcmp>
 800661a:	b108      	cbz	r0, 8006620 <is_collector_node+0x14>
    return false; 
 800661c:	2000      	movs	r0, #0
}
 800661e:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
 8006620:	2001      	movs	r0, #1
 8006622:	e7fc      	b.n	800661e <is_collector_node+0x12>
 8006624:	0800d8c0 	.word	0x0800d8c0

08006628 <is_standalone_node>:
bool is_standalone_node(void) {
 8006628:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
 800662a:	f7ff ffef 	bl	800660c <is_collector_node>
 800662e:	b928      	cbnz	r0, 800663c <is_standalone_node+0x14>
 8006630:	4604      	mov	r4, r0
 8006632:	f7ff ffa7 	bl	8006584 <is_sensor_node>
 8006636:	b910      	cbnz	r0, 800663e <is_standalone_node+0x16>
 8006638:	2401      	movs	r4, #1
 800663a:	e000      	b.n	800663e <is_standalone_node+0x16>
    return false;
 800663c:	2400      	movs	r4, #0
}
 800663e:	4620      	mov	r0, r4
 8006640:	bd10      	pop	{r4, pc}

08006642 <get_collector_node_address>:
#endif  //  MYNEWT_VAL(ESP8266)
    return device_id_text;
}

//  Return the Collector Node address for this Sensor Network.
unsigned long long get_collector_node_address(void) { return COLLECTOR_NODE_ADDRESS; }
 8006642:	f04f 3078 	mov.w	r0, #2021161080	; 0x78787878
 8006646:	2178      	movs	r1, #120	; 0x78
 8006648:	4770      	bx	lr
	...

0800664c <get_sensor_node_address>:

//  Return the Sensor Node address for this node, if this is a Sensor Node.
unsigned long long get_sensor_node_address(void) { return sensor_node_address; }
 800664c:	4b01      	ldr	r3, [pc, #4]	; (8006654 <get_sensor_node_address+0x8>)
 800664e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006652:	4770      	bx	lr
 8006654:	20003068 	.word	0x20003068

08006658 <get_sensor_node_addresses>:

//  Return the list of Sensor Node addresses for this Sensor Network.
const unsigned long long *get_sensor_node_addresses(void) { return sensor_node_addresses; }
 8006658:	4800      	ldr	r0, [pc, #0]	; (800665c <get_sensor_node_addresses+0x4>)
 800665a:	4770      	bx	lr
 800665c:	0800d970 	.word	0x0800d970

08006660 <get_sensor_node_names>:

//  Return the list of Sensor Node names for this Sensor Network.
const char **get_sensor_node_names(void) { return sensor_node_names; }
 8006660:	4800      	ldr	r0, [pc, #0]	; (8006664 <get_sensor_node_names+0x4>)
 8006662:	4770      	bx	lr
 8006664:	200001bc 	.word	0x200001bc

08006668 <sensor_network_init>:

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
 8006668:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 800666a:	2400      	movs	r4, #0
 800666c:	2c04      	cmp	r4, #4
 800666e:	dc15      	bgt.n	800669c <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
 8006670:	4b23      	ldr	r3, [pc, #140]	; (8006700 <sensor_network_init+0x98>)
 8006672:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	4922      	ldr	r1, [pc, #136]	; (8006704 <sensor_network_init+0x9c>)
 800667c:	4822      	ldr	r0, [pc, #136]	; (8006708 <sensor_network_init+0xa0>)
 800667e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8006682:	f005 ff07 	bl	800c494 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
 8006686:	3001      	adds	r0, #1
 8006688:	280b      	cmp	r0, #11
 800668a:	dc01      	bgt.n	8006690 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 800668c:	3401      	adds	r4, #1
 800668e:	e7ed      	b.n	800666c <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
 8006690:	2300      	movs	r3, #0
 8006692:	461a      	mov	r2, r3
 8006694:	4619      	mov	r1, r3
 8006696:	4618      	mov	r0, r3
 8006698:	f7fb f8ae 	bl	80017f8 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
 800669c:	f7ff ff7e 	bl	800659c <get_hardware_id>
 80066a0:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 80066a2:	2400      	movs	r4, #0
 80066a4:	2c04      	cmp	r4, #4
 80066a6:	dc19      	bgt.n	80066dc <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
 80066a8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80066ac:	0093      	lsls	r3, r2, #2
 80066ae:	220c      	movs	r2, #12
 80066b0:	4916      	ldr	r1, [pc, #88]	; (800670c <sensor_network_init+0xa4>)
 80066b2:	4419      	add	r1, r3
 80066b4:	4628      	mov	r0, r5
 80066b6:	f7fc fcdf 	bl	8003078 <memcmp>
 80066ba:	b108      	cbz	r0, 80066c0 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 80066bc:	3401      	adds	r4, #1
 80066be:	e7f1      	b.n	80066a4 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
 80066c0:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <sensor_network_init+0x98>)
 80066c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066ca:	4b11      	ldr	r3, [pc, #68]	; (8006710 <sensor_network_init+0xa8>)
 80066cc:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
 80066d0:	1c63      	adds	r3, r4, #1
 80066d2:	4a10      	ldr	r2, [pc, #64]	; (8006714 <sensor_network_init+0xac>)
 80066d4:	4910      	ldr	r1, [pc, #64]	; (8006718 <sensor_network_init+0xb0>)
 80066d6:	4811      	ldr	r0, [pc, #68]	; (800671c <sensor_network_init+0xb4>)
 80066d8:	f7ff fe2a 	bl	8006330 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
 80066dc:	f7ff ff96 	bl	800660c <is_collector_node>
 80066e0:	b940      	cbnz	r0, 80066f4 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
 80066e2:	f7ff ffa1 	bl	8006628 <is_standalone_node>
 80066e6:	b150      	cbz	r0, 80066fe <sensor_network_init+0x96>
 80066e8:	4a0a      	ldr	r2, [pc, #40]	; (8006714 <sensor_network_init+0xac>)
 80066ea:	490b      	ldr	r1, [pc, #44]	; (8006718 <sensor_network_init+0xb0>)
 80066ec:	480c      	ldr	r0, [pc, #48]	; (8006720 <sensor_network_init+0xb8>)
 80066ee:	f7ff fe1f 	bl	8006330 <console_printf>
}
 80066f2:	e004      	b.n	80066fe <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
 80066f4:	4a07      	ldr	r2, [pc, #28]	; (8006714 <sensor_network_init+0xac>)
 80066f6:	4908      	ldr	r1, [pc, #32]	; (8006718 <sensor_network_init+0xb0>)
 80066f8:	480a      	ldr	r0, [pc, #40]	; (8006724 <sensor_network_init+0xbc>)
 80066fa:	f7ff fe19 	bl	8006330 <console_printf>
}
 80066fe:	bd38      	pop	{r3, r4, r5, pc}
 8006700:	0800d970 	.word	0x0800d970
 8006704:	0800d910 	.word	0x0800d910
 8006708:	200001bc 	.word	0x200001bc
 800670c:	0800d8cc 	.word	0x0800d8cc
 8006710:	20003068 	.word	0x20003068
 8006714:	0800d918 	.word	0x0800d918
 8006718:	0800d950 	.word	0x0800d950
 800671c:	0800d920 	.word	0x0800d920
 8006720:	0800d940 	.word	0x0800d940
 8006724:	0800d930 	.word	0x0800d930

08006728 <sensor_network_register_interface>:

int sensor_network_register_interface(const struct sensor_network_interface *iface) {
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  Register the Network Interface (e.g. ESP8266, nRF24L01) for the Sensor Network.
    assert(iface);
 800672a:	2800      	cmp	r0, #0
 800672c:	d033      	beq.n	8006796 <sensor_network_register_interface+0x6e>
 800672e:	4603      	mov	r3, r0
    uint8_t i = iface->iface_type;  assert(i >= 0 && i < MAX_INTERFACE_TYPES);
 8006730:	7802      	ldrb	r2, [r0, #0]
 8006732:	2a01      	cmp	r2, #1
 8006734:	d835      	bhi.n	80067a2 <sensor_network_register_interface+0x7a>
    assert(iface->network_device);  assert(iface->server_endpoint_size);  assert(iface->register_transport_func);
 8006736:	6841      	ldr	r1, [r0, #4]
 8006738:	2900      	cmp	r1, #0
 800673a:	d038      	beq.n	80067ae <sensor_network_register_interface+0x86>
 800673c:	7a01      	ldrb	r1, [r0, #8]
 800673e:	2900      	cmp	r1, #0
 8006740:	d03b      	beq.n	80067ba <sensor_network_register_interface+0x92>
 8006742:	68c0      	ldr	r0, [r0, #12]
 8006744:	2800      	cmp	r0, #0
 8006746:	d03e      	beq.n	80067c6 <sensor_network_register_interface+0x9e>
    assert(iface->server_endpoint_size <= MAX_ENDPOINT_SIZE);     //  Need to increase MAX_ENDPOINT_SIZE.
 8006748:	2910      	cmp	r1, #16
 800674a:	d842      	bhi.n	80067d2 <sensor_network_register_interface+0xaa>
    assert(sensor_network_interfaces[i].network_device == NULL);  //  Interface already registered.
 800674c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006750:	0088      	lsls	r0, r1, #2
 8006752:	4926      	ldr	r1, [pc, #152]	; (80067ec <sensor_network_register_interface+0xc4>)
 8006754:	4401      	add	r1, r0
 8006756:	6849      	ldr	r1, [r1, #4]
 8006758:	2900      	cmp	r1, #0
 800675a:	d140      	bne.n	80067de <sensor_network_register_interface+0xb6>
    memcpy(&sensor_network_interfaces[i], iface, sizeof(struct sensor_network_interface));  //  Copy the interface.
 800675c:	4d23      	ldr	r5, [pc, #140]	; (80067ec <sensor_network_register_interface+0xc4>)
 800675e:	0091      	lsls	r1, r2, #2
 8006760:	4411      	add	r1, r2
 8006762:	008c      	lsls	r4, r1, #2
 8006764:	1929      	adds	r1, r5, r4
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800676c:	689f      	ldr	r7, [r3, #8]
 800676e:	68de      	ldr	r6, [r3, #12]
 8006770:	5128      	str	r0, [r5, r4]
 8006772:	f8c1 c004 	str.w	ip, [r1, #4]
 8006776:	608f      	str	r7, [r1, #8]
 8006778:	60ce      	str	r6, [r1, #12]
 800677a:	6918      	ldr	r0, [r3, #16]
 800677c:	6108      	str	r0, [r1, #16]
    sensor_network_interfaces[i].transport_registered = 0;        //  We defer the registration of the transport till first use.
 800677e:	2400      	movs	r4, #0
 8006780:	740c      	strb	r4, [r1, #16]
    console_printf("%s%s %s\n", _net, sensor_network_shortname[i], sensor_network_interfaces[i].network_device);
 8006782:	684b      	ldr	r3, [r1, #4]
 8006784:	491a      	ldr	r1, [pc, #104]	; (80067f0 <sensor_network_register_interface+0xc8>)
 8006786:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800678a:	491a      	ldr	r1, [pc, #104]	; (80067f4 <sensor_network_register_interface+0xcc>)
 800678c:	481a      	ldr	r0, [pc, #104]	; (80067f8 <sensor_network_register_interface+0xd0>)
 800678e:	f7ff fdcf 	bl	8006330 <console_printf>
    return 0;
}
 8006792:	4620      	mov	r0, r4
 8006794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(iface);
 8006796:	2300      	movs	r3, #0
 8006798:	461a      	mov	r2, r3
 800679a:	4619      	mov	r1, r3
 800679c:	4618      	mov	r0, r3
 800679e:	f7fb f82b 	bl	80017f8 <__assert_func>
    uint8_t i = iface->iface_type;  assert(i >= 0 && i < MAX_INTERFACE_TYPES);
 80067a2:	2300      	movs	r3, #0
 80067a4:	461a      	mov	r2, r3
 80067a6:	4619      	mov	r1, r3
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fb f825 	bl	80017f8 <__assert_func>
    assert(iface->network_device);  assert(iface->server_endpoint_size);  assert(iface->register_transport_func);
 80067ae:	2300      	movs	r3, #0
 80067b0:	461a      	mov	r2, r3
 80067b2:	4619      	mov	r1, r3
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fb f81f 	bl	80017f8 <__assert_func>
 80067ba:	2300      	movs	r3, #0
 80067bc:	461a      	mov	r2, r3
 80067be:	4619      	mov	r1, r3
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fb f819 	bl	80017f8 <__assert_func>
 80067c6:	2300      	movs	r3, #0
 80067c8:	461a      	mov	r2, r3
 80067ca:	4619      	mov	r1, r3
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fb f813 	bl	80017f8 <__assert_func>
    assert(iface->server_endpoint_size <= MAX_ENDPOINT_SIZE);     //  Need to increase MAX_ENDPOINT_SIZE.
 80067d2:	2300      	movs	r3, #0
 80067d4:	461a      	mov	r2, r3
 80067d6:	4619      	mov	r1, r3
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fb f80d 	bl	80017f8 <__assert_func>
    assert(sensor_network_interfaces[i].network_device == NULL);  //  Interface already registered.
 80067de:	2300      	movs	r3, #0
 80067e0:	461a      	mov	r2, r3
 80067e2:	4619      	mov	r1, r3
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fb f807 	bl	80017f8 <__assert_func>
 80067ea:	bf00      	nop
 80067ec:	2000303c 	.word	0x2000303c
 80067f0:	0800d964 	.word	0x0800d964
 80067f4:	0800d950 	.word	0x0800d950
 80067f8:	0800d958 	.word	0x0800d958

080067fc <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
 80067fc:	b530      	push	{r4, r5, lr}
 80067fe:	b087      	sub	sp, #28
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 8006800:	2200      	movs	r2, #0
 8006802:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006806:	4810      	ldr	r0, [pc, #64]	; (8006848 <config_device+0x4c>)
 8006808:	f7fb fac8 	bl	8001d9c <os_dev_open>
    assert(dev != NULL);
 800680c:	b178      	cbz	r0, 800682e <config_device+0x32>
 800680e:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
 8006810:	4668      	mov	r0, sp
 8006812:	f000 f8b9 	bl	8006988 <temp_stm32_default_cfg>
    assert(rc == 0);
 8006816:	b980      	cbnz	r0, 800683a <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 8006818:	4669      	mov	r1, sp
 800681a:	4620      	mov	r0, r4
 800681c:	f000 f9b0 	bl	8006b80 <temp_stm32_config>
 8006820:	4605      	mov	r5, r0
    os_dev_close(dev);
 8006822:	4620      	mov	r0, r4
 8006824:	f7fb fadc 	bl	8001de0 <os_dev_close>
    return rc;
}
 8006828:	4628      	mov	r0, r5
 800682a:	b007      	add	sp, #28
 800682c:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
 800682e:	2300      	movs	r3, #0
 8006830:	461a      	mov	r2, r3
 8006832:	4619      	mov	r1, r3
 8006834:	4618      	mov	r0, r3
 8006836:	f7fa ffdf 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 800683a:	2300      	movs	r3, #0
 800683c:	461a      	mov	r2, r3
 800683e:	4619      	mov	r1, r3
 8006840:	4618      	mov	r0, r3
 8006842:	f7fa ffd9 	bl	80017f8 <__assert_func>
 8006846:	bf00      	nop
 8006848:	0800d524 	.word	0x0800d524

0800684c <temp_stm32_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 800684c:	b500      	push	{lr}
 800684e:	b083      	sub	sp, #12
    console_printf("TMP create " DEVICE_NAME "\n");
 8006850:	480f      	ldr	r0, [pc, #60]	; (8006890 <temp_stm32_create+0x44>)
 8006852:	f7ff fd6d 	bl	8006330 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <temp_stm32_create+0x48>)
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <temp_stm32_create+0x4c>)
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	2300      	movs	r3, #0
 8006860:	2201      	movs	r2, #1
 8006862:	490e      	ldr	r1, [pc, #56]	; (800689c <temp_stm32_create+0x50>)
 8006864:	480e      	ldr	r0, [pc, #56]	; (80068a0 <temp_stm32_create+0x54>)
 8006866:	f7fb fa53 	bl	8001d10 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
 800686a:	b928      	cbnz	r0, 8006878 <temp_stm32_create+0x2c>

    //  Configure the device.
    rc = config_device();
 800686c:	f7ff ffc6 	bl	80067fc <config_device>
    assert(rc == 0);
 8006870:	b940      	cbnz	r0, 8006884 <temp_stm32_create+0x38>
}
 8006872:	b003      	add	sp, #12
 8006874:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 8006878:	2300      	movs	r3, #0
 800687a:	461a      	mov	r2, r3
 800687c:	4619      	mov	r1, r3
 800687e:	4618      	mov	r0, r3
 8006880:	f7fa ffba 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 8006884:	2300      	movs	r3, #0
 8006886:	461a      	mov	r2, r3
 8006888:	4619      	mov	r1, r3
 800688a:	4618      	mov	r0, r3
 800688c:	f7fa ffb4 	bl	80017f8 <__assert_func>
 8006890:	0800d9a0 	.word	0x0800d9a0
 8006894:	200030a8 	.word	0x200030a8
 8006898:	080069b5 	.word	0x080069b5
 800689c:	0800d524 	.word	0x0800d524
 80068a0:	200030c0 	.word	0x200030c0

080068a4 <temp_stm32_sensor_get_config>:

static int temp_stm32_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
 80068a4:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
 80068a8:	2100      	movs	r1, #0
 80068aa:	ea50 0301 	orrs.w	r3, r0, r1
 80068ae:	d004      	beq.n	80068ba <temp_stm32_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
 80068b0:	9b00      	ldr	r3, [sp, #0]
 80068b2:	2201      	movs	r2, #1
 80068b4:	701a      	strb	r2, [r3, #0]
    return (0);
 80068b6:	2000      	movs	r0, #0
 80068b8:	4770      	bx	lr
err:
    return (rc);
 80068ba:	f06f 0001 	mvn.w	r0, #1
}
 80068be:	4770      	bx	lr

080068c0 <temp_stm32_close>:
    if (dev->adc) {
 80068c0:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
 80068c4:	b14b      	cbz	r3, 80068da <temp_stm32_close+0x1a>
static int temp_stm32_close(struct os_dev *dev0) {
 80068c6:	b510      	push	{r4, lr}
 80068c8:	4604      	mov	r4, r0
        os_dev_close((struct os_dev *) dev->adc);
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fb fa88 	bl	8001de0 <os_dev_close>
        dev->adc = NULL;
 80068d0:	2300      	movs	r3, #0
 80068d2:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
}
 80068d6:	2000      	movs	r0, #0
 80068d8:	bd10      	pop	{r4, pc}
 80068da:	2000      	movs	r0, #0
 80068dc:	4770      	bx	lr
	...

080068e0 <temp_stm32_open>:
static int temp_stm32_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 80068e0:	b510      	push	{r4, lr}
    dev = (struct temp_stm32 *) dev0;  assert(dev);  
 80068e2:	b308      	cbz	r0, 8006928 <temp_stm32_open+0x48>
 80068e4:	4604      	mov	r4, r0
    cfg = &dev->cfg; assert(cfg); assert(cfg->adc_channel);  assert(cfg->adc_channel_cfg);  assert(cfg->adc_dev_name);
 80068e6:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
 80068ea:	d023      	beq.n	8006934 <temp_stm32_open+0x54>
 80068ec:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
 80068f0:	b333      	cbz	r3, 8006940 <temp_stm32_open+0x60>
 80068f2:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 80068f6:	b343      	cbz	r3, 800694a <temp_stm32_open+0x6a>
 80068f8:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 80068fc:	b350      	cbz	r0, 8006954 <temp_stm32_open+0x74>
    dev->adc = (struct adc_dev *) os_dev_open(cfg->adc_dev_name, timeout, cfg->adc_open_arg);
 80068fe:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 8006902:	f7fb fa4b 	bl	8001d9c <os_dev_open>
 8006906:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    assert(dev->adc);
 800690a:	b348      	cbz	r0, 8006960 <temp_stm32_open+0x80>
    console_printf("ADC open ch 16\n");  ////
 800690c:	481d      	ldr	r0, [pc, #116]	; (8006984 <temp_stm32_open+0xa4>)
 800690e:	f7ff fd0f 	bl	8006330 <console_printf>
    rc = adc_chan_config(dev->adc, cfg->adc_channel, cfg->adc_channel_cfg);
 8006912:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8006916:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
 800691a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 800691e:	f002 fa27 	bl	8008d70 <adc_chan_config>
    if (rc) { 
 8006922:	bb18      	cbnz	r0, 800696c <temp_stm32_open+0x8c>
}
 8006924:	2000      	movs	r0, #0
 8006926:	bd10      	pop	{r4, pc}
    dev = (struct temp_stm32 *) dev0;  assert(dev);  
 8006928:	2300      	movs	r3, #0
 800692a:	461a      	mov	r2, r3
 800692c:	4619      	mov	r1, r3
 800692e:	4618      	mov	r0, r3
 8006930:	f7fa ff62 	bl	80017f8 <__assert_func>
    cfg = &dev->cfg; assert(cfg); assert(cfg->adc_channel);  assert(cfg->adc_channel_cfg);  assert(cfg->adc_dev_name);
 8006934:	2300      	movs	r3, #0
 8006936:	461a      	mov	r2, r3
 8006938:	4619      	mov	r1, r3
 800693a:	4618      	mov	r0, r3
 800693c:	f7fa ff5c 	bl	80017f8 <__assert_func>
 8006940:	461a      	mov	r2, r3
 8006942:	4619      	mov	r1, r3
 8006944:	4618      	mov	r0, r3
 8006946:	f7fa ff57 	bl	80017f8 <__assert_func>
 800694a:	461a      	mov	r2, r3
 800694c:	4619      	mov	r1, r3
 800694e:	4618      	mov	r0, r3
 8006950:	f7fa ff52 	bl	80017f8 <__assert_func>
 8006954:	2300      	movs	r3, #0
 8006956:	461a      	mov	r2, r3
 8006958:	4619      	mov	r1, r3
 800695a:	4618      	mov	r0, r3
 800695c:	f7fa ff4c 	bl	80017f8 <__assert_func>
    assert(dev->adc);
 8006960:	2300      	movs	r3, #0
 8006962:	461a      	mov	r2, r3
 8006964:	4619      	mov	r1, r3
 8006966:	4618      	mov	r0, r3
 8006968:	f7fa ff46 	bl	80017f8 <__assert_func>
        if (dev->adc) { os_dev_close((struct os_dev *) dev->adc); }
 800696c:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8006970:	b108      	cbz	r0, 8006976 <temp_stm32_open+0x96>
 8006972:	f7fb fa35 	bl	8001de0 <os_dev_close>
    assert(rc == 0);
 8006976:	2300      	movs	r3, #0
 8006978:	461a      	mov	r2, r3
 800697a:	4619      	mov	r1, r3
 800697c:	4618      	mov	r0, r3
 800697e:	f7fa ff3b 	bl	80017f8 <__assert_func>
 8006982:	bf00      	nop
 8006984:	0800da00 	.word	0x0800da00

08006988 <temp_stm32_default_cfg>:
int temp_stm32_default_cfg(struct temp_stm32_cfg *cfg) {
 8006988:	b430      	push	{r4, r5}
 800698a:	4603      	mov	r3, r0
    memset(cfg, 0, sizeof(struct temp_stm32_cfg));  //  Zero the entire object.
 800698c:	2000      	movs	r0, #0
 800698e:	60d8      	str	r0, [r3, #12]
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
 8006990:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006994:	2500      	movs	r5, #0
 8006996:	e9c3 4500 	strd	r4, r5, [r3]
    cfg->adc_dev_name    = STM32F1_ADC1_DEVICE;     //  For STM32F1: adc1
 800699a:	4a04      	ldr	r2, [pc, #16]	; (80069ac <temp_stm32_default_cfg+0x24>)
 800699c:	609a      	str	r2, [r3, #8]
    cfg->adc_channel     = ADC_CHANNEL_TEMPSENSOR;  //  For STM32F1: 16
 800699e:	2210      	movs	r2, #16
 80069a0:	731a      	strb	r2, [r3, #12]
    cfg->adc_open_arg    = NULL;
 80069a2:	6118      	str	r0, [r3, #16]
    cfg->adc_channel_cfg = &temp_channel_config;    //  Configure the temperature channel.
 80069a4:	4a02      	ldr	r2, [pc, #8]	; (80069b0 <temp_stm32_default_cfg+0x28>)
 80069a6:	615a      	str	r2, [r3, #20]
}
 80069a8:	bc30      	pop	{r4, r5}
 80069aa:	4770      	bx	lr
 80069ac:	0800d22c 	.word	0x0800d22c
 80069b0:	200001d0 	.word	0x200001d0

080069b4 <temp_stm32_init>:
int temp_stm32_init(struct os_dev *dev0, void *arg) {
 80069b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 80069b6:	b391      	cbz	r1, 8006a1e <temp_stm32_init+0x6a>
 80069b8:	460d      	mov	r5, r1
 80069ba:	b398      	cbz	r0, 8006a24 <temp_stm32_init+0x70>
 80069bc:	4604      	mov	r4, r0
    dev->adc = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
    rc = temp_stm32_default_cfg(&dev->cfg);
 80069c4:	30b0      	adds	r0, #176	; 0xb0
 80069c6:	f7ff ffdf 	bl	8006988 <temp_stm32_default_cfg>
    if (rc) { goto err; }
 80069ca:	4603      	mov	r3, r0
 80069cc:	b108      	cbz	r0, 80069d2 <temp_stm32_init+0x1e>
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
 80069d2:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
 80069d6:	4621      	mov	r1, r4
 80069d8:	4630      	mov	r0, r6
 80069da:	f7fa fe50 	bl	800167e <sensor_init>
    if (rc != 0) { goto err; }
 80069de:	4603      	mov	r3, r0
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d1f4      	bne.n	80069ce <temp_stm32_init+0x1a>
    sensor->s_funcs = driver;
 80069e4:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <temp_stm32_init+0x78>)
 80069e6:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
 80069e8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80069ec:	2300      	movs	r3, #0
 80069ee:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 80069f2:	682a      	ldr	r2, [r5, #0]
 80069f4:	686f      	ldr	r7, [r5, #4]
 80069f6:	68a8      	ldr	r0, [r5, #8]
 80069f8:	68e9      	ldr	r1, [r5, #12]
 80069fa:	6722      	str	r2, [r4, #112]	; 0x70
 80069fc:	6767      	str	r7, [r4, #116]	; 0x74
 80069fe:	67a0      	str	r0, [r4, #120]	; 0x78
 8006a00:	67e1      	str	r1, [r4, #124]	; 0x7c
 8006a02:	692a      	ldr	r2, [r5, #16]
 8006a04:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f7fa fe21 	bl	8001650 <sensor_mgr_register>
    if (rc != 0) { goto err; }
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d1dc      	bne.n	80069ce <temp_stm32_init+0x1a>
    OS_DEV_SETHANDLERS(dev0, temp_stm32_open, temp_stm32_close);
 8006a14:	4a06      	ldr	r2, [pc, #24]	; (8006a30 <temp_stm32_init+0x7c>)
 8006a16:	6022      	str	r2, [r4, #0]
 8006a18:	4a06      	ldr	r2, [pc, #24]	; (8006a34 <temp_stm32_init+0x80>)
 8006a1a:	60e2      	str	r2, [r4, #12]
    return (0);
 8006a1c:	e7d7      	b.n	80069ce <temp_stm32_init+0x1a>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 8006a1e:	f06f 0308 	mvn.w	r3, #8
 8006a22:	e7d4      	b.n	80069ce <temp_stm32_init+0x1a>
 8006a24:	f06f 0308 	mvn.w	r3, #8
 8006a28:	e7d1      	b.n	80069ce <temp_stm32_init+0x1a>
 8006a2a:	bf00      	nop
 8006a2c:	0800d9bc 	.word	0x0800d9bc
 8006a30:	080068e1 	.word	0x080068e1
 8006a34:	080068c1 	.word	0x080068c1

08006a38 <temp_stm32_get_raw_temperature>:
int temp_stm32_get_raw_temperature(struct temp_stm32 *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
 8006a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a3c:	b082      	sub	sp, #8
 8006a3e:	4680      	mov	r8, r0
 8006a40:	4689      	mov	r9, r1
 8006a42:	4617      	mov	r7, r2
 8006a44:	469a      	mov	sl, r3
    console_printf("STM read int temp sensor\n");  ////
 8006a46:	482b      	ldr	r0, [pc, #172]	; (8006af4 <temp_stm32_get_raw_temperature+0xbc>)
 8006a48:	f7ff fc72 	bl	8006330 <console_printf>
    assert(dev->adc);  assert(temp_sum);
 8006a4c:	f8d8 30cc 	ldr.w	r3, [r8, #204]	; 0xcc
 8006a50:	b12b      	cbz	r3, 8006a5e <temp_stm32_get_raw_temperature+0x26>
 8006a52:	b14f      	cbz	r7, 8006a68 <temp_stm32_get_raw_temperature+0x30>
    *temp_sum = 0;
 8006a54:	2500      	movs	r5, #0
 8006a56:	603d      	str	r5, [r7, #0]
    uint8_t lastdiff = 0;  //  Delta between current raw temperature and previous raw temperature
 8006a58:	462e      	mov	r6, r5
    int lasttemp = 0;      //  Previous raw temperature
 8006a5a:	462c      	mov	r4, r5
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 8006a5c:	e01c      	b.n	8006a98 <temp_stm32_get_raw_temperature+0x60>
    assert(dev->adc);  assert(temp_sum);
 8006a5e:	461a      	mov	r2, r3
 8006a60:	4619      	mov	r1, r3
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fa fec8 	bl	80017f8 <__assert_func>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fa fec2 	bl	80017f8 <__assert_func>
        assert(rc == 0);
 8006a74:	2300      	movs	r3, #0
 8006a76:	461a      	mov	r2, r3
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fa febc 	bl	80017f8 <__assert_func>
        assert(rawtemp > 0);  //  If equals 0, it means we haven't sampled any values.  Check the above note.
 8006a80:	2300      	movs	r3, #0
 8006a82:	461a      	mov	r2, r3
 8006a84:	4619      	mov	r1, r3
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fa feb6 	bl	80017f8 <__assert_func>
        *temp_sum += rawtemp;  //  Accumulate the raw temperature.
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	9c01      	ldr	r4, [sp, #4]
 8006a90:	4421      	add	r1, r4
 8006a92:	6039      	str	r1, [r7, #0]
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 8006a94:	3501      	adds	r5, #1
        lastdiff = diff;
 8006a96:	4616      	mov	r6, r2
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 8006a98:	454d      	cmp	r5, r9
 8006a9a:	da26      	bge.n	8006aea <temp_stm32_get_raw_temperature+0xb2>
        rawtemp = -1;
 8006a9c:	aa02      	add	r2, sp, #8
 8006a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006aa2:	f842 3d04 	str.w	r3, [r2, #-4]!
        rc = adc_read_channel(dev->adc, ADC_CHANNEL_TEMPSENSOR, &rawtemp);
 8006aa6:	f8d8 00cc 	ldr.w	r0, [r8, #204]	; 0xcc
 * @return 0 on success, non-zero error code on failure
 */
static inline int
adc_read_channel(struct adc_dev *dev, uint8_t ch, int *result)
{
    return (dev->ad_funcs->af_read_channel(dev, ch, result));
 8006aaa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2110      	movs	r1, #16
 8006ab0:	4798      	blx	r3
        assert(rc == 0);
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d1de      	bne.n	8006a74 <temp_stm32_get_raw_temperature+0x3c>
        assert(rawtemp > 0);  //  If equals 0, it means we haven't sampled any values.  Check the above note.
 8006ab6:	9a01      	ldr	r2, [sp, #4]
 8006ab8:	2a00      	cmp	r2, #0
 8006aba:	dde1      	ble.n	8006a80 <temp_stm32_get_raw_temperature+0x48>
        uint8_t diff = (rawtemp - lasttemp) & 0xf;  //  Delta between this and last reading, keeping lower 4 bits.
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	b2e4      	uxtb	r4, r4
 8006ac0:	1b12      	subs	r2, r2, r4
 8006ac2:	f002 020f 	and.w	r2, r2, #15
        if (i % 2 == 1) {
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	f005 0301 	and.w	r3, r5, #1
 8006acc:	bfb8      	it	lt
 8006ace:	425b      	neglt	r3, r3
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d1db      	bne.n	8006a8c <temp_stm32_get_raw_temperature+0x54>
            uint8_t i2 = i >> 1;  //  i2 is (i / 2)
 8006ad4:	106b      	asrs	r3, r5, #1
            uint8_t b = diff + (lastdiff << 4);    //  Combine current delta (4 bits) and previous delta (4 bits) to make 8 bits.
 8006ad6:	eb02 1606 	add.w	r6, r2, r6, lsl #4
 8006ada:	b2f6      	uxtb	r6, r6
            if (temp_diff) { temp_diff[i2] = b; }  //  Save the combined delta into temp_diff as entropy.
 8006adc:	f1ba 0f00 	cmp.w	sl, #0
 8006ae0:	d0d4      	beq.n	8006a8c <temp_stm32_get_raw_temperature+0x54>
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f80a 6003 	strb.w	r6, [sl, r3]
 8006ae8:	e7d0      	b.n	8006a8c <temp_stm32_get_raw_temperature+0x54>
}
 8006aea:	2000      	movs	r0, #0
 8006aec:	b002      	add	sp, #8
 8006aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af2:	bf00      	nop
 8006af4:	0800d9e4 	.word	0x0800d9e4

08006af8 <temp_stm32_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	b086      	sub	sp, #24
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 8006afc:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
 8006b00:	2500      	movs	r5, #0
 8006b02:	ea54 0305 	orrs.w	r3, r4, r5
 8006b06:	d038      	beq.n	8006b7a <temp_stm32_sensor_read+0x82>
 8006b08:	4604      	mov	r4, r0
    dev = (struct temp_stm32 *) SENSOR_GET_DEVICE(sensor); assert(dev);
 8006b0a:	6805      	ldr	r5, [r0, #0]
 8006b0c:	b165      	cbz	r5, 8006b28 <temp_stm32_sensor_read+0x30>
    rawtemp = -1;
 8006b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b12:	9303      	str	r3, [sp, #12]
        rc = temp_stm32_open((struct os_dev *) dev, 0, NULL);
 8006b14:	2200      	movs	r2, #0
 8006b16:	4611      	mov	r1, r2
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f7ff fee1 	bl	80068e0 <temp_stm32_open>
        if (rc) { goto err; }
 8006b1e:	4606      	mov	r6, r0
 8006b20:	b140      	cbz	r0, 8006b34 <temp_stm32_sensor_read+0x3c>
}
 8006b22:	4630      	mov	r0, r6
 8006b24:	b006      	add	sp, #24
 8006b26:	bd70      	pop	{r4, r5, r6, pc}
    dev = (struct temp_stm32 *) SENSOR_GET_DEVICE(sensor); assert(dev);
 8006b28:	2300      	movs	r3, #0
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7fa fe62 	bl	80017f8 <__assert_func>
        rc = temp_stm32_get_raw_temperature(dev, 1, &rawtemp, NULL);
 8006b34:	2300      	movs	r3, #0
 8006b36:	aa03      	add	r2, sp, #12
 8006b38:	2101      	movs	r1, #1
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f7ff ff7c 	bl	8006a38 <temp_stm32_get_raw_temperature>
 8006b40:	4606      	mov	r6, r0
        temp_stm32_close((struct os_dev *) dev);
 8006b42:	4628      	mov	r0, r5
 8006b44:	f7ff febc 	bl	80068c0 <temp_stm32_close>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
 8006b48:	2e00      	cmp	r6, #0
 8006b4a:	d1ea      	bne.n	8006b22 <temp_stm32_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	9304      	str	r3, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
 8006b50:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8006b54:	f043 0301 	orr.w	r3, r3, #1
 8006b58:	f88d 3014 	strb.w	r3, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
 8006b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0df      	beq.n	8006b22 <temp_stm32_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
 8006b62:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006b66:	2300      	movs	r3, #0
 8006b68:	e9cd 2300 	strd	r2, r3, [sp]
 8006b6c:	aa04      	add	r2, sp, #16
 8006b6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b70:	4620      	mov	r0, r4
 8006b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b74:	4798      	blx	r3
 8006b76:	4606      	mov	r6, r0
 8006b78:	e7d3      	b.n	8006b22 <temp_stm32_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 8006b7a:	f06f 0601 	mvn.w	r6, #1
 8006b7e:	e7d0      	b.n	8006b22 <temp_stm32_sensor_read+0x2a>

08006b80 <temp_stm32_config>:
 * @param Sensor device temp_stm32 structure
 * @param Sensor device temp_stm32_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stm32_config(struct temp_stm32 *dev, struct temp_stm32_cfg *cfg) {
 8006b80:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 8006b82:	f110 0f70 	cmn.w	r0, #112	; 0x70
 8006b86:	d009      	beq.n	8006b9c <temp_stm32_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
 8006b88:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
 8006b8c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
 8006b90:	e9d1 2300 	ldrd	r2, r3, [r1]
 8006b94:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
 8006b98:	2000      	movs	r0, #0
 8006b9a:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fa fe28 	bl	80017f8 <__assert_func>

08006ba8 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
 8006ba8:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
 8006baa:	e002      	b.n	8006bb2 <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fbab 	bl	8007308 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
 8006bb2:	4808      	ldr	r0, [pc, #32]	; (8006bd4 <oc_buffer_tx+0x2c>)
 8006bb4:	f7fb ff3d 	bl	8002a32 <os_mqueue_get>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	b148      	cbz	r0, 8006bd0 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
 8006bc0:	7e1a      	ldrb	r2, [r3, #24]
 8006bc2:	f012 0f08 	tst.w	r2, #8
 8006bc6:	d0f1      	beq.n	8006bac <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f000 fbad 	bl	8007328 <oc_send_multicast_message>
 8006bce:	e7f0      	b.n	8006bb2 <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
 8006bd0:	bd08      	pop	{r3, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200031a8 	.word	0x200031a8

08006bd8 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
 8006bd8:	b500      	push	{lr}
 8006bda:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
 8006bdc:	4808      	ldr	r0, [pc, #32]	; (8006c00 <oc_buffer_rx+0x28>)
 8006bde:	f7fb ff28 	bl	8002a32 <os_mqueue_get>
 8006be2:	9001      	str	r0, [sp, #4]
 8006be4:	b140      	cbz	r0, 8006bf8 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
 8006be6:	a801      	add	r0, sp, #4
 8006be8:	f000 fe32 	bl	8007850 <__wrap_coap_receive>
#endif
        if (m) {
 8006bec:	9801      	ldr	r0, [sp, #4]
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d0f4      	beq.n	8006bdc <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
 8006bf2:	f7fb ff74 	bl	8002ade <os_mbuf_free_chain>
 8006bf6:	e7f1      	b.n	8006bdc <oc_buffer_rx+0x4>
        }
    }
}
 8006bf8:	b003      	add	sp, #12
 8006bfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8006bfe:	bf00      	nop
 8006c00:	20003190 	.word	0x20003190

08006c04 <oc_buffer_init>:

void
oc_buffer_init(void)
{
 8006c04:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
 8006c06:	2200      	movs	r2, #0
 8006c08:	4904      	ldr	r1, [pc, #16]	; (8006c1c <oc_buffer_init+0x18>)
 8006c0a:	4805      	ldr	r0, [pc, #20]	; (8006c20 <oc_buffer_init+0x1c>)
 8006c0c:	f7fb ff08 	bl	8002a20 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
 8006c10:	2200      	movs	r2, #0
 8006c12:	4904      	ldr	r1, [pc, #16]	; (8006c24 <oc_buffer_init+0x20>)
 8006c14:	4804      	ldr	r0, [pc, #16]	; (8006c28 <oc_buffer_init+0x24>)
 8006c16:	f7fb ff03 	bl	8002a20 <os_mqueue_init>
}
 8006c1a:	bd08      	pop	{r3, pc}
 8006c1c:	08006bd9 	.word	0x08006bd9
 8006c20:	20003190 	.word	0x20003190
 8006c24:	08006ba9 	.word	0x08006ba9
 8006c28:	200031a8 	.word	0x200031a8

08006c2c <_free_rep>:
    return rep;
}

static void
_free_rep(oc_rep_t *rep_value)
{
 8006c2c:	b508      	push	{r3, lr}
    os_memblock_put(&oc_rep_objects, rep_value);
 8006c2e:	4601      	mov	r1, r0
 8006c30:	4801      	ldr	r0, [pc, #4]	; (8006c38 <_free_rep+0xc>)
 8006c32:	f7fb f9b9 	bl	8001fa8 <os_memblock_put>
}
 8006c36:	bd08      	pop	{r3, pc}
 8006c38:	200031c0 	.word	0x200031c0

08006c3c <_alloc_rep>:
{
 8006c3c:	b508      	push	{r3, lr}
    oc_rep_t *rep = os_memblock_get(&oc_rep_objects);
 8006c3e:	4805      	ldr	r0, [pc, #20]	; (8006c54 <_alloc_rep+0x18>)
 8006c40:	f7fb f98a 	bl	8001f58 <os_memblock_get>
    memset(rep, 0, sizeof(*rep));
 8006c44:	2200      	movs	r2, #0
 8006c46:	6002      	str	r2, [r0, #0]
 8006c48:	6042      	str	r2, [r0, #4]
 8006c4a:	6082      	str	r2, [r0, #8]
 8006c4c:	60c2      	str	r2, [r0, #12]
 8006c4e:	6102      	str	r2, [r0, #16]
 8006c50:	6142      	str	r2, [r0, #20]
}
 8006c52:	bd08      	pop	{r3, pc}
 8006c54:	200031c0 	.word	0x200031c0

08006c58 <oc_parse_rep_value>:
*/

/* Parse single property */
static void
oc_parse_rep_value(CborValue *value, oc_rep_t **rep, CborError *err)
{
 8006c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c5c:	b08e      	sub	sp, #56	; 0x38
 8006c5e:	4606      	mov	r6, r0
 8006c60:	460f      	mov	r7, r1
 8006c62:	4614      	mov	r4, r2
  size_t k, len;
  CborValue map, array;
  *rep = _alloc_rep();
 8006c64:	f7ff ffea 	bl	8006c3c <_alloc_rep>
 8006c68:	4605      	mov	r5, r0
 8006c6a:	6038      	str	r0, [r7, #0]
  oc_rep_t *cur = *rep, **prev = 0;
  cur->next = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	6043      	str	r3, [r0, #4]
  cur->value_object_array = 0;
 8006c70:	6103      	str	r3, [r0, #16]
  /* key */
  *err |= cbor_value_calculate_string_length(value, &len);
 8006c72:	a90d      	add	r1, sp, #52	; 0x34
 8006c74:	4630      	mov	r0, r6
 8006c76:	f001 ffe7 	bl	8008c48 <cbor_value_calculate_string_length>
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	4318      	orrs	r0, r3
 8006c7e:	6020      	str	r0, [r4, #0]
  len++;
 8006c80:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006c82:	3101      	adds	r1, #1
 8006c84:	910d      	str	r1, [sp, #52]	; 0x34
  oc_alloc_string(&cur->name, len);
 8006c86:	f105 0008 	add.w	r0, r5, #8
 8006c8a:	f000 fb8a 	bl	80073a2 <oc_alloc_string>
  *err |= cbor_value_copy_text_string(value, oc_string(cur->name), &len, NULL);
 8006c8e:	68e9      	ldr	r1, [r5, #12]

/* Strings */
CBOR_INLINE_API bool cbor_value_is_byte_string(const CborValue *value)
{ return value->type == CborByteStringType; }
CBOR_INLINE_API bool cbor_value_is_text_string(const CborValue *value)
{ return value->type == CborTextStringType; }
 8006c90:	7bb3      	ldrb	r3, [r6, #14]
CBOR_API CborError cbor_value_calculate_string_length(const CborValue *value, size_t *length);

CBOR_INLINE_API CborError cbor_value_copy_text_string(const CborValue *value, char *buffer,
                                                      size_t *buflen, CborValue *next)
{
    assert(cbor_value_is_text_string(value));
 8006c92:	2b60      	cmp	r3, #96	; 0x60
 8006c94:	d131      	bne.n	8006cfa <oc_parse_rep_value+0xa2>
    return _cbor_value_copy_string(value, buffer, buflen, next);
 8006c96:	2300      	movs	r3, #0
 8006c98:	aa0d      	add	r2, sp, #52	; 0x34
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f001 ff62 	bl	8008b64 <_cbor_value_copy_string>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	4318      	orrs	r0, r3
 8006ca4:	6020      	str	r0, [r4, #0]
  *err |= cbor_value_advance(value);
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	f001 ffbc 	bl	8008c24 <cbor_value_advance>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	4318      	orrs	r0, r3
 8006cb0:	6020      	str	r0, [r4, #0]
  /* value */
  switch (value->type) {
 8006cb2:	7bb3      	ldrb	r3, [r6, #14]
 8006cb4:	2b80      	cmp	r3, #128	; 0x80
 8006cb6:	f000 80cf 	beq.w	8006e58 <oc_parse_rep_value+0x200>
 8006cba:	d824      	bhi.n	8006d06 <oc_parse_rep_value+0xae>
 8006cbc:	2b40      	cmp	r3, #64	; 0x40
 8006cbe:	d06f      	beq.n	8006da0 <oc_parse_rep_value+0x148>
 8006cc0:	2b60      	cmp	r3, #96	; 0x60
 8006cc2:	f000 8090 	beq.w	8006de6 <oc_parse_rep_value+0x18e>
 8006cc6:	b9ab      	cbnz	r3, 8006cf4 <oc_parse_rep_value+0x9c>
{ return value->type == CborIntegerType; }
 8006cc8:	7bb3      	ldrb	r3, [r6, #14]
    assert(cbor_value_is_integer(value));
 8006cca:	bb63      	cbnz	r3, 8006d26 <oc_parse_rep_value+0xce>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
 8006ccc:	7bf3      	ldrb	r3, [r6, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
 8006cce:	f013 0f01 	tst.w	r3, #1
 8006cd2:	d12e      	bne.n	8006d32 <oc_parse_rep_value+0xda>
 8006cd4:	89b7      	ldrh	r7, [r6, #12]
 8006cd6:	f04f 0800 	mov.w	r8, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
 8006cda:	e9c5 7804 	strd	r7, r8, [r5, #16]
    if (value->flags & CborIteratorFlag_NegativeInteger)
 8006cde:	7bf3      	ldrb	r3, [r6, #15]
 8006ce0:	f013 0f02 	tst.w	r3, #2
 8006ce4:	d004      	beq.n	8006cf0 <oc_parse_rep_value+0x98>
        *result = -*result - 1;
 8006ce6:	43f8      	mvns	r0, r7
 8006ce8:	ea6f 0108 	mvn.w	r1, r8
 8006cec:	e9c5 0104 	strd	r0, r1, [r5, #16]
  case CborIntegerType:
    *err |= cbor_value_get_int64(value, &cur->value_int);
    cur->type = INT;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	702b      	strb	r3, [r5, #0]
    }
    break;
  default:
    break;
  }
}
 8006cf4:	b00e      	add	sp, #56	; 0x38
 8006cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(cbor_value_is_text_string(value));
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fa fd79 	bl	80017f8 <__assert_func>
  switch (value->type) {
 8006d06:	2bf5      	cmp	r3, #245	; 0xf5
 8006d08:	d019      	beq.n	8006d3e <oc_parse_rep_value+0xe6>
 8006d0a:	2bfb      	cmp	r3, #251	; 0xfb
 8006d0c:	d027      	beq.n	8006d5e <oc_parse_rep_value+0x106>
 8006d0e:	2ba0      	cmp	r3, #160	; 0xa0
 8006d10:	d1f0      	bne.n	8006cf4 <oc_parse_rep_value+0x9c>
    oc_rep_t **obj = &cur->value_object; // object points to list of properties
 8006d12:	f105 0710 	add.w	r7, r5, #16
    *err |= cbor_value_enter_container(value, &map);
 8006d16:	a909      	add	r1, sp, #36	; 0x24
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f001 fe68 	bl	80089ee <cbor_value_enter_container>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	4318      	orrs	r0, r3
 8006d22:	6020      	str	r0, [r4, #0]
    while (!cbor_value_at_end(&map)) {
 8006d24:	e092      	b.n	8006e4c <oc_parse_rep_value+0x1f4>
    assert(cbor_value_is_integer(value));
 8006d26:	2300      	movs	r3, #0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fa fd63 	bl	80017f8 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
 8006d32:	4630      	mov	r0, r6
 8006d34:	f001 fe0f 	bl	8008956 <_cbor_value_decode_int64_internal>
 8006d38:	4607      	mov	r7, r0
 8006d3a:	4688      	mov	r8, r1
 8006d3c:	e7cd      	b.n	8006cda <oc_parse_rep_value+0x82>
    assert(cbor_value_is_boolean(value));
 8006d3e:	2bf5      	cmp	r3, #245	; 0xf5
 8006d40:	d107      	bne.n	8006d52 <oc_parse_rep_value+0xfa>
    *result = !!value->extra;
 8006d42:	89b3      	ldrh	r3, [r6, #12]
 8006d44:	3300      	adds	r3, #0
 8006d46:	bf18      	it	ne
 8006d48:	2301      	movne	r3, #1
 8006d4a:	742b      	strb	r3, [r5, #16]
    cur->type = BOOL;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	702b      	strb	r3, [r5, #0]
    break;
 8006d50:	e7d0      	b.n	8006cf4 <oc_parse_rep_value+0x9c>
    assert(cbor_value_is_boolean(value));
 8006d52:	2300      	movs	r3, #0
 8006d54:	461a      	mov	r2, r3
 8006d56:	4619      	mov	r1, r3
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7fa fd4d 	bl	80017f8 <__assert_func>
    *err |= cbor_value_get_double(value, &cur->value_double);
 8006d5e:	f105 0410 	add.w	r4, r5, #16
    memcpy(result, &data, sizeof(*result));
    return CborNoError;
}

CBOR_INLINE_API bool cbor_value_is_double(const CborValue *value)
{ return value->type == CborDoubleType; }
 8006d62:	7bb3      	ldrb	r3, [r6, #14]
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
    assert(cbor_value_is_double(value));
 8006d64:	2bfb      	cmp	r3, #251	; 0xfb
 8006d66:	d10f      	bne.n	8006d88 <oc_parse_rep_value+0x130>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
 8006d68:	7bf3      	ldrb	r3, [r6, #15]
 8006d6a:	f013 0f01 	tst.w	r3, #1
 8006d6e:	d011      	beq.n	8006d94 <oc_parse_rep_value+0x13c>
    uint64_t data = _cbor_value_decode_int64_internal(value);
 8006d70:	4630      	mov	r0, r6
 8006d72:	f001 fdf0 	bl	8008956 <_cbor_value_decode_int64_internal>
 8006d76:	ab0e      	add	r3, sp, #56	; 0x38
 8006d78:	e963 010e 	strd	r0, r1, [r3, #-56]!	; 0x38
    memcpy(result, &data, sizeof(*result));
 8006d7c:	cb03      	ldmia	r3!, {r0, r1}
 8006d7e:	6128      	str	r0, [r5, #16]
 8006d80:	6061      	str	r1, [r4, #4]
    cur->type = DOUBLE;
 8006d82:	2302      	movs	r3, #2
 8006d84:	702b      	strb	r3, [r5, #0]
    break;
 8006d86:	e7b5      	b.n	8006cf4 <oc_parse_rep_value+0x9c>
    assert(cbor_value_is_double(value));
 8006d88:	2300      	movs	r3, #0
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fa fd32 	bl	80017f8 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
 8006d94:	2300      	movs	r3, #0
 8006d96:	461a      	mov	r2, r3
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fa fd2c 	bl	80017f8 <__assert_func>
    *err |= cbor_value_calculate_string_length(value, &len);
 8006da0:	a90d      	add	r1, sp, #52	; 0x34
 8006da2:	4630      	mov	r0, r6
 8006da4:	f001 ff50 	bl	8008c48 <cbor_value_calculate_string_length>
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	4318      	orrs	r0, r3
 8006dac:	6020      	str	r0, [r4, #0]
    len++;
 8006dae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006db0:	3101      	adds	r1, #1
 8006db2:	910d      	str	r1, [sp, #52]	; 0x34
    oc_alloc_string(&cur->value_string, len);
 8006db4:	f105 0010 	add.w	r0, r5, #16
 8006db8:	f000 faf3 	bl	80073a2 <oc_alloc_string>
    *err |= cbor_value_copy_byte_string(value,
 8006dbc:	6969      	ldr	r1, [r5, #20]
{ return value->type == CborByteStringType; }
 8006dbe:	7bb3      	ldrb	r3, [r6, #14]
    assert(cbor_value_is_byte_string(value));
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	d10a      	bne.n	8006dda <oc_parse_rep_value+0x182>
    return _cbor_value_copy_string(value, buffer, buflen, next);
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	aa0d      	add	r2, sp, #52	; 0x34
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f001 fecb 	bl	8008b64 <_cbor_value_copy_string>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	4318      	orrs	r0, r3
 8006dd2:	6020      	str	r0, [r4, #0]
    cur->type = BYTE_STRING;
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	702b      	strb	r3, [r5, #0]
    break;
 8006dd8:	e78c      	b.n	8006cf4 <oc_parse_rep_value+0x9c>
    assert(cbor_value_is_byte_string(value));
 8006dda:	2300      	movs	r3, #0
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4619      	mov	r1, r3
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fa fd09 	bl	80017f8 <__assert_func>
    *err |= cbor_value_calculate_string_length(value, &len);
 8006de6:	a90d      	add	r1, sp, #52	; 0x34
 8006de8:	4630      	mov	r0, r6
 8006dea:	f001 ff2d 	bl	8008c48 <cbor_value_calculate_string_length>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	4318      	orrs	r0, r3
 8006df2:	6020      	str	r0, [r4, #0]
    len++;
 8006df4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006df6:	3101      	adds	r1, #1
 8006df8:	910d      	str	r1, [sp, #52]	; 0x34
    oc_alloc_string(&cur->value_string, len);
 8006dfa:	f105 0010 	add.w	r0, r5, #16
 8006dfe:	f000 fad0 	bl	80073a2 <oc_alloc_string>
    *err |= cbor_value_copy_text_string(value, oc_string(cur->value_string),
 8006e02:	6969      	ldr	r1, [r5, #20]
{ return value->type == CborTextStringType; }
 8006e04:	7bb3      	ldrb	r3, [r6, #14]
    assert(cbor_value_is_text_string(value));
 8006e06:	2b60      	cmp	r3, #96	; 0x60
 8006e08:	d10a      	bne.n	8006e20 <oc_parse_rep_value+0x1c8>
    return _cbor_value_copy_string(value, buffer, buflen, next);
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	aa0d      	add	r2, sp, #52	; 0x34
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f001 fea8 	bl	8008b64 <_cbor_value_copy_string>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	4318      	orrs	r0, r3
 8006e18:	6020      	str	r0, [r4, #0]
    cur->type = STRING;
 8006e1a:	2305      	movs	r3, #5
 8006e1c:	702b      	strb	r3, [r5, #0]
    break;
 8006e1e:	e769      	b.n	8006cf4 <oc_parse_rep_value+0x9c>
    assert(cbor_value_is_text_string(value));
 8006e20:	2300      	movs	r3, #0
 8006e22:	461a      	mov	r2, r3
 8006e24:	4619      	mov	r1, r3
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fa fce6 	bl	80017f8 <__assert_func>
      oc_parse_rep_value(&map, obj, err);
 8006e2c:	4622      	mov	r2, r4
 8006e2e:	4639      	mov	r1, r7
 8006e30:	a809      	add	r0, sp, #36	; 0x24
 8006e32:	f7ff ff11 	bl	8006c58 <oc_parse_rep_value>
      (*obj)->next = 0;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	605a      	str	r2, [r3, #4]
      obj = &(*obj)->next;
 8006e3c:	683f      	ldr	r7, [r7, #0]
 8006e3e:	3704      	adds	r7, #4
      *err |= cbor_value_advance(&map);
 8006e40:	a809      	add	r0, sp, #36	; 0x24
 8006e42:	f001 feef 	bl	8008c24 <cbor_value_advance>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	4318      	orrs	r0, r3
 8006e4a:	6020      	str	r0, [r4, #0]
{ return it->remaining == 0; }
 8006e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    while (!cbor_value_at_end(&map)) {
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1ec      	bne.n	8006e2c <oc_parse_rep_value+0x1d4>
    cur->type = OBJECT;
 8006e52:	2306      	movs	r3, #6
 8006e54:	702b      	strb	r3, [r5, #0]
  } break;
 8006e56:	e74d      	b.n	8006cf4 <oc_parse_rep_value+0x9c>
    *err |= cbor_value_enter_container(value, &array);
 8006e58:	a905      	add	r1, sp, #20
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	f001 fdc7 	bl	80089ee <cbor_value_enter_container>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	4318      	orrs	r0, r3
 8006e64:	6020      	str	r0, [r4, #0]
    len = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	930d      	str	r3, [sp, #52]	; 0x34
{ return value->type == CborArrayType; }
 8006e6a:	7bb3      	ldrb	r3, [r6, #14]
    assert(cbor_value_is_array(value));
 8006e6c:	2b80      	cmp	r3, #128	; 0x80
 8006e6e:	d110      	bne.n	8006e92 <oc_parse_rep_value+0x23a>
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
 8006e70:	7bf3      	ldrb	r3, [r6, #15]
    if (!cbor_value_is_length_known(value))
 8006e72:	f013 0f04 	tst.w	r3, #4
 8006e76:	d104      	bne.n	8006e82 <oc_parse_rep_value+0x22a>
                _cbor_value_decode_int64_internal(value) : value->extra;
 8006e78:	f013 0f01 	tst.w	r3, #1
 8006e7c:	d10f      	bne.n	8006e9e <oc_parse_rep_value+0x246>
 8006e7e:	89b0      	ldrh	r0, [r6, #12]
    *length = v;
 8006e80:	900d      	str	r0, [sp, #52]	; 0x34
    if (len == 0) {
 8006e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e84:	b9c3      	cbnz	r3, 8006eb8 <oc_parse_rep_value+0x260>
      CborValue t = array;
 8006e86:	466e      	mov	r6, sp
 8006e88:	ab05      	add	r3, sp, #20
 8006e8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e8c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      while (!cbor_value_at_end(&t)) {
 8006e90:	e00f      	b.n	8006eb2 <oc_parse_rep_value+0x25a>
    assert(cbor_value_is_array(value));
 8006e92:	2300      	movs	r3, #0
 8006e94:	461a      	mov	r2, r3
 8006e96:	4619      	mov	r1, r3
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fa fcad 	bl	80017f8 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f001 fd59 	bl	8008956 <_cbor_value_decode_int64_internal>
 8006ea4:	e7ec      	b.n	8006e80 <oc_parse_rep_value+0x228>
        len++;
 8006ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	930d      	str	r3, [sp, #52]	; 0x34
        cbor_value_advance(&t);
 8006eac:	4668      	mov	r0, sp
 8006eae:	f001 feb9 	bl	8008c24 <cbor_value_advance>
{ return it->remaining == 0; }
 8006eb2:	9b02      	ldr	r3, [sp, #8]
      while (!cbor_value_at_end(&t)) {
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1f6      	bne.n	8006ea6 <oc_parse_rep_value+0x24e>
{
 8006eb8:	2700      	movs	r7, #0
 8006eba:	463e      	mov	r6, r7
 8006ebc:	e09d      	b.n	8006ffa <oc_parse_rep_value+0x3a2>
      switch (array.type) {
 8006ebe:	b313      	cbz	r3, 8006f06 <oc_parse_rep_value+0x2ae>
 8006ec0:	2b40      	cmp	r3, #64	; 0x40
 8006ec2:	f040 8093 	bne.w	8006fec <oc_parse_rep_value+0x394>
        if (k == 0) {
 8006ec6:	2e00      	cmp	r6, #0
 8006ec8:	f000 80d1 	beq.w	800706e <oc_parse_rep_value+0x416>
        *err |= cbor_value_calculate_string_length(&array, &len);
 8006ecc:	a90d      	add	r1, sp, #52	; 0x34
 8006ece:	a805      	add	r0, sp, #20
 8006ed0:	f001 feba 	bl	8008c48 <cbor_value_calculate_string_length>
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	4318      	orrs	r0, r3
 8006ed8:	6020      	str	r0, [r4, #0]
        len++;
 8006eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006edc:	3301      	adds	r3, #1
 8006ede:	930d      	str	r3, [sp, #52]	; 0x34
          &array, (uint8_t *)oc_string_array_get_item(cur->value_array, k),
 8006ee0:	6969      	ldr	r1, [r5, #20]
 8006ee2:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8006ee6:	00d3      	lsls	r3, r2, #3
 8006ee8:	4419      	add	r1, r3
{ return value->type == CborByteStringType; }
 8006eea:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_byte_string(value));
 8006eee:	2b40      	cmp	r3, #64	; 0x40
 8006ef0:	f040 80c6 	bne.w	8007080 <oc_parse_rep_value+0x428>
    return _cbor_value_copy_string(value, buffer, buflen, next);
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	aa0d      	add	r2, sp, #52	; 0x34
 8006ef8:	a805      	add	r0, sp, #20
 8006efa:	f001 fe33 	bl	8008b64 <_cbor_value_copy_string>
        *err |= cbor_value_copy_byte_string(
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	4318      	orrs	r0, r3
 8006f02:	6020      	str	r0, [r4, #0]
        break;
 8006f04:	e072      	b.n	8006fec <oc_parse_rep_value+0x394>
        if (k == 0) {
 8006f06:	b1e6      	cbz	r6, 8006f42 <oc_parse_rep_value+0x2ea>
          cbor_value_get_int64(&array, oc_int_array(cur->value_array) + k);
 8006f08:	696b      	ldr	r3, [r5, #20]
 8006f0a:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
{ return value->type == CborIntegerType; }
 8006f0e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_integer(value));
 8006f12:	bb03      	cbnz	r3, 8006f56 <oc_parse_rep_value+0x2fe>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
 8006f14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
 8006f18:	f013 0f01 	tst.w	r3, #1
 8006f1c:	d121      	bne.n	8006f62 <oc_parse_rep_value+0x30a>
 8006f1e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8006f22:	f04f 0a00 	mov.w	sl, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
 8006f26:	e9c8 9a00 	strd	r9, sl, [r8]
    if (value->flags & CborIteratorFlag_NegativeInteger)
 8006f2a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f2e:	f013 0f02 	tst.w	r3, #2
 8006f32:	d05b      	beq.n	8006fec <oc_parse_rep_value+0x394>
        *result = -*result - 1;
 8006f34:	ea6f 0009 	mvn.w	r0, r9
 8006f38:	ea6f 010a 	mvn.w	r1, sl
 8006f3c:	e9c8 0100 	strd	r0, r1, [r8]
        break;
 8006f40:	e054      	b.n	8006fec <oc_parse_rep_value+0x394>
          oc_new_int_array(&cur->value_array, len);
 8006f42:	2208      	movs	r2, #8
 8006f44:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8006f48:	f105 0010 	add.w	r0, r5, #16
 8006f4c:	f000 fa3b 	bl	80073c6 <_oc_new_array>
          cur->type = INT | ARRAY;
 8006f50:	2309      	movs	r3, #9
 8006f52:	702b      	strb	r3, [r5, #0]
 8006f54:	e7d8      	b.n	8006f08 <oc_parse_rep_value+0x2b0>
    assert(cbor_value_is_integer(value));
 8006f56:	2300      	movs	r3, #0
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fa fc4b 	bl	80017f8 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
 8006f62:	a805      	add	r0, sp, #20
 8006f64:	f001 fcf7 	bl	8008956 <_cbor_value_decode_int64_internal>
 8006f68:	4681      	mov	r9, r0
 8006f6a:	468a      	mov	sl, r1
 8006f6c:	e7db      	b.n	8006f26 <oc_parse_rep_value+0x2ce>
        if (k == 0) {
 8006f6e:	b1d6      	cbz	r6, 8006fa6 <oc_parse_rep_value+0x34e>
          cbor_value_get_double(&array, oc_double_array(cur->value_array) + k);
 8006f70:	f8d5 9014 	ldr.w	r9, [r5, #20]
 8006f74:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 8006f78:	eb09 0a08 	add.w	sl, r9, r8
{ return value->type == CborDoubleType; }
 8006f7c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_double(value));
 8006f80:	2bfb      	cmp	r3, #251	; 0xfb
 8006f82:	d11a      	bne.n	8006fba <oc_parse_rep_value+0x362>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
 8006f84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f88:	f013 0f01 	tst.w	r3, #1
 8006f8c:	d01b      	beq.n	8006fc6 <oc_parse_rep_value+0x36e>
    uint64_t data = _cbor_value_decode_int64_internal(value);
 8006f8e:	a805      	add	r0, sp, #20
 8006f90:	f001 fce1 	bl	8008956 <_cbor_value_decode_int64_internal>
 8006f94:	ab0e      	add	r3, sp, #56	; 0x38
 8006f96:	e963 010e 	strd	r0, r1, [r3, #-56]!	; 0x38
    memcpy(result, &data, sizeof(*result));
 8006f9a:	cb03      	ldmia	r3!, {r0, r1}
 8006f9c:	f849 0008 	str.w	r0, [r9, r8]
 8006fa0:	f8ca 1004 	str.w	r1, [sl, #4]
        break;
 8006fa4:	e022      	b.n	8006fec <oc_parse_rep_value+0x394>
          oc_new_double_array(&cur->value_array, len);
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8006fac:	f105 0010 	add.w	r0, r5, #16
 8006fb0:	f000 fa09 	bl	80073c6 <_oc_new_array>
          cur->type = DOUBLE | ARRAY;
 8006fb4:	230a      	movs	r3, #10
 8006fb6:	702b      	strb	r3, [r5, #0]
 8006fb8:	e7da      	b.n	8006f70 <oc_parse_rep_value+0x318>
    assert(cbor_value_is_double(value));
 8006fba:	2300      	movs	r3, #0
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fa fc19 	bl	80017f8 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fa fc13 	bl	80017f8 <__assert_func>
        if (k == 0) {
 8006fd2:	2e00      	cmp	r6, #0
 8006fd4:	d03b      	beq.n	800704e <oc_parse_rep_value+0x3f6>
          cbor_value_get_boolean(&array, oc_bool_array(cur->value_array) + k);
 8006fd6:	696a      	ldr	r2, [r5, #20]
{ return value->type == CborBooleanType; }
 8006fd8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_boolean(value));
 8006fdc:	2bf5      	cmp	r3, #245	; 0xf5
 8006fde:	d140      	bne.n	8007062 <oc_parse_rep_value+0x40a>
    *result = !!value->extra;
 8006fe0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8006fe4:	3300      	adds	r3, #0
 8006fe6:	bf18      	it	ne
 8006fe8:	2301      	movne	r3, #1
 8006fea:	5593      	strb	r3, [r2, r6]
      k++;
 8006fec:	3601      	adds	r6, #1
      *err |= cbor_value_advance(&array);
 8006fee:	a805      	add	r0, sp, #20
 8006ff0:	f001 fe18 	bl	8008c24 <cbor_value_advance>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	4318      	orrs	r0, r3
 8006ff8:	6020      	str	r0, [r4, #0]
{ return it->remaining == 0; }
 8006ffa:	9b07      	ldr	r3, [sp, #28]
    while (!cbor_value_at_end(&array)) {
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f43f ae79 	beq.w	8006cf4 <oc_parse_rep_value+0x9c>
      switch (array.type) {
 8007002:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8007006:	2b60      	cmp	r3, #96	; 0x60
 8007008:	d040      	beq.n	800708c <oc_parse_rep_value+0x434>
 800700a:	f67f af58 	bls.w	8006ebe <oc_parse_rep_value+0x266>
 800700e:	2bf5      	cmp	r3, #245	; 0xf5
 8007010:	d0df      	beq.n	8006fd2 <oc_parse_rep_value+0x37a>
 8007012:	2bfb      	cmp	r3, #251	; 0xfb
 8007014:	d0ab      	beq.n	8006f6e <oc_parse_rep_value+0x316>
 8007016:	2ba0      	cmp	r3, #160	; 0xa0
 8007018:	d1e8      	bne.n	8006fec <oc_parse_rep_value+0x394>
        if (k == 0) {
 800701a:	2e00      	cmp	r6, #0
 800701c:	d162      	bne.n	80070e4 <oc_parse_rep_value+0x48c>
          cur->type = OBJECT | ARRAY;
 800701e:	230e      	movs	r3, #14
 8007020:	702b      	strb	r3, [r5, #0]
          cur->value_object_array = _alloc_rep();
 8007022:	f7ff fe0b 	bl	8006c3c <_alloc_rep>
 8007026:	462f      	mov	r7, r5
 8007028:	f847 0f10 	str.w	r0, [r7, #16]!
        (*prev)->type = OBJECT;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2206      	movs	r2, #6
 8007030:	701a      	strb	r2, [r3, #0]
        (*prev)->next = 0;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2200      	movs	r2, #0
 8007036:	605a      	str	r2, [r3, #4]
        oc_rep_t **obj = &(*prev)->value_object;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	f103 0810 	add.w	r8, r3, #16
        *err |= cbor_value_enter_container(&array, &map);
 800703e:	a909      	add	r1, sp, #36	; 0x24
 8007040:	a805      	add	r0, sp, #20
 8007042:	f001 fcd4 	bl	80089ee <cbor_value_enter_container>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	4318      	orrs	r0, r3
 800704a:	6020      	str	r0, [r4, #0]
        while (!cbor_value_at_end(&map)) {
 800704c:	e062      	b.n	8007114 <oc_parse_rep_value+0x4bc>
          oc_new_bool_array(&cur->value_array, len);
 800704e:	2201      	movs	r2, #1
 8007050:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8007054:	f105 0010 	add.w	r0, r5, #16
 8007058:	f000 f9b5 	bl	80073c6 <_oc_new_array>
          cur->type = BOOL | ARRAY;
 800705c:	230b      	movs	r3, #11
 800705e:	702b      	strb	r3, [r5, #0]
 8007060:	e7b9      	b.n	8006fd6 <oc_parse_rep_value+0x37e>
    assert(cbor_value_is_boolean(value));
 8007062:	2300      	movs	r3, #0
 8007064:	461a      	mov	r2, r3
 8007066:	4619      	mov	r1, r3
 8007068:	4618      	mov	r0, r3
 800706a:	f7fa fbc5 	bl	80017f8 <__assert_func>
          oc_new_string_array(&cur->value_array, len);
 800706e:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8007072:	f105 0010 	add.w	r0, r5, #16
 8007076:	f000 f9bc 	bl	80073f2 <_oc_alloc_string_array>
          cur->type = BYTE_STRING | ARRAY;
 800707a:	230c      	movs	r3, #12
 800707c:	702b      	strb	r3, [r5, #0]
 800707e:	e725      	b.n	8006ecc <oc_parse_rep_value+0x274>
    assert(cbor_value_is_byte_string(value));
 8007080:	2300      	movs	r3, #0
 8007082:	461a      	mov	r2, r3
 8007084:	4619      	mov	r1, r3
 8007086:	4618      	mov	r0, r3
 8007088:	f7fa fbb6 	bl	80017f8 <__assert_func>
        if (k == 0) {
 800708c:	b1de      	cbz	r6, 80070c6 <oc_parse_rep_value+0x46e>
        *err |= cbor_value_calculate_string_length(&array, &len);
 800708e:	a90d      	add	r1, sp, #52	; 0x34
 8007090:	a805      	add	r0, sp, #20
 8007092:	f001 fdd9 	bl	8008c48 <cbor_value_calculate_string_length>
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	4318      	orrs	r0, r3
 800709a:	6020      	str	r0, [r4, #0]
        len++;
 800709c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800709e:	3301      	adds	r3, #1
 80070a0:	930d      	str	r3, [sp, #52]	; 0x34
          &array, (char *)oc_string_array_get_item(cur->value_array, k), &len,
 80070a2:	6969      	ldr	r1, [r5, #20]
 80070a4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80070a8:	00d3      	lsls	r3, r2, #3
        *err |= cbor_value_copy_text_string(
 80070aa:	4419      	add	r1, r3
{ return value->type == CborTextStringType; }
 80070ac:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
 80070b0:	2b60      	cmp	r3, #96	; 0x60
 80070b2:	d111      	bne.n	80070d8 <oc_parse_rep_value+0x480>
    return _cbor_value_copy_string(value, buffer, buflen, next);
 80070b4:	2300      	movs	r3, #0
 80070b6:	aa0d      	add	r2, sp, #52	; 0x34
 80070b8:	a805      	add	r0, sp, #20
 80070ba:	f001 fd53 	bl	8008b64 <_cbor_value_copy_string>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	4318      	orrs	r0, r3
 80070c2:	6020      	str	r0, [r4, #0]
        break;
 80070c4:	e792      	b.n	8006fec <oc_parse_rep_value+0x394>
          oc_new_string_array(&cur->value_array, len);
 80070c6:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80070ca:	f105 0010 	add.w	r0, r5, #16
 80070ce:	f000 f990 	bl	80073f2 <_oc_alloc_string_array>
          cur->type = STRING | ARRAY;
 80070d2:	230d      	movs	r3, #13
 80070d4:	702b      	strb	r3, [r5, #0]
 80070d6:	e7da      	b.n	800708e <oc_parse_rep_value+0x436>
    assert(cbor_value_is_text_string(value));
 80070d8:	2300      	movs	r3, #0
 80070da:	461a      	mov	r2, r3
 80070dc:	4619      	mov	r1, r3
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fa fb8a 	bl	80017f8 <__assert_func>
          (*prev)->next = _alloc_rep();
 80070e4:	f8d7 8000 	ldr.w	r8, [r7]
 80070e8:	f7ff fda8 	bl	8006c3c <_alloc_rep>
 80070ec:	f8c8 0004 	str.w	r0, [r8, #4]
          prev = &(*prev)->next;
 80070f0:	683f      	ldr	r7, [r7, #0]
 80070f2:	3704      	adds	r7, #4
 80070f4:	e79a      	b.n	800702c <oc_parse_rep_value+0x3d4>
          oc_parse_rep_value(&map, obj, err);
 80070f6:	4622      	mov	r2, r4
 80070f8:	4641      	mov	r1, r8
 80070fa:	a809      	add	r0, sp, #36	; 0x24
 80070fc:	f7ff fdac 	bl	8006c58 <oc_parse_rep_value>
          obj = &(*obj)->next;
 8007100:	f8d8 3000 	ldr.w	r3, [r8]
 8007104:	f103 0804 	add.w	r8, r3, #4
          *err |= cbor_value_advance(&map);
 8007108:	a809      	add	r0, sp, #36	; 0x24
 800710a:	f001 fd8b 	bl	8008c24 <cbor_value_advance>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	4318      	orrs	r0, r3
 8007112:	6020      	str	r0, [r4, #0]
{ return it->remaining == 0; }
 8007114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        while (!cbor_value_at_end(&map)) {
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1ed      	bne.n	80070f6 <oc_parse_rep_value+0x49e>
 800711a:	e767      	b.n	8006fec <oc_parse_rep_value+0x394>

0800711c <oc_free_rep>:
    if (rep == NULL) {
 800711c:	b900      	cbnz	r0, 8007120 <oc_free_rep+0x4>
 800711e:	4770      	bx	lr
{
 8007120:	b510      	push	{r4, lr}
 8007122:	4604      	mov	r4, r0
    oc_free_rep(rep->next);
 8007124:	6840      	ldr	r0, [r0, #4]
 8007126:	f7ff fff9 	bl	800711c <oc_free_rep>
    switch (rep->type) {
 800712a:	7823      	ldrb	r3, [r4, #0]
 800712c:	3b04      	subs	r3, #4
 800712e:	2b0a      	cmp	r3, #10
 8007130:	d80b      	bhi.n	800714a <oc_free_rep+0x2e>
 8007132:	e8df f003 	tbb	[pc, r3]
 8007136:	2121      	.short	0x2121
 8007138:	1c0a0a26 	.word	0x1c0a0a26
 800713c:	06061217 	.word	0x06061217
 8007140:	2a          	.byte	0x2a
 8007141:	00          	.byte	0x00
        oc_free_string_array(&rep->value_array);
 8007142:	f104 0010 	add.w	r0, r4, #16
 8007146:	f000 f94c 	bl	80073e2 <_oc_free_array>
    oc_free_string(&rep->name);
 800714a:	f104 0008 	add.w	r0, r4, #8
 800714e:	f000 f932 	bl	80073b6 <oc_free_string>
    _free_rep(rep);
 8007152:	4620      	mov	r0, r4
 8007154:	f7ff fd6a 	bl	8006c2c <_free_rep>
}
 8007158:	bd10      	pop	{r4, pc}
        oc_free_bool_array(&rep->value_array);
 800715a:	f104 0010 	add.w	r0, r4, #16
 800715e:	f000 f940 	bl	80073e2 <_oc_free_array>
        break;
 8007162:	e7f2      	b.n	800714a <oc_free_rep+0x2e>
        oc_free_double_array(&rep->value_array);
 8007164:	f104 0010 	add.w	r0, r4, #16
 8007168:	f000 f93b 	bl	80073e2 <_oc_free_array>
        break;
 800716c:	e7ed      	b.n	800714a <oc_free_rep+0x2e>
        oc_free_int_array(&rep->value_array);
 800716e:	f104 0010 	add.w	r0, r4, #16
 8007172:	f000 f936 	bl	80073e2 <_oc_free_array>
        break;
 8007176:	e7e8      	b.n	800714a <oc_free_rep+0x2e>
        oc_free_string(&rep->value_string);
 8007178:	f104 0010 	add.w	r0, r4, #16
 800717c:	f000 f91b 	bl	80073b6 <oc_free_string>
        break;
 8007180:	e7e3      	b.n	800714a <oc_free_rep+0x2e>
        oc_free_rep(rep->value_object);
 8007182:	6920      	ldr	r0, [r4, #16]
 8007184:	f7ff ffca 	bl	800711c <oc_free_rep>
        break;
 8007188:	e7df      	b.n	800714a <oc_free_rep+0x2e>
        oc_free_rep(rep->value_object_array);
 800718a:	6920      	ldr	r0, [r4, #16]
 800718c:	f7ff ffc6 	bl	800711c <oc_free_rep>
        break;
 8007190:	e7db      	b.n	800714a <oc_free_rep+0x2e>

08007192 <oc_parse_rep>:

uint16_t
oc_parse_rep(struct os_mbuf *m, uint16_t payload_off,
             uint16_t payload_size, oc_rep_t **out_rep)
{
 8007192:	b530      	push	{r4, r5, lr}
 8007194:	b09b      	sub	sp, #108	; 0x6c
 8007196:	461c      	mov	r4, r3
  CborParser parser;
  CborValue root_value, cur_value, map;
  CborError err = CborNoError;
 8007198:	2500      	movs	r5, #0
 800719a:	950a      	str	r5, [sp, #40]	; 0x28
  struct cbor_mbuf_reader br;

  cbor_mbuf_reader_init(&br, m, payload_off);
 800719c:	460a      	mov	r2, r1
 800719e:	4601      	mov	r1, r0
 80071a0:	a801      	add	r0, sp, #4
 80071a2:	f001 f95f 	bl	8008464 <cbor_mbuf_reader_init>
  err |= cbor_parser_init(&br.r, 0, &parser, &root_value);
 80071a6:	ab13      	add	r3, sp, #76	; 0x4c
 80071a8:	aa17      	add	r2, sp, #92	; 0x5c
 80071aa:	4629      	mov	r1, r5
 80071ac:	a801      	add	r0, sp, #4
 80071ae:	f001 fc0e 	bl	80089ce <cbor_parser_init>
 80071b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b4:	4318      	orrs	r0, r3
 80071b6:	900a      	str	r0, [sp, #40]	; 0x28
{ return value->type == CborMapType; }
 80071b8:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
  if (cbor_value_is_map(&root_value)) {
 80071bc:	2ba0      	cmp	r3, #160	; 0xa0
 80071be:	d005      	beq.n	80071cc <oc_parse_rep+0x3a>
    while (cbor_value_is_valid(&cur_value)) {
      oc_parse_rep_value(&cur_value, cur, &err);
      err |= cbor_value_advance(&cur_value);
      cur = &(*cur)->next;
    }
  } else if (cbor_value_is_array(&root_value)) {
 80071c0:	2b80      	cmp	r3, #128	; 0x80
 80071c2:	d022      	beq.n	800720a <oc_parse_rep+0x78>
      (*cur)->next = 0;
      cur = &(*cur)->next;
    }
  }
  return (uint16_t)err;
}
 80071c4:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
 80071c8:	b01b      	add	sp, #108	; 0x6c
 80071ca:	bd30      	pop	{r4, r5, pc}
    err |= cbor_value_enter_container(&root_value, &cur_value);
 80071cc:	a90f      	add	r1, sp, #60	; 0x3c
 80071ce:	a813      	add	r0, sp, #76	; 0x4c
 80071d0:	f001 fc0d 	bl	80089ee <cbor_value_enter_container>
 80071d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d6:	4318      	orrs	r0, r3
 80071d8:	900a      	str	r0, [sp, #40]	; 0x28
    *out_rep = 0;
 80071da:	6025      	str	r5, [r4, #0]
    while (cbor_value_is_valid(&cur_value)) {
 80071dc:	e00f      	b.n	80071fe <oc_parse_rep+0x6c>
{ return value && value->type != CborInvalidType; }
 80071de:	2300      	movs	r3, #0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0ef      	beq.n	80071c4 <oc_parse_rep+0x32>
      oc_parse_rep_value(&cur_value, cur, &err);
 80071e4:	aa0a      	add	r2, sp, #40	; 0x28
 80071e6:	4621      	mov	r1, r4
 80071e8:	a80f      	add	r0, sp, #60	; 0x3c
 80071ea:	f7ff fd35 	bl	8006c58 <oc_parse_rep_value>
      err |= cbor_value_advance(&cur_value);
 80071ee:	a80f      	add	r0, sp, #60	; 0x3c
 80071f0:	f001 fd18 	bl	8008c24 <cbor_value_advance>
 80071f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f6:	4318      	orrs	r0, r3
 80071f8:	900a      	str	r0, [sp, #40]	; 0x28
      cur = &(*cur)->next;
 80071fa:	6824      	ldr	r4, [r4, #0]
 80071fc:	3404      	adds	r4, #4
 80071fe:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8007202:	2bff      	cmp	r3, #255	; 0xff
 8007204:	d0eb      	beq.n	80071de <oc_parse_rep+0x4c>
 8007206:	2301      	movs	r3, #1
 8007208:	e7ea      	b.n	80071e0 <oc_parse_rep+0x4e>
    err |= cbor_value_enter_container(&root_value, &map);
 800720a:	a90b      	add	r1, sp, #44	; 0x2c
 800720c:	a813      	add	r0, sp, #76	; 0x4c
 800720e:	f001 fbee 	bl	80089ee <cbor_value_enter_container>
 8007212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007214:	4318      	orrs	r0, r3
 8007216:	900a      	str	r0, [sp, #40]	; 0x28
    err |= cbor_value_enter_container(&map, &cur_value);
 8007218:	a90f      	add	r1, sp, #60	; 0x3c
 800721a:	a80b      	add	r0, sp, #44	; 0x2c
 800721c:	f001 fbe7 	bl	80089ee <cbor_value_enter_container>
 8007220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007222:	4318      	orrs	r0, r3
 8007224:	900a      	str	r0, [sp, #40]	; 0x28
    *out_rep = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	6023      	str	r3, [r4, #0]
    while (cbor_value_is_valid(&cur_value)) {
 800722a:	e018      	b.n	800725e <oc_parse_rep+0xcc>
 800722c:	2300      	movs	r3, #0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d0c8      	beq.n	80071c4 <oc_parse_rep+0x32>
      *cur = _alloc_rep();
 8007232:	f7ff fd03 	bl	8006c3c <_alloc_rep>
 8007236:	6020      	str	r0, [r4, #0]
      (*cur)->type = OBJECT;
 8007238:	2306      	movs	r3, #6
 800723a:	7003      	strb	r3, [r0, #0]
      oc_parse_rep_value(&cur_value, &(*cur)->value_object, &err);
 800723c:	6821      	ldr	r1, [r4, #0]
 800723e:	aa0a      	add	r2, sp, #40	; 0x28
 8007240:	3110      	adds	r1, #16
 8007242:	a80f      	add	r0, sp, #60	; 0x3c
 8007244:	f7ff fd08 	bl	8006c58 <oc_parse_rep_value>
      err |= cbor_value_advance(&cur_value);
 8007248:	a80f      	add	r0, sp, #60	; 0x3c
 800724a:	f001 fceb 	bl	8008c24 <cbor_value_advance>
 800724e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007250:	4318      	orrs	r0, r3
 8007252:	900a      	str	r0, [sp, #40]	; 0x28
      (*cur)->next = 0;
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	2200      	movs	r2, #0
 8007258:	605a      	str	r2, [r3, #4]
      cur = &(*cur)->next;
 800725a:	6824      	ldr	r4, [r4, #0]
 800725c:	3404      	adds	r4, #4
 800725e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8007262:	2bff      	cmp	r3, #255	; 0xff
 8007264:	d0e2      	beq.n	800722c <oc_parse_rep+0x9a>
 8007266:	2301      	movs	r3, #1
 8007268:	e7e1      	b.n	800722e <oc_parse_rep+0x9c>
	...

0800726c <oc_rep_init>:

void
oc_rep_init(void)
{
 800726c:	b500      	push	{lr}
 800726e:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
 8007270:	4b05      	ldr	r3, [pc, #20]	; (8007288 <oc_rep_init+0x1c>)
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	4b05      	ldr	r3, [pc, #20]	; (800728c <oc_rep_init+0x20>)
 8007276:	2218      	movs	r2, #24
 8007278:	2102      	movs	r1, #2
 800727a:	4805      	ldr	r0, [pc, #20]	; (8007290 <oc_rep_init+0x24>)
 800727c:	f7fa fe62 	bl	8001f44 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
 8007280:	b003      	add	sp, #12
 8007282:	f85d fb04 	ldr.w	pc, [sp], #4
 8007286:	bf00      	nop
 8007288:	0800da10 	.word	0x0800da10
 800728c:	200031dc 	.word	0x200031dc
 8007290:	200031c0 	.word	0x200031c0

08007294 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
 8007294:	b500      	push	{lr}
 8007296:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
 8007298:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <oc_ri_mem_init+0x24>)
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	4b07      	ldr	r3, [pc, #28]	; (80072bc <oc_ri_mem_init+0x28>)
 800729e:	2264      	movs	r2, #100	; 0x64
 80072a0:	2102      	movs	r1, #2
 80072a2:	4807      	ldr	r0, [pc, #28]	; (80072c0 <oc_ri_mem_init+0x2c>)
 80072a4:	f7fa fe4e 	bl	8001f44 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
 80072a8:	f7ff ffe0 	bl	800726c <oc_rep_init>
#endif
    oc_buffer_init();
 80072ac:	f7ff fcaa 	bl	8006c04 <oc_buffer_init>
}
 80072b0:	b003      	add	sp, #12
 80072b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80072b6:	bf00      	nop
 80072b8:	0800da1c 	.word	0x0800da1c
 80072bc:	2000320c 	.word	0x2000320c
 80072c0:	200032d4 	.word	0x200032d4

080072c4 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
 80072c4:	4b01      	ldr	r3, [pc, #4]	; (80072cc <oc_evq_set+0x8>)
 80072c6:	6018      	str	r0, [r3, #0]
}
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	200032f0 	.word	0x200032f0

080072d0 <oc_transport_register>:

int8_t
oc_transport_register(const struct oc_transport *ot)
{
    int i;
    int first = -1;
 80072d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 80072d4:	2300      	movs	r3, #0
 80072d6:	e000      	b.n	80072da <oc_transport_register+0xa>
 80072d8:	3301      	adds	r3, #1
 80072da:	2b07      	cmp	r3, #7
 80072dc:	dc0d      	bgt.n	80072fa <oc_transport_register+0x2a>
        if (oc_transports[i] == ot) {
 80072de:	4a09      	ldr	r2, [pc, #36]	; (8007304 <oc_transport_register+0x34>)
 80072e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072e4:	4282      	cmp	r2, r0
 80072e6:	d00a      	beq.n	80072fe <oc_transport_register+0x2e>
            return -1;
        }
        if (oc_transports[i] == NULL && first < 0) {
 80072e8:	2a00      	cmp	r2, #0
 80072ea:	d1f5      	bne.n	80072d8 <oc_transport_register+0x8>
 80072ec:	2900      	cmp	r1, #0
 80072ee:	daf3      	bge.n	80072d8 <oc_transport_register+0x8>
            oc_transports[i] = ot;
 80072f0:	4a04      	ldr	r2, [pc, #16]	; (8007304 <oc_transport_register+0x34>)
 80072f2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
            first = i;
 80072f6:	4619      	mov	r1, r3
 80072f8:	e7ee      	b.n	80072d8 <oc_transport_register+0x8>
        }
    }
    return first;
 80072fa:	b248      	sxtb	r0, r1
 80072fc:	4770      	bx	lr
            return -1;
 80072fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007302:	4770      	bx	lr
 8007304:	2000359c 	.word	0x2000359c

08007308 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
 8007308:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
 800730a:	7e03      	ldrb	r3, [r0, #24]
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	4a04      	ldr	r2, [pc, #16]	; (8007324 <oc_send_buffer+0x1c>)
 8007312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
 8007316:	b113      	cbz	r3, 800731e <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
 800731c:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
 800731e:	f7fb fbde 	bl	8002ade <os_mbuf_free_chain>
}
 8007322:	e7fb      	b.n	800731c <oc_send_buffer+0x14>
 8007324:	2000359c 	.word	0x2000359c

08007328 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
 8007328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800732c:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 800732e:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
 8007330:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 8007332:	e002      	b.n	800733a <oc_send_multicast_message+0x12>
 8007334:	4635      	mov	r5, r6
 8007336:	3401      	adds	r4, #1
 8007338:	462e      	mov	r6, r5
 800733a:	2c07      	cmp	r4, #7
 800733c:	dc12      	bgt.n	8007364 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
 800733e:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <oc_send_multicast_message+0x48>)
 8007340:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8007344:	2d00      	cmp	r5, #0
 8007346:	d0f5      	beq.n	8007334 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
 8007348:	2e00      	cmp	r6, #0
 800734a:	d0f4      	beq.n	8007336 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
 800734c:	4638      	mov	r0, r7
 800734e:	f7fb fc37 	bl	8002bc0 <os_mbuf_dup>
 8007352:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
 8007354:	6933      	ldr	r3, [r6, #16]
 8007356:	4638      	mov	r0, r7
 8007358:	4798      	blx	r3
            if (!n) {
 800735a:	f1b8 0f00 	cmp.w	r8, #0
 800735e:	d005      	beq.n	800736c <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
 8007360:	4647      	mov	r7, r8
 8007362:	e7e8      	b.n	8007336 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
 8007364:	b116      	cbz	r6, 800736c <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
 8007366:	6933      	ldr	r3, [r6, #16]
 8007368:	4638      	mov	r0, r7
 800736a:	4798      	blx	r3
    }
}
 800736c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007370:	2000359c 	.word	0x2000359c

08007374 <oc_init>:
    return rc;
}

void
oc_init(void)
{
 8007374:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
 8007376:	4b07      	ldr	r3, [pc, #28]	; (8007394 <oc_init+0x20>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	b133      	cbz	r3, 800738a <oc_init+0x16>
    oc_ri_mem_init();
 800737c:	f7ff ff8a 	bl	8007294 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
 8007380:	f7fa fda0 	bl	8001ec4 <os_eventq_dflt_get>
 8007384:	f7ff ff9e 	bl	80072c4 <oc_evq_set>
}
 8007388:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
 800738a:	461a      	mov	r2, r3
 800738c:	4619      	mov	r1, r3
 800738e:	4618      	mov	r0, r3
 8007390:	f7fa fa32 	bl	80017f8 <__assert_func>
 8007394:	20003494 	.word	0x20003494

08007398 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
 8007398:	4770      	bx	lr

0800739a <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
 800739a:	4770      	bx	lr

0800739c <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
 800739c:	4770      	bx	lr

0800739e <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
 800739e:	4770      	bx	lr

080073a0 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
 80073a0:	4770      	bx	lr

080073a2 <oc_alloc_string>:
    }
}

void
oc_alloc_string(oc_string_t *os, int size)
{
 80073a2:	b538      	push	{r3, r4, r5, lr}
 80073a4:	4604      	mov	r4, r0
 80073a6:	460d      	mov	r5, r1
    os->os_str = malloc(size);
 80073a8:	4608      	mov	r0, r1
 80073aa:	f7fb fe19 	bl	8002fe0 <malloc>
 80073ae:	6060      	str	r0, [r4, #4]
    if (os->os_str) {
 80073b0:	b100      	cbz	r0, 80073b4 <oc_alloc_string+0x12>
        os->os_sz = size;
 80073b2:	8025      	strh	r5, [r4, #0]
    }
}
 80073b4:	bd38      	pop	{r3, r4, r5, pc}

080073b6 <oc_free_string>:

void
oc_free_string(oc_string_t *os)
{
 80073b6:	b510      	push	{r4, lr}
 80073b8:	4604      	mov	r4, r0
    free(os->os_str);
 80073ba:	6840      	ldr	r0, [r0, #4]
 80073bc:	f7fb fe46 	bl	800304c <free>
    os->os_sz = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	8023      	strh	r3, [r4, #0]
}
 80073c4:	bd10      	pop	{r4, pc}

080073c6 <_oc_new_array>:
    concat->os_str[len1 + len2] = '\0';
}

void
_oc_new_array(oc_array_t *oa, uint8_t size, uint8_t elem_size)
{
 80073c6:	b570      	push	{r4, r5, r6, lr}
 80073c8:	4605      	mov	r5, r0
 80073ca:	460c      	mov	r4, r1
 80073cc:	4616      	mov	r6, r2
    oa->oa_arr.b = malloc(size * elem_size);
 80073ce:	fb02 f001 	mul.w	r0, r2, r1
 80073d2:	f7fb fe05 	bl	8002fe0 <malloc>
 80073d6:	6068      	str	r0, [r5, #4]
    if (oa->oa_arr.b) {
 80073d8:	b110      	cbz	r0, 80073e0 <_oc_new_array+0x1a>
        oa->oa_sz = size * elem_size;
 80073da:	fb04 f406 	mul.w	r4, r4, r6
 80073de:	802c      	strh	r4, [r5, #0]
    }
}
 80073e0:	bd70      	pop	{r4, r5, r6, pc}

080073e2 <_oc_free_array>:

void _oc_free_array(oc_array_t *oa)
{
 80073e2:	b510      	push	{r4, lr}
 80073e4:	4604      	mov	r4, r0
    free(oa->oa_arr.b);
 80073e6:	6840      	ldr	r0, [r0, #4]
 80073e8:	f7fb fe30 	bl	800304c <free>
    oa->oa_sz = 0;
 80073ec:	2300      	movs	r3, #0
 80073ee:	8023      	strh	r3, [r4, #0]
}
 80073f0:	bd10      	pop	{r4, pc}

080073f2 <_oc_alloc_string_array>:

void
_oc_alloc_string_array(oc_string_array_t *osa, uint8_t size)
{
 80073f2:	b538      	push	{r3, r4, r5, lr}
 80073f4:	4604      	mov	r4, r0
 80073f6:	460d      	mov	r5, r1
    int i;
    int pos;

    _oc_new_array(osa, size, STRING_ARRAY_ITEM_MAX_LEN);
 80073f8:	2218      	movs	r2, #24
 80073fa:	f7ff ffe4 	bl	80073c6 <_oc_new_array>
    if (osa->oa_arr.s) {
 80073fe:	6863      	ldr	r3, [r4, #4]
 8007400:	b153      	cbz	r3, 8007418 <_oc_alloc_string_array+0x26>
        for (i = 0; i < size; i++) {
 8007402:	2300      	movs	r3, #0
 8007404:	e006      	b.n	8007414 <_oc_alloc_string_array+0x22>
            pos = i * STRING_ARRAY_ITEM_MAX_LEN;
 8007406:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800740a:	00ca      	lsls	r2, r1, #3
            osa->oa_arr.s[pos] = '\0';
 800740c:	6861      	ldr	r1, [r4, #4]
 800740e:	2000      	movs	r0, #0
 8007410:	5488      	strb	r0, [r1, r2]
        for (i = 0; i < size; i++) {
 8007412:	3301      	adds	r3, #1
 8007414:	429d      	cmp	r5, r3
 8007416:	dcf6      	bgt.n	8007406 <_oc_alloc_string_array+0x14>
        }
    }
}
 8007418:	bd38      	pop	{r3, r4, r5, pc}

0800741a <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
 800741a:	b570      	push	{r4, r5, r6, lr}
 800741c:	b086      	sub	sp, #24
 800741e:	4605      	mov	r5, r0
 8007420:	460e      	mov	r6, r1
 8007422:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
 8007428:	f000 f9ae 	bl	8007788 <mfg_init>

    mfg_open(&reader);
 800742c:	a801      	add	r0, sp, #4
 800742e:	f000 f9c7 	bl	80077c0 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	42ab      	cmp	r3, r5
 8007436:	da29      	bge.n	800748c <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
 8007438:	2102      	movs	r1, #2
 800743a:	a801      	add	r0, sp, #4
 800743c:	f000 f98d 	bl	800775a <mfg_seek_next_with_type>
 8007440:	4603      	mov	r3, r0
        switch (rc) {
 8007442:	f110 0f0f 	cmn.w	r0, #15
 8007446:	d003      	beq.n	8007450 <flash_map_read_mfg+0x36>
 8007448:	b120      	cbz	r0, 8007454 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
 800744a:	4618      	mov	r0, r3
 800744c:	b006      	add	sp, #24
 800744e:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
 8007450:	2300      	movs	r3, #0
 8007452:	e7fa      	b.n	800744a <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
 8007454:	a903      	add	r1, sp, #12
 8007456:	a801      	add	r0, sp, #4
 8007458:	f000 f98c 	bl	8007774 <mfg_read_tlv_flash_area>
        if (rc != 0) {
 800745c:	4603      	mov	r3, r0
 800745e:	2800      	cmp	r0, #0
 8007460:	d1f3      	bne.n	800744a <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007468:	009a      	lsls	r2, r3, #2
 800746a:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
 800746c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8007470:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
 8007472:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8007476:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
 8007478:	f8dd 200e 	ldr.w	r2, [sp, #14]
 800747c:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
 800747e:	f8dd 2012 	ldr.w	r2, [sp, #18]
 8007482:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	3301      	adds	r3, #1
 8007488:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
 800748a:	e7d2      	b.n	8007432 <flash_map_read_mfg+0x18>
            return -1;
 800748c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007490:	e7db      	b.n	800744a <flash_map_read_mfg+0x30>
	...

08007494 <flash_area_open>:
{
 8007494:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
 8007496:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <flash_area_open+0x38>)
 8007498:	681d      	ldr	r5, [r3, #0]
 800749a:	b1a5      	cbz	r5, 80074c6 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
 800749c:	2300      	movs	r3, #0
 800749e:	4a0c      	ldr	r2, [pc, #48]	; (80074d0 <flash_area_open+0x3c>)
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	dd0b      	ble.n	80074be <flash_area_open+0x2a>
        area = flash_map + i;
 80074a6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80074aa:	00a2      	lsls	r2, r4, #2
 80074ac:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
 80074ae:	5caa      	ldrb	r2, [r5, r2]
 80074b0:	4282      	cmp	r2, r0
 80074b2:	d001      	beq.n	80074b8 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
 80074b4:	3301      	adds	r3, #1
 80074b6:	e7f2      	b.n	800749e <flash_area_open+0xa>
            *fap = area;
 80074b8:	600c      	str	r4, [r1, #0]
            return 0;
 80074ba:	2000      	movs	r0, #0
 80074bc:	e001      	b.n	80074c2 <flash_area_open+0x2e>
    return SYS_ENOENT;
 80074be:	f06f 0003 	mvn.w	r0, #3
}
 80074c2:	bc30      	pop	{r4, r5}
 80074c4:	4770      	bx	lr
        return SYS_EACCES;
 80074c6:	f06f 0006 	mvn.w	r0, #6
 80074ca:	e7fa      	b.n	80074c2 <flash_area_open+0x2e>
 80074cc:	200035bc 	.word	0x200035bc
 80074d0:	200035c0 	.word	0x200035c0

080074d4 <flash_area_read>:
{
 80074d4:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
 80074d6:	6884      	ldr	r4, [r0, #8]
 80074d8:	428c      	cmp	r4, r1
 80074da:	d308      	bcc.n	80074ee <flash_area_read+0x1a>
 80074dc:	18cd      	adds	r5, r1, r3
 80074de:	42ac      	cmp	r4, r5
 80074e0:	d308      	bcc.n	80074f4 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
 80074e2:	6844      	ldr	r4, [r0, #4]
 80074e4:	4421      	add	r1, r4
 80074e6:	7840      	ldrb	r0, [r0, #1]
 80074e8:	f001 fd4b 	bl	8008f82 <hal_flash_read>
}
 80074ec:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
 80074ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074f2:	e7fb      	b.n	80074ec <flash_area_read+0x18>
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074f8:	e7f8      	b.n	80074ec <flash_area_read+0x18>
	...

080074fc <flash_map_init>:

void
flash_map_init(void)
{
 80074fc:	b510      	push	{r4, lr}
 80074fe:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 8007500:	4b14      	ldr	r3, [pc, #80]	; (8007554 <flash_map_init+0x58>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	b303      	cbz	r3, 8007548 <flash_map_init+0x4c>

    rc = hal_flash_init();
 8007506:	f001 fd28 	bl	8008f5a <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
 800750a:	b138      	cbz	r0, 800751c <flash_map_init+0x20>
 800750c:	2000      	movs	r0, #0
 800750e:	9000      	str	r0, [sp, #0]
 8007510:	4b11      	ldr	r3, [pc, #68]	; (8007558 <flash_map_init+0x5c>)
 8007512:	681c      	ldr	r4, [r3, #0]
 8007514:	4603      	mov	r3, r0
 8007516:	4602      	mov	r2, r0
 8007518:	4601      	mov	r1, r0
 800751a:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
 800751c:	4b0f      	ldr	r3, [pc, #60]	; (800755c <flash_map_init+0x60>)
 800751e:	4a10      	ldr	r2, [pc, #64]	; (8007560 <flash_map_init+0x64>)
 8007520:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
 8007522:	4b10      	ldr	r3, [pc, #64]	; (8007564 <flash_map_init+0x68>)
 8007524:	2206      	movs	r2, #6
 8007526:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
 8007528:	aa03      	add	r2, sp, #12
 800752a:	490f      	ldr	r1, [pc, #60]	; (8007568 <flash_map_init+0x6c>)
 800752c:	200a      	movs	r0, #10
 800752e:	f7ff ff74 	bl	800741a <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
 8007532:	b938      	cbnz	r0, 8007544 <flash_map_init+0x48>
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	dd04      	ble.n	8007544 <flash_map_init+0x48>
        flash_map = mfg_areas;
 800753a:	4a08      	ldr	r2, [pc, #32]	; (800755c <flash_map_init+0x60>)
 800753c:	490a      	ldr	r1, [pc, #40]	; (8007568 <flash_map_init+0x6c>)
 800753e:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
 8007540:	4a08      	ldr	r2, [pc, #32]	; (8007564 <flash_map_init+0x68>)
 8007542:	6013      	str	r3, [r2, #0]
    }
}
 8007544:	b004      	add	sp, #16
 8007546:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
 8007548:	461a      	mov	r2, r3
 800754a:	4619      	mov	r1, r3
 800754c:	4618      	mov	r0, r3
 800754e:	f7fa f953 	bl	80017f8 <__assert_func>
 8007552:	bf00      	nop
 8007554:	20003494 	.word	0x20003494
 8007558:	20000110 	.word	0x20000110
 800755c:	200035bc 	.word	0x200035bc
 8007560:	0800da28 	.word	0x0800da28
 8007564:	200035c0 	.word	0x200035c0
 8007568:	200032f4 	.word	0x200032f4

0800756c <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
 800756c:	4770      	bx	lr
	...

08007570 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
 8007570:	b530      	push	{r4, r5, lr}
 8007572:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
 8007574:	7885      	ldrb	r5, [r0, #2]
 8007576:	4b21      	ldr	r3, [pc, #132]	; (80075fc <mfg_seek_next_aux+0x8c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	429d      	cmp	r5, r3
 800757c:	da32      	bge.n	80075e4 <mfg_seek_next_aux+0x74>
 800757e:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
 8007580:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8007584:	0093      	lsls	r3, r2, #2
 8007586:	a901      	add	r1, sp, #4
 8007588:	4a1d      	ldr	r2, [pc, #116]	; (8007600 <mfg_seek_next_aux+0x90>)
 800758a:	5cd0      	ldrb	r0, [r2, r3]
 800758c:	f7ff ff82 	bl	8007494 <flash_area_open>
    if (rc != 0) {
 8007590:	bb58      	cbnz	r0, 80075ea <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
 8007592:	6862      	ldr	r2, [r4, #4]
 8007594:	b9c2      	cbnz	r2, 80075c8 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
 8007596:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800759a:	00aa      	lsls	r2, r5, #2
 800759c:	4b18      	ldr	r3, [pc, #96]	; (8007600 <mfg_seek_next_aux+0x90>)
 800759e:	4413      	add	r3, r2
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
 80075a4:	6861      	ldr	r1, [r4, #4]
 80075a6:	9801      	ldr	r0, [sp, #4]
 80075a8:	6883      	ldr	r3, [r0, #8]
 80075aa:	3b08      	subs	r3, #8
 80075ac:	4299      	cmp	r1, r3
 80075ae:	d310      	bcc.n	80075d2 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
 80075b0:	78a3      	ldrb	r3, [r4, #2]
 80075b2:	1c59      	adds	r1, r3, #1
 80075b4:	4a11      	ldr	r2, [pc, #68]	; (80075fc <mfg_seek_next_aux+0x8c>)
 80075b6:	6812      	ldr	r2, [r2, #0]
 80075b8:	4291      	cmp	r1, r2
 80075ba:	da19      	bge.n	80075f0 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
 80075bc:	2200      	movs	r2, #0
 80075be:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
 80075c0:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
 80075c2:	f06f 0305 	mvn.w	r3, #5
 80075c6:	e015      	b.n	80075f4 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
 80075c8:	7863      	ldrb	r3, [r4, #1]
 80075ca:	4413      	add	r3, r2
 80075cc:	3302      	adds	r3, #2
 80075ce:	6063      	str	r3, [r4, #4]
 80075d0:	e7e8      	b.n	80075a4 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
 80075d2:	2302      	movs	r3, #2
 80075d4:	4622      	mov	r2, r4
 80075d6:	f7ff ff7d 	bl	80074d4 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
 80075da:	4603      	mov	r3, r0
 80075dc:	b150      	cbz	r0, 80075f4 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
 80075de:	f06f 0304 	mvn.w	r3, #4
 80075e2:	e007      	b.n	80075f4 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
 80075e4:	f06f 0301 	mvn.w	r3, #1
 80075e8:	e004      	b.n	80075f4 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
 80075ea:	f06f 0304 	mvn.w	r3, #4
 80075ee:	e001      	b.n	80075f4 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
 80075f0:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	b003      	add	sp, #12
 80075f8:	bd30      	pop	{r4, r5, pc}
 80075fa:	bf00      	nop
 80075fc:	20003388 	.word	0x20003388
 8007600:	20003370 	.word	0x20003370

08007604 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
 8007604:	b530      	push	{r4, r5, lr}
 8007606:	b085      	sub	sp, #20
 8007608:	4605      	mov	r5, r0
 800760a:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
 800760c:	a903      	add	r1, sp, #12
 800760e:	f7ff ff41 	bl	8007494 <flash_area_open>
    if (rc != 0) {
 8007612:	b9e8      	cbnz	r0, 8007650 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
 8007614:	9803      	ldr	r0, [sp, #12]
 8007616:	6881      	ldr	r1, [r0, #8]
 8007618:	2308      	movs	r3, #8
 800761a:	aa01      	add	r2, sp, #4
 800761c:	3908      	subs	r1, #8
 800761e:	f7ff ff59 	bl	80074d4 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
 8007622:	4601      	mov	r1, r0
 8007624:	b9b8      	cbnz	r0, 8007656 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
 8007626:	9a02      	ldr	r2, [sp, #8]
 8007628:	4b11      	ldr	r3, [pc, #68]	; (8007670 <mfg_read_mmr+0x6c>)
 800762a:	429a      	cmp	r2, r3
 800762c:	d116      	bne.n	800765c <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
 800762e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007632:	2b02      	cmp	r3, #2
 8007634:	d115      	bne.n	8007662 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
 8007636:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800763a:	9b03      	ldr	r3, [sp, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	429a      	cmp	r2, r3
 8007640:	d812      	bhi.n	8007668 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
 8007642:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
 8007644:	7025      	strb	r5, [r4, #0]
 8007646:	6063      	str	r3, [r4, #4]
 8007648:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
 800764a:	4608      	mov	r0, r1
 800764c:	b005      	add	sp, #20
 800764e:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
 8007650:	f06f 0104 	mvn.w	r1, #4
 8007654:	e7f9      	b.n	800764a <mfg_read_mmr+0x46>
        return SYS_EIO;
 8007656:	f06f 0104 	mvn.w	r1, #4
 800765a:	e7f6      	b.n	800764a <mfg_read_mmr+0x46>
        return SYS_ENODEV;
 800765c:	f06f 0108 	mvn.w	r1, #8
 8007660:	e7f3      	b.n	800764a <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
 8007662:	f06f 010b 	mvn.w	r1, #11
 8007666:	e7f0      	b.n	800764a <mfg_read_mmr+0x46>
        return SYS_ENODEV;
 8007668:	f06f 0108 	mvn.w	r1, #8
 800766c:	e7ed      	b.n	800764a <mfg_read_mmr+0x46>
 800766e:	bf00      	nop
 8007670:	3bb2a269 	.word	0x3bb2a269

08007674 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
 8007674:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
 8007676:	2300      	movs	r3, #0
 8007678:	4a11      	ldr	r2, [pc, #68]	; (80076c0 <mfg_read_next_mmr+0x4c>)
 800767a:	6812      	ldr	r2, [r2, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	dd08      	ble.n	8007692 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
 8007680:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8007684:	008a      	lsls	r2, r1, #2
 8007686:	490f      	ldr	r1, [pc, #60]	; (80076c4 <mfg_read_next_mmr+0x50>)
 8007688:	5c8a      	ldrb	r2, [r1, r2]
 800768a:	4282      	cmp	r2, r0
 800768c:	d011      	beq.n	80076b2 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
 800768e:	3301      	adds	r3, #1
 8007690:	e7f2      	b.n	8007678 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
 8007692:	2a01      	cmp	r2, #1
 8007694:	dc11      	bgt.n	80076ba <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
 8007696:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800769a:	0093      	lsls	r3, r2, #2
 800769c:	4909      	ldr	r1, [pc, #36]	; (80076c4 <mfg_read_next_mmr+0x50>)
 800769e:	4419      	add	r1, r3
 80076a0:	f7ff ffb0 	bl	8007604 <mfg_read_mmr>
    if (rc != 0) {
 80076a4:	4603      	mov	r3, r0
 80076a6:	b930      	cbnz	r0, 80076b6 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
 80076a8:	4905      	ldr	r1, [pc, #20]	; (80076c0 <mfg_read_next_mmr+0x4c>)
 80076aa:	680a      	ldr	r2, [r1, #0]
 80076ac:	3201      	adds	r2, #1
 80076ae:	600a      	str	r2, [r1, #0]
    return 0;
 80076b0:	e001      	b.n	80076b6 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
 80076b2:	f06f 030a 	mvn.w	r3, #10
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
 80076ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076be:	e7fa      	b.n	80076b6 <mfg_read_next_mmr+0x42>
 80076c0:	20003388 	.word	0x20003388
 80076c4:	20003370 	.word	0x20003370

080076c8 <mfg_open_flash_area>:
{
 80076c8:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
 80076ca:	7883      	ldrb	r3, [r0, #2]
 80076cc:	4a0b      	ldr	r2, [pc, #44]	; (80076fc <mfg_open_flash_area+0x34>)
 80076ce:	6812      	ldr	r2, [r2, #0]
 80076d0:	4293      	cmp	r3, r2
 80076d2:	da0a      	bge.n	80076ea <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
 80076d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80076d8:	009a      	lsls	r2, r3, #2
 80076da:	4b09      	ldr	r3, [pc, #36]	; (8007700 <mfg_open_flash_area+0x38>)
 80076dc:	5c98      	ldrb	r0, [r3, r2]
 80076de:	f7ff fed9 	bl	8007494 <flash_area_open>
    if (rc != 0) {
 80076e2:	4603      	mov	r3, r0
 80076e4:	b938      	cbnz	r0, 80076f6 <mfg_open_flash_area+0x2e>
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
 80076ea:	2300      	movs	r3, #0
 80076ec:	461a      	mov	r2, r3
 80076ee:	4619      	mov	r1, r3
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fa f881 	bl	80017f8 <__assert_func>
        return SYS_EIO;
 80076f6:	f06f 0304 	mvn.w	r3, #4
 80076fa:	e7f4      	b.n	80076e6 <mfg_open_flash_area+0x1e>
 80076fc:	20003388 	.word	0x20003388
 8007700:	20003370 	.word	0x20003370

08007704 <mfg_read_tlv_body>:
{
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	4606      	mov	r6, r0
 800770a:	460c      	mov	r4, r1
 800770c:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
 800770e:	a901      	add	r1, sp, #4
 8007710:	f7ff ffda 	bl	80076c8 <mfg_open_flash_area>
    if (rc != 0) {
 8007714:	4603      	mov	r3, r0
 8007716:	b110      	cbz	r0, 800771e <mfg_read_tlv_body+0x1a>
}
 8007718:	4618      	mov	r0, r3
 800771a:	b002      	add	sp, #8
 800771c:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
 800771e:	462a      	mov	r2, r5
 8007720:	2100      	movs	r1, #0
 8007722:	4620      	mov	r0, r4
 8007724:	f7fb fcd9 	bl	80030da <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
 8007728:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
 800772a:	6871      	ldr	r1, [r6, #4]
 800772c:	42ab      	cmp	r3, r5
 800772e:	bfa8      	it	ge
 8007730:	462b      	movge	r3, r5
 8007732:	4622      	mov	r2, r4
 8007734:	3102      	adds	r1, #2
 8007736:	9801      	ldr	r0, [sp, #4]
 8007738:	f7ff fecc 	bl	80074d4 <flash_area_read>
    if (rc != 0) {
 800773c:	4603      	mov	r3, r0
 800773e:	2800      	cmp	r0, #0
 8007740:	d0ea      	beq.n	8007718 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
 8007742:	f06f 0304 	mvn.w	r3, #4
 8007746:	e7e7      	b.n	8007718 <mfg_read_tlv_body+0x14>

08007748 <mfg_seek_next>:
{
 8007748:	b510      	push	{r4, lr}
 800774a:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
 800774c:	4620      	mov	r0, r4
 800774e:	f7ff ff0f 	bl	8007570 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
 8007752:	f110 0f06 	cmn.w	r0, #6
 8007756:	d0f9      	beq.n	800774c <mfg_seek_next+0x4>
}
 8007758:	bd10      	pop	{r4, pc}

0800775a <mfg_seek_next_with_type>:
{
 800775a:	b538      	push	{r3, r4, r5, lr}
 800775c:	4604      	mov	r4, r0
 800775e:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
 8007760:	4620      	mov	r0, r4
 8007762:	f7ff fff1 	bl	8007748 <mfg_seek_next>
        if (rc != 0) {
 8007766:	4602      	mov	r2, r0
 8007768:	b910      	cbnz	r0, 8007770 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
 800776a:	7823      	ldrb	r3, [r4, #0]
 800776c:	42ab      	cmp	r3, r5
 800776e:	d1f7      	bne.n	8007760 <mfg_seek_next_with_type+0x6>
}
 8007770:	4610      	mov	r0, r2
 8007772:	bd38      	pop	{r3, r4, r5, pc}

08007774 <mfg_read_tlv_flash_area>:
{
 8007774:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
 8007776:	220a      	movs	r2, #10
 8007778:	f7ff ffc4 	bl	8007704 <mfg_read_tlv_body>
}
 800777c:	bd08      	pop	{r3, pc}

0800777e <mfg_read_tlv_mmr_ref>:
{
 800777e:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
 8007780:	2201      	movs	r2, #1
 8007782:	f7ff ffbf 	bl	8007704 <mfg_read_tlv_body>
}
 8007786:	bd08      	pop	{r3, pc}

08007788 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
 8007788:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
 800778a:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <mfg_init+0x30>)
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	b94b      	cbnz	r3, 80077a4 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
 8007790:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <mfg_init+0x30>)
 8007792:	2201      	movs	r2, #1
 8007794:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 8007796:	4b09      	ldr	r3, [pc, #36]	; (80077bc <mfg_init+0x34>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b123      	cbz	r3, 80077a6 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
 800779c:	2000      	movs	r0, #0
 800779e:	f7ff ff69 	bl	8007674 <mfg_read_next_mmr>
    if (rc != 0) {
 80077a2:	b128      	cbz	r0, 80077b0 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
 80077a4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
 80077a6:	461a      	mov	r2, r3
 80077a8:	4619      	mov	r1, r3
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fa f824 	bl	80017f8 <__assert_func>
    rc = mfg_read_mmr_refs();
 80077b0:	f000 f80e 	bl	80077d0 <mfg_read_mmr_refs>
err:
 80077b4:	e7f6      	b.n	80077a4 <mfg_init+0x1c>
 80077b6:	bf00      	nop
 80077b8:	2000336c 	.word	0x2000336c
 80077bc:	20003494 	.word	0x20003494

080077c0 <mfg_open>:
{
 80077c0:	b510      	push	{r4, lr}
 80077c2:	4604      	mov	r4, r0
    mfg_init();
 80077c4:	f7ff ffe0 	bl	8007788 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
 80077c8:	2300      	movs	r3, #0
 80077ca:	6023      	str	r3, [r4, #0]
 80077cc:	6063      	str	r3, [r4, #4]
}
 80077ce:	bd10      	pop	{r4, pc}

080077d0 <mfg_read_mmr_refs>:
{
 80077d0:	b500      	push	{lr}
 80077d2:	b085      	sub	sp, #20
    mfg_open(&reader);
 80077d4:	a801      	add	r0, sp, #4
 80077d6:	f7ff fff3 	bl	80077c0 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
 80077da:	2104      	movs	r1, #4
 80077dc:	eb0d 0001 	add.w	r0, sp, r1
 80077e0:	f7ff ffbb 	bl	800775a <mfg_seek_next_with_type>
 80077e4:	4603      	mov	r3, r0
        switch (rc) {
 80077e6:	f110 0f0f 	cmn.w	r0, #15
 80077ea:	d004      	beq.n	80077f6 <mfg_read_mmr_refs+0x26>
 80077ec:	b128      	cbz	r0, 80077fa <mfg_read_mmr_refs+0x2a>
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	b005      	add	sp, #20
 80077f2:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	e7f9      	b.n	80077ee <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
 80077fa:	a903      	add	r1, sp, #12
 80077fc:	a801      	add	r0, sp, #4
 80077fe:	f7ff ffbe 	bl	800777e <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
 8007802:	4603      	mov	r3, r0
 8007804:	2800      	cmp	r0, #0
 8007806:	d1f2      	bne.n	80077ee <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
 8007808:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800780c:	f7ff ff32 	bl	8007674 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
 8007810:	4603      	mov	r3, r0
 8007812:	2800      	cmp	r0, #0
 8007814:	d0e1      	beq.n	80077da <mfg_read_mmr_refs+0xa>
 8007816:	f110 0f0b 	cmn.w	r0, #11
 800781a:	d0de      	beq.n	80077da <mfg_read_mmr_refs+0xa>
 800781c:	e7e7      	b.n	80077ee <mfg_read_mmr_refs+0x1e>

0800781e <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
 800781e:	b570      	push	{r4, r5, r6, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	460c      	mov	r4, r1
 8007824:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
 8007826:	b29d      	uxth	r5, r3
 8007828:	9b07      	ldr	r3, [sp, #28]
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	4603      	mov	r3, r0
 800782e:	9a06      	ldr	r2, [sp, #24]
 8007830:	4629      	mov	r1, r5
 8007832:	4620      	mov	r0, r4
 8007834:	f7fa fb86 	bl	8001f44 <os_mempool_init>
    if (rc != 0) {
 8007838:	b108      	cbz	r0, 800783e <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
 800783a:	b002      	add	sp, #8
 800783c:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
 800783e:	462b      	mov	r3, r5
 8007840:	9a06      	ldr	r2, [sp, #24]
 8007842:	b292      	uxth	r2, r2
 8007844:	4621      	mov	r1, r4
 8007846:	4630      	mov	r0, r6
 8007848:	f7fb f906 	bl	8002a58 <os_mbuf_pool_init>
 800784c:	e7f5      	b.n	800783a <mem_init_mbuf_pool+0x1c>
	...

08007850 <__wrap_coap_receive>:
#endif  //  MYNEWT_VAL(NRF24L01)

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
 8007850:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
 8007852:	4803      	ldr	r0, [pc, #12]	; (8007860 <__wrap_coap_receive+0x10>)
 8007854:	f7fe fd6c 	bl	8006330 <console_printf>
    return -1;
}
 8007858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800785c:	bd08      	pop	{r3, pc}
 800785e:	bf00      	nop
 8007860:	0800da70 	.word	0x0800da70

08007864 <vsscanf>:
{
	return (int)(bitmap[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1;
}

int vsscanf(const char *buffer, const char *format, va_list ap)
{
 8007864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007868:	b08f      	sub	sp, #60	; 0x3c
 800786a:	9002      	str	r0, [sp, #8]
 800786c:	9203      	str	r2, [sp, #12]
	const char *p = format;
	char ch;
	unsigned char uc;
	const char *q = buffer;
 800786e:	4605      	mov	r5, r0
	enum bail bail = bail_none;
	int sign;
	int converted = 0;	/* Successful conversions */
	unsigned long matchmap[((1 << CHAR_BIT) + (LONG_BIT - 1)) / LONG_BIT];
	int matchinv = 0;	/* Is match map inverted? */
	unsigned char range_start = 0;
 8007870:	f04f 0a00 	mov.w	sl, #0
	int matchinv = 0;	/* Is match map inverted? */
 8007874:	46d1      	mov	r9, sl
	int converted = 0;	/* Successful conversions */
 8007876:	f8cd a000 	str.w	sl, [sp]
	char *sarg = NULL;	/* %s %c or %[ string argument */
 800787a:	4657      	mov	r7, sl
	} state = st_normal;
 800787c:	4652      	mov	r2, sl
	enum flags flags = 0;
 800787e:	46d3      	mov	fp, sl
	unsigned int width = UINT_MAX;
 8007880:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	int rank = rank_int;	/* Default rank */
 8007884:	f8cd a004 	str.w	sl, [sp, #4]
 8007888:	4623      	mov	r3, r4
 800788a:	4654      	mov	r4, sl
 800788c:	4698      	mov	r8, r3
	(void)sign;

	while ((ch = *p++) && !bail) {
 800788e:	e1f6      	b.n	8007c7e <vsscanf+0x41a>
		switch (state) {
		case st_normal:
			if (ch == '%') {
 8007890:	2b25      	cmp	r3, #37	; 0x25
 8007892:	f000 8270 	beq.w	8007d76 <vsscanf+0x512>
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
 8007896:	2b20      	cmp	r3, #32
 8007898:	d00b      	beq.n	80078b2 <vsscanf+0x4e>
 800789a:	2b0a      	cmp	r3, #10
 800789c:	d009      	beq.n	80078b2 <vsscanf+0x4e>
 800789e:	2b09      	cmp	r3, #9
 80078a0:	d007      	beq.n	80078b2 <vsscanf+0x4e>
 80078a2:	2b0d      	cmp	r3, #13
 80078a4:	d005      	beq.n	80078b2 <vsscanf+0x4e>
				rank = rank_int;
				width = UINT_MAX;
			} else if (isspace((unsigned char)ch)) {
				q = skipspace(q);
			} else {
				if (*q == ch)
 80078a6:	7829      	ldrb	r1, [r5, #0]
 80078a8:	4299      	cmp	r1, r3
 80078aa:	d00c      	beq.n	80078c6 <vsscanf+0x62>
					q++;
				else
					bail = bail_err; /* Match failure */
 80078ac:	2402      	movs	r4, #2
 80078ae:	e1e5      	b.n	8007c7c <vsscanf+0x418>
		p++;
 80078b0:	3501      	adds	r5, #1
	while (isspace((unsigned char)*p))
 80078b2:	782b      	ldrb	r3, [r5, #0]
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d0fb      	beq.n	80078b0 <vsscanf+0x4c>
 80078b8:	2b0a      	cmp	r3, #10
 80078ba:	d0f9      	beq.n	80078b0 <vsscanf+0x4c>
 80078bc:	2b09      	cmp	r3, #9
 80078be:	d0f7      	beq.n	80078b0 <vsscanf+0x4c>
 80078c0:	2b0d      	cmp	r3, #13
 80078c2:	d0f5      	beq.n	80078b0 <vsscanf+0x4c>
 80078c4:	e1da      	b.n	8007c7c <vsscanf+0x418>
					q++;
 80078c6:	3501      	adds	r5, #1
 80078c8:	e1d8      	b.n	8007c7c <vsscanf+0x418>
			}
			break;

		case st_flags:
			switch (ch) {
 80078ca:	2b2a      	cmp	r3, #42	; 0x2a
 80078cc:	d00c      	beq.n	80078e8 <vsscanf+0x84>
 80078ce:	f0c0 825a 	bcc.w	8007d86 <vsscanf+0x522>
 80078d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80078d6:	2a09      	cmp	r2, #9
 80078d8:	f200 8255 	bhi.w	8007d86 <vsscanf+0x522>
			case '*':
				flags |= FL_SPLAT;
				break;
			case '0'...'9':
				width = (ch - '0');
 80078dc:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
				state = st_width;
				flags |= FL_WIDTH;
 80078e0:	f04b 0b04 	orr.w	fp, fp, #4
				state = st_width;
 80078e4:	2202      	movs	r2, #2
				break;
 80078e6:	e1c9      	b.n	8007c7c <vsscanf+0x418>
				flags |= FL_SPLAT;
 80078e8:	f04b 0b01 	orr.w	fp, fp, #1
				break;
 80078ec:	e1c6      	b.n	8007c7c <vsscanf+0x418>
				break;
			}
			break;

		case st_width:
			if (ch >= '0' && ch <= '9') {
 80078ee:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 80078f2:	b2c0      	uxtb	r0, r0
 80078f4:	2809      	cmp	r0, #9
 80078f6:	f200 8249 	bhi.w	8007d8c <vsscanf+0x528>
				width = width * 10 + (ch - '0');
 80078fa:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80078fe:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8007902:	eb03 0801 	add.w	r8, r3, r1
 8007906:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800790a:	e1b7      	b.n	8007c7c <vsscanf+0x418>
				p--;	/* Process this character again */
			}
			break;

		case st_modifiers:
			switch (ch) {
 800790c:	f1a3 014c 	sub.w	r1, r3, #76	; 0x4c
 8007910:	292e      	cmp	r1, #46	; 0x2e
 8007912:	d83b      	bhi.n	800798c <vsscanf+0x128>
 8007914:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007918:	003a002f 	.word	0x003a002f
 800791c:	003a003a 	.word	0x003a003a
 8007920:	003a003a 	.word	0x003a003a
 8007924:	003a003a 	.word	0x003a003a
 8007928:	003a003a 	.word	0x003a003a
 800792c:	003a003a 	.word	0x003a003a
 8007930:	003a003a 	.word	0x003a003a
 8007934:	003a003a 	.word	0x003a003a
 8007938:	003a003a 	.word	0x003a003a
 800793c:	003a003a 	.word	0x003a003a
 8007940:	003a003a 	.word	0x003a003a
 8007944:	003a003a 	.word	0x003a003a
 8007948:	003a003a 	.word	0x003a003a
 800794c:	003a003a 	.word	0x003a003a
 8007950:	003a0032 	.word	0x003a0032
 8007954:	003a002f 	.word	0x003a002f
 8007958:	003a0036 	.word	0x003a0036
 800795c:	003a003a 	.word	0x003a003a
 8007960:	002f003a 	.word	0x002f003a
 8007964:	003a003a 	.word	0x003a003a
 8007968:	003a023d 	.word	0x003a023d
 800796c:	003a003a 	.word	0x003a003a
 8007970:	003a003a 	.word	0x003a003a
 8007974:	023d      	.short	0x023d
				break;
			case 'l':
				rank++;	/* Longer rank */
				break;
			case 'j':
				rank = INTMAX_RANK;
 8007976:	2302      	movs	r3, #2
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	e17f      	b.n	8007c7c <vsscanf+0x418>
				rank--;	/* Shorter rank */
 800797c:	9b01      	ldr	r3, [sp, #4]
 800797e:	3b01      	subs	r3, #1
 8007980:	9301      	str	r3, [sp, #4]
				break;
 8007982:	e17b      	b.n	8007c7c <vsscanf+0x418>
				rank++;	/* Longer rank */
 8007984:	9b01      	ldr	r3, [sp, #4]
 8007986:	3301      	adds	r3, #1
 8007988:	9301      	str	r3, [sp, #4]
				break;
 800798a:	e177      	b.n	8007c7c <vsscanf+0x418>
				/* Output modifiers - terminal sequences */
				/* Next state will be normal */
				state = st_normal;

				/* Canonicalize rank */
				if (rank < MIN_RANK)
 800798c:	9a01      	ldr	r2, [sp, #4]
 800798e:	f112 0f02 	cmn.w	r2, #2
 8007992:	db04      	blt.n	800799e <vsscanf+0x13a>
					rank = MIN_RANK;
				else if (rank > MAX_RANK)
 8007994:	2a02      	cmp	r2, #2
 8007996:	dd05      	ble.n	80079a4 <vsscanf+0x140>
					rank = MAX_RANK;
 8007998:	2202      	movs	r2, #2
 800799a:	9201      	str	r2, [sp, #4]
 800799c:	e002      	b.n	80079a4 <vsscanf+0x140>
					rank = MIN_RANK;
 800799e:	f06f 0201 	mvn.w	r2, #1
 80079a2:	9201      	str	r2, [sp, #4]

				switch (ch) {
 80079a4:	3b25      	subs	r3, #37	; 0x25
 80079a6:	2b53      	cmp	r3, #83	; 0x53
 80079a8:	f200 81f6 	bhi.w	8007d98 <vsscanf+0x534>
 80079ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80079b0:	01f4014e 	.word	0x01f4014e
 80079b4:	01f401f4 	.word	0x01f401f4
 80079b8:	01f401f4 	.word	0x01f401f4
 80079bc:	01f401f4 	.word	0x01f401f4
 80079c0:	01f401f4 	.word	0x01f401f4
 80079c4:	01f401f4 	.word	0x01f401f4
 80079c8:	01f401f4 	.word	0x01f401f4
 80079cc:	01f401f4 	.word	0x01f401f4
 80079d0:	01f401f4 	.word	0x01f401f4
 80079d4:	01f401f4 	.word	0x01f401f4
 80079d8:	01f401f4 	.word	0x01f401f4
 80079dc:	01f401f4 	.word	0x01f401f4
 80079e0:	01f401f4 	.word	0x01f401f4
 80079e4:	01f401f4 	.word	0x01f401f4
 80079e8:	01f401f4 	.word	0x01f401f4
 80079ec:	01f401f4 	.word	0x01f401f4
 80079f0:	01f401f4 	.word	0x01f401f4
 80079f4:	01f401f4 	.word	0x01f401f4
 80079f8:	01f401f4 	.word	0x01f401f4
 80079fc:	01f401f4 	.word	0x01f401f4
 8007a00:	01f401f4 	.word	0x01f401f4
 8007a04:	007801f4 	.word	0x007801f4
 8007a08:	01f401f4 	.word	0x01f401f4
 8007a0c:	01f401f4 	.word	0x01f401f4
 8007a10:	01f401f4 	.word	0x01f401f4
 8007a14:	005a01f4 	.word	0x005a01f4
 8007a18:	01f401f4 	.word	0x01f401f4
 8007a1c:	01f4013c 	.word	0x01f4013c
 8007a20:	01f401f4 	.word	0x01f401f4
 8007a24:	01f401f4 	.word	0x01f401f4
 8007a28:	01f401f4 	.word	0x01f401f4
 8007a2c:	005400cb 	.word	0x005400cb
 8007a30:	01f401f4 	.word	0x01f401f4
 8007a34:	01f401f4 	.word	0x01f401f4
 8007a38:	01f4007d 	.word	0x01f4007d
 8007a3c:	01f401f4 	.word	0x01f401f4
 8007a40:	005c01f4 	.word	0x005c01f4
 8007a44:	00780056 	.word	0x00780056
 8007a48:	01f401f4 	.word	0x01f401f4
 8007a4c:	01f400f7 	.word	0x01f400f7
 8007a50:	01f40058 	.word	0x01f40058
 8007a54:	005a01f4 	.word	0x005a01f4
					base = 0;
					sign = 1;
					goto scan_int;

				case 'd':	/* Decimal integer */
					base = 10;
 8007a58:	220a      	movs	r2, #10
					sign = 1;
					goto scan_int;
 8007a5a:	e029      	b.n	8007ab0 <vsscanf+0x24c>

				case 'o':	/* Octal integer */
					base = 8;
 8007a5c:	2208      	movs	r2, #8
					sign = 0;
					goto scan_int;
 8007a5e:	e027      	b.n	8007ab0 <vsscanf+0x24c>

				case 'u':	/* Unsigned decimal integer */
					base = 10;
 8007a60:	220a      	movs	r2, #10
					sign = 0;
					goto scan_int;
 8007a62:	e025      	b.n	8007ab0 <vsscanf+0x24c>

				case 'x':	/* Hexadecimal integer */
				case 'X':
					base = 16;
 8007a64:	2210      	movs	r2, #16
					sign = 0;
					goto scan_int;
 8007a66:	e023      	b.n	8007ab0 <vsscanf+0x24c>

				case 'n':	/* # of characters consumed */
					val = (q - buffer);
 8007a68:	9b02      	ldr	r3, [sp, #8]
 8007a6a:	1ae8      	subs	r0, r5, r3
 8007a6c:	17c1      	asrs	r1, r0, #31
					if (!(flags & FL_SPLAT))
						converted++;
					/* fall through */

				      set_integer:
					if (!(flags & FL_SPLAT)) {
 8007a6e:	f01b 0f01 	tst.w	fp, #1
 8007a72:	f040 8197 	bne.w	8007da4 <vsscanf+0x540>
						switch (rank) {
 8007a76:	9b01      	ldr	r3, [sp, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d04e      	beq.n	8007b1a <vsscanf+0x2b6>
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dd37      	ble.n	8007af0 <vsscanf+0x28c>
 8007a80:	9a01      	ldr	r2, [sp, #4]
 8007a82:	2a02      	cmp	r2, #2
 8007a84:	d057      	beq.n	8007b36 <vsscanf+0x2d2>
 8007a86:	db4f      	blt.n	8007b28 <vsscanf+0x2c4>
 8007a88:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	f040 818b 	bne.w	8007da8 <vsscanf+0x544>
							*va_arg(ap,
								unsigned long
								long *) = val;
							break;
						case rank_ptr:
							*va_arg(ap, void **) =
 8007a92:	9b03      	ldr	r3, [sp, #12]
 8007a94:	1d1a      	adds	r2, r3, #4
 8007a96:	9203      	str	r2, [sp, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6018      	str	r0, [r3, #0]
				state = st_normal;
 8007a9c:	2200      	movs	r2, #0
								(void *)
								(uintptr_t)val;
							break;
 8007a9e:	e0ed      	b.n	8007c7c <vsscanf+0x418>
					base = 0;
 8007aa0:	2200      	movs	r2, #0
					rank = rank_ptr;
 8007aa2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	e002      	b.n	8007ab0 <vsscanf+0x24c>
					base = 0;
 8007aaa:	2200      	movs	r2, #0
 8007aac:	e000      	b.n	8007ab0 <vsscanf+0x24c>
		p++;
 8007aae:	3501      	adds	r5, #1
	while (isspace((unsigned char)*p))
 8007ab0:	782b      	ldrb	r3, [r5, #0]
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d0fb      	beq.n	8007aae <vsscanf+0x24a>
 8007ab6:	2b0a      	cmp	r3, #10
 8007ab8:	d0f9      	beq.n	8007aae <vsscanf+0x24a>
 8007aba:	2b09      	cmp	r3, #9
 8007abc:	d0f7      	beq.n	8007aae <vsscanf+0x24a>
 8007abe:	2b0d      	cmp	r3, #13
 8007ac0:	d0f5      	beq.n	8007aae <vsscanf+0x24a>
					if (!*q) {
 8007ac2:	b913      	cbnz	r3, 8007aca <vsscanf+0x266>
						bail = bail_eof;
 8007ac4:	2401      	movs	r4, #1
				state = st_normal;
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	e0d8      	b.n	8007c7c <vsscanf+0x418>
					val =
 8007aca:	4643      	mov	r3, r8
 8007acc:	a90d      	add	r1, sp, #52	; 0x34
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f004 fd06 	bl	800c4e0 <strntoumax>
					if (qq == q) {
 8007ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ad6:	42ab      	cmp	r3, r5
 8007ad8:	f000 8161 	beq.w	8007d9e <vsscanf+0x53a>
					if (!(flags & FL_SPLAT))
 8007adc:	f01b 0f01 	tst.w	fp, #1
 8007ae0:	d104      	bne.n	8007aec <vsscanf+0x288>
						converted++;
 8007ae2:	9a00      	ldr	r2, [sp, #0]
 8007ae4:	3201      	adds	r2, #1
 8007ae6:	9200      	str	r2, [sp, #0]
					q = qq;
 8007ae8:	461d      	mov	r5, r3
 8007aea:	e7c0      	b.n	8007a6e <vsscanf+0x20a>
 8007aec:	461d      	mov	r5, r3
 8007aee:	e7be      	b.n	8007a6e <vsscanf+0x20a>
						switch (rank) {
 8007af0:	f113 0f02 	cmn.w	r3, #2
 8007af4:	d00a      	beq.n	8007b0c <vsscanf+0x2a8>
 8007af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007afa:	f040 8155 	bne.w	8007da8 <vsscanf+0x544>
							*va_arg(ap,
 8007afe:	9b03      	ldr	r3, [sp, #12]
 8007b00:	1d1a      	adds	r2, r3, #4
 8007b02:	9203      	str	r2, [sp, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
								*) = val;
 8007b06:	8018      	strh	r0, [r3, #0]
				state = st_normal;
 8007b08:	2200      	movs	r2, #0
							break;
 8007b0a:	e0b7      	b.n	8007c7c <vsscanf+0x418>
							*va_arg(ap,
 8007b0c:	9b03      	ldr	r3, [sp, #12]
 8007b0e:	1d1a      	adds	r2, r3, #4
 8007b10:	9203      	str	r2, [sp, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
								= val;
 8007b14:	7018      	strb	r0, [r3, #0]
				state = st_normal;
 8007b16:	2200      	movs	r2, #0
							break;
 8007b18:	e0b0      	b.n	8007c7c <vsscanf+0x418>
							*va_arg(ap,
 8007b1a:	9b03      	ldr	r3, [sp, #12]
 8007b1c:	1d1a      	adds	r2, r3, #4
 8007b1e:	9203      	str	r2, [sp, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
							    = val;
 8007b22:	6018      	str	r0, [r3, #0]
				state = st_normal;
 8007b24:	2200      	movs	r2, #0
							break;
 8007b26:	e0a9      	b.n	8007c7c <vsscanf+0x418>
							*va_arg(ap,
 8007b28:	9b03      	ldr	r3, [sp, #12]
 8007b2a:	1d1a      	adds	r2, r3, #4
 8007b2c:	9203      	str	r2, [sp, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
								= val;
 8007b30:	6018      	str	r0, [r3, #0]
				state = st_normal;
 8007b32:	2200      	movs	r2, #0
							break;
 8007b34:	e0a2      	b.n	8007c7c <vsscanf+0x418>
							*va_arg(ap,
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	1d1a      	adds	r2, r3, #4
 8007b3a:	9203      	str	r2, [sp, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
								long *) = val;
 8007b3e:	e9c3 0100 	strd	r0, r1, [r3]
				state = st_normal;
 8007b42:	2200      	movs	r2, #0
							break;
 8007b44:	e09a      	b.n	8007c7c <vsscanf+0x418>
					}
					break;

				case 'c':	/* Character */
					/* Default width == 1 */
					width = (flags & FL_WIDTH) ? width : 1;
 8007b46:	f01b 0f04 	tst.w	fp, #4
 8007b4a:	d011      	beq.n	8007b70 <vsscanf+0x30c>
 8007b4c:	4643      	mov	r3, r8
					if (flags & FL_SPLAT) {
 8007b4e:	f01b 0f01 	tst.w	fp, #1
 8007b52:	d10f      	bne.n	8007b74 <vsscanf+0x310>
								bail = bail_eof;
								break;
							}
						}
					} else {
						sarg = va_arg(ap, char *);
 8007b54:	9a03      	ldr	r2, [sp, #12]
 8007b56:	1d11      	adds	r1, r2, #4
 8007b58:	9103      	str	r1, [sp, #12]
 8007b5a:	6817      	ldr	r7, [r2, #0]
						while (width--) {
 8007b5c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007b60:	b1ab      	cbz	r3, 8007b8e <vsscanf+0x32a>
							if (!*q) {
 8007b62:	782b      	ldrb	r3, [r5, #0]
 8007b64:	b193      	cbz	r3, 8007b8c <vsscanf+0x328>
								bail = bail_eof;
								break;
							}
							*sarg++ = *q++;
 8007b66:	3501      	adds	r5, #1
 8007b68:	703b      	strb	r3, [r7, #0]
 8007b6a:	3701      	adds	r7, #1
						while (width--) {
 8007b6c:	4643      	mov	r3, r8
 8007b6e:	e7f5      	b.n	8007b5c <vsscanf+0x2f8>
					width = (flags & FL_WIDTH) ? width : 1;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e7ec      	b.n	8007b4e <vsscanf+0x2ea>
						while (width--) {
 8007b74:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007b78:	b133      	cbz	r3, 8007b88 <vsscanf+0x324>
							if (!*q) {
 8007b7a:	782a      	ldrb	r2, [r5, #0]
						while (width--) {
 8007b7c:	4643      	mov	r3, r8
							if (!*q) {
 8007b7e:	2a00      	cmp	r2, #0
 8007b80:	d1f8      	bne.n	8007b74 <vsscanf+0x310>
								bail = bail_eof;
 8007b82:	2401      	movs	r4, #1
				state = st_normal;
 8007b84:	2200      	movs	r2, #0
 8007b86:	e079      	b.n	8007c7c <vsscanf+0x418>
 8007b88:	2200      	movs	r2, #0
 8007b8a:	e077      	b.n	8007c7c <vsscanf+0x418>
								bail = bail_eof;
 8007b8c:	2401      	movs	r4, #1
						}
						if (!bail)
 8007b8e:	2c00      	cmp	r4, #0
 8007b90:	f040 810c 	bne.w	8007dac <vsscanf+0x548>
							converted++;
 8007b94:	9b00      	ldr	r3, [sp, #0]
 8007b96:	3301      	adds	r3, #1
 8007b98:	9300      	str	r3, [sp, #0]
				state = st_normal;
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	e06e      	b.n	8007c7c <vsscanf+0x418>
					}
					break;

				case 's':	/* String */
					uc = 1;	/* Anything nonzero */
					if (flags & FL_SPLAT) {
 8007b9e:	f01b 0f01 	tst.w	fp, #1
 8007ba2:	d010      	beq.n	8007bc6 <vsscanf+0x362>
					uc = 1;	/* Anything nonzero */
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	4641      	mov	r1, r8
						while (width-- && (uc = *q) &&
 8007ba8:	1e4a      	subs	r2, r1, #1
 8007baa:	b389      	cbz	r1, 8007c10 <vsscanf+0x3ac>
 8007bac:	782b      	ldrb	r3, [r5, #0]
 8007bae:	b38b      	cbz	r3, 8007c14 <vsscanf+0x3b0>
 8007bb0:	2b20      	cmp	r3, #32
 8007bb2:	d031      	beq.n	8007c18 <vsscanf+0x3b4>
 8007bb4:	2b0a      	cmp	r3, #10
 8007bb6:	d031      	beq.n	8007c1c <vsscanf+0x3b8>
 8007bb8:	2b09      	cmp	r3, #9
 8007bba:	d031      	beq.n	8007c20 <vsscanf+0x3bc>
 8007bbc:	2b0d      	cmp	r3, #13
 8007bbe:	d031      	beq.n	8007c24 <vsscanf+0x3c0>
						       !isspace(uc)) {
							q++;
 8007bc0:	3501      	adds	r5, #1
						while (width-- && (uc = *q) &&
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	e7f0      	b.n	8007ba8 <vsscanf+0x344>
						}
					} else {
						char *sp;
						sp = sarg = va_arg(ap, char *);
 8007bc6:	9b03      	ldr	r3, [sp, #12]
 8007bc8:	1d1a      	adds	r2, r3, #4
 8007bca:	9203      	str	r2, [sp, #12]
 8007bcc:	681f      	ldr	r7, [r3, #0]
 8007bce:	463a      	mov	r2, r7
						while (width-- && (uc = *q) &&
 8007bd0:	4641      	mov	r1, r8
					uc = 1;	/* Anything nonzero */
 8007bd2:	2301      	movs	r3, #1
						while (width-- && (uc = *q) &&
 8007bd4:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8007bd8:	b171      	cbz	r1, 8007bf8 <vsscanf+0x394>
 8007bda:	782b      	ldrb	r3, [r5, #0]
 8007bdc:	b163      	cbz	r3, 8007bf8 <vsscanf+0x394>
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d00a      	beq.n	8007bf8 <vsscanf+0x394>
 8007be2:	2b0a      	cmp	r3, #10
 8007be4:	d008      	beq.n	8007bf8 <vsscanf+0x394>
 8007be6:	2b09      	cmp	r3, #9
 8007be8:	d006      	beq.n	8007bf8 <vsscanf+0x394>
 8007bea:	2b0d      	cmp	r3, #13
 8007bec:	d004      	beq.n	8007bf8 <vsscanf+0x394>
						       !isspace(uc)) {
							*sp++ = uc;
 8007bee:	7013      	strb	r3, [r2, #0]
							q++;
 8007bf0:	3501      	adds	r5, #1
						while (width-- && (uc = *q) &&
 8007bf2:	4641      	mov	r1, r8
							*sp++ = uc;
 8007bf4:	3201      	adds	r2, #1
 8007bf6:	e7ed      	b.n	8007bd4 <vsscanf+0x370>
						}
						if (sarg != sp) {
 8007bf8:	42ba      	cmp	r2, r7
 8007bfa:	d004      	beq.n	8007c06 <vsscanf+0x3a2>
							/* Terminate output */
							*sp = '\0';
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	7011      	strb	r1, [r2, #0]
							converted++;
 8007c00:	9a00      	ldr	r2, [sp, #0]
 8007c02:	3201      	adds	r2, #1
 8007c04:	9200      	str	r2, [sp, #0]
						}
					}
					if (!uc)
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 80d2 	beq.w	8007db0 <vsscanf+0x54c>
				state = st_normal;
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	e035      	b.n	8007c7c <vsscanf+0x418>
						while (width-- && (uc = *q) &&
 8007c10:	4690      	mov	r8, r2
 8007c12:	e7f8      	b.n	8007c06 <vsscanf+0x3a2>
 8007c14:	4690      	mov	r8, r2
 8007c16:	e7f6      	b.n	8007c06 <vsscanf+0x3a2>
 8007c18:	4690      	mov	r8, r2
 8007c1a:	e7f4      	b.n	8007c06 <vsscanf+0x3a2>
 8007c1c:	4690      	mov	r8, r2
 8007c1e:	e7f2      	b.n	8007c06 <vsscanf+0x3a2>
 8007c20:	4690      	mov	r8, r2
 8007c22:	e7f0      	b.n	8007c06 <vsscanf+0x3a2>
 8007c24:	4690      	mov	r8, r2
 8007c26:	e7ee      	b.n	8007c06 <vsscanf+0x3a2>
						bail = bail_eof;
					break;

				case '[':	/* Character range */
					sarg = (flags & FL_SPLAT) ? NULL
						: va_arg(ap, char *);
 8007c28:	f01b 0f01 	tst.w	fp, #1
 8007c2c:	d104      	bne.n	8007c38 <vsscanf+0x3d4>
 8007c2e:	9b03      	ldr	r3, [sp, #12]
 8007c30:	1d1a      	adds	r2, r3, #4
 8007c32:	9203      	str	r2, [sp, #12]
 8007c34:	681f      	ldr	r7, [r3, #0]
 8007c36:	e000      	b.n	8007c3a <vsscanf+0x3d6>
 8007c38:	2700      	movs	r7, #0
					state = st_match_init;
					matchinv = 0;
					memset(matchmap, 0, sizeof matchmap);
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	a805      	add	r0, sp, #20
 8007c40:	f7fb fa4b 	bl	80030da <memset>
					matchinv = 0;
 8007c44:	f04f 0900 	mov.w	r9, #0
					state = st_match_init;
 8007c48:	2204      	movs	r2, #4
					break;
 8007c4a:	e017      	b.n	8007c7c <vsscanf+0x418>

				case '%':	/* %% sequence */
					if (*q == '%')
 8007c4c:	782b      	ldrb	r3, [r5, #0]
 8007c4e:	2b25      	cmp	r3, #37	; 0x25
 8007c50:	d002      	beq.n	8007c58 <vsscanf+0x3f4>
						q++;
					else
						bail = bail_err;
 8007c52:	2402      	movs	r4, #2
				state = st_normal;
 8007c54:	2200      	movs	r2, #0
 8007c56:	e011      	b.n	8007c7c <vsscanf+0x418>
						q++;
 8007c58:	3501      	adds	r5, #1
				state = st_normal;
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	e00e      	b.n	8007c7c <vsscanf+0x418>
				}
			}
			break;

		case st_match_init:	/* Initial state for %[ match */
			if (ch == '^' && !(flags & FL_INV)) {
 8007c5e:	2b5e      	cmp	r3, #94	; 0x5e
 8007c60:	d028      	beq.n	8007cb4 <vsscanf+0x450>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 8007c62:	0958      	lsrs	r0, r3, #5
 8007c64:	a905      	add	r1, sp, #20
 8007c66:	f003 031f 	and.w	r3, r3, #31
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c70:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8007c74:	431a      	orrs	r2, r3
 8007c76:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
				matchinv = 1;
			} else {
				set_bit(matchmap, (unsigned char)ch);
				state = st_match;
 8007c7a:	2205      	movs	r2, #5
 8007c7c:	4631      	mov	r1, r6
	while ((ch = *p++) && !bail) {
 8007c7e:	1c4e      	adds	r6, r1, #1
 8007c80:	780b      	ldrb	r3, [r1, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 809a 	beq.w	8007dbc <vsscanf+0x558>
 8007c88:	2c00      	cmp	r4, #0
 8007c8a:	f040 8097 	bne.w	8007dbc <vsscanf+0x558>
		switch (state) {
 8007c8e:	2a06      	cmp	r2, #6
 8007c90:	d8f4      	bhi.n	8007c7c <vsscanf+0x418>
 8007c92:	a001      	add	r0, pc, #4	; (adr r0, 8007c98 <vsscanf+0x434>)
 8007c94:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8007c98:	08007891 	.word	0x08007891
 8007c9c:	080078cb 	.word	0x080078cb
 8007ca0:	080078ef 	.word	0x080078ef
 8007ca4:	0800790d 	.word	0x0800790d
 8007ca8:	08007c5f 	.word	0x08007c5f
 8007cac:	08007cc1 	.word	0x08007cc1
 8007cb0:	08007ce5 	.word	0x08007ce5
			if (ch == '^' && !(flags & FL_INV)) {
 8007cb4:	f01b 0f02 	tst.w	fp, #2
 8007cb8:	d1d3      	bne.n	8007c62 <vsscanf+0x3fe>
				matchinv = 1;
 8007cba:	f04f 0901 	mov.w	r9, #1
 8007cbe:	e7dd      	b.n	8007c7c <vsscanf+0x418>
			}
			break;

		case st_match:	/* Main state for %[ match */
			if (ch == ']') {
 8007cc0:	2b5d      	cmp	r3, #93	; 0x5d
 8007cc2:	d02e      	beq.n	8007d22 <vsscanf+0x4be>
				state = st_normal;  ////  Added: State should return to normal after matching.
				goto match_run;
			} else if (ch == '-') {
 8007cc4:	2b2d      	cmp	r3, #45	; 0x2d
 8007cc6:	d076      	beq.n	8007db6 <vsscanf+0x552>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 8007cc8:	0958      	lsrs	r0, r3, #5
 8007cca:	a905      	add	r1, sp, #20
 8007ccc:	f003 0c1f 	and.w	ip, r3, #31
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007cd6:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8007cda:	ea43 030c 	orr.w	r3, r3, ip
 8007cde:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
 8007ce2:	e7cb      	b.n	8007c7c <vsscanf+0x418>
				set_bit(matchmap, (unsigned char)ch);
			}
			break;

		case st_match_range:	/* %[ match after - */
			if (ch == ']') {
 8007ce4:	2b5d      	cmp	r3, #93	; 0x5d
 8007ce6:	d001      	beq.n	8007cec <vsscanf+0x488>
				/* - was last character */
				set_bit(matchmap, (unsigned char)'-');
				goto match_run;
			} else {
				int i;
				for (i = range_start; i < (unsigned char)ch;
 8007ce8:	4651      	mov	r1, sl
 8007cea:	e016      	b.n	8007d1a <vsscanf+0x4b6>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 8007cec:	9b06      	ldr	r3, [sp, #24]
 8007cee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007cf2:	9306      	str	r3, [sp, #24]
				state = st_match;
			}
			break;

		      match_run:	/* Match expression finished */
			qq = q;
 8007cf4:	950d      	str	r5, [sp, #52]	; 0x34
			uc = 1;	/* Anything nonzero */
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	4641      	mov	r1, r8
			while (width && (uc = *q)
 8007cfa:	e015      	b.n	8007d28 <vsscanf+0x4c4>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 8007cfc:	ea4f 1c51 	mov.w	ip, r1, lsr #5
 8007d00:	a805      	add	r0, sp, #20
 8007d02:	f001 0e1f 	and.w	lr, r1, #31
 8007d06:	2201      	movs	r2, #1
 8007d08:	fa02 fe0e 	lsl.w	lr, r2, lr
 8007d0c:	f850 202c 	ldr.w	r2, [r0, ip, lsl #2]
 8007d10:	ea42 020e 	orr.w	r2, r2, lr
 8007d14:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
				     i++)
 8007d18:	3101      	adds	r1, #1
				for (i = range_start; i < (unsigned char)ch;
 8007d1a:	428b      	cmp	r3, r1
 8007d1c:	dcee      	bgt.n	8007cfc <vsscanf+0x498>
				state = st_match;
 8007d1e:	2205      	movs	r2, #5
 8007d20:	e7ac      	b.n	8007c7c <vsscanf+0x418>
				state = st_normal;  ////  Added: State should return to normal after matching.
 8007d22:	2200      	movs	r2, #0
 8007d24:	e7e6      	b.n	8007cf4 <vsscanf+0x490>
			       && test_bit(matchmap, uc)^matchinv) {
				if (sarg)
					*sarg++ = uc;
				q++;
 8007d26:	3501      	adds	r5, #1
			while (width && (uc = *q)
 8007d28:	b1a9      	cbz	r1, 8007d56 <vsscanf+0x4f2>
 8007d2a:	7828      	ldrb	r0, [r5, #0]
 8007d2c:	b198      	cbz	r0, 8007d56 <vsscanf+0x4f2>
	return (int)(bitmap[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1;
 8007d2e:	0943      	lsrs	r3, r0, #5
 8007d30:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8007d34:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8007d38:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8007d3c:	f000 0c1f 	and.w	ip, r0, #31
 8007d40:	fa23 f30c 	lsr.w	r3, r3, ip
 8007d44:	f003 0301 	and.w	r3, r3, #1
			       && test_bit(matchmap, uc)^matchinv) {
 8007d48:	4599      	cmp	r9, r3
 8007d4a:	d004      	beq.n	8007d56 <vsscanf+0x4f2>
				if (sarg)
 8007d4c:	2f00      	cmp	r7, #0
 8007d4e:	d0ea      	beq.n	8007d26 <vsscanf+0x4c2>
					*sarg++ = uc;
 8007d50:	7038      	strb	r0, [r7, #0]
 8007d52:	3701      	adds	r7, #1
 8007d54:	e7e7      	b.n	8007d26 <vsscanf+0x4c2>
 8007d56:	4688      	mov	r8, r1
			}
			if (q != qq) {   ////  Previously: if (q != qq && sarg) {
 8007d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d5a:	42ab      	cmp	r3, r5
 8007d5c:	d009      	beq.n	8007d72 <vsscanf+0x50e>
				if (sarg) {  ////  Added: For "%*...[...]" format, don't bail out.
 8007d5e:	b127      	cbz	r7, 8007d6a <vsscanf+0x506>
					*sarg = '\0';
 8007d60:	2300      	movs	r3, #0
 8007d62:	703b      	strb	r3, [r7, #0]
					converted++;
 8007d64:	9b00      	ldr	r3, [sp, #0]
 8007d66:	3301      	adds	r3, #1
 8007d68:	9300      	str	r3, [sp, #0]
				}
			} else {
				bail = bail_err;
			}
			if (!uc)
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d186      	bne.n	8007c7c <vsscanf+0x418>
				bail = bail_eof;
 8007d6e:	2401      	movs	r4, #1
 8007d70:	e784      	b.n	8007c7c <vsscanf+0x418>
				bail = bail_err;
 8007d72:	2402      	movs	r4, #2
 8007d74:	e7f9      	b.n	8007d6a <vsscanf+0x506>
				state = st_flags;
 8007d76:	2201      	movs	r2, #1
				flags = 0;
 8007d78:	f04f 0b00 	mov.w	fp, #0
				width = UINT_MAX;
 8007d7c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				rank = rank_int;
 8007d80:	f8cd b004 	str.w	fp, [sp, #4]
 8007d84:	e77a      	b.n	8007c7c <vsscanf+0x418>
				p--;	/* Process this character again */
 8007d86:	460e      	mov	r6, r1
				state = st_modifiers;
 8007d88:	2203      	movs	r2, #3
 8007d8a:	e777      	b.n	8007c7c <vsscanf+0x418>
				p--;	/* Process this character again */
 8007d8c:	460e      	mov	r6, r1
				state = st_modifiers;
 8007d8e:	2203      	movs	r2, #3
 8007d90:	e774      	b.n	8007c7c <vsscanf+0x418>
				rank = SIZE_T_RANK;
 8007d92:	2301      	movs	r3, #1
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	e771      	b.n	8007c7c <vsscanf+0x418>
					bail = bail_err;
 8007d98:	2402      	movs	r4, #2
				state = st_normal;
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	e76e      	b.n	8007c7c <vsscanf+0x418>
						bail = bail_err;
 8007d9e:	2402      	movs	r4, #2
				state = st_normal;
 8007da0:	2200      	movs	r2, #0
 8007da2:	e76b      	b.n	8007c7c <vsscanf+0x418>
 8007da4:	2200      	movs	r2, #0
 8007da6:	e769      	b.n	8007c7c <vsscanf+0x418>
 8007da8:	2200      	movs	r2, #0
 8007daa:	e767      	b.n	8007c7c <vsscanf+0x418>
 8007dac:	2200      	movs	r2, #0
 8007dae:	e765      	b.n	8007c7c <vsscanf+0x418>
						bail = bail_eof;
 8007db0:	2401      	movs	r4, #1
				state = st_normal;
 8007db2:	2200      	movs	r2, #0
 8007db4:	e762      	b.n	8007c7c <vsscanf+0x418>
				range_start = (unsigned char)ch;
 8007db6:	469a      	mov	sl, r3
				state = st_match_range;
 8007db8:	2206      	movs	r2, #6
 8007dba:	e75f      	b.n	8007c7c <vsscanf+0x418>
			break;
		}
	}

	if (bail == bail_eof && !converted)
 8007dbc:	2c01      	cmp	r4, #1
 8007dbe:	d003      	beq.n	8007dc8 <vsscanf+0x564>
		converted = -1;	/* Return EOF (-1) */

	return converted;
}
 8007dc0:	9800      	ldr	r0, [sp, #0]
 8007dc2:	b00f      	add	sp, #60	; 0x3c
 8007dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bail == bail_eof && !converted)
 8007dc8:	9b00      	ldr	r3, [sp, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1f8      	bne.n	8007dc0 <vsscanf+0x55c>
		converted = -1;	/* Return EOF (-1) */
 8007dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dd2:	9300      	str	r3, [sp, #0]
	return converted;
 8007dd4:	e7f4      	b.n	8007dc0 <vsscanf+0x55c>
 8007dd6:	bf00      	nop

08007dd8 <update>:

/*
 * Assumes: prng != NULL, e != NULL, len >= 0.
 */
static void update(TCHmacPrng_t prng, const uint8_t *e, unsigned int len)
{
 8007dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	4604      	mov	r4, r0
 8007de0:	4688      	mov	r8, r1
 8007de2:	4691      	mov	r9, r2
	const uint8_t separator0 = 0x00;
 8007de4:	2300      	movs	r3, #0
 8007de6:	f88d 3007 	strb.w	r3, [sp, #7]
	const uint8_t separator1 = 0x01;
 8007dea:	2701      	movs	r7, #1
 8007dec:	f88d 7006 	strb.w	r7, [sp, #6]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
 8007df0:	f000 f905 	bl	8007ffe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007df4:	f504 7588 	add.w	r5, r4, #272	; 0x110
 8007df8:	2220      	movs	r2, #32
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f000 f90d 	bl	800801c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
 8007e02:	463a      	mov	r2, r7
 8007e04:	f10d 0107 	add.w	r1, sp, #7
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 f907 	bl	800801c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
 8007e0e:	464a      	mov	r2, r9
 8007e10:	4641      	mov	r1, r8
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 f902 	bl	800801c <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 8007e18:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	2120      	movs	r1, #32
 8007e20:	4630      	mov	r0, r6
 8007e22:	f000 f903 	bl	800802c <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8007e26:	2220      	movs	r2, #32
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 f8a2 	bl	8007f74 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 8007e30:	4620      	mov	r0, r4
 8007e32:	f000 f8e4 	bl	8007ffe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007e36:	2220      	movs	r2, #32
 8007e38:	4629      	mov	r1, r5
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 f8ee 	bl	800801c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8007e40:	4622      	mov	r2, r4
 8007e42:	2120      	movs	r1, #32
 8007e44:	4628      	mov	r0, r5
 8007e46:	f000 f8f1 	bl	800802c <tc_hmac_final>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 f8d7 	bl	8007ffe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007e50:	2220      	movs	r2, #32
 8007e52:	4629      	mov	r1, r5
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 f8e1 	bl	800801c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
 8007e5a:	463a      	mov	r2, r7
 8007e5c:	f10d 0106 	add.w	r1, sp, #6
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 f8db 	bl	800801c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
 8007e66:	464a      	mov	r2, r9
 8007e68:	4641      	mov	r1, r8
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 f8d6 	bl	800801c <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 8007e70:	4622      	mov	r2, r4
 8007e72:	2120      	movs	r1, #32
 8007e74:	4630      	mov	r0, r6
 8007e76:	f000 f8d9 	bl	800802c <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	4631      	mov	r1, r6
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f000 f878 	bl	8007f74 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 8007e84:	4620      	mov	r0, r4
 8007e86:	f000 f8ba 	bl	8007ffe <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 f8c4 	bl	800801c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8007e94:	4622      	mov	r2, r4
 8007e96:	2120      	movs	r1, #32
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f000 f8c7 	bl	800802c <tc_hmac_final>
}
 8007e9e:	b003      	add	sp, #12
 8007ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007ea4 <tc_hmac_prng_init>:
		      const uint8_t *personalization,
		      unsigned int plen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 8007ea4:	b300      	cbz	r0, 8007ee8 <tc_hmac_prng_init+0x44>
{
 8007ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea8:	4604      	mov	r4, r0
	    personalization == (uint8_t *) 0 ||
 8007eaa:	b1f9      	cbz	r1, 8007eec <tc_hmac_prng_init+0x48>
 8007eac:	4616      	mov	r6, r2
 8007eae:	460d      	mov	r5, r1
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
 8007eb0:	f100 07f0 	add.w	r7, r0, #240	; 0xf0
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f000 f83b 	bl	8007f34 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8007ec6:	f000 f835 	bl	8007f34 <_set>
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8007eca:	2220      	movs	r2, #32
 8007ecc:	4639      	mov	r1, r7
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 f850 	bl	8007f74 <tc_hmac_set_key>
	/* update assumes SOME key has been configured into HMAC */

	update(prng, personalization, plen);
 8007ed4:	4632      	mov	r2, r6
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f7ff ff7d 	bl	8007dd8 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 8007ee4:	2001      	movs	r0, #1
}
 8007ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 8007ee8:	2000      	movs	r0, #0
}
 8007eea:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 8007eec:	2000      	movs	r0, #0
 8007eee:	e7fa      	b.n	8007ee6 <tc_hmac_prng_init+0x42>

08007ef0 <tc_hmac_prng_reseed>:
			const uint8_t *additional_input,
			unsigned int additionallen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 8007ef0:	b1d0      	cbz	r0, 8007f28 <tc_hmac_prng_reseed+0x38>
{
 8007ef2:	b538      	push	{r3, r4, r5, lr}
 8007ef4:	4605      	mov	r5, r0
	if (prng == (TCHmacPrng_t) 0 ||
 8007ef6:	b1c9      	cbz	r1, 8007f2c <tc_hmac_prng_reseed+0x3c>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
 8007ef8:	2a1f      	cmp	r2, #31
 8007efa:	d919      	bls.n	8007f30 <tc_hmac_prng_reseed+0x40>
 8007efc:	461c      	mov	r4, r3
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
 8007efe:	b183      	cbz	r3, 8007f22 <tc_hmac_prng_reseed+0x32>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
 8007f00:	9b04      	ldr	r3, [sp, #16]
 8007f02:	b90b      	cbnz	r3, 8007f08 <tc_hmac_prng_reseed+0x18>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
 8007f04:	2000      	movs	r0, #0
 8007f06:	e014      	b.n	8007f32 <tc_hmac_prng_reseed+0x42>
		} else {
		/* call update for the seed and additional_input */
		update(prng, seed, seedlen);
 8007f08:	f7ff ff66 	bl	8007dd8 <update>
		update(prng, additional_input, additionallen);
 8007f0c:	9a04      	ldr	r2, [sp, #16]
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	f7ff ff61 	bl	8007dd8 <update>
		/* call update only for the seed */
		update(prng, seed, seedlen);
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
 8007f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f1a:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
 8007f1e:	2001      	movs	r0, #1
 8007f20:	e007      	b.n	8007f32 <tc_hmac_prng_reseed+0x42>
		update(prng, seed, seedlen);
 8007f22:	f7ff ff59 	bl	8007dd8 <update>
 8007f26:	e7f6      	b.n	8007f16 <tc_hmac_prng_reseed+0x26>
		return TC_CRYPTO_FAIL;
 8007f28:	2000      	movs	r0, #0
}
 8007f2a:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	e000      	b.n	8007f32 <tc_hmac_prng_reseed+0x42>
 8007f30:	2000      	movs	r0, #0
}
 8007f32:	bd38      	pop	{r3, r4, r5, pc}

08007f34 <_set>:
		return TC_CRYPTO_FAIL;
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
 8007f34:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
 8007f36:	f7fb f8d0 	bl	80030da <memset>
}
 8007f3a:	bd08      	pop	{r3, pc}

08007f3c <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
 8007f3c:	b430      	push	{r4, r5}
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
 8007f3e:	2300      	movs	r3, #0
 8007f40:	e00a      	b.n	8007f58 <rekey+0x1c>
		key[i] = inner_pad ^ new_key[i];
 8007f42:	5ccc      	ldrb	r4, [r1, r3]
 8007f44:	f084 0436 	eor.w	r4, r4, #54	; 0x36
 8007f48:	54c4      	strb	r4, [r0, r3]
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
 8007f4a:	5ccc      	ldrb	r4, [r1, r3]
 8007f4c:	f103 0540 	add.w	r5, r3, #64	; 0x40
 8007f50:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
 8007f54:	5544      	strb	r4, [r0, r5]
	for (i = 0; i < key_size; ++i) {
 8007f56:	3301      	adds	r3, #1
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d3f2      	bcc.n	8007f42 <rekey+0x6>
 8007f5c:	e006      	b.n	8007f6c <rekey+0x30>
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 8007f5e:	2236      	movs	r2, #54	; 0x36
 8007f60:	54c2      	strb	r2, [r0, r3]
 8007f62:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007f66:	215c      	movs	r1, #92	; 0x5c
 8007f68:	5481      	strb	r1, [r0, r2]
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	2b3f      	cmp	r3, #63	; 0x3f
 8007f6e:	d9f6      	bls.n	8007f5e <rekey+0x22>
	}
}
 8007f70:	bc30      	pop	{r4, r5}
 8007f72:	4770      	bx	lr

08007f74 <tc_hmac_set_key>:
int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0 ||
 8007f74:	b3d0      	cbz	r0, 8007fec <tc_hmac_set_key+0x78>
{
 8007f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f7a:	b0bc      	sub	sp, #240	; 0xf0
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4606      	mov	r6, r0
	if (ctx == (TCHmacState_t) 0 ||
 8007f80:	b3b1      	cbz	r1, 8007ff0 <tc_hmac_set_key+0x7c>
	    key == (const uint8_t *) 0 ||
 8007f82:	b3ba      	cbz	r2, 8007ff4 <tc_hmac_set_key+0x80>
 8007f84:	4614      	mov	r4, r2
 8007f86:	460d      	mov	r5, r1
	    key_size == 0) {
		return TC_CRYPTO_FAIL;
	}

	const uint8_t dummy_key[key_size];
 8007f88:	1dd3      	adds	r3, r2, #7
 8007f8a:	f023 0307 	bic.w	r3, r3, #7
 8007f8e:	ebad 0d03 	sub.w	sp, sp, r3
 8007f92:	46e8      	mov	r8, sp
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 8007f94:	2a40      	cmp	r2, #64	; 0x40
 8007f96:	d914      	bls.n	8007fc2 <tc_hmac_set_key+0x4e>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
 8007f98:	f000 f94a 	bl	8008230 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 8007f9c:	4622      	mov	r2, r4
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 f973 	bl	800828c <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 8007fa6:	f106 0490 	add.w	r4, r6, #144	; 0x90
 8007faa:	4631      	mov	r1, r6
 8007fac:	4620      	mov	r0, r4
 8007fae:	f000 f998 	bl	80082e2 <tc_sha256_final>
				      &ctx->hash_state);
		rekey(ctx->key,
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	f106 0070 	add.w	r0, r6, #112	; 0x70
 8007fba:	f7ff ffbf 	bl	8007f3c <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	e019      	b.n	8007ff6 <tc_hmac_set_key+0x82>
		(void)tc_sha256_init(&dummy_state.hash_state);
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	f000 f934 	bl	8008230 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
 8007fc8:	4622      	mov	r2, r4
 8007fca:	4641      	mov	r1, r8
 8007fcc:	4638      	mov	r0, r7
 8007fce:	f000 f95d 	bl	800828c <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8007fd8:	f000 f983 	bl	80082e2 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
 8007fdc:	4622      	mov	r2, r4
 8007fde:	4629      	mov	r1, r5
 8007fe0:	f106 0070 	add.w	r0, r6, #112	; 0x70
 8007fe4:	f7ff ffaa 	bl	8007f3c <rekey>
	return TC_CRYPTO_SUCCESS;
 8007fe8:	2001      	movs	r0, #1
 8007fea:	e004      	b.n	8007ff6 <tc_hmac_set_key+0x82>
		return TC_CRYPTO_FAIL;
 8007fec:	2000      	movs	r0, #0
}
 8007fee:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	e000      	b.n	8007ff6 <tc_hmac_set_key+0x82>
 8007ff4:	2000      	movs	r0, #0
}
 8007ff6:	37f0      	adds	r7, #240	; 0xf0
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ffe <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 8007ffe:	b158      	cbz	r0, 8008018 <tc_hmac_init+0x1a>
{
 8008000:	b510      	push	{r4, lr}
 8008002:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
 8008004:	f000 f914 	bl	8008230 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
 8008008:	2240      	movs	r2, #64	; 0x40
 800800a:	f104 0170 	add.w	r1, r4, #112	; 0x70
 800800e:	4620      	mov	r0, r4
 8008010:	f000 f93c 	bl	800828c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 8008014:	2001      	movs	r0, #1
}
 8008016:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
 8008018:	2000      	movs	r0, #0
}
 800801a:	4770      	bx	lr

0800801c <tc_hmac_update>:
		   const void *data,
		   unsigned int data_length)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 800801c:	b120      	cbz	r0, 8008028 <tc_hmac_update+0xc>
{
 800801e:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
 8008020:	f000 f934 	bl	800828c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 8008024:	2001      	movs	r0, #1
}
 8008026:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
 8008028:	2000      	movs	r0, #0
}
 800802a:	4770      	bx	lr

0800802c <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 800802c:	b318      	cbz	r0, 8008076 <tc_hmac_final+0x4a>
{
 800802e:	b538      	push	{r3, r4, r5, lr}
 8008030:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
 8008032:	2920      	cmp	r1, #32
 8008034:	d001      	beq.n	800803a <tc_hmac_final+0xe>
	    taglen != TC_SHA256_DIGEST_SIZE ||
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
 8008036:	2000      	movs	r0, #0

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));

	return TC_CRYPTO_SUCCESS;
}
 8008038:	bd38      	pop	{r3, r4, r5, pc}
	    taglen != TC_SHA256_DIGEST_SIZE ||
 800803a:	b1f2      	cbz	r2, 800807a <tc_hmac_final+0x4e>
 800803c:	4614      	mov	r4, r2
	(void) tc_sha256_final(tag, &ctx->hash_state);
 800803e:	4611      	mov	r1, r2
 8008040:	f000 f94f 	bl	80082e2 <tc_sha256_final>
	(void)tc_sha256_init(&ctx->hash_state);
 8008044:	4620      	mov	r0, r4
 8008046:	f000 f8f3 	bl	8008230 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
 800804a:	2240      	movs	r2, #64	; 0x40
 800804c:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 8008050:	4620      	mov	r0, r4
 8008052:	f000 f91b 	bl	800828c <tc_sha256_update>
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
 8008056:	2220      	movs	r2, #32
 8008058:	4629      	mov	r1, r5
 800805a:	4620      	mov	r0, r4
 800805c:	f000 f916 	bl	800828c <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
 8008060:	4621      	mov	r1, r4
 8008062:	4628      	mov	r0, r5
 8008064:	f000 f93d 	bl	80082e2 <tc_sha256_final>
	_set(ctx, 0, sizeof(*ctx));
 8008068:	22f0      	movs	r2, #240	; 0xf0
 800806a:	2100      	movs	r1, #0
 800806c:	4620      	mov	r0, r4
 800806e:	f7ff ff61 	bl	8007f34 <_set>
	return TC_CRYPTO_SUCCESS;
 8008072:	2001      	movs	r0, #1
 8008074:	e7e0      	b.n	8008038 <tc_hmac_final+0xc>
		return TC_CRYPTO_FAIL;
 8008076:	2000      	movs	r0, #0
}
 8008078:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 800807a:	2000      	movs	r0, #0
 800807c:	e7dc      	b.n	8008038 <tc_hmac_final+0xc>
	...

08008080 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
 8008080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	b09b      	sub	sp, #108	; 0x6c
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8008086:	6806      	ldr	r6, [r0, #0]
 8008088:	9603      	str	r6, [sp, #12]
 800808a:	6843      	ldr	r3, [r0, #4]
 800808c:	9304      	str	r3, [sp, #16]
 800808e:	6882      	ldr	r2, [r0, #8]
 8008090:	9205      	str	r2, [sp, #20]
 8008092:	68c7      	ldr	r7, [r0, #12]
 8008094:	9706      	str	r7, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 8008096:	6905      	ldr	r5, [r0, #16]
 8008098:	9507      	str	r5, [sp, #28]
 800809a:	6944      	ldr	r4, [r0, #20]
 800809c:	9401      	str	r4, [sp, #4]
 800809e:	6984      	ldr	r4, [r0, #24]
 80080a0:	9402      	str	r4, [sp, #8]
 80080a2:	69c4      	ldr	r4, [r0, #28]
 80080a4:	9408      	str	r4, [sp, #32]
 80080a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80080aa:	f8dd 9004 	ldr.w	r9, [sp, #4]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 80080ae:	46ba      	mov	sl, r7
 80080b0:	4694      	mov	ip, r2
 80080b2:	469e      	mov	lr, r3

	for (i = 0; i < 16; ++i) {
 80080b4:	2700      	movs	r7, #0
 80080b6:	e03a      	b.n	800812e <compress+0xae>
	n = (((unsigned int)(*((*c)++))) << 24);
 80080b8:	780a      	ldrb	r2, [r1, #0]
	n |= ((unsigned int)(*((*c)++)) << 16);
 80080ba:	784b      	ldrb	r3, [r1, #1]
 80080bc:	041b      	lsls	r3, r3, #16
 80080be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	n |= ((unsigned int)(*((*c)++)) << 8);
 80080c2:	788a      	ldrb	r2, [r1, #2]
 80080c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	n |= ((unsigned int)(*((*c)++)));
 80080c8:	78ca      	ldrb	r2, [r1, #3]
 80080ca:	4313      	orrs	r3, r2
		n = BigEndian(&data);
		t1 = work_space[i] = n;
 80080cc:	aa1a      	add	r2, sp, #104	; 0x68
 80080ce:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80080d2:	f842 3c40 	str.w	r3, [r2, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 80080d6:	ea4f 22f5 	mov.w	r2, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 80080da:	ea82 12b5 	eor.w	r2, r2, r5, ror #6
 80080de:	ea82 6275 	eor.w	r2, r2, r5, ror #25
 80080e2:	4414      	add	r4, r2
 80080e4:	ea05 0209 	and.w	r2, r5, r9
 80080e8:	ea28 0b05 	bic.w	fp, r8, r5
 80080ec:	ea82 020b 	eor.w	r2, r2, fp
 80080f0:	4414      	add	r4, r2
 80080f2:	4a4e      	ldr	r2, [pc, #312]	; (800822c <compress+0x1ac>)
 80080f4:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80080f8:	4414      	add	r4, r2
 80080fa:	4423      	add	r3, r4
	return (((a) >> n) | ((a) << (32 - n)));
 80080fc:	ea4f 3276 	mov.w	r2, r6, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 8008100:	ea82 02b6 	eor.w	r2, r2, r6, ror #2
 8008104:	ea82 52b6 	eor.w	r2, r2, r6, ror #22
 8008108:	ea8e 040c 	eor.w	r4, lr, ip
 800810c:	4034      	ands	r4, r6
 800810e:	ea0e 0b0c 	and.w	fp, lr, ip
 8008112:	ea84 040b 	eor.w	r4, r4, fp
 8008116:	4422      	add	r2, r4
	for (i = 0; i < 16; ++i) {
 8008118:	3701      	adds	r7, #1
	n |= ((unsigned int)(*((*c)++)));
 800811a:	3104      	adds	r1, #4
		h = g; g = f; f = e; e = d + t1;
 800811c:	4644      	mov	r4, r8
 800811e:	46c8      	mov	r8, r9
 8008120:	46a9      	mov	r9, r5
 8008122:	eb0a 0503 	add.w	r5, sl, r3
		d = c; c = b; b = a; a = t1 + t2;
 8008126:	46e2      	mov	sl, ip
 8008128:	46f4      	mov	ip, lr
 800812a:	46b6      	mov	lr, r6
 800812c:	189e      	adds	r6, r3, r2
	for (i = 0; i < 16; ++i) {
 800812e:	2f0f      	cmp	r7, #15
 8008130:	d9c2      	bls.n	80080b8 <compress+0x38>
 8008132:	9009      	str	r0, [sp, #36]	; 0x24
 8008134:	e05b      	b.n	80081ee <compress+0x16e>
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
 8008136:	1c79      	adds	r1, r7, #1
 8008138:	f001 030f 	and.w	r3, r1, #15
 800813c:	aa1a      	add	r2, sp, #104	; 0x68
 800813e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008142:	f853 3c40 	ldr.w	r3, [r3, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 8008146:	ea4f 42b3 	mov.w	r2, r3, ror #18
		s0 = sigma0(s0);
 800814a:	ea82 12f3 	eor.w	r2, r2, r3, ror #7
 800814e:	ea82 02d3 	eor.w	r2, r2, r3, lsr #3
		s1 = work_space[(i+14)&0x0f];
 8008152:	f107 030e 	add.w	r3, r7, #14
 8008156:	f003 030f 	and.w	r3, r3, #15
 800815a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 800815e:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8008162:	f853 bc40 	ldr.w	fp, [r3, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 8008166:	ea4f 43fb 	mov.w	r3, fp, ror #19
		s1 = sigma1(s1);
 800816a:	ea83 437b 	eor.w	r3, r3, fp, ror #17
 800816e:	ea83 239b 	eor.w	r3, r3, fp, lsr #10

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8008172:	f007 0b0f 	and.w	fp, r7, #15
 8008176:	441a      	add	r2, r3
 8008178:	f107 0309 	add.w	r3, r7, #9
 800817c:	f003 030f 	and.w	r3, r3, #15
 8008180:	a81a      	add	r0, sp, #104	; 0x68
 8008182:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008186:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800818a:	441a      	add	r2, r3
 800818c:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8008190:	f85b 3c40 	ldr.w	r3, [fp, #-64]
 8008194:	441a      	add	r2, r3
 8008196:	f84b 2c40 	str.w	r2, [fp, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
 800819a:	ea4f 23f5 	mov.w	r3, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 800819e:	ea83 13b5 	eor.w	r3, r3, r5, ror #6
 80081a2:	ea83 6375 	eor.w	r3, r3, r5, ror #25
 80081a6:	4423      	add	r3, r4
 80081a8:	ea05 0409 	and.w	r4, r5, r9
 80081ac:	ea28 0b05 	bic.w	fp, r8, r5
 80081b0:	ea84 040b 	eor.w	r4, r4, fp
 80081b4:	4423      	add	r3, r4
 80081b6:	4c1d      	ldr	r4, [pc, #116]	; (800822c <compress+0x1ac>)
 80081b8:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 80081bc:	4423      	add	r3, r4
 80081be:	4413      	add	r3, r2
	return (((a) >> n) | ((a) << (32 - n)));
 80081c0:	ea4f 3276 	mov.w	r2, r6, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 80081c4:	ea82 02b6 	eor.w	r2, r2, r6, ror #2
 80081c8:	ea82 54b6 	eor.w	r4, r2, r6, ror #22
 80081cc:	ea8e 020c 	eor.w	r2, lr, ip
 80081d0:	4032      	ands	r2, r6
 80081d2:	ea0e 070c 	and.w	r7, lr, ip
 80081d6:	407a      	eors	r2, r7
 80081d8:	4422      	add	r2, r4
	for ( ; i < 64; ++i) {
 80081da:	460f      	mov	r7, r1
		h = g; g = f; f = e; e = d + t1;
 80081dc:	4644      	mov	r4, r8
 80081de:	46c8      	mov	r8, r9
 80081e0:	46a9      	mov	r9, r5
 80081e2:	eb0a 0503 	add.w	r5, sl, r3
		d = c; c = b; b = a; a = t1 + t2;
 80081e6:	46e2      	mov	sl, ip
 80081e8:	46f4      	mov	ip, lr
 80081ea:	46b6      	mov	lr, r6
 80081ec:	189e      	adds	r6, r3, r2
	for ( ; i < 64; ++i) {
 80081ee:	2f3f      	cmp	r7, #63	; 0x3f
 80081f0:	d9a1      	bls.n	8008136 <compress+0xb6>
 80081f2:	9809      	ldr	r0, [sp, #36]	; 0x24
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
 80081f4:	9b03      	ldr	r3, [sp, #12]
 80081f6:	441e      	add	r6, r3
 80081f8:	6006      	str	r6, [r0, #0]
 80081fa:	9b04      	ldr	r3, [sp, #16]
 80081fc:	4473      	add	r3, lr
 80081fe:	6043      	str	r3, [r0, #4]
 8008200:	9b05      	ldr	r3, [sp, #20]
 8008202:	4463      	add	r3, ip
 8008204:	6083      	str	r3, [r0, #8]
 8008206:	9b06      	ldr	r3, [sp, #24]
 8008208:	4453      	add	r3, sl
 800820a:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
 800820c:	9b07      	ldr	r3, [sp, #28]
 800820e:	441d      	add	r5, r3
 8008210:	6105      	str	r5, [r0, #16]
 8008212:	9b01      	ldr	r3, [sp, #4]
 8008214:	444b      	add	r3, r9
 8008216:	6143      	str	r3, [r0, #20]
 8008218:	9b02      	ldr	r3, [sp, #8]
 800821a:	4443      	add	r3, r8
 800821c:	6183      	str	r3, [r0, #24]
 800821e:	9b08      	ldr	r3, [sp, #32]
 8008220:	441c      	add	r4, r3
 8008222:	61c4      	str	r4, [r0, #28]
}
 8008224:	b01b      	add	sp, #108	; 0x6c
 8008226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800822a:	bf00      	nop
 800822c:	0800da90 	.word	0x0800da90

08008230 <tc_sha256_init>:
	if (s == (TCSha256State_t) 0) {
 8008230:	b1e0      	cbz	r0, 800826c <tc_sha256_init+0x3c>
{
 8008232:	b510      	push	{r4, lr}
 8008234:	4604      	mov	r4, r0
	_set((uint8_t *) s, 0x00, sizeof(*s));
 8008236:	2270      	movs	r2, #112	; 0x70
 8008238:	2100      	movs	r1, #0
 800823a:	f7ff fe7b 	bl	8007f34 <_set>
	s->iv[0] = 0x6a09e667;
 800823e:	4b0c      	ldr	r3, [pc, #48]	; (8008270 <tc_sha256_init+0x40>)
 8008240:	6023      	str	r3, [r4, #0]
	s->iv[1] = 0xbb67ae85;
 8008242:	4b0c      	ldr	r3, [pc, #48]	; (8008274 <tc_sha256_init+0x44>)
 8008244:	6063      	str	r3, [r4, #4]
	s->iv[2] = 0x3c6ef372;
 8008246:	4b0c      	ldr	r3, [pc, #48]	; (8008278 <tc_sha256_init+0x48>)
 8008248:	60a3      	str	r3, [r4, #8]
	s->iv[3] = 0xa54ff53a;
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <tc_sha256_init+0x4c>)
 800824c:	60e3      	str	r3, [r4, #12]
	s->iv[4] = 0x510e527f;
 800824e:	4b0c      	ldr	r3, [pc, #48]	; (8008280 <tc_sha256_init+0x50>)
 8008250:	6123      	str	r3, [r4, #16]
	s->iv[5] = 0x9b05688c;
 8008252:	4b0c      	ldr	r3, [pc, #48]	; (8008284 <tc_sha256_init+0x54>)
 8008254:	6163      	str	r3, [r4, #20]
	s->iv[6] = 0x1f83d9ab;
 8008256:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <tc_sha256_init+0x58>)
 8008258:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
 800825a:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 800825e:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8008262:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 8008266:	61e3      	str	r3, [r4, #28]
	return TC_CRYPTO_SUCCESS;
 8008268:	2001      	movs	r0, #1
}
 800826a:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
 800826c:	2000      	movs	r0, #0
}
 800826e:	4770      	bx	lr
 8008270:	6a09e667 	.word	0x6a09e667
 8008274:	bb67ae85 	.word	0xbb67ae85
 8008278:	3c6ef372 	.word	0x3c6ef372
 800827c:	a54ff53a 	.word	0xa54ff53a
 8008280:	510e527f 	.word	0x510e527f
 8008284:	9b05688c 	.word	0x9b05688c
 8008288:	1f83d9ab 	.word	0x1f83d9ab

0800828c <tc_sha256_update>:
	if (s == (TCSha256State_t) 0 ||
 800828c:	b328      	cbz	r0, 80082da <tc_sha256_update+0x4e>
{
 800828e:	b570      	push	{r4, r5, r6, lr}
 8008290:	4604      	mov	r4, r0
	if (s == (TCSha256State_t) 0 ||
 8008292:	b321      	cbz	r1, 80082de <tc_sha256_update+0x52>
	} else if (datalen == 0) {
 8008294:	b91a      	cbnz	r2, 800829e <tc_sha256_update+0x12>
		return TC_CRYPTO_SUCCESS;
 8008296:	2001      	movs	r0, #1
 8008298:	e01e      	b.n	80082d8 <tc_sha256_update+0x4c>
{
 800829a:	462a      	mov	r2, r5
 800829c:	4631      	mov	r1, r6
	while (datalen-- > 0) {
 800829e:	1e55      	subs	r5, r2, #1
 80082a0:	b1ca      	cbz	r2, 80082d6 <tc_sha256_update+0x4a>
		s->leftover[s->leftover_offset++] = *(data++);
 80082a2:	1c4e      	adds	r6, r1, #1
 80082a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	66a2      	str	r2, [r4, #104]	; 0x68
 80082aa:	7809      	ldrb	r1, [r1, #0]
 80082ac:	4423      	add	r3, r4
 80082ae:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 80082b2:	2a3f      	cmp	r2, #63	; 0x3f
 80082b4:	d9f1      	bls.n	800829a <tc_sha256_update+0xe>
			compress(s->iv, s->leftover);
 80082b6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80082ba:	4620      	mov	r0, r4
 80082bc:	f7ff fee0 	bl	8008080 <compress>
			s->leftover_offset = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	66a3      	str	r3, [r4, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 80082c4:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80082c8:	f512 7000 	adds.w	r0, r2, #512	; 0x200
 80082cc:	f143 0100 	adc.w	r1, r3, #0
 80082d0:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80082d4:	e7e1      	b.n	800829a <tc_sha256_update+0xe>
	return TC_CRYPTO_SUCCESS;
 80082d6:	2001      	movs	r0, #1
}
 80082d8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 80082da:	2000      	movs	r0, #0
}
 80082dc:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 80082de:	2000      	movs	r0, #0
 80082e0:	e7fa      	b.n	80082d8 <tc_sha256_update+0x4c>

080082e2 <tc_sha256_final>:
	if (digest == (uint8_t *) 0 ||
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d065      	beq.n	80083b2 <tc_sha256_final+0xd0>
{
 80082e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e8:	460d      	mov	r5, r1
 80082ea:	4604      	mov	r4, r0
	if (digest == (uint8_t *) 0 ||
 80082ec:	2900      	cmp	r1, #0
 80082ee:	d062      	beq.n	80083b6 <tc_sha256_final+0xd4>
	s->bits_hashed += (s->leftover_offset << 3);
 80082f0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80082f2:	00c8      	lsls	r0, r1, #3
 80082f4:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 80082f8:	1816      	adds	r6, r2, r0
 80082fa:	f143 0700 	adc.w	r7, r3, #0
 80082fe:	e9c5 6708 	strd	r6, r7, [r5, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 8008302:	1c48      	adds	r0, r1, #1
 8008304:	66a8      	str	r0, [r5, #104]	; 0x68
 8008306:	4429      	add	r1, r5
 8008308:	2380      	movs	r3, #128	; 0x80
 800830a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 800830e:	2838      	cmp	r0, #56	; 0x38
 8008310:	d82a      	bhi.n	8008368 <tc_sha256_final+0x86>
	_set(s->leftover + s->leftover_offset, 0x00,
 8008312:	f105 0628 	add.w	r6, r5, #40	; 0x28
 8008316:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8008318:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 800831c:	2100      	movs	r1, #0
 800831e:	4430      	add	r0, r6
 8008320:	f7ff fe08 	bl	8007f34 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 8008324:	6a2a      	ldr	r2, [r5, #32]
 8008326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008328:	f885 2067 	strb.w	r2, [r5, #103]	; 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 800832c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8008330:	f885 1066 	strb.w	r1, [r5, #102]	; 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 8008334:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8008338:	f885 1065 	strb.w	r1, [r5, #101]	; 0x65
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
 800833c:	0e12      	lsrs	r2, r2, #24
 800833e:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
 8008342:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 8008346:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800834a:	f885 2062 	strb.w	r2, [r5, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 800834e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008352:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 8008356:	0e1b      	lsrs	r3, r3, #24
 8008358:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	compress(s->iv, s->leftover);
 800835c:	4631      	mov	r1, r6
 800835e:	4628      	mov	r0, r5
 8008360:	f7ff fe8e 	bl	8008080 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 8008364:	2200      	movs	r2, #0
 8008366:	e01b      	b.n	80083a0 <tc_sha256_final+0xbe>
		_set(s->leftover + s->leftover_offset, 0x00,
 8008368:	f105 0628 	add.w	r6, r5, #40	; 0x28
 800836c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 8008370:	2100      	movs	r1, #0
 8008372:	4430      	add	r0, r6
 8008374:	f7ff fdde 	bl	8007f34 <_set>
		compress(s->iv, s->leftover);
 8008378:	4631      	mov	r1, r6
 800837a:	4628      	mov	r0, r5
 800837c:	f7ff fe80 	bl	8008080 <compress>
		s->leftover_offset = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	66ab      	str	r3, [r5, #104]	; 0x68
 8008384:	e7c5      	b.n	8008312 <tc_sha256_final+0x30>
		unsigned int t = *((unsigned int *) &s->iv[i]);
 8008386:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
		*digest++ = (uint8_t)(t >> 24);
 800838a:	0e19      	lsrs	r1, r3, #24
 800838c:	7021      	strb	r1, [r4, #0]
		*digest++ = (uint8_t)(t >> 16);
 800838e:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8008392:	7061      	strb	r1, [r4, #1]
		*digest++ = (uint8_t)(t >> 8);
 8008394:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008398:	70a1      	strb	r1, [r4, #2]
		*digest++ = (uint8_t)(t);
 800839a:	70e3      	strb	r3, [r4, #3]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 800839c:	3201      	adds	r2, #1
		*digest++ = (uint8_t)(t);
 800839e:	3404      	adds	r4, #4
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 80083a0:	2a07      	cmp	r2, #7
 80083a2:	d9f0      	bls.n	8008386 <tc_sha256_final+0xa4>
	_set(s, 0, sizeof(*s));
 80083a4:	2270      	movs	r2, #112	; 0x70
 80083a6:	2100      	movs	r1, #0
 80083a8:	4628      	mov	r0, r5
 80083aa:	f7ff fdc3 	bl	8007f34 <_set>
	return TC_CRYPTO_SUCCESS;
 80083ae:	2001      	movs	r0, #1
}
 80083b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 80083b2:	2000      	movs	r0, #0
}
 80083b4:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
 80083b6:	2000      	movs	r0, #0
 80083b8:	e7fa      	b.n	80083b0 <tc_sha256_final+0xce>

080083ba <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
 80083ba:	b538      	push	{r3, r4, r5, lr}
 80083bc:	461d      	mov	r5, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
 80083be:	69c3      	ldr	r3, [r0, #28]
 80083c0:	189c      	adds	r4, r3, r2
 80083c2:	460b      	mov	r3, r1
 80083c4:	462a      	mov	r2, r5
 80083c6:	4621      	mov	r1, r4
 80083c8:	6a00      	ldr	r0, [r0, #32]
 80083ca:	f7fa fc66 	bl	8002c9a <os_mbuf_copydata>
    if (rc == 0) {
 80083ce:	b108      	cbz	r0, 80083d4 <cbor_mbuf_reader_cpy+0x1a>
        return true;
    }
    return false;
 80083d0:	2000      	movs	r0, #0
}
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 80083d4:	2001      	movs	r0, #1
 80083d6:	e7fc      	b.n	80083d2 <cbor_mbuf_reader_cpy+0x18>

080083d8 <cbor_mbuf_reader_get8>:
{
 80083d8:	b510      	push	{r4, lr}
 80083da:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
 80083dc:	69c4      	ldr	r4, [r0, #28]
 80083de:	f10d 0307 	add.w	r3, sp, #7
 80083e2:	2201      	movs	r2, #1
 80083e4:	4421      	add	r1, r4
 80083e6:	6a00      	ldr	r0, [r0, #32]
 80083e8:	f7fa fc57 	bl	8002c9a <os_mbuf_copydata>
}
 80083ec:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80083f0:	b002      	add	sp, #8
 80083f2:	bd10      	pop	{r4, pc}

080083f4 <cbor_mbuf_reader_cmp>:
{
 80083f4:	b510      	push	{r4, lr}
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
 80083f6:	69c4      	ldr	r4, [r0, #28]
 80083f8:	4414      	add	r4, r2
 80083fa:	460a      	mov	r2, r1
 80083fc:	4621      	mov	r1, r4
 80083fe:	6a00      	ldr	r0, [r0, #32]
 8008400:	f7fa fc78 	bl	8002cf4 <os_mbuf_cmpf>
}
 8008404:	fab0 f080 	clz	r0, r0
 8008408:	0940      	lsrs	r0, r0, #5
 800840a:	bd10      	pop	{r4, pc}

0800840c <cbor_mbuf_reader_get64>:
{
 800840c:	b510      	push	{r4, lr}
 800840e:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
 8008410:	69c4      	ldr	r4, [r0, #28]
 8008412:	466b      	mov	r3, sp
 8008414:	2208      	movs	r2, #8
 8008416:	4421      	add	r1, r4
 8008418:	6a00      	ldr	r0, [r0, #32]
 800841a:	f7fa fc3e 	bl	8002c9a <os_mbuf_copydata>
}
 800841e:	9801      	ldr	r0, [sp, #4]
 8008420:	ba00      	rev	r0, r0
 8008422:	9900      	ldr	r1, [sp, #0]
 8008424:	ba09      	rev	r1, r1
 8008426:	b002      	add	sp, #8
 8008428:	bd10      	pop	{r4, pc}

0800842a <cbor_mbuf_reader_get32>:
{
 800842a:	b510      	push	{r4, lr}
 800842c:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
 800842e:	69c4      	ldr	r4, [r0, #28]
 8008430:	ab01      	add	r3, sp, #4
 8008432:	2204      	movs	r2, #4
 8008434:	4421      	add	r1, r4
 8008436:	6a00      	ldr	r0, [r0, #32]
 8008438:	f7fa fc2f 	bl	8002c9a <os_mbuf_copydata>
}
 800843c:	9801      	ldr	r0, [sp, #4]
 800843e:	ba00      	rev	r0, r0
 8008440:	b002      	add	sp, #8
 8008442:	bd10      	pop	{r4, pc}

08008444 <cbor_mbuf_reader_get16>:
{
 8008444:	b510      	push	{r4, lr}
 8008446:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
 8008448:	69c4      	ldr	r4, [r0, #28]
 800844a:	f10d 0306 	add.w	r3, sp, #6
 800844e:	2202      	movs	r2, #2
 8008450:	4421      	add	r1, r4
 8008452:	6a00      	ldr	r0, [r0, #32]
 8008454:	f7fa fc21 	bl	8002c9a <os_mbuf_copydata>
    return cbor_ntohs(val);
 8008458:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800845c:	ba40      	rev16	r0, r0
}
 800845e:	b280      	uxth	r0, r0
 8008460:	b002      	add	sp, #8
 8008462:	bd10      	pop	{r4, pc}

08008464 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
 8008464:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
 8008466:	4b0d      	ldr	r3, [pc, #52]	; (800849c <cbor_mbuf_reader_init+0x38>)
 8008468:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
 800846a:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <cbor_mbuf_reader_init+0x3c>)
 800846c:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
 800846e:	4b0d      	ldr	r3, [pc, #52]	; (80084a4 <cbor_mbuf_reader_init+0x40>)
 8008470:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
 8008472:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <cbor_mbuf_reader_init+0x44>)
 8008474:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
 8008476:	4b0d      	ldr	r3, [pc, #52]	; (80084ac <cbor_mbuf_reader_init+0x48>)
 8008478:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
 800847a:	4b0d      	ldr	r3, [pc, #52]	; (80084b0 <cbor_mbuf_reader_init+0x4c>)
 800847c:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
 800847e:	794b      	ldrb	r3, [r1, #5]
 8008480:	2b07      	cmp	r3, #7
 8008482:	d905      	bls.n	8008490 <cbor_mbuf_reader_init+0x2c>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
 8008484:	6201      	str	r1, [r0, #32]
    cb->init_off = initial_offset;
 8008486:	61c2      	str	r2, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
 8008488:	8a0b      	ldrh	r3, [r1, #16]
 800848a:	1a9a      	subs	r2, r3, r2
 800848c:	6182      	str	r2, [r0, #24]
}
 800848e:	bd08      	pop	{r3, pc}
    assert(OS_MBUF_IS_PKTHDR(m));
 8008490:	2300      	movs	r3, #0
 8008492:	461a      	mov	r2, r3
 8008494:	4619      	mov	r1, r3
 8008496:	4618      	mov	r0, r3
 8008498:	f7f9 f9ae 	bl	80017f8 <__assert_func>
 800849c:	080083d9 	.word	0x080083d9
 80084a0:	08008445 	.word	0x08008445
 80084a4:	0800842b 	.word	0x0800842b
 80084a8:	0800840d 	.word	0x0800840d
 80084ac:	080083f5 	.word	0x080083f5
 80084b0:	080083bb 	.word	0x080083bb

080084b4 <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
 80084b4:	2860      	cmp	r0, #96	; 0x60
 80084b6:	d009      	beq.n	80084cc <is_fixed_type+0x18>
 80084b8:	2840      	cmp	r0, #64	; 0x40
 80084ba:	d009      	beq.n	80084d0 <is_fixed_type+0x1c>
 80084bc:	2880      	cmp	r0, #128	; 0x80
 80084be:	d009      	beq.n	80084d4 <is_fixed_type+0x20>
 80084c0:	28a0      	cmp	r0, #160	; 0xa0
 80084c2:	d001      	beq.n	80084c8 <is_fixed_type+0x14>
 80084c4:	2001      	movs	r0, #1
           type != CborMapType;
}
 80084c6:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
 80084c8:	2000      	movs	r0, #0
 80084ca:	4770      	bx	lr
 80084cc:	2000      	movs	r0, #0
 80084ce:	4770      	bx	lr
 80084d0:	2000      	movs	r0, #0
 80084d2:	4770      	bx	lr
 80084d4:	2000      	movs	r0, #0
 80084d6:	4770      	bx	lr

080084d8 <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
 80084d8:	2001      	movs	r0, #1
 80084da:	4770      	bx	lr

080084dc <preparse_value>:
{
 80084dc:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
 80084de:	6806      	ldr	r6, [r0, #0]
    it->type = CborInvalidType;
 80084e0:	23ff      	movs	r3, #255	; 0xff
 80084e2:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
 80084e4:	6841      	ldr	r1, [r0, #4]
 80084e6:	6873      	ldr	r3, [r6, #4]
 80084e8:	4299      	cmp	r1, r3
 80084ea:	f000 808b 	beq.w	8008604 <preparse_value+0x128>
 80084ee:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
 80084f0:	6830      	ldr	r0, [r6, #0]
 80084f2:	6803      	ldr	r3, [r0, #0]
 80084f4:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
 80084f6:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
    it->type = type;
 80084fa:	73a5      	strb	r5, [r4, #14]
    it->flags = 0;
 80084fc:	2300      	movs	r3, #0
 80084fe:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
 8008500:	f000 001f 	and.w	r0, r0, #31
 8008504:	81a0      	strh	r0, [r4, #12]
    if (descriptor > Value64Bit) {
 8008506:	281b      	cmp	r0, #27
 8008508:	d91d      	bls.n	8008546 <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
 800850a:	281f      	cmp	r0, #31
 800850c:	d10b      	bne.n	8008526 <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
 800850e:	4628      	mov	r0, r5
 8008510:	f7ff ffd0 	bl	80084b4 <is_fixed_type>
 8008514:	f080 0001 	eor.w	r0, r0, #1
 8008518:	f010 0fff 	tst.w	r0, #255	; 0xff
 800851c:	d00b      	beq.n	8008536 <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
 800851e:	2304      	movs	r3, #4
 8008520:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
 8008522:	2000      	movs	r0, #0
}
 8008524:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
 8008526:	2de0      	cmp	r5, #224	; 0xe0
 8008528:	d002      	beq.n	8008530 <preparse_value+0x54>
 800852a:	f240 1005 	movw	r0, #261	; 0x105
 800852e:	e7f9      	b.n	8008524 <preparse_value+0x48>
 8008530:	f240 1003 	movw	r0, #259	; 0x103
 8008534:	e7f6      	b.n	8008524 <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
 8008536:	2de0      	cmp	r5, #224	; 0xe0
 8008538:	d002      	beq.n	8008540 <preparse_value+0x64>
 800853a:	f240 1005 	movw	r0, #261	; 0x105
 800853e:	e7f1      	b.n	8008524 <preparse_value+0x48>
 8008540:	f44f 7081 	mov.w	r0, #258	; 0x102
 8008544:	e7ee      	b.n	8008524 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
 8008546:	2817      	cmp	r0, #23
 8008548:	d919      	bls.n	800857e <preparse_value+0xa2>
 800854a:	f1a0 0218 	sub.w	r2, r0, #24
 800854e:	2301      	movs	r3, #1
 8008550:	4093      	lsls	r3, r2
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
 8008552:	3301      	adds	r3, #1
 8008554:	6872      	ldr	r2, [r6, #4]
 8008556:	6861      	ldr	r1, [r4, #4]
 8008558:	1a52      	subs	r2, r2, r1
 800855a:	4293      	cmp	r3, r2
 800855c:	d855      	bhi.n	800860a <preparse_value+0x12e>
    uint8_t majortype = type >> MajorTypeShift;
 800855e:	096d      	lsrs	r5, r5, #5
    if (majortype == NegativeIntegerType) {
 8008560:	2d01      	cmp	r5, #1
 8008562:	d00e      	beq.n	8008582 <preparse_value+0xa6>
    } else if (majortype == SimpleTypesType) {
 8008564:	2d07      	cmp	r5, #7
 8008566:	d011      	beq.n	800858c <preparse_value+0xb0>
    if (descriptor < Value8Bit)
 8008568:	2817      	cmp	r0, #23
 800856a:	d953      	bls.n	8008614 <preparse_value+0x138>
    if (descriptor == Value8Bit)
 800856c:	2818      	cmp	r0, #24
 800856e:	d13a      	bne.n	80085e6 <preparse_value+0x10a>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
 8008570:	6830      	ldr	r0, [r6, #0]
 8008572:	6803      	ldr	r3, [r0, #0]
 8008574:	3101      	adds	r1, #1
 8008576:	4798      	blx	r3
 8008578:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
 800857a:	2000      	movs	r0, #0
 800857c:	e7d2      	b.n	8008524 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
 800857e:	2300      	movs	r3, #0
 8008580:	e7e7      	b.n	8008552 <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
 8008582:	2302      	movs	r3, #2
 8008584:	73e3      	strb	r3, [r4, #15]
        it->type = CborIntegerType;
 8008586:	2300      	movs	r3, #0
 8008588:	73a3      	strb	r3, [r4, #14]
 800858a:	e7ed      	b.n	8008568 <preparse_value+0x8c>
        switch (descriptor) {
 800858c:	3814      	subs	r0, #20
 800858e:	280b      	cmp	r0, #11
 8008590:	d83e      	bhi.n	8008610 <preparse_value+0x134>
 8008592:	e8df f000 	tbb	[pc, r0]
 8008596:	0d06      	.short	0x0d06
 8008598:	0d130d0d 	.word	0x0d130d0d
 800859c:	22220b0b 	.word	0x22220b0b
 80085a0:	2222      	.short	0x2222
            it->extra = false;
 80085a2:	2000      	movs	r0, #0
 80085a4:	81a0      	strh	r0, [r4, #12]
            it->type = CborBooleanType;
 80085a6:	23f5      	movs	r3, #245	; 0xf5
 80085a8:	73a3      	strb	r3, [r4, #14]
            break;
 80085aa:	e7bb      	b.n	8008524 <preparse_value+0x48>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
 80085ac:	2301      	movs	r3, #1
 80085ae:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
 80085b0:	6830      	ldr	r0, [r6, #0]
 80085b2:	6803      	ldr	r3, [r0, #0]
 80085b4:	4798      	blx	r3
 80085b6:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
 80085b8:	2000      	movs	r0, #0
            break;
 80085ba:	e7b3      	b.n	8008524 <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
 80085bc:	6830      	ldr	r0, [r6, #0]
 80085be:	6803      	ldr	r3, [r0, #0]
 80085c0:	3101      	adds	r1, #1
 80085c2:	4798      	blx	r3
 80085c4:	b280      	uxth	r0, r0
 80085c6:	81a0      	strh	r0, [r4, #12]
            if (unlikely(it->extra < 32)) {
 80085c8:	281f      	cmp	r0, #31
 80085ca:	d901      	bls.n	80085d0 <preparse_value+0xf4>
        return CborNoError;
 80085cc:	2000      	movs	r0, #0
 80085ce:	e7a9      	b.n	8008524 <preparse_value+0x48>
                it->type = CborInvalidType;
 80085d0:	23ff      	movs	r3, #255	; 0xff
 80085d2:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
 80085d4:	f44f 7083 	mov.w	r0, #262	; 0x106
 80085d8:	e7a4      	b.n	8008524 <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
 80085da:	2300      	movs	r3, #0
 80085dc:	461a      	mov	r2, r3
 80085de:	4619      	mov	r1, r3
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7f9 f909 	bl	80017f8 <__assert_func>
    else if (descriptor == Value16Bit)
 80085e6:	2819      	cmp	r0, #25
 80085e8:	d106      	bne.n	80085f8 <preparse_value+0x11c>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
 80085ea:	6830      	ldr	r0, [r6, #0]
 80085ec:	6843      	ldr	r3, [r0, #4]
 80085ee:	3101      	adds	r1, #1
 80085f0:	4798      	blx	r3
 80085f2:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
 80085f4:	2000      	movs	r0, #0
 80085f6:	e795      	b.n	8008524 <preparse_value+0x48>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
 80085f8:	7be3      	ldrb	r3, [r4, #15]
 80085fa:	f043 0301 	orr.w	r3, r3, #1
 80085fe:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
 8008600:	2000      	movs	r0, #0
 8008602:	e78f      	b.n	8008524 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
 8008604:	f240 1001 	movw	r0, #257	; 0x101
 8008608:	e78c      	b.n	8008524 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
 800860a:	f240 1001 	movw	r0, #257	; 0x101
 800860e:	e789      	b.n	8008524 <preparse_value+0x48>
        return CborNoError;
 8008610:	2000      	movs	r0, #0
 8008612:	e787      	b.n	8008524 <preparse_value+0x48>
        return CborNoError;
 8008614:	2000      	movs	r0, #0
 8008616:	e785      	b.n	8008524 <preparse_value+0x48>

08008618 <preparse_next_value>:
{
 8008618:	b510      	push	{r4, lr}
 800861a:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
 800861c:	6883      	ldr	r3, [r0, #8]
 800861e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008622:	d00d      	beq.n	8008640 <preparse_next_value+0x28>
        if (it->type != CborTagType && !--it->remaining) {
 8008624:	7b82      	ldrb	r2, [r0, #14]
 8008626:	2ac0      	cmp	r2, #192	; 0xc0
 8008628:	d002      	beq.n	8008630 <preparse_next_value+0x18>
 800862a:	3b01      	subs	r3, #1
 800862c:	6083      	str	r3, [r0, #8]
 800862e:	b11b      	cbz	r3, 8008638 <preparse_next_value+0x20>
    return preparse_value(it);
 8008630:	4620      	mov	r0, r4
 8008632:	f7ff ff53 	bl	80084dc <preparse_value>
}
 8008636:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
 8008638:	23ff      	movs	r3, #255	; 0xff
 800863a:	7383      	strb	r3, [r0, #14]
            return CborNoError;
 800863c:	2000      	movs	r0, #0
 800863e:	e7fa      	b.n	8008636 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
 8008640:	6841      	ldr	r1, [r0, #4]
 8008642:	6803      	ldr	r3, [r0, #0]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	4291      	cmp	r1, r2
 8008648:	d0f2      	beq.n	8008630 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	6803      	ldr	r3, [r0, #0]
 800864e:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
 8008650:	28ff      	cmp	r0, #255	; 0xff
 8008652:	d1ed      	bne.n	8008630 <preparse_next_value+0x18>
        ++it->offset;
 8008654:	6863      	ldr	r3, [r4, #4]
 8008656:	3301      	adds	r3, #1
 8008658:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
 800865a:	23ff      	movs	r3, #255	; 0xff
 800865c:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
 800865e:	2000      	movs	r0, #0
 8008660:	60a0      	str	r0, [r4, #8]
        return CborNoError;
 8008662:	e7e8      	b.n	8008636 <preparse_next_value+0x1e>

08008664 <extract_length>:
{
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	4606      	mov	r6, r0
 8008668:	460c      	mov	r4, r1
 800866a:	4615      	mov	r5, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
 800866c:	6800      	ldr	r0, [r0, #0]
 800866e:	6803      	ldr	r3, [r0, #0]
 8008670:	6809      	ldr	r1, [r1, #0]
 8008672:	4798      	blx	r3
 8008674:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	3301      	adds	r3, #1
 800867c:	6023      	str	r3, [r4, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
 800867e:	2817      	cmp	r0, #23
 8008680:	d915      	bls.n	80086ae <extract_length+0x4a>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
 8008682:	281b      	cmp	r0, #27
 8008684:	d836      	bhi.n	80086f4 <extract_length+0x90>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
 8008686:	3818      	subs	r0, #24
 8008688:	2701      	movs	r7, #1
 800868a:	4087      	lsls	r7, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
 800868c:	6873      	ldr	r3, [r6, #4]
 800868e:	6821      	ldr	r1, [r4, #0]
 8008690:	1a5b      	subs	r3, r3, r1
 8008692:	429f      	cmp	r7, r3
 8008694:	d833      	bhi.n	80086fe <extract_length+0x9a>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
 8008696:	2f01      	cmp	r7, #1
 8008698:	d116      	bne.n	80086c8 <extract_length+0x64>
        *len = p->d->get8(p->d, *offset);
 800869a:	6830      	ldr	r0, [r6, #0]
 800869c:	6803      	ldr	r3, [r0, #0]
 800869e:	4798      	blx	r3
 80086a0:	b2c2      	uxtb	r2, r0
 80086a2:	2300      	movs	r3, #0
    } else if (bytesNeeded == 4) {
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
    }
    *offset += bytesNeeded;
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	4438      	add	r0, r7
 80086a8:	6020      	str	r0, [r4, #0]
    return CborNoError;
 80086aa:	2000      	movs	r0, #0
 80086ac:	e002      	b.n	80086b4 <extract_length+0x50>
        *len = additional_information;
 80086ae:	b2c2      	uxtb	r2, r0
 80086b0:	2300      	movs	r3, #0
        return CborNoError;
 80086b2:	2000      	movs	r0, #0
    if (err) {
 80086b4:	bb40      	cbnz	r0, 8008708 <extract_length+0xa4>
    *len = v;
 80086b6:	602a      	str	r2, [r5, #0]
    if (v != *len)
 80086b8:	2500      	movs	r5, #0
 80086ba:	429d      	cmp	r5, r3
 80086bc:	bf08      	it	eq
 80086be:	4292      	cmpeq	r2, r2
 80086c0:	d024      	beq.n	800870c <extract_length+0xa8>
        return CborErrorDataTooLarge;
 80086c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80086c6:	e021      	b.n	800870c <extract_length+0xa8>
    } else if (bytesNeeded == 2) {
 80086c8:	2f02      	cmp	r7, #2
 80086ca:	d105      	bne.n	80086d8 <extract_length+0x74>
        *len =  p->d->get16(p->d, *offset);
 80086cc:	6830      	ldr	r0, [r6, #0]
 80086ce:	6843      	ldr	r3, [r0, #4]
 80086d0:	4798      	blx	r3
 80086d2:	b282      	uxth	r2, r0
 80086d4:	2300      	movs	r3, #0
 80086d6:	e7e5      	b.n	80086a4 <extract_length+0x40>
    } else if (bytesNeeded == 4) {
 80086d8:	2f04      	cmp	r7, #4
 80086da:	d005      	beq.n	80086e8 <extract_length+0x84>
        *len =  p->d->get64(p->d, *offset);
 80086dc:	6830      	ldr	r0, [r6, #0]
 80086de:	68c3      	ldr	r3, [r0, #12]
 80086e0:	4798      	blx	r3
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	e7dd      	b.n	80086a4 <extract_length+0x40>
        *len =  p->d->get32(p->d, *offset);
 80086e8:	6830      	ldr	r0, [r6, #0]
 80086ea:	6883      	ldr	r3, [r0, #8]
 80086ec:	4798      	blx	r3
 80086ee:	4602      	mov	r2, r0
 80086f0:	2300      	movs	r3, #0
 80086f2:	e7d7      	b.n	80086a4 <extract_length+0x40>
    *len = 1;
 80086f4:	2201      	movs	r2, #1
 80086f6:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
 80086f8:	f240 1005 	movw	r0, #261	; 0x105
 80086fc:	e7da      	b.n	80086b4 <extract_length+0x50>
    *len = 1;
 80086fe:	2201      	movs	r2, #1
 8008700:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
 8008702:	f240 1001 	movw	r0, #257	; 0x101
 8008706:	e7d5      	b.n	80086b4 <extract_length+0x50>
        *len = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	602b      	str	r3, [r5, #0]
}
 800870c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800870e <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
 800870e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008712:	b085      	sub	sp, #20
 8008714:	4604      	mov	r4, r0
 8008716:	4688      	mov	r8, r1
 8008718:	4691      	mov	r9, r2
 800871a:	461e      	mov	r6, r3
{ return value->type == CborByteStringType; }
 800871c:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
 800871e:	2b40      	cmp	r3, #64	; 0x40
 8008720:	d001      	beq.n	8008726 <iterate_string_chunks+0x18>
 8008722:	2b60      	cmp	r3, #96	; 0x60
 8008724:	d10c      	bne.n	8008740 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
 8008726:	6863      	ldr	r3, [r4, #4]
 8008728:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
 800872a:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
 800872c:	f012 0f04 	tst.w	r2, #4
 8008730:	d00c      	beq.n	800874c <iterate_string_chunks+0x3e>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
 8008732:	3301      	adds	r3, #1
 8008734:	9302      	str	r3, [sp, #8]
        total = 0;
 8008736:	2300      	movs	r3, #0
 8008738:	9303      	str	r3, [sp, #12]
        *result = true;
 800873a:	2301      	movs	r3, #1
 800873c:	7033      	strb	r3, [r6, #0]
 800873e:	e055      	b.n	80087ec <iterate_string_chunks+0xde>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
 8008740:	2300      	movs	r3, #0
 8008742:	461a      	mov	r2, r3
 8008744:	4619      	mov	r1, r3
 8008746:	4618      	mov	r0, r3
 8008748:	f7f9 f856 	bl	80017f8 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
 800874c:	aa03      	add	r2, sp, #12
 800874e:	a902      	add	r1, sp, #8
 8008750:	6820      	ldr	r0, [r4, #0]
 8008752:	f7ff ff87 	bl	8008664 <extract_length>
        if (err)
 8008756:	4603      	mov	r3, r0
 8008758:	2800      	cmp	r0, #0
 800875a:	f040 8084 	bne.w	8008866 <iterate_string_chunks+0x158>
        if (total > (size_t)(value->parser->end - offset))
 800875e:	6820      	ldr	r0, [r4, #0]
 8008760:	6843      	ldr	r3, [r0, #4]
 8008762:	9a02      	ldr	r2, [sp, #8]
 8008764:	1a99      	subs	r1, r3, r2
 8008766:	9b03      	ldr	r3, [sp, #12]
 8008768:	4299      	cmp	r1, r3
 800876a:	f0c0 8083 	bcc.w	8008874 <iterate_string_chunks+0x166>
        if (total <= *buflen)
 800876e:	f8d9 1000 	ldr.w	r1, [r9]
 8008772:	428b      	cmp	r3, r1
 8008774:	d82a      	bhi.n	80087cc <iterate_string_chunks+0xbe>
            *result = !!func(value->parser->d, buffer, offset, total);
 8008776:	4641      	mov	r1, r8
 8008778:	6800      	ldr	r0, [r0, #0]
 800877a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800877c:	47a8      	blx	r5
 800877e:	3000      	adds	r0, #0
 8008780:	bf18      	it	ne
 8008782:	2001      	movne	r0, #1
 8008784:	7030      	strb	r0, [r6, #0]
        offset += total;
 8008786:	9b02      	ldr	r3, [sp, #8]
 8008788:	9a03      	ldr	r2, [sp, #12]
 800878a:	4413      	add	r3, r2
 800878c:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
 800878e:	7833      	ldrb	r3, [r6, #0]
 8008790:	b153      	cbz	r3, 80087a8 <iterate_string_chunks+0x9a>
 8008792:	f8d9 2000 	ldr.w	r2, [r9]
 8008796:	9b03      	ldr	r3, [sp, #12]
 8008798:	429a      	cmp	r2, r3
 800879a:	d905      	bls.n	80087a8 <iterate_string_chunks+0x9a>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
 800879c:	f1b8 0f00 	cmp.w	r8, #0
 80087a0:	d002      	beq.n	80087a8 <iterate_string_chunks+0x9a>
            *(buffer + total) = '\0';
 80087a2:	2200      	movs	r2, #0
 80087a4:	f808 2003 	strb.w	r2, [r8, r3]
        }
    }
    *buflen = total;
 80087a8:	9b03      	ldr	r3, [sp, #12]
 80087aa:	f8c9 3000 	str.w	r3, [r9]

    if (next) {
 80087ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d062      	beq.n	800887a <iterate_string_chunks+0x16c>
        *next = *value;
 80087b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80087b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80087ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
 80087be:	9b02      	ldr	r3, [sp, #8]
 80087c0:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
 80087c2:	4620      	mov	r0, r4
 80087c4:	f7ff ff28 	bl	8008618 <preparse_next_value>
 80087c8:	4603      	mov	r3, r0
 80087ca:	e04c      	b.n	8008866 <iterate_string_chunks+0x158>
            *result = false;
 80087cc:	2300      	movs	r3, #0
 80087ce:	7033      	strb	r3, [r6, #0]
 80087d0:	e7d9      	b.n	8008786 <iterate_string_chunks+0x78>
                ++offset;
 80087d2:	9b02      	ldr	r3, [sp, #8]
 80087d4:	3301      	adds	r3, #1
 80087d6:	9302      	str	r3, [sp, #8]
 80087d8:	e7d9      	b.n	800878e <iterate_string_chunks+0x80>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
 80087da:	2201      	movs	r2, #1
 80087dc:	e021      	b.n	8008822 <iterate_string_chunks+0x114>
                *result = false;
 80087de:	2300      	movs	r3, #0
 80087e0:	7033      	strb	r3, [r6, #0]
            offset += chunkLen;
 80087e2:	9b02      	ldr	r3, [sp, #8]
 80087e4:	9a01      	ldr	r2, [sp, #4]
 80087e6:	4413      	add	r3, r2
 80087e8:	9302      	str	r3, [sp, #8]
            total = newTotal;
 80087ea:	9503      	str	r5, [sp, #12]
            if (offset == value->parser->end)
 80087ec:	6823      	ldr	r3, [r4, #0]
 80087ee:	685a      	ldr	r2, [r3, #4]
 80087f0:	9902      	ldr	r1, [sp, #8]
 80087f2:	428a      	cmp	r2, r1
 80087f4:	d02f      	beq.n	8008856 <iterate_string_chunks+0x148>
            val = value->parser->d->get8(value->parser->d, offset);
 80087f6:	6818      	ldr	r0, [r3, #0]
 80087f8:	6803      	ldr	r3, [r0, #0]
 80087fa:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
 80087fc:	28ff      	cmp	r0, #255	; 0xff
 80087fe:	d0e8      	beq.n	80087d2 <iterate_string_chunks+0xc4>
            if ((val & MajorTypeMask) != value->type)
 8008800:	f020 001f 	bic.w	r0, r0, #31
 8008804:	7ba3      	ldrb	r3, [r4, #14]
 8008806:	4298      	cmp	r0, r3
 8008808:	d128      	bne.n	800885c <iterate_string_chunks+0x14e>
            err = extract_length(value->parser, &offset, &chunkLen);
 800880a:	aa01      	add	r2, sp, #4
 800880c:	a902      	add	r1, sp, #8
 800880e:	6820      	ldr	r0, [r4, #0]
 8008810:	f7ff ff28 	bl	8008664 <extract_length>
            if (err)
 8008814:	4603      	mov	r3, r0
 8008816:	bb30      	cbnz	r0, 8008866 <iterate_string_chunks+0x158>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
 8008818:	9903      	ldr	r1, [sp, #12]
 800881a:	9b01      	ldr	r3, [sp, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	18cd      	adds	r5, r1, r3
 8008820:	d2db      	bcs.n	80087da <iterate_string_chunks+0xcc>
 8008822:	b9f2      	cbnz	r2, 8008862 <iterate_string_chunks+0x154>
            if (chunkLen > (size_t)(value->parser->end - offset))
 8008824:	f8d4 c000 	ldr.w	ip, [r4]
 8008828:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800882c:	9a02      	ldr	r2, [sp, #8]
 800882e:	1a80      	subs	r0, r0, r2
 8008830:	4283      	cmp	r3, r0
 8008832:	d81c      	bhi.n	800886e <iterate_string_chunks+0x160>
            if (*result && *buflen >= newTotal)
 8008834:	7830      	ldrb	r0, [r6, #0]
 8008836:	2800      	cmp	r0, #0
 8008838:	d0d1      	beq.n	80087de <iterate_string_chunks+0xd0>
 800883a:	f8d9 0000 	ldr.w	r0, [r9]
 800883e:	42a8      	cmp	r0, r5
 8008840:	d3cd      	bcc.n	80087de <iterate_string_chunks+0xd0>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
 8008842:	4441      	add	r1, r8
 8008844:	f8dc 0000 	ldr.w	r0, [ip]
 8008848:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800884a:	47b8      	blx	r7
 800884c:	3000      	adds	r0, #0
 800884e:	bf18      	it	ne
 8008850:	2001      	movne	r0, #1
 8008852:	7030      	strb	r0, [r6, #0]
 8008854:	e7c5      	b.n	80087e2 <iterate_string_chunks+0xd4>
                return CborErrorUnexpectedEOF;
 8008856:	f240 1301 	movw	r3, #257	; 0x101
 800885a:	e004      	b.n	8008866 <iterate_string_chunks+0x158>
                return CborErrorIllegalType;
 800885c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008860:	e001      	b.n	8008866 <iterate_string_chunks+0x158>
                return CborErrorDataTooLarge;
 8008862:	f44f 6380 	mov.w	r3, #1024	; 0x400
    }
    return CborNoError;
}
 8008866:	4618      	mov	r0, r3
 8008868:	b005      	add	sp, #20
 800886a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
 800886e:	f240 1301 	movw	r3, #257	; 0x101
 8008872:	e7f8      	b.n	8008866 <iterate_string_chunks+0x158>
            return CborErrorUnexpectedEOF;
 8008874:	f240 1301 	movw	r3, #257	; 0x101
 8008878:	e7f5      	b.n	8008866 <iterate_string_chunks+0x158>
    return CborNoError;
 800887a:	2300      	movs	r3, #0
 800887c:	e7f3      	b.n	8008866 <iterate_string_chunks+0x158>

0800887e <advance_internal>:
{
 800887e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008880:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
 8008882:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
 8008884:	6830      	ldr	r0, [r6, #0]
 8008886:	6803      	ldr	r3, [r0, #0]
 8008888:	6861      	ldr	r1, [r4, #4]
 800888a:	4798      	blx	r3
 800888c:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
 8008890:	6863      	ldr	r3, [r4, #4]
 8008892:	3301      	adds	r3, #1
 8008894:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
 8008896:	2817      	cmp	r0, #23
 8008898:	d915      	bls.n	80088c6 <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
 800889a:	281b      	cmp	r0, #27
 800889c:	d83f      	bhi.n	800891e <advance_internal+0xa0>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
 800889e:	3818      	subs	r0, #24
 80088a0:	2501      	movs	r5, #1
 80088a2:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
 80088a4:	6873      	ldr	r3, [r6, #4]
 80088a6:	6861      	ldr	r1, [r4, #4]
 80088a8:	1a5b      	subs	r3, r3, r1
 80088aa:	429d      	cmp	r5, r3
 80088ac:	d83c      	bhi.n	8008928 <advance_internal+0xaa>
    } else if (bytesNeeded == 1) {
 80088ae:	2d01      	cmp	r5, #1
 80088b0:	d122      	bne.n	80088f8 <advance_internal+0x7a>
        *len = p->d->get8(p->d, *offset);
 80088b2:	6830      	ldr	r0, [r6, #0]
 80088b4:	6803      	ldr	r3, [r0, #0]
 80088b6:	4798      	blx	r3
 80088b8:	b2c0      	uxtb	r0, r0
 80088ba:	2100      	movs	r1, #0
    *offset += bytesNeeded;
 80088bc:	6863      	ldr	r3, [r4, #4]
 80088be:	441d      	add	r5, r3
 80088c0:	6065      	str	r5, [r4, #4]
    return CborNoError;
 80088c2:	2300      	movs	r3, #0
 80088c4:	e002      	b.n	80088cc <advance_internal+0x4e>
        *len = additional_information;
 80088c6:	b2c0      	uxtb	r0, r0
 80088c8:	2100      	movs	r1, #0
        return CborNoError;
 80088ca:	2300      	movs	r3, #0
    assert(err == CborNoError);
 80088cc:	bb8b      	cbnz	r3, 8008932 <advance_internal+0xb4>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
 80088ce:	7ba3      	ldrb	r3, [r4, #14]
 80088d0:	2b40      	cmp	r3, #64	; 0x40
 80088d2:	d001      	beq.n	80088d8 <advance_internal+0x5a>
 80088d4:	2b60      	cmp	r3, #96	; 0x60
 80088d6:	d10b      	bne.n	80088f0 <advance_internal+0x72>
        assert(length == (size_t)length);
 80088d8:	2700      	movs	r7, #0
 80088da:	428f      	cmp	r7, r1
 80088dc:	bf08      	it	eq
 80088de:	4280      	cmpeq	r0, r0
 80088e0:	d12d      	bne.n	800893e <advance_internal+0xc0>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
 80088e2:	7be3      	ldrb	r3, [r4, #15]
 80088e4:	f013 0f04 	tst.w	r3, #4
 80088e8:	d12f      	bne.n	800894a <advance_internal+0xcc>
        it->offset += length;
 80088ea:	6863      	ldr	r3, [r4, #4]
 80088ec:	4403      	add	r3, r0
 80088ee:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
 80088f0:	4620      	mov	r0, r4
 80088f2:	f7ff fe91 	bl	8008618 <preparse_next_value>
}
 80088f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (bytesNeeded == 2) {
 80088f8:	2d02      	cmp	r5, #2
 80088fa:	d105      	bne.n	8008908 <advance_internal+0x8a>
        *len =  p->d->get16(p->d, *offset);
 80088fc:	6830      	ldr	r0, [r6, #0]
 80088fe:	6843      	ldr	r3, [r0, #4]
 8008900:	4798      	blx	r3
 8008902:	b280      	uxth	r0, r0
 8008904:	2100      	movs	r1, #0
 8008906:	e7d9      	b.n	80088bc <advance_internal+0x3e>
    } else if (bytesNeeded == 4) {
 8008908:	2d04      	cmp	r5, #4
 800890a:	d003      	beq.n	8008914 <advance_internal+0x96>
        *len =  p->d->get64(p->d, *offset);
 800890c:	6830      	ldr	r0, [r6, #0]
 800890e:	68c3      	ldr	r3, [r0, #12]
 8008910:	4798      	blx	r3
 8008912:	e7d3      	b.n	80088bc <advance_internal+0x3e>
        *len =  p->d->get32(p->d, *offset);
 8008914:	6830      	ldr	r0, [r6, #0]
 8008916:	6883      	ldr	r3, [r0, #8]
 8008918:	4798      	blx	r3
 800891a:	2100      	movs	r1, #0
 800891c:	e7ce      	b.n	80088bc <advance_internal+0x3e>
    *len = 1;
 800891e:	2001      	movs	r0, #1
 8008920:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
 8008922:	f240 1305 	movw	r3, #261	; 0x105
 8008926:	e7d1      	b.n	80088cc <advance_internal+0x4e>
    *len = 1;
 8008928:	2001      	movs	r0, #1
 800892a:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
 800892c:	f240 1301 	movw	r3, #257	; 0x101
 8008930:	e7cc      	b.n	80088cc <advance_internal+0x4e>
    assert(err == CborNoError);
 8008932:	2300      	movs	r3, #0
 8008934:	461a      	mov	r2, r3
 8008936:	4619      	mov	r1, r3
 8008938:	4618      	mov	r0, r3
 800893a:	f7f8 ff5d 	bl	80017f8 <__assert_func>
        assert(length == (size_t)length);
 800893e:	2300      	movs	r3, #0
 8008940:	461a      	mov	r2, r3
 8008942:	4619      	mov	r1, r3
 8008944:	4618      	mov	r0, r3
 8008946:	f7f8 ff57 	bl	80017f8 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
 800894a:	2300      	movs	r3, #0
 800894c:	461a      	mov	r2, r3
 800894e:	4619      	mov	r1, r3
 8008950:	4618      	mov	r0, r3
 8008952:	f7f8 ff51 	bl	80017f8 <__assert_func>

08008956 <_cbor_value_decode_int64_internal>:
{
 8008956:	b510      	push	{r4, lr}
 8008958:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
 800895a:	6803      	ldr	r3, [r0, #0]
 800895c:	6818      	ldr	r0, [r3, #0]
 800895e:	6803      	ldr	r3, [r0, #0]
 8008960:	6861      	ldr	r1, [r4, #4]
 8008962:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
 8008964:	7be3      	ldrb	r3, [r4, #15]
 8008966:	f013 0f01 	tst.w	r3, #1
 800896a:	d104      	bne.n	8008976 <_cbor_value_decode_int64_internal+0x20>
 800896c:	7ba3      	ldrb	r3, [r4, #14]
 800896e:	2bfa      	cmp	r3, #250	; 0xfa
 8008970:	d001      	beq.n	8008976 <_cbor_value_decode_int64_internal+0x20>
 8008972:	2bfb      	cmp	r3, #251	; 0xfb
 8008974:	d110      	bne.n	8008998 <_cbor_value_decode_int64_internal+0x42>
 8008976:	f000 031f 	and.w	r3, r0, #31
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
 800897a:	f1a3 021a 	sub.w	r2, r3, #26
 800897e:	2a01      	cmp	r2, #1
 8008980:	d810      	bhi.n	80089a4 <_cbor_value_decode_int64_internal+0x4e>
    if ((val & 1) == (Value32Bit & 1))
 8008982:	f010 0f01 	tst.w	r0, #1
 8008986:	d113      	bne.n	80089b0 <_cbor_value_decode_int64_internal+0x5a>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	6883      	ldr	r3, [r0, #8]
 800898e:	6861      	ldr	r1, [r4, #4]
 8008990:	3101      	adds	r1, #1
 8008992:	4798      	blx	r3
 8008994:	2100      	movs	r1, #0
}
 8008996:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
 8008998:	2300      	movs	r3, #0
 800899a:	461a      	mov	r2, r3
 800899c:	4619      	mov	r1, r3
 800899e:	4618      	mov	r0, r3
 80089a0:	f7f8 ff2a 	bl	80017f8 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
 80089a4:	2300      	movs	r3, #0
 80089a6:	461a      	mov	r2, r3
 80089a8:	4619      	mov	r1, r3
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7f8 ff24 	bl	80017f8 <__assert_func>
    assert((val & SmallValueMask) == Value64Bit);
 80089b0:	2b1b      	cmp	r3, #27
 80089b2:	d106      	bne.n	80089c2 <_cbor_value_decode_int64_internal+0x6c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	6818      	ldr	r0, [r3, #0]
 80089b8:	68c3      	ldr	r3, [r0, #12]
 80089ba:	6861      	ldr	r1, [r4, #4]
 80089bc:	3101      	adds	r1, #1
 80089be:	4798      	blx	r3
 80089c0:	e7e9      	b.n	8008996 <_cbor_value_decode_int64_internal+0x40>
    assert((val & SmallValueMask) == Value64Bit);
 80089c2:	2300      	movs	r3, #0
 80089c4:	461a      	mov	r2, r3
 80089c6:	4619      	mov	r1, r3
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7f8 ff15 	bl	80017f8 <__assert_func>

080089ce <cbor_parser_init>:
{
 80089ce:	b510      	push	{r4, lr}
    memset(parser, 0, sizeof(*parser));
 80089d0:	2400      	movs	r4, #0
 80089d2:	6054      	str	r4, [r2, #4]
 80089d4:	6094      	str	r4, [r2, #8]
    parser->d = d;
 80089d6:	6010      	str	r0, [r2, #0]
    parser->end = d->message_size;
 80089d8:	6980      	ldr	r0, [r0, #24]
 80089da:	6050      	str	r0, [r2, #4]
    parser->flags = flags;
 80089dc:	6091      	str	r1, [r2, #8]
    it->parser = parser;
 80089de:	601a      	str	r2, [r3, #0]
    it->offset = 0;
 80089e0:	605c      	str	r4, [r3, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
 80089e2:	2201      	movs	r2, #1
 80089e4:	609a      	str	r2, [r3, #8]
    return preparse_value(it);
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7ff fd78 	bl	80084dc <preparse_value>
}
 80089ec:	bd10      	pop	{r4, pc}

080089ee <cbor_value_enter_container>:
{
 80089ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f0:	4605      	mov	r5, r0
 80089f2:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
 80089f4:	7b83      	ldrb	r3, [r0, #14]
 80089f6:	2b80      	cmp	r3, #128	; 0x80
 80089f8:	d021      	beq.n	8008a3e <cbor_value_enter_container+0x50>
 80089fa:	2ba0      	cmp	r3, #160	; 0xa0
 80089fc:	d01d      	beq.n	8008a3a <cbor_value_enter_container+0x4c>
 80089fe:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
 8008a00:	b1fb      	cbz	r3, 8008a42 <cbor_value_enter_container+0x54>
    *recursed = *it;
 8008a02:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008a06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
 8008a0a:	7beb      	ldrb	r3, [r5, #15]
 8008a0c:	f013 0f04 	tst.w	r3, #4
 8008a10:	d01c      	beq.n	8008a4c <cbor_value_enter_container+0x5e>
        recursed->remaining = UINT32_MAX;
 8008a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a16:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
 8008a18:	460b      	mov	r3, r1
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f7ff fd5c 	bl	80084dc <preparse_value>
        if (err != CborErrorUnexpectedBreak)
 8008a24:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
 8008a28:	d140      	bne.n	8008aac <cbor_value_enter_container+0xbe>
        ++recursed->offset;
 8008a2a:	6863      	ldr	r3, [r4, #4]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
 8008a30:	23ff      	movs	r3, #255	; 0xff
 8008a32:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
 8008a34:	2000      	movs	r0, #0
 8008a36:	60a0      	str	r0, [r4, #8]
    return CborNoError;
 8008a38:	e038      	b.n	8008aac <cbor_value_enter_container+0xbe>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e7e0      	b.n	8008a00 <cbor_value_enter_container+0x12>
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e7de      	b.n	8008a00 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
 8008a42:	461a      	mov	r2, r3
 8008a44:	4619      	mov	r1, r3
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7f8 fed6 	bl	80017f8 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
 8008a4c:	6826      	ldr	r6, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
 8008a4e:	6830      	ldr	r0, [r6, #0]
 8008a50:	6803      	ldr	r3, [r0, #0]
 8008a52:	6861      	ldr	r1, [r4, #4]
 8008a54:	4798      	blx	r3
 8008a56:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
 8008a5a:	6863      	ldr	r3, [r4, #4]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
 8008a60:	2817      	cmp	r0, #23
 8008a62:	d915      	bls.n	8008a90 <cbor_value_enter_container+0xa2>
    if (unlikely(additional_information > Value64Bit))
 8008a64:	281b      	cmp	r0, #27
 8008a66:	d835      	bhi.n	8008ad4 <cbor_value_enter_container+0xe6>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
 8008a68:	3818      	subs	r0, #24
 8008a6a:	2701      	movs	r7, #1
 8008a6c:	4087      	lsls	r7, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
 8008a6e:	6873      	ldr	r3, [r6, #4]
 8008a70:	6861      	ldr	r1, [r4, #4]
 8008a72:	1a5b      	subs	r3, r3, r1
 8008a74:	429f      	cmp	r7, r3
 8008a76:	d832      	bhi.n	8008ade <cbor_value_enter_container+0xf0>
    } else if (bytesNeeded == 1) {
 8008a78:	2f01      	cmp	r7, #1
 8008a7a:	d118      	bne.n	8008aae <cbor_value_enter_container+0xc0>
        *len = p->d->get8(p->d, *offset);
 8008a7c:	6830      	ldr	r0, [r6, #0]
 8008a7e:	6803      	ldr	r3, [r0, #0]
 8008a80:	4798      	blx	r3
 8008a82:	b2c0      	uxtb	r0, r0
 8008a84:	2100      	movs	r1, #0
    *offset += bytesNeeded;
 8008a86:	6863      	ldr	r3, [r4, #4]
 8008a88:	441f      	add	r7, r3
 8008a8a:	6067      	str	r7, [r4, #4]
    return CborNoError;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	e002      	b.n	8008a96 <cbor_value_enter_container+0xa8>
        *len = additional_information;
 8008a90:	b2c0      	uxtb	r0, r0
 8008a92:	2100      	movs	r1, #0
        return CborNoError;
 8008a94:	2300      	movs	r3, #0
        assert(err == CborNoError);
 8008a96:	bb3b      	cbnz	r3, 8008ae8 <cbor_value_enter_container+0xfa>
        recursed->remaining = (uint32_t)len;
 8008a98:	60a0      	str	r0, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	428b      	cmp	r3, r1
 8008a9e:	bf08      	it	eq
 8008aa0:	4280      	cmpeq	r0, r0
 8008aa2:	d027      	beq.n	8008af4 <cbor_value_enter_container+0x106>
            recursed->offset = it->offset;
 8008aa4:	686b      	ldr	r3, [r5, #4]
 8008aa6:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
 8008aa8:	f44f 6080 	mov.w	r0, #1024	; 0x400
}
 8008aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (bytesNeeded == 2) {
 8008aae:	2f02      	cmp	r7, #2
 8008ab0:	d105      	bne.n	8008abe <cbor_value_enter_container+0xd0>
        *len =  p->d->get16(p->d, *offset);
 8008ab2:	6830      	ldr	r0, [r6, #0]
 8008ab4:	6843      	ldr	r3, [r0, #4]
 8008ab6:	4798      	blx	r3
 8008ab8:	b280      	uxth	r0, r0
 8008aba:	2100      	movs	r1, #0
 8008abc:	e7e3      	b.n	8008a86 <cbor_value_enter_container+0x98>
    } else if (bytesNeeded == 4) {
 8008abe:	2f04      	cmp	r7, #4
 8008ac0:	d003      	beq.n	8008aca <cbor_value_enter_container+0xdc>
        *len =  p->d->get64(p->d, *offset);
 8008ac2:	6830      	ldr	r0, [r6, #0]
 8008ac4:	68c3      	ldr	r3, [r0, #12]
 8008ac6:	4798      	blx	r3
 8008ac8:	e7dd      	b.n	8008a86 <cbor_value_enter_container+0x98>
        *len =  p->d->get32(p->d, *offset);
 8008aca:	6830      	ldr	r0, [r6, #0]
 8008acc:	6883      	ldr	r3, [r0, #8]
 8008ace:	4798      	blx	r3
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	e7d8      	b.n	8008a86 <cbor_value_enter_container+0x98>
    *len = 1;
 8008ad4:	2001      	movs	r0, #1
 8008ad6:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
 8008ad8:	f240 1305 	movw	r3, #261	; 0x105
 8008adc:	e7db      	b.n	8008a96 <cbor_value_enter_container+0xa8>
    *len = 1;
 8008ade:	2001      	movs	r0, #1
 8008ae0:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
 8008ae2:	f240 1301 	movw	r3, #257	; 0x101
 8008ae6:	e7d6      	b.n	8008a96 <cbor_value_enter_container+0xa8>
        assert(err == CborNoError);
 8008ae8:	2300      	movs	r3, #0
 8008aea:	461a      	mov	r2, r3
 8008aec:	4619      	mov	r1, r3
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7f8 fe82 	bl	80017f8 <__assert_func>
        if (recursed->remaining != len || len == UINT32_MAX) {
 8008af4:	2900      	cmp	r1, #0
 8008af6:	bf08      	it	eq
 8008af8:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8008afc:	d0d2      	beq.n	8008aa4 <cbor_value_enter_container+0xb6>
        if (recursed->type == CborMapType) {
 8008afe:	7ba3      	ldrb	r3, [r4, #14]
 8008b00:	2ba0      	cmp	r3, #160	; 0xa0
 8008b02:	d006      	beq.n	8008b12 <cbor_value_enter_container+0x124>
        if (len != 0)
 8008b04:	ea50 0301 	orrs.w	r3, r0, r1
 8008b08:	d092      	beq.n	8008a30 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f7ff fce6 	bl	80084dc <preparse_value>
 8008b10:	e7cc      	b.n	8008aac <cbor_value_enter_container+0xbe>
            if (recursed->remaining > UINT32_MAX / 2) {
 8008b12:	2800      	cmp	r0, #0
 8008b14:	db02      	blt.n	8008b1c <cbor_value_enter_container+0x12e>
            recursed->remaining *= 2;
 8008b16:	0046      	lsls	r6, r0, #1
 8008b18:	60a6      	str	r6, [r4, #8]
 8008b1a:	e7f3      	b.n	8008b04 <cbor_value_enter_container+0x116>
                recursed->offset = it->offset;
 8008b1c:	686b      	ldr	r3, [r5, #4]
 8008b1e:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
 8008b20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008b24:	e7c2      	b.n	8008aac <cbor_value_enter_container+0xbe>

08008b26 <cbor_value_leave_container>:
{
 8008b26:	b508      	push	{r3, lr}
 8008b28:	7b83      	ldrb	r3, [r0, #14]
 8008b2a:	2b80      	cmp	r3, #128	; 0x80
 8008b2c:	d00d      	beq.n	8008b4a <cbor_value_leave_container+0x24>
 8008b2e:	2ba0      	cmp	r3, #160	; 0xa0
 8008b30:	d009      	beq.n	8008b46 <cbor_value_leave_container+0x20>
 8008b32:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
 8008b34:	b15b      	cbz	r3, 8008b4e <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
 8008b36:	7b8b      	ldrb	r3, [r1, #14]
 8008b38:	2bff      	cmp	r3, #255	; 0xff
 8008b3a:	d10d      	bne.n	8008b58 <cbor_value_leave_container+0x32>
    it->offset = recursed->offset;
 8008b3c:	684b      	ldr	r3, [r1, #4]
 8008b3e:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
 8008b40:	f7ff fd6a 	bl	8008618 <preparse_next_value>
}
 8008b44:	bd08      	pop	{r3, pc}
 8008b46:	2301      	movs	r3, #1
 8008b48:	e7f4      	b.n	8008b34 <cbor_value_leave_container+0xe>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e7f2      	b.n	8008b34 <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4619      	mov	r1, r3
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7f8 fe50 	bl	80017f8 <__assert_func>
    assert(recursed->type == CborInvalidType);
 8008b58:	2300      	movs	r3, #0
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7f8 fe4a 	bl	80017f8 <__assert_func>

08008b64 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
 8008b64:	b510      	push	{r4, lr}
 8008b66:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
 8008b68:	460c      	mov	r4, r1
 8008b6a:	b189      	cbz	r1, 8008b90 <_cbor_value_copy_string+0x2c>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
 8008b6c:	6801      	ldr	r1, [r0, #0]
 8008b6e:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
 8008b70:	6949      	ldr	r1, [r1, #20]
 8008b72:	9101      	str	r1, [sp, #4]
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	f10d 030f 	add.w	r3, sp, #15
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	f7ff fdc7 	bl	800870e <iterate_string_chunks>
    return err ? err :
 8008b80:	4603      	mov	r3, r0
 8008b82:	b910      	cbnz	r0, 8008b8a <_cbor_value_copy_string+0x26>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
 8008b84:	f89d 200f 	ldrb.w	r2, [sp, #15]
    return err ? err :
 8008b88:	b122      	cbz	r2, 8008b94 <_cbor_value_copy_string+0x30>
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	b004      	add	sp, #16
 8008b8e:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
 8008b90:	4902      	ldr	r1, [pc, #8]	; (8008b9c <_cbor_value_copy_string+0x38>)
 8008b92:	e7ee      	b.n	8008b72 <_cbor_value_copy_string+0xe>
    return err ? err :
 8008b94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008b98:	e7f7      	b.n	8008b8a <_cbor_value_copy_string+0x26>
 8008b9a:	bf00      	nop
 8008b9c:	080084d9 	.word	0x080084d9

08008ba0 <advance_recursive>:
{
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	460e      	mov	r6, r1
    if (is_fixed_type(it->type))
 8008ba8:	7b84      	ldrb	r4, [r0, #14]
 8008baa:	4620      	mov	r0, r4
 8008bac:	f7ff fc82 	bl	80084b4 <is_fixed_type>
 8008bb0:	b9c0      	cbnz	r0, 8008be4 <advance_recursive+0x44>
 8008bb2:	2c80      	cmp	r4, #128	; 0x80
 8008bb4:	d01f      	beq.n	8008bf6 <advance_recursive+0x56>
 8008bb6:	2ca0      	cmp	r4, #160	; 0xa0
 8008bb8:	d01b      	beq.n	8008bf2 <advance_recursive+0x52>
 8008bba:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
 8008bbc:	b1eb      	cbz	r3, 8008bfa <advance_recursive+0x5a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
 8008bbe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008bc2:	d02c      	beq.n	8008c1e <advance_recursive+0x7e>
    err = cbor_value_enter_container(it, &recursed);
 8008bc4:	a902      	add	r1, sp, #8
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f7ff ff11 	bl	80089ee <cbor_value_enter_container>
    if (err)
 8008bcc:	4603      	mov	r3, r0
 8008bce:	b968      	cbnz	r0, 8008bec <advance_recursive+0x4c>
{ return it->remaining == 0; }
 8008bd0:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&recursed)) {
 8008bd2:	b1f3      	cbz	r3, 8008c12 <advance_recursive+0x72>
        err = advance_recursive(&recursed, nestingLevel + 1);
 8008bd4:	1c71      	adds	r1, r6, #1
 8008bd6:	a802      	add	r0, sp, #8
 8008bd8:	f7ff ffe2 	bl	8008ba0 <advance_recursive>
        if (err)
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d0f6      	beq.n	8008bd0 <advance_recursive+0x30>
 8008be2:	e003      	b.n	8008bec <advance_recursive+0x4c>
        return advance_internal(it);
 8008be4:	4628      	mov	r0, r5
 8008be6:	f7ff fe4a 	bl	800887e <advance_internal>
 8008bea:	4603      	mov	r3, r0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	b006      	add	sp, #24
 8008bf0:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e7e2      	b.n	8008bbc <advance_recursive+0x1c>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e7e0      	b.n	8008bbc <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
 8008bfa:	aa06      	add	r2, sp, #24
 8008bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c00:	f842 3d14 	str.w	r3, [r2, #-20]!
        return _cbor_value_copy_string(it, NULL, &len, it);
 8008c04:	462b      	mov	r3, r5
 8008c06:	2100      	movs	r1, #0
 8008c08:	4628      	mov	r0, r5
 8008c0a:	f7ff ffab 	bl	8008b64 <_cbor_value_copy_string>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	e7ec      	b.n	8008bec <advance_recursive+0x4c>
    return cbor_value_leave_container(it, &recursed);
 8008c12:	a902      	add	r1, sp, #8
 8008c14:	4628      	mov	r0, r5
 8008c16:	f7ff ff86 	bl	8008b26 <cbor_value_leave_container>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	e7e6      	b.n	8008bec <advance_recursive+0x4c>
        return CborErrorNestingTooDeep;
 8008c1e:	f240 4301 	movw	r3, #1025	; 0x401
 8008c22:	e7e3      	b.n	8008bec <advance_recursive+0x4c>

08008c24 <cbor_value_advance>:
{
 8008c24:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
 8008c26:	7b83      	ldrb	r3, [r0, #14]
 8008c28:	2bff      	cmp	r3, #255	; 0xff
 8008c2a:	d005      	beq.n	8008c38 <cbor_value_advance+0x14>
    if (!it->remaining)
 8008c2c:	6883      	ldr	r3, [r0, #8]
 8008c2e:	b14b      	cbz	r3, 8008c44 <cbor_value_advance+0x20>
    return advance_recursive(it, 0);
 8008c30:	2100      	movs	r1, #0
 8008c32:	f7ff ffb5 	bl	8008ba0 <advance_recursive>
}
 8008c36:	bd08      	pop	{r3, pc}
    assert(it->type != CborInvalidType);
 8008c38:	2300      	movs	r3, #0
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7f8 fdda 	bl	80017f8 <__assert_func>
        return CborErrorAdvancePastEOF;
 8008c44:	2003      	movs	r0, #3
 8008c46:	e7f6      	b.n	8008c36 <cbor_value_advance+0x12>

08008c48 <cbor_value_calculate_string_length>:
{
 8008c48:	b508      	push	{r3, lr}
 8008c4a:	460a      	mov	r2, r1
    *len = SIZE_MAX;
 8008c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c50:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
 8008c52:	2300      	movs	r3, #0
 8008c54:	4619      	mov	r1, r3
 8008c56:	f7ff ff85 	bl	8008b64 <_cbor_value_copy_string>
}
 8008c5a:	bd08      	pop	{r3, pc}

08008c5c <LL_GPIO_AF_DisableRemap_USART2>:
  * @note  DISABLE: No remap (CTS/PA0, RTS/PA1, TX/PA2, RX/PA3, CK/PA4)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_DisableRemap_USART2(void)
{
  CLEAR_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP);
 8008c5c:	4a02      	ldr	r2, [pc, #8]	; (8008c68 <LL_GPIO_AF_DisableRemap_USART2+0xc>)
 8008c5e:	6853      	ldr	r3, [r2, #4]
 8008c60:	f023 0308 	bic.w	r3, r3, #8
 8008c64:	6053      	str	r3, [r2, #4]
}
 8008c66:	4770      	bx	lr
 8008c68:	40010000 	.word	0x40010000

08008c6c <clock_config>:
    return dump_cfg;
}

static void
clock_config(void)
{
 8008c6c:	b500      	push	{lr}
 8008c6e:	b091      	sub	sp, #68	; 0x44
    RCC_ClkInitTypeDef clkinitstruct = { 0 };
 8008c70:	2100      	movs	r1, #0
 8008c72:	910b      	str	r1, [sp, #44]	; 0x2c
 8008c74:	910c      	str	r1, [sp, #48]	; 0x30
 8008c76:	910d      	str	r1, [sp, #52]	; 0x34
 8008c78:	910e      	str	r1, [sp, #56]	; 0x38
 8008c7a:	910f      	str	r1, [sp, #60]	; 0x3c
    RCC_OscInitTypeDef oscinitstruct = { 0 };
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	a802      	add	r0, sp, #8
 8008c80:	f7fa fa2b 	bl	80030da <memset>

    /* Configure PLL ------------------------------------------------------*/
    /* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
    /* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
    /* Enable HSI and activate PLL with HSi_DIV2 as source */
    oscinitstruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008c84:	2302      	movs	r3, #2
 8008c86:	9301      	str	r3, [sp, #4]
    oscinitstruct.HSEState = RCC_HSE_OFF;
    oscinitstruct.LSEState = RCC_LSE_OFF;
    oscinitstruct.HSIState = RCC_HSI_ON;
 8008c88:	2201      	movs	r2, #1
 8008c8a:	9205      	str	r2, [sp, #20]
    oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008c8c:	2210      	movs	r2, #16
 8008c8e:	9206      	str	r2, [sp, #24]
    oscinitstruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    oscinitstruct.PLL.PLLState = RCC_PLL_ON;
 8008c90:	9308      	str	r3, [sp, #32]
    oscinitstruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
    oscinitstruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8008c92:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8008c96:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK) {
 8008c98:	a801      	add	r0, sp, #4
 8008c9a:	f002 fcf7 	bl	800b68c <HAL_RCC_OscConfig>
 8008c9e:	b990      	cbnz	r0, 8008cc6 <clock_config+0x5a>
        assert(0);
    }

    /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
       clocks dividers */
    clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8008ca0:	230f      	movs	r3, #15
 8008ca2:	930b      	str	r3, [sp, #44]	; 0x2c
                               RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
    clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ca4:	2102      	movs	r1, #2
 8008ca6:	910c      	str	r1, [sp, #48]	; 0x30
    clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	930d      	str	r3, [sp, #52]	; 0x34
    clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8008cac:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8008cb0:	930f      	str	r3, [sp, #60]	; 0x3c
    clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cb6:	930e      	str	r3, [sp, #56]	; 0x38
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) {
 8008cb8:	a80b      	add	r0, sp, #44	; 0x2c
 8008cba:	f002 ff0d 	bl	800bad8 <HAL_RCC_ClockConfig>
 8008cbe:	b940      	cbnz	r0, 8008cd2 <clock_config+0x66>
        assert(0);
    }
}
 8008cc0:	b011      	add	sp, #68	; 0x44
 8008cc2:	f85d fb04 	ldr.w	pc, [sp], #4
        assert(0);
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4619      	mov	r1, r3
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7f8 fd93 	bl	80017f8 <__assert_func>
        assert(0);
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7f8 fd8d 	bl	80017f8 <__assert_func>
	...

08008ce0 <hal_bsp_flash_dev>:
    if (id != 0) {
 8008ce0:	b908      	cbnz	r0, 8008ce6 <hal_bsp_flash_dev+0x6>
    return &stm32_flash_dev;
 8008ce2:	4802      	ldr	r0, [pc, #8]	; (8008cec <hal_bsp_flash_dev+0xc>)
}
 8008ce4:	4770      	bx	lr
        return NULL;
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	0800dbb0 	.word	0x0800dbb0

08008cf0 <hal_bsp_init>:

void
hal_bsp_init(void)
{
 8008cf0:	b500      	push	{lr}
 8008cf2:	b083      	sub	sp, #12
    int rc;

    (void)rc;

    clock_config();
 8008cf4:	f7ff ffba 	bl	8008c6c <clock_config>

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &hal_uart0, "uart0",
 8008cf8:	4b17      	ldr	r3, [pc, #92]	; (8008d58 <hal_bsp_init+0x68>)
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	4b17      	ldr	r3, [pc, #92]	; (8008d5c <hal_bsp_init+0x6c>)
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	2300      	movs	r3, #0
 8008d02:	2201      	movs	r2, #1
 8008d04:	4916      	ldr	r1, [pc, #88]	; (8008d60 <hal_bsp_init+0x70>)
 8008d06:	4817      	ldr	r0, [pc, #92]	; (8008d64 <hal_bsp_init+0x74>)
 8008d08:	f7f9 f802 	bl	8001d10 <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *)&uart_cfg[0]);
    assert(rc == 0);
 8008d0c:	b988      	cbnz	r0, 8008d32 <hal_bsp_init+0x42>
#endif

#if MYNEWT_VAL(TIMER_0)
    hal_timer_init(0, TIM2);
 8008d0e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008d12:	2000      	movs	r0, #0
 8008d14:	f001 f80e 	bl	8009d34 <hal_timer_init>
#if MYNEWT_VAL(TIMER_2)
    hal_timer_init(2, TIM4);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
 8008d18:	4813      	ldr	r0, [pc, #76]	; (8008d68 <hal_bsp_init+0x78>)
 8008d1a:	f7f8 ff9b 	bl	8001c54 <os_cputime_init>
    assert(rc == 0);
 8008d1e:	b970      	cbnz	r0, 8008d3e <hal_bsp_init+0x4e>
#endif

#if MYNEWT_VAL(SPI_0_MASTER)
    rc = hal_spi_init(0, &spi0_cfg, HAL_SPI_TYPE_MASTER);
 8008d20:	2200      	movs	r2, #0
 8008d22:	4912      	ldr	r1, [pc, #72]	; (8008d6c <hal_bsp_init+0x7c>)
 8008d24:	4610      	mov	r0, r2
 8008d26:	f000 fd09 	bl	800973c <hal_spi_init>
    assert(rc == 0);
 8008d2a:	b970      	cbnz	r0, 8008d4a <hal_bsp_init+0x5a>
#if MYNEWT_VAL(I2C_0)
    rc = hal_i2c_init(0, &i2c_cfg0);
    assert(rc == 0);
#endif

}
 8008d2c:	b003      	add	sp, #12
 8008d2e:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
 8008d32:	2300      	movs	r3, #0
 8008d34:	461a      	mov	r2, r3
 8008d36:	4619      	mov	r1, r3
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7f8 fd5d 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 8008d3e:	2300      	movs	r3, #0
 8008d40:	461a      	mov	r2, r3
 8008d42:	4619      	mov	r1, r3
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7f8 fd57 	bl	80017f8 <__assert_func>
    assert(rc == 0);
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4619      	mov	r1, r3
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7f8 fd51 	bl	80017f8 <__assert_func>
 8008d56:	bf00      	nop
 8008d58:	0800db98 	.word	0x0800db98
 8008d5c:	08008ed5 	.word	0x08008ed5
 8008d60:	0800db90 	.word	0x0800db90
 8008d64:	2000338c 	.word	0x2000338c
 8008d68:	000f4240 	.word	0x000f4240
 8008d6c:	200001dc 	.word	0x200001dc

08008d70 <adc_chan_config>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
adc_chan_config(struct adc_dev *dev, uint8_t cnum, void *data)
{
 8008d70:	b510      	push	{r4, lr}
    assert(dev->ad_funcs->af_configure_channel != NULL);
 8008d72:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	b123      	cbz	r3, 8008d82 <adc_chan_config+0x12>

    if (cnum >= dev->ad_chan_count) {
 8008d78:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008d7a:	42a1      	cmp	r1, r4
 8008d7c:	da06      	bge.n	8008d8c <adc_chan_config+0x1c>
        return (EINVAL);
    }

    return (dev->ad_funcs->af_configure_channel(dev, cnum, data));
 8008d7e:	4798      	blx	r3
}
 8008d80:	bd10      	pop	{r4, pc}
    assert(dev->ad_funcs->af_configure_channel != NULL);
 8008d82:	461a      	mov	r2, r3
 8008d84:	4619      	mov	r1, r3
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7f8 fd36 	bl	80017f8 <__assert_func>
        return (EINVAL);
 8008d8c:	2016      	movs	r0, #22
 8008d8e:	e7f7      	b.n	8008d80 <adc_chan_config+0x10>

08008d90 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
 8008d90:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 8008d92:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008d94:	b118      	cbz	r0, 8008d9e <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
 8008d96:	3801      	subs	r0, #1
 8008d98:	f001 f98a 	bl	800a0b0 <hal_uart_blocking_tx>
}
 8008d9c:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
 8008d9e:	2300      	movs	r3, #0
 8008da0:	461a      	mov	r2, r3
 8008da2:	4619      	mov	r1, r3
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7f8 fd27 	bl	80017f8 <__assert_func>

08008daa <uart_hal_start_rx>:
{
 8008daa:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 8008dac:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008dae:	b118      	cbz	r0, 8008db8 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
 8008db0:	3801      	subs	r0, #1
 8008db2:	f001 f92f 	bl	800a014 <hal_uart_start_rx>
}
 8008db6:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
 8008db8:	2300      	movs	r3, #0
 8008dba:	461a      	mov	r2, r3
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7f8 fd1a 	bl	80017f8 <__assert_func>

08008dc4 <uart_hal_start_tx>:
{
 8008dc4:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 8008dc6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008dc8:	b118      	cbz	r0, 8008dd2 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
 8008dca:	3801      	subs	r0, #1
 8008dcc:	f001 f950 	bl	800a070 <hal_uart_start_tx>
}
 8008dd0:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7f8 fd0d 	bl	80017f8 <__assert_func>

08008dde <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
 8008dde:	b530      	push	{r4, r5, lr}
 8008de0:	b083      	sub	sp, #12
    return (intptr_t)(dev->ud_priv) - 1;
 8008de2:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_dev *dev = (struct uart_dev *)odev;
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
 8008de4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008de6:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8008dea:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
 8008dee:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
 8008df2:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
 8008df6:	9001      	str	r0, [sp, #4]
 8008df8:	9500      	str	r5, [sp, #0]
 8008dfa:	1e60      	subs	r0, r4, #1
 8008dfc:	f001 f974 	bl	800a0e8 <hal_uart_config>
    if (rc) {
 8008e00:	4603      	mov	r3, r0
 8008e02:	b910      	cbnz	r0, 8008e0a <uart_hal_resume+0x2c>
        return OS_EINVAL;
    }

    return OS_OK;
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	b003      	add	sp, #12
 8008e08:	bd30      	pop	{r4, r5, pc}
        return OS_EINVAL;
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	e7fa      	b.n	8008e04 <uart_hal_resume+0x26>

08008e0e <uart_hal_suspend>:
{
 8008e0e:	b570      	push	{r4, r5, r6, lr}
 8008e10:	4606      	mov	r6, r0
 8008e12:	460c      	mov	r4, r1
 8008e14:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
 8008e16:	f7f9 fcc9 	bl	80027ac <os_time_get>
 8008e1a:	1a20      	subs	r0, r4, r0
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	dc08      	bgt.n	8008e32 <uart_hal_suspend+0x24>
 8008e20:	b155      	cbz	r5, 8008e38 <uart_hal_suspend+0x2a>
    return (intptr_t)(dev->ud_priv) - 1;
 8008e22:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
 8008e24:	3801      	subs	r0, #1
 8008e26:	f001 faf7 	bl	800a418 <hal_uart_close>
    if (rc) {
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	b110      	cbz	r0, 8008e34 <uart_hal_suspend+0x26>
        return OS_EINVAL;
 8008e2e:	2302      	movs	r3, #2
 8008e30:	e000      	b.n	8008e34 <uart_hal_suspend+0x26>
        return OS_EINVAL;
 8008e32:	2302      	movs	r3, #2
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e7fb      	b.n	8008e34 <uart_hal_suspend+0x26>

08008e3c <uart_hal_close>:
{
 8008e3c:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
 8008e3e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
 8008e40:	3801      	subs	r0, #1
 8008e42:	f001 fae9 	bl	800a418 <hal_uart_close>
    if (rc) {
 8008e46:	4603      	mov	r3, r0
 8008e48:	b908      	cbnz	r0, 8008e4e <uart_hal_close+0x12>
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e7fb      	b.n	8008e4a <uart_hal_close+0xe>

08008e52 <uart_hal_open>:
{
 8008e52:	b530      	push	{r4, r5, lr}
 8008e54:	b083      	sub	sp, #12
 8008e56:	4605      	mov	r5, r0
    assert(dev->ud_priv);
 8008e58:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d02c      	beq.n	8008eb8 <uart_hal_open+0x66>
 8008e5e:	4614      	mov	r4, r2
    if (!uc) {
 8008e60:	2a00      	cmp	r2, #0
 8008e62:	d02f      	beq.n	8008ec4 <uart_hal_open+0x72>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
 8008e64:	7eeb      	ldrb	r3, [r5, #27]
 8008e66:	f013 0f02 	tst.w	r3, #2
 8008e6a:	d12d      	bne.n	8008ec8 <uart_hal_open+0x76>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
 8008e6c:	7913      	ldrb	r3, [r2, #4]
 8008e6e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
 8008e72:	79d3      	ldrb	r3, [r2, #7]
 8008e74:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
 8008e78:	7993      	ldrb	r3, [r2, #6]
 8008e7a:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
 8008e7e:	6813      	ldr	r3, [r2, #0]
 8008e80:	632b      	str	r3, [r5, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
 8008e82:	7953      	ldrb	r3, [r2, #5]
 8008e84:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
 8008e88:	6953      	ldr	r3, [r2, #20]
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	68d3      	ldr	r3, [r2, #12]
 8008e8e:	6912      	ldr	r2, [r2, #16]
 8008e90:	68a1      	ldr	r1, [r4, #8]
 8008e92:	3801      	subs	r0, #1
 8008e94:	f001 f89c 	bl	8009fd0 <hal_uart_init_cbs>
    if (rc) {
 8008e98:	b9d0      	cbnz	r0, 8008ed0 <uart_hal_open+0x7e>
    return (intptr_t)(dev->ud_priv) - 1;
 8008e9a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
 8008e9c:	6821      	ldr	r1, [r4, #0]
 8008e9e:	7922      	ldrb	r2, [r4, #4]
 8008ea0:	7963      	ldrb	r3, [r4, #5]
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
 8008ea2:	79a5      	ldrb	r5, [r4, #6]
 8008ea4:	79e4      	ldrb	r4, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
 8008ea6:	9401      	str	r4, [sp, #4]
 8008ea8:	9500      	str	r5, [sp, #0]
 8008eaa:	3801      	subs	r0, #1
 8008eac:	f001 f91c 	bl	800a0e8 <hal_uart_config>
    if (rc) {
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	b150      	cbz	r0, 8008eca <uart_hal_open+0x78>
        return OS_EINVAL;
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	e008      	b.n	8008eca <uart_hal_open+0x78>
    assert(dev->ud_priv);
 8008eb8:	2300      	movs	r3, #0
 8008eba:	461a      	mov	r2, r3
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7f8 fc9a 	bl	80017f8 <__assert_func>
        return OS_EINVAL;
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e000      	b.n	8008eca <uart_hal_open+0x78>
        return OS_EBUSY;
 8008ec8:	230b      	movs	r3, #11
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	b003      	add	sp, #12
 8008ece:	bd30      	pop	{r4, r5, pc}
        return OS_EINVAL;
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	e7fa      	b.n	8008eca <uart_hal_open+0x78>

08008ed4 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
 8008eda:	69c5      	ldr	r5, [r0, #28]
 8008edc:	4628      	mov	r0, r5
 8008ede:	f003 faf7 	bl	800c4d0 <strlen>
 8008ee2:	3801      	subs	r0, #1
 8008ee4:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((int) ch)) {
 8008ee6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008eea:	2b09      	cmp	r3, #9
 8008eec:	d816      	bhi.n	8008f1c <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
 8008eee:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
 8008ef2:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
 8008ef4:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <uart_hal_init+0x4c>)
 8008ef6:	6023      	str	r3, [r4, #0]
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <uart_hal_init+0x50>)
 8008efa:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
 8008efc:	4b0a      	ldr	r3, [pc, #40]	; (8008f28 <uart_hal_init+0x54>)
 8008efe:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
 8008f00:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <uart_hal_init+0x58>)
 8008f02:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
 8008f04:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <uart_hal_init+0x5c>)
 8008f06:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
 8008f08:	4b0a      	ldr	r3, [pc, #40]	; (8008f34 <uart_hal_init+0x60>)
 8008f0a:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
 8008f0c:	4b0a      	ldr	r3, [pc, #40]	; (8008f38 <uart_hal_init+0x64>)
 8008f0e:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
 8008f10:	4631      	mov	r1, r6
 8008f12:	3830      	subs	r0, #48	; 0x30
 8008f14:	f001 fa70 	bl	800a3f8 <hal_uart_init>

    return OS_OK;
 8008f18:	2000      	movs	r0, #0
}
 8008f1a:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
 8008f1c:	2002      	movs	r0, #2
 8008f1e:	e7fc      	b.n	8008f1a <uart_hal_init+0x46>
 8008f20:	08008e53 	.word	0x08008e53
 8008f24:	08008e3d 	.word	0x08008e3d
 8008f28:	08008e0f 	.word	0x08008e0f
 8008f2c:	08008ddf 	.word	0x08008ddf
 8008f30:	08008dc5 	.word	0x08008dc5
 8008f34:	08008dab 	.word	0x08008dab
 8008f38:	08008d91 	.word	0x08008d91

08008f3c <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
 8008f3c:	6843      	ldr	r3, [r0, #4]
 8008f3e:	428b      	cmp	r3, r1
 8008f40:	d808      	bhi.n	8008f54 <hal_flash_check_addr+0x18>
 8008f42:	6882      	ldr	r2, [r0, #8]
 8008f44:	4413      	add	r3, r2
 8008f46:	428b      	cmp	r3, r1
 8008f48:	d301      	bcc.n	8008f4e <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
 8008f4a:	2000      	movs	r0, #0
}
 8008f4c:	4770      	bx	lr
        return SYS_EINVAL;
 8008f4e:	f06f 0001 	mvn.w	r0, #1
 8008f52:	4770      	bx	lr
 8008f54:	f06f 0001 	mvn.w	r0, #1
 8008f58:	4770      	bx	lr

08008f5a <hal_flash_init>:
{
 8008f5a:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
 8008f5c:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
 8008f5e:	462c      	mov	r4, r5
 8008f60:	e001      	b.n	8008f66 <hal_flash_init+0xc>
 8008f62:	3401      	adds	r4, #1
 8008f64:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7ff feba 	bl	8008ce0 <hal_bsp_flash_dev>
        if (!hf) {
 8008f6c:	b138      	cbz	r0, 8008f7e <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
 8008f6e:	6802      	ldr	r2, [r0, #0]
 8008f70:	6952      	ldr	r2, [r2, #20]
 8008f72:	4790      	blx	r2
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d0f4      	beq.n	8008f62 <hal_flash_init+0x8>
            rc = SYS_EIO;
 8008f78:	f06f 0504 	mvn.w	r5, #4
 8008f7c:	e7f1      	b.n	8008f62 <hal_flash_init+0x8>
}
 8008f7e:	4628      	mov	r0, r5
 8008f80:	bd38      	pop	{r3, r4, r5, pc}

08008f82 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
 8008f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f86:	460d      	mov	r5, r1
 8008f88:	4690      	mov	r8, r2
 8008f8a:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
 8008f8c:	f7ff fea8 	bl	8008ce0 <hal_bsp_flash_dev>
    if (!hf) {
 8008f90:	b1c0      	cbz	r0, 8008fc4 <hal_flash_read+0x42>
 8008f92:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
 8008f94:	4629      	mov	r1, r5
 8008f96:	f7ff ffd1 	bl	8008f3c <hal_flash_check_addr>
 8008f9a:	b9b0      	cbnz	r0, 8008fca <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
 8008f9c:	19a9      	adds	r1, r5, r6
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f7ff ffcc 	bl	8008f3c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
 8008fa4:	b9a0      	cbnz	r0, 8008fd0 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	681f      	ldr	r7, [r3, #0]
 8008faa:	4633      	mov	r3, r6
 8008fac:	4642      	mov	r2, r8
 8008fae:	4629      	mov	r1, r5
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	47b8      	blx	r7
    if (rc != 0) {
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	b910      	cbnz	r0, 8008fbe <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
 8008fbe:	f06f 0304 	mvn.w	r3, #4
 8008fc2:	e7f9      	b.n	8008fb8 <hal_flash_read+0x36>
        return SYS_EINVAL;
 8008fc4:	f06f 0301 	mvn.w	r3, #1
 8008fc8:	e7f6      	b.n	8008fb8 <hal_flash_read+0x36>
        return SYS_EINVAL;
 8008fca:	f06f 0301 	mvn.w	r3, #1
 8008fce:	e7f3      	b.n	8008fb8 <hal_flash_read+0x36>
 8008fd0:	f06f 0301 	mvn.w	r3, #1
 8008fd4:	e7f0      	b.n	8008fb8 <hal_flash_read+0x36>

08008fd6 <stm32_flash_sector_info>:
        uint32_t *address, uint32_t *sz)
{
    (void)dev;

#if FLASH_IS_LINEAR
    *address = dev->hf_base_addr + _FLASH_SECTOR_SIZE * idx;
 8008fd6:	6840      	ldr	r0, [r0, #4]
 8008fd8:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 8008fdc:	6011      	str	r1, [r2, #0]
    *sz = _FLASH_SECTOR_SIZE;
 8008fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008fe2:	601a      	str	r2, [r3, #0]
    *address = stm32_flash_sectors[idx];
    *sz = stm32_flash_sectors[idx + 1] - stm32_flash_sectors[idx];
#endif

    return 0;
}
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	4770      	bx	lr

08008fe8 <stm32_flash_init>:

static int
stm32_flash_init(const struct hal_flash *dev)
{
 8008fe8:	b508      	push	{r3, lr}
    (void)dev;
    STM32_HAL_FLASH_INIT();
 8008fea:	f002 f899 	bl	800b120 <HAL_FLASH_Unlock>
    return 0;
}
 8008fee:	2000      	movs	r0, #0
 8008ff0:	bd08      	pop	{r3, pc}

08008ff2 <stm32_flash_erase_sector>:
{
 8008ff2:	b508      	push	{r3, lr}
    return stm32_mcu_flash_erase_sector(dev, sector_address);
 8008ff4:	f003 f972 	bl	800c2dc <stm32_mcu_flash_erase_sector>
}
 8008ff8:	bd08      	pop	{r3, pc}

08008ffa <stm32_flash_read>:
{
 8008ffa:	b508      	push	{r3, lr}
 8008ffc:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
 8008ffe:	461a      	mov	r2, r3
 8009000:	f7fa f85e 	bl	80030c0 <memcpy>
}
 8009004:	2000      	movs	r0, #0
 8009006:	bd08      	pop	{r3, pc}

08009008 <stm32_flash_write_linear>:
{
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	b083      	sub	sp, #12
 800900e:	4683      	mov	fp, r0
 8009010:	460f      	mov	r7, r1
 8009012:	4692      	mov	sl, r2
 8009014:	461e      	mov	r6, r3
    align = dev->hf_align;
 8009016:	f8d0 9010 	ldr.w	r9, [r0, #16]
    num_words = ((num_bytes - 1) >> 1) + 1;
 800901a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800901e:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8009022:	f108 0801 	add.w	r8, r8, #1
    STM32_HAL_FLASH_CLEAR_ERRORS();
 8009026:	4b1a      	ldr	r3, [pc, #104]	; (8009090 <stm32_flash_write_linear+0x88>)
 8009028:	2235      	movs	r2, #53	; 0x35
 800902a:	60da      	str	r2, [r3, #12]
    for (i = 0; i < num_words; i++) {
 800902c:	2500      	movs	r5, #0
 800902e:	e013      	b.n	8009058 <stm32_flash_write_linear+0x50>
            memcpy(&val, &((uint8_t *)src)[i * align], align);
 8009030:	4622      	mov	r2, r4
 8009032:	fb04 a105 	mla	r1, r4, r5, sl
 8009036:	4668      	mov	r0, sp
 8009038:	f7fa f842 	bl	80030c0 <memcpy>
        rc = HAL_FLASH_Program(FLASH_PROGRAM_TYPE, address, val);
 800903c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009040:	4639      	mov	r1, r7
 8009042:	2001      	movs	r0, #1
 8009044:	f002 f8b6 	bl	800b1b4 <HAL_FLASH_Program>
 8009048:	4603      	mov	r3, r0
        if (rc != HAL_OK) {
 800904a:	b9e8      	cbnz	r0, 8009088 <stm32_flash_write_linear+0x80>
        address += align;
 800904c:	4427      	add	r7, r4
        num_bytes -= align;
 800904e:	1b36      	subs	r6, r6, r4
        if (!(i % 32)) {
 8009050:	f015 0f1f 	tst.w	r5, #31
 8009054:	d014      	beq.n	8009080 <stm32_flash_write_linear+0x78>
    for (i = 0; i < num_words; i++) {
 8009056:	3501      	adds	r5, #1
 8009058:	4545      	cmp	r5, r8
 800905a:	d214      	bcs.n	8009086 <stm32_flash_write_linear+0x7e>
        if (num_bytes < align) {
 800905c:	fa5f f489 	uxtb.w	r4, r9
 8009060:	42a6      	cmp	r6, r4
 8009062:	d2e5      	bcs.n	8009030 <stm32_flash_write_linear+0x28>
            memcpy(&val, &((uint8_t *)src)[i * align], num_bytes);
 8009064:	4632      	mov	r2, r6
 8009066:	fb04 a105 	mla	r1, r4, r5, sl
 800906a:	4668      	mov	r0, sp
 800906c:	f7fa f828 	bl	80030c0 <memcpy>
            memset((uint32_t *)&val + num_bytes, dev->hf_erased_val, align - num_bytes);
 8009070:	1ba2      	subs	r2, r4, r6
 8009072:	f89b 1014 	ldrb.w	r1, [fp, #20]
 8009076:	eb0d 0086 	add.w	r0, sp, r6, lsl #2
 800907a:	f7fa f82e 	bl	80030da <memset>
 800907e:	e7dd      	b.n	800903c <stm32_flash_write_linear+0x34>
            hal_watchdog_tickle();
 8009080:	f001 fa0a 	bl	800a498 <hal_watchdog_tickle>
 8009084:	e7e7      	b.n	8009056 <stm32_flash_write_linear+0x4e>
    return 0;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	b003      	add	sp, #12
 800908c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009090:	40022000 	.word	0x40022000

08009094 <stm32_flash_write>:
    if (!num_bytes) {
 8009094:	b11b      	cbz	r3, 800909e <stm32_flash_write+0xa>
{
 8009096:	b510      	push	{r4, lr}
    return stm32_flash_write_linear(dev, address, src, num_bytes);
 8009098:	f7ff ffb6 	bl	8009008 <stm32_flash_write_linear>
}
 800909c:	bd10      	pop	{r4, pc}
        return -1;
 800909e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80090a2:	4770      	bx	lr

080090a4 <ext_irq_handler>:
 *
 * @param index
 */
static void
ext_irq_handler(int index)
{
 80090a4:	b508      	push	{r3, lr}
    uint32_t mask;

    mask = 1 << index;
 80090a6:	2301      	movs	r3, #1
 80090a8:	4083      	lsls	r3, r0
    if (__HAL_GPIO_EXTI_GET_IT(mask) != RESET) {
 80090aa:	4a07      	ldr	r2, [pc, #28]	; (80090c8 <ext_irq_handler+0x24>)
 80090ac:	6952      	ldr	r2, [r2, #20]
 80090ae:	421a      	tst	r2, r3
 80090b0:	d008      	beq.n	80090c4 <ext_irq_handler+0x20>
        __HAL_GPIO_EXTI_CLEAR_IT(mask);
 80090b2:	4a05      	ldr	r2, [pc, #20]	; (80090c8 <ext_irq_handler+0x24>)
 80090b4:	6153      	str	r3, [r2, #20]
        gpio_irq_handlers[index].isr(gpio_irq_handlers[index].arg);
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <ext_irq_handler+0x28>)
 80090b8:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 80090bc:	6852      	ldr	r2, [r2, #4]
 80090be:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 80090c2:	4790      	blx	r2
    }
}
 80090c4:	bd08      	pop	{r3, pc}
 80090c6:	bf00      	nop
 80090c8:	40010400 	.word	0x40010400
 80090cc:	200033c8 	.word	0x200033c8

080090d0 <ext_irq0>:

#if !MYNEWT_VAL(MCU_STM32L0) && !MYNEWT_VAL(MCU_STM32F0)
/* External interrupt 0 */
static void
ext_irq0(void)
{
 80090d0:	b508      	push	{r3, lr}
    ++ext_irq_counts.irq0;
 80090d2:	4a04      	ldr	r2, [pc, #16]	; (80090e4 <ext_irq0+0x14>)
 80090d4:	6813      	ldr	r3, [r2, #0]
 80090d6:	3301      	adds	r3, #1
 80090d8:	6013      	str	r3, [r2, #0]
    ext_irq_handler(0);
 80090da:	2000      	movs	r0, #0
 80090dc:	f7ff ffe2 	bl	80090a4 <ext_irq_handler>
}
 80090e0:	bd08      	pop	{r3, pc}
 80090e2:	bf00      	nop
 80090e4:	200035c4 	.word	0x200035c4

080090e8 <ext_irq1>:

/* External interrupt 1 */
static void
ext_irq1(void)
{
 80090e8:	b508      	push	{r3, lr}
    ++ext_irq_counts.irq1;
 80090ea:	4a04      	ldr	r2, [pc, #16]	; (80090fc <ext_irq1+0x14>)
 80090ec:	6853      	ldr	r3, [r2, #4]
 80090ee:	3301      	adds	r3, #1
 80090f0:	6053      	str	r3, [r2, #4]
    ext_irq_handler(1);
 80090f2:	2001      	movs	r0, #1
 80090f4:	f7ff ffd6 	bl	80090a4 <ext_irq_handler>
}
 80090f8:	bd08      	pop	{r3, pc}
 80090fa:	bf00      	nop
 80090fc:	200035c4 	.word	0x200035c4

08009100 <ext_irq2>:

/* External interrupt 2 */
static void
ext_irq2(void)
{
 8009100:	b508      	push	{r3, lr}
    ++ext_irq_counts.irq2;
 8009102:	4a04      	ldr	r2, [pc, #16]	; (8009114 <ext_irq2+0x14>)
 8009104:	6893      	ldr	r3, [r2, #8]
 8009106:	3301      	adds	r3, #1
 8009108:	6093      	str	r3, [r2, #8]
    ext_irq_handler(2);
 800910a:	2002      	movs	r0, #2
 800910c:	f7ff ffca 	bl	80090a4 <ext_irq_handler>
}
 8009110:	bd08      	pop	{r3, pc}
 8009112:	bf00      	nop
 8009114:	200035c4 	.word	0x200035c4

08009118 <ext_irq3>:

/* External interrupt 3 */
static void
ext_irq3(void)
{
 8009118:	b508      	push	{r3, lr}
    ++ext_irq_counts.irq3;
 800911a:	4a04      	ldr	r2, [pc, #16]	; (800912c <ext_irq3+0x14>)
 800911c:	68d3      	ldr	r3, [r2, #12]
 800911e:	3301      	adds	r3, #1
 8009120:	60d3      	str	r3, [r2, #12]
    ext_irq_handler(3);
 8009122:	2003      	movs	r0, #3
 8009124:	f7ff ffbe 	bl	80090a4 <ext_irq_handler>
}
 8009128:	bd08      	pop	{r3, pc}
 800912a:	bf00      	nop
 800912c:	200035c4 	.word	0x200035c4

08009130 <ext_irq4>:
 *  External interrupt handler for external interrupt 4.
 *
 */
static void
ext_irq4(void)
{
 8009130:	b508      	push	{r3, lr}
    ++ext_irq_counts.irq4;
 8009132:	4a04      	ldr	r2, [pc, #16]	; (8009144 <ext_irq4+0x14>)
 8009134:	6913      	ldr	r3, [r2, #16]
 8009136:	3301      	adds	r3, #1
 8009138:	6113      	str	r3, [r2, #16]
    ext_irq_handler(4);
 800913a:	2004      	movs	r0, #4
 800913c:	f7ff ffb2 	bl	80090a4 <ext_irq_handler>
}
 8009140:	bd08      	pop	{r3, pc}
 8009142:	bf00      	nop
 8009144:	200035c4 	.word	0x200035c4

08009148 <ext_irq9_5>:
 *  External interrupt handler for irqs 9 through 5.
 *
 */
static void
ext_irq9_5(void)
{
 8009148:	b510      	push	{r4, lr}
    int index;

    ++ext_irq_counts.irq9_5;
 800914a:	4a06      	ldr	r2, [pc, #24]	; (8009164 <ext_irq9_5+0x1c>)
 800914c:	6953      	ldr	r3, [r2, #20]
 800914e:	3301      	adds	r3, #1
 8009150:	6153      	str	r3, [r2, #20]
    for (index = 5; index <= 9; ++index) {
 8009152:	2405      	movs	r4, #5
 8009154:	e003      	b.n	800915e <ext_irq9_5+0x16>
        ext_irq_handler(index);
 8009156:	4620      	mov	r0, r4
 8009158:	f7ff ffa4 	bl	80090a4 <ext_irq_handler>
    for (index = 5; index <= 9; ++index) {
 800915c:	3401      	adds	r4, #1
 800915e:	2c09      	cmp	r4, #9
 8009160:	ddf9      	ble.n	8009156 <ext_irq9_5+0xe>
    }
}
 8009162:	bd10      	pop	{r4, pc}
 8009164:	200035c4 	.word	0x200035c4

08009168 <ext_irq15_10>:
 *  External interrupt handler for irqs 15 through 10.
 *
 */
static void
ext_irq15_10(void)
{
 8009168:	b510      	push	{r4, lr}
    int index;

    ++ext_irq_counts.irq15_10;
 800916a:	4a06      	ldr	r2, [pc, #24]	; (8009184 <ext_irq15_10+0x1c>)
 800916c:	6993      	ldr	r3, [r2, #24]
 800916e:	3301      	adds	r3, #1
 8009170:	6193      	str	r3, [r2, #24]
    for (index = 10; index <= 15; ++index) {
 8009172:	240a      	movs	r4, #10
 8009174:	e003      	b.n	800917e <ext_irq15_10+0x16>
        ext_irq_handler(index);
 8009176:	4620      	mov	r0, r4
 8009178:	f7ff ff94 	bl	80090a4 <ext_irq_handler>
    for (index = 10; index <= 15; ++index) {
 800917c:	3401      	adds	r4, #1
 800917e:	2c0f      	cmp	r4, #15
 8009180:	ddf9      	ble.n	8009176 <ext_irq15_10+0xe>
    }
}
 8009182:	bd10      	pop	{r4, pc}
 8009184:	200035c4 	.word	0x200035c4

08009188 <hal_gpio_pin_to_irq>:
hal_gpio_pin_to_irq(int pin)
{
    int index;
    IRQn_Type irqn;

    index = MCU_GPIO_PIN_NUM(pin);
 8009188:	f000 000f 	and.w	r0, r0, #15

#if !MYNEWT_VAL(MCU_STM32L0) && !MYNEWT_VAL(MCU_STM32F0)
    if (index <= 4) {
 800918c:	2804      	cmp	r0, #4
 800918e:	dd03      	ble.n	8009198 <hal_gpio_pin_to_irq+0x10>
        irqn = EXTI0_IRQn + index;
    } else if (index <=  9) {
 8009190:	2809      	cmp	r0, #9
 8009192:	dc03      	bgt.n	800919c <hal_gpio_pin_to_irq+0x14>
        irqn = EXTI9_5_IRQn;
 8009194:	2017      	movs	r0, #23
 8009196:	4770      	bx	lr
        irqn = EXTI0_IRQn + index;
 8009198:	3006      	adds	r0, #6
 800919a:	4770      	bx	lr
    } else {
        irqn = EXTI15_10_IRQn;
 800919c:	2028      	movs	r0, #40	; 0x28
        irqn = EXTI4_15_IRQn;
    }
#endif

    return irqn;
}
 800919e:	4770      	bx	lr

080091a0 <hal_gpio_clk_enable>:
{
 80091a0:	b500      	push	{lr}
 80091a2:	b087      	sub	sp, #28
    switch (port_idx) {
 80091a4:	2804      	cmp	r0, #4
 80091a6:	d83d      	bhi.n	8009224 <hal_gpio_clk_enable+0x84>
 80091a8:	e8df f000 	tbb	[pc, r0]
 80091ac:	261b1003 	.word	0x261b1003
 80091b0:	31          	.byte	0x31
 80091b1:	00          	.byte	0x00
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80091b2:	4b1f      	ldr	r3, [pc, #124]	; (8009230 <hal_gpio_clk_enable+0x90>)
 80091b4:	699a      	ldr	r2, [r3, #24]
 80091b6:	f042 0204 	orr.w	r2, r2, #4
 80091ba:	619a      	str	r2, [r3, #24]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	f003 0304 	and.w	r3, r3, #4
 80091c2:	9301      	str	r3, [sp, #4]
 80091c4:	9b01      	ldr	r3, [sp, #4]
}
 80091c6:	b007      	add	sp, #28
 80091c8:	f85d fb04 	ldr.w	pc, [sp], #4
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80091cc:	4b18      	ldr	r3, [pc, #96]	; (8009230 <hal_gpio_clk_enable+0x90>)
 80091ce:	699a      	ldr	r2, [r3, #24]
 80091d0:	f042 0208 	orr.w	r2, r2, #8
 80091d4:	619a      	str	r2, [r3, #24]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	f003 0308 	and.w	r3, r3, #8
 80091dc:	9302      	str	r3, [sp, #8]
 80091de:	9b02      	ldr	r3, [sp, #8]
        break;
 80091e0:	e7f1      	b.n	80091c6 <hal_gpio_clk_enable+0x26>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 80091e2:	4b13      	ldr	r3, [pc, #76]	; (8009230 <hal_gpio_clk_enable+0x90>)
 80091e4:	699a      	ldr	r2, [r3, #24]
 80091e6:	f042 0210 	orr.w	r2, r2, #16
 80091ea:	619a      	str	r2, [r3, #24]
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	f003 0310 	and.w	r3, r3, #16
 80091f2:	9303      	str	r3, [sp, #12]
 80091f4:	9b03      	ldr	r3, [sp, #12]
        break;
 80091f6:	e7e6      	b.n	80091c6 <hal_gpio_clk_enable+0x26>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 80091f8:	4b0d      	ldr	r3, [pc, #52]	; (8009230 <hal_gpio_clk_enable+0x90>)
 80091fa:	699a      	ldr	r2, [r3, #24]
 80091fc:	f042 0220 	orr.w	r2, r2, #32
 8009200:	619a      	str	r2, [r3, #24]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	f003 0320 	and.w	r3, r3, #32
 8009208:	9304      	str	r3, [sp, #16]
 800920a:	9b04      	ldr	r3, [sp, #16]
        break;
 800920c:	e7db      	b.n	80091c6 <hal_gpio_clk_enable+0x26>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 800920e:	4b08      	ldr	r3, [pc, #32]	; (8009230 <hal_gpio_clk_enable+0x90>)
 8009210:	699a      	ldr	r2, [r3, #24]
 8009212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009216:	619a      	str	r2, [r3, #24]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921e:	9305      	str	r3, [sp, #20]
 8009220:	9b05      	ldr	r3, [sp, #20]
        break;
 8009222:	e7d0      	b.n	80091c6 <hal_gpio_clk_enable+0x26>
        assert(0);
 8009224:	2300      	movs	r3, #0
 8009226:	461a      	mov	r2, r3
 8009228:	4619      	mov	r1, r3
 800922a:	4618      	mov	r0, r3
 800922c:	f7f8 fae4 	bl	80017f8 <__assert_func>
 8009230:	40021000 	.word	0x40021000

08009234 <hal_gpio_set_nvic>:
#   define EXTI2_IRQn   EXTI2_TSC_IRQn
#endif

static void
hal_gpio_set_nvic(IRQn_Type irqn)
{
 8009234:	b508      	push	{r3, lr}
    uint32_t isr;

    switch (irqn) {
 8009236:	1f83      	subs	r3, r0, #6
 8009238:	2b22      	cmp	r3, #34	; 0x22
 800923a:	d837      	bhi.n	80092ac <hal_gpio_set_nvic+0x78>
 800923c:	e8df f003 	tbb	[pc, r3]
 8009240:	2e2c2a12 	.word	0x2e2c2a12
 8009244:	36363630 	.word	0x36363630
 8009248:	36363636 	.word	0x36363636
 800924c:	36363636 	.word	0x36363636
 8009250:	36363236 	.word	0x36363236
 8009254:	36363636 	.word	0x36363636
 8009258:	36363636 	.word	0x36363636
 800925c:	36363636 	.word	0x36363636
 8009260:	3636      	.short	0x3636
 8009262:	34          	.byte	0x34
 8009263:	00          	.byte	0x00
#if !MYNEWT_VAL(MCU_STM32L0) && !MYNEWT_VAL(MCU_STM32F0)
    case EXTI0_IRQn:
        isr = (uint32_t)&ext_irq0;
 8009264:	4a14      	ldr	r2, [pc, #80]	; (80092b8 <hal_gpio_set_nvic+0x84>)
  \param [in]   IRQn      Interrupt number.
  \return                 Address of interrupt handler function
 */
__STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8009266:	4b15      	ldr	r3, [pc, #84]	; (80092bc <hal_gpio_set_nvic+0x88>)
 8009268:	6899      	ldr	r1, [r3, #8]
  return (uint32_t)(* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4));
 800926a:	f100 0310 	add.w	r3, r0, #16
 800926e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
        assert(0);
        break;
    }

    /* Set isr in vector table if not yet set */
    if (NVIC_GetVector(irqn) != isr) {
 8009272:	428a      	cmp	r2, r1
 8009274:	d00d      	beq.n	8009292 <hal_gpio_set_nvic+0x5e>
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8009276:	4911      	ldr	r1, [pc, #68]	; (80092bc <hal_gpio_set_nvic+0x88>)
 8009278:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800927a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  if ((int32_t)(IRQn) >= 0)
 800927e:	2800      	cmp	r0, #0
 8009280:	db07      	blt.n	8009292 <hal_gpio_set_nvic+0x5e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009282:	f000 021f 	and.w	r2, r0, #31
 8009286:	0940      	lsrs	r0, r0, #5
 8009288:	2301      	movs	r3, #1
 800928a:	4093      	lsls	r3, r2
 800928c:	4a0c      	ldr	r2, [pc, #48]	; (80092c0 <hal_gpio_set_nvic+0x8c>)
 800928e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
        NVIC_SetVector(irqn, isr);
        NVIC_EnableIRQ(irqn);
    }
}
 8009292:	bd08      	pop	{r3, pc}
        isr = (uint32_t)&ext_irq1;
 8009294:	4a0b      	ldr	r2, [pc, #44]	; (80092c4 <hal_gpio_set_nvic+0x90>)
        break;
 8009296:	e7e6      	b.n	8009266 <hal_gpio_set_nvic+0x32>
        isr = (uint32_t)&ext_irq2;
 8009298:	4a0b      	ldr	r2, [pc, #44]	; (80092c8 <hal_gpio_set_nvic+0x94>)
        break;
 800929a:	e7e4      	b.n	8009266 <hal_gpio_set_nvic+0x32>
        isr = (uint32_t)&ext_irq3;
 800929c:	4a0b      	ldr	r2, [pc, #44]	; (80092cc <hal_gpio_set_nvic+0x98>)
        break;
 800929e:	e7e2      	b.n	8009266 <hal_gpio_set_nvic+0x32>
        isr = (uint32_t)&ext_irq4;
 80092a0:	4a0b      	ldr	r2, [pc, #44]	; (80092d0 <hal_gpio_set_nvic+0x9c>)
        break;
 80092a2:	e7e0      	b.n	8009266 <hal_gpio_set_nvic+0x32>
        isr = (uint32_t)&ext_irq9_5;
 80092a4:	4a0b      	ldr	r2, [pc, #44]	; (80092d4 <hal_gpio_set_nvic+0xa0>)
        break;
 80092a6:	e7de      	b.n	8009266 <hal_gpio_set_nvic+0x32>
        isr = (uint32_t)&ext_irq15_10;
 80092a8:	4a0b      	ldr	r2, [pc, #44]	; (80092d8 <hal_gpio_set_nvic+0xa4>)
        break;
 80092aa:	e7dc      	b.n	8009266 <hal_gpio_set_nvic+0x32>
        assert(0);
 80092ac:	2300      	movs	r3, #0
 80092ae:	461a      	mov	r2, r3
 80092b0:	4619      	mov	r1, r3
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7f8 faa0 	bl	80017f8 <__assert_func>
 80092b8:	080090d1 	.word	0x080090d1
 80092bc:	e000ed00 	.word	0xe000ed00
 80092c0:	e000e100 	.word	0xe000e100
 80092c4:	080090e9 	.word	0x080090e9
 80092c8:	08009101 	.word	0x08009101
 80092cc:	08009119 	.word	0x08009119
 80092d0:	08009131 	.word	0x08009131
 80092d4:	08009149 	.word	0x08009149
 80092d8:	08009169 	.word	0x08009169

080092dc <hal_gpio_init_stm>:
 *
 * @return int
 */
int
hal_gpio_init_stm(int pin, GPIO_InitTypeDef *cfg)
{
 80092dc:	b538      	push	{r3, r4, r5, lr}
    int port;
    uint32_t mcu_pin_mask;

    /* Is this a valid pin? */
    port = MCU_GPIO_PIN_PORT(pin);
 80092de:	f3c0 1503 	ubfx	r5, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 80092e2:	2d04      	cmp	r5, #4
 80092e4:	dc11      	bgt.n	800930a <hal_gpio_init_stm+0x2e>
 80092e6:	460c      	mov	r4, r1
        return -1;
    }

    mcu_pin_mask = GPIO_MASK(pin);
 80092e8:	f000 000f 	and.w	r0, r0, #15
 80092ec:	2301      	movs	r3, #1
 80092ee:	fa03 f000 	lsl.w	r0, r3, r0
    cfg->Pin = mcu_pin_mask;
 80092f2:	6008      	str	r0, [r1, #0]

    /* Enable the GPIO clock */
    hal_gpio_clk_enable(port);
 80092f4:	4628      	mov	r0, r5
 80092f6:	f7ff ff53 	bl	80091a0 <hal_gpio_clk_enable>

    /* Initialize pin as an input, setting proper mode */
    HAL_GPIO_Init(portmap[port], cfg);
 80092fa:	4621      	mov	r1, r4
 80092fc:	4b04      	ldr	r3, [pc, #16]	; (8009310 <hal_gpio_init_stm+0x34>)
 80092fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009302:	f002 f81b 	bl	800b33c <HAL_GPIO_Init>

    return 0;
 8009306:	2000      	movs	r0, #0
}
 8009308:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
 800930a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800930e:	e7fb      	b.n	8009308 <hal_gpio_init_stm+0x2c>
 8009310:	0800dbe4 	.word	0x0800dbe4

08009314 <hal_gpio_deinit_stm>:
 *
 * @return int
 */
int
hal_gpio_deinit_stm(int pin, GPIO_InitTypeDef *cfg)
{
 8009314:	b510      	push	{r4, lr}
    int port;
    uint32_t mcu_pin_mask;

    /* Is this a valid pin? */
    port = MCU_GPIO_PIN_PORT(pin);
 8009316:	f3c0 1403 	ubfx	r4, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 800931a:	2c04      	cmp	r4, #4
 800931c:	dc0d      	bgt.n	800933a <hal_gpio_deinit_stm+0x26>
 800931e:	460a      	mov	r2, r1
        return -1;
    }

    mcu_pin_mask = GPIO_MASK(pin);
 8009320:	f000 000f 	and.w	r0, r0, #15
 8009324:	2301      	movs	r3, #1
 8009326:	fa03 f100 	lsl.w	r1, r3, r0
    cfg->Pin = mcu_pin_mask;
 800932a:	6011      	str	r1, [r2, #0]

    /* Initialize pin as an input, setting proper mode */
    HAL_GPIO_DeInit(portmap[port], cfg->Pin);
 800932c:	4b04      	ldr	r3, [pc, #16]	; (8009340 <hal_gpio_deinit_stm+0x2c>)
 800932e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009332:	f002 f8ed 	bl	800b510 <HAL_GPIO_DeInit>

    return 0;
 8009336:	2000      	movs	r0, #0
}
 8009338:	bd10      	pop	{r4, pc}
        return -1;
 800933a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800933e:	e7fb      	b.n	8009338 <hal_gpio_deinit_stm+0x24>
 8009340:	0800dbe4 	.word	0x0800dbe4

08009344 <hal_gpio_write>:
 *
 * @param pin Pin to set
 * @param val Value to set pin (0:low 1:high)
 */
void hal_gpio_write(int pin, int val)
{
 8009344:	b510      	push	{r4, lr}
    int port;
    uint32_t mcu_pin_mask;
    GPIO_PinState state;

    port = MCU_GPIO_PIN_PORT(pin);
 8009346:	f3c0 1403 	ubfx	r4, r0, #4, #4
    mcu_pin_mask = GPIO_MASK(pin);
 800934a:	f000 000f 	and.w	r0, r0, #15
 800934e:	2301      	movs	r3, #1
 8009350:	fa03 f000 	lsl.w	r0, r3, r0

    if (val) {
 8009354:	b939      	cbnz	r1, 8009366 <hal_gpio_write+0x22>
        state = GPIO_PIN_SET;
    } else {
        state = GPIO_PIN_RESET;
 8009356:	2200      	movs	r2, #0
    }

    HAL_GPIO_WritePin(portmap[port], mcu_pin_mask, state);
 8009358:	b281      	uxth	r1, r0
 800935a:	4b04      	ldr	r3, [pc, #16]	; (800936c <hal_gpio_write+0x28>)
 800935c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009360:	f002 f94d 	bl	800b5fe <HAL_GPIO_WritePin>
}
 8009364:	bd10      	pop	{r4, pc}
        state = GPIO_PIN_SET;
 8009366:	461a      	mov	r2, r3
 8009368:	e7f6      	b.n	8009358 <hal_gpio_write+0x14>
 800936a:	bf00      	nop
 800936c:	0800dbe4 	.word	0x0800dbe4

08009370 <hal_gpio_init_out>:
{
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	b084      	sub	sp, #16
    port = MCU_GPIO_PIN_PORT(pin);
 8009374:	f3c0 1503 	ubfx	r5, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 8009378:	2d04      	cmp	r5, #4
 800937a:	dc1c      	bgt.n	80093b6 <hal_gpio_init_out+0x46>
 800937c:	460e      	mov	r6, r1
 800937e:	4604      	mov	r4, r0
    hal_gpio_clk_enable(port);
 8009380:	4628      	mov	r0, r5
 8009382:	f7ff ff0d 	bl	80091a0 <hal_gpio_clk_enable>
    hal_gpio_write(pin, val);
 8009386:	4631      	mov	r1, r6
 8009388:	4620      	mov	r0, r4
 800938a:	f7ff ffdb 	bl	8009344 <hal_gpio_write>
    cfg.Pin = GPIO_MASK(pin);
 800938e:	f004 000f 	and.w	r0, r4, #15
 8009392:	2301      	movs	r3, #1
 8009394:	fa03 f000 	lsl.w	r0, r3, r0
 8009398:	9000      	str	r0, [sp, #0]
    cfg.Mode = GPIO_MODE_OUTPUT_PP;
 800939a:	9301      	str	r3, [sp, #4]
    cfg.Pull = GPIO_NOPULL;
 800939c:	2400      	movs	r4, #0
 800939e:	9402      	str	r4, [sp, #8]
    cfg.Speed = GPIO_SPEED_FREQ_HIGH;
 80093a0:	2303      	movs	r3, #3
 80093a2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(portmap[port], &cfg);
 80093a4:	4669      	mov	r1, sp
 80093a6:	4b05      	ldr	r3, [pc, #20]	; (80093bc <hal_gpio_init_out+0x4c>)
 80093a8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093ac:	f001 ffc6 	bl	800b33c <HAL_GPIO_Init>
    return 0;
 80093b0:	4620      	mov	r0, r4
}
 80093b2:	b004      	add	sp, #16
 80093b4:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 80093b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093ba:	e7fa      	b.n	80093b2 <hal_gpio_init_out+0x42>
 80093bc:	0800dbe4 	.word	0x0800dbe4

080093c0 <hal_gpio_read>:
 * @param pin Pin number to read
 *
 * @return int 0: low, 1: high
 */
int hal_gpio_read(int pin)
{
 80093c0:	b508      	push	{r3, lr}
    int port;
    uint32_t mcu_pin_mask;

    port = MCU_GPIO_PIN_PORT(pin);
 80093c2:	f3c0 1203 	ubfx	r2, r0, #4, #4
    mcu_pin_mask = GPIO_MASK(pin);
 80093c6:	f000 000f 	and.w	r0, r0, #15
 80093ca:	2101      	movs	r1, #1
 80093cc:	4081      	lsls	r1, r0
    return HAL_GPIO_ReadPin(portmap[port], mcu_pin_mask);
 80093ce:	b289      	uxth	r1, r1
 80093d0:	4b02      	ldr	r3, [pc, #8]	; (80093dc <hal_gpio_read+0x1c>)
 80093d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80093d6:	f002 f90b 	bl	800b5f0 <HAL_GPIO_ReadPin>
}
 80093da:	bd08      	pop	{r3, pc}
 80093dc:	0800dbe4 	.word	0x0800dbe4

080093e0 <hal_gpio_irq_enable>:
hal_gpio_irq_enable(int pin)
{
    uint32_t ctx;
    uint32_t mask;

    mask = GPIO_MASK(pin);
 80093e0:	f000 000f 	and.w	r0, r0, #15
 80093e4:	2301      	movs	r3, #1
 80093e6:	4083      	lsls	r3, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093e8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80093ec:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);
#if MYNEWT_VAL(MCU_STM32L4)
    EXTI->IMR1 |= mask;
#else
    EXTI->IMR |= mask;
 80093ee:	4a03      	ldr	r2, [pc, #12]	; (80093fc <hal_gpio_irq_enable+0x1c>)
 80093f0:	6810      	ldr	r0, [r2, #0]
 80093f2:	4318      	orrs	r0, r3
 80093f4:	6010      	str	r0, [r2, #0]
#endif
    __HAL_ENABLE_INTERRUPTS(ctx);
 80093f6:	b901      	cbnz	r1, 80093fa <hal_gpio_irq_enable+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 80093f8:	b662      	cpsie	i
}
 80093fa:	4770      	bx	lr
 80093fc:	40010400 	.word	0x40010400

08009400 <hal_gpio_irq_disable>:
hal_gpio_irq_disable(int pin)
{
    uint32_t ctx;
    uint32_t mask;

    mask = GPIO_MASK(pin);
 8009400:	f000 000f 	and.w	r0, r0, #15
 8009404:	2301      	movs	r3, #1
 8009406:	4083      	lsls	r3, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009408:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800940c:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
#if MYNEWT_VAL(MCU_STM32L4)
    EXTI->IMR1 |= mask;
#else
    EXTI->IMR &= ~mask;
 800940e:	4a04      	ldr	r2, [pc, #16]	; (8009420 <hal_gpio_irq_disable+0x20>)
 8009410:	6810      	ldr	r0, [r2, #0]
 8009412:	ea20 0003 	bic.w	r0, r0, r3
 8009416:	6010      	str	r0, [r2, #0]
#endif
    __HAL_ENABLE_INTERRUPTS(ctx);
 8009418:	b901      	cbnz	r1, 800941c <hal_gpio_irq_disable+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
 800941a:	b662      	cpsie	i
}
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	40010400 	.word	0x40010400

08009424 <hal_gpio_irq_init>:
{
 8009424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009426:	b085      	sub	sp, #20
    switch (trig) {
 8009428:	2b02      	cmp	r3, #2
 800942a:	d027      	beq.n	800947c <hal_gpio_irq_init+0x58>
 800942c:	2b03      	cmp	r3, #3
 800942e:	d004      	beq.n	800943a <hal_gpio_irq_init+0x16>
 8009430:	2b01      	cmp	r3, #1
 8009432:	d021      	beq.n	8009478 <hal_gpio_irq_init+0x54>
        rc = -1;
 8009434:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return rc;
 8009438:	e01b      	b.n	8009472 <hal_gpio_irq_init+0x4e>
        mode = GPIO_MODE_IT_RISING_FALLING;
 800943a:	4f14      	ldr	r7, [pc, #80]	; (800948c <hal_gpio_irq_init+0x68>)
 800943c:	4615      	mov	r5, r2
 800943e:	460e      	mov	r6, r1
 8009440:	4604      	mov	r4, r0
        hal_gpio_irq_disable(pin);
 8009442:	f7ff ffdd 	bl	8009400 <hal_gpio_irq_disable>
        pin_mask = GPIO_MASK(pin);
 8009446:	f004 030f 	and.w	r3, r4, #15
 800944a:	2201      	movs	r2, #1
 800944c:	409a      	lsls	r2, r3
        __HAL_GPIO_EXTI_CLEAR_FLAG(pin_mask);
 800944e:	4910      	ldr	r1, [pc, #64]	; (8009490 <hal_gpio_irq_init+0x6c>)
 8009450:	614a      	str	r2, [r1, #20]
        gpio_irq_handlers[index].isr = handler;
 8009452:	4a10      	ldr	r2, [pc, #64]	; (8009494 <hal_gpio_irq_init+0x70>)
 8009454:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009458:	604e      	str	r6, [r1, #4]
        gpio_irq_handlers[index].arg = arg;
 800945a:	f842 5033 	str.w	r5, [r2, r3, lsl #3]
        init_cfg.Mode = mode;
 800945e:	9701      	str	r7, [sp, #4]
        init_cfg.Pull = pull;
 8009460:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009464:	9302      	str	r3, [sp, #8]
        rc = hal_gpio_init_stm(pin, &init_cfg);
 8009466:	4669      	mov	r1, sp
 8009468:	4620      	mov	r0, r4
 800946a:	f7ff ff37 	bl	80092dc <hal_gpio_init_stm>
        if (!rc) {
 800946e:	4605      	mov	r5, r0
 8009470:	b130      	cbz	r0, 8009480 <hal_gpio_irq_init+0x5c>
}
 8009472:	4628      	mov	r0, r5
 8009474:	b005      	add	sp, #20
 8009476:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mode = GPIO_MODE_IT_RISING;
 8009478:	4f07      	ldr	r7, [pc, #28]	; (8009498 <hal_gpio_irq_init+0x74>)
 800947a:	e7df      	b.n	800943c <hal_gpio_irq_init+0x18>
        mode = GPIO_MODE_IT_FALLING;
 800947c:	4f07      	ldr	r7, [pc, #28]	; (800949c <hal_gpio_irq_init+0x78>)
 800947e:	e7dd      	b.n	800943c <hal_gpio_irq_init+0x18>
            irqn = hal_gpio_pin_to_irq(pin);
 8009480:	4620      	mov	r0, r4
 8009482:	f7ff fe81 	bl	8009188 <hal_gpio_pin_to_irq>
            hal_gpio_set_nvic(irqn);
 8009486:	f7ff fed5 	bl	8009234 <hal_gpio_set_nvic>
 800948a:	e7f2      	b.n	8009472 <hal_gpio_irq_init+0x4e>
 800948c:	10310000 	.word	0x10310000
 8009490:	40010400 	.word	0x40010400
 8009494:	200033c8 	.word	0x200033c8
 8009498:	10110000 	.word	0x10110000
 800949c:	10210000 	.word	0x10210000

080094a0 <os_tick_idle>:
/*
 * XXX implement tickless mode.
 */
void
os_tick_idle(os_time_t ticks)
{
 80094a0:	b508      	push	{r3, lr}
    OS_ASSERT_CRITICAL();
 80094a2:	f7f9 f9f4 	bl	800288e <os_arch_in_critical>
 80094a6:	b118      	cbz	r0, 80094b0 <os_tick_idle+0x10>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80094a8:	f3bf 8f4f 	dsb	sy
    __DSB();
    __WFI();
 80094ac:	bf30      	wfi
}
 80094ae:	bd08      	pop	{r3, pc}
    OS_ASSERT_CRITICAL();
 80094b0:	2300      	movs	r3, #0
 80094b2:	461a      	mov	r2, r3
 80094b4:	4619      	mov	r1, r3
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7f8 f99e 	bl	80017f8 <__assert_func>

080094bc <os_tick_init>:
void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
    uint32_t reload_val;

    reload_val = ((uint64_t)SystemCoreClock / os_ticks_per_sec) - 1;
 80094bc:	4b0b      	ldr	r3, [pc, #44]	; (80094ec <os_tick_init+0x30>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	fbb3 f0f0 	udiv	r0, r3, r0
 80094c4:	3801      	subs	r0, #1

    /* Set the system time ticker up */
    SysTick->LOAD = reload_val;
 80094c6:	4b0a      	ldr	r3, [pc, #40]	; (80094f0 <os_tick_init+0x34>)
 80094c8:	6058      	str	r0, [r3, #4]
    SysTick->VAL = 0;
 80094ca:	2200      	movs	r2, #0
 80094cc:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0x0007;
 80094ce:	2207      	movs	r2, #7
 80094d0:	601a      	str	r2, [r3, #0]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094d2:	0109      	lsls	r1, r1, #4
 80094d4:	b2c9      	uxtb	r1, r1
 80094d6:	f503 634f 	add.w	r3, r3, #3312	; 0xcf0
 80094da:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23

    /*
     * Keep clocking debug even when CPU is sleeping, stopped or in standby.
     */
#if !MYNEWT_VAL(MCU_STM32F0)
    DBGMCU->CR |= (DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
 80094de:	4a05      	ldr	r2, [pc, #20]	; (80094f4 <os_tick_init+0x38>)
 80094e0:	6853      	ldr	r3, [r2, #4]
 80094e2:	f043 0307 	orr.w	r3, r3, #7
 80094e6:	6053      	str	r3, [r2, #4]
#else
    DBGMCU->CR |= (DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
#endif
}
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	2000010c 	.word	0x2000010c
 80094f0:	e000e010 	.word	0xe000e010
 80094f4:	e0042000 	.word	0xe0042000

080094f8 <spim_irq_handler>:
 * SPI master IRQ handler.
 */
#if SPI_ENABLED
static void
spim_irq_handler(struct stm32_hal_spi *spi)
{
 80094f8:	b508      	push	{r3, lr}
    if (spi->handle.TxXferCount == 0 && spi->handle.RxXferCount == 0) {
 80094fa:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	b93b      	cbnz	r3, 8009510 <spim_irq_handler+0x18>
 8009500:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8009502:	b29b      	uxth	r3, r3
 8009504:	b923      	cbnz	r3, 8009510 <spim_irq_handler+0x18>
        if (spi->txrx_cb_func) {
 8009506:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009508:	b113      	cbz	r3, 8009510 <spim_irq_handler+0x18>
            spi->txrx_cb_func(spi->txrx_cb_arg, spi->handle.TxXferSize);
 800950a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
 800950c:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800950e:	4798      	blx	r3
        }
    }
}
 8009510:	bd08      	pop	{r3, pc}
	...

08009514 <stm32_resolve_spi_irq>:
{
 8009514:	b508      	push	{r3, lr}
    uintptr_t spi = (uintptr_t)hspi->Instance;
 8009516:	6802      	ldr	r2, [r0, #0]
    switch (spi) {
 8009518:	4b05      	ldr	r3, [pc, #20]	; (8009530 <stm32_resolve_spi_irq+0x1c>)
 800951a:	429a      	cmp	r2, r3
 800951c:	d101      	bne.n	8009522 <stm32_resolve_spi_irq+0xe>
}
 800951e:	2023      	movs	r0, #35	; 0x23
 8009520:	bd08      	pop	{r3, pc}
        assert(0);
 8009522:	2300      	movs	r3, #0
 8009524:	461a      	mov	r2, r3
 8009526:	4619      	mov	r1, r3
 8009528:	4618      	mov	r0, r3
 800952a:	f7f8 f965 	bl	80017f8 <__assert_func>
 800952e:	bf00      	nop
 8009530:	40013000 	.word	0x40013000

08009534 <spis_irq_handler>:
 */
#if SPI_ENABLED
static void
spis_irq_handler(struct stm32_hal_spi *spi)
{
    if (spi->tx_in_prog) {
 8009534:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8009538:	f013 0f02 	tst.w	r3, #2
 800953c:	d019      	beq.n	8009572 <spis_irq_handler+0x3e>
        if (spi->handle.TxXferCount == 0 && spi->handle.RxXferCount == 0) {
 800953e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8009540:	b29b      	uxth	r3, r3
 8009542:	b913      	cbnz	r3, 800954a <spis_irq_handler+0x16>
 8009544:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8009546:	b29b      	uxth	r3, r3
 8009548:	b103      	cbz	r3, 800954c <spis_irq_handler+0x18>
 800954a:	4770      	bx	lr
{
 800954c:	b510      	push	{r4, lr}
 800954e:	4604      	mov	r4, r0
            /*
             * If finished with data tx, start transmitting default char
             */
            spi->tx_in_prog = 0;
 8009550:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8009554:	f36f 0341 	bfc	r3, #1, #1
 8009558:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

            HAL_SPI_Transmit_IT_Custom(&spi->handle, spi->def_char, 2);
 800955c:	2202      	movs	r2, #2
 800955e:	f100 0159 	add.w	r1, r0, #89	; 0x59
 8009562:	f001 f89f 	bl	800a6a4 <HAL_SPI_Transmit_IT_Custom>

            if (spi->txrx_cb_func) {
 8009566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009568:	b113      	cbz	r3, 8009570 <spis_irq_handler+0x3c>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->handle.TxXferSize);
 800956a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 800956c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800956e:	4798      	blx	r3
         * Reset TX pointer within default data.
         */
        spi->handle.pTxBuffPtr = spi->def_char;
        spi->handle.TxXferCount = 2;
    }
}
 8009570:	bd10      	pop	{r4, pc}
        spi->handle.pTxBuffPtr = spi->def_char;
 8009572:	f100 0359 	add.w	r3, r0, #89	; 0x59
 8009576:	6303      	str	r3, [r0, #48]	; 0x30
        spi->handle.TxXferCount = 2;
 8009578:	2302      	movs	r3, #2
 800957a:	86c3      	strh	r3, [r0, #54]	; 0x36
}
 800957c:	4770      	bx	lr
	...

08009580 <spi_irq_handler>:
 * Common IRQ handler for both master and slave.
 */
#if SPI_ENABLED
static void
spi_irq_handler(struct stm32_hal_spi *spi)
{
 8009580:	b510      	push	{r4, lr}
 8009582:	4604      	mov	r4, r0
    uint32_t err;

    spi_stat.irq++;
 8009584:	4a15      	ldr	r2, [pc, #84]	; (80095dc <spi_irq_handler+0x5c>)
 8009586:	6813      	ldr	r3, [r2, #0]
 8009588:	3301      	adds	r3, #1
 800958a:	6013      	str	r3, [r2, #0]

    HAL_SPI_IRQHandler(&spi->handle);
 800958c:	f002 fde0 	bl	800c150 <HAL_SPI_IRQHandler>
    err = spi->handle.ErrorCode;
 8009590:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if (err) {
 8009592:	b1b3      	cbz	r3, 80095c2 <spi_irq_handler+0x42>
        if (err & HAL_SPI_ERROR_OVR) {
 8009594:	f013 0f04 	tst.w	r3, #4
 8009598:	d003      	beq.n	80095a2 <spi_irq_handler+0x22>
            spi_stat.eovf++;
 800959a:	4910      	ldr	r1, [pc, #64]	; (80095dc <spi_irq_handler+0x5c>)
 800959c:	68ca      	ldr	r2, [r1, #12]
 800959e:	3201      	adds	r2, #1
 80095a0:	60ca      	str	r2, [r1, #12]
        }
        if (err & HAL_SPI_ERROR_MODF) {
 80095a2:	f013 0f01 	tst.w	r3, #1
 80095a6:	d003      	beq.n	80095b0 <spi_irq_handler+0x30>
            spi_stat.emodf++;
 80095a8:	490c      	ldr	r1, [pc, #48]	; (80095dc <spi_irq_handler+0x5c>)
 80095aa:	690a      	ldr	r2, [r1, #16]
 80095ac:	3201      	adds	r2, #1
 80095ae:	610a      	str	r2, [r1, #16]
        }
        if (err & HAL_SPI_ERROR_FRE) {
 80095b0:	f013 0f08 	tst.w	r3, #8
 80095b4:	d003      	beq.n	80095be <spi_irq_handler+0x3e>
            spi_stat.efre++;
 80095b6:	4a09      	ldr	r2, [pc, #36]	; (80095dc <spi_irq_handler+0x5c>)
 80095b8:	6953      	ldr	r3, [r2, #20]
 80095ba:	3301      	adds	r3, #1
 80095bc:	6153      	str	r3, [r2, #20]
        }
        spi->handle.ErrorCode = 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	6563      	str	r3, [r4, #84]	; 0x54
    }
    if (!spi->slave) {
 80095c2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80095c6:	f013 0f01 	tst.w	r3, #1
 80095ca:	d003      	beq.n	80095d4 <spi_irq_handler+0x54>
        spim_irq_handler(spi);
    } else {
        spis_irq_handler(spi);
 80095cc:	4620      	mov	r0, r4
 80095ce:	f7ff ffb1 	bl	8009534 <spis_irq_handler>
    }
}
 80095d2:	bd10      	pop	{r4, pc}
        spim_irq_handler(spi);
 80095d4:	4620      	mov	r0, r4
 80095d6:	f7ff ff8f 	bl	80094f8 <spim_irq_handler>
 80095da:	e7fa      	b.n	80095d2 <spi_irq_handler+0x52>
 80095dc:	20003448 	.word	0x20003448

080095e0 <spi1_irq_handler>:
}

#if SPI_0_ENABLED
static void
spi1_irq_handler(void)
{
 80095e0:	b508      	push	{r3, lr}
    spi_irq_handler(stm32_hal_spis[0]);
 80095e2:	4802      	ldr	r0, [pc, #8]	; (80095ec <spi1_irq_handler+0xc>)
 80095e4:	f7ff ffcc 	bl	8009580 <spi_irq_handler>
}
 80095e8:	bd08      	pop	{r3, pc}
 80095ea:	bf00      	nop
 80095ec:	200035e0 	.word	0x200035e0

080095f0 <stm32_spi_resolve_prescaler>:
    return (rc);
}

static int
stm32_spi_resolve_prescaler(uint8_t spi_num, uint32_t baudrate, uint32_t *prescaler)
{
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	460c      	mov	r4, r1
 80095f4:	4615      	mov	r5, r2

    /* SPIx {1,4,5,6} use PCLK2 on the STM32F4/F7, otherwise use PCKL1.
     * The numbers in the switch below are offset by 1, because the HALs index
     * SPI ports from 0.
     */
    switch (spi_num) {
 80095f6:	b128      	cbz	r0, 8009604 <stm32_spi_resolve_prescaler+0x14>
 80095f8:	1ec3      	subs	r3, r0, #3
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d902      	bls.n	8009604 <stm32_spi_resolve_prescaler+0x14>
    case 5:
        apbfreq = HAL_RCC_GetPCLK2Freq();
        break;
#endif
    default:
        apbfreq = HAL_RCC_GetPCLK1Freq();
 80095fe:	f002 fb2d 	bl	800bc5c <HAL_RCC_GetPCLK1Freq>
        break;
 8009602:	e001      	b.n	8009608 <stm32_spi_resolve_prescaler+0x18>
        apbfreq = HAL_RCC_GetPCLK2Freq();
 8009604:	f002 fb3a 	bl	800bc7c <HAL_RCC_GetPCLK2Freq>
    }

    if (baudrate == 0) {
 8009608:	b15c      	cbz	r4, 8009622 <stm32_spi_resolve_prescaler+0x32>

    /* Calculate best-fit prescaler: divide the clock by each subsequent
     * prescaler until we reach the highest prescaler that generates at
     * _most_ the baudrate.
     */
    *prescaler = SPI_BAUDRATEPRESCALER_256;
 800960a:	2338      	movs	r3, #56	; 0x38
 800960c:	602b      	str	r3, [r5, #0]
    for (i = 0; i < 8; i++) {
 800960e:	2300      	movs	r3, #0
 8009610:	2b07      	cmp	r3, #7
 8009612:	dc08      	bgt.n	8009626 <stm32_spi_resolve_prescaler+0x36>
        candidate_br = apbfreq >> (i + 1);
 8009614:	1c5a      	adds	r2, r3, #1
 8009616:	fa20 f102 	lsr.w	r1, r0, r2
        if (candidate_br <= baudrate) {
 800961a:	428c      	cmp	r4, r1
 800961c:	d205      	bcs.n	800962a <stm32_spi_resolve_prescaler+0x3a>
    for (i = 0; i < 8; i++) {
 800961e:	4613      	mov	r3, r2
 8009620:	e7f6      	b.n	8009610 <stm32_spi_resolve_prescaler+0x20>
        *prescaler = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	602b      	str	r3, [r5, #0]
            break;
        }
    }

    return (0);
}
 8009626:	2000      	movs	r0, #0
 8009628:	bd38      	pop	{r3, r4, r5, pc}
            *prescaler = i << SPI_CR1_BR_Pos;
 800962a:	00db      	lsls	r3, r3, #3
 800962c:	602b      	str	r3, [r5, #0]
            break;
 800962e:	e7fa      	b.n	8009626 <stm32_spi_resolve_prescaler+0x36>

08009630 <spi_ss_isr>:
{
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4604      	mov	r4, r0
    spi_stat.ss_irq++;
 8009634:	4a37      	ldr	r2, [pc, #220]	; (8009714 <spi_ss_isr+0xe4>)
 8009636:	6853      	ldr	r3, [r2, #4]
 8009638:	3301      	adds	r3, #1
 800963a:	6053      	str	r3, [r2, #4]
    ss = hal_gpio_read(spi->cfg->ss_pin);
 800963c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800963e:	6818      	ldr	r0, [r3, #0]
 8009640:	f7ff febe 	bl	80093c0 <hal_gpio_read>
    if (ss == 0 && !spi->selected) {
 8009644:	4603      	mov	r3, r0
 8009646:	b9d0      	cbnz	r0, 800967e <spi_ss_isr+0x4e>
 8009648:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800964c:	f012 0f04 	tst.w	r2, #4
 8009650:	d115      	bne.n	800967e <spi_ss_isr+0x4e>
        if (spi->tx_in_prog) {
 8009652:	f012 0f02 	tst.w	r2, #2
 8009656:	d015      	beq.n	8009684 <spi_ss_isr+0x54>
            __HAL_SPI_ENABLE_IT(&spi->handle,
 8009658:	6821      	ldr	r1, [r4, #0]
 800965a:	684a      	ldr	r2, [r1, #4]
 800965c:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009660:	604a      	str	r2, [r1, #4]
        reg = spi->handle.Instance->CR1;
 8009662:	6821      	ldr	r1, [r4, #0]
 8009664:	680a      	ldr	r2, [r1, #0]
 8009666:	b292      	uxth	r2, r2
        reg &= ~SPI_CR1_SSI;
 8009668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        reg |= SPI_CR1_SPE;
 800966c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
        spi->handle.Instance->CR1 = reg;
 8009670:	600a      	str	r2, [r1, #0]
        spi->selected = 1;
 8009672:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 8009676:	f042 0204 	orr.w	r2, r2, #4
 800967a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
    if (ss == 1 && spi->selected) {
 800967e:	2b01      	cmp	r3, #1
 8009680:	d006      	beq.n	8009690 <spi_ss_isr+0x60>
}
 8009682:	bd38      	pop	{r3, r4, r5, pc}
            __HAL_SPI_ENABLE_IT(&spi->handle, SPI_IT_TXE | SPI_IT_ERR);
 8009684:	6821      	ldr	r1, [r4, #0]
 8009686:	684a      	ldr	r2, [r1, #4]
 8009688:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800968c:	604a      	str	r2, [r1, #4]
 800968e:	e7e8      	b.n	8009662 <spi_ss_isr+0x32>
    if (ss == 1 && spi->selected) {
 8009690:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8009694:	f013 0f04 	tst.w	r3, #4
 8009698:	d0f3      	beq.n	8009682 <spi_ss_isr+0x52>
        if (spi->handle.Instance->SR & SPI_SR_RXNE && spi->handle.RxISR) {
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f013 0f01 	tst.w	r3, #1
 80096a2:	d003      	beq.n	80096ac <spi_ss_isr+0x7c>
 80096a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096a6:	b10b      	cbz	r3, 80096ac <spi_ss_isr+0x7c>
            spi->handle.RxISR(&spi->handle);
 80096a8:	4620      	mov	r0, r4
 80096aa:	4798      	blx	r3
        reg = spi->handle.Instance->CR1;
 80096ac:	6822      	ldr	r2, [r4, #0]
 80096ae:	6813      	ldr	r3, [r2, #0]
 80096b0:	b29b      	uxth	r3, r3
        reg &= ~SPI_CR1_SPE;
 80096b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
        reg |= SPI_CR1_SSI;
 80096b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        spi->handle.Instance->CR1 = reg;
 80096ba:	6013      	str	r3, [r2, #0]
        __HAL_SPI_DISABLE_IT(&spi->handle, SPI_IT_RXNE|SPI_IT_TXE|SPI_IT_ERR);
 80096bc:	6822      	ldr	r2, [r4, #0]
 80096be:	6853      	ldr	r3, [r2, #4]
 80096c0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80096c4:	6053      	str	r3, [r2, #4]
        len = spi->handle.RxXferSize - spi->handle.RxXferCount;
 80096c6:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80096c8:	8fe5      	ldrh	r5, [r4, #62]	; 0x3e
        if (len) {
 80096ca:	1b5d      	subs	r5, r3, r5
 80096cc:	d106      	bne.n	80096dc <spi_ss_isr+0xac>
        spi->selected = 0;
 80096ce:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80096d2:	f36f 0382 	bfc	r3, #2, #1
 80096d6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 80096da:	e7d2      	b.n	8009682 <spi_ss_isr+0x52>
            spi->handle.State = HAL_SPI_STATE_READY;
 80096dc:	2301      	movs	r3, #1
 80096de:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
            HAL_SPI_QueueTransmit(&spi->handle, spi->def_char, 2);
 80096e2:	2202      	movs	r2, #2
 80096e4:	f104 0159 	add.w	r1, r4, #89	; 0x59
 80096e8:	4620      	mov	r0, r4
 80096ea:	f000 ffab 	bl	800a644 <HAL_SPI_QueueTransmit>
            if (spi->tx_in_prog) {
 80096ee:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80096f2:	f013 0f02 	tst.w	r3, #2
 80096f6:	d0ea      	beq.n	80096ce <spi_ss_isr+0x9e>
                spi->tx_in_prog = 0;
 80096f8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80096fc:	f36f 0341 	bfc	r3, #1, #1
 8009700:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
                if (spi->txrx_cb_func) {
 8009704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0e1      	beq.n	80096ce <spi_ss_isr+0x9e>
                    spi->txrx_cb_func(spi->txrx_cb_arg, len);
 800970a:	4629      	mov	r1, r5
 800970c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800970e:	4798      	blx	r3
 8009710:	e7dd      	b.n	80096ce <spi_ss_isr+0x9e>
 8009712:	bf00      	nop
 8009714:	20003448 	.word	0x20003448

08009718 <stm32_resolve_spi_irq_handler>:
{
 8009718:	b508      	push	{r3, lr}
    switch((uintptr_t)hspi->Instance) {
 800971a:	6802      	ldr	r2, [r0, #0]
 800971c:	4b05      	ldr	r3, [pc, #20]	; (8009734 <stm32_resolve_spi_irq_handler+0x1c>)
 800971e:	429a      	cmp	r2, r3
 8009720:	d101      	bne.n	8009726 <stm32_resolve_spi_irq_handler+0xe>
}
 8009722:	4805      	ldr	r0, [pc, #20]	; (8009738 <stm32_resolve_spi_irq_handler+0x20>)
 8009724:	bd08      	pop	{r3, pc}
        assert(0);
 8009726:	2300      	movs	r3, #0
 8009728:	461a      	mov	r2, r3
 800972a:	4619      	mov	r1, r3
 800972c:	4618      	mov	r0, r3
 800972e:	f7f8 f863 	bl	80017f8 <__assert_func>
 8009732:	bf00      	nop
 8009734:	40013000 	.word	0x40013000
 8009738:	080095e1 	.word	0x080095e1

0800973c <hal_spi_init>:
    if (usercfg == NULL) {
 800973c:	b1b1      	cbz	r1, 800976c <hal_spi_init+0x30>
{
 800973e:	b410      	push	{r4}
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
 8009740:	2a01      	cmp	r2, #1
 8009742:	d816      	bhi.n	8009772 <hal_spi_init+0x36>
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 8009744:	2805      	cmp	r0, #5
 8009746:	dc17      	bgt.n	8009778 <hal_spi_init+0x3c>
 8009748:	4b0e      	ldr	r3, [pc, #56]	; (8009784 <hal_spi_init+0x48>)
 800974a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800974e:	b1b3      	cbz	r3, 800977e <hal_spi_init+0x42>
    spi->cfg = usercfg;
 8009750:	6619      	str	r1, [r3, #96]	; 0x60
    spi->slave = (spi_type == HAL_SPI_TYPE_SLAVE);
 8009752:	2a01      	cmp	r2, #1
 8009754:	bf14      	ite	ne
 8009756:	2200      	movne	r2, #0
 8009758:	2201      	moveq	r2, #1
 800975a:	f893 1058 	ldrb.w	r1, [r3, #88]	; 0x58
 800975e:	f362 0100 	bfi	r1, r2, #0, #1
 8009762:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
    return (0);
 8009766:	2000      	movs	r0, #0
}
 8009768:	bc10      	pop	{r4}
 800976a:	4770      	bx	lr
    return (rc);
 800976c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009770:	4770      	bx	lr
    return (rc);
 8009772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009776:	e7f7      	b.n	8009768 <hal_spi_init+0x2c>
 8009778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800977c:	e7f4      	b.n	8009768 <hal_spi_init+0x2c>
 800977e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009782:	e7f1      	b.n	8009768 <hal_spi_init+0x2c>
 8009784:	0800dbf8 	.word	0x0800dbf8

08009788 <hal_spi_enable>:
{
    struct stm32_hal_spi *spi;
    int rc;

    rc = 0;
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 8009788:	2805      	cmp	r0, #5
 800978a:	dc05      	bgt.n	8009798 <hal_spi_enable+0x10>
 800978c:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <hal_spi_enable+0x1c>)
 800978e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009792:	b123      	cbz	r3, 800979e <hal_spi_enable+0x16>
    rc = 0;
 8009794:	2000      	movs	r0, #0
 8009796:	4770      	bx	lr
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 8009798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800979c:	4770      	bx	lr
 800979e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    /* XXX power up */
err:
    return rc;
}
 80097a2:	4770      	bx	lr
 80097a4:	0800dbf8 	.word	0x0800dbf8

080097a8 <hal_spi_slave_set_def_tx_val>:
    struct stm32_hal_spi *spi;
    int rc;
    int sr;
    int i;

    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 80097a8:	2805      	cmp	r0, #5
 80097aa:	dc39      	bgt.n	8009820 <hal_spi_slave_set_def_tx_val+0x78>
 80097ac:	4b21      	ldr	r3, [pc, #132]	; (8009834 <hal_spi_slave_set_def_tx_val+0x8c>)
 80097ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80097b2:	b3c0      	cbz	r0, 8009826 <hal_spi_slave_set_def_tx_val+0x7e>

    if (spi->slave) {
 80097b4:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80097b8:	f013 0f01 	tst.w	r3, #1
 80097bc:	d036      	beq.n	800982c <hal_spi_slave_set_def_tx_val+0x84>
{
 80097be:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097c0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80097c4:	b672      	cpsid	i
        rc = 0;
        __HAL_DISABLE_INTERRUPTS(sr);
        if (spi->handle.Init.DataSize == SPI_DATASIZE_8BIT) {
 80097c6:	68c3      	ldr	r3, [r0, #12]
 80097c8:	b183      	cbz	r3, 80097ec <hal_spi_slave_set_def_tx_val+0x44>
            for (i = 0; i < 4; i++) {
                ((uint8_t *)spi->def_char)[i] = val;
            }
        } else {
            for (i = 0; i < 2; i++) {
 80097ca:	2300      	movs	r3, #0
 80097cc:	e015      	b.n	80097fa <hal_spi_slave_set_def_tx_val+0x52>
                ((uint8_t *)spi->def_char)[i] = val;
 80097ce:	f100 0259 	add.w	r2, r0, #89	; 0x59
 80097d2:	54d1      	strb	r1, [r2, r3]
            for (i = 0; i < 4; i++) {
 80097d4:	3301      	adds	r3, #1
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	ddf9      	ble.n	80097ce <hal_spi_slave_set_def_tx_val+0x26>
                ((uint16_t *)spi->def_char)[i] = val;
            }
        }
        if (!spi->tx_in_prog) {
 80097da:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80097de:	f013 0f02 	tst.w	r3, #2
 80097e2:	d00d      	beq.n	8009800 <hal_spi_slave_set_def_tx_val+0x58>
        rc = 0;
 80097e4:	2000      	movs	r0, #0
             */
            spi->handle.State = HAL_SPI_STATE_READY;
            rc = HAL_SPI_QueueTransmit(&spi->handle, spi->def_char, 2);
            assert(rc == 0);
        }
        __HAL_ENABLE_INTERRUPTS(sr);
 80097e6:	b904      	cbnz	r4, 80097ea <hal_spi_slave_set_def_tx_val+0x42>
  __ASM volatile ("cpsie i" : : : "memory");
 80097e8:	b662      	cpsie	i
    } else {
        rc = -1;
    }
err:
    return rc;
}
 80097ea:	bd10      	pop	{r4, pc}
            for (i = 0; i < 4; i++) {
 80097ec:	2300      	movs	r3, #0
 80097ee:	e7f2      	b.n	80097d6 <hal_spi_slave_set_def_tx_val+0x2e>
                ((uint16_t *)spi->def_char)[i] = val;
 80097f0:	f100 0259 	add.w	r2, r0, #89	; 0x59
 80097f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (i = 0; i < 2; i++) {
 80097f8:	3301      	adds	r3, #1
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	ddf8      	ble.n	80097f0 <hal_spi_slave_set_def_tx_val+0x48>
 80097fe:	e7ec      	b.n	80097da <hal_spi_slave_set_def_tx_val+0x32>
            spi->handle.State = HAL_SPI_STATE_READY;
 8009800:	2301      	movs	r3, #1
 8009802:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
            rc = HAL_SPI_QueueTransmit(&spi->handle, spi->def_char, 2);
 8009806:	2202      	movs	r2, #2
 8009808:	f100 0159 	add.w	r1, r0, #89	; 0x59
 800980c:	f000 ff1a 	bl	800a644 <HAL_SPI_QueueTransmit>
            assert(rc == 0);
 8009810:	2800      	cmp	r0, #0
 8009812:	d0e8      	beq.n	80097e6 <hal_spi_slave_set_def_tx_val+0x3e>
 8009814:	2300      	movs	r3, #0
 8009816:	461a      	mov	r2, r3
 8009818:	4619      	mov	r1, r3
 800981a:	4618      	mov	r0, r3
 800981c:	f7f7 ffec 	bl	80017f8 <__assert_func>
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 8009820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009824:	4770      	bx	lr
 8009826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800982a:	4770      	bx	lr
        rc = -1;
 800982c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	0800dbf8 	.word	0x0800dbf8

08009838 <hal_spi_config>:
{
 8009838:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800983c:	b089      	sub	sp, #36	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800983e:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009842:	b672      	cpsid	i
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 8009844:	2805      	cmp	r0, #5
 8009846:	f300 8111 	bgt.w	8009a6c <hal_spi_config+0x234>
 800984a:	4b90      	ldr	r3, [pc, #576]	; (8009a8c <hal_spi_config+0x254>)
 800984c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8009850:	2d00      	cmp	r5, #0
 8009852:	f000 8115 	beq.w	8009a80 <hal_spi_config+0x248>
    cfg = spi->cfg;
 8009856:	f8d5 9060 	ldr.w	r9, [r5, #96]	; 0x60
    if (!spi->slave) {
 800985a:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 800985e:	f013 0f01 	tst.w	r3, #1
 8009862:	d113      	bne.n	800988c <hal_spi_config+0x54>
        spi->handle.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8009864:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009868:	61ab      	str	r3, [r5, #24]
        spi->handle.Init.Mode = SPI_MODE_MASTER;
 800986a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800986e:	606b      	str	r3, [r5, #4]
    gpio.Mode = GPIO_MODE_AF_PP;
 8009870:	2302      	movs	r3, #2
 8009872:	9305      	str	r3, [sp, #20]
    gpio.Pull = GPIO_NOPULL;
 8009874:	2300      	movs	r3, #0
 8009876:	9306      	str	r3, [sp, #24]
    if (settings->baudrate <= 2000) {
 8009878:	684b      	ldr	r3, [r1, #4]
 800987a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800987e:	d90b      	bls.n	8009898 <hal_spi_config+0x60>
    } else if (settings->baudrate <= 12500) {
 8009880:	f243 02d4 	movw	r2, #12500	; 0x30d4
 8009884:	4293      	cmp	r3, r2
 8009886:	d84f      	bhi.n	8009928 <hal_spi_config+0xf0>
        gpio_speed = GPIO_SPEED_FREQ_MEDIUM;
 8009888:	2601      	movs	r6, #1
 800988a:	e006      	b.n	800989a <hal_spi_config+0x62>
        spi->handle.Init.NSS = SPI_NSS_SOFT;
 800988c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009890:	61ab      	str	r3, [r5, #24]
        spi->handle.Init.Mode = SPI_MODE_SLAVE;
 8009892:	2300      	movs	r3, #0
 8009894:	606b      	str	r3, [r5, #4]
 8009896:	e7eb      	b.n	8009870 <hal_spi_config+0x38>
        gpio_speed = GPIO_SPEED_FREQ_LOW;
 8009898:	2602      	movs	r6, #2
 800989a:	460f      	mov	r7, r1
 800989c:	4604      	mov	r4, r0
    switch (spi_num) {
 800989e:	2800      	cmp	r0, #0
 80098a0:	d144      	bne.n	800992c <hal_spi_config+0xf4>
        __HAL_RCC_SPI1_CLK_ENABLE();
 80098a2:	4b7b      	ldr	r3, [pc, #492]	; (8009a90 <hal_spi_config+0x258>)
 80098a4:	699a      	ldr	r2, [r3, #24]
 80098a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098aa:	619a      	str	r2, [r3, #24]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098b2:	9302      	str	r3, [sp, #8]
 80098b4:	9b02      	ldr	r3, [sp, #8]
        spi->handle.Instance = SPI1;
 80098b6:	4b77      	ldr	r3, [pc, #476]	; (8009a94 <hal_spi_config+0x25c>)
 80098b8:	602b      	str	r3, [r5, #0]
    if (!spi->slave) {
 80098ba:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 80098be:	f013 0f01 	tst.w	r3, #1
 80098c2:	d039      	beq.n	8009938 <hal_spi_config+0x100>
    gpio.Speed = gpio_speed;
 80098c4:	9607      	str	r6, [sp, #28]
    rc = hal_gpio_init_stm(cfg->sck_pin, &gpio);
 80098c6:	a904      	add	r1, sp, #16
 80098c8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80098cc:	f7ff fd06 	bl	80092dc <hal_gpio_init_stm>
    if (rc != 0) {
 80098d0:	4606      	mov	r6, r0
 80098d2:	2800      	cmp	r0, #0
 80098d4:	f040 80cc 	bne.w	8009a70 <hal_spi_config+0x238>
    if (!spi->slave) {
 80098d8:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 80098dc:	f013 0f01 	tst.w	r3, #1
 80098e0:	d135      	bne.n	800994e <hal_spi_config+0x116>
        gpio.Pull = GPIO_NOPULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	9306      	str	r3, [sp, #24]
    rc = hal_gpio_init_stm(cfg->mosi_pin, &gpio);
 80098e6:	a904      	add	r1, sp, #16
 80098e8:	f8d9 000c 	ldr.w	r0, [r9, #12]
 80098ec:	f7ff fcf6 	bl	80092dc <hal_gpio_init_stm>
    if (rc != 0) {
 80098f0:	4606      	mov	r6, r0
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f040 80bc 	bne.w	8009a70 <hal_spi_config+0x238>
    if (!spi->slave) {
 80098f8:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 80098fc:	f013 0f01 	tst.w	r3, #1
 8009900:	d128      	bne.n	8009954 <hal_spi_config+0x11c>
        gpio.Mode = GPIO_MODE_AF_OD;
 8009902:	2312      	movs	r3, #18
 8009904:	9305      	str	r3, [sp, #20]
    rc = hal_gpio_init_stm(cfg->miso_pin, &gpio);
 8009906:	a904      	add	r1, sp, #16
 8009908:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800990c:	f7ff fce6 	bl	80092dc <hal_gpio_init_stm>
    if (rc != 0) {
 8009910:	4606      	mov	r6, r0
 8009912:	2800      	cmp	r0, #0
 8009914:	f040 80ac 	bne.w	8009a70 <hal_spi_config+0x238>
    switch (settings->data_mode) {
 8009918:	783b      	ldrb	r3, [r7, #0]
 800991a:	2b03      	cmp	r3, #3
 800991c:	f200 80b3 	bhi.w	8009a86 <hal_spi_config+0x24e>
 8009920:	e8df f003 	tbb	[pc, r3]
 8009924:	2f2a251b 	.word	0x2f2a251b
        gpio_speed = GPIO_SPEED_FREQ_HIGH;
 8009928:	2603      	movs	r6, #3
 800992a:	e7b6      	b.n	800989a <hal_spi_config+0x62>
        assert(0);
 800992c:	2300      	movs	r3, #0
 800992e:	461a      	mov	r2, r3
 8009930:	4619      	mov	r1, r3
 8009932:	4618      	mov	r0, r3
 8009934:	f7f7 ff60 	bl	80017f8 <__assert_func>
        if (settings->data_mode == HAL_SPI_MODE2 ||
 8009938:	780b      	ldrb	r3, [r1, #0]
 800993a:	3b02      	subs	r3, #2
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b01      	cmp	r3, #1
 8009940:	d902      	bls.n	8009948 <hal_spi_config+0x110>
            gpio.Pull = GPIO_PULLDOWN;
 8009942:	2302      	movs	r3, #2
 8009944:	9306      	str	r3, [sp, #24]
 8009946:	e7bd      	b.n	80098c4 <hal_spi_config+0x8c>
            gpio.Pull = GPIO_PULLUP;
 8009948:	2301      	movs	r3, #1
 800994a:	9306      	str	r3, [sp, #24]
 800994c:	e7ba      	b.n	80098c4 <hal_spi_config+0x8c>
        gpio.Mode = GPIO_MODE_AF_OD;
 800994e:	2312      	movs	r3, #18
 8009950:	9305      	str	r3, [sp, #20]
 8009952:	e7c8      	b.n	80098e6 <hal_spi_config+0xae>
        gpio.Mode = GPIO_MODE_AF_PP;
 8009954:	2302      	movs	r3, #2
 8009956:	9305      	str	r3, [sp, #20]
 8009958:	e7d5      	b.n	8009906 <hal_spi_config+0xce>
        init->CLKPolarity = SPI_POLARITY_LOW;
 800995a:	2300      	movs	r3, #0
 800995c:	612b      	str	r3, [r5, #16]
        init->CLKPhase = SPI_PHASE_1EDGE;
 800995e:	616b      	str	r3, [r5, #20]
    switch (settings->data_order) {
 8009960:	787b      	ldrb	r3, [r7, #1]
 8009962:	b19b      	cbz	r3, 800998c <hal_spi_config+0x154>
 8009964:	2b01      	cmp	r3, #1
 8009966:	d01a      	beq.n	800999e <hal_spi_config+0x166>
        rc = -1;
 8009968:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800996c:	e080      	b.n	8009a70 <hal_spi_config+0x238>
        init->CLKPolarity = SPI_POLARITY_LOW;
 800996e:	2300      	movs	r3, #0
 8009970:	612b      	str	r3, [r5, #16]
        init->CLKPhase = SPI_PHASE_2EDGE;
 8009972:	2301      	movs	r3, #1
 8009974:	616b      	str	r3, [r5, #20]
        break;
 8009976:	e7f3      	b.n	8009960 <hal_spi_config+0x128>
        init->CLKPolarity = SPI_POLARITY_HIGH;
 8009978:	2302      	movs	r3, #2
 800997a:	612b      	str	r3, [r5, #16]
        init->CLKPhase = SPI_PHASE_1EDGE;
 800997c:	2300      	movs	r3, #0
 800997e:	616b      	str	r3, [r5, #20]
        break;
 8009980:	e7ee      	b.n	8009960 <hal_spi_config+0x128>
        init->CLKPolarity = SPI_POLARITY_HIGH;
 8009982:	2302      	movs	r3, #2
 8009984:	612b      	str	r3, [r5, #16]
        init->CLKPhase = SPI_PHASE_2EDGE;
 8009986:	2301      	movs	r3, #1
 8009988:	616b      	str	r3, [r5, #20]
        break;
 800998a:	e7e9      	b.n	8009960 <hal_spi_config+0x128>
        init->FirstBit = SPI_FIRSTBIT_MSB;
 800998c:	2300      	movs	r3, #0
 800998e:	622b      	str	r3, [r5, #32]
    switch (settings->word_size) {
 8009990:	78bb      	ldrb	r3, [r7, #2]
 8009992:	b13b      	cbz	r3, 80099a4 <hal_spi_config+0x16c>
 8009994:	2b01      	cmp	r3, #1
 8009996:	d04d      	beq.n	8009a34 <hal_spi_config+0x1fc>
        rc = -1;
 8009998:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800999c:	e068      	b.n	8009a70 <hal_spi_config+0x238>
        init->FirstBit = SPI_FIRSTBIT_LSB;
 800999e:	2380      	movs	r3, #128	; 0x80
 80099a0:	622b      	str	r3, [r5, #32]
        break;
 80099a2:	e7f5      	b.n	8009990 <hal_spi_config+0x158>
        init->DataSize = SPI_DATASIZE_8BIT;
 80099a4:	2300      	movs	r3, #0
 80099a6:	60eb      	str	r3, [r5, #12]
    rc = stm32_spi_resolve_prescaler(spi_num, settings->baudrate * 1000, &prescaler);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	aa03      	add	r2, sp, #12
 80099ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80099b0:	fb01 f103 	mul.w	r1, r1, r3
 80099b4:	b2e0      	uxtb	r0, r4
 80099b6:	f7ff fe1b 	bl	80095f0 <stm32_spi_resolve_prescaler>
    if (rc != 0) {
 80099ba:	4606      	mov	r6, r0
 80099bc:	2800      	cmp	r0, #0
 80099be:	d157      	bne.n	8009a70 <hal_spi_config+0x238>
    init->BaudRatePrescaler = prescaler;
 80099c0:	9b03      	ldr	r3, [sp, #12]
 80099c2:	61eb      	str	r3, [r5, #28]
    init->Direction = SPI_DIRECTION_2LINES;
 80099c4:	2300      	movs	r3, #0
 80099c6:	60ab      	str	r3, [r5, #8]
    init->TIMode = SPI_TIMODE_DISABLE;
 80099c8:	626b      	str	r3, [r5, #36]	; 0x24
    init->CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099ca:	62ab      	str	r3, [r5, #40]	; 0x28
    init->CRCPolynomial = 1;
 80099cc:	2301      	movs	r3, #1
 80099ce:	62eb      	str	r3, [r5, #44]	; 0x2c
    irq = stm32_resolve_spi_irq(&spi->handle);
 80099d0:	4628      	mov	r0, r5
 80099d2:	f7ff fd9f 	bl	8009514 <stm32_resolve_spi_irq>
    NVIC_SetPriority(irq, cfg->irq_prio);
 80099d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
  if ((int32_t)(IRQn) >= 0)
 80099da:	1e06      	subs	r6, r0, #0
 80099dc:	db2e      	blt.n	8009a3c <hal_spi_config+0x204>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099de:	011b      	lsls	r3, r3, #4
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	f106 4260 	add.w	r2, r6, #3758096384	; 0xe0000000
 80099e6:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 80099ea:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    NVIC_SetVector(irq, stm32_resolve_spi_irq_handler(&spi->handle));
 80099ee:	4628      	mov	r0, r5
 80099f0:	f7ff fe92 	bl	8009718 <stm32_resolve_spi_irq_handler>
  uint32_t vectors = (uint32_t )SCB->VTOR;
 80099f4:	4b28      	ldr	r3, [pc, #160]	; (8009a98 <hal_spi_config+0x260>)
 80099f6:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 80099f8:	f106 0210 	add.w	r2, r6, #16
 80099fc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
 8009a00:	2e00      	cmp	r6, #0
 8009a02:	db07      	blt.n	8009a14 <hal_spi_config+0x1dc>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a04:	f006 021f 	and.w	r2, r6, #31
 8009a08:	0976      	lsrs	r6, r6, #5
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	4093      	lsls	r3, r2
 8009a0e:	4a23      	ldr	r2, [pc, #140]	; (8009a9c <hal_spi_config+0x264>)
 8009a10:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    rc = HAL_SPI_Init(&spi->handle);
 8009a14:	4628      	mov	r0, r5
 8009a16:	f002 fa3d 	bl	800be94 <HAL_SPI_Init>
 8009a1a:	4606      	mov	r6, r0
    if (rc != 0) {
 8009a1c:	bb40      	cbnz	r0, 8009a70 <hal_spi_config+0x238>
    if (spi->slave) {
 8009a1e:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
 8009a22:	f013 0f01 	tst.w	r3, #1
 8009a26:	d110      	bne.n	8009a4a <hal_spi_config+0x212>
    __HAL_ENABLE_INTERRUPTS(sr);
 8009a28:	f1b8 0f00 	cmp.w	r8, #0
 8009a2c:	d124      	bne.n	8009a78 <hal_spi_config+0x240>
  __ASM volatile ("cpsie i" : : : "memory");
 8009a2e:	b662      	cpsie	i
    return (0);
 8009a30:	4646      	mov	r6, r8
 8009a32:	e021      	b.n	8009a78 <hal_spi_config+0x240>
        init->DataSize = SPI_DATASIZE_16BIT;
 8009a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a38:	60eb      	str	r3, [r5, #12]
        break;
 8009a3a:	e7b5      	b.n	80099a8 <hal_spi_config+0x170>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a3c:	f006 010f 	and.w	r1, r6, #15
 8009a40:	011b      	lsls	r3, r3, #4
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	4a16      	ldr	r2, [pc, #88]	; (8009aa0 <hal_spi_config+0x268>)
 8009a46:	5453      	strb	r3, [r2, r1]
 8009a48:	e7d1      	b.n	80099ee <hal_spi_config+0x1b6>
        hal_spi_slave_set_def_tx_val(spi_num, 0);
 8009a4a:	2100      	movs	r1, #0
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f7ff feab 	bl	80097a8 <hal_spi_slave_set_def_tx_val>
        rc = hal_gpio_irq_init(cfg->ss_pin, spi_ss_isr, spi, HAL_GPIO_TRIG_BOTH,
 8009a52:	f8d9 0000 	ldr.w	r0, [r9]
 8009a56:	2301      	movs	r3, #1
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	462a      	mov	r2, r5
 8009a5e:	4911      	ldr	r1, [pc, #68]	; (8009aa4 <hal_spi_config+0x26c>)
 8009a60:	f7ff fce0 	bl	8009424 <hal_gpio_irq_init>
        spi_ss_isr(spi);
 8009a64:	4628      	mov	r0, r5
 8009a66:	f7ff fde3 	bl	8009630 <spi_ss_isr>
 8009a6a:	e7dd      	b.n	8009a28 <hal_spi_config+0x1f0>
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 8009a6c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    __HAL_ENABLE_INTERRUPTS(sr);
 8009a70:	f1b8 0f00 	cmp.w	r8, #0
 8009a74:	d100      	bne.n	8009a78 <hal_spi_config+0x240>
 8009a76:	b662      	cpsie	i
}
 8009a78:	4630      	mov	r0, r6
 8009a7a:	b009      	add	sp, #36	; 0x24
 8009a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 8009a80:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009a84:	e7f4      	b.n	8009a70 <hal_spi_config+0x238>
        rc = -1;
 8009a86:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009a8a:	e7f1      	b.n	8009a70 <hal_spi_config+0x238>
 8009a8c:	0800dbf8 	.word	0x0800dbf8
 8009a90:	40021000 	.word	0x40021000
 8009a94:	40013000 	.word	0x40013000
 8009a98:	e000ed00 	.word	0xe000ed00
 8009a9c:	e000e100 	.word	0xe000e100
 8009aa0:	e000ed14 	.word	0xe000ed14
 8009aa4:	08009631 	.word	0x08009631

08009aa8 <hal_spi_tx_val>:
 *
 * @return uint16_t Value received on SPI interface from slave. Returns 0xFFFF
 * if called when the SPI is configured to be a slave
 */
uint16_t hal_spi_tx_val(int spi_num, uint16_t val)
{
 8009aa8:	b510      	push	{r4, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	f8ad 100e 	strh.w	r1, [sp, #14]
    struct stm32_hal_spi *spi;
    uint16_t retval;
    int len;
    int sr;

    STM32_HAL_SPI_RESOLVE(spi_num, spi);
 8009ab0:	2805      	cmp	r0, #5
 8009ab2:	dc27      	bgt.n	8009b04 <hal_spi_tx_val+0x5c>
 8009ab4:	4b16      	ldr	r3, [pc, #88]	; (8009b10 <hal_spi_tx_val+0x68>)
 8009ab6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009aba:	b318      	cbz	r0, 8009b04 <hal_spi_tx_val+0x5c>
    if (spi->slave) {
 8009abc:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8009ac0:	f013 0f01 	tst.w	r3, #1
 8009ac4:	d11a      	bne.n	8009afc <hal_spi_tx_val+0x54>
        retval = -1;
        goto err;
    }
    if (spi->handle.Init.DataSize == SPI_DATASIZE_8BIT) {
 8009ac6:	68c3      	ldr	r3, [r0, #12]
 8009ac8:	bb03      	cbnz	r3, 8009b0c <hal_spi_tx_val+0x64>
        len = sizeof(uint8_t);
 8009aca:	2301      	movs	r3, #1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009acc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009ad0:	b672      	cpsid	i
    } else {
        len = sizeof(uint16_t);
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    spi_stat.tx++;
 8009ad2:	4910      	ldr	r1, [pc, #64]	; (8009b14 <hal_spi_tx_val+0x6c>)
 8009ad4:	688a      	ldr	r2, [r1, #8]
 8009ad6:	3201      	adds	r2, #1
 8009ad8:	608a      	str	r2, [r1, #8]
    rc = HAL_SPI_TransmitReceive(&spi->handle,(uint8_t *)&val,
 8009ada:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ade:	9200      	str	r2, [sp, #0]
 8009ae0:	f10d 0216 	add.w	r2, sp, #22
 8009ae4:	f10d 010e 	add.w	r1, sp, #14
 8009ae8:	f002 fa14 	bl	800bf14 <HAL_SPI_TransmitReceive>
                                 (uint8_t *)&retval, len,
                                 STM32_HAL_SPI_TIMEOUT);
    __HAL_ENABLE_INTERRUPTS(sr);
 8009aec:	b904      	cbnz	r4, 8009af0 <hal_spi_tx_val+0x48>
  __ASM volatile ("cpsie i" : : : "memory");
 8009aee:	b662      	cpsie	i
    if (rc != HAL_OK) {
 8009af0:	b140      	cbz	r0, 8009b04 <hal_spi_tx_val+0x5c>
        retval = 0xFFFF;
 8009af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009af6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009afa:	e003      	b.n	8009b04 <hal_spi_tx_val+0x5c>
        retval = -1;
 8009afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b00:	f8ad 3016 	strh.w	r3, [sp, #22]
    }

err:
    return retval;
}
 8009b04:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8009b08:	b006      	add	sp, #24
 8009b0a:	bd10      	pop	{r4, pc}
        len = sizeof(uint16_t);
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	e7dd      	b.n	8009acc <hal_spi_tx_val+0x24>
 8009b10:	0800dbf8 	.word	0x0800dbf8
 8009b14:	20003448 	.word	0x20003448

08009b18 <hal_debugger_connected>:
int
hal_debugger_connected(void)
{
    /* FIXME */
    return 0;
}
 8009b18:	2000      	movs	r0, #0
 8009b1a:	4770      	bx	lr

08009b1c <hal_system_reset>:
{
 8009b1c:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
 8009b1e:	f7ff fffb 	bl	8009b18 <hal_debugger_connected>
 8009b22:	b100      	cbz	r0, 8009b26 <hal_system_reset+0xa>
            asm("bkpt");
 8009b24:	be00      	bkpt	0x0000
  __ASM volatile ("dsb 0xF":::"memory");
 8009b26:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009b2a:	4905      	ldr	r1, [pc, #20]	; (8009b40 <hal_system_reset+0x24>)
 8009b2c:	68ca      	ldr	r2, [r1, #12]
 8009b2e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009b32:	4b04      	ldr	r3, [pc, #16]	; (8009b44 <hal_system_reset+0x28>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	60cb      	str	r3, [r1, #12]
 8009b38:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009b3c:	bf00      	nop
 8009b3e:	e7fd      	b.n	8009b3c <hal_system_reset+0x20>
 8009b40:	e000ed00 	.word	0xe000ed00
 8009b44:	05fa0004 	.word	0x05fa0004

08009b48 <HAL_GetTick>:

uint32_t
HAL_GetTick(void)
{
 8009b48:	b508      	push	{r3, lr}
    return os_time_get();
 8009b4a:	f7f8 fe2f 	bl	80027ac <os_time_get>
}
 8009b4e:	bd08      	pop	{r3, pc}

08009b50 <HAL_InitTick>:

HAL_StatusTypeDef
HAL_InitTick (uint32_t TickPriority)
{
    return HAL_OK;
}
 8009b50:	2000      	movs	r0, #0
 8009b52:	4770      	bx	lr

08009b54 <stm32_tmr_reg_irq>:
  if ((int32_t)(IRQn) >= 0)
 8009b54:	2800      	cmp	r0, #0
 8009b56:	db17      	blt.n	8009b88 <stm32_tmr_reg_irq+0x34>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b58:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 8009b5c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8009b60:	22f0      	movs	r2, #240	; 0xf0
 8009b62:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8009b66:	4b0c      	ldr	r3, [pc, #48]	; (8009b98 <stm32_tmr_reg_irq+0x44>)
 8009b68:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8009b6a:	f100 0210 	add.w	r2, r0, #16
 8009b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
 8009b72:	2800      	cmp	r0, #0
 8009b74:	db07      	blt.n	8009b86 <stm32_tmr_reg_irq+0x32>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b76:	f000 021f 	and.w	r2, r0, #31
 8009b7a:	0940      	lsrs	r0, r0, #5
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	4093      	lsls	r3, r2
 8009b80:	4a06      	ldr	r2, [pc, #24]	; (8009b9c <stm32_tmr_reg_irq+0x48>)
 8009b82:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
stm32_tmr_reg_irq(IRQn_Type irqn, uint32_t func)
{
    NVIC_SetPriority(irqn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irqn, func);
    NVIC_EnableIRQ(irqn);
}
 8009b86:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009b88:	f000 020f 	and.w	r2, r0, #15
 8009b8c:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <stm32_tmr_reg_irq+0x4c>)
 8009b8e:	4413      	add	r3, r2
 8009b90:	22f0      	movs	r2, #240	; 0xf0
 8009b92:	761a      	strb	r2, [r3, #24]
 8009b94:	e7e7      	b.n	8009b66 <stm32_tmr_reg_irq+0x12>
 8009b96:	bf00      	nop
 8009b98:	e000ed00 	.word	0xe000ed00
 8009b9c:	e000e100 	.word	0xe000e100
 8009ba0:	e000ecfc 	.word	0xe000ecfc

08009ba4 <hal_timer_cnt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ba4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009ba8:	b672      	cpsid	i
{
    uint32_t cnt;
    int sr;

    __HAL_DISABLE_INTERRUPTS(sr);
    if (tmr->sht_regs->SR & TIM_SR_UIF) {
 8009baa:	6803      	ldr	r3, [r0, #0]
 8009bac:	6919      	ldr	r1, [r3, #16]
 8009bae:	f011 0f01 	tst.w	r1, #1
 8009bb2:	d007      	beq.n	8009bc4 <hal_timer_cnt+0x20>
        /*
         * Just overflowed
         */
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 8009bb4:	6841      	ldr	r1, [r0, #4]
 8009bb6:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 8009bba:	6041      	str	r1, [r0, #4]
        tmr->sht_regs->SR &= ~TIM_SR_UIF;
 8009bbc:	6919      	ldr	r1, [r3, #16]
 8009bbe:	f021 0101 	bic.w	r1, r1, #1
 8009bc2:	6119      	str	r1, [r3, #16]
    }
    cnt = tmr->sht_oflow + tmr->sht_regs->CNT;
 8009bc4:	6843      	ldr	r3, [r0, #4]
 8009bc6:	6801      	ldr	r1, [r0, #0]
 8009bc8:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8009bca:	4418      	add	r0, r3
    __HAL_ENABLE_INTERRUPTS(sr);
 8009bcc:	b902      	cbnz	r2, 8009bd0 <hal_timer_cnt+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 8009bce:	b662      	cpsie	i

    return cnt;
}
 8009bd0:	4770      	bx	lr
	...

08009bd4 <stm32_hw_setup>:
{
 8009bd4:	b530      	push	{r4, r5, lr}
 8009bd6:	b085      	sub	sp, #20
    switch (num) {
 8009bd8:	b978      	cbnz	r0, 8009bfa <stm32_hw_setup+0x26>
 8009bda:	460c      	mov	r4, r1
        func = (uint32_t)stm32_tmr0_irq;
 8009bdc:	4d28      	ldr	r5, [pc, #160]	; (8009c80 <stm32_hw_setup+0xac>)
    if (regs == TIM1) {
 8009bde:	4b29      	ldr	r3, [pc, #164]	; (8009c84 <stm32_hw_setup+0xb0>)
 8009be0:	4299      	cmp	r1, r3
 8009be2:	d010      	beq.n	8009c06 <stm32_hw_setup+0x32>
    if (regs == TIM2) {
 8009be4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8009be8:	d01c      	beq.n	8009c24 <stm32_hw_setup+0x50>
    if (regs == TIM3) {
 8009bea:	4b27      	ldr	r3, [pc, #156]	; (8009c88 <stm32_hw_setup+0xb4>)
 8009bec:	429c      	cmp	r4, r3
 8009bee:	d028      	beq.n	8009c42 <stm32_hw_setup+0x6e>
    if (regs == TIM4) {
 8009bf0:	4b26      	ldr	r3, [pc, #152]	; (8009c8c <stm32_hw_setup+0xb8>)
 8009bf2:	429c      	cmp	r4, r3
 8009bf4:	d034      	beq.n	8009c60 <stm32_hw_setup+0x8c>
}
 8009bf6:	b005      	add	sp, #20
 8009bf8:	bd30      	pop	{r4, r5, pc}
        assert(0);
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7f7 fdf9 	bl	80017f8 <__assert_func>
        stm32_tmr_reg_irq(TIM1_UP_TIM10_IRQn, func);
 8009c06:	4629      	mov	r1, r5
 8009c08:	2019      	movs	r0, #25
 8009c0a:	f7ff ffa3 	bl	8009b54 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM1_CLK_ENABLE();
 8009c0e:	4b20      	ldr	r3, [pc, #128]	; (8009c90 <stm32_hw_setup+0xbc>)
 8009c10:	699a      	ldr	r2, [r3, #24]
 8009c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c16:	619a      	str	r2, [r3, #24]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	9b00      	ldr	r3, [sp, #0]
 8009c22:	e7df      	b.n	8009be4 <stm32_hw_setup+0x10>
        stm32_tmr_reg_irq(TIM2_IRQn, func);
 8009c24:	4629      	mov	r1, r5
 8009c26:	201c      	movs	r0, #28
 8009c28:	f7ff ff94 	bl	8009b54 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM2_CLK_ENABLE();
 8009c2c:	4b18      	ldr	r3, [pc, #96]	; (8009c90 <stm32_hw_setup+0xbc>)
 8009c2e:	69da      	ldr	r2, [r3, #28]
 8009c30:	f042 0201 	orr.w	r2, r2, #1
 8009c34:	61da      	str	r2, [r3, #28]
 8009c36:	69db      	ldr	r3, [r3, #28]
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	9b01      	ldr	r3, [sp, #4]
 8009c40:	e7d3      	b.n	8009bea <stm32_hw_setup+0x16>
        stm32_tmr_reg_irq(TIM3_IRQn, func);
 8009c42:	4629      	mov	r1, r5
 8009c44:	201d      	movs	r0, #29
 8009c46:	f7ff ff85 	bl	8009b54 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8009c4a:	4b11      	ldr	r3, [pc, #68]	; (8009c90 <stm32_hw_setup+0xbc>)
 8009c4c:	69da      	ldr	r2, [r3, #28]
 8009c4e:	f042 0202 	orr.w	r2, r2, #2
 8009c52:	61da      	str	r2, [r3, #28]
 8009c54:	69db      	ldr	r3, [r3, #28]
 8009c56:	f003 0302 	and.w	r3, r3, #2
 8009c5a:	9302      	str	r3, [sp, #8]
 8009c5c:	9b02      	ldr	r3, [sp, #8]
 8009c5e:	e7c7      	b.n	8009bf0 <stm32_hw_setup+0x1c>
        stm32_tmr_reg_irq(TIM4_IRQn, func);
 8009c60:	4629      	mov	r1, r5
 8009c62:	201e      	movs	r0, #30
 8009c64:	f7ff ff76 	bl	8009b54 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8009c68:	4b09      	ldr	r3, [pc, #36]	; (8009c90 <stm32_hw_setup+0xbc>)
 8009c6a:	69da      	ldr	r2, [r3, #28]
 8009c6c:	f042 0204 	orr.w	r2, r2, #4
 8009c70:	61da      	str	r2, [r3, #28]
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	9303      	str	r3, [sp, #12]
 8009c7a:	9b03      	ldr	r3, [sp, #12]
}
 8009c7c:	e7bb      	b.n	8009bf6 <stm32_hw_setup+0x22>
 8009c7e:	bf00      	nop
 8009c80:	08009d25 	.word	0x08009d25
 8009c84:	40012c00 	.word	0x40012c00
 8009c88:	40000400 	.word	0x40000400
 8009c8c:	40000800 	.word	0x40000800
 8009c90:	40021000 	.word	0x40021000

08009c94 <stm32_tmr_cbs>:
{
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	4605      	mov	r5, r0
    while ((ht = TAILQ_FIRST(&tmr->sht_timers)) != NULL) {
 8009c98:	e009      	b.n	8009cae <stm32_tmr_cbs+0x1a>
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 8009c9a:	6963      	ldr	r3, [r4, #20]
 8009c9c:	60eb      	str	r3, [r5, #12]
 8009c9e:	6963      	ldr	r3, [r4, #20]
 8009ca0:	6922      	ldr	r2, [r4, #16]
 8009ca2:	601a      	str	r2, [r3, #0]
            ht->link.tqe_prev = NULL;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	6163      	str	r3, [r4, #20]
            ht->cb_func(ht->cb_arg);
 8009ca8:	6863      	ldr	r3, [r4, #4]
 8009caa:	68a0      	ldr	r0, [r4, #8]
 8009cac:	4798      	blx	r3
    while ((ht = TAILQ_FIRST(&tmr->sht_timers)) != NULL) {
 8009cae:	68ac      	ldr	r4, [r5, #8]
 8009cb0:	b164      	cbz	r4, 8009ccc <stm32_tmr_cbs+0x38>
        cnt = hal_timer_cnt(tmr);
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	f7ff ff76 	bl	8009ba4 <hal_timer_cnt>
        if (((int32_t)(cnt - ht->expiry)) >= 0) {
 8009cb8:	68e3      	ldr	r3, [r4, #12]
 8009cba:	1ac0      	subs	r0, r0, r3
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	db05      	blt.n	8009ccc <stm32_tmr_cbs+0x38>
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 8009cc0:	6923      	ldr	r3, [r4, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d0e9      	beq.n	8009c9a <stm32_tmr_cbs+0x6>
 8009cc6:	6962      	ldr	r2, [r4, #20]
 8009cc8:	615a      	str	r2, [r3, #20]
 8009cca:	e7e8      	b.n	8009c9e <stm32_tmr_cbs+0xa>
    ht = TAILQ_FIRST(&tmr->sht_timers);
 8009ccc:	68ab      	ldr	r3, [r5, #8]
    if (ht) {
 8009cce:	b11b      	cbz	r3, 8009cd8 <stm32_tmr_cbs+0x44>
        tmr->sht_regs->CCR1 = ht->expiry;
 8009cd0:	682a      	ldr	r2, [r5, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	6353      	str	r3, [r2, #52]	; 0x34
}
 8009cd6:	bd38      	pop	{r3, r4, r5, pc}
        TIM_CCxChannelCmd(tmr->sht_regs, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009cd8:	2200      	movs	r2, #0
 8009cda:	4611      	mov	r1, r2
 8009cdc:	6828      	ldr	r0, [r5, #0]
 8009cde:	f002 faef 	bl	800c2c0 <TIM_CCxChannelCmd>
        tmr->sht_regs->DIER &= ~TIM_DIER_CC1IE;
 8009ce2:	682a      	ldr	r2, [r5, #0]
 8009ce4:	68d3      	ldr	r3, [r2, #12]
 8009ce6:	f023 0302 	bic.w	r3, r3, #2
 8009cea:	60d3      	str	r3, [r2, #12]
}
 8009cec:	e7f3      	b.n	8009cd6 <stm32_tmr_cbs+0x42>

08009cee <stm32_tmr_irq>:
{
 8009cee:	b538      	push	{r3, r4, r5, lr}
 8009cf0:	4605      	mov	r5, r0
    sr = tmr->sht_regs->SR;
 8009cf2:	6803      	ldr	r3, [r0, #0]
 8009cf4:	691b      	ldr	r3, [r3, #16]
    if (sr & TIM_SR_UIF) {
 8009cf6:	f013 0f01 	tst.w	r3, #1
 8009cfa:	d00b      	beq.n	8009d14 <stm32_tmr_irq+0x26>
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 8009cfc:	6842      	ldr	r2, [r0, #4]
 8009cfe:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8009d02:	6042      	str	r2, [r0, #4]
        clr |= TIM_SR_UIF;
 8009d04:	2401      	movs	r4, #1
    if (sr & TIM_SR_CC1IF) {
 8009d06:	f013 0f02 	tst.w	r3, #2
 8009d0a:	d105      	bne.n	8009d18 <stm32_tmr_irq+0x2a>
    tmr->sht_regs->SR = ~clr;
 8009d0c:	682b      	ldr	r3, [r5, #0]
 8009d0e:	43e4      	mvns	r4, r4
 8009d10:	611c      	str	r4, [r3, #16]
}
 8009d12:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t clr = 0;
 8009d14:	2400      	movs	r4, #0
 8009d16:	e7f6      	b.n	8009d06 <stm32_tmr_irq+0x18>
        clr |= TIM_SR_CC1IF;
 8009d18:	f044 0402 	orr.w	r4, r4, #2
        stm32_tmr_cbs(tmr);
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f7ff ffb9 	bl	8009c94 <stm32_tmr_cbs>
 8009d22:	e7f3      	b.n	8009d0c <stm32_tmr_irq+0x1e>

08009d24 <stm32_tmr0_irq>:
{
 8009d24:	b508      	push	{r3, lr}
    stm32_tmr_irq(&stm32_tmr0);
 8009d26:	4802      	ldr	r0, [pc, #8]	; (8009d30 <stm32_tmr0_irq+0xc>)
 8009d28:	f7ff ffe1 	bl	8009cee <stm32_tmr_irq>
}
 8009d2c:	bd08      	pop	{r3, pc}
 8009d2e:	bf00      	nop
 8009d30:	2000364c 	.word	0x2000364c

08009d34 <hal_timer_init>:
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num]) ||
 8009d34:	2802      	cmp	r0, #2
 8009d36:	dc40      	bgt.n	8009dba <hal_timer_init+0x86>
 8009d38:	4b26      	ldr	r3, [pc, #152]	; (8009dd4 <hal_timer_init+0xa0>)
 8009d3a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d03e      	beq.n	8009dc0 <hal_timer_init+0x8c>
 8009d42:	2900      	cmp	r1, #0
 8009d44:	d03f      	beq.n	8009dc6 <hal_timer_init+0x92>
    regs = tmr->sht_regs = (TIM_TypeDef *)cfg;
 8009d46:	6019      	str	r1, [r3, #0]
    if (!IS_TIM_CC1_INSTANCE(regs)) {
 8009d48:	4b23      	ldr	r3, [pc, #140]	; (8009dd8 <hal_timer_init+0xa4>)
 8009d4a:	4299      	cmp	r1, r3
 8009d4c:	d00a      	beq.n	8009d64 <hal_timer_init+0x30>
 8009d4e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8009d52:	d007      	beq.n	8009d64 <hal_timer_init+0x30>
 8009d54:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8009d58:	4299      	cmp	r1, r3
 8009d5a:	d003      	beq.n	8009d64 <hal_timer_init+0x30>
 8009d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d60:	4299      	cmp	r1, r3
 8009d62:	d133      	bne.n	8009dcc <hal_timer_init+0x98>
{
 8009d64:	b510      	push	{r4, lr}
 8009d66:	460c      	mov	r4, r1
    stm32_hw_setup(num, regs);
 8009d68:	f7ff ff34 	bl	8009bd4 <stm32_hw_setup>
    if (regs == TIM1) {
 8009d6c:	4b1a      	ldr	r3, [pc, #104]	; (8009dd8 <hal_timer_init+0xa4>)
 8009d6e:	429c      	cmp	r4, r3
 8009d70:	d00a      	beq.n	8009d88 <hal_timer_init+0x54>
    if (regs == TIM2) {
 8009d72:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8009d76:	d00d      	beq.n	8009d94 <hal_timer_init+0x60>
    if (regs == TIM3) {
 8009d78:	4b18      	ldr	r3, [pc, #96]	; (8009ddc <hal_timer_init+0xa8>)
 8009d7a:	429c      	cmp	r4, r3
 8009d7c:	d010      	beq.n	8009da0 <hal_timer_init+0x6c>
    if (regs == TIM4) {
 8009d7e:	4b18      	ldr	r3, [pc, #96]	; (8009de0 <hal_timer_init+0xac>)
 8009d80:	429c      	cmp	r4, r3
 8009d82:	d013      	beq.n	8009dac <hal_timer_init+0x78>
    return 0;
 8009d84:	2000      	movs	r0, #0
}
 8009d86:	bd10      	pop	{r4, pc}
        __HAL_DBGMCU_FREEZE_TIM1();
 8009d88:	4a16      	ldr	r2, [pc, #88]	; (8009de4 <hal_timer_init+0xb0>)
 8009d8a:	6853      	ldr	r3, [r2, #4]
 8009d8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d90:	6053      	str	r3, [r2, #4]
 8009d92:	e7ee      	b.n	8009d72 <hal_timer_init+0x3e>
        __HAL_DBGMCU_FREEZE_TIM2();
 8009d94:	4a13      	ldr	r2, [pc, #76]	; (8009de4 <hal_timer_init+0xb0>)
 8009d96:	6853      	ldr	r3, [r2, #4]
 8009d98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d9c:	6053      	str	r3, [r2, #4]
 8009d9e:	e7eb      	b.n	8009d78 <hal_timer_init+0x44>
        __HAL_DBGMCU_FREEZE_TIM3();
 8009da0:	4a10      	ldr	r2, [pc, #64]	; (8009de4 <hal_timer_init+0xb0>)
 8009da2:	6853      	ldr	r3, [r2, #4]
 8009da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009da8:	6053      	str	r3, [r2, #4]
 8009daa:	e7e8      	b.n	8009d7e <hal_timer_init+0x4a>
        __HAL_DBGMCU_FREEZE_TIM4();
 8009dac:	4a0d      	ldr	r2, [pc, #52]	; (8009de4 <hal_timer_init+0xb0>)
 8009dae:	6853      	ldr	r3, [r2, #4]
 8009db0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009db4:	6053      	str	r3, [r2, #4]
    return 0;
 8009db6:	2000      	movs	r0, #0
 8009db8:	e7e5      	b.n	8009d86 <hal_timer_init+0x52>
        return -1;
 8009dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dbe:	4770      	bx	lr
 8009dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dc4:	4770      	bx	lr
 8009dc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dca:	4770      	bx	lr
        return -1;
 8009dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	0800dc10 	.word	0x0800dc10
 8009dd8:	40012c00 	.word	0x40012c00
 8009ddc:	40000400 	.word	0x40000400
 8009de0:	40000800 	.word	0x40000800
 8009de4:	e0042000 	.word	0xe0042000

08009de8 <hal_timer_config>:
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8009de8:	2802      	cmp	r0, #2
 8009dea:	dc3a      	bgt.n	8009e62 <hal_timer_config+0x7a>
{
 8009dec:	b530      	push	{r4, r5, lr}
 8009dee:	b087      	sub	sp, #28
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8009df0:	4b22      	ldr	r3, [pc, #136]	; (8009e7c <hal_timer_config+0x94>)
 8009df2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8009df6:	2d00      	cmp	r5, #0
 8009df8:	d036      	beq.n	8009e68 <hal_timer_config+0x80>
    if (!IS_TIM_CC1_INSTANCE(tmr->sht_regs)) {
 8009dfa:	6828      	ldr	r0, [r5, #0]
 8009dfc:	4b20      	ldr	r3, [pc, #128]	; (8009e80 <hal_timer_config+0x98>)
 8009dfe:	4298      	cmp	r0, r3
 8009e00:	d00a      	beq.n	8009e18 <hal_timer_config+0x30>
 8009e02:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009e06:	d007      	beq.n	8009e18 <hal_timer_config+0x30>
 8009e08:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8009e0c:	4298      	cmp	r0, r3
 8009e0e:	d003      	beq.n	8009e18 <hal_timer_config+0x30>
 8009e10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e14:	4298      	cmp	r0, r3
 8009e16:	d12a      	bne.n	8009e6e <hal_timer_config+0x86>
 8009e18:	460c      	mov	r4, r1
    prescaler = stm32_hal_timer_get_freq(tmr->sht_regs) / freq_hz;
 8009e1a:	f002 fa7b 	bl	800c314 <stm32_hal_timer_get_freq>
 8009e1e:	fbb0 f0f4 	udiv	r0, r0, r4
    if (prescaler > 0xffff) {
 8009e22:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8009e26:	d225      	bcs.n	8009e74 <hal_timer_config+0x8c>
    memset(&init, 0, sizeof(init));
 8009e28:	2400      	movs	r4, #0
 8009e2a:	9401      	str	r4, [sp, #4]
 8009e2c:	9403      	str	r4, [sp, #12]
 8009e2e:	9404      	str	r4, [sp, #16]
 8009e30:	9405      	str	r4, [sp, #20]
    init.Period = 0xffff;
 8009e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e36:	9302      	str	r3, [sp, #8]
    init.Prescaler = prescaler;
 8009e38:	9000      	str	r0, [sp, #0]
    tmr->sht_regs->CR1 = TIM_CR1_URS;
 8009e3a:	682b      	ldr	r3, [r5, #0]
 8009e3c:	2204      	movs	r2, #4
 8009e3e:	601a      	str	r2, [r3, #0]
    tmr->sht_regs->DIER = TIM_DIER_UIE;
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	2201      	movs	r2, #1
 8009e44:	60da      	str	r2, [r3, #12]
    TIM_Base_SetConfig(tmr->sht_regs, &init);
 8009e46:	4669      	mov	r1, sp
 8009e48:	6828      	ldr	r0, [r5, #0]
 8009e4a:	f002 f9ff 	bl	800c24c <TIM_Base_SetConfig>
    tmr->sht_regs->SR = 0;
 8009e4e:	682b      	ldr	r3, [r5, #0]
 8009e50:	611c      	str	r4, [r3, #16]
    tmr->sht_regs->CR1 |= TIM_CR1_CEN;
 8009e52:	682a      	ldr	r2, [r5, #0]
 8009e54:	6813      	ldr	r3, [r2, #0]
 8009e56:	f043 0301 	orr.w	r3, r3, #1
 8009e5a:	6013      	str	r3, [r2, #0]
    return 0;
 8009e5c:	4620      	mov	r0, r4
}
 8009e5e:	b007      	add	sp, #28
 8009e60:	bd30      	pop	{r4, r5, pc}
        return -1;
 8009e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009e66:	4770      	bx	lr
        return -1;
 8009e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e6c:	e7f7      	b.n	8009e5e <hal_timer_config+0x76>
        return -1;
 8009e6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e72:	e7f4      	b.n	8009e5e <hal_timer_config+0x76>
        return -1;
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e78:	e7f1      	b.n	8009e5e <hal_timer_config+0x76>
 8009e7a:	bf00      	nop
 8009e7c:	0800dc10 	.word	0x0800dc10
 8009e80:	40012c00 	.word	0x40012c00

08009e84 <hal_timer_read>:
uint32_t
hal_timer_read(int num)
{
    struct stm32_hal_tmr *tmr;

    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8009e84:	2802      	cmp	r0, #2
 8009e86:	dc07      	bgt.n	8009e98 <hal_timer_read+0x14>
{
 8009e88:	b508      	push	{r3, lr}
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8009e8a:	4b06      	ldr	r3, [pc, #24]	; (8009ea4 <hal_timer_read+0x20>)
 8009e8c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8009e90:	b128      	cbz	r0, 8009e9e <hal_timer_read+0x1a>
        return -1;
    }
    return hal_timer_cnt(tmr);
 8009e92:	f7ff fe87 	bl	8009ba4 <hal_timer_cnt>
}
 8009e96:	bd08      	pop	{r3, pc}
        return -1;
 8009e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8009e9c:	4770      	bx	lr
        return -1;
 8009e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ea2:	e7f8      	b.n	8009e96 <hal_timer_read+0x12>
 8009ea4:	0800dc10 	.word	0x0800dc10

08009ea8 <uart_irq_handler>:
    return 0;
}

static void
uart_irq_handler(int num)
{
 8009ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t cr1;
    int data;
    int rc;

    ui = &uart_irqs[num];
    ++ui->ui_cnt;
 8009eaa:	4a24      	ldr	r2, [pc, #144]	; (8009f3c <uart_irq_handler+0x94>)
 8009eac:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8009eb0:	684b      	ldr	r3, [r1, #4]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	604b      	str	r3, [r1, #4]
    u = ui->ui_uart;
 8009eb6:	f852 4030 	ldr.w	r4, [r2, r0, lsl #3]
    regs = u->u_regs;
 8009eba:	6825      	ldr	r5, [r4, #0]

    isr = STATUS(regs);
 8009ebc:	682e      	ldr	r6, [r5, #0]
    if (isr & RXNE) {
 8009ebe:	f016 0f20 	tst.w	r6, #32
 8009ec2:	d007      	beq.n	8009ed4 <uart_irq_handler+0x2c>
        data = RXDR(regs);
 8009ec4:	686f      	ldr	r7, [r5, #4]
        rc = u->u_rx_func(u->u_func_arg, data);
 8009ec6:	68a3      	ldr	r3, [r4, #8]
 8009ec8:	b2ff      	uxtb	r7, r7
 8009eca:	4639      	mov	r1, r7
 8009ecc:	6960      	ldr	r0, [r4, #20]
 8009ece:	4798      	blx	r3
        if (rc < 0) {
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	db1f      	blt.n	8009f14 <uart_irq_handler+0x6c>
            regs->CR1 &= ~USART_CR1_RXNEIE;
            u->u_rx_data = data;
            u->u_rx_stall = 1;
        }
    }
    if (isr & (TXE | TC)) {
 8009ed4:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8009ed8:	d01b      	beq.n	8009f12 <uart_irq_handler+0x6a>
        cr1 = regs->CR1;
 8009eda:	68ef      	ldr	r7, [r5, #12]
        if (isr & TXE) {
 8009edc:	f016 0f80 	tst.w	r6, #128	; 0x80
 8009ee0:	d005      	beq.n	8009eee <uart_irq_handler+0x46>
            data = u->u_tx_func(u->u_func_arg);
 8009ee2:	68e3      	ldr	r3, [r4, #12]
 8009ee4:	6960      	ldr	r0, [r4, #20]
 8009ee6:	4798      	blx	r3
            if (data < 0) {
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	db1d      	blt.n	8009f28 <uart_irq_handler+0x80>
                cr1 &= ~USART_CR1_TXEIE;
                cr1 |= USART_CR1_TCIE;
                u->u_tx_end = 1;
            } else {
                TXDR(regs) = data;
 8009eec:	6068      	str	r0, [r5, #4]
            }
        }
        if (u->u_tx_end == 1 && isr & TC) {
 8009eee:	7923      	ldrb	r3, [r4, #4]
 8009ef0:	f013 0f04 	tst.w	r3, #4
 8009ef4:	d00c      	beq.n	8009f10 <uart_irq_handler+0x68>
 8009ef6:	f016 0f40 	tst.w	r6, #64	; 0x40
 8009efa:	d009      	beq.n	8009f10 <uart_irq_handler+0x68>
            if (u->u_tx_done) {
 8009efc:	6923      	ldr	r3, [r4, #16]
 8009efe:	b10b      	cbz	r3, 8009f04 <uart_irq_handler+0x5c>
                u->u_tx_done(u->u_func_arg);
 8009f00:	6960      	ldr	r0, [r4, #20]
 8009f02:	4798      	blx	r3
            }
            u->u_tx_end = 0;
 8009f04:	7923      	ldrb	r3, [r4, #4]
 8009f06:	f36f 0382 	bfc	r3, #2, #1
 8009f0a:	7123      	strb	r3, [r4, #4]
            cr1 &= ~USART_CR1_TCIE;
 8009f0c:	f027 0740 	bic.w	r7, r7, #64	; 0x40
        }
        regs->CR1 = cr1;
 8009f10:	60ef      	str	r7, [r5, #12]
    /* clear overrun */
    if (isr & USART_ISR_ORE) {
        regs->ICR |= USART_ICR_ORECF;
    }
#endif
}
 8009f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            regs->CR1 &= ~USART_CR1_RXNEIE;
 8009f14:	68eb      	ldr	r3, [r5, #12]
 8009f16:	f023 0320 	bic.w	r3, r3, #32
 8009f1a:	60eb      	str	r3, [r5, #12]
            u->u_rx_data = data;
 8009f1c:	7167      	strb	r7, [r4, #5]
            u->u_rx_stall = 1;
 8009f1e:	7923      	ldrb	r3, [r4, #4]
 8009f20:	f043 0302 	orr.w	r3, r3, #2
 8009f24:	7123      	strb	r3, [r4, #4]
 8009f26:	e7d5      	b.n	8009ed4 <uart_irq_handler+0x2c>
                cr1 &= ~USART_CR1_TXEIE;
 8009f28:	f027 0780 	bic.w	r7, r7, #128	; 0x80
                cr1 |= USART_CR1_TCIE;
 8009f2c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
                u->u_tx_end = 1;
 8009f30:	7923      	ldrb	r3, [r4, #4]
 8009f32:	f043 0304 	orr.w	r3, r3, #4
 8009f36:	7123      	strb	r3, [r4, #4]
 8009f38:	e7d9      	b.n	8009eee <uart_irq_handler+0x46>
 8009f3a:	bf00      	nop
 8009f3c:	20003460 	.word	0x20003460

08009f40 <uart_irq1>:
    while (!(STATUS(regs) & TC));
}

static void
uart_irq1(void)
{
 8009f40:	b508      	push	{r3, lr}
    uart_irq_handler(0);
 8009f42:	2000      	movs	r0, #0
 8009f44:	f7ff ffb0 	bl	8009ea8 <uart_irq_handler>
}
 8009f48:	bd08      	pop	{r3, pc}

08009f4a <uart_irq2>:

static void
uart_irq2(void)
{
 8009f4a:	b508      	push	{r3, lr}
    uart_irq_handler(1);
 8009f4c:	2001      	movs	r0, #1
 8009f4e:	f7ff ffab 	bl	8009ea8 <uart_irq_handler>

}
 8009f52:	bd08      	pop	{r3, pc}

08009f54 <uart_irq3>:

#ifdef USART3_BASE
static void
uart_irq3(void)
{
 8009f54:	b508      	push	{r3, lr}
    uart_irq_handler(2);
 8009f56:	2002      	movs	r0, #2
 8009f58:	f7ff ffa6 	bl	8009ea8 <uart_irq_handler>
}
 8009f5c:	bd08      	pop	{r3, pc}
	...

08009f60 <hal_uart_set_nvic>:
}
#endif

static void
hal_uart_set_nvic(IRQn_Type irqn, struct hal_uart *uart)
{
 8009f60:	b508      	push	{r3, lr}
    uint32_t isr;
    struct hal_uart_irq *ui = NULL;

    switch (irqn) {
 8009f62:	2826      	cmp	r0, #38	; 0x26
 8009f64:	d01e      	beq.n	8009fa4 <hal_uart_set_nvic+0x44>
 8009f66:	2827      	cmp	r0, #39	; 0x27
 8009f68:	d01f      	beq.n	8009faa <hal_uart_set_nvic+0x4a>
 8009f6a:	2825      	cmp	r0, #37	; 0x25
 8009f6c:	d005      	beq.n	8009f7a <hal_uart_set_nvic+0x1a>
        isr = (uint32_t)&uart_irq8;
        ui = &uart_irqs[7];
        break;
#endif
    default:
        assert(0);
 8009f6e:	2300      	movs	r3, #0
 8009f70:	461a      	mov	r2, r3
 8009f72:	4619      	mov	r1, r3
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7f7 fc3f 	bl	80017f8 <__assert_func>
        isr = (uint32_t)&uart_irq1;
 8009f7a:	4a0d      	ldr	r2, [pc, #52]	; (8009fb0 <hal_uart_set_nvic+0x50>)
        ui = &uart_irqs[0];
 8009f7c:	4b0d      	ldr	r3, [pc, #52]	; (8009fb4 <hal_uart_set_nvic+0x54>)
        break;
    }

    if (ui) {
 8009f7e:	b183      	cbz	r3, 8009fa2 <hal_uart_set_nvic+0x42>
        ui->ui_uart = uart;
 8009f80:	6019      	str	r1, [r3, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8009f82:	4b0d      	ldr	r3, [pc, #52]	; (8009fb8 <hal_uart_set_nvic+0x58>)
 8009f84:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8009f86:	f100 0110 	add.w	r1, r0, #16
 8009f8a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
  if ((int32_t)(IRQn) >= 0)
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	db07      	blt.n	8009fa2 <hal_uart_set_nvic+0x42>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f92:	f000 021f 	and.w	r2, r0, #31
 8009f96:	0940      	lsrs	r0, r0, #5
 8009f98:	2301      	movs	r3, #1
 8009f9a:	4093      	lsls	r3, r2
 8009f9c:	4a07      	ldr	r2, [pc, #28]	; (8009fbc <hal_uart_set_nvic+0x5c>)
 8009f9e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

        NVIC_SetVector(irqn, isr);
        NVIC_EnableIRQ(irqn);
    }
}
 8009fa2:	bd08      	pop	{r3, pc}
        isr = (uint32_t)&uart_irq2;
 8009fa4:	4a06      	ldr	r2, [pc, #24]	; (8009fc0 <hal_uart_set_nvic+0x60>)
        ui = &uart_irqs[1];
 8009fa6:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <hal_uart_set_nvic+0x64>)
        break;
 8009fa8:	e7e9      	b.n	8009f7e <hal_uart_set_nvic+0x1e>
        isr = (uint32_t)&uart_irq3;
 8009faa:	4a07      	ldr	r2, [pc, #28]	; (8009fc8 <hal_uart_set_nvic+0x68>)
        ui = &uart_irqs[2];
 8009fac:	4b07      	ldr	r3, [pc, #28]	; (8009fcc <hal_uart_set_nvic+0x6c>)
        break;
 8009fae:	e7e6      	b.n	8009f7e <hal_uart_set_nvic+0x1e>
 8009fb0:	08009f41 	.word	0x08009f41
 8009fb4:	20003460 	.word	0x20003460
 8009fb8:	e000ed00 	.word	0xe000ed00
 8009fbc:	e000e100 	.word	0xe000e100
 8009fc0:	08009f4b 	.word	0x08009f4b
 8009fc4:	20003468 	.word	0x20003468
 8009fc8:	08009f55 	.word	0x08009f55
 8009fcc:	20003470 	.word	0x20003470

08009fd0 <hal_uart_init_cbs>:
    if (port >= UART_CNT || u->u_open) {
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	dc16      	bgt.n	800a002 <hal_uart_init_cbs+0x32>
{
 8009fd4:	b4f0      	push	{r4, r5, r6, r7}
    if (port >= UART_CNT || u->u_open) {
 8009fd6:	ebc0 04c0 	rsb	r4, r0, r0, lsl #3
 8009fda:	00a5      	lsls	r5, r4, #2
 8009fdc:	4c0c      	ldr	r4, [pc, #48]	; (800a010 <hal_uart_init_cbs+0x40>)
 8009fde:	442c      	add	r4, r5
 8009fe0:	7924      	ldrb	r4, [r4, #4]
 8009fe2:	f014 0f01 	tst.w	r4, #1
 8009fe6:	d10f      	bne.n	800a008 <hal_uart_init_cbs+0x38>
    u->u_rx_func = rx_func;
 8009fe8:	4e09      	ldr	r6, [pc, #36]	; (800a010 <hal_uart_init_cbs+0x40>)
 8009fea:	00c5      	lsls	r5, r0, #3
 8009fec:	1a2f      	subs	r7, r5, r0
 8009fee:	00bc      	lsls	r4, r7, #2
 8009ff0:	4434      	add	r4, r6
 8009ff2:	60a3      	str	r3, [r4, #8]
    u->u_tx_func = tx_func;
 8009ff4:	60e1      	str	r1, [r4, #12]
    u->u_tx_done = tx_done;
 8009ff6:	6122      	str	r2, [r4, #16]
    u->u_func_arg = arg;
 8009ff8:	9b04      	ldr	r3, [sp, #16]
 8009ffa:	6163      	str	r3, [r4, #20]
    return 0;
 8009ffc:	2000      	movs	r0, #0
}
 8009ffe:	bcf0      	pop	{r4, r5, r6, r7}
 800a000:	4770      	bx	lr
        return -1;
 800a002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a006:	4770      	bx	lr
        return -1;
 800a008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a00c:	e7f7      	b.n	8009ffe <hal_uart_init_cbs+0x2e>
 800a00e:	bf00      	nop
 800a010:	20003478 	.word	0x20003478

0800a014 <hal_uart_start_rx>:
{
 800a014:	b538      	push	{r3, r4, r5, lr}
    if (u->u_rx_stall) {
 800a016:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800a01a:	009a      	lsls	r2, r3, #2
 800a01c:	4b13      	ldr	r3, [pc, #76]	; (800a06c <hal_uart_start_rx+0x58>)
 800a01e:	4413      	add	r3, r2
 800a020:	791b      	ldrb	r3, [r3, #4]
 800a022:	f013 0f02 	tst.w	r3, #2
 800a026:	d01f      	beq.n	800a068 <hal_uart_start_rx+0x54>
 800a028:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a02a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a02e:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_data);
 800a030:	00c2      	lsls	r2, r0, #3
 800a032:	1a12      	subs	r2, r2, r0
 800a034:	0091      	lsls	r1, r2, #2
 800a036:	4b0d      	ldr	r3, [pc, #52]	; (800a06c <hal_uart_start_rx+0x58>)
 800a038:	440b      	add	r3, r1
 800a03a:	689a      	ldr	r2, [r3, #8]
 800a03c:	7959      	ldrb	r1, [r3, #5]
 800a03e:	6958      	ldr	r0, [r3, #20]
 800a040:	4790      	blx	r2
        if (rc == 0) {
 800a042:	b978      	cbnz	r0, 800a064 <hal_uart_start_rx+0x50>
            u->u_rx_stall = 0;
 800a044:	4a09      	ldr	r2, [pc, #36]	; (800a06c <hal_uart_start_rx+0x58>)
 800a046:	00e0      	lsls	r0, r4, #3
 800a048:	1b01      	subs	r1, r0, r4
 800a04a:	008b      	lsls	r3, r1, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	7919      	ldrb	r1, [r3, #4]
 800a050:	f36f 0141 	bfc	r1, #1, #1
 800a054:	7119      	strb	r1, [r3, #4]
            u->u_regs->CR1 |= USART_CR1_RXNEIE;
 800a056:	1b04      	subs	r4, r0, r4
 800a058:	00a3      	lsls	r3, r4, #2
 800a05a:	58d2      	ldr	r2, [r2, r3]
 800a05c:	68d3      	ldr	r3, [r2, #12]
 800a05e:	f043 0320 	orr.w	r3, r3, #32
 800a062:	60d3      	str	r3, [r2, #12]
        __HAL_ENABLE_INTERRUPTS(sr);
 800a064:	b905      	cbnz	r5, 800a068 <hal_uart_start_rx+0x54>
  __ASM volatile ("cpsie i" : : : "memory");
 800a066:	b662      	cpsie	i
}
 800a068:	bd38      	pop	{r3, r4, r5, pc}
 800a06a:	bf00      	nop
 800a06c:	20003478 	.word	0x20003478

0800a070 <hal_uart_start_tx>:
{
 800a070:	b470      	push	{r4, r5, r6}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a072:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a076:	b672      	cpsid	i
    u->u_regs->CR1 &= ~USART_CR1_TCIE;
 800a078:	4b0c      	ldr	r3, [pc, #48]	; (800a0ac <hal_uart_start_tx+0x3c>)
 800a07a:	00c2      	lsls	r2, r0, #3
 800a07c:	1a14      	subs	r4, r2, r0
 800a07e:	00a1      	lsls	r1, r4, #2
 800a080:	585e      	ldr	r6, [r3, r1]
 800a082:	68f4      	ldr	r4, [r6, #12]
 800a084:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 800a088:	60f4      	str	r4, [r6, #12]
    u->u_regs->CR1 |= USART_CR1_TXEIE;
 800a08a:	585c      	ldr	r4, [r3, r1]
 800a08c:	68e1      	ldr	r1, [r4, #12]
 800a08e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800a092:	60e1      	str	r1, [r4, #12]
    u->u_tx_end = 0;
 800a094:	1a10      	subs	r0, r2, r0
 800a096:	0082      	lsls	r2, r0, #2
 800a098:	4413      	add	r3, r2
 800a09a:	791a      	ldrb	r2, [r3, #4]
 800a09c:	f36f 0282 	bfc	r2, #2, #1
 800a0a0:	711a      	strb	r2, [r3, #4]
    __HAL_ENABLE_INTERRUPTS(sr);
 800a0a2:	b905      	cbnz	r5, 800a0a6 <hal_uart_start_tx+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
 800a0a4:	b662      	cpsie	i
}
 800a0a6:	bc70      	pop	{r4, r5, r6}
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	20003478 	.word	0x20003478

0800a0b0 <hal_uart_blocking_tx>:
    if (port >= UART_CNT || !u->u_open) {
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	dd00      	ble.n	800a0b6 <hal_uart_blocking_tx+0x6>
}
 800a0b4:	4770      	bx	lr
    if (port >= UART_CNT || !u->u_open) {
 800a0b6:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800a0ba:	009a      	lsls	r2, r3, #2
 800a0bc:	4b09      	ldr	r3, [pc, #36]	; (800a0e4 <hal_uart_blocking_tx+0x34>)
 800a0be:	4413      	add	r3, r2
 800a0c0:	791b      	ldrb	r3, [r3, #4]
 800a0c2:	f013 0f01 	tst.w	r3, #1
 800a0c6:	d0f5      	beq.n	800a0b4 <hal_uart_blocking_tx+0x4>
    regs = u->u_regs;
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	4a06      	ldr	r2, [pc, #24]	; (800a0e4 <hal_uart_blocking_tx+0x34>)
 800a0cc:	58d3      	ldr	r3, [r2, r3]
    while (!(STATUS(regs) & TXE));
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a0d4:	d0fb      	beq.n	800a0ce <hal_uart_blocking_tx+0x1e>
    TXDR(regs) = data;
 800a0d6:	6059      	str	r1, [r3, #4]
    while (!(STATUS(regs) & TC));
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	f012 0f40 	tst.w	r2, #64	; 0x40
 800a0de:	d0fb      	beq.n	800a0d8 <hal_uart_blocking_tx+0x28>
 800a0e0:	e7e8      	b.n	800a0b4 <hal_uart_blocking_tx+0x4>
 800a0e2:	bf00      	nop
 800a0e4:	20003478 	.word	0x20003478

0800a0e8 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
 800a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	b085      	sub	sp, #20
 800a0ee:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 800a0f2:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
    uint32_t cr1, cr2, cr3;
#if MYNEWT_VAL(MCU_STM32F1)
    GPIO_InitTypeDef gpio;
#endif

    if (port >= UART_CNT) {
 800a0f6:	1e04      	subs	r4, r0, #0
 800a0f8:	f300 816e 	bgt.w	800a3d8 <hal_uart_config+0x2f0>
        return -1;
    }

    u = &uarts[port];
 800a0fc:	00e5      	lsls	r5, r4, #3
 800a0fe:	1b2d      	subs	r5, r5, r4
 800a100:	00a8      	lsls	r0, r5, #2
 800a102:	4dba      	ldr	r5, [pc, #744]	; (800a3ec <hal_uart_config+0x304>)
 800a104:	eb05 0800 	add.w	r8, r5, r0
    if (u->u_open) {
 800a108:	f898 0004 	ldrb.w	r0, [r8, #4]
 800a10c:	f010 0f01 	tst.w	r0, #1
 800a110:	f040 8165 	bne.w	800a3de <hal_uart_config+0x2f6>
 800a114:	461f      	mov	r7, r3
 800a116:	4691      	mov	r9, r2
 800a118:	460e      	mov	r6, r1
        return -1;
    }
    cfg = u->u_cfg;
 800a11a:	f8d8 5018 	ldr.w	r5, [r8, #24]
    assert(cfg);
 800a11e:	2d00      	cmp	r5, #0
 800a120:	f000 80e2 	beq.w	800a2e8 <hal_uart_config+0x200>

#if MYNEWT_VAL(MCU_STM32F1)
    gpio.Mode = GPIO_MODE_AF_PP;
 800a124:	2302      	movs	r3, #2
 800a126:	9301      	str	r3, [sp, #4]
    gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800a128:	2303      	movs	r3, #3
 800a12a:	9303      	str	r3, [sp, #12]

    gpio.Pull = GPIO_PULLUP;
 800a12c:	2301      	movs	r3, #1
 800a12e:	9302      	str	r3, [sp, #8]
    hal_gpio_init_stm(cfg->suc_pin_tx, &gpio);
 800a130:	4669      	mov	r1, sp
 800a132:	f995 000c 	ldrsb.w	r0, [r5, #12]
 800a136:	f7ff f8d1 	bl	80092dc <hal_gpio_init_stm>
    if (flow_ctl == HAL_UART_FLOW_CTL_RTS_CTS) {
 800a13a:	f1ba 0f01 	cmp.w	sl, #1
 800a13e:	f000 80d9 	beq.w	800a2f4 <hal_uart_config+0x20c>
        hal_gpio_init_stm(cfg->suc_pin_rts, &gpio);
    }

    gpio.Mode = GPIO_MODE_AF_INPUT;
 800a142:	2300      	movs	r3, #0
 800a144:	9301      	str	r3, [sp, #4]
    hal_gpio_init_stm(cfg->suc_pin_rx, &gpio);
 800a146:	4669      	mov	r1, sp
 800a148:	f995 000d 	ldrsb.w	r0, [r5, #13]
 800a14c:	f7ff f8c6 	bl	80092dc <hal_gpio_init_stm>
    if (flow_ctl == HAL_UART_FLOW_CTL_RTS_CTS) {
 800a150:	f1ba 0f01 	cmp.w	sl, #1
 800a154:	f000 80d4 	beq.w	800a300 <hal_uart_config+0x218>
        hal_gpio_init_stm(cfg->suc_pin_cts, &gpio);
    }

    if (cfg->suc_pin_remap_fn) {
 800a158:	692b      	ldr	r3, [r5, #16]
 800a15a:	b103      	cbz	r3, 800a15e <hal_uart_config+0x76>
        cfg->suc_pin_remap_fn();
 800a15c:	4798      	blx	r3
     * pin config
     * UART config
     * nvic config
     * enable uart
     */
    cr1 = cfg->suc_uart->CR1;
 800a15e:	6829      	ldr	r1, [r5, #0]
 800a160:	68cb      	ldr	r3, [r1, #12]
    cr2 = cfg->suc_uart->CR2;
 800a162:	690a      	ldr	r2, [r1, #16]
    cr3 = cfg->suc_uart->CR3;
 800a164:	6949      	ldr	r1, [r1, #20]

    cr1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_RE);
 800a166:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a16a:	f023 0304 	bic.w	r3, r3, #4
#if !MYNEWT_VAL(MCU_STM32F1)
    cr1 &= ~(USART_CR1_OVER8);
#endif
    cr2 &= ~(USART_CR2_STOP);
 800a16e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    cr3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE);
 800a172:	f421 7140 	bic.w	r1, r1, #768	; 0x300

    switch (databits) {
 800a176:	f1b9 0f08 	cmp.w	r9, #8
 800a17a:	d005      	beq.n	800a188 <hal_uart_config+0xa0>
 800a17c:	f1b9 0f09 	cmp.w	r9, #9
 800a180:	f040 80c4 	bne.w	800a30c <hal_uart_config+0x224>
    case 8:
        cr1 |= UART_WORDLENGTH_8B;
        break;
    case 9:
        cr1 |= UART_WORDLENGTH_9B;
 800a184:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    default:
        assert(0);
        return -1;
    }

    switch (stopbits) {
 800a188:	2f01      	cmp	r7, #1
 800a18a:	d004      	beq.n	800a196 <hal_uart_config+0xae>
 800a18c:	2f02      	cmp	r7, #2
 800a18e:	f040 8129 	bne.w	800a3e4 <hal_uart_config+0x2fc>
    case 1:
        cr2 |= UART_STOPBITS_1;
        break;
    case 2:
        cr2 |= UART_STOPBITS_2;
 800a192:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
        break;
    default:
        return -1;
    }

    switch (parity) {
 800a196:	f1bb 0f01 	cmp.w	fp, #1
 800a19a:	f000 80bd 	beq.w	800a318 <hal_uart_config+0x230>
 800a19e:	f1bb 0f02 	cmp.w	fp, #2
 800a1a2:	f000 80bc 	beq.w	800a31e <hal_uart_config+0x236>
    case HAL_UART_PARITY_EVEN:
        cr1 |= UART_PARITY_EVEN;
        break;
    }

    switch (flow_ctl) {
 800a1a6:	f1ba 0f01 	cmp.w	sl, #1
 800a1aa:	d10b      	bne.n	800a1c4 <hal_uart_config+0xdc>
    case HAL_UART_FLOW_CTL_NONE:
        cr3 |= UART_HWCONTROL_NONE;
        break;
    case HAL_UART_FLOW_CTL_RTS_CTS:
        cr3 |= UART_HWCONTROL_RTS_CTS;
 800a1ac:	f441 7140 	orr.w	r1, r1, #768	; 0x300
        if (cfg->suc_pin_rts < 0 || cfg->suc_pin_cts < 0) {
 800a1b0:	f995 000e 	ldrsb.w	r0, [r5, #14]
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	f2c0 80b5 	blt.w	800a324 <hal_uart_config+0x23c>
 800a1ba:	f995 000f 	ldrsb.w	r0, [r5, #15]
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	f2c0 80b0 	blt.w	800a324 <hal_uart_config+0x23c>
    }

#if !MYNEWT_VAL(MCU_STM32F1)
    cr1 |= (UART_MODE_RX | UART_MODE_TX | UART_OVERSAMPLING_16);
#else
    cr1 |= (UART_MODE_TX_RX | UART_OVERSAMPLING_16);
 800a1c4:	f043 030c 	orr.w	r3, r3, #12
#endif

    *cfg->suc_rcc_reg |= cfg->suc_rcc_dev;
 800a1c8:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800a1cc:	f8dc 7000 	ldr.w	r7, [ip]
 800a1d0:	68a8      	ldr	r0, [r5, #8]
 800a1d2:	4338      	orrs	r0, r7
 800a1d4:	f8cc 0000 	str.w	r0, [ip]
        hal_gpio_init_af(cfg->suc_pin_rts, cfg->suc_pin_af, 0, 0);
        hal_gpio_init_af(cfg->suc_pin_cts, cfg->suc_pin_af, 0, 0);
    }
#endif

    u->u_regs = cfg->suc_uart;
 800a1d8:	f8d5 e000 	ldr.w	lr, [r5]
 800a1dc:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800a3ec <hal_uart_config+0x304>
 800a1e0:	00e7      	lsls	r7, r4, #3
 800a1e2:	1b3f      	subs	r7, r7, r4
 800a1e4:	00b8      	lsls	r0, r7, #2
 800a1e6:	f84c e000 	str.w	lr, [ip, r0]
    u->u_regs->CR3 = cr3;
 800a1ea:	f8ce 1014 	str.w	r1, [lr, #20]
    u->u_regs->CR2 = cr2;
 800a1ee:	f85c 1000 	ldr.w	r1, [ip, r0]
 800a1f2:	610a      	str	r2, [r1, #16]
    u->u_regs->CR1 = cr1;
 800a1f4:	f85c 2000 	ldr.w	r2, [ip, r0]
 800a1f8:	60d3      	str	r3, [r2, #12]
#ifdef USART6_BASE
    if (cfg->suc_uart == USART1 || cfg->suc_uart == USART6) {
#else
    if (cfg->suc_uart == USART1) {
 800a1fa:	682a      	ldr	r2, [r5, #0]
 800a1fc:	4b7c      	ldr	r3, [pc, #496]	; (800a3f0 <hal_uart_config+0x308>)
 800a1fe:	429a      	cmp	r2, r3
 800a200:	f000 8096 	beq.w	800a330 <hal_uart_config+0x248>
#else
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK2Freq(), baudrate);
#endif

    } else {
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
 800a204:	f001 fd2a 	bl	800bc5c <HAL_RCC_GetPCLK1Freq>
 800a208:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a20c:	eb00 0780 	add.w	r7, r0, r0, lsl #2
 800a210:	00b6      	lsls	r6, r6, #2
 800a212:	fbb7 f7f6 	udiv	r7, r7, r6
 800a216:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800a3f4 <hal_uart_config+0x30c>
 800a21a:	fbaa 3707 	umull	r3, r7, sl, r7
 800a21e:	097f      	lsrs	r7, r7, #5
 800a220:	013f      	lsls	r7, r7, #4
 800a222:	f001 fd1b 	bl	800bc5c <HAL_RCC_GetPCLK1Freq>
 800a226:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a22a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a22e:	fbb0 f9f6 	udiv	r9, r0, r6
 800a232:	f001 fd13 	bl	800bc5c <HAL_RCC_GetPCLK1Freq>
 800a236:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a23a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800a23e:	fbb3 f3f6 	udiv	r3, r3, r6
 800a242:	fbaa 2303 	umull	r2, r3, sl, r3
 800a246:	095b      	lsrs	r3, r3, #5
 800a248:	f04f 0b64 	mov.w	fp, #100	; 0x64
 800a24c:	fb0b 9313 	mls	r3, fp, r3, r9
 800a250:	011b      	lsls	r3, r3, #4
 800a252:	3332      	adds	r3, #50	; 0x32
 800a254:	fbaa 2303 	umull	r2, r3, sl, r3
 800a258:	095b      	lsrs	r3, r3, #5
 800a25a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a25e:	441f      	add	r7, r3
 800a260:	f001 fcfc 	bl	800bc5c <HAL_RCC_GetPCLK1Freq>
 800a264:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a268:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a26c:	fbb0 f9f6 	udiv	r9, r0, r6
 800a270:	f001 fcf4 	bl	800bc5c <HAL_RCC_GetPCLK1Freq>
 800a274:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a278:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a27c:	fbb0 f6f6 	udiv	r6, r0, r6
 800a280:	fbaa 3606 	umull	r3, r6, sl, r6
 800a284:	0976      	lsrs	r6, r6, #5
 800a286:	fb0b 9b16 	mls	fp, fp, r6, r9
 800a28a:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
 800a28e:	f10b 0b32 	add.w	fp, fp, #50	; 0x32
 800a292:	fbaa 3a0b 	umull	r3, sl, sl, fp
 800a296:	f3ca 1a43 	ubfx	sl, sl, #5, #4
 800a29a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800a29e:	0093      	lsls	r3, r2, #2
 800a2a0:	4a52      	ldr	r2, [pc, #328]	; (800a3ec <hal_uart_config+0x304>)
 800a2a2:	58d3      	ldr	r3, [r2, r3]
 800a2a4:	4457      	add	r7, sl
 800a2a6:	609f      	str	r7, [r3, #8]
    }

    (void)RXDR(u->u_regs);
 800a2a8:	4e50      	ldr	r6, [pc, #320]	; (800a3ec <hal_uart_config+0x304>)
 800a2aa:	00e7      	lsls	r7, r4, #3
 800a2ac:	1b3b      	subs	r3, r7, r4
 800a2ae:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800a2b2:	f856 3009 	ldr.w	r3, [r6, r9]
 800a2b6:	685a      	ldr	r2, [r3, #4]
    (void)STATUS(u->u_regs);
 800a2b8:	681b      	ldr	r3, [r3, #0]
    hal_uart_set_nvic(cfg->suc_irqn, u);
 800a2ba:	4641      	mov	r1, r8
 800a2bc:	f995 0014 	ldrsb.w	r0, [r5, #20]
 800a2c0:	f7ff fe4e 	bl	8009f60 <hal_uart_set_nvic>

    u->u_regs->CR1 |= (USART_CR1_RXNEIE | USART_CR1_UE);
 800a2c4:	f856 2009 	ldr.w	r2, [r6, r9]
 800a2c8:	68d3      	ldr	r3, [r2, #12]
 800a2ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a2ce:	f043 0320 	orr.w	r3, r3, #32
 800a2d2:	60d3      	str	r3, [r2, #12]
    u->u_open = 1;
 800a2d4:	464b      	mov	r3, r9
 800a2d6:	4433      	add	r3, r6
 800a2d8:	791a      	ldrb	r2, [r3, #4]
 800a2da:	f042 0201 	orr.w	r2, r2, #1
 800a2de:	711a      	strb	r2, [r3, #4]

    return 0;
 800a2e0:	2000      	movs	r0, #0
}
 800a2e2:	b005      	add	sp, #20
 800a2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(cfg);
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7f7 fa82 	bl	80017f8 <__assert_func>
        hal_gpio_init_stm(cfg->suc_pin_rts, &gpio);
 800a2f4:	4669      	mov	r1, sp
 800a2f6:	f995 000e 	ldrsb.w	r0, [r5, #14]
 800a2fa:	f7fe ffef 	bl	80092dc <hal_gpio_init_stm>
 800a2fe:	e720      	b.n	800a142 <hal_uart_config+0x5a>
        hal_gpio_init_stm(cfg->suc_pin_cts, &gpio);
 800a300:	4669      	mov	r1, sp
 800a302:	f995 000f 	ldrsb.w	r0, [r5, #15]
 800a306:	f7fe ffe9 	bl	80092dc <hal_gpio_init_stm>
 800a30a:	e725      	b.n	800a158 <hal_uart_config+0x70>
        assert(0);
 800a30c:	2300      	movs	r3, #0
 800a30e:	461a      	mov	r2, r3
 800a310:	4619      	mov	r1, r3
 800a312:	4618      	mov	r0, r3
 800a314:	f7f7 fa70 	bl	80017f8 <__assert_func>
        cr1 |= UART_PARITY_ODD;
 800a318:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
        break;
 800a31c:	e743      	b.n	800a1a6 <hal_uart_config+0xbe>
        cr1 |= UART_PARITY_EVEN;
 800a31e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
        break;
 800a322:	e740      	b.n	800a1a6 <hal_uart_config+0xbe>
            assert(0);
 800a324:	2300      	movs	r3, #0
 800a326:	461a      	mov	r2, r3
 800a328:	4619      	mov	r1, r3
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7f7 fa64 	bl	80017f8 <__assert_func>
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK2Freq(), baudrate);
 800a330:	f001 fca4 	bl	800bc7c <HAL_RCC_GetPCLK2Freq>
 800a334:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a338:	eb00 0780 	add.w	r7, r0, r0, lsl #2
 800a33c:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800a340:	fbb7 f7fa 	udiv	r7, r7, sl
 800a344:	4e2b      	ldr	r6, [pc, #172]	; (800a3f4 <hal_uart_config+0x30c>)
 800a346:	fba6 3707 	umull	r3, r7, r6, r7
 800a34a:	097f      	lsrs	r7, r7, #5
 800a34c:	013f      	lsls	r7, r7, #4
 800a34e:	f001 fc95 	bl	800bc7c <HAL_RCC_GetPCLK2Freq>
 800a352:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a356:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a35a:	fbb0 f9fa 	udiv	r9, r0, sl
 800a35e:	f001 fc8d 	bl	800bc7c <HAL_RCC_GetPCLK2Freq>
 800a362:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a366:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800a36a:	fbb3 f3fa 	udiv	r3, r3, sl
 800a36e:	fba6 2303 	umull	r2, r3, r6, r3
 800a372:	095b      	lsrs	r3, r3, #5
 800a374:	f04f 0b64 	mov.w	fp, #100	; 0x64
 800a378:	fb0b 9313 	mls	r3, fp, r3, r9
 800a37c:	011b      	lsls	r3, r3, #4
 800a37e:	3332      	adds	r3, #50	; 0x32
 800a380:	fba6 2303 	umull	r2, r3, r6, r3
 800a384:	095b      	lsrs	r3, r3, #5
 800a386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a38a:	441f      	add	r7, r3
 800a38c:	f001 fc76 	bl	800bc7c <HAL_RCC_GetPCLK2Freq>
 800a390:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a394:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a398:	fbb0 f9fa 	udiv	r9, r0, sl
 800a39c:	f001 fc6e 	bl	800bc7c <HAL_RCC_GetPCLK2Freq>
 800a3a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a3a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a3a8:	fbb0 fafa 	udiv	sl, r0, sl
 800a3ac:	fba6 3a0a 	umull	r3, sl, r6, sl
 800a3b0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800a3b4:	fb0b 991a 	mls	r9, fp, sl, r9
 800a3b8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800a3bc:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800a3c0:	fba6 3609 	umull	r3, r6, r6, r9
 800a3c4:	f3c6 1643 	ubfx	r6, r6, #5, #4
 800a3c8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 800a3cc:	0093      	lsls	r3, r2, #2
 800a3ce:	4a07      	ldr	r2, [pc, #28]	; (800a3ec <hal_uart_config+0x304>)
 800a3d0:	58d3      	ldr	r3, [r2, r3]
 800a3d2:	4437      	add	r7, r6
 800a3d4:	609f      	str	r7, [r3, #8]
 800a3d6:	e767      	b.n	800a2a8 <hal_uart_config+0x1c0>
        return -1;
 800a3d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3dc:	e781      	b.n	800a2e2 <hal_uart_config+0x1fa>
        return -1;
 800a3de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3e2:	e77e      	b.n	800a2e2 <hal_uart_config+0x1fa>
        return -1;
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3e8:	e77b      	b.n	800a2e2 <hal_uart_config+0x1fa>
 800a3ea:	bf00      	nop
 800a3ec:	20003478 	.word	0x20003478
 800a3f0:	40013800 	.word	0x40013800
 800a3f4:	51eb851f 	.word	0x51eb851f

0800a3f8 <hal_uart_init>:
int
hal_uart_init(int port, void *arg)
{
    struct hal_uart *u;

    if (port >= UART_CNT) {
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	dc07      	bgt.n	800a40c <hal_uart_init+0x14>
        return -1;
    }
    u = &uarts[port];
    u->u_cfg = (const struct stm32_uart_cfg *)arg;
 800a3fc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800a400:	0082      	lsls	r2, r0, #2
 800a402:	4b04      	ldr	r3, [pc, #16]	; (800a414 <hal_uart_init+0x1c>)
 800a404:	4413      	add	r3, r2
 800a406:	6199      	str	r1, [r3, #24]

    return 0;
 800a408:	2000      	movs	r0, #0
 800a40a:	4770      	bx	lr
        return -1;
 800a40c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	20003478 	.word	0x20003478

0800a418 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct hal_uart *u;

    if (port >= UART_CNT) {
 800a418:	2800      	cmp	r0, #0
 800a41a:	dc10      	bgt.n	800a43e <hal_uart_close+0x26>
{
 800a41c:	b410      	push	{r4}
        return -1;
    }
    u = &uarts[port];

    u->u_open = 0;
 800a41e:	4909      	ldr	r1, [pc, #36]	; (800a444 <hal_uart_close+0x2c>)
 800a420:	00c3      	lsls	r3, r0, #3
 800a422:	1a1c      	subs	r4, r3, r0
 800a424:	00a2      	lsls	r2, r4, #2
 800a426:	440a      	add	r2, r1
 800a428:	7914      	ldrb	r4, [r2, #4]
 800a42a:	f36f 0400 	bfc	r4, #0, #1
 800a42e:	7114      	strb	r4, [r2, #4]
    u->u_regs->CR1 = 0;
 800a430:	1a18      	subs	r0, r3, r0
 800a432:	0083      	lsls	r3, r0, #2
 800a434:	58cb      	ldr	r3, [r1, r3]
 800a436:	2000      	movs	r0, #0
 800a438:	60d8      	str	r0, [r3, #12]

    return 0;
}
 800a43a:	bc10      	pop	{r4}
 800a43c:	4770      	bx	lr
        return -1;
 800a43e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a442:	4770      	bx	lr
 800a444:	20003478 	.word	0x20003478

0800a448 <hal_watchdog_init>:
{
    uint32_t reload;

    /* Max prescaler is 256 */
    reload = 32768 / 256;
    reload = (reload * expire_msecs) / 1000;
 800a448:	01c0      	lsls	r0, r0, #7
 800a44a:	4b09      	ldr	r3, [pc, #36]	; (800a470 <hal_watchdog_init+0x28>)
 800a44c:	fba3 3000 	umull	r3, r0, r3, r0
 800a450:	0980      	lsrs	r0, r0, #6

    /* Check to make sure we are not trying a reload value that is too large */
    if (reload > IWDG_RLR_RL) {
 800a452:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800a456:	d207      	bcs.n	800a468 <hal_watchdog_init+0x20>
        return -1;
    }

    g_wdt_cfg.Instance = IWDG;
 800a458:	4b06      	ldr	r3, [pc, #24]	; (800a474 <hal_watchdog_init+0x2c>)
 800a45a:	4a07      	ldr	r2, [pc, #28]	; (800a478 <hal_watchdog_init+0x30>)
 800a45c:	601a      	str	r2, [r3, #0]
    g_wdt_cfg.Init.Prescaler = IWDG_PRESCALER_256;
 800a45e:	2206      	movs	r2, #6
 800a460:	605a      	str	r2, [r3, #4]
    g_wdt_cfg.Init.Reload = reload;
 800a462:	6098      	str	r0, [r3, #8]
    STM32_HAL_WATCHDOG_CUSTOM_INIT(&g_wdt_cfg);

    return 0;
 800a464:	2000      	movs	r0, #0
 800a466:	4770      	bx	lr
        return -1;
 800a468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	10624dd3 	.word	0x10624dd3
 800a474:	2000365c 	.word	0x2000365c
 800a478:	40003000 	.word	0x40003000

0800a47c <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
 800a47c:	b508      	push	{r3, lr}
    __HAL_DBGMCU_FREEZE_IWDG();
 800a47e:	4a04      	ldr	r2, [pc, #16]	; (800a490 <hal_watchdog_enable+0x14>)
 800a480:	6853      	ldr	r3, [r2, #4]
 800a482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a486:	6053      	str	r3, [r2, #4]
    HAL_IWDG_Init(&g_wdt_cfg);
 800a488:	4802      	ldr	r0, [pc, #8]	; (800a494 <hal_watchdog_enable+0x18>)
 800a48a:	f001 f8be 	bl	800b60a <HAL_IWDG_Init>
}
 800a48e:	bd08      	pop	{r3, pc}
 800a490:	e0042000 	.word	0xe0042000
 800a494:	2000365c 	.word	0x2000365c

0800a498 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
 800a498:	b508      	push	{r3, lr}
    HAL_IWDG_Refresh(&g_wdt_cfg);
 800a49a:	4802      	ldr	r0, [pc, #8]	; (800a4a4 <hal_watchdog_tickle+0xc>)
 800a49c:	f001 f8da 	bl	800b654 <HAL_IWDG_Refresh>
}
 800a4a0:	bd08      	pop	{r3, pc}
 800a4a2:	bf00      	nop
 800a4a4:	2000365c 	.word	0x2000365c

0800a4a8 <_sbrk>:
{
    static char *brk = &__HeapBase;

    void *prev_brk;

    if (incr < 0) {
 800a4a8:	1e03      	subs	r3, r0, #0
 800a4aa:	db09      	blt.n	800a4c0 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (&__HeapLimit - brk >= incr) {
 800a4ac:	4a0c      	ldr	r2, [pc, #48]	; (800a4e0 <_sbrk+0x38>)
 800a4ae:	6810      	ldr	r0, [r2, #0]
 800a4b0:	4a0c      	ldr	r2, [pc, #48]	; (800a4e4 <_sbrk+0x3c>)
 800a4b2:	1a12      	subs	r2, r2, r0
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	db0f      	blt.n	800a4d8 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
 800a4b8:	4403      	add	r3, r0
 800a4ba:	4a09      	ldr	r2, [pc, #36]	; (800a4e0 <_sbrk+0x38>)
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	4770      	bx	lr
        if (brk - incr < &__HeapBase) {
 800a4c0:	4a07      	ldr	r2, [pc, #28]	; (800a4e0 <_sbrk+0x38>)
 800a4c2:	6810      	ldr	r0, [r2, #0]
 800a4c4:	4403      	add	r3, r0
 800a4c6:	4a08      	ldr	r2, [pc, #32]	; (800a4e8 <_sbrk+0x40>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d302      	bcc.n	800a4d2 <_sbrk+0x2a>
            brk -= incr;
 800a4cc:	4a04      	ldr	r2, [pc, #16]	; (800a4e0 <_sbrk+0x38>)
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	4770      	bx	lr
            prev_brk = (void *)-1;
 800a4d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4d6:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
 800a4d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }

    return prev_brk;
}
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	200001f0 	.word	0x200001f0
 800a4e4:	20005000 	.word	0x20005000
 800a4e8:	20003688 	.word	0x20003688

0800a4ec <SPI_WaitFlagStateUntilTimeout>:
}
#endif

static HAL_StatusTypeDef
SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800a4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	460f      	mov	r7, r1
 800a4f2:	4616      	mov	r6, r2
 800a4f4:	461c      	mov	r4, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State) {
 800a4f6:	e019      	b.n	800a52c <SPI_WaitFlagStateUntilTimeout+0x40>
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800a4f8:	b12c      	cbz	r4, 800a506 <SPI_WaitFlagStateUntilTimeout+0x1a>
 800a4fa:	f7ff fb25 	bl	8009b48 <HAL_GetTick>
 800a4fe:	9b06      	ldr	r3, [sp, #24]
 800a500:	1ac0      	subs	r0, r0, r3
 800a502:	42a0      	cmp	r0, r4
 800a504:	d312      	bcc.n	800a52c <SPI_WaitFlagStateUntilTimeout+0x40>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a506:	682a      	ldr	r2, [r5, #0]
 800a508:	6853      	ldr	r3, [r2, #4]
 800a50a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800a50e:	6053      	str	r3, [r2, #4]

        hspi->State= HAL_SPI_STATE_READY;
 800a510:	2301      	movs	r3, #1
 800a512:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a516:	2300      	movs	r3, #0
 800a518:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 800a51c:	2003      	movs	r0, #3
 800a51e:	e00d      	b.n	800a53c <SPI_WaitFlagStateUntilTimeout+0x50>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State) {
 800a520:	2301      	movs	r3, #1
 800a522:	42b3      	cmp	r3, r6
 800a524:	d009      	beq.n	800a53a <SPI_WaitFlagStateUntilTimeout+0x4e>
    if(Timeout != HAL_MAX_DELAY)
 800a526:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800a52a:	d1e5      	bne.n	800a4f8 <SPI_WaitFlagStateUntilTimeout+0xc>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State) {
 800a52c:	682b      	ldr	r3, [r5, #0]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	ea37 0303 	bics.w	r3, r7, r3
 800a534:	d0f4      	beq.n	800a520 <SPI_WaitFlagStateUntilTimeout+0x34>
 800a536:	2300      	movs	r3, #0
 800a538:	e7f3      	b.n	800a522 <SPI_WaitFlagStateUntilTimeout+0x36>
      }
    }
  }

  return HAL_OK;
 800a53a:	2000      	movs	r0, #0
}
 800a53c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a53e <SPI_CheckFlag_BSY>:

#if !SPI_HAS_FIFO
static HAL_StatusTypeDef
SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a53e:	b510      	push	{r4, lr}
 800a540:	b082      	sub	sp, #8
 800a542:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK) {
 800a544:	9200      	str	r2, [sp, #0]
 800a546:	460b      	mov	r3, r1
 800a548:	2200      	movs	r2, #0
 800a54a:	2180      	movs	r1, #128	; 0x80
 800a54c:	f7ff ffce 	bl	800a4ec <SPI_WaitFlagStateUntilTimeout>
 800a550:	4603      	mov	r3, r0
 800a552:	b910      	cbnz	r0, 800a55a <SPI_CheckFlag_BSY+0x1c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800a554:	4618      	mov	r0, r3
 800a556:	b002      	add	sp, #8
 800a558:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a55a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a55c:	f043 0320 	orr.w	r3, r3, #32
 800a560:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	e7f6      	b.n	800a554 <SPI_CheckFlag_BSY+0x16>
	...

0800a568 <SPI_CloseTx_ISR>:
  return HAL_OK;
}
#endif

static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a568:	b510      	push	{r4, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a56e:	4b20      	ldr	r3, [pc, #128]	; (800a5f0 <SPI_CloseTx_ISR+0x88>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a20      	ldr	r2, [pc, #128]	; (800a5f4 <SPI_CloseTx_ISR+0x8c>)
 800a574:	fba2 2303 	umull	r2, r3, r2, r3
 800a578:	0a5b      	lsrs	r3, r3, #9
 800a57a:	2264      	movs	r2, #100	; 0x64
 800a57c:	fb02 f303 	mul.w	r3, r2, r3
 800a580:	9301      	str	r3, [sp, #4]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a582:	f7ff fae1 	bl	8009b48 <HAL_GetTick>
 800a586:	4602      	mov	r2, r0
  (void)count;
 800a588:	9b01      	ldr	r3, [sp, #4]

#if !SPI_HAS_FIFO
  /* Wait until TXE flag is set */
  do
  {
    if(count-- == 0U)
 800a58a:	9b01      	ldr	r3, [sp, #4]
 800a58c:	1e59      	subs	r1, r3, #1
 800a58e:	9101      	str	r1, [sp, #4]
 800a590:	b12b      	cbz	r3, 800a59e <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      break;
    }
  }
  while((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f013 0f02 	tst.w	r3, #2
 800a59a:	d0f6      	beq.n	800a58a <SPI_CloseTx_ISR+0x22>
 800a59c:	e003      	b.n	800a5a6 <SPI_CloseTx_ISR+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a59e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a5a0:	f043 0320 	orr.w	r3, r3, #32
 800a5a4:	6563      	str	r3, [r4, #84]	; 0x54
#endif

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a5a6:	6821      	ldr	r1, [r4, #0]
 800a5a8:	684b      	ldr	r3, [r1, #4]
 800a5aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5ae:	604b      	str	r3, [r1, #4]
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
  }
#else
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a5b0:	2164      	movs	r1, #100	; 0x64
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f7ff ffc3 	bl	800a53e <SPI_CheckFlag_BSY>
 800a5b8:	b118      	cbz	r0, 800a5c2 <SPI_CloseTx_ISR+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a5bc:	f043 0320 	orr.w	r3, r3, #32
 800a5c0:	6563      	str	r3, [r4, #84]	; 0x54
  }
#endif

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	68da      	ldr	r2, [r3, #12]
 800a5ca:	9200      	str	r2, [sp, #0]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	9b00      	ldr	r3, [sp, #0]

  hspi->State = HAL_SPI_STATE_READY;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a5da:	b923      	cbnz	r3, 800a5e6 <SPI_CloseTx_ISR+0x7e>
  {
    HAL_SPI_ErrorCallback(hspi);
  }
  else
  {
    HAL_SPI_TxCpltCallback(hspi);
 800a5dc:	4620      	mov	r0, r4
 800a5de:	f001 fdb5 	bl	800c14c <HAL_SPI_TxCpltCallback>
  }
}
 800a5e2:	b002      	add	sp, #8
 800a5e4:	bd10      	pop	{r4, pc}
    HAL_SPI_ErrorCallback(hspi);
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f001 fdb1 	bl	800c14e <HAL_SPI_ErrorCallback>
 800a5ec:	e7f9      	b.n	800a5e2 <SPI_CloseTx_ISR+0x7a>
 800a5ee:	bf00      	nop
 800a5f0:	2000010c 	.word	0x2000010c
 800a5f4:	057619f1 	.word	0x057619f1

0800a5f8 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a5f8:	b508      	push	{r3, lr}
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
    hspi->pTxBuffPtr += sizeof(uint16_t);
    hspi->TxXferCount -= 2U;
  } else {
#endif
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800a5fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	6302      	str	r2, [r0, #48]	; 0x30
 800a600:	6802      	ldr	r2, [r0, #0]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	7313      	strb	r3, [r2, #12]
    hspi->TxXferCount--;
 800a606:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800a608:	3b01      	subs	r3, #1
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	86c3      	strh	r3, [r0, #54]	; 0x36
#if SPI_HAS_FIFO
  }
#endif

  if(hspi->TxXferCount == 0U)
 800a60e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800a610:	b29b      	uxth	r3, r3
 800a612:	b103      	cbz	r3, 800a616 <SPI_TxISR_8BIT+0x1e>
  {
    SPI_CloseTx_ISR(hspi);
  }
}
 800a614:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 800a616:	f7ff ffa7 	bl	800a568 <SPI_CloseTx_ISR>
}
 800a61a:	e7fb      	b.n	800a614 <SPI_TxISR_8BIT+0x1c>

0800a61c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a61c:	b508      	push	{r3, lr}
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a61e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800a620:	6803      	ldr	r3, [r0, #0]
 800a622:	8812      	ldrh	r2, [r2, #0]
 800a624:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a626:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a628:	3302      	adds	r3, #2
 800a62a:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 800a62c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800a62e:	3b01      	subs	r3, #1
 800a630:	b29b      	uxth	r3, r3
 800a632:	86c3      	strh	r3, [r0, #54]	; 0x36

  if(hspi->TxXferCount == 0U)
 800a634:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800a636:	b29b      	uxth	r3, r3
 800a638:	b103      	cbz	r3, 800a63c <SPI_TxISR_16BIT+0x20>
  {
    SPI_CloseTx_ISR(hspi);
  }
}
 800a63a:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 800a63c:	f7ff ff94 	bl	800a568 <SPI_CloseTx_ISR>
}
 800a640:	e7fb      	b.n	800a63a <SPI_TxISR_16BIT+0x1e>
	...

0800a644 <HAL_SPI_QueueTransmit>:

HAL_StatusTypeDef HAL_SPI_QueueTransmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
  HAL_StatusTypeDef errorcode = HAL_OK;

  if((pData == NULL) || (Size == 0))
 800a644:	b311      	cbz	r1, 800a68c <HAL_SPI_QueueTransmit+0x48>
{
 800a646:	b510      	push	{r4, lr}
  if((pData == NULL) || (Size == 0))
 800a648:	b312      	cbz	r2, 800a690 <HAL_SPI_QueueTransmit+0x4c>
  {
    errorcode = HAL_ERROR;
    goto error;
  }

  if(hspi->State != HAL_SPI_STATE_READY)
 800a64a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b01      	cmp	r3, #1
 800a652:	d11f      	bne.n	800a694 <HAL_SPI_QueueTransmit+0x50>
    errorcode = HAL_BUSY;
    goto error;
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a654:	2303      	movs	r3, #3
 800a656:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a65a:	2300      	movs	r3, #0
 800a65c:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a65e:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a660:	8682      	strh	r2, [r0, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a662:	86c2      	strh	r2, [r0, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a664:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a666:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a668:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800a66a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the function for IT treatment */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT )
 800a66c:	68c3      	ldr	r3, [r0, #12]
 800a66e:	b153      	cbz	r3, 800a686 <HAL_SPI_QueueTransmit+0x42>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800a670:	4b0a      	ldr	r3, [pc, #40]	; (800a69c <HAL_SPI_QueueTransmit+0x58>)
 800a672:	6443      	str	r3, [r0, #68]	; 0x44
  /* Enable TXE interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
#endif

  /* MYNEWT: in slave mode write 1st byte to DR */
  if ((hspi->Instance->CR1 & SPI_CR1_MSTR) == 0) {
 800a674:	6803      	ldr	r3, [r0, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f013 0f04 	tst.w	r3, #4
 800a67c:	d10c      	bne.n	800a698 <HAL_SPI_QueueTransmit+0x54>
      hspi->TxISR(hspi);
 800a67e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a680:	4798      	blx	r3
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a682:	2000      	movs	r0, #0
 800a684:	e005      	b.n	800a692 <HAL_SPI_QueueTransmit+0x4e>
    hspi->TxISR = SPI_TxISR_8BIT;
 800a686:	4b06      	ldr	r3, [pc, #24]	; (800a6a0 <HAL_SPI_QueueTransmit+0x5c>)
 800a688:	6443      	str	r3, [r0, #68]	; 0x44
 800a68a:	e7f3      	b.n	800a674 <HAL_SPI_QueueTransmit+0x30>
    errorcode = HAL_ERROR;
 800a68c:	2001      	movs	r0, #1
  }
#endif

error :
  return errorcode;
}
 800a68e:	4770      	bx	lr
    errorcode = HAL_ERROR;
 800a690:	2001      	movs	r0, #1
}
 800a692:	bd10      	pop	{r4, pc}
    errorcode = HAL_BUSY;
 800a694:	2002      	movs	r0, #2
 800a696:	e7fc      	b.n	800a692 <HAL_SPI_QueueTransmit+0x4e>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a698:	2000      	movs	r0, #0
 800a69a:	e7fa      	b.n	800a692 <HAL_SPI_QueueTransmit+0x4e>
 800a69c:	0800a61d 	.word	0x0800a61d
 800a6a0:	0800a5f9 	.word	0x0800a5f9

0800a6a4 <HAL_SPI_Transmit_IT_Custom>:
  __HAL_LOCK(hspi);
 800a6a4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d01b      	beq.n	800a6e4 <HAL_SPI_Transmit_IT_Custom+0x40>
{
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  errorcode = HAL_SPI_QueueTransmit(hspi, pData, Size);
 800a6b6:	f7ff ffc5 	bl	800a644 <HAL_SPI_QueueTransmit>
  if (errorcode) {
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	b968      	cbnz	r0, 800a6da <HAL_SPI_Transmit_IT_Custom+0x36>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE));
 800a6be:	6821      	ldr	r1, [r4, #0]
 800a6c0:	684a      	ldr	r2, [r1, #4]
 800a6c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a6c6:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE) {
 800a6c8:	6822      	ldr	r2, [r4, #0]
 800a6ca:	6811      	ldr	r1, [r2, #0]
 800a6cc:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a6d0:	d103      	bne.n	800a6da <HAL_SPI_Transmit_IT_Custom+0x36>
    __HAL_SPI_ENABLE(hspi);
 800a6d2:	6811      	ldr	r1, [r2, #0]
 800a6d4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800a6d8:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hspi);
 800a6e4:	2302      	movs	r3, #2
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	4770      	bx	lr

0800a6ea <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return STM32_HW_ID_LEN;
}
 800a6ea:	200c      	movs	r0, #12
 800a6ec:	4770      	bx	lr
	...

0800a6f0 <hal_bsp_hw_id>:

int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
 800a6f0:	b510      	push	{r4, lr}
    int cnt;

    cnt = min(STM32_HW_ID_LEN, max_len);
 800a6f2:	290c      	cmp	r1, #12
 800a6f4:	bfa8      	it	ge
 800a6f6:	210c      	movge	r1, #12
 800a6f8:	460c      	mov	r4, r1
    memcpy(id, (void *)UID_BASE, cnt);
 800a6fa:	460a      	mov	r2, r1
 800a6fc:	4902      	ldr	r1, [pc, #8]	; (800a708 <hal_bsp_hw_id+0x18>)
 800a6fe:	f7f8 fcdf 	bl	80030c0 <memcpy>

    return cnt;
}
 800a702:	4620      	mov	r0, r4
 800a704:	bd10      	pop	{r4, pc}
 800a706:	bf00      	nop
 800a708:	1ffff7e8 	.word	0x1ffff7e8

0800a70c <HAL_ADC_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 800a70c:	4770      	bx	lr
	...

0800a710 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800a710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a712:	b083      	sub	sp, #12
 800a714:	4605      	mov	r5, r0
 800a716:	460c      	mov	r4, r1
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800a718:	2300      	movs	r3, #0
 800a71a:	9301      	str	r3, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800a71c:	f7ff fa14 	bl	8009b48 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	689a      	ldr	r2, [r3, #8]
 800a724:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a728:	d123      	bne.n	800a772 <HAL_ADC_PollForConversion+0x62>
 800a72a:	4606      	mov	r6, r0
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a732:	d103      	bne.n	800a73c <HAL_ADC_PollForConversion+0x2c>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800a734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800a736:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800a73a:	d024      	beq.n	800a786 <HAL_ADC_PollForConversion+0x76>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800a73c:	4b4b      	ldr	r3, [pc, #300]	; (800a86c <HAL_ADC_PollForConversion+0x15c>)
 800a73e:	681f      	ldr	r7, [r3, #0]
 800a740:	2002      	movs	r0, #2
 800a742:	f001 fac9 	bl	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a746:	fbb7 f0f0 	udiv	r0, r7, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800a74a:	682b      	ldr	r3, [r5, #0]
 800a74c:	6919      	ldr	r1, [r3, #16]
 800a74e:	4a48      	ldr	r2, [pc, #288]	; (800a870 <HAL_ADC_PollForConversion+0x160>)
 800a750:	4211      	tst	r1, r2
 800a752:	d12f      	bne.n	800a7b4 <HAL_ADC_PollForConversion+0xa4>
 800a754:	68d9      	ldr	r1, [r3, #12]
 800a756:	f102 425c 	add.w	r2, r2, #3690987520	; 0xdc000000
 800a75a:	4211      	tst	r1, r2
 800a75c:	d12a      	bne.n	800a7b4 <HAL_ADC_PollForConversion+0xa4>
 800a75e:	6919      	ldr	r1, [r3, #16]
 800a760:	4a44      	ldr	r2, [pc, #272]	; (800a874 <HAL_ADC_PollForConversion+0x164>)
 800a762:	4211      	tst	r1, r2
 800a764:	d139      	bne.n	800a7da <HAL_ADC_PollForConversion+0xca>
 800a766:	68da      	ldr	r2, [r3, #12]
 800a768:	4b43      	ldr	r3, [pc, #268]	; (800a878 <HAL_ADC_PollForConversion+0x168>)
 800a76a:	421a      	tst	r2, r3
 800a76c:	d037      	beq.n	800a7de <HAL_ADC_PollForConversion+0xce>
 800a76e:	2729      	movs	r7, #41	; 0x29
 800a770:	e03a      	b.n	800a7e8 <HAL_ADC_PollForConversion+0xd8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a772:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a774:	f043 0320 	orr.w	r3, r3, #32
 800a778:	62ab      	str	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800a77a:	2300      	movs	r3, #0
 800a77c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    return HAL_ERROR;
 800a780:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 800a782:	b003      	add	sp, #12
 800a784:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800a786:	682b      	ldr	r3, [r5, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f013 0f02 	tst.w	r3, #2
 800a78e:	d148      	bne.n	800a822 <HAL_ADC_PollForConversion+0x112>
      if(Timeout != HAL_MAX_DELAY)
 800a790:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800a794:	d0f7      	beq.n	800a786 <HAL_ADC_PollForConversion+0x76>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800a796:	b124      	cbz	r4, 800a7a2 <HAL_ADC_PollForConversion+0x92>
 800a798:	f7ff f9d6 	bl	8009b48 <HAL_GetTick>
 800a79c:	1b80      	subs	r0, r0, r6
 800a79e:	42a0      	cmp	r0, r4
 800a7a0:	d9f1      	bls.n	800a786 <HAL_ADC_PollForConversion+0x76>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a7a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a7a4:	f043 0304 	orr.w	r3, r3, #4
 800a7a8:	62ab      	str	r3, [r5, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
          return HAL_TIMEOUT;
 800a7b0:	2003      	movs	r0, #3
 800a7b2:	e7e6      	b.n	800a782 <HAL_ADC_PollForConversion+0x72>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800a7b4:	6919      	ldr	r1, [r3, #16]
 800a7b6:	4a2f      	ldr	r2, [pc, #188]	; (800a874 <HAL_ADC_PollForConversion+0x164>)
 800a7b8:	4211      	tst	r1, r2
 800a7ba:	d104      	bne.n	800a7c6 <HAL_ADC_PollForConversion+0xb6>
 800a7bc:	68d9      	ldr	r1, [r3, #12]
 800a7be:	f102 426e 	add.w	r2, r2, #3992977408	; 0xee000000
 800a7c2:	4211      	tst	r1, r2
 800a7c4:	d00d      	beq.n	800a7e2 <HAL_ADC_PollForConversion+0xd2>
 800a7c6:	6919      	ldr	r1, [r3, #16]
 800a7c8:	4a2c      	ldr	r2, [pc, #176]	; (800a87c <HAL_ADC_PollForConversion+0x16c>)
 800a7ca:	400a      	ands	r2, r1
 800a7cc:	b95a      	cbnz	r2, 800a7e6 <HAL_ADC_PollForConversion+0xd6>
 800a7ce:	68da      	ldr	r2, [r3, #12]
 800a7d0:	4b2a      	ldr	r3, [pc, #168]	; (800a87c <HAL_ADC_PollForConversion+0x16c>)
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	b15b      	cbz	r3, 800a7ee <HAL_ADC_PollForConversion+0xde>
 800a7d6:	27fc      	movs	r7, #252	; 0xfc
 800a7d8:	e006      	b.n	800a7e8 <HAL_ADC_PollForConversion+0xd8>
 800a7da:	2729      	movs	r7, #41	; 0x29
 800a7dc:	e004      	b.n	800a7e8 <HAL_ADC_PollForConversion+0xd8>
 800a7de:	2714      	movs	r7, #20
 800a7e0:	e002      	b.n	800a7e8 <HAL_ADC_PollForConversion+0xd8>
 800a7e2:	2754      	movs	r7, #84	; 0x54
 800a7e4:	e000      	b.n	800a7e8 <HAL_ADC_PollForConversion+0xd8>
 800a7e6:	27fc      	movs	r7, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800a7e8:	fb07 f700 	mul.w	r7, r7, r0
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800a7ec:	e004      	b.n	800a7f8 <HAL_ADC_PollForConversion+0xe8>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800a7ee:	2754      	movs	r7, #84	; 0x54
 800a7f0:	e7fa      	b.n	800a7e8 <HAL_ADC_PollForConversion+0xd8>
      Conversion_Timeout_CPU_cycles ++;
 800a7f2:	9b01      	ldr	r3, [sp, #4]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800a7f8:	9b01      	ldr	r3, [sp, #4]
 800a7fa:	42bb      	cmp	r3, r7
 800a7fc:	d211      	bcs.n	800a822 <HAL_ADC_PollForConversion+0x112>
      if(Timeout != HAL_MAX_DELAY)
 800a7fe:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800a802:	d0f6      	beq.n	800a7f2 <HAL_ADC_PollForConversion+0xe2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a804:	b124      	cbz	r4, 800a810 <HAL_ADC_PollForConversion+0x100>
 800a806:	f7ff f99f 	bl	8009b48 <HAL_GetTick>
 800a80a:	1b80      	subs	r0, r0, r6
 800a80c:	42a0      	cmp	r0, r4
 800a80e:	d9f0      	bls.n	800a7f2 <HAL_ADC_PollForConversion+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a810:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a812:	f043 0304 	orr.w	r3, r3, #4
 800a816:	62ab      	str	r3, [r5, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800a818:	2300      	movs	r3, #0
 800a81a:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
          return HAL_TIMEOUT;
 800a81e:	2003      	movs	r0, #3
 800a820:	e7af      	b.n	800a782 <HAL_ADC_PollForConversion+0x72>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800a822:	682b      	ldr	r3, [r5, #0]
 800a824:	f06f 0212 	mvn.w	r2, #18
 800a828:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a82a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a82c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a830:	62ab      	str	r3, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800a832:	682b      	ldr	r3, [r5, #0]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800a83a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800a83e:	d001      	beq.n	800a844 <HAL_ADC_PollForConversion+0x134>
  return HAL_OK;
 800a840:	2000      	movs	r0, #0
 800a842:	e79e      	b.n	800a782 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800a844:	68eb      	ldr	r3, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800a846:	b96b      	cbnz	r3, 800a864 <HAL_ADC_PollForConversion+0x154>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a848:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a84a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a84e:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a850:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a852:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800a856:	d107      	bne.n	800a868 <HAL_ADC_PollForConversion+0x158>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a858:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a85a:	f043 0301 	orr.w	r3, r3, #1
 800a85e:	62ab      	str	r3, [r5, #40]	; 0x28
  return HAL_OK;
 800a860:	2000      	movs	r0, #0
 800a862:	e78e      	b.n	800a782 <HAL_ADC_PollForConversion+0x72>
 800a864:	2000      	movs	r0, #0
 800a866:	e78c      	b.n	800a782 <HAL_ADC_PollForConversion+0x72>
 800a868:	2000      	movs	r0, #0
 800a86a:	e78a      	b.n	800a782 <HAL_ADC_PollForConversion+0x72>
 800a86c:	2000010c 	.word	0x2000010c
 800a870:	24924924 	.word	0x24924924
 800a874:	12492492 	.word	0x12492492
 800a878:	00492492 	.word	0x00492492
 800a87c:	00249249 	.word	0x00249249

0800a880 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800a880:	6803      	ldr	r3, [r0, #0]
 800a882:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800a884:	4770      	bx	lr

0800a886 <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a886:	4770      	bx	lr

0800a888 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a888:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a88a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a88c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a88e:	f012 0f50 	tst.w	r2, #80	; 0x50
 800a892:	d003      	beq.n	800a89c <ADC_DMAConvCplt+0x14>
    HAL_ADC_ConvCpltCallback(hadc); 
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a898:	4798      	blx	r3
  }
}
 800a89a:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a89c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a89e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8a2:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	6892      	ldr	r2, [r2, #8]
 800a8a8:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800a8ac:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800a8b0:	d003      	beq.n	800a8ba <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc); 
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff ffe7 	bl	800a886 <HAL_ADC_ConvCpltCallback>
 800a8b8:	e7ef      	b.n	800a89a <ADC_DMAConvCplt+0x12>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800a8ba:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800a8bc:	2a00      	cmp	r2, #0
 800a8be:	d1f8      	bne.n	800a8b2 <ADC_DMAConvCplt+0x2a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a8c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a8c6:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a8c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8ca:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800a8ce:	d1f0      	bne.n	800a8b2 <ADC_DMAConvCplt+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a8d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8d2:	f042 0201 	orr.w	r2, r2, #1
 800a8d6:	629a      	str	r2, [r3, #40]	; 0x28
 800a8d8:	e7eb      	b.n	800a8b2 <ADC_DMAConvCplt+0x2a>

0800a8da <HAL_ADC_ConvHalfCpltCallback>:
}
 800a8da:	4770      	bx	lr

0800a8dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a8dc:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800a8de:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a8e0:	f7ff fffb 	bl	800a8da <HAL_ADC_ConvHalfCpltCallback>
}
 800a8e4:	bd08      	pop	{r3, pc}

0800a8e6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a8e6:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a8e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a8ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a8ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8f0:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a8f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a8f4:	f043 0304 	orr.w	r3, r3, #4
 800a8f8:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800a8fa:	f7f8 fdf7 	bl	80034ec <HAL_ADC_ErrorCallback>
}
 800a8fe:	bd08      	pop	{r3, pc}

0800a900 <HAL_ADC_ConfigChannel>:
{ 
 800a900:	b430      	push	{r4, r5}
 800a902:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 800a904:	2300      	movs	r3, #0
 800a906:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800a908:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	f000 808b 	beq.w	800aa28 <HAL_ADC_ConfigChannel+0x128>
 800a912:	4602      	mov	r2, r0
 800a914:	2301      	movs	r3, #1
 800a916:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800a91a:	684b      	ldr	r3, [r1, #4]
 800a91c:	2b06      	cmp	r3, #6
 800a91e:	d829      	bhi.n	800a974 <HAL_ADC_ConfigChannel+0x74>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800a920:	6805      	ldr	r5, [r0, #0]
 800a922:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800a924:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a928:	3b05      	subs	r3, #5
 800a92a:	241f      	movs	r4, #31
 800a92c:	409c      	lsls	r4, r3
 800a92e:	ea20 0004 	bic.w	r0, r0, r4
 800a932:	680c      	ldr	r4, [r1, #0]
 800a934:	fa04 f303 	lsl.w	r3, r4, r3
 800a938:	4303      	orrs	r3, r0
 800a93a:	636b      	str	r3, [r5, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800a93c:	680b      	ldr	r3, [r1, #0]
 800a93e:	2b09      	cmp	r3, #9
 800a940:	d938      	bls.n	800a9b4 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800a942:	6815      	ldr	r5, [r2, #0]
 800a944:	68e8      	ldr	r0, [r5, #12]
 800a946:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a94a:	3b1e      	subs	r3, #30
 800a94c:	2407      	movs	r4, #7
 800a94e:	409c      	lsls	r4, r3
 800a950:	ea20 0004 	bic.w	r0, r0, r4
 800a954:	688c      	ldr	r4, [r1, #8]
 800a956:	fa04 f303 	lsl.w	r3, r4, r3
 800a95a:	4303      	orrs	r3, r0
 800a95c:	60eb      	str	r3, [r5, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800a95e:	680b      	ldr	r3, [r1, #0]
 800a960:	3b10      	subs	r3, #16
 800a962:	2b01      	cmp	r3, #1
 800a964:	d934      	bls.n	800a9d0 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a966:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800a968:	2300      	movs	r3, #0
 800a96a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 800a96e:	b002      	add	sp, #8
 800a970:	bc30      	pop	{r4, r5}
 800a972:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 800a974:	2b0c      	cmp	r3, #12
 800a976:	d80e      	bhi.n	800a996 <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800a978:	6805      	ldr	r5, [r0, #0]
 800a97a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800a97c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a980:	3b23      	subs	r3, #35	; 0x23
 800a982:	241f      	movs	r4, #31
 800a984:	409c      	lsls	r4, r3
 800a986:	ea20 0004 	bic.w	r0, r0, r4
 800a98a:	680c      	ldr	r4, [r1, #0]
 800a98c:	fa04 f303 	lsl.w	r3, r4, r3
 800a990:	4303      	orrs	r3, r0
 800a992:	632b      	str	r3, [r5, #48]	; 0x30
 800a994:	e7d2      	b.n	800a93c <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800a996:	6805      	ldr	r5, [r0, #0]
 800a998:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800a99a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a99e:	3b41      	subs	r3, #65	; 0x41
 800a9a0:	241f      	movs	r4, #31
 800a9a2:	409c      	lsls	r4, r3
 800a9a4:	ea20 0004 	bic.w	r0, r0, r4
 800a9a8:	680c      	ldr	r4, [r1, #0]
 800a9aa:	fa04 f303 	lsl.w	r3, r4, r3
 800a9ae:	4303      	orrs	r3, r0
 800a9b0:	62eb      	str	r3, [r5, #44]	; 0x2c
 800a9b2:	e7c3      	b.n	800a93c <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800a9b4:	6815      	ldr	r5, [r2, #0]
 800a9b6:	6928      	ldr	r0, [r5, #16]
 800a9b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a9bc:	2407      	movs	r4, #7
 800a9be:	409c      	lsls	r4, r3
 800a9c0:	ea20 0004 	bic.w	r0, r0, r4
 800a9c4:	688c      	ldr	r4, [r1, #8]
 800a9c6:	fa04 f303 	lsl.w	r3, r4, r3
 800a9ca:	4303      	orrs	r3, r0
 800a9cc:	612b      	str	r3, [r5, #16]
 800a9ce:	e7c6      	b.n	800a95e <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 800a9d0:	6813      	ldr	r3, [r2, #0]
 800a9d2:	4816      	ldr	r0, [pc, #88]	; (800aa2c <HAL_ADC_ConfigChannel+0x12c>)
 800a9d4:	4283      	cmp	r3, r0
 800a9d6:	d005      	beq.n	800a9e4 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a9d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800a9da:	f043 0320 	orr.w	r3, r3, #32
 800a9de:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800a9e0:	2001      	movs	r0, #1
 800a9e2:	e7c1      	b.n	800a968 <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800a9e4:	6898      	ldr	r0, [r3, #8]
 800a9e6:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800a9ea:	d11b      	bne.n	800aa24 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800a9ec:	6898      	ldr	r0, [r3, #8]
 800a9ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800a9f2:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a9f4:	680b      	ldr	r3, [r1, #0]
 800a9f6:	2b10      	cmp	r3, #16
 800a9f8:	d001      	beq.n	800a9fe <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a9fa:	2000      	movs	r0, #0
 800a9fc:	e7b4      	b.n	800a968 <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a9fe:	4b0c      	ldr	r3, [pc, #48]	; (800aa30 <HAL_ADC_ConfigChannel+0x130>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	490c      	ldr	r1, [pc, #48]	; (800aa34 <HAL_ADC_ConfigChannel+0x134>)
 800aa04:	fba1 1303 	umull	r1, r3, r1, r3
 800aa08:	0c9b      	lsrs	r3, r3, #18
 800aa0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aa0e:	0059      	lsls	r1, r3, #1
 800aa10:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800aa12:	e002      	b.n	800aa1a <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 800aa14:	9b01      	ldr	r3, [sp, #4]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800aa1a:	9b01      	ldr	r3, [sp, #4]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1f9      	bne.n	800aa14 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aa20:	2000      	movs	r0, #0
 800aa22:	e7a1      	b.n	800a968 <HAL_ADC_ConfigChannel+0x68>
 800aa24:	2000      	movs	r0, #0
 800aa26:	e79f      	b.n	800a968 <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 800aa28:	2002      	movs	r0, #2
 800aa2a:	e7a0      	b.n	800a96e <HAL_ADC_ConfigChannel+0x6e>
 800aa2c:	40012400 	.word	0x40012400
 800aa30:	2000010c 	.word	0x2000010c
 800aa34:	431bde83 	.word	0x431bde83

0800aa38 <ADC_Enable>:
{
 800aa38:	b530      	push	{r4, r5, lr}
 800aa3a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800aa40:	6803      	ldr	r3, [r0, #0]
 800aa42:	689a      	ldr	r2, [r3, #8]
 800aa44:	f012 0f01 	tst.w	r2, #1
 800aa48:	d12e      	bne.n	800aaa8 <ADC_Enable+0x70>
    __HAL_ADC_ENABLE(hadc);
 800aa4a:	689a      	ldr	r2, [r3, #8]
 800aa4c:	f042 0201 	orr.w	r2, r2, #1
 800aa50:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800aa52:	4b17      	ldr	r3, [pc, #92]	; (800aab0 <ADC_Enable+0x78>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a17      	ldr	r2, [pc, #92]	; (800aab4 <ADC_Enable+0x7c>)
 800aa58:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5c:	0c9b      	lsrs	r3, r3, #18
 800aa5e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800aa60:	e002      	b.n	800aa68 <ADC_Enable+0x30>
      wait_loop_index--;
 800aa62:	9b01      	ldr	r3, [sp, #4]
 800aa64:	3b01      	subs	r3, #1
 800aa66:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800aa68:	9b01      	ldr	r3, [sp, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1f9      	bne.n	800aa62 <ADC_Enable+0x2a>
 800aa6e:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 800aa70:	f7ff f86a 	bl	8009b48 <HAL_GetTick>
 800aa74:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	f013 0f01 	tst.w	r3, #1
 800aa7e:	d111      	bne.n	800aaa4 <ADC_Enable+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800aa80:	f7ff f862 	bl	8009b48 <HAL_GetTick>
 800aa84:	1b40      	subs	r0, r0, r5
 800aa86:	2802      	cmp	r0, #2
 800aa88:	d9f5      	bls.n	800aa76 <ADC_Enable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aa8c:	f043 0310 	orr.w	r3, r3, #16
 800aa90:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aa92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa94:	f043 0301 	orr.w	r3, r3, #1
 800aa98:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 800aaa0:	2001      	movs	r0, #1
 800aaa2:	e002      	b.n	800aaaa <ADC_Enable+0x72>
  return HAL_OK;
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	e000      	b.n	800aaaa <ADC_Enable+0x72>
 800aaa8:	2000      	movs	r0, #0
}
 800aaaa:	b003      	add	sp, #12
 800aaac:	bd30      	pop	{r4, r5, pc}
 800aaae:	bf00      	nop
 800aab0:	2000010c 	.word	0x2000010c
 800aab4:	431bde83 	.word	0x431bde83

0800aab8 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800aab8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d06a      	beq.n	800ab96 <HAL_ADC_Start+0xde>
{
 800aac0:	b510      	push	{r4, lr}
 800aac2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800aac4:	2301      	movs	r3, #1
 800aac6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800aaca:	f7ff ffb5 	bl	800aa38 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800aace:	4602      	mov	r2, r0
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d15b      	bne.n	800ab8c <HAL_ADC_Start+0xd4>
    ADC_STATE_CLR_SET(hadc->State,
 800aad4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aada:	f023 0301 	bic.w	r3, r3, #1
 800aade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aae2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	492d      	ldr	r1, [pc, #180]	; (800ab9c <HAL_ADC_Start+0xe4>)
 800aae8:	428b      	cmp	r3, r1
 800aaea:	d027      	beq.n	800ab3c <HAL_ADC_Start+0x84>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800aaec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800aaee:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 800aaf2:	62a1      	str	r1, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800aaf4:	6859      	ldr	r1, [r3, #4]
 800aaf6:	f411 6f80 	tst.w	r1, #1024	; 0x400
 800aafa:	d005      	beq.n	800ab08 <HAL_ADC_Start+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800aafc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800aafe:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800ab02:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800ab06:	62a1      	str	r1, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ab08:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ab0a:	f411 5f80 	tst.w	r1, #4096	; 0x1000
 800ab0e:	d02b      	beq.n	800ab68 <HAL_ADC_Start+0xb0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800ab10:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ab12:	f021 0106 	bic.w	r1, r1, #6
 800ab16:	62e1      	str	r1, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800ab18:	2100      	movs	r1, #0
 800ab1a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800ab1e:	f06f 0102 	mvn.w	r1, #2
 800ab22:	6019      	str	r1, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800ab24:	6823      	ldr	r3, [r4, #0]
 800ab26:	6899      	ldr	r1, [r3, #8]
 800ab28:	f401 2160 	and.w	r1, r1, #917504	; 0xe0000
 800ab2c:	f5b1 2f60 	cmp.w	r1, #917504	; 0xe0000
 800ab30:	d01d      	beq.n	800ab6e <HAL_ADC_Start+0xb6>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800ab32:	6899      	ldr	r1, [r3, #8]
 800ab34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ab38:	6099      	str	r1, [r3, #8]
 800ab3a:	e02a      	b.n	800ab92 <HAL_ADC_Start+0xda>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800ab3c:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800ab40:	6849      	ldr	r1, [r1, #4]
 800ab42:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 800ab46:	d0d1      	beq.n	800aaec <HAL_ADC_Start+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800ab48:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ab4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ab4e:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800ab50:	4913      	ldr	r1, [pc, #76]	; (800aba0 <HAL_ADC_Start+0xe8>)
 800ab52:	6849      	ldr	r1, [r1, #4]
 800ab54:	f411 6f80 	tst.w	r1, #1024	; 0x400
 800ab58:	d0d6      	beq.n	800ab08 <HAL_ADC_Start+0x50>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800ab5a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ab5c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800ab60:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800ab64:	62a1      	str	r1, [r4, #40]	; 0x28
 800ab66:	e7cf      	b.n	800ab08 <HAL_ADC_Start+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 800ab68:	2100      	movs	r1, #0
 800ab6a:	62e1      	str	r1, [r4, #44]	; 0x2c
 800ab6c:	e7d4      	b.n	800ab18 <HAL_ADC_Start+0x60>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800ab6e:	490b      	ldr	r1, [pc, #44]	; (800ab9c <HAL_ADC_Start+0xe4>)
 800ab70:	428b      	cmp	r3, r1
 800ab72:	d004      	beq.n	800ab7e <HAL_ADC_Start+0xc6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800ab74:	6899      	ldr	r1, [r3, #8]
 800ab76:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 800ab7a:	6099      	str	r1, [r3, #8]
 800ab7c:	e009      	b.n	800ab92 <HAL_ADC_Start+0xda>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800ab7e:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 800ab82:	6849      	ldr	r1, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800ab84:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 800ab88:	d1d3      	bne.n	800ab32 <HAL_ADC_Start+0x7a>
 800ab8a:	e7f3      	b.n	800ab74 <HAL_ADC_Start+0xbc>
    __HAL_UNLOCK(hadc);
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800ab92:	4610      	mov	r0, r2
 800ab94:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800ab96:	2202      	movs	r2, #2
}
 800ab98:	4610      	mov	r0, r2
 800ab9a:	4770      	bx	lr
 800ab9c:	40012800 	.word	0x40012800
 800aba0:	40012400 	.word	0x40012400

0800aba4 <HAL_ADC_Start_DMA>:
{
 800aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800aba6:	6804      	ldr	r4, [r0, #0]
 800aba8:	4d45      	ldr	r5, [pc, #276]	; (800acc0 <HAL_ADC_Start_DMA+0x11c>)
 800abaa:	42ac      	cmp	r4, r5
 800abac:	d05b      	beq.n	800ac66 <HAL_ADC_Start_DMA+0xc2>
 800abae:	4b45      	ldr	r3, [pc, #276]	; (800acc4 <HAL_ADC_Start_DMA+0x120>)
 800abb0:	429c      	cmp	r4, r3
 800abb2:	d058      	beq.n	800ac66 <HAL_ADC_Start_DMA+0xc2>
    __HAL_LOCK(hadc);
 800abb4:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800abb8:	2c01      	cmp	r4, #1
 800abba:	d07e      	beq.n	800acba <HAL_ADC_Start_DMA+0x116>
 800abbc:	4616      	mov	r6, r2
 800abbe:	460d      	mov	r5, r1
 800abc0:	4604      	mov	r4, r0
 800abc2:	2301      	movs	r3, #1
 800abc4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800abc8:	f7ff ff36 	bl	800aa38 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800abcc:	4607      	mov	r7, r0
 800abce:	2800      	cmp	r0, #0
 800abd0:	d16e      	bne.n	800acb0 <HAL_ADC_Start_DMA+0x10c>
      ADC_STATE_CLR_SET(hadc->State,
 800abd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800abd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800abd8:	f023 0301 	bic.w	r3, r3, #1
 800abdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abe0:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800abe2:	6822      	ldr	r2, [r4, #0]
 800abe4:	4b37      	ldr	r3, [pc, #220]	; (800acc4 <HAL_ADC_Start_DMA+0x120>)
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d044      	beq.n	800ac74 <HAL_ADC_Start_DMA+0xd0>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800abea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800abec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800abf0:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800abf2:	6853      	ldr	r3, [r2, #4]
 800abf4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800abf8:	d005      	beq.n	800ac06 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800abfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800abfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ac00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac04:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ac06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac08:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800ac0c:	d048      	beq.n	800aca0 <HAL_ADC_Start_DMA+0xfc>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800ac0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ac10:	f023 0306 	bic.w	r3, r3, #6
 800ac14:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800ac16:	2300      	movs	r3, #0
 800ac18:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ac1c:	6a23      	ldr	r3, [r4, #32]
 800ac1e:	4a2a      	ldr	r2, [pc, #168]	; (800acc8 <HAL_ADC_Start_DMA+0x124>)
 800ac20:	629a      	str	r2, [r3, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ac22:	6a23      	ldr	r3, [r4, #32]
 800ac24:	4a29      	ldr	r2, [pc, #164]	; (800accc <HAL_ADC_Start_DMA+0x128>)
 800ac26:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ac28:	6a23      	ldr	r3, [r4, #32]
 800ac2a:	4a29      	ldr	r2, [pc, #164]	; (800acd0 <HAL_ADC_Start_DMA+0x12c>)
 800ac2c:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	f06f 0202 	mvn.w	r2, #2
 800ac34:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800ac36:	6822      	ldr	r2, [r4, #0]
 800ac38:	6893      	ldr	r3, [r2, #8]
 800ac3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac3e:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ac40:	6821      	ldr	r1, [r4, #0]
 800ac42:	4633      	mov	r3, r6
 800ac44:	462a      	mov	r2, r5
 800ac46:	314c      	adds	r1, #76	; 0x4c
 800ac48:	6a20      	ldr	r0, [r4, #32]
 800ac4a:	f000 f99b 	bl	800af84 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800ac4e:	6822      	ldr	r2, [r4, #0]
 800ac50:	6893      	ldr	r3, [r2, #8]
 800ac52:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800ac56:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800ac5a:	d024      	beq.n	800aca6 <HAL_ADC_Start_DMA+0x102>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800ac5c:	6893      	ldr	r3, [r2, #8]
 800ac5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac62:	6093      	str	r3, [r2, #8]
 800ac64:	e027      	b.n	800acb6 <HAL_ADC_Start_DMA+0x112>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800ac66:	4b16      	ldr	r3, [pc, #88]	; (800acc0 <HAL_ADC_Start_DMA+0x11c>)
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800ac6e:	d0a1      	beq.n	800abb4 <HAL_ADC_Start_DMA+0x10>
    tmp_hal_status = HAL_ERROR;
 800ac70:	2701      	movs	r7, #1
 800ac72:	e020      	b.n	800acb6 <HAL_ADC_Start_DMA+0x112>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800ac74:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800ac7e:	d0b4      	beq.n	800abea <HAL_ADC_Start_DMA+0x46>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800ac80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac86:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800ac88:	4b0d      	ldr	r3, [pc, #52]	; (800acc0 <HAL_ADC_Start_DMA+0x11c>)
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800ac90:	d0b9      	beq.n	800ac06 <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800ac92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ac98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac9e:	e7b2      	b.n	800ac06 <HAL_ADC_Start_DMA+0x62>
        ADC_CLEAR_ERRORCODE(hadc);
 800aca0:	2300      	movs	r3, #0
 800aca2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aca4:	e7b7      	b.n	800ac16 <HAL_ADC_Start_DMA+0x72>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800aca6:	6893      	ldr	r3, [r2, #8]
 800aca8:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800acac:	6093      	str	r3, [r2, #8]
 800acae:	e002      	b.n	800acb6 <HAL_ADC_Start_DMA+0x112>
      __HAL_UNLOCK(hadc);
 800acb0:	2300      	movs	r3, #0
 800acb2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800acb6:	4638      	mov	r0, r7
 800acb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 800acba:	2702      	movs	r7, #2
 800acbc:	e7fb      	b.n	800acb6 <HAL_ADC_Start_DMA+0x112>
 800acbe:	bf00      	nop
 800acc0:	40012400 	.word	0x40012400
 800acc4:	40012800 	.word	0x40012800
 800acc8:	0800a889 	.word	0x0800a889
 800accc:	0800a8dd 	.word	0x0800a8dd
 800acd0:	0800a8e7 	.word	0x0800a8e7

0800acd4 <ADC_ConversionStop_Disable>:
{
 800acd4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800acd6:	6803      	ldr	r3, [r0, #0]
 800acd8:	689a      	ldr	r2, [r3, #8]
 800acda:	f012 0f01 	tst.w	r2, #1
 800acde:	d101      	bne.n	800ace4 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 800ace0:	2000      	movs	r0, #0
}
 800ace2:	bd38      	pop	{r3, r4, r5, pc}
 800ace4:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800ace6:	689a      	ldr	r2, [r3, #8]
 800ace8:	f022 0201 	bic.w	r2, r2, #1
 800acec:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800acee:	f7fe ff2b 	bl	8009b48 <HAL_GetTick>
 800acf2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	f013 0f01 	tst.w	r3, #1
 800acfc:	d00e      	beq.n	800ad1c <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800acfe:	f7fe ff23 	bl	8009b48 <HAL_GetTick>
 800ad02:	1b40      	subs	r0, r0, r5
 800ad04:	2802      	cmp	r0, #2
 800ad06:	d9f5      	bls.n	800acf4 <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ad08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ad0a:	f043 0310 	orr.w	r3, r3, #16
 800ad0e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ad10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad12:	f043 0301 	orr.w	r3, r3, #1
 800ad16:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 800ad18:	2001      	movs	r0, #1
 800ad1a:	e7e2      	b.n	800ace2 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	e7e0      	b.n	800ace2 <ADC_ConversionStop_Disable+0xe>

0800ad20 <HAL_ADC_Init>:
  if(hadc == NULL)
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d07f      	beq.n	800ae24 <HAL_ADC_Init+0x104>
{
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ad28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d033      	beq.n	800ad96 <HAL_ADC_Init+0x76>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f7ff ffd0 	bl	800acd4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800ad34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ad36:	f013 0310 	ands.w	r3, r3, #16
 800ad3a:	d16d      	bne.n	800ae18 <HAL_ADC_Init+0xf8>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d16b      	bne.n	800ae18 <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 800ad40:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ad42:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800ad46:	f022 0202 	bic.w	r2, r2, #2
 800ad4a:	f042 0202 	orr.w	r2, r2, #2
 800ad4e:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800ad50:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800ad52:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800ad54:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800ad56:	68e5      	ldr	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800ad58:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800ad5c:	68a1      	ldr	r1, [r4, #8]
 800ad5e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ad62:	d021      	beq.n	800ada8 <HAL_ADC_Init+0x88>
 800ad64:	2901      	cmp	r1, #1
 800ad66:	d01c      	beq.n	800ada2 <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ad68:	6961      	ldr	r1, [r4, #20]
 800ad6a:	2901      	cmp	r1, #1
 800ad6c:	d01f      	beq.n	800adae <HAL_ADC_Init+0x8e>
      MODIFY_REG(hadc->Instance->CR1,
 800ad6e:	6825      	ldr	r5, [r4, #0]
 800ad70:	6869      	ldr	r1, [r5, #4]
 800ad72:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 800ad76:	430b      	orrs	r3, r1
 800ad78:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800ad7a:	6821      	ldr	r1, [r4, #0]
 800ad7c:	688d      	ldr	r5, [r1, #8]
 800ad7e:	4b2a      	ldr	r3, [pc, #168]	; (800ae28 <HAL_ADC_Init+0x108>)
 800ad80:	402b      	ands	r3, r5
 800ad82:	4313      	orrs	r3, r2
 800ad84:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800ad86:	68a3      	ldr	r3, [r4, #8]
 800ad88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad8c:	d020      	beq.n	800add0 <HAL_ADC_Init+0xb0>
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d01e      	beq.n	800add0 <HAL_ADC_Init+0xb0>
  uint32_t tmp_sqr1 = 0U;
 800ad92:	2100      	movs	r1, #0
 800ad94:	e01f      	b.n	800add6 <HAL_ADC_Init+0xb6>
    ADC_CLEAR_ERRORCODE(hadc);
 800ad96:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800ad98:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800ad9c:	f7ff fcb6 	bl	800a70c <HAL_ADC_MspInit>
 800ada0:	e7c5      	b.n	800ad2e <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800ada2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ada6:	e7df      	b.n	800ad68 <HAL_ADC_Init+0x48>
 800ada8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adac:	e7dc      	b.n	800ad68 <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800adae:	b935      	cbnz	r5, 800adbe <HAL_ADC_Init+0x9e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800adb0:	69a1      	ldr	r1, [r4, #24]
 800adb2:	3901      	subs	r1, #1
 800adb4:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 800adb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800adbc:	e7d7      	b.n	800ad6e <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800adbe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800adc0:	f041 0120 	orr.w	r1, r1, #32
 800adc4:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800adc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800adc8:	f041 0101 	orr.w	r1, r1, #1
 800adcc:	62e1      	str	r1, [r4, #44]	; 0x2c
 800adce:	e7ce      	b.n	800ad6e <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800add0:	6923      	ldr	r3, [r4, #16]
 800add2:	3b01      	subs	r3, #1
 800add4:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800add6:	6825      	ldr	r5, [r4, #0]
 800add8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800adda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800adde:	430b      	orrs	r3, r1
 800ade0:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	6899      	ldr	r1, [r3, #8]
 800ade6:	4b11      	ldr	r3, [pc, #68]	; (800ae2c <HAL_ADC_Init+0x10c>)
 800ade8:	400b      	ands	r3, r1
 800adea:	429a      	cmp	r2, r3
 800adec:	d00b      	beq.n	800ae06 <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 800adee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800adf0:	f023 0312 	bic.w	r3, r3, #18
 800adf4:	f043 0310 	orr.w	r3, r3, #16
 800adf8:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800adfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800adfc:	f043 0301 	orr.w	r3, r3, #1
 800ae00:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 800ae02:	2001      	movs	r0, #1
 800ae04:	e00d      	b.n	800ae22 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 800ae06:	2300      	movs	r3, #0
 800ae08:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800ae0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae0c:	f023 0303 	bic.w	r3, r3, #3
 800ae10:	f043 0301 	orr.w	r3, r3, #1
 800ae14:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae16:	e004      	b.n	800ae22 <HAL_ADC_Init+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae1a:	f043 0310 	orr.w	r3, r3, #16
 800ae1e:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800ae20:	2001      	movs	r0, #1
}
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ae24:	2001      	movs	r0, #1
}
 800ae26:	4770      	bx	lr
 800ae28:	ffe1f7fd 	.word	0xffe1f7fd
 800ae2c:	ff1f0efe 	.word	0xff1f0efe

0800ae30 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800ae30:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d015      	beq.n	800ae64 <HAL_ADC_Stop+0x34>
{
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800ae42:	f7ff ff47 	bl	800acd4 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 800ae46:	4602      	mov	r2, r0
 800ae48:	b938      	cbnz	r0, 800ae5a <HAL_ADC_Stop+0x2a>
    ADC_STATE_CLR_SET(hadc->State,
 800ae4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ae50:	f023 0301 	bic.w	r3, r3, #1
 800ae54:	f043 0301 	orr.w	r3, r3, #1
 800ae58:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800ae60:	4610      	mov	r0, r2
 800ae62:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800ae64:	2202      	movs	r2, #2
}
 800ae66:	4610      	mov	r0, r2
 800ae68:	4770      	bx	lr
	...

0800ae6c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800ae70:	2300      	movs	r3, #0
 800ae72:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ae74:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d068      	beq.n	800af4e <HAL_ADCEx_Calibration_Start+0xe2>
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	2301      	movs	r3, #1
 800ae80:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800ae84:	f7ff ff26 	bl	800acd4 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800ae88:	4605      	mov	r5, r0
 800ae8a:	b128      	cbz	r0, 800ae98 <HAL_ADCEx_Calibration_Start+0x2c>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800ae92:	4628      	mov	r0, r5
 800ae94:	b002      	add	sp, #8
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800ae98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ae9e:	f023 0302 	bic.w	r3, r3, #2
 800aea2:	f043 0302 	orr.w	r3, r3, #2
 800aea6:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800aea8:	4b2a      	ldr	r3, [pc, #168]	; (800af54 <HAL_ADCEx_Calibration_Start+0xe8>)
 800aeaa:	681e      	ldr	r6, [r3, #0]
 800aeac:	2002      	movs	r0, #2
 800aeae:	f000 ff13 	bl	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq>
 800aeb2:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800aeb6:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 800aeb8:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800aeba:	e002      	b.n	800aec2 <HAL_ADCEx_Calibration_Start+0x56>
      wait_loop_index--;
 800aebc:	9b01      	ldr	r3, [sp, #4]
 800aebe:	3b01      	subs	r3, #1
 800aec0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800aec2:	9b01      	ldr	r3, [sp, #4]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1f9      	bne.n	800aebc <HAL_ADCEx_Calibration_Start+0x50>
    ADC_Enable(hadc);
 800aec8:	4620      	mov	r0, r4
 800aeca:	f7ff fdb5 	bl	800aa38 <ADC_Enable>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800aece:	6822      	ldr	r2, [r4, #0]
 800aed0:	6893      	ldr	r3, [r2, #8]
 800aed2:	f043 0308 	orr.w	r3, r3, #8
 800aed6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800aed8:	f7fe fe36 	bl	8009b48 <HAL_GetTick>
 800aedc:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	689a      	ldr	r2, [r3, #8]
 800aee2:	f012 0f08 	tst.w	r2, #8
 800aee6:	d00f      	beq.n	800af08 <HAL_ADCEx_Calibration_Start+0x9c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800aee8:	f7fe fe2e 	bl	8009b48 <HAL_GetTick>
 800aeec:	1b80      	subs	r0, r0, r6
 800aeee:	280a      	cmp	r0, #10
 800aef0:	d9f5      	bls.n	800aede <HAL_ADCEx_Calibration_Start+0x72>
        ADC_STATE_CLR_SET(hadc->State,
 800aef2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aef4:	f023 0312 	bic.w	r3, r3, #18
 800aef8:	f043 0310 	orr.w	r3, r3, #16
 800aefc:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800aefe:	2300      	movs	r3, #0
 800af00:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 800af04:	2501      	movs	r5, #1
 800af06:	e7c4      	b.n	800ae92 <HAL_ADCEx_Calibration_Start+0x26>
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800af08:	689a      	ldr	r2, [r3, #8]
 800af0a:	f042 0204 	orr.w	r2, r2, #4
 800af0e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800af10:	f7fe fe1a 	bl	8009b48 <HAL_GetTick>
 800af14:	4606      	mov	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	f013 0f04 	tst.w	r3, #4
 800af1e:	d00f      	beq.n	800af40 <HAL_ADCEx_Calibration_Start+0xd4>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800af20:	f7fe fe12 	bl	8009b48 <HAL_GetTick>
 800af24:	1b80      	subs	r0, r0, r6
 800af26:	280a      	cmp	r0, #10
 800af28:	d9f5      	bls.n	800af16 <HAL_ADCEx_Calibration_Start+0xaa>
        ADC_STATE_CLR_SET(hadc->State,
 800af2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800af2c:	f023 0312 	bic.w	r3, r3, #18
 800af30:	f043 0310 	orr.w	r3, r3, #16
 800af34:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800af36:	2300      	movs	r3, #0
 800af38:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 800af3c:	2501      	movs	r5, #1
 800af3e:	e7a8      	b.n	800ae92 <HAL_ADCEx_Calibration_Start+0x26>
    ADC_STATE_CLR_SET(hadc->State,
 800af40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800af42:	f023 0303 	bic.w	r3, r3, #3
 800af46:	f043 0301 	orr.w	r3, r3, #1
 800af4a:	62a3      	str	r3, [r4, #40]	; 0x28
 800af4c:	e79e      	b.n	800ae8c <HAL_ADCEx_Calibration_Start+0x20>
  __HAL_LOCK(hadc);
 800af4e:	2502      	movs	r5, #2
 800af50:	e79f      	b.n	800ae92 <HAL_ADCEx_Calibration_Start+0x26>
 800af52:	bf00      	nop
 800af54:	2000010c 	.word	0x2000010c

0800af58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800af58:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800af5a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800af5c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800af5e:	2401      	movs	r4, #1
 800af60:	40b4      	lsls	r4, r6
 800af62:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800af64:	6804      	ldr	r4, [r0, #0]
 800af66:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800af68:	6843      	ldr	r3, [r0, #4]
 800af6a:	2b10      	cmp	r3, #16
 800af6c:	d005      	beq.n	800af7a <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800af6e:	6803      	ldr	r3, [r0, #0]
 800af70:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800af72:	6803      	ldr	r3, [r0, #0]
 800af74:	60da      	str	r2, [r3, #12]
  }
}
 800af76:	bc70      	pop	{r4, r5, r6}
 800af78:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800af7a:	6803      	ldr	r3, [r0, #0]
 800af7c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800af7e:	6803      	ldr	r3, [r0, #0]
 800af80:	60d9      	str	r1, [r3, #12]
 800af82:	e7f8      	b.n	800af76 <DMA_SetConfig+0x1e>

0800af84 <HAL_DMA_Start_IT>:
{
 800af84:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 800af86:	f890 4020 	ldrb.w	r4, [r0, #32]
 800af8a:	2c01      	cmp	r4, #1
 800af8c:	d032      	beq.n	800aff4 <HAL_DMA_Start_IT+0x70>
 800af8e:	2401      	movs	r4, #1
 800af90:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800af94:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 800af98:	2c01      	cmp	r4, #1
 800af9a:	d004      	beq.n	800afa6 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 800af9c:	2300      	movs	r3, #0
 800af9e:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 800afa2:	2002      	movs	r0, #2
}
 800afa4:	bd38      	pop	{r3, r4, r5, pc}
 800afa6:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800afa8:	2002      	movs	r0, #2
 800afaa:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800afae:	2000      	movs	r0, #0
 800afb0:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800afb2:	6825      	ldr	r5, [r4, #0]
 800afb4:	6828      	ldr	r0, [r5, #0]
 800afb6:	f020 0001 	bic.w	r0, r0, #1
 800afba:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800afbc:	4620      	mov	r0, r4
 800afbe:	f7ff ffcb 	bl	800af58 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 800afc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800afc4:	b15b      	cbz	r3, 800afde <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800afc6:	6822      	ldr	r2, [r4, #0]
 800afc8:	6813      	ldr	r3, [r2, #0]
 800afca:	f043 030e 	orr.w	r3, r3, #14
 800afce:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800afd0:	6822      	ldr	r2, [r4, #0]
 800afd2:	6813      	ldr	r3, [r2, #0]
 800afd4:	f043 0301 	orr.w	r3, r3, #1
 800afd8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800afda:	2000      	movs	r0, #0
 800afdc:	e7e2      	b.n	800afa4 <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800afde:	6822      	ldr	r2, [r4, #0]
 800afe0:	6813      	ldr	r3, [r2, #0]
 800afe2:	f023 0304 	bic.w	r3, r3, #4
 800afe6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800afe8:	6822      	ldr	r2, [r4, #0]
 800afea:	6813      	ldr	r3, [r2, #0]
 800afec:	f043 030a 	orr.w	r3, r3, #10
 800aff0:	6013      	str	r3, [r2, #0]
 800aff2:	e7ed      	b.n	800afd0 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 800aff4:	2002      	movs	r0, #2
 800aff6:	e7d5      	b.n	800afa4 <HAL_DMA_Start_IT+0x20>

0800aff8 <HAL_DMA_Abort_IT>:
{  
 800aff8:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800affa:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800affe:	2b02      	cmp	r3, #2
 800b000:	d003      	beq.n	800b00a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b002:	2304      	movs	r3, #4
 800b004:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800b006:	2001      	movs	r0, #1
}
 800b008:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b00a:	6802      	ldr	r2, [r0, #0]
 800b00c:	6813      	ldr	r3, [r2, #0]
 800b00e:	f023 030e 	bic.w	r3, r3, #14
 800b012:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800b014:	6802      	ldr	r2, [r0, #0]
 800b016:	6813      	ldr	r3, [r2, #0]
 800b018:	f023 0301 	bic.w	r3, r3, #1
 800b01c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800b01e:	6803      	ldr	r3, [r0, #0]
 800b020:	4a19      	ldr	r2, [pc, #100]	; (800b088 <HAL_DMA_Abort_IT+0x90>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d014      	beq.n	800b050 <HAL_DMA_Abort_IT+0x58>
 800b026:	3214      	adds	r2, #20
 800b028:	4293      	cmp	r3, r2
 800b02a:	d01f      	beq.n	800b06c <HAL_DMA_Abort_IT+0x74>
 800b02c:	3214      	adds	r2, #20
 800b02e:	4293      	cmp	r3, r2
 800b030:	d01e      	beq.n	800b070 <HAL_DMA_Abort_IT+0x78>
 800b032:	3214      	adds	r2, #20
 800b034:	4293      	cmp	r3, r2
 800b036:	d01e      	beq.n	800b076 <HAL_DMA_Abort_IT+0x7e>
 800b038:	3214      	adds	r2, #20
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d01e      	beq.n	800b07c <HAL_DMA_Abort_IT+0x84>
 800b03e:	3214      	adds	r2, #20
 800b040:	4293      	cmp	r3, r2
 800b042:	d002      	beq.n	800b04a <HAL_DMA_Abort_IT+0x52>
 800b044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b048:	e003      	b.n	800b052 <HAL_DMA_Abort_IT+0x5a>
 800b04a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b04e:	e000      	b.n	800b052 <HAL_DMA_Abort_IT+0x5a>
 800b050:	2201      	movs	r2, #1
 800b052:	4b0e      	ldr	r3, [pc, #56]	; (800b08c <HAL_DMA_Abort_IT+0x94>)
 800b054:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800b056:	2301      	movs	r3, #1
 800b058:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800b05c:	2300      	movs	r3, #0
 800b05e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800b062:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b064:	b16b      	cbz	r3, 800b082 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 800b066:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800b068:	2000      	movs	r0, #0
 800b06a:	e7cd      	b.n	800b008 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800b06c:	2210      	movs	r2, #16
 800b06e:	e7f0      	b.n	800b052 <HAL_DMA_Abort_IT+0x5a>
 800b070:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b074:	e7ed      	b.n	800b052 <HAL_DMA_Abort_IT+0x5a>
 800b076:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b07a:	e7ea      	b.n	800b052 <HAL_DMA_Abort_IT+0x5a>
 800b07c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b080:	e7e7      	b.n	800b052 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800b082:	2000      	movs	r0, #0
 800b084:	e7c0      	b.n	800b008 <HAL_DMA_Abort_IT+0x10>
 800b086:	bf00      	nop
 800b088:	40020008 	.word	0x40020008
 800b08c:	40020000 	.word	0x40020000

0800b090 <FLASH_Program_HalfWord>:
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b090:	4b04      	ldr	r3, [pc, #16]	; (800b0a4 <FLASH_Program_HalfWord+0x14>)
 800b092:	2200      	movs	r2, #0
 800b094:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800b096:	4a04      	ldr	r2, [pc, #16]	; (800b0a8 <FLASH_Program_HalfWord+0x18>)
 800b098:	6913      	ldr	r3, [r2, #16]
 800b09a:	f043 0301 	orr.w	r3, r3, #1
 800b09e:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800b0a0:	8001      	strh	r1, [r0, #0]
}
 800b0a2:	4770      	bx	lr
 800b0a4:	20003668 	.word	0x20003668
 800b0a8:	40022000 	.word	0x40022000

0800b0ac <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800b0ac:	4b1a      	ldr	r3, [pc, #104]	; (800b118 <FLASH_SetErrorCode+0x6c>)
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	f013 0f10 	tst.w	r3, #16
 800b0b4:	d027      	beq.n	800b106 <FLASH_SetErrorCode+0x5a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b0b6:	4a19      	ldr	r2, [pc, #100]	; (800b11c <FLASH_SetErrorCode+0x70>)
 800b0b8:	69d3      	ldr	r3, [r2, #28]
 800b0ba:	f043 0302 	orr.w	r3, r3, #2
 800b0be:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800b0c0:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800b0c2:	4a15      	ldr	r2, [pc, #84]	; (800b118 <FLASH_SetErrorCode+0x6c>)
 800b0c4:	68d2      	ldr	r2, [r2, #12]
 800b0c6:	f012 0f04 	tst.w	r2, #4
 800b0ca:	d006      	beq.n	800b0da <FLASH_SetErrorCode+0x2e>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800b0cc:	4913      	ldr	r1, [pc, #76]	; (800b11c <FLASH_SetErrorCode+0x70>)
 800b0ce:	69ca      	ldr	r2, [r1, #28]
 800b0d0:	f042 0201 	orr.w	r2, r2, #1
 800b0d4:	61ca      	str	r2, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800b0d6:	f043 0304 	orr.w	r3, r3, #4
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800b0da:	4a0f      	ldr	r2, [pc, #60]	; (800b118 <FLASH_SetErrorCode+0x6c>)
 800b0dc:	69d2      	ldr	r2, [r2, #28]
 800b0de:	f012 0f01 	tst.w	r2, #1
 800b0e2:	d009      	beq.n	800b0f8 <FLASH_SetErrorCode+0x4c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800b0e4:	490d      	ldr	r1, [pc, #52]	; (800b11c <FLASH_SetErrorCode+0x70>)
 800b0e6:	69ca      	ldr	r2, [r1, #28]
 800b0e8:	f042 0204 	orr.w	r2, r2, #4
 800b0ec:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800b0ee:	490a      	ldr	r1, [pc, #40]	; (800b118 <FLASH_SetErrorCode+0x6c>)
 800b0f0:	69ca      	ldr	r2, [r1, #28]
 800b0f2:	f022 0201 	bic.w	r2, r2, #1
 800b0f6:	61ca      	str	r2, [r1, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800b0f8:	f240 1201 	movw	r2, #257	; 0x101
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d004      	beq.n	800b10a <FLASH_SetErrorCode+0x5e>
 800b100:	4a05      	ldr	r2, [pc, #20]	; (800b118 <FLASH_SetErrorCode+0x6c>)
 800b102:	60d3      	str	r3, [r2, #12]
}  
 800b104:	4770      	bx	lr
  uint32_t flags = 0U;
 800b106:	2300      	movs	r3, #0
 800b108:	e7db      	b.n	800b0c2 <FLASH_SetErrorCode+0x16>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800b10a:	4a03      	ldr	r2, [pc, #12]	; (800b118 <FLASH_SetErrorCode+0x6c>)
 800b10c:	69d3      	ldr	r3, [r2, #28]
 800b10e:	f023 0301 	bic.w	r3, r3, #1
 800b112:	61d3      	str	r3, [r2, #28]
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	40022000 	.word	0x40022000
 800b11c:	20003668 	.word	0x20003668

0800b120 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800b120:	4b07      	ldr	r3, [pc, #28]	; (800b140 <HAL_FLASH_Unlock+0x20>)
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b128:	d007      	beq.n	800b13a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800b12a:	4b05      	ldr	r3, [pc, #20]	; (800b140 <HAL_FLASH_Unlock+0x20>)
 800b12c:	4a05      	ldr	r2, [pc, #20]	; (800b144 <HAL_FLASH_Unlock+0x24>)
 800b12e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800b130:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800b134:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 800b136:	2000      	movs	r0, #0
 800b138:	4770      	bx	lr
    return HAL_ERROR;
 800b13a:	2001      	movs	r0, #1
}
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	40022000 	.word	0x40022000
 800b144:	45670123 	.word	0x45670123

0800b148 <FLASH_WaitForLastOperation>:
{
 800b148:	b538      	push	{r3, r4, r5, lr}
 800b14a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800b14c:	f7fe fcfc 	bl	8009b48 <HAL_GetTick>
 800b150:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b152:	4b17      	ldr	r3, [pc, #92]	; (800b1b0 <FLASH_WaitForLastOperation+0x68>)
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	f013 0f01 	tst.w	r3, #1
 800b15a:	d00a      	beq.n	800b172 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 800b15c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800b160:	d0f7      	beq.n	800b152 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800b162:	b30c      	cbz	r4, 800b1a8 <FLASH_WaitForLastOperation+0x60>
 800b164:	f7fe fcf0 	bl	8009b48 <HAL_GetTick>
 800b168:	1b40      	subs	r0, r0, r5
 800b16a:	42a0      	cmp	r0, r4
 800b16c:	d9f1      	bls.n	800b152 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800b16e:	2003      	movs	r0, #3
 800b170:	e019      	b.n	800b1a6 <FLASH_WaitForLastOperation+0x5e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800b172:	4b0f      	ldr	r3, [pc, #60]	; (800b1b0 <FLASH_WaitForLastOperation+0x68>)
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	f013 0f20 	tst.w	r3, #32
 800b17a:	d002      	beq.n	800b182 <FLASH_WaitForLastOperation+0x3a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b17c:	4b0c      	ldr	r3, [pc, #48]	; (800b1b0 <FLASH_WaitForLastOperation+0x68>)
 800b17e:	2220      	movs	r2, #32
 800b180:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800b182:	4b0b      	ldr	r3, [pc, #44]	; (800b1b0 <FLASH_WaitForLastOperation+0x68>)
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	f013 0f10 	tst.w	r3, #16
 800b18a:	d109      	bne.n	800b1a0 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800b18c:	4b08      	ldr	r3, [pc, #32]	; (800b1b0 <FLASH_WaitForLastOperation+0x68>)
 800b18e:	69db      	ldr	r3, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800b190:	f013 0f01 	tst.w	r3, #1
 800b194:	d104      	bne.n	800b1a0 <FLASH_WaitForLastOperation+0x58>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800b196:	4b06      	ldr	r3, [pc, #24]	; (800b1b0 <FLASH_WaitForLastOperation+0x68>)
 800b198:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800b19a:	f013 0f04 	tst.w	r3, #4
 800b19e:	d005      	beq.n	800b1ac <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 800b1a0:	f7ff ff84 	bl	800b0ac <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b1a4:	2001      	movs	r0, #1
}
 800b1a6:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_TIMEOUT;
 800b1a8:	2003      	movs	r0, #3
 800b1aa:	e7fc      	b.n	800b1a6 <FLASH_WaitForLastOperation+0x5e>
  return HAL_OK;
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	e7fa      	b.n	800b1a6 <FLASH_WaitForLastOperation+0x5e>
 800b1b0:	40022000 	.word	0x40022000

0800b1b4 <HAL_FLASH_Program>:
{
 800b1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800b1b8:	4c23      	ldr	r4, [pc, #140]	; (800b248 <HAL_FLASH_Program+0x94>)
 800b1ba:	7e24      	ldrb	r4, [r4, #24]
 800b1bc:	2c01      	cmp	r4, #1
 800b1be:	d041      	beq.n	800b244 <HAL_FLASH_Program+0x90>
 800b1c0:	461e      	mov	r6, r3
 800b1c2:	4690      	mov	r8, r2
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4b1f      	ldr	r3, [pc, #124]	; (800b248 <HAL_FLASH_Program+0x94>)
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b1ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b1d2:	f7ff ffb9 	bl	800b148 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	bb70      	cbnz	r0, 800b238 <HAL_FLASH_Program+0x84>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800b1da:	2c01      	cmp	r4, #1
 800b1dc:	d029      	beq.n	800b232 <HAL_FLASH_Program+0x7e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800b1de:	2c02      	cmp	r4, #2
 800b1e0:	d024      	beq.n	800b22c <HAL_FLASH_Program+0x78>
      nbiterations = 4U;
 800b1e2:	f04f 0904 	mov.w	r9, #4
    for (index = 0U; index < nbiterations; index++)
 800b1e6:	2400      	movs	r4, #0
 800b1e8:	454c      	cmp	r4, r9
 800b1ea:	d225      	bcs.n	800b238 <HAL_FLASH_Program+0x84>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800b1ec:	0121      	lsls	r1, r4, #4
 800b1ee:	f1c1 0220 	rsb	r2, r1, #32
 800b1f2:	f1a1 0320 	sub.w	r3, r1, #32
 800b1f6:	fa28 f101 	lsr.w	r1, r8, r1
 800b1fa:	fa06 f202 	lsl.w	r2, r6, r2
 800b1fe:	4311      	orrs	r1, r2
 800b200:	fa26 f303 	lsr.w	r3, r6, r3
 800b204:	4319      	orrs	r1, r3
 800b206:	b289      	uxth	r1, r1
 800b208:	eb07 0044 	add.w	r0, r7, r4, lsl #1
 800b20c:	f7ff ff40 	bl	800b090 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b210:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b214:	f7ff ff98 	bl	800b148 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b218:	4b0c      	ldr	r3, [pc, #48]	; (800b24c <HAL_FLASH_Program+0x98>)
 800b21a:	691d      	ldr	r5, [r3, #16]
 800b21c:	f025 0501 	bic.w	r5, r5, #1
 800b220:	611d      	str	r5, [r3, #16]
      if (status != HAL_OK)
 800b222:	4603      	mov	r3, r0
 800b224:	b940      	cbnz	r0, 800b238 <HAL_FLASH_Program+0x84>
    for (index = 0U; index < nbiterations; index++)
 800b226:	3401      	adds	r4, #1
 800b228:	b2e4      	uxtb	r4, r4
 800b22a:	e7dd      	b.n	800b1e8 <HAL_FLASH_Program+0x34>
      nbiterations = 2U;
 800b22c:	f04f 0902 	mov.w	r9, #2
 800b230:	e7d9      	b.n	800b1e6 <HAL_FLASH_Program+0x32>
      nbiterations = 1U;
 800b232:	f04f 0901 	mov.w	r9, #1
 800b236:	e7d6      	b.n	800b1e6 <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 800b238:	4a03      	ldr	r2, [pc, #12]	; (800b248 <HAL_FLASH_Program+0x94>)
 800b23a:	2100      	movs	r1, #0
 800b23c:	7611      	strb	r1, [r2, #24]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800b244:	2302      	movs	r3, #2
 800b246:	e7fa      	b.n	800b23e <HAL_FLASH_Program+0x8a>
 800b248:	20003668 	.word	0x20003668
 800b24c:	40022000 	.word	0x40022000

0800b250 <FLASH_MassErase>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b250:	4b06      	ldr	r3, [pc, #24]	; (800b26c <FLASH_MassErase+0x1c>)
 800b252:	2200      	movs	r2, #0
 800b254:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800b256:	4b06      	ldr	r3, [pc, #24]	; (800b270 <FLASH_MassErase+0x20>)
 800b258:	691a      	ldr	r2, [r3, #16]
 800b25a:	f042 0204 	orr.w	r2, r2, #4
 800b25e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800b260:	691a      	ldr	r2, [r3, #16]
 800b262:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b266:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	20003668 	.word	0x20003668
 800b270:	40022000 	.word	0x40022000

0800b274 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b274:	4b06      	ldr	r3, [pc, #24]	; (800b290 <FLASH_PageErase+0x1c>)
 800b276:	2200      	movs	r2, #0
 800b278:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800b27a:	4b06      	ldr	r3, [pc, #24]	; (800b294 <FLASH_PageErase+0x20>)
 800b27c:	691a      	ldr	r2, [r3, #16]
 800b27e:	f042 0202 	orr.w	r2, r2, #2
 800b282:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800b284:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800b286:	691a      	ldr	r2, [r3, #16]
 800b288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b28c:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800b28e:	4770      	bx	lr
 800b290:	20003668 	.word	0x20003668
 800b294:	40022000 	.word	0x40022000

0800b298 <HAL_FLASHEx_Erase>:
  __HAL_LOCK(&pFlash);
 800b298:	4b26      	ldr	r3, [pc, #152]	; (800b334 <HAL_FLASHEx_Erase+0x9c>)
 800b29a:	7e1b      	ldrb	r3, [r3, #24]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d046      	beq.n	800b32e <HAL_FLASHEx_Erase+0x96>
{
 800b2a0:	b570      	push	{r4, r5, r6, lr}
 800b2a2:	460e      	mov	r6, r1
 800b2a4:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 800b2a6:	4b23      	ldr	r3, [pc, #140]	; (800b334 <HAL_FLASHEx_Erase+0x9c>)
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b2ac:	6803      	ldr	r3, [r0, #0]
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d020      	beq.n	800b2f4 <HAL_FLASHEx_Erase+0x5c>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800b2b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b2b6:	f7ff ff47 	bl	800b148 <FLASH_WaitForLastOperation>
 800b2ba:	bb90      	cbnz	r0, 800b322 <HAL_FLASHEx_Erase+0x8a>
        *PageError = 0xFFFFFFFFU;
 800b2bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2c0:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 800b2c2:	68a5      	ldr	r5, [r4, #8]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b2c4:	2201      	movs	r2, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800b2c6:	68e1      	ldr	r1, [r4, #12]
 800b2c8:	68a3      	ldr	r3, [r4, #8]
 800b2ca:	eb03 2381 	add.w	r3, r3, r1, lsl #10
        for(address = pEraseInit->PageAddress;
 800b2ce:	42ab      	cmp	r3, r5
 800b2d0:	d928      	bls.n	800b324 <HAL_FLASHEx_Erase+0x8c>
          FLASH_PageErase(address);
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	f7ff ffce 	bl	800b274 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b2d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b2dc:	f7ff ff34 	bl	800b148 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800b2e0:	4a15      	ldr	r2, [pc, #84]	; (800b338 <HAL_FLASHEx_Erase+0xa0>)
 800b2e2:	6913      	ldr	r3, [r2, #16]
 800b2e4:	f023 0302 	bic.w	r3, r3, #2
 800b2e8:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	b9b8      	cbnz	r0, 800b31e <HAL_FLASHEx_Erase+0x86>
            address += FLASH_PAGE_SIZE)
 800b2ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800b2f2:	e7e8      	b.n	800b2c6 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800b2f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b2f8:	f7ff ff26 	bl	800b148 <FLASH_WaitForLastOperation>
 800b2fc:	b108      	cbz	r0, 800b302 <HAL_FLASHEx_Erase+0x6a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800b2fe:	2201      	movs	r2, #1
 800b300:	e010      	b.n	800b324 <HAL_FLASHEx_Erase+0x8c>
        FLASH_MassErase(FLASH_BANK_1);
 800b302:	2001      	movs	r0, #1
 800b304:	f7ff ffa4 	bl	800b250 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b308:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b30c:	f7ff ff1c 	bl	800b148 <FLASH_WaitForLastOperation>
 800b310:	4602      	mov	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800b312:	4909      	ldr	r1, [pc, #36]	; (800b338 <HAL_FLASHEx_Erase+0xa0>)
 800b314:	690b      	ldr	r3, [r1, #16]
 800b316:	f023 0304 	bic.w	r3, r3, #4
 800b31a:	610b      	str	r3, [r1, #16]
 800b31c:	e002      	b.n	800b324 <HAL_FLASHEx_Erase+0x8c>
            *PageError = address;
 800b31e:	6035      	str	r5, [r6, #0]
            break;
 800b320:	e000      	b.n	800b324 <HAL_FLASHEx_Erase+0x8c>
  HAL_StatusTypeDef status = HAL_ERROR;
 800b322:	2201      	movs	r2, #1
  __HAL_UNLOCK(&pFlash);
 800b324:	4b03      	ldr	r3, [pc, #12]	; (800b334 <HAL_FLASHEx_Erase+0x9c>)
 800b326:	2100      	movs	r1, #0
 800b328:	7619      	strb	r1, [r3, #24]
}
 800b32a:	4610      	mov	r0, r2
 800b32c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 800b32e:	2202      	movs	r2, #2
}
 800b330:	4610      	mov	r0, r2
 800b332:	4770      	bx	lr
 800b334:	20003668 	.word	0x20003668
 800b338:	40022000 	.word	0x40022000

0800b33c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b33c:	b4f0      	push	{r4, r5, r6, r7}
 800b33e:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800b340:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800b342:	4635      	mov	r5, r6
 800b344:	e0a1      	b.n	800b48a <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800b346:	2c00      	cmp	r4, #0
 800b348:	d059      	beq.n	800b3fe <HAL_GPIO_Init+0xc2>
 800b34a:	2c01      	cmp	r4, #1
 800b34c:	d100      	bne.n	800b350 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800b34e:	68ce      	ldr	r6, [r1, #12]
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800b350:	2bff      	cmp	r3, #255	; 0xff
 800b352:	d868      	bhi.n	800b426 <HAL_GPIO_Init+0xea>
 800b354:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800b356:	2bff      	cmp	r3, #255	; 0xff
 800b358:	d868      	bhi.n	800b42c <HAL_GPIO_Init+0xf0>
 800b35a:	00ac      	lsls	r4, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800b35c:	f8dc 2000 	ldr.w	r2, [ip]
 800b360:	270f      	movs	r7, #15
 800b362:	40a7      	lsls	r7, r4
 800b364:	ea22 0207 	bic.w	r2, r2, r7
 800b368:	fa06 f404 	lsl.w	r4, r6, r4
 800b36c:	4322      	orrs	r2, r4
 800b36e:	f8cc 2000 	str.w	r2, [ip]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800b372:	684a      	ldr	r2, [r1, #4]
 800b374:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800b378:	f000 8086 	beq.w	800b488 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800b37c:	4a5e      	ldr	r2, [pc, #376]	; (800b4f8 <HAL_GPIO_Init+0x1bc>)
 800b37e:	6994      	ldr	r4, [r2, #24]
 800b380:	f044 0401 	orr.w	r4, r4, #1
 800b384:	6194      	str	r4, [r2, #24]
 800b386:	6992      	ldr	r2, [r2, #24]
 800b388:	f002 0201 	and.w	r2, r2, #1
 800b38c:	9201      	str	r2, [sp, #4]
 800b38e:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 800b390:	08ac      	lsrs	r4, r5, #2
 800b392:	1ca7      	adds	r7, r4, #2
 800b394:	4a59      	ldr	r2, [pc, #356]	; (800b4fc <HAL_GPIO_Init+0x1c0>)
 800b396:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800b39a:	f005 0703 	and.w	r7, r5, #3
 800b39e:	00bf      	lsls	r7, r7, #2
 800b3a0:	f04f 0c0f 	mov.w	ip, #15
 800b3a4:	fa0c fc07 	lsl.w	ip, ip, r7
 800b3a8:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b3ac:	4a54      	ldr	r2, [pc, #336]	; (800b500 <HAL_GPIO_Init+0x1c4>)
 800b3ae:	4290      	cmp	r0, r2
 800b3b0:	d042      	beq.n	800b438 <HAL_GPIO_Init+0xfc>
 800b3b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3b6:	4290      	cmp	r0, r2
 800b3b8:	d07f      	beq.n	800b4ba <HAL_GPIO_Init+0x17e>
 800b3ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3be:	4290      	cmp	r0, r2
 800b3c0:	d07d      	beq.n	800b4be <HAL_GPIO_Init+0x182>
 800b3c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b3c6:	4290      	cmp	r0, r2
 800b3c8:	d034      	beq.n	800b434 <HAL_GPIO_Init+0xf8>
 800b3ca:	2204      	movs	r2, #4
 800b3cc:	e035      	b.n	800b43a <HAL_GPIO_Init+0xfe>
      switch (GPIO_Init->Mode)
 800b3ce:	4f4d      	ldr	r7, [pc, #308]	; (800b504 <HAL_GPIO_Init+0x1c8>)
 800b3d0:	42bc      	cmp	r4, r7
 800b3d2:	d014      	beq.n	800b3fe <HAL_GPIO_Init+0xc2>
 800b3d4:	d90b      	bls.n	800b3ee <HAL_GPIO_Init+0xb2>
 800b3d6:	4f4c      	ldr	r7, [pc, #304]	; (800b508 <HAL_GPIO_Init+0x1cc>)
 800b3d8:	42bc      	cmp	r4, r7
 800b3da:	d010      	beq.n	800b3fe <HAL_GPIO_Init+0xc2>
 800b3dc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800b3e0:	42bc      	cmp	r4, r7
 800b3e2:	d00c      	beq.n	800b3fe <HAL_GPIO_Init+0xc2>
 800b3e4:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800b3e8:	42bc      	cmp	r4, r7
 800b3ea:	d1b1      	bne.n	800b350 <HAL_GPIO_Init+0x14>
 800b3ec:	e007      	b.n	800b3fe <HAL_GPIO_Init+0xc2>
 800b3ee:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800b3f2:	42bc      	cmp	r4, r7
 800b3f4:	d003      	beq.n	800b3fe <HAL_GPIO_Init+0xc2>
 800b3f6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800b3fa:	42bc      	cmp	r4, r7
 800b3fc:	d1a8      	bne.n	800b350 <HAL_GPIO_Init+0x14>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800b3fe:	688c      	ldr	r4, [r1, #8]
 800b400:	b17c      	cbz	r4, 800b422 <HAL_GPIO_Init+0xe6>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800b402:	2c01      	cmp	r4, #1
 800b404:	d008      	beq.n	800b418 <HAL_GPIO_Init+0xdc>
            GPIOx->BRR = ioposition;
 800b406:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b408:	2608      	movs	r6, #8
 800b40a:	e7a1      	b.n	800b350 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800b40c:	68ce      	ldr	r6, [r1, #12]
 800b40e:	3608      	adds	r6, #8
          break;
 800b410:	e79e      	b.n	800b350 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800b412:	68ce      	ldr	r6, [r1, #12]
 800b414:	360c      	adds	r6, #12
          break;
 800b416:	e79b      	b.n	800b350 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 800b418:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800b41a:	2608      	movs	r6, #8
 800b41c:	e798      	b.n	800b350 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800b41e:	2600      	movs	r6, #0
 800b420:	e796      	b.n	800b350 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800b422:	2604      	movs	r6, #4
 800b424:	e794      	b.n	800b350 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800b426:	f100 0c04 	add.w	ip, r0, #4
 800b42a:	e794      	b.n	800b356 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800b42c:	f1a5 0408 	sub.w	r4, r5, #8
 800b430:	00a4      	lsls	r4, r4, #2
 800b432:	e793      	b.n	800b35c <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b434:	2203      	movs	r2, #3
 800b436:	e000      	b.n	800b43a <HAL_GPIO_Init+0xfe>
 800b438:	2200      	movs	r2, #0
 800b43a:	40ba      	lsls	r2, r7
 800b43c:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 800b440:	3402      	adds	r4, #2
 800b442:	4f2e      	ldr	r7, [pc, #184]	; (800b4fc <HAL_GPIO_Init+0x1c0>)
 800b444:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b448:	684a      	ldr	r2, [r1, #4]
 800b44a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800b44e:	d038      	beq.n	800b4c2 <HAL_GPIO_Init+0x186>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800b450:	4c2e      	ldr	r4, [pc, #184]	; (800b50c <HAL_GPIO_Init+0x1d0>)
 800b452:	6822      	ldr	r2, [r4, #0]
 800b454:	431a      	orrs	r2, r3
 800b456:	6022      	str	r2, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b458:	684a      	ldr	r2, [r1, #4]
 800b45a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800b45e:	d036      	beq.n	800b4ce <HAL_GPIO_Init+0x192>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800b460:	4c2a      	ldr	r4, [pc, #168]	; (800b50c <HAL_GPIO_Init+0x1d0>)
 800b462:	6862      	ldr	r2, [r4, #4]
 800b464:	431a      	orrs	r2, r3
 800b466:	6062      	str	r2, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b468:	684a      	ldr	r2, [r1, #4]
 800b46a:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800b46e:	d034      	beq.n	800b4da <HAL_GPIO_Init+0x19e>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800b470:	4c26      	ldr	r4, [pc, #152]	; (800b50c <HAL_GPIO_Init+0x1d0>)
 800b472:	68a2      	ldr	r2, [r4, #8]
 800b474:	431a      	orrs	r2, r3
 800b476:	60a2      	str	r2, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b478:	684a      	ldr	r2, [r1, #4]
 800b47a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800b47e:	d032      	beq.n	800b4e6 <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800b480:	4c22      	ldr	r4, [pc, #136]	; (800b50c <HAL_GPIO_Init+0x1d0>)
 800b482:	68e2      	ldr	r2, [r4, #12]
 800b484:	4313      	orrs	r3, r2
 800b486:	60e3      	str	r3, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800b488:	3501      	adds	r5, #1
 800b48a:	2d0f      	cmp	r5, #15
 800b48c:	d831      	bhi.n	800b4f2 <HAL_GPIO_Init+0x1b6>
    ioposition = (0x01U << position);
 800b48e:	2201      	movs	r2, #1
 800b490:	40aa      	lsls	r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b492:	680b      	ldr	r3, [r1, #0]
 800b494:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 800b496:	429a      	cmp	r2, r3
 800b498:	d1f6      	bne.n	800b488 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 800b49a:	684c      	ldr	r4, [r1, #4]
 800b49c:	2c12      	cmp	r4, #18
 800b49e:	d0b8      	beq.n	800b412 <HAL_GPIO_Init+0xd6>
 800b4a0:	d895      	bhi.n	800b3ce <HAL_GPIO_Init+0x92>
 800b4a2:	2c02      	cmp	r4, #2
 800b4a4:	d0b2      	beq.n	800b40c <HAL_GPIO_Init+0xd0>
 800b4a6:	f67f af4e 	bls.w	800b346 <HAL_GPIO_Init+0xa>
 800b4aa:	2c03      	cmp	r4, #3
 800b4ac:	d0b7      	beq.n	800b41e <HAL_GPIO_Init+0xe2>
 800b4ae:	2c11      	cmp	r4, #17
 800b4b0:	f47f af4e 	bne.w	800b350 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800b4b4:	68ce      	ldr	r6, [r1, #12]
 800b4b6:	3604      	adds	r6, #4
          break;
 800b4b8:	e74a      	b.n	800b350 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	e7bd      	b.n	800b43a <HAL_GPIO_Init+0xfe>
 800b4be:	2202      	movs	r2, #2
 800b4c0:	e7bb      	b.n	800b43a <HAL_GPIO_Init+0xfe>
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800b4c2:	4c12      	ldr	r4, [pc, #72]	; (800b50c <HAL_GPIO_Init+0x1d0>)
 800b4c4:	6822      	ldr	r2, [r4, #0]
 800b4c6:	ea22 0203 	bic.w	r2, r2, r3
 800b4ca:	6022      	str	r2, [r4, #0]
 800b4cc:	e7c4      	b.n	800b458 <HAL_GPIO_Init+0x11c>
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800b4ce:	4c0f      	ldr	r4, [pc, #60]	; (800b50c <HAL_GPIO_Init+0x1d0>)
 800b4d0:	6862      	ldr	r2, [r4, #4]
 800b4d2:	ea22 0203 	bic.w	r2, r2, r3
 800b4d6:	6062      	str	r2, [r4, #4]
 800b4d8:	e7c6      	b.n	800b468 <HAL_GPIO_Init+0x12c>
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800b4da:	4c0c      	ldr	r4, [pc, #48]	; (800b50c <HAL_GPIO_Init+0x1d0>)
 800b4dc:	68a2      	ldr	r2, [r4, #8]
 800b4de:	ea22 0203 	bic.w	r2, r2, r3
 800b4e2:	60a2      	str	r2, [r4, #8]
 800b4e4:	e7c8      	b.n	800b478 <HAL_GPIO_Init+0x13c>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800b4e6:	4c09      	ldr	r4, [pc, #36]	; (800b50c <HAL_GPIO_Init+0x1d0>)
 800b4e8:	68e2      	ldr	r2, [r4, #12]
 800b4ea:	ea22 0303 	bic.w	r3, r2, r3
 800b4ee:	60e3      	str	r3, [r4, #12]
 800b4f0:	e7ca      	b.n	800b488 <HAL_GPIO_Init+0x14c>
        }
      }
    }
  }
}
 800b4f2:	b002      	add	sp, #8
 800b4f4:	bcf0      	pop	{r4, r5, r6, r7}
 800b4f6:	4770      	bx	lr
 800b4f8:	40021000 	.word	0x40021000
 800b4fc:	40010000 	.word	0x40010000
 800b500:	40010800 	.word	0x40010800
 800b504:	10210000 	.word	0x10210000
 800b508:	10310000 	.word	0x10310000
 800b50c:	40010400 	.word	0x40010400

0800b510 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 800b510:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t position = 0x00U;
 800b512:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800b514:	e00e      	b.n	800b534 <HAL_GPIO_DeInit+0x24>
    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800b516:	f100 0c04 	add.w	ip, r0, #4
 800b51a:	e015      	b.n	800b548 <HAL_GPIO_DeInit+0x38>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800b51c:	f1a4 0608 	sub.w	r6, r4, #8
 800b520:	00b7      	lsls	r7, r6, #2
 800b522:	e014      	b.n	800b54e <HAL_GPIO_DeInit+0x3e>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = AFIO->EXTICR[position >> 2U];
      tmp &= 0x0FU << (4U * (position & 0x03U));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b524:	2703      	movs	r7, #3
 800b526:	e000      	b.n	800b52a <HAL_GPIO_DeInit+0x1a>
 800b528:	2700      	movs	r7, #0
 800b52a:	fa07 f202 	lsl.w	r2, r7, r2
 800b52e:	42b2      	cmp	r2, r6
 800b530:	d03e      	beq.n	800b5b0 <HAL_GPIO_DeInit+0xa0>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 800b532:	3401      	adds	r4, #1
  while ((GPIO_Pin >> position) != 0U)
 800b534:	fa31 f304 	lsrs.w	r3, r1, r4
 800b538:	d051      	beq.n	800b5de <HAL_GPIO_DeInit+0xce>
    iocurrent = (GPIO_Pin) & (1U << position);
 800b53a:	2301      	movs	r3, #1
 800b53c:	40a3      	lsls	r3, r4
    if (iocurrent)
 800b53e:	400b      	ands	r3, r1
 800b540:	d0f7      	beq.n	800b532 <HAL_GPIO_DeInit+0x22>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800b542:	2bff      	cmp	r3, #255	; 0xff
 800b544:	d8e7      	bhi.n	800b516 <HAL_GPIO_DeInit+0x6>
 800b546:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800b548:	2bff      	cmp	r3, #255	; 0xff
 800b54a:	d8e7      	bhi.n	800b51c <HAL_GPIO_DeInit+0xc>
 800b54c:	00a7      	lsls	r7, r4, #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 800b54e:	f8dc 2000 	ldr.w	r2, [ip]
 800b552:	250f      	movs	r5, #15
 800b554:	fa05 f607 	lsl.w	r6, r5, r7
 800b558:	ea22 0206 	bic.w	r2, r2, r6
 800b55c:	2604      	movs	r6, #4
 800b55e:	40be      	lsls	r6, r7
 800b560:	4332      	orrs	r2, r6
 800b562:	f8cc 2000 	str.w	r2, [ip]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800b566:	68c2      	ldr	r2, [r0, #12]
 800b568:	43db      	mvns	r3, r3
 800b56a:	401a      	ands	r2, r3
 800b56c:	60c2      	str	r2, [r0, #12]
      tmp = AFIO->EXTICR[position >> 2U];
 800b56e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 800b572:	f10c 0602 	add.w	r6, ip, #2
 800b576:	4a1b      	ldr	r2, [pc, #108]	; (800b5e4 <HAL_GPIO_DeInit+0xd4>)
 800b578:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 800b57c:	f004 0203 	and.w	r2, r4, #3
 800b580:	0092      	lsls	r2, r2, #2
 800b582:	4095      	lsls	r5, r2
 800b584:	402e      	ands	r6, r5
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b586:	4f18      	ldr	r7, [pc, #96]	; (800b5e8 <HAL_GPIO_DeInit+0xd8>)
 800b588:	42b8      	cmp	r0, r7
 800b58a:	d0cd      	beq.n	800b528 <HAL_GPIO_DeInit+0x18>
 800b58c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800b590:	42b8      	cmp	r0, r7
 800b592:	d009      	beq.n	800b5a8 <HAL_GPIO_DeInit+0x98>
 800b594:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800b598:	42b8      	cmp	r0, r7
 800b59a:	d007      	beq.n	800b5ac <HAL_GPIO_DeInit+0x9c>
 800b59c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800b5a0:	42b8      	cmp	r0, r7
 800b5a2:	d0bf      	beq.n	800b524 <HAL_GPIO_DeInit+0x14>
 800b5a4:	2704      	movs	r7, #4
 800b5a6:	e7c0      	b.n	800b52a <HAL_GPIO_DeInit+0x1a>
 800b5a8:	2701      	movs	r7, #1
 800b5aa:	e7be      	b.n	800b52a <HAL_GPIO_DeInit+0x1a>
 800b5ac:	2702      	movs	r7, #2
 800b5ae:	e7bc      	b.n	800b52a <HAL_GPIO_DeInit+0x1a>
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 800b5b0:	4f0c      	ldr	r7, [pc, #48]	; (800b5e4 <HAL_GPIO_DeInit+0xd4>)
 800b5b2:	f10c 0202 	add.w	r2, ip, #2
 800b5b6:	f857 6022 	ldr.w	r6, [r7, r2, lsl #2]
 800b5ba:	ea26 0505 	bic.w	r5, r6, r5
 800b5be:	f847 5022 	str.w	r5, [r7, r2, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800b5c2:	4a0a      	ldr	r2, [pc, #40]	; (800b5ec <HAL_GPIO_DeInit+0xdc>)
 800b5c4:	6815      	ldr	r5, [r2, #0]
 800b5c6:	401d      	ands	r5, r3
 800b5c8:	6015      	str	r5, [r2, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800b5ca:	6855      	ldr	r5, [r2, #4]
 800b5cc:	401d      	ands	r5, r3
 800b5ce:	6055      	str	r5, [r2, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800b5d0:	6895      	ldr	r5, [r2, #8]
 800b5d2:	401d      	ands	r5, r3
 800b5d4:	6095      	str	r5, [r2, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800b5d6:	68d5      	ldr	r5, [r2, #12]
 800b5d8:	402b      	ands	r3, r5
 800b5da:	60d3      	str	r3, [r2, #12]
 800b5dc:	e7a9      	b.n	800b532 <HAL_GPIO_DeInit+0x22>
  }
}
 800b5de:	bcf0      	pop	{r4, r5, r6, r7}
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	40010000 	.word	0x40010000
 800b5e8:	40010800 	.word	0x40010800
 800b5ec:	40010400 	.word	0x40010400

0800b5f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b5f0:	6883      	ldr	r3, [r0, #8]
 800b5f2:	4219      	tst	r1, r3
 800b5f4:	d101      	bne.n	800b5fa <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b5f6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800b5f8:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800b5fa:	2001      	movs	r0, #1
 800b5fc:	4770      	bx	lr

0800b5fe <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b5fe:	b912      	cbnz	r2, 800b606 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b600:	0409      	lsls	r1, r1, #16
 800b602:	6101      	str	r1, [r0, #16]
  }
}
 800b604:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800b606:	6101      	str	r1, [r0, #16]
 800b608:	4770      	bx	lr

0800b60a <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 800b60a:	b308      	cbz	r0, 800b650 <HAL_IWDG_Init+0x46>
{
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800b610:	6803      	ldr	r3, [r0, #0]
 800b612:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800b616:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b618:	6803      	ldr	r3, [r0, #0]
 800b61a:	f245 5255 	movw	r2, #21845	; 0x5555
 800b61e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b620:	6803      	ldr	r3, [r0, #0]
 800b622:	6842      	ldr	r2, [r0, #4]
 800b624:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b626:	6803      	ldr	r3, [r0, #0]
 800b628:	6882      	ldr	r2, [r0, #8]
 800b62a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800b62c:	f7fe fa8c 	bl	8009b48 <HAL_GetTick>
 800b630:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	68da      	ldr	r2, [r3, #12]
 800b636:	b132      	cbz	r2, 800b646 <HAL_IWDG_Init+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b638:	f7fe fa86 	bl	8009b48 <HAL_GetTick>
 800b63c:	1b40      	subs	r0, r0, r5
 800b63e:	2830      	cmp	r0, #48	; 0x30
 800b640:	d9f7      	bls.n	800b632 <HAL_IWDG_Init+0x28>
    {
      return HAL_TIMEOUT;
 800b642:	2003      	movs	r0, #3
 800b644:	e003      	b.n	800b64e <HAL_IWDG_Init+0x44>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b646:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800b64a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b64c:	2000      	movs	r0, #0
}
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b650:	2001      	movs	r0, #1
}
 800b652:	4770      	bx	lr

0800b654 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b654:	6803      	ldr	r3, [r0, #0]
 800b656:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800b65a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800b65c:	2000      	movs	r0, #0
 800b65e:	4770      	bx	lr

0800b660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b660:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b662:	4b08      	ldr	r3, [pc, #32]	; (800b684 <RCC_Delay+0x24>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a08      	ldr	r2, [pc, #32]	; (800b688 <RCC_Delay+0x28>)
 800b668:	fba2 2303 	umull	r2, r3, r2, r3
 800b66c:	0a5b      	lsrs	r3, r3, #9
 800b66e:	fb00 f003 	mul.w	r0, r0, r3
 800b672:	9001      	str	r0, [sp, #4]
  do 
  {
    __NOP();
 800b674:	bf00      	nop
  } 
  while (Delay --);
 800b676:	9b01      	ldr	r3, [sp, #4]
 800b678:	1e5a      	subs	r2, r3, #1
 800b67a:	9201      	str	r2, [sp, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1f9      	bne.n	800b674 <RCC_Delay+0x14>
}
 800b680:	b002      	add	sp, #8
 800b682:	4770      	bx	lr
 800b684:	2000010c 	.word	0x2000010c
 800b688:	10624dd3 	.word	0x10624dd3

0800b68c <HAL_RCC_OscConfig>:
{
 800b68c:	b570      	push	{r4, r5, r6, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b692:	6803      	ldr	r3, [r0, #0]
 800b694:	f013 0f01 	tst.w	r3, #1
 800b698:	d02c      	beq.n	800b6f4 <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800b69a:	4bab      	ldr	r3, [pc, #684]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	f003 030c 	and.w	r3, r3, #12
 800b6a2:	2b04      	cmp	r3, #4
 800b6a4:	d01d      	beq.n	800b6e2 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b6a6:	4ba8      	ldr	r3, [pc, #672]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	f003 030c 	and.w	r3, r3, #12
 800b6ae:	2b08      	cmp	r3, #8
 800b6b0:	d012      	beq.n	800b6d8 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b6b2:	6863      	ldr	r3, [r4, #4]
 800b6b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b8:	d041      	beq.n	800b73e <HAL_RCC_OscConfig+0xb2>
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d155      	bne.n	800b76a <HAL_RCC_OscConfig+0xde>
 800b6be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6c2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b6cc:	601a      	str	r2, [r3, #0]
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b6d4:	601a      	str	r2, [r3, #0]
 800b6d6:	e037      	b.n	800b748 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b6d8:	4b9b      	ldr	r3, [pc, #620]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800b6e0:	d0e7      	beq.n	800b6b2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6e2:	4b99      	ldr	r3, [pc, #612]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b6ea:	d003      	beq.n	800b6f4 <HAL_RCC_OscConfig+0x68>
 800b6ec:	6863      	ldr	r3, [r4, #4]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f000 81ae 	beq.w	800ba50 <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	f013 0f02 	tst.w	r3, #2
 800b6fa:	d076      	beq.n	800b7ea <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800b6fc:	4b92      	ldr	r3, [pc, #584]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	f013 0f0c 	tst.w	r3, #12
 800b704:	d05f      	beq.n	800b7c6 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b706:	4b90      	ldr	r3, [pc, #576]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	f003 030c 	and.w	r3, r3, #12
 800b70e:	2b08      	cmp	r3, #8
 800b710:	d054      	beq.n	800b7bc <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b712:	6923      	ldr	r3, [r4, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	f000 808a 	beq.w	800b82e <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 800b71a:	4b8c      	ldr	r3, [pc, #560]	; (800b94c <HAL_RCC_OscConfig+0x2c0>)
 800b71c:	2201      	movs	r2, #1
 800b71e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b720:	f7fe fa12 	bl	8009b48 <HAL_GetTick>
 800b724:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b726:	4b88      	ldr	r3, [pc, #544]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f013 0f02 	tst.w	r3, #2
 800b72e:	d175      	bne.n	800b81c <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b730:	f7fe fa0a 	bl	8009b48 <HAL_GetTick>
 800b734:	1b40      	subs	r0, r0, r5
 800b736:	2802      	cmp	r0, #2
 800b738:	d9f5      	bls.n	800b726 <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 800b73a:	2003      	movs	r0, #3
 800b73c:	e18b      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b73e:	4a82      	ldr	r2, [pc, #520]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b740:	6813      	ldr	r3, [r2, #0]
 800b742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b746:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b748:	6863      	ldr	r3, [r4, #4]
 800b74a:	b343      	cbz	r3, 800b79e <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 800b74c:	f7fe f9fc 	bl	8009b48 <HAL_GetTick>
 800b750:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b752:	4b7d      	ldr	r3, [pc, #500]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b75a:	d1cb      	bne.n	800b6f4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b75c:	f7fe f9f4 	bl	8009b48 <HAL_GetTick>
 800b760:	1b40      	subs	r0, r0, r5
 800b762:	2864      	cmp	r0, #100	; 0x64
 800b764:	d9f5      	bls.n	800b752 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 800b766:	2003      	movs	r0, #3
 800b768:	e175      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b76a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b76e:	d009      	beq.n	800b784 <HAL_RCC_OscConfig+0xf8>
 800b770:	4b75      	ldr	r3, [pc, #468]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b780:	601a      	str	r2, [r3, #0]
 800b782:	e7e1      	b.n	800b748 <HAL_RCC_OscConfig+0xbc>
 800b784:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b788:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b79a:	601a      	str	r2, [r3, #0]
 800b79c:	e7d4      	b.n	800b748 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 800b79e:	f7fe f9d3 	bl	8009b48 <HAL_GetTick>
 800b7a2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b7a4:	4b68      	ldr	r3, [pc, #416]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b7ac:	d0a2      	beq.n	800b6f4 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b7ae:	f7fe f9cb 	bl	8009b48 <HAL_GetTick>
 800b7b2:	1b40      	subs	r0, r0, r5
 800b7b4:	2864      	cmp	r0, #100	; 0x64
 800b7b6:	d9f5      	bls.n	800b7a4 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 800b7b8:	2003      	movs	r0, #3
 800b7ba:	e14c      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b7bc:	4b62      	ldr	r3, [pc, #392]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800b7c4:	d1a5      	bne.n	800b712 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b7c6:	4b60      	ldr	r3, [pc, #384]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f013 0f02 	tst.w	r3, #2
 800b7ce:	d004      	beq.n	800b7da <HAL_RCC_OscConfig+0x14e>
 800b7d0:	6923      	ldr	r3, [r4, #16]
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d001      	beq.n	800b7da <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 800b7d6:	2001      	movs	r0, #1
 800b7d8:	e13d      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7da:	4a5b      	ldr	r2, [pc, #364]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b7dc:	6813      	ldr	r3, [r2, #0]
 800b7de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b7e2:	6961      	ldr	r1, [r4, #20]
 800b7e4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b7e8:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	f013 0f08 	tst.w	r3, #8
 800b7f0:	d032      	beq.n	800b858 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b7f2:	69a3      	ldr	r3, [r4, #24]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d05b      	beq.n	800b8b0 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 800b7f8:	4b55      	ldr	r3, [pc, #340]	; (800b950 <HAL_RCC_OscConfig+0x2c4>)
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800b7fe:	f7fe f9a3 	bl	8009b48 <HAL_GetTick>
 800b802:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b804:	4b50      	ldr	r3, [pc, #320]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b808:	f013 0f02 	tst.w	r3, #2
 800b80c:	d121      	bne.n	800b852 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b80e:	f7fe f99b 	bl	8009b48 <HAL_GetTick>
 800b812:	1b40      	subs	r0, r0, r5
 800b814:	2802      	cmp	r0, #2
 800b816:	d9f5      	bls.n	800b804 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 800b818:	2003      	movs	r0, #3
 800b81a:	e11c      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b81c:	4a4a      	ldr	r2, [pc, #296]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b81e:	6813      	ldr	r3, [r2, #0]
 800b820:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b824:	6961      	ldr	r1, [r4, #20]
 800b826:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b82a:	6013      	str	r3, [r2, #0]
 800b82c:	e7dd      	b.n	800b7ea <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 800b82e:	4b47      	ldr	r3, [pc, #284]	; (800b94c <HAL_RCC_OscConfig+0x2c0>)
 800b830:	2200      	movs	r2, #0
 800b832:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b834:	f7fe f988 	bl	8009b48 <HAL_GetTick>
 800b838:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b83a:	4b43      	ldr	r3, [pc, #268]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f013 0f02 	tst.w	r3, #2
 800b842:	d0d2      	beq.n	800b7ea <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b844:	f7fe f980 	bl	8009b48 <HAL_GetTick>
 800b848:	1b40      	subs	r0, r0, r5
 800b84a:	2802      	cmp	r0, #2
 800b84c:	d9f5      	bls.n	800b83a <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 800b84e:	2003      	movs	r0, #3
 800b850:	e101      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
      RCC_Delay(1);
 800b852:	2001      	movs	r0, #1
 800b854:	f7ff ff04 	bl	800b660 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	f013 0f04 	tst.w	r3, #4
 800b85e:	f000 8097 	beq.w	800b990 <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b862:	4b39      	ldr	r3, [pc, #228]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b864:	69db      	ldr	r3, [r3, #28]
 800b866:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800b86a:	d133      	bne.n	800b8d4 <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_PWR_CLK_ENABLE();
 800b86c:	4b36      	ldr	r3, [pc, #216]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b86e:	69da      	ldr	r2, [r3, #28]
 800b870:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b874:	61da      	str	r2, [r3, #28]
 800b876:	69db      	ldr	r3, [r3, #28]
 800b878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b87c:	9301      	str	r3, [sp, #4]
 800b87e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800b880:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b882:	4b34      	ldr	r3, [pc, #208]	; (800b954 <HAL_RCC_OscConfig+0x2c8>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b88a:	d025      	beq.n	800b8d8 <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b88c:	68e3      	ldr	r3, [r4, #12]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d036      	beq.n	800b900 <HAL_RCC_OscConfig+0x274>
 800b892:	2b00      	cmp	r3, #0
 800b894:	d14c      	bne.n	800b930 <HAL_RCC_OscConfig+0x2a4>
 800b896:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b89a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800b89e:	6a1a      	ldr	r2, [r3, #32]
 800b8a0:	f022 0201 	bic.w	r2, r2, #1
 800b8a4:	621a      	str	r2, [r3, #32]
 800b8a6:	6a1a      	ldr	r2, [r3, #32]
 800b8a8:	f022 0204 	bic.w	r2, r2, #4
 800b8ac:	621a      	str	r2, [r3, #32]
 800b8ae:	e02c      	b.n	800b90a <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_DISABLE();
 800b8b0:	4b27      	ldr	r3, [pc, #156]	; (800b950 <HAL_RCC_OscConfig+0x2c4>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800b8b6:	f7fe f947 	bl	8009b48 <HAL_GetTick>
 800b8ba:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b8bc:	4b22      	ldr	r3, [pc, #136]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c0:	f013 0f02 	tst.w	r3, #2
 800b8c4:	d0c8      	beq.n	800b858 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b8c6:	f7fe f93f 	bl	8009b48 <HAL_GetTick>
 800b8ca:	1b40      	subs	r0, r0, r5
 800b8cc:	2802      	cmp	r0, #2
 800b8ce:	d9f5      	bls.n	800b8bc <HAL_RCC_OscConfig+0x230>
          return HAL_TIMEOUT;
 800b8d0:	2003      	movs	r0, #3
 800b8d2:	e0c0      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 800b8d4:	2500      	movs	r5, #0
 800b8d6:	e7d4      	b.n	800b882 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b8d8:	4a1e      	ldr	r2, [pc, #120]	; (800b954 <HAL_RCC_OscConfig+0x2c8>)
 800b8da:	6813      	ldr	r3, [r2, #0]
 800b8dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8e0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800b8e2:	f7fe f931 	bl	8009b48 <HAL_GetTick>
 800b8e6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b8e8:	4b1a      	ldr	r3, [pc, #104]	; (800b954 <HAL_RCC_OscConfig+0x2c8>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 800b8f0:	d1cc      	bne.n	800b88c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8f2:	f7fe f929 	bl	8009b48 <HAL_GetTick>
 800b8f6:	1b80      	subs	r0, r0, r6
 800b8f8:	2864      	cmp	r0, #100	; 0x64
 800b8fa:	d9f5      	bls.n	800b8e8 <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 800b8fc:	2003      	movs	r0, #3
 800b8fe:	e0aa      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b900:	4a11      	ldr	r2, [pc, #68]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b902:	6a13      	ldr	r3, [r2, #32]
 800b904:	f043 0301 	orr.w	r3, r3, #1
 800b908:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b90a:	68e3      	ldr	r3, [r4, #12]
 800b90c:	b373      	cbz	r3, 800b96c <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 800b90e:	f7fe f91b 	bl	8009b48 <HAL_GetTick>
 800b912:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b914:	4b0c      	ldr	r3, [pc, #48]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b916:	6a1b      	ldr	r3, [r3, #32]
 800b918:	f013 0f02 	tst.w	r3, #2
 800b91c:	d137      	bne.n	800b98e <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b91e:	f7fe f913 	bl	8009b48 <HAL_GetTick>
 800b922:	1b80      	subs	r0, r0, r6
 800b924:	f241 3388 	movw	r3, #5000	; 0x1388
 800b928:	4298      	cmp	r0, r3
 800b92a:	d9f3      	bls.n	800b914 <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 800b92c:	2003      	movs	r0, #3
 800b92e:	e092      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b930:	2b05      	cmp	r3, #5
 800b932:	d011      	beq.n	800b958 <HAL_RCC_OscConfig+0x2cc>
 800b934:	4b04      	ldr	r3, [pc, #16]	; (800b948 <HAL_RCC_OscConfig+0x2bc>)
 800b936:	6a1a      	ldr	r2, [r3, #32]
 800b938:	f022 0201 	bic.w	r2, r2, #1
 800b93c:	621a      	str	r2, [r3, #32]
 800b93e:	6a1a      	ldr	r2, [r3, #32]
 800b940:	f022 0204 	bic.w	r2, r2, #4
 800b944:	621a      	str	r2, [r3, #32]
 800b946:	e7e0      	b.n	800b90a <HAL_RCC_OscConfig+0x27e>
 800b948:	40021000 	.word	0x40021000
 800b94c:	42420000 	.word	0x42420000
 800b950:	42420480 	.word	0x42420480
 800b954:	40007000 	.word	0x40007000
 800b958:	4b41      	ldr	r3, [pc, #260]	; (800ba60 <HAL_RCC_OscConfig+0x3d4>)
 800b95a:	6a1a      	ldr	r2, [r3, #32]
 800b95c:	f042 0204 	orr.w	r2, r2, #4
 800b960:	621a      	str	r2, [r3, #32]
 800b962:	6a1a      	ldr	r2, [r3, #32]
 800b964:	f042 0201 	orr.w	r2, r2, #1
 800b968:	621a      	str	r2, [r3, #32]
 800b96a:	e7ce      	b.n	800b90a <HAL_RCC_OscConfig+0x27e>
      tickstart = HAL_GetTick();
 800b96c:	f7fe f8ec 	bl	8009b48 <HAL_GetTick>
 800b970:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b972:	4b3b      	ldr	r3, [pc, #236]	; (800ba60 <HAL_RCC_OscConfig+0x3d4>)
 800b974:	6a1b      	ldr	r3, [r3, #32]
 800b976:	f013 0f02 	tst.w	r3, #2
 800b97a:	d008      	beq.n	800b98e <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b97c:	f7fe f8e4 	bl	8009b48 <HAL_GetTick>
 800b980:	1b80      	subs	r0, r0, r6
 800b982:	f241 3388 	movw	r3, #5000	; 0x1388
 800b986:	4298      	cmp	r0, r3
 800b988:	d9f3      	bls.n	800b972 <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 800b98a:	2003      	movs	r0, #3
 800b98c:	e063      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 800b98e:	b9e5      	cbnz	r5, 800b9ca <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b990:	69e3      	ldr	r3, [r4, #28]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d05e      	beq.n	800ba54 <HAL_RCC_OscConfig+0x3c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b996:	4a32      	ldr	r2, [pc, #200]	; (800ba60 <HAL_RCC_OscConfig+0x3d4>)
 800b998:	6852      	ldr	r2, [r2, #4]
 800b99a:	f002 020c 	and.w	r2, r2, #12
 800b99e:	2a08      	cmp	r2, #8
 800b9a0:	d05b      	beq.n	800ba5a <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d017      	beq.n	800b9d6 <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 800b9a6:	4b2f      	ldr	r3, [pc, #188]	; (800ba64 <HAL_RCC_OscConfig+0x3d8>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b9ac:	f7fe f8cc 	bl	8009b48 <HAL_GetTick>
 800b9b0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b9b2:	4b2b      	ldr	r3, [pc, #172]	; (800ba60 <HAL_RCC_OscConfig+0x3d4>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b9ba:	d047      	beq.n	800ba4c <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9bc:	f7fe f8c4 	bl	8009b48 <HAL_GetTick>
 800b9c0:	1b00      	subs	r0, r0, r4
 800b9c2:	2802      	cmp	r0, #2
 800b9c4:	d9f5      	bls.n	800b9b2 <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 800b9c6:	2003      	movs	r0, #3
 800b9c8:	e045      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9ca:	4a25      	ldr	r2, [pc, #148]	; (800ba60 <HAL_RCC_OscConfig+0x3d4>)
 800b9cc:	69d3      	ldr	r3, [r2, #28]
 800b9ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9d2:	61d3      	str	r3, [r2, #28]
 800b9d4:	e7dc      	b.n	800b990 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 800b9d6:	4b23      	ldr	r3, [pc, #140]	; (800ba64 <HAL_RCC_OscConfig+0x3d8>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b9dc:	f7fe f8b4 	bl	8009b48 <HAL_GetTick>
 800b9e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b9e2:	4b1f      	ldr	r3, [pc, #124]	; (800ba60 <HAL_RCC_OscConfig+0x3d4>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800b9ea:	d006      	beq.n	800b9fa <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b9ec:	f7fe f8ac 	bl	8009b48 <HAL_GetTick>
 800b9f0:	1b40      	subs	r0, r0, r5
 800b9f2:	2802      	cmp	r0, #2
 800b9f4:	d9f5      	bls.n	800b9e2 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 800b9f6:	2003      	movs	r0, #3
 800b9f8:	e02d      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b9fa:	6a23      	ldr	r3, [r4, #32]
 800b9fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba00:	d01a      	beq.n	800ba38 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba02:	4917      	ldr	r1, [pc, #92]	; (800ba60 <HAL_RCC_OscConfig+0x3d4>)
 800ba04:	684b      	ldr	r3, [r1, #4]
 800ba06:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800ba0a:	6a22      	ldr	r2, [r4, #32]
 800ba0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba0e:	4302      	orrs	r2, r0
 800ba10:	4313      	orrs	r3, r2
 800ba12:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800ba14:	4b13      	ldr	r3, [pc, #76]	; (800ba64 <HAL_RCC_OscConfig+0x3d8>)
 800ba16:	2201      	movs	r2, #1
 800ba18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ba1a:	f7fe f895 	bl	8009b48 <HAL_GetTick>
 800ba1e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ba20:	4b0f      	ldr	r3, [pc, #60]	; (800ba60 <HAL_RCC_OscConfig+0x3d4>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800ba28:	d10e      	bne.n	800ba48 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba2a:	f7fe f88d 	bl	8009b48 <HAL_GetTick>
 800ba2e:	1b00      	subs	r0, r0, r4
 800ba30:	2802      	cmp	r0, #2
 800ba32:	d9f5      	bls.n	800ba20 <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 800ba34:	2003      	movs	r0, #3
 800ba36:	e00e      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ba38:	4a09      	ldr	r2, [pc, #36]	; (800ba60 <HAL_RCC_OscConfig+0x3d4>)
 800ba3a:	6853      	ldr	r3, [r2, #4]
 800ba3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ba40:	68a1      	ldr	r1, [r4, #8]
 800ba42:	430b      	orrs	r3, r1
 800ba44:	6053      	str	r3, [r2, #4]
 800ba46:	e7dc      	b.n	800ba02 <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 800ba48:	2000      	movs	r0, #0
 800ba4a:	e004      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	e002      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 800ba50:	2001      	movs	r0, #1
 800ba52:	e000      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 800ba54:	2000      	movs	r0, #0
}
 800ba56:	b002      	add	sp, #8
 800ba58:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800ba5a:	2001      	movs	r0, #1
 800ba5c:	e7fb      	b.n	800ba56 <HAL_RCC_OscConfig+0x3ca>
 800ba5e:	bf00      	nop
 800ba60:	40021000 	.word	0x40021000
 800ba64:	42420060 	.word	0x42420060

0800ba68 <HAL_RCC_GetSysClockFreq>:
{
 800ba68:	b410      	push	{r4}
 800ba6a:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800ba6c:	4c16      	ldr	r4, [pc, #88]	; (800bac8 <HAL_RCC_GetSysClockFreq+0x60>)
 800ba6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ba72:	f10d 0c18 	add.w	ip, sp, #24
 800ba76:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800ba7a:	8a23      	ldrh	r3, [r4, #16]
 800ba7c:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800ba80:	4b12      	ldr	r3, [pc, #72]	; (800bacc <HAL_RCC_GetSysClockFreq+0x64>)
 800ba82:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800ba84:	f003 020c 	and.w	r2, r3, #12
 800ba88:	2a08      	cmp	r2, #8
 800ba8a:	d11a      	bne.n	800bac2 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ba8c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800ba90:	4462      	add	r2, ip
 800ba92:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ba96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800ba9a:	d105      	bne.n	800baa8 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ba9c:	4b0c      	ldr	r3, [pc, #48]	; (800bad0 <HAL_RCC_GetSysClockFreq+0x68>)
 800ba9e:	fb03 f000 	mul.w	r0, r3, r0
}
 800baa2:	b007      	add	sp, #28
 800baa4:	bc10      	pop	{r4}
 800baa6:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800baa8:	4b08      	ldr	r3, [pc, #32]	; (800bacc <HAL_RCC_GetSysClockFreq+0x64>)
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800bab0:	4463      	add	r3, ip
 800bab2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800bab6:	4b07      	ldr	r3, [pc, #28]	; (800bad4 <HAL_RCC_GetSysClockFreq+0x6c>)
 800bab8:	fbb3 f3f2 	udiv	r3, r3, r2
 800babc:	fb00 f003 	mul.w	r0, r0, r3
 800bac0:	e7ef      	b.n	800baa2 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 800bac2:	4804      	ldr	r0, [pc, #16]	; (800bad4 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800bac4:	e7ed      	b.n	800baa2 <HAL_RCC_GetSysClockFreq+0x3a>
 800bac6:	bf00      	nop
 800bac8:	0800dc1c 	.word	0x0800dc1c
 800bacc:	40021000 	.word	0x40021000
 800bad0:	003d0900 	.word	0x003d0900
 800bad4:	007a1200 	.word	0x007a1200

0800bad8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800bad8:	4b59      	ldr	r3, [pc, #356]	; (800bc40 <HAL_RCC_ClockConfig+0x168>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 0307 	and.w	r3, r3, #7
 800bae0:	428b      	cmp	r3, r1
 800bae2:	d20c      	bcs.n	800bafe <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bae4:	4a56      	ldr	r2, [pc, #344]	; (800bc40 <HAL_RCC_ClockConfig+0x168>)
 800bae6:	6813      	ldr	r3, [r2, #0]
 800bae8:	f023 0307 	bic.w	r3, r3, #7
 800baec:	430b      	orrs	r3, r1
 800baee:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800baf0:	6813      	ldr	r3, [r2, #0]
 800baf2:	f003 0307 	and.w	r3, r3, #7
 800baf6:	428b      	cmp	r3, r1
 800baf8:	d001      	beq.n	800bafe <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 800bafa:	2001      	movs	r0, #1
}
 800bafc:	4770      	bx	lr
{
 800bafe:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb00:	6803      	ldr	r3, [r0, #0]
 800bb02:	f013 0f02 	tst.w	r3, #2
 800bb06:	d006      	beq.n	800bb16 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bb08:	4a4e      	ldr	r2, [pc, #312]	; (800bc44 <HAL_RCC_ClockConfig+0x16c>)
 800bb0a:	6853      	ldr	r3, [r2, #4]
 800bb0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb10:	6884      	ldr	r4, [r0, #8]
 800bb12:	4323      	orrs	r3, r4
 800bb14:	6053      	str	r3, [r2, #4]
 800bb16:	460c      	mov	r4, r1
 800bb18:	4605      	mov	r5, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bb1a:	6803      	ldr	r3, [r0, #0]
 800bb1c:	f013 0f01 	tst.w	r3, #1
 800bb20:	d052      	beq.n	800bbc8 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb22:	6843      	ldr	r3, [r0, #4]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d023      	beq.n	800bb70 <HAL_RCC_ClockConfig+0x98>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d028      	beq.n	800bb7e <HAL_RCC_ClockConfig+0xa6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb2c:	4a45      	ldr	r2, [pc, #276]	; (800bc44 <HAL_RCC_ClockConfig+0x16c>)
 800bb2e:	6812      	ldr	r2, [r2, #0]
 800bb30:	f012 0f02 	tst.w	r2, #2
 800bb34:	f000 8082 	beq.w	800bc3c <HAL_RCC_ClockConfig+0x164>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bb38:	4942      	ldr	r1, [pc, #264]	; (800bc44 <HAL_RCC_ClockConfig+0x16c>)
 800bb3a:	684a      	ldr	r2, [r1, #4]
 800bb3c:	f022 0203 	bic.w	r2, r2, #3
 800bb40:	4313      	orrs	r3, r2
 800bb42:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800bb44:	f7fe f800 	bl	8009b48 <HAL_GetTick>
 800bb48:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb4a:	686b      	ldr	r3, [r5, #4]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d01d      	beq.n	800bb8c <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d02a      	beq.n	800bbaa <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800bb54:	4b3b      	ldr	r3, [pc, #236]	; (800bc44 <HAL_RCC_ClockConfig+0x16c>)
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	f013 0f0c 	tst.w	r3, #12
 800bb5c:	d034      	beq.n	800bbc8 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb5e:	f7fd fff3 	bl	8009b48 <HAL_GetTick>
 800bb62:	1b80      	subs	r0, r0, r6
 800bb64:	f241 3388 	movw	r3, #5000	; 0x1388
 800bb68:	4298      	cmp	r0, r3
 800bb6a:	d9f3      	bls.n	800bb54 <HAL_RCC_ClockConfig+0x7c>
          return HAL_TIMEOUT;
 800bb6c:	2003      	movs	r0, #3
 800bb6e:	e064      	b.n	800bc3a <HAL_RCC_ClockConfig+0x162>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb70:	4a34      	ldr	r2, [pc, #208]	; (800bc44 <HAL_RCC_ClockConfig+0x16c>)
 800bb72:	6812      	ldr	r2, [r2, #0]
 800bb74:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800bb78:	d1de      	bne.n	800bb38 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 800bb7a:	2001      	movs	r0, #1
 800bb7c:	e05d      	b.n	800bc3a <HAL_RCC_ClockConfig+0x162>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb7e:	4a31      	ldr	r2, [pc, #196]	; (800bc44 <HAL_RCC_ClockConfig+0x16c>)
 800bb80:	6812      	ldr	r2, [r2, #0]
 800bb82:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800bb86:	d1d7      	bne.n	800bb38 <HAL_RCC_ClockConfig+0x60>
        return HAL_ERROR;
 800bb88:	2001      	movs	r0, #1
 800bb8a:	e056      	b.n	800bc3a <HAL_RCC_ClockConfig+0x162>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800bb8c:	4b2d      	ldr	r3, [pc, #180]	; (800bc44 <HAL_RCC_ClockConfig+0x16c>)
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	f003 030c 	and.w	r3, r3, #12
 800bb94:	2b04      	cmp	r3, #4
 800bb96:	d017      	beq.n	800bbc8 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb98:	f7fd ffd6 	bl	8009b48 <HAL_GetTick>
 800bb9c:	1b80      	subs	r0, r0, r6
 800bb9e:	f241 3388 	movw	r3, #5000	; 0x1388
 800bba2:	4298      	cmp	r0, r3
 800bba4:	d9f2      	bls.n	800bb8c <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 800bba6:	2003      	movs	r0, #3
 800bba8:	e047      	b.n	800bc3a <HAL_RCC_ClockConfig+0x162>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bbaa:	4b26      	ldr	r3, [pc, #152]	; (800bc44 <HAL_RCC_ClockConfig+0x16c>)
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	f003 030c 	and.w	r3, r3, #12
 800bbb2:	2b08      	cmp	r3, #8
 800bbb4:	d008      	beq.n	800bbc8 <HAL_RCC_ClockConfig+0xf0>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bbb6:	f7fd ffc7 	bl	8009b48 <HAL_GetTick>
 800bbba:	1b80      	subs	r0, r0, r6
 800bbbc:	f241 3388 	movw	r3, #5000	; 0x1388
 800bbc0:	4298      	cmp	r0, r3
 800bbc2:	d9f2      	bls.n	800bbaa <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 800bbc4:	2003      	movs	r0, #3
 800bbc6:	e038      	b.n	800bc3a <HAL_RCC_ClockConfig+0x162>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800bbc8:	4b1d      	ldr	r3, [pc, #116]	; (800bc40 <HAL_RCC_ClockConfig+0x168>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 0307 	and.w	r3, r3, #7
 800bbd0:	42a3      	cmp	r3, r4
 800bbd2:	d90c      	bls.n	800bbee <HAL_RCC_ClockConfig+0x116>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbd4:	4a1a      	ldr	r2, [pc, #104]	; (800bc40 <HAL_RCC_ClockConfig+0x168>)
 800bbd6:	6813      	ldr	r3, [r2, #0]
 800bbd8:	f023 0307 	bic.w	r3, r3, #7
 800bbdc:	4323      	orrs	r3, r4
 800bbde:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800bbe0:	6813      	ldr	r3, [r2, #0]
 800bbe2:	f003 0307 	and.w	r3, r3, #7
 800bbe6:	42a3      	cmp	r3, r4
 800bbe8:	d001      	beq.n	800bbee <HAL_RCC_ClockConfig+0x116>
      return HAL_ERROR;
 800bbea:	2001      	movs	r0, #1
 800bbec:	e025      	b.n	800bc3a <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbee:	682b      	ldr	r3, [r5, #0]
 800bbf0:	f013 0f04 	tst.w	r3, #4
 800bbf4:	d006      	beq.n	800bc04 <HAL_RCC_ClockConfig+0x12c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bbf6:	4a13      	ldr	r2, [pc, #76]	; (800bc44 <HAL_RCC_ClockConfig+0x16c>)
 800bbf8:	6853      	ldr	r3, [r2, #4]
 800bbfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bbfe:	68e9      	ldr	r1, [r5, #12]
 800bc00:	430b      	orrs	r3, r1
 800bc02:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc04:	682b      	ldr	r3, [r5, #0]
 800bc06:	f013 0f08 	tst.w	r3, #8
 800bc0a:	d007      	beq.n	800bc1c <HAL_RCC_ClockConfig+0x144>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bc0c:	4a0d      	ldr	r2, [pc, #52]	; (800bc44 <HAL_RCC_ClockConfig+0x16c>)
 800bc0e:	6853      	ldr	r3, [r2, #4]
 800bc10:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800bc14:	6929      	ldr	r1, [r5, #16]
 800bc16:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800bc1a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bc1c:	f7ff ff24 	bl	800ba68 <HAL_RCC_GetSysClockFreq>
 800bc20:	4b08      	ldr	r3, [pc, #32]	; (800bc44 <HAL_RCC_ClockConfig+0x16c>)
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800bc28:	4a07      	ldr	r2, [pc, #28]	; (800bc48 <HAL_RCC_ClockConfig+0x170>)
 800bc2a:	5cd3      	ldrb	r3, [r2, r3]
 800bc2c:	40d8      	lsrs	r0, r3
 800bc2e:	4b07      	ldr	r3, [pc, #28]	; (800bc4c <HAL_RCC_ClockConfig+0x174>)
 800bc30:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800bc32:	200f      	movs	r0, #15
 800bc34:	f7fd ff8c 	bl	8009b50 <HAL_InitTick>
  return HAL_OK;
 800bc38:	2000      	movs	r0, #0
}
 800bc3a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800bc3c:	2001      	movs	r0, #1
 800bc3e:	e7fc      	b.n	800bc3a <HAL_RCC_ClockConfig+0x162>
 800bc40:	40022000 	.word	0x40022000
 800bc44:	40021000 	.word	0x40021000
 800bc48:	0800d064 	.word	0x0800d064
 800bc4c:	2000010c 	.word	0x2000010c

0800bc50 <HAL_RCC_GetHCLKFreq>:
}
 800bc50:	4b01      	ldr	r3, [pc, #4]	; (800bc58 <HAL_RCC_GetHCLKFreq+0x8>)
 800bc52:	6818      	ldr	r0, [r3, #0]
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	2000010c 	.word	0x2000010c

0800bc5c <HAL_RCC_GetPCLK1Freq>:
{
 800bc5c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bc5e:	f7ff fff7 	bl	800bc50 <HAL_RCC_GetHCLKFreq>
 800bc62:	4b04      	ldr	r3, [pc, #16]	; (800bc74 <HAL_RCC_GetPCLK1Freq+0x18>)
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800bc6a:	4a03      	ldr	r2, [pc, #12]	; (800bc78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800bc6c:	5cd3      	ldrb	r3, [r2, r3]
}    
 800bc6e:	40d8      	lsrs	r0, r3
 800bc70:	bd08      	pop	{r3, pc}
 800bc72:	bf00      	nop
 800bc74:	40021000 	.word	0x40021000
 800bc78:	0800d074 	.word	0x0800d074

0800bc7c <HAL_RCC_GetPCLK2Freq>:
{
 800bc7c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bc7e:	f7ff ffe7 	bl	800bc50 <HAL_RCC_GetHCLKFreq>
 800bc82:	4b04      	ldr	r3, [pc, #16]	; (800bc94 <HAL_RCC_GetPCLK2Freq+0x18>)
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800bc8a:	4a03      	ldr	r2, [pc, #12]	; (800bc98 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800bc8c:	5cd3      	ldrb	r3, [r2, r3]
} 
 800bc8e:	40d8      	lsrs	r0, r3
 800bc90:	bd08      	pop	{r3, pc}
 800bc92:	bf00      	nop
 800bc94:	40021000 	.word	0x40021000
 800bc98:	0800d074 	.word	0x0800d074

0800bc9c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bc9c:	230f      	movs	r3, #15
 800bc9e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bca0:	4b0b      	ldr	r3, [pc, #44]	; (800bcd0 <HAL_RCC_GetClockConfig+0x34>)
 800bca2:	685a      	ldr	r2, [r3, #4]
 800bca4:	f002 0203 	and.w	r2, r2, #3
 800bca8:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800bcaa:	685a      	ldr	r2, [r3, #4]
 800bcac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800bcb0:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800bcb2:	685a      	ldr	r2, [r3, #4]
 800bcb4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800bcb8:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	08db      	lsrs	r3, r3, #3
 800bcbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcc2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800bcc4:	4b03      	ldr	r3, [pc, #12]	; (800bcd4 <HAL_RCC_GetClockConfig+0x38>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f003 0307 	and.w	r3, r3, #7
 800bccc:	600b      	str	r3, [r1, #0]
}
 800bcce:	4770      	bx	lr
 800bcd0:	40021000 	.word	0x40021000
 800bcd4:	40022000 	.word	0x40022000

0800bcd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bcd8:	b530      	push	{r4, r5, lr}
 800bcda:	b087      	sub	sp, #28
 800bcdc:	4605      	mov	r5, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800bcde:	4c38      	ldr	r4, [pc, #224]	; (800bdc0 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 800bce0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bce4:	f10d 0c18 	add.w	ip, sp, #24
 800bce8:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800bcec:	8a23      	ldrh	r3, [r4, #16]
 800bcee:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800bcf2:	2d02      	cmp	r5, #2
 800bcf4:	d050      	beq.n	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800bcf6:	2d10      	cmp	r5, #16
 800bcf8:	d003      	beq.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 800bcfa:	2d01      	cmp	r5, #1
 800bcfc:	d02b      	beq.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  uint32_t temp_reg = 0U, frequency = 0U;
 800bcfe:	2000      	movs	r0, #0
 800bd00:	e054      	b.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800bd02:	4b30      	ldr	r3, [pc, #192]	; (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800bd04:	685a      	ldr	r2, [r3, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800bd0c:	d050      	beq.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bd0e:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800bd12:	a906      	add	r1, sp, #24
 800bd14:	440b      	add	r3, r1
 800bd16:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bd1a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800bd1e:	d016      	beq.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bd20:	4b28      	ldr	r3, [pc, #160]	; (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800bd28:	440b      	add	r3, r1
 800bd2a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800bd2e:	4b26      	ldr	r3, [pc, #152]	; (800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 800bd30:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd34:	fb00 f003 	mul.w	r0, r0, r3
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800bd38:	4b22      	ldr	r3, [pc, #136]	; (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800bd40:	d134      	bne.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 800bd42:	0040      	lsls	r0, r0, #1
 800bd44:	4b21      	ldr	r3, [pc, #132]	; (800bdcc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 800bd46:	fba3 3000 	umull	r3, r0, r3, r0
 800bd4a:	0840      	lsrs	r0, r0, #1
 800bd4c:	e02e      	b.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bd4e:	4b20      	ldr	r3, [pc, #128]	; (800bdd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 800bd50:	fb03 f000 	mul.w	r0, r3, r0
 800bd54:	e7f0      	b.n	800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800bd56:	4b1b      	ldr	r3, [pc, #108]	; (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800bd58:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800bd5a:	f240 3202 	movw	r2, #770	; 0x302
 800bd5e:	401a      	ands	r2, r3
 800bd60:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800bd64:	d026      	beq.n	800bdb4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800bd66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd6e:	d004      	beq.n	800bd7a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800bd70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd74:	d009      	beq.n	800bd8a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
        frequency = HSE_VALUE / 128U;
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 800bd76:	2000      	movs	r0, #0
 800bd78:	e018      	b.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800bd7a:	4a12      	ldr	r2, [pc, #72]	; (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800bd7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bd7e:	f012 0f02 	tst.w	r2, #2
 800bd82:	d0f5      	beq.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        frequency = LSI_VALUE;
 800bd84:	f649 4040 	movw	r0, #40000	; 0x9c40
 800bd88:	e010      	b.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800bd8a:	4b0e      	ldr	r3, [pc, #56]	; (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800bd92:	d112      	bne.n	800bdba <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        frequency = 0U;
 800bd94:	2000      	movs	r0, #0
 800bd96:	e009      	b.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800bd98:	f7ff ff70 	bl	800bc7c <HAL_RCC_GetPCLK2Freq>
 800bd9c:	4b09      	ldr	r3, [pc, #36]	; (800bdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800bda4:	3301      	adds	r3, #1
 800bda6:	005b      	lsls	r3, r3, #1
 800bda8:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      break;
    }
  }
  return(frequency);
}
 800bdac:	b007      	add	sp, #28
 800bdae:	bd30      	pop	{r4, r5, pc}
  uint32_t temp_reg = 0U, frequency = 0U;
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	e7fb      	b.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = LSE_VALUE;
 800bdb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bdb8:	e7f8      	b.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = HSE_VALUE / 128U;
 800bdba:	f24f 4024 	movw	r0, #62500	; 0xf424
  return(frequency);
 800bdbe:	e7f5      	b.n	800bdac <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800bdc0:	0800dc30 	.word	0x0800dc30
 800bdc4:	40021000 	.word	0x40021000
 800bdc8:	007a1200 	.word	0x007a1200
 800bdcc:	aaaaaaab 	.word	0xaaaaaaab
 800bdd0:	003d0900 	.word	0x003d0900

0800bdd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 800bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd6:	4605      	mov	r5, r0
 800bdd8:	460f      	mov	r7, r1
 800bdda:	4616      	mov	r6, r2
 800bddc:	461c      	mov	r4, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800bdde:	e03b      	b.n	800be58 <SPI_WaitFlagStateUntilTimeout+0x84>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800bde0:	b12c      	cbz	r4, 800bdee <SPI_WaitFlagStateUntilTimeout+0x1a>
 800bde2:	f7fd feb1 	bl	8009b48 <HAL_GetTick>
 800bde6:	9b06      	ldr	r3, [sp, #24]
 800bde8:	1ac0      	subs	r0, r0, r3
 800bdea:	42a0      	cmp	r0, r4
 800bdec:	d334      	bcc.n	800be58 <SPI_WaitFlagStateUntilTimeout+0x84>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bdee:	682a      	ldr	r2, [r5, #0]
 800bdf0:	6853      	ldr	r3, [r2, #4]
 800bdf2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800bdf6:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bdf8:	686b      	ldr	r3, [r5, #4]
 800bdfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdfe:	d00b      	beq.n	800be18 <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800be00:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800be02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be06:	d014      	beq.n	800be32 <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State= HAL_SPI_STATE_READY;
 800be08:	2301      	movs	r3, #1
 800be0a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800be0e:	2300      	movs	r3, #0
 800be10:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 800be14:	2003      	movs	r0, #3
 800be16:	e027      	b.n	800be68 <SPI_WaitFlagStateUntilTimeout+0x94>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be18:	68ab      	ldr	r3, [r5, #8]
 800be1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be1e:	d002      	beq.n	800be26 <SPI_WaitFlagStateUntilTimeout+0x52>
 800be20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be24:	d1ec      	bne.n	800be00 <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 800be26:	682a      	ldr	r2, [r5, #0]
 800be28:	6813      	ldr	r3, [r2, #0]
 800be2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be2e:	6013      	str	r3, [r2, #0]
 800be30:	e7e6      	b.n	800be00 <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 800be32:	682a      	ldr	r2, [r5, #0]
 800be34:	6813      	ldr	r3, [r2, #0]
 800be36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be3a:	041b      	lsls	r3, r3, #16
 800be3c:	0c1b      	lsrs	r3, r3, #16
 800be3e:	6013      	str	r3, [r2, #0]
 800be40:	682a      	ldr	r2, [r5, #0]
 800be42:	6813      	ldr	r3, [r2, #0]
 800be44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	e7dd      	b.n	800be08 <SPI_WaitFlagStateUntilTimeout+0x34>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800be4c:	2301      	movs	r3, #1
 800be4e:	42b3      	cmp	r3, r6
 800be50:	d009      	beq.n	800be66 <SPI_WaitFlagStateUntilTimeout+0x92>
    if(Timeout != HAL_MAX_DELAY)
 800be52:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800be56:	d1c3      	bne.n	800bde0 <SPI_WaitFlagStateUntilTimeout+0xc>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800be58:	682b      	ldr	r3, [r5, #0]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	ea37 0303 	bics.w	r3, r7, r3
 800be60:	d0f4      	beq.n	800be4c <SPI_WaitFlagStateUntilTimeout+0x78>
 800be62:	2300      	movs	r3, #0
 800be64:	e7f3      	b.n	800be4e <SPI_WaitFlagStateUntilTimeout+0x7a>
      }
    }
  }

  return HAL_OK;
 800be66:	2000      	movs	r0, #0
}
 800be68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be6a <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800be6a:	b510      	push	{r4, lr}
 800be6c:	b082      	sub	sp, #8
 800be6e:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800be70:	9200      	str	r2, [sp, #0]
 800be72:	460b      	mov	r3, r1
 800be74:	2200      	movs	r2, #0
 800be76:	2180      	movs	r1, #128	; 0x80
 800be78:	f7ff ffac 	bl	800bdd4 <SPI_WaitFlagStateUntilTimeout>
 800be7c:	4603      	mov	r3, r0
 800be7e:	b910      	cbnz	r0, 800be86 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 800be80:	4618      	mov	r0, r3
 800be82:	b002      	add	sp, #8
 800be84:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800be86:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800be88:	f043 0320 	orr.w	r3, r3, #32
 800be8c:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 800be8e:	2303      	movs	r3, #3
 800be90:	e7f6      	b.n	800be80 <SPI_CheckFlag_BSY+0x16>

0800be92 <HAL_SPI_MspInit>:
}
 800be92:	4770      	bx	lr

0800be94 <HAL_SPI_Init>:
  if(hspi == NULL)
 800be94:	2800      	cmp	r0, #0
 800be96:	d03b      	beq.n	800bf10 <HAL_SPI_Init+0x7c>
{
 800be98:	b510      	push	{r4, lr}
 800be9a:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be9c:	2300      	movs	r3, #0
 800be9e:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 800bea0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d02e      	beq.n	800bf06 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 800bea8:	2302      	movs	r3, #2
 800beaa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800beae:	6822      	ldr	r2, [r4, #0]
 800beb0:	6813      	ldr	r3, [r2, #0]
 800beb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beb6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800beb8:	6863      	ldr	r3, [r4, #4]
 800beba:	68a2      	ldr	r2, [r4, #8]
 800bebc:	4313      	orrs	r3, r2
 800bebe:	68e2      	ldr	r2, [r4, #12]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	6922      	ldr	r2, [r4, #16]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	6962      	ldr	r2, [r4, #20]
 800bec8:	4313      	orrs	r3, r2
 800beca:	69a2      	ldr	r2, [r4, #24]
 800becc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800bed0:	4313      	orrs	r3, r2
 800bed2:	69e2      	ldr	r2, [r4, #28]
 800bed4:	4313      	orrs	r3, r2
 800bed6:	6a22      	ldr	r2, [r4, #32]
 800bed8:	4313      	orrs	r3, r2
 800beda:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bedc:	6822      	ldr	r2, [r4, #0]
 800bede:	430b      	orrs	r3, r1
 800bee0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bee2:	8b63      	ldrh	r3, [r4, #26]
 800bee4:	f003 0304 	and.w	r3, r3, #4
 800bee8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800beea:	6822      	ldr	r2, [r4, #0]
 800beec:	430b      	orrs	r3, r1
 800beee:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bef0:	6822      	ldr	r2, [r4, #0]
 800bef2:	69d3      	ldr	r3, [r2, #28]
 800bef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bef8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800befa:	2000      	movs	r0, #0
 800befc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800befe:	2301      	movs	r3, #1
 800bf00:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800bf04:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800bf06:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800bf0a:	f7ff ffc2 	bl	800be92 <HAL_SPI_MspInit>
 800bf0e:	e7cb      	b.n	800bea8 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 800bf10:	2001      	movs	r0, #1
}
 800bf12:	4770      	bx	lr

0800bf14 <HAL_SPI_TransmitReceive>:
{
 800bf14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf18:	b085      	sub	sp, #20
 800bf1a:	4699      	mov	r9, r3
 800bf1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 800bf1e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	f000 8110 	beq.w	800c148 <HAL_SPI_TransmitReceive+0x234>
 800bf28:	4604      	mov	r4, r0
 800bf2a:	460f      	mov	r7, r1
 800bf2c:	4616      	mov	r6, r2
 800bf2e:	2301      	movs	r3, #1
 800bf30:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800bf34:	f7fd fe08 	bl	8009b48 <HAL_GetTick>
 800bf38:	4680      	mov	r8, r0
  tmp  = hspi->State;
 800bf3a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800bf3e:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;
 800bf40:	6862      	ldr	r2, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d015      	beq.n	800bf72 <HAL_SPI_TransmitReceive+0x5e>
 800bf46:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800bf4a:	d00a      	beq.n	800bf62 <HAL_SPI_TransmitReceive+0x4e>
    errorcode = HAL_BUSY;
 800bf4c:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bf54:	2200      	movs	r2, #0
 800bf56:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	b005      	add	sp, #20
 800bf5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800bf62:	68a2      	ldr	r2, [r4, #8]
 800bf64:	2a00      	cmp	r2, #0
 800bf66:	f040 80e7 	bne.w	800c138 <HAL_SPI_TransmitReceive+0x224>
 800bf6a:	2b04      	cmp	r3, #4
 800bf6c:	d001      	beq.n	800bf72 <HAL_SPI_TransmitReceive+0x5e>
    errorcode = HAL_BUSY;
 800bf6e:	2302      	movs	r3, #2
 800bf70:	e7ed      	b.n	800bf4e <HAL_SPI_TransmitReceive+0x3a>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bf72:	2f00      	cmp	r7, #0
 800bf74:	f000 80e2 	beq.w	800c13c <HAL_SPI_TransmitReceive+0x228>
 800bf78:	2e00      	cmp	r6, #0
 800bf7a:	f000 80e1 	beq.w	800c140 <HAL_SPI_TransmitReceive+0x22c>
 800bf7e:	f1b9 0f00 	cmp.w	r9, #0
 800bf82:	f000 80df 	beq.w	800c144 <HAL_SPI_TransmitReceive+0x230>
  if(hspi->State == HAL_SPI_STATE_READY)
 800bf86:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d02b      	beq.n	800bfe8 <HAL_SPI_TransmitReceive+0xd4>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf90:	2300      	movs	r3, #0
 800bf92:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf94:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bf96:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bf9a:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf9e:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bfa0:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bfa4:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800bfa8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bfaa:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfac:	6823      	ldr	r3, [r4, #0]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	f012 0f40 	tst.w	r2, #64	; 0x40
 800bfb4:	d103      	bne.n	800bfbe <HAL_SPI_TransmitReceive+0xaa>
    __HAL_SPI_ENABLE(hspi);
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfbc:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bfbe:	68e3      	ldr	r3, [r4, #12]
 800bfc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfc4:	d014      	beq.n	800bff0 <HAL_SPI_TransmitReceive+0xdc>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800bfc6:	6863      	ldr	r3, [r4, #4]
 800bfc8:	b11b      	cbz	r3, 800bfd2 <HAL_SPI_TransmitReceive+0xbe>
 800bfca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d107      	bne.n	800bfe2 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 800bfd2:	6823      	ldr	r3, [r4, #0]
 800bfd4:	f817 2b01 	ldrb.w	r2, [r7], #1
 800bfd8:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 800bfda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800bfe2:	f04f 0901 	mov.w	r9, #1
 800bfe6:	e061      	b.n	800c0ac <HAL_SPI_TransmitReceive+0x198>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bfe8:	2305      	movs	r3, #5
 800bfea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 800bfee:	e7cf      	b.n	800bf90 <HAL_SPI_TransmitReceive+0x7c>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800bff0:	6863      	ldr	r3, [r4, #4]
 800bff2:	b11b      	cbz	r3, 800bffc <HAL_SPI_TransmitReceive+0xe8>
 800bff4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d107      	bne.n	800c00c <HAL_SPI_TransmitReceive+0xf8>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800bffc:	6823      	ldr	r3, [r4, #0]
 800bffe:	f837 2b02 	ldrh.w	r2, [r7], #2
 800c002:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800c004:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c006:	3b01      	subs	r3, #1
 800c008:	b29b      	uxth	r3, r3
 800c00a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800c00c:	f04f 0901 	mov.w	r9, #1
 800c010:	e013      	b.n	800c03a <HAL_SPI_TransmitReceive+0x126>
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800c012:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c014:	b29b      	uxth	r3, r3
 800c016:	b16b      	cbz	r3, 800c034 <HAL_SPI_TransmitReceive+0x120>
 800c018:	6823      	ldr	r3, [r4, #0]
 800c01a:	689a      	ldr	r2, [r3, #8]
 800c01c:	f012 0f01 	tst.w	r2, #1
 800c020:	d008      	beq.n	800c034 <HAL_SPI_TransmitReceive+0x120>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 800c028:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c02a:	3b01      	subs	r3, #1
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800c030:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800c034:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800c038:	d11c      	bne.n	800c074 <HAL_SPI_TransmitReceive+0x160>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c03a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	b91b      	cbnz	r3, 800c048 <HAL_SPI_TransmitReceive+0x134>
 800c040:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c042:	b29b      	uxth	r3, r3
 800c044:	2b00      	cmp	r3, #0
 800c046:	d055      	beq.n	800c0f4 <HAL_SPI_TransmitReceive+0x1e0>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800c048:	f1b9 0f00 	cmp.w	r9, #0
 800c04c:	d0e1      	beq.n	800c012 <HAL_SPI_TransmitReceive+0xfe>
 800c04e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c050:	b29b      	uxth	r3, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	d0dd      	beq.n	800c012 <HAL_SPI_TransmitReceive+0xfe>
 800c056:	6823      	ldr	r3, [r4, #0]
 800c058:	689a      	ldr	r2, [r3, #8]
 800c05a:	f012 0f02 	tst.w	r2, #2
 800c05e:	d0d8      	beq.n	800c012 <HAL_SPI_TransmitReceive+0xfe>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800c060:	f837 2b02 	ldrh.w	r2, [r7], #2
 800c064:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800c066:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c068:	3b01      	subs	r3, #1
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800c06e:	f04f 0900 	mov.w	r9, #0
 800c072:	e7ce      	b.n	800c012 <HAL_SPI_TransmitReceive+0xfe>
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800c074:	f7fd fd68 	bl	8009b48 <HAL_GetTick>
 800c078:	eba0 0008 	sub.w	r0, r0, r8
 800c07c:	42a8      	cmp	r0, r5
 800c07e:	d3dc      	bcc.n	800c03a <HAL_SPI_TransmitReceive+0x126>
        errorcode = HAL_TIMEOUT;
 800c080:	2303      	movs	r3, #3
 800c082:	e764      	b.n	800bf4e <HAL_SPI_TransmitReceive+0x3a>
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800c084:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c086:	b29b      	uxth	r3, r3
 800c088:	b16b      	cbz	r3, 800c0a6 <HAL_SPI_TransmitReceive+0x192>
 800c08a:	6823      	ldr	r3, [r4, #0]
 800c08c:	689a      	ldr	r2, [r3, #8]
 800c08e:	f012 0f01 	tst.w	r2, #1
 800c092:	d008      	beq.n	800c0a6 <HAL_SPI_TransmitReceive+0x192>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 800c098:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c09a:	3b01      	subs	r3, #1
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800c0a0:	3601      	adds	r6, #1
        txallowed = 1U;
 800c0a2:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800c0a6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800c0aa:	d11b      	bne.n	800c0e4 <HAL_SPI_TransmitReceive+0x1d0>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	b913      	cbnz	r3, 800c0b8 <HAL_SPI_TransmitReceive+0x1a4>
 800c0b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	b1eb      	cbz	r3, 800c0f4 <HAL_SPI_TransmitReceive+0x1e0>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800c0b8:	f1b9 0f00 	cmp.w	r9, #0
 800c0bc:	d0e2      	beq.n	800c084 <HAL_SPI_TransmitReceive+0x170>
 800c0be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d0de      	beq.n	800c084 <HAL_SPI_TransmitReceive+0x170>
 800c0c6:	6823      	ldr	r3, [r4, #0]
 800c0c8:	689a      	ldr	r2, [r3, #8]
 800c0ca:	f012 0f02 	tst.w	r2, #2
 800c0ce:	d0d9      	beq.n	800c084 <HAL_SPI_TransmitReceive+0x170>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800c0d0:	783a      	ldrb	r2, [r7, #0]
 800c0d2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800c0d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c0d6:	3b01      	subs	r3, #1
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800c0dc:	3701      	adds	r7, #1
        txallowed = 0U;
 800c0de:	f04f 0900 	mov.w	r9, #0
 800c0e2:	e7cf      	b.n	800c084 <HAL_SPI_TransmitReceive+0x170>
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800c0e4:	f7fd fd30 	bl	8009b48 <HAL_GetTick>
 800c0e8:	eba0 0008 	sub.w	r0, r0, r8
 800c0ec:	42a8      	cmp	r0, r5
 800c0ee:	d3dd      	bcc.n	800c0ac <HAL_SPI_TransmitReceive+0x198>
        errorcode = HAL_TIMEOUT;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	e72c      	b.n	800bf4e <HAL_SPI_TransmitReceive+0x3a>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800c0f4:	f8cd 8000 	str.w	r8, [sp]
 800c0f8:	462b      	mov	r3, r5
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	2102      	movs	r1, #2
 800c0fe:	4620      	mov	r0, r4
 800c100:	f7ff fe68 	bl	800bdd4 <SPI_WaitFlagStateUntilTimeout>
 800c104:	b108      	cbz	r0, 800c10a <HAL_SPI_TransmitReceive+0x1f6>
    errorcode = HAL_TIMEOUT;
 800c106:	2303      	movs	r3, #3
 800c108:	e721      	b.n	800bf4e <HAL_SPI_TransmitReceive+0x3a>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800c10a:	4642      	mov	r2, r8
 800c10c:	4629      	mov	r1, r5
 800c10e:	4620      	mov	r0, r4
 800c110:	f7ff feab 	bl	800be6a <SPI_CheckFlag_BSY>
 800c114:	4603      	mov	r3, r0
 800c116:	b118      	cbz	r0, 800c120 <HAL_SPI_TransmitReceive+0x20c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c118:	2320      	movs	r3, #32
 800c11a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800c11c:	2301      	movs	r3, #1
    goto error;
 800c11e:	e716      	b.n	800bf4e <HAL_SPI_TransmitReceive+0x3a>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c120:	68a2      	ldr	r2, [r4, #8]
 800c122:	2a00      	cmp	r2, #0
 800c124:	f47f af13 	bne.w	800bf4e <HAL_SPI_TransmitReceive+0x3a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c128:	9203      	str	r2, [sp, #12]
 800c12a:	6822      	ldr	r2, [r4, #0]
 800c12c:	68d1      	ldr	r1, [r2, #12]
 800c12e:	9103      	str	r1, [sp, #12]
 800c130:	6892      	ldr	r2, [r2, #8]
 800c132:	9203      	str	r2, [sp, #12]
 800c134:	9a03      	ldr	r2, [sp, #12]
 800c136:	e70a      	b.n	800bf4e <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_BUSY;
 800c138:	2302      	movs	r3, #2
 800c13a:	e708      	b.n	800bf4e <HAL_SPI_TransmitReceive+0x3a>
    errorcode = HAL_ERROR;
 800c13c:	2301      	movs	r3, #1
 800c13e:	e706      	b.n	800bf4e <HAL_SPI_TransmitReceive+0x3a>
 800c140:	2301      	movs	r3, #1
 800c142:	e704      	b.n	800bf4e <HAL_SPI_TransmitReceive+0x3a>
 800c144:	2301      	movs	r3, #1
 800c146:	e702      	b.n	800bf4e <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 800c148:	2302      	movs	r3, #2
 800c14a:	e706      	b.n	800bf5a <HAL_SPI_TransmitReceive+0x46>

0800c14c <HAL_SPI_TxCpltCallback>:
}
 800c14c:	4770      	bx	lr

0800c14e <HAL_SPI_ErrorCallback>:
}
 800c14e:	4770      	bx	lr

0800c150 <HAL_SPI_IRQHandler>:
{
 800c150:	b510      	push	{r4, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800c156:	6802      	ldr	r2, [r0, #0]
 800c158:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800c15a:	6893      	ldr	r3, [r2, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 800c15c:	f003 0141 	and.w	r1, r3, #65	; 0x41
 800c160:	2901      	cmp	r1, #1
 800c162:	d00a      	beq.n	800c17a <HAL_SPI_IRQHandler+0x2a>
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 800c164:	f013 0f02 	tst.w	r3, #2
 800c168:	d00e      	beq.n	800c188 <HAL_SPI_IRQHandler+0x38>
 800c16a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c16e:	d00b      	beq.n	800c188 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 800c170:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c172:	4620      	mov	r0, r4
 800c174:	4798      	blx	r3
}
 800c176:	b004      	add	sp, #16
 800c178:	bd10      	pop	{r4, pc}
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 800c17a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c17e:	d0f1      	beq.n	800c164 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 800c180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c182:	4620      	mov	r0, r4
 800c184:	4798      	blx	r3
    return;
 800c186:	e7f6      	b.n	800c176 <HAL_SPI_IRQHandler+0x26>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 800c188:	f013 0f60 	tst.w	r3, #96	; 0x60
 800c18c:	d0f3      	beq.n	800c176 <HAL_SPI_IRQHandler+0x26>
 800c18e:	f010 0f20 	tst.w	r0, #32
 800c192:	d0f0      	beq.n	800c176 <HAL_SPI_IRQHandler+0x26>
    if((itflag & SPI_FLAG_OVR) != RESET)
 800c194:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c198:	d00f      	beq.n	800c1ba <HAL_SPI_IRQHandler+0x6a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c19a:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 800c19e:	b2c9      	uxtb	r1, r1
 800c1a0:	2903      	cmp	r1, #3
 800c1a2:	d03d      	beq.n	800c220 <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c1a4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800c1a6:	f041 0104 	orr.w	r1, r1, #4
 800c1aa:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	9101      	str	r1, [sp, #4]
 800c1b0:	68d1      	ldr	r1, [r2, #12]
 800c1b2:	9101      	str	r1, [sp, #4]
 800c1b4:	6891      	ldr	r1, [r2, #8]
 800c1b6:	9101      	str	r1, [sp, #4]
 800c1b8:	9901      	ldr	r1, [sp, #4]
    if((itflag & SPI_FLAG_MODF) != RESET)
 800c1ba:	f013 0f20 	tst.w	r3, #32
 800c1be:	d00c      	beq.n	800c1da <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c1c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c1c2:	f043 0301 	orr.w	r3, r3, #1
 800c1c6:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	9303      	str	r3, [sp, #12]
 800c1cc:	6893      	ldr	r3, [r2, #8]
 800c1ce:	9303      	str	r3, [sp, #12]
 800c1d0:	6813      	ldr	r3, [r2, #0]
 800c1d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	9b03      	ldr	r3, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d0ca      	beq.n	800c176 <HAL_SPI_IRQHandler+0x26>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c1e0:	6822      	ldr	r2, [r4, #0]
 800c1e2:	6853      	ldr	r3, [r2, #4]
 800c1e4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800c1e8:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c1f0:	f010 0f03 	tst.w	r0, #3
 800c1f4:	d01c      	beq.n	800c230 <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c1f6:	6822      	ldr	r2, [r4, #0]
 800c1f8:	6853      	ldr	r3, [r2, #4]
 800c1fa:	f023 0303 	bic.w	r3, r3, #3
 800c1fe:	6053      	str	r3, [r2, #4]
        if(hspi->hdmarx != NULL)
 800c200:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c202:	b123      	cbz	r3, 800c20e <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c204:	4a0c      	ldr	r2, [pc, #48]	; (800c238 <HAL_SPI_IRQHandler+0xe8>)
 800c206:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 800c208:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800c20a:	f7fe fef5 	bl	800aff8 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 800c20e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c210:	2b00      	cmp	r3, #0
 800c212:	d0b0      	beq.n	800c176 <HAL_SPI_IRQHandler+0x26>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c214:	4a08      	ldr	r2, [pc, #32]	; (800c238 <HAL_SPI_IRQHandler+0xe8>)
 800c216:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 800c218:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c21a:	f7fe feed 	bl	800aff8 <HAL_DMA_Abort_IT>
 800c21e:	e7aa      	b.n	800c176 <HAL_SPI_IRQHandler+0x26>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c220:	2300      	movs	r3, #0
 800c222:	9302      	str	r3, [sp, #8]
 800c224:	68d3      	ldr	r3, [r2, #12]
 800c226:	9302      	str	r3, [sp, #8]
 800c228:	6893      	ldr	r3, [r2, #8]
 800c22a:	9302      	str	r3, [sp, #8]
 800c22c:	9b02      	ldr	r3, [sp, #8]
        return;
 800c22e:	e7a2      	b.n	800c176 <HAL_SPI_IRQHandler+0x26>
        HAL_SPI_ErrorCallback(hspi);
 800c230:	4620      	mov	r0, r4
 800c232:	f7ff ff8c 	bl	800c14e <HAL_SPI_ErrorCallback>
 800c236:	e79e      	b.n	800c176 <HAL_SPI_IRQHandler+0x26>
 800c238:	0800c23d 	.word	0x0800c23d

0800c23c <SPI_DMAAbortOnError>:
{
 800c23c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c23e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 800c240:	2300      	movs	r3, #0
 800c242:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c244:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800c246:	f7ff ff82 	bl	800c14e <HAL_SPI_ErrorCallback>
}
 800c24a:	bd08      	pop	{r3, pc}

0800c24c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 800c24c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c24e:	4a1b      	ldr	r2, [pc, #108]	; (800c2bc <TIM_Base_SetConfig+0x70>)
 800c250:	4290      	cmp	r0, r2
 800c252:	d00a      	beq.n	800c26a <TIM_Base_SetConfig+0x1e>
 800c254:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c258:	d007      	beq.n	800c26a <TIM_Base_SetConfig+0x1e>
 800c25a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c25e:	4290      	cmp	r0, r2
 800c260:	d003      	beq.n	800c26a <TIM_Base_SetConfig+0x1e>
 800c262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c266:	4290      	cmp	r0, r2
 800c268:	d103      	bne.n	800c272 <TIM_Base_SetConfig+0x26>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c26a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800c26e:	684a      	ldr	r2, [r1, #4]
 800c270:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c272:	4a12      	ldr	r2, [pc, #72]	; (800c2bc <TIM_Base_SetConfig+0x70>)
 800c274:	4290      	cmp	r0, r2
 800c276:	d00a      	beq.n	800c28e <TIM_Base_SetConfig+0x42>
 800c278:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c27c:	d007      	beq.n	800c28e <TIM_Base_SetConfig+0x42>
 800c27e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800c282:	4290      	cmp	r0, r2
 800c284:	d003      	beq.n	800c28e <TIM_Base_SetConfig+0x42>
 800c286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c28a:	4290      	cmp	r0, r2
 800c28c:	d103      	bne.n	800c296 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c28e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c292:	68ca      	ldr	r2, [r1, #12]
 800c294:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 800c296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800c29a:	694a      	ldr	r2, [r1, #20]
 800c29c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800c29e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2a0:	688b      	ldr	r3, [r1, #8]
 800c2a2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800c2a4:	680b      	ldr	r3, [r1, #0]
 800c2a6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2a8:	4b04      	ldr	r3, [pc, #16]	; (800c2bc <TIM_Base_SetConfig+0x70>)
 800c2aa:	4298      	cmp	r0, r3
 800c2ac:	d002      	beq.n	800c2b4 <TIM_Base_SetConfig+0x68>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	6143      	str	r3, [r0, #20]
}
 800c2b2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800c2b4:	690b      	ldr	r3, [r1, #16]
 800c2b6:	6303      	str	r3, [r0, #48]	; 0x30
 800c2b8:	e7f9      	b.n	800c2ae <TIM_Base_SetConfig+0x62>
 800c2ba:	bf00      	nop
 800c2bc:	40012c00 	.word	0x40012c00

0800c2c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c2c0:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c2c8:	6a03      	ldr	r3, [r0, #32]
 800c2ca:	ea23 0304 	bic.w	r3, r3, r4
 800c2ce:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800c2d0:	6a03      	ldr	r3, [r0, #32]
 800c2d2:	408a      	lsls	r2, r1
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	6203      	str	r3, [r0, #32]
}
 800c2d8:	bc10      	pop	{r4}
 800c2da:	4770      	bx	lr

0800c2dc <stm32_mcu_flash_erase_sector>:
    FLASH_EraseInitTypeDef eraseinit;
    uint32_t PageError;

    (void)PageError;

    if ((sector_address & ~(_FLASH_SECTOR_SIZE - 1)) == sector_address) {
 800c2dc:	f421 737f 	bic.w	r3, r1, #1020	; 0x3fc
 800c2e0:	f023 0303 	bic.w	r3, r3, #3
 800c2e4:	428b      	cmp	r3, r1
 800c2e6:	d10f      	bne.n	800c308 <stm32_mcu_flash_erase_sector+0x2c>
{
 800c2e8:	b500      	push	{lr}
 800c2ea:	b087      	sub	sp, #28
        eraseinit.TypeErase = FLASH_TYPEERASE_PAGES;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	9302      	str	r3, [sp, #8]
        eraseinit.Banks = FLASH_BANK_1;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	9303      	str	r3, [sp, #12]
        eraseinit.PageAddress = sector_address;
 800c2f4:	9104      	str	r1, [sp, #16]
        eraseinit.NbPages = _FLASH_SECTOR_SIZE / FLASH_PAGE_SIZE;
 800c2f6:	9305      	str	r3, [sp, #20]
        if (HAL_FLASHEx_Erase(&eraseinit, &PageError) == HAL_OK) {
 800c2f8:	a901      	add	r1, sp, #4
 800c2fa:	a802      	add	r0, sp, #8
 800c2fc:	f7fe ffcc 	bl	800b298 <HAL_FLASHEx_Erase>
 800c300:	b928      	cbnz	r0, 800c30e <stm32_mcu_flash_erase_sector+0x32>
            return 0;
        }
    }

    return -1;
}
 800c302:	b007      	add	sp, #28
 800c304:	f85d fb04 	ldr.w	pc, [sp], #4
    return -1;
 800c308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800c30c:	4770      	bx	lr
    return -1;
 800c30e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c312:	e7f6      	b.n	800c302 <stm32_mcu_flash_erase_sector+0x26>

0800c314 <stm32_hal_timer_get_freq>:
 * of a timer.
 */

uint32_t
stm32_hal_timer_get_freq(void *regs)
{
 800c314:	b510      	push	{r4, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	4604      	mov	r4, r0
    RCC_ClkInitTypeDef clocks;
    uint32_t fl;
    uint32_t freq;

    HAL_RCC_GetClockConfig(&clocks, &fl);
 800c31a:	4669      	mov	r1, sp
 800c31c:	a801      	add	r0, sp, #4
 800c31e:	f7ff fcbd 	bl	800bc9c <HAL_RCC_GetClockConfig>

    /*
     * Assuming RCC_DCKCFGR->TIMPRE is 0.
     * There's just APB2 timers here.
     */
    switch ((uintptr_t)regs) {
 800c322:	4b0f      	ldr	r3, [pc, #60]	; (800c360 <stm32_hal_timer_get_freq+0x4c>)
 800c324:	429c      	cmp	r4, r3
 800c326:	d013      	beq.n	800c350 <stm32_hal_timer_get_freq+0x3c>
 800c328:	d90c      	bls.n	800c344 <stm32_hal_timer_get_freq+0x30>
 800c32a:	4b0e      	ldr	r3, [pc, #56]	; (800c364 <stm32_hal_timer_get_freq+0x50>)
 800c32c:	429c      	cmp	r4, r3
 800c32e:	d00f      	beq.n	800c350 <stm32_hal_timer_get_freq+0x3c>
 800c330:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 800c334:	429c      	cmp	r4, r3
 800c336:	d108      	bne.n	800c34a <stm32_hal_timer_get_freq+0x36>
    case (uintptr_t)TIM16:
#endif
#ifdef TIM17
    case (uintptr_t)TIM17:
#endif
        freq = HAL_RCC_GetPCLK2Freq();
 800c338:	f7ff fca0 	bl	800bc7c <HAL_RCC_GetPCLK2Freq>
        if (clocks.APB2CLKDivider) {
 800c33c:	9b05      	ldr	r3, [sp, #20]
 800c33e:	b12b      	cbz	r3, 800c34c <stm32_hal_timer_get_freq+0x38>
            freq *= 2;
 800c340:	0040      	lsls	r0, r0, #1
 800c342:	e003      	b.n	800c34c <stm32_hal_timer_get_freq+0x38>
    switch ((uintptr_t)regs) {
 800c344:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800c348:	d002      	beq.n	800c350 <stm32_hal_timer_get_freq+0x3c>
        if (clocks.APB1CLKDivider) {
            freq *= 2;
        }
        break;
    default:
        return 0;
 800c34a:	2000      	movs	r0, #0
    }
    return freq;
}
 800c34c:	b006      	add	sp, #24
 800c34e:	bd10      	pop	{r4, pc}
        freq = HAL_RCC_GetPCLK1Freq();
 800c350:	f7ff fc84 	bl	800bc5c <HAL_RCC_GetPCLK1Freq>
        if (clocks.APB1CLKDivider) {
 800c354:	9b04      	ldr	r3, [sp, #16]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d0f8      	beq.n	800c34c <stm32_hal_timer_get_freq+0x38>
            freq *= 2;
 800c35a:	0040      	lsls	r0, r0, #1
 800c35c:	e7f6      	b.n	800c34c <stm32_hal_timer_get_freq+0x38>
 800c35e:	bf00      	nop
 800c360:	40000400 	.word	0x40000400
 800c364:	40000800 	.word	0x40000800

0800c368 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
 800c368:	4603      	mov	r3, r0
 800c36a:	b118      	cbz	r0, 800c374 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
 800c36c:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
 800c36e:	2000      	movs	r0, #0
 800c370:	6018      	str	r0, [r3, #0]
 800c372:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 800c374:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
 800c376:	4770      	bx	lr

0800c378 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
 800c378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
 800c37a:	4b17      	ldr	r3, [pc, #92]	; (800c3d8 <os_sem_release+0x60>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	b33b      	cbz	r3, 800c3d0 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 800c380:	b340      	cbz	r0, 800c3d4 <os_sem_release+0x5c>
 800c382:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
 800c384:	f7f6 f844 	bl	8002410 <os_sched_get_current_task>
 800c388:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
 800c38a:	f7f6 fa77 	bl	800287c <os_arch_save_sr>
 800c38e:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
 800c390:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
 800c392:	b165      	cbz	r5, 800c3ae <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 800c394:	7b6b      	ldrb	r3, [r5, #13]
 800c396:	f023 0302 	bic.w	r3, r3, #2
 800c39a:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
 800c39c:	4628      	mov	r0, r5
 800c39e:	f7f6 f88b 	bl	80024b8 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
 800c3a2:	7afa      	ldrb	r2, [r7, #11]
 800c3a4:	7aeb      	ldrb	r3, [r5, #11]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d80b      	bhi.n	800c3c2 <os_sem_release+0x4a>
    resched = 0;
 800c3aa:	2400      	movs	r4, #0
 800c3ac:	e003      	b.n	800c3b6 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
 800c3ae:	88e3      	ldrh	r3, [r4, #6]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	80e3      	strh	r3, [r4, #6]
    resched = 0;
 800c3b4:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	f7f6 fa66 	bl	8002888 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
 800c3bc:	b91c      	cbnz	r4, 800c3c6 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
 800c3be:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
 800c3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
 800c3c2:	2401      	movs	r4, #1
 800c3c4:	e7f7      	b.n	800c3b6 <os_sem_release+0x3e>
        os_sched(rdy);
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	f7f6 f8f6 	bl	80025b8 <os_sched>
    ret = OS_OK;
 800c3cc:	2000      	movs	r0, #0
 800c3ce:	e7f7      	b.n	800c3c0 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
 800c3d0:	2009      	movs	r0, #9
 800c3d2:	e7f5      	b.n	800c3c0 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
 800c3d4:	2003      	movs	r0, #3
 800c3d6:	e7f3      	b.n	800c3c0 <os_sem_release+0x48>
 800c3d8:	2000355c 	.word	0x2000355c

0800c3dc <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
 800c3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
 800c3de:	4b2c      	ldr	r3, [pc, #176]	; (800c490 <os_sem_pend+0xb4>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d04f      	beq.n	800c486 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d04f      	beq.n	800c48a <os_sem_pend+0xae>
 800c3ea:	460d      	mov	r5, r1
 800c3ec:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
 800c3ee:	f7f6 f80f 	bl	8002410 <os_sched_get_current_task>
 800c3f2:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
 800c3f4:	f7f6 fa42 	bl	800287c <os_arch_save_sr>
 800c3f8:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
 800c3fa:	88e3      	ldrh	r3, [r4, #6]
 800c3fc:	b14b      	cbz	r3, 800c412 <os_sem_pend+0x36>
        sem->sem_tokens--;
 800c3fe:	3b01      	subs	r3, #1
 800c400:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
 800c402:	2400      	movs	r4, #0
    sched = 0;
 800c404:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
 800c406:	4638      	mov	r0, r7
 800c408:	f7f6 fa3e 	bl	8002888 <os_arch_restore_sr>

    if (sched) {
 800c40c:	bb45      	cbnz	r5, 800c460 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
 800c40e:	4620      	mov	r0, r4
 800c410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
 800c412:	b315      	cbz	r5, 800c45a <os_sem_pend+0x7e>
        current->t_obj = sem;
 800c414:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
 800c416:	7b73      	ldrb	r3, [r6, #13]
 800c418:	f043 0302 	orr.w	r3, r3, #2
 800c41c:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
 800c41e:	f8d4 c000 	ldr.w	ip, [r4]
 800c422:	f1bc 0f00 	cmp.w	ip, #0
 800c426:	d00e      	beq.n	800c446 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 800c428:	4663      	mov	r3, ip
        last = NULL;
 800c42a:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 800c42c:	b133      	cbz	r3, 800c43c <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
 800c42e:	7af1      	ldrb	r1, [r6, #11]
 800c430:	7ada      	ldrb	r2, [r3, #11]
 800c432:	4291      	cmp	r1, r2
 800c434:	d302      	bcc.n	800c43c <os_sem_pend+0x60>
                last = entry;
 800c436:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 800c438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c43a:	e7f7      	b.n	800c42c <os_sem_pend+0x50>
        if (last) {
 800c43c:	b118      	cbz	r0, 800c446 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
 800c43e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c440:	64f3      	str	r3, [r6, #76]	; 0x4c
 800c442:	64c6      	str	r6, [r0, #76]	; 0x4c
 800c444:	e002      	b.n	800c44c <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
 800c446:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
 800c44a:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
 800c44c:	4629      	mov	r1, r5
 800c44e:	4630      	mov	r0, r6
 800c450:	f7f5 ffea 	bl	8002428 <os_sched_sleep>
        ret = OS_OK;
 800c454:	2400      	movs	r4, #0
        sched = 1;
 800c456:	2501      	movs	r5, #1
 800c458:	e7d5      	b.n	800c406 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
 800c45a:	2406      	movs	r4, #6
    sched = 0;
 800c45c:	2500      	movs	r5, #0
 800c45e:	e7d2      	b.n	800c406 <os_sem_pend+0x2a>
        os_sched(NULL);
 800c460:	2000      	movs	r0, #0
 800c462:	f7f6 f8a9 	bl	80025b8 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
 800c466:	7b73      	ldrb	r3, [r6, #13]
 800c468:	f013 0f02 	tst.w	r3, #2
 800c46c:	d101      	bne.n	800c472 <os_sem_pend+0x96>
            ret = OS_OK;
 800c46e:	2400      	movs	r4, #0
 800c470:	e7cd      	b.n	800c40e <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
 800c472:	f7f6 fa03 	bl	800287c <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 800c476:	7b73      	ldrb	r3, [r6, #13]
 800c478:	f023 0302 	bic.w	r3, r3, #2
 800c47c:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
 800c47e:	f7f6 fa03 	bl	8002888 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
 800c482:	2406      	movs	r4, #6
 800c484:	e7c3      	b.n	800c40e <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
 800c486:	2409      	movs	r4, #9
 800c488:	e7c1      	b.n	800c40e <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
 800c48a:	2403      	movs	r4, #3
 800c48c:	e7bf      	b.n	800c40e <os_sem_pend+0x32>
 800c48e:	bf00      	nop
 800c490:	2000355c 	.word	0x2000355c

0800c494 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
 800c494:	b40e      	push	{r1, r2, r3}
 800c496:	b500      	push	{lr}
 800c498:	b082      	sub	sp, #8
 800c49a:	ab03      	add	r3, sp, #12
 800c49c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
 800c4a0:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
 800c4a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4a6:	f000 fb65 	bl	800cb74 <vsnprintf>
	va_end(ap);

	return rv;
}
 800c4aa:	b002      	add	sp, #8
 800c4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4b0:	b003      	add	sp, #12
 800c4b2:	4770      	bx	lr

0800c4b4 <sscanf>:
 */

#include <stdio.h>

int sscanf(const char *str, const char *format, ...)
{
 800c4b4:	b40e      	push	{r1, r2, r3}
 800c4b6:	b500      	push	{lr}
 800c4b8:	b082      	sub	sp, #8
 800c4ba:	aa03      	add	r2, sp, #12
 800c4bc:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	int rv;

	va_start(ap, format);
 800c4c0:	9201      	str	r2, [sp, #4]
	rv = vsscanf(str, format, ap);
 800c4c2:	f7fb f9cf 	bl	8007864 <vsscanf>
	va_end(ap);

	return rv;
}
 800c4c6:	b002      	add	sp, #8
 800c4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4cc:	b003      	add	sp, #12
 800c4ce:	4770      	bx	lr

0800c4d0 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
 800c4d0:	4603      	mov	r3, r0
	while (*ss)
 800c4d2:	e000      	b.n	800c4d6 <strlen+0x6>
		ss++;
 800c4d4:	3301      	adds	r3, #1
	while (*ss)
 800c4d6:	781a      	ldrb	r2, [r3, #0]
 800c4d8:	2a00      	cmp	r2, #0
 800c4da:	d1fb      	bne.n	800c4d4 <strlen+0x4>
	return ss - s;
}
 800c4dc:	1a18      	subs	r0, r3, r0
 800c4de:	4770      	bx	lr

0800c4e0 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
 800c4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	468c      	mov	ip, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
 800c4e8:	e001      	b.n	800c4ee <strntoumax+0xe>
		nptr++;
 800c4ea:	3501      	adds	r5, #1
		n--;
 800c4ec:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
 800c4ee:	b143      	cbz	r3, 800c502 <strntoumax+0x22>
 800c4f0:	7828      	ldrb	r0, [r5, #0]
 800c4f2:	2820      	cmp	r0, #32
 800c4f4:	d0f9      	beq.n	800c4ea <strntoumax+0xa>
 800c4f6:	280a      	cmp	r0, #10
 800c4f8:	d0f7      	beq.n	800c4ea <strntoumax+0xa>
 800c4fa:	2809      	cmp	r0, #9
 800c4fc:	d0f5      	beq.n	800c4ea <strntoumax+0xa>
 800c4fe:	280d      	cmp	r0, #13
 800c500:	d0f3      	beq.n	800c4ea <strntoumax+0xa>
	}

	/* Single optional + or - */
	if (n) {
 800c502:	b1a3      	cbz	r3, 800c52e <strntoumax+0x4e>
		char c = *nptr;
 800c504:	f895 e000 	ldrb.w	lr, [r5]
		if (c == '-' || c == '+') {
 800c508:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
 800c50c:	d005      	beq.n	800c51a <strntoumax+0x3a>
 800c50e:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
 800c512:	d002      	beq.n	800c51a <strntoumax+0x3a>
	int minus = 0;
 800c514:	f04f 0e00 	mov.w	lr, #0
 800c518:	e00b      	b.n	800c532 <strntoumax+0x52>
			minus = (c == '-');
 800c51a:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
 800c51e:	bf14      	ite	ne
 800c520:	f04f 0e00 	movne.w	lr, #0
 800c524:	f04f 0e01 	moveq.w	lr, #1
			nptr++;
 800c528:	3501      	adds	r5, #1
			n--;
 800c52a:	3b01      	subs	r3, #1
 800c52c:	e001      	b.n	800c532 <strntoumax+0x52>
	int minus = 0;
 800c52e:	f04f 0e00 	mov.w	lr, #0
		}
	}

	if (base == 0) {
 800c532:	b9ba      	cbnz	r2, 800c564 <strntoumax+0x84>
		if (n >= 2 && nptr[0] == '0' &&
 800c534:	2b01      	cmp	r3, #1
 800c536:	d902      	bls.n	800c53e <strntoumax+0x5e>
 800c538:	782a      	ldrb	r2, [r5, #0]
 800c53a:	2a30      	cmp	r2, #48	; 0x30
 800c53c:	d005      	beq.n	800c54a <strntoumax+0x6a>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
 800c53e:	b32b      	cbz	r3, 800c58c <strntoumax+0xac>
 800c540:	782a      	ldrb	r2, [r5, #0]
 800c542:	2a30      	cmp	r2, #48	; 0x30
 800c544:	d00a      	beq.n	800c55c <strntoumax+0x7c>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
 800c546:	220a      	movs	r2, #10
 800c548:	e00e      	b.n	800c568 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800c54a:	786a      	ldrb	r2, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
 800c54c:	2a78      	cmp	r2, #120	; 0x78
 800c54e:	d001      	beq.n	800c554 <strntoumax+0x74>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800c550:	2a58      	cmp	r2, #88	; 0x58
 800c552:	d1f4      	bne.n	800c53e <strntoumax+0x5e>
			n -= 2;
 800c554:	3b02      	subs	r3, #2
			nptr += 2;
 800c556:	3502      	adds	r5, #2
			base = 16;
 800c558:	2210      	movs	r2, #16
 800c55a:	e005      	b.n	800c568 <strntoumax+0x88>
			n--;
 800c55c:	3b01      	subs	r3, #1
			nptr++;
 800c55e:	3501      	adds	r5, #1
			base = 8;
 800c560:	2208      	movs	r2, #8
 800c562:	e001      	b.n	800c568 <strntoumax+0x88>
		}
	} else if (base == 16) {
 800c564:	2a10      	cmp	r2, #16
 800c566:	d004      	beq.n	800c572 <strntoumax+0x92>
			base = 10;
 800c568:	f04f 0800 	mov.w	r8, #0
 800c56c:	f04f 0900 	mov.w	r9, #0
 800c570:	e025      	b.n	800c5be <strntoumax+0xde>
		if (n >= 2 && nptr[0] == '0' &&
 800c572:	2b01      	cmp	r3, #1
 800c574:	d9f8      	bls.n	800c568 <strntoumax+0x88>
 800c576:	7829      	ldrb	r1, [r5, #0]
 800c578:	2930      	cmp	r1, #48	; 0x30
 800c57a:	d1f5      	bne.n	800c568 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800c57c:	7869      	ldrb	r1, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
 800c57e:	2978      	cmp	r1, #120	; 0x78
 800c580:	d001      	beq.n	800c586 <strntoumax+0xa6>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800c582:	2958      	cmp	r1, #88	; 0x58
 800c584:	d1f0      	bne.n	800c568 <strntoumax+0x88>
			n -= 2;
 800c586:	3b02      	subs	r3, #2
			nptr += 2;
 800c588:	3502      	adds	r5, #2
 800c58a:	e7ed      	b.n	800c568 <strntoumax+0x88>
			base = 10;
 800c58c:	220a      	movs	r2, #10
 800c58e:	e7eb      	b.n	800c568 <strntoumax+0x88>
	} else if (ch >= 'A' && ch <= 'Z') {
 800c590:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c594:	2e19      	cmp	r6, #25
 800c596:	d81a      	bhi.n	800c5ce <strntoumax+0xee>
		return ch - 'A' + 10;
 800c598:	3c37      	subs	r4, #55	; 0x37
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
 800c59a:	2c00      	cmp	r4, #0
 800c59c:	db1d      	blt.n	800c5da <strntoumax+0xfa>
 800c59e:	42a2      	cmp	r2, r4
 800c5a0:	dd1b      	ble.n	800c5da <strntoumax+0xfa>
		v = v * base + d;
 800c5a2:	fb02 f109 	mul.w	r1, r2, r9
 800c5a6:	17d7      	asrs	r7, r2, #31
 800c5a8:	fb08 1607 	mla	r6, r8, r7, r1
 800c5ac:	fba2 0108 	umull	r0, r1, r2, r8
 800c5b0:	4431      	add	r1, r6
 800c5b2:	eb10 0804 	adds.w	r8, r0, r4
 800c5b6:	eb41 79e4 	adc.w	r9, r1, r4, asr #31
		n--;
 800c5ba:	3b01      	subs	r3, #1
		nptr++;
 800c5bc:	3501      	adds	r5, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
 800c5be:	b163      	cbz	r3, 800c5da <strntoumax+0xfa>
 800c5c0:	782c      	ldrb	r4, [r5, #0]
	if (ch >= '0' && ch <= '9') {
 800c5c2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c5c6:	2e09      	cmp	r6, #9
 800c5c8:	d8e2      	bhi.n	800c590 <strntoumax+0xb0>
		return ch - '0';
 800c5ca:	4634      	mov	r4, r6
 800c5cc:	e7e5      	b.n	800c59a <strntoumax+0xba>
	} else if (ch >= 'a' && ch <= 'z') {
 800c5ce:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c5d2:	2e19      	cmp	r6, #25
 800c5d4:	d801      	bhi.n	800c5da <strntoumax+0xfa>
		return ch - 'a' + 10;
 800c5d6:	3c57      	subs	r4, #87	; 0x57
 800c5d8:	e7df      	b.n	800c59a <strntoumax+0xba>
	}

	if (endptr)
 800c5da:	f1bc 0f00 	cmp.w	ip, #0
 800c5de:	d001      	beq.n	800c5e4 <strntoumax+0x104>
		*endptr = (char *)nptr;
 800c5e0:	f8cc 5000 	str.w	r5, [ip]

	return minus ? -v : v;
 800c5e4:	f1be 0f00 	cmp.w	lr, #0
 800c5e8:	d003      	beq.n	800c5f2 <strntoumax+0x112>
 800c5ea:	f1d8 0800 	rsbs	r8, r8, #0
 800c5ee:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
}
 800c5f2:	4640      	mov	r0, r8
 800c5f4:	4649      	mov	r1, r9
 800c5f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c5fa <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
 800c5fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	e9cd 0100 	strd	r0, r1, [sp]
 800c604:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
 800c606:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
 800c60a:	2401      	movs	r4, #1
 800c60c:	2500      	movs	r5, #0
    while (num / d >= p->base)
 800c60e:	e004      	b.n	800c61a <ui2a+0x20>
        d *= p->base;
 800c610:	fb06 f305 	mul.w	r3, r6, r5
 800c614:	fba4 4506 	umull	r4, r5, r4, r6
 800c618:	441d      	add	r5, r3
    while (num / d >= p->base)
 800c61a:	4622      	mov	r2, r4
 800c61c:	462b      	mov	r3, r5
 800c61e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c622:	f000 fb55 	bl	800ccd0 <__aeabi_uldivmod>
 800c626:	f899 6003 	ldrb.w	r6, [r9, #3]
 800c62a:	2700      	movs	r7, #0
 800c62c:	42b9      	cmp	r1, r7
 800c62e:	bf08      	it	eq
 800c630:	42b0      	cmpeq	r0, r6
 800c632:	d2ed      	bcs.n	800c610 <ui2a+0x16>
    int n = 0;
 800c634:	f04f 0a00 	mov.w	sl, #0
 800c638:	e007      	b.n	800c64a <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 800c63a:	2330      	movs	r3, #48	; 0x30
 800c63c:	441e      	add	r6, r3
 800c63e:	f888 6000 	strb.w	r6, [r8]
            ++n;
 800c642:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 800c646:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
 800c64a:	ea54 0305 	orrs.w	r3, r4, r5
 800c64e:	d02e      	beq.n	800c6ae <ui2a+0xb4>
        unsigned long long  dgt = num / d;
 800c650:	4622      	mov	r2, r4
 800c652:	462b      	mov	r3, r5
 800c654:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c658:	f000 fb3a 	bl	800ccd0 <__aeabi_uldivmod>
 800c65c:	4606      	mov	r6, r0
 800c65e:	460f      	mov	r7, r1
        num %= d;
 800c660:	4622      	mov	r2, r4
 800c662:	462b      	mov	r3, r5
 800c664:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c668:	f000 fb32 	bl	800ccd0 <__aeabi_uldivmod>
 800c66c:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
 800c670:	f899 2003 	ldrb.w	r2, [r9, #3]
 800c674:	2300      	movs	r3, #0
 800c676:	4620      	mov	r0, r4
 800c678:	4629      	mov	r1, r5
 800c67a:	f000 fb29 	bl	800ccd0 <__aeabi_uldivmod>
 800c67e:	4604      	mov	r4, r0
 800c680:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
 800c682:	f1ba 0f00 	cmp.w	sl, #0
 800c686:	d105      	bne.n	800c694 <ui2a+0x9a>
 800c688:	ea56 0307 	orrs.w	r3, r6, r7
 800c68c:	d102      	bne.n	800c694 <ui2a+0x9a>
 800c68e:	ea54 0305 	orrs.w	r3, r4, r5
 800c692:	d1da      	bne.n	800c64a <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 800c694:	2f00      	cmp	r7, #0
 800c696:	bf08      	it	eq
 800c698:	2e0a      	cmpeq	r6, #10
 800c69a:	d3ce      	bcc.n	800c63a <ui2a+0x40>
 800c69c:	f899 3002 	ldrb.w	r3, [r9, #2]
 800c6a0:	f013 0f04 	tst.w	r3, #4
 800c6a4:	d001      	beq.n	800c6aa <ui2a+0xb0>
 800c6a6:	2337      	movs	r3, #55	; 0x37
 800c6a8:	e7c8      	b.n	800c63c <ui2a+0x42>
 800c6aa:	2357      	movs	r3, #87	; 0x57
 800c6ac:	e7c6      	b.n	800c63c <ui2a+0x42>
        }
    }
    *bf = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	f888 3000 	strb.w	r3, [r8]
}
 800c6b4:	b002      	add	sp, #8
 800c6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c6ba <i2a>:

static void i2a(long long int num, struct param *p)
{
 800c6ba:	b508      	push	{r3, lr}
    if (num < 0) {
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	f171 0300 	sbcs.w	r3, r1, #0
 800c6c2:	db02      	blt.n	800c6ca <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
 800c6c4:	f7ff ff99 	bl	800c5fa <ui2a>
}
 800c6c8:	bd08      	pop	{r3, pc}
        num = -num;
 800c6ca:	4240      	negs	r0, r0
 800c6cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
 800c6d0:	7893      	ldrb	r3, [r2, #2]
 800c6d2:	f043 0301 	orr.w	r3, r3, #1
 800c6d6:	7093      	strb	r3, [r2, #2]
 800c6d8:	e7f4      	b.n	800c6c4 <i2a+0xa>

0800c6da <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
 800c6da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	2b09      	cmp	r3, #9
 800c6e2:	d90b      	bls.n	800c6fc <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
 800c6e4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	2b05      	cmp	r3, #5
 800c6ec:	d908      	bls.n	800c700 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
 800c6ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c6f2:	b2db      	uxtb	r3, r3
 800c6f4:	2b05      	cmp	r3, #5
 800c6f6:	d805      	bhi.n	800c704 <a2d+0x2a>
        return ch - 'A' + 10;
 800c6f8:	3837      	subs	r0, #55	; 0x37
 800c6fa:	4770      	bx	lr
        return ch - '0';
 800c6fc:	3830      	subs	r0, #48	; 0x30
 800c6fe:	4770      	bx	lr
        return ch - 'a' + 10;
 800c700:	3857      	subs	r0, #87	; 0x57
 800c702:	4770      	bx	lr
    else
        return -1;
 800c704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800c708:	4770      	bx	lr

0800c70a <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
 800c70a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c70e:	4605      	mov	r5, r0
 800c710:	4688      	mov	r8, r1
 800c712:	4617      	mov	r7, r2
 800c714:	4699      	mov	r9, r3
    const char *p = *src;
 800c716:	680c      	ldr	r4, [r1, #0]
    int num = 0;
 800c718:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
 800c71a:	4628      	mov	r0, r5
 800c71c:	f7ff ffdd 	bl	800c6da <a2d>
 800c720:	2800      	cmp	r0, #0
 800c722:	db06      	blt.n	800c732 <a2i+0x28>
        if (digit > base)
 800c724:	42b8      	cmp	r0, r7
 800c726:	dc04      	bgt.n	800c732 <a2i+0x28>
            break;
        num = num * base + digit;
 800c728:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
 800c72c:	7825      	ldrb	r5, [r4, #0]
 800c72e:	3401      	adds	r4, #1
 800c730:	e7f3      	b.n	800c71a <a2i+0x10>
    }
    *src = p;
 800c732:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
 800c736:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
 800c73a:	4628      	mov	r0, r5
 800c73c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c740 <putf>:

static int putf(FILE *putp, char c)
{
 800c740:	b500      	push	{lr}
 800c742:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
 800c744:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
 800c748:	6803      	ldr	r3, [r0, #0]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	b14b      	cbz	r3, 800c762 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
 800c74e:	2201      	movs	r2, #1
 800c750:	f10d 0107 	add.w	r1, sp, #7
 800c754:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
 800c756:	2801      	cmp	r0, #1
 800c758:	d005      	beq.n	800c766 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
 800c75a:	2000      	movs	r0, #0
    else
        return 1;
}
 800c75c:	b003      	add	sp, #12
 800c75e:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
 800c762:	2000      	movs	r0, #0
 800c764:	e7fa      	b.n	800c75c <putf+0x1c>
        return 1;
 800c766:	2001      	movs	r0, #1
 800c768:	e7f8      	b.n	800c75c <putf+0x1c>
	...

0800c76c <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
 800c76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c770:	4606      	mov	r6, r0
 800c772:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
 800c774:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
 800c776:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
 800c778:	e001      	b.n	800c77e <putchw+0x12>
        n--;
 800c77a:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
 800c77c:	4613      	mov	r3, r2
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	b10b      	cbz	r3, 800c788 <putchw+0x1c>
 800c784:	2c00      	cmp	r4, #0
 800c786:	dcf8      	bgt.n	800c77a <putchw+0xe>
    if (p->sign)
 800c788:	78bb      	ldrb	r3, [r7, #2]
 800c78a:	f013 0f01 	tst.w	r3, #1
 800c78e:	d000      	beq.n	800c792 <putchw+0x26>
        n--;
 800c790:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
 800c792:	887b      	ldrh	r3, [r7, #2]
 800c794:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
 800c798:	b29b      	uxth	r3, r3
 800c79a:	f241 0202 	movw	r2, #4098	; 0x1002
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d01c      	beq.n	800c7dc <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
 800c7a2:	f640 0202 	movw	r2, #2050	; 0x802
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d01a      	beq.n	800c7e0 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	4d35      	ldr	r5, [pc, #212]	; (800c884 <putchw+0x118>)
 800c7ae:	401d      	ands	r5, r3
 800c7b0:	b1f5      	cbz	r5, 800c7f0 <putchw+0x84>
    unsigned written = 0;
 800c7b2:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
 800c7b4:	78bb      	ldrb	r3, [r7, #2]
 800c7b6:	f013 0f01 	tst.w	r3, #1
 800c7ba:	d11f      	bne.n	800c7fc <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
 800c7bc:	887b      	ldrh	r3, [r7, #2]
 800c7be:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	f241 0202 	movw	r2, #4098	; 0x1002
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d01d      	beq.n	800c808 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
 800c7cc:	f640 0202 	movw	r2, #2050	; 0x802
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d02a      	beq.n	800c82a <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
 800c7d4:	787b      	ldrb	r3, [r7, #1]
 800c7d6:	bba3      	cbnz	r3, 800c842 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
 800c7d8:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
 800c7da:	e03d      	b.n	800c858 <putchw+0xec>
        n -= 2;
 800c7dc:	3c02      	subs	r4, #2
 800c7de:	e7e4      	b.n	800c7aa <putchw+0x3e>
        n--;
 800c7e0:	3c01      	subs	r4, #1
 800c7e2:	e7e2      	b.n	800c7aa <putchw+0x3e>
            written += putf(putp, ' ');
 800c7e4:	2120      	movs	r1, #32
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f7ff ffaa 	bl	800c740 <putf>
 800c7ec:	4405      	add	r5, r0
        while (n-- > 0)
 800c7ee:	4644      	mov	r4, r8
 800c7f0:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 800c7f4:	2c00      	cmp	r4, #0
 800c7f6:	dcf5      	bgt.n	800c7e4 <putchw+0x78>
 800c7f8:	4644      	mov	r4, r8
 800c7fa:	e7db      	b.n	800c7b4 <putchw+0x48>
        written += putf(putp, '-');
 800c7fc:	212d      	movs	r1, #45	; 0x2d
 800c7fe:	4630      	mov	r0, r6
 800c800:	f7ff ff9e 	bl	800c740 <putf>
 800c804:	4405      	add	r5, r0
 800c806:	e7d9      	b.n	800c7bc <putchw+0x50>
        written += putf(putp, '0');
 800c808:	2130      	movs	r1, #48	; 0x30
 800c80a:	4630      	mov	r0, r6
 800c80c:	f7ff ff98 	bl	800c740 <putf>
 800c810:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
 800c812:	78bb      	ldrb	r3, [r7, #2]
 800c814:	f013 0f04 	tst.w	r3, #4
 800c818:	d005      	beq.n	800c826 <putchw+0xba>
 800c81a:	2158      	movs	r1, #88	; 0x58
 800c81c:	4630      	mov	r0, r6
 800c81e:	f7ff ff8f 	bl	800c740 <putf>
 800c822:	4405      	add	r5, r0
 800c824:	e7d6      	b.n	800c7d4 <putchw+0x68>
 800c826:	2178      	movs	r1, #120	; 0x78
 800c828:	e7f8      	b.n	800c81c <putchw+0xb0>
        written += putf(putp, '0');
 800c82a:	2130      	movs	r1, #48	; 0x30
 800c82c:	4630      	mov	r0, r6
 800c82e:	f7ff ff87 	bl	800c740 <putf>
 800c832:	4405      	add	r5, r0
 800c834:	e7ce      	b.n	800c7d4 <putchw+0x68>
            written += putf(putp, '0');
 800c836:	2130      	movs	r1, #48	; 0x30
 800c838:	4630      	mov	r0, r6
 800c83a:	f7ff ff81 	bl	800c740 <putf>
 800c83e:	4405      	add	r5, r0
        while (n-- > 0)
 800c840:	4644      	mov	r4, r8
 800c842:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 800c846:	2c00      	cmp	r4, #0
 800c848:	dcf5      	bgt.n	800c836 <putchw+0xca>
 800c84a:	4644      	mov	r4, r8
 800c84c:	e7c4      	b.n	800c7d8 <putchw+0x6c>
        written += putf(putp, ch);
 800c84e:	4630      	mov	r0, r6
 800c850:	f7ff ff76 	bl	800c740 <putf>
 800c854:	4405      	add	r5, r0
    while ((ch = *bf++))
 800c856:	4643      	mov	r3, r8
 800c858:	f103 0801 	add.w	r8, r3, #1
 800c85c:	7819      	ldrb	r1, [r3, #0]
 800c85e:	2900      	cmp	r1, #0
 800c860:	d1f5      	bne.n	800c84e <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
 800c862:	78bb      	ldrb	r3, [r7, #2]
 800c864:	f013 0f08 	tst.w	r3, #8
 800c868:	d106      	bne.n	800c878 <putchw+0x10c>
 800c86a:	e008      	b.n	800c87e <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
 800c86c:	2120      	movs	r1, #32
 800c86e:	4630      	mov	r0, r6
 800c870:	f7ff ff66 	bl	800c740 <putf>
 800c874:	4405      	add	r5, r0
        while (n-- > 0)
 800c876:	463c      	mov	r4, r7
 800c878:	1e67      	subs	r7, r4, #1
 800c87a:	2c00      	cmp	r4, #0
 800c87c:	dcf6      	bgt.n	800c86c <putchw+0x100>
    }
    
    return written;
}
 800c87e:	4628      	mov	r0, r5
 800c880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c884:	0008ff00 	.word	0x0008ff00

0800c888 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
 800c888:	b160      	cbz	r0, 800c8a4 <intarg+0x1c>
 800c88a:	2801      	cmp	r0, #1
 800c88c:	d017      	beq.n	800c8be <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
 800c88e:	bb19      	cbnz	r1, 800c8d8 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
 800c890:	6813      	ldr	r3, [r2, #0]
 800c892:	3307      	adds	r3, #7
 800c894:	f023 0307 	bic.w	r3, r3, #7
 800c898:	f103 0108 	add.w	r1, r3, #8
 800c89c:	6011      	str	r1, [r2, #0]
 800c89e:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
 800c8a2:	4770      	bx	lr
        if (sign) {
 800c8a4:	b129      	cbz	r1, 800c8b2 <intarg+0x2a>
            val = va_arg(*va, int);
 800c8a6:	6813      	ldr	r3, [r2, #0]
 800c8a8:	1d19      	adds	r1, r3, #4
 800c8aa:	6011      	str	r1, [r2, #0]
 800c8ac:	6818      	ldr	r0, [r3, #0]
 800c8ae:	17c1      	asrs	r1, r0, #31
 800c8b0:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
 800c8b2:	6813      	ldr	r3, [r2, #0]
 800c8b4:	1d19      	adds	r1, r3, #4
 800c8b6:	6011      	str	r1, [r2, #0]
 800c8b8:	6818      	ldr	r0, [r3, #0]
 800c8ba:	2100      	movs	r1, #0
 800c8bc:	4770      	bx	lr
        if (sign) {
 800c8be:	b129      	cbz	r1, 800c8cc <intarg+0x44>
            val = va_arg(*va, long);
 800c8c0:	6813      	ldr	r3, [r2, #0]
 800c8c2:	1d19      	adds	r1, r3, #4
 800c8c4:	6011      	str	r1, [r2, #0]
 800c8c6:	6818      	ldr	r0, [r3, #0]
 800c8c8:	17c1      	asrs	r1, r0, #31
 800c8ca:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
 800c8cc:	6813      	ldr	r3, [r2, #0]
 800c8ce:	1d19      	adds	r1, r3, #4
 800c8d0:	6011      	str	r1, [r2, #0]
 800c8d2:	6818      	ldr	r0, [r3, #0]
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	4770      	bx	lr
            val = va_arg(*va, long long);
 800c8d8:	6813      	ldr	r3, [r2, #0]
 800c8da:	3307      	adds	r3, #7
 800c8dc:	f023 0307 	bic.w	r3, r3, #7
 800c8e0:	f103 0108 	add.w	r1, r3, #8
 800c8e4:	6011      	str	r1, [r2, #0]
 800c8e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8ea:	4770      	bx	lr

0800c8ec <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
 800c8ec:	b570      	push	{r4, r5, r6, lr}
 800c8ee:	b08a      	sub	sp, #40	; 0x28
 800c8f0:	4605      	mov	r5, r0
 800c8f2:	9101      	str	r1, [sp, #4]
 800c8f4:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
 800c8f6:	ab02      	add	r3, sp, #8
 800c8f8:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
 800c8fa:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
 800c8fc:	9b01      	ldr	r3, [sp, #4]
 800c8fe:	1c5a      	adds	r2, r3, #1
 800c900:	9201      	str	r2, [sp, #4]
 800c902:	7819      	ldrb	r1, [r3, #0]
 800c904:	2900      	cmp	r1, #0
 800c906:	f000 811c 	beq.w	800cb42 <tfp_format+0x256>
        if (ch != '%') {
 800c90a:	2925      	cmp	r1, #37	; 0x25
 800c90c:	d004      	beq.n	800c918 <tfp_format+0x2c>
            written += putf(putp, ch);
 800c90e:	4628      	mov	r0, r5
 800c910:	f7ff ff16 	bl	800c740 <putf>
 800c914:	4404      	add	r4, r0
 800c916:	e7f1      	b.n	800c8fc <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
 800c918:	2200      	movs	r2, #0
 800c91a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
 800c91e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
 800c922:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
 800c926:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 800c92a:	f362 0382 	bfi	r3, r2, #2, #1
 800c92e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
 800c932:	9b01      	ldr	r3, [sp, #4]
 800c934:	1c5a      	adds	r2, r3, #1
 800c936:	9201      	str	r2, [sp, #4]
 800c938:	7818      	ldrb	r0, [r3, #0]
 800c93a:	b128      	cbz	r0, 800c948 <tfp_format+0x5c>
                switch (ch) {
 800c93c:	282d      	cmp	r0, #45	; 0x2d
 800c93e:	d04e      	beq.n	800c9de <tfp_format+0xf2>
 800c940:	2830      	cmp	r0, #48	; 0x30
 800c942:	d03c      	beq.n	800c9be <tfp_format+0xd2>
 800c944:	2823      	cmp	r0, #35	; 0x23
 800c946:	d043      	beq.n	800c9d0 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
 800c948:	282a      	cmp	r0, #42	; 0x2a
 800c94a:	d052      	beq.n	800c9f2 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
 800c94c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c950:	b2db      	uxtb	r3, r3
 800c952:	2b09      	cmp	r3, #9
 800c954:	d961      	bls.n	800ca1a <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
 800c956:	286c      	cmp	r0, #108	; 0x6c
 800c958:	d065      	beq.n	800ca26 <tfp_format+0x13a>
            lng = 0;
 800c95a:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
 800c95c:	287a      	cmp	r0, #122	; 0x7a
 800c95e:	d06f      	beq.n	800ca40 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
 800c960:	2869      	cmp	r0, #105	; 0x69
 800c962:	f000 808e 	beq.w	800ca82 <tfp_format+0x196>
 800c966:	d970      	bls.n	800ca4a <tfp_format+0x15e>
 800c968:	2873      	cmp	r0, #115	; 0x73
 800c96a:	f000 80dd 	beq.w	800cb28 <tfp_format+0x23c>
 800c96e:	f200 8099 	bhi.w	800caa4 <tfp_format+0x1b8>
 800c972:	286f      	cmp	r0, #111	; 0x6f
 800c974:	f000 80c7 	beq.w	800cb06 <tfp_format+0x21a>
 800c978:	2870      	cmp	r0, #112	; 0x70
 800c97a:	d1bf      	bne.n	800c8fc <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
 800c97c:	9b00      	ldr	r3, [sp, #0]
 800c97e:	1d1a      	adds	r2, r3, #4
 800c980:	9200      	str	r2, [sp, #0]
 800c982:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
 800c984:	2310      	movs	r3, #16
 800c986:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
 800c98a:	aa08      	add	r2, sp, #32
 800c98c:	2100      	movs	r1, #0
 800c98e:	f7ff fe34 	bl	800c5fa <ui2a>
                p.width = 2 * sizeof(void*);
 800c992:	2308      	movs	r3, #8
 800c994:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
 800c998:	2301      	movs	r3, #1
 800c99a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
 800c99e:	2130      	movs	r1, #48	; 0x30
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	f7ff fecd 	bl	800c740 <putf>
 800c9a6:	4404      	add	r4, r0
                written += putf(putp, 'x');
 800c9a8:	2178      	movs	r1, #120	; 0x78
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	f7ff fec8 	bl	800c740 <putf>
 800c9b0:	4404      	add	r4, r0
                written += putchw(putp, &p);
 800c9b2:	a908      	add	r1, sp, #32
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	f7ff fed9 	bl	800c76c <putchw>
 800c9ba:	4404      	add	r4, r0
                break;
 800c9bc:	e79e      	b.n	800c8fc <tfp_format+0x10>
                    if (!p.left) {
 800c9be:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 800c9c2:	f013 0f08 	tst.w	r3, #8
 800c9c6:	d1b4      	bne.n	800c932 <tfp_format+0x46>
                        p.lz = 1;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
 800c9ce:	e7b0      	b.n	800c932 <tfp_format+0x46>
                    p.alt = 1;
 800c9d0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 800c9d4:	f043 0302 	orr.w	r3, r3, #2
 800c9d8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
 800c9dc:	e7a9      	b.n	800c932 <tfp_format+0x46>
                    p.left = 1;
 800c9de:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 800c9e2:	f043 0308 	orr.w	r3, r3, #8
 800c9e6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
 800c9f0:	e79f      	b.n	800c932 <tfp_format+0x46>
                i = intarg(0, 1, &va);
 800c9f2:	466a      	mov	r2, sp
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	f7ff ff46 	bl	800c888 <intarg>
                if (i > UCHAR_MAX) {
 800c9fc:	28ff      	cmp	r0, #255	; 0xff
 800c9fe:	dd07      	ble.n	800ca10 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
 800ca00:	23ff      	movs	r3, #255	; 0xff
 800ca02:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
 800ca06:	9b01      	ldr	r3, [sp, #4]
 800ca08:	1c5a      	adds	r2, r3, #1
 800ca0a:	9201      	str	r2, [sp, #4]
 800ca0c:	7818      	ldrb	r0, [r3, #0]
 800ca0e:	e7a2      	b.n	800c956 <tfp_format+0x6a>
                } else if (i > 0) {
 800ca10:	2800      	cmp	r0, #0
 800ca12:	ddf8      	ble.n	800ca06 <tfp_format+0x11a>
                    p.width = i;
 800ca14:	f88d 0020 	strb.w	r0, [sp, #32]
 800ca18:	e7f5      	b.n	800ca06 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
 800ca1a:	ab08      	add	r3, sp, #32
 800ca1c:	220a      	movs	r2, #10
 800ca1e:	a901      	add	r1, sp, #4
 800ca20:	f7ff fe73 	bl	800c70a <a2i>
 800ca24:	e797      	b.n	800c956 <tfp_format+0x6a>
                ch = *(fmt++);
 800ca26:	9b01      	ldr	r3, [sp, #4]
 800ca28:	1c5a      	adds	r2, r3, #1
 800ca2a:	9201      	str	r2, [sp, #4]
 800ca2c:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
 800ca2e:	286c      	cmp	r0, #108	; 0x6c
 800ca30:	d001      	beq.n	800ca36 <tfp_format+0x14a>
                lng = 1;
 800ca32:	2601      	movs	r6, #1
 800ca34:	e792      	b.n	800c95c <tfp_format+0x70>
                    ch = *(fmt++);
 800ca36:	1c9a      	adds	r2, r3, #2
 800ca38:	9201      	str	r2, [sp, #4]
 800ca3a:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
 800ca3c:	2602      	movs	r6, #2
 800ca3e:	e78d      	b.n	800c95c <tfp_format+0x70>
                ch = *(fmt++);
 800ca40:	9b01      	ldr	r3, [sp, #4]
 800ca42:	1c5a      	adds	r2, r3, #1
 800ca44:	9201      	str	r2, [sp, #4]
 800ca46:	7818      	ldrb	r0, [r3, #0]
 800ca48:	e78a      	b.n	800c960 <tfp_format+0x74>
            switch (ch) {
 800ca4a:	2858      	cmp	r0, #88	; 0x58
 800ca4c:	d040      	beq.n	800cad0 <tfp_format+0x1e4>
 800ca4e:	d80a      	bhi.n	800ca66 <tfp_format+0x17a>
 800ca50:	2800      	cmp	r0, #0
 800ca52:	d076      	beq.n	800cb42 <tfp_format+0x256>
 800ca54:	2825      	cmp	r0, #37	; 0x25
 800ca56:	f47f af51 	bne.w	800c8fc <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
 800ca5a:	4601      	mov	r1, r0
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f7ff fe6f 	bl	800c740 <putf>
 800ca62:	4404      	add	r4, r0
                break;
 800ca64:	e74a      	b.n	800c8fc <tfp_format+0x10>
            switch (ch) {
 800ca66:	2863      	cmp	r0, #99	; 0x63
 800ca68:	d108      	bne.n	800ca7c <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
 800ca6a:	9b00      	ldr	r3, [sp, #0]
 800ca6c:	1d1a      	adds	r2, r3, #4
 800ca6e:	9200      	str	r2, [sp, #0]
 800ca70:	7819      	ldrb	r1, [r3, #0]
 800ca72:	4628      	mov	r0, r5
 800ca74:	f7ff fe64 	bl	800c740 <putf>
 800ca78:	4404      	add	r4, r0
                break;
 800ca7a:	e73f      	b.n	800c8fc <tfp_format+0x10>
            switch (ch) {
 800ca7c:	2864      	cmp	r0, #100	; 0x64
 800ca7e:	f47f af3d 	bne.w	800c8fc <tfp_format+0x10>
                p.base = 10;
 800ca82:	230a      	movs	r3, #10
 800ca84:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
 800ca88:	466a      	mov	r2, sp
 800ca8a:	2101      	movs	r1, #1
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f7ff fefb 	bl	800c888 <intarg>
 800ca92:	aa08      	add	r2, sp, #32
 800ca94:	f7ff fe11 	bl	800c6ba <i2a>
                written += putchw(putp, &p);
 800ca98:	a908      	add	r1, sp, #32
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	f7ff fe66 	bl	800c76c <putchw>
 800caa0:	4404      	add	r4, r0
                break;
 800caa2:	e72b      	b.n	800c8fc <tfp_format+0x10>
            switch (ch) {
 800caa4:	2875      	cmp	r0, #117	; 0x75
 800caa6:	d110      	bne.n	800caca <tfp_format+0x1de>
                p.base = 10;
 800caa8:	230a      	movs	r3, #10
 800caaa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
 800caae:	466a      	mov	r2, sp
 800cab0:	2100      	movs	r1, #0
 800cab2:	4630      	mov	r0, r6
 800cab4:	f7ff fee8 	bl	800c888 <intarg>
 800cab8:	aa08      	add	r2, sp, #32
 800caba:	f7ff fd9e 	bl	800c5fa <ui2a>
                written += putchw(putp, &p);
 800cabe:	a908      	add	r1, sp, #32
 800cac0:	4628      	mov	r0, r5
 800cac2:	f7ff fe53 	bl	800c76c <putchw>
 800cac6:	4404      	add	r4, r0
                break;
 800cac8:	e718      	b.n	800c8fc <tfp_format+0x10>
            switch (ch) {
 800caca:	2878      	cmp	r0, #120	; 0x78
 800cacc:	f47f af16 	bne.w	800c8fc <tfp_format+0x10>
                p.base = 16;
 800cad0:	2310      	movs	r3, #16
 800cad2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
 800cad6:	2858      	cmp	r0, #88	; 0x58
 800cad8:	bf14      	ite	ne
 800cada:	2300      	movne	r3, #0
 800cadc:	2301      	moveq	r3, #1
 800cade:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 800cae2:	f363 0282 	bfi	r2, r3, #2, #1
 800cae6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
 800caea:	466a      	mov	r2, sp
 800caec:	2100      	movs	r1, #0
 800caee:	4630      	mov	r0, r6
 800caf0:	f7ff feca 	bl	800c888 <intarg>
 800caf4:	aa08      	add	r2, sp, #32
 800caf6:	f7ff fd80 	bl	800c5fa <ui2a>
                written += putchw(putp, &p);
 800cafa:	a908      	add	r1, sp, #32
 800cafc:	4628      	mov	r0, r5
 800cafe:	f7ff fe35 	bl	800c76c <putchw>
 800cb02:	4404      	add	r4, r0
                break;
 800cb04:	e6fa      	b.n	800c8fc <tfp_format+0x10>
                p.base = 8;
 800cb06:	2308      	movs	r3, #8
 800cb08:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
 800cb0c:	466a      	mov	r2, sp
 800cb0e:	2100      	movs	r1, #0
 800cb10:	4630      	mov	r0, r6
 800cb12:	f7ff feb9 	bl	800c888 <intarg>
 800cb16:	aa08      	add	r2, sp, #32
 800cb18:	f7ff fd6f 	bl	800c5fa <ui2a>
                written += putchw(putp, &p);
 800cb1c:	a908      	add	r1, sp, #32
 800cb1e:	4628      	mov	r0, r5
 800cb20:	f7ff fe24 	bl	800c76c <putchw>
 800cb24:	4404      	add	r4, r0
                break;
 800cb26:	e6e9      	b.n	800c8fc <tfp_format+0x10>
                p.bf = va_arg(va, char *);
 800cb28:	9b00      	ldr	r3, [sp, #0]
 800cb2a:	1d1a      	adds	r2, r3, #4
 800cb2c:	9200      	str	r2, [sp, #0]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
 800cb32:	a908      	add	r1, sp, #32
 800cb34:	4628      	mov	r0, r5
 800cb36:	f7ff fe19 	bl	800c76c <putchw>
 800cb3a:	4404      	add	r4, r0
                p.bf = bf;
 800cb3c:	ab02      	add	r3, sp, #8
 800cb3e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
 800cb40:	e6dc      	b.n	800c8fc <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
 800cb42:	4620      	mov	r0, r4
 800cb44:	b00a      	add	sp, #40	; 0x28
 800cb46:	bd70      	pop	{r4, r5, r6, pc}

0800cb48 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
 800cb48:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
 800cb4a:	f7ff fecf 	bl	800c8ec <tfp_format>
}
 800cb4e:	bd08      	pop	{r3, pc}

0800cb50 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
 800cb50:	b40f      	push	{r0, r1, r2, r3}
 800cb52:	b500      	push	{lr}
 800cb54:	b083      	sub	sp, #12
 800cb56:	aa04      	add	r2, sp, #16
 800cb58:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
 800cb5c:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
 800cb5e:	4b04      	ldr	r3, [pc, #16]	; (800cb70 <printf+0x20>)
 800cb60:	6818      	ldr	r0, [r3, #0]
 800cb62:	f7ff fff1 	bl	800cb48 <vfprintf>
    va_end(va);
    return rv;
}
 800cb66:	b003      	add	sp, #12
 800cb68:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb6c:	b004      	add	sp, #16
 800cb6e:	4770      	bx	lr
 800cb70:	0800dc4c 	.word	0x0800dc4c

0800cb74 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
 800cb74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb76:	b085      	sub	sp, #20
 800cb78:	4605      	mov	r5, r0
 800cb7a:	460c      	mov	r4, r1
 800cb7c:	4616      	mov	r6, r2
 800cb7e:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
 800cb80:	460a      	mov	r2, r1
 800cb82:	4601      	mov	r1, r0
 800cb84:	4668      	mov	r0, sp
 800cb86:	f000 f83d 	bl	800cc04 <fmemopen_w>
    tfp_format(f, fmt, va);
 800cb8a:	463a      	mov	r2, r7
 800cb8c:	4631      	mov	r1, r6
 800cb8e:	f7ff fead 	bl	800c8ec <tfp_format>
    if (size > 0) {
 800cb92:	b12c      	cbz	r4, 800cba0 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
 800cb94:	9b02      	ldr	r3, [sp, #8]
 800cb96:	42a3      	cmp	r3, r4
 800cb98:	d305      	bcc.n	800cba6 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
 800cb9a:	3c01      	subs	r4, #1
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
 800cba0:	9802      	ldr	r0, [sp, #8]
 800cba2:	b005      	add	sp, #20
 800cba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
 800cba6:	9b01      	ldr	r3, [sp, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	701a      	strb	r2, [r3, #0]
 800cbac:	e7f8      	b.n	800cba0 <vsnprintf+0x2c>
	...

0800cbb0 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
 800cbb0:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
 800cbb2:	460a      	mov	r2, r1
 800cbb4:	4601      	mov	r1, r0
 800cbb6:	4b02      	ldr	r3, [pc, #8]	; (800cbc0 <vprintf+0x10>)
 800cbb8:	6818      	ldr	r0, [r3, #0]
 800cbba:	f7ff ffc5 	bl	800cb48 <vfprintf>
}
 800cbbe:	bd08      	pop	{r3, pc}
 800cbc0:	0800dc4c 	.word	0x0800dc4c

0800cbc4 <vsprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int vsprintf(char *buffer, const char *format, va_list ap)
{
 800cbc4:	b508      	push	{r3, lr}
	return vsnprintf(buffer, SIZE_MAX/2, format, ap);
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	460a      	mov	r2, r1
 800cbca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbce:	f7ff ffd1 	bl	800cb74 <vsnprintf>
}
 800cbd2:	bd08      	pop	{r3, pc}

0800cbd4 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
 800cbd4:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
 800cbd6:	2500      	movs	r5, #0
    
    while (n--)
 800cbd8:	e000      	b.n	800cbdc <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
 800cbda:	4622      	mov	r2, r4
    while (n--)
 800cbdc:	1e54      	subs	r4, r2, #1
 800cbde:	b16a      	cbz	r2, 800cbfc <memfile_write+0x28>
        f->bytes_written++;
 800cbe0:	6883      	ldr	r3, [r0, #8]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
 800cbe6:	68c2      	ldr	r2, [r0, #12]
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d8f6      	bhi.n	800cbda <memfile_write+0x6>
            *f->buffer++ = *bp++;
 800cbec:	6843      	ldr	r3, [r0, #4]
 800cbee:	1c5a      	adds	r2, r3, #1
 800cbf0:	6042      	str	r2, [r0, #4]
 800cbf2:	780a      	ldrb	r2, [r1, #0]
 800cbf4:	701a      	strb	r2, [r3, #0]
            i++;
 800cbf6:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
 800cbf8:	3101      	adds	r1, #1
 800cbfa:	e7ee      	b.n	800cbda <memfile_write+0x6>
        }
    }
    
    return i;
}
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	bc30      	pop	{r4, r5}
 800cc00:	4770      	bx	lr
	...

0800cc04 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
 800cc04:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
 800cc06:	4c04      	ldr	r4, [pc, #16]	; (800cc18 <fmemopen_w+0x14>)
 800cc08:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
 800cc0a:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
 800cc0c:	2100      	movs	r1, #0
 800cc0e:	6081      	str	r1, [r0, #8]
    storage->size = size;
 800cc10:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
 800cc12:	bc10      	pop	{r4}
 800cc14:	4770      	bx	lr
 800cc16:	bf00      	nop
 800cc18:	0800dc44 	.word	0x0800dc44

0800cc1c <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	4770      	bx	lr

0800cc20 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
 800cc20:	b510      	push	{r4, lr}
 800cc22:	4608      	mov	r0, r1
 800cc24:	4614      	mov	r4, r2
    console_write(bp, n);
 800cc26:	4611      	mov	r1, r2
 800cc28:	f7f9 fb48 	bl	80062bc <console_write>
    return n;
}
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	bd10      	pop	{r4, pc}

0800cc30 <__aeabi_d2f>:
 800cc30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800cc34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800cc38:	bf24      	itt	cs
 800cc3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800cc3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800cc42:	d90d      	bls.n	800cc60 <__aeabi_d2f+0x30>
 800cc44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800cc48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800cc4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800cc50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800cc54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800cc58:	bf08      	it	eq
 800cc5a:	f020 0001 	biceq.w	r0, r0, #1
 800cc5e:	4770      	bx	lr
 800cc60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800cc64:	d121      	bne.n	800ccaa <__aeabi_d2f+0x7a>
 800cc66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800cc6a:	bfbc      	itt	lt
 800cc6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800cc70:	4770      	bxlt	lr
 800cc72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800cc76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800cc7a:	f1c2 0218 	rsb	r2, r2, #24
 800cc7e:	f1c2 0c20 	rsb	ip, r2, #32
 800cc82:	fa10 f30c 	lsls.w	r3, r0, ip
 800cc86:	fa20 f002 	lsr.w	r0, r0, r2
 800cc8a:	bf18      	it	ne
 800cc8c:	f040 0001 	orrne.w	r0, r0, #1
 800cc90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800cc94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800cc98:	fa03 fc0c 	lsl.w	ip, r3, ip
 800cc9c:	ea40 000c 	orr.w	r0, r0, ip
 800cca0:	fa23 f302 	lsr.w	r3, r3, r2
 800cca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cca8:	e7cc      	b.n	800cc44 <__aeabi_d2f+0x14>
 800ccaa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800ccae:	d107      	bne.n	800ccc0 <__aeabi_d2f+0x90>
 800ccb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800ccb4:	bf1e      	ittt	ne
 800ccb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800ccba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800ccbe:	4770      	bxne	lr
 800ccc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800ccc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800ccc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop

0800ccd0 <__aeabi_uldivmod>:
 800ccd0:	b953      	cbnz	r3, 800cce8 <__aeabi_uldivmod+0x18>
 800ccd2:	b94a      	cbnz	r2, 800cce8 <__aeabi_uldivmod+0x18>
 800ccd4:	2900      	cmp	r1, #0
 800ccd6:	bf08      	it	eq
 800ccd8:	2800      	cmpeq	r0, #0
 800ccda:	bf1c      	itt	ne
 800ccdc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800cce0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800cce4:	f000 b974 	b.w	800cfd0 <__aeabi_idiv0>
 800cce8:	f1ad 0c08 	sub.w	ip, sp, #8
 800ccec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800ccf0:	f000 f806 	bl	800cd00 <__udivmoddi4>
 800ccf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ccf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ccfc:	b004      	add	sp, #16
 800ccfe:	4770      	bx	lr

0800cd00 <__udivmoddi4>:
 800cd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd04:	468c      	mov	ip, r1
 800cd06:	4604      	mov	r4, r0
 800cd08:	9e08      	ldr	r6, [sp, #32]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d14b      	bne.n	800cda6 <__udivmoddi4+0xa6>
 800cd0e:	428a      	cmp	r2, r1
 800cd10:	4615      	mov	r5, r2
 800cd12:	d967      	bls.n	800cde4 <__udivmoddi4+0xe4>
 800cd14:	fab2 f282 	clz	r2, r2
 800cd18:	b14a      	cbz	r2, 800cd2e <__udivmoddi4+0x2e>
 800cd1a:	f1c2 0720 	rsb	r7, r2, #32
 800cd1e:	fa01 f302 	lsl.w	r3, r1, r2
 800cd22:	fa20 f707 	lsr.w	r7, r0, r7
 800cd26:	4095      	lsls	r5, r2
 800cd28:	ea47 0c03 	orr.w	ip, r7, r3
 800cd2c:	4094      	lsls	r4, r2
 800cd2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800cd32:	fbbc f7fe 	udiv	r7, ip, lr
 800cd36:	fa1f f885 	uxth.w	r8, r5
 800cd3a:	fb0e c317 	mls	r3, lr, r7, ip
 800cd3e:	fb07 f908 	mul.w	r9, r7, r8
 800cd42:	0c21      	lsrs	r1, r4, #16
 800cd44:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cd48:	4599      	cmp	r9, r3
 800cd4a:	d909      	bls.n	800cd60 <__udivmoddi4+0x60>
 800cd4c:	18eb      	adds	r3, r5, r3
 800cd4e:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 800cd52:	f080 811c 	bcs.w	800cf8e <__udivmoddi4+0x28e>
 800cd56:	4599      	cmp	r9, r3
 800cd58:	f240 8119 	bls.w	800cf8e <__udivmoddi4+0x28e>
 800cd5c:	3f02      	subs	r7, #2
 800cd5e:	442b      	add	r3, r5
 800cd60:	eba3 0309 	sub.w	r3, r3, r9
 800cd64:	fbb3 f0fe 	udiv	r0, r3, lr
 800cd68:	fb0e 3310 	mls	r3, lr, r0, r3
 800cd6c:	fb00 f108 	mul.w	r1, r0, r8
 800cd70:	b2a4      	uxth	r4, r4
 800cd72:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800cd76:	42a1      	cmp	r1, r4
 800cd78:	d909      	bls.n	800cd8e <__udivmoddi4+0x8e>
 800cd7a:	192c      	adds	r4, r5, r4
 800cd7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cd80:	f080 8107 	bcs.w	800cf92 <__udivmoddi4+0x292>
 800cd84:	42a1      	cmp	r1, r4
 800cd86:	f240 8104 	bls.w	800cf92 <__udivmoddi4+0x292>
 800cd8a:	3802      	subs	r0, #2
 800cd8c:	442c      	add	r4, r5
 800cd8e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800cd92:	2700      	movs	r7, #0
 800cd94:	1a64      	subs	r4, r4, r1
 800cd96:	b11e      	cbz	r6, 800cda0 <__udivmoddi4+0xa0>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	40d4      	lsrs	r4, r2
 800cd9c:	e9c6 4300 	strd	r4, r3, [r6]
 800cda0:	4639      	mov	r1, r7
 800cda2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda6:	428b      	cmp	r3, r1
 800cda8:	d909      	bls.n	800cdbe <__udivmoddi4+0xbe>
 800cdaa:	2e00      	cmp	r6, #0
 800cdac:	f000 80ec 	beq.w	800cf88 <__udivmoddi4+0x288>
 800cdb0:	2700      	movs	r7, #0
 800cdb2:	e9c6 0100 	strd	r0, r1, [r6]
 800cdb6:	4638      	mov	r0, r7
 800cdb8:	4639      	mov	r1, r7
 800cdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdbe:	fab3 f783 	clz	r7, r3
 800cdc2:	2f00      	cmp	r7, #0
 800cdc4:	d148      	bne.n	800ce58 <__udivmoddi4+0x158>
 800cdc6:	428b      	cmp	r3, r1
 800cdc8:	d302      	bcc.n	800cdd0 <__udivmoddi4+0xd0>
 800cdca:	4282      	cmp	r2, r0
 800cdcc:	f200 80fb 	bhi.w	800cfc6 <__udivmoddi4+0x2c6>
 800cdd0:	1a84      	subs	r4, r0, r2
 800cdd2:	eb61 0303 	sbc.w	r3, r1, r3
 800cdd6:	2001      	movs	r0, #1
 800cdd8:	469c      	mov	ip, r3
 800cdda:	2e00      	cmp	r6, #0
 800cddc:	d0e0      	beq.n	800cda0 <__udivmoddi4+0xa0>
 800cdde:	e9c6 4c00 	strd	r4, ip, [r6]
 800cde2:	e7dd      	b.n	800cda0 <__udivmoddi4+0xa0>
 800cde4:	b902      	cbnz	r2, 800cde8 <__udivmoddi4+0xe8>
 800cde6:	deff      	udf	#255	; 0xff
 800cde8:	fab2 f282 	clz	r2, r2
 800cdec:	2a00      	cmp	r2, #0
 800cdee:	f040 808f 	bne.w	800cf10 <__udivmoddi4+0x210>
 800cdf2:	2701      	movs	r7, #1
 800cdf4:	1b49      	subs	r1, r1, r5
 800cdf6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cdfa:	fa1f f985 	uxth.w	r9, r5
 800cdfe:	fbb1 fef8 	udiv	lr, r1, r8
 800ce02:	fb08 111e 	mls	r1, r8, lr, r1
 800ce06:	fb09 f00e 	mul.w	r0, r9, lr
 800ce0a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800ce0e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 800ce12:	4298      	cmp	r0, r3
 800ce14:	d907      	bls.n	800ce26 <__udivmoddi4+0x126>
 800ce16:	18eb      	adds	r3, r5, r3
 800ce18:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800ce1c:	d202      	bcs.n	800ce24 <__udivmoddi4+0x124>
 800ce1e:	4298      	cmp	r0, r3
 800ce20:	f200 80cd 	bhi.w	800cfbe <__udivmoddi4+0x2be>
 800ce24:	468e      	mov	lr, r1
 800ce26:	1a1b      	subs	r3, r3, r0
 800ce28:	fbb3 f0f8 	udiv	r0, r3, r8
 800ce2c:	fb08 3310 	mls	r3, r8, r0, r3
 800ce30:	fb09 f900 	mul.w	r9, r9, r0
 800ce34:	b2a4      	uxth	r4, r4
 800ce36:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800ce3a:	45a1      	cmp	r9, r4
 800ce3c:	d907      	bls.n	800ce4e <__udivmoddi4+0x14e>
 800ce3e:	192c      	adds	r4, r5, r4
 800ce40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ce44:	d202      	bcs.n	800ce4c <__udivmoddi4+0x14c>
 800ce46:	45a1      	cmp	r9, r4
 800ce48:	f200 80b6 	bhi.w	800cfb8 <__udivmoddi4+0x2b8>
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	eba4 0409 	sub.w	r4, r4, r9
 800ce52:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800ce56:	e79e      	b.n	800cd96 <__udivmoddi4+0x96>
 800ce58:	f1c7 0520 	rsb	r5, r7, #32
 800ce5c:	40bb      	lsls	r3, r7
 800ce5e:	fa22 fc05 	lsr.w	ip, r2, r5
 800ce62:	ea4c 0c03 	orr.w	ip, ip, r3
 800ce66:	fa21 f405 	lsr.w	r4, r1, r5
 800ce6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800ce6e:	fbb4 f9fe 	udiv	r9, r4, lr
 800ce72:	fa1f f88c 	uxth.w	r8, ip
 800ce76:	fb0e 4419 	mls	r4, lr, r9, r4
 800ce7a:	fa20 f305 	lsr.w	r3, r0, r5
 800ce7e:	40b9      	lsls	r1, r7
 800ce80:	fb09 fa08 	mul.w	sl, r9, r8
 800ce84:	4319      	orrs	r1, r3
 800ce86:	0c0b      	lsrs	r3, r1, #16
 800ce88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800ce8c:	45a2      	cmp	sl, r4
 800ce8e:	fa02 f207 	lsl.w	r2, r2, r7
 800ce92:	fa00 f307 	lsl.w	r3, r0, r7
 800ce96:	d90b      	bls.n	800ceb0 <__udivmoddi4+0x1b0>
 800ce98:	eb1c 0404 	adds.w	r4, ip, r4
 800ce9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800cea0:	f080 8088 	bcs.w	800cfb4 <__udivmoddi4+0x2b4>
 800cea4:	45a2      	cmp	sl, r4
 800cea6:	f240 8085 	bls.w	800cfb4 <__udivmoddi4+0x2b4>
 800ceaa:	f1a9 0902 	sub.w	r9, r9, #2
 800ceae:	4464      	add	r4, ip
 800ceb0:	eba4 040a 	sub.w	r4, r4, sl
 800ceb4:	fbb4 f0fe 	udiv	r0, r4, lr
 800ceb8:	fb0e 4410 	mls	r4, lr, r0, r4
 800cebc:	fb00 fa08 	mul.w	sl, r0, r8
 800cec0:	b289      	uxth	r1, r1
 800cec2:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800cec6:	45a2      	cmp	sl, r4
 800cec8:	d908      	bls.n	800cedc <__udivmoddi4+0x1dc>
 800ceca:	eb1c 0404 	adds.w	r4, ip, r4
 800cece:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800ced2:	d26b      	bcs.n	800cfac <__udivmoddi4+0x2ac>
 800ced4:	45a2      	cmp	sl, r4
 800ced6:	d969      	bls.n	800cfac <__udivmoddi4+0x2ac>
 800ced8:	3802      	subs	r0, #2
 800ceda:	4464      	add	r4, ip
 800cedc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800cee0:	fba0 8902 	umull	r8, r9, r0, r2
 800cee4:	eba4 040a 	sub.w	r4, r4, sl
 800cee8:	454c      	cmp	r4, r9
 800ceea:	4641      	mov	r1, r8
 800ceec:	46ce      	mov	lr, r9
 800ceee:	d354      	bcc.n	800cf9a <__udivmoddi4+0x29a>
 800cef0:	d051      	beq.n	800cf96 <__udivmoddi4+0x296>
 800cef2:	2e00      	cmp	r6, #0
 800cef4:	d069      	beq.n	800cfca <__udivmoddi4+0x2ca>
 800cef6:	1a5a      	subs	r2, r3, r1
 800cef8:	eb64 040e 	sbc.w	r4, r4, lr
 800cefc:	fa04 f505 	lsl.w	r5, r4, r5
 800cf00:	fa22 f307 	lsr.w	r3, r2, r7
 800cf04:	40fc      	lsrs	r4, r7
 800cf06:	431d      	orrs	r5, r3
 800cf08:	e9c6 5400 	strd	r5, r4, [r6]
 800cf0c:	2700      	movs	r7, #0
 800cf0e:	e747      	b.n	800cda0 <__udivmoddi4+0xa0>
 800cf10:	4095      	lsls	r5, r2
 800cf12:	f1c2 0320 	rsb	r3, r2, #32
 800cf16:	fa21 f003 	lsr.w	r0, r1, r3
 800cf1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800cf1e:	fbb0 f7f8 	udiv	r7, r0, r8
 800cf22:	fa1f f985 	uxth.w	r9, r5
 800cf26:	fb08 0017 	mls	r0, r8, r7, r0
 800cf2a:	fa24 f303 	lsr.w	r3, r4, r3
 800cf2e:	4091      	lsls	r1, r2
 800cf30:	fb07 fc09 	mul.w	ip, r7, r9
 800cf34:	430b      	orrs	r3, r1
 800cf36:	0c19      	lsrs	r1, r3, #16
 800cf38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cf3c:	458c      	cmp	ip, r1
 800cf3e:	fa04 f402 	lsl.w	r4, r4, r2
 800cf42:	d907      	bls.n	800cf54 <__udivmoddi4+0x254>
 800cf44:	1869      	adds	r1, r5, r1
 800cf46:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800cf4a:	d231      	bcs.n	800cfb0 <__udivmoddi4+0x2b0>
 800cf4c:	458c      	cmp	ip, r1
 800cf4e:	d92f      	bls.n	800cfb0 <__udivmoddi4+0x2b0>
 800cf50:	3f02      	subs	r7, #2
 800cf52:	4429      	add	r1, r5
 800cf54:	eba1 010c 	sub.w	r1, r1, ip
 800cf58:	fbb1 f0f8 	udiv	r0, r1, r8
 800cf5c:	fb08 1c10 	mls	ip, r8, r0, r1
 800cf60:	fb00 fe09 	mul.w	lr, r0, r9
 800cf64:	b299      	uxth	r1, r3
 800cf66:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800cf6a:	458e      	cmp	lr, r1
 800cf6c:	d907      	bls.n	800cf7e <__udivmoddi4+0x27e>
 800cf6e:	1869      	adds	r1, r5, r1
 800cf70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cf74:	d218      	bcs.n	800cfa8 <__udivmoddi4+0x2a8>
 800cf76:	458e      	cmp	lr, r1
 800cf78:	d916      	bls.n	800cfa8 <__udivmoddi4+0x2a8>
 800cf7a:	3802      	subs	r0, #2
 800cf7c:	4429      	add	r1, r5
 800cf7e:	eba1 010e 	sub.w	r1, r1, lr
 800cf82:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800cf86:	e73a      	b.n	800cdfe <__udivmoddi4+0xfe>
 800cf88:	4637      	mov	r7, r6
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	e708      	b.n	800cda0 <__udivmoddi4+0xa0>
 800cf8e:	460f      	mov	r7, r1
 800cf90:	e6e6      	b.n	800cd60 <__udivmoddi4+0x60>
 800cf92:	4618      	mov	r0, r3
 800cf94:	e6fb      	b.n	800cd8e <__udivmoddi4+0x8e>
 800cf96:	4543      	cmp	r3, r8
 800cf98:	d2ab      	bcs.n	800cef2 <__udivmoddi4+0x1f2>
 800cf9a:	ebb8 0102 	subs.w	r1, r8, r2
 800cf9e:	eb69 020c 	sbc.w	r2, r9, ip
 800cfa2:	3801      	subs	r0, #1
 800cfa4:	4696      	mov	lr, r2
 800cfa6:	e7a4      	b.n	800cef2 <__udivmoddi4+0x1f2>
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	e7e8      	b.n	800cf7e <__udivmoddi4+0x27e>
 800cfac:	4608      	mov	r0, r1
 800cfae:	e795      	b.n	800cedc <__udivmoddi4+0x1dc>
 800cfb0:	4607      	mov	r7, r0
 800cfb2:	e7cf      	b.n	800cf54 <__udivmoddi4+0x254>
 800cfb4:	4681      	mov	r9, r0
 800cfb6:	e77b      	b.n	800ceb0 <__udivmoddi4+0x1b0>
 800cfb8:	3802      	subs	r0, #2
 800cfba:	442c      	add	r4, r5
 800cfbc:	e747      	b.n	800ce4e <__udivmoddi4+0x14e>
 800cfbe:	f1ae 0e02 	sub.w	lr, lr, #2
 800cfc2:	442b      	add	r3, r5
 800cfc4:	e72f      	b.n	800ce26 <__udivmoddi4+0x126>
 800cfc6:	4638      	mov	r0, r7
 800cfc8:	e707      	b.n	800cdda <__udivmoddi4+0xda>
 800cfca:	4637      	mov	r7, r6
 800cfcc:	e6e8      	b.n	800cda0 <__udivmoddi4+0xa0>
 800cfce:	bf00      	nop

0800cfd0 <__aeabi_idiv0>:
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop

0800cfd4 <main>:
#[link(name = "libs_mynewt_rust")]
extern {
    fn rust_sysinit();  
}

#[entry]
 800cfd4:	b08a      	sub	sp, #40	; 0x28
fn main() -> ! {
    //  Init Mynewt system.
    unsafe {
        rust_sysinit();
 800cfd6:	f7f4 f920 	bl	800121a <rust_sysinit>
 800cfda:	e7ff      	b.n	800cfdc <main+0x8>
        console_flush();
 800cfdc:	f7f9 f9ee 	bl	80063bc <console_flush>
 800cfe0:	e7ff      	b.n	800cfe2 <main+0xe>
    }

    //  Message to be displayed.
    let msg = "Testing 123\n";
 800cfe2:	f64d 4050 	movw	r0, #56400	; 0xdc50
 800cfe6:	f6c0 0000 	movt	r0, #2048	; 0x800
 800cfea:	9001      	str	r0, [sp, #4]
 800cfec:	200c      	movs	r0, #12
 800cfee:	9002      	str	r0, [sp, #8]
    let buf = msg.as_bytes();
 800cff0:	9801      	ldr	r0, [sp, #4]
 800cff2:	9902      	ldr	r1, [sp, #8]
 800cff4:	9006      	str	r0, [sp, #24]
 800cff6:	9107      	str	r1, [sp, #28]
 800cff8:	9806      	ldr	r0, [sp, #24]
 800cffa:	9907      	ldr	r1, [sp, #28]
 800cffc:	9008      	str	r0, [sp, #32]
 800cffe:	9109      	str	r1, [sp, #36]	; 0x24
 800d000:	9808      	ldr	r0, [sp, #32]
 800d002:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d004:	9104      	str	r1, [sp, #16]
 800d006:	9003      	str	r0, [sp, #12]
 800d008:	e7ff      	b.n	800d00a <main+0x36>
    let len = buf.len();
 800d00a:	9803      	ldr	r0, [sp, #12]
 800d00c:	9904      	ldr	r1, [sp, #16]
 800d00e:	f000 f811 	bl	800d034 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h2f0f6af234e01f66E>
 800d012:	9005      	str	r0, [sp, #20]
 800d014:	e7ff      	b.n	800d016 <main+0x42>

    //  Display message on Arm Semihosting console (openocd).
    unsafe {
        console_buffer(buf.as_ptr(), len as u32);
 800d016:	9803      	ldr	r0, [sp, #12]
 800d018:	9904      	ldr	r1, [sp, #16]
 800d01a:	f000 f819 	bl	800d050 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hab484211479aaa78E>
 800d01e:	9000      	str	r0, [sp, #0]
 800d020:	e7ff      	b.n	800d022 <main+0x4e>
 800d022:	9905      	ldr	r1, [sp, #20]
 800d024:	9800      	ldr	r0, [sp, #0]
 800d026:	f7f9 f9f1 	bl	800640c <console_buffer>
 800d02a:	e7ff      	b.n	800d02c <main+0x58>
        console_flush();
 800d02c:	f7f9 f9c6 	bl	80063bc <console_flush>
 800d030:	e7ff      	b.n	800d032 <main+0x5e>
    }

    loop {
 800d032:	e7fe      	b.n	800d032 <main+0x5e>

0800d034 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h2f0f6af234e01f66E>:
 800d034:	b086      	sub	sp, #24
 800d036:	460a      	mov	r2, r1
 800d038:	4603      	mov	r3, r0
 800d03a:	9002      	str	r0, [sp, #8]
 800d03c:	9103      	str	r1, [sp, #12]
 800d03e:	9802      	ldr	r0, [sp, #8]
 800d040:	9903      	ldr	r1, [sp, #12]
 800d042:	9004      	str	r0, [sp, #16]
 800d044:	9105      	str	r1, [sp, #20]
 800d046:	9805      	ldr	r0, [sp, #20]
 800d048:	9201      	str	r2, [sp, #4]
 800d04a:	9300      	str	r3, [sp, #0]
 800d04c:	b006      	add	sp, #24
 800d04e:	4770      	bx	lr

0800d050 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hab484211479aaa78E>:
 800d050:	b084      	sub	sp, #16
 800d052:	460a      	mov	r2, r1
 800d054:	4603      	mov	r3, r0
 800d056:	9002      	str	r0, [sp, #8]
 800d058:	9103      	str	r1, [sp, #12]
 800d05a:	9802      	ldr	r0, [sp, #8]
 800d05c:	9201      	str	r2, [sp, #4]
 800d05e:	9300      	str	r3, [sp, #0]
 800d060:	b004      	add	sp, #16
 800d062:	4770      	bx	lr

0800d064 <AHBPrescTable>:
	...
 800d06c:	0201 0403 0706 0908                         ........

0800d074 <APBPrescTable>:
 800d074:	0000 0000 0201 0403 6573 736e 726f 6e5f     ........sensor_n
 800d084:	746f 6669 655f 7476 0073 0000 7341 6573     otif_evts...Asse
 800d094:	7472 4020 3020 2578 0a78 0000 7341 6573     rt @ 0x%x...Asse
 800d0a4:	7472 4020 3020 2578 2078 202d 7325 253a     rt @ 0x%x - %s:%
 800d0b4:	0a64 0000 6e55 6168 646e 656c 2064 6e69     d...Unhandled in
 800d0c4:	6574 7272 7075 2074 2528 646c 2c29 6520     terrupt (%ld), e
 800d0d4:	6378 7065 6974 6e6f 7320 2070 7830 3025     xception sp 0x%0
 800d0e4:	6c38 0a78 0000 0000 7220 3a30 7830 3025     8lx..... r0:0x%0
 800d0f4:	6c38 2078 7220 3a31 7830 3025 6c38 2078     8lx  r1:0x%08lx 
 800d104:	7220 3a32 7830 3025 6c38 2078 7220 3a33      r2:0x%08lx  r3:
 800d114:	7830 3025 6c38 0a78 0000 0000 7220 3a34     0x%08lx..... r4:
 800d124:	7830 3025 6c38 2078 7220 3a35 7830 3025     0x%08lx  r5:0x%0
 800d134:	6c38 2078 7220 3a36 7830 3025 6c38 2078     8lx  r6:0x%08lx 
 800d144:	7220 3a37 7830 3025 6c38 0a78 0000 0000      r7:0x%08lx.....
 800d154:	7220 3a38 7830 3025 6c38 2078 7220 3a39      r8:0x%08lx  r9:
 800d164:	7830 3025 6c38 2078 3172 3a30 7830 3025     0x%08lx r10:0x%0
 800d174:	6c38 2078 3172 3a31 7830 3025 6c38 0a78     8lx r11:0x%08lx.
 800d184:	0000 0000 3172 3a32 7830 3025 6c38 2078     ....r12:0x%08lx 
 800d194:	6c20 3a72 7830 3025 6c38 2078 7020 3a63      lr:0x%08lx  pc:
 800d1a4:	7830 3025 6c38 2078 7370 3a72 7830 3025     0x%08lx psr:0x%0
 800d1b4:	6c38 0a78 0000 0000 4349 5253 303a 2578     8lx.....ICSR:0x%
 800d1c4:	3830 786c 4820 5346 3a52 7830 3025 6c38     08lx HFSR:0x%08l
 800d1d4:	2078 4643 5253 303a 2578 3830 786c 000a     x CFSR:0x%08lx..
 800d1e4:	4642 5241 303a 2578 3830 786c 4d20 464d     BFAR:0x%08lx MMF
 800d1f4:	5241 303a 2578 3830 786c 000a 616d 6e69     AR:0x%08lx..main
 800d204:	0000 0000 6469 656c 0000 0000 736d 7379     ....idle....msys
 800d214:	315f 0000 4441 2043 7263 6165 6574 6120     _1..ADC create a
 800d224:	6364 0a31 0000 0000 6461 3163 0000 0000     dc1.....adc1....

0800d234 <stm32f1_adc_funcs>:
 800d234:	32e5 0800 32b1 0800 325d 0800 320d 0800     .2...2..]2...2..
 800d244:	31ff 0800 31e1 0800 31d9 0800 7365 3870     .1...1...1..esp8
 800d254:	3632 5f36 0030 0000 7325 7263 6165 6574     266_0...%screate
 800d264:	6520 7073 3238 3636 305f 000a 0a5b 0000      esp8266_0..[...

0800d274 <_ZL13WIFI_PASSWORD>:
 800d274:	796d 705f 7361 7773 726f 5f64 7369 735f     my_password_is_s
 800d284:	6365 6572 0074 0000 0a5d 0000               ecret...]...

0800d290 <_ZL13network_iface>:
 800d290:	0000 0000 d250 0800 0010 0000 3629 0800     ....P.......)6..
 800d2a0:	0000 0000                                   ....

0800d2a4 <_ZL9WIFI_SSID>:
 800d2a4:	796d 735f 6973 0064 4455 0050 4354 0050     my_ssid.UDP.TCP.
 800d2b4:	5345 2050 6573 646e 7520 7064 000a 0000     ESP send udp....
 800d2c4:	5345 2050 7473 0a72 0000 0000 4f54 4f44     ESP str.....TODO
 800d2d4:	6f3a 5f63 7065 735f 7274 0000               :oc_ep_str..

0800d2e0 <_ZL9transport>:
 800d2e0:	0000 0000 3971 0800 3975 0800 39a9 0800     ....q9..u9...9..
	...
 800d2f8:	3981 0800 3979 0800 397d 0800 7325 7325     .9..y9..}9..%s%s
 800d308:	7325 0000 4f20 0a4b 0000 0000 4620 4941     %s.. OK..... FAI
 800d318:	454c 0a44 0000 0000 5345 2050 0000 0000     LED.....ESP ....
 800d328:	5441 432b 4649 5253 0000 0000 432b 4649     AT+CIFSR....+CIF
 800d338:	5253 533a 4154 5049 222c 3125 5b35 225e     SR:STAIP,"%15[^"
 800d348:	225d 0000 252c 2c64 6425 003a 5441 432b     ]"..,%d,%d:.AT+C
 800d358:	4457 4348 3d50 6425 252c 0064 706f 6e65     WDHCP=%d,%d.open
 800d368:	0000 0000 5441 432b 5049 5453 5241 3d54     ....AT+CIPSTART=
 800d378:	6425 222c 7325 2c22 2522 2273 252c 0064     %d,"%s","%s",%d.
 800d388:	6573 646e 0000 0000 7325 7325 2520 2e75     send....%s%s %u.
 800d398:	2e2e 000a 5441 432b 5049 4553 444e 253d     ....AT+CIPSEND=%
 800d3a8:	2c64 6425 0000 0000 003e 0000 4553 444e     d,%d....>...SEND
 800d3b8:	4f20 004b 6572 6573 0074 0000 7325 7325      OK.reset...%s%s
 800d3c8:	2e2e 0a2e 0000 0000 0a0d 5441 522b 5453     ..........AT+RST
 800d3d8:	0000 0000 6572 6461 0079 0000 6f63 6e6e     ....ready...conn
 800d3e8:	6365 0074 5441 432b 4a57 5041 223d 7325     ect.AT+CWJAP="%s
 800d3f8:	2c22 2522 2273 0000 2a2a 202a 6843 6365     ","%s"..*** Chec
 800d408:	206b 4957 4946 535f 4953 2044 6e61 2064     k WIFI_SSID and 
 800d418:	4957 4946 505f 5341 5753 524f 2044 6e69     WIFI_PASSWORD in
 800d428:	7420 7261 6567 7374 622f 756c 7065 6c69      targets/bluepil
 800d438:	5f6c 796d 735f 6e65 6f73 2f72 7973 6373     l_my_sensor/sysc
 800d448:	6766 792e 6c6d 000a 6e6f 0000 666f 0066     fg.yml..on..off.
 800d458:	0a0d 5441 3145 0000 0a0d 5441 3045 0000     ..ATE1....ATE0..
 800d468:	6573 4574 6863 006f 7325 7325 2520 2e73     setEcho.%s%s %s.
 800d478:	2e2e 000a 4b4f 0000 5441 432b 4d57 444f     ....OK..AT+CWMOD
 800d488:	3d45 6425 0000 0000 5441 432b 5049 554d     E=%d....AT+CIPMU
 800d498:	3d58 0031 492b 4450 0000 0000 6573 646e     X=1.+IPD....send
 800d4a8:	6d20 7562 0066 0000 5441 7220 7365 6f70      mbuf...AT respo
 800d4b8:	736e 2065 696d 6d73 7461 6863 203a 6f66     nse mismatch: fo
 800d4c8:	6e75 2064 2522 2273 200a 2020 7865 6570     und "%s".   expe
 800d4d8:	7463 6465 2220 7325 0a22 0000 5441 2021     cted "%s"...AT! 
 800d4e8:	7325 0a0d 0000 0000 2020 203c 6425 2f20     %s......  < %d /
 800d4f8:	2520 0073 2020 203c 7325 0000 5441 203d      %s.  < %s..AT= 
 800d508:	7325 0a0d 0000 0000 5441 203c 7325 0000     %s......AT< %s..
 800d518:	5441 203e 7325 0a0d 0000 0000 6574 706d     AT> %s......temp
 800d528:	735f 6d74 3233 305f 0000 0000 4e52 2044     _stm32_0....RND 
 800d538:	6570 7372 6e6f 6c61 7369 2065 6977 6874     personalise with
 800d548:	6820 2077 6469 0020 4e52 2044 6573 6465      hw id .RND seed
 800d558:	7720 7469 2068 6574 706d 6520 746e 6f72      with temp entro
 800d568:	7970 0020 726e 3266 6c34 3130 305f 0000     py .nrf24l01_0..
 800d578:	524e 2046 7263 6165 6574 6e20 6672 3432     NRF create nrf24
 800d588:	306c 5f31 0a30 0000                         l01_0...

0800d590 <_ZL13network_iface>:
 800d590:	0001 0000 d56c 0800 0010 0000 48cd 0800     ....l........H..
 800d5a0:	0000 0000 0a7b 0000 7325 7266 7165 203a     ....{...%sfreq: 
 800d5b0:	6425 4d20 7a48 0a0d 0000 0000 7325 7770     %d MHz......%spw
 800d5c0:	3a72 2520 2064 4264 0d6d 000a 7325 6164     r: %d dBm...%sda
 800d5d0:	6174 7220 7461 3a65 2520 2064 626b 7370     ta rate: %d kbps
 800d5e0:	0a0d 0000 7325 2550 2064 7874 7320 7a69     ....%sP%d tx siz
 800d5f0:	3a65 2520 2064 7962 6574 0d73 000a 0000     e: %d bytes.....
 800d600:	7325 2550 2064 6461 7264 203a 7830 3025     %sP%d addr: 0x%0
 800d610:	3031 6c6c 0d58 000a 0a7d 0000 7325 6f6e     10llX...}...%sno
 800d620:	6320 6c61 626c 6361 0a6b 0000 7325 6f63      callback...%sco
 800d630:	666e 6769 000a 0000 7325 6564 6366 6766     nfig....%sdefcfg
 800d640:	000a 0000 7325 6e69 7469 000a 7325 6e65     ....%sinit..%sen
 800d650:	6261 656c 6920 7172 000a 0000 7325 3e3e     able irq....%s>>
 800d660:	0020 0000 7325 6162 2064 7263 2063 6977      ...%sbad crc wi
 800d670:	7464 2068 6425 0a0d 0000 0000 7325 6162     dth %d......%sba
 800d680:	2064 7872 6120 6464 2072 6977 7464 2068     d rx addr width 
 800d690:	6425 0a0d 0000 0000 7325 6162 2064 7872     %d......%sbad rx
 800d6a0:	7020 7069 2065 6425 0a0d 0000 7325 6573      pipe %d....%sse
 800d6b0:	2074 7874 6120 6464 0a72 0000 7325 6162     t tx addr...%sba
 800d6c0:	2064 7874 6120 6464 2072 6977 7464 2068     d tx addr width 
 800d6d0:	6425 0a0d 0000 0000 7325 6162 2064 6164     %d......%sbad da
 800d6e0:	6174 7220 7461 2065 6425 0a0d 0000 0000     ta rate %d......
 800d6f0:	7325 7872 6d20 646f 0a65 0000 7325 6162     %srx mode...%sba
 800d700:	2064 7266 7165 2520 0d64 000a 7325 6162     d freq %d...%sba
 800d710:	2064 6970 6570 2520 0d64 000a 7325 6162     d pipe %d...%sba
 800d720:	2064 7874 7320 7a69 2065 6425 0a0d 0000     d tx size %d....
 800d730:	7325 7874 6d20 646f 0a65 0000 7325 6162     %stx mode...%sba
 800d740:	2064 6f70 6577 2072 6425 0a0d 0000 0000     d power %d......
 800d750:	7325 6964 6173 6c62 2065 7872 000a 0000     %sdisable rx....
 800d760:	7325 6e65 6261 656c 6920 746e 000a 0000     %senable int....
 800d770:	7325 6964 6173 6c62 2065 6e69 0a74 0000     %sdisable int...
 800d780:	7325 6162 2064 6361 206b 6970 6570 2520     %sbad ack pipe %
 800d790:	0d64 000a 7325 6f70 6577 2072 7075 000a     d...%spower up..
 800d7a0:	7325 6162 2064 6572 6461 6261 656c 7020     %sbad readable p
 800d7b0:	7069 2065 6425 0a0d 0000 0000 7325 7874     ipe %d......%stx
 800d7c0:	6d20 7562 0a66 0000 6568 6461 7265 0000      mbuf...header..
 800d7d0:	6170 6c79 616f 0064 7325 7325 6c20 6e65     payload.%s%s len
 800d7e0:	2520 3230 3a64 0020 726e 7366 7274 000a      %02d: .nrfstr..

0800d7f0 <_ZL9transport>:
 800d7f0:	0000 0000 59f9 0800 59fd 0800 5af5 0800     .....Y...Y...Z..
	...
 800d808:	5a09 0800 5a01 0800 5a05 0800 524e 2046     .Z...Z...Z..NRF 
 800d818:	0000 0000 5352 204e 696c 7473 6e65 2520     ....RSN listen %
 800d828:	0a73 0000                                   s...

0800d82c <g_sensor_driver>:
 800d82c:	5ebd 0800 5db9 0800 0000 0000 0000 0000     .^...]..........
	...

0800d854 <sensor_types>:
 800d854:	d3c0 0800 0000 0400 0001 0000 5e75 0800     ............u^..
 800d864:	d8a4 0800 0020 0000 0002 0000 5e49 0800     .... .......I^..
 800d874:	d8a8 0800 0040 0000 0002 0000 5e1d 0800     ....@........^..
 800d884:	d8ac 0800 0100 0000 0002 0000 5df1 0800     .............]..
	...
 800d8a4:	6674 0000 0070 0000 0068 0000 7325 7872     tf..p...h...%srx
 800d8b4:	0020 0000 3025 6c36 2075 0000                ...%06lu ..

0800d8c0 <COLLECTOR_NODE_HW_ID>:
 800d8c0:	ff57 066a 7878 5054 2949 6724               W.j.xxTPI)$g

0800d8cc <SENSOR_NODE_HW_IDS>:
 800d8cc:	ff38 066d 574e 3634 5825 4308 0201 0403     8.m.NW46%X.C....
 800d8dc:	0605 0807 0a09 020b 0201 0403 0605 0807     ................
 800d8ec:	0a09 030b 0201 0403 0605 0807 0a09 040b     ................
 800d8fc:	0201 0403 0605 0807 0a09 050b 7325 7768     ............%shw
 800d90c:	6469 0020 3025 3031 6c6c 0078 6e20 646f     id .%010llx. nod
 800d91c:	2065 0000 7325 6573 736e 726f 7325 2523     e ..%ssensor%s#%
 800d92c:	0a64 0000 7325 6f63 6c6c 6365 6f74 2572     d...%scollector%
 800d93c:	0a73 0000 7325 7473 6e61 6164 6f6c 656e     s...%sstandalone
 800d94c:	7325 000a 454e 2054 0000 0000 7325 7325     %s..NET ....%s%s
 800d95c:	2520 0a73 0000 0000                          %s.....

0800d964 <sensor_network_shortname>:
 800d964:	d998 0800 d99c 0800 0000 0000               ............

0800d970 <sensor_node_addresses>:
 800d970:	b6f1 b4b5 00b3 0000 b6cd b4b5 00b3 0000     ................
 800d980:	b6a3 b4b5 00b3 0000 b60f b4b5 00b3 0000     ................
 800d990:	b605 b4b5 00b3 0000 7673 0072 6f63 006c     ........svr.col.
 800d9a0:	4d54 2050 7263 6165 6574 7420 6d65 5f70     TMP create temp_
 800d9b0:	7473 336d 5f32 0a30 0000 0000               stm32_0.....

0800d9bc <g_temp_stm32_sensor_driver>:
 800d9bc:	6af9 0800 68a5 0800 0000 0000 0000 0000     .j...h..........
	...
 800d9e4:	5453 204d 6572 6461 6920 746e 7420 6d65     STM read int tem
 800d9f4:	2070 6573 736e 726f 000a 0000 4441 2043     p sensor....ADC 
 800da04:	706f 6e65 6320 2068 3631 000a 636f 725f     open ch 16..oc_r
 800da14:	7065 6f5f 0000 0000 636f 635f 5f6c 6263     ep_o....oc_cl_cb
 800da24:	0073 0000                                   s...

0800da28 <sysflash_map_dflt>:
 800da28:	0000 0000 0000 0800 1000 0000 0001 0000     ................
 800da38:	1000 0800 f000 0000 0002 0000 4010 0801     .............@..
 800da48:	0000 0000 0003 0000 4020 0801 0000 0000     ........ @......
 800da58:	0010 0000 0000 0801 2000 0000 0011 0000     ......... ......
 800da68:	2000 0801 2000 0000 6f63 7061 725f 6365     . ... ..coap_rec
 800da78:	6965 6576 4e20 544f 4920 504d 454c 454d     eive NOT IMPLEME
 800da88:	544e 4445 000a 0000                         NTED....

0800da90 <k256>:
 800da90:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
 800daa0:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
 800dab0:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
 800dac0:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
 800dad0:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
 800dae0:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
 800daf0:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
 800db00:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
 800db10:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
 800db20:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
 800db30:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
 800db40:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
 800db50:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
 800db60:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
 800db70:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
 800db80:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
 800db90:	6175 7472 0030 0000                         uart0...

0800db98 <uart_cfg>:
 800db98:	4400 4000 101c 4002 0000 0002 0302 ffff     .D.@...@........
 800dba8:	8c5d 0800 0026 0000                         ]...&...

0800dbb0 <stm32_flash_dev>:
 800dbb0:	dbc8 0800 0000 0800 0000 0002 0080 0000     ................
 800dbc0:	0002 0000 00ff 0000                         ........

0800dbc8 <stm32_flash_funcs>:
 800dbc8:	8ffb 0800 9095 0800 8ff3 0800 8fd7 0800     ................
 800dbd8:	0000 0000 8fe9 0800 0000 0000               ............

0800dbe4 <portmap>:
 800dbe4:	0800 4001 0c00 4001 1000 4001 1400 4001     ...@...@...@...@
 800dbf4:	1800 4001                                   ...@

0800dbf8 <stm32_hal_spis>:
 800dbf8:	35e0 2000 0000 0000 0000 0000 0000 0000     .5. ............
	...

0800dc10 <stm32_tmr_devs>:
 800dc10:	364c 2000 0000 0000 0000 0000 0302 0504     L6. ............
 800dc20:	0706 0908 0b0a 0d0c 0f0e 1010 0201 0000     ................
 800dc30:	0302 0504 0706 0908 0b0a 0d0c 0f0e 1010     ................
 800dc40:	0201 0000                                   ....

0800dc44 <MemFile_methods>:
 800dc44:	cbd5 0800 0000 0000                         ........

0800dc4c <stdout>:
 800dc4c:	01f4 2000 6554 7473 6e69 2067 3231 0a33     ... Testing 123.

/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  52308	    248	  13740	  66296	  102f8	/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
