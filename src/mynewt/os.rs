/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::core::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
pub const OS_WAIT_FOREVER: i32 = -1;
pub const OS_IDLE_PRIO: u32 = 255;
pub const OS_TICKS_PER_SEC: u32 = 1000;
pub const OS_SANITY_STACK_SIZE: u32 = 64;
pub const OS_IDLE_STACK_SIZE: u32 = 64;
pub const OS_STACK_PATTERN: u32 = 3735928559;
pub const OS_ALIGNMENT: u32 = 4;
pub const OS_STACK_ALIGNMENT: u32 = 8;
pub const OS_TIME_MAX: u32 = 4294967295;
pub const OS_STIME_MAX: u32 = 2147483647;
pub const OS_TIMEOUT_NEVER: u32 = 4294967295;
pub const OS_DEV_INIT_PRIMARY: u32 = 1;
pub const OS_DEV_INIT_SECONDARY: u32 = 2;
pub const OS_DEV_INIT_KERNEL: u32 = 3;
pub const OS_DEV_INIT_F_CRITICAL: u32 = 1;
pub const OS_DEV_INIT_PRIO_DEFAULT: u32 = 255;
pub const OS_DEV_F_STATUS_READY: u32 = 1;
pub const OS_DEV_F_STATUS_OPEN: u32 = 2;
pub const OS_DEV_F_STATUS_SUSPENDED: u32 = 4;
pub const OS_DEV_F_INIT_CRITICAL: u32 = 8;
pub const OS_MEMPOOL_F_EXT: u32 = 1;
pub const OS_MEMPOOL_INFO_NAME_LEN: u32 = 32;
pub const OS_TASK_PRI_HIGHEST: u32 = 0;
pub const OS_TASK_PRI_LOWEST: u32 = 255;
pub const OS_TASK_FLAG_NO_TIMEOUT: u32 = 1;
pub const OS_TASK_FLAG_SEM_WAIT: u32 = 2;
pub const OS_TASK_FLAG_MUTEX_WAIT: u32 = 4;
pub const OS_TASK_FLAG_EVQ_WAIT: u32 = 8;
pub const OS_TASK_MAX_NAME_LEN: u32 = 32;
pub const OS_TRACE_ID_EVENTQ_PUT: u32 = 40;
pub const OS_TRACE_ID_EVENTQ_GET_NO_WAIT: u32 = 41;
pub const OS_TRACE_ID_EVENTQ_GET: u32 = 42;
pub const OS_TRACE_ID_EVENTQ_REMOVE: u32 = 43;
pub const OS_TRACE_ID_EVENTQ_POLL_0TIMO: u32 = 44;
pub const OS_TRACE_ID_EVENTQ_POLL: u32 = 45;
pub const OS_TRACE_ID_MUTEX_INIT: u32 = 50;
pub const OS_TRACE_ID_MUTEX_RELEASE: u32 = 51;
pub const OS_TRACE_ID_MUTEX_PEND: u32 = 52;
pub const OS_TRACE_ID_SEM_INIT: u32 = 60;
pub const OS_TRACE_ID_SEM_RELEASE: u32 = 61;
pub const OS_TRACE_ID_SEM_PEND: u32 = 62;
pub const OS_TRACE_ID_CALLOUT_INIT: u32 = 70;
pub const OS_TRACE_ID_CALLOUT_STOP: u32 = 71;
pub const OS_TRACE_ID_CALLOUT_RESET: u32 = 72;
pub const OS_TRACE_ID_CALLOUT_TICK: u32 = 73;
pub const OS_TRACE_ID_MEMBLOCK_GET: u32 = 80;
pub const OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB: u32 = 81;
pub const OS_TRACE_ID_MEMBLOCK_PUT: u32 = 82;
pub const OS_TRACE_ID_MBUF_GET: u32 = 90;
pub const OS_TRACE_ID_MBUF_GET_PKTHDR: u32 = 91;
pub const OS_TRACE_ID_MBUF_FREE: u32 = 92;
pub const OS_TRACE_ID_MBUF_FREE_CHAIN: u32 = 93;
pub const OS_RUN_PRIV: u32 = 0;
pub const OS_RUN_UNPRIV: u32 = 1;
pub type __uint8_t = ::cty::c_uchar;
pub type __int16_t = ::cty::c_short;
pub type __uint16_t = ::cty::c_ushort;
pub type __int32_t = ::cty::c_long;
pub type __uint32_t = ::cty::c_ulong;
pub type __int64_t = ::cty::c_longlong;
extern "C" {
    pub fn os_info_init() -> ::cty::c_int;
}
extern "C" {
    pub fn os_init_idle_task();
}
extern "C" {
    pub fn os_started() -> ::cty::c_int;
}
extern "C" {
    pub fn os_init(
        fn_: ::core::option::Option<
            unsafe extern "C" fn(argc: ::cty::c_int, argv: *mut *mut ::cty::c_char) -> ::cty::c_int,
        >,
    );
}
extern "C" {
    pub fn os_start();
}
extern "C" {
    pub fn os_reboot(reason: ::cty::c_int);
}
extern "C" {
    pub fn os_system_reset();
}
pub type os_sr_t = u32;
pub type os_stack_t = u32;
pub const os_error_OS_OK: os_error = 0;
pub const os_error_OS_ENOMEM: os_error = 1;
pub const os_error_OS_EINVAL: os_error = 2;
pub const os_error_OS_INVALID_PARM: os_error = 3;
pub const os_error_OS_MEM_NOT_ALIGNED: os_error = 4;
pub const os_error_OS_BAD_MUTEX: os_error = 5;
pub const os_error_OS_TIMEOUT: os_error = 6;
pub const os_error_OS_ERR_IN_ISR: os_error = 7;
pub const os_error_OS_ERR_PRIV: os_error = 8;
pub const os_error_OS_NOT_STARTED: os_error = 9;
pub const os_error_OS_ENOENT: os_error = 10;
pub const os_error_OS_EBUSY: os_error = 11;
pub const os_error_OS_ERROR: os_error = 12;
pub type os_error = u32;
pub use self::os_error as os_error_t;
#[repr(C)]
pub struct os_stack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn os_arch_task_stack_init(
        arg1: *mut os_task,
        arg2: *mut os_stack_t,
        arg3: ::cty::c_int,
    ) -> *mut os_stack_t;
}
extern "C" {
    pub fn os_arch_ctx_sw(arg1: *mut os_task);
}
extern "C" {
    pub fn os_arch_save_sr() -> os_sr_t;
}
extern "C" {
    pub fn os_arch_restore_sr(arg1: os_sr_t);
}
extern "C" {
    pub fn os_arch_in_critical() -> ::cty::c_int;
}
extern "C" {
    pub fn os_arch_init();
}
extern "C" {
    pub fn os_arch_start() -> u32;
}
extern "C" {
    pub fn os_arch_os_init() -> os_error_t;
}
extern "C" {
    pub fn os_arch_os_start() -> os_error_t;
}
extern "C" {
    pub fn os_set_env(arg1: *mut os_stack_t);
}
extern "C" {
    pub fn os_arch_init_task_stack(sf: *mut os_stack_t);
}
extern "C" {
    pub fn os_default_irq_asm();
}
pub type os_time_t = u32;
pub type os_stime_t = i32;
extern "C" {
    pub fn os_time_get() -> os_time_t;
}
extern "C" {
    pub fn os_time_advance(ticks: ::cty::c_int);
}
extern "C" {
    pub fn os_time_delay(osticks: os_time_t);
}
#[repr(C)]
pub struct os_timeval {
    pub tv_sec: i64,
    pub tv_usec: i32,
}
#[repr(C)]
pub struct os_timezone {
    pub tz_minuteswest: i16,
    pub tz_dsttime: i16,
}
#[repr(C)]
pub struct os_time_change_info {
    pub tci_prev_tv: *const os_timeval,
    pub tci_prev_tz: *const os_timezone,
    pub tci_cur_tv: *const os_timeval,
    pub tci_cur_tz: *const os_timezone,
    pub tci_newly_synced: bool,
}
pub type os_time_change_fn = ::core::option::Option<
    unsafe extern "C" fn(info: *const os_time_change_info, arg: *mut ::cty::c_void),
>;
#[repr(C)]
pub struct os_time_change_listener {
    pub tcl_fn: os_time_change_fn,
    pub tcl_arg: *mut ::cty::c_void,
    pub tcl_next: os_time_change_listener__bindgen_ty_1,
}
#[repr(C)]
pub struct os_time_change_listener__bindgen_ty_1 {
    pub stqe_next: *mut os_time_change_listener,
}
extern "C" {
    pub fn os_settimeofday(utctime: *mut os_timeval, tz: *mut os_timezone) -> ::cty::c_int;
}
extern "C" {
    pub fn os_gettimeofday(utctime: *mut os_timeval, tz: *mut os_timezone) -> ::cty::c_int;
}
extern "C" {
    pub fn os_time_is_set() -> bool;
}
extern "C" {
    pub fn os_get_uptime_usec() -> i64;
}
extern "C" {
    pub fn os_get_uptime(tvp: *mut os_timeval);
}
extern "C" {
    pub fn os_time_ms_to_ticks(ms: u32, out_ticks: *mut os_time_t) -> ::cty::c_int;
}
extern "C" {
    pub fn os_time_ticks_to_ms(ticks: os_time_t, out_ms: *mut u32) -> ::cty::c_int;
}
extern "C" {
    pub fn os_time_change_listen(listener: *mut os_time_change_listener);
}
extern "C" {
    pub fn os_time_change_remove(listener: *const os_time_change_listener) -> ::cty::c_int;
}
pub type os_event_fn = ::core::option::Option<unsafe extern "C" fn(ev: *mut os_event)>;
#[repr(C)]
pub struct os_event {
    pub ev_queued: u8,
    pub ev_cb: os_event_fn,
    pub ev_arg: *mut ::cty::c_void,
    pub ev_next: os_event__bindgen_ty_1,
}
#[repr(C)]
pub struct os_event__bindgen_ty_1 {
    pub stqe_next: *mut os_event,
}
#[repr(C)]
pub struct os_eventq {
    pub evq_owner: *mut os_task,
    pub evq_task: *mut os_task,
    pub evq_list: os_eventq__bindgen_ty_1,
}
#[repr(C)]
pub struct os_eventq__bindgen_ty_1 {
    pub stqh_first: *mut os_event,
    pub stqh_last: *mut *mut os_event,
}
extern "C" {
    pub fn os_eventq_init(arg1: *mut os_eventq);
}
extern "C" {
    pub fn os_eventq_inited(evq: *const os_eventq) -> ::cty::c_int;
}
extern "C" {
    pub fn os_eventq_put(arg1: *mut os_eventq, arg2: *mut os_event);
}
extern "C" {
    pub fn os_eventq_get_no_wait(evq: *mut os_eventq) -> *mut os_event;
}
extern "C" {
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
extern "C" {
    pub fn os_eventq_run(evq: *mut os_eventq);
}
extern "C" {
    pub fn os_eventq_poll(
        arg1: *mut *mut os_eventq,
        arg2: ::cty::c_int,
        arg3: os_time_t,
    ) -> *mut os_event;
}
extern "C" {
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
extern "C" {
    pub fn os_eventq_dflt_get() -> *mut os_eventq;
}
extern "C" {
    pub fn os_eventq_designate(
        dst: *mut *mut os_eventq,
        val: *mut os_eventq,
        start_ev: *mut os_event,
    );
}
#[repr(C)]
pub struct os_callout {
    pub c_ev: os_event,
    pub c_evq: *mut os_eventq,
    pub c_ticks: os_time_t,
    pub c_next: os_callout__bindgen_ty_1,
}
#[repr(C)]
pub struct os_callout__bindgen_ty_1 {
    pub tqe_next: *mut os_callout,
    pub tqe_prev: *mut *mut os_callout,
}
#[repr(C)]
pub struct os_callout_list {
    pub tqh_first: *mut os_callout,
    pub tqh_last: *mut *mut os_callout,
}
extern "C" {
    pub fn os_callout_init(
        cf: *mut os_callout,
        evq: *mut os_eventq,
        ev_cb: os_event_fn,
        ev_arg: *mut ::cty::c_void,
    );
}
extern "C" {
    pub fn os_callout_stop(arg1: *mut os_callout);
}
extern "C" {
    pub fn os_callout_reset(arg1: *mut os_callout, arg2: os_time_t) -> ::cty::c_int;
}
extern "C" {
    pub fn os_callout_remaining_ticks(arg1: *mut os_callout, arg2: os_time_t) -> os_time_t;
}
extern "C" {
    pub fn os_callout_tick();
}
extern "C" {
    pub fn os_callout_wakeup_ticks(now: os_time_t) -> os_time_t;
}
pub type hal_timer_cb = ::core::option::Option<unsafe extern "C" fn(arg: *mut ::cty::c_void)>;
#[repr(C)]
pub struct hal_timer {
    pub bsp_timer: *mut ::cty::c_void,
    pub cb_func: hal_timer_cb,
    pub cb_arg: *mut ::cty::c_void,
    pub expiry: u32,
    pub link: hal_timer__bindgen_ty_1,
}
#[repr(C)]
pub struct hal_timer__bindgen_ty_1 {
    pub tqe_next: *mut hal_timer,
    pub tqe_prev: *mut *mut hal_timer,
}
extern "C" {
    pub fn os_cputime_init(clock_freq: u32) -> ::cty::c_int;
}
extern "C" {
    pub fn os_cputime_get32() -> u32;
}
extern "C" {
    pub fn os_cputime_nsecs_to_ticks(nsecs: u32) -> u32;
}
extern "C" {
    pub fn os_cputime_ticks_to_nsecs(ticks: u32) -> u32;
}
extern "C" {
    pub fn os_cputime_delay_nsecs(nsecs: u32);
}
extern "C" {
    pub fn os_cputime_delay_ticks(ticks: u32);
}
extern "C" {
    pub fn os_cputime_delay_usecs(usecs: u32);
}
extern "C" {
    pub fn os_cputime_timer_init(timer: *mut hal_timer, fp: hal_timer_cb, arg: *mut ::cty::c_void);
}
extern "C" {
    pub fn os_cputime_timer_start(timer: *mut hal_timer, cputime: u32) -> ::cty::c_int;
}
extern "C" {
    pub fn os_cputime_timer_relative(timer: *mut hal_timer, usecs: u32) -> ::cty::c_int;
}
extern "C" {
    pub fn os_cputime_timer_stop(timer: *mut hal_timer);
}
pub type os_dev_init_func_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut os_dev, arg2: *mut ::cty::c_void) -> ::cty::c_int,
>;
pub type os_dev_open_func_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut os_dev, arg2: u32, arg3: *mut ::cty::c_void) -> ::cty::c_int,
>;
pub type os_dev_suspend_func_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut os_dev, arg2: os_time_t, arg3: ::cty::c_int) -> ::cty::c_int,
>;
pub type os_dev_resume_func_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut os_dev) -> ::cty::c_int>;
pub type os_dev_close_func_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut os_dev) -> ::cty::c_int>;
#[repr(C)]
pub struct os_dev_handlers {
    pub od_open: os_dev_open_func_t,
    pub od_suspend: os_dev_suspend_func_t,
    pub od_resume: os_dev_resume_func_t,
    pub od_close: os_dev_close_func_t,
}
#[repr(C)]
pub struct os_dev {
    pub od_handlers: os_dev_handlers,
    pub od_init: os_dev_init_func_t,
    pub od_init_arg: *mut ::cty::c_void,
    pub od_stage: u8,
    pub od_priority: u8,
    pub od_open_ref: u8,
    pub od_flags: u8,
    pub od_name: *const ::cty::c_char,
    pub od_next: os_dev__bindgen_ty_1,
}
#[repr(C)]
pub struct os_dev__bindgen_ty_1 {
    pub stqe_next: *mut os_dev,
}
extern "C" {
    pub fn os_dev_suspend(dev: *mut os_dev, suspend_t: os_time_t, force: u8) -> ::cty::c_int;
}
extern "C" {
    pub fn os_dev_resume(dev: *mut os_dev) -> ::cty::c_int;
}
extern "C" {
    pub fn os_dev_create(
        dev: *mut os_dev,
        name: *const ::cty::c_char,
        stage: u8,
        priority: u8,
        od_init: os_dev_init_func_t,
        arg: *mut ::cty::c_void,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn os_dev_lookup(name: *const ::cty::c_char) -> *mut os_dev;
}
extern "C" {
    pub fn os_dev_initialize_all(arg1: u8) -> ::cty::c_int;
}
extern "C" {
    pub fn os_dev_suspend_all(arg1: os_time_t, arg2: u8) -> ::cty::c_int;
}
extern "C" {
    pub fn os_dev_resume_all() -> ::cty::c_int;
}
extern "C" {
    pub fn os_dev_open(
        devname: *const ::cty::c_char,
        timo: u32,
        arg: *mut ::cty::c_void,
    ) -> *mut os_dev;
}
extern "C" {
    pub fn os_dev_close(dev: *mut os_dev) -> ::cty::c_int;
}
extern "C" {
    pub fn os_dev_reset();
}
extern "C" {
    pub fn os_dev_walk(
        walk_func: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut os_dev, arg2: *mut ::cty::c_void) -> ::cty::c_int,
        >,
        arg: *mut ::cty::c_void,
    );
}
extern "C" {
    pub fn os_malloc(size: usize) -> *mut ::cty::c_void;
}
extern "C" {
    pub fn os_free(mem: *mut ::cty::c_void);
}
extern "C" {
    pub fn os_realloc(ptr: *mut ::cty::c_void, size: usize) -> *mut ::cty::c_void;
}
#[repr(C)]
pub struct os_mbuf_pool {
    pub omp_databuf_len: u16,
    pub omp_pool: *mut os_mempool,
    pub omp_next: os_mbuf_pool__bindgen_ty_1,
}
#[repr(C)]
pub struct os_mbuf_pool__bindgen_ty_1 {
    pub stqe_next: *mut os_mbuf_pool,
}
#[repr(C)]
pub struct os_mbuf_pkthdr {
    pub omp_len: u16,
    pub omp_flags: u16,
    pub omp_next: os_mbuf_pkthdr__bindgen_ty_1,
}
#[repr(C)]
pub struct os_mbuf_pkthdr__bindgen_ty_1 {
    pub stqe_next: *mut os_mbuf_pkthdr,
}
#[repr(C)]
pub struct os_mbuf {
    pub om_data: *mut u8,
    pub om_flags: u8,
    pub om_pkthdr_len: u8,
    pub om_len: u16,
    pub om_omp: *mut os_mbuf_pool,
    pub om_next: os_mbuf__bindgen_ty_1,
    pub om_databuf: __IncompleteArrayField<u8>,
}
#[repr(C)]
pub struct os_mbuf__bindgen_ty_1 {
    pub sle_next: *mut os_mbuf,
}
#[repr(C)]
pub struct os_mqueue {
    pub mq_head: os_mqueue__bindgen_ty_1,
    pub mq_ev: os_event,
}
#[repr(C)]
pub struct os_mqueue__bindgen_ty_1 {
    pub stqh_first: *mut os_mbuf_pkthdr,
    pub stqh_last: *mut *mut os_mbuf_pkthdr,
}
extern "C" {
    pub fn os_mqueue_init(
        mq: *mut os_mqueue,
        ev_cb: os_event_fn,
        arg: *mut ::cty::c_void,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn os_mqueue_get(arg1: *mut os_mqueue) -> *mut os_mbuf;
}
extern "C" {
    pub fn os_mqueue_put(
        arg1: *mut os_mqueue,
        arg2: *mut os_eventq,
        arg3: *mut os_mbuf,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn os_msys_register(arg1: *mut os_mbuf_pool) -> ::cty::c_int;
}
extern "C" {
    pub fn os_msys_get(dsize: u16, leadingspace: u16) -> *mut os_mbuf;
}
extern "C" {
    pub fn os_msys_reset();
}
extern "C" {
    pub fn os_msys_get_pkthdr(dsize: u16, user_hdr_len: u16) -> *mut os_mbuf;
}
extern "C" {
    pub fn os_msys_count() -> ::cty::c_int;
}
extern "C" {
    pub fn os_msys_num_free() -> ::cty::c_int;
}
extern "C" {
    pub fn os_mbuf_pool_init(
        arg1: *mut os_mbuf_pool,
        mp: *mut os_mempool,
        arg2: u16,
        arg3: u16,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn os_mbuf_get(omp: *mut os_mbuf_pool, arg1: u16) -> *mut os_mbuf;
}
extern "C" {
    pub fn os_mbuf_get_pkthdr(omp: *mut os_mbuf_pool, pkthdr_len: u8) -> *mut os_mbuf;
}
extern "C" {
    pub fn os_mbuf_dup(m: *mut os_mbuf) -> *mut os_mbuf;
}
extern "C" {
    pub fn os_mbuf_off(om: *const os_mbuf, off: ::cty::c_int, out_off: *mut u16) -> *mut os_mbuf;
}
extern "C" {
    pub fn os_mbuf_copydata(
        m: *const os_mbuf,
        off: ::cty::c_int,
        len: ::cty::c_int,
        dst: *mut ::cty::c_void,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn os_mbuf_len(om: *const os_mbuf) -> u16;
}
extern "C" {
    pub fn os_mbuf_append(m: *mut os_mbuf, arg1: *const ::cty::c_void, arg2: u16) -> ::cty::c_int;
}
extern "C" {
    pub fn os_mbuf_appendfrom(
        dst: *mut os_mbuf,
        src: *const os_mbuf,
        src_off: u16,
        len: u16,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn os_mbuf_free(mb: *mut os_mbuf) -> ::cty::c_int;
}
extern "C" {
    pub fn os_mbuf_free_chain(om: *mut os_mbuf) -> ::cty::c_int;
}
extern "C" {
    pub fn os_mbuf_adj(mp: *mut os_mbuf, req_len: ::cty::c_int);
}
extern "C" {
    pub fn os_mbuf_cmpf(
        om: *const os_mbuf,
        off: ::cty::c_int,
        data: *const ::cty::c_void,
        len: ::cty::c_int,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn os_mbuf_cmpm(
        om1: *const os_mbuf,
        offset1: u16,
        om2: *const os_mbuf,
        offset2: u16,
        len: u16,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn os_mbuf_prepend(om: *mut os_mbuf, len: ::cty::c_int) -> *mut os_mbuf;
}
extern "C" {
    pub fn os_mbuf_prepend_pullup(om: *mut os_mbuf, len: u16) -> *mut os_mbuf;
}
extern "C" {
    pub fn os_mbuf_copyinto(
        om: *mut os_mbuf,
        off: ::cty::c_int,
        src: *const ::cty::c_void,
        len: ::cty::c_int,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn os_mbuf_concat(first: *mut os_mbuf, second: *mut os_mbuf);
}
extern "C" {
    pub fn os_mbuf_extend(om: *mut os_mbuf, len: u16) -> *mut ::cty::c_void;
}
extern "C" {
    pub fn os_mbuf_pullup(om: *mut os_mbuf, len: u16) -> *mut os_mbuf;
}
extern "C" {
    pub fn os_mbuf_trim_front(om: *mut os_mbuf) -> *mut os_mbuf;
}
extern "C" {
    pub fn os_mbuf_widen(om: *mut os_mbuf, off: u16, len: u16) -> ::cty::c_int;
}
#[repr(C)]
pub struct os_memblock {
    pub mb_next: os_memblock__bindgen_ty_1,
}
#[repr(C)]
pub struct os_memblock__bindgen_ty_1 {
    pub sle_next: *mut os_memblock,
}
#[repr(C)]
pub struct os_mempool {
    pub mp_block_size: u32,
    pub mp_num_blocks: u16,
    pub mp_num_free: u16,
    pub mp_min_free: u16,
    pub mp_flags: u8,
    pub mp_membuf_addr: u32,
    pub mp_list: os_mempool__bindgen_ty_1,
    pub __bindgen_anon_1: os_mempool__bindgen_ty_2,
    pub name: *mut ::cty::c_char,
}
#[repr(C)]
pub struct os_mempool__bindgen_ty_1 {
    pub stqe_next: *mut os_mempool,
}
#[repr(C)]
pub struct os_mempool__bindgen_ty_2 {
    pub slh_first: *mut os_memblock,
}
pub type os_mempool_put_fn = ::core::option::Option<
    unsafe extern "C" fn(
        ome: *mut os_mempool_ext,
        data: *mut ::cty::c_void,
        arg: *mut ::cty::c_void,
    ) -> os_error_t,
>;
#[repr(C)]
pub struct os_mempool_ext {
    pub mpe_mp: os_mempool,
    pub mpe_put_cb: os_mempool_put_fn,
    pub mpe_put_arg: *mut ::cty::c_void,
}
#[repr(C)]
pub struct os_mempool_info {
    pub omi_block_size: ::cty::c_int,
    pub omi_num_blocks: ::cty::c_int,
    pub omi_num_free: ::cty::c_int,
    pub omi_min_free: ::cty::c_int,
    pub omi_name: [::cty::c_char; 32usize],
}
extern "C" {
    pub fn os_mempool_info_get_next(
        arg1: *mut os_mempool,
        arg2: *mut os_mempool_info,
    ) -> *mut os_mempool;
}
pub type os_membuf_t = u32;
extern "C" {
    pub fn os_mempool_init(
        mp: *mut os_mempool,
        blocks: u16,
        block_size: u32,
        membuf: *mut ::cty::c_void,
        name: *mut ::cty::c_char,
    ) -> os_error_t;
}
extern "C" {
    pub fn os_mempool_ext_init(
        mpe: *mut os_mempool_ext,
        blocks: u16,
        block_size: u32,
        membuf: *mut ::cty::c_void,
        name: *mut ::cty::c_char,
    ) -> os_error_t;
}
extern "C" {
    pub fn os_mempool_unregister(mp: *mut os_mempool) -> os_error_t;
}
extern "C" {
    pub fn os_mempool_clear(mp: *mut os_mempool) -> os_error_t;
}
extern "C" {
    pub fn os_mempool_is_sane(mp: *const os_mempool) -> bool;
}
extern "C" {
    pub fn os_memblock_from(
        mp: *const os_mempool,
        block_addr: *const ::cty::c_void,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn os_memblock_get(mp: *mut os_mempool) -> *mut ::cty::c_void;
}
extern "C" {
    pub fn os_memblock_put_from_cb(
        mp: *mut os_mempool,
        block_addr: *mut ::cty::c_void,
    ) -> os_error_t;
}
extern "C" {
    pub fn os_memblock_put(mp: *mut os_mempool, block_addr: *mut ::cty::c_void) -> os_error_t;
}
#[repr(C)]
pub struct os_mutex {
    pub mu_head: os_mutex__bindgen_ty_1,
    pub _pad: u8,
    pub mu_prio: u8,
    pub mu_level: u16,
    pub mu_owner: *mut os_task,
}
#[repr(C)]
pub struct os_mutex__bindgen_ty_1 {
    pub slh_first: *mut os_task,
}
extern "C" {
    pub fn os_mutex_init(mu: *mut os_mutex) -> os_error_t;
}
extern "C" {
    pub fn os_mutex_release(mu: *mut os_mutex) -> os_error_t;
}
extern "C" {
    pub fn os_mutex_pend(mu: *mut os_mutex, timeout: os_time_t) -> os_error_t;
}
pub type os_sanity_check_func_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut os_sanity_check, arg2: *mut ::cty::c_void) -> ::cty::c_int,
>;
#[repr(C)]
pub struct os_sanity_check {
    pub sc_checkin_last: os_time_t,
    pub sc_checkin_itvl: os_time_t,
    pub sc_func: os_sanity_check_func_t,
    pub sc_arg: *mut ::cty::c_void,
    pub sc_next: os_sanity_check__bindgen_ty_1,
}
#[repr(C)]
pub struct os_sanity_check__bindgen_ty_1 {
    pub sle_next: *mut os_sanity_check,
}
extern "C" {
    pub fn os_sanity_init() -> ::cty::c_int;
}
extern "C" {
    pub fn os_sanity_run();
}
extern "C" {
    pub fn os_sanity_task_checkin(arg1: *mut os_task) -> ::cty::c_int;
}
extern "C" {
    pub fn os_sanity_check_init(arg1: *mut os_sanity_check) -> ::cty::c_int;
}
extern "C" {
    pub fn os_sanity_check_register(arg1: *mut os_sanity_check) -> ::cty::c_int;
}
extern "C" {
    pub fn os_sanity_check_reset(arg1: *mut os_sanity_check) -> ::cty::c_int;
}
#[repr(C)]
pub struct os_task_obj {
    pub obj_head: os_task_obj__bindgen_ty_1,
}
#[repr(C)]
pub struct os_task_obj__bindgen_ty_1 {
    pub slh_first: *mut os_task,
}
pub const os_task_state_OS_TASK_READY: os_task_state = 1;
pub const os_task_state_OS_TASK_SLEEP: os_task_state = 2;
pub type os_task_state = u32;
pub use self::os_task_state as os_task_state_t;
pub type os_task_func_t = ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::cty::c_void)>;
#[repr(C)]
pub struct os_task {
    pub t_stackptr: *mut os_stack_t,
    pub t_stacktop: *mut os_stack_t,
    pub t_stacksize: u16,
    pub t_taskid: u8,
    pub t_prio: u8,
    pub t_state: u8,
    pub t_flags: u8,
    pub t_lockcnt: u8,
    pub t_pad: u8,
    pub t_name: *const ::cty::c_char,
    pub t_func: os_task_func_t,
    pub t_arg: *mut ::cty::c_void,
    pub t_obj: *mut ::cty::c_void,
    pub t_sanity_check: os_sanity_check,
    pub t_next_wakeup: os_time_t,
    pub t_run_time: os_time_t,
    pub t_ctx_sw_cnt: u32,
    pub t_os_task_list: os_task__bindgen_ty_1,
    pub t_os_list: os_task__bindgen_ty_2,
    pub t_obj_list: os_task__bindgen_ty_3,
}
#[repr(C)]
pub struct os_task__bindgen_ty_1 {
    pub stqe_next: *mut os_task,
}
#[repr(C)]
pub struct os_task__bindgen_ty_2 {
    pub tqe_next: *mut os_task,
    pub tqe_prev: *mut *mut os_task,
}
#[repr(C)]
pub struct os_task__bindgen_ty_3 {
    pub sle_next: *mut os_task,
}
#[repr(C)]
pub struct os_task_stailq {
    pub stqh_first: *mut os_task,
    pub stqh_last: *mut *mut os_task,
}
extern "C" {
    pub fn os_task_init(
        arg1: *mut os_task,
        arg2: *const ::cty::c_char,
        arg3: os_task_func_t,
        arg4: *mut ::cty::c_void,
        arg5: u8,
        arg6: os_time_t,
        arg7: *mut os_stack_t,
        arg8: u16,
    ) -> ::cty::c_int;
}
extern "C" {
    pub fn os_task_remove(t: *mut os_task) -> ::cty::c_int;
}
extern "C" {
    pub fn os_task_count() -> u8;
}
#[repr(C)]
pub struct os_task_info {
    pub oti_prio: u8,
    pub oti_taskid: u8,
    pub oti_state: u8,
    pub oti_stkusage: u16,
    pub oti_stksize: u16,
    pub oti_cswcnt: u32,
    pub oti_runtime: u32,
    pub oti_last_checkin: os_time_t,
    pub oti_next_checkin: os_time_t,
    pub oti_name: [::cty::c_char; 32usize],
}
extern "C" {
    pub fn os_task_info_get_next(arg1: *const os_task, arg2: *mut os_task_info) -> *mut os_task;
}
#[repr(C)]
pub struct os_task_list {
    pub tqh_first: *mut os_task,
    pub tqh_last: *mut *mut os_task,
}
extern "C" {
    pub fn os_sched_ctx_sw_hook(arg1: *mut os_task);
}
extern "C" {
    pub fn os_sched_get_current_task() -> *mut os_task;
}
extern "C" {
    pub fn os_sched_set_current_task(arg1: *mut os_task);
}
extern "C" {
    pub fn os_sched_next_task() -> *mut os_task;
}
extern "C" {
    pub fn os_sched(arg1: *mut os_task);
}
extern "C" {
    pub fn os_sched_os_timer_exp();
}
extern "C" {
    pub fn os_sched_insert(arg1: *mut os_task) -> os_error_t;
}
extern "C" {
    pub fn os_sched_sleep(arg1: *mut os_task, nticks: os_time_t) -> ::cty::c_int;
}
extern "C" {
    pub fn os_sched_wakeup(arg1: *mut os_task) -> ::cty::c_int;
}
extern "C" {
    pub fn os_sched_remove(arg1: *mut os_task) -> ::cty::c_int;
}
extern "C" {
    pub fn os_sched_resort(arg1: *mut os_task);
}
extern "C" {
    pub fn os_sched_wakeup_ticks(now: os_time_t) -> os_time_t;
}
#[repr(C)]
pub struct os_sem {
    pub sem_head: os_sem__bindgen_ty_1,
    pub _pad: u16,
    pub sem_tokens: u16,
}
#[repr(C)]
pub struct os_sem__bindgen_ty_1 {
    pub slh_first: *mut os_task,
}
extern "C" {
    pub fn os_sem_init(sem: *mut os_sem, tokens: u16) -> os_error_t;
}
extern "C" {
    pub fn os_sem_release(sem: *mut os_sem) -> os_error_t;
}
extern "C" {
    pub fn os_sem_pend(sem: *mut os_sem, timeout: os_time_t) -> os_error_t;
}
extern "C" {
    pub fn os_mempool_module_init();
}
extern "C" {
    pub fn os_msys_init();
}
extern "C" {
    pub fn os_tick_init(os_ticks_per_sec: u32, prio: ::cty::c_int);
}
extern "C" {
    pub fn os_tick_idle(n: os_time_t);
}
extern "C" {
    pub static mut os_main_task: os_task;
}
extern "C" {
    pub static mut os_main_stack: [os_stack_t; 1024usize];
}
extern "C" {
    pub fn os_idle_task(arg: *mut ::cty::c_void);
}
extern "C" {
    pub fn os_pkg_init();
}
