
c:/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
c:/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800112d

Program Header:
0x70000001 off    0x0000e784 vaddr 0x0800e784 paddr 0x0800e784 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x0000e79c memsz 0x0000e79c flags rwx
    LOAD off    0x00010110 vaddr 0x20000110 paddr 0x0800e79c align 2**16
         filesz 0x0000012c memsz 0x0000012c flags rw-
    LOAD off    0x00010240 vaddr 0x20000240 paddr 0x0800e8c8 align 2**16
         filesz 0x00000000 memsz 0x00003338 flags rw-
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x0000010c flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  08001000  08001000  00001000  2**0  ALLOC
  1 .text              0000d764  08001020  08001020  00001020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx         00000018  0800e784  0800e784  0000e784  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 0000010c  20000000  20000000  00020000  2**0  ALLOC
  4 .coredata          00000000  2000010c  2000010c  0001023c  2**0  CONTENTS
  5 .data              0000012c  20000110  0800e79c  00010110  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .corebss           00000000  2000023c  2000023c  0001023c  2**0  CONTENTS
  7 .bss               00003338  20000240  0800e8c8  00010240  2**3  ALLOC
  8 .ARM.attributes    00000033  00000000  00000000  0001023c  2**0  CONTENTS, READONLY
  9 .comment           0000007f  00000000  00000000  0001026f  2**0  CONTENTS, READONLY
 10 .svc_table         00000004  00000000  00000000  000102ee  2**0  CONTENTS, READONLY
 11 .debug_line        00043a44  00000000  00000000  000102f2  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_info        0007ffa9  00000000  00000000  00053d36  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev      000108fa  00000000  00000000  000d3cdf  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges     00002908  00000000  00000000  000e45e0  2**3  CONTENTS, READONLY, DEBUGGING
 15 .debug_str         0003a335  00000000  00000000  000e6ee8  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges      00015340  00000000  00000000  00121220  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         0002230e  00000000  00000000  00136560  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame       0000b358  00000000  00000000  00158870  2**2  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo     00000003  00000000  00000000  00163bc8  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_pubnames    00007edd  00000000  00000000  00163bcb  2**0  CONTENTS, READONLY, DEBUGGING
 21 .debug_pubtypes    00008111  00000000  00000000  0016baa8  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08001000 l    d  .imghdr	00000000 .imghdr
08001020 l    d  .text	00000000 .text
0800e784 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
2000010c l    d  .coredata	00000000 .coredata
20000110 l    d  .data	00000000 .data
2000023c l    d  .corebss	00000000 .corebss
20000240 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 startup_stm32f103xb.o
f108f85f l       *ABS*	00000000 BootRAM
08001138 l       .text	00000000 LoopCopyDataInit
08001130 l       .text	00000000 CopyDataInit
0800114c l       .text	00000000 LoopFillZerobss
08001146 l       .text	00000000 FillZerobss
0800115c l       .text	00000000 LoopFillZeroCoreBss
08001156 l       .text	00000000 FillZeroCoreBss
08001188 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 system_stm32f1xx.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 app.7srcpc5i-cgu.0
000014dd l       .debug_str	00000000 
000080d7 l       .debug_str	00000000 
000031ed l       .debug_str	00000000 
0000320d l       .debug_str	00000000 
00030125 l       .debug_str	00000000 
000336e2 l       .debug_str	00000000 
00037cfe l       .debug_str	00000000 
00035a06 l       .debug_str	00000000 
000031f5 l       .debug_str	00000000 
000031e7 l       .debug_str	00000000 
000031d4 l       .debug_str	00000000 
000031a4 l       .debug_str	00000000 
0000319e l       .debug_str	00000000 
0000318c l       .debug_str	00000000 
00032c7a l       .debug_str	00000000 
0000318a l       .debug_str	00000000 
0000315f l       .debug_str	00000000 
0000312c l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
00003123 l       .debug_str	00000000 
000030d9 l       .debug_str	00000000 
00008b43 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
00003081 l       .debug_str	00000000 
00003011 l       .debug_str	00000000 
0000321b l       .debug_str	00000000 
00002fdf l       .debug_str	00000000 
00002fa9 l       .debug_str	00000000 
00002f39 l       .debug_str	00000000 
00030124 l       .debug_str	00000000 
00002f25 l       .debug_str	00000000 
00002f13 l       .debug_str	00000000 
00002f08 l       .debug_str	00000000 
00002eff l       .debug_str	00000000 
00002ef1 l       .debug_str	00000000 
00004701 l       .debug_str	00000000 
00002ee3 l       .debug_str	00000000 
00000477 l       .debug_str	00000000 
000031f1 l       .debug_str	00000000 
0002d421 l       .debug_str	00000000 
00030d22 l       .debug_str	00000000 
000002ff l       .debug_str	00000000 
000080eb l       .debug_str	00000000 
000083ec l       .debug_str	00000000 
0000060a l       .debug_str	00000000 
0000064b l       .debug_str	00000000 
0000003e l       .debug_str	00000000 
000075b5 l       .debug_str	00000000 
00006c16 l       .debug_str	00000000 
00000787 l       .debug_str	00000000 
0000065f l       .debug_str	00000000 
00000662 l       .debug_str	00000000 
00000666 l       .debug_str	00000000 
00022a8c l       .debug_str	00000000 
0000b916 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
0000066d l       .debug_str	00000000 
00000672 l       .debug_str	00000000 
00000678 l       .debug_str	00000000 
0000067f l       .debug_str	00000000 
00036c2d l       .debug_str	00000000 
00000687 l       .debug_str	00000000 
00000c8d l       .debug_str	00000000 
0000068e l       .debug_str	00000000 
00000696 l       .debug_str	00000000 
000006a1 l       .debug_str	00000000 
000006ac l       .debug_str	00000000 
000006b9 l       .debug_str	00000000 
000006c4 l       .debug_str	00000000 
000006cc l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006e2 l       .debug_str	00000000 
000006ec l       .debug_str	00000000 
000006f7 l       .debug_str	00000000 
00000702 l       .debug_str	00000000 
0000070f l       .debug_str	00000000 
0000071b l       .debug_str	00000000 
00000728 l       .debug_str	00000000 
00000736 l       .debug_str	00000000 
00000740 l       .debug_str	00000000 
0000754e l       .debug_str	00000000 
0000074d l       .debug_str	00000000 
00000751 l       .debug_str	00000000 
0000075c l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000767 l       .debug_str	00000000 
00000770 l       .debug_str	00000000 
00000777 l       .debug_str	00000000 
00000780 l       .debug_str	00000000 
0003487d l       .debug_str	00000000 
000052ed l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
0000078a l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0002dd63 l       .debug_str	00000000 
0000760f l       .debug_str	00000000 
0000079e l       .debug_str	00000000 
00036229 l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
000007a8 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000007af l       .debug_str	00000000 
00033ce2 l       .debug_str	00000000 
000007b8 l       .debug_str	00000000 
000000c6 l       .debug_str	00000000 
00039472 l       .debug_str	00000000 
00000e6f l       .debug_str	00000000 
000007bd l       .debug_str	00000000 
000007c7 l       .debug_str	00000000 
000007ce l       .debug_str	00000000 
000007ca l       .debug_str	00000000 
000007d4 l       .debug_str	00000000 
000007dc l       .debug_str	00000000 
0001042f l       .debug_str	00000000 
000007e2 l       .debug_str	00000000 
00000807 l       .debug_str	00000000 
000007ed l       .debug_str	00000000 
00000810 l       .debug_str	00000000 
000399e9 l       .debug_str	00000000 
0000082f l       .debug_str	00000000 
00000834 l       .debug_str	00000000 
00030d30 l       .debug_str	00000000 
00030b3c l       .debug_str	00000000 
000349cb l       .debug_str	00000000 
00008a8e l       .debug_str	00000000 
0000085b l       .debug_str	00000000 
0000090d l       .debug_str	00000000 
0000086a l       .debug_str	00000000 
0000086e l       .debug_str	00000000 
00000877 l       .debug_str	00000000 
00004332 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000886 l       .debug_str	00000000 
0000089a l       .debug_str	00000000 
000008a6 l       .debug_str	00000000 
000008b2 l       .debug_str	00000000 
000008d7 l       .debug_str	00000000 
000008cb l       .debug_str	00000000 
000008dc l       .debug_str	00000000 
000008e6 l       .debug_str	00000000 
00030bfb l       .debug_str	00000000 
000008f4 l       .debug_str	00000000 
000008ff l       .debug_str	00000000 
00000906 l       .debug_str	00000000 
0000077c l       .debug_str	00000000 
00039558 l       .debug_str	00000000 
0000090c l       .debug_str	00000000 
00000914 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
0000096b l       .debug_str	00000000 
00000985 l       .debug_str	00000000 
000009f5 l       .debug_str	00000000 
000009e3 l       .debug_str	00000000 
00000a00 l       .debug_str	00000000 
000083f8 l       .debug_str	00000000 
00000a19 l       .debug_str	00000000 
00000a4b l       .debug_str	00000000 
000342c3 l       .debug_str	00000000 
00000a52 l       .debug_str	00000000 
00000a77 l       .debug_str	00000000 
000235c6 l       .debug_str	00000000 
00003290 l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
0002f5c2 l       .debug_str	00000000 
00000a8e l       .debug_str	00000000 
0000555e l       .debug_str	00000000 
000075c6 l       .debug_str	00000000 
00000a96 l       .debug_str	00000000 
00000aa7 l       .debug_str	00000000 
00000a9e l       .debug_str	00000000 
00000aac l       .debug_str	00000000 
00000abd l       .debug_str	00000000 
00000acd l       .debug_str	00000000 
0000463c l       .debug_str	00000000 
00031fe6 l       .debug_str	00000000 
0003522f l       .debug_str	00000000 
00000ade l       .debug_str	00000000 
00000b11 l       .debug_str	00000000 
00000b27 l       .debug_str	00000000 
00000b33 l       .debug_str	00000000 
0000270b l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00002526 l       .debug_str	00000000 
00033c77 l       .debug_str	00000000 
00000056 l       .debug_str	00000000 
00000b48 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
0001571c l       .debug_str	00000000 
00000b58 l       .debug_str	00000000 
00000b64 l       .debug_str	00000000 
00000b6c l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
00000c4a l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000ce0 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00000d27 l       .debug_str	00000000 
00000d6c l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d85 l       .debug_str	00000000 
00000d8d l       .debug_str	00000000 
00000de2 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4b l       .debug_str	00000000 
00000e54 l       .debug_str	00000000 
00000e60 l       .debug_str	00000000 
00000e6c l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7d l       .debug_str	00000000 
000004d2 l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000eb3 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000eba l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
000005b4 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000004e3 l       .debug_str	00000000 
000003a8 l       .debug_str	00000000 
00007f46 l       .debug_str	00000000 
0000038e l       .debug_str	00000000 
000004dc l       .debug_str	00000000 
00000412 l       .debug_str	00000000 
0002e112 l       .debug_str	00000000 
000004a3 l       .debug_str	00000000 
000003a2 l       .debug_str	00000000 
0003434d l       .debug_str	00000000 
0002d5cb l       .debug_str	00000000 
00000edc l       .debug_str	00000000 
00000f09 l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
0002f9b1 l       .debug_str	00000000 
000003e5 l       .debug_str	00000000 
00000534 l       .debug_str	00000000 
00000481 l       .debug_str	00000000 
000003b4 l       .debug_str	00000000 
00000f3e l       .debug_str	00000000 
00000f67 l       .debug_str	00000000 
00000fc5 l       .debug_str	00000000 
0000046d l       .debug_str	00000000 
0000059e l       .debug_str	00000000 
00000562 l       .debug_str	00000000 
0000102b l       .debug_str	00000000 
00000f57 l       .debug_str	00000000 
000005a6 l       .debug_str	00000000 
00000593 l       .debug_str	00000000 
00000527 l       .debug_str	00000000 
0000035a l       .debug_str	00000000 
00001049 l       .debug_str	00000000 
0000050c l       .debug_str	00000000 
000004d3 l       .debug_str	00000000 
000003cd l       .debug_str	00000000 
0000105f l       .debug_str	00000000 
00001085 l       .debug_str	00000000 
00000378 l       .debug_str	00000000 
0000109b l       .debug_str	00000000 
000075f1 l       .debug_str	00000000 
00001064 l       .debug_str	00000000 
000010b1 l       .debug_str	00000000 
0002437b l       .debug_str	00000000 
000010c8 l       .debug_str	00000000 
000010d0 l       .debug_str	00000000 
000010d9 l       .debug_str	00000000 
000025ee l       .debug_str	00000000 
000010e2 l       .debug_str	00000000 
00034088 l       .debug_str	00000000 
000010ea l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001101 l       .debug_str	00000000 
00001109 l       .debug_str	00000000 
00001111 l       .debug_str	00000000 
0000118d l       .debug_str	00000000 
00001211 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00001411 l       .debug_str	00000000 
0000141f l       .debug_str	00000000 
0000142a l       .debug_str	00000000 
00001457 l       .debug_str	00000000 
00001434 l       .debug_str	00000000 
00001462 l       .debug_str	00000000 
00002ec2 l       .debug_str	00000000 
00001560 l       .debug_str	00000000 
0000156e l       .debug_str	00000000 
000015cd l       .debug_str	00000000 
00001634 l       .debug_str	00000000 
0000164a l       .debug_str	00000000 
0000165a l       .debug_str	00000000 
00030d48 l       .debug_str	00000000 
00001669 l       .debug_str	00000000 
00008b47 l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00001675 l       .debug_str	00000000 
0000167b l       .debug_str	00000000 
00001687 l       .debug_str	00000000 
0000168f l       .debug_str	00000000 
000378f8 l       .debug_str	00000000 
00001697 l       .debug_str	00000000 
000016dd l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
000016ed l       .debug_str	00000000 
0000172d l       .debug_str	00000000 
00031503 l       .debug_str	00000000 
00001775 l       .debug_str	00000000 
0000177b l       .debug_str	00000000 
00001781 l       .debug_str	00000000 
000017aa l       .debug_str	00000000 
00001787 l       .debug_str	00000000 
000017bc l       .debug_str	00000000 
000017fe l       .debug_str	00000000 
000317c0 l       .debug_str	00000000 
00001848 l       .debug_str	00000000 
0000184e l       .debug_str	00000000 
00001854 l       .debug_str	00000000 
0000187d l       .debug_str	00000000 
0000185a l       .debug_str	00000000 
0000188f l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
00032016 l       .debug_str	00000000 
0000191b l       .debug_str	00000000 
00001921 l       .debug_str	00000000 
00001927 l       .debug_str	00000000 
0000192d l       .debug_str	00000000 
00001956 l       .debug_str	00000000 
00001933 l       .debug_str	00000000 
00001967 l       .debug_str	00000000 
000019a8 l       .debug_str	00000000 
000019f1 l       .debug_str	00000000 
000019f6 l       .debug_str	00000000 
000318cb l       .debug_str	00000000 
000019fb l       .debug_str	00000000 
00001a01 l       .debug_str	00000000 
00001a07 l       .debug_str	00000000 
00001a30 l       .debug_str	00000000 
00001a0d l       .debug_str	00000000 
00001a41 l       .debug_str	00000000 
00001a82 l       .debug_str	00000000 
00030c91 l       .debug_str	00000000 
00001acb l       .debug_str	00000000 
00001af7 l       .debug_str	00000000 
00001ad4 l       .debug_str	00000000 
00001b08 l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
00001b92 l       .debug_str	00000000 
00031c3e l       .debug_str	00000000 
00001b97 l       .debug_str	00000000 
00001ba0 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00001bd2 l       .debug_str	00000000 
00001baf l       .debug_str	00000000 
00001be4 l       .debug_str	00000000 
00001c26 l       .debug_str	00000000 
00031670 l       .debug_str	00000000 
00001c70 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00001c7c l       .debug_str	00000000 
00001c82 l       .debug_str	00000000 
00001c88 l       .debug_str	00000000 
00001c90 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00001cad l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001cc9 l       .debug_str	00000000 
00001cd4 l       .debug_str	00000000 
00001cdf l       .debug_str	00000000 
00001ce6 l       .debug_str	00000000 
00001d2c l       .debug_str	00000000 
00001d09 l       .debug_str	00000000 
00001d3e l       .debug_str	00000000 
00001d80 l       .debug_str	00000000 
00031f6b l       .debug_str	00000000 
00001dca l       .debug_str	00000000 
00001df7 l       .debug_str	00000000 
00001dd4 l       .debug_str	00000000 
00001e09 l       .debug_str	00000000 
00001e4b l       .debug_str	00000000 
00001e95 l       .debug_str	00000000 
00001e9a l       .debug_str	00000000 
00001ec7 l       .debug_str	00000000 
00001ea4 l       .debug_str	00000000 
00001ed9 l       .debug_str	00000000 
00001f1b l       .debug_str	00000000 
00001f65 l       .debug_str	00000000 
000116e2 l       .debug_str	00000000 
00001fe4 l       .debug_str	00000000 
00001f79 l       .debug_str	00000000 
00001f89 l       .debug_str	00000000 
00001f92 l       .debug_str	00000000 
00001f9d l       .debug_str	00000000 
00001fac l       .debug_str	00000000 
00001fc1 l       .debug_str	00000000 
00001ff2 l       .debug_str	00000000 
0000208f l       .debug_str	00000000 
00002134 l       .debug_str	00000000 
0000213f l       .debug_str	00000000 
00002148 l       .debug_str	00000000 
0000218c l       .debug_str	00000000 
00002169 l       .debug_str	00000000 
0000219f l       .debug_str	00000000 
00002222 l       .debug_str	00000000 
000022ad l       .debug_str	00000000 
000022c9 l       .debug_str	00000000 
00002315 l       .debug_str	00000000 
00002369 l       .debug_str	00000000 
00002386 l       .debug_str	00000000 
0000239a l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0000243a l       .debug_str	00000000 
00002450 l       .debug_str	00000000 
00002464 l       .debug_str	00000000 
000024ab l       .debug_str	00000000 
000024fa l       .debug_str	00000000 
00002503 l       .debug_str	00000000 
00002534 l       .debug_str	00000000 
0000253a l       .debug_str	00000000 
00002542 l       .debug_str	00000000 
00002549 l       .debug_str	00000000 
00002551 l       .debug_str	00000000 
0000255c l       .debug_str	00000000 
00002564 l       .debug_str	00000000 
00007efe l       .debug_str	00000000 
00002573 l       .debug_str	00000000 
0000257e l       .debug_str	00000000 
0000258a l       .debug_str	00000000 
00002595 l       .debug_str	00000000 
000025a6 l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025b4 l       .debug_str	00000000 
000025bb l       .debug_str	00000000 
000025c5 l       .debug_str	00000000 
000025cd l       .debug_str	00000000 
000025d5 l       .debug_str	00000000 
000025f7 l       .debug_str	00000000 
00002602 l       .debug_str	00000000 
0000260e l       .debug_str	00000000 
00002616 l       .debug_str	00000000 
0000261f l       .debug_str	00000000 
00000466 l       .debug_str	00000000 
0000262a l       .debug_str	00000000 
00002635 l       .debug_str	00000000 
00002640 l       .debug_str	00000000 
00002650 l       .debug_str	00000000 
00030c41 l       .debug_str	00000000 
00002d06 l       .debug_str	00000000 
0000265a l       .debug_str	00000000 
00002692 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026d9 l       .debug_str	00000000 
000026e1 l       .debug_str	00000000 
00002d1f l       .debug_str	00000000 
000026f8 l       .debug_str	00000000 
00002708 l       .debug_str	00000000 
00002717 l       .debug_str	00000000 
0000271f l       .debug_str	00000000 
00002726 l       .debug_str	00000000 
0000272e l       .debug_str	00000000 
0000276f l       .debug_str	00000000 
0000274c l       .debug_str	00000000 
0000277f l       .debug_str	00000000 
00002794 l       .debug_str	00000000 
0000279d l       .debug_str	00000000 
000027fa l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
00002869 l       .debug_str	00000000 
00002879 l       .debug_str	00000000 
0000288e l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
000028fa l       .debug_str	00000000 
00002966 l       .debug_str	00000000 
0000296d l       .debug_str	00000000 
00002975 l       .debug_str	00000000 
000029b6 l       .debug_str	00000000 
00002993 l       .debug_str	00000000 
000029c6 l       .debug_str	00000000 
000029db l       .debug_str	00000000 
000029ee l       .debug_str	00000000 
00002a03 l       .debug_str	00000000 
00002a0a l       .debug_str	00000000 
00002a1f l       .debug_str	00000000 
000336c2 l       .debug_str	00000000 
00002a49 l       .debug_str	00000000 
00002ab9 l       .debug_str	00000000 
00002b0c l       .debug_str	00000000 
00002b5b l       .debug_str	00000000 
00002b60 l       .debug_str	00000000 
00002bd0 l       .debug_str	00000000 
00002c27 l       .debug_str	00000000 
00002c7a l       .debug_str	00000000 
00002cba l       .debug_str	00000000 
00002ce1 l       .debug_str	00000000 
0003833d l       .debug_str	00000000 
000007a9 l       .debug_str	00000000 
00002ce5 l       .debug_str	00000000 
00002cef l       .debug_str	00000000 
00002cf8 l       .debug_str	00000000 
00000383 l       .debug_str	00000000 
000005bf l       .debug_str	00000000 
00002d01 l       .debug_str	00000000 
00002d28 l       .debug_str	00000000 
00002d59 l       .debug_str	00000000 
00002d40 l       .debug_str	00000000 
00002d63 l       .debug_str	00000000 
00002dab l       .debug_str	00000000 
00002deb l       .debug_str	00000000 
00002e32 l       .debug_str	00000000 
00002e3b l       .debug_str	00000000 
00002e3f l       .debug_str	00000000 
00002e69 l       .debug_str	00000000 
00002e6e l       .debug_str	00000000 
00002e9c l       .debug_str	00000000 
00002ea1 l       .debug_str	00000000 
00000b3a l       .debug_str	00000000 
00002ead l       .debug_str	00000000 
0003085b l       .debug_str	00000000 
00002eb2 l       .debug_str	00000000 
00002ed7 l       .debug_str	00000000 
0002e6f8 l       .debug_str	00000000 
080013ec l     F .text	0000022e _ZN3app18handle_sensor_data17hf2529d913b12669cE
0800120a l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0bdb5d41856bc834E
08001216 l     F .text	0000004c _ZN4core6result13unwrap_failed17h2598843d1764ab0eE
00000000 l    df *ABS*	00000000 cortex-m.o
00000000 l    df *ABS*	00000000 mynewt.3wdrjj3j-cgu.0
00001111 l       .debug_str	00000000 
000066f8 l       .debug_str	00000000 
00006689 l       .debug_str	00000000 
0000660c l       .debug_str	00000000 
00006580 l       .debug_str	00000000 
0002d53b l       .debug_str	00000000 
0000654c l       .debug_str	00000000 
00006541 l       .debug_str	00000000 
0000650a l       .debug_str	00000000 
000064f3 l       .debug_str	00000000 
000064b2 l       .debug_str	00000000 
0000649c l       .debug_str	00000000 
0000645c l       .debug_str	00000000 
00006447 l       .debug_str	00000000 
00007639 l       .debug_str	00000000 
00006408 l       .debug_str	00000000 
00002c27 l       .debug_str	00000000 
0002ef41 l       .debug_str	00000000 
000063f4 l       .debug_str	00000000 
000063b6 l       .debug_str	00000000 
000311ee l       .debug_str	00000000 
00031f57 l       .debug_str	00000000 
0000637a l       .debug_str	00000000 
0000762d l       .debug_str	00000000 
0000636f l       .debug_str	00000000 
0000633a l       .debug_str	00000000 
00031b61 l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
0000623b l       .debug_str	00000000 
00007628 l       .debug_str	00000000 
000061ca l       .debug_str	00000000 
00006155 l       .debug_str	00000000 
00007623 l       .debug_str	00000000 
000060d8 l       .debug_str	00000000 
0000605e l       .debug_str	00000000 
00005fe6 l       .debug_str	00000000 
00005f7f l       .debug_str	00000000 
00005f17 l       .debug_str	00000000 
0000761e l       .debug_str	00000000 
00005ea7 l       .debug_str	00000000 
00007613 l       .debug_str	00000000 
00005e3c l       .debug_str	00000000 
00007608 l       .debug_str	00000000 
00005dd4 l       .debug_str	00000000 
00007603 l       .debug_str	00000000 
00005d6d l       .debug_str	00000000 
000075fe l       .debug_str	00000000 
00005d03 l       .debug_str	00000000 
000075f9 l       .debug_str	00000000 
00005c98 l       .debug_str	00000000 
000075d8 l       .debug_str	00000000 
0000e3b2 l       .debug_str	00000000 
000075cb l       .debug_str	00000000 
00005c2f l       .debug_str	00000000 
00030257 l       .debug_str	00000000 
0000318a l       .debug_str	00000000 
000075ba l       .debug_str	00000000 
0000315f l       .debug_str	00000000 
00017747 l       .debug_str	00000000 
00005bfc l       .debug_str	00000000 
000075b0 l       .debug_str	00000000 
00005be3 l       .debug_str	00000000 
00033faf l       .debug_str	00000000 
00005bae l       .debug_str	00000000 
00010369 l       .debug_str	00000000 
00003123 l       .debug_str	00000000 
00007583 l       .debug_str	00000000 
00005b64 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
00005b5b l       .debug_str	00000000 
0000756f l       .debug_str	00000000 
00005b13 l       .debug_str	00000000 
000380a8 l       .debug_str	00000000 
00005acb l       .debug_str	00000000 
00005ac2 l       .debug_str	00000000 
00005a7a l       .debug_str	00000000 
00005a4b l       .debug_str	00000000 
00005a03 l       .debug_str	00000000 
000059fa l       .debug_str	00000000 
000059b2 l       .debug_str	00000000 
00007561 l       .debug_str	00000000 
00005993 l       .debug_str	00000000 
0000594b l       .debug_str	00000000 
0000593c l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0000757d l       .debug_str	00000000 
0000270a l       .debug_str	00000000 
0000591b l       .debug_str	00000000 
00005912 l       .debug_str	00000000 
000058e5 l       .debug_str	00000000 
000058de l       .debug_str	00000000 
000058d4 l       .debug_str	00000000 
00005881 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00005830 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
00005814 l       .debug_str	00000000 
000057cb l       .debug_str	00000000 
000057a9 l       .debug_str	00000000 
00002ea0 l       .debug_str	00000000 
000057c0 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
0003437c l       .debug_str	00000000 
00005793 l       .debug_str	00000000 
000056fe l       .debug_str	00000000 
000311d8 l       .debug_str	00000000 
0002d4e5 l       .debug_str	00000000 
00007562 l       .debug_str	00000000 
000056cd l       .debug_str	00000000 
0003437d l       .debug_str	00000000 
000056bf l       .debug_str	00000000 
000336e2 l       .debug_str	00000000 
000056c0 l       .debug_str	00000000 
00038359 l       .debug_str	00000000 
000056b1 l       .debug_str	00000000 
0000755a l       .debug_str	00000000 
00005644 l       .debug_str	00000000 
000336c2 l       .debug_str	00000000 
00016f16 l       .debug_str	00000000 
000074c6 l       .debug_str	00000000 
000031e7 l       .debug_str	00000000 
00006374 l       .debug_str	00000000 
00005638 l       .debug_str	00000000 
00037cfe l       .debug_str	00000000 
000055c7 l       .debug_str	00000000 
000074bc l       .debug_str	00000000 
00008b43 l       .debug_str	00000000 
000074b6 l       .debug_str	00000000 
00007d07 l       .debug_str	00000000 
000074b0 l       .debug_str	00000000 
00005564 l       .debug_str	00000000 
00007484 l       .debug_str	00000000 
00002198 l       .debug_str	00000000 
0000555d l       .debug_str	00000000 
0000554f l       .debug_str	00000000 
0000747e l       .debug_str	00000000 
000054de l       .debug_str	00000000 
00007420 l       .debug_str	00000000 
000054d8 l       .debug_str	00000000 
00002fdf l       .debug_str	00000000 
00031f23 l       .debug_str	00000000 
00007412 l       .debug_str	00000000 
000054ce l       .debug_str	00000000 
000073cf l       .debug_str	00000000 
00005455 l       .debug_str	00000000 
00035217 l       .debug_str	00000000 
0001a550 l       .debug_str	00000000 
0000544b l       .debug_str	00000000 
000053e7 l       .debug_str	00000000 
000053e1 l       .debug_str	00000000 
000053b0 l       .debug_str	00000000 
000053a1 l       .debug_str	00000000 
000073c0 l       .debug_str	00000000 
00005353 l       .debug_str	00000000 
00005345 l       .debug_str	00000000 
000052f3 l       .debug_str	00000000 
000052eb l       .debug_str	00000000 
0000737c l       .debug_str	00000000 
000052ec l       .debug_str	00000000 
000052e1 l       .debug_str	00000000 
000052cd l       .debug_str	00000000 
0002ebf8 l       .debug_str	00000000 
0000527a l       .debug_str	00000000 
00031f7e l       .debug_str	00000000 
0000733a l       .debug_str	00000000 
00005276 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
0000525e l       .debug_str	00000000 
00007329 l       .debug_str	00000000 
00005220 l       .debug_str	00000000 
000072e3 l       .debug_str	00000000 
00005215 l       .debug_str	00000000 
000072cc l       .debug_str	00000000 
0000520b l       .debug_str	00000000 
00007280 l       .debug_str	00000000 
00005200 l       .debug_str	00000000 
000051fa l       .debug_str	00000000 
00031abc l       .debug_str	00000000 
000051f0 l       .debug_str	00000000 
0000723c l       .debug_str	00000000 
000051ea l       .debug_str	00000000 
00002b0c l       .debug_str	00000000 
000051e2 l       .debug_str	00000000 
0000517f l       .debug_str	00000000 
000338bf l       .debug_str	00000000 
0000514e l       .debug_str	00000000 
00031338 l       .debug_str	00000000 
00005142 l       .debug_str	00000000 
000071f1 l       .debug_str	00000000 
000050f2 l       .debug_str	00000000 
0002ee34 l       .debug_str	00000000 
000050e8 l       .debug_str	00000000 
00031fe6 l       .debug_str	00000000 
000050df l       .debug_str	00000000 
000071be l       .debug_str	00000000 
000050d6 l       .debug_str	00000000 
00002d63 l       .debug_str	00000000 
0000508f l       .debug_str	00000000 
00005083 l       .debug_str	00000000 
00030272 l       .debug_str	00000000 
0000503c l       .debug_str	00000000 
00001c80 l       .debug_str	00000000 
00033cd6 l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00005038 l       .debug_str	00000000 
0000502a l       .debug_str	00000000 
00032d34 l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
00004fcf l       .debug_str	00000000 
0000714f l       .debug_str	00000000 
00004fa3 l       .debug_str	00000000 
0000713e l       .debug_str	00000000 
00004f7b l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
00004f41 l       .debug_str	00000000 
000070fd l       .debug_str	00000000 
00004f19 l       .debug_str	00000000 
000070cd l       .debug_str	00000000 
00004eec l       .debug_str	00000000 
000070c5 l       .debug_str	00000000 
00004ec4 l       .debug_str	00000000 
00007099 l       .debug_str	00000000 
00004e7b l       .debug_str	00000000 
00007071 l       .debug_str	00000000 
00004e53 l       .debug_str	00000000 
00007067 l       .debug_str	00000000 
00004e2a l       .debug_str	00000000 
00007039 l       .debug_str	00000000 
00004e23 l       .debug_str	00000000 
00014e91 l       .debug_str	00000000 
00030874 l       .debug_str	00000000 
00007011 l       .debug_str	00000000 
00004df8 l       .debug_str	00000000 
00004e17 l       .debug_str	00000000 
00004dee l       .debug_str	00000000 
00004dc3 l       .debug_str	00000000 
00004de2 l       .debug_str	00000000 
0003070a l       .debug_str	00000000 
0002fea8 l       .debug_str	00000000 
00004da9 l       .debug_str	00000000 
00022a4f l       .debug_str	00000000 
00004d91 l       .debug_str	00000000 
00004d77 l       .debug_str	00000000 
00004d65 l       .debug_str	00000000 
00004d4c l       .debug_str	00000000 
00004d3b l       .debug_str	00000000 
00004d22 l       .debug_str	00000000 
00004d11 l       .debug_str	00000000 
00000401 l       .debug_str	00000000 
00004cf7 l       .debug_str	00000000 
00004cdc l       .debug_str	00000000 
00004cc9 l       .debug_str	00000000 
00033065 l       .debug_str	00000000 
00006f8c l       .debug_str	00000000 
000342cc l       .debug_str	00000000 
00006f65 l       .debug_str	00000000 
00006ee0 l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006dd8 l       .debug_str	00000000 
00006d5c l       .debug_str	00000000 
00006d46 l       .debug_str	00000000 
00006cc1 l       .debug_str	00000000 
00006cb5 l       .debug_str	00000000 
00006c65 l       .debug_str	00000000 
00022c92 l       .debug_str	00000000 
00006c1d l       .debug_str	00000000 
00006c10 l       .debug_str	00000000 
00006bbf l       .debug_str	00000000 
0002e6c6 l       .debug_str	00000000 
00006b74 l       .debug_str	00000000 
00006b68 l       .debug_str	00000000 
00006b18 l       .debug_str	00000000 
00006aeb l       .debug_str	00000000 
00006adc l       .debug_str	00000000 
00006a89 l       .debug_str	00000000 
00006a80 l       .debug_str	00000000 
00006a34 l       .debug_str	00000000 
0002e35d l       .debug_str	00000000 
00006a1f l       .debug_str	00000000 
00004c8f l       .debug_str	00000000 
000069c6 l       .debug_str	00000000 
00006956 l       .debug_str	00000000 
000068d8 l       .debug_str	00000000 
00004c5d l       .debug_str	00000000 
00006867 l       .debug_str	00000000 
000067d9 l       .debug_str	00000000 
0000060a l       .debug_str	00000000 
00003224 l       .debug_str	00000000 
0000003e l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000787 l       .debug_str	00000000 
000074c2 l       .debug_str	00000000 
000074c1 l       .debug_str	00000000 
00000687 l       .debug_str	00000000 
00033c77 l       .debug_str	00000000 
00000056 l       .debug_str	00000000 
0000323b l       .debug_str	00000000 
00000b33 l       .debug_str	00000000 
0002f5c2 l       .debug_str	00000000 
00000a8e l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
00000777 l       .debug_str	00000000 
00000780 l       .debug_str	00000000 
0003487d l       .debug_str	00000000 
000052ed l       .debug_str	00000000 
0000555e l       .debug_str	00000000 
000075c6 l       .debug_str	00000000 
00000a96 l       .debug_str	00000000 
00000aa7 l       .debug_str	00000000 
00000a9e l       .debug_str	00000000 
0000270b l       .debug_str	00000000 
0000463c l       .debug_str	00000000 
0000324c l       .debug_str	00000000 
000075b5 l       .debug_str	00000000 
00006c16 l       .debug_str	00000000 
0000760f l       .debug_str	00000000 
0000065f l       .debug_str	00000000 
00008a8e l       .debug_str	00000000 
000399e9 l       .debug_str	00000000 
00000c8d l       .debug_str	00000000 
0000068e l       .debug_str	00000000 
00000696 l       .debug_str	00000000 
000006a1 l       .debug_str	00000000 
000006ac l       .debug_str	00000000 
000006b9 l       .debug_str	00000000 
000006c4 l       .debug_str	00000000 
000006cc l       .debug_str	00000000 
000006d7 l       .debug_str	00000000 
000006e2 l       .debug_str	00000000 
000006ec l       .debug_str	00000000 
000006f7 l       .debug_str	00000000 
00000702 l       .debug_str	00000000 
0000070f l       .debug_str	00000000 
0000071b l       .debug_str	00000000 
00000728 l       .debug_str	00000000 
00000736 l       .debug_str	00000000 
00000740 l       .debug_str	00000000 
0000754e l       .debug_str	00000000 
000235c6 l       .debug_str	00000000 
00000662 l       .debug_str	00000000 
00003290 l       .debug_str	00000000 
00000b3a l       .debug_str	00000000 
0003522f l       .debug_str	00000000 
0000079e l       .debug_str	00000000 
00002ead l       .debug_str	00000000 
0003085b l       .debug_str	00000000 
00008b47 l       .debug_str	00000000 
00002eb2 l       .debug_str	00000000 
00002ed7 l       .debug_str	00000000 
00002ec2 l       .debug_str	00000000 
0000325a l       .debug_str	00000000 
000032b8 l       .debug_str	00000000 
00000886 l       .debug_str	00000000 
000032cd l       .debug_str	00000000 
00003308 l       .debug_str	00000000 
00000b48 l       .debug_str	00000000 
00002708 l       .debug_str	00000000 
00002717 l       .debug_str	00000000 
0002dd63 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
0001571c l       .debug_str	00000000 
00000b58 l       .debug_str	00000000 
00000b64 l       .debug_str	00000000 
0000074d l       .debug_str	00000000 
00000751 l       .debug_str	00000000 
0000075c l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000b6c l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
0000082f l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
00000c4a l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000ce0 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00000d27 l       .debug_str	00000000 
00000d6c l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d85 l       .debug_str	00000000 
00000d8d l       .debug_str	00000000 
00000de2 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4b l       .debug_str	00000000 
00000e54 l       .debug_str	00000000 
00000e60 l       .debug_str	00000000 
00000e6c l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7d l       .debug_str	00000000 
000004d2 l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000eb3 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000eba l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
000005b4 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000004e3 l       .debug_str	00000000 
000003a8 l       .debug_str	00000000 
00007f46 l       .debug_str	00000000 
0000038e l       .debug_str	00000000 
000004dc l       .debug_str	00000000 
00000412 l       .debug_str	00000000 
0002e112 l       .debug_str	00000000 
000004a3 l       .debug_str	00000000 
000003a2 l       .debug_str	00000000 
0003434d l       .debug_str	00000000 
0002d5cb l       .debug_str	00000000 
00000edc l       .debug_str	00000000 
00000f09 l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
0002f9b1 l       .debug_str	00000000 
000003e5 l       .debug_str	00000000 
00000534 l       .debug_str	00000000 
00000481 l       .debug_str	00000000 
000003b4 l       .debug_str	00000000 
00000f3e l       .debug_str	00000000 
00000f67 l       .debug_str	00000000 
00000fc5 l       .debug_str	00000000 
0000046d l       .debug_str	00000000 
0000059e l       .debug_str	00000000 
00000562 l       .debug_str	00000000 
0000102b l       .debug_str	00000000 
00000f57 l       .debug_str	00000000 
000005a6 l       .debug_str	00000000 
00000593 l       .debug_str	00000000 
00000527 l       .debug_str	00000000 
0000035a l       .debug_str	00000000 
00001049 l       .debug_str	00000000 
0000050c l       .debug_str	00000000 
000004d3 l       .debug_str	00000000 
000003cd l       .debug_str	00000000 
0000105f l       .debug_str	00000000 
00001085 l       .debug_str	00000000 
00000378 l       .debug_str	00000000 
0000109b l       .debug_str	00000000 
000075f1 l       .debug_str	00000000 
00001064 l       .debug_str	00000000 
000010b1 l       .debug_str	00000000 
0002437b l       .debug_str	00000000 
000010c8 l       .debug_str	00000000 
000010d0 l       .debug_str	00000000 
000010d9 l       .debug_str	00000000 
000025ee l       .debug_str	00000000 
000010e2 l       .debug_str	00000000 
00034088 l       .debug_str	00000000 
000010ea l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001101 l       .debug_str	00000000 
00001109 l       .debug_str	00000000 
00001211 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00001411 l       .debug_str	00000000 
0000141f l       .debug_str	00000000 
0000142a l       .debug_str	00000000 
00001457 l       .debug_str	00000000 
00001434 l       .debug_str	00000000 
00001462 l       .debug_str	00000000 
000014dd l       .debug_str	00000000 
00001560 l       .debug_str	00000000 
0000156e l       .debug_str	00000000 
000015cd l       .debug_str	00000000 
00001634 l       .debug_str	00000000 
0000164a l       .debug_str	00000000 
0000165a l       .debug_str	00000000 
00030d48 l       .debug_str	00000000 
0000090d l       .debug_str	00000000 
00001669 l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00001675 l       .debug_str	00000000 
0000167b l       .debug_str	00000000 
00001687 l       .debug_str	00000000 
00039472 l       .debug_str	00000000 
0000168f l       .debug_str	00000000 
000378f8 l       .debug_str	00000000 
00001697 l       .debug_str	00000000 
000016dd l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
000016ed l       .debug_str	00000000 
0000172d l       .debug_str	00000000 
00031503 l       .debug_str	00000000 
00001775 l       .debug_str	00000000 
0000177b l       .debug_str	00000000 
00001781 l       .debug_str	00000000 
000017aa l       .debug_str	00000000 
00001787 l       .debug_str	00000000 
000017bc l       .debug_str	00000000 
000017fe l       .debug_str	00000000 
000317c0 l       .debug_str	00000000 
00001848 l       .debug_str	00000000 
0000184e l       .debug_str	00000000 
00001854 l       .debug_str	00000000 
0000187d l       .debug_str	00000000 
0000185a l       .debug_str	00000000 
0000188f l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
00032016 l       .debug_str	00000000 
0000191b l       .debug_str	00000000 
00001921 l       .debug_str	00000000 
00001927 l       .debug_str	00000000 
0000192d l       .debug_str	00000000 
00001956 l       .debug_str	00000000 
00001933 l       .debug_str	00000000 
00001967 l       .debug_str	00000000 
000019a8 l       .debug_str	00000000 
000019f1 l       .debug_str	00000000 
000019f6 l       .debug_str	00000000 
000318cb l       .debug_str	00000000 
000019fb l       .debug_str	00000000 
00001a01 l       .debug_str	00000000 
00001a07 l       .debug_str	00000000 
00001a30 l       .debug_str	00000000 
00001a0d l       .debug_str	00000000 
00001a41 l       .debug_str	00000000 
00001a82 l       .debug_str	00000000 
00030c91 l       .debug_str	00000000 
00001acb l       .debug_str	00000000 
00001af7 l       .debug_str	00000000 
00001ad4 l       .debug_str	00000000 
00001b08 l       .debug_str	00000000 
00001b49 l       .debug_str	00000000 
00001b92 l       .debug_str	00000000 
00031c3e l       .debug_str	00000000 
00001b97 l       .debug_str	00000000 
00001ba0 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00001bd2 l       .debug_str	00000000 
00001baf l       .debug_str	00000000 
00001be4 l       .debug_str	00000000 
00001c26 l       .debug_str	00000000 
00031670 l       .debug_str	00000000 
00001c70 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00001c7c l       .debug_str	00000000 
00001c82 l       .debug_str	00000000 
00001c88 l       .debug_str	00000000 
00001c90 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00001cad l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001cc9 l       .debug_str	00000000 
00001cd4 l       .debug_str	00000000 
00001cdf l       .debug_str	00000000 
00001ce6 l       .debug_str	00000000 
00001d2c l       .debug_str	00000000 
00001d09 l       .debug_str	00000000 
00001d3e l       .debug_str	00000000 
00001d80 l       .debug_str	00000000 
00031f6b l       .debug_str	00000000 
00001dca l       .debug_str	00000000 
00001df7 l       .debug_str	00000000 
00001dd4 l       .debug_str	00000000 
00001e09 l       .debug_str	00000000 
00001e4b l       .debug_str	00000000 
00001e95 l       .debug_str	00000000 
00001e9a l       .debug_str	00000000 
00001ec7 l       .debug_str	00000000 
00001ea4 l       .debug_str	00000000 
00001ed9 l       .debug_str	00000000 
00001f1b l       .debug_str	00000000 
00001f65 l       .debug_str	00000000 
000116e2 l       .debug_str	00000000 
00001fe4 l       .debug_str	00000000 
00001f79 l       .debug_str	00000000 
00001f89 l       .debug_str	00000000 
00001f92 l       .debug_str	00000000 
00001f9d l       .debug_str	00000000 
00001fac l       .debug_str	00000000 
00001fc1 l       .debug_str	00000000 
00001ff2 l       .debug_str	00000000 
0000208f l       .debug_str	00000000 
00002134 l       .debug_str	00000000 
0000213f l       .debug_str	00000000 
00002148 l       .debug_str	00000000 
0000218c l       .debug_str	00000000 
00002169 l       .debug_str	00000000 
0000219f l       .debug_str	00000000 
00002222 l       .debug_str	00000000 
000022ad l       .debug_str	00000000 
000022c9 l       .debug_str	00000000 
00002315 l       .debug_str	00000000 
00002369 l       .debug_str	00000000 
00002386 l       .debug_str	00000000 
0000239a l       .debug_str	00000000 
000023e6 l       .debug_str	00000000 
0000243a l       .debug_str	00000000 
00002450 l       .debug_str	00000000 
00002464 l       .debug_str	00000000 
000024ab l       .debug_str	00000000 
000024fa l       .debug_str	00000000 
00002526 l       .debug_str	00000000 
00002503 l       .debug_str	00000000 
00002534 l       .debug_str	00000000 
0000253a l       .debug_str	00000000 
00002542 l       .debug_str	00000000 
00002549 l       .debug_str	00000000 
00002551 l       .debug_str	00000000 
0000255c l       .debug_str	00000000 
00002564 l       .debug_str	00000000 
00007efe l       .debug_str	00000000 
00002573 l       .debug_str	00000000 
0000257e l       .debug_str	00000000 
0000258a l       .debug_str	00000000 
00002595 l       .debug_str	00000000 
000025a6 l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025b4 l       .debug_str	00000000 
000025bb l       .debug_str	00000000 
000025c5 l       .debug_str	00000000 
000025cd l       .debug_str	00000000 
000025d5 l       .debug_str	00000000 
000025f7 l       .debug_str	00000000 
00002602 l       .debug_str	00000000 
0000260e l       .debug_str	00000000 
00002616 l       .debug_str	00000000 
0000261f l       .debug_str	00000000 
00000466 l       .debug_str	00000000 
0000262a l       .debug_str	00000000 
00002635 l       .debug_str	00000000 
00002640 l       .debug_str	00000000 
00002650 l       .debug_str	00000000 
00030c41 l       .debug_str	00000000 
00002d06 l       .debug_str	00000000 
0000265a l       .debug_str	00000000 
00002692 l       .debug_str	00000000 
000026d2 l       .debug_str	00000000 
000026d9 l       .debug_str	00000000 
000026e1 l       .debug_str	00000000 
00002d1f l       .debug_str	00000000 
000026f8 l       .debug_str	00000000 
0000274c l       .debug_str	00000000 
0000277f l       .debug_str	00000000 
00002794 l       .debug_str	00000000 
0000279d l       .debug_str	00000000 
000027fa l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
00002869 l       .debug_str	00000000 
00002879 l       .debug_str	00000000 
0000288e l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
000028fa l       .debug_str	00000000 
00002966 l       .debug_str	00000000 
0000296d l       .debug_str	00000000 
00002975 l       .debug_str	00000000 
000029b6 l       .debug_str	00000000 
00002993 l       .debug_str	00000000 
000029c6 l       .debug_str	00000000 
000029db l       .debug_str	00000000 
000029ee l       .debug_str	00000000 
00002a03 l       .debug_str	00000000 
00002a0a l       .debug_str	00000000 
00002a1f l       .debug_str	00000000 
00004c50 l       .debug_str	00000000 
0000118d l       .debug_str	00000000 
0000271f l       .debug_str	00000000 
00002726 l       .debug_str	00000000 
0000272e l       .debug_str	00000000 
0000276f l       .debug_str	00000000 
0000331a l       .debug_str	00000000 
0002ef54 l       .debug_str	00000000 
00003356 l       .debug_str	00000000 
00003363 l       .debug_str	00000000 
00003370 l       .debug_str	00000000 
0000337b l       .debug_str	00000000 
00005173 l       .debug_str	00000000 
00003388 l       .debug_str	00000000 
000033cc l       .debug_str	00000000 
000033da l       .debug_str	00000000 
0002f4c2 l       .debug_str	00000000 
000395cd l       .debug_str	00000000 
000033e3 l       .debug_str	00000000 
00003445 l       .debug_str	00000000 
000034af l       .debug_str	00000000 
000034de l       .debug_str	00000000 
000034bd l       .debug_str	00000000 
000034f2 l       .debug_str	00000000 
000034fd l       .debug_str	00000000 
00000e6f l       .debug_str	00000000 
00006b0c l       .debug_str	00000000 
00003503 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00000666 l       .debug_str	00000000 
00022a8c l       .debug_str	00000000 
0000b916 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
0000066d l       .debug_str	00000000 
00000672 l       .debug_str	00000000 
00000678 l       .debug_str	00000000 
0000067f l       .debug_str	00000000 
00036c2d l       .debug_str	00000000 
00000693 l       .debug_str	00000000 
0000359b l       .debug_str	00000000 
000074a6 l       .debug_str	00000000 
00000767 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
0000360a l       .debug_str	00000000 
00002b5b l       .debug_str	00000000 
0000592b l       .debug_str	00000000 
0000591c l       .debug_str	00000000 
00035a06 l       .debug_str	00000000 
000007b8 l       .debug_str	00000000 
000000c6 l       .debug_str	00000000 
0001042f l       .debug_str	00000000 
000008e6 l       .debug_str	00000000 
000007bd l       .debug_str	00000000 
00030bfb l       .debug_str	00000000 
00000877 l       .debug_str	00000000 
00004332 l       .debug_str	00000000 
0000089a l       .debug_str	00000000 
000008f4 l       .debug_str	00000000 
000008ff l       .debug_str	00000000 
00000906 l       .debug_str	00000000 
0000077c l       .debug_str	00000000 
00030b3c l       .debug_str	00000000 
000349cb l       .debug_str	00000000 
0000085b l       .debug_str	00000000 
0000086a l       .debug_str	00000000 
0000086e l       .debug_str	00000000 
000008a6 l       .debug_str	00000000 
000008b2 l       .debug_str	00000000 
000008d7 l       .debug_str	00000000 
000008cb l       .debug_str	00000000 
000008dc l       .debug_str	00000000 
00000985 l       .debug_str	00000000 
000009f5 l       .debug_str	00000000 
000009e3 l       .debug_str	00000000 
00039558 l       .debug_str	00000000 
0000090c l       .debug_str	00000000 
00000914 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
00030d30 l       .debug_str	00000000 
00000a00 l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
0000096b l       .debug_str	00000000 
00003613 l       .debug_str	00000000 
0000361c l       .debug_str	00000000 
00003630 l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
00003639 l       .debug_str	00000000 
00004701 l       .debug_str	00000000 
00003644 l       .debug_str	00000000 
0002dec2 l       .debug_str	00000000 
0000364f l       .debug_str	00000000 
0000747f l       .debug_str	00000000 
000036ac l       .debug_str	00000000 
00007485 l       .debug_str	00000000 
00003718 l       .debug_str	00000000 
0000420b l       .debug_str	00000000 
00003775 l       .debug_str	00000000 
000037d1 l       .debug_str	00000000 
00003819 l       .debug_str	00000000 
00003821 l       .debug_str	00000000 
000074b7 l       .debug_str	00000000 
00000770 l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
0000078a l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
00036229 l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
000007a8 l       .debug_str	00000000 
000007af l       .debug_str	00000000 
00033ce2 l       .debug_str	00000000 
000007c7 l       .debug_str	00000000 
000007ce l       .debug_str	00000000 
000007ca l       .debug_str	00000000 
000007d4 l       .debug_str	00000000 
000007dc l       .debug_str	00000000 
000007e2 l       .debug_str	00000000 
00000807 l       .debug_str	00000000 
000007ed l       .debug_str	00000000 
00000810 l       .debug_str	00000000 
00000834 l       .debug_str	00000000 
000083f8 l       .debug_str	00000000 
00000a19 l       .debug_str	00000000 
00000a4b l       .debug_str	00000000 
00033a8a l       .debug_str	00000000 
0000387e l       .debug_str	00000000 
000038a6 l       .debug_str	00000000 
000038cb l       .debug_str	00000000 
00030255 l       .debug_str	00000000 
00002ce5 l       .debug_str	00000000 
00002cef l       .debug_str	00000000 
00002cf8 l       .debug_str	00000000 
00000383 l       .debug_str	00000000 
000005bf l       .debug_str	00000000 
00002d01 l       .debug_str	00000000 
00002d28 l       .debug_str	00000000 
00002d59 l       .debug_str	00000000 
00002d40 l       .debug_str	00000000 
000038d0 l       .debug_str	00000000 
0000059f l       .debug_str	00000000 
000038dd l       .debug_str	00000000 
000038d8 l       .debug_str	00000000 
00003901 l       .debug_str	00000000 
000038f6 l       .debug_str	00000000 
0000391a l       .debug_str	00000000 
00003942 l       .debug_str	00000000 
00003969 l       .debug_str	00000000 
00003973 l       .debug_str	00000000 
000350af l       .debug_str	00000000 
0000397b l       .debug_str	00000000 
00003982 l       .debug_str	00000000 
0000398c l       .debug_str	00000000 
00003987 l       .debug_str	00000000 
000039af l       .debug_str	00000000 
000039a5 l       .debug_str	00000000 
000039c7 l       .debug_str	00000000 
000039ef l       .debug_str	00000000 
00003a15 l       .debug_str	00000000 
00003a3d l       .debug_str	00000000 
00003a60 l       .debug_str	00000000 
00003a68 l       .debug_str	00000000 
00003a71 l       .debug_str	00000000 
0003483e l       .debug_str	00000000 
00003a7f l       .debug_str	00000000 
00003a86 l       .debug_str	00000000 
00003a96 l       .debug_str	00000000 
00003a9f l       .debug_str	00000000 
00003aad l       .debug_str	00000000 
00003abb l       .debug_str	00000000 
00003ac7 l       .debug_str	00000000 
0002dd79 l       .debug_str	00000000 
00003ad3 l       .debug_str	00000000 
00003ae2 l       .debug_str	00000000 
00003aea l       .debug_str	00000000 
00003b03 l       .debug_str	00000000 
00003b14 l       .debug_str	00000000 
00003b1c l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00003b36 l       .debug_str	00000000 
00003b5b l       .debug_str	00000000 
00000e78 l       .debug_str	00000000 
00003b8d l       .debug_str	00000000 
00003b74 l       .debug_str	00000000 
00003b98 l       .debug_str	00000000 
00003ba1 l       .debug_str	00000000 
00003bd5 l       .debug_str	00000000 
00003bbc l       .debug_str	00000000 
00003be2 l       .debug_str	00000000 
00003bea l       .debug_str	00000000 
00003c0b l       .debug_str	00000000 
00003c21 l       .debug_str	00000000 
00003c2c l       .debug_str	00000000 
00003c3c l       .debug_str	00000000 
00003c40 l       .debug_str	00000000 
00003c03 l       .debug_str	00000000 
00003c5b l       .debug_str	00000000 
00003c83 l       .debug_str	00000000 
00003ca7 l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00003cf6 l       .debug_str	00000000 
00003d1e l       .debug_str	00000000 
00003d4a l       .debug_str	00000000 
00003d72 l       .debug_str	00000000 
00003d96 l       .debug_str	00000000 
00003d9f l       .debug_str	00000000 
00003db4 l       .debug_str	00000000 
00003dbf l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003dee l       .debug_str	00000000 
00003e11 l       .debug_str	00000000 
00003e39 l       .debug_str	00000000 
00003e6d l       .debug_str	00000000 
00003e95 l       .debug_str	00000000 
00003ecb l       .debug_str	00000000 
00003ef3 l       .debug_str	00000000 
00003f2c l       .debug_str	00000000 
00003f54 l       .debug_str	00000000 
00003f85 l       .debug_str	00000000 
00003fad l       .debug_str	00000000 
00031714 l       .debug_str	00000000 
00003fda l       .debug_str	00000000 
00003fed l       .debug_str	00000000 
00003ff8 l       .debug_str	00000000 
00004397 l       .debug_str	00000000 
000043a5 l       .debug_str	00000000 
00004008 l       .debug_str	00000000 
00004030 l       .debug_str	00000000 
00004064 l       .debug_str	00000000 
000394e3 l       .debug_str	00000000 
000079c3 l       .debug_str	00000000 
0003997e l       .debug_str	00000000 
00039e91 l       .debug_str	00000000 
00004091 l       .debug_str	00000000 
00004126 l       .debug_str	00000000 
00034d20 l       .debug_str	00000000 
00004132 l       .debug_str	00000000 
0000414d l       .debug_str	00000000 
00004136 l       .debug_str	00000000 
000382dd l       .debug_str	00000000 
0000415a l       .debug_str	00000000 
00004198 l       .debug_str	00000000 
00002ea1 l       .debug_str	00000000 
000041ac l       .debug_str	00000000 
000041b8 l       .debug_str	00000000 
000041c6 l       .debug_str	00000000 
000041dd l       .debug_str	00000000 
00036caf l       .debug_str	00000000 
000041f2 l       .debug_str	00000000 
000041fb l       .debug_str	00000000 
00004205 l       .debug_str	00000000 
0000420a l       .debug_str	00000000 
00004210 l       .debug_str	00000000 
00004215 l       .debug_str	00000000 
000083ec l       .debug_str	00000000 
0000421a l       .debug_str	00000000 
00002cba l       .debug_str	00000000 
00002ce1 l       .debug_str	00000000 
0003833d l       .debug_str	00000000 
000007a9 l       .debug_str	00000000 
0000425a l       .debug_str	00000000 
0002d40b l       .debug_str	00000000 
0000425e l       .debug_str	00000000 
00004289 l       .debug_str	00000000 
0002d55a l       .debug_str	00000000 
0000757e l       .debug_str	00000000 
00004290 l       .debug_str	00000000 
0003335d l       .debug_str	00000000 
00004295 l       .debug_str	00000000 
000042a6 l       .debug_str	00000000 
000042bf l       .debug_str	00000000 
000042c2 l       .debug_str	00000000 
000042d3 l       .debug_str	00000000 
00000792 l       .debug_str	00000000 
000042ec l       .debug_str	00000000 
00004301 l       .debug_str	00000000 
0000431e l       .debug_str	00000000 
00004328 l       .debug_str	00000000 
0000432d l       .debug_str	00000000 
0000433a l       .debug_str	00000000 
00004341 l       .debug_str	00000000 
00004349 l       .debug_str	00000000 
00004351 l       .debug_str	00000000 
00004358 l       .debug_str	00000000 
00004381 l       .debug_str	00000000 
00004364 l       .debug_str	00000000 
0000435f l       .debug_str	00000000 
0000438c l       .debug_str	00000000 
000043b3 l       .debug_str	00000000 
000043ff l       .debug_str	00000000 
00004453 l       .debug_str	00000000 
0000446c l       .debug_str	00000000 
00004494 l       .debug_str	00000000 
000044cd l       .debug_str	00000000 
000044f5 l       .debug_str	00000000 
00004520 l       .debug_str	00000000 
00004529 l       .debug_str	00000000 
0000456b l       .debug_str	00000000 
000045b5 l       .debug_str	00000000 
000045bc l       .debug_str	00000000 
0002e9c2 l       .debug_str	00000000 
000045ca l       .debug_str	00000000 
000045f2 l       .debug_str	00000000 
0000461f l       .debug_str	00000000 
00004627 l       .debug_str	00000000 
00004631 l       .debug_str	00000000 
00037bed l       .debug_str	00000000 
0002f443 l       .debug_str	00000000 
00004637 l       .debug_str	00000000 
00004640 l       .debug_str	00000000 
00004656 l       .debug_str	00000000 
00004674 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
00004686 l       .debug_str	00000000 
0000469c l       .debug_str	00000000 
000046ba l       .debug_str	00000000 
000046c4 l       .debug_str	00000000 
000046bf l       .debug_str	00000000 
000046c8 l       .debug_str	00000000 
000046de l       .debug_str	00000000 
0002f1c0 l       .debug_str	00000000 
0002f8c9 l       .debug_str	00000000 
000046fc l       .debug_str	00000000 
00004706 l       .debug_str	00000000 
0000471d l       .debug_str	00000000 
0000473c l       .debug_str	00000000 
0002f37a l       .debug_str	00000000 
00004746 l       .debug_str	00000000 
0002f5fc l       .debug_str	00000000 
0002f8d8 l       .debug_str	00000000 
00004753 l       .debug_str	00000000 
000047a1 l       .debug_str	00000000 
000303cc l       .debug_str	00000000 
000047f7 l       .debug_str	00000000 
000047fc l       .debug_str	00000000 
00004802 l       .debug_str	00000000 
0000480b l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
00004882 l       .debug_str	00000000 
000049a6 l       .debug_str	00000000 
000048d8 l       .debug_str	00000000 
00004901 l       .debug_str	00000000 
0000494f l       .debug_str	00000000 
000049a5 l       .debug_str	00000000 
000049af l       .debug_str	00000000 
000049d8 l       .debug_str	00000000 
00004a26 l       .debug_str	00000000 
00004a7c l       .debug_str	00000000 
00004a82 l       .debug_str	00000000 
00004aab l       .debug_str	00000000 
00004af9 l       .debug_str	00000000 
00004b4f l       .debug_str	00000000 
00004b58 l       .debug_str	00000000 
00004b81 l       .debug_str	00000000 
00004bcf l       .debug_str	00000000 
00004c25 l       .debug_str	00000000 
0003184a l       .debug_str	00000000 
00004c40 l       .debug_str	00000000 
00004c49 l       .debug_str	00000000 
00006769 l       .debug_str	00000000 
0800161e l     F .text	00000052 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0aa02af027a21484E
08001670 l     F .text	0000003a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h24a37d0be695a87dE
080016aa l     F .text	00000036 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h269dc5a7c826e7dbE
080016e0 l     F .text	0000003a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h63940e208c4821a3E
0800171a l     F .text	0000003a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h771f7c96cc1a46f7E
08001754 l     F .text	0000003c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e18813c7e529e80E
08001790 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hef50dfd16aa4e30bE
0800179c l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h6cddc1d5a292b1e6E
0800179e l     F .text	00000058 _ZN4core6result13unwrap_failed17h8525fcf086ab9eeeE
20000130 l     O .data	00000020 _ZN6mynewt2hw6sensor16SENSOR_LISTENERS17h02239d464299dfbbE
20000150 l     O .data	00000018 _ZN6mynewt2hw6sensor17LISTENER_INTERNAL17h8e78dc4f5758a23eE
0800190e l     F .text	000001ac _ZN6mynewt2hw6sensor20wrap_sensor_listener17h03b75cee35509918E
08001aba l     F .text	00000004 _ZN6mynewt2hw6sensor21null_sensor_data_func17hb73afa768c6c9e6aE
08001abe l     F .text	00000004 _ZN6mynewt2hw6sensor22null_sensor_value_func17h7ac74c02f3a87ab3E
00000000 l    df *ABS*	00000000 core.6gxsn4hc-cgu.0
0000060a l       .debug_str	00000000 
00007656 l       .debug_str	00000000 
00007669 l       .debug_str	00000000 
000075b5 l       .debug_str	00000000 
0002dec2 l       .debug_str	00000000 
0000769a l       .debug_str	00000000 
000076a2 l       .debug_str	00000000 
000076ab l       .debug_str	00000000 
000076f4 l       .debug_str	00000000 
0000760f l       .debug_str	00000000 
00000886 l       .debug_str	00000000 
000076b2 l       .debug_str	00000000 
000076f1 l       .debug_str	00000000 
000076fa l       .debug_str	00000000 
0000773c l       .debug_str	00000000 
00007746 l       .debug_str	00000000 
00007789 l       .debug_str	00000000 
00007793 l       .debug_str	00000000 
000077d6 l       .debug_str	00000000 
000077e0 l       .debug_str	00000000 
00007823 l       .debug_str	00000000 
0000782e l       .debug_str	00000000 
00007873 l       .debug_str	00000000 
0000787e l       .debug_str	00000000 
000078c3 l       .debug_str	00000000 
000078c9 l       .debug_str	00000000 
000007ab l       .debug_str	00000000 
000116e2 l       .debug_str	00000000 
00003c3c l       .debug_str	00000000 
00007efe l       .debug_str	00000000 
000078d6 l       .debug_str	00000000 
000078da l       .debug_str	00000000 
000078ea l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
0000319e l       .debug_str	00000000 
00000767 l       .debug_str	00000000 
00007930 l       .debug_str	00000000 
00007945 l       .debug_str	00000000 
000079c3 l       .debug_str	00000000 
0000794f l       .debug_str	00000000 
00007958 l       .debug_str	00000000 
00000792 l       .debug_str	00000000 
00000906 l       .debug_str	00000000 
0000077c l       .debug_str	00000000 
00000787 l       .debug_str	00000000 
00000780 l       .debug_str	00000000 
00039558 l       .debug_str	00000000 
0000090c l       .debug_str	00000000 
0000090d l       .debug_str	00000000 
000074c2 l       .debug_str	00000000 
000399e9 l       .debug_str	00000000 
00007960 l       .debug_str	00000000 
000083c9 l       .debug_str	00000000 
0000859d l       .debug_str	00000000 
00035a06 l       .debug_str	00000000 
00007971 l       .debug_str	00000000 
0002ec9d l       .debug_str	00000000 
0002d92f l       .debug_str	00000000 
00008229 l       .debug_str	00000000 
00007983 l       .debug_str	00000000 
0002dd63 l       .debug_str	00000000 
0000079e l       .debug_str	00000000 
000000c6 l       .debug_str	00000000 
00037a45 l       .debug_str	00000000 
000317a4 l       .debug_str	00000000 
0000798d l       .debug_str	00000000 
00007992 l       .debug_str	00000000 
00030752 l       .debug_str	00000000 
0000799d l       .debug_str	00000000 
000002f2 l       .debug_str	00000000 
000079a7 l       .debug_str	00000000 
00008042 l       .debug_str	00000000 
000079b1 l       .debug_str	00000000 
000052ed l       .debug_str	00000000 
00008082 l       .debug_str	00000000 
0000082f l       .debug_str	00000000 
0000826c l       .debug_str	00000000 
000079bf l       .debug_str	00000000 
000079c8 l       .debug_str	00000000 
000079ca l       .debug_str	00000000 
00007a3e l       .debug_str	00000000 
00008305 l       .debug_str	00000000 
00007a56 l       .debug_str	00000000 
00008088 l       .debug_str	00000000 
00008062 l       .debug_str	00000000 
0000809d l       .debug_str	00000000 
000083df l       .debug_str	00000000 
000082ce l       .debug_str	00000000 
00007a5b l       .debug_str	00000000 
00007ad3 l       .debug_str	00000000 
00008356 l       .debug_str	00000000 
00008399 l       .debug_str	00000000 
00007ae5 l       .debug_str	00000000 
00017747 l       .debug_str	00000000 
0002ffca l       .debug_str	00000000 
00039e91 l       .debug_str	00000000 
00008411 l       .debug_str	00000000 
0000829d l       .debug_str	00000000 
00007b59 l       .debug_str	00000000 
00034d20 l       .debug_str	00000000 
00007bb1 l       .debug_str	00000000 
00007bb9 l       .debug_str	00000000 
00007bc1 l       .debug_str	00000000 
00000777 l       .debug_str	00000000 
0003487d l       .debug_str	00000000 
00000791 l       .debug_str	00000000 
00007bca l       .debug_str	00000000 
00007bd1 l       .debug_str	00000000 
00007bdd l       .debug_str	00000000 
00007be4 l       .debug_str	00000000 
00007bee l       .debug_str	00000000 
00007bfb l       .debug_str	00000000 
00007c08 l       .debug_str	00000000 
00004701 l       .debug_str	00000000 
00007c1d l       .debug_str	00000000 
0003116b l       .debug_str	00000000 
00007c26 l       .debug_str	00000000 
00007c3a l       .debug_str	00000000 
000380a8 l       .debug_str	00000000 
0000555e l       .debug_str	00000000 
00007c50 l       .debug_str	00000000 
00007c55 l       .debug_str	00000000 
00007c67 l       .debug_str	00000000 
00007c8f l       .debug_str	00000000 
00007c99 l       .debug_str	00000000 
00007ca9 l       .debug_str	00000000 
00007d02 l       .debug_str	00000000 
00007d0a l       .debug_str	00000000 
00007d17 l       .debug_str	00000000 
00007d24 l       .debug_str	00000000 
00008477 l       .debug_str	00000000 
0002e32a l       .debug_str	00000000 
00007d31 l       .debug_str	00000000 
00007d5e l       .debug_str	00000000 
00007d8d l       .debug_str	00000000 
00007db4 l       .debug_str	00000000 
00007dd3 l       .debug_str	00000000 
00007de3 l       .debug_str	00000000 
00022a8c l       .debug_str	00000000 
00007e15 l       .debug_str	00000000 
00007e24 l       .debug_str	00000000 
00007e2f l       .debug_str	00000000 
00003630 l       .debug_str	00000000 
00030bfb l       .debug_str	00000000 
00000877 l       .debug_str	00000000 
00004332 l       .debug_str	00000000 
0000089a l       .debug_str	00000000 
000008f4 l       .debug_str	00000000 
00007e64 l       .debug_str	00000000 
00007e8f l       .debug_str	00000000 
00007e6f l       .debug_str	00000000 
00007e75 l       .debug_str	00000000 
0003227d l       .debug_str	00000000 
00007e9a l       .debug_str	00000000 
00007e9f l       .debug_str	00000000 
0003323d l       .debug_str	00000000 
00008a8e l       .debug_str	00000000 
00008a87 l       .debug_str	00000000 
00007ea5 l       .debug_str	00000000 
00008ab5 l       .debug_str	00000000 
00008ae9 l       .debug_str	00000000 
00007eab l       .debug_str	00000000 
0001520f l       .debug_str	00000000 
00007ee9 l       .debug_str	00000000 
00008a92 l       .debug_str	00000000 
00008adf l       .debug_str	00000000 
00007eca l       .debug_str	00000000 
00007eb7 l       .debug_str	00000000 
00007ed0 l       .debug_str	00000000 
00007ef8 l       .debug_str	00000000 
00007efd l       .debug_str	00000000 
00007f02 l       .debug_str	00000000 
00007f08 l       .debug_str	00000000 
00007f10 l       .debug_str	00000000 
00024326 l       .debug_str	00000000 
0001483e l       .debug_str	00000000 
000217c9 l       .debug_str	00000000 
00007f15 l       .debug_str	00000000 
00007f3d l       .debug_str	00000000 
00007f1f l       .debug_str	00000000 
0000555d l       .debug_str	00000000 
00007f46 l       .debug_str	00000000 
00007f45 l       .debug_str	00000000 
000052ec l       .debug_str	00000000 
0000463c l       .debug_str	00000000 
0000747f l       .debug_str	00000000 
00007f4a l       .debug_str	00000000 
00007f52 l       .debug_str	00000000 
0001496c l       .debug_str	00000000 
00007f58 l       .debug_str	00000000 
00007f7f l       .debug_str	00000000 
00007f63 l       .debug_str	00000000 
00007ca3 l       .debug_str	00000000 
00007f87 l       .debug_str	00000000 
00007fa4 l       .debug_str	00000000 
00007f8f l       .debug_str	00000000 
00007fb3 l       .debug_str	00000000 
00007fb7 l       .debug_str	00000000 
00007fc4 l       .debug_str	00000000 
00007fcd l       .debug_str	00000000 
0002d441 l       .debug_str	00000000 
00007fe3 l       .debug_str	00000000 
00007fd7 l       .debug_str	00000000 
00007ff0 l       .debug_str	00000000 
00007ff8 l       .debug_str	00000000 
00008004 l       .debug_str	00000000 
00008027 l       .debug_str	00000000 
00008011 l       .debug_str	00000000 
00008035 l       .debug_str	00000000 
00008055 l       .debug_str	00000000 
00008075 l       .debug_str	00000000 
00008090 l       .debug_str	00000000 
000080ab l       .debug_str	00000000 
000080b1 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
000080c6 l       .debug_str	00000000 
000080b9 l       .debug_str	00000000 
000031ed l       .debug_str	00000000 
000080d7 l       .debug_str	00000000 
000080d6 l       .debug_str	00000000 
00000770 l       .debug_str	00000000 
0000078a l       .debug_str	00000000 
00000796 l       .debug_str	00000000 
0000b916 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00036229 l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
000007a8 l       .debug_str	00000000 
000007af l       .debug_str	00000000 
00033ce2 l       .debug_str	00000000 
000007b8 l       .debug_str	00000000 
00039472 l       .debug_str	00000000 
0000066d l       .debug_str	00000000 
00000672 l       .debug_str	00000000 
00000678 l       .debug_str	00000000 
0000067f l       .debug_str	00000000 
00036c2d l       .debug_str	00000000 
00000e6f l       .debug_str	00000000 
000007bd l       .debug_str	00000000 
000007c7 l       .debug_str	00000000 
000007ce l       .debug_str	00000000 
000007ca l       .debug_str	00000000 
000007d4 l       .debug_str	00000000 
000007dc l       .debug_str	00000000 
0001042f l       .debug_str	00000000 
000007e2 l       .debug_str	00000000 
00000807 l       .debug_str	00000000 
000007ed l       .debug_str	00000000 
00000810 l       .debug_str	00000000 
00000834 l       .debug_str	00000000 
00030d30 l       .debug_str	00000000 
00030b3c l       .debug_str	00000000 
000349cb l       .debug_str	00000000 
0000085b l       .debug_str	00000000 
0000086a l       .debug_str	00000000 
0000086e l       .debug_str	00000000 
000008a6 l       .debug_str	00000000 
000008b2 l       .debug_str	00000000 
000008d7 l       .debug_str	00000000 
000008cb l       .debug_str	00000000 
000008dc l       .debug_str	00000000 
00006c16 l       .debug_str	00000000 
0000065f l       .debug_str	00000000 
00000662 l       .debug_str	00000000 
00000666 l       .debug_str	00000000 
000008e6 l       .debug_str	00000000 
000008ff l       .debug_str	00000000 
00000914 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
0000094f l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
0000096b l       .debug_str	00000000 
00000985 l       .debug_str	00000000 
000009f5 l       .debug_str	00000000 
000009e3 l       .debug_str	00000000 
00000a00 l       .debug_str	00000000 
000083f8 l       .debug_str	00000000 
000083ec l       .debug_str	00000000 
000080eb l       .debug_str	00000000 
000080dc l       .debug_str	00000000 
00030d22 l       .debug_str	00000000 
0002d421 l       .debug_str	00000000 
000031f1 l       .debug_str	00000000 
0000321b l       .debug_str	00000000 
0000320d l       .debug_str	00000000 
000031e7 l       .debug_str	00000000 
000074b7 l       .debug_str	00000000 
00008129 l       .debug_str	00000000 
00008109 l       .debug_str	00000000 
00008182 l       .debug_str	00000000 
00008162 l       .debug_str	00000000 
0002d433 l       .debug_str	00000000 
000081d9 l       .debug_str	00000000 
000081de l       .debug_str	00000000 
000081e4 l       .debug_str	00000000 
00008207 l       .debug_str	00000000 
000081e9 l       .debug_str	00000000 
00008212 l       .debug_str	00000000 
0000825d l       .debug_str	00000000 
0000828e l       .debug_str	00000000 
000082bf l       .debug_str	00000000 
000082ee l       .debug_str	00000000 
0000833f l       .debug_str	00000000 
0000838a l       .debug_str	00000000 
000083bb l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
000083eb l       .debug_str	00000000 
00008402 l       .debug_str	00000000 
00008442 l       .debug_str	00000000 
00008430 l       .debug_str	00000000 
0000842f l       .debug_str	00000000 
0000844d l       .debug_str	00000000 
00008456 l       .debug_str	00000000 
00008463 l       .debug_str	00000000 
00008462 l       .debug_str	00000000 
0000846b l       .debug_str	00000000 
00008498 l       .debug_str	00000000 
00008483 l       .debug_str	00000000 
000084b5 l       .debug_str	00000000 
000084c1 l       .debug_str	00000000 
0000856b l       .debug_str	00000000 
000084cd l       .debug_str	00000000 
000084d4 l       .debug_str	00000000 
000084dd l       .debug_str	00000000 
000084eb l       .debug_str	00000000 
000084f2 l       .debug_str	00000000 
000084fa l       .debug_str	00000000 
00008501 l       .debug_str	00000000 
00008547 l       .debug_str	00000000 
00008522 l       .debug_str	00000000 
0000850d l       .debug_str	00000000 
00008532 l       .debug_str	00000000 
00008556 l       .debug_str	00000000 
00008586 l       .debug_str	00000000 
00008577 l       .debug_str	00000000 
00008591 l       .debug_str	00000000 
000306c6 l       .debug_str	00000000 
000085ba l       .debug_str	00000000 
000085a3 l       .debug_str	00000000 
000085d8 l       .debug_str	00000000 
000085fb l       .debug_str	00000000 
000085e4 l       .debug_str	00000000 
00008645 l       .debug_str	00000000 
00008639 l       .debug_str	00000000 
00007c9e l       .debug_str	00000000 
00008662 l       .debug_str	00000000 
0000864b l       .debug_str	00000000 
000086ab l       .debug_str	00000000 
000086d3 l       .debug_str	00000000 
000086bc l       .debug_str	00000000 
00033cd6 l       .debug_str	00000000 
00001c80 l       .debug_str	00000000 
00035217 l       .debug_str	00000000 
00008782 l       .debug_str	00000000 
00008764 l       .debug_str	00000000 
00008878 l       .debug_str	00000000 
00008858 l       .debug_str	00000000 
000088eb l       .debug_str	00000000 
000088cb l       .debug_str	00000000 
000398a9 l       .debug_str	00000000 
0000893e l       .debug_str	00000000 
00008942 l       .debug_str	00000000 
0003010a l       .debug_str	00000000 
000344bb l       .debug_str	00000000 
00008945 l       .debug_str	00000000 
00008948 l       .debug_str	00000000 
00008a0e l       .debug_str	00000000 
0000894c l       .debug_str	00000000 
0000894b l       .debug_str	00000000 
00008951 l       .debug_str	00000000 
00008a5c l       .debug_str	00000000 
0002ecb0 l       .debug_str	00000000 
0000896f l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008994 l       .debug_str	00000000 
00008a23 l       .debug_str	00000000 
000089b2 l       .debug_str	00000000 
000089a0 l       .debug_str	00000000 
000089d7 l       .debug_str	00000000 
000089f0 l       .debug_str	00000000 
000089de l       .debug_str	00000000 
000089fc l       .debug_str	00000000 
00008a14 l       .debug_str	00000000 
00008a4d l       .debug_str	00000000 
00008a86 l       .debug_str	00000000 
00008a91 l       .debug_str	00000000 
00008ab4 l       .debug_str	00000000 
00008ae8 l       .debug_str	00000000 
00008afe l       .debug_str	00000000 
00008b1d l       .debug_str	00000000 
00008b07 l       .debug_str	00000000 
00008b35 l       .debug_str	00000000 
00008b29 l       .debug_str	00000000 
00008b43 l       .debug_str	00000000 
00008b42 l       .debug_str	00000000 
00000c8d l       .debug_str	00000000 
0000420b l       .debug_str	00000000 
00008b47 l       .debug_str	00000000 
00008b46 l       .debug_str	00000000 
000046c4 l       .debug_str	00000000 
00008b4b l       .debug_str	00000000 
00008b50 l       .debug_str	00000000 
00008b97 l       .debug_str	00000000 
00008ba5 l       .debug_str	00000000 
00008baf l       .debug_str	00000000 
0001a550 l       .debug_str	00000000 
00030874 l       .debug_str	00000000 
00008bb6 l       .debug_str	00000000 
00008bbf l       .debug_str	00000000 
00008bfa l       .debug_str	00000000 
00008c04 l       .debug_str	00000000 
00008c8b l       .debug_str	00000000 
00008c9a l       .debug_str	00000000 
00008d24 l       .debug_str	00000000 
00008da0 l       .debug_str	00000000 
00008dd0 l       .debug_str	00000000 
00005793 l       .debug_str	00000000 
00008e47 l       .debug_str	00000000 
00008e95 l       .debug_str	00000000 
00008ea5 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
00008efe l       .debug_str	00000000 
00008f8c l       .debug_str	00000000 
00008f9b l       .debug_str	00000000 
00008ff0 l       .debug_str	00000000 
00008ff9 l       .debug_str	00000000 
00009042 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
0000904e l       .debug_str	00000000 
00009057 l       .debug_str	00000000 
0000906d l       .debug_str	00000000 
0000907a l       .debug_str	00000000 
000090bf l       .debug_str	00000000 
000090d3 l       .debug_str	00000000 
00005814 l       .debug_str	00000000 
0000911c l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00009161 l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
000091aa l       .debug_str	00000000 
00005083 l       .debug_str	00000000 
000091ef l       .debug_str	00000000 
00009229 l       .debug_str	00000000 
00009232 l       .debug_str	00000000 
0000926f l       .debug_str	00000000 
0000927a l       .debug_str	00000000 
000092c6 l       .debug_str	00000000 
000092de l       .debug_str	00000000 
00009340 l       .debug_str	00000000 
0000587d l       .debug_str	00000000 
00031f23 l       .debug_str	00000000 
00009e77 l       .debug_str	00000000 
00009375 l       .debug_str	00000000 
0000939e l       .debug_str	00000000 
000093a9 l       .debug_str	00000000 
000093ce l       .debug_str	00000000 
000093d2 l       .debug_str	00000000 
00009461 l       .debug_str	00000000 
00009498 l       .debug_str	00000000 
0000951e l       .debug_str	00000000 
00009564 l       .debug_str	00000000 
0000956d l       .debug_str	00000000 
000095f6 l       .debug_str	00000000 
00009609 l       .debug_str	00000000 
00009654 l       .debug_str	00000000 
0000969c l       .debug_str	00000000 
00009722 l       .debug_str	00000000 
00009777 l       .debug_str	00000000 
00009780 l       .debug_str	00000000 
000097dc l       .debug_str	00000000 
0000985f l       .debug_str	00000000 
0000986a l       .debug_str	00000000 
000098f0 l       .debug_str	00000000 
00009965 l       .debug_str	00000000 
00002198 l       .debug_str	00000000 
00009991 l       .debug_str	00000000 
0000999a l       .debug_str	00000000 
000099a3 l       .debug_str	00000000 
000099e2 l       .debug_str	00000000 
00009a87 l       .debug_str	00000000 
00009b10 l       .debug_str	00000000 
00009b1f l       .debug_str	00000000 
00009bb3 l       .debug_str	00000000 
00009bd9 l       .debug_str	00000000 
00009c55 l       .debug_str	00000000 
000054d8 l       .debug_str	00000000 
00009c90 l       .debug_str	00000000 
00009cf5 l       .debug_str	00000000 
00009cfc l       .debug_str	00000000 
00009d5a l       .debug_str	00000000 
00009d6b l       .debug_str	00000000 
00009d78 l       .debug_str	00000000 
00009db1 l       .debug_str	00000000 
00009dc7 l       .debug_str	00000000 
00009e07 l       .debug_str	00000000 
00009e13 l       .debug_str	00000000 
00009e70 l       .debug_str	00000000 
00009e7b l       .debug_str	00000000 
00009eab l       .debug_str	00000000 
00009ed7 l       .debug_str	00000000 
00009f43 l       .debug_str	00000000 
00009f4f l       .debug_str	00000000 
00009f7f l       .debug_str	00000000 
00009fbb l       .debug_str	00000000 
0000a005 l       .debug_str	00000000 
0000a015 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000a04a l       .debug_str	00000000 
0000a08f l       .debug_str	00000000 
0000a09a l       .debug_str	00000000 
0000a0da l       .debug_str	00000000 
0000a0e8 l       .debug_str	00000000 
0000a174 l       .debug_str	00000000 
0000a1f0 l       .debug_str	00000000 
0000a210 l       .debug_str	00000000 
0000a26a l       .debug_str	00000000 
0000a277 l       .debug_str	00000000 
0002194f l       .debug_str	00000000 
0000a2af l       .debug_str	00000000 
0000a2e8 l       .debug_str	00000000 
0003997e l       .debug_str	00000000 
0000a2f0 l       .debug_str	00000000 
00004126 l       .debug_str	00000000 
0000a385 l       .debug_str	00000000 
00008f91 l       .debug_str	00000000 
0000a3cc l       .debug_str	00000000 
0000a444 l       .debug_str	00000000 
0000a47b l       .debug_str	00000000 
0000a4c4 l       .debug_str	00000000 
0000a50f l       .debug_str	00000000 
0000a54e l       .debug_str	00000000 
0000a572 l       .debug_str	00000000 
0000a5ba l       .debug_str	00000000 
0000a5c7 l       .debug_str	00000000 
0000a61e l       .debug_str	00000000 
00032b70 l       .debug_str	00000000 
0000a62a l       .debug_str	00000000 
0000a687 l       .debug_str	00000000 
0000a6b3 l       .debug_str	00000000 
0000a6c0 l       .debug_str	00000000 
0000a727 l       .debug_str	00000000 
00007608 l       .debug_str	00000000 
0000a771 l       .debug_str	00000000 
0000a783 l       .debug_str	00000000 
0000a78d l       .debug_str	00000000 
0000a7cf l       .debug_str	00000000 
0000a856 l       .debug_str	00000000 
0000a864 l       .debug_str	00000000 
0000a8e0 l       .debug_str	00000000 
0000a90d l       .debug_str	00000000 
0000a984 l       .debug_str	00000000 
0000a98d l       .debug_str	00000000 
0000f53f l       .debug_str	00000000 
0000a9d6 l       .debug_str	00000000 
0000aa1c l       .debug_str	00000000 
0000aa24 l       .debug_str	00000000 
0000aab4 l       .debug_str	00000000 
0000aaca l       .debug_str	00000000 
0000aad2 l       .debug_str	00000000 
0000aae7 l       .debug_str	00000000 
0000aaf3 l       .debug_str	00000000 
0000ab38 l       .debug_str	00000000 
0000ab4b l       .debug_str	00000000 
0003833d l       .debug_str	00000000 
0000ab55 l       .debug_str	00000000 
0000ab58 l       .debug_str	00000000 
0000ab90 l       .debug_str	00000000 
0000ab9a l       .debug_str	00000000 
0000abd6 l       .debug_str	00000000 
0000abe3 l       .debug_str	00000000 
0000ac29 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
0000cdcb l       .debug_str	00000000 
0000ac68 l       .debug_str	00000000 
0000acb8 l       .debug_str	00000000 
0000accf l       .debug_str	00000000 
0000ace3 l       .debug_str	00000000 
0000ad40 l       .debug_str	00000000 
0000ad4f l       .debug_str	00000000 
0000add9 l       .debug_str	00000000 
0000ae55 l       .debug_str	00000000 
0000ae84 l       .debug_str	00000000 
0000ae95 l       .debug_str	00000000 
0000aeef l       .debug_str	00000000 
0000aefe l       .debug_str	00000000 
0000af81 l       .debug_str	00000000 
0000af8b l       .debug_str	00000000 
0000b011 l       .debug_str	00000000 
0000b086 l       .debug_str	00000000 
0000b0b1 l       .debug_str	00000000 
0000b13a l       .debug_str	00000000 
0000b179 l       .debug_str	00000000 
0000b1f2 l       .debug_str	00000000 
0000b208 l       .debug_str	00000000 
0000b211 l       .debug_str	00000000 
0000b261 l       .debug_str	00000000 
0000b26b l       .debug_str	00000000 
0000b302 l       .debug_str	00000000 
0000b31a l       .debug_str	00000000 
0000b3b1 l       .debug_str	00000000 
0000b3ea l       .debug_str	00000000 
0000b403 l       .debug_str	00000000 
00007f4f l       .debug_str	00000000 
0000b468 l       .debug_str	00000000 
0000b4b3 l       .debug_str	00000000 
0000b4fa l       .debug_str	00000000 
000058d4 l       .debug_str	00000000 
0000b54f l       .debug_str	00000000 
0000b553 l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
0000b558 l       .debug_str	00000000 
0002fea8 l       .debug_str	00000000 
00005215 l       .debug_str	00000000 
0000b58a l       .debug_str	00000000 
0000525e l       .debug_str	00000000 
0000b5c8 l       .debug_str	00000000 
000052cd l       .debug_str	00000000 
0000b61b l       .debug_str	00000000 
0000b6a7 l       .debug_str	00000000 
0000b6b5 l       .debug_str	00000000 
0000b731 l       .debug_str	00000000 
0000b750 l       .debug_str	00000000 
0000b79b l       .debug_str	00000000 
0000b7a8 l       .debug_str	00000000 
0000b7ea l       .debug_str	00000000 
0000b7fa l       .debug_str	00000000 
0000b86e l       .debug_str	00000000 
0000b88d l       .debug_str	00000000 
0000b8d8 l       .debug_str	00000000 
0000b8f9 l       .debug_str	00000000 
0000b919 l       .debug_str	00000000 
0000b933 l       .debug_str	00000000 
0000b95a l       .debug_str	00000000 
0000b979 l       .debug_str	00000000 
0000b9bb l       .debug_str	00000000 
00012835 l       .debug_str	00000000 
000241aa l       .debug_str	00000000 
0000b9e4 l       .debug_str	00000000 
0000ba00 l       .debug_str	00000000 
0000ba0a l       .debug_str	00000000 
0000ba96 l       .debug_str	00000000 
0000bb12 l       .debug_str	00000000 
0000bb43 l       .debug_str	00000000 
0000bbcf l       .debug_str	00000000 
0000bbe1 l       .debug_str	00000000 
0000bc69 l       .debug_str	00000000 
0000bcde l       .debug_str	00000000 
0000bd0b l       .debug_str	00000000 
0000bd56 l       .debug_str	00000000 
0000bd9e l       .debug_str	00000000 
0000be21 l       .debug_str	00000000 
0000be41 l       .debug_str	00000000 
0000bec7 l       .debug_str	00000000 
0000bf3c l       .debug_str	00000000 
0000bf7d l       .debug_str	00000000 
0000bf87 l       .debug_str	00000000 
0000bfb0 l       .debug_str	00000000 
0000bfbb l       .debug_str	00000000 
0000bfe0 l       .debug_str	00000000 
0000c019 l       .debug_str	00000000 
0000c021 l       .debug_str	00000000 
0000c0f3 l       .debug_str	00000000 
0000c068 l       .debug_str	00000000 
0000c0ee l       .debug_str	00000000 
0000c0fc l       .debug_str	00000000 
0000c13d l       .debug_str	00000000 
0000c160 l       .debug_str	00000000 
0000c19b l       .debug_str	00000000 
0000c1a5 l       .debug_str	00000000 
0000c22f l       .debug_str	00000000 
0000c261 l       .debug_str	00000000 
0000c2d5 l       .debug_str	00000000 
0000c317 l       .debug_str	00000000 
0000c3c0 l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c44d l       .debug_str	00000000 
0000c472 l       .debug_str	00000000 
0000c478 l       .debug_str	00000000 
0000c4c5 l       .debug_str	00000000 
0000c518 l       .debug_str	00000000 
0000c520 l       .debug_str	00000000 
0000c526 l       .debug_str	00000000 
00000660 l       .debug_str	00000000 
0000c52a l       .debug_str	00000000 
0000c533 l       .debug_str	00000000 
0000c598 l       .debug_str	00000000 
0000c5a7 l       .debug_str	00000000 
0000c60c l       .debug_str	00000000 
0000c656 l       .debug_str	00000000 
0000c665 l       .debug_str	00000000 
0000c69b l       .debug_str	00000000 
0000c6a4 l       .debug_str	00000000 
0000c6e8 l       .debug_str	00000000 
0000c6fe l       .debug_str	00000000 
0000c739 l       .debug_str	00000000 
0000c744 l       .debug_str	00000000 
000051e2 l       .debug_str	00000000 
0000c7a7 l       .debug_str	00000000 
00007d07 l       .debug_str	00000000 
0000c808 l       .debug_str	00000000 
000054ce l       .debug_str	00000000 
0000c879 l       .debug_str	00000000 
0000c8db l       .debug_str	00000000 
0000c8e3 l       .debug_str	00000000 
0000c929 l       .debug_str	00000000 
0000c937 l       .debug_str	00000000 
0000c97f l       .debug_str	00000000 
0000c989 l       .debug_str	00000000 
0000c9ca l       .debug_str	00000000 
0000c9e4 l       .debug_str	00000000 
0000c9e9 l       .debug_str	00000000 
0000c9f9 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000ca50 l       .debug_str	00000000 
0000ca98 l       .debug_str	00000000 
0000cae2 l       .debug_str	00000000 
0000caf3 l       .debug_str	00000000 
000104c2 l       .debug_str	00000000 
0000cb8b l       .debug_str	00000000 
00039d5c l       .debug_str	00000000 
0000cc25 l       .debug_str	00000000 
0000cc97 l       .debug_str	00000000 
00000a19 l       .debug_str	00000000 
00000a4b l       .debug_str	00000000 
0000ccc1 l       .debug_str	00000000 
00033d8b l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd1c l       .debug_str	00000000 
0000cd25 l       .debug_str	00000000 
0000cd6e l       .debug_str	00000000 
0000cd7e l       .debug_str	00000000 
0000cdc3 l       .debug_str	00000000 
0000cdcf l       .debug_str	00000000 
0000ce2b l       .debug_str	00000000 
0000ce74 l       .debug_str	00000000 
0000ceb9 l       .debug_str	00000000 
0000cf15 l       .debug_str	00000000 
0000cf5e l       .debug_str	00000000 
0000cfa3 l       .debug_str	00000000 
0000cfff l       .debug_str	00000000 
0000d047 l       .debug_str	00000000 
0000d08b l       .debug_str	00000000 
0000d0e6 l       .debug_str	00000000 
0000d141 l       .debug_str	00000000 
0000d189 l       .debug_str	00000000 
0000d1cd l       .debug_str	00000000 
0000d228 l       .debug_str	00000000 
0000d270 l       .debug_str	00000000 
0000d2b4 l       .debug_str	00000000 
0000d2ff l       .debug_str	00000000 
0000d346 l       .debug_str	00000000 
0000d3a4 l       .debug_str	00000000 
0000d402 l       .debug_str	00000000 
0000d44c l       .debug_str	00000000 
0000d492 l       .debug_str	00000000 
0000d4ef l       .debug_str	00000000 
0000d539 l       .debug_str	00000000 
0000d57f l       .debug_str	00000000 
0000d5dc l       .debug_str	00000000 
0000d626 l       .debug_str	00000000 
0000d66c l       .debug_str	00000000 
0000d6c9 l       .debug_str	00000000 
0000d714 l       .debug_str	00000000 
0000d75b l       .debug_str	00000000 
0000d7b9 l       .debug_str	00000000 
0000d804 l       .debug_str	00000000 
0000d84b l       .debug_str	00000000 
0000d8a9 l       .debug_str	00000000 
0000d8f4 l       .debug_str	00000000 
0000d93b l       .debug_str	00000000 
0000d999 l       .debug_str	00000000 
0000d9e2 l       .debug_str	00000000 
0000da27 l       .debug_str	00000000 
0000da83 l       .debug_str	00000000 
0000dadf l       .debug_str	00000000 
0000db28 l       .debug_str	00000000 
0000db6d l       .debug_str	00000000 
0000dbb6 l       .debug_str	00000000 
0000dbfb l       .debug_str	00000000 
0000dc57 l       .debug_str	00000000 
0000dca0 l       .debug_str	00000000 
0000dce5 l       .debug_str	00000000 
0000dd41 l       .debug_str	00000000 
0000dd8a l       .debug_str	00000000 
0000ddcf l       .debug_str	00000000 
0000de2b l       .debug_str	00000000 
0000de73 l       .debug_str	00000000 
0000deb7 l       .debug_str	00000000 
0000df12 l       .debug_str	00000000 
0000df6d l       .debug_str	00000000 
0000dfb5 l       .debug_str	00000000 
0000dff9 l       .debug_str	00000000 
0000e043 l       .debug_str	00000000 
0000e089 l       .debug_str	00000000 
0000e0e6 l       .debug_str	00000000 
0000e130 l       .debug_str	00000000 
0000e176 l       .debug_str	00000000 
0000e1d3 l       .debug_str	00000000 
0000e21c l       .debug_str	00000000 
0000e261 l       .debug_str	00000000 
0000e2bd l       .debug_str	00000000 
0000e319 l       .debug_str	00000000 
0000e327 l       .debug_str	00000000 
0000e366 l       .debug_str	00000000 
0000e39b l       .debug_str	00000000 
0002f37a l       .debug_str	00000000 
0000e3a5 l       .debug_str	00000000 
0000e3ab l       .debug_str	00000000 
0000e3ba l       .debug_str	00000000 
0000e3f4 l       .debug_str	00000000 
0000755c l       .debug_str	00000000 
0000e3fb l       .debug_str	00000000 
0000e48d l       .debug_str	00000000 
0000e4c6 l       .debug_str	00000000 
0000e4dc l       .debug_str	00000000 
0000e503 l       .debug_str	00000000 
0000e510 l       .debug_str	00000000 
0000e54a l       .debug_str	00000000 
00033a8a l       .debug_str	00000000 
0000e569 l       .debug_str	00000000 
0000e58f l       .debug_str	00000000 
0000e59b l       .debug_str	00000000 
0000e5f5 l       .debug_str	00000000 
0000e603 l       .debug_str	00000000 
0000e69d l       .debug_str	00000000 
0000e6ae l       .debug_str	00000000 
0000e6b8 l       .debug_str	00000000 
0000e75f l       .debug_str	00000000 
0000e798 l       .debug_str	00000000 
0000e79d l       .debug_str	00000000 
0000e7a4 l       .debug_str	00000000 
0000e7da l       .debug_str	00000000 
0000e7ea l       .debug_str	00000000 
0000e7ef l       .debug_str	00000000 
0000e7fe l       .debug_str	00000000 
0000e809 l       .debug_str	00000000 
00035722 l       .debug_str	00000000 
0000e843 l       .debug_str	00000000 
0000e88c l       .debug_str	00000000 
0000e8d3 l       .debug_str	00000000 
0000e908 l       .debug_str	00000000 
0000e912 l       .debug_str	00000000 
0000e94e l       .debug_str	00000000 
0000e95f l       .debug_str	00000000 
0000e998 l       .debug_str	00000000 
0000e9a5 l       .debug_str	00000000 
0000e9b4 l       .debug_str	00000000 
0000c5a0 l       .debug_str	00000000 
0000e9fd l       .debug_str	00000000 
0000ea33 l       .debug_str	00000000 
0000ea3e l       .debug_str	00000000 
0000eaa3 l       .debug_str	00000000 
0000eb03 l       .debug_str	00000000 
0000eb69 l       .debug_str	00000000 
0000ebd0 l       .debug_str	00000000 
0000ec43 l       .debug_str	00000000 
0000eca2 l       .debug_str	00000000 
0000ecad l       .debug_str	00000000 
0000ed14 l       .debug_str	00000000 
0000ed34 l       .debug_str	00000000 
0000ed73 l       .debug_str	00000000 
0000ed92 l       .debug_str	00000000 
000005c4 l       .debug_str	00000000 
0000ee05 l       .debug_str	00000000 
0000ee82 l       .debug_str	00000000 
0000eee7 l       .debug_str	00000000 
0000ef47 l       .debug_str	00000000 
0000efba l       .debug_str	00000000 
0000f037 l       .debug_str	00000000 
0000f0af l       .debug_str	00000000 
0000f0b9 l       .debug_str	00000000 
0000f12e l       .debug_str	00000000 
00030125 l       .debug_str	00000000 
0002e6f8 l       .debug_str	00000000 
000002ff l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000f1a8 l       .debug_str	00000000 
0000f1e4 l       .debug_str	00000000 
0000f1ed l       .debug_str	00000000 
0000f234 l       .debug_str	00000000 
0000f247 l       .debug_str	00000000 
0000f2a5 l       .debug_str	00000000 
0000f2fc l       .debug_str	00000000 
0000f356 l       .debug_str	00000000 
0000f360 l       .debug_str	00000000 
0000f3a3 l       .debug_str	00000000 
0000f3ae l       .debug_str	00000000 
0000f3ba l       .debug_str	00000000 
0002dae8 l       .debug_str	00000000 
0000f3f8 l       .debug_str	00000000 
0000f43a l       .debug_str	00000000 
0000f463 l       .debug_str	00000000 
0000f4a4 l       .debug_str	00000000 
0000f4ae l       .debug_str	00000000 
0000074d l       .debug_str	00000000 
0000f50a l       .debug_str	00000000 
0000f539 l       .debug_str	00000000 
0000f54a l       .debug_str	00000000 
0000f59c l       .debug_str	00000000 
0000f5a3 l       .debug_str	00000000 
0000f5da l       .debug_str	00000000 
0000f5e6 l       .debug_str	00000000 
0000f624 l       .debug_str	00000000 
0000f637 l       .debug_str	00000000 
0000f6af l       .debug_str	00000000 
0000f6ed l       .debug_str	00000000 
0000b1f3 l       .debug_str	00000000 
0000f765 l       .debug_str	00000000 
0000f7b4 l       .debug_str	00000000 
0000f84a l       .debug_str	00000000 
0000f883 l       .debug_str	00000000 
0000f8fb l       .debug_str	00000000 
0000f973 l       .debug_str	00000000 
0000f9c2 l       .debug_str	00000000 
0000fa58 l       .debug_str	00000000 
0000faa3 l       .debug_str	00000000 
0000fabf l       .debug_str	00000000 
0000fb38 l       .debug_str	00000000 
0000fbc1 l       .debug_str	00000000 
0000fbc9 l       .debug_str	00000000 
0000fc19 l       .debug_str	00000000 
0000fcb0 l       .debug_str	00000000 
0000fd47 l       .debug_str	00000000 
0000fd80 l       .debug_str	00000000 
0000fe09 l       .debug_str	00000000 
0000fe82 l       .debug_str	00000000 
0000fed2 l       .debug_str	00000000 
0000ff69 l       .debug_str	00000000 
0000ffa6 l       .debug_str	00000000 
0000ffb5 l       .debug_str	00000000 
00010361 l       .debug_str	00000000 
0000fffe l       .debug_str	00000000 
00014e91 l       .debug_str	00000000 
0001003b l       .debug_str	00000000 
000100b0 l       .debug_str	00000000 
000100d9 l       .debug_str	00000000 
0000544b l       .debug_str	00000000 
0001013d l       .debug_str	00000000 
000101b6 l       .debug_str	00000000 
0000554f l       .debug_str	00000000 
00010227 l       .debug_str	00000000 
0001029b l       .debug_str	00000000 
000102b0 l       .debug_str	00000000 
000102f9 l       .debug_str	00000000 
00010308 l       .debug_str	00000000 
00010359 l       .debug_str	00000000 
00010370 l       .debug_str	00000000 
00013088 l       .debug_str	00000000 
000103d7 l       .debug_str	00000000 
000103e3 l       .debug_str	00000000 
00033a7f l       .debug_str	00000000 
000103e9 l       .debug_str	00000000 
000103f3 l       .debug_str	00000000 
00010425 l       .debug_str	00000000 
00010435 l       .debug_str	00000000 
000104bd l       .debug_str	00000000 
000104c6 l       .debug_str	00000000 
0000592b l       .debug_str	00000000 
00010533 l       .debug_str	00000000 
00010572 l       .debug_str	00000000 
00010581 l       .debug_str	00000000 
000105b3 l       .debug_str	00000000 
000105da l       .debug_str	00000000 
00010644 l       .debug_str	00000000 
000106b4 l       .debug_str	00000000 
000106e2 l       .debug_str	00000000 
000106ee l       .debug_str	00000000 
00010723 l       .debug_str	00000000 
00010736 l       .debug_str	00000000 
0001078a l       .debug_str	00000000 
0001079b l       .debug_str	00000000 
000107eb l       .debug_str	00000000 
0001c0d3 l       .debug_str	00000000 
000107f8 l       .debug_str	00000000 
000107ff l       .debug_str	00000000 
00010810 l       .debug_str	00000000 
0001085f l       .debug_str	00000000 
0001086f l       .debug_str	00000000 
000108c7 l       .debug_str	00000000 
0001091c l       .debug_str	00000000 
000108dc l       .debug_str	00000000 
00010919 l       .debug_str	00000000 
00010926 l       .debug_str	00000000 
000109ba l       .debug_str	00000000 
00010a50 l       .debug_str	00000000 
00010ac2 l       .debug_str	00000000 
00010ae8 l       .debug_str	00000000 
00010b87 l       .debug_str	00000000 
00010b95 l       .debug_str	00000000 
00010c06 l       .debug_str	00000000 
00010c51 l       .debug_str	00000000 
00010c5a l       .debug_str	00000000 
00010cfd l       .debug_str	00000000 
00010d0a l       .debug_str	00000000 
00010d4f l       .debug_str	00000000 
00010d6c l       .debug_str	00000000 
00010e24 l       .debug_str	00000000 
00010e69 l       .debug_str	00000000 
00010e75 l       .debug_str	00000000 
00010e7f l       .debug_str	00000000 
00010e89 l       .debug_str	00000000 
00010ef9 l       .debug_str	00000000 
00010f1e l       .debug_str	00000000 
00010f8d l       .debug_str	00000000 
00010fb3 l       .debug_str	00000000 
00011022 l       .debug_str	00000000 
0001104c l       .debug_str	00000000 
000110d2 l       .debug_str	00000000 
00011164 l       .debug_str	00000000 
0001118c l       .debug_str	00000000 
000111c8 l       .debug_str	00000000 
000111e2 l       .debug_str	00000000 
000111ef l       .debug_str	00000000 
0001122b l       .debug_str	00000000 
00011238 l       .debug_str	00000000 
0002d80f l       .debug_str	00000000 
00011276 l       .debug_str	00000000 
000112bc l       .debug_str	00000000 
00011344 l       .debug_str	00000000 
0001135b l       .debug_str	00000000 
000113b5 l       .debug_str	00000000 
000113fb l       .debug_str	00000000 
00011411 l       .debug_str	00000000 
00011491 l       .debug_str	00000000 
00011a6d l       .debug_str	00000000 
0001149f l       .debug_str	00000000 
000114de l       .debug_str	00000000 
0001151c l       .debug_str	00000000 
000115a6 l       .debug_str	00000000 
000115bb l       .debug_str	00000000 
0001160c l       .debug_str	00000000 
0001161a l       .debug_str	00000000 
0001161f l       .debug_str	00000000 
0001167a l       .debug_str	00000000 
00012188 l       .debug_str	00000000 
000116d1 l       .debug_str	00000000 
00032598 l       .debug_str	00000000 
0003259d l       .debug_str	00000000 
000116db l       .debug_str	00000000 
000116e6 l       .debug_str	00000000 
000116ed l       .debug_str	00000000 
000116fb l       .debug_str	00000000 
00030268 l       .debug_str	00000000 
00010807 l       .debug_str	00000000 
00011740 l       .debug_str	00000000 
00024db8 l       .debug_str	00000000 
00011782 l       .debug_str	00000000 
000117c2 l       .debug_str	00000000 
000117d2 l       .debug_str	00000000 
0001185b l       .debug_str	00000000 
00011895 l       .debug_str	00000000 
000118c4 l       .debug_str	00000000 
00011942 l       .debug_str	00000000 
000119c6 l       .debug_str	00000000 
00011a53 l       .debug_str	00000000 
00011a66 l       .debug_str	00000000 
00011a76 l       .debug_str	00000000 
00011ac2 l       .debug_str	00000000 
00011b05 l       .debug_str	00000000 
00011b9c l       .debug_str	00000000 
00011bb6 l       .debug_str	00000000 
00011bea l       .debug_str	00000000 
00011bfc l       .debug_str	00000000 
00011c35 l       .debug_str	00000000 
00011c55 l       .debug_str	00000000 
00011cd3 l       .debug_str	00000000 
00011cdb l       .debug_str	00000000 
00011d22 l       .debug_str	00000000 
00011d50 l       .debug_str	00000000 
00011dd0 l       .debug_str	00000000 
00011e0f l       .debug_str	00000000 
00011e99 l       .debug_str	00000000 
00011ee5 l       .debug_str	00000000 
00011f01 l       .debug_str	00000000 
00011f0c l       .debug_str	00000000 
00011f6e l       .debug_str	00000000 
00011fc5 l       .debug_str	00000000 
00012052 l       .debug_str	00000000 
0001209e l       .debug_str	00000000 
00012135 l       .debug_str	00000000 
0001217f l       .debug_str	00000000 
00012199 l       .debug_str	00000000 
000121f3 l       .debug_str	00000000 
000121fc l       .debug_str	00000000 
0001225b l       .debug_str	00000000 
000122b2 l       .debug_str	00000000 
0001230b l       .debug_str	00000000 
00012320 l       .debug_str	00000000 
0001236b l       .debug_str	00000000 
0001237e l       .debug_str	00000000 
000123cb l       .debug_str	00000000 
00012416 l       .debug_str	00000000 
00012429 l       .debug_str	00000000 
00012482 l       .debug_str	00000000 
00012497 l       .debug_str	00000000 
000124e2 l       .debug_str	00000000 
000124f5 l       .debug_str	00000000 
00012542 l       .debug_str	00000000 
0001258d l       .debug_str	00000000 
000125a0 l       .debug_str	00000000 
000125d9 l       .debug_str	00000000 
00012603 l       .debug_str	00000000 
00012667 l       .debug_str	00000000 
0001269f l       .debug_str	00000000 
000126ab l       .debug_str	00000000 
000126e8 l       .debug_str	00000000 
0001274a l       .debug_str	00000000 
0001278b l       .debug_str	00000000 
00012794 l       .debug_str	00000000 
000127f2 l       .debug_str	00000000 
0001282b l       .debug_str	00000000 
0001283a l       .debug_str	00000000 
00012879 l       .debug_str	00000000 
0001288e l       .debug_str	00000000 
000128d4 l       .debug_str	00000000 
000128e1 l       .debug_str	00000000 
000128e7 l       .debug_str	00000000 
00012920 l       .debug_str	00000000 
000129ac l       .debug_str	00000000 
000129e8 l       .debug_str	00000000 
00034228 l       .debug_str	00000000 
000129fa l       .debug_str	00000000 
00012a32 l       .debug_str	00000000 
00012a3e l       .debug_str	00000000 
00012a7b l       .debug_str	00000000 
00012add l       .debug_str	00000000 
00012b1e l       .debug_str	00000000 
00012b7c l       .debug_str	00000000 
00012bb6 l       .debug_str	00000000 
00012c10 l       .debug_str	00000000 
00012c59 l       .debug_str	00000000 
00012c69 l       .debug_str	00000000 
00012ca2 l       .debug_str	00000000 
00012d24 l       .debug_str	00000000 
00012d5e l       .debug_str	00000000 
00012db8 l       .debug_str	00000000 
00012df3 l       .debug_str	00000000 
00012e53 l       .debug_str	00000000 
00012e8e l       .debug_str	00000000 
00012eee l       .debug_str	00000000 
00012f2c l       .debug_str	00000000 
00012f8a l       .debug_str	00000000 
00012fc8 l       .debug_str	00000000 
00013026 l       .debug_str	00000000 
00013083 l       .debug_str	00000000 
00013091 l       .debug_str	00000000 
000130ce l       .debug_str	00000000 
000130d9 l       .debug_str	00000000 
00013150 l       .debug_str	00000000 
0001315b l       .debug_str	00000000 
000131dc l       .debug_str	00000000 
00013222 l       .debug_str	00000000 
00013249 l       .debug_str	00000000 
000132df l       .debug_str	00000000 
00013377 l       .debug_str	00000000 
000133e9 l       .debug_str	00000000 
00013411 l       .debug_str	00000000 
000134c7 l       .debug_str	00000000 
0001350c l       .debug_str	00000000 
00001f73 l       .debug_str	00000000 
0001354e l       .debug_str	00000000 
000135a9 l       .debug_str	00000000 
000135dd l       .debug_str	00000000 
000135ef l       .debug_str	00000000 
0001362a l       .debug_str	00000000 
0001362f l       .debug_str	00000000 
00013688 l       .debug_str	00000000 
000136e9 l       .debug_str	00000000 
00013706 l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
00003639 l       .debug_str	00000000 
00003644 l       .debug_str	00000000 
00013748 l       .debug_str	00000000 
00013788 l       .debug_str	00000000 
000137e2 l       .debug_str	00000000 
00013824 l       .debug_str	00000000 
0001387f l       .debug_str	00000000 
000138c1 l       .debug_str	00000000 
000138cc l       .debug_str	00000000 
0003056f l       .debug_str	00000000 
0001390c l       .debug_str	00000000 
00013966 l       .debug_str	00000000 
0001396f l       .debug_str	00000000 
000139b1 l       .debug_str	00000000 
00013a0a l       .debug_str	00000000 
00013a14 l       .debug_str	00000000 
00013a56 l       .debug_str	00000000 
00013a5f l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00013af3 l       .debug_str	00000000 
00013b35 l       .debug_str	00000000 
00013b8d l       .debug_str	00000000 
00013bdc l       .debug_str	00000000 
000008f9 l       .debug_str	00000000 
00013be8 l       .debug_str	00000000 
00013c19 l       .debug_str	00000000 
00013c44 l       .debug_str	00000000 
00013c92 l       .debug_str	00000000 
00013c99 l       .debug_str	00000000 
00013c9d l       .debug_str	00000000 
00013d02 l       .debug_str	00000000 
00013d33 l       .debug_str	00000000 
00013d3e l       .debug_str	00000000 
00013d97 l       .debug_str	00000000 
00013de2 l       .debug_str	00000000 
00013e00 l       .debug_str	00000000 
00013e48 l       .debug_str	00000000 
00013e63 l       .debug_str	00000000 
00013eaa l       .debug_str	00000000 
00013ec6 l       .debug_str	00000000 
00013f54 l       .debug_str	00000000 
00013fa0 l       .debug_str	00000000 
00013fbd l       .debug_str	00000000 
00013fe7 l       .debug_str	00000000 
00014009 l       .debug_str	00000000 
0001401c l       .debug_str	00000000 
00014027 l       .debug_str	00000000 
00014074 l       .debug_str	00000000 
000140b9 l       .debug_str	00000000 
000140f8 l       .debug_str	00000000 
00014144 l       .debug_str	00000000 
000141d3 l       .debug_str	00000000 
00014220 l       .debug_str	00000000 
000142a6 l       .debug_str	00000000 
00039a30 l       .debug_str	00000000 
000142d5 l       .debug_str	00000000 
00014309 l       .debug_str	00000000 
00014312 l       .debug_str	00000000 
00014386 l       .debug_str	00000000 
000143a2 l       .debug_str	00000000 
000143e4 l       .debug_str	00000000 
0001440a l       .debug_str	00000000 
00014440 l       .debug_str	00000000 
00014449 l       .debug_str	00000000 
000144d7 l       .debug_str	00000000 
0001451d l       .debug_str	00000000 
00014564 l       .debug_str	00000000 
000145a9 l       .debug_str	00000000 
000145e8 l       .debug_str	00000000 
0001462e l       .debug_str	00000000 
000146bd l       .debug_str	00000000 
00014704 l       .debug_str	00000000 
0001478a l       .debug_str	00000000 
000147a9 l       .debug_str	00000000 
000147e5 l       .debug_str	00000000 
00014804 l       .debug_str	00000000 
00014839 l       .debug_str	00000000 
00014843 l       .debug_str	00000000 
0003184a l       .debug_str	00000000 
000148ae l       .debug_str	00000000 
000148e3 l       .debug_str	00000000 
000148ed l       .debug_str	00000000 
00014920 l       .debug_str	00000000 
00014928 l       .debug_str	00000000 
00014934 l       .debug_str	00000000 
000395cd l       .debug_str	00000000 
00014968 l       .debug_str	00000000 
00014975 l       .debug_str	00000000 
000149b2 l       .debug_str	00000000 
000149c1 l       .debug_str	00000000 
00014a28 l       .debug_str	00000000 
00014a45 l       .debug_str	00000000 
00014a84 l       .debug_str	00000000 
00014aa0 l       .debug_str	00000000 
00014adc l       .debug_str	00000000 
00014b02 l       .debug_str	00000000 
00014b41 l       .debug_str	00000000 
00014b51 l       .debug_str	00000000 
00014bb8 l       .debug_str	00000000 
00014bc4 l       .debug_str	00000000 
00014c28 l       .debug_str	00000000 
00014c8f l       .debug_str	00000000 
00014cb1 l       .debug_str	00000000 
00014ce8 l       .debug_str	00000000 
00014cfe l       .debug_str	00000000 
00014d4d l       .debug_str	00000000 
00014d59 l       .debug_str	00000000 
00014e2b l       .debug_str	00000000 
00014da0 l       .debug_str	00000000 
00014e26 l       .debug_str	00000000 
00014e4a l       .debug_str	00000000 
00014e85 l       .debug_str	00000000 
00014e95 l       .debug_str	00000000 
000394e3 l       .debug_str	00000000 
00014ed6 l       .debug_str	00000000 
00014f10 l       .debug_str	00000000 
00014f1f l       .debug_str	00000000 
00014f58 l       .debug_str	00000000 
00014f66 l       .debug_str	00000000 
00014f9f l       .debug_str	00000000 
00014fad l       .debug_str	00000000 
00015001 l       .debug_str	00000000 
0001501e l       .debug_str	00000000 
0001506b l       .debug_str	00000000 
00015071 l       .debug_str	00000000 
0001507e l       .debug_str	00000000 
000150b9 l       .debug_str	00000000 
000150e1 l       .debug_str	00000000 
00015143 l       .debug_str	00000000 
0000ea38 l       .debug_str	00000000 
000151ac l       .debug_str	00000000 
00015a5f l       .debug_str	00000000 
000151f9 l       .debug_str	00000000 
00037b5a l       .debug_str	00000000 
00015206 l       .debug_str	00000000 
00015214 l       .debug_str	00000000 
00015225 l       .debug_str	00000000 
00015235 l       .debug_str	00000000 
00015280 l       .debug_str	00000000 
0001528a l       .debug_str	00000000 
0001530d l       .debug_str	00000000 
0001533d l       .debug_str	00000000 
000153c5 l       .debug_str	00000000 
0001543a l       .debug_str	00000000 
0001548d l       .debug_str	00000000 
00015519 l       .debug_str	00000000 
00015551 l       .debug_str	00000000 
0001559c l       .debug_str	00000000 
000155cd l       .debug_str	00000000 
00015615 l       .debug_str	00000000 
00015643 l       .debug_str	00000000 
00015697 l       .debug_str	00000000 
000156bd l       .debug_str	00000000 
00015711 l       .debug_str	00000000 
00033fd3 l       .debug_str	00000000 
000357a7 l       .debug_str	00000000 
00015719 l       .debug_str	00000000 
0001571f l       .debug_str	00000000 
00015728 l       .debug_str	00000000 
00015760 l       .debug_str	00000000 
0001577d l       .debug_str	00000000 
000157b9 l       .debug_str	00000000 
000157d6 l       .debug_str	00000000 
00015832 l       .debug_str	00000000 
0001586a l       .debug_str	00000000 
000158c6 l       .debug_str	00000000 
000158fe l       .debug_str	00000000 
0001590a l       .debug_str	00000000 
00015948 l       .debug_str	00000000 
00015962 l       .debug_str	00000000 
000159b8 l       .debug_str	00000000 
00015a1f l       .debug_str	00000000 
00015a57 l       .debug_str	00000000 
00015a63 l       .debug_str	00000000 
00015aca l       .debug_str	00000000 
00015b03 l       .debug_str	00000000 
00015b42 l       .debug_str	00000000 
000325a2 l       .debug_str	00000000 
00015b53 l       .debug_str	00000000 
00015b56 l       .debug_str	00000000 
00015b59 l       .debug_str	00000000 
000116f2 l       .debug_str	00000000 
00015b5c l       .debug_str	00000000 
00015bd0 l       .debug_str	00000000 
00015bdf l       .debug_str	00000000 
00015c2a l       .debug_str	00000000 
00015c42 l       .debug_str	00000000 
00015c3b l       .debug_str	00000000 
00015c4b l       .debug_str	00000000 
00015c55 l       .debug_str	00000000 
00015c6c l       .debug_str	00000000 
00015c7b l       .debug_str	00000000 
00015cbd l       .debug_str	00000000 
00015cd6 l       .debug_str	00000000 
00015d55 l       .debug_str	00000000 
00015d74 l       .debug_str	00000000 
00015dd8 l       .debug_str	00000000 
00015e36 l       .debug_str	00000000 
00015e46 l       .debug_str	00000000 
00015e7f l       .debug_str	00000000 
00015e93 l       .debug_str	00000000 
00015ed3 l       .debug_str	00000000 
00015ede l       .debug_str	00000000 
00015f1a l       .debug_str	00000000 
00015f25 l       .debug_str	00000000 
00015f36 l       .debug_str	00000000 
00015f8a l       .debug_str	00000000 
00015fb6 l       .debug_str	00000000 
00015fc2 l       .debug_str	00000000 
0001600f l       .debug_str	00000000 
00016022 l       .debug_str	00000000 
0003392c l       .debug_str	00000000 
0001608d l       .debug_str	00000000 
000160a2 l       .debug_str	00000000 
000160ac l       .debug_str	00000000 
0003689d l       .debug_str	00000000 
000160b1 l       .debug_str	00000000 
000160e2 l       .debug_str	00000000 
000160f5 l       .debug_str	00000000 
00016126 l       .debug_str	00000000 
0001613a l       .debug_str	00000000 
00016145 l       .debug_str	00000000 
00016163 l       .debug_str	00000000 
0001619e l       .debug_str	00000000 
000161d4 l       .debug_str	00000000 
00016205 l       .debug_str	00000000 
00016219 l       .debug_str	00000000 
00016262 l       .debug_str	00000000 
000162a7 l       .debug_str	00000000 
000057cb l       .debug_str	00000000 
00005830 l       .debug_str	00000000 
00016303 l       .debug_str	00000000 
0001635f l       .debug_str	00000000 
0001636a l       .debug_str	00000000 
00016388 l       .debug_str	00000000 
000163c3 l       .debug_str	00000000 
000163f9 l       .debug_str	00000000 
0001642a l       .debug_str	00000000 
0001643e l       .debug_str	00000000 
00016449 l       .debug_str	00000000 
00016467 l       .debug_str	00000000 
000164a2 l       .debug_str	00000000 
000164d8 l       .debug_str	00000000 
00016509 l       .debug_str	00000000 
0001ecb8 l       .debug_str	00000000 
0001651e l       .debug_str	00000000 
0001652a l       .debug_str	00000000 
00016549 l       .debug_str	00000000 
00016584 l       .debug_str	00000000 
000165bb l       .debug_str	00000000 
000165ec l       .debug_str	00000000 
000165ff l       .debug_str	00000000 
00016609 l       .debug_str	00000000 
00016626 l       .debug_str	00000000 
00016661 l       .debug_str	00000000 
00016696 l       .debug_str	00000000 
000166c7 l       .debug_str	00000000 
000166db l       .debug_str	00000000 
000166e6 l       .debug_str	00000000 
00016704 l       .debug_str	00000000 
0001673f l       .debug_str	00000000 
00016775 l       .debug_str	00000000 
000167a6 l       .debug_str	00000000 
000167ba l       .debug_str	00000000 
00016803 l       .debug_str	00000000 
00016848 l       .debug_str	00000000 
000168a4 l       .debug_str	00000000 
000168ed l       .debug_str	00000000 
00016932 l       .debug_str	00000000 
0001698e l       .debug_str	00000000 
000169d7 l       .debug_str	00000000 
00016a1c l       .debug_str	00000000 
00016a78 l       .debug_str	00000000 
00016a83 l       .debug_str	00000000 
00016aa1 l       .debug_str	00000000 
00016adc l       .debug_str	00000000 
00016b12 l       .debug_str	00000000 
00016b81 l       .debug_str	00000000 
00016bbc l       .debug_str	00000000 
00016bed l       .debug_str	00000000 
00016c01 l       .debug_str	00000000 
00016c0c l       .debug_str	00000000 
00016c2a l       .debug_str	00000000 
00016c65 l       .debug_str	00000000 
00016c9b l       .debug_str	00000000 
00016d0a l       .debug_str	00000000 
00016d45 l       .debug_str	00000000 
00016d76 l       .debug_str	00000000 
00016d8b l       .debug_str	00000000 
00016d90 l       .debug_str	00000000 
00016d9c l       .debug_str	00000000 
00016dbb l       .debug_str	00000000 
00016df6 l       .debug_str	00000000 
00016e2d l       .debug_str	00000000 
00016e9c l       .debug_str	00000000 
00016ed8 l       .debug_str	00000000 
00016f10 l       .debug_str	00000000 
00016f1c l       .debug_str	00000000 
00016f59 l       .debug_str	00000000 
00016fe2 l       .debug_str	00000000 
0001703c l       .debug_str	00000000 
000170bc l       .debug_str	00000000 
00017128 l       .debug_str	00000000 
000171b3 l       .debug_str	00000000 
00017224 l       .debug_str	00000000 
00017264 l       .debug_str	00000000 
000172d4 l       .debug_str	00000000 
00017315 l       .debug_str	00000000 
00017378 l       .debug_str	00000000 
000173b7 l       .debug_str	00000000 
000173c8 l       .debug_str	00000000 
000173d3 l       .debug_str	00000000 
0001742e l       .debug_str	00000000 
00017437 l       .debug_str	00000000 
000174e0 l       .debug_str	00000000 
00017554 l       .debug_str	00000000 
000175b3 l       .debug_str	00000000 
00017432 l       .debug_str	00000000 
0001761c l       .debug_str	00000000 
0001767a l       .debug_str	00000000 
000176f1 l       .debug_str	00000000 
000176fc l       .debug_str	00000000 
00017743 l       .debug_str	00000000 
0001774d l       .debug_str	00000000 
00017796 l       .debug_str	00000000 
000177a2 l       .debug_str	00000000 
00017816 l       .debug_str	00000000 
00017898 l       .debug_str	00000000 
000178b5 l       .debug_str	00000000 
00017955 l       .debug_str	00000000 
00017979 l       .debug_str	00000000 
000179b2 l       .debug_str	00000000 
000179d2 l       .debug_str	00000000 
00017a2c l       .debug_str	00000000 
00017a39 l       .debug_str	00000000 
00017aab l       .debug_str	00000000 
00017b0f l       .debug_str	00000000 
00017b1a l       .debug_str	00000000 
00017b93 l       .debug_str	00000000 
00017b9f l       .debug_str	00000000 
00017c1b l       .debug_str	00000000 
00017c21 l       .debug_str	00000000 
00017c28 l       .debug_str	00000000 
00017c64 l       .debug_str	00000000 
00017cdc l       .debug_str	00000000 
00017d12 l       .debug_str	00000000 
00017d5b l       .debug_str	00000000 
00017da5 l       .debug_str	00000000 
00017de4 l       .debug_str	00000000 
00017e07 l       .debug_str	00000000 
00017e62 l       .debug_str	00000000 
00017ebf l       .debug_str	00000000 
00017eea l       .debug_str	00000000 
00017f51 l       .debug_str	00000000 
00017f9a l       .debug_str	00000000 
00018023 l       .debug_str	00000000 
0001807c l       .debug_str	00000000 
000180fc l       .debug_str	00000000 
00018167 l       .debug_str	00000000 
000181f2 l       .debug_str	00000000 
00018262 l       .debug_str	00000000 
000182a2 l       .debug_str	00000000 
00018311 l       .debug_str	00000000 
00018352 l       .debug_str	00000000 
000183b4 l       .debug_str	00000000 
000183f3 l       .debug_str	00000000 
00018452 l       .debug_str	00000000 
000184fb l       .debug_str	00000000 
0001856e l       .debug_str	00000000 
000185cd l       .debug_str	00000000 
00018635 l       .debug_str	00000000 
00018693 l       .debug_str	00000000 
00018709 l       .debug_str	00000000 
00018746 l       .debug_str	00000000 
000187d5 l       .debug_str	00000000 
0001880a l       .debug_str	00000000 
00018890 l       .debug_str	00000000 
00018919 l       .debug_str	00000000 
0001896d l       .debug_str	00000000 
000053a1 l       .debug_str	00000000 
000189bb l       .debug_str	00000000 
00018a49 l       .debug_str	00000000 
00018a9d l       .debug_str	00000000 
00018adc l       .debug_str	00000000 
00018b27 l       .debug_str	00000000 
00018b70 l       .debug_str	00000000 
00018b7b l       .debug_str	00000000 
00018bfd l       .debug_str	00000000 
00018c19 l       .debug_str	00000000 
00018cb9 l       .debug_str	00000000 
00018cdc l       .debug_str	00000000 
00018d15 l       .debug_str	00000000 
00018d33 l       .debug_str	00000000 
00018d8c l       .debug_str	00000000 
00018de5 l       .debug_str	00000000 
00018e22 l       .debug_str	00000000 
00018e83 l       .debug_str	00000000 
00018ef4 l       .debug_str	00000000 
00018f24 l       .debug_str	00000000 
00018f6a l       .debug_str	00000000 
00018fdc l       .debug_str	00000000 
00019070 l       .debug_str	00000000 
00019094 l       .debug_str	00000000 
00019110 l       .debug_str	00000000 
0001914a l       .debug_str	00000000 
00019189 l       .debug_str	00000000 
0001922c l       .debug_str	00000000 
00019265 l       .debug_str	00000000 
000192c1 l       .debug_str	00000000 
0001933d l       .debug_str	00000000 
00019395 l       .debug_str	00000000 
000193b5 l       .debug_str	00000000 
0001940e l       .debug_str	00000000 
00019467 l       .debug_str	00000000 
000194c0 l       .debug_str	00000000 
0001951a l       .debug_str	00000000 
00019550 l       .debug_str	00000000 
00019560 l       .debug_str	00000000 
0001956f l       .debug_str	00000000 
00019578 l       .debug_str	00000000 
000195af l       .debug_str	00000000 
000195eb l       .debug_str	00000000 
000195fb l       .debug_str	00000000 
00019657 l       .debug_str	00000000 
000196b9 l       .debug_str	00000000 
0000a273 l       .debug_str	00000000 
00019703 l       .debug_str	00000000 
0001973e l       .debug_str	00000000 
00019763 l       .debug_str	00000000 
000197c2 l       .debug_str	00000000 
0001980c l       .debug_str	00000000 
00019847 l       .debug_str	00000000 
0001986c l       .debug_str	00000000 
000198cb l       .debug_str	00000000 
00019934 l       .debug_str	00000000 
0001993d l       .debug_str	00000000 
00003775 l       .debug_str	00000000 
00019974 l       .debug_str	00000000 
000199d6 l       .debug_str	00000000 
00019a35 l       .debug_str	00000000 
00019a94 l       .debug_str	00000000 
00019aca l       .debug_str	00000000 
00019adb l       .debug_str	00000000 
00019aeb l       .debug_str	00000000 
00019af5 l       .debug_str	00000000 
00019b2d l       .debug_str	00000000 
00019b8a l       .debug_str	00000000 
00019bed l       .debug_str	00000000 
00019c38 l       .debug_str	00000000 
00019c73 l       .debug_str	00000000 
00019c99 l       .debug_str	00000000 
00019cf9 l       .debug_str	00000000 
00019d44 l       .debug_str	00000000 
00019d7f l       .debug_str	00000000 
00019da5 l       .debug_str	00000000 
00019e05 l       .debug_str	00000000 
00019e3b l       .debug_str	00000000 
00019e4c l       .debug_str	00000000 
00019e5c l       .debug_str	00000000 
00019e66 l       .debug_str	00000000 
00019e9e l       .debug_str	00000000 
00019efb l       .debug_str	00000000 
00019f5e l       .debug_str	00000000 
00019fbe l       .debug_str	00000000 
0001a01e l       .debug_str	00000000 
0001a054 l       .debug_str	00000000 
0001a065 l       .debug_str	00000000 
0001a075 l       .debug_str	00000000 
0001a07f l       .debug_str	00000000 
00003718 l       .debug_str	00000000 
0001a0b7 l       .debug_str	00000000 
0001a11a l       .debug_str	00000000 
0001a165 l       .debug_str	00000000 
0001a1a0 l       .debug_str	00000000 
0001a1c6 l       .debug_str	00000000 
0001a226 l       .debug_str	00000000 
0001a271 l       .debug_str	00000000 
0001a2ac l       .debug_str	00000000 
0001a2d2 l       .debug_str	00000000 
0001a332 l       .debug_str	00000000 
0001a368 l       .debug_str	00000000 
0001a379 l       .debug_str	00000000 
0001a389 l       .debug_str	00000000 
0001a393 l       .debug_str	00000000 
00003821 l       .debug_str	00000000 
0001a3cb l       .debug_str	00000000 
0001a42e l       .debug_str	00000000 
0001a48e l       .debug_str	00000000 
0001a4ee l       .debug_str	00000000 
0001a524 l       .debug_str	00000000 
000051fa l       .debug_str	00000000 
0001a537 l       .debug_str	00000000 
0001a549 l       .debug_str	00000000 
0001a555 l       .debug_str	00000000 
0001a590 l       .debug_str	00000000 
0001a5ef l       .debug_str	00000000 
0001a654 l       .debug_str	00000000 
0001a6b6 l       .debug_str	00000000 
0001a6f1 l       .debug_str	00000000 
0001a719 l       .debug_str	00000000 
0001a77b l       .debug_str	00000000 
0001a7b1 l       .debug_str	00000000 
0001a7c4 l       .debug_str	00000000 
0001a7d6 l       .debug_str	00000000 
0001a7e2 l       .debug_str	00000000 
0001a81d l       .debug_str	00000000 
0001a881 l       .debug_str	00000000 
0001a8a0 l       .debug_str	00000000 
0001a902 l       .debug_str	00000000 
0001a968 l       .debug_str	00000000 
0001a9e8 l       .debug_str	00000000 
0001aa37 l       .debug_str	00000000 
0001aaad l       .debug_str	00000000 
0001ab23 l       .debug_str	00000000 
0001abf8 l       .debug_str	00000000 
0001ac55 l       .debug_str	00000000 
0001acb3 l       .debug_str	00000000 
0001ad14 l       .debug_str	00000000 
0001ad1e l       .debug_str	00000000 
0001ad75 l       .debug_str	00000000 
0001ade2 l       .debug_str	00000000 
0001ae1d l       .debug_str	00000000 
0001ae9d l       .debug_str	00000000 
0001af0c l       .debug_str	00000000 
0001af8a l       .debug_str	00000000 
0001afdd l       .debug_str	00000000 
0001b04b l       .debug_str	00000000 
0001b0e3 l       .debug_str	00000000 
0001b170 l       .debug_str	00000000 
0001b1fe l       .debug_str	00000000 
0001b28c l       .debug_str	00000000 
0001b39a l       .debug_str	00000000 
0001b40e l       .debug_str	00000000 
0001b44e l       .debug_str	00000000 
0001b497 l       .debug_str	00000000 
0001b4ef l       .debug_str	00000000 
0001b533 l       .debug_str	00000000 
0001b595 l       .debug_str	00000000 
0001b60e l       .debug_str	00000000 
0001b675 l       .debug_str	00000000 
0001b6cc l       .debug_str	00000000 
0001b756 l       .debug_str	00000000 
0001b773 l       .debug_str	00000000 
0001b7fd l       .debug_str	00000000 
0001b81f l       .debug_str	00000000 
0001b863 l       .debug_str	00000000 
0001b8d3 l       .debug_str	00000000 
0001b989 l       .debug_str	00000000 
0001ba19 l       .debug_str	00000000 
0001bab1 l       .debug_str	00000000 
0001bb5e l       .debug_str	00000000 
0001bbf4 l       .debug_str	00000000 
0001bc85 l       .debug_str	00000000 
0001bcc9 l       .debug_str	00000000 
0001bd1a l       .debug_str	00000000 
0001bd9e l       .debug_str	00000000 
0001be2a l       .debug_str	00000000 
0001beaf l       .debug_str	00000000 
0001beb4 l       .debug_str	00000000 
0001bf40 l       .debug_str	00000000 
0001bf49 l       .debug_str	00000000 
0001bfeb l       .debug_str	00000000 
0001c07a l       .debug_str	00000000 
0001c0cc l       .debug_str	00000000 
0001c0db l       .debug_str	00000000 
0001c122 l       .debug_str	00000000 
0001c1d8 l       .debug_str	00000000 
0001c288 l       .debug_str	00000000 
0001c2f5 l       .debug_str	00000000 
0001c32a l       .debug_str	00000000 
0001c3aa l       .debug_str	00000000 
0001c415 l       .debug_str	00000000 
0001c493 l       .debug_str	00000000 
0001c4e2 l       .debug_str	00000000 
0001c541 l       .debug_str	00000000 
0001c5a5 l       .debug_str	00000000 
0001c5c6 l       .debug_str	00000000 
0001c65e l       .debug_str	00000000 
0001c702 l       .debug_str	00000000 
0001c798 l       .debug_str	00000000 
0001c820 l       .debug_str	00000000 
0001c896 l       .debug_str	00000000 
0001c8df l       .debug_str	00000000 
0001c939 l       .debug_str	00000000 
0001c97d l       .debug_str	00000000 
0001c9dc l       .debug_str	00000000 
0001ca57 l       .debug_str	00000000 
0001cabe l       .debug_str	00000000 
0001cb17 l       .debug_str	00000000 
0001cba1 l       .debug_str	00000000 
0001cbe5 l       .debug_str	00000000 
0001cc69 l       .debug_str	00000000 
0001ccf1 l       .debug_str	00000000 
0001cd43 l       .debug_str	00000000 
0001cdc1 l       .debug_str	00000000 
0001ce46 l       .debug_str	00000000 
0001cee8 l       .debug_str	00000000 
0001cf73 l       .debug_str	00000000 
0001d029 l       .debug_str	00000000 
0001d0d0 l       .debug_str	00000000 
0001d13d l       .debug_str	00000000 
0001d172 l       .debug_str	00000000 
0001d1f2 l       .debug_str	00000000 
0001d25d l       .debug_str	00000000 
0001d2db l       .debug_str	00000000 
0001d32a l       .debug_str	00000000 
0001d389 l       .debug_str	00000000 
0001d3ed l       .debug_str	00000000 
0001d40e l       .debug_str	00000000 
0001d4a6 l       .debug_str	00000000 
0001d54a l       .debug_str	00000000 
0001d5e0 l       .debug_str	00000000 
0001d668 l       .debug_str	00000000 
0001d6de l       .debug_str	00000000 
0001d727 l       .debug_str	00000000 
0001d781 l       .debug_str	00000000 
0001d7c5 l       .debug_str	00000000 
0001d824 l       .debug_str	00000000 
0001d89f l       .debug_str	00000000 
0001d906 l       .debug_str	00000000 
0001d95f l       .debug_str	00000000 
0001d9e9 l       .debug_str	00000000 
0001da2d l       .debug_str	00000000 
0001dab1 l       .debug_str	00000000 
0001db39 l       .debug_str	00000000 
0001dbb7 l       .debug_str	00000000 
0001dc3c l       .debug_str	00000000 
0001dcde l       .debug_str	00000000 
0001dd69 l       .debug_str	00000000 
0001de1f l       .debug_str	00000000 
0001dec6 l       .debug_str	00000000 
0001df06 l       .debug_str	00000000 
0001df23 l       .debug_str	00000000 
0001df67 l       .debug_str	00000000 
0001df88 l       .debug_str	00000000 
0001dfc8 l       .debug_str	00000000 
0001dfe5 l       .debug_str	00000000 
0001e029 l       .debug_str	00000000 
0001e04a l       .debug_str	00000000 
0001e0ac l       .debug_str	00000000 
0001e113 l       .debug_str	00000000 
0001e14e l       .debug_str	00000000 
0001e171 l       .debug_str	00000000 
0001e1d7 l       .debug_str	00000000 
0001e212 l       .debug_str	00000000 
0001e234 l       .debug_str	00000000 
0001e26f l       .debug_str	00000000 
0001e293 l       .debug_str	00000000 
0001e2ce l       .debug_str	00000000 
0001e2f1 l       .debug_str	00000000 
0001e32c l       .debug_str	00000000 
0001e350 l       .debug_str	00000000 
0001e38b l       .debug_str	00000000 
0001e3ae l       .debug_str	00000000 
0001e3f7 l       .debug_str	00000000 
0001e43d l       .debug_str	00000000 
0001e488 l       .debug_str	00000000 
0001e4bb l       .debug_str	00000000 
0001e4f6 l       .debug_str	00000000 
0001e51a l       .debug_str	00000000 
0001e5a6 l       .debug_str	00000000 
0001e5da l       .debug_str	00000000 
0001e656 l       .debug_str	00000000 
0001e69b l       .debug_str	00000000 
0001e6e6 l       .debug_str	00000000 
0001e748 l       .debug_str	00000000 
0001e783 l       .debug_str	00000000 
0001e7a6 l       .debug_str	00000000 
0001e7e1 l       .debug_str	00000000 
0001e807 l       .debug_str	00000000 
0001e852 l       .debug_str	00000000 
0001e88d l       .debug_str	00000000 
0001e8b3 l       .debug_str	00000000 
0001e8ee l       .debug_str	00000000 
0001e913 l       .debug_str	00000000 
0001e95f l       .debug_str	00000000 
0001e9c2 l       .debug_str	00000000 
0001e9fd l       .debug_str	00000000 
0001ea21 l       .debug_str	00000000 
0001ea5c l       .debug_str	00000000 
0001ea83 l       .debug_str	00000000 
0001eacf l       .debug_str	00000000 
0001eb0a l       .debug_str	00000000 
0001eb31 l       .debug_str	00000000 
0001eb7c l       .debug_str	00000000 
0001ebc8 l       .debug_str	00000000 
0001ec14 l       .debug_str	00000000 
0001ec60 l       .debug_str	00000000 
0001ec67 l       .debug_str	00000000 
0001ecb5 l       .debug_str	00000000 
0001ecbd l       .debug_str	00000000 
0001ed26 l       .debug_str	00000000 
0001ed59 l       .debug_str	00000000 
0001edd7 l       .debug_str	00000000 
0001ede9 l       .debug_str	00000000 
0001ee4e l       .debug_str	00000000 
0001ee70 l       .debug_str	00000000 
0001eecf l       .debug_str	00000000 
0001ef1a l       .debug_str	00000000 
0001ef74 l       .debug_str	00000000 
0001efe7 l       .debug_str	00000000 
0001eff4 l       .debug_str	00000000 
0001f059 l       .debug_str	00000000 
0001f0cb l       .debug_str	00000000 
0001f118 l       .debug_str	00000000 
0001f14f l       .debug_str	00000000 
0001f15a l       .debug_str	00000000 
00003819 l       .debug_str	00000000 
0001f1a8 l       .debug_str	00000000 
0001f1f0 l       .debug_str	00000000 
0001f1fa l       .debug_str	00000000 
0001f236 l       .debug_str	00000000 
0001f259 l       .debug_str	00000000 
0001f293 l       .debug_str	00000000 
0001f2ce l       .debug_str	00000000 
0001f33a l       .debug_str	00000000 
0001f37f l       .debug_str	00000000 
0001f3df l       .debug_str	00000000 
0001f3fe l       .debug_str	00000000 
0001f45e l       .debug_str	00000000 
0001f479 l       .debug_str	00000000 
0001f4d0 l       .debug_str	00000000 
0001f518 l       .debug_str	00000000 
0001f532 l       .debug_str	00000000 
0001f591 l       .debug_str	00000000 
0001f5f1 l       .debug_str	00000000 
0001f610 l       .debug_str	00000000 
0001f682 l       .debug_str	00000000 
0001f755 l       .debug_str	00000000 
0000364f l       .debug_str	00000000 
0001f7b4 l       .debug_str	00000000 
0001f817 l       .debug_str	00000000 
0001f877 l       .debug_str	00000000 
0001f8d7 l       .debug_str	00000000 
0001f940 l       .debug_str	00000000 
0001f97d l       .debug_str	00000000 
0001f9e0 l       .debug_str	00000000 
0001fa4e l       .debug_str	00000000 
0001fab3 l       .debug_str	00000000 
0001fb1d l       .debug_str	00000000 
0001fb7a l       .debug_str	00000000 
0001fbb8 l       .debug_str	00000000 
0001fbc7 l       .debug_str	00000000 
0001fc02 l       .debug_str	00000000 
0001fc0f l       .debug_str	00000000 
0001fc71 l       .debug_str	00000000 
0001fc8e l       .debug_str	00000000 
0001fcf7 l       .debug_str	00000000 
0001fd87 l       .debug_str	00000000 
0001fde1 l       .debug_str	00000000 
0001fe49 l       .debug_str	00000000 
0001fe64 l       .debug_str	00000000 
0001feb7 l       .debug_str	00000000 
0001ff05 l       .debug_str	00000000 
0001ff0f l       .debug_str	00000000 
0001ff57 l       .debug_str	00000000 
0001ff63 l       .debug_str	00000000 
0001ffd7 l       .debug_str	00000000 
0001ffe2 l       .debug_str	00000000 
0002001e l       .debug_str	00000000 
00020045 l       .debug_str	00000000 
00020090 l       .debug_str	00000000 
0002009d l       .debug_str	00000000 
000200b0 l       .debug_str	00000000 
000200bb l       .debug_str	00000000 
000200fd l       .debug_str	00000000 
00020112 l       .debug_str	00000000 
0002015a l       .debug_str	00000000 
000201bd l       .debug_str	00000000 
000201df l       .debug_str	00000000 
0002022f l       .debug_str	00000000 
0002029c l       .debug_str	00000000 
0002030c l       .debug_str	00000000 
00020354 l       .debug_str	00000000 
0002035d l       .debug_str	00000000 
000203d7 l       .debug_str	00000000 
00020424 l       .debug_str	00000000 
0002049e l       .debug_str	00000000 
000204eb l       .debug_str	00000000 
0002053d l       .debug_str	00000000 
0002059b l       .debug_str	00000000 
00003123 l       .debug_str	00000000 
000205e3 l       .debug_str	00000000 
00020640 l       .debug_str	00000000 
000206a3 l       .debug_str	00000000 
00020703 l       .debug_str	00000000 
00020763 l       .debug_str	00000000 
000207c3 l       .debug_str	00000000 
0002081f l       .debug_str	00000000 
0002087f l       .debug_str	00000000 
000208f9 l       .debug_str	00000000 
0002094a l       .debug_str	00000000 
0002e730 l       .debug_str	00000000 
00020994 l       .debug_str	00000000 
0002099e l       .debug_str	00000000 
000209a2 l       .debug_str	00000000 
000209a6 l       .debug_str	00000000 
000209ab l       .debug_str	00000000 
000209e0 l       .debug_str	00000000 
00020a06 l       .debug_str	00000000 
00020a3b l       .debug_str	00000000 
00020a6f l       .debug_str	00000000 
00020aa4 l       .debug_str	00000000 
00020ac9 l       .debug_str	00000000 
00020afe l       .debug_str	00000000 
00020b17 l       .debug_str	00000000 
00020b4c l       .debug_str	00000000 
00020b81 l       .debug_str	00000000 
00020bb6 l       .debug_str	00000000 
00020bf4 l       .debug_str	00000000 
00020c29 l       .debug_str	00000000 
00020cb4 l       .debug_str	00000000 
00020ce9 l       .debug_str	00000000 
00020d34 l       .debug_str	00000000 
00020d69 l       .debug_str	00000000 
00020dc0 l       .debug_str	00000000 
00020df5 l       .debug_str	00000000 
00020e2a l       .debug_str	00000000 
00020e9b l       .debug_str	00000000 
00020eae l       .debug_str	00000000 
00020f1f l       .debug_str	00000000 
00020f62 l       .debug_str	00000000 
00020f6c l       .debug_str	00000000 
00020fb6 l       .debug_str	00000000 
00020ffd l       .debug_str	00000000 
0002104a l       .debug_str	00000000 
00021094 l       .debug_str	00000000 
000210c6 l       .debug_str	00000000 
000210fa l       .debug_str	00000000 
00021133 l       .debug_str	00000000 
0002116f l       .debug_str	00000000 
00021181 l       .debug_str	00000000 
000211c2 l       .debug_str	00000000 
000211cf l       .debug_str	00000000 
0002120e l       .debug_str	00000000 
00021219 l       .debug_str	00000000 
00021255 l       .debug_str	00000000 
00021263 l       .debug_str	00000000 
00021297 l       .debug_str	00000000 
000212d3 l       .debug_str	00000000 
0002132f l       .debug_str	00000000 
00021336 l       .debug_str	00000000 
00021394 l       .debug_str	00000000 
0002139d l       .debug_str	00000000 
00021404 l       .debug_str	00000000 
00021415 l       .debug_str	00000000 
00021472 l       .debug_str	00000000 
0002147a l       .debug_str	00000000 
000214d9 l       .debug_str	00000000 
000214e3 l       .debug_str	00000000 
0002153f l       .debug_str	00000000 
0002159d l       .debug_str	00000000 
00021604 l       .debug_str	00000000 
00021661 l       .debug_str	00000000 
000216c0 l       .debug_str	00000000 
000216f9 l       .debug_str	00000000 
00021703 l       .debug_str	00000000 
0002173e l       .debug_str	00000000 
0002177c l       .debug_str	00000000 
0002178a l       .debug_str	00000000 
000217c3 l       .debug_str	00000000 
000217cd l       .debug_str	00000000 
00021835 l       .debug_str	00000000 
00021868 l       .debug_str	00000000 
00021872 l       .debug_str	00000000 
000218a8 l       .debug_str	00000000 
000218b4 l       .debug_str	00000000 
000218eb l       .debug_str	00000000 
000218f8 l       .debug_str	00000000 
0002193c l       .debug_str	00000000 
00021956 l       .debug_str	00000000 
00021997 l       .debug_str	00000000 
000219f6 l       .debug_str	00000000 
00021a27 l       .debug_str	00000000 
00021a3d l       .debug_str	00000000 
00021a6e l       .debug_str	00000000 
00021a84 l       .debug_str	00000000 
00021ab9 l       .debug_str	00000000 
00021b16 l       .debug_str	00000000 
00021b74 l       .debug_str	00000000 
00021bd9 l       .debug_str	00000000 
00021be4 l       .debug_str	00000000 
00021c48 l       .debug_str	00000000 
00021ca7 l       .debug_str	00000000 
00021d07 l       .debug_str	00000000 
00021d4d l       .debug_str	00000000 
00021d8d l       .debug_str	00000000 
00021e15 l       .debug_str	00000000 
00033065 l       .debug_str	00000000 
00021e9c l       .debug_str	00000000 
00021ecf l       .debug_str	00000000 
00021f43 l       .debug_str	00000000 
00021fbc l       .debug_str	00000000 
00022045 l       .debug_str	00000000 
000220a2 l       .debug_str	00000000 
00022103 l       .debug_str	00000000 
0002215d l       .debug_str	00000000 
000221b9 l       .debug_str	00000000 
00022216 l       .debug_str	00000000 
00022275 l       .debug_str	00000000 
000222dd l       .debug_str	00000000 
00022347 l       .debug_str	00000000 
000223b0 l       .debug_str	00000000 
0002240e l       .debug_str	00000000 
00022480 l       .debug_str	00000000 
00022484 l       .debug_str	00000000 
000224f7 l       .debug_str	00000000 
00022555 l       .debug_str	00000000 
000225cb l       .debug_str	00000000 
00022627 l       .debug_str	00000000 
00022698 l       .debug_str	00000000 
0002270e l       .debug_str	00000000 
00022745 l       .debug_str	00000000 
000227a5 l       .debug_str	00000000 
00022801 l       .debug_str	00000000 
00022836 l       .debug_str	00000000 
0002286b l       .debug_str	00000000 
000228a1 l       .debug_str	00000000 
000228fc l       .debug_str	00000000 
0002293e l       .debug_str	00000000 
0002296f l       .debug_str	00000000 
000229a0 l       .debug_str	00000000 
000229d3 l       .debug_str	00000000 
000229da l       .debug_str	00000000 
00022a07 l       .debug_str	00000000 
00022a42 l       .debug_str	00000000 
00022a55 l       .debug_str	00000000 
00022a86 l       .debug_str	00000000 
00022a90 l       .debug_str	00000000 
00022afc l       .debug_str	00000000 
00022b51 l       .debug_str	00000000 
00022b84 l       .debug_str	00000000 
00022b92 l       .debug_str	00000000 
00022be6 l       .debug_str	00000000 
00022c17 l       .debug_str	00000000 
00022c49 l       .debug_str	00000000 
00022c82 l       .debug_str	00000000 
00022c97 l       .debug_str	00000000 
00022cd2 l       .debug_str	00000000 
00022ce9 l       .debug_str	00000000 
00022d27 l       .debug_str	00000000 
00022d41 l       .debug_str	00000000 
00022da3 l       .debug_str	00000000 
00022dc8 l       .debug_str	00000000 
00022e23 l       .debug_str	00000000 
00022e32 l       .debug_str	00000000 
00022ea7 l       .debug_str	00000000 
00022ec4 l       .debug_str	00000000 
00022efe l       .debug_str	00000000 
00022f3b l       .debug_str	00000000 
00022f46 l       .debug_str	00000000 
00022f7e l       .debug_str	00000000 
00022f85 l       .debug_str	00000000 
00023004 l       .debug_str	00000000 
00023064 l       .debug_str	00000000 
000230c2 l       .debug_str	00000000 
00023120 l       .debug_str	00000000 
00023158 l       .debug_str	00000000 
0002318d l       .debug_str	00000000 
000231b8 l       .debug_str	00000000 
000231c2 l       .debug_str	00000000 
000231f2 l       .debug_str	00000000 
00023200 l       .debug_str	00000000 
00023259 l       .debug_str	00000000 
000232d5 l       .debug_str	00000000 
00023339 l       .debug_str	00000000 
0002339d l       .debug_str	00000000 
000233d3 l       .debug_str	00000000 
000233e7 l       .debug_str	00000000 
00023428 l       .debug_str	00000000 
00023440 l       .debug_str	00000000 
000234f4 l       .debug_str	00000000 
00023527 l       .debug_str	00000000 
00023538 l       .debug_str	00000000 
0002357e l       .debug_str	00000000 
0002358b l       .debug_str	00000000 
000235c8 l       .debug_str	00000000 
0002360c l       .debug_str	00000000 
0002364d l       .debug_str	00000000 
0002368f l       .debug_str	00000000 
00023699 l       .debug_str	00000000 
000236dd l       .debug_str	00000000 
000236e8 l       .debug_str	00000000 
00023736 l       .debug_str	00000000 
00023784 l       .debug_str	00000000 
000237ca l       .debug_str	00000000 
00023812 l       .debug_str	00000000 
0002385a l       .debug_str	00000000 
0000e3b2 l       .debug_str	00000000 
000238c1 l       .debug_str	00000000 
0002391a l       .debug_str	00000000 
00023960 l       .debug_str	00000000 
00023983 l       .debug_str	00000000 
000239c9 l       .debug_str	00000000 
000239ec l       .debug_str	00000000 
00023a35 l       .debug_str	00000000 
00023a5b l       .debug_str	00000000 
00023aa4 l       .debug_str	00000000 
00023aca l       .debug_str	00000000 
00023b14 l       .debug_str	00000000 
00023b3b l       .debug_str	00000000 
00023b85 l       .debug_str	00000000 
00023bac l       .debug_str	00000000 
00023bf9 l       .debug_str	00000000 
00023c23 l       .debug_str	00000000 
00023c70 l       .debug_str	00000000 
00023c9a l       .debug_str	00000000 
00023d02 l       .debug_str	00000000 
00023d3f l       .debug_str	00000000 
00023d7b l       .debug_str	00000000 
00023db7 l       .debug_str	00000000 
00023df0 l       .debug_str	00000000 
00023e29 l       .debug_str	00000000 
00023e63 l       .debug_str	00000000 
00023e96 l       .debug_str	00000000 
00023ec2 l       .debug_str	00000000 
00023f18 l       .debug_str	00000000 
00023f43 l       .debug_str	00000000 
00023f9b l       .debug_str	00000000 
00023ff1 l       .debug_str	00000000 
0002402a l       .debug_str	00000000 
00024035 l       .debug_str	00000000 
0002406e l       .debug_str	00000000 
00024079 l       .debug_str	00000000 
000240a0 l       .debug_str	00000000 
000240d9 l       .debug_str	00000000 
00024120 l       .debug_str	00000000 
0002412d l       .debug_str	00000000 
0002437c l       .debug_str	00000000 
0002415c l       .debug_str	00000000 
0002419c l       .debug_str	00000000 
000241b0 l       .debug_str	00000000 
000241f2 l       .debug_str	00000000 
00024223 l       .debug_str	00000000 
00024253 l       .debug_str	00000000 
00024284 l       .debug_str	00000000 
000242b5 l       .debug_str	00000000 
000242ea l       .debug_str	00000000 
00024321 l       .debug_str	00000000 
0002432c l       .debug_str	00000000 
0002436c l       .debug_str	00000000 
00024380 l       .debug_str	00000000 
000243bc l       .debug_str	00000000 
000243cc l       .debug_str	00000000 
00024401 l       .debug_str	00000000 
0002440b l       .debug_str	00000000 
00024440 l       .debug_str	00000000 
0002444a l       .debug_str	00000000 
0002449f l       .debug_str	00000000 
000244e7 l       .debug_str	00000000 
0002452d l       .debug_str	00000000 
00024574 l       .debug_str	00000000 
000245bd l       .debug_str	00000000 
00024607 l       .debug_str	00000000 
00024659 l       .debug_str	00000000 
000246f7 l       .debug_str	00000000 
00024761 l       .debug_str	00000000 
0002476c l       .debug_str	00000000 
000247d6 l       .debug_str	00000000 
000247e1 l       .debug_str	00000000 
0002485c l       .debug_str	00000000 
000248d1 l       .debug_str	00000000 
000248dc l       .debug_str	00000000 
00024951 l       .debug_str	00000000 
0002495c l       .debug_str	00000000 
000249b3 l       .debug_str	00000000 
00024a17 l       .debug_str	00000000 
00024a23 l       .debug_str	00000000 
00024a62 l       .debug_str	00000000 
00022a4f l       .debug_str	00000000 
00024a97 l       .debug_str	00000000 
00024ad8 l       .debug_str	00000000 
00024adb l       .debug_str	00000000 
0002e21a l       .debug_str	00000000 
00024b1b l       .debug_str	00000000 
00024b65 l       .debug_str	00000000 
00024b70 l       .debug_str	00000000 
00024bbe l       .debug_str	00000000 
00024bcd l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00024c17 l       .debug_str	00000000 
00024c5f l       .debug_str	00000000 
00024c69 l       .debug_str	00000000 
00024cb1 l       .debug_str	00000000 
00024cbb l       .debug_str	00000000 
00024d07 l       .debug_str	00000000 
00024d14 l       .debug_str	00000000 
00024d5c l       .debug_str	00000000 
00024d66 l       .debug_str	00000000 
00024db0 l       .debug_str	00000000 
00024dc4 l       .debug_str	00000000 
00024e06 l       .debug_str	00000000 
00024e0f l       .debug_str	00000000 
00024e51 l       .debug_str	00000000 
00024e5a l       .debug_str	00000000 
00024eb6 l       .debug_str	00000000 
00024f10 l       .debug_str	00000000 
00024f6b l       .debug_str	00000000 
00024fc5 l       .debug_str	00000000 
0000ca44 l       .debug_str	00000000 
0002500b l       .debug_str	00000000 
00025071 l       .debug_str	00000000 
000250a8 l       .debug_str	00000000 
000250b0 l       .debug_str	00000000 
000250e8 l       .debug_str	00000000 
000250f1 l       .debug_str	00000000 
00025129 l       .debug_str	00000000 
00025132 l       .debug_str	00000000 
00025169 l       .debug_str	00000000 
00025171 l       .debug_str	00000000 
000251a9 l       .debug_str	00000000 
000251b2 l       .debug_str	00000000 
000251ea l       .debug_str	00000000 
000251f3 l       .debug_str	00000000 
0002522a l       .debug_str	00000000 
00025232 l       .debug_str	00000000 
000252ac l       .debug_str	00000000 
00025326 l       .debug_str	00000000 
000253a0 l       .debug_str	00000000 
0002541c l       .debug_str	00000000 
0002547a l       .debug_str	00000000 
00025483 l       .debug_str	00000000 
000254e2 l       .debug_str	00000000 
00025541 l       .debug_str	00000000 
000255a0 l       .debug_str	00000000 
00025600 l       .debug_str	00000000 
0002565e l       .debug_str	00000000 
000256bd l       .debug_str	00000000 
0002571c l       .debug_str	00000000 
0002577b l       .debug_str	00000000 
000257db l       .debug_str	00000000 
00025842 l       .debug_str	00000000 
000258ad l       .debug_str	00000000 
00025908 l       .debug_str	00000000 
00025963 l       .debug_str	00000000 
000259c5 l       .debug_str	00000000 
00025a2a l       .debug_str	00000000 
00025a93 l       .debug_str	00000000 
00025af9 l       .debug_str	00000000 
00025b4e l       .debug_str	00000000 
00025ba3 l       .debug_str	00000000 
00025bfd l       .debug_str	00000000 
00025c57 l       .debug_str	00000000 
00025c94 l       .debug_str	00000000 
00025cce l       .debug_str	00000000 
00025cd7 l       .debug_str	00000000 
00025d11 l       .debug_str	00000000 
00025d1a l       .debug_str	00000000 
00025d57 l       .debug_str	00000000 
0000a26f l       .debug_str	00000000 
00025d90 l       .debug_str	00000000 
00025df1 l       .debug_str	00000000 
00025e4f l       .debug_str	00000000 
00025e90 l       .debug_str	00000000 
00025ece l       .debug_str	00000000 
00025f0f l       .debug_str	00000000 
00025f48 l       .debug_str	00000000 
00025f87 l       .debug_str	00000000 
00025fc5 l       .debug_str	00000000 
00026003 l       .debug_str	00000000 
00026044 l       .debug_str	00000000 
00026088 l       .debug_str	00000000 
000260c5 l       .debug_str	00000000 
0002612b l       .debug_str	00000000 
00026192 l       .debug_str	00000000 
000261f5 l       .debug_str	00000000 
00026250 l       .debug_str	00000000 
00026297 l       .debug_str	00000000 
000262a6 l       .debug_str	00000000 
000262ee l       .debug_str	00000000 
00026336 l       .debug_str	00000000 
0002637e l       .debug_str	00000000 
000263c7 l       .debug_str	00000000 
00026411 l       .debug_str	00000000 
00026458 l       .debug_str	00000000 
000264ab l       .debug_str	00000000 
000264c6 l       .debug_str	00000000 
0002650e l       .debug_str	00000000 
00026562 l       .debug_str	00000000 
000265aa l       .debug_str	00000000 
000265fe l       .debug_str	00000000 
00026646 l       .debug_str	00000000 
0002669a l       .debug_str	00000000 
000266e3 l       .debug_str	00000000 
00026738 l       .debug_str	00000000 
00026782 l       .debug_str	00000000 
000267da l       .debug_str	00000000 
0002683c l       .debug_str	00000000 
0002689b l       .debug_str	00000000 
000268fb l       .debug_str	00000000 
0002695b l       .debug_str	00000000 
000269bb l       .debug_str	00000000 
00026a1c l       .debug_str	00000000 
00026a7b l       .debug_str	00000000 
00026adb l       .debug_str	00000000 
00026b3b l       .debug_str	00000000 
00026b9b l       .debug_str	00000000 
00026bfc l       .debug_str	00000000 
00026c59 l       .debug_str	00000000 
00026cb4 l       .debug_str	00000000 
00026d12 l       .debug_str	00000000 
00026d68 l       .debug_str	00000000 
00026dbc l       .debug_str	00000000 
00026e1d l       .debug_str	00000000 
00026e7c l       .debug_str	00000000 
00026edb l       .debug_str	00000000 
00026f3a l       .debug_str	00000000 
00026f9a l       .debug_str	00000000 
00026ffa l       .debug_str	00000000 
0002705a l       .debug_str	00000000 
000270ba l       .debug_str	00000000 
0002711c l       .debug_str	00000000 
0002717e l       .debug_str	00000000 
000271e4 l       .debug_str	00000000 
0002724c l       .debug_str	00000000 
000272b3 l       .debug_str	00000000 
0002730f l       .debug_str	00000000 
00027370 l       .debug_str	00000000 
000273d1 l       .debug_str	00000000 
0002742b l       .debug_str	00000000 
00027485 l       .debug_str	00000000 
000274df l       .debug_str	00000000 
0002753d l       .debug_str	00000000 
00027596 l       .debug_str	00000000 
000275ee l       .debug_str	00000000 
0002766a l       .debug_str	00000000 
000276d3 l       .debug_str	00000000 
0002774f l       .debug_str	00000000 
000277cb l       .debug_str	00000000 
00027838 l       .debug_str	00000000 
000278b4 l       .debug_str	00000000 
0002791d l       .debug_str	00000000 
00027977 l       .debug_str	00000000 
000279cb l       .debug_str	00000000 
00027a2c l       .debug_str	00000000 
00027a8f l       .debug_str	00000000 
00027af7 l       .debug_str	00000000 
00027b59 l       .debug_str	00000000 
00027bbf l       .debug_str	00000000 
00027c21 l       .debug_str	00000000 
00027c86 l       .debug_str	00000000 
00027ce9 l       .debug_str	00000000 
00027d45 l       .debug_str	00000000 
00027d9c l       .debug_str	00000000 
00027df5 l       .debug_str	00000000 
00027e48 l       .debug_str	00000000 
00027ea4 l       .debug_str	00000000 
00027f0a l       .debug_str	00000000 
00027f5d l       .debug_str	00000000 
00027fb3 l       .debug_str	00000000 
00028010 l       .debug_str	00000000 
00028072 l       .debug_str	00000000 
000280cb l       .debug_str	00000000 
00028126 l       .debug_str	00000000 
00028181 l       .debug_str	00000000 
000281dc l       .debug_str	00000000 
00028239 l       .debug_str	00000000 
00028296 l       .debug_str	00000000 
000282f5 l       .debug_str	00000000 
00028352 l       .debug_str	00000000 
000283ab l       .debug_str	00000000 
0002840a l       .debug_str	00000000 
00028469 l       .debug_str	00000000 
000284ca l       .debug_str	00000000 
0002852c l       .debug_str	00000000 
0002858e l       .debug_str	00000000 
000285ef l       .debug_str	00000000 
00028651 l       .debug_str	00000000 
000286b3 l       .debug_str	00000000 
0000a2eb l       .debug_str	00000000 
000286fc l       .debug_str	00000000 
00028748 l       .debug_str	00000000 
00028750 l       .debug_str	00000000 
0002879a l       .debug_str	00000000 
000287e5 l       .debug_str	00000000 
000287ec l       .debug_str	00000000 
00028837 l       .debug_str	00000000 
00028882 l       .debug_str	00000000 
000288ce l       .debug_str	00000000 
00028918 l       .debug_str	00000000 
00028965 l       .debug_str	00000000 
000289b0 l       .debug_str	00000000 
000289fc l       .debug_str	00000000 
00028a48 l       .debug_str	00000000 
00028a94 l       .debug_str	00000000 
00028ae1 l       .debug_str	00000000 
00028b2b l       .debug_str	00000000 
00028b78 l       .debug_str	00000000 
00028bc3 l       .debug_str	00000000 
00028c0f l       .debug_str	00000000 
00028c5b l       .debug_str	00000000 
00028ca7 l       .debug_str	00000000 
00028cf4 l       .debug_str	00000000 
00028d3e l       .debug_str	00000000 
00028d8b l       .debug_str	00000000 
00028dd6 l       .debug_str	00000000 
00028e22 l       .debug_str	00000000 
00028e6e l       .debug_str	00000000 
00028eba l       .debug_str	00000000 
00028f07 l       .debug_str	00000000 
00028f52 l       .debug_str	00000000 
00028fa0 l       .debug_str	00000000 
00028fec l       .debug_str	00000000 
00029039 l       .debug_str	00000000 
00029086 l       .debug_str	00000000 
000290d3 l       .debug_str	00000000 
00029121 l       .debug_str	00000000 
0002916c l       .debug_str	00000000 
000291b7 l       .debug_str	00000000 
00029203 l       .debug_str	00000000 
0002924f l       .debug_str	00000000 
0002929c l       .debug_str	00000000 
000292e8 l       .debug_str	00000000 
00029335 l       .debug_str	00000000 
00029382 l       .debug_str	00000000 
000293e1 l       .debug_str	00000000 
0002943e l       .debug_str	00000000 
0002949a l       .debug_str	00000000 
000294f8 l       .debug_str	00000000 
00029555 l       .debug_str	00000000 
000295b3 l       .debug_str	00000000 
00029610 l       .debug_str	00000000 
0002966e l       .debug_str	00000000 
000296cb l       .debug_str	00000000 
0002972a l       .debug_str	00000000 
00029788 l       .debug_str	00000000 
000297e9 l       .debug_str	00000000 
0002984a l       .debug_str	00000000 
0002987b l       .debug_str	00000000 
00029883 l       .debug_str	00000000 
000298b4 l       .debug_str	00000000 
000298bc l       .debug_str	00000000 
000298ea l       .debug_str	00000000 
000298f3 l       .debug_str	00000000 
00029953 l       .debug_str	00000000 
000299b3 l       .debug_str	00000000 
00029a0a l       .debug_str	00000000 
00029a5d l       .debug_str	00000000 
00029aa5 l       .debug_str	00000000 
00029af4 l       .debug_str	00000000 
00029b3c l       .debug_str	00000000 
00029b56 l       .debug_str	00000000 
00029b9e l       .debug_str	00000000 
00029bc6 l       .debug_str	00000000 
00029c0e l       .debug_str	00000000 
00029c4b l       .debug_str	00000000 
00029c93 l       .debug_str	00000000 
00029cb5 l       .debug_str	00000000 
00029cfd l       .debug_str	00000000 
00029d45 l       .debug_str	00000000 
00029d8d l       .debug_str	00000000 
00029daa l       .debug_str	00000000 
00029df2 l       .debug_str	00000000 
00029e28 l       .debug_str	00000000 
00029e70 l       .debug_str	00000000 
00029e98 l       .debug_str	00000000 
00029ee0 l       .debug_str	00000000 
00029f3d l       .debug_str	00000000 
00029f85 l       .debug_str	00000000 
00029fa6 l       .debug_str	00000000 
00029fee l       .debug_str	00000000 
00029ff9 l       .debug_str	00000000 
0002a041 l       .debug_str	00000000 
0002a0a5 l       .debug_str	00000000 
0002a0ed l       .debug_str	00000000 
0002a122 l       .debug_str	00000000 
0002a16a l       .debug_str	00000000 
0002a19b l       .debug_str	00000000 
0002a1e3 l       .debug_str	00000000 
0002a20d l       .debug_str	00000000 
0002a255 l       .debug_str	00000000 
0002a29d l       .debug_str	00000000 
0002a2a6 l       .debug_str	00000000 
0002a2ee l       .debug_str	00000000 
0002a323 l       .debug_str	00000000 
0002a36b l       .debug_str	00000000 
0002a463 l       .debug_str	00000000 
0002a4ab l       .debug_str	00000000 
0002a4b4 l       .debug_str	00000000 
000059fa l       .debug_str	00000000 
0002a4fc l       .debug_str	00000000 
0002a544 l       .debug_str	00000000 
0002a54d l       .debug_str	00000000 
0002a595 l       .debug_str	00000000 
0002a5ee l       .debug_str	00000000 
0002a636 l       .debug_str	00000000 
0002a63f l       .debug_str	00000000 
0002a687 l       .debug_str	00000000 
0002a6c2 l       .debug_str	00000000 
0002a70a l       .debug_str	00000000 
0002a752 l       .debug_str	00000000 
0002a75f l       .debug_str	00000000 
00005ac2 l       .debug_str	00000000 
0002a7a7 l       .debug_str	00000000 
0002a7ef l       .debug_str	00000000 
0002a817 l       .debug_str	00000000 
0002a85f l       .debug_str	00000000 
0002a88c l       .debug_str	00000000 
0002a8d4 l       .debug_str	00000000 
0002a8ef l       .debug_str	00000000 
0002a937 l       .debug_str	00000000 
0002a97f l       .debug_str	00000000 
0002a99b l       .debug_str	00000000 
0002a9e3 l       .debug_str	00000000 
0002aa18 l       .debug_str	00000000 
0002aa60 l       .debug_str	00000000 
0002aa84 l       .debug_str	00000000 
0002aacc l       .debug_str	00000000 
0002aaf1 l       .debug_str	00000000 
0002ab39 l       .debug_str	00000000 
0002abe5 l       .debug_str	00000000 
0002ac2d l       .debug_str	00000000 
0002ac49 l       .debug_str	00000000 
0002ac91 l       .debug_str	00000000 
0002acae l       .debug_str	00000000 
0002acf6 l       .debug_str	00000000 
0002ad2f l       .debug_str	00000000 
0002ad77 l       .debug_str	00000000 
0002ad8d l       .debug_str	00000000 
0002add5 l       .debug_str	00000000 
0002ae1d l       .debug_str	00000000 
0002ae33 l       .debug_str	00000000 
0002ae7b l       .debug_str	00000000 
0002aea2 l       .debug_str	00000000 
0002aeea l       .debug_str	00000000 
0002af07 l       .debug_str	00000000 
0002af4f l       .debug_str	00000000 
0002af8a l       .debug_str	00000000 
0002afd2 l       .debug_str	00000000 
0002b01a l       .debug_str	00000000 
0002b03c l       .debug_str	00000000 
00005b5b l       .debug_str	00000000 
0002b084 l       .debug_str	00000000 
0002b0cc l       .debug_str	00000000 
0002b0d6 l       .debug_str	00000000 
0002b11e l       .debug_str	00000000 
0002b166 l       .debug_str	00000000 
0002b1dd l       .debug_str	00000000 
0002b225 l       .debug_str	00000000 
0002b24e l       .debug_str	00000000 
0002b296 l       .debug_str	00000000 
0002b2a0 l       .debug_str	00000000 
0002b2e8 l       .debug_str	00000000 
0002b35f l       .debug_str	00000000 
0002b3a7 l       .debug_str	00000000 
0002b3af l       .debug_str	00000000 
0002b3f7 l       .debug_str	00000000 
0002b41f l       .debug_str	00000000 
0002b467 l       .debug_str	00000000 
0002b4af l       .debug_str	00000000 
0002b4be l       .debug_str	00000000 
0002b506 l       .debug_str	00000000 
0002b537 l       .debug_str	00000000 
0002b57f l       .debug_str	00000000 
0002b5a3 l       .debug_str	00000000 
0002b5eb l       .debug_str	00000000 
0002b5f5 l       .debug_str	00000000 
0002b63d l       .debug_str	00000000 
0002b646 l       .debug_str	00000000 
0002b68e l       .debug_str	00000000 
0002b6ac l       .debug_str	00000000 
0002b6f4 l       .debug_str	00000000 
0002b73c l       .debug_str	00000000 
0002b76f l       .debug_str	00000000 
0002b7b7 l       .debug_str	00000000 
0002b832 l       .debug_str	00000000 
0002b87c l       .debug_str	00000000 
0002b8c6 l       .debug_str	00000000 
0002b92f l       .debug_str	00000000 
0002b98c l       .debug_str	00000000 
0002b9ef l       .debug_str	00000000 
0002ba45 l       .debug_str	00000000 
0002ba9b l       .debug_str	00000000 
0002baf4 l       .debug_str	00000000 
0002bb4c l       .debug_str	00000000 
0002bbb0 l       .debug_str	00000000 
0002bc36 l       .debug_str	00000000 
0002bc3c l       .debug_str	00000000 
0002bcc2 l       .debug_str	00000000 
0002bcc8 l       .debug_str	00000000 
0002bd4a l       .debug_str	00000000 
0002bdcc l       .debug_str	00000000 
0002be4f l       .debug_str	00000000 
0002be56 l       .debug_str	00000000 
0002bed9 l       .debug_str	00000000 
0002bee0 l       .debug_str	00000000 
0002bf66 l       .debug_str	00000000 
0002bfec l       .debug_str	00000000 
0002c06f l       .debug_str	00000000 
0002c0f2 l       .debug_str	00000000 
0002c174 l       .debug_str	00000000 
0002c1fa l       .debug_str	00000000 
0002c280 l       .debug_str	00000000 
0002c30a l       .debug_str	00000000 
0002c392 l       .debug_str	00000000 
0002c41a l       .debug_str	00000000 
0002c478 l       .debug_str	00000000 
0002c4d6 l       .debug_str	00000000 
0002c534 l       .debug_str	00000000 
0002c593 l       .debug_str	00000000 
0002c5f1 l       .debug_str	00000000 
0002c650 l       .debug_str	00000000 
0002c6ae l       .debug_str	00000000 
0002c70d l       .debug_str	00000000 
0002c76c l       .debug_str	00000000 
0002c7cb l       .debug_str	00000000 
0002c829 l       .debug_str	00000000 
0002c888 l       .debug_str	00000000 
0002c8e7 l       .debug_str	00000000 
0002c946 l       .debug_str	00000000 
0002c9a5 l       .debug_str	00000000 
0002ca04 l       .debug_str	00000000 
0002ca63 l       .debug_str	00000000 
0002cac2 l       .debug_str	00000000 
0002cb21 l       .debug_str	00000000 
0002cb80 l       .debug_str	00000000 
0002cbdf l       .debug_str	00000000 
0002cc3e l       .debug_str	00000000 
0002cc9d l       .debug_str	00000000 
0002ccfc l       .debug_str	00000000 
0002cd5b l       .debug_str	00000000 
0002cdba l       .debug_str	00000000 
0002ce19 l       .debug_str	00000000 
0002ce78 l       .debug_str	00000000 
0002ced7 l       .debug_str	00000000 
0002cf36 l       .debug_str	00000000 
0002cf96 l       .debug_str	00000000 
0002cff5 l       .debug_str	00000000 
0002d054 l       .debug_str	00000000 
0002d0b3 l       .debug_str	00000000 
0002d113 l       .debug_str	00000000 
0002d172 l       .debug_str	00000000 
0002d1d1 l       .debug_str	00000000 
0002d231 l       .debug_str	00000000 
0002d290 l       .debug_str	00000000 
0002d2f6 l       .debug_str	00000000 
0002d331 l       .debug_str	00000000 
0800223e l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h60b349e3a3967a18E
08003ef6 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h8430cdf27e8fe239E
08002c20 l     F .text	0000000a _ZN4core3fmt10ArgumentV110show_usize17h0a1563fc3dacf510E
08003c8a l     F .text	00000102 _ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE
08003db8 l     F .text	00000118 _ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E
080037e2 l     F .text	00000170 _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E
08002b34 l     F .text	00000096 _ZN4core3fmt5Write10write_char17h46ea92a99ad03871E
08002bca l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17h1dde8e33e3292656E
08003094 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E
080021ea l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h012e98b5b5cd1768E
080021ec l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h02a68ac691a00745E
080021ee l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h605f2bc604187c4eE
080035fc l     F .text	000000fe _ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E
080036fa l     F .text	000000e8 _ZN4core7unicode9printable5check17h6013a5f54a0956d6E
08002bf4 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hc1dd88ddb83e927aE
08002bfa l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hbaabbcf1c32c6171E
08002bee l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hd3215ca6ed83c00eE
080021f0 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbc81ca56d6e023e9E
0800cd00 l     O .text	00000016 str.h
0800cd40 l     O .text	00000020 str.j
00000000 l    df *ABS*	00000000 semihosting_console.c
20000280 l     O .bss	00000004 semihost_mbuf
20000168 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20000284 l     O .bss	00000010 avail_queue
20000294 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
200002a0 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sensor_coap.c
08004104 l     F .text	0000000a cbor_cnt_writer
08004110 l     F .text	0000000c handle_coap_response
0800411c l     F .text	0000000e json_write_mbuf.part.0
0800411c l     F .text	0000000e json_rep_finalize.part.2
0800411c l     F .text	0000000e json_rep_new.part.1
200002a4 l     O .bss	00000008 cnt_writer
200002ac l     O .bss	00000004 coap_json_mbuf
200002b0 l     O .bss	00000004 oc_c_message
200002b4 l     O .bss	0000006c oc_c_request
20000320 l     O .bss	00000004 oc_c_rsp
20000328 l     O .bss	00000008 oc_sem
20000330 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
08004440 l     F .text	0000000e sensor_network_start_transport.part.0
08004440 l     F .text	0000000e get_hardware_id.part.2
08004440 l     F .text	0000000e sensor_network_do_post.part.1
08004540 l     F .text	00000040 network_task_func
20000334 l     O .bss	00000004 current_uri
20000338 l     O .bss	00000010 device_id
20000348 l     O .bss	00000021 device_id_text
20000369 l     O .bss	0000000c hw_id
20000378 l     O .bss	00000004 hw_id_len
2000037c l     O .bss	00000050 network_task
200003cc l     O .bss	00000400 network_task_stack
200007cc l     O .bss	00000020 sensor_network_endpoints
200007ec l     O .bss	00000028 sensor_network_interfaces
20000818 l     O .bss	00000008 sensor_node_address
20000820 l     O .bss	00000037 sensor_node_names_buf
20000169 l     O .data	00000001 current_iface_type
2000016c l     O .data	00000014 sensor_node_names
0800def1 l     O .text	0000000f COAP_HOST
0800df00 l     O .text	00000036 COAP_URI
0800df36 l     O .text	0000000c COLLECTOR_NODE_HW_ID
0800df42 l     O .text	0000003c SENSOR_NODE_HW_IDS
0800dfc0 l     O .text	00000008 sensor_network_encoding
0800e02c l     O .text	00000008 sensor_network_shortname
0800e040 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 oc_buffer.c
080048c8 l     F .text	0000002c oc_buffer_tx
080048f4 l     F .text	00000028 oc_buffer_rx
20000858 l     O .bss	00000018 oc_inq
20000870 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_rep.c
20000888 l     O .bss	00000004 g_outm
2000088c l     O .bss	0000001c oc_rep_objects
200008a8 l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 oc_ri.c
08004a3c l     F .text	00000040 free_client_cb
08004a7c l     F .text	00000006 oc_ri_remove_cb
200008d8 l     O .bss	000000c8 oc_client_cb_area
200009a0 l     O .bss	0000001c oc_client_cb_pool
200009bc l     O .bss	00000004 oc_client_cbs
00000000 l    df *ABS*	00000000 coap.c
08004b6c l     F .text	00000092 coap_append_opt_hdr
08004bfe l     F .text	00000098 coap_append_int_opt
200009c0 l     O .bss	00000002 current_mid
00000000 l    df *ABS*	00000000 adaptor.c
200009c4 l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 random.c
00000000 l    df *ABS*	00000000 oc_helpers.c
00000000 l    df *ABS*	00000000 sysinit.c
080051c6 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 json_encode.c
080052f0 l     F .text	000001ac json_encode_value
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
00000000 l    df *ABS*	00000000 stm32_hw_id.c
00000000 l    df *ABS*	00000000 sensor.c
08005558 l     F .text	0000004c sensor_mgr_insert
080055d0 l     F .text	00000060 sensor_read_data_func
08005630 l     F .text	00000012 sensor_mgr_match_bydevname
08005644 l     F .text	00000050 sensor_base_ts_update_event
08005998 l     F .text	000000e8 sensor_mgr_wakeup_event
080057b4 l     F .text	00000050 sensor_update_nextrun
200009c8 l     O .bss	00000078 sensor_notify_evt_area
20000a40 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
08005d88 l     F .text	00000016 os_main
20000b60 l     O .bss	00001000 os_main_stack
20000a60 l     O .bss	00000100 g_idle_task_stack
20001b60 l     O .bss	00000050 os_main_task
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0800603e l     F .text	00000020 os_dev_initialize
20001bb0 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20001bb8 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
080062f4 l     F .text	00000016 _os_mbuf_trailingspace
0800630a l     F .text	00000032 _os_mbuf_copypkthdr
00000000 l    df *ABS*	00000000 os_mempool.c
080066bc l     F .text	0000006c os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
080067c8 l     F .text	00000024 os_msys_find_pool
20001bc8 l     O .bss	00000db0 os_msys_1_data
20002978 l     O .bss	0000000c os_msys_1_mbuf_pool
20002984 l     O .bss	0000001c os_msys_1_mempool
20000184 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
08006a58 l     F .text	0000001c os_sanity_check_list_lock
08006a74 l     F .text	00000018 os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
08006f50 l     F .text	0000004c os_deltatime
200029a8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 HAL_CM3.o
080070c8 l       .text	00000000 SVC_User
080070e6 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 malloc.c
08007164 l     F .text	00000004 malloc_lock_nop
08007168 l     F .text	00000002 malloc_unlock_nop
0800716c l     F .text	00000060 __free_block
2000019c l     O .data	00000018 __malloc_head
200001b4 l     O .data	00000004 malloc_lock
200001b8 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
080072f8 l       .text	00000000 test1
080072ec l       .text	00000000 loop1
080072fe l       .text	00000000 res1
0800731a l       .text	00000000 test2
08007322 l       .text	00000000 done
0800730e l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0800732e l       .text	00000000 test1
0800732a l       .text	00000000 loop1
0800733c l       .text	00000000 test2
08007338 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
080073a4 l     F .text	000000b2 ui2a
08007456 l     F .text	00000022 putf
08007478 l     F .text	0000011c putchw
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
08007904 l     F .text	00000004 stdin_read
08007908 l     F .text	00000010 stdout_write
200001bc l     O .data	00000004 _stdin
200001c0 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 hmac_prng.c
200029d8 l     O .bss	0000000c hw_id
200029e4 l     O .bss	00000004 hw_id_len
200029e8 l     O .bss	00000138 prng
20002b20 l     O .bss	00000020 seed
00000000 l    df *ABS*	00000000 json_helper.c
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 sensor_helper.c
00000000 l    df *ABS*	00000000 temp_stm32.c
08007b12 l     F .text	0000001c temp_stm32_sensor_get_config
08007b2e l     F .text	00000018 temp_stm32_close
08007b48 l     F .text	00000068 temp_stm32_open
08007cd4 l     F .text	00000080 temp_stm32_sensor_read
200001c8 l     O .data	0000000c temp_channel_config
0800e2b0 l     O .text	00000028 g_temp_stm32_sensor_driver
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 bluepill_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hmac_prng.c
08007dfe l     F .text	000000ca update
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 hmac.c
08007fe0 l     F .text	0000003a rekey
00000000 l    df *ABS*	00000000 sha256.c
0800810c l     F .text	000001c8 compress
0800e308 l     O .text	00000100 k256
00000000 l    df *ABS*	00000000 hal_bsp.c
08008450 l     F .text	00000010 LL_GPIO_AF_DisableRemap_USART2
20002b40 l     O .bss	0000003c hal_uart0
0800e410 l     O .text	00000018 uart_cfg
00000000 l    df *ABS*	00000000 adc.c
00000000 l    df *ABS*	00000000 uart_hal.c
08008536 l     F .text	0000002c uart_hal_resume
08008562 l     F .text	00000014 uart_hal_close
08008576 l     F .text	00000072 uart_hal_open
080085e8 l     F .text	0000000e uart_hal_blocking_tx.part.2
080085e8 l     F .text	0000000e uart_hal_start_tx.part.4
080085e8 l     F .text	0000000e uart_hal_start_rx.part.3
080085f6 l     F .text	00000014 uart_hal_blocking_tx
0800860a l     F .text	00000014 uart_hal_start_rx
0800861e l     F .text	00000014 uart_hal_start_tx
08008632 l     F .text	00000028 uart_hal_suspend
00000000 l    df *ABS*	00000000 hal_flash.c
080086c4 l     F .text	00000012 stm32_flash_sector_info
080086d6 l     F .text	0000000a stm32_flash_init
080086e0 l     F .text	00000004 stm32_flash_erase_sector
080086e4 l     F .text	0000000e stm32_flash_read
080086f4 l     F .text	000000a4 stm32_flash_write
00000000 l    df *ABS*	00000000 hal_os_tick.c
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 hal_timer.c
0800881c l     F .text	0000002a hal_timer_cnt
08008848 l     F .text	00000080 stm32_tmr0_irq
0800e45c l     O .text	0000000c stm32_tmr_devs
00000000 l    df *ABS*	00000000 hal_uart.c
08008abc l     F .text	0000008c uart_irq_handler
08008b48 l     F .text	00000006 uart_irq1
08008b4e l     F .text	00000006 uart_irq2
08008b54 l     F .text	00000006 uart_irq3
20002b7c l     O .bss	00000018 uart_irqs
20002b94 l     O .bss	0000001c uarts
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 sbrk.c
200001d4 l     O .data	00000004 brk.4103
00000000 l    df *ABS*	00000000 hal_gpio.c
08008f84 l     F .text	0000007c hal_gpio_clk_enable
0800e468 l     O .text	00000014 portmap
00000000 l    df *ABS*	00000000 stm32f1xx_hal_flash.c
08009064 l     F .text	00000050 FLASH_SetErrorCode
00000000 l    df *ABS*	00000000 stm32f1xx_hal_flash_ex.c
080091cc l     F .text	00000024 FLASH_MassErase.isra.0
00000000 l    df *ABS*	00000000 stm32f1xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_iwdg.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_tim.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000000 l    df *ABS*	00000000 hal_timer_freq.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_dma.c
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 creator.c
20002bb0 l     O .bss	0000006c __compound_literal.0
20002c1c l     O .bss	00000048 stm32f1_adc1_dev
200001d8 l     O .data	00000018 adc1_config
200001f0 l     O .data	00000030 adc1_handle
00000000 l    df *ABS*	00000000 adc_stm32f1.c
08009cb8 l     F .text	00000008 stm32f1_adc_size_buffer
08009cc0 l     F .text	0000000e stm32f1_adc_release_buffer
08009cce l     F .text	0000000e stm32f1_adc_set_buffer
08009cdc l     F .text	00000050 stm32f1_resolve_adc_gpio.part.0
08009d2c l     F .text	0000007c stm32f1_adc_configure_channel
08009da8 l     F .text	0000000e stm32f1_adc_read_buffer.part.1
08009da8 l     F .text	0000000e stm32f1_adc_open.part.4
08009da8 l     F .text	0000000e stm32f1_adc_sample.part.3
08009da8 l     F .text	0000000e stm32f1_adc_read_channel.part.2
08009db6 l     F .text	00000016 stm32f1_adc_read_buffer
08009dcc l     F .text	0000004e stm32f1_adc_read_channel
08009e1c l     F .text	00000028 stm32f1_adc_sample
08009e44 l     F .text	000000bc stm32f1_adc_open
08009f00 l     F .text	00000088 stm32f1_adc_close
20002c64 l     O .bss	00000010 stm32f1_adc_stats
0800e4a0 l     O .text	0000001c stm32f1_adc_funcs
00000000 l    df *ABS*	00000000 creator.cpp
20002c74 l     O .bss	00000038 _ZL5bc95g
20000220 l     O .data	00000014 _ZL16uart_0_itf_bc95g
00000000 l    df *ABS*	00000000 driver.cpp
0800a078 l     F .text	00000002 _ZL11bc95g_eventPv
0800a07a l     F .text	0000000e _ZL11get_commandP5bc95g9CommandId.isra.0.part.1
0800a07a l     F .text	0000000e _ZL10bc95g_openP6os_devmPv.part.13
0800a07a l     F .text	0000000e _ZL11bc95g_closeP6os_dev.part.3
0800a07a l     F .text	0000000e _ZL18register_transportPKcPvS0_th.part.2
0800a088 l     F .text	00000016 _ZL18register_transportPKcPvS0_th
0800a0a0 l     F .text	0000001c _ZL11bc95g_closeP6os_dev
0800a0bc l     F .text	00000010 _ZL9expect_okP5bc95g.isra.4
0800a0cc l     F .text	00000020 _ZL8send_atpP5bc95g.isra.6
0800a0ec l     F .text	0000007c _ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15
0800a168 l     F .text	000000ac _ZL10bc95g_openP6os_devmPv
0800a214 l     F .text	00000060 _ZL8send_hexP5bc95gPKht.isra.8
0800a274 l     F .text	000000f4 _ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11
0800a368 l     F .text	00000034 _ZL16send_command_intP5bc95g9CommandIdi
0800a39c l     F .text	00000038 _ZL12send_commandP5bc95g9CommandId
20002cac l     O .bss	00000100 _ZL15bc95g_rx_buffer
20002dac l     O .bss	00000190 _ZL15bc95g_tx_buffer
20002f3c l     O .bss	00000100 _ZL19bc95g_parser_buffer
2000303c l     O .bss	0000003c _ZL6parser
20003078 l     O .bss	0000004c _ZL6serial
200030c4 l     O .bss	00000004 _ZL7packets
20000234 l     O .data	00000001 _ZL10first_open
0800e4f8 l     O .text	00000014 _ZL13network_iface
0800e54d l     O .text	00000004 _ZL3ATP
0800e554 l     O .text	00000044 _ZL8COMMANDS
00000000 l    df *ABS*	00000000 transport.cpp
0800a5fe l     F .text	00000004 _ZL10oc_ep_sizePK11oc_endpoint
0800a602 l     F .text	00000004 _ZL14oc_ep_has_connPK11oc_endpoint
0800a606 l     F .text	00000004 _ZL7oc_initv
0800a60a l     F .text	00000002 _ZL11oc_shutdownv
0800a60c l     F .text	00000020 _ZL9oc_ep_strPciPK11oc_endpoint
0800a62c l     F .text	000000b4 _ZL11oc_tx_ucastP7os_mbuf
200030c8 l     O .bss	00000004 _ZL14network_device
200030cc l     O .bss	00000004 _ZL6server
200030d0 l     O .bss	00000004 _ZL6socket
200030d4 l     O .bss	00000001 _ZZL11oc_tx_ucastP7os_mbufE8sequence
20000235 l     O .data	00000001 _ZL12transport_id
0800e674 l     O .text	00000024 _ZL9transport
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 ATParser.cpp
00000000 l    df *ABS*	00000000 BufferedSerial.cpp
0800aaf2 l     F .text	00000002 _ZL12uart_tx_donePv
0800aaf4 l     F .text	0000000e _ZN14BufferedSerial5primeEv.part.0
0800aaf4 l     F .text	0000000e _ZL12uart_rx_charPvh.part.4
0800aaf4 l     F .text	0000000e _ZN14BufferedSerial5rxIrqEh.part.3
0800aaf4 l     F .text	0000000e _ZL12uart_tx_charPv.part.2
0800abbc l     F .text	00000010 _ZL12uart_tx_charPv
0800acb4 l     F .text	0000002c _ZL12uart_rx_charPvh
00000000 l    df *ABS*	00000000 MyBuffer.cpp
00000000 l    df *ABS*	00000000 creator.c
200031e0 l     O .bss	00000014 adc_1_itf_temp_stm32
200031f8 l     O .bss	000000d0 temp_stm32_dev
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 flash_map.c
200032c8 l     O .bss	00000078 mfg_areas.6497
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0800ae90 l     F .text	000000a4 mfg_read_next_mmr
0800af34 l     F .text	00000064 mfg_read_tlv_body
20003340 l     O .bss	00000001 mfg_initialized
20003344 l     O .bss	00000018 mfg_mmrs
2000335c l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 vsscanf.c
0800b0a8 l     F .text	00000020 skipspace
0800b0c8 l     F .text	00000018 set_bit
00000000 l    df *ABS*	00000000 hal_flash.c
0800b4b0 l     F .text	0000001c hal_flash_check_addr
00000000 l    df *ABS*	00000000 stm32f1xx_hal_adc.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_adc_ex.c
00000000 l    df *ABS*	00000000 stm32f1xx_hal_rcc_ex.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 vsprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 bluepill_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00000000 l    df *ABS*	00000000 srand48.c
08005178 g     F .text	0000000a oc_random_rand
08001188  w    F .text	00000002 RTC_Alarm_IRQHandler
08003f60 g     F .text	00000044 console_buffer
08001188  w    F .text	00000002 EXTI2_IRQHandler
0800b534  w    F .text	00000002 HAL_ADC_MspInit
0800c1f4 g     O .text	00000008 APBPrescTable
0800551c g     F .text	00000010 cbor_mbuf_writer_init
08005b98 g     F .text	00000034 os_arch_start
20003578 g       .bss	00000000 __HeapBase
2000351c g     O .bss	00000008 g_os_task_list
08005d04 g     F .text	00000084 os_idle_task
08007384 g     F .text	00000010 strcpy
0800b6cc g     F .text	0000000a ADC_DMAHalfConvCplt
08002adc g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E
0800946c g     F .text	000000e0 HAL_GPIO_DeInit
2000352c g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
080078f0 g     F .text	00000014 fmemopen_w
08001188  w    F .text	00000002 DebugMon_Handler
20003500 g     O .bss	00000008 g_os_mempool_list
08005ee0 g     F .text	0000001a os_callout_init
08005efc g     F .text	0000003c os_callout_stop
080071cc g     F .text	00000050 add_malloc_block
080033ba g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE
0800a41c g     F .text	00000148 bc95g_connect
080061c8 g     F .text	00000056 os_eventq_put
080050ac g     F .text	00000034 oc_transport_register
080082d4 g     F .text	00000058 tc_sha256_init
08001c76 g     F .text	00000002 _ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h594cb8d9aced4d5eE
20000110 g       .data	00000000 __data_start__
08007a1c g     F .text	0000001c json_helper_close_array
080077fc g     F .text	00000024 printf
080058f0 g     F .text	000000a8 sensor_read
0800e264 g     O .text	00000004 stdout
0800bed0 g     F .text	0000000c vsprintf
080039b0 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17hb0ae5251a2953077E
08001896 g     F .text	00000078 _ZN6mynewt2hw6sensor19new_sensor_listener17h9b5b837d061ad057E
08009a70 g     F .text	00000020 HAL_RCC_GetPCLK1Freq
200033c8 g     O .bss	00000010 links_array
08001188  w    F .text	00000002 TIM1_CC_IRQHandler
08009a90 g     F .text	00000020 HAL_RCC_GetPCLK2Freq
0800e440 g     O .text	0000001c stm32_flash_funcs
0800412c g     F .text	00000038 json_write_mbuf
08005b04 g     F .text	00000090 os_arch_os_init
08001188  w    F .text	00000002 HardFault_Handler
200033d8 g     O .bss	00000004 g_err
080088c8 g     F .text	00000154 hal_timer_init
0800b018 g     F .text	00000016 mfg_seek_next_with_type
08005bcc g     F .text	00000050 os_arch_os_start
0800a564 g     F .text	00000078 bc95g_socket_open
08005182 g     F .text	00000034 oc_new_string
080051e4 g     F .text	00000014 __wrap_coap_receive
08007116 g     F .text	0000000c SysTick_Handler
2000010c g       .coredata	00000000 __coredata_end__
0800514c g     F .text	00000028 oc_init
08002c4c g     F .text	00000200 _ZN4core3fmt5write17hfeb861b024853061E
080056f4 g     F .text	00000010 sensor_mgr_find_next_bydevname
08001188  w    F .text	00000002 PVD_IRQHandler
080054fc g     F .text	0000001e cbor_mbuf_writer
0800678a g     F .text	0000002c os_memblock_put
08006834 g     F .text	0000001c os_msys_get_pkthdr
20003570 g     O .bss	00000004 flash_map
0800e79c g       *ABS*	00000000 _sidata
080070ec g     F .text	0000002a PendSV_Handler
08001188  w    F .text	00000002 NMI_Handler
0800e79c g       .ARM.exidx	00000000 __exidx_end
08001020 g       .text	00000000 __isr_vector_start
08009ffc g     F .text	0000007c bc95g_create
08001188  w    F .text	00000002 EXTI3_IRQHandler
080078c4 g     F .text	0000002a memfile_write
08005a88 g     F .text	00000014 os_arch_ctx_sw
080098b4 g     F .text	00000078 HAL_RCC_GetSysClockFreq
0800ab52 g     F .text	00000034 _ZN14BufferedSerial5fgetcEi
0800865c g     F .text	00000068 uart_hal_init
080087ec g     F .text	00000024 hal_system_reset
08005dac g     F .text	00000058 os_init_idle_task
0800a82e g     F .text	0000002e _ZN8ATParser7vprintfEPKcSt9__va_list
2000019c g       .data	00000000 __aeabi_unwind_cpp_pr0
08006ba0 g     F .text	0000000c os_sched_set_current_task
0800e79c g       .ARM.exidx	00000000 __etext
0800954c g     F .text	00000042 HAL_IWDG_Init
2000023c g       .corebss	00000000 __corebss_start__
080068dc g     F .text	000000a0 os_mutex_release
0800257a g     F .text	0000031e _ZN4core3str16slice_error_fail17h1c355556f2a38f35E
08006a9c g     F .text	00000020 os_sanity_check_register
08007020 g     F .text	00000028 os_time_delay
08009b74 g     F .text	00000036 stm32_mcu_flash_erase_sector
20003368 g     O .bss	0000004c coap_json_encoder
20000240 g       .bss	00000000 _sbss
0800b02e g     F .text	00000006 mfg_read_tlv_flash_area
080040f8 g     F .text	0000000c console_get_ticks
0800229a g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E
08003a0e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h748e245dbb816a9eE
080065fe g     F .text	00000084 os_mbuf_prepend
0800b0e0 g     F .text	000003ce vsscanf
08009c72 g     F .text	00000002 sensor_dev_create
08009bf8 g     F .text	0000007a HAL_DMA_Start_IT
080067b8 g     F .text	00000010 os_mempool_module_init
080017f6 g     F .text	000000a0 _ZN6mynewt2hw6sensor17register_listener17hc8145e7a396d72e6E
08005aae g     F .text	0000000a os_arch_in_critical
080020bc g     F .text	00000014 _ZN6mynewt4libs14sensor_network13get_device_id17h087866bad0e5b5f0E
08004694 g     F .text	00000060 get_hardware_id
080092ac g     F .text	000001c0 HAL_GPIO_Init
0800958e g     F .text	0000000c HAL_IWDG_Refresh
0800ac5a  w    F .text	0000001e _ZN8MyBufferIcE3putEc
08005a80 g     F .text	00000006 timer_handler
08006110 g     F .text	00000024 os_dev_lookup
08003ae4 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17he3ba660dd7ebe35fE
08006bd0 g     F .text	00000074 os_sched_sleep
08004424 g     F .text	0000001c json_rep_end_root_object
0800404c g     F .text	00000004 semihosting_console_init
08004220 g     F .text	00000108 prepare_sensor_post
08007328 g     F .text	0000001a memcpy
0800b538 g     F .text	0000013c HAL_ADC_PollForConversion
080033aa g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE
08008efc g     F .text	00000030 hal_watchdog_init
08007918 g     F .text	000000c4 hmac_prng_init
200033b8 g     O .bss	00000010 coap_json_value
08002260 g     F .text	0000003a _ZN4core9panicking5panic17h138a849f37d3ac2dE
08006030 g     F .text	00000008 os_cputime_init
08001188  w    F .text	00000002 EXTI0_IRQHandler
080054e0 g     F .text	0000001c json_encode_array_finish
08001188  w    F .text	00000002 I2C2_EV_IRQHandler
08002536 g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE
0800bedc g     F .text	00000000 .hidden __aeabi_uldivmod
00000020 g       *ABS*	00000000 _imghdr_size
08006b68 g     F .text	0000002c os_sched_ctx_sw_hook
20003360 g     O .bss	00000004 console_is_midline
08006422 g     F .text	00000010 os_mbuf_free
08001e5e g     F .text	00000010 _ZN6mynewt6kernel2os15eventq_dflt_get17h0173394645c51d0dE
20000110 g     O .data	00000004 SystemCoreClock
20003430 g     O .bss	00000034 sensor_mgr
0800ad78 g     F .text	00000002 oc_register_ip6
08005ab8 g     F .text	00000036 os_arch_task_stack_init
0800721c g     F .text	00000098 malloc
08005174 g     F .text	00000004 oc_clock_time
08005070 g     F .text	00000022 coap_set_header_uri_path
0800adbc g     F .text	00000024 flash_area_read
0800161a g     F .text	00000000 __bkpt
08005092 g     F .text	0000000e coap_set_header_observe
08005c20 g     F .text	0000004c __assert_func
0800b920 g     F .text	0000011c HAL_ADC_Start_DMA
08006ce8 g     F .text	00000034 os_sched_wakeup_ticks
08004070 g     F .text	00000048 console_pkg_init
08001188  w    F .text	00000002 UsageFault_Handler
08007820 g     F .text	0000003a vsnprintf
08007a54 g     F .text	0000001c json_helper_object_array_end_item
08004710 g     F .text	00000018 is_standalone_node
200034f8 g     O .bss	00000008 g_callout_list
0800495c g     F .text	00000028 oc_send_message
0800c1e0 g     F .text	00000004 __aeabi_memcpy
08001188  w    F .text	00000002 ADC1_2_IRQHandler
08005062 g     F .text	0000000e coap_set_header_accept
0800ac56 g     F .text	00000004 _ZN14BufferedSerial4baudEm
08007594 g     F .text	00000264 tfp_format
08004ca8 g     F .text	0000001a coap_init_message
20005000 g       .bss	00000000 __HeapLimit
20000240 g       .bss	00000000 __bss_start__
08008810 g     F .text	00000004 hal_debugger_connected
0800acee  w    F .text	0000000c _ZN8MyBufferIcE4initEPcm
08009bac g     F .text	0000004c stm32_hal_timer_get_freq
20000110 g       .data	00000000 _sdata
08001188  w    F .text	00000002 SPI1_IRQHandler
08009214 g     F .text	00000098 HAL_FLASHEx_Erase
0800bf0c g     F .text	000002ce .hidden __udivmoddi4
080045f0 g     F .text	00000008 init_server_post
0800b6f0 g     F .text	000000fc HAL_ADC_ConfigChannel
20000238 g     O .data	00000004 _nbt
08001188  w    F .text	00000002 TAMPER_IRQHandler
08004788 g     F .text	000000bc sensor_network_init
08004328 g     F .text	00000048 json_rep_finalize
20003514 g     O .bss	00000004 g_current_task
08006abc g     F .text	00000050 os_sanity_run
080050a0 g     F .text	0000000c oc_evq_get
08005a9c g     F .text	0000000c os_arch_save_sr
08008ed4 g     F .text	00000028 hal_uart_close
08006728 g     F .text	00000012 os_mempool_init
08007048 g     F .text	0000003c os_gettimeofday
08004450 g     F .text	00000060 sensor_network_start_transport
20003524 g     O .bss	00000001 g_task_id
080079dc g     F .text	0000001c hmac_prng_generate
08003ed0 g     F .text	00000026 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17hf1595badf4d53d6dE
20003364 g     O .bss	00000001 g_console_input_ignore
0800e428 g     O .text	00000018 stm32_flash_dev
20003550 g     O .bss	00000020 pFlash
0800ba80 g     F .text	00000100 HAL_ADC_Init
08008bf8 g     F .text	00000028 hal_uart_blocking_tx
0800e784 g       .text	00000000 __exidx_start
0800bd88 g     F .text	00000148 strntoumax
0800c1e0 g     F .text	00000004 __aeabi_memcpy4
08004580 g     F .text	00000070 sensor_network_init_post
08006b0c g     F .text	00000010 os_sanity_init
0800645e g     F .text	00000098 os_mbuf_append
0800b034 g     F .text	00000006 mfg_read_tlv_mmr_ref
0800708c g     F .text	00000014 os_set_env
08008460 g     F .text	00000010 hal_bsp_flash_dev
08003c22 g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u64$GT$3fmt17ha9c56ab3b32cf62bE
08004844 g     F .text	00000084 sensor_network_register_interface
0800e25c g     O .text	00000008 MemFile_methods
20003508 g     O .bss	0000000c g_os_sanity_check_mu
200033dc g     O .bss	0000000c g_buf_writer
08001188  w    F .text	00000002 DMA1_Channel4_IRQHandler
08005804 g     F .text	00000088 sensor_set_poll_rate_ms
080058d0 g     F .text	0000001e sensor_register_listener
08008f50 g     F .text	00000034 _sbrk
08003dae g     F .text	0000000a _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h75cd43405bee1ff8E
08007bb0 g     F .text	0000002c temp_stm32_default_cfg
08003f5c g     F .text	00000004 disable_buffer
08008798 g     F .text	0000001a os_tick_idle
0800bbb4 g     F .text	000000d0 HAL_ADCEx_Calibration_Start
080040b8 g     F .text	00000040 console_printf
08003fe8 g     F .text	00000028 console_dump
080046f4 g     F .text	0000001c is_collector_node
0800406c g     F .text	00000004 console_blocking_mode
08009fc0 g     F .text	0000003c stm32f1_adc_dev_init
2000023c g       .corebss	00000000 __corebss_end__
08001208 g     F .text	00000002 _init
080049f4 g     F .text	00000024 oc_rep_finalize
08003dae g     F .text	0000000a _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h490cd499cca46fe6E
080033ec g     F .text	00000210 _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E
0800230a g     F .text	000001e8 _ZN4core5slice6memchr6memchr17hd4a19258abae6159E
0800a5dc g     F .text	00000022 bc95g_socket_tx_mbuf
08001188  w    F .text	00000002 USART3_IRQHandler
080087b4 g     F .text	00000038 os_tick_init
08005694 g     F .text	0000001c sensor_mgr_lock
08001188  w    F .text	00000002 RTC_IRQHandler
0800a808 g     F .text	00000026 _ZN8ATParser5writeEPKci
20003578 g       .bss	00000000 _ebss
08001b80 g     F .text	00000036 _ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE
080051b6 g     F .text	00000010 oc_free_string
08005e04 g     F .text	00000090 os_init
08001188  w    F .text	00000002 DMA1_Channel7_IRQHandler
0800112c  w    F .text	0000003e Reset_Handler
08004408 g     F .text	0000001c json_rep_start_root_object
08009aec g     F .text	00000070 TIM_Base_SetConfig
0800ab86 g     F .text	00000036 _ZN14BufferedSerial5txIrqEv
08001188  w    F .text	00000002 CAN1_RX1_IRQHandler
08007fc2 g     F .text	0000001a _copy
0800a3d4 g     F .text	00000034 bc95g_init
20003428 g     O .bss	00000001 sysinit_active
080063c0 g     F .text	0000000a os_mbuf_pool_init
08008384 g     F .text	000000cc tc_sha256_final
08007122 g     F .text	0000001e os_default_irq_asm
08006d1c g     F .text	0000000c os_sched_next_task
08006b1c g     F .text	0000004c os_sched_insert
08007af2 g     F .text	00000020 get_temp_raw_data
08005f38 g     F .text	00000074 os_callout_reset
0800b03c g     F .text	0000005c mfg_init
08004ab0 g     F .text	00000018 oc_ri_remove_client_cb_by_mid
080061a8 g     F .text	00000010 os_dev_reset
080033e0 g     F .text	0000000c _ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h8845cd1bde16499dE
08005536 g     F .text	00000004 hal_bsp_hw_id_len
08001188  w    F .text	00000002 TIM4_IRQHandler
08005054 g     F .text	0000000e coap_set_header_content_format
0800c1e0 g     F .text	00000004 __aeabi_memcpy8
080068c8 g     F .text	00000014 os_mutex_init
08002250 g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h122f9d519f4a246bE
0800ade0 g     F .text	000000ac flash_map_init
0800785c g     F .text	00000010 vprintf
08005da0 g     F .text	0000000c os_started
20000000 g       .bss	00000000 _ram_start
08006cac g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0800912c g     F .text	000000a0 HAL_FLASH_Program
08001188  w    F .text	00000002 I2C1_EV_IRQHandler
0800a7f0 g     F .text	00000018 _ZN8ATParser5flushEv
08004680 g     F .text	00000014 is_sensor_node
2000023c g       .data	00000000 __data_end__
08004c98 g     F .text	00000010 coap_get_mid
08008096 g     F .text	0000001a tc_hmac_init
08001188  w    F .text	00000002 DMA1_Channel6_IRQHandler
0800aaa4 g     F .text	0000001a _ZN8ATParser6printfEPKcz
20003528 g     O .bss	00000004 g_os_time
08001f24 g     F .text	000000b6 _ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17ha6adf4a3b1bf31c9E
08008b5c g     F .text	0000002c hal_uart_init_cbs
08008f44 g     F .text	0000000c hal_watchdog_tickle
20003578 g       .bss	00000000 __bss_end__
08003d8c g     F .text	0000000a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h4a5378243facc467E
08004984 g     F .text	0000002c oc_buffer_init
080063ca g     F .text	0000002a os_mbuf_get
08001188  w    F .text	00000002 TIM3_IRQHandler
08001188  w    F .text	00000002 RCC_IRQHandler
08007a70 g     F .text	00000030 json_helper_set_int
08001188  w    F .text	00000002 TIM1_TRG_COM_IRQHandler
08005024 g     F .text	0000001a coap_send_message
08007aa0 g     F .text	00000040 json_helper_set_text_string
08001188  w    F .text	00000002 DMA1_Channel1_IRQHandler
08001374 g     F .text	00000078 rust_begin_unwind
08006824 g     F .text	00000010 os_msys_reset
08001188 g       .text	00000002 Default_Handler
080091f0 g     F .text	00000024 FLASH_PageErase
080011f4 g     F .text	00000014 _start
08007f46 g     F .text	0000007c tc_hmac_prng_generate
0800c1e4 g     O .text	00000010 AHBPrescTable
0800abcc g     F .text	00000080 _ZN14BufferedSerial5primeEv
08003fa4 g     F .text	00000042 console_printhex
0800bb80 g     F .text	00000034 HAL_ADC_Stop
080090d8 g     F .text	00000054 FLASH_WaitForLastOperation
0800aad8 g     F .text	0000001a _ZN8ATParser4recvEPKcz
080070a0 g     F .text	00000006 os_arch_init_task_stack
080024f2 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17hfa6ff34b8fd07644E
080064f6 g     F .text	00000072 os_mbuf_dup
08006294 g     F .text	0000001a os_eventq_run
08003bba g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u64$GT$3fmt17h1bf045a2a754efdcE
080079f8 g     F .text	00000024 json_helper_set_array
08003ae4 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6fa9611feb1808ceE
08001188  w    F .text	00000002 EXTI15_10_IRQHandler
0800b85c g     F .text	000000c4 HAL_ADC_Start
08001ca4 g     F .text	000000ae _ZN6mynewt4Strn3new17hf631d8ed365ce2adE
08004ac8 g     F .text	000000a4 oc_ri_alloc_client_cb
08002898 g     F .text	00000158 _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E
08007f10 g     F .text	00000036 tc_hmac_prng_reseed
080049b0 g     F .text	00000034 oc_rep_new
200034a0 g     O .bss	00000050 g_idle_task
20000180 g     O .data	00000004 sysinit_panic_cb
08009034 g     F .text	00000030 hal_gpio_deinit_stm
0800992c g     F .text	00000144 HAL_RCC_ClockConfig
200029a0 g     O .bss	00000004 g_os_sanity_check_list
08005704 g     F .text	00000098 sensor_pkg_init
08001c96 g     F .text	0000000e _ZN6mynewt7sysinit17h162e190ad004d957E
08008bc4 g     F .text	00000034 hal_uart_start_tx
0800673a g     F .text	00000032 os_memblock_get
08006c44 g     F .text	00000068 os_sched_wakeup
200031dc g     O .bss	00000004 rx_ptr
0800635c g     F .text	00000026 os_mqueue_get
08006d4c g     F .text	00000010 os_sem_init
08003a0e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E
08007ec8 g     F .text	00000048 tc_hmac_prng_init
08007d7a g     F .text	00000032 mem_init_mbuf_pool
08002c2a g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17hd71f50db4d05698dE
08005c6c g     F .text	00000098 os_default_irq
08009c74 g     F .text	00000044 stm32f1_adc_create
20003518 g     O .bss	00000004 g_os_last_ctx_sw_time
08006d5c g     F .text	00000064 os_sem_release
080072e0 g     F .text	00000048 memcmp
08005af0 g     F .text	00000014 os_arch_init
2000010c g       .coredata	00000000 __coredata_start__
08001c78 g     F .text	00000002 _ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h1ffd6ed576a88ca6E
2000023c g       .corebss	00000000 __ecorebss
0800bd6c g     F .text	0000001a sscanf
0800c1dc  w    F .text	00000002 .hidden __aeabi_ldiv0
08001188  w    F .text	00000002 EXTI9_5_IRQHandler
080051cc g     F .text	0000000c sysinit_start
08001d52 g     F .text	00000102 _ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E
08008a1c g     F .text	00000084 hal_timer_config
08002254 g     F .text	00000008 _ZN4core5panic8Location4file17ha9ce911e26883425E
08006134 g     F .text	00000042 os_dev_open
080045f8 g     F .text	00000050 sensor_network_prepare_post
08001ac2 g     F .text	00000004 _ZN6mynewt3sys7console6buffer17h0c7d2f77d88e1e76E
08001bee g     F .text	00000088 _ZN6mynewt8encoding12coap_context11CoapContext4fail17hbe312cb4cc455036E
08006dc0 g     F .text	000000ac os_sem_pend
08008f2c g     F .text	00000018 hal_watchdog_enable
08008814 g     F .text	00000004 HAL_GetTick
0800503e g     F .text	00000016 coap_set_token
08004728 g     F .text	00000060 get_device_id
08009f88 g     F .text	00000038 HAL_ADC_ErrorCallback
0800491c g     F .text	00000040 oc_allocate_mbuf
08006382 g     F .text	0000003e os_mqueue_put
08004164 g     F .text	00000028 init_sensor_coap
080067ec g     F .text	00000038 os_msys_register
200034f0 g     O .bss	00000004 g_os_idle_ctr
0800ad80 g     F .text	0000003c flash_area_open
08001188  w    F .text	00000002 SPI2_IRQHandler
080041c0 g     F .text	00000028 json_rep_reset
200030dc g     O .bss	00000100 rx_buf
200033e8 g     O .bss	00000010 root_map
08007342 g     F .text	00000010 memset
08001ac2 g     F .text	00000004 _ZN6mynewt3sys7console5print17hc20173b212ba6415E
08001188  w    F .text	00000002 MemManage_Handler
08001020 g       .text	00000000 __isr_vector
08001262 g     F .text	00000112 main
08004010 g     F .text	0000003c console_out_nolock
080030c6 g     F .text	000002e4 _ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E
0800a408 g     F .text	0000000e bc95g_default_cfg
0800acfc g     F .text	00000078 temp_stm32_create
080054c0 g     F .text	00000020 json_encode_array_start
08007ae0 g     F .text	00000012 rust_sysinit
080050e0 g     F .text	0000001c oc_send_buffer
080051d8 g     F .text	0000000c sysinit_end
0800ae8c g     F .text	00000002 modlog_init
080070a6 g     F .text	00000046 SVC_Handler
0800ab02 g     F .text	00000040 _ZN14BufferedSerial4initEPcmS0_mPKc
20003408 g     O .bss	00000020 oc_transports
08009ab0 g     F .text	0000003c HAL_RCC_GetClockConfig
0800b4f0 g     F .text	00000044 hal_flash_read
080044b0 g     F .text	00000018 start_server_transport
08001c7a g     F .text	0000001c _ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h7bf5d80ec9025fc4E
0800bc84 g     F .text	000000e8 HAL_RCCEx_GetPeriphCLKFreq
080062ec g     F .text	00000008 os_eventq_dflt_get
08008aa0 g     F .text	0000001c hal_timer_read
0800ad74 g     F .text	00000002 oc_register_gatt
0800621e g     F .text	00000076 os_eventq_get
08007d54 g     F .text	00000026 temp_stm32_config
0800ab46 g     F .text	0000000c _ZN14BufferedSerial8readableEv
0800644c g     F .text	00000012 os_mbuf_len
08007084 g     F .text	00000006 os_time_ms_to_ticks
20003365 g     O .bss	00000001 g_silence_console
08001188  w    F .text	00000002 DMA1_Channel5_IRQHandler
08006000 g     F .text	00000030 os_callout_wakeup_ticks
08001188  w    F .text	00000002 EXTI4_IRQHandler
0800579c g     F .text	00000016 sensor_lock
0800a78c g     F .text	00000030 _log
08001188  w    F .text	00000002 USB_LP_CAN1_RX0_IRQHandler
20003574 g     O .bss	00000004 flash_map_entries
08006568 g     F .text	00000096 os_mbuf_adj
08003ae4 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E
08001020 g       .imghdr	00000000 __text
08003ae4 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17h136c33dad23d062bE
0800af98 g     F .text	00000080 mfg_seek_next
08001e6e g     F .text	000000b6 _ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h54ccd726782ab7b0E
08007370 g     F .text	00000014 strcmp
080056bc g     F .text	00000038 sensor_mgr_find_next
08006b94 g     F .text	0000000c os_sched_get_current_task
08004050 g     F .text	0000001c console_write
08007154 g     F .text	00000010 lrand48
0800553c g     F .text	0000001c hal_bsp_hw_id
0800ac4c g     F .text	0000000a _ZN14BufferedSerial6attachEPFvPvES0_i
0800118c g     F .text	00000040 SystemInit
08006038 g     F .text	00000006 os_cputime_get32
0800a85c g     F .text	00000050 _ZN8ATParser5vsendEPKcSt9__va_list
08003952 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17h3b71bd20fd2652bfE
080062ae g     F .text	0000003e os_eventq_remove
080054bc g     F .text	00000004 json_encode_array_name
080051f8 g     F .text	00000002 _fini
08004648 g     F .text	0000001e sensor_network_do_post
08006850 g     F .text	00000018 os_msys_num_free
08003a0e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hf8d291ae99884edaE
08001188  w    F .text	00000002 USB_HP_CAN1_TX_IRQHandler
08007352 g     F .text	0000001e sprintf
0800ac78 g     F .text	00000016 _ZN14BufferedSerial4putcEi
08006bac g     F .text	00000024 os_sched
080050fc g     F .text	00000050 oc_send_multicast_message
08008b88 g     F .text	0000003c hal_uart_start_rx
080029f0 g     F .text	000000ec _ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E
0800697c g     F .text	000000dc os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
08001188  w    F .text	00000002 DMA1_Channel3_IRQHandler
08003d96 g     F .text	00000018 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17h35833e1076b6bfecE
080020d0 g     F .text	0000011a _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE
20003534 g     O .bss	00000010 stm32_tmr0
080051fc g     F .text	0000003c json_encode_object_start
08008818 g     F .text	00000004 HAL_InitTick
08004cc4 g     F .text	0000035e coap_serialize_message
20005000 g       .bss	00000000 __StackTop
0800633c g     F .text	00000020 os_mqueue_init
08001188  w    F .text	00000002 TIM1_UP_IRQHandler
08001ae4 g     F .text	0000009c _ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E
08003f04 g     F .text	00000058 console_flush
20000324 g     O .bss	00000004 oc_content_format
0800ace0  w    F .text	0000000e _ZN8MyBufferIcE5clearEv
080022da g     F .text	00000030 _ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE
08001188  w    F .text	00000002 WWDG_IRQHandler
0800801a g     F .text	0000007c tc_hmac_set_key
0800ac8e g     F .text	00000024 _ZN14BufferedSerial5rxIrqEh
0800a6e0 g     F .text	00000024 init_bc95g_server
20003464 g     O .bss	00000020 st_up_osco
0800832c g     F .text	00000058 tc_sha256_update
08005fac g     F .text	00000054 os_callout_tick
0800a704 g     F .text	00000088 bc95g_register_transport
0800e72c g     O .text	00000048 sysflash_map_dflt
08004666 g     F .text	00000018 do_server_post
08001188  w    F .text	00000002 TIM2_IRQHandler
0800112c g       .text	00000000 __isr_vector_end
08005e94 g     F .text	0000001a os_start
0800aabe g     F .text	0000001a _ZN8ATParser4sendEPKcz
0800209a g     F .text	00000012 _ZN6mynewt4libs14sensor_network12prepare_post17hf47b658e9dd92751E
08007fdc g     F .text	00000004 _set
08008c20 g     F .text	00000298 hal_uart_config
0800588c g     F .text	0000002a sensor_mgr_register
20000240 g     O .bss	00000040 _ZN6mynewt8encoding12coap_context12COAP_CONTEXT17hfe1f05c9061f8395E
08004370 g     F .text	00000098 do_sensor_post
0800b7ec g     F .text	00000070 ADC_Enable
08001188  w    F .text	00000002 TIM1_BRK_IRQHandler
0800a7e2 g     F .text	00000006 _ZN8ATParser4putcEc
20005000 g       .imghdr	00000000 _estack
08007a38 g     F .text	0000001c json_helper_object_array_start_item
08006682 g     F .text	00000038 os_mbuf_concat
08001188  w    F .text	00000002 EXTI1_IRQHandler
0800b098 g     F .text	00000010 mfg_open
2000018c g     O .data	00000008 g_os_run_list
2000023c g       .data	00000000 _edata
080011cc g     F .text	00000028 NVIC_Relocate
0800ad76 g     F .text	00000002 oc_register_ip4
08003c22 g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E
0800552c g     F .text	0000000a cbor_encoder_init
08007dac g     F .text	00000052 sysinit_app
080056b0 g     F .text	0000000c sensor_mgr_unlock
20000a5c g     O .bss	00000004 os_flags
08005238 g     F .text	00000054 json_encode_object_key
08004a84 g     F .text	0000002c oc_ri_mem_init
080090b4 g     F .text	00000024 HAL_FLASH_Unlock
08005aa8 g     F .text	00000006 os_arch_restore_sr
0800528c g     F .text	00000064 json_encode_object_entry
08007bdc g     F .text	0000006c temp_stm32_init
08003952 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE
20005000 g       *ABS*	00000000 __StackLimit
200034f4 g     O .bss	00000004 g_os_started
08006176 g     F .text	00000030 os_dev_close
200030d8 g     O .bss	00000004 debug_bc95g
08001188  w    F .text	00000002 USART2_IRQHandler
080044c8 g     F .text	00000078 sensor_network_register_transport
0800959c g     F .text	00000318 HAL_RCC_OscConfig
08004a18 g     F .text	00000024 oc_rep_init
08001020 g     O .text	00000000 g_pfnVectors
0800225c g     F .text	00000004 _ZN4core5panic8Location4line17h997c0352f671f211E
0800b67c g     F .text	0000004e ADC_DMAConvCplt
0800549c g     F .text	00000020 json_encode_object_finish
08006432 g     F .text	0000001a os_mbuf_free_chain
200033f8 g     O .bss	00000010 g_encoder
08006868 g     F .text	00000060 os_msys_init
08001188  w    F .text	00000002 I2C2_ER_IRQHandler
08001188  w    F .text	00000002 DMA1_Channel2_IRQHandler
08006f9c g     F .text	0000000c os_time_get
08002e4c g     F .text	00000248 _ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE
08001bb6 g     F .text	00000038 _ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E
08001ae0 g     F .text	00000004 _ZN6mynewt3sys7console5flush17h2f347bab6c242839E
08001ac6 g     F .text	00000014 _ZN6mynewt3sys7console10print_strn17h03267ec31f7327aaE
20003488 g     O .bss	00000018 sensor_base_ts
080055a4 g     F .text	0000002c sensor_mgr_match_bytype
080041e8 g     F .text	00000038 json_rep_new
080063f4 g     F .text	0000002e os_mbuf_get_pkthdr
0800c1dc  w    F .text	00000002 .hidden __aeabi_idiv0
08009b5c g     F .text	00000018 TIM_CCxChannelCmd
08001188  w    F .text	00000002 CAN1_SCE_IRQHandler
0800b6ca  w    F .text	00000002 HAL_ADC_ConvHalfCpltCallback
08001188  w    F .text	00000002 FLASH_IRQHandler
0800418c g     F .text	00000034 init_sensor_post
08006e6c g     F .text	000000e4 os_task_init
08001188  w    F .text	00000002 BusFault_Handler
08001188  w    F .text	00000002 USART1_IRQHandler
08003d96 g     F .text	00000018 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h8362f63c9a899390E
08007394 g     F .text	00000010 strlen
08006060 g     F .text	00000088 os_dev_create
0800676c g     F .text	0000001e os_memblock_put_from_cb
080061b8 g     F .text	00000010 os_eventq_init
08006fa8 g     F .text	00000078 os_time_advance
080049e4 g     F .text	00000010 oc_rep_reset
08006d28 g     F .text	00000024 os_sched_resort
08001fda g     F .text	0000000e _ZN6mynewt4libs14sensor_network22start_server_transport17hacf1950a2bf8e132E
08001ada g     F .text	00000006 _ZN6mynewt3sys7console8printhex17h434896f5fcfc2044E
080080b0 g     F .text	0000000c tc_hmac_update
0800b4cc g     F .text	00000024 hal_flash_init
08001188  w    F .text	00000002 I2C1_ER_IRQHandler
080033b2 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE
0800b6d6 g     F .text	0000001a ADC_DMAError
080058b6 g     F .text	0000001a sensor_init
0800a7bc g     F .text	00000026 _ZN8ATParser4initER14BufferedSerialPciPKcib
08008514 g     F .text	00000022 adc_chan_config
08003bba g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E
20003544 g     O .bss	0000000c g_wdt_cfg
080060e8 g     F .text	00000028 os_dev_initialize_all
08007c48 g     F .text	0000008c temp_stm32_get_raw_temperature
080039b0 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E
0800a8ac g     F .text	000001f8 _ZN8ATParser5vrecvEPKcSt9__va_list
20000194 g     O .data	00000008 g_os_sleep_list
0800786c g     F .text	00000058 jrand48
08008470 g     F .text	000000a4 hal_bsp_init
08001e54 g     F .text	0000000a _ZN6mynewt6kernel2os10eventq_run17h00ed7b6e5ed865a7E
08005eb0 g     F .text	00000030 os_pkg_init
0800a416 g     F .text	00000004 bc95g_config
08003a0e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h2d12e58c2cdf8b30E
08009000 g     F .text	00000034 hal_gpio_init_stm
08001fe8 g     F .text	000000b2 _ZN6mynewt4libs14sensor_network16init_server_post17h864e17c9ed4d984fE
080080bc g     F .text	00000050 tc_hmac_final
08006a8c g     F .text	0000000e os_sanity_check_init
0800e79c g       *ABS*	00000000 __ecoredata
08008eb8 g     F .text	0000001c hal_uart_init
08001188  w    F .text	00000002 USBWakeUp_IRQHandler
080077f8 g     F .text	00000004 vfprintf
080020ac g     F .text	00000010 _ZN6mynewt4libs14sensor_network14do_server_post17hc5b5f69d66a9019aE
0800ba3c g     F .text	00000044 ADC_ConversionStop_Disable
0800ad7c g     F .text	00000002 oc_register_serial
0800a7e8 g     F .text	00000008 _ZN8ATParser5fgetcEv
0800ab42 g     F .text	00000004 _ZN14BufferedSerial9configureEi
080072b4 g     F .text	0000002c free
0800b67a  w    F .text	00000002 HAL_ADC_ConvCpltCallback
0800b674 g     F .text	00000006 HAL_ADC_GetValue
0800ad7a g     F .text	00000002 oc_register_lora



Disassembly of section .text:

08001020 <__isr_vector>:
 8001020:	20005000 	.word	0x20005000
 8001024:	0800112d 	.word	0x0800112d
 8001028:	08001189 	.word	0x08001189
 800102c:	08001189 	.word	0x08001189
 8001030:	08001189 	.word	0x08001189
 8001034:	08001189 	.word	0x08001189
 8001038:	08001189 	.word	0x08001189
	...
 800104c:	080070a7 	.word	0x080070a7
 8001050:	08001189 	.word	0x08001189
 8001054:	00000000 	.word	0x00000000
 8001058:	080070ed 	.word	0x080070ed
 800105c:	08007117 	.word	0x08007117
 8001060:	08001189 	.word	0x08001189
 8001064:	08001189 	.word	0x08001189
 8001068:	08001189 	.word	0x08001189
 800106c:	08001189 	.word	0x08001189
 8001070:	08001189 	.word	0x08001189
 8001074:	08001189 	.word	0x08001189
 8001078:	08001189 	.word	0x08001189
 800107c:	08001189 	.word	0x08001189
 8001080:	08001189 	.word	0x08001189
 8001084:	08001189 	.word	0x08001189
 8001088:	08001189 	.word	0x08001189
 800108c:	08001189 	.word	0x08001189
 8001090:	08001189 	.word	0x08001189
 8001094:	08001189 	.word	0x08001189
 8001098:	08001189 	.word	0x08001189
 800109c:	08001189 	.word	0x08001189
 80010a0:	08001189 	.word	0x08001189
 80010a4:	08001189 	.word	0x08001189
 80010a8:	08001189 	.word	0x08001189
 80010ac:	08001189 	.word	0x08001189
 80010b0:	08001189 	.word	0x08001189
 80010b4:	08001189 	.word	0x08001189
 80010b8:	08001189 	.word	0x08001189
 80010bc:	08001189 	.word	0x08001189
 80010c0:	08001189 	.word	0x08001189
 80010c4:	08001189 	.word	0x08001189
 80010c8:	08001189 	.word	0x08001189
 80010cc:	08001189 	.word	0x08001189
 80010d0:	08001189 	.word	0x08001189
 80010d4:	08001189 	.word	0x08001189
 80010d8:	08001189 	.word	0x08001189
 80010dc:	08001189 	.word	0x08001189
 80010e0:	08001189 	.word	0x08001189
 80010e4:	08001189 	.word	0x08001189
 80010e8:	08001189 	.word	0x08001189
 80010ec:	08001189 	.word	0x08001189
 80010f0:	08001189 	.word	0x08001189
 80010f4:	08001189 	.word	0x08001189
 80010f8:	08001189 	.word	0x08001189
 80010fc:	08001189 	.word	0x08001189
 8001100:	08001189 	.word	0x08001189
 8001104:	08001189 	.word	0x08001189
 8001108:	08001189 	.word	0x08001189
	...
 8001128:	f108f85f 	.word	0xf108f85f

0800112c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800112c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800112e:	e003      	b.n	8001138 <LoopCopyDataInit>

08001130 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <LoopFillZeroCoreBss+0x10>)
  ldr r3, [r3, r1]
 8001132:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001134:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001136:	3104      	adds	r1, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <LoopFillZeroCoreBss+0x14>)
  ldr r3, =_edata
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <LoopFillZeroCoreBss+0x18>)
  adds r2, r0, r1
 800113c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001140:	d3f6      	bcc.n	8001130 <CopyDataInit>

  ldr r2, =_sbss
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <LoopFillZeroCoreBss+0x1c>)
  b LoopFillZerobss
 8001144:	e002      	b.n	800114c <LoopFillZerobss>

08001146 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001148:	f842 3b04 	str.w	r3, [r2], #4

0800114c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <LoopFillZeroCoreBss+0x20>)
  cmp r2, r3
 800114e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001150:	d3f9      	bcc.n	8001146 <FillZerobss>

/* Mynewt specific corebss clearing. */
  ldr   r2, =__corebss_start__
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <LoopFillZeroCoreBss+0x24>)
  b     LoopFillZeroCoreBss
 8001154:	e002      	b.n	800115c <LoopFillZeroCoreBss>

08001156 <FillZeroCoreBss>:

/* Zero fill the bss segment. */
FillZeroCoreBss:
  movs  r3, #0
 8001156:	2300      	movs	r3, #0
  str   r3, [r2], #4
 8001158:	f842 3b04 	str.w	r3, [r2], #4

0800115c <LoopFillZeroCoreBss>:

LoopFillZeroCoreBss:
  ldr   r3, =__corebss_end__
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <LoopFillZeroCoreBss+0x28>)
  cmp   r2, r3
 800115e:	429a      	cmp	r2, r3
  bcc   FillZeroCoreBss
 8001160:	d3f9      	bcc.n	8001156 <FillZeroCoreBss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001162:	f000 f813 	bl	800118c <SystemInit>
/* Call libc's entry point.*/
  bl  _start
 8001166:	f000 f845 	bl	80011f4 <_start>
 800116a:	0000      	.short	0x0000
  ldr r3, =_sidata
 800116c:	0800e79c 	.word	0x0800e79c
  ldr r0, =_sdata
 8001170:	20000110 	.word	0x20000110
  ldr r3, =_edata
 8001174:	2000023c 	.word	0x2000023c
  ldr r2, =_sbss
 8001178:	20000240 	.word	0x20000240
  ldr r3, = _ebss
 800117c:	20003578 	.word	0x20003578
  ldr   r2, =__corebss_start__
 8001180:	2000023c 	.word	0x2000023c
  ldr   r3, =__corebss_end__
 8001184:	2000023c 	.word	0x2000023c

08001188 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_2_IRQHandler>
	...

0800118c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <SystemInit+0x38>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	f042 0201 	orr.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <SystemInit+0x3c>)
 800119a:	400a      	ands	r2, r1
 800119c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011a8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80011b8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80011ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80011be:	609a      	str	r2, [r3, #8]
    SystemInit_ExtMemCtl(); 
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Relocate the vector table */
  NVIC_Relocate();
 80011c0:	f000 b804 	b.w	80011cc <NVIC_Relocate>
 80011c4:	40021000 	.word	0x40021000
 80011c8:	f8ff0000 	.word	0xf8ff0000

080011cc <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <NVIC_Relocate+0x1c>)
 80011ce:	4907      	ldr	r1, [pc, #28]	; (80011ec <NVIC_Relocate+0x20>)
 80011d0:	428b      	cmp	r3, r1
 80011d2:	d005      	beq.n	80011e0 <NVIC_Relocate+0x14>
 80011d4:	2200      	movs	r2, #0
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
            new_location[i] = current_location[i];
 80011d6:	5888      	ldr	r0, [r1, r2]
 80011d8:	5098      	str	r0, [r3, r2]
 80011da:	3204      	adds	r2, #4
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
 80011dc:	2aec      	cmp	r2, #236	; 0xec
 80011de:	d1fa      	bne.n	80011d6 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <NVIC_Relocate+0x24>)
 80011e2:	6093      	str	r3, [r2, #8]
#endif
}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000000 	.word	0x20000000
 80011ec:	08001020 	.word	0x08001020
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
 80011f4:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
 80011f6:	4803      	ldr	r0, [pc, #12]	; (8001204 <_start+0x10>)
 80011f8:	f004 fe04 	bl	8005e04 <os_init>
    os_start();
#endif
}
 80011fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_start();
 8001200:	f004 be48 	b.w	8005e94 <os_start>
 8001204:	08001263 	.word	0x08001263

08001208 <_init>:

void
_init(void)
{
}
 8001208:	4770      	bx	lr

0800120a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0bdb5d41856bc834E>:
 800120a:	460a      	mov	r2, r1
 800120c:	e9d0 3100 	ldrd	r3, r1, [r0]
 8001210:	4618      	mov	r0, r3
 8001212:	f002 b8e5 	b.w	80033e0 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h8845cd1bde16499dE>

08001216 <_ZN4core6result13unwrap_failed17h2598843d1764ab0eE>:
 8001216:	b08e      	sub	sp, #56	; 0x38
 8001218:	ab01      	add	r3, sp, #4
 800121a:	c307      	stmia	r3!, {r0, r1, r2}
 800121c:	f242 00d1 	movw	r0, #8401	; 0x20d1
 8001220:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001224:	900d      	str	r0, [sp, #52]	; 0x34
 8001226:	a803      	add	r0, sp, #12
 8001228:	900c      	str	r0, [sp, #48]	; 0x30
 800122a:	f241 200b 	movw	r0, #4619	; 0x120b
 800122e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001232:	a90a      	add	r1, sp, #40	; 0x28
 8001234:	900b      	str	r0, [sp, #44]	; 0x2c
 8001236:	a801      	add	r0, sp, #4
 8001238:	900a      	str	r0, [sp, #40]	; 0x28
 800123a:	2002      	movs	r0, #2
 800123c:	9009      	str	r0, [sp, #36]	; 0x24
 800123e:	9108      	str	r1, [sp, #32]
 8001240:	2100      	movs	r1, #0
 8001242:	9107      	str	r1, [sp, #28]
 8001244:	e9cd 0105 	strd	r0, r1, [sp, #20]
 8001248:	f24c 2000 	movw	r0, #49664	; 0xc200
 800124c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001250:	f24c 2128 	movw	r1, #49704	; 0xc228
 8001254:	9004      	str	r0, [sp, #16]
 8001256:	a804      	add	r0, sp, #16
 8001258:	f6c0 0100 	movt	r1, #2048	; 0x800
 800125c:	f001 f83d 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001260:	defe      	udf	#254	; 0xfe

08001262 <main>:
    Ok(())
}

/// main() will be called at Mynewt startup. It replaces the C version of the `main()` function.
#[no_mangle]                 // Don't mangle the name "main"
extern "C" fn main() -> ! {  // Declare `extern "C"` because it will be called by Mynewt
 8001262:	b096      	sub	sp, #88	; 0x58
    // Initialise Mynewt OS
    mynewt::sysinit();
 8001264:	f000 fd17 	bl	8001c96 <_ZN6mynewt7sysinit17h162e190ad004d957E>
    console::print("on_start\n");
 8001268:	f24c 2038 	movw	r0, #49720	; 0xc238
 800126c:	2109      	movs	r1, #9
 800126e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001272:	f000 fc26 	bl	8001ac2 <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
    console::print("start_sensor_listener\n");
 8001276:	f24c 20a2 	movw	r0, #49826	; 0xc2a2
 800127a:	2116      	movs	r1, #22
 800127c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001280:	f000 fc1f 	bl	8001ac2 <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
    sensor::set_poll_rate_ms(sensor_name, poll_time) ? ;
 8001284:	f24c 2050 	movw	r0, #49744	; 0xc250
 8001288:	f242 7110 	movw	r1, #10000	; 0x2710
 800128c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001290:	f000 fe48 	bl	8001f24 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17ha6adf4a3b1bf31c9E>
 8001294:	2801      	cmp	r0, #1
 8001296:	d164      	bne.n	8001362 <main+0x100>
 8001298:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    let sensor_driver = sensor::mgr_find_next_bydevname(sensor_name, null_mut()) ? ;
 800129c:	f24c 2150 	movw	r1, #49744	; 0xc250
 80012a0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80012a4:	2200      	movs	r2, #0
 80012a6:	4640      	mov	r0, r8
 80012a8:	f000 fde1 	bl	8001e6e <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h54ccd726782ab7b0E>
 80012ac:	e9dd 0a0e 	ldrd	r0, sl, [sp, #56]	; 0x38
 80012b0:	2801      	cmp	r0, #1
 80012b2:	d103      	bne.n	80012bc <main+0x5a>
 80012b4:	4652      	mov	r2, sl
    start_sensor_listener(SENSOR_DEVICE, TEMP_SENSOR_KEY, TEMP_SENSOR_TYPE, SENSOR_POLL_TIME) ? ;
 80012b6:	2a01      	cmp	r2, #1
 80012b8:	d031      	beq.n	800131e <main+0xbc>
 80012ba:	e053      	b.n	8001364 <main+0x102>
    if sensor_driver != null_mut() {
 80012bc:	f1ba 0f00 	cmp.w	sl, #0
 80012c0:	d02d      	beq.n	800131e <main+0xbc>
        let listener = sensor::new_sensor_listener(sensor_key, sensor_type, handle_sensor_data) ? ;
 80012c2:	f241 30ed 	movw	r0, #5101	; 0x13ed
 80012c6:	f24c 2160 	movw	r1, #49760	; 0xc260
 80012ca:	f6c0 0000 	movt	r0, #2048	; 0x800
 80012ce:	f6c0 0100 	movt	r1, #2048	; 0x800
 80012d2:	9000      	str	r0, [sp, #0]
 80012d4:	4640      	mov	r0, r8
 80012d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012da:	2300      	movs	r3, #0
 80012dc:	f000 fadb 	bl	8001896 <_ZN6mynewt2hw6sensor19new_sensor_listener17h9b5b837d061ad057E>
 80012e0:	f108 0908 	add.w	r9, r8, #8
 80012e4:	e9dd c20e 	ldrd	ip, r2, [sp, #56]	; 0x38
 80012e8:	f10d 0e20 	add.w	lr, sp, #32
 80012ec:	e899 00fa 	ldmia.w	r9, {r1, r3, r4, r5, r6, r7}
 80012f0:	f1bc 0f01 	cmp.w	ip, #1
 80012f4:	4670      	mov	r0, lr
 80012f6:	c0fa      	stmia	r0!, {r1, r3, r4, r5, r6, r7}
 80012f8:	d00f      	beq.n	800131a <main+0xb8>
 80012fa:	a802      	add	r0, sp, #8
 80012fc:	e89e 00fc 	ldmia.w	lr, {r2, r3, r4, r5, r6, r7}
 8001300:	4601      	mov	r1, r0
 8001302:	c1fc      	stmia	r1!, {r2, r3, r4, r5, r6, r7}
        sensor::register_listener(sensor_driver, listener) ? ;
 8001304:	4641      	mov	r1, r8
 8001306:	e890 00fc 	ldmia.w	r0, {r2, r3, r4, r5, r6, r7}
 800130a:	4650      	mov	r0, sl
 800130c:	c1fc      	stmia	r1!, {r2, r3, r4, r5, r6, r7}
 800130e:	4641      	mov	r1, r8
 8001310:	f000 fa71 	bl	80017f6 <_ZN6mynewt2hw6sensor17register_listener17hc8145e7a396d72e6E>
 8001314:	4602      	mov	r2, r0
 8001316:	2801      	cmp	r0, #1
 8001318:	d001      	beq.n	800131e <main+0xbc>
    start_sensor_listener(SENSOR_DEVICE, TEMP_SENSOR_KEY, TEMP_SENSOR_TYPE, SENSOR_POLL_TIME) ? ;
 800131a:	2a01      	cmp	r2, #1
 800131c:	d122      	bne.n	8001364 <main+0x102>
    sensor_network::start_server_transport() ? ;
 800131e:	f000 fe5c 	bl	8001fda <_ZN6mynewt4libs14sensor_network22start_server_transport17hacf1950a2bf8e132E>
 8001322:	2801      	cmp	r0, #1
 8001324:	d11d      	bne.n	8001362 <main+0x100>
 8001326:	ac0e      	add	r4, sp, #56	; 0x38
        .expect("on_start fail");

    // Mynewt event loop
    loop {                         // Loop forever...
        os::eventq_run(            // Processing events...
            os::eventq_dflt_get()  // From default event queue
 8001328:	4620      	mov	r0, r4
 800132a:	f000 fd98 	bl	8001e5e <_ZN6mynewt6kernel2os15eventq_dflt_get17h0173394645c51d0dE>
 800132e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8001330:	2801      	cmp	r0, #1
 8001332:	d00d      	beq.n	8001350 <main+0xee>
 8001334:	980f      	ldr	r0, [sp, #60]	; 0x3c
        os::eventq_run(            // Processing events...
 8001336:	f000 fd8d 	bl	8001e54 <_ZN6mynewt6kernel2os10eventq_run17h00ed7b6e5ed865a7E>
 800133a:	2801      	cmp	r0, #1
 800133c:	d0f4      	beq.n	8001328 <main+0xc6>
 800133e:	4602      	mov	r2, r0
 8001340:	f24c 2081 	movw	r0, #49793	; 0xc281
 8001344:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001348:	2108      	movs	r1, #8
 800134a:	f7ff ff64 	bl	8001216 <_ZN4core6result13unwrap_failed17h2598843d1764ab0eE>
 800134e:	defe      	udf	#254	; 0xfe
 8001350:	f24c 2079 	movw	r0, #49785	; 0xc279
 8001354:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001356:	f6c0 0000 	movt	r0, #2048	; 0x800
 800135a:	2108      	movs	r1, #8
 800135c:	f7ff ff5b 	bl	8001216 <_ZN4core6result13unwrap_failed17h2598843d1764ab0eE>
 8001360:	defe      	udf	#254	; 0xfe
 8001362:	4602      	mov	r2, r0
 8001364:	f24c 206c 	movw	r0, #49772	; 0xc26c
 8001368:	210d      	movs	r1, #13
 800136a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800136e:	f7ff ff52 	bl	8001216 <_ZN4core6result13unwrap_failed17h2598843d1764ab0eE>
 8001372:	defe      	udf	#254	; 0xfe

08001374 <rust_begin_unwind>:
    // Never comes here
}

/// This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
 8001374:	4604      	mov	r4, r0
    // Display the filename and line number in the Semihosting Console
    console::print("panic ");
 8001376:	f24c 2091 	movw	r0, #49809	; 0xc291
 800137a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800137e:	2106      	movs	r1, #6
 8001380:	f000 fb9f 	bl	8001ac2 <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
    if let Some(location) = info.location() {
 8001384:	4620      	mov	r0, r4
 8001386:	f000 ff63 	bl	8002250 <_ZN4core5panic9PanicInfo8location17h122f9d519f4a246bE>
 800138a:	b318      	cbz	r0, 80013d4 <rust_begin_unwind+0x60>
 800138c:	4604      	mov	r4, r0
        let file = location.file();
 800138e:	f000 ff61 	bl	8002254 <_ZN4core5panic8Location4file17ha9ce911e26883425E>
 8001392:	4605      	mov	r5, r0
        let line = location.line();
 8001394:	4620      	mov	r0, r4
        let file = location.file();
 8001396:	460e      	mov	r6, r1
        let line = location.line();
 8001398:	f000 ff60 	bl	800225c <_ZN4core5panic8Location4line17h997c0352f671f211E>
 800139c:	4604      	mov	r4, r0
        console::print("at ");       console::buffer(&file);
 800139e:	f24c 209e 	movw	r0, #49822	; 0xc29e
 80013a2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80013a6:	2103      	movs	r1, #3
 80013a8:	f000 fb8b 	bl	8001ac2 <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
 80013ac:	4628      	mov	r0, r5
 80013ae:	4631      	mov	r1, r6
 80013b0:	f000 fb87 	bl	8001ac2 <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
        console::print(" line 0x");  console::printhex(line as u8);  // TODO: Print in decimal not hex. Allow more than 255 lines.
 80013b4:	f24c 2089 	movw	r0, #49801	; 0xc289
 80013b8:	2108      	movs	r1, #8
 80013ba:	f6c0 0000 	movt	r0, #2048	; 0x800
 80013be:	f000 fb80 	bl	8001ac2 <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
 80013c2:	4620      	mov	r0, r4
 80013c4:	f000 fb89 	bl	8001ada <_ZN6mynewt3sys7console8printhex17h434896f5fcfc2044E>
        console::print("\n");       console::flush();
 80013c8:	f24c 20a1 	movw	r0, #49825	; 0xc2a1
 80013cc:	2101      	movs	r1, #1
 80013ce:	f6c0 0000 	movt	r0, #2048	; 0x800
 80013d2:	e004      	b.n	80013de <rust_begin_unwind+0x6a>
    } else {
        console::print("no loc\n");  console::flush();
 80013d4:	f24c 2097 	movw	r0, #49815	; 0xc297
 80013d8:	2107      	movs	r1, #7
 80013da:	f6c0 0000 	movt	r0, #2048	; 0x800
 80013de:	f000 fb70 	bl	8001ac2 <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
 80013e2:	f000 fb7d 	bl	8001ae0 <_ZN6mynewt3sys7console5flush17h2f347bab6c242839E>
        () => unsafe {
            extern "C" {
                fn __bkpt();
            }

            __bkpt();
 80013e6:	f000 f918 	bl	800161a <__bkpt>
    }
    // Pause in the debugger
    bkpt();
    //  Loop forever so that device won't restart
    loop {}
 80013ea:	e7fe      	b.n	80013ea <rust_begin_unwind+0x76>

080013ec <_ZN3app18handle_sensor_data17hf2529d913b12669cE>:
fn handle_sensor_data(sensor_data: _) -> MynewtResult<()> {
 80013ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f0:	b08b      	sub	sp, #44	; 0x2c
 80013f2:	4604      	mov	r4, r0
    console::print("handle_sensor_data\n");
 80013f4:	f24c 20b8 	movw	r0, #49848	; 0xc2b8
 80013f8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80013fc:	2113      	movs	r1, #19
 80013fe:	f000 fb60 	bl	8001ac2 <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
    console::print("send_sensor_data\n");
 8001402:	f24c 20cb 	movw	r0, #49867	; 0xc2cb
 8001406:	2111      	movs	r1, #17
 8001408:	f6c0 0000 	movt	r0, #2048	; 0x800
 800140c:	f000 fb59 	bl	8001ac2 <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
 8001410:	a804      	add	r0, sp, #16
    let device_id = &sensor_network::get_device_id() ? ;
 8001412:	f000 fe53 	bl	80020bc <_ZN6mynewt4libs14sensor_network13get_device_id17h087866bad0e5b5f0E>
 8001416:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 800141a:	2901      	cmp	r1, #1
 800141c:	f000 80fa 	beq.w	8001614 <_ZN3app18handle_sensor_data17hf2529d913b12669cE+0x228>
 8001420:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8001424:	ab01      	add	r3, sp, #4
 8001426:	c307      	stmia	r3!, {r0, r1, r2}
    let network_ready = sensor_network::init_server_post(DEFAULT_URI) ? ;
 8001428:	f24c 21e0 	movw	r1, #49888	; 0xc2e0
 800142c:	a804      	add	r0, sp, #16
 800142e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001432:	f000 fdd9 	bl	8001fe8 <_ZN6mynewt4libs14sensor_network16init_server_post17h864e17c9ed4d984fE>
 8001436:	9804      	ldr	r0, [sp, #16]
 8001438:	b2c1      	uxtb	r1, r0
 800143a:	2901      	cmp	r1, #1
 800143c:	f000 80d4 	beq.w	80015e8 <_ZN3app18handle_sensor_data17hf2529d913b12669cE+0x1fc>
    if network_ready {
 8001440:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
 8001444:	f000 80e5 	beq.w	8001612 <_ZN3app18handle_sensor_data17hf2529d913b12669cE+0x226>
 8001448:	a804      	add	r0, sp, #16
        let _payload = coap!( @json {
 800144a:	2132      	movs	r1, #50	; 0x32
 800144c:	f000 fe25 	bl	800209a <_ZN6mynewt4libs14sensor_network12prepare_post17hf47b658e9dd92751E>
 8001450:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001454:	2801      	cmp	r0, #1
 8001456:	f000 80c7 	beq.w	80015e8 <_ZN3app18handle_sensor_data17hf2529d913b12669cE+0x1fc>
 800145a:	f002 ffd5 	bl	8004408 <json_rep_start_root_object>
 800145e:	f240 2540 	movw	r5, #576	; 0x240
 8001462:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8001466:	4628      	mov	r0, r5
 8001468:	f000 fc05 	bl	8001c76 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h594cb8d9aced4d5eE>
 800146c:	f24c 21ec 	movw	r1, #49900	; 0xc2ec
 8001470:	4606      	mov	r6, r0
 8001472:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001476:	4628      	mov	r0, r5
 8001478:	2207      	movs	r2, #7
 800147a:	f000 fb81 	bl	8001b80 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 800147e:	4601      	mov	r1, r0
 8001480:	4630      	mov	r0, r6
 8001482:	f006 fab9 	bl	80079f8 <json_helper_set_array>
 8001486:	f24c 28f3 	movw	r8, #49907	; 0xc2f3
 800148a:	4628      	mov	r0, r5
 800148c:	f6c0 0800 	movt	r8, #2048	; 0x800
 8001490:	220d      	movs	r2, #13
 8001492:	4641      	mov	r1, r8
 8001494:	f000 fb74 	bl	8001b80 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 8001498:	f006 face 	bl	8007a38 <json_helper_object_array_start_item>
 800149c:	af08      	add	r7, sp, #32
 800149e:	f24c 3100 	movw	r1, #49920	; 0xc300
 80014a2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80014a6:	2204      	movs	r2, #4
 80014a8:	4638      	mov	r0, r7
 80014aa:	f000 fbfb 	bl	8001ca4 <_ZN6mynewt4Strn3new17hf631d8ed365ce2adE>
 80014ae:	ae04      	add	r6, sp, #16
 80014b0:	f24c 3104 	movw	r1, #49924	; 0xc304
 80014b4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80014b8:	2207      	movs	r2, #7
 80014ba:	4630      	mov	r0, r6
 80014bc:	f000 fbf2 	bl	8001ca4 <_ZN6mynewt4Strn3new17hf631d8ed365ce2adE>
 80014c0:	4628      	mov	r0, r5
 80014c2:	4639      	mov	r1, r7
 80014c4:	4632      	mov	r2, r6
 80014c6:	f000 fb0d 	bl	8001ae4 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E>
 80014ca:	ae04      	add	r6, sp, #16
 80014cc:	f24c 310b 	movw	r1, #49931	; 0xc30b
 80014d0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80014d4:	2206      	movs	r2, #6
 80014d6:	4630      	mov	r0, r6
 80014d8:	f000 fbe4 	bl	8001ca4 <_ZN6mynewt4Strn3new17hf631d8ed365ce2adE>
 80014dc:	aa01      	add	r2, sp, #4
 80014de:	4628      	mov	r0, r5
 80014e0:	4631      	mov	r1, r6
 80014e2:	f000 faff 	bl	8001ae4 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E>
 80014e6:	4628      	mov	r0, r5
 80014e8:	4641      	mov	r1, r8
 80014ea:	220d      	movs	r2, #13
 80014ec:	f000 fb48 	bl	8001b80 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 80014f0:	f006 fab0 	bl	8007a54 <json_helper_object_array_end_item>
 80014f4:	6860      	ldr	r0, [r4, #4]
 80014f6:	2801      	cmp	r0, #1
 80014f8:	d152      	bne.n	80015a0 <_ZN3app18handle_sensor_data17hf2529d913b12669cE+0x1b4>
 80014fa:	f240 2a40 	movw	sl, #576	; 0x240
 80014fe:	f24c 28f3 	movw	r8, #49907	; 0xc2f3
 8001502:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8001506:	f6c0 0800 	movt	r8, #2048	; 0x800
 800150a:	4650      	mov	r0, sl
 800150c:	4641      	mov	r1, r8
 800150e:	220d      	movs	r2, #13
 8001510:	f8d4 9008 	ldr.w	r9, [r4, #8]
 8001514:	f000 fb34 	bl	8001b80 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 8001518:	f006 fa8e 	bl	8007a38 <json_helper_object_array_start_item>
 800151c:	f24c 3011 	movw	r0, #49937	; 0xc311
 8001520:	2103      	movs	r1, #3
 8001522:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001526:	f000 fba7 	bl	8001c78 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h1ffd6ed576a88ca6E>
 800152a:	4606      	mov	r6, r0
 800152c:	6820      	ldr	r0, [r4, #0]
 800152e:	460f      	mov	r7, r1
 8001530:	f000 fba3 	bl	8001c7a <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h7bf5d80ec9025fc4E>
 8001534:	4604      	mov	r4, r0
 8001536:	4650      	mov	r0, sl
 8001538:	460d      	mov	r5, r1
 800153a:	f000 fb9c 	bl	8001c76 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h594cb8d9aced4d5eE>
 800153e:	4683      	mov	fp, r0
 8001540:	4650      	mov	r0, sl
 8001542:	4631      	mov	r1, r6
 8001544:	463a      	mov	r2, r7
 8001546:	f000 fb1b 	bl	8001b80 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 800154a:	4606      	mov	r6, r0
 800154c:	4650      	mov	r0, sl
 800154e:	4621      	mov	r1, r4
 8001550:	462a      	mov	r2, r5
 8001552:	f000 fb30 	bl	8001bb6 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E>
 8001556:	4602      	mov	r2, r0
 8001558:	4658      	mov	r0, fp
 800155a:	4631      	mov	r1, r6
 800155c:	f006 faa0 	bl	8007aa0 <json_helper_set_text_string>
 8001560:	f24c 3014 	movw	r0, #49940	; 0xc314
 8001564:	2105      	movs	r1, #5
 8001566:	f6c0 0000 	movt	r0, #2048	; 0x800
 800156a:	f000 fb85 	bl	8001c78 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h1ffd6ed576a88ca6E>
 800156e:	4604      	mov	r4, r0
 8001570:	4650      	mov	r0, sl
 8001572:	460d      	mov	r5, r1
 8001574:	f000 fb7f 	bl	8001c76 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h594cb8d9aced4d5eE>
 8001578:	4606      	mov	r6, r0
 800157a:	4650      	mov	r0, sl
 800157c:	4621      	mov	r1, r4
 800157e:	462a      	mov	r2, r5
 8001580:	f000 fafe 	bl	8001b80 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 8001584:	4601      	mov	r1, r0
 8001586:	4630      	mov	r0, r6
 8001588:	464a      	mov	r2, r9
 800158a:	2300      	movs	r3, #0
 800158c:	f006 fa70 	bl	8007a70 <json_helper_set_int>
 8001590:	4650      	mov	r0, sl
 8001592:	4641      	mov	r1, r8
 8001594:	220d      	movs	r2, #13
 8001596:	f000 faf3 	bl	8001b80 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 800159a:	f006 fa5b 	bl	8007a54 <json_helper_object_array_end_item>
 800159e:	e006      	b.n	80015ae <_ZN3app18handle_sensor_data17hf2529d913b12669cE+0x1c2>
 80015a0:	f240 2040 	movw	r0, #576	; 0x240
 80015a4:	2101      	movs	r1, #1
 80015a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015aa:	f000 fb20 	bl	8001bee <_ZN6mynewt8encoding12coap_context11CoapContext4fail17hbe312cb4cc455036E>
 80015ae:	f240 2440 	movw	r4, #576	; 0x240
 80015b2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80015b6:	4620      	mov	r0, r4
 80015b8:	f000 fb5d 	bl	8001c76 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h594cb8d9aced4d5eE>
 80015bc:	f24c 21ec 	movw	r1, #49900	; 0xc2ec
 80015c0:	4605      	mov	r5, r0
 80015c2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80015c6:	4620      	mov	r0, r4
 80015c8:	2207      	movs	r2, #7
 80015ca:	f000 fad9 	bl	8001b80 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>
 80015ce:	4601      	mov	r1, r0
 80015d0:	4628      	mov	r0, r5
 80015d2:	f006 fa23 	bl	8007a1c <json_helper_close_array>
 80015d6:	f002 ff25 	bl	8004424 <json_rep_end_root_object>
 80015da:	a804      	add	r0, sp, #16
        sensor_network::do_server_post() ? ;
 80015dc:	f000 fd66 	bl	80020ac <_ZN6mynewt4libs14sensor_network14do_server_post17hc5b5f69d66a9019aE>
 80015e0:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80015e4:	2801      	cmp	r0, #1
 80015e6:	d103      	bne.n	80015f0 <_ZN3app18handle_sensor_data17hf2529d913b12669cE+0x204>
 80015e8:	9805      	ldr	r0, [sp, #20]
 80015ea:	b00b      	add	sp, #44	; 0x2c
 80015ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        console::print("View your sensor at https://blue-pill-geolocate.appspot.com?device=");
 80015f0:	f24c 3019 	movw	r0, #49945	; 0xc319
 80015f4:	2143      	movs	r1, #67	; 0x43
 80015f6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80015fa:	f000 fa62 	bl	8001ac2 <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
 80015fe:	a801      	add	r0, sp, #4
        console::print_strn(device_id);
 8001600:	f000 fa61 	bl	8001ac6 <_ZN6mynewt3sys7console10print_strn17h03267ec31f7327aaE>
        console::print("\n");
 8001604:	f24c 20a1 	movw	r0, #49825	; 0xc2a1
 8001608:	2101      	movs	r1, #1
 800160a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800160e:	f000 fa58 	bl	8001ac2 <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>
}
 8001612:	2001      	movs	r0, #1
 8001614:	b00b      	add	sp, #44	; 0x2c
 8001616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800161a <__bkpt>:
 800161a:	be00      	bkpt	0x0000
 800161c:	4770      	bx	lr

0800161e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0aa02af027a21484E>:
 800161e:	b5b0      	push	{r4, r5, r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	6805      	ldr	r5, [r0, #0]
 8001624:	466c      	mov	r4, sp
 8001626:	6828      	ldr	r0, [r5, #0]
 8001628:	b1a8      	cbz	r0, 8001656 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0aa02af027a21484E+0x38>
 800162a:	f24c 32ec 	movw	r2, #50156	; 0xc3ec
 800162e:	4620      	mov	r0, r4
 8001630:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001634:	2304      	movs	r3, #4
 8001636:	f001 fec0 	bl	80033ba <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 800163a:	f24c 4200 	movw	r2, #50176	; 0xc400
 800163e:	a903      	add	r1, sp, #12
 8001640:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001644:	4620      	mov	r0, r4
 8001646:	9503      	str	r5, [sp, #12]
 8001648:	f001 f9d2 	bl	80029f0 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E>
 800164c:	4620      	mov	r0, r4
 800164e:	f001 fa45 	bl	8002adc <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 8001652:	b004      	add	sp, #16
 8001654:	bdb0      	pop	{r4, r5, r7, pc}
 8001656:	f24c 32f0 	movw	r2, #50160	; 0xc3f0
 800165a:	4620      	mov	r0, r4
 800165c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001660:	2304      	movs	r3, #4
 8001662:	f001 feaa 	bl	80033ba <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 8001666:	4620      	mov	r0, r4
 8001668:	f001 fa38 	bl	8002adc <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 800166c:	b004      	add	sp, #16
 800166e:	bdb0      	pop	{r4, r5, r7, pc}

08001670 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h24a37d0be695a87dE>:
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	6805      	ldr	r5, [r0, #0]
 8001674:	4608      	mov	r0, r1
 8001676:	460c      	mov	r4, r1
 8001678:	f001 fe97 	bl	80033aa <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>
 800167c:	b128      	cbz	r0, 800168a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h24a37d0be695a87dE+0x1a>
 800167e:	4628      	mov	r0, r5
 8001680:	4621      	mov	r1, r4
 8001682:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001686:	f002 ba98 	b.w	8003bba <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E>
 800168a:	4620      	mov	r0, r4
 800168c:	f001 fe91 	bl	80033b2 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>
 8001690:	b128      	cbz	r0, 800169e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h24a37d0be695a87dE+0x2e>
 8001692:	4628      	mov	r0, r5
 8001694:	4621      	mov	r1, r4
 8001696:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800169a:	f002 bac2 	b.w	8003c22 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E>
 800169e:	4628      	mov	r0, r5
 80016a0:	4621      	mov	r1, r4
 80016a2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016a6:	f002 bc13 	b.w	8003ed0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17hf1595badf4d53d6dE>

080016aa <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h269dc5a7c826e7dbE>:
 80016aa:	b510      	push	{r4, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	6800      	ldr	r0, [r0, #0]
 80016b0:	ac01      	add	r4, sp, #4
        ptr as *mut c_void
    }
}

/// Error codes for COAP encoding failure
#[derive(Debug, PartialEq)]
 80016b2:	7800      	ldrb	r0, [r0, #0]
 80016b4:	2801      	cmp	r0, #1
 80016b6:	d106      	bne.n	80016c6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h269dc5a7c826e7dbE+0x1c>
 80016b8:	f24c 7210 	movw	r2, #50960	; 0xc710
 80016bc:	4620      	mov	r0, r4
 80016be:	f6c0 0200 	movt	r2, #2048	; 0x800
 80016c2:	230e      	movs	r3, #14
 80016c4:	e005      	b.n	80016d2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h269dc5a7c826e7dbE+0x28>
 80016c6:	f24c 721e 	movw	r2, #50974	; 0xc71e
 80016ca:	4620      	mov	r0, r4
 80016cc:	f6c0 0200 	movt	r2, #2048	; 0x800
 80016d0:	2302      	movs	r3, #2
 80016d2:	f001 fe72 	bl	80033ba <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 80016d6:	4620      	mov	r0, r4
 80016d8:	f001 fa00 	bl	8002adc <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 80016dc:	b004      	add	sp, #16
 80016de:	bd10      	pop	{r4, pc}

080016e0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h63940e208c4821a3E>:
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	6805      	ldr	r5, [r0, #0]
 80016e4:	4608      	mov	r0, r1
 80016e6:	460c      	mov	r4, r1
 80016e8:	f001 fe5f 	bl	80033aa <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>
 80016ec:	b128      	cbz	r0, 80016fa <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h63940e208c4821a3E+0x1a>
 80016ee:	4628      	mov	r0, r5
 80016f0:	4621      	mov	r1, r4
 80016f2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80016f6:	f002 b98a 	b.w	8003a0e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E>
 80016fa:	4620      	mov	r0, r4
 80016fc:	f001 fe59 	bl	80033b2 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>
 8001700:	b128      	cbz	r0, 800170e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h63940e208c4821a3E+0x2e>
 8001702:	4628      	mov	r0, r5
 8001704:	4621      	mov	r1, r4
 8001706:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800170a:	f002 b9eb 	b.w	8003ae4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E>
 800170e:	4628      	mov	r0, r5
 8001710:	4621      	mov	r1, r4
 8001712:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001716:	f002 bb3e 	b.w	8003d96 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h8362f63c9a899390E>

0800171a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h771f7c96cc1a46f7E>:
 800171a:	b5b0      	push	{r4, r5, r7, lr}
 800171c:	6805      	ldr	r5, [r0, #0]
 800171e:	4608      	mov	r0, r1
 8001720:	460c      	mov	r4, r1
 8001722:	f001 fe42 	bl	80033aa <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>
 8001726:	b128      	cbz	r0, 8001734 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h771f7c96cc1a46f7E+0x1a>
 8001728:	4628      	mov	r0, r5
 800172a:	4621      	mov	r1, r4
 800172c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001730:	f002 b90f 	b.w	8003952 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE>
 8001734:	4620      	mov	r0, r4
 8001736:	f001 fe3c 	bl	80033b2 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>
 800173a:	b128      	cbz	r0, 8001748 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h771f7c96cc1a46f7E+0x2e>
 800173c:	4628      	mov	r0, r5
 800173e:	4621      	mov	r1, r4
 8001740:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001744:	f002 b934 	b.w	80039b0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E>
 8001748:	4628      	mov	r0, r5
 800174a:	4621      	mov	r1, r4
 800174c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001750:	f002 bb1c 	b.w	8003d8c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h4a5378243facc467E>

08001754 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e18813c7e529e80E>:
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	6800      	ldr	r0, [r0, #0]
 8001758:	460c      	mov	r4, r1
 800175a:	6805      	ldr	r5, [r0, #0]
 800175c:	4608      	mov	r0, r1
 800175e:	f001 fe24 	bl	80033aa <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>
 8001762:	b128      	cbz	r0, 8001770 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e18813c7e529e80E+0x1c>
 8001764:	4628      	mov	r0, r5
 8001766:	4621      	mov	r1, r4
 8001768:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800176c:	f002 b8f1 	b.w	8003952 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE>
 8001770:	4620      	mov	r0, r4
 8001772:	f001 fe1e 	bl	80033b2 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>
 8001776:	b128      	cbz	r0, 8001784 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e18813c7e529e80E+0x30>
 8001778:	4628      	mov	r0, r5
 800177a:	4621      	mov	r1, r4
 800177c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001780:	f002 b916 	b.w	80039b0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E>
 8001784:	4628      	mov	r0, r5
 8001786:	4621      	mov	r1, r4
 8001788:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800178c:	f002 bafe 	b.w	8003d8c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h4a5378243facc467E>

08001790 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hef50dfd16aa4e30bE>:
 8001790:	460a      	mov	r2, r1
 8001792:	e9d0 3100 	ldrd	r3, r1, [r0]
 8001796:	4618      	mov	r0, r3
 8001798:	f001 be22 	b.w	80033e0 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h8845cd1bde16499dE>

0800179c <_ZN4core3ptr18real_drop_in_place17h6cddc1d5a292b1e6E>:
 800179c:	4770      	bx	lr

0800179e <_ZN4core6result13unwrap_failed17h8525fcf086ab9eeeE>:
 800179e:	b08e      	sub	sp, #56	; 0x38
 80017a0:	9003      	str	r0, [sp, #12]
 80017a2:	f242 00d1 	movw	r0, #8401	; 0x20d1
 80017a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80017aa:	2114      	movs	r1, #20
 80017ac:	900d      	str	r0, [sp, #52]	; 0x34
 80017ae:	a803      	add	r0, sp, #12
 80017b0:	900c      	str	r0, [sp, #48]	; 0x30
 80017b2:	f241 7091 	movw	r0, #6033	; 0x1791
 80017b6:	9102      	str	r1, [sp, #8]
 80017b8:	f24c 512c 	movw	r1, #50476	; 0xc52c
 80017bc:	f6c0 0000 	movt	r0, #2048	; 0x800
 80017c0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80017c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80017c6:	a801      	add	r0, sp, #4
 80017c8:	9101      	str	r1, [sp, #4]
 80017ca:	a90a      	add	r1, sp, #40	; 0x28
 80017cc:	900a      	str	r0, [sp, #40]	; 0x28
 80017ce:	2002      	movs	r0, #2
 80017d0:	9009      	str	r0, [sp, #36]	; 0x24
 80017d2:	9108      	str	r1, [sp, #32]
 80017d4:	2100      	movs	r1, #0
 80017d6:	9107      	str	r1, [sp, #28]
 80017d8:	e9cd 0105 	strd	r0, r1, [sp, #20]
 80017dc:	f24c 30b4 	movw	r0, #50100	; 0xc3b4
 80017e0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80017e4:	f24c 31dc 	movw	r1, #50140	; 0xc3dc
 80017e8:	9004      	str	r0, [sp, #16]
 80017ea:	a804      	add	r0, sp, #16
 80017ec:	f6c0 0100 	movt	r1, #2048	; 0x800
 80017f0:	f000 fd73 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 80017f4:	defe      	udf	#254	; 0xfe

080017f6 <_ZN6mynewt2hw6sensor17register_listener17hc8145e7a396d72e6E>:
///  For more information on the type of callbacks available, see the documentation
///  for the sensor listener structure.
///  `sensor`: The sensor to register a listener on.
///  `listener`: The listener to register onto the sensor.
///  Returns `Ok()` on success, `Err()` containing `MynewtError` error code on failure.
pub fn register_listener(sensor: *mut sensor, listener: sensor_listener) -> MynewtResult<()> {  //  Returns an error code upon error. 
 80017f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f8:	b095      	sub	sp, #84	; 0x54
 80017fa:	468c      	mov	ip, r1
    unsafe { assert_eq!(LISTENER_INTERNAL.sl_sensor_type, 0, "reg lis") };  //  Make sure it's not used.
 80017fc:	f240 1150 	movw	r1, #336	; 0x150
 8001800:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8001804:	e9d1 3200 	ldrd	r3, r2, [r1]
 8001808:	431a      	orrs	r2, r3
 800180a:	d109      	bne.n	8001820 <_ZN6mynewt2hw6sensor17register_listener17hc8145e7a396d72e6E+0x2a>
    //  Copy the caller's listener to the internal listener.
    unsafe { LISTENER_INTERNAL = listener };
 800180c:	e89c 40f8 	ldmia.w	ip, {r3, r4, r5, r6, r7, lr}
 8001810:	460a      	mov	r2, r1
 8001812:	e882 40f8 	stmia.w	r2, {r3, r4, r5, r6, r7, lr}
    //  Pass the internal listener to the unsafe Mynewt API.
    unsafe { sensor_register_listener(sensor, &mut LISTENER_INTERNAL) };
 8001816:	f004 f85b 	bl	80058d0 <sensor_register_listener>
    Ok(())
}
 800181a:	2001      	movs	r0, #1
 800181c:	b015      	add	sp, #84	; 0x54
 800181e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    unsafe { assert_eq!(LISTENER_INTERNAL.sl_sensor_type, 0, "reg lis") };  //  Make sure it's not used.
 8001820:	f24c 4010 	movw	r0, #50192	; 0xc410
 8001824:	910d      	str	r1, [sp, #52]	; 0x34
 8001826:	f24c 31b0 	movw	r1, #50096	; 0xc3b0
 800182a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800182e:	900e      	str	r0, [sp, #56]	; 0x38
 8001830:	2000      	movs	r0, #0
 8001832:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001836:	9014      	str	r0, [sp, #80]	; 0x50
 8001838:	9113      	str	r1, [sp, #76]	; 0x4c
 800183a:	2101      	movs	r1, #1
 800183c:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
 8001840:	aa0e      	add	r2, sp, #56	; 0x38
 8001842:	9110      	str	r1, [sp, #64]	; 0x40
 8001844:	f24c 4130 	movw	r1, #50224	; 0xc430
 8001848:	f6c0 0100 	movt	r1, #2048	; 0x800
 800184c:	910f      	str	r1, [sp, #60]	; 0x3c
 800184e:	f642 412b 	movw	r1, #11307	; 0x2c2b
 8001852:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001856:	910c      	str	r1, [sp, #48]	; 0x30
 8001858:	a90f      	add	r1, sp, #60	; 0x3c
 800185a:	910b      	str	r1, [sp, #44]	; 0x2c
 800185c:	f241 6171 	movw	r1, #5745	; 0x1671
 8001860:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001864:	910a      	str	r1, [sp, #40]	; 0x28
 8001866:	e9cd 1208 	strd	r1, r2, [sp, #32]
 800186a:	a90d      	add	r1, sp, #52	; 0x34
 800186c:	aa07      	add	r2, sp, #28
 800186e:	9107      	str	r1, [sp, #28]
 8001870:	2103      	movs	r1, #3
 8001872:	9106      	str	r1, [sp, #24]
 8001874:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8001878:	e9cd 1002 	strd	r1, r0, [sp, #8]
 800187c:	f24c 3098 	movw	r0, #50072	; 0xc398
 8001880:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001884:	f24c 4154 	movw	r1, #50260	; 0xc454
 8001888:	9001      	str	r0, [sp, #4]
 800188a:	a801      	add	r0, sp, #4
 800188c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001890:	f000 fd23 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001894:	defe      	udf	#254	; 0xfe

08001896 <_ZN6mynewt2hw6sensor19new_sensor_listener17h9b5b837d061ad057E>:

///  Wrapped version of `sensor_data_func` used by Visual Embedded Rust
pub type SensorValueFunc = fn(sensor_value: &SensorValue) -> MynewtResult<()>;

///  Return a new `sensor_listener` with the sensor type and sensor value function. Called by Visual Embedded Rust.
pub fn new_sensor_listener(
 8001896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800189a:	4604      	mov	r4, r0
        }
    }

    /// Return true if the string is empty
    pub fn is_empty(&self) -> bool {
        self.len() == 0
 800189c:	4608      	mov	r0, r1
 800189e:	4698      	mov	r8, r3
 80018a0:	4692      	mov	sl, r2
 80018a2:	460f      	mov	r7, r1
 80018a4:	f000 fa55 	bl	8001d52 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E>
    sensor_key:     &'static Strn,
    sensor_type:    sensor_type_t, 
    listener_func:  SensorValueFunc
) -> MynewtResult<sensor_listener> {
    assert!(!sensor_key.is_empty(), "missing sensor key");
 80018a8:	b350      	cbz	r0, 8001900 <_ZN6mynewt2hw6sensor19new_sensor_listener17h9b5b837d061ad057E+0x6a>
 80018aa:	f240 1030 	movw	r0, #304	; 0x130
 80018ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80018b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80018b6:	f100 0608 	add.w	r6, r0, #8
 80018ba:	f04f 35ff 	mov.w	r5, #4294967295
    //  Allocate a `sensor_listener_info`
    let mut arg = MAX_SENSOR_LISTENERS + 1;
    for i in 0 .. MAX_SENSOR_LISTENERS {
 80018be:	3501      	adds	r5, #1
 80018c0:	2d01      	cmp	r5, #1
 80018c2:	d816      	bhi.n	80018f2 <_ZN6mynewt2hw6sensor19new_sensor_listener17h9b5b837d061ad057E+0x5c>
        let info = unsafe { SENSOR_LISTENERS[i] };
 80018c4:	f856 0b10 	ldr.w	r0, [r6], #16
 80018c8:	f000 fa43 	bl	8001d52 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E>
        if info.sensor_key.is_empty() {
 80018cc:	2800      	cmp	r0, #0
 80018ce:	d1f6      	bne.n	80018be <_ZN6mynewt2hw6sensor19new_sensor_listener17h9b5b837d061ad057E+0x28>
        sl_sensor_type: sensor_type,
        sl_func:        Some(wrap_sensor_listener),
        sl_arg:         arg as *mut c_void,
        ..fill_zero!(sensor_listener)
    };
    Ok(listener)
 80018d0:	f641 110f 	movw	r1, #6415	; 0x190f
 80018d4:	2000      	movs	r0, #0
 80018d6:	f6c0 0100 	movt	r1, #2048	; 0x800
    unsafe { SENSOR_LISTENERS[arg] = sensor_listener_info {
 80018da:	e946 a806 	strd	sl, r8, [r6, #-24]
 80018de:	e946 7904 	strd	r7, r9, [r6, #-16]
    Ok(listener)
 80018e2:	e9c4 a802 	strd	sl, r8, [r4, #8]
 80018e6:	e9c4 1504 	strd	r1, r5, [r4, #16]
 80018ea:	61a0      	str	r0, [r4, #24]
 80018ec:	6020      	str	r0, [r4, #0]
}
 80018ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert!(arg < MAX_SENSOR_LISTENERS, "increase MAX_SENSOR_LISTENERS");
 80018f2:	f24c 40b0 	movw	r0, #50352	; 0xc4b0
 80018f6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80018fa:	f000 fcb1 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 80018fe:	defe      	udf	#254	; 0xfe
    assert!(!sensor_key.is_empty(), "missing sensor key");
 8001900:	f24c 4078 	movw	r0, #50296	; 0xc478
 8001904:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001908:	f000 fcaa 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 800190c:	defe      	udf	#254	; 0xfe

0800190e <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h03b75cee35509918E>:

///  Wrap the sensor value function into a sensor data function
extern "C" fn wrap_sensor_listener(
 800190e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001912:	b098      	sub	sp, #96	; 0x60
    sensor_data:   sensor_data_ptr,
    sensor_type:   sensor_type_t
) -> i32 {
    //  Use `arg` to fetch the `sensor_listener_info`
    let arg = arg as usize;
    assert!(arg < MAX_SENSOR_LISTENERS, "bad sensor arg");
 8001914:	2902      	cmp	r1, #2
 8001916:	d23c      	bcs.n	8001992 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h03b75cee35509918E+0x84>
 8001918:	4606      	mov	r6, r0
    let info = unsafe { SENSOR_LISTENERS[arg] };
 800191a:	f240 1030 	movw	r0, #304	; 0x130
 800191e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001922:	4615      	mov	r5, r2
 8001924:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 8001928:	e9d0 4702 	ldrd	r4, r7, [r0, #8]
 800192c:	4620      	mov	r0, r4
 800192e:	f000 fa10 	bl	8001d52 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E>
    assert!(!info.sensor_key.is_empty(), "missing sensor key");
 8001932:	b3a8      	cbz	r0, 80019a0 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h03b75cee35509918E+0x92>

    //  Check that the sensor data is valid
    if sensor_data.is_null() { return SYS_EINVAL }  //  Exit if data is missing
 8001934:	b345      	cbz	r5, 8001988 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h03b75cee35509918E+0x7a>
    assert!(!sensor.is_null(), "null sensor");
 8001936:	b3d6      	cbz	r6, 80019ae <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h03b75cee35509918E+0xa0>
 8001938:	e9dd 101e 	ldrd	r1, r0, [sp, #120]	; 0x78
fn convert_sensor_data(sensor_data: sensor_data_ptr, sensor_key: &'static Strn, sensor_type: sensor_type_t) -> SensorValue {
    //  Construct and return a new `SensorValue` (without semicolon)
    SensorValue {
        key: sensor_key,
        val: match sensor_type {
            SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW => {  //  If this is raw temperature...
 800193c:	f081 6180 	eor.w	r1, r1, #67108864	; 0x4000000
 8001940:	4308      	orrs	r0, r1
 8001942:	d13b      	bne.n	80019bc <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h03b75cee35509918E+0xae>
 8001944:	ae01      	add	r6, sp, #4
 8001946:	f04f 0800 	mov.w	r8, #0
                //  Interpret the sensor data as a `sensor_temp_raw_data` struct that contains raw temp.
                let mut rawtempdata = fill_zero!(sensor_temp_raw_data);
                let rc = unsafe { get_temp_raw_data(sensor_data, &mut rawtempdata) };
 800194a:	4628      	mov	r0, r5
                let mut rawtempdata = fill_zero!(sensor_temp_raw_data);
 800194c:	f88d 8008 	strb.w	r8, [sp, #8]
                let rc = unsafe { get_temp_raw_data(sensor_data, &mut rawtempdata) };
 8001950:	4631      	mov	r1, r6
                let mut rawtempdata = fill_zero!(sensor_temp_raw_data);
 8001952:	f8cd 8004 	str.w	r8, [sp, #4]
                let rc = unsafe { get_temp_raw_data(sensor_data, &mut rawtempdata) };
 8001956:	f006 f8cc 	bl	8007af2 <get_temp_raw_data>
                assert_eq!(rc, 0, "rawtmp fail");
 800195a:	2800      	cmp	r0, #0
                let rc = unsafe { get_temp_raw_data(sensor_data, &mut rawtempdata) };
 800195c:	9003      	str	r0, [sp, #12]
                assert_eq!(rc, 0, "rawtmp fail");
 800195e:	d134      	bne.n	80019ca <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h03b75cee35509918E+0xbc>
                //  Check that the raw temperature data is valid.
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
 8001960:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001964:	2800      	cmp	r0, #0
 8001966:	d06c      	beq.n	8001a42 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h03b75cee35509918E+0x134>
                //  Raw temperature data is valid.  Return it.
                SensorValueType::Uint(rawtempdata.strd_temp_raw)  //  Raw Temperature in integer (0 to 4095)
 8001968:	9801      	ldr	r0, [sp, #4]
    SensorValue {
 800196a:	9014      	str	r0, [sp, #80]	; 0x50
 800196c:	2001      	movs	r0, #1
 800196e:	e9cd 4012 	strd	r4, r0, [sp, #72]	; 0x48
 8001972:	a812      	add	r0, sp, #72	; 0x48
    (info.listener_func)(&sensor_value)
 8001974:	47b8      	blx	r7
 8001976:	2801      	cmp	r0, #1
 8001978:	bf02      	ittt	eq
 800197a:	2000      	moveq	r0, #0
}
 800197c:	b018      	addeq	sp, #96	; 0x60
 800197e:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001982:	f7ff ff0c 	bl	800179e <_ZN4core6result13unwrap_failed17h8525fcf086ab9eeeE>
 8001986:	defe      	udf	#254	; 0xfe
 8001988:	f06f 0001 	mvn.w	r0, #1
 800198c:	b018      	add	sp, #96	; 0x60
 800198e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert!(arg < MAX_SENSOR_LISTENERS, "bad sensor arg");
 8001992:	f24c 40d8 	movw	r0, #50392	; 0xc4d8
 8001996:	f6c0 0000 	movt	r0, #2048	; 0x800
 800199a:	f000 fc61 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 800199e:	defe      	udf	#254	; 0xfe
    assert!(!info.sensor_key.is_empty(), "missing sensor key");
 80019a0:	f24c 40f0 	movw	r0, #50416	; 0xc4f0
 80019a4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019a8:	f000 fc5a 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 80019ac:	defe      	udf	#254	; 0xfe
    assert!(!sensor.is_null(), "null sensor");
 80019ae:	f24c 5014 	movw	r0, #50452	; 0xc514
 80019b2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019b6:	f000 fc53 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 80019ba:	defe      	udf	#254	; 0xfe
            }
            //  Unknown type of sensor value
            _ => { assert!(false, "sensor type"); SensorValueType::Uint(0) }
 80019bc:	f24c 504c 	movw	r0, #50508	; 0xc54c
 80019c0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019c4:	f000 fc4c 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 80019c8:	defe      	udf	#254	; 0xfe
 80019ca:	a803      	add	r0, sp, #12
                assert_eq!(rc, 0, "rawtmp fail");
 80019cc:	9010      	str	r0, [sp, #64]	; 0x40
 80019ce:	f24c 30f4 	movw	r0, #50164	; 0xc3f4
 80019d2:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80019d6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019da:	a911      	add	r1, sp, #68	; 0x44
 80019dc:	9011      	str	r0, [sp, #68]	; 0x44
 80019de:	f24c 30b0 	movw	r0, #50096	; 0xc3b0
 80019e2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019e6:	9016      	str	r0, [sp, #88]	; 0x58
 80019e8:	2001      	movs	r0, #1
 80019ea:	e9cd 8814 	strd	r8, r8, [sp, #80]	; 0x50
 80019ee:	9013      	str	r0, [sp, #76]	; 0x4c
 80019f0:	f24c 5070 	movw	r0, #50544	; 0xc570
 80019f4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80019f8:	9012      	str	r0, [sp, #72]	; 0x48
 80019fa:	f642 402b 	movw	r0, #11307	; 0x2c2b
 80019fe:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a02:	900f      	str	r0, [sp, #60]	; 0x3c
 8001a04:	a812      	add	r0, sp, #72	; 0x48
 8001a06:	900e      	str	r0, [sp, #56]	; 0x38
 8001a08:	f241 60e1 	movw	r0, #5857	; 0x16e1
 8001a0c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a10:	900d      	str	r0, [sp, #52]	; 0x34
 8001a12:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8001a16:	a810      	add	r0, sp, #64	; 0x40
 8001a18:	a90a      	add	r1, sp, #40	; 0x28
 8001a1a:	900a      	str	r0, [sp, #40]	; 0x28
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	9009      	str	r0, [sp, #36]	; 0x24
 8001a20:	e9cd 8107 	strd	r8, r1, [sp, #28]
 8001a24:	f24c 5178 	movw	r1, #50552	; 0xc578
 8001a28:	e9cd 0805 	strd	r0, r8, [sp, #20]
 8001a2c:	f24c 3098 	movw	r0, #50072	; 0xc398
 8001a30:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a34:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001a38:	9004      	str	r0, [sp, #16]
 8001a3a:	a804      	add	r0, sp, #16
 8001a3c:	f000 fc4d 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001a40:	defe      	udf	#254	; 0xfe
 8001a42:	1d30      	adds	r0, r6, #4
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
 8001a44:	9010      	str	r0, [sp, #64]	; 0x40
 8001a46:	f24c 5040 	movw	r0, #50496	; 0xc540
 8001a4a:	f24c 31b0 	movw	r1, #50096	; 0xc3b0
 8001a4e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001a52:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001a56:	9011      	str	r0, [sp, #68]	; 0x44
 8001a58:	2000      	movs	r0, #0
 8001a5a:	9017      	str	r0, [sp, #92]	; 0x5c
 8001a5c:	aa11      	add	r2, sp, #68	; 0x44
 8001a5e:	9116      	str	r1, [sp, #88]	; 0x58
 8001a60:	2101      	movs	r1, #1
 8001a62:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
 8001a66:	9113      	str	r1, [sp, #76]	; 0x4c
 8001a68:	f24c 51dc 	movw	r1, #50652	; 0xc5dc
 8001a6c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001a70:	9112      	str	r1, [sp, #72]	; 0x48
 8001a72:	f642 412b 	movw	r1, #11307	; 0x2c2b
 8001a76:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001a7a:	910f      	str	r1, [sp, #60]	; 0x3c
 8001a7c:	a912      	add	r1, sp, #72	; 0x48
 8001a7e:	910e      	str	r1, [sp, #56]	; 0x38
 8001a80:	f241 711b 	movw	r1, #5915	; 0x171b
 8001a84:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001a88:	910d      	str	r1, [sp, #52]	; 0x34
 8001a8a:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
 8001a8e:	a910      	add	r1, sp, #64	; 0x40
 8001a90:	aa0a      	add	r2, sp, #40	; 0x28
 8001a92:	910a      	str	r1, [sp, #40]	; 0x28
 8001a94:	2103      	movs	r1, #3
 8001a96:	9109      	str	r1, [sp, #36]	; 0x24
 8001a98:	e9cd 0207 	strd	r0, r2, [sp, #28]
 8001a9c:	e9cd 1005 	strd	r1, r0, [sp, #20]
 8001aa0:	f24c 50b8 	movw	r0, #50616	; 0xc5b8
 8001aa4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001aa8:	f24c 51e4 	movw	r1, #50660	; 0xc5e4
 8001aac:	9004      	str	r0, [sp, #16]
 8001aae:	a804      	add	r0, sp, #16
 8001ab0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001ab4:	f000 fc11 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001ab8:	defe      	udf	#254	; 0xfe

08001aba <_ZN6mynewt2hw6sensor21null_sensor_data_func17hb73afa768c6c9e6aE>:
extern fn null_sensor_data_func(
    _sensor: sensor_ptr, 
    _arg: sensor_arg, 
    _sensor_data: sensor_data_ptr, 
    _sensor_type: sensor_type_t) -> i32
    { 0 }
 8001aba:	2000      	movs	r0, #0
 8001abc:	4770      	bx	lr

08001abe <_ZN6mynewt2hw6sensor22null_sensor_value_func17h7ac74c02f3a87ab3E>:

///  Define a default sensor value function in case there is none.
fn null_sensor_value_func(
    _sensor_value: &SensorValue
    ) -> MynewtResult<()> 
    { Ok(()) }
 8001abe:	2001      	movs	r0, #1
 8001ac0:	4770      	bx	lr

08001ac2 <_ZN6mynewt3sys7console5print17hc20173b212ba6415E>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn print(msg: &str) {
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
 8001ac2:	f002 ba4d 	b.w	8003f60 <console_buffer>

08001ac6 <_ZN6mynewt3sys7console10print_strn17h03267ec31f7327aaE>:
}

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn print_strn(msg: &crate::Strn) {
 8001ac6:	b510      	push	{r4, lr}
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
 8001ac8:	6844      	ldr	r4, [r0, #4]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
 8001aca:	f000 f942 	bl	8001d52 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E>
 8001ace:	4601      	mov	r1, r0
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ad6:	f002 ba43 	b.w	8003f60 <console_buffer>

08001ada <_ZN6mynewt3sys7console8printhex17h434896f5fcfc2044E>:
}

///  Write a byte in hexadecimal to the output buffer.
///  C API: `void console_printhex(uint8_t v)`
pub fn printhex(v: u8) {
    unsafe { console_printhex(v); }
 8001ada:	b2c0      	uxtb	r0, r0
 8001adc:	f002 ba62 	b.w	8003fa4 <console_printhex>

08001ae0 <_ZN6mynewt3sys7console5flush17h2f347bab6c242839E>:
}

///  Flush the output buffer to the console.
pub fn flush() {
    unsafe { console_flush(); }
 8001ae0:	f002 ba10 	b.w	8003f04 <console_flush>

08001ae4 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E>:
    pub fn json_set_text_string(&mut self, key: &Strn, value: &Strn) {
 8001ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae6:	b081      	sub	sp, #4
 8001ae8:	4604      	mov	r4, r0
                StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 8001aea:	7808      	ldrb	r0, [r1, #0]
 8001aec:	4616      	mov	r6, r2
 8001aee:	2801      	cmp	r0, #1
 8001af0:	d104      	bne.n	8001afc <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x18>
                StrnRep::CStr(cstr)  => { cstr }
 8001af2:	684d      	ldr	r5, [r1, #4]
                StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 8001af4:	7830      	ldrb	r0, [r6, #0]
 8001af6:	2801      	cmp	r0, #1
 8001af8:	d016      	beq.n	8001b28 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x44>
 8001afa:	e017      	b.n	8001b2c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x48>
                StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 8001afc:	e9d1 5701 	ldrd	r5, r7, [r1, #4]
 8001b00:	2f01      	cmp	r7, #1
 8001b02:	d304      	bcc.n	8001b0e <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x2a>
 8001b04:	1e78      	subs	r0, r7, #1
 8001b06:	42b8      	cmp	r0, r7
 8001b08:	d201      	bcs.n	8001b0e <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x2a>
 8001b0a:	5c28      	ldrb	r0, [r5, r0]
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 8001b0c:	b148      	cbz	r0, 8001b22 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x3e>
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 8001b0e:	2f20      	cmp	r7, #32
 8001b10:	d228      	bcs.n	8001b64 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x80>
 8001b12:	4620      	mov	r0, r4
 8001b14:	4629      	mov	r1, r5
 8001b16:	463a      	mov	r2, r7
 8001b18:	f00a fb62 	bl	800c1e0 <__aeabi_memcpy>
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	4625      	mov	r5, r4
        self.key_buffer[s.len()] = 0;
 8001b20:	55e0      	strb	r0, [r4, r7]
                StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 8001b22:	7830      	ldrb	r0, [r6, #0]
 8001b24:	2801      	cmp	r0, #1
 8001b26:	d101      	bne.n	8001b2c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x48>
                StrnRep::CStr(cstr)  => { cstr }
 8001b28:	6872      	ldr	r2, [r6, #4]
 8001b2a:	e014      	b.n	8001b56 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x72>
                StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 8001b2c:	e9d6 2601 	ldrd	r2, r6, [r6, #4]
 8001b30:	2e01      	cmp	r6, #1
 8001b32:	d304      	bcc.n	8001b3e <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x5a>
 8001b34:	1e70      	subs	r0, r6, #1
 8001b36:	42b0      	cmp	r0, r6
 8001b38:	d201      	bcs.n	8001b3e <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x5a>
 8001b3a:	5c10      	ldrb	r0, [r2, r0]
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 8001b3c:	b158      	cbz	r0, 8001b56 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x72>
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 8001b3e:	2e20      	cmp	r6, #32
 8001b40:	d217      	bcs.n	8001b72 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h8c48ced9fd965537E+0x8e>
 8001b42:	f104 0720 	add.w	r7, r4, #32
 8001b46:	4611      	mov	r1, r2
 8001b48:	4632      	mov	r2, r6
 8001b4a:	4638      	mov	r0, r7
 8001b4c:	f00a fb48 	bl	800c1e0 <__aeabi_memcpy>
 8001b50:	2000      	movs	r0, #0
 8001b52:	463a      	mov	r2, r7
        self.value_buffer[s.len()] = 0;
 8001b54:	55b8      	strb	r0, [r7, r6]
            crate::libs::mynewt_rust::json_helper_set_text_string(
 8001b56:	4620      	mov	r0, r4
 8001b58:	4629      	mov	r1, r5
 8001b5a:	b001      	add	sp, #4
 8001b5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001b60:	f005 bf9e 	b.w	8007aa0 <json_helper_set_text_string>
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 8001b64:	f24c 6028 	movw	r0, #50728	; 0xc628
 8001b68:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b6c:	f000 fb78 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8001b70:	defe      	udf	#254	; 0xfe
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 8001b72:	f24c 604c 	movw	r0, #50764	; 0xc64c
 8001b76:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b7a:	f000 fb71 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8001b7e:	defe      	udf	#254	; 0xfe

08001b80 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE>:
    pub fn key_to_cstr(&mut self, s: &[u8]) -> *const u8 {                
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	4604      	mov	r4, r0
 8001b84:	1e50      	subs	r0, r2, #1
 8001b86:	4615      	mov	r5, r2
 8001b88:	d303      	bcc.n	8001b92 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE+0x12>
 8001b8a:	42a8      	cmp	r0, r5
 8001b8c:	d201      	bcs.n	8001b92 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE+0x12>
 8001b8e:	5c08      	ldrb	r0, [r1, r0]
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 8001b90:	b140      	cbz	r0, 8001ba4 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE+0x24>
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 8001b92:	2d20      	cmp	r5, #32
 8001b94:	d208      	bcs.n	8001ba8 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf78136362ef51e1aE+0x28>
 8001b96:	4620      	mov	r0, r4
 8001b98:	462a      	mov	r2, r5
 8001b9a:	f00a fb21 	bl	800c1e0 <__aeabi_memcpy>
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	4621      	mov	r1, r4
        self.key_buffer[s.len()] = 0;
 8001ba2:	5560      	strb	r0, [r4, r5]
    }
 8001ba4:	4608      	mov	r0, r1
 8001ba6:	bdb0      	pop	{r4, r5, r7, pc}
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 8001ba8:	f24c 6028 	movw	r0, #50728	; 0xc628
 8001bac:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bb0:	f000 fb56 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8001bb4:	defe      	udf	#254	; 0xfe

08001bb6 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E>:
    pub fn value_to_cstr(&mut self, s: &[u8]) -> *const u8 {
 8001bb6:	b5b0      	push	{r4, r5, r7, lr}
 8001bb8:	4614      	mov	r4, r2
 8001bba:	3a01      	subs	r2, #1
 8001bbc:	d303      	bcc.n	8001bc6 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E+0x10>
 8001bbe:	42a2      	cmp	r2, r4
 8001bc0:	d201      	bcs.n	8001bc6 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E+0x10>
 8001bc2:	5c8a      	ldrb	r2, [r1, r2]
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 8001bc4:	b152      	cbz	r2, 8001bdc <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E+0x26>
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 8001bc6:	2c20      	cmp	r4, #32
 8001bc8:	d20a      	bcs.n	8001be0 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hf4615a2b920a7213E+0x2a>
 8001bca:	f100 0520 	add.w	r5, r0, #32
 8001bce:	4622      	mov	r2, r4
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	f00a fb05 	bl	800c1e0 <__aeabi_memcpy>
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	4629      	mov	r1, r5
        self.value_buffer[s.len()] = 0;
 8001bda:	5528      	strb	r0, [r5, r4]
    }
 8001bdc:	4608      	mov	r0, r1
 8001bde:	bdb0      	pop	{r4, r5, r7, pc}
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 8001be0:	f24c 604c 	movw	r0, #50764	; 0xc64c
 8001be4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001be8:	f000 fb3a 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8001bec:	defe      	udf	#254	; 0xfe

08001bee <_ZN6mynewt8encoding12coap_context11CoapContext4fail17hbe312cb4cc455036E>:
    pub fn fail(&mut self, err: CoapError) {
 8001bee:	b096      	sub	sp, #88	; 0x58
        assert_eq!(err, CoapError::OK, "enc fail");
 8001bf0:	2900      	cmp	r1, #0
 8001bf2:	f88d 1007 	strb.w	r1, [sp, #7]
    }
 8001bf6:	bf04      	itt	eq
 8001bf8:	b016      	addeq	sp, #88	; 0x58
 8001bfa:	4770      	bxeq	lr
 8001bfc:	f10d 0007 	add.w	r0, sp, #7
        assert_eq!(err, CoapError::OK, "enc fail");
 8001c00:	900e      	str	r0, [sp, #56]	; 0x38
 8001c02:	f24c 5040 	movw	r0, #50496	; 0xc540
 8001c06:	f24c 31b0 	movw	r1, #50096	; 0xc3b0
 8001c0a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c0e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001c12:	900f      	str	r0, [sp, #60]	; 0x3c
 8001c14:	2000      	movs	r0, #0
 8001c16:	9015      	str	r0, [sp, #84]	; 0x54
 8001c18:	aa0f      	add	r2, sp, #60	; 0x3c
 8001c1a:	9114      	str	r1, [sp, #80]	; 0x50
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
 8001c22:	9111      	str	r1, [sp, #68]	; 0x44
 8001c24:	f24c 6164 	movw	r1, #50788	; 0xc664
 8001c28:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001c2c:	9110      	str	r1, [sp, #64]	; 0x40
 8001c2e:	f642 412b 	movw	r1, #11307	; 0x2c2b
 8001c32:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001c36:	910d      	str	r1, [sp, #52]	; 0x34
 8001c38:	a910      	add	r1, sp, #64	; 0x40
 8001c3a:	910c      	str	r1, [sp, #48]	; 0x30
 8001c3c:	f241 61ab 	movw	r1, #5803	; 0x16ab
 8001c40:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001c44:	910b      	str	r1, [sp, #44]	; 0x2c
 8001c46:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8001c4a:	a90e      	add	r1, sp, #56	; 0x38
 8001c4c:	aa08      	add	r2, sp, #32
 8001c4e:	9108      	str	r1, [sp, #32]
 8001c50:	2103      	movs	r1, #3
 8001c52:	9107      	str	r1, [sp, #28]
 8001c54:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8001c58:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8001c5c:	f24c 3098 	movw	r0, #50072	; 0xc398
 8001c60:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c64:	f24c 616c 	movw	r1, #50796	; 0xc66c
 8001c68:	9002      	str	r0, [sp, #8]
 8001c6a:	a802      	add	r0, sp, #8
 8001c6c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001c70:	f000 fb33 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001c74:	defe      	udf	#254	; 0xfe

08001c76 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17h594cb8d9aced4d5eE>:
    }
 8001c76:	4770      	bx	lr

08001c78 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h1ffd6ed576a88ca6E>:
/// Convert the type to array of bytes that may or may not end with null
impl ToBytesOptionalNull for str {
    /// Convert the type to array of bytes that may or may not end with null
    fn to_bytes_optional_nul(&self) -> &[u8] {
        self.as_bytes()
    }
 8001c78:	4770      	bx	lr

08001c7a <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h7bf5d80ec9025fc4E>:
/// Convert the type to array of bytes that may or may not end with null. Strn always ends with null.
impl ToBytesOptionalNull for crate::Strn {
    /// Convert the type to array of bytes that may or may not end with null. Strn always ends with null.
    fn to_bytes_optional_nul(&self) -> &[u8] {
        match self.rep {
            StrnRep::ByteStr(bs) => { bs }
 8001c7a:	7801      	ldrb	r1, [r0, #0]
 8001c7c:	2901      	cmp	r1, #1
 8001c7e:	bf1e      	ittt	ne
 8001c80:	e9d0 2101 	ldrdne	r2, r1, [r0, #4]
            StrnRep::CStr(_cstr)  => { assert!(false, "strn bytes"); &[] }
            //  TODO: unsafe { ::core::mem::transmute::<*const u8, &[u8]>(cstr) }
        }
    }
 8001c84:	4610      	movne	r0, r2
 8001c86:	4770      	bxne	lr
            StrnRep::CStr(_cstr)  => { assert!(false, "strn bytes"); &[] }
 8001c88:	f24c 6088 	movw	r0, #50824	; 0xc688
 8001c8c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001c90:	f000 fae6 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8001c94:	defe      	udf	#254	; 0xfe

08001c96 <_ZN6mynewt7sysinit17h162e190ad004d957E>:
pub fn sysinit() {
 8001c96:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
 8001c98:	f005 ff22 	bl	8007ae0 <rust_sysinit>
 8001c9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ca0:	f002 b930 	b.w	8003f04 <console_flush>

08001ca4 <_ZN6mynewt4Strn3new17hf631d8ed365ce2adE>:
    pub fn new(bs: &'static [u8]) -> Strn {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b096      	sub	sp, #88	; 0x58
 8001ca8:	f1b2 0e01 	subs.w	lr, r2, #1
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	bf28      	it	cs
 8001cb2:	eb01 030e 	addcs.w	r3, r1, lr
 8001cb6:	4596      	cmp	lr, r2
 8001cb8:	f04f 0c00 	mov.w	ip, #0
 8001cbc:	bf28      	it	cs
 8001cbe:	4663      	movcs	r3, ip
 8001cc0:	2b00      	cmp	r3, #0
        assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	d009      	beq.n	8001cda <_ZN6mynewt4Strn3new17hf631d8ed365ce2adE+0x36>
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
        Strn { 
 8001cca:	bf01      	itttt	eq
 8001ccc:	e9c0 1201 	strdeq	r1, r2, [r0, #4]
 8001cd0:	2100      	moveq	r1, #0
 8001cd2:	7001      	strbeq	r1, [r0, #0]
    }
 8001cd4:	b016      	addeq	sp, #88	; 0x58
 8001cd6:	bf08      	it	eq
 8001cd8:	bd80      	popeq	{r7, pc}
 8001cda:	a801      	add	r0, sp, #4
        assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001cdc:	900e      	str	r0, [sp, #56]	; 0x38
 8001cde:	f24c 50f4 	movw	r0, #50676	; 0xc5f4
 8001ce2:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001ce6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001cea:	a90f      	add	r1, sp, #60	; 0x3c
 8001cec:	900f      	str	r0, [sp, #60]	; 0x3c
 8001cee:	f24c 30b0 	movw	r0, #50096	; 0xc3b0
 8001cf2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001cf6:	9014      	str	r0, [sp, #80]	; 0x50
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8001cfe:	9011      	str	r0, [sp, #68]	; 0x44
 8001d00:	f24c 60a8 	movw	r0, #50856	; 0xc6a8
 8001d04:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d08:	9010      	str	r0, [sp, #64]	; 0x40
 8001d0a:	f642 402b 	movw	r0, #11307	; 0x2c2b
 8001d0e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d12:	900d      	str	r0, [sp, #52]	; 0x34
 8001d14:	a810      	add	r0, sp, #64	; 0x40
 8001d16:	900c      	str	r0, [sp, #48]	; 0x30
 8001d18:	f241 601f 	movw	r0, #5663	; 0x161f
 8001d1c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d20:	900b      	str	r0, [sp, #44]	; 0x2c
 8001d22:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001d26:	a80e      	add	r0, sp, #56	; 0x38
 8001d28:	a908      	add	r1, sp, #32
 8001d2a:	9008      	str	r0, [sp, #32]
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	9007      	str	r0, [sp, #28]
 8001d30:	e9cd c105 	strd	ip, r1, [sp, #20]
 8001d34:	f24c 61c8 	movw	r1, #50888	; 0xc6c8
 8001d38:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001d3c:	f24c 3098 	movw	r0, #50072	; 0xc398
 8001d40:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d44:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001d48:	9002      	str	r0, [sp, #8]
 8001d4a:	a802      	add	r0, sp, #8
 8001d4c:	f000 fac5 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001d50:	defe      	udf	#254	; 0xfe

08001d52 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E>:
    pub fn len(&self) -> usize {
 8001d52:	b096      	sub	sp, #88	; 0x58
            StrnRep::ByteStr(bs) => { 
 8001d54:	7801      	ldrb	r1, [r0, #0]
 8001d56:	2901      	cmp	r1, #1
 8001d58:	d119      	bne.n	8001d8e <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0x3c>
            StrnRep::CStr(cstr)  => { 
 8001d5a:	6841      	ldr	r1, [r0, #4]
                if cstr.is_null() { return 0; }
 8001d5c:	2900      	cmp	r1, #0
 8001d5e:	d067      	beq.n	8001e30 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0xde>
 8001d60:	2200      	movs	r2, #0
 8001d62:	4610      	mov	r0, r2
                    if unsafe { *ptr } == 0 { return len as usize; }                    
 8001d64:	5c8a      	ldrb	r2, [r1, r2]
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d063      	beq.n	8001e32 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0xe0>
                    let ptr: *const u8 =  ((cstr as u32) + len) as *const u8;
 8001d6a:	180a      	adds	r2, r1, r0
                    if unsafe { *ptr } == 0 { return len as usize; }                    
 8001d6c:	7853      	ldrb	r3, [r2, #1]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d061      	beq.n	8001e36 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0xe4>
 8001d72:	7893      	ldrb	r3, [r2, #2]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d062      	beq.n	8001e3e <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0xec>
 8001d78:	1cc3      	adds	r3, r0, #3
 8001d7a:	2b7e      	cmp	r3, #126	; 0x7e
 8001d7c:	d863      	bhi.n	8001e46 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0xf4>
 8001d7e:	78d3      	ldrb	r3, [r2, #3]
 8001d80:	1d02      	adds	r2, r0, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ed      	bne.n	8001d62 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0x10>
 8001d86:	f040 0003 	orr.w	r0, r0, #3
    }
 8001d8a:	b016      	add	sp, #88	; 0x58
 8001d8c:	4770      	bx	lr
            StrnRep::ByteStr(bs) => { 
 8001d8e:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8001d92:	1e48      	subs	r0, r1, #1
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0c00 	mov.w	ip, #0
 8001d9c:	bf28      	it	cs
 8001d9e:	181a      	addcs	r2, r3, r0
 8001da0:	4288      	cmp	r0, r1
 8001da2:	bf28      	it	cs
 8001da4:	4662      	movcs	r2, ip
 8001da6:	2a00      	cmp	r2, #0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001da8:	9201      	str	r2, [sp, #4]
 8001daa:	d005      	beq.n	8001db8 <_ZN6mynewt4Strn3len17ha4dcb83b5837fbc1E+0x66>
 8001dac:	7810      	ldrb	r0, [r2, #0]
 8001dae:	2800      	cmp	r0, #0
                bs.len() - 1  //  Don't count the terminating null.
 8001db0:	bf02      	ittt	eq
 8001db2:	1e48      	subeq	r0, r1, #1
    }
 8001db4:	b016      	addeq	sp, #88	; 0x58
 8001db6:	4770      	bxeq	lr
 8001db8:	a801      	add	r0, sp, #4
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001dba:	900e      	str	r0, [sp, #56]	; 0x38
 8001dbc:	f24c 50f4 	movw	r0, #50676	; 0xc5f4
 8001dc0:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001dc4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001dc8:	a90f      	add	r1, sp, #60	; 0x3c
 8001dca:	900f      	str	r0, [sp, #60]	; 0x3c
 8001dcc:	f24c 30b0 	movw	r0, #50096	; 0xc3b0
 8001dd0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001dd4:	9014      	str	r0, [sp, #80]	; 0x50
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8001ddc:	9011      	str	r0, [sp, #68]	; 0x44
 8001dde:	f24c 60a8 	movw	r0, #50856	; 0xc6a8
 8001de2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001de6:	9010      	str	r0, [sp, #64]	; 0x40
 8001de8:	f642 402b 	movw	r0, #11307	; 0x2c2b
 8001dec:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001df0:	900d      	str	r0, [sp, #52]	; 0x34
 8001df2:	a810      	add	r0, sp, #64	; 0x40
 8001df4:	900c      	str	r0, [sp, #48]	; 0x30
 8001df6:	f241 601f 	movw	r0, #5663	; 0x161f
 8001dfa:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001dfe:	900b      	str	r0, [sp, #44]	; 0x2c
 8001e00:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001e04:	a80e      	add	r0, sp, #56	; 0x38
 8001e06:	a908      	add	r1, sp, #32
 8001e08:	9008      	str	r0, [sp, #32]
 8001e0a:	2003      	movs	r0, #3
 8001e0c:	9007      	str	r0, [sp, #28]
 8001e0e:	e9cd c105 	strd	ip, r1, [sp, #20]
 8001e12:	f24c 61f0 	movw	r1, #50928	; 0xc6f0
 8001e16:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001e1a:	f24c 3098 	movw	r0, #50072	; 0xc398
 8001e1e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001e22:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001e26:	9002      	str	r0, [sp, #8]
 8001e28:	a802      	add	r0, sp, #8
 8001e2a:	f000 fa56 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001e2e:	defe      	udf	#254	; 0xfe
 8001e30:	2000      	movs	r0, #0
    }
 8001e32:	b016      	add	sp, #88	; 0x58
 8001e34:	4770      	bx	lr
 8001e36:	f040 0001 	orr.w	r0, r0, #1
 8001e3a:	b016      	add	sp, #88	; 0x58
 8001e3c:	4770      	bx	lr
 8001e3e:	f040 0002 	orr.w	r0, r0, #2
 8001e42:	b016      	add	sp, #88	; 0x58
 8001e44:	4770      	bx	lr
                assert!(false, "big strn");  //  String too long
 8001e46:	f24c 60d8 	movw	r0, #50904	; 0xc6d8
 8001e4a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001e4e:	f000 fa07 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8001e52:	defe      	udf	#254	; 0xfe

08001e54 <_ZN6mynewt6kernel2os10eventq_run17h00ed7b6e5ed865a7E>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	f004 fa1d 	bl	8006294 <os_eventq_run>
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_ZN6mynewt6kernel2os15eventq_dflt_get17h0173394645c51d0dE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001e5e:	b510      	push	{r4, lr}
 8001e60:	4604      	mov	r4, r0
 8001e62:	f004 fa43 	bl	80062ec <os_eventq_dflt_get>
 8001e66:	2100      	movs	r1, #0
 8001e68:	e9c4 1000 	strd	r1, r0, [r4]
 8001e6c:	bd10      	pop	{r4, pc}

08001e6e <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h54ccd726782ab7b0E>:
    #[doc = ""]
    #[doc = " Return: A pointer to the sensor object matching that sensor type, or NULL if"]
    #[doc = "         none found."]
    pub fn sensor_mgr_find_next_bytype(type_: sensor_type_t, sensor: *mut sensor) -> *mut sensor;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001e6e:	b510      	push	{r4, lr}
 8001e70:	b096      	sub	sp, #88	; 0x58
 8001e72:	4604      	mov	r4, r0
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
        match self.rep {
            StrnRep::ByteStr(bs) => {         
 8001e74:	780b      	ldrb	r3, [r1, #0]
 8001e76:	6848      	ldr	r0, [r1, #4]
 8001e78:	4696      	mov	lr, r2
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d00e      	beq.n	8001e9c <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h54ccd726782ab7b0E+0x2e>
 8001e7e:	6889      	ldr	r1, [r1, #8]
 8001e80:	2300      	movs	r3, #0
 8001e82:	f04f 0c00 	mov.w	ip, #0
 8001e86:	1e4a      	subs	r2, r1, #1
 8001e88:	bf28      	it	cs
 8001e8a:	1883      	addcs	r3, r0, r2
 8001e8c:	428a      	cmp	r2, r1
 8001e8e:	bf28      	it	cs
 8001e90:	4663      	movcs	r3, ip
 8001e92:	2b00      	cmp	r3, #0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	d009      	beq.n	8001eac <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h54ccd726782ab7b0E+0x3e>
 8001e98:	7819      	ldrb	r1, [r3, #0]
 8001e9a:	b939      	cbnz	r1, 8001eac <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h54ccd726782ab7b0E+0x3e>
 8001e9c:	4671      	mov	r1, lr
 8001e9e:	f003 fc29 	bl	80056f4 <sensor_mgr_find_next_bydevname>
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	e9c4 1000 	strd	r1, r0, [r4]
 8001ea8:	b016      	add	sp, #88	; 0x58
 8001eaa:	bd10      	pop	{r4, pc}
 8001eac:	a801      	add	r0, sp, #4
 8001eae:	900e      	str	r0, [sp, #56]	; 0x38
 8001eb0:	f24c 50f4 	movw	r0, #50676	; 0xc5f4
 8001eb4:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001eb8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001ebc:	a90f      	add	r1, sp, #60	; 0x3c
 8001ebe:	900f      	str	r0, [sp, #60]	; 0x3c
 8001ec0:	f24c 30b0 	movw	r0, #50096	; 0xc3b0
 8001ec4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001ec8:	9014      	str	r0, [sp, #80]	; 0x50
 8001eca:	2001      	movs	r0, #1
 8001ecc:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8001ed0:	9011      	str	r0, [sp, #68]	; 0x44
 8001ed2:	f24c 60a8 	movw	r0, #50856	; 0xc6a8
 8001ed6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001eda:	9010      	str	r0, [sp, #64]	; 0x40
 8001edc:	f642 402b 	movw	r0, #11307	; 0x2c2b
 8001ee0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001ee4:	900d      	str	r0, [sp, #52]	; 0x34
 8001ee6:	a810      	add	r0, sp, #64	; 0x40
 8001ee8:	900c      	str	r0, [sp, #48]	; 0x30
 8001eea:	f241 601f 	movw	r0, #5663	; 0x161f
 8001eee:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001ef2:	900b      	str	r0, [sp, #44]	; 0x2c
 8001ef4:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001ef8:	a80e      	add	r0, sp, #56	; 0x38
 8001efa:	a908      	add	r1, sp, #32
 8001efc:	9008      	str	r0, [sp, #32]
 8001efe:	2003      	movs	r0, #3
 8001f00:	9007      	str	r0, [sp, #28]
 8001f02:	e9cd c105 	strd	ip, r1, [sp, #20]
 8001f06:	f24c 7100 	movw	r1, #50944	; 0xc700
 8001f0a:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001f0e:	f24c 3098 	movw	r0, #50072	; 0xc398
 8001f12:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001f16:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001f1a:	9002      	str	r0, [sp, #8]
 8001f1c:	a802      	add	r0, sp, #8
 8001f1e:	f000 f9dc 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001f22:	defe      	udf	#254	; 0xfe

08001f24 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17ha6adf4a3b1bf31c9E>:
    #[doc = " - __`arg`__: type to check"]
    #[doc = ""]
    #[doc = " Return: 1 if matches, 0 if it doesn't match."]
    pub fn sensor_mgr_match_bytype(sensor: *mut sensor, arg1: *mut ::cty::c_void) -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b096      	sub	sp, #88	; 0x58
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6840      	ldr	r0, [r0, #4]
            StrnRep::ByteStr(bs) => {         
 8001f2c:	7813      	ldrb	r3, [r2, #0]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d010      	beq.n	8001f54 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17ha6adf4a3b1bf31c9E+0x30>
 8001f32:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8001f36:	2300      	movs	r3, #0
 8001f38:	f04f 0c00 	mov.w	ip, #0
 8001f3c:	f1be 0201 	subs.w	r2, lr, #1
 8001f40:	bf28      	it	cs
 8001f42:	1883      	addcs	r3, r0, r2
 8001f44:	4572      	cmp	r2, lr
 8001f46:	bf28      	it	cs
 8001f48:	4663      	movcs	r3, ip
 8001f4a:	2b00      	cmp	r3, #0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	d008      	beq.n	8001f62 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17ha6adf4a3b1bf31c9E+0x3e>
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	b932      	cbnz	r2, 8001f62 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17ha6adf4a3b1bf31c9E+0x3e>
 8001f54:	f003 fc56 	bl	8005804 <sensor_set_poll_rate_ms>
 8001f58:	2800      	cmp	r0, #0
 8001f5a:	bf08      	it	eq
 8001f5c:	2001      	moveq	r0, #1
 8001f5e:	b016      	add	sp, #88	; 0x58
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	a801      	add	r0, sp, #4
 8001f64:	900e      	str	r0, [sp, #56]	; 0x38
 8001f66:	f24c 50f4 	movw	r0, #50676	; 0xc5f4
 8001f6a:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001f6e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001f72:	a90f      	add	r1, sp, #60	; 0x3c
 8001f74:	900f      	str	r0, [sp, #60]	; 0x3c
 8001f76:	f24c 30b0 	movw	r0, #50096	; 0xc3b0
 8001f7a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001f7e:	9014      	str	r0, [sp, #80]	; 0x50
 8001f80:	2001      	movs	r0, #1
 8001f82:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8001f86:	9011      	str	r0, [sp, #68]	; 0x44
 8001f88:	f24c 60a8 	movw	r0, #50856	; 0xc6a8
 8001f8c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001f90:	9010      	str	r0, [sp, #64]	; 0x40
 8001f92:	f642 402b 	movw	r0, #11307	; 0x2c2b
 8001f96:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001f9a:	900d      	str	r0, [sp, #52]	; 0x34
 8001f9c:	a810      	add	r0, sp, #64	; 0x40
 8001f9e:	900c      	str	r0, [sp, #48]	; 0x30
 8001fa0:	f241 601f 	movw	r0, #5663	; 0x161f
 8001fa4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001fa8:	900b      	str	r0, [sp, #44]	; 0x2c
 8001faa:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8001fae:	a80e      	add	r0, sp, #56	; 0x38
 8001fb0:	a908      	add	r1, sp, #32
 8001fb2:	9008      	str	r0, [sp, #32]
 8001fb4:	2003      	movs	r0, #3
 8001fb6:	9007      	str	r0, [sp, #28]
 8001fb8:	e9cd c105 	strd	ip, r1, [sp, #20]
 8001fbc:	f24c 7100 	movw	r1, #50944	; 0xc700
 8001fc0:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8001fc4:	f24c 3098 	movw	r0, #50072	; 0xc398
 8001fc8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001fcc:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001fd0:	9002      	str	r0, [sp, #8]
 8001fd2:	a802      	add	r0, sp, #8
 8001fd4:	f000 f981 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8001fd8:	defe      	udf	#254	; 0xfe

08001fda <_ZN6mynewt4libs14sensor_network22start_server_transport17hacf1950a2bf8e132E>:
impl Default for sensor_network_interface {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	f002 fa68 	bl	80044b0 <start_server_transport>
 8001fe0:	2800      	cmp	r0, #0
 8001fe2:	bf08      	it	eq
 8001fe4:	2001      	moveq	r0, #1
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <_ZN6mynewt4libs14sensor_network16init_server_post17h864e17c9ed4d984fE>:
    pub fn register_collector_transport() -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    pub fn sensor_network_register_transport(iface_type: u8) -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8001fe8:	b510      	push	{r4, lr}
 8001fea:	b096      	sub	sp, #88	; 0x58
 8001fec:	4604      	mov	r4, r0
            StrnRep::ByteStr(bs) => {         
 8001fee:	780a      	ldrb	r2, [r1, #0]
 8001ff0:	6848      	ldr	r0, [r1, #4]
 8001ff2:	2a01      	cmp	r2, #1
 8001ff4:	d00e      	beq.n	8002014 <_ZN6mynewt4libs14sensor_network16init_server_post17h864e17c9ed4d984fE+0x2c>
 8001ff6:	688b      	ldr	r3, [r1, #8]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f04f 0c00 	mov.w	ip, #0
 8001ffe:	1e59      	subs	r1, r3, #1
 8002000:	bf28      	it	cs
 8002002:	1842      	addcs	r2, r0, r1
 8002004:	4299      	cmp	r1, r3
 8002006:	bf28      	it	cs
 8002008:	4662      	movcs	r2, ip
 800200a:	2a00      	cmp	r2, #0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 800200c:	9201      	str	r2, [sp, #4]
 800200e:	d008      	beq.n	8002022 <_ZN6mynewt4libs14sensor_network16init_server_post17h864e17c9ed4d984fE+0x3a>
 8002010:	7811      	ldrb	r1, [r2, #0]
 8002012:	b931      	cbnz	r1, 8002022 <_ZN6mynewt4libs14sensor_network16init_server_post17h864e17c9ed4d984fE+0x3a>
 8002014:	f002 faec 	bl	80045f0 <init_server_post>
 8002018:	7060      	strb	r0, [r4, #1]
 800201a:	2000      	movs	r0, #0
 800201c:	7020      	strb	r0, [r4, #0]
 800201e:	b016      	add	sp, #88	; 0x58
 8002020:	bd10      	pop	{r4, pc}
 8002022:	a801      	add	r0, sp, #4
 8002024:	900e      	str	r0, [sp, #56]	; 0x38
 8002026:	f24c 50f4 	movw	r0, #50676	; 0xc5f4
 800202a:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800202e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002032:	a90f      	add	r1, sp, #60	; 0x3c
 8002034:	900f      	str	r0, [sp, #60]	; 0x3c
 8002036:	f24c 30b0 	movw	r0, #50096	; 0xc3b0
 800203a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800203e:	9014      	str	r0, [sp, #80]	; 0x50
 8002040:	2001      	movs	r0, #1
 8002042:	e9cd cc12 	strd	ip, ip, [sp, #72]	; 0x48
 8002046:	9011      	str	r0, [sp, #68]	; 0x44
 8002048:	f24c 60a8 	movw	r0, #50856	; 0xc6a8
 800204c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002050:	9010      	str	r0, [sp, #64]	; 0x40
 8002052:	f642 402b 	movw	r0, #11307	; 0x2c2b
 8002056:	f6c0 0000 	movt	r0, #2048	; 0x800
 800205a:	900d      	str	r0, [sp, #52]	; 0x34
 800205c:	a810      	add	r0, sp, #64	; 0x40
 800205e:	900c      	str	r0, [sp, #48]	; 0x30
 8002060:	f241 601f 	movw	r0, #5663	; 0x161f
 8002064:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002068:	900b      	str	r0, [sp, #44]	; 0x2c
 800206a:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 800206e:	a80e      	add	r0, sp, #56	; 0x38
 8002070:	a908      	add	r1, sp, #32
 8002072:	9008      	str	r0, [sp, #32]
 8002074:	2003      	movs	r0, #3
 8002076:	9007      	str	r0, [sp, #28]
 8002078:	e9cd c105 	strd	ip, r1, [sp, #20]
 800207c:	f24c 7100 	movw	r1, #50944	; 0xc700
 8002080:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 8002084:	f24c 3098 	movw	r0, #50072	; 0xc398
 8002088:	f6c0 0000 	movt	r0, #2048	; 0x800
 800208c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002090:	9002      	str	r0, [sp, #8]
 8002092:	a802      	add	r0, sp, #8
 8002094:	f000 f921 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8002098:	defe      	udf	#254	; 0xfe

0800209a <_ZN6mynewt4libs14sensor_network12prepare_post17hf47b658e9dd92751E>:
    pub fn init_collector_post() -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    pub fn sensor_network_init_post(iface_type: u8, uri: *const ::cty::c_char) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 800209a:	b510      	push	{r4, lr}
 800209c:	4604      	mov	r4, r0
 800209e:	4608      	mov	r0, r1
 80020a0:	f002 faaa 	bl	80045f8 <sensor_network_prepare_post>
 80020a4:	7060      	strb	r0, [r4, #1]
 80020a6:	2000      	movs	r0, #0
 80020a8:	7020      	strb	r0, [r4, #0]
 80020aa:	bd10      	pop	{r4, pc}

080020ac <_ZN6mynewt4libs14sensor_network14do_server_post17hc5b5f69d66a9019aE>:
    pub fn sensor_network_prepare_post(encoding: ::cty::c_int) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 80020ac:	b510      	push	{r4, lr}
 80020ae:	4604      	mov	r4, r0
 80020b0:	f002 fad9 	bl	8004666 <do_server_post>
 80020b4:	7060      	strb	r0, [r4, #1]
 80020b6:	2000      	movs	r0, #0
 80020b8:	7020      	strb	r0, [r4, #0]
 80020ba:	bd10      	pop	{r4, pc}

080020bc <_ZN6mynewt4libs14sensor_network13get_device_id17h087866bad0e5b5f0E>:
    pub fn should_send_to_collector(
        val: *mut sensor_value,
        device_name: *const ::cty::c_char,
    ) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 80020bc:	b510      	push	{r4, lr}
 80020be:	4604      	mov	r4, r0
 80020c0:	f002 fb32 	bl	8004728 <get_device_id>
 80020c4:	60a0      	str	r0, [r4, #8]
 80020c6:	2001      	movs	r0, #1
 80020c8:	7120      	strb	r0, [r4, #4]
 80020ca:	2000      	movs	r0, #0
 80020cc:	6020      	str	r0, [r4, #0]
 80020ce:	bd10      	pop	{r4, pc}

080020d0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE>:
    #[derive(Debug, PartialEq)]
 80020d0:	b510      	push	{r4, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	6802      	ldr	r2, [r0, #0]
 80020d6:	f102 000f 	add.w	r0, r2, #15
 80020da:	280e      	cmp	r0, #14
 80020dc:	d80f      	bhi.n	80020fe <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x2e>
 80020de:	e8df f000 	tbb	[pc, r0]
 80020e2:	1908      	.short	0x1908
 80020e4:	352f2721 	.word	0x352f2721
 80020e8:	4f49413b 	.word	0x4f49413b
 80020ec:	69615b55 	.word	0x69615b55
 80020f0:	006f      	.short	0x006f
 80020f2:	f24c 722c 	movw	r2, #50988	; 0xc72c
 80020f6:	ac01      	add	r4, sp, #4
 80020f8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80020fc:	e037      	b.n	800216e <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x9e>
 80020fe:	2001      	movs	r0, #1
 8002100:	ac01      	add	r4, sp, #4
 8002102:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8002106:	4282      	cmp	r2, r0
 8002108:	d162      	bne.n	80021d0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x100>
 800210a:	f24c 7220 	movw	r2, #50976	; 0xc720
 800210e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002112:	e04c      	b.n	80021ae <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xde>
 8002114:	ac01      	add	r4, sp, #4
 8002116:	f24c 7235 	movw	r2, #50997	; 0xc735
 800211a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800211e:	230d      	movs	r3, #13
 8002120:	4620      	mov	r0, r4
 8002122:	e05b      	b.n	80021dc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x10c>
 8002124:	f24c 7242 	movw	r2, #51010	; 0xc742
 8002128:	ac01      	add	r4, sp, #4
 800212a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800212e:	e03e      	b.n	80021ae <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xde>
 8002130:	ac01      	add	r4, sp, #4
 8002132:	f24c 724e 	movw	r2, #51022	; 0xc74e
 8002136:	f6c0 0200 	movt	r2, #2048	; 0x800
 800213a:	230b      	movs	r3, #11
 800213c:	4620      	mov	r0, r4
 800213e:	e04d      	b.n	80021dc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x10c>
 8002140:	f24c 7259 	movw	r2, #51033	; 0xc759
 8002144:	ac01      	add	r4, sp, #4
 8002146:	f6c0 0200 	movt	r2, #2048	; 0x800
 800214a:	e030      	b.n	80021ae <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xde>
 800214c:	f24c 7265 	movw	r2, #51045	; 0xc765
 8002150:	ac01      	add	r4, sp, #4
 8002152:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002156:	e038      	b.n	80021ca <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xfa>
 8002158:	f24c 726f 	movw	r2, #51055	; 0xc76f
 800215c:	ac01      	add	r4, sp, #4
 800215e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002162:	e032      	b.n	80021ca <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xfa>
 8002164:	f24c 7279 	movw	r2, #51065	; 0xc779
 8002168:	ac01      	add	r4, sp, #4
 800216a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800216e:	4620      	mov	r0, r4
 8002170:	2309      	movs	r3, #9
 8002172:	e033      	b.n	80021dc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x10c>
 8002174:	f24c 7282 	movw	r2, #51074	; 0xc782
 8002178:	ac01      	add	r4, sp, #4
 800217a:	f6c0 0200 	movt	r2, #2048	; 0x800
 800217e:	e024      	b.n	80021ca <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xfa>
 8002180:	f24c 728c 	movw	r2, #51084	; 0xc78c
 8002184:	ac01      	add	r4, sp, #4
 8002186:	f6c0 0200 	movt	r2, #2048	; 0x800
 800218a:	e01e      	b.n	80021ca <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xfa>
 800218c:	f24c 7296 	movw	r2, #51094	; 0xc796
 8002190:	ac01      	add	r4, sp, #4
 8002192:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002196:	e01f      	b.n	80021d8 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x108>
 8002198:	f24c 729d 	movw	r2, #51101	; 0xc79d
 800219c:	ac01      	add	r4, sp, #4
 800219e:	f6c0 0200 	movt	r2, #2048	; 0x800
 80021a2:	e012      	b.n	80021ca <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xfa>
 80021a4:	f24c 72a7 	movw	r2, #51111	; 0xc7a7
 80021a8:	ac01      	add	r4, sp, #4
 80021aa:	f6c0 0200 	movt	r2, #2048	; 0x800
 80021ae:	4620      	mov	r0, r4
 80021b0:	230c      	movs	r3, #12
 80021b2:	e013      	b.n	80021dc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x10c>
 80021b4:	f24c 72b3 	movw	r2, #51123	; 0xc7b3
 80021b8:	ac01      	add	r4, sp, #4
 80021ba:	f6c0 0200 	movt	r2, #2048	; 0x800
 80021be:	e004      	b.n	80021ca <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0xfa>
 80021c0:	f24c 72bd 	movw	r2, #51133	; 0xc7bd
 80021c4:	ac01      	add	r4, sp, #4
 80021c6:	f6c0 0200 	movt	r2, #2048	; 0x800
 80021ca:	4620      	mov	r0, r4
 80021cc:	230a      	movs	r3, #10
 80021ce:	e005      	b.n	80021dc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17he0e4746d9a1f344dE+0x10c>
 80021d0:	f24c 72c7 	movw	r2, #51143	; 0xc7c7
 80021d4:	f6c0 0200 	movt	r2, #2048	; 0x800
 80021d8:	4620      	mov	r0, r4
 80021da:	2307      	movs	r3, #7
 80021dc:	f001 f8ed 	bl	80033ba <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>
 80021e0:	4620      	mov	r0, r4
 80021e2:	f000 fc7b 	bl	8002adc <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>
 80021e6:	b004      	add	sp, #16
 80021e8:	bd10      	pop	{r4, pc}

080021ea <_ZN4core3ptr18real_drop_in_place17h012e98b5b5cd1768E>:
 80021ea:	4770      	bx	lr

080021ec <_ZN4core3ptr18real_drop_in_place17h02a68ac691a00745E>:
 80021ec:	4770      	bx	lr

080021ee <_ZN4core3ptr18real_drop_in_place17h605f2bc604187c4eE>:
 80021ee:	4770      	bx	lr

080021f0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbc81ca56d6e023e9E>:
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	460c      	mov	r4, r1
 80021f6:	4605      	mov	r5, r0
 80021f8:	f001 faf3 	bl	80037e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E>
 80021fc:	b9a8      	cbnz	r0, 800222a <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbc81ca56d6e023e9E+0x3a>
 80021fe:	f24c 73d0 	movw	r3, #51152	; 0xc7d0
 8002202:	2200      	movs	r2, #0
 8002204:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002208:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 800220c:	9205      	str	r2, [sp, #20]
 800220e:	9304      	str	r3, [sp, #16]
 8002210:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8002214:	2201      	movs	r2, #1
 8002216:	9201      	str	r2, [sp, #4]
 8002218:	f64c 0234 	movw	r2, #51252	; 0xc834
 800221c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002220:	9200      	str	r2, [sp, #0]
 8002222:	466a      	mov	r2, sp
 8002224:	f000 fd12 	bl	8002c4c <_ZN4core3fmt5write17hfeb861b024853061E>
 8002228:	b110      	cbz	r0, 8002230 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hbc81ca56d6e023e9E+0x40>
 800222a:	2001      	movs	r0, #1
 800222c:	b006      	add	sp, #24
 800222e:	bdb0      	pop	{r4, r5, r7, pc}
 8002230:	1d28      	adds	r0, r5, #4
 8002232:	4621      	mov	r1, r4
 8002234:	b006      	add	sp, #24
 8002236:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800223a:	f001 bad2 	b.w	80037e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E>

0800223e <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h60b349e3a3967a18E>:
 800223e:	f642 205e 	movw	r0, #10846	; 0x2a5e
 8002242:	f24b 21fd 	movw	r1, #45821	; 0xb2fd
 8002246:	f6c5 401d 	movt	r0, #23581	; 0x5c1d
 800224a:	f2c1 6181 	movt	r1, #5761	; 0x1681
 800224e:	4770      	bx	lr

08002250 <_ZN4core5panic9PanicInfo8location17h122f9d519f4a246bE>:
 8002250:	300c      	adds	r0, #12
 8002252:	4770      	bx	lr

08002254 <_ZN4core5panic8Location4file17ha9ce911e26883425E>:
 8002254:	e9d0 2100 	ldrd	r2, r1, [r0]
 8002258:	4610      	mov	r0, r2
 800225a:	4770      	bx	lr

0800225c <_ZN4core5panic8Location4line17h997c0352f671f211E>:
 800225c:	6880      	ldr	r0, [r0, #8]
 800225e:	4770      	bx	lr

08002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>:
 8002260:	b08c      	sub	sp, #48	; 0x30
 8002262:	e890 5006 	ldmia.w	r0, {r1, r2, ip, lr}
 8002266:	e9d0 3004 	ldrd	r3, r0, [r0, #16]
 800226a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800226e:	f24c 72d0 	movw	r2, #51152	; 0xc7d0
 8002272:	2100      	movs	r1, #0
 8002274:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002278:	9105      	str	r1, [sp, #20]
 800227a:	9204      	str	r2, [sp, #16]
 800227c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002280:	2101      	movs	r1, #1
 8002282:	9101      	str	r1, [sp, #4]
 8002284:	a906      	add	r1, sp, #24
 8002286:	9100      	str	r1, [sp, #0]
 8002288:	a908      	add	r1, sp, #32
 800228a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800228e:	4668      	mov	r0, sp
 8002290:	e9cd ce08 	strd	ip, lr, [sp, #32]
 8002294:	f000 f821 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8002298:	defe      	udf	#254	; 0xfe

0800229a <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>:
 800229a:	b08c      	sub	sp, #48	; 0x30
 800229c:	4603      	mov	r3, r0
 800229e:	f643 50af 	movw	r0, #15791	; 0x3daf
 80022a2:	e9cd 1200 	strd	r1, r2, [sp]
 80022a6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80022aa:	4669      	mov	r1, sp
 80022ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80022ae:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 80022b2:	a801      	add	r0, sp, #4
 80022b4:	9008      	str	r0, [sp, #32]
 80022b6:	2002      	movs	r0, #2
 80022b8:	a908      	add	r1, sp, #32
 80022ba:	9007      	str	r0, [sp, #28]
 80022bc:	9106      	str	r1, [sp, #24]
 80022be:	2100      	movs	r1, #0
 80022c0:	9105      	str	r1, [sp, #20]
 80022c2:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80022c6:	f64c 00b4 	movw	r0, #51380	; 0xc8b4
 80022ca:	f6c0 0000 	movt	r0, #2048	; 0x800
 80022ce:	4619      	mov	r1, r3
 80022d0:	9002      	str	r0, [sp, #8]
 80022d2:	a802      	add	r0, sp, #8
 80022d4:	f000 f801 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 80022d8:	defe      	udf	#254	; 0xfe

080022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>:
 80022da:	b088      	sub	sp, #32
 80022dc:	e9d1 c300 	ldrd	ip, r3, [r1]
 80022e0:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 80022e4:	9107      	str	r1, [sp, #28]
 80022e6:	e9cd 3205 	strd	r3, r2, [sp, #20]
 80022ea:	e9cd 0c03 	strd	r0, ip, [sp, #12]
 80022ee:	f64c 0090 	movw	r0, #51344	; 0xc890
 80022f2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80022f6:	9002      	str	r0, [sp, #8]
 80022f8:	f24c 70d0 	movw	r0, #51152	; 0xc7d0
 80022fc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002300:	9001      	str	r0, [sp, #4]
 8002302:	a801      	add	r0, sp, #4
 8002304:	f7ff f836 	bl	8001374 <rust_begin_unwind>
 8002308:	defe      	udf	#254	; 0xfe

0800230a <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E>:
 800230a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800230e:	b081      	sub	sp, #4
 8002310:	f011 0303 	ands.w	r3, r1, #3
 8002314:	4684      	mov	ip, r0
 8002316:	f04f 0000 	mov.w	r0, #0
 800231a:	bf18      	it	ne
 800231c:	f1d3 0e04 	rsbsne	lr, r3, #4
 8002320:	d150      	bne.n	80023c4 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xba>
 8002322:	fa5f f38c 	uxtb.w	r3, ip
 8002326:	2a08      	cmp	r2, #8
 8002328:	d31d      	bcc.n	8002366 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x5c>
 800232a:	f1a2 0c08 	sub.w	ip, r2, #8
 800232e:	4560      	cmp	r0, ip
 8002330:	d819      	bhi.n	8002366 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x5c>
 8002332:	f04f 3701 	mov.w	r7, #16843009	; 0x1010101
 8002336:	fb03 f507 	mul.w	r5, r3, r7
 800233a:	580f      	ldr	r7, [r1, r0]
 800233c:	406f      	eors	r7, r5
 800233e:	f1a7 3401 	sub.w	r4, r7, #16843009	; 0x1010101
 8002342:	ea24 0707 	bic.w	r7, r4, r7
 8002346:	180c      	adds	r4, r1, r0
 8002348:	6864      	ldr	r4, [r4, #4]
 800234a:	406c      	eors	r4, r5
 800234c:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
 8002350:	43a6      	bics	r6, r4
 8002352:	4337      	orrs	r7, r6
 8002354:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
 8002358:	d102      	bne.n	8002360 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x56>
 800235a:	3008      	adds	r0, #8
 800235c:	4560      	cmp	r0, ip
 800235e:	d9ec      	bls.n	800233a <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x30>
 8002360:	4290      	cmp	r0, r2
 8002362:	f200 80c2 	bhi.w	80024ea <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1e0>
 8002366:	180c      	adds	r4, r1, r0
 8002368:	eb01 0e02 	add.w	lr, r1, r2
 800236c:	eba2 0c00 	sub.w	ip, r2, r0
 8002370:	2100      	movs	r1, #0
 8002372:	4626      	mov	r6, r4
 8002374:	2200      	movs	r2, #0
 8002376:	ebae 0606 	sub.w	r6, lr, r6
 800237a:	1865      	adds	r5, r4, r1
 800237c:	2e03      	cmp	r6, #3
 800237e:	f240 8081 	bls.w	8002484 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x17a>
 8002382:	782e      	ldrb	r6, [r5, #0]
 8002384:	1af7      	subs	r7, r6, r3
 8002386:	bf18      	it	ne
 8002388:	2701      	movne	r7, #1
 800238a:	443a      	add	r2, r7
 800238c:	429e      	cmp	r6, r3
 800238e:	d016      	beq.n	80023be <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 8002390:	786e      	ldrb	r6, [r5, #1]
 8002392:	1af7      	subs	r7, r6, r3
 8002394:	bf18      	it	ne
 8002396:	2701      	movne	r7, #1
 8002398:	443a      	add	r2, r7
 800239a:	429e      	cmp	r6, r3
 800239c:	d00f      	beq.n	80023be <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 800239e:	78ae      	ldrb	r6, [r5, #2]
 80023a0:	1af7      	subs	r7, r6, r3
 80023a2:	bf18      	it	ne
 80023a4:	2701      	movne	r7, #1
 80023a6:	443a      	add	r2, r7
 80023a8:	429e      	cmp	r6, r3
 80023aa:	d008      	beq.n	80023be <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 80023ac:	78ef      	ldrb	r7, [r5, #3]
 80023ae:	3104      	adds	r1, #4
 80023b0:	1afe      	subs	r6, r7, r3
 80023b2:	bf18      	it	ne
 80023b4:	2601      	movne	r6, #1
 80023b6:	4432      	add	r2, r6
 80023b8:	1d2e      	adds	r6, r5, #4
 80023ba:	429f      	cmp	r7, r3
 80023bc:	d1db      	bne.n	8002376 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x6c>
 80023be:	2101      	movs	r1, #1
 80023c0:	1813      	adds	r3, r2, r0
 80023c2:	e02c      	b.n	800241e <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x114>
 80023c4:	4596      	cmp	lr, r2
 80023c6:	bf88      	it	hi
 80023c8:	4696      	movhi	lr, r2
 80023ca:	eb01 080e 	add.w	r8, r1, lr
 80023ce:	2300      	movs	r3, #0
 80023d0:	4674      	mov	r4, lr
 80023d2:	460d      	mov	r5, r1
 80023d4:	eba8 0605 	sub.w	r6, r8, r5
 80023d8:	2e03      	cmp	r6, #3
 80023da:	d925      	bls.n	8002428 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x11e>
 80023dc:	782f      	ldrb	r7, [r5, #0]
 80023de:	fa5f f68c 	uxtb.w	r6, ip
 80023e2:	1bb8      	subs	r0, r7, r6
 80023e4:	bf18      	it	ne
 80023e6:	2001      	movne	r0, #1
 80023e8:	4403      	add	r3, r0
 80023ea:	42b7      	cmp	r7, r6
 80023ec:	d016      	beq.n	800241c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 80023ee:	7868      	ldrb	r0, [r5, #1]
 80023f0:	1b87      	subs	r7, r0, r6
 80023f2:	bf18      	it	ne
 80023f4:	2701      	movne	r7, #1
 80023f6:	443b      	add	r3, r7
 80023f8:	42b0      	cmp	r0, r6
 80023fa:	d00f      	beq.n	800241c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 80023fc:	78a8      	ldrb	r0, [r5, #2]
 80023fe:	1b87      	subs	r7, r0, r6
 8002400:	bf18      	it	ne
 8002402:	2701      	movne	r7, #1
 8002404:	443b      	add	r3, r7
 8002406:	42b0      	cmp	r0, r6
 8002408:	d008      	beq.n	800241c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 800240a:	78e8      	ldrb	r0, [r5, #3]
 800240c:	3c04      	subs	r4, #4
 800240e:	3504      	adds	r5, #4
 8002410:	1b87      	subs	r7, r0, r6
 8002412:	bf18      	it	ne
 8002414:	2701      	movne	r7, #1
 8002416:	443b      	add	r3, r7
 8002418:	42b0      	cmp	r0, r6
 800241a:	d1db      	bne.n	80023d4 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xca>
 800241c:	2101      	movs	r1, #1
 800241e:	4608      	mov	r0, r1
 8002420:	4619      	mov	r1, r3
 8002422:	b001      	add	sp, #4
 8002424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002428:	2c00      	cmp	r4, #0
 800242a:	d05c      	beq.n	80024e6 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1dc>
 800242c:	462f      	mov	r7, r5
 800242e:	fa5f f68c 	uxtb.w	r6, ip
 8002432:	f817 9b01 	ldrb.w	r9, [r7], #1
 8002436:	ebb9 0006 	subs.w	r0, r9, r6
 800243a:	bf18      	it	ne
 800243c:	2001      	movne	r0, #1
 800243e:	4403      	add	r3, r0
 8002440:	45b1      	cmp	r9, r6
 8002442:	d0eb      	beq.n	800241c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 8002444:	4547      	cmp	r7, r8
 8002446:	d04e      	beq.n	80024e6 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1dc>
 8002448:	7868      	ldrb	r0, [r5, #1]
 800244a:	1b87      	subs	r7, r0, r6
 800244c:	bf18      	it	ne
 800244e:	2701      	movne	r7, #1
 8002450:	443b      	add	r3, r7
 8002452:	42b0      	cmp	r0, r6
 8002454:	d0e2      	beq.n	800241c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 8002456:	1ca8      	adds	r0, r5, #2
 8002458:	4540      	cmp	r0, r8
 800245a:	d044      	beq.n	80024e6 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1dc>
 800245c:	78a8      	ldrb	r0, [r5, #2]
 800245e:	1b87      	subs	r7, r0, r6
 8002460:	bf18      	it	ne
 8002462:	2701      	movne	r7, #1
 8002464:	443b      	add	r3, r7
 8002466:	42b0      	cmp	r0, r6
 8002468:	d0d8      	beq.n	800241c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 800246a:	1ce8      	adds	r0, r5, #3
 800246c:	4540      	cmp	r0, r8
 800246e:	d03a      	beq.n	80024e6 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1dc>
 8002470:	78e8      	ldrb	r0, [r5, #3]
 8002472:	3c04      	subs	r4, #4
 8002474:	3504      	adds	r5, #4
 8002476:	1b87      	subs	r7, r0, r6
 8002478:	bf18      	it	ne
 800247a:	2701      	movne	r7, #1
 800247c:	443b      	add	r3, r7
 800247e:	42b0      	cmp	r0, r6
 8002480:	d1d2      	bne.n	8002428 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x11e>
 8002482:	e7cb      	b.n	800241c <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x112>
 8002484:	ebac 0401 	sub.w	r4, ip, r1
 8002488:	b35c      	cbz	r4, 80024e2 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1d8>
 800248a:	4629      	mov	r1, r5
 800248c:	f811 7b01 	ldrb.w	r7, [r1], #1
 8002490:	1afe      	subs	r6, r7, r3
 8002492:	bf18      	it	ne
 8002494:	2601      	movne	r6, #1
 8002496:	4432      	add	r2, r6
 8002498:	429f      	cmp	r7, r3
 800249a:	f43f af90 	beq.w	80023be <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 800249e:	4571      	cmp	r1, lr
 80024a0:	d01f      	beq.n	80024e2 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1d8>
 80024a2:	7869      	ldrb	r1, [r5, #1]
 80024a4:	1acf      	subs	r7, r1, r3
 80024a6:	bf18      	it	ne
 80024a8:	2701      	movne	r7, #1
 80024aa:	443a      	add	r2, r7
 80024ac:	4299      	cmp	r1, r3
 80024ae:	f43f af86 	beq.w	80023be <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 80024b2:	1ca9      	adds	r1, r5, #2
 80024b4:	4571      	cmp	r1, lr
 80024b6:	d014      	beq.n	80024e2 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1d8>
 80024b8:	78a9      	ldrb	r1, [r5, #2]
 80024ba:	1acf      	subs	r7, r1, r3
 80024bc:	bf18      	it	ne
 80024be:	2701      	movne	r7, #1
 80024c0:	443a      	add	r2, r7
 80024c2:	4299      	cmp	r1, r3
 80024c4:	f43f af7b 	beq.w	80023be <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 80024c8:	1ce9      	adds	r1, r5, #3
 80024ca:	4571      	cmp	r1, lr
 80024cc:	d009      	beq.n	80024e2 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x1d8>
 80024ce:	78e9      	ldrb	r1, [r5, #3]
 80024d0:	3c04      	subs	r4, #4
 80024d2:	3504      	adds	r5, #4
 80024d4:	1acf      	subs	r7, r1, r3
 80024d6:	bf18      	it	ne
 80024d8:	2701      	movne	r7, #1
 80024da:	443a      	add	r2, r7
 80024dc:	4299      	cmp	r1, r3
 80024de:	d1d3      	bne.n	8002488 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x17e>
 80024e0:	e76d      	b.n	80023be <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb4>
 80024e2:	2100      	movs	r1, #0
 80024e4:	e76c      	b.n	80023c0 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0xb6>
 80024e6:	4670      	mov	r0, lr
 80024e8:	e71b      	b.n	8002322 <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E+0x18>
 80024ea:	4611      	mov	r1, r2
 80024ec:	f000 f823 	bl	8002536 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 80024f0:	defe      	udf	#254	; 0xfe

080024f2 <_ZN4core5slice20slice_index_len_fail17hfa6ff34b8fd07644E>:
 80024f2:	b08c      	sub	sp, #48	; 0x30
 80024f4:	e9cd 0100 	strd	r0, r1, [sp]
 80024f8:	f643 50af 	movw	r0, #15791	; 0x3daf
 80024fc:	a901      	add	r1, sp, #4
 80024fe:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002502:	900b      	str	r0, [sp, #44]	; 0x2c
 8002504:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 8002508:	4668      	mov	r0, sp
 800250a:	9008      	str	r0, [sp, #32]
 800250c:	2002      	movs	r0, #2
 800250e:	a908      	add	r1, sp, #32
 8002510:	9007      	str	r0, [sp, #28]
 8002512:	9106      	str	r1, [sp, #24]
 8002514:	2100      	movs	r1, #0
 8002516:	9105      	str	r1, [sp, #20]
 8002518:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800251c:	f64c 10e0 	movw	r0, #51680	; 0xc9e0
 8002520:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002524:	f64c 11f0 	movw	r1, #51696	; 0xc9f0
 8002528:	9002      	str	r0, [sp, #8]
 800252a:	a802      	add	r0, sp, #8
 800252c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002530:	f7ff fed3 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8002534:	defe      	udf	#254	; 0xfe

08002536 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>:
 8002536:	b08c      	sub	sp, #48	; 0x30
 8002538:	e9cd 0100 	strd	r0, r1, [sp]
 800253c:	f643 50af 	movw	r0, #15791	; 0x3daf
 8002540:	a901      	add	r1, sp, #4
 8002542:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002546:	900b      	str	r0, [sp, #44]	; 0x2c
 8002548:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
 800254c:	4668      	mov	r0, sp
 800254e:	9008      	str	r0, [sp, #32]
 8002550:	2002      	movs	r0, #2
 8002552:	a908      	add	r1, sp, #32
 8002554:	9007      	str	r0, [sp, #28]
 8002556:	9106      	str	r1, [sp, #24]
 8002558:	2100      	movs	r1, #0
 800255a:	9105      	str	r1, [sp, #20]
 800255c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8002560:	f64c 2024 	movw	r0, #51748	; 0xca24
 8002564:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002568:	f64c 2134 	movw	r1, #51764	; 0xca34
 800256c:	9002      	str	r0, [sp, #8]
 800256e:	a802      	add	r0, sp, #8
 8002570:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002574:	f7ff feb1 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8002578:	defe      	udf	#254	; 0xfe

0800257a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E>:
 800257a:	b09a      	sub	sp, #104	; 0x68
 800257c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002580:	e9cd 2300 	strd	r2, r3, [sp]
 8002584:	d802      	bhi.n	800258c <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x12>
 8002586:	2501      	movs	r5, #1
 8002588:	468c      	mov	ip, r1
 800258a:	e03e      	b.n	800260a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x90>
 800258c:	f1c1 0e00 	rsb	lr, r1, #0
 8002590:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8002594:	458c      	cmp	ip, r1
 8002596:	d205      	bcs.n	80025a4 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x2a>
 8002598:	f910 400c 	ldrsb.w	r4, [r0, ip]
 800259c:	f114 0f41 	cmn.w	r4, #65	; 0x41
 80025a0:	f300 80ee 	bgt.w	8002780 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x206>
 80025a4:	eb0e 040c 	add.w	r4, lr, ip
 80025a8:	f1ac 0601 	sub.w	r6, ip, #1
 80025ac:	2c01      	cmp	r4, #1
 80025ae:	d02a      	beq.n	8002606 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 80025b0:	428e      	cmp	r6, r1
 80025b2:	d206      	bcs.n	80025c2 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x48>
 80025b4:	eb00 050c 	add.w	r5, r0, ip
 80025b8:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
 80025bc:	f115 0f41 	cmn.w	r5, #65	; 0x41
 80025c0:	dc21      	bgt.n	8002606 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 80025c2:	f1ac 0602 	sub.w	r6, ip, #2
 80025c6:	2c02      	cmp	r4, #2
 80025c8:	d01d      	beq.n	8002606 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 80025ca:	428e      	cmp	r6, r1
 80025cc:	d206      	bcs.n	80025dc <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x62>
 80025ce:	eb00 050c 	add.w	r5, r0, ip
 80025d2:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
 80025d6:	f115 0f41 	cmn.w	r5, #65	; 0x41
 80025da:	dc14      	bgt.n	8002606 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 80025dc:	f1ac 0603 	sub.w	r6, ip, #3
 80025e0:	2c03      	cmp	r4, #3
 80025e2:	d010      	beq.n	8002606 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 80025e4:	428e      	cmp	r6, r1
 80025e6:	d206      	bcs.n	80025f6 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x7c>
 80025e8:	eb00 050c 	add.w	r5, r0, ip
 80025ec:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
 80025f0:	f115 0f41 	cmn.w	r5, #65	; 0x41
 80025f4:	dc07      	bgt.n	8002606 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x8c>
 80025f6:	f1bc 0c04 	subs.w	ip, ip, #4
 80025fa:	f04f 0500 	mov.w	r5, #0
 80025fe:	d004      	beq.n	800260a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x90>
 8002600:	2c04      	cmp	r4, #4
 8002602:	d1c7      	bne.n	8002594 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a>
 8002604:	e001      	b.n	800260a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x90>
 8002606:	2500      	movs	r5, #0
 8002608:	46b4      	mov	ip, r6
 800260a:	2605      	movs	r6, #5
 800260c:	2d00      	cmp	r5, #0
 800260e:	f64c 25fa 	movw	r5, #51962	; 0xcafa
 8002612:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8002616:	bf18      	it	ne
 8002618:	2600      	movne	r6, #0
 800261a:	9605      	str	r6, [sp, #20]
 800261c:	f24c 76d0 	movw	r6, #51152	; 0xc7d0
 8002620:	f6c0 0500 	movt	r5, #2048	; 0x800
 8002624:	f6c0 0600 	movt	r6, #2048	; 0x800
 8002628:	bf18      	it	ne
 800262a:	4635      	movne	r5, r6
 800262c:	428a      	cmp	r2, r1
 800262e:	9504      	str	r5, [sp, #16]
 8002630:	bf98      	it	ls
 8002632:	428b      	cmpls	r3, r1
 8002634:	d929      	bls.n	800268a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x110>
 8002636:	428a      	cmp	r2, r1
 8002638:	f643 60f7 	movw	r0, #16119	; 0x3ef7
 800263c:	a904      	add	r1, sp, #16
 800263e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002642:	bf88      	it	hi
 8002644:	4613      	movhi	r3, r2
 8002646:	9308      	str	r3, [sp, #32]
 8002648:	9015      	str	r0, [sp, #84]	; 0x54
 800264a:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
 800264e:	a802      	add	r0, sp, #8
 8002650:	9012      	str	r0, [sp, #72]	; 0x48
 8002652:	f643 50af 	movw	r0, #15791	; 0x3daf
 8002656:	f6c0 0000 	movt	r0, #2048	; 0x800
 800265a:	a910      	add	r1, sp, #64	; 0x40
 800265c:	9011      	str	r0, [sp, #68]	; 0x44
 800265e:	a808      	add	r0, sp, #32
 8002660:	9010      	str	r0, [sp, #64]	; 0x40
 8002662:	2003      	movs	r0, #3
 8002664:	900f      	str	r0, [sp, #60]	; 0x3c
 8002666:	910e      	str	r1, [sp, #56]	; 0x38
 8002668:	2100      	movs	r1, #0
 800266a:	910d      	str	r1, [sp, #52]	; 0x34
 800266c:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 8002670:	f64c 3020 	movw	r0, #52000	; 0xcb20
 8002674:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002678:	f64c 3138 	movw	r1, #52024	; 0xcb38
 800267c:	900a      	str	r0, [sp, #40]	; 0x28
 800267e:	a80a      	add	r0, sp, #40	; 0x28
 8002680:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002684:	f7ff fe29 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8002688:	defe      	udf	#254	; 0xfe
 800268a:	429a      	cmp	r2, r3
 800268c:	f200 80db 	bhi.w	8002846 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x2cc>
 8002690:	2a00      	cmp	r2, #0
 8002692:	bf18      	it	ne
 8002694:	4291      	cmpne	r1, r2
 8002696:	d156      	bne.n	8002746 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1cc>
 8002698:	461a      	mov	r2, r3
 800269a:	2a00      	cmp	r2, #0
 800269c:	9206      	str	r2, [sp, #24]
 800269e:	bf18      	it	ne
 80026a0:	428a      	cmpne	r2, r1
 80026a2:	d103      	bne.n	80026ac <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x132>
 80026a4:	4613      	mov	r3, r2
 80026a6:	428b      	cmp	r3, r1
 80026a8:	d03c      	beq.n	8002724 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1aa>
 80026aa:	e042      	b.n	8002732 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1b8>
 80026ac:	f1a0 0c01 	sub.w	ip, r0, #1
 80026b0:	f101 0e02 	add.w	lr, r1, #2
 80026b4:	1ccc      	adds	r4, r1, #3
 80026b6:	1c4d      	adds	r5, r1, #1
 80026b8:	1d0e      	adds	r6, r1, #4
 80026ba:	428a      	cmp	r2, r1
 80026bc:	d206      	bcs.n	80026cc <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x152>
 80026be:	eb0c 0302 	add.w	r3, ip, r2
 80026c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80026c6:	f113 0f40 	cmn.w	r3, #64	; 0x40
 80026ca:	daeb      	bge.n	80026a4 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x12a>
 80026cc:	1e53      	subs	r3, r2, #1
 80026ce:	bf18      	it	ne
 80026d0:	4295      	cmpne	r5, r2
 80026d2:	d025      	beq.n	8002720 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 80026d4:	428b      	cmp	r3, r1
 80026d6:	d204      	bcs.n	80026e2 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x168>
 80026d8:	f91c 7002 	ldrsb.w	r7, [ip, r2]
 80026dc:	f117 0f41 	cmn.w	r7, #65	; 0x41
 80026e0:	dc1e      	bgt.n	8002720 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 80026e2:	1e93      	subs	r3, r2, #2
 80026e4:	bf18      	it	ne
 80026e6:	4596      	cmpne	lr, r2
 80026e8:	d01a      	beq.n	8002720 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 80026ea:	428b      	cmp	r3, r1
 80026ec:	d206      	bcs.n	80026fc <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x182>
 80026ee:	eb0c 0702 	add.w	r7, ip, r2
 80026f2:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
 80026f6:	f117 0f41 	cmn.w	r7, #65	; 0x41
 80026fa:	dc11      	bgt.n	8002720 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 80026fc:	1ed3      	subs	r3, r2, #3
 80026fe:	bf18      	it	ne
 8002700:	4294      	cmpne	r4, r2
 8002702:	d00d      	beq.n	8002720 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 8002704:	428b      	cmp	r3, r1
 8002706:	d206      	bcs.n	8002716 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x19c>
 8002708:	eb0c 0702 	add.w	r7, ip, r2
 800270c:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
 8002710:	f117 0f41 	cmn.w	r7, #65	; 0x41
 8002714:	dc04      	bgt.n	8002720 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 8002716:	1f13      	subs	r3, r2, #4
 8002718:	d002      	beq.n	8002720 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1a6>
 800271a:	4296      	cmp	r6, r2
 800271c:	461a      	mov	r2, r3
 800271e:	d1cc      	bne.n	80026ba <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x140>
 8002720:	428b      	cmp	r3, r1
 8002722:	d106      	bne.n	8002732 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1b8>
 8002724:	f64c 1088 	movw	r0, #51592	; 0xc988
 8002728:	f6c0 0000 	movt	r0, #2048	; 0x800
 800272c:	f7ff fd98 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8002730:	defe      	udf	#254	; 0xfe
 8002732:	18c4      	adds	r4, r0, r3
 8002734:	4625      	mov	r5, r4
 8002736:	f915 6b01 	ldrsb.w	r6, [r5], #1
 800273a:	2e00      	cmp	r6, #0
 800273c:	b2f2      	uxtb	r2, r6
 800273e:	db09      	blt.n	8002754 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1da>
 8002740:	9207      	str	r2, [sp, #28]
 8002742:	2101      	movs	r1, #1
 8002744:	e048      	b.n	80027d8 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x25e>
 8002746:	d9a8      	bls.n	800269a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x120>
 8002748:	5686      	ldrsb	r6, [r0, r2]
 800274a:	f116 0f40 	cmn.w	r6, #64	; 0x40
 800274e:	bfa8      	it	ge
 8002750:	461a      	movge	r2, r3
 8002752:	e7a2      	b.n	800269a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x120>
 8002754:	4408      	add	r0, r1
 8002756:	4285      	cmp	r5, r0
 8002758:	d102      	bne.n	8002760 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1e6>
 800275a:	2500      	movs	r5, #0
 800275c:	4606      	mov	r6, r0
 800275e:	e003      	b.n	8002768 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1ee>
 8002760:	7861      	ldrb	r1, [r4, #1]
 8002762:	1ca6      	adds	r6, r4, #2
 8002764:	f001 053f 	and.w	r5, r1, #63	; 0x3f
 8002768:	f002 011f 	and.w	r1, r2, #31
 800276c:	2ae0      	cmp	r2, #224	; 0xe0
 800276e:	d304      	bcc.n	800277a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x200>
 8002770:	4286      	cmp	r6, r0
 8002772:	d107      	bne.n	8002784 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x20a>
 8002774:	2400      	movs	r4, #0
 8002776:	4606      	mov	r6, r0
 8002778:	e008      	b.n	800278c <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x212>
 800277a:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
 800277e:	e01c      	b.n	80027ba <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x240>
 8002780:	2500      	movs	r5, #0
 8002782:	e742      	b.n	800260a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x90>
 8002784:	f816 4b01 	ldrb.w	r4, [r6], #1
 8002788:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 800278c:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
 8002790:	2af0      	cmp	r2, #240	; 0xf0
 8002792:	d310      	bcc.n	80027b6 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x23c>
 8002794:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 8002798:	ea02 4181 	and.w	r1, r2, r1, lsl #18
 800279c:	4286      	cmp	r6, r0
 800279e:	bf1a      	itte	ne
 80027a0:	7830      	ldrbne	r0, [r6, #0]
 80027a2:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
 80027a6:	2000      	moveq	r0, #0
 80027a8:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
 80027ac:	4408      	add	r0, r1
 80027ae:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 80027b2:	d0b7      	beq.n	8002724 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x1aa>
 80027b4:	e001      	b.n	80027ba <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x240>
 80027b6:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
 80027ba:	2880      	cmp	r0, #128	; 0x80
 80027bc:	9007      	str	r0, [sp, #28]
 80027be:	d201      	bcs.n	80027c4 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x24a>
 80027c0:	2101      	movs	r1, #1
 80027c2:	e009      	b.n	80027d8 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x25e>
 80027c4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80027c8:	d201      	bcs.n	80027ce <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x254>
 80027ca:	2102      	movs	r1, #2
 80027cc:	e004      	b.n	80027d8 <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E+0x25e>
 80027ce:	2104      	movs	r1, #4
 80027d0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80027d4:	bf38      	it	cc
 80027d6:	2103      	movcc	r1, #3
 80027d8:	4419      	add	r1, r3
 80027da:	9308      	str	r3, [sp, #32]
 80027dc:	9109      	str	r1, [sp, #36]	; 0x24
 80027de:	f643 61f7 	movw	r1, #16119	; 0x3ef7
 80027e2:	aa04      	add	r2, sp, #16
 80027e4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80027e8:	9119      	str	r1, [sp, #100]	; 0x64
 80027ea:	a808      	add	r0, sp, #32
 80027ec:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
 80027f0:	a902      	add	r1, sp, #8
 80027f2:	9116      	str	r1, [sp, #88]	; 0x58
 80027f4:	f242 11f1 	movw	r1, #8689	; 0x21f1
 80027f8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80027fc:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8002800:	f243 30ed 	movw	r0, #13293	; 0x33ed
 8002804:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002808:	a910      	add	r1, sp, #64	; 0x40
 800280a:	9013      	str	r0, [sp, #76]	; 0x4c
 800280c:	a807      	add	r0, sp, #28
 800280e:	9012      	str	r0, [sp, #72]	; 0x48
 8002810:	f643 50af 	movw	r0, #15791	; 0x3daf
 8002814:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002818:	9011      	str	r0, [sp, #68]	; 0x44
 800281a:	a806      	add	r0, sp, #24
 800281c:	9010      	str	r0, [sp, #64]	; 0x40
 800281e:	2005      	movs	r0, #5
 8002820:	900f      	str	r0, [sp, #60]	; 0x3c
 8002822:	910e      	str	r1, [sp, #56]	; 0x38
 8002824:	2100      	movs	r1, #0
 8002826:	910d      	str	r1, [sp, #52]	; 0x34
 8002828:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 800282c:	f64c 30b4 	movw	r0, #52148	; 0xcbb4
 8002830:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002834:	f64c 31dc 	movw	r1, #52188	; 0xcbdc
 8002838:	900a      	str	r0, [sp, #40]	; 0x28
 800283a:	a80a      	add	r0, sp, #40	; 0x28
 800283c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002840:	f7ff fd4b 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8002844:	defe      	udf	#254	; 0xfe
 8002846:	f643 60f7 	movw	r0, #16119	; 0x3ef7
 800284a:	a904      	add	r1, sp, #16
 800284c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002850:	9017      	str	r0, [sp, #92]	; 0x5c
 8002852:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
 8002856:	a802      	add	r0, sp, #8
 8002858:	9014      	str	r0, [sp, #80]	; 0x50
 800285a:	f643 50af 	movw	r0, #15791	; 0x3daf
 800285e:	a901      	add	r1, sp, #4
 8002860:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002864:	9013      	str	r0, [sp, #76]	; 0x4c
 8002866:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 800286a:	4668      	mov	r0, sp
 800286c:	9010      	str	r0, [sp, #64]	; 0x40
 800286e:	2004      	movs	r0, #4
 8002870:	a910      	add	r1, sp, #64	; 0x40
 8002872:	900f      	str	r0, [sp, #60]	; 0x3c
 8002874:	910e      	str	r1, [sp, #56]	; 0x38
 8002876:	2100      	movs	r1, #0
 8002878:	910d      	str	r1, [sp, #52]	; 0x34
 800287a:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 800287e:	f64c 3058 	movw	r0, #52056	; 0xcb58
 8002882:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002886:	f64c 3178 	movw	r1, #52088	; 0xcb78
 800288a:	900a      	str	r0, [sp, #40]	; 0x28
 800288c:	a80a      	add	r0, sp, #40	; 0x28
 800288e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002892:	f7ff fd22 	bl	80022da <_ZN4core9panicking9panic_fmt17hbfe32cf8392a510cE>
 8002896:	defe      	udf	#254	; 0xfe

08002898 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E>:
 8002898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800289c:	b089      	sub	sp, #36	; 0x24
 800289e:	f04f 0900 	mov.w	r9, #0
 80028a2:	2a00      	cmp	r2, #0
 80028a4:	f000 808d 	beq.w	80029c2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x12a>
 80028a8:	f10d 0b08 	add.w	fp, sp, #8
 80028ac:	4682      	mov	sl, r0
 80028ae:	4690      	mov	r8, r2
 80028b0:	460d      	mov	r5, r1
 80028b2:	f10b 0018 	add.w	r0, fp, #24
 80028b6:	9001      	str	r0, [sp, #4]
 80028b8:	f89a 0008 	ldrb.w	r0, [sl, #8]
 80028bc:	b150      	cbz	r0, 80028d4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x3c>
 80028be:	e9da 0100 	ldrd	r0, r1, [sl]
 80028c2:	2204      	movs	r2, #4
 80028c4:	68cb      	ldr	r3, [r1, #12]
 80028c6:	f64c 01d0 	movw	r1, #51408	; 0xc8d0
 80028ca:	f6c0 0100 	movt	r1, #2048	; 0x800
 80028ce:	4798      	blx	r3
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d171      	bne.n	80029b8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x120>
 80028d4:	200a      	movs	r0, #10
 80028d6:	2101      	movs	r1, #1
 80028d8:	9008      	str	r0, [sp, #32]
 80028da:	4642      	mov	r2, r8
 80028dc:	9107      	str	r1, [sp, #28]
 80028de:	4629      	mov	r1, r5
 80028e0:	e9cd 8005 	strd	r8, r0, [sp, #20]
 80028e4:	a802      	add	r0, sp, #8
 80028e6:	e880 0320 	stmia.w	r0, {r5, r8, r9}
 80028ea:	200a      	movs	r0, #10
 80028ec:	e006      	b.n	80028fc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x64>
 80028ee:	9902      	ldr	r1, [sp, #8]
 80028f0:	eba0 0209 	sub.w	r2, r0, r9
 80028f4:	eb0b 0004 	add.w	r0, fp, r4
 80028f8:	4449      	add	r1, r9
 80028fa:	7dc0      	ldrb	r0, [r0, #23]
 80028fc:	f7ff fd05 	bl	800230a <_ZN4core5slice6memchr6memchr17hd4a19258abae6159E>
 8002900:	2801      	cmp	r0, #1
 8002902:	d14f      	bne.n	80029a4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x10c>
 8002904:	9804      	ldr	r0, [sp, #16]
 8002906:	9c07      	ldr	r4, [sp, #28]
 8002908:	4408      	add	r0, r1
 800290a:	f100 0901 	add.w	r9, r0, #1
 800290e:	f8cd 9010 	str.w	r9, [sp, #16]
 8002912:	45a1      	cmp	r9, r4
 8002914:	d201      	bcs.n	800291a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x82>
 8002916:	9e03      	ldr	r6, [sp, #12]
 8002918:	e015      	b.n	8002946 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xae>
 800291a:	9e03      	ldr	r6, [sp, #12]
 800291c:	4620      	mov	r0, r4
 800291e:	454e      	cmp	r6, r9
 8002920:	bf38      	it	cc
 8002922:	2000      	movcc	r0, #0
 8002924:	d30f      	bcc.n	8002946 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xae>
 8002926:	2c05      	cmp	r4, #5
 8002928:	d24f      	bcs.n	80029ca <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x132>
 800292a:	42a0      	cmp	r0, r4
 800292c:	d10b      	bne.n	8002946 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xae>
 800292e:	9802      	ldr	r0, [sp, #8]
 8002930:	eba9 0704 	sub.w	r7, r9, r4
 8002934:	9901      	ldr	r1, [sp, #4]
 8002936:	4438      	add	r0, r7
 8002938:	4288      	cmp	r0, r1
 800293a:	d036      	beq.n	80029aa <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x112>
 800293c:	9901      	ldr	r1, [sp, #4]
 800293e:	4622      	mov	r2, r4
 8002940:	f004 fcce 	bl	80072e0 <memcmp>
 8002944:	b388      	cbz	r0, 80029aa <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x112>
 8002946:	9805      	ldr	r0, [sp, #20]
 8002948:	4548      	cmp	r0, r9
 800294a:	bf28      	it	cs
 800294c:	4286      	cmpcs	r6, r0
 800294e:	d2ce      	bcs.n	80028ee <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x56>
 8002950:	f04f 0900 	mov.w	r9, #0
 8002954:	4644      	mov	r4, r8
 8002956:	f88a 9008 	strb.w	r9, [sl, #8]
 800295a:	eba8 0604 	sub.w	r6, r8, r4
 800295e:	fab4 f184 	clz	r1, r4
 8002962:	fab6 f086 	clz	r0, r6
 8002966:	0949      	lsrs	r1, r1, #5
 8002968:	0940      	lsrs	r0, r0, #5
 800296a:	ea51 0700 	orrs.w	r7, r1, r0
 800296e:	e9da 0100 	ldrd	r0, r1, [sl]
 8002972:	d105      	bne.n	8002980 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xe8>
 8002974:	45a0      	cmp	r8, r4
 8002976:	d92d      	bls.n	80029d4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x13c>
 8002978:	572a      	ldrsb	r2, [r5, r4]
 800297a:	f112 0f41 	cmn.w	r2, #65	; 0x41
 800297e:	dd29      	ble.n	80029d4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x13c>
 8002980:	68cb      	ldr	r3, [r1, #12]
 8002982:	4629      	mov	r1, r5
 8002984:	4622      	mov	r2, r4
 8002986:	4798      	blx	r3
 8002988:	b9b0      	cbnz	r0, 80029b8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x120>
 800298a:	b92f      	cbnz	r7, 8002998 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x100>
 800298c:	45a0      	cmp	r8, r4
 800298e:	d928      	bls.n	80029e2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x14a>
 8002990:	5728      	ldrsb	r0, [r5, r4]
 8002992:	f110 0f41 	cmn.w	r0, #65	; 0x41
 8002996:	dd24      	ble.n	80029e2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x14a>
 8002998:	4425      	add	r5, r4
 800299a:	2e00      	cmp	r6, #0
 800299c:	46b0      	mov	r8, r6
 800299e:	f47f af8b 	bne.w	80028b8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x20>
 80029a2:	e00c      	b.n	80029be <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x126>
 80029a4:	9805      	ldr	r0, [sp, #20]
 80029a6:	9004      	str	r0, [sp, #16]
 80029a8:	e7d2      	b.n	8002950 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xb8>
 80029aa:	2001      	movs	r0, #1
 80029ac:	1c7c      	adds	r4, r7, #1
 80029ae:	f88a 0008 	strb.w	r0, [sl, #8]
 80029b2:	f04f 0900 	mov.w	r9, #0
 80029b6:	e7d0      	b.n	800295a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0xc2>
 80029b8:	f04f 0901 	mov.w	r9, #1
 80029bc:	e001      	b.n	80029c2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E+0x12a>
 80029be:	f04f 0900 	mov.w	r9, #0
 80029c2:	4648      	mov	r0, r9
 80029c4:	b009      	add	sp, #36	; 0x24
 80029c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ca:	4620      	mov	r0, r4
 80029cc:	2104      	movs	r1, #4
 80029ce:	f7ff fd90 	bl	80024f2 <_ZN4core5slice20slice_index_len_fail17hfa6ff34b8fd07644E>
 80029d2:	defe      	udf	#254	; 0xfe
 80029d4:	4628      	mov	r0, r5
 80029d6:	4641      	mov	r1, r8
 80029d8:	2200      	movs	r2, #0
 80029da:	4623      	mov	r3, r4
 80029dc:	f7ff fdcd 	bl	800257a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E>
 80029e0:	defe      	udf	#254	; 0xfe
 80029e2:	4628      	mov	r0, r5
 80029e4:	4641      	mov	r1, r8
 80029e6:	4622      	mov	r2, r4
 80029e8:	4643      	mov	r3, r8
 80029ea:	f7ff fdc6 	bl	800257a <_ZN4core3str16slice_error_fail17h1c355556f2a38f35E>
 80029ee:	defe      	udf	#254	; 0xfe

080029f0 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E>:
 80029f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f4:	b091      	sub	sp, #68	; 0x44
 80029f6:	4604      	mov	r4, r0
 80029f8:	7a00      	ldrb	r0, [r0, #8]
 80029fa:	b140      	cbz	r0, 8002a0e <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0x1e>
 80029fc:	2001      	movs	r0, #1
 80029fe:	7220      	strb	r0, [r4, #8]
 8002a00:	6860      	ldr	r0, [r4, #4]
 8002a02:	3001      	adds	r0, #1
 8002a04:	6060      	str	r0, [r4, #4]
 8002a06:	4620      	mov	r0, r4
 8002a08:	b011      	add	sp, #68	; 0x44
 8002a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a0e:	e9d4 3000 	ldrd	r3, r0, [r4]
 8002a12:	460d      	mov	r5, r1
 8002a14:	4616      	mov	r6, r2
 8002a16:	7819      	ldrb	r1, [r3, #0]
 8002a18:	0749      	lsls	r1, r1, #29
 8002a1a:	d419      	bmi.n	8002a50 <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0x60>
 8002a1c:	f64c 42d6 	movw	r2, #52438	; 0xccd6
 8002a20:	f64c 41d2 	movw	r1, #52434	; 0xccd2
 8002a24:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002a28:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002a2c:	2800      	cmp	r0, #0
 8002a2e:	bf08      	it	eq
 8002a30:	4611      	moveq	r1, r2
 8002a32:	f04f 0202 	mov.w	r2, #2
 8002a36:	bf08      	it	eq
 8002a38:	2201      	moveq	r2, #1
 8002a3a:	e9d3 0306 	ldrd	r0, r3, [r3, #24]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4798      	blx	r3
 8002a42:	2800      	cmp	r0, #0
 8002a44:	d1da      	bne.n	80029fc <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xc>
 8002a46:	68f2      	ldr	r2, [r6, #12]
 8002a48:	4628      	mov	r0, r5
 8002a4a:	6821      	ldr	r1, [r4, #0]
 8002a4c:	4790      	blx	r2
 8002a4e:	e7d6      	b.n	80029fe <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xe>
 8002a50:	b958      	cbnz	r0, 8002a6a <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0x7a>
 8002a52:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a56:	2202      	movs	r2, #2
 8002a58:	68cb      	ldr	r3, [r1, #12]
 8002a5a:	f64c 41d4 	movw	r1, #52436	; 0xccd4
 8002a5e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002a62:	4798      	blx	r3
 8002a64:	2800      	cmp	r0, #0
 8002a66:	d1c9      	bne.n	80029fc <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xc>
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	9003      	str	r0, [sp, #12]
 8002a70:	f103 0e08 	add.w	lr, r3, #8
 8002a74:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8002a78:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a7c:	f88d 200c 	strb.w	r2, [sp, #12]
 8002a80:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002a84:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002a88:	e9d3 170a 	ldrd	r1, r7, [r3, #40]	; 0x28
 8002a8c:	e9d3 2000 	ldrd	r2, r0, [r3]
 8002a90:	e89e 5c00 	ldmia.w	lr, {sl, fp, ip, lr}
 8002a94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a98:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8002a9c:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8002aa0:	f64c 40b8 	movw	r0, #52408	; 0xccb8
 8002aa4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002aa8:	e9cd 170e 	strd	r1, r7, [sp, #56]	; 0x38
 8002aac:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8002ab0:	a904      	add	r1, sp, #16
 8002ab2:	900b      	str	r0, [sp, #44]	; 0x2c
 8002ab4:	a801      	add	r0, sp, #4
 8002ab6:	900a      	str	r0, [sp, #40]	; 0x28
 8002ab8:	a806      	add	r0, sp, #24
 8002aba:	e880 5c00 	stmia.w	r0, {sl, fp, ip, lr}
 8002abe:	4628      	mov	r0, r5
 8002ac0:	68f2      	ldr	r2, [r6, #12]
 8002ac2:	4790      	blx	r2
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d199      	bne.n	80029fc <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xc>
 8002ac8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002acc:	2202      	movs	r2, #2
 8002ace:	68cb      	ldr	r3, [r1, #12]
 8002ad0:	f64c 41d0 	movw	r1, #52432	; 0xccd0
 8002ad4:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002ad8:	4798      	blx	r3
 8002ada:	e790      	b.n	80029fe <_ZN4core3fmt8builders10DebugTuple5field17ha79ab474d6fe3b39E+0xe>

08002adc <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E>:
 8002adc:	b5b0      	push	{r4, r5, r7, lr}
 8002ade:	4604      	mov	r4, r0
 8002ae0:	7a05      	ldrb	r5, [r0, #8]
 8002ae2:	6840      	ldr	r0, [r0, #4]
 8002ae4:	b308      	cbz	r0, 8002b2a <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x4e>
 8002ae6:	b10d      	cbz	r5, 8002aec <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x10>
 8002ae8:	2501      	movs	r5, #1
 8002aea:	e01d      	b.n	8002b28 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x4c>
 8002aec:	2801      	cmp	r0, #1
 8002aee:	d110      	bne.n	8002b12 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x36>
 8002af0:	7a60      	ldrb	r0, [r4, #9]
 8002af2:	b170      	cbz	r0, 8002b12 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x36>
 8002af4:	6821      	ldr	r1, [r4, #0]
 8002af6:	7808      	ldrb	r0, [r1, #0]
 8002af8:	0740      	lsls	r0, r0, #29
 8002afa:	d40a      	bmi.n	8002b12 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x36>
 8002afc:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8002b00:	2201      	movs	r2, #1
 8002b02:	68cb      	ldr	r3, [r1, #12]
 8002b04:	f64c 41d7 	movw	r1, #52439	; 0xccd7
 8002b08:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002b0c:	2501      	movs	r5, #1
 8002b0e:	4798      	blx	r3
 8002b10:	b950      	cbnz	r0, 8002b28 <_ZN4core3fmt8builders10DebugTuple6finish17h7478dcd5620691a7E+0x4c>
 8002b12:	6821      	ldr	r1, [r4, #0]
 8002b14:	2201      	movs	r2, #1
 8002b16:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8002b1a:	68cb      	ldr	r3, [r1, #12]
 8002b1c:	f64c 41d8 	movw	r1, #52440	; 0xccd8
 8002b20:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002b24:	4798      	blx	r3
 8002b26:	4605      	mov	r5, r0
 8002b28:	7225      	strb	r5, [r4, #8]
 8002b2a:	2d00      	cmp	r5, #0
 8002b2c:	bf18      	it	ne
 8002b2e:	2501      	movne	r5, #1
 8002b30:	4628      	mov	r0, r5
 8002b32:	bdb0      	pop	{r4, r5, r7, pc}

08002b34 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E>:
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	2200      	movs	r2, #0
 8002b3a:	297f      	cmp	r1, #127	; 0x7f
 8002b3c:	9201      	str	r2, [sp, #4]
 8002b3e:	d803      	bhi.n	8002b48 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x14>
 8002b40:	f88d 1004 	strb.w	r1, [sp, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	e03b      	b.n	8002bc0 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x8c>
 8002b48:	ebb2 2fd1 	cmp.w	r2, r1, lsr #11
 8002b4c:	d10b      	bne.n	8002b66 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x32>
 8002b4e:	2202      	movs	r2, #2
 8002b50:	098b      	lsrs	r3, r1, #6
 8002b52:	f362 119f 	bfi	r1, r2, #6, #26
 8002b56:	f88d 1005 	strb.w	r1, [sp, #5]
 8002b5a:	2106      	movs	r1, #6
 8002b5c:	f361 135f 	bfi	r3, r1, #5, #27
 8002b60:	f88d 3004 	strb.w	r3, [sp, #4]
 8002b64:	e02c      	b.n	8002bc0 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x8c>
 8002b66:	2200      	movs	r2, #0
 8002b68:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
 8002b6c:	d112      	bne.n	8002b94 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x60>
 8002b6e:	2202      	movs	r2, #2
 8002b70:	460b      	mov	r3, r1
 8002b72:	f362 139f 	bfi	r3, r2, #6, #26
 8002b76:	f88d 3006 	strb.w	r3, [sp, #6]
 8002b7a:	098b      	lsrs	r3, r1, #6
 8002b7c:	0b09      	lsrs	r1, r1, #12
 8002b7e:	f362 139f 	bfi	r3, r2, #6, #26
 8002b82:	220e      	movs	r2, #14
 8002b84:	f362 111f 	bfi	r1, r2, #4, #28
 8002b88:	f88d 3005 	strb.w	r3, [sp, #5]
 8002b8c:	f88d 1004 	strb.w	r1, [sp, #4]
 8002b90:	2203      	movs	r2, #3
 8002b92:	e015      	b.n	8002bc0 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E+0x8c>
 8002b94:	2202      	movs	r2, #2
 8002b96:	460b      	mov	r3, r1
 8002b98:	f362 139f 	bfi	r3, r2, #6, #26
 8002b9c:	f88d 3007 	strb.w	r3, [sp, #7]
 8002ba0:	23f0      	movs	r3, #240	; 0xf0
 8002ba2:	ea43 4391 	orr.w	r3, r3, r1, lsr #18
 8002ba6:	f88d 3004 	strb.w	r3, [sp, #4]
 8002baa:	098b      	lsrs	r3, r1, #6
 8002bac:	0b09      	lsrs	r1, r1, #12
 8002bae:	f362 139f 	bfi	r3, r2, #6, #26
 8002bb2:	f362 119f 	bfi	r1, r2, #6, #26
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	f88d 3006 	strb.w	r3, [sp, #6]
 8002bbc:	f88d 1005 	strb.w	r1, [sp, #5]
 8002bc0:	a901      	add	r1, sp, #4
 8002bc2:	f7ff fe69 	bl	8002898 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E>
 8002bc6:	b002      	add	sp, #8
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <_ZN4core3fmt5Write9write_fmt17h1dde8e33e3292656E>:
 8002bca:	b570      	push	{r4, r5, r6, lr}
 8002bcc:	b088      	sub	sp, #32
 8002bce:	9001      	str	r0, [sp, #4]
 8002bd0:	aa02      	add	r2, sp, #8
 8002bd2:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
 8002bd6:	f64c 41dc 	movw	r1, #52444	; 0xccdc
 8002bda:	4610      	mov	r0, r2
 8002bdc:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002be0:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
 8002be4:	a801      	add	r0, sp, #4
 8002be6:	f000 f831 	bl	8002c4c <_ZN4core3fmt5write17hfeb861b024853061E>
 8002bea:	b008      	add	sp, #32
 8002bec:	bd70      	pop	{r4, r5, r6, pc}

08002bee <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hd3215ca6ed83c00eE>:
 8002bee:	6800      	ldr	r0, [r0, #0]
 8002bf0:	f7ff be52 	b.w	8002898 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hb4c162eac025d3e7E>

08002bf4 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17hc1dd88ddb83e927aE>:
 8002bf4:	6800      	ldr	r0, [r0, #0]
 8002bf6:	f7ff bf9d 	b.w	8002b34 <_ZN4core3fmt5Write10write_char17h46ea92a99ad03871E>

08002bfa <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hbaabbcf1c32c6171E>:
 8002bfa:	b570      	push	{r4, r5, r6, lr}
 8002bfc:	b088      	sub	sp, #32
 8002bfe:	6800      	ldr	r0, [r0, #0]
 8002c00:	aa02      	add	r2, sp, #8
 8002c02:	9001      	str	r0, [sp, #4]
 8002c04:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f64c 41dc 	movw	r1, #52444	; 0xccdc
 8002c0e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002c12:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
 8002c16:	a801      	add	r0, sp, #4
 8002c18:	f000 f818 	bl	8002c4c <_ZN4core3fmt5write17hfeb861b024853061E>
 8002c1c:	b008      	add	sp, #32
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}

08002c20 <_ZN4core3fmt10ArgumentV110show_usize17h0a1563fc3dacf510E>:
 8002c20:	6800      	ldr	r0, [r0, #0]
 8002c22:	460a      	mov	r2, r1
 8002c24:	2101      	movs	r1, #1
 8002c26:	f001 b830 	b.w	8003c8a <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>

08002c2a <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17hd71f50db4d05698dE>:
 8002c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
 8002c34:	466a      	mov	r2, sp
 8002c36:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	4660      	mov	r0, ip
 8002c3e:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
 8002c42:	f000 f803 	bl	8002c4c <_ZN4core3fmt5write17hfeb861b024853061E>
 8002c46:	b006      	add	sp, #24
 8002c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c4c <_ZN4core3fmt5write17hfeb861b024853061E>:
 8002c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c50:	b08d      	sub	sp, #52	; 0x34
 8002c52:	2303      	movs	r3, #3
 8002c54:	e9d2 5404 	ldrd	r5, r4, [r2, #16]
 8002c58:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8002c5c:	2320      	movs	r3, #32
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	2300      	movs	r3, #0
 8002c62:	f10d 0c18 	add.w	ip, sp, #24
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
 8002c6c:	e88c 0023 	stmia.w	ip, {r0, r1, r5}
 8002c70:	6897      	ldr	r7, [r2, #8]
 8002c72:	9304      	str	r3, [sp, #16]
 8002c74:	2f00      	cmp	r7, #0
 8002c76:	9302      	str	r3, [sp, #8]
 8002c78:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8002c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c7e:	f000 8097 	beq.w	8002db0 <_ZN4core3fmt5write17hfeb861b024853061E+0x164>
 8002c82:	e9d2 ba00 	ldrd	fp, sl, [r2]
 8002c86:	68d4      	ldr	r4, [r2, #12]
 8002c88:	4554      	cmp	r4, sl
 8002c8a:	bf88      	it	hi
 8002c8c:	4654      	movhi	r4, sl
 8002c8e:	2c00      	cmp	r4, #0
 8002c90:	f000 80b2 	beq.w	8002df8 <_ZN4core3fmt5write17hfeb861b024853061E+0x1ac>
 8002c94:	68cb      	ldr	r3, [r1, #12]
 8002c96:	e9db 1200 	ldrd	r1, r2, [fp]
 8002c9a:	4798      	blx	r3
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	f040 80b8 	bne.w	8002e12 <_ZN4core3fmt5write17hfeb861b024853061E+0x1c6>
 8002ca2:	f642 4921 	movw	r9, #11297	; 0x2c21
 8002ca6:	2500      	movs	r5, #0
 8002ca8:	f6c0 0900 	movt	r9, #2048	; 0x800
 8002cac:	46e8      	mov	r8, sp
 8002cae:	68b8      	ldr	r0, [r7, #8]
 8002cb0:	9001      	str	r0, [sp, #4]
 8002cb2:	f897 0020 	ldrb.w	r0, [r7, #32]
 8002cb6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	9000      	str	r0, [sp, #0]
 8002cbe:	69b8      	ldr	r0, [r7, #24]
 8002cc0:	2801      	cmp	r0, #1
 8002cc2:	d011      	beq.n	8002ce8 <_ZN4core3fmt5write17hfeb861b024853061E+0x9c>
 8002cc4:	2802      	cmp	r0, #2
 8002cc6:	d003      	beq.n	8002cd0 <_ZN4core3fmt5write17hfeb861b024853061E+0x84>
 8002cc8:	2803      	cmp	r0, #3
 8002cca:	d01d      	beq.n	8002d08 <_ZN4core3fmt5write17hfeb861b024853061E+0xbc>
 8002ccc:	69f9      	ldr	r1, [r7, #28]
 8002cce:	e019      	b.n	8002d04 <_ZN4core3fmt5write17hfeb861b024853061E+0xb8>
 8002cd0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002cd4:	4288      	cmp	r0, r1
 8002cd6:	d017      	beq.n	8002d08 <_ZN4core3fmt5write17hfeb861b024853061E+0xbc>
 8002cd8:	f100 0108 	add.w	r1, r0, #8
 8002cdc:	9108      	str	r1, [sp, #32]
 8002cde:	6841      	ldr	r1, [r0, #4]
 8002ce0:	4549      	cmp	r1, r9
 8002ce2:	d111      	bne.n	8002d08 <_ZN4core3fmt5write17hfeb861b024853061E+0xbc>
 8002ce4:	6800      	ldr	r0, [r0, #0]
 8002ce6:	e00c      	b.n	8002d02 <_ZN4core3fmt5write17hfeb861b024853061E+0xb6>
 8002ce8:	69f9      	ldr	r1, [r7, #28]
 8002cea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002cec:	4291      	cmp	r1, r2
 8002cee:	f080 8098 	bcs.w	8002e22 <_ZN4core3fmt5write17hfeb861b024853061E+0x1d6>
 8002cf2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002cf4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8002cf8:	6852      	ldr	r2, [r2, #4]
 8002cfa:	454a      	cmp	r2, r9
 8002cfc:	d104      	bne.n	8002d08 <_ZN4core3fmt5write17hfeb861b024853061E+0xbc>
 8002cfe:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 8002d02:	6801      	ldr	r1, [r0, #0]
 8002d04:	2001      	movs	r0, #1
 8002d06:	e000      	b.n	8002d0a <_ZN4core3fmt5write17hfeb861b024853061E+0xbe>
 8002d08:	2000      	movs	r0, #0
 8002d0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d0e:	6938      	ldr	r0, [r7, #16]
 8002d10:	2801      	cmp	r0, #1
 8002d12:	d011      	beq.n	8002d38 <_ZN4core3fmt5write17hfeb861b024853061E+0xec>
 8002d14:	2802      	cmp	r0, #2
 8002d16:	d003      	beq.n	8002d20 <_ZN4core3fmt5write17hfeb861b024853061E+0xd4>
 8002d18:	2803      	cmp	r0, #3
 8002d1a:	d01c      	beq.n	8002d56 <_ZN4core3fmt5write17hfeb861b024853061E+0x10a>
 8002d1c:	6979      	ldr	r1, [r7, #20]
 8002d1e:	e018      	b.n	8002d52 <_ZN4core3fmt5write17hfeb861b024853061E+0x106>
 8002d20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002d24:	4288      	cmp	r0, r1
 8002d26:	d016      	beq.n	8002d56 <_ZN4core3fmt5write17hfeb861b024853061E+0x10a>
 8002d28:	f100 0108 	add.w	r1, r0, #8
 8002d2c:	9108      	str	r1, [sp, #32]
 8002d2e:	6841      	ldr	r1, [r0, #4]
 8002d30:	4549      	cmp	r1, r9
 8002d32:	d110      	bne.n	8002d56 <_ZN4core3fmt5write17hfeb861b024853061E+0x10a>
 8002d34:	6800      	ldr	r0, [r0, #0]
 8002d36:	e00b      	b.n	8002d50 <_ZN4core3fmt5write17hfeb861b024853061E+0x104>
 8002d38:	6979      	ldr	r1, [r7, #20]
 8002d3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002d3c:	4291      	cmp	r1, r2
 8002d3e:	d270      	bcs.n	8002e22 <_ZN4core3fmt5write17hfeb861b024853061E+0x1d6>
 8002d40:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d42:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8002d46:	6852      	ldr	r2, [r2, #4]
 8002d48:	454a      	cmp	r2, r9
 8002d4a:	d104      	bne.n	8002d56 <_ZN4core3fmt5write17hfeb861b024853061E+0x10a>
 8002d4c:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 8002d50:	6801      	ldr	r1, [r0, #0]
 8002d52:	2001      	movs	r0, #1
 8002d54:	e000      	b.n	8002d58 <_ZN4core3fmt5write17hfeb861b024853061E+0x10c>
 8002d56:	2000      	movs	r0, #0
 8002d58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002d5c:	6838      	ldr	r0, [r7, #0]
 8002d5e:	2801      	cmp	r0, #1
 8002d60:	d107      	bne.n	8002d72 <_ZN4core3fmt5write17hfeb861b024853061E+0x126>
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002d66:	4291      	cmp	r1, r2
 8002d68:	d262      	bcs.n	8002e30 <_ZN4core3fmt5write17hfeb861b024853061E+0x1e4>
 8002d6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d6c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8002d70:	e006      	b.n	8002d80 <_ZN4core3fmt5write17hfeb861b024853061E+0x134>
 8002d72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002d76:	4288      	cmp	r0, r1
 8002d78:	d061      	beq.n	8002e3e <_ZN4core3fmt5write17hfeb861b024853061E+0x1f2>
 8002d7a:	f100 0108 	add.w	r1, r0, #8
 8002d7e:	9108      	str	r1, [sp, #32]
 8002d80:	1d01      	adds	r1, r0, #4
 8002d82:	6800      	ldr	r0, [r0, #0]
 8002d84:	680a      	ldr	r2, [r1, #0]
 8002d86:	4641      	mov	r1, r8
 8002d88:	4790      	blx	r2
 8002d8a:	2800      	cmp	r0, #0
 8002d8c:	d141      	bne.n	8002e12 <_ZN4core3fmt5write17hfeb861b024853061E+0x1c6>
 8002d8e:	1c6e      	adds	r6, r5, #1
 8002d90:	42a6      	cmp	r6, r4
 8002d92:	d232      	bcs.n	8002dfa <_ZN4core3fmt5write17hfeb861b024853061E+0x1ae>
 8002d94:	eb0b 00c5 	add.w	r0, fp, r5, lsl #3
 8002d98:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8002d9c:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4798      	blx	r3
 8002da4:	3724      	adds	r7, #36	; 0x24
 8002da6:	2800      	cmp	r0, #0
 8002da8:	4635      	mov	r5, r6
 8002daa:	f43f af80 	beq.w	8002cae <_ZN4core3fmt5write17hfeb861b024853061E+0x62>
 8002dae:	e030      	b.n	8002e12 <_ZN4core3fmt5write17hfeb861b024853061E+0x1c6>
 8002db0:	e9d2 ba00 	ldrd	fp, sl, [r2]
 8002db4:	4554      	cmp	r4, sl
 8002db6:	bf88      	it	hi
 8002db8:	4654      	movhi	r4, sl
 8002dba:	b1ec      	cbz	r4, 8002df8 <_ZN4core3fmt5write17hfeb861b024853061E+0x1ac>
 8002dbc:	68cb      	ldr	r3, [r1, #12]
 8002dbe:	e9db 1200 	ldrd	r1, r2, [fp]
 8002dc2:	4798      	blx	r3
 8002dc4:	bb28      	cbnz	r0, 8002e12 <_ZN4core3fmt5write17hfeb861b024853061E+0x1c6>
 8002dc6:	2700      	movs	r7, #0
 8002dc8:	46e8      	mov	r8, sp
 8002dca:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 8002dce:	f855 0037 	ldr.w	r0, [r5, r7, lsl #3]
 8002dd2:	684a      	ldr	r2, [r1, #4]
 8002dd4:	4641      	mov	r1, r8
 8002dd6:	4790      	blx	r2
 8002dd8:	b9d8      	cbnz	r0, 8002e12 <_ZN4core3fmt5write17hfeb861b024853061E+0x1c6>
 8002dda:	1c7e      	adds	r6, r7, #1
 8002ddc:	42a6      	cmp	r6, r4
 8002dde:	d20c      	bcs.n	8002dfa <_ZN4core3fmt5write17hfeb861b024853061E+0x1ae>
 8002de0:	eb0b 00c7 	add.w	r0, fp, r7, lsl #3
 8002de4:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8002de8:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	4798      	blx	r3
 8002df0:	2800      	cmp	r0, #0
 8002df2:	4637      	mov	r7, r6
 8002df4:	d0e9      	beq.n	8002dca <_ZN4core3fmt5write17hfeb861b024853061E+0x17e>
 8002df6:	e00c      	b.n	8002e12 <_ZN4core3fmt5write17hfeb861b024853061E+0x1c6>
 8002df8:	2600      	movs	r6, #0
 8002dfa:	45b2      	cmp	sl, r6
 8002dfc:	d90d      	bls.n	8002e1a <_ZN4core3fmt5write17hfeb861b024853061E+0x1ce>
 8002dfe:	eb0b 00c6 	add.w	r0, fp, r6, lsl #3
 8002e02:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
 8002e06:	6842      	ldr	r2, [r0, #4]
 8002e08:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	4798      	blx	r3
 8002e10:	b118      	cbz	r0, 8002e1a <_ZN4core3fmt5write17hfeb861b024853061E+0x1ce>
 8002e12:	2001      	movs	r0, #1
 8002e14:	b00d      	add	sp, #52	; 0x34
 8002e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	b00d      	add	sp, #52	; 0x34
 8002e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e22:	f64c 5028 	movw	r0, #52520	; 0xcd28
 8002e26:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002e2a:	f7ff fa36 	bl	800229a <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 8002e2e:	defe      	udf	#254	; 0xfe
 8002e30:	f64c 5018 	movw	r0, #52504	; 0xcd18
 8002e34:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002e38:	f7ff fa2f 	bl	800229a <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 8002e3c:	defe      	udf	#254	; 0xfe
 8002e3e:	f64c 1088 	movw	r0, #51592	; 0xc988
 8002e42:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002e46:	f7ff fa0b 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 8002e4a:	defe      	udf	#254	; 0xfe

08002e4c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>:
 8002e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e50:	b083      	sub	sp, #12
 8002e52:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
 8002e56:	461f      	mov	r7, r3
 8002e58:	4692      	mov	sl, r2
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	b1c9      	cbz	r1, 8002e92 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x46>
 8002e5e:	f8d4 e000 	ldr.w	lr, [r4]
 8002e62:	f04f 082b 	mov.w	r8, #43	; 0x2b
 8002e66:	f01e 0101 	ands.w	r1, lr, #1
 8002e6a:	bf08      	it	eq
 8002e6c:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
 8002e70:	eb01 0b09 	add.w	fp, r1, r9
 8002e74:	ea5f 714e 	movs.w	r1, lr, lsl #29
 8002e78:	d514      	bpl.n	8002ea4 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x58>
 8002e7a:	b1bf      	cbz	r7, 8002eac <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x60>
 8002e7c:	1e79      	subs	r1, r7, #1
 8002e7e:	f007 0c03 	and.w	ip, r7, #3
 8002e82:	2903      	cmp	r1, #3
 8002e84:	d214      	bcs.n	8002eb0 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x64>
 8002e86:	2100      	movs	r1, #0
 8002e88:	4653      	mov	r3, sl
 8002e8a:	f1bc 0f00 	cmp.w	ip, #0
 8002e8e:	d136      	bne.n	8002efe <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xb2>
 8002e90:	e04d      	b.n	8002f2e <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 8002e92:	f8d4 e000 	ldr.w	lr, [r4]
 8002e96:	f109 0b01 	add.w	fp, r9, #1
 8002e9a:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8002e9e:	ea5f 714e 	movs.w	r1, lr, lsl #29
 8002ea2:	d4ea      	bmi.n	8002e7a <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x2e>
 8002ea4:	2700      	movs	r7, #0
 8002ea6:	f04f 0a00 	mov.w	sl, #0
 8002eaa:	e044      	b.n	8002f36 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xea>
 8002eac:	2100      	movs	r1, #0
 8002eae:	e03e      	b.n	8002f2e <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 8002eb0:	e9cd 9601 	strd	r9, r6, [sp, #4]
 8002eb4:	ebac 0607 	sub.w	r6, ip, r7
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4653      	mov	r3, sl
 8002ebc:	781d      	ldrb	r5, [r3, #0]
 8002ebe:	785a      	ldrb	r2, [r3, #1]
 8002ec0:	7898      	ldrb	r0, [r3, #2]
 8002ec2:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
 8002ec6:	f893 9003 	ldrb.w	r9, [r3, #3]
 8002eca:	2d80      	cmp	r5, #128	; 0x80
 8002ecc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8002ed0:	bf08      	it	eq
 8002ed2:	3101      	addeq	r1, #1
 8002ed4:	2a80      	cmp	r2, #128	; 0x80
 8002ed6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8002eda:	bf08      	it	eq
 8002edc:	3101      	addeq	r1, #1
 8002ede:	2880      	cmp	r0, #128	; 0x80
 8002ee0:	f009 00c0 	and.w	r0, r9, #192	; 0xc0
 8002ee4:	bf08      	it	eq
 8002ee6:	3101      	addeq	r1, #1
 8002ee8:	2880      	cmp	r0, #128	; 0x80
 8002eea:	bf08      	it	eq
 8002eec:	3101      	addeq	r1, #1
 8002eee:	3304      	adds	r3, #4
 8002ef0:	3604      	adds	r6, #4
 8002ef2:	d1e3      	bne.n	8002ebc <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x70>
 8002ef4:	e9dd 9601 	ldrd	r9, r6, [sp, #4]
 8002ef8:	f1bc 0f00 	cmp.w	ip, #0
 8002efc:	d017      	beq.n	8002f2e <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 8002efe:	7818      	ldrb	r0, [r3, #0]
 8002f00:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8002f04:	2880      	cmp	r0, #128	; 0x80
 8002f06:	bf08      	it	eq
 8002f08:	3101      	addeq	r1, #1
 8002f0a:	f1bc 0f01 	cmp.w	ip, #1
 8002f0e:	d00e      	beq.n	8002f2e <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 8002f10:	7858      	ldrb	r0, [r3, #1]
 8002f12:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8002f16:	2880      	cmp	r0, #128	; 0x80
 8002f18:	bf08      	it	eq
 8002f1a:	3101      	addeq	r1, #1
 8002f1c:	f1bc 0f02 	cmp.w	ip, #2
 8002f20:	d005      	beq.n	8002f2e <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0xe2>
 8002f22:	7898      	ldrb	r0, [r3, #2]
 8002f24:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8002f28:	2880      	cmp	r0, #128	; 0x80
 8002f2a:	bf08      	it	eq
 8002f2c:	3101      	addeq	r1, #1
 8002f2e:	eb0b 0007 	add.w	r0, fp, r7
 8002f32:	eba0 0b01 	sub.w	fp, r0, r1
 8002f36:	68a0      	ldr	r0, [r4, #8]
 8002f38:	2801      	cmp	r0, #1
 8002f3a:	d115      	bne.n	8002f68 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x11c>
 8002f3c:	68e5      	ldr	r5, [r4, #12]
 8002f3e:	455d      	cmp	r5, fp
 8002f40:	d912      	bls.n	8002f68 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x11c>
 8002f42:	ea5f 700e 	movs.w	r0, lr, lsl #28
 8002f46:	9602      	str	r6, [sp, #8]
 8002f48:	d423      	bmi.n	8002f92 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x146>
 8002f4a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002f4e:	eba5 000b 	sub.w	r0, r5, fp
 8002f52:	2903      	cmp	r1, #3
 8002f54:	bf08      	it	eq
 8002f56:	2101      	moveq	r1, #1
 8002f58:	078a      	lsls	r2, r1, #30
 8002f5a:	d036      	beq.n	8002fca <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x17e>
 8002f5c:	2902      	cmp	r1, #2
 8002f5e:	d036      	beq.n	8002fce <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x182>
 8002f60:	2100      	movs	r1, #0
 8002f62:	4605      	mov	r5, r0
 8002f64:	9101      	str	r1, [sp, #4]
 8002f66:	e036      	b.n	8002fd6 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x18a>
 8002f68:	4620      	mov	r0, r4
 8002f6a:	4641      	mov	r1, r8
 8002f6c:	4652      	mov	r2, sl
 8002f6e:	463b      	mov	r3, r7
 8002f70:	f000 f890 	bl	8003094 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E>
 8002f74:	b120      	cbz	r0, 8002f80 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x134>
 8002f76:	2601      	movs	r6, #1
 8002f78:	4630      	mov	r0, r6
 8002f7a:	b003      	add	sp, #12
 8002f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f80:	69e1      	ldr	r1, [r4, #28]
 8002f82:	464a      	mov	r2, r9
 8002f84:	69a0      	ldr	r0, [r4, #24]
 8002f86:	68cb      	ldr	r3, [r1, #12]
 8002f88:	4631      	mov	r1, r6
 8002f8a:	b003      	add	sp, #12
 8002f8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f90:	4718      	bx	r3
 8002f92:	2601      	movs	r6, #1
 8002f94:	2030      	movs	r0, #48	; 0x30
 8002f96:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 8002f9a:	4641      	mov	r1, r8
 8002f9c:	6060      	str	r0, [r4, #4]
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	4652      	mov	r2, sl
 8002fa2:	463b      	mov	r3, r7
 8002fa4:	f000 f876 	bl	8003094 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d1e5      	bne.n	8002f78 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12c>
 8002fac:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002fb0:	eba5 000b 	sub.w	r0, r5, fp
 8002fb4:	2903      	cmp	r1, #3
 8002fb6:	bf08      	it	eq
 8002fb8:	2101      	moveq	r1, #1
 8002fba:	078a      	lsls	r2, r1, #30
 8002fbc:	d03a      	beq.n	8003034 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1e8>
 8002fbe:	2902      	cmp	r1, #2
 8002fc0:	d03b      	beq.n	800303a <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1ee>
 8002fc2:	f04f 0800 	mov.w	r8, #0
 8002fc6:	4605      	mov	r5, r0
 8002fc8:	e03b      	b.n	8003042 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1f6>
 8002fca:	2500      	movs	r5, #0
 8002fcc:	e002      	b.n	8002fd4 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x188>
 8002fce:	0845      	lsrs	r5, r0, #1
 8002fd0:	3001      	adds	r0, #1
 8002fd2:	0840      	lsrs	r0, r0, #1
 8002fd4:	9001      	str	r0, [sp, #4]
 8002fd6:	f04f 36ff 	mov.w	r6, #4294967295
 8002fda:	3601      	adds	r6, #1
 8002fdc:	42ae      	cmp	r6, r5
 8002fde:	d207      	bcs.n	8002ff0 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1a4>
 8002fe0:	6861      	ldr	r1, [r4, #4]
 8002fe2:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 8002fe6:	6912      	ldr	r2, [r2, #16]
 8002fe8:	4790      	blx	r2
 8002fea:	2800      	cmp	r0, #0
 8002fec:	d0f5      	beq.n	8002fda <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x18e>
 8002fee:	e7c2      	b.n	8002f76 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	4652      	mov	r2, sl
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8002ffc:	f000 f84a 	bl	8003094 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E>
 8003000:	2800      	cmp	r0, #0
 8003002:	d1b8      	bne.n	8002f76 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 8003004:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8003008:	464a      	mov	r2, r9
 800300a:	68cb      	ldr	r3, [r1, #12]
 800300c:	9902      	ldr	r1, [sp, #8]
 800300e:	4798      	blx	r3
 8003010:	2800      	cmp	r0, #0
 8003012:	d1b0      	bne.n	8002f76 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 8003014:	e9d4 8406 	ldrd	r8, r4, [r4, #24]
 8003018:	f04f 37ff 	mov.w	r7, #4294967295
 800301c:	9d01      	ldr	r5, [sp, #4]
 800301e:	2601      	movs	r6, #1
 8003020:	3701      	adds	r7, #1
 8003022:	42af      	cmp	r7, r5
 8003024:	d234      	bcs.n	8003090 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x244>
 8003026:	6922      	ldr	r2, [r4, #16]
 8003028:	4640      	mov	r0, r8
 800302a:	4659      	mov	r1, fp
 800302c:	4790      	blx	r2
 800302e:	2800      	cmp	r0, #0
 8003030:	d0f6      	beq.n	8003020 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1d4>
 8003032:	e7a1      	b.n	8002f78 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12c>
 8003034:	2500      	movs	r5, #0
 8003036:	4680      	mov	r8, r0
 8003038:	e003      	b.n	8003042 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1f6>
 800303a:	0845      	lsrs	r5, r0, #1
 800303c:	3001      	adds	r0, #1
 800303e:	ea4f 0850 	mov.w	r8, r0, lsr #1
 8003042:	f04f 36ff 	mov.w	r6, #4294967295
 8003046:	3601      	adds	r6, #1
 8003048:	42ae      	cmp	r6, r5
 800304a:	d207      	bcs.n	800305c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x210>
 800304c:	6861      	ldr	r1, [r4, #4]
 800304e:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 8003052:	6912      	ldr	r2, [r2, #16]
 8003054:	4790      	blx	r2
 8003056:	2800      	cmp	r0, #0
 8003058:	d0f5      	beq.n	8003046 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x1fa>
 800305a:	e78c      	b.n	8002f76 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 800305c:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8003060:	464a      	mov	r2, r9
 8003062:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8003066:	68cb      	ldr	r3, [r1, #12]
 8003068:	9902      	ldr	r1, [sp, #8]
 800306a:	4798      	blx	r3
 800306c:	2800      	cmp	r0, #0
 800306e:	f47f af82 	bne.w	8002f76 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12a>
 8003072:	e9d4 7406 	ldrd	r7, r4, [r4, #24]
 8003076:	f04f 35ff 	mov.w	r5, #4294967295
 800307a:	2601      	movs	r6, #1
 800307c:	3501      	adds	r5, #1
 800307e:	4545      	cmp	r5, r8
 8003080:	d206      	bcs.n	8003090 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x244>
 8003082:	6922      	ldr	r2, [r4, #16]
 8003084:	4638      	mov	r0, r7
 8003086:	4651      	mov	r1, sl
 8003088:	4790      	blx	r2
 800308a:	2800      	cmp	r0, #0
 800308c:	d0f6      	beq.n	800307c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x230>
 800308e:	e773      	b.n	8002f78 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12c>
 8003090:	2600      	movs	r6, #0
 8003092:	e771      	b.n	8002f78 <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE+0x12c>

08003094 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	461c      	mov	r4, r3
 8003098:	4615      	mov	r5, r2
 800309a:	4606      	mov	r6, r0
 800309c:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 80030a0:	d006      	beq.n	80030b0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E+0x1c>
 80030a2:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
 80030a6:	6912      	ldr	r2, [r2, #16]
 80030a8:	4790      	blx	r2
 80030aa:	b108      	cbz	r0, 80030b0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E+0x1c>
 80030ac:	2001      	movs	r0, #1
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	b13d      	cbz	r5, 80030c2 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h02b1b799aa412d57E+0x2e>
 80030b2:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 80030b6:	4622      	mov	r2, r4
 80030b8:	68cb      	ldr	r3, [r1, #12]
 80030ba:	4629      	mov	r1, r5
 80030bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80030c0:	4718      	bx	r3
 80030c2:	2000      	movs	r0, #0
 80030c4:	bd70      	pop	{r4, r5, r6, pc}

080030c6 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E>:
 80030c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ca:	b081      	sub	sp, #4
 80030cc:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80030d0:	4682      	mov	sl, r0
 80030d2:	6900      	ldr	r0, [r0, #16]
 80030d4:	4691      	mov	r9, r2
 80030d6:	4688      	mov	r8, r1
 80030d8:	f1be 0f01 	cmp.w	lr, #1
 80030dc:	d10f      	bne.n	80030fe <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x38>
 80030de:	b988      	cbnz	r0, 8003104 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x3e>
 80030e0:	f1b9 0f00 	cmp.w	r9, #0
 80030e4:	f000 80a9 	beq.w	800323a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x174>
 80030e8:	f1a9 0001 	sub.w	r0, r9, #1
 80030ec:	f009 0103 	and.w	r1, r9, #3
 80030f0:	2803      	cmp	r0, #3
 80030f2:	d25f      	bcs.n	80031b4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xee>
 80030f4:	2000      	movs	r0, #0
 80030f6:	4642      	mov	r2, r8
 80030f8:	2900      	cmp	r1, #0
 80030fa:	d17b      	bne.n	80031f4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x12e>
 80030fc:	e09e      	b.n	800323c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 80030fe:	2800      	cmp	r0, #0
 8003100:	f000 80b1 	beq.w	8003266 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1a0>
 8003104:	f1b9 0f00 	cmp.w	r9, #0
 8003108:	d04d      	beq.n	80031a6 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xe0>
 800310a:	f8da 0014 	ldr.w	r0, [sl, #20]
 800310e:	eb08 0109 	add.w	r1, r8, r9
 8003112:	2200      	movs	r2, #0
 8003114:	4644      	mov	r4, r8
 8003116:	4647      	mov	r7, r8
 8003118:	43c3      	mvns	r3, r0
 800311a:	4626      	mov	r6, r4
 800311c:	f916 5b01 	ldrsb.w	r5, [r6], #1
 8003120:	2d00      	cmp	r5, #0
 8003122:	b2e8      	uxtb	r0, r5
 8003124:	da28      	bge.n	8003178 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xb2>
 8003126:	428e      	cmp	r6, r1
 8003128:	d005      	beq.n	8003136 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x70>
 800312a:	7865      	ldrb	r5, [r4, #1]
 800312c:	1ca6      	adds	r6, r4, #2
 800312e:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 8003132:	4634      	mov	r4, r6
 8003134:	e001      	b.n	800313a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x74>
 8003136:	2500      	movs	r5, #0
 8003138:	460c      	mov	r4, r1
 800313a:	f000 0b1f 	and.w	fp, r0, #31
 800313e:	28e0      	cmp	r0, #224	; 0xe0
 8003140:	d307      	bcc.n	8003152 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x8c>
 8003142:	428c      	cmp	r4, r1
 8003144:	d008      	beq.n	8003158 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x92>
 8003146:	f814 6b01 	ldrb.w	r6, [r4], #1
 800314a:	f006 0c3f 	and.w	ip, r6, #63	; 0x3f
 800314e:	4626      	mov	r6, r4
 8003150:	e005      	b.n	800315e <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x98>
 8003152:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
 8003156:	e00f      	b.n	8003178 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xb2>
 8003158:	f04f 0c00 	mov.w	ip, #0
 800315c:	460c      	mov	r4, r1
 800315e:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
 8003162:	28f0      	cmp	r0, #240	; 0xf0
 8003164:	d306      	bcc.n	8003174 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xae>
 8003166:	428c      	cmp	r4, r1
 8003168:	d010      	beq.n	800318c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xc6>
 800316a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800316e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8003172:	e00d      	b.n	8003190 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xca>
 8003174:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
 8003178:	4634      	mov	r4, r6
 800317a:	3301      	adds	r3, #1
 800317c:	d051      	beq.n	8003222 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x15c>
 800317e:	1bd0      	subs	r0, r2, r7
 8003180:	42a1      	cmp	r1, r4
 8003182:	eb00 0204 	add.w	r2, r0, r4
 8003186:	4627      	mov	r7, r4
 8003188:	d1c7      	bne.n	800311a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x54>
 800318a:	e04d      	b.n	8003228 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x162>
 800318c:	2000      	movs	r0, #0
 800318e:	4634      	mov	r4, r6
 8003190:	f44f 16e0 	mov.w	r6, #1835008	; 0x1c0000
 8003194:	ea06 468b 	and.w	r6, r6, fp, lsl #18
 8003198:	ea46 1685 	orr.w	r6, r6, r5, lsl #6
 800319c:	4430      	add	r0, r6
 800319e:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 80031a2:	d1ea      	bne.n	800317a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xb4>
 80031a4:	e040      	b.n	8003228 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x162>
 80031a6:	2200      	movs	r2, #0
 80031a8:	f1be 0f00 	cmp.w	lr, #0
 80031ac:	d140      	bne.n	8003230 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x16a>
 80031ae:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 80031b2:	e05d      	b.n	8003270 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1aa>
 80031b4:	eba1 0309 	sub.w	r3, r1, r9
 80031b8:	2000      	movs	r0, #0
 80031ba:	4642      	mov	r2, r8
 80031bc:	7817      	ldrb	r7, [r2, #0]
 80031be:	7856      	ldrb	r6, [r2, #1]
 80031c0:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
 80031c4:	7895      	ldrb	r5, [r2, #2]
 80031c6:	78d4      	ldrb	r4, [r2, #3]
 80031c8:	2f80      	cmp	r7, #128	; 0x80
 80031ca:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
 80031ce:	bf08      	it	eq
 80031d0:	3001      	addeq	r0, #1
 80031d2:	2f80      	cmp	r7, #128	; 0x80
 80031d4:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
 80031d8:	bf08      	it	eq
 80031da:	3001      	addeq	r0, #1
 80031dc:	2f80      	cmp	r7, #128	; 0x80
 80031de:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
 80031e2:	bf08      	it	eq
 80031e4:	3001      	addeq	r0, #1
 80031e6:	2f80      	cmp	r7, #128	; 0x80
 80031e8:	bf08      	it	eq
 80031ea:	3001      	addeq	r0, #1
 80031ec:	3204      	adds	r2, #4
 80031ee:	3304      	adds	r3, #4
 80031f0:	d1e4      	bne.n	80031bc <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xf6>
 80031f2:	b319      	cbz	r1, 800323c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 80031f4:	7813      	ldrb	r3, [r2, #0]
 80031f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031fa:	2b80      	cmp	r3, #128	; 0x80
 80031fc:	bf08      	it	eq
 80031fe:	3001      	addeq	r0, #1
 8003200:	2901      	cmp	r1, #1
 8003202:	d01b      	beq.n	800323c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 8003204:	7853      	ldrb	r3, [r2, #1]
 8003206:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800320a:	2b80      	cmp	r3, #128	; 0x80
 800320c:	bf08      	it	eq
 800320e:	3001      	addeq	r0, #1
 8003210:	2902      	cmp	r1, #2
 8003212:	d013      	beq.n	800323c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 8003214:	7891      	ldrb	r1, [r2, #2]
 8003216:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
 800321a:	2980      	cmp	r1, #128	; 0x80
 800321c:	bf08      	it	eq
 800321e:	3001      	addeq	r0, #1
 8003220:	e00c      	b.n	800323c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x176>
 8003222:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8003226:	d175      	bne.n	8003314 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x24e>
 8003228:	464a      	mov	r2, r9
 800322a:	f1be 0f00 	cmp.w	lr, #0
 800322e:	d0be      	beq.n	80031ae <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xe8>
 8003230:	4691      	mov	r9, r2
 8003232:	f1b9 0f00 	cmp.w	r9, #0
 8003236:	f47f af57 	bne.w	80030e8 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22>
 800323a:	2000      	movs	r0, #0
 800323c:	eba9 0100 	sub.w	r1, r9, r0
 8003240:	f8da 000c 	ldr.w	r0, [sl, #12]
 8003244:	4281      	cmp	r1, r0
 8003246:	d20e      	bcs.n	8003266 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1a0>
 8003248:	f1b9 0f00 	cmp.w	r9, #0
 800324c:	d016      	beq.n	800327c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1b6>
 800324e:	f1a9 0101 	sub.w	r1, r9, #1
 8003252:	f009 0c03 	and.w	ip, r9, #3
 8003256:	2903      	cmp	r1, #3
 8003258:	d212      	bcs.n	8003280 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1ba>
 800325a:	2100      	movs	r1, #0
 800325c:	4643      	mov	r3, r8
 800325e:	f1bc 0f00 	cmp.w	ip, #0
 8003262:	d12f      	bne.n	80032c4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1fe>
 8003264:	e046      	b.n	80032f4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 8003266:	f8da 101c 	ldr.w	r1, [sl, #28]
 800326a:	464a      	mov	r2, r9
 800326c:	f8da 0018 	ldr.w	r0, [sl, #24]
 8003270:	68cb      	ldr	r3, [r1, #12]
 8003272:	4641      	mov	r1, r8
 8003274:	b001      	add	sp, #4
 8003276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800327a:	4718      	bx	r3
 800327c:	2100      	movs	r1, #0
 800327e:	e039      	b.n	80032f4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 8003280:	ebac 0709 	sub.w	r7, ip, r9
 8003284:	2100      	movs	r1, #0
 8003286:	4643      	mov	r3, r8
 8003288:	781e      	ldrb	r6, [r3, #0]
 800328a:	785d      	ldrb	r5, [r3, #1]
 800328c:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
 8003290:	789c      	ldrb	r4, [r3, #2]
 8003292:	78da      	ldrb	r2, [r3, #3]
 8003294:	2e80      	cmp	r6, #128	; 0x80
 8003296:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
 800329a:	bf08      	it	eq
 800329c:	3101      	addeq	r1, #1
 800329e:	2e80      	cmp	r6, #128	; 0x80
 80032a0:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
 80032a4:	bf08      	it	eq
 80032a6:	3101      	addeq	r1, #1
 80032a8:	2e80      	cmp	r6, #128	; 0x80
 80032aa:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80032ae:	bf08      	it	eq
 80032b0:	3101      	addeq	r1, #1
 80032b2:	2a80      	cmp	r2, #128	; 0x80
 80032b4:	bf08      	it	eq
 80032b6:	3101      	addeq	r1, #1
 80032b8:	3304      	adds	r3, #4
 80032ba:	3704      	adds	r7, #4
 80032bc:	d1e4      	bne.n	8003288 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x1c2>
 80032be:	f1bc 0f00 	cmp.w	ip, #0
 80032c2:	d017      	beq.n	80032f4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80032ca:	2a80      	cmp	r2, #128	; 0x80
 80032cc:	bf08      	it	eq
 80032ce:	3101      	addeq	r1, #1
 80032d0:	f1bc 0f01 	cmp.w	ip, #1
 80032d4:	d00e      	beq.n	80032f4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 80032d6:	785a      	ldrb	r2, [r3, #1]
 80032d8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80032dc:	2a80      	cmp	r2, #128	; 0x80
 80032de:	bf08      	it	eq
 80032e0:	3101      	addeq	r1, #1
 80032e2:	f1bc 0f02 	cmp.w	ip, #2
 80032e6:	d005      	beq.n	80032f4 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x22e>
 80032e8:	789a      	ldrb	r2, [r3, #2]
 80032ea:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80032ee:	2a80      	cmp	r2, #128	; 0x80
 80032f0:	bf08      	it	eq
 80032f2:	3101      	addeq	r1, #1
 80032f4:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
 80032f8:	eba1 0109 	sub.w	r1, r1, r9
 80032fc:	4408      	add	r0, r1
 80032fe:	1eda      	subs	r2, r3, #3
 8003300:	bf18      	it	ne
 8003302:	461a      	movne	r2, r3
 8003304:	0793      	lsls	r3, r2, #30
 8003306:	d00b      	beq.n	8003320 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x25a>
 8003308:	2a02      	cmp	r2, #2
 800330a:	d00c      	beq.n	8003326 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x260>
 800330c:	f04f 0b00 	mov.w	fp, #0
 8003310:	4604      	mov	r4, r0
 8003312:	e00c      	b.n	800332e <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x268>
 8003314:	2a00      	cmp	r2, #0
 8003316:	bf18      	it	ne
 8003318:	454a      	cmpne	r2, r9
 800331a:	d134      	bne.n	8003386 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2c0>
 800331c:	4640      	mov	r0, r8
 800331e:	e03b      	b.n	8003398 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2d2>
 8003320:	2400      	movs	r4, #0
 8003322:	4683      	mov	fp, r0
 8003324:	e003      	b.n	800332e <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x268>
 8003326:	0844      	lsrs	r4, r0, #1
 8003328:	3001      	adds	r0, #1
 800332a:	ea4f 0b50 	mov.w	fp, r0, lsr #1
 800332e:	f04f 35ff 	mov.w	r5, #4294967295
 8003332:	3501      	adds	r5, #1
 8003334:	42a5      	cmp	r5, r4
 8003336:	d208      	bcs.n	800334a <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x284>
 8003338:	f8da 1004 	ldr.w	r1, [sl, #4]
 800333c:	e9da 0206 	ldrd	r0, r2, [sl, #24]
 8003340:	6912      	ldr	r2, [r2, #16]
 8003342:	4790      	blx	r2
 8003344:	2800      	cmp	r0, #0
 8003346:	d0f4      	beq.n	8003332 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x26c>
 8003348:	e015      	b.n	8003376 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2b0>
 800334a:	f8da 7004 	ldr.w	r7, [sl, #4]
 800334e:	464a      	mov	r2, r9
 8003350:	e9da 0106 	ldrd	r0, r1, [sl, #24]
 8003354:	68cb      	ldr	r3, [r1, #12]
 8003356:	4641      	mov	r1, r8
 8003358:	4798      	blx	r3
 800335a:	b960      	cbnz	r0, 8003376 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2b0>
 800335c:	e9da 4506 	ldrd	r4, r5, [sl, #24]
 8003360:	f04f 36ff 	mov.w	r6, #4294967295
 8003364:	3601      	adds	r6, #1
 8003366:	455e      	cmp	r6, fp
 8003368:	d209      	bcs.n	800337e <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2b8>
 800336a:	692a      	ldr	r2, [r5, #16]
 800336c:	4620      	mov	r0, r4
 800336e:	4639      	mov	r1, r7
 8003370:	4790      	blx	r2
 8003372:	2800      	cmp	r0, #0
 8003374:	d0f6      	beq.n	8003364 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x29e>
 8003376:	2001      	movs	r0, #1
 8003378:	b001      	add	sp, #4
 800337a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800337e:	2000      	movs	r0, #0
 8003380:	b001      	add	sp, #4
 8003382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003386:	454a      	cmp	r2, r9
 8003388:	d204      	bcs.n	8003394 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x2ce>
 800338a:	f918 0002 	ldrsb.w	r0, [r8, r2]
 800338e:	f110 0f40 	cmn.w	r0, #64	; 0x40
 8003392:	dac3      	bge.n	800331c <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x256>
 8003394:	2200      	movs	r2, #0
 8003396:	2000      	movs	r0, #0
 8003398:	2800      	cmp	r0, #0
 800339a:	bf0c      	ite	eq
 800339c:	464a      	moveq	r2, r9
 800339e:	4680      	movne	r8, r0
 80033a0:	f1be 0f00 	cmp.w	lr, #0
 80033a4:	f47f af44 	bne.w	8003230 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0x16a>
 80033a8:	e701      	b.n	80031ae <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E+0xe8>

080033aa <_ZN4core3fmt9Formatter15debug_lower_hex17h28b672d23c16e15aE>:
 80033aa:	7800      	ldrb	r0, [r0, #0]
 80033ac:	f3c0 1000 	ubfx	r0, r0, #4, #1
 80033b0:	4770      	bx	lr

080033b2 <_ZN4core3fmt9Formatter15debug_upper_hex17h4ab9339a84cb4dceE>:
 80033b2:	7800      	ldrb	r0, [r0, #0]
 80033b4:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80033b8:	4770      	bx	lr

080033ba <_ZN4core3fmt9Formatter11debug_tuple17hb44f73c94ff26e9bE>:
 80033ba:	b570      	push	{r4, r5, r6, lr}
 80033bc:	460d      	mov	r5, r1
 80033be:	4606      	mov	r6, r0
 80033c0:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 80033c4:	461c      	mov	r4, r3
 80033c6:	68cb      	ldr	r3, [r1, #12]
 80033c8:	4611      	mov	r1, r2
 80033ca:	4622      	mov	r2, r4
 80033cc:	4798      	blx	r3
 80033ce:	7230      	strb	r0, [r6, #8]
 80033d0:	fab4 f084 	clz	r0, r4
 80033d4:	0940      	lsrs	r0, r0, #5
 80033d6:	7270      	strb	r0, [r6, #9]
 80033d8:	2000      	movs	r0, #0
 80033da:	e9c6 5000 	strd	r5, r0, [r6]
 80033de:	bd70      	pop	{r4, r5, r6, pc}

080033e0 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h8845cd1bde16499dE>:
 80033e0:	460b      	mov	r3, r1
 80033e2:	4601      	mov	r1, r0
 80033e4:	4610      	mov	r0, r2
 80033e6:	461a      	mov	r2, r3
 80033e8:	f7ff be6d 	b.w	80030c6 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E>

080033ec <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E>:
 80033ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f0:	b085      	sub	sp, #20
 80033f2:	460c      	mov	r4, r1
 80033f4:	4605      	mov	r5, r0
 80033f6:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 80033fa:	690a      	ldr	r2, [r1, #16]
 80033fc:	2127      	movs	r1, #39	; 0x27
 80033fe:	4790      	blx	r2
 8003400:	b118      	cbz	r0, 800340a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1e>
 8003402:	2001      	movs	r0, #1
 8003404:	b005      	add	sp, #20
 8003406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800340a:	682d      	ldr	r5, [r5, #0]
 800340c:	f1a5 0009 	sub.w	r0, r5, #9
 8003410:	281e      	cmp	r0, #30
 8003412:	d816      	bhi.n	8003442 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x56>
 8003414:	2702      	movs	r7, #2
 8003416:	2674      	movs	r6, #116	; 0x74
 8003418:	e8df f000 	tbb	[pc, r0]
 800341c:	17171086 	.word	0x17171086
 8003420:	1717173a 	.word	0x1717173a
 8003424:	17171717 	.word	0x17171717
 8003428:	17171717 	.word	0x17171717
 800342c:	17171717 	.word	0x17171717
 8003430:	17171717 	.word	0x17171717
 8003434:	17171517 	.word	0x17171517
 8003438:	00151717 	.word	0x00151717
 800343c:	2702      	movs	r7, #2
 800343e:	266e      	movs	r6, #110	; 0x6e
 8003440:	e028      	b.n	8003494 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xa8>
 8003442:	2d5c      	cmp	r5, #92	; 0x5c
 8003444:	d101      	bne.n	800344a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x5e>
 8003446:	2702      	movs	r7, #2
 8003448:	e06d      	b.n	8003526 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x13a>
 800344a:	f64d 00d0 	movw	r0, #55504	; 0xd8d0
 800344e:	4629      	mov	r1, r5
 8003450:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003454:	f000 f8d2 	bl	80035fc <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E>
 8003458:	2800      	cmp	r0, #0
 800345a:	d159      	bne.n	8003510 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 800345c:	2000      	movs	r0, #0
 800345e:	ebb0 4f15 	cmp.w	r0, r5, lsr #16
 8003462:	d118      	bne.n	8003496 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xaa>
 8003464:	f64c 712f 	movw	r1, #53039	; 0xcf2f
 8003468:	f240 122f 	movw	r2, #303	; 0x12f
 800346c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003470:	f64c 6300 	movw	r3, #52736	; 0xce00
 8003474:	e9cd 2100 	strd	r2, r1, [sp]
 8003478:	f64c 51b0 	movw	r1, #52656	; 0xcdb0
 800347c:	f44f 709e 	mov.w	r0, #316	; 0x13c
 8003480:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003484:	9002      	str	r0, [sp, #8]
 8003486:	f6c0 0300 	movt	r3, #2048	; 0x800
 800348a:	4628      	mov	r0, r5
 800348c:	2228      	movs	r2, #40	; 0x28
 800348e:	e019      	b.n	80034c4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xd8>
 8003490:	2702      	movs	r7, #2
 8003492:	2672      	movs	r6, #114	; 0x72
 8003494:	e048      	b.n	8003528 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x13c>
 8003496:	ebb0 4f55 	cmp.w	r0, r5, lsr #17
 800349a:	d118      	bne.n	80034ce <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xe2>
 800349c:	f24d 114b 	movw	r1, #53579	; 0xd14b
 80034a0:	229e      	movs	r2, #158	; 0x9e
 80034a2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80034a6:	f24d 03ad 	movw	r3, #53421	; 0xd0ad
 80034aa:	e9cd 2100 	strd	r2, r1, [sp]
 80034ae:	f24d 016b 	movw	r1, #53355	; 0xd06b
 80034b2:	f240 107d 	movw	r0, #381	; 0x17d
 80034b6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80034ba:	9002      	str	r0, [sp, #8]
 80034bc:	f6c0 0300 	movt	r3, #2048	; 0x800
 80034c0:	4628      	mov	r0, r5
 80034c2:	2221      	movs	r2, #33	; 0x21
 80034c4:	f000 f919 	bl	80036fa <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E>
 80034c8:	b310      	cbz	r0, 8003510 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 80034ca:	2701      	movs	r7, #1
 80034cc:	e7bc      	b.n	8003448 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x5c>
 80034ce:	f240 10ef 	movw	r0, #495	; 0x1ef
 80034d2:	f2c0 000e 	movt	r0, #14
 80034d6:	4285      	cmp	r5, r0
 80034d8:	d81a      	bhi.n	8003510 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 80034da:	f240 50e2 	movw	r0, #1506	; 0x5e2
 80034de:	f240 61e2 	movw	r1, #1762	; 0x6e2
 80034e2:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
 80034e6:	f2c0 010b 	movt	r1, #11
 80034ea:	4428      	add	r0, r5
 80034ec:	4288      	cmp	r0, r1
 80034ee:	d30f      	bcc.n	8003510 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 80034f0:	f241 401f 	movw	r0, #5151	; 0x141f
 80034f4:	f640 411f 	movw	r1, #3103	; 0xc1f
 80034f8:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
 80034fc:	4428      	add	r0, r5
 80034fe:	4288      	cmp	r0, r1
 8003500:	bf21      	itttt	cs
 8003502:	f243 105e 	movwcs	r0, #12638	; 0x315e
 8003506:	f6cf 70fd 	movtcs	r0, #65533	; 0xfffd
 800350a:	4428      	addcs	r0, r5
 800350c:	280e      	cmpcs	r0, #14
 800350e:	d25c      	bcs.n	80035ca <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1de>
 8003510:	f045 0001 	orr.w	r0, r5, #1
 8003514:	f04f 0905 	mov.w	r9, #5
 8003518:	fab0 f080 	clz	r0, r0
 800351c:	2703      	movs	r7, #3
 800351e:	2107      	movs	r1, #7
 8003520:	ea81 0090 	eor.w	r0, r1, r0, lsr #2
 8003524:	9004      	str	r0, [sp, #16]
 8003526:	462e      	mov	r6, r5
 8003528:	f04f 0b1c 	mov.w	fp, #28
 800352c:	f04f 0a01 	mov.w	sl, #1
 8003530:	2502      	movs	r5, #2
 8003532:	f04f 0804 	mov.w	r8, #4
 8003536:	2f01      	cmp	r7, #1
 8003538:	d011      	beq.n	800355e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x172>
 800353a:	2f02      	cmp	r7, #2
 800353c:	d012      	beq.n	8003564 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x178>
 800353e:	2f03      	cmp	r7, #3
 8003540:	d13b      	bne.n	80035ba <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1ce>
 8003542:	fa5f f089 	uxtb.w	r0, r9
 8003546:	3801      	subs	r0, #1
 8003548:	2804      	cmp	r0, #4
 800354a:	d836      	bhi.n	80035ba <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1ce>
 800354c:	e8df f000 	tbb	[pc, r0]
 8003550:	221e0d03 	.word	0x221e0d03
 8003554:	0027      	.short	0x0027
 8003556:	f029 09ff 	bic.w	r9, r9, #255	; 0xff
 800355a:	217d      	movs	r1, #125	; 0x7d
 800355c:	e025      	b.n	80035aa <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1be>
 800355e:	2700      	movs	r7, #0
 8003560:	4631      	mov	r1, r6
 8003562:	e023      	b.n	80035ac <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1c0>
 8003564:	215c      	movs	r1, #92	; 0x5c
 8003566:	2701      	movs	r7, #1
 8003568:	e020      	b.n	80035ac <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1c0>
 800356a:	9a04      	ldr	r2, [sp, #16]
 800356c:	ea0b 0082 	and.w	r0, fp, r2, lsl #2
 8003570:	fa26 f000 	lsr.w	r0, r6, r0
 8003574:	f000 000f 	and.w	r0, r0, #15
 8003578:	f100 0157 	add.w	r1, r0, #87	; 0x57
 800357c:	280a      	cmp	r0, #10
 800357e:	bf38      	it	cc
 8003580:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
 8003584:	b17a      	cbz	r2, 80035a6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1ba>
 8003586:	3a01      	subs	r2, #1
 8003588:	9204      	str	r2, [sp, #16]
 800358a:	e00e      	b.n	80035aa <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1be>
 800358c:	f365 0907 	bfi	r9, r5, #0, #8
 8003590:	217b      	movs	r1, #123	; 0x7b
 8003592:	e00a      	b.n	80035aa <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1be>
 8003594:	2703      	movs	r7, #3
 8003596:	2175      	movs	r1, #117	; 0x75
 8003598:	f367 0907 	bfi	r9, r7, #0, #8
 800359c:	e006      	b.n	80035ac <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1c0>
 800359e:	f368 0907 	bfi	r9, r8, #0, #8
 80035a2:	215c      	movs	r1, #92	; 0x5c
 80035a4:	e001      	b.n	80035aa <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x1be>
 80035a6:	f36a 0907 	bfi	r9, sl, #0, #8
 80035aa:	2703      	movs	r7, #3
 80035ac:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
 80035b0:	6912      	ldr	r2, [r2, #16]
 80035b2:	4790      	blx	r2
 80035b4:	2800      	cmp	r0, #0
 80035b6:	d0be      	beq.n	8003536 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x14a>
 80035b8:	e723      	b.n	8003402 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x16>
 80035ba:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 80035be:	690a      	ldr	r2, [r1, #16]
 80035c0:	2127      	movs	r1, #39	; 0x27
 80035c2:	b005      	add	sp, #20
 80035c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c8:	4710      	bx	r2
 80035ca:	f64b 011e 	movw	r1, #47134	; 0xb81e
 80035ce:	f025 0001 	bic.w	r0, r5, #1
 80035d2:	f2c0 0102 	movt	r1, #2
 80035d6:	4288      	cmp	r0, r1
 80035d8:	f43f af9a 	beq.w	8003510 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>
 80035dc:	f645 1029 	movw	r0, #22825	; 0x5929
 80035e0:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
 80035e4:	4428      	add	r0, r5
 80035e6:	2829      	cmp	r0, #41	; 0x29
 80035e8:	bf21      	itttt	cs
 80035ea:	f644 00cb 	movwcs	r0, #18635	; 0x48cb
 80035ee:	f6cf 70fd 	movtcs	r0, #65533	; 0xfffd
 80035f2:	4428      	addcs	r0, r5
 80035f4:	280a      	cmpcs	r0, #10
 80035f6:	f63f af68 	bhi.w	80034ca <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0xde>
 80035fa:	e789      	b.n	8003510 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hd139048c13a0f464E+0x124>

080035fc <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E>:
 80035fc:	b580      	push	{r7, lr}
 80035fe:	2200      	movs	r2, #0
 8003600:	ebb2 2fd1 	cmp.w	r2, r1, lsr #11
 8003604:	d106      	bne.n	8003614 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0x18>
 8003606:	f06f 0207 	mvn.w	r2, #7
 800360a:	ea02 02d1 	and.w	r2, r2, r1, lsr #3
 800360e:	eb00 0c02 	add.w	ip, r0, r2
 8003612:	e030      	b.n	8003676 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0x7a>
 8003614:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
 8003618:	d110      	bne.n	800363c <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0x40>
 800361a:	f06f 021f 	mvn.w	r2, #31
 800361e:	eb02 1291 	add.w	r2, r2, r1, lsr #6
 8003622:	0953      	lsrs	r3, r2, #5
 8003624:	2b1e      	cmp	r3, #30
 8003626:	d842      	bhi.n	80036ae <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xb2>
 8003628:	4402      	add	r2, r0
 800362a:	f892 3118 	ldrb.w	r3, [r2, #280]	; 0x118
 800362e:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
 8003632:	429a      	cmp	r2, r3
 8003634:	d945      	bls.n	80036c2 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xc6>
 8003636:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800363a:	e01a      	b.n	8003672 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0x76>
 800363c:	f06f 020f 	mvn.w	r2, #15
 8003640:	eb02 3211 	add.w	r2, r2, r1, lsr #12
 8003644:	2aff      	cmp	r2, #255	; 0xff
 8003646:	d841      	bhi.n	80036cc <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xd0>
 8003648:	4402      	add	r2, r0
 800364a:	f892 24f8 	ldrb.w	r2, [r2, #1272]	; 0x4f8
 800364e:	f3c1 1385 	ubfx	r3, r1, #6, #6
 8003652:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003656:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800365a:	4293      	cmp	r3, r2
 800365c:	d240      	bcs.n	80036e0 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xe4>
 800365e:	f8d0 c108 	ldr.w	ip, [r0, #264]	; 0x108
 8003662:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 8003666:	f81c 3003 	ldrb.w	r3, [ip, r3]
 800366a:	429a      	cmp	r2, r3
 800366c:	d93d      	bls.n	80036ea <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xee>
 800366e:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8003672:	eb00 0cc3 	add.w	ip, r0, r3, lsl #3
 8003676:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800367a:	f04f 0e01 	mov.w	lr, #1
 800367e:	f1c1 0020 	rsb	r0, r1, #32
 8003682:	f1a1 0220 	sub.w	r2, r1, #32
 8003686:	2a00      	cmp	r2, #0
 8003688:	fa0e f101 	lsl.w	r1, lr, r1
 800368c:	fa2e f000 	lsr.w	r0, lr, r0
 8003690:	bfa8      	it	ge
 8003692:	fa0e f002 	lslge.w	r0, lr, r2
 8003696:	e9dc c300 	ldrd	ip, r3, [ip]
 800369a:	2a00      	cmp	r2, #0
 800369c:	bfa8      	it	ge
 800369e:	2100      	movge	r1, #0
 80036a0:	4018      	ands	r0, r3
 80036a2:	ea01 010c 	and.w	r1, r1, ip
 80036a6:	4308      	orrs	r0, r1
 80036a8:	bf18      	it	ne
 80036aa:	2001      	movne	r0, #1
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	f64c 5060 	movw	r0, #52576	; 0xcd60
 80036b2:	4611      	mov	r1, r2
 80036b4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80036b8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80036bc:	f7fe fded 	bl	800229a <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 80036c0:	defe      	udf	#254	; 0xfe
 80036c2:	f64c 5070 	movw	r0, #52592	; 0xcd70
 80036c6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80036ca:	e012      	b.n	80036f2 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xf6>
 80036cc:	f64c 5080 	movw	r0, #52608	; 0xcd80
 80036d0:	4611      	mov	r1, r2
 80036d2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80036d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036da:	f7fe fdde 	bl	800229a <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 80036de:	defe      	udf	#254	; 0xfe
 80036e0:	f64c 5090 	movw	r0, #52624	; 0xcd90
 80036e4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80036e8:	e003      	b.n	80036f2 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h04013171fa49f073E+0xf6>
 80036ea:	f64c 50a0 	movw	r0, #52640	; 0xcda0
 80036ee:	f6c0 0000 	movt	r0, #2048	; 0x800
 80036f2:	4619      	mov	r1, r3
 80036f4:	f7fe fdd1 	bl	800229a <_ZN4core9panicking18panic_bounds_check17h794d18f1ca9e50a8E>
 80036f8:	defe      	udf	#254	; 0xfe

080036fa <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E>:
 80036fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036fe:	b081      	sub	sp, #4
 8003700:	fa1f fa80 	uxth.w	sl, r0
 8003704:	b3a2      	cbz	r2, 8003770 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x76>
 8003706:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800370a:	eb01 0842 	add.w	r8, r1, r2, lsl #1
 800370e:	ea4f 291a 	mov.w	r9, sl, lsr #8
 8003712:	f04f 0e00 	mov.w	lr, #0
 8003716:	784f      	ldrb	r7, [r1, #1]
 8003718:	4672      	mov	r2, lr
 800371a:	780c      	ldrb	r4, [r1, #0]
 800371c:	3102      	adds	r1, #2
 800371e:	44be      	add	lr, r7
 8003720:	454c      	cmp	r4, r9
 8003722:	d122      	bne.n	800376a <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x70>
 8003724:	4596      	cmp	lr, r2
 8003726:	d352      	bcc.n	80037ce <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xd4>
 8003728:	45e6      	cmp	lr, ip
 800372a:	d855      	bhi.n	80037d8 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xde>
 800372c:	189c      	adds	r4, r3, r2
 800372e:	eb04 0b07 	add.w	fp, r4, r7
 8003732:	b1df      	cbz	r7, 800376c <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x72>
 8003734:	4625      	mov	r5, r4
 8003736:	b2c6      	uxtb	r6, r0
 8003738:	f815 2b01 	ldrb.w	r2, [r5], #1
 800373c:	42b2      	cmp	r2, r6
 800373e:	d037      	beq.n	80037b0 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xb6>
 8003740:	455d      	cmp	r5, fp
 8003742:	d013      	beq.n	800376c <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x72>
 8003744:	7862      	ldrb	r2, [r4, #1]
 8003746:	42b2      	cmp	r2, r6
 8003748:	d032      	beq.n	80037b0 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xb6>
 800374a:	1ca2      	adds	r2, r4, #2
 800374c:	455a      	cmp	r2, fp
 800374e:	d00d      	beq.n	800376c <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x72>
 8003750:	78a2      	ldrb	r2, [r4, #2]
 8003752:	42b2      	cmp	r2, r6
 8003754:	d02c      	beq.n	80037b0 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xb6>
 8003756:	1ce2      	adds	r2, r4, #3
 8003758:	455a      	cmp	r2, fp
 800375a:	d007      	beq.n	800376c <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x72>
 800375c:	1d22      	adds	r2, r4, #4
 800375e:	78e4      	ldrb	r4, [r4, #3]
 8003760:	3f04      	subs	r7, #4
 8003762:	42b4      	cmp	r4, r6
 8003764:	4614      	mov	r4, r2
 8003766:	d1e4      	bne.n	8003732 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x38>
 8003768:	e022      	b.n	80037b0 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xb6>
 800376a:	d801      	bhi.n	8003770 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x76>
 800376c:	4541      	cmp	r1, r8
 800376e:	d1d2      	bne.n	8003716 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x1c>
 8003770:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003772:	b1f8      	cbz	r0, 80037b4 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xba>
 8003774:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003776:	1831      	adds	r1, r6, r0
 8003778:	2001      	movs	r0, #1
 800377a:	4632      	mov	r2, r6
 800377c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003780:	b25f      	sxtb	r7, r3
 8003782:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003786:	dd01      	ble.n	800378c <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x92>
 8003788:	4616      	mov	r6, r2
 800378a:	e007      	b.n	800379c <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xa2>
 800378c:	428a      	cmp	r2, r1
 800378e:	d017      	beq.n	80037c0 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xc6>
 8003790:	7873      	ldrb	r3, [r6, #1]
 8003792:	f007 027f 	and.w	r2, r7, #127	; 0x7f
 8003796:	3602      	adds	r6, #2
 8003798:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800379c:	ebaa 0a03 	sub.w	sl, sl, r3
 80037a0:	f1ba 0f00 	cmp.w	sl, #0
 80037a4:	db07      	blt.n	80037b6 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xbc>
 80037a6:	f080 0001 	eor.w	r0, r0, #1
 80037aa:	428e      	cmp	r6, r1
 80037ac:	d1e5      	bne.n	800377a <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0x80>
 80037ae:	e002      	b.n	80037b6 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xbc>
 80037b0:	2000      	movs	r0, #0
 80037b2:	e000      	b.n	80037b6 <_ZN4core7unicode9printable5check17h6013a5f54a0956d6E+0xbc>
 80037b4:	2001      	movs	r0, #1
 80037b6:	f000 0001 	and.w	r0, r0, #1
 80037ba:	b001      	add	sp, #4
 80037bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c0:	f64c 1088 	movw	r0, #51592	; 0xc988
 80037c4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80037c8:	f7fe fd4a 	bl	8002260 <_ZN4core9panicking5panic17h138a849f37d3ac2dE>
 80037cc:	defe      	udf	#254	; 0xfe
 80037ce:	4610      	mov	r0, r2
 80037d0:	4671      	mov	r1, lr
 80037d2:	f7fe feb0 	bl	8002536 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 80037d6:	defe      	udf	#254	; 0xfe
 80037d8:	4670      	mov	r0, lr
 80037da:	4661      	mov	r1, ip
 80037dc:	f7fe fe89 	bl	80024f2 <_ZN4core5slice20slice_index_len_fail17hfa6ff34b8fd07644E>
 80037e0:	defe      	udf	#254	; 0xfe

080037e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E>:
 80037e2:	b5b0      	push	{r4, r5, r7, lr}
 80037e4:	b0a2      	sub	sp, #136	; 0x88
 80037e6:	468c      	mov	ip, r1
 80037e8:	6809      	ldr	r1, [r1, #0]
 80037ea:	06ca      	lsls	r2, r1, #27
 80037ec:	d409      	bmi.n	8003802 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x20>
 80037ee:	6800      	ldr	r0, [r0, #0]
 80037f0:	0689      	lsls	r1, r1, #26
 80037f2:	d448      	bmi.n	8003886 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0xa4>
 80037f4:	2101      	movs	r1, #1
 80037f6:	4662      	mov	r2, ip
 80037f8:	b022      	add	sp, #136	; 0x88
 80037fa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80037fe:	f000 ba44 	b.w	8003c8a <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>
 8003802:	6800      	ldr	r0, [r0, #0]
 8003804:	f10d 0e08 	add.w	lr, sp, #8
 8003808:	2281      	movs	r2, #129	; 0x81
 800380a:	2300      	movs	r3, #0
 800380c:	f000 010f 	and.w	r1, r0, #15
 8003810:	f101 0457 	add.w	r4, r1, #87	; 0x57
 8003814:	290a      	cmp	r1, #10
 8003816:	bf38      	it	cc
 8003818:	f101 0430 	addcc.w	r4, r1, #48	; 0x30
 800381c:	eb0e 0102 	add.w	r1, lr, r2
 8003820:	ebb3 1f10 	cmp.w	r3, r0, lsr #4
 8003824:	f801 4c02 	strb.w	r4, [r1, #-2]
 8003828:	d071      	beq.n	800390e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x12c>
 800382a:	0904      	lsrs	r4, r0, #4
 800382c:	f004 040f 	and.w	r4, r4, #15
 8003830:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003834:	2c0a      	cmp	r4, #10
 8003836:	bf38      	it	cc
 8003838:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 800383c:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 8003840:	f801 5c03 	strb.w	r5, [r1, #-3]
 8003844:	d078      	beq.n	8003938 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x156>
 8003846:	0a04      	lsrs	r4, r0, #8
 8003848:	f004 040f 	and.w	r4, r4, #15
 800384c:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003850:	2c0a      	cmp	r4, #10
 8003852:	bf38      	it	cc
 8003854:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003858:	ebb3 3f10 	cmp.w	r3, r0, lsr #12
 800385c:	f801 5c04 	strb.w	r5, [r1, #-4]
 8003860:	d072      	beq.n	8003948 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x166>
 8003862:	0b04      	lsrs	r4, r0, #12
 8003864:	3a04      	subs	r2, #4
 8003866:	f004 040f 	and.w	r4, r4, #15
 800386a:	f104 0557 	add.w	r5, r4, #87	; 0x57
 800386e:	2c0a      	cmp	r4, #10
 8003870:	bf38      	it	cc
 8003872:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003876:	f801 5c05 	strb.w	r5, [r1, #-5]
 800387a:	0c01      	lsrs	r1, r0, #16
 800387c:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
 8003880:	4608      	mov	r0, r1
 8003882:	d1c3      	bne.n	800380c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x2a>
 8003884:	e03f      	b.n	8003906 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x124>
 8003886:	f10d 0e08 	add.w	lr, sp, #8
 800388a:	2281      	movs	r2, #129	; 0x81
 800388c:	2300      	movs	r3, #0
 800388e:	f000 010f 	and.w	r1, r0, #15
 8003892:	f101 0437 	add.w	r4, r1, #55	; 0x37
 8003896:	290a      	cmp	r1, #10
 8003898:	bf38      	it	cc
 800389a:	f101 0430 	addcc.w	r4, r1, #48	; 0x30
 800389e:	eb0e 0102 	add.w	r1, lr, r2
 80038a2:	ebb3 1f10 	cmp.w	r3, r0, lsr #4
 80038a6:	f801 4c02 	strb.w	r4, [r1, #-2]
 80038aa:	d030      	beq.n	800390e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x12c>
 80038ac:	0904      	lsrs	r4, r0, #4
 80038ae:	f004 040f 	and.w	r4, r4, #15
 80038b2:	f104 0537 	add.w	r5, r4, #55	; 0x37
 80038b6:	2c0a      	cmp	r4, #10
 80038b8:	bf38      	it	cc
 80038ba:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 80038be:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
 80038c2:	f801 5c03 	strb.w	r5, [r1, #-3]
 80038c6:	d037      	beq.n	8003938 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x156>
 80038c8:	0a04      	lsrs	r4, r0, #8
 80038ca:	f004 040f 	and.w	r4, r4, #15
 80038ce:	f104 0537 	add.w	r5, r4, #55	; 0x37
 80038d2:	2c0a      	cmp	r4, #10
 80038d4:	bf38      	it	cc
 80038d6:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 80038da:	ebb3 3f10 	cmp.w	r3, r0, lsr #12
 80038de:	f801 5c04 	strb.w	r5, [r1, #-4]
 80038e2:	d031      	beq.n	8003948 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x166>
 80038e4:	0b04      	lsrs	r4, r0, #12
 80038e6:	3a04      	subs	r2, #4
 80038e8:	f004 040f 	and.w	r4, r4, #15
 80038ec:	f104 0537 	add.w	r5, r4, #55	; 0x37
 80038f0:	2c0a      	cmp	r4, #10
 80038f2:	bf38      	it	cc
 80038f4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 80038f8:	f801 5c05 	strb.w	r5, [r1, #-5]
 80038fc:	0c01      	lsrs	r1, r0, #16
 80038fe:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
 8003902:	4608      	mov	r0, r1
 8003904:	d1c3      	bne.n	800388e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0xac>
 8003906:	1e50      	subs	r0, r2, #1
 8003908:	2881      	cmp	r0, #129	; 0x81
 800390a:	d305      	bcc.n	8003918 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x136>
 800390c:	e018      	b.n	8003940 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x15e>
 800390e:	1e51      	subs	r1, r2, #1
 8003910:	1e90      	subs	r0, r2, #2
 8003912:	460a      	mov	r2, r1
 8003914:	2881      	cmp	r0, #129	; 0x81
 8003916:	d213      	bcs.n	8003940 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x15e>
 8003918:	f1c2 0181 	rsb	r1, r2, #129	; 0x81
 800391c:	f64c 32ec 	movw	r2, #52204	; 0xcbec
 8003920:	4470      	add	r0, lr
 8003922:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003926:	e9cd 0100 	strd	r0, r1, [sp]
 800392a:	4660      	mov	r0, ip
 800392c:	2101      	movs	r1, #1
 800392e:	2302      	movs	r3, #2
 8003930:	f7ff fa8c 	bl	8002e4c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8003934:	b022      	add	sp, #136	; 0x88
 8003936:	bdb0      	pop	{r4, r5, r7, pc}
 8003938:	1ed0      	subs	r0, r2, #3
 800393a:	3a02      	subs	r2, #2
 800393c:	2881      	cmp	r0, #129	; 0x81
 800393e:	d3eb      	bcc.n	8003918 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x136>
 8003940:	2180      	movs	r1, #128	; 0x80
 8003942:	f7fe fdf8 	bl	8002536 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8003946:	defe      	udf	#254	; 0xfe
 8003948:	1f10      	subs	r0, r2, #4
 800394a:	3a03      	subs	r2, #3
 800394c:	2881      	cmp	r0, #129	; 0x81
 800394e:	d3e3      	bcc.n	8003918 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x136>
 8003950:	e7f6      	b.n	8003940 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hf6dcfdcd0c677f34E+0x15e>

08003952 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE>:
 8003952:	b580      	push	{r7, lr}
 8003954:	b0a2      	sub	sp, #136	; 0x88
 8003956:	7802      	ldrb	r2, [r0, #0]
 8003958:	468c      	mov	ip, r1
 800395a:	f002 030f 	and.w	r3, r2, #15
 800395e:	f103 0057 	add.w	r0, r3, #87	; 0x57
 8003962:	2b0a      	cmp	r3, #10
 8003964:	bf38      	it	cc
 8003966:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
 800396a:	2300      	movs	r3, #0
 800396c:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 8003970:	d00b      	beq.n	800398a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE+0x38>
 8003972:	0913      	lsrs	r3, r2, #4
 8003974:	f103 0157 	add.w	r1, r3, #87	; 0x57
 8003978:	2aa0      	cmp	r2, #160	; 0xa0
 800397a:	bf38      	it	cc
 800397c:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
 8003980:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 8003984:	227e      	movs	r2, #126	; 0x7e
 8003986:	2302      	movs	r3, #2
 8003988:	e001      	b.n	800398e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he7fa0f4e9bbfda2bE+0x3c>
 800398a:	227f      	movs	r2, #127	; 0x7f
 800398c:	2301      	movs	r3, #1
 800398e:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
 8003992:	a802      	add	r0, sp, #8
 8003994:	4410      	add	r0, r2
 8003996:	f64c 32ec 	movw	r2, #52204	; 0xcbec
 800399a:	e9cd 0300 	strd	r0, r3, [sp]
 800399e:	f6c0 0200 	movt	r2, #2048	; 0x800
 80039a2:	4660      	mov	r0, ip
 80039a4:	2101      	movs	r1, #1
 80039a6:	2302      	movs	r3, #2
 80039a8:	f7ff fa50 	bl	8002e4c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 80039ac:	b022      	add	sp, #136	; 0x88
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E>:
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b0a2      	sub	sp, #136	; 0x88
 80039b4:	7802      	ldrb	r2, [r0, #0]
 80039b6:	468c      	mov	ip, r1
 80039b8:	f002 030f 	and.w	r3, r2, #15
 80039bc:	f103 0037 	add.w	r0, r3, #55	; 0x37
 80039c0:	2b0a      	cmp	r3, #10
 80039c2:	bf38      	it	cc
 80039c4:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
 80039c8:	2300      	movs	r3, #0
 80039ca:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
 80039ce:	d00b      	beq.n	80039e8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E+0x38>
 80039d0:	0913      	lsrs	r3, r2, #4
 80039d2:	f103 0137 	add.w	r1, r3, #55	; 0x37
 80039d6:	2aa0      	cmp	r2, #160	; 0xa0
 80039d8:	bf38      	it	cc
 80039da:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
 80039de:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
 80039e2:	227e      	movs	r2, #126	; 0x7e
 80039e4:	2302      	movs	r3, #2
 80039e6:	e001      	b.n	80039ec <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17hab068c13e1025a46E+0x3c>
 80039e8:	227f      	movs	r2, #127	; 0x7f
 80039ea:	2301      	movs	r3, #1
 80039ec:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
 80039f0:	a802      	add	r0, sp, #8
 80039f2:	4410      	add	r0, r2
 80039f4:	f64c 32ec 	movw	r2, #52204	; 0xcbec
 80039f8:	e9cd 0300 	strd	r0, r3, [sp]
 80039fc:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003a00:	4660      	mov	r0, ip
 8003a02:	2101      	movs	r1, #1
 8003a04:	2302      	movs	r3, #2
 8003a06:	f7ff fa21 	bl	8002e4c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8003a0a:	b022      	add	sp, #136	; 0x88
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E>:
 8003a0e:	b5b0      	push	{r4, r5, r7, lr}
 8003a10:	b0a2      	sub	sp, #136	; 0x88
 8003a12:	6800      	ldr	r0, [r0, #0]
 8003a14:	f10d 0e08 	add.w	lr, sp, #8
 8003a18:	468c      	mov	ip, r1
 8003a1a:	2381      	movs	r3, #129	; 0x81
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f000 020f 	and.w	r2, r0, #15
 8003a22:	f102 0457 	add.w	r4, r2, #87	; 0x57
 8003a26:	2a0a      	cmp	r2, #10
 8003a28:	bf38      	it	cc
 8003a2a:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
 8003a2e:	eb0e 0203 	add.w	r2, lr, r3
 8003a32:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
 8003a36:	f802 4c02 	strb.w	r4, [r2, #-2]
 8003a3a:	d030      	beq.n	8003a9e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0x90>
 8003a3c:	0904      	lsrs	r4, r0, #4
 8003a3e:	f004 040f 	and.w	r4, r4, #15
 8003a42:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003a46:	2c0a      	cmp	r4, #10
 8003a48:	bf38      	it	cc
 8003a4a:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003a4e:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 8003a52:	f802 5c03 	strb.w	r5, [r2, #-3]
 8003a56:	d028      	beq.n	8003aaa <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0x9c>
 8003a58:	0a04      	lsrs	r4, r0, #8
 8003a5a:	f004 040f 	and.w	r4, r4, #15
 8003a5e:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003a62:	2c0a      	cmp	r4, #10
 8003a64:	bf38      	it	cc
 8003a66:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003a6a:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
 8003a6e:	f802 5c04 	strb.w	r5, [r2, #-4]
 8003a72:	d01f      	beq.n	8003ab4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xa6>
 8003a74:	0b04      	lsrs	r4, r0, #12
 8003a76:	3b04      	subs	r3, #4
 8003a78:	f004 040f 	and.w	r4, r4, #15
 8003a7c:	f104 0557 	add.w	r5, r4, #87	; 0x57
 8003a80:	2c0a      	cmp	r4, #10
 8003a82:	bf38      	it	cc
 8003a84:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003a88:	f802 5c05 	strb.w	r5, [r2, #-5]
 8003a8c:	0c02      	lsrs	r2, r0, #16
 8003a8e:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
 8003a92:	4610      	mov	r0, r2
 8003a94:	d1c3      	bne.n	8003a1e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0x10>
 8003a96:	1e58      	subs	r0, r3, #1
 8003a98:	2881      	cmp	r0, #129	; 0x81
 8003a9a:	d30f      	bcc.n	8003abc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xae>
 8003a9c:	e01e      	b.n	8003adc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xce>
 8003a9e:	1e59      	subs	r1, r3, #1
 8003aa0:	1e98      	subs	r0, r3, #2
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	2881      	cmp	r0, #129	; 0x81
 8003aa6:	d309      	bcc.n	8003abc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xae>
 8003aa8:	e018      	b.n	8003adc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xce>
 8003aaa:	1ed8      	subs	r0, r3, #3
 8003aac:	3b02      	subs	r3, #2
 8003aae:	2881      	cmp	r0, #129	; 0x81
 8003ab0:	d304      	bcc.n	8003abc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xae>
 8003ab2:	e013      	b.n	8003adc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xce>
 8003ab4:	1f18      	subs	r0, r3, #4
 8003ab6:	3b03      	subs	r3, #3
 8003ab8:	2881      	cmp	r0, #129	; 0x81
 8003aba:	d20f      	bcs.n	8003adc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17h4f9d20d49859c5e5E+0xce>
 8003abc:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
 8003ac0:	f64c 32ec 	movw	r2, #52204	; 0xcbec
 8003ac4:	4470      	add	r0, lr
 8003ac6:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003aca:	e9cd 0100 	strd	r0, r1, [sp]
 8003ace:	4660      	mov	r0, ip
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	f7ff f9ba 	bl	8002e4c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8003ad8:	b022      	add	sp, #136	; 0x88
 8003ada:	bdb0      	pop	{r4, r5, r7, pc}
 8003adc:	2180      	movs	r1, #128	; 0x80
 8003ade:	f7fe fd2a 	bl	8002536 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8003ae2:	defe      	udf	#254	; 0xfe

08003ae4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E>:
 8003ae4:	b5b0      	push	{r4, r5, r7, lr}
 8003ae6:	b0a2      	sub	sp, #136	; 0x88
 8003ae8:	6800      	ldr	r0, [r0, #0]
 8003aea:	f10d 0e08 	add.w	lr, sp, #8
 8003aee:	468c      	mov	ip, r1
 8003af0:	2381      	movs	r3, #129	; 0x81
 8003af2:	2100      	movs	r1, #0
 8003af4:	f000 020f 	and.w	r2, r0, #15
 8003af8:	f102 0437 	add.w	r4, r2, #55	; 0x37
 8003afc:	2a0a      	cmp	r2, #10
 8003afe:	bf38      	it	cc
 8003b00:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
 8003b04:	eb0e 0203 	add.w	r2, lr, r3
 8003b08:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
 8003b0c:	f802 4c02 	strb.w	r4, [r2, #-2]
 8003b10:	d030      	beq.n	8003b74 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0x90>
 8003b12:	0904      	lsrs	r4, r0, #4
 8003b14:	f004 040f 	and.w	r4, r4, #15
 8003b18:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8003b1c:	2c0a      	cmp	r4, #10
 8003b1e:	bf38      	it	cc
 8003b20:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003b24:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
 8003b28:	f802 5c03 	strb.w	r5, [r2, #-3]
 8003b2c:	d028      	beq.n	8003b80 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0x9c>
 8003b2e:	0a04      	lsrs	r4, r0, #8
 8003b30:	f004 040f 	and.w	r4, r4, #15
 8003b34:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8003b38:	2c0a      	cmp	r4, #10
 8003b3a:	bf38      	it	cc
 8003b3c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003b40:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
 8003b44:	f802 5c04 	strb.w	r5, [r2, #-4]
 8003b48:	d01f      	beq.n	8003b8a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xa6>
 8003b4a:	0b04      	lsrs	r4, r0, #12
 8003b4c:	3b04      	subs	r3, #4
 8003b4e:	f004 040f 	and.w	r4, r4, #15
 8003b52:	f104 0537 	add.w	r5, r4, #55	; 0x37
 8003b56:	2c0a      	cmp	r4, #10
 8003b58:	bf38      	it	cc
 8003b5a:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
 8003b5e:	f802 5c05 	strb.w	r5, [r2, #-5]
 8003b62:	0c02      	lsrs	r2, r0, #16
 8003b64:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
 8003b68:	4610      	mov	r0, r2
 8003b6a:	d1c3      	bne.n	8003af4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0x10>
 8003b6c:	1e58      	subs	r0, r3, #1
 8003b6e:	2881      	cmp	r0, #129	; 0x81
 8003b70:	d30f      	bcc.n	8003b92 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xae>
 8003b72:	e01e      	b.n	8003bb2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xce>
 8003b74:	1e59      	subs	r1, r3, #1
 8003b76:	1e98      	subs	r0, r3, #2
 8003b78:	460b      	mov	r3, r1
 8003b7a:	2881      	cmp	r0, #129	; 0x81
 8003b7c:	d309      	bcc.n	8003b92 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xae>
 8003b7e:	e018      	b.n	8003bb2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xce>
 8003b80:	1ed8      	subs	r0, r3, #3
 8003b82:	3b02      	subs	r3, #2
 8003b84:	2881      	cmp	r0, #129	; 0x81
 8003b86:	d304      	bcc.n	8003b92 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xae>
 8003b88:	e013      	b.n	8003bb2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xce>
 8003b8a:	1f18      	subs	r0, r3, #4
 8003b8c:	3b03      	subs	r3, #3
 8003b8e:	2881      	cmp	r0, #129	; 0x81
 8003b90:	d20f      	bcs.n	8003bb2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc10e55c761f9c3e5E+0xce>
 8003b92:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
 8003b96:	f64c 32ec 	movw	r2, #52204	; 0xcbec
 8003b9a:	4470      	add	r0, lr
 8003b9c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003ba0:	e9cd 0100 	strd	r0, r1, [sp]
 8003ba4:	4660      	mov	r0, ip
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	2302      	movs	r3, #2
 8003baa:	f7ff f94f 	bl	8002e4c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8003bae:	b022      	add	sp, #136	; 0x88
 8003bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb2:	2180      	movs	r1, #128	; 0x80
 8003bb4:	f7fe fcbf 	bl	8002536 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8003bb8:	defe      	udf	#254	; 0xfe

08003bba <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E>:
 8003bba:	b510      	push	{r4, lr}
 8003bbc:	b0a2      	sub	sp, #136	; 0x88
 8003bbe:	468c      	mov	ip, r1
 8003bc0:	e9d0 2100 	ldrd	r2, r1, [r0]
 8003bc4:	f10d 0e08 	add.w	lr, sp, #8
 8003bc8:	237f      	movs	r3, #127	; 0x7f
 8003bca:	1c58      	adds	r0, r3, #1
 8003bcc:	d013      	beq.n	8003bf6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E+0x3c>
 8003bce:	f002 000f 	and.w	r0, r2, #15
 8003bd2:	f100 0457 	add.w	r4, r0, #87	; 0x57
 8003bd6:	280a      	cmp	r0, #10
 8003bd8:	bf38      	it	cc
 8003bda:	f100 0430 	addcc.w	r4, r0, #48	; 0x30
 8003bde:	0910      	lsrs	r0, r2, #4
 8003be0:	ea40 7201 	orr.w	r2, r0, r1, lsl #28
 8003be4:	f80e 4003 	strb.w	r4, [lr, r3]
 8003be8:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
 8003bec:	3b01      	subs	r3, #1
 8003bee:	0909      	lsrs	r1, r1, #4
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d1ea      	bne.n	8003bca <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E+0x10>
 8003bf4:	1c58      	adds	r0, r3, #1
 8003bf6:	2881      	cmp	r0, #129	; 0x81
 8003bf8:	d20f      	bcs.n	8003c1a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h703a08cf31f25f17E+0x60>
 8003bfa:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
 8003bfe:	f64c 32ec 	movw	r2, #52204	; 0xcbec
 8003c02:	4470      	add	r0, lr
 8003c04:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003c08:	e9cd 0100 	strd	r0, r1, [sp]
 8003c0c:	4660      	mov	r0, ip
 8003c0e:	2101      	movs	r1, #1
 8003c10:	2302      	movs	r3, #2
 8003c12:	f7ff f91b 	bl	8002e4c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8003c16:	b022      	add	sp, #136	; 0x88
 8003c18:	bd10      	pop	{r4, pc}
 8003c1a:	2180      	movs	r1, #128	; 0x80
 8003c1c:	f7fe fc8b 	bl	8002536 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8003c20:	defe      	udf	#254	; 0xfe

08003c22 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E>:
 8003c22:	b510      	push	{r4, lr}
 8003c24:	b0a2      	sub	sp, #136	; 0x88
 8003c26:	468c      	mov	ip, r1
 8003c28:	e9d0 2100 	ldrd	r2, r1, [r0]
 8003c2c:	f10d 0e08 	add.w	lr, sp, #8
 8003c30:	237f      	movs	r3, #127	; 0x7f
 8003c32:	1c58      	adds	r0, r3, #1
 8003c34:	d013      	beq.n	8003c5e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E+0x3c>
 8003c36:	f002 000f 	and.w	r0, r2, #15
 8003c3a:	f100 0437 	add.w	r4, r0, #55	; 0x37
 8003c3e:	280a      	cmp	r0, #10
 8003c40:	bf38      	it	cc
 8003c42:	f100 0430 	addcc.w	r4, r0, #48	; 0x30
 8003c46:	0910      	lsrs	r0, r2, #4
 8003c48:	ea40 7201 	orr.w	r2, r0, r1, lsl #28
 8003c4c:	f80e 4003 	strb.w	r4, [lr, r3]
 8003c50:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
 8003c54:	3b01      	subs	r3, #1
 8003c56:	0909      	lsrs	r1, r1, #4
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d1ea      	bne.n	8003c32 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E+0x10>
 8003c5c:	1c58      	adds	r0, r3, #1
 8003c5e:	2881      	cmp	r0, #129	; 0x81
 8003c60:	d20f      	bcs.n	8003c82 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17hb3552287af737977E+0x60>
 8003c62:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
 8003c66:	f64c 32ec 	movw	r2, #52204	; 0xcbec
 8003c6a:	4470      	add	r0, lr
 8003c6c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003c70:	e9cd 0100 	strd	r0, r1, [sp]
 8003c74:	4660      	mov	r0, ip
 8003c76:	2101      	movs	r1, #1
 8003c78:	2302      	movs	r3, #2
 8003c7a:	f7ff f8e7 	bl	8002e4c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8003c7e:	b022      	add	sp, #136	; 0x88
 8003c80:	bd10      	pop	{r4, pc}
 8003c82:	2180      	movs	r1, #128	; 0x80
 8003c84:	f7fe fc57 	bl	8002536 <_ZN4core5slice22slice_index_order_fail17h7c776986fd4b085eE>
 8003c88:	defe      	udf	#254	; 0xfe

08003c8a <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>:
 8003c8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c8e:	b08f      	sub	sp, #60	; 0x3c
 8003c90:	4617      	mov	r7, r2
 8003c92:	f242 7210 	movw	r2, #10000	; 0x2710
 8003c96:	4290      	cmp	r0, r2
 8003c98:	d346      	bcc.n	8003d28 <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0x9e>
 8003c9a:	f241 7959 	movw	r9, #5977	; 0x1759
 8003c9e:	f248 5a1f 	movw	sl, #34079	; 0x851f
 8003ca2:	f64c 36ee 	movw	r6, #52206	; 0xcbee
 8003ca6:	f24e 08ff 	movw	r8, #57599	; 0xe0ff
 8003caa:	2300      	movs	r3, #0
 8003cac:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
 8003cb0:	f2c5 1aeb 	movt	sl, #20971	; 0x51eb
 8003cb4:	f6c0 0600 	movt	r6, #2048	; 0x800
 8003cb8:	f04f 0b64 	mov.w	fp, #100	; 0x64
 8003cbc:	f2c0 58f5 	movt	r8, #1525	; 0x5f5
 8003cc0:	e9cd 1703 	strd	r1, r7, [sp, #12]
 8003cc4:	fba0 4709 	umull	r4, r7, r0, r9
 8003cc8:	f10d 0115 	add.w	r1, sp, #21
 8003ccc:	18cd      	adds	r5, r1, r3
 8003cce:	3b04      	subs	r3, #4
 8003cd0:	4540      	cmp	r0, r8
 8003cd2:	ea4f 3457 	mov.w	r4, r7, lsr #13
 8003cd6:	fb04 0712 	mls	r7, r4, r2, r0
 8003cda:	4620      	mov	r0, r4
 8003cdc:	fba7 ce0a 	umull	ip, lr, r7, sl
 8003ce0:	ea4f 115e 	mov.w	r1, lr, lsr #5
 8003ce4:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 8003ce8:	fb01 711b 	mls	r1, r1, fp, r7
 8003cec:	f8a5 2023 	strh.w	r2, [r5, #35]	; 0x23
 8003cf0:	f242 7210 	movw	r2, #10000	; 0x2710
 8003cf4:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8003cf8:	f8a5 1025 	strh.w	r1, [r5, #37]	; 0x25
 8003cfc:	d8e2      	bhi.n	8003cc4 <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0x3a>
 8003cfe:	e9dd 1703 	ldrd	r1, r7, [sp, #12]
 8003d02:	f103 0227 	add.w	r2, r3, #39	; 0x27
 8003d06:	4620      	mov	r0, r4
 8003d08:	2863      	cmp	r0, #99	; 0x63
 8003d0a:	dc10      	bgt.n	8003d2e <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0xa4>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b09      	cmp	r3, #9
 8003d10:	dd25      	ble.n	8003d5e <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0xd4>
 8003d12:	f64c 30ee 	movw	r0, #52206	; 0xcbee
 8003d16:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003d1a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8003d1e:	1e90      	subs	r0, r2, #2
 8003d20:	f10d 0215 	add.w	r2, sp, #21
 8003d24:	5213      	strh	r3, [r2, r0]
 8003d26:	e01f      	b.n	8003d68 <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0xde>
 8003d28:	2227      	movs	r2, #39	; 0x27
 8003d2a:	2863      	cmp	r0, #99	; 0x63
 8003d2c:	ddee      	ble.n	8003d0c <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0x82>
 8003d2e:	f248 531f 	movw	r3, #34079	; 0x851f
 8003d32:	b286      	uxth	r6, r0
 8003d34:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003d38:	3a02      	subs	r2, #2
 8003d3a:	fba6 6303 	umull	r6, r3, r6, r3
 8003d3e:	2664      	movs	r6, #100	; 0x64
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	fb03 0016 	mls	r0, r3, r6, r0
 8003d46:	f64c 36ee 	movw	r6, #52206	; 0xcbee
 8003d4a:	f6c0 0600 	movt	r6, #2048	; 0x800
 8003d4e:	b280      	uxth	r0, r0
 8003d50:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8003d54:	f10d 0615 	add.w	r6, sp, #21
 8003d58:	52b0      	strh	r0, [r6, r2]
 8003d5a:	2b09      	cmp	r3, #9
 8003d5c:	dcd9      	bgt.n	8003d12 <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE+0x88>
 8003d5e:	1e50      	subs	r0, r2, #1
 8003d60:	f10d 0215 	add.w	r2, sp, #21
 8003d64:	3330      	adds	r3, #48	; 0x30
 8003d66:	5413      	strb	r3, [r2, r0]
 8003d68:	f1c0 0327 	rsb	r3, r0, #39	; 0x27
 8003d6c:	f10d 0215 	add.w	r2, sp, #21
 8003d70:	4410      	add	r0, r2
 8003d72:	f24c 72d0 	movw	r2, #51152	; 0xc7d0
 8003d76:	e9cd 0300 	strd	r0, r3, [sp]
 8003d7a:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003d7e:	4638      	mov	r0, r7
 8003d80:	2300      	movs	r3, #0
 8003d82:	f7ff f863 	bl	8002e4c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8003d86:	b00f      	add	sp, #60	; 0x3c
 8003d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003d8c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h4a5378243facc467E>:
 8003d8c:	7800      	ldrb	r0, [r0, #0]
 8003d8e:	460a      	mov	r2, r1
 8003d90:	2101      	movs	r1, #1
 8003d92:	f7ff bf7a 	b.w	8003c8a <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>

08003d96 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h8362f63c9a899390E>:
 8003d96:	6800      	ldr	r0, [r0, #0]
 8003d98:	460a      	mov	r2, r1
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003da0:	bfc8      	it	gt
 8003da2:	2101      	movgt	r1, #1
 8003da4:	2800      	cmp	r0, #0
 8003da6:	bf48      	it	mi
 8003da8:	4240      	negmi	r0, r0
 8003daa:	f7ff bf6e 	b.w	8003c8a <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>

08003dae <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h490cd499cca46fe6E>:
 8003dae:	6800      	ldr	r0, [r0, #0]
 8003db0:	460a      	mov	r2, r1
 8003db2:	2101      	movs	r1, #1
 8003db4:	f7ff bf69 	b.w	8003c8a <_ZN4core3fmt3num3imp7fmt_u3217hd5f71347e2daefbcE>

08003db8 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E>:
 8003db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dbc:	b08f      	sub	sp, #60	; 0x3c
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	f242 7010 	movw	r0, #10000	; 0x2710
 8003dc4:	1a30      	subs	r0, r6, r0
 8003dc6:	461d      	mov	r5, r3
 8003dc8:	4614      	mov	r4, r2
 8003dca:	f171 0000 	sbcs.w	r0, r1, #0
 8003dce:	d34c      	bcc.n	8003e6a <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0xb2>
 8003dd0:	f64c 38ee 	movw	r8, #52206	; 0xcbee
 8003dd4:	f24e 0bff 	movw	fp, #57599	; 0xe0ff
 8003dd8:	460f      	mov	r7, r1
 8003dda:	f6c0 0800 	movt	r8, #2048	; 0x800
 8003dde:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003de2:	f2c0 5bf5 	movt	fp, #1525	; 0x5f5
 8003de6:	f04f 0a00 	mov.w	sl, #0
 8003dea:	e9cd 4503 	strd	r4, r5, [sp, #12]
 8003dee:	4630      	mov	r0, r6
 8003df0:	4639      	mov	r1, r7
 8003df2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003df6:	2300      	movs	r3, #0
 8003df8:	f008 f870 	bl	800bedc <__aeabi_uldivmod>
 8003dfc:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e00:	f248 531f 	movw	r3, #34079	; 0x851f
 8003e04:	fb00 6212 	mls	r2, r0, r2, r6
 8003e08:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8003e0c:	f10d 0515 	add.w	r5, sp, #21
 8003e10:	4455      	add	r5, sl
 8003e12:	f1aa 0a04 	sub.w	sl, sl, #4
 8003e16:	fba2 3403 	umull	r3, r4, r2, r3
 8003e1a:	0963      	lsrs	r3, r4, #5
 8003e1c:	fb03 2219 	mls	r2, r3, r9, r2
 8003e20:	f838 4013 	ldrh.w	r4, [r8, r3, lsl #1]
 8003e24:	f8a5 4023 	strh.w	r4, [r5, #35]	; 0x23
 8003e28:	f838 2012 	ldrh.w	r2, [r8, r2, lsl #1]
 8003e2c:	f8a5 2025 	strh.w	r2, [r5, #37]	; 0x25
 8003e30:	ebbb 0206 	subs.w	r2, fp, r6
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	4606      	mov	r6, r0
 8003e3a:	41ba      	sbcs	r2, r7
 8003e3c:	460f      	mov	r7, r1
 8003e3e:	d3d6      	bcc.n	8003dee <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0x36>
 8003e40:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
 8003e44:	f10a 0127 	add.w	r1, sl, #39	; 0x27
 8003e48:	4606      	mov	r6, r0
 8003e4a:	2e63      	cmp	r6, #99	; 0x63
 8003e4c:	dc10      	bgt.n	8003e70 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0xb8>
 8003e4e:	4630      	mov	r0, r6
 8003e50:	2809      	cmp	r0, #9
 8003e52:	dd25      	ble.n	8003ea0 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0xe8>
 8003e54:	f64c 32ee 	movw	r2, #52206	; 0xcbee
 8003e58:	3902      	subs	r1, #2
 8003e5a:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003e5e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
 8003e62:	f10d 0215 	add.w	r2, sp, #21
 8003e66:	5250      	strh	r0, [r2, r1]
 8003e68:	e01f      	b.n	8003eaa <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0xf2>
 8003e6a:	2127      	movs	r1, #39	; 0x27
 8003e6c:	2e63      	cmp	r6, #99	; 0x63
 8003e6e:	ddee      	ble.n	8003e4e <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0x96>
 8003e70:	f248 521f 	movw	r2, #34079	; 0x851f
 8003e74:	b2b0      	uxth	r0, r6
 8003e76:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
 8003e7a:	f64c 33ee 	movw	r3, #52206	; 0xcbee
 8003e7e:	fba0 0202 	umull	r0, r2, r0, r2
 8003e82:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003e86:	3902      	subs	r1, #2
 8003e88:	0950      	lsrs	r0, r2, #5
 8003e8a:	2264      	movs	r2, #100	; 0x64
 8003e8c:	fb00 6212 	mls	r2, r0, r2, r6
 8003e90:	b292      	uxth	r2, r2
 8003e92:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003e96:	f10d 0315 	add.w	r3, sp, #21
 8003e9a:	525a      	strh	r2, [r3, r1]
 8003e9c:	2809      	cmp	r0, #9
 8003e9e:	dcd9      	bgt.n	8003e54 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E+0x9c>
 8003ea0:	3901      	subs	r1, #1
 8003ea2:	f10d 0215 	add.w	r2, sp, #21
 8003ea6:	3030      	adds	r0, #48	; 0x30
 8003ea8:	5450      	strb	r0, [r2, r1]
 8003eaa:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
 8003eae:	f10d 0215 	add.w	r2, sp, #21
 8003eb2:	4411      	add	r1, r2
 8003eb4:	f24c 72d0 	movw	r2, #51152	; 0xc7d0
 8003eb8:	e9cd 1000 	strd	r1, r0, [sp]
 8003ebc:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f7fe ffc1 	bl	8002e4c <_ZN4core3fmt9Formatter12pad_integral17hfed4c478dcefa03dE>
 8003eca:	b00f      	add	sp, #60	; 0x3c
 8003ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003ed0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17hf1595badf4d53d6dE>:
 8003ed0:	468c      	mov	ip, r1
 8003ed2:	e9d0 0100 	ldrd	r0, r1, [r0]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f1b1 3fff 	cmp.w	r1, #4294967295
 8003edc:	bfc8      	it	gt
 8003ede:	2201      	movgt	r2, #1
 8003ee0:	eb10 70e1 	adds.w	r0, r0, r1, asr #31
 8003ee4:	eb41 73e1 	adc.w	r3, r1, r1, asr #31
 8003ee8:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
 8003eec:	ea83 71e1 	eor.w	r1, r3, r1, asr #31
 8003ef0:	4663      	mov	r3, ip
 8003ef2:	f7ff bf61 	b.w	8003db8 <_ZN4core3fmt3num3imp7fmt_u6417hdb119abf1a24b3d2E>

08003ef6 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h8430cdf27e8fe239E>:
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	e9d0 1200 	ldrd	r1, r2, [r0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff b8e2 	b.w	80030c6 <_ZN4core3fmt9Formatter3pad17hd7de26a53fbb69c1E>
	...

08003f04 <console_flush>:
    return __semihost(SYS_WRITE, args);
}

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
 8003f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 8003f06:	4c12      	ldr	r4, [pc, #72]	; (8003f50 <console_flush+0x4c>)
void console_flush(void) {
 8003f08:	b085      	sub	sp, #20
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 8003f0a:	7822      	ldrb	r2, [r4, #0]
 8003f0c:	b1ea      	cbz	r2, 8003f4a <console_flush+0x46>
    if (!semihost_mbuf) { return; }  //  Buffer is empty, nothing to write.
 8003f0e:	4911      	ldr	r1, [pc, #68]	; (8003f54 <console_flush+0x50>)
 8003f10:	680a      	ldr	r2, [r1, #0]
 8003f12:	b1d2      	cbz	r2, 8003f4a <console_flush+0x46>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8003f14:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <console_flush+0x54>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }  //  Don't flush if we are called during an interrupt.
 8003f1c:	b9ab      	cbnz	r3, 8003f4a <console_flush+0x46>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
 8003f1e:	600b      	str	r3, [r1, #0]
    args[0] = (uint32_t)fh;
 8003f20:	2502      	movs	r5, #2
    semihost_mbuf = NULL;
 8003f22:	4613      	mov	r3, r2
    __asm( 
 8003f24:	2605      	movs	r6, #5
 8003f26:	af01      	add	r7, sp, #4

    struct os_mbuf *m = old;
    while (m) {  //  For each mbuf in the chain...
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
 8003f28:	88d9      	ldrh	r1, [r3, #6]
    if (length == 0) { return 0; }
 8003f2a:	b141      	cbz	r1, 8003f3e <console_flush+0x3a>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
 8003f2c:	6818      	ldr	r0, [r3, #0]
    args[2] = (uint32_t)length;
 8003f2e:	9103      	str	r1, [sp, #12]
    if (!log_enabled) return -1;
 8003f30:	7821      	ldrb	r1, [r4, #0]
    args[1] = (uint32_t)buffer;
 8003f32:	e9cd 5001 	strd	r5, r0, [sp, #4]
    if (!log_enabled) return -1;
 8003f36:	b111      	cbz	r1, 8003f3e <console_flush+0x3a>
    __asm( 
 8003f38:	4630      	mov	r0, r6
 8003f3a:	4639      	mov	r1, r7
 8003f3c:	beab      	bkpt	0x00ab
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
 8003f3e:	68db      	ldr	r3, [r3, #12]
    while (m) {  //  For each mbuf in the chain...
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f1      	bne.n	8003f28 <console_flush+0x24>
    }
    os_mbuf_free_chain(old);  //  Deallocate the old chain.
 8003f44:	4610      	mov	r0, r2
 8003f46:	f002 fa74 	bl	8006432 <os_mbuf_free_chain>
}
 8003f4a:	b005      	add	sp, #20
 8003f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000168 	.word	0x20000168
 8003f54:	20000280 	.word	0x20000280
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
 8003f5c:	f7ff bfd2 	b.w	8003f04 <console_flush>

08003f60 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
    //  Append "length" number of bytes from "buffer" to the output buffer.
    int rc;
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <console_buffer+0x3c>)
void console_buffer(const char *buffer, unsigned int length) {
 8003f62:	b570      	push	{r4, r5, r6, lr}
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 8003f64:	781b      	ldrb	r3, [r3, #0]
void console_buffer(const char *buffer, unsigned int length) {
 8003f66:	4606      	mov	r6, r0
 8003f68:	460d      	mov	r5, r1
    if (!log_enabled) { return; }  //  Skip if log not enabled.
 8003f6a:	b1b3      	cbz	r3, 8003f9a <console_buffer+0x3a>
    if (!semihost_mbuf) {  //  Allocate mbuf if not already allocated.
 8003f6c:	4c0c      	ldr	r4, [pc, #48]	; (8003fa0 <console_buffer+0x40>)
 8003f6e:	6821      	ldr	r1, [r4, #0]
 8003f70:	b169      	cbz	r1, 8003f8e <console_buffer+0x2e>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
    }
    //  Limit the buffer size.  Quit if too big.
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
 8003f72:	6820      	ldr	r0, [r4, #0]
 8003f74:	f002 fa6a 	bl	800644c <os_mbuf_len>
 8003f78:	4428      	add	r0, r5
 8003f7a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8003f7e:	d20c      	bcs.n	8003f9a <console_buffer+0x3a>
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
 8003f80:	b2aa      	uxth	r2, r5
 8003f82:	4631      	mov	r1, r6
 8003f84:	6820      	ldr	r0, [r4, #0]
    if (rc) { return; }  //  If out of memory, quit.
}
 8003f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
 8003f8a:	f002 ba68 	b.w	800645e <os_mbuf_append>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
 8003f8e:	b2a8      	uxth	r0, r5
 8003f90:	f002 fc50 	bl	8006834 <os_msys_get_pkthdr>
 8003f94:	6020      	str	r0, [r4, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d1eb      	bne.n	8003f72 <console_buffer+0x12>
}
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	20000168 	.word	0x20000168
 8003fa0:	20000280 	.word	0x20000280

08003fa4 <console_printhex>:

void console_printhex(uint8_t v) {
 8003fa4:	b507      	push	{r0, r1, r2, lr}
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
        char digit = '0' + (char)(v / divisor);
 8003fa6:	0902      	lsrs	r2, r0, #4
 8003fa8:	f102 0330 	add.w	r3, r2, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8003fac:	2b39      	cmp	r3, #57	; 0x39
 8003fae:	bf88      	it	hi
 8003fb0:	f102 0357 	addhi.w	r3, r2, #87	; 0x57
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
                buffer[length++] = digit;
            }
        }
        v = v % divisor;
 8003fb4:	f000 000f 	and.w	r0, r0, #15
                buffer[length++] = digit;
 8003fb8:	f88d 3004 	strb.w	r3, [sp, #4]
        char digit = '0' + (char)(v / divisor);
 8003fbc:	f100 0330 	add.w	r3, r0, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8003fc0:	2b39      	cmp	r3, #57	; 0x39
 8003fc2:	bf88      	it	hi
 8003fc4:	f100 0357 	addhi.w	r3, r0, #87	; 0x57
                buffer[length++] = digit;
 8003fc8:	f88d 3005 	strb.w	r3, [sp, #5]
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8003fcc:	2300      	movs	r3, #0
    console_buffer(buffer, strlen(buffer));
 8003fce:	a801      	add	r0, sp, #4
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8003fd0:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
 8003fd4:	f003 f9de 	bl	8007394 <strlen>
 8003fd8:	4601      	mov	r1, r0
 8003fda:	a801      	add	r0, sp, #4
 8003fdc:	f7ff ffc0 	bl	8003f60 <console_buffer>
}
 8003fe0:	b003      	add	sp, #12
 8003fe2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003fe8 <console_dump>:
    bool neg; int i, d;
    split_float(f, &neg, &i, &d);      //  Split the float into neg, integer and decimal parts to 2 decimal places
    console_printf("%s%d.%02d", neg ? "-" : "", i, d);   //  Combine the sign, integer and decimal parts
}

void console_dump(const uint8_t *buffer, unsigned int len) {
 8003fe8:	b570      	push	{r4, r5, r6, lr}
	//  Append "length" number of bytes from "buffer" to the output buffer in hex format.
    if (buffer == NULL || len == 0) { return; }
 8003fea:	b128      	cbz	r0, 8003ff8 <console_dump+0x10>
 8003fec:	b121      	cbz	r1, 8003ff8 <console_dump+0x10>
 8003fee:	4604      	mov	r4, r0
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
 8003ff0:	4e06      	ldr	r6, [pc, #24]	; (800400c <console_dump+0x24>)
 8003ff2:	1845      	adds	r5, r0, r1
 8003ff4:	42ac      	cmp	r4, r5
 8003ff6:	d100      	bne.n	8003ffa <console_dump+0x12>
}
 8003ff8:	bd70      	pop	{r4, r5, r6, pc}
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
 8003ffa:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003ffe:	f7ff ffd1 	bl	8003fa4 <console_printhex>
 8004002:	2101      	movs	r1, #1
 8004004:	4630      	mov	r0, r6
 8004006:	f7ff ffab 	bl	8003f60 <console_buffer>
 800400a:	e7f3      	b.n	8003ff4 <console_dump+0xc>
 800400c:	0800e0a7 	.word	0x0800e0a7

08004010 <console_out_nolock>:
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}

int console_out_nolock(int character) {
    char c = (char)character;
    if (g_silence_console) { return c; }
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <console_out_nolock+0x34>)
int console_out_nolock(int character) {
 8004012:	b513      	push	{r0, r1, r4, lr}
    if (g_silence_console) { return c; }
 8004014:	7819      	ldrb	r1, [r3, #0]
int console_out_nolock(int character) {
 8004016:	4604      	mov	r4, r0
 8004018:	b2c3      	uxtb	r3, r0
    if (g_silence_console) { return c; }
 800401a:	b119      	cbz	r1, 8004024 <console_out_nolock+0x14>
 800401c:	461c      	mov	r4, r3
    } else {
        console_is_midline = 1;
    }
    semihosting_console_write_ch(c);
    return character;
}
 800401e:	4620      	mov	r0, r4
 8004020:	b002      	add	sp, #8
 8004022:	bd10      	pop	{r4, pc}
    if ('\n' == c) {
 8004024:	2b0a      	cmp	r3, #10
        console_is_midline = 1;
 8004026:	bf18      	it	ne
 8004028:	2101      	movne	r1, #1
 800402a:	4a07      	ldr	r2, [pc, #28]	; (8004048 <console_out_nolock+0x38>)
    if (c == '\r') { return; }  //  Don't display \r.
 800402c:	2b0d      	cmp	r3, #13
        console_is_midline = 1;
 800402e:	6011      	str	r1, [r2, #0]
 8004030:	f88d 3007 	strb.w	r3, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
 8004034:	d0f3      	beq.n	800401e <console_out_nolock+0xe>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
 8004036:	2101      	movs	r1, #1
 8004038:	f10d 0007 	add.w	r0, sp, #7
 800403c:	f7ff ff90 	bl	8003f60 <console_buffer>
 8004040:	e7ed      	b.n	800401e <console_out_nolock+0xe>
 8004042:	bf00      	nop
 8004044:	20003365 	.word	0x20003365
 8004048:	20003360 	.word	0x20003360

0800404c <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
 800404c:	2000      	movs	r0, #0
 800404e:	4770      	bx	lr

08004050 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	4605      	mov	r5, r0
 8004054:	460e      	mov	r6, r1
    int i;
    for (i = 0; i < cnt; i++) {
 8004056:	4604      	mov	r4, r0
 8004058:	1b63      	subs	r3, r4, r5
 800405a:	429e      	cmp	r6, r3
 800405c:	dd05      	ble.n	800406a <console_write+0x1a>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
 800405e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004062:	f7ff ffd5 	bl	8004010 <console_out_nolock>
 8004066:	3001      	adds	r0, #1
 8004068:	d1f6      	bne.n	8004058 <console_write+0x8>
    }
}
 800406a:	bd70      	pop	{r4, r5, r6, pc}

0800406c <console_blocking_mode>:

void console_blocking_mode(void) {
    disable_buffer();
 800406c:	f7ff bf76 	b.w	8003f5c <disable_buffer>

08004070 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
 8004070:	b513      	push	{r0, r1, r4, lr}
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 8004072:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <console_pkg_init+0x38>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	b923      	cbnz	r3, 8004082 <console_pkg_init+0x12>
 8004078:	461a      	mov	r2, r3
 800407a:	4619      	mov	r1, r3
 800407c:	4618      	mov	r0, r3
 800407e:	f001 fdcf 	bl	8005c20 <__assert_func>

    os_eventq_init(&avail_queue);
 8004082:	480a      	ldr	r0, [pc, #40]	; (80040ac <console_pkg_init+0x3c>)
 8004084:	f002 f898 	bl	80061b8 <os_eventq_init>
    os_mutex_init(&console_write_lock);
 8004088:	4809      	ldr	r0, [pc, #36]	; (80040b0 <console_pkg_init+0x40>)
 800408a:	f002 fc1d 	bl	80068c8 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
 800408e:	f7ff ffdd 	bl	800404c <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
 8004092:	b138      	cbz	r0, 80040a4 <console_pkg_init+0x34>
 8004094:	2300      	movs	r3, #0
 8004096:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <console_pkg_init+0x44>)
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	6814      	ldr	r4, [r2, #0]
 800409c:	4619      	mov	r1, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	4618      	mov	r0, r3
 80040a2:	47a0      	blx	r4
}
 80040a4:	b002      	add	sp, #8
 80040a6:	bd10      	pop	{r4, pc}
 80040a8:	20003428 	.word	0x20003428
 80040ac:	20000284 	.word	0x20000284
 80040b0:	20000294 	.word	0x20000294
 80040b4:	20000180 	.word	0x20000180

080040b8 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
 80040b8:	b40f      	push	{r0, r1, r2, r3}
 80040ba:	b513      	push	{r0, r1, r4, lr}
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
 80040bc:	f000 f81c 	bl	80040f8 <console_get_ticks>
 80040c0:	b140      	cbz	r0, 80040d4 <console_printf+0x1c>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <console_printf+0x38>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	b98b      	cbnz	r3, 80040ec <console_printf+0x34>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
 80040c8:	f002 ff68 	bl	8006f9c <os_time_get>
 80040cc:	4601      	mov	r1, r0
 80040ce:	4809      	ldr	r0, [pc, #36]	; (80040f4 <console_printf+0x3c>)
 80040d0:	f003 fb94 	bl	80077fc <printf>
    num_chars = 0;
 80040d4:	4604      	mov	r4, r0
        }
    }

    va_start(args, fmt);
 80040d6:	a905      	add	r1, sp, #20
    num_chars += vprintf(fmt, args);
 80040d8:	9804      	ldr	r0, [sp, #16]
    va_start(args, fmt);
 80040da:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
 80040dc:	f003 fbbe 	bl	800785c <vprintf>
    va_end(args);

    return num_chars;
}
 80040e0:	4420      	add	r0, r4
 80040e2:	b002      	add	sp, #8
 80040e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040e8:	b004      	add	sp, #16
 80040ea:	4770      	bx	lr
    num_chars = 0;
 80040ec:	2400      	movs	r4, #0
 80040ee:	e7f2      	b.n	80040d6 <console_printf+0x1e>
 80040f0:	20003360 	.word	0x20003360
 80040f4:	0800dec8 	.word	0x0800dec8

080040f8 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
 80040f8:	4b01      	ldr	r3, [pc, #4]	; (8004100 <console_get_ticks+0x8>)
 80040fa:	7818      	ldrb	r0, [r3, #0]
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	200002a0 	.word	0x200002a0

08004104 <cbor_cnt_writer>:
};

static inline int
cbor_cnt_writer(struct cbor_encoder_writer *arg, const char *data, int len) {
    struct CborCntWriter *cb = (struct CborCntWriter *) arg;
    cb->enc.bytes_written += len;
 8004104:	6843      	ldr	r3, [r0, #4]
 8004106:	441a      	add	r2, r3
 8004108:	6042      	str	r2, [r0, #4]
    return CborNoError;
}
 800410a:	2000      	movs	r0, #0
 800410c:	4770      	bx	lr
	...

08004110 <handle_coap_response>:
    return oc_sensor_coap_ready;
}

///  Handle CoAP response.
static void handle_coap_response(oc_client_response_t *data) {
    console_printf("handle_coap\n");
 8004110:	4801      	ldr	r0, [pc, #4]	; (8004118 <handle_coap_response+0x8>)
 8004112:	f7ff bfd1 	b.w	80040b8 <console_printf>
 8004116:	bf00      	nop
 8004118:	0800decf 	.word	0x0800decf

0800411c <json_rep_finalize.part.2>:
struct json_value coap_json_value;
///  The mbuf that contains the outgoing CoAP payload.
static struct os_mbuf *coap_json_mbuf;  

///  Write the JSON to the mbuf for the outgoing CoAP message.
int json_write_mbuf(void *buf, char *data, int len) {
 800411c:	b508      	push	{r3, lr}
    if (oc_content_format != APPLICATION_JSON) { return 0; }  //  Exit if we are encoding CBOR, not JSON.
    assert(coap_json_mbuf);
 800411e:	2300      	movs	r3, #0
 8004120:	461a      	mov	r2, r3
 8004122:	4619      	mov	r1, r3
 8004124:	4618      	mov	r0, r3
 8004126:	f001 fd7b 	bl	8005c20 <__assert_func>
	...

0800412c <json_write_mbuf>:
    if (oc_content_format != APPLICATION_JSON) { return 0; }  //  Exit if we are encoding CBOR, not JSON.
 800412c:	480b      	ldr	r0, [pc, #44]	; (800415c <json_write_mbuf+0x30>)
int json_write_mbuf(void *buf, char *data, int len) {
 800412e:	b508      	push	{r3, lr}
    if (oc_content_format != APPLICATION_JSON) { return 0; }  //  Exit if we are encoding CBOR, not JSON.
 8004130:	6800      	ldr	r0, [r0, #0]
 8004132:	2832      	cmp	r0, #50	; 0x32
 8004134:	d110      	bne.n	8004158 <json_write_mbuf+0x2c>
    assert(coap_json_mbuf);
 8004136:	480a      	ldr	r0, [pc, #40]	; (8004160 <json_write_mbuf+0x34>)
 8004138:	6800      	ldr	r0, [r0, #0]
 800413a:	b908      	cbnz	r0, 8004140 <json_write_mbuf+0x14>
 800413c:	f7ff ffee 	bl	800411c <json_rep_finalize.part.2>
    assert(data);
 8004140:	b929      	cbnz	r1, 800414e <json_write_mbuf+0x22>
 8004142:	2300      	movs	r3, #0
 8004144:	461a      	mov	r2, r3
 8004146:	4619      	mov	r1, r3
 8004148:	4618      	mov	r0, r3
 800414a:	f001 fd69 	bl	8005c20 <__assert_func>
    //  console_printf("json "); console_buffer(data, len); console_printf("\n");  ////
    int rc = os_mbuf_append(coap_json_mbuf, data, len);  assert(rc == 0);
 800414e:	b292      	uxth	r2, r2
 8004150:	f002 f985 	bl	800645e <os_mbuf_append>
 8004154:	2800      	cmp	r0, #0
 8004156:	d1f4      	bne.n	8004142 <json_write_mbuf+0x16>
    if (rc) { return -1; }
    return 0;
}
 8004158:	2000      	movs	r0, #0
 800415a:	bd08      	pop	{r3, pc}
 800415c:	20000324 	.word	0x20000324
 8004160:	200002ac 	.word	0x200002ac

08004164 <init_sensor_coap>:
void init_sensor_coap(void) {
 8004164:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
 8004166:	2101      	movs	r1, #1
 8004168:	4806      	ldr	r0, [pc, #24]	; (8004184 <init_sensor_coap+0x20>)
 800416a:	f002 fdef 	bl	8006d4c <os_sem_init>
    assert(rc == OS_OK);
 800416e:	b128      	cbz	r0, 800417c <init_sensor_coap+0x18>
 8004170:	2300      	movs	r3, #0
 8004172:	461a      	mov	r2, r3
 8004174:	4619      	mov	r1, r3
 8004176:	4618      	mov	r0, r3
 8004178:	f001 fd52 	bl	8005c20 <__assert_func>
    oc_sensor_coap_ready = true;
 800417c:	2201      	movs	r2, #1
 800417e:	4b02      	ldr	r3, [pc, #8]	; (8004188 <init_sensor_coap+0x24>)
 8004180:	701a      	strb	r2, [r3, #0]
}
 8004182:	bd08      	pop	{r3, pc}
 8004184:	20000328 	.word	0x20000328
 8004188:	20000330 	.word	0x20000330

0800418c <init_sensor_post>:
{
 800418c:	b508      	push	{r3, lr}
    assert(oc_sensor_coap_ready);  assert(server);
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <init_sensor_post+0x2c>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	b92b      	cbnz	r3, 80041a0 <init_sensor_post+0x14>
 8004194:	2300      	movs	r3, #0
 8004196:	461a      	mov	r2, r3
 8004198:	4619      	mov	r1, r3
 800419a:	4618      	mov	r0, r3
 800419c:	f001 fd40 	bl	8005c20 <__assert_func>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d0f7      	beq.n	8004194 <init_sensor_post+0x8>
    os_error_t rc = os_sem_pend(&oc_sem, OS_TIMEOUT_NEVER);  //  Allow only 1 task to be creating a sensor request at any time.
 80041a4:	f04f 31ff 	mov.w	r1, #4294967295
 80041a8:	4804      	ldr	r0, [pc, #16]	; (80041bc <init_sensor_post+0x30>)
 80041aa:	f002 fe09 	bl	8006dc0 <os_sem_pend>
    assert(rc == OS_OK);
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d1f0      	bne.n	8004194 <init_sensor_post+0x8>
}
 80041b2:	2001      	movs	r0, #1
 80041b4:	bd08      	pop	{r3, pc}
 80041b6:	bf00      	nop
 80041b8:	20000330 	.word	0x20000330
 80041bc:	20000328 	.word	0x20000328

080041c0 <json_rep_reset>:
#endif  //  MYNEWT_VAL(COAP_CBOR_ENCODING) && MYNEWT_VAL(COAP_JSON_ENCODING)
}

///  Close the current JSON CoAP payload.  Erase the JSON encoder.
void json_rep_reset(void) {
    coap_json_mbuf = NULL;
 80041c0:	2100      	movs	r1, #0
void json_rep_reset(void) {
 80041c2:	b508      	push	{r3, lr}
    coap_json_mbuf = NULL;
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <json_rep_reset+0x1c>)
    memset(&coap_json_encoder, 0, sizeof(coap_json_encoder));  //  Erase the encoder.
 80041c6:	2248      	movs	r2, #72	; 0x48
    coap_json_mbuf = NULL;
 80041c8:	6019      	str	r1, [r3, #0]
    memset(&coap_json_encoder, 0, sizeof(coap_json_encoder));  //  Erase the encoder.
 80041ca:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <json_rep_reset+0x20>)
 80041cc:	4618      	mov	r0, r3
 80041ce:	f003 f8b8 	bl	8007342 <memset>
    coap_json_encoder.je_write = json_write_mbuf;
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <json_rep_reset+0x24>)
 80041d4:	f840 2c04 	str.w	r2, [r0, #-4]
}
 80041d8:	bd08      	pop	{r3, pc}
 80041da:	bf00      	nop
 80041dc:	200002ac 	.word	0x200002ac
 80041e0:	2000336c 	.word	0x2000336c
 80041e4:	0800412d 	.word	0x0800412d

080041e8 <json_rep_new>:
void json_rep_new(struct os_mbuf *m) {
 80041e8:	b510      	push	{r4, lr}
    assert(m);
 80041ea:	4604      	mov	r4, r0
 80041ec:	b908      	cbnz	r0, 80041f2 <json_rep_new+0xa>
 80041ee:	f7ff ff95 	bl	800411c <json_rep_finalize.part.2>
    json_rep_reset();  //  Erase the JSON encoder.
 80041f2:	f7ff ffe5 	bl	80041c0 <json_rep_reset>

static inline void
cbor_cnt_writer_init(struct CborCntWriter *cb) {
    cb->enc.bytes_written = 0;
 80041f6:	2200      	movs	r2, #0
    coap_json_mbuf = m;
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <json_rep_new+0x28>)
 80041fa:	4906      	ldr	r1, [pc, #24]	; (8004214 <json_rep_new+0x2c>)
 80041fc:	601c      	str	r4, [r3, #0]
    cb->enc.write = &cbor_cnt_writer;
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <json_rep_new+0x30>)
    cbor_encoder_init(&g_encoder, &cnt_writer.enc, 0);
 8004200:	4806      	ldr	r0, [pc, #24]	; (800421c <json_rep_new+0x34>)
}
 8004202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cb->enc.bytes_written = 0;
 8004206:	604a      	str	r2, [r1, #4]
    cb->enc.write = &cbor_cnt_writer;
 8004208:	600b      	str	r3, [r1, #0]
    cbor_encoder_init(&g_encoder, &cnt_writer.enc, 0);
 800420a:	f001 b98f 	b.w	800552c <cbor_encoder_init>
 800420e:	bf00      	nop
 8004210:	200002ac 	.word	0x200002ac
 8004214:	200002a4 	.word	0x200002a4
 8004218:	08004105 	.word	0x08004105
 800421c:	200033f8 	.word	0x200033f8

08004220 <prepare_sensor_post>:
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 8004220:	4b3a      	ldr	r3, [pc, #232]	; (800430c <prepare_sensor_post+0xec>)
{
 8004222:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 8004226:	781f      	ldrb	r7, [r3, #0]
{
 8004228:	4604      	mov	r4, r0
 800422a:	4608      	mov	r0, r1
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 800422c:	b92f      	cbnz	r7, 800423a <prepare_sensor_post+0x1a>
 800422e:	2300      	movs	r3, #0
 8004230:	461a      	mov	r2, r3
 8004232:	4619      	mov	r1, r3
 8004234:	4618      	mov	r0, r3
 8004236:	f001 fcf3 	bl	8005c20 <__assert_func>
 800423a:	2c00      	cmp	r4, #0
 800423c:	d0f7      	beq.n	800422e <prepare_sensor_post+0xe>
 800423e:	2900      	cmp	r1, #0
 8004240:	d0f5      	beq.n	800422e <prepare_sensor_post+0xe>
    assert(coap_content_format != 0);  //  CoAP Content Format must be specified
 8004242:	2a00      	cmp	r2, #0
 8004244:	d0f3      	beq.n	800422e <prepare_sensor_post+0xe>
    cb = oc_ri_alloc_client_cb(uri, server, OC_POST, handler, qos);
 8004246:	2301      	movs	r3, #1
    oc_content_format = coap_content_format;
 8004248:	4e31      	ldr	r6, [pc, #196]	; (8004310 <prepare_sensor_post+0xf0>)
    cb = oc_ri_alloc_client_cb(uri, server, OC_POST, handler, qos);
 800424a:	9300      	str	r3, [sp, #0]
    oc_content_format = coap_content_format;
 800424c:	6032      	str	r2, [r6, #0]
    cb = oc_ri_alloc_client_cb(uri, server, OC_POST, handler, qos);
 800424e:	4621      	mov	r1, r4
 8004250:	4b30      	ldr	r3, [pc, #192]	; (8004314 <prepare_sensor_post+0xf4>)
 8004252:	2202      	movs	r2, #2
 8004254:	f000 fc38 	bl	8004ac8 <oc_ri_alloc_client_cb>
    if (!cb) {
 8004258:	4604      	mov	r4, r0
 800425a:	b948      	cbnz	r0, 8004270 <prepare_sensor_post+0x50>
        os_error_t rc = os_sem_release(&oc_sem);  //  Failed.  Release the semaphore.
 800425c:	482e      	ldr	r0, [pc, #184]	; (8004318 <prepare_sensor_post+0xf8>)
 800425e:	f002 fd7d 	bl	8006d5c <os_sem_release>
        assert(rc == OS_OK);
 8004262:	2800      	cmp	r0, #0
 8004264:	d1e3      	bne.n	800422e <prepare_sensor_post+0xe>
        return false;
 8004266:	2700      	movs	r7, #0
}
 8004268:	4638      	mov	r0, r7
 800426a:	b002      	add	sp, #8
 800426c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    oc_c_rsp = os_msys_get_pkthdr(0, 0);
 8004270:	2100      	movs	r1, #0
 8004272:	4608      	mov	r0, r1
 8004274:	f002 fade 	bl	8006834 <os_msys_get_pkthdr>
 8004278:	4d28      	ldr	r5, [pc, #160]	; (800431c <prepare_sensor_post+0xfc>)
 800427a:	6028      	str	r0, [r5, #0]
    if (!oc_c_rsp) {
 800427c:	2800      	cmp	r0, #0
 800427e:	d0f2      	beq.n	8004266 <prepare_sensor_post+0x46>
    oc_c_message = oc_allocate_mbuf(&cb->server.endpoint);
 8004280:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8004284:	f000 fb4a 	bl	800491c <oc_allocate_mbuf>
 8004288:	4b25      	ldr	r3, [pc, #148]	; (8004320 <prepare_sensor_post+0x100>)
 800428a:	4680      	mov	r8, r0
 800428c:	6018      	str	r0, [r3, #0]
    if (!oc_c_message) {
 800428e:	2800      	cmp	r0, #0
 8004290:	d034      	beq.n	80042fc <prepare_sensor_post+0xdc>
    if (oc_content_format == APPLICATION_JSON) { 
 8004292:	6833      	ldr	r3, [r6, #0]
 8004294:	2b32      	cmp	r3, #50	; 0x32
 8004296:	d12b      	bne.n	80042f0 <prepare_sensor_post+0xd0>
        json_rep_new(oc_c_rsp); 
 8004298:	6828      	ldr	r0, [r5, #0]
 800429a:	f7ff ffa5 	bl	80041e8 <json_rep_new>
    coap_init_message(oc_c_request, type, cb->method, cb->mid);
 800429e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80042a0:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 80042a4:	2101      	movs	r1, #1
 80042a6:	481f      	ldr	r0, [pc, #124]	; (8004324 <prepare_sensor_post+0x104>)
 80042a8:	f000 fcfe 	bl	8004ca8 <coap_init_message>
    coap_set_header_accept(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
 80042ac:	6831      	ldr	r1, [r6, #0]
 80042ae:	481d      	ldr	r0, [pc, #116]	; (8004324 <prepare_sensor_post+0x104>)
 80042b0:	f000 fed7 	bl	8005062 <coap_set_header_accept>
    coap_set_token(oc_c_request, cb->token, cb->token_len);
 80042b4:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80042b8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80042bc:	4819      	ldr	r0, [pc, #100]	; (8004324 <prepare_sensor_post+0x104>)
 80042be:	f000 febe 	bl	800503e <coap_set_token>
    coap_set_header_uri_path(oc_c_request, oc_string(cb->uri));
 80042c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80042c4:	4817      	ldr	r0, [pc, #92]	; (8004324 <prepare_sensor_post+0x104>)
 80042c6:	f000 fed3 	bl	8005070 <coap_set_header_uri_path>
    if (cb->observe_seq != -1) {
 80042ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80042cc:	1c4b      	adds	r3, r1, #1
 80042ce:	d002      	beq.n	80042d6 <prepare_sensor_post+0xb6>
        coap_set_header_observe(oc_c_request, cb->observe_seq);
 80042d0:	4814      	ldr	r0, [pc, #80]	; (8004324 <prepare_sensor_post+0x104>)
 80042d2:	f000 fede 	bl	8005092 <coap_set_header_observe>
    if (cb->observe_seq == -1 && cb->qos == LOW_QOS) {
 80042d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042d8:	3301      	adds	r3, #1
 80042da:	d1c5      	bne.n	8004268 <prepare_sensor_post+0x48>
 80042dc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d1c1      	bne.n	8004268 <prepare_sensor_post+0x48>
        os_callout_reset(&cb->callout,
 80042e4:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80042e8:	1d20      	adds	r0, r4, #4
 80042ea:	f001 fe25 	bl	8005f38 <os_callout_reset>
 80042ee:	e7bb      	b.n	8004268 <prepare_sensor_post+0x48>
    else if (oc_content_format == APPLICATION_CBOR) { 
 80042f0:	2b3c      	cmp	r3, #60	; 0x3c
 80042f2:	d19c      	bne.n	800422e <prepare_sensor_post+0xe>
        oc_rep_new(oc_c_rsp); 
 80042f4:	6828      	ldr	r0, [r5, #0]
 80042f6:	f000 fb5b 	bl	80049b0 <oc_rep_new>
 80042fa:	e7d0      	b.n	800429e <prepare_sensor_post+0x7e>
    os_mbuf_free_chain(oc_c_rsp);
 80042fc:	6828      	ldr	r0, [r5, #0]
 80042fe:	f002 f898 	bl	8006432 <os_mbuf_free_chain>
    return false;
 8004302:	4647      	mov	r7, r8
    oc_c_rsp = NULL;
 8004304:	f8c5 8000 	str.w	r8, [r5]
 8004308:	e7ae      	b.n	8004268 <prepare_sensor_post+0x48>
 800430a:	bf00      	nop
 800430c:	20000330 	.word	0x20000330
 8004310:	20000324 	.word	0x20000324
 8004314:	08004111 	.word	0x08004111
 8004318:	20000328 	.word	0x20000328
 800431c:	20000320 	.word	0x20000320
 8004320:	200002b0 	.word	0x200002b0
 8004324:	200002b4 	.word	0x200002b4

08004328 <json_rep_finalize>:

///  Finalise the payload and return the payload size.
int json_rep_finalize(void) {
 8004328:	b538      	push	{r3, r4, r5, lr}
    assert(coap_json_mbuf);
 800432a:	4c0e      	ldr	r4, [pc, #56]	; (8004364 <json_rep_finalize+0x3c>)
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	b90b      	cbnz	r3, 8004334 <json_rep_finalize+0xc>
 8004330:	f7ff fef4 	bl	800411c <json_rep_finalize.part.2>
    int size = OS_MBUF_PKTLEN(coap_json_mbuf);
 8004334:	8a1d      	ldrh	r5, [r3, #16]
#define DUMP_COAP
#ifdef DUMP_COAP
    console_printf("NET payload size %d\n", size); struct os_mbuf *m = coap_json_mbuf;
 8004336:	480c      	ldr	r0, [pc, #48]	; (8004368 <json_rep_finalize+0x40>)
 8004338:	4629      	mov	r1, r5
 800433a:	f7ff febd 	bl	80040b8 <console_printf>
 800433e:	6824      	ldr	r4, [r4, #0]
    while (m) {
 8004340:	b934      	cbnz	r4, 8004350 <json_rep_finalize+0x28>
        console_buffer((const char *) (m->om_databuf + m->om_pkthdr_len), m->om_len);
        m = m->om_next.sle_next;
    } console_printf("\n");
 8004342:	480a      	ldr	r0, [pc, #40]	; (800436c <json_rep_finalize+0x44>)
 8004344:	f7ff feb8 	bl	80040b8 <console_printf>
#endif  //  DUMP_COAP

    json_rep_reset();
 8004348:	f7ff ff3a 	bl	80041c0 <json_rep_reset>
    return size;
}
 800434c:	4628      	mov	r0, r5
 800434e:	bd38      	pop	{r3, r4, r5, pc}
        console_buffer((const char *) (m->om_databuf + m->om_pkthdr_len), m->om_len);
 8004350:	7963      	ldrb	r3, [r4, #5]
 8004352:	f104 0010 	add.w	r0, r4, #16
 8004356:	88e1      	ldrh	r1, [r4, #6]
 8004358:	4418      	add	r0, r3
 800435a:	f7ff fe01 	bl	8003f60 <console_buffer>
        m = m->om_next.sle_next;
 800435e:	68e4      	ldr	r4, [r4, #12]
 8004360:	e7ee      	b.n	8004340 <json_rep_finalize+0x18>
 8004362:	bf00      	nop
 8004364:	200002ac 	.word	0x200002ac
 8004368:	0800dedc 	.word	0x0800dedc
 800436c:	0800e6ec 	.word	0x0800e6ec

08004370 <do_sensor_post>:
{
 8004370:	b538      	push	{r3, r4, r5, lr}
    assert(oc_content_format);
 8004372:	4c20      	ldr	r4, [pc, #128]	; (80043f4 <do_sensor_post+0x84>)
 8004374:	6822      	ldr	r2, [r4, #0]
 8004376:	b92a      	cbnz	r2, 8004384 <do_sensor_post+0x14>
 8004378:	2300      	movs	r3, #0
 800437a:	461a      	mov	r2, r3
 800437c:	4619      	mov	r1, r3
 800437e:	4618      	mov	r0, r3
 8004380:	f001 fc4e 	bl	8005c20 <__assert_func>
        (oc_content_format == APPLICATION_JSON) ? json_rep_finalize() :
 8004384:	2a32      	cmp	r2, #50	; 0x32
 8004386:	4d1c      	ldr	r5, [pc, #112]	; (80043f8 <do_sensor_post+0x88>)
 8004388:	d126      	bne.n	80043d8 <do_sensor_post+0x68>
 800438a:	f7ff ffcd 	bl	8004328 <json_rep_finalize>
    if (response_length) {
 800438e:	b340      	cbz	r0, 80043e2 <do_sensor_post+0x72>
        oc_c_request->payload_m = oc_c_rsp;
 8004390:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <do_sensor_post+0x8c>)
 8004392:	682a      	ldr	r2, [r5, #0]
        oc_c_request->payload_len = response_length;
 8004394:	f8a3 0062 	strh.w	r0, [r3, #98]	; 0x62
        oc_c_request->payload_m = oc_c_rsp;
 8004398:	669a      	str	r2, [r3, #104]	; 0x68
        coap_set_header_content_format(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
 800439a:	6821      	ldr	r1, [r4, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fe59 	bl	8005054 <coap_set_header_content_format>
    oc_c_rsp = NULL;
 80043a2:	2300      	movs	r3, #0
    if (oc_c_message) {
 80043a4:	4c16      	ldr	r4, [pc, #88]	; (8004400 <do_sensor_post+0x90>)
    oc_c_rsp = NULL;
 80043a6:	602b      	str	r3, [r5, #0]
    if (oc_c_message) {
 80043a8:	6821      	ldr	r1, [r4, #0]
 80043aa:	b309      	cbz	r1, 80043f0 <do_sensor_post+0x80>
        if (!coap_serialize_message(oc_c_request, oc_c_message)) {
 80043ac:	4813      	ldr	r0, [pc, #76]	; (80043fc <do_sensor_post+0x8c>)
 80043ae:	f000 fc89 	bl	8004cc4 <coap_serialize_message>
 80043b2:	4601      	mov	r1, r0
            coap_send_message(oc_c_message, 0);
 80043b4:	6820      	ldr	r0, [r4, #0]
        if (!coap_serialize_message(oc_c_request, oc_c_message)) {
 80043b6:	b9c1      	cbnz	r1, 80043ea <do_sensor_post+0x7a>
            coap_send_message(oc_c_message, 0);
 80043b8:	f000 fe34 	bl	8005024 <coap_send_message>
        oc_ri_remove_client_cb_by_mid(oc_c_request->mid);
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <do_sensor_post+0x8c>)
 80043be:	8898      	ldrh	r0, [r3, #4]
 80043c0:	f000 fb76 	bl	8004ab0 <oc_ri_remove_client_cb_by_mid>
        oc_c_message = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	6023      	str	r3, [r4, #0]
        ret = true;
 80043c8:	2401      	movs	r4, #1
    os_error_t rc = os_sem_release(&oc_sem);  //  Request completed.  Release the semaphore for another request.
 80043ca:	480e      	ldr	r0, [pc, #56]	; (8004404 <do_sensor_post+0x94>)
 80043cc:	f002 fcc6 	bl	8006d5c <os_sem_release>
    assert(rc == OS_OK);
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d1d1      	bne.n	8004378 <do_sensor_post+0x8>
}
 80043d4:	4620      	mov	r0, r4
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
        (oc_content_format == APPLICATION_CBOR) ? oc_rep_finalize() :
 80043d8:	2a3c      	cmp	r2, #60	; 0x3c
 80043da:	d102      	bne.n	80043e2 <do_sensor_post+0x72>
 80043dc:	f000 fb0a 	bl	80049f4 <oc_rep_finalize>
 80043e0:	e7d5      	b.n	800438e <do_sensor_post+0x1e>
        os_mbuf_free_chain(oc_c_rsp);
 80043e2:	6828      	ldr	r0, [r5, #0]
 80043e4:	f002 f825 	bl	8006432 <os_mbuf_free_chain>
 80043e8:	e7db      	b.n	80043a2 <do_sensor_post+0x32>
            os_mbuf_free_chain(oc_c_message);
 80043ea:	f002 f822 	bl	8006432 <os_mbuf_free_chain>
 80043ee:	e7e5      	b.n	80043bc <do_sensor_post+0x4c>
    bool ret = false;
 80043f0:	460c      	mov	r4, r1
 80043f2:	e7ea      	b.n	80043ca <do_sensor_post+0x5a>
 80043f4:	20000324 	.word	0x20000324
 80043f8:	20000320 	.word	0x20000320
 80043fc:	200002b4 	.word	0x200002b4
 8004400:	200002b0 	.word	0x200002b0
 8004404:	20000328 	.word	0x20000328

08004408 <json_rep_start_root_object>:

/// Start the JSON representation.  Assume top level is object.
/// ```
/// --> {
/// ```
void json_rep_start_root_object(void) {
 8004408:	b508      	push	{r3, lr}
    int rc = json_encode_object_start(&coap_json_encoder);  assert(rc == 0);
 800440a:	4805      	ldr	r0, [pc, #20]	; (8004420 <json_rep_start_root_object+0x18>)
 800440c:	f000 fef6 	bl	80051fc <json_encode_object_start>
 8004410:	b128      	cbz	r0, 800441e <json_rep_start_root_object+0x16>
 8004412:	2300      	movs	r3, #0
 8004414:	461a      	mov	r2, r3
 8004416:	4619      	mov	r1, r3
 8004418:	4618      	mov	r0, r3
 800441a:	f001 fc01 	bl	8005c20 <__assert_func>
}
 800441e:	bd08      	pop	{r3, pc}
 8004420:	20003368 	.word	0x20003368

08004424 <json_rep_end_root_object>:

///  End the JSON representation.  Assume top level is object.
///  ```
///  {... --> {...}
///  ```
void json_rep_end_root_object(void) {
 8004424:	b508      	push	{r3, lr}
    int rc = json_encode_object_finish(&coap_json_encoder);  assert(rc == 0);
 8004426:	4805      	ldr	r0, [pc, #20]	; (800443c <json_rep_end_root_object+0x18>)
 8004428:	f001 f838 	bl	800549c <json_encode_object_finish>
 800442c:	b128      	cbz	r0, 800443a <json_rep_end_root_object+0x16>
 800442e:	2300      	movs	r3, #0
 8004430:	461a      	mov	r2, r3
 8004432:	4619      	mov	r1, r3
 8004434:	4618      	mov	r0, r3
 8004436:	f001 fbf3 	bl	8005c20 <__assert_func>
}
 800443a:	bd08      	pop	{r3, pc}
 800443c:	20003368 	.word	0x20003368

08004440 <get_hardware_id.part.2>:
    int rc = sensor_network_start_transport(i);
    assert(rc == 0);
    return rc;
}

int sensor_network_start_transport(uint8_t iface_type) {
 8004440:	b508      	push	{r3, lr}
        (void *)(uint32_t)iface_type, //  Pass network interface type to above function.
        10,  //  Task priority: highest is 0, lowest is 255.  Main task is 127.
        OS_WAIT_FOREVER,    //  Don't do sanity / watchdog checking.
        (os_stack_t *) network_task_stack,  //  Stack space for the task.
        NETWORK_TASK_STACK_SIZE);           //  Size of the stack (in 4-byte units).
    assert(rc == 0);
 8004442:	2300      	movs	r3, #0
 8004444:	461a      	mov	r2, r3
 8004446:	4619      	mov	r1, r3
 8004448:	4618      	mov	r0, r3
 800444a:	f001 fbe9 	bl	8005c20 <__assert_func>
	...

08004450 <sensor_network_start_transport>:
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 8004450:	2801      	cmp	r0, #1
int sensor_network_start_transport(uint8_t iface_type) {
 8004452:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004454:	4603      	mov	r3, r0
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 8004456:	d905      	bls.n	8004464 <sensor_network_start_transport+0x14>
 8004458:	2300      	movs	r3, #0
 800445a:	461a      	mov	r2, r3
 800445c:	4619      	mov	r1, r3
 800445e:	4618      	mov	r0, r3
 8004460:	f001 fbde 	bl	8005c20 <__assert_func>
    if (iface->transport_registered) { return 0; }  //  Quit if transport already registered and endpoint has been created.
 8004464:	2214      	movs	r2, #20
 8004466:	490d      	ldr	r1, [pc, #52]	; (800449c <sensor_network_start_transport+0x4c>)
 8004468:	fb02 1200 	mla	r2, r2, r0, r1
 800446c:	7c12      	ldrb	r2, [r2, #16]
 800446e:	b98a      	cbnz	r2, 8004494 <sensor_network_start_transport+0x44>
    int rc = os_task_init(  //  Create a new task and start it...
 8004470:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004474:	9203      	str	r2, [sp, #12]
 8004476:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <sensor_network_start_transport+0x50>)
 8004478:	f04f 31ff 	mov.w	r1, #4294967295
 800447c:	9202      	str	r2, [sp, #8]
 800447e:	220a      	movs	r2, #10
 8004480:	4808      	ldr	r0, [pc, #32]	; (80044a4 <sensor_network_start_transport+0x54>)
 8004482:	e9cd 2100 	strd	r2, r1, [sp]
 8004486:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <sensor_network_start_transport+0x58>)
 8004488:	4908      	ldr	r1, [pc, #32]	; (80044ac <sensor_network_start_transport+0x5c>)
 800448a:	f002 fcef 	bl	8006e6c <os_task_init>
    assert(rc == 0);
 800448e:	b108      	cbz	r0, 8004494 <sensor_network_start_transport+0x44>
 8004490:	f7ff ffd6 	bl	8004440 <get_hardware_id.part.2>
    return rc;
}
 8004494:	2000      	movs	r0, #0
 8004496:	b005      	add	sp, #20
 8004498:	f85d fb04 	ldr.w	pc, [sp], #4
 800449c:	200007ec 	.word	0x200007ec
 80044a0:	200003cc 	.word	0x200003cc
 80044a4:	2000037c 	.word	0x2000037c
 80044a8:	08004541 	.word	0x08004541
 80044ac:	0800e034 	.word	0x0800e034

080044b0 <start_server_transport>:
int start_server_transport(void) {
 80044b0:	b508      	push	{r3, lr}
    int rc = sensor_network_start_transport(i);
 80044b2:	2000      	movs	r0, #0
 80044b4:	f7ff ffcc 	bl	8004450 <sensor_network_start_transport>
    assert(rc == 0);
 80044b8:	b128      	cbz	r0, 80044c6 <start_server_transport+0x16>
 80044ba:	2300      	movs	r3, #0
 80044bc:	461a      	mov	r2, r3
 80044be:	4619      	mov	r1, r3
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fbad 	bl	8005c20 <__assert_func>
}
 80044c6:	bd08      	pop	{r3, pc}

080044c8 <sensor_network_register_transport>:
}

int sensor_network_register_transport(uint8_t iface_type) {
    //  Register the Network Interface as the network transport for CoAP Server or CoAP Collector.
    //  Return 0 if successful.
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 80044c8:	2801      	cmp	r0, #1
int sensor_network_register_transport(uint8_t iface_type) {
 80044ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 80044cc:	d905      	bls.n	80044da <sensor_network_register_transport+0x12>
 80044ce:	2300      	movs	r3, #0
 80044d0:	461a      	mov	r2, r3
 80044d2:	4619      	mov	r1, r3
 80044d4:	4618      	mov	r0, r3
 80044d6:	f001 fba3 	bl	8005c20 <__assert_func>
    struct sensor_network_interface *iface = &sensor_network_interfaces[iface_type];
    if (iface->transport_registered) { return 0; }  //  Quit if transport already registered and endpoint has been created.
 80044da:	2414      	movs	r4, #20
 80044dc:	4b12      	ldr	r3, [pc, #72]	; (8004528 <sensor_network_register_transport+0x60>)
 80044de:	fb04 3400 	mla	r4, r4, r0, r3
 80044e2:	7c23      	ldrb	r3, [r4, #16]
 80044e4:	b9eb      	cbnz	r3, 8004522 <sensor_network_register_transport+0x5a>

    void *endpoint = &sensor_network_endpoints[iface_type];
 80044e6:	4e11      	ldr	r6, [pc, #68]	; (800452c <sensor_network_register_transport+0x64>)
    //  If endpoint has not been created, register the transport for the interface and create the endpoint.
    assert(iface->network_device);  assert(iface->register_transport_func);
 80044e8:	6865      	ldr	r5, [r4, #4]
    void *endpoint = &sensor_network_endpoints[iface_type];
 80044ea:	eb06 1600 	add.w	r6, r6, r0, lsl #4
    assert(iface->network_device);  assert(iface->register_transport_func);
 80044ee:	2d00      	cmp	r5, #0
 80044f0:	d0ed      	beq.n	80044ce <sensor_network_register_transport+0x6>
 80044f2:	68e3      	ldr	r3, [r4, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ea      	beq.n	80044ce <sensor_network_register_transport+0x6>
    const char *network_device = iface->network_device;
    console_printf("%s%s %s\n", _net, sensor_network_shortname[iface_type], network_device);
 80044f8:	4a0d      	ldr	r2, [pc, #52]	; (8004530 <sensor_network_register_transport+0x68>)
 80044fa:	462b      	mov	r3, r5
 80044fc:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8004500:	490c      	ldr	r1, [pc, #48]	; (8004534 <sensor_network_register_transport+0x6c>)
 8004502:	480d      	ldr	r0, [pc, #52]	; (8004538 <sensor_network_register_transport+0x70>)
 8004504:	f7ff fdd8 	bl	80040b8 <console_printf>

    //  TODO: Host and port are not needed for Collector.
    int rc = iface->register_transport_func(network_device, endpoint, COAP_HOST, MYNEWT_VAL(COAP_PORT), MAX_ENDPOINT_SIZE);
 8004508:	2310      	movs	r3, #16
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	68e7      	ldr	r7, [r4, #12]
 800450e:	f241 6333 	movw	r3, #5683	; 0x1633
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <sensor_network_register_transport+0x74>)
 8004514:	4631      	mov	r1, r6
 8004516:	4628      	mov	r0, r5
 8004518:	47b8      	blx	r7
    assert(rc == 0);
 800451a:	2800      	cmp	r0, #0
 800451c:	d1d7      	bne.n	80044ce <sensor_network_register_transport+0x6>
    iface->transport_registered = 1;
 800451e:	2301      	movs	r3, #1
 8004520:	7423      	strb	r3, [r4, #16]
    return rc;
}
 8004522:	2000      	movs	r0, #0
 8004524:	b003      	add	sp, #12
 8004526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004528:	200007ec 	.word	0x200007ec
 800452c:	200007cc 	.word	0x200007cc
 8004530:	0800e02c 	.word	0x0800e02c
 8004534:	0800e01c 	.word	0x0800e01c
 8004538:	0800e021 	.word	0x0800e021
 800453c:	0800def1 	.word	0x0800def1

08004540 <network_task_func>:
static void network_task_func(void *arg) {
 8004540:	b510      	push	{r4, lr}
 8004542:	4604      	mov	r4, r0
    console_printf("NET start\n");
 8004544:	480c      	ldr	r0, [pc, #48]	; (8004578 <network_task_func+0x38>)
 8004546:	f7ff fdb7 	bl	80040b8 <console_printf>
    rc = sensor_network_register_transport(iface_type);  assert(rc == 0);
 800454a:	b2e0      	uxtb	r0, r4
 800454c:	f7ff ffbc 	bl	80044c8 <sensor_network_register_transport>
 8004550:	b958      	cbnz	r0, 800456a <network_task_func+0x2a>
        console_printf("NET free mbuf %d\n", os_msys_num_free());  //  Display number of free mbufs, to catch CoAP memory leaks.
 8004552:	4c0a      	ldr	r4, [pc, #40]	; (800457c <network_task_func+0x3c>)
 8004554:	f002 f97c 	bl	8006850 <os_msys_num_free>
 8004558:	4601      	mov	r1, r0
 800455a:	4620      	mov	r0, r4
 800455c:	f7ff fdac 	bl	80040b8 <console_printf>
        os_time_delay(10 * OS_TICKS_PER_SEC);                      //  Wait 10 seconds before repeating.
 8004560:	f242 7010 	movw	r0, #10000	; 0x2710
 8004564:	f002 fd5c 	bl	8007020 <os_time_delay>
 8004568:	e7f4      	b.n	8004554 <network_task_func+0x14>
    rc = sensor_network_register_transport(iface_type);  assert(rc == 0);
 800456a:	2300      	movs	r3, #0
 800456c:	461a      	mov	r2, r3
 800456e:	4619      	mov	r1, r3
 8004570:	4618      	mov	r0, r3
 8004572:	f001 fb55 	bl	8005c20 <__assert_func>
 8004576:	bf00      	nop
 8004578:	0800dfa2 	.word	0x0800dfa2
 800457c:	0800dfad 	.word	0x0800dfad

08004580 <sensor_network_init_post>:

//  Interface type and URI of the CoAP message being composed.
static uint8_t current_iface_type = 0xff;
static const char *current_uri = NULL;

bool sensor_network_init_post(uint8_t iface_type, const char *uri) {
 8004580:	b510      	push	{r4, lr}
    //  Start composing the CoAP Server or Collector message with the sensor data in the payload.  This will 
    //  block other tasks from composing and posting CoAP messages (through a semaphore).
    //  We only have 1 memory buffer for composing CoAP messages so it needs to be locked.
    //  Return true if successful, false if network has not been registered.
    if (uri == NULL || uri[0] == 0) { uri = COAP_URI; }
 8004582:	b331      	cbz	r1, 80045d2 <sensor_network_init_post+0x52>
 8004584:	780a      	ldrb	r2, [r1, #0]
 8004586:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <sensor_network_init_post+0x58>)
 8004588:	2a00      	cmp	r2, #0
 800458a:	bf08      	it	eq
 800458c:	4619      	moveq	r1, r3
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800458e:	2801      	cmp	r0, #1
 8004590:	d819      	bhi.n	80045c6 <sensor_network_init_post+0x46>
    struct sensor_network_interface *iface = &sensor_network_interfaces[iface_type];
    void *endpoint = &sensor_network_endpoints[iface_type];
    assert(iface->network_device);  assert(iface->register_transport_func);  assert(endpoint);
 8004592:	2314      	movs	r3, #20
 8004594:	4a11      	ldr	r2, [pc, #68]	; (80045dc <sensor_network_init_post+0x5c>)
 8004596:	fb03 2300 	mla	r3, r3, r0, r2
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	b19a      	cbz	r2, 80045c6 <sensor_network_init_post+0x46>
 800459e:	68da      	ldr	r2, [r3, #12]
 80045a0:	b18a      	cbz	r2, 80045c6 <sensor_network_init_post+0x46>
    if (!iface->transport_registered) {
 80045a2:	7c1c      	ldrb	r4, [r3, #16]
 80045a4:	b924      	cbnz	r4, 80045b0 <sensor_network_init_post+0x30>
        //  If transport has not been registered, wait for the transport to be registered.
        console_printf("NET network not ready\n");
 80045a6:	480e      	ldr	r0, [pc, #56]	; (80045e0 <sensor_network_init_post+0x60>)
 80045a8:	f7ff fd86 	bl	80040b8 <console_printf>
        return false;
 80045ac:	4620      	mov	r0, r4
    current_iface_type = iface_type;
    current_uri = uri;
    bool status = init_sensor_post(endpoint);
    assert(status);
    return status;
}
 80045ae:	bd10      	pop	{r4, pc}
    current_iface_type = iface_type;
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <sensor_network_init_post+0x64>)
 80045b2:	7018      	strb	r0, [r3, #0]
    current_uri = uri;
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <sensor_network_init_post+0x68>)
 80045b6:	6019      	str	r1, [r3, #0]
    bool status = init_sensor_post(endpoint);
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <sensor_network_init_post+0x6c>)
 80045ba:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80045be:	f7ff fde5 	bl	800418c <init_sensor_post>
    assert(status);
 80045c2:	2800      	cmp	r0, #0
 80045c4:	d1f3      	bne.n	80045ae <sensor_network_init_post+0x2e>
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 80045c6:	2300      	movs	r3, #0
 80045c8:	461a      	mov	r2, r3
 80045ca:	4619      	mov	r1, r3
 80045cc:	4618      	mov	r0, r3
 80045ce:	f001 fb27 	bl	8005c20 <__assert_func>
    if (uri == NULL || uri[0] == 0) { uri = COAP_URI; }
 80045d2:	4901      	ldr	r1, [pc, #4]	; (80045d8 <sensor_network_init_post+0x58>)
 80045d4:	e7db      	b.n	800458e <sensor_network_init_post+0xe>
 80045d6:	bf00      	nop
 80045d8:	0800df00 	.word	0x0800df00
 80045dc:	200007ec 	.word	0x200007ec
 80045e0:	0800e005 	.word	0x0800e005
 80045e4:	20000169 	.word	0x20000169
 80045e8:	20000334 	.word	0x20000334
 80045ec:	200007cc 	.word	0x200007cc

080045f0 <init_server_post>:
    bool status = sensor_network_init_post(i, uri);
 80045f0:	4601      	mov	r1, r0
 80045f2:	2000      	movs	r0, #0
 80045f4:	f7ff bfc4 	b.w	8004580 <sensor_network_init_post>

080045f8 <sensor_network_prepare_post>:

bool sensor_network_prepare_post(int encoding) {
 80045f8:	b508      	push	{r3, lr}
    //  Set the encoding format for the CoAP message: APPLICATION_JSON or APPLICATION_CBOR.  If set to 0, use the default encoding format.
    //  Return true if successful.
    uint8_t iface_type = current_iface_type;
 80045fa:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <sensor_network_prepare_post+0x40>)
bool sensor_network_prepare_post(int encoding) {
 80045fc:	4602      	mov	r2, r0
    uint8_t iface_type = current_iface_type;
 80045fe:	7818      	ldrb	r0, [r3, #0]
    const char *uri = current_uri;
 8004600:	4b0e      	ldr	r3, [pc, #56]	; (800463c <sensor_network_prepare_post+0x44>)
 8004602:	6819      	ldr	r1, [r3, #0]
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 8004604:	b929      	cbnz	r1, 8004612 <sensor_network_prepare_post+0x1a>
 8004606:	2300      	movs	r3, #0
 8004608:	461a      	mov	r2, r3
 800460a:	4619      	mov	r1, r3
 800460c:	4618      	mov	r0, r3
 800460e:	f001 fb07 	bl	8005c20 <__assert_func>
 8004612:	2801      	cmp	r0, #1
 8004614:	d8f7      	bhi.n	8004606 <sensor_network_prepare_post+0xe>
    void *endpoint = &sensor_network_endpoints[iface_type];
    assert(endpoint);

    //  Use the specified encoding. If not specified, select the default encoding for the interface type.
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
 8004616:	2a00      	cmp	r2, #0
    void *endpoint = &sensor_network_endpoints[iface_type];
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <sensor_network_prepare_post+0x48>)
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
 800461a:	bfd8      	it	le
 800461c:	4a09      	ldrle	r2, [pc, #36]	; (8004644 <sensor_network_prepare_post+0x4c>)
    void *endpoint = &sensor_network_endpoints[iface_type];
 800461e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
 8004622:	bfd8      	it	le
 8004624:	f852 2020 	ldrle.w	r2, [r2, r0, lsl #2]
    bool status = prepare_sensor_post(endpoint, uri, enc);
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff fdf9 	bl	8004220 <prepare_sensor_post>
    assert(status);
 800462e:	2800      	cmp	r0, #0
 8004630:	d0e9      	beq.n	8004606 <sensor_network_prepare_post+0xe>
    return status;
}
 8004632:	2001      	movs	r0, #1
 8004634:	bd08      	pop	{r3, pc}
 8004636:	bf00      	nop
 8004638:	20000169 	.word	0x20000169
 800463c:	20000334 	.word	0x20000334
 8004640:	200007cc 	.word	0x200007cc
 8004644:	0800dfc0 	.word	0x0800dfc0

08004648 <sensor_network_do_post>:

bool sensor_network_do_post(uint8_t iface_type) {
    //  Post the CoAP Server or Collector message to the CoAP Background Task for transmission.  After posting the
    //  message to the background task, we release a semaphore that unblocks other requests
    //  to compose and post CoAP messages.
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 8004648:	2801      	cmp	r0, #1
bool sensor_network_do_post(uint8_t iface_type) {
 800464a:	b508      	push	{r3, lr}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800464c:	d901      	bls.n	8004652 <sensor_network_do_post+0xa>
 800464e:	f7ff fef7 	bl	8004440 <get_hardware_id.part.2>
    bool status = do_sensor_post();
 8004652:	f7ff fe8d 	bl	8004370 <do_sensor_post>
    assert(status);
 8004656:	4603      	mov	r3, r0
 8004658:	b918      	cbnz	r0, 8004662 <sensor_network_do_post+0x1a>
 800465a:	4602      	mov	r2, r0
 800465c:	4601      	mov	r1, r0
 800465e:	f001 fadf 	bl	8005c20 <__assert_func>
    return status;
}
 8004662:	2001      	movs	r0, #1
 8004664:	bd08      	pop	{r3, pc}

08004666 <do_server_post>:
bool do_server_post(void) {    
 8004666:	b508      	push	{r3, lr}
    bool status = sensor_network_do_post(i);
 8004668:	2000      	movs	r0, #0
 800466a:	f7ff ffed 	bl	8004648 <sensor_network_do_post>
    assert(status);
 800466e:	4603      	mov	r3, r0
 8004670:	b918      	cbnz	r0, 800467a <do_server_post+0x14>
 8004672:	4602      	mov	r2, r0
 8004674:	4601      	mov	r1, r0
 8004676:	f001 fad3 	bl	8005c20 <__assert_func>
}
 800467a:	2001      	movs	r0, #1
 800467c:	bd08      	pop	{r3, pc}
	...

08004680 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
 8004680:	4b03      	ldr	r3, [pc, #12]	; (8004690 <is_sensor_node+0x10>)
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	4313      	orrs	r3, r2
    return false;
}
 8004688:	bf14      	ite	ne
 800468a:	2001      	movne	r0, #1
 800468c:	2000      	moveq	r0, #0
 800468e:	4770      	bx	lr
 8004690:	20000818 	.word	0x20000818

08004694 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
 8004694:	b538      	push	{r3, r4, r5, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
 8004696:	4c12      	ldr	r4, [pc, #72]	; (80046e0 <get_hardware_id+0x4c>)
 8004698:	6825      	ldr	r5, [r4, #0]
 800469a:	b9f5      	cbnz	r5, 80046da <get_hardware_id+0x46>
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 800469c:	f000 ff4b 	bl	8005536 <hal_bsp_hw_id_len>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 80046a0:	280b      	cmp	r0, #11
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 80046a2:	6020      	str	r0, [r4, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 80046a4:	d801      	bhi.n	80046aa <get_hardware_id+0x16>
 80046a6:	f7ff fecb 	bl	8004440 <get_hardware_id.part.2>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 80046aa:	210c      	movs	r1, #12
 80046ac:	480d      	ldr	r0, [pc, #52]	; (80046e4 <get_hardware_id+0x50>)
 80046ae:	f000 ff45 	bl	800553c <hal_bsp_hw_id>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	6020      	str	r0, [r4, #0]
 80046b6:	dc05      	bgt.n	80046c4 <get_hardware_id+0x30>
 80046b8:	462b      	mov	r3, r5
 80046ba:	462a      	mov	r2, r5
 80046bc:	4629      	mov	r1, r5
 80046be:	4628      	mov	r0, r5
 80046c0:	f001 faae 	bl	8005c20 <__assert_func>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
 80046c4:	4908      	ldr	r1, [pc, #32]	; (80046e8 <get_hardware_id+0x54>)
 80046c6:	4809      	ldr	r0, [pc, #36]	; (80046ec <get_hardware_id+0x58>)
 80046c8:	f7ff fcf6 	bl	80040b8 <console_printf>
 80046cc:	4805      	ldr	r0, [pc, #20]	; (80046e4 <get_hardware_id+0x50>)
 80046ce:	6821      	ldr	r1, [r4, #0]
 80046d0:	f7ff fc8a 	bl	8003fe8 <console_dump>
 80046d4:	4806      	ldr	r0, [pc, #24]	; (80046f0 <get_hardware_id+0x5c>)
 80046d6:	f7ff fcef 	bl	80040b8 <console_printf>
    }
    return hw_id;
}
 80046da:	4802      	ldr	r0, [pc, #8]	; (80046e4 <get_hardware_id+0x50>)
 80046dc:	bd38      	pop	{r3, r4, r5, pc}
 80046de:	bf00      	nop
 80046e0:	20000378 	.word	0x20000378
 80046e4:	20000369 	.word	0x20000369
 80046e8:	0800e01c 	.word	0x0800e01c
 80046ec:	0800df9a 	.word	0x0800df9a
 80046f0:	0800e6ec 	.word	0x0800e6ec

080046f4 <is_collector_node>:
bool is_collector_node(void) {
 80046f4:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
 80046f6:	f7ff ffcd 	bl	8004694 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
 80046fa:	220c      	movs	r2, #12
 80046fc:	4903      	ldr	r1, [pc, #12]	; (800470c <is_collector_node+0x18>)
 80046fe:	f002 fdef 	bl	80072e0 <memcmp>
}
 8004702:	fab0 f080 	clz	r0, r0
 8004706:	0940      	lsrs	r0, r0, #5
 8004708:	bd08      	pop	{r3, pc}
 800470a:	bf00      	nop
 800470c:	0800df36 	.word	0x0800df36

08004710 <is_standalone_node>:
bool is_standalone_node(void) {
 8004710:	b508      	push	{r3, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
 8004712:	f7ff ffef 	bl	80046f4 <is_collector_node>
 8004716:	b928      	cbnz	r0, 8004724 <is_standalone_node+0x14>
 8004718:	f7ff ffb2 	bl	8004680 <is_sensor_node>
 800471c:	f080 0001 	eor.w	r0, r0, #1
 8004720:	b2c0      	uxtb	r0, r0
}
 8004722:	bd08      	pop	{r3, pc}
    return false;
 8004724:	2000      	movs	r0, #0
 8004726:	e7fc      	b.n	8004722 <is_standalone_node+0x12>

08004728 <get_device_id>:

const char *get_device_id(void) {
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  Get the randomly-generated Device ID that will be sent in every CoAP Server message.  Changes upon restart.
    if (device_id_text[0]) { return device_id_text; }
 800472a:	4d12      	ldr	r5, [pc, #72]	; (8004774 <get_device_id+0x4c>)
 800472c:	782e      	ldrb	r6, [r5, #0]
 800472e:	b9c6      	cbnz	r6, 8004762 <get_device_id+0x3a>
#if MYNEWT_VAL(HMAC_PRNG)
    //  Create a random device ID based on HMAC pseudorandom number generator e.g. 0xab 0xcd 0xef ...
    int rc = hmac_prng_generate(device_id, DEVICE_ID_LENGTH);  assert(rc == 0);
 8004730:	2110      	movs	r1, #16
 8004732:	4811      	ldr	r0, [pc, #68]	; (8004778 <get_device_id+0x50>)
 8004734:	f003 f952 	bl	80079dc <hmac_prng_generate>
 8004738:	4604      	mov	r4, r0
 800473a:	b9a0      	cbnz	r0, 8004766 <get_device_id+0x3e>
#endif  //  MYNEWT_VAL(HMAC_PRNG)
    char *s = device_id_text; int i;
    //  Convert to text e.g. abcdef...
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
        sprintf(s, "%02x", device_id[i]);
 800473c:	4f0e      	ldr	r7, [pc, #56]	; (8004778 <get_device_id+0x50>)
 800473e:	4e0f      	ldr	r6, [pc, #60]	; (800477c <get_device_id+0x54>)
 8004740:	5d3a      	ldrb	r2, [r7, r4]
 8004742:	eb05 0044 	add.w	r0, r5, r4, lsl #1
 8004746:	4631      	mov	r1, r6
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
 8004748:	3401      	adds	r4, #1
        sprintf(s, "%02x", device_id[i]);
 800474a:	f002 fe02 	bl	8007352 <sprintf>
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
 800474e:	2c10      	cmp	r4, #16
 8004750:	d1f6      	bne.n	8004740 <get_device_id+0x18>
        s += 2;
    }
    device_id_text[DEVICE_ID_TEXT_LENGTH - 1] = 0;
 8004752:	2300      	movs	r3, #0
    console_printf("%srandom device id %s\n", _net, device_id_text);
 8004754:	4a07      	ldr	r2, [pc, #28]	; (8004774 <get_device_id+0x4c>)
 8004756:	490a      	ldr	r1, [pc, #40]	; (8004780 <get_device_id+0x58>)
 8004758:	480a      	ldr	r0, [pc, #40]	; (8004784 <get_device_id+0x5c>)
    device_id_text[DEVICE_ID_TEXT_LENGTH - 1] = 0;
 800475a:	f885 3020 	strb.w	r3, [r5, #32]
    console_printf("%srandom device id %s\n", _net, device_id_text);
 800475e:	f7ff fcab 	bl	80040b8 <console_printf>
    return device_id_text;
}
 8004762:	4804      	ldr	r0, [pc, #16]	; (8004774 <get_device_id+0x4c>)
 8004764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int rc = hmac_prng_generate(device_id, DEVICE_ID_LENGTH);  assert(rc == 0);
 8004766:	4633      	mov	r3, r6
 8004768:	4632      	mov	r2, r6
 800476a:	4631      	mov	r1, r6
 800476c:	4630      	mov	r0, r6
 800476e:	f001 fa57 	bl	8005c20 <__assert_func>
 8004772:	bf00      	nop
 8004774:	20000348 	.word	0x20000348
 8004778:	20000338 	.word	0x20000338
 800477c:	0800df7e 	.word	0x0800df7e
 8004780:	0800e01c 	.word	0x0800e01c
 8004784:	0800df83 	.word	0x0800df83

08004788 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
 8004788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 800478a:	2400      	movs	r4, #0
 800478c:	4d22      	ldr	r5, [pc, #136]	; (8004818 <sensor_network_init+0x90>)
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
 800478e:	4e23      	ldr	r6, [pc, #140]	; (800481c <sensor_network_init+0x94>)
 8004790:	4f23      	ldr	r7, [pc, #140]	; (8004820 <sensor_network_init+0x98>)
 8004792:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8004796:	4639      	mov	r1, r7
 8004798:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800479c:	f002 fdd9 	bl	8007352 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
 80047a0:	280a      	cmp	r0, #10
 80047a2:	d005      	beq.n	80047b0 <sensor_network_init+0x28>
 80047a4:	2300      	movs	r3, #0
 80047a6:	461a      	mov	r2, r3
 80047a8:	4619      	mov	r1, r3
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 fa38 	bl	8005c20 <__assert_func>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 80047b0:	3401      	adds	r4, #1
 80047b2:	2c05      	cmp	r4, #5
 80047b4:	d1ed      	bne.n	8004792 <sensor_network_init+0xa>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
 80047b6:	f7ff ff6d 	bl	8004694 <get_hardware_id>
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 80047ba:	2400      	movs	r4, #0
    const uint8_t *hardware_id = get_hardware_id();
 80047bc:	4605      	mov	r5, r0
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
 80047be:	260c      	movs	r6, #12
 80047c0:	4f18      	ldr	r7, [pc, #96]	; (8004824 <sensor_network_init+0x9c>)
 80047c2:	220c      	movs	r2, #12
 80047c4:	fb06 7104 	mla	r1, r6, r4, r7
 80047c8:	4628      	mov	r0, r5
 80047ca:	f002 fd89 	bl	80072e0 <memcmp>
 80047ce:	1c63      	adds	r3, r4, #1
 80047d0:	b9b0      	cbnz	r0, 8004800 <sensor_network_init+0x78>
            sensor_node_address = sensor_node_addresses[i];
 80047d2:	4a15      	ldr	r2, [pc, #84]	; (8004828 <sensor_network_init+0xa0>)
 80047d4:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 80047d8:	4a14      	ldr	r2, [pc, #80]	; (800482c <sensor_network_init+0xa4>)
 80047da:	e9d4 0100 	ldrd	r0, r1, [r4]
 80047de:	e9c2 0100 	strd	r0, r1, [r2]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
 80047e2:	4a13      	ldr	r2, [pc, #76]	; (8004830 <sensor_network_init+0xa8>)
 80047e4:	4913      	ldr	r1, [pc, #76]	; (8004834 <sensor_network_init+0xac>)
 80047e6:	4814      	ldr	r0, [pc, #80]	; (8004838 <sensor_network_init+0xb0>)
 80047e8:	f7ff fc66 	bl	80040b8 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
 80047ec:	f7ff ff82 	bl	80046f4 <is_collector_node>
 80047f0:	b150      	cbz	r0, 8004808 <sensor_network_init+0x80>
 80047f2:	4a0f      	ldr	r2, [pc, #60]	; (8004830 <sensor_network_init+0xa8>)
 80047f4:	490f      	ldr	r1, [pc, #60]	; (8004834 <sensor_network_init+0xac>)
 80047f6:	4811      	ldr	r0, [pc, #68]	; (800483c <sensor_network_init+0xb4>)
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
}
 80047f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
 80047fc:	f7ff bc5c 	b.w	80040b8 <console_printf>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 8004800:	2b05      	cmp	r3, #5
 8004802:	461c      	mov	r4, r3
 8004804:	d1dd      	bne.n	80047c2 <sensor_network_init+0x3a>
 8004806:	e7f1      	b.n	80047ec <sensor_network_init+0x64>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
 8004808:	f7ff ff82 	bl	8004710 <is_standalone_node>
 800480c:	b118      	cbz	r0, 8004816 <sensor_network_init+0x8e>
 800480e:	4a08      	ldr	r2, [pc, #32]	; (8004830 <sensor_network_init+0xa8>)
 8004810:	4908      	ldr	r1, [pc, #32]	; (8004834 <sensor_network_init+0xac>)
 8004812:	480b      	ldr	r0, [pc, #44]	; (8004840 <sensor_network_init+0xb8>)
 8004814:	e7f0      	b.n	80047f8 <sensor_network_init+0x70>
}
 8004816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004818:	0800e038 	.word	0x0800e038
 800481c:	2000016c 	.word	0x2000016c
 8004820:	0800dfc8 	.word	0x0800dfc8
 8004824:	0800df42 	.word	0x0800df42
 8004828:	0800e040 	.word	0x0800e040
 800482c:	20000818 	.word	0x20000818
 8004830:	0800dfd0 	.word	0x0800dfd0
 8004834:	0800e01c 	.word	0x0800e01c
 8004838:	0800dfd7 	.word	0x0800dfd7
 800483c:	0800dfe6 	.word	0x0800dfe6
 8004840:	0800dff5 	.word	0x0800dff5

08004844 <sensor_network_register_interface>:

int sensor_network_register_interface(const struct sensor_network_interface *iface) {
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  Register the Network Interface (e.g. BC95-G, ESP8266, nRF24L01) for the Sensor Network.
    assert(iface);
 8004846:	b928      	cbnz	r0, 8004854 <sensor_network_register_interface+0x10>
 8004848:	2300      	movs	r3, #0
 800484a:	461a      	mov	r2, r3
 800484c:	4619      	mov	r1, r3
 800484e:	4618      	mov	r0, r3
 8004850:	f001 f9e6 	bl	8005c20 <__assert_func>
    uint8_t i = iface->iface_type;  assert(i >= 0 && i < MAX_INTERFACE_TYPES);
 8004854:	7804      	ldrb	r4, [r0, #0]
 8004856:	2c01      	cmp	r4, #1
 8004858:	d8f6      	bhi.n	8004848 <sensor_network_register_interface+0x4>
    assert(iface->network_device);  assert(iface->server_endpoint_size);  assert(iface->register_transport_func);
 800485a:	6843      	ldr	r3, [r0, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f3      	beq.n	8004848 <sensor_network_register_interface+0x4>
 8004860:	7a03      	ldrb	r3, [r0, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <sensor_network_register_interface+0x4>
 8004866:	68c2      	ldr	r2, [r0, #12]
 8004868:	2a00      	cmp	r2, #0
 800486a:	d0ed      	beq.n	8004848 <sensor_network_register_interface+0x4>
    assert(iface->server_endpoint_size <= MAX_ENDPOINT_SIZE);     //  Need to increase MAX_ENDPOINT_SIZE.
 800486c:	2b10      	cmp	r3, #16
 800486e:	d8eb      	bhi.n	8004848 <sensor_network_register_interface+0x4>
    assert(sensor_network_interfaces[i].network_device == NULL);  //  Interface already registered.
 8004870:	2214      	movs	r2, #20
 8004872:	4d11      	ldr	r5, [pc, #68]	; (80048b8 <sensor_network_register_interface+0x74>)
 8004874:	fb02 5204 	mla	r2, r2, r4, r5
 8004878:	6851      	ldr	r1, [r2, #4]
 800487a:	2900      	cmp	r1, #0
 800487c:	d1e4      	bne.n	8004848 <sensor_network_register_interface+0x4>
    memcpy(&sensor_network_interfaces[i], iface, sizeof(struct sensor_network_interface));  //  Copy the interface.
 800487e:	4603      	mov	r3, r0
 8004880:	f100 0710 	add.w	r7, r0, #16
 8004884:	4616      	mov	r6, r2
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	6859      	ldr	r1, [r3, #4]
 800488a:	3308      	adds	r3, #8
 800488c:	c603      	stmia	r6!, {r0, r1}
 800488e:	42bb      	cmp	r3, r7
 8004890:	4632      	mov	r2, r6
 8004892:	d1f7      	bne.n	8004884 <sensor_network_register_interface+0x40>
 8004894:	6818      	ldr	r0, [r3, #0]
    sensor_network_interfaces[i].transport_registered = 0;        //  We defer the registration of the transport till first use.
 8004896:	2314      	movs	r3, #20
 8004898:	fb03 5304 	mla	r3, r3, r4, r5
 800489c:	2500      	movs	r5, #0
    console_printf("%s%s %s\n", _net, sensor_network_shortname[i], sensor_network_interfaces[i].network_device);
 800489e:	4a07      	ldr	r2, [pc, #28]	; (80048bc <sensor_network_register_interface+0x78>)
    memcpy(&sensor_network_interfaces[i], iface, sizeof(struct sensor_network_interface));  //  Copy the interface.
 80048a0:	6030      	str	r0, [r6, #0]
    console_printf("%s%s %s\n", _net, sensor_network_shortname[i], sensor_network_interfaces[i].network_device);
 80048a2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
    sensor_network_interfaces[i].transport_registered = 0;        //  We defer the registration of the transport till first use.
 80048a6:	741d      	strb	r5, [r3, #16]
    console_printf("%s%s %s\n", _net, sensor_network_shortname[i], sensor_network_interfaces[i].network_device);
 80048a8:	4905      	ldr	r1, [pc, #20]	; (80048c0 <sensor_network_register_interface+0x7c>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4805      	ldr	r0, [pc, #20]	; (80048c4 <sensor_network_register_interface+0x80>)
 80048ae:	f7ff fc03 	bl	80040b8 <console_printf>
    return 0;
}
 80048b2:	4628      	mov	r0, r5
 80048b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b6:	bf00      	nop
 80048b8:	200007ec 	.word	0x200007ec
 80048bc:	0800e02c 	.word	0x0800e02c
 80048c0:	0800e01c 	.word	0x0800e01c
 80048c4:	0800e021 	.word	0x0800e021

080048c8 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
 80048c8:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
 80048ca:	2500      	movs	r5, #0
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
 80048cc:	4c08      	ldr	r4, [pc, #32]	; (80048f0 <oc_buffer_tx+0x28>)
 80048ce:	4620      	mov	r0, r4
 80048d0:	f001 fd44 	bl	800635c <os_mqueue_get>
 80048d4:	4603      	mov	r3, r0
 80048d6:	b900      	cbnz	r0, 80048da <oc_buffer_tx+0x12>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
 80048d8:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
 80048da:	615d      	str	r5, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
 80048dc:	7e1b      	ldrb	r3, [r3, #24]
 80048de:	071b      	lsls	r3, r3, #28
 80048e0:	d502      	bpl.n	80048e8 <oc_buffer_tx+0x20>
            oc_send_multicast_message(m);
 80048e2:	f000 fc0b 	bl	80050fc <oc_send_multicast_message>
 80048e6:	e7f2      	b.n	80048ce <oc_buffer_tx+0x6>
                oc_send_buffer(m);
 80048e8:	f000 fbfa 	bl	80050e0 <oc_send_buffer>
 80048ec:	e7ef      	b.n	80048ce <oc_buffer_tx+0x6>
 80048ee:	bf00      	nop
 80048f0:	20000870 	.word	0x20000870

080048f4 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
 80048f4:	b513      	push	{r0, r1, r4, lr}
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
 80048f6:	4c08      	ldr	r4, [pc, #32]	; (8004918 <oc_buffer_rx+0x24>)
 80048f8:	4620      	mov	r0, r4
 80048fa:	f001 fd2f 	bl	800635c <os_mqueue_get>
 80048fe:	9001      	str	r0, [sp, #4]
 8004900:	b908      	cbnz	r0, 8004906 <oc_buffer_rx+0x12>
#endif
        if (m) {
            os_mbuf_free_chain(m);
        }
    }
}
 8004902:	b002      	add	sp, #8
 8004904:	bd10      	pop	{r4, pc}
        coap_receive(&m);
 8004906:	a801      	add	r0, sp, #4
 8004908:	f000 fc6c 	bl	80051e4 <__wrap_coap_receive>
        if (m) {
 800490c:	9801      	ldr	r0, [sp, #4]
 800490e:	2800      	cmp	r0, #0
 8004910:	d0f2      	beq.n	80048f8 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
 8004912:	f001 fd8e 	bl	8006432 <os_mbuf_free_chain>
 8004916:	e7ef      	b.n	80048f8 <oc_buffer_rx+0x4>
 8004918:	20000858 	.word	0x20000858

0800491c <oc_allocate_mbuf>:
};

static inline int
oc_endpoint_size(struct oc_endpoint *oe)
{
    assert(oc_transports[oe->ep.oe_type]);
 800491c:	7803      	ldrb	r3, [r0, #0]
 800491e:	4a0e      	ldr	r2, [pc, #56]	; (8004958 <oc_allocate_mbuf+0x3c>)
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
{
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	4605      	mov	r5, r0
 800492c:	b923      	cbnz	r3, 8004938 <oc_allocate_mbuf+0x1c>
 800492e:	461a      	mov	r2, r3
 8004930:	4619      	mov	r1, r3
 8004932:	4618      	mov	r0, r3
 8004934:	f001 f974 	bl	8005c20 <__assert_func>
    return oc_transports[oe->ep.oe_type]->ot_ep_size(oe);
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4798      	blx	r3
    m = os_msys_get_pkthdr(0, ep_size);
 800493c:	b281      	uxth	r1, r0
 800493e:	4606      	mov	r6, r0
 8004940:	2000      	movs	r0, #0
 8004942:	f001 ff77 	bl	8006834 <os_msys_get_pkthdr>
    if (!m) {
 8004946:	4604      	mov	r4, r0
 8004948:	b120      	cbz	r0, 8004954 <oc_allocate_mbuf+0x38>
    memcpy(OC_MBUF_ENDPOINT(m), oe, ep_size);
 800494a:	4632      	mov	r2, r6
 800494c:	4629      	mov	r1, r5
 800494e:	3018      	adds	r0, #24
 8004950:	f002 fcea 	bl	8007328 <memcpy>
}
 8004954:	4620      	mov	r0, r4
 8004956:	bd70      	pop	{r4, r5, r6, pc}
 8004958:	20003408 	.word	0x20003408

0800495c <oc_send_message>:
{
 800495c:	b510      	push	{r4, lr}
 800495e:	4604      	mov	r4, r0
    rc = os_mqueue_put(&oc_outq, oc_evq_get(), m);
 8004960:	f000 fb9e 	bl	80050a0 <oc_evq_get>
 8004964:	4622      	mov	r2, r4
 8004966:	4601      	mov	r1, r0
 8004968:	4805      	ldr	r0, [pc, #20]	; (8004980 <oc_send_message+0x24>)
 800496a:	f001 fd0a 	bl	8006382 <os_mqueue_put>
    assert(rc == 0);
 800496e:	b128      	cbz	r0, 800497c <oc_send_message+0x20>
 8004970:	2300      	movs	r3, #0
 8004972:	461a      	mov	r2, r3
 8004974:	4619      	mov	r1, r3
 8004976:	4618      	mov	r0, r3
 8004978:	f001 f952 	bl	8005c20 <__assert_func>
}
 800497c:	bd10      	pop	{r4, pc}
 800497e:	bf00      	nop
 8004980:	20000870 	.word	0x20000870

08004984 <oc_buffer_init>:

void
oc_buffer_init(void)
{
 8004984:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
 8004986:	2200      	movs	r2, #0
 8004988:	4905      	ldr	r1, [pc, #20]	; (80049a0 <oc_buffer_init+0x1c>)
 800498a:	4806      	ldr	r0, [pc, #24]	; (80049a4 <oc_buffer_init+0x20>)
 800498c:	f001 fcd6 	bl	800633c <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
}
 8004990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
 8004994:	2200      	movs	r2, #0
 8004996:	4904      	ldr	r1, [pc, #16]	; (80049a8 <oc_buffer_init+0x24>)
 8004998:	4804      	ldr	r0, [pc, #16]	; (80049ac <oc_buffer_init+0x28>)
 800499a:	f001 bccf 	b.w	800633c <os_mqueue_init>
 800499e:	bf00      	nop
 80049a0:	080048f5 	.word	0x080048f5
 80049a4:	20000858 	.word	0x20000858
 80049a8:	080048c9 	.word	0x080048c9
 80049ac:	20000870 	.word	0x20000870

080049b0 <oc_rep_new>:
CborError g_err;
struct cbor_mbuf_writer g_buf_writer;

void
oc_rep_new(struct os_mbuf *m)
{
 80049b0:	b538      	push	{r3, r4, r5, lr}
    g_err = CborNoError;
 80049b2:	2500      	movs	r5, #0
 80049b4:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <oc_rep_new+0x24>)
    g_outm = m;
    cbor_mbuf_writer_init(&g_buf_writer, m);
 80049b6:	4c08      	ldr	r4, [pc, #32]	; (80049d8 <oc_rep_new+0x28>)
    g_err = CborNoError;
 80049b8:	601d      	str	r5, [r3, #0]
    g_outm = m;
 80049ba:	4b08      	ldr	r3, [pc, #32]	; (80049dc <oc_rep_new+0x2c>)
{
 80049bc:	4601      	mov	r1, r0
    g_outm = m;
 80049be:	6018      	str	r0, [r3, #0]
    cbor_mbuf_writer_init(&g_buf_writer, m);
 80049c0:	4620      	mov	r0, r4
 80049c2:	f000 fdab 	bl	800551c <cbor_mbuf_writer_init>
    cbor_encoder_init(&g_encoder, &g_buf_writer.enc, 0);
 80049c6:	462a      	mov	r2, r5
 80049c8:	4621      	mov	r1, r4
}
 80049ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cbor_encoder_init(&g_encoder, &g_buf_writer.enc, 0);
 80049ce:	4804      	ldr	r0, [pc, #16]	; (80049e0 <oc_rep_new+0x30>)
 80049d0:	f000 bdac 	b.w	800552c <cbor_encoder_init>
 80049d4:	200033d8 	.word	0x200033d8
 80049d8:	200033dc 	.word	0x200033dc
 80049dc:	20000888 	.word	0x20000888
 80049e0:	200033f8 	.word	0x200033f8

080049e4 <oc_rep_reset>:
}

void
oc_rep_reset(void)
{
    memset(&g_encoder, 0, sizeof(g_encoder));
 80049e4:	2210      	movs	r2, #16
 80049e6:	2100      	movs	r1, #0
 80049e8:	4801      	ldr	r0, [pc, #4]	; (80049f0 <oc_rep_reset+0xc>)
 80049ea:	f002 bcaa 	b.w	8007342 <memset>
 80049ee:	bf00      	nop
 80049f0:	200033f8 	.word	0x200033f8

080049f4 <oc_rep_finalize>:
    int size = OS_MBUF_PKTLEN(g_outm);
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <oc_rep_finalize+0x1c>)
{
 80049f6:	b510      	push	{r4, lr}
    int size = OS_MBUF_PKTLEN(g_outm);
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	8a1c      	ldrh	r4, [r3, #16]
    oc_rep_reset();
 80049fc:	f7ff fff2 	bl	80049e4 <oc_rep_reset>
    if (g_err != CborNoError) {
 8004a00:	4b04      	ldr	r3, [pc, #16]	; (8004a14 <oc_rep_finalize+0x20>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
}
 8004a06:	bf0c      	ite	eq
 8004a08:	4620      	moveq	r0, r4
 8004a0a:	f04f 30ff 	movne.w	r0, #4294967295
 8004a0e:	bd10      	pop	{r4, pc}
 8004a10:	20000888 	.word	0x20000888
 8004a14:	200033d8 	.word	0x200033d8

08004a18 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
 8004a18:	b507      	push	{r0, r1, r2, lr}
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
 8004a1a:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <oc_rep_init+0x18>)
 8004a1c:	2218      	movs	r2, #24
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	2102      	movs	r1, #2
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <oc_rep_init+0x1c>)
 8004a24:	4804      	ldr	r0, [pc, #16]	; (8004a38 <oc_rep_init+0x20>)
 8004a26:	f001 fe7f 	bl	8006728 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
 8004a2a:	b003      	add	sp, #12
 8004a2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a30:	0800e070 	.word	0x0800e070
 8004a34:	200008a8 	.word	0x200008a8
 8004a38:	2000088c 	.word	0x2000088c

08004a3c <free_client_cb>:
}

#ifdef OC_CLIENT
static void
free_client_cb(oc_client_cb_t *cb)
{
 8004a3c:	b510      	push	{r4, lr}
 8004a3e:	4604      	mov	r4, r0
    os_callout_stop(&cb->callout);
 8004a40:	3004      	adds	r0, #4
 8004a42:	f001 fa5b 	bl	8005efc <os_callout_stop>
    oc_free_string(&cb->uri);
 8004a46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a4a:	f000 fbb4 	bl	80051b6 <oc_free_string>
    SLIST_REMOVE(&oc_client_cbs, cb, oc_client_cb, next);
 8004a4e:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <free_client_cb+0x38>)
 8004a50:	6813      	ldr	r3, [r2, #0]
 8004a52:	42a3      	cmp	r3, r4
 8004a54:	d108      	bne.n	8004a68 <free_client_cb+0x2c>
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	6013      	str	r3, [r2, #0]
    os_memblock_put(&oc_client_cb_pool, cb);
 8004a5a:	4621      	mov	r1, r4
}
 8004a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_memblock_put(&oc_client_cb_pool, cb);
 8004a60:	4805      	ldr	r0, [pc, #20]	; (8004a78 <free_client_cb+0x3c>)
 8004a62:	f001 be92 	b.w	800678a <os_memblock_put>
 8004a66:	4613      	mov	r3, r2
    SLIST_REMOVE(&oc_client_cbs, cb, oc_client_cb, next);
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	42a2      	cmp	r2, r4
 8004a6c:	d1fb      	bne.n	8004a66 <free_client_cb+0x2a>
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e7f2      	b.n	8004a5a <free_client_cb+0x1e>
 8004a74:	200009bc 	.word	0x200009bc
 8004a78:	200009a0 	.word	0x200009a0

08004a7c <oc_ri_remove_cb>:
{
    struct oc_client_cb *cb;

    cb = ev->ev_arg;

    free_client_cb(cb);
 8004a7c:	6880      	ldr	r0, [r0, #8]
 8004a7e:	f7ff bfdd 	b.w	8004a3c <free_client_cb>
	...

08004a84 <oc_ri_mem_init>:
{
 8004a84:	b507      	push	{r0, r1, r2, lr}
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
 8004a86:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <oc_ri_mem_init+0x20>)
 8004a88:	2264      	movs	r2, #100	; 0x64
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <oc_ri_mem_init+0x24>)
 8004a90:	4806      	ldr	r0, [pc, #24]	; (8004aac <oc_ri_mem_init+0x28>)
 8004a92:	f001 fe49 	bl	8006728 <os_mempool_init>
    oc_rep_init();
 8004a96:	f7ff ffbf 	bl	8004a18 <oc_rep_init>
}
 8004a9a:	b003      	add	sp, #12
 8004a9c:	f85d eb04 	ldr.w	lr, [sp], #4
    oc_buffer_init();
 8004aa0:	f7ff bf70 	b.w	8004984 <oc_buffer_init>
 8004aa4:	0800e079 	.word	0x0800e079
 8004aa8:	200008d8 	.word	0x200008d8
 8004aac:	200009a0 	.word	0x200009a0

08004ab0 <oc_ri_remove_client_cb_by_mid>:
    SLIST_FOREACH(cb, &oc_client_cbs, next) {
 8004ab0:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <oc_ri_remove_client_cb_by_mid+0x14>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	b903      	cbnz	r3, 8004ab8 <oc_ri_remove_client_cb_by_mid+0x8>
 8004ab6:	4770      	bx	lr
        if (cb->mid == mid) {
 8004ab8:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8004aba:	4282      	cmp	r2, r0
 8004abc:	d1f9      	bne.n	8004ab2 <oc_ri_remove_client_cb_by_mid+0x2>
        free_client_cb(cb);
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff bfbc 	b.w	8004a3c <free_client_cb>
 8004ac4:	200009bc 	.word	0x200009bc

08004ac8 <oc_ri_alloc_client_cb>:
}

oc_client_cb_t *
oc_ri_alloc_client_cb(const char *uri, oc_server_handle_t *server,
                      oc_method_t method, void *handler, oc_qos_t qos)
{
 8004ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004acc:	4680      	mov	r8, r0
    oc_client_cb_t *cb;

    cb = os_memblock_get(&oc_client_cb_pool);
 8004ace:	4824      	ldr	r0, [pc, #144]	; (8004b60 <oc_ri_alloc_client_cb+0x98>)
{
 8004ad0:	460d      	mov	r5, r1
 8004ad2:	4617      	mov	r7, r2
 8004ad4:	461e      	mov	r6, r3
    cb = os_memblock_get(&oc_client_cb_pool);
 8004ad6:	f001 fe30 	bl	800673a <os_memblock_get>
    if (!cb) {
 8004ada:	4604      	mov	r4, r0
 8004adc:	b3b0      	cbz	r0, 8004b4c <oc_ri_alloc_client_cb+0x84>
        return NULL;
    }
    cb->mid = coap_get_mid();
 8004ade:	f000 f8db 	bl	8004c98 <coap_get_mid>
    oc_new_string(&cb->uri, uri);
 8004ae2:	4641      	mov	r1, r8
    cb->mid = coap_get_mid();
 8004ae4:	86e0      	strh	r0, [r4, #54]	; 0x36
    oc_new_string(&cb->uri, uri);
 8004ae6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004aea:	f000 fb4a 	bl	8005182 <oc_new_string>
    cb->method = method;
    cb->qos = qos;
 8004aee:	f89d 3018 	ldrb.w	r3, [sp, #24]
    cb->handler = handler;
 8004af2:	6526      	str	r6, [r4, #80]	; 0x50
    cb->qos = qos;
 8004af4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    cb->token_len = 8;
 8004af8:	2308      	movs	r3, #8
    int i = 0;
 8004afa:	2600      	movs	r6, #0
    cb->method = method;
 8004afc:	f884 7061 	strb.w	r7, [r4, #97]	; 0x61
    cb->token_len = 8;
 8004b00:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    uint16_t r;
    while (i < cb->token_len) {
 8004b04:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8004b08:	42b3      	cmp	r3, r6
 8004b0a:	dc22      	bgt.n	8004b52 <oc_ri_alloc_client_cb+0x8a>
        r = oc_random_rand();
        memcpy(cb->token + i, &r, sizeof(r));
        i += sizeof(r);
    }
    cb->discovery = false;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    cb->timestamp = oc_clock_time();
 8004b12:	f000 fb2f 	bl	8005174 <oc_clock_time>
    cb->observe_seq = -1;
 8004b16:	f04f 33ff 	mov.w	r3, #4294967295
    memcpy(&cb->server, server, sizeof(oc_server_handle_t));
 8004b1a:	4629      	mov	r1, r5
    cb->observe_seq = -1;
 8004b1c:	65a3      	str	r3, [r4, #88]	; 0x58
    cb->timestamp = oc_clock_time();
 8004b1e:	65e0      	str	r0, [r4, #92]	; 0x5c
    memcpy(&cb->server, server, sizeof(oc_server_handle_t));
 8004b20:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8004b24:	f105 0218 	add.w	r2, r5, #24
 8004b28:	f851 0b04 	ldr.w	r0, [r1], #4
 8004b2c:	4291      	cmp	r1, r2
 8004b2e:	f843 0b04 	str.w	r0, [r3], #4
 8004b32:	d1f9      	bne.n	8004b28 <oc_ri_alloc_client_cb+0x60>

    os_callout_init(&cb->callout, oc_evq_get(), oc_ri_remove_cb, cb);
 8004b34:	f000 fab4 	bl	80050a0 <oc_evq_get>
 8004b38:	4623      	mov	r3, r4
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <oc_ri_alloc_client_cb+0x9c>)
 8004b3c:	4601      	mov	r1, r0
 8004b3e:	1d20      	adds	r0, r4, #4
 8004b40:	f001 f9ce 	bl	8005ee0 <os_callout_init>

    SLIST_INSERT_HEAD(&oc_client_cbs, cb, next);
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <oc_ri_alloc_client_cb+0xa0>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	601c      	str	r4, [r3, #0]
 8004b4a:	6022      	str	r2, [r4, #0]
    return cb;
}
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        r = oc_random_rand();
 8004b52:	f000 fb11 	bl	8005178 <oc_random_rand>
        memcpy(cb->token + i, &r, sizeof(r));
 8004b56:	19a3      	adds	r3, r4, r6
 8004b58:	8598      	strh	r0, [r3, #44]	; 0x2c
        i += sizeof(r);
 8004b5a:	3602      	adds	r6, #2
 8004b5c:	e7d2      	b.n	8004b04 <oc_ri_alloc_client_cb+0x3c>
 8004b5e:	bf00      	nop
 8004b60:	200009a0 	.word	0x200009a0
 8004b64:	08004a7d 	.word	0x08004a7d
 8004b68:	200009bc 	.word	0x200009bc

08004b6c <coap_append_opt_hdr>:
}
/*---------------------------------------------------------------------------*/
static uint8_t
coap_option_nibble(unsigned int value)
{
    if (value < 13) {
 8004b6c:	290c      	cmp	r1, #12
}
/*---------------------------------------------------------------------------*/

static int
coap_append_opt_hdr(struct os_mbuf *m, unsigned int delta, size_t length)
{
 8004b6e:	b513      	push	{r0, r1, r4, lr}
    if (value < 13) {
 8004b70:	d82d      	bhi.n	8004bce <coap_append_opt_hdr+0x62>
        return value;
 8004b72:	b2cb      	uxtb	r3, r1
    uint8_t buffer[4];
    size_t written = 0;

    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 8004b74:	011b      	lsls	r3, r3, #4
    if (value < 13) {
 8004b76:	2a0c      	cmp	r2, #12
    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 8004b78:	b25b      	sxtb	r3, r3
    if (value < 13) {
 8004b7a:	d82e      	bhi.n	8004bda <coap_append_opt_hdr+0x6e>
        return value;
 8004b7c:	b2d4      	uxtb	r4, r2
    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 8004b7e:	4323      	orrs	r3, r4

    if (delta > 268) {
 8004b80:	f5b1 7f86 	cmp.w	r1, #268	; 0x10c
    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 8004b84:	f88d 3004 	strb.w	r3, [sp, #4]
    if (delta > 268) {
 8004b88:	d92d      	bls.n	8004be6 <coap_append_opt_hdr+0x7a>
        buffer[++written] = ((delta - 269) >> 8) & 0xff;
 8004b8a:	f46f 7486 	mvn.w	r4, #268	; 0x10c
 8004b8e:	190b      	adds	r3, r1, r4
 8004b90:	0a1b      	lsrs	r3, r3, #8
 8004b92:	f88d 3005 	strb.w	r3, [sp, #5]
        buffer[++written] = (delta - 269) & 0xff;
 8004b96:	2302      	movs	r3, #2
 8004b98:	390d      	subs	r1, #13
 8004b9a:	f88d 1006 	strb.w	r1, [sp, #6]
    } else if (delta > 12) {
        buffer[++written] = (delta - 13);
    }

    if (length > 268) {
 8004b9e:	f5b2 7f86 	cmp.w	r2, #268	; 0x10c
 8004ba2:	d928      	bls.n	8004bf6 <coap_append_opt_hdr+0x8a>
        buffer[++written] = ((length - 269) >> 8) & 0xff;
 8004ba4:	a902      	add	r1, sp, #8
 8004ba6:	18cc      	adds	r4, r1, r3
 8004ba8:	f46f 7186 	mvn.w	r1, #268	; 0x10c
 8004bac:	1851      	adds	r1, r2, r1
 8004bae:	0a09      	lsrs	r1, r1, #8
 8004bb0:	f804 1c03 	strb.w	r1, [r4, #-3]
        buffer[++written] = (length - 269) & 0xff;
 8004bb4:	3302      	adds	r3, #2
    } else if (length > 12) {
        buffer[++written] = (length - 13);
 8004bb6:	a902      	add	r1, sp, #8
 8004bb8:	4419      	add	r1, r3
 8004bba:	3a0d      	subs	r2, #13
 8004bbc:	f801 2c04 	strb.w	r2, [r1, #-4]
    }

    return os_mbuf_append(m, buffer, written + 1);
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	b292      	uxth	r2, r2
 8004bc4:	a901      	add	r1, sp, #4
 8004bc6:	f001 fc4a 	bl	800645e <os_mbuf_append>
}
 8004bca:	b002      	add	sp, #8
 8004bcc:	bd10      	pop	{r4, pc}
    } else if (value <= 0xFF + 13) {
 8004bce:	f5b1 7f86 	cmp.w	r1, #268	; 0x10c
        return 14;
 8004bd2:	bf94      	ite	ls
 8004bd4:	230d      	movls	r3, #13
 8004bd6:	230e      	movhi	r3, #14
 8004bd8:	e7cc      	b.n	8004b74 <coap_append_opt_hdr+0x8>
    } else if (value <= 0xFF + 13) {
 8004bda:	f5b2 7f86 	cmp.w	r2, #268	; 0x10c
        return 14;
 8004bde:	bf94      	ite	ls
 8004be0:	240d      	movls	r4, #13
 8004be2:	240e      	movhi	r4, #14
 8004be4:	e7cb      	b.n	8004b7e <coap_append_opt_hdr+0x12>
    } else if (delta > 12) {
 8004be6:	290c      	cmp	r1, #12
        buffer[++written] = (delta - 13);
 8004be8:	bf83      	ittte	hi
 8004bea:	390d      	subhi	r1, #13
 8004bec:	f88d 1005 	strbhi.w	r1, [sp, #5]
 8004bf0:	2301      	movhi	r3, #1
    size_t written = 0;
 8004bf2:	2300      	movls	r3, #0
 8004bf4:	e7d3      	b.n	8004b9e <coap_append_opt_hdr+0x32>
    } else if (length > 12) {
 8004bf6:	2a0c      	cmp	r2, #12
 8004bf8:	d9e2      	bls.n	8004bc0 <coap_append_opt_hdr+0x54>
        buffer[++written] = (length - 13);
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	e7db      	b.n	8004bb6 <coap_append_opt_hdr+0x4a>

08004bfe <coap_append_int_opt>:

/*---------------------------------------------------------------------------*/
static int
coap_append_int_opt(struct os_mbuf *m, unsigned int number,
                    unsigned int current_number, uint32_t value)
{
 8004bfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c02:	461c      	mov	r4, r3
    int rc;

    if (0xFF000000 & value) {
        ++i;
    }
    if (0xFFFF0000 & value) {
 8004c04:	ea4f 4a14 	mov.w	sl, r4, lsr #16
    if (0xFF000000 & value) {
 8004c08:	f013 437f 	ands.w	r3, r3, #4278190080	; 0xff000000
    if (0xFFFF0000 & value) {
 8004c0c:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
{
 8004c10:	4680      	mov	r8, r0
 8004c12:	b085      	sub	sp, #20
 8004c14:	4610      	mov	r0, r2
    if (0xFF000000 & value) {
 8004c16:	bf14      	ite	ne
 8004c18:	2701      	movne	r7, #1
 8004c1a:	2700      	moveq	r7, #0
    if (0xFFFF0000 & value) {
 8004c1c:	f1ba 0f00 	cmp.w	sl, #0
 8004c20:	d027      	beq.n	8004c72 <coap_append_int_opt+0x74>
        ++i;
 8004c22:	1c7d      	adds	r5, r7, #1
    }
    if (0xFFFFFF00 & value) {
 8004c24:	f034 0bff 	bics.w	fp, r4, #255	; 0xff
 8004c28:	d025      	beq.n	8004c76 <coap_append_int_opt+0x78>
        ++i;
 8004c2a:	1c6e      	adds	r6, r5, #1
    }
    if (0xFFFFFFFF & value) {
        ++i;
 8004c2c:	f106 0901 	add.w	r9, r6, #1
    }
    OC_LOG(DEBUG, "OPTION %u (delta %u, len %zu)\n",
                 number, number - current_number, i);

    rc = coap_append_opt_hdr(m, number - current_number, i);
 8004c30:	1a09      	subs	r1, r1, r0
 8004c32:	464a      	mov	r2, r9
 8004c34:	4640      	mov	r0, r8
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	f7ff ff98 	bl	8004b6c <coap_append_opt_hdr>
    if (rc) {
 8004c3c:	bb40      	cbnz	r0, 8004c90 <coap_append_int_opt+0x92>
        return rc;
    }

    i = 0;
    if (0xFF000000 & value) {
 8004c3e:	9b01      	ldr	r3, [sp, #4]
 8004c40:	b113      	cbz	r3, 8004c48 <coap_append_int_opt+0x4a>
        buffer[i++] = (uint8_t)(value >> 24);
 8004c42:	0e23      	lsrs	r3, r4, #24
 8004c44:	f88d 300c 	strb.w	r3, [sp, #12]
    }
    if (0xFFFF0000 & value) {
 8004c48:	f1ba 0f00 	cmp.w	sl, #0
 8004c4c:	d004      	beq.n	8004c58 <coap_append_int_opt+0x5a>
        buffer[i++] = (uint8_t)(value >> 16);
 8004c4e:	ab04      	add	r3, sp, #16
 8004c50:	441f      	add	r7, r3
 8004c52:	0c23      	lsrs	r3, r4, #16
 8004c54:	f807 3c04 	strb.w	r3, [r7, #-4]
    }
    if (0xFFFFFF00 & value) {
 8004c58:	f1bb 0f00 	cmp.w	fp, #0
 8004c5c:	d010      	beq.n	8004c80 <coap_append_int_opt+0x82>
        buffer[i++] = (uint8_t)(value >> 8);
 8004c5e:	ab04      	add	r3, sp, #16
 8004c60:	441d      	add	r5, r3
 8004c62:	0a23      	lsrs	r3, r4, #8
 8004c64:	f805 3c04 	strb.w	r3, [r5, #-4]
    }
    if (0xFFFFFFFF & value) {
        buffer[i++] = (uint8_t)(value);
 8004c68:	ab04      	add	r3, sp, #16
 8004c6a:	441e      	add	r6, r3
 8004c6c:	f806 4c04 	strb.w	r4, [r6, #-4]
 8004c70:	e008      	b.n	8004c84 <coap_append_int_opt+0x86>
    size_t i = 0;
 8004c72:	463d      	mov	r5, r7
 8004c74:	e7d6      	b.n	8004c24 <coap_append_int_opt+0x26>
 8004c76:	462e      	mov	r6, r5
    if (0xFFFFFFFF & value) {
 8004c78:	2c00      	cmp	r4, #0
 8004c7a:	d1d7      	bne.n	8004c2c <coap_append_int_opt+0x2e>
 8004c7c:	46a9      	mov	r9, r5
 8004c7e:	e7d7      	b.n	8004c30 <coap_append_int_opt+0x32>
    if (0xFFFFFFFF & value) {
 8004c80:	2c00      	cmp	r4, #0
 8004c82:	d1f1      	bne.n	8004c68 <coap_append_int_opt+0x6a>
    }
    return os_mbuf_append(m, buffer, i);
 8004c84:	fa1f f289 	uxth.w	r2, r9
 8004c88:	a903      	add	r1, sp, #12
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	f001 fbe7 	bl	800645e <os_mbuf_append>
}
 8004c90:	b005      	add	sp, #20
 8004c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004c98 <coap_get_mid>:
}
/*---------------------------------------------------------------------------*/
uint16_t
coap_get_mid(void)
{
    return ++current_mid;
 8004c98:	4b02      	ldr	r3, [pc, #8]	; (8004ca4 <coap_get_mid+0xc>)
 8004c9a:	8818      	ldrh	r0, [r3, #0]
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	b280      	uxth	r0, r0
 8004ca0:	8018      	strh	r0, [r3, #0]
}
 8004ca2:	4770      	bx	lr
 8004ca4:	200009c0 	.word	0x200009c0

08004ca8 <coap_init_message>:
/*---------------------------------------------------------------------------*/
void
coap_init_message(coap_packet_t *pkt, coap_message_type_t type,
                  uint8_t code, uint16_t mid)
{
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	4604      	mov	r4, r0
 8004cac:	460f      	mov	r7, r1
 8004cae:	4616      	mov	r6, r2
 8004cb0:	461d      	mov	r5, r3
    /* Important thing */
    memset(pkt, 0, sizeof(coap_packet_t));
 8004cb2:	226c      	movs	r2, #108	; 0x6c
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	f002 fb44 	bl	8007342 <memset>

    pkt->type = type;
 8004cba:	7067      	strb	r7, [r4, #1]
    pkt->code = code;
 8004cbc:	70a6      	strb	r6, [r4, #2]
    pkt->mid = mid;
 8004cbe:	80a5      	strh	r5, [r4, #4]
}
 8004cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004cc4 <coap_serialize_message>:
    uint32_t u32;
    int tcp_hdr;
    int len, data_len;

    /* Initialize */
    pkt->version = 1;
 8004cc4:	2301      	movs	r3, #1
{
 8004cc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pkt->version = 1;
 8004cca:	7003      	strb	r3, [r0, #0]
 * Whether transport uses TCP-style headers or not.
 */
static inline int
oc_endpoint_use_tcp(struct oc_endpoint *oe)
{
    return oc_transports[oe->ep.oe_type]->ot_flags & OC_TRANSPORT_USE_TCP;
 8004ccc:	7e0b      	ldrb	r3, [r1, #24]
 8004cce:	4abb      	ldr	r2, [pc, #748]	; (8004fbc <coap_serialize_message+0x2f8>)
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
{
 8004cd8:	460d      	mov	r5, r1
 8004cda:	f893 9000 	ldrb.w	r9, [r3]

    /*
     * Move data pointer, leave enough space to insert coap header and
     * token before options.
     */
    m->om_data += (sizeof(struct coap_tcp_hdr32) + pkt->token_len);
 8004cde:	7983      	ldrb	r3, [r0, #6]
{
 8004ce0:	4604      	mov	r4, r0
    m->om_data += (sizeof(struct coap_tcp_hdr32) + pkt->token_len);
 8004ce2:	1d9a      	adds	r2, r3, #6
 8004ce4:	680b      	ldr	r3, [r1, #0]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	600b      	str	r3, [r1, #0]
    COAP_SERIALIZE_BYTE_OPT(pkt, m, COAP_OPTION_ETAG, etag, "ETag");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_IF_NONE_MATCH,
        content_format - pkt-> content_format /* hack to get a zero field */,
                           "If-None-Match");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_OBSERVE, observe, "Observe");
 8004cea:	7bc1      	ldrb	r1, [r0, #15]
 8004cec:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8004cf0:	d009      	beq.n	8004d06 <coap_serialize_message+0x42>
 8004cf2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2106      	movs	r1, #6
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f7ff ff80 	bl	8004bfe <coap_append_int_opt>
 8004cfe:	2800      	cmp	r0, #0
 8004d00:	f040 80f4 	bne.w	8004eec <coap_serialize_message+0x228>
 8004d04:	2106      	movs	r1, #6
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_URI_PORT, uri_port,
                              "Uri-Port");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_PATH,
                              location_path, '/', "Location-Path");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 8004d06:	7c23      	ldrb	r3, [r4, #16]
 8004d08:	0718      	lsls	r0, r3, #28
 8004d0a:	d50a      	bpl.n	8004d22 <coap_serialize_message+0x5e>
 8004d0c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
        for (j = 0; j <= length + 1; ++j) {
 8004d0e:	2600      	movs	r6, #0
    uint8_t *part_start = array;
 8004d10:	463b      	mov	r3, r7
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 8004d12:	f8b4 a02a 	ldrh.w	sl, [r4, #42]	; 0x2a
        for (j = 0; j <= length + 1; ++j) {
 8004d16:	f10a 0b01 	add.w	fp, sl, #1
 8004d1a:	455e      	cmp	r6, fp
 8004d1c:	f240 80a2 	bls.w	8004e64 <coap_serialize_message+0x1a0>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 8004d20:	210b      	movs	r1, #11
                              "Uri-Path");

    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_CONTENT_FORMAT, content_format,
 8004d22:	7c23      	ldrb	r3, [r4, #16]
 8004d24:	06da      	lsls	r2, r3, #27
 8004d26:	d509      	bpl.n	8004d3c <coap_serialize_message+0x78>
 8004d28:	460a      	mov	r2, r1
 8004d2a:	8b23      	ldrh	r3, [r4, #24]
 8004d2c:	210c      	movs	r1, #12
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f7ff ff65 	bl	8004bfe <coap_append_int_opt>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	f040 80d9 	bne.w	8004eec <coap_serialize_message+0x228>
 8004d3a:	210c      	movs	r1, #12
                           "Content-Format");
#if 0
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_MAX_AGE, max_age, "Max-Age");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 8004d3c:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	da0a      	bge.n	8004d5a <coap_serialize_message+0x96>
 8004d44:	6de7      	ldr	r7, [r4, #92]	; 0x5c
        for (j = 0; j <= length + 1; ++j) {
 8004d46:	2600      	movs	r6, #0
    uint8_t *part_start = array;
 8004d48:	463b      	mov	r3, r7
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 8004d4a:	f8b4 a058 	ldrh.w	sl, [r4, #88]	; 0x58
        for (j = 0; j <= length + 1; ++j) {
 8004d4e:	f10a 0b01 	add.w	fp, sl, #1
 8004d52:	455e      	cmp	r6, fp
 8004d54:	f240 80a4 	bls.w	8004ea0 <coap_serialize_message+0x1dc>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 8004d58:	210f      	movs	r1, #15
                              "Uri-Query");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_ACCEPT, accept, "Accept");
 8004d5a:	7c63      	ldrb	r3, [r4, #17]
 8004d5c:	079b      	lsls	r3, r3, #30
 8004d5e:	d509      	bpl.n	8004d74 <coap_serialize_message+0xb0>
 8004d60:	460a      	mov	r2, r1
 8004d62:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8004d64:	2111      	movs	r1, #17
 8004d66:	4628      	mov	r0, r5
 8004d68:	f7ff ff49 	bl	8004bfe <coap_append_int_opt>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	f040 80bd 	bne.w	8004eec <coap_serialize_message+0x228>
 8004d72:	2111      	movs	r1, #17
#if 0
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_QUERY,
                              location_query, '&', "Location-Query");
#endif
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
 8004d74:	f994 3011 	ldrsb.w	r3, [r4, #17]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	da1a      	bge.n	8004db2 <coap_serialize_message+0xee>
 8004d7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d7e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004d82:	0112      	lsls	r2, r2, #4
 8004d84:	b10b      	cbz	r3, 8004d8a <coap_serialize_message+0xc6>
 8004d86:	f042 0208 	orr.w	r2, r2, #8
 8004d8a:	2600      	movs	r6, #0
 8004d8c:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8004d8e:	0900      	lsrs	r0, r0, #4
    } while (value);
 8004d90:	0840      	lsrs	r0, r0, #1
 8004d92:	b2b3      	uxth	r3, r6
 8004d94:	f106 0601 	add.w	r6, r6, #1
 8004d98:	d1fa      	bne.n	8004d90 <coap_serialize_message+0xcc>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	4628      	mov	r0, r5
 8004da2:	460a      	mov	r2, r1
 8004da4:	2117      	movs	r1, #23
 8004da6:	f7ff ff2a 	bl	8004bfe <coap_append_int_opt>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	f040 809e 	bne.w	8004eec <coap_serialize_message+0x228>
 8004db0:	2117      	movs	r1, #23
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK1, block1, "Block1");
 8004db2:	7ca3      	ldrb	r3, [r4, #18]
 8004db4:	071f      	lsls	r7, r3, #28
 8004db6:	d51a      	bpl.n	8004dee <coap_serialize_message+0x12a>
 8004db8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004dba:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8004dbe:	0112      	lsls	r2, r2, #4
 8004dc0:	b10b      	cbz	r3, 8004dc6 <coap_serialize_message+0x102>
 8004dc2:	f042 0208 	orr.w	r2, r2, #8
 8004dc6:	2600      	movs	r6, #0
 8004dc8:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
 8004dcc:	0900      	lsrs	r0, r0, #4
    } while (value);
 8004dce:	0840      	lsrs	r0, r0, #1
 8004dd0:	b2b3      	uxth	r3, r6
 8004dd2:	f106 0601 	add.w	r6, r6, #1
 8004dd6:	d1fa      	bne.n	8004dce <coap_serialize_message+0x10a>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK1, block1, "Block1");
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	4628      	mov	r0, r5
 8004de0:	460a      	mov	r2, r1
 8004de2:	211b      	movs	r1, #27
 8004de4:	f7ff ff0b 	bl	8004bfe <coap_append_int_opt>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d17f      	bne.n	8004eec <coap_serialize_message+0x228>
 8004dec:	211b      	movs	r1, #27
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE2, size2, "Size2");
 8004dee:	7ca3      	ldrb	r3, [r4, #18]
 8004df0:	06de      	lsls	r6, r3, #27
 8004df2:	d508      	bpl.n	8004e06 <coap_serialize_message+0x142>
 8004df4:	460a      	mov	r2, r1
 8004df6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004df8:	211c      	movs	r1, #28
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f7ff feff 	bl	8004bfe <coap_append_int_opt>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d173      	bne.n	8004eec <coap_serialize_message+0x228>
 8004e04:	211c      	movs	r1, #28
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_URI, proxy_uri, '\0',
                              "Proxy-Uri");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_SCHEME, proxy_scheme,
                              '\0', "Proxy-Scheme");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
 8004e06:	7da3      	ldrb	r3, [r4, #22]
 8004e08:	06d8      	lsls	r0, r3, #27
 8004e0a:	d467      	bmi.n	8004edc <coap_serialize_message+0x218>

    /* Payload marker */
    if (pkt->payload_len) {
 8004e0c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004e10:	b133      	cbz	r3, 8004e20 <coap_serialize_message+0x15c>
        if (os_mbuf_append(m, "\xff", 1)) {
 8004e12:	2201      	movs	r2, #1
 8004e14:	496a      	ldr	r1, [pc, #424]	; (8004fc0 <coap_serialize_message+0x2fc>)
 8004e16:	4628      	mov	r0, r5
 8004e18:	f001 fb21 	bl	800645e <os_mbuf_append>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d165      	bne.n	8004eec <coap_serialize_message+0x228>
    data_len = OS_MBUF_PKTLEN(m) + pkt->payload_len;

    /*
     * Set header fields, aka CoAP header alignment nightmare.
     */
    if (!tcp_hdr) {
 8004e20:	f019 0f01 	tst.w	r9, #1
 8004e24:	79a1      	ldrb	r1, [r4, #6]
 8004e26:	f104 0707 	add.w	r7, r4, #7
 8004e2a:	d166      	bne.n	8004efa <coap_serialize_message+0x236>
        len = sizeof(struct coap_udp_hdr) + pkt->token_len;
        os_mbuf_prepend(m, len);
 8004e2c:	3104      	adds	r1, #4
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f001 fbe5 	bl	80065fe <os_mbuf_prepend>
        cuh = (struct coap_udp_hdr *)m->om_data;
 8004e34:	6828      	ldr	r0, [r5, #0]
        cuh->version = pkt->version;
 8004e36:	7822      	ldrb	r2, [r4, #0]
 8004e38:	7803      	ldrb	r3, [r0, #0]
 8004e3a:	f362 1387 	bfi	r3, r2, #6, #2
        cuh->type = pkt->type;
 8004e3e:	7862      	ldrb	r2, [r4, #1]
 8004e40:	f362 1305 	bfi	r3, r2, #4, #2
 8004e44:	7003      	strb	r3, [r0, #0]
        cuh->token_len = pkt->token_len;
 8004e46:	79a2      	ldrb	r2, [r4, #6]
 8004e48:	f362 0303 	bfi	r3, r2, #0, #4
 8004e4c:	7003      	strb	r3, [r0, #0]
        cuh->code = pkt->code;
 8004e4e:	78a3      	ldrb	r3, [r4, #2]
 8004e50:	7043      	strb	r3, [r0, #1]
        u16 = htons(pkt->mid);
 8004e52:	88a2      	ldrh	r2, [r4, #4]
 8004e54:	0213      	lsls	r3, r2, #8
 8004e56:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
        memcpy(&cuh->id, &u16, sizeof(u16));
 8004e5a:	8043      	strh	r3, [r0, #2]
            cth16->type = COAP_TCP_TYPE16;
            cth16->token_len = pkt->token_len;
            u16 = htons(data_len - COAP_TCP_LENGTH16_OFF);
            memcpy(&cth16->data_len, &u16, sizeof(u16));
            cth16->code = pkt->code;
            memcpy(cth16 + 1, pkt->token, pkt->token_len);
 8004e5c:	79a2      	ldrb	r2, [r4, #6]
 8004e5e:	4639      	mov	r1, r7
 8004e60:	3004      	adds	r0, #4
 8004e62:	e065      	b.n	8004f30 <coap_serialize_message+0x26c>
            if (array[j] == split_char || j == length) {
 8004e64:	5dba      	ldrb	r2, [r7, r6]
 8004e66:	eb07 0806 	add.w	r8, r7, r6
 8004e6a:	2a2f      	cmp	r2, #47	; 0x2f
 8004e6c:	d001      	beq.n	8004e72 <coap_serialize_message+0x1ae>
 8004e6e:	45b2      	cmp	sl, r6
 8004e70:	d114      	bne.n	8004e9c <coap_serialize_message+0x1d8>
                blk = part_end - part_start;
 8004e72:	eba8 0803 	sub.w	r8, r8, r3
                rc = coap_append_opt_hdr(m, number - current_number, blk);
 8004e76:	4642      	mov	r2, r8
 8004e78:	f1c1 010b 	rsb	r1, r1, #11
 8004e7c:	4628      	mov	r0, r5
                blk = part_end - part_start;
 8004e7e:	9301      	str	r3, [sp, #4]
                rc = coap_append_opt_hdr(m, number - current_number, blk);
 8004e80:	f7ff fe74 	bl	8004b6c <coap_append_opt_hdr>
                if (rc) {
 8004e84:	bb90      	cbnz	r0, 8004eec <coap_serialize_message+0x228>
                rc = os_mbuf_append(m, part_start, blk);
 8004e86:	9b01      	ldr	r3, [sp, #4]
 8004e88:	fa1f f288 	uxth.w	r2, r8
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f001 fae5 	bl	800645e <os_mbuf_append>
                if (rc) {
 8004e94:	bb50      	cbnz	r0, 8004eec <coap_serialize_message+0x228>
                current_number = number;
 8004e96:	210b      	movs	r1, #11
                ++j; /* skip the splitter */
 8004e98:	3601      	adds	r6, #1
                part_start = array + j;
 8004e9a:	19bb      	adds	r3, r7, r6
        for (j = 0; j <= length + 1; ++j) {
 8004e9c:	3601      	adds	r6, #1
 8004e9e:	e73c      	b.n	8004d1a <coap_serialize_message+0x56>
            if (array[j] == split_char || j == length) {
 8004ea0:	5dba      	ldrb	r2, [r7, r6]
 8004ea2:	eb07 0806 	add.w	r8, r7, r6
 8004ea6:	2a26      	cmp	r2, #38	; 0x26
 8004ea8:	d001      	beq.n	8004eae <coap_serialize_message+0x1ea>
 8004eaa:	45b2      	cmp	sl, r6
 8004eac:	d114      	bne.n	8004ed8 <coap_serialize_message+0x214>
                blk = part_end - part_start;
 8004eae:	eba8 0803 	sub.w	r8, r8, r3
                rc = coap_append_opt_hdr(m, number - current_number, blk);
 8004eb2:	4642      	mov	r2, r8
 8004eb4:	f1c1 010f 	rsb	r1, r1, #15
 8004eb8:	4628      	mov	r0, r5
                blk = part_end - part_start;
 8004eba:	9301      	str	r3, [sp, #4]
                rc = coap_append_opt_hdr(m, number - current_number, blk);
 8004ebc:	f7ff fe56 	bl	8004b6c <coap_append_opt_hdr>
                if (rc) {
 8004ec0:	b9a0      	cbnz	r0, 8004eec <coap_serialize_message+0x228>
                rc = os_mbuf_append(m, part_start, blk);
 8004ec2:	9b01      	ldr	r3, [sp, #4]
 8004ec4:	fa1f f288 	uxth.w	r2, r8
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f001 fac7 	bl	800645e <os_mbuf_append>
                if (rc) {
 8004ed0:	b960      	cbnz	r0, 8004eec <coap_serialize_message+0x228>
                current_number = number;
 8004ed2:	210f      	movs	r1, #15
                ++j; /* skip the splitter */
 8004ed4:	3601      	adds	r6, #1
                part_start = array + j;
 8004ed6:	19bb      	adds	r3, r7, r6
        for (j = 0; j <= length + 1; ++j) {
 8004ed8:	3601      	adds	r6, #1
 8004eda:	e73a      	b.n	8004d52 <coap_serialize_message+0x8e>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
 8004edc:	460a      	mov	r2, r1
 8004ede:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ee0:	213c      	movs	r1, #60	; 0x3c
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f7ff fe8b 	bl	8004bfe <coap_append_int_opt>
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	d08f      	beq.n	8004e0c <coap_serialize_message+0x148>
        OS_MBUF_PKTLEN(m), OS_MBUF_PKTLEN(m) - pkt->payload_len,
        pkt->payload_len);

    return 0;
err_mem:
    if (pkt->payload_m) {
 8004eec:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004eee:	b108      	cbz	r0, 8004ef4 <coap_serialize_message+0x230>
        os_mbuf_free_chain(pkt->payload_m);
 8004ef0:	f001 fa9f 	bl	8006432 <os_mbuf_free_chain>
    }
    STATS_INC(coap_stats, oerr);
    return -1;
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef8:	e090      	b.n	800501c <coap_serialize_message+0x358>
    data_len = OS_MBUF_PKTLEN(m) + pkt->payload_len;
 8004efa:	8a2e      	ldrh	r6, [r5, #16]
 8004efc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004f00:	441e      	add	r6, r3
        if (data_len < 13) {
 8004f02:	2e0c      	cmp	r6, #12
 8004f04:	dc24      	bgt.n	8004f50 <coap_serialize_message+0x28c>
            os_mbuf_prepend(m, len);
 8004f06:	3102      	adds	r1, #2
 8004f08:	4628      	mov	r0, r5
 8004f0a:	f001 fb78 	bl	80065fe <os_mbuf_prepend>
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
 8004f0e:	4639      	mov	r1, r7
            cth0 = (struct coap_tcp_hdr0 *)m->om_data;
 8004f10:	6828      	ldr	r0, [r5, #0]
            cth0->data_len = data_len;
 8004f12:	7803      	ldrb	r3, [r0, #0]
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
 8004f14:	3002      	adds	r0, #2
            cth0->data_len = data_len;
 8004f16:	f366 1307 	bfi	r3, r6, #4, #4
 8004f1a:	f800 3c02 	strb.w	r3, [r0, #-2]
            cth0->token_len = pkt->token_len;
 8004f1e:	79a2      	ldrb	r2, [r4, #6]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	f362 0303 	bfi	r3, r2, #0, #4
 8004f26:	f800 3c02 	strb.w	r3, [r0, #-2]
            cth0->code = pkt->code;
 8004f2a:	78a3      	ldrb	r3, [r4, #2]
 8004f2c:	f800 3c01 	strb.w	r3, [r0, #-1]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 8004f30:	f002 f9fa 	bl	8007328 <memcpy>
    if (pkt->payload_m) {
 8004f34:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d070      	beq.n	800501c <coap_serialize_message+0x358>
        assert(pkt->payload_len <= OS_MBUF_PKTLEN(pkt->payload_m));
 8004f3a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8004f3e:	8a01      	ldrh	r1, [r0, #16]
 8004f40:	428b      	cmp	r3, r1
 8004f42:	d962      	bls.n	800500a <coap_serialize_message+0x346>
 8004f44:	2300      	movs	r3, #0
 8004f46:	461a      	mov	r2, r3
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fe68 	bl	8005c20 <__assert_func>
        } else if (data_len < 269) {
 8004f50:	f5b6 7f86 	cmp.w	r6, #268	; 0x10c
 8004f54:	dc16      	bgt.n	8004f84 <coap_serialize_message+0x2c0>
            os_mbuf_prepend(m, len);
 8004f56:	3103      	adds	r1, #3
 8004f58:	4628      	mov	r0, r5
 8004f5a:	f001 fb50 	bl	80065fe <os_mbuf_prepend>
            cth8->type = COAP_TCP_TYPE8;
 8004f5e:	220d      	movs	r2, #13
            cth8 = (struct coap_tcp_hdr8 *)m->om_data;
 8004f60:	6828      	ldr	r0, [r5, #0]
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
 8004f62:	3e0d      	subs	r6, #13
            cth8->type = COAP_TCP_TYPE8;
 8004f64:	7803      	ldrb	r3, [r0, #0]
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
 8004f66:	4639      	mov	r1, r7
            cth8->type = COAP_TCP_TYPE8;
 8004f68:	f362 1307 	bfi	r3, r2, #4, #4
 8004f6c:	7003      	strb	r3, [r0, #0]
            cth8->token_len = pkt->token_len;
 8004f6e:	79a2      	ldrb	r2, [r4, #6]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	f362 0303 	bfi	r3, r2, #0, #4
 8004f76:	7003      	strb	r3, [r0, #0]
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
 8004f78:	7046      	strb	r6, [r0, #1]
            cth8->code = pkt->code;
 8004f7a:	78a3      	ldrb	r3, [r4, #2]
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
 8004f7c:	3003      	adds	r0, #3
            cth8->code = pkt->code;
 8004f7e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8004f82:	e7d5      	b.n	8004f30 <coap_serialize_message+0x26c>
        } else if (data_len < 65805) {
 8004f84:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <coap_serialize_message+0x300>)
 8004f86:	429e      	cmp	r6, r3
 8004f88:	dc1e      	bgt.n	8004fc8 <coap_serialize_message+0x304>
            os_mbuf_prepend(m, len);
 8004f8a:	3104      	adds	r1, #4
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	f001 fb36 	bl	80065fe <os_mbuf_prepend>
            cth16->type = COAP_TCP_TYPE16;
 8004f92:	220e      	movs	r2, #14
            cth16 = (struct coap_tcp_hdr16 *)m->om_data;
 8004f94:	6828      	ldr	r0, [r5, #0]
            cth16->type = COAP_TCP_TYPE16;
 8004f96:	7803      	ldrb	r3, [r0, #0]
 8004f98:	f362 1307 	bfi	r3, r2, #4, #4
 8004f9c:	7003      	strb	r3, [r0, #0]
            cth16->token_len = pkt->token_len;
 8004f9e:	79a2      	ldrb	r2, [r4, #6]
 8004fa0:	f362 0303 	bfi	r3, r2, #0, #4
            u16 = htons(data_len - COAP_TCP_LENGTH16_OFF);
 8004fa4:	f46f 7286 	mvn.w	r2, #268	; 0x10c
 8004fa8:	4416      	add	r6, r2
            cth16->token_len = pkt->token_len;
 8004faa:	7003      	strb	r3, [r0, #0]
            u16 = htons(data_len - COAP_TCP_LENGTH16_OFF);
 8004fac:	0233      	lsls	r3, r6, #8
 8004fae:	ea43 2626 	orr.w	r6, r3, r6, asr #8
            memcpy(&cth16->data_len, &u16, sizeof(u16));
 8004fb2:	f8a0 6001 	strh.w	r6, [r0, #1]
            cth16->code = pkt->code;
 8004fb6:	78a3      	ldrb	r3, [r4, #2]
 8004fb8:	70c3      	strb	r3, [r0, #3]
 8004fba:	e74f      	b.n	8004e5c <coap_serialize_message+0x198>
 8004fbc:	20003408 	.word	0x20003408
 8004fc0:	0800e083 	.word	0x0800e083
 8004fc4:	0001010c 	.word	0x0001010c
            os_mbuf_prepend(m, len);
 8004fc8:	3106      	adds	r1, #6
 8004fca:	4628      	mov	r0, r5
 8004fcc:	f001 fb17 	bl	80065fe <os_mbuf_prepend>
            cth32 = (struct coap_tcp_hdr32 *)m->om_data;
 8004fd0:	6828      	ldr	r0, [r5, #0]
            u32 = htonl(data_len - COAP_TCP_LENGTH32_OFF);
 8004fd2:	f5a6 3680 	sub.w	r6, r6, #65536	; 0x10000
            cth32->type = COAP_TCP_TYPE32;
 8004fd6:	7803      	ldrb	r3, [r0, #0]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 8004fd8:	4639      	mov	r1, r7
            cth32->type = COAP_TCP_TYPE32;
 8004fda:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8004fde:	7003      	strb	r3, [r0, #0]
            cth32->token_len = pkt->token_len;
 8004fe0:	79a2      	ldrb	r2, [r4, #6]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 8004fe2:	3006      	adds	r0, #6
            cth32->token_len = pkt->token_len;
 8004fe4:	f362 0303 	bfi	r3, r2, #0, #4
 8004fe8:	f800 3c06 	strb.w	r3, [r0, #-6]
            u32 = htonl(data_len - COAP_TCP_LENGTH32_OFF);
 8004fec:	f46f 7386 	mvn.w	r3, #268	; 0x10c
 8004ff0:	441e      	add	r6, r3
 8004ff2:	0233      	lsls	r3, r6, #8
 8004ff4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ff8:	ea43 6606 	orr.w	r6, r3, r6, lsl #24
            memcpy(&cth32->data_len, &u32, sizeof(u32));
 8004ffc:	f840 6c05 	str.w	r6, [r0, #-5]
            cth32->code = pkt->code;
 8005000:	78a3      	ldrb	r3, [r4, #2]
 8005002:	f800 3c01 	strb.w	r3, [r0, #-1]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 8005006:	79a2      	ldrb	r2, [r4, #6]
 8005008:	e792      	b.n	8004f30 <coap_serialize_message+0x26c>
        if (pkt->payload_len < OS_MBUF_PKTLEN(pkt->payload_m)) {
 800500a:	d202      	bcs.n	8005012 <coap_serialize_message+0x34e>
            os_mbuf_adj(pkt->payload_m,
 800500c:	1ac9      	subs	r1, r1, r3
 800500e:	f001 faab 	bl	8006568 <os_mbuf_adj>
        os_mbuf_concat(m, pkt->payload_m);
 8005012:	4628      	mov	r0, r5
 8005014:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005016:	f001 fb34 	bl	8006682 <os_mbuf_concat>
    return 0;
 800501a:	2000      	movs	r0, #0
}
 800501c:	b003      	add	sp, #12
 800501e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005022:	bf00      	nop

08005024 <coap_send_message>:
/*---------------------------------------------------------------------------*/
void
coap_send_message(struct os_mbuf *m, int dup)
{
 8005024:	b508      	push	{r3, lr}
 8005026:	4603      	mov	r3, r0
    OC_LOG(INFO, "coap_send_message(): (%u) %s\n", OS_MBUF_PKTLEN(m),
      dup ? "dup" : "");

    STATS_INC(coap_stats, oframe);

    if (dup) {
 8005028:	b119      	cbz	r1, 8005032 <coap_send_message+0xe>
        m = os_mbuf_dup(m);
 800502a:	f001 fa64 	bl	80064f6 <os_mbuf_dup>
        if (!m) {
 800502e:	4603      	mov	r3, r0
 8005030:	b120      	cbz	r0, 800503c <coap_send_message+0x18>
            STATS_INC(coap_stats, oerr);
            return;
        }
    }
    oc_send_message(m);
 8005032:	4618      	mov	r0, r3
}
 8005034:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    oc_send_message(m);
 8005038:	f7ff bc90 	b.w	800495c <oc_send_message>
}
 800503c:	bd08      	pop	{r3, pc}

0800503e <coap_set_token>:
}
/*---------------------------------------------------------------------------*/
int
coap_set_token(coap_packet_t *pkt, const uint8_t *token, size_t token_len)
{
    pkt->token_len = MIN(COAP_TOKEN_LEN, token_len);
 800503e:	2a08      	cmp	r2, #8
 8005040:	bf28      	it	cs
 8005042:	2208      	movcs	r2, #8
{
 8005044:	b510      	push	{r4, lr}
    pkt->token_len = MIN(COAP_TOKEN_LEN, token_len);
 8005046:	4614      	mov	r4, r2
 8005048:	7182      	strb	r2, [r0, #6]
    memcpy(pkt->token, token, pkt->token_len);
 800504a:	3007      	adds	r0, #7
 800504c:	f002 f96c 	bl	8007328 <memcpy>

    return pkt->token_len;
}
 8005050:	4620      	mov	r0, r4
 8005052:	bd10      	pop	{r4, pc}

08005054 <coap_set_header_content_format>:
#endif
int
coap_set_header_content_format(coap_packet_t *pkt, unsigned int format)
{
    pkt->content_format = format;
    SET_OPTION(pkt, COAP_OPTION_CONTENT_FORMAT);
 8005054:	7c03      	ldrb	r3, [r0, #16]
    pkt->content_format = format;
 8005056:	8301      	strh	r1, [r0, #24]
    SET_OPTION(pkt, COAP_OPTION_CONTENT_FORMAT);
 8005058:	f043 0310 	orr.w	r3, r3, #16
 800505c:	7403      	strb	r3, [r0, #16]
    return 1;
}
 800505e:	2001      	movs	r0, #1
 8005060:	4770      	bx	lr

08005062 <coap_set_header_accept>:
#ifdef OC_CLIENT
int
coap_set_header_accept(coap_packet_t *pkt, unsigned int accept)
{
    pkt->accept = accept;
    SET_OPTION(pkt, COAP_OPTION_ACCEPT);
 8005062:	7c43      	ldrb	r3, [r0, #17]
    pkt->accept = accept;
 8005064:	8681      	strh	r1, [r0, #52]	; 0x34
    SET_OPTION(pkt, COAP_OPTION_ACCEPT);
 8005066:	f043 0302 	orr.w	r3, r3, #2
 800506a:	7443      	strb	r3, [r0, #17]
    return 1;
}
 800506c:	2001      	movs	r0, #1
 800506e:	4770      	bx	lr

08005070 <coap_set_header_uri_path>:
    return maxlen;
}
#ifdef OC_CLIENT
int
coap_set_header_uri_path(coap_packet_t *pkt, const char *path)
{
 8005070:	b510      	push	{r4, lr}
 8005072:	4604      	mov	r4, r0
 8005074:	4608      	mov	r0, r1
    while (path[0] == '/') {
 8005076:	7803      	ldrb	r3, [r0, #0]
 8005078:	3101      	adds	r1, #1
 800507a:	2b2f      	cmp	r3, #47	; 0x2f
 800507c:	d0fa      	beq.n	8005074 <coap_set_header_uri_path+0x4>
        ++path;
    }
    pkt->uri_path = (char *)path;
 800507e:	62e0      	str	r0, [r4, #44]	; 0x2c
    pkt->uri_path_len = strlen(path);
 8005080:	f002 f988 	bl	8007394 <strlen>

    SET_OPTION(pkt, COAP_OPTION_URI_PATH);
 8005084:	7c23      	ldrb	r3, [r4, #16]
    pkt->uri_path_len = strlen(path);
 8005086:	8560      	strh	r0, [r4, #42]	; 0x2a
    SET_OPTION(pkt, COAP_OPTION_URI_PATH);
 8005088:	f043 0308 	orr.w	r3, r3, #8
 800508c:	7423      	strb	r3, [r4, #16]
    return pkt->uri_path_len;
}
 800508e:	b280      	uxth	r0, r0
 8005090:	bd10      	pop	{r4, pc}

08005092 <coap_set_header_observe>:

int
coap_set_header_observe(coap_packet_t *pkt, uint32_t observe)
{
    pkt->observe = observe;
    SET_OPTION(pkt, COAP_OPTION_OBSERVE);
 8005092:	7bc3      	ldrb	r3, [r0, #15]
    pkt->observe = observe;
 8005094:	6301      	str	r1, [r0, #48]	; 0x30
    SET_OPTION(pkt, COAP_OPTION_OBSERVE);
 8005096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800509a:	73c3      	strb	r3, [r0, #15]
    return 1;
}
 800509c:	2001      	movs	r0, #1
 800509e:	4770      	bx	lr

080050a0 <oc_evq_get>:

struct os_eventq *
oc_evq_get(void)
{
    return oc_evq;
}
 80050a0:	4b01      	ldr	r3, [pc, #4]	; (80050a8 <oc_evq_get+0x8>)
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	200009c4 	.word	0x200009c4

080050ac <oc_transport_register>:

int8_t
oc_transport_register(const struct oc_transport *ot)
{
    int i;
    int first = -1;
 80050ac:	f04f 33ff 	mov.w	r3, #4294967295

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 80050b0:	2200      	movs	r2, #0
{
 80050b2:	b530      	push	{r4, r5, lr}
        if (oc_transports[i] == ot) {
 80050b4:	4909      	ldr	r1, [pc, #36]	; (80050dc <oc_transport_register+0x30>)
 80050b6:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
 80050ba:	0095      	lsls	r5, r2, #2
 80050bc:	4284      	cmp	r4, r0
 80050be:	d009      	beq.n	80050d4 <oc_transport_register+0x28>
            return -1;
        }
        if (oc_transports[i] == NULL && first < 0) {
 80050c0:	b91c      	cbnz	r4, 80050ca <oc_transport_register+0x1e>
 80050c2:	1c5c      	adds	r4, r3, #1
            oc_transports[i] = ot;
 80050c4:	bf04      	itt	eq
 80050c6:	4613      	moveq	r3, r2
 80050c8:	5068      	streq	r0, [r5, r1]
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 80050ca:	3201      	adds	r2, #1
 80050cc:	2a08      	cmp	r2, #8
 80050ce:	d1f2      	bne.n	80050b6 <oc_transport_register+0xa>
            first = i;
        }
    }
    return first;
 80050d0:	b258      	sxtb	r0, r3
}
 80050d2:	bd30      	pop	{r4, r5, pc}
            return -1;
 80050d4:	f04f 30ff 	mov.w	r0, #4294967295
 80050d8:	e7fb      	b.n	80050d2 <oc_transport_register+0x26>
 80050da:	bf00      	nop
 80050dc:	20003408 	.word	0x20003408

080050e0 <oc_send_buffer>:
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
 80050e0:	7e03      	ldrb	r3, [r0, #24]
 80050e2:	4a05      	ldr	r2, [pc, #20]	; (80050f8 <oc_send_buffer+0x18>)
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
 80050ec:	b10b      	cbz	r3, 80050f2 <oc_send_buffer+0x12>
        ot->ot_tx_ucast(m);
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	4718      	bx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
 80050f2:	f001 b99e 	b.w	8006432 <os_mbuf_free_chain>
 80050f6:	bf00      	nop
 80050f8:	20003408 	.word	0x20003408

080050fc <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
 80050fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 8005100:	2500      	movs	r5, #0
{
 8005102:	4606      	mov	r6, r0
    const struct oc_transport *prev = NULL;
 8005104:	462c      	mov	r4, r5
        if (!oc_transports[i]) {
 8005106:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8005148 <oc_send_multicast_message+0x4c>
 800510a:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 800510e:	b16f      	cbz	r7, 800512c <oc_send_multicast_message+0x30>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
 8005110:	b15c      	cbz	r4, 800512a <oc_send_multicast_message+0x2e>
            n = os_mbuf_dup(m);
 8005112:	4630      	mov	r0, r6
 8005114:	f001 f9ef 	bl	80064f6 <os_mbuf_dup>
 8005118:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	4630      	mov	r0, r6
 800511e:	4798      	blx	r3
            if (!n) {
 8005120:	f1b8 0f00 	cmp.w	r8, #0
 8005124:	d10c      	bne.n	8005140 <oc_send_multicast_message+0x44>
        prev = ot;
    }
    if (prev) {
        prev->ot_tx_mcast(m);
    }
}
 8005126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512a:	463c      	mov	r4, r7
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 800512c:	3501      	adds	r5, #1
 800512e:	2d08      	cmp	r5, #8
 8005130:	d1eb      	bne.n	800510a <oc_send_multicast_message+0xe>
    if (prev) {
 8005132:	2c00      	cmp	r4, #0
 8005134:	d0f7      	beq.n	8005126 <oc_send_multicast_message+0x2a>
        prev->ot_tx_mcast(m);
 8005136:	6923      	ldr	r3, [r4, #16]
 8005138:	4630      	mov	r0, r6
}
 800513a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        prev->ot_tx_mcast(m);
 800513e:	4718      	bx	r3
 8005140:	463c      	mov	r4, r7
 8005142:	4646      	mov	r6, r8
 8005144:	e7f2      	b.n	800512c <oc_send_multicast_message+0x30>
 8005146:	bf00      	nop
 8005148:	20003408 	.word	0x20003408

0800514c <oc_init>:
    return rc;
}

void
oc_init(void)
{
 800514c:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
 800514e:	4b07      	ldr	r3, [pc, #28]	; (800516c <oc_init+0x20>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	b923      	cbnz	r3, 800515e <oc_init+0x12>
 8005154:	461a      	mov	r2, r3
 8005156:	4619      	mov	r1, r3
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fd61 	bl	8005c20 <__assert_func>
    oc_ri_mem_init();
 800515e:	f7ff fc91 	bl	8004a84 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
 8005162:	f001 f8c3 	bl	80062ec <os_eventq_dflt_get>
    oc_evq = evq;
 8005166:	4b02      	ldr	r3, [pc, #8]	; (8005170 <oc_init+0x24>)
 8005168:	6018      	str	r0, [r3, #0]
}
 800516a:	bd08      	pop	{r3, pc}
 800516c:	20003428 	.word	0x20003428
 8005170:	200009c4 	.word	0x200009c4

08005174 <oc_clock_time>:
{
    /* in mynewt clock is initialized elsewhere */
}
oc_clock_time_t oc_clock_time(void)
{
    return os_time_get();
 8005174:	f001 bf12 	b.w	8006f9c <os_time_get>

08005178 <oc_random_rand>:
{
    srand(seed);
}

unsigned short oc_random_rand(void)
{
 8005178:	b508      	push	{r3, lr}
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
 800517a:	f001 ffeb 	bl	8007154 <lrand48>
    return rand();
}
 800517e:	b280      	uxth	r0, r0
 8005180:	bd08      	pop	{r3, pc}

08005182 <oc_new_string>:
#include "oic/port/mynewt/config.h"
#include "oic/oc_helpers.h"

void
oc_new_string(oc_string_t *os, const char str[])
{
 8005182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005186:	4607      	mov	r7, r0
    int len = strlen(str);
 8005188:	4608      	mov	r0, r1
{
 800518a:	460e      	mov	r6, r1
    int len = strlen(str);
 800518c:	f002 f902 	bl	8007394 <strlen>

    os->os_str = malloc(len + 1);
 8005190:	f100 0801 	add.w	r8, r0, #1
    int len = strlen(str);
 8005194:	4604      	mov	r4, r0
    os->os_str = malloc(len + 1);
 8005196:	4640      	mov	r0, r8
 8005198:	f002 f840 	bl	800721c <malloc>
 800519c:	4605      	mov	r5, r0
 800519e:	6078      	str	r0, [r7, #4]
    if (os->os_str) {
 80051a0:	b138      	cbz	r0, 80051b2 <oc_new_string+0x30>
        os->os_sz = len + 1;
 80051a2:	f8a7 8000 	strh.w	r8, [r7]
        memcpy(os->os_str, str, len);
 80051a6:	4622      	mov	r2, r4
 80051a8:	4631      	mov	r1, r6
 80051aa:	f002 f8bd 	bl	8007328 <memcpy>
        os->os_str[len] = '\0';
 80051ae:	2300      	movs	r3, #0
 80051b0:	552b      	strb	r3, [r5, r4]
    }
}
 80051b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080051b6 <oc_free_string>:
    }
}

void
oc_free_string(oc_string_t *os)
{
 80051b6:	b510      	push	{r4, lr}
 80051b8:	4604      	mov	r4, r0
    free(os->os_str);
 80051ba:	6840      	ldr	r0, [r0, #4]
 80051bc:	f002 f87a 	bl	80072b4 <free>
    os->os_sz = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	8023      	strh	r3, [r4, #0]
}
 80051c4:	bd10      	pop	{r4, pc}

080051c6 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
 80051c6:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
 80051c8:	f000 fd2a 	bl	8005c20 <__assert_func>

080051cc <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
 80051cc:	2201      	movs	r2, #1
 80051ce:	4b01      	ldr	r3, [pc, #4]	; (80051d4 <sysinit_start+0x8>)
 80051d0:	701a      	strb	r2, [r3, #0]
}
 80051d2:	4770      	bx	lr
 80051d4:	20003428 	.word	0x20003428

080051d8 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
 80051d8:	2200      	movs	r2, #0
 80051da:	4b01      	ldr	r3, [pc, #4]	; (80051e0 <sysinit_end+0x8>)
 80051dc:	701a      	strb	r2, [r3, #0]
}
 80051de:	4770      	bx	lr
 80051e0:	20003428 	.word	0x20003428

080051e4 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
 80051e4:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
 80051e6:	4803      	ldr	r0, [pc, #12]	; (80051f4 <__wrap_coap_receive+0x10>)
 80051e8:	f7fe ff66 	bl	80040b8 <console_printf>
    return -1;
}
 80051ec:	f04f 30ff 	mov.w	r0, #4294967295
 80051f0:	bd08      	pop	{r3, pc}
 80051f2:	bf00      	nop
 80051f4:	0800e085 	.word	0x0800e085

080051f8 <_fini>:
//  Other Functions

//  Dummy destructor for global C++ objects, since our program never terminates.  
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
void _fini(void) { }
 80051f8:	4770      	bx	lr
	...

080051fc <json_encode_object_start>:
    (__e)->je_write((__e)->je_arg, "]", sizeof("]")-1);


int
json_encode_object_start(struct json_encoder *encoder)
{
 80051fc:	b510      	push	{r4, lr}
 80051fe:	4604      	mov	r4, r0
 8005200:	e9d0 3000 	ldrd	r3, r0, [r0]
    if (encoder->je_wr_commas) {
 8005204:	7a22      	ldrb	r2, [r4, #8]
 8005206:	07d2      	lsls	r2, r2, #31
 8005208:	d506      	bpl.n	8005218 <json_encode_object_start+0x1c>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 800520a:	2201      	movs	r2, #1
 800520c:	4908      	ldr	r1, [pc, #32]	; (8005230 <json_encode_object_start+0x34>)
 800520e:	4798      	blx	r3
        encoder->je_wr_commas = 0;
 8005210:	7a23      	ldrb	r3, [r4, #8]
 8005212:	f36f 0300 	bfc	r3, #0, #1
 8005216:	7223      	strb	r3, [r4, #8]
    }
    JSON_ENCODE_OBJECT_START(encoder);
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	2201      	movs	r2, #1
 800521c:	4905      	ldr	r1, [pc, #20]	; (8005234 <json_encode_object_start+0x38>)
 800521e:	6860      	ldr	r0, [r4, #4]
 8005220:	4798      	blx	r3
    encoder->je_wr_commas = 0;
 8005222:	7a23      	ldrb	r3, [r4, #8]

    return (0);
}
 8005224:	2000      	movs	r0, #0
    encoder->je_wr_commas = 0;
 8005226:	f36f 0300 	bfc	r3, #0, #1
 800522a:	7223      	strb	r3, [r4, #8]
}
 800522c:	bd10      	pop	{r4, pc}
 800522e:	bf00      	nop
 8005230:	0800e535 	.word	0x0800e535
 8005234:	0800e0a9 	.word	0x0800e0a9

08005238 <json_encode_object_key>:
    return (rc);
}

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	4604      	mov	r4, r0
 800523c:	e9d0 3000 	ldrd	r3, r0, [r0]
    if (encoder->je_wr_commas) {
 8005240:	7a22      	ldrb	r2, [r4, #8]
{
 8005242:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
 8005244:	07d2      	lsls	r2, r2, #31
 8005246:	d506      	bpl.n	8005256 <json_encode_object_key+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 8005248:	2201      	movs	r2, #1
 800524a:	490d      	ldr	r1, [pc, #52]	; (8005280 <json_encode_object_key+0x48>)
 800524c:	4798      	blx	r3
        encoder->je_wr_commas = 0;
 800524e:	7a23      	ldrb	r3, [r4, #8]
 8005250:	f36f 0300 	bfc	r3, #0, #1
 8005254:	7223      	strb	r3, [r4, #8]
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	2201      	movs	r2, #1
 800525a:	490a      	ldr	r1, [pc, #40]	; (8005284 <json_encode_object_key+0x4c>)
 800525c:	6860      	ldr	r0, [r4, #4]
 800525e:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
 8005260:	4628      	mov	r0, r5
 8005262:	f002 f897 	bl	8007394 <strlen>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	4602      	mov	r2, r0
 800526a:	4629      	mov	r1, r5
 800526c:	6860      	ldr	r0, [r4, #4]
 800526e:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	2203      	movs	r2, #3
 8005274:	4904      	ldr	r1, [pc, #16]	; (8005288 <json_encode_object_key+0x50>)
 8005276:	6860      	ldr	r0, [r4, #4]
 8005278:	4798      	blx	r3

    return (0);
}
 800527a:	2000      	movs	r0, #0
 800527c:	bd38      	pop	{r3, r4, r5, pc}
 800527e:	bf00      	nop
 8005280:	0800e535 	.word	0x0800e535
 8005284:	0800e0a3 	.word	0x0800e0a3
 8005288:	0800e0a5 	.word	0x0800e0a5

0800528c <json_encode_object_entry>:

int
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	4604      	mov	r4, r0
 8005290:	e9d0 3000 	ldrd	r3, r0, [r0]
 8005294:	4616      	mov	r6, r2
    int rc;

    if (encoder->je_wr_commas) {
 8005296:	7a22      	ldrb	r2, [r4, #8]
{
 8005298:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
 800529a:	07d2      	lsls	r2, r2, #31
 800529c:	d506      	bpl.n	80052ac <json_encode_object_entry+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 800529e:	2201      	movs	r2, #1
 80052a0:	4910      	ldr	r1, [pc, #64]	; (80052e4 <json_encode_object_entry+0x58>)
 80052a2:	4798      	blx	r3
        encoder->je_wr_commas = 0;
 80052a4:	7a23      	ldrb	r3, [r4, #8]
 80052a6:	f36f 0300 	bfc	r3, #0, #1
 80052aa:	7223      	strb	r3, [r4, #8]
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	490d      	ldr	r1, [pc, #52]	; (80052e8 <json_encode_object_entry+0x5c>)
 80052b2:	6860      	ldr	r0, [r4, #4]
 80052b4:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
 80052b6:	4628      	mov	r0, r5
 80052b8:	f002 f86c 	bl	8007394 <strlen>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	4602      	mov	r2, r0
 80052c0:	4629      	mov	r1, r5
 80052c2:	6860      	ldr	r0, [r4, #4]
 80052c4:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
 80052c6:	4909      	ldr	r1, [pc, #36]	; (80052ec <json_encode_object_entry+0x60>)
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	2203      	movs	r2, #3
 80052cc:	6860      	ldr	r0, [r4, #4]
 80052ce:	4798      	blx	r3

    rc = json_encode_value(encoder, val);
 80052d0:	4631      	mov	r1, r6
 80052d2:	4620      	mov	r0, r4
 80052d4:	f000 f80c 	bl	80052f0 <json_encode_value>
    if (rc != 0) {
 80052d8:	b918      	cbnz	r0, 80052e2 <json_encode_object_entry+0x56>
        goto err;
    }
    encoder->je_wr_commas = 1;
 80052da:	7a23      	ldrb	r3, [r4, #8]
 80052dc:	f043 0301 	orr.w	r3, r3, #1
 80052e0:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
 80052e2:	bd70      	pop	{r4, r5, r6, pc}
 80052e4:	0800e535 	.word	0x0800e535
 80052e8:	0800e0a3 	.word	0x0800e0a3
 80052ec:	0800e0a5 	.word	0x0800e0a5

080052f0 <json_encode_value>:
{
 80052f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    switch (jv->jv_type) {
 80052f4:	784b      	ldrb	r3, [r1, #1]
{
 80052f6:	4604      	mov	r4, r0
 80052f8:	460d      	mov	r5, r1
    switch (jv->jv_type) {
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	f200 80a8 	bhi.w	8005450 <json_encode_value+0x160>
 8005300:	e8df f003 	tbb	[pc, r3]
 8005304:	241e1503 	.word	0x241e1503
 8005308:	8c6b      	.short	0x8c6b
            len = sprintf(encoder->je_encode_buf, "%s",
 800530a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800530e:	4313      	orrs	r3, r2
 8005310:	4b51      	ldr	r3, [pc, #324]	; (8005458 <json_encode_value+0x168>)
 8005312:	f100 0609 	add.w	r6, r0, #9
 8005316:	4a51      	ldr	r2, [pc, #324]	; (800545c <json_encode_value+0x16c>)
 8005318:	4951      	ldr	r1, [pc, #324]	; (8005460 <json_encode_value+0x170>)
 800531a:	bf18      	it	ne
 800531c:	461a      	movne	r2, r3
 800531e:	4630      	mov	r0, r6
 8005320:	f002 f817 	bl	8007352 <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
 8005324:	4602      	mov	r2, r0
 8005326:	4631      	mov	r1, r6
 8005328:	6823      	ldr	r3, [r4, #0]
            JSON_ENCODE_OBJECT_END(encoder);
 800532a:	6860      	ldr	r0, [r4, #4]
 800532c:	e020      	b.n	8005370 <json_encode_value+0x80>
            len = sprintf(encoder->je_encode_buf, "%llu",
 800532e:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8005332:	494c      	ldr	r1, [pc, #304]	; (8005464 <json_encode_value+0x174>)
 8005334:	f100 0609 	add.w	r6, r0, #9
 8005338:	4630      	mov	r0, r6
 800533a:	f002 f80a 	bl	8007352 <sprintf>
 800533e:	e7f1      	b.n	8005324 <json_encode_value+0x34>
            len = sprintf(encoder->je_encode_buf, "%lld",
 8005340:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8005344:	f100 0609 	add.w	r6, r0, #9
 8005348:	4947      	ldr	r1, [pc, #284]	; (8005468 <json_encode_value+0x178>)
 800534a:	e7f5      	b.n	8005338 <json_encode_value+0x48>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 800534c:	6803      	ldr	r3, [r0, #0]
 800534e:	2201      	movs	r2, #1
 8005350:	4946      	ldr	r1, [pc, #280]	; (800546c <json_encode_value+0x17c>)
 8005352:	6840      	ldr	r0, [r0, #4]
 8005354:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 8005356:	2600      	movs	r6, #0
                        encoder->je_write(encoder->je_arg, "\\f",
 8005358:	4f45      	ldr	r7, [pc, #276]	; (8005470 <json_encode_value+0x180>)
                        encoder->je_write(encoder->je_arg, "\\",
 800535a:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8005494 <json_encode_value+0x1a4>
                        encoder->je_write(encoder->je_arg, "\\r",
 800535e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8005498 <json_encode_value+0x1a8>
            for (i = 0; i < jv->jv_len; i++) {
 8005362:	886a      	ldrh	r2, [r5, #2]
 8005364:	e9d4 3000 	ldrd	r3, r0, [r4]
 8005368:	42b2      	cmp	r2, r6
 800536a:	dc05      	bgt.n	8005378 <json_encode_value+0x88>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 800536c:	2201      	movs	r2, #1
 800536e:	493f      	ldr	r1, [pc, #252]	; (800546c <json_encode_value+0x17c>)
            JSON_ENCODE_OBJECT_END(encoder);
 8005370:	4798      	blx	r3
    return (0);
 8005372:	2000      	movs	r0, #0
}
 8005374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                switch (jv->jv_val.str[i]) {
 8005378:	68aa      	ldr	r2, [r5, #8]
 800537a:	1991      	adds	r1, r2, r6
 800537c:	5d92      	ldrb	r2, [r2, r6]
 800537e:	2a0c      	cmp	r2, #12
 8005380:	d028      	beq.n	80053d4 <json_encode_value+0xe4>
 8005382:	d808      	bhi.n	8005396 <json_encode_value+0xa6>
 8005384:	2a09      	cmp	r2, #9
 8005386:	d01c      	beq.n	80053c2 <json_encode_value+0xd2>
 8005388:	2a0a      	cmp	r2, #10
 800538a:	d020      	beq.n	80053ce <json_encode_value+0xde>
 800538c:	2a08      	cmp	r2, #8
 800538e:	d107      	bne.n	80053a0 <json_encode_value+0xb0>
                        encoder->je_write(encoder->je_arg, "\\b",
 8005390:	2202      	movs	r2, #2
 8005392:	4938      	ldr	r1, [pc, #224]	; (8005474 <json_encode_value+0x184>)
 8005394:	e012      	b.n	80053bc <json_encode_value+0xcc>
                switch (jv->jv_val.str[i]) {
 8005396:	2a22      	cmp	r2, #34	; 0x22
 8005398:	d008      	beq.n	80053ac <json_encode_value+0xbc>
 800539a:	d803      	bhi.n	80053a4 <json_encode_value+0xb4>
 800539c:	2a0d      	cmp	r2, #13
 800539e:	d013      	beq.n	80053c8 <json_encode_value+0xd8>
                        encoder->je_write(encoder->je_arg,
 80053a0:	2201      	movs	r2, #1
 80053a2:	e00b      	b.n	80053bc <json_encode_value+0xcc>
                switch (jv->jv_val.str[i]) {
 80053a4:	2a2f      	cmp	r2, #47	; 0x2f
 80053a6:	d001      	beq.n	80053ac <json_encode_value+0xbc>
 80053a8:	2a5c      	cmp	r2, #92	; 0x5c
 80053aa:	d1f9      	bne.n	80053a0 <json_encode_value+0xb0>
                        encoder->je_write(encoder->je_arg, "\\",
 80053ac:	2201      	movs	r2, #1
 80053ae:	4641      	mov	r1, r8
 80053b0:	4798      	blx	r3
                        encoder->je_write(encoder->je_arg,
 80053b2:	2201      	movs	r2, #1
 80053b4:	68a9      	ldr	r1, [r5, #8]
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	6860      	ldr	r0, [r4, #4]
 80053ba:	4431      	add	r1, r6
                        encoder->je_write(encoder->je_arg,
 80053bc:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 80053be:	3601      	adds	r6, #1
 80053c0:	e7cf      	b.n	8005362 <json_encode_value+0x72>
                        encoder->je_write(encoder->je_arg, "\\t",
 80053c2:	2202      	movs	r2, #2
 80053c4:	492c      	ldr	r1, [pc, #176]	; (8005478 <json_encode_value+0x188>)
 80053c6:	e7f9      	b.n	80053bc <json_encode_value+0xcc>
                        encoder->je_write(encoder->je_arg, "\\r",
 80053c8:	2202      	movs	r2, #2
 80053ca:	4649      	mov	r1, r9
 80053cc:	e7f6      	b.n	80053bc <json_encode_value+0xcc>
                        encoder->je_write(encoder->je_arg, "\\n",
 80053ce:	2202      	movs	r2, #2
 80053d0:	492a      	ldr	r1, [pc, #168]	; (800547c <json_encode_value+0x18c>)
 80053d2:	e7f3      	b.n	80053bc <json_encode_value+0xcc>
                        encoder->je_write(encoder->je_arg, "\\f",
 80053d4:	2202      	movs	r2, #2
 80053d6:	4639      	mov	r1, r7
 80053d8:	e7f0      	b.n	80053bc <json_encode_value+0xcc>
            JSON_ENCODE_ARRAY_START(encoder);
 80053da:	6803      	ldr	r3, [r0, #0]
 80053dc:	2201      	movs	r2, #1
 80053de:	4928      	ldr	r1, [pc, #160]	; (8005480 <json_encode_value+0x190>)
 80053e0:	6840      	ldr	r0, [r0, #4]
 80053e2:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 80053e4:	2600      	movs	r6, #0
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 80053e6:	4f27      	ldr	r7, [pc, #156]	; (8005484 <json_encode_value+0x194>)
            for (i = 0; i < jv->jv_len; i++) {
 80053e8:	886b      	ldrh	r3, [r5, #2]
 80053ea:	42b3      	cmp	r3, r6
 80053ec:	dc03      	bgt.n	80053f6 <json_encode_value+0x106>
            JSON_ENCODE_ARRAY_END(encoder);
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	2201      	movs	r2, #1
 80053f2:	4925      	ldr	r1, [pc, #148]	; (8005488 <json_encode_value+0x198>)
 80053f4:	e799      	b.n	800532a <json_encode_value+0x3a>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
 80053f6:	68eb      	ldr	r3, [r5, #12]
 80053f8:	4620      	mov	r0, r4
 80053fa:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80053fe:	f7ff ff77 	bl	80052f0 <json_encode_value>
                if (rc != 0) {
 8005402:	2800      	cmp	r0, #0
 8005404:	d1b6      	bne.n	8005374 <json_encode_value+0x84>
                if (i != jv->jv_len - 1) {
 8005406:	886b      	ldrh	r3, [r5, #2]
 8005408:	3b01      	subs	r3, #1
 800540a:	42b3      	cmp	r3, r6
 800540c:	d004      	beq.n	8005418 <json_encode_value+0x128>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	2201      	movs	r2, #1
 8005412:	4639      	mov	r1, r7
 8005414:	6860      	ldr	r0, [r4, #4]
 8005416:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 8005418:	3601      	adds	r6, #1
 800541a:	e7e5      	b.n	80053e8 <json_encode_value+0xf8>
            JSON_ENCODE_OBJECT_START(encoder);
 800541c:	6803      	ldr	r3, [r0, #0]
 800541e:	2201      	movs	r2, #1
 8005420:	491a      	ldr	r1, [pc, #104]	; (800548c <json_encode_value+0x19c>)
 8005422:	6840      	ldr	r0, [r0, #4]
 8005424:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
 8005426:	2600      	movs	r6, #0
 8005428:	886b      	ldrh	r3, [r5, #2]
 800542a:	42b3      	cmp	r3, r6
 800542c:	dc03      	bgt.n	8005436 <json_encode_value+0x146>
            JSON_ENCODE_OBJECT_END(encoder);
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	2201      	movs	r2, #1
 8005432:	4917      	ldr	r1, [pc, #92]	; (8005490 <json_encode_value+0x1a0>)
 8005434:	e779      	b.n	800532a <json_encode_value+0x3a>
                rc = json_encode_object_entry(encoder,
 8005436:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 800543a:	4620      	mov	r0, r4
 800543c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 8005440:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8005444:	f7ff ff22 	bl	800528c <json_encode_object_entry>
                if (rc != 0) {
 8005448:	2800      	cmp	r0, #0
 800544a:	d193      	bne.n	8005374 <json_encode_value+0x84>
            for (i = 0; i < jv->jv_len; i++) {
 800544c:	3601      	adds	r6, #1
 800544e:	e7eb      	b.n	8005428 <json_encode_value+0x138>
            rc = -1;
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	e78e      	b.n	8005374 <json_encode_value+0x84>
 8005456:	bf00      	nop
 8005458:	0800e0ab 	.word	0x0800e0ab
 800545c:	0800e0b0 	.word	0x0800e0b0
 8005460:	0800e6f7 	.word	0x0800e6f7
 8005464:	0800e0b6 	.word	0x0800e0b6
 8005468:	0800e0bb 	.word	0x0800e0bb
 800546c:	0800e0a3 	.word	0x0800e0a3
 8005470:	0800e0cb 	.word	0x0800e0cb
 8005474:	0800e0ce 	.word	0x0800e0ce
 8005478:	0800e0c2 	.word	0x0800e0c2
 800547c:	0800e0c8 	.word	0x0800e0c8
 8005480:	0800e0d1 	.word	0x0800e0d1
 8005484:	0800e535 	.word	0x0800e535
 8005488:	0800e0d3 	.word	0x0800e0d3
 800548c:	0800e0a9 	.word	0x0800e0a9
 8005490:	0800e0d5 	.word	0x0800e0d5
 8005494:	0800e0c0 	.word	0x0800e0c0
 8005498:	0800e0c5 	.word	0x0800e0c5

0800549c <json_encode_object_finish>:

int
json_encode_object_finish(struct json_encoder *encoder)
{
 800549c:	b510      	push	{r4, lr}
 800549e:	4604      	mov	r4, r0
    JSON_ENCODE_OBJECT_END(encoder);
 80054a0:	6803      	ldr	r3, [r0, #0]
 80054a2:	2201      	movs	r2, #1
 80054a4:	4904      	ldr	r1, [pc, #16]	; (80054b8 <json_encode_object_finish+0x1c>)
 80054a6:	6840      	ldr	r0, [r0, #4]
 80054a8:	4798      	blx	r3
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
 80054aa:	7a23      	ldrb	r3, [r4, #8]

    return (0);
}
 80054ac:	2000      	movs	r0, #0
    encoder->je_wr_commas = 1;
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	7223      	strb	r3, [r4, #8]
}
 80054b4:	bd10      	pop	{r4, pc}
 80054b6:	bf00      	nop
 80054b8:	0800e0d5 	.word	0x0800e0d5

080054bc <json_encode_array_name>:

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
    return json_encode_object_key(encoder, name);
 80054bc:	f7ff bebc 	b.w	8005238 <json_encode_object_key>

080054c0 <json_encode_array_start>:
}

int
json_encode_array_start(struct json_encoder *encoder)
{
 80054c0:	b510      	push	{r4, lr}
 80054c2:	4604      	mov	r4, r0
    JSON_ENCODE_ARRAY_START(encoder);
 80054c4:	6803      	ldr	r3, [r0, #0]
 80054c6:	2201      	movs	r2, #1
 80054c8:	4904      	ldr	r1, [pc, #16]	; (80054dc <json_encode_array_start+0x1c>)
 80054ca:	6840      	ldr	r0, [r0, #4]
 80054cc:	4798      	blx	r3
    encoder->je_wr_commas = 0;
 80054ce:	7a23      	ldrb	r3, [r4, #8]

    return (0);
}
 80054d0:	2000      	movs	r0, #0
    encoder->je_wr_commas = 0;
 80054d2:	f36f 0300 	bfc	r3, #0, #1
 80054d6:	7223      	strb	r3, [r4, #8]
}
 80054d8:	bd10      	pop	{r4, pc}
 80054da:	bf00      	nop
 80054dc:	0800e0d1 	.word	0x0800e0d1

080054e0 <json_encode_array_finish>:
}


int
json_encode_array_finish(struct json_encoder *encoder)
{
 80054e0:	b508      	push	{r3, lr}
    encoder->je_wr_commas = 1;
 80054e2:	7a03      	ldrb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
 80054e4:	2201      	movs	r2, #1
    encoder->je_wr_commas = 1;
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	7203      	strb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
 80054ec:	4902      	ldr	r1, [pc, #8]	; (80054f8 <json_encode_array_finish+0x18>)
 80054ee:	6803      	ldr	r3, [r0, #0]
 80054f0:	6840      	ldr	r0, [r0, #4]
 80054f2:	4798      	blx	r3

    return (0);
}
 80054f4:	2000      	movs	r0, #0
 80054f6:	bd08      	pop	{r3, pc}
 80054f8:	0800e0d3 	.word	0x0800e0d3

080054fc <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4604      	mov	r4, r0
 8005500:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
 8005502:	6880      	ldr	r0, [r0, #8]
 8005504:	b292      	uxth	r2, r2
 8005506:	f000 ffaa 	bl	800645e <os_mbuf_append>
    if (rc) {
 800550a:	b918      	cbnz	r0, 8005514 <cbor_mbuf_writer+0x18>
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
 800550c:	6862      	ldr	r2, [r4, #4]
 800550e:	442a      	add	r2, r5
 8005510:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
 8005512:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
 8005514:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005518:	e7fb      	b.n	8005512 <cbor_mbuf_writer+0x16>
	...

0800551c <cbor_mbuf_writer_init>:

void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
    cb->enc.bytes_written = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
 8005520:	4b01      	ldr	r3, [pc, #4]	; (8005528 <cbor_mbuf_writer_init+0xc>)
    cb->m = m;
 8005522:	6081      	str	r1, [r0, #8]
    cb->enc.write = &cbor_mbuf_writer;
 8005524:	6003      	str	r3, [r0, #0]
}
 8005526:	4770      	bx	lr
 8005528:	080054fd 	.word	0x080054fd

0800552c <cbor_encoder_init>:
 * zero.
 */
void cbor_encoder_init(CborEncoder *encoder, cbor_encoder_writer *writer, int flags)
{
    encoder->writer = writer;
    encoder->added = 0;
 800552c:	2300      	movs	r3, #0
    encoder->writer = writer;
 800552e:	6001      	str	r1, [r0, #0]
    encoder->flags = flags;
 8005530:	e9c0 3202 	strd	r3, r2, [r0, #8]
}
 8005534:	4770      	bx	lr

08005536 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return STM32_HW_ID_LEN;
}
 8005536:	200c      	movs	r0, #12
 8005538:	4770      	bx	lr
	...

0800553c <hal_bsp_hw_id>:
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
    int cnt;

    cnt = min(STM32_HW_ID_LEN, max_len);
 800553c:	290c      	cmp	r1, #12
 800553e:	bfa8      	it	ge
 8005540:	210c      	movge	r1, #12
{
 8005542:	b510      	push	{r4, lr}
    cnt = min(STM32_HW_ID_LEN, max_len);
 8005544:	460c      	mov	r4, r1
    memcpy(id, (void *)UID_BASE, cnt);
 8005546:	460a      	mov	r2, r1
 8005548:	4902      	ldr	r1, [pc, #8]	; (8005554 <hal_bsp_hw_id+0x18>)
 800554a:	f001 feed 	bl	8007328 <memcpy>

    return cnt;
}
 800554e:	4620      	mov	r0, r4
 8005550:	bd10      	pop	{r4, pc}
 8005552:	bf00      	nop
 8005554:	1ffff7e8 	.word	0x1ffff7e8

08005558 <sensor_mgr_insert>:
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
}

static void
sensor_mgr_insert(struct sensor *sensor)
{
 8005558:	4911      	ldr	r1, [pc, #68]	; (80055a0 <sensor_mgr_insert+0x48>)
 800555a:	b570      	push	{r4, r5, r6, lr}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
 800555c:	6a03      	ldr	r3, [r0, #32]
 800555e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 8005560:	4622      	mov	r2, r4
    if (!sensor->s_poll_rate) {
 8005562:	b17b      	cbz	r3, 8005584 <sensor_mgr_insert+0x2c>
            prev = cursor;
        }
        goto insert;
    }

    prev = cursor = NULL;
 8005564:	2300      	movs	r3, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 8005566:	b17a      	cbz	r2, 8005588 <sensor_mgr_insert+0x30>
        if (!cursor->s_poll_rate) {
 8005568:	6a15      	ldr	r5, [r2, #32]
 800556a:	b16d      	cbz	r5, 8005588 <sensor_mgr_insert+0x30>
            break;
        }

        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
 800556c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800556e:	6a56      	ldr	r6, [r2, #36]	; 0x24
 8005570:	1bad      	subs	r5, r5, r6
 8005572:	2d00      	cmp	r5, #0
 8005574:	db08      	blt.n	8005588 <sensor_mgr_insert+0x30>
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 8005576:	4613      	mov	r3, r2
 8005578:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800557c:	e7f3      	b.n	8005566 <sensor_mgr_insert+0xe>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800557e:	4613      	mov	r3, r2
 8005580:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005584:	2a00      	cmp	r2, #0
 8005586:	d1fa      	bne.n	800557e <sensor_mgr_insert+0x26>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
 8005588:	b91b      	cbnz	r3, 8005592 <sensor_mgr_insert+0x3a>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
 800558a:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 800558e:	6308      	str	r0, [r1, #48]	; 0x30
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
    }
}
 8005590:	bd70      	pop	{r4, r5, r6, pc}
        SLIST_INSERT_AFTER(prev, sensor, s_next);
 8005592:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005596:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800559a:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
}
 800559e:	e7f7      	b.n	8005590 <sensor_mgr_insert+0x38>
 80055a0:	20003430 	.word	0x20003430

080055a4 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
 80055a4:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
 80055a8:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
 80055ac:	e9d0 4506 	ldrd	r4, r5, [r0, #24]
 80055b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055b4:	ea02 0b04 	and.w	fp, r2, r4
 80055b8:	ea03 0c05 	and.w	ip, r3, r5
 80055bc:	ea0b 0200 	and.w	r2, fp, r0
 80055c0:	ea0c 0301 	and.w	r3, ip, r1
 80055c4:	4313      	orrs	r3, r2
}
 80055c6:	bf14      	ite	ne
 80055c8:	2001      	movne	r0, #1
 80055ca:	2000      	moveq	r0, #0
 80055cc:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}

080055d0 <sensor_read_data_func>:
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
 80055d0:	790b      	ldrb	r3, [r1, #4]
{
 80055d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055d6:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
 80055da:	2b01      	cmp	r3, #1
{
 80055dc:	4605      	mov	r5, r0
 80055de:	4688      	mov	r8, r1
 80055e0:	4691      	mov	r9, r2
    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
 80055e2:	d106      	bne.n	80055f2 <sensor_read_data_func+0x22>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
 80055e4:	f8d8 3000 	ldr.w	r3, [r8]
 80055e8:	b9c3      	cbnz	r3, 800561c <sensor_read_data_func+0x4c>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
    }

    return (0);
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	b003      	add	sp, #12
 80055ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
 80055f2:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 80055f4:	2c00      	cmp	r4, #0
 80055f6:	d0f5      	beq.n	80055e4 <sensor_read_data_func+0x14>
            if (listener->sl_sensor_type & type) {
 80055f8:	e9d4 2300 	ldrd	r2, r3, [r4]
 80055fc:	ea02 0006 	and.w	r0, r2, r6
 8005600:	ea03 0107 	and.w	r1, r3, r7
 8005604:	ea50 0301 	orrs.w	r3, r0, r1
 8005608:	d006      	beq.n	8005618 <sensor_read_data_func+0x48>
                listener->sl_func(sensor, listener->sl_arg, data, type);
 800560a:	e9cd 6700 	strd	r6, r7, [sp]
 800560e:	464a      	mov	r2, r9
 8005610:	68a3      	ldr	r3, [r4, #8]
 8005612:	68e1      	ldr	r1, [r4, #12]
 8005614:	4628      	mov	r0, r5
 8005616:	4798      	blx	r3
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
 8005618:	6924      	ldr	r4, [r4, #16]
 800561a:	e7eb      	b.n	80055f4 <sensor_read_data_func+0x24>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
 800561c:	464a      	mov	r2, r9
 800561e:	4628      	mov	r0, r5
 8005620:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005624:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
}
 8005628:	b003      	add	sp, #12
 800562a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
 800562e:	4718      	bx	r3

08005630 <sensor_mgr_match_bydevname>:
{
 8005630:	b508      	push	{r3, lr}
    if (!strcmp(sensor->s_dev->od_name, devname)) {
 8005632:	6803      	ldr	r3, [r0, #0]
 8005634:	69d8      	ldr	r0, [r3, #28]
 8005636:	f001 fe9b 	bl	8007370 <strcmp>
}
 800563a:	fab0 f080 	clz	r0, r0
 800563e:	0940      	lsrs	r0, r0, #5
 8005640:	bd08      	pop	{r3, pc}
	...

08005644 <sensor_base_ts_update_event>:
{
 8005644:	b570      	push	{r4, r5, r6, lr}
 8005646:	b086      	sub	sp, #24
    ticks = os_time_get();
 8005648:	f001 fca8 	bl	8006f9c <os_time_get>
    rc = os_gettimeofday(&ostv, &ostz);
 800564c:	ae02      	add	r6, sp, #8
    ticks = os_time_get();
 800564e:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
 8005650:	a901      	add	r1, sp, #4
 8005652:	4630      	mov	r0, r6
 8005654:	f001 fcf8 	bl	8007048 <os_gettimeofday>
    if (rc) {
 8005658:	b148      	cbz	r0, 800566e <sensor_base_ts_update_event+0x2a>
        ticks += OS_TICKS_PER_SEC * 600;
 800565a:	f504 2412 	add.w	r4, r4, #598016	; 0x92000
 800565e:	f504 64f8 	add.w	r4, r4, #1984	; 0x7c0
    os_callout_reset(&st_up_osco, ticks);
 8005662:	4621      	mov	r1, r4
 8005664:	4809      	ldr	r0, [pc, #36]	; (800568c <sensor_base_ts_update_event+0x48>)
 8005666:	f000 fc67 	bl	8005f38 <os_callout_reset>
}
 800566a:	b006      	add	sp, #24
 800566c:	bd70      	pop	{r4, r5, r6, pc}
    sensor_base_ts.st_ostv = ostv;
 800566e:	4d08      	ldr	r5, [pc, #32]	; (8005690 <sensor_base_ts_update_event+0x4c>)
 8005670:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8005674:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
 8005678:	9b01      	ldr	r3, [sp, #4]
    ticks += OS_TICKS_PER_SEC * 2000;
 800567a:	f504 14f4 	add.w	r4, r4, #1998848	; 0x1e8000
    sensor_base_ts.st_ostz = ostz;
 800567e:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
 8005680:	f000 fcda 	bl	8006038 <os_cputime_get32>
    ticks += OS_TICKS_PER_SEC * 2000;
 8005684:	f504 6490 	add.w	r4, r4, #1152	; 0x480
    sensor_base_ts.st_cputime = os_cputime_get32();
 8005688:	6168      	str	r0, [r5, #20]
 800568a:	e7ea      	b.n	8005662 <sensor_base_ts_update_event+0x1e>
 800568c:	20003464 	.word	0x20003464
 8005690:	20003488 	.word	0x20003488

08005694 <sensor_mgr_lock>:
{
 8005694:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
 8005696:	f04f 31ff 	mov.w	r1, #4294967295
 800569a:	4804      	ldr	r0, [pc, #16]	; (80056ac <sensor_mgr_lock+0x18>)
 800569c:	f001 f96e 	bl	800697c <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 80056a0:	b110      	cbz	r0, 80056a8 <sensor_mgr_lock+0x14>
        return (0);
 80056a2:	2809      	cmp	r0, #9
 80056a4:	bf08      	it	eq
 80056a6:	2000      	moveq	r0, #0
}
 80056a8:	bd08      	pop	{r3, pc}
 80056aa:	bf00      	nop
 80056ac:	20003430 	.word	0x20003430

080056b0 <sensor_mgr_unlock>:
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
 80056b0:	4801      	ldr	r0, [pc, #4]	; (80056b8 <sensor_mgr_unlock+0x8>)
 80056b2:	f001 b913 	b.w	80068dc <os_mutex_release>
 80056b6:	bf00      	nop
 80056b8:	20003430 	.word	0x20003430

080056bc <sensor_mgr_find_next>:
{
 80056bc:	b570      	push	{r4, r5, r6, lr}
 80056be:	4605      	mov	r5, r0
 80056c0:	460e      	mov	r6, r1
 80056c2:	4614      	mov	r4, r2
    rc = sensor_mgr_lock();
 80056c4:	f7ff ffe6 	bl	8005694 <sensor_mgr_lock>
    if (rc != 0) {
 80056c8:	b978      	cbnz	r0, 80056ea <sensor_mgr_find_next+0x2e>
    if (cursor == NULL) {
 80056ca:	b95c      	cbnz	r4, 80056e4 <sensor_mgr_find_next+0x28>
        cursor = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 80056cc:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <sensor_mgr_find_next+0x34>)
 80056ce:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    while (cursor != NULL) {
 80056d0:	b91c      	cbnz	r4, 80056da <sensor_mgr_find_next+0x1e>
    sensor_mgr_unlock();
 80056d2:	f7ff ffed 	bl	80056b0 <sensor_mgr_unlock>
}
 80056d6:	4620      	mov	r0, r4
 80056d8:	bd70      	pop	{r4, r5, r6, pc}
        if (compare_func(cursor, arg)) {
 80056da:	4631      	mov	r1, r6
 80056dc:	4620      	mov	r0, r4
 80056de:	47a8      	blx	r5
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d1f6      	bne.n	80056d2 <sensor_mgr_find_next+0x16>
        cursor = SLIST_NEXT(cursor, s_next);
 80056e4:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 80056e8:	e7f2      	b.n	80056d0 <sensor_mgr_find_next+0x14>
    cursor = NULL;
 80056ea:	2400      	movs	r4, #0
    return (cursor);
 80056ec:	e7f3      	b.n	80056d6 <sensor_mgr_find_next+0x1a>
 80056ee:	bf00      	nop
 80056f0:	20003430 	.word	0x20003430

080056f4 <sensor_mgr_find_next_bydevname>:
    return (sensor_mgr_find_next(sensor_mgr_match_bydevname, (char *)devname,
 80056f4:	460a      	mov	r2, r1
 80056f6:	4601      	mov	r1, r0
 80056f8:	4801      	ldr	r0, [pc, #4]	; (8005700 <sensor_mgr_find_next_bydevname+0xc>)
 80056fa:	f7ff bfdf 	b.w	80056bc <sensor_mgr_find_next>
 80056fe:	bf00      	nop
 8005700:	08005631 	.word	0x08005631

08005704 <sensor_pkg_init>:
{
 8005704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005706:	b089      	sub	sp, #36	; 0x24
    sensor_mgr_evq_set(os_eventq_dflt_get());
 8005708:	f000 fdf0 	bl	80062ec <os_eventq_dflt_get>
    sensor_mgr.mgr_eventq = evq;
 800570c:	4d1b      	ldr	r5, [pc, #108]	; (800577c <sensor_pkg_init+0x78>)
    rc = os_mempool_init(&sensor_notify_evt_pool,
 800570e:	4b1c      	ldr	r3, [pc, #112]	; (8005780 <sensor_pkg_init+0x7c>)
    sensor_mgr.mgr_eventq = evq;
 8005710:	62e8      	str	r0, [r5, #44]	; 0x2c
    rc = os_mempool_init(&sensor_notify_evt_pool,
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	2218      	movs	r2, #24
 8005716:	4b1b      	ldr	r3, [pc, #108]	; (8005784 <sensor_pkg_init+0x80>)
 8005718:	2105      	movs	r1, #5
 800571a:	481b      	ldr	r0, [pc, #108]	; (8005788 <sensor_pkg_init+0x84>)
 800571c:	f001 f804 	bl	8006728 <os_mempool_init>
    assert(rc == OS_OK);
 8005720:	4607      	mov	r7, r0
 8005722:	b128      	cbz	r0, 8005730 <sensor_pkg_init+0x2c>
 8005724:	2300      	movs	r3, #0
 8005726:	461a      	mov	r2, r3
 8005728:	4619      	mov	r1, r3
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fa78 	bl	8005c20 <__assert_func>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
 8005730:	4603      	mov	r3, r0
    sensor_base_ts.st_ostv = ostv;
 8005732:	4c16      	ldr	r4, [pc, #88]	; (800578c <sensor_pkg_init+0x88>)
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
 8005734:	4a16      	ldr	r2, [pc, #88]	; (8005790 <sensor_pkg_init+0x8c>)
 8005736:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005738:	f105 000c 	add.w	r0, r5, #12
    os_gettimeofday(&ostv, &ostz);
 800573c:	ae04      	add	r6, sp, #16
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
 800573e:	f000 fbcf 	bl	8005ee0 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
 8005742:	a903      	add	r1, sp, #12
 8005744:	4630      	mov	r0, r6
 8005746:	f001 fc7f 	bl	8007048 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
 800574a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800574e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
 8005752:	9b03      	ldr	r3, [sp, #12]
 8005754:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
 8005756:	f000 fc6f 	bl	8006038 <os_cputime_get32>
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
 800575a:	463b      	mov	r3, r7
 800575c:	4a0d      	ldr	r2, [pc, #52]	; (8005794 <sensor_pkg_init+0x90>)
    sensor_base_ts.st_cputime = os_cputime_get32();
 800575e:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
 8005760:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005762:	480d      	ldr	r0, [pc, #52]	; (8005798 <sensor_pkg_init+0x94>)
 8005764:	f000 fbbc 	bl	8005ee0 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
 8005768:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800576c:	480a      	ldr	r0, [pc, #40]	; (8005798 <sensor_pkg_init+0x94>)
 800576e:	f000 fbe3 	bl	8005f38 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
 8005772:	4628      	mov	r0, r5
 8005774:	f001 f8a8 	bl	80068c8 <os_mutex_init>
}
 8005778:	b009      	add	sp, #36	; 0x24
 800577a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800577c:	20003430 	.word	0x20003430
 8005780:	0800e0d7 	.word	0x0800e0d7
 8005784:	200009c8 	.word	0x200009c8
 8005788:	20000a40 	.word	0x20000a40
 800578c:	20003488 	.word	0x20003488
 8005790:	08005999 	.word	0x08005999
 8005794:	08005645 	.word	0x08005645
 8005798:	20003464 	.word	0x20003464

0800579c <sensor_lock>:
{
 800579c:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
 800579e:	f04f 31ff 	mov.w	r1, #4294967295
 80057a2:	3004      	adds	r0, #4
 80057a4:	f001 f8ea 	bl	800697c <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 80057a8:	b110      	cbz	r0, 80057b0 <sensor_lock+0x14>
        return (0);
 80057aa:	2809      	cmp	r0, #9
 80057ac:	bf08      	it	eq
 80057ae:	2000      	moveq	r0, #0
}
 80057b0:	bd08      	pop	{r3, pc}
	...

080057b4 <sensor_update_nextrun>:
{
 80057b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057b6:	4604      	mov	r4, r0
 80057b8:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
 80057ba:	6a00      	ldr	r0, [r0, #32]
 80057bc:	a901      	add	r1, sp, #4
 80057be:	f001 fc61 	bl	8007084 <os_time_ms_to_ticks>
    sensor_lock(sensor);
 80057c2:	4620      	mov	r0, r4
 80057c4:	f7ff ffea 	bl	800579c <sensor_lock>
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
 80057c8:	4a0d      	ldr	r2, [pc, #52]	; (8005800 <sensor_update_nextrun+0x4c>)
 80057ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80057cc:	429c      	cmp	r4, r3
 80057ce:	d10e      	bne.n	80057ee <sensor_update_nextrun+0x3a>
 80057d0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80057d4:	6313      	str	r3, [r2, #48]	; 0x30
    sensor->s_next_run = sensor_ticks + now;
 80057d6:	9901      	ldr	r1, [sp, #4]
    sensor_mgr_insert(sensor);
 80057d8:	4620      	mov	r0, r4
    sensor->s_next_run = sensor_ticks + now;
 80057da:	4429      	add	r1, r5
 80057dc:	6261      	str	r1, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
 80057de:	f7ff febb 	bl	8005558 <sensor_mgr_insert>
    os_mutex_release(&sensor->s_lock);
 80057e2:	1d20      	adds	r0, r4, #4
 80057e4:	f001 f87a 	bl	80068dc <os_mutex_release>
}
 80057e8:	b003      	add	sp, #12
 80057ea:	bd30      	pop	{r4, r5, pc}
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
 80057ec:	4613      	mov	r3, r2
 80057ee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80057f2:	4294      	cmp	r4, r2
 80057f4:	d1fa      	bne.n	80057ec <sensor_update_nextrun+0x38>
 80057f6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80057fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80057fe:	e7ea      	b.n	80057d6 <sensor_update_nextrun+0x22>
 8005800:	20003430 	.word	0x20003430

08005804 <sensor_set_poll_rate_ms>:
{
 8005804:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005806:	4605      	mov	r5, r0
    os_callout_stop(&sensor_mgr.mgr_wakeup_callout);
 8005808:	481e      	ldr	r0, [pc, #120]	; (8005884 <sensor_set_poll_rate_ms+0x80>)
{
 800580a:	460c      	mov	r4, r1
    os_callout_stop(&sensor_mgr.mgr_wakeup_callout);
 800580c:	f000 fb76 	bl	8005efc <os_callout_stop>
    sensor = sensor_mgr_find_next_bydevname(devname, NULL);
 8005810:	4628      	mov	r0, r5
 8005812:	2100      	movs	r1, #0
 8005814:	f7ff ff6e 	bl	80056f4 <sensor_mgr_find_next_bydevname>
    if (!sensor) {
 8005818:	4605      	mov	r5, r0
 800581a:	b380      	cbz	r0, 800587e <sensor_set_poll_rate_ms+0x7a>
    sensor_lock(sensor);
 800581c:	f7ff ffbe 	bl	800579c <sensor_lock>
    now = os_time_get();
 8005820:	f001 fbbc 	bl	8006f9c <os_time_get>
 8005824:	4607      	mov	r7, r0
    os_time_ms_to_ticks(poll_rate, &next_wakeup);
 8005826:	a901      	add	r1, sp, #4
 8005828:	4620      	mov	r0, r4
 800582a:	f001 fc2b 	bl	8007084 <os_time_ms_to_ticks>
    sensor_lock(sensor);
 800582e:	4628      	mov	r0, r5
 8005830:	f7ff ffb4 	bl	800579c <sensor_lock>
    sensor->s_poll_rate = poll_rate;
 8005834:	622c      	str	r4, [r5, #32]
    os_mutex_release(&sensor->s_lock);
 8005836:	1d2c      	adds	r4, r5, #4
 8005838:	4620      	mov	r0, r4
 800583a:	f001 f84f 	bl	80068dc <os_mutex_release>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 800583e:	4e12      	ldr	r6, [pc, #72]	; (8005888 <sensor_set_poll_rate_ms+0x84>)
    sensor_update_nextrun(sensor, now);
 8005840:	4639      	mov	r1, r7
 8005842:	4628      	mov	r0, r5
 8005844:	f7ff ffb6 	bl	80057b4 <sensor_update_nextrun>
    os_mutex_release(&sensor->s_lock);
 8005848:	4620      	mov	r0, r4
 800584a:	f001 f847 	bl	80068dc <os_mutex_release>
    sensor_mgr_lock();
 800584e:	f7ff ff21 	bl	8005694 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 8005852:	6b35      	ldr	r5, [r6, #48]	; 0x30
    sensor_lock(sensor);
 8005854:	4628      	mov	r0, r5
 8005856:	f7ff ffa1 	bl	800579c <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
 800585a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    os_mutex_release(&sensor->s_lock);
 800585c:	1d28      	adds	r0, r5, #4
    delta = (int32_t)(sensor->s_next_run - now);
 800585e:	1be4      	subs	r4, r4, r7
        sensor_ticks = 0;
 8005860:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    os_mutex_release(&sensor->s_lock);
 8005864:	f001 f83a 	bl	80068dc <os_mutex_release>
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
 8005868:	9401      	str	r4, [sp, #4]
    sensor_mgr_unlock();
 800586a:	f7ff ff21 	bl	80056b0 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 800586e:	9901      	ldr	r1, [sp, #4]
 8005870:	f106 000c 	add.w	r0, r6, #12
 8005874:	f000 fb60 	bl	8005f38 <os_callout_reset>
    return 0;
 8005878:	2000      	movs	r0, #0
}
 800587a:	b003      	add	sp, #12
 800587c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return rc;
 800587e:	f06f 0001 	mvn.w	r0, #1
 8005882:	e7fa      	b.n	800587a <sensor_set_poll_rate_ms+0x76>
 8005884:	2000343c 	.word	0x2000343c
 8005888:	20003430 	.word	0x20003430

0800588c <sensor_mgr_register>:
{
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
 8005890:	f7ff ff00 	bl	8005694 <sensor_mgr_lock>
    if (rc != 0) {
 8005894:	4604      	mov	r4, r0
 8005896:	b960      	cbnz	r0, 80058b2 <sensor_mgr_register+0x26>
    rc = sensor_lock(sensor);
 8005898:	4628      	mov	r0, r5
 800589a:	f7ff ff7f 	bl	800579c <sensor_lock>
    if (rc != 0) {
 800589e:	4604      	mov	r4, r0
 80058a0:	b938      	cbnz	r0, 80058b2 <sensor_mgr_register+0x26>
    sensor_mgr_insert(sensor);
 80058a2:	4628      	mov	r0, r5
 80058a4:	f7ff fe58 	bl	8005558 <sensor_mgr_insert>
    os_mutex_release(&sensor->s_lock);
 80058a8:	1d28      	adds	r0, r5, #4
 80058aa:	f001 f817 	bl	80068dc <os_mutex_release>
    sensor_mgr_unlock();
 80058ae:	f7ff feff 	bl	80056b0 <sensor_mgr_unlock>
}
 80058b2:	4620      	mov	r0, r4
 80058b4:	bd38      	pop	{r3, r4, r5, pc}

080058b6 <sensor_init>:
{
 80058b6:	b538      	push	{r3, r4, r5, lr}
 80058b8:	4604      	mov	r4, r0
 80058ba:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
 80058bc:	2288      	movs	r2, #136	; 0x88
 80058be:	2100      	movs	r1, #0
 80058c0:	f001 fd3f 	bl	8007342 <memset>
    rc = os_mutex_init(&sensor->s_lock);
 80058c4:	1d20      	adds	r0, r4, #4
 80058c6:	f000 ffff 	bl	80068c8 <os_mutex_init>
    if (rc != 0) {
 80058ca:	b900      	cbnz	r0, 80058ce <sensor_init+0x18>
    sensor->s_dev = dev;
 80058cc:	6025      	str	r5, [r4, #0]
}
 80058ce:	bd38      	pop	{r3, r4, r5, pc}

080058d0 <sensor_register_listener>:
{
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	4604      	mov	r4, r0
 80058d4:	460e      	mov	r6, r1
    rc = sensor_lock(sensor);
 80058d6:	f7ff ff61 	bl	800579c <sensor_lock>
    if (rc != 0) {
 80058da:	4605      	mov	r5, r0
 80058dc:	b928      	cbnz	r0, 80058ea <sensor_register_listener+0x1a>
    SLIST_INSERT_HEAD(&sensor->s_listener_list, listener, sl_next);
 80058de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    os_mutex_release(&sensor->s_lock);
 80058e0:	1d20      	adds	r0, r4, #4
    SLIST_INSERT_HEAD(&sensor->s_listener_list, listener, sl_next);
 80058e2:	6133      	str	r3, [r6, #16]
 80058e4:	66e6      	str	r6, [r4, #108]	; 0x6c
    os_mutex_release(&sensor->s_lock);
 80058e6:	f000 fff9 	bl	80068dc <os_mutex_release>
}
 80058ea:	4628      	mov	r0, r5
 80058ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080058f0 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
 80058f0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80058f4:	b088      	sub	sp, #32
 80058f6:	4604      	mov	r4, r0
 80058f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
 80058fc:	f7ff ff4e 	bl	800579c <sensor_lock>
    if (rc) {
 8005900:	4605      	mov	r5, r0
 8005902:	2800      	cmp	r0, #0
 8005904:	d137      	bne.n	8005976 <sensor_read+0x86>
        goto err;
    }

    src.user_func = data_func;
 8005906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    src.user_arg = arg;

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
 8005908:	a904      	add	r1, sp, #16
    src.user_func = data_func;
 800590a:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
 800590c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
 800590e:	4620      	mov	r0, r4
    src.user_arg = arg;
 8005910:	9307      	str	r3, [sp, #28]
    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
 8005912:	f7ff fe47 	bl	80055a4 <sensor_mgr_match_bytype>
 8005916:	2800      	cmp	r0, #0
 8005918:	d034      	beq.n	8005984 <sensor_read+0x94>
    curr_ts_ticks = os_cputime_get32();
 800591a:	f000 fb8d 	bl	8006038 <os_cputime_get32>
    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
 800591e:	4b1b      	ldr	r3, [pc, #108]	; (800598c <sensor_read+0x9c>)
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
 8005920:	6460      	str	r0, [r4, #68]	; 0x44
    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
 8005922:	6959      	ldr	r1, [r3, #20]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8005924:	689a      	ldr	r2, [r3, #8]
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
 8005926:	6158      	str	r0, [r3, #20]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8005928:	1a52      	subs	r2, r2, r1
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 800592a:	4919      	ldr	r1, [pc, #100]	; (8005990 <sensor_read+0xa0>)
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 800592c:	4410      	add	r0, r2
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 800592e:	fbb0 f2f1 	udiv	r2, r0, r1
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8005932:	e9d3 6700 	ldrd	r6, r7, [r3]
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
 8005936:	fb01 0012 	mls	r0, r1, r2, r0
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 800593a:	eb16 0b02 	adds.w	fp, r6, r2
        goto err;
    }

    sensor_up_timestamp(sensor);

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 800593e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 8005940:	f147 0c00 	adc.w	ip, r7, #0
 8005944:	e9c3 bc00 	strd	fp, ip, [r3]
    sensor_base_ts.st_ostv.tv_usec  =
 8005948:	6098      	str	r0, [r3, #8]
    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 800594a:	9202      	str	r2, [sp, #8]
 800594c:	aa06      	add	r2, sp, #24
 800594e:	9201      	str	r2, [sp, #4]
 8005950:	4a10      	ldr	r2, [pc, #64]	; (8005994 <sensor_read+0xa4>)
 8005952:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005954:	9200      	str	r2, [sp, #0]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
 8005956:	63a0      	str	r0, [r4, #56]	; 0x38
    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 8005958:	6819      	ldr	r1, [r3, #0]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
 800595a:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30
    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 800595e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005962:	4620      	mov	r0, r4
 8005964:	4788      	blx	r1
                                  timeout);
    if (rc) {
 8005966:	4605      	mov	r5, r0
 8005968:	b128      	cbz	r0, 8005976 <sensor_read+0x86>
        if (sensor->s_err_fn != NULL) {
 800596a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800596c:	b11b      	cbz	r3, 8005976 <sensor_read+0x86>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
 800596e:	4602      	mov	r2, r0
 8005970:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005972:	4620      	mov	r0, r4
 8005974:	4798      	blx	r3
    os_mutex_release(&sensor->s_lock);
 8005976:	1d20      	adds	r0, r4, #4
 8005978:	f000 ffb0 	bl	80068dc <os_mutex_release>
    }

err:
    sensor_unlock(sensor);
    return (rc);
}
 800597c:	4628      	mov	r0, r5
 800597e:	b008      	add	sp, #32
 8005980:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        rc = SYS_ENOENT;
 8005984:	f06f 0503 	mvn.w	r5, #3
 8005988:	e7f5      	b.n	8005976 <sensor_read+0x86>
 800598a:	bf00      	nop
 800598c:	20003488 	.word	0x20003488
 8005990:	000f4240 	.word	0x000f4240
 8005994:	080055d1 	.word	0x080055d1

08005998 <sensor_mgr_wakeup_event>:
{
 8005998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800599c:	b085      	sub	sp, #20
    now = os_time_get();
 800599e:	f001 fafd 	bl	8006f9c <os_time_get>
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
 80059a2:	f04f 38ff 	mov.w	r8, #4294967295
    now = os_time_get();
 80059a6:	4607      	mov	r7, r0
    sensor_mgr_lock();
 80059a8:	f7ff fe74 	bl	8005694 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 80059ac:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8005a7c <sensor_mgr_wakeup_event+0xe4>
    sensor_mgr_lock();
 80059b0:	f7ff fe70 	bl	8005694 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 80059b4:	f8d9 4030 	ldr.w	r4, [r9, #48]	; 0x30
    sensor_lock(sensor);
 80059b8:	4620      	mov	r0, r4
    os_mutex_release(&sensor->s_lock);
 80059ba:	1d26      	adds	r6, r4, #4
    sensor_lock(sensor);
 80059bc:	f7ff feee 	bl	800579c <sensor_lock>
    os_mutex_release(&sensor->s_lock);
 80059c0:	4630      	mov	r0, r6
    delta = (int32_t)(sensor->s_next_run - now);
 80059c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
    os_mutex_release(&sensor->s_lock);
 80059c4:	f000 ff8a 	bl	80068dc <os_mutex_release>
    sensor_mgr_unlock();
 80059c8:	f7ff fe72 	bl	80056b0 <sensor_mgr_unlock>
        sensor_lock(cursor);
 80059cc:	4620      	mov	r0, r4
 80059ce:	f7ff fee5 	bl	800579c <sensor_lock>
        if (!cursor->s_poll_rate) {
 80059d2:	6a23      	ldr	r3, [r4, #32]
    delta = (int32_t)(sensor->s_next_run - now);
 80059d4:	1bed      	subs	r5, r5, r7
        sensor_ticks = 0;
 80059d6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
        if (!cursor->s_poll_rate) {
 80059da:	b93b      	cbnz	r3, 80059ec <sensor_mgr_wakeup_event+0x54>
    os_mutex_release(&sensor->s_lock);
 80059dc:	4630      	mov	r0, r6
 80059de:	f000 ff7d 	bl	80068dc <os_mutex_release>
}
 80059e2:	b005      	add	sp, #20
 80059e4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            sensor_mgr_unlock();
 80059e8:	f7ff be62 	b.w	80056b0 <sensor_mgr_unlock>
        if (next_wakeup > 0) {
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	d13a      	bne.n	8005a66 <sensor_mgr_wakeup_event+0xce>
        if (sensor_type_traits_empty(cursor)) {
 80059f0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80059f2:	b9bb      	cbnz	r3, 8005a24 <sensor_mgr_wakeup_event+0x8c>
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
 80059f4:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 80059f8:	e9cd 3801 	strd	r3, r8, [sp, #4]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4620      	mov	r0, r4
 8005a04:	f7ff ff74 	bl	80058f0 <sensor_read>
        sensor_lock(sensor);
 8005a08:	4620      	mov	r0, r4
 8005a0a:	f7ff fec7 	bl	800579c <sensor_lock>
    os_mutex_release(&sensor->s_lock);
 8005a0e:	4630      	mov	r0, r6
 8005a10:	f000 ff64 	bl	80068dc <os_mutex_release>
        sensor_update_nextrun(cursor, now);
 8005a14:	4620      	mov	r0, r4
 8005a16:	4639      	mov	r1, r7
 8005a18:	f7ff fecc 	bl	80057b4 <sensor_update_nextrun>
    os_mutex_release(&sensor->s_lock);
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f000 ff5d 	bl	80068dc <os_mutex_release>
 8005a22:	e7c5      	b.n	80059b0 <sensor_mgr_wakeup_event+0x18>
    sensor_lock(sensor);
 8005a24:	4620      	mov	r0, r4
 8005a26:	f7ff feb9 	bl	800579c <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 8005a2a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8005a2c:	2d00      	cmp	r5, #0
 8005a2e:	d0ee      	beq.n	8005a0e <sensor_mgr_wakeup_event+0x76>
    if (!stt || !stt->stt_polls_left) {
 8005a30:	8aab      	ldrh	r3, [r5, #20]
 8005a32:	b9ab      	cbnz	r3, 8005a60 <sensor_mgr_wakeup_event+0xc8>
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
 8005a34:	e9cd 3801 	strd	r3, r8, [sp, #4]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f7ff ff56 	bl	80058f0 <sensor_read>
        sensor_lock(sensor);
 8005a44:	4620      	mov	r0, r4
 8005a46:	f7ff fea9 	bl	800579c <sensor_lock>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
 8005a4a:	8aab      	ldrh	r3, [r5, #20]
 8005a4c:	b91b      	cbnz	r3, 8005a56 <sensor_mgr_wakeup_event+0xbe>
 8005a4e:	8a6b      	ldrh	r3, [r5, #18]
 8005a50:	b10b      	cbz	r3, 8005a56 <sensor_mgr_wakeup_event+0xbe>
                stt->stt_polls_left--;
 8005a52:	3b01      	subs	r3, #1
 8005a54:	82ab      	strh	r3, [r5, #20]
    os_mutex_release(&sensor->s_lock);
 8005a56:	4630      	mov	r0, r6
 8005a58:	f000 ff40 	bl	80068dc <os_mutex_release>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 8005a5c:	6a2d      	ldr	r5, [r5, #32]
 8005a5e:	e7e5      	b.n	8005a2c <sensor_mgr_wakeup_event+0x94>
        stt->stt_polls_left--;
 8005a60:	3b01      	subs	r3, #1
 8005a62:	82ab      	strh	r3, [r5, #20]
 8005a64:	e7fa      	b.n	8005a5c <sensor_mgr_wakeup_event+0xc4>
    sensor_mgr_unlock();
 8005a66:	f7ff fe23 	bl	80056b0 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	4802      	ldr	r0, [pc, #8]	; (8005a78 <sensor_mgr_wakeup_event+0xe0>)
}
 8005a6e:	b005      	add	sp, #20
 8005a70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 8005a74:	f000 ba60 	b.w	8005f38 <os_callout_reset>
 8005a78:	2000343c 	.word	0x2000343c
 8005a7c:	20003430 	.word	0x20003430

08005a80 <timer_handler>:
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    os_time_advance(1);
 8005a80:	2001      	movs	r0, #1
 8005a82:	f001 ba91 	b.w	8006fa8 <os_time_advance>
	...

08005a88 <os_arch_ctx_sw>:
}

void
os_arch_ctx_sw(struct os_task *t)
{
 8005a88:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
 8005a8a:	f001 f86d 	bl	8006b68 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
 8005a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a92:	4b01      	ldr	r3, [pc, #4]	; (8005a98 <os_arch_ctx_sw+0x10>)
 8005a94:	605a      	str	r2, [r3, #4]
}
 8005a96:	bd08      	pop	{r3, pc}
 8005a98:	e000ed00 	.word	0xe000ed00

08005a9c <os_arch_save_sr>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a9c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005aa0:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
 8005aa2:	f000 0001 	and.w	r0, r0, #1
 8005aa6:	4770      	bx	lr

08005aa8 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
 8005aa8:	b900      	cbnz	r0, 8005aac <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
 8005aaa:	b662      	cpsie	i
        __enable_irq();
    }
}
 8005aac:	4770      	bx	lr

08005aae <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aae:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
 8005ab2:	f000 0001 	and.w	r0, r0, #1
 8005ab6:	4770      	bx	lr

08005ab8 <os_arch_task_stack_init>:
    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
        s[i] = 0;
 8005ab8:	2300      	movs	r3, #0
{
 8005aba:	b570      	push	{r4, r5, r6, lr}
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
 8005abc:	f1a1 0540 	sub.w	r5, r1, #64	; 0x40
{
 8005ac0:	4606      	mov	r6, r0
        s[i] = 0;
 8005ac2:	e941 3307 	strd	r3, r3, [r1, #-28]
 8005ac6:	e941 3305 	strd	r3, r3, [r1, #-20]
 8005aca:	f841 3c0c 	str.w	r3, [r1, #-12]
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
 8005ace:	4628      	mov	r0, r5
{
 8005ad0:	460c      	mov	r4, r1
    os_arch_init_task_stack(s);
 8005ad2:	f001 fae5 	bl	80070a0 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
 8005ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ada:	f844 3c04 	str.w	r3, [r4, #-4]
    sf->pc = (uint32_t)t->t_func;
 8005ade:	6973      	ldr	r3, [r6, #20]
    sf->r0 = (uint32_t)t->t_arg;

    return (s);
}
 8005ae0:	4628      	mov	r0, r5
    sf->pc = (uint32_t)t->t_func;
 8005ae2:	f844 3c08 	str.w	r3, [r4, #-8]
    sf->r0 = (uint32_t)t->t_arg;
 8005ae6:	69b3      	ldr	r3, [r6, #24]
 8005ae8:	f844 3c20 	str.w	r3, [r4, #-32]
}
 8005aec:	bd70      	pop	{r4, r5, r6, pc}
	...

08005af0 <os_arch_init>:
os_arch_init(void)
{
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8005af0:	4a03      	ldr	r2, [pc, #12]	; (8005b00 <os_arch_init+0x10>)
 8005af2:	6953      	ldr	r3, [r2, #20]
 8005af4:	f043 0310 	orr.w	r3, r3, #16
 8005af8:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
 8005afa:	f000 b957 	b.w	8005dac <os_init_idle_task>
 8005afe:	bf00      	nop
 8005b00:	e000ed00 	.word	0xe000ed00

08005b04 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b06:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
 8005b0a:	2c00      	cmp	r4, #0
 8005b0c:	d134      	bne.n	8005b78 <os_arch_os_init+0x74>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
            NVIC->IP[i] = -1;
 8005b0e:	26ff      	movs	r6, #255	; 0xff
 8005b10:	4f1a      	ldr	r7, [pc, #104]	; (8005b7c <os_arch_os_init+0x78>)
 8005b12:	193d      	adds	r5, r7, r4
        for (i = 0; i < sizeof(NVIC->IP); i++) {
 8005b14:	3401      	adds	r4, #1
 8005b16:	2cf0      	cmp	r4, #240	; 0xf0
            NVIC->IP[i] = -1;
 8005b18:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
 8005b1c:	d1f9      	bne.n	8005b12 <os_arch_os_init+0xe>
  \param [in]   IRQn      Interrupt number
  \param [in]   vector    Address of interrupt handler function
 */
__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005b1e:	4c18      	ldr	r4, [pc, #96]	; (8005b80 <os_arch_os_init+0x7c>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005b20:	4e18      	ldr	r6, [pc, #96]	; (8005b84 <os_arch_os_init+0x80>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005b22:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005b24:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005b26:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005b28:	4e17      	ldr	r6, [pc, #92]	; (8005b88 <os_arch_os_init+0x84>)
 8005b2a:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005b2c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005b2e:	4e17      	ldr	r6, [pc, #92]	; (8005b8c <os_arch_os_init+0x88>)
 8005b30:	63ee      	str	r6, [r5, #60]	; 0x3c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005b32:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005b34:	4d16      	ldr	r5, [pc, #88]	; (8005b90 <os_arch_os_init+0x8c>)
 8005b36:	60b5      	str	r5, [r6, #8]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005b38:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005b3a:	60f5      	str	r5, [r6, #12]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005b3c:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005b3e:	6135      	str	r5, [r6, #16]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005b40:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005b42:	6175      	str	r5, [r6, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005b44:	68a6      	ldr	r6, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005b46:	61b5      	str	r5, [r6, #24]
 8005b48:	2640      	movs	r6, #64	; 0x40
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8005b4a:	68a7      	ldr	r7, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8005b4c:	51bd      	str	r5, [r7, r6]
 8005b4e:	3604      	adds	r6, #4
        NVIC_SetVector(NonMaskableInt_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(-13, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(MemoryManagement_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(BusFault_IRQn, (uint32_t)os_default_irq_asm);
        NVIC_SetVector(UsageFault_IRQn, (uint32_t)os_default_irq_asm);
        for (i = 0; i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
 8005b50:	2eec      	cmp	r6, #236	; 0xec
 8005b52:	d1fa      	bne.n	8005b4a <os_arch_os_init+0x46>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b54:	25f0      	movs	r5, #240	; 0xf0
 8005b56:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8005b5a:	2510      	movs	r5, #16
 8005b5c:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8005b5e:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVC_IRQ_NUMBER, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
 8005b62:	f014 0401 	ands.w	r4, r4, #1
 8005b66:	d103      	bne.n	8005b70 <os_arch_os_init+0x6c>
            os_arch_init();
 8005b68:	f7ff ffc2 	bl	8005af0 <os_arch_init>
        err = OS_OK;
 8005b6c:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
 8005b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SVC_Call(os_arch_init);
 8005b70:	f8df c020 	ldr.w	ip, [pc, #32]	; 8005b94 <os_arch_os_init+0x90>
 8005b74:	df00      	svc	0
 8005b76:	e7f9      	b.n	8005b6c <os_arch_os_init+0x68>
    err = OS_ERR_IN_ISR;
 8005b78:	2007      	movs	r0, #7
 8005b7a:	e7f8      	b.n	8005b6e <os_arch_os_init+0x6a>
 8005b7c:	e000e100 	.word	0xe000e100
 8005b80:	e000ed00 	.word	0xe000ed00
 8005b84:	080070a7 	.word	0x080070a7
 8005b88:	080070ed 	.word	0x080070ed
 8005b8c:	08007117 	.word	0x08007117
 8005b90:	08007123 	.word	0x08007123
 8005b94:	08005af1 	.word	0x08005af1

08005b98 <os_arch_start>:

uint32_t
os_arch_start(void)
{
 8005b98:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
 8005b9a:	f001 f8bf 	bl	8006d1c <os_sched_next_task>
 8005b9e:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
 8005ba0:	f000 fffe 	bl	8006ba0 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005ba8:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
 8005bac:	210e      	movs	r1, #14
 8005bae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bb2:	f002 fdff 	bl	80087b4 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <os_arch_start+0x30>)

    /* Perform context switch */
    os_arch_ctx_sw(t);
 8005bba:	4620      	mov	r0, r4
    g_os_started = 1;
 8005bbc:	601a      	str	r2, [r3, #0]
    os_arch_ctx_sw(t);
 8005bbe:	f7ff ff63 	bl	8005a88 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
 8005bc2:	69a0      	ldr	r0, [r4, #24]
 8005bc4:	bd10      	pop	{r4, pc}
 8005bc6:	bf00      	nop
 8005bc8:	200034f4 	.word	0x200034f4

08005bcc <os_arch_os_start>:
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
 8005bcc:	4811      	ldr	r0, [pc, #68]	; (8005c14 <os_arch_os_start+0x48>)
{
 8005bce:	b510      	push	{r4, lr}
    os_set_env(g_idle_task.t_stackptr - 1);
 8005bd0:	6800      	ldr	r0, [r0, #0]
 8005bd2:	3804      	subs	r0, #4
 8005bd4:	f001 fa5a 	bl	800708c <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd8:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
 8005bdc:	b9bc      	cbnz	r4, 8005c0e <os_arch_os_start+0x42>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8005bde:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
 8005be2:	f004 0403 	and.w	r4, r4, #3
 8005be6:	2c02      	cmp	r4, #2
 8005be8:	d003      	beq.n	8005bf2 <os_arch_os_start+0x26>
 8005bea:	2c03      	cmp	r4, #3
 8005bec:	d00a      	beq.n	8005c04 <os_arch_os_start+0x38>
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
                err = OS_ERR_PRIV;
 8005bee:	2008      	movs	r0, #8
 8005bf0:	e007      	b.n	8005c02 <os_arch_os_start+0x36>
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
 8005bf2:	4c09      	ldr	r4, [pc, #36]	; (8005c18 <os_arch_os_start+0x4c>)
 8005bf4:	6824      	ldr	r4, [r4, #0]
 8005bf6:	07e4      	lsls	r4, r4, #31
 8005bf8:	d4f9      	bmi.n	8005bee <os_arch_os_start+0x22>
    SVC_Call(os_arch_start);
 8005bfa:	f8df c020 	ldr.w	ip, [pc, #32]	; 8005c1c <os_arch_os_start+0x50>
 8005bfe:	df00      	svc	0
 8005c00:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
 8005c02:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
 8005c04:	4c04      	ldr	r4, [pc, #16]	; (8005c18 <os_arch_os_start+0x4c>)
 8005c06:	6824      	ldr	r4, [r4, #0]
 8005c08:	07e4      	lsls	r4, r4, #31
 8005c0a:	d5f0      	bpl.n	8005bee <os_arch_os_start+0x22>
 8005c0c:	e7f5      	b.n	8005bfa <os_arch_os_start+0x2e>
    err = OS_ERR_IN_ISR;
 8005c0e:	2007      	movs	r0, #7
 8005c10:	e7f7      	b.n	8005c02 <os_arch_os_start+0x36>
 8005c12:	bf00      	nop
 8005c14:	200034a0 	.word	0x200034a0
 8005c18:	20000a5c 	.word	0x20000a5c
 8005c1c:	08005b99 	.word	0x08005b99

08005c20 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
 8005c20:	4605      	mov	r5, r0
 8005c22:	b508      	push	{r3, lr}
 8005c24:	4674      	mov	r4, lr
 8005c26:	460e      	mov	r6, r1
    int sr;

    OS_ENTER_CRITICAL(sr);
 8005c28:	f7ff ff38 	bl	8005a9c <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
 8005c2c:	f7fe fa1e 	bl	800406c <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
 8005c30:	b97d      	cbnz	r5, 8005c52 <__assert_func+0x32>
 8005c32:	4621      	mov	r1, r4
 8005c34:	480a      	ldr	r0, [pc, #40]	; (8005c60 <__assert_func+0x40>)
 8005c36:	f7fe fa3f 	bl	80040b8 <console_printf>

    if (hal_debugger_connected()) {
 8005c3a:	f002 fde9 	bl	8008810 <hal_debugger_connected>
 8005c3e:	b100      	cbz	r0, 8005c42 <__assert_func+0x22>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
       asm("bkpt");
 8005c40:	be00      	bkpt	0x0000
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
 8005c42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005c46:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <__assert_func+0x44>)
 8005c48:	605a      	str	r2, [r3, #4]
    asm("isb");
 8005c4a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
 8005c4e:	f002 fdcd 	bl	80087ec <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
 8005c52:	4633      	mov	r3, r6
 8005c54:	462a      	mov	r2, r5
 8005c56:	4621      	mov	r1, r4
 8005c58:	4803      	ldr	r0, [pc, #12]	; (8005c68 <__assert_func+0x48>)
 8005c5a:	f7fe fa2d 	bl	80040b8 <console_printf>
 8005c5e:	e7ec      	b.n	8005c3a <__assert_func+0x1a>
 8005c60:	0800e0e9 	.word	0x0800e0e9
 8005c64:	e000ed00 	.word	0xe000ed00
 8005c68:	0800e0f8 	.word	0x0800e0f8

08005c6c <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
 8005c6c:	4604      	mov	r4, r0
    uint32_t *orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
 8005c6e:	4d1d      	ldr	r5, [pc, #116]	; (8005ce4 <os_default_irq+0x78>)
{
 8005c70:	b507      	push	{r0, r1, r2, lr}
    console_blocking_mode();
 8005c72:	f7fe f9fb 	bl	800406c <console_blocking_mode>
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
 8005c76:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
 8005c78:	6822      	ldr	r2, [r4, #0]
 8005c7a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005c7e:	481a      	ldr	r0, [pc, #104]	; (8005ce8 <os_default_irq+0x7c>)
 8005c80:	f7fe fa1a 	bl	80040b8 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
 8005c84:	6821      	ldr	r1, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
 8005c86:	4819      	ldr	r0, [pc, #100]	; (8005cec <os_default_irq+0x80>)
 8005c88:	68cb      	ldr	r3, [r1, #12]
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
 8005c90:	6809      	ldr	r1, [r1, #0]
 8005c92:	f7fe fa11 	bl	80040b8 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
 8005c96:	6923      	ldr	r3, [r4, #16]
 8005c98:	6861      	ldr	r1, [r4, #4]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	4814      	ldr	r0, [pc, #80]	; (8005cf0 <os_default_irq+0x84>)
 8005c9e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005ca2:	f7fe fa09 	bl	80040b8 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
 8005ca6:	6a23      	ldr	r3, [r4, #32]
 8005ca8:	6961      	ldr	r1, [r4, #20]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	4811      	ldr	r0, [pc, #68]	; (8005cf4 <os_default_irq+0x88>)
 8005cae:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8005cb2:	f7fe fa01 	bl	80040b8 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
 8005cb6:	6821      	ldr	r1, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
 8005cb8:	480f      	ldr	r0, [pc, #60]	; (8005cf8 <os_default_irq+0x8c>)
 8005cba:	69cb      	ldr	r3, [r1, #28]
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
 8005cc2:	6909      	ldr	r1, [r1, #16]
 8005cc4:	f7fe f9f8 	bl	80040b8 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
 8005cc8:	6869      	ldr	r1, [r5, #4]
 8005cca:	480c      	ldr	r0, [pc, #48]	; (8005cfc <os_default_irq+0x90>)
 8005ccc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005cce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005cd0:	f7fe f9f2 	bl	80040b8 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
 8005cd4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8005cd6:	480a      	ldr	r0, [pc, #40]	; (8005d00 <os_default_irq+0x94>)
 8005cd8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005cda:	f7fe f9ed 	bl	80040b8 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
 8005cde:	f002 fd85 	bl	80087ec <hal_system_reset>
 8005ce2:	bf00      	nop
 8005ce4:	e000ed00 	.word	0xe000ed00
 8005ce8:	0800e10f 	.word	0x0800e10f
 8005cec:	0800e140 	.word	0x0800e140
 8005cf0:	0800e171 	.word	0x0800e171
 8005cf4:	0800e1a2 	.word	0x0800e1a2
 8005cf8:	0800e1d3 	.word	0x0800e1d3
 8005cfc:	0800e204 	.word	0x0800e204
 8005d00:	0800e22c 	.word	0x0800e22c

08005d04 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
 8005d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
 8005d08:	f003 f91c 	bl	8008f44 <hal_watchdog_tickle>
    sanity_last = 0;
 8005d0c:	2400      	movs	r4, #0
        cticks = os_callout_wakeup_ticks(now);
        iticks = min(sticks, cticks);
        /* Wakeup in time to run sanity as well from the idle context,
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
 8005d0e:	f643 2798 	movw	r7, #15000	; 0x3a98
        ++g_os_idle_ctr;
 8005d12:	4d1b      	ldr	r5, [pc, #108]	; (8005d80 <os_idle_task+0x7c>)
 8005d14:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8005d84 <os_idle_task+0x80>
 8005d18:	682b      	ldr	r3, [r5, #0]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	602b      	str	r3, [r5, #0]
        now = os_time_get();
 8005d1e:	f001 f93d 	bl	8006f9c <os_time_get>
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
 8005d22:	f5a0 536a 	sub.w	r3, r0, #14976	; 0x3a80
 8005d26:	3b18      	subs	r3, #24
 8005d28:	1b1b      	subs	r3, r3, r4
 8005d2a:	2b00      	cmp	r3, #0
        now = os_time_get();
 8005d2c:	4606      	mov	r6, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
 8005d2e:	dd04      	ble.n	8005d3a <os_idle_task+0x36>
            os_sanity_run();
 8005d30:	f000 fec4 	bl	8006abc <os_sanity_run>
            sanity_last = now;
 8005d34:	4634      	mov	r4, r6
            hal_watchdog_tickle();
 8005d36:	f003 f905 	bl	8008f44 <hal_watchdog_tickle>
        OS_ENTER_CRITICAL(sr);
 8005d3a:	f7ff feaf 	bl	8005a9c <os_arch_save_sr>
 8005d3e:	4606      	mov	r6, r0
        now = os_time_get();
 8005d40:	f001 f92c 	bl	8006f9c <os_time_get>
 8005d44:	4682      	mov	sl, r0
        sticks = os_sched_wakeup_ticks(now);
 8005d46:	f000 ffcf 	bl	8006ce8 <os_sched_wakeup_ticks>
 8005d4a:	4681      	mov	r9, r0
        cticks = os_callout_wakeup_ticks(now);
 8005d4c:	4650      	mov	r0, sl
 8005d4e:	f000 f957 	bl	8006000 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
 8005d52:	4581      	cmp	r9, r0
 8005d54:	bf28      	it	cs
 8005d56:	4681      	movcs	r9, r0
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
 8005d58:	19e3      	adds	r3, r4, r7
 8005d5a:	eba3 000a 	sub.w	r0, r3, sl
 8005d5e:	4548      	cmp	r0, r9
 8005d60:	bf28      	it	cs
 8005d62:	4648      	movcs	r0, r9

        if (iticks < MIN_IDLE_TICKS) {
 8005d64:	2863      	cmp	r0, #99	; 0x63
 8005d66:	d908      	bls.n	8005d7a <os_idle_task+0x76>
 8005d68:	4540      	cmp	r0, r8
 8005d6a:	bf28      	it	cs
 8005d6c:	4640      	movcs	r0, r8
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
 8005d6e:	f002 fd13 	bl	8008798 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
 8005d72:	4630      	mov	r0, r6
 8005d74:	f7ff fe98 	bl	8005aa8 <os_arch_restore_sr>
        ++g_os_idle_ctr;
 8005d78:	e7ce      	b.n	8005d18 <os_idle_task+0x14>
            iticks = 0;
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	e7f7      	b.n	8005d6e <os_idle_task+0x6a>
 8005d7e:	bf00      	nop
 8005d80:	200034f0 	.word	0x200034f0
 8005d84:	000927c0 	.word	0x000927c0

08005d88 <os_main>:
os_main(void *arg)
{
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
 8005d88:	2100      	movs	r1, #0
{
 8005d8a:	b508      	push	{r3, lr}
 8005d8c:	4603      	mov	r3, r0
    fn(0, NULL);
 8005d8e:	4608      	mov	r0, r1
 8005d90:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
 8005d92:	2300      	movs	r3, #0
 8005d94:	461a      	mov	r2, r3
 8005d96:	4619      	mov	r1, r3
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff ff41 	bl	8005c20 <__assert_func>
	...

08005da0 <os_started>:
}
 8005da0:	4b01      	ldr	r3, [pc, #4]	; (8005da8 <os_started+0x8>)
 8005da2:	6818      	ldr	r0, [r3, #0]
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	200034f4 	.word	0x200034f4

08005dac <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
 8005dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
 8005dae:	2340      	movs	r3, #64	; 0x40
 8005db0:	9303      	str	r3, [sp, #12]
 8005db2:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <os_init_idle_task+0x48>)
 8005db4:	f04f 32ff 	mov.w	r2, #4294967295
 8005db8:	9302      	str	r3, [sp, #8]
 8005dba:	23ff      	movs	r3, #255	; 0xff
 8005dbc:	490e      	ldr	r1, [pc, #56]	; (8005df8 <os_init_idle_task+0x4c>)
 8005dbe:	e9cd 3200 	strd	r3, r2, [sp]
 8005dc2:	480e      	ldr	r0, [pc, #56]	; (8005dfc <os_init_idle_task+0x50>)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	4a0e      	ldr	r2, [pc, #56]	; (8005e00 <os_init_idle_task+0x54>)
 8005dc8:	f001 f850 	bl	8006e6c <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
 8005dcc:	b128      	cbz	r0, 8005dda <os_init_idle_task+0x2e>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff ff23 	bl	8005c20 <__assert_func>

    /* Initialize sanity */
    rc = os_sanity_init();
 8005dda:	f000 fe97 	bl	8006b0c <os_sanity_init>
    assert(rc == 0);
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d1f5      	bne.n	8005dce <os_init_idle_task+0x22>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
 8005de2:	f247 5030 	movw	r0, #30000	; 0x7530
 8005de6:	f003 f889 	bl	8008efc <hal_watchdog_init>
    assert(rc == 0);
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d1ef      	bne.n	8005dce <os_init_idle_task+0x22>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
 8005dee:	b005      	add	sp, #20
 8005df0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005df4:	20000a60 	.word	0x20000a60
 8005df8:	0800e24d 	.word	0x0800e24d
 8005dfc:	200034a0 	.word	0x200034a0
 8005e00:	08005d05 	.word	0x08005d05

08005e04 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
 8005e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
 8005e06:	2300      	movs	r3, #0
 8005e08:	4a1c      	ldr	r2, [pc, #112]	; (8005e7c <os_init+0x78>)
{
 8005e0a:	4604      	mov	r4, r0
    TAILQ_INIT(&g_callout_list);
 8005e0c:	e9c2 3200 	strd	r3, r2, [r2]
    STAILQ_INIT(&g_os_task_list);
 8005e10:	4a1b      	ldr	r2, [pc, #108]	; (8005e80 <os_init+0x7c>)
 8005e12:	e9c2 3200 	strd	r3, r2, [r2]
    os_eventq_init(os_eventq_dflt_get());
 8005e16:	f000 fa69 	bl	80062ec <os_eventq_dflt_get>
 8005e1a:	f000 f9cd 	bl	80061b8 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
 8005e1e:	f000 f9c3 	bl	80061a8 <os_dev_reset>

    err = os_arch_os_init();
 8005e22:	f7ff fe6f 	bl	8005b04 <os_arch_os_init>
    assert(err == OS_OK);
 8005e26:	b128      	cbz	r0, 8005e34 <os_init+0x30>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff fef6 	bl	8005c20 <__assert_func>

    if (main_fn) {
 8005e34:	b194      	cbz	r4, 8005e5c <os_init+0x58>
        err = os_task_init(&os_main_task, "main", os_main, main_fn,
 8005e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e3a:	9303      	str	r3, [sp, #12]
 8005e3c:	4b11      	ldr	r3, [pc, #68]	; (8005e84 <os_init+0x80>)
 8005e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e42:	9302      	str	r3, [sp, #8]
 8005e44:	237f      	movs	r3, #127	; 0x7f
 8005e46:	4910      	ldr	r1, [pc, #64]	; (8005e88 <os_init+0x84>)
 8005e48:	e9cd 3200 	strd	r3, r2, [sp]
 8005e4c:	480f      	ldr	r0, [pc, #60]	; (8005e8c <os_init+0x88>)
 8005e4e:	4623      	mov	r3, r4
 8005e50:	4a0f      	ldr	r2, [pc, #60]	; (8005e90 <os_init+0x8c>)
 8005e52:	f001 f80b 	bl	8006e6c <os_task_init>
                           OS_MAIN_TASK_PRIO, OS_WAIT_FOREVER, os_main_stack,
                           OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
 8005e56:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005e5a:	d1e5      	bne.n	8005e28 <os_init+0x24>
    }
    /* Call bsp related OS initializations */
    hal_bsp_init();
 8005e5c:	f002 fb08 	bl	8008470 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
 8005e60:	2001      	movs	r0, #1
 8005e62:	f000 f941 	bl	80060e8 <os_dev_initialize_all>
    assert(err == OS_OK);
 8005e66:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005e6a:	d1dd      	bne.n	8005e28 <os_init+0x24>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
 8005e6c:	2002      	movs	r0, #2
 8005e6e:	f000 f93b 	bl	80060e8 <os_dev_initialize_all>
    assert(err == OS_OK);
 8005e72:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005e76:	d1d7      	bne.n	8005e28 <os_init+0x24>
}
 8005e78:	b004      	add	sp, #16
 8005e7a:	bd10      	pop	{r4, pc}
 8005e7c:	200034f8 	.word	0x200034f8
 8005e80:	2000351c 	.word	0x2000351c
 8005e84:	20000b60 	.word	0x20000b60
 8005e88:	0800e248 	.word	0x0800e248
 8005e8c:	20001b60 	.word	0x20001b60
 8005e90:	08005d89 	.word	0x08005d89

08005e94 <os_start>:

void
os_start(void)
{
 8005e94:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
 8005e96:	f003 f849 	bl	8008f2c <hal_watchdog_enable>

    err = os_arch_os_start();
 8005e9a:	f7ff fe97 	bl	8005bcc <os_arch_os_start>
    assert(err == OS_OK);
 8005e9e:	b128      	cbz	r0, 8005eac <os_start+0x18>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff feba 	bl	8005c20 <__assert_func>
#else
    assert(0);
#endif
}
 8005eac:	bd08      	pop	{r3, pc}
	...

08005eb0 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
 8005eb0:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <os_pkg_init+0x2c>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	b92b      	cbnz	r3, 8005ec4 <os_pkg_init+0x14>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff feae 	bl	8005c20 <__assert_func>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
 8005ec4:	2003      	movs	r0, #3
 8005ec6:	f000 f90f 	bl	80060e8 <os_dev_initialize_all>
    assert(err == OS_OK);
 8005eca:	f010 0fff 	tst.w	r0, #255	; 0xff
 8005ece:	d1f3      	bne.n	8005eb8 <os_pkg_init+0x8>

    os_mempool_module_init();
 8005ed0:	f000 fc72 	bl	80067b8 <os_mempool_module_init>
    os_msys_init();
}
 8005ed4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_msys_init();
 8005ed8:	f000 bcc6 	b.w	8006868 <os_msys_init>
 8005edc:	20003428 	.word	0x20003428

08005ee0 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	460d      	mov	r5, r1
 8005ee6:	4617      	mov	r7, r2
 8005ee8:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
 8005eea:	2220      	movs	r2, #32
 8005eec:	2100      	movs	r1, #0
 8005eee:	f001 fa28 	bl	8007342 <memset>
    c->c_ev.ev_cb = ev_cb;
    c->c_ev.ev_arg = ev_arg;
 8005ef2:	e9c4 7601 	strd	r7, r6, [r4, #4]
    c->c_evq = evq;
 8005ef6:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
 8005ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005efc <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
 8005f00:	f7ff fdcc 	bl	8005a9c <os_arch_save_sr>

    if (os_callout_queued(c)) {
 8005f04:	69e2      	ldr	r2, [r4, #28]
    OS_ENTER_CRITICAL(sr);
 8005f06:	4605      	mov	r5, r0
    if (os_callout_queued(c)) {
 8005f08:	b132      	cbz	r2, 8005f18 <os_callout_stop+0x1c>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 8005f0a:	69a3      	ldr	r3, [r4, #24]
 8005f0c:	b173      	cbz	r3, 8005f2c <os_callout_stop+0x30>
 8005f0e:	61da      	str	r2, [r3, #28]
 8005f10:	69e2      	ldr	r2, [r4, #28]
 8005f12:	6013      	str	r3, [r2, #0]
        c->c_next.tqe_prev = NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
 8005f18:	6920      	ldr	r0, [r4, #16]
 8005f1a:	b110      	cbz	r0, 8005f22 <os_callout_stop+0x26>
        os_eventq_remove(c->c_evq, &c->c_ev);
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	f000 f9c6 	bl	80062ae <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
 8005f22:	4628      	mov	r0, r5

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
 8005f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
 8005f28:	f7ff bdbe 	b.w	8005aa8 <os_arch_restore_sr>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 8005f2c:	4901      	ldr	r1, [pc, #4]	; (8005f34 <os_callout_stop+0x38>)
 8005f2e:	604a      	str	r2, [r1, #4]
 8005f30:	e7ee      	b.n	8005f10 <os_callout_stop+0x14>
 8005f32:	bf00      	nop
 8005f34:	200034f8 	.word	0x200034f8

08005f38 <os_callout_reset>:
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
 8005f38:	6903      	ldr	r3, [r0, #16]
{
 8005f3a:	b570      	push	{r4, r5, r6, lr}
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	460d      	mov	r5, r1
    assert(c->c_evq != NULL);
 8005f40:	b923      	cbnz	r3, 8005f4c <os_callout_reset+0x14>
 8005f42:	461a      	mov	r2, r3
 8005f44:	4619      	mov	r1, r3
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fe6a 	bl	8005c20 <__assert_func>

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	db1c      	blt.n	8005f8a <os_callout_reset+0x52>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
 8005f50:	f7ff fda4 	bl	8005a9c <os_arch_save_sr>
 8005f54:	4606      	mov	r6, r0

    os_callout_stop(c);
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7ff ffd0 	bl	8005efc <os_callout_stop>

    if (ticks == 0) {
        ticks = 1;
 8005f5c:	2d00      	cmp	r5, #0
 8005f5e:	bf08      	it	eq
 8005f60:	2501      	moveq	r5, #1
    }

    c->c_ticks = os_time_get() + ticks;
 8005f62:	f001 f81b 	bl	8006f9c <os_time_get>

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8005f66:	4a10      	ldr	r2, [pc, #64]	; (8005fa8 <os_callout_reset+0x70>)
    c->c_ticks = os_time_get() + ticks;
 8005f68:	4428      	add	r0, r5
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8005f6a:	6813      	ldr	r3, [r2, #0]
    c->c_ticks = os_time_get() + ticks;
 8005f6c:	6160      	str	r0, [r4, #20]
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8005f6e:	b933      	cbnz	r3, 8005f7e <os_callout_reset+0x46>
    }

    if (entry) {
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
 8005f70:	61a3      	str	r3, [r4, #24]
 8005f72:	6853      	ldr	r3, [r2, #4]
 8005f74:	61e3      	str	r3, [r4, #28]
 8005f76:	601c      	str	r4, [r3, #0]
 8005f78:	3418      	adds	r4, #24
 8005f7a:	6054      	str	r4, [r2, #4]
 8005f7c:	e00e      	b.n	8005f9c <os_callout_reset+0x64>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
 8005f7e:	6959      	ldr	r1, [r3, #20]
 8005f80:	1a41      	subs	r1, r0, r1
 8005f82:	2900      	cmp	r1, #0
 8005f84:	db03      	blt.n	8005f8e <os_callout_reset+0x56>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	e7f1      	b.n	8005f6e <os_callout_reset+0x36>
        ret = OS_EINVAL;
 8005f8a:	2002      	movs	r0, #2

    ret = OS_OK;

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
 8005f8c:	e00a      	b.n	8005fa4 <os_callout_reset+0x6c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
 8005f8e:	69da      	ldr	r2, [r3, #28]
 8005f90:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8005f94:	69da      	ldr	r2, [r3, #28]
 8005f96:	6014      	str	r4, [r2, #0]
 8005f98:	3418      	adds	r4, #24
 8005f9a:	61dc      	str	r4, [r3, #28]
    OS_EXIT_CRITICAL(sr);
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f7ff fd83 	bl	8005aa8 <os_arch_restore_sr>
    ret = OS_OK;
 8005fa2:	2000      	movs	r0, #0
}
 8005fa4:	bd70      	pop	{r4, r5, r6, pc}
 8005fa6:	bf00      	nop
 8005fa8:	200034f8 	.word	0x200034f8

08005fac <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
 8005fae:	f000 fff5 	bl	8006f9c <os_time_get>
 8005fb2:	2700      	movs	r7, #0
 8005fb4:	4606      	mov	r6, r0

    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
 8005fb6:	4d11      	ldr	r5, [pc, #68]	; (8005ffc <os_callout_tick+0x50>)
        OS_ENTER_CRITICAL(sr);
 8005fb8:	f7ff fd70 	bl	8005a9c <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
 8005fbc:	682c      	ldr	r4, [r5, #0]
        if (c) {
 8005fbe:	b154      	cbz	r4, 8005fd6 <os_callout_tick+0x2a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
 8005fc0:	6963      	ldr	r3, [r4, #20]
 8005fc2:	1af3      	subs	r3, r6, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	db11      	blt.n	8005fec <os_callout_tick+0x40>
 8005fc8:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 8005fcc:	b163      	cbz	r3, 8005fe8 <os_callout_tick+0x3c>
 8005fce:	61da      	str	r2, [r3, #28]
 8005fd0:	69e2      	ldr	r2, [r4, #28]
 8005fd2:	6013      	str	r3, [r2, #0]
                c->c_next.tqe_prev = NULL;
 8005fd4:	61e7      	str	r7, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
 8005fd6:	f7ff fd67 	bl	8005aa8 <os_arch_restore_sr>

        if (c) {
 8005fda:	b16c      	cbz	r4, 8005ff8 <os_callout_tick+0x4c>
            if (c->c_evq) {
 8005fdc:	6920      	ldr	r0, [r4, #16]
 8005fde:	b138      	cbz	r0, 8005ff0 <os_callout_tick+0x44>
                os_eventq_put(c->c_evq, &c->c_ev);
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	f000 f8f1 	bl	80061c8 <os_eventq_put>
 8005fe6:	e7e7      	b.n	8005fb8 <os_callout_tick+0xc>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 8005fe8:	606a      	str	r2, [r5, #4]
 8005fea:	e7f1      	b.n	8005fd0 <os_callout_tick+0x24>
 8005fec:	2400      	movs	r4, #0
 8005fee:	e7f2      	b.n	8005fd6 <os_callout_tick+0x2a>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
 8005ff0:	6863      	ldr	r3, [r4, #4]
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	4798      	blx	r3
 8005ff6:	e7df      	b.n	8005fb8 <os_callout_tick+0xc>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
 8005ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	200034f8 	.word	0x200034f8

08006000 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
 8006000:	b510      	push	{r4, lr}
 8006002:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
 8006004:	f7ff fd53 	bl	8005aae <os_arch_in_critical>
 8006008:	4603      	mov	r3, r0
 800600a:	b918      	cbnz	r0, 8006014 <os_callout_wakeup_ticks+0x14>
 800600c:	4602      	mov	r2, r0
 800600e:	4601      	mov	r1, r0
 8006010:	f7ff fe06 	bl	8005c20 <__assert_func>

    c = TAILQ_FIRST(&g_callout_list);
 8006014:	4b05      	ldr	r3, [pc, #20]	; (800602c <os_callout_wakeup_ticks+0x2c>)
 8006016:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
 8006018:	b123      	cbz	r3, 8006024 <os_callout_wakeup_ticks+0x24>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
 800601a:	6958      	ldr	r0, [r3, #20]
 800601c:	1b00      	subs	r0, r0, r4
            rt = c->c_ticks - now;
        } else {
            rt = 0;     /* callout time is in the past */
 800601e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
 8006022:	bd10      	pop	{r4, pc}
        rt = OS_TIMEOUT_NEVER;
 8006024:	f04f 30ff 	mov.w	r0, #4294967295
 8006028:	e7fb      	b.n	8006022 <os_callout_wakeup_ticks+0x22>
 800602a:	bf00      	nop
 800602c:	200034f8 	.word	0x200034f8

08006030 <os_cputime_init>:

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
 8006030:	4601      	mov	r1, r0
 8006032:	2000      	movs	r0, #0
 8006034:	f002 bcf2 	b.w	8008a1c <hal_timer_config>

08006038 <os_cputime_get32>:
uint32_t
os_cputime_get32(void)
{
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
 8006038:	2000      	movs	r0, #0
 800603a:	f002 bd31 	b.w	8008aa0 <hal_timer_read>

0800603e <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
 800603e:	b510      	push	{r4, lr}
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
 8006040:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
{
 8006044:	4604      	mov	r4, r0
    rc = dev->od_init(dev, dev->od_init_arg);
 8006046:	4798      	blx	r3
 8006048:	7ee3      	ldrb	r3, [r4, #27]
    if (rc != 0) {
 800604a:	b120      	cbz	r0, 8006056 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
 800604c:	f013 0f08 	tst.w	r3, #8
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
 8006050:	bf08      	it	eq
 8006052:	2000      	moveq	r0, #0
err:
    return rc;
}
 8006054:	bd10      	pop	{r4, pc}
        dev->od_flags |= OS_DEV_F_STATUS_READY;
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	76e3      	strb	r3, [r4, #27]
 800605c:	e7fa      	b.n	8006054 <os_dev_initialize+0x16>
	...

08006060 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	4604      	mov	r4, r0
    dev->od_open_ref = 0;
 8006064:	2500      	movs	r5, #0
    dev->od_name = name;
 8006066:	61c1      	str	r1, [r0, #28]
{
 8006068:	461f      	mov	r7, r3
    dev->od_priority = priority;
 800606a:	7663      	strb	r3, [r4, #25]
    dev->od_init = od_init;
 800606c:	9b06      	ldr	r3, [sp, #24]
    dev->od_stage = stage;
 800606e:	7622      	strb	r2, [r4, #24]
    dev->od_init = od_init;
 8006070:	6103      	str	r3, [r0, #16]
    dev->od_init_arg = arg;
 8006072:	9b07      	ldr	r3, [sp, #28]
{
 8006074:	4616      	mov	r6, r2
    dev->od_init_arg = arg;
 8006076:	6143      	str	r3, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
 8006078:	2210      	movs	r2, #16
    dev->od_open_ref = 0;
 800607a:	8345      	strh	r5, [r0, #26]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
 800607c:	4629      	mov	r1, r5
 800607e:	f001 f960 	bl	8007342 <memset>
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
 8006082:	4a17      	ldr	r2, [pc, #92]	; (80060e0 <os_dev_create+0x80>)
 8006084:	6810      	ldr	r0, [r2, #0]
 8006086:	4613      	mov	r3, r2
 8006088:	b960      	cbnz	r0, 80060a4 <os_dev_create+0x44>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 800608a:	4623      	mov	r3, r4
 800608c:	f843 0f20 	str.w	r0, [r3, #32]!
 8006090:	e9c2 4300 	strd	r4, r3, [r2]
    rc = os_dev_add(dev);
    if (rc != 0) {
        goto err;
    }

    if (g_os_started) {
 8006094:	4b13      	ldr	r3, [pc, #76]	; (80060e4 <os_dev_create+0x84>)
 8006096:	6818      	ldr	r0, [r3, #0]
 8006098:	b300      	cbz	r0, 80060dc <os_dev_create+0x7c>
        rc = os_dev_initialize(dev);
 800609a:	4620      	mov	r0, r4
    }
err:
    return (rc);
}
 800609c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        rc = os_dev_initialize(dev);
 80060a0:	f7ff bfcd 	b.w	800603e <os_dev_initialize>
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
 80060a4:	4602      	mov	r2, r0
    prev_dev = NULL;
 80060a6:	4629      	mov	r1, r5
        if (dev->od_stage < cur_dev->od_stage ||
 80060a8:	7e15      	ldrb	r5, [r2, #24]
 80060aa:	42ae      	cmp	r6, r5
 80060ac:	d30a      	bcc.n	80060c4 <os_dev_create+0x64>
 80060ae:	d102      	bne.n	80060b6 <os_dev_create+0x56>
            ((dev->od_stage == cur_dev->od_stage) &&
 80060b0:	7e55      	ldrb	r5, [r2, #25]
 80060b2:	42bd      	cmp	r5, r7
 80060b4:	d806      	bhi.n	80060c4 <os_dev_create+0x64>
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 80060b6:	6a15      	ldr	r5, [r2, #32]
 80060b8:	4611      	mov	r1, r2
 80060ba:	b90d      	cbnz	r5, 80060c0 <os_dev_create+0x60>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 80060bc:	6225      	str	r5, [r4, #32]
 80060be:	e005      	b.n	80060cc <os_dev_create+0x6c>
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 80060c0:	462a      	mov	r2, r5
 80060c2:	e7f1      	b.n	80060a8 <os_dev_create+0x48>
    if (prev_dev) {
 80060c4:	b139      	cbz	r1, 80060d6 <os_dev_create+0x76>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 80060c6:	6a0a      	ldr	r2, [r1, #32]
 80060c8:	6222      	str	r2, [r4, #32]
 80060ca:	b912      	cbnz	r2, 80060d2 <os_dev_create+0x72>
 80060cc:	f104 0220 	add.w	r2, r4, #32
 80060d0:	605a      	str	r2, [r3, #4]
 80060d2:	620c      	str	r4, [r1, #32]
 80060d4:	e7de      	b.n	8006094 <os_dev_create+0x34>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 80060d6:	6220      	str	r0, [r4, #32]
 80060d8:	601c      	str	r4, [r3, #0]
 80060da:	e7db      	b.n	8006094 <os_dev_create+0x34>
}
 80060dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060de:	bf00      	nop
 80060e0:	20001bb0 	.word	0x20001bb0
 80060e4:	200034f4 	.word	0x200034f4

080060e8 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 80060ec:	4b07      	ldr	r3, [pc, #28]	; (800610c <os_dev_initialize_all+0x24>)
 80060ee:	681c      	ldr	r4, [r3, #0]
 80060f0:	b90c      	cbnz	r4, 80060f6 <os_dev_initialize_all+0xe>
 80060f2:	4620      	mov	r0, r4
                break;
            }
        }
    }

    return (rc);
 80060f4:	e009      	b.n	800610a <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
 80060f6:	7e23      	ldrb	r3, [r4, #24]
 80060f8:	42ab      	cmp	r3, r5
 80060fa:	d001      	beq.n	8006100 <os_dev_initialize_all+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 80060fc:	6a24      	ldr	r4, [r4, #32]
 80060fe:	e7f7      	b.n	80060f0 <os_dev_initialize_all+0x8>
            rc = os_dev_initialize(dev);
 8006100:	4620      	mov	r0, r4
 8006102:	f7ff ff9c 	bl	800603e <os_dev_initialize>
            if (rc) {
 8006106:	2800      	cmp	r0, #0
 8006108:	d0f8      	beq.n	80060fc <os_dev_initialize_all+0x14>
}
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	20001bb0 	.word	0x20001bb0

08006110 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8006114:	4b06      	ldr	r3, [pc, #24]	; (8006130 <os_dev_lookup+0x20>)
 8006116:	681c      	ldr	r4, [r3, #0]
 8006118:	b90c      	cbnz	r4, 800611e <os_dev_lookup+0xe>
        if (!strcmp(dev->od_name, name)) {
            break;
        }
    }
    return (dev);
}
 800611a:	4620      	mov	r0, r4
 800611c:	bd38      	pop	{r3, r4, r5, pc}
        if (!strcmp(dev->od_name, name)) {
 800611e:	4629      	mov	r1, r5
 8006120:	69e0      	ldr	r0, [r4, #28]
 8006122:	f001 f925 	bl	8007370 <strcmp>
 8006126:	2800      	cmp	r0, #0
 8006128:	d0f7      	beq.n	800611a <os_dev_lookup+0xa>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 800612a:	6a24      	ldr	r4, [r4, #32]
 800612c:	e7f4      	b.n	8006118 <os_dev_lookup+0x8>
 800612e:	bf00      	nop
 8006130:	20001bb0 	.word	0x20001bb0

08006134 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	460d      	mov	r5, r1
 8006138:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
 800613a:	f7ff ffe9 	bl	8006110 <os_dev_lookup>
    if (dev == NULL) {
 800613e:	4604      	mov	r4, r0
 8006140:	b910      	cbnz	r0, 8006148 <os_dev_open+0x14>
        return (NULL);
 8006142:	2400      	movs	r4, #0
    OS_EXIT_CRITICAL(sr);

    return (dev);
err:
    return (NULL);
}
 8006144:	4620      	mov	r0, r4
 8006146:	bd70      	pop	{r4, r5, r6, pc}
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
 8006148:	7ec3      	ldrb	r3, [r0, #27]
 800614a:	07db      	lsls	r3, r3, #31
 800614c:	d5f9      	bpl.n	8006142 <os_dev_open+0xe>
    if (dev->od_handlers.od_open) {
 800614e:	6803      	ldr	r3, [r0, #0]
 8006150:	b95b      	cbnz	r3, 800616a <os_dev_open+0x36>
    OS_ENTER_CRITICAL(sr);
 8006152:	f7ff fca3 	bl	8005a9c <os_arch_save_sr>
    ++dev->od_open_ref;
 8006156:	7ea3      	ldrb	r3, [r4, #26]
 8006158:	3301      	adds	r3, #1
 800615a:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
 800615c:	7ee3      	ldrb	r3, [r4, #27]
 800615e:	f043 0302 	orr.w	r3, r3, #2
 8006162:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
 8006164:	f7ff fca0 	bl	8005aa8 <os_arch_restore_sr>
    return (dev);
 8006168:	e7ec      	b.n	8006144 <os_dev_open+0x10>
        rc = dev->od_handlers.od_open(dev, timo, arg);
 800616a:	4632      	mov	r2, r6
 800616c:	4629      	mov	r1, r5
 800616e:	4798      	blx	r3
        if (rc != 0) {
 8006170:	2800      	cmp	r0, #0
 8006172:	d0ee      	beq.n	8006152 <os_dev_open+0x1e>
 8006174:	e7e5      	b.n	8006142 <os_dev_open+0xe>

08006176 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev->od_handlers.od_close) {
 8006176:	68c3      	ldr	r3, [r0, #12]
{
 8006178:	b510      	push	{r4, lr}
 800617a:	4604      	mov	r4, r0
    if (dev->od_handlers.od_close) {
 800617c:	b953      	cbnz	r3, 8006194 <os_dev_close+0x1e>
        if (rc != 0) {
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
 800617e:	f7ff fc8d 	bl	8005a9c <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
 8006182:	7ea3      	ldrb	r3, [r4, #26]
 8006184:	3b01      	subs	r3, #1
 8006186:	b2db      	uxtb	r3, r3
 8006188:	76a3      	strb	r3, [r4, #26]
 800618a:	b13b      	cbz	r3, 800619c <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
    }
    OS_EXIT_CRITICAL(sr);
 800618c:	f7ff fc8c 	bl	8005aa8 <os_arch_restore_sr>

    return (0);
 8006190:	2000      	movs	r0, #0
 8006192:	e002      	b.n	800619a <os_dev_close+0x24>
        rc = dev->od_handlers.od_close(dev);
 8006194:	4798      	blx	r3
        if (rc != 0) {
 8006196:	2800      	cmp	r0, #0
 8006198:	d0f1      	beq.n	800617e <os_dev_close+0x8>
err:
    return (rc);
}
 800619a:	bd10      	pop	{r4, pc}
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
 800619c:	7ee3      	ldrb	r3, [r4, #27]
 800619e:	f023 0306 	bic.w	r3, r3, #6
 80061a2:	76e3      	strb	r3, [r4, #27]
 80061a4:	e7f2      	b.n	800618c <os_dev_close+0x16>
	...

080061a8 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
 80061a8:	2200      	movs	r2, #0
 80061aa:	4b02      	ldr	r3, [pc, #8]	; (80061b4 <os_dev_reset+0xc>)
 80061ac:	e9c3 2300 	strd	r2, r3, [r3]
}
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20001bb0 	.word	0x20001bb0

080061b8 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
 80061b8:	2200      	movs	r2, #0
    STAILQ_INIT(&evq->evq_list);
 80061ba:	4603      	mov	r3, r0
    memset(evq, 0, sizeof(*evq));
 80061bc:	6002      	str	r2, [r0, #0]
 80061be:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
 80061c0:	f843 2f08 	str.w	r2, [r3, #8]!
 80061c4:	60c3      	str	r3, [r0, #12]
}
 80061c6:	4770      	bx	lr

080061c8 <os_eventq_put>:
    return evq->evq_list.stqh_last != NULL;
}

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
 80061c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061cc:	460d      	mov	r5, r1
 80061ce:	4606      	mov	r6, r0
    int resched;
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 80061d0:	f7ff fc64 	bl	8005a9c <os_arch_save_sr>

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
 80061d4:	782c      	ldrb	r4, [r5, #0]
    OS_ENTER_CRITICAL(sr);
 80061d6:	4680      	mov	r8, r0
    if (OS_EVENT_QUEUED(ev)) {
 80061d8:	b11c      	cbz	r4, 80061e2 <os_eventq_put+0x1a>
    if (resched) {
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
 80061da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        OS_EXIT_CRITICAL(sr);
 80061de:	f7ff bc63 	b.w	8005aa8 <os_arch_restore_sr>
    ev->ev_queued = 1;
 80061e2:	2701      	movs	r7, #1
 80061e4:	702f      	strb	r7, [r5, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
 80061e6:	68f3      	ldr	r3, [r6, #12]
    if (evq->evq_task) {
 80061e8:	6870      	ldr	r0, [r6, #4]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
 80061ea:	60ec      	str	r4, [r5, #12]
 80061ec:	601d      	str	r5, [r3, #0]
 80061ee:	350c      	adds	r5, #12
 80061f0:	60f5      	str	r5, [r6, #12]
    if (evq->evq_task) {
 80061f2:	b180      	cbz	r0, 8006216 <os_eventq_put+0x4e>
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
 80061f4:	7b03      	ldrb	r3, [r0, #12]
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d102      	bne.n	8006200 <os_eventq_put+0x38>
            os_sched_wakeup(evq->evq_task);
 80061fa:	f000 fd23 	bl	8006c44 <os_sched_wakeup>
            resched = 1;
 80061fe:	463c      	mov	r4, r7
        evq->evq_task = NULL;
 8006200:	2300      	movs	r3, #0
 8006202:	6073      	str	r3, [r6, #4]
    OS_EXIT_CRITICAL(sr);
 8006204:	4640      	mov	r0, r8
 8006206:	f7ff fc4f 	bl	8005aa8 <os_arch_restore_sr>
    if (resched) {
 800620a:	b134      	cbz	r4, 800621a <os_eventq_put+0x52>
}
 800620c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        os_sched(NULL);
 8006210:	2000      	movs	r0, #0
 8006212:	f000 bccb 	b.w	8006bac <os_sched>
    resched = 0;
 8006216:	4604      	mov	r4, r0
 8006218:	e7f4      	b.n	8006204 <os_eventq_put+0x3c>
}
 800621a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800621e <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
 800621e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006220:	4604      	mov	r4, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
 8006222:	f000 fcb7 	bl	8006b94 <os_sched_get_current_task>
    if (evq->evq_owner != t) {
 8006226:	6823      	ldr	r3, [r4, #0]
    t = os_sched_get_current_task();
 8006228:	4605      	mov	r5, r0
    if (evq->evq_owner != t) {
 800622a:	4283      	cmp	r3, r0
 800622c:	d001      	beq.n	8006232 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
 800622e:	b9b3      	cbnz	r3, 800625e <os_eventq_get+0x40>
            evq->evq_owner = t;
 8006230:	6020      	str	r0, [r4, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
 8006232:	f7ff fc33 	bl	8005a9c <os_arch_save_sr>
 8006236:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
 8006238:	68a6      	ldr	r6, [r4, #8]
    if (ev) {
 800623a:	b1b6      	cbz	r6, 800626a <os_eventq_get+0x4c>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 800623c:	68f3      	ldr	r3, [r6, #12]
 800623e:	60a3      	str	r3, [r4, #8]
 8006240:	b913      	cbnz	r3, 8006248 <os_eventq_get+0x2a>
 8006242:	f104 0308 	add.w	r3, r4, #8
 8006246:	60e3      	str	r3, [r4, #12]
        ev->ev_queued = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
 800624c:	7b6b      	ldrb	r3, [r5, #13]

        OS_ENTER_CRITICAL(sr);
        evq->evq_task = NULL;
        goto pull_one;
    }
    OS_EXIT_CRITICAL(sr);
 800624e:	4638      	mov	r0, r7
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
 8006250:	f023 0308 	bic.w	r3, r3, #8
 8006254:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
 8006256:	f7ff fc27 	bl	8005aa8 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
 800625a:	4630      	mov	r0, r6
 800625c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            assert(0);
 800625e:	2300      	movs	r3, #0
 8006260:	461a      	mov	r2, r3
 8006262:	4619      	mov	r1, r3
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fcdb 	bl	8005c20 <__assert_func>
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
 800626a:	f04f 31ff 	mov.w	r1, #4294967295
        evq->evq_task = t;
 800626e:	6065      	str	r5, [r4, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
 8006270:	4628      	mov	r0, r5
 8006272:	f000 fcad 	bl	8006bd0 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
 8006276:	7b6b      	ldrb	r3, [r5, #13]
        OS_EXIT_CRITICAL(sr);
 8006278:	4638      	mov	r0, r7
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
 800627a:	f043 0308 	orr.w	r3, r3, #8
 800627e:	736b      	strb	r3, [r5, #13]
        OS_EXIT_CRITICAL(sr);
 8006280:	f7ff fc12 	bl	8005aa8 <os_arch_restore_sr>
        os_sched(NULL);
 8006284:	4630      	mov	r0, r6
 8006286:	f000 fc91 	bl	8006bac <os_sched>
        OS_ENTER_CRITICAL(sr);
 800628a:	f7ff fc07 	bl	8005a9c <os_arch_save_sr>
        evq->evq_task = NULL;
 800628e:	6066      	str	r6, [r4, #4]
        OS_ENTER_CRITICAL(sr);
 8006290:	4607      	mov	r7, r0
        goto pull_one;
 8006292:	e7d1      	b.n	8006238 <os_eventq_get+0x1a>

08006294 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
 8006294:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
 8006296:	f7ff ffc2 	bl	800621e <os_eventq_get>
    assert(ev->ev_cb != NULL);
 800629a:	6843      	ldr	r3, [r0, #4]
 800629c:	b923      	cbnz	r3, 80062a8 <os_eventq_run+0x14>
 800629e:	461a      	mov	r2, r3
 80062a0:	4619      	mov	r1, r3
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff fcbc 	bl	8005c20 <__assert_func>
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
 80062a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ev->ev_cb(ev);
 80062ac:	4718      	bx	r3

080062ae <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
 80062ae:	b538      	push	{r3, r4, r5, lr}
 80062b0:	460c      	mov	r4, r1
 80062b2:	4605      	mov	r5, r0
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 80062b4:	f7ff fbf2 	bl	8005a9c <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
 80062b8:	7823      	ldrb	r3, [r4, #0]
 80062ba:	b143      	cbz	r3, 80062ce <os_eventq_remove+0x20>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 80062bc:	68ab      	ldr	r3, [r5, #8]
 80062be:	68e2      	ldr	r2, [r4, #12]
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d10b      	bne.n	80062dc <os_eventq_remove+0x2e>
 80062c4:	60aa      	str	r2, [r5, #8]
 80062c6:	b912      	cbnz	r2, 80062ce <os_eventq_remove+0x20>
 80062c8:	f105 0308 	add.w	r3, r5, #8
 80062cc:	60eb      	str	r3, [r5, #12]
    }
    ev->ev_queued = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
 80062d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
 80062d6:	f7ff bbe7 	b.w	8005aa8 <os_arch_restore_sr>
 80062da:	460b      	mov	r3, r1
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 80062dc:	68d9      	ldr	r1, [r3, #12]
 80062de:	42a1      	cmp	r1, r4
 80062e0:	d1fb      	bne.n	80062da <os_eventq_remove+0x2c>
 80062e2:	60da      	str	r2, [r3, #12]
 80062e4:	2a00      	cmp	r2, #0
 80062e6:	d1f2      	bne.n	80062ce <os_eventq_remove+0x20>
 80062e8:	330c      	adds	r3, #12
 80062ea:	e7ef      	b.n	80062cc <os_eventq_remove+0x1e>

080062ec <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
 80062ec:	4800      	ldr	r0, [pc, #0]	; (80062f0 <os_eventq_dflt_get+0x4>)
 80062ee:	4770      	bx	lr
 80062f0:	20001bb8 	.word	0x20001bb8

080062f4 <_os_mbuf_trailingspace>:
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 80062f4:	6882      	ldr	r2, [r0, #8]
 80062f6:	f100 0310 	add.w	r3, r0, #16
 80062fa:	8812      	ldrh	r2, [r2, #0]
 80062fc:	4413      	add	r3, r2
      (om->om_data + om->om_len);
 80062fe:	88c2      	ldrh	r2, [r0, #6]
 8006300:	6800      	ldr	r0, [r0, #0]
 8006302:	4410      	add	r0, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 8006304:	1a18      	subs	r0, r3, r0
}
 8006306:	b280      	uxth	r0, r0
 8006308:	4770      	bx	lr

0800630a <_os_mbuf_copypkthdr>:
 * @param new_buf The new buffer to copy the packet header into
 * @param old_buf The old buffer to copy the packet header from
 */
static inline void
_os_mbuf_copypkthdr(struct os_mbuf *new_buf, struct os_mbuf *old_buf)
{
 800630a:	b538      	push	{r3, r4, r5, lr}
    assert(new_buf->om_len == 0);
 800630c:	88c3      	ldrh	r3, [r0, #6]
{
 800630e:	4604      	mov	r4, r0
 8006310:	460d      	mov	r5, r1
    assert(new_buf->om_len == 0);
 8006312:	b12b      	cbz	r3, 8006320 <_os_mbuf_copypkthdr+0x16>
 8006314:	2300      	movs	r3, #0
 8006316:	461a      	mov	r2, r3
 8006318:	4619      	mov	r1, r3
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fc80 	bl	8005c20 <__assert_func>

    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
 8006320:	f100 0310 	add.w	r3, r0, #16
 8006324:	794a      	ldrb	r2, [r1, #5]
 8006326:	4618      	mov	r0, r3
 8006328:	3110      	adds	r1, #16
 800632a:	f000 fffd 	bl	8007328 <memcpy>
 800632e:	4603      	mov	r3, r0
           old_buf->om_pkthdr_len);
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
 8006330:	796a      	ldrb	r2, [r5, #5]
 8006332:	7162      	strb	r2, [r4, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
 8006334:	796a      	ldrb	r2, [r5, #5]
 8006336:	4413      	add	r3, r2
 8006338:	6023      	str	r3, [r4, #0]
}
 800633a:	bd38      	pop	{r3, r4, r5, pc}

0800633c <os_mqueue_init>:
{
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    STAILQ_INIT(&mq->mq_head);
 800633e:	2500      	movs	r5, #0
{
 8006340:	4604      	mov	r4, r0
 8006342:	460f      	mov	r7, r1
 8006344:	4616      	mov	r6, r2
    STAILQ_INIT(&mq->mq_head);
 8006346:	e9c0 5000 	strd	r5, r0, [r0]
    memset(ev, 0, sizeof(*ev));
 800634a:	2210      	movs	r2, #16
 800634c:	4629      	mov	r1, r5
 800634e:	3008      	adds	r0, #8
 8006350:	f000 fff7 	bl	8007342 <memset>
    ev->ev_arg = arg;
 8006354:	e9c4 7603 	strd	r7, r6, [r4, #12]
}
 8006358:	4628      	mov	r0, r5
 800635a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800635c <os_mqueue_get>:
{
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4605      	mov	r5, r0
    OS_ENTER_CRITICAL(sr);
 8006360:	f7ff fb9c 	bl	8005a9c <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
 8006364:	682c      	ldr	r4, [r5, #0]
    if (mp) {
 8006366:	b144      	cbz	r4, 800637a <os_mqueue_get+0x1e>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
 8006368:	6863      	ldr	r3, [r4, #4]
 800636a:	602b      	str	r3, [r5, #0]
 800636c:	b903      	cbnz	r3, 8006370 <os_mqueue_get+0x14>
 800636e:	606d      	str	r5, [r5, #4]
    OS_EXIT_CRITICAL(sr);
 8006370:	f7ff fb9a 	bl	8005aa8 <os_arch_restore_sr>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
 8006374:	f1a4 0010 	sub.w	r0, r4, #16
}
 8006378:	bd38      	pop	{r3, r4, r5, pc}
    OS_EXIT_CRITICAL(sr);
 800637a:	f7ff fb95 	bl	8005aa8 <os_arch_restore_sr>
        m = NULL;
 800637e:	4620      	mov	r0, r4
 8006380:	e7fa      	b.n	8006378 <os_mqueue_get+0x1c>

08006382 <os_mqueue_put>:
{
 8006382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!OS_MBUF_IS_PKTHDR(m)) {
 8006384:	7953      	ldrb	r3, [r2, #5]
{
 8006386:	4606      	mov	r6, r0
    if (!OS_MBUF_IS_PKTHDR(m)) {
 8006388:	2b07      	cmp	r3, #7
{
 800638a:	460c      	mov	r4, r1
 800638c:	4615      	mov	r5, r2
    if (!OS_MBUF_IS_PKTHDR(m)) {
 800638e:	d913      	bls.n	80063b8 <os_mqueue_put+0x36>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
 8006390:	2700      	movs	r7, #0
    OS_ENTER_CRITICAL(sr);
 8006392:	f7ff fb83 	bl	8005a9c <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
 8006396:	6873      	ldr	r3, [r6, #4]
 8006398:	616f      	str	r7, [r5, #20]
    mp = OS_MBUF_PKTHDR(m);
 800639a:	f105 0210 	add.w	r2, r5, #16
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
 800639e:	3514      	adds	r5, #20
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	6075      	str	r5, [r6, #4]
    OS_EXIT_CRITICAL(sr);
 80063a4:	f7ff fb80 	bl	8005aa8 <os_arch_restore_sr>
    if (evq) {
 80063a8:	b144      	cbz	r4, 80063bc <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
 80063aa:	4620      	mov	r0, r4
 80063ac:	f106 0108 	add.w	r1, r6, #8
 80063b0:	f7ff ff0a 	bl	80061c8 <os_eventq_put>
    return (0);
 80063b4:	4638      	mov	r0, r7
}
 80063b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (rc);
 80063b8:	2002      	movs	r0, #2
 80063ba:	e7fc      	b.n	80063b6 <os_mqueue_put+0x34>
    return (0);
 80063bc:	4620      	mov	r0, r4
 80063be:	e7fa      	b.n	80063b6 <os_mqueue_put+0x34>

080063c0 <os_mbuf_pool_init>:
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
 80063c0:	3a10      	subs	r2, #16
 80063c2:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
 80063c4:	6041      	str	r1, [r0, #4]
}
 80063c6:	2000      	movs	r0, #0
 80063c8:	4770      	bx	lr

080063ca <os_mbuf_get>:
{
 80063ca:	b538      	push	{r3, r4, r5, lr}
    if (leadingspace > omp->omp_databuf_len) {
 80063cc:	8803      	ldrh	r3, [r0, #0]
{
 80063ce:	4604      	mov	r4, r0
    if (leadingspace > omp->omp_databuf_len) {
 80063d0:	428b      	cmp	r3, r1
{
 80063d2:	460d      	mov	r5, r1
    if (leadingspace > omp->omp_databuf_len) {
 80063d4:	d30c      	bcc.n	80063f0 <os_mbuf_get+0x26>
    om = os_memblock_get(omp->omp_pool);
 80063d6:	6840      	ldr	r0, [r0, #4]
 80063d8:	f000 f9af 	bl	800673a <os_memblock_get>
    if (!om) {
 80063dc:	b138      	cbz	r0, 80063ee <os_mbuf_get+0x24>
    SLIST_NEXT(om, om_next) = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
 80063e2:	6043      	str	r3, [r0, #4]
    om->om_data = (&om->om_databuf[0] + leadingspace);
 80063e4:	f100 0310 	add.w	r3, r0, #16
 80063e8:	442b      	add	r3, r5
 80063ea:	6003      	str	r3, [r0, #0]
    om->om_omp = omp;
 80063ec:	6084      	str	r4, [r0, #8]
}
 80063ee:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
 80063f0:	2000      	movs	r0, #0
    return om;
 80063f2:	e7fc      	b.n	80063ee <os_mbuf_get+0x24>

080063f4 <os_mbuf_get_pkthdr>:
{
 80063f4:	b538      	push	{r3, r4, r5, lr}
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
 80063f6:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
 80063fa:	8803      	ldrh	r3, [r0, #0]
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
 80063fc:	b2ac      	uxth	r4, r5
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
 80063fe:	42a3      	cmp	r3, r4
 8006400:	d30d      	bcc.n	800641e <os_mbuf_get_pkthdr+0x2a>
 8006402:	2cff      	cmp	r4, #255	; 0xff
 8006404:	d80b      	bhi.n	800641e <os_mbuf_get_pkthdr+0x2a>
    om = os_mbuf_get(omp, 0);
 8006406:	2100      	movs	r1, #0
 8006408:	f7ff ffdf 	bl	80063ca <os_mbuf_get>
    if (om) {
 800640c:	b130      	cbz	r0, 800641c <os_mbuf_get_pkthdr+0x28>
        om->om_data += pkthdr_len;
 800640e:	6803      	ldr	r3, [r0, #0]
        om->om_pkthdr_len = pkthdr_len;
 8006410:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
 8006412:	4423      	add	r3, r4
 8006414:	6003      	str	r3, [r0, #0]
        pkthdr->omp_len = 0;
 8006416:	2300      	movs	r3, #0
        pkthdr->omp_flags = 0;
 8006418:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
 800641c:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
 800641e:	2000      	movs	r0, #0
    return om;
 8006420:	e7fc      	b.n	800641c <os_mbuf_get_pkthdr+0x28>

08006422 <os_mbuf_free>:
{
 8006422:	4601      	mov	r1, r0
    if (om->om_omp != NULL) {
 8006424:	6880      	ldr	r0, [r0, #8]
{
 8006426:	b508      	push	{r3, lr}
    if (om->om_omp != NULL) {
 8006428:	b110      	cbz	r0, 8006430 <os_mbuf_free+0xe>
        rc = os_memblock_put(om->om_omp->omp_pool, om);
 800642a:	6840      	ldr	r0, [r0, #4]
 800642c:	f000 f9ad 	bl	800678a <os_memblock_put>
}
 8006430:	bd08      	pop	{r3, pc}

08006432 <os_mbuf_free_chain>:
{
 8006432:	4603      	mov	r3, r0
 8006434:	b510      	push	{r4, lr}
    while (om != NULL) {
 8006436:	b90b      	cbnz	r3, 800643c <os_mbuf_free_chain+0xa>
    rc = 0;
 8006438:	4618      	mov	r0, r3
    return (rc);
 800643a:	e006      	b.n	800644a <os_mbuf_free_chain+0x18>
        rc = os_mbuf_free(om);
 800643c:	4618      	mov	r0, r3
        next = SLIST_NEXT(om, om_next);
 800643e:	68dc      	ldr	r4, [r3, #12]
        rc = os_mbuf_free(om);
 8006440:	f7ff ffef 	bl	8006422 <os_mbuf_free>
        om = next;
 8006444:	4623      	mov	r3, r4
        if (rc != 0) {
 8006446:	2800      	cmp	r0, #0
 8006448:	d0f5      	beq.n	8006436 <os_mbuf_free_chain+0x4>
}
 800644a:	bd10      	pop	{r4, pc}

0800644c <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
 800644c:	2300      	movs	r3, #0
    while (om != NULL) {
 800644e:	b908      	cbnz	r0, 8006454 <os_mbuf_len+0x8>
        len += om->om_len;
        om = SLIST_NEXT(om, om_next);
    }

    return len;
}
 8006450:	4618      	mov	r0, r3
 8006452:	4770      	bx	lr
        len += om->om_len;
 8006454:	88c2      	ldrh	r2, [r0, #6]
        om = SLIST_NEXT(om, om_next);
 8006456:	68c0      	ldr	r0, [r0, #12]
        len += om->om_len;
 8006458:	4413      	add	r3, r2
 800645a:	b29b      	uxth	r3, r3
 800645c:	e7f7      	b.n	800644e <os_mbuf_len+0x2>

0800645e <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
 800645e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006462:	4688      	mov	r8, r1
 8006464:	4616      	mov	r6, r2
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
 8006466:	4607      	mov	r7, r0
 8006468:	2800      	cmp	r0, #0
 800646a:	d042      	beq.n	80064f2 <os_mbuf_append+0x94>

    omp = om->om_omp;

    /* Scroll to last mbuf in the chain */
    last = om;
    while (SLIST_NEXT(last, om_next) != NULL) {
 800646c:	4605      	mov	r5, r0
    omp = om->om_omp;
 800646e:	f8d0 a008 	ldr.w	sl, [r0, #8]
    while (SLIST_NEXT(last, om_next) != NULL) {
 8006472:	68eb      	ldr	r3, [r5, #12]
 8006474:	bb23      	cbnz	r3, 80064c0 <os_mbuf_append+0x62>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    space = OS_MBUF_TRAILINGSPACE(last);
 8006476:	4628      	mov	r0, r5
    remainder = len;
 8006478:	4634      	mov	r4, r6
    space = OS_MBUF_TRAILINGSPACE(last);
 800647a:	f7ff ff3b 	bl	80062f4 <_os_mbuf_trailingspace>

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
 800647e:	b178      	cbz	r0, 80064a0 <os_mbuf_append+0x42>
 8006480:	42b0      	cmp	r0, r6
 8006482:	bfa8      	it	ge
 8006484:	4630      	movge	r0, r6
 8006486:	4604      	mov	r4, r0
        if (space > remainder) {
            space = remainder;
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	88e8      	ldrh	r0, [r5, #6]
 800648c:	4622      	mov	r2, r4
 800648e:	4641      	mov	r1, r8
 8006490:	4418      	add	r0, r3
 8006492:	f000 ff49 	bl	8007328 <memcpy>

        last->om_len += space;
 8006496:	88eb      	ldrh	r3, [r5, #6]
        data += space;
 8006498:	44a0      	add	r8, r4
        last->om_len += space;
 800649a:	4423      	add	r3, r4
 800649c:	80eb      	strh	r3, [r5, #6]
        remainder -= space;
 800649e:	1b34      	subs	r4, r6, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
 80064a0:	2c00      	cmp	r4, #0
 80064a2:	dd05      	ble.n	80064b0 <os_mbuf_append+0x52>
        new = os_mbuf_get(omp, 0);
 80064a4:	2100      	movs	r1, #0
 80064a6:	4650      	mov	r0, sl
 80064a8:	f7ff ff8f 	bl	80063ca <os_mbuf_get>
        if (!new) {
 80064ac:	4681      	mov	r9, r0
 80064ae:	b948      	cbnz	r0, 80064c4 <os_mbuf_append+0x66>
        SLIST_NEXT(last, om_next) = new;
        last = new;
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
 80064b0:	797b      	ldrb	r3, [r7, #5]
 80064b2:	2b07      	cmp	r3, #7
 80064b4:	d818      	bhi.n	80064e8 <os_mbuf_append+0x8a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    }

    if (remainder != 0) {
 80064b6:	1c20      	adds	r0, r4, #0
 80064b8:	bf18      	it	ne
 80064ba:	2001      	movne	r0, #1


    return (0);
err:
    return (rc);
}
 80064bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c0:	461d      	mov	r5, r3
 80064c2:	e7d6      	b.n	8006472 <os_mbuf_append+0x14>
        new->om_len = min(omp->omp_databuf_len, remainder);
 80064c4:	f8ba 2000 	ldrh.w	r2, [sl]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
 80064c8:	4641      	mov	r1, r8
        new->om_len = min(omp->omp_databuf_len, remainder);
 80064ca:	42a2      	cmp	r2, r4
 80064cc:	bfa8      	it	ge
 80064ce:	4622      	movge	r2, r4
 80064d0:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
 80064d2:	6800      	ldr	r0, [r0, #0]
 80064d4:	f000 ff28 	bl	8007328 <memcpy>
        data += new->om_len;
 80064d8:	f8b9 3006 	ldrh.w	r3, [r9, #6]
        SLIST_NEXT(last, om_next) = new;
 80064dc:	f8c5 900c 	str.w	r9, [r5, #12]
        data += new->om_len;
 80064e0:	4498      	add	r8, r3
        remainder -= new->om_len;
 80064e2:	1ae4      	subs	r4, r4, r3
        SLIST_NEXT(last, om_next) = new;
 80064e4:	464d      	mov	r5, r9
 80064e6:	e7db      	b.n	80064a0 <os_mbuf_append+0x42>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
 80064e8:	8a3b      	ldrh	r3, [r7, #16]
 80064ea:	441e      	add	r6, r3
 80064ec:	1b36      	subs	r6, r6, r4
 80064ee:	823e      	strh	r6, [r7, #16]
 80064f0:	e7e1      	b.n	80064b6 <os_mbuf_append+0x58>
        rc = OS_EINVAL;
 80064f2:	2002      	movs	r0, #2
 80064f4:	e7e2      	b.n	80064bc <os_mbuf_append+0x5e>

080064f6 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
 80064f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    struct os_mbuf *copy;

    omp = om->om_omp;

    head = NULL;
    copy = NULL;
 80064fa:	2500      	movs	r5, #0
{
 80064fc:	4604      	mov	r4, r0
    head = NULL;
 80064fe:	462e      	mov	r6, r5
    omp = om->om_omp;
 8006500:	6887      	ldr	r7, [r0, #8]
 8006502:	7963      	ldrb	r3, [r4, #5]
 8006504:	f104 0210 	add.w	r2, r4, #16
    if (OS_MBUF_IS_PKTHDR(om)) {
 8006508:	2b07      	cmp	r3, #7
 800650a:	bf98      	it	ls
 800650c:	2300      	movls	r3, #0
 800650e:	6821      	ldr	r1, [r4, #0]
        ((uint8_t *) &om->om_databuf[0] + startoff));
 8006510:	4413      	add	r3, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8006512:	1ac9      	subs	r1, r1, r3

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
 8006514:	b289      	uxth	r1, r1
 8006516:	4638      	mov	r0, r7
        if (head) {
 8006518:	b15e      	cbz	r6, 8006532 <os_mbuf_dup+0x3c>
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
 800651a:	f7ff ff56 	bl	80063ca <os_mbuf_get>
 800651e:	4680      	mov	r8, r0
 8006520:	60e8      	str	r0, [r5, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
 8006522:	b998      	cbnz	r0, 800654c <os_mbuf_dup+0x56>
                os_mbuf_free_chain(head);
 8006524:	4630      	mov	r0, r6
 8006526:	f7ff ff84 	bl	8006432 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
 800652a:	4646      	mov	r6, r8
}
 800652c:	4630      	mov	r0, r6
 800652e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
 8006532:	f7ff ff4a 	bl	80063ca <os_mbuf_get>
            if (!head) {
 8006536:	4606      	mov	r6, r0
 8006538:	2800      	cmp	r0, #0
 800653a:	d0f7      	beq.n	800652c <os_mbuf_dup+0x36>
            if (OS_MBUF_IS_PKTHDR(om)) {
 800653c:	7963      	ldrb	r3, [r4, #5]
 800653e:	2b07      	cmp	r3, #7
 8006540:	d902      	bls.n	8006548 <os_mbuf_dup+0x52>
                _os_mbuf_copypkthdr(head, om);
 8006542:	4621      	mov	r1, r4
 8006544:	f7ff fee1 	bl	800630a <_os_mbuf_copypkthdr>
 8006548:	4635      	mov	r5, r6
 800654a:	e000      	b.n	800654e <os_mbuf_dup+0x58>
 800654c:	4605      	mov	r5, r0
        copy->om_flags = om->om_flags;
 800654e:	7923      	ldrb	r3, [r4, #4]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
 8006550:	6828      	ldr	r0, [r5, #0]
        copy->om_flags = om->om_flags;
 8006552:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
 8006554:	88e3      	ldrh	r3, [r4, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
 8006556:	6821      	ldr	r1, [r4, #0]
        copy->om_len = om->om_len;
 8006558:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
 800655a:	88e2      	ldrh	r2, [r4, #6]
 800655c:	f000 fee4 	bl	8007328 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
 8006560:	68e4      	ldr	r4, [r4, #12]
 8006562:	2c00      	cmp	r4, #0
 8006564:	d1cd      	bne.n	8006502 <os_mbuf_dup+0xc>
 8006566:	e7e1      	b.n	800652c <os_mbuf_dup+0x36>

08006568 <os_mbuf_adj>:
    return (len > 0 ? -1 : 0);
}

void
os_mbuf_adj(struct os_mbuf *mp, int req_len)
{
 8006568:	b570      	push	{r4, r5, r6, lr}
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
 800656a:	4604      	mov	r4, r0
 800656c:	b368      	cbz	r0, 80065ca <os_mbuf_adj+0x62>
        return;
    if (len >= 0) {
 800656e:	2900      	cmp	r1, #0
 8006570:	da17      	bge.n	80065a2 <os_mbuf_adj+0x3a>
         * If the adjustment only affects this mbuf, then just
         * adjust and return.  Otherwise, rescan and truncate
         * after the remaining size.
         */
        len = -len;
        count = 0;
 8006572:	2500      	movs	r5, #0
        len = -len;
 8006574:	424b      	negs	r3, r1
        for (;;) {
            count += m->om_len;
 8006576:	88c2      	ldrh	r2, [r0, #6]
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
 8006578:	68c6      	ldr	r6, [r0, #12]
            count += m->om_len;
 800657a:	4415      	add	r5, r2
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
 800657c:	bb36      	cbnz	r6, 80065cc <os_mbuf_adj+0x64>
                break;
            m = SLIST_NEXT(m, om_next);
        }
        if (m->om_len >= len) {
 800657e:	429a      	cmp	r2, r3
 8006580:	7966      	ldrb	r6, [r4, #5]
 8006582:	db25      	blt.n	80065d0 <os_mbuf_adj+0x68>
            m->om_len -= len;
 8006584:	b29b      	uxth	r3, r3
 8006586:	1ad2      	subs	r2, r2, r3
            if (OS_MBUF_IS_PKTHDR(mp))
 8006588:	2e07      	cmp	r6, #7
            m->om_len -= len;
 800658a:	80c2      	strh	r2, [r0, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
 800658c:	d91d      	bls.n	80065ca <os_mbuf_adj+0x62>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
 800658e:	8a22      	ldrh	r2, [r4, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	e019      	b.n	80065c8 <os_mbuf_adj+0x60>
                m->om_len -= len;
 8006594:	1ac0      	subs	r0, r0, r3
 8006596:	80d0      	strh	r0, [r2, #6]
                m->om_data += len;
 8006598:	6810      	ldr	r0, [r2, #0]
 800659a:	4403      	add	r3, r0
 800659c:	6013      	str	r3, [r2, #0]
                len = 0;
 800659e:	2300      	movs	r3, #0
 80065a0:	e00c      	b.n	80065bc <os_mbuf_adj+0x54>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
                m->om_len = 0;
 80065a6:	2500      	movs	r5, #0
        while (m != NULL && len > 0) {
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	dd07      	ble.n	80065bc <os_mbuf_adj+0x54>
            if (m->om_len <= len) {
 80065ac:	88d0      	ldrh	r0, [r2, #6]
 80065ae:	4298      	cmp	r0, r3
 80065b0:	dcf0      	bgt.n	8006594 <os_mbuf_adj+0x2c>
                m->om_len = 0;
 80065b2:	80d5      	strh	r5, [r2, #6]
                m = SLIST_NEXT(m, om_next);
 80065b4:	68d2      	ldr	r2, [r2, #12]
                len -= m->om_len;
 80065b6:	1a1b      	subs	r3, r3, r0
        while (m != NULL && len > 0) {
 80065b8:	2a00      	cmp	r2, #0
 80065ba:	d1f5      	bne.n	80065a8 <os_mbuf_adj+0x40>
        if (OS_MBUF_IS_PKTHDR(mp))
 80065bc:	7962      	ldrb	r2, [r4, #5]
 80065be:	2a07      	cmp	r2, #7
 80065c0:	d903      	bls.n	80065ca <os_mbuf_adj+0x62>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
 80065c2:	8a22      	ldrh	r2, [r4, #16]
 80065c4:	1a51      	subs	r1, r2, r1
 80065c6:	440b      	add	r3, r1
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
 80065c8:	8223      	strh	r3, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
 80065cc:	4630      	mov	r0, r6
 80065ce:	e7d2      	b.n	8006576 <os_mbuf_adj+0xe>
        count -= len;
 80065d0:	4429      	add	r1, r5
 80065d2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
        if (OS_MBUF_IS_PKTHDR(m))
 80065d6:	2e07      	cmp	r6, #7
            OS_MBUF_PKTHDR(m)->omp_len = count;
 80065d8:	bf88      	it	hi
 80065da:	8221      	strhhi	r1, [r4, #16]
            if (m->om_len >= count) {
 80065dc:	88e3      	ldrh	r3, [r4, #6]
 80065de:	68e0      	ldr	r0, [r4, #12]
 80065e0:	428b      	cmp	r3, r1
 80065e2:	db07      	blt.n	80065f4 <os_mbuf_adj+0x8c>
                m->om_len = count;
 80065e4:	80e1      	strh	r1, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d0ef      	beq.n	80065ca <os_mbuf_adj+0x62>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
 80065ea:	f7ff ff22 	bl	8006432 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60e3      	str	r3, [r4, #12]
 80065f2:	e7ea      	b.n	80065ca <os_mbuf_adj+0x62>
            count -= m->om_len;
 80065f4:	1ac9      	subs	r1, r1, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
 80065f6:	4604      	mov	r4, r0
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d1ef      	bne.n	80065dc <os_mbuf_adj+0x74>
 80065fc:	e7e5      	b.n	80065ca <os_mbuf_adj+0x62>

080065fe <os_mbuf_prepend>:
    }
}

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
 80065fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006600:	460d      	mov	r5, r1
 8006602:	4604      	mov	r4, r0
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
 8006604:	2600      	movs	r6, #0
    if (OS_MBUF_IS_PKTHDR(om)) {
 8006606:	7961      	ldrb	r1, [r4, #5]
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8006608:	4623      	mov	r3, r4
    if (OS_MBUF_IS_PKTHDR(om)) {
 800660a:	2908      	cmp	r1, #8
 800660c:	bf2c      	ite	cs
 800660e:	4608      	movcs	r0, r1
 8006610:	2000      	movcc	r0, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8006612:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
 8006616:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	b29b      	uxth	r3, r3
 800661c:	42ab      	cmp	r3, r5
 800661e:	bfa8      	it	ge
 8006620:	462b      	movge	r3, r5
        om->om_len += leading;
 8006622:	88e0      	ldrh	r0, [r4, #6]
        om->om_data -= leading;
 8006624:	1ad2      	subs	r2, r2, r3
 8006626:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
 8006628:	b29a      	uxth	r2, r3
        if (OS_MBUF_IS_PKTHDR(om)) {
 800662a:	2907      	cmp	r1, #7
        om->om_len += leading;
 800662c:	4410      	add	r0, r2
 800662e:	80e0      	strh	r0, [r4, #6]
            OS_MBUF_PKTHDR(om)->omp_len += leading;
 8006630:	bf82      	ittt	hi
 8006632:	8a20      	ldrhhi	r0, [r4, #16]
 8006634:	1812      	addhi	r2, r2, r0
 8006636:	8222      	strhhi	r2, [r4, #16]
        if (len == 0) {
 8006638:	1aed      	subs	r5, r5, r3
 800663a:	d00c      	beq.n	8006656 <os_mbuf_prepend+0x58>
        if (OS_MBUF_IS_PKTHDR(om)) {
 800663c:	2907      	cmp	r1, #7
 800663e:	68a0      	ldr	r0, [r4, #8]
 8006640:	d90b      	bls.n	800665a <os_mbuf_prepend+0x5c>
            p = os_mbuf_get_pkthdr(om->om_omp,
 8006642:	3908      	subs	r1, #8
 8006644:	b2c9      	uxtb	r1, r1
 8006646:	f7ff fed5 	bl	80063f4 <os_mbuf_get_pkthdr>
            p = os_mbuf_get(om->om_omp, 0);
 800664a:	4607      	mov	r7, r0
        }
        if (p == NULL) {
 800664c:	b948      	cbnz	r0, 8006662 <os_mbuf_prepend+0x64>
            os_mbuf_free_chain(om);
 800664e:	4620      	mov	r0, r4
 8006650:	f7ff feef 	bl	8006432 <os_mbuf_free_chain>
            om = NULL;
 8006654:	463c      	mov	r4, r7
        SLIST_NEXT(p, om_next) = om;
        om = p;
    }

    return om;
}
 8006656:	4620      	mov	r0, r4
 8006658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            p = os_mbuf_get(om->om_omp, 0);
 800665a:	2100      	movs	r1, #0
 800665c:	f7ff feb5 	bl	80063ca <os_mbuf_get>
 8006660:	e7f3      	b.n	800664a <os_mbuf_prepend+0x4c>
        if (OS_MBUF_IS_PKTHDR(om)) {
 8006662:	7963      	ldrb	r3, [r4, #5]
 8006664:	2b07      	cmp	r3, #7
 8006666:	d903      	bls.n	8006670 <os_mbuf_prepend+0x72>
            _os_mbuf_copypkthdr(p, om);
 8006668:	4621      	mov	r1, r4
 800666a:	f7ff fe4e 	bl	800630a <_os_mbuf_copypkthdr>
            om->om_pkthdr_len = 0;
 800666e:	7166      	strb	r6, [r4, #5]
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
 8006670:	4638      	mov	r0, r7
 8006672:	f7ff fe3f 	bl	80062f4 <_os_mbuf_trailingspace>
 8006676:	683b      	ldr	r3, [r7, #0]
        SLIST_NEXT(p, om_next) = om;
 8006678:	60fc      	str	r4, [r7, #12]
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
 800667a:	4418      	add	r0, r3
 800667c:	6038      	str	r0, [r7, #0]
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
 800667e:	463c      	mov	r4, r7
 8006680:	e7c1      	b.n	8006606 <os_mbuf_prepend+0x8>

08006682 <os_mbuf_concat>:
    return 0;
}

void
os_mbuf_concat(struct os_mbuf *first, struct os_mbuf *second)
{
 8006682:	4603      	mov	r3, r0
 8006684:	b510      	push	{r4, lr}
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
    while (1) {
        next = SLIST_NEXT(cur, om_next);
 8006686:	68da      	ldr	r2, [r3, #12]
        if (next == NULL) {
 8006688:	b96a      	cbnz	r2, 80066a6 <os_mbuf_concat+0x24>

        cur = next;
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
 800668a:	60d9      	str	r1, [r3, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
 800668c:	7943      	ldrb	r3, [r0, #5]
 800668e:	2b07      	cmp	r3, #7
 8006690:	d906      	bls.n	80066a0 <os_mbuf_concat+0x1e>
        if (OS_MBUF_IS_PKTHDR(second)) {
 8006692:	794a      	ldrb	r2, [r1, #5]
 8006694:	8a03      	ldrh	r3, [r0, #16]
 8006696:	2a07      	cmp	r2, #7
 8006698:	d907      	bls.n	80066aa <os_mbuf_concat+0x28>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
 800669a:	8a0a      	ldrh	r2, [r1, #16]
 800669c:	4413      	add	r3, r2
 800669e:	8203      	strh	r3, [r0, #16]
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
            }
        }
    }

    second->om_pkthdr_len = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	714b      	strb	r3, [r1, #5]
}
 80066a4:	bd10      	pop	{r4, pc}
 80066a6:	4613      	mov	r3, r2
 80066a8:	e7ed      	b.n	8006686 <os_mbuf_concat+0x4>
 80066aa:	460a      	mov	r2, r1
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
 80066ac:	88d4      	ldrh	r4, [r2, #6]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
 80066ae:	68d2      	ldr	r2, [r2, #12]
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
 80066b0:	4423      	add	r3, r4
 80066b2:	b29b      	uxth	r3, r3
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
 80066b4:	2a00      	cmp	r2, #0
 80066b6:	d1f9      	bne.n	80066ac <os_mbuf_concat+0x2a>
 80066b8:	e7f1      	b.n	800669e <os_mbuf_concat+0x1c>
	...

080066bc <os_mempool_init_internal>:

static os_error_t
os_mempool_init_internal(struct os_mempool *mp, uint16_t blocks,
                         uint32_t block_size, void *membuf, char *name,
                         uint8_t flags)
{
 80066bc:	b570      	push	{r4, r5, r6, lr}
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
 80066be:	b110      	cbz	r0, 80066c6 <os_mempool_init_internal+0xa>
 80066c0:	b10a      	cbz	r2, 80066c6 <os_mempool_init_internal+0xa>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
 80066c2:	b913      	cbnz	r3, 80066ca <os_mempool_init_internal+0xe>
 80066c4:	b119      	cbz	r1, 80066ce <os_mempool_init_internal+0x12>
        return OS_INVALID_PARM;
 80066c6:	2003      	movs	r0, #3
 80066c8:	e023      	b.n	8006712 <os_mempool_init_internal+0x56>

    if (membuf != NULL) {
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
 80066ca:	079d      	lsls	r5, r3, #30
 80066cc:	d127      	bne.n	800671e <os_mempool_init_internal+0x62>

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    mp->mp_num_free = blocks;
    mp->mp_min_free = blocks;
    mp->mp_flags = flags;
 80066ce:	f89d 4014 	ldrb.w	r4, [sp, #20]
    mp->mp_block_size = block_size;
 80066d2:	6002      	str	r2, [r0, #0]
    mp->mp_flags = flags;
 80066d4:	7284      	strb	r4, [r0, #10]
    mp->mp_num_blocks = blocks;
    mp->mp_membuf_addr = (uint32_t)membuf;
    mp->name = name;
 80066d6:	9c04      	ldr	r4, [sp, #16]
    mp->mp_num_free = blocks;
 80066d8:	80c1      	strh	r1, [r0, #6]
    mp->mp_min_free = blocks;
 80066da:	8101      	strh	r1, [r0, #8]
    mp->mp_num_blocks = blocks;
 80066dc:	8081      	strh	r1, [r0, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
 80066de:	60c3      	str	r3, [r0, #12]
    SLIST_FIRST(mp) = membuf;
 80066e0:	e9c0 3405 	strd	r3, r4, [r0, #20]

    if (blocks > 0) {
 80066e4:	b169      	cbz	r1, 8006702 <os_mempool_init_internal+0x46>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
 80066e6:	0794      	lsls	r4, r2, #30
{
 80066e8:	461d      	mov	r5, r3

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
 80066ea:	f04f 0401 	mov.w	r4, #1
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
 80066ee:	bf1c      	itt	ne
 80066f0:	f022 0203 	bicne.w	r2, r2, #3
 80066f4:	3204      	addne	r2, #4
        for (i = 1; i < blocks; i++) {
 80066f6:	428c      	cmp	r4, r1
 80066f8:	db0c      	blt.n	8006714 <os_mempool_init_internal+0x58>
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
 80066fa:	3901      	subs	r1, #1
 80066fc:	434a      	muls	r2, r1
 80066fe:	2100      	movs	r1, #0
 8006700:	5099      	str	r1, [r3, r2]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
 8006702:	2300      	movs	r3, #0
 8006704:	4a07      	ldr	r2, [pc, #28]	; (8006724 <os_mempool_init_internal+0x68>)
 8006706:	6103      	str	r3, [r0, #16]
 8006708:	6851      	ldr	r1, [r2, #4]
 800670a:	6008      	str	r0, [r1, #0]
 800670c:	3010      	adds	r0, #16
 800670e:	6050      	str	r0, [r2, #4]
 8006710:	4618      	mov	r0, r3

    return OS_OK;
}
 8006712:	bd70      	pop	{r4, r5, r6, pc}
            block_addr += true_block_size;
 8006714:	18ae      	adds	r6, r5, r2
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
 8006716:	602e      	str	r6, [r5, #0]
        for (i = 1; i < blocks; i++) {
 8006718:	3401      	adds	r4, #1
            block_addr += true_block_size;
 800671a:	4635      	mov	r5, r6
 800671c:	e7eb      	b.n	80066f6 <os_mempool_init_internal+0x3a>
            return OS_MEM_NOT_ALIGNED;
 800671e:	2004      	movs	r0, #4
 8006720:	e7f7      	b.n	8006712 <os_mempool_init_internal+0x56>
 8006722:	bf00      	nop
 8006724:	20003500 	.word	0x20003500

08006728 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
 8006728:	b513      	push	{r0, r1, r4, lr}
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
 800672a:	2400      	movs	r4, #0
 800672c:	9401      	str	r4, [sp, #4]
 800672e:	9c04      	ldr	r4, [sp, #16]
 8006730:	9400      	str	r4, [sp, #0]
 8006732:	f7ff ffc3 	bl	80066bc <os_mempool_init_internal>
}
 8006736:	b002      	add	sp, #8
 8006738:	bd10      	pop	{r4, pc}

0800673a <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
 800673a:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
 800673c:	4604      	mov	r4, r0
 800673e:	b198      	cbz	r0, 8006768 <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
 8006740:	f7ff f9ac 	bl	8005a9c <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
 8006744:	88e3      	ldrh	r3, [r4, #6]
 8006746:	b16b      	cbz	r3, 8006764 <os_memblock_get+0x2a>
            /* Get a free block */
            block = SLIST_FIRST(mp);
 8006748:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);

            /* Decrement number free by 1 */
            mp->mp_num_free--;
 800674a:	3b01      	subs	r3, #1
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
 800674c:	682a      	ldr	r2, [r5, #0]
            mp->mp_num_free--;
 800674e:	b29b      	uxth	r3, r3
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
 8006750:	6162      	str	r2, [r4, #20]
            if (mp->mp_min_free > mp->mp_num_free) {
 8006752:	8922      	ldrh	r2, [r4, #8]
            mp->mp_num_free--;
 8006754:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
 8006756:	429a      	cmp	r2, r3
 8006758:	d900      	bls.n	800675c <os_memblock_get+0x22>
                mp->mp_min_free = mp->mp_num_free;
 800675a:	8123      	strh	r3, [r4, #8]
            }
        }
        OS_EXIT_CRITICAL(sr);
 800675c:	f7ff f9a4 	bl	8005aa8 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
 8006760:	4628      	mov	r0, r5
 8006762:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
 8006764:	461d      	mov	r5, r3
 8006766:	e7f9      	b.n	800675c <os_memblock_get+0x22>
 8006768:	4605      	mov	r5, r0
    return (void *)block;
 800676a:	e7f9      	b.n	8006760 <os_memblock_get+0x26>

0800676c <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
 800676c:	b538      	push	{r3, r4, r5, lr}
 800676e:	4604      	mov	r4, r0
 8006770:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
 8006772:	f7ff f993 	bl	8005a9c <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
 8006776:	6963      	ldr	r3, [r4, #20]
 8006778:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
 800677a:	88e3      	ldrh	r3, [r4, #6]
    SLIST_FIRST(mp) = block;
 800677c:	6165      	str	r5, [r4, #20]
    mp->mp_num_free++;
 800677e:	3301      	adds	r3, #1
 8006780:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
 8006782:	f7ff f991 	bl	8005aa8 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
 8006786:	2000      	movs	r0, #0
 8006788:	bd38      	pop	{r3, r4, r5, pc}

0800678a <os_memblock_put>:

os_error_t
os_memblock_put(struct os_mempool *mp, void *block_addr)
{
 800678a:	b410      	push	{r4}
 800678c:	460a      	mov	r2, r1

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
 800678e:	4603      	mov	r3, r0
 8006790:	b170      	cbz	r0, 80067b0 <os_memblock_put+0x26>
 8006792:	b169      	cbz	r1, 80067b0 <os_memblock_put+0x26>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
 8006794:	7a84      	ldrb	r4, [r0, #10]
 8006796:	07e4      	lsls	r4, r4, #31
 8006798:	d505      	bpl.n	80067a6 <os_memblock_put+0x1c>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
 800679a:	69c4      	ldr	r4, [r0, #28]
 800679c:	b11c      	cbz	r4, 80067a6 <os_memblock_put+0x1c>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
 800679e:	4623      	mov	r3, r4
 80067a0:	6a02      	ldr	r2, [r0, #32]
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
 80067a2:	bc10      	pop	{r4}
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
 80067a4:	4718      	bx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);
 80067a6:	4611      	mov	r1, r2
 80067a8:	4618      	mov	r0, r3
}
 80067aa:	bc10      	pop	{r4}
    ret = os_memblock_put_from_cb(mp, block_addr);
 80067ac:	f7ff bfde 	b.w	800676c <os_memblock_put_from_cb>
}
 80067b0:	2003      	movs	r0, #3
 80067b2:	bc10      	pop	{r4}
 80067b4:	4770      	bx	lr
	...

080067b8 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
 80067b8:	2200      	movs	r2, #0
 80067ba:	4b02      	ldr	r3, [pc, #8]	; (80067c4 <os_mempool_module_init+0xc>)
 80067bc:	e9c3 2300 	strd	r2, r3, [r3]
}
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	20003500 	.word	0x20003500

080067c8 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 80067c8:	4a07      	ldr	r2, [pc, #28]	; (80067e8 <os_msys_find_pool+0x20>)
{
 80067ca:	b510      	push	{r4, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 80067cc:	6811      	ldr	r1, [r2, #0]
 80067ce:	460b      	mov	r3, r1
 80067d0:	b923      	cbnz	r3, 80067dc <os_msys_find_pool+0x14>
            break;
        }
    }

    if (!pool) {
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
 80067d2:	b109      	cbz	r1, 80067d8 <os_msys_find_pool+0x10>
 80067d4:	6853      	ldr	r3, [r2, #4]
 80067d6:	3b08      	subs	r3, #8
    }

    return (pool);
}
 80067d8:	4618      	mov	r0, r3
 80067da:	bd10      	pop	{r4, pc}
        if (dsize <= pool->omp_databuf_len) {
 80067dc:	881c      	ldrh	r4, [r3, #0]
 80067de:	4284      	cmp	r4, r0
 80067e0:	d2fa      	bcs.n	80067d8 <os_msys_find_pool+0x10>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	e7f4      	b.n	80067d0 <os_msys_find_pool+0x8>
 80067e6:	bf00      	nop
 80067e8:	20000184 	.word	0x20000184

080067ec <os_msys_register>:
{
 80067ec:	b530      	push	{r4, r5, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 80067ee:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <os_msys_register+0x34>)
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	b92a      	cbnz	r2, 8006800 <os_msys_register+0x14>
        STAILQ_INSERT_TAIL(&g_msys_pool_list, new_pool, omp_next);
 80067f4:	6082      	str	r2, [r0, #8]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	6010      	str	r0, [r2, #0]
 80067fa:	3008      	adds	r0, #8
 80067fc:	6058      	str	r0, [r3, #4]
    return (0);
 80067fe:	e00c      	b.n	800681a <os_msys_register+0x2e>
        if (new_pool->omp_databuf_len > pool->omp_databuf_len) {
 8006800:	8805      	ldrh	r5, [r0, #0]
 8006802:	8814      	ldrh	r4, [r2, #0]
 8006804:	6891      	ldr	r1, [r2, #8]
 8006806:	42a5      	cmp	r5, r4
 8006808:	d801      	bhi.n	800680e <os_msys_register+0x22>
 800680a:	460a      	mov	r2, r1
 800680c:	e7f1      	b.n	80067f2 <os_msys_register+0x6>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, pool, new_pool, omp_next);
 800680e:	6081      	str	r1, [r0, #8]
 8006810:	b911      	cbnz	r1, 8006818 <os_msys_register+0x2c>
 8006812:	f100 0108 	add.w	r1, r0, #8
 8006816:	6059      	str	r1, [r3, #4]
 8006818:	6090      	str	r0, [r2, #8]
}
 800681a:	2000      	movs	r0, #0
 800681c:	bd30      	pop	{r4, r5, pc}
 800681e:	bf00      	nop
 8006820:	20000184 	.word	0x20000184

08006824 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
 8006824:	2200      	movs	r2, #0
 8006826:	4b02      	ldr	r3, [pc, #8]	; (8006830 <os_msys_reset+0xc>)
 8006828:	e9c3 2300 	strd	r2, r3, [r3]
}
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20000184 	.word	0x20000184

08006834 <os_msys_get_pkthdr>:
    uint16_t total_pkthdr_len;
    struct os_mbuf *m;
    struct os_mbuf_pool *pool;

    total_pkthdr_len =  user_hdr_len + sizeof(struct os_mbuf_pkthdr);
    pool = os_msys_find_pool(dsize + total_pkthdr_len);
 8006834:	3008      	adds	r0, #8
 8006836:	4408      	add	r0, r1
{
 8006838:	b510      	push	{r4, lr}
    pool = os_msys_find_pool(dsize + total_pkthdr_len);
 800683a:	b280      	uxth	r0, r0
{
 800683c:	460c      	mov	r4, r1
    pool = os_msys_find_pool(dsize + total_pkthdr_len);
 800683e:	f7ff ffc3 	bl	80067c8 <os_msys_find_pool>
    if (!pool) {
 8006842:	b120      	cbz	r0, 800684e <os_msys_get_pkthdr+0x1a>
        goto err;
    }

    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
 8006844:	b2e1      	uxtb	r1, r4
    return (m);
err:
    return (NULL);
}
 8006846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
 800684a:	f7ff bdd3 	b.w	80063f4 <os_mbuf_get_pkthdr>
}
 800684e:	bd10      	pop	{r4, pc}

08006850 <os_msys_num_free>:
os_msys_num_free(void)
{
    struct os_mbuf_pool *omp;
    int total;

    total = 0;
 8006850:	2000      	movs	r0, #0
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
 8006852:	4b04      	ldr	r3, [pc, #16]	; (8006864 <os_msys_num_free+0x14>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	b903      	cbnz	r3, 800685a <os_msys_num_free+0xa>
        total += omp->omp_pool->mp_num_free;
    }

    return total;
}
 8006858:	4770      	bx	lr
        total += omp->omp_pool->mp_num_free;
 800685a:	685a      	ldr	r2, [r3, #4]
    STAILQ_FOREACH(omp, &g_msys_pool_list, omp_next) {
 800685c:	689b      	ldr	r3, [r3, #8]
        total += omp->omp_pool->mp_num_free;
 800685e:	88d2      	ldrh	r2, [r2, #6]
 8006860:	4410      	add	r0, r2
 8006862:	e7f8      	b.n	8006856 <os_msys_num_free+0x6>
 8006864:	20000184 	.word	0x20000184

08006868 <os_msys_init>:
    SYSINIT_PANIC_ASSERT(rc == 0);
}

void
os_msys_init(void)
{
 8006868:	b513      	push	{r0, r1, r4, lr}
    int rc;

    os_msys_reset();
 800686a:	f7ff ffdb 	bl	8006824 <os_msys_reset>
    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
 800686e:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <os_msys_init+0x4c>)
 8006870:	4a11      	ldr	r2, [pc, #68]	; (80068b8 <os_msys_init+0x50>)
 8006872:	9301      	str	r3, [sp, #4]
 8006874:	f44f 7392 	mov.w	r3, #292	; 0x124
 8006878:	4910      	ldr	r1, [pc, #64]	; (80068bc <os_msys_init+0x54>)
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	4810      	ldr	r0, [pc, #64]	; (80068c0 <os_msys_init+0x58>)
 800687e:	230c      	movs	r3, #12
 8006880:	f001 fa7b 	bl	8007d7a <mem_init_mbuf_pool>
    SYSINIT_PANIC_ASSERT(rc == 0);
 8006884:	b138      	cbz	r0, 8006896 <os_msys_init+0x2e>
 8006886:	2300      	movs	r3, #0
 8006888:	4a0e      	ldr	r2, [pc, #56]	; (80068c4 <os_msys_init+0x5c>)
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	6814      	ldr	r4, [r2, #0]
 800688e:	4619      	mov	r1, r3
 8006890:	461a      	mov	r2, r3
 8006892:	4618      	mov	r0, r3
 8006894:	47a0      	blx	r4
    rc = os_msys_register(mbuf_pool);
 8006896:	4808      	ldr	r0, [pc, #32]	; (80068b8 <os_msys_init+0x50>)
 8006898:	f7ff ffa8 	bl	80067ec <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
 800689c:	b138      	cbz	r0, 80068ae <os_msys_init+0x46>
 800689e:	2300      	movs	r3, #0
 80068a0:	4a08      	ldr	r2, [pc, #32]	; (80068c4 <os_msys_init+0x5c>)
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	6814      	ldr	r4, [r2, #0]
 80068a6:	4619      	mov	r1, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	4618      	mov	r0, r3
 80068ac:	47a0      	blx	r4
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
 80068ae:	b002      	add	sp, #8
 80068b0:	bd10      	pop	{r4, pc}
 80068b2:	bf00      	nop
 80068b4:	0800e252 	.word	0x0800e252
 80068b8:	20002978 	.word	0x20002978
 80068bc:	20002984 	.word	0x20002984
 80068c0:	20001bc8 	.word	0x20001bc8
 80068c4:	20000180 	.word	0x20000180

080068c8 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
 80068c8:	b130      	cbz	r0, 80068d8 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	7143      	strb	r3, [r0, #5]
    mu->mu_level = 0;
 80068ce:	80c3      	strh	r3, [r0, #6]
    mu->mu_owner = NULL;
 80068d0:	6083      	str	r3, [r0, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
 80068d2:	6003      	str	r3, [r0, #0]

    ret = OS_OK;
 80068d4:	4618      	mov	r0, r3
 80068d6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 80068d8:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
 80068da:	4770      	bx	lr

080068dc <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
 80068de:	4b26      	ldr	r3, [pc, #152]	; (8006978 <os_mutex_release+0x9c>)
{
 80068e0:	4604      	mov	r4, r0
    if (!g_os_started) {
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d041      	beq.n	800696c <os_mutex_release+0x90>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d041      	beq.n	8006970 <os_mutex_release+0x94>
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
 80068ec:	f000 f952 	bl	8006b94 <os_sched_get_current_task>
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
 80068f0:	88e3      	ldrh	r3, [r4, #6]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d03e      	beq.n	8006974 <os_mutex_release+0x98>
 80068f6:	68a6      	ldr	r6, [r4, #8]
 80068f8:	4286      	cmp	r6, r0
 80068fa:	d13b      	bne.n	8006974 <os_mutex_release+0x98>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d003      	beq.n	8006908 <os_mutex_release+0x2c>
        --mu->mu_level;
 8006900:	3b01      	subs	r3, #1
 8006902:	80e3      	strh	r3, [r4, #6]
    /* Re-schedule if needed */
    if (resched) {
        os_sched(rdy);
    }

    ret = OS_OK;
 8006904:	2000      	movs	r0, #0
 8006906:	e032      	b.n	800696e <os_mutex_release+0x92>
    OS_ENTER_CRITICAL(sr);
 8006908:	f7ff f8c8 	bl	8005a9c <os_arch_save_sr>
    --mu->mu_level;
 800690c:	88e3      	ldrh	r3, [r4, #6]
    OS_ENTER_CRITICAL(sr);
 800690e:	4607      	mov	r7, r0
    --mu->mu_level;
 8006910:	3b01      	subs	r3, #1
 8006912:	80e3      	strh	r3, [r4, #6]
    if (current->t_prio != mu->mu_prio) {
 8006914:	7af2      	ldrb	r2, [r6, #11]
 8006916:	7963      	ldrb	r3, [r4, #5]
 8006918:	429a      	cmp	r2, r3
 800691a:	d003      	beq.n	8006924 <os_mutex_release+0x48>
        current->t_prio = mu->mu_prio;
 800691c:	72f3      	strb	r3, [r6, #11]
        os_sched_resort(current);
 800691e:	4630      	mov	r0, r6
 8006920:	f000 fa02 	bl	8006d28 <os_sched_resort>
    rdy = SLIST_FIRST(&mu->mu_head);
 8006924:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
 8006926:	b16d      	cbz	r5, 8006944 <os_mutex_release+0x68>
        assert(rdy->t_obj);
 8006928:	69eb      	ldr	r3, [r5, #28]
 800692a:	b923      	cbnz	r3, 8006936 <os_mutex_release+0x5a>
 800692c:	461a      	mov	r2, r3
 800692e:	4619      	mov	r1, r3
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff f975 	bl	8005c20 <__assert_func>
        os_sched_wakeup(rdy);
 8006936:	4628      	mov	r0, r5
 8006938:	f000 f984 	bl	8006c44 <os_sched_wakeup>
        mu->mu_level = 1;
 800693c:	2301      	movs	r3, #1
 800693e:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
 8006940:	7aeb      	ldrb	r3, [r5, #11]
 8006942:	7163      	strb	r3, [r4, #5]
    mu->mu_owner = rdy;
 8006944:	60a5      	str	r5, [r4, #8]
    if (rdy) {
 8006946:	b115      	cbz	r5, 800694e <os_mutex_release+0x72>
        rdy->t_lockcnt++;
 8006948:	7bab      	ldrb	r3, [r5, #14]
 800694a:	3301      	adds	r3, #1
 800694c:	73ab      	strb	r3, [r5, #14]
    --current->t_lockcnt;
 800694e:	7bb3      	ldrb	r3, [r6, #14]
 8006950:	3b01      	subs	r3, #1
 8006952:	73b3      	strb	r3, [r6, #14]
    rdy = os_sched_next_task();
 8006954:	f000 f9e2 	bl	8006d1c <os_sched_next_task>
 8006958:	4604      	mov	r4, r0
    OS_EXIT_CRITICAL(sr);
 800695a:	4638      	mov	r0, r7
 800695c:	f7ff f8a4 	bl	8005aa8 <os_arch_restore_sr>
    if (resched) {
 8006960:	42a6      	cmp	r6, r4
 8006962:	d0cf      	beq.n	8006904 <os_mutex_release+0x28>
        os_sched(rdy);
 8006964:	4620      	mov	r0, r4
 8006966:	f000 f921 	bl	8006bac <os_sched>
 800696a:	e7cb      	b.n	8006904 <os_mutex_release+0x28>
        ret = OS_NOT_STARTED;
 800696c:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
 800696e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
 8006970:	2003      	movs	r0, #3
 8006972:	e7fc      	b.n	800696e <os_mutex_release+0x92>
        ret = OS_BAD_MUTEX;
 8006974:	2005      	movs	r0, #5
 8006976:	e7fa      	b.n	800696e <os_mutex_release+0x92>
 8006978:	200034f4 	.word	0x200034f4

0800697c <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
 800697c:	4b35      	ldr	r3, [pc, #212]	; (8006a54 <os_mutex_pend+0xd8>)
{
 800697e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!g_os_started) {
 8006982:	681b      	ldr	r3, [r3, #0]
{
 8006984:	4606      	mov	r6, r0
 8006986:	4688      	mov	r8, r1
    if (!g_os_started) {
 8006988:	2b00      	cmp	r3, #0
 800698a:	d05e      	beq.n	8006a4a <os_mutex_pend+0xce>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 800698c:	2800      	cmp	r0, #0
 800698e:	d05e      	beq.n	8006a4e <os_mutex_pend+0xd2>
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
 8006990:	f7ff f884 	bl	8005a9c <os_arch_save_sr>
 8006994:	4607      	mov	r7, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
 8006996:	f000 f8fd 	bl	8006b94 <os_sched_get_current_task>
    if (mu->mu_level == 0) {
 800699a:	88f5      	ldrh	r5, [r6, #6]
    current = os_sched_get_current_task();
 800699c:	4604      	mov	r4, r0
    if (mu->mu_level == 0) {
 800699e:	b96d      	cbnz	r5, 80069bc <os_mutex_pend+0x40>
        mu->mu_owner = current;
 80069a0:	60b0      	str	r0, [r6, #8]
        mu->mu_prio  = current->t_prio;
 80069a2:	7ac3      	ldrb	r3, [r0, #11]
 80069a4:	7173      	strb	r3, [r6, #5]
        current->t_lockcnt++;
 80069a6:	7b83      	ldrb	r3, [r0, #14]
 80069a8:	3301      	adds	r3, #1
 80069aa:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
 80069ac:	2301      	movs	r3, #1
 80069ae:	80f3      	strh	r3, [r6, #6]
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
        ++mu->mu_level;
        OS_EXIT_CRITICAL(sr);
 80069b0:	4638      	mov	r0, r7
 80069b2:	f7ff f879 	bl	8005aa8 <os_arch_restore_sr>
        ret = OS_OK;
 80069b6:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
 80069b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (mu->mu_owner == current) {
 80069bc:	68b0      	ldr	r0, [r6, #8]
 80069be:	42a0      	cmp	r0, r4
 80069c0:	d102      	bne.n	80069c8 <os_mutex_pend+0x4c>
        ++mu->mu_level;
 80069c2:	1c68      	adds	r0, r5, #1
 80069c4:	80f0      	strh	r0, [r6, #6]
 80069c6:	e7f3      	b.n	80069b0 <os_mutex_pend+0x34>
    if (timeout == 0) {
 80069c8:	f1b8 0f00 	cmp.w	r8, #0
 80069cc:	d104      	bne.n	80069d8 <os_mutex_pend+0x5c>
        OS_EXIT_CRITICAL(sr);
 80069ce:	4638      	mov	r0, r7
 80069d0:	f7ff f86a 	bl	8005aa8 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
 80069d4:	2006      	movs	r0, #6
        goto done;
 80069d6:	e7ef      	b.n	80069b8 <os_mutex_pend+0x3c>
    if (mu->mu_owner->t_prio > current->t_prio) {
 80069d8:	7ae3      	ldrb	r3, [r4, #11]
 80069da:	7ac2      	ldrb	r2, [r0, #11]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d902      	bls.n	80069e6 <os_mutex_pend+0x6a>
        mu->mu_owner->t_prio = current->t_prio;
 80069e0:	72c3      	strb	r3, [r0, #11]
        os_sched_resort(mu->mu_owner);
 80069e2:	f000 f9a1 	bl	8006d28 <os_sched_resort>
    if (!SLIST_EMPTY(&mu->mu_head)) {
 80069e6:	6831      	ldr	r1, [r6, #0]
 80069e8:	b361      	cbz	r1, 8006a44 <os_mutex_pend+0xc8>
            if (current->t_prio < entry->t_prio) {
 80069ea:	460a      	mov	r2, r1
    last = NULL;
 80069ec:	2300      	movs	r3, #0
            if (current->t_prio < entry->t_prio) {
 80069ee:	7ae5      	ldrb	r5, [r4, #11]
 80069f0:	7ad0      	ldrb	r0, [r2, #11]
 80069f2:	42a8      	cmp	r0, r5
 80069f4:	d824      	bhi.n	8006a40 <os_mutex_pend+0xc4>
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 80069f6:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80069f8:	4613      	mov	r3, r2
 80069fa:	b9f8      	cbnz	r0, 8006a3c <os_mutex_pend+0xc0>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
 80069fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069fe:	64e2      	str	r2, [r4, #76]	; 0x4c
 8006a00:	64dc      	str	r4, [r3, #76]	; 0x4c
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
 8006a02:	7b63      	ldrb	r3, [r4, #13]
    os_sched_sleep(current, timeout);
 8006a04:	4641      	mov	r1, r8
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
 8006a06:	f043 0304 	orr.w	r3, r3, #4
 8006a0a:	7363      	strb	r3, [r4, #13]
    current->t_obj = mu;
 8006a0c:	61e6      	str	r6, [r4, #28]
    os_sched_sleep(current, timeout);
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f000 f8de 	bl	8006bd0 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
 8006a14:	4638      	mov	r0, r7
 8006a16:	f7ff f847 	bl	8005aa8 <os_arch_restore_sr>
    os_sched(NULL);
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	f000 f8c6 	bl	8006bac <os_sched>
    OS_ENTER_CRITICAL(sr);
 8006a20:	f7ff f83c 	bl	8005a9c <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
 8006a24:	7b63      	ldrb	r3, [r4, #13]
 8006a26:	f023 0304 	bic.w	r3, r3, #4
 8006a2a:	7363      	strb	r3, [r4, #13]
    OS_EXIT_CRITICAL(sr);
 8006a2c:	f7ff f83c 	bl	8005aa8 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
 8006a30:	68b0      	ldr	r0, [r6, #8]
        ret = OS_TIMEOUT;
 8006a32:	42a0      	cmp	r0, r4
 8006a34:	bf14      	ite	ne
 8006a36:	2006      	movne	r0, #6
 8006a38:	2000      	moveq	r0, #0
 8006a3a:	e7bd      	b.n	80069b8 <os_mutex_pend+0x3c>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	e7d7      	b.n	80069f0 <os_mutex_pend+0x74>
    if (last) {
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1db      	bne.n	80069fc <os_mutex_pend+0x80>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
 8006a44:	64e1      	str	r1, [r4, #76]	; 0x4c
 8006a46:	6034      	str	r4, [r6, #0]
 8006a48:	e7db      	b.n	8006a02 <os_mutex_pend+0x86>
        ret = OS_NOT_STARTED;
 8006a4a:	2009      	movs	r0, #9
 8006a4c:	e7b4      	b.n	80069b8 <os_mutex_pend+0x3c>
        ret = OS_INVALID_PARM;
 8006a4e:	2003      	movs	r0, #3
 8006a50:	e7b2      	b.n	80069b8 <os_mutex_pend+0x3c>
 8006a52:	bf00      	nop
 8006a54:	200034f4 	.word	0x200034f4

08006a58 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
 8006a58:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
 8006a5a:	4b04      	ldr	r3, [pc, #16]	; (8006a6c <os_sanity_check_list_lock+0x14>)
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	b120      	cbz	r0, 8006a6a <os_sanity_check_list_lock+0x12>
        return (0);
    }

    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
 8006a60:	f04f 31ff 	mov.w	r1, #4294967295
 8006a64:	4802      	ldr	r0, [pc, #8]	; (8006a70 <os_sanity_check_list_lock+0x18>)
 8006a66:	f7ff ff89 	bl	800697c <os_mutex_pend>
    }

    return (0);
err:
    return (rc);
}
 8006a6a:	bd08      	pop	{r3, pc}
 8006a6c:	200034f4 	.word	0x200034f4
 8006a70:	20003508 	.word	0x20003508

08006a74 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
 8006a74:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
 8006a76:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <os_sanity_check_list_unlock+0x10>)
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	b110      	cbz	r0, 8006a82 <os_sanity_check_list_unlock+0xe>
        return (0);
    }

    rc = os_mutex_release(&g_os_sanity_check_mu);
 8006a7c:	4802      	ldr	r0, [pc, #8]	; (8006a88 <os_sanity_check_list_unlock+0x14>)
 8006a7e:	f7ff ff2d 	bl	80068dc <os_mutex_release>
    }

    return (0);
err:
    return (rc);
}
 8006a82:	bd08      	pop	{r3, pc}
 8006a84:	200034f4 	.word	0x200034f4
 8006a88:	20003508 	.word	0x20003508

08006a8c <os_sanity_check_init>:
{
 8006a8c:	b508      	push	{r3, lr}
    memset(sc, 0, sizeof(*sc));
 8006a8e:	2214      	movs	r2, #20
 8006a90:	2100      	movs	r1, #0
 8006a92:	f000 fc56 	bl	8007342 <memset>
}
 8006a96:	2000      	movs	r0, #0
 8006a98:	bd08      	pop	{r3, pc}
	...

08006a9c <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
 8006a9c:	b510      	push	{r4, lr}
 8006a9e:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
 8006aa0:	f7ff ffda 	bl	8006a58 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
 8006aa4:	b938      	cbnz	r0, 8006ab6 <os_sanity_check_register+0x1a>
        goto err;
    }

    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
 8006aa6:	4b04      	ldr	r3, [pc, #16]	; (8006ab8 <os_sanity_check_register+0x1c>)
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	601c      	str	r4, [r3, #0]
 8006aac:	6122      	str	r2, [r4, #16]
    }

    return (0);
err:
    return (rc);
}
 8006aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = os_sanity_check_list_unlock();
 8006ab2:	f7ff bfdf 	b.w	8006a74 <os_sanity_check_list_unlock>
}
 8006ab6:	bd10      	pop	{r4, pc}
 8006ab8:	200029a0 	.word	0x200029a0

08006abc <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
 8006abc:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
 8006abe:	f7ff ffcb 	bl	8006a58 <os_sanity_check_list_lock>
    if (rc != 0) {
 8006ac2:	b128      	cbz	r0, 8006ad0 <os_sanity_run+0x14>
        assert(0);
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff f8a8 	bl	8005c20 <__assert_func>
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 8006ad0:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <os_sanity_run+0x4c>)
 8006ad2:	681c      	ldr	r4, [r3, #0]
 8006ad4:	b924      	cbnz	r4, 8006ae0 <os_sanity_run+0x24>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
        }
    }

    rc = os_sanity_check_list_unlock();
 8006ad6:	f7ff ffcd 	bl	8006a74 <os_sanity_check_list_unlock>
    if (rc != 0) {
 8006ada:	2800      	cmp	r0, #0
 8006adc:	d1f2      	bne.n	8006ac4 <os_sanity_run+0x8>
        assert(0);
    }
}
 8006ade:	bd10      	pop	{r4, pc}
        if (sc->sc_func) {
 8006ae0:	68a3      	ldr	r3, [r4, #8]
 8006ae2:	b143      	cbz	r3, 8006af6 <os_sanity_run+0x3a>
            rc = sc->sc_func(sc, sc->sc_arg);
 8006ae4:	68e1      	ldr	r1, [r4, #12]
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	4798      	blx	r3
            if (rc == OS_OK) {
 8006aea:	b920      	cbnz	r0, 8006af6 <os_sanity_run+0x3a>
                sc->sc_checkin_last = os_time_get();
 8006aec:	f000 fa56 	bl	8006f9c <os_time_get>
 8006af0:	6020      	str	r0, [r4, #0]
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 8006af2:	6924      	ldr	r4, [r4, #16]
 8006af4:	e7ee      	b.n	8006ad4 <os_sanity_run+0x18>
        if (OS_TIME_TICK_GT(os_time_get(),
 8006af6:	f000 fa51 	bl	8006f9c <os_time_get>
 8006afa:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006afe:	4413      	add	r3, r2
 8006b00:	1ac3      	subs	r3, r0, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	ddf5      	ble.n	8006af2 <os_sanity_run+0x36>
 8006b06:	e7dd      	b.n	8006ac4 <os_sanity_run+0x8>
 8006b08:	200029a0 	.word	0x200029a0

08006b0c <os_sanity_init>:

int
os_sanity_init(void)
{
 8006b0c:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
 8006b0e:	4802      	ldr	r0, [pc, #8]	; (8006b18 <os_sanity_init+0xc>)
 8006b10:	f7ff feda 	bl	80068c8 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
 8006b14:	bd08      	pop	{r3, pc}
 8006b16:	bf00      	nop
 8006b18:	20003508 	.word	0x20003508

08006b1c <os_sched_insert>:
 * @return int  OS_OK: task was inserted into run list
 *              OS_EINVAL: Task was not in ready state.
 */
os_error_t
os_sched_insert(struct os_task *t)
{
 8006b1c:	b538      	push	{r3, r4, r5, lr}
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
 8006b1e:	7b03      	ldrb	r3, [r0, #12]
{
 8006b20:	4604      	mov	r4, r0
    if (t->t_state != OS_TASK_READY) {
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d111      	bne.n	8006b4a <os_sched_insert+0x2e>
        rc = OS_EINVAL;
        goto err;
    }

    entry = NULL;
    OS_ENTER_CRITICAL(sr);
 8006b26:	f7fe ffb9 	bl	8005a9c <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 8006b2a:	4a0e      	ldr	r2, [pc, #56]	; (8006b64 <os_sched_insert+0x48>)
 8006b2c:	6813      	ldr	r3, [r2, #0]
 8006b2e:	b933      	cbnz	r3, 8006b3e <os_sched_insert+0x22>
        }
    }
    if (entry) {
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    } else {
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
 8006b30:	6463      	str	r3, [r4, #68]	; 0x44
 8006b32:	6853      	ldr	r3, [r2, #4]
 8006b34:	64a3      	str	r3, [r4, #72]	; 0x48
 8006b36:	601c      	str	r4, [r3, #0]
 8006b38:	3444      	adds	r4, #68	; 0x44
 8006b3a:	6054      	str	r4, [r2, #4]
 8006b3c:	e00e      	b.n	8006b5c <os_sched_insert+0x40>
        if (t->t_prio < entry->t_prio) {
 8006b3e:	7ae5      	ldrb	r5, [r4, #11]
 8006b40:	7ad9      	ldrb	r1, [r3, #11]
 8006b42:	428d      	cmp	r5, r1
 8006b44:	d303      	bcc.n	8006b4e <os_sched_insert+0x32>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 8006b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b48:	e7f1      	b.n	8006b2e <os_sched_insert+0x12>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
 8006b4a:	2002      	movs	r0, #2
 8006b4c:	e009      	b.n	8006b62 <os_sched_insert+0x46>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
 8006b4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b50:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
 8006b54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b56:	6014      	str	r4, [r2, #0]
 8006b58:	3444      	adds	r4, #68	; 0x44
 8006b5a:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
 8006b5c:	f7fe ffa4 	bl	8005aa8 <os_arch_restore_sr>
 8006b60:	2000      	movs	r0, #0
}
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	2000018c 	.word	0x2000018c

08006b68 <os_sched_ctx_sw_hook>:
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
 8006b68:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 8006b6a:	b510      	push	{r4, lr}
    next_t->t_ctx_sw_cnt++;
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <os_sched_ctx_sw_hook+0x20>)
 8006b72:	4a06      	ldr	r2, [pc, #24]	; (8006b8c <os_sched_ctx_sw_hook+0x24>)
 8006b74:	6818      	ldr	r0, [r3, #0]
 8006b76:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <os_sched_ctx_sw_hook+0x28>)
 8006b78:	6814      	ldr	r4, [r2, #0]
 8006b7a:	6819      	ldr	r1, [r3, #0]
 8006b7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
 8006b7e:	6011      	str	r1, [r2, #0]
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
 8006b80:	1b1b      	subs	r3, r3, r4
 8006b82:	440b      	add	r3, r1
 8006b84:	6383      	str	r3, [r0, #56]	; 0x38
}
 8006b86:	bd10      	pop	{r4, pc}
 8006b88:	20003514 	.word	0x20003514
 8006b8c:	20003518 	.word	0x20003518
 8006b90:	20003528 	.word	0x20003528

08006b94 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
 8006b94:	4b01      	ldr	r3, [pc, #4]	; (8006b9c <os_sched_get_current_task+0x8>)
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20003514 	.word	0x20003514

08006ba0 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
 8006ba0:	4b01      	ldr	r3, [pc, #4]	; (8006ba8 <os_sched_set_current_task+0x8>)
 8006ba2:	6018      	str	r0, [r3, #0]
}
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20003514 	.word	0x20003514

08006bac <os_sched>:

void
os_sched(struct os_task *next_t)
{
 8006bac:	b538      	push	{r3, r4, r5, lr}
 8006bae:	4604      	mov	r4, r0
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
 8006bb0:	f7fe ff74 	bl	8005a9c <os_arch_save_sr>
 8006bb4:	4605      	mov	r5, r0

    if (!next_t) {
 8006bb6:	b90c      	cbnz	r4, 8006bbc <os_sched+0x10>
 * @return struct os_task*
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
 8006bb8:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <os_sched+0x20>)
 8006bba:	681c      	ldr	r4, [r3, #0]
    os_arch_ctx_sw(next_t);
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f7fe ff63 	bl	8005a88 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
 8006bc2:	4628      	mov	r0, r5
}
 8006bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OS_EXIT_CRITICAL(sr);
 8006bc8:	f7fe bf6e 	b.w	8005aa8 <os_arch_restore_sr>
 8006bcc:	2000018c 	.word	0x2000018c

08006bd0 <os_sched_sleep>:
{
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	460e      	mov	r6, r1
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8006bda:	b1cb      	cbz	r3, 8006c10 <os_sched_sleep+0x40>
 8006bdc:	649a      	str	r2, [r3, #72]	; 0x48
 8006bde:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006be0:	f104 0544 	add.w	r5, r4, #68	; 0x44
 8006be4:	6013      	str	r3, [r2, #0]
    t->t_state = OS_TASK_SLEEP;
 8006be6:	2302      	movs	r3, #2
 8006be8:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
 8006bea:	f000 f9d7 	bl	8006f9c <os_time_get>
 8006bee:	4430      	add	r0, r6
    if (nticks == OS_TIMEOUT_NEVER) {
 8006bf0:	3601      	adds	r6, #1
    t->t_next_wakeup = os_time_get() + nticks;
 8006bf2:	6360      	str	r0, [r4, #52]	; 0x34
 8006bf4:	4a11      	ldr	r2, [pc, #68]	; (8006c3c <os_sched_sleep+0x6c>)
    if (nticks == OS_TIMEOUT_NEVER) {
 8006bf6:	d10e      	bne.n	8006c16 <os_sched_sleep+0x46>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
 8006bf8:	7b63      	ldrb	r3, [r4, #13]
 8006bfa:	f043 0301 	orr.w	r3, r3, #1
 8006bfe:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 8006c00:	2300      	movs	r3, #0
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 8006c02:	6463      	str	r3, [r4, #68]	; 0x44
 8006c04:	6853      	ldr	r3, [r2, #4]
 8006c06:	64a3      	str	r3, [r4, #72]	; 0x48
 8006c08:	601c      	str	r4, [r3, #0]
 8006c0a:	6055      	str	r5, [r2, #4]
}
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8006c10:	490b      	ldr	r1, [pc, #44]	; (8006c40 <os_sched_sleep+0x70>)
 8006c12:	604a      	str	r2, [r1, #4]
 8006c14:	e7e3      	b.n	8006bde <os_sched_sleep+0xe>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 8006c16:	6813      	ldr	r3, [r2, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0f2      	beq.n	8006c02 <os_sched_sleep+0x32>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 8006c1c:	7b59      	ldrb	r1, [r3, #13]
 8006c1e:	07c9      	lsls	r1, r1, #31
 8006c20:	d405      	bmi.n	8006c2e <os_sched_sleep+0x5e>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
 8006c22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c24:	1a09      	subs	r1, r1, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 8006c26:	2900      	cmp	r1, #0
 8006c28:	dc01      	bgt.n	8006c2e <os_sched_sleep+0x5e>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 8006c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2c:	e7f4      	b.n	8006c18 <os_sched_sleep+0x48>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
 8006c2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c30:	e9c4 3211 	strd	r3, r2, [r4, #68]	; 0x44
 8006c34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c36:	6014      	str	r4, [r2, #0]
 8006c38:	649d      	str	r5, [r3, #72]	; 0x48
    return (0);
 8006c3a:	e7e7      	b.n	8006c0c <os_sched_sleep+0x3c>
 8006c3c:	20000194 	.word	0x20000194
 8006c40:	2000018c 	.word	0x2000018c

08006c44 <os_sched_wakeup>:
{
 8006c44:	b508      	push	{r3, lr}
    assert(t->t_state == OS_TASK_SLEEP);
 8006c46:	7b03      	ldrb	r3, [r0, #12]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d005      	beq.n	8006c58 <os_sched_wakeup+0x14>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4619      	mov	r1, r3
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe ffe4 	bl	8005c20 <__assert_func>
    if (t->t_obj) {
 8006c58:	69c2      	ldr	r2, [r0, #28]
 8006c5a:	b14a      	cbz	r2, 8006c70 <os_sched_wakeup+0x2c>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
 8006c5c:	6813      	ldr	r3, [r2, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f4      	beq.n	8006c4c <os_sched_wakeup+0x8>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 8006c62:	4283      	cmp	r3, r0
 8006c64:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006c66:	d116      	bne.n	8006c96 <os_sched_wakeup+0x52>
 8006c68:	6011      	str	r1, [r2, #0]
        SLIST_NEXT(t, t_obj_list) = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
 8006c6e:	61c3      	str	r3, [r0, #28]
    t->t_state = OS_TASK_READY;
 8006c70:	2301      	movs	r3, #1
 8006c72:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
 8006c78:	7b43      	ldrb	r3, [r0, #13]
 8006c7a:	f023 0301 	bic.w	r3, r3, #1
 8006c7e:	7343      	strb	r3, [r0, #13]
 8006c80:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 8006c84:	b163      	cbz	r3, 8006ca0 <os_sched_wakeup+0x5c>
 8006c86:	649a      	str	r2, [r3, #72]	; 0x48
 8006c88:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006c8a:	6013      	str	r3, [r2, #0]
    os_sched_insert(t);
 8006c8c:	f7ff ff46 	bl	8006b1c <os_sched_insert>
}
 8006c90:	2000      	movs	r0, #0
 8006c92:	bd08      	pop	{r3, pc}
 8006c94:	4613      	mov	r3, r2
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 8006c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c98:	4282      	cmp	r2, r0
 8006c9a:	d1fb      	bne.n	8006c94 <os_sched_wakeup+0x50>
 8006c9c:	64d9      	str	r1, [r3, #76]	; 0x4c
 8006c9e:	e7e4      	b.n	8006c6a <os_sched_wakeup+0x26>
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 8006ca0:	4901      	ldr	r1, [pc, #4]	; (8006ca8 <os_sched_wakeup+0x64>)
 8006ca2:	604a      	str	r2, [r1, #4]
 8006ca4:	e7f0      	b.n	8006c88 <os_sched_wakeup+0x44>
 8006ca6:	bf00      	nop
 8006ca8:	20000194 	.word	0x20000194

08006cac <os_sched_os_timer_exp>:
{
 8006cac:	b570      	push	{r4, r5, r6, lr}
    now = os_time_get();
 8006cae:	f000 f975 	bl	8006f9c <os_time_get>
 8006cb2:	4605      	mov	r5, r0
    OS_ENTER_CRITICAL(sr);
 8006cb4:	f7fe fef2 	bl	8005a9c <os_arch_save_sr>
    t = TAILQ_FIRST(&g_os_sleep_list);
 8006cb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <os_sched_os_timer_exp+0x38>)
    OS_ENTER_CRITICAL(sr);
 8006cba:	4604      	mov	r4, r0
    t = TAILQ_FIRST(&g_os_sleep_list);
 8006cbc:	6818      	ldr	r0, [r3, #0]
    while (t) {
 8006cbe:	b920      	cbnz	r0, 8006cca <os_sched_os_timer_exp+0x1e>
    OS_EXIT_CRITICAL(sr);
 8006cc0:	4620      	mov	r0, r4
}
 8006cc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    OS_EXIT_CRITICAL(sr);
 8006cc6:	f7fe beef 	b.w	8005aa8 <os_arch_restore_sr>
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
 8006cca:	7b43      	ldrb	r3, [r0, #13]
 8006ccc:	07db      	lsls	r3, r3, #31
 8006cce:	d4f7      	bmi.n	8006cc0 <os_sched_os_timer_exp+0x14>
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
 8006cd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
        next = TAILQ_NEXT(t, t_os_list);
 8006cd2:	6c46      	ldr	r6, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
 8006cd4:	1aeb      	subs	r3, r5, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	dbf2      	blt.n	8006cc0 <os_sched_os_timer_exp+0x14>
            os_sched_wakeup(t);
 8006cda:	f7ff ffb3 	bl	8006c44 <os_sched_wakeup>
        t = next;
 8006cde:	4630      	mov	r0, r6
 8006ce0:	e7ed      	b.n	8006cbe <os_sched_os_timer_exp+0x12>
 8006ce2:	bf00      	nop
 8006ce4:	20000194 	.word	0x20000194

08006ce8 <os_sched_wakeup_ticks>:
{
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	4604      	mov	r4, r0
    OS_ASSERT_CRITICAL();
 8006cec:	f7fe fedf 	bl	8005aae <os_arch_in_critical>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	b918      	cbnz	r0, 8006cfc <os_sched_wakeup_ticks+0x14>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	4601      	mov	r1, r0
 8006cf8:	f7fe ff92 	bl	8005c20 <__assert_func>
    t = TAILQ_FIRST(&g_os_sleep_list);
 8006cfc:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <os_sched_wakeup_ticks+0x30>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
 8006d00:	b13b      	cbz	r3, 8006d12 <os_sched_wakeup_ticks+0x2a>
 8006d02:	7b5a      	ldrb	r2, [r3, #13]
 8006d04:	07d2      	lsls	r2, r2, #31
 8006d06:	d404      	bmi.n	8006d12 <os_sched_wakeup_ticks+0x2a>
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
 8006d08:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006d0a:	1b00      	subs	r0, r0, r4
        rt = 0;     /* wakeup time was in the past */
 8006d0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 8006d10:	bd10      	pop	{r4, pc}
        rt = OS_TIMEOUT_NEVER;
 8006d12:	f04f 30ff 	mov.w	r0, #4294967295
 8006d16:	e7fb      	b.n	8006d10 <os_sched_wakeup_ticks+0x28>
 8006d18:	20000194 	.word	0x20000194

08006d1c <os_sched_next_task>:
}
 8006d1c:	4b01      	ldr	r3, [pc, #4]	; (8006d24 <os_sched_next_task+0x8>)
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	2000018c 	.word	0x2000018c

08006d28 <os_sched_resort>:
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    if (t->t_state == OS_TASK_READY) {
 8006d28:	7b03      	ldrb	r3, [r0, #12]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d10a      	bne.n	8006d44 <os_sched_resort+0x1c>
 8006d2e:	e9d0 3211 	ldrd	r3, r2, [r0, #68]	; 0x44
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8006d32:	b123      	cbz	r3, 8006d3e <os_sched_resort+0x16>
 8006d34:	649a      	str	r2, [r3, #72]	; 0x48
 8006d36:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006d38:	6013      	str	r3, [r2, #0]
        os_sched_insert(t);
 8006d3a:	f7ff beef 	b.w	8006b1c <os_sched_insert>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8006d3e:	4902      	ldr	r1, [pc, #8]	; (8006d48 <os_sched_resort+0x20>)
 8006d40:	604a      	str	r2, [r1, #4]
 8006d42:	e7f8      	b.n	8006d36 <os_sched_resort+0xe>
    }
}
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	2000018c 	.word	0x2000018c

08006d4c <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
 8006d4c:	b120      	cbz	r0, 8006d58 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
    SLIST_FIRST(&sem->sem_head) = NULL;
 8006d4e:	2300      	movs	r3, #0
    sem->sem_tokens = tokens;
 8006d50:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
 8006d52:	6003      	str	r3, [r0, #0]

    ret = OS_OK;
 8006d54:	4618      	mov	r0, r3
 8006d56:	4770      	bx	lr
        ret = OS_INVALID_PARM;
 8006d58:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
 8006d5a:	4770      	bx	lr

08006d5c <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
 8006d5e:	4b17      	ldr	r3, [pc, #92]	; (8006dbc <os_sem_release+0x60>)
{
 8006d60:	4604      	mov	r4, r0
    if (!g_os_started) {
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	b31b      	cbz	r3, 8006dae <os_sem_release+0x52>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 8006d66:	b320      	cbz	r0, 8006db2 <os_sem_release+0x56>
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
 8006d68:	f7ff ff14 	bl	8006b94 <os_sched_get_current_task>
 8006d6c:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
 8006d6e:	f7fe fe95 	bl	8005a9c <os_arch_save_sr>

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
 8006d72:	6825      	ldr	r5, [r4, #0]
    OS_ENTER_CRITICAL(sr);
 8006d74:	4606      	mov	r6, r0
    if (rdy) {
 8006d76:	b1ad      	cbz	r5, 8006da4 <os_sem_release+0x48>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 8006d78:	7b6b      	ldrb	r3, [r5, #13]
        os_sched_wakeup(rdy);
 8006d7a:	4628      	mov	r0, r5
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 8006d7c:	f023 0302 	bic.w	r3, r3, #2
 8006d80:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
 8006d82:	f7ff ff5f 	bl	8006c44 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
 8006d86:	7aec      	ldrb	r4, [r5, #11]
 8006d88:	7af8      	ldrb	r0, [r7, #11]
 8006d8a:	42a0      	cmp	r0, r4
 8006d8c:	bf94      	ite	ls
 8006d8e:	2400      	movls	r4, #0
 8006d90:	2401      	movhi	r4, #1
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
    }

    OS_EXIT_CRITICAL(sr);
 8006d92:	4630      	mov	r0, r6
 8006d94:	f7fe fe88 	bl	8005aa8 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
 8006d98:	b16c      	cbz	r4, 8006db6 <os_sem_release+0x5a>
        os_sched(rdy);
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f7ff ff06 	bl	8006bac <os_sched>
    }

    ret = OS_OK;
 8006da0:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
 8006da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sem->sem_tokens++;
 8006da4:	88e3      	ldrh	r3, [r4, #6]
 8006da6:	3301      	adds	r3, #1
 8006da8:	80e3      	strh	r3, [r4, #6]
    resched = 0;
 8006daa:	462c      	mov	r4, r5
 8006dac:	e7f1      	b.n	8006d92 <os_sem_release+0x36>
        ret = OS_NOT_STARTED;
 8006dae:	2009      	movs	r0, #9
 8006db0:	e7f7      	b.n	8006da2 <os_sem_release+0x46>
        ret = OS_INVALID_PARM;
 8006db2:	2003      	movs	r0, #3
 8006db4:	e7f5      	b.n	8006da2 <os_sem_release+0x46>
    ret = OS_OK;
 8006db6:	4620      	mov	r0, r4
 8006db8:	e7f3      	b.n	8006da2 <os_sem_release+0x46>
 8006dba:	bf00      	nop
 8006dbc:	200034f4 	.word	0x200034f4

08006dc0 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
 8006dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
 8006dc2:	4b29      	ldr	r3, [pc, #164]	; (8006e68 <os_sem_pend+0xa8>)
{
 8006dc4:	4604      	mov	r4, r0
    if (!g_os_started) {
 8006dc6:	681b      	ldr	r3, [r3, #0]
{
 8006dc8:	460e      	mov	r6, r1
    if (!g_os_started) {
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d047      	beq.n	8006e5e <os_sem_pend+0x9e>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d047      	beq.n	8006e62 <os_sem_pend+0xa2>
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
 8006dd2:	f7ff fedf 	bl	8006b94 <os_sched_get_current_task>
 8006dd6:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
 8006dd8:	f7fe fe60 	bl	8005a9c <os_arch_save_sr>

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
 8006ddc:	88e3      	ldrh	r3, [r4, #6]
    OS_ENTER_CRITICAL(sr);
 8006dde:	4607      	mov	r7, r0
    if (sem->sem_tokens != 0) {
 8006de0:	b1cb      	cbz	r3, 8006e16 <os_sem_pend+0x56>
        sem->sem_tokens--;
 8006de2:	3b01      	subs	r3, #1
 8006de4:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
 8006de6:	2400      	movs	r4, #0
    sched = 0;
 8006de8:	4626      	mov	r6, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
 8006dea:	4638      	mov	r0, r7
 8006dec:	f7fe fe5c 	bl	8005aa8 <os_arch_restore_sr>

    if (sched) {
 8006df0:	b17e      	cbz	r6, 8006e12 <os_sem_pend+0x52>
        os_sched(NULL);
 8006df2:	2000      	movs	r0, #0
 8006df4:	f7ff feda 	bl	8006bac <os_sched>
        /* Check if we timed out or got the semaphore */
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
 8006df8:	7b6c      	ldrb	r4, [r5, #13]
 8006dfa:	f014 0402 	ands.w	r4, r4, #2
 8006dfe:	d008      	beq.n	8006e12 <os_sem_pend+0x52>
            OS_ENTER_CRITICAL(sr);
 8006e00:	f7fe fe4c 	bl	8005a9c <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 8006e04:	7b6b      	ldrb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
            ret = OS_TIMEOUT;
 8006e06:	2406      	movs	r4, #6
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 8006e08:	f023 0302 	bic.w	r3, r3, #2
 8006e0c:	736b      	strb	r3, [r5, #13]
            OS_EXIT_CRITICAL(sr);
 8006e0e:	f7fe fe4b 	bl	8005aa8 <os_arch_restore_sr>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
 8006e12:	4620      	mov	r0, r4
 8006e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
 8006e16:	b306      	cbz	r6, 8006e5a <os_sem_pend+0x9a>
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
 8006e18:	7b6a      	ldrb	r2, [r5, #13]
        current->t_obj = sem;
 8006e1a:	61ec      	str	r4, [r5, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
 8006e1c:	f042 0202 	orr.w	r2, r2, #2
 8006e20:	736a      	strb	r2, [r5, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
 8006e22:	6821      	ldr	r1, [r4, #0]
 8006e24:	b1b1      	cbz	r1, 8006e54 <os_sem_pend+0x94>
                if (current->t_prio < entry->t_prio) {
 8006e26:	460a      	mov	r2, r1
 8006e28:	f895 c00b 	ldrb.w	ip, [r5, #11]
 8006e2c:	7ad0      	ldrb	r0, [r2, #11]
 8006e2e:	4560      	cmp	r0, ip
 8006e30:	d80e      	bhi.n	8006e50 <os_sem_pend+0x90>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 8006e32:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8006e34:	4613      	mov	r3, r2
 8006e36:	b948      	cbnz	r0, 8006e4c <os_sem_pend+0x8c>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
 8006e38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e3a:	64ea      	str	r2, [r5, #76]	; 0x4c
 8006e3c:	64dd      	str	r5, [r3, #76]	; 0x4c
        os_sched_sleep(current, timeout);
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	f7ff fec5 	bl	8006bd0 <os_sched_sleep>
        ret = OS_OK;
 8006e46:	2400      	movs	r4, #0
        sched = 1;
 8006e48:	2601      	movs	r6, #1
 8006e4a:	e7ce      	b.n	8006dea <os_sem_pend+0x2a>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	e7ed      	b.n	8006e2c <os_sem_pend+0x6c>
        if (last) {
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1f1      	bne.n	8006e38 <os_sem_pend+0x78>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
 8006e54:	64e9      	str	r1, [r5, #76]	; 0x4c
 8006e56:	6025      	str	r5, [r4, #0]
 8006e58:	e7f1      	b.n	8006e3e <os_sem_pend+0x7e>
        ret = OS_TIMEOUT;
 8006e5a:	2406      	movs	r4, #6
 8006e5c:	e7c5      	b.n	8006dea <os_sem_pend+0x2a>
        ret = OS_NOT_STARTED;
 8006e5e:	2409      	movs	r4, #9
 8006e60:	e7d7      	b.n	8006e12 <os_sem_pend+0x52>
        ret = OS_INVALID_PARM;
 8006e62:	2403      	movs	r4, #3
 8006e64:	e7d5      	b.n	8006e12 <os_sem_pend+0x52>
 8006e66:	bf00      	nop
 8006e68:	200034f4 	.word	0x200034f4

08006e6c <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
 8006e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e70:	4604      	mov	r4, r0
 8006e72:	e9dd 9709 	ldrd	r9, r7, [sp, #36]	; 0x24
 8006e76:	461d      	mov	r5, r3
 8006e78:	4692      	mov	sl, r2
 8006e7a:	460e      	mov	r6, r1
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
 8006e7c:	2250      	movs	r2, #80	; 0x50
 8006e7e:	2100      	movs	r1, #0
{
 8006e80:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    memset(t, 0, sizeof(*t));
 8006e84:	f000 fa5d 	bl	8007342 <memset>

    t->t_func = func;
    t->t_arg = arg;
 8006e88:	e9c4 a505 	strd	sl, r5, [r4, #20]
    OS_ENTER_CRITICAL(sr);
 8006e8c:	f7fe fe06 	bl	8005a9c <os_arch_save_sr>
    rc = g_task_id;
 8006e90:	4b2c      	ldr	r3, [pc, #176]	; (8006f44 <os_task_init+0xd8>)
 8006e92:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
 8006e94:	1c6a      	adds	r2, r5, #1
 8006e96:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
 8006e98:	f7fe fe06 	bl	8005aa8 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
    t->t_prio = prio;
 8006e9c:	f89d 3020 	ldrb.w	r3, [sp, #32]

    t->t_state = OS_TASK_READY;
    t->t_name = name;
 8006ea0:	6126      	str	r6, [r4, #16]
    t->t_prio = prio;
 8006ea2:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = 0;
 8006ea8:	2300      	movs	r3, #0

    rc = os_sanity_check_init(&t->t_sanity_check);
 8006eaa:	f104 0620 	add.w	r6, r4, #32
    t->t_taskid = os_task_next_id();
 8006eae:	72a5      	strb	r5, [r4, #10]
    t->t_next_wakeup = 0;
 8006eb0:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7ff fdea 	bl	8006a8c <os_sanity_check_init>
    if (rc != OS_OK) {
 8006eb8:	4605      	mov	r5, r0
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d13f      	bne.n	8006f3e <os_task_init+0xd2>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
 8006ebe:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006ec2:	d121      	bne.n	8006f08 <os_task_init+0x9c>
        stack_bottom[i] = OS_STACK_PATTERN;
 8006ec4:	4b20      	ldr	r3, [pc, #128]	; (8006f48 <os_task_init+0xdc>)
    for (i = 0; i < size; i++) {
 8006ec6:	45a8      	cmp	r8, r5
 8006ec8:	dc29      	bgt.n	8006f1e <os_task_init+0xb2>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
    t->t_stacktop = &stack_bottom[stack_size];
 8006eca:	eb07 0188 	add.w	r1, r7, r8, lsl #2
 8006ece:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
 8006ed0:	f8a4 8008 	strh.w	r8, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
 8006ed4:	4642      	mov	r2, r8
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f7fe fdee 	bl	8005ab8 <os_arch_task_stack_init>
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 8006edc:	4b1b      	ldr	r3, [pc, #108]	; (8006f4c <os_task_init+0xe0>)
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
 8006ede:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 8006ee0:	681d      	ldr	r5, [r3, #0]
 8006ee2:	bb05      	cbnz	r5, 8006f26 <os_task_init+0xba>
        assert(t->t_prio != task->t_prio);
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	6425      	str	r5, [r4, #64]	; 0x40

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
 8006ee8:	4620      	mov	r0, r4
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
 8006eea:	6014      	str	r4, [r2, #0]
 8006eec:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8006ef0:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
 8006ef2:	f7ff fe13 	bl	8006b1c <os_sched_insert>
    if (rc != OS_OK) {
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	b970      	cbnz	r0, 8006f18 <os_task_init+0xac>
    os_trace_task_info(t);

    /* Allow a preemption in case the new task has a higher priority than the
     * current one.
     */
    if (os_started()) {
 8006efa:	f7fe ff51 	bl	8005da0 <os_started>
 8006efe:	b1f0      	cbz	r0, 8006f3e <os_task_init+0xd2>
        os_sched(NULL);
 8006f00:	4628      	mov	r0, r5
 8006f02:	f7ff fe53 	bl	8006bac <os_sched>
 8006f06:	e007      	b.n	8006f18 <os_task_init+0xac>
        rc = os_sanity_check_register(sc);
 8006f08:	4630      	mov	r0, r6
        sc->sc_checkin_itvl = sanity_itvl;
 8006f0a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
 8006f0e:	f7ff fdc5 	bl	8006a9c <os_sanity_check_register>
        if (rc != OS_OK) {
 8006f12:	4606      	mov	r6, r0
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d0d5      	beq.n	8006ec4 <os_task_init+0x58>
    }

    return (0);
err:
    return (rc);
}
 8006f18:	4630      	mov	r0, r6
 8006f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        stack_bottom[i] = OS_STACK_PATTERN;
 8006f1e:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
    for (i = 0; i < size; i++) {
 8006f22:	3501      	adds	r5, #1
 8006f24:	e7cf      	b.n	8006ec6 <os_task_init+0x5a>
        assert(t->t_prio != task->t_prio);
 8006f26:	7ae1      	ldrb	r1, [r4, #11]
 8006f28:	7aea      	ldrb	r2, [r5, #11]
 8006f2a:	4291      	cmp	r1, r2
 8006f2c:	d105      	bne.n	8006f3a <os_task_init+0xce>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	461a      	mov	r2, r3
 8006f32:	4619      	mov	r1, r3
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fe fe73 	bl	8005c20 <__assert_func>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 8006f3a:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 8006f3c:	e7d1      	b.n	8006ee2 <os_task_init+0x76>
    return (0);
 8006f3e:	462e      	mov	r6, r5
 8006f40:	e7ea      	b.n	8006f18 <os_task_init+0xac>
 8006f42:	bf00      	nop
 8006f44:	20003524 	.word	0x20003524
 8006f48:	deadbeef 	.word	0xdeadbeef
 8006f4c:	2000351c 	.word	0x2000351c

08006f50 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
 8006f50:	e92d 4870 	stmdb	sp!, {r4, r5, r6, fp, lr}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    os_timeradd(base, &tvdelta, result);
 8006f54:	e9d1 4500 	ldrd	r4, r5, [r1]
    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
 8006f58:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8006f5c:	fbb0 f3f6 	udiv	r3, r0, r6
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
 8006f60:	fb06 0013 	mls	r0, r6, r3, r0
    os_timeradd(base, &tvdelta, result);
 8006f64:	eb14 0b03 	adds.w	fp, r4, r3
 8006f68:	688b      	ldr	r3, [r1, #8]
 8006f6a:	f145 0c00 	adc.w	ip, r5, #0
 8006f6e:	fb06 3000 	mla	r0, r6, r0, r3
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <os_deltatime+0x48>)
 8006f74:	e9c2 bc00 	strd	fp, ip, [r2]
 8006f78:	4298      	cmp	r0, r3
 8006f7a:	6090      	str	r0, [r2, #8]
 8006f7c:	dd0a      	ble.n	8006f94 <os_deltatime+0x44>
 8006f7e:	f11b 0401 	adds.w	r4, fp, #1
 8006f82:	f14c 0500 	adc.w	r5, ip, #0
 8006f86:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
 8006f8a:	e9c2 4500 	strd	r4, r5, [r2]
 8006f8e:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
 8006f92:	6090      	str	r0, [r2, #8]
}
 8006f94:	e8bd 8870 	ldmia.w	sp!, {r4, r5, r6, fp, pc}
 8006f98:	000f423f 	.word	0x000f423f

08006f9c <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
 8006f9c:	4b01      	ldr	r3, [pc, #4]	; (8006fa4 <os_time_get+0x8>)
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20003528 	.word	0x20003528

08006fa8 <os_time_advance>:
    OS_EXIT_CRITICAL(sr);
}

void
os_time_advance(int ticks)
{
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(ticks >= 0);
 8006faa:	1e04      	subs	r4, r0, #0
 8006fac:	da05      	bge.n	8006fba <os_time_advance+0x12>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fe fe33 	bl	8005c20 <__assert_func>

    if (ticks > 0) {
 8006fba:	d006      	beq.n	8006fca <os_time_advance+0x22>
        if (!os_started()) {
 8006fbc:	f7fe fef0 	bl	8005da0 <os_started>
 8006fc0:	4d15      	ldr	r5, [pc, #84]	; (8007018 <os_time_advance+0x70>)
 8006fc2:	b918      	cbnz	r0, 8006fcc <os_time_advance+0x24>
            g_os_time += ticks;
 8006fc4:	6828      	ldr	r0, [r5, #0]
 8006fc6:	4420      	add	r0, r4
 8006fc8:	6028      	str	r0, [r5, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
 8006fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OS_ENTER_CRITICAL(sr);
 8006fcc:	f7fe fd66 	bl	8005a9c <os_arch_save_sr>
    prev_os_time = g_os_time;
 8006fd0:	682b      	ldr	r3, [r5, #0]
    OS_ENTER_CRITICAL(sr);
 8006fd2:	4607      	mov	r7, r0
    g_os_time += ticks;
 8006fd4:	18e0      	adds	r0, r4, r3
    if ((prev_os_time ^ g_os_time) >> 31) {
 8006fd6:	ea93 0f00 	teq	r3, r0
    g_os_time += ticks;
 8006fda:	6028      	str	r0, [r5, #0]
    if ((prev_os_time ^ g_os_time) >> 31) {
 8006fdc:	d510      	bpl.n	8007000 <os_time_advance+0x58>
        delta = g_os_time - basetod.ostime;
 8006fde:	4e0f      	ldr	r6, [pc, #60]	; (800701c <os_time_advance+0x74>)
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	f852 4b08 	ldr.w	r4, [r2], #8
 8006fe6:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
 8006fe8:	4611      	mov	r1, r2
 8006fea:	4620      	mov	r0, r4
 8006fec:	f7ff ffb0 	bl	8006f50 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
 8006ff0:	f106 0218 	add.w	r2, r6, #24
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f7ff ffaa 	bl	8006f50 <os_deltatime>
        basetod.ostime = g_os_time;
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	6033      	str	r3, [r6, #0]
    OS_EXIT_CRITICAL(sr);
 8007000:	4638      	mov	r0, r7
 8007002:	f7fe fd51 	bl	8005aa8 <os_arch_restore_sr>
            os_callout_tick();
 8007006:	f7fe ffd1 	bl	8005fac <os_callout_tick>
            os_sched_os_timer_exp();
 800700a:	f7ff fe4f 	bl	8006cac <os_sched_os_timer_exp>
}
 800700e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_sched(NULL);
 8007012:	2000      	movs	r0, #0
 8007014:	f7ff bdca 	b.w	8006bac <os_sched>
 8007018:	20003528 	.word	0x20003528
 800701c:	200029a8 	.word	0x200029a8

08007020 <os_time_delay>:

void
os_time_delay(os_time_t osticks)
{
 8007020:	b538      	push	{r3, r4, r5, lr}
    os_sr_t sr;

    if (osticks > 0) {
 8007022:	4604      	mov	r4, r0
 8007024:	b178      	cbz	r0, 8007046 <os_time_delay+0x26>
        OS_ENTER_CRITICAL(sr);
 8007026:	f7fe fd39 	bl	8005a9c <os_arch_save_sr>
 800702a:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
 800702c:	f7ff fdb2 	bl	8006b94 <os_sched_get_current_task>
 8007030:	4621      	mov	r1, r4
 8007032:	f7ff fdcd 	bl	8006bd0 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
 8007036:	4628      	mov	r0, r5
 8007038:	f7fe fd36 	bl	8005aa8 <os_arch_restore_sr>
        os_sched(NULL);
    }
}
 800703c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        os_sched(NULL);
 8007040:	2000      	movs	r0, #0
 8007042:	f7ff bdb3 	b.w	8006bac <os_sched>
}
 8007046:	bd38      	pop	{r3, r4, r5, pc}

08007048 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4605      	mov	r5, r0
 800704c:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
 800704e:	f7fe fd25 	bl	8005a9c <os_arch_save_sr>
 8007052:	4606      	mov	r6, r0
    if (tv != NULL) {
 8007054:	b145      	cbz	r5, 8007068 <os_gettimeofday+0x20>
    return (g_os_time);
 8007056:	4b09      	ldr	r3, [pc, #36]	; (800707c <os_gettimeofday+0x34>)
        delta = os_time_get() - basetod.ostime;
 8007058:	4909      	ldr	r1, [pc, #36]	; (8007080 <os_gettimeofday+0x38>)
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
 8007060:	462a      	mov	r2, r5
 8007062:	1ac0      	subs	r0, r0, r3
 8007064:	f7ff ff74 	bl	8006f50 <os_deltatime>
    }

    if (tz != NULL) {
 8007068:	b114      	cbz	r4, 8007070 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <os_gettimeofday+0x38>)
 800706c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800706e:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
 8007070:	4630      	mov	r0, r6
 8007072:	f7fe fd19 	bl	8005aa8 <os_arch_restore_sr>

    return (0);
}
 8007076:	2000      	movs	r0, #0
 8007078:	bd70      	pop	{r4, r5, r6, pc}
 800707a:	bf00      	nop
 800707c:	20003528 	.word	0x20003528
 8007080:	200029a8 	.word	0x200029a8

08007084 <os_time_ms_to_ticks>:
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    uint64_t ticks;

#if OS_TICKS_PER_SEC == 1000
    *out_ticks = ms;
 8007084:	6008      	str	r0, [r1, #0]
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    return 0;
}
 8007086:	2000      	movs	r0, #0
 8007088:	4770      	bx	lr
	...

0800708c <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
 800708c:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
 8007090:	482b      	ldr	r0, [pc, #172]	; (8007140 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
 8007092:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
 8007094:	3002      	adds	r0, #2
        MSR     CONTROL,R0
 8007096:	f380 8814 	msr	CONTROL, r0
        ISB
 800709a:	f3bf 8f6f 	isb	sy
        BX      LR
 800709e:	4770      	bx	lr

080070a0 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
 80070a0:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
 80070a4:	4770      	bx	lr

080070a6 <SVC_Handler>:
        .global SVC_Handler
SVC_Handler:
        .fnstart
        .cantunwind

        MRS     R0,PSP                  /* Read PSP */
 80070a6:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
 80070aa:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
 80070ac:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
 80070b0:	b951      	cbnz	r1, 80070c8 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 80070b2:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 80070b6:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
 80070b8:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 80070ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
 80070be:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
 80070c2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        BX      LR                      /* Return from interrupt */
 80070c6:	4770      	bx	lr

080070c8 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 80070c8:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
 80070ca:	4a1e      	ldr	r2, [pc, #120]	; (8007144 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
 80070cc:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
 80070ce:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
 80070d0:	d809      	bhi.n	80070e6 <SVC_Done>

        LDR     R4,=SVC_Table-4
 80070d2:	4c1d      	ldr	r4, [pc, #116]	; (8007148 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
 80070d4:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 80070d8:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
 80070dc:	47a0      	blx	r4

        MRS     R12,PSP
 80070de:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
 80070e2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

080070e6 <SVC_Done>:
SVC_Done:
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 80070e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
 80070ea:	4770      	bx	lr

080070ec <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 80070ec:	4b17      	ldr	r3, [pc, #92]	; (800714c <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
 80070ee:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
 80070f0:	4b17      	ldr	r3, [pc, #92]	; (8007150 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
 80070f2:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
 80070f4:	4291      	cmp	r1, r2
        IT      EQ
 80070f6:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
 80070f8:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
 80070fa:	f3ef 8c09 	mrs	ip, PSP
        STMDB   R12!,{R4-R11}           /* Save Old context */
 80070fe:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
 8007102:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
 8007106:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
 8007108:	f8d2 c000 	ldr.w	ip, [r2]
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
 800710c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
        MSR     PSP,R12                 /* Write PSP */
 8007110:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
 8007114:	4770      	bx	lr

08007116 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8007116:	b510      	push	{r4, lr}
        BL      timer_handler
 8007118:	f7fe fcb2 	bl	8005a80 <timer_handler>
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 800711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
 8007120:	4770      	bx	lr

08007122 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
 8007122:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
 8007126:	bf0c      	ite	eq
        MRSEQ   R3,MSP
 8007128:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
 800712c:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
 8007130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
 8007134:	4668      	mov	r0, sp
        BL      os_default_irq
 8007136:	f7fe fd99 	bl	8005c6c <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
 800713a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        BX      LR
 800713e:	4770      	bx	lr
        LDR     R0,=os_flags
 8007140:	20000a5c 	.word	0x20000a5c
        LDR     R2,=SVC_Count
 8007144:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
 8007148:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 800714c:	2000018c 	.word	0x2000018c
        LDR     R3,=g_current_task      /* Get current task */
 8007150:	20003514 	.word	0x20003514

08007154 <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
 8007154:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
 8007156:	4802      	ldr	r0, [pc, #8]	; (8007160 <lrand48+0xc>)
 8007158:	f000 fb88 	bl	800786c <jrand48>
}
 800715c:	0840      	lsrs	r0, r0, #1
 800715e:	bd08      	pop	{r3, pc}
 8007160:	2000352c 	.word	0x2000352c

08007164 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
 8007164:	2001      	movs	r0, #1
 8007166:	4770      	bx	lr

08007168 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
 8007168:	4770      	bx	lr
	...

0800716c <__free_block>:
static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
    nah = ah->a.next;
 800716c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
 8007170:	6819      	ldr	r1, [r3, #0]
{
 8007172:	b510      	push	{r4, lr}
    if (pah->a.type == ARENA_TYPE_FREE &&
 8007174:	2901      	cmp	r1, #1
 8007176:	d11c      	bne.n	80071b2 <__free_block+0x46>
        (char *)pah + pah->a.size == (char *)ah) {
 8007178:	685c      	ldr	r4, [r3, #4]
 800717a:	1919      	adds	r1, r3, r4
    if (pah->a.type == ARENA_TYPE_FREE &&
 800717c:	4288      	cmp	r0, r1
 800717e:	d118      	bne.n	80071b2 <__free_block+0x46>
        /* Coalesce into the previous block */
        pah->a.size += ah->a.size;
 8007180:	6841      	ldr	r1, [r0, #4]
 8007182:	4421      	add	r1, r4
        pah->a.next = nah;
 8007184:	e9c3 1201 	strd	r1, r2, [r3, #4]
        nah->a.prev = pah;
 8007188:	60d3      	str	r3, [r2, #12]
        ah->next_free->prev_free = ah;
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
 800718a:	6811      	ldr	r1, [r2, #0]
 800718c:	2901      	cmp	r1, #1
 800718e:	d10e      	bne.n	80071ae <__free_block+0x42>
        (char *)ah + ah->a.size == (char *)nah) {
 8007190:	6858      	ldr	r0, [r3, #4]
 8007192:	1819      	adds	r1, r3, r0
    if (nah->a.type == ARENA_TYPE_FREE &&
 8007194:	428a      	cmp	r2, r1
 8007196:	d10a      	bne.n	80071ae <__free_block+0x42>
        ah->a.size += nah->a.size;
 8007198:	6851      	ldr	r1, [r2, #4]
 800719a:	4401      	add	r1, r0
 800719c:	6059      	str	r1, [r3, #4]
    an = ah->next_free;
 800719e:	e9d2 1004 	ldrd	r1, r0, [r2, #16]
    ap->next_free = an;
 80071a2:	6101      	str	r1, [r0, #16]
    an->prev_free = ap;
 80071a4:	6148      	str	r0, [r1, #20]
    ap = ah->a.prev;
 80071a6:	68d1      	ldr	r1, [r2, #12]
    an = ah->a.next;
 80071a8:	6892      	ldr	r2, [r2, #8]
    ap->a.next = an;
 80071aa:	608a      	str	r2, [r1, #8]
    an->a.prev = ap;
 80071ac:	60d1      	str	r1, [r2, #12]
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	bd10      	pop	{r4, pc}
        ah->a.type = ARENA_TYPE_FREE;
 80071b2:	2301      	movs	r3, #1
 80071b4:	6003      	str	r3, [r0, #0]
        ah->next_free = __malloc_head.next_free;
 80071b6:	4b04      	ldr	r3, [pc, #16]	; (80071c8 <__free_block+0x5c>)
 80071b8:	6919      	ldr	r1, [r3, #16]
        ah->prev_free = &__malloc_head;
 80071ba:	e9c0 1304 	strd	r1, r3, [r0, #16]
        __malloc_head.next_free = ah;
 80071be:	6118      	str	r0, [r3, #16]
        ah->next_free->prev_free = ah;
 80071c0:	6903      	ldr	r3, [r0, #16]
 80071c2:	6158      	str	r0, [r3, #20]
 80071c4:	4603      	mov	r3, r0
 80071c6:	e7e0      	b.n	800718a <__free_block+0x1e>
 80071c8:	2000019c 	.word	0x2000019c

080071cc <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
 80071cc:	2917      	cmp	r1, #23
{
 80071ce:	b510      	push	{r4, lr}
 80071d0:	4604      	mov	r4, r0
    if (size < sizeof(struct free_arena_header))
 80071d2:	d91b      	bls.n	800720c <add_malloc_block+0x40>
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
 80071d4:	2301      	movs	r3, #1
    fp->a.size = size;
 80071d6:	e9c0 3100 	strd	r3, r1, [r0]

    if (!malloc_lock())
 80071da:	4b0d      	ldr	r3, [pc, #52]	; (8007210 <add_malloc_block+0x44>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4798      	blx	r3
 80071e0:	b1a0      	cbz	r0, 800720c <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
 80071e2:	4b0c      	ldr	r3, [pc, #48]	; (8007214 <add_malloc_block+0x48>)
         pah = pah->a.prev) {
 80071e4:	68db      	ldr	r3, [r3, #12]
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	2a02      	cmp	r2, #2
 80071ea:	d001      	beq.n	80071f0 <add_malloc_block+0x24>
        if (pah < fp)
 80071ec:	429c      	cmp	r4, r3
 80071ee:	d9f9      	bls.n	80071e4 <add_malloc_block+0x18>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
 80071f0:	689a      	ldr	r2, [r3, #8]
    fp->a.prev = pah;
    pah->a.next = fp;
    fp->a.next->a.prev = fp;

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
 80071f2:	4620      	mov	r0, r4
    fp->a.prev = pah;
 80071f4:	e9c4 2302 	strd	r2, r3, [r4, #8]
    pah->a.next = fp;
 80071f8:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
 80071fa:	68a3      	ldr	r3, [r4, #8]
 80071fc:	60dc      	str	r4, [r3, #12]
    fp = __free_block(fp);
 80071fe:	f7ff ffb5 	bl	800716c <__free_block>

    malloc_unlock();
}
 8007202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    malloc_unlock();
 8007206:	4b04      	ldr	r3, [pc, #16]	; (8007218 <add_malloc_block+0x4c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4718      	bx	r3
}
 800720c:	bd10      	pop	{r4, pc}
 800720e:	bf00      	nop
 8007210:	200001b4 	.word	0x200001b4
 8007214:	2000019c 	.word	0x2000019c
 8007218:	200001b8 	.word	0x200001b8

0800721c <malloc>:
{
 800721c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
 800721e:	1e43      	subs	r3, r0, #1
 8007220:	3312      	adds	r3, #18
 8007222:	d902      	bls.n	800722a <malloc+0xe>
        return NULL;
 8007224:	2400      	movs	r4, #0
}
 8007226:	4620      	mov	r0, r4
 8007228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!malloc_lock())
 800722a:	4b1f      	ldr	r3, [pc, #124]	; (80072a8 <malloc+0x8c>)
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
 800722c:	301f      	adds	r0, #31
    if (!malloc_lock())
 800722e:	681b      	ldr	r3, [r3, #0]
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
 8007230:	f020 040f 	bic.w	r4, r0, #15
    if (!malloc_lock())
 8007234:	4798      	blx	r3
 8007236:	2800      	cmp	r0, #0
 8007238:	d0f4      	beq.n	8007224 <malloc+0x8>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
 800723a:	4d1c      	ldr	r5, [pc, #112]	; (80072ac <malloc+0x90>)
 800723c:	6928      	ldr	r0, [r5, #16]
 800723e:	6803      	ldr	r3, [r0, #0]
 8007240:	2b02      	cmp	r3, #2
 8007242:	d106      	bne.n	8007252 <malloc+0x36>
        more_mem = _sbrk(size);
 8007244:	4620      	mov	r0, r4
 8007246:	f001 fe83 	bl	8008f50 <_sbrk>
        if (more_mem != (void *)-1) {
 800724a:	1c43      	adds	r3, r0, #1
 800724c:	d128      	bne.n	80072a0 <malloc+0x84>
 800724e:	2400      	movs	r4, #0
 8007250:	e01b      	b.n	800728a <malloc+0x6e>
        if (fp->a.size >= size) {
 8007252:	6841      	ldr	r1, [r0, #4]
 8007254:	6902      	ldr	r2, [r0, #16]
 8007256:	42a1      	cmp	r1, r4
 8007258:	d320      	bcc.n	800729c <malloc+0x80>
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
 800725a:	f104 0320 	add.w	r3, r4, #32
 800725e:	4299      	cmp	r1, r3
 8007260:	6945      	ldr	r5, [r0, #20]
 8007262:	d316      	bcc.n	8007292 <malloc+0x76>
        nfp->a.type = ARENA_TYPE_FREE;
 8007264:	2701      	movs	r7, #1
        nfp = (struct free_arena_header *)((char *)fp + size);
 8007266:	1903      	adds	r3, r0, r4
        nfp->a.size = fsize - size;
 8007268:	1b09      	subs	r1, r1, r4
        na = fp->a.next;
 800726a:	6886      	ldr	r6, [r0, #8]
        nfp->a.type = ARENA_TYPE_FREE;
 800726c:	5107      	str	r7, [r0, r4]
        nfp->a.size = fsize - size;
 800726e:	6059      	str	r1, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
 8007270:	2100      	movs	r1, #0
        fp->a.size = size;
 8007272:	e9c0 1400 	strd	r1, r4, [r0]
        nfp->a.next = na;
 8007276:	e9c3 6002 	strd	r6, r0, [r3, #8]
        na->a.prev = nfp;
 800727a:	60f3      	str	r3, [r6, #12]
        fp->a.next = nfp;
 800727c:	6083      	str	r3, [r0, #8]
        nfp->prev_free = fpp = fp->prev_free;
 800727e:	e9c3 2504 	strd	r2, r5, [r3, #16]
        fpn->prev_free = nfp;
 8007282:	6153      	str	r3, [r2, #20]
        fpp->next_free = nfp;
 8007284:	612b      	str	r3, [r5, #16]
    return (void *)(&fp->a + 1);
 8007286:	f100 0410 	add.w	r4, r0, #16
    malloc_unlock();
 800728a:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <malloc+0x94>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4798      	blx	r3
    return result;
 8007290:	e7c9      	b.n	8007226 <malloc+0xa>
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
 8007292:	2300      	movs	r3, #0
 8007294:	6003      	str	r3, [r0, #0]
    ap->next_free = an;
 8007296:	612a      	str	r2, [r5, #16]
    an->prev_free = ap;
 8007298:	6155      	str	r5, [r2, #20]
 800729a:	e7f4      	b.n	8007286 <malloc+0x6a>
 800729c:	4610      	mov	r0, r2
 800729e:	e7ce      	b.n	800723e <malloc+0x22>
            add_malloc_block(more_mem, size);
 80072a0:	4621      	mov	r1, r4
 80072a2:	f7ff ff93 	bl	80071cc <add_malloc_block>
            goto retry_alloc;
 80072a6:	e7c9      	b.n	800723c <malloc+0x20>
 80072a8:	200001b4 	.word	0x200001b4
 80072ac:	2000019c 	.word	0x2000019c
 80072b0:	200001b8 	.word	0x200001b8

080072b4 <free>:

void free(void *ptr)
{
 80072b4:	b510      	push	{r4, lr}
    struct free_arena_header *ah;

    if (!ptr)
 80072b6:	4604      	mov	r4, r0
 80072b8:	b160      	cbz	r0, 80072d4 <free+0x20>

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
 80072ba:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <free+0x24>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4798      	blx	r3
 80072c0:	b140      	cbz	r0, 80072d4 <free+0x20>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
 80072c2:	f1a4 0010 	sub.w	r0, r4, #16
 80072c6:	f7ff ff51 	bl	800716c <__free_block>
    malloc_unlock();
}
 80072ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    malloc_unlock();
 80072ce:	4b03      	ldr	r3, [pc, #12]	; (80072dc <free+0x28>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4718      	bx	r3
}
 80072d4:	bd10      	pop	{r4, pc}
 80072d6:	bf00      	nop
 80072d8:	200001b4 	.word	0x200001b4
 80072dc:	200001b8 	.word	0x200001b8

080072e0 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
 80072e0:	b470      	push	{r4, r5, r6}
 80072e2:	f04f 0500 	mov.w	r5, #0
 80072e6:	f022 0603 	bic.w	r6, r2, #3
 80072ea:	e005      	b.n	80072f8 <test1>

080072ec <loop1>:
 80072ec:	5943      	ldr	r3, [r0, r5]
 80072ee:	594c      	ldr	r4, [r1, r5]
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	d104      	bne.n	80072fe <res1>
 80072f4:	f105 0504 	add.w	r5, r5, #4

080072f8 <test1>:
 80072f8:	42b5      	cmp	r5, r6
 80072fa:	d1f7      	bne.n	80072ec <loop1>
 80072fc:	e00d      	b.n	800731a <test2>

080072fe <res1>:
 80072fe:	ba1b      	rev	r3, r3
 8007300:	ba24      	rev	r4, r4
 8007302:	1b1b      	subs	r3, r3, r4
 8007304:	bf8c      	ite	hi
 8007306:	2301      	movhi	r3, #1
 8007308:	f04f 33ff 	movls.w	r3, #4294967295
 800730c:	e009      	b.n	8007322 <done>

0800730e <loop2>:
 800730e:	5d43      	ldrb	r3, [r0, r5]
 8007310:	5d4c      	ldrb	r4, [r1, r5]
 8007312:	1b1b      	subs	r3, r3, r4
 8007314:	d105      	bne.n	8007322 <done>
 8007316:	f105 0501 	add.w	r5, r5, #1

0800731a <test2>:
 800731a:	4295      	cmp	r5, r2
 800731c:	d1f7      	bne.n	800730e <loop2>
 800731e:	f04f 0300 	mov.w	r3, #0

08007322 <done>:
 8007322:	4618      	mov	r0, r3
 8007324:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
 8007326:	4770      	bx	lr

08007328 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
 8007328:	e001      	b.n	800732e <test1>

0800732a <loop1>:
 800732a:	588b      	ldr	r3, [r1, r2]
 800732c:	5083      	str	r3, [r0, r2]

0800732e <test1>:
 800732e:	3a04      	subs	r2, #4
 8007330:	d5fb      	bpl.n	800732a <loop1>
 8007332:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
 8007336:	e001      	b.n	800733c <test2>

08007338 <loop2>:
 8007338:	5c8b      	ldrb	r3, [r1, r2]
 800733a:	5483      	strb	r3, [r0, r2]

0800733c <test2>:
 800733c:	3a01      	subs	r2, #1
 800733e:	d5fb      	bpl.n	8007338 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
 8007340:	4770      	bx	lr

08007342 <memset>:
#include <string.h>
#include <stdint.h>

void *memset(void *dst, int c, size_t n)
{
	char *q = dst;
 8007342:	4603      	mov	r3, r0
 8007344:	4402      	add	r2, r0
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#else
	while (n--) {
 8007346:	4293      	cmp	r3, r2
 8007348:	d100      	bne.n	800734c <memset+0xa>
		*q++ = c;
	}
#endif

	return dst;
}
 800734a:	4770      	bx	lr
		*q++ = c;
 800734c:	f803 1b01 	strb.w	r1, [r3], #1
 8007350:	e7f9      	b.n	8007346 <memset+0x4>

08007352 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
 8007352:	b40e      	push	{r1, r2, r3}
 8007354:	b503      	push	{r0, r1, lr}
 8007356:	ab03      	add	r3, sp, #12
 8007358:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
 800735c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
	va_start(ap, format);
 8007360:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
 8007362:	f000 fa5d 	bl	8007820 <vsnprintf>
	va_end(ap);

	return rv;
}
 8007366:	b002      	add	sp, #8
 8007368:	f85d eb04 	ldr.w	lr, [sp], #4
 800736c:	b003      	add	sp, #12
 800736e:	4770      	bx	lr

08007370 <strcmp>:
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
 8007370:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007374:	f811 3b01 	ldrb.w	r3, [r1], #1
		if (d || !ch)
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	d101      	bne.n	8007380 <strcmp+0x10>
 800737c:	2a00      	cmp	r2, #0
 800737e:	d1f7      	bne.n	8007370 <strcmp>
			break;
	}

	return d;
}
 8007380:	4618      	mov	r0, r3
 8007382:	4770      	bx	lr

08007384 <strcpy>:

#include <string.h>

char *strcpy(char *dst, const char *src)
{
	char *q = dst;
 8007384:	4602      	mov	r2, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
 8007386:	f811 3b01 	ldrb.w	r3, [r1], #1
 800738a:	f802 3b01 	strb.w	r3, [r2], #1
	} while (ch);
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1f9      	bne.n	8007386 <strcpy+0x2>

	return dst;
}
 8007392:	4770      	bx	lr

08007394 <strlen>:
 */

#include <string.h>

size_t strlen(const char *s)
{
 8007394:	4603      	mov	r3, r0
	const char *ss = s;
	while (*ss)
 8007396:	781a      	ldrb	r2, [r3, #0]
 8007398:	1c59      	adds	r1, r3, #1
 800739a:	b90a      	cbnz	r2, 80073a0 <strlen+0xc>
		ss++;
	return ss - s;
}
 800739c:	1a18      	subs	r0, r3, r0
 800739e:	4770      	bx	lr
 80073a0:	460b      	mov	r3, r1
 80073a2:	e7f8      	b.n	8007396 <strlen+0x2>

080073a4 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
 80073a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a8:	4680      	mov	r8, r0
 80073aa:	4689      	mov	r9, r1
 80073ac:	4693      	mov	fp, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    while (num / d >= p->base)
 80073ae:	2700      	movs	r7, #0
    unsigned long long int d = 1;
 80073b0:	2401      	movs	r4, #1
 80073b2:	2500      	movs	r5, #0
    char *bf = p->bf;
 80073b4:	f8d2 a004 	ldr.w	sl, [r2, #4]
    while (num / d >= p->base)
 80073b8:	78d6      	ldrb	r6, [r2, #3]
 80073ba:	4622      	mov	r2, r4
 80073bc:	462b      	mov	r3, r5
 80073be:	4640      	mov	r0, r8
 80073c0:	4649      	mov	r1, r9
 80073c2:	f004 fd8b 	bl	800bedc <__aeabi_uldivmod>
 80073c6:	42b9      	cmp	r1, r7
 80073c8:	bf08      	it	eq
 80073ca:	42b0      	cmpeq	r0, r6
 80073cc:	d20a      	bcs.n	80073e4 <ui2a+0x40>
    int n = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	9301      	str	r3, [sp, #4]
        d *= p->base;
    while (d != 0) {
 80073d2:	ea54 0305 	orrs.w	r3, r4, r5
 80073d6:	d10d      	bne.n	80073f4 <ui2a+0x50>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	f88a 3000 	strb.w	r3, [sl]
}
 80073de:	b003      	add	sp, #12
 80073e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        d *= p->base;
 80073e4:	fb04 f307 	mul.w	r3, r4, r7
 80073e8:	fb06 3305 	mla	r3, r6, r5, r3
 80073ec:	fba4 4506 	umull	r4, r5, r4, r6
 80073f0:	441d      	add	r5, r3
 80073f2:	e7e2      	b.n	80073ba <ui2a+0x16>
 80073f4:	4622      	mov	r2, r4
 80073f6:	462b      	mov	r3, r5
 80073f8:	4640      	mov	r0, r8
 80073fa:	4649      	mov	r1, r9
 80073fc:	f004 fd6e 	bl	800bedc <__aeabi_uldivmod>
 8007400:	4606      	mov	r6, r0
 8007402:	460f      	mov	r7, r1
        d /= p->base;
 8007404:	4620      	mov	r0, r4
 8007406:	4629      	mov	r1, r5
 8007408:	4690      	mov	r8, r2
 800740a:	4699      	mov	r9, r3
 800740c:	f89b 2003 	ldrb.w	r2, [fp, #3]
 8007410:	2300      	movs	r3, #0
 8007412:	f004 fd63 	bl	800bedc <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
 8007416:	9b01      	ldr	r3, [sp, #4]
        d /= p->base;
 8007418:	4604      	mov	r4, r0
 800741a:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
 800741c:	b93b      	cbnz	r3, 800742e <ui2a+0x8a>
 800741e:	ea56 0307 	orrs.w	r3, r6, r7
 8007422:	d104      	bne.n	800742e <ui2a+0x8a>
 8007424:	ea54 0305 	orrs.w	r3, r4, r5
 8007428:	d1d3      	bne.n	80073d2 <ui2a+0x2e>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 800742a:	2330      	movs	r3, #48	; 0x30
 800742c:	e00a      	b.n	8007444 <ui2a+0xa0>
 800742e:	2f00      	cmp	r7, #0
 8007430:	bf08      	it	eq
 8007432:	2e0a      	cmpeq	r6, #10
 8007434:	d3f9      	bcc.n	800742a <ui2a+0x86>
 8007436:	f89b 3002 	ldrb.w	r3, [fp, #2]
 800743a:	f013 0f04 	tst.w	r3, #4
 800743e:	bf14      	ite	ne
 8007440:	2337      	movne	r3, #55	; 0x37
 8007442:	2357      	moveq	r3, #87	; 0x57
 8007444:	441e      	add	r6, r3
            ++n;
 8007446:	9b01      	ldr	r3, [sp, #4]
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 8007448:	f88a 6000 	strb.w	r6, [sl]
            ++n;
 800744c:	3301      	adds	r3, #1
 800744e:	9301      	str	r3, [sp, #4]
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 8007450:	f10a 0a01 	add.w	sl, sl, #1
 8007454:	e7bd      	b.n	80073d2 <ui2a+0x2e>

08007456 <putf>:
    *nump = num;
    return ch;
}

static int putf(FILE *putp, char c)
{
 8007456:	b507      	push	{r0, r1, r2, lr}
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    if (stream->vmt->write == NULL) return 0;
 8007458:	6803      	ldr	r3, [r0, #0]
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
 800745a:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	b91b      	cbnz	r3, 800746a <putf+0x14>
    if (fputc(c, putp) == EOF)
        return 0;
 8007462:	2000      	movs	r0, #0
    else
        return 1;
}
 8007464:	b003      	add	sp, #12
 8007466:	f85d fb04 	ldr.w	pc, [sp], #4
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
 800746a:	2201      	movs	r2, #1
 800746c:	f10d 0107 	add.w	r1, sp, #7
 8007470:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
 8007472:	2801      	cmp	r0, #1
 8007474:	d1f5      	bne.n	8007462 <putf+0xc>
 8007476:	e7f5      	b.n	8007464 <putf+0xe>

08007478 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
 8007478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800747c:	4607      	mov	r7, r0
 800747e:	460e      	mov	r6, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
 8007480:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
 8007482:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
 8007484:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007488:	b10a      	cbz	r2, 800748e <putchw+0x16>
 800748a:	2c00      	cmp	r4, #0
 800748c:	d152      	bne.n	8007534 <putchw+0xbc>
        n--;
    if (p->sign)
        n--;
    if (p->alt && p->base == 16)
 800748e:	f241 0202 	movw	r2, #4098	; 0x1002
    if (p->sign)
 8007492:	78b3      	ldrb	r3, [r6, #2]
 8007494:	07d9      	lsls	r1, r3, #31
    if (p->alt && p->base == 16)
 8007496:	8873      	ldrh	r3, [r6, #2]
        n--;
 8007498:	bf48      	it	mi
 800749a:	f104 34ff 	addmi.w	r4, r4, #4294967295
    if (p->alt && p->base == 16)
 800749e:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d147      	bne.n	8007538 <putchw+0xc0>
        n -= 2;
 80074a8:	3c02      	subs	r4, #2
    else if (p->alt && p->base == 8)
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
 80074aa:	6833      	ldr	r3, [r6, #0]
 80074ac:	4d38      	ldr	r5, [pc, #224]	; (8007590 <putchw+0x118>)
 80074ae:	401d      	ands	r5, r3
 80074b0:	2d00      	cmp	r5, #0
 80074b2:	d150      	bne.n	8007556 <putchw+0xde>
 80074b4:	46a0      	mov	r8, r4
        while (n-- > 0)
 80074b6:	f1b8 0f00 	cmp.w	r8, #0
 80074ba:	dc44      	bgt.n	8007546 <putchw+0xce>
 80074bc:	1e63      	subs	r3, r4, #1
 80074be:	2c00      	cmp	r4, #0
 80074c0:	bfb4      	ite	lt
 80074c2:	461c      	movlt	r4, r3
 80074c4:	1b1c      	subge	r4, r3, r4
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
 80074c6:	78b3      	ldrb	r3, [r6, #2]
 80074c8:	07da      	lsls	r2, r3, #31
 80074ca:	d504      	bpl.n	80074d6 <putchw+0x5e>
        written += putf(putp, '-');
 80074cc:	212d      	movs	r1, #45	; 0x2d
 80074ce:	4638      	mov	r0, r7
 80074d0:	f7ff ffc1 	bl	8007456 <putf>
 80074d4:	4405      	add	r5, r0

    /* Alternate */
    if (p->alt && p->base == 16) {
 80074d6:	f241 0202 	movw	r2, #4098	; 0x1002
 80074da:	8873      	ldrh	r3, [r6, #2]
 80074dc:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d139      	bne.n	800755a <putchw+0xe2>
        written += putf(putp, '0');
 80074e6:	2130      	movs	r1, #48	; 0x30
 80074e8:	4638      	mov	r0, r7
 80074ea:	f7ff ffb4 	bl	8007456 <putf>
        written += putf(putp, (p->uc ? 'X' : 'x'));
 80074ee:	78b3      	ldrb	r3, [r6, #2]
        written += putf(putp, '0');
 80074f0:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
 80074f2:	f013 0f04 	tst.w	r3, #4
 80074f6:	bf14      	ite	ne
 80074f8:	2158      	movne	r1, #88	; 0x58
 80074fa:	2178      	moveq	r1, #120	; 0x78
    } else if (p->alt && p->base == 8) {
        written += putf(putp, '0');
 80074fc:	4638      	mov	r0, r7
 80074fe:	f7ff ffaa 	bl	8007456 <putf>
 8007502:	4405      	add	r5, r0
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
 8007504:	7873      	ldrb	r3, [r6, #1]
 8007506:	b143      	cbz	r3, 800751a <putchw+0xa2>
 8007508:	46a0      	mov	r8, r4
        while (n-- > 0)
 800750a:	f1b8 0f00 	cmp.w	r8, #0
 800750e:	dc2a      	bgt.n	8007566 <putchw+0xee>
 8007510:	1e63      	subs	r3, r4, #1
 8007512:	2c00      	cmp	r4, #0
 8007514:	bfb4      	ite	lt
 8007516:	461c      	movlt	r4, r3
 8007518:	1b1c      	subge	r4, r3, r4
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
 800751a:	f8d6 8004 	ldr.w	r8, [r6, #4]
    while ((ch = *bf++))
 800751e:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007522:	bb41      	cbnz	r1, 8007576 <putchw+0xfe>
        written += putf(putp, ch);

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
 8007524:	78b3      	ldrb	r3, [r6, #2]
 8007526:	071b      	lsls	r3, r3, #28
 8007528:	d501      	bpl.n	800752e <putchw+0xb6>
        while (n-- > 0)
 800752a:	2c00      	cmp	r4, #0
 800752c:	dc28      	bgt.n	8007580 <putchw+0x108>
            written += putf(putp, ' ');
    }
    
    return written;
}
 800752e:	4628      	mov	r0, r5
 8007530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n--;
 8007534:	3c01      	subs	r4, #1
 8007536:	e7a5      	b.n	8007484 <putchw+0xc>
    else if (p->alt && p->base == 8)
 8007538:	f640 0202 	movw	r2, #2050	; 0x802
 800753c:	4293      	cmp	r3, r2
        n--;
 800753e:	bf08      	it	eq
 8007540:	f104 34ff 	addeq.w	r4, r4, #4294967295
 8007544:	e7b1      	b.n	80074aa <putchw+0x32>
            written += putf(putp, ' ');
 8007546:	2120      	movs	r1, #32
 8007548:	4638      	mov	r0, r7
 800754a:	f7ff ff84 	bl	8007456 <putf>
 800754e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007552:	4405      	add	r5, r0
 8007554:	e7af      	b.n	80074b6 <putchw+0x3e>
    unsigned written = 0;
 8007556:	2500      	movs	r5, #0
 8007558:	e7b5      	b.n	80074c6 <putchw+0x4e>
    } else if (p->alt && p->base == 8) {
 800755a:	f640 0202 	movw	r2, #2050	; 0x802
 800755e:	4293      	cmp	r3, r2
 8007560:	d1d0      	bne.n	8007504 <putchw+0x8c>
        written += putf(putp, '0');
 8007562:	2130      	movs	r1, #48	; 0x30
 8007564:	e7ca      	b.n	80074fc <putchw+0x84>
            written += putf(putp, '0');
 8007566:	2130      	movs	r1, #48	; 0x30
 8007568:	4638      	mov	r0, r7
 800756a:	f7ff ff74 	bl	8007456 <putf>
 800756e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007572:	4405      	add	r5, r0
 8007574:	e7c9      	b.n	800750a <putchw+0x92>
        written += putf(putp, ch);
 8007576:	4638      	mov	r0, r7
 8007578:	f7ff ff6d 	bl	8007456 <putf>
 800757c:	4405      	add	r5, r0
 800757e:	e7ce      	b.n	800751e <putchw+0xa6>
            written += putf(putp, ' ');
 8007580:	2120      	movs	r1, #32
 8007582:	4638      	mov	r0, r7
 8007584:	f7ff ff67 	bl	8007456 <putf>
 8007588:	3c01      	subs	r4, #1
 800758a:	4405      	add	r5, r0
 800758c:	e7cd      	b.n	800752a <putchw+0xb2>
 800758e:	bf00      	nop
 8007590:	0008ff00 	.word	0x0008ff00

08007594 <tfp_format>:

    return val;
}

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
 8007594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t written = 0;
 8007598:	2600      	movs	r6, #0
{
 800759a:	4607      	mov	r7, r0
 800759c:	4614      	mov	r4, r2
    while ((ch = *(fmt++))) {
        if (ch != '%') {
            written += putf(putp, ch);
        } else {
            /* Init parameter struct */
            p.lz = 0;
 800759e:	46b0      	mov	r8, r6
{
 80075a0:	b089      	sub	sp, #36	; 0x24
    p.bf = bf;
 80075a2:	ad02      	add	r5, sp, #8
 80075a4:	9501      	str	r5, [sp, #4]
    while ((ch = *(fmt++))) {
 80075a6:	f101 0901 	add.w	r9, r1, #1
 80075aa:	7809      	ldrb	r1, [r1, #0]
 80075ac:	b919      	cbnz	r1, 80075b6 <tfp_format+0x22>
        }
    }
 abort:;
 
 return written;
}
 80075ae:	4630      	mov	r0, r6
 80075b0:	b009      	add	sp, #36	; 0x24
 80075b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ch != '%') {
 80075b6:	2925      	cmp	r1, #37	; 0x25
 80075b8:	d003      	beq.n	80075c2 <tfp_format+0x2e>
                written += putf(putp, ch);
 80075ba:	4638      	mov	r0, r7
 80075bc:	f7ff ff4b 	bl	8007456 <putf>
 80075c0:	e0ff      	b.n	80077c2 <tfp_format+0x22e>
            p.alt = 0;
 80075c2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    while ((ch = *(fmt++))) {
 80075c6:	4648      	mov	r0, r9
            p.uc = 0;
 80075c8:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
 80075cc:	f368 0382 	bfi	r3, r8, #2, #1
 80075d0:	f88d 3002 	strb.w	r3, [sp, #2]
            while ((ch = *(fmt++))) {
 80075d4:	2300      	movs	r3, #0
 80075d6:	461a      	mov	r2, r3
            p.lz = 0;
 80075d8:	f88d 8001 	strb.w	r8, [sp, #1]
            p.width = 0;
 80075dc:	f88d 8000 	strb.w	r8, [sp]
            while ((ch = *(fmt++))) {
 80075e0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80075e4:	b949      	cbnz	r1, 80075fa <tfp_format+0x66>
 80075e6:	b10b      	cbz	r3, 80075ec <tfp_format+0x58>
 80075e8:	f88d 2001 	strb.w	r2, [sp, #1]
            } else if (ch >= '0' && ch <= '9') {
 80075ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80075f0:	2b09      	cmp	r3, #9
 80075f2:	d834      	bhi.n	800765e <tfp_format+0xca>
    int num = 0;
 80075f4:	2200      	movs	r2, #0
        num = num * base + digit;
 80075f6:	200a      	movs	r0, #10
 80075f8:	e056      	b.n	80076a8 <tfp_format+0x114>
                switch (ch) {
 80075fa:	292d      	cmp	r1, #45	; 0x2d
 80075fc:	d010      	beq.n	8007620 <tfp_format+0x8c>
 80075fe:	2930      	cmp	r1, #48	; 0x30
 8007600:	d008      	beq.n	8007614 <tfp_format+0x80>
 8007602:	2923      	cmp	r1, #35	; 0x23
 8007604:	d118      	bne.n	8007638 <tfp_format+0xa4>
                    p.alt = 1;
 8007606:	f89d 1002 	ldrb.w	r1, [sp, #2]
 800760a:	f041 0102 	orr.w	r1, r1, #2
 800760e:	f88d 1002 	strb.w	r1, [sp, #2]
                    continue;
 8007612:	e003      	b.n	800761c <tfp_format+0x88>
                    if (!p.left) {
 8007614:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8007618:	0709      	lsls	r1, r1, #28
 800761a:	d50a      	bpl.n	8007632 <tfp_format+0x9e>
                    p.lz = 0;
 800761c:	4648      	mov	r0, r9
 800761e:	e7df      	b.n	80075e0 <tfp_format+0x4c>
                    p.left = 1;
 8007620:	f89d 3002 	ldrb.w	r3, [sp, #2]
                    p.lz = 0;
 8007624:	2200      	movs	r2, #0
                    p.left = 1;
 8007626:	f043 0308 	orr.w	r3, r3, #8
 800762a:	f88d 3002 	strb.w	r3, [sp, #2]
                    continue;
 800762e:	2301      	movs	r3, #1
 8007630:	e7f4      	b.n	800761c <tfp_format+0x88>
 8007632:	2301      	movs	r3, #1
                        p.lz = 1;
 8007634:	461a      	mov	r2, r3
 8007636:	e7f1      	b.n	800761c <tfp_format+0x88>
 8007638:	b10b      	cbz	r3, 800763e <tfp_format+0xaa>
 800763a:	f88d 2001 	strb.w	r2, [sp, #1]
            if (ch == '*') {
 800763e:	292a      	cmp	r1, #42	; 0x2a
 8007640:	d1d4      	bne.n	80075ec <tfp_format+0x58>
            val = va_arg(*va, int);
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	1d22      	adds	r2, r4, #4
                if (i > UCHAR_MAX) {
 8007646:	2bff      	cmp	r3, #255	; 0xff
 8007648:	dd03      	ble.n	8007652 <tfp_format+0xbe>
                    p.width = UCHAR_MAX;
 800764a:	23ff      	movs	r3, #255	; 0xff
                    p.width = i;
 800764c:	f88d 3000 	strb.w	r3, [sp]
 8007650:	e001      	b.n	8007656 <tfp_format+0xc2>
                } else if (i > 0) {
 8007652:	2b00      	cmp	r3, #0
 8007654:	dcfa      	bgt.n	800764c <tfp_format+0xb8>
            val = va_arg(*va, int);
 8007656:	4614      	mov	r4, r2
                ch = *(fmt++);
 8007658:	7841      	ldrb	r1, [r0, #1]
 800765a:	f100 0902 	add.w	r9, r0, #2
            if (ch == 'l') {
 800765e:	296c      	cmp	r1, #108	; 0x6c
 8007660:	d13b      	bne.n	80076da <tfp_format+0x146>
                ch = *(fmt++);
 8007662:	f899 1000 	ldrb.w	r1, [r9]
                if (ch == 'l') {
 8007666:	296c      	cmp	r1, #108	; 0x6c
                lng = 1;
 8007668:	bf13      	iteet	ne
 800766a:	2301      	movne	r3, #1
                    lng = 2;
 800766c:	2302      	moveq	r3, #2
                    ch = *(fmt++);
 800766e:	f899 1001 	ldrbeq.w	r1, [r9, #1]
                ch = *(fmt++);
 8007672:	f109 0901 	addne.w	r9, r9, #1
                    ch = *(fmt++);
 8007676:	bf08      	it	eq
 8007678:	f109 0902 	addeq.w	r9, r9, #2
            if (ch == 'z') {
 800767c:	297a      	cmp	r1, #122	; 0x7a
                ch = *(fmt++);
 800767e:	bf04      	itt	eq
 8007680:	f899 1000 	ldrbeq.w	r1, [r9]
 8007684:	f109 0901 	addeq.w	r9, r9, #1
            switch (ch) {
 8007688:	2969      	cmp	r1, #105	; 0x69
 800768a:	d02c      	beq.n	80076e6 <tfp_format+0x152>
 800768c:	d83a      	bhi.n	8007704 <tfp_format+0x170>
 800768e:	2958      	cmp	r1, #88	; 0x58
 8007690:	d064      	beq.n	800775c <tfp_format+0x1c8>
 8007692:	d824      	bhi.n	80076de <tfp_format+0x14a>
 8007694:	2900      	cmp	r1, #0
 8007696:	d08a      	beq.n	80075ae <tfp_format+0x1a>
 8007698:	2925      	cmp	r1, #37	; 0x25
 800769a:	d08e      	beq.n	80075ba <tfp_format+0x26>
                v = va_arg(va, void *);
 800769c:	4649      	mov	r1, r9
 800769e:	e782      	b.n	80075a6 <tfp_format+0x12>
        num = num * base + digit;
 80076a0:	fb00 3202 	mla	r2, r0, r2, r3
        ch = *p++;
 80076a4:	f819 1b01 	ldrb.w	r1, [r9], #1
    if (ch >= '0' && ch <= '9')
 80076a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80076ac:	fa5f fc83 	uxtb.w	ip, r3
 80076b0:	f1bc 0f09 	cmp.w	ip, #9
 80076b4:	d9f4      	bls.n	80076a0 <tfp_format+0x10c>
    else if (ch >= 'a' && ch <= 'f')
 80076b6:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80076ba:	2b05      	cmp	r3, #5
 80076bc:	d806      	bhi.n	80076cc <tfp_format+0x138>
        return ch - 'a' + 10;
 80076be:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
        if (digit > base)
 80076c2:	2b0a      	cmp	r3, #10
 80076c4:	ddec      	ble.n	80076a0 <tfp_format+0x10c>
    *nump = num;
 80076c6:	f88d 2000 	strb.w	r2, [sp]
 80076ca:	e7c8      	b.n	800765e <tfp_format+0xca>
    else if (ch >= 'A' && ch <= 'F')
 80076cc:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80076d0:	2b05      	cmp	r3, #5
 80076d2:	d8f8      	bhi.n	80076c6 <tfp_format+0x132>
        return ch - 'A' + 10;
 80076d4:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 80076d8:	e7f3      	b.n	80076c2 <tfp_format+0x12e>
            lng = 0;
 80076da:	2300      	movs	r3, #0
 80076dc:	e7ce      	b.n	800767c <tfp_format+0xe8>
            switch (ch) {
 80076de:	2963      	cmp	r1, #99	; 0x63
 80076e0:	d077      	beq.n	80077d2 <tfp_format+0x23e>
 80076e2:	2964      	cmp	r1, #100	; 0x64
 80076e4:	d1da      	bne.n	800769c <tfp_format+0x108>
                p.base = 10;
 80076e6:	220a      	movs	r2, #10
 80076e8:	f88d 2003 	strb.w	r2, [sp, #3]
    switch (lng) {
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d051      	beq.n	8007794 <tfp_format+0x200>
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d04f      	beq.n	8007794 <tfp_format+0x200>
            val = va_arg(*va, long long);
 80076f4:	3407      	adds	r4, #7
 80076f6:	f024 0307 	bic.w	r3, r4, #7
 80076fa:	f103 0408 	add.w	r4, r3, #8
 80076fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007702:	e04a      	b.n	800779a <tfp_format+0x206>
            switch (ch) {
 8007704:	2973      	cmp	r1, #115	; 0x73
 8007706:	d06c      	beq.n	80077e2 <tfp_format+0x24e>
 8007708:	d824      	bhi.n	8007754 <tfp_format+0x1c0>
 800770a:	296f      	cmp	r1, #111	; 0x6f
 800770c:	d05b      	beq.n	80077c6 <tfp_format+0x232>
 800770e:	2970      	cmp	r1, #112	; 0x70
 8007710:	d1c4      	bne.n	800769c <tfp_format+0x108>
                p.base = 16;
 8007712:	2310      	movs	r3, #16
                ui2a((uintptr_t)v, &p);
 8007714:	466a      	mov	r2, sp
                v = va_arg(va, void *);
 8007716:	6820      	ldr	r0, [r4, #0]
                ui2a((uintptr_t)v, &p);
 8007718:	2100      	movs	r1, #0
                p.base = 16;
 800771a:	f88d 3003 	strb.w	r3, [sp, #3]
                ui2a((uintptr_t)v, &p);
 800771e:	f7ff fe41 	bl	80073a4 <ui2a>
                p.width = 2 * sizeof(void*);
 8007722:	f44f 7384 	mov.w	r3, #264	; 0x108
                written += putf(putp, '0');
 8007726:	2130      	movs	r1, #48	; 0x30
 8007728:	4638      	mov	r0, r7
                p.width = 2 * sizeof(void*);
 800772a:	f8ad 3000 	strh.w	r3, [sp]
                written += putf(putp, '0');
 800772e:	f7ff fe92 	bl	8007456 <putf>
                written += putf(putp, 'x');
 8007732:	2178      	movs	r1, #120	; 0x78
                written += putf(putp, '0');
 8007734:	4683      	mov	fp, r0
                written += putf(putp, 'x');
 8007736:	4638      	mov	r0, r7
 8007738:	f7ff fe8d 	bl	8007456 <putf>
                v = va_arg(va, void *);
 800773c:	f104 0a04 	add.w	sl, r4, #4
                written += putchw(putp, &p);
 8007740:	4669      	mov	r1, sp
                written += putf(putp, 'x');
 8007742:	4604      	mov	r4, r0
                written += putchw(putp, &p);
 8007744:	4638      	mov	r0, r7
 8007746:	f7ff fe97 	bl	8007478 <putchw>
 800774a:	4406      	add	r6, r0
 800774c:	445e      	add	r6, fp
 800774e:	4426      	add	r6, r4
                p.bf = va_arg(va, char *);
 8007750:	4654      	mov	r4, sl
                break;
 8007752:	e7a3      	b.n	800769c <tfp_format+0x108>
            switch (ch) {
 8007754:	2975      	cmp	r1, #117	; 0x75
 8007756:	d019      	beq.n	800778c <tfp_format+0x1f8>
 8007758:	2978      	cmp	r1, #120	; 0x78
 800775a:	d19f      	bne.n	800769c <tfp_format+0x108>
                p.base = 16;
 800775c:	2210      	movs	r2, #16
 800775e:	f88d 2003 	strb.w	r2, [sp, #3]
                p.uc = (ch == 'X');
 8007762:	f1a1 0258 	sub.w	r2, r1, #88	; 0x58
 8007766:	4251      	negs	r1, r2
 8007768:	4151      	adcs	r1, r2
 800776a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800776e:	f361 0282 	bfi	r2, r1, #2, #1
 8007772:	f88d 2002 	strb.w	r2, [sp, #2]
    switch (lng) {
 8007776:	b343      	cbz	r3, 80077ca <tfp_format+0x236>
 8007778:	2b01      	cmp	r3, #1
 800777a:	d026      	beq.n	80077ca <tfp_format+0x236>
            val = va_arg(*va, unsigned long long);
 800777c:	3407      	adds	r4, #7
 800777e:	f024 0307 	bic.w	r3, r4, #7
 8007782:	f103 0408 	add.w	r4, r3, #8
 8007786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800778a:	e013      	b.n	80077b4 <tfp_format+0x220>
                p.base = 10;
 800778c:	220a      	movs	r2, #10
                p.base = 8;
 800778e:	f88d 2003 	strb.w	r2, [sp, #3]
 8007792:	e7f0      	b.n	8007776 <tfp_format+0x1e2>
            val = va_arg(*va, long);
 8007794:	6820      	ldr	r0, [r4, #0]
 8007796:	3404      	adds	r4, #4
 8007798:	17c1      	asrs	r1, r0, #31
    if (num < 0) {
 800779a:	2800      	cmp	r0, #0
 800779c:	f171 0300 	sbcs.w	r3, r1, #0
 80077a0:	da08      	bge.n	80077b4 <tfp_format+0x220>
        p->sign = 1;
 80077a2:	f89d 3002 	ldrb.w	r3, [sp, #2]
        num = -num;
 80077a6:	4240      	negs	r0, r0
        p->sign = 1;
 80077a8:	f043 0301 	orr.w	r3, r3, #1
        num = -num;
 80077ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
 80077b0:	f88d 3002 	strb.w	r3, [sp, #2]
                ui2a(intarg(lng, 0, &va), &p);
 80077b4:	466a      	mov	r2, sp
 80077b6:	f7ff fdf5 	bl	80073a4 <ui2a>
                written += putchw(putp, &p);
 80077ba:	4669      	mov	r1, sp
 80077bc:	4638      	mov	r0, r7
 80077be:	f7ff fe5b 	bl	8007478 <putchw>
                written += putf(putp, ch);
 80077c2:	4406      	add	r6, r0
                break;
 80077c4:	e76a      	b.n	800769c <tfp_format+0x108>
                p.base = 8;
 80077c6:	2208      	movs	r2, #8
 80077c8:	e7e1      	b.n	800778e <tfp_format+0x1fa>
            val = va_arg(*va, unsigned long);
 80077ca:	6820      	ldr	r0, [r4, #0]
 80077cc:	2100      	movs	r1, #0
 80077ce:	3404      	adds	r4, #4
 80077d0:	e7f0      	b.n	80077b4 <tfp_format+0x220>
                written += putf(putp, (char)(va_arg(va, int)));
 80077d2:	7821      	ldrb	r1, [r4, #0]
 80077d4:	4638      	mov	r0, r7
 80077d6:	f7ff fe3e 	bl	8007456 <putf>
 80077da:	f104 0a04 	add.w	sl, r4, #4
 80077de:	4406      	add	r6, r0
 80077e0:	e7b6      	b.n	8007750 <tfp_format+0x1bc>
                p.bf = va_arg(va, char *);
 80077e2:	6823      	ldr	r3, [r4, #0]
                written += putchw(putp, &p);
 80077e4:	4669      	mov	r1, sp
 80077e6:	4638      	mov	r0, r7
                p.bf = va_arg(va, char *);
 80077e8:	9301      	str	r3, [sp, #4]
                written += putchw(putp, &p);
 80077ea:	f7ff fe45 	bl	8007478 <putchw>
                p.bf = va_arg(va, char *);
 80077ee:	f104 0a04 	add.w	sl, r4, #4
                written += putchw(putp, &p);
 80077f2:	4406      	add	r6, r0
                p.bf = bf;
 80077f4:	9501      	str	r5, [sp, #4]
 80077f6:	e7ab      	b.n	8007750 <tfp_format+0x1bc>

080077f8 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    return tfp_format(f, fmt, va);
 80077f8:	f7ff becc 	b.w	8007594 <tfp_format>

080077fc <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
 80077fc:	b40f      	push	{r0, r1, r2, r3}
 80077fe:	b507      	push	{r0, r1, r2, lr}
    return tfp_format(f, fmt, va);
 8007800:	4b06      	ldr	r3, [pc, #24]	; (800781c <printf+0x20>)
{
 8007802:	aa04      	add	r2, sp, #16
 8007804:	f852 1b04 	ldr.w	r1, [r2], #4
    return tfp_format(f, fmt, va);
 8007808:	6818      	ldr	r0, [r3, #0]
    va_list va;
    va_start(va, fmt);
 800780a:	9201      	str	r2, [sp, #4]
    return tfp_format(f, fmt, va);
 800780c:	f7ff fec2 	bl	8007594 <tfp_format>
    int rv = vfprintf(stdout, fmt, va);
    va_end(va);
    return rv;
}
 8007810:	b003      	add	sp, #12
 8007812:	f85d eb04 	ldr.w	lr, [sp], #4
 8007816:	b004      	add	sp, #16
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	0800e264 	.word	0x0800e264

08007820 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
 8007820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007822:	4616      	mov	r6, r2
 8007824:	461f      	mov	r7, r3
 8007826:	460d      	mov	r5, r1
 8007828:	b085      	sub	sp, #20
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
 800782a:	460a      	mov	r2, r1
{
 800782c:	4604      	mov	r4, r0
    FILE *f = fmemopen_w(&state, str, size);
 800782e:	4601      	mov	r1, r0
 8007830:	4668      	mov	r0, sp
 8007832:	f000 f85d 	bl	80078f0 <fmemopen_w>
    tfp_format(f, fmt, va);
 8007836:	463a      	mov	r2, r7
 8007838:	4631      	mov	r1, r6
 800783a:	f7ff feab 	bl	8007594 <tfp_format>
    if (size > 0) {
 800783e:	b14d      	cbz	r5, 8007854 <vsnprintf+0x34>
        if (state.bytes_written < size) {
 8007840:	9b02      	ldr	r3, [sp, #8]
 8007842:	42ab      	cmp	r3, r5
 8007844:	f04f 0300 	mov.w	r3, #0
            *(state.buffer) = '\0';
 8007848:	bf35      	itete	cc
 800784a:	9a01      	ldrcc	r2, [sp, #4]
        } else {
            str[size - 1] = '\0';
 800784c:	1964      	addcs	r4, r4, r5
            *(state.buffer) = '\0';
 800784e:	7013      	strbcc	r3, [r2, #0]
            str[size - 1] = '\0';
 8007850:	f804 3c01 	strbcs.w	r3, [r4, #-1]
        }
    }
    return state.bytes_written;
}
 8007854:	9802      	ldr	r0, [sp, #8]
 8007856:	b005      	add	sp, #20
 8007858:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800785c <vprintf>:
#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
	return vfprintf(stdout, format, ap);
 800785c:	4b02      	ldr	r3, [pc, #8]	; (8007868 <vprintf+0xc>)
 800785e:	460a      	mov	r2, r1
 8007860:	4601      	mov	r1, r0
 8007862:	6818      	ldr	r0, [r3, #0]
 8007864:	f7ff bfc8 	b.w	80077f8 <vfprintf>
 8007868:	0800e264 	.word	0x0800e264

0800786c <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
 800786c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
 8007870:	8844      	ldrh	r4, [r0, #2]
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
 8007872:	8885      	ldrh	r5, [r0, #4]
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
 8007874:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007878:	ea4f 4b04 	mov.w	fp, r4, lsl #16
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
 800787c:	2400      	movs	r4, #0
{
 800787e:	4601      	mov	r1, r0
	x = (uint64_t) (uint16_t) xsubi[0] +
 8007880:	eb1b 0204 	adds.w	r2, fp, r4
 8007884:	8804      	ldrh	r4, [r0, #0]

	x = (0x5deece66dULL * x) + 0xb;
 8007886:	f04f 0005 	mov.w	r0, #5
	x = (uint64_t) (uint16_t) xsubi[0] +
 800788a:	eb4c 0305 	adc.w	r3, ip, r5
 800788e:	2500      	movs	r5, #0
 8007890:	eb12 0b04 	adds.w	fp, r2, r4
	x = (0x5deece66dULL * x) + 0xb;
 8007894:	fb00 f00b 	mul.w	r0, r0, fp
 8007898:	4c09      	ldr	r4, [pc, #36]	; (80078c0 <jrand48+0x54>)
	x = (uint64_t) (uint16_t) xsubi[0] +
 800789a:	eb43 0c05 	adc.w	ip, r3, r5
	x = (0x5deece66dULL * x) + 0xb;
 800789e:	fb04 000c 	mla	r0, r4, ip, r0
 80078a2:	fbab 2304 	umull	r2, r3, fp, r4
 80078a6:	f112 040b 	adds.w	r4, r2, #11
 80078aa:	4403      	add	r3, r0
 80078ac:	f143 0500 	adc.w	r5, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
 80078b0:	0c20      	lsrs	r0, r4, #16
 80078b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
	xsubi[0] = (unsigned short)(uint16_t) x;
 80078b6:	800c      	strh	r4, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
 80078b8:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
 80078ba:	808d      	strh	r5, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
 80078bc:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
 80078c0:	deece66d 	.word	0xdeece66d

080078c4 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
 80078c4:	4603      	mov	r3, r0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
 80078c6:	2000      	movs	r0, #0
{
 80078c8:	b530      	push	{r4, r5, lr}
    
    while (n--)
 80078ca:	f112 32ff 	adds.w	r2, r2, #4294967295
 80078ce:	d200      	bcs.n	80078d2 <memfile_write+0xe>
            i++;
        }
    }
    
    return i;
}
 80078d0:	bd30      	pop	{r4, r5, pc}
        f->bytes_written++;
 80078d2:	689c      	ldr	r4, [r3, #8]
        if (f->bytes_written <= f->size)
 80078d4:	68dd      	ldr	r5, [r3, #12]
        f->bytes_written++;
 80078d6:	3401      	adds	r4, #1
        if (f->bytes_written <= f->size)
 80078d8:	42ac      	cmp	r4, r5
        f->bytes_written++;
 80078da:	609c      	str	r4, [r3, #8]
        if (f->bytes_written <= f->size)
 80078dc:	d8f5      	bhi.n	80078ca <memfile_write+0x6>
            *f->buffer++ = *bp++;
 80078de:	685c      	ldr	r4, [r3, #4]
            i++;
 80078e0:	3001      	adds	r0, #1
            *f->buffer++ = *bp++;
 80078e2:	1c65      	adds	r5, r4, #1
 80078e4:	605d      	str	r5, [r3, #4]
 80078e6:	780d      	ldrb	r5, [r1, #0]
 80078e8:	3101      	adds	r1, #1
 80078ea:	7025      	strb	r5, [r4, #0]
 80078ec:	e7ed      	b.n	80078ca <memfile_write+0x6>
	...

080078f0 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
 80078f0:	b510      	push	{r4, lr}
    storage->file.vmt = &MemFile_methods;
 80078f2:	4c03      	ldr	r4, [pc, #12]	; (8007900 <fmemopen_w+0x10>)
    storage->buffer = buffer;
 80078f4:	e9c0 4100 	strd	r4, r1, [r0]
    storage->bytes_written = 0;
 80078f8:	2100      	movs	r1, #0
    storage->size = size;
 80078fa:	e9c0 1202 	strd	r1, r2, [r0, #8]
    return (FILE*)storage;
}
 80078fe:	bd10      	pop	{r4, pc}
 8007900:	0800e25c 	.word	0x0800e25c

08007904 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
 8007904:	2000      	movs	r0, #0
 8007906:	4770      	bx	lr

08007908 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
 8007908:	b510      	push	{r4, lr}
 800790a:	4614      	mov	r4, r2
 800790c:	4608      	mov	r0, r1
    console_write(bp, n);
 800790e:	4611      	mov	r1, r2
 8007910:	f7fc fb9e 	bl	8004050 <console_write>
    return n;
}
 8007914:	4620      	mov	r0, r4
 8007916:	bd10      	pop	{r4, pc}

08007918 <hmac_prng_init>:
static struct tc_hmac_prng_struct prng;  //  TinyCrypt HMAC PRNG.
static uint8_t hw_id[12];  //  Hardware ID is 12 bytes for STM32
static int hw_id_len;      //  Actual length of hardware ID
static uint8_t seed[32];   //  Seed must be >= 32 bytes long

void hmac_prng_init(void) {
 8007918:	b530      	push	{r4, r5, lr}
#define ENTROPY
#ifdef ENTROPY
    //  Use the internal temperature sensor as a source of entropy (noise) for the generator.
    int rawtemp;
    //  Open the temp_stm32 internal temperature sensor driver.  Assumes already started with "stm32f1_adc_create();  temp_stm32_create();""
    struct temp_stm32 *dev = (struct temp_stm32 *) os_dev_open(MYNEWT_VAL(TEMP_STM32_DEVICE), OS_TIMEOUT_NEVER, NULL);  assert(dev);
 800791a:	2200      	movs	r2, #0
void hmac_prng_init(void) {
 800791c:	b085      	sub	sp, #20
    struct temp_stm32 *dev = (struct temp_stm32 *) os_dev_open(MYNEWT_VAL(TEMP_STM32_DEVICE), OS_TIMEOUT_NEVER, NULL);  assert(dev);
 800791e:	f04f 31ff 	mov.w	r1, #4294967295
 8007922:	4826      	ldr	r0, [pc, #152]	; (80079bc <hmac_prng_init+0xa4>)
 8007924:	f7fe fc06 	bl	8006134 <os_dev_open>
 8007928:	4604      	mov	r4, r0
 800792a:	b928      	cbnz	r0, 8007938 <hmac_prng_init+0x20>
 800792c:	2300      	movs	r3, #0
 800792e:	461a      	mov	r2, r3
 8007930:	4619      	mov	r1, r3
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe f974 	bl	8005c20 <__assert_func>

    //  Fetch 32 bytes of temperature noise into the seed array.
    rc = temp_stm32_get_raw_temperature(dev, sizeof(seed) * 2, &rawtemp, seed); assert(rc == 0);
 8007938:	4b21      	ldr	r3, [pc, #132]	; (80079c0 <hmac_prng_init+0xa8>)
 800793a:	aa03      	add	r2, sp, #12
 800793c:	2140      	movs	r1, #64	; 0x40
 800793e:	f000 f983 	bl	8007c48 <temp_stm32_get_raw_temperature>
 8007942:	4605      	mov	r5, r0
 8007944:	2800      	cmp	r0, #0
 8007946:	d1f1      	bne.n	800792c <hmac_prng_init+0x14>
    os_dev_close((struct os_dev *) dev);  //  Close the driver.
 8007948:	4620      	mov	r0, r4
 800794a:	f7fe fc14 	bl	8006176 <os_dev_close>
#endif  //  ENTROPY

    //  Fetch the hardware ID.  This is unique across all microcontrollers.  
    hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 800794e:	f7fd fdf2 	bl	8005536 <hal_bsp_hw_id_len>
 8007952:	4c1c      	ldr	r4, [pc, #112]	; (80079c4 <hmac_prng_init+0xac>)
    assert(hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 8007954:	280b      	cmp	r0, #11
    hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 8007956:	6020      	str	r0, [r4, #0]
    assert(hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 8007958:	d9e8      	bls.n	800792c <hmac_prng_init+0x14>
    hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 800795a:	210c      	movs	r1, #12
 800795c:	481a      	ldr	r0, [pc, #104]	; (80079c8 <hmac_prng_init+0xb0>)
 800795e:	f7fd fded 	bl	800553c <hal_bsp_hw_id>
 8007962:	2800      	cmp	r0, #0
 8007964:	6020      	str	r0, [r4, #0]
 8007966:	dde1      	ble.n	800792c <hmac_prng_init+0x14>

    //  Personalise the random number generator with the hardware ID.
    //  TinyCrypt uses the hardware ID to prevent generating similar random numbers across microcontrollers.
    console_printf("RND personalise with hw id "); console_dump(hw_id, hw_id_len); console_printf("\n"); console_flush(); ////
 8007968:	4818      	ldr	r0, [pc, #96]	; (80079cc <hmac_prng_init+0xb4>)
 800796a:	f7fc fba5 	bl	80040b8 <console_printf>
 800796e:	6821      	ldr	r1, [r4, #0]
 8007970:	4815      	ldr	r0, [pc, #84]	; (80079c8 <hmac_prng_init+0xb0>)
 8007972:	f7fc fb39 	bl	8003fe8 <console_dump>
 8007976:	4816      	ldr	r0, [pc, #88]	; (80079d0 <hmac_prng_init+0xb8>)
 8007978:	f7fc fb9e 	bl	80040b8 <console_printf>
 800797c:	f7fc fac2 	bl	8003f04 <console_flush>
    rc = tc_hmac_prng_init(&prng, hw_id, hw_id_len);  assert(rc);
 8007980:	6822      	ldr	r2, [r4, #0]
 8007982:	4911      	ldr	r1, [pc, #68]	; (80079c8 <hmac_prng_init+0xb0>)
 8007984:	4813      	ldr	r0, [pc, #76]	; (80079d4 <hmac_prng_init+0xbc>)
 8007986:	f000 fa9f 	bl	8007ec8 <tc_hmac_prng_init>
 800798a:	2800      	cmp	r0, #0
 800798c:	d0ce      	beq.n	800792c <hmac_prng_init+0x14>

#ifdef ENTROPY
    console_printf("RND seed with temp entropy "); console_dump(seed, sizeof(seed)); console_printf("\n"); console_flush(); ////
 800798e:	4812      	ldr	r0, [pc, #72]	; (80079d8 <hmac_prng_init+0xc0>)
 8007990:	f7fc fb92 	bl	80040b8 <console_printf>
 8007994:	2120      	movs	r1, #32
 8007996:	480a      	ldr	r0, [pc, #40]	; (80079c0 <hmac_prng_init+0xa8>)
 8007998:	f7fc fb26 	bl	8003fe8 <console_dump>
 800799c:	480c      	ldr	r0, [pc, #48]	; (80079d0 <hmac_prng_init+0xb8>)
 800799e:	f7fc fb8b 	bl	80040b8 <console_printf>
 80079a2:	f7fc faaf 	bl	8003f04 <console_flush>
#else
    console_printf("NO ENTROPY\n");
#endif  //  ENTROPY

    //  Use the temperature entropy data to seed the generator.  Seed must be >= 32 bytes long.
    rc = tc_hmac_prng_reseed(&prng, seed, sizeof(seed), NULL, 0);
 80079a6:	9500      	str	r5, [sp, #0]
 80079a8:	462b      	mov	r3, r5
 80079aa:	2220      	movs	r2, #32
 80079ac:	4904      	ldr	r1, [pc, #16]	; (80079c0 <hmac_prng_init+0xa8>)
 80079ae:	4809      	ldr	r0, [pc, #36]	; (80079d4 <hmac_prng_init+0xbc>)
 80079b0:	f000 faae 	bl	8007f10 <tc_hmac_prng_reseed>
    assert(rc);
 80079b4:	2800      	cmp	r0, #0
 80079b6:	d0b9      	beq.n	800792c <hmac_prng_init+0x14>
}
 80079b8:	b005      	add	sp, #20
 80079ba:	bd30      	pop	{r4, r5, pc}
 80079bc:	0800e268 	.word	0x0800e268
 80079c0:	20002b20 	.word	0x20002b20
 80079c4:	200029e4 	.word	0x200029e4
 80079c8:	200029d8 	.word	0x200029d8
 80079cc:	0800e275 	.word	0x0800e275
 80079d0:	0800e6ec 	.word	0x0800e6ec
 80079d4:	200029e8 	.word	0x200029e8
 80079d8:	0800e291 	.word	0x0800e291

080079dc <hmac_prng_generate>:

int hmac_prng_generate(uint8_t *rnd, unsigned int rndlen) {
 80079dc:	b508      	push	{r3, lr}
    //  Generate a random number of length rndlen bytes and save to rnd.  Return 0 if successful.
    int rc;
    //  Call TinyCrypt to generate the random number.
    rc = tc_hmac_prng_generate(rnd, rndlen, &prng);  assert(rc);
 80079de:	4a05      	ldr	r2, [pc, #20]	; (80079f4 <hmac_prng_generate+0x18>)
 80079e0:	f000 fab1 	bl	8007f46 <tc_hmac_prng_generate>
 80079e4:	4603      	mov	r3, r0
 80079e6:	b918      	cbnz	r0, 80079f0 <hmac_prng_generate+0x14>
 80079e8:	4602      	mov	r2, r0
 80079ea:	4601      	mov	r1, r0
 80079ec:	f7fe f918 	bl	8005c20 <__assert_func>
    return 0;
}
 80079f0:	2000      	movs	r0, #0
 80079f2:	bd08      	pop	{r3, pc}
 80079f4:	200029e8 	.word	0x200029e8

080079f8 <json_helper_set_array>:
#include <sensor_coap/sensor_coap.h>
#include <mynewt_rust/json_helper.h>

//  Assume we are writing an object now.  Write the key name and start a child array.
//  {a:b --> {a:b, key:[
void json_helper_set_array(void *object, const char *key) {
 80079f8:	b508      	push	{r3, lr}
    assert(key);
 80079fa:	460b      	mov	r3, r1
 80079fc:	b919      	cbnz	r1, 8007a06 <json_helper_set_array+0xe>
 80079fe:	460a      	mov	r2, r1
 8007a00:	4608      	mov	r0, r1
 8007a02:	f7fe f90d 	bl	8005c20 <__assert_func>
    //  console_printf("json_helper_set_array: %s\n", key); ////
    json_rep_set_array_k(object, (char *) key);
 8007a06:	4804      	ldr	r0, [pc, #16]	; (8007a18 <json_helper_set_array+0x20>)
 8007a08:	f7fd fd58 	bl	80054bc <json_encode_array_name>
}
 8007a0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    json_rep_set_array_k(object, (char *) key);
 8007a10:	4801      	ldr	r0, [pc, #4]	; (8007a18 <json_helper_set_array+0x20>)
 8007a12:	f7fd bd55 	b.w	80054c0 <json_encode_array_start>
 8007a16:	bf00      	nop
 8007a18:	20003368 	.word	0x20003368

08007a1c <json_helper_close_array>:

//  End the child array and resume writing the parent object.
//  {a:b, key:[... --> {a:b, key:[...]
void json_helper_close_array(void *object, const char *key) {
 8007a1c:	b508      	push	{r3, lr}
    assert(key);
 8007a1e:	460b      	mov	r3, r1
 8007a20:	b919      	cbnz	r1, 8007a2a <json_helper_close_array+0xe>
 8007a22:	460a      	mov	r2, r1
 8007a24:	4608      	mov	r0, r1
 8007a26:	f7fe f8fb 	bl	8005c20 <__assert_func>
    json_rep_close_array(object, key);
 8007a2a:	4802      	ldr	r0, [pc, #8]	; (8007a34 <json_helper_close_array+0x18>)
}
 8007a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    json_rep_close_array(object, key);
 8007a30:	f7fd bd56 	b.w	80054e0 <json_encode_array_finish>
 8007a34:	20003368 	.word	0x20003368

08007a38 <json_helper_object_array_start_item>:

//  Assume we have called set_array.  Start an array item, assumed to be an object.
//  [... --> [...,
void json_helper_object_array_start_item(const char *key) {
 8007a38:	b508      	push	{r3, lr}
    assert(key);
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	b918      	cbnz	r0, 8007a46 <json_helper_object_array_start_item+0xe>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	4601      	mov	r1, r0
 8007a42:	f7fe f8ed 	bl	8005c20 <__assert_func>
    //  console_printf("json_helper_object_array_start_item: %s\n", key); ////
    json_rep_object_array_start_item(key);
 8007a46:	4802      	ldr	r0, [pc, #8]	; (8007a50 <json_helper_object_array_start_item+0x18>)
}
 8007a48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    json_rep_object_array_start_item(key);
 8007a4c:	f7fd bbd6 	b.w	80051fc <json_encode_object_start>
 8007a50:	20003368 	.word	0x20003368

08007a54 <json_helper_object_array_end_item>:

//  End an array item, assumed to be an object.
//  [... --> [...,
void json_helper_object_array_end_item(const char *key) {
 8007a54:	b508      	push	{r3, lr}
    assert(key);
 8007a56:	4603      	mov	r3, r0
 8007a58:	b918      	cbnz	r0, 8007a62 <json_helper_object_array_end_item+0xe>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	4601      	mov	r1, r0
 8007a5e:	f7fe f8df 	bl	8005c20 <__assert_func>
    json_rep_object_array_end_item(key);
 8007a62:	4802      	ldr	r0, [pc, #8]	; (8007a6c <json_helper_object_array_end_item+0x18>)
}
 8007a64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    json_rep_object_array_end_item(key);
 8007a68:	f7fd bd18 	b.w	800549c <json_encode_object_finish>
 8007a6c:	20003368 	.word	0x20003368

08007a70 <json_helper_set_int>:

//  Encode a value into JSON: int, unsigned int, float, text, ...
void json_helper_set_int(void *object, const char *key, uint64_t value) {
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	461d      	mov	r5, r3
 8007a74:	4614      	mov	r4, r2
    assert(key);
 8007a76:	460b      	mov	r3, r1
 8007a78:	b919      	cbnz	r1, 8007a82 <json_helper_set_int+0x12>
 8007a7a:	460a      	mov	r2, r1
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	f7fe f8cf 	bl	8005c20 <__assert_func>
    //  console_printf("json_helper_set_int: %s\n", key); ////
    json_rep_set_int_k(object, (char *) key, value);
 8007a82:	2202      	movs	r2, #2
 8007a84:	4b04      	ldr	r3, [pc, #16]	; (8007a98 <json_helper_set_int+0x28>)
 8007a86:	4805      	ldr	r0, [pc, #20]	; (8007a9c <json_helper_set_int+0x2c>)
 8007a88:	705a      	strb	r2, [r3, #1]
 8007a8a:	e9c3 4502 	strd	r4, r5, [r3, #8]
 8007a8e:	461a      	mov	r2, r3
}
 8007a90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    json_rep_set_int_k(object, (char *) key, value);
 8007a94:	f7fd bbfa 	b.w	800528c <json_encode_object_entry>
 8007a98:	200033b8 	.word	0x200033b8
 8007a9c:	20003368 	.word	0x20003368

08007aa0 <json_helper_set_text_string>:
void json_helper_set_float(void *object, const char *key, float value) {
    assert(key);
    json_rep_set_float_k(object, (char *) key, value);
}

void json_helper_set_text_string(void *object, const char *key, const char *value) {
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	4615      	mov	r5, r2
    assert(key);
 8007aa4:	460e      	mov	r6, r1
 8007aa6:	b929      	cbnz	r1, 8007ab4 <json_helper_set_text_string+0x14>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	461a      	mov	r2, r3
 8007aac:	4619      	mov	r1, r3
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fe f8b6 	bl	8005c20 <__assert_func>
    assert(value);
 8007ab4:	2a00      	cmp	r2, #0
 8007ab6:	d0f7      	beq.n	8007aa8 <json_helper_set_text_string+0x8>
    //  console_printf("json_helper_set_text_string: %s\n", key); ////
    json_rep_set_text_string_k(object, (char *) key, value);
 8007ab8:	2303      	movs	r3, #3
 8007aba:	4c07      	ldr	r4, [pc, #28]	; (8007ad8 <json_helper_set_text_string+0x38>)
 8007abc:	4610      	mov	r0, r2
 8007abe:	7063      	strb	r3, [r4, #1]
 8007ac0:	f7ff fc68 	bl	8007394 <strlen>
 8007ac4:	60a5      	str	r5, [r4, #8]
 8007ac6:	8060      	strh	r0, [r4, #2]
 8007ac8:	4622      	mov	r2, r4
 8007aca:	4631      	mov	r1, r6
}
 8007acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    json_rep_set_text_string_k(object, (char *) key, value);
 8007ad0:	4802      	ldr	r0, [pc, #8]	; (8007adc <json_helper_set_text_string+0x3c>)
 8007ad2:	f7fd bbdb 	b.w	800528c <json_encode_object_entry>
 8007ad6:	bf00      	nop
 8007ad8:	200033b8 	.word	0x200033b8
 8007adc:	20003368 	.word	0x20003368

08007ae0 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
 8007ae0:	b508      	push	{r3, lr}
    sysinit();
 8007ae2:	f7fd fb73 	bl	80051cc <sysinit_start>
 8007ae6:	f000 f961 	bl	8007dac <sysinit_app>
}
 8007aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sysinit();
 8007aee:	f7fd bb73 	b.w	80051d8 <sysinit_end>

08007af2 <get_temp_raw_data>:
#include <custom_sensor/custom_sensor.h>
#include <mynewt_rust/sensor_helper.h>

///  Interpret `sensor_data` as a `sensor_temp_raw_data` struct that contains raw temp.
///  Copy the sensor data into `dest`.  Return 0 if successful.
int get_temp_raw_data(void *sensor_data, struct sensor_temp_raw_data *dest) {
 8007af2:	b508      	push	{r3, lr}
    assert(sensor_data); assert(dest);
 8007af4:	b928      	cbnz	r0, 8007b02 <get_temp_raw_data+0x10>
 8007af6:	2300      	movs	r3, #0
 8007af8:	461a      	mov	r2, r3
 8007afa:	4619      	mov	r1, r3
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fe f88f 	bl	8005c20 <__assert_func>
 8007b02:	2900      	cmp	r1, #0
 8007b04:	d0f7      	beq.n	8007af6 <get_temp_raw_data+0x4>
    struct sensor_temp_raw_data *src = (struct sensor_temp_raw_data *) sensor_data;
    memcpy(dest, src, sizeof(struct sensor_temp_raw_data));
 8007b06:	6803      	ldr	r3, [r0, #0]
 8007b08:	600b      	str	r3, [r1, #0]
 8007b0a:	7903      	ldrb	r3, [r0, #4]
    return 0;
}
 8007b0c:	2000      	movs	r0, #0
    memcpy(dest, src, sizeof(struct sensor_temp_raw_data));
 8007b0e:	710b      	strb	r3, [r1, #4]
}
 8007b10:	bd08      	pop	{r3, pc}

08007b12 <temp_stm32_sensor_get_config>:

static int temp_stm32_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
 8007b12:	2100      	movs	r1, #0
 8007b14:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
 8007b18:	ea50 0301 	orrs.w	r3, r0, r1
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
 8007b1c:	bf1f      	itttt	ne
 8007b1e:	2201      	movne	r2, #1
 8007b20:	9b00      	ldrne	r3, [sp, #0]
    return (0);
 8007b22:	2000      	movne	r0, #0
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
 8007b24:	701a      	strbne	r2, [r3, #0]
err:
    return (rc);
 8007b26:	bf08      	it	eq
 8007b28:	f06f 0001 	mvneq.w	r0, #1
}
 8007b2c:	4770      	bx	lr

08007b2e <temp_stm32_close>:
static int temp_stm32_close(struct os_dev *dev0) {
 8007b2e:	b510      	push	{r4, lr}
 8007b30:	4604      	mov	r4, r0
    if (dev->adc) {
 8007b32:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
 8007b36:	b120      	cbz	r0, 8007b42 <temp_stm32_close+0x14>
        os_dev_close((struct os_dev *) dev->adc);
 8007b38:	f7fe fb1d 	bl	8006176 <os_dev_close>
        dev->adc = NULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
}
 8007b42:	2000      	movs	r0, #0
 8007b44:	bd10      	pop	{r4, pc}
	...

08007b48 <temp_stm32_open>:
static int temp_stm32_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 8007b48:	b510      	push	{r4, lr}
    dev = (struct temp_stm32 *) dev0;  assert(dev);  
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	b928      	cbnz	r0, 8007b5a <temp_stm32_open+0x12>
    assert(rc == 0);
 8007b4e:	2300      	movs	r3, #0
 8007b50:	461a      	mov	r2, r3
 8007b52:	4619      	mov	r1, r3
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe f863 	bl	8005c20 <__assert_func>
    cfg = &dev->cfg; assert(cfg); assert(cfg->adc_channel);  assert(cfg->adc_channel_cfg);  assert(cfg->adc_dev_name);
 8007b5a:	f890 30bc 	ldrb.w	r3, [r0, #188]	; 0xbc
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0f5      	beq.n	8007b4e <temp_stm32_open+0x6>
 8007b62:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0f1      	beq.n	8007b4e <temp_stm32_open+0x6>
 8007b6a:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d0ed      	beq.n	8007b4e <temp_stm32_open+0x6>
    dev->adc = (struct adc_dev *) os_dev_open(cfg->adc_dev_name, timeout, cfg->adc_open_arg);
 8007b72:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
 8007b76:	f7fe fadd 	bl	8006134 <os_dev_open>
 8007b7a:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    assert(dev->adc);
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d0e5      	beq.n	8007b4e <temp_stm32_open+0x6>
    console_printf("ADC open ch 16\n");  ////
 8007b82:	480a      	ldr	r0, [pc, #40]	; (8007bac <temp_stm32_open+0x64>)
 8007b84:	f7fc fa98 	bl	80040b8 <console_printf>
    rc = adc_chan_config(dev->adc, cfg->adc_channel, cfg->adc_channel_cfg);
 8007b88:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8007b8c:	f894 10bc 	ldrb.w	r1, [r4, #188]	; 0xbc
 8007b90:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8007b94:	f000 fcbe 	bl	8008514 <adc_chan_config>
    if (rc) { 
 8007b98:	b130      	cbz	r0, 8007ba8 <temp_stm32_open+0x60>
        if (dev->adc) { os_dev_close((struct os_dev *) dev->adc); }
 8007b9a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d0d5      	beq.n	8007b4e <temp_stm32_open+0x6>
 8007ba2:	f7fe fae8 	bl	8006176 <os_dev_close>
 8007ba6:	e7d2      	b.n	8007b4e <temp_stm32_open+0x6>
}
 8007ba8:	bd10      	pop	{r4, pc}
 8007baa:	bf00      	nop
 8007bac:	0800e2f7 	.word	0x0800e2f7

08007bb0 <temp_stm32_default_cfg>:
int temp_stm32_default_cfg(struct temp_stm32_cfg *cfg) {
 8007bb0:	4603      	mov	r3, r0
    cfg->adc_dev_name    = STM32F1_ADC1_DEVICE;     //  For STM32F1: adc1
 8007bb2:	4a08      	ldr	r2, [pc, #32]	; (8007bd4 <temp_stm32_default_cfg+0x24>)
    memset(cfg, 0, sizeof(struct temp_stm32_cfg));  //  Zero the entire object.
 8007bb4:	2000      	movs	r0, #0
    cfg->adc_dev_name    = STM32F1_ADC1_DEVICE;     //  For STM32F1: adc1
 8007bb6:	609a      	str	r2, [r3, #8]
    cfg->adc_channel     = ADC_CHANNEL_TEMPSENSOR;  //  For STM32F1: 16
 8007bb8:	2210      	movs	r2, #16
int temp_stm32_default_cfg(struct temp_stm32_cfg *cfg) {
 8007bba:	b530      	push	{r4, r5, lr}
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
 8007bbc:	f04f 34ff 	mov.w	r4, #4294967295
 8007bc0:	2500      	movs	r5, #0
    memset(cfg, 0, sizeof(struct temp_stm32_cfg));  //  Zero the entire object.
 8007bc2:	60d8      	str	r0, [r3, #12]
    cfg->adc_channel     = ADC_CHANNEL_TEMPSENSOR;  //  For STM32F1: 16
 8007bc4:	731a      	strb	r2, [r3, #12]
    cfg->adc_channel_cfg = &temp_channel_config;    //  Configure the temperature channel.
 8007bc6:	4a04      	ldr	r2, [pc, #16]	; (8007bd8 <temp_stm32_default_cfg+0x28>)
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
 8007bc8:	e9c3 4500 	strd	r4, r5, [r3]
    cfg->adc_open_arg    = NULL;
 8007bcc:	6118      	str	r0, [r3, #16]
    cfg->adc_channel_cfg = &temp_channel_config;    //  Configure the temperature channel.
 8007bce:	615a      	str	r2, [r3, #20]
}
 8007bd0:	bd30      	pop	{r4, r5, pc}
 8007bd2:	bf00      	nop
 8007bd4:	0800e2d8 	.word	0x0800e2d8
 8007bd8:	200001c8 	.word	0x200001c8

08007bdc <temp_stm32_init>:
int temp_stm32_init(struct os_dev *dev0, void *arg) {
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	4604      	mov	r4, r0
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 8007be0:	460d      	mov	r5, r1
 8007be2:	b341      	cbz	r1, 8007c36 <temp_stm32_init+0x5a>
 8007be4:	b338      	cbz	r0, 8007c36 <temp_stm32_init+0x5a>
    dev->adc = NULL;
 8007be6:	2300      	movs	r3, #0
    rc = temp_stm32_default_cfg(&dev->cfg);
 8007be8:	30b0      	adds	r0, #176	; 0xb0
    dev->adc = NULL;
 8007bea:	61c3      	str	r3, [r0, #28]
    rc = temp_stm32_default_cfg(&dev->cfg);
 8007bec:	f7ff ffe0 	bl	8007bb0 <temp_stm32_default_cfg>
    if (rc) { goto err; }
 8007bf0:	bb00      	cbnz	r0, 8007c34 <temp_stm32_init+0x58>
    sensor = &dev->sensor;
 8007bf2:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f7fd fe5c 	bl	80058b6 <sensor_init>
    if (rc != 0) { goto err; }
 8007bfe:	b9c8      	cbnz	r0, 8007c34 <temp_stm32_init+0x58>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
 8007c00:	4b0e      	ldr	r3, [pc, #56]	; (8007c3c <temp_stm32_init+0x60>)
    sensor->s_types = type;
 8007c02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    sensor->s_funcs = driver;
 8007c06:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
 8007c08:	2300      	movs	r3, #0
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 8007c0a:	4629      	mov	r1, r5
    sensor->s_types = type;
 8007c0c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 8007c10:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8007c14:	f105 0214 	add.w	r2, r5, #20
 8007c18:	f851 0b04 	ldr.w	r0, [r1], #4
 8007c1c:	4291      	cmp	r1, r2
 8007c1e:	f843 0b04 	str.w	r0, [r3], #4
 8007c22:	d1f9      	bne.n	8007c18 <temp_stm32_init+0x3c>
    rc = sensor_mgr_register(sensor);
 8007c24:	4630      	mov	r0, r6
 8007c26:	f7fd fe31 	bl	800588c <sensor_mgr_register>
    if (rc != 0) { goto err; }
 8007c2a:	b918      	cbnz	r0, 8007c34 <temp_stm32_init+0x58>
    OS_DEV_SETHANDLERS(dev0, temp_stm32_open, temp_stm32_close);
 8007c2c:	4b04      	ldr	r3, [pc, #16]	; (8007c40 <temp_stm32_init+0x64>)
 8007c2e:	6023      	str	r3, [r4, #0]
 8007c30:	4b04      	ldr	r3, [pc, #16]	; (8007c44 <temp_stm32_init+0x68>)
 8007c32:	60e3      	str	r3, [r4, #12]
}
 8007c34:	bd70      	pop	{r4, r5, r6, pc}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 8007c36:	f06f 0008 	mvn.w	r0, #8
 8007c3a:	e7fb      	b.n	8007c34 <temp_stm32_init+0x58>
 8007c3c:	0800e2b0 	.word	0x0800e2b0
 8007c40:	08007b49 	.word	0x08007b49
 8007c44:	08007b2f 	.word	0x08007b2f

08007c48 <temp_stm32_get_raw_temperature>:
int temp_stm32_get_raw_temperature(struct temp_stm32 *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
 8007c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c4c:	4680      	mov	r8, r0
    console_printf("STM read int temp sensor\n");  ////
 8007c4e:	4820      	ldr	r0, [pc, #128]	; (8007cd0 <temp_stm32_get_raw_temperature+0x88>)
int temp_stm32_get_raw_temperature(struct temp_stm32 *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
 8007c50:	4699      	mov	r9, r3
 8007c52:	468a      	mov	sl, r1
 8007c54:	4617      	mov	r7, r2
    console_printf("STM read int temp sensor\n");  ////
 8007c56:	f7fc fa2f 	bl	80040b8 <console_printf>
    assert(dev->adc);  assert(temp_sum);
 8007c5a:	f8d8 30cc 	ldr.w	r3, [r8, #204]	; 0xcc
 8007c5e:	b92b      	cbnz	r3, 8007c6c <temp_stm32_get_raw_temperature+0x24>
 8007c60:	2300      	movs	r3, #0
 8007c62:	461a      	mov	r2, r3
 8007c64:	4619      	mov	r1, r3
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fd ffda 	bl	8005c20 <__assert_func>
 8007c6c:	2f00      	cmp	r7, #0
 8007c6e:	d0f7      	beq.n	8007c60 <temp_stm32_get_raw_temperature+0x18>
    *temp_sum = 0;
 8007c70:	2400      	movs	r4, #0
        rawtemp = -1;
 8007c72:	f04f 3bff 	mov.w	fp, #4294967295
    int lasttemp = 0;      //  Previous raw temperature
 8007c76:	4625      	mov	r5, r4
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 8007c78:	4626      	mov	r6, r4
    *temp_sum = 0;
 8007c7a:	603c      	str	r4, [r7, #0]
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 8007c7c:	4556      	cmp	r6, sl
 8007c7e:	db03      	blt.n	8007c88 <temp_stm32_get_raw_temperature+0x40>
}
 8007c80:	2000      	movs	r0, #0
 8007c82:	b003      	add	sp, #12
 8007c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = adc_read_channel(dev->adc, ADC_CHANNEL_TEMPSENSOR, &rawtemp);
 8007c88:	f8d8 00cc 	ldr.w	r0, [r8, #204]	; 0xcc
        rawtemp = -1;
 8007c8c:	f8cd b004 	str.w	fp, [sp, #4]
 * @return 0 on success, non-zero error code on failure
 */
static inline int
adc_read_channel(struct adc_dev *dev, uint8_t ch, int *result)
{
    return (dev->ad_funcs->af_read_channel(dev, ch, result));
 8007c90:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007c92:	aa01      	add	r2, sp, #4
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	2110      	movs	r1, #16
 8007c98:	4798      	blx	r3
        assert(rc == 0);
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d1e0      	bne.n	8007c60 <temp_stm32_get_raw_temperature+0x18>
        assert(rawtemp > 0);  //  If equals 0, it means we haven't sampled any values.  Check the above note.
 8007c9e:	9b01      	ldr	r3, [sp, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	dddd      	ble.n	8007c60 <temp_stm32_get_raw_temperature+0x18>
        uint8_t diff = (rawtemp - lasttemp) & 0xf;  //  Delta between this and last reading, keeping lower 4 bits.
 8007ca4:	1b5d      	subs	r5, r3, r5
        if (i % 2 == 1) {
 8007ca6:	07f2      	lsls	r2, r6, #31
        uint8_t diff = (rawtemp - lasttemp) & 0xf;  //  Delta between this and last reading, keeping lower 4 bits.
 8007ca8:	f005 050f 	and.w	r5, r5, #15
        if (i % 2 == 1) {
 8007cac:	d508      	bpl.n	8007cc0 <temp_stm32_get_raw_temperature+0x78>
            if (temp_diff) { temp_diff[i2] = b; }  //  Save the combined delta into temp_diff as entropy.
 8007cae:	f1b9 0f00 	cmp.w	r9, #0
 8007cb2:	d005      	beq.n	8007cc0 <temp_stm32_get_raw_temperature+0x78>
 8007cb4:	f3c6 0247 	ubfx	r2, r6, #1, #8
            uint8_t b = diff + (lastdiff << 4);    //  Combine current delta (4 bits) and previous delta (4 bits) to make 8 bits.
 8007cb8:	eb05 1404 	add.w	r4, r5, r4, lsl #4
            if (temp_diff) { temp_diff[i2] = b; }  //  Save the combined delta into temp_diff as entropy.
 8007cbc:	f809 4002 	strb.w	r4, [r9, r2]
        *temp_sum += rawtemp;  //  Accumulate the raw temperature.
 8007cc0:	683a      	ldr	r2, [r7, #0]
        lastdiff = diff;
 8007cc2:	462c      	mov	r4, r5
        *temp_sum += rawtemp;  //  Accumulate the raw temperature.
 8007cc4:	441a      	add	r2, r3
 8007cc6:	603a      	str	r2, [r7, #0]
    for (i = 0; i < num_readings; i++) {  //  For each sample to be read...
 8007cc8:	3601      	adds	r6, #1
        lastdiff = diff;
 8007cca:	461d      	mov	r5, r3
 8007ccc:	e7d6      	b.n	8007c7c <temp_stm32_get_raw_temperature+0x34>
 8007cce:	bf00      	nop
 8007cd0:	0800e2dd 	.word	0x0800e2dd

08007cd4 <temp_stm32_sensor_read>:
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 8007cd4:	2100      	movs	r1, #0
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 8007cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd8:	4607      	mov	r7, r0
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 8007cda:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 8007cde:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 8007ce0:	ea50 0301 	orrs.w	r3, r0, r1
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 8007ce4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 8007ce6:	d032      	beq.n	8007d4e <temp_stm32_sensor_read+0x7a>
    dev = (struct temp_stm32 *) SENSOR_GET_DEVICE(sensor); assert(dev);
 8007ce8:	683d      	ldr	r5, [r7, #0]
 8007cea:	b92d      	cbnz	r5, 8007cf8 <temp_stm32_sensor_read+0x24>
 8007cec:	462b      	mov	r3, r5
 8007cee:	462a      	mov	r2, r5
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f7fd ff94 	bl	8005c20 <__assert_func>
        rc = temp_stm32_open((struct os_dev *) dev, 0, NULL);
 8007cf8:	2200      	movs	r2, #0
    rawtemp = -1;
 8007cfa:	f04f 33ff 	mov.w	r3, #4294967295
        rc = temp_stm32_open((struct os_dev *) dev, 0, NULL);
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4628      	mov	r0, r5
    rawtemp = -1;
 8007d02:	9303      	str	r3, [sp, #12]
        rc = temp_stm32_open((struct os_dev *) dev, 0, NULL);
 8007d04:	f7ff ff20 	bl	8007b48 <temp_stm32_open>
        if (rc) { goto err; }
 8007d08:	4604      	mov	r4, r0
 8007d0a:	b9e8      	cbnz	r0, 8007d48 <temp_stm32_sensor_read+0x74>
        rc = temp_stm32_get_raw_temperature(dev, 1, &rawtemp, NULL);
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	aa03      	add	r2, sp, #12
 8007d10:	2101      	movs	r1, #1
 8007d12:	4628      	mov	r0, r5
 8007d14:	f7ff ff98 	bl	8007c48 <temp_stm32_get_raw_temperature>
 8007d18:	4604      	mov	r4, r0
        temp_stm32_close((struct os_dev *) dev);
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f7ff ff07 	bl	8007b2e <temp_stm32_close>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
 8007d20:	b994      	cbnz	r4, 8007d48 <temp_stm32_sensor_read+0x74>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
 8007d22:	9b03      	ldr	r3, [sp, #12]
 8007d24:	9304      	str	r3, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
 8007d26:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8007d2a:	f043 0301 	orr.w	r3, r3, #1
 8007d2e:	f88d 3014 	strb.w	r3, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
 8007d32:	b14e      	cbz	r6, 8007d48 <temp_stm32_sensor_read+0x74>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
 8007d34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007d38:	2300      	movs	r3, #0
 8007d3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d3c:	e9cd 2300 	strd	r2, r3, [sp]
 8007d40:	4638      	mov	r0, r7
 8007d42:	aa04      	add	r2, sp, #16
 8007d44:	47b0      	blx	r6
 8007d46:	4604      	mov	r4, r0
}
 8007d48:	4620      	mov	r0, r4
 8007d4a:	b007      	add	sp, #28
 8007d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 8007d4e:	f06f 0401 	mvn.w	r4, #1
 8007d52:	e7f9      	b.n	8007d48 <temp_stm32_sensor_read+0x74>

08007d54 <temp_stm32_config>:
 * @param Sensor device temp_stm32 structure
 * @param Sensor device temp_stm32_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stm32_config(struct temp_stm32 *dev, struct temp_stm32_cfg *cfg) {
 8007d54:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 8007d56:	f110 0370 	adds.w	r3, r0, #112	; 0x70
 8007d5a:	d104      	bne.n	8007d66 <temp_stm32_config+0x12>
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	4619      	mov	r1, r3
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fd ff5d 	bl	8005c20 <__assert_func>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
 8007d66:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
 8007d6a:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
 8007d6e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8007d72:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
 8007d76:	2000      	movs	r0, #0
 8007d78:	bd08      	pop	{r3, pc}

08007d7a <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
 8007d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d7c:	460c      	mov	r4, r1
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
 8007d7e:	b29e      	uxth	r6, r3
{
 8007d80:	9d08      	ldr	r5, [sp, #32]
    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
 8007d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
 8007d84:	4617      	mov	r7, r2
    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	462a      	mov	r2, r5
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7fe fcca 	bl	8006728 <os_mempool_init>
    if (rc != 0) {
 8007d94:	b940      	cbnz	r0, 8007da8 <mem_init_mbuf_pool+0x2e>
        return rc;
    }

    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
 8007d96:	4633      	mov	r3, r6
 8007d98:	4621      	mov	r1, r4
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	b2aa      	uxth	r2, r5
    if (rc != 0) {
        return rc;
    }

    return 0;
}
 8007d9e:	b003      	add	sp, #12
 8007da0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
 8007da4:	f7fe bb0c 	b.w	80063c0 <os_mbuf_pool_init>
}
 8007da8:	b003      	add	sp, #12
 8007daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dac <sysinit_app>:
void bc95g_create(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
 8007dac:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
 8007dae:	f7fe f87f 	bl	8005eb0 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
 8007db2:	f003 f815 	bl	800ade0 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
 8007db6:	f7fc f95b 	bl	8004070 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
 8007dba:	f003 f93f 	bl	800b03c <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
 8007dbe:	f003 f865 	bl	800ae8c <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
 8007dc2:	f7fd f9c3 	bl	800514c <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
 8007dc6:	f002 ffd5 	bl	800ad74 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
 8007dca:	f002 ffd4 	bl	800ad76 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
 8007dce:	f002 ffd3 	bl	800ad78 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
 8007dd2:	f002 ffd2 	bl	800ad7a <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
 8007dd6:	f002 ffd1 	bl	800ad7c <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
 8007dda:	f001 ff4a 	bl	8009c72 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
 8007dde:	f7fd fc91 	bl	8005704 <sensor_pkg_init>

    /*** Stage 610 */
    /* 610.0: stm32f1_adc_create (libs/adc_stm32f1) */
    stm32f1_adc_create();
 8007de2:	f001 ff47 	bl	8009c74 <stm32f1_adc_create>

    /*** Stage 620 */
    /* 620.0: temp_stm32_create (libs/temp_stm32) */
    temp_stm32_create();
 8007de6:	f002 ff89 	bl	800acfc <temp_stm32_create>

    /*** Stage 630 */
    /* 630.0: hmac_prng_init (libs/hmac_prng) */
    hmac_prng_init();
 8007dea:	f7ff fd95 	bl	8007918 <hmac_prng_init>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
 8007dee:	f7fc fccb 	bl	8004788 <sensor_network_init>

    /*** Stage 650 */
    /* 650.0: bc95g_create (libs/bc95g) */
    bc95g_create();
 8007df2:	f002 f903 	bl	8009ffc <bc95g_create>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
}
 8007df6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    init_sensor_coap();
 8007dfa:	f7fc b9b3 	b.w	8004164 <init_sensor_coap>

08007dfe <update>:

/*
 * Assumes: prng != NULL, e != NULL, len >= 0.
 */
static void update(TCHmacPrng_t prng, const uint8_t *e, unsigned int len)
{
 8007dfe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e02:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
 8007e04:	2300      	movs	r3, #0
	const uint8_t separator1 = 0x01;
 8007e06:	2701      	movs	r7, #1
{
 8007e08:	4688      	mov	r8, r1
 8007e0a:	4691      	mov	r9, r2

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007e0c:	f504 7588 	add.w	r5, r4, #272	; 0x110
	const uint8_t separator0 = 0x00;
 8007e10:	f88d 3006 	strb.w	r3, [sp, #6]
	const uint8_t separator1 = 0x01;
 8007e14:	f88d 7007 	strb.w	r7, [sp, #7]
	(void)tc_hmac_init(&prng->h);
 8007e18:	f000 f93d 	bl	8008096 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	2220      	movs	r2, #32
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 f945 	bl	80080b0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
 8007e26:	463a      	mov	r2, r7
 8007e28:	f10d 0106 	add.w	r1, sp, #6
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f000 f93f 	bl	80080b0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 8007e32:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
	(void)tc_hmac_update(&prng->h, e, len);
 8007e36:	464a      	mov	r2, r9
 8007e38:	4641      	mov	r1, r8
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 f938 	bl	80080b0 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 8007e40:	4622      	mov	r2, r4
 8007e42:	2120      	movs	r1, #32
 8007e44:	4630      	mov	r0, r6
 8007e46:	f000 f939 	bl	80080bc <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f000 f8e3 	bl	800801a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 8007e54:	4620      	mov	r0, r4
 8007e56:	f000 f91e 	bl	8008096 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f000 f926 	bl	80080b0 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8007e64:	4622      	mov	r2, r4
 8007e66:	2120      	movs	r1, #32
 8007e68:	4628      	mov	r0, r5
 8007e6a:	f000 f927 	bl	80080bc <tc_hmac_final>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 f911 	bl	8008096 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007e74:	4629      	mov	r1, r5
 8007e76:	2220      	movs	r2, #32
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 f919 	bl	80080b0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
 8007e7e:	463a      	mov	r2, r7
 8007e80:	f10d 0107 	add.w	r1, sp, #7
 8007e84:	4620      	mov	r0, r4
 8007e86:	f000 f913 	bl	80080b0 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, e, len);
 8007e8a:	464a      	mov	r2, r9
 8007e8c:	4641      	mov	r1, r8
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 f90e 	bl	80080b0 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
 8007e94:	4622      	mov	r2, r4
 8007e96:	2120      	movs	r1, #32
 8007e98:	4630      	mov	r0, r6
 8007e9a:	f000 f90f 	bl	80080bc <tc_hmac_final>
	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 f8b9 	bl	800801a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f000 f8f4 	bl	8008096 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007eae:	4629      	mov	r1, r5
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 f8fc 	bl	80080b0 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8007eb8:	4622      	mov	r2, r4
 8007eba:	2120      	movs	r1, #32
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 f8fd 	bl	80080bc <tc_hmac_final>
}
 8007ec2:	b003      	add	sp, #12
 8007ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007ec8 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eca:	460c      	mov	r4, r1
 8007ecc:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 8007ece:	4605      	mov	r5, r0
 8007ed0:	b1d8      	cbz	r0, 8007f0a <tc_hmac_prng_init+0x42>
	    personalization == (uint8_t *) 0 ||
 8007ed2:	b1d9      	cbz	r1, 8007f0c <tc_hmac_prng_init+0x44>
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
 8007ed4:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
 8007ed8:	2220      	movs	r2, #32
 8007eda:	2100      	movs	r1, #0
 8007edc:	4630      	mov	r0, r6
 8007ede:	f000 f87d 	bl	8007fdc <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	f505 7088 	add.w	r0, r5, #272	; 0x110
 8007eea:	f000 f877 	bl	8007fdc <_set>
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
 8007eee:	2220      	movs	r2, #32
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f000 f891 	bl	800801a <tc_hmac_set_key>
	/* update assumes SOME key has been configured into HMAC */

	update(prng, personalization, plen);
 8007ef8:	4628      	mov	r0, r5
 8007efa:	463a      	mov	r2, r7
 8007efc:	4621      	mov	r1, r4
 8007efe:	f7ff ff7e 	bl	8007dfe <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
 8007f02:	2300      	movs	r3, #0

	return TC_CRYPTO_SUCCESS;
 8007f04:	2001      	movs	r0, #1
	prng->countdown = 0;
 8007f06:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
 8007f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	e7fc      	b.n	8007f0a <tc_hmac_prng_init+0x42>

08007f10 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
 8007f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f12:	9c06      	ldr	r4, [sp, #24]
 8007f14:	461f      	mov	r7, r3

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
 8007f16:	4605      	mov	r5, r0
 8007f18:	b188      	cbz	r0, 8007f3e <tc_hmac_prng_reseed+0x2e>
 8007f1a:	b181      	cbz	r1, 8007f3e <tc_hmac_prng_reseed+0x2e>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
 8007f1c:	2a1f      	cmp	r2, #31
 8007f1e:	d90e      	bls.n	8007f3e <tc_hmac_prng_reseed+0x2e>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
 8007f20:	b12b      	cbz	r3, 8007f2e <tc_hmac_prng_reseed+0x1e>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
 8007f22:	b174      	cbz	r4, 8007f42 <tc_hmac_prng_reseed+0x32>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
		/* call update for the seed and additional_input */
		update(prng, seed, seedlen);
 8007f24:	f7ff ff6b 	bl	8007dfe <update>
		update(prng, additional_input, additionallen);
 8007f28:	4622      	mov	r2, r4
 8007f2a:	4639      	mov	r1, r7
 8007f2c:	4628      	mov	r0, r5
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen);
 8007f2e:	f7ff ff66 	bl	8007dfe <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
 8007f32:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
 8007f36:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
 8007f38:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
 8007f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 8007f3e:	2000      	movs	r0, #0
 8007f40:	e7fc      	b.n	8007f3c <tc_hmac_prng_reseed+0x2c>
 8007f42:	4620      	mov	r0, r4
 8007f44:	e7fa      	b.n	8007f3c <tc_hmac_prng_reseed+0x2c>

08007f46 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
 8007f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4a:	460d      	mov	r5, r1
 8007f4c:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
 8007f4e:	4606      	mov	r6, r0
 8007f50:	b390      	cbz	r0, 8007fb8 <tc_hmac_prng_generate+0x72>
 8007f52:	b38a      	cbz	r2, 8007fb8 <tc_hmac_prng_generate+0x72>
	    prng == (TCHmacPrng_t) 0 ||
 8007f54:	1e4b      	subs	r3, r1, #1
 8007f56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007f5a:	d22d      	bcs.n	8007fb8 <tc_hmac_prng_generate+0x72>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
 8007f5c:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
 8007f60:	b363      	cbz	r3, 8007fbc <tc_hmac_prng_generate+0x76>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
 8007f62:	3b01      	subs	r3, #1
 8007f64:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007f68:	f502 7788 	add.w	r7, r2, #272	; 0x110
		(void)tc_hmac_init(&prng->h);
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f000 f892 	bl	8008096 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
 8007f72:	2220      	movs	r2, #32
 8007f74:	4639      	mov	r1, r7
 8007f76:	4620      	mov	r0, r4
 8007f78:	f000 f89a 	bl	80080b0 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
 8007f7c:	4622      	mov	r2, r4
 8007f7e:	2120      	movs	r1, #32
 8007f80:	4638      	mov	r0, r7
 8007f82:	f000 f89b 	bl	80080bc <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
 8007f86:	2d20      	cmp	r5, #32
 8007f88:	46a8      	mov	r8, r5
 8007f8a:	bf28      	it	cs
 8007f8c:	f04f 0820 	movcs.w	r8, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
 8007f90:	4630      	mov	r0, r6
 8007f92:	4643      	mov	r3, r8
 8007f94:	463a      	mov	r2, r7
 8007f96:	4641      	mov	r1, r8
 8007f98:	f000 f813 	bl	8007fc2 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
 8007f9c:	2d20      	cmp	r5, #32
 8007f9e:	bf38      	it	cc
 8007fa0:	2520      	movcc	r5, #32
	while (outlen != 0) {
 8007fa2:	3d20      	subs	r5, #32
		out += bufferlen;
 8007fa4:	4446      	add	r6, r8
	while (outlen != 0) {
 8007fa6:	d1e1      	bne.n	8007f6c <tc_hmac_prng_generate+0x26>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, prng->v, TC_SHA256_DIGEST_SIZE);
 8007fa8:	4620      	mov	r0, r4
 8007faa:	2220      	movs	r2, #32
 8007fac:	4639      	mov	r1, r7
 8007fae:	f7ff ff26 	bl	8007dfe <update>

	return TC_CRYPTO_SUCCESS;
 8007fb2:	2001      	movs	r0, #1
}
 8007fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
 8007fb8:	2000      	movs	r0, #0
 8007fba:	e7fb      	b.n	8007fb4 <tc_hmac_prng_generate+0x6e>
		return TC_HMAC_PRNG_RESEED_REQ;
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc0:	e7f8      	b.n	8007fb4 <tc_hmac_prng_generate+0x6e>

08007fc2 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
 8007fc2:	428b      	cmp	r3, r1
{
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4615      	mov	r5, r2
 8007fc8:	461c      	mov	r4, r3
	if (from_len <= to_len) {
 8007fca:	d805      	bhi.n	8007fd8 <_copy+0x16>
		(void)memcpy(to, from, from_len);
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4629      	mov	r1, r5
 8007fd0:	f7ff f9aa 	bl	8007328 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
 8007fd8:	2400      	movs	r4, #0
 8007fda:	e7fb      	b.n	8007fd4 <_copy+0x12>

08007fdc <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
 8007fdc:	f7ff b9b1 	b.w	8007342 <memset>

08007fe0 <rekey>:
{
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
 8007fe0:	4603      	mov	r3, r0
{
 8007fe2:	b510      	push	{r4, lr}
 8007fe4:	3901      	subs	r1, #1
 8007fe6:	4402      	add	r2, r0
	for (i = 0; i < key_size; ++i) {
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d105      	bne.n	8007ff8 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 8007fec:	2136      	movs	r1, #54	; 0x36
 8007fee:	245c      	movs	r4, #92	; 0x5c
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
 8007ff0:	1a1a      	subs	r2, r3, r0
 8007ff2:	2a3f      	cmp	r2, #63	; 0x3f
 8007ff4:	d90c      	bls.n	8008010 <rekey+0x30>
	}
}
 8007ff6:	bd10      	pop	{r4, pc}
		key[i] = inner_pad ^ new_key[i];
 8007ff8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007ffc:	f084 0436 	eor.w	r4, r4, #54	; 0x36
 8008000:	f803 4b01 	strb.w	r4, [r3], #1
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
 8008004:	780c      	ldrb	r4, [r1, #0]
 8008006:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
 800800a:	f883 403f 	strb.w	r4, [r3, #63]	; 0x3f
 800800e:	e7eb      	b.n	8007fe8 <rekey+0x8>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
 8008010:	f803 1b01 	strb.w	r1, [r3], #1
 8008014:	f883 403f 	strb.w	r4, [r3, #63]	; 0x3f
 8008018:	e7ea      	b.n	8007ff0 <rekey+0x10>

0800801a <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
 800801a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800801e:	b0bc      	sub	sp, #240	; 0xf0
 8008020:	460e      	mov	r6, r1
 8008022:	af00      	add	r7, sp, #0
 8008024:	4614      	mov	r4, r2

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0 ||
 8008026:	4605      	mov	r5, r0
 8008028:	b1e8      	cbz	r0, 8008066 <tc_hmac_set_key+0x4c>
 800802a:	b381      	cbz	r1, 800808e <tc_hmac_set_key+0x74>
	    key == (const uint8_t *) 0 ||
 800802c:	b38a      	cbz	r2, 8008092 <tc_hmac_set_key+0x78>
	    key_size == 0) {
		return TC_CRYPTO_FAIL;
	}

	const uint8_t dummy_key[key_size];
 800802e:	1dd3      	adds	r3, r2, #7
 8008030:	f023 0307 	bic.w	r3, r3, #7
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 8008034:	2a40      	cmp	r2, #64	; 0x40
	const uint8_t dummy_key[key_size];
 8008036:	ebad 0d03 	sub.w	sp, sp, r3
 800803a:	f100 0870 	add.w	r8, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
 800803e:	d816      	bhi.n	800806e <tc_hmac_set_key+0x54>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
 8008040:	4638      	mov	r0, r7
 8008042:	f000 f947 	bl	80082d4 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
 8008046:	4622      	mov	r2, r4
 8008048:	4669      	mov	r1, sp
 800804a:	4638      	mov	r0, r7
 800804c:	f000 f96e 	bl	800832c <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
 8008050:	4639      	mov	r1, r7
 8008052:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8008056:	f000 f995 	bl	8008384 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
 800805a:	4622      	mov	r2, r4
 800805c:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
 800805e:	4640      	mov	r0, r8
 8008060:	f7ff ffbe 	bl	8007fe0 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
 8008064:	2001      	movs	r0, #1
}
 8008066:	37f0      	adds	r7, #240	; 0xf0
 8008068:	46bd      	mov	sp, r7
 800806a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(void)tc_sha256_init(&ctx->hash_state);
 800806e:	f000 f931 	bl	80082d4 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 8008072:	4622      	mov	r2, r4
 8008074:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 8008076:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
 800807a:	4628      	mov	r0, r5
 800807c:	f000 f956 	bl	800832c <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
 8008080:	4629      	mov	r1, r5
 8008082:	4620      	mov	r0, r4
 8008084:	f000 f97e 	bl	8008384 <tc_sha256_final>
		rekey(ctx->key,
 8008088:	2220      	movs	r2, #32
 800808a:	4621      	mov	r1, r4
 800808c:	e7e7      	b.n	800805e <tc_hmac_set_key+0x44>
		return TC_CRYPTO_FAIL;
 800808e:	4608      	mov	r0, r1
 8008090:	e7e9      	b.n	8008066 <tc_hmac_set_key+0x4c>
 8008092:	4610      	mov	r0, r2
 8008094:	e7e7      	b.n	8008066 <tc_hmac_set_key+0x4c>

08008096 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
 8008096:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 8008098:	4604      	mov	r4, r0
 800809a:	b140      	cbz	r0, 80080ae <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
 800809c:	f000 f91a 	bl	80082d4 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
 80080a0:	2240      	movs	r2, #64	; 0x40
 80080a2:	f104 0170 	add.w	r1, r4, #112	; 0x70
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 f940 	bl	800832c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 80080ac:	2001      	movs	r0, #1
}
 80080ae:	bd10      	pop	{r4, pc}

080080b0 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
 80080b0:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
 80080b2:	b110      	cbz	r0, 80080ba <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
 80080b4:	f000 f93a 	bl	800832c <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
 80080b8:	2001      	movs	r0, #1
}
 80080ba:	bd08      	pop	{r3, pc}

080080bc <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
 80080bc:	b570      	push	{r4, r5, r6, lr}
 80080be:	460e      	mov	r6, r1
 80080c0:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
 80080c2:	4605      	mov	r5, r0
 80080c4:	b1f0      	cbz	r0, 8008104 <tc_hmac_final+0x48>
 80080c6:	2920      	cmp	r1, #32
 80080c8:	d11c      	bne.n	8008104 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
 80080ca:	b1ea      	cbz	r2, 8008108 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
 80080cc:	4611      	mov	r1, r2
 80080ce:	f000 f959 	bl	8008384 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 f8fe 	bl	80082d4 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
 80080d8:	2240      	movs	r2, #64	; 0x40
 80080da:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
 80080de:	4620      	mov	r0, r4
 80080e0:	f000 f924 	bl	800832c <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
 80080e4:	4632      	mov	r2, r6
 80080e6:	4629      	mov	r1, r5
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 f91f 	bl	800832c <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
 80080ee:	4621      	mov	r1, r4
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 f947 	bl	8008384 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
 80080f6:	4620      	mov	r0, r4
 80080f8:	22f0      	movs	r2, #240	; 0xf0
 80080fa:	2100      	movs	r1, #0
 80080fc:	f7ff ff6e 	bl	8007fdc <_set>

	return TC_CRYPTO_SUCCESS;
 8008100:	2001      	movs	r0, #1
}
 8008102:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
 8008104:	2000      	movs	r0, #0
 8008106:	e7fc      	b.n	8008102 <tc_hmac_final+0x46>
 8008108:	4610      	mov	r0, r2
 800810a:	e7fa      	b.n	8008102 <tc_hmac_final+0x46>

0800810c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
 800810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 8008110:	2600      	movs	r6, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8008112:	6803      	ldr	r3, [r0, #0]
{
 8008114:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8008116:	9304      	str	r3, [sp, #16]
 8008118:	6843      	ldr	r3, [r0, #4]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 800811a:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 80082d0 <compress+0x1c4>
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 800811e:	9305      	str	r3, [sp, #20]
 8008120:	6883      	ldr	r3, [r0, #8]
{
 8008122:	4689      	mov	r9, r1
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8008124:	e9dd 1504 	ldrd	r1, r5, [sp, #16]
 8008128:	9306      	str	r3, [sp, #24]
 800812a:	68c3      	ldr	r3, [r0, #12]
 800812c:	9307      	str	r3, [sp, #28]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 800812e:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
 8008130:	e9dd b706 	ldrd	fp, r7, [sp, #24]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
 8008134:	9308      	str	r3, [sp, #32]
 8008136:	6943      	ldr	r3, [r0, #20]
 8008138:	9309      	str	r3, [sp, #36]	; 0x24
 800813a:	6983      	ldr	r3, [r0, #24]
 800813c:	e9dd 2a08 	ldrd	r2, sl, [sp, #32]
 8008140:	930a      	str	r3, [sp, #40]	; 0x28
 8008142:	69c3      	ldr	r3, [r0, #28]
 8008144:	930b      	str	r3, [sp, #44]	; 0x2c
 8008146:	469e      	mov	lr, r3
 8008148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	f859 3006 	ldr.w	r3, [r9, r6]
		t1 = work_space[i] = n;
 8008150:	ac0c      	add	r4, sp, #48	; 0x30
 8008152:	ba1b      	rev	r3, r3
 8008154:	51a3      	str	r3, [r4, r6]
	return (((a) >> n) | ((a) << (32 - n)));
 8008156:	ea4f 24f2 	mov.w	r4, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 800815a:	ea84 14b2 	eor.w	r4, r4, r2, ror #6
 800815e:	ea84 6872 	eor.w	r8, r4, r2, ror #25
 8008162:	f856 400c 	ldr.w	r4, [r6, ip]
 8008166:	3604      	adds	r6, #4
 8008168:	441c      	add	r4, r3
 800816a:	9b00      	ldr	r3, [sp, #0]
 800816c:	4444      	add	r4, r8
 800816e:	ea23 0302 	bic.w	r3, r3, r2
 8008172:	ea02 080a 	and.w	r8, r2, sl
 8008176:	ea83 0308 	eor.w	r3, r3, r8
 800817a:	4423      	add	r3, r4
 800817c:	4473      	add	r3, lr
		t2 = Sigma0(a) + Maj(a, b, c);
 800817e:	ea85 040b 	eor.w	r4, r5, fp
	return (((a) >> n) | ((a) << (32 - n)));
 8008182:	ea4f 3e71 	mov.w	lr, r1, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 8008186:	ea8e 0eb1 	eor.w	lr, lr, r1, ror #2
 800818a:	400c      	ands	r4, r1
 800818c:	ea05 080b 	and.w	r8, r5, fp
 8008190:	ea84 0408 	eor.w	r4, r4, r8
 8008194:	ea8e 5eb1 	eor.w	lr, lr, r1, ror #22
 8008198:	44a6      	add	lr, r4
	for (i = 0; i < 16; ++i) {
 800819a:	2e40      	cmp	r6, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
 800819c:	eb03 0407 	add.w	r4, r3, r7
		d = c; c = b; b = a; a = t1 + t2;
 80081a0:	4473      	add	r3, lr
 80081a2:	465f      	mov	r7, fp
 80081a4:	f8dd e000 	ldr.w	lr, [sp]
	for (i = 0; i < 16; ++i) {
 80081a8:	f040 8082 	bne.w	80082b0 <compress+0x1a4>
 80081ac:	f04f 0c10 	mov.w	ip, #16
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
 80081b0:	f10c 0601 	add.w	r6, ip, #1
 80081b4:	af1c      	add	r7, sp, #112	; 0x70
 80081b6:	9603      	str	r6, [sp, #12]
 80081b8:	f006 060f 	and.w	r6, r6, #15
 80081bc:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 80081c0:	f856 6c40 	ldr.w	r6, [r6, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 80081c4:	f00c 090f 	and.w	r9, ip, #15
	return (((a) >> n) | ((a) << (32 - n)));
 80081c8:	ea4f 48b6 	mov.w	r8, r6, ror #18
		s0 = work_space[(i+1)&0x0f];
 80081cc:	9601      	str	r6, [sp, #4]
		s0 = sigma0(s0);
 80081ce:	ea88 18f6 	eor.w	r8, r8, r6, ror #7
		s1 = work_space[(i+14)&0x0f];
 80081d2:	f10c 060e 	add.w	r6, ip, #14
 80081d6:	f006 060f 	and.w	r6, r6, #15
 80081da:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 80081de:	f856 6c40 	ldr.w	r6, [r6, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 80081e2:	eb07 0989 	add.w	r9, r7, r9, lsl #2
	return (((a) >> n) | ((a) << (32 - n)));
 80081e6:	ea4f 4ef6 	mov.w	lr, r6, ror #19
		s1 = work_space[(i+14)&0x0f];
 80081ea:	9602      	str	r6, [sp, #8]
		s1 = sigma1(s1);
 80081ec:	ea8e 4e76 	eor.w	lr, lr, r6, ror #17
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 80081f0:	f10c 0609 	add.w	r6, ip, #9
 80081f4:	f006 060f 	and.w	r6, r6, #15
 80081f8:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 80081fc:	f856 6c40 	ldr.w	r6, [r6, #-64]
 8008200:	f859 7c40 	ldr.w	r7, [r9, #-64]
 8008204:	443e      	add	r6, r7
		s0 = sigma0(s0);
 8008206:	9f01      	ldr	r7, [sp, #4]
 8008208:	ea88 08d7 	eor.w	r8, r8, r7, lsr #3
		s1 = sigma1(s1);
 800820c:	9f02      	ldr	r7, [sp, #8]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 800820e:	4446      	add	r6, r8
		s1 = sigma1(s1);
 8008210:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 8008214:	4476      	add	r6, lr
	return (((a) >> n) | ((a) << (32 - n)));
 8008216:	ea4f 27f4 	mov.w	r7, r4, ror #11
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
 800821a:	f849 6c40 	str.w	r6, [r9, #-64]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 800821e:	ea04 0e02 	and.w	lr, r4, r2
 8008222:	ea87 17b4 	eor.w	r7, r7, r4, ror #6
 8008226:	ea2a 0904 	bic.w	r9, sl, r4
 800822a:	ea87 6774 	eor.w	r7, r7, r4, ror #25
 800822e:	ea89 090e 	eor.w	r9, r9, lr
 8008232:	44b9      	add	r9, r7
 8008234:	4f26      	ldr	r7, [pc, #152]	; (80082d0 <compress+0x1c4>)
 8008236:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
		t2 = Sigma0(a) + Maj(a, b, c);
 800823a:	ea81 0c05 	eor.w	ip, r1, r5
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
 800823e:	44b9      	add	r9, r7
 8008240:	9f00      	ldr	r7, [sp, #0]
 8008242:	444e      	add	r6, r9
 8008244:	4437      	add	r7, r6
 8008246:	46b8      	mov	r8, r7
		t2 = Sigma0(a) + Maj(a, b, c);
 8008248:	ea0c 0c03 	and.w	ip, ip, r3
	return (((a) >> n) | ((a) << (32 - n)));
 800824c:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
 8008250:	ea01 0605 	and.w	r6, r1, r5
 8008254:	ea8c 0606 	eor.w	r6, ip, r6
 8008258:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
 800825c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008260:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
 8008264:	443e      	add	r6, r7
	for ( ; i < 64; ++i) {
 8008266:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
 800826a:	eb08 070b 	add.w	r7, r8, fp
		d = c; c = b; b = a; a = t1 + t2;
 800826e:	eb06 0e08 	add.w	lr, r6, r8
 8008272:	46ab      	mov	fp, r5
 8008274:	f8cd a000 	str.w	sl, [sp]
	for ( ; i < 64; ++i) {
 8008278:	d122      	bne.n	80082c0 <compress+0x1b4>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
 800827a:	9e04      	ldr	r6, [sp, #16]
 800827c:	4476      	add	r6, lr
 800827e:	6006      	str	r6, [r0, #0]
 8008280:	9e05      	ldr	r6, [sp, #20]
 8008282:	441e      	add	r6, r3
 8008284:	9b06      	ldr	r3, [sp, #24]
 8008286:	6046      	str	r6, [r0, #4]
 8008288:	440b      	add	r3, r1
 800828a:	6083      	str	r3, [r0, #8]
 800828c:	9b07      	ldr	r3, [sp, #28]
 800828e:	442b      	add	r3, r5
 8008290:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
 8008292:	9b08      	ldr	r3, [sp, #32]
 8008294:	443b      	add	r3, r7
 8008296:	6103      	str	r3, [r0, #16]
 8008298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829a:	4423      	add	r3, r4
 800829c:	6143      	str	r3, [r0, #20]
 800829e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082a0:	4413      	add	r3, r2
 80082a2:	6183      	str	r3, [r0, #24]
 80082a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082a6:	4453      	add	r3, sl
 80082a8:	61c3      	str	r3, [r0, #28]
}
 80082aa:	b01d      	add	sp, #116	; 0x74
 80082ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b0:	f8cd a000 	str.w	sl, [sp]
 80082b4:	46ab      	mov	fp, r5
 80082b6:	4692      	mov	sl, r2
 80082b8:	460d      	mov	r5, r1
		h = g; g = f; f = e; e = d + t1;
 80082ba:	4622      	mov	r2, r4
		d = c; c = b; b = a; a = t1 + t2;
 80082bc:	4619      	mov	r1, r3
 80082be:	e745      	b.n	800814c <compress+0x40>
 80082c0:	4692      	mov	sl, r2
 80082c2:	460d      	mov	r5, r1
 80082c4:	4622      	mov	r2, r4
 80082c6:	4619      	mov	r1, r3
		h = g; g = f; f = e; e = d + t1;
 80082c8:	463c      	mov	r4, r7
		d = c; c = b; b = a; a = t1 + t2;
 80082ca:	4673      	mov	r3, lr
 80082cc:	e770      	b.n	80081b0 <compress+0xa4>
 80082ce:	bf00      	nop
 80082d0:	0800e308 	.word	0x0800e308

080082d4 <tc_sha256_init>:
{
 80082d4:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
 80082d6:	4604      	mov	r4, r0
 80082d8:	b1c8      	cbz	r0, 800830e <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
 80082da:	2270      	movs	r2, #112	; 0x70
 80082dc:	2100      	movs	r1, #0
 80082de:	f7ff fe7d 	bl	8007fdc <_set>
	s->iv[1] = 0xbb67ae85;
 80082e2:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <tc_sha256_init+0x3c>)
 80082e4:	4a0b      	ldr	r2, [pc, #44]	; (8008314 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
 80082e6:	490c      	ldr	r1, [pc, #48]	; (8008318 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
 80082e8:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
 80082ec:	4b0b      	ldr	r3, [pc, #44]	; (800831c <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
 80082ee:	480c      	ldr	r0, [pc, #48]	; (8008320 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
 80082f0:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
 80082f4:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <tc_sha256_init+0x50>)
 80082f6:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
 80082fa:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
 80082fc:	4b0a      	ldr	r3, [pc, #40]	; (8008328 <tc_sha256_init+0x54>)
 80082fe:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
 8008300:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
 8008304:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
 8008308:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
 800830c:	61e3      	str	r3, [r4, #28]
}
 800830e:	bd10      	pop	{r4, pc}
 8008310:	bb67ae85 	.word	0xbb67ae85
 8008314:	6a09e667 	.word	0x6a09e667
 8008318:	3c6ef372 	.word	0x3c6ef372
 800831c:	a54ff53a 	.word	0xa54ff53a
 8008320:	510e527f 	.word	0x510e527f
 8008324:	9b05688c 	.word	0x9b05688c
 8008328:	1f83d9ab 	.word	0x1f83d9ab

0800832c <tc_sha256_update>:
{
 800832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008330:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
 8008332:	4605      	mov	r5, r0
 8008334:	b110      	cbz	r0, 800833c <tc_sha256_update+0x10>
 8008336:	b319      	cbz	r1, 8008380 <tc_sha256_update+0x54>
	} else if (datalen == 0) {
 8008338:	b912      	cbnz	r2, 8008340 <tc_sha256_update+0x14>
		return TC_CRYPTO_SUCCESS;
 800833a:	2001      	movs	r0, #1
}
 800833c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			s->leftover_offset = 0;
 8008340:	f04f 0800 	mov.w	r8, #0
 8008344:	188e      	adds	r6, r1, r2
			compress(s->iv, s->leftover);
 8008346:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
 800834a:	42a6      	cmp	r6, r4
 800834c:	d0f5      	beq.n	800833a <tc_sha256_update+0xe>
		s->leftover[s->leftover_offset++] = *(data++);
 800834e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	66aa      	str	r2, [r5, #104]	; 0x68
 8008354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008358:	442b      	add	r3, r5
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 800835a:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
 800835c:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
 8008360:	d9f3      	bls.n	800834a <tc_sha256_update+0x1e>
			compress(s->iv, s->leftover);
 8008362:	4639      	mov	r1, r7
 8008364:	4628      	mov	r0, r5
 8008366:	f7ff fed1 	bl	800810c <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 800836a:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 800836e:	f512 7000 	adds.w	r0, r2, #512	; 0x200
 8008372:	f143 0100 	adc.w	r1, r3, #0
			s->leftover_offset = 0;
 8008376:	f8c5 8068 	str.w	r8, [r5, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
 800837a:	e9c5 0108 	strd	r0, r1, [r5, #32]
 800837e:	e7e4      	b.n	800834a <tc_sha256_update+0x1e>
		return TC_CRYPTO_FAIL;
 8008380:	4608      	mov	r0, r1
 8008382:	e7db      	b.n	800833c <tc_sha256_update+0x10>

08008384 <tc_sha256_final>:
{
 8008384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008386:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
 8008388:	4605      	mov	r5, r0
 800838a:	2800      	cmp	r0, #0
 800838c:	d05d      	beq.n	800844a <tc_sha256_final+0xc6>
 800838e:	2900      	cmp	r1, #0
 8008390:	d05c      	beq.n	800844c <tc_sha256_final+0xc8>
	s->bits_hashed += (s->leftover_offset << 3);
 8008392:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8008396:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008398:	00c8      	lsls	r0, r1, #3
 800839a:	1816      	adds	r6, r2, r0
 800839c:	f143 0700 	adc.w	r7, r3, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 80083a0:	2380      	movs	r3, #128	; 0x80
 80083a2:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 80083a4:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 80083a6:	4421      	add	r1, r4
	s->bits_hashed += (s->leftover_offset << 3);
 80083a8:	e9c4 6708 	strd	r6, r7, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
 80083ac:	66a0      	str	r0, [r4, #104]	; 0x68
 80083ae:	f104 0628 	add.w	r6, r4, #40	; 0x28
 80083b2:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
 80083b6:	d90b      	bls.n	80083d0 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
 80083b8:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
 80083bc:	2100      	movs	r1, #0
 80083be:	4430      	add	r0, r6
 80083c0:	f7ff fe0c 	bl	8007fdc <_set>
		compress(s->iv, s->leftover);
 80083c4:	4631      	mov	r1, r6
 80083c6:	4620      	mov	r0, r4
 80083c8:	f7ff fea0 	bl	800810c <compress>
		s->leftover_offset = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
 80083d0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80083d2:	2100      	movs	r1, #0
 80083d4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
 80083d8:	4430      	add	r0, r6
 80083da:	f7ff fdff 	bl	8007fdc <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 80083de:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 80083e2:	0a11      	lsrs	r1, r2, #8
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
 80083e4:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
 80083e8:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 80083ec:	0c11      	lsrs	r1, r2, #16
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
 80083ee:	0e12      	lsrs	r2, r2, #24
 80083f0:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 80083f4:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
 80083f6:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
 80083fa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 80083fe:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 8008400:	0e1b      	lsrs	r3, r3, #24
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
 8008402:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
 8008406:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
 800840a:	4631      	mov	r1, r6
 800840c:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
 800840e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
 8008412:	f7ff fe7b 	bl	800810c <compress>
 8008416:	1d2b      	adds	r3, r5, #4
 8008418:	1f21      	subs	r1, r4, #4
 800841a:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
 800841e:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8008422:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
 8008424:	0e15      	lsrs	r5, r2, #24
 8008426:	f803 5c08 	strb.w	r5, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
 800842a:	0c15      	lsrs	r5, r2, #16
 800842c:	f803 5c07 	strb.w	r5, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
 8008430:	0a15      	lsrs	r5, r2, #8
 8008432:	f803 5c06 	strb.w	r5, [r3, #-6]
		*digest++ = (uint8_t)(t);
 8008436:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
 800843a:	4283      	cmp	r3, r0
 800843c:	d1ef      	bne.n	800841e <tc_sha256_final+0x9a>
	_set(s, 0, sizeof(*s));
 800843e:	4620      	mov	r0, r4
 8008440:	2270      	movs	r2, #112	; 0x70
 8008442:	2100      	movs	r1, #0
 8008444:	f7ff fdca 	bl	8007fdc <_set>
	return TC_CRYPTO_SUCCESS;
 8008448:	2001      	movs	r0, #1
}
 800844a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
 800844c:	4608      	mov	r0, r1
 800844e:	e7fc      	b.n	800844a <tc_sha256_final+0xc6>

08008450 <LL_GPIO_AF_DisableRemap_USART2>:
  * @note  DISABLE: No remap (CTS/PA0, RTS/PA1, TX/PA2, RX/PA3, CK/PA4)
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_DisableRemap_USART2(void)
{
  CLEAR_BIT(AFIO->MAPR, AFIO_MAPR_USART2_REMAP);
 8008450:	4a02      	ldr	r2, [pc, #8]	; (800845c <LL_GPIO_AF_DisableRemap_USART2+0xc>)
 8008452:	6853      	ldr	r3, [r2, #4]
 8008454:	f023 0308 	bic.w	r3, r3, #8
 8008458:	6053      	str	r3, [r2, #4]
}
 800845a:	4770      	bx	lr
 800845c:	40010000 	.word	0x40010000

08008460 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id != 0) {
 8008460:	2800      	cmp	r0, #0
        return NULL;
    }
    return &stm32_flash_dev;
}
 8008462:	4802      	ldr	r0, [pc, #8]	; (800846c <hal_bsp_flash_dev+0xc>)
 8008464:	bf18      	it	ne
 8008466:	2000      	movne	r0, #0
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	0800e428 	.word	0x0800e428

08008470 <hal_bsp_init>:
    }
}

void
hal_bsp_init(void)
{
 8008470:	b530      	push	{r4, r5, lr}
 8008472:	b093      	sub	sp, #76	; 0x4c
    RCC_ClkInitTypeDef clkinitstruct = { 0 };
 8008474:	2214      	movs	r2, #20
 8008476:	2100      	movs	r1, #0
 8008478:	a803      	add	r0, sp, #12
 800847a:	f7fe ff62 	bl	8007342 <memset>
    RCC_OscInitTypeDef oscinitstruct = { 0 };
 800847e:	2220      	movs	r2, #32
 8008480:	2100      	movs	r1, #0
 8008482:	a809      	add	r0, sp, #36	; 0x24
 8008484:	f7fe ff5d 	bl	8007342 <memset>
    oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008488:	2501      	movs	r5, #1
 800848a:	2310      	movs	r3, #16
    oscinitstruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800848c:	2402      	movs	r4, #2
    oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800848e:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
    oscinitstruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8008492:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
    if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK) {
 8008496:	a808      	add	r0, sp, #32
    oscinitstruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008498:	9408      	str	r4, [sp, #32]
    oscinitstruct.PLL.PLLState = RCC_PLL_ON;
 800849a:	940f      	str	r4, [sp, #60]	; 0x3c
    oscinitstruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800849c:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCC_OscConfig(&oscinitstruct) != HAL_OK) {
 800849e:	f001 f87d 	bl	800959c <HAL_RCC_OscConfig>
 80084a2:	b128      	cbz	r0, 80084b0 <hal_bsp_init+0x40>
        assert(0);
 80084a4:	2300      	movs	r3, #0
 80084a6:	461a      	mov	r2, r3
 80084a8:	4619      	mov	r1, r3
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fd fbb8 	bl	8005c20 <__assert_func>
    clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 80084b0:	230f      	movs	r3, #15
    clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80084b2:	f44f 62a0 	mov.w	r2, #1280	; 0x500
    clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80084b6:	e9cd 3403 	strd	r3, r4, [sp, #12]
    clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80084ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
    clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80084be:	9005      	str	r0, [sp, #20]
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) {
 80084c0:	4621      	mov	r1, r4
 80084c2:	a803      	add	r0, sp, #12
    clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80084c4:	e9cd 3206 	strd	r3, r2, [sp, #24]
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) {
 80084c8:	f001 fa30 	bl	800992c <HAL_RCC_ClockConfig>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2800      	cmp	r0, #0
 80084d0:	d1e8      	bne.n	80084a4 <hal_bsp_init+0x34>
    (void)rc;

    clock_config();

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create((struct os_dev *) &hal_uart0, "uart0",
 80084d2:	4a0b      	ldr	r2, [pc, #44]	; (8008500 <hal_bsp_init+0x90>)
 80084d4:	490b      	ldr	r1, [pc, #44]	; (8008504 <hal_bsp_init+0x94>)
 80084d6:	9201      	str	r2, [sp, #4]
 80084d8:	4a0b      	ldr	r2, [pc, #44]	; (8008508 <hal_bsp_init+0x98>)
 80084da:	480c      	ldr	r0, [pc, #48]	; (800850c <hal_bsp_init+0x9c>)
 80084dc:	9200      	str	r2, [sp, #0]
 80084de:	462a      	mov	r2, r5
 80084e0:	f7fd fdbe 	bl	8006060 <os_dev_create>
      OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *)&uart_cfg[0]);
    assert(rc == 0);
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d1dd      	bne.n	80084a4 <hal_bsp_init+0x34>
#endif

#if MYNEWT_VAL(TIMER_0)
    hal_timer_init(0, TIM2);
 80084e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80084ec:	f000 f9ec 	bl	80088c8 <hal_timer_init>
#if MYNEWT_VAL(TIMER_2)
    hal_timer_init(2, TIM4);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
 80084f0:	4807      	ldr	r0, [pc, #28]	; (8008510 <hal_bsp_init+0xa0>)
 80084f2:	f7fd fd9d 	bl	8006030 <os_cputime_init>
    assert(rc == 0);
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d1d4      	bne.n	80084a4 <hal_bsp_init+0x34>
#if MYNEWT_VAL(I2C_0)
    rc = hal_i2c_init(0, &i2c_cfg0);
    assert(rc == 0);
#endif

}
 80084fa:	b013      	add	sp, #76	; 0x4c
 80084fc:	bd30      	pop	{r4, r5, pc}
 80084fe:	bf00      	nop
 8008500:	0800e410 	.word	0x0800e410
 8008504:	0800e408 	.word	0x0800e408
 8008508:	0800865d 	.word	0x0800865d
 800850c:	20002b40 	.word	0x20002b40
 8008510:	000f4240 	.word	0x000f4240

08008514 <adc_chan_config>:
 * @return 0 on success, non-zero error code on failure.
 */
int
adc_chan_config(struct adc_dev *dev, uint8_t cnum, void *data)
{
    assert(dev->ad_funcs->af_configure_channel != NULL);
 8008514:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 8008516:	b570      	push	{r4, r5, r6, lr}
    assert(dev->ad_funcs->af_configure_channel != NULL);
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	b923      	cbnz	r3, 8008526 <adc_chan_config+0x12>
 800851c:	461a      	mov	r2, r3
 800851e:	4619      	mov	r1, r3
 8008520:	4618      	mov	r0, r3
 8008522:	f7fd fb7d 	bl	8005c20 <__assert_func>

    if (cnum >= dev->ad_chan_count) {
 8008526:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008528:	42a1      	cmp	r1, r4
 800852a:	da02      	bge.n	8008532 <adc_chan_config+0x1e>
        return (EINVAL);
    }

    return (dev->ad_funcs->af_configure_channel(dev, cnum, data));
}
 800852c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return (dev->ad_funcs->af_configure_channel(dev, cnum, data));
 8008530:	4718      	bx	r3
}
 8008532:	2016      	movs	r0, #22
 8008534:	bd70      	pop	{r4, r5, r6, pc}

08008536 <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
 8008536:	b513      	push	{r0, r1, r4, lr}
    struct uart_dev *dev = (struct uart_dev *)odev;
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
 8008538:	f890 1037 	ldrb.w	r1, [r0, #55]	; 0x37
 800853c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8008540:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
    return (intptr_t)(dev->ud_priv) - 1;
 8008544:	6b84      	ldr	r4, [r0, #56]	; 0x38
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
 8008546:	9101      	str	r1, [sp, #4]
 8008548:	f890 1036 	ldrb.w	r1, [r0, #54]	; 0x36
 800854c:	9100      	str	r1, [sp, #0]
 800854e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008550:	1e60      	subs	r0, r4, #1
 8008552:	f000 fb65 	bl	8008c20 <hal_uart_config>
    if (rc) {
        return OS_EINVAL;
    }

    return OS_OK;
}
 8008556:	2800      	cmp	r0, #0
 8008558:	bf14      	ite	ne
 800855a:	2002      	movne	r0, #2
 800855c:	2000      	moveq	r0, #0
 800855e:	b002      	add	sp, #8
 8008560:	bd10      	pop	{r4, pc}

08008562 <uart_hal_close>:
    return (intptr_t)(dev->ud_priv) - 1;
 8008562:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008564:	b508      	push	{r3, lr}
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
 8008566:	3801      	subs	r0, #1
 8008568:	f000 fcb4 	bl	8008ed4 <hal_uart_close>
}
 800856c:	2800      	cmp	r0, #0
 800856e:	bf14      	ite	ne
 8008570:	2002      	movne	r0, #2
 8008572:	2000      	moveq	r0, #0
 8008574:	bd08      	pop	{r3, pc}

08008576 <uart_hal_open>:
{
 8008576:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008578:	4605      	mov	r5, r0
    assert(dev->ud_priv);
 800857a:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800857c:	4614      	mov	r4, r2
    assert(dev->ud_priv);
 800857e:	b920      	cbnz	r0, 800858a <uart_hal_open+0x14>
 8008580:	4603      	mov	r3, r0
 8008582:	4602      	mov	r2, r0
 8008584:	4601      	mov	r1, r0
 8008586:	f7fd fb4b 	bl	8005c20 <__assert_func>
    if (!uc) {
 800858a:	b912      	cbnz	r2, 8008592 <uart_hal_open+0x1c>
        return OS_EINVAL;
 800858c:	2002      	movs	r0, #2
}
 800858e:	b003      	add	sp, #12
 8008590:	bd30      	pop	{r4, r5, pc}
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
 8008592:	7eeb      	ldrb	r3, [r5, #27]
 8008594:	079b      	lsls	r3, r3, #30
 8008596:	d425      	bmi.n	80085e4 <uart_hal_open+0x6e>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
 8008598:	7913      	ldrb	r3, [r2, #4]
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
 800859a:	3801      	subs	r0, #1
    dev->ud_conf_port.uc_databits = uc->uc_databits;
 800859c:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
 80085a0:	79d3      	ldrb	r3, [r2, #7]
 80085a2:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
 80085a6:	7993      	ldrb	r3, [r2, #6]
 80085a8:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
 80085ac:	6813      	ldr	r3, [r2, #0]
 80085ae:	632b      	str	r3, [r5, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
 80085b0:	7953      	ldrb	r3, [r2, #5]
 80085b2:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
 80085b6:	6953      	ldr	r3, [r2, #20]
 80085b8:	68a1      	ldr	r1, [r4, #8]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 80085c0:	f000 facc 	bl	8008b5c <hal_uart_init_cbs>
    if (rc) {
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d1e1      	bne.n	800858c <uart_hal_open+0x16>
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
 80085c8:	79e1      	ldrb	r1, [r4, #7]
    return (intptr_t)(dev->ud_priv) - 1;
 80085ca:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
 80085cc:	9101      	str	r1, [sp, #4]
 80085ce:	79a1      	ldrb	r1, [r4, #6]
 80085d0:	7963      	ldrb	r3, [r4, #5]
 80085d2:	9100      	str	r1, [sp, #0]
 80085d4:	7922      	ldrb	r2, [r4, #4]
 80085d6:	6821      	ldr	r1, [r4, #0]
 80085d8:	3801      	subs	r0, #1
 80085da:	f000 fb21 	bl	8008c20 <hal_uart_config>
    if (rc) {
 80085de:	2800      	cmp	r0, #0
 80085e0:	d0d5      	beq.n	800858e <uart_hal_open+0x18>
 80085e2:	e7d3      	b.n	800858c <uart_hal_open+0x16>
        return OS_EBUSY;
 80085e4:	200b      	movs	r0, #11
 80085e6:	e7d2      	b.n	800858e <uart_hal_open+0x18>

080085e8 <uart_hal_blocking_tx.part.2>:
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
 80085e8:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 80085ea:	2300      	movs	r3, #0
 80085ec:	461a      	mov	r2, r3
 80085ee:	4619      	mov	r1, r3
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fd fb15 	bl	8005c20 <__assert_func>

080085f6 <uart_hal_blocking_tx>:
 80085f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80085f8:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 80085fa:	b908      	cbnz	r0, 8008600 <uart_hal_blocking_tx+0xa>
 80085fc:	f7ff fff4 	bl	80085e8 <uart_hal_blocking_tx.part.2>
    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
 8008600:	3801      	subs	r0, #1
}
 8008602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
 8008606:	f000 baf7 	b.w	8008bf8 <hal_uart_blocking_tx>

0800860a <uart_hal_start_rx>:
    assert(dev->ud_priv);
 800860a:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800860c:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 800860e:	b908      	cbnz	r0, 8008614 <uart_hal_start_rx+0xa>
 8008610:	f7ff ffea 	bl	80085e8 <uart_hal_blocking_tx.part.2>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
 8008614:	3801      	subs	r0, #1
}
 8008616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
 800861a:	f000 bab5 	b.w	8008b88 <hal_uart_start_rx>

0800861e <uart_hal_start_tx>:
    assert(dev->ud_priv);
 800861e:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008620:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
 8008622:	b908      	cbnz	r0, 8008628 <uart_hal_start_tx+0xa>
 8008624:	f7ff ffe0 	bl	80085e8 <uart_hal_blocking_tx.part.2>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
 8008628:	3801      	subs	r0, #1
}
 800862a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
 800862e:	f000 bac9 	b.w	8008bc4 <hal_uart_start_tx>

08008632 <uart_hal_suspend>:
{
 8008632:	b570      	push	{r4, r5, r6, lr}
 8008634:	460c      	mov	r4, r1
 8008636:	4605      	mov	r5, r0
 8008638:	4616      	mov	r6, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
 800863a:	f7fe fcaf 	bl	8006f9c <os_time_get>
 800863e:	1a20      	subs	r0, r4, r0
 8008640:	2800      	cmp	r0, #0
 8008642:	dd01      	ble.n	8008648 <uart_hal_suspend+0x16>
        return OS_EINVAL;
 8008644:	2002      	movs	r0, #2
}
 8008646:	bd70      	pop	{r4, r5, r6, pc}
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
 8008648:	2e00      	cmp	r6, #0
 800864a:	d0fb      	beq.n	8008644 <uart_hal_suspend+0x12>
    return (intptr_t)(dev->ud_priv) - 1;
 800864c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
 800864e:	3801      	subs	r0, #1
 8008650:	f000 fc40 	bl	8008ed4 <hal_uart_close>
    if (rc) {
 8008654:	2800      	cmp	r0, #0
 8008656:	d0f6      	beq.n	8008646 <uart_hal_suspend+0x14>
 8008658:	e7f4      	b.n	8008644 <uart_hal_suspend+0x12>
	...

0800865c <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
 800865c:	b570      	push	{r4, r5, r6, lr}
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
 800865e:	69c5      	ldr	r5, [r0, #28]
{
 8008660:	4604      	mov	r4, r0
    ch = odev->od_name[strlen(odev->od_name) - 1];
 8008662:	4628      	mov	r0, r5
{
 8008664:	460e      	mov	r6, r1
    ch = odev->od_name[strlen(odev->od_name) - 1];
 8008666:	f7fe fe95 	bl	8007394 <strlen>
 800866a:	4428      	add	r0, r5
 800866c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    if (!isdigit((int) ch)) {
 8008670:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008674:	2809      	cmp	r0, #9
 8008676:	d814      	bhi.n	80086a2 <uart_hal_init+0x46>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
 8008678:	3b2f      	subs	r3, #47	; 0x2f
 800867a:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
 800867c:	4b0a      	ldr	r3, [pc, #40]	; (80086a8 <uart_hal_init+0x4c>)

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
 800867e:	4631      	mov	r1, r6
    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	4b0a      	ldr	r3, [pc, #40]	; (80086ac <uart_hal_init+0x50>)
 8008684:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
 8008686:	4b0a      	ldr	r3, [pc, #40]	; (80086b0 <uart_hal_init+0x54>)
 8008688:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
 800868a:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <uart_hal_init+0x58>)
 800868c:	60a3      	str	r3, [r4, #8]
    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
 800868e:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <uart_hal_init+0x5c>)
 8008690:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
 8008692:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <uart_hal_init+0x60>)
 8008694:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
 8008696:	4b0a      	ldr	r3, [pc, #40]	; (80086c0 <uart_hal_init+0x64>)
 8008698:	62e3      	str	r3, [r4, #44]	; 0x2c
    hal_uart_init(uart_hal_dev_get_id(dev), arg);
 800869a:	f000 fc0d 	bl	8008eb8 <hal_uart_init>

    return OS_OK;
 800869e:	2000      	movs	r0, #0
}
 80086a0:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
 80086a2:	2002      	movs	r0, #2
 80086a4:	e7fc      	b.n	80086a0 <uart_hal_init+0x44>
 80086a6:	bf00      	nop
 80086a8:	08008577 	.word	0x08008577
 80086ac:	08008563 	.word	0x08008563
 80086b0:	08008633 	.word	0x08008633
 80086b4:	08008537 	.word	0x08008537
 80086b8:	0800861f 	.word	0x0800861f
 80086bc:	0800860b 	.word	0x0800860b
 80086c0:	080085f7 	.word	0x080085f7

080086c4 <stm32_flash_sector_info>:
        uint32_t *address, uint32_t *sz)
{
    (void)dev;

#if FLASH_IS_LINEAR
    *address = dev->hf_base_addr + _FLASH_SECTOR_SIZE * idx;
 80086c4:	6840      	ldr	r0, [r0, #4]
 80086c6:	eb00 2181 	add.w	r1, r0, r1, lsl #10
 80086ca:	6011      	str	r1, [r2, #0]
    *sz = _FLASH_SECTOR_SIZE;
 80086cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    *address = stm32_flash_sectors[idx];
    *sz = stm32_flash_sectors[idx + 1] - stm32_flash_sectors[idx];
#endif

    return 0;
}
 80086d0:	2000      	movs	r0, #0
    *sz = _FLASH_SECTOR_SIZE;
 80086d2:	601a      	str	r2, [r3, #0]
}
 80086d4:	4770      	bx	lr

080086d6 <stm32_flash_init>:

static int
stm32_flash_init(const struct hal_flash *dev)
{
 80086d6:	b508      	push	{r3, lr}
    (void)dev;
    STM32_HAL_FLASH_INIT();
 80086d8:	f000 fcec 	bl	80090b4 <HAL_FLASH_Unlock>
    return 0;
}
 80086dc:	2000      	movs	r0, #0
 80086de:	bd08      	pop	{r3, pc}

080086e0 <stm32_flash_erase_sector>:
    return stm32_mcu_flash_erase_sector(dev, sector_address);
 80086e0:	f001 ba48 	b.w	8009b74 <stm32_mcu_flash_erase_sector>

080086e4 <stm32_flash_read>:
{
 80086e4:	b508      	push	{r3, lr}
 80086e6:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
 80086e8:	461a      	mov	r2, r3
 80086ea:	f7fe fe1d 	bl	8007328 <memcpy>
}
 80086ee:	2000      	movs	r0, #0
 80086f0:	bd08      	pop	{r3, pc}
	...

080086f4 <stm32_flash_write>:
{
 80086f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f8:	4682      	mov	sl, r0
 80086fa:	b087      	sub	sp, #28
 80086fc:	4688      	mov	r8, r1
 80086fe:	4693      	mov	fp, r2
    if (!num_bytes) {
 8008700:	2b00      	cmp	r3, #0
 8008702:	d043      	beq.n	800878c <stm32_flash_write+0x98>
    STM32_HAL_FLASH_CLEAR_ERRORS();
 8008704:	2135      	movs	r1, #53	; 0x35
 8008706:	4646      	mov	r6, r8
 8008708:	461c      	mov	r4, r3
    for (i = 0; i < num_words; i++) {
 800870a:	2700      	movs	r7, #0
    num_words = ((num_bytes - 1) >> 1) + 1;
 800870c:	1e5a      	subs	r2, r3, #1
 800870e:	0852      	lsrs	r2, r2, #1
 8008710:	3201      	adds	r2, #1
    align = dev->hf_align;
 8008712:	6905      	ldr	r5, [r0, #16]
    num_words = ((num_bytes - 1) >> 1) + 1;
 8008714:	9201      	str	r2, [sp, #4]
    STM32_HAL_FLASH_CLEAR_ERRORS();
 8008716:	4a1f      	ldr	r2, [pc, #124]	; (8008794 <stm32_flash_write+0xa0>)
        if (num_bytes < align) {
 8008718:	b2ed      	uxtb	r5, r5
    STM32_HAL_FLASH_CLEAR_ERRORS();
 800871a:	60d1      	str	r1, [r2, #12]
 800871c:	eb03 0208 	add.w	r2, r3, r8
 8008720:	a904      	add	r1, sp, #16
 8008722:	eb01 0282 	add.w	r2, r1, r2, lsl #2
            memset((uint32_t *)&val + num_bytes, dev->hf_erased_val, align - num_bytes);
 8008726:	eba5 0903 	sub.w	r9, r5, r3
 800872a:	9202      	str	r2, [sp, #8]
 800872c:	eba9 0908 	sub.w	r9, r9, r8
 8008730:	ebab 0108 	sub.w	r1, fp, r8
        if (num_bytes < align) {
 8008734:	42a5      	cmp	r5, r4
 8008736:	4431      	add	r1, r6
 8008738:	d923      	bls.n	8008782 <stm32_flash_write+0x8e>
            memcpy(&val, &((uint8_t *)src)[i * align], num_bytes);
 800873a:	4622      	mov	r2, r4
 800873c:	a804      	add	r0, sp, #16
 800873e:	f7fe fdf3 	bl	8007328 <memcpy>
            memset((uint32_t *)&val + num_bytes, dev->hf_erased_val, align - num_bytes);
 8008742:	9b02      	ldr	r3, [sp, #8]
 8008744:	eb09 0206 	add.w	r2, r9, r6
 8008748:	f89a 1014 	ldrb.w	r1, [sl, #20]
 800874c:	eba3 0086 	sub.w	r0, r3, r6, lsl #2
 8008750:	f7fe fdf7 	bl	8007342 <memset>
        rc = HAL_FLASH_Program(FLASH_PROGRAM_TYPE, address, val);
 8008754:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008758:	4631      	mov	r1, r6
 800875a:	2001      	movs	r0, #1
 800875c:	f000 fce6 	bl	800912c <HAL_FLASH_Program>
        if (rc != HAL_OK) {
 8008760:	b960      	cbnz	r0, 800877c <stm32_flash_write+0x88>
        if (!(i % 32)) {
 8008762:	06fb      	lsls	r3, r7, #27
        address += align;
 8008764:	442e      	add	r6, r5
        num_bytes -= align;
 8008766:	eba4 0405 	sub.w	r4, r4, r5
        if (!(i % 32)) {
 800876a:	d103      	bne.n	8008774 <stm32_flash_write+0x80>
 800876c:	9003      	str	r0, [sp, #12]
            hal_watchdog_tickle();
 800876e:	f000 fbe9 	bl	8008f44 <hal_watchdog_tickle>
 8008772:	9803      	ldr	r0, [sp, #12]
    for (i = 0; i < num_words; i++) {
 8008774:	9b01      	ldr	r3, [sp, #4]
 8008776:	3701      	adds	r7, #1
 8008778:	42bb      	cmp	r3, r7
 800877a:	d8d9      	bhi.n	8008730 <stm32_flash_write+0x3c>
}
 800877c:	b007      	add	sp, #28
 800877e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            memcpy(&val, &((uint8_t *)src)[i * align], align);
 8008782:	462a      	mov	r2, r5
 8008784:	a804      	add	r0, sp, #16
 8008786:	f7fe fdcf 	bl	8007328 <memcpy>
 800878a:	e7e3      	b.n	8008754 <stm32_flash_write+0x60>
        return -1;
 800878c:	f04f 30ff 	mov.w	r0, #4294967295
 8008790:	e7f4      	b.n	800877c <stm32_flash_write+0x88>
 8008792:	bf00      	nop
 8008794:	40022000 	.word	0x40022000

08008798 <os_tick_idle>:
/*
 * XXX implement tickless mode.
 */
void
os_tick_idle(os_time_t ticks)
{
 8008798:	b508      	push	{r3, lr}
    OS_ASSERT_CRITICAL();
 800879a:	f7fd f988 	bl	8005aae <os_arch_in_critical>
 800879e:	4603      	mov	r3, r0
 80087a0:	b918      	cbnz	r0, 80087aa <os_tick_idle+0x12>
 80087a2:	4602      	mov	r2, r0
 80087a4:	4601      	mov	r1, r0
 80087a6:	f7fd fa3b 	bl	8005c20 <__assert_func>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80087aa:	f3bf 8f4f 	dsb	sy
    __DSB();
    __WFI();
 80087ae:	bf30      	wfi
}
 80087b0:	bd08      	pop	{r3, pc}
	...

080087b4 <os_tick_init>:
void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
    uint32_t reload_val;

    reload_val = ((uint64_t)SystemCoreClock / os_ticks_per_sec) - 1;
 80087b4:	4b0a      	ldr	r3, [pc, #40]	; (80087e0 <os_tick_init+0x2c>)

    /* Set the system time ticker up */
    SysTick->LOAD = reload_val;
    SysTick->VAL = 0;
 80087b6:	2200      	movs	r2, #0
    reload_val = ((uint64_t)SystemCoreClock / os_ticks_per_sec) - 1;
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	0109      	lsls	r1, r1, #4
 80087bc:	fbb3 f0f0 	udiv	r0, r3, r0
    SysTick->LOAD = reload_val;
 80087c0:	4b08      	ldr	r3, [pc, #32]	; (80087e4 <os_tick_init+0x30>)
    reload_val = ((uint64_t)SystemCoreClock / os_ticks_per_sec) - 1;
 80087c2:	3801      	subs	r0, #1
    SysTick->LOAD = reload_val;
 80087c4:	6058      	str	r0, [r3, #4]
    SysTick->VAL = 0;
 80087c6:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = 0x0007;
 80087c8:	2207      	movs	r2, #7
 80087ca:	b2c9      	uxtb	r1, r1
 80087cc:	601a      	str	r2, [r3, #0]

    /*
     * Keep clocking debug even when CPU is sleeping, stopped or in standby.
     */
#if !MYNEWT_VAL(MCU_STM32F0)
    DBGMCU->CR |= (DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
 80087ce:	4a06      	ldr	r2, [pc, #24]	; (80087e8 <os_tick_init+0x34>)
 80087d0:	f883 1d13 	strb.w	r1, [r3, #3347]	; 0xd13
 80087d4:	6853      	ldr	r3, [r2, #4]
 80087d6:	f043 0307 	orr.w	r3, r3, #7
 80087da:	6053      	str	r3, [r2, #4]
#else
    DBGMCU->CR |= (DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
#endif
}
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	20000110 	.word	0x20000110
 80087e4:	e000e010 	.word	0xe000e010
 80087e8:	e0042000 	.word	0xe0042000

080087ec <hal_system_reset>:
 80087ec:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80087f0:	4905      	ldr	r1, [pc, #20]	; (8008808 <hal_system_reset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80087f2:	4b06      	ldr	r3, [pc, #24]	; (800880c <hal_system_reset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80087f4:	68ca      	ldr	r2, [r1, #12]
 80087f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60cb      	str	r3, [r1, #12]
 80087fe:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <hal_system_reset+0x16>
 8008806:	bf00      	nop
 8008808:	e000ed00 	.word	0xe000ed00
 800880c:	05fa0004 	.word	0x05fa0004

08008810 <hal_debugger_connected>:
int
hal_debugger_connected(void)
{
    /* FIXME */
    return 0;
}
 8008810:	2000      	movs	r0, #0
 8008812:	4770      	bx	lr

08008814 <HAL_GetTick>:

uint32_t
HAL_GetTick(void)
{
    return os_time_get();
 8008814:	f7fe bbc2 	b.w	8006f9c <os_time_get>

08008818 <HAL_InitTick>:

HAL_StatusTypeDef
HAL_InitTick (uint32_t TickPriority)
{
    return HAL_OK;
}
 8008818:	2000      	movs	r0, #0
 800881a:	4770      	bx	lr

0800881c <hal_timer_cnt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800881c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008820:	b672      	cpsid	i
{
    uint32_t cnt;
    int sr;

    __HAL_DISABLE_INTERRUPTS(sr);
    if (tmr->sht_regs->SR & TIM_SR_UIF) {
 8008822:	6803      	ldr	r3, [r0, #0]
 8008824:	691a      	ldr	r2, [r3, #16]
 8008826:	07d2      	lsls	r2, r2, #31
 8008828:	d507      	bpl.n	800883a <hal_timer_cnt+0x1e>
        /*
         * Just overflowed
         */
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 800882a:	6842      	ldr	r2, [r0, #4]
 800882c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8008830:	6042      	str	r2, [r0, #4]
        tmr->sht_regs->SR &= ~TIM_SR_UIF;
 8008832:	691a      	ldr	r2, [r3, #16]
 8008834:	f022 0201 	bic.w	r2, r2, #1
 8008838:	611a      	str	r2, [r3, #16]
    }
    cnt = tmr->sht_oflow + tmr->sht_regs->CNT;
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	6840      	ldr	r0, [r0, #4]
 800883e:	4418      	add	r0, r3
    __HAL_ENABLE_INTERRUPTS(sr);
 8008840:	b901      	cbnz	r1, 8008844 <hal_timer_cnt+0x28>
  __ASM volatile ("cpsie i" : : : "memory");
 8008842:	b662      	cpsie	i

    return cnt;
}
 8008844:	4770      	bx	lr
	...

08008848 <stm32_tmr0_irq>:
{
 8008848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    sr = tmr->sht_regs->SR;
 800884c:	4c1d      	ldr	r4, [pc, #116]	; (80088c4 <stm32_tmr0_irq+0x7c>)
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	691b      	ldr	r3, [r3, #16]
    if (sr & TIM_SR_UIF) {
 8008852:	f013 0501 	ands.w	r5, r3, #1
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 8008856:	bf1f      	itttt	ne
 8008858:	6862      	ldrne	r2, [r4, #4]
        clr |= TIM_SR_UIF;
 800885a:	2501      	movne	r5, #1
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 800885c:	f502 3280 	addne.w	r2, r2, #65536	; 0x10000
 8008860:	6062      	strne	r2, [r4, #4]
    if (sr & TIM_SR_CC1IF) {
 8008862:	079b      	lsls	r3, r3, #30
 8008864:	d529      	bpl.n	80088ba <stm32_tmr0_irq+0x72>
            ht->link.tqe_prev = NULL;
 8008866:	f04f 0800 	mov.w	r8, #0
        cnt = hal_timer_cnt(tmr);
 800886a:	4f16      	ldr	r7, [pc, #88]	; (80088c4 <stm32_tmr0_irq+0x7c>)
        clr |= TIM_SR_CC1IF;
 800886c:	f045 0502 	orr.w	r5, r5, #2
    while ((ht = TAILQ_FIRST(&tmr->sht_timers)) != NULL) {
 8008870:	68a6      	ldr	r6, [r4, #8]
 8008872:	b136      	cbz	r6, 8008882 <stm32_tmr0_irq+0x3a>
        cnt = hal_timer_cnt(tmr);
 8008874:	4638      	mov	r0, r7
 8008876:	f7ff ffd1 	bl	800881c <hal_timer_cnt>
        if (((int32_t)(cnt - ht->expiry)) >= 0) {
 800887a:	68f3      	ldr	r3, [r6, #12]
 800887c:	1ac0      	subs	r0, r0, r3
 800887e:	2800      	cmp	r0, #0
 8008880:	da0b      	bge.n	800889a <stm32_tmr0_irq+0x52>
    ht = TAILQ_FIRST(&tmr->sht_timers);
 8008882:	68a2      	ldr	r2, [r4, #8]
 8008884:	6820      	ldr	r0, [r4, #0]
    if (ht) {
 8008886:	b9b2      	cbnz	r2, 80088b6 <stm32_tmr0_irq+0x6e>
        TIM_CCxChannelCmd(tmr->sht_regs, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008888:	4611      	mov	r1, r2
 800888a:	f001 f967 	bl	8009b5c <TIM_CCxChannelCmd>
        tmr->sht_regs->DIER &= ~TIM_DIER_CC1IE;
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	68d3      	ldr	r3, [r2, #12]
 8008892:	f023 0302 	bic.w	r3, r3, #2
 8008896:	60d3      	str	r3, [r2, #12]
 8008898:	e00f      	b.n	80088ba <stm32_tmr0_irq+0x72>
 800889a:	e9d6 3204 	ldrd	r3, r2, [r6, #16]
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 800889e:	b143      	cbz	r3, 80088b2 <stm32_tmr0_irq+0x6a>
 80088a0:	615a      	str	r2, [r3, #20]
 80088a2:	6972      	ldr	r2, [r6, #20]
 80088a4:	6013      	str	r3, [r2, #0]
            ht->cb_func(ht->cb_arg);
 80088a6:	e9d6 3001 	ldrd	r3, r0, [r6, #4]
            ht->link.tqe_prev = NULL;
 80088aa:	f8c6 8014 	str.w	r8, [r6, #20]
            ht->cb_func(ht->cb_arg);
 80088ae:	4798      	blx	r3
 80088b0:	e7de      	b.n	8008870 <stm32_tmr0_irq+0x28>
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 80088b2:	60e2      	str	r2, [r4, #12]
 80088b4:	e7f5      	b.n	80088a2 <stm32_tmr0_irq+0x5a>
        tmr->sht_regs->CCR1 = ht->expiry;
 80088b6:	68d3      	ldr	r3, [r2, #12]
 80088b8:	6343      	str	r3, [r0, #52]	; 0x34
    tmr->sht_regs->SR = ~clr;
 80088ba:	43ed      	mvns	r5, r5
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	611d      	str	r5, [r3, #16]
}
 80088c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c4:	20003534 	.word	0x20003534

080088c8 <hal_timer_init>:
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num]) ||
 80088c8:	2802      	cmp	r0, #2
{
 80088ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num]) ||
 80088cc:	dd04      	ble.n	80088d8 <hal_timer_init+0x10>
        return -1;
 80088ce:	f04f 30ff 	mov.w	r0, #4294967295
}
 80088d2:	b005      	add	sp, #20
 80088d4:	f85d fb04 	ldr.w	pc, [sp], #4
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num]) ||
 80088d8:	4b49      	ldr	r3, [pc, #292]	; (8008a00 <hal_timer_init+0x138>)
 80088da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d0f5      	beq.n	80088ce <hal_timer_init+0x6>
 80088e2:	2900      	cmp	r1, #0
 80088e4:	d0f3      	beq.n	80088ce <hal_timer_init+0x6>
    regs = tmr->sht_regs = (TIM_TypeDef *)cfg;
 80088e6:	6019      	str	r1, [r3, #0]
    if (!IS_TIM_CC1_INSTANCE(regs)) {
 80088e8:	4b46      	ldr	r3, [pc, #280]	; (8008a04 <hal_timer_init+0x13c>)
 80088ea:	4299      	cmp	r1, r3
 80088ec:	d04c      	beq.n	8008988 <hal_timer_init+0xc0>
 80088ee:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80088f2:	d041      	beq.n	8008978 <hal_timer_init+0xb0>
 80088f4:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 80088f8:	4299      	cmp	r1, r3
 80088fa:	d063      	beq.n	80089c4 <hal_timer_init+0xfc>
 80088fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008900:	4299      	cmp	r1, r3
 8008902:	d1e4      	bne.n	80088ce <hal_timer_init+0x6>
    switch (num) {
 8008904:	2800      	cmp	r0, #0
 8008906:	d139      	bne.n	800897c <hal_timer_init+0xb4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008908:	22f0      	movs	r2, #240	; 0xf0
 800890a:	4b3f      	ldr	r3, [pc, #252]	; (8008a08 <hal_timer_init+0x140>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800890c:	493f      	ldr	r1, [pc, #252]	; (8008a0c <hal_timer_init+0x144>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800890e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8008912:	4a3f      	ldr	r2, [pc, #252]	; (8008a10 <hal_timer_init+0x148>)
    return 0;
 8008914:	2000      	movs	r0, #0
 8008916:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008918:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800891c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008920:	601a      	str	r2, [r3, #0]
        __HAL_RCC_TIM4_CLK_ENABLE();
 8008922:	4b3c      	ldr	r3, [pc, #240]	; (8008a14 <hal_timer_init+0x14c>)
 8008924:	69da      	ldr	r2, [r3, #28]
 8008926:	f042 0204 	orr.w	r2, r2, #4
 800892a:	61da      	str	r2, [r3, #28]
 800892c:	69db      	ldr	r3, [r3, #28]
        __HAL_DBGMCU_FREEZE_TIM4();
 800892e:	4a3a      	ldr	r2, [pc, #232]	; (8008a18 <hal_timer_init+0x150>)
        __HAL_RCC_TIM4_CLK_ENABLE();
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	9303      	str	r3, [sp, #12]
 8008936:	9b03      	ldr	r3, [sp, #12]
        __HAL_DBGMCU_FREEZE_TIM4();
 8008938:	6853      	ldr	r3, [r2, #4]
 800893a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800893e:	6053      	str	r3, [r2, #4]
 8008940:	e7c7      	b.n	80088d2 <hal_timer_init+0xa>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008942:	22f0      	movs	r2, #240	; 0xf0
 8008944:	4b30      	ldr	r3, [pc, #192]	; (8008a08 <hal_timer_init+0x140>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008946:	4931      	ldr	r1, [pc, #196]	; (8008a0c <hal_timer_init+0x144>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008948:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800894c:	4a30      	ldr	r2, [pc, #192]	; (8008a10 <hal_timer_init+0x148>)
 800894e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008950:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008958:	601a      	str	r2, [r3, #0]
        __HAL_RCC_TIM2_CLK_ENABLE();
 800895a:	4b2e      	ldr	r3, [pc, #184]	; (8008a14 <hal_timer_init+0x14c>)
 800895c:	69da      	ldr	r2, [r3, #28]
 800895e:	f042 0201 	orr.w	r2, r2, #1
 8008962:	61da      	str	r2, [r3, #28]
 8008964:	69db      	ldr	r3, [r3, #28]
        __HAL_DBGMCU_FREEZE_TIM2();
 8008966:	4a2c      	ldr	r2, [pc, #176]	; (8008a18 <hal_timer_init+0x150>)
        __HAL_RCC_TIM2_CLK_ENABLE();
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	9b01      	ldr	r3, [sp, #4]
        __HAL_DBGMCU_FREEZE_TIM2();
 8008970:	6853      	ldr	r3, [r2, #4]
 8008972:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008976:	e023      	b.n	80089c0 <hal_timer_init+0xf8>
    switch (num) {
 8008978:	2800      	cmp	r0, #0
 800897a:	d0e2      	beq.n	8008942 <hal_timer_init+0x7a>
        assert(0);
 800897c:	2300      	movs	r3, #0
 800897e:	461a      	mov	r2, r3
 8008980:	4619      	mov	r1, r3
 8008982:	4618      	mov	r0, r3
 8008984:	f7fd f94c 	bl	8005c20 <__assert_func>
    switch (num) {
 8008988:	2800      	cmp	r0, #0
 800898a:	d1f7      	bne.n	800897c <hal_timer_init+0xb4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800898c:	22f0      	movs	r2, #240	; 0xf0
 800898e:	4b1e      	ldr	r3, [pc, #120]	; (8008a08 <hal_timer_init+0x140>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008990:	491e      	ldr	r1, [pc, #120]	; (8008a0c <hal_timer_init+0x144>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008992:	f883 2319 	strb.w	r2, [r3, #793]	; 0x319
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8008996:	4a1e      	ldr	r2, [pc, #120]	; (8008a10 <hal_timer_init+0x148>)
 8008998:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800899a:	f8c2 10a4 	str.w	r1, [r2, #164]	; 0xa4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800899e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80089a2:	601a      	str	r2, [r3, #0]
        __HAL_RCC_TIM1_CLK_ENABLE();
 80089a4:	4b1b      	ldr	r3, [pc, #108]	; (8008a14 <hal_timer_init+0x14c>)
 80089a6:	699a      	ldr	r2, [r3, #24]
 80089a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089ac:	619a      	str	r2, [r3, #24]
 80089ae:	699b      	ldr	r3, [r3, #24]
        __HAL_DBGMCU_FREEZE_TIM1();
 80089b0:	4a19      	ldr	r2, [pc, #100]	; (8008a18 <hal_timer_init+0x150>)
        __HAL_RCC_TIM1_CLK_ENABLE();
 80089b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	9b00      	ldr	r3, [sp, #0]
        __HAL_DBGMCU_FREEZE_TIM1();
 80089ba:	6853      	ldr	r3, [r2, #4]
 80089bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
        __HAL_DBGMCU_FREEZE_TIM3();
 80089c0:	6053      	str	r3, [r2, #4]
 80089c2:	e786      	b.n	80088d2 <hal_timer_init+0xa>
    switch (num) {
 80089c4:	2800      	cmp	r0, #0
 80089c6:	d1d9      	bne.n	800897c <hal_timer_init+0xb4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089c8:	22f0      	movs	r2, #240	; 0xf0
 80089ca:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <hal_timer_init+0x140>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 80089cc:	490f      	ldr	r1, [pc, #60]	; (8008a0c <hal_timer_init+0x144>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  uint32_t vectors = (uint32_t )SCB->VTOR;
 80089d2:	4a0f      	ldr	r2, [pc, #60]	; (8008a10 <hal_timer_init+0x148>)
 80089d4:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 80089d6:	f8c2 10b4 	str.w	r1, [r2, #180]	; 0xb4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80089da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80089de:	601a      	str	r2, [r3, #0]
        __HAL_RCC_TIM3_CLK_ENABLE();
 80089e0:	4b0c      	ldr	r3, [pc, #48]	; (8008a14 <hal_timer_init+0x14c>)
 80089e2:	69da      	ldr	r2, [r3, #28]
 80089e4:	f042 0202 	orr.w	r2, r2, #2
 80089e8:	61da      	str	r2, [r3, #28]
 80089ea:	69db      	ldr	r3, [r3, #28]
        __HAL_DBGMCU_FREEZE_TIM3();
 80089ec:	4a0a      	ldr	r2, [pc, #40]	; (8008a18 <hal_timer_init+0x150>)
        __HAL_RCC_TIM3_CLK_ENABLE();
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	9302      	str	r3, [sp, #8]
 80089f4:	9b02      	ldr	r3, [sp, #8]
        __HAL_DBGMCU_FREEZE_TIM3();
 80089f6:	6853      	ldr	r3, [r2, #4]
 80089f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80089fc:	e7e0      	b.n	80089c0 <hal_timer_init+0xf8>
 80089fe:	bf00      	nop
 8008a00:	0800e45c 	.word	0x0800e45c
 8008a04:	40012c00 	.word	0x40012c00
 8008a08:	e000e100 	.word	0xe000e100
 8008a0c:	08008849 	.word	0x08008849
 8008a10:	e000ed00 	.word	0xe000ed00
 8008a14:	40021000 	.word	0x40021000
 8008a18:	e0042000 	.word	0xe0042000

08008a1c <hal_timer_config>:
{
 8008a1c:	b530      	push	{r4, r5, lr}
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8008a1e:	2802      	cmp	r0, #2
{
 8008a20:	b087      	sub	sp, #28
 8008a22:	460d      	mov	r5, r1
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8008a24:	dd03      	ble.n	8008a2e <hal_timer_config+0x12>
        return -1;
 8008a26:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008a2a:	b007      	add	sp, #28
 8008a2c:	bd30      	pop	{r4, r5, pc}
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8008a2e:	4b1a      	ldr	r3, [pc, #104]	; (8008a98 <hal_timer_config+0x7c>)
 8008a30:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8008a34:	2c00      	cmp	r4, #0
 8008a36:	d0f6      	beq.n	8008a26 <hal_timer_config+0xa>
    if (!IS_TIM_CC1_INSTANCE(tmr->sht_regs)) {
 8008a38:	6820      	ldr	r0, [r4, #0]
 8008a3a:	4b18      	ldr	r3, [pc, #96]	; (8008a9c <hal_timer_config+0x80>)
 8008a3c:	4298      	cmp	r0, r3
 8008a3e:	d00a      	beq.n	8008a56 <hal_timer_config+0x3a>
 8008a40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008a44:	d007      	beq.n	8008a56 <hal_timer_config+0x3a>
 8008a46:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8008a4a:	4298      	cmp	r0, r3
 8008a4c:	d003      	beq.n	8008a56 <hal_timer_config+0x3a>
 8008a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a52:	4298      	cmp	r0, r3
 8008a54:	d1e7      	bne.n	8008a26 <hal_timer_config+0xa>
    prescaler = stm32_hal_timer_get_freq(tmr->sht_regs) / freq_hz;
 8008a56:	f001 f8a9 	bl	8009bac <stm32_hal_timer_get_freq>
 8008a5a:	fbb0 f5f5 	udiv	r5, r0, r5
    if (prescaler > 0xffff) {
 8008a5e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008a62:	d2e0      	bcs.n	8008a26 <hal_timer_config+0xa>
    memset(&init, 0, sizeof(init));
 8008a64:	2214      	movs	r2, #20
 8008a66:	2100      	movs	r1, #0
 8008a68:	a801      	add	r0, sp, #4
 8008a6a:	f7fe fc6a 	bl	8007342 <memset>
    init.Period = 0xffff;
 8008a6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a72:	9302      	str	r3, [sp, #8]
    tmr->sht_regs->CR1 = TIM_CR1_URS;
 8008a74:	2304      	movs	r3, #4
 8008a76:	6820      	ldr	r0, [r4, #0]
    init.Prescaler = prescaler;
 8008a78:	9500      	str	r5, [sp, #0]
    tmr->sht_regs->CR1 = TIM_CR1_URS;
 8008a7a:	6003      	str	r3, [r0, #0]
    tmr->sht_regs->DIER = TIM_DIER_UIE;
 8008a7c:	2301      	movs	r3, #1
    TIM_Base_SetConfig(tmr->sht_regs, &init);
 8008a7e:	4669      	mov	r1, sp
    tmr->sht_regs->DIER = TIM_DIER_UIE;
 8008a80:	60c3      	str	r3, [r0, #12]
    TIM_Base_SetConfig(tmr->sht_regs, &init);
 8008a82:	f001 f833 	bl	8009aec <TIM_Base_SetConfig>
    tmr->sht_regs->SR = 0;
 8008a86:	2000      	movs	r0, #0
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	6118      	str	r0, [r3, #16]
    tmr->sht_regs->CR1 |= TIM_CR1_CEN;
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	f042 0201 	orr.w	r2, r2, #1
 8008a92:	601a      	str	r2, [r3, #0]
    return 0;
 8008a94:	e7c9      	b.n	8008a2a <hal_timer_config+0xe>
 8008a96:	bf00      	nop
 8008a98:	0800e45c 	.word	0x0800e45c
 8008a9c:	40012c00 	.word	0x40012c00

08008aa0 <hal_timer_read>:
uint32_t
hal_timer_read(int num)
{
    struct stm32_hal_tmr *tmr;

    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 8008aa0:	2802      	cmp	r0, #2
 8008aa2:	dc05      	bgt.n	8008ab0 <hal_timer_read+0x10>
 8008aa4:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <hal_timer_read+0x18>)
 8008aa6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008aaa:	b108      	cbz	r0, 8008ab0 <hal_timer_read+0x10>
        return -1;
    }
    return hal_timer_cnt(tmr);
 8008aac:	f7ff beb6 	b.w	800881c <hal_timer_cnt>
}
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	0800e45c 	.word	0x0800e45c

08008abc <uart_irq_handler>:
    uint32_t cr1;
    int data;
    int rc;

    ui = &uart_irqs[num];
    ++ui->ui_cnt;
 8008abc:	4a21      	ldr	r2, [pc, #132]	; (8008b44 <uart_irq_handler+0x88>)
{
 8008abe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ++ui->ui_cnt;
 8008ac0:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8008ac4:	684b      	ldr	r3, [r1, #4]
    u = ui->ui_uart;
 8008ac6:	f852 4030 	ldr.w	r4, [r2, r0, lsl #3]
    ++ui->ui_cnt;
 8008aca:	3301      	adds	r3, #1
    regs = u->u_regs;
 8008acc:	6825      	ldr	r5, [r4, #0]
    ++ui->ui_cnt;
 8008ace:	604b      	str	r3, [r1, #4]

    isr = STATUS(regs);
 8008ad0:	682f      	ldr	r7, [r5, #0]
    if (isr & RXNE) {
 8008ad2:	06b8      	lsls	r0, r7, #26
 8008ad4:	d510      	bpl.n	8008af8 <uart_irq_handler+0x3c>
        data = RXDR(regs);
 8008ad6:	686e      	ldr	r6, [r5, #4]
        rc = u->u_rx_func(u->u_func_arg, data);
 8008ad8:	68a3      	ldr	r3, [r4, #8]
 8008ada:	b2f6      	uxtb	r6, r6
 8008adc:	4631      	mov	r1, r6
 8008ade:	6960      	ldr	r0, [r4, #20]
 8008ae0:	4798      	blx	r3
        if (rc < 0) {
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	da08      	bge.n	8008af8 <uart_irq_handler+0x3c>
            regs->CR1 &= ~USART_CR1_RXNEIE;
 8008ae6:	68eb      	ldr	r3, [r5, #12]
 8008ae8:	f023 0320 	bic.w	r3, r3, #32
 8008aec:	60eb      	str	r3, [r5, #12]
            u->u_rx_data = data;
            u->u_rx_stall = 1;
 8008aee:	7923      	ldrb	r3, [r4, #4]
            u->u_rx_data = data;
 8008af0:	7166      	strb	r6, [r4, #5]
            u->u_rx_stall = 1;
 8008af2:	f043 0302 	orr.w	r3, r3, #2
 8008af6:	7123      	strb	r3, [r4, #4]
        }
    }
    if (isr & (TXE | TC)) {
 8008af8:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 8008afc:	d021      	beq.n	8008b42 <uart_irq_handler+0x86>
        cr1 = regs->CR1;
        if (isr & TXE) {
 8008afe:	0639      	lsls	r1, r7, #24
        cr1 = regs->CR1;
 8008b00:	68ee      	ldr	r6, [r5, #12]
        if (isr & TXE) {
 8008b02:	d50e      	bpl.n	8008b22 <uart_irq_handler+0x66>
            data = u->u_tx_func(u->u_func_arg);
 8008b04:	68e3      	ldr	r3, [r4, #12]
 8008b06:	6960      	ldr	r0, [r4, #20]
 8008b08:	4798      	blx	r3
            if (data < 0) {
 8008b0a:	2800      	cmp	r0, #0
                cr1 &= ~USART_CR1_TXEIE;
                cr1 |= USART_CR1_TCIE;
                u->u_tx_end = 1;
 8008b0c:	bfbf      	itttt	lt
 8008b0e:	7923      	ldrblt	r3, [r4, #4]
                cr1 &= ~USART_CR1_TXEIE;
 8008b10:	f026 0680 	biclt.w	r6, r6, #128	; 0x80
                u->u_tx_end = 1;
 8008b14:	f043 0304 	orrlt.w	r3, r3, #4
                cr1 |= USART_CR1_TCIE;
 8008b18:	f046 0640 	orrlt.w	r6, r6, #64	; 0x40
                u->u_tx_end = 1;
 8008b1c:	bfb4      	ite	lt
 8008b1e:	7123      	strblt	r3, [r4, #4]
            } else {
                TXDR(regs) = data;
 8008b20:	6068      	strge	r0, [r5, #4]
            }
        }
        if (u->u_tx_end == 1 && isr & TC) {
 8008b22:	7923      	ldrb	r3, [r4, #4]
 8008b24:	075a      	lsls	r2, r3, #29
 8008b26:	d50b      	bpl.n	8008b40 <uart_irq_handler+0x84>
 8008b28:	067b      	lsls	r3, r7, #25
 8008b2a:	d509      	bpl.n	8008b40 <uart_irq_handler+0x84>
            if (u->u_tx_done) {
 8008b2c:	6923      	ldr	r3, [r4, #16]
 8008b2e:	b10b      	cbz	r3, 8008b34 <uart_irq_handler+0x78>
                u->u_tx_done(u->u_func_arg);
 8008b30:	6960      	ldr	r0, [r4, #20]
 8008b32:	4798      	blx	r3
            }
            u->u_tx_end = 0;
 8008b34:	7923      	ldrb	r3, [r4, #4]
            cr1 &= ~USART_CR1_TCIE;
 8008b36:	f026 0640 	bic.w	r6, r6, #64	; 0x40
            u->u_tx_end = 0;
 8008b3a:	f36f 0382 	bfc	r3, #2, #1
 8008b3e:	7123      	strb	r3, [r4, #4]
        }
        regs->CR1 = cr1;
 8008b40:	60ee      	str	r6, [r5, #12]
    /* clear overrun */
    if (isr & USART_ISR_ORE) {
        regs->ICR |= USART_ICR_ORECF;
    }
#endif
}
 8008b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b44:	20002b7c 	.word	0x20002b7c

08008b48 <uart_irq1>:
}

static void
uart_irq1(void)
{
    uart_irq_handler(0);
 8008b48:	2000      	movs	r0, #0
 8008b4a:	f7ff bfb7 	b.w	8008abc <uart_irq_handler>

08008b4e <uart_irq2>:
}

static void
uart_irq2(void)
{
    uart_irq_handler(1);
 8008b4e:	2001      	movs	r0, #1
 8008b50:	f7ff bfb4 	b.w	8008abc <uart_irq_handler>

08008b54 <uart_irq3>:

#ifdef USART3_BASE
static void
uart_irq3(void)
{
    uart_irq_handler(2);
 8008b54:	2002      	movs	r0, #2
 8008b56:	f7ff bfb1 	b.w	8008abc <uart_irq_handler>
	...

08008b5c <hal_uart_init_cbs>:
    if (port >= UART_CNT || u->u_open) {
 8008b5c:	2800      	cmp	r0, #0
{
 8008b5e:	b530      	push	{r4, r5, lr}
    if (port >= UART_CNT || u->u_open) {
 8008b60:	dc0d      	bgt.n	8008b7e <hal_uart_init_cbs+0x22>
 8008b62:	251c      	movs	r5, #28
 8008b64:	4c07      	ldr	r4, [pc, #28]	; (8008b84 <hal_uart_init_cbs+0x28>)
 8008b66:	fb05 4400 	mla	r4, r5, r0, r4
 8008b6a:	7920      	ldrb	r0, [r4, #4]
 8008b6c:	f010 0001 	ands.w	r0, r0, #1
 8008b70:	d105      	bne.n	8008b7e <hal_uart_init_cbs+0x22>
    u->u_tx_func = tx_func;
 8008b72:	e9c4 3102 	strd	r3, r1, [r4, #8]
    u->u_func_arg = arg;
 8008b76:	9b03      	ldr	r3, [sp, #12]
    u->u_tx_done = tx_done;
 8008b78:	6122      	str	r2, [r4, #16]
    u->u_func_arg = arg;
 8008b7a:	6163      	str	r3, [r4, #20]
}
 8008b7c:	bd30      	pop	{r4, r5, pc}
        return -1;
 8008b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b82:	e7fb      	b.n	8008b7c <hal_uart_init_cbs+0x20>
 8008b84:	20002b94 	.word	0x20002b94

08008b88 <hal_uart_start_rx>:
{
 8008b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (u->u_rx_stall) {
 8008b8a:	251c      	movs	r5, #28
 8008b8c:	4345      	muls	r5, r0
 8008b8e:	4e0c      	ldr	r6, [pc, #48]	; (8008bc0 <hal_uart_start_rx+0x38>)
 8008b90:	1974      	adds	r4, r6, r5
 8008b92:	7923      	ldrb	r3, [r4, #4]
 8008b94:	079b      	lsls	r3, r3, #30
 8008b96:	d512      	bpl.n	8008bbe <hal_uart_start_rx+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b98:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008b9c:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_data);
 8008b9e:	68a3      	ldr	r3, [r4, #8]
 8008ba0:	7961      	ldrb	r1, [r4, #5]
 8008ba2:	6960      	ldr	r0, [r4, #20]
 8008ba4:	4798      	blx	r3
        if (rc == 0) {
 8008ba6:	b940      	cbnz	r0, 8008bba <hal_uart_start_rx+0x32>
            u->u_rx_stall = 0;
 8008ba8:	7923      	ldrb	r3, [r4, #4]
            u->u_regs->CR1 |= USART_CR1_RXNEIE;
 8008baa:	5972      	ldr	r2, [r6, r5]
            u->u_rx_stall = 0;
 8008bac:	f360 0341 	bfi	r3, r0, #1, #1
 8008bb0:	7123      	strb	r3, [r4, #4]
            u->u_regs->CR1 |= USART_CR1_RXNEIE;
 8008bb2:	68d3      	ldr	r3, [r2, #12]
 8008bb4:	f043 0320 	orr.w	r3, r3, #32
 8008bb8:	60d3      	str	r3, [r2, #12]
        __HAL_ENABLE_INTERRUPTS(sr);
 8008bba:	b907      	cbnz	r7, 8008bbe <hal_uart_start_rx+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
 8008bbc:	b662      	cpsie	i
}
 8008bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc0:	20002b94 	.word	0x20002b94

08008bc4 <hal_uart_start_tx>:
{
 8008bc4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bc6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008bca:	b672      	cpsid	i
    u->u_regs->CR1 &= ~USART_CR1_TCIE;
 8008bcc:	231c      	movs	r3, #28
 8008bce:	4358      	muls	r0, r3
 8008bd0:	4a08      	ldr	r2, [pc, #32]	; (8008bf4 <hal_uart_start_tx+0x30>)
 8008bd2:	5813      	ldr	r3, [r2, r0]
 8008bd4:	1811      	adds	r1, r2, r0
 8008bd6:	68da      	ldr	r2, [r3, #12]
 8008bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bdc:	60da      	str	r2, [r3, #12]
    u->u_regs->CR1 |= USART_CR1_TXEIE;
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008be4:	60da      	str	r2, [r3, #12]
    u->u_tx_end = 0;
 8008be6:	790b      	ldrb	r3, [r1, #4]
 8008be8:	f36f 0382 	bfc	r3, #2, #1
 8008bec:	710b      	strb	r3, [r1, #4]
    __HAL_ENABLE_INTERRUPTS(sr);
 8008bee:	b904      	cbnz	r4, 8008bf2 <hal_uart_start_tx+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8008bf0:	b662      	cpsie	i
}
 8008bf2:	bd10      	pop	{r4, pc}
 8008bf4:	20002b94 	.word	0x20002b94

08008bf8 <hal_uart_blocking_tx>:
    if (port >= UART_CNT || !u->u_open) {
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	dc0e      	bgt.n	8008c1a <hal_uart_blocking_tx+0x22>
 8008bfc:	231c      	movs	r3, #28
 8008bfe:	4358      	muls	r0, r3
 8008c00:	4a06      	ldr	r2, [pc, #24]	; (8008c1c <hal_uart_blocking_tx+0x24>)
 8008c02:	1813      	adds	r3, r2, r0
 8008c04:	791b      	ldrb	r3, [r3, #4]
 8008c06:	07db      	lsls	r3, r3, #31
 8008c08:	d507      	bpl.n	8008c1a <hal_uart_blocking_tx+0x22>
    regs = u->u_regs;
 8008c0a:	5813      	ldr	r3, [r2, r0]
    while (!(STATUS(regs) & TXE));
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	0610      	lsls	r0, r2, #24
 8008c10:	d5fc      	bpl.n	8008c0c <hal_uart_blocking_tx+0x14>
    TXDR(regs) = data;
 8008c12:	6059      	str	r1, [r3, #4]
    while (!(STATUS(regs) & TC));
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	0652      	lsls	r2, r2, #25
 8008c18:	d5fc      	bpl.n	8008c14 <hal_uart_blocking_tx+0x1c>
}
 8008c1a:	4770      	bx	lr
 8008c1c:	20002b94 	.word	0x20002b94

08008c20 <hal_uart_config>:
}

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t cr1, cr2, cr3;
#if MYNEWT_VAL(MCU_STM32F1)
    GPIO_InitTypeDef gpio;
#endif

    if (port >= UART_CNT) {
 8008c24:	1e06      	subs	r6, r0, #0
{
 8008c26:	b087      	sub	sp, #28
 8008c28:	460c      	mov	r4, r1
 8008c2a:	4693      	mov	fp, r2
 8008c2c:	469a      	mov	sl, r3
 8008c2e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
 8008c32:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
    if (port >= UART_CNT) {
 8008c36:	f300 8127 	bgt.w	8008e88 <hal_uart_config+0x268>
        return -1;
    }

    u = &uarts[port];
    if (u->u_open) {
 8008c3a:	231c      	movs	r3, #28
 8008c3c:	4d94      	ldr	r5, [pc, #592]	; (8008e90 <hal_uart_config+0x270>)
 8008c3e:	fb03 5306 	mla	r3, r3, r6, r5
 8008c42:	791a      	ldrb	r2, [r3, #4]
 8008c44:	07d0      	lsls	r0, r2, #31
 8008c46:	f100 811f 	bmi.w	8008e88 <hal_uart_config+0x268>
        return -1;
    }
    cfg = u->u_cfg;
 8008c4a:	699f      	ldr	r7, [r3, #24]
    assert(cfg);
 8008c4c:	b92f      	cbnz	r7, 8008c5a <hal_uart_config+0x3a>
        break;
    case 9:
        cr1 |= UART_WORDLENGTH_9B;
        break;
    default:
        assert(0);
 8008c4e:	2300      	movs	r3, #0
 8008c50:	461a      	mov	r2, r3
 8008c52:	4619      	mov	r1, r3
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fc ffe3 	bl	8005c20 <__assert_func>
    gpio.Mode = GPIO_MODE_AF_PP;
 8008c5a:	2302      	movs	r3, #2
    gpio.Pull = GPIO_PULLUP;
 8008c5c:	2103      	movs	r1, #3
    gpio.Mode = GPIO_MODE_AF_PP;
 8008c5e:	9303      	str	r3, [sp, #12]
    gpio.Pull = GPIO_PULLUP;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e9cd 3104 	strd	r3, r1, [sp, #16]
    hal_gpio_init_stm(cfg->suc_pin_tx, &gpio);
 8008c66:	a902      	add	r1, sp, #8
 8008c68:	f997 000c 	ldrsb.w	r0, [r7, #12]
 8008c6c:	f000 f9c8 	bl	8009000 <hal_gpio_init_stm>
    if (flow_ctl == HAL_UART_FLOW_CTL_RTS_CTS) {
 8008c70:	f1b8 0f01 	cmp.w	r8, #1
 8008c74:	d104      	bne.n	8008c80 <hal_uart_config+0x60>
        hal_gpio_init_stm(cfg->suc_pin_rts, &gpio);
 8008c76:	a902      	add	r1, sp, #8
 8008c78:	f997 000e 	ldrsb.w	r0, [r7, #14]
 8008c7c:	f000 f9c0 	bl	8009000 <hal_gpio_init_stm>
    gpio.Mode = GPIO_MODE_AF_INPUT;
 8008c80:	2300      	movs	r3, #0
    hal_gpio_init_stm(cfg->suc_pin_rx, &gpio);
 8008c82:	a902      	add	r1, sp, #8
 8008c84:	f997 000d 	ldrsb.w	r0, [r7, #13]
    gpio.Mode = GPIO_MODE_AF_INPUT;
 8008c88:	9303      	str	r3, [sp, #12]
    hal_gpio_init_stm(cfg->suc_pin_rx, &gpio);
 8008c8a:	f000 f9b9 	bl	8009000 <hal_gpio_init_stm>
    if (flow_ctl == HAL_UART_FLOW_CTL_RTS_CTS) {
 8008c8e:	f1b8 0f01 	cmp.w	r8, #1
 8008c92:	d104      	bne.n	8008c9e <hal_uart_config+0x7e>
        hal_gpio_init_stm(cfg->suc_pin_cts, &gpio);
 8008c94:	a902      	add	r1, sp, #8
 8008c96:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8008c9a:	f000 f9b1 	bl	8009000 <hal_gpio_init_stm>
    if (cfg->suc_pin_remap_fn) {
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	b103      	cbz	r3, 8008ca4 <hal_uart_config+0x84>
        cfg->suc_pin_remap_fn();
 8008ca2:	4798      	blx	r3
    cr1 = cfg->suc_uart->CR1;
 8008ca4:	683a      	ldr	r2, [r7, #0]
    switch (databits) {
 8008ca6:	f1bb 0f08 	cmp.w	fp, #8
    cr1 = cfg->suc_uart->CR1;
 8008caa:	68d3      	ldr	r3, [r2, #12]
    cr2 = cfg->suc_uart->CR2;
 8008cac:	6910      	ldr	r0, [r2, #16]
    cr1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_RE);
 8008cae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
    cr3 = cfg->suc_uart->CR3;
 8008cb2:	6951      	ldr	r1, [r2, #20]
    cr1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_RE);
 8008cb4:	f023 0304 	bic.w	r3, r3, #4
    cr2 &= ~(USART_CR2_STOP);
 8008cb8:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
    switch (databits) {
 8008cbc:	d004      	beq.n	8008cc8 <hal_uart_config+0xa8>
 8008cbe:	f1bb 0f09 	cmp.w	fp, #9
 8008cc2:	d1c4      	bne.n	8008c4e <hal_uart_config+0x2e>
        cr1 |= UART_WORDLENGTH_9B;
 8008cc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
        return -1;
    }

    switch (stopbits) {
 8008cc8:	f1ba 0f01 	cmp.w	sl, #1
 8008ccc:	d005      	beq.n	8008cda <hal_uart_config+0xba>
 8008cce:	f1ba 0f02 	cmp.w	sl, #2
 8008cd2:	f040 80d9 	bne.w	8008e88 <hal_uart_config+0x268>
    case 1:
        cr2 |= UART_STOPBITS_1;
        break;
    case 2:
        cr2 |= UART_STOPBITS_2;
 8008cd6:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
        break;
    default:
        return -1;
    }

    switch (parity) {
 8008cda:	f1b9 0f01 	cmp.w	r9, #1
 8008cde:	f000 80a2 	beq.w	8008e26 <hal_uart_config+0x206>
 8008ce2:	f1b9 0f02 	cmp.w	r9, #2
 8008ce6:	f000 80a1 	beq.w	8008e2c <hal_uart_config+0x20c>
    case HAL_UART_PARITY_EVEN:
        cr1 |= UART_PARITY_EVEN;
        break;
    }

    switch (flow_ctl) {
 8008cea:	f1b8 0f01 	cmp.w	r8, #1
    cr3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE);
 8008cee:	f421 7c40 	bic.w	ip, r1, #768	; 0x300
    switch (flow_ctl) {
 8008cf2:	d109      	bne.n	8008d08 <hal_uart_config+0xe8>
    case HAL_UART_FLOW_CTL_NONE:
        cr3 |= UART_HWCONTROL_NONE;
        break;
    case HAL_UART_FLOW_CTL_RTS_CTS:
        cr3 |= UART_HWCONTROL_RTS_CTS;
        if (cfg->suc_pin_rts < 0 || cfg->suc_pin_cts < 0) {
 8008cf4:	f997 100e 	ldrsb.w	r1, [r7, #14]
        cr3 |= UART_HWCONTROL_RTS_CTS;
 8008cf8:	f44c 7c40 	orr.w	ip, ip, #768	; 0x300
        if (cfg->suc_pin_rts < 0 || cfg->suc_pin_cts < 0) {
 8008cfc:	2900      	cmp	r1, #0
 8008cfe:	dba6      	blt.n	8008c4e <hal_uart_config+0x2e>
 8008d00:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8008d04:	2900      	cmp	r1, #0
 8008d06:	dba2      	blt.n	8008c4e <hal_uart_config+0x2e>
    cr1 |= (UART_MODE_RX | UART_MODE_TX | UART_OVERSAMPLING_16);
#else
    cr1 |= (UART_MODE_TX_RX | UART_OVERSAMPLING_16);
#endif

    *cfg->suc_rcc_reg |= cfg->suc_rcc_dev;
 8008d08:	f8d7 8004 	ldr.w	r8, [r7, #4]
    cr1 |= (UART_MODE_TX_RX | UART_OVERSAMPLING_16);
 8008d0c:	f043 0e0c 	orr.w	lr, r3, #12
    *cfg->suc_rcc_reg |= cfg->suc_rcc_dev;
 8008d10:	f8d8 1000 	ldr.w	r1, [r8]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	00a4      	lsls	r4, r4, #2
 8008d18:	4319      	orrs	r1, r3
 8008d1a:	f8c8 1000 	str.w	r1, [r8]
        hal_gpio_init_af(cfg->suc_pin_rts, cfg->suc_pin_af, 0, 0);
        hal_gpio_init_af(cfg->suc_pin_cts, cfg->suc_pin_af, 0, 0);
    }
#endif

    u->u_regs = cfg->suc_uart;
 8008d1e:	211c      	movs	r1, #28
 8008d20:	4371      	muls	r1, r6
    u->u_regs->CR2 = cr2;
    u->u_regs->CR1 = cr1;
#ifdef USART6_BASE
    if (cfg->suc_uart == USART1 || cfg->suc_uart == USART6) {
#else
    if (cfg->suc_uart == USART1) {
 8008d22:	4b5c      	ldr	r3, [pc, #368]	; (8008e94 <hal_uart_config+0x274>)
    u->u_regs = cfg->suc_uart;
 8008d24:	506a      	str	r2, [r5, r1]
    if (cfg->suc_uart == USART1) {
 8008d26:	429a      	cmp	r2, r3
    u->u_regs->CR3 = cr3;
 8008d28:	f8c2 c014 	str.w	ip, [r2, #20]
 8008d2c:	9101      	str	r1, [sp, #4]
    u->u_regs->CR2 = cr2;
 8008d2e:	6110      	str	r0, [r2, #16]
    u->u_regs->CR1 = cr1;
 8008d30:	f8c2 e00c 	str.w	lr, [r2, #12]
    if (cfg->suc_uart == USART1) {
 8008d34:	d17d      	bne.n	8008e32 <hal_uart_config+0x212>
#endif
#if MYNEWT_VAL(MCU_STM32F0)
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
#else
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK2Freq(), baudrate);
 8008d36:	f000 feab 	bl	8009a90 <HAL_RCC_GetPCLK2Freq>
 8008d3a:	f04f 0819 	mov.w	r8, #25
 8008d3e:	4681      	mov	r9, r0
 8008d40:	f000 fea6 	bl	8009a90 <HAL_RCC_GetPCLK2Freq>
 8008d44:	fb08 f000 	mul.w	r0, r8, r0
 8008d48:	fbb0 fbf4 	udiv	fp, r0, r4
 8008d4c:	f000 fea0 	bl	8009a90 <HAL_RCC_GetPCLK2Freq>
 8008d50:	9000      	str	r0, [sp, #0]
 8008d52:	f000 fe9d 	bl	8009a90 <HAL_RCC_GetPCLK2Freq>
 8008d56:	fb08 f000 	mul.w	r0, r8, r0
 8008d5a:	fbb0 faf4 	udiv	sl, r0, r4
 8008d5e:	f000 fe97 	bl	8009a90 <HAL_RCC_GetPCLK2Freq>
 8008d62:	9b00      	ldr	r3, [sp, #0]
 8008d64:	9901      	ldr	r1, [sp, #4]
 8008d66:	fb08 f303 	mul.w	r3, r8, r3
 8008d6a:	f855 c001 	ldr.w	ip, [r5, r1]
 8008d6e:	fbb3 f3f4 	udiv	r3, r3, r4
 8008d72:	2164      	movs	r1, #100	; 0x64
 8008d74:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d78:	fb01 b313 	mls	r3, r1, r3, fp
#endif

    } else {
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
 8008d7c:	fb08 f200 	mul.w	r2, r8, r0
 8008d80:	fbb2 f2f4 	udiv	r2, r2, r4
 8008d84:	fbb2 f2f1 	udiv	r2, r2, r1
 8008d88:	fb08 f809 	mul.w	r8, r8, r9
 8008d8c:	fbb8 f4f4 	udiv	r4, r8, r4
 8008d90:	fb01 a212 	mls	r2, r1, r2, sl
 8008d94:	011b      	lsls	r3, r3, #4
 8008d96:	0112      	lsls	r2, r2, #4
 8008d98:	3332      	adds	r3, #50	; 0x32
 8008d9a:	3232      	adds	r2, #50	; 0x32
 8008d9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008da0:	fbb2 f2f1 	udiv	r2, r2, r1
 8008da4:	fbb4 f1f1 	udiv	r1, r4, r1
 8008da8:	f002 020f 	and.w	r2, r2, #15
 8008dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008db0:	4313      	orrs	r3, r2
 8008db2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    }

    (void)RXDR(u->u_regs);
 8008db6:	231c      	movs	r3, #28
 8008db8:	4373      	muls	r3, r6
 8008dba:	58ea      	ldr	r2, [r5, r3]
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
 8008dbc:	f8cc 1008 	str.w	r1, [ip, #8]
    (void)RXDR(u->u_regs);
 8008dc0:	6853      	ldr	r3, [r2, #4]
    (void)STATUS(u->u_regs);
 8008dc2:	6813      	ldr	r3, [r2, #0]
    hal_uart_set_nvic(cfg->suc_irqn, u);
 8008dc4:	f997 3014 	ldrsb.w	r3, [r7, #20]
    switch (irqn) {
 8008dc8:	2b26      	cmp	r3, #38	; 0x26
 8008dca:	d057      	beq.n	8008e7c <hal_uart_config+0x25c>
 8008dcc:	2b27      	cmp	r3, #39	; 0x27
 8008dce:	d058      	beq.n	8008e82 <hal_uart_config+0x262>
 8008dd0:	2b25      	cmp	r3, #37	; 0x25
 8008dd2:	f47f af3c 	bne.w	8008c4e <hal_uart_config+0x2e>
        isr = (uint32_t)&uart_irq1;
 8008dd6:	4930      	ldr	r1, [pc, #192]	; (8008e98 <hal_uart_config+0x278>)
        ui = &uart_irqs[0];
 8008dd8:	4830      	ldr	r0, [pc, #192]	; (8008e9c <hal_uart_config+0x27c>)
    u = &uarts[port];
 8008dda:	241c      	movs	r4, #28
 8008ddc:	fb04 5406 	mla	r4, r4, r6, r5
        ui->ui_uart = uart;
 8008de0:	6004      	str	r4, [r0, #0]
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8008de2:	482f      	ldr	r0, [pc, #188]	; (8008ea0 <hal_uart_config+0x280>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008de4:	f103 0410 	add.w	r4, r3, #16
  uint32_t vectors = (uint32_t )SCB->VTOR;
 8008de8:	6880      	ldr	r0, [r0, #8]
  if ((int32_t)(IRQn) >= 0)
 8008dea:	2b00      	cmp	r3, #0
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 8008dec:	f840 1024 	str.w	r1, [r0, r4, lsl #2]
  if ((int32_t)(IRQn) >= 0)
 8008df0:	db08      	blt.n	8008e04 <hal_uart_config+0x1e4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008df2:	2101      	movs	r1, #1
 8008df4:	0958      	lsrs	r0, r3, #5
 8008df6:	f003 031f 	and.w	r3, r3, #31
 8008dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8008dfe:	4929      	ldr	r1, [pc, #164]	; (8008ea4 <hal_uart_config+0x284>)
 8008e00:	f841 3020 	str.w	r3, [r1, r0, lsl #2]

    u->u_regs->CR1 |= (USART_CR1_RXNEIE | USART_CR1_UE);
 8008e04:	68d3      	ldr	r3, [r2, #12]
    u->u_open = 1;

    return 0;
 8008e06:	2000      	movs	r0, #0
    u->u_regs->CR1 |= (USART_CR1_RXNEIE | USART_CR1_UE);
 8008e08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008e0c:	f043 0320 	orr.w	r3, r3, #32
 8008e10:	60d3      	str	r3, [r2, #12]
    u->u_open = 1;
 8008e12:	231c      	movs	r3, #28
 8008e14:	fb03 5506 	mla	r5, r3, r6, r5
 8008e18:	792b      	ldrb	r3, [r5, #4]
 8008e1a:	f043 0301 	orr.w	r3, r3, #1
 8008e1e:	712b      	strb	r3, [r5, #4]
}
 8008e20:	b007      	add	sp, #28
 8008e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cr1 |= UART_PARITY_ODD;
 8008e26:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
        break;
 8008e2a:	e75e      	b.n	8008cea <hal_uart_config+0xca>
        cr1 |= UART_PARITY_EVEN;
 8008e2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
        break;
 8008e30:	e75b      	b.n	8008cea <hal_uart_config+0xca>
        u->u_regs->BRR = BAUD(HAL_RCC_GetPCLK1Freq(), baudrate);
 8008e32:	f000 fe1d 	bl	8009a70 <HAL_RCC_GetPCLK1Freq>
 8008e36:	f04f 0819 	mov.w	r8, #25
 8008e3a:	4681      	mov	r9, r0
 8008e3c:	f000 fe18 	bl	8009a70 <HAL_RCC_GetPCLK1Freq>
 8008e40:	fb08 f000 	mul.w	r0, r8, r0
 8008e44:	fbb0 f3f4 	udiv	r3, r0, r4
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	f000 fe11 	bl	8009a70 <HAL_RCC_GetPCLK1Freq>
 8008e4e:	4683      	mov	fp, r0
 8008e50:	f000 fe0e 	bl	8009a70 <HAL_RCC_GetPCLK1Freq>
 8008e54:	fb08 f000 	mul.w	r0, r8, r0
 8008e58:	fbb0 faf4 	udiv	sl, r0, r4
 8008e5c:	f000 fe08 	bl	8009a70 <HAL_RCC_GetPCLK1Freq>
 8008e60:	fb08 f30b 	mul.w	r3, r8, fp
 8008e64:	9901      	ldr	r1, [sp, #4]
 8008e66:	fbb3 f3f4 	udiv	r3, r3, r4
 8008e6a:	f855 c001 	ldr.w	ip, [r5, r1]
 8008e6e:	2164      	movs	r1, #100	; 0x64
 8008e70:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e74:	9a00      	ldr	r2, [sp, #0]
 8008e76:	fb01 2313 	mls	r3, r1, r3, r2
 8008e7a:	e77f      	b.n	8008d7c <hal_uart_config+0x15c>
        isr = (uint32_t)&uart_irq2;
 8008e7c:	490a      	ldr	r1, [pc, #40]	; (8008ea8 <hal_uart_config+0x288>)
        ui = &uart_irqs[1];
 8008e7e:	480b      	ldr	r0, [pc, #44]	; (8008eac <hal_uart_config+0x28c>)
 8008e80:	e7ab      	b.n	8008dda <hal_uart_config+0x1ba>
        isr = (uint32_t)&uart_irq3;
 8008e82:	490b      	ldr	r1, [pc, #44]	; (8008eb0 <hal_uart_config+0x290>)
        ui = &uart_irqs[2];
 8008e84:	480b      	ldr	r0, [pc, #44]	; (8008eb4 <hal_uart_config+0x294>)
 8008e86:	e7a8      	b.n	8008dda <hal_uart_config+0x1ba>
        return -1;
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8c:	e7c8      	b.n	8008e20 <hal_uart_config+0x200>
 8008e8e:	bf00      	nop
 8008e90:	20002b94 	.word	0x20002b94
 8008e94:	40013800 	.word	0x40013800
 8008e98:	08008b49 	.word	0x08008b49
 8008e9c:	20002b7c 	.word	0x20002b7c
 8008ea0:	e000ed00 	.word	0xe000ed00
 8008ea4:	e000e100 	.word	0xe000e100
 8008ea8:	08008b4f 	.word	0x08008b4f
 8008eac:	20002b84 	.word	0x20002b84
 8008eb0:	08008b55 	.word	0x08008b55
 8008eb4:	20002b8c 	.word	0x20002b8c

08008eb8 <hal_uart_init>:
int
hal_uart_init(int port, void *arg)
{
    struct hal_uart *u;

    if (port >= UART_CNT) {
 8008eb8:	2800      	cmp	r0, #0
        return -1;
    }
    u = &uarts[port];
    u->u_cfg = (const struct stm32_uart_cfg *)arg;
 8008eba:	bfdf      	itttt	le
 8008ebc:	221c      	movle	r2, #28
 8008ebe:	4b04      	ldrle	r3, [pc, #16]	; (8008ed0 <hal_uart_init+0x18>)
 8008ec0:	fb02 3000 	mlale	r0, r2, r0, r3
 8008ec4:	6181      	strle	r1, [r0, #24]

    return 0;
 8008ec6:	bfd4      	ite	le
 8008ec8:	2000      	movle	r0, #0
        return -1;
 8008eca:	f04f 30ff 	movgt.w	r0, #4294967295
}
 8008ece:	4770      	bx	lr
 8008ed0:	20002b94 	.word	0x20002b94

08008ed4 <hal_uart_close>:
int
hal_uart_close(int port)
{
    struct hal_uart *u;

    if (port >= UART_CNT) {
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	dc0b      	bgt.n	8008ef0 <hal_uart_close+0x1c>
        return -1;
    }
    u = &uarts[port];

    u->u_open = 0;
 8008ed8:	231c      	movs	r3, #28
 8008eda:	4358      	muls	r0, r3
 8008edc:	4a06      	ldr	r2, [pc, #24]	; (8008ef8 <hal_uart_close+0x24>)
 8008ede:	1813      	adds	r3, r2, r0
 8008ee0:	7919      	ldrb	r1, [r3, #4]
 8008ee2:	f36f 0100 	bfc	r1, #0, #1
 8008ee6:	7119      	strb	r1, [r3, #4]
    u->u_regs->CR1 = 0;
 8008ee8:	5813      	ldr	r3, [r2, r0]
 8008eea:	2000      	movs	r0, #0
 8008eec:	60d8      	str	r0, [r3, #12]

    return 0;
 8008eee:	4770      	bx	lr
        return -1;
 8008ef0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	20002b94 	.word	0x20002b94

08008efc <hal_watchdog_init>:
{
    uint32_t reload;

    /* Max prescaler is 256 */
    reload = 32768 / 256;
    reload = (reload * expire_msecs) / 1000;
 8008efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f00:	01c0      	lsls	r0, r0, #7
 8008f02:	fbb0 f0f3 	udiv	r0, r0, r3

    /* Check to make sure we are not trying a reload value that is too large */
    if (reload > IWDG_RLR_RL) {
 8008f06:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
        return -1;
    }

    g_wdt_cfg.Instance = IWDG;
    g_wdt_cfg.Init.Prescaler = IWDG_PRESCALER_256;
 8008f0a:	bf3f      	itttt	cc
 8008f0c:	2206      	movcc	r2, #6
    g_wdt_cfg.Instance = IWDG;
 8008f0e:	4b05      	ldrcc	r3, [pc, #20]	; (8008f24 <hal_watchdog_init+0x28>)
    g_wdt_cfg.Init.Prescaler = IWDG_PRESCALER_256;
 8008f10:	4905      	ldrcc	r1, [pc, #20]	; (8008f28 <hal_watchdog_init+0x2c>)
    g_wdt_cfg.Init.Reload = reload;
 8008f12:	6098      	strcc	r0, [r3, #8]
    g_wdt_cfg.Init.Prescaler = IWDG_PRESCALER_256;
 8008f14:	bf3a      	itte	cc
 8008f16:	e9c3 1200 	strdcc	r1, r2, [r3]
    STM32_HAL_WATCHDOG_CUSTOM_INIT(&g_wdt_cfg);

    return 0;
 8008f1a:	2000      	movcc	r0, #0
        return -1;
 8008f1c:	f04f 30ff 	movcs.w	r0, #4294967295
}
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	20003544 	.word	0x20003544
 8008f28:	40003000 	.word	0x40003000

08008f2c <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    __HAL_DBGMCU_FREEZE_IWDG();
 8008f2c:	4a03      	ldr	r2, [pc, #12]	; (8008f3c <hal_watchdog_enable+0x10>)
    HAL_IWDG_Init(&g_wdt_cfg);
 8008f2e:	4804      	ldr	r0, [pc, #16]	; (8008f40 <hal_watchdog_enable+0x14>)
    __HAL_DBGMCU_FREEZE_IWDG();
 8008f30:	6853      	ldr	r3, [r2, #4]
 8008f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f36:	6053      	str	r3, [r2, #4]
    HAL_IWDG_Init(&g_wdt_cfg);
 8008f38:	f000 bb08 	b.w	800954c <HAL_IWDG_Init>
 8008f3c:	e0042000 	.word	0xe0042000
 8008f40:	20003544 	.word	0x20003544

08008f44 <hal_watchdog_tickle>:
}

void
hal_watchdog_tickle(void)
{
    HAL_IWDG_Refresh(&g_wdt_cfg);
 8008f44:	4801      	ldr	r0, [pc, #4]	; (8008f4c <hal_watchdog_tickle+0x8>)
 8008f46:	f000 bb22 	b.w	800958e <HAL_IWDG_Refresh>
 8008f4a:	bf00      	nop
 8008f4c:	20003544 	.word	0x20003544

08008f50 <_sbrk>:
extern char __HeapBase;
extern char __HeapLimit;

void *
_sbrk(int incr)
{
 8008f50:	4a09      	ldr	r2, [pc, #36]	; (8008f78 <_sbrk+0x28>)
    static char *brk = &__HeapBase;

    void *prev_brk;

    if (incr < 0) {
 8008f52:	2800      	cmp	r0, #0
 8008f54:	6813      	ldr	r3, [r2, #0]
 8008f56:	da06      	bge.n	8008f66 <_sbrk+0x16>
        /* Returning memory to the heap. */
        incr = -incr;
        if (brk - incr < &__HeapBase) {
 8008f58:	4908      	ldr	r1, [pc, #32]	; (8008f7c <_sbrk+0x2c>)
 8008f5a:	4418      	add	r0, r3
 8008f5c:	4288      	cmp	r0, r1
 8008f5e:	d308      	bcc.n	8008f72 <_sbrk+0x22>
        }
    } else {
        /* Allocating memory from the heap. */
        if (&__HeapLimit - brk >= incr) {
            prev_brk = brk;
            brk += incr;
 8008f60:	6010      	str	r0, [r2, #0]
            prev_brk = (void *)-1;
        }
    }

    return prev_brk;
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	4770      	bx	lr
        if (&__HeapLimit - brk >= incr) {
 8008f66:	4906      	ldr	r1, [pc, #24]	; (8008f80 <_sbrk+0x30>)
 8008f68:	1ac9      	subs	r1, r1, r3
 8008f6a:	4281      	cmp	r1, r0
 8008f6c:	db01      	blt.n	8008f72 <_sbrk+0x22>
            brk += incr;
 8008f6e:	4418      	add	r0, r3
 8008f70:	e7f6      	b.n	8008f60 <_sbrk+0x10>
            prev_brk = (void *)-1;
 8008f72:	f04f 33ff 	mov.w	r3, #4294967295
    return prev_brk;
 8008f76:	e7f4      	b.n	8008f62 <_sbrk+0x12>
 8008f78:	200001d4 	.word	0x200001d4
 8008f7c:	20003578 	.word	0x20003578
 8008f80:	20005000 	.word	0x20005000

08008f84 <hal_gpio_clk_enable>:
 * @param port_idx
 */
static void
hal_gpio_clk_enable(uint32_t port_idx)
{
    switch (port_idx) {
 8008f84:	3801      	subs	r0, #1
{
 8008f86:	b086      	sub	sp, #24
 8008f88:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <hal_gpio_clk_enable+0x78>)
    switch (port_idx) {
 8008f8a:	2803      	cmp	r0, #3
 8008f8c:	d803      	bhi.n	8008f96 <hal_gpio_clk_enable+0x12>
 8008f8e:	e8df f000 	tbb	[pc, r0]
 8008f92:	170d      	.short	0x170d
 8008f94:	2b21      	.short	0x2b21
#if defined GPIOA_BASE
    case 0:
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f96:	699a      	ldr	r2, [r3, #24]
 8008f98:	f042 0204 	orr.w	r2, r2, #4
 8008f9c:	619a      	str	r2, [r3, #24]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	9301      	str	r3, [sp, #4]
 8008fa6:	9b01      	ldr	r3, [sp, #4]
#endif
    default:
        assert(0);
        break;
    }
}
 8008fa8:	b006      	add	sp, #24
 8008faa:	4770      	bx	lr
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8008fac:	699a      	ldr	r2, [r3, #24]
 8008fae:	f042 0208 	orr.w	r2, r2, #8
 8008fb2:	619a      	str	r2, [r3, #24]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	f003 0308 	and.w	r3, r3, #8
 8008fba:	9302      	str	r3, [sp, #8]
 8008fbc:	9b02      	ldr	r3, [sp, #8]
        break;
 8008fbe:	e7f3      	b.n	8008fa8 <hal_gpio_clk_enable+0x24>
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8008fc0:	699a      	ldr	r2, [r3, #24]
 8008fc2:	f042 0210 	orr.w	r2, r2, #16
 8008fc6:	619a      	str	r2, [r3, #24]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	f003 0310 	and.w	r3, r3, #16
 8008fce:	9303      	str	r3, [sp, #12]
 8008fd0:	9b03      	ldr	r3, [sp, #12]
        break;
 8008fd2:	e7e9      	b.n	8008fa8 <hal_gpio_clk_enable+0x24>
        __HAL_RCC_GPIOD_CLK_ENABLE();
 8008fd4:	699a      	ldr	r2, [r3, #24]
 8008fd6:	f042 0220 	orr.w	r2, r2, #32
 8008fda:	619a      	str	r2, [r3, #24]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	f003 0320 	and.w	r3, r3, #32
 8008fe2:	9304      	str	r3, [sp, #16]
 8008fe4:	9b04      	ldr	r3, [sp, #16]
        break;
 8008fe6:	e7df      	b.n	8008fa8 <hal_gpio_clk_enable+0x24>
        __HAL_RCC_GPIOE_CLK_ENABLE();
 8008fe8:	699a      	ldr	r2, [r3, #24]
 8008fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fee:	619a      	str	r2, [r3, #24]
 8008ff0:	699b      	ldr	r3, [r3, #24]
 8008ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff6:	9305      	str	r3, [sp, #20]
 8008ff8:	9b05      	ldr	r3, [sp, #20]
}
 8008ffa:	e7d5      	b.n	8008fa8 <hal_gpio_clk_enable+0x24>
 8008ffc:	40021000 	.word	0x40021000

08009000 <hal_gpio_init_stm>:
 *
 * @return int
 */
int
hal_gpio_init_stm(int pin, GPIO_InitTypeDef *cfg)
{
 8009000:	b510      	push	{r4, lr}
    int port;
    uint32_t mcu_pin_mask;

    /* Is this a valid pin? */
    port = MCU_GPIO_PIN_PORT(pin);
 8009002:	f3c0 1403 	ubfx	r4, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 8009006:	2c04      	cmp	r4, #4
 8009008:	dc0f      	bgt.n	800902a <hal_gpio_init_stm+0x2a>
        return -1;
    }

    mcu_pin_mask = GPIO_MASK(pin);
 800900a:	2301      	movs	r3, #1
 800900c:	f000 000f 	and.w	r0, r0, #15
 8009010:	fa03 f000 	lsl.w	r0, r3, r0
    cfg->Pin = mcu_pin_mask;
 8009014:	6008      	str	r0, [r1, #0]

    /* Enable the GPIO clock */
    hal_gpio_clk_enable(port);
 8009016:	4620      	mov	r0, r4
 8009018:	f7ff ffb4 	bl	8008f84 <hal_gpio_clk_enable>

    /* Initialize pin as an input, setting proper mode */
    HAL_GPIO_Init(portmap[port], cfg);
 800901c:	4b04      	ldr	r3, [pc, #16]	; (8009030 <hal_gpio_init_stm+0x30>)
 800901e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009022:	f000 f943 	bl	80092ac <HAL_GPIO_Init>

    return 0;
 8009026:	2000      	movs	r0, #0
}
 8009028:	bd10      	pop	{r4, pc}
        return -1;
 800902a:	f04f 30ff 	mov.w	r0, #4294967295
 800902e:	e7fb      	b.n	8009028 <hal_gpio_init_stm+0x28>
 8009030:	0800e468 	.word	0x0800e468

08009034 <hal_gpio_deinit_stm>:
{
    int port;
    uint32_t mcu_pin_mask;

    /* Is this a valid pin? */
    port = MCU_GPIO_PIN_PORT(pin);
 8009034:	f3c0 1203 	ubfx	r2, r0, #4, #4
    if (port >= HAL_GPIO_PORT_COUNT) {
 8009038:	2a04      	cmp	r2, #4
{
 800903a:	b508      	push	{r3, lr}
    if (port >= HAL_GPIO_PORT_COUNT) {
 800903c:	dc0c      	bgt.n	8009058 <hal_gpio_deinit_stm+0x24>
        return -1;
    }

    mcu_pin_mask = GPIO_MASK(pin);
 800903e:	f000 030f 	and.w	r3, r0, #15
 8009042:	2001      	movs	r0, #1
 8009044:	4098      	lsls	r0, r3
    cfg->Pin = mcu_pin_mask;

    /* Initialize pin as an input, setting proper mode */
    HAL_GPIO_DeInit(portmap[port], cfg->Pin);
 8009046:	4b06      	ldr	r3, [pc, #24]	; (8009060 <hal_gpio_deinit_stm+0x2c>)
    cfg->Pin = mcu_pin_mask;
 8009048:	6008      	str	r0, [r1, #0]
    HAL_GPIO_DeInit(portmap[port], cfg->Pin);
 800904a:	4601      	mov	r1, r0
 800904c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009050:	f000 fa0c 	bl	800946c <HAL_GPIO_DeInit>

    return 0;
 8009054:	2000      	movs	r0, #0
}
 8009056:	bd08      	pop	{r3, pc}
        return -1;
 8009058:	f04f 30ff 	mov.w	r0, #4294967295
 800905c:	e7fb      	b.n	8009056 <hal_gpio_deinit_stm+0x22>
 800905e:	bf00      	nop
 8009060:	0800e468 	.word	0x0800e468

08009064 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8009064:	4a11      	ldr	r2, [pc, #68]	; (80090ac <FLASH_SetErrorCode+0x48>)
 8009066:	68d3      	ldr	r3, [r2, #12]
 8009068:	f013 0310 	ands.w	r3, r3, #16
 800906c:	d005      	beq.n	800907a <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800906e:	4910      	ldr	r1, [pc, #64]	; (80090b0 <FLASH_SetErrorCode+0x4c>)
 8009070:	69cb      	ldr	r3, [r1, #28]
 8009072:	f043 0302 	orr.w	r3, r3, #2
 8009076:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8009078:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800907a:	68d2      	ldr	r2, [r2, #12]
 800907c:	0750      	lsls	r0, r2, #29
 800907e:	d506      	bpl.n	800908e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8009080:	490b      	ldr	r1, [pc, #44]	; (80090b0 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8009082:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8009086:	69ca      	ldr	r2, [r1, #28]
 8009088:	f042 0201 	orr.w	r2, r2, #1
 800908c:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800908e:	4a07      	ldr	r2, [pc, #28]	; (80090ac <FLASH_SetErrorCode+0x48>)
 8009090:	69d1      	ldr	r1, [r2, #28]
 8009092:	07c9      	lsls	r1, r1, #31
 8009094:	d508      	bpl.n	80090a8 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8009096:	4806      	ldr	r0, [pc, #24]	; (80090b0 <FLASH_SetErrorCode+0x4c>)
 8009098:	69c1      	ldr	r1, [r0, #28]
 800909a:	f041 0104 	orr.w	r1, r1, #4
 800909e:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80090a0:	69d1      	ldr	r1, [r2, #28]
 80090a2:	f021 0101 	bic.w	r1, r1, #1
 80090a6:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80090a8:	60d3      	str	r3, [r2, #12]
}  
 80090aa:	4770      	bx	lr
 80090ac:	40022000 	.word	0x40022000
 80090b0:	20003550 	.word	0x20003550

080090b4 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80090b4:	4b06      	ldr	r3, [pc, #24]	; (80090d0 <HAL_FLASH_Unlock+0x1c>)
 80090b6:	691a      	ldr	r2, [r3, #16]
 80090b8:	0612      	lsls	r2, r2, #24
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80090ba:	bf41      	itttt	mi
 80090bc:	4a05      	ldrmi	r2, [pc, #20]	; (80090d4 <HAL_FLASH_Unlock+0x20>)
  return HAL_OK; 
 80090be:	2000      	movmi	r0, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80090c0:	605a      	strmi	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80090c2:	f102 3288 	addmi.w	r2, r2, #2290649224	; 0x88888888
 80090c6:	bf4c      	ite	mi
 80090c8:	605a      	strmi	r2, [r3, #4]
    return HAL_ERROR;
 80090ca:	2001      	movpl	r0, #1
}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	40022000 	.word	0x40022000
 80090d4:	45670123 	.word	0x45670123

080090d8 <FLASH_WaitForLastOperation>:
{
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 80090dc:	f7ff fb9a 	bl	8008814 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80090e0:	4c11      	ldr	r4, [pc, #68]	; (8009128 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 80090e2:	4607      	mov	r7, r0
 80090e4:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80090e6:	68e3      	ldr	r3, [r4, #12]
 80090e8:	07d8      	lsls	r0, r3, #31
 80090ea:	d412      	bmi.n	8009112 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80090ec:	68e3      	ldr	r3, [r4, #12]
 80090ee:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80090f0:	bf44      	itt	mi
 80090f2:	2320      	movmi	r3, #32
 80090f4:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80090f6:	68eb      	ldr	r3, [r5, #12]
 80090f8:	06da      	lsls	r2, r3, #27
 80090fa:	d406      	bmi.n	800910a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80090fc:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80090fe:	07db      	lsls	r3, r3, #31
 8009100:	d403      	bmi.n	800910a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8009102:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8009104:	f010 0004 	ands.w	r0, r0, #4
 8009108:	d007      	beq.n	800911a <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 800910a:	f7ff ffab 	bl	8009064 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800910e:	2001      	movs	r0, #1
 8009110:	e003      	b.n	800911a <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8009112:	1c73      	adds	r3, r6, #1
 8009114:	d0e7      	beq.n	80090e6 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8009116:	b90e      	cbnz	r6, 800911c <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8009118:	2003      	movs	r0, #3
}
 800911a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800911c:	f7ff fb7a 	bl	8008814 <HAL_GetTick>
 8009120:	1bc0      	subs	r0, r0, r7
 8009122:	42b0      	cmp	r0, r6
 8009124:	d9df      	bls.n	80090e6 <FLASH_WaitForLastOperation+0xe>
 8009126:	e7f7      	b.n	8009118 <FLASH_WaitForLastOperation+0x40>
 8009128:	40022000 	.word	0x40022000

0800912c <HAL_FLASH_Program>:
{
 800912c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8009130:	4c24      	ldr	r4, [pc, #144]	; (80091c4 <HAL_FLASH_Program+0x98>)
{
 8009132:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8009134:	7e23      	ldrb	r3, [r4, #24]
{
 8009136:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8009138:	2b01      	cmp	r3, #1
{
 800913a:	460f      	mov	r7, r1
 800913c:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 800913e:	d03f      	beq.n	80091c0 <HAL_FLASH_Program+0x94>
 8009140:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009142:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8009146:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009148:	f7ff ffc6 	bl	80090d8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800914c:	bba0      	cbnz	r0, 80091b8 <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800914e:	2d01      	cmp	r5, #1
 8009150:	d003      	beq.n	800915a <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8009152:	2d02      	cmp	r5, #2
 8009154:	bf0c      	ite	eq
 8009156:	2502      	moveq	r5, #2
 8009158:	2504      	movne	r5, #4
 800915a:	f04f 0900 	mov.w	r9, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800915e:	46cb      	mov	fp, r9
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009160:	f8df a064 	ldr.w	sl, [pc, #100]	; 80091c8 <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8009164:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8009168:	f1c3 0120 	rsb	r1, r3, #32
 800916c:	f1a3 0220 	sub.w	r2, r3, #32
 8009170:	fa06 f101 	lsl.w	r1, r6, r1
 8009174:	fa28 f303 	lsr.w	r3, r8, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009178:	f8c4 b01c 	str.w	fp, [r4, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800917c:	430b      	orrs	r3, r1
 800917e:	fa26 f202 	lsr.w	r2, r6, r2
 8009182:	4313      	orrs	r3, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009184:	f8da 2010 	ldr.w	r2, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8009188:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800918a:	f042 0201 	orr.w	r2, r2, #1
 800918e:	f8ca 2010 	str.w	r2, [sl, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8009192:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8009196:	f827 3019 	strh.w	r3, [r7, r9, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800919a:	f7ff ff9d 	bl	80090d8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800919e:	f8da 3010 	ldr.w	r3, [sl, #16]
 80091a2:	f023 0301 	bic.w	r3, r3, #1
 80091a6:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 80091aa:	b928      	cbnz	r0, 80091b8 <HAL_FLASH_Program+0x8c>
 80091ac:	f109 0901 	add.w	r9, r9, #1
    for (index = 0U; index < nbiterations; index++)
 80091b0:	fa5f f389 	uxtb.w	r3, r9
 80091b4:	429d      	cmp	r5, r3
 80091b6:	d8d5      	bhi.n	8009164 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 80091b8:	2300      	movs	r3, #0
 80091ba:	7623      	strb	r3, [r4, #24]
}
 80091bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80091c0:	2002      	movs	r0, #2
 80091c2:	e7fb      	b.n	80091bc <HAL_FLASH_Program+0x90>
 80091c4:	20003550 	.word	0x20003550
 80091c8:	40022000 	.word	0x40022000

080091cc <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091cc:	2200      	movs	r2, #0
 80091ce:	4b06      	ldr	r3, [pc, #24]	; (80091e8 <FLASH_MassErase.isra.0+0x1c>)
 80091d0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80091d2:	4b06      	ldr	r3, [pc, #24]	; (80091ec <FLASH_MassErase.isra.0+0x20>)
 80091d4:	691a      	ldr	r2, [r3, #16]
 80091d6:	f042 0204 	orr.w	r2, r2, #4
 80091da:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80091dc:	691a      	ldr	r2, [r3, #16]
 80091de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091e2:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	20003550 	.word	0x20003550
 80091ec:	40022000 	.word	0x40022000

080091f0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80091f0:	2200      	movs	r2, #0
 80091f2:	4b06      	ldr	r3, [pc, #24]	; (800920c <FLASH_PageErase+0x1c>)
 80091f4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80091f6:	4b06      	ldr	r3, [pc, #24]	; (8009210 <FLASH_PageErase+0x20>)
 80091f8:	691a      	ldr	r2, [r3, #16]
 80091fa:	f042 0202 	orr.w	r2, r2, #2
 80091fe:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8009200:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009202:	691a      	ldr	r2, [r3, #16]
 8009204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009208:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800920a:	4770      	bx	lr
 800920c:	20003550 	.word	0x20003550
 8009210:	40022000 	.word	0x40022000

08009214 <HAL_FLASHEx_Erase>:
{
 8009214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8009218:	4d22      	ldr	r5, [pc, #136]	; (80092a4 <HAL_FLASHEx_Erase+0x90>)
{
 800921a:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 800921c:	7e2b      	ldrb	r3, [r5, #24]
{
 800921e:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8009220:	2b01      	cmp	r3, #1
 8009222:	d03d      	beq.n	80092a0 <HAL_FLASHEx_Erase+0x8c>
 8009224:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009226:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 8009228:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800922a:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800922c:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009230:	d113      	bne.n	800925a <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8009232:	f7ff ff51 	bl	80090d8 <FLASH_WaitForLastOperation>
 8009236:	b120      	cbz	r0, 8009242 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8009238:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800923a:	2300      	movs	r3, #0
 800923c:	762b      	strb	r3, [r5, #24]
}
 800923e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 8009242:	f7ff ffc3 	bl	80091cc <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009246:	f24c 3050 	movw	r0, #50000	; 0xc350
 800924a:	f7ff ff45 	bl	80090d8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800924e:	4a16      	ldr	r2, [pc, #88]	; (80092a8 <HAL_FLASHEx_Erase+0x94>)
 8009250:	6913      	ldr	r3, [r2, #16]
 8009252:	f023 0304 	bic.w	r3, r3, #4
 8009256:	6113      	str	r3, [r2, #16]
 8009258:	e7ef      	b.n	800923a <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800925a:	f7ff ff3d 	bl	80090d8 <FLASH_WaitForLastOperation>
 800925e:	2800      	cmp	r0, #0
 8009260:	d1ea      	bne.n	8009238 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8009262:	f04f 33ff 	mov.w	r3, #4294967295
 8009266:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 800926a:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 800926c:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800926e:	4c0e      	ldr	r4, [pc, #56]	; (80092a8 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8009270:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
 8009274:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8009278:	42b3      	cmp	r3, r6
 800927a:	d9de      	bls.n	800923a <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 800927c:	4630      	mov	r0, r6
 800927e:	f7ff ffb7 	bl	80091f0 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009282:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009286:	f7ff ff27 	bl	80090d8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800928a:	6923      	ldr	r3, [r4, #16]
 800928c:	f023 0302 	bic.w	r3, r3, #2
 8009290:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8009292:	b110      	cbz	r0, 800929a <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8009294:	f8c8 6000 	str.w	r6, [r8]
            break;
 8009298:	e7cf      	b.n	800923a <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800929a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800929e:	e7e7      	b.n	8009270 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 80092a0:	2002      	movs	r0, #2
 80092a2:	e7cc      	b.n	800923e <HAL_FLASHEx_Erase+0x2a>
 80092a4:	20003550 	.word	0x20003550
 80092a8:	40022000 	.word	0x40022000

080092ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80092ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80092b0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80092b2:	4616      	mov	r6, r2
 80092b4:	4b65      	ldr	r3, [pc, #404]	; (800944c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80092b6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800945c <HAL_GPIO_Init+0x1b0>
 80092ba:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8009460 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80092be:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80092c2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80092c4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80092c8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80092cc:	45a0      	cmp	r8, r4
 80092ce:	d17e      	bne.n	80093ce <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 80092d0:	684d      	ldr	r5, [r1, #4]
 80092d2:	2d12      	cmp	r5, #18
 80092d4:	f000 80ae 	beq.w	8009434 <HAL_GPIO_Init+0x188>
 80092d8:	f200 8087 	bhi.w	80093ea <HAL_GPIO_Init+0x13e>
 80092dc:	2d02      	cmp	r5, #2
 80092de:	f000 80a6 	beq.w	800942e <HAL_GPIO_Init+0x182>
 80092e2:	d87b      	bhi.n	80093dc <HAL_GPIO_Init+0x130>
 80092e4:	2d00      	cmp	r5, #0
 80092e6:	f000 808d 	beq.w	8009404 <HAL_GPIO_Init+0x158>
 80092ea:	2d01      	cmp	r5, #1
 80092ec:	f000 809d 	beq.w	800942a <HAL_GPIO_Init+0x17e>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80092f0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80092f4:	2cff      	cmp	r4, #255	; 0xff
 80092f6:	bf93      	iteet	ls
 80092f8:	4682      	movls	sl, r0
 80092fa:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80092fe:	3d08      	subhi	r5, #8
 8009300:	f8d0 b000 	ldrls.w	fp, [r0]
 8009304:	bf92      	itee	ls
 8009306:	00b5      	lslls	r5, r6, #2
 8009308:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800930c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800930e:	fa09 f805 	lsl.w	r8, r9, r5
 8009312:	ea2b 0808 	bic.w	r8, fp, r8
 8009316:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800931a:	bf88      	it	hi
 800931c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8009320:	ea48 0505 	orr.w	r5, r8, r5
 8009324:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8009328:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800932c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8009330:	d04d      	beq.n	80093ce <HAL_GPIO_Init+0x122>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009332:	4f47      	ldr	r7, [pc, #284]	; (8009450 <HAL_GPIO_Init+0x1a4>)
 8009334:	f026 0803 	bic.w	r8, r6, #3
 8009338:	69bd      	ldr	r5, [r7, #24]
 800933a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800933e:	f045 0501 	orr.w	r5, r5, #1
 8009342:	61bd      	str	r5, [r7, #24]
 8009344:	69bd      	ldr	r5, [r7, #24]
 8009346:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800934a:	f005 0501 	and.w	r5, r5, #1
 800934e:	9501      	str	r5, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8009350:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009354:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8009356:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800935a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800935e:	fa09 f90b 	lsl.w	r9, r9, fp
 8009362:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009366:	4d3b      	ldr	r5, [pc, #236]	; (8009454 <HAL_GPIO_Init+0x1a8>)
 8009368:	42a8      	cmp	r0, r5
 800936a:	d068      	beq.n	800943e <HAL_GPIO_Init+0x192>
 800936c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009370:	42a8      	cmp	r0, r5
 8009372:	d066      	beq.n	8009442 <HAL_GPIO_Init+0x196>
 8009374:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009378:	42a8      	cmp	r0, r5
 800937a:	d064      	beq.n	8009446 <HAL_GPIO_Init+0x19a>
 800937c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8009380:	42a8      	cmp	r0, r5
 8009382:	bf0c      	ite	eq
 8009384:	2503      	moveq	r5, #3
 8009386:	2504      	movne	r5, #4
 8009388:	fa05 f50b 	lsl.w	r5, r5, fp
 800938c:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8009390:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8009394:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009396:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 800939a:	bf14      	ite	ne
 800939c:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800939e:	43a5      	biceq	r5, r4
 80093a0:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80093a2:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80093a4:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80093a8:	bf14      	ite	ne
 80093aa:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80093ac:	43a5      	biceq	r5, r4
 80093ae:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80093b0:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80093b2:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80093b6:	bf14      	ite	ne
 80093b8:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80093ba:	43a5      	biceq	r5, r4
 80093bc:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80093be:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80093c0:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80093c4:	bf14      	ite	ne
 80093c6:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80093c8:	ea25 0404 	biceq.w	r4, r5, r4
 80093cc:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80093ce:	3601      	adds	r6, #1
 80093d0:	2e10      	cmp	r6, #16
 80093d2:	f47f af74 	bne.w	80092be <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80093d6:	b003      	add	sp, #12
 80093d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80093dc:	2d03      	cmp	r5, #3
 80093de:	d022      	beq.n	8009426 <HAL_GPIO_Init+0x17a>
 80093e0:	2d11      	cmp	r5, #17
 80093e2:	d185      	bne.n	80092f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80093e4:	68ca      	ldr	r2, [r1, #12]
 80093e6:	3204      	adds	r2, #4
          break;
 80093e8:	e782      	b.n	80092f0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80093ea:	4f1b      	ldr	r7, [pc, #108]	; (8009458 <HAL_GPIO_Init+0x1ac>)
 80093ec:	42bd      	cmp	r5, r7
 80093ee:	d009      	beq.n	8009404 <HAL_GPIO_Init+0x158>
 80093f0:	d812      	bhi.n	8009418 <HAL_GPIO_Init+0x16c>
 80093f2:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8009464 <HAL_GPIO_Init+0x1b8>
 80093f6:	454d      	cmp	r5, r9
 80093f8:	d004      	beq.n	8009404 <HAL_GPIO_Init+0x158>
 80093fa:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80093fe:	454d      	cmp	r5, r9
 8009400:	f47f af76 	bne.w	80092f0 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8009404:	688a      	ldr	r2, [r1, #8]
 8009406:	b1c2      	cbz	r2, 800943a <HAL_GPIO_Init+0x18e>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8009408:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800940a:	bf0c      	ite	eq
 800940c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8009410:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009414:	2208      	movs	r2, #8
 8009416:	e76b      	b.n	80092f0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8009418:	4565      	cmp	r5, ip
 800941a:	d0f3      	beq.n	8009404 <HAL_GPIO_Init+0x158>
 800941c:	4575      	cmp	r5, lr
 800941e:	d0f1      	beq.n	8009404 <HAL_GPIO_Init+0x158>
 8009420:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8009468 <HAL_GPIO_Init+0x1bc>
 8009424:	e7eb      	b.n	80093fe <HAL_GPIO_Init+0x152>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009426:	2200      	movs	r2, #0
 8009428:	e762      	b.n	80092f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800942a:	68ca      	ldr	r2, [r1, #12]
          break;
 800942c:	e760      	b.n	80092f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800942e:	68ca      	ldr	r2, [r1, #12]
 8009430:	3208      	adds	r2, #8
          break;
 8009432:	e75d      	b.n	80092f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009434:	68ca      	ldr	r2, [r1, #12]
 8009436:	320c      	adds	r2, #12
          break;
 8009438:	e75a      	b.n	80092f0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800943a:	2204      	movs	r2, #4
 800943c:	e758      	b.n	80092f0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800943e:	2500      	movs	r5, #0
 8009440:	e7a2      	b.n	8009388 <HAL_GPIO_Init+0xdc>
 8009442:	2501      	movs	r5, #1
 8009444:	e7a0      	b.n	8009388 <HAL_GPIO_Init+0xdc>
 8009446:	2502      	movs	r5, #2
 8009448:	e79e      	b.n	8009388 <HAL_GPIO_Init+0xdc>
 800944a:	bf00      	nop
 800944c:	40010400 	.word	0x40010400
 8009450:	40021000 	.word	0x40021000
 8009454:	40010800 	.word	0x40010800
 8009458:	10210000 	.word	0x10210000
 800945c:	10310000 	.word	0x10310000
 8009460:	10320000 	.word	0x10320000
 8009464:	10110000 	.word	0x10110000
 8009468:	10220000 	.word	0x10220000

0800946c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 800946c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8009470:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8009472:	f04f 0901 	mov.w	r9, #1
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 8009476:	f04f 0e0f 	mov.w	lr, #15
 800947a:	f04f 0a04 	mov.w	sl, #4
      {
        tmp = 0x0FU << (4U * (position & 0x03U));
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
          
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800947e:	4c30      	ldr	r4, [pc, #192]	; (8009540 <HAL_GPIO_DeInit+0xd4>)
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009480:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8009548 <HAL_GPIO_DeInit+0xdc>
  while ((GPIO_Pin >> position) != 0U)
 8009484:	fa31 f302 	lsrs.w	r3, r1, r2
 8009488:	d101      	bne.n	800948e <HAL_GPIO_DeInit+0x22>
      }
    }
    
    position++;
  }
}
 800948a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 800948e:	fa09 f302 	lsl.w	r3, r9, r2
    if (iocurrent)
 8009492:	400b      	ands	r3, r1
 8009494:	d04c      	beq.n	8009530 <HAL_GPIO_DeInit+0xc4>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009496:	2bff      	cmp	r3, #255	; 0xff
 8009498:	bf98      	it	ls
 800949a:	4607      	movls	r7, r0
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800949c:	ea6f 0303 	mvn.w	r3, r3
 80094a0:	bf85      	ittet	hi
 80094a2:	f102 4580 	addhi.w	r5, r2, #1073741824	; 0x40000000
 80094a6:	3d08      	subhi	r5, #8
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80094a8:	f8d0 c000 	ldrls.w	ip, [r0]
 80094ac:	f8d0 c004 	ldrhi.w	ip, [r0, #4]
 80094b0:	bf94      	ite	ls
 80094b2:	0095      	lslls	r5, r2, #2
 80094b4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 80094b6:	fa0e f605 	lsl.w	r6, lr, r5
 80094ba:	ea2c 0606 	bic.w	r6, ip, r6
 80094be:	fa0a f505 	lsl.w	r5, sl, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80094c2:	bf88      	it	hi
 80094c4:	1d07      	addhi	r7, r0, #4
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), GPIO_CRL_CNF0_0 << registeroffset);
 80094c6:	432e      	orrs	r6, r5
 80094c8:	603e      	str	r6, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80094ca:	68c5      	ldr	r5, [r0, #12]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 80094cc:	f002 0703 	and.w	r7, r2, #3
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80094d0:	401d      	ands	r5, r3
 80094d2:	60c5      	str	r5, [r0, #12]
 80094d4:	f022 0503 	bic.w	r5, r2, #3
 80094d8:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80094dc:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
      tmp = AFIO->EXTICR[position >> 2U];
 80094e0:	68ae      	ldr	r6, [r5, #8]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 80094e2:	00bf      	lsls	r7, r7, #2
 80094e4:	fa0e f807 	lsl.w	r8, lr, r7
 80094e8:	ea08 0c06 	and.w	ip, r8, r6
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80094ec:	4e15      	ldr	r6, [pc, #84]	; (8009544 <HAL_GPIO_DeInit+0xd8>)
 80094ee:	42b0      	cmp	r0, r6
 80094f0:	d020      	beq.n	8009534 <HAL_GPIO_DeInit+0xc8>
 80094f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80094f6:	42b0      	cmp	r0, r6
 80094f8:	d01e      	beq.n	8009538 <HAL_GPIO_DeInit+0xcc>
 80094fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80094fe:	42b0      	cmp	r0, r6
 8009500:	d01c      	beq.n	800953c <HAL_GPIO_DeInit+0xd0>
 8009502:	4558      	cmp	r0, fp
 8009504:	bf0c      	ite	eq
 8009506:	2603      	moveq	r6, #3
 8009508:	2604      	movne	r6, #4
 800950a:	40be      	lsls	r6, r7
 800950c:	4566      	cmp	r6, ip
 800950e:	d10f      	bne.n	8009530 <HAL_GPIO_DeInit+0xc4>
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 8009510:	68ae      	ldr	r6, [r5, #8]
 8009512:	ea26 0608 	bic.w	r6, r6, r8
 8009516:	60ae      	str	r6, [r5, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009518:	6825      	ldr	r5, [r4, #0]
 800951a:	401d      	ands	r5, r3
 800951c:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800951e:	6865      	ldr	r5, [r4, #4]
 8009520:	401d      	ands	r5, r3
 8009522:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009524:	68a5      	ldr	r5, [r4, #8]
 8009526:	401d      	ands	r5, r3
 8009528:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800952a:	68e5      	ldr	r5, [r4, #12]
 800952c:	402b      	ands	r3, r5
 800952e:	60e3      	str	r3, [r4, #12]
    position++;
 8009530:	3201      	adds	r2, #1
 8009532:	e7a7      	b.n	8009484 <HAL_GPIO_DeInit+0x18>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8009534:	2600      	movs	r6, #0
 8009536:	e7e8      	b.n	800950a <HAL_GPIO_DeInit+0x9e>
 8009538:	2601      	movs	r6, #1
 800953a:	e7e6      	b.n	800950a <HAL_GPIO_DeInit+0x9e>
 800953c:	2602      	movs	r6, #2
 800953e:	e7e4      	b.n	800950a <HAL_GPIO_DeInit+0x9e>
 8009540:	40010400 	.word	0x40010400
 8009544:	40010800 	.word	0x40010800
 8009548:	40011400 	.word	0x40011400

0800954c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800954c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 800954e:	4604      	mov	r4, r0
 8009550:	b1d8      	cbz	r0, 800958a <HAL_IWDG_Init+0x3e>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8009552:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8009556:	6803      	ldr	r3, [r0, #0]
 8009558:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800955a:	f245 5255 	movw	r2, #21845	; 0x5555
 800955e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8009560:	6842      	ldr	r2, [r0, #4]
 8009562:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009564:	6882      	ldr	r2, [r0, #8]
 8009566:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8009568:	f7ff f954 	bl	8008814 <HAL_GetTick>
 800956c:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	68d8      	ldr	r0, [r3, #12]
 8009572:	b918      	cbnz	r0, 800957c <HAL_IWDG_Init+0x30>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009574:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009578:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800957a:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800957c:	f7ff f94a 	bl	8008814 <HAL_GetTick>
 8009580:	1b40      	subs	r0, r0, r5
 8009582:	2830      	cmp	r0, #48	; 0x30
 8009584:	d9f3      	bls.n	800956e <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 8009586:	2003      	movs	r0, #3
 8009588:	e7f7      	b.n	800957a <HAL_IWDG_Init+0x2e>
    return HAL_ERROR;
 800958a:	2001      	movs	r0, #1
 800958c:	e7f5      	b.n	800957a <HAL_IWDG_Init+0x2e>

0800958e <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800958e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009592:	6803      	ldr	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 8009594:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009596:	601a      	str	r2, [r3, #0]
}
 8009598:	4770      	bx	lr
	...

0800959c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800959c:	6803      	ldr	r3, [r0, #0]
{
 800959e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095a2:	07db      	lsls	r3, r3, #31
{
 80095a4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095a6:	d410      	bmi.n	80095ca <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	079f      	lsls	r7, r3, #30
 80095ac:	d45e      	bmi.n	800966c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095ae:	682b      	ldr	r3, [r5, #0]
 80095b0:	0719      	lsls	r1, r3, #28
 80095b2:	f100 8095 	bmi.w	80096e0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095b6:	682b      	ldr	r3, [r5, #0]
 80095b8:	075a      	lsls	r2, r3, #29
 80095ba:	f100 80bf 	bmi.w	800973c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80095be:	69ea      	ldr	r2, [r5, #28]
 80095c0:	2a00      	cmp	r2, #0
 80095c2:	f040 812d 	bne.w	8009820 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80095c6:	2000      	movs	r0, #0
 80095c8:	e014      	b.n	80095f4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80095ca:	4c90      	ldr	r4, [pc, #576]	; (800980c <HAL_RCC_OscConfig+0x270>)
 80095cc:	6863      	ldr	r3, [r4, #4]
 80095ce:	f003 030c 	and.w	r3, r3, #12
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	d007      	beq.n	80095e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80095d6:	6863      	ldr	r3, [r4, #4]
 80095d8:	f003 030c 	and.w	r3, r3, #12
 80095dc:	2b08      	cmp	r3, #8
 80095de:	d10c      	bne.n	80095fa <HAL_RCC_OscConfig+0x5e>
 80095e0:	6863      	ldr	r3, [r4, #4]
 80095e2:	03de      	lsls	r6, r3, #15
 80095e4:	d509      	bpl.n	80095fa <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	039c      	lsls	r4, r3, #14
 80095ea:	d5dd      	bpl.n	80095a8 <HAL_RCC_OscConfig+0xc>
 80095ec:	686b      	ldr	r3, [r5, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1da      	bne.n	80095a8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80095f2:	2001      	movs	r0, #1
}
 80095f4:	b002      	add	sp, #8
 80095f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80095fa:	686b      	ldr	r3, [r5, #4]
 80095fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009600:	d110      	bne.n	8009624 <HAL_RCC_OscConfig+0x88>
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009608:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800960a:	f7ff f903 	bl	8008814 <HAL_GetTick>
 800960e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	0398      	lsls	r0, r3, #14
 8009614:	d4c8      	bmi.n	80095a8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009616:	f7ff f8fd 	bl	8008814 <HAL_GetTick>
 800961a:	1b80      	subs	r0, r0, r6
 800961c:	2864      	cmp	r0, #100	; 0x64
 800961e:	d9f7      	bls.n	8009610 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8009620:	2003      	movs	r0, #3
 8009622:	e7e7      	b.n	80095f4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009624:	b99b      	cbnz	r3, 800964e <HAL_RCC_OscConfig+0xb2>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009634:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8009636:	f7ff f8ed 	bl	8008814 <HAL_GetTick>
 800963a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	0399      	lsls	r1, r3, #14
 8009640:	d5b2      	bpl.n	80095a8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009642:	f7ff f8e7 	bl	8008814 <HAL_GetTick>
 8009646:	1b80      	subs	r0, r0, r6
 8009648:	2864      	cmp	r0, #100	; 0x64
 800964a:	d9f7      	bls.n	800963c <HAL_RCC_OscConfig+0xa0>
 800964c:	e7e8      	b.n	8009620 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800964e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009652:	6823      	ldr	r3, [r4, #0]
 8009654:	d103      	bne.n	800965e <HAL_RCC_OscConfig+0xc2>
 8009656:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800965a:	6023      	str	r3, [r4, #0]
 800965c:	e7d1      	b.n	8009602 <HAL_RCC_OscConfig+0x66>
 800965e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009662:	6023      	str	r3, [r4, #0]
 8009664:	6823      	ldr	r3, [r4, #0]
 8009666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800966a:	e7cd      	b.n	8009608 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800966c:	4c67      	ldr	r4, [pc, #412]	; (800980c <HAL_RCC_OscConfig+0x270>)
 800966e:	6863      	ldr	r3, [r4, #4]
 8009670:	f013 0f0c 	tst.w	r3, #12
 8009674:	d007      	beq.n	8009686 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009676:	6863      	ldr	r3, [r4, #4]
 8009678:	f003 030c 	and.w	r3, r3, #12
 800967c:	2b08      	cmp	r3, #8
 800967e:	d110      	bne.n	80096a2 <HAL_RCC_OscConfig+0x106>
 8009680:	6863      	ldr	r3, [r4, #4]
 8009682:	03da      	lsls	r2, r3, #15
 8009684:	d40d      	bmi.n	80096a2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	079b      	lsls	r3, r3, #30
 800968a:	d502      	bpl.n	8009692 <HAL_RCC_OscConfig+0xf6>
 800968c:	692b      	ldr	r3, [r5, #16]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d1af      	bne.n	80095f2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	696a      	ldr	r2, [r5, #20]
 8009696:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800969a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800969e:	6023      	str	r3, [r4, #0]
 80096a0:	e785      	b.n	80095ae <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80096a2:	692a      	ldr	r2, [r5, #16]
 80096a4:	4b5a      	ldr	r3, [pc, #360]	; (8009810 <HAL_RCC_OscConfig+0x274>)
 80096a6:	b16a      	cbz	r2, 80096c4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80096a8:	2201      	movs	r2, #1
 80096aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80096ac:	f7ff f8b2 	bl	8008814 <HAL_GetTick>
 80096b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	079f      	lsls	r7, r3, #30
 80096b6:	d4ec      	bmi.n	8009692 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096b8:	f7ff f8ac 	bl	8008814 <HAL_GetTick>
 80096bc:	1b80      	subs	r0, r0, r6
 80096be:	2802      	cmp	r0, #2
 80096c0:	d9f7      	bls.n	80096b2 <HAL_RCC_OscConfig+0x116>
 80096c2:	e7ad      	b.n	8009620 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80096c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80096c6:	f7ff f8a5 	bl	8008814 <HAL_GetTick>
 80096ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096cc:	6823      	ldr	r3, [r4, #0]
 80096ce:	0798      	lsls	r0, r3, #30
 80096d0:	f57f af6d 	bpl.w	80095ae <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80096d4:	f7ff f89e 	bl	8008814 <HAL_GetTick>
 80096d8:	1b80      	subs	r0, r0, r6
 80096da:	2802      	cmp	r0, #2
 80096dc:	d9f6      	bls.n	80096cc <HAL_RCC_OscConfig+0x130>
 80096de:	e79f      	b.n	8009620 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80096e0:	69aa      	ldr	r2, [r5, #24]
 80096e2:	4c4a      	ldr	r4, [pc, #296]	; (800980c <HAL_RCC_OscConfig+0x270>)
 80096e4:	4b4b      	ldr	r3, [pc, #300]	; (8009814 <HAL_RCC_OscConfig+0x278>)
 80096e6:	b1da      	cbz	r2, 8009720 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80096e8:	2201      	movs	r2, #1
 80096ea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80096ec:	f7ff f892 	bl	8008814 <HAL_GetTick>
 80096f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096f4:	079b      	lsls	r3, r3, #30
 80096f6:	d50d      	bpl.n	8009714 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80096f8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80096fc:	4b46      	ldr	r3, [pc, #280]	; (8009818 <HAL_RCC_OscConfig+0x27c>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	fbb3 f3f2 	udiv	r3, r3, r2
 8009704:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 8009706:	bf00      	nop
  } 
  while (Delay --);
 8009708:	9b01      	ldr	r3, [sp, #4]
 800970a:	1e5a      	subs	r2, r3, #1
 800970c:	9201      	str	r2, [sp, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1f9      	bne.n	8009706 <HAL_RCC_OscConfig+0x16a>
 8009712:	e750      	b.n	80095b6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009714:	f7ff f87e 	bl	8008814 <HAL_GetTick>
 8009718:	1b80      	subs	r0, r0, r6
 800971a:	2802      	cmp	r0, #2
 800971c:	d9e9      	bls.n	80096f2 <HAL_RCC_OscConfig+0x156>
 800971e:	e77f      	b.n	8009620 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8009720:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009722:	f7ff f877 	bl	8008814 <HAL_GetTick>
 8009726:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800972a:	079f      	lsls	r7, r3, #30
 800972c:	f57f af43 	bpl.w	80095b6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009730:	f7ff f870 	bl	8008814 <HAL_GetTick>
 8009734:	1b80      	subs	r0, r0, r6
 8009736:	2802      	cmp	r0, #2
 8009738:	d9f6      	bls.n	8009728 <HAL_RCC_OscConfig+0x18c>
 800973a:	e771      	b.n	8009620 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800973c:	4c33      	ldr	r4, [pc, #204]	; (800980c <HAL_RCC_OscConfig+0x270>)
 800973e:	69e3      	ldr	r3, [r4, #28]
 8009740:	00d8      	lsls	r0, r3, #3
 8009742:	d424      	bmi.n	800978e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8009744:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8009746:	69e3      	ldr	r3, [r4, #28]
 8009748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800974c:	61e3      	str	r3, [r4, #28]
 800974e:	69e3      	ldr	r3, [r4, #28]
 8009750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009758:	4e30      	ldr	r6, [pc, #192]	; (800981c <HAL_RCC_OscConfig+0x280>)
 800975a:	6833      	ldr	r3, [r6, #0]
 800975c:	05d9      	lsls	r1, r3, #23
 800975e:	d518      	bpl.n	8009792 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009760:	68eb      	ldr	r3, [r5, #12]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d126      	bne.n	80097b4 <HAL_RCC_OscConfig+0x218>
 8009766:	6a23      	ldr	r3, [r4, #32]
 8009768:	f043 0301 	orr.w	r3, r3, #1
 800976c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800976e:	f7ff f851 	bl	8008814 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009772:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009776:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009778:	6a23      	ldr	r3, [r4, #32]
 800977a:	079b      	lsls	r3, r3, #30
 800977c:	d53f      	bpl.n	80097fe <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800977e:	2f00      	cmp	r7, #0
 8009780:	f43f af1d 	beq.w	80095be <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009784:	69e3      	ldr	r3, [r4, #28]
 8009786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800978a:	61e3      	str	r3, [r4, #28]
 800978c:	e717      	b.n	80095be <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800978e:	2700      	movs	r7, #0
 8009790:	e7e2      	b.n	8009758 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009792:	6833      	ldr	r3, [r6, #0]
 8009794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009798:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800979a:	f7ff f83b 	bl	8008814 <HAL_GetTick>
 800979e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097a0:	6833      	ldr	r3, [r6, #0]
 80097a2:	05da      	lsls	r2, r3, #23
 80097a4:	d4dc      	bmi.n	8009760 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097a6:	f7ff f835 	bl	8008814 <HAL_GetTick>
 80097aa:	eba0 0008 	sub.w	r0, r0, r8
 80097ae:	2864      	cmp	r0, #100	; 0x64
 80097b0:	d9f6      	bls.n	80097a0 <HAL_RCC_OscConfig+0x204>
 80097b2:	e735      	b.n	8009620 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097b4:	b9ab      	cbnz	r3, 80097e2 <HAL_RCC_OscConfig+0x246>
 80097b6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097b8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097bc:	f023 0301 	bic.w	r3, r3, #1
 80097c0:	6223      	str	r3, [r4, #32]
 80097c2:	6a23      	ldr	r3, [r4, #32]
 80097c4:	f023 0304 	bic.w	r3, r3, #4
 80097c8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80097ca:	f7ff f823 	bl	8008814 <HAL_GetTick>
 80097ce:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097d0:	6a23      	ldr	r3, [r4, #32]
 80097d2:	0798      	lsls	r0, r3, #30
 80097d4:	d5d3      	bpl.n	800977e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097d6:	f7ff f81d 	bl	8008814 <HAL_GetTick>
 80097da:	1b80      	subs	r0, r0, r6
 80097dc:	4540      	cmp	r0, r8
 80097de:	d9f7      	bls.n	80097d0 <HAL_RCC_OscConfig+0x234>
 80097e0:	e71e      	b.n	8009620 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097e2:	2b05      	cmp	r3, #5
 80097e4:	6a23      	ldr	r3, [r4, #32]
 80097e6:	d103      	bne.n	80097f0 <HAL_RCC_OscConfig+0x254>
 80097e8:	f043 0304 	orr.w	r3, r3, #4
 80097ec:	6223      	str	r3, [r4, #32]
 80097ee:	e7ba      	b.n	8009766 <HAL_RCC_OscConfig+0x1ca>
 80097f0:	f023 0301 	bic.w	r3, r3, #1
 80097f4:	6223      	str	r3, [r4, #32]
 80097f6:	6a23      	ldr	r3, [r4, #32]
 80097f8:	f023 0304 	bic.w	r3, r3, #4
 80097fc:	e7b6      	b.n	800976c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80097fe:	f7ff f809 	bl	8008814 <HAL_GetTick>
 8009802:	eba0 0008 	sub.w	r0, r0, r8
 8009806:	42b0      	cmp	r0, r6
 8009808:	d9b6      	bls.n	8009778 <HAL_RCC_OscConfig+0x1dc>
 800980a:	e709      	b.n	8009620 <HAL_RCC_OscConfig+0x84>
 800980c:	40021000 	.word	0x40021000
 8009810:	42420000 	.word	0x42420000
 8009814:	42420480 	.word	0x42420480
 8009818:	20000110 	.word	0x20000110
 800981c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009820:	4c22      	ldr	r4, [pc, #136]	; (80098ac <HAL_RCC_OscConfig+0x310>)
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	f003 030c 	and.w	r3, r3, #12
 8009828:	2b08      	cmp	r3, #8
 800982a:	f43f aee2 	beq.w	80095f2 <HAL_RCC_OscConfig+0x56>
 800982e:	2300      	movs	r3, #0
 8009830:	4e1f      	ldr	r6, [pc, #124]	; (80098b0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009832:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8009834:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009836:	d12b      	bne.n	8009890 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8009838:	f7fe ffec 	bl	8008814 <HAL_GetTick>
 800983c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	0199      	lsls	r1, r3, #6
 8009842:	d41f      	bmi.n	8009884 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009844:	6a2b      	ldr	r3, [r5, #32]
 8009846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800984a:	d105      	bne.n	8009858 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800984c:	6862      	ldr	r2, [r4, #4]
 800984e:	68a9      	ldr	r1, [r5, #8]
 8009850:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009854:	430a      	orrs	r2, r1
 8009856:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009858:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800985a:	6862      	ldr	r2, [r4, #4]
 800985c:	430b      	orrs	r3, r1
 800985e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8009862:	4313      	orrs	r3, r2
 8009864:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8009866:	2301      	movs	r3, #1
 8009868:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800986a:	f7fe ffd3 	bl	8008814 <HAL_GetTick>
 800986e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009870:	6823      	ldr	r3, [r4, #0]
 8009872:	019a      	lsls	r2, r3, #6
 8009874:	f53f aea7 	bmi.w	80095c6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009878:	f7fe ffcc 	bl	8008814 <HAL_GetTick>
 800987c:	1b40      	subs	r0, r0, r5
 800987e:	2802      	cmp	r0, #2
 8009880:	d9f6      	bls.n	8009870 <HAL_RCC_OscConfig+0x2d4>
 8009882:	e6cd      	b.n	8009620 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009884:	f7fe ffc6 	bl	8008814 <HAL_GetTick>
 8009888:	1bc0      	subs	r0, r0, r7
 800988a:	2802      	cmp	r0, #2
 800988c:	d9d7      	bls.n	800983e <HAL_RCC_OscConfig+0x2a2>
 800988e:	e6c7      	b.n	8009620 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8009890:	f7fe ffc0 	bl	8008814 <HAL_GetTick>
 8009894:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	019b      	lsls	r3, r3, #6
 800989a:	f57f ae94 	bpl.w	80095c6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800989e:	f7fe ffb9 	bl	8008814 <HAL_GetTick>
 80098a2:	1b40      	subs	r0, r0, r5
 80098a4:	2802      	cmp	r0, #2
 80098a6:	d9f6      	bls.n	8009896 <HAL_RCC_OscConfig+0x2fa>
 80098a8:	e6ba      	b.n	8009620 <HAL_RCC_OscConfig+0x84>
 80098aa:	bf00      	nop
 80098ac:	40021000 	.word	0x40021000
 80098b0:	42420060 	.word	0x42420060

080098b4 <HAL_RCC_GetSysClockFreq>:
{
 80098b4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80098b6:	4b19      	ldr	r3, [pc, #100]	; (800991c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80098b8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80098ba:	ac02      	add	r4, sp, #8
 80098bc:	f103 0510 	add.w	r5, r3, #16
 80098c0:	4622      	mov	r2, r4
 80098c2:	6818      	ldr	r0, [r3, #0]
 80098c4:	6859      	ldr	r1, [r3, #4]
 80098c6:	3308      	adds	r3, #8
 80098c8:	c203      	stmia	r2!, {r0, r1}
 80098ca:	42ab      	cmp	r3, r5
 80098cc:	4614      	mov	r4, r2
 80098ce:	d1f7      	bne.n	80098c0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80098d0:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80098d4:	4912      	ldr	r1, [pc, #72]	; (8009920 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80098d6:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80098da:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80098dc:	f003 020c 	and.w	r2, r3, #12
 80098e0:	2a08      	cmp	r2, #8
 80098e2:	d118      	bne.n	8009916 <HAL_RCC_GetSysClockFreq+0x62>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80098e4:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80098e8:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80098ea:	bf48      	it	mi
 80098ec:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80098ee:	a806      	add	r0, sp, #24
 80098f0:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80098f2:	bf48      	it	mi
 80098f4:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80098f8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80098fc:	bf41      	itttt	mi
 80098fe:	aa06      	addmi	r2, sp, #24
 8009900:	189b      	addmi	r3, r3, r2
 8009902:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8009906:	4b07      	ldrmi	r3, [pc, #28]	; (8009924 <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009908:	bf54      	ite	pl
 800990a:	4b07      	ldrpl	r3, [pc, #28]	; (8009928 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800990c:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009910:	4358      	muls	r0, r3
}
 8009912:	b007      	add	sp, #28
 8009914:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8009916:	4803      	ldr	r0, [pc, #12]	; (8009924 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8009918:	e7fb      	b.n	8009912 <HAL_RCC_GetSysClockFreq+0x5e>
 800991a:	bf00      	nop
 800991c:	0800e47c 	.word	0x0800e47c
 8009920:	40021000 	.word	0x40021000
 8009924:	007a1200 	.word	0x007a1200
 8009928:	003d0900 	.word	0x003d0900

0800992c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800992c:	4a4c      	ldr	r2, [pc, #304]	; (8009a60 <HAL_RCC_ClockConfig+0x134>)
{
 800992e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8009932:	6813      	ldr	r3, [r2, #0]
{
 8009934:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8009936:	f003 0307 	and.w	r3, r3, #7
 800993a:	428b      	cmp	r3, r1
{
 800993c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800993e:	d327      	bcc.n	8009990 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009940:	682a      	ldr	r2, [r5, #0]
 8009942:	0791      	lsls	r1, r2, #30
 8009944:	d431      	bmi.n	80099aa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009946:	07d2      	lsls	r2, r2, #31
 8009948:	d437      	bmi.n	80099ba <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800994a:	4a45      	ldr	r2, [pc, #276]	; (8009a60 <HAL_RCC_ClockConfig+0x134>)
 800994c:	6813      	ldr	r3, [r2, #0]
 800994e:	f003 0307 	and.w	r3, r3, #7
 8009952:	42b3      	cmp	r3, r6
 8009954:	d871      	bhi.n	8009a3a <HAL_RCC_ClockConfig+0x10e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009956:	682a      	ldr	r2, [r5, #0]
 8009958:	4c42      	ldr	r4, [pc, #264]	; (8009a64 <HAL_RCC_ClockConfig+0x138>)
 800995a:	f012 0f04 	tst.w	r2, #4
 800995e:	d177      	bne.n	8009a50 <HAL_RCC_ClockConfig+0x124>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009960:	0713      	lsls	r3, r2, #28
 8009962:	d506      	bpl.n	8009972 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009964:	6863      	ldr	r3, [r4, #4]
 8009966:	692a      	ldr	r2, [r5, #16]
 8009968:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800996c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009970:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009972:	f7ff ff9f 	bl	80098b4 <HAL_RCC_GetSysClockFreq>
 8009976:	6863      	ldr	r3, [r4, #4]
 8009978:	4a3b      	ldr	r2, [pc, #236]	; (8009a68 <HAL_RCC_ClockConfig+0x13c>)
 800997a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800997e:	5cd3      	ldrb	r3, [r2, r3]
 8009980:	40d8      	lsrs	r0, r3
 8009982:	4b3a      	ldr	r3, [pc, #232]	; (8009a6c <HAL_RCC_ClockConfig+0x140>)
 8009984:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8009986:	200f      	movs	r0, #15
 8009988:	f7fe ff46 	bl	8008818 <HAL_InitTick>
  return HAL_OK;
 800998c:	2000      	movs	r0, #0
 800998e:	e00a      	b.n	80099a6 <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009990:	6813      	ldr	r3, [r2, #0]
 8009992:	f023 0307 	bic.w	r3, r3, #7
 8009996:	430b      	orrs	r3, r1
 8009998:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800999a:	6813      	ldr	r3, [r2, #0]
 800999c:	f003 0307 	and.w	r3, r3, #7
 80099a0:	428b      	cmp	r3, r1
 80099a2:	d0cd      	beq.n	8009940 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80099a4:	2001      	movs	r0, #1
}
 80099a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099aa:	492e      	ldr	r1, [pc, #184]	; (8009a64 <HAL_RCC_ClockConfig+0x138>)
 80099ac:	68a8      	ldr	r0, [r5, #8]
 80099ae:	684b      	ldr	r3, [r1, #4]
 80099b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099b4:	4303      	orrs	r3, r0
 80099b6:	604b      	str	r3, [r1, #4]
 80099b8:	e7c5      	b.n	8009946 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099ba:	686a      	ldr	r2, [r5, #4]
 80099bc:	4c29      	ldr	r4, [pc, #164]	; (8009a64 <HAL_RCC_ClockConfig+0x138>)
 80099be:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099c0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099c2:	d11b      	bne.n	80099fc <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099c8:	d0ec      	beq.n	80099a4 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80099ca:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80099d0:	f023 0303 	bic.w	r3, r3, #3
 80099d4:	4313      	orrs	r3, r2
 80099d6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80099d8:	f7fe ff1c 	bl	8008814 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099dc:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80099de:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d113      	bne.n	8009a0c <HAL_RCC_ClockConfig+0xe0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80099e4:	6863      	ldr	r3, [r4, #4]
 80099e6:	f003 030c 	and.w	r3, r3, #12
 80099ea:	2b04      	cmp	r3, #4
 80099ec:	d0ad      	beq.n	800994a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099ee:	f7fe ff11 	bl	8008814 <HAL_GetTick>
 80099f2:	1bc0      	subs	r0, r0, r7
 80099f4:	4540      	cmp	r0, r8
 80099f6:	d9f5      	bls.n	80099e4 <HAL_RCC_ClockConfig+0xb8>
          return HAL_TIMEOUT;
 80099f8:	2003      	movs	r0, #3
 80099fa:	e7d4      	b.n	80099a6 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80099fc:	2a02      	cmp	r2, #2
 80099fe:	d102      	bne.n	8009a06 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009a04:	e7e0      	b.n	80099c8 <HAL_RCC_ClockConfig+0x9c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a06:	f013 0f02 	tst.w	r3, #2
 8009a0a:	e7dd      	b.n	80099c8 <HAL_RCC_ClockConfig+0x9c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a0c:	2b02      	cmp	r3, #2
 8009a0e:	d10f      	bne.n	8009a30 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a10:	6863      	ldr	r3, [r4, #4]
 8009a12:	f003 030c 	and.w	r3, r3, #12
 8009a16:	2b08      	cmp	r3, #8
 8009a18:	d097      	beq.n	800994a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a1a:	f7fe fefb 	bl	8008814 <HAL_GetTick>
 8009a1e:	1bc0      	subs	r0, r0, r7
 8009a20:	4540      	cmp	r0, r8
 8009a22:	d9f5      	bls.n	8009a10 <HAL_RCC_ClockConfig+0xe4>
 8009a24:	e7e8      	b.n	80099f8 <HAL_RCC_ClockConfig+0xcc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a26:	f7fe fef5 	bl	8008814 <HAL_GetTick>
 8009a2a:	1bc0      	subs	r0, r0, r7
 8009a2c:	4540      	cmp	r0, r8
 8009a2e:	d8e3      	bhi.n	80099f8 <HAL_RCC_ClockConfig+0xcc>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009a30:	6863      	ldr	r3, [r4, #4]
 8009a32:	f013 0f0c 	tst.w	r3, #12
 8009a36:	d1f6      	bne.n	8009a26 <HAL_RCC_ClockConfig+0xfa>
 8009a38:	e787      	b.n	800994a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a3a:	6813      	ldr	r3, [r2, #0]
 8009a3c:	f023 0307 	bic.w	r3, r3, #7
 8009a40:	4333      	orrs	r3, r6
 8009a42:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009a44:	6813      	ldr	r3, [r2, #0]
 8009a46:	f003 0307 	and.w	r3, r3, #7
 8009a4a:	42b3      	cmp	r3, r6
 8009a4c:	d1aa      	bne.n	80099a4 <HAL_RCC_ClockConfig+0x78>
 8009a4e:	e782      	b.n	8009956 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a50:	6863      	ldr	r3, [r4, #4]
 8009a52:	68e9      	ldr	r1, [r5, #12]
 8009a54:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009a58:	430b      	orrs	r3, r1
 8009a5a:	6063      	str	r3, [r4, #4]
 8009a5c:	e780      	b.n	8009960 <HAL_RCC_ClockConfig+0x34>
 8009a5e:	bf00      	nop
 8009a60:	40022000 	.word	0x40022000
 8009a64:	40021000 	.word	0x40021000
 8009a68:	0800c1e4 	.word	0x0800c1e4
 8009a6c:	20000110 	.word	0x20000110

08009a70 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009a70:	4b04      	ldr	r3, [pc, #16]	; (8009a84 <HAL_RCC_GetPCLK1Freq+0x14>)
 8009a72:	4a05      	ldr	r2, [pc, #20]	; (8009a88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009a7a:	5cd3      	ldrb	r3, [r2, r3]
 8009a7c:	4a03      	ldr	r2, [pc, #12]	; (8009a8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009a7e:	6810      	ldr	r0, [r2, #0]
}    
 8009a80:	40d8      	lsrs	r0, r3
 8009a82:	4770      	bx	lr
 8009a84:	40021000 	.word	0x40021000
 8009a88:	0800c1f4 	.word	0x0800c1f4
 8009a8c:	20000110 	.word	0x20000110

08009a90 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009a90:	4b04      	ldr	r3, [pc, #16]	; (8009aa4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8009a92:	4a05      	ldr	r2, [pc, #20]	; (8009aa8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8009a9a:	5cd3      	ldrb	r3, [r2, r3]
 8009a9c:	4a03      	ldr	r2, [pc, #12]	; (8009aac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009a9e:	6810      	ldr	r0, [r2, #0]
} 
 8009aa0:	40d8      	lsrs	r0, r3
 8009aa2:	4770      	bx	lr
 8009aa4:	40021000 	.word	0x40021000
 8009aa8:	0800c1f4 	.word	0x0800c1f4
 8009aac:	20000110 	.word	0x20000110

08009ab0 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009ab0:	230f      	movs	r3, #15
 8009ab2:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009ab4:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <HAL_RCC_GetClockConfig+0x34>)
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	f002 0203 	and.w	r2, r2, #3
 8009abc:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8009ac4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009acc:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	08db      	lsrs	r3, r3, #3
 8009ad2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ad6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8009ad8:	4b03      	ldr	r3, [pc, #12]	; (8009ae8 <HAL_RCC_GetClockConfig+0x38>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	600b      	str	r3, [r1, #0]
}
 8009ae2:	4770      	bx	lr
 8009ae4:	40021000 	.word	0x40021000
 8009ae8:	40022000 	.word	0x40022000

08009aec <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009aec:	4a1a      	ldr	r2, [pc, #104]	; (8009b58 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8009aee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009af0:	4290      	cmp	r0, r2
 8009af2:	d00a      	beq.n	8009b0a <TIM_Base_SetConfig+0x1e>
 8009af4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009af8:	d007      	beq.n	8009b0a <TIM_Base_SetConfig+0x1e>
 8009afa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009afe:	4290      	cmp	r0, r2
 8009b00:	d003      	beq.n	8009b0a <TIM_Base_SetConfig+0x1e>
 8009b02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b06:	4290      	cmp	r0, r2
 8009b08:	d115      	bne.n	8009b36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8009b0a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009b10:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b12:	4a11      	ldr	r2, [pc, #68]	; (8009b58 <TIM_Base_SetConfig+0x6c>)
 8009b14:	4290      	cmp	r0, r2
 8009b16:	d00a      	beq.n	8009b2e <TIM_Base_SetConfig+0x42>
 8009b18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009b1c:	d007      	beq.n	8009b2e <TIM_Base_SetConfig+0x42>
 8009b1e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8009b22:	4290      	cmp	r0, r2
 8009b24:	d003      	beq.n	8009b2e <TIM_Base_SetConfig+0x42>
 8009b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b2a:	4290      	cmp	r0, r2
 8009b2c:	d103      	bne.n	8009b36 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b2e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b34:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8009b36:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8009b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8009b3c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8009b3e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b40:	688b      	ldr	r3, [r1, #8]
 8009b42:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8009b44:	680b      	ldr	r3, [r1, #0]
 8009b46:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b48:	4b03      	ldr	r3, [pc, #12]	; (8009b58 <TIM_Base_SetConfig+0x6c>)
 8009b4a:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b4c:	bf04      	itt	eq
 8009b4e:	690b      	ldreq	r3, [r1, #16]
 8009b50:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8009b52:	2301      	movs	r3, #1
 8009b54:	6143      	str	r3, [r0, #20]
}
 8009b56:	4770      	bx	lr
 8009b58:	40012c00 	.word	0x40012c00

08009b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009b5c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8009b5e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009b60:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8009b62:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8009b64:	ea23 0304 	bic.w	r3, r3, r4
 8009b68:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8009b6a:	6a03      	ldr	r3, [r0, #32]
 8009b6c:	408a      	lsls	r2, r1
 8009b6e:	431a      	orrs	r2, r3
 8009b70:	6202      	str	r2, [r0, #32]
}
 8009b72:	bd10      	pop	{r4, pc}

08009b74 <stm32_mcu_flash_erase_sector>:

#define _FLASH_SECTOR_SIZE MYNEWT_VAL(STM32_FLASH_SECTOR_SIZE)

int
stm32_mcu_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
 8009b74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    FLASH_EraseInitTypeDef eraseinit;
    uint32_t PageError;

    (void)PageError;

    if ((sector_address & ~(_FLASH_SECTOR_SIZE - 1)) == sector_address) {
 8009b76:	f421 737f 	bic.w	r3, r1, #1020	; 0x3fc
 8009b7a:	f023 0303 	bic.w	r3, r3, #3
 8009b7e:	428b      	cmp	r3, r1
 8009b80:	d110      	bne.n	8009ba4 <stm32_mcu_flash_erase_sector+0x30>
        eraseinit.TypeErase = FLASH_TYPEERASE_PAGES;
        eraseinit.Banks = FLASH_BANK_1;
 8009b82:	2201      	movs	r2, #1
 8009b84:	2100      	movs	r1, #0
        eraseinit.PageAddress = sector_address;
        eraseinit.NbPages = _FLASH_SECTOR_SIZE / FLASH_PAGE_SIZE;
        if (HAL_FLASHEx_Erase(&eraseinit, &PageError) == HAL_OK) {
 8009b86:	a802      	add	r0, sp, #8
        eraseinit.Banks = FLASH_BANK_1;
 8009b88:	e9cd 1202 	strd	r1, r2, [sp, #8]
        if (HAL_FLASHEx_Erase(&eraseinit, &PageError) == HAL_OK) {
 8009b8c:	a901      	add	r1, sp, #4
        eraseinit.NbPages = _FLASH_SECTOR_SIZE / FLASH_PAGE_SIZE;
 8009b8e:	e9cd 3204 	strd	r3, r2, [sp, #16]
        if (HAL_FLASHEx_Erase(&eraseinit, &PageError) == HAL_OK) {
 8009b92:	f7ff fb3f 	bl	8009214 <HAL_FLASHEx_Erase>
 8009b96:	3000      	adds	r0, #0
 8009b98:	bf18      	it	ne
 8009b9a:	2001      	movne	r0, #1
 8009b9c:	4240      	negs	r0, r0
            return 0;
        }
    }

    return -1;
}
 8009b9e:	b007      	add	sp, #28
 8009ba0:	f85d fb04 	ldr.w	pc, [sp], #4
    return -1;
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	e7f9      	b.n	8009b9e <stm32_mcu_flash_erase_sector+0x2a>
	...

08009bac <stm32_hal_timer_get_freq>:
 * of a timer.
 */

uint32_t
stm32_hal_timer_get_freq(void *regs)
{
 8009bac:	b510      	push	{r4, lr}
 8009bae:	4604      	mov	r4, r0
 8009bb0:	b086      	sub	sp, #24
    RCC_ClkInitTypeDef clocks;
    uint32_t fl;
    uint32_t freq;

    HAL_RCC_GetClockConfig(&clocks, &fl);
 8009bb2:	4669      	mov	r1, sp
 8009bb4:	a801      	add	r0, sp, #4
 8009bb6:	f7ff ff7b 	bl	8009ab0 <HAL_RCC_GetClockConfig>

    /*
     * Assuming RCC_DCKCFGR->TIMPRE is 0.
     * There's just APB2 timers here.
     */
    switch ((uintptr_t)regs) {
 8009bba:	4b0d      	ldr	r3, [pc, #52]	; (8009bf0 <stm32_hal_timer_get_freq+0x44>)
 8009bbc:	429c      	cmp	r4, r3
 8009bbe:	d003      	beq.n	8009bc8 <stm32_hal_timer_get_freq+0x1c>
 8009bc0:	d806      	bhi.n	8009bd0 <stm32_hal_timer_get_freq+0x24>
 8009bc2:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8009bc6:	d111      	bne.n	8009bec <stm32_hal_timer_get_freq+0x40>
    case (uintptr_t)TIM3:
#endif
#ifdef TIM4
    case (uintptr_t)TIM4:
#endif
        freq = HAL_RCC_GetPCLK1Freq();
 8009bc8:	f7ff ff52 	bl	8009a70 <HAL_RCC_GetPCLK1Freq>
        if (clocks.APB1CLKDivider) {
 8009bcc:	9b04      	ldr	r3, [sp, #16]
 8009bce:	e009      	b.n	8009be4 <stm32_hal_timer_get_freq+0x38>
    switch ((uintptr_t)regs) {
 8009bd0:	4b08      	ldr	r3, [pc, #32]	; (8009bf4 <stm32_hal_timer_get_freq+0x48>)
 8009bd2:	429c      	cmp	r4, r3
 8009bd4:	d0f8      	beq.n	8009bc8 <stm32_hal_timer_get_freq+0x1c>
 8009bd6:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8009bda:	429c      	cmp	r4, r3
 8009bdc:	d106      	bne.n	8009bec <stm32_hal_timer_get_freq+0x40>
        freq = HAL_RCC_GetPCLK2Freq();
 8009bde:	f7ff ff57 	bl	8009a90 <HAL_RCC_GetPCLK2Freq>
        if (clocks.APB2CLKDivider) {
 8009be2:	9b05      	ldr	r3, [sp, #20]
        if (clocks.APB1CLKDivider) {
 8009be4:	b103      	cbz	r3, 8009be8 <stm32_hal_timer_get_freq+0x3c>
            freq *= 2;
 8009be6:	0040      	lsls	r0, r0, #1
        break;
    default:
        return 0;
    }
    return freq;
}
 8009be8:	b006      	add	sp, #24
 8009bea:	bd10      	pop	{r4, pc}
        return 0;
 8009bec:	2000      	movs	r0, #0
 8009bee:	e7fb      	b.n	8009be8 <stm32_hal_timer_get_freq+0x3c>
 8009bf0:	40000400 	.word	0x40000400
 8009bf4:	40000800 	.word	0x40000800

08009bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009bf8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009bfa:	f890 4020 	ldrb.w	r4, [r0, #32]
 8009bfe:	2c01      	cmp	r4, #1
 8009c00:	d035      	beq.n	8009c6e <HAL_DMA_Start_IT+0x76>
 8009c02:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009c04:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8009c08:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8009c0c:	42a5      	cmp	r5, r4
 8009c0e:	f04f 0600 	mov.w	r6, #0
 8009c12:	f04f 0402 	mov.w	r4, #2
 8009c16:	d128      	bne.n	8009c6a <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009c18:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009c1c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009c1e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8009c20:	6826      	ldr	r6, [r4, #0]
 8009c22:	f026 0601 	bic.w	r6, r6, #1
 8009c26:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009c28:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8009c2c:	40bd      	lsls	r5, r7
 8009c2e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009c30:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009c32:	6843      	ldr	r3, [r0, #4]
 8009c34:	6805      	ldr	r5, [r0, #0]
 8009c36:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8009c38:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009c3a:	bf0b      	itete	eq
 8009c3c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8009c3e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8009c40:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8009c42:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8009c44:	b14b      	cbz	r3, 8009c5a <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8009c4c:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009c4e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8009c50:	682b      	ldr	r3, [r5, #0]
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	602b      	str	r3, [r5, #0]
}
 8009c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	f023 0304 	bic.w	r3, r3, #4
 8009c60:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	f043 030a 	orr.w	r3, r3, #10
 8009c68:	e7f0      	b.n	8009c4c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8009c6a:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8009c6e:	2002      	movs	r0, #2
 8009c70:	e7f2      	b.n	8009c58 <HAL_DMA_Start_IT+0x60>

08009c72 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_bme680_sensor();
    assert(rc == 0);
#endif
}
 8009c72:	4770      	bx	lr

08009c74 <stm32f1_adc_create>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 8009c74:	b507      	push	{r0, r1, r2, lr}
    console_printf("ADC create " DEVICE_NAME "\n");
 8009c76:	480b      	ldr	r0, [pc, #44]	; (8009ca4 <stm32f1_adc_create+0x30>)
 8009c78:	f7fa fa1e 	bl	80040b8 <console_printf>

    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 8009c7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ca8 <stm32f1_adc_create+0x34>)
 8009c7e:	2201      	movs	r2, #1
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	4b0a      	ldr	r3, [pc, #40]	; (8009cac <stm32f1_adc_create+0x38>)
 8009c84:	490a      	ldr	r1, [pc, #40]	; (8009cb0 <stm32f1_adc_create+0x3c>)
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	480a      	ldr	r0, [pc, #40]	; (8009cb4 <stm32f1_adc_create+0x40>)
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f7fc f9e8 	bl	8006060 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0,  //  For BSP: OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
 8009c90:	b128      	cbz	r0, 8009c9e <stm32f1_adc_create+0x2a>
 8009c92:	2300      	movs	r3, #0
 8009c94:	461a      	mov	r2, r3
 8009c96:	4619      	mov	r1, r3
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fb ffc1 	bl	8005c20 <__assert_func>
}
 8009c9e:	b003      	add	sp, #12
 8009ca0:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ca4:	0800e48c 	.word	0x0800e48c
 8009ca8:	200001d8 	.word	0x200001d8
 8009cac:	08009fc1 	.word	0x08009fc1
 8009cb0:	0800e2d8 	.word	0x0800e2d8
 8009cb4:	20002c1c 	.word	0x20002c1c

08009cb8 <stm32f1_adc_size_buffer>:
 * @return Length of buffer in bytes
 */
static int
stm32f1_adc_size_buffer(struct adc_dev *dev, int chans, int samples)
{
    return (sizeof(uint32_t) * chans * samples);
 8009cb8:	0092      	lsls	r2, r2, #2
}
 8009cba:	fb01 f002 	mul.w	r0, r1, r2
 8009cbe:	4770      	bx	lr

08009cc0 <stm32f1_adc_release_buffer>:
{
 8009cc0:	b508      	push	{r3, lr}
    assert(0);  //  Not implemented.
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fb ffa9 	bl	8005c20 <__assert_func>

08009cce <stm32f1_adc_set_buffer>:
{
 8009cce:	b508      	push	{r3, lr}
    assert(0);  //  Not implemented.
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fb ffa2 	bl	8005c20 <__assert_func>

08009cdc <stm32f1_resolve_adc_gpio.part.0>:
            switch(cnum) {
 8009cdc:	3804      	subs	r0, #4
stm32f1_resolve_adc_gpio(ADC_HandleTypeDef *adc, uint8_t cnum,
 8009cde:	b510      	push	{r4, lr}
 8009ce0:	460b      	mov	r3, r1
            switch(cnum) {
 8009ce2:	280b      	cmp	r0, #11
 8009ce4:	d820      	bhi.n	8009d28 <stm32f1_resolve_adc_gpio.part.0+0x4c>
 8009ce6:	e8df f000 	tbb	[pc, r0]
 8009cea:	061d      	.short	0x061d
 8009cec:	17151311 	.word	0x17151311
 8009cf0:	1f1f1f1f 	.word	0x1f1f1f1f
 8009cf4:	1b19      	.short	0x1b19
                    pin = ADC12_CH5_PIN;
 8009cf6:	2405      	movs	r4, #5
    *gpio = (GPIO_InitTypeDef) {
 8009cf8:	2210      	movs	r2, #16
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fd fb20 	bl	8007342 <memset>
 8009d02:	2203      	movs	r2, #3
 8009d04:	6004      	str	r4, [r0, #0]
 8009d06:	6042      	str	r2, [r0, #4]
    return rc;
 8009d08:	2000      	movs	r0, #0
}
 8009d0a:	bd10      	pop	{r4, pc}
                    pin = ADC12_CH6_PIN;
 8009d0c:	2406      	movs	r4, #6
 8009d0e:	e7f3      	b.n	8009cf8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH7_PIN;
 8009d10:	2407      	movs	r4, #7
 8009d12:	e7f1      	b.n	8009cf8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH8_PIN;
 8009d14:	2410      	movs	r4, #16
 8009d16:	e7ef      	b.n	8009cf8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH9_PIN;
 8009d18:	2411      	movs	r4, #17
 8009d1a:	e7ed      	b.n	8009cf8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH14_PIN;
 8009d1c:	2424      	movs	r4, #36	; 0x24
 8009d1e:	e7eb      	b.n	8009cf8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH15_PIN;
 8009d20:	2425      	movs	r4, #37	; 0x25
 8009d22:	e7e9      	b.n	8009cf8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
                    pin = ADC12_CH4_PIN;
 8009d24:	2404      	movs	r4, #4
 8009d26:	e7e7      	b.n	8009cf8 <stm32f1_resolve_adc_gpio.part.0+0x1c>
            return rc;
 8009d28:	2002      	movs	r0, #2
 8009d2a:	e7ee      	b.n	8009d0a <stm32f1_resolve_adc_gpio.part.0+0x2e>

08009d2c <stm32f1_adc_configure_channel>:
{
 8009d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d2e:	460c      	mov	r4, r1
 8009d30:	b085      	sub	sp, #20
    if (dev == NULL && !IS_ADC_CHANNEL(cnum)) {
 8009d32:	4605      	mov	r5, r0
 8009d34:	b918      	cbnz	r0, 8009d3e <stm32f1_adc_configure_channel+0x12>
 8009d36:	2911      	cmp	r1, #17
 8009d38:	d901      	bls.n	8009d3e <stm32f1_adc_configure_channel+0x12>
    return (rc);
 8009d3a:	2402      	movs	r4, #2
 8009d3c:	e02d      	b.n	8009d9a <stm32f1_adc_configure_channel+0x6e>
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 8009d3e:	696b      	ldr	r3, [r5, #20]
    if ((HAL_ADC_ConfigChannel(hadc, cfgdata)) != HAL_OK) {
 8009d40:	4611      	mov	r1, r2
    hadc = cfg->sac_adc_handle;
 8009d42:	695e      	ldr	r6, [r3, #20]
    chan_cfg = &((struct adc_chan_config *)cfg->sac_chans)[cnum];
 8009d44:	685f      	ldr	r7, [r3, #4]
    if ((HAL_ADC_ConfigChannel(hadc, cfgdata)) != HAL_OK) {
 8009d46:	4630      	mov	r0, r6
 8009d48:	f001 fcd2 	bl	800b6f0 <HAL_ADC_ConfigChannel>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d1f4      	bne.n	8009d3a <stm32f1_adc_configure_channel+0xe>
    chan_cfg = &((struct adc_chan_config *)cfg->sac_chans)[cnum];
 8009d50:	2306      	movs	r3, #6
 8009d52:	4363      	muls	r3, r4
    dev->ad_chans[cnum].c_res = chan_cfg->c_res;
 8009d54:	6b69      	ldr	r1, [r5, #52]	; 0x34
    chan_cfg = &((struct adc_chan_config *)cfg->sac_chans)[cnum];
 8009d56:	eb07 0c03 	add.w	ip, r7, r3
    dev->ad_chans[cnum].c_res = chan_cfg->c_res;
 8009d5a:	f89c 5002 	ldrb.w	r5, [ip, #2]
 8009d5e:	18ca      	adds	r2, r1, r3
 8009d60:	7095      	strb	r5, [r2, #2]
    dev->ad_chans[cnum].c_refmv = chan_cfg->c_refmv;
 8009d62:	5afd      	ldrh	r5, [r7, r3]
 8009d64:	52cd      	strh	r5, [r1, r3]
    dev->ad_chans[cnum].c_configured = 1;
 8009d66:	2301      	movs	r3, #1
 8009d68:	70d3      	strb	r3, [r2, #3]
    if (cnum == ADC_CHANNEL_TEMPSENSOR || cnum == ADC_CHANNEL_VREFINT) {
 8009d6a:	f1a4 0310 	sub.w	r3, r4, #16
 8009d6e:	2b01      	cmp	r3, #1
    dev->ad_chans[cnum].c_cnum = cnum;
 8009d70:	7114      	strb	r4, [r2, #4]
    if (cnum == ADC_CHANNEL_TEMPSENSOR || cnum == ADC_CHANNEL_VREFINT) {
 8009d72:	d915      	bls.n	8009da0 <stm32f1_adc_configure_channel+0x74>
    switch (adc_addr) {
 8009d74:	6833      	ldr	r3, [r6, #0]
 8009d76:	4a0b      	ldr	r2, [pc, #44]	; (8009da4 <stm32f1_adc_configure_channel+0x78>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d003      	beq.n	8009d84 <stm32f1_adc_configure_channel+0x58>
 8009d7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d1da      	bne.n	8009d3a <stm32f1_adc_configure_channel+0xe>
 8009d84:	4620      	mov	r0, r4
 8009d86:	4669      	mov	r1, sp
 8009d88:	f7ff ffa8 	bl	8009cdc <stm32f1_resolve_adc_gpio.part.0>
    if (stm32f1_resolve_adc_gpio(hadc, cnum, &gpio_td)) {
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d1d3      	bne.n	8009d3a <stm32f1_adc_configure_channel+0xe>
    hal_gpio_init_stm(gpio_td.Pin, &gpio_td);
 8009d92:	4669      	mov	r1, sp
 8009d94:	9800      	ldr	r0, [sp, #0]
 8009d96:	f7ff f933 	bl	8009000 <hal_gpio_init_stm>
}
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	b005      	add	sp, #20
 8009d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return OS_OK;
 8009da0:	4604      	mov	r4, r0
 8009da2:	e7fa      	b.n	8009d9a <stm32f1_adc_configure_channel+0x6e>
 8009da4:	40012400 	.word	0x40012400

08009da8 <stm32f1_adc_open.part.4>:
stm32f1_adc_read_buffer(struct adc_dev *dev, void *buf, int buf_len, int off,
 8009da8:	b508      	push	{r3, lr}
    assert(off < buf_len);
 8009daa:	2300      	movs	r3, #0
 8009dac:	461a      	mov	r2, r3
 8009dae:	4619      	mov	r1, r3
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fb ff35 	bl	8005c20 <__assert_func>

08009db6 <stm32f1_adc_read_buffer>:
 8009db6:	4293      	cmp	r3, r2
{
 8009db8:	b508      	push	{r3, lr}
    assert(off < buf_len);
 8009dba:	db01      	blt.n	8009dc0 <stm32f1_adc_read_buffer+0xa>
 8009dbc:	f7ff fff4 	bl	8009da8 <stm32f1_adc_open.part.4>
    *result = *((uint32_t *)buf + off);
 8009dc0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8009dc4:	9b02      	ldr	r3, [sp, #8]
}
 8009dc6:	2000      	movs	r0, #0
    *result = *((uint32_t *)buf + off);
 8009dc8:	601a      	str	r2, [r3, #0]
}
 8009dca:	bd08      	pop	{r3, pc}

08009dcc <stm32f1_adc_read_channel>:
{
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	4616      	mov	r6, r2
    assert(dev != NULL && result != NULL);
 8009dd0:	b100      	cbz	r0, 8009dd4 <stm32f1_adc_read_channel+0x8>
 8009dd2:	b90a      	cbnz	r2, 8009dd8 <stm32f1_adc_read_channel+0xc>
 8009dd4:	f7ff ffe8 	bl	8009da8 <stm32f1_adc_open.part.4>
    hadc = cfg->sac_adc_handle;
 8009dd8:	6943      	ldr	r3, [r0, #20]
 8009dda:	695c      	ldr	r4, [r3, #20]
    while (HAL_ADCEx_Calibration_Start(hadc) != HAL_OK);  // Calibrate AD converter.
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f001 fee9 	bl	800bbb4 <HAL_ADCEx_Calibration_Start>
 8009de2:	4607      	mov	r7, r0
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d1f9      	bne.n	8009ddc <stm32f1_adc_read_channel+0x10>
    HAL_ADC_Start(hadc);
 8009de8:	4620      	mov	r0, r4
 8009dea:	f001 fd37 	bl	800b85c <HAL_ADC_Start>
    HAL_StatusTypeDef rc = HAL_ADC_PollForConversion(hadc, 10 * 1000);  //  Wait up to 10 seconds.  TODO: Yield to task scheduler while waiting.
 8009dee:	f242 7110 	movw	r1, #10000	; 0x2710
 8009df2:	4620      	mov	r0, r4
 8009df4:	f001 fba0 	bl	800b538 <HAL_ADC_PollForConversion>
    assert(rc == HAL_OK);
 8009df8:	4605      	mov	r5, r0
 8009dfa:	b128      	cbz	r0, 8009e08 <stm32f1_adc_read_channel+0x3c>
 8009dfc:	463b      	mov	r3, r7
 8009dfe:	463a      	mov	r2, r7
 8009e00:	4639      	mov	r1, r7
 8009e02:	4638      	mov	r0, r7
 8009e04:	f7fb ff0c 	bl	8005c20 <__assert_func>
    val = HAL_ADC_GetValue(hadc);
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f001 fc33 	bl	800b674 <HAL_ADC_GetValue>
    *result = val;
 8009e0e:	6030      	str	r0, [r6, #0]
    HAL_ADC_Stop(hadc);
 8009e10:	4620      	mov	r0, r4
 8009e12:	f001 feb5 	bl	800bb80 <HAL_ADC_Stop>
}
 8009e16:	4628      	mov	r0, r5
 8009e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e1c <stm32f1_adc_sample>:
{
 8009e1c:	b508      	push	{r3, lr}
    assert(dev);
 8009e1e:	b908      	cbnz	r0, 8009e24 <stm32f1_adc_sample+0x8>
 8009e20:	f7ff ffc2 	bl	8009da8 <stm32f1_adc_open.part.4>
    cfg  = (struct stm32f1_adc_dev_cfg *)dev->ad_dev.od_init_arg;
 8009e24:	6943      	ldr	r3, [r0, #20]
    if (HAL_ADC_Start_DMA(hadc, cfg->primarybuf, cfg->buflen) != HAL_OK) {
 8009e26:	691a      	ldr	r2, [r3, #16]
 8009e28:	6899      	ldr	r1, [r3, #8]
 8009e2a:	6958      	ldr	r0, [r3, #20]
 8009e2c:	f001 fd78 	bl	800b920 <HAL_ADC_Start_DMA>
 8009e30:	b120      	cbz	r0, 8009e3c <stm32f1_adc_sample+0x20>
    rc = OS_EINVAL;
 8009e32:	2002      	movs	r0, #2
        ++stm32f1_adc_stats.adc_dma_start_error;
 8009e34:	4a02      	ldr	r2, [pc, #8]	; (8009e40 <stm32f1_adc_sample+0x24>)
 8009e36:	8953      	ldrh	r3, [r2, #10]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	8153      	strh	r3, [r2, #10]
}
 8009e3c:	bd08      	pop	{r3, pc}
 8009e3e:	bf00      	nop
 8009e40:	20002c64 	.word	0x20002c64

08009e44 <stm32f1_adc_open>:
{
 8009e44:	b530      	push	{r4, r5, lr}
 8009e46:	460d      	mov	r5, r1
 8009e48:	b089      	sub	sp, #36	; 0x24
    assert(odev);
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	b908      	cbnz	r0, 8009e52 <stm32f1_adc_open+0xe>
 8009e4e:	f7ff ffab 	bl	8009da8 <stm32f1_adc_open.part.4>
    if (os_started()) {
 8009e52:	f7fb ffa5 	bl	8005da0 <os_started>
 8009e56:	b948      	cbnz	r0, 8009e6c <stm32f1_adc_open+0x28>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
 8009e58:	7ee3      	ldrb	r3, [r4, #27]
 8009e5a:	f013 0302 	ands.w	r3, r3, #2
 8009e5e:	d00e      	beq.n	8009e7e <stm32f1_adc_open+0x3a>
        os_mutex_release(&dev->ad_lock);
 8009e60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e64:	f7fc fd3a 	bl	80068dc <os_mutex_release>
        rc = OS_EBUSY;
 8009e68:	200b      	movs	r0, #11
        goto err;
 8009e6a:	e006      	b.n	8009e7a <stm32f1_adc_open+0x36>
        rc = os_mutex_pend(&dev->ad_lock, wait);
 8009e6c:	4629      	mov	r1, r5
 8009e6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e72:	f7fc fd83 	bl	800697c <os_mutex_pend>
        if (rc != OS_OK) {
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d0ee      	beq.n	8009e58 <stm32f1_adc_open+0x14>
}
 8009e7a:	b009      	add	sp, #36	; 0x24
 8009e7c:	bd30      	pop	{r4, r5, pc}
    hadc = adc_config->sac_adc_handle;
 8009e7e:	6962      	ldr	r2, [r4, #20]
 8009e80:	6954      	ldr	r4, [r2, #20]
    assert(hadc);
 8009e82:	b92c      	cbnz	r4, 8009e90 <stm32f1_adc_open+0x4c>
 8009e84:	2300      	movs	r3, #0
 8009e86:	461a      	mov	r2, r3
 8009e88:	4619      	mov	r1, r3
 8009e8a:	4618      	mov	r0, r3
            assert(0);
 8009e8c:	f7fb fec8 	bl	8005c20 <__assert_func>
    RCC_ClkInitTypeDef clkinitstruct = { 0 };
 8009e90:	e9cd 3305 	strd	r3, r3, [sp, #20]
    clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;  //  Value 2
 8009e94:	2102      	movs	r1, #2
 8009e96:	2309      	movs	r3, #9
 8009e98:	e9cd 3103 	strd	r3, r1, [sp, #12]
    clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV8;  //  Value 1536
 8009e9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) { assert(0); }  //  Latency=2
 8009ea0:	a803      	add	r0, sp, #12
    clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV8;  //  Value 1536
 8009ea2:	9307      	str	r3, [sp, #28]
    if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2) != HAL_OK) { assert(0); }  //  Latency=2
 8009ea4:	f7ff fd42 	bl	800992c <HAL_RCC_ClockConfig>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d1ea      	bne.n	8009e84 <stm32f1_adc_open+0x40>
    switch (adc_addr) {
 8009eae:	4a12      	ldr	r2, [pc, #72]	; (8009ef8 <stm32f1_adc_open+0xb4>)
 8009eb0:	6821      	ldr	r1, [r4, #0]
 8009eb2:	4291      	cmp	r1, r2
 8009eb4:	f502 426c 	add.w	r2, r2, #60416	; 0xec00
 8009eb8:	d005      	beq.n	8009ec6 <stm32f1_adc_open+0x82>
 8009eba:	4d10      	ldr	r5, [pc, #64]	; (8009efc <stm32f1_adc_open+0xb8>)
 8009ebc:	42a9      	cmp	r1, r5
 8009ebe:	d011      	beq.n	8009ee4 <stm32f1_adc_open+0xa0>
            assert(0);
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	4601      	mov	r1, r0
 8009ec4:	e7e2      	b.n	8009e8c <stm32f1_adc_open+0x48>
            __HAL_RCC_ADC1_CLK_ENABLE();
 8009ec6:	6993      	ldr	r3, [r2, #24]
 8009ec8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ecc:	6193      	str	r3, [r2, #24]
 8009ece:	6993      	ldr	r3, [r2, #24]
 8009ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ed4:	9301      	str	r3, [sp, #4]
 8009ed6:	9b01      	ldr	r3, [sp, #4]
    if (HAL_ADC_Init(hadc) != HAL_OK) {
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f001 fdd1 	bl	800ba80 <HAL_ADC_Init>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	d0cb      	beq.n	8009e7a <stm32f1_adc_open+0x36>
 8009ee2:	e7cf      	b.n	8009e84 <stm32f1_adc_open+0x40>
            __HAL_RCC_ADC2_CLK_ENABLE();
 8009ee4:	6993      	ldr	r3, [r2, #24]
 8009ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009eea:	6193      	str	r3, [r2, #24]
 8009eec:	6993      	ldr	r3, [r2, #24]
 8009eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ef2:	9302      	str	r3, [sp, #8]
 8009ef4:	9b02      	ldr	r3, [sp, #8]
 8009ef6:	e7ef      	b.n	8009ed8 <stm32f1_adc_open+0x94>
 8009ef8:	40012400 	.word	0x40012400
 8009efc:	40012800 	.word	0x40012800

08009f00 <stm32f1_adc_close>:
{
 8009f00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    assert(dev);
 8009f02:	4604      	mov	r4, r0
 8009f04:	b920      	cbnz	r0, 8009f10 <stm32f1_adc_close+0x10>
 8009f06:	4603      	mov	r3, r0
 8009f08:	4602      	mov	r2, r0
 8009f0a:	4601      	mov	r1, r0
            assert(0);
 8009f0c:	f7fb fe88 	bl	8005c20 <__assert_func>
    cnum = dev->ad_chans->c_cnum;
 8009f10:	6b43      	ldr	r3, [r0, #52]	; 0x34
    switch (adc_addr) {
 8009f12:	4a1b      	ldr	r2, [pc, #108]	; (8009f80 <stm32f1_adc_close+0x80>)
    cnum = dev->ad_chans->c_cnum;
 8009f14:	7918      	ldrb	r0, [r3, #4]
    hadc = cfg->sac_adc_handle;
 8009f16:	6963      	ldr	r3, [r4, #20]
    uintptr_t adc_addr = (uintptr_t)hadc->Instance;
 8009f18:	695b      	ldr	r3, [r3, #20]
 8009f1a:	681b      	ldr	r3, [r3, #0]
    switch (adc_addr) {
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	f502 426c 	add.w	r2, r2, #60416	; 0xec00
 8009f22:	d007      	beq.n	8009f34 <stm32f1_adc_close+0x34>
 8009f24:	4917      	ldr	r1, [pc, #92]	; (8009f84 <stm32f1_adc_close+0x84>)
 8009f26:	428b      	cmp	r3, r1
 8009f28:	d025      	beq.n	8009f76 <stm32f1_adc_close+0x76>
            assert(0);
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	4619      	mov	r1, r3
 8009f30:	4618      	mov	r0, r3
 8009f32:	e7eb      	b.n	8009f0c <stm32f1_adc_close+0xc>
            __HAL_RCC_ADC1_CLK_DISABLE();
 8009f34:	6991      	ldr	r1, [r2, #24]
 8009f36:	f421 7100 	bic.w	r1, r1, #512	; 0x200
            __HAL_RCC_ADC2_CLK_DISABLE();
 8009f3a:	6191      	str	r1, [r2, #24]
    if (cnum != ADC_CHANNEL_TEMPSENSOR && cnum != ADC_CHANNEL_VREFINT) {
 8009f3c:	f1a0 0210 	sub.w	r2, r0, #16
 8009f40:	2a01      	cmp	r2, #1
 8009f42:	d90e      	bls.n	8009f62 <stm32f1_adc_close+0x62>
    switch (adc_addr) {
 8009f44:	4a0e      	ldr	r2, [pc, #56]	; (8009f80 <stm32f1_adc_close+0x80>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d003      	beq.n	8009f52 <stm32f1_adc_close+0x52>
 8009f4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d107      	bne.n	8009f62 <stm32f1_adc_close+0x62>
 8009f52:	4669      	mov	r1, sp
 8009f54:	f7ff fec2 	bl	8009cdc <stm32f1_resolve_adc_gpio.part.0>
        if (stm32f1_resolve_adc_gpio(hadc, cnum, &gpio_td)) {
 8009f58:	b918      	cbnz	r0, 8009f62 <stm32f1_adc_close+0x62>
        if (hal_gpio_deinit_stm(gpio_td.Pin, &gpio_td)) {
 8009f5a:	4669      	mov	r1, sp
 8009f5c:	9800      	ldr	r0, [sp, #0]
 8009f5e:	f7ff f869 	bl	8009034 <hal_gpio_deinit_stm>
    if (os_started()) {
 8009f62:	f7fb ff1d 	bl	8005da0 <os_started>
 8009f66:	b118      	cbz	r0, 8009f70 <stm32f1_adc_close+0x70>
        os_mutex_release(&dev->ad_lock);
 8009f68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009f6c:	f7fc fcb6 	bl	80068dc <os_mutex_release>
}
 8009f70:	2000      	movs	r0, #0
 8009f72:	b004      	add	sp, #16
 8009f74:	bd10      	pop	{r4, pc}
            __HAL_RCC_ADC2_CLK_DISABLE();
 8009f76:	6991      	ldr	r1, [r2, #24]
 8009f78:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009f7c:	e7dd      	b.n	8009f3a <stm32f1_adc_close+0x3a>
 8009f7e:	bf00      	nop
 8009f80:	40012400 	.word	0x40012400
 8009f84:	40012800 	.word	0x40012800

08009f88 <HAL_ADC_ErrorCallback>:
    ++stm32f1_adc_stats.adc_error;
 8009f88:	4b0c      	ldr	r3, [pc, #48]	; (8009fbc <HAL_ADC_ErrorCallback+0x34>)
 8009f8a:	885a      	ldrh	r2, [r3, #2]
 8009f8c:	3201      	adds	r2, #1
 8009f8e:	805a      	strh	r2, [r3, #2]
    if (hadc->ErrorCode & HAL_ADC_ERROR_DMA) {
 8009f90:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009f92:	0752      	lsls	r2, r2, #29
 8009f94:	d503      	bpl.n	8009f9e <HAL_ADC_ErrorCallback+0x16>
        ++stm32f1_adc_stats.adc_dma_xfer_failed;
 8009f96:	889a      	ldrh	r2, [r3, #4]
 8009f98:	3201      	adds	r2, #1
 8009f9a:	809a      	strh	r2, [r3, #4]
 8009f9c:	4770      	bx	lr
    } else if (hadc->ErrorCode & HAL_ADC_ERROR_OVR) {
 8009f9e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009fa0:	0791      	lsls	r1, r2, #30
 8009fa2:	d503      	bpl.n	8009fac <HAL_ADC_ErrorCallback+0x24>
        ++stm32f1_adc_stats.adc_dma_overrun;
 8009fa4:	899a      	ldrh	r2, [r3, #12]
 8009fa6:	3201      	adds	r2, #1
 8009fa8:	819a      	strh	r2, [r3, #12]
 8009faa:	4770      	bx	lr
    } else if (hadc->ErrorCode & HAL_ADC_ERROR_INTERNAL) {
 8009fac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009fae:	07d2      	lsls	r2, r2, #31
        ++stm32f1_adc_stats.adc_internal_error;
 8009fb0:	bf42      	ittt	mi
 8009fb2:	89da      	ldrhmi	r2, [r3, #14]
 8009fb4:	3201      	addmi	r2, #1
 8009fb6:	81da      	strhmi	r2, [r3, #14]
}
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	20002c64 	.word	0x20002c64

08009fc0 <stm32f1_adc_dev_init>:
 * @param2 stm32f1 ADC device cfg ptr
 * @return OS_OK on success
 */
int
stm32f1_adc_dev_init(struct os_dev *odev, void *arg)
{
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4604      	mov	r4, r0
    struct stm32f1_adc_dev_cfg *sac;
    struct adc_dev *dev;

    sac = (struct stm32f1_adc_dev_cfg *) arg;

    assert(sac != NULL);
 8009fc4:	460d      	mov	r5, r1
 8009fc6:	b921      	cbnz	r1, 8009fd2 <stm32f1_adc_dev_init+0x12>
 8009fc8:	460b      	mov	r3, r1
 8009fca:	460a      	mov	r2, r1
 8009fcc:	4608      	mov	r0, r1
 8009fce:	f7fb fe27 	bl	8005c20 <__assert_func>

    dev = (struct adc_dev *)odev;

    os_mutex_init(&dev->ad_lock);
 8009fd2:	3024      	adds	r0, #36	; 0x24
 8009fd4:	f7fc fc78 	bl	80068c8 <os_mutex_init>

    dev->ad_chans = (void *) sac->sac_chans;
 8009fd8:	686b      	ldr	r3, [r5, #4]
    ADC_HandleTypeDef *hadc = cfg->sac_adc_handle;
    HAL_StatusTypeDef rc = HAL_ADC_Init(hadc);  ////  Added HAL initalisation, which was missing from the STM32F4 code.
    if (rc != HAL_OK) { return rc; }
#endif  //  NOTUSED
    return (OS_OK);
}
 8009fda:	2000      	movs	r0, #0
    dev->ad_chans = (void *) sac->sac_chans;
 8009fdc:	6363      	str	r3, [r4, #52]	; 0x34
    dev->ad_chan_count = sac->sac_chan_count;
 8009fde:	782b      	ldrb	r3, [r5, #0]
 8009fe0:	63a3      	str	r3, [r4, #56]	; 0x38
    OS_DEV_SETHANDLERS(odev, stm32f1_adc_open, stm32f1_adc_close);
 8009fe2:	4b03      	ldr	r3, [pc, #12]	; (8009ff0 <stm32f1_adc_dev_init+0x30>)
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	4b03      	ldr	r3, [pc, #12]	; (8009ff4 <stm32f1_adc_dev_init+0x34>)
 8009fe8:	60e3      	str	r3, [r4, #12]
    dev->ad_funcs = &stm32f1_adc_funcs;
 8009fea:	4b03      	ldr	r3, [pc, #12]	; (8009ff8 <stm32f1_adc_dev_init+0x38>)
 8009fec:	6323      	str	r3, [r4, #48]	; 0x30
}
 8009fee:	bd38      	pop	{r3, r4, r5, pc}
 8009ff0:	08009e45 	.word	0x08009e45
 8009ff4:	08009f01 	.word	0x08009f01
 8009ff8:	0800e4a0 	.word	0x0800e4a0

08009ffc <bc95g_create>:
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

static int config_device(void);

//  Create the device instance and configure it.  Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 8009ffc:	b530      	push	{r4, r5, lr}
    console_printf("%screate " DEVICE_NAME "\n", _nbt);
 8009ffe:	4b18      	ldr	r3, [pc, #96]	; (800a060 <bc95g_create+0x64>)
void DEVICE_CREATE(void) {
 800a000:	b087      	sub	sp, #28
    console_printf("%screate " DEVICE_NAME "\n", _nbt);
 800a002:	6819      	ldr	r1, [r3, #0]
 800a004:	4817      	ldr	r0, [pc, #92]	; (800a064 <bc95g_create+0x68>)
 800a006:	f7fa f857 	bl	80040b8 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
        OS_DEV_INIT_PRIMARY, 0,  //  For BSP: OS_DEV_INIT_KERNEL, OS_DEV_INIT_PRIO_DEFAULT,
        DEVICE_INIT, (void *) &DEVICE_ITF);
 800a00a:	4b17      	ldr	r3, [pc, #92]	; (800a068 <bc95g_create+0x6c>)
 800a00c:	2201      	movs	r2, #1
 800a00e:	9301      	str	r3, [sp, #4]
 800a010:	4b16      	ldr	r3, [pc, #88]	; (800a06c <bc95g_create+0x70>)
 800a012:	4917      	ldr	r1, [pc, #92]	; (800a070 <bc95g_create+0x74>)
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	4817      	ldr	r0, [pc, #92]	; (800a074 <bc95g_create+0x78>)
 800a018:	2300      	movs	r3, #0
 800a01a:	f7fc f821 	bl	8006060 <os_dev_create>
    assert(rc == 0);
 800a01e:	4602      	mov	r2, r0
 800a020:	b128      	cbz	r0, 800a02e <bc95g_create+0x32>
 800a022:	2300      	movs	r3, #0
 800a024:	461a      	mov	r2, r3
 800a026:	4619      	mov	r1, r3
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fb fdf9 	bl	8005c20 <__assert_func>
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 800a02e:	f04f 31ff 	mov.w	r1, #4294967295
 800a032:	480f      	ldr	r0, [pc, #60]	; (800a070 <bc95g_create+0x74>)
 800a034:	f7fc f87e 	bl	8006134 <os_dev_open>
    assert(dev != NULL);
 800a038:	4604      	mov	r4, r0
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d0f1      	beq.n	800a022 <bc95g_create+0x26>

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
 800a03e:	a802      	add	r0, sp, #8
 800a040:	f000 f9e2 	bl	800a408 <bc95g_default_cfg>
    assert(rc == 0);
 800a044:	2800      	cmp	r0, #0
 800a046:	d1ec      	bne.n	800a022 <bc95g_create+0x26>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 800a048:	a902      	add	r1, sp, #8
 800a04a:	4620      	mov	r0, r4
 800a04c:	f000 f9e3 	bl	800a416 <bc95g_config>
 800a050:	4605      	mov	r5, r0
    os_dev_close(dev);
 800a052:	4620      	mov	r0, r4
 800a054:	f7fc f88f 	bl	8006176 <os_dev_close>
    assert(rc == 0);
 800a058:	2d00      	cmp	r5, #0
 800a05a:	d1e2      	bne.n	800a022 <bc95g_create+0x26>
}
 800a05c:	b007      	add	sp, #28
 800a05e:	bd30      	pop	{r4, r5, pc}
 800a060:	20000238 	.word	0x20000238
 800a064:	0800e4bc 	.word	0x0800e4bc
 800a068:	20000220 	.word	0x20000220
 800a06c:	0800a3d5 	.word	0x0800a3d5
 800a070:	0800e4ce 	.word	0x0800e4ce
 800a074:	20002c74 	.word	0x20002c74

0800a078 <_ZL11bc95g_eventPv>:
        if (_cbs[i].callback) {
            _cbs[i].callback(_cbs[i].data);
        }
    }
#endif  //  TODO
}
 800a078:	4770      	bx	lr

0800a07a <_ZL10bc95g_openP6os_devmPv.part.13>:
static const char *get_command(struct bc95g *dev, enum CommandId id) {
 800a07a:	b508      	push	{r3, lr}
    assert(id < (sizeof(COMMANDS) / sizeof(COMMANDS[0])));  //  Invalid id
 800a07c:	2300      	movs	r3, #0
 800a07e:	461a      	mov	r2, r3
 800a080:	4619      	mov	r1, r3
 800a082:	4618      	mov	r0, r3
 800a084:	f7fb fdcc 	bl	8005c20 <__assert_func>

0800a088 <_ZL18register_transportPKcPvS0_th>:
static int register_transport(const char *network_device, void *server_endpoint, const char *host, uint16_t port, uint8_t server_endpoint_size) {
 800a088:	b510      	push	{r4, lr}
 800a08a:	f89d 4008 	ldrb.w	r4, [sp, #8]
    assert(server_endpoint_size >= sizeof(struct bc95g_server));  //  Server Endpoint too small
 800a08e:	2c0f      	cmp	r4, #15
 800a090:	d801      	bhi.n	800a096 <_ZL18register_transportPKcPvS0_th+0xe>
 800a092:	f7ff fff2 	bl	800a07a <_ZL10bc95g_openP6os_devmPv.part.13>
}
 800a096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    int rc = bc95g_register_transport(network_device, (struct bc95g_server *) server_endpoint, host, port);
 800a09a:	f000 bb33 	b.w	800a704 <bc95g_register_transport>
	...

0800a0a0 <_ZL11bc95g_closeP6os_dev>:
static int bc95g_close(struct os_dev *dev0) {
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	4604      	mov	r4, r0
    console_printf("]\n");  console_flush();  ////
 800a0a4:	4804      	ldr	r0, [pc, #16]	; (800a0b8 <_ZL11bc95g_closeP6os_dev+0x18>)
 800a0a6:	f7fa f807 	bl	80040b8 <console_printf>
 800a0aa:	f7f9 ff2b 	bl	8003f04 <console_flush>
    assert(dev0);
 800a0ae:	b90c      	cbnz	r4, 800a0b4 <_ZL11bc95g_closeP6os_dev+0x14>
 800a0b0:	f7ff ffe3 	bl	800a07a <_ZL10bc95g_openP6os_devmPv.part.13>
}
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	bd10      	pop	{r4, pc}
 800a0b8:	0800e4f4 	.word	0x0800e4f4

0800a0bc <_ZL9expect_okP5bc95g.isra.4>:
    return parser.recv("OK");
 800a0bc:	4901      	ldr	r1, [pc, #4]	; (800a0c4 <_ZL9expect_okP5bc95g.isra.4+0x8>)
 800a0be:	4802      	ldr	r0, [pc, #8]	; (800a0c8 <_ZL9expect_okP5bc95g.isra.4+0xc>)
 800a0c0:	f000 bd0a 	b.w	800aad8 <_ZN8ATParser4recvEPKcz>
 800a0c4:	0800e598 	.word	0x0800e598
 800a0c8:	2000303c 	.word	0x2000303c

0800a0cc <_ZL8send_atpP5bc95g.isra.6>:
static bool send_atp(struct bc95g *dev) {
 800a0cc:	b508      	push	{r3, lr}
    return parser.write(ATP, sizeof(ATP) - 1) > 0;
 800a0ce:	2203      	movs	r2, #3
 800a0d0:	4904      	ldr	r1, [pc, #16]	; (800a0e4 <_ZL8send_atpP5bc95g.isra.6+0x18>)
 800a0d2:	4805      	ldr	r0, [pc, #20]	; (800a0e8 <_ZL8send_atpP5bc95g.isra.6+0x1c>)
 800a0d4:	f000 fb98 	bl	800a808 <_ZN8ATParser5writeEPKci>
}
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	bfd4      	ite	le
 800a0dc:	2000      	movle	r0, #0
 800a0de:	2001      	movgt	r0, #1
 800a0e0:	bd08      	pop	{r3, pc}
 800a0e2:	bf00      	nop
 800a0e4:	0800e54d 	.word	0x0800e54d
 800a0e8:	2000303c 	.word	0x2000303c

0800a0ec <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15>:
static bool send_query(struct bc95g *dev, enum CommandId id, int *res1, int *res2) {
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	461c      	mov	r4, r3
    const char *cmd = COMMANDS[id];
 800a0f0:	4b19      	ldr	r3, [pc, #100]	; (800a158 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x6c>)
static bool send_query(struct bc95g *dev, enum CommandId id, int *res1, int *res2) {
 800a0f2:	b088      	sub	sp, #32
    const char *cmd = COMMANDS[id];
 800a0f4:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
    dev->last_error = id;  //  Set command ID as the last error.
 800a0f8:	6341      	str	r1, [r0, #52]	; 0x34
static bool send_query(struct bc95g *dev, enum CommandId id, int *res1, int *res2) {
 800a0fa:	4615      	mov	r5, r2
    char cmd_response[17];  memset(cmd_response, 0, sizeof(cmd_response));
 800a0fc:	2100      	movs	r1, #0
 800a0fe:	2211      	movs	r2, #17
 800a100:	a803      	add	r0, sp, #12
 800a102:	f7fd f91e 	bl	8007342 <memset>
    *res1 = -1; 
 800a106:	f04f 33ff 	mov.w	r3, #4294967295
 800a10a:	602b      	str	r3, [r5, #0]
    if (res2) { *res2 = -1; }
 800a10c:	b104      	cbz	r4, 800a110 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x24>
 800a10e:	6023      	str	r3, [r4, #0]
        send_atp(dev) &&
 800a110:	f7ff ffdc 	bl	800a0cc <_ZL8send_atpP5bc95g.isra.6>
        ) &&
 800a114:	b928      	cbnz	r0, 800a122 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x36>
 800a116:	2400      	movs	r4, #0
    console_flush();
 800a118:	f7f9 fef4 	bl	8003f04 <console_flush>
}
 800a11c:	4620      	mov	r0, r4
 800a11e:	b008      	add	sp, #32
 800a120:	bd70      	pop	{r4, r5, r6, pc}
        parser.send(cmd) && (
 800a122:	4631      	mov	r1, r6
 800a124:	480d      	ldr	r0, [pc, #52]	; (800a15c <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x70>)
 800a126:	f000 fcca 	bl	800aabe <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d0f3      	beq.n	800a116 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x2a>
        ) &&
 800a12e:	b95c      	cbnz	r4, 800a148 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x5c>
            ? parser.recv("+%16[^:]:%d", cmd_response, res1)  //  Note: cmd is max 16 chars
 800a130:	462b      	mov	r3, r5
 800a132:	aa03      	add	r2, sp, #12
 800a134:	490a      	ldr	r1, [pc, #40]	; (800a160 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x74>)
 800a136:	4809      	ldr	r0, [pc, #36]	; (800a15c <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x70>)
 800a138:	f000 fcce 	bl	800aad8 <_ZN8ATParser4recvEPKcz>
        parser.send(cmd) && (
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d0ea      	beq.n	800a116 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x2a>
        expect_ok(dev)
 800a140:	f7ff ffbc 	bl	800a0bc <_ZL9expect_okP5bc95g.isra.4>
 800a144:	4604      	mov	r4, r0
 800a146:	e7e7      	b.n	800a118 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x2c>
            : parser.recv("+%16[^:]:%d,%d", cmd_response, res1, res2)  //  Note: cmd is max 16 chars
 800a148:	9400      	str	r4, [sp, #0]
 800a14a:	462b      	mov	r3, r5
 800a14c:	aa03      	add	r2, sp, #12
 800a14e:	4905      	ldr	r1, [pc, #20]	; (800a164 <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x78>)
 800a150:	4802      	ldr	r0, [pc, #8]	; (800a15c <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x70>)
 800a152:	f000 fcc1 	bl	800aad8 <_ZN8ATParser4recvEPKcz>
 800a156:	e7f1      	b.n	800a13c <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15+0x50>
 800a158:	0800e554 	.word	0x0800e554
 800a15c:	2000303c 	.word	0x2000303c
 800a160:	0800e4d9 	.word	0x0800e4d9
 800a164:	0800e4e5 	.word	0x0800e4e5

0800a168 <_ZL10bc95g_openP6os_devmPv>:
static int bc95g_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 800a168:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 800a16a:	4b20      	ldr	r3, [pc, #128]	; (800a1ec <_ZL10bc95g_openP6os_devmPv+0x84>)
static int bc95g_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 800a16c:	b085      	sub	sp, #20
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 800a16e:	781a      	ldrb	r2, [r3, #0]
static int bc95g_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 800a170:	4605      	mov	r5, r0
    if (!first_open) { console_printf("[\n"); return 0; }  ////
 800a172:	b92a      	cbnz	r2, 800a180 <_ZL10bc95g_openP6os_devmPv+0x18>
 800a174:	481e      	ldr	r0, [pc, #120]	; (800a1f0 <_ZL10bc95g_openP6os_devmPv+0x88>)
 800a176:	f7f9 ff9f 	bl	80040b8 <console_printf>
}
 800a17a:	2000      	movs	r0, #0
 800a17c:	b005      	add	sp, #20
 800a17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    first_open = false;
 800a180:	2400      	movs	r4, #0
    console_printf("[\n");  ////
 800a182:	481b      	ldr	r0, [pc, #108]	; (800a1f0 <_ZL10bc95g_openP6os_devmPv+0x88>)
    first_open = false;
 800a184:	701c      	strb	r4, [r3, #0]
    console_printf("[\n");  ////
 800a186:	f7f9 ff97 	bl	80040b8 <console_printf>
    assert(dev0);
 800a18a:	b90d      	cbnz	r5, 800a190 <_ZL10bc95g_openP6os_devmPv+0x28>
 800a18c:	f7ff ff75 	bl	800a07a <_ZL10bc95g_openP6os_devmPv.part.13>
    serial.init(txbuf, txbuf_size, rxbuf, rxbuf_size);
 800a190:	f44f 7780 	mov.w	r7, #256	; 0x100
    memset(cfg->sockets, 0, sizeof(cfg->sockets));
 800a194:	62ac      	str	r4, [r5, #40]	; 0x28
 800a196:	62ec      	str	r4, [r5, #44]	; 0x2c
 800a198:	632c      	str	r4, [r5, #48]	; 0x30
    serial.init(txbuf, txbuf_size, rxbuf, rxbuf_size);
 800a19a:	9401      	str	r4, [sp, #4]
 800a19c:	9700      	str	r7, [sp, #0]
 800a19e:	4b15      	ldr	r3, [pc, #84]	; (800a1f4 <_ZL10bc95g_openP6os_devmPv+0x8c>)
 800a1a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a1a4:	4914      	ldr	r1, [pc, #80]	; (800a1f8 <_ZL10bc95g_openP6os_devmPv+0x90>)
 800a1a6:	4815      	ldr	r0, [pc, #84]	; (800a1fc <_ZL10bc95g_openP6os_devmPv+0x94>)
 800a1a8:	f000 fcab 	bl	800ab02 <_ZN14BufferedSerial4initEPcmS0_mPKc>
    parser.init(serial, parserbuf, parserbuf_size);
 800a1ac:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800a1b0:	4e13      	ldr	r6, [pc, #76]	; (800a200 <_ZL10bc95g_openP6os_devmPv+0x98>)
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	4b13      	ldr	r3, [pc, #76]	; (800a204 <_ZL10bc95g_openP6os_devmPv+0x9c>)
 800a1b6:	4a14      	ldr	r2, [pc, #80]	; (800a208 <_ZL10bc95g_openP6os_devmPv+0xa0>)
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	463b      	mov	r3, r7
 800a1be:	9402      	str	r4, [sp, #8]
 800a1c0:	490e      	ldr	r1, [pc, #56]	; (800a1fc <_ZL10bc95g_openP6os_devmPv+0x94>)
 800a1c2:	f000 fafb 	bl	800a7bc <_ZN8ATParser4initER14BufferedSerialPciPKcib>
    packets = 0;
 800a1c6:	4b11      	ldr	r3, [pc, #68]	; (800a20c <_ZL10bc95g_openP6os_devmPv+0xa4>)
    serial.baud(9600);  //  TODO: Increase the bitrate
 800a1c8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800a1cc:	480b      	ldr	r0, [pc, #44]	; (800a1fc <_ZL10bc95g_openP6os_devmPv+0x94>)
    packets = 0;
 800a1ce:	601c      	str	r4, [r3, #0]
    serial.baud(9600);  //  TODO: Increase the bitrate
 800a1d0:	f000 fd41 	bl	800ac56 <_ZN14BufferedSerial4baudEm>
    serial.configure(uart);
 800a1d4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800a1d6:	4809      	ldr	r0, [pc, #36]	; (800a1fc <_ZL10bc95g_openP6os_devmPv+0x94>)
    * Allows echo to be on or off
    *
    * @param echo 1 for echo and 0 turns it off
    */
    void debugOn(uint8_t on) {
        dbg_on = (on) ? 1 : 0;
 800a1d8:	7634      	strb	r4, [r6, #24]
 800a1da:	f000 fcb2 	bl	800ab42 <_ZN14BufferedSerial9configureEi>
    serial.attach(func, arg);
 800a1de:	4623      	mov	r3, r4
 800a1e0:	462a      	mov	r2, r5
 800a1e2:	490b      	ldr	r1, [pc, #44]	; (800a210 <_ZL10bc95g_openP6os_devmPv+0xa8>)
 800a1e4:	4805      	ldr	r0, [pc, #20]	; (800a1fc <_ZL10bc95g_openP6os_devmPv+0x94>)
 800a1e6:	f000 fd31 	bl	800ac4c <_ZN14BufferedSerial6attachEPFvPvES0_i>
 800a1ea:	e7c6      	b.n	800a17a <_ZL10bc95g_openP6os_devmPv+0x12>
 800a1ec:	20000234 	.word	0x20000234
 800a1f0:	0800e4d6 	.word	0x0800e4d6
 800a1f4:	20002cac 	.word	0x20002cac
 800a1f8:	20002dac 	.word	0x20002dac
 800a1fc:	20003078 	.word	0x20003078
 800a200:	2000303c 	.word	0x2000303c
 800a204:	0800e6eb 	.word	0x0800e6eb
 800a208:	20002f3c 	.word	0x20002f3c
 800a20c:	200030c4 	.word	0x200030c4
 800a210:	0800a079 	.word	0x0800a079

0800a214 <_ZL8send_hexP5bc95gPKht.isra.8>:
        ? '0' + n
        : 'a' + n - 10;
}

/// Send the data as hex digits.
static bool send_hex(struct bc95g *dev, const uint8_t *data, uint16_t size) {
 800a214:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a216:	4604      	mov	r4, r0
 800a218:	460d      	mov	r5, r1
    console_dump(data, size); console_printf("\n");
 800a21a:	f7f9 fee5 	bl	8003fe8 <console_dump>
 800a21e:	4813      	ldr	r0, [pc, #76]	; (800a26c <_ZL8send_hexP5bc95gPKht.isra.8+0x58>)
 800a220:	f7f9 ff4a 	bl	80040b8 <console_printf>
 800a224:	3c01      	subs	r4, #1
    char hex[2];
    for (uint16_t i = 0; i < size; i++) {
        uint8_t b = data[i];
        hex[0] = nibble_to_hex(b >> 4);
        hex[1] = nibble_to_hex(b & 0xf);
        int res = parser.write(hex, 2);
 800a226:	4e12      	ldr	r6, [pc, #72]	; (800a270 <_ZL8send_hexP5bc95gPKht.isra.8+0x5c>)
 800a228:	4425      	add	r5, r4
    for (uint16_t i = 0; i < size; i++) {
 800a22a:	42ac      	cmp	r4, r5
 800a22c:	d01b      	beq.n	800a266 <_ZL8send_hexP5bc95gPKht.isra.8+0x52>
        uint8_t b = data[i];
 800a22e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
        int res = parser.write(hex, 2);
 800a232:	4630      	mov	r0, r6
        hex[0] = nibble_to_hex(b >> 4);
 800a234:	1119      	asrs	r1, r3, #4
 800a236:	b2ca      	uxtb	r2, r1
        hex[1] = nibble_to_hex(b & 0xf);
 800a238:	f003 030f 	and.w	r3, r3, #15
        : 'a' + n - 10;
 800a23c:	2909      	cmp	r1, #9
 800a23e:	bfd4      	ite	le
 800a240:	3230      	addle	r2, #48	; 0x30
 800a242:	3257      	addgt	r2, #87	; 0x57
 800a244:	2b09      	cmp	r3, #9
 800a246:	bf94      	ite	ls
 800a248:	3330      	addls	r3, #48	; 0x30
 800a24a:	3357      	addhi	r3, #87	; 0x57
        hex[0] = nibble_to_hex(b >> 4);
 800a24c:	f88d 2004 	strb.w	r2, [sp, #4]
        int res = parser.write(hex, 2);
 800a250:	a901      	add	r1, sp, #4
 800a252:	2202      	movs	r2, #2
        hex[1] = nibble_to_hex(b & 0xf);
 800a254:	f88d 3005 	strb.w	r3, [sp, #5]
        int res = parser.write(hex, 2);
 800a258:	f000 fad6 	bl	800a808 <_ZN8ATParser5writeEPKci>
        if (res <= 0) { return false; }
 800a25c:	2800      	cmp	r0, #0
 800a25e:	dce4      	bgt.n	800a22a <_ZL8send_hexP5bc95gPKht.isra.8+0x16>
 800a260:	2000      	movs	r0, #0
    }
    return true;
}
 800a262:	b002      	add	sp, #8
 800a264:	bd70      	pop	{r4, r5, r6, pc}
    return true;
 800a266:	2001      	movs	r0, #1
 800a268:	e7fb      	b.n	800a262 <_ZL8send_hexP5bc95gPKht.isra.8+0x4e>
 800a26a:	bf00      	nop
 800a26c:	0800e6ec 	.word	0x0800e6ec
 800a270:	2000303c 	.word	0x2000303c

0800a274 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11>:
    _log(_f, result);
    return result;
}

/// Transmit the `data` buffer if `data` is non-null, or the chain of mbufs.  Return number of bytes sent.
static int send_tx_command(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, 
 800a274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a278:	461e      	mov	r6, r3
    const uint8_t *data, uint16_t length, uint8_t sequence, struct os_mbuf *mbuf) {
    uint16_t local_port = socket->local_port;
    int local_port_response = -1, length_response = -1;
 800a27a:	f04f 33ff 	mov.w	r3, #4294967295
    console_printf("AT> NSOST=%d,%s,%d,%d,\n", local_port, host, port, length);
 800a27e:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    int local_port_response = -1, length_response = -1;
 800a282:	e9cd 3302 	strd	r3, r3, [sp, #8]
static int send_tx_command(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, 
 800a286:	4680      	mov	r8, r0
    console_printf("AT> NSOST=%d,%s,%d,%d,\n", local_port, host, port, length);
 800a288:	4613      	mov	r3, r2
static int send_tx_command(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, 
 800a28a:	4689      	mov	r9, r1
 800a28c:	4692      	mov	sl, r2
    console_printf("AT> NSOST=%d,%s,%d,%d,\n", local_port, host, port, length);
 800a28e:	9500      	str	r5, [sp, #0]
 800a290:	460a      	mov	r2, r1
 800a292:	4601      	mov	r1, r0
 800a294:	482b      	ldr	r0, [pc, #172]	; (800a344 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xd0>)
static int send_tx_command(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, 
 800a296:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    console_printf("AT> NSOST=%d,%s,%d,%d,\n", local_port, host, port, length);
 800a298:	f7f9 ff0e 	bl	80040b8 <console_printf>
        _timeout = timeout;
 800a29c:	f242 7310 	movw	r3, #10000	; 0x2710
 800a2a0:	4f29      	ldr	r7, [pc, #164]	; (800a348 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xd4>)
 800a2a2:	60fb      	str	r3, [r7, #12]
    internal_timeout(BC95G_SEND_TIMEOUT);
    bool res = (
        send_atp(dev) &&  //  Will pause between commands.
 800a2a4:	f7ff ff12 	bl	800a0cc <_ZL8send_atpP5bc95g.isra.6>
        parser.printf("NSOST=%d,%s,%d,%d,",
            local_port, host, port, length) &&
        send_data(dev, data, length, mbuf) &&
        parser.send(",%d", sequence) &&
        parser.recv("%d,%d", &local_port_response, &length_response) &&
 800a2a8:	b920      	cbnz	r0, 800a2b4 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x40>
        parser.recv("OK")
    );
    return res ? length : 0;
 800a2aa:	2500      	movs	r5, #0
}
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	b004      	add	sp, #16
 800a2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        parser.printf("NSOST=%d,%s,%d,%d,",
 800a2b4:	e9cd a500 	strd	sl, r5, [sp]
 800a2b8:	464b      	mov	r3, r9
 800a2ba:	4642      	mov	r2, r8
 800a2bc:	4923      	ldr	r1, [pc, #140]	; (800a34c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xd8>)
 800a2be:	4638      	mov	r0, r7
 800a2c0:	f000 fbf0 	bl	800aaa4 <_ZN8ATParser6printfEPKcz>
        send_atp(dev) &&  //  Will pause between commands.
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d0f0      	beq.n	800a2aa <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x36>
    if (data && length > 0) {
 800a2c8:	b1f6      	cbz	r6, 800a308 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x94>
 800a2ca:	b1ed      	cbz	r5, 800a308 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x94>
        return send_hex(dev, data, length);
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	f7ff ffa0 	bl	800a214 <_ZL8send_hexP5bc95gPKht.isra.8>
 800a2d4:	4606      	mov	r6, r0
            local_port, host, port, length) &&
 800a2d6:	2e00      	cmp	r6, #0
 800a2d8:	d0e7      	beq.n	800a2aa <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x36>
        parser.send(",%d", sequence) &&
 800a2da:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 800a2de:	491c      	ldr	r1, [pc, #112]	; (800a350 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xdc>)
 800a2e0:	4819      	ldr	r0, [pc, #100]	; (800a348 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xd4>)
 800a2e2:	f000 fbec 	bl	800aabe <_ZN8ATParser4sendEPKcz>
        send_data(dev, data, length, mbuf) &&
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d0df      	beq.n	800a2aa <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x36>
        parser.recv("%d,%d", &local_port_response, &length_response) &&
 800a2ea:	ab03      	add	r3, sp, #12
 800a2ec:	aa02      	add	r2, sp, #8
 800a2ee:	4919      	ldr	r1, [pc, #100]	; (800a354 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xe0>)
 800a2f0:	4815      	ldr	r0, [pc, #84]	; (800a348 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xd4>)
 800a2f2:	f000 fbf1 	bl	800aad8 <_ZN8ATParser4recvEPKcz>
        parser.send(",%d", sequence) &&
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d0d7      	beq.n	800a2aa <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x36>
        parser.recv("OK")
 800a2fa:	4917      	ldr	r1, [pc, #92]	; (800a358 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xe4>)
 800a2fc:	4812      	ldr	r0, [pc, #72]	; (800a348 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xd4>)
 800a2fe:	f000 fbeb 	bl	800aad8 <_ZN8ATParser4recvEPKcz>
        parser.recv("%d,%d", &local_port_response, &length_response) &&
 800a302:	2800      	cmp	r0, #0
 800a304:	d1d2      	bne.n	800a2ac <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x38>
 800a306:	e7d0      	b.n	800a2aa <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x36>
    assert(mbuf);
 800a308:	b92c      	cbnz	r4, 800a316 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xa2>
 800a30a:	4623      	mov	r3, r4
 800a30c:	4622      	mov	r2, r4
 800a30e:	4621      	mov	r1, r4
 800a310:	4620      	mov	r0, r4
 800a312:	f7fb fc85 	bl	8005c20 <__assert_func>
    console_printf("%s%s %u...\n", _nbt, _f, (unsigned) chain_size);  console_flush();
 800a316:	4911      	ldr	r1, [pc, #68]	; (800a35c <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xe8>)
 800a318:	8a23      	ldrh	r3, [r4, #16]
 800a31a:	4a11      	ldr	r2, [pc, #68]	; (800a360 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xec>)
 800a31c:	6809      	ldr	r1, [r1, #0]
 800a31e:	4811      	ldr	r0, [pc, #68]	; (800a364 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xf0>)
 800a320:	f7f9 feca 	bl	80040b8 <console_printf>
 800a324:	f7f9 fdee 	bl	8003f04 <console_flush>
        bool res = send_hex(dev, data, size);
 800a328:	88e1      	ldrh	r1, [r4, #6]
 800a32a:	6820      	ldr	r0, [r4, #0]
 800a32c:	f7ff ff72 	bl	800a214 <_ZL8send_hexP5bc95gPKht.isra.8>
        if (!res) { result = false; break; }
 800a330:	4606      	mov	r6, r0
 800a332:	b110      	cbz	r0, 800a33a <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xc6>
        m = m->om_next.sle_next;   //  Fetch next mbuf in the list.
 800a334:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  Send each mbuf in the chain.
 800a336:	2c00      	cmp	r4, #0
 800a338:	d1f6      	bne.n	800a328 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xb4>
    _log(_f, result);
 800a33a:	4631      	mov	r1, r6
 800a33c:	4808      	ldr	r0, [pc, #32]	; (800a360 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0xec>)
 800a33e:	f000 fa25 	bl	800a78c <_log>
 800a342:	e7c8      	b.n	800a2d6 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11+0x62>
 800a344:	0800e50c 	.word	0x0800e50c
 800a348:	2000303c 	.word	0x2000303c
 800a34c:	0800e524 	.word	0x0800e524
 800a350:	0800e62e 	.word	0x0800e62e
 800a354:	0800e4ee 	.word	0x0800e4ee
 800a358:	0800e598 	.word	0x0800e598
 800a35c:	20000238 	.word	0x20000238
 800a360:	0800e537 	.word	0x0800e537
 800a364:	0800e541 	.word	0x0800e541

0800a368 <_ZL16send_command_intP5bc95g9CommandIdi>:
static bool send_command_int(struct bc95g *dev, enum CommandId id, int arg) {
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4615      	mov	r5, r2
    const char *cmd = COMMANDS[id];
 800a36c:	4a09      	ldr	r2, [pc, #36]	; (800a394 <_ZL16send_command_intP5bc95g9CommandIdi+0x2c>)
    dev->last_error = id;  //  Set command ID as the last error.
 800a36e:	6341      	str	r1, [r0, #52]	; 0x34
    const char *cmd = COMMANDS[id];
 800a370:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
        send_atp(dev) &&
 800a374:	f7ff feaa 	bl	800a0cc <_ZL8send_atpP5bc95g.isra.6>
        parser.send(cmd, arg) &&
 800a378:	b148      	cbz	r0, 800a38e <_ZL16send_command_intP5bc95g9CommandIdi+0x26>
 800a37a:	462a      	mov	r2, r5
 800a37c:	4621      	mov	r1, r4
 800a37e:	4806      	ldr	r0, [pc, #24]	; (800a398 <_ZL16send_command_intP5bc95g9CommandIdi+0x30>)
 800a380:	f000 fb9d 	bl	800aabe <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 800a384:	b118      	cbz	r0, 800a38e <_ZL16send_command_intP5bc95g9CommandIdi+0x26>
}
 800a386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        expect_ok(dev)
 800a38a:	f7ff be97 	b.w	800a0bc <_ZL9expect_okP5bc95g.isra.4>
}
 800a38e:	2000      	movs	r0, #0
 800a390:	bd38      	pop	{r3, r4, r5, pc}
 800a392:	bf00      	nop
 800a394:	0800e554 	.word	0x0800e554
 800a398:	2000303c 	.word	0x2000303c

0800a39c <_ZL12send_commandP5bc95g9CommandId>:
    const char *cmd = COMMANDS[id];
 800a39c:	4a0b      	ldr	r2, [pc, #44]	; (800a3cc <_ZL12send_commandP5bc95g9CommandId+0x30>)
static bool send_command(struct bc95g *dev, enum CommandId id) {
 800a39e:	b510      	push	{r4, lr}
    dev->last_error = id;  //  Set command ID as the last error.
 800a3a0:	6341      	str	r1, [r0, #52]	; 0x34
    const char *cmd = COMMANDS[id];
 800a3a2:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
        send_atp(dev) &&
 800a3a6:	f7ff fe91 	bl	800a0cc <_ZL8send_atpP5bc95g.isra.6>
        parser.send(cmd) &&
 800a3aa:	b920      	cbnz	r0, 800a3b6 <_ZL12send_commandP5bc95g9CommandId+0x1a>
 800a3ac:	2400      	movs	r4, #0
    console_flush();
 800a3ae:	f7f9 fda9 	bl	8003f04 <console_flush>
}
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	bd10      	pop	{r4, pc}
        parser.send(cmd) &&
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4805      	ldr	r0, [pc, #20]	; (800a3d0 <_ZL12send_commandP5bc95g9CommandId+0x34>)
 800a3ba:	f000 fb80 	bl	800aabe <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d0f4      	beq.n	800a3ac <_ZL12send_commandP5bc95g9CommandId+0x10>
        expect_ok(dev)
 800a3c2:	f7ff fe7b 	bl	800a0bc <_ZL9expect_okP5bc95g.isra.4>
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	e7f1      	b.n	800a3ae <_ZL12send_commandP5bc95g9CommandId+0x12>
 800a3ca:	bf00      	nop
 800a3cc:	0800e554 	.word	0x0800e554
 800a3d0:	2000303c 	.word	0x2000303c

0800a3d4 <bc95g_init>:
int bc95g_init(struct os_dev *dev0, void *arg) {
 800a3d4:	b508      	push	{r3, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 800a3d6:	b171      	cbz	r1, 800a3f6 <bc95g_init+0x22>
 800a3d8:	b168      	cbz	r0, 800a3f6 <bc95g_init+0x22>
    OS_DEV_SETHANDLERS(dev0, bc95g_open, bc95g_close);
 800a3da:	4b08      	ldr	r3, [pc, #32]	; (800a3fc <bc95g_init+0x28>)
 800a3dc:	6003      	str	r3, [r0, #0]
 800a3de:	4b08      	ldr	r3, [pc, #32]	; (800a400 <bc95g_init+0x2c>)
 800a3e0:	60c3      	str	r3, [r0, #12]
    rc = sensor_network_register_interface(&network_iface);
 800a3e2:	4808      	ldr	r0, [pc, #32]	; (800a404 <bc95g_init+0x30>)
 800a3e4:	f7fa fa2e 	bl	8004844 <sensor_network_register_interface>
    assert(rc == 0);
 800a3e8:	b138      	cbz	r0, 800a3fa <bc95g_init+0x26>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fb fc15 	bl	8005c20 <__assert_func>
    return rc;
 800a3f6:	f06f 0008 	mvn.w	r0, #8
}
 800a3fa:	bd08      	pop	{r3, pc}
 800a3fc:	0800a169 	.word	0x0800a169
 800a400:	0800a0a1 	.word	0x0800a0a1
 800a404:	0800e4f8 	.word	0x0800e4f8

0800a408 <bc95g_default_cfg>:
    memset(cfg, 0, sizeof(struct bc95g_cfg));  //  Zero the entire object.
 800a408:	2300      	movs	r3, #0
 800a40a:	6043      	str	r3, [r0, #4]
 800a40c:	6083      	str	r3, [r0, #8]
 800a40e:	60c3      	str	r3, [r0, #12]
    cfg->uart = 0;  //  Default to UART number 0, which is UART2.
 800a410:	6003      	str	r3, [r0, #0]
}
 800a412:	4618      	mov	r0, r3
 800a414:	4770      	bx	lr

0800a416 <bc95g_config>:
}
 800a416:	2000      	movs	r0, #0
 800a418:	4770      	bx	lr
	...

0800a41c <bc95g_connect>:
int bc95g_connect(struct bc95g *dev) {
 800a41c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a420:	f242 7310 	movw	r3, #10000	; 0x2710
 800a424:	4604      	mov	r4, r0
 800a426:	2514      	movs	r5, #20
 800a428:	4e4a      	ldr	r6, [pc, #296]	; (800a554 <bc95g_connect+0x138>)
            parser.send("\r\nAT") &&
 800a42a:	4f4b      	ldr	r7, [pc, #300]	; (800a558 <bc95g_connect+0x13c>)
            parser.recv("OK")
 800a42c:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800a560 <bc95g_connect+0x144>
 800a430:	60f3      	str	r3, [r6, #12]
            parser.send("\r\nAT") &&
 800a432:	4639      	mov	r1, r7
 800a434:	4630      	mov	r0, r6
 800a436:	f000 fb42 	bl	800aabe <_ZN8ATParser4sendEPKcz>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d051      	beq.n	800a4e2 <bc95g_connect+0xc6>
            parser.recv("OK")
 800a43e:	4641      	mov	r1, r8
 800a440:	4630      	mov	r0, r6
 800a442:	f000 fb49 	bl	800aad8 <_ZN8ATParser4recvEPKcz>
            parser.send("\r\nAT") &&
 800a446:	2800      	cmp	r0, #0
 800a448:	d04b      	beq.n	800a4e2 <bc95g_connect+0xc6>
            parser.flush();
 800a44a:	4842      	ldr	r0, [pc, #264]	; (800a554 <bc95g_connect+0x138>)
 800a44c:	f000 f9d0 	bl	800a7f0 <_ZN8ATParser5flushEv>
        send_command(dev, NCONFIG) &&
 800a450:	2101      	movs	r1, #1
 800a452:	4620      	mov	r0, r4
 800a454:	f7ff ffa2 	bl	800a39c <_ZL12send_commandP5bc95g9CommandId>
        wait_for_ok(dev) &&
 800a458:	2800      	cmp	r0, #0
 800a45a:	d04c      	beq.n	800a4f6 <bc95g_connect+0xda>
        send_command(dev, QREGSWT) &&
 800a45c:	2102      	movs	r1, #2
 800a45e:	4620      	mov	r0, r4
 800a460:	f7ff ff9c 	bl	800a39c <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, NCONFIG) &&
 800a464:	2800      	cmp	r0, #0
 800a466:	d046      	beq.n	800a4f6 <bc95g_connect+0xda>
        send_command(dev, NRB) &&
 800a468:	2103      	movs	r1, #3
 800a46a:	4620      	mov	r0, r4
 800a46c:	f7ff ff96 	bl	800a39c <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, QREGSWT) &&
 800a470:	2800      	cmp	r0, #0
 800a472:	d040      	beq.n	800a4f6 <bc95g_connect+0xda>
        parser.send("AT") &&
 800a474:	4939      	ldr	r1, [pc, #228]	; (800a55c <bc95g_connect+0x140>)
 800a476:	4837      	ldr	r0, [pc, #220]	; (800a554 <bc95g_connect+0x138>)
 800a478:	f000 fb21 	bl	800aabe <_ZN8ATParser4sendEPKcz>
        send_command(dev, NRB) &&
 800a47c:	b3d8      	cbz	r0, 800a4f6 <bc95g_connect+0xda>
        expect_ok(dev) &&
 800a47e:	f7ff fe1d 	bl	800a0bc <_ZL9expect_okP5bc95g.isra.4>
        parser.send("AT") &&
 800a482:	b3c0      	cbz	r0, 800a4f6 <bc95g_connect+0xda>
        (parser.flush() == 0)
 800a484:	4833      	ldr	r0, [pc, #204]	; (800a554 <bc95g_connect+0x138>)
 800a486:	f000 f9b3 	bl	800a7f0 <_ZN8ATParser5flushEv>
        expect_ok(dev) &&
 800a48a:	4606      	mov	r6, r0
 800a48c:	bb98      	cbnz	r0, 800a4f6 <bc95g_connect+0xda>
        send_command_int(dev, NBAND, MYNEWT_VAL(NBIOT_BAND)) &&
 800a48e:	2208      	movs	r2, #8
 800a490:	2104      	movs	r1, #4
 800a492:	4620      	mov	r0, r4
 800a494:	f7ff ff68 	bl	800a368 <_ZL16send_command_intP5bc95g9CommandIdi>
        wait_for_attach(dev) &&
 800a498:	b368      	cbz	r0, 800a4f6 <bc95g_connect+0xda>
        send_command(dev, CFUN) &&
 800a49a:	2105      	movs	r1, #5
 800a49c:	4620      	mov	r0, r4
 800a49e:	f7ff ff7d 	bl	800a39c <_ZL12send_commandP5bc95g9CommandId>
        send_command_int(dev, NBAND, MYNEWT_VAL(NBIOT_BAND)) &&
 800a4a2:	b340      	cbz	r0, 800a4f6 <bc95g_connect+0xda>
        send_command(dev, CGATT) &&
 800a4a4:	2109      	movs	r1, #9
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f7ff ff78 	bl	800a39c <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, CFUN) &&
 800a4ac:	b318      	cbz	r0, 800a4f6 <bc95g_connect+0xda>
        send_command(dev, CEREG) &&
 800a4ae:	2107      	movs	r1, #7
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f7ff ff73 	bl	800a39c <_ZL12send_commandP5bc95g9CommandId>
        send_command(dev, CGATT) &&
 800a4b6:	b1f0      	cbz	r0, 800a4f6 <bc95g_connect+0xda>
 800a4b8:	2514      	movs	r5, #20
        int code = -1, status = -1;
 800a4ba:	f04f 37ff 	mov.w	r7, #4294967295
        bool res = send_query(dev, CEREG_QUERY, &code, &status);
 800a4be:	ab02      	add	r3, sp, #8
 800a4c0:	aa01      	add	r2, sp, #4
 800a4c2:	2108      	movs	r1, #8
 800a4c4:	4620      	mov	r0, r4
        int code = -1, status = -1;
 800a4c6:	e9cd 7701 	strd	r7, r7, [sp, #4]
        bool res = send_query(dev, CEREG_QUERY, &code, &status);
 800a4ca:	f7ff fe0f 	bl	800a0ec <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15>
        if (!res) { return false; }  //  If send failed, quit.
 800a4ce:	b190      	cbz	r0, 800a4f6 <bc95g_connect+0xda>
        assert(status >= 0);
 800a4d0:	9b02      	ldr	r3, [sp, #8]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	da14      	bge.n	800a500 <bc95g_connect+0xe4>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	461a      	mov	r2, r3
 800a4da:	4619      	mov	r1, r3
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fb fb9f 	bl	8005c20 <__assert_func>
        console_flush();
 800a4e2:	f7f9 fd0f 	bl	8003f04 <console_flush>
 800a4e6:	3d01      	subs	r5, #1
    os_time_delay(seconds * OS_TICKS_PER_SEC);
 800a4e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a4ec:	f7fc fd98 	bl	8007020 <os_time_delay>
    for (uint8_t i = 0; i < 20; i++) {
 800a4f0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800a4f4:	d19d      	bne.n	800a432 <bc95g_connect+0x16>
    ) ? 0 : dev->last_error;
 800a4f6:	6b66      	ldr	r6, [r4, #52]	; 0x34
}
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	b004      	add	sp, #16
 800a4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (status == 1) { return true; }  //  If registered, exit.
 800a500:	2b01      	cmp	r3, #1
 800a502:	d00a      	beq.n	800a51a <bc95g_connect+0xfe>
        console_flush();
 800a504:	f7f9 fcfe 	bl	8003f04 <console_flush>
 800a508:	3d01      	subs	r5, #1
    os_time_delay(seconds * OS_TICKS_PER_SEC);
 800a50a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a50e:	f7fc fd87 	bl	8007020 <os_time_delay>
    for (uint8_t i = 0; i < 20; i++) {
 800a512:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800a516:	d1d2      	bne.n	800a4be <bc95g_connect+0xa2>
 800a518:	e7ed      	b.n	800a4f6 <bc95g_connect+0xda>
        if (!res) { return false; }  //  If send failed, quit.
 800a51a:	2514      	movs	r5, #20
        int state = -1;
 800a51c:	f04f 37ff 	mov.w	r7, #4294967295
        bool res = send_query(dev, CGATT_QUERY, &state, NULL);
 800a520:	2300      	movs	r3, #0
 800a522:	aa03      	add	r2, sp, #12
 800a524:	210a      	movs	r1, #10
 800a526:	4620      	mov	r0, r4
        int state = -1;
 800a528:	9703      	str	r7, [sp, #12]
        bool res = send_query(dev, CGATT_QUERY, &state, NULL);
 800a52a:	f7ff fddf 	bl	800a0ec <_ZL10send_queryP5bc95g9CommandIdPiS2_.constprop.15>
        if (!res) { return false; }  //  If send failed, quit.
 800a52e:	2800      	cmp	r0, #0
 800a530:	d0e1      	beq.n	800a4f6 <bc95g_connect+0xda>
        assert(state >= 0);
 800a532:	9b03      	ldr	r3, [sp, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	dbce      	blt.n	800a4d6 <bc95g_connect+0xba>
        if (state == 1) { return true; }  //  If attached, exit.
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d0dd      	beq.n	800a4f8 <bc95g_connect+0xdc>
        console_flush();
 800a53c:	f7f9 fce2 	bl	8003f04 <console_flush>
 800a540:	3d01      	subs	r5, #1
    os_time_delay(seconds * OS_TICKS_PER_SEC);
 800a542:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a546:	f7fc fd6b 	bl	8007020 <os_time_delay>
    for (uint8_t i = 0; i < 20; i++) {
 800a54a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800a54e:	d1e7      	bne.n	800a520 <bc95g_connect+0x104>
 800a550:	e7d1      	b.n	800a4f6 <bc95g_connect+0xda>
 800a552:	bf00      	nop
 800a554:	2000303c 	.word	0x2000303c
 800a558:	0800e59b 	.word	0x0800e59b
 800a55c:	0800e59d 	.word	0x0800e59d
 800a560:	0800e598 	.word	0x0800e598

0800a564 <bc95g_socket_open>:
 800a564:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
int bc95g_socket_open(struct bc95g *dev, struct bc95g_socket **socket_ptr) {
 800a568:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a56a:	4d19      	ldr	r5, [pc, #100]	; (800a5d0 <bc95g_socket_open+0x6c>)
 800a56c:	4604      	mov	r4, r0
 800a56e:	60eb      	str	r3, [r5, #12]
    dev->last_error = id;  //  Set command ID as the last error.
 800a570:	230b      	movs	r3, #11
 800a572:	6343      	str	r3, [r0, #52]	; 0x34
    *result = -1;
 800a574:	f04f 33ff 	mov.w	r3, #4294967295
int bc95g_socket_open(struct bc95g *dev, struct bc95g_socket **socket_ptr) {
 800a578:	460e      	mov	r6, r1
    *result = -1;
 800a57a:	9301      	str	r3, [sp, #4]
        send_atp(dev) &&
 800a57c:	f7ff fda6 	bl	800a0cc <_ZL8send_atpP5bc95g.isra.6>
        parser.recv("%d", result) &&
 800a580:	b920      	cbnz	r0, 800a58c <bc95g_socket_open+0x28>
    console_flush();
 800a582:	f7f9 fcbf 	bl	8003f04 <console_flush>
    if (!res) { return dev->last_error; }
 800a586:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800a588:	b002      	add	sp, #8
 800a58a:	bd70      	pop	{r4, r5, r6, pc}
        parser.send(cmd) &&
 800a58c:	4911      	ldr	r1, [pc, #68]	; (800a5d4 <bc95g_socket_open+0x70>)
 800a58e:	4628      	mov	r0, r5
 800a590:	f000 fa95 	bl	800aabe <_ZN8ATParser4sendEPKcz>
        send_atp(dev) &&
 800a594:	2800      	cmp	r0, #0
 800a596:	d0f4      	beq.n	800a582 <bc95g_socket_open+0x1e>
        parser.recv("%d", result) &&
 800a598:	aa01      	add	r2, sp, #4
 800a59a:	490f      	ldr	r1, [pc, #60]	; (800a5d8 <bc95g_socket_open+0x74>)
 800a59c:	4628      	mov	r0, r5
 800a59e:	f000 fa9b 	bl	800aad8 <_ZN8ATParser4recvEPKcz>
        parser.send(cmd) &&
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d0ed      	beq.n	800a582 <bc95g_socket_open+0x1e>
        expect_ok(dev)
 800a5a6:	f7ff fd89 	bl	800a0bc <_ZL9expect_okP5bc95g.isra.4>
        parser.recv("%d", result) &&
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d0e9      	beq.n	800a582 <bc95g_socket_open+0x1e>
    console_flush();
 800a5ae:	f7f9 fca9 	bl	8003f04 <console_flush>
    assert(local_port > 0);
 800a5b2:	9b01      	ldr	r3, [sp, #4]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	dc05      	bgt.n	800a5c4 <bc95g_socket_open+0x60>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fb fb2e 	bl	8005c20 <__assert_func>
    socket->local_port = (uint16_t) local_port;
 800a5c4:	f824 3f28 	strh.w	r3, [r4, #40]!
    *socket_ptr = socket;
 800a5c8:	6034      	str	r4, [r6, #0]
    return 0;
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	e7dc      	b.n	800a588 <bc95g_socket_open+0x24>
 800a5ce:	bf00      	nop
 800a5d0:	2000303c 	.word	0x2000303c
 800a5d4:	0800e5a0 	.word	0x0800e5a0
 800a5d8:	0800e62f 	.word	0x0800e62f

0800a5dc <bc95g_socket_tx_mbuf>:
int bc95g_socket_tx(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, const uint8_t *data, uint16_t length, uint8_t sequence) {
    //  Transmit the buffer through the socket.  `length` is the number of bytes in `data`.  `sequence` is a running message sequence number 1 to 255.  Return number of bytes transmitted.
    return send_tx_command(dev, socket, host, port, data, length, sequence, NULL);
}

int bc95g_socket_tx_mbuf(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, uint8_t sequence, struct os_mbuf *mbuf) {
 800a5dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5de:	4614      	mov	r4, r2
    //  Transmit the chain of mbufs through the socket.  `sequence` is a running message sequence number 1 to 255.  Return number of bytes transmitted.
    uint16_t length = OS_MBUF_PKTLEN(mbuf);  //  Length of the mbuf chain.
    return send_tx_command(dev, socket, host, port, NULL, length, sequence, mbuf);
 800a5e0:	8808      	ldrh	r0, [r1, #0]
int bc95g_socket_tx_mbuf(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, uint8_t sequence, struct os_mbuf *mbuf) {
 800a5e2:	461a      	mov	r2, r3
    return send_tx_command(dev, socket, host, port, NULL, length, sequence, mbuf);
 800a5e4:	f89d 1018 	ldrb.w	r1, [sp, #24]
int bc95g_socket_tx_mbuf(struct bc95g *dev, struct bc95g_socket *socket, const char *host, uint16_t port, uint8_t sequence, struct os_mbuf *mbuf) {
 800a5e8:	9b07      	ldr	r3, [sp, #28]
    return send_tx_command(dev, socket, host, port, NULL, length, sequence, mbuf);
 800a5ea:	9101      	str	r1, [sp, #4]
 800a5ec:	9302      	str	r3, [sp, #8]
 800a5ee:	8a1b      	ldrh	r3, [r3, #16]
 800a5f0:	4621      	mov	r1, r4
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f7ff fe3d 	bl	800a274 <_ZL15send_tx_commandP5bc95gP12bc95g_socketPKctPKhthP7os_mbuf.isra.11>
}
 800a5fa:	b004      	add	sp, #16
 800a5fc:	bd10      	pop	{r4, pc}

0800a5fe <_ZL10oc_ep_sizePK11oc_endpoint>:
}

static uint8_t oc_ep_size(const struct oc_endpoint *oe) {
    //  Return the size of the endpoint.  OIC will allocate space to store this endpoint in the transmitted mbuf.
    return sizeof(struct bc95g_endpoint);
}
 800a5fe:	200c      	movs	r0, #12
 800a600:	4770      	bx	lr

0800a602 <_ZL14oc_ep_has_connPK11oc_endpoint>:

static int oc_ep_has_conn(const struct oc_endpoint *oe) {
    //  Return true if the endpoint is connected.  We always return false.
    //  console_printf("oc_ep_has_conn\n");
    return 0;
}
 800a602:	2000      	movs	r0, #0
 800a604:	4770      	bx	lr

0800a606 <_ZL7oc_initv>:

static int oc_init(void) {
    //  Init the endpoint.
    //  console_printf("oc_init\n");
    return 0;
}
 800a606:	2000      	movs	r0, #0
 800a608:	4770      	bx	lr

0800a60a <_ZL11oc_shutdownv>:

static void oc_shutdown(void) {
    //  Shutdown the endpoint.
    //  console_printf("oc_shutdown\n");
}
 800a60a:	4770      	bx	lr

0800a60c <_ZL9oc_ep_strPciPK11oc_endpoint>:
static char *oc_ep_str(char *ptr, int maxlen, const struct oc_endpoint *oe) {
 800a60c:	b510      	push	{r4, lr}
 800a60e:	4604      	mov	r4, r0
    console_printf("NBT str\n");
 800a610:	4804      	ldr	r0, [pc, #16]	; (800a624 <_ZL9oc_ep_strPciPK11oc_endpoint+0x18>)
 800a612:	f7f9 fd51 	bl	80040b8 <console_printf>
    strcpy(ptr, "TODO:oc_ep_str");
 800a616:	4904      	ldr	r1, [pc, #16]	; (800a628 <_ZL9oc_ep_strPciPK11oc_endpoint+0x1c>)
 800a618:	4620      	mov	r0, r4
 800a61a:	f7fc feb3 	bl	8007384 <strcpy>
}
 800a61e:	4620      	mov	r0, r4
 800a620:	bd10      	pop	{r4, pc}
 800a622:	bf00      	nop
 800a624:	0800e65c 	.word	0x0800e65c
 800a628:	0800e665 	.word	0x0800e665

0800a62c <_ZL11oc_tx_ucastP7os_mbuf>:
static void oc_tx_ucast(struct os_mbuf *m) {
 800a62c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    assert(m);  assert(OS_MBUF_USRHDR_LEN(m) >= sizeof(struct bc95g_endpoint));
 800a62e:	4604      	mov	r4, r0
 800a630:	b928      	cbnz	r0, 800a63e <_ZL11oc_tx_ucastP7os_mbuf+0x12>
 800a632:	2300      	movs	r3, #0
 800a634:	461a      	mov	r2, r3
 800a636:	4619      	mov	r1, r3
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fb faf1 	bl	8005c20 <__assert_func>
 800a63e:	7943      	ldrb	r3, [r0, #5]
 800a640:	3b08      	subs	r3, #8
 800a642:	2b0b      	cmp	r3, #11
 800a644:	d9f5      	bls.n	800a632 <_ZL11oc_tx_ucastP7os_mbuf+0x6>
    assert(endpoint);  assert(endpoint->host);  assert(endpoint->port);  //  Host and endpoint should be in the endpoint.
 800a646:	f110 0f18 	cmn.w	r0, #24
 800a64a:	d0f2      	beq.n	800a632 <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 800a64c:	69c1      	ldr	r1, [r0, #28]
 800a64e:	2900      	cmp	r1, #0
 800a650:	d0ef      	beq.n	800a632 <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 800a652:	8c02      	ldrh	r2, [r0, #32]
 800a654:	2a00      	cmp	r2, #0
 800a656:	d0ec      	beq.n	800a632 <_ZL11oc_tx_ucastP7os_mbuf+0x6>
    assert(server);  assert(endpoint->host == server->endpoint.host);  assert(endpoint->port == server->endpoint.port);  //  We only support 1 server connection. Must match the message endpoint.
 800a658:	4b1c      	ldr	r3, [pc, #112]	; (800a6cc <_ZL11oc_tx_ucastP7os_mbuf+0xa0>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d0e8      	beq.n	800a632 <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 800a660:	6858      	ldr	r0, [r3, #4]
 800a662:	4281      	cmp	r1, r0
 800a664:	d1e5      	bne.n	800a632 <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 800a666:	891b      	ldrh	r3, [r3, #8]
 800a668:	4293      	cmp	r3, r2
 800a66a:	d1e2      	bne.n	800a632 <_ZL11oc_tx_ucastP7os_mbuf+0x6>
    assert(network_device);  assert(socket);
 800a66c:	4b18      	ldr	r3, [pc, #96]	; (800a6d0 <_ZL11oc_tx_ucastP7os_mbuf+0xa4>)
 800a66e:	6818      	ldr	r0, [r3, #0]
 800a670:	2800      	cmp	r0, #0
 800a672:	d0de      	beq.n	800a632 <_ZL11oc_tx_ucastP7os_mbuf+0x6>
 800a674:	4e17      	ldr	r6, [pc, #92]	; (800a6d4 <_ZL11oc_tx_ucastP7os_mbuf+0xa8>)
 800a676:	6833      	ldr	r3, [r6, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d0da      	beq.n	800a632 <_ZL11oc_tx_ucastP7os_mbuf+0x6>
    sequence++;
 800a67c:	4d16      	ldr	r5, [pc, #88]	; (800a6d8 <_ZL11oc_tx_ucastP7os_mbuf+0xac>)
        struct bc95g *dev = (struct bc95g *) os_dev_open(network_device, OS_TIMEOUT_NEVER, NULL);  //  network_device is `bc95g_0`
 800a67e:	2200      	movs	r2, #0
    sequence++;
 800a680:	782b      	ldrb	r3, [r5, #0]
        struct bc95g *dev = (struct bc95g *) os_dev_open(network_device, OS_TIMEOUT_NEVER, NULL);  //  network_device is `bc95g_0`
 800a682:	f04f 31ff 	mov.w	r1, #4294967295
    sequence++;
 800a686:	3301      	adds	r3, #1
    if (sequence == 0) { sequence = 1; }
 800a688:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800a68c:	bf08      	it	eq
 800a68e:	2301      	moveq	r3, #1
 800a690:	702b      	strb	r3, [r5, #0]
        struct bc95g *dev = (struct bc95g *) os_dev_open(network_device, OS_TIMEOUT_NEVER, NULL);  //  network_device is `bc95g_0`
 800a692:	f7fb fd4f 	bl	8006134 <os_dev_open>
        assert(dev != NULL);
 800a696:	4607      	mov	r7, r0
 800a698:	2800      	cmp	r0, #0
 800a69a:	d0ca      	beq.n	800a632 <_ZL11oc_tx_ucastP7os_mbuf+0x6>
        console_printf("NBT send udp\n");
 800a69c:	480f      	ldr	r0, [pc, #60]	; (800a6dc <_ZL11oc_tx_ucastP7os_mbuf+0xb0>)
 800a69e:	f7f9 fd0b 	bl	80040b8 <console_printf>
        rc = bc95g_socket_tx_mbuf(dev, socket, endpoint->host, endpoint->port, sequence, m);
 800a6a2:	782a      	ldrb	r2, [r5, #0]
 800a6a4:	8c23      	ldrh	r3, [r4, #32]
 800a6a6:	9401      	str	r4, [sp, #4]
 800a6a8:	9200      	str	r2, [sp, #0]
 800a6aa:	69e2      	ldr	r2, [r4, #28]
 800a6ac:	6831      	ldr	r1, [r6, #0]
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	f7ff ff94 	bl	800a5dc <bc95g_socket_tx_mbuf>
        assert(rc > 0);
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	ddbc      	ble.n	800a632 <_ZL11oc_tx_ucastP7os_mbuf+0x6>
        os_dev_close((struct os_dev *) dev);
 800a6b8:	4638      	mov	r0, r7
 800a6ba:	f7fb fd5c 	bl	8006176 <os_dev_close>
    rc = os_mbuf_free_chain(m);  assert(rc == 0);
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f7fb feb7 	bl	8006432 <os_mbuf_free_chain>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d1b4      	bne.n	800a632 <_ZL11oc_tx_ucastP7os_mbuf+0x6>
}
 800a6c8:	b003      	add	sp, #12
 800a6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6cc:	200030cc 	.word	0x200030cc
 800a6d0:	200030c8 	.word	0x200030c8
 800a6d4:	200030d0 	.word	0x200030d0
 800a6d8:	200030d4 	.word	0x200030d4
 800a6dc:	0800e64e 	.word	0x0800e64e

0800a6e0 <init_bc95g_server>:
int init_bc95g_server(struct bc95g_server *server, const char *host, uint16_t port) {
 800a6e0:	b510      	push	{r4, lr}
    endpoint->ep.oe_type = transport_id;  //  Populate our transport ID so that OIC will call our functions.
 800a6e2:	4c07      	ldr	r4, [pc, #28]	; (800a700 <init_bc95g_server+0x20>)
 800a6e4:	7803      	ldrb	r3, [r0, #0]
 800a6e6:	7824      	ldrb	r4, [r4, #0]
 800a6e8:	f364 0302 	bfi	r3, r4, #0, #3
    endpoint->ep.oe_flags = 0;
 800a6ec:	f36f 03c7 	bfc	r3, #3, #5
 800a6f0:	7003      	strb	r3, [r0, #0]
    if (host) { 
 800a6f2:	b109      	cbz	r1, 800a6f8 <init_bc95g_server+0x18>
        endpoint->host = host;
 800a6f4:	6041      	str	r1, [r0, #4]
        endpoint->port = port;
 800a6f6:	8102      	strh	r2, [r0, #8]
    server->handle = (struct oc_server_handle *) server;
 800a6f8:	60c0      	str	r0, [r0, #12]
}
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	bd10      	pop	{r4, pc}
 800a6fe:	bf00      	nop
 800a700:	20000235 	.word	0x20000235

0800a704 <bc95g_register_transport>:
int bc95g_register_transport(const char *network_device0, struct bc95g_server *server0, const char *host, uint16_t port) {
 800a704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a708:	460d      	mov	r5, r1
 800a70a:	4616      	mov	r6, r2
 800a70c:	4698      	mov	r8, r3
    assert(network_device0);  assert(server0);
 800a70e:	4607      	mov	r7, r0
 800a710:	b928      	cbnz	r0, 800a71e <bc95g_register_transport+0x1a>
 800a712:	2300      	movs	r3, #0
 800a714:	461a      	mov	r2, r3
 800a716:	4619      	mov	r1, r3
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fb fa81 	bl	8005c20 <__assert_func>
 800a71e:	2900      	cmp	r1, #0
 800a720:	d0f7      	beq.n	800a712 <bc95g_register_transport+0xe>
        struct bc95g *dev = (struct bc95g *) os_dev_open(network_device0, OS_TIMEOUT_NEVER, NULL);  //  BC95G_DEVICE is "bc95g_0"
 800a722:	2200      	movs	r2, #0
 800a724:	f04f 31ff 	mov.w	r1, #4294967295
 800a728:	f7fb fd04 	bl	8006134 <os_dev_open>
        assert(dev != NULL);
 800a72c:	4604      	mov	r4, r0
 800a72e:	2800      	cmp	r0, #0
 800a730:	d0ef      	beq.n	800a712 <bc95g_register_transport+0xe>
        transport_id = oc_transport_register(&transport);
 800a732:	4811      	ldr	r0, [pc, #68]	; (800a778 <bc95g_register_transport+0x74>)
 800a734:	f7fa fcba 	bl	80050ac <oc_transport_register>
 800a738:	4b10      	ldr	r3, [pc, #64]	; (800a77c <bc95g_register_transport+0x78>)
        int rc = init_bc95g_server(server0, host, port);
 800a73a:	4642      	mov	r2, r8
        transport_id = oc_transport_register(&transport);
 800a73c:	7018      	strb	r0, [r3, #0]
        int rc = init_bc95g_server(server0, host, port);
 800a73e:	4631      	mov	r1, r6
 800a740:	4628      	mov	r0, r5
 800a742:	f7ff ffcd 	bl	800a6e0 <init_bc95g_server>
        assert(rc == 0);
 800a746:	2800      	cmp	r0, #0
 800a748:	d1e3      	bne.n	800a712 <bc95g_register_transport+0xe>
        rc = bc95g_connect(dev);
 800a74a:	4620      	mov	r0, r4
 800a74c:	f7ff fe66 	bl	800a41c <bc95g_connect>
        assert(rc == 0);
 800a750:	2800      	cmp	r0, #0
 800a752:	d1de      	bne.n	800a712 <bc95g_register_transport+0xe>
        rc = bc95g_socket_open(dev, &socket);
 800a754:	490a      	ldr	r1, [pc, #40]	; (800a780 <bc95g_register_transport+0x7c>)
 800a756:	4620      	mov	r0, r4
 800a758:	f7ff ff04 	bl	800a564 <bc95g_socket_open>
        assert(rc == 0);
 800a75c:	4606      	mov	r6, r0
 800a75e:	2800      	cmp	r0, #0
 800a760:	d1d7      	bne.n	800a712 <bc95g_register_transport+0xe>
        network_device = network_device0;
 800a762:	4b08      	ldr	r3, [pc, #32]	; (800a784 <bc95g_register_transport+0x80>)
        os_dev_close((struct os_dev *) dev);
 800a764:	4620      	mov	r0, r4
        network_device = network_device0;
 800a766:	601f      	str	r7, [r3, #0]
        server = server0;
 800a768:	4b07      	ldr	r3, [pc, #28]	; (800a788 <bc95g_register_transport+0x84>)
 800a76a:	601d      	str	r5, [r3, #0]
        os_dev_close((struct os_dev *) dev);
 800a76c:	f7fb fd03 	bl	8006176 <os_dev_close>
}
 800a770:	4630      	mov	r0, r6
 800a772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a776:	bf00      	nop
 800a778:	0800e674 	.word	0x0800e674
 800a77c:	20000235 	.word	0x20000235
 800a780:	200030d0 	.word	0x200030d0
 800a784:	200030c8 	.word	0x200030c8
 800a788:	200030cc 	.word	0x200030cc

0800a78c <_log>:
const char *_okfailed(int ok) {
    if (ok) { return " OK\n"; }
    return " FAILED\n";
}

void _log(const char *func, int ok) {
 800a78c:	b508      	push	{r3, lr}
    console_printf("%s%s%s", _nbt, func, _okfailed(ok));
 800a78e:	4a07      	ldr	r2, [pc, #28]	; (800a7ac <_log+0x20>)
 800a790:	4b07      	ldr	r3, [pc, #28]	; (800a7b0 <_log+0x24>)
 800a792:	2900      	cmp	r1, #0
 800a794:	bf18      	it	ne
 800a796:	4613      	movne	r3, r2
 800a798:	4906      	ldr	r1, [pc, #24]	; (800a7b4 <_log+0x28>)
 800a79a:	4602      	mov	r2, r0
 800a79c:	6809      	ldr	r1, [r1, #0]
 800a79e:	4806      	ldr	r0, [pc, #24]	; (800a7b8 <_log+0x2c>)
 800a7a0:	f7f9 fc8a 	bl	80040b8 <console_printf>
    console_flush();
}
 800a7a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    console_flush();
 800a7a8:	f7f9 bbac 	b.w	8003f04 <console_flush>
 800a7ac:	0800e69f 	.word	0x0800e69f
 800a7b0:	0800e6a4 	.word	0x0800e6a4
 800a7b4:	20000238 	.word	0x20000238
 800a7b8:	0800e698 	.word	0x0800e698

0800a7bc <_ZN8ATParser4initER14BufferedSerialPciPKcib>:
//  e.g.  debug_if(dbg_on, "AT> %s\r\n", _buffer)
#define debug_if(dbg_on, format, arg) console_printf(format, arg)
//  #define debug_if(dbg_on, format, arg) {}

void ATParser::init(BufferedSerial &serial, char *buffer, int buffer_size, const char *delimiter, int timeout, bool debug)
{
 800a7bc:	b510      	push	{r4, lr}
 800a7be:	4604      	mov	r4, r0
 800a7c0:	9802      	ldr	r0, [sp, #8]
    _serial = &serial;
    _buffer = buffer;
    _buffer_size = buffer_size; 
 800a7c2:	60a3      	str	r3, [r4, #8]
 800a7c4:	9b03      	ldr	r3, [sp, #12]
    _buffer = buffer;
 800a7c6:	e9c4 1200 	strd	r1, r2, [r4]
        _delimiter = delimiter;
 800a7ca:	e9c4 3003 	strd	r3, r0, [r4, #12]
        _delim_size = strlen(delimiter);
 800a7ce:	f7fc fde1 	bl	8007394 <strlen>
        dbg_on = (on) ? 1 : 0;
 800a7d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
        _delim_size = strlen(delimiter);
 800a7d6:	6160      	str	r0, [r4, #20]
        dbg_on = (on) ? 1 : 0;
 800a7d8:	7623      	strb	r3, [r4, #24]
    setTimeout(timeout);
    setDelimiter(delimiter);
    debugOn(debug);
    for (int k = 0; k < MAX_OOBS; k++) { _oobs[k].len = 0; }  //  Init the callbacks.
 800a7da:	2300      	movs	r3, #0
 800a7dc:	61e3      	str	r3, [r4, #28]
 800a7de:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800a7e0:	bd10      	pop	{r4, pc}

0800a7e2 <_ZN8ATParser4putcEc>:

// getc/putc handling with timeouts
int ATParser::putc(char c)
{
    //  TODO: Handle timeout.
    return _serial->putc(c);
 800a7e2:	6800      	ldr	r0, [r0, #0]
 800a7e4:	f000 ba48 	b.w	800ac78 <_ZN14BufferedSerial4putcEi>

0800a7e8 <_ZN8ATParser5fgetcEv>:
}

int ATParser::getc()
{
    //  Return the next received byte.  If no data, block until the timeout.
    return _serial->getc(_timeout);
 800a7e8:	68c1      	ldr	r1, [r0, #12]
 800a7ea:	6800      	ldr	r0, [r0, #0]
 800a7ec:	f000 b9b1 	b.w	800ab52 <_ZN14BufferedSerial5fgetcEi>

0800a7f0 <_ZN8ATParser5flushEv>:
}

int ATParser::flush()
{
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	4604      	mov	r4, r0
    while (_serial->readable()) {
 800a7f4:	6820      	ldr	r0, [r4, #0]
 800a7f6:	f000 f9a6 	bl	800ab46 <_ZN14BufferedSerial8readableEv>
 800a7fa:	b120      	cbz	r0, 800a806 <_ZN8ATParser5flushEv+0x16>
        _serial->getc(0);  //  Do not wait for data to be available.
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	6820      	ldr	r0, [r4, #0]
 800a800:	f000 f9a7 	bl	800ab52 <_ZN14BufferedSerial5fgetcEi>
    while (_serial->readable()) {
 800a804:	e7f6      	b.n	800a7f4 <_ZN8ATParser5flushEv+0x4>
    }
    return 0;
}
 800a806:	bd10      	pop	{r4, pc}

0800a808 <_ZN8ATParser5writeEPKci>:


// read/write handling with timeouts
int ATParser::write(const char *data, int size)
{
 800a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80a:	4605      	mov	r5, r0
 800a80c:	460e      	mov	r6, r1
 800a80e:	4617      	mov	r7, r2
    int i = 0;
 800a810:	2400      	movs	r4, #0
    for ( ; i < size; i++) {
 800a812:	42bc      	cmp	r4, r7
 800a814:	da09      	bge.n	800a82a <_ZN8ATParser5writeEPKci+0x22>
        if (putc(data[i]) < 0) {
 800a816:	5d31      	ldrb	r1, [r6, r4]
 800a818:	4628      	mov	r0, r5
 800a81a:	f7ff ffe2 	bl	800a7e2 <_ZN8ATParser4putcEc>
 800a81e:	2800      	cmp	r0, #0
 800a820:	db01      	blt.n	800a826 <_ZN8ATParser5writeEPKci+0x1e>
    for ( ; i < size; i++) {
 800a822:	3401      	adds	r4, #1
 800a824:	e7f5      	b.n	800a812 <_ZN8ATParser5writeEPKci+0xa>
            return -1;
 800a826:	f04f 34ff 	mov.w	r4, #4294967295
        }
    }
    return i;
}
 800a82a:	4620      	mov	r0, r4
 800a82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a82e <_ZN8ATParser7vprintfEPKcSt9__va_list>:
}


// printf/scanf handling
int ATParser::vprintf(const char *format, va_list args)
{
 800a82e:	b538      	push	{r3, r4, r5, lr}
 800a830:	4605      	mov	r5, r0
    if (vsprintf(_buffer, format, args) < 0) {
 800a832:	6840      	ldr	r0, [r0, #4]
 800a834:	f001 fb4c 	bl	800bed0 <vsprintf>
 800a838:	2800      	cmp	r0, #0
        return false;
 800a83a:	f04f 0400 	mov.w	r4, #0
    if (vsprintf(_buffer, format, args) < 0) {
 800a83e:	db0b      	blt.n	800a858 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x2a>
    }
    int i = 0;
    for ( ; _buffer[i]; i++) {
 800a840:	686b      	ldr	r3, [r5, #4]
 800a842:	5d19      	ldrb	r1, [r3, r4]
 800a844:	b141      	cbz	r1, 800a858 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x2a>
        if (putc(_buffer[i]) < 0) {
 800a846:	4628      	mov	r0, r5
 800a848:	f7ff ffcb 	bl	800a7e2 <_ZN8ATParser4putcEc>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	db01      	blt.n	800a854 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x26>
    for ( ; _buffer[i]; i++) {
 800a850:	3401      	adds	r4, #1
 800a852:	e7f5      	b.n	800a840 <_ZN8ATParser7vprintfEPKcSt9__va_list+0x12>
            return -1;
 800a854:	f04f 34ff 	mov.w	r4, #4294967295
        }
    }
    return i;
}
 800a858:	4620      	mov	r0, r4
 800a85a:	bd38      	pop	{r3, r4, r5, pc}

0800a85c <_ZN8ATParser5vsendEPKcSt9__va_list>:
}


// Command parsing with line handling
bool ATParser::vsend(const char *command, va_list args)
{
 800a85c:	b538      	push	{r3, r4, r5, lr}
 800a85e:	4605      	mov	r5, r0
    // Create and send command
    if (vsprintf(_buffer, command, args) < 0) {
 800a860:	6840      	ldr	r0, [r0, #4]
 800a862:	f001 fb35 	bl	800bed0 <vsprintf>
 800a866:	2800      	cmp	r0, #0
 800a868:	da01      	bge.n	800a86e <_ZN8ATParser5vsendEPKcSt9__va_list+0x12>
        return false;
 800a86a:	2000      	movs	r0, #0
        }
    }

    debug_if(dbg_on, "AT> %s\r\n", _buffer);
    return true;
}
 800a86c:	bd38      	pop	{r3, r4, r5, pc}
    for (int i = 0; _buffer[i]; i++) {
 800a86e:	2400      	movs	r4, #0
 800a870:	686b      	ldr	r3, [r5, #4]
 800a872:	5d19      	ldrb	r1, [r3, r4]
 800a874:	b131      	cbz	r1, 800a884 <_ZN8ATParser5vsendEPKcSt9__va_list+0x28>
        if (putc(_buffer[i]) < 0) {
 800a876:	4628      	mov	r0, r5
 800a878:	f7ff ffb3 	bl	800a7e2 <_ZN8ATParser4putcEc>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	dbf4      	blt.n	800a86a <_ZN8ATParser5vsendEPKcSt9__va_list+0xe>
    for (int i = 0; _buffer[i]; i++) {
 800a880:	3401      	adds	r4, #1
 800a882:	e7f5      	b.n	800a870 <_ZN8ATParser5vsendEPKcSt9__va_list+0x14>
    for (int i = 0; _delimiter[i]; i++) {
 800a884:	460c      	mov	r4, r1
 800a886:	692b      	ldr	r3, [r5, #16]
 800a888:	5d19      	ldrb	r1, [r3, r4]
 800a88a:	b131      	cbz	r1, 800a89a <_ZN8ATParser5vsendEPKcSt9__va_list+0x3e>
        if (putc(_delimiter[i]) < 0) {
 800a88c:	4628      	mov	r0, r5
 800a88e:	f7ff ffa8 	bl	800a7e2 <_ZN8ATParser4putcEc>
 800a892:	2800      	cmp	r0, #0
 800a894:	dbe9      	blt.n	800a86a <_ZN8ATParser5vsendEPKcSt9__va_list+0xe>
    for (int i = 0; _delimiter[i]; i++) {
 800a896:	3401      	adds	r4, #1
 800a898:	e7f5      	b.n	800a886 <_ZN8ATParser5vsendEPKcSt9__va_list+0x2a>
    debug_if(dbg_on, "AT> %s\r\n", _buffer);
 800a89a:	6869      	ldr	r1, [r5, #4]
 800a89c:	4802      	ldr	r0, [pc, #8]	; (800a8a8 <_ZN8ATParser5vsendEPKcSt9__va_list+0x4c>)
 800a89e:	f7f9 fc0b 	bl	80040b8 <console_printf>
 800a8a2:	2001      	movs	r0, #1
 800a8a4:	e7e2      	b.n	800a86c <_ZN8ATParser5vsendEPKcSt9__va_list+0x10>
 800a8a6:	bf00      	nop
 800a8a8:	0800e711 	.word	0x0800e711

0800a8ac <_ZN8ATParser5vrecvEPKcSt9__va_list>:

bool ATParser::vrecv(const char *response, va_list args)
{
 800a8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	460d      	mov	r5, r1
 800a8b4:	b089      	sub	sp, #36	; 0x24
 800a8b6:	9203      	str	r2, [sp, #12]
    // Iterate through each line in the expected response
    while (response[0]) {
 800a8b8:	782b      	ldrb	r3, [r5, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f000 80e1 	beq.w	800aa82 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d6>
 800a8c0:	462f      	mov	r7, r5
        // Since response is const, we need to copy it into our buffer to
        // add the line's null terminator and clobber value-matches with asterisks.
        //
        // We just use the beginning of the buffer to avoid unnecessary allocations.
        int i = 0;
        int offset = 0;
 800a8c2:	2600      	movs	r6, #0
 800a8c4:	eba7 0b05 	sub.w	fp, r7, r5
 800a8c8:	6862      	ldr	r2, [r4, #4]

        while (response[i]) {
 800a8ca:	f817 ab01 	ldrb.w	sl, [r7], #1
 800a8ce:	f106 0901 	add.w	r9, r6, #1
 800a8d2:	f8cd 9000 	str.w	r9, [sp]
 800a8d6:	eb02 0806 	add.w	r8, r2, r6
 800a8da:	f1ba 0f00 	cmp.w	sl, #0
 800a8de:	d01d      	beq.n	800a91c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x70>
            if (memcmp(&response[i+1-_delim_size], _delimiter, _delim_size) == 0) {
 800a8e0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800a8e4:	1ab8      	subs	r0, r7, r2
 800a8e6:	eba7 0b05 	sub.w	fp, r7, r5
 800a8ea:	f7fc fcf9 	bl	80072e0 <memcmp>
 800a8ee:	b1a8      	cbz	r0, 800a91c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x70>
                i++;
                break;
            } else if (response[i] == '%' && response[i+1] != '%' && response[i+1] != '*') {
 800a8f0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a8f4:	9b00      	ldr	r3, [sp, #0]
 800a8f6:	d10e      	bne.n	800a916 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x6a>
 800a8f8:	783a      	ldrb	r2, [r7, #0]
 800a8fa:	2a25      	cmp	r2, #37	; 0x25
 800a8fc:	d00b      	beq.n	800a916 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x6a>
 800a8fe:	2a2a      	cmp	r2, #42	; 0x2a
 800a900:	d009      	beq.n	800a916 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x6a>
                _buffer[offset++] = '%';
                _buffer[offset++] = '*';
 800a902:	f04f 012a 	mov.w	r1, #42	; 0x2a
                _buffer[offset++] = '%';
 800a906:	f888 a000 	strb.w	sl, [r8]
                _buffer[offset++] = '*';
 800a90a:	6862      	ldr	r2, [r4, #4]
 800a90c:	f106 0902 	add.w	r9, r6, #2
 800a910:	54d1      	strb	r1, [r2, r3]
{
 800a912:	464e      	mov	r6, r9
 800a914:	e7d6      	b.n	800a8c4 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x18>
                i++;
            } else {
                _buffer[offset++] = response[i++];
 800a916:	f888 a000 	strb.w	sl, [r8]
 800a91a:	e7fa      	b.n	800a912 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x66>
        }

        // Scanf has very poor support for catching errors
        // fortunately, we can abuse the %n specifier to determine
        // if the entire string was matched.
        _buffer[offset++] = '%';
 800a91c:	2325      	movs	r3, #37	; 0x25
        _buffer[offset++] = 'n';
 800a91e:	226e      	movs	r2, #110	; 0x6e
        _buffer[offset++] = '%';
 800a920:	f888 3000 	strb.w	r3, [r8]
        _buffer[offset++] = 'n';
 800a924:	6863      	ldr	r3, [r4, #4]
        _buffer[offset++] = 0;
 800a926:	1cf7      	adds	r7, r6, #3
        _buffer[offset++] = 'n';
 800a928:	f803 2009 	strb.w	r2, [r3, r9]
        _buffer[offset++] = 0;
 800a92c:	6863      	ldr	r3, [r4, #4]
        // format string that only stores the matched characters (%n).
        // The other reads in the actual matched values.
        //
        // We keep trying the match until we succeed or some other error
        // derails us.
        int j = 0, last_count = -1; char *last_scan = _buffer;
 800a92e:	f04f 0800 	mov.w	r8, #0
        _buffer[offset++] = 0;
 800a932:	441e      	add	r6, r3
 800a934:	f04f 0300 	mov.w	r3, #0
 800a938:	70b3      	strb	r3, [r6, #2]
        int j = 0, last_count = -1; char *last_scan = _buffer;
 800a93a:	f8d4 9004 	ldr.w	r9, [r4, #4]

        while (true) {
            // Receive next character
            int c = getc();
 800a93e:	4620      	mov	r0, r4
 800a940:	f7ff ff52 	bl	800a7e8 <_ZN8ATParser5fgetcEv>
            if (c < 0) {
 800a944:	1e03      	subs	r3, r0, #0
 800a946:	9301      	str	r3, [sp, #4]
 800a948:	da0a      	bge.n	800a960 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xb4>
                console_printf("AT response mismatch: found \"%s\"\n   expected \"%s\"\n", last_scan, _buffer);  console_flush();
 800a94a:	6862      	ldr	r2, [r4, #4]
 800a94c:	4649      	mov	r1, r9
 800a94e:	484e      	ldr	r0, [pc, #312]	; (800aa88 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1dc>)
 800a950:	f7f9 fbb2 	bl	80040b8 <console_printf>
 800a954:	f7f9 fad6 	bl	8003f04 <console_flush>
                ////asm("bkpt");
                return false;
 800a958:	2000      	movs	r0, #0
            }
        }
    }

    return true;
}
 800a95a:	b009      	add	sp, #36	; 0x24
 800a95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            _buffer[offset + j] = 0;
 800a960:	f04f 0100 	mov.w	r1, #0
            for (int k = 0; k < MAX_OOBS; k++) {
 800a964:	f04f 0a00 	mov.w	sl, #0
            _buffer[offset + j++] = c;
 800a968:	6863      	ldr	r3, [r4, #4]
 800a96a:	9a01      	ldr	r2, [sp, #4]
 800a96c:	f108 0601 	add.w	r6, r8, #1
 800a970:	4443      	add	r3, r8
 800a972:	55da      	strb	r2, [r3, r7]
            _buffer[offset + j] = 0;
 800a974:	19bb      	adds	r3, r7, r6
 800a976:	9304      	str	r3, [sp, #16]
 800a978:	6863      	ldr	r3, [r4, #4]
 800a97a:	19ba      	adds	r2, r7, r6
 800a97c:	5499      	strb	r1, [r3, r2]
 800a97e:	6863      	ldr	r3, [r4, #4]
 800a980:	19da      	adds	r2, r3, r7
 800a982:	9202      	str	r2, [sp, #8]
 800a984:	eb04 190a 	add.w	r9, r4, sl, lsl #4
                if (_oobs[k].len == 0) { continue; }  //  Skip empty callbacks.
 800a988:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a98c:	b1e2      	cbz	r2, 800a9c8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x11c>
                if (
 800a98e:	42b2      	cmp	r2, r6
 800a990:	d11a      	bne.n	800a9c8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x11c>
 800a992:	9305      	str	r3, [sp, #20]
                    memcmp(_oobs[k].prefix, _buffer+offset, _oobs[k].len) == 0
 800a994:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800a998:	4632      	mov	r2, r6
 800a99a:	4618      	mov	r0, r3
 800a99c:	9902      	ldr	r1, [sp, #8]
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	f7fc fc9e 	bl	80072e0 <memcmp>
                    j == (int) _oobs[k].len && 
 800a9a4:	9b05      	ldr	r3, [sp, #20]
 800a9a6:	b978      	cbnz	r0, 800a9c8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x11c>
                    debug_if(dbg_on, "AT! %s\r\n", _oobs[k].prefix);
 800a9a8:	9900      	ldr	r1, [sp, #0]
 800a9aa:	4838      	ldr	r0, [pc, #224]	; (800aa8c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e0>)
 800a9ac:	f7f9 fb84 	bl	80040b8 <console_printf>
                    _oobs[k].cb(_oobs[k].arg);
 800a9b0:	e9d9 3009 	ldrd	r3, r0, [r9, #36]	; 0x24
 800a9b4:	4798      	blx	r3
                    return vrecv(response, args);
 800a9b6:	9a03      	ldr	r2, [sp, #12]
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f7ff ff76 	bl	800a8ac <_ZN8ATParser5vrecvEPKcSt9__va_list>
 800a9c0:	e7cb      	b.n	800a95a <_ZN8ATParser5vrecvEPKcSt9__va_list+0xae>
 800a9c2:	f04f 0a01 	mov.w	sl, #1
 800a9c6:	e7dd      	b.n	800a984 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xd8>
            for (int k = 0; k < MAX_OOBS; k++) {
 800a9c8:	f1ba 0f00 	cmp.w	sl, #0
 800a9cc:	d0f9      	beq.n	800a9c2 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x116>
            int count = -1;
 800a9ce:	f04f 31ff 	mov.w	r1, #4294967295
 800a9d2:	aa08      	add	r2, sp, #32
 800a9d4:	f842 1d04 	str.w	r1, [r2, #-4]!
            sscanf(_buffer+offset, _buffer, &count);
 800a9d8:	9802      	ldr	r0, [sp, #8]
 800a9da:	4619      	mov	r1, r3
 800a9dc:	f001 f9c6 	bl	800bd6c <sscanf>
            if (debug_bc95g && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 800a9e0:	4a2b      	ldr	r2, [pc, #172]	; (800aa90 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e4>)
            last_count = count; last_scan = _buffer + offset;
 800a9e2:	6863      	ldr	r3, [r4, #4]
            if (debug_bc95g && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 800a9e4:	6812      	ldr	r2, [r2, #0]
            last_count = count; last_scan = _buffer + offset;
 800a9e6:	eb03 0907 	add.w	r9, r3, r7
            if (debug_bc95g && c == '\n' && last_scan[0] != '\n' && last_scan[0] != '\r') {
 800a9ea:	b172      	cbz	r2, 800aa0a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
 800a9ec:	9a01      	ldr	r2, [sp, #4]
 800a9ee:	2a0a      	cmp	r2, #10
 800a9f0:	d10b      	bne.n	800aa0a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
 800a9f2:	5ddb      	ldrb	r3, [r3, r7]
 800a9f4:	2b0a      	cmp	r3, #10
 800a9f6:	d008      	beq.n	800aa0a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
 800a9f8:	2b0d      	cmp	r3, #13
 800a9fa:	d006      	beq.n	800aa0a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
            last_count = count; last_scan = _buffer + offset;
 800a9fc:	9907      	ldr	r1, [sp, #28]
                if (last_count > 0) { console_printf("  < %d / %s", last_count, last_scan); }
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	dd1e      	ble.n	800aa40 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x194>
 800aa02:	464a      	mov	r2, r9
 800aa04:	4823      	ldr	r0, [pc, #140]	; (800aa94 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1e8>)
 800aa06:	f7f9 fb57 	bl	80040b8 <console_printf>
            if (count == j) {
 800aa0a:	9b07      	ldr	r3, [sp, #28]
 800aa0c:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800aa10:	42b3      	cmp	r3, r6
 800aa12:	d11a      	bne.n	800aa4a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x19e>
                debug_if(dbg_on, "AT= %s\r\n", _buffer+offset);
 800aa14:	eb0a 0107 	add.w	r1, sl, r7
 800aa18:	481f      	ldr	r0, [pc, #124]	; (800aa98 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1ec>)
 800aa1a:	f7f9 fb4d 	bl	80040b8 <console_printf>
                memcpy(_buffer, response, i);
 800aa1e:	4629      	mov	r1, r5
 800aa20:	465a      	mov	r2, fp
 800aa22:	6860      	ldr	r0, [r4, #4]
 800aa24:	f7fc fc80 	bl	8007328 <memcpy>
                _buffer[i] = 0;
 800aa28:	f04f 0200 	mov.w	r2, #0
 800aa2c:	6863      	ldr	r3, [r4, #4]
                response += i;
 800aa2e:	445d      	add	r5, fp
                _buffer[i] = 0;
 800aa30:	f803 200b 	strb.w	r2, [r3, fp]
                vsscanf(_buffer+offset, _buffer, args);
 800aa34:	6861      	ldr	r1, [r4, #4]
 800aa36:	9a03      	ldr	r2, [sp, #12]
 800aa38:	19c8      	adds	r0, r1, r7
 800aa3a:	f000 fb51 	bl	800b0e0 <vsscanf>
 800aa3e:	e73b      	b.n	800a8b8 <_ZN8ATParser5vrecvEPKcSt9__va_list+0xc>
                else { console_printf("  < %s", last_scan); }
 800aa40:	4649      	mov	r1, r9
 800aa42:	4816      	ldr	r0, [pc, #88]	; (800aa9c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f0>)
 800aa44:	f7f9 fb38 	bl	80040b8 <console_printf>
 800aa48:	e7df      	b.n	800aa0a <_ZN8ATParser5vrecvEPKcSt9__va_list+0x15e>
            if (j+1 >= _buffer_size - offset ||
 800aa4a:	68a3      	ldr	r3, [r4, #8]
 800aa4c:	f108 0802 	add.w	r8, r8, #2
 800aa50:	1bdb      	subs	r3, r3, r7
 800aa52:	4598      	cmp	r8, r3
 800aa54:	da07      	bge.n	800aa66 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1ba>
                strcmp(&_buffer[offset + j-_delim_size], _delimiter) == 0) {
 800aa56:	6960      	ldr	r0, [r4, #20]
 800aa58:	9b04      	ldr	r3, [sp, #16]
 800aa5a:	6921      	ldr	r1, [r4, #16]
 800aa5c:	1a18      	subs	r0, r3, r0
 800aa5e:	4450      	add	r0, sl
 800aa60:	f7fc fc86 	bl	8007370 <strcmp>
            if (j+1 >= _buffer_size - offset ||
 800aa64:	b958      	cbnz	r0, 800aa7e <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d2>
                if (_buffer[offset] != '\r' && _buffer[offset] != '\n') {  //  Skip blank lines.
 800aa66:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800aa6a:	eb0a 0107 	add.w	r1, sl, r7
 800aa6e:	2b0d      	cmp	r3, #13
 800aa70:	d004      	beq.n	800aa7c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d0>
 800aa72:	2b0a      	cmp	r3, #10
 800aa74:	d002      	beq.n	800aa7c <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1d0>
                    debug_if(dbg_on, "AT< %s", _buffer+offset);
 800aa76:	480a      	ldr	r0, [pc, #40]	; (800aaa0 <_ZN8ATParser5vrecvEPKcSt9__va_list+0x1f4>)
 800aa78:	f7f9 fb1e 	bl	80040b8 <console_printf>
                j = 0;
 800aa7c:	2600      	movs	r6, #0
        }
 800aa7e:	46b0      	mov	r8, r6
 800aa80:	e75d      	b.n	800a93e <_ZN8ATParser5vrecvEPKcSt9__va_list+0x92>
    return true;
 800aa82:	2001      	movs	r0, #1
 800aa84:	e769      	b.n	800a95a <_ZN8ATParser5vrecvEPKcSt9__va_list+0xae>
 800aa86:	bf00      	nop
 800aa88:	0800e6b2 	.word	0x0800e6b2
 800aa8c:	0800e6e5 	.word	0x0800e6e5
 800aa90:	200030d8 	.word	0x200030d8
 800aa94:	0800e6ee 	.word	0x0800e6ee
 800aa98:	0800e701 	.word	0x0800e701
 800aa9c:	0800e6fa 	.word	0x0800e6fa
 800aaa0:	0800e70a 	.word	0x0800e70a

0800aaa4 <_ZN8ATParser6printfEPKcz>:


// Mapping to vararg functions
int ATParser::printf(const char *format, ...)
{
 800aaa4:	b40e      	push	{r1, r2, r3}
 800aaa6:	b503      	push	{r0, r1, lr}
 800aaa8:	aa03      	add	r2, sp, #12
 800aaaa:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, format);
 800aaae:	9201      	str	r2, [sp, #4]
    int res = vprintf(format, args);
 800aab0:	f7ff febd 	bl	800a82e <_ZN8ATParser7vprintfEPKcSt9__va_list>
    va_end(args);
    return res;
}
 800aab4:	b002      	add	sp, #8
 800aab6:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaba:	b003      	add	sp, #12
 800aabc:	4770      	bx	lr

0800aabe <_ZN8ATParser4sendEPKcz>:
    va_end(args);
    return res;
}

bool ATParser::send(const char *command, ...)
{
 800aabe:	b40e      	push	{r1, r2, r3}
 800aac0:	b503      	push	{r0, r1, lr}
 800aac2:	aa03      	add	r2, sp, #12
 800aac4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, command);
 800aac8:	9201      	str	r2, [sp, #4]
    bool res = vsend(command, args);
 800aaca:	f7ff fec7 	bl	800a85c <_ZN8ATParser5vsendEPKcSt9__va_list>
    va_end(args);
    return res;
}
 800aace:	b002      	add	sp, #8
 800aad0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aad4:	b003      	add	sp, #12
 800aad6:	4770      	bx	lr

0800aad8 <_ZN8ATParser4recvEPKcz>:

bool ATParser::recv(const char *response, ...)
{
 800aad8:	b40e      	push	{r1, r2, r3}
 800aada:	b503      	push	{r0, r1, lr}
 800aadc:	aa03      	add	r2, sp, #12
 800aade:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, response);
 800aae2:	9201      	str	r2, [sp, #4]
    bool res = vrecv(response, args);
 800aae4:	f7ff fee2 	bl	800a8ac <_ZN8ATParser5vrecvEPKcSt9__va_list>
    va_end(args);
    return res;
}
 800aae8:	b002      	add	sp, #8
 800aaea:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaee:	b003      	add	sp, #12
 800aaf0:	4770      	bx	lr

0800aaf2 <_ZL12uart_tx_donePv>:
    //  We wait 5 seconds for the current command to complete, 
    //  then trigger the next_cmd callout to switch to next command.
    int rc = os_callout_reset(&next_cmd_callout, OS_TICKS_PER_SEC * 5);
    assert(rc == 0);
#endif  //  TEST_UART
}
 800aaf2:	4770      	bx	lr

0800aaf4 <_ZL12uart_rx_charPvh.part.4>:
    //  Trigger callback if no more data to send.
    if (_cbs[TxIrq]) { _cbs[TxIrq](_cbs_arg[TxIrq]); }
    return -1;
}

void BufferedSerial::prime(void)
 800aaf4:	b508      	push	{r3, lr}
{
    if (!_initialised) {
        //  Configure the UART port on first use.
        _initialised = 1;
        int rc = setup_uart(this);
        assert(rc == 0);
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4619      	mov	r1, r3
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fb f88f 	bl	8005c20 <__assert_func>

0800ab02 <_ZN14BufferedSerial4initEPcmS0_mPKc>:
{
 800ab02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _initialised = 0;
 800ab04:	2500      	movs	r5, #0
{
 800ab06:	4604      	mov	r4, r0
 800ab08:	461f      	mov	r7, r3
 800ab0a:	9e06      	ldr	r6, [sp, #24]
    _initialised = 0;
 800ab0c:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    _rxbuf_size = rxbuf_size;
 800ab10:	e9c0 2608 	strd	r2, r6, [r0, #32]
    _baud = 0;
 800ab14:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
    _txbuf.init(txbuf, txbuf_size);
 800ab18:	f000 f8e9 	bl	800acee <_ZN8MyBufferIcE4initEPcm>
    _rxbuf.init(rxbuf, rxbuf_size);
 800ab1c:	4639      	mov	r1, r7
 800ab1e:	f104 0010 	add.w	r0, r4, #16
 800ab22:	4632      	mov	r2, r6
 800ab24:	f000 f8e3 	bl	800acee <_ZN8MyBufferIcE4initEPcm>
    os_error_t rc = os_sem_init(&_rx_sem, 0);  //  Init to 0 tokens, so caller will block until data is available.
 800ab28:	4629      	mov	r1, r5
 800ab2a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800ab2e:	f7fc f90d 	bl	8006d4c <os_sem_init>
    assert(rc == OS_OK);
 800ab32:	b128      	cbz	r0, 800ab40 <_ZN14BufferedSerial4initEPcmS0_mPKc+0x3e>
 800ab34:	462b      	mov	r3, r5
 800ab36:	462a      	mov	r2, r5
 800ab38:	4629      	mov	r1, r5
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	f7fb f870 	bl	8005c20 <__assert_func>
}
 800ab40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab42 <_ZN14BufferedSerial9configureEi>:
    _uart = uart;
 800ab42:	6441      	str	r1, [r0, #68]	; 0x44
}
 800ab44:	4770      	bx	lr

0800ab46 <_ZN14BufferedSerial8readableEv>:
}

template <class T>
inline uint32_t MyBuffer<T>::available(void)
{
    return (_wloc == _rloc) ? 0 : 1;
 800ab46:	6942      	ldr	r2, [r0, #20]
 800ab48:	6980      	ldr	r0, [r0, #24]
}
 800ab4a:	1a10      	subs	r0, r2, r0
 800ab4c:	bf18      	it	ne
 800ab4e:	2001      	movne	r0, #1
 800ab50:	4770      	bx	lr

0800ab52 <_ZN14BufferedSerial5fgetcEi>:
{
 800ab52:	b510      	push	{r4, lr}
 800ab54:	4604      	mov	r4, r0
    os_sem_pend(&_rx_sem, timeout * OS_TICKS_PER_SEC / 1000);
 800ab56:	302c      	adds	r0, #44	; 0x2c
 800ab58:	f7fc f932 	bl	8006dc0 <os_sem_pend>
 800ab5c:	6962      	ldr	r2, [r4, #20]
 800ab5e:	69a3      	ldr	r3, [r4, #24]
    if (_rxbuf.available()) { return _rxbuf.get(); }
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d00d      	beq.n	800ab80 <_ZN14BufferedSerial5fgetcEi+0x2e>
    T data_pos = _buf[_rloc++];
 800ab64:	69a3      	ldr	r3, [r4, #24]
 800ab66:	6922      	ldr	r2, [r4, #16]
 800ab68:	1c59      	adds	r1, r3, #1
 800ab6a:	61a1      	str	r1, [r4, #24]
 800ab6c:	5cd0      	ldrb	r0, [r2, r3]
    _rloc %= (_size-1);
 800ab6e:	69e3      	ldr	r3, [r4, #28]
 800ab70:	69a1      	ldr	r1, [r4, #24]
 800ab72:	3b01      	subs	r3, #1
 800ab74:	fbb1 f2f3 	udiv	r2, r1, r3
 800ab78:	fb03 1312 	mls	r3, r3, r2, r1
 800ab7c:	61a3      	str	r3, [r4, #24]
}
 800ab7e:	bd10      	pop	{r4, pc}
    return -1;
 800ab80:	f04f 30ff 	mov.w	r0, #4294967295
 800ab84:	e7fb      	b.n	800ab7e <_ZN14BufferedSerial5fgetcEi+0x2c>

0800ab86 <_ZN14BufferedSerial5txIrqEv>:
    return (_wloc == _rloc) ? 0 : 1;
 800ab86:	6842      	ldr	r2, [r0, #4]
 800ab88:	6883      	ldr	r3, [r0, #8]
{
 800ab8a:	b510      	push	{r4, lr}
    if(_txbuf.available()) {
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d00e      	beq.n	800abae <_ZN14BufferedSerial5txIrqEv+0x28>
    T data_pos = _buf[_rloc++];
 800ab90:	6883      	ldr	r3, [r0, #8]
 800ab92:	6802      	ldr	r2, [r0, #0]
 800ab94:	1c59      	adds	r1, r3, #1
 800ab96:	6081      	str	r1, [r0, #8]
 800ab98:	5cd3      	ldrb	r3, [r2, r3]
    _rloc %= (_size-1);
 800ab9a:	68c2      	ldr	r2, [r0, #12]
 800ab9c:	6884      	ldr	r4, [r0, #8]
 800ab9e:	3a01      	subs	r2, #1
 800aba0:	fbb4 f1f2 	udiv	r1, r4, r2
 800aba4:	fb02 4211 	mls	r2, r2, r1, r4
 800aba8:	6082      	str	r2, [r0, #8]
        return byte;
 800abaa:	4618      	mov	r0, r3
}
 800abac:	bd10      	pop	{r4, pc}
    if (_cbs[TxIrq]) { _cbs[TxIrq](_cbs_arg[TxIrq]); }
 800abae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800abb0:	b10b      	cbz	r3, 800abb6 <_ZN14BufferedSerial5txIrqEv+0x30>
 800abb2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800abb4:	4798      	blx	r3
 800abb6:	f04f 30ff 	mov.w	r0, #4294967295
 800abba:	e7f7      	b.n	800abac <_ZN14BufferedSerial5txIrqEv+0x26>

0800abbc <_ZL12uart_tx_charPv>:
static int uart_tx_char(void *arg) {    
 800abbc:	b508      	push	{r3, lr}
    assert(arg != NULL);
 800abbe:	b908      	cbnz	r0, 800abc4 <_ZL12uart_tx_charPv+0x8>
 800abc0:	f7ff ff98 	bl	800aaf4 <_ZL12uart_rx_charPvh.part.4>
}
 800abc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    int byte = serial->txIrq();
 800abc8:	f7ff bfdd 	b.w	800ab86 <_ZN14BufferedSerial5txIrqEv>

0800abcc <_ZN14BufferedSerial5primeEv>:
{
 800abcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (!_initialised) {
 800abce:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
{
 800abd2:	4604      	mov	r4, r0
    if (!_initialised) {
 800abd4:	b141      	cbz	r1, 800abe8 <_ZN14BufferedSerial5primeEv+0x1c>
    }
    hal_uart_start_rx(_uart);  //  Start receiving UART data.
 800abd6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800abd8:	f7fd ffd6 	bl	8008b88 <hal_uart_start_rx>
    hal_uart_start_tx(_uart);  //  Start transmitting UART data.
 800abdc:	6c60      	ldr	r0, [r4, #68]	; 0x44
}
 800abde:	b003      	add	sp, #12
 800abe0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hal_uart_start_tx(_uart);  //  Start transmitting UART data.
 800abe4:	f7fd bfee 	b.w	8008bc4 <hal_uart_start_tx>
        _initialised = 1;
 800abe8:	2701      	movs	r7, #1
    memset(rx_buf, 0, sizeof(rx_buf));
 800abea:	4b13      	ldr	r3, [pc, #76]	; (800ac38 <_ZN14BufferedSerial5primeEv+0x6c>)
 800abec:	6c46      	ldr	r6, [r0, #68]	; 0x44
        _initialised = 1;
 800abee:	f880 7028 	strb.w	r7, [r0, #40]	; 0x28
    uint32_t baud = serial->_baud;
 800abf2:	6c85      	ldr	r5, [r0, #72]	; 0x48
    memset(rx_buf, 0, sizeof(rx_buf));
 800abf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fc fba2 	bl	8007342 <memset>
    rx_ptr = rx_buf;
 800abfe:	4a0f      	ldr	r2, [pc, #60]	; (800ac3c <_ZN14BufferedSerial5primeEv+0x70>)
    rc = hal_uart_init_cbs(uart,
 800ac00:	4b0f      	ldr	r3, [pc, #60]	; (800ac40 <_ZN14BufferedSerial5primeEv+0x74>)
    rx_ptr = rx_buf;
 800ac02:	6010      	str	r0, [r2, #0]
    rc = hal_uart_init_cbs(uart,
 800ac04:	490f      	ldr	r1, [pc, #60]	; (800ac44 <_ZN14BufferedSerial5primeEv+0x78>)
 800ac06:	9400      	str	r4, [sp, #0]
 800ac08:	4a0f      	ldr	r2, [pc, #60]	; (800ac48 <_ZN14BufferedSerial5primeEv+0x7c>)
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	f7fd ffa6 	bl	8008b5c <hal_uart_init_cbs>
    if (rc != 0) { return rc; }
 800ac10:	b978      	cbnz	r0, 800ac32 <_ZN14BufferedSerial5primeEv+0x66>
    assert(baud != 0);
 800ac12:	b925      	cbnz	r5, 800ac1e <_ZN14BufferedSerial5primeEv+0x52>
 800ac14:	462b      	mov	r3, r5
 800ac16:	462a      	mov	r2, r5
 800ac18:	4629      	mov	r1, r5
 800ac1a:	f7fb f801 	bl	8005c20 <__assert_func>
    rc = hal_uart_config(uart,
 800ac1e:	e9cd 0000 	strd	r0, r0, [sp]
 800ac22:	463b      	mov	r3, r7
 800ac24:	2208      	movs	r2, #8
 800ac26:	4629      	mov	r1, r5
 800ac28:	4630      	mov	r0, r6
 800ac2a:	f7fd fff9 	bl	8008c20 <hal_uart_config>
    if (rc != 0) { return rc; }
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d0d1      	beq.n	800abd6 <_ZN14BufferedSerial5primeEv+0xa>
 800ac32:	f7ff ff5f 	bl	800aaf4 <_ZL12uart_rx_charPvh.part.4>
 800ac36:	bf00      	nop
 800ac38:	200030dc 	.word	0x200030dc
 800ac3c:	200031dc 	.word	0x200031dc
 800ac40:	0800acb5 	.word	0x0800acb5
 800ac44:	0800abbd 	.word	0x0800abbd
 800ac48:	0800aaf3 	.word	0x0800aaf3

0800ac4c <_ZN14BufferedSerial6attachEPFvPvES0_i>:

void BufferedSerial::attach(void (*func)(void *), void *arg, IrqType type)
{
 800ac4c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    _cbs[type] = func;
 800ac50:	6359      	str	r1, [r3, #52]	; 0x34
    _cbs_arg[type] = arg;
 800ac52:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ac54:	4770      	bx	lr

0800ac56 <_ZN14BufferedSerial4baudEm>:

void BufferedSerial::baud(uint32_t baud0)
{
    _baud = baud0;
 800ac56:	6481      	str	r1, [r0, #72]	; 0x48
}
 800ac58:	4770      	bx	lr

0800ac5a <_ZN8MyBufferIcE3putEc>:
    _buf[_wloc++] = data;
 800ac5a:	6843      	ldr	r3, [r0, #4]
 800ac5c:	6802      	ldr	r2, [r0, #0]
inline void MyBuffer<T>::put(T data)
 800ac5e:	b510      	push	{r4, lr}
    _buf[_wloc++] = data;
 800ac60:	1c5c      	adds	r4, r3, #1
 800ac62:	6044      	str	r4, [r0, #4]
 800ac64:	54d1      	strb	r1, [r2, r3]
    _wloc %= (_size-1);
 800ac66:	68c3      	ldr	r3, [r0, #12]
 800ac68:	6841      	ldr	r1, [r0, #4]
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	fbb1 f2f3 	udiv	r2, r1, r3
 800ac70:	fb03 1312 	mls	r3, r3, r2, r1
 800ac74:	6043      	str	r3, [r0, #4]
}
 800ac76:	bd10      	pop	{r4, pc}

0800ac78 <_ZN14BufferedSerial4putcEi>:
{
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	460c      	mov	r4, r1
    _txbuf.put(c);
 800ac7e:	b2c9      	uxtb	r1, r1
 800ac80:	f7ff ffeb 	bl	800ac5a <_ZN8MyBufferIcE3putEc>
    BufferedSerial::prime();
 800ac84:	4628      	mov	r0, r5
 800ac86:	f7ff ffa1 	bl	800abcc <_ZN14BufferedSerial5primeEv>
}
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	bd38      	pop	{r3, r4, r5, pc}

0800ac8e <_ZN14BufferedSerial5rxIrqEh>:
{
 800ac8e:	b510      	push	{r4, lr}
 800ac90:	4604      	mov	r4, r0
    _rxbuf.put(byte);  //  Add to TX buffer.
 800ac92:	3010      	adds	r0, #16
 800ac94:	f7ff ffe1 	bl	800ac5a <_ZN8MyBufferIcE3putEc>
    os_error_t rc = os_sem_release(&_rx_sem);  //  Signal to semaphore that data is available.
 800ac98:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800ac9c:	f7fc f85e 	bl	8006d5c <os_sem_release>
    assert(rc == OS_OK);
 800aca0:	b108      	cbz	r0, 800aca6 <_ZN14BufferedSerial5rxIrqEh+0x18>
 800aca2:	f7ff ff27 	bl	800aaf4 <_ZL12uart_rx_charPvh.part.4>
    if (_cbs[RxIrq]) { _cbs[RxIrq](_cbs_arg[RxIrq]); }
 800aca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aca8:	b10b      	cbz	r3, 800acae <_ZN14BufferedSerial5rxIrqEh+0x20>
 800acaa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800acac:	4798      	blx	r3
}
 800acae:	2000      	movs	r0, #0
 800acb0:	bd10      	pop	{r4, pc}
	...

0800acb4 <_ZL12uart_rx_charPvh>:
static int uart_rx_char(void *arg, uint8_t byte) {
 800acb4:	b510      	push	{r4, lr}
    if (rx_ptr - rx_buf < (int) sizeof(rx_buf)) { *rx_ptr++ = byte; }  //  Save to rx buffer.
 800acb6:	4c08      	ldr	r4, [pc, #32]	; (800acd8 <_ZL12uart_rx_charPvh+0x24>)
 800acb8:	4a08      	ldr	r2, [pc, #32]	; (800acdc <_ZL12uart_rx_charPvh+0x28>)
 800acba:	6823      	ldr	r3, [r4, #0]
 800acbc:	1a9a      	subs	r2, r3, r2
 800acbe:	2aff      	cmp	r2, #255	; 0xff
 800acc0:	bfde      	ittt	le
 800acc2:	1c5a      	addle	r2, r3, #1
 800acc4:	6022      	strle	r2, [r4, #0]
 800acc6:	7019      	strble	r1, [r3, #0]
    assert(arg != NULL);
 800acc8:	b908      	cbnz	r0, 800acce <_ZL12uart_rx_charPvh+0x1a>
 800acca:	f7ff ff13 	bl	800aaf4 <_ZL12uart_rx_charPvh.part.4>
}
 800acce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    int rc = serial->rxIrq(byte);
 800acd2:	f7ff bfdc 	b.w	800ac8e <_ZN14BufferedSerial5rxIrqEh>
 800acd6:	bf00      	nop
 800acd8:	200031dc 	.word	0x200031dc
 800acdc:	200030dc 	.word	0x200030dc

0800ace0 <_ZN8MyBufferIcE5clearEv>:
}

template <class T>
void MyBuffer<T>::clear(void)
{
    _wloc = 0;
 800ace0:	2100      	movs	r1, #0
    _rloc = 0;
    memset(_buf, 0, _size);
 800ace2:	68c2      	ldr	r2, [r0, #12]
    _wloc = 0;
 800ace4:	6041      	str	r1, [r0, #4]
    _rloc = 0;
 800ace6:	6081      	str	r1, [r0, #8]
    memset(_buf, 0, _size);
 800ace8:	6800      	ldr	r0, [r0, #0]
 800acea:	f7fc bb2a 	b.w	8007342 <memset>

0800acee <_ZN8MyBufferIcE4initEPcm>:
void MyBuffer<T>::init(T *buffer, uint32_t size)
 800acee:	b508      	push	{r3, lr}
    _buf = buffer;
 800acf0:	6001      	str	r1, [r0, #0]
    _size = size;
 800acf2:	60c2      	str	r2, [r0, #12]
    clear();    
 800acf4:	f7ff fff4 	bl	800ace0 <_ZN8MyBufferIcE5clearEv>
}
 800acf8:	bd08      	pop	{r3, pc}
	...

0800acfc <temp_stm32_create>:
    os_dev_close(dev);
    return rc;
}

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 800acfc:	b530      	push	{r4, r5, lr}
    console_printf("TMP create %s\n", DEVICE_NAME);
 800acfe:	4918      	ldr	r1, [pc, #96]	; (800ad60 <temp_stm32_create+0x64>)
void DEVICE_CREATE(void) {
 800ad00:	b089      	sub	sp, #36	; 0x24
    console_printf("TMP create %s\n", DEVICE_NAME);
 800ad02:	4818      	ldr	r0, [pc, #96]	; (800ad64 <temp_stm32_create+0x68>)
 800ad04:	f7f9 f9d8 	bl	80040b8 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 800ad08:	4b17      	ldr	r3, [pc, #92]	; (800ad68 <temp_stm32_create+0x6c>)
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	9301      	str	r3, [sp, #4]
 800ad0e:	4b17      	ldr	r3, [pc, #92]	; (800ad6c <temp_stm32_create+0x70>)
 800ad10:	4913      	ldr	r1, [pc, #76]	; (800ad60 <temp_stm32_create+0x64>)
 800ad12:	9300      	str	r3, [sp, #0]
 800ad14:	4816      	ldr	r0, [pc, #88]	; (800ad70 <temp_stm32_create+0x74>)
 800ad16:	2300      	movs	r3, #0
 800ad18:	f7fb f9a2 	bl	8006060 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	b128      	cbz	r0, 800ad2c <temp_stm32_create+0x30>
 800ad20:	2300      	movs	r3, #0
 800ad22:	461a      	mov	r2, r3
 800ad24:	4619      	mov	r1, r3
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fa ff7a 	bl	8005c20 <__assert_func>
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 800ad2c:	f04f 31ff 	mov.w	r1, #4294967295
 800ad30:	480b      	ldr	r0, [pc, #44]	; (800ad60 <temp_stm32_create+0x64>)
 800ad32:	f7fb f9ff 	bl	8006134 <os_dev_open>
    assert(dev != NULL);
 800ad36:	4604      	mov	r4, r0
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d0f1      	beq.n	800ad20 <temp_stm32_create+0x24>
    rc = DEVICE_CFG_DEFAULT(&cfg);
 800ad3c:	a802      	add	r0, sp, #8
 800ad3e:	f7fc ff37 	bl	8007bb0 <temp_stm32_default_cfg>
    assert(rc == 0);
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d1ec      	bne.n	800ad20 <temp_stm32_create+0x24>
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 800ad46:	a902      	add	r1, sp, #8
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f7fd f803 	bl	8007d54 <temp_stm32_config>
 800ad4e:	4605      	mov	r5, r0
    os_dev_close(dev);
 800ad50:	4620      	mov	r0, r4
 800ad52:	f7fb fa10 	bl	8006176 <os_dev_close>

    //  Configure the device.
    rc = config_device();
    assert(rc == 0);
 800ad56:	2d00      	cmp	r5, #0
 800ad58:	d1e2      	bne.n	800ad20 <temp_stm32_create+0x24>
}
 800ad5a:	b009      	add	sp, #36	; 0x24
 800ad5c:	bd30      	pop	{r4, r5, pc}
 800ad5e:	bf00      	nop
 800ad60:	0800e268 	.word	0x0800e268
 800ad64:	0800e71a 	.word	0x0800e71a
 800ad68:	200031e0 	.word	0x200031e0
 800ad6c:	08007bdd 	.word	0x08007bdd
 800ad70:	200031f8 	.word	0x200031f8

0800ad74 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
 800ad74:	4770      	bx	lr

0800ad76 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
 800ad76:	4770      	bx	lr

0800ad78 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
 800ad78:	4770      	bx	lr

0800ad7a <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
 800ad7a:	4770      	bx	lr

0800ad7c <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
 800ad7c:	4770      	bx	lr
	...

0800ad80 <flash_area_open>:
flash_area_open(uint8_t id, const struct flash_area **fap)
{
    const struct flash_area *area;
    int i;

    if (flash_map == NULL) {
 800ad80:	4b0c      	ldr	r3, [pc, #48]	; (800adb4 <flash_area_open+0x34>)
{
 800ad82:	b570      	push	{r4, r5, r6, lr}
    if (flash_map == NULL) {
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	b18b      	cbz	r3, 800adac <flash_area_open+0x2c>
        return SYS_EACCES;
    }

    for (i = 0; i < flash_map_entries; i++) {
 800ad88:	4a0b      	ldr	r2, [pc, #44]	; (800adb8 <flash_area_open+0x38>)
 800ad8a:	6814      	ldr	r4, [r2, #0]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	4294      	cmp	r4, r2
 800ad90:	dc02      	bgt.n	800ad98 <flash_area_open+0x18>
            *fap = area;
            return 0;
        }
    }

    return SYS_ENOENT;
 800ad92:	f06f 0003 	mvn.w	r0, #3
 800ad96:	e006      	b.n	800ada6 <flash_area_open+0x26>
        area = flash_map + i;
 800ad98:	461d      	mov	r5, r3
        if (area->fa_id == id) {
 800ad9a:	f813 6b0c 	ldrb.w	r6, [r3], #12
 800ad9e:	4286      	cmp	r6, r0
 800ada0:	d102      	bne.n	800ada8 <flash_area_open+0x28>
            return 0;
 800ada2:	2000      	movs	r0, #0
            *fap = area;
 800ada4:	600d      	str	r5, [r1, #0]
}
 800ada6:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < flash_map_entries; i++) {
 800ada8:	3201      	adds	r2, #1
 800adaa:	e7f0      	b.n	800ad8e <flash_area_open+0xe>
        return SYS_EACCES;
 800adac:	f06f 0006 	mvn.w	r0, #6
 800adb0:	e7f9      	b.n	800ada6 <flash_area_open+0x26>
 800adb2:	bf00      	nop
 800adb4:	20003570 	.word	0x20003570
 800adb8:	20003574 	.word	0x20003574

0800adbc <flash_area_read>:
}

int
flash_area_read(const struct flash_area *fa, uint32_t off, void *dst,
    uint32_t len)
{
 800adbc:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
 800adbe:	6885      	ldr	r5, [r0, #8]
{
 800adc0:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
 800adc2:	428d      	cmp	r5, r1
 800adc4:	d308      	bcc.n	800add8 <flash_area_read+0x1c>
 800adc6:	440c      	add	r4, r1
 800adc8:	42a5      	cmp	r5, r4
 800adca:	d305      	bcc.n	800add8 <flash_area_read+0x1c>
        return -1;
    }
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
 800adcc:	6844      	ldr	r4, [r0, #4]
 800adce:	7840      	ldrb	r0, [r0, #1]
 800add0:	4421      	add	r1, r4
}
 800add2:	bc30      	pop	{r4, r5}
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
 800add4:	f000 bb8c 	b.w	800b4f0 <hal_flash_read>
}
 800add8:	f04f 30ff 	mov.w	r0, #4294967295
 800addc:	bc30      	pop	{r4, r5}
 800adde:	4770      	bx	lr

0800ade0 <flash_map_init>:
    }
}

void
flash_map_init(void)
{
 800ade0:	b5f0      	push	{r4, r5, r6, r7, lr}

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 800ade2:	4b24      	ldr	r3, [pc, #144]	; (800ae74 <flash_map_init+0x94>)
{
 800ade4:	b089      	sub	sp, #36	; 0x24
    SYSINIT_ASSERT_ACTIVE();
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	b923      	cbnz	r3, 800adf4 <flash_map_init+0x14>
 800adea:	461a      	mov	r2, r3
 800adec:	4619      	mov	r1, r3
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fa ff16 	bl	8005c20 <__assert_func>

    rc = hal_flash_init();
 800adf4:	f000 fb6a 	bl	800b4cc <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
 800adf8:	b138      	cbz	r0, 800ae0a <flash_map_init+0x2a>
 800adfa:	2300      	movs	r3, #0
 800adfc:	4a1e      	ldr	r2, [pc, #120]	; (800ae78 <flash_map_init+0x98>)
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	6814      	ldr	r4, [r2, #0]
 800ae02:	4619      	mov	r1, r3
 800ae04:	461a      	mov	r2, r3
 800ae06:	4618      	mov	r0, r3
 800ae08:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
 800ae0a:	4b1c      	ldr	r3, [pc, #112]	; (800ae7c <flash_map_init+0x9c>)
 800ae0c:	4e1c      	ldr	r6, [pc, #112]	; (800ae80 <flash_map_init+0xa0>)
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
 800ae0e:	4f1d      	ldr	r7, [pc, #116]	; (800ae84 <flash_map_init+0xa4>)
    flash_map = sysflash_map_dflt;
 800ae10:	6033      	str	r3, [r6, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
 800ae12:	2306      	movs	r3, #6
 800ae14:	603b      	str	r3, [r7, #0]
    mfg_init();
 800ae16:	f000 f911 	bl	800b03c <mfg_init>
    mfg_open(&reader);
 800ae1a:	a803      	add	r0, sp, #12
 800ae1c:	f000 f93c 	bl	800b098 <mfg_open>
    *out_num_areas = 0;
 800ae20:	2400      	movs	r4, #0
        fap->fa_id = meta_flash_area.area_id;
 800ae22:	4d19      	ldr	r5, [pc, #100]	; (800ae88 <flash_map_init+0xa8>)
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
 800ae24:	2102      	movs	r1, #2
 800ae26:	a803      	add	r0, sp, #12
 800ae28:	f000 f8f6 	bl	800b018 <mfg_seek_next_with_type>
        switch (rc) {
 800ae2c:	f110 0f0f 	cmn.w	r0, #15
 800ae30:	d019      	beq.n	800ae66 <flash_map_init+0x86>
 800ae32:	b9b0      	cbnz	r0, 800ae62 <flash_map_init+0x82>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
 800ae34:	a905      	add	r1, sp, #20
 800ae36:	a803      	add	r0, sp, #12
 800ae38:	f000 f8f9 	bl	800b02e <mfg_read_tlv_flash_area>
        if (rc != 0) {
 800ae3c:	b988      	cbnz	r0, 800ae62 <flash_map_init+0x82>
 800ae3e:	230c      	movs	r3, #12
 800ae40:	4363      	muls	r3, r4
        fap->fa_id = meta_flash_area.area_id;
 800ae42:	f89d 2014 	ldrb.w	r2, [sp, #20]
        (*out_num_areas)++;
 800ae46:	3401      	adds	r4, #1
        fap->fa_id = meta_flash_area.area_id;
 800ae48:	555a      	strb	r2, [r3, r5]
        fap->fa_device_id = meta_flash_area.device_id;
 800ae4a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800ae4e:	442b      	add	r3, r5
 800ae50:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
 800ae52:	f8dd 2016 	ldr.w	r2, [sp, #22]
        if (*out_num_areas >= max_areas) {
 800ae56:	2c0a      	cmp	r4, #10
        fap->fa_off = meta_flash_area.offset;
 800ae58:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
 800ae5a:	f8dd 201a 	ldr.w	r2, [sp, #26]
 800ae5e:	609a      	str	r2, [r3, #8]
        if (*out_num_areas >= max_areas) {
 800ae60:	d1e0      	bne.n	800ae24 <flash_map_init+0x44>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
        flash_map = mfg_areas;
        flash_map_entries = num_areas;
    }
}
 800ae62:	b009      	add	sp, #36	; 0x24
 800ae64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rc == 0 && num_areas > 0) {
 800ae66:	2c00      	cmp	r4, #0
 800ae68:	d0fb      	beq.n	800ae62 <flash_map_init+0x82>
        flash_map = mfg_areas;
 800ae6a:	4b07      	ldr	r3, [pc, #28]	; (800ae88 <flash_map_init+0xa8>)
        flash_map_entries = num_areas;
 800ae6c:	603c      	str	r4, [r7, #0]
        flash_map = mfg_areas;
 800ae6e:	6033      	str	r3, [r6, #0]
}
 800ae70:	e7f7      	b.n	800ae62 <flash_map_init+0x82>
 800ae72:	bf00      	nop
 800ae74:	20003428 	.word	0x20003428
 800ae78:	20000180 	.word	0x20000180
 800ae7c:	0800e72c 	.word	0x0800e72c
 800ae80:	20003570 	.word	0x20003570
 800ae84:	20003574 	.word	0x20003574
 800ae88:	200032c8 	.word	0x200032c8

0800ae8c <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
 800ae8c:	4770      	bx	lr
	...

0800ae90 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
 800ae90:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
 800ae92:	2300      	movs	r3, #0
{
 800ae94:	4605      	mov	r5, r0
        if (mfg_mmrs[i].area_id == area_id) {
 800ae96:	210c      	movs	r1, #12
    for (i = 0; i < mfg_num_mmrs; i++) {
 800ae98:	4c23      	ldr	r4, [pc, #140]	; (800af28 <mfg_read_next_mmr+0x98>)
        if (mfg_mmrs[i].area_id == area_id) {
 800ae9a:	4a24      	ldr	r2, [pc, #144]	; (800af2c <mfg_read_next_mmr+0x9c>)
    for (i = 0; i < mfg_num_mmrs; i++) {
 800ae9c:	6826      	ldr	r6, [r4, #0]
{
 800ae9e:	b085      	sub	sp, #20
    for (i = 0; i < mfg_num_mmrs; i++) {
 800aea0:	429e      	cmp	r6, r3
 800aea2:	dc0a      	bgt.n	800aeba <mfg_read_next_mmr+0x2a>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
 800aea4:	2e02      	cmp	r6, #2
 800aea6:	d03c      	beq.n	800af22 <mfg_read_next_mmr+0x92>
    rc = flash_area_open(area_id, &fap);
 800aea8:	a901      	add	r1, sp, #4
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f7ff ff68 	bl	800ad80 <flash_area_open>
    if (rc != 0) {
 800aeb0:	b150      	cbz	r0, 800aec8 <mfg_read_next_mmr+0x38>
        return SYS_EIO;
 800aeb2:	f06f 0004 	mvn.w	r0, #4
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
 800aeb6:	b005      	add	sp, #20
 800aeb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (mfg_mmrs[i].area_id == area_id) {
 800aeba:	fb01 f003 	mul.w	r0, r1, r3
 800aebe:	5c80      	ldrb	r0, [r0, r2]
 800aec0:	42a8      	cmp	r0, r5
 800aec2:	d02b      	beq.n	800af1c <mfg_read_next_mmr+0x8c>
    for (i = 0; i < mfg_num_mmrs; i++) {
 800aec4:	3301      	adds	r3, #1
 800aec6:	e7eb      	b.n	800aea0 <mfg_read_next_mmr+0x10>
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
 800aec8:	2308      	movs	r3, #8
 800aeca:	9801      	ldr	r0, [sp, #4]
 800aecc:	eb0d 0203 	add.w	r2, sp, r3
 800aed0:	6881      	ldr	r1, [r0, #8]
 800aed2:	3908      	subs	r1, #8
 800aed4:	f7ff ff72 	bl	800adbc <flash_area_read>
    if (rc != 0) {
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d1ea      	bne.n	800aeb2 <mfg_read_next_mmr+0x22>
    if (ftr.magic != MFG_META_MAGIC) {
 800aedc:	4b14      	ldr	r3, [pc, #80]	; (800af30 <mfg_read_next_mmr+0xa0>)
 800aede:	9a03      	ldr	r2, [sp, #12]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d115      	bne.n	800af10 <mfg_read_next_mmr+0x80>
    if (ftr.version != MFG_META_VERSION) {
 800aee4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d114      	bne.n	800af16 <mfg_read_next_mmr+0x86>
    if (ftr.size > fap->fa_size) {
 800aeec:	9b01      	ldr	r3, [sp, #4]
 800aeee:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	4299      	cmp	r1, r3
 800aef6:	d80b      	bhi.n	800af10 <mfg_read_next_mmr+0x80>
    *out_mmr = (struct mfg_mmr) {
 800aef8:	220c      	movs	r2, #12
 800aefa:	4372      	muls	r2, r6
 800aefc:	4f0b      	ldr	r7, [pc, #44]	; (800af2c <mfg_read_next_mmr+0x9c>)
        .offset = fap->fa_size - ftr.size,
 800aefe:	1a5b      	subs	r3, r3, r1
    *out_mmr = (struct mfg_mmr) {
 800af00:	18be      	adds	r6, r7, r2
 800af02:	e9c6 3101 	strd	r3, r1, [r6, #4]
    mfg_num_mmrs++;
 800af06:	6823      	ldr	r3, [r4, #0]
    *out_mmr = (struct mfg_mmr) {
 800af08:	54bd      	strb	r5, [r7, r2]
    mfg_num_mmrs++;
 800af0a:	3301      	adds	r3, #1
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	e7d2      	b.n	800aeb6 <mfg_read_next_mmr+0x26>
        return SYS_ENODEV;
 800af10:	f06f 0008 	mvn.w	r0, #8
 800af14:	e7cf      	b.n	800aeb6 <mfg_read_next_mmr+0x26>
        return SYS_ENOTSUP;
 800af16:	f06f 000b 	mvn.w	r0, #11
 800af1a:	e7cc      	b.n	800aeb6 <mfg_read_next_mmr+0x26>
            return SYS_EALREADY;
 800af1c:	f06f 000a 	mvn.w	r0, #10
 800af20:	e7c9      	b.n	800aeb6 <mfg_read_next_mmr+0x26>
        return SYS_ENOMEM;
 800af22:	f04f 30ff 	mov.w	r0, #4294967295
 800af26:	e7c6      	b.n	800aeb6 <mfg_read_next_mmr+0x26>
 800af28:	2000335c 	.word	0x2000335c
 800af2c:	20003344 	.word	0x20003344
 800af30:	3bb2a269 	.word	0x3bb2a269

0800af34 <mfg_read_tlv_body>:
{
 800af34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
 800af36:	4b16      	ldr	r3, [pc, #88]	; (800af90 <mfg_read_tlv_body+0x5c>)
{
 800af38:	4616      	mov	r6, r2
    assert(reader->mmr_idx < mfg_num_mmrs);
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	7882      	ldrb	r2, [r0, #2]
{
 800af3e:	4604      	mov	r4, r0
    assert(reader->mmr_idx < mfg_num_mmrs);
 800af40:	429a      	cmp	r2, r3
{
 800af42:	460d      	mov	r5, r1
    assert(reader->mmr_idx < mfg_num_mmrs);
 800af44:	db05      	blt.n	800af52 <mfg_read_tlv_body+0x1e>
 800af46:	2300      	movs	r3, #0
 800af48:	461a      	mov	r2, r3
 800af4a:	4619      	mov	r1, r3
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fa fe67 	bl	8005c20 <__assert_func>
    rc = flash_area_open(mmr->area_id, fap);
 800af52:	230c      	movs	r3, #12
 800af54:	4353      	muls	r3, r2
 800af56:	4a0f      	ldr	r2, [pc, #60]	; (800af94 <mfg_read_tlv_body+0x60>)
 800af58:	a901      	add	r1, sp, #4
 800af5a:	5cd0      	ldrb	r0, [r2, r3]
 800af5c:	f7ff ff10 	bl	800ad80 <flash_area_open>
    if (rc != 0) {
 800af60:	4601      	mov	r1, r0
 800af62:	b118      	cbz	r0, 800af6c <mfg_read_tlv_body+0x38>
        return SYS_EIO;
 800af64:	f06f 0004 	mvn.w	r0, #4
}
 800af68:	b002      	add	sp, #8
 800af6a:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
 800af6c:	4632      	mov	r2, r6
 800af6e:	4628      	mov	r0, r5
 800af70:	f7fc f9e7 	bl	8007342 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
 800af74:	7863      	ldrb	r3, [r4, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
 800af76:	6861      	ldr	r1, [r4, #4]
 800af78:	42b3      	cmp	r3, r6
 800af7a:	bfa8      	it	ge
 800af7c:	4633      	movge	r3, r6
 800af7e:	462a      	mov	r2, r5
 800af80:	3102      	adds	r1, #2
 800af82:	9801      	ldr	r0, [sp, #4]
 800af84:	f7ff ff1a 	bl	800adbc <flash_area_read>
    if (rc != 0) {
 800af88:	2800      	cmp	r0, #0
 800af8a:	d0ed      	beq.n	800af68 <mfg_read_tlv_body+0x34>
 800af8c:	e7ea      	b.n	800af64 <mfg_read_tlv_body+0x30>
 800af8e:	bf00      	nop
 800af90:	2000335c 	.word	0x2000335c
 800af94:	20003344 	.word	0x20003344

0800af98 <mfg_seek_next>:
{
 800af98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (reader->mmr_idx >= mfg_num_mmrs) {
 800af9c:	4d1c      	ldr	r5, [pc, #112]	; (800b010 <mfg_seek_next+0x78>)
{
 800af9e:	4604      	mov	r4, r0
 800afa0:	462f      	mov	r7, r5
    rc = flash_area_open(mmr->area_id, &fap);
 800afa2:	4e1c      	ldr	r6, [pc, #112]	; (800b014 <mfg_seek_next+0x7c>)
    if (reader->mmr_idx >= mfg_num_mmrs) {
 800afa4:	78a2      	ldrb	r2, [r4, #2]
 800afa6:	682b      	ldr	r3, [r5, #0]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	db04      	blt.n	800afb6 <mfg_seek_next+0x1e>
        return SYS_EINVAL;
 800afac:	f06f 0001 	mvn.w	r0, #1
}
 800afb0:	b002      	add	sp, #8
 800afb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = flash_area_open(mmr->area_id, &fap);
 800afb6:	230c      	movs	r3, #12
 800afb8:	4353      	muls	r3, r2
 800afba:	a901      	add	r1, sp, #4
 800afbc:	5cf0      	ldrb	r0, [r6, r3]
 800afbe:	eb06 0803 	add.w	r8, r6, r3
 800afc2:	f7ff fedd 	bl	800ad80 <flash_area_open>
    if (rc != 0) {
 800afc6:	b9e8      	cbnz	r0, 800b004 <mfg_seek_next+0x6c>
    if (reader->offset == 0) {
 800afc8:	6863      	ldr	r3, [r4, #4]
 800afca:	b98b      	cbnz	r3, 800aff0 <mfg_seek_next+0x58>
        reader->offset = mmr->offset;
 800afcc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
 800afd0:	9801      	ldr	r0, [sp, #4]
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
 800afd2:	6063      	str	r3, [r4, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
 800afd4:	6883      	ldr	r3, [r0, #8]
 800afd6:	6861      	ldr	r1, [r4, #4]
 800afd8:	3b08      	subs	r3, #8
 800afda:	4299      	cmp	r1, r3
 800afdc:	d30c      	bcc.n	800aff8 <mfg_seek_next+0x60>
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
 800afde:	78a3      	ldrb	r3, [r4, #2]
 800afe0:	683a      	ldr	r2, [r7, #0]
 800afe2:	3301      	adds	r3, #1
 800afe4:	4293      	cmp	r3, r2
 800afe6:	da10      	bge.n	800b00a <mfg_seek_next+0x72>
            reader->offset = 0;
 800afe8:	2200      	movs	r2, #0
            reader->mmr_idx++;
 800afea:	70a3      	strb	r3, [r4, #2]
            reader->offset = 0;
 800afec:	6062      	str	r2, [r4, #4]
 800afee:	e7d9      	b.n	800afa4 <mfg_seek_next+0xc>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
 800aff0:	7862      	ldrb	r2, [r4, #1]
 800aff2:	3302      	adds	r3, #2
 800aff4:	4413      	add	r3, r2
 800aff6:	e7eb      	b.n	800afd0 <mfg_seek_next+0x38>
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
 800aff8:	2302      	movs	r3, #2
 800affa:	4622      	mov	r2, r4
 800affc:	f7ff fede 	bl	800adbc <flash_area_read>
    if (rc != 0) {
 800b000:	2800      	cmp	r0, #0
 800b002:	d0d5      	beq.n	800afb0 <mfg_seek_next+0x18>
        rc = SYS_EIO;
 800b004:	f06f 0004 	mvn.w	r0, #4
 800b008:	e7d2      	b.n	800afb0 <mfg_seek_next+0x18>
            rc = SYS_EDONE;
 800b00a:	f06f 000e 	mvn.w	r0, #14
 800b00e:	e7cf      	b.n	800afb0 <mfg_seek_next+0x18>
 800b010:	2000335c 	.word	0x2000335c
 800b014:	20003344 	.word	0x20003344

0800b018 <mfg_seek_next_with_type>:
{
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	4604      	mov	r4, r0
 800b01c:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
 800b01e:	4620      	mov	r0, r4
 800b020:	f7ff ffba 	bl	800af98 <mfg_seek_next>
        if (rc != 0) {
 800b024:	b910      	cbnz	r0, 800b02c <mfg_seek_next_with_type+0x14>
        if (reader->cur_tlv.type == type) {
 800b026:	7823      	ldrb	r3, [r4, #0]
 800b028:	42ab      	cmp	r3, r5
 800b02a:	d1f8      	bne.n	800b01e <mfg_seek_next_with_type+0x6>
}
 800b02c:	bd38      	pop	{r3, r4, r5, pc}

0800b02e <mfg_read_tlv_flash_area>:
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
 800b02e:	220a      	movs	r2, #10
 800b030:	f7ff bf80 	b.w	800af34 <mfg_read_tlv_body>

0800b034 <mfg_read_tlv_mmr_ref>:
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
 800b034:	2201      	movs	r2, #1
 800b036:	f7ff bf7d 	b.w	800af34 <mfg_read_tlv_body>
	...

0800b03c <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
 800b03c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    if (mfg_initialized) {
 800b03e:	4b14      	ldr	r3, [pc, #80]	; (800b090 <mfg_init+0x54>)
 800b040:	7818      	ldrb	r0, [r3, #0]
 800b042:	bb08      	cbnz	r0, 800b088 <mfg_init+0x4c>
        return;
    }
    mfg_initialized = true;
 800b044:	2201      	movs	r2, #1
 800b046:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 800b048:	4b12      	ldr	r3, [pc, #72]	; (800b094 <mfg_init+0x58>)
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	b923      	cbnz	r3, 800b058 <mfg_init+0x1c>
 800b04e:	461a      	mov	r2, r3
 800b050:	4619      	mov	r1, r3
 800b052:	4618      	mov	r0, r3
 800b054:	f7fa fde4 	bl	8005c20 <__assert_func>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
 800b058:	f7ff ff1a 	bl	800ae90 <mfg_read_next_mmr>
    if (rc != 0) {
 800b05c:	b9a0      	cbnz	r0, 800b088 <mfg_init+0x4c>
    mfg_open(&reader);
 800b05e:	a802      	add	r0, sp, #8
 800b060:	f000 f81a 	bl	800b098 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
 800b064:	2104      	movs	r1, #4
 800b066:	a802      	add	r0, sp, #8
 800b068:	f7ff ffd6 	bl	800b018 <mfg_seek_next_with_type>
        switch (rc) {
 800b06c:	b960      	cbnz	r0, 800b088 <mfg_init+0x4c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
 800b06e:	a901      	add	r1, sp, #4
 800b070:	a802      	add	r0, sp, #8
 800b072:	f7ff ffdf 	bl	800b034 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
 800b076:	b938      	cbnz	r0, 800b088 <mfg_init+0x4c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
 800b078:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800b07c:	f7ff ff08 	bl	800ae90 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
 800b080:	2800      	cmp	r0, #0
 800b082:	d0ef      	beq.n	800b064 <mfg_init+0x28>
 800b084:	300b      	adds	r0, #11
 800b086:	d0ed      	beq.n	800b064 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
 800b088:	b005      	add	sp, #20
 800b08a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b08e:	bf00      	nop
 800b090:	20003340 	.word	0x20003340
 800b094:	20003428 	.word	0x20003428

0800b098 <mfg_open>:
{
 800b098:	b510      	push	{r4, lr}
 800b09a:	4604      	mov	r4, r0
    mfg_init();
 800b09c:	f7ff ffce 	bl	800b03c <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e9c4 3300 	strd	r3, r3, [r4]
}
 800b0a6:	bd10      	pop	{r4, pc}

0800b0a8 <skipspace>:
	bail_eof,		/* Hit EOF */
	bail_err		/* Conversion mismatch */
};

static inline const char *skipspace(const char *p)
{
 800b0a8:	4602      	mov	r2, r0
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
 800b0aa:	4906      	ldr	r1, [pc, #24]	; (800b0c4 <skipspace+0x1c>)
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	7803      	ldrb	r3, [r0, #0]
 800b0b0:	3201      	adds	r2, #1
 800b0b2:	3b09      	subs	r3, #9
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	2b17      	cmp	r3, #23
 800b0b8:	d803      	bhi.n	800b0c2 <skipspace+0x1a>
 800b0ba:	fa21 f303 	lsr.w	r3, r1, r3
 800b0be:	07db      	lsls	r3, r3, #31
 800b0c0:	d4f4      	bmi.n	800b0ac <skipspace+0x4>
	while (isspace((unsigned char)*p))
		p++;
	return p;
}
 800b0c2:	4770      	bx	lr
 800b0c4:	00800013 	.word	0x00800013

0800b0c8 <set_bit>:

#undef set_bit
static inline void set_bit(unsigned long *bitmap, unsigned int bit)
{
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	094a      	lsrs	r2, r1, #5
 800b0cc:	f001 011f 	and.w	r1, r1, #31
 800b0d0:	fa03 f101 	lsl.w	r1, r3, r1
 800b0d4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800b0d8:	430b      	orrs	r3, r1
 800b0da:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800b0de:	4770      	bx	lr

0800b0e0 <vsscanf>:
	enum bail bail = bail_none;
	int sign;
	int converted = 0;	/* Successful conversions */
	unsigned long matchmap[((1 << CHAR_BIT) + (LONG_BIT - 1)) / LONG_BIT];
	int matchinv = 0;	/* Is match map inverted? */
	unsigned char range_start = 0;
 800b0e0:	2300      	movs	r3, #0
{
 800b0e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int converted = 0;	/* Successful conversions */
 800b0e6:	469b      	mov	fp, r3
{
 800b0e8:	4615      	mov	r5, r2
	const char *q = buffer;
 800b0ea:	4606      	mov	r6, r0
	enum bail bail = bail_none;
 800b0ec:	461f      	mov	r7, r3
	char *sarg = NULL;	/* %s %c or %[ string argument */
 800b0ee:	4699      	mov	r9, r3
	enum flags flags = 0;
 800b0f0:	469a      	mov	sl, r3
	unsigned int width = UINT_MAX;
 800b0f2:	f04f 34ff 	mov.w	r4, #4294967295
	int rank = rank_int;	/* Default rank */
 800b0f6:	46d8      	mov	r8, fp
{
 800b0f8:	b091      	sub	sp, #68	; 0x44
 800b0fa:	9003      	str	r0, [sp, #12]
	unsigned char range_start = 0;
 800b0fc:	9300      	str	r3, [sp, #0]
	int matchinv = 0;	/* Is match map inverted? */
 800b0fe:	9302      	str	r3, [sp, #8]
	(void)sign;

	while ((ch = *p++) && !bail) {
 800b100:	1c4a      	adds	r2, r1, #1
 800b102:	9201      	str	r2, [sp, #4]
 800b104:	780a      	ldrb	r2, [r1, #0]
 800b106:	b102      	cbz	r2, 800b10a <vsscanf+0x2a>
 800b108:	b157      	cbz	r7, 800b120 <vsscanf+0x40>
				bail = bail_eof;
			break;
		}
	}

	if (bail == bail_eof && !converted)
 800b10a:	2f01      	cmp	r7, #1
 800b10c:	d104      	bne.n	800b118 <vsscanf+0x38>
		converted = -1;	/* Return EOF (-1) */
 800b10e:	f1bb 0f00 	cmp.w	fp, #0
 800b112:	bf08      	it	eq
 800b114:	f04f 3bff 	moveq.w	fp, #4294967295

	return converted;
}
 800b118:	4658      	mov	r0, fp
 800b11a:	b011      	add	sp, #68	; 0x44
 800b11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (state) {
 800b120:	2b06      	cmp	r3, #6
 800b122:	d819      	bhi.n	800b158 <vsscanf+0x78>
 800b124:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b128:	00230007 	.word	0x00230007
 800b12c:	003d0034 	.word	0x003d0034
 800b130:	0162015a 	.word	0x0162015a
 800b134:	016e      	.short	0x016e
			if (ch == '%') {
 800b136:	2a25      	cmp	r2, #37	; 0x25
 800b138:	f000 81a9 	beq.w	800b48e <vsscanf+0x3ae>
 800b13c:	f1a2 0109 	sub.w	r1, r2, #9
 800b140:	b2c9      	uxtb	r1, r1
 800b142:	2917      	cmp	r1, #23
 800b144:	d804      	bhi.n	800b150 <vsscanf+0x70>
 800b146:	48ae      	ldr	r0, [pc, #696]	; (800b400 <vsscanf+0x320>)
 800b148:	fa20 f101 	lsr.w	r1, r0, r1
 800b14c:	07c9      	lsls	r1, r1, #31
 800b14e:	d405      	bmi.n	800b15c <vsscanf+0x7c>
				if (*q == ch)
 800b150:	7831      	ldrb	r1, [r6, #0]
 800b152:	4291      	cmp	r1, r2
 800b154:	d009      	beq.n	800b16a <vsscanf+0x8a>
					bail = bail_err; /* Match failure */
 800b156:	2702      	movs	r7, #2
				state = st_match;
 800b158:	9901      	ldr	r1, [sp, #4]
 800b15a:	e7d1      	b.n	800b100 <vsscanf+0x20>
				q = skipspace(q);
 800b15c:	4630      	mov	r0, r6
 800b15e:	9304      	str	r3, [sp, #16]
 800b160:	f7ff ffa2 	bl	800b0a8 <skipspace>
 800b164:	4606      	mov	r6, r0
 800b166:	9b04      	ldr	r3, [sp, #16]
 800b168:	e7f6      	b.n	800b158 <vsscanf+0x78>
					q++;
 800b16a:	3601      	adds	r6, #1
 800b16c:	e7f4      	b.n	800b158 <vsscanf+0x78>
			switch (ch) {
 800b16e:	2a2a      	cmp	r2, #42	; 0x2a
 800b170:	d006      	beq.n	800b180 <vsscanf+0xa0>
 800b172:	d302      	bcc.n	800b17a <vsscanf+0x9a>
 800b174:	3a30      	subs	r2, #48	; 0x30
 800b176:	2a09      	cmp	r2, #9
 800b178:	d905      	bls.n	800b186 <vsscanf+0xa6>
 800b17a:	9101      	str	r1, [sp, #4]
				state = st_modifiers;
 800b17c:	2303      	movs	r3, #3
 800b17e:	e7eb      	b.n	800b158 <vsscanf+0x78>
				flags |= FL_SPLAT;
 800b180:	f04a 0a01 	orr.w	sl, sl, #1
				break;
 800b184:	e7e8      	b.n	800b158 <vsscanf+0x78>
				width = (ch - '0');
 800b186:	4614      	mov	r4, r2
				flags |= FL_WIDTH;
 800b188:	f04a 0a04 	orr.w	sl, sl, #4
				state = st_width;
 800b18c:	2302      	movs	r3, #2
				break;
 800b18e:	e7e3      	b.n	800b158 <vsscanf+0x78>
			if (ch >= '0' && ch <= '9') {
 800b190:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 800b194:	2809      	cmp	r0, #9
 800b196:	d8f0      	bhi.n	800b17a <vsscanf+0x9a>
 800b198:	210a      	movs	r1, #10
 800b19a:	fb01 2404 	mla	r4, r1, r4, r2
				width = width * 10 + (ch - '0');
 800b19e:	3c30      	subs	r4, #48	; 0x30
 800b1a0:	e7da      	b.n	800b158 <vsscanf+0x78>
			switch (ch) {
 800b1a2:	2a6c      	cmp	r2, #108	; 0x6c
 800b1a4:	d015      	beq.n	800b1d2 <vsscanf+0xf2>
 800b1a6:	d808      	bhi.n	800b1ba <vsscanf+0xda>
 800b1a8:	2a68      	cmp	r2, #104	; 0x68
 800b1aa:	d00f      	beq.n	800b1cc <vsscanf+0xec>
 800b1ac:	2a6a      	cmp	r2, #106	; 0x6a
 800b1ae:	d001      	beq.n	800b1b4 <vsscanf+0xd4>
 800b1b0:	2a4c      	cmp	r2, #76	; 0x4c
 800b1b2:	d111      	bne.n	800b1d8 <vsscanf+0xf8>
				rank = INTMAX_RANK;
 800b1b4:	f04f 0802 	mov.w	r8, #2
 800b1b8:	e7ce      	b.n	800b158 <vsscanf+0x78>
			switch (ch) {
 800b1ba:	2a74      	cmp	r2, #116	; 0x74
 800b1bc:	d003      	beq.n	800b1c6 <vsscanf+0xe6>
 800b1be:	2a7a      	cmp	r2, #122	; 0x7a
 800b1c0:	d001      	beq.n	800b1c6 <vsscanf+0xe6>
 800b1c2:	2a71      	cmp	r2, #113	; 0x71
 800b1c4:	e7f5      	b.n	800b1b2 <vsscanf+0xd2>
				rank = SIZE_T_RANK;
 800b1c6:	f04f 0801 	mov.w	r8, #1
 800b1ca:	e7c5      	b.n	800b158 <vsscanf+0x78>
				rank--;	/* Shorter rank */
 800b1cc:	f108 38ff 	add.w	r8, r8, #4294967295
				break;
 800b1d0:	e7c2      	b.n	800b158 <vsscanf+0x78>
				rank++;	/* Longer rank */
 800b1d2:	f108 0801 	add.w	r8, r8, #1
				break;
 800b1d6:	e7bf      	b.n	800b158 <vsscanf+0x78>
 800b1d8:	f1b8 0f02 	cmp.w	r8, #2
 800b1dc:	f06f 0301 	mvn.w	r3, #1
 800b1e0:	bfa8      	it	ge
 800b1e2:	f04f 0802 	movge.w	r8, #2
 800b1e6:	4598      	cmp	r8, r3
 800b1e8:	bfb8      	it	lt
 800b1ea:	4698      	movlt	r8, r3
				switch (ch) {
 800b1ec:	2a69      	cmp	r2, #105	; 0x69
 800b1ee:	d052      	beq.n	800b296 <vsscanf+0x1b6>
 800b1f0:	d823      	bhi.n	800b23a <vsscanf+0x15a>
 800b1f2:	2a58      	cmp	r2, #88	; 0x58
 800b1f4:	d06a      	beq.n	800b2cc <vsscanf+0x1ec>
 800b1f6:	d806      	bhi.n	800b206 <vsscanf+0x126>
 800b1f8:	2a25      	cmp	r2, #37	; 0x25
 800b1fa:	f000 80e9 	beq.w	800b3d0 <vsscanf+0x2f0>
 800b1fe:	2a50      	cmp	r2, #80	; 0x50
 800b200:	d078      	beq.n	800b2f4 <vsscanf+0x214>
						bail = bail_err;
 800b202:	2702      	movs	r7, #2
 800b204:	e074      	b.n	800b2f0 <vsscanf+0x210>
				switch (ch) {
 800b206:	2a63      	cmp	r2, #99	; 0x63
 800b208:	f000 8092 	beq.w	800b330 <vsscanf+0x250>
 800b20c:	2a64      	cmp	r2, #100	; 0x64
 800b20e:	d05b      	beq.n	800b2c8 <vsscanf+0x1e8>
 800b210:	2a5b      	cmp	r2, #91	; 0x5b
 800b212:	d1f6      	bne.n	800b202 <vsscanf+0x122>
					memset(matchmap, 0, sizeof matchmap);
 800b214:	2220      	movs	r2, #32
						: va_arg(ap, char *);
 800b216:	f01a 0f01 	tst.w	sl, #1
					memset(matchmap, 0, sizeof matchmap);
 800b21a:	f04f 0100 	mov.w	r1, #0
 800b21e:	eb0d 0002 	add.w	r0, sp, r2
						: va_arg(ap, char *);
 800b222:	bf0a      	itet	eq
 800b224:	f8d5 9000 	ldreq.w	r9, [r5]
 800b228:	f04f 0900 	movne.w	r9, #0
 800b22c:	3504      	addeq	r5, #4
					memset(matchmap, 0, sizeof matchmap);
 800b22e:	f7fc f888 	bl	8007342 <memset>
					matchinv = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	9302      	str	r3, [sp, #8]
					state = st_match_init;
 800b236:	2304      	movs	r3, #4
					break;
 800b238:	e78e      	b.n	800b158 <vsscanf+0x78>
				switch (ch) {
 800b23a:	2a70      	cmp	r2, #112	; 0x70
 800b23c:	d05a      	beq.n	800b2f4 <vsscanf+0x214>
 800b23e:	d805      	bhi.n	800b24c <vsscanf+0x16c>
 800b240:	2a6e      	cmp	r2, #110	; 0x6e
 800b242:	d045      	beq.n	800b2d0 <vsscanf+0x1f0>
 800b244:	2a6f      	cmp	r2, #111	; 0x6f
 800b246:	d1dc      	bne.n	800b202 <vsscanf+0x122>
					base = 8;
 800b248:	2208      	movs	r2, #8
 800b24a:	e025      	b.n	800b298 <vsscanf+0x1b8>
				switch (ch) {
 800b24c:	2a75      	cmp	r2, #117	; 0x75
 800b24e:	d03b      	beq.n	800b2c8 <vsscanf+0x1e8>
 800b250:	2a78      	cmp	r2, #120	; 0x78
 800b252:	d03b      	beq.n	800b2cc <vsscanf+0x1ec>
 800b254:	2a73      	cmp	r2, #115	; 0x73
 800b256:	d1d4      	bne.n	800b202 <vsscanf+0x122>
					if (flags & FL_SPLAT) {
 800b258:	f01a 0f01 	tst.w	sl, #1
 800b25c:	f104 34ff 	add.w	r4, r4, #4294967295
 800b260:	f000 808d 	beq.w	800b37e <vsscanf+0x29e>
 800b264:	4632      	mov	r2, r6
						while (width-- && (uc = *q) &&
 800b266:	1c63      	adds	r3, r4, #1
 800b268:	4616      	mov	r6, r2
 800b26a:	d041      	beq.n	800b2f0 <vsscanf+0x210>
 800b26c:	7813      	ldrb	r3, [r2, #0]
 800b26e:	3201      	adds	r2, #1
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 8114 	beq.w	800b49e <vsscanf+0x3be>
 800b276:	3b09      	subs	r3, #9
 800b278:	b2db      	uxtb	r3, r3
 800b27a:	2b17      	cmp	r3, #23
 800b27c:	f104 31ff 	add.w	r1, r4, #4294967295
 800b280:	d807      	bhi.n	800b292 <vsscanf+0x1b2>
 800b282:	485f      	ldr	r0, [pc, #380]	; (800b400 <vsscanf+0x320>)
 800b284:	fa20 f303 	lsr.w	r3, r0, r3
 800b288:	43db      	mvns	r3, r3
 800b28a:	f013 0301 	ands.w	r3, r3, #1
 800b28e:	f43f af63 	beq.w	800b158 <vsscanf+0x78>
							*sarg++ = *q++;
 800b292:	460c      	mov	r4, r1
 800b294:	e7e7      	b.n	800b266 <vsscanf+0x186>
					base = 0;
 800b296:	2200      	movs	r2, #0
					q = skipspace(q);
 800b298:	4630      	mov	r0, r6
 800b29a:	9204      	str	r2, [sp, #16]
 800b29c:	f7ff ff04 	bl	800b0a8 <skipspace>
					if (!*q) {
 800b2a0:	7803      	ldrb	r3, [r0, #0]
					q = skipspace(q);
 800b2a2:	4606      	mov	r6, r0
					if (!*q) {
 800b2a4:	9a04      	ldr	r2, [sp, #16]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f000 80f9 	beq.w	800b49e <vsscanf+0x3be>
					val =
 800b2ac:	4623      	mov	r3, r4
 800b2ae:	a907      	add	r1, sp, #28
 800b2b0:	f000 fd6a 	bl	800bd88 <strntoumax>
					if (qq == q) {
 800b2b4:	9b07      	ldr	r3, [sp, #28]
 800b2b6:	42b3      	cmp	r3, r6
 800b2b8:	d0a3      	beq.n	800b202 <vsscanf+0x122>
					if (!(flags & FL_SPLAT))
 800b2ba:	f01a 0f01 	tst.w	sl, #1
						converted++;
 800b2be:	bf08      	it	eq
 800b2c0:	f10b 0b01 	addeq.w	fp, fp, #1
				      set_integer:
 800b2c4:	461e      	mov	r6, r3
 800b2c6:	e006      	b.n	800b2d6 <vsscanf+0x1f6>
					base = 10;
 800b2c8:	220a      	movs	r2, #10
					goto scan_int;
 800b2ca:	e7e5      	b.n	800b298 <vsscanf+0x1b8>
					base = 16;
 800b2cc:	2210      	movs	r2, #16
					goto scan_int;
 800b2ce:	e7e3      	b.n	800b298 <vsscanf+0x1b8>
					val = (q - buffer);
 800b2d0:	9b03      	ldr	r3, [sp, #12]
 800b2d2:	1af0      	subs	r0, r6, r3
 800b2d4:	17c1      	asrs	r1, r0, #31
					if (!(flags & FL_SPLAT)) {
 800b2d6:	f01a 0301 	ands.w	r3, sl, #1
 800b2da:	d109      	bne.n	800b2f0 <vsscanf+0x210>
						switch (rank) {
 800b2dc:	f1b8 0f00 	cmp.w	r8, #0
 800b2e0:	d01e      	beq.n	800b320 <vsscanf+0x240>
 800b2e2:	dc0b      	bgt.n	800b2fc <vsscanf+0x21c>
 800b2e4:	f118 0f02 	cmn.w	r8, #2
 800b2e8:	d013      	beq.n	800b312 <vsscanf+0x232>
 800b2ea:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b2ee:	d014      	beq.n	800b31a <vsscanf+0x23a>
				state = st_normal;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	e731      	b.n	800b158 <vsscanf+0x78>
					base = 0;
 800b2f4:	2200      	movs	r2, #0
					rank = rank_ptr;
 800b2f6:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 800b2fa:	e7cd      	b.n	800b298 <vsscanf+0x1b8>
						switch (rank) {
 800b2fc:	f1b8 0f02 	cmp.w	r8, #2
 800b300:	d012      	beq.n	800b328 <vsscanf+0x248>
 800b302:	db03      	blt.n	800b30c <vsscanf+0x22c>
 800b304:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b308:	4590      	cmp	r8, r2
 800b30a:	d1f1      	bne.n	800b2f0 <vsscanf+0x210>
							*va_arg(ap, void **) =
 800b30c:	682a      	ldr	r2, [r5, #0]
								(uintptr_t)val;
 800b30e:	6010      	str	r0, [r2, #0]
 800b310:	e001      	b.n	800b316 <vsscanf+0x236>
							*va_arg(ap,
 800b312:	682a      	ldr	r2, [r5, #0]
								= val;
 800b314:	7010      	strb	r0, [r2, #0]
							*va_arg(ap, void **) =
 800b316:	3504      	adds	r5, #4
							break;
 800b318:	e71e      	b.n	800b158 <vsscanf+0x78>
								*) = val;
 800b31a:	682a      	ldr	r2, [r5, #0]
 800b31c:	8010      	strh	r0, [r2, #0]
 800b31e:	e7fa      	b.n	800b316 <vsscanf+0x236>
							    = val;
 800b320:	682b      	ldr	r3, [r5, #0]
							*va_arg(ap,
 800b322:	3504      	adds	r5, #4
							    = val;
 800b324:	6018      	str	r0, [r3, #0]
 800b326:	e7e3      	b.n	800b2f0 <vsscanf+0x210>
								long *) = val;
 800b328:	682a      	ldr	r2, [r5, #0]
 800b32a:	e9c2 0100 	strd	r0, r1, [r2]
 800b32e:	e7f2      	b.n	800b316 <vsscanf+0x236>
					width = (flags & FL_WIDTH) ? width : 1;
 800b330:	f01a 0f04 	tst.w	sl, #4
 800b334:	bf08      	it	eq
 800b336:	2401      	moveq	r4, #1
					if (flags & FL_SPLAT) {
 800b338:	f01a 0f01 	tst.w	sl, #1
 800b33c:	f104 34ff 	add.w	r4, r4, #4294967295
 800b340:	d008      	beq.n	800b354 <vsscanf+0x274>
						while (width--) {
 800b342:	1c63      	adds	r3, r4, #1
 800b344:	d0d4      	beq.n	800b2f0 <vsscanf+0x210>
							if (!*q) {
 800b346:	7833      	ldrb	r3, [r6, #0]
 800b348:	1e62      	subs	r2, r4, #1
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f000 80a7 	beq.w	800b49e <vsscanf+0x3be>
 800b350:	4614      	mov	r4, r2
 800b352:	e7f6      	b.n	800b342 <vsscanf+0x262>
 800b354:	4632      	mov	r2, r6
						sarg = va_arg(ap, char *);
 800b356:	f8d5 9000 	ldr.w	r9, [r5]
 800b35a:	1d29      	adds	r1, r5, #4
						while (width--) {
 800b35c:	1c60      	adds	r0, r4, #1
 800b35e:	4616      	mov	r6, r2
 800b360:	d103      	bne.n	800b36a <vsscanf+0x28a>
							converted++;
 800b362:	f10b 0b01 	add.w	fp, fp, #1
						sarg = va_arg(ap, char *);
 800b366:	460d      	mov	r5, r1
 800b368:	e7c2      	b.n	800b2f0 <vsscanf+0x210>
							if (!*q) {
 800b36a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b36e:	1e60      	subs	r0, r4, #1
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 8093 	beq.w	800b49c <vsscanf+0x3bc>
							*sarg++ = *q++;
 800b376:	f809 3b01 	strb.w	r3, [r9], #1
 800b37a:	4604      	mov	r4, r0
 800b37c:	e7ee      	b.n	800b35c <vsscanf+0x27c>
						sp = sarg = va_arg(ap, char *);
 800b37e:	f8d5 9000 	ldr.w	r9, [r5]
 800b382:	4631      	mov	r1, r6
 800b384:	464a      	mov	r2, r9
					uc = 1;	/* Anything nonzero */
 800b386:	2701      	movs	r7, #1
						sp = sarg = va_arg(ap, char *);
 800b388:	f105 0c04 	add.w	ip, r5, #4
						while (width-- && (uc = *q) &&
 800b38c:	1c60      	adds	r0, r4, #1
 800b38e:	460e      	mov	r6, r1
 800b390:	d012      	beq.n	800b3b8 <vsscanf+0x2d8>
 800b392:	f811 7b01 	ldrb.w	r7, [r1], #1
 800b396:	b17f      	cbz	r7, 800b3b8 <vsscanf+0x2d8>
 800b398:	f1a7 0309 	sub.w	r3, r7, #9
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	2b17      	cmp	r3, #23
 800b3a0:	f104 35ff 	add.w	r5, r4, #4294967295
 800b3a4:	d804      	bhi.n	800b3b0 <vsscanf+0x2d0>
 800b3a6:	4816      	ldr	r0, [pc, #88]	; (800b400 <vsscanf+0x320>)
 800b3a8:	fa20 f303 	lsr.w	r3, r0, r3
 800b3ac:	07db      	lsls	r3, r3, #31
 800b3ae:	d403      	bmi.n	800b3b8 <vsscanf+0x2d8>
							*sp++ = uc;
 800b3b0:	f802 7b01 	strb.w	r7, [r2], #1
 800b3b4:	462c      	mov	r4, r5
 800b3b6:	e7e9      	b.n	800b38c <vsscanf+0x2ac>
						if (sarg != sp) {
 800b3b8:	454a      	cmp	r2, r9
							*sp = '\0';
 800b3ba:	bf18      	it	ne
 800b3bc:	2300      	movne	r3, #0
	enum bail bail = bail_none;
 800b3be:	fab7 f787 	clz	r7, r7
							*sp = '\0';
 800b3c2:	bf1c      	itt	ne
 800b3c4:	7013      	strbne	r3, [r2, #0]
							converted++;
 800b3c6:	f10b 0b01 	addne.w	fp, fp, #1
	enum bail bail = bail_none;
 800b3ca:	097f      	lsrs	r7, r7, #5
						sp = sarg = va_arg(ap, char *);
 800b3cc:	4665      	mov	r5, ip
 800b3ce:	e78f      	b.n	800b2f0 <vsscanf+0x210>
					if (*q == '%')
 800b3d0:	7833      	ldrb	r3, [r6, #0]
 800b3d2:	2b25      	cmp	r3, #37	; 0x25
 800b3d4:	f47f af15 	bne.w	800b202 <vsscanf+0x122>
						q++;
 800b3d8:	3601      	adds	r6, #1
 800b3da:	e789      	b.n	800b2f0 <vsscanf+0x210>
			if (ch == '^' && !(flags & FL_INV)) {
 800b3dc:	2a5e      	cmp	r2, #94	; 0x5e
 800b3de:	d060      	beq.n	800b4a2 <vsscanf+0x3c2>
				set_bit(matchmap, (unsigned char)ch);
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	a808      	add	r0, sp, #32
 800b3e4:	f7ff fe70 	bl	800b0c8 <set_bit>
				state = st_match;
 800b3e8:	2305      	movs	r3, #5
 800b3ea:	e6b5      	b.n	800b158 <vsscanf+0x78>
			if (ch == ']') {
 800b3ec:	2a5d      	cmp	r2, #93	; 0x5d
 800b3ee:	9304      	str	r3, [sp, #16]
 800b3f0:	d041      	beq.n	800b476 <vsscanf+0x396>
			} else if (ch == '-') {
 800b3f2:	2a2d      	cmp	r2, #45	; 0x2d
 800b3f4:	d058      	beq.n	800b4a8 <vsscanf+0x3c8>
				set_bit(matchmap, (unsigned char)ch);
 800b3f6:	4611      	mov	r1, r2
 800b3f8:	a808      	add	r0, sp, #32
 800b3fa:	f7ff fe65 	bl	800b0c8 <set_bit>
 800b3fe:	e6b2      	b.n	800b166 <vsscanf+0x86>
 800b400:	00800013 	.word	0x00800013
			if (ch == ']') {
 800b404:	2a5d      	cmp	r2, #93	; 0x5d
 800b406:	d129      	bne.n	800b45c <vsscanf+0x37c>
	bitmap[bit / LONG_BIT] |= 1UL << (bit % LONG_BIT);
 800b408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b40a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b40e:	9209      	str	r2, [sp, #36]	; 0x24
 800b410:	46b4      	mov	ip, r6
			uc = 1;	/* Anything nonzero */
 800b412:	2201      	movs	r2, #1
			qq = q;
 800b414:	9607      	str	r6, [sp, #28]
 800b416:	4666      	mov	r6, ip
			while (width && (uc = *q)
 800b418:	b18c      	cbz	r4, 800b43e <vsscanf+0x35e>
 800b41a:	f81c 2b01 	ldrb.w	r2, [ip], #1
 800b41e:	b172      	cbz	r2, 800b43e <vsscanf+0x35e>
	return (int)(bitmap[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1;
 800b420:	a910      	add	r1, sp, #64	; 0x40
 800b422:	0950      	lsrs	r0, r2, #5
 800b424:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 800b428:	f850 0c20 	ldr.w	r0, [r0, #-32]
 800b42c:	f002 011f 	and.w	r1, r2, #31
 800b430:	fa20 f101 	lsr.w	r1, r0, r1
			       && test_bit(matchmap, uc)^matchinv) {
 800b434:	9802      	ldr	r0, [sp, #8]
	return (int)(bitmap[bit / LONG_BIT] >> (bit % LONG_BIT)) & 1;
 800b436:	f001 0101 	and.w	r1, r1, #1
			       && test_bit(matchmap, uc)^matchinv) {
 800b43a:	4288      	cmp	r0, r1
 800b43c:	d11d      	bne.n	800b47a <vsscanf+0x39a>
			if (q != qq) {   ////  Previously: if (q != qq && sarg) {
 800b43e:	9907      	ldr	r1, [sp, #28]
 800b440:	42b1      	cmp	r1, r6
 800b442:	d022      	beq.n	800b48a <vsscanf+0x3aa>
				if (sarg) {  ////  Added: For "%*...[...]" format, don't bail out.
 800b444:	f1b9 0f00 	cmp.w	r9, #0
 800b448:	d004      	beq.n	800b454 <vsscanf+0x374>
					*sarg = '\0';
 800b44a:	2100      	movs	r1, #0
					converted++;
 800b44c:	f10b 0b01 	add.w	fp, fp, #1
					*sarg = '\0';
 800b450:	f889 1000 	strb.w	r1, [r9]
				bail = bail_eof;
 800b454:	2a00      	cmp	r2, #0
 800b456:	bf08      	it	eq
 800b458:	2701      	moveq	r7, #1
 800b45a:	e67d      	b.n	800b158 <vsscanf+0x78>
				for (i = range_start; i < (unsigned char)ch;
 800b45c:	9b00      	ldr	r3, [sp, #0]
 800b45e:	429a      	cmp	r2, r3
 800b460:	ddc2      	ble.n	800b3e8 <vsscanf+0x308>
					set_bit(matchmap, i);
 800b462:	4619      	mov	r1, r3
 800b464:	a808      	add	r0, sp, #32
 800b466:	9205      	str	r2, [sp, #20]
 800b468:	9304      	str	r3, [sp, #16]
 800b46a:	f7ff fe2d 	bl	800b0c8 <set_bit>
				     i++)
 800b46e:	9b04      	ldr	r3, [sp, #16]
 800b470:	9a05      	ldr	r2, [sp, #20]
 800b472:	3301      	adds	r3, #1
 800b474:	e7f3      	b.n	800b45e <vsscanf+0x37e>
				state = st_normal;  ////  Added: State should return to normal after matching.
 800b476:	2300      	movs	r3, #0
 800b478:	e7ca      	b.n	800b410 <vsscanf+0x330>
				if (sarg)
 800b47a:	f1b9 0f00 	cmp.w	r9, #0
 800b47e:	d0ca      	beq.n	800b416 <vsscanf+0x336>
					*sarg++ = uc;
 800b480:	f889 2000 	strb.w	r2, [r9]
 800b484:	f109 0901 	add.w	r9, r9, #1
 800b488:	e7c5      	b.n	800b416 <vsscanf+0x336>
				bail = bail_err;
 800b48a:	2702      	movs	r7, #2
 800b48c:	e7e2      	b.n	800b454 <vsscanf+0x374>
				flags = 0;
 800b48e:	f04f 0a00 	mov.w	sl, #0
				state = st_flags;
 800b492:	2301      	movs	r3, #1
				width = UINT_MAX;
 800b494:	f04f 34ff 	mov.w	r4, #4294967295
				rank = rank_int;
 800b498:	46d0      	mov	r8, sl
 800b49a:	e65d      	b.n	800b158 <vsscanf+0x78>
						sarg = va_arg(ap, char *);
 800b49c:	460d      	mov	r5, r1
 800b49e:	2701      	movs	r7, #1
 800b4a0:	e65a      	b.n	800b158 <vsscanf+0x78>
				matchinv = 1;
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	9202      	str	r2, [sp, #8]
 800b4a6:	e657      	b.n	800b158 <vsscanf+0x78>
 800b4a8:	9200      	str	r2, [sp, #0]
				state = st_match_range;
 800b4aa:	2306      	movs	r3, #6
 800b4ac:	e654      	b.n	800b158 <vsscanf+0x78>
 800b4ae:	bf00      	nop

0800b4b0 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
 800b4b0:	6843      	ldr	r3, [r0, #4]
 800b4b2:	428b      	cmp	r3, r1
 800b4b4:	d807      	bhi.n	800b4c6 <hal_flash_check_addr+0x16>
 800b4b6:	6882      	ldr	r2, [r0, #8]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	428b      	cmp	r3, r1
        return SYS_EINVAL;
    }
    return 0;
 800b4bc:	bf34      	ite	cc
 800b4be:	f06f 0001 	mvncc.w	r0, #1
 800b4c2:	2000      	movcs	r0, #0
 800b4c4:	4770      	bx	lr
        return SYS_EINVAL;
 800b4c6:	f06f 0001 	mvn.w	r0, #1
}
 800b4ca:	4770      	bx	lr

0800b4cc <hal_flash_init>:
{
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	2400      	movs	r4, #0
    int rc = 0;
 800b4d0:	4625      	mov	r5, r4
        hf = hal_bsp_flash_dev(i);
 800b4d2:	b2e0      	uxtb	r0, r4
 800b4d4:	f7fc ffc4 	bl	8008460 <hal_bsp_flash_dev>
        if (!hf) {
 800b4d8:	b140      	cbz	r0, 800b4ec <hal_flash_init+0x20>
        if (hf->hf_itf->hff_init(hf)) {
 800b4da:	6803      	ldr	r3, [r0, #0]
 800b4dc:	3401      	adds	r4, #1
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	4798      	blx	r3
            rc = SYS_EIO;
 800b4e2:	2800      	cmp	r0, #0
 800b4e4:	bf18      	it	ne
 800b4e6:	f06f 0504 	mvnne.w	r5, #4
        hf = hal_bsp_flash_dev(i);
 800b4ea:	e7f2      	b.n	800b4d2 <hal_flash_init+0x6>
}
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	bd38      	pop	{r3, r4, r5, pc}

0800b4f0 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
 800b4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f4:	460d      	mov	r5, r1
 800b4f6:	4690      	mov	r8, r2
 800b4f8:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
 800b4fa:	f7fc ffb1 	bl	8008460 <hal_bsp_flash_dev>
    if (!hf) {
 800b4fe:	4604      	mov	r4, r0
 800b500:	b1a8      	cbz	r0, 800b52e <hal_flash_read+0x3e>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
 800b502:	4629      	mov	r1, r5
 800b504:	f7ff ffd4 	bl	800b4b0 <hal_flash_check_addr>
 800b508:	b988      	cbnz	r0, 800b52e <hal_flash_read+0x3e>
      hal_flash_check_addr(hf, address + num_bytes)) {
 800b50a:	19a9      	adds	r1, r5, r6
 800b50c:	4620      	mov	r0, r4
 800b50e:	f7ff ffcf 	bl	800b4b0 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
 800b512:	b960      	cbnz	r0, 800b52e <hal_flash_read+0x3e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	4642      	mov	r2, r8
 800b518:	681f      	ldr	r7, [r3, #0]
 800b51a:	4629      	mov	r1, r5
 800b51c:	4633      	mov	r3, r6
 800b51e:	4620      	mov	r0, r4
 800b520:	47b8      	blx	r7
    if (rc != 0) {
 800b522:	2800      	cmp	r0, #0
        return SYS_EIO;
 800b524:	bf18      	it	ne
 800b526:	f06f 0004 	mvnne.w	r0, #4
    }

    return 0;
}
 800b52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
 800b52e:	f06f 0001 	mvn.w	r0, #1
 800b532:	e7fa      	b.n	800b52a <hal_flash_read+0x3a>

0800b534 <HAL_ADC_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 800b534:	4770      	bx	lr
	...

0800b538 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800b538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800b53a:	2500      	movs	r5, #0
{
 800b53c:	4604      	mov	r4, r0
 800b53e:	460e      	mov	r6, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800b540:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800b542:	f7fd f967 	bl	8008814 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800b546:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b548:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800b54a:	689a      	ldr	r2, [r3, #8]
 800b54c:	05d2      	lsls	r2, r2, #23
 800b54e:	d508      	bpl.n	800b562 <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 800b550:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b552:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 800b554:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b558:	f043 0320 	orr.w	r3, r3, #32
 800b55c:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 800b55e:	b003      	add	sp, #12
 800b560:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800b562:	685a      	ldr	r2, [r3, #4]
 800b564:	05d5      	lsls	r5, r2, #23
 800b566:	d403      	bmi.n	800b570 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800b568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800b56a:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 800b56e:	d03b      	beq.n	800b5e8 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800b570:	4b3a      	ldr	r3, [pc, #232]	; (800b65c <HAL_ADC_PollForConversion+0x124>)
 800b572:	2002      	movs	r0, #2
 800b574:	681d      	ldr	r5, [r3, #0]
 800b576:	f000 fb85 	bl	800bc84 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	4a38      	ldr	r2, [pc, #224]	; (800b660 <HAL_ADC_PollForConversion+0x128>)
 800b57e:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800b580:	fbb5 f0f0 	udiv	r0, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800b584:	4211      	tst	r1, r2
 800b586:	4a37      	ldr	r2, [pc, #220]	; (800b664 <HAL_ADC_PollForConversion+0x12c>)
 800b588:	d14f      	bne.n	800b62a <HAL_ADC_PollForConversion+0xf2>
 800b58a:	68dd      	ldr	r5, [r3, #12]
 800b58c:	4936      	ldr	r1, [pc, #216]	; (800b668 <HAL_ADC_PollForConversion+0x130>)
 800b58e:	420d      	tst	r5, r1
 800b590:	d14b      	bne.n	800b62a <HAL_ADC_PollForConversion+0xf2>
 800b592:	6919      	ldr	r1, [r3, #16]
 800b594:	4211      	tst	r1, r2
 800b596:	d159      	bne.n	800b64c <HAL_ADC_PollForConversion+0x114>
 800b598:	68da      	ldr	r2, [r3, #12]
 800b59a:	4b34      	ldr	r3, [pc, #208]	; (800b66c <HAL_ADC_PollForConversion+0x134>)
 800b59c:	421a      	tst	r2, r3
 800b59e:	bf14      	ite	ne
 800b5a0:	2329      	movne	r3, #41	; 0x29
 800b5a2:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800b5a4:	fb03 f500 	mul.w	r5, r3, r0
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800b5a8:	9b01      	ldr	r3, [sp, #4]
 800b5aa:	42ab      	cmp	r3, r5
 800b5ac:	d220      	bcs.n	800b5f0 <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 800b5ae:	1c73      	adds	r3, r6, #1
 800b5b0:	d005      	beq.n	800b5be <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800b5b2:	b186      	cbz	r6, 800b5d6 <HAL_ADC_PollForConversion+0x9e>
 800b5b4:	f7fd f92e 	bl	8008814 <HAL_GetTick>
 800b5b8:	1bc0      	subs	r0, r0, r7
 800b5ba:	42b0      	cmp	r0, r6
 800b5bc:	d80b      	bhi.n	800b5d6 <HAL_ADC_PollForConversion+0x9e>
      Conversion_Timeout_CPU_cycles ++;
 800b5be:	9b01      	ldr	r3, [sp, #4]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	9301      	str	r3, [sp, #4]
 800b5c4:	e7f0      	b.n	800b5a8 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 800b5c6:	1c70      	adds	r0, r6, #1
 800b5c8:	d00f      	beq.n	800b5ea <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800b5ca:	b126      	cbz	r6, 800b5d6 <HAL_ADC_PollForConversion+0x9e>
 800b5cc:	f7fd f922 	bl	8008814 <HAL_GetTick>
 800b5d0:	1bc0      	subs	r0, r0, r7
 800b5d2:	42b0      	cmp	r0, r6
 800b5d4:	d908      	bls.n	800b5e8 <HAL_ADC_PollForConversion+0xb0>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b5d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 800b5d8:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b5da:	f043 0304 	orr.w	r3, r3, #4
 800b5de:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 800b5e6:	e7ba      	b.n	800b55e <HAL_ADC_PollForConversion+0x26>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800b5e8:	6822      	ldr	r2, [r4, #0]
 800b5ea:	6813      	ldr	r3, [r2, #0]
 800b5ec:	0799      	lsls	r1, r3, #30
 800b5ee:	d5ea      	bpl.n	800b5c6 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800b5f0:	f06f 0312 	mvn.w	r3, #18
 800b5f4:	6822      	ldr	r2, [r4, #0]
 800b5f6:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b5f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b5fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b5fe:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800b600:	6893      	ldr	r3, [r2, #8]
 800b602:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800b606:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800b60a:	d125      	bne.n	800b658 <HAL_ADC_PollForConversion+0x120>
 800b60c:	68e3      	ldr	r3, [r4, #12]
 800b60e:	bb1b      	cbnz	r3, 800b658 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800b610:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b616:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b618:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800b61a:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800b61e:	d11b      	bne.n	800b658 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b620:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b622:	f043 0301 	orr.w	r3, r3, #1
 800b626:	62a3      	str	r3, [r4, #40]	; 0x28
 800b628:	e799      	b.n	800b55e <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800b62a:	6919      	ldr	r1, [r3, #16]
 800b62c:	4211      	tst	r1, r2
 800b62e:	d103      	bne.n	800b638 <HAL_ADC_PollForConversion+0x100>
 800b630:	68d9      	ldr	r1, [r3, #12]
 800b632:	4a0e      	ldr	r2, [pc, #56]	; (800b66c <HAL_ADC_PollForConversion+0x134>)
 800b634:	4211      	tst	r1, r2
 800b636:	d00b      	beq.n	800b650 <HAL_ADC_PollForConversion+0x118>
 800b638:	6919      	ldr	r1, [r3, #16]
 800b63a:	4a0d      	ldr	r2, [pc, #52]	; (800b670 <HAL_ADC_PollForConversion+0x138>)
 800b63c:	4211      	tst	r1, r2
 800b63e:	d109      	bne.n	800b654 <HAL_ADC_PollForConversion+0x11c>
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	4213      	tst	r3, r2
 800b644:	bf14      	ite	ne
 800b646:	23fc      	movne	r3, #252	; 0xfc
 800b648:	2354      	moveq	r3, #84	; 0x54
 800b64a:	e7ab      	b.n	800b5a4 <HAL_ADC_PollForConversion+0x6c>
 800b64c:	2329      	movs	r3, #41	; 0x29
 800b64e:	e7a9      	b.n	800b5a4 <HAL_ADC_PollForConversion+0x6c>
 800b650:	2354      	movs	r3, #84	; 0x54
 800b652:	e7a7      	b.n	800b5a4 <HAL_ADC_PollForConversion+0x6c>
 800b654:	23fc      	movs	r3, #252	; 0xfc
 800b656:	e7a5      	b.n	800b5a4 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 800b658:	2000      	movs	r0, #0
 800b65a:	e780      	b.n	800b55e <HAL_ADC_PollForConversion+0x26>
 800b65c:	20000110 	.word	0x20000110
 800b660:	24924924 	.word	0x24924924
 800b664:	12492492 	.word	0x12492492
 800b668:	00924924 	.word	0x00924924
 800b66c:	00492492 	.word	0x00492492
 800b670:	00249249 	.word	0x00249249

0800b674 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800b674:	6803      	ldr	r3, [r0, #0]
 800b676:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800b678:	4770      	bx	lr

0800b67a <HAL_ADC_ConvCpltCallback>:
 800b67a:	4770      	bx	lr

0800b67c <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b67c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800b67e:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800b680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b682:	f012 0f50 	tst.w	r2, #80	; 0x50
 800b686:	d11b      	bne.n	800b6c0 <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b68a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b68e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	6892      	ldr	r2, [r2, #8]
 800b694:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800b698:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800b69c:	d10c      	bne.n	800b6b8 <ADC_DMAConvCplt+0x3c>
 800b69e:	68da      	ldr	r2, [r3, #12]
 800b6a0:	b952      	cbnz	r2, 800b6b8 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800b6a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b6a8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b6aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6ac:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b6ae:	bf5e      	ittt	pl
 800b6b0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 800b6b2:	f042 0201 	orrpl.w	r2, r2, #1
 800b6b6:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff ffde 	bl	800b67a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800b6be:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
}
 800b6c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800b6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c8:	4718      	bx	r3

0800b6ca <HAL_ADC_ConvHalfCpltCallback>:
 800b6ca:	4770      	bx	lr

0800b6cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800b6cc:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800b6ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800b6d0:	f7ff fffb 	bl	800b6ca <HAL_ADC_ConvHalfCpltCallback>
}
 800b6d4:	bd08      	pop	{r3, pc}

0800b6d6 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800b6d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800b6d8:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b6da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b6dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6e0:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b6e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b6e4:	f043 0304 	orr.w	r3, r3, #4
 800b6e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800b6ea:	f7fe fc4d 	bl	8009f88 <HAL_ADC_ErrorCallback>
}
 800b6ee:	bd08      	pop	{r3, pc}

0800b6f0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 800b6f0:	2300      	movs	r3, #0
{ 
 800b6f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800b6f4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800b6f6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d06d      	beq.n	800b7da <HAL_ADC_ConfigChannel+0xea>
 800b6fe:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 800b700:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800b702:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800b706:	2d06      	cmp	r5, #6
 800b708:	6802      	ldr	r2, [r0, #0]
 800b70a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800b70e:	680c      	ldr	r4, [r1, #0]
 800b710:	d823      	bhi.n	800b75a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800b712:	261f      	movs	r6, #31
 800b714:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800b716:	3b05      	subs	r3, #5
 800b718:	409e      	lsls	r6, r3
 800b71a:	ea25 0506 	bic.w	r5, r5, r6
 800b71e:	fa04 f303 	lsl.w	r3, r4, r3
 800b722:	432b      	orrs	r3, r5
 800b724:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800b726:	2c09      	cmp	r4, #9
 800b728:	688b      	ldr	r3, [r1, #8]
 800b72a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800b72e:	f04f 0107 	mov.w	r1, #7
 800b732:	d92a      	bls.n	800b78a <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800b734:	68d6      	ldr	r6, [r2, #12]
 800b736:	3d1e      	subs	r5, #30
 800b738:	40a9      	lsls	r1, r5
 800b73a:	ea26 0101 	bic.w	r1, r6, r1
 800b73e:	40ab      	lsls	r3, r5
 800b740:	430b      	orrs	r3, r1
 800b742:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800b744:	f1a4 0310 	sub.w	r3, r4, #16
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d926      	bls.n	800b79a <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b74c:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 800b74e:	2200      	movs	r2, #0
 800b750:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 800b754:	4618      	mov	r0, r3
 800b756:	b002      	add	sp, #8
 800b758:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800b75a:	2d0c      	cmp	r5, #12
 800b75c:	f04f 051f 	mov.w	r5, #31
 800b760:	d809      	bhi.n	800b776 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800b762:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800b764:	3b23      	subs	r3, #35	; 0x23
 800b766:	409d      	lsls	r5, r3
 800b768:	ea26 0505 	bic.w	r5, r6, r5
 800b76c:	fa04 f303 	lsl.w	r3, r4, r3
 800b770:	432b      	orrs	r3, r5
 800b772:	6313      	str	r3, [r2, #48]	; 0x30
 800b774:	e7d7      	b.n	800b726 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800b776:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800b778:	3b41      	subs	r3, #65	; 0x41
 800b77a:	409d      	lsls	r5, r3
 800b77c:	ea26 0505 	bic.w	r5, r6, r5
 800b780:	fa04 f303 	lsl.w	r3, r4, r3
 800b784:	432b      	orrs	r3, r5
 800b786:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b788:	e7cd      	b.n	800b726 <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800b78a:	6916      	ldr	r6, [r2, #16]
 800b78c:	40a9      	lsls	r1, r5
 800b78e:	ea26 0101 	bic.w	r1, r6, r1
 800b792:	40ab      	lsls	r3, r5
 800b794:	430b      	orrs	r3, r1
 800b796:	6113      	str	r3, [r2, #16]
 800b798:	e7d4      	b.n	800b744 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 800b79a:	4b11      	ldr	r3, [pc, #68]	; (800b7e0 <HAL_ADC_ConfigChannel+0xf0>)
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d116      	bne.n	800b7ce <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800b7a0:	6893      	ldr	r3, [r2, #8]
 800b7a2:	021b      	lsls	r3, r3, #8
 800b7a4:	d4d2      	bmi.n	800b74c <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800b7a6:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800b7a8:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800b7aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7ae:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800b7b0:	d1cc      	bne.n	800b74c <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800b7b2:	4b0c      	ldr	r3, [pc, #48]	; (800b7e4 <HAL_ADC_ConfigChannel+0xf4>)
 800b7b4:	4a0c      	ldr	r2, [pc, #48]	; (800b7e8 <HAL_ADC_ConfigChannel+0xf8>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7bc:	230a      	movs	r3, #10
 800b7be:	4353      	muls	r3, r2
            wait_loop_index--;
 800b7c0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800b7c2:	9b01      	ldr	r3, [sp, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d0c1      	beq.n	800b74c <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 800b7c8:	9b01      	ldr	r3, [sp, #4]
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	e7f8      	b.n	800b7c0 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b7ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800b7d0:	f043 0320 	orr.w	r3, r3, #32
 800b7d4:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e7b9      	b.n	800b74e <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 800b7da:	2302      	movs	r3, #2
 800b7dc:	e7ba      	b.n	800b754 <HAL_ADC_ConfigChannel+0x64>
 800b7de:	bf00      	nop
 800b7e0:	40012400 	.word	0x40012400
 800b7e4:	20000110 	.word	0x20000110
 800b7e8:	000f4240 	.word	0x000f4240

0800b7ec <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800b7ec:	2300      	movs	r3, #0
{
 800b7ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800b7f0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800b7f2:	6803      	ldr	r3, [r0, #0]
{
 800b7f4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800b7f6:	689a      	ldr	r2, [r3, #8]
 800b7f8:	07d2      	lsls	r2, r2, #31
 800b7fa:	d502      	bpl.n	800b802 <ADC_Enable+0x16>
  return HAL_OK;
 800b7fc:	2000      	movs	r0, #0
}
 800b7fe:	b002      	add	sp, #8
 800b800:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800b802:	689a      	ldr	r2, [r3, #8]
 800b804:	f042 0201 	orr.w	r2, r2, #1
 800b808:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800b80a:	4b12      	ldr	r3, [pc, #72]	; (800b854 <ADC_Enable+0x68>)
 800b80c:	4a12      	ldr	r2, [pc, #72]	; (800b858 <ADC_Enable+0x6c>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800b814:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800b816:	9b01      	ldr	r3, [sp, #4]
 800b818:	b9c3      	cbnz	r3, 800b84c <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800b81a:	f7fc fffb 	bl	8008814 <HAL_GetTick>
 800b81e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	689d      	ldr	r5, [r3, #8]
 800b824:	f015 0501 	ands.w	r5, r5, #1
 800b828:	d1e8      	bne.n	800b7fc <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b82a:	f7fc fff3 	bl	8008814 <HAL_GetTick>
 800b82e:	1b80      	subs	r0, r0, r6
 800b830:	2802      	cmp	r0, #2
 800b832:	d9f5      	bls.n	800b820 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b834:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800b836:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b83a:	f043 0310 	orr.w	r3, r3, #16
 800b83e:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b840:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800b842:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b844:	f043 0301 	orr.w	r3, r3, #1
 800b848:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b84a:	e7d8      	b.n	800b7fe <ADC_Enable+0x12>
      wait_loop_index--;
 800b84c:	9b01      	ldr	r3, [sp, #4]
 800b84e:	3b01      	subs	r3, #1
 800b850:	e7e0      	b.n	800b814 <ADC_Enable+0x28>
 800b852:	bf00      	nop
 800b854:	20000110 	.word	0x20000110
 800b858:	000f4240 	.word	0x000f4240

0800b85c <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 800b85c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800b860:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800b862:	2b01      	cmp	r3, #1
{
 800b864:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800b866:	d054      	beq.n	800b912 <HAL_ADC_Start+0xb6>
 800b868:	2301      	movs	r3, #1
 800b86a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800b86e:	f7ff ffbd 	bl	800b7ec <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800b872:	2800      	cmp	r0, #0
 800b874:	d149      	bne.n	800b90a <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800b876:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b878:	4a27      	ldr	r2, [pc, #156]	; (800b918 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800b87a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b87e:	f023 0301 	bic.w	r3, r3, #1
 800b882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b886:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b888:	6823      	ldr	r3, [r4, #0]
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d104      	bne.n	800b898 <HAL_ADC_Start+0x3c>
 800b88e:	4923      	ldr	r1, [pc, #140]	; (800b91c <HAL_ADC_Start+0xc0>)
 800b890:	684a      	ldr	r2, [r1, #4]
 800b892:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800b896:	d12e      	bne.n	800b8f6 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b898:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b89a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b89e:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b8a0:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800b8a2:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b8a4:	bf41      	itttt	mi
 800b8a6:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 800b8a8:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800b8ac:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 800b8b0:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b8b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b8b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b8b8:	bf1c      	itt	ne
 800b8ba:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 800b8bc:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800b8c0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800b8c8:	f06f 0202 	mvn.w	r2, #2
 800b8cc:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800b8ce:	689a      	ldr	r2, [r3, #8]
 800b8d0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800b8d4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800b8d8:	d113      	bne.n	800b902 <HAL_ADC_Start+0xa6>
 800b8da:	4a0f      	ldr	r2, [pc, #60]	; (800b918 <HAL_ADC_Start+0xbc>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d105      	bne.n	800b8ec <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800b8e0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800b8e4:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800b8e6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800b8ea:	d10a      	bne.n	800b902 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800b8ec:	689a      	ldr	r2, [r3, #8]
 800b8ee:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800b8f2:	609a      	str	r2, [r3, #8]
}
 800b8f4:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b8f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b8f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b8fc:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800b8fe:	684a      	ldr	r2, [r1, #4]
 800b900:	e7cf      	b.n	800b8a2 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800b902:	689a      	ldr	r2, [r3, #8]
 800b904:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b908:	e7f3      	b.n	800b8f2 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800b90a:	2300      	movs	r3, #0
 800b90c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800b910:	e7f0      	b.n	800b8f4 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 800b912:	2002      	movs	r0, #2
 800b914:	e7ee      	b.n	800b8f4 <HAL_ADC_Start+0x98>
 800b916:	bf00      	nop
 800b918:	40012800 	.word	0x40012800
 800b91c:	40012400 	.word	0x40012400

0800b920 <HAL_ADC_Start_DMA>:
{
 800b920:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 800b924:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800b926:	4b40      	ldr	r3, [pc, #256]	; (800ba28 <HAL_ADC_Start_DMA+0x108>)
 800b928:	6802      	ldr	r2, [r0, #0]
{
 800b92a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800b92c:	429a      	cmp	r2, r3
{
 800b92e:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800b930:	d002      	beq.n	800b938 <HAL_ADC_Start_DMA+0x18>
 800b932:	493e      	ldr	r1, [pc, #248]	; (800ba2c <HAL_ADC_Start_DMA+0x10c>)
 800b934:	428a      	cmp	r2, r1
 800b936:	d103      	bne.n	800b940 <HAL_ADC_Start_DMA+0x20>
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800b93e:	d16e      	bne.n	800ba1e <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 800b940:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800b944:	2b01      	cmp	r3, #1
 800b946:	d06c      	beq.n	800ba22 <HAL_ADC_Start_DMA+0x102>
 800b948:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800b94a:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800b94c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800b950:	f7ff ff4c 	bl	800b7ec <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800b954:	4606      	mov	r6, r0
 800b956:	2800      	cmp	r0, #0
 800b958:	d15d      	bne.n	800ba16 <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 800b95a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b95c:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800b95e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b962:	4b32      	ldr	r3, [pc, #200]	; (800ba2c <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 800b964:	f020 0001 	bic.w	r0, r0, #1
 800b968:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b96c:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800b96e:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800b970:	d104      	bne.n	800b97c <HAL_ADC_Start_DMA+0x5c>
 800b972:	4a2d      	ldr	r2, [pc, #180]	; (800ba28 <HAL_ADC_Start_DMA+0x108>)
 800b974:	6853      	ldr	r3, [r2, #4]
 800b976:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 800b97a:	d13e      	bne.n	800b9fa <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b97c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b97e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b982:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800b984:	684b      	ldr	r3, [r1, #4]
 800b986:	055a      	lsls	r2, r3, #21
 800b988:	d505      	bpl.n	800b996 <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800b98a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b98c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b994:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b996:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b998:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b99a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b99e:	bf18      	it	ne
 800b9a0:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b9a2:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800b9a4:	bf18      	it	ne
 800b9a6:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800b9aa:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b9b2:	4b1f      	ldr	r3, [pc, #124]	; (800ba30 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b9b4:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b9b6:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b9b8:	4b1e      	ldr	r3, [pc, #120]	; (800ba34 <HAL_ADC_Start_DMA+0x114>)
 800b9ba:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b9bc:	4b1e      	ldr	r3, [pc, #120]	; (800ba38 <HAL_ADC_Start_DMA+0x118>)
 800b9be:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800b9c0:	f06f 0302 	mvn.w	r3, #2
 800b9c4:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800b9c8:	f851 3c44 	ldr.w	r3, [r1, #-68]
 800b9cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9d0:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b9d4:	4643      	mov	r3, r8
 800b9d6:	f7fe f90f 	bl	8009bf8 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	689a      	ldr	r2, [r3, #8]
 800b9de:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800b9e2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800b9e6:	689a      	ldr	r2, [r3, #8]
 800b9e8:	bf0c      	ite	eq
 800b9ea:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800b9ee:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800b9f2:	609a      	str	r2, [r3, #8]
}
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b9fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b9fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba00:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800ba02:	6853      	ldr	r3, [r2, #4]
 800ba04:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800ba06:	bf41      	itttt	mi
 800ba08:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800ba0a:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 800ba0e:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800ba12:	62a0      	strmi	r0, [r4, #40]	; 0x28
 800ba14:	e7bf      	b.n	800b996 <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800ba16:	2300      	movs	r3, #0
 800ba18:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800ba1c:	e7ea      	b.n	800b9f4 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 800ba1e:	2601      	movs	r6, #1
 800ba20:	e7e8      	b.n	800b9f4 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 800ba22:	2602      	movs	r6, #2
 800ba24:	e7e6      	b.n	800b9f4 <HAL_ADC_Start_DMA+0xd4>
 800ba26:	bf00      	nop
 800ba28:	40012400 	.word	0x40012400
 800ba2c:	40012800 	.word	0x40012800
 800ba30:	0800b67d 	.word	0x0800b67d
 800ba34:	0800b6cd 	.word	0x0800b6cd
 800ba38:	0800b6d7 	.word	0x0800b6d7

0800ba3c <ADC_ConversionStop_Disable>:
{
 800ba3c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ba3e:	6803      	ldr	r3, [r0, #0]
{
 800ba40:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800ba42:	689a      	ldr	r2, [r3, #8]
 800ba44:	07d2      	lsls	r2, r2, #31
 800ba46:	d401      	bmi.n	800ba4c <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 800ba48:	2000      	movs	r0, #0
}
 800ba4a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800ba4c:	689a      	ldr	r2, [r3, #8]
 800ba4e:	f022 0201 	bic.w	r2, r2, #1
 800ba52:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800ba54:	f7fc fede 	bl	8008814 <HAL_GetTick>
 800ba58:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800ba5a:	6823      	ldr	r3, [r4, #0]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	07db      	lsls	r3, r3, #31
 800ba60:	d5f2      	bpl.n	800ba48 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ba62:	f7fc fed7 	bl	8008814 <HAL_GetTick>
 800ba66:	1b40      	subs	r0, r0, r5
 800ba68:	2802      	cmp	r0, #2
 800ba6a:	d9f6      	bls.n	800ba5a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ba6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ba6e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ba70:	f043 0310 	orr.w	r3, r3, #16
 800ba74:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ba76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ba78:	f043 0301 	orr.w	r3, r3, #1
 800ba7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba7e:	e7e4      	b.n	800ba4a <ADC_ConversionStop_Disable+0xe>

0800ba80 <HAL_ADC_Init>:
{
 800ba80:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800ba82:	4604      	mov	r4, r0
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d070      	beq.n	800bb6a <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ba88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ba8a:	b923      	cbnz	r3, 800ba96 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800ba8c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800ba8e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800ba92:	f7ff fd4f 	bl	800b534 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800ba96:	4620      	mov	r0, r4
 800ba98:	f7ff ffd0 	bl	800ba3c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800ba9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ba9e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800baa2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800baa4:	d163      	bne.n	800bb6e <HAL_ADC_Init+0xee>
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d161      	bne.n	800bb6e <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800baaa:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800baac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800bab0:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800bab2:	f023 0302 	bic.w	r3, r3, #2
 800bab6:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800baba:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800babc:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800babe:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800bac0:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800bac2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800bac6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800baca:	d037      	beq.n	800bb3c <HAL_ADC_Init+0xbc>
 800bacc:	2901      	cmp	r1, #1
 800bace:	bf14      	ite	ne
 800bad0:	4606      	movne	r6, r0
 800bad2:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800bad6:	6965      	ldr	r5, [r4, #20]
 800bad8:	2d01      	cmp	r5, #1
 800bada:	d106      	bne.n	800baea <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800badc:	bb83      	cbnz	r3, 800bb40 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800bade:	69a3      	ldr	r3, [r4, #24]
 800bae0:	3b01      	subs	r3, #1
 800bae2:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 800bae6:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800baea:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800baec:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800baf0:	685d      	ldr	r5, [r3, #4]
 800baf2:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800baf6:	ea45 0506 	orr.w	r5, r5, r6
 800bafa:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800bafc:	689e      	ldr	r6, [r3, #8]
 800bafe:	4d1e      	ldr	r5, [pc, #120]	; (800bb78 <HAL_ADC_Init+0xf8>)
 800bb00:	ea05 0506 	and.w	r5, r5, r6
 800bb04:	ea45 0502 	orr.w	r5, r5, r2
 800bb08:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800bb0a:	d001      	beq.n	800bb10 <HAL_ADC_Init+0x90>
 800bb0c:	2901      	cmp	r1, #1
 800bb0e:	d120      	bne.n	800bb52 <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800bb10:	6921      	ldr	r1, [r4, #16]
 800bb12:	3901      	subs	r1, #1
 800bb14:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800bb16:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800bb18:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800bb1c:	4329      	orrs	r1, r5
 800bb1e:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800bb20:	6899      	ldr	r1, [r3, #8]
 800bb22:	4b16      	ldr	r3, [pc, #88]	; (800bb7c <HAL_ADC_Init+0xfc>)
 800bb24:	400b      	ands	r3, r1
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d115      	bne.n	800bb56 <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800bb2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb30:	f023 0303 	bic.w	r3, r3, #3
 800bb34:	f043 0301 	orr.w	r3, r3, #1
 800bb38:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800bb3c:	460e      	mov	r6, r1
 800bb3e:	e7ca      	b.n	800bad6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bb40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb42:	f043 0320 	orr.w	r3, r3, #32
 800bb46:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bb48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb4a:	f043 0301 	orr.w	r3, r3, #1
 800bb4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb50:	e7cb      	b.n	800baea <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 800bb52:	2100      	movs	r1, #0
 800bb54:	e7df      	b.n	800bb16 <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 800bb56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb58:	f023 0312 	bic.w	r3, r3, #18
 800bb5c:	f043 0310 	orr.w	r3, r3, #16
 800bb60:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bb62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb64:	f043 0301 	orr.w	r3, r3, #1
 800bb68:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800bb6a:	2001      	movs	r0, #1
 800bb6c:	e7e5      	b.n	800bb3a <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bb6e:	f043 0310 	orr.w	r3, r3, #16
 800bb72:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb74:	e7f9      	b.n	800bb6a <HAL_ADC_Init+0xea>
 800bb76:	bf00      	nop
 800bb78:	ffe1f7fd 	.word	0xffe1f7fd
 800bb7c:	ff1f0efe 	.word	0xff1f0efe

0800bb80 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800bb80:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800bb84:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800bb86:	2b01      	cmp	r3, #1
{
 800bb88:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800bb8a:	d011      	beq.n	800bbb0 <HAL_ADC_Stop+0x30>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800bb92:	f7ff ff53 	bl	800ba3c <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 800bb96:	b938      	cbnz	r0, 800bba8 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 800bb98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800bb9e:	f023 0301 	bic.w	r3, r3, #1
 800bba2:	f043 0301 	orr.w	r3, r3, #1
 800bba6:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 800bba8:	2300      	movs	r3, #0
 800bbaa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800bbae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800bbb0:	2002      	movs	r0, #2
 800bbb2:	e7fc      	b.n	800bbae <HAL_ADC_Stop+0x2e>

0800bbb4 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800bbb4:	2300      	movs	r3, #0
{
 800bbb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800bbb8:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800bbba:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800bbbe:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d05a      	beq.n	800bc7a <HAL_ADCEx_Calibration_Start+0xc6>
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800bbca:	f7ff ff37 	bl	800ba3c <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800bbce:	4605      	mov	r5, r0
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d132      	bne.n	800bc3a <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bbd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800bbd6:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 800bbd8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800bbdc:	f023 0302 	bic.w	r3, r3, #2
 800bbe0:	f043 0302 	orr.w	r3, r3, #2
 800bbe4:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800bbe6:	4b26      	ldr	r3, [pc, #152]	; (800bc80 <HAL_ADCEx_Calibration_Start+0xcc>)
 800bbe8:	681e      	ldr	r6, [r3, #0]
 800bbea:	f000 f84b 	bl	800bc84 <HAL_RCCEx_GetPeriphCLKFreq>
 800bbee:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800bbf2:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 800bbf4:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 800bbf6:	9b01      	ldr	r3, [sp, #4]
 800bbf8:	bb1b      	cbnz	r3, 800bc42 <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f7ff fdf6 	bl	800b7ec <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800bc00:	6822      	ldr	r2, [r4, #0]
 800bc02:	6893      	ldr	r3, [r2, #8]
 800bc04:	f043 0308 	orr.w	r3, r3, #8
 800bc08:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 800bc0a:	f7fc fe03 	bl	8008814 <HAL_GetTick>
 800bc0e:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800bc10:	6823      	ldr	r3, [r4, #0]
 800bc12:	689a      	ldr	r2, [r3, #8]
 800bc14:	0712      	lsls	r2, r2, #28
 800bc16:	d418      	bmi.n	800bc4a <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800bc18:	689a      	ldr	r2, [r3, #8]
 800bc1a:	f042 0204 	orr.w	r2, r2, #4
 800bc1e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800bc20:	f7fc fdf8 	bl	8008814 <HAL_GetTick>
 800bc24:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800bc26:	6823      	ldr	r3, [r4, #0]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	075b      	lsls	r3, r3, #29
 800bc2c:	d41f      	bmi.n	800bc6e <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bc2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bc30:	f023 0303 	bic.w	r3, r3, #3
 800bc34:	f043 0301 	orr.w	r3, r3, #1
 800bc38:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800bc40:	e012      	b.n	800bc68 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 800bc42:	9b01      	ldr	r3, [sp, #4]
 800bc44:	3b01      	subs	r3, #1
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	e7d5      	b.n	800bbf6 <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800bc4a:	f7fc fde3 	bl	8008814 <HAL_GetTick>
 800bc4e:	1b80      	subs	r0, r0, r6
 800bc50:	280a      	cmp	r0, #10
 800bc52:	d9dd      	bls.n	800bc10 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 800bc54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 800bc56:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 800bc58:	f023 0312 	bic.w	r3, r3, #18
 800bc5c:	f043 0310 	orr.w	r3, r3, #16
 800bc60:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800bc62:	2300      	movs	r3, #0
 800bc64:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800bc68:	4628      	mov	r0, r5
 800bc6a:	b002      	add	sp, #8
 800bc6c:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800bc6e:	f7fc fdd1 	bl	8008814 <HAL_GetTick>
 800bc72:	1b80      	subs	r0, r0, r6
 800bc74:	280a      	cmp	r0, #10
 800bc76:	d9d6      	bls.n	800bc26 <HAL_ADCEx_Calibration_Start+0x72>
 800bc78:	e7ec      	b.n	800bc54 <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 800bc7a:	2502      	movs	r5, #2
 800bc7c:	e7f4      	b.n	800bc68 <HAL_ADCEx_Calibration_Start+0xb4>
 800bc7e:	bf00      	nop
 800bc80:	20000110 	.word	0x20000110

0800bc84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bc84:	b570      	push	{r4, r5, r6, lr}
 800bc86:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800bc88:	4b34      	ldr	r3, [pc, #208]	; (800bd5c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 800bc8a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800bc8c:	ad02      	add	r5, sp, #8
 800bc8e:	f103 0610 	add.w	r6, r3, #16
 800bc92:	462a      	mov	r2, r5
 800bc94:	6818      	ldr	r0, [r3, #0]
 800bc96:	6859      	ldr	r1, [r3, #4]
 800bc98:	3308      	adds	r3, #8
 800bc9a:	c203      	stmia	r2!, {r0, r1}
 800bc9c:	42b3      	cmp	r3, r6
 800bc9e:	4615      	mov	r5, r2
 800bca0:	d1f7      	bne.n	800bc92 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800bca2:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800bca6:	2c02      	cmp	r4, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800bca8:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 800bcac:	d047      	beq.n	800bd3e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
 800bcae:	2c10      	cmp	r4, #16
 800bcb0:	d017      	beq.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800bcb2:	2c01      	cmp	r4, #1
 800bcb4:	d14f      	bne.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800bcb6:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 800bcba:	4a29      	ldr	r2, [pc, #164]	; (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800bcbc:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800bcbe:	4019      	ands	r1, r3
 800bcc0:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 800bcc4:	d044      	beq.n	800bd50 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800bcc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcce:	d12d      	bne.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      {
        frequency = LSI_VALUE;
 800bcd0:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800bcd4:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 800bcd6:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 800bcda:	bf08      	it	eq
 800bcdc:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 800bcde:	b006      	add	sp, #24
 800bce0:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 800bce2:	4b1f      	ldr	r3, [pc, #124]	; (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800bce4:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800bce6:	6818      	ldr	r0, [r3, #0]
 800bce8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800bcec:	d0f7      	beq.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bcee:	f3c1 4283 	ubfx	r2, r1, #18, #4
 800bcf2:	a806      	add	r0, sp, #24
 800bcf4:	4402      	add	r2, r0
 800bcf6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bcfa:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bcfc:	bf41      	itttt	mi
 800bcfe:	685a      	ldrmi	r2, [r3, #4]
 800bd00:	a906      	addmi	r1, sp, #24
 800bd02:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 800bd06:	1852      	addmi	r2, r2, r1
 800bd08:	bf44      	itt	mi
 800bd0a:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800bd0e:	4a15      	ldrmi	r2, [pc, #84]	; (800bd64 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800bd10:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800bd12:	bf4c      	ite	mi
 800bd14:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bd18:	4a13      	ldrpl	r2, [pc, #76]	; (800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800bd1a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bd1c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800bd20:	d4dd      	bmi.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = (pllclk * 2) / 3;
 800bd22:	2303      	movs	r3, #3
 800bd24:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800bd26:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800bd2a:	e7d8      	b.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800bd2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd30:	d111      	bne.n	800bd56 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800bd32:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 800bd34:	f24f 4024 	movw	r0, #62500	; 0xf424
 800bd38:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800bd3c:	e7cd      	b.n	800bcda <HAL_RCCEx_GetPeriphCLKFreq+0x56>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800bd3e:	f7fd fea7 	bl	8009a90 <HAL_RCC_GetPCLK2Freq>
 800bd42:	4b07      	ldr	r3, [pc, #28]	; (800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	005b      	lsls	r3, r3, #1
 800bd4e:	e7ea      	b.n	800bd26 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        frequency = LSE_VALUE;
 800bd50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bd54:	e7c3      	b.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
        frequency = 0U;
 800bd56:	2000      	movs	r0, #0
 800bd58:	e7c1      	b.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 800bd5a:	bf00      	nop
 800bd5c:	0800e774 	.word	0x0800e774
 800bd60:	40021000 	.word	0x40021000
 800bd64:	007a1200 	.word	0x007a1200
 800bd68:	003d0900 	.word	0x003d0900

0800bd6c <sscanf>:
 */

#include <stdio.h>

int sscanf(const char *str, const char *format, ...)
{
 800bd6c:	b40e      	push	{r1, r2, r3}
 800bd6e:	b503      	push	{r0, r1, lr}
 800bd70:	aa03      	add	r2, sp, #12
 800bd72:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	int rv;

	va_start(ap, format);
 800bd76:	9201      	str	r2, [sp, #4]
	rv = vsscanf(str, format, ap);
 800bd78:	f7ff f9b2 	bl	800b0e0 <vsscanf>
	va_end(ap);

	return rv;
}
 800bd7c:	b002      	add	sp, #8
 800bd7e:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd82:	b003      	add	sp, #12
 800bd84:	4770      	bx	lr
	...

0800bd88 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
 800bd88:	468c      	mov	ip, r1
 800bd8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8e:	4e4f      	ldr	r6, [pc, #316]	; (800becc <strntoumax+0x144>)
 800bd90:	4604      	mov	r4, r0
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f000 8090 	beq.w	800beb8 <strntoumax+0x130>
 800bd98:	f810 5b01 	ldrb.w	r5, [r0], #1
 800bd9c:	f1a5 0109 	sub.w	r1, r5, #9
 800bda0:	b2c9      	uxtb	r1, r1
 800bda2:	2917      	cmp	r1, #23
 800bda4:	f200 8084 	bhi.w	800beb0 <strntoumax+0x128>
 800bda8:	fa26 f101 	lsr.w	r1, r6, r1
 800bdac:	07cf      	lsls	r7, r1, #31
 800bdae:	d41d      	bmi.n	800bdec <strntoumax+0x64>
	}

	/* Single optional + or - */
	if (n) {
		char c = *nptr;
		if (c == '-' || c == '+') {
 800bdb0:	2d2b      	cmp	r5, #43	; 0x2b
 800bdb2:	d11d      	bne.n	800bdf0 <strntoumax+0x68>
			minus = (c == '-');
 800bdb4:	f1a5 012d 	sub.w	r1, r5, #45	; 0x2d
 800bdb8:	424d      	negs	r5, r1
 800bdba:	414d      	adcs	r5, r1
			nptr++;
 800bdbc:	3401      	adds	r4, #1
			n--;
 800bdbe:	3b01      	subs	r3, #1
		}
	}

	if (base == 0) {
 800bdc0:	bb0a      	cbnz	r2, 800be06 <strntoumax+0x7e>
		if (n >= 2 && nptr[0] == '0' &&
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d916      	bls.n	800bdf4 <strntoumax+0x6c>
 800bdc6:	7822      	ldrb	r2, [r4, #0]
 800bdc8:	2a30      	cmp	r2, #48	; 0x30
 800bdca:	d115      	bne.n	800bdf8 <strntoumax+0x70>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800bdcc:	7862      	ldrb	r2, [r4, #1]
 800bdce:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bdd2:	2a58      	cmp	r2, #88	; 0x58
 800bdd4:	d110      	bne.n	800bdf8 <strntoumax+0x70>
			n -= 2;
			nptr += 2;
			base = 16;
 800bdd6:	2210      	movs	r2, #16
			n -= 2;
 800bdd8:	3b02      	subs	r3, #2
			nptr += 2;
 800bdda:	3402      	adds	r4, #2
 800bddc:	46a0      	mov	r8, r4
 800bdde:	4423      	add	r3, r4
			base = 16;
 800bde0:	f04f 0a00 	mov.w	sl, #0
 800bde4:	f04f 0b00 	mov.w	fp, #0
			nptr += 2;
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
		v = v * base + d;
 800bde8:	17d7      	asrs	r7, r2, #31
 800bdea:	e026      	b.n	800be3a <strntoumax+0xb2>
		n--;
 800bdec:	3b01      	subs	r3, #1
 800bdee:	e7cf      	b.n	800bd90 <strntoumax+0x8>
	int minus = 0;
 800bdf0:	2500      	movs	r5, #0
 800bdf2:	e7e5      	b.n	800bdc0 <strntoumax+0x38>
		} else if (n >= 1 && nptr[0] == '0') {
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d04e      	beq.n	800be96 <strntoumax+0x10e>
 800bdf8:	7822      	ldrb	r2, [r4, #0]
 800bdfa:	2a30      	cmp	r2, #48	; 0x30
 800bdfc:	d13f      	bne.n	800be7e <strntoumax+0xf6>
			n--;
 800bdfe:	3b01      	subs	r3, #1
			nptr++;
 800be00:	3401      	adds	r4, #1
			base = 8;
 800be02:	2208      	movs	r2, #8
 800be04:	e7ea      	b.n	800bddc <strntoumax+0x54>
	} else if (base == 16) {
 800be06:	2a10      	cmp	r2, #16
 800be08:	d1e8      	bne.n	800bddc <strntoumax+0x54>
		if (n >= 2 && nptr[0] == '0' &&
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d9e6      	bls.n	800bddc <strntoumax+0x54>
 800be0e:	7821      	ldrb	r1, [r4, #0]
 800be10:	2930      	cmp	r1, #48	; 0x30
 800be12:	d1e3      	bne.n	800bddc <strntoumax+0x54>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
 800be14:	7861      	ldrb	r1, [r4, #1]
 800be16:	f001 01df 	and.w	r1, r1, #223	; 0xdf
 800be1a:	2958      	cmp	r1, #88	; 0x58
 800be1c:	d1de      	bne.n	800bddc <strntoumax+0x54>
			n -= 2;
 800be1e:	3b02      	subs	r3, #2
			nptr += 2;
 800be20:	3402      	adds	r4, #2
 800be22:	e7db      	b.n	800bddc <strntoumax+0x54>
		v = v * base + d;
 800be24:	fb02 f40b 	mul.w	r4, r2, fp
 800be28:	fba2 010a 	umull	r0, r1, r2, sl
 800be2c:	fb0a 4407 	mla	r4, sl, r7, r4
 800be30:	eb10 0a0e 	adds.w	sl, r0, lr
 800be34:	4421      	add	r1, r4
 800be36:	eb41 7bee 	adc.w	fp, r1, lr, asr #31
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
 800be3a:	4598      	cmp	r8, r3
 800be3c:	4644      	mov	r4, r8
 800be3e:	d012      	beq.n	800be66 <strntoumax+0xde>
 800be40:	f818 9b01 	ldrb.w	r9, [r8], #1
	if (ch >= '0' && ch <= '9') {
 800be44:	f1a9 0e30 	sub.w	lr, r9, #48	; 0x30
 800be48:	f1be 0f09 	cmp.w	lr, #9
 800be4c:	d906      	bls.n	800be5c <strntoumax+0xd4>
	} else if (ch >= 'A' && ch <= 'Z') {
 800be4e:	f1a9 0e41 	sub.w	lr, r9, #65	; 0x41
 800be52:	f1be 0f19 	cmp.w	lr, #25
 800be56:	d816      	bhi.n	800be86 <strntoumax+0xfe>
		return ch - 'A' + 10;
 800be58:	f1a9 0e37 	sub.w	lr, r9, #55	; 0x37
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
 800be5c:	f1be 0f00 	cmp.w	lr, #0
 800be60:	db01      	blt.n	800be66 <strntoumax+0xde>
 800be62:	4572      	cmp	r2, lr
 800be64:	dcde      	bgt.n	800be24 <strntoumax+0x9c>
		n--;
		nptr++;
	}

	if (endptr)
 800be66:	f1bc 0f00 	cmp.w	ip, #0
 800be6a:	d11e      	bne.n	800beaa <strntoumax+0x122>
		*endptr = (char *)nptr;

	return minus ? -v : v;
 800be6c:	b11d      	cbz	r5, 800be76 <strntoumax+0xee>
 800be6e:	f1da 0a00 	rsbs	sl, sl, #0
 800be72:	eb6b 0b4b 	sbc.w	fp, fp, fp, lsl #1
}
 800be76:	4650      	mov	r0, sl
 800be78:	4659      	mov	r1, fp
 800be7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			base = 10;
 800be7e:	220a      	movs	r2, #10
 800be80:	e7ac      	b.n	800bddc <strntoumax+0x54>
	int minus = 0;
 800be82:	461d      	mov	r5, r3
 800be84:	e7aa      	b.n	800bddc <strntoumax+0x54>
	} else if (ch >= 'a' && ch <= 'z') {
 800be86:	f1a9 0e61 	sub.w	lr, r9, #97	; 0x61
 800be8a:	f1be 0f19 	cmp.w	lr, #25
 800be8e:	d8ea      	bhi.n	800be66 <strntoumax+0xde>
		return ch - 'a' + 10;
 800be90:	f1a9 0e57 	sub.w	lr, r9, #87	; 0x57
 800be94:	e7e2      	b.n	800be5c <strntoumax+0xd4>
 800be96:	f04f 0a00 	mov.w	sl, #0
 800be9a:	f04f 0b00 	mov.w	fp, #0
 800be9e:	e7e2      	b.n	800be66 <strntoumax+0xde>
	int minus = 0;
 800bea0:	4615      	mov	r5, r2
	if (endptr)
 800bea2:	f04f 0a00 	mov.w	sl, #0
 800bea6:	f04f 0b00 	mov.w	fp, #0
		*endptr = (char *)nptr;
 800beaa:	f8cc 4000 	str.w	r4, [ip]
 800beae:	e7dd      	b.n	800be6c <strntoumax+0xe4>
		if (c == '-' || c == '+') {
 800beb0:	2d2d      	cmp	r5, #45	; 0x2d
 800beb2:	f43f af7f 	beq.w	800bdb4 <strntoumax+0x2c>
 800beb6:	e77b      	b.n	800bdb0 <strntoumax+0x28>
	if (base == 0) {
 800beb8:	2a00      	cmp	r2, #0
 800beba:	d1e2      	bne.n	800be82 <strntoumax+0xfa>
	if (endptr)
 800bebc:	f1bc 0f00 	cmp.w	ip, #0
 800bec0:	d1ee      	bne.n	800bea0 <strntoumax+0x118>
 800bec2:	f04f 0a00 	mov.w	sl, #0
 800bec6:	f04f 0b00 	mov.w	fp, #0
 800beca:	e7d4      	b.n	800be76 <strntoumax+0xee>
 800becc:	00800013 	.word	0x00800013

0800bed0 <vsprintf>:
#include <unistd.h>
#include <stdint.h>

int vsprintf(char *buffer, const char *format, va_list ap)
{
	return vsnprintf(buffer, SIZE_MAX/2, format, ap);
 800bed0:	4613      	mov	r3, r2
 800bed2:	460a      	mov	r2, r1
 800bed4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bed8:	f7fb bca2 	b.w	8007820 <vsnprintf>

0800bedc <__aeabi_uldivmod>:
 800bedc:	b953      	cbnz	r3, 800bef4 <__aeabi_uldivmod+0x18>
 800bede:	b94a      	cbnz	r2, 800bef4 <__aeabi_uldivmod+0x18>
 800bee0:	2900      	cmp	r1, #0
 800bee2:	bf08      	it	eq
 800bee4:	2800      	cmpeq	r0, #0
 800bee6:	bf1c      	itt	ne
 800bee8:	f04f 31ff 	movne.w	r1, #4294967295
 800beec:	f04f 30ff 	movne.w	r0, #4294967295
 800bef0:	f000 b974 	b.w	800c1dc <__aeabi_idiv0>
 800bef4:	f1ad 0c08 	sub.w	ip, sp, #8
 800bef8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800befc:	f000 f806 	bl	800bf0c <__udivmoddi4>
 800bf00:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bf04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf08:	b004      	add	sp, #16
 800bf0a:	4770      	bx	lr

0800bf0c <__udivmoddi4>:
 800bf0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf10:	468c      	mov	ip, r1
 800bf12:	4604      	mov	r4, r0
 800bf14:	9e08      	ldr	r6, [sp, #32]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d14b      	bne.n	800bfb2 <__udivmoddi4+0xa6>
 800bf1a:	428a      	cmp	r2, r1
 800bf1c:	4615      	mov	r5, r2
 800bf1e:	d967      	bls.n	800bff0 <__udivmoddi4+0xe4>
 800bf20:	fab2 f282 	clz	r2, r2
 800bf24:	b14a      	cbz	r2, 800bf3a <__udivmoddi4+0x2e>
 800bf26:	f1c2 0720 	rsb	r7, r2, #32
 800bf2a:	fa01 f302 	lsl.w	r3, r1, r2
 800bf2e:	fa20 f707 	lsr.w	r7, r0, r7
 800bf32:	4095      	lsls	r5, r2
 800bf34:	ea47 0c03 	orr.w	ip, r7, r3
 800bf38:	4094      	lsls	r4, r2
 800bf3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800bf3e:	fbbc f7fe 	udiv	r7, ip, lr
 800bf42:	fa1f f885 	uxth.w	r8, r5
 800bf46:	fb0e c317 	mls	r3, lr, r7, ip
 800bf4a:	fb07 f908 	mul.w	r9, r7, r8
 800bf4e:	0c21      	lsrs	r1, r4, #16
 800bf50:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bf54:	4599      	cmp	r9, r3
 800bf56:	d909      	bls.n	800bf6c <__udivmoddi4+0x60>
 800bf58:	18eb      	adds	r3, r5, r3
 800bf5a:	f107 31ff 	add.w	r1, r7, #4294967295
 800bf5e:	f080 811c 	bcs.w	800c19a <__udivmoddi4+0x28e>
 800bf62:	4599      	cmp	r9, r3
 800bf64:	f240 8119 	bls.w	800c19a <__udivmoddi4+0x28e>
 800bf68:	3f02      	subs	r7, #2
 800bf6a:	442b      	add	r3, r5
 800bf6c:	eba3 0309 	sub.w	r3, r3, r9
 800bf70:	fbb3 f0fe 	udiv	r0, r3, lr
 800bf74:	fb0e 3310 	mls	r3, lr, r0, r3
 800bf78:	fb00 f108 	mul.w	r1, r0, r8
 800bf7c:	b2a4      	uxth	r4, r4
 800bf7e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800bf82:	42a1      	cmp	r1, r4
 800bf84:	d909      	bls.n	800bf9a <__udivmoddi4+0x8e>
 800bf86:	192c      	adds	r4, r5, r4
 800bf88:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf8c:	f080 8107 	bcs.w	800c19e <__udivmoddi4+0x292>
 800bf90:	42a1      	cmp	r1, r4
 800bf92:	f240 8104 	bls.w	800c19e <__udivmoddi4+0x292>
 800bf96:	3802      	subs	r0, #2
 800bf98:	442c      	add	r4, r5
 800bf9a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800bf9e:	2700      	movs	r7, #0
 800bfa0:	1a64      	subs	r4, r4, r1
 800bfa2:	b11e      	cbz	r6, 800bfac <__udivmoddi4+0xa0>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	40d4      	lsrs	r4, r2
 800bfa8:	e9c6 4300 	strd	r4, r3, [r6]
 800bfac:	4639      	mov	r1, r7
 800bfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb2:	428b      	cmp	r3, r1
 800bfb4:	d909      	bls.n	800bfca <__udivmoddi4+0xbe>
 800bfb6:	2e00      	cmp	r6, #0
 800bfb8:	f000 80ec 	beq.w	800c194 <__udivmoddi4+0x288>
 800bfbc:	2700      	movs	r7, #0
 800bfbe:	e9c6 0100 	strd	r0, r1, [r6]
 800bfc2:	4638      	mov	r0, r7
 800bfc4:	4639      	mov	r1, r7
 800bfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfca:	fab3 f783 	clz	r7, r3
 800bfce:	2f00      	cmp	r7, #0
 800bfd0:	d148      	bne.n	800c064 <__udivmoddi4+0x158>
 800bfd2:	428b      	cmp	r3, r1
 800bfd4:	d302      	bcc.n	800bfdc <__udivmoddi4+0xd0>
 800bfd6:	4282      	cmp	r2, r0
 800bfd8:	f200 80fb 	bhi.w	800c1d2 <__udivmoddi4+0x2c6>
 800bfdc:	1a84      	subs	r4, r0, r2
 800bfde:	eb61 0303 	sbc.w	r3, r1, r3
 800bfe2:	2001      	movs	r0, #1
 800bfe4:	469c      	mov	ip, r3
 800bfe6:	2e00      	cmp	r6, #0
 800bfe8:	d0e0      	beq.n	800bfac <__udivmoddi4+0xa0>
 800bfea:	e9c6 4c00 	strd	r4, ip, [r6]
 800bfee:	e7dd      	b.n	800bfac <__udivmoddi4+0xa0>
 800bff0:	b902      	cbnz	r2, 800bff4 <__udivmoddi4+0xe8>
 800bff2:	deff      	udf	#255	; 0xff
 800bff4:	fab2 f282 	clz	r2, r2
 800bff8:	2a00      	cmp	r2, #0
 800bffa:	f040 808f 	bne.w	800c11c <__udivmoddi4+0x210>
 800bffe:	2701      	movs	r7, #1
 800c000:	1b49      	subs	r1, r1, r5
 800c002:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c006:	fa1f f985 	uxth.w	r9, r5
 800c00a:	fbb1 fef8 	udiv	lr, r1, r8
 800c00e:	fb08 111e 	mls	r1, r8, lr, r1
 800c012:	fb09 f00e 	mul.w	r0, r9, lr
 800c016:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800c01a:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 800c01e:	4298      	cmp	r0, r3
 800c020:	d907      	bls.n	800c032 <__udivmoddi4+0x126>
 800c022:	18eb      	adds	r3, r5, r3
 800c024:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c028:	d202      	bcs.n	800c030 <__udivmoddi4+0x124>
 800c02a:	4298      	cmp	r0, r3
 800c02c:	f200 80cd 	bhi.w	800c1ca <__udivmoddi4+0x2be>
 800c030:	468e      	mov	lr, r1
 800c032:	1a1b      	subs	r3, r3, r0
 800c034:	fbb3 f0f8 	udiv	r0, r3, r8
 800c038:	fb08 3310 	mls	r3, r8, r0, r3
 800c03c:	fb09 f900 	mul.w	r9, r9, r0
 800c040:	b2a4      	uxth	r4, r4
 800c042:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c046:	45a1      	cmp	r9, r4
 800c048:	d907      	bls.n	800c05a <__udivmoddi4+0x14e>
 800c04a:	192c      	adds	r4, r5, r4
 800c04c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c050:	d202      	bcs.n	800c058 <__udivmoddi4+0x14c>
 800c052:	45a1      	cmp	r9, r4
 800c054:	f200 80b6 	bhi.w	800c1c4 <__udivmoddi4+0x2b8>
 800c058:	4618      	mov	r0, r3
 800c05a:	eba4 0409 	sub.w	r4, r4, r9
 800c05e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800c062:	e79e      	b.n	800bfa2 <__udivmoddi4+0x96>
 800c064:	f1c7 0520 	rsb	r5, r7, #32
 800c068:	40bb      	lsls	r3, r7
 800c06a:	fa22 fc05 	lsr.w	ip, r2, r5
 800c06e:	ea4c 0c03 	orr.w	ip, ip, r3
 800c072:	fa21 f405 	lsr.w	r4, r1, r5
 800c076:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800c07a:	fbb4 f9fe 	udiv	r9, r4, lr
 800c07e:	fa1f f88c 	uxth.w	r8, ip
 800c082:	fb0e 4419 	mls	r4, lr, r9, r4
 800c086:	fa20 f305 	lsr.w	r3, r0, r5
 800c08a:	40b9      	lsls	r1, r7
 800c08c:	fb09 fa08 	mul.w	sl, r9, r8
 800c090:	4319      	orrs	r1, r3
 800c092:	0c0b      	lsrs	r3, r1, #16
 800c094:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800c098:	45a2      	cmp	sl, r4
 800c09a:	fa02 f207 	lsl.w	r2, r2, r7
 800c09e:	fa00 f307 	lsl.w	r3, r0, r7
 800c0a2:	d90b      	bls.n	800c0bc <__udivmoddi4+0x1b0>
 800c0a4:	eb1c 0404 	adds.w	r4, ip, r4
 800c0a8:	f109 30ff 	add.w	r0, r9, #4294967295
 800c0ac:	f080 8088 	bcs.w	800c1c0 <__udivmoddi4+0x2b4>
 800c0b0:	45a2      	cmp	sl, r4
 800c0b2:	f240 8085 	bls.w	800c1c0 <__udivmoddi4+0x2b4>
 800c0b6:	f1a9 0902 	sub.w	r9, r9, #2
 800c0ba:	4464      	add	r4, ip
 800c0bc:	eba4 040a 	sub.w	r4, r4, sl
 800c0c0:	fbb4 f0fe 	udiv	r0, r4, lr
 800c0c4:	fb0e 4410 	mls	r4, lr, r0, r4
 800c0c8:	fb00 fa08 	mul.w	sl, r0, r8
 800c0cc:	b289      	uxth	r1, r1
 800c0ce:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800c0d2:	45a2      	cmp	sl, r4
 800c0d4:	d908      	bls.n	800c0e8 <__udivmoddi4+0x1dc>
 800c0d6:	eb1c 0404 	adds.w	r4, ip, r4
 800c0da:	f100 31ff 	add.w	r1, r0, #4294967295
 800c0de:	d26b      	bcs.n	800c1b8 <__udivmoddi4+0x2ac>
 800c0e0:	45a2      	cmp	sl, r4
 800c0e2:	d969      	bls.n	800c1b8 <__udivmoddi4+0x2ac>
 800c0e4:	3802      	subs	r0, #2
 800c0e6:	4464      	add	r4, ip
 800c0e8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800c0ec:	fba0 8902 	umull	r8, r9, r0, r2
 800c0f0:	eba4 040a 	sub.w	r4, r4, sl
 800c0f4:	454c      	cmp	r4, r9
 800c0f6:	4641      	mov	r1, r8
 800c0f8:	46ce      	mov	lr, r9
 800c0fa:	d354      	bcc.n	800c1a6 <__udivmoddi4+0x29a>
 800c0fc:	d051      	beq.n	800c1a2 <__udivmoddi4+0x296>
 800c0fe:	2e00      	cmp	r6, #0
 800c100:	d069      	beq.n	800c1d6 <__udivmoddi4+0x2ca>
 800c102:	1a5a      	subs	r2, r3, r1
 800c104:	eb64 040e 	sbc.w	r4, r4, lr
 800c108:	fa04 f505 	lsl.w	r5, r4, r5
 800c10c:	fa22 f307 	lsr.w	r3, r2, r7
 800c110:	40fc      	lsrs	r4, r7
 800c112:	431d      	orrs	r5, r3
 800c114:	e9c6 5400 	strd	r5, r4, [r6]
 800c118:	2700      	movs	r7, #0
 800c11a:	e747      	b.n	800bfac <__udivmoddi4+0xa0>
 800c11c:	4095      	lsls	r5, r2
 800c11e:	f1c2 0320 	rsb	r3, r2, #32
 800c122:	fa21 f003 	lsr.w	r0, r1, r3
 800c126:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c12a:	fbb0 f7f8 	udiv	r7, r0, r8
 800c12e:	fa1f f985 	uxth.w	r9, r5
 800c132:	fb08 0017 	mls	r0, r8, r7, r0
 800c136:	fa24 f303 	lsr.w	r3, r4, r3
 800c13a:	4091      	lsls	r1, r2
 800c13c:	fb07 fc09 	mul.w	ip, r7, r9
 800c140:	430b      	orrs	r3, r1
 800c142:	0c19      	lsrs	r1, r3, #16
 800c144:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c148:	458c      	cmp	ip, r1
 800c14a:	fa04 f402 	lsl.w	r4, r4, r2
 800c14e:	d907      	bls.n	800c160 <__udivmoddi4+0x254>
 800c150:	1869      	adds	r1, r5, r1
 800c152:	f107 30ff 	add.w	r0, r7, #4294967295
 800c156:	d231      	bcs.n	800c1bc <__udivmoddi4+0x2b0>
 800c158:	458c      	cmp	ip, r1
 800c15a:	d92f      	bls.n	800c1bc <__udivmoddi4+0x2b0>
 800c15c:	3f02      	subs	r7, #2
 800c15e:	4429      	add	r1, r5
 800c160:	eba1 010c 	sub.w	r1, r1, ip
 800c164:	fbb1 f0f8 	udiv	r0, r1, r8
 800c168:	fb08 1c10 	mls	ip, r8, r0, r1
 800c16c:	fb00 fe09 	mul.w	lr, r0, r9
 800c170:	b299      	uxth	r1, r3
 800c172:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800c176:	458e      	cmp	lr, r1
 800c178:	d907      	bls.n	800c18a <__udivmoddi4+0x27e>
 800c17a:	1869      	adds	r1, r5, r1
 800c17c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c180:	d218      	bcs.n	800c1b4 <__udivmoddi4+0x2a8>
 800c182:	458e      	cmp	lr, r1
 800c184:	d916      	bls.n	800c1b4 <__udivmoddi4+0x2a8>
 800c186:	3802      	subs	r0, #2
 800c188:	4429      	add	r1, r5
 800c18a:	eba1 010e 	sub.w	r1, r1, lr
 800c18e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800c192:	e73a      	b.n	800c00a <__udivmoddi4+0xfe>
 800c194:	4637      	mov	r7, r6
 800c196:	4630      	mov	r0, r6
 800c198:	e708      	b.n	800bfac <__udivmoddi4+0xa0>
 800c19a:	460f      	mov	r7, r1
 800c19c:	e6e6      	b.n	800bf6c <__udivmoddi4+0x60>
 800c19e:	4618      	mov	r0, r3
 800c1a0:	e6fb      	b.n	800bf9a <__udivmoddi4+0x8e>
 800c1a2:	4543      	cmp	r3, r8
 800c1a4:	d2ab      	bcs.n	800c0fe <__udivmoddi4+0x1f2>
 800c1a6:	ebb8 0102 	subs.w	r1, r8, r2
 800c1aa:	eb69 020c 	sbc.w	r2, r9, ip
 800c1ae:	3801      	subs	r0, #1
 800c1b0:	4696      	mov	lr, r2
 800c1b2:	e7a4      	b.n	800c0fe <__udivmoddi4+0x1f2>
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	e7e8      	b.n	800c18a <__udivmoddi4+0x27e>
 800c1b8:	4608      	mov	r0, r1
 800c1ba:	e795      	b.n	800c0e8 <__udivmoddi4+0x1dc>
 800c1bc:	4607      	mov	r7, r0
 800c1be:	e7cf      	b.n	800c160 <__udivmoddi4+0x254>
 800c1c0:	4681      	mov	r9, r0
 800c1c2:	e77b      	b.n	800c0bc <__udivmoddi4+0x1b0>
 800c1c4:	3802      	subs	r0, #2
 800c1c6:	442c      	add	r4, r5
 800c1c8:	e747      	b.n	800c05a <__udivmoddi4+0x14e>
 800c1ca:	f1ae 0e02 	sub.w	lr, lr, #2
 800c1ce:	442b      	add	r3, r5
 800c1d0:	e72f      	b.n	800c032 <__udivmoddi4+0x126>
 800c1d2:	4638      	mov	r0, r7
 800c1d4:	e707      	b.n	800bfe6 <__udivmoddi4+0xda>
 800c1d6:	4637      	mov	r7, r6
 800c1d8:	e6e8      	b.n	800bfac <__udivmoddi4+0xa0>
 800c1da:	bf00      	nop

0800c1dc <__aeabi_idiv0>:
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop

0800c1e0 <__aeabi_memcpy>:
 800c1e0:	f7fb b8a2 	b.w	8007328 <memcpy>

0800c1e4 <AHBPrescTable>:
	...
 800c1ec:	0201 0403 0706 0908                         ........

0800c1f4 <APBPrescTable>:
 800c1f4:	0000 0000 0201 0403 203a 0000 c1fc 0800     ........: ......
 800c204:	0000 0000 c1fc 0800 0002 0000 7273 2f63     ............src/
 800c214:	696c 6362 726f 2f65 6572 7573 746c 722e     libcore/result.r
 800c224:	0073 0000 c210 0800 0015 0000 03e7 0000     s...............
 800c234:	0005 0000 6e6f 735f 6174 7472 740a 6d65     ....on_start.tem
 800c244:	5f70 7473 336d 5f32 0030 0000 0000 0000     p_stm32_0.......
 800c254:	c241 0800 000d 0000 0074 0000 0000 0000     A.......t.......
 800c264:	c25c 0800 0002 0000 6e6f 735f 6174 7472     \.......on_start
 800c274:	6620 6961 676c 7465 6620 6961 726c 6e75      failget failrun
 800c284:	6620 6961 206c 696c 656e 3020 7078 6e61      fail line 0xpan
 800c294:	6369 6e20 206f 6f6c 0a63 7461 0a20 7473     ic no loc.at .st
 800c2a4:	7261 5f74 6573 736e 726f 6c5f 7369 6574     art_sensor_liste
 800c2b4:	656e 0a72 6168 646e 656c 735f 6e65 6f73     ner.handle_senso
 800c2c4:	5f72 6164 6174 730a 6e65 5f64 6573 736e     r_data.send_sens
 800c2d4:	726f 645f 7461 0a61 0000 0000 0000 0000     or_data.........
 800c2e4:	c2dc 0800 0001 0000 6176 756c 7365 4300     ........values.C
 800c2f4:	414f 5f50 4f43 544e 5845 0054 656b 0079     OAP_CONTEXT.key.
 800c304:	6564 6976 6563 7600 6c61 6575 6b00 7965     device.value.key
 800c314:	6176 756c 5665 6569 2077 6f79 7275 7320     valueView your s
 800c324:	6e65 6f73 2072 7461 6820 7474 7370 2f3a     ensor at https:/
 800c334:	622f 756c 2d65 6970 6c6c 672d 6f65 6f6c     /blue-pill-geolo
 800c344:	6163 6574 612e 7070 7073 746f 632e 6d6f     cate.appspot.com
 800c354:	643f 7665 6369 3d65 7361 6573 7472 6f69     ?device=assertio
 800c364:	206e 6166 6c69 6465 203a 2860 656c 7466     n failed: `(left
 800c374:	3d20 203d 6972 6867 2974 0a60 2020 656c      == right)`.  le
 800c384:	7466 203a 6060 0a2c 7220 6769 7468 203a     ft: ``,. right: 
 800c394:	6060 203a c35c 0800 002d 0000 c389 0800     ``: \...-.......
 800c3a4:	000c 0000 c395 0800 0003 0000 203a 0000     ............: ..
 800c3b4:	c3b0 0800 0000 0000 c3b0 0800 0002 0000     ................
 800c3c4:	7273 2f63 696c 6362 726f 2f65 6572 7573     src/libcore/resu
 800c3d4:	746c 722e 0073 0000 c3c4 0800 0015 0000     lt.rs...........
 800c3e4:	03e7 0000 0005 0000 6f53 656d 6f4e 656e     ........SomeNone
 800c3f4:	0000 0000 6d5f 7061 6f72 746f 179d 0800     ...._maproot....
 800c404:	0004 0000 0004 0000 1755 0800 0000 0000     ........U.......
 800c414:	0000 0000 6e65 2063 6166 6c69 6962 2067     ....enc failbig 
 800c424:	7473 6e72 6572 2067 696c 0073 c428 0800     strnreg lis.(...
 800c434:	0007 0000 7572 7473 6d5c 6e79 7765 5c74     ....rust\mynewt\
 800c444:	7273 5c63 7768 735c 6e65 6f73 2e72 7372     src\hw\sensor.rs
 800c454:	c438 0800 001c 0000 004b 0000 000e 0000     8.......K.......
 800c464:	696d 7373 6e69 2067 6573 736e 726f 6b20     missing sensor k
 800c474:	7965 0000 c464 0800 0012 0000 c438 0800     ey..d.......8...
 800c484:	001c 0000 005c 0000 0005 0000 6e69 7263     ....\.......incr
 800c494:	6165 6573 4d20 5841 535f 4e45 4f53 5f52     ease MAX_SENSOR_
 800c4a4:	494c 5453 4e45 5245 0053 0000 c490 0800     LISTENERS.......
 800c4b4:	001d 0000 c438 0800 001c 0000 0066 0000     ....8.......f...
 800c4c4:	0005 0000 6162 2064 6573 736e 726f 6120     ....bad sensor a
 800c4d4:	6772 0000 c4c8 0800 000e 0000 c438 0800     rg..........8...
 800c4e4:	001c 0000 007e 0000 0005 0000 c464 0800     ....~.......d...
 800c4f4:	0012 0000 c438 0800 001c 0000 0080 0000     ....8...........
 800c504:	0005 0000 756e 6c6c 7320 6e65 6f73 0072     ....null sensor.
 800c514:	c508 0800 000b 0000 c438 0800 001c 0000     ........8.......
 800c524:	0084 0000 0005 0000 6573 736e 726f 6c20     ........sensor l
 800c534:	7369 6574 656e 2072 6166 6c69 7300 6e65     istener fail.sen
 800c544:	6f73 2072 7974 6570 c541 0800 000b 0000     sor typeA.......
 800c554:	c438 0800 001c 0000 00b6 0000 0014 0000     8...............
 800c564:	6172 7477 706d 6620 6961 006c c564 0800     rawtmp fail.d...
 800c574:	000b 0000 c438 0800 001c 0000 00af 0000     ....8...........
 800c584:	0011 0000 7361 6573 7472 6f69 206e 6166     ....assertion fa
 800c594:	6c69 6465 203a 2860 656c 7466 2120 203d     iled: `(left != 
 800c5a4:	6972 6867 2974 0a60 2020 656c 7466 203a     right)`.  left: 
 800c5b4:	0060 0000 c588 0800 002d 0000 c389 0800     `.......-.......
 800c5c4:	000c 0000 c395 0800 0003 0000 6162 2064     ............bad 
 800c5d4:	6172 7477 706d 0000 c5d0 0800 000a 0000     rawtmp..........
 800c5e4:	c438 0800 001c 0000 00b1 0000 0011 0000     8...............
 800c5f4:	c540 0800 6962 2067 656b 7279 7375 5c74     @...big keyrust\
 800c604:	796d 656e 7477 735c 6372 655c 636e 646f     mynewt\src\encod
 800c614:	6e69 5c67 6f63 7061 635f 6e6f 6574 7478     ing\coap_context
 800c624:	722e 0073 c5f8 0800 0007 0000 c5ff 0800     .rs.............
 800c634:	0028 0000 003d 0000 0009 0000 6962 2067     (...=.......big 
 800c644:	6176 756c 0065 0000 c640 0800 0009 0000     value...@.......
 800c654:	c5ff 0800 0028 0000 004a 0000 0009 0000     ....(...J.......
 800c664:	c418 0800 0008 0000 c5ff 0800 0028 0000     ............(...
 800c674:	007d 0000 0009 0000 7473 6e72 6220 7479     }.......strn byt
 800c684:	7365 0000 c67c 0800 000a 0000 c5ff 0800     es..|...........
 800c694:	0028 0000 00bc 0000 0028 0000 6f6e 6e20     (.......(...no n
 800c6a4:	6c75 006c c6a0 0800 0007 0000 7572 7473     ull.........rust
 800c6b4:	6d5c 6e79 7765 5c74 7273 5c63 696c 2e62     \mynewt\src\lib.
 800c6c4:	7372 0000 c6b0 0800 0016 0000 0078 0000     rs..........x...
 800c6d4:	0009 0000 c420 0800 0008 0000 c6b0 0800     .... ...........
 800c6e4:	0016 0000 009b 0000 0011 0000 c6b0 0800     ................
 800c6f4:	0016 0000 0091 0000 0011 0000 c6b0 0800     ................
 800c704:	0016 0000 00c5 0000 0011 0000 4156 554c     ............VALU
 800c714:	5f45 4f4e 5f54 4955 544e 4b4f 5953 5f53     E_NOT_UINTOKSYS_
 800c724:	5045 5245 5355 5245 5953 5f53 4445 4e4f     EPERUSERSYS_EDON
 800c734:	5345 5359 455f 4552 4f4d 4554 4f49 5953     ESYS_EREMOTEIOSY
 800c744:	5f53 5545 4b4e 4f4e 4e57 5953 5f53 4e45     S_EUNKNOWNSYS_EN
 800c754:	544f 5553 5350 5359 455f 4c41 4552 4441     OTSUPSYS_EALREAD
 800c764:	5359 5359 455f 4152 474e 5345 5359 455f     YSYS_ERANGESYS_E
 800c774:	4f4e 4544 5356 5359 455f 5542 5953 5953     NODEVSYS_EBUSYSY
 800c784:	5f53 4145 4343 5345 5953 5f53 4145 4147     S_EACCESSYS_EAGA
 800c794:	4e49 5953 5f53 4945 534f 5359 455f 4f4e     INSYS_EIOSYS_ENO
 800c7a4:	4e45 5354 5359 455f 4954 454d 554f 5354     ENTSYS_ETIMEOUTS
 800c7b4:	5359 455f 4e49 4156 534c 5359 455f 4f4e     YS_EINVALSYS_ENO
 800c7c4:	454d 534d 5359 455f 4b4f 0060 7273 2f63     MEMSYS_EOK`.src/
 800c7d4:	696c 6362 726f 2f65 756e 2f6d 6564 3263     libcore/num/dec2
 800c7e4:	6c66 2f74 6172 6677 2e70 7372 6e69 6564     flt/rawfp.rsinde
 800c7f4:	2078 756f 2074 666f 6220 756f 646e 3a73     x out of bounds:
 800c804:	7420 6568 6c20 6e65 6920 2073 3e00 0000      the len is .>..
 800c814:	0001 0000 0000 0000 0000 0000 0020 0000     ............ ...
 800c824:	0000 0000 c000 0000 0300 0000 2e2e 0000     ................
 800c834:	c830 0800 0002 0000 0000 0000 6c61 6572     0...........alre
 800c844:	6461 2079 6f62 7272 776f 6465 2029 6877     ady borrowed) wh
 800c854:	6e65 7320 696c 6963 676e 6020 ffff ffff     en slicing `....
	...
 800c86c:	0000 8000 6843 7261 7254 4679 6f72 456d     ....CharTryFromE
 800c87c:	7272 726f 6544 6f63 6564 7455 3166 4536     rrorDecodeUtf16E
 800c88c:	7272 726f 21ef 0800 0000 0000 0001 0000     rror.!..........
 800c89c:	223f 0800 6220 7475 7420 6568 6920 646e     ?".. but the ind
 800c8ac:	7865 6920 2073 0000 c7f0 0800 0020 0000     ex is ...... ...
 800c8bc:	c8a0 0800 0012 0000 7469 7265 7449 7265     ........iterIter
 800c8cc:	3c20 203d 2020 2020 7274 6575 6164 6174      <=     truedata
 800c8dc:	616d 746e 6c70 7375 655a 6f72 6f43 7970     mantplusZeroCopy
 800c8ec:	696b 646e 654c 7373 6f63 6564 7954 6570     kindLesscodeType
 800c8fc:	6f44 656e 6843 7261 6966 656c 696c 656e     DoneCharfileline
 800c90c:	6142 6b63 6f42 6874 6f53 656d 6f4e 656e     BackBothSomeNone
 800c91c:	7449 6d65 6174 6c69 654c 7466 6177 656b     ItemtailLeftwake
 800c92c:	7264 706f 3875 3278 3869 3278 3875 3478     dropu8x2i8x2u8x4
 800c93c:	3869 3478 3875 3878 3869 3878 6163 6c6c     i8x4u8x8i8x8call
 800c94c:	6465 6020 704f 6974 6e6f 3a3a 6e75 7277     ed `Option::unwr
 800c95c:	7061 2928 2060 6e6f 6120 6020 6f4e 656e     ap()` on a `None
 800c96c:	2060 6176 756c 7365 6372 6c2f 6269 6f63     ` valuesrc/libco
 800c97c:	6572 6f2f 7470 6f69 2e6e 7372 c948 0800     re/option.rsH...
 800c98c:	002b 0000 c973 0800 0015 0000 015b 0000     +...s.......[...
 800c99c:	0015 0000 7273 2f63 696c 6362 726f 2f65     ....src/libcore/
 800c9ac:	6c73 6369 2f65 6f6d 2e64 7372 6e69 6564     slice/mod.rsinde
 800c9bc:	2078 6f20 7475 6f20 2066 6172 676e 2065     x  out of range 
 800c9cc:	6f66 2072 6c73 6369 2065 666f 6c20 6e65     for slice of len
 800c9dc:	7467 2068 c9b8 0800 0006 0000 c9be 0800     gth ............
 800c9ec:	0022 0000 c9a0 0800 0018 0000 0a09 0000     "...............
 800c9fc:	0005 0000 6c73 6369 2065 6e69 6564 2078     ....slice index 
 800ca0c:	7473 7261 7374 6120 2074 6220 7475 6520     starts at  but e
 800ca1c:	646e 2073 7461 0020 ca00 0800 0016 0000     nds at .........
 800ca2c:	ca16 0800 000d 0000 c9a0 0800 0018 0000     ................
 800ca3c:	0a0f 0000 0005 0000 6966 696e 6873 6465     ........finished
 800ca4c:	6168 7379 6174 6b63 2820 7962 6574 2073     haystack (bytes 
 800ca5c:	6e49 6966 696e 6574 694d 756e 5273 7761     InfiniteMinusRaw
 800ca6c:	654e 6167 6974 6576 6f50 6973 6974 6576     NegativePositive
 800ca7c:	6e69 6574 7267 6c61 764f 7265 6c66 776f     integralOverflow
 800ca8c:	6f6c 6163 6974 6e6f 6f4c 6163 6974 6e6f     locationLocation
 800ca9c:	6162 6b63 7469 7265 6e49 6f74 7449 7265     backiterIntoIter
 800caac:	6573 7261 6863 7265 6f70 6973 6974 6e6f     searcherposition
 800cabc:	7263 7469 705f 736f 694c 656e 4173 796e     crit_posLinesAny
 800cacc:	6152 5777 6b61 7265 6c41 6f6c 4563 7272     RawWakerAllocErr
 800cadc:	6e55 6170 6b63 6465 7273 2f63 696c 6362     Unpackedsrc/libc
 800caec:	726f 2f65 7473 2f72 6f6d 2e64 7372 2e5b     ore/str/mod.rs[.
 800cafc:	2e2e 625d 7479 2065 6e69 6564 2078 6920     ..]byte index  i
 800cb0c:	2073 756f 2074 666f 6220 756f 646e 2073     s out of bounds 
 800cb1c:	666f 6020 caff 0800 000b 0000 cb0a 0800     of `............
 800cb2c:	0016 0000 c7ce 0800 0001 0000 cae4 0800     ................
 800cb3c:	0016 0000 07e1 0000 0009 0000 6562 6967     ............begi
 800cb4c:	206e 3d3c 6520 646e 2820 0000 cb48 0800     n <= end (..H...
 800cb5c:	000e 0000 c8cc 0800 0004 0000 c850 0800     ............P...
 800cb6c:	0010 0000 c7ce 0800 0001 0000 cae4 0800     ................
 800cb7c:	0016 0000 07e5 0000 0005 0000 6920 2073     ............ is 
 800cb8c:	6f6e 2074 2061 6863 7261 6220 756f 646e     not a char bound
 800cb9c:	7261 3b79 6920 2074 7369 6920 736e 6469     ary; it is insid
 800cbac:	2065 2029 666f 6020 caff 0800 000b 0000     e ) of `........
 800cbbc:	cb88 0800 0026 0000 ca54 0800 0008 0000     ....&...T.......
 800cbcc:	cbae 0800 0006 0000 c7ce 0800 0001 0000     ................
 800cbdc:	cae4 0800 0016 0000 07f2 0000 0005 0000     ................
 800cbec:	7830 3030 3130 3230 3330 3430 3530 3630     0x00010203040506
 800cbfc:	3730 3830 3930 3031 3131 3231 3331 3431     0708091011121314
 800cc0c:	3531 3631 3731 3831 3931 3032 3132 3232     1516171819202122
 800cc1c:	3332 3432 3532 3632 3732 3832 3932 3033     2324252627282930
 800cc2c:	3133 3233 3333 3433 3533 3633 3733 3833     3132333435363738
 800cc3c:	3933 3034 3134 3234 3334 3434 3534 3634     3940414243444546
 800cc4c:	3734 3834 3934 3035 3135 3235 3335 3435     4748495051525354
 800cc5c:	3535 3635 3735 3835 3935 3036 3136 3236     5556575859606162
 800cc6c:	3336 3436 3536 3636 3736 3836 3936 3037     6364656667686970
 800cc7c:	3137 3237 3337 3437 3537 3637 3737 3837     7172737475767778
 800cc8c:	3937 3038 3138 3238 3338 3438 3538 3638     7980818283848586
 800cc9c:	3738 3838 3938 3039 3139 3239 3339 3439     8788899091929394
 800ccac:	3539 3639 3739 3839 3939 0000 21ed 0800     9596979899...!..
 800ccbc:	000c 0000 0004 0000 2899 0800 2b35 0800     .........(..5+..
 800cccc:	2bcb 0800 0a2c 202c 0a28 2c28 0029 0000     .+..,., (.(,)...
 800ccdc:	21eb 0800 0004 0000 0004 0000 2bef 0800     .!...........+..
 800ccec:	2bf5 0800 2bfb 0800 0000 0000 0000 0000     .+...+..........
 800ccfc:	0000 0000                                   ....

0800cd00 <str.h>:
 800cd00:	7273 2f63 696c 6362 726f 2f65 6d66 2f74     src/libcore/fmt/
 800cd10:	6f6d 2e64 7372 0000 cd00 0800 0016 0000     mod.rs..........
 800cd20:	0448 0000 0028 0000 cd00 0800 0016 0000     H...(...........
 800cd30:	0454 0000 0011 0000 0000 0000 0000 0000     T...............

0800cd40 <str.j>:
 800cd40:	7273 2f63 696c 6362 726f 2f65 6e75 6369     src/libcore/unic
 800cd50:	646f 2f65 6f62 6c6f 745f 6972 2e65 7372     ode/bool_trie.rs
 800cd60:	cd40 0800 0020 0000 0027 0000 0019 0000     @... ...'.......
 800cd70:	cd40 0800 0020 0000 0028 0000 0020 0000     @... ...(... ...
 800cd80:	cd40 0800 0020 0000 002a 0000 0019 0000     @... ...*.......
 800cd90:	cd40 0800 0020 0000 002b 0000 0018 0000     @... ...+.......
 800cda0:	cd40 0800 0020 0000 002c 0000 0020 0000     @... ...,... ...
 800cdb0:	0100 0503 0605 0306 0607 0808 1109 1c0a     ................
 800cdc0:	190b 140c 120d 160e 040f 0310 1212 0913     ................
 800cdd0:	0116 0517 0218 0319 071a 021c 011d 161f     ................
 800cde0:	0320 062b 022c 0b2d 012e 0330 0231 0232      .+.,.-...0.1.2.
 800cdf0:	02a9 04aa 08ab 02fa 05fb 04fd 03fe 09ff     ................
 800ce00:	78ad 8b79 a28d 5730 8b58 908c 1d1c 0edd     .xy...0WX.......
 800ce10:	4b0f fb4c 2efc 3f2f 5d5c b55f 84e2 8e8d     .KL.../?\]_.....
 800ce20:	9291 b1a9 bbba c6c5 cac9 e4de ffe5 0400     ................
 800ce30:	1211 3129 3734 3b3a 493d 5d4a 8e84 a992     ..)147:;=IJ]....
 800ce40:	b4b1 bbba cac6 cfce e5e4 0400 0e0d 1211     ................
 800ce50:	3129 3a34 453b 4946 5e4a 6564 9184 9d9b     )14:;EFIJ^de....
 800ce60:	cec9 0dcf 2911 4945 6457 8d65 a991 bab4     .....)EIWde.....
 800ce70:	c5bb dfc9 e5e4 04f0 110d 4945 6564 8180     ..........EIde..
 800ce80:	b284 bebc d5bf f0d7 83f1 8685 8b89 988c     ................
 800ce90:	a4a0 a8a6 aca9 beba c5bf cec7 dacf 48db     ...............H
 800cea0:	bd98 c6cd cfce 4e49 574f 5e59 895f 8f8e     ......INOWY^_...
 800ceb0:	b6b1 bfb7 c6c1 d7c7 1611 5b17 f65c fef7     ...........[\...
 800cec0:	80ff 6d0d de71 0edf 1f0f 6f6e 1d1c 7d5f     ...mq.....no.._}
 800ced0:	ae7e bbaf fabc 1716 1f1e 4746 4f4e 5a58     ~.........FGNOXZ
 800cee0:	5e5c 7f7e c5b5 d5d4 f0dc f5f1 7372 748f     \^~.........rs.t
 800cef0:	9675 c997 2fff 265f 2f2e afa7 bfb7 cfc7     u..../_&./......
 800cf00:	dfd7 409a 9897 8f30 ff1f ffce 4f4e 5b5a     ...@..0.....NOZ[
 800cf10:	0807 100f 2f27 efee 6f6e 3d37 423f 9045     ....'/..no7=?BE.
 800cf20:	fe91 53ff 7567 c9c8 d1d0 d9d8 fee7 00ff     ...Sgu..........
 800cf30:	5f20 8222 04df 4482 1b08 0604 8111 0eac      _"....D........
 800cf40:	ab80 1e35 8015 03e0 0819 0401 042f 0434     ..5........./.4.
 800cf50:	0307 0701 0706 0a11 0f50 0712 0855 0402     ........P...U...
 800cf60:	0a1c 0309 0308 0307 0302 0303 040c 0305     ................
 800cf70:	060b 0e01 0515 033a 0711 0506 0810 0756     ......:.......V.
 800cf80:	0702 0d15 0450 0343 032d 0401 0611 0c0f     ....P.C.-.......
 800cf90:	043a 251d 060d 204c 046d 256a c880 8205     :..%..L m.j%....
 800cfa0:	03b0 061a fd82 5903 1507 170b 1409 140c     .......Y........
 800cfb0:	6a0c 0a06 1a06 5906 2b07 4605 2c0a 0c04     .j.....Y.+.F.,..
 800cfc0:	0104 3103 2c0b 1a04 0b06 8003 06ac 060a     ...1.,..........
 800cfd0:	411f 044c 032d 0874 033c 030f 073c 0838     .AL.-.t.<...<.8.
 800cfe0:	062a ff82 1811 2f08 2d11 2003 2110 800f     *....../.-. .!..
 800cff0:	048c 9782 0b19 8815 0594 052f 073b 0e02     ........../.;...
 800d000:	0918 af80 7431 800c 1ad6 050c ff80 8005     ....1t..........
 800d010:	05b6 0c24 c69b d20a 1030 8d84 3703 8109     ..$.....0....7..
 800d020:	145c b880 8008 3dba 0435 060a 0838 0846     \......=5...8.F.
 800d030:	060c 0b74 031e 045a 0959 8380 1c18 160a     ..t...Z.Y.......
 800d040:	4609 800a 068a a4ab 170c 3104 04a1 da81     .F.........1....
 800d050:	0726 050c 8005 11a5 6d81 7810 2a28 4c06     &........m.x(*.L
 800d060:	8004 048d be80 1b03 0f03 000d 0106 0301     ................
 800d070:	0401 0802 0908 0a02 0b05 1002 1101 1204     ................
 800d080:	1305 1411 1502 1702 1a02 1c02 1d05 2408     ...............$
 800d090:	6a01 6b03 bc02 d102 d402 d50c d609 d702     .j.k............
 800d0a0:	da02 e001 e805 ee02 f020 f904 0c04 3b27     ........ .....';
 800d0b0:	4e3e 8f4f 9e9e 069f 0907 3d36 563e d0f3     >NO.......6=>V..
 800d0c0:	04d1 1814 3736 5756 35bd cfce 12e0 8987     ....67VW.5......
 800d0d0:	9e8e 0d04 110e 2912 3431 453a 4946 4e4a     .......)14:EFIJN
 800d0e0:	644f 5a65 b65c 1bb7 841c 0985 9037 a891     OdeZ\.......7...
 800d0f0:	0a07 3e3b 6966 928f 5f6f efee 625a 9b9a     ..;>fi..o_..Zb..
 800d100:	2827 9d55 a1a0 a4a3 a8a7 baad c4bc 0b06     '(U.............
 800d110:	150c 3a1d 453f a651 cca7 a0cd 1907 221a     ...:?EQ........"
 800d120:	c525 04c6 2320 2625 3328 3a38 4a48 504c     %... #%&(38:HJLP
 800d130:	5553 5856 5c5a 605e 6563 6b66 7873 7f7d     SUVXZ\^`cefksx}.
 800d140:	a48a afaa c0b0 3fd0 7271 5e7b 7b22 0305     .......?qr{^"{..
 800d150:	2d04 6503 0104 2e2f 8280 031d 0f31 041c     .-.e../.....1...
 800d160:	0924 051e 052b 0444 2a0e aa80 2406 2404     $...+.D..*...$.$
 800d170:	2804 3408 010b 9080 3781 1609 080a 9880     .(.4.....7......
 800d180:	0339 0863 3009 0516 0321 051b 4001 0438     9.c..0..!....@8.
 800d190:	054b 042f 070a 0709 2040 0427 090c 0336     K./.....@ '...6.
 800d1a0:	053a 071a 0c04 5007 3749 0d33 0733 082e     :......PI73.3...
 800d1b0:	810a 1f26 8180 0828 802a 4ea6 1e04 430f     ..&...(.*..N...C
 800d1c0:	190e 0a07 4706 2709 7509 3f0b 2a41 3b06     .....G.'.u.?A*.;
 800d1d0:	0a05 5106 0106 1005 0503 8b80 215f 0848     ...Q........_!H.
 800d1e0:	800a 5ea6 4522 0a0b 0d06 3813 0a08 2c36     ...^"E.....8..6,
 800d1f0:	1004 c080 643c 0c53 8101 4800 5308 391d     ....<dS....H.S.9
 800d200:	0781 0a46 031d 4947 0337 080e 060a 0739     ..F...GI7.....9.
 800d210:	810a 1936 0781 9a83 7566 800b 8ac4 84bc     ..6.....fu......
 800d220:	8f2f 82d1 a147 82b9 0739 042a 6002 0a26     /...G...9.*..`&.
 800d230:	0a46 0528 8213 5bb0 4565 2f0b 1110 0240     F.(....[eE./..@.
 800d240:	971e 0ef2 f382 0da5 1f81 8151 898c 6b04     ..........Q....k
 800d250:	0d05 0903 1007 6093 f680 730a 6e08 4617     .......`...s.n.F
 800d260:	9a80 0c14 0957 8019 8187 0347 4285 150f     ....W.....G..B..
 800d270:	5085 872b 80d5 29d7 054b 040a 8302 4411     .P+....)K......D
 800d280:	4b81 063c 0401 0555 341b 8102 2c0e 6404     .K<...U..4...,.d
 800d290:	560c 0d0a 5c03 3d04 1d39 2c0d 0904 0207     .V...\.=9..,....
 800d2a0:	060e 9a80 d583 0d0b 0a03 7406 590c 0c27     ...........t.Y'.
 800d2b0:	3804 0a08 2806 1e08 0c52 6704 2903 0a0d     .8...(..R..g.)..
 800d2c0:	0306 300d 0e60 9285 0000 fbc0 3eef 0000     ...0`........>..
 800d2d0:	0000 0e00 0000 0000 0000 0000 0000 0000     ................
 800d2e0:	0000 fff8 fffb ffff 0007 0000 0000 1400     ................
 800d2f0:	21fe 00fe 000c 0000 0002 0000 0000 5000     .!.............P
 800d300:	201e 0080 000c 4000 0006 0000 0000 1000     . .....@........
 800d310:	3986 0002 0000 0023 21be 0000 000c fc00     .9....#..!......
 800d320:	0002 0000 0000 d000 201e 00c0 000c 0000     ......... ......
 800d330:	0004 0000 0000 4000 2001 0080 0000 0000     .......@. ......
 800d340:	0011 0000 0000 c000 3dc1 0060 000c 0000     .........=`.....
 800d350:	0002 0000 0000 9000 3044 0060 000c 0000     ........D0`.....
 800d360:	0003 0000 0000 5800 201e 0080 000c 0000     .......X. ......
 800d370:	8400 805c 0000 0000 0000 0000 0000 07f2     ..\.............
 800d380:	7f80 0000 0000 0000 0000 0000 0000 1bf2     ................
 800d390:	3f00 0000 0000 0000 0000 0300 0000 02a0     .?..............
 800d3a0:	0000 0000 0000 7ffe e0df feff ffff 1fff     ................
 800d3b0:	0040 0000 0000 0000 0000 0000 e000 66fd     @..............f
 800d3c0:	0000 c300 0001 001e 2064 2000 0000 0000     ........d . ....
 800d3d0:	0000 e000 0000 0000 0000 001c 0000 001c     ................
 800d3e0:	0000 000c 0000 000c 0000 0000 0000 3fb0     ...............?
 800d3f0:	fe40 200f 0000 0000 3800 0000 0000 0000     @.. .....8......
 800d400:	0060 0000 0200 0000 0000 0000 0187 0e04     `...............
 800d410:	0000 0980 0000 0000 0000 7f40 1fe5 9ff8     ..........@.....
 800d420:	0000 0000 0000 7fff 000f 0000 0000 17d0     ................
 800d430:	0004 0000 f800 000f 0003 0000 3b3c 0000     ............<;..
 800d440:	0000 0000 a340 0003 0000 0000 f000 00cf     ....@...........
 800d450:	0000 fff7 21fd 0310 ffff ffff ffff fbff     .....!..........
 800d460:	1000 0000 0000 0000 0000 ffff ffff 0001     ................
 800d470:	0000 0000 8000 0003 0000 0000 0000 8000     ................
 800d480:	0000 0000 ffff ffff 0000 0000 fc00 0000     ................
 800d490:	0000 0600 0000 0000 0000 0000 8000 3ff7     ...............?
 800d4a0:	0000 c000 0000 0000 0000 0000 0000 0003     ................
 800d4b0:	0844 0000 0060 0000 0030 0000 ffff 8003     D...`...0.......
 800d4c0:	0000 0000 3fc0 0000 ff80 0003 0000 0000     .....?..........
 800d4d0:	0007 0000 0000 13c8 0000 0000 0020 0000     ............ ...
 800d4e0:	0000 0000 7e00 0066 1008 0000 0000 1000     .....~f.........
 800d4f0:	0000 0000 0000 c19d 0002 0000 3000 0040     .............0@.
 800d500:	0000 0000 2120 0000 0000 4000 0000 0000     .... !.....@....
 800d510:	ffff 0000 ffff 0000 0000 0000 0000 0100     ................
 800d520:	0000 0200 0300 0000 0000 0000 0000 0000     ................
	...
 800d540:	0004 0500 0000 0000 0000 0000 0006 0000     ................
 800d550:	0000 0000 0700 0000 0908 000a 0c0b 0e0d     ................
 800d560:	000f 1000 1211 0000 1413 1615 0000 1817     ................
 800d570:	1a19 001b 001c 0000 001d 0000 0000 0000     ................
 800d580:	1f1e 0020 0000 0000 0021 0022 2423 0025     .. .....!.".#$%.
 800d590:	0000 2600 0000 0000 0000 0000 0000 0000     ...&............
	...
 800d600:	0000 2700 0028 0000 0000 0000 0000 0000     ...'(...........
 800d610:	0000 0000 0000 0029 0000 0000 0000 0000     ......).........
	...
 800d648:	0000 002a 0000 0000 0000 0000 0000 0000     ..*.............
 800d658:	0000 0000 2b00 002c 2d00 0000 0000 0000     .....+,..-......
	...
 800d680:	2f2e 0030 0000 0000 0000 0000 0000 0000     ./0.............
	...
 800d698:	0031 0000 0000 0000 0000 0000 0000 0000     1...............
	...
 800d6b8:	0000 3200 3300 0000 0000 0000 0000 0000     ...2.3..........
	...
 800d6d8:	3534 0000 3535 3635 0000 0000 0000 0000     45..5556........
	...
 800d724:	0000 2000 0000 0000 0001 0000 0000 0000     ... ............
 800d734:	0000 07c0 f06e 0000 0000 8700 0000 0000     ....n...........
 800d744:	0060 0000 0000 0000 00f0 0000 ffc0 0001     `...............
 800d754:	0000 0000 0002 0000 0000 ff00 007f 0000     ................
 800d764:	0000 8000 0003 0000 0000 0678 0007 0000     ..........x.....
 800d774:	ef80 001f 0000 0000 0000 0008 0003 0000     ................
 800d784:	0000 7fc0 1e00 0000 0000 0000 0000 0000     ................
 800d794:	8000 40d3 0000 8000 07f8 0000 0003 0000     ...@............
 800d7a4:	0000 5800 0001 0080 1fc0 001f 0000 0000     ...X............
 800d7b4:	0000 ff00 005c 4000 0000 0000 0000 0000     ....\..@........
 800d7c4:	0000 a5f9 000d 0000 0000 0000 0000 0000     ................
 800d7d4:	8000 b03c 0001 3000 0000 0000 0000 0000     ..<....0........
 800d7e4:	0000 a7f8 0001 0000 0000 0000 0000 0000     ................
 800d7f4:	2800 00bf 0000 e000 0fbc 0000 0000 0000     .(..............
 800d804:	8000 06ff 07fe 0000 0000 79f8 0080 0e7e     ...........y..~.
 800d814:	0000 0000 fc00 037f 0000 0000 0000 0000     ................
 800d824:	0000 bf7f 0000 fffc fcff 006d 0000 0000     ..........m.....
 800d834:	0000 b47e 00bf 0000 0000 0000 0000 00a3     ..~.............
	...
 800d84c:	0000 0018 0000 0000 0000 001f 0000 0000     ................
 800d85c:	0000 007f 8000 0007 0000 0000 0000 6000     ...............`
	...
 800d874:	c3a0 f807 0fe7 0000 3c00 0000 001c 0000     .........<......
 800d884:	0000 0000 ffff ffff ffff f87f ffff ffff     ................
 800d894:	1fff 0020 0010 f800 fffe 0000 ff7f f9ff     .. .............
 800d8a4:	07db 0000 0000 007f 0000 0000 07f0 0000     ................
	...
 800d8bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
 800d8cc:	ffff 0000 0000 0000 0000 0000 0000 0000     ................
	...
 800d930:	ffff ffff ffff ffff ffff ffff ffff 0000     ................
	...
 800d960:	03f8 0000 0000 0000 0000 0000 0000 0000     ................
	...
 800d980:	0000 fffe ffff bfff 00b6 0000 0000 0000     ................
 800d990:	0000 07ff 0000 0000 f800 ffff 0000 0001     ................
	...
 800d9a8:	0000 9fc0 3d9f 0000 0000 0002 0000 ffff     .....=..........
 800d9b8:	07ff 0000 0000 0000 0000 0000 ffc0 0001     ................
 800d9c8:	0000 0000 f800 200f d2c8 0800 004a 0000     ....... ....J...
 800d9d8:	d518 0800 0200 0000 d718 0800 0037 0000     ............7...
 800d9e8:	0100 0302 0504 0706 0908 0a08 0c0b 0e0d     ................
 800d9f8:	100f 1211 1413 1502 1716 1918 1b1a 1d1c     ................
 800da08:	1f1e 0220 0202 0202 0202 0202 2102 0202     .. ..........!..
 800da18:	0202 0202 0202 0202 0202 0202 2322 2524     ............"#$%
 800da28:	0226 0227 0228 0202 2a29 022b 2d2c 2f2e     &.'.(...)*+.,-./
 800da38:	0230 3102 0202 3202 0202 0202 0202 0202     0..1...2........
 800da48:	0233 3402 0202 0202 0202 0202 0202 0202     3..4............
 800da58:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800da68:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800da78:	0202 3502 3602 3702 0202 0202 0202 0202     ...5.6.7........
 800da88:	0238 0239 0202 0202 0202 0202 0202 0202     8.9.............
 800da98:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800daa8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dab8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dac8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dad8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dae8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800daf8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800db08:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800db18:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800db28:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800db38:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800db48:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800db58:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800db68:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800db78:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800db88:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800db98:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dba8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dbb8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dbc8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dbd8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dbe8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dbf8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dc08:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dc18:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dc28:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dc38:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dc48:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dc58:	0202 0202 0202 0202 3a02 3c3b 0202 0202     .........:;<....
 800dc68:	023d 3e02 403f 4241 4443 4645 0202 4702     =..>?@ABCDEF...G
 800dc78:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dc88:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dc98:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dca8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dcb8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dcc8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dcd8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dce8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dcf8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dd08:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dd18:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dd28:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dd38:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dd48:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dd58:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dd68:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dd78:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dd88:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dd98:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dda8:	0202 0202 0202 0202 0202 0202 0248 0202     ............H...
 800ddb8:	0202 0202 0202 0202 0249 0202 0202 023b     ........I.....;.
 800ddc8:	0100 0202 0202 0203 0202 0402 0502 0206     ................
 800ddd8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dde8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800ddf8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800de08:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800de18:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800de28:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800de38:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800de48:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800de58:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800de68:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800de78:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800de88:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800de98:	0207 0202 0202 0202 0202 0202 0202 0202     ................
 800dea8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800deb8:	0202 0202 0202 0202 0202 0202 0202 0202     ................
 800dec8:	3025 6c36 2075 6800 6e61 6c64 5f65 6f63     %06lu .handle_co
 800ded8:	7061 000a 454e 2054 6170 6c79 616f 2064     ap..NET payload 
 800dee8:	6973 657a 2520 0a64                          size %d..

0800def1 <COAP_HOST>:
 800def1:	3031 2e34 3931 2e39 3538 322e 3131           104.199.85.211.

0800df00 <COAP_URI>:
 800df00:	3276 742f 6968 676e 2f73 5649 6952 4342     v2/things/IVRiBC
 800df10:	5263 4836 7050 435f 5a63 4649 4f66 465a     cR6HPp_CcZIFfOZF
 800df20:	7a78 695f 6e7a 3569 6378 4b5f 2d4f 676b     xz_izni5xc_KO-kg
 800df30:	4153 5932 0038                              SA2Y8.

0800df36 <COLLECTOR_NODE_HW_ID>:
 800df36:	ff57 066a 7878 5054 2949 6724               W.j.xxTPI)$g

0800df42 <SENSOR_NODE_HW_IDS>:
 800df42:	ff38 066d 574e 3634 5825 4308 0201 0403     8.m.NW46%X.C....
 800df52:	0605 0807 0a09 020b 0201 0403 0605 0807     ................
 800df62:	0a09 030b 0201 0403 0605 0807 0a09 040b     ................
 800df72:	0201 0403 0605 0807 0a09 050b 3025 7832     ............%02x
 800df82:	2500 7273 6e61 6f64 206d 6564 6976 6563     .%srandom device
 800df92:	6920 2064 7325 000a 7325 7768 6469 0020      id %s..%shwid .
 800dfa2:	454e 2054 7473 7261 0a74 4e00 5445 6620     NET start..NET f
 800dfb2:	6572 2065 626d 6675 2520 0a64 0000          ree mbuf %d...

0800dfc0 <sensor_network_encoding>:
 800dfc0:	0032 0000 003c 0000 3025 3031 6c6c 0078     2...<...%010llx.
 800dfd0:	6e20 646f 2065 2500 7373 6e65 6f73 2572      node .%ssensor%
 800dfe0:	2373 6425 000a 7325 6f63 6c6c 6365 6f74     s#%d..%scollecto
 800dff0:	2572 0a73 2500 7373 6174 646e 6c61 6e6f     r%s..%sstandalon
 800e000:	2565 0a73 4e00 5445 6e20 7465 6f77 6b72     e%s..NET network
 800e010:	6e20 746f 7220 6165 7964 000a 454e 2054      not ready..NET 
 800e020:	2500 2573 2073 7325 000a 0000               .%s%s %s....

0800e02c <sensor_network_shortname>:
 800e02c:	e068 0800 e06c 0800 656e 7774 726f 006b     h...l...network.
 800e03c:	0000 0000                                   ....

0800e040 <sensor_node_addresses>:
 800e040:	b6f1 b4b5 00b3 0000 b6cd b4b5 00b3 0000     ................
 800e050:	b6a3 b4b5 00b3 0000 b60f b4b5 00b3 0000     ................
 800e060:	b605 b4b5 00b3 0000 7673 0072 6f63 006c     ........svr.col.
 800e070:	636f 725f 7065 6f5f 6f00 5f63 6c63 635f     oc_rep_o.oc_cl_c
 800e080:	7362 ff00 6300 616f 5f70 6572 6563 7669     bs...coap_receiv
 800e090:	2065 4f4e 2054 4d49 4c50 4d45 4e45 4554     e NOT IMPLEMENTE
 800e0a0:	0a44 2200 2200 203a 7b00 7400 7572 0065     D..".": .{.true.
 800e0b0:	6166 736c 0065 6c25 756c 2500 6c6c 0064     false.%llu.%lld.
 800e0c0:	005c 745c 5c00 0072 6e5c 5c00 0066 625c     \.\t.\r.\n.\f.\b
 800e0d0:	5b00 5d00 7d00 7300 6e65 6f73 5f72 6f6e     .[.].}.sensor_no
 800e0e0:	6974 5f66 7665 7374 4100 7373 7265 2074     tif_evts.Assert 
 800e0f0:	2040 7830 7825 000a 7341 6573 7472 4020     @ 0x%x..Assert @
 800e100:	3020 2578 2078 202d 7325 253a 0a64 5500      0x%x - %s:%d..U
 800e110:	686e 6e61 6c64 6465 6920 746e 7265 7572     nhandled interru
 800e120:	7470 2820 6c25 2964 202c 7865 6563 7470     pt (%ld), except
 800e130:	6f69 206e 7073 3020 2578 3830 786c 000a     ion sp 0x%08lx..
 800e140:	7220 3a30 7830 3025 6c38 2078 7220 3a31      r0:0x%08lx  r1:
 800e150:	7830 3025 6c38 2078 7220 3a32 7830 3025     0x%08lx  r2:0x%0
 800e160:	6c38 2078 7220 3a33 7830 3025 6c38 0a78     8lx  r3:0x%08lx.
 800e170:	2000 3472 303a 2578 3830 786c 2020 3572     . r4:0x%08lx  r5
 800e180:	303a 2578 3830 786c 2020 3672 303a 2578     :0x%08lx  r6:0x%
 800e190:	3830 786c 2020 3772 303a 2578 3830 786c     08lx  r7:0x%08lx
 800e1a0:	000a 7220 3a38 7830 3025 6c38 2078 7220     .. r8:0x%08lx  r
 800e1b0:	3a39 7830 3025 6c38 2078 3172 3a30 7830     9:0x%08lx r10:0x
 800e1c0:	3025 6c38 2078 3172 3a31 7830 3025 6c38     %08lx r11:0x%08l
 800e1d0:	0a78 7200 3231 303a 2578 3830 786c 2020     x..r12:0x%08lx  
 800e1e0:	726c 303a 2578 3830 786c 2020 6370 303a     lr:0x%08lx  pc:0
 800e1f0:	2578 3830 786c 7020 7273 303a 2578 3830     x%08lx psr:0x%08
 800e200:	786c 000a 4349 5253 303a 2578 3830 786c     lx..ICSR:0x%08lx
 800e210:	4820 5346 3a52 7830 3025 6c38 2078 4643      HFSR:0x%08lx CF
 800e220:	5253 303a 2578 3830 786c 000a 4642 5241     SR:0x%08lx..BFAR
 800e230:	303a 2578 3830 786c 4d20 464d 5241 303a     :0x%08lx MMFAR:0
 800e240:	2578 3830 786c 000a 616d 6e69 6900 6c64     x%08lx..main.idl
 800e250:	0065 736d 7379 315f 0000 0000               e.msys_1....

0800e25c <MemFile_methods>:
 800e25c:	78c5 0800 0000 0000                         .x......

0800e264 <stdout>:
 800e264:	01bc 2000 6574 706d 735f 6d74 3233 305f     ... temp_stm32_0
 800e274:	5200 444e 7020 7265 6f73 616e 696c 6573     .RND personalise
 800e284:	7720 7469 2068 7768 6920 2064 5200 444e      with hw id .RND
 800e294:	7320 6565 2064 6977 6874 7420 6d65 2070      seed with temp 
 800e2a4:	6e65 7274 706f 2079 0000 0000               entropy ....

0800e2b0 <g_temp_stm32_sensor_driver>:
 800e2b0:	7cd5 0800 7b13 0800 0000 0000 0000 0000     .|...{..........
	...
 800e2d8:	6461 3163 5300 4d54 7220 6165 2064 6e69     adc1.STM read in
 800e2e8:	2074 6574 706d 7320 6e65 6f73 0a72 4100     t temp sensor..A
 800e2f8:	4344 6f20 6570 206e 6863 3120 0a36 0000     DC open ch 16...

0800e308 <k256>:
 800e308:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
 800e318:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
 800e328:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
 800e338:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
 800e348:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
 800e358:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
 800e368:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
 800e378:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
 800e388:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
 800e398:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
 800e3a8:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
 800e3b8:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
 800e3c8:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
 800e3d8:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
 800e3e8:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
 800e3f8:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.
 800e408:	6175 7472 0030 0000                         uart0...

0800e410 <uart_cfg>:
 800e410:	4400 4000 101c 4002 0000 0002 0302 ffff     .D.@...@........
 800e420:	8451 0800 0026 0000                         Q...&...

0800e428 <stm32_flash_dev>:
 800e428:	e440 0800 0000 0800 0000 0002 0080 0000     @...............
 800e438:	0002 0000 00ff 0000                         ........

0800e440 <stm32_flash_funcs>:
 800e440:	86e5 0800 86f5 0800 86e1 0800 86c5 0800     ................
 800e450:	0000 0000 86d7 0800 0000 0000               ............

0800e45c <stm32_tmr_devs>:
 800e45c:	3534 2000 0000 0000 0000 0000               45. ........

0800e468 <portmap>:
 800e468:	0800 4001 0c00 4001 1000 4001 1400 4001     ...@...@...@...@
 800e478:	1800 4001 0302 0504 0706 0908 0b0a 0d0c     ...@............
 800e488:	0f0e 1010 4441 2043 7263 6165 6574 6120     ....ADC create a
 800e498:	6364 0a31 0000 0000                         dc1.....

0800e4a0 <stm32f1_adc_funcs>:
 800e4a0:	9d2d 0800 9e1d 0800 9dcd 0800 9ccf 0800     -...............
 800e4b0:	9cc1 0800 9db7 0800 9cb9 0800 7325 7263     ............%scr
 800e4c0:	6165 6574 6220 3963 6735 305f 000a 6362     eate bc95g_0..bc
 800e4d0:	3539 5f67 0030 0a5b 2b00 3125 5b36 3a5e     95g_0.[..+%16[^:
 800e4e0:	3a5d 6425 2b00 3125 5b36 3a5e 3a5d 6425     ]:%d.+%16[^:]:%d
 800e4f0:	252c 0064 0a5d 0000                         ,%d.]...

0800e4f8 <_ZL13network_iface>:
 800e4f8:	0000 0000 e4ce 0800 0010 0000 a089 0800     ................
 800e508:	0000 0000 5441 203e 534e 534f 3d54 6425     ....AT> NSOST=%d
 800e518:	252c 2c73 6425 252c 2c64 000a 534e 534f     ,%s,%d,%d,..NSOS
 800e528:	3d54 6425 252c 2c73 6425 252c 2c64 7300     T=%d,%s,%d,%d,.s
 800e538:	6e65 2064 626d 6675 2500 2573 2073 7525     end mbuf.%s%s %u
 800e548:	2e2e 0a2e                                    .....

0800e54d <_ZL3ATP>:
 800e54d:	5441 002b 0000                               AT+....

0800e554 <_ZL8COMMANDS>:
 800e554:	e6ed 0800 e5b3 0800 e5cd 0800 e5d7 0800     ................
 800e564:	e5db 0800 e5e4 0800 e5eb 0800 e5f1 0800     ................
 800e574:	e5f9 0800 e600 0800 e608 0800 e5a0 0800     ................
 800e584:	e60f 0800 e627 0800 e632 0800 e63d 0800     ....'...2...=...
 800e594:	e645 0800 4b4f 0d00 410a 0054 534e 434f     E...OK...AT.NSOC
 800e5a4:	3d52 4744 4152 2c4d 3731 302c 312c 4e00     R=DGRAM,17,0,1.N
 800e5b4:	4f43 464e 4749 413d 5455 434f 4e4f 454e     CONFIG=AUTOCONNE
 800e5c4:	5443 462c 4c41 4553 5100 4552 5347 5457     CT,FALSE.QREGSWT
 800e5d4:	323d 4e00 4252 4e00 4142 444e 253d 0064     =2.NRB.NBAND=%d.
 800e5e4:	4643 4e55 313d 4300 5546 3f4e 4300 5245     CFUN=1.CFUN?.CER
 800e5f4:	4745 303d 4300 5245 4745 003f 4743 5441     EG=0.CEREG?.CGAT
 800e604:	3d54 0031 4743 5441 3f54 4e00 4f53 5453     T=1.CGATT?.NSOST
 800e614:	253d 2c64 7325 252c 2c64 6425 252c 2c73     =%d,%s,%d,%d,%s,
 800e624:	6425 4e00 4f53 4652 313d 252c 0064 534e     %d.NSORF=1,%d.NS
 800e634:	434f 3d4c 2c31 6425 4300 5047 4441 5244     OCL=1,%d.CGPADDR
 800e644:	4e00 4555 5453 5441 0053 424e 2054 6573     .NUESTATS.NBT se
 800e654:	646e 7520 7064 000a 424e 2054 7473 0a72     nd udp..NBT str.
 800e664:	5400 444f 3a4f 636f 655f 5f70 7473 0072     .TODO:oc_ep_str.

0800e674 <_ZL9transport>:
 800e674:	0000 0000 a5ff 0800 a603 0800 a62d 0800     ............-...
	...
 800e68c:	a60d 0800 a607 0800 a60b 0800 7325 7325     ............%s%s
 800e69c:	7325 2000 4b4f 000a 4620 4941 454c 0a44     %s. OK.. FAILED.
 800e6ac:	4e00 5442 0020 5441 7220 7365 6f70 736e     .NBT .AT respons
 800e6bc:	2065 696d 6d73 7461 6863 203a 6f66 6e75     e mismatch: foun
 800e6cc:	2064 2522 2273 200a 2020 7865 6570 7463     d "%s".   expect
 800e6dc:	6465 2220 7325 0a22 4100 2154 2520 0d73     ed "%s"..AT! %s.
 800e6ec:	000a 2020 203c 6425 2f20 2520 0073 2020     ..  < %d / %s.  
 800e6fc:	203c 7325 4100 3d54 2520 0d73 000a 5441     < %s.AT= %s...AT
 800e70c:	203c 7325 4100 3e54 2520 0d73 000a 4d54     < %s.AT> %s...TM
 800e71c:	2050 7263 6165 6574 2520 0a73 0000 0000     P create %s.....

0800e72c <sysflash_map_dflt>:
 800e72c:	0000 0000 0000 0800 1000 0000 0001 0000     ................
 800e73c:	1000 0800 f000 0000 0002 0000 4010 0801     .............@..
 800e74c:	0000 0000 0003 0000 4020 0801 0000 0000     ........ @......
 800e75c:	0010 0000 0000 0801 2000 0000 0011 0000     ......... ......
 800e76c:	2000 0801 2000 0000 0302 0504 0706 0908     . ... ..........
 800e77c:	0b0a 0d0c 0f0e 1010                         ........

c:/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  55164	    300	  13412	  68876	  10d0c	c:/stm32bluepill-mynewt-sensor/bin/targets/bluepill_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
