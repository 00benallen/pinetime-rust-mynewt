
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x0002cabc vaddr 0x0002cabc paddr 0x0002cabc align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0002cad4 memsz 0x0002cad4 flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x0002cad4 align 2**16
         filesz 0x00000154 memsz 0x00000178 flags rw-
    LOAD off    0x00030250 vaddr 0x20000250 paddr 0x0002cc28 align 2**16
         filesz 0x00000000 memsz 0x000044f4 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              00024a9c  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0002cabc  0002cabc  0003022c  2**0  CONTENTS
  3 .ARM.exidx         00000018  0002cabc  0002cabc  0002cabc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  0003022c  2**0  CONTENTS
  6 .data              00000154  200000d8  0002cad4  000300d8  2**3  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000024  2000022c  0002cc28  0003022c  2**2  ALLOC
  8 .bss               000044f4  20000250  0002cc28  00030250  2**3  ALLOC
  9 .stack_dummy       000001b0  20004748  20004748  00030230  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000303e0  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  0003041b  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  0003049a  2**0  CONTENTS, READONLY
 13 .debug_line        0006095d  00000000  00000000  0003049e  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0010bf77  00000000  00000000  00090dfb  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0001a3cf  00000000  00000000  0019cd72  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     000050d0  00000000  00000000  001b7148  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         0002ea99  00000000  00000000  001bc218  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00048bca  00000000  00000000  001eacb1  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00016d10  00000000  00000000  0023387b  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       00015748  00000000  00000000  0024a58c  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000034  00000000  00000000  0025fcd4  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00004646  00000000  00000000  0025fd08  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    0001c8b4  00000000  00000000  0026434e  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
0002cabc l    d  .ARM.extab	00000000 .ARM.extab
0002cabc l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
2000022c l    d  .bssnz	00000000 .bssnz
20000250 l    d  .bss	00000000 .bss
20004748 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
00008248 l     F .text	0000003c errata_16
00008284 l     F .text	0000004c errata_31
000082d0 l     F .text	0000003c errata_32
0000830c l     F .text	0000004c errata_36
00008358 l     F .text	0000003c errata_37
00008394 l     F .text	0000003c errata_57
000083d0 l     F .text	0000003c errata_66
0000840c l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 4q9qovk8rqwaqec4
00000d30 l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
00010e82 l       .debug_str	00000000 
00010b81 l       .debug_str	00000000 
0001a08c l       .debug_str	00000000 
0001b10c l       .debug_str	00000000 
00016b4d l       .debug_str	00000000 
00000e63 l       .debug_str	00000000 
00000e8d l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
00000b18 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
0001d3ed l       .debug_str	00000000 
00000b5e l       .debug_str	00000000 
00000b67 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b95 l       .debug_str	00000000 
0001c214 l       .debug_str	00000000 
00000b9a l       .debug_str	00000000 
00000b9c l       .debug_str	00000000 
00000bae l       .debug_str	00000000 
00025109 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
0002523a l       .debug_str	00000000 
0001977d l       .debug_str	00000000 
00025dc7 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00010b6d l       .debug_str	00000000 
00017f9c l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000be8 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
00000c02 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000c16 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c24 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0002613b l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
00000c3e l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000c4b l       .debug_str	00000000 
00000c53 l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000c64 l       .debug_str	00000000 
00000c87 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000cab l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d21 l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 d6w4n297npb5pfx
000028dd l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
000031a4 l       .debug_str	00000000 
00018c4c l       .debug_str	00000000 
000031f7 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
000031ff l       .debug_str	00000000 
00003204 l       .debug_str	00000000 
00004d61 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
0000327c l       .debug_str	00000000 
000032b2 l       .debug_str	00000000 
000032e4 l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
0001f821 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0002cb33 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
00000b18 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000eb7 l       .debug_str	00000000 
00000ebf l       .debug_str	00000000 
00000eca l       .debug_str	00000000 
00000ed5 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000eed l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000f15 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f38 l       .debug_str	00000000 
00000f44 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00000f69 l       .debug_str	00000000 
0000e16f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000f76 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
00000f7d l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
00000871 l       .debug_str	00000000 
00000a24 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
00000a0e l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00025217 l       .debug_str	00000000 
0002281f l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
0001d48c l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00016f49 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
00000fa7 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000fd4 l       .debug_str	00000000 
0002240f l       .debug_str	00000000 
00018f74 l       .debug_str	00000000 
0001f202 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
0000099b l       .debug_str	00000000 
000008b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001032 l       .debug_str	00000000 
00001090 l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
00000a7e l       .debug_str	00000000 
00000a5e l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001022 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000866 l       .debug_str	00000000 
00000a17 l       .debug_str	00000000 
00000a86 l       .debug_str	00000000 
0000092a l       .debug_str	00000000 
00001114 l       .debug_str	00000000 
00000a04 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
000008cd l       .debug_str	00000000 
0000112a l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000087c l       .debug_str	00000000 
00001166 l       .debug_str	00000000 
00004d4b l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
0000117c l       .debug_str	00000000 
00001185 l       .debug_str	00000000 
00000887 l       .debug_str	00000000 
0000118e l       .debug_str	00000000 
0001a24a l       .debug_str	00000000 
00001198 l       .debug_str	00000000 
000011d0 l       .debug_str	00000000 
00001210 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000121f l       .debug_str	00000000 
00001254 l       .debug_str	00000000 
0000123b l       .debug_str	00000000 
00000aae l       .debug_str	00000000 
00001236 l       .debug_str	00000000 
0000125d l       .debug_str	00000000 
0000128e l       .debug_str	00000000 
00001275 l       .debug_str	00000000 
00006bd8 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00001298 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
0000dd28 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
000012e9 l       .debug_str	00000000 
00001329 l       .debug_str	00000000 
00001370 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
000013d7 l       .debug_str	00000000 
00001446 l       .debug_str	00000000 
00001471 l       .debug_str	00000000 
000014e1 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
0000150d l       .debug_str	00000000 
0000157d l       .debug_str	00000000 
000015ab l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0000005d l       .debug_str	00000000 
000015d5 l       .debug_str	00000000 
000015de l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000015ed l       .debug_str	00000000 
0000193a l       .debug_str	00000000 
000015f5 l       .debug_str	00000000 
00001601 l       .debug_str	00000000 
00001609 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
000016c5 l       .debug_str	00000000 
000016d0 l       .debug_str	00000000 
00001717 l       .debug_str	00000000 
00001766 l       .debug_str	00000000 
00001770 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017f2 l       .debug_str	00000000 
000017fb l       .debug_str	00000000 
0000180b l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
00001868 l       .debug_str	00000000 
000018c5 l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
000018da l       .debug_str	00000000 
000018e6 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001903 l       .debug_str	00000000 
0000190b l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
00001920 l       .debug_str	00000000 
0001e968 l       .debug_str	00000000 
00001940 l       .debug_str	00000000 
00001948 l       .debug_str	00000000 
00001952 l       .debug_str	00000000 
0002e85d l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00001971 l       .debug_str	00000000 
0000197a l       .debug_str	00000000 
00002d66 l       .debug_str	00000000 
00001983 l       .debug_str	00000000 
000283ef l       .debug_str	00000000 
0000198b l       .debug_str	00000000 
00001997 l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019aa l       .debug_str	00000000 
000019b2 l       .debug_str	00000000 
00001aae l       .debug_str	00000000 
00001bb2 l       .debug_str	00000000 
00001bc0 l       .debug_str	00000000 
000287fb l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00001bee l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001bf9 l       .debug_str	00000000 
00001c74 l       .debug_str	00000000 
00001cf7 l       .debug_str	00000000 
00001d05 l       .debug_str	00000000 
00001d64 l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001de1 l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
0001b53d l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00001e00 l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
0002e198 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e26 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e72 l       .debug_str	00000000 
00001e4f l       .debug_str	00000000 
00001e82 l       .debug_str	00000000 
00001ec2 l       .debug_str	00000000 
0001afe8 l       .debug_str	00000000 
00001f0a l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00001f16 l       .debug_str	00000000 
00001f3f l       .debug_str	00000000 
00001f1c l       .debug_str	00000000 
00001f51 l       .debug_str	00000000 
00001f93 l       .debug_str	00000000 
0001ae9a l       .debug_str	00000000 
00001fdd l       .debug_str	00000000 
00001fe3 l       .debug_str	00000000 
00001fe9 l       .debug_str	00000000 
00002012 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00002024 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
0001a0ee l       .debug_str	00000000 
000020b0 l       .debug_str	00000000 
000020b6 l       .debug_str	00000000 
000020bc l       .debug_str	00000000 
000020c2 l       .debug_str	00000000 
000020eb l       .debug_str	00000000 
000020c8 l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
0000213d l       .debug_str	00000000 
00002186 l       .debug_str	00000000 
0000218b l       .debug_str	00000000 
0001b2a3 l       .debug_str	00000000 
00002190 l       .debug_str	00000000 
00002196 l       .debug_str	00000000 
0000219c l       .debug_str	00000000 
000021c5 l       .debug_str	00000000 
000021a2 l       .debug_str	00000000 
000021d6 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
0001a1c2 l       .debug_str	00000000 
00002260 l       .debug_str	00000000 
0000228c l       .debug_str	00000000 
00002269 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000022de l       .debug_str	00000000 
00002327 l       .debug_str	00000000 
0001b4e0 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00002367 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023bb l       .debug_str	00000000 
0001b120 l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002417 l       .debug_str	00000000 
0000241d l       .debug_str	00000000 
00002425 l       .debug_str	00000000 
00002433 l       .debug_str	00000000 
00002442 l       .debug_str	00000000 
00002453 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002469 l       .debug_str	00000000 
00002474 l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
000024c1 l       .debug_str	00000000 
0000249e l       .debug_str	00000000 
000024d3 l       .debug_str	00000000 
00002515 l       .debug_str	00000000 
0001a2e7 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000258c l       .debug_str	00000000 
00002569 l       .debug_str	00000000 
0000259e l       .debug_str	00000000 
000025e0 l       .debug_str	00000000 
0000262a l       .debug_str	00000000 
0000262f l       .debug_str	00000000 
0000265c l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0000266e l       .debug_str	00000000 
000026b0 l       .debug_str	00000000 
000026fa l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00002779 l       .debug_str	00000000 
0000270e l       .debug_str	00000000 
0000271e l       .debug_str	00000000 
00002727 l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002741 l       .debug_str	00000000 
00002756 l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
00002824 l       .debug_str	00000000 
000028c9 l       .debug_str	00000000 
000028d4 l       .debug_str	00000000 
00002921 l       .debug_str	00000000 
000028fe l       .debug_str	00000000 
00002934 l       .debug_str	00000000 
000029b7 l       .debug_str	00000000 
00002a42 l       .debug_str	00000000 
00002a5e l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002afe l       .debug_str	00000000 
00002b1b l       .debug_str	00000000 
00002b2f l       .debug_str	00000000 
00002b7b l       .debug_str	00000000 
00002bcf l       .debug_str	00000000 
00002be5 l       .debug_str	00000000 
00002bf9 l       .debug_str	00000000 
00002c40 l       .debug_str	00000000 
00002c8f l       .debug_str	00000000 
00002cbb l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002cc9 l       .debug_str	00000000 
00002ccf l       .debug_str	00000000 
00002cd7 l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00002ce6 l       .debug_str	00000000 
00002cee l       .debug_str	00000000 
0001099c l       .debug_str	00000000 
00002cfd l       .debug_str	00000000 
000033d1 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002d13 l       .debug_str	00000000 
0002e235 l       .debug_str	00000000 
00002d24 l       .debug_str	00000000 
00002d2c l       .debug_str	00000000 
00002d33 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d45 l       .debug_str	00000000 
00002d4d l       .debug_str	00000000 
00002d6f l       .debug_str	00000000 
00002d7a l       .debug_str	00000000 
00002d86 l       .debug_str	00000000 
00002d8e l       .debug_str	00000000 
00002d97 l       .debug_str	00000000 
0001d84b l       .debug_str	00000000 
00002da2 l       .debug_str	00000000 
00002dad l       .debug_str	00000000 
00002db8 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
00002e0b l       .debug_str	00000000 
00002e20 l       .debug_str	00000000 
00002e29 l       .debug_str	00000000 
00002e86 l       .debug_str	00000000 
00002eeb l       .debug_str	00000000 
00002ef5 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f1a l       .debug_str	00000000 
00002f22 l       .debug_str	00000000 
00002f86 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
00002ff9 l       .debug_str	00000000 
00003001 l       .debug_str	00000000 
00003042 l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003052 l       .debug_str	00000000 
00003067 l       .debug_str	00000000 
0000307a l       .debug_str	00000000 
0002e23c l       .debug_str	00000000 
0000308f l       .debug_str	00000000 
000030a4 l       .debug_str	00000000 
0000a163 l       .debug_str	00000000 
0000c06a l       .debug_str	00000000 
000030ce l       .debug_str	00000000 
000030d5 l       .debug_str	00000000 
0000f665 l       .debug_str	00000000 
00002dfb l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16toh7kw97pg9hdi
00003fc1 l       .debug_str	00000000 
00003fe7 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00003ff2 l       .debug_str	00000000 
00004002 l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00004006 l       .debug_str	00000000 
0000825e l       .debug_str	00000000 
00004021 l       .debug_str	00000000 
00004042 l       .debug_str	00000000 
00004058 l       .debug_str	00000000 
000040c0 l       .debug_str	00000000 
00004138 l       .debug_str	00000000 
00004165 l       .debug_str	00000000 
0000417d l       .debug_str	00000000 
000041e7 l       .debug_str	00000000 
000041ef l       .debug_str	00000000 
000041f5 l       .debug_str	00000000 
000041ff l       .debug_str	00000000 
00004279 l       .debug_str	00000000 
000042e5 l       .debug_str	00000000 
0000435e l       .debug_str	00000000 
000043d7 l       .debug_str	00000000 
00004442 l       .debug_str	00000000 
000044b1 l       .debug_str	00000000 
000044b8 l       .debug_str	00000000 
000044c3 l       .debug_str	00000000 
000044eb l       .debug_str	00000000 
00004560 l       .debug_str	00000000 
000045dd l       .debug_str	00000000 
000044dc l       .debug_str	00000000 
000045e9 l       .debug_str	00000000 
00001952 l       .debug_str	00000000 
00004660 l       .debug_str	00000000 
00001940 l       .debug_str	00000000 
0002e85d l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00001971 l       .debug_str	00000000 
0000197a l       .debug_str	00000000 
00002d66 l       .debug_str	00000000 
000046c9 l       .debug_str	00000000 
00004747 l       .debug_str	00000000 
000047b7 l       .debug_str	00000000 
00004831 l       .debug_str	00000000 
0000484b l       .debug_str	00000000 
000048b7 l       .debug_str	00000000 
000048c0 l       .debug_str	00000000 
000048cc l       .debug_str	00000000 
00004942 l       .debug_str	00000000 
000049b8 l       .debug_str	00000000 
00004a2e l       .debug_str	00000000 
00004a96 l       .debug_str	00000000 
0000094b l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00000a32 l       .debug_str	00000000 
00004b72 l       .debug_str	00000000 
00004be7 l       .debug_str	00000000 
00004bfc l       .debug_str	00000000 
00004c63 l       .debug_str	00000000 
00004c6c l       .debug_str	00000000 
00004c77 l       .debug_str	00000000 
00004c7e l       .debug_str	00000000 
0001c21c l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00006bd8 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
0000dd28 l       .debug_str	00000000 
00004cb3 l       .debug_str	00000000 
0001840c l       .debug_str	00000000 
00001298 l       .debug_str	00000000 
00004ced l       .debug_str	00000000 
0001bbc7 l       .debug_str	00000000 
00019895 l       .debug_str	00000000 
00004d20 l       .debug_str	00000000 
00004d2d l       .debug_str	00000000 
00004d32 l       .debug_str	00000000 
00004d53 l       .debug_str	00000000 
00018c4c l       .debug_str	00000000 
000031f7 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
000031ff l       .debug_str	00000000 
00003204 l       .debug_str	00000000 
00004d61 l       .debug_str	00000000 
00004d58 l       .debug_str	00000000 
00004d66 l       .debug_str	00000000 
00004d6b l       .debug_str	00000000 
00004d70 l       .debug_str	00000000 
00004d75 l       .debug_str	00000000 
00004d7a l       .debug_str	00000000 
00004d7f l       .debug_str	00000000 
00004d8a l       .debug_str	00000000 
00004d95 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000eb7 l       .debug_str	00000000 
00000ebf l       .debug_str	00000000 
00000eca l       .debug_str	00000000 
00000ed5 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000eed l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000f15 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f38 l       .debug_str	00000000 
00000f44 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00000f69 l       .debug_str	00000000 
0000e16f l       .debug_str	00000000 
00000f76 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
00003304 l       .debug_str	00000000 
00014dbe l       .debug_str	00000000 
00003378 l       .debug_str	00000000 
00002cd7 l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00003384 l       .debug_str	00000000 
000033aa l       .debug_str	00000000 
00002cee l       .debug_str	00000000 
0001099c l       .debug_str	00000000 
00002cfd l       .debug_str	00000000 
000033d1 l       .debug_str	00000000 
000033b6 l       .debug_str	00000000 
000033dd l       .debug_str	00000000 
000033e8 l       .debug_str	00000000 
000033f3 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
000034ad l       .debug_str	00000000 
00003404 l       .debug_str	00000000 
0000092a l       .debug_str	00000000 
0000348b l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00003492 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
000034c1 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
0000351e l       .debug_str	00000000 
00003583 l       .debug_str	00000000 
0000358b l       .debug_str	00000000 
000035ad l       .debug_str	00000000 
00003594 l       .debug_str	00000000 
000035c5 l       .debug_str	00000000 
000035eb l       .debug_str	00000000 
00003663 l       .debug_str	00000000 
0000118e l       .debug_str	00000000 
0001a24a l       .debug_str	00000000 
00001198 l       .debug_str	00000000 
000011d0 l       .debug_str	00000000 
00001210 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001254 l       .debug_str	00000000 
0000123b l       .debug_str	00000000 
0000121f l       .debug_str	00000000 
000036da l       .debug_str	00000000 
00003743 l       .debug_str	00000000 
00000887 l       .debug_str	00000000 
00000aae l       .debug_str	00000000 
00001236 l       .debug_str	00000000 
0000125d l       .debug_str	00000000 
000037bb l       .debug_str	00000000 
00000f7d l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
00000871 l       .debug_str	00000000 
00000a24 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
00000a0e l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00025217 l       .debug_str	00000000 
0002281f l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
0001d48c l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00016f49 l       .debug_str	00000000 
00000fa7 l       .debug_str	00000000 
00000fd4 l       .debug_str	00000000 
0002240f l       .debug_str	00000000 
00018f74 l       .debug_str	00000000 
0001f202 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
0000099b l       .debug_str	00000000 
000008b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001032 l       .debug_str	00000000 
00001090 l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
00000a7e l       .debug_str	00000000 
00000a5e l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001022 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000866 l       .debug_str	00000000 
00000a17 l       .debug_str	00000000 
00000a86 l       .debug_str	00000000 
00001114 l       .debug_str	00000000 
00000a04 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
000008cd l       .debug_str	00000000 
0000112a l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000087c l       .debug_str	00000000 
00001166 l       .debug_str	00000000 
00004d4b l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
0000117c l       .debug_str	00000000 
00001185 l       .debug_str	00000000 
0000128e l       .debug_str	00000000 
00003825 l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
00019893 l       .debug_str	00000000 
00001275 l       .debug_str	00000000 
000038a3 l       .debug_str	00000000 
0001efce l       .debug_str	00000000 
000038c9 l       .debug_str	00000000 
000038b0 l       .debug_str	00000000 
000038ab l       .debug_str	00000000 
000038d4 l       .debug_str	00000000 
000038ed l       .debug_str	00000000 
00003958 l       .debug_str	00000000 
00000888 l       .debug_str	00000000 
00000aaf l       .debug_str	00000000 
000039c8 l       .debug_str	00000000 
000039d8 l       .debug_str	00000000 
00003a50 l       .debug_str	00000000 
00029660 l       .debug_str	00000000 
000219de l       .debug_str	00000000 
00003a5a l       .debug_str	00000000 
00003a61 l       .debug_str	00000000 
00003a84 l       .debug_str	00000000 
00003a6b l       .debug_str	00000000 
00003a66 l       .debug_str	00000000 
00003a8e l       .debug_str	00000000 
00003aa6 l       .debug_str	00000000 
00003b10 l       .debug_str	00000000 
000015f5 l       .debug_str	00000000 
00001601 l       .debug_str	00000000 
00001609 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
000016c5 l       .debug_str	00000000 
000016d0 l       .debug_str	00000000 
00001717 l       .debug_str	00000000 
00001766 l       .debug_str	00000000 
00001770 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017f2 l       .debug_str	00000000 
000017fb l       .debug_str	00000000 
0000180b l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
00001868 l       .debug_str	00000000 
000018c5 l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
000018da l       .debug_str	00000000 
000018e6 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001903 l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
00001920 l       .debug_str	00000000 
0000190b l       .debug_str	00000000 
00003b85 l       .debug_str	00000000 
00003bec l       .debug_str	00000000 
00003c67 l       .debug_str	00000000 
00003c77 l       .debug_str	00000000 
00003c80 l       .debug_str	00000000 
00003c8e l       .debug_str	00000000 
00003c9c l       .debug_str	00000000 
00003ca8 l       .debug_str	00000000 
00003eae l       .debug_str	00000000 
00003cb4 l       .debug_str	00000000 
00020ea2 l       .debug_str	00000000 
00003cc3 l       .debug_str	00000000 
00003cdc l       .debug_str	00000000 
00001948 l       .debug_str	00000000 
00003ced l       .debug_str	00000000 
00003cf5 l       .debug_str	00000000 
000064bb l       .debug_str	00000000 
00003d0f l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
000018fe l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00007a6d l       .debug_str	00000000 
00003d4d l       .debug_str	00000000 
00003d71 l       .debug_str	00000000 
00007a98 l       .debug_str	00000000 
00003d7a l       .debug_str	00000000 
00003da0 l       .debug_str	00000000 
00003dbb l       .debug_str	00000000 
00003e28 l       .debug_str	00000000 
00003ea5 l       .debug_str	00000000 
00003ead l       .debug_str	00000000 
00004156 l       .debug_str	00000000 
0000413d l       .debug_str	00000000 
00003eb7 l       .debug_str	00000000 
00003ed4 l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003fb9 l       .debug_str	00000000 
00003fca l       .debug_str	00000000 
00027a04 l       .debug_str	00000000 
00003fd8 l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1wuqwgqrvxmi91lq
00000c27 l       .debug_str	00000000 
00016cb9 l       .debug_str	00000000 
00004f20 l       .debug_str	00000000 
00016c19 l       .debug_str	00000000 
000032e4 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
00018c4c l       .debug_str	00000000 
000031f7 l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
000031ff l       .debug_str	00000000 
00003204 l       .debug_str	00000000 
00004d61 l       .debug_str	00000000 
00004d58 l       .debug_str	00000000 
0002cb33 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
000050f7 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
00004d9a l       .debug_str	00000000 
00016b37 l       .debug_str	00000000 
00004d9e l       .debug_str	00000000 
00004dcf l       .debug_str	00000000 
00004dd5 l       .debug_str	00000000 
00004e0c l       .debug_str	00000000 
00004e17 l       .debug_str	00000000 
00018650 l       .debug_str	00000000 
00004e49 l       .debug_str	00000000 
00016c80 l       .debug_str	00000000 
00004e7d l       .debug_str	00000000 
00016c6f l       .debug_str	00000000 
00004eb1 l       .debug_str	00000000 
00016c27 l       .debug_str	00000000 
00004ee8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2du2sg8zz9na7tg0
0001e44f l       .debug_str	00000000 
00004f9b l       .debug_str	00000000 
00004fd7 l       .debug_str	00000000 
00005016 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000c0a l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
00004f51 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3valib5llhls96ui
00006822 l       .debug_str	00000000 
00006c71 l       .debug_str	00000000 
00006c99 l       .debug_str	00000000 
00006cd4 l       .debug_str	00000000 
00006cfc l       .debug_str	00000000 
00006d36 l       .debug_str	00000000 
00006d5e l       .debug_str	00000000 
00006d89 l       .debug_str	00000000 
00006db1 l       .debug_str	00000000 
00006df5 l       .debug_str	00000000 
00006e1d l       .debug_str	00000000 
00006e53 l       .debug_str	00000000 
00006e7b l       .debug_str	00000000 
00006ea8 l       .debug_str	00000000 
00006ed0 l       .debug_str	00000000 
00006f10 l       .debug_str	00000000 
00006f38 l       .debug_str	00000000 
00006f77 l       .debug_str	00000000 
00006f9f l       .debug_str	00000000 
00006fc8 l       .debug_str	00000000 
00006ff0 l       .debug_str	00000000 
0000348b l       .debug_str	00000000 
00003492 l       .debug_str	00000000 
000034c1 l       .debug_str	00000000 
0000351e l       .debug_str	00000000 
00003583 l       .debug_str	00000000 
0000358b l       .debug_str	00000000 
00003594 l       .debug_str	00000000 
000035c5 l       .debug_str	00000000 
000035ad l       .debug_str	00000000 
00007024 l       .debug_str	00000000 
0000704c l       .debug_str	00000000 
00007080 l       .debug_str	00000000 
000070a8 l       .debug_str	00000000 
00005a1d l       .debug_str	00000000 
000070db l       .debug_str	00000000 
00007103 l       .debug_str	00000000 
00007145 l       .debug_str	00000000 
0000716d l       .debug_str	00000000 
000071a5 l       .debug_str	00000000 
000071cd l       .debug_str	00000000 
000071fe l       .debug_str	00000000 
0001cea0 l       .debug_str	00000000 
00018ef2 l       .debug_str	00000000 
00007205 l       .debug_str	00000000 
0000725b l       .debug_str	00000000 
00018a62 l       .debug_str	00000000 
000072b9 l       .debug_str	00000000 
00007310 l       .debug_str	00000000 
0001a12b l       .debug_str	00000000 
0000736f l       .debug_str	00000000 
000073c6 l       .debug_str	00000000 
00018bb9 l       .debug_str	00000000 
00007425 l       .debug_str	00000000 
0000747c l       .debug_str	00000000 
00021028 l       .debug_str	00000000 
000074db l       .debug_str	00000000 
00007544 l       .debug_str	00000000 
000186de l       .debug_str	00000000 
000075b5 l       .debug_str	00000000 
000075e3 l       .debug_str	00000000 
000075c2 l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
0000761a l       .debug_str	00000000 
000075f7 l       .debug_str	00000000 
0001c374 l       .debug_str	00000000 
00007625 l       .debug_str	00000000 
0000762b l       .debug_str	00000000 
00007635 l       .debug_str	00000000 
0000765d l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000076b3 l       .debug_str	00000000 
000076d7 l       .debug_str	00000000 
000076ff l       .debug_str	00000000 
00007748 l       .debug_str	00000000 
00007770 l       .debug_str	00000000 
0000779c l       .debug_str	00000000 
000077c4 l       .debug_str	00000000 
000077f6 l       .debug_str	00000000 
0000781e l       .debug_str	00000000 
00007860 l       .debug_str	00000000 
00007888 l       .debug_str	00000000 
00000888 l       .debug_str	00000000 
00000aaf l       .debug_str	00000000 
00000a32 l       .debug_str	00000000 
000078bc l       .debug_str	00000000 
000078e4 l       .debug_str	00000000 
0000790d l       .debug_str	00000000 
00007935 l       .debug_str	00000000 
00004be7 l       .debug_str	00000000 
00007964 l       .debug_str	00000000 
0000798c l       .debug_str	00000000 
000079bd l       .debug_str	00000000 
000079c9 l       .debug_str	00000000 
000079d5 l       .debug_str	00000000 
000079ea l       .debug_str	00000000 
00007a12 l       .debug_str	00000000 
00007a4d l       .debug_str	00000000 
00007a78 l       .debug_str	00000000 
00007aa5 l       .debug_str	00000000 
00007acd l       .debug_str	00000000 
00007afd l       .debug_str	00000000 
00007b25 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007b6b l       .debug_str	00000000 
00007b77 l       .debug_str	00000000 
00007b83 l       .debug_str	00000000 
00007b97 l       .debug_str	00000000 
00007bbf l       .debug_str	00000000 
00007bf9 l       .debug_str	00000000 
00007c21 l       .debug_str	00000000 
00007c5b l       .debug_str	00000000 
00007c83 l       .debug_str	00000000 
000048b7 l       .debug_str	00000000 
000048c0 l       .debug_str	00000000 
00007cc1 l       .debug_str	00000000 
00007ce9 l       .debug_str	00000000 
00007d11 l       .debug_str	00000000 
00007d39 l       .debug_str	00000000 
00007d72 l       .debug_str	00000000 
00007d7e l       .debug_str	00000000 
00007d88 l       .debug_str	00000000 
00007d9b l       .debug_str	00000000 
00007dc3 l       .debug_str	00000000 
00007dfc l       .debug_str	00000000 
00007e24 l       .debug_str	00000000 
00007e5e l       .debug_str	00000000 
00007e86 l       .debug_str	00000000 
00007ed0 l       .debug_str	00000000 
00007ef8 l       .debug_str	00000000 
00007f41 l       .debug_str	00000000 
00007f69 l       .debug_str	00000000 
00007fb2 l       .debug_str	00000000 
00007fda l       .debug_str	00000000 
00008009 l       .debug_str	00000000 
00008031 l       .debug_str	00000000 
0000805e l       .debug_str	00000000 
00008086 l       .debug_str	00000000 
000080b4 l       .debug_str	00000000 
000080dc l       .debug_str	00000000 
00008103 l       .debug_str	00000000 
0000812b l       .debug_str	00000000 
00008172 l       .debug_str	00000000 
0000819a l       .debug_str	00000000 
000081d2 l       .debug_str	00000000 
000081fa l       .debug_str	00000000 
0000823e l       .debug_str	00000000 
00008266 l       .debug_str	00000000 
0000828e l       .debug_str	00000000 
000082c7 l       .debug_str	00000000 
000082ef l       .debug_str	00000000 
00008315 l       .debug_str	00000000 
0000833d l       .debug_str	00000000 
00008377 l       .debug_str	00000000 
0000839f l       .debug_str	00000000 
000083d7 l       .debug_str	00000000 
000083ff l       .debug_str	00000000 
0000843b l       .debug_str	00000000 
00008463 l       .debug_str	00000000 
0000848f l       .debug_str	00000000 
000084b7 l       .debug_str	00000000 
000039c8 l       .debug_str	00000000 
000084f1 l       .debug_str	00000000 
00008519 l       .debug_str	00000000 
00008545 l       .debug_str	00000000 
0000856d l       .debug_str	00000000 
000085b6 l       .debug_str	00000000 
000085de l       .debug_str	00000000 
0000860a l       .debug_str	00000000 
00008632 l       .debug_str	00000000 
0000866a l       .debug_str	00000000 
00008692 l       .debug_str	00000000 
000086d3 l       .debug_str	00000000 
000086fb l       .debug_str	00000000 
0001b278 l       .debug_str	00000000 
00008734 l       .debug_str	00000000 
00008747 l       .debug_str	00000000 
00008752 l       .debug_str	00000000 
00005a2b l       .debug_str	00000000 
00008762 l       .debug_str	00000000 
0000878a l       .debug_str	00000000 
000087be l       .debug_str	00000000 
000087e6 l       .debug_str	00000000 
00008822 l       .debug_str	00000000 
0000884a l       .debug_str	00000000 
00008889 l       .debug_str	00000000 
000088b1 l       .debug_str	00000000 
000088ec l       .debug_str	00000000 
00008914 l       .debug_str	00000000 
0000894a l       .debug_str	00000000 
00008972 l       .debug_str	00000000 
0000899d l       .debug_str	00000000 
000089c5 l       .debug_str	00000000 
00008a00 l       .debug_str	00000000 
00018333 l       .debug_str	00000000 
00008a0f l       .debug_str	00000000 
00008a1e l       .debug_str	00000000 
00008a33 l       .debug_str	00000000 
00008a4b l       .debug_str	00000000 
00008a9e l       .debug_str	00000000 
00008af9 l       .debug_str	00000000 
00008b0e l       .debug_str	00000000 
00008b27 l       .debug_str	00000000 
00008b4f l       .debug_str	00000000 
00008b8e l       .debug_str	00000000 
00008bb6 l       .debug_str	00000000 
00008bf4 l       .debug_str	00000000 
00008c1c l       .debug_str	00000000 
00008c40 l       .debug_str	00000000 
00008c68 l       .debug_str	00000000 
00008c9e l       .debug_str	00000000 
00008cc6 l       .debug_str	00000000 
00008ceb l       .debug_str	00000000 
00008d13 l       .debug_str	00000000 
00008d4e l       .debug_str	00000000 
00008d76 l       .debug_str	00000000 
00008da8 l       .debug_str	00000000 
00008db2 l       .debug_str	00000000 
00008dbb l       .debug_str	00000000 
00008dcb l       .debug_str	00000000 
00008df3 l       .debug_str	00000000 
0000094b l       .debug_str	00000000 
00008e29 l       .debug_str	00000000 
00008e51 l       .debug_str	00000000 
00004c63 l       .debug_str	00000000 
00004c6c l       .debug_str	00000000 
00004c77 l       .debug_str	00000000 
00008e7c l       .debug_str	00000000 
00008ea4 l       .debug_str	00000000 
00008ec7 l       .debug_str	00000000 
00008eef l       .debug_str	00000000 
00008f28 l       .debug_str	00000000 
00008f50 l       .debug_str	00000000 
00008f8c l       .debug_str	00000000 
00008fb4 l       .debug_str	00000000 
00008ff0 l       .debug_str	00000000 
00009018 l       .debug_str	00000000 
00009051 l       .debug_str	00000000 
00009079 l       .debug_str	00000000 
000090b0 l       .debug_str	00000000 
000090d8 l       .debug_str	00000000 
00009103 l       .debug_str	00000000 
0000912b l       .debug_str	00000000 
0000916f l       .debug_str	00000000 
00009197 l       .debug_str	00000000 
000091d0 l       .debug_str	00000000 
000091f8 l       .debug_str	00000000 
0000922a l       .debug_str	00000000 
00009252 l       .debug_str	00000000 
00009287 l       .debug_str	00000000 
000092b0 l       .debug_str	00000000 
00001f0e l       .debug_str	00000000 
000092bd l       .debug_str	00000000 
00001f14 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
00020d02 l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000501d l       .debug_str	00000000 
00005043 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
000185f1 l       .debug_str	00000000 
0000504d l       .debug_str	00000000 
00005052 l       .debug_str	00000000 
0000505a l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00005064 l       .debug_str	00000000 
0001eba3 l       .debug_str	00000000 
00018ac2 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
0000506a l       .debug_str	00000000 
00005073 l       .debug_str	00000000 
00005089 l       .debug_str	00000000 
000050a7 l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
000050b0 l       .debug_str	00000000 
000050b9 l       .debug_str	00000000 
000050cf l       .debug_str	00000000 
000050ed l       .debug_str	00000000 
000050f7 l       .debug_str	00000000 
000050f2 l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
00005111 l       .debug_str	00000000 
00018854 l       .debug_str	00000000 
0000512f l       .debug_str	00000000 
00005144 l       .debug_str	00000000 
00018f42 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
00005161 l       .debug_str	00000000 
0000516b l       .debug_str	00000000 
00005182 l       .debug_str	00000000 
000051a1 l       .debug_str	00000000 
00018a08 l       .debug_str	00000000 
000051ab l       .debug_str	00000000 
00018c86 l       .debug_str	00000000 
00018f51 l       .debug_str	00000000 
000051b8 l       .debug_str	00000000 
00005206 l       .debug_str	00000000 
000199d9 l       .debug_str	00000000 
0000525c l       .debug_str	00000000 
00005261 l       .debug_str	00000000 
0002defb l       .debug_str	00000000 
0000526e l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00005277 l       .debug_str	00000000 
000052a0 l       .debug_str	00000000 
000052ee l       .debug_str	00000000 
00005412 l       .debug_str	00000000 
00005344 l       .debug_str	00000000 
0000536d l       .debug_str	00000000 
000053bb l       .debug_str	00000000 
00005411 l       .debug_str	00000000 
0000541b l       .debug_str	00000000 
00005444 l       .debug_str	00000000 
00005492 l       .debug_str	00000000 
000054e8 l       .debug_str	00000000 
000054ee l       .debug_str	00000000 
00005517 l       .debug_str	00000000 
00005565 l       .debug_str	00000000 
000055bb l       .debug_str	00000000 
000055c4 l       .debug_str	00000000 
000055ed l       .debug_str	00000000 
0000563b l       .debug_str	00000000 
000026fa l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00005691 l       .debug_str	00000000 
0001a6d6 l       .debug_str	00000000 
000056ac l       .debug_str	00000000 
000056b5 l       .debug_str	00000000 
000056bc l       .debug_str	00000000 
000056c9 l       .debug_str	00000000 
000056fb l       .debug_str	00000000 
00017e0f l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
00005735 l       .debug_str	00000000 
00005748 l       .debug_str	00000000 
00005763 l       .debug_str	00000000 
000008f2 l       .debug_str	00000000 
0000577d l       .debug_str	00000000 
0000578e l       .debug_str	00000000 
000057a7 l       .debug_str	00000000 
000057b8 l       .debug_str	00000000 
000057d1 l       .debug_str	00000000 
000057e2 l       .debug_str	00000000 
000057fb l       .debug_str	00000000 
0000580d l       .debug_str	00000000 
00003ff2 l       .debug_str	00000000 
00005827 l       .debug_str	00000000 
00015ce6 l       .debug_str	00000000 
0000583f l       .debug_str	00000000 
0001e44f l       .debug_str	00000000 
00015fea l       .debug_str	00000000 
000018fe l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00005878 l       .debug_str	00000000 
00005859 l       .debug_str	00000000 
00005884 l       .debug_str	00000000 
000058ad l       .debug_str	00000000 
0000588e l       .debug_str	00000000 
00025dbd l       .debug_str	00000000 
000058b9 l       .debug_str	00000000 
000058c0 l       .debug_str	00000000 
000058e9 l       .debug_str	00000000 
00005911 l       .debug_str	00000000 
00000f76 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
00001948 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
00000871 l       .debug_str	00000000 
00000a24 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
00000a0e l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00025217 l       .debug_str	00000000 
0002281f l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
0001d48c l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00016f49 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
00000fa7 l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000fd4 l       .debug_str	00000000 
0002240f l       .debug_str	00000000 
00018f74 l       .debug_str	00000000 
0001f202 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
0000099b l       .debug_str	00000000 
000008b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001032 l       .debug_str	00000000 
00001090 l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
00000a7e l       .debug_str	00000000 
00000a5e l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001022 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000866 l       .debug_str	00000000 
00000a17 l       .debug_str	00000000 
00000a86 l       .debug_str	00000000 
0000092a l       .debug_str	00000000 
00001114 l       .debug_str	00000000 
00000a04 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
000008cd l       .debug_str	00000000 
0000112a l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000087c l       .debug_str	00000000 
00001166 l       .debug_str	00000000 
00004d4b l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
00004831 l       .debug_str	00000000 
0000595a l       .debug_str	00000000 
00005982 l       .debug_str	00000000 
000059b8 l       .debug_str	00000000 
0001766c l       .debug_str	00000000 
00028706 l       .debug_str	00000000 
000059bd l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
000059c0 l       .debug_str	00000000 
000059d1 l       .debug_str	00000000 
00000c0a l       .debug_str	00000000 
000059ea l       .debug_str	00000000 
0002545b l       .debug_str	00000000 
0002da1c l       .debug_str	00000000 
000059f4 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a04 l       .debug_str	00000000 
00005a0b l       .debug_str	00000000 
00005a12 l       .debug_str	00000000 
00005a39 l       .debug_str	00000000 
00005a85 l       .debug_str	00000000 
00005ad9 l       .debug_str	00000000 
00005b14 l       .debug_str	00000000 
00005af7 l       .debug_str	00000000 
00005af2 l       .debug_str	00000000 
00005b1f l       .debug_str	00000000 
00005b6e l       .debug_str	00000000 
00005bc5 l       .debug_str	00000000 
00005bed l       .debug_str	00000000 
00005c29 l       .debug_str	00000000 
00018b41 l       .debug_str	00000000 
0002e475 l       .debug_str	00000000 
00005c32 l       .debug_str	00000000 
00005c94 l       .debug_str	00000000 
00005cfe l       .debug_str	00000000 
00005d2d l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
00005d41 l       .debug_str	00000000 
00005d4c l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
0000cd66 l       .debug_str	00000000 
00005d52 l       .debug_str	00000000 
00005d7a l       .debug_str	00000000 
000015f5 l       .debug_str	00000000 
00001601 l       .debug_str	00000000 
00001920 l       .debug_str	00000000 
00001609 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
000016c5 l       .debug_str	00000000 
000016d0 l       .debug_str	00000000 
00001717 l       .debug_str	00000000 
00001766 l       .debug_str	00000000 
00001770 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017f2 l       .debug_str	00000000 
000017fb l       .debug_str	00000000 
0000180b l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
00001868 l       .debug_str	00000000 
000018c5 l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
000018da l       .debug_str	00000000 
000018e6 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001903 l       .debug_str	00000000 
0000190b l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
00005daa l       .debug_str	00000000 
00005dd2 l       .debug_str	00000000 
00003378 l       .debug_str	00000000 
00002cd7 l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00003384 l       .debug_str	00000000 
000033aa l       .debug_str	00000000 
00002cee l       .debug_str	00000000 
0001099c l       .debug_str	00000000 
00002cfd l       .debug_str	00000000 
000033d1 l       .debug_str	00000000 
000033b6 l       .debug_str	00000000 
000033dd l       .debug_str	00000000 
000033e8 l       .debug_str	00000000 
000033f3 l       .debug_str	00000000 
000034ad l       .debug_str	00000000 
00005df5 l       .debug_str	00000000 
00005e1d l       .debug_str	00000000 
00000887 l       .debug_str	00000000 
00003ea5 l       .debug_str	00000000 
00003ead l       .debug_str	00000000 
00003d71 l       .debug_str	00000000 
00003eb7 l       .debug_str	00000000 
00004156 l       .debug_str	00000000 
0000413d l       .debug_str	00000000 
00000aae l       .debug_str	00000000 
00004138 l       .debug_str	00000000 
00004165 l       .debug_str	00000000 
00005e4d l       .debug_str	00000000 
00005e75 l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0000005d l       .debug_str	00000000 
000015d5 l       .debug_str	00000000 
00005ea9 l       .debug_str	00000000 
00005ed1 l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
0000118e l       .debug_str	00000000 
0001a24a l       .debug_str	00000000 
0000123b l       .debug_str	00000000 
00001198 l       .debug_str	00000000 
000011d0 l       .debug_str	00000000 
00001210 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000121f l       .debug_str	00000000 
00001254 l       .debug_str	00000000 
00019893 l       .debug_str	00000000 
00000f7d l       .debug_str	00000000 
0000117c l       .debug_str	00000000 
00001185 l       .debug_str	00000000 
00001236 l       .debug_str	00000000 
0000125d l       .debug_str	00000000 
0000128e l       .debug_str	00000000 
00001275 l       .debug_str	00000000 
000038a3 l       .debug_str	00000000 
0001efce l       .debug_str	00000000 
000038b0 l       .debug_str	00000000 
000038ab l       .debug_str	00000000 
000038d4 l       .debug_str	00000000 
000038c9 l       .debug_str	00000000 
00005f0d l       .debug_str	00000000 
00005f35 l       .debug_str	00000000 
00003a50 l       .debug_str	00000000 
00029660 l       .debug_str	00000000 
000219de l       .debug_str	00000000 
00003a5a l       .debug_str	00000000 
00003a61 l       .debug_str	00000000 
00003a84 l       .debug_str	00000000 
00003a6b l       .debug_str	00000000 
00003a66 l       .debug_str	00000000 
00003a8e l       .debug_str	00000000 
00005f5c l       .debug_str	00000000 
00005f84 l       .debug_str	00000000 
00003ced l       .debug_str	00000000 
00003d0f l       .debug_str	00000000 
00003cf5 l       .debug_str	00000000 
000064bb l       .debug_str	00000000 
00005fb8 l       .debug_str	00000000 
00005fe0 l       .debug_str	00000000 
00006008 l       .debug_str	00000000 
00006014 l       .debug_str	00000000 
0000603c l       .debug_str	00000000 
00006075 l       .debug_str	00000000 
0000609d l       .debug_str	00000000 
000060d0 l       .debug_str	00000000 
000060f8 l       .debug_str	00000000 
00006137 l       .debug_str	00000000 
0000615f l       .debug_str	00000000 
000061a0 l       .debug_str	00000000 
000061c8 l       .debug_str	00000000 
000061f9 l       .debug_str	00000000 
00006221 l       .debug_str	00000000 
00003fb9 l       .debug_str	00000000 
00003fc1 l       .debug_str	00000000 
00003fca l       .debug_str	00000000 
00027a04 l       .debug_str	00000000 
00003fd8 l       .debug_str	00000000 
00003c67 l       .debug_str	00000000 
00003c77 l       .debug_str	00000000 
00003c80 l       .debug_str	00000000 
00003c8e l       .debug_str	00000000 
00003c9c l       .debug_str	00000000 
00003ca8 l       .debug_str	00000000 
00003eae l       .debug_str	00000000 
00003cb4 l       .debug_str	00000000 
00020ea2 l       .debug_str	00000000 
00003cc3 l       .debug_str	00000000 
00003cdc l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
00007a6d l       .debug_str	00000000 
00003d4d l       .debug_str	00000000 
00003da0 l       .debug_str	00000000 
00007a98 l       .debug_str	00000000 
00003d7a l       .debug_str	00000000 
00003fdf l       .debug_str	00000000 
00003fe7 l       .debug_str	00000000 
00004002 l       .debug_str	00000000 
00004006 l       .debug_str	00000000 
0000825e l       .debug_str	00000000 
00004021 l       .debug_str	00000000 
00004042 l       .debug_str	00000000 
00006247 l       .debug_str	00000000 
0000626f l       .debug_str	00000000 
00025a79 l       .debug_str	00000000 
000062a1 l       .debug_str	00000000 
000062aa l       .debug_str	00000000 
000062b2 l       .debug_str	00000000 
0000e0da l       .debug_str	00000000 
000062bc l       .debug_str	00000000 
000062e4 l       .debug_str	00000000 
00006314 l       .debug_str	00000000 
0000633c l       .debug_str	00000000 
000015de l       .debug_str	00000000 
000015ed l       .debug_str	00000000 
0000193a l       .debug_str	00000000 
0001e968 l       .debug_str	00000000 
00001940 l       .debug_str	00000000 
00001952 l       .debug_str	00000000 
0002e85d l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00001971 l       .debug_str	00000000 
0000197a l       .debug_str	00000000 
00002d66 l       .debug_str	00000000 
00001983 l       .debug_str	00000000 
000283ef l       .debug_str	00000000 
0000198b l       .debug_str	00000000 
00001997 l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019aa l       .debug_str	00000000 
000019b2 l       .debug_str	00000000 
00001aae l       .debug_str	00000000 
00001bb2 l       .debug_str	00000000 
00001bc0 l       .debug_str	00000000 
000287fb l       .debug_str	00000000 
00001bee l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001bf9 l       .debug_str	00000000 
00001c74 l       .debug_str	00000000 
00001cf7 l       .debug_str	00000000 
00001d05 l       .debug_str	00000000 
00001d64 l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001de1 l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
0001b53d l       .debug_str	00000000 
00001e00 l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
0002e198 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e26 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e72 l       .debug_str	00000000 
00001e4f l       .debug_str	00000000 
00001e82 l       .debug_str	00000000 
00001ec2 l       .debug_str	00000000 
0001afe8 l       .debug_str	00000000 
00001f0a l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00001f16 l       .debug_str	00000000 
00001f3f l       .debug_str	00000000 
00001f1c l       .debug_str	00000000 
00001f51 l       .debug_str	00000000 
00001f93 l       .debug_str	00000000 
0001ae9a l       .debug_str	00000000 
00001fdd l       .debug_str	00000000 
00001fe3 l       .debug_str	00000000 
00001fe9 l       .debug_str	00000000 
00002012 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00002024 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
0001a0ee l       .debug_str	00000000 
000020b0 l       .debug_str	00000000 
000020b6 l       .debug_str	00000000 
000020bc l       .debug_str	00000000 
000020c2 l       .debug_str	00000000 
000020eb l       .debug_str	00000000 
000020c8 l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
0000213d l       .debug_str	00000000 
00002186 l       .debug_str	00000000 
0000218b l       .debug_str	00000000 
0001b2a3 l       .debug_str	00000000 
00002190 l       .debug_str	00000000 
00002196 l       .debug_str	00000000 
0000219c l       .debug_str	00000000 
000021c5 l       .debug_str	00000000 
000021a2 l       .debug_str	00000000 
000021d6 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
0001a1c2 l       .debug_str	00000000 
00002260 l       .debug_str	00000000 
0000228c l       .debug_str	00000000 
00002269 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000022de l       .debug_str	00000000 
00002327 l       .debug_str	00000000 
0001b4e0 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00002367 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023bb l       .debug_str	00000000 
0001b120 l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002417 l       .debug_str	00000000 
0000241d l       .debug_str	00000000 
00002425 l       .debug_str	00000000 
00002433 l       .debug_str	00000000 
00002442 l       .debug_str	00000000 
00002453 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002469 l       .debug_str	00000000 
00002474 l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
000024c1 l       .debug_str	00000000 
0000249e l       .debug_str	00000000 
000024d3 l       .debug_str	00000000 
00002515 l       .debug_str	00000000 
0001a2e7 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000258c l       .debug_str	00000000 
00002569 l       .debug_str	00000000 
0000259e l       .debug_str	00000000 
000025e0 l       .debug_str	00000000 
0000262a l       .debug_str	00000000 
0000262f l       .debug_str	00000000 
0000265c l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0000266e l       .debug_str	00000000 
000026b0 l       .debug_str	00000000 
00002779 l       .debug_str	00000000 
0000270e l       .debug_str	00000000 
0000271e l       .debug_str	00000000 
00002727 l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002741 l       .debug_str	00000000 
00002756 l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
00002824 l       .debug_str	00000000 
000028c9 l       .debug_str	00000000 
000028d4 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002921 l       .debug_str	00000000 
000028fe l       .debug_str	00000000 
00002934 l       .debug_str	00000000 
000029b7 l       .debug_str	00000000 
00002a42 l       .debug_str	00000000 
00002a5e l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002afe l       .debug_str	00000000 
00002b1b l       .debug_str	00000000 
00002b2f l       .debug_str	00000000 
00002b7b l       .debug_str	00000000 
00002bcf l       .debug_str	00000000 
00002be5 l       .debug_str	00000000 
00002bf9 l       .debug_str	00000000 
00002c40 l       .debug_str	00000000 
00002c8f l       .debug_str	00000000 
00002cbb l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002cc9 l       .debug_str	00000000 
00002ccf l       .debug_str	00000000 
00002ce6 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002d13 l       .debug_str	00000000 
0002e235 l       .debug_str	00000000 
00002d24 l       .debug_str	00000000 
00002d2c l       .debug_str	00000000 
00002d33 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d45 l       .debug_str	00000000 
00002d4d l       .debug_str	00000000 
00002d6f l       .debug_str	00000000 
00002d7a l       .debug_str	00000000 
00002d86 l       .debug_str	00000000 
00002d8e l       .debug_str	00000000 
00002d97 l       .debug_str	00000000 
0001d84b l       .debug_str	00000000 
00002da2 l       .debug_str	00000000 
00002dad l       .debug_str	00000000 
00002db8 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002e0b l       .debug_str	00000000 
00002e20 l       .debug_str	00000000 
00002e29 l       .debug_str	00000000 
00002e86 l       .debug_str	00000000 
00002eeb l       .debug_str	00000000 
00002ef5 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f1a l       .debug_str	00000000 
00002f22 l       .debug_str	00000000 
00002f86 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
00002ff9 l       .debug_str	00000000 
00003001 l       .debug_str	00000000 
00003042 l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003052 l       .debug_str	00000000 
00003067 l       .debug_str	00000000 
0000307a l       .debug_str	00000000 
0002e23c l       .debug_str	00000000 
0000308f l       .debug_str	00000000 
000030a4 l       .debug_str	00000000 
0000a163 l       .debug_str	00000000 
0000c06a l       .debug_str	00000000 
000030ce l       .debug_str	00000000 
000030d5 l       .debug_str	00000000 
00002dfb l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
0000f665 l       .debug_str	00000000 
00006361 l       .debug_str	00000000 
00006389 l       .debug_str	00000000 
000063cd l       .debug_str	00000000 
000063f5 l       .debug_str	00000000 
00006432 l       .debug_str	00000000 
0000645a l       .debug_str	00000000 
0000649b l       .debug_str	00000000 
000064c7 l       .debug_str	00000000 
000064ef l       .debug_str	00000000 
0000652c l       .debug_str	00000000 
00006554 l       .debug_str	00000000 
00006589 l       .debug_str	00000000 
000065b1 l       .debug_str	00000000 
000065e6 l       .debug_str	00000000 
0000660e l       .debug_str	00000000 
000044b1 l       .debug_str	00000000 
000044b8 l       .debug_str	00000000 
000044c3 l       .debug_str	00000000 
000044eb l       .debug_str	00000000 
00004560 l       .debug_str	00000000 
000045dd l       .debug_str	00000000 
000044dc l       .debug_str	00000000 
00006649 l       .debug_str	00000000 
00006671 l       .debug_str	00000000 
0000669c l       .debug_str	00000000 
000066a5 l       .debug_str	00000000 
000066e7 l       .debug_str	00000000 
00006731 l       .debug_str	00000000 
00006738 l       .debug_str	00000000 
0000d1de l       .debug_str	00000000 
00006746 l       .debug_str	00000000 
0000676e l       .debug_str	00000000 
0000679b l       .debug_str	00000000 
000067c3 l       .debug_str	00000000 
000067fa l       .debug_str	00000000 
00006869 l       .debug_str	00000000 
00006891 l       .debug_str	00000000 
000068c9 l       .debug_str	00000000 
000068cd l       .debug_str	00000000 
000068f3 l       .debug_str	00000000 
0000694a l       .debug_str	00000000 
0002e503 l       .debug_str	00000000 
000069a9 l       .debug_str	00000000 
000069fe l       .debug_str	00000000 
00006a7e l       .debug_str	00000000 
00006a5b l       .debug_str	00000000 
000068ee l       .debug_str	00000000 
00006a8b l       .debug_str	00000000 
00006ab3 l       .debug_str	00000000 
00006adc l       .debug_str	00000000 
00006b04 l       .debug_str	00000000 
00006b3f l       .debug_str	00000000 
00006b48 l       .debug_str	00000000 
00006b50 l       .debug_str	00000000 
00006b5b l       .debug_str	00000000 
00006b83 l       .debug_str	00000000 
000041e7 l       .debug_str	00000000 
000041ef l       .debug_str	00000000 
000041f5 l       .debug_str	00000000 
00006bb2 l       .debug_str	00000000 
00006bda l       .debug_str	00000000 
00006c00 l       .debug_str	00000000 
00006c28 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4lgf3tl1y6qi0s1s
00002cbb l       .debug_str	00000000 
00009373 l       .debug_str	00000000 
000093b3 l       .debug_str	00000000 
000032e4 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
0002022a l       .debug_str	00000000 
00009401 l       .debug_str	00000000 
00009406 l       .debug_str	00000000 
00004d2d l       .debug_str	00000000 
0000940c l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
0001f821 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000eb7 l       .debug_str	00000000 
00000ebf l       .debug_str	00000000 
00000eca l       .debug_str	00000000 
00000ed5 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000eed l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000f15 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f38 l       .debug_str	00000000 
00000f44 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00000f69 l       .debug_str	00000000 
0000e16f l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0000005d l       .debug_str	00000000 
000015d5 l       .debug_str	00000000 
0000193a l       .debug_str	00000000 
00000f76 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
000015f5 l       .debug_str	00000000 
00001601 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
00001609 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
000016c5 l       .debug_str	00000000 
000016d0 l       .debug_str	00000000 
00001717 l       .debug_str	00000000 
00001766 l       .debug_str	00000000 
00001770 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017f2 l       .debug_str	00000000 
000017fb l       .debug_str	00000000 
0000180b l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
00001868 l       .debug_str	00000000 
000018c5 l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
000018da l       .debug_str	00000000 
000018e6 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00001903 l       .debug_str	00000000 
0000092a l       .debug_str	00000000 
0000190b l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
00001920 l       .debug_str	00000000 
0001e968 l       .debug_str	00000000 
00001940 l       .debug_str	00000000 
00001948 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
00000871 l       .debug_str	00000000 
00000a24 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
00000a0e l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00025217 l       .debug_str	00000000 
0002281f l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
0001d48c l       .debug_str	00000000 
00016f49 l       .debug_str	00000000 
00000fa7 l       .debug_str	00000000 
00000fd4 l       .debug_str	00000000 
0002240f l       .debug_str	00000000 
00018f74 l       .debug_str	00000000 
0001f202 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
0000099b l       .debug_str	00000000 
000008b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001032 l       .debug_str	00000000 
00001090 l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
00000a7e l       .debug_str	00000000 
00000a5e l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001022 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000866 l       .debug_str	00000000 
00000a17 l       .debug_str	00000000 
00000a86 l       .debug_str	00000000 
00001114 l       .debug_str	00000000 
00000a04 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
000008cd l       .debug_str	00000000 
0000112a l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000087c l       .debug_str	00000000 
00001166 l       .debug_str	00000000 
00004d4b l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
00001952 l       .debug_str	00000000 
0002e85d l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00001971 l       .debug_str	00000000 
0000197a l       .debug_str	00000000 
00002d66 l       .debug_str	00000000 
00001983 l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000283ef l       .debug_str	00000000 
0000198b l       .debug_str	00000000 
00001997 l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019aa l       .debug_str	00000000 
0000a163 l       .debug_str	00000000 
0000c06a l       .debug_str	00000000 
000019b2 l       .debug_str	00000000 
00001aae l       .debug_str	00000000 
00001bb2 l       .debug_str	00000000 
00001bc0 l       .debug_str	00000000 
000287fb l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00001bee l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001bf9 l       .debug_str	00000000 
00001c74 l       .debug_str	00000000 
00001cf7 l       .debug_str	00000000 
00001d05 l       .debug_str	00000000 
00001d64 l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001de1 l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
0001b53d l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00001e00 l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
0002e198 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e26 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e72 l       .debug_str	00000000 
00001e4f l       .debug_str	00000000 
00001e82 l       .debug_str	00000000 
00001ec2 l       .debug_str	00000000 
0001afe8 l       .debug_str	00000000 
00001f0a l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00001f16 l       .debug_str	00000000 
00001f3f l       .debug_str	00000000 
00001f1c l       .debug_str	00000000 
00001f51 l       .debug_str	00000000 
00001f93 l       .debug_str	00000000 
0001ae9a l       .debug_str	00000000 
00001fdd l       .debug_str	00000000 
00001fe3 l       .debug_str	00000000 
00001fe9 l       .debug_str	00000000 
00002012 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00002024 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
0001a0ee l       .debug_str	00000000 
000020b0 l       .debug_str	00000000 
000020b6 l       .debug_str	00000000 
000020bc l       .debug_str	00000000 
000020c2 l       .debug_str	00000000 
000020eb l       .debug_str	00000000 
000020c8 l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
0000213d l       .debug_str	00000000 
00002186 l       .debug_str	00000000 
0000218b l       .debug_str	00000000 
0001b2a3 l       .debug_str	00000000 
00002190 l       .debug_str	00000000 
00002196 l       .debug_str	00000000 
0000219c l       .debug_str	00000000 
000021c5 l       .debug_str	00000000 
000021a2 l       .debug_str	00000000 
000021d6 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
0001a1c2 l       .debug_str	00000000 
00002260 l       .debug_str	00000000 
0000228c l       .debug_str	00000000 
00002269 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000022de l       .debug_str	00000000 
00002327 l       .debug_str	00000000 
0001b4e0 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00002367 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023bb l       .debug_str	00000000 
0001b120 l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002417 l       .debug_str	00000000 
0000241d l       .debug_str	00000000 
00002425 l       .debug_str	00000000 
00002433 l       .debug_str	00000000 
00002442 l       .debug_str	00000000 
00002453 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002469 l       .debug_str	00000000 
00002474 l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
000024c1 l       .debug_str	00000000 
0000249e l       .debug_str	00000000 
000024d3 l       .debug_str	00000000 
00002515 l       .debug_str	00000000 
0001a2e7 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000258c l       .debug_str	00000000 
00002569 l       .debug_str	00000000 
0000259e l       .debug_str	00000000 
000025e0 l       .debug_str	00000000 
0000262a l       .debug_str	00000000 
0000262f l       .debug_str	00000000 
0000265c l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0000266e l       .debug_str	00000000 
000026b0 l       .debug_str	00000000 
000026fa l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00002779 l       .debug_str	00000000 
0000270e l       .debug_str	00000000 
0000271e l       .debug_str	00000000 
00002727 l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002741 l       .debug_str	00000000 
00002756 l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
00002824 l       .debug_str	00000000 
000028c9 l       .debug_str	00000000 
000028d4 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002921 l       .debug_str	00000000 
000028fe l       .debug_str	00000000 
00002934 l       .debug_str	00000000 
000029b7 l       .debug_str	00000000 
00002a42 l       .debug_str	00000000 
00002a5e l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002afe l       .debug_str	00000000 
00002b1b l       .debug_str	00000000 
00002b2f l       .debug_str	00000000 
00002b7b l       .debug_str	00000000 
00002bcf l       .debug_str	00000000 
00002be5 l       .debug_str	00000000 
00002bf9 l       .debug_str	00000000 
00002c40 l       .debug_str	00000000 
00002c8f l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002cc9 l       .debug_str	00000000 
00002ccf l       .debug_str	00000000 
00002cd7 l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00002ce6 l       .debug_str	00000000 
00002cee l       .debug_str	00000000 
0001099c l       .debug_str	00000000 
00002cfd l       .debug_str	00000000 
000033d1 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002d13 l       .debug_str	00000000 
0002e235 l       .debug_str	00000000 
00002d24 l       .debug_str	00000000 
00002d2c l       .debug_str	00000000 
00002d33 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d45 l       .debug_str	00000000 
00002d4d l       .debug_str	00000000 
00002d6f l       .debug_str	00000000 
00002d7a l       .debug_str	00000000 
00002d86 l       .debug_str	00000000 
00002d8e l       .debug_str	00000000 
00002d97 l       .debug_str	00000000 
0001d84b l       .debug_str	00000000 
00002da2 l       .debug_str	00000000 
00002dad l       .debug_str	00000000 
00002db8 l       .debug_str	00000000 
0000118e l       .debug_str	00000000 
0001a24a l       .debug_str	00000000 
0000123b l       .debug_str	00000000 
00001198 l       .debug_str	00000000 
000011d0 l       .debug_str	00000000 
00001210 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000121f l       .debug_str	00000000 
00001254 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
000015de l       .debug_str	00000000 
000015ed l       .debug_str	00000000 
000030ce l       .debug_str	00000000 
000030d5 l       .debug_str	00000000 
0000f665 l       .debug_str	00000000 
00002dfb l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
00002e0b l       .debug_str	00000000 
00002e20 l       .debug_str	00000000 
00002e29 l       .debug_str	00000000 
00002e86 l       .debug_str	00000000 
00002eeb l       .debug_str	00000000 
00002ef5 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f1a l       .debug_str	00000000 
00002f22 l       .debug_str	00000000 
00002f86 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
00002ff9 l       .debug_str	00000000 
00003001 l       .debug_str	00000000 
00003042 l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003052 l       .debug_str	00000000 
00003067 l       .debug_str	00000000 
0000307a l       .debug_str	00000000 
0002e23c l       .debug_str	00000000 
0000308f l       .debug_str	00000000 
000030a4 l       .debug_str	00000000 
00006bd8 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
000092c6 l       .debug_str	00000000 
00009315 l       .debug_str	00000000 
00009348 l       .debug_str	00000000 
00000b9a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53p77fu6egnumvbj
00000d26 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
00009429 l       .debug_str	00000000 
0000945b l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
00000be8 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
00000c02 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c16 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c24 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0002613b l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
00000c3e l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000c4b l       .debug_str	00000000 
00000c53 l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000c64 l       .debug_str	00000000 
00000c87 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000cab l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d21 l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 990d6l6ak6pc2mb
00000d57 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d21 l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
000095b2 l       .debug_str	00000000 
000095c6 l       .debug_str	00000000 
000226ac l       .debug_str	00000000 
000095cf l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
000095da l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000eb7 l       .debug_str	00000000 
00000ebf l       .debug_str	00000000 
00000eca l       .debug_str	00000000 
00000ed5 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000eed l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000f15 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f38 l       .debug_str	00000000 
00000f44 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00000f69 l       .debug_str	00000000 
0000e16f l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
00009462 l       .debug_str	00000000 
0001c5f4 l       .debug_str	00000000 
000094e7 l       .debug_str	00000000 
00009554 l       .debug_str	00000000 
00020e2e l       .debug_str	00000000 
0001719c l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000940c l       .debug_str	00000000 
00012330 l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 c0nsy7lie6h0iq6
00000cab l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
00000c3e l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000c4b l       .debug_str	00000000 
00000c53 l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000c64 l       .debug_str	00000000 
00000c87 l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d21 l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
00010e82 l       .debug_str	00000000 
0000d1fa l       .debug_str	00000000 
0000b1d8 l       .debug_str	00000000 
00021a3c l       .debug_str	00000000 
0002a56c l       .debug_str	00000000 
000098a6 l       .debug_str	00000000 
0000c8fd l       .debug_str	00000000 
000098aa l       .debug_str	00000000 
0002e31d l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
000185f1 l       .debug_str	00000000 
000095e5 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
00018c4c l       .debug_str	00000000 
000031f7 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
000031ff l       .debug_str	00000000 
00003204 l       .debug_str	00000000 
00004d61 l       .debug_str	00000000 
000095f2 l       .debug_str	00000000 
00009677 l       .debug_str	00000000 
0000968d l       .debug_str	00000000 
0001d3f6 l       .debug_str	00000000 
000096b4 l       .debug_str	00000000 
00012dfb l       .debug_str	00000000 
000096dc l       .debug_str	00000000 
0000970a l       .debug_str	00000000 
00009714 l       .debug_str	00000000 
00005016 l       .debug_str	00000000 
0000973f l       .debug_str	00000000 
0001e44f l       .debug_str	00000000 
00009767 l       .debug_str	00000000 
0002e39d l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
00009794 l       .debug_str	00000000 
000097c0 l       .debug_str	00000000 
000097c8 l       .debug_str	00000000 
000097f8 l       .debug_str	00000000 
00009803 l       .debug_str	00000000 
0001ec1a l       .debug_str	00000000 
00009830 l       .debug_str	00000000 
00009866 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
00004d58 l       .debug_str	00000000 
00016c9f l       .debug_str	00000000 
0000d1f9 l       .debug_str	00000000 
00009877 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000e2e0 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
0000989a l       .debug_str	00000000 
0000988b l       .debug_str	00000000 
00009880 l       .debug_str	00000000 
00009401 l       .debug_str	00000000 
0000988a l       .debug_str	00000000 
00004d2d l       .debug_str	00000000 
00004d53 l       .debug_str	00000000 
00000be8 l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
00000c02 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000c16 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c24 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0002613b l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
00029f10 l     O .text	00000016 str.0
00029f30 l     O .text	0000001c str.1
00029fa0 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 jr0kxk1bohkgei8
0001b1fb l       .debug_str	00000000 
00000c64 l       .debug_str	00000000 
00000c87 l       .debug_str	00000000 
00000cab l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d21 l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
00010e82 l       .debug_str	00000000 
00028895 l       .debug_str	00000000 
00009c71 l       .debug_str	00000000 
00020e2e l       .debug_str	00000000 
00009c7a l       .debug_str	00000000 
0002e31d l       .debug_str	00000000 
00009c84 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
000098b1 l       .debug_str	00000000 
000098e8 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
000098ff l       .debug_str	00000000 
00009909 l       .debug_str	00000000 
00009957 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00009966 l       .debug_str	00000000 
000099b9 l       .debug_str	00000000 
00018368 l       .debug_str	00000000 
000099cd l       .debug_str	00000000 
00009a13 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000e2e0 l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
0000989a l       .debug_str	00000000 
00009a21 l       .debug_str	00000000 
00009a68 l       .debug_str	00000000 
00009a71 l       .debug_str	00000000 
00009aba l       .debug_str	00000000 
00004d7f l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00021a3c l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
000098a6 l       .debug_str	00000000 
00009ac6 l       .debug_str	00000000 
00009ad5 l       .debug_str	00000000 
00009b51 l       .debug_str	00000000 
00009b80 l       .debug_str	00000000 
00009bed l       .debug_str	00000000 
00009bff l       .debug_str	00000000 
00009c61 l       .debug_str	00000000 
0001c7ca l       .debug_str	00000000 
0001e44f l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000036a l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
00009877 l       .debug_str	00000000 
0000b3f0 l       .debug_str	00000000 
00009880 l       .debug_str	00000000 
00009401 l       .debug_str	00000000 
00009c69 l       .debug_str	00000000 
00004d2d l       .debug_str	00000000 
00004d53 l       .debug_str	00000000 
00000be8 l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
00000c02 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000c16 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c24 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0002613b l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
00000c3e l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000c4b l       .debug_str	00000000 
00000c53 l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00029ff0 l     O .text	00000048 str.0
0002a040 l     O .text	00000039 str.1
00000000 l    df *ABS*	00000000 rc2xvhomxzc53nn
00002ce6 l       .debug_str	00000000 
0000a0c7 l       .debug_str	00000000 
0000a0d2 l       .debug_str	00000000 
0000a0fc l       .debug_str	00000000 
0000a12b l       .debug_str	00000000 
0000a155 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
0000a163 l       .debug_str	00000000 
0000a162 l       .debug_str	00000000 
0000a1df l       .debug_str	00000000 
00001f0e l       .debug_str	00000000 
00001f14 l       .debug_str	00000000 
0001a6d6 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0001e44f l       .debug_str	00000000 
00001f1a l       .debug_str	00000000 
0000036a l       .debug_str	00000000 
00004d7f l       .debug_str	00000000 
0001a616 l       .debug_str	00000000 
0002dfda l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
00020d02 l       .debug_str	00000000 
00009c8b l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00009de2 l       .debug_str	00000000 
00009d3f l       .debug_str	00000000 
00009c92 l       .debug_str	00000000 
00009cd0 l       .debug_str	00000000 
00009cdc l       .debug_str	00000000 
00009d1f l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
00009d2f l       .debug_str	00000000 
00009d50 l       .debug_str	00000000 
00009dc3 l       .debug_str	00000000 
000092bd l       .debug_str	00000000 
00009dd2 l       .debug_str	00000000 
00009df4 l       .debug_str	00000000 
00009e38 l       .debug_str	00000000 
00009e49 l       .debug_str	00000000 
00009e8d l       .debug_str	00000000 
0002e56e l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00009e9d l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0000005d l       .debug_str	00000000 
000015d5 l       .debug_str	00000000 
0000193a l       .debug_str	00000000 
00000f76 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
000015f5 l       .debug_str	00000000 
00001601 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
00001609 l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
000016c5 l       .debug_str	00000000 
000016d0 l       .debug_str	00000000 
00001717 l       .debug_str	00000000 
00001766 l       .debug_str	00000000 
00001770 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017f2 l       .debug_str	00000000 
000017fb l       .debug_str	00000000 
0000180b l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
00001868 l       .debug_str	00000000 
000018c5 l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
000018da l       .debug_str	00000000 
000018e6 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00001903 l       .debug_str	00000000 
0000092a l       .debug_str	00000000 
0000190b l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
00001920 l       .debug_str	00000000 
0001e968 l       .debug_str	00000000 
00001940 l       .debug_str	00000000 
00001948 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000871 l       .debug_str	00000000 
00000a24 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
00000a0e l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00025217 l       .debug_str	00000000 
0002281f l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
0001d48c l       .debug_str	00000000 
00016f49 l       .debug_str	00000000 
00000fa7 l       .debug_str	00000000 
00000fd4 l       .debug_str	00000000 
0002240f l       .debug_str	00000000 
00018f74 l       .debug_str	00000000 
0001f202 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
0000099b l       .debug_str	00000000 
000008b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001032 l       .debug_str	00000000 
00001090 l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
00000a7e l       .debug_str	00000000 
00000a5e l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001022 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000866 l       .debug_str	00000000 
00000a17 l       .debug_str	00000000 
00000a86 l       .debug_str	00000000 
00001114 l       .debug_str	00000000 
00000a04 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
000008cd l       .debug_str	00000000 
0000112a l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000087c l       .debug_str	00000000 
00001166 l       .debug_str	00000000 
00004d4b l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
00001952 l       .debug_str	00000000 
0002e85d l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00001971 l       .debug_str	00000000 
0000197a l       .debug_str	00000000 
00002d66 l       .debug_str	00000000 
00001983 l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000283ef l       .debug_str	00000000 
0000198b l       .debug_str	00000000 
00001997 l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019aa l       .debug_str	00000000 
00009ea1 l       .debug_str	00000000 
0000c06a l       .debug_str	00000000 
000019b2 l       .debug_str	00000000 
00001aae l       .debug_str	00000000 
00001bb2 l       .debug_str	00000000 
00001bc0 l       .debug_str	00000000 
000287fb l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00001bee l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001bf9 l       .debug_str	00000000 
00001c74 l       .debug_str	00000000 
00001cf7 l       .debug_str	00000000 
00001d05 l       .debug_str	00000000 
00001d64 l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001de1 l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
0001b53d l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00001e00 l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
0002e198 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e26 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e72 l       .debug_str	00000000 
00001e4f l       .debug_str	00000000 
00001e82 l       .debug_str	00000000 
00001ec2 l       .debug_str	00000000 
0001afe8 l       .debug_str	00000000 
00001f0a l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00001f16 l       .debug_str	00000000 
00001f3f l       .debug_str	00000000 
00001f1c l       .debug_str	00000000 
00001f51 l       .debug_str	00000000 
00001f93 l       .debug_str	00000000 
0001ae9a l       .debug_str	00000000 
00001fdd l       .debug_str	00000000 
00001fe3 l       .debug_str	00000000 
00001fe9 l       .debug_str	00000000 
00002012 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00002024 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
0001a0ee l       .debug_str	00000000 
000020b0 l       .debug_str	00000000 
000020b6 l       .debug_str	00000000 
000020bc l       .debug_str	00000000 
000020c2 l       .debug_str	00000000 
000020eb l       .debug_str	00000000 
000020c8 l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
0000213d l       .debug_str	00000000 
00002186 l       .debug_str	00000000 
0000218b l       .debug_str	00000000 
0001b2a3 l       .debug_str	00000000 
00002190 l       .debug_str	00000000 
00002196 l       .debug_str	00000000 
0000219c l       .debug_str	00000000 
000021c5 l       .debug_str	00000000 
000021a2 l       .debug_str	00000000 
000021d6 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
0001a1c2 l       .debug_str	00000000 
00002260 l       .debug_str	00000000 
0000228c l       .debug_str	00000000 
00002269 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000022de l       .debug_str	00000000 
00002327 l       .debug_str	00000000 
0001b4e0 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00002367 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023bb l       .debug_str	00000000 
0001b120 l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002417 l       .debug_str	00000000 
0000241d l       .debug_str	00000000 
00002425 l       .debug_str	00000000 
00002433 l       .debug_str	00000000 
00002442 l       .debug_str	00000000 
00002453 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002469 l       .debug_str	00000000 
00002474 l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
000024c1 l       .debug_str	00000000 
0000249e l       .debug_str	00000000 
000024d3 l       .debug_str	00000000 
00002515 l       .debug_str	00000000 
0001a2e7 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000258c l       .debug_str	00000000 
00002569 l       .debug_str	00000000 
0000259e l       .debug_str	00000000 
000025e0 l       .debug_str	00000000 
0000262a l       .debug_str	00000000 
0000262f l       .debug_str	00000000 
0000265c l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0000266e l       .debug_str	00000000 
000026b0 l       .debug_str	00000000 
000026fa l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00002779 l       .debug_str	00000000 
0000270e l       .debug_str	00000000 
0000271e l       .debug_str	00000000 
00002727 l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002741 l       .debug_str	00000000 
00002756 l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
00002824 l       .debug_str	00000000 
000028c9 l       .debug_str	00000000 
000028d4 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002921 l       .debug_str	00000000 
000028fe l       .debug_str	00000000 
00002934 l       .debug_str	00000000 
000029b7 l       .debug_str	00000000 
00002a42 l       .debug_str	00000000 
00002a5e l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002afe l       .debug_str	00000000 
00002b1b l       .debug_str	00000000 
00002b2f l       .debug_str	00000000 
00002b7b l       .debug_str	00000000 
00002bcf l       .debug_str	00000000 
00002be5 l       .debug_str	00000000 
00002bf9 l       .debug_str	00000000 
00002c40 l       .debug_str	00000000 
00002c8f l       .debug_str	00000000 
00002cbb l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002cc9 l       .debug_str	00000000 
00002ccf l       .debug_str	00000000 
00002cd7 l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00002cee l       .debug_str	00000000 
0001099c l       .debug_str	00000000 
00002cfd l       .debug_str	00000000 
000033d1 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002d13 l       .debug_str	00000000 
0002e235 l       .debug_str	00000000 
00002d24 l       .debug_str	00000000 
00002d2c l       .debug_str	00000000 
00002d33 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d45 l       .debug_str	00000000 
00002d4d l       .debug_str	00000000 
00002d6f l       .debug_str	00000000 
00002d7a l       .debug_str	00000000 
00002d86 l       .debug_str	00000000 
00002d8e l       .debug_str	00000000 
00002d97 l       .debug_str	00000000 
0001d84b l       .debug_str	00000000 
00002da2 l       .debug_str	00000000 
00002dad l       .debug_str	00000000 
00002db8 l       .debug_str	00000000 
0000118e l       .debug_str	00000000 
0001a24a l       .debug_str	00000000 
0000123b l       .debug_str	00000000 
00001198 l       .debug_str	00000000 
000011d0 l       .debug_str	00000000 
00001210 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000121f l       .debug_str	00000000 
00001254 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
000015de l       .debug_str	00000000 
000015ed l       .debug_str	00000000 
000030ce l       .debug_str	00000000 
000030d5 l       .debug_str	00000000 
0000f665 l       .debug_str	00000000 
00002dfb l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
00002e0b l       .debug_str	00000000 
00002e20 l       .debug_str	00000000 
00002e29 l       .debug_str	00000000 
00002e86 l       .debug_str	00000000 
00002eeb l       .debug_str	00000000 
00002ef5 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f1a l       .debug_str	00000000 
00002f22 l       .debug_str	00000000 
00002f86 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
00002ff9 l       .debug_str	00000000 
00003001 l       .debug_str	00000000 
00003042 l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003052 l       .debug_str	00000000 
00003067 l       .debug_str	00000000 
0000307a l       .debug_str	00000000 
0002e23c l       .debug_str	00000000 
0000308f l       .debug_str	00000000 
000030a4 l       .debug_str	00000000 
00019294 l       .debug_str	00000000 
0002cf2f l       .debug_str	00000000 
0001e2f7 l       .debug_str	00000000 
0002d0ac l       .debug_str	00000000 
00009eae l       .debug_str	00000000 
00009f66 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
00009fca l       .debug_str	00000000 
0000a000 l       .debug_str	00000000 
0000a019 l       .debug_str	00000000 
0000a053 l       .debug_str	00000000 
0000a070 l       .debug_str	00000000 
0000a096 l       .debug_str	00000000 
0000a0a0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 y3vaea4jmuwyeqv
0000753e l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0000a1e5 l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0001a6d6 l       .debug_str	00000000 
0000a1f0 l       .debug_str	00000000 
0000a22e l       .debug_str	00000000 
0000036a l       .debug_str	00000000 
00004d7f l       .debug_str	00000000 
0002dfda l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1av89fbqeepl6rg1
000028c9 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
00002ff9 l       .debug_str	00000000 
00003001 l       .debug_str	00000000 
00003042 l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003052 l       .debug_str	00000000 
00003067 l       .debug_str	00000000 
0000307a l       .debug_str	00000000 
0002e23c l       .debug_str	00000000 
0000308f l       .debug_str	00000000 
000030a4 l       .debug_str	00000000 
00020e2e l       .debug_str	00000000 
000035bc l       .debug_str	00000000 
0002e31d l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
00000b18 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001d3ed l       .debug_str	00000000 
0000a247 l       .debug_str	00000000 
0000a252 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
00018c4c l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
000031f7 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
000031ff l       .debug_str	00000000 
00003204 l       .debug_str	00000000 
00004d61 l       .debug_str	00000000 
0000a260 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000eb7 l       .debug_str	00000000 
00000ebf l       .debug_str	00000000 
00000eca l       .debug_str	00000000 
00000ed5 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000eed l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000f15 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f38 l       .debug_str	00000000 
00000f44 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00000f69 l       .debug_str	00000000 
0000e16f l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
0000a297 l       .debug_str	00000000 
0000a2d6 l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00006bd8 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
0000dd28 l       .debug_str	00000000 
0000005d l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
000015d5 l       .debug_str	00000000 
0000193a l       .debug_str	00000000 
00000f76 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
000015f5 l       .debug_str	00000000 
00001601 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
00001609 l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
000016c5 l       .debug_str	00000000 
000016d0 l       .debug_str	00000000 
00001717 l       .debug_str	00000000 
00001766 l       .debug_str	00000000 
00001770 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017f2 l       .debug_str	00000000 
000017fb l       .debug_str	00000000 
0000180b l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
00001868 l       .debug_str	00000000 
000018c5 l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
000018da l       .debug_str	00000000 
000018e6 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001903 l       .debug_str	00000000 
0000092a l       .debug_str	00000000 
0000190b l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
00001920 l       .debug_str	00000000 
0001e968 l       .debug_str	00000000 
00001940 l       .debug_str	00000000 
00001948 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
00000871 l       .debug_str	00000000 
00000a24 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
00000a0e l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00025217 l       .debug_str	00000000 
0002281f l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
0001d48c l       .debug_str	00000000 
00016f49 l       .debug_str	00000000 
00000fa7 l       .debug_str	00000000 
00000fd4 l       .debug_str	00000000 
0002240f l       .debug_str	00000000 
00018f74 l       .debug_str	00000000 
0001f202 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
0000099b l       .debug_str	00000000 
000008b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001032 l       .debug_str	00000000 
00001090 l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
00000a7e l       .debug_str	00000000 
00000a5e l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001022 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000866 l       .debug_str	00000000 
00000a17 l       .debug_str	00000000 
00000a86 l       .debug_str	00000000 
00001114 l       .debug_str	00000000 
00000a04 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
000008cd l       .debug_str	00000000 
0000112a l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000087c l       .debug_str	00000000 
00001166 l       .debug_str	00000000 
00004d4b l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
00001952 l       .debug_str	00000000 
0002e85d l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00001971 l       .debug_str	00000000 
0000197a l       .debug_str	00000000 
00002d66 l       .debug_str	00000000 
00001983 l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000283ef l       .debug_str	00000000 
0000198b l       .debug_str	00000000 
00001997 l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019aa l       .debug_str	00000000 
0000a163 l       .debug_str	00000000 
0000c06a l       .debug_str	00000000 
000019b2 l       .debug_str	00000000 
00001aae l       .debug_str	00000000 
00001bb2 l       .debug_str	00000000 
00001bc0 l       .debug_str	00000000 
000287fb l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00001bee l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001bf9 l       .debug_str	00000000 
00001c74 l       .debug_str	00000000 
00001cf7 l       .debug_str	00000000 
00001d05 l       .debug_str	00000000 
00001d64 l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001de1 l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
0001b53d l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00001e00 l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
0002e198 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e26 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e72 l       .debug_str	00000000 
00001e4f l       .debug_str	00000000 
00001e82 l       .debug_str	00000000 
00001ec2 l       .debug_str	00000000 
0001afe8 l       .debug_str	00000000 
00001f0a l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00001f16 l       .debug_str	00000000 
00001f3f l       .debug_str	00000000 
00001f1c l       .debug_str	00000000 
00001f51 l       .debug_str	00000000 
00001f93 l       .debug_str	00000000 
0001ae9a l       .debug_str	00000000 
00001fdd l       .debug_str	00000000 
00001fe3 l       .debug_str	00000000 
00001fe9 l       .debug_str	00000000 
00002012 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00002024 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
0001a0ee l       .debug_str	00000000 
000020b0 l       .debug_str	00000000 
000020b6 l       .debug_str	00000000 
000020bc l       .debug_str	00000000 
000020c2 l       .debug_str	00000000 
000020eb l       .debug_str	00000000 
000020c8 l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
0000213d l       .debug_str	00000000 
00002186 l       .debug_str	00000000 
0000218b l       .debug_str	00000000 
0001b2a3 l       .debug_str	00000000 
00002190 l       .debug_str	00000000 
00002196 l       .debug_str	00000000 
0000219c l       .debug_str	00000000 
000021c5 l       .debug_str	00000000 
000021a2 l       .debug_str	00000000 
000021d6 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
0001a1c2 l       .debug_str	00000000 
00002260 l       .debug_str	00000000 
0000228c l       .debug_str	00000000 
00002269 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000022de l       .debug_str	00000000 
00002327 l       .debug_str	00000000 
0001b4e0 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00002367 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023bb l       .debug_str	00000000 
0001b120 l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002417 l       .debug_str	00000000 
0000241d l       .debug_str	00000000 
00002425 l       .debug_str	00000000 
00002433 l       .debug_str	00000000 
00002442 l       .debug_str	00000000 
00002453 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002469 l       .debug_str	00000000 
00002474 l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
000024c1 l       .debug_str	00000000 
0000249e l       .debug_str	00000000 
000024d3 l       .debug_str	00000000 
00002515 l       .debug_str	00000000 
0001a2e7 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000258c l       .debug_str	00000000 
00002569 l       .debug_str	00000000 
0000259e l       .debug_str	00000000 
000025e0 l       .debug_str	00000000 
0000262a l       .debug_str	00000000 
0000262f l       .debug_str	00000000 
0000265c l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0000266e l       .debug_str	00000000 
000026b0 l       .debug_str	00000000 
000026fa l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00002779 l       .debug_str	00000000 
0000270e l       .debug_str	00000000 
0000271e l       .debug_str	00000000 
00002727 l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002741 l       .debug_str	00000000 
00002756 l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
00002824 l       .debug_str	00000000 
000028d4 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002921 l       .debug_str	00000000 
000028fe l       .debug_str	00000000 
00002934 l       .debug_str	00000000 
000029b7 l       .debug_str	00000000 
00002a42 l       .debug_str	00000000 
00002a5e l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002afe l       .debug_str	00000000 
00002b1b l       .debug_str	00000000 
00002b2f l       .debug_str	00000000 
00002b7b l       .debug_str	00000000 
00002bcf l       .debug_str	00000000 
00002be5 l       .debug_str	00000000 
00002bf9 l       .debug_str	00000000 
00002c40 l       .debug_str	00000000 
00002c8f l       .debug_str	00000000 
00002cbb l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002cc9 l       .debug_str	00000000 
00002ccf l       .debug_str	00000000 
00002cd7 l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00002ce6 l       .debug_str	00000000 
00002cee l       .debug_str	00000000 
0001099c l       .debug_str	00000000 
00002cfd l       .debug_str	00000000 
000033d1 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002d13 l       .debug_str	00000000 
0002e235 l       .debug_str	00000000 
00002d24 l       .debug_str	00000000 
00002d2c l       .debug_str	00000000 
00002d33 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d45 l       .debug_str	00000000 
00002d4d l       .debug_str	00000000 
00002d6f l       .debug_str	00000000 
00002d7a l       .debug_str	00000000 
00002d86 l       .debug_str	00000000 
00002d8e l       .debug_str	00000000 
00002d97 l       .debug_str	00000000 
0001d84b l       .debug_str	00000000 
00002da2 l       .debug_str	00000000 
00002dad l       .debug_str	00000000 
00002db8 l       .debug_str	00000000 
0000118e l       .debug_str	00000000 
0001a24a l       .debug_str	00000000 
0000123b l       .debug_str	00000000 
00001198 l       .debug_str	00000000 
000011d0 l       .debug_str	00000000 
00001210 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000121f l       .debug_str	00000000 
00001254 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
000015de l       .debug_str	00000000 
000015ed l       .debug_str	00000000 
000030ce l       .debug_str	00000000 
000030d5 l       .debug_str	00000000 
0000f665 l       .debug_str	00000000 
00002dfb l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
00002e0b l       .debug_str	00000000 
00002e20 l       .debug_str	00000000 
00002e29 l       .debug_str	00000000 
00002e86 l       .debug_str	00000000 
00002eeb l       .debug_str	00000000 
00002ef5 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f1a l       .debug_str	00000000 
00002f22 l       .debug_str	00000000 
00002f86 l       .debug_str	00000000 
0002a1e4 l     O .text	0000000c _ZN3app10app_sensor13SENSOR_DEVICE17hefbfbc9c9146f744E
00000000 l    df *ABS*	00000000 35j0kb8s1vhb4ukq
00018c4c l       .debug_str	00000000 
0000a3c7 l       .debug_str	00000000 
0000a402 l       .debug_str	00000000 
0000e0da l       .debug_str	00000000 
00025a79 l       .debug_str	00000000 
000031f7 l       .debug_str	00000000 
000031ff l       .debug_str	00000000 
00003204 l       .debug_str	00000000 
00004d61 l       .debug_str	00000000 
00004d58 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
0000a413 l       .debug_str	00000000 
0000a42c l       .debug_str	00000000 
0000a417 l       .debug_str	00000000 
0000a438 l       .debug_str	00000000 
0002e31d l       .debug_str	00000000 
0001d220 l       .debug_str	00000000 
00000985 l       .debug_str	00000000 
00020e2e l       .debug_str	00000000 
00025109 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
0001977c l       .debug_str	00000000 
0000a447 l       .debug_str	00000000 
0000a455 l       .debug_str	00000000 
0000a467 l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
0000a47b l       .debug_str	00000000 
0000a484 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
00000b18 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001d3ed l       .debug_str	00000000 
0000a2ec l       .debug_str	00000000 
0000a2f8 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0000005d l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000a30c l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
0000a311 l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
0000a317 l       .debug_str	00000000 
0000e05a l       .debug_str	00000000 
000050f7 l       .debug_str	00000000 
0000e067 l       .debug_str	00000000 
0000e075 l       .debug_str	00000000 
0000a323 l       .debug_str	00000000 
0000a333 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000eb7 l       .debug_str	00000000 
00000ebf l       .debug_str	00000000 
00000eca l       .debug_str	00000000 
00000ed5 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000eed l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000f15 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f38 l       .debug_str	00000000 
00000f44 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00000f69 l       .debug_str	00000000 
0000e16f l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000c0a l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
00004f51 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
0000a371 l       .debug_str	00000000 
0000a3b1 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00006bd8 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
0000dd28 l       .debug_str	00000000 
00009b24 l     F .text	000005be _ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE
20000250 l     O .bss	00000020 _ZN3app11app_network19CURRENT_GEOLOCATION17h08f4cc9bfdd99ce2E
00000000 l    df *ABS*	00000000 387fyplfnkxh0j64
0000a4e8 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
00000b18 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000eb7 l       .debug_str	00000000 
00000ebf l       .debug_str	00000000 
00000eca l       .debug_str	00000000 
00000ed5 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
00000eed l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000f15 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f38 l       .debug_str	00000000 
00000f44 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00000f69 l       .debug_str	00000000 
0000e16f l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0000a48f l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000a497 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3rvhu3o5i9kxh4nx
00002c40 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
000032e4 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
0002e31d l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
00000b18 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0000005d l       .debug_str	00000000 
000015d5 l       .debug_str	00000000 
0000193a l       .debug_str	00000000 
00000f76 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
000015f5 l       .debug_str	00000000 
00001601 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
00001609 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
000016c5 l       .debug_str	00000000 
000016d0 l       .debug_str	00000000 
00001717 l       .debug_str	00000000 
00001766 l       .debug_str	00000000 
00001770 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017f2 l       .debug_str	00000000 
000017fb l       .debug_str	00000000 
0000180b l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
00001868 l       .debug_str	00000000 
000018c5 l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
000018da l       .debug_str	00000000 
000018e6 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00001903 l       .debug_str	00000000 
0000092a l       .debug_str	00000000 
0000190b l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
00001920 l       .debug_str	00000000 
0001e968 l       .debug_str	00000000 
00001940 l       .debug_str	00000000 
00001948 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
00000871 l       .debug_str	00000000 
00000a24 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
00000a0e l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00025217 l       .debug_str	00000000 
0002281f l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
0001d48c l       .debug_str	00000000 
00016f49 l       .debug_str	00000000 
00000fa7 l       .debug_str	00000000 
00000fd4 l       .debug_str	00000000 
0002240f l       .debug_str	00000000 
00018f74 l       .debug_str	00000000 
0001f202 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
0000099b l       .debug_str	00000000 
000008b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001032 l       .debug_str	00000000 
00001090 l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
00000a7e l       .debug_str	00000000 
00000a5e l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001022 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000866 l       .debug_str	00000000 
00000a17 l       .debug_str	00000000 
00000a86 l       .debug_str	00000000 
00001114 l       .debug_str	00000000 
00000a04 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
000008cd l       .debug_str	00000000 
0000112a l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000087c l       .debug_str	00000000 
00001166 l       .debug_str	00000000 
00004d4b l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
00001952 l       .debug_str	00000000 
0002e85d l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00001971 l       .debug_str	00000000 
0000197a l       .debug_str	00000000 
00002d66 l       .debug_str	00000000 
00001983 l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000283ef l       .debug_str	00000000 
0000198b l       .debug_str	00000000 
00001997 l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019aa l       .debug_str	00000000 
0000a163 l       .debug_str	00000000 
0000c06a l       .debug_str	00000000 
000019b2 l       .debug_str	00000000 
00001aae l       .debug_str	00000000 
00001bb2 l       .debug_str	00000000 
00001bc0 l       .debug_str	00000000 
000287fb l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00001bee l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001bf9 l       .debug_str	00000000 
00001c74 l       .debug_str	00000000 
00001cf7 l       .debug_str	00000000 
00001d05 l       .debug_str	00000000 
00001d64 l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001de1 l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
0001b53d l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00001e00 l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
0002e198 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e26 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e72 l       .debug_str	00000000 
00001e4f l       .debug_str	00000000 
00001e82 l       .debug_str	00000000 
00001ec2 l       .debug_str	00000000 
0001afe8 l       .debug_str	00000000 
00001f0a l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00001f16 l       .debug_str	00000000 
00001f3f l       .debug_str	00000000 
00001f1c l       .debug_str	00000000 
00001f51 l       .debug_str	00000000 
00001f93 l       .debug_str	00000000 
0001ae9a l       .debug_str	00000000 
00001fdd l       .debug_str	00000000 
00001fe3 l       .debug_str	00000000 
00001fe9 l       .debug_str	00000000 
00002012 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00002024 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
0001a0ee l       .debug_str	00000000 
000020b0 l       .debug_str	00000000 
000020b6 l       .debug_str	00000000 
000020bc l       .debug_str	00000000 
000020c2 l       .debug_str	00000000 
000020eb l       .debug_str	00000000 
000020c8 l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
0000213d l       .debug_str	00000000 
00002186 l       .debug_str	00000000 
0000218b l       .debug_str	00000000 
0001b2a3 l       .debug_str	00000000 
00002190 l       .debug_str	00000000 
00002196 l       .debug_str	00000000 
0000219c l       .debug_str	00000000 
000021c5 l       .debug_str	00000000 
000021a2 l       .debug_str	00000000 
000021d6 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
0001a1c2 l       .debug_str	00000000 
00002260 l       .debug_str	00000000 
0000228c l       .debug_str	00000000 
00002269 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000022de l       .debug_str	00000000 
00002327 l       .debug_str	00000000 
0001b4e0 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00002367 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023bb l       .debug_str	00000000 
0001b120 l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002417 l       .debug_str	00000000 
0000241d l       .debug_str	00000000 
00002425 l       .debug_str	00000000 
00002433 l       .debug_str	00000000 
00002442 l       .debug_str	00000000 
00002453 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002469 l       .debug_str	00000000 
00002474 l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
000024c1 l       .debug_str	00000000 
0000249e l       .debug_str	00000000 
000024d3 l       .debug_str	00000000 
00002515 l       .debug_str	00000000 
0001a2e7 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000258c l       .debug_str	00000000 
00002569 l       .debug_str	00000000 
0000259e l       .debug_str	00000000 
000025e0 l       .debug_str	00000000 
0000262a l       .debug_str	00000000 
0000262f l       .debug_str	00000000 
0000265c l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0000266e l       .debug_str	00000000 
000026b0 l       .debug_str	00000000 
000026fa l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00002779 l       .debug_str	00000000 
0000270e l       .debug_str	00000000 
0000271e l       .debug_str	00000000 
00002727 l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002741 l       .debug_str	00000000 
00002756 l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
00002824 l       .debug_str	00000000 
000028c9 l       .debug_str	00000000 
000028d4 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002921 l       .debug_str	00000000 
000028fe l       .debug_str	00000000 
00002934 l       .debug_str	00000000 
000029b7 l       .debug_str	00000000 
00002a42 l       .debug_str	00000000 
00002a5e l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002afe l       .debug_str	00000000 
00002b1b l       .debug_str	00000000 
00002b2f l       .debug_str	00000000 
00002b7b l       .debug_str	00000000 
00002bcf l       .debug_str	00000000 
00002be5 l       .debug_str	00000000 
00002bf9 l       .debug_str	00000000 
00002c8f l       .debug_str	00000000 
00002cbb l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002cc9 l       .debug_str	00000000 
00002ccf l       .debug_str	00000000 
00002cd7 l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00002ce6 l       .debug_str	00000000 
00002cee l       .debug_str	00000000 
0001099c l       .debug_str	00000000 
00002cfd l       .debug_str	00000000 
000033d1 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002d13 l       .debug_str	00000000 
0002e235 l       .debug_str	00000000 
00002d24 l       .debug_str	00000000 
00002d2c l       .debug_str	00000000 
00002d33 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d45 l       .debug_str	00000000 
00002d4d l       .debug_str	00000000 
00002d6f l       .debug_str	00000000 
00002d7a l       .debug_str	00000000 
00002d86 l       .debug_str	00000000 
00002d8e l       .debug_str	00000000 
00002d97 l       .debug_str	00000000 
0001d84b l       .debug_str	00000000 
00002da2 l       .debug_str	00000000 
00002dad l       .debug_str	00000000 
00002db8 l       .debug_str	00000000 
0000118e l       .debug_str	00000000 
0001a24a l       .debug_str	00000000 
0000123b l       .debug_str	00000000 
00001198 l       .debug_str	00000000 
000011d0 l       .debug_str	00000000 
00001210 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000121f l       .debug_str	00000000 
00001254 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
000015de l       .debug_str	00000000 
000015ed l       .debug_str	00000000 
000030ce l       .debug_str	00000000 
000030d5 l       .debug_str	00000000 
0000f665 l       .debug_str	00000000 
00002dfb l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
00002e0b l       .debug_str	00000000 
00002e20 l       .debug_str	00000000 
00002e29 l       .debug_str	00000000 
00002e86 l       .debug_str	00000000 
00002eeb l       .debug_str	00000000 
00002ef5 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f1a l       .debug_str	00000000 
00002f22 l       .debug_str	00000000 
00002f86 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
00002ff9 l       .debug_str	00000000 
00003001 l       .debug_str	00000000 
00003042 l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003052 l       .debug_str	00000000 
00003067 l       .debug_str	00000000 
0000307a l       .debug_str	00000000 
0002e23c l       .debug_str	00000000 
0000308f l       .debug_str	00000000 
000030a4 l       .debug_str	00000000 
0000a50a l       .debug_str	00000000 
0000a53c l       .debug_str	00000000 
0000a578 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.4br1pvmw-cgu.1
00000bf8 l       .debug_str	00000000 
0000af40 l       .debug_str	00000000 
0000ae7f l       .debug_str	00000000 
0000aed1 l       .debug_str	00000000 
0000aee2 l       .debug_str	00000000 
0000af37 l       .debug_str	00000000 
0000af4b l       .debug_str	00000000 
0000af97 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
0000afa3 l       .debug_str	00000000 
0000af9a l       .debug_str	00000000 
0000afc9 l       .debug_str	00000000 
0000afef l       .debug_str	00000000 
0000affb l       .debug_str	00000000 
0000b022 l       .debug_str	00000000 
00001f0e l       .debug_str	00000000 
00001f14 l       .debug_str	00000000 
0001a6d6 l       .debug_str	00000000 
0001e44f l       .debug_str	00000000 
00001f1a l       .debug_str	00000000 
0001c672 l       .debug_str	00000000 
0001d220 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
00011950 l       .debug_str	00000000 
0000b02f l       .debug_str	00000000 
0000036a l       .debug_str	00000000 
0000b035 l       .debug_str	00000000 
0001a616 l       .debug_str	00000000 
0002dfda l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
0000a602 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
00020d02 l       .debug_str	00000000 
00009c8b l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
0000a64f l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00004002 l       .debug_str	00000000 
0000a669 l       .debug_str	00000000 
0000a66d l       .debug_str	00000000 
0000a83b l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000a851 l       .debug_str	00000000 
0000a72d l       .debug_str	00000000 
0000a671 l       .debug_str	00000000 
0000a6b4 l       .debug_str	00000000 
0000a6ec l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000a71d l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000a766 l       .debug_str	00000000 
0000a7d9 l       .debug_str	00000000 
0000a810 l       .debug_str	00000000 
0000a841 l       .debug_str	00000000 
0000aa79 l       .debug_str	00000000 
0000aa98 l       .debug_str	00000000 
0000a959 l       .debug_str	00000000 
0000a88b l       .debug_str	00000000 
0000a8ce l       .debug_str	00000000 
0000a90f l       .debug_str	00000000 
0000a949 l       .debug_str	00000000 
0000a99b l       .debug_str	00000000 
0000aa0e l       .debug_str	00000000 
0000aa4e l       .debug_str	00000000 
0000aa88 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000ac49 l       .debug_str	00000000 
0000ab97 l       .debug_str	00000000 
0000aadb l       .debug_str	00000000 
0000ab19 l       .debug_str	00000000 
0000ab27 l       .debug_str	00000000 
0000ab6a l       .debug_str	00000000 
0000ab7c l       .debug_str	00000000 
0000ab87 l       .debug_str	00000000 
0000abaa l       .debug_str	00000000 
0000ac1d l       .debug_str	00000000 
0000ac2e l       .debug_str	00000000 
0000ac39 l       .debug_str	00000000 
0000ac5d l       .debug_str	00000000 
0000aca1 l       .debug_str	00000000 
0000acb4 l       .debug_str	00000000 
0000acf8 l       .debug_str	00000000 
0002e56e l       .debug_str	00000000 
0000ad0a l       .debug_str	00000000 
0000ad40 l       .debug_str	00000000 
0000ad5b l       .debug_str	00000000 
0000ad95 l       .debug_str	00000000 
0000adb4 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
0000adf0 l       .debug_str	00000000 
0000aeda l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
0000ae36 l       .debug_str	00000000 
0000a1dc l     F .text	00000106 _ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE
00000000 l    df *ABS*	00000000 cstr_core.4br1pvmw-cgu.12
0000b41b l       .debug_str	00000000 
0000b1d4 l       .debug_str	00000000 
0001fa79 l       .debug_str	00000000 
0000b1dd l       .debug_str	00000000 
0000b247 l       .debug_str	00000000 
0000b27c l       .debug_str	00000000 
0000b2f8 l       .debug_str	00000000 
0000b304 l       .debug_str	00000000 
0000b475 l       .debug_str	00000000 
0000b469 l       .debug_str	00000000 
0000b315 l       .debug_str	00000000 
0000b34a l       .debug_str	00000000 
0000b384 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000a1df l       .debug_str	00000000 
0000036a l       .debug_str	00000000 
0000b035 l       .debug_str	00000000 
0002dfda l       .debug_str	00000000 
0000ab7c l       .debug_str	00000000 
0001a6d6 l       .debug_str	00000000 
0000b3eb l       .debug_str	00000000 
0000b3f7 l       .debug_str	00000000 
0000b464 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
0000a602 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
0000b042 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000a1e5 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
0000b048 l       .debug_str	00000000 
0000e2f1 l       .debug_str	00000000 
0000b04e l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000b09b l       .debug_str	00000000 
0000b0d9 l       .debug_str	00000000 
0000b3f0 l       .debug_str	00000000 
0000b0f4 l       .debug_str	00000000 
0000b129 l       .debug_str	00000000 
0000b1d8 l       .debug_str	00000000 
0000b144 l       .debug_str	00000000 
0000b14d l       .debug_str	00000000 
00013775 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0000e2e0 l       .debug_str	00000000 
0000b155 l       .debug_str	00000000 
00010e5f l       .debug_str	00000000 
00012330 l       .debug_str	00000000 
0000b166 l       .debug_str	00000000 
00018368 l       .debug_str	00000000 
0001d6e6 l       .debug_str	00000000 
0000b16e l       .debug_str	00000000 
0000b192 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000b19c l       .debug_str	00000000 
0000b1a6 l       .debug_str	00000000 
00021a3c l       .debug_str	00000000 
0002a56c l       .debug_str	00000000 
000098a6 l       .debug_str	00000000 
0000f9c6 l       .debug_str	00000000 
0001c7ca l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00010b33 l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
0000b1ac l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.4br1pvmw-cgu.14
00000bf8 l       .debug_str	00000000 
0000a66d l       .debug_str	00000000 
0000a83b l       .debug_str	00000000 
0000b501 l       .debug_str	00000000 
0000b52a l       .debug_str	00000000 
0000b55f l       .debug_str	00000000 
0000b588 l       .debug_str	00000000 
0002e31d l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
00001f0e l       .debug_str	00000000 
0000ac2e l       .debug_str	00000000 
00001f14 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
0000a602 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00020d02 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000b48f l       .debug_str	00000000 
0000b4bd l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000b4cf l       .debug_str	00000000 
0000b4f5 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
0000a64f l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00004002 l       .debug_str	00000000 
0000a669 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.2jnkkboq-cgu.10
0000753e l       .debug_str	00000000 
0000b65f l       .debug_str	00000000 
0000b66b l       .debug_str	00000000 
0000b695 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000b597 l       .debug_str	00000000 
0000b5ec l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00020d02 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000b636 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.2jnkkboq-cgu.3
0002613b l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
0000b3f0 l       .debug_str	00000000 
0000b6f5 l       .debug_str	00000000 
0000b726 l       .debug_str	00000000 
0000b732 l       .debug_str	00000000 
0000945b l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
00009c69 l       .debug_str	00000000 
00012330 l       .debug_str	00000000 
00001f0e l       .debug_str	00000000 
0000b764 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000b597 l       .debug_str	00000000 
0000b5ec l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d21 l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000be8 l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
00000c02 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000c16 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c24 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c3e l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000c4b l       .debug_str	00000000 
00000c53 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000c64 l       .debug_str	00000000 
00000c87 l       .debug_str	00000000 
00000cab l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
0000b6a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.2jnkkboq-cgu.5
0000b8a1 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000b7b9 l       .debug_str	00000000 
0000b7ec l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
0000b7ff l       .debug_str	00000000 
0000b845 l       .debug_str	00000000 
0000b84d l       .debug_str	00000000 
0000b896 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00021a3c l       .debug_str	00000000 
0002a56c l       .debug_str	00000000 
000098a6 l       .debug_str	00000000 
00018368 l       .debug_str	00000000 
0000b8b2 l       .debug_str	00000000 
0000b927 l       .debug_str	00000000 
0001c7ca l       .debug_str	00000000 
0001e44f l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
00028895 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000b597 l       .debug_str	00000000 
0000b5ec l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.2jnkkboq-cgu.6
0000753e l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000b597 l       .debug_str	00000000 
0000b5ec l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0000a1e5 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0001a6d6 l       .debug_str	00000000 
0000b954 l       .debug_str	00000000 
0000b992 l       .debug_str	00000000 
0000036a l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
0002dfda l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.2jnkkboq-cgu.8
00000d26 l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000b597 l       .debug_str	00000000 
0000b5ec l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
0001719c l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000b9aa l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000b3f0 l       .debug_str	00000000 
00012330 l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d21 l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.2jnkkboq-cgu.9
0001a6d6 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000b02f l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000b597 l       .debug_str	00000000 
0000b5ec l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000ba09 l       .debug_str	00000000 
0000aeda l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
0000af40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1mkvkbg7md2e27fp
0000bc08 l       .debug_str	00000000 
0001e44f l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0001c672 l       .debug_str	00000000 
0001d220 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
00011950 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00020d02 l       .debug_str	00000000 
00009c8b l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
0000a64f l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00004002 l       .debug_str	00000000 
0000a669 l       .debug_str	00000000 
0000a66d l       .debug_str	00000000 
0000a83b l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000a851 l       .debug_str	00000000 
0000a72d l       .debug_str	00000000 
0000ba9c l       .debug_str	00000000 
0000a6b4 l       .debug_str	00000000 
0000a6ec l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000a71d l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000badf l       .debug_str	00000000 
0000a7d9 l       .debug_str	00000000 
0000a810 l       .debug_str	00000000 
0000a841 l       .debug_str	00000000 
0000aa79 l       .debug_str	00000000 
0000aa98 l       .debug_str	00000000 
0000a959 l       .debug_str	00000000 
0000bb52 l       .debug_str	00000000 
0000a8ce l       .debug_str	00000000 
0000a90f l       .debug_str	00000000 
0000a949 l       .debug_str	00000000 
0000bb95 l       .debug_str	00000000 
0000aa0e l       .debug_str	00000000 
0000aa4e l       .debug_str	00000000 
0000aa88 l       .debug_str	00000000 
00001f0e l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00001f14 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2gos2xc5w6mv9mcj
0001d84b l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
00020e2e l       .debug_str	00000000 
0002cb33 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
000095b2 l       .debug_str	00000000 
000095c6 l       .debug_str	00000000 
000226ac l       .debug_str	00000000 
000095cf l       .debug_str	00000000 
000095da l       .debug_str	00000000 
0000c052 l       .debug_str	00000000 
0000c05b l       .debug_str	00000000 
0000a1df l       .debug_str	00000000 
0000c0ee l       .debug_str	00000000 
0000b02f l       .debug_str	00000000 
0000c0f8 l       .debug_str	00000000 
0000a162 l       .debug_str	00000000 
0000c103 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
0000e2e0 l       .debug_str	00000000 
0000e2df l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
0000a48f l       .debug_str	00000000 
0000989a l       .debug_str	00000000 
0000bc44 l       .debug_str	00000000 
0000bc8c l       .debug_str	00000000 
00009c7a l       .debug_str	00000000 
00006bd8 l       .debug_str	00000000 
0000bcab l       .debug_str	00000000 
0000bce6 l       .debug_str	00000000 
0000bd0b l       .debug_str	00000000 
0000bd32 l       .debug_str	00000000 
0000bd83 l       .debug_str	00000000 
0000bda1 l       .debug_str	00000000 
0000be01 l       .debug_str	00000000 
0000be0a l       .debug_str	00000000 
0000be75 l       .debug_str	00000000 
0000be85 l       .debug_str	00000000 
0000bef1 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0000005d l       .debug_str	00000000 
000015d5 l       .debug_str	00000000 
0000193a l       .debug_str	00000000 
00000f76 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
000015f5 l       .debug_str	00000000 
00001601 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
00001609 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
000016c5 l       .debug_str	00000000 
000016d0 l       .debug_str	00000000 
00001717 l       .debug_str	00000000 
00001766 l       .debug_str	00000000 
00001770 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017f2 l       .debug_str	00000000 
000017fb l       .debug_str	00000000 
0000180b l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
00001868 l       .debug_str	00000000 
000018c5 l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
000018da l       .debug_str	00000000 
000018e6 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00001903 l       .debug_str	00000000 
0000092a l       .debug_str	00000000 
0000190b l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
00001920 l       .debug_str	00000000 
0001e968 l       .debug_str	00000000 
00001940 l       .debug_str	00000000 
00001948 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
00000871 l       .debug_str	00000000 
00000a24 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
00000a0e l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00025217 l       .debug_str	00000000 
0002281f l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
0001d48c l       .debug_str	00000000 
00016f49 l       .debug_str	00000000 
00000fa7 l       .debug_str	00000000 
00000fd4 l       .debug_str	00000000 
0002240f l       .debug_str	00000000 
00018f74 l       .debug_str	00000000 
0001f202 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
0000099b l       .debug_str	00000000 
000008b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001032 l       .debug_str	00000000 
00001090 l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
00000a7e l       .debug_str	00000000 
00000a5e l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001022 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000866 l       .debug_str	00000000 
00000a17 l       .debug_str	00000000 
00000a86 l       .debug_str	00000000 
00001114 l       .debug_str	00000000 
00000a04 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
000008cd l       .debug_str	00000000 
0000112a l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000087c l       .debug_str	00000000 
00001166 l       .debug_str	00000000 
00004d4b l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
00001952 l       .debug_str	00000000 
0002e85d l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00001971 l       .debug_str	00000000 
0000197a l       .debug_str	00000000 
00002d66 l       .debug_str	00000000 
00001983 l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000283ef l       .debug_str	00000000 
0000198b l       .debug_str	00000000 
00001997 l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019aa l       .debug_str	00000000 
0000c06a l       .debug_str	00000000 
000019b2 l       .debug_str	00000000 
00001aae l       .debug_str	00000000 
00001bb2 l       .debug_str	00000000 
00001bc0 l       .debug_str	00000000 
000287fb l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00001bee l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001bf9 l       .debug_str	00000000 
00001c74 l       .debug_str	00000000 
00001cf7 l       .debug_str	00000000 
00001d05 l       .debug_str	00000000 
00001d64 l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001de1 l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
0001b53d l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00001e00 l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
0002e198 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e26 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e72 l       .debug_str	00000000 
00001e4f l       .debug_str	00000000 
00001e82 l       .debug_str	00000000 
00001ec2 l       .debug_str	00000000 
0001afe8 l       .debug_str	00000000 
00001f0a l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00001f16 l       .debug_str	00000000 
00001f3f l       .debug_str	00000000 
00001f1c l       .debug_str	00000000 
00001f51 l       .debug_str	00000000 
00001f93 l       .debug_str	00000000 
0001ae9a l       .debug_str	00000000 
00001fdd l       .debug_str	00000000 
00001fe3 l       .debug_str	00000000 
00001fe9 l       .debug_str	00000000 
00002012 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00002024 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
0001a0ee l       .debug_str	00000000 
000020b0 l       .debug_str	00000000 
000020b6 l       .debug_str	00000000 
000020bc l       .debug_str	00000000 
000020c2 l       .debug_str	00000000 
000020eb l       .debug_str	00000000 
000020c8 l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
0000213d l       .debug_str	00000000 
00002186 l       .debug_str	00000000 
0000218b l       .debug_str	00000000 
0001b2a3 l       .debug_str	00000000 
00002190 l       .debug_str	00000000 
00002196 l       .debug_str	00000000 
0000219c l       .debug_str	00000000 
000021c5 l       .debug_str	00000000 
000021a2 l       .debug_str	00000000 
000021d6 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
0001a1c2 l       .debug_str	00000000 
00002260 l       .debug_str	00000000 
0000228c l       .debug_str	00000000 
00002269 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000022de l       .debug_str	00000000 
00002327 l       .debug_str	00000000 
0001b4e0 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00002367 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023bb l       .debug_str	00000000 
0001b120 l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002417 l       .debug_str	00000000 
0000241d l       .debug_str	00000000 
00002425 l       .debug_str	00000000 
00002433 l       .debug_str	00000000 
00002442 l       .debug_str	00000000 
00002453 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002469 l       .debug_str	00000000 
00002474 l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
000024c1 l       .debug_str	00000000 
0000249e l       .debug_str	00000000 
000024d3 l       .debug_str	00000000 
00002515 l       .debug_str	00000000 
0001a2e7 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000258c l       .debug_str	00000000 
00002569 l       .debug_str	00000000 
0000259e l       .debug_str	00000000 
000025e0 l       .debug_str	00000000 
0000262a l       .debug_str	00000000 
0000262f l       .debug_str	00000000 
0000265c l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0000266e l       .debug_str	00000000 
000026b0 l       .debug_str	00000000 
000026fa l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00002779 l       .debug_str	00000000 
0000270e l       .debug_str	00000000 
0000271e l       .debug_str	00000000 
00002727 l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002741 l       .debug_str	00000000 
00002756 l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
00002824 l       .debug_str	00000000 
000028c9 l       .debug_str	00000000 
000028d4 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002921 l       .debug_str	00000000 
000028fe l       .debug_str	00000000 
00002934 l       .debug_str	00000000 
000029b7 l       .debug_str	00000000 
00002a42 l       .debug_str	00000000 
00002a5e l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002afe l       .debug_str	00000000 
00002b1b l       .debug_str	00000000 
00002b2f l       .debug_str	00000000 
00002b7b l       .debug_str	00000000 
00002bcf l       .debug_str	00000000 
00002be5 l       .debug_str	00000000 
00002bf9 l       .debug_str	00000000 
00002c40 l       .debug_str	00000000 
00002c8f l       .debug_str	00000000 
00002cbb l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002cc9 l       .debug_str	00000000 
00002ccf l       .debug_str	00000000 
00002cd7 l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00002ce6 l       .debug_str	00000000 
00002cee l       .debug_str	00000000 
0001099c l       .debug_str	00000000 
00002cfd l       .debug_str	00000000 
000033d1 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002d13 l       .debug_str	00000000 
0002e235 l       .debug_str	00000000 
00002d24 l       .debug_str	00000000 
00002d2c l       .debug_str	00000000 
00002d33 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d45 l       .debug_str	00000000 
00002d4d l       .debug_str	00000000 
00002d6f l       .debug_str	00000000 
00002d7a l       .debug_str	00000000 
00002d86 l       .debug_str	00000000 
00002d8e l       .debug_str	00000000 
00002d97 l       .debug_str	00000000 
00002da2 l       .debug_str	00000000 
00002dad l       .debug_str	00000000 
00002db8 l       .debug_str	00000000 
0000118e l       .debug_str	00000000 
0001a24a l       .debug_str	00000000 
0000123b l       .debug_str	00000000 
00001198 l       .debug_str	00000000 
000011d0 l       .debug_str	00000000 
00001210 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000121f l       .debug_str	00000000 
00001254 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
000015de l       .debug_str	00000000 
000015ed l       .debug_str	00000000 
000030ce l       .debug_str	00000000 
000030d5 l       .debug_str	00000000 
0000f665 l       .debug_str	00000000 
00002dfb l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
00002e0b l       .debug_str	00000000 
00002e20 l       .debug_str	00000000 
00002e29 l       .debug_str	00000000 
00002e86 l       .debug_str	00000000 
00002eeb l       .debug_str	00000000 
00002ef5 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f1a l       .debug_str	00000000 
00002f22 l       .debug_str	00000000 
00002f86 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
00002ff9 l       .debug_str	00000000 
00003001 l       .debug_str	00000000 
00003042 l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003052 l       .debug_str	00000000 
00003067 l       .debug_str	00000000 
0000307a l       .debug_str	00000000 
0002e23c l       .debug_str	00000000 
0000308f l       .debug_str	00000000 
000030a4 l       .debug_str	00000000 
0000a163 l       .debug_str	00000000 
0000bf04 l       .debug_str	00000000 
0000bf67 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
0000bfe7 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000988b l       .debug_str	00000000 
0000988a l       .debug_str	00000000 
00012330 l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d21 l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 348iuy8zmy8k2w94
00020717 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000e2e0 l       .debug_str	00000000 
0000e2df l       .debug_str	00000000 
0000a1df l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
00009406 l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00021028 l       .debug_str	00000000 
0000e2f1 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00019294 l       .debug_str	00000000 
0002cf2f l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
0000c17e l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
000115c6 l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
0000c188 l       .debug_str	00000000 
0000c1f9 l       .debug_str	00000000 
0000c205 l       .debug_str	00000000 
0000c276 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cm3dncpbqts6m3w
0000c43d l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
0000c2dc l       .debug_str	00000000 
0000c2e8 l       .debug_str	00000000 
0000c331 l       .debug_str	00000000 
00004002 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
0000c341 l       .debug_str	00000000 
0000c34d l       .debug_str	00000000 
0000c394 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
0000c3a0 l       .debug_str	00000000 
0000c3e7 l       .debug_str	00000000 
0000c3f3 l       .debug_str	00000000 
0000c44c l       .debug_str	00000000 
0000c497 l       .debug_str	00000000 
0000c4a7 l       .debug_str	00000000 
0000c4b5 l       .debug_str	00000000 
0000c500 l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c554 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0001d175 l       .debug_str	00000000 
00002415 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0001719c l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000c28b l       .debug_str	00000000 
0000c2d0 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000aa00 l     F .text	00000052 _ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17hf4256588acad3c0eE
0000aa52 l     F .text	00000050 _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7969d5bc878eb098E
0000ab2c l     F .text	00000052 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17hca1bc4a69489c3f6E
0000ab7e l     F .text	00000056 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17hac56863bb05a6d3dE
0000abd4 l     F .text	00000006 _ZN4core3num23_$LT$impl$u20$usize$GT$9max_value17h6da094a2bc03bf2bE
00000000 l    df *ABS*	00000000 3isudwmho74voscf
0000f9c6 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
0002a56c l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
000098a6 l       .debug_str	00000000 
0000c8fd l       .debug_str	00000000 
00018368 l       .debug_str	00000000 
0000c6a1 l       .debug_str	00000000 
0000c704 l       .debug_str	00000000 
0000c72c l       .debug_str	00000000 
0000c78f l       .debug_str	00000000 
0000c7b9 l       .debug_str	00000000 
0000c849 l       .debug_str	00000000 
0000c85f l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
00009ac6 l       .debug_str	00000000 
0000c8e6 l       .debug_str	00000000 
0001baab l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000b1d8 l       .debug_str	00000000 
00021a3c l       .debug_str	00000000 
0000292d l       .debug_str	00000000 
0000c562 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000c56a l       .debug_str	00000000 
0000c5f4 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
000098ff l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00019294 l       .debug_str	00000000 
0000c602 l       .debug_str	00000000 
0000c697 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
0000c2dc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3vdzmto7ackr0gps
00009401 l       .debug_str	00000000 
0000a413 l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0000005d l       .debug_str	00000000 
0000a30c l       .debug_str	00000000 
0000a311 l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
0000a317 l       .debug_str	00000000 
0000e075 l       .debug_str	00000000 
0000a323 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
0000d1f4 l       .debug_str	00000000 
00016c9f l       .debug_str	00000000 
0000d1fa l       .debug_str	00000000 
00000032 l       .debug_str	00000000 
0000d1ff l       .debug_str	00000000 
000120b1 l       .debug_str	00000000 
00017e86 l       .debug_str	00000000 
00009877 l       .debug_str	00000000 
0000d22d l       .debug_str	00000000 
00009880 l       .debug_str	00000000 
0000d22c l       .debug_str	00000000 
00004d2d l       .debug_str	00000000 
00004d53 l       .debug_str	00000000 
00000be8 l       .debug_str	00000000 
00000c02 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000c16 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c24 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0002613b l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
00000c3e l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000c4b l       .debug_str	00000000 
00000c53 l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000c64 l       .debug_str	00000000 
00000c87 l       .debug_str	00000000 
00000cab l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d21 l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
00010e82 l       .debug_str	00000000 
00020e2e l       .debug_str	00000000 
0000d233 l       .debug_str	00000000 
0000d232 l       .debug_str	00000000 
0000d25e l       .debug_str	00000000 
00009406 l       .debug_str	00000000 
0000a1df l       .debug_str	00000000 
0000c0ee l       .debug_str	00000000 
0000b02f l       .debug_str	00000000 
0000c0f8 l       .debug_str	00000000 
00012330 l       .debug_str	00000000 
000095b2 l       .debug_str	00000000 
000095c6 l       .debug_str	00000000 
000226ac l       .debug_str	00000000 
000095cf l       .debug_str	00000000 
000095da l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
000185f1 l       .debug_str	00000000 
000095e5 l       .debug_str	00000000 
0000c908 l       .debug_str	00000000 
0000c915 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
0000c920 l       .debug_str	00000000 
0000d19c l       .debug_str	00000000 
0000c92d l       .debug_str	00000000 
0000c971 l       .debug_str	00000000 
00005c29 l       .debug_str	00000000 
00018b41 l       .debug_str	00000000 
0002e475 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00005c32 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00005c94 l       .debug_str	00000000 
00005cfe l       .debug_str	00000000 
00005d2d l       .debug_str	00000000 
00005d0c l       .debug_str	00000000 
00005d41 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
00005d4c l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
0000cd66 l       .debug_str	00000000 
0000c97f l       .debug_str	00000000 
0000c9c4 l       .debug_str	00000000 
0000c9d2 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
0002cf66 l       .debug_str	00000000 
0000ca17 l       .debug_str	00000000 
0000d254 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
00000c0a l       .debug_str	00000000 
00004f51 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
0000ca26 l       .debug_str	00000000 
0000ca7f l       .debug_str	00000000 
0000ca94 l       .debug_str	00000000 
0000caed l       .debug_str	00000000 
0000cb02 l       .debug_str	00000000 
0000cb57 l       .debug_str	00000000 
0000cb68 l       .debug_str	00000000 
0000cbbf l       .debug_str	00000000 
0000cbd2 l       .debug_str	00000000 
0000cc22 l       .debug_str	00000000 
0000cc2e l       .debug_str	00000000 
0000cc80 l       .debug_str	00000000 
0000cc8e l       .debug_str	00000000 
0000ccda l       .debug_str	00000000 
0000cce3 l       .debug_str	00000000 
0000cd36 l       .debug_str	00000000 
0000cd45 l       .debug_str	00000000 
0000cd72 l       .debug_str	00000000 
0000cdc2 l       .debug_str	00000000 
0000cdce l       .debug_str	00000000 
0001796d l       .debug_str	00000000 
0000ce19 l       .debug_str	00000000 
0000ce6a l       .debug_str	00000000 
0000ce77 l       .debug_str	00000000 
000288d1 l       .debug_str	00000000 
0000cebf l       .debug_str	00000000 
0000cf0f l       .debug_str	00000000 
0000cf1b l       .debug_str	00000000 
00009677 l       .debug_str	00000000 
0000cfa0 l       .debug_str	00000000 
0000d01c l       .debug_str	00000000 
0000d09c l       .debug_str	00000000 
000107a6 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
0000d10b l       .debug_str	00000000 
0000d177 l       .debug_str	00000000 
00025a79 l       .debug_str	00000000 
00018c4c l       .debug_str	00000000 
000031f7 l       .debug_str	00000000 
000031ff l       .debug_str	00000000 
00003204 l       .debug_str	00000000 
00004d61 l       .debug_str	00000000 
00004d58 l       .debug_str	00000000 
0000d1a8 l       .debug_str	00000000 
0000d1b0 l       .debug_str	00000000 
0000e05a l       .debug_str	00000000 
000050f7 l       .debug_str	00000000 
0000e067 l       .debug_str	00000000 
0000d1b9 l       .debug_str	00000000 
0000504d l       .debug_str	00000000 
0000669c l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
000066a5 l       .debug_str	00000000 
000066e7 l       .debug_str	00000000 
00006731 l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
0002e198 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e26 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00006738 l       .debug_str	00000000 
0000d1de l       .debug_str	00000000 
0000d1c1 l       .debug_str	00000000 
0000d1eb l       .debug_str	00000000 
00025109 l       .debug_str	00000000 
0000af3c l     F .text	00000056 _ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb1ff9e6d0f0e7437E
0000af92 l     F .text	00000056 _ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h477aa9b6d2a620eaE
0000b310 l     F .text	00000068 _ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17hfbfa9cff7b1b3822E
0002a380 l     O .text	00000028 str.0
00000000 l    df *ABS*	00000000 47o6g1w4cevia6jq
00000c4b l       .debug_str	00000000 
0000989a l       .debug_str	00000000 
0000988b l       .debug_str	00000000 
0000d5e0 l       .debug_str	00000000 
0000d611 l       .debug_str	00000000 
0000d6ef l       .debug_str	00000000 
0000d631 l       .debug_str	00000000 
0000d662 l       .debug_str	00000000 
0000d6e3 l       .debug_str	00000000 
0000d66c l       .debug_str	00000000 
0000d69d l       .debug_str	00000000 
0000d22d l       .debug_str	00000000 
0000d6a7 l       .debug_str	00000000 
0000d6d8 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000d6e2 l       .debug_str	00000000 
00012330 l       .debug_str	00000000 
0000e2df l       .debug_str	00000000 
0000d6e8 l       .debug_str	00000000 
0000d6ee l       .debug_str	00000000 
0000d22c l       .debug_str	00000000 
00009406 l       .debug_str	00000000 
00001f0e l       .debug_str	00000000 
0000d6f4 l       .debug_str	00000000 
0000d747 l       .debug_str	00000000 
0000940c l       .debug_str	00000000 
0000d799 l       .debug_str	00000000 
00010e82 l       .debug_str	00000000 
0000d803 l       .debug_str	00000000 
0000d232 l       .debug_str	00000000 
0000d866 l       .debug_str	00000000 
0000988a l       .debug_str	00000000 
0000d8df l       .debug_str	00000000 
0000d948 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000d9ee l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000eb7 l       .debug_str	00000000 
00000ebf l       .debug_str	00000000 
00000eca l       .debug_str	00000000 
00000ed5 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000eed l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000f15 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f38 l       .debug_str	00000000 
00000f44 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00000f69 l       .debug_str	00000000 
0000e16f l       .debug_str	00000000 
000185f1 l       .debug_str	00000000 
000095e5 l       .debug_str	00000000 
0002cf66 l       .debug_str	00000000 
0000ca17 l       .debug_str	00000000 
0000d254 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d21 l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
0000d28f l       .debug_str	00000000 
0000d2d7 l       .debug_str	00000000 
0000e2e0 l       .debug_str	00000000 
0000d2e0 l       .debug_str	00000000 
0000be01 l       .debug_str	00000000 
0000d328 l       .debug_str	00000000 
0000d370 l       .debug_str	00000000 
0000d379 l       .debug_str	00000000 
0000d3c1 l       .debug_str	00000000 
0000d3c9 l       .debug_str	00000000 
0000d411 l       .debug_str	00000000 
000115c6 l       .debug_str	00000000 
0000d41a l       .debug_str	00000000 
0000d464 l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
0000d46d l       .debug_str	00000000 
0000d49e l       .debug_str	00000000 
0000d4a8 l       .debug_str	00000000 
0000d4d9 l       .debug_str	00000000 
0000d4e2 l       .debug_str	00000000 
0000d513 l       .debug_str	00000000 
00000be8 l       .debug_str	00000000 
00000c02 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000c16 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c24 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0002613b l       .debug_str	00000000 
00000c3e l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000c53 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000c64 l       .debug_str	00000000 
00000c87 l       .debug_str	00000000 
00000cab l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
0000d534 l       .debug_str	00000000 
0000d565 l       .debug_str	00000000 
0000d233 l       .debug_str	00000000 
0000d57f l       .debug_str	00000000 
0000d5b0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49rhvebykj7yf1q9
0000db7e l       .debug_str	00000000 
0000dc04 l       .debug_str	00000000 
0000dc13 l       .debug_str	00000000 
0000dc56 l       .debug_str	00000000 
00018c4c l       .debug_str	00000000 
000031f7 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
000031ff l       .debug_str	00000000 
00003204 l       .debug_str	00000000 
00004d61 l       .debug_str	00000000 
000032b2 l       .debug_str	00000000 
00004d20 l       .debug_str	00000000 
00018542 l       .debug_str	00000000 
00004d58 l       .debug_str	00000000 
000185f1 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000eb7 l       .debug_str	00000000 
00000ebf l       .debug_str	00000000 
00000eca l       .debug_str	00000000 
00000ed5 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000eed l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000f15 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f38 l       .debug_str	00000000 
00000f44 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00000f69 l       .debug_str	00000000 
0000e16f l       .debug_str	00000000 
000059b8 l       .debug_str	00000000 
00008a00 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000da41 l       .debug_str	00000000 
00014dbe l       .debug_str	00000000 
00018333 l       .debug_str	00000000 
00008a0f l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00008a1e l       .debug_str	00000000 
00008a33 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
00008a4b l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00008a9e l       .debug_str	00000000 
00008af9 l       .debug_str	00000000 
00008b0e l       .debug_str	00000000 
0000dac4 l       .debug_str	00000000 
0000db10 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00006bd8 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
0000dd28 l       .debug_str	00000000 
0000db27 l       .debug_str	00000000 
0000db6d l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
000015ab l       .debug_str	00000000 
000182f0 l       .debug_str	00000000 
0000dbc0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4k0rg2hzoryzzhyo
0000753e l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0000b1d8 l       .debug_str	00000000 
00021a3c l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000dc64 l       .debug_str	00000000 
0000dcb7 l       .debug_str	00000000 
0000dcc1 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
0000c2dc l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000d22d l       .debug_str	00000000 
0001baab l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4mp9ol9ivyrikdkk
0000308f l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000c4b l       .debug_str	00000000 
00000c53 l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000c64 l       .debug_str	00000000 
00000c87 l       .debug_str	00000000 
00000cab l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d21 l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
00010e82 l       .debug_str	00000000 
0000e2e0 l       .debug_str	00000000 
0000e2df l       .debug_str	00000000 
0000ca88 l       .debug_str	00000000 
0000e056 l       .debug_str	00000000 
0000e063 l       .debug_str	00000000 
0000e071 l       .debug_str	00000000 
0000e07e l       .debug_str	00000000 
0000e094 l       .debug_str	00000000 
0000e0ab l       .debug_str	00000000 
0000e0c1 l       .debug_str	00000000 
0002845d l       .debug_str	00000000 
0000b1d8 l       .debug_str	00000000 
00021a3c l       .debug_str	00000000 
0002a56c l       .debug_str	00000000 
000098a6 l       .debug_str	00000000 
0000f9c6 l       .debug_str	00000000 
000098aa l       .debug_str	00000000 
0002e31d l       .debug_str	00000000 
0001d220 l       .debug_str	00000000 
0002523a l       .debug_str	00000000 
0000d6e3 l       .debug_str	00000000 
0000d6e2 l       .debug_str	00000000 
0000e0da l       .debug_str	00000000 
00017e86 l       .debug_str	00000000 
00020e2d l       .debug_str	00000000 
000079c1 l       .debug_str	00000000 
0002845c l       .debug_str	00000000 
0000a406 l       .debug_str	00000000 
000015e0 l       .debug_str	00000000 
0000e0d9 l       .debug_str	00000000 
0000e00a l       .debug_str	00000000 
0000e0e7 l       .debug_str	00000000 
0000e008 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0000005d l       .debug_str	00000000 
0000dcc8 l       .debug_str	00000000 
0000dcd9 l       .debug_str	00000000 
00018c4c l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
000031f7 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
000031ff l       .debug_str	00000000 
00003204 l       .debug_str	00000000 
00004d61 l       .debug_str	00000000 
00004d58 l       .debug_str	00000000 
000015e1 l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
0000dce4 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000eb7 l       .debug_str	00000000 
00000ebf l       .debug_str	00000000 
00000eca l       .debug_str	00000000 
00000ed5 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000eed l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000f15 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f38 l       .debug_str	00000000 
00000f44 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00000f69 l       .debug_str	00000000 
0000e16f l       .debug_str	00000000 
00006bd8 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
0000dd28 l       .debug_str	00000000 
00025a79 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000a30c l       .debug_str	00000000 
0000a311 l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
0000a317 l       .debug_str	00000000 
0000e05a l       .debug_str	00000000 
000050f7 l       .debug_str	00000000 
0000e067 l       .debug_str	00000000 
0000e075 l       .debug_str	00000000 
0000a323 l       .debug_str	00000000 
0000a413 l       .debug_str	00000000 
0000a42c l       .debug_str	00000000 
0000a417 l       .debug_str	00000000 
0000dcf2 l       .debug_str	00000000 
000035bc l       .debug_str	00000000 
000015d5 l       .debug_str	00000000 
000015de l       .debug_str	00000000 
000015ed l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
0000193a l       .debug_str	00000000 
00000f76 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
000015f5 l       .debug_str	00000000 
00001601 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
00001609 l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
000016c5 l       .debug_str	00000000 
000016d0 l       .debug_str	00000000 
00001717 l       .debug_str	00000000 
00001766 l       .debug_str	00000000 
00001770 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017f2 l       .debug_str	00000000 
000017fb l       .debug_str	00000000 
0000180b l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
00001868 l       .debug_str	00000000 
000018c5 l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
000018da l       .debug_str	00000000 
000018e6 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001903 l       .debug_str	00000000 
0000092a l       .debug_str	00000000 
0000190b l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
00001920 l       .debug_str	00000000 
0001e968 l       .debug_str	00000000 
00001940 l       .debug_str	00000000 
00001948 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
00000871 l       .debug_str	00000000 
00000a24 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
00000a0e l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00025217 l       .debug_str	00000000 
0002281f l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
0001d48c l       .debug_str	00000000 
00016f49 l       .debug_str	00000000 
00000fa7 l       .debug_str	00000000 
00000fd4 l       .debug_str	00000000 
0002240f l       .debug_str	00000000 
00018f74 l       .debug_str	00000000 
0001f202 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
0000099b l       .debug_str	00000000 
000008b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001032 l       .debug_str	00000000 
00001090 l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
00000a7e l       .debug_str	00000000 
00000a5e l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001022 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000866 l       .debug_str	00000000 
00000a17 l       .debug_str	00000000 
00000a86 l       .debug_str	00000000 
00001114 l       .debug_str	00000000 
00000a04 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
000008cd l       .debug_str	00000000 
0000112a l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000087c l       .debug_str	00000000 
00001166 l       .debug_str	00000000 
00004d4b l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
00001952 l       .debug_str	00000000 
0002e85d l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00001971 l       .debug_str	00000000 
0000197a l       .debug_str	00000000 
00002d66 l       .debug_str	00000000 
00001983 l       .debug_str	00000000 
000283ef l       .debug_str	00000000 
0000198b l       .debug_str	00000000 
00001997 l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019aa l       .debug_str	00000000 
000019b2 l       .debug_str	00000000 
00001aae l       .debug_str	00000000 
00001bb2 l       .debug_str	00000000 
00001bc0 l       .debug_str	00000000 
000287fb l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00001bee l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001bf9 l       .debug_str	00000000 
00001c74 l       .debug_str	00000000 
00001cf7 l       .debug_str	00000000 
00001d05 l       .debug_str	00000000 
00001d64 l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001de1 l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
0001b53d l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00001e00 l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
0002e198 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e26 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e72 l       .debug_str	00000000 
00001e4f l       .debug_str	00000000 
00001e82 l       .debug_str	00000000 
00001ec2 l       .debug_str	00000000 
0001afe8 l       .debug_str	00000000 
00001f0a l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00001f16 l       .debug_str	00000000 
00001f3f l       .debug_str	00000000 
00001f1c l       .debug_str	00000000 
00001f51 l       .debug_str	00000000 
00001f93 l       .debug_str	00000000 
0001ae9a l       .debug_str	00000000 
00001fdd l       .debug_str	00000000 
00001fe3 l       .debug_str	00000000 
00001fe9 l       .debug_str	00000000 
00002012 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00002024 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
0001a0ee l       .debug_str	00000000 
000020b0 l       .debug_str	00000000 
000020b6 l       .debug_str	00000000 
000020bc l       .debug_str	00000000 
000020c2 l       .debug_str	00000000 
000020eb l       .debug_str	00000000 
000020c8 l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
0000213d l       .debug_str	00000000 
00002186 l       .debug_str	00000000 
0000218b l       .debug_str	00000000 
0001b2a3 l       .debug_str	00000000 
00002190 l       .debug_str	00000000 
00002196 l       .debug_str	00000000 
0000219c l       .debug_str	00000000 
000021c5 l       .debug_str	00000000 
000021a2 l       .debug_str	00000000 
000021d6 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
0001a1c2 l       .debug_str	00000000 
00002260 l       .debug_str	00000000 
0000228c l       .debug_str	00000000 
00002269 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000022de l       .debug_str	00000000 
00002327 l       .debug_str	00000000 
0001b4e0 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00002367 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023bb l       .debug_str	00000000 
0001b120 l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002417 l       .debug_str	00000000 
0000241d l       .debug_str	00000000 
00002425 l       .debug_str	00000000 
00002433 l       .debug_str	00000000 
00002442 l       .debug_str	00000000 
00002453 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002469 l       .debug_str	00000000 
00002474 l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
000024c1 l       .debug_str	00000000 
0000249e l       .debug_str	00000000 
000024d3 l       .debug_str	00000000 
00002515 l       .debug_str	00000000 
0001a2e7 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000258c l       .debug_str	00000000 
00002569 l       .debug_str	00000000 
0000259e l       .debug_str	00000000 
000025e0 l       .debug_str	00000000 
0000262a l       .debug_str	00000000 
0000262f l       .debug_str	00000000 
0000265c l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0000266e l       .debug_str	00000000 
000026b0 l       .debug_str	00000000 
000026fa l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00002779 l       .debug_str	00000000 
0000270e l       .debug_str	00000000 
0000271e l       .debug_str	00000000 
00002727 l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002741 l       .debug_str	00000000 
00002756 l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
00002824 l       .debug_str	00000000 
000028c9 l       .debug_str	00000000 
000028d4 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002921 l       .debug_str	00000000 
000028fe l       .debug_str	00000000 
00002934 l       .debug_str	00000000 
000029b7 l       .debug_str	00000000 
00002a42 l       .debug_str	00000000 
00002a5e l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002afe l       .debug_str	00000000 
00002b1b l       .debug_str	00000000 
00002b2f l       .debug_str	00000000 
00002b7b l       .debug_str	00000000 
00002bcf l       .debug_str	00000000 
00002be5 l       .debug_str	00000000 
00002bf9 l       .debug_str	00000000 
00002c40 l       .debug_str	00000000 
00002c8f l       .debug_str	00000000 
00002cbb l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002cc9 l       .debug_str	00000000 
00002ccf l       .debug_str	00000000 
00002cd7 l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00002ce6 l       .debug_str	00000000 
00002cee l       .debug_str	00000000 
0001099c l       .debug_str	00000000 
00002cfd l       .debug_str	00000000 
000033d1 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002d13 l       .debug_str	00000000 
0002e235 l       .debug_str	00000000 
00002d24 l       .debug_str	00000000 
00002d2c l       .debug_str	00000000 
00002d33 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d45 l       .debug_str	00000000 
00002d4d l       .debug_str	00000000 
00002d6f l       .debug_str	00000000 
00002d7a l       .debug_str	00000000 
00002d86 l       .debug_str	00000000 
00002d8e l       .debug_str	00000000 
00002d97 l       .debug_str	00000000 
0001d84b l       .debug_str	00000000 
00002da2 l       .debug_str	00000000 
00002dad l       .debug_str	00000000 
00002db8 l       .debug_str	00000000 
0000118e l       .debug_str	00000000 
0001a24a l       .debug_str	00000000 
0000123b l       .debug_str	00000000 
00001198 l       .debug_str	00000000 
000011d0 l       .debug_str	00000000 
00001210 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000121f l       .debug_str	00000000 
00001254 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
00002e0b l       .debug_str	00000000 
00002e20 l       .debug_str	00000000 
00002e29 l       .debug_str	00000000 
00002e86 l       .debug_str	00000000 
00002eeb l       .debug_str	00000000 
00002ef5 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f1a l       .debug_str	00000000 
00002f22 l       .debug_str	00000000 
00002f86 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
00002ff9 l       .debug_str	00000000 
00003001 l       .debug_str	00000000 
00003042 l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003052 l       .debug_str	00000000 
00003067 l       .debug_str	00000000 
0000307a l       .debug_str	00000000 
0002e23c l       .debug_str	00000000 
000030a4 l       .debug_str	00000000 
0000a163 l       .debug_str	00000000 
0000c06a l       .debug_str	00000000 
000030ce l       .debug_str	00000000 
000030d5 l       .debug_str	00000000 
0000f665 l       .debug_str	00000000 
00002dfb l       .debug_str	00000000 
0000dd50 l       .debug_str	00000000 
0000dd65 l       .debug_str	00000000 
0000dda0 l       .debug_str	00000000 
0000ddb2 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
0000ddee l       .debug_str	00000000 
0000de2c l       .debug_str	00000000 
0000de40 l       .debug_str	00000000 
0002499e l       .debug_str	00000000 
0000de7c l       .debug_str	00000000 
0000deba l       .debug_str	00000000 
000031a4 l       .debug_str	00000000 
0000dece l       .debug_str	00000000 
0000df0d l       .debug_str	00000000 
0000df22 l       .debug_str	00000000 
0000df62 l       .debug_str	00000000 
0000df78 l       .debug_str	00000000 
0000dfb9 l       .debug_str	00000000 
0000dfd0 l       .debug_str	00000000 
0000e005 l       .debug_str	00000000 
0000a407 l       .debug_str	00000000 
0000e010 l       .debug_str	00000000 
0000e01c l       .debug_str	00000000 
0000e02a l       .debug_str	00000000 
0000e041 l       .debug_str	00000000 
00025109 l       .debug_str	00000000 
00009877 l       .debug_str	00000000 
0000d6ef l       .debug_str	00000000 
00009880 l       .debug_str	00000000 
00009401 l       .debug_str	00000000 
0000d6ee l       .debug_str	00000000 
00004d2d l       .debug_str	00000000 
00004d53 l       .debug_str	00000000 
00000be8 l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
00000c02 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000c16 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c24 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0002613b l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
00000c3e l       .debug_str	00000000 
20000100 l     O .data	00000050 _ZN6mynewt2hw6sensor16SENSOR_LISTENERS17h4381df31c5936ab5E
20000150 l     O .data	00000018 _ZN6mynewt2hw6sensor17LISTENER_INTERNAL17h527fcad6a8d280b6E
0000b75c l     F .text	0000044e _ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E
0000c072 l     F .text	0000013c _ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE
0000c1ae l     F .text	0000002a _ZN6mynewt2hw6sensor21null_sensor_data_func17hc0c8b3b45de7f5dbE
0000c1d8 l     F .text	00000016 _ZN6mynewt2hw6sensor22null_sensor_value_func17hd571166552189f92E
0002a5c0 l     O .text	0000001c str.0
0002a5e0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 53y0kb27z0cv8hmk
00002afe l       .debug_str	00000000 
0002e23c l       .debug_str	00000000 
0000308f l       .debug_str	00000000 
000030a4 l       .debug_str	00000000 
0000e27b l       .debug_str	00000000 
0000e1dc l       .debug_str	00000000 
000098ac l       .debug_str	00000000 
0000a50a l       .debug_str	00000000 
00004d58 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000e25e l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0000e17b l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000e186 l       .debug_str	00000000 
0000e1c4 l       .debug_str	00000000 
0000e1cb l       .debug_str	00000000 
00018c4c l       .debug_str	00000000 
000031f7 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
000031ff l       .debug_str	00000000 
00003204 l       .debug_str	00000000 
00004d61 l       .debug_str	00000000 
0000e1d3 l       .debug_str	00000000 
0000005d l       .debug_str	00000000 
000015d5 l       .debug_str	00000000 
0000193a l       .debug_str	00000000 
00000f76 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
000015f5 l       .debug_str	00000000 
00001601 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
00001609 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
000016c5 l       .debug_str	00000000 
000016d0 l       .debug_str	00000000 
00001717 l       .debug_str	00000000 
00001766 l       .debug_str	00000000 
00001770 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017f2 l       .debug_str	00000000 
000017fb l       .debug_str	00000000 
0000180b l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
00001868 l       .debug_str	00000000 
000018c5 l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
000018da l       .debug_str	00000000 
000018e6 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001903 l       .debug_str	00000000 
0000092a l       .debug_str	00000000 
0000190b l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
00001920 l       .debug_str	00000000 
0001e968 l       .debug_str	00000000 
00001940 l       .debug_str	00000000 
00001948 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
00000871 l       .debug_str	00000000 
00000a24 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
00000a0e l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00025217 l       .debug_str	00000000 
0002281f l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
0001d48c l       .debug_str	00000000 
00016f49 l       .debug_str	00000000 
00000fa7 l       .debug_str	00000000 
00000fd4 l       .debug_str	00000000 
0002240f l       .debug_str	00000000 
00018f74 l       .debug_str	00000000 
0001f202 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
0000099b l       .debug_str	00000000 
000008b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001032 l       .debug_str	00000000 
00001090 l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
00000a7e l       .debug_str	00000000 
00000a5e l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001022 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000866 l       .debug_str	00000000 
00000a17 l       .debug_str	00000000 
00000a86 l       .debug_str	00000000 
00001114 l       .debug_str	00000000 
00000a04 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
000008cd l       .debug_str	00000000 
0000112a l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000087c l       .debug_str	00000000 
00001166 l       .debug_str	00000000 
00004d4b l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
00001952 l       .debug_str	00000000 
0002e85d l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00001971 l       .debug_str	00000000 
0000197a l       .debug_str	00000000 
00002d66 l       .debug_str	00000000 
00001983 l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000283ef l       .debug_str	00000000 
0000198b l       .debug_str	00000000 
00001997 l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019aa l       .debug_str	00000000 
0000a163 l       .debug_str	00000000 
0000c06a l       .debug_str	00000000 
000019b2 l       .debug_str	00000000 
00001aae l       .debug_str	00000000 
00001bb2 l       .debug_str	00000000 
00001bc0 l       .debug_str	00000000 
000287fb l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00001bee l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001bf9 l       .debug_str	00000000 
00001c74 l       .debug_str	00000000 
00001cf7 l       .debug_str	00000000 
00001d05 l       .debug_str	00000000 
00001d64 l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001de1 l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
0001b53d l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00001e00 l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
0002e198 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e26 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e72 l       .debug_str	00000000 
00001e4f l       .debug_str	00000000 
00001e82 l       .debug_str	00000000 
00001ec2 l       .debug_str	00000000 
0001afe8 l       .debug_str	00000000 
00001f0a l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00001f16 l       .debug_str	00000000 
00001f3f l       .debug_str	00000000 
00001f1c l       .debug_str	00000000 
00001f51 l       .debug_str	00000000 
00001f93 l       .debug_str	00000000 
0001ae9a l       .debug_str	00000000 
00001fdd l       .debug_str	00000000 
00001fe3 l       .debug_str	00000000 
00001fe9 l       .debug_str	00000000 
00002012 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00002024 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
0001a0ee l       .debug_str	00000000 
000020b0 l       .debug_str	00000000 
000020b6 l       .debug_str	00000000 
000020bc l       .debug_str	00000000 
000020c2 l       .debug_str	00000000 
000020eb l       .debug_str	00000000 
000020c8 l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
0000213d l       .debug_str	00000000 
00002186 l       .debug_str	00000000 
0000218b l       .debug_str	00000000 
0001b2a3 l       .debug_str	00000000 
00002190 l       .debug_str	00000000 
00002196 l       .debug_str	00000000 
0000219c l       .debug_str	00000000 
000021c5 l       .debug_str	00000000 
000021a2 l       .debug_str	00000000 
000021d6 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
0001a1c2 l       .debug_str	00000000 
00002260 l       .debug_str	00000000 
0000228c l       .debug_str	00000000 
00002269 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000022de l       .debug_str	00000000 
00002327 l       .debug_str	00000000 
0001b4e0 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00002367 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023bb l       .debug_str	00000000 
0001b120 l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002417 l       .debug_str	00000000 
0000241d l       .debug_str	00000000 
00002425 l       .debug_str	00000000 
00002433 l       .debug_str	00000000 
00002442 l       .debug_str	00000000 
00002453 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002469 l       .debug_str	00000000 
00002474 l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
000024c1 l       .debug_str	00000000 
0000249e l       .debug_str	00000000 
000024d3 l       .debug_str	00000000 
00002515 l       .debug_str	00000000 
0001a2e7 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000258c l       .debug_str	00000000 
00002569 l       .debug_str	00000000 
0000259e l       .debug_str	00000000 
000025e0 l       .debug_str	00000000 
0000262a l       .debug_str	00000000 
0000262f l       .debug_str	00000000 
0000265c l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0000266e l       .debug_str	00000000 
000026b0 l       .debug_str	00000000 
000026fa l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00002779 l       .debug_str	00000000 
0000270e l       .debug_str	00000000 
0000271e l       .debug_str	00000000 
00002727 l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002741 l       .debug_str	00000000 
00002756 l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
00002824 l       .debug_str	00000000 
000028c9 l       .debug_str	00000000 
000028d4 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002921 l       .debug_str	00000000 
000028fe l       .debug_str	00000000 
00002934 l       .debug_str	00000000 
000029b7 l       .debug_str	00000000 
00002a42 l       .debug_str	00000000 
00002a5e l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002b1b l       .debug_str	00000000 
00002b2f l       .debug_str	00000000 
00002b7b l       .debug_str	00000000 
00002bcf l       .debug_str	00000000 
00002be5 l       .debug_str	00000000 
00002bf9 l       .debug_str	00000000 
00002c40 l       .debug_str	00000000 
00002c8f l       .debug_str	00000000 
00002cbb l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002cc9 l       .debug_str	00000000 
00002ccf l       .debug_str	00000000 
00002cd7 l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00002ce6 l       .debug_str	00000000 
00002cee l       .debug_str	00000000 
0001099c l       .debug_str	00000000 
00002cfd l       .debug_str	00000000 
000033d1 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002d13 l       .debug_str	00000000 
0002e235 l       .debug_str	00000000 
00002d24 l       .debug_str	00000000 
00002d2c l       .debug_str	00000000 
00002d33 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d45 l       .debug_str	00000000 
00002d4d l       .debug_str	00000000 
00002d6f l       .debug_str	00000000 
00002d7a l       .debug_str	00000000 
00002d86 l       .debug_str	00000000 
00002d8e l       .debug_str	00000000 
00002d97 l       .debug_str	00000000 
0001d84b l       .debug_str	00000000 
00002da2 l       .debug_str	00000000 
00002dad l       .debug_str	00000000 
00002db8 l       .debug_str	00000000 
0000118e l       .debug_str	00000000 
0001a24a l       .debug_str	00000000 
0000123b l       .debug_str	00000000 
00001198 l       .debug_str	00000000 
000011d0 l       .debug_str	00000000 
00001210 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000121f l       .debug_str	00000000 
00001254 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
000015de l       .debug_str	00000000 
000015ed l       .debug_str	00000000 
000030ce l       .debug_str	00000000 
000030d5 l       .debug_str	00000000 
0000f665 l       .debug_str	00000000 
00002dfb l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
00002e0b l       .debug_str	00000000 
00002e20 l       .debug_str	00000000 
00002e29 l       .debug_str	00000000 
00002e86 l       .debug_str	00000000 
00002eeb l       .debug_str	00000000 
00002ef5 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f1a l       .debug_str	00000000 
00002f22 l       .debug_str	00000000 
00002f86 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
00002ff9 l       .debug_str	00000000 
00003001 l       .debug_str	00000000 
00003042 l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003052 l       .debug_str	00000000 
00003067 l       .debug_str	00000000 
0000307a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 73tzoq0dg2elnv7
0000e2c1 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
0000e2da l       .debug_str	00000000 
0000e2e0 l       .debug_str	00000000 
0000e2df l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000e28c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 7dvy57co4l418sf
0001b1fb l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0001719c l       .debug_str	00000000 
0000e2e4 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000e2f7 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000e37c l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
0000e385 l       .debug_str	00000000 
00006bd8 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
0000e395 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 lmzjx8b8f3hut61
00000d21 l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
000185f1 l       .debug_str	00000000 
000095e5 l       .debug_str	00000000 
0002cf66 l       .debug_str	00000000 
0000ca17 l       .debug_str	00000000 
0000d254 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000e3bd l       .debug_str	00000000 
0000e405 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000d233 l       .debug_str	00000000 
0000d232 l       .debug_str	00000000 
00012330 l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 owtw2d7rzesk6el
00002cbb l       .debug_str	00000000 
0000c06a l       .debug_str	00000000 
000030ce l       .debug_str	00000000 
000030d5 l       .debug_str	00000000 
00002dfb l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
0000f665 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
0000ebc8 l       .debug_str	00000000 
0000ec51 l       .debug_str	00000000 
0000eccb l       .debug_str	00000000 
00007d72 l       .debug_str	00000000 
00007d7e l       .debug_str	00000000 
00007d88 l       .debug_str	00000000 
0000ed48 l       .debug_str	00000000 
0000edd4 l       .debug_str	00000000 
0000ee51 l       .debug_str	00000000 
000079bd l       .debug_str	00000000 
000079c9 l       .debug_str	00000000 
000079d5 l       .debug_str	00000000 
0000eed0 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007b6b l       .debug_str	00000000 
00007b77 l       .debug_str	00000000 
00007b83 l       .debug_str	00000000 
0000ef4e l       .debug_str	00000000 
0000efc9 l       .debug_str	00000000 
0000f03e l       .debug_str	00000000 
0000f0bd l       .debug_str	00000000 
0000f13c l       .debug_str	00000000 
0000f1bb l       .debug_str	00000000 
0000f23a l       .debug_str	00000000 
0000f2ab l       .debug_str	00000000 
00008da8 l       .debug_str	00000000 
00008db2 l       .debug_str	00000000 
00008dbb l       .debug_str	00000000 
0000f325 l       .debug_str	00000000 
00005a1d l       .debug_str	00000000 
0000f3ac l       .debug_str	00000000 
0001b278 l       .debug_str	00000000 
00008734 l       .debug_str	00000000 
00008747 l       .debug_str	00000000 
00008752 l       .debug_str	00000000 
00005a2b l       .debug_str	00000000 
0000f424 l       .debug_str	00000000 
0000b048 l       .debug_str	00000000 
0000f4b3 l       .debug_str	00000000 
0000f551 l       .debug_str	00000000 
0002e503 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00006bd8 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
0000dd28 l       .debug_str	00000000 
0000f588 l       .debug_str	00000000 
0001a151 l       .debug_str	00000000 
000092c6 l       .debug_str	00000000 
0000f5d3 l       .debug_str	00000000 
0001a412 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000f617 l       .debug_str	00000000 
0000f646 l       .debug_str	00000000 
00005064 l       .debug_str	00000000 
0001a7b0 l       .debug_str	00000000 
0002845d l       .debug_str	00000000 
00029ea3 l       .debug_str	00000000 
00004d20 l       .debug_str	00000000 
0000e1cb l       .debug_str	00000000 
00018c4c l       .debug_str	00000000 
000031f7 l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
000031ff l       .debug_str	00000000 
00003204 l       .debug_str	00000000 
00004d61 l       .debug_str	00000000 
00004d58 l       .debug_str	00000000 
0000f683 l       .debug_str	00000000 
0001a491 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000eb7 l       .debug_str	00000000 
00000ebf l       .debug_str	00000000 
00000eca l       .debug_str	00000000 
00000ed5 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000eed l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000f15 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f38 l       .debug_str	00000000 
00000f44 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
00000f69 l       .debug_str	00000000 
0000e16f l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0000005d l       .debug_str	00000000 
000015d5 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000e434 l       .debug_str	00000000 
00014dbe l       .debug_str	00000000 
0000092a l       .debug_str	00000000 
00000f76 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
0000118e l       .debug_str	00000000 
0001a24a l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00001198 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
000011d0 l       .debug_str	00000000 
00001210 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000121f l       .debug_str	00000000 
00001254 l       .debug_str	00000000 
0000123b l       .debug_str	00000000 
0000e4b5 l       .debug_str	00000000 
00000887 l       .debug_str	00000000 
00000aae l       .debug_str	00000000 
00001236 l       .debug_str	00000000 
0000125d l       .debug_str	00000000 
0000e537 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
00019893 l       .debug_str	00000000 
00000f7d l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
00000871 l       .debug_str	00000000 
00000a24 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
00000a0e l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00025217 l       .debug_str	00000000 
0002281f l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
0001d48c l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00016f49 l       .debug_str	00000000 
00000fa7 l       .debug_str	00000000 
00000fd4 l       .debug_str	00000000 
0002240f l       .debug_str	00000000 
00018f74 l       .debug_str	00000000 
0001f202 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
0000099b l       .debug_str	00000000 
000008b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001032 l       .debug_str	00000000 
00001090 l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
00000a7e l       .debug_str	00000000 
00000a5e l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001022 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000866 l       .debug_str	00000000 
00000a17 l       .debug_str	00000000 
00000a86 l       .debug_str	00000000 
00001114 l       .debug_str	00000000 
00000a04 l       .debug_str	00000000 
000008cd l       .debug_str	00000000 
0000112a l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000087c l       .debug_str	00000000 
00001166 l       .debug_str	00000000 
00004d4b l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
0000117c l       .debug_str	00000000 
00001185 l       .debug_str	00000000 
0000128e l       .debug_str	00000000 
00001275 l       .debug_str	00000000 
000038a3 l       .debug_str	00000000 
0001efce l       .debug_str	00000000 
000038ab l       .debug_str	00000000 
000038d4 l       .debug_str	00000000 
000038c9 l       .debug_str	00000000 
000038b0 l       .debug_str	00000000 
0000e5ba l       .debug_str	00000000 
000015f5 l       .debug_str	00000000 
00001601 l       .debug_str	00000000 
00001609 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
000016c5 l       .debug_str	00000000 
000016d0 l       .debug_str	00000000 
00001717 l       .debug_str	00000000 
00001766 l       .debug_str	00000000 
00001770 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017f2 l       .debug_str	00000000 
000017fb l       .debug_str	00000000 
0000180b l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
00001868 l       .debug_str	00000000 
000018c5 l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
000018da l       .debug_str	00000000 
000018e6 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001903 l       .debug_str	00000000 
0000190b l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
00001920 l       .debug_str	00000000 
0000e639 l       .debug_str	00000000 
00003ced l       .debug_str	00000000 
00003cf5 l       .debug_str	00000000 
000064bb l       .debug_str	00000000 
00003d0f l       .debug_str	00000000 
0000e6bd l       .debug_str	00000000 
00003c80 l       .debug_str	00000000 
00003c8e l       .debug_str	00000000 
00003c9c l       .debug_str	00000000 
00003ca8 l       .debug_str	00000000 
00003eae l       .debug_str	00000000 
00003cb4 l       .debug_str	00000000 
00020ea2 l       .debug_str	00000000 
00003cc3 l       .debug_str	00000000 
00003cdc l       .debug_str	00000000 
00001948 l       .debug_str	00000000 
00003d34 l       .debug_str	00000000 
000018fe l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00007a6d l       .debug_str	00000000 
00003d4d l       .debug_str	00000000 
0000e740 l       .debug_str	00000000 
0000e7c3 l       .debug_str	00000000 
00001952 l       .debug_str	00000000 
0000e844 l       .debug_str	00000000 
0000e8cd l       .debug_str	00000000 
0000e94d l       .debug_str	00000000 
0000e9cd l       .debug_str	00000000 
0000ea4d l       .debug_str	00000000 
0001b53d l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00001e00 l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
0002e198 l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e26 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e72 l       .debug_str	00000000 
00001e4f l       .debug_str	00000000 
00001e82 l       .debug_str	00000000 
00001ec2 l       .debug_str	00000000 
0001afe8 l       .debug_str	00000000 
00001f0a l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00001f16 l       .debug_str	00000000 
00001f3f l       .debug_str	00000000 
00001f1c l       .debug_str	00000000 
00001f51 l       .debug_str	00000000 
00001f93 l       .debug_str	00000000 
0001ae9a l       .debug_str	00000000 
00001fdd l       .debug_str	00000000 
00001fe3 l       .debug_str	00000000 
00001fe9 l       .debug_str	00000000 
00002012 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00002024 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
0001a0ee l       .debug_str	00000000 
000020b0 l       .debug_str	00000000 
000020b6 l       .debug_str	00000000 
000020bc l       .debug_str	00000000 
000020c2 l       .debug_str	00000000 
000020eb l       .debug_str	00000000 
000020c8 l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
0000213d l       .debug_str	00000000 
00002186 l       .debug_str	00000000 
0000218b l       .debug_str	00000000 
0001b2a3 l       .debug_str	00000000 
00002190 l       .debug_str	00000000 
00002196 l       .debug_str	00000000 
0000219c l       .debug_str	00000000 
000021c5 l       .debug_str	00000000 
000021a2 l       .debug_str	00000000 
000021d6 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
0001a1c2 l       .debug_str	00000000 
00002260 l       .debug_str	00000000 
0000228c l       .debug_str	00000000 
00002269 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000022de l       .debug_str	00000000 
00002327 l       .debug_str	00000000 
0001b4e0 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00002367 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023bb l       .debug_str	00000000 
0001b120 l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002417 l       .debug_str	00000000 
0000241d l       .debug_str	00000000 
00002425 l       .debug_str	00000000 
00002433 l       .debug_str	00000000 
00002442 l       .debug_str	00000000 
00002453 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002469 l       .debug_str	00000000 
00002474 l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
000024c1 l       .debug_str	00000000 
0000249e l       .debug_str	00000000 
000024d3 l       .debug_str	00000000 
00002515 l       .debug_str	00000000 
0001a2e7 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000258c l       .debug_str	00000000 
00002569 l       .debug_str	00000000 
0000259e l       .debug_str	00000000 
000025e0 l       .debug_str	00000000 
0000262a l       .debug_str	00000000 
0000262f l       .debug_str	00000000 
0000265c l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0000266e l       .debug_str	00000000 
000026b0 l       .debug_str	00000000 
000026fa l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00002779 l       .debug_str	00000000 
0000eac5 l       .debug_str	00000000 
000015de l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000015ed l       .debug_str	00000000 
0000193a l       .debug_str	00000000 
0001e968 l       .debug_str	00000000 
00001940 l       .debug_str	00000000 
0002e85d l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00001971 l       .debug_str	00000000 
0000197a l       .debug_str	00000000 
00002d66 l       .debug_str	00000000 
00001983 l       .debug_str	00000000 
000283ef l       .debug_str	00000000 
0000198b l       .debug_str	00000000 
00001997 l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019aa l       .debug_str	00000000 
000019b2 l       .debug_str	00000000 
00001aae l       .debug_str	00000000 
00001bb2 l       .debug_str	00000000 
00001bc0 l       .debug_str	00000000 
000287fb l       .debug_str	00000000 
00001bee l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001bf9 l       .debug_str	00000000 
00001c74 l       .debug_str	00000000 
00001cf7 l       .debug_str	00000000 
00001d05 l       .debug_str	00000000 
00001d64 l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001de1 l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
0000270e l       .debug_str	00000000 
0000271e l       .debug_str	00000000 
00002727 l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002741 l       .debug_str	00000000 
00002756 l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
00002824 l       .debug_str	00000000 
000028c9 l       .debug_str	00000000 
000028d4 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002921 l       .debug_str	00000000 
000028fe l       .debug_str	00000000 
00002934 l       .debug_str	00000000 
000029b7 l       .debug_str	00000000 
00002a42 l       .debug_str	00000000 
00002a5e l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002afe l       .debug_str	00000000 
00002b1b l       .debug_str	00000000 
00002b2f l       .debug_str	00000000 
00002b7b l       .debug_str	00000000 
00002bcf l       .debug_str	00000000 
00002be5 l       .debug_str	00000000 
00002bf9 l       .debug_str	00000000 
00002c40 l       .debug_str	00000000 
00002c8f l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002cc9 l       .debug_str	00000000 
00002ccf l       .debug_str	00000000 
00002cd7 l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00002ce6 l       .debug_str	00000000 
00002cee l       .debug_str	00000000 
0001099c l       .debug_str	00000000 
00002cfd l       .debug_str	00000000 
000033d1 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002d13 l       .debug_str	00000000 
0002e235 l       .debug_str	00000000 
00002d24 l       .debug_str	00000000 
00002d2c l       .debug_str	00000000 
00002d33 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d45 l       .debug_str	00000000 
00002d4d l       .debug_str	00000000 
00002d6f l       .debug_str	00000000 
00002d7a l       .debug_str	00000000 
00002d86 l       .debug_str	00000000 
00002d8e l       .debug_str	00000000 
00002d97 l       .debug_str	00000000 
0001d84b l       .debug_str	00000000 
00002da2 l       .debug_str	00000000 
00002dad l       .debug_str	00000000 
00002db8 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002e0b l       .debug_str	00000000 
00002e20 l       .debug_str	00000000 
00002e29 l       .debug_str	00000000 
00002e86 l       .debug_str	00000000 
00002eeb l       .debug_str	00000000 
00002ef5 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f1a l       .debug_str	00000000 
00002f22 l       .debug_str	00000000 
00002f86 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
00002ff9 l       .debug_str	00000000 
00003001 l       .debug_str	00000000 
00003042 l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003052 l       .debug_str	00000000 
00003067 l       .debug_str	00000000 
0000307a l       .debug_str	00000000 
0002e23c l       .debug_str	00000000 
0000308f l       .debug_str	00000000 
000030a4 l       .debug_str	00000000 
0000a163 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 snjixzygxrnlbm4
000032e8 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000f68f l       .debug_str	00000000 
0000f6d9 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.4br1pvmw-cgu.5
00029fbb l       .debug_str	00000000 
0000f8d0 l       .debug_str	00000000 
0000f8f5 l       .debug_str	00000000 
0000f99e l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
000098a6 l       .debug_str	00000000 
00009ac6 l       .debug_str	00000000 
0002a56c l       .debug_str	00000000 
0000f9c6 l       .debug_str	00000000 
0000f9af l       .debug_str	00000000 
0001baab l       .debug_str	00000000 
0000f9d3 l       .debug_str	00000000 
00011f5d l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
0000a602 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000b1d8 l       .debug_str	00000000 
00021a3c l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000f6f4 l       .debug_str	00000000 
0000f77a l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
00019294 l       .debug_str	00000000 
0000f784 l       .debug_str	00000000 
0000f819 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
0000f825 l       .debug_str	00000000 
0000f8bf l       .debug_str	00000000 
00004002 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.4br1pvmw-cgu.8
0002aa0f l       .debug_str	00000000 
0002a56c l       .debug_str	00000000 
0000b3f0 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000dcc1 l       .debug_str	00000000 
0001baab l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
0000a602 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0000b1d8 l       .debug_str	00000000 
00021a3c l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000f9f3 l       .debug_str	00000000 
0000fa4d l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
0000fa5b l       .debug_str	00000000 
0000faae l       .debug_str	00000000 
0000fab6 l       .debug_str	00000000 
0000dcb7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.4br1pvmw-cgu.9
0000753e l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000b3f0 l       .debug_str	00000000 
0000a1df l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
0000a602 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00021028 l       .debug_str	00000000 
000115c6 l       .debug_str	00000000 
0000fb0b l       .debug_str	00000000 
0000fb10 l       .debug_str	00000000 
0000fb16 l       .debug_str	00000000 
0000fb1e l       .debug_str	00000000 
0000e2f1 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000fb27 l       .debug_str	00000000 
0000fb86 l       .debug_str	00000000 
0002ab4b l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.2jnkkboq-cgu.11
00001f0e l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000b597 l       .debug_str	00000000 
0000b5ec l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
00019d74 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
0000fbeb l       .debug_str	00000000 
0000fc2a l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 197aou5dsaq9rghf
0000a1df l       .debug_str	00000000 
0000e2e0 l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
0000d22d l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00021028 l       .debug_str	00000000 
0000e2f1 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000fc3b l       .debug_str	00000000 
000107a6 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
0000fc9c l       .debug_str	00000000 
0002ab4b l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2ii6ihe40wv4se24
00002b1b l       .debug_str	00000000 
0002e23c l       .debug_str	00000000 
0000308f l       .debug_str	00000000 
0000fcff l       .debug_str	00000000 
0000fd49 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000e9a l       .debug_str	00000000 
00000ea5 l       .debug_str	00000000 
00000fa0 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
00000eb0 l       .debug_str	00000000 
0001d116 l       .debug_str	00000000 
0000005d l       .debug_str	00000000 
000015d5 l       .debug_str	00000000 
0000193a l       .debug_str	00000000 
00000f76 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
000015f5 l       .debug_str	00000000 
00001601 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
00000f90 l       .debug_str	00000000 
00001609 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
000016c5 l       .debug_str	00000000 
000016d0 l       .debug_str	00000000 
00001717 l       .debug_str	00000000 
00001766 l       .debug_str	00000000 
00001770 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017f2 l       .debug_str	00000000 
000017fb l       .debug_str	00000000 
0000180b l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
00001868 l       .debug_str	00000000 
000018c5 l       .debug_str	00000000 
000018d1 l       .debug_str	00000000 
000018da l       .debug_str	00000000 
000018e6 l       .debug_str	00000000 
000018f2 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00001903 l       .debug_str	00000000 
0000092a l       .debug_str	00000000 
0000190b l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
00001920 l       .debug_str	00000000 
0001e968 l       .debug_str	00000000 
00001940 l       .debug_str	00000000 
00001948 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
00000871 l       .debug_str	00000000 
00000a24 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
00000a0e l       .debug_str	00000000 
000009ec l       .debug_str	00000000 
00025217 l       .debug_str	00000000 
0002281f l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008a3 l       .debug_str	00000000 
0001d48c l       .debug_str	00000000 
00016f49 l       .debug_str	00000000 
00000fa7 l       .debug_str	00000000 
00000fd4 l       .debug_str	00000000 
0002240f l       .debug_str	00000000 
00018f74 l       .debug_str	00000000 
0001f202 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
0000099b l       .debug_str	00000000 
000008b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001032 l       .debug_str	00000000 
00001090 l       .debug_str	00000000 
0000097b l       .debug_str	00000000 
00000a7e l       .debug_str	00000000 
00000a5e l       .debug_str	00000000 
000010f6 l       .debug_str	00000000 
00001022 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000866 l       .debug_str	00000000 
00000a17 l       .debug_str	00000000 
00000a86 l       .debug_str	00000000 
00001114 l       .debug_str	00000000 
00000a04 l       .debug_str	00000000 
0000092b l       .debug_str	00000000 
000008cd l       .debug_str	00000000 
0000112a l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000087c l       .debug_str	00000000 
00001166 l       .debug_str	00000000 
00004d4b l       .debug_str	00000000 
0000112f l       .debug_str	00000000 
00001952 l       .debug_str	00000000 
0002e85d l       .debug_str	00000000 
00001969 l       .debug_str	00000000 
00001971 l       .debug_str	00000000 
0000197a l       .debug_str	00000000 
00002d66 l       .debug_str	00000000 
00001983 l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000283ef l       .debug_str	00000000 
0000198b l       .debug_str	00000000 
00001997 l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019aa l       .debug_str	00000000 
000030a4 l       .debug_str	00000000 
0000a163 l       .debug_str	00000000 
0000c06a l       .debug_str	00000000 
000019b2 l       .debug_str	00000000 
00001aae l       .debug_str	00000000 
00001bb2 l       .debug_str	00000000 
00001bc0 l       .debug_str	00000000 
000287fb l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00001bee l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001bf9 l       .debug_str	00000000 
00001c74 l       .debug_str	00000000 
00001cf7 l       .debug_str	00000000 
00001d05 l       .debug_str	00000000 
00001d64 l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001de1 l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
0001b53d l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00001e00 l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
00001e06 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
0002e198 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
00001e1e l       .debug_str	00000000 
00001e26 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e72 l       .debug_str	00000000 
00001e4f l       .debug_str	00000000 
00001e82 l       .debug_str	00000000 
00001ec2 l       .debug_str	00000000 
0001afe8 l       .debug_str	00000000 
00001f0a l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00001f16 l       .debug_str	00000000 
00001f3f l       .debug_str	00000000 
00001f1c l       .debug_str	00000000 
00001f51 l       .debug_str	00000000 
00001f93 l       .debug_str	00000000 
0001ae9a l       .debug_str	00000000 
00001fdd l       .debug_str	00000000 
00001fe3 l       .debug_str	00000000 
00001fe9 l       .debug_str	00000000 
00002012 l       .debug_str	00000000 
00001fef l       .debug_str	00000000 
00002024 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
0001a0ee l       .debug_str	00000000 
000020b0 l       .debug_str	00000000 
000020b6 l       .debug_str	00000000 
000020bc l       .debug_str	00000000 
000020c2 l       .debug_str	00000000 
000020eb l       .debug_str	00000000 
000020c8 l       .debug_str	00000000 
000020fc l       .debug_str	00000000 
0000213d l       .debug_str	00000000 
00002186 l       .debug_str	00000000 
0000218b l       .debug_str	00000000 
0001b2a3 l       .debug_str	00000000 
00002190 l       .debug_str	00000000 
00002196 l       .debug_str	00000000 
0000219c l       .debug_str	00000000 
000021c5 l       .debug_str	00000000 
000021a2 l       .debug_str	00000000 
000021d6 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
0001a1c2 l       .debug_str	00000000 
00002260 l       .debug_str	00000000 
0000228c l       .debug_str	00000000 
00002269 l       .debug_str	00000000 
0000229d l       .debug_str	00000000 
000022de l       .debug_str	00000000 
00002327 l       .debug_str	00000000 
0001b4e0 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00002367 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023bb l       .debug_str	00000000 
0001b120 l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002417 l       .debug_str	00000000 
0000241d l       .debug_str	00000000 
00002425 l       .debug_str	00000000 
00002433 l       .debug_str	00000000 
00002442 l       .debug_str	00000000 
00002453 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002469 l       .debug_str	00000000 
00002474 l       .debug_str	00000000 
0000247b l       .debug_str	00000000 
000024c1 l       .debug_str	00000000 
0000249e l       .debug_str	00000000 
000024d3 l       .debug_str	00000000 
00002515 l       .debug_str	00000000 
0001a2e7 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000258c l       .debug_str	00000000 
00002569 l       .debug_str	00000000 
0000259e l       .debug_str	00000000 
000025e0 l       .debug_str	00000000 
0000262a l       .debug_str	00000000 
0000262f l       .debug_str	00000000 
0000265c l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0000266e l       .debug_str	00000000 
000026b0 l       .debug_str	00000000 
000026fa l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00002779 l       .debug_str	00000000 
0000270e l       .debug_str	00000000 
0000271e l       .debug_str	00000000 
00002727 l       .debug_str	00000000 
00002732 l       .debug_str	00000000 
00002741 l       .debug_str	00000000 
00002756 l       .debug_str	00000000 
00002787 l       .debug_str	00000000 
00002824 l       .debug_str	00000000 
000028c9 l       .debug_str	00000000 
000028d4 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
00002921 l       .debug_str	00000000 
000028fe l       .debug_str	00000000 
00002934 l       .debug_str	00000000 
000029b7 l       .debug_str	00000000 
00002a42 l       .debug_str	00000000 
00002a5e l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002afe l       .debug_str	00000000 
00002b2f l       .debug_str	00000000 
00002b7b l       .debug_str	00000000 
00002bcf l       .debug_str	00000000 
00002be5 l       .debug_str	00000000 
00002bf9 l       .debug_str	00000000 
00002c40 l       .debug_str	00000000 
00002c8f l       .debug_str	00000000 
00002cbb l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002cc9 l       .debug_str	00000000 
00002ccf l       .debug_str	00000000 
00002cd7 l       .debug_str	00000000 
00002cde l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00002ce6 l       .debug_str	00000000 
00002cee l       .debug_str	00000000 
0001099c l       .debug_str	00000000 
00002cfd l       .debug_str	00000000 
000033d1 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002d13 l       .debug_str	00000000 
0002e235 l       .debug_str	00000000 
00002d24 l       .debug_str	00000000 
00002d2c l       .debug_str	00000000 
00002d33 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d45 l       .debug_str	00000000 
00002d4d l       .debug_str	00000000 
00002d6f l       .debug_str	00000000 
00002d7a l       .debug_str	00000000 
00002d86 l       .debug_str	00000000 
00002d8e l       .debug_str	00000000 
00002d97 l       .debug_str	00000000 
0001d84b l       .debug_str	00000000 
00002da2 l       .debug_str	00000000 
00002dad l       .debug_str	00000000 
00002db8 l       .debug_str	00000000 
0000118e l       .debug_str	00000000 
0001a24a l       .debug_str	00000000 
0000123b l       .debug_str	00000000 
00001198 l       .debug_str	00000000 
000011d0 l       .debug_str	00000000 
00001210 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000121f l       .debug_str	00000000 
00001254 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
000015de l       .debug_str	00000000 
000015ed l       .debug_str	00000000 
000030ce l       .debug_str	00000000 
000030d5 l       .debug_str	00000000 
0000f665 l       .debug_str	00000000 
00002dfb l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
00002e0b l       .debug_str	00000000 
00002e20 l       .debug_str	00000000 
00002e29 l       .debug_str	00000000 
00002e86 l       .debug_str	00000000 
00002eeb l       .debug_str	00000000 
00002ef5 l       .debug_str	00000000 
00002f05 l       .debug_str	00000000 
00002f1a l       .debug_str	00000000 
00002f22 l       .debug_str	00000000 
00002f86 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
00002ff9 l       .debug_str	00000000 
00003001 l       .debug_str	00000000 
00003042 l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003052 l       .debug_str	00000000 
00003067 l       .debug_str	00000000 
0000307a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 41i7rs1imxa1bvdp
00000e3f l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
0000d6ef l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
0000d6e3 l       .debug_str	00000000 
0000d22d l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
0001719c l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000fd77 l       .debug_str	00000000 
0000fdd3 l       .debug_str	00000000 
0000fe30 l       .debug_str	00000000 
0000fe8d l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0000e2e0 l       .debug_str	00000000 
00012330 l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d21 l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.4br1pvmw-cgu.15
00010056 l       .debug_str	00000000 
0000ff85 l       .debug_str	00000000 
0000ffd6 l       .debug_str	00000000 
0000ffe8 l       .debug_str	00000000 
00010040 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00006bd8 l       .debug_str	00000000 
00010061 l       .debug_str	00000000 
0001008a l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
000100b0 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
0000a602 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0000a48f l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0000feea l       .debug_str	00000000 
0000fef1 l       .debug_str	00000000 
0000ff1b l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
0001962d l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
0000ff1f l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
0000ff28 l       .debug_str	00000000 
0000ff79 l       .debug_str	00000000 
0001fa79 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.4br1pvmw-cgu.7
0000c55e l       .debug_str	00000000 
0000c4a7 l       .debug_str	00000000 
000032e8 l       .debug_str	00000000 
0001d175 l       .debug_str	00000000 
00002415 l       .debug_str	00000000 
00000ad7 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
0000a602 l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0001719c l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
000100b7 l       .debug_str	00000000 
0000c2d0 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
000100fe l       .debug_str	00000000 
0000c331 l       .debug_str	00000000 
00004002 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
0000c784 l     F .text	00000052 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h40aff0c4f9ba2454E
00000000 l    df *ABS*	00000000 core.4aq1nyye-cgu.0
00000ad7 l       .debug_str	00000000 
00010149 l       .debug_str	00000000 
0001015c l       .debug_str	00000000 
0000b1a1 l       .debug_str	00000000 
0001719c l       .debug_str	00000000 
0001018d l       .debug_str	00000000 
00010195 l       .debug_str	00000000 
0001019e l       .debug_str	00000000 
000101e7 l       .debug_str	00000000 
000073c2 l       .debug_str	00000000 
00000bc3 l       .debug_str	00000000 
000101a5 l       .debug_str	00000000 
000101e4 l       .debug_str	00000000 
000101ed l       .debug_str	00000000 
0001022f l       .debug_str	00000000 
00010239 l       .debug_str	00000000 
0001027c l       .debug_str	00000000 
00010286 l       .debug_str	00000000 
000102c9 l       .debug_str	00000000 
000102d3 l       .debug_str	00000000 
00010316 l       .debug_str	00000000 
00010321 l       .debug_str	00000000 
00010366 l       .debug_str	00000000 
00010371 l       .debug_str	00000000 
000103b6 l       .debug_str	00000000 
000103bc l       .debug_str	00000000 
00000c27 l       .debug_str	00000000 
00007478 l       .debug_str	00000000 
00004002 l       .debug_str	00000000 
0001099c l       .debug_str	00000000 
0000a669 l       .debug_str	00000000 
000103c9 l       .debug_str	00000000 
000103d9 l       .debug_str	00000000 
00000bbc l       .debug_str	00000000 
00000bae l       .debug_str	00000000 
000012e0 l       .debug_str	00000000 
0001041f l       .debug_str	00000000 
00010434 l       .debug_str	00000000 
0000b1d8 l       .debug_str	00000000 
0000b144 l       .debug_str	00000000 
0000b14d l       .debug_str	00000000 
00000c0a l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
000237a3 l       .debug_str	00000000 
00007258 l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
0002aa0f l       .debug_str	00000000 
00000d56 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0000e2e0 l       .debug_str	00000000 
0000029b l       .debug_str	00000000 
0000b155 l       .debug_str	00000000 
00010e5f l       .debug_str	00000000 
00011033 l       .debug_str	00000000 
00012330 l       .debug_str	00000000 
0001043e l       .debug_str	00000000 
00018368 l       .debug_str	00000000 
0001d6e6 l       .debug_str	00000000 
00010d3b l       .debug_str	00000000 
0000b192 l       .debug_str	00000000 
00017b1f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000093 l       .debug_str	00000000 
0001acba l       .debug_str	00000000 
00010456 l       .debug_str	00000000 
0001045b l       .debug_str	00000000 
00010460 l       .debug_str	00000000 
00010b1e l       .debug_str	00000000 
000007d3 l       .debug_str	00000000 
0001046a l       .debug_str	00000000 
0000762f l       .debug_str	00000000 
00010475 l       .debug_str	00000000 
0002d180 l       .debug_str	00000000 
00010ad8 l       .debug_str	00000000 
0001047f l       .debug_str	00000000 
0000753e l       .debug_str	00000000 
00010b18 l       .debug_str	00000000 
00010af8 l       .debug_str	00000000 
00010b33 l       .debug_str	00000000 
00010e75 l       .debug_str	00000000 
00000ca6 l       .debug_str	00000000 
00010d84 l       .debug_str	00000000 
0000b1d4 l       .debug_str	00000000 
0001fa79 l       .debug_str	00000000 
0001048d l       .debug_str	00000000 
00010505 l       .debug_str	00000000 
00010cbf l       .debug_str	00000000 
00010d02 l       .debug_str	00000000 
00010517 l       .debug_str	00000000 
0001058b l       .debug_str	00000000 
00010dbb l       .debug_str	00000000 
00010dfe l       .debug_str	00000000 
0001059d l       .debug_str	00000000 
00013775 l       .debug_str	00000000 
00019622 l       .debug_str	00000000 
00019294 l       .debug_str	00000000 
00010ea7 l       .debug_str	00000000 
00010e2f l       .debug_str	00000000 
00010611 l       .debug_str	00000000 
0002a56c l       .debug_str	00000000 
00010669 l       .debug_str	00000000 
00010671 l       .debug_str	00000000 
0000ff1f l       .debug_str	00000000 
00000bef l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
00000c09 l       .debug_str	00000000 
00010679 l       .debug_str	00000000 
00010680 l       .debug_str	00000000 
000100b0 l       .debug_str	00000000 
0001068c l       .debug_str	00000000 
00010696 l       .debug_str	00000000 
000106a3 l       .debug_str	00000000 
000106b0 l       .debug_str	00000000 
00005166 l       .debug_str	00000000 
0001f782 l       .debug_str	00000000 
0001af67 l       .debug_str	00000000 
000106c5 l       .debug_str	00000000 
000106d9 l       .debug_str	00000000 
0002cb33 l       .debug_str	00000000 
0000c285 l       .debug_str	00000000 
000106ef l       .debug_str	00000000 
000106f4 l       .debug_str	00000000 
00010706 l       .debug_str	00000000 
0001072e l       .debug_str	00000000 
00010738 l       .debug_str	00000000 
00010748 l       .debug_str	00000000 
000107a1 l       .debug_str	00000000 
000107a9 l       .debug_str	00000000 
000107b6 l       .debug_str	00000000 
000107c3 l       .debug_str	00000000 
00010f0d l       .debug_str	00000000 
0001e2f7 l       .debug_str	00000000 
000107d0 l       .debug_str	00000000 
000107fd l       .debug_str	00000000 
0001082c l       .debug_str	00000000 
00010853 l       .debug_str	00000000 
00010872 l       .debug_str	00000000 
00010882 l       .debug_str	00000000 
00015cf2 l       .debug_str	00000000 
000108b4 l       .debug_str	00000000 
000108c3 l       .debug_str	00000000 
000108ce l       .debug_str	00000000 
000095c6 l       .debug_str	00000000 
0001ac11 l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00005266 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000d3e l       .debug_str	00000000 
00010903 l       .debug_str	00000000 
0001092e l       .debug_str	00000000 
0001090e l       .debug_str	00000000 
00010914 l       .debug_str	00000000 
0001b76e l       .debug_str	00000000 
00010939 l       .debug_str	00000000 
0001093e l       .debug_str	00000000 
0001c7ca l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
0001151d l       .debug_str	00000000 
0000b048 l       .debug_str	00000000 
0001154b l       .debug_str	00000000 
0001157f l       .debug_str	00000000 
00010944 l       .debug_str	00000000 
00010950 l       .debug_str	00000000 
00010987 l       .debug_str	00000000 
00011528 l       .debug_str	00000000 
00011575 l       .debug_str	00000000 
00010968 l       .debug_str	00000000 
00010955 l       .debug_str	00000000 
0001096e l       .debug_str	00000000 
00010996 l       .debug_str	00000000 
0001099b l       .debug_str	00000000 
000109a0 l       .debug_str	00000000 
000109a6 l       .debug_str	00000000 
000109ae l       .debug_str	00000000 
000109b3 l       .debug_str	00000000 
00012cfc l       .debug_str	00000000 
0002035a l       .debug_str	00000000 
000109b9 l       .debug_str	00000000 
000109e1 l       .debug_str	00000000 
000109c3 l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
0000730c l       .debug_str	00000000 
000109e9 l       .debug_str	00000000 
0000b3f0 l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
0000d6e3 l       .debug_str	00000000 
000109ee l       .debug_str	00000000 
000269ab l       .debug_str	00000000 
00015fa7 l       .debug_str	00000000 
000109f6 l       .debug_str	00000000 
00010a1d l       .debug_str	00000000 
00010a01 l       .debug_str	00000000 
00010742 l       .debug_str	00000000 
00010a25 l       .debug_str	00000000 
00010a42 l       .debug_str	00000000 
00010a2d l       .debug_str	00000000 
00010a51 l       .debug_str	00000000 
00010a55 l       .debug_str	00000000 
00010a62 l       .debug_str	00000000 
00010a6b l       .debug_str	00000000 
00016b6d l       .debug_str	00000000 
00010a81 l       .debug_str	00000000 
00010a75 l       .debug_str	00000000 
0000a48f l       .debug_str	00000000 
00010a8e l       .debug_str	00000000 
00010a9a l       .debug_str	00000000 
00010abd l       .debug_str	00000000 
00010aa7 l       .debug_str	00000000 
00010acb l       .debug_str	00000000 
00010aeb l       .debug_str	00000000 
00010b0b l       .debug_str	00000000 
00010b26 l       .debug_str	00000000 
00010b41 l       .debug_str	00000000 
00010b47 l       .debug_str	00000000 
00010b4b l       .debug_str	00000000 
00010b5c l       .debug_str	00000000 
00010b4f l       .debug_str	00000000 
00025dc7 l       .debug_str	00000000 
00010b6d l       .debug_str	00000000 
00010b6c l       .debug_str	00000000 
00000be8 l       .debug_str	00000000 
00000c02 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0002a56f l       .debug_str	00000000 
0000945f l       .debug_str	00000000 
00000c16 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c24 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0002613b l       .debug_str	00000000 
000250d7 l       .debug_str	00000000 
0002e32c l       .debug_str	00000000 
00000b2c l       .debug_str	00000000 
00000b31 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3e l       .debug_str	00000000 
00000b46 l       .debug_str	00000000 
000219ff l       .debug_str	00000000 
00000c34 l       .debug_str	00000000 
00000c3e l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000c4b l       .debug_str	00000000 
00000c53 l       .debug_str	00000000 
000120c2 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000c64 l       .debug_str	00000000 
00000c87 l       .debug_str	00000000 
00000cab l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
0001b1fb l       .debug_str	00000000 
00000cd2 l       .debug_str	00000000 
00000cd8 l       .debug_str	00000000 
00029fbb l       .debug_str	00000000 
00000ce7 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d21 l       .debug_str	00000000 
00000d15 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b53 l       .debug_str	00000000 
00000b57 l       .debug_str	00000000 
00000d30 l       .debug_str	00000000 
00000d49 l       .debug_str	00000000 
00000d5e l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d99 l       .debug_str	00000000 
00000dc5 l       .debug_str	00000000 
00000db5 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
00000e4a l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
00010e82 l       .debug_str	00000000 
00010b81 l       .debug_str	00000000 
00010b72 l       .debug_str	00000000 
0001b10c l       .debug_str	00000000 
00016b4d l       .debug_str	00000000 
00000e63 l       .debug_str	00000000 
00000e8d l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00009406 l       .debug_str	00000000 
0000d22d l       .debug_str	00000000 
00010bbf l       .debug_str	00000000 
00010b9f l       .debug_str	00000000 
00010c18 l       .debug_str	00000000 
00010bf8 l       .debug_str	00000000 
00016b5f l       .debug_str	00000000 
00010c6f l       .debug_str	00000000 
00010c74 l       .debug_str	00000000 
00010c7a l       .debug_str	00000000 
00010c9d l       .debug_str	00000000 
00010c7f l       .debug_str	00000000 
00010ca8 l       .debug_str	00000000 
00010cf3 l       .debug_str	00000000 
00010d24 l       .debug_str	00000000 
00010d75 l       .debug_str	00000000 
00010da4 l       .debug_str	00000000 
00010def l       .debug_str	00000000 
00010e20 l       .debug_str	00000000 
00010e51 l       .debug_str	00000000 
00010e68 l       .debug_str	00000000 
00010e81 l       .debug_str	00000000 
00010e98 l       .debug_str	00000000 
00010ed8 l       .debug_str	00000000 
00010ec6 l       .debug_str	00000000 
00010ec5 l       .debug_str	00000000 
00010ee3 l       .debug_str	00000000 
00010eec l       .debug_str	00000000 
00010ef9 l       .debug_str	00000000 
00010ef8 l       .debug_str	00000000 
00010f01 l       .debug_str	00000000 
00010f2e l       .debug_str	00000000 
00010f19 l       .debug_str	00000000 
00010f4b l       .debug_str	00000000 
00010f57 l       .debug_str	00000000 
00011001 l       .debug_str	00000000 
00010f63 l       .debug_str	00000000 
00010f6a l       .debug_str	00000000 
00010f73 l       .debug_str	00000000 
00010f81 l       .debug_str	00000000 
00010f88 l       .debug_str	00000000 
00010f90 l       .debug_str	00000000 
00010f97 l       .debug_str	00000000 
00010fdd l       .debug_str	00000000 
00010fb8 l       .debug_str	00000000 
00010fa3 l       .debug_str	00000000 
00010fc8 l       .debug_str	00000000 
00010fec l       .debug_str	00000000 
0001101c l       .debug_str	00000000 
0001100d l       .debug_str	00000000 
00011027 l       .debug_str	00000000 
0001abd0 l       .debug_str	00000000 
00011050 l       .debug_str	00000000 
00011039 l       .debug_str	00000000 
0001106e l       .debug_str	00000000 
00011091 l       .debug_str	00000000 
0001107a l       .debug_str	00000000 
000110db l       .debug_str	00000000 
000110cf l       .debug_str	00000000 
0001073d l       .debug_str	00000000 
000110f8 l       .debug_str	00000000 
000110e1 l       .debug_str	00000000 
00011141 l       .debug_str	00000000 
00011169 l       .debug_str	00000000 
00011152 l       .debug_str	00000000 
0001d175 l       .debug_str	00000000 
00002415 l       .debug_str	00000000 
0002cf2f l       .debug_str	00000000 
00011218 l       .debug_str	00000000 
000111fa l       .debug_str	00000000 
0001130e l       .debug_str	00000000 
000112ee l       .debug_str	00000000 
00011381 l       .debug_str	00000000 
00011361 l       .debug_str	00000000 
0002e762 l       .debug_str	00000000 
000113d4 l       .debug_str	00000000 
000113d8 l       .debug_str	00000000 
00019762 l       .debug_str	00000000 
00028535 l       .debug_str	00000000 
000113db l       .debug_str	00000000 
000113de l       .debug_str	00000000 
000114a4 l       .debug_str	00000000 
000113e2 l       .debug_str	00000000 
000113e1 l       .debug_str	00000000 
000113e7 l       .debug_str	00000000 
000114f2 l       .debug_str	00000000 
00000237 l       .debug_str	00000000 
00011405 l       .debug_str	00000000 
000113f3 l       .debug_str	00000000 
0001142a l       .debug_str	00000000 
000114b9 l       .debug_str	00000000 
00011448 l       .debug_str	00000000 
00011436 l       .debug_str	00000000 
0001146d l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00011474 l       .debug_str	00000000 
00011492 l       .debug_str	00000000 
000114aa l       .debug_str	00000000 
000114e3 l       .debug_str	00000000 
0001151c l       .debug_str	00000000 
00011527 l       .debug_str	00000000 
0001154a l       .debug_str	00000000 
0001157e l       .debug_str	00000000 
000115a0 l       .debug_str	00000000 
00011594 l       .debug_str	00000000 
000115b8 l       .debug_str	00000000 
000115ac l       .debug_str	00000000 
000115c6 l       .debug_str	00000000 
000115c5 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
0000d6ef l       .debug_str	00000000 
000115ca l       .debug_str	00000000 
000115c9 l       .debug_str	00000000 
000050f7 l       .debug_str	00000000 
000115ce l       .debug_str	00000000 
000115d3 l       .debug_str	00000000 
000115db l       .debug_str	00000000 
000115e9 l       .debug_str	00000000 
000115f3 l       .debug_str	00000000 
00011602 l       .debug_str	00000000 
0000c697 l       .debug_str	00000000 
00009d1f l       .debug_str	00000000 
00011632 l       .debug_str	00000000 
00011640 l       .debug_str	00000000 
0001164f l       .debug_str	00000000 
00011658 l       .debug_str	00000000 
00011664 l       .debug_str	00000000 
0000c331 l       .debug_str	00000000 
0000c2d0 l       .debug_str	00000000 
0000c500 l       .debug_str	00000000 
0000c3e7 l       .debug_str	00000000 
00011678 l       .debug_str	00000000 
00011681 l       .debug_str	00000000 
0001168c l       .debug_str	00000000 
0000c2d8 l       .debug_str	00000000 
000116a4 l       .debug_str	00000000 
000116af l       .debug_str	00000000 
000116e6 l       .debug_str	00000000 
000116ef l       .debug_str	00000000 
00011702 l       .debug_str	00000000 
00021028 l       .debug_str	00000000 
0001170b l       .debug_str	00000000 
00011716 l       .debug_str	00000000 
00011742 l       .debug_str	00000000 
000117e7 l       .debug_str	00000000 
000117f6 l       .debug_str	00000000 
0001181c l       .debug_str	00000000 
00011857 l       .debug_str	00000000 
00011868 l       .debug_str	00000000 
0001187e l       .debug_str	00000000 
0001188a l       .debug_str	00000000 
000118b6 l       .debug_str	00000000 
000118c2 l       .debug_str	00000000 
000118fe l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0001190e l       .debug_str	00000000 
00011919 l       .debug_str	00000000 
00011927 l       .debug_str	00000000 
00011947 l       .debug_str	00000000 
00016070 l       .debug_str	00000000 
00011954 l       .debug_str	00000000 
0000f819 l       .debug_str	00000000 
00011645 l       .debug_str	00000000 
0001195c l       .debug_str	00000000 
00011993 l       .debug_str	00000000 
000119de l       .debug_str	00000000 
00011a02 l       .debug_str	00000000 
00011a0f l       .debug_str	00000000 
00011a1b l       .debug_str	00000000 
00011a47 l       .debug_str	00000000 
0000c5f4 l       .debug_str	00000000 
00011a91 l       .debug_str	00000000 
00011abe l       .debug_str	00000000 
0000af40 l       .debug_str	00000000 
0000aeda l       .debug_str	00000000 
0000c849 l       .debug_str	00000000 
00011ac7 l       .debug_str	00000000 
00011ada l       .debug_str	00000000 
00011ae4 l       .debug_str	00000000 
00011af1 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
00011afe l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00009b51 l       .debug_str	00000000 
00011b24 l       .debug_str	00000000 
0000f77a l       .debug_str	00000000 
00011b33 l       .debug_str	00000000 
00011b5e l       .debug_str	00000000 
00011b9d l       .debug_str	00000000 
00011bb3 l       .debug_str	00000000 
00011bcb l       .debug_str	00000000 
0002ab4b l       .debug_str	00000000 
0000dcb7 l       .debug_str	00000000 
0001e44f l       .debug_str	00000000 
0000b992 l       .debug_str	00000000 
000099b9 l       .debug_str	00000000 
00011be4 l       .debug_str	00000000 
00011bf2 l       .debug_str	00000000 
00011c11 l       .debug_str	00000000 
00011c1e l       .debug_str	00000000 
00011c2e l       .debug_str	00000000 
00011c4d l       .debug_str	00000000 
00011c6e l       .debug_str	00000000 
00011c97 l       .debug_str	00000000 
00009bed l       .debug_str	00000000 
0000b927 l       .debug_str	00000000 
00011cc8 l       .debug_str	00000000 
00011ce8 l       .debug_str	00000000 
00011d29 l       .debug_str	00000000 
00011d34 l       .debug_str	00000000 
00011d41 l       .debug_str	00000000 
00011d3c l       .debug_str	00000000 
00011d4a l       .debug_str	00000000 
00011d6d l       .debug_str	00000000 
00011d77 l       .debug_str	00000000 
0000f99e l       .debug_str	00000000 
00011da9 l       .debug_str	00000000 
0000faae l       .debug_str	00000000 
00011dce l       .debug_str	00000000 
00011ddd l       .debug_str	00000000 
00011de7 l       .debug_str	00000000 
00011df6 l       .debug_str	00000000 
00011dff l       .debug_str	00000000 
00011e15 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
000107a6 l       .debug_str	00000000 
0000c17e l       .debug_str	00000000 
00009c61 l       .debug_str	00000000 
00009a13 l       .debug_str	00000000 
00011e20 l       .debug_str	00000000 
00011e2a l       .debug_str	00000000 
00011e44 l       .debug_str	00000000 
00011e52 l       .debug_str	00000000 
0002b971 l       .debug_str	00000000 
00028895 l       .debug_str	00000000 
00011e63 l       .debug_str	00000000 
00011e8d l       .debug_str	00000000 
0000945b l       .debug_str	00000000 
00011e9b l       .debug_str	00000000 
0000c497 l       .debug_str	00000000 
0000c394 l       .debug_str	00000000 
00011ea4 l       .debug_str	00000000 
00011eae l       .debug_str	00000000 
00011eb5 l       .debug_str	00000000 
0000b022 l       .debug_str	00000000 
0000ad95 l       .debug_str	00000000 
0000b4f5 l       .debug_str	00000000 
0000fa4d l       .debug_str	00000000 
0000f8bf l       .debug_str	00000000 
00011ecb l       .debug_str	00000000 
0002e27f l       .debug_str	00000000 
00011edb l       .debug_str	00000000 
00011ee5 l       .debug_str	00000000 
00011ef6 l       .debug_str	00000000 
00011f03 l       .debug_str	00000000 
000098ac l       .debug_str	00000000 
00011f0e l       .debug_str	00000000 
00011f19 l       .debug_str	00000000 
00011f39 l       .debug_str	00000000 
00000ab3 l       .debug_str	00000000 
00011f58 l       .debug_str	00000000 
00011f62 l       .debug_str	00000000 
00011f6b l       .debug_str	00000000 
000170f5 l       .debug_str	00000000 
00011f7e l       .debug_str	00000000 
00011fa7 l       .debug_str	00000000 
00011fb1 l       .debug_str	00000000 
00011fc2 l       .debug_str	00000000 
00011fce l       .debug_str	00000000 
00011fe1 l       .debug_str	00000000 
00011b9e l       .debug_str	00000000 
0001201f l       .debug_str	00000000 
0001203b l       .debug_str	00000000 
000120a9 l       .debug_str	00000000 
00012dfb l       .debug_str	00000000 
0001204a l       .debug_str	00000000 
00012073 l       .debug_str	00000000 
0000c276 l       .debug_str	00000000 
0001207d l       .debug_str	00000000 
00012092 l       .debug_str	00000000 
000120a1 l       .debug_str	00000000 
000120b8 l       .debug_str	00000000 
000120c8 l       .debug_str	00000000 
000120d1 l       .debug_str	00000000 
000120e0 l       .debug_str	00000000 
00012107 l       .debug_str	00000000 
00012113 l       .debug_str	00000000 
00012126 l       .debug_str	00000000 
00012137 l       .debug_str	00000000 
00012144 l       .debug_str	00000000 
00012154 l       .debug_str	00000000 
00012169 l       .debug_str	00000000 
00012176 l       .debug_str	00000000 
0001219c l       .debug_str	00000000 
000121a5 l       .debug_str	00000000 
000121c2 l       .debug_str	00000000 
000121e7 l       .debug_str	00000000 
0001220d l       .debug_str	00000000 
00012237 l       .debug_str	00000000 
0001225f l       .debug_str	00000000 
00012279 l       .debug_str	00000000 
0002e83d l       .debug_str	00000000 
00012286 l       .debug_str	00000000 
0001229d l       .debug_str	00000000 
000122b3 l       .debug_str	00000000 
000122c1 l       .debug_str	00000000 
000122ff l       .debug_str	00000000 
00012314 l       .debug_str	00000000 
00012460 l       .debug_str	00000000 
0002de79 l       .debug_str	00000000 
00016031 l       .debug_str	00000000 
00012322 l       .debug_str	00000000 
00012332 l       .debug_str	00000000 
00012361 l       .debug_str	00000000 
0001236b l       .debug_str	00000000 
0001237e l       .debug_str	00000000 
000123c1 l       .debug_str	00000000 
000123db l       .debug_str	00000000 
000123ed l       .debug_str	00000000 
0000b845 l       .debug_str	00000000 
0001240d l       .debug_str	00000000 
0001243b l       .debug_str	00000000 
00012457 l       .debug_str	00000000 
00012471 l       .debug_str	00000000 
00012486 l       .debug_str	00000000 
00012499 l       .debug_str	00000000 
000124ac l       .debug_str	00000000 
000124c1 l       .debug_str	00000000 
000124d4 l       .debug_str	00000000 
000124e7 l       .debug_str	00000000 
00012511 l       .debug_str	00000000 
0001251d l       .debug_str	00000000 
0001257f l       .debug_str	00000000 
00012588 l       .debug_str	00000000 
00012597 l       .debug_str	00000000 
000125ac l       .debug_str	00000000 
000125b9 l       .debug_str	00000000 
00012645 l       .debug_str	00000000 
00012657 l       .debug_str	00000000 
00012663 l       .debug_str	00000000 
000126c5 l       .debug_str	00000000 
0001271f l       .debug_str	00000000 
0001272f l       .debug_str	00000000 
000127b1 l       .debug_str	00000000 
0001280b l       .debug_str	00000000 
0001286b l       .debug_str	00000000 
000128cb l       .debug_str	00000000 
00012929 l       .debug_str	00000000 
00012987 l       .debug_str	00000000 
00012995 l       .debug_str	00000000 
000129a0 l       .debug_str	00000000 
000129ab l       .debug_str	00000000 
000129d2 l       .debug_str	00000000 
000129fa l       .debug_str	00000000 
00012a17 l       .debug_str	00000000 
00012a29 l       .debug_str	00000000 
00012a2e l       .debug_str	00000000 
00012a3a l       .debug_str	00000000 
00012a65 l       .debug_str	00000000 
00012a6c l       .debug_str	00000000 
00012a77 l       .debug_str	00000000 
00012a95 l       .debug_str	00000000 
00012ab0 l       .debug_str	00000000 
00012acc l       .debug_str	00000000 
00012b18 l       .debug_str	00000000 
00012b64 l       .debug_str	00000000 
0002cbd4 l       .debug_str	00000000 
00012bb1 l       .debug_str	00000000 
00012bba l       .debug_str	00000000 
00012bd6 l       .debug_str	00000000 
00012bfc l       .debug_str	00000000 
00012c05 l       .debug_str	00000000 
00012c4b l       .debug_str	00000000 
00012c91 l       .debug_str	00000000 
00012cd8 l       .debug_str	00000000 
00012cf7 l       .debug_str	00000000 
0001a6d6 l       .debug_str	00000000 
00012d01 l       .debug_str	00000000 
00012d0b l       .debug_str	00000000 
0002e475 l       .debug_str	00000000 
00012d13 l       .debug_str	00000000 
00012d22 l       .debug_str	00000000 
00012d3f l       .debug_str	00000000 
00012d5b l       .debug_str	00000000 
00012d81 l       .debug_str	00000000 
00012d91 l       .debug_str	00000000 
00012d9d l       .debug_str	00000000 
00012dbf l       .debug_str	00000000 
00012dd0 l       .debug_str	00000000 
00012dcb l       .debug_str	00000000 
00012def l       .debug_str	00000000 
0002e39d l       .debug_str	00000000 
00012dff l       .debug_str	00000000 
00012e0e l       .debug_str	00000000 
00012e1c l       .debug_str	00000000 
00012e2a l       .debug_str	00000000 
00012e47 l       .debug_str	00000000 
00012e4d l       .debug_str	00000000 
00011f08 l       .debug_str	00000000 
00028a5e l       .debug_str	00000000 
00012e75 l       .debug_str	00000000 
00012e7f l       .debug_str	00000000 
00012ea1 l       .debug_str	00000000 
00012ee6 l       .debug_str	00000000 
00012f10 l       .debug_str	00000000 
00012f33 l       .debug_str	00000000 
00012f53 l       .debug_str	00000000 
00012f5b l       .debug_str	00000000 
00012f81 l       .debug_str	00000000 
00012f9e l       .debug_str	00000000 
00012fb8 l       .debug_str	00000000 
0000fc2a l       .debug_str	00000000 
00012fc4 l       .debug_str	00000000 
00012fd3 l       .debug_str	00000000 
00012fe4 l       .debug_str	00000000 
00012ffd l       .debug_str	00000000 
0001301c l       .debug_str	00000000 
0001302c l       .debug_str	00000000 
00013040 l       .debug_str	00000000 
0001304b l       .debug_str	00000000 
00013056 l       .debug_str	00000000 
00013082 l       .debug_str	00000000 
00013095 l       .debug_str	00000000 
000130a8 l       .debug_str	00000000 
000130bc l       .debug_str	00000000 
000130f2 l       .debug_str	00000000 
00013106 l       .debug_str	00000000 
0001313c l       .debug_str	00000000 
00013150 l       .debug_str	00000000 
00013186 l       .debug_str	00000000 
0001319b l       .debug_str	00000000 
000131d2 l       .debug_str	00000000 
000131e5 l       .debug_str	00000000 
0001321a l       .debug_str	00000000 
0001322e l       .debug_str	00000000 
00013264 l       .debug_str	00000000 
00013278 l       .debug_str	00000000 
000132ae l       .debug_str	00000000 
000132e9 l       .debug_str	00000000 
000132fd l       .debug_str	00000000 
00013333 l       .debug_str	00000000 
0001336e l       .debug_str	00000000 
00013383 l       .debug_str	00000000 
000133ba l       .debug_str	00000000 
000133f6 l       .debug_str	00000000 
00013402 l       .debug_str	00000000 
0001345c l       .debug_str	00000000 
000134c8 l       .debug_str	00000000 
00013539 l       .debug_str	00000000 
000135a9 l       .debug_str	00000000 
0001360c l       .debug_str	00000000 
0001361d l       .debug_str	00000000 
00013691 l       .debug_str	00000000 
000136fa l       .debug_str	00000000 
00013771 l       .debug_str	00000000 
00009aba l       .debug_str	00000000 
0001377b l       .debug_str	00000000 
00013798 l       .debug_str	00000000 
000137bc l       .debug_str	00000000 
000137dc l       .debug_str	00000000 
000137e9 l       .debug_str	00000000 
000137f4 l       .debug_str	00000000 
00013800 l       .debug_str	00000000 
00013836 l       .debug_str	00000000 
00013880 l       .debug_str	00000000 
000138a3 l       .debug_str	00000000 
000138ce l       .debug_str	00000000 
00013917 l       .debug_str	00000000 
00013970 l       .debug_str	00000000 
000139db l       .debug_str	00000000 
00013a4b l       .debug_str	00000000 
00013aba l       .debug_str	00000000 
00013b1c l       .debug_str	00000000 
00013b8f l       .debug_str	00000000 
00013bf7 l       .debug_str	00000000 
00013c6d l       .debug_str	00000000 
00009957 l       .debug_str	00000000 
0000b896 l       .debug_str	00000000 
00013ca2 l       .debug_str	00000000 
00013cbe l       .debug_str	00000000 
00013ce1 l       .debug_str	00000000 
00013cff l       .debug_str	00000000 
00013d45 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
00013da3 l       .debug_str	00000000 
00013e46 l       .debug_str	00000000 
00013e66 l       .debug_str	00000000 
00013e76 l       .debug_str	00000000 
00011950 l       .debug_str	00000000 
00013e86 l       .debug_str	00000000 
00013eab l       .debug_str	00000000 
00013ed0 l       .debug_str	00000000 
00013ee1 l       .debug_str	00000000 
00013f07 l       .debug_str	00000000 
00013f2d l       .debug_str	00000000 
00013f3e l       .debug_str	00000000 
00013f4f l       .debug_str	00000000 
00013f75 l       .debug_str	00000000 
00013f9b l       .debug_str	00000000 
00013fac l       .debug_str	00000000 
00013fbf l       .debug_str	00000000 
00013fe7 l       .debug_str	00000000 
00013ffa l       .debug_str	00000000 
00014019 l       .debug_str	00000000 
00014068 l       .debug_str	00000000 
0001413d l       .debug_str	00000000 
00014147 l       .debug_str	00000000 
00014182 l       .debug_str	00000000 
000141f1 l       .debug_str	00000000 
00014244 l       .debug_str	00000000 
000142d1 l       .debug_str	00000000 
000143df l       .debug_str	00000000 
0001441f l       .debug_str	00000000 
00014477 l       .debug_str	00000000 
000144d9 l       .debug_str	00000000 
00014530 l       .debug_str	00000000 
0001454d l       .debug_str	00000000 
0001456f l       .debug_str	00000000 
000145df l       .debug_str	00000000 
0001466f l       .debug_str	00000000 
0001471c l       .debug_str	00000000 
000147ad l       .debug_str	00000000 
000147fe l       .debug_str	00000000 
0001d4b9 l       .debug_str	00000000 
0001488a l       .debug_str	00000000 
00014893 l       .debug_str	00000000 
00014922 l       .debug_str	00000000 
00014931 l       .debug_str	00000000 
000149e1 l       .debug_str	00000000 
00014a16 l       .debug_str	00000000 
00014a81 l       .debug_str	00000000 
00014ad0 l       .debug_str	00000000 
00014af1 l       .debug_str	00000000 
00014b95 l       .debug_str	00000000 
00014c1d l       .debug_str	00000000 
00014c77 l       .debug_str	00000000 
00014cd6 l       .debug_str	00000000 
00014d2f l       .debug_str	00000000 
00014db7 l       .debug_str	00000000 
00014dc6 l       .debug_str	00000000 
00014e51 l       .debug_str	00000000 
00014ef8 l       .debug_str	00000000 
00014f2d l       .debug_str	00000000 
00014f98 l       .debug_str	00000000 
00014fe7 l       .debug_str	00000000 
00015008 l       .debug_str	00000000 
000150ac l       .debug_str	00000000 
00015134 l       .debug_str	00000000 
0001518e l       .debug_str	00000000 
000151ed l       .debug_str	00000000 
00015246 l       .debug_str	00000000 
000152ce l       .debug_str	00000000 
00015359 l       .debug_str	00000000 
00015400 l       .debug_str	00000000 
0001541d l       .debug_str	00000000 
0001543e l       .debug_str	00000000 
0001545b l       .debug_str	00000000 
0001547c l       .debug_str	00000000 
0001549f l       .debug_str	00000000 
000154c1 l       .debug_str	00000000 
000154e5 l       .debug_str	00000000 
00015508 l       .debug_str	00000000 
0001552c l       .debug_str	00000000 
0001554f l       .debug_str	00000000 
00015574 l       .debug_str	00000000 
00015598 l       .debug_str	00000000 
000155be l       .debug_str	00000000 
000155f5 l       .debug_str	00000000 
00015618 l       .debug_str	00000000 
0001563e l       .debug_str	00000000 
00015664 l       .debug_str	00000000 
00015689 l       .debug_str	00000000 
000156ad l       .debug_str	00000000 
000156d4 l       .debug_str	00000000 
000156fb l       .debug_str	00000000 
00015702 l       .debug_str	00000000 
0001570a l       .debug_str	00000000 
00015747 l       .debug_str	00000000 
00015769 l       .debug_str	00000000 
000157b6 l       .debug_str	00000000 
00015889 l       .debug_str	00000000 
000158bc l       .debug_str	00000000 
000158d7 l       .debug_str	00000000 
000158f4 l       .debug_str	00000000 
0001590e l       .debug_str	00000000 
00015917 l       .debug_str	00000000 
00015936 l       .debug_str	00000000 
0000d3c1 l       .debug_str	00000000 
00015941 l       .debug_str	00000000 
00020644 l       .debug_str	00000000 
0001594b l       .debug_str	00000000 
0001596e l       .debug_str	00000000 
000159b3 l       .debug_str	00000000 
000159ce l       .debug_str	00000000 
000159e0 l       .debug_str	00000000 
00015a70 l       .debug_str	00000000 
00015a92 l       .debug_str	00000000 
00015ab1 l       .debug_str	00000000 
00015b02 l       .debug_str	00000000 
0000d464 l       .debug_str	00000000 
00015b4f l       .debug_str	00000000 
00015b59 l       .debug_str	00000000 
00015b65 l       .debug_str	00000000 
00015b70 l       .debug_str	00000000 
00015b97 l       .debug_str	00000000 
00015ba4 l       .debug_str	00000000 
00015bb9 l       .debug_str	00000000 
00015bc8 l       .debug_str	00000000 
00015bd5 l       .debug_str	00000000 
00015be2 l       .debug_str	00000000 
00015c2f l       .debug_str	00000000 
00015c39 l       .debug_str	00000000 
00015c4d l       .debug_str	00000000 
0002a141 l       .debug_str	00000000 
00015c5e l       .debug_str	00000000 
00015c70 l       .debug_str	00000000 
00015c7b l       .debug_str	00000000 
00015c89 l       .debug_str	00000000 
00015c90 l       .debug_str	00000000 
00015c9a l       .debug_str	00000000 
00015ca8 l       .debug_str	00000000 
00015cb2 l       .debug_str	00000000 
00015cbf l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
00015cd5 l       .debug_str	00000000 
00015cd9 l       .debug_str	00000000 
00015cec l       .debug_str	00000000 
00015cf6 l       .debug_str	00000000 
00015d4b l       .debug_str	00000000 
0000feea l       .debug_str	00000000 
00015d59 l       .debug_str	00000000 
00015d61 l       .debug_str	00000000 
00015d76 l       .debug_str	00000000 
00015d8d l       .debug_str	00000000 
00015db2 l       .debug_str	00000000 
00015dc1 l       .debug_str	00000000 
00015dde l       .debug_str	00000000 
00015de8 l       .debug_str	00000000 
00015df6 l       .debug_str	00000000 
00015e07 l       .debug_str	00000000 
00015e14 l       .debug_str	00000000 
00015e19 l       .debug_str	00000000 
00015e24 l       .debug_str	00000000 
00015e2d l       .debug_str	00000000 
00015e50 l       .debug_str	00000000 
00015e73 l       .debug_str	00000000 
00015e99 l       .debug_str	00000000 
00015ebf l       .debug_str	00000000 
00015ee6 l       .debug_str	00000000 
00015f0d l       .debug_str	00000000 
00015f37 l       .debug_str	00000000 
0001e721 l       .debug_str	00000000 
00015f61 l       .debug_str	00000000 
00015f8d l       .debug_str	00000000 
00015f98 l       .debug_str	00000000 
00015fa3 l       .debug_str	00000000 
0002e85e l       .debug_str	00000000 
00015fb0 l       .debug_str	00000000 
00015fc4 l       .debug_str	00000000 
00015fda l       .debug_str	00000000 
00015fe4 l       .debug_str	00000000 
00015fee l       .debug_str	00000000 
00015ff9 l       .debug_str	00000000 
00016004 l       .debug_str	00000000 
0001600f l       .debug_str	00000000 
0001601a l       .debug_str	00000000 
00015ce6 l       .debug_str	00000000 
00016026 l       .debug_str	00000000 
00016029 l       .debug_str	00000000 
0001603d l       .debug_str	00000000 
00016046 l       .debug_str	00000000 
0002e0bc l       .debug_str	00000000 
0001604f l       .debug_str	00000000 
0001605a l       .debug_str	00000000 
00016063 l       .debug_str	00000000 
0001606c l       .debug_str	00000000 
0001194c l       .debug_str	00000000 
00016077 l       .debug_str	00000000 
00016092 l       .debug_str	00000000 
000160fb l       .debug_str	00000000 
00016168 l       .debug_str	00000000 
000161d1 l       .debug_str	00000000 
000161d9 l       .debug_str	00000000 
000161e1 l       .debug_str	00000000 
000161ea l       .debug_str	00000000 
00016243 l       .debug_str	00000000 
00016280 l       .debug_str	00000000 
000162dd l       .debug_str	00000000 
000163d5 l       .debug_str	00000000 
00016424 l       .debug_str	00000000 
0001645d l       .debug_str	00000000 
00016492 l       .debug_str	00000000 
0001649b l       .debug_str	00000000 
0000d411 l       .debug_str	00000000 
000164c8 l       .debug_str	00000000 
000164d0 l       .debug_str	00000000 
000164ed l       .debug_str	00000000 
00016515 l       .debug_str	00000000 
00016532 l       .debug_str	00000000 
0001653c l       .debug_str	00000000 
00016571 l       .debug_str	00000000 
0001657e l       .debug_str	00000000 
000165b1 l       .debug_str	00000000 
0000d2d7 l       .debug_str	00000000 
00016615 l       .debug_str	00000000 
0001661e l       .debug_str	00000000 
0001664f l       .debug_str	00000000 
00016669 l       .debug_str	00000000 
00016687 l       .debug_str	00000000 
00016733 l       .debug_str	00000000 
0001676e l       .debug_str	00000000 
00016777 l       .debug_str	00000000 
0000d370 l       .debug_str	00000000 
000167ac l       .debug_str	00000000 
00016827 l       .debug_str	00000000 
0001689e l       .debug_str	00000000 
000168b4 l       .debug_str	00000000 
000168ef l       .debug_str	00000000 
000168f9 l       .debug_str	00000000 
00016908 l       .debug_str	00000000 
00016939 l       .debug_str	00000000 
00016942 l       .debug_str	00000000 
00016964 l       .debug_str	00000000 
0001698b l       .debug_str	00000000 
00016995 l       .debug_str	00000000 
000169b7 l       .debug_str	00000000 
000169ed l       .debug_str	00000000 
000169f6 l       .debug_str	00000000 
00016a1e l       .debug_str	00000000 
00016a29 l       .debug_str	00000000 
0000c82a l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h589f04726b9846deE
0000e516 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h133134731e47c3ddE
0000d238 l     F .text	0000000a _ZN4core3fmt10ArgumentV110show_usize17h3c2fac3bad94a947E
0000e2a6 l     F .text	00000106 _ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE
0000e3d8 l     F .text	00000118 _ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE
0000ddfe l     F .text	00000170 _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E
0000d14c l     F .text	00000096 _ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E
0000d1e2 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hd5d67e64151488d3E
0000d6b0 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE
0000c7d6 l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h034ec8dd70295f85E
0000c7d8 l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h0ef71ded6c57bedcE
0000c7da l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h921869e295dffcdcE
0000dc1a l     F .text	000000fc _ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E
0000dd16 l     F .text	000000e8 _ZN4core7unicode9printable5check17ha9e204e73497ee46E
0000d20c l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h44c662229c53045aE
0000d212 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h44a86feaf2f21d35E
0000d206 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hc9f594331d92d7bbE
0000c7dc l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bd32f961ec2bdfaE
0002acc0 l     O .text	00000016 str.h
0002ad00 l     O .text	00000020 str.j
00000000 l    df *ABS*	00000000 semihosting_console.c
0000e524 l     F .text	00000024 __semihost
0000e548 l     F .text	00000010 debugger_connected
0000e558 l     F .text	0000002e semihost_write
0000e62c l     F .text	0000001c semihosting_console_write_ch
200002b0 l     O .bss	00000004 semihost_mbuf
20000168 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
200002b4 l     O .bss	00000010 avail_queue
200002c4 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
200002d0 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sensor_coap.c
0000e7fc l     F .text	00000050 split_float
0000e84c l     F .text	00000010 handle_coap_response
0000e8a8 l     F .text	00000078 json_encode_value_ext
0000e9d4 l     F .text	000000e4 prepare_coap_request
0000eb88 l     F .text	000000a8 dispatch_coap_request
200002d4 l     O .bss	00000004 coap_json_mbuf
200002d8 l     O .bss	00000004 oc_c_message
200002dc l     O .bss	0000006c oc_c_request
20000348 l     O .bss	00000004 oc_c_rsp
20000350 l     O .bss	00000008 oc_sem
20000358 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000035c l     O .bss	00000004 current_uri
20000360 l     O .bss	00000021 device_id_text
20000384 l     O .bss	0000000c hw_id
20000390 l     O .bss	00000004 hw_id_len
20000394 l     O .bss	00000020 sensor_network_endpoints
200003b4 l     O .bss	00000028 sensor_network_interfaces
200003e0 l     O .bss	00000008 sensor_node_address
200003e8 l     O .bss	00000037 sensor_node_names_buf
20000169 l     O .data	00000001 current_iface_type
2000016c l     O .data	00000014 sensor_node_names
0002bedc l     O .text	00000036 COAP_URI
0002bf14 l     O .text	0000000c COLLECTOR_NODE_HW_ID
0002bf20 l     O .text	0000003c SENSOR_NODE_HW_IDS
0002bf8c l     O .text	00000008 sensor_network_encoding
0002c000 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 oc_buffer.c
0000f050 l     F .text	00000030 oc_buffer_tx
0000f080 l     F .text	0000002c oc_buffer_rx
20000420 l     O .bss	00000018 oc_inq
20000438 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_rep.c
20000450 l     O .bss	0000001c oc_rep_objects
2000046c l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 oc_ri.c
0000f164 l     F .text	00000040 free_client_cb
0000f1a4 l     F .text	0000000a oc_ri_remove_cb
2000049c l     O .bss	000000c8 oc_client_cb_area
20000564 l     O .bss	0000001c oc_client_cb_pool
20000580 l     O .bss	00000004 oc_client_cbs
00000000 l    df *ABS*	00000000 coap.c
0000f2a8 l     F .text	00000012 coap_log_2
0000f2ba l     F .text	00000016 coap_option_nibble
0000f2d0 l     F .text	0000008c coap_append_opt_hdr
0000f35c l     F .text	00000086 coap_append_array_opt
0000f3e2 l     F .text	0000009c coap_append_int_opt
20000584 l     O .bss	00000002 current_mid
00000000 l    df *ABS*	00000000 adaptor.c
20000588 l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 random.c
00000000 l    df *ABS*	00000000 oc_helpers.c
00000000 l    df *ABS*	00000000 sysinit.c
0000f996 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 ble.c
0000f9b4 l     F .text	00000036 ble_app_set_addr
0000f9ea l     F .text	0000005a ble_app_advertise
0000fa44 l     F .text	0000000c ble_app_on_sync
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 json_encode.c
0000fb78 l     F .text	00000200 json_encode_value
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sensor.c
0000fe48 l     F .text	00000028 sensor_mgr_remove
0000fe70 l     F .text	00000060 sensor_mgr_insert
0000fed0 l     F .text	0000000a sensor_type_traits_empty
0000fedc l     F .text	0000000c sensor_mgr_evq_set
0000ff16 l     F .text	0000005c sensor_read_data_func
0000ff72 l     F .text	00000014 sensor_mgr_match_bydevname
0000ff88 l     F .text	00000048 sensor_base_ts_update_event
0000ffd0 l     F .text	00000050 sensor_up_timestamp
00010058 l     F .text	000000a0 sensor_mgr_init
000103ac l     F .text	0000007c sensor_mgr_wakeup_event
00010172 l     F .text	00000014 sensor_update_poll_rate
00010186 l     F .text	00000032 sensor_update_nextrun
000101b8 l     F .text	0000001e sensor_calc_nextrun_delta
000101d8 l     F .text	00000024 sensor_find_min_nextrun_sensor
00010334 l     F .text	0000004a sensor_mgr_poll_bytype
0001037e l     F .text	0000002e sensor_poll_per_type_trait
2000058c l     O .bss	00000078 sensor_notify_evt_area
20000604 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00010738 l     F .text	00000016 os_main
20000728 l     O .bss	00001000 g_os_main_stack
20000628 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_cputime_pwr2.c
00000000 l    df *ABS*	00000000 os_dev.c
00010ac8 l     F .text	0000005c os_dev_add
00010b24 l     F .text	00000026 os_dev_initialize
00010b4a l     F .text	00000020 os_dev_init
20001728 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20001730 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
00011684 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001180c l     F .text	00000010 os_msys_find_biggest_pool
0001181c l     F .text	0000002c os_msys_find_pool
00011894 l     F .text	00000044 os_msys_init_once
20001740 l     O .bss	00000db0 os_msys_1_data
200024f0 l     O .bss	0000000c os_msys_1_mbuf_pool
200024fc l     O .bss	0000001c os_msys_1_mempool
20000184 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
00011b10 l     F .text	00000020 os_sanity_check_list_lock
00011b30 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00011fa4 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
00012094 l     F .text	0000004c os_deltatime
000120e0 l     F .text	0000005c os_time_tick
20002520 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 HAL_CM4.o
00012224 l       .text	00000000 SVC_User
00012242 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 malloc.c
000122dc l     F .text	00000004 malloc_lock_nop
000122e0 l     F .text	00000002 malloc_unlock_nop
000122e2 l     F .text	00000048 __malloc_from_block
0001232c l     F .text	00000068 __free_block
2000019c l     O .data	00000018 __malloc_head
200001b4 l     O .data	00000004 malloc_lock
200001b8 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
00012494 l       .text	00000000 test1
00012488 l       .text	00000000 loop1
0001249a l       .text	00000000 res1
000124b6 l       .text	00000000 test2
000124be l       .text	00000000 done
000124aa l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
000124ca l       .text	00000000 test1
000124c6 l       .text	00000000 loop1
000124d8 l       .text	00000000 test2
000124d4 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
000125b0 l     F .text	000000c0 ui2a
00012670 l     F .text	00000020 i2a
00012690 l     F .text	00000030 a2d
000126c0 l     F .text	00000036 a2i
000126f6 l     F .text	0000002a putf
00012720 l     F .text	0000011c putchw
0001283c l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
00012c18 l     F .text	00000004 stdin_read
00012c1c l     F .text	00000010 stdout_write
200001bc l     O .data	00000004 _stdin
200001c0 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 json_helper.c
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 sensor_helper.c
00000000 l    df *ABS*	00000000 ble_gap.c
00012dca l     F .text	0000002a ble_gap_call_event_cb
00012df4 l     F .text	0000002c ble_gap_is_preempted
00012e20 l     F .text	00000010 ble_gap_has_client
00012e30 l     F .text	00000012 ble_gap_update_to_l2cap
00012e44 l     F .text	00000014 ble_gap_accept_master_conn
00012e58 l     F .text	00000018 ble_gap_adv_active_instance
00012e70 l     F .text	00000030 ble_gap_accept_slave_conn
00012ea0 l     F .text	00000028 ble_gap_adv_type
00012ec8 l     F .text	0000002a ble_gap_adv_dflt_itvls
00012ef4 l     F .text	00000028 ble_gap_update_entry_find
00012f1c l     F .text	00000046 ble_gap_validate_conn_params
00012f64 l     F .text	00000020 ble_gap_event_listener_call
00012f84 l     F .text	00000034 ble_gap_extract_conn_cb
00012fb8 l     F .text	00000028 ble_gap_call_conn_event_cb
00012fe0 l     F .text	00000094 ble_gap_fill_conn_desc
00013074 l     F .text	00000016 ble_gap_conn_to_snapshot
0001308a l     F .text	00000028 ble_gap_find_snapshot
000130b4 l     F .text	00000030 ble_gap_update_entry_remove
000130e4 l     F .text	00000024 ble_gap_master_reset_state
00013108 l     F .text	00000030 ble_gap_master_extract_state
00013138 l     F .text	00000046 ble_gap_disc_report
0001317e l     F .text	00000032 ble_gap_master_connect_failure
000131b0 l     F .text	00000018 ble_gap_master_failed
000131c8 l     F .text	00000040 ble_gap_master_connect_cancelled
00013208 l     F .text	0000003c ble_gap_disc_complete
00013244 l     F .text	00000020 ble_gap_slave_reset_state
00013264 l     F .text	0000002c ble_gap_slave_extract_cb
00013290 l     F .text	0000002e ble_gap_adv_finished
000132c0 l     F .text	00000014 ble_gap_update_entry_free
000132d4 l     F .text	00000038 ble_gap_master_ticks_until_exp
0001330c l     F .text	0000003c ble_gap_update_next_exp
00013348 l     F .text	00000038 ble_gap_slave_ticks_until_exp
00013380 l     F .text	00000020 ble_gap_slave_set_timer
000133a0 l     F .text	00000058 ble_gap_rx_adv_report_sanity_check
000133f8 l     F .text	00000024 ble_gap_rd_rem_sup_feat_tx
0001341c l     F .text	00000010 ble_gap_conn_cancel_tx
0001342c l     F .text	0000002a ble_gap_disc_enable_tx
00013458 l     F .text	00000050 ble_gap_master_timer
000134a8 l     F .text	0000000c ble_gap_disc_disable_tx
000134b4 l     F .text	00000024 ble_gap_adv_enable_tx
000134d8 l     F .text	0000002c ble_gap_slave_timer
00013504 l     F .text	00000084 ble_gap_adv_validate
00013588 l     F .text	00000090 ble_gap_adv_params_tx
00013618 l     F .text	00000048 ble_gap_tx_param_pos_reply
00013660 l     F .text	00000028 ble_gap_tx_param_neg_reply
00013688 l     F .text	00000024 ble_gap_update_entry_alloc
000136ac l     F .text	00000052 ble_gap_update_tx
00013ac4 l     F .text	00000022 ble_gap_adv_stop_no_lock
00013afc l     F .text	0000001c ble_gap_disc_cancel_no_lock
00013b2c l     F .text	00000028 ble_gap_conn_cancel_no_lock
00013bae l     F .text	0000003e ble_gap_update_notify
00013d7c l     F .text	0000002c ble_gap_update_l2cap_cb
00013da8 l     F .text	00000044 ble_gap_update_timer
00013e12 l     F .text	00000026 ble_gap_update_failed
20002550 l     O .bss	00000004 ble_gap_event_listener_list
20002554 l     O .bss	00000004 ble_gap_update_entries
20002558 l     O .bss	00000018 ble_gap_update_entry_mem
20002570 l     O .bss	0000001c ble_gap_update_entry_pool
2000022c l     O .bssnz	00000014 ble_gap_master
20000240 l     O .bssnz	00000010 ble_gap_slave
2000258c l     O .bss	0000000c preempt_done_mutex
20002598 l     O .bss	00000008 slaves.13107
00000000 l    df *ABS*	00000000 ble_gattc.c
00014348 l     F .text	00000020 ble_gattc_rx_entry_find
00014368 l     F .text	0000000c ble_gattc_err_dispatch_get
00014374 l     F .text	0000000c ble_gattc_resume_dispatch_get
00014380 l     F .text	0000000c ble_gattc_tmo_dispatch_get
0001438c l     F .text	00000024 ble_gattc_proc_matches_conn_op
000143b0 l     F .text	0000001e ble_gattc_proc_matches_expired
000143ce l     F .text	00000028 ble_gattc_proc_matches_conn_rx_entry
000143f6 l     F .text	00000008 ble_gattc_proc_matches_stalled
000143fe l     F .text	00000014 ble_gattc_proc_timeout
00014414 l     F .text	0000001c ble_gattc_error
00014430 l     F .text	0000002c ble_gattc_mtu_cb
0001445c l     F .text	0000000e ble_gattc_mtu_tmo
0001446a l     F .text	0000000a ble_gattc_mtu_err
00014474 l     F .text	0000002c ble_gattc_disc_all_svcs_cb
000144a0 l     F .text	0000000e ble_gattc_disc_all_svcs_tmo
000144ae l     F .text	00000016 ble_gattc_disc_all_svcs_err
000144c4 l     F .text	0000002c ble_gattc_disc_svc_uuid_cb
000144f0 l     F .text	0000000e ble_gattc_disc_svc_uuid_tmo
000144fe l     F .text	00000014 ble_gattc_disc_svc_uuid_err
00014512 l     F .text	0000004c ble_gattc_disc_svc_uuid_rx_hinfo
0001455e l     F .text	0000002c ble_gattc_find_inc_svcs_cb
0001458a l     F .text	0000000e ble_gattc_find_inc_svcs_tmo
00014598 l     F .text	00000018 ble_gattc_find_inc_svcs_err
000145b0 l     F .text	0000002c ble_gattc_disc_all_chrs_cb
000145dc l     F .text	0000000e ble_gattc_disc_all_chrs_tmo
000145ea l     F .text	00000014 ble_gattc_disc_all_chrs_err
000145fe l     F .text	0000002c ble_gattc_disc_chr_uuid_cb
0001462a l     F .text	0000000e ble_gattc_disc_chr_uuid_tmo
00014638 l     F .text	00000014 ble_gattc_disc_chr_uuid_err
0001464c l     F .text	00000034 ble_gattc_disc_all_dscs_cb
00014680 l     F .text	0000000e ble_gattc_disc_all_dscs_tmo
0001468e l     F .text	00000014 ble_gattc_disc_all_dscs_err
000146a2 l     F .text	00000046 ble_gattc_disc_all_dscs_rx_idata
000146e8 l     F .text	0000002c ble_gattc_read_cb
00014714 l     F .text	0000000e ble_gattc_read_tmo
00014722 l     F .text	0000000a ble_gattc_read_err
0001472c l     F .text	00000026 ble_gattc_read_rx_read_rsp
00014752 l     F .text	0000002c ble_gattc_read_uuid_cb
0001477e l     F .text	0000000e ble_gattc_read_uuid_tmo
0001478c l     F .text	0000000a ble_gattc_read_uuid_err
00014796 l     F .text	0000001c ble_gattc_read_uuid_rx_complete
000147b2 l     F .text	0000002c ble_gattc_read_long_cb
000147de l     F .text	0000000e ble_gattc_read_long_tmo
000147ec l     F .text	0000000a ble_gattc_read_long_err
000147f6 l     F .text	00000042 ble_gattc_read_mult_cb
00014838 l     F .text	0000000e ble_gattc_read_mult_tmo
00014846 l     F .text	0000000a ble_gattc_read_mult_err
00014850 l     F .text	00000026 ble_gattc_write_long_cb
00014876 l     F .text	0000000c ble_gattc_write_long_tmo
00014882 l     F .text	0000001a ble_gattc_write_long_rx_exec
0001489c l     F .text	00000030 ble_gattc_write_reliable_cb
000148cc l     F .text	0000000c ble_gattc_write_reliable_tmo
000148d8 l     F .text	0000000c ble_gattc_write_reliable_rx_exec
000148e4 l     F .text	0000002c ble_gattc_proc_set_resume_timer
00014910 l     F .text	00000014 ble_gattc_process_resume_status
00014924 l     F .text	00000010 ble_gattc_proc_set_exp_timer
00014934 l     F .text	00000024 ble_gattc_ticks_until_resume
00014958 l     F .text	00000078 ble_gattc_extract
000149d0 l     F .text	0000002c ble_gattc_extract_expired
000149fc l     F .text	00000014 ble_gattc_extract_stalled
00014a10 l     F .text	00000020 ble_gattc_extract_by_conn_op
00014a30 l     F .text	00000014 ble_gattc_extract_first_by_conn_op
00014a44 l     F .text	00000014 ble_gattc_extract_one
00014a58 l     F .text	00000028 ble_gattc_extract_with_rx_entry
00014a80 l     F .text	00000020 ble_gattc_proc_insert
00014aa0 l     F .text	00000010 ble_gattc_indicate_tmo
00014ab0 l     F .text	00000038 ble_gattc_write_cb
00014ae8 l     F .text	0000000c ble_gattc_write_tmo
00014af4 l     F .text	00000008 ble_gattc_write_err
00014afc l     F .text	00000044 ble_gattc_proc_free
00014b40 l     F .text	0000003e ble_gattc_fail_procs
00014b7e l     F .text	00000020 ble_gattc_write_reliable_err
00014b9e l     F .text	0000002a ble_gattc_write_long_err
00014bc8 l     F .text	00000084 ble_gattc_write_reliable_tx
00014c4c l     F .text	00000024 ble_gattc_write_reliable_resume
00014c70 l     F .text	0000006e ble_gattc_write_long_tx
00014cde l     F .text	00000024 ble_gattc_write_long_resume
00014d02 l     F .text	0000001a ble_gattc_read_long_tx
00014d1c l     F .text	00000026 ble_gattc_read_long_resume
00014d42 l     F .text	0000006e ble_gattc_read_long_rx_read_rsp
00014db0 l     F .text	00000012 ble_gattc_disc_all_dscs_tx
00014dc2 l     F .text	00000026 ble_gattc_disc_all_dscs_resume
00014de8 l     F .text	00000036 ble_gattc_disc_all_dscs_rx_complete
00014e20 l     F .text	00000028 ble_gattc_disc_chr_uuid_tx
00014e48 l     F .text	00000026 ble_gattc_disc_chr_uuid_resume
00014e6e l     F .text	00000036 ble_gattc_disc_chr_uuid_rx_complete
00014ea4 l     F .text	00000028 ble_gattc_disc_all_chrs_tx
00014ecc l     F .text	00000026 ble_gattc_disc_all_chrs_resume
00014ef2 l     F .text	00000036 ble_gattc_disc_all_chrs_rx_complete
00014f28 l     F .text	00000030 ble_gattc_find_inc_svcs_tx
00014f58 l     F .text	00000026 ble_gattc_find_inc_svcs_resume
00014f7e l     F .text	00000038 ble_gattc_find_inc_svcs_rx_complete
00014fb6 l     F .text	0000003a ble_gattc_disc_svc_uuid_tx
00014ff0 l     F .text	00000026 ble_gattc_disc_svc_uuid_resume
00015016 l     F .text	00000038 ble_gattc_disc_svc_uuid_rx_complete
00015050 l     F .text	00000028 ble_gattc_disc_all_svcs_tx
00015078 l     F .text	00000026 ble_gattc_disc_all_svcs_resume
0001509e l     F .text	0000003a ble_gattc_disc_all_svcs_rx_complete
000150d8 l     F .text	00000026 ble_gattc_process_status
00015100 l     F .text	00000040 ble_gattc_resume_procs
00015140 l     F .text	0000001c ble_gattc_proc_alloc
0001515c l     F .text	00000044 ble_gattc_read_uuid_rx_adata
000151a0 l     F .text	00000028 ble_gattc_indicate_err
000151c8 l     F .text	00000024 ble_gattc_indicate_rx_rsp
000151ec l     F .text	0000005c ble_gattc_disc_all_svcs_rx_adata
00015248 l     F .text	0000007c ble_gattc_disc_all_chrs_rx_adata
000152c4 l     F .text	0000008e ble_gattc_find_inc_svcs_rx_adata
00015352 l     F .text	0000009a ble_gattc_disc_chr_uuid_rx_adata
000153ec l     F .text	00000072 ble_gattc_find_inc_svcs_rx_read_rsp
0001545e l     F .text	00000090 ble_gattc_write_reliable_rx_prep
000154ee l     F .text	0000007a ble_gattc_write_long_rx_prep
200025a0 l     O .bss	000000e0 ble_gattc_proc_mem
20002680 l     O .bss	0000001c ble_gattc_proc_pool
2000269c l     O .bss	00000008 ble_gattc_procs
200026a4 l     O .bss	00000004 ble_gattc_resume_at
200026a8 l     O .bss	00000004 error.12764
0002c274 l     O .text	0000003c ble_gattc_err_dispatch
0002c2c4 l     O .text	0000003c ble_gattc_resume_dispatch
0002c300 l     O .text	00000010 ble_gattc_rx_exec_entries
0002c310 l     O .text	00000010 ble_gattc_rx_prep_entries
0002c320 l     O .text	00000018 ble_gattc_rx_read_rsp_entries
0002c338 l     O .text	00000020 ble_gattc_rx_read_type_complete_entries
0002c358 l     O .text	00000020 ble_gattc_rx_read_type_elem_entries
0002c378 l     O .text	0000003c ble_gattc_tmo_dispatch
00000000 l    df *ABS*	00000000 ble_gatts.c
0001597c l     F .text	0000001a ble_gatts_chr_clt_cfg_allowed
00015996 l     F .text	00000056 ble_gatts_att_flags_from_chr_flags
000159ec l     F .text	00000056 ble_gatts_chr_properties
00015a42 l     F .text	00000014 ble_gatts_chr_is_sane
00015a56 l     F .text	0000000c ble_gatts_chr_op
00015a64 l     F .text	0000002c ble_gatts_find_svc_entry_idx
00015a90 l     F .text	0000003c ble_gatts_svc_incs_satisfied
00015acc l     F .text	0000000c ble_gatts_dsc_op
00015ad8 l     F .text	00000014 ble_gatts_dsc_is_sane
00015aec l     F .text	00000024 ble_gatts_clt_cfg_find_idx
00015b10 l     F .text	00000018 ble_gatts_clt_cfg_find
00015b28 l     F .text	00000024 ble_gatts_svc_type_to_uuid
00015b4c l     F .text	0000001a ble_gatts_svc_is_sane
00015b68 l     F .text	0000000c ble_gatts_clt_cfg_size
00015b74 l     F .text	00000034 ble_gatts_schedule_update
00015ba8 l     F .text	000000d2 ble_gatts_clt_cfg_access_locked
00015c7a l     F .text	00000032 ble_gatts_subscribe_event
00015d40 l     F .text	00000028 ble_gatts_register_inc
00016082 l     F .text	0000004c ble_gatts_inc_access
00015d68 l     F .text	00000024 ble_gatts_register_clt_cfg_dsc
00015d8c l     F .text	00000058 ble_gatts_register_dsc
000161a0 l     F .text	00000034 ble_gatts_dsc_access
00015de4 l     F .text	000000fc ble_gatts_register_chr
00016034 l     F .text	0000004e ble_gatts_chr_def_access
0001616c l     F .text	00000034 ble_gatts_chr_val_access
00015ee0 l     F .text	000000b8 ble_gatts_register_svc
0001600c l     F .text	00000028 ble_gatts_svc_access
00015f98 l     F .text	00000074 ble_gatts_register_round
000160ce l     F .text	0000009e ble_gatts_val_access
000161d4 l     F .text	0000002e ble_gatts_mutable
00016204 l     F .text	00000024 ble_gatts_free_mem
00016228 l     F .text	0000001c ble_gatts_free_svc_defs
00016244 l     F .text	0000006c ble_gatts_tx_notifications_one_chr
200026ac l     O .bss	00000004 ble_gatts_clt_cfg_mem
200026b0 l     O .bss	0000001c ble_gatts_clt_cfg_pool
200026cc l     O .bss	00000004 ble_gatts_clt_cfgs
200026d0 l     O .bss	00000004 ble_gatts_num_cfgable_chrs
200026d4 l     O .bss	00000004 ble_gatts_num_svc_defs
200026d8 l     O .bss	00000002 ble_gatts_num_svc_entries
200026dc l     O .bss	00000004 ble_gatts_svc_defs
200026e0 l     O .bss	00000004 ble_gatts_svc_entries
200001c8 l     O .data	00000004 __compound_literal.0
200001cc l     O .data	00000004 __compound_literal.1
200001d0 l     O .data	00000004 __compound_literal.2
200001d4 l     O .data	00000004 __compound_literal.3
200001d8 l     O .data	00000004 __compound_literal.4
00000000 l    df *ABS*	00000000 ble_hs.c
000167c8 l     F .text	0000004a ble_hs_wakeup_tx_conn
00016814 l     F .text	00000018 ble_hs_event_rx_hci_ev
0001682c l     F .text	0000001c ble_hs_clear_rx_queue
00016848 l     F .text	00000030 ble_hs_rx_data
00016878 l     F .text	00000008 ble_hs_event_tx_notify
0001688c l     F .text	00000014 ble_hs_sched_start_stage2
000168a0 l     F .text	00000008 ble_hs_event_start_stage1
00016928 l     F .text	00000008 ble_hs_event_rx_data
00016980 l     F .text	00000020 ble_hs_timer_reset
000169a0 l     F .text	00000030 ble_hs_timer_sched
000169d0 l     F .text	00000044 ble_hs_sync
00016a14 l     F .text	00000050 ble_hs_reset
00016a64 l     F .text	00000008 ble_hs_event_reset
00016a6c l     F .text	0000004c ble_hs_timer_exp
00016ba4 l     F .text	00000016 ble_hs_event_start_stage2
200026e4 l     O .bss	00000010 ble_hs_ev_reset
200026f4 l     O .bss	00000010 ble_hs_ev_start_stage1
20002704 l     O .bss	00000010 ble_hs_ev_start_stage2
20002714 l     O .bss	00000010 ble_hs_ev_tx_notifications
20002724 l     O .bss	00000004 ble_hs_evq
20002728 l     O .bss	000000a0 ble_hs_hci_os_event_buf
200027c8 l     O .bss	0000000c ble_hs_mutex
200027d4 l     O .bss	00000004 ble_hs_parent_task
200027d8 l     O .bss	00000004 ble_hs_reset_reason
200027dc l     O .bss	00000018 ble_hs_rx_q
200027f4 l     O .bss	00000020 ble_hs_timer
00000000 l    df *ABS*	00000000 ble_hs_adv.c
00016d84 l     F .text	00000012 find_field_func
00016d96 l     F .text	00000068 ble_hs_adv_set_hdr
00016dfe l     F .text	0000004e ble_hs_adv_set_flat_mbuf
00016e4c l     F .text	0000005e ble_hs_adv_set_array_uuid16
00016eaa l     F .text	00000062 ble_hs_adv_set_array_uuid128
00016f0c l     F .text	0000006a ble_hs_adv_set_array_uuid32
00016f76 l     F .text	00000066 ble_hs_adv_set_array16
00016fdc l     F .text	00000256 adv_set_fields
00000000 l    df *ABS*	00000000 ble_hs_atomic.c
00000000 l    df *ABS*	00000000 ble_hs_conn.c
20002814 l     O .bss	00000064 ble_hs_conn_elem_mem
20002878 l     O .bss	00000006 ble_hs_conn_null_addr
20002880 l     O .bss	0000001c ble_hs_conn_pool
2000289c l     O .bss	00000004 ble_hs_conns
00000000 l    df *ABS*	00000000 ble_hs_flow.c
00000000 l    df *ABS*	00000000 ble_hs_hci.c
000176a4 l     F .text	0000000c ble_hs_hci_max_acl_payload_sz
000176b0 l     F .text	00000014 ble_hs_hci_lock
000176c4 l     F .text	00000024 ble_hs_hci_wait_for_ack
000176e8 l     F .text	00000056 ble_hs_hci_rx_cmd_complete
0001773e l     F .text	0000002c ble_hs_hci_rx_cmd_status
0001776c l     F .text	00000088 ble_hs_hci_process_ack
000177f4 l     F .text	00000010 ble_hs_hci_unlock
00017804 l     F .text	00000024 ble_hs_hci_frag_alloc
00017828 l     F .text	00000048 ble_hs_hci_acl_hdr_prepend
200028a0 l     O .bss	00000004 ble_hs_hci_ack
200028a4 l     O .bss	00000002 ble_hs_hci_buf_sz
200028a8 l     O .bss	0000011c ble_hs_hci_frag_data
200029c4 l     O .bss	0000000c ble_hs_hci_frag_mbuf_pool
200029d0 l     O .bss	0000001c ble_hs_hci_frag_mempool
200029ec l     O .bss	0000000c ble_hs_hci_mutex
200029f8 l     O .bss	00000008 ble_hs_hci_sem
20002a00 l     O .bss	00000004 ble_hs_hci_sup_feat
20002a04 l     O .bss	00000001 ble_hs_hci_version
00000000 l    df *ABS*	00000000 ble_hs_hci_cmd.c
00017ab0 l     F .text	00000004 ble_hs_hci_cmd_body_le_set_adv_enable
00017ab4 l     F .text	00000006 ble_hs_hci_cmd_body_le_set_scan_enable
00017aba l     F .text	0000000e ble_hs_hci_cmd_body_set_addr_res_en
00017ac8 l     F .text	00000012 ble_hs_hci_cmd_body_disconnect
00017ada l     F .text	00000048 ble_hs_hci_cmd_body_le_conn_update
00017b22 l     F .text	00000046 ble_hs_hci_cmd_body_le_conn_param_reply
00017b68 l     F .text	00000014 ble_hs_hci_cmd_body_le_conn_param_neg_reply
00017b7c l     F .text	00000020 ble_hs_hci_cmd_body_set_resolv_priv_addr_timeout
00017b9c l     F .text	0000000e ble_hs_hci_cmd_body_le_read_remote_feat
00017baa l     F .text	000000ac ble_hs_hci_cmd_body_le_set_adv_params
00017c56 l     F .text	0000002c ble_hs_hci_cmd_body_le_lt_key_req_reply
00017c82 l     F .text	00000052 ble_hs_hci_cmd_body_add_to_resolv_list
00017cd4 l     F .text	00000024 ble_hs_hci_cmd_body_le_set_priv_mode
00017cf8 l     F .text	0000000c ble_hs_hci_cmd_body_set_random_addr
00017d04 l     F .text	00000018 ble_hs_hci_cmd_transport
00017d1c l     F .text	00000036 ble_hs_hci_cmd_send
00017d52 l     F .text	00000036 ble_hs_hci_cmd_body_le_set_adv_data
00017d88 l     F .text	00000010 ble_hs_hci_cmd_body_set_event_mask
00017d98 l     F .text	00000010 ble_hs_hci_cmd_body_le_set_event_mask
00017da8 l     F .text	00000038 ble_hs_hci_cmd_body_le_start_encrypt
00000000 l    df *ABS*	00000000 ble_hs_hci_evt.c
00017ee8 l     F .text	00000024 ble_hs_hci_evt_dispatch_find
00017f0c l     F .text	00000014 ble_hs_hci_evt_le_dispatch_find
00017f20 l     F .text	00000028 ble_hs_hci_evt_le_meta
00017f48 l     F .text	00000042 ble_hs_hci_evt_le_adv_rpt_first_pass
00017f8a l     F .text	00000004 ble_hs_hci_evt_le_ext_adv_rpt
00017f8e l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_estab
00017f92 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_rpt
00017f96 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_lost
00017f9a l     F .text	00000004 ble_hs_hci_evt_le_scan_timeout
00017f9e l     F .text	00000004 ble_hs_hci_evt_le_adv_set_terminated
00017fa2 l     F .text	00000004 ble_hs_hci_evt_le_scan_req_rcvd
00017fa6 l     F .text	00000014 ble_hs_hci_evt_hw_error
00017fba l     F .text	0000002a ble_hs_hci_evt_enc_key_refresh
00017fe4 l     F .text	00000030 ble_hs_hci_evt_encrypt_change
00018014 l     F .text	0000004c ble_hs_hci_evt_disconn_complete
00018060 l     F .text	00000076 ble_hs_hci_evt_num_completed_pkts
000180d6 l     F .text	0000003c ble_hs_hci_evt_le_phy_update_complete
00018112 l     F .text	00000096 ble_hs_hci_evt_le_dir_adv_rpt
000181a8 l     F .text	0000007e ble_hs_hci_evt_le_adv_rpt
00018226 l     F .text	00000096 ble_hs_hci_evt_le_conn_parm_req
000182bc l     F .text	00000042 ble_hs_hci_evt_le_lt_key_req
000182fe l     F .text	0000003a ble_hs_hci_evt_le_rd_rem_used_feat_complete
00018338 l     F .text	00000088 ble_hs_hci_evt_le_conn_upd_complete
000183c0 l     F .text	000000d4 ble_hs_hci_evt_le_conn_complete
0002c408 l     O .text	00000030 ble_hs_hci_evt_dispatch
0002c438 l     O .text	00000050 ble_hs_hci_evt_le_dispatch
00000000 l    df *ABS*	00000000 ble_hs_hci_util.c
00000000 l    df *ABS*	00000000 ble_hs_id.c
00018720 l     F .text	00000042 ble_hs_id_addr_type_usable
20002a08 l     O .bss	00000006 ble_hs_id_pub
20002a10 l     O .bss	00000006 ble_hs_id_rnd
00000000 l    df *ABS*	00000000 ble_hs_log.c
00000000 l    df *ABS*	00000000 ble_hs_mbuf.c
000187cc l     F .text	0000002a ble_hs_mbuf_gen_pkt
00000000 l    df *ABS*	00000000 ble_hs_misc.c
00018860 l     F .text	00000020 ble_hs_misc_restore_one_irk
00000000 l    df *ABS*	00000000 ble_hs_mqueue.c
00000000 l    df *ABS*	00000000 ble_hs_periodic_sync.c
20002a18 l     O .bss	0000001c ble_hs_periodic_sync_pool
20002a34 l     O .bss	00000028 ble_hs_psync_elem_mem
20002a5c l     O .bss	00000004 g_ble_hs_periodic_sync_handles
00000000 l    df *ABS*	00000000 ble_hs_pvcy.c
000189a0 l     F .text	0000001c ble_hs_pvcy_clear_entries
000189bc l     F .text	0000002e ble_hs_pvcy_set_addr_timeout
000189ea l     F .text	00000030 ble_hs_pvcy_set_resolve_enabled
00018a88 l     F .text	00000094 ble_hs_pvcy_add_entry_hci
20002a60 l     O .bss	00000010 ble_hs_pvcy_irk
20002a70 l     O .bss	00000001 ble_hs_pvcy_started
00000000 l    df *ABS*	00000000 ble_hs_startup.c
00018bc0 l     F .text	00000010 ble_hs_startup_reset_tx
00018bd0 l     F .text	0000003a ble_hs_startup_read_local_ver_tx
00018c10 l     F .text	00000058 ble_hs_startup_set_evmask_tx
00018c68 l     F .text	0000004c ble_hs_startup_le_set_evmask_tx
00018cb4 l     F .text	00000044 ble_hs_startup_le_read_buf_sz_tx
00018cf8 l     F .text	00000048 ble_hs_startup_read_buf_sz_tx
00018d40 l     F .text	0000005e ble_hs_startup_read_buf_sz
00018d9e l     F .text	0000003c ble_hs_startup_le_read_sup_f_tx
00018dda l     F .text	00000038 ble_hs_startup_read_bd_addr
00000000 l    df *ABS*	00000000 ble_hs_stop.c
00018e68 l     F .text	0000003c ble_hs_stop_done
00018ea4 l     F .text	00000026 ble_hs_stop_terminate_next_conn
00018eca l     F .text	00000008 ble_hs_stop_term_event_cb
20002a74 l     O .bss	0000000c ble_hs_stop_gap_listener
20002a80 l     O .bss	00000004 ble_hs_stop_listeners
20002a84 l     O .bss	00000010 ble_hs_stop_term_ev
00000000 l    df *ABS*	00000000 ble_ibeacon.c
00000000 l    df *ABS*	00000000 ble_l2cap.c
00018f66 l     F .text	00000012 ble_l2cap_get_mtu
00018f78 l     F .text	00000024 ble_l2cap_append_rx
00019066 l     F .text	0000004c ble_l2cap_rx_payload
20002a94 l     O .bss	00000054 ble_l2cap_chan_mem
00000000 l    df *ABS*	00000000 ble_l2cap_sig.c
000191e4 l     F .text	0000001c ble_l2cap_sig_next_id
00019200 l     F .text	00000014 ble_l2cap_sig_dispatch_get
00019214 l     F .text	0000002e ble_l2cap_sig_proc_matches
00019242 l     F .text	00000004 ble_l2cap_sig_rx_noop
00019246 l     F .text	0000000e ble_l2cap_sig_update_call_cb
00019254 l     F .text	00000024 ble_l2cap_sig_proc_insert
00019278 l     F .text	00000048 ble_l2cap_sig_proc_extract
000192c0 l     F .text	00000020 ble_l2cap_sig_proc_alloc
000192e0 l     F .text	00000014 ble_l2cap_sig_proc_set_timer
000192f4 l     F .text	0000005c ble_l2cap_sig_extract_expired
00019350 l     F .text	00000014 ble_l2cap_sig_proc_free
00019364 l     F .text	00000018 ble_l2cap_sig_process_status
0001937c l     F .text	00000014 ble_l2cap_sig_rx_reject
00019390 l     F .text	0000004a ble_l2cap_sig_update_rsp_rx
000193da l     F .text	00000078 ble_l2cap_sig_rx
00019452 l     F .text	000000a0 ble_l2cap_sig_update_req_rx
20002ae8 l     O .bss	00000001 ble_l2cap_sig_cur_id
20002aec l     O .bss	00000014 ble_l2cap_sig_proc_mem
20002b00 l     O .bss	0000001c ble_l2cap_sig_proc_pool
20002b1c l     O .bss	00000008 ble_l2cap_sig_procs
0002c4c8 l     O .text	0000005c ble_l2cap_sig_dispatch
00000000 l    df *ABS*	00000000 ble_l2cap_sig_cmd.c
00000000 l    df *ABS*	00000000 ble_sm.c
00019718 l     F .text	00000014 ble_sm_dispatch_get
0001972c l     F .text	00000028 ble_sm_proc_remove
00019754 l     F .text	0000003a ble_sm_proc_matches
00019790 l     F .text	00000018 ble_sm_insert
000197a8 l     F .text	0000000c ble_sm_rx_noop
000197b4 l     F .text	00000028 ble_sm_build_authreq
000197dc l     F .text	00000022 ble_sm_key_dist
000197fe l     F .text	00000004 ble_sm_chk_store_overflow_by_type
00019802 l     F .text	0000001e ble_sm_chk_store_overflow
00019820 l     F .text	00000010 ble_sm_state_after_pair
00019830 l     F .text	00000024 ble_sm_pair_base_fill
00019854 l     F .text	00000020 ble_sm_pair_req_fill
00019874 l     F .text	00000028 ble_sm_pair_rsp_fill
0001989c l     F .text	00000004 ble_sm_verify_auth_requirements
000198a0 l     F .text	0000000a ble_sm_gen_ediv
000198aa l     F .text	0000000c ble_sm_gen_master_id_rand
000198b6 l     F .text	0000000c ble_sm_gen_csrk
000198c2 l     F .text	00000014 ble_sm_io_action
000198d6 l     F .text	000000b2 ble_sm_pair_cfg
00019988 l     F .text	00000026 ble_sm_gen_ltk
000199b0 l     F .text	0000003c ble_sm_exec
000199ec l     F .text	00000032 ble_sm_sec_req_exec
00019a1e l     F .text	00000022 ble_sm_pair_fail_tx
00019a40 l     F .text	000000e6 ble_sm_fill_store_value
00019b26 l     F .text	00000048 ble_sm_update_sec_state
00019b6e l     F .text	0000002c ble_sm_key_exch_success
00019b9a l     F .text	0000027a ble_sm_key_exch_exec
00019e14 l     F .text	0000001e ble_sm_key_rxed
00019e32 l     F .text	0000001e ble_sm_start_encrypt_tx
00019e50 l     F .text	0000000e ble_sm_enc_restore_exec
00019e5e l     F .text	00000044 ble_sm_enc_start_exec
00019ea2 l     F .text	00000066 ble_sm_ltk_req_reply_tx
00019f08 l     F .text	00000024 ble_sm_ltk_start_exec
00019f2c l     F .text	00000046 ble_sm_ltk_req_neg_reply_tx
00019f72 l     F .text	0000004e ble_sm_ltk_restore_exec
00019fc0 l     F .text	00000012 ble_sm_random_exec
00019fd2 l     F .text	00000012 ble_sm_confirm_exec
00019fe4 l     F .text	00000014 ble_sm_proc_set_timer
00019ff8 l     F .text	00000070 ble_sm_extract_expired
0001a068 l     F .text	000000e6 ble_sm_persist_keys
0001a150 l     F .text	00000014 ble_sm_proc_free
0001a164 l     F .text	00000020 ble_sm_proc_alloc
0001a184 l     F .text	00000046 ble_sm_retrieve_ltk
0001a1ca l     F .text	0000002a ble_sm_fail_rx
0001a1f4 l     F .text	00000054 ble_sm_read_bond
0001a248 l     F .text	0000007c ble_sm_chk_repeat_pairing
0001a388 l     F .text	00000080 ble_sm_sign_info_rx
0001a408 l     F .text	0000007a ble_sm_id_addr_info_rx
0001a482 l     F .text	00000080 ble_sm_id_info_rx
0001a502 l     F .text	0000007a ble_sm_master_id_rx
0001a57c l     F .text	00000086 ble_sm_enc_info_rx
0001a602 l     F .text	00000120 ble_sm_pair_req_rx
0001a76c l     F .text	000000ae ble_sm_confirm_rx
0001a81a l     F .text	000000c0 ble_sm_pair_rsp_rx
0001a9b8 l     F .text	000000f0 ble_sm_enc_event_rx
0001aaa8 l     F .text	0000006c ble_sm_rx
0001ac1e l     F .text	000000a4 ble_sm_pair_exec
0001acd2 l     F .text	0000006c ble_sm_random_rx
0001aea2 l     F .text	000000ec ble_sm_sec_req_rx
20002b24 l     O .bss	00000100 ble_sm_proc_mem
20002c24 l     O .bss	0000001c ble_sm_proc_pool
20002c40 l     O .bss	00000008 ble_sm_procs
0002c53c l     O .text	0000003c ble_sm_dispatch
0002c58c l     O .text	0000002c ble_sm_state_dispatch
00000000 l    df *ABS*	00000000 ble_sm_cmd.c
00000000 l    df *ABS*	00000000 ble_sm_lgcy.c
0001b05a l     F .text	0000003e ble_sm_gen_stk
0002c5b8 l     O .text	00000019 ble_sm_lgcy_init_ioa
0002c5d4 l     O .text	00000019 ble_sm_lgcy_resp_ioa
00000000 l    df *ABS*	00000000 ble_store.c
0001b2f4 l     F .text	00000018 ble_store_status
0001b3b8 l     F .text	00000008 ble_store_persist_sec
00000000 l    df *ABS*	00000000 ble_uuid.c
0002c5f0 l     O .text	00000010 ble_uuid_base
00000000 l    df *ABS*	00000000 ble_att.c
0001b6a4 l     F .text	00000028 ble_att_rx_dispatch_entry_find
0001b6cc l     F .text	00000032 ble_att_rx_handle_unknown_request
0001b6fe l     F .text	0000007c ble_att_rx
20002c48 l     O .bss	00000002 ble_att_preferred_mtu_val
0002c600 l     O .text	000000d8 ble_att_rx_dispatch
00000000 l    df *ABS*	00000000 ble_att_clt.c
0001b834 l     F .text	0000002c ble_att_clt_parse_find_type_value_hinfo
0001b860 l     F .text	0000003e ble_att_clt_parse_read_group_type_adata
0001b89e l     F .text	00000074 ble_att_clt_parse_find_info_entry
00000000 l    df *ABS*	00000000 ble_att_cmd.c
00000000 l    df *ABS*	00000000 ble_att_svr.c
0001be80 l     F .text	00000010 ble_att_svr_next_id
0001be90 l     F .text	00000026 ble_att_svr_prep_find_prev
0001beb6 l     F .text	0000005e ble_att_svr_prep_validate
0001bf14 l     F .text	00000020 ble_att_svr_entry_alloc
0001bf34 l     F .text	0000001a ble_att_svr_get_sec_state
0001bf4e l     F .text	00000116 ble_att_svr_check_perms
0001c064 l     F .text	0000005e ble_att_svr_read
0001c0c2 l     F .text	00000062 ble_att_svr_write
0001c124 l     F .text	00000018 ble_att_svr_pullup_req_base
0001c13c l     F .text	00000068 ble_att_svr_build_mtu_rsp
0001c1a4 l     F .text	00000024 ble_att_svr_pkt
0001c1c8 l     F .text	00000032 ble_att_svr_build_write_rsp
0001c1fa l     F .text	00000032 ble_att_svr_build_indicate_rsp
0001c22c l     F .text	000000b0 ble_att_svr_fill_info
0001c2dc l     F .text	00000060 ble_att_svr_build_find_info_rsp
0001c33c l     F .text	00000048 ble_att_svr_read_group_type_entry_write
0001c384 l     F .text	00000024 ble_att_svr_is_valid_find_group_type
0001c3a8 l     F .text	00000054 ble_att_svr_is_valid_group_end
0001c3fc l     F .text	00000016 ble_att_svr_is_valid_read_group_type
0001c412 l     F .text	0000005c ble_att_svr_read_flat
0001c46e l     F .text	0000005c ble_att_svr_fill_type_value_entry
0001c4cc l     F .text	000000e8 ble_att_svr_fill_type_value
0001c5b4 l     F .text	00000062 ble_att_svr_build_find_type_value_rsp
0001c616 l     F .text	0000003a ble_att_svr_service_uuid
0001c650 l     F .text	00000184 ble_att_svr_build_read_group_type_rsp
0001c7d4 l     F .text	0000001c ble_att_svr_prep_free
0001c7f0 l     F .text	0000003c ble_att_svr_prep_alloc
0001c82c l     F .text	0000007c ble_att_svr_insert_prep_entry
0001c8a8 l     F .text	00000048 ble_att_svr_prep_extract
0001c8f0 l     F .text	00000014 ble_att_svr_free_start_mem
0001c978 l     F .text	00000034 ble_att_svr_write_handle
0001c9ac l     F .text	00000064 ble_att_svr_prep_write
0001ca44 l     F .text	00000136 ble_att_svr_build_read_type_rsp
0001cbc4 l     F .text	000000a6 ble_att_svr_build_read_mult_rsp
0001cc9a l     F .text	00000098 ble_att_svr_tx_rsp
20002c4c l     O .bss	00000004 ble_att_svr_entry_mem
20002c50 l     O .bss	0000001c ble_att_svr_entry_pool
20002c6c l     O .bss	00000008 ble_att_svr_hidden_list
20002c74 l     O .bss	00000002 ble_att_svr_id
20002c78 l     O .bss	00000008 ble_att_svr_list
20002c80 l     O .bss	00000300 ble_att_svr_prep_entry_mem
20002f80 l     O .bss	0000001c ble_att_svr_prep_entry_pool
00000000 l    df *ABS*	00000000 ble_hs_dbg.c
00000000 l    df *ABS*	00000000 ble_sm_alg.c
0001d4be l     F .text	0000001c ble_sm_alg_xor_128
0001d4da l     F .text	00000048 ble_sm_alg_encrypt
00000000 l    df *ABS*	00000000 ble_hci_ram.c
20002f9c l     O .bss	00000104 ble_hci_ram_cmd_buf
200030a0 l     O .bss	0000001c ble_hci_ram_cmd_pool
200030bc l     O .bss	00000090 ble_hci_ram_evt_hi_buf
2000314c l     O .bss	0000001c ble_hci_ram_evt_hi_pool
20003168 l     O .bss	00000240 ble_hci_ram_evt_lo_buf
200033a8 l     O .bss	0000001c ble_hci_ram_evt_lo_pool
200033c4 l     O .bss	00000004 ble_hci_ram_rx_acl_hs_arg
200033c8 l     O .bss	00000004 ble_hci_ram_rx_acl_hs_cb
200033cc l     O .bss	00000004 ble_hci_ram_rx_acl_ll_arg
200033d0 l     O .bss	00000004 ble_hci_ram_rx_acl_ll_cb
200033d4 l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_arg
200033d8 l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_cb
200033dc l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_arg
200033e0 l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 aes_encrypt.c
0002c780 l     O .text	00000100 sbox
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001e188 l     F .text	00000028 nrf52k_flash_wait_ready
0001e1b0 l     F .text	00000054 nrf52k_flash_erase_sector
0001e204 l     F .text	00000004 nrf52k_flash_init
0001e208 l     F .text	00000020 nrf52k_flash_sector_info
0001e228 l     F .text	000000d0 nrf52k_flash_write
0001e2f8 l     F .text	0000000e nrf52k_flash_read
0002c898 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001e308 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001e514 l     F .text	0000000a nrf_read_timer_cntr
0001e520 l     F .text	000000b4 nrf_timer_set_ocmp
0001e5d4 l     F .text	0000000a nrf_timer_disable_ocmp
0001e5de l     F .text	0000000a nrf_rtc_disable_ocmp
0001e5e8 l     F .text	00000054 hal_timer_read_bsptimer
0001e63c l     F .text	00000076 hal_timer_chk_queue
0001e6b2 l     F .text	00000034 hal_rtc_timer_irq_handler
0002c8b4 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 hal_watchdog.c
0001ea1c l     F .text	0000000e nrf52_hal_wdt_default_handler
0001ea2c l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001eae8 l     F .text	00000030 nrf52_periph_create_timers
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 endian.c
00000000 l    df *ABS*	00000000 creator.c
0001ec40 l     F .text	00000050 config_device
200033e4 l     O .bss	00000014 adc_1_itf_temp_stub
200033f8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001ecec l     F .text	00000004 temp_stub_close
0001ecf0 l     F .text	0000001c temp_stub_sensor_get_config
0001ed0c l     F .text	00000026 temp_stub_open
0001ede8 l     F .text	0000007c temp_stub_sensor_read
0002c8e8 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 ble_ll.c
0001ee96 l     F .text	00000020 ble_ll_flush_pkt_queue
0001eeec l     F .text	0000001c ble_ll_hw_err_timer_cb
0001ef08 l     F .text	0000000a ble_ll_event_comp_pkts
0001ef12 l     F .text	00000008 ble_ll_event_dbuf_overflow
0001ef1c l     F .text	0000006c ble_ll_tx_pkt_in
0001ef88 l     F .text	00000008 ble_ll_event_tx_pkt
0001ef90 l     F .text	00000084 ble_ll_rx_pkt_in
0001f014 l     F .text	00000008 ble_ll_event_rx_pkt
0001f01c l     F .text	00000020 ble_ll_seed_prng
200034b8 l     O .bss	00000180 g_ble_ll_stack
0002c930 l     O .text	00000008 g_ble_ll_pdu_header_tx_time
00000000 l    df *ABS*	00000000 ble_ll_adv.c
0001f680 l     F .text	0000001a ble_ll_adv_first_chan
0001f69a l     F .text	0000001a ble_ll_adv_final_chan
0001f6b4 l     F .text	00000004 instance_configured
0001f6b8 l     F .text	000000ac ble_ll_adv_rpa_update
0001f764 l     F .text	0000002c ble_ll_adv_scheduled
0001f790 l     F .text	00000054 ble_ll_adv_set_sched
0001f928 l     F .text	000000ec ble_ll_adv_tx_start_cb
0001f7e4 l     F .text	000000f4 ble_ll_adv_sm_start
0001f8d8 l     F .text	00000050 ble_ll_adv_tx_done
0001fa14 l     F .text	000000a2 ble_ll_adv_legacy_pdu_make
0001fab6 l     F .text	00000052 ble_ll_adv_scan_rsp_legacy_pdu_make
0001fb08 l     F .text	00000024 ble_ll_adv_drop_event
0001fb2c l     F .text	0000005e ble_ll_adv_update_adv_scan_rsp_data
0001fb8c l     F .text	0000007c ble_ll_adv_sm_stop
0001fc08 l     F .text	00000060 ble_ll_adv_update_data_mbuf
0001fc68 l     F .text	0000004c ble_ll_adv_already_connected
0001fcb4 l     F .text	00000150 ble_ll_adv_rx_req
0001fe04 l     F .text	000000fc ble_ll_adv_conn_req_rxd
0001ff00 l     F .text	00000026 ble_ll_adv_sm_stop_timeout
0001ff28 l     F .text	00000058 ble_ll_adv_reschedule_event
0001ff80 l     F .text	00000038 ble_ll_adv_sm_init
0002010a l     F .text	0000000a ble_ll_adv_event_done
0001ffe4 l     F .text	000000f4 ble_ll_adv_done
000200d8 l     F .text	00000032 ble_ll_adv_make_done
00000000 l    df *ABS*	00000000 ble_ll_conn.c
0002073c l     F .text	0000001a ble_ll_conn_is_empty_pdu
00020756 l     F .text	0000004c ble_ll_conn_calc_dci_csa1
000207a2 l     F .text	0000000a ble_ll_conn_connect_ind_txend_to_init
000207ac l     F .text	0000000a ble_ll_conn_connect_ind_txend_to_standby
000207b8 l     F .text	00000028 ble_ll_conn_current_sm_over
000207e0 l     F .text	00000010 ble_ll_conn_rxend_unencrypt
000207f0 l     F .text	00000010 ble_ll_conn_txend_encrypt
00020800 l     F .text	00000008 ble_ll_conn_wait_txend
00020808 l     F .text	00000020 ble_ll_init_get_conn_comp_ev
00020828 l     F .text	00000032 ble_ll_conn_start_rx_encrypt
0002085a l     F .text	00000010 ble_ll_conn_start_rx_unencrypt
0002086a l     F .text	00000018 ble_ll_conn_continue_rx_encrypt
00020882 l     F .text	00000020 ble_ll_conn_adjust_pyld_len
000208a2 l     F .text	00000030 ble_ll_update_max_tx_octets_phy_mode
000208d4 l     F .text	00000040 ble_ll_conn_get_next_sched_time
00020914 l     F .text	0000040c ble_ll_conn_tx_data_pdu
00020d20 l     F .text	00000118 ble_ll_conn_event_start_cb
00020e38 l     F .text	00000070 ble_ll_conn_master_common_init
00020ea8 l     F .text	00000036 ble_ll_conn_calc_itvl_ticks
00020ede l     F .text	0000006e ble_ll_conn_can_send_next_pdu
00020f4c l     F .text	0000006c ble_ll_conn_chk_csm_flags
00020fb8 l     F .text	000000a0 ble_ll_conn_connect_ind_tx_pducb
00021058 l     F .text	0000010c ble_ll_conn_is_peer_adv
00021164 l     F .text	000000c4 ble_ll_conn_connect_ind_prepare
000212b0 l     F .text	00000268 ble_ll_conn_next_event
00021518 l     F .text	00000108 ble_ll_conn_created
00021620 l     F .text	00000016 ble_ll_conn_set_csa
0002195c l     F .text	00000118 ble_ll_conn_event_end
00000000 l    df *ABS*	00000000 ble_ll_conn_hci.c
000226ec l     F .text	0000002e ble_ll_conn_hci_chk_scan_params
0002271c l     F .text	00000028 ble_ll_init_alloc_conn_comp_ev
0002279a l     F .text	0000007c ble_ll_conn_process_conn_params
00022940 l     F .text	0000002c ble_ll_conn_hci_cancel_conn_complete_event
20003638 l     O .bss	00000004 g_ble_ll_last_num_comp_pkt_evt
00000000 l    df *ABS*	00000000 ble_ll_ctrl.c
00023240 l     F .text	00000038 ble_ll_ctrl_enc_allowed_pdu
00023278 l     F .text	00000020 ble_ll_ctrl_rx_start_enc_req
00023298 l     F .text	0000001a ble_ll_ctrl_rx_pause_enc_req
000232b2 l     F .text	00000020 ble_ll_ctrl_rx_pause_enc_rsp
000232d2 l     F .text	0000000c ble_ll_ctrl_proc_rsp_timer_cb
000232e0 l     F .text	00000028 ble_ll_ctrl_start_rsp_timer
00023308 l     F .text	00000114 ble_ll_ctrl_conn_upd_make
0002341c l     F .text	00000026 ble_ll_ctrl_version_ind_make
00023442 l     F .text	00000028 ble_ll_ctrl_datalen_upd_make
0002346a l     F .text	000000c2 ble_ll_ctrl_conn_param_pdu_make
0002352c l     F .text	00000060 ble_ll_ctrl_rx_feature_req
0002358c l     F .text	00000044 ble_ll_ctrl_chanmap_req_make
000235d0 l     F .text	0000004c ble_ll_ctrl_enc_req_make
0002361c l     F .text	000000e0 ble_ll_ctrl_proc_init
000236fc l     F .text	00000088 ble_ll_ctrl_rx_conn_update
00023784 l     F .text	0000004c ble_ll_ctrl_rx_chanmap_req
000237d0 l     F .text	0000006e ble_ll_ctrl_len_proc
0002383e l     F .text	0000007e ble_ll_ctrl_rx_enc_req
000238ce l     F .text	0000003c ble_ll_ctrl_rx_enc_rsp
000239c2 l     F .text	00000164 ble_ll_ctrl_conn_param_pdu_proc
00023b26 l     F .text	00000034 ble_ll_ctrl_rx_conn_param_rsp
00023cd0 l     F .text	000000cc ble_ll_ctrl_proc_unk_rsp
00023d9c l     F .text	00000060 ble_ll_ctrl_rx_feature_rsp
00023dfc l     F .text	00000060 ble_ll_ctrl_rx_version_ind
00023e5c l     F .text	0000004c ble_ll_ctrl_rx_start_enc_rsp
00023ea8 l     F .text	0000000a ble_ll_ctrl_rx_ping_rsp
00023eb2 l     F .text	00000068 ble_ll_ctrl_rx_conn_param_req
00023f1a l     F .text	0000007c ble_ll_ctrl_rx_reject_ind
00000000 l    df *ABS*	00000000 ble_ll_hci.c
00024436 l     F .text	00000004 ble_ll_hci_get_num_cmd_pkts
0002443c l     F .text	00000018 ble_ll_hci_rd_bd_addr
00024454 l     F .text	00000014 ble_ll_hci_set_le_event_mask
00024468 l     F .text	0000004a ble_ll_hci_le_cmd_send_cmd_status
000244b2 l     F .text	0000002e ble_ll_hci_rd_local_version
000244e0 l     F .text	00000020 ble_ll_hci_le_read_bufsize
00024500 l     F .text	00000024 ble_ll_hci_le_rd_sugg_data_len
00024524 l     F .text	00000034 ble_ll_hci_le_rd_max_data_len
00024558 l     F .text	00000030 ble_ll_read_rf_path_compensation
00024588 l     F .text	00000044 ble_ll_hci_rd_local_supp_cmd
000245cc l     F .text	00000012 ble_ll_hci_rd_local_supp_feat
000245de l     F .text	00000056 ble_ll_hci_info_params_cmd_proc
00024634 l     F .text	00000036 ble_ll_hci_link_ctrl_cmd_proc
0002466c l     F .text	00000078 ble_ll_hci_ctlr_bb_cmd_proc
000246e4 l     F .text	00000020 ble_ll_hci_status_params_cmd_proc
00024704 l     F .text	00000020 ble_ll_hci_le_read_local_features
00024724 l     F .text	00000046 ble_ll_hci_le_encrypt
0002476a l     F .text	00000010 ble_ll_hci_le_rand
0002477a l     F .text	0000001c ble_ll_hci_le_read_supp_states
00024798 l     F .text	0000004c ble_ll_hci_le_wr_sugg_data_len
000247e4 l     F .text	00000022 ble_ll_read_tx_power
00024808 l     F .text	00000064 ble_ll_write_rf_path_compensation
0002486c l     F .text	00000408 ble_ll_hci_le_cmd_proc
00024c94 l     F .text	000000e2 ble_ll_hci_cmd_proc
2000363c l     O .bss	00000010 g_ble_ll_hci_cmd_ev
2000364c l     O .bss	00000008 g_ble_ll_hci_event_mask
20003654 l     O .bss	00000008 g_ble_ll_hci_event_mask2
2000365c l     O .bss	00000008 g_ble_ll_hci_le_event_mask
20003664 l     O .bss	00000002 rx_path_pwr_compensation
20003666 l     O .bss	00000002 tx_path_pwr_compensation
00000000 l    df *ABS*	00000000 ble_ll_hci_ev.c
00000000 l    df *ABS*	00000000 ble_ll_rand.c
00000000 l    df *ABS*	00000000 ble_ll_resolv.c
000252a4 l     F .text	0000002c ble_ll_is_controller_busy
000252d0 l     F .text	00000020 ble_ll_resolv_list_chg_allowed
000252f0 l     F .text	00000040 ble_ll_is_on_resolv_list
00025330 l     F .text	00000070 ble_ll_resolv_gen_priv_addr
000253a0 l     F .text	00000054 ble_ll_resolv_rpa_timer_cb
00000000 l    df *ABS*	00000000 ble_ll_scan.c
00025868 l     F .text	00000022 ble_ll_get_chan_to_scan
0002588a l     F .text	0000000e ble_ll_scan_get_next_adv_prim_chan
00025898 l     F .text	00000034 ble_ll_scan_rfclk_chk_stop
000258cc l     F .text	00000070 ble_ll_scan_req_backoff
0002593c l     F .text	00000028 ble_ll_scan_req_tx_pducb
00025964 l     F .text	00000074 ble_ll_scan_have_rxd_scan_rsp
000259d8 l     F .text	00000054 ble_ll_scan_add_scan_rsp_adv
00025a2c l     F .text	00000058 ble_ll_scan_dup_update_legacy
00025a84 l     F .text	0000002e ble_ll_scan_refresh_nrpa
00025ab4 l     F .text	00000098 ble_ll_scan_req_pdu_prepare
00025b56 l     F .text	00000056 ble_ll_scan_get_current_scan_win
00025bac l     F .text	00000064 ble_ll_scan_window_chk
00025c10 l     F .text	00000100 ble_ll_scan_start
00025d10 l     F .text	0000007c ble_ll_scan_chk_filter_policy
00025d8c l     F .text	000000f8 ble_ll_scan_dup_check_legacy
00025e84 l     F .text	000000c4 ble_ll_hci_send_adv_report
00025f48 l     F .text	000000ca ble_ll_scan_send_adv_report
00026014 l     F .text	000000a0 ble_ll_scan_sm_start
000260b4 l     F .text	00000078 ble_ll_scan_common_init
0002612c l     F .text	0000018c ble_ll_scan_event_proc
0002642c l     F .text	00000024 ble_ll_scan_interrupted_event_cb
20003668 l     O .bss	00000001 g_ble_ll_scan_num_rsp_advs
2000366c l     O .bss	00000014 g_ble_ll_scan_params
20003680 l     O .bss	00000084 g_ble_ll_scan_sm
20003704 l     O .bss	00000008 g_scan_dup_list
2000370c l     O .bss	00000080 g_scan_dup_mem
2000378c l     O .bss	0000001c g_scan_dup_pool
00000000 l    df *ABS*	00000000 ble_ll_sched.c
00026bfc l     F .text	00000030 ble_ll_sched_is_overlap
00026c2c l     F .text	00000024 ble_ll_sched_insert_if_empty
00026c50 l     F .text	0000003c ble_ll_sched_conn_overlap
00026c8c l     F .text	00000024 ble_ll_sched_overlaps_current
00026cb0 l     F .text	0000006c ble_ll_sched_execute_item
00026d1c l     F .text	00000040 ble_ll_sched_run
00000000 l    df *ABS*	00000000 ble_ll_utils.c
0002c994 l     O .text	00000010 g_ble_sca_ppm_tbl
00000000 l    df *ABS*	00000000 ble_ll_whitelist.c
00027684 l     F .text	0000001c ble_ll_whitelist_chg_allowed
000276a0 l     F .text	0000003c ble_ll_whitelist_search
00000000 l    df *ABS*	00000000 ble_ll_xcvr.c
00000000 l    df *ABS*	00000000 ble_hw.c
00027910 l     F .text	00000040 ble_rng_isr
200037a8 l     O .bss	00000001 g_ble_hw_whitelist_mask
00000000 l    df *ABS*	00000000 ble_phy.c
00027c3c l     F .text	00000018 ble_phy_apply_errata_102_106_107
00027c54 l     F .text	00000020 nrf_wait_disabled
00027c74 l     F .text	000000ac ble_phy_set_start_time
00027d20 l     F .text	00000004 ble_phy_get_ccm_datarate
00027d24 l     F .text	00000100 ble_phy_rx_xcvr_setup
00027e24 l     F .text	00000058 ble_phy_set_start_now
00027f8c l     F .text	000000c8 ble_phy_tx_end_isr
000285bc l     F .text	00000080 ble_phy_isr
00028370 l     F .text	00000130 ble_phy_rx_start_isr
000284a0 l     F .text	0000011c ble_phy_rx_end_isr
200037ac l     O .bss	00000104 g_ble_phy_enc_buf
200038b0 l     O .bss	00000104 g_ble_phy_rx_buf
200039b4 l     O .bss	00000104 g_ble_phy_tx_buf
0002c9a4 l     O .text	00000028 g_ble_phy_chan_freq
0002c9cc l     O .text	00000004 g_ble_phy_t_rxaddrdelay
0002c9d0 l     O .text	00000004 g_ble_phy_t_rxenddelay
0002c9d4 l     O .text	00000004 g_ble_phy_t_txdelay
0002c9d8 l     O .text	00000004 g_ble_phy_t_txenddelay
00000000 l    df *ABS*	00000000 ble_store_config.c
00028894 l     F .text	00000094 ble_store_config_find_sec
00028928 l     F .text	00000038 ble_store_config_read_peer_sec
00028960 l     F .text	00000038 ble_store_config_read_our_sec
00028998 l     F .text	00000084 ble_store_config_find_cccd
00028a1c l     F .text	00000028 ble_store_config_read_cccd
00028a44 l     F .text	0000002e ble_store_config_print_key_sec
00028ab2 l     F .text	00000046 ble_store_config_print_value_sec
00028af8 l     F .text	00000058 ble_store_config_write_peer_sec
00028b50 l     F .text	00000058 ble_store_config_write_our_sec
00028ba8 l     F .text	0000004c ble_store_config_write_cccd
00028c1e l     F .text	00000022 ble_store_config_delete_obj
00028c40 l     F .text	00000024 ble_store_config_delete_sec
00028c64 l     F .text	00000024 ble_store_config_delete_peer_sec
00028c88 l     F .text	00000024 ble_store_config_delete_our_sec
00028cac l     F .text	00000034 ble_store_config_delete_cccd
00000000 l    df *ABS*	00000000 ble_store_config_conf.c
00028d60 l     F .text	00000024 ble_store_config_serialize_arr
00028d84 l     F .text	0000002c ble_store_config_persist_sec_set
00028db0 l     F .text	00000078 ble_store_config_conf_export
00028e28 l     F .text	0000001c ble_store_config_deserialize_arr
00028e44 l     F .text	00000080 ble_store_config_conf_set
20000204 l     O .data	00000018 ble_store_config_conf_handler
00000000 l    df *ABS*	00000000 config.c
00028f60 l     F .text	00000008 conf_ev_fn_load
20003ab8 l     O .bss	0000000c conf_mtx
2000021c l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 config_init.c
00000000 l    df *ABS*	00000000 config_store.c
000290e6 l     F .text	0000003c conf_dup_check_cb
00029122 l     F .text	0000001c conf_load_cb
20003ac4 l     O .bss	00000001 conf_loaded
20003ac5 l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 flash_map.c
00029228 l     F .text	00000078 flash_map_read_mfg
20003ac8 l     O .bss	00000078 mfg_areas.9054
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0002937c l     F .text	00000094 mfg_seek_next_aux
00029410 l     F .text	00000070 mfg_read_mmr
00029480 l     F .text	00000054 mfg_read_next_mmr
000294d4 l     F .text	0000003c mfg_open_flash_area
00029510 l     F .text	00000044 mfg_read_tlv_body
000295dc l     F .text	0000004e mfg_read_mmr_refs
20003b40 l     O .bss	00000001 mfg_initialized
20003b44 l     O .bss	00000018 mfg_mmrs
20003b5c l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 base64.c
0002962c l     F .text	00000020 pos
0002964c l     F .text	0000004c token_decode
0002ca78 l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 hal_flash.c
0002977c l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_clock.c
20003b60 l     O .bss	00000001 nrf52_clock_hfxo_refcnt
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 ble_ll_supp_cmd.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 ble_hs_cfg.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
0000f950 g     F .text	0000000a oc_random_rand
0000ad38 g     F .text	0000008a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h014fe90435385abdE
0001162c g     F .text	00000058 os_mbuf_trim_front
200044c0 g     O .bss	000000f0 ble_store_config_peer_secs
00017e40 g     F .text	00000008 ble_hs_hci_cmd_build_le_set_event_mask
00022fa2 g     F .text	0000004e ble_ll_conn_hci_rd_chan_map
0001bbe0 g     F .text	0000004a ble_att_clt_tx_read_group_type
000174e0 g     F .text	0000001c ble_hs_conn_find_by_idx
0000e5d8 g     F .text	00000054 console_buffer
00029818 g     F .text	0000003c nrf52_clock_hfxo_request
000184c4 g     F .text	000000a0 ble_hs_hci_evt_acl_process
0000b3f0 g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0eeec053ec2ee72cE
00020114 g     F .text	0000003c ble_ll_adv_rpa_timeout
200042ac g     O .bss	00000001 g_ble_ll_sched_offset_ticks
0001bc2a g     F .text	00000058 ble_att_clt_rx_read_group_type
0001054c g     F .text	00000030 os_arch_start
20003d4c g     O .bss	00000000 ble_hs_stats
20004748 g       .bss	00000000 __HeapBase
20003d34 g     O .bss	00000008 g_os_task_list
000106c0 g     F .text	00000078 os_idle_task
0000c60a g     F .text	00000072 .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E
00008b50 g     F .text	00000018 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17haa0bb50d5ceeead8E
0001bb94 g     F .text	00000030 ble_att_clt_tx_read_blob
0000b55a g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17h77e41a362c8b7a28E
000223cc g     F .text	00000044 ble_ll_conn_set_global_chanmap
00027854 g     F .text	00000014 ble_ll_xcvr_rfclk_stop
20003d44 g     O .bss	00000006 __rand48_seed
0000c528 g     F .text	00000022 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17ha74613409c771b8aE
00000000 g       .svc_table	00000000 SVC_Count
00008164  w    F .text	00000002 TIMER2_IRQHandler
00012c00 g     F .text	00000018 fmemopen_w
0001d8f4 g     F .text	00000048 mem_split_frag
0001a738 g     F .text	00000034 ble_sm_proc_can_advance
000110ec g     F .text	0000005a os_mbuf_copydata
20003d18 g     O .bss	00000008 g_os_mempool_list
000108d0 g     F .text	0000001a os_callout_init
0000897c g     F .text	00000016 _ZN6mynewt3sys7console8printint17h732f7e3d3f1828c1E
000108ec g     F .text	0000003c os_callout_stop
0002830c g     F .text	0000001c ble_phy_stop_usec_timer
0001406c g     F .text	0000004a ble_gap_notify_rx_event
00008164  w    F .text	00000002 RTC0_IRQHandler
00027384 g     F .text	0000006c ble_ll_sched_adv_resched_pdu
00020600 g     F .text	00000038 ble_ll_adv_rx_isr_start
0002872c g     F .text	00000100 ble_phy_tx
00023bb4 g     F .text	00000046 ble_ll_ctrl_proc_start
00012394 g     F .text	00000050 add_malloc_block
200042d0 g     O .bss	00000040 g_ble_ll_whitelist
00026768 g     F .text	000001d8 ble_ll_scan_rx_pkt_in
000156c6 g     F .text	0000002c ble_gattc_rx_err
0000a6ae g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h92a997fe3feebcc4E
0001769c g     F .text	00000002 ble_hs_flow_connection_broken
000089ec g     F .text	0000001e _ZN4core3mem4swap17hd6a0921c9f9f5238E
00023018 g     F .text	00000074 ble_ll_conn_hci_set_data_len
000256f4 g     F .text	0000002c ble_ll_resolv_set_local_rpa
0001f428 g     F .text	00000078 ble_ll_reset
00010c9e g     F .text	00000068 os_eventq_put
00018648 g     F .text	0000001c ble_hs_id_set_pub
00025480 g     F .text	000000c0 ble_ll_resolv_list_add
200000d8 g       .data	00000000 __data_start__
0001b45e g     F .text	0000001e ble_store_key_from_value_cccd
000114b0 g     F .text	00000062 os_mbuf_extend
00012c50 g     F .text	0000001c json_helper_close_array
0000a4c6 g     F .text	0000002c _ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E
00015876 g     F .text	00000024 ble_gattc_rx_read_mult_rsp
000298a0 g     F .text	00000020 strtok_r
0002c880 g     O .text	00000018 nrf52k_flash_dev
000088e4 g     F .text	00000036 _ZN6mynewt3sys7console5print17h0f65bc3b0e739871E
000195d8 g     F .text	0000003c ble_l2cap_sig_timer
20003d4c g     O .bss	0000001c ble_hs_hci_ev_pool
00012b04 g     F .text	00000024 printf
000102cc g     F .text	00000068 sensor_read
0002c254 g     O .text	00000004 stdout
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
0000c67c g     F .text	00000072 .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE
0001b4a6 g     F .text	00000074 ble_store_iterate
20003d7c g     O .bss	0000001c ble_l2cap_chan_pool
0000e85c g     F .text	0000004c json_write_mbuf
0002314a g     F .text	0000004e ble_ll_conn_hci_le_ltk_neg_reply
000104bc g     F .text	0000008c os_arch_os_init
00008156  w    F .text	00000002 HardFault_Handler
0000a4f2 g     F .text	00000072 .hidden _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE
0001cea8 g     F .text	000000a8 ble_att_svr_rx_read_type
0001e6f8 g     F .text	00000068 hal_timer_init
00029566 g     F .text	0000001a mfg_seek_next_with_type
00016670 g     F .text	00000068 ble_gatts_bonding_established
0001d088 g     F .text	000000c2 ble_att_svr_rx_read_group_type
00015948 g     F .text	00000034 ble_gattc_init
00010a70 g     F .text	00000008 os_cputime_timer_stop
0002869c g     F .text	00000040 ble_phy_rx_set_start_time
200042ad g     O .bss	00000001 g_ble_ll_sched_xtal_ticks
0000cba8 g     F .text	00000314 _ZN4core3str16slice_error_fail17heb8f3fc076617590E
0001057c g     F .text	0000005c os_arch_os_start
0000b5be g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17h963f5691124f9a6eE
00008a1c g     F .text	0000008e _ZN4core6result13unwrap_failed17hcd10af70e9ab946bE
0001727c g     F .text	00000034 ble_hs_adv_find_field
00013728 g     F .text	00000010 ble_gap_master_in_progress
0001d6a8 g     F .text	00000024 ble_hci_trans_hs_cmd_tx
000172b0 g     F .text	0000002a ble_hs_atomic_conn_delete
0000e02a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE
0001d474 g     F .text	00000048 ble_att_svr_init
0000f95a g     F .text	0000002c oc_new_string
0000fa64 g     F .text	00000014 __wrap_coap_receive
0000a34c g     F .text	00000004 _ZN4core3ptr4null17h8bbb43e46b26b74aE
000167b4 g     F .text	00000014 ble_gatts_init
0000bbaa g     F .text	000002b6 _ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E
0001f3f4 g     F .text	0000000c ble_ll_state_get
0001a722 g     F .text	00000016 ble_sm_ioact_state
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
0002645c g     F .text	00000294 ble_ll_scan_rx_isr_end
0001b438 g     F .text	0000000e ble_store_read_cccd
000156f2 g     F .text	00000024 ble_gattc_rx_mtu
0001228e g     F .text	0000000c SysTick_Handler
00019648 g     F .text	0000002e ble_l2cap_sig_tx
00024f4a g     F .text	0000005c ble_ll_hci_ev_conn_update
00008164  w    F .text	00000002 GPIOTE_IRQHandler
000251bc g     F .text	0000007c ble_ll_rand_data_get
0001cdc6 g     F .text	0000006a ble_att_svr_rx_find_info
0000b4c4 g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17h096de7e29d61d94fE
0001b378 g     F .text	00000040 ble_store_write
0000a188 g     F .text	00000054 _ZN4core3ptr23swap_nonoverlapping_one17h34abe6b6202b2c58E
0000f924 g     F .text	00000024 oc_init
0001d04c g     F .text	0000003c ble_att_svr_rx_read_mult
00010134 g     F .text	00000014 sensor_mgr_find_next_bydevname
00019580 g     F .text	00000020 ble_l2cap_sig_create_chan
00027af4 g     F .text	00000048 ble_hw_rng_init
0001f22c g     F .text	00000028 ble_ll_rx_pdu_in
00017e86 g     F .text	00000008 ble_hs_hci_cmd_build_le_start_encrypt
000117d6 g     F .text	00000026 os_memblock_put
00008164  w    F .text	00000002 PWM1_IRQHandler
00011906 g     F .text	00000028 os_msys_get_pkthdr
00017e68 g     F .text	0000000e ble_hs_hci_cmd_build_le_lt_key_req_neg_reply
2000473c g     O .bss	00000004 flash_map
000124de g     F .text	00000038 memmove
000089d8 g     F .text	00000014 .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17hce9b57fe2054131fE
000257c8 g     F .text	00000050 ble_ll_resolv_set_rpa_tmo
0001bb86 g     F .text	0000000e ble_att_clt_rx_read
00017e28 g     F .text	00000008 ble_hs_hci_cmd_build_set_event_mask
000168fc g     F .text	00000008 ble_hs_lock
00025614 g     F .text	0000002c ble_ll_resolv_local_addr_rd
00009654 g     F .text	0000002e _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h6a84f0d1d4d912f5E
0001b360 g     F .text	00000018 ble_store_overflow_event
00012248 g     F .text	00000046 PendSV_Handler
00011710 g     F .text	00000036 os_mempool_clear
00019052 g     F .text	00000014 ble_l2cap_remove_rx
00008154  w    F .text	00000002 NMI_Handler
00016324 g     F .text	0000005c ble_gatts_connection_broken
0002cad4 g       .ARM.exidx	00000000 __exidx_end
00027b94 g     F .text	0000000c ble_hw_resolv_list_clear
00008020 g       .text	00000000 __isr_vector_start
00017e48 g     F .text	00000008 ble_hs_hci_cmd_build_le_set_adv_enable
00026450 g     F .text	0000000a ble_ll_scan_interrupted
00028ee0 g     F .text	0000001c ble_store_config_persist_peer_secs
00022ea0 g     F .text	0000008e ble_ll_conn_hci_disconnect_cmd
00012bd0 g     F .text	0000002e memfile_write
00010434 g     F .text	00000014 os_arch_ctx_sw
00026b4c g     F .text	00000008 ble_ll_scan_get_pdu_data
00009a7a g     F .text	000000aa .hidden _ZN3app11app_network21aggregate_sensor_data17hab11c32b63abf594E
000081d0 g     F .text	0000002c hal_system_reset
00025818 g     F .text	00000034 ble_ll_resolv_init
000090cc g     F .text	0000021e _ZN6mynewt4Strn3len17h8ed95dfae8539c50E
0001075c g     F .text	00000070 os_init_idle_task
0001ad3e g     F .text	00000038 ble_sm_timer
2000019c g       .data	00000000 __aeabi_unwind_cpp_pr0
00011c8c g     F .text	0000000c os_sched_set_current_task
0000e100 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb07848a2f9c4477cE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
00018fe8 g     F .text	0000002c ble_l2cap_parse_hdr
0002cad4 g       .ARM.exidx	00000000 __etext
00013776 g     F .text	0000002a ble_gap_rx_l2cap_update_req
0002c938 g     O .text	0000001a g_ble_ll_ctrl_pkt_lengths
0001f164 g     F .text	0000004c ble_ll_set_random_addr
00018a50 g     F .text	00000038 ble_hs_pvcy_set_mode
00008838 g     F .text	0000000e _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h00bf1b57699326cfE
000156bc g     F .text	0000000a ble_gattc_indicate
0000a0f0 g     F .text	00000056 _ZN4core6option15Option$LT$T$GT$6expect17h0fd15c4bf762390eE
000278d0 g     F .text	00000040 ble_ll_xcvr_rfclk_timer_start
00008a0a g     F .text	00000012 _ZN4core3mem7size_of17h5c195dec1f846941E
0002164a g     F .text	00000002 ble_ll_conn_init_wfr_timer_exp
0000aef0 g     F .text	0000004c _ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hdbc3bda942320fdcE
00016bc4 g     F .text	000001c0 ble_hs_init
00027c10 g     F .text	00000004 ble_hw_resolv_list_size
00013ec4 g     F .text	000000e0 ble_gap_update_params
00022a70 g     F .text	00000032 ble_ll_auth_pyld_tmo_event_send
000118e8 g     F .text	0000001e os_msys_get
00008164  w    F .text	00000002 RADIO_IRQHandler
0000d9d6 g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E
000173cc g     F .text	00000048 ble_hs_conn_free
000201ac g     F .text	0000010c ble_ll_adv_set_adv_params
00011512 g     F .text	00000102 os_mbuf_pullup
00015568 g     F .text	00000056 ble_gattc_timer
0000e1d6 g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u64$GT$3fmt17hd9c17bd8ef0ff383E
00015752 g     F .text	0000001e ble_gattc_rx_find_type_value_hinfo
00022adc g     F .text	00000170 ble_ll_conn_create
20003dc0 g     O .bss	00000000 ble_ll_stats
00011978 g     F .text	000000b8 os_mutex_release
0001883c g     F .text	00000024 ble_hs_mbuf_pullup_base
00015920 g     F .text	0000001a ble_gattc_rx_indicate_rsp
00011b5c g     F .text	00000024 os_sanity_check_register
200042b0 g     O .bss	00000018 g_ble_ll_sched_timer
2000022c g       .bssnz	00000000 __bssnz_start__
20004734 g     O .bss	00000004 conf_load_srcs
000206cc g     F .text	00000030 ble_ll_adv_reset
000140b6 g     F .text	0000003e ble_gap_notify_tx_event
20003b70 g     O .bss	0000004c coap_json_encoder
20004358 g     O .bss	00000034 g_ble_phy_data
0001d810 g     F .text	00000004 ble_hci_trans_reset
000113e2 g     F .text	00000088 os_mbuf_copyinto
000174fc g     F .text	0000000e ble_hs_conn_exists
00023b72 g     F .text	00000042 ble_ll_ctrl_terminate_start
00008164  w    F .text	00000002 PDM_IRQHandler
0000a496 g     F .text	0000001c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE
0000a42a g     F .text	00000012 _ZN4core3mem8align_of17h58768cca995720e6E
000138e6 g     F .text	0000002a ble_gap_adv_set_fields
0000c29a g     F .text	0000001a .hidden _ZN4core3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hac57f825172bc7a7E
00029580 g     F .text	0000000a mfg_read_tlv_flash_area
0000e7f0 g     F .text	0000000c console_get_ticks
0001ac0e g     F .text	00000010 ble_sm_our_pair_rand
00028220 g     F .text	0000004e ble_phy_txpower_round
00012d86 g     F .text	00000044 get_geolocation_data
000206fc g     F .text	00000020 ble_ll_adv_enabled
00017a50 g     F .text	0000000c ble_hs_hci_set_hci_version
0000ec70 g     F .text	0000009c json_encode_object_entry_ext
0000c572 g     F .text	00000026 _ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h80b6c30939e62171E
00011324 g     F .text	000000be os_mbuf_prepend
0001f254 g     F .text	00000038 ble_ll_acl_data_in
200001dc g     O .data	00000028 ble_hs_cfg
0001d1f6 g     F .text	00000016 ble_att_svr_prep_clear
0001eb20 g     F .text	00000002 sensor_dev_create
000158f4 g     F .text	0000002c ble_gattc_rx_exec_write_rsp
00027abc g     F .text	00000038 ble_hw_encrypt_block
00009504 g     F .text	00000150 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E
0000899c g     F .text	0000003c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h3c364589ae20b9a9E
20004160 g     O .bss	000000d4 g_ble_ll_resolv_list
0001ab34 g     F .text	000000da ble_sm_ltk_req_rx
0000c6ee g     F .text	0000000e _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h961716e0b7c83112E
0000b708 g     F .text	00000054 .hidden _ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17h7d74cd408b535691E
000117fc g     F .text	00000010 os_mempool_module_init
00012cd4 g     F .text	00000030 json_helper_set_float
00008164  w    F .text	00000002 TEMP_IRQHandler
0001045a g     F .text	0000000a os_arch_in_critical
0001b5a8 g     F .text	0000000e ble_uuid_u16
0000c716 g     F .text	0000001e _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17heb29fdb01680adabE
00008164  w    F .text	00000002 QDEC_IRQHandler
0002164c g     F .text	00000028 ble_ll_conn_auth_pyld_timer_start
0000ee90 g     F .text	00000070 get_hardware_id
0001ed40 g     F .text	0000007c temp_stub_init
0000c840 g     F .text	00000008 _ZN4core5panic8Location4file17h94cc6af18de736c4E
00008164  w    F .text	00000002 TIMER3_IRQHandler
000087d4 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17hda19e15c4ec13e31E
000097e0 g     F .text	00000042 _ZN4core3ptr19swap_nonoverlapping17h2c69b763be82cdd6E
00027b70 g     F .text	00000024 ble_hw_rng_stop
0001d4bc g     F .text	00000002 ble_hs_dbg_event_disp
0001f0e8 g     F .text	0000007c ble_ll_is_valid_random_addr
00021f8c g     F .text	0000012a ble_ll_conn_rx_data_pdu
0002168e g     F .text	00000064 ble_ll_conn_master_init
00010428 g     F .text	0000000a timer_handler
0000d00a g     F .text	000000ea _ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E
00010bd8 g     F .text	00000020 os_dev_lookup
00011c98 g     F .text	00000090 os_sched_sleep
0000ec54 g     F .text	0000001c json_rep_end_root_object
0000a146 g     F .text	00000042 _ZN4core3ptr19swap_nonoverlapping17ha620648bc0a20261E
0000e730 g     F .text	00000004 semihosting_console_init
00021bc0 g     F .text	00000028 ble_ll_init_rx_isr_start
0000eab8 g     F .text	00000080 prepare_sensor_post
000124c4 g     F .text	0000001a memcpy
00016880 g     F .text	0000000c ble_hs_evq_get
00026bb8 g     F .text	00000044 ble_ll_scan_init
000174d8 g     F .text	00000008 ble_hs_conn_find_assert
00020684 g     F .text	0000002e ble_ll_adv_get_local_rpa
00028ff4 g     F .text	00000034 conf_parse_name
00025640 g     F .text	0000002e ble_ll_resolve_set_priv_mode
0001ea4c g     F .text	00000078 hal_watchdog_init
0002542c g     F .text	00000014 ble_ll_resolv_list_read_size
000255a0 g     F .text	00000048 ble_ll_resolv_enable_cmd
00029140 g     F .text	00000054 conf_load
0001d998 g     F .text	000000bc tc_aes128_set_encrypt_key
00027f04 g     F .text	00000088 ble_phy_wfr_enable
000162b0 g     F .text	00000074 ble_gatts_register_svcs
0000c848 g     F .text	00000004 _ZN4core5panic8Location4line17h3ffc63f14d0a6636E
20003bc0 g     O .bss	00000010 coap_json_value
0000da08 g     F .text	00000212 _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE
00026b30 g     F .text	00000008 ble_ll_scan_get_local_rpa
00010a30 g     F .text	0000000c os_cputime_init
20004730 g     O .bss	00000004 conf_handlers
0000acba g     F .text	00000016 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2709466b664fb27cE
0000fdc0 g     F .text	0000001c json_encode_array_finish
0001d2be g     F .text	000000b4 ble_att_svr_rx_exec_write
0001e900 g     F .text	0000002c hal_timer_set_cb
00018698 g     F .text	00000038 ble_hs_id_set_rnd
00023bfa g     F .text	00000030 ble_ll_ctrl_initiate_dle
00027828 g     F .text	0000002c ble_ll_xcvr_rfclk_disable
000299b4 g     F .text	00000000 .hidden __aeabi_uldivmod
0001bda6 g     F .text	00000040 ble_att_clt_tx_indicate
0000a3f4 g     F .text	00000012 _ZN4core3mem7size_of17ha5be24a1917b21b8E
00000020 g       *ABS*	00000000 _imghdr_size
00011c50 g     F .text	00000030 os_sched_ctx_sw_hook
20003b64 g     O .bss	00000004 console_is_midline
00010ec8 g     F .text	00000014 os_mbuf_free
000096fc g     F .text	00000032 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc37ea63e0a33f701E
0000907e g     F .text	0000004e _ZN6mynewt4Strn6as_ptr17hce51ed792e0d4eabE
00014162 g     F .text	00000038 ble_gap_mtu_event
0001bdf0 g     F .text	00000026 ble_att_cmd_prepare
200000e4 g     O .data	00000004 SystemCoreClock
0000df6e g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE
000286dc g     F .text	00000020 ble_phy_restart_rx
20003bf8 g     O .bss	00000034 sensor_mgr
0000a810 g     F .text	00000026 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hd686c3141f50ebdcE
0000a0e2 g     F .text	0000000e _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h4bfa181a78946fa0E
000081b4 g     F .text	0000000c hal_system_init
0001b03c g     F .text	0000001e ble_sm_tx
00018fc4 g     F .text	0000001c ble_l2cap_chan_free
00015854 g     F .text	00000022 ble_gattc_rx_read_blob_rsp
0001ee90 g     F .text	00000002 oc_register_ip6
2000425c g     O .bss	00000050 g_ble_ll_scan_rsp_advs
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001401a g     F .text	00000026 ble_gap_identity_event
00010464 g     F .text	00000040 os_arch_task_stack_init
0000a804 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h1cdb1d96882cb73bE
00022aa2 g     F .text	0000003a ble_ll_disconn_comp_event_send
0001b5b6 g     F .text	0000003e ble_uuid_init_from_att_buf
000123e4 g     F .text	0000006c malloc
0000f948 g     F .text	00000008 oc_clock_time
0000f846 g     F .text	00000024 coap_set_header_uri_path
0000e3b6 g     F .text	00000018 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h33b3bbdbc74b88baE
0001cb90 g     F .text	00000034 ble_att_svr_read_handle
000292e0 g     F .text	00000026 flash_area_read
0000f890 g     F .text	0000000e coap_set_header_observe
00011264 g     F .text	000000c0 os_mbuf_cmpm
0001769e g     F .text	00000002 ble_hs_flow_fill_acl_usrhdr
000105dc g     F .text	0000004c __assert_func
00025440 g     F .text	00000040 ble_ll_resolv_list_find
00016590 g     F .text	000000b8 ble_gatts_rx_indicate_ack
0001b788 g     F .text	00000002 ble_att_inc_tx_stat
00011ddc g     F .text	00000040 os_sched_wakeup_ticks
0000e75c g     F .text	0000004c console_pkg_init
00021ad0 g     F .text	000000f0 ble_ll_init_rx_pkt_in
0000815c  w    F .text	00000002 UsageFault_Handler
0000c374 g     F .text	00000026 _ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcb61da1d9a7f9d5bE
00017eb0 g     F .text	00000008 ble_hs_hci_cmd_build_set_resolv_priv_addr_timeout
00021278 g     F .text	0000001c ble_ll_conn_sm_get
00012b28 g     F .text	0000003a vsnprintf
00009446 g     F .text	000000aa _ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E
00012c88 g     F .text	0000001c json_helper_object_array_end_item
0000ef1c g     F .text	0000001a is_standalone_node
00017ea8 g     F .text	00000008 ble_hs_hci_cmd_build_set_addr_res_en
20003d10 g     O .bss	00000008 g_callout_list
00018b1c g     F .text	00000020 ble_hs_pvcy_add_entry
0000f0ec g     F .text	00000028 oc_send_message
0001b5f4 g     F .text	0000002c ble_uuid_init_from_att_mbuf
00026aa4 g     F .text	00000030 ble_ll_scan_can_chg_whitelist
00029cdc g     F .text	00000004 __aeabi_memcpy
00027b3c g     F .text	00000034 ble_hw_rng_start
00017a44 g     F .text	0000000c ble_hs_hci_set_le_supported_feat
00016648 g     F .text	00000028 ble_gatts_tx_notifications
00015770 g     F .text	0000001e ble_gattc_rx_find_type_value_complete
0000f838 g     F .text	0000000e coap_set_header_accept
00026310 g     F .text	00000064 ble_ll_scan_rx_isr_start
0001f0a2 g     F .text	00000016 ble_ll_chk_txrx_time
20003f68 g     O .bss	00000016 g_ble_ll_conn_params
0000a9b0 g     F .text	00000050 .hidden _ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17haadbdd16ae4cb107E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
000128a0 g     F .text	0000025c tfp_format
0000f490 g     F .text	0000001a coap_init_message
2000fe50 g       *ABS*	00000000 __HeapLimit
20000250 g       .bss	00000000 __bss_start__
00016904 g     F .text	00000008 ble_hs_unlock
000081c0 g     F .text	00000010 hal_debugger_connected
0001b678 g     F .text	00000006 ble_uuid_length
0001bd34 g     F .text	00000026 ble_att_clt_tx_exec_write
0001b9d6 g     F .text	0000004e ble_att_clt_rx_find_info
00008164  w    F .text	00000002 TIMER4_IRQHandler
0000a3aa g     F .text	0000002c _ZN4core10intrinsics19copy_nonoverlapping17h5595299192d6abf2E
0001562a g     F .text	00000092 ble_gattc_indicate_custom
00027950 g     F .text	00000030 ble_hw_get_public_addr
00026374 g     F .text	0000005a ble_ll_scan_adv_decode_addr
000140f4 g     F .text	0000006e ble_gap_subscribe_event
0000c46a g     F .text	00000028 .hidden _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha4f715bf1b969d3eE
0000a3d6 g     F .text	0000001e _ZN4core3mem4swap17hb484fae726ea8945E
0000d0f4 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE
00029a0c g     F .text	000002cc .hidden __udivmoddi4
0001b098 g     F .text	000000a4 ble_sm_lgcy_io_action
0000edc8 g     F .text	0000000c init_server_post
00024de0 g     F .text	00000034 ble_ll_hci_is_event_enabled
0000ef90 g     F .text	000000c0 sensor_network_init
0002041c g     F .text	00000154 ble_ll_adv_set_adv_data
00028188 g     F .text	00000050 ble_phy_encrypt_enable
0000eb38 g     F .text	00000050 json_rep_finalize
00028efc g     F .text	0000003c ble_store_config_persist_cccds
00028214 g     F .text	0000000c ble_phy_set_txend_cb
00027ba0 g     F .text	00000038 ble_hw_resolv_list_add
00025238 g     F .text	0000002c ble_ll_rand_prand_get
00018564 g     F .text	0000000e ble_hs_hci_util_handle_pb_bc_join
00028844 g     F .text	00000010 ble_phy_xcvr_state_get
00017518 g     F .text	000000cc ble_hs_conn_addrs
20003d2c g     O .bss	00000004 g_current_task
00011b80 g     F .text	0000006c os_sanity_run
000282bc g     F .text	0000000c ble_phy_set_rx_pwr_compensation
0000f8a0 g     F .text	0000000c oc_evq_get
00021ee4 g     F .text	0000003c ble_ll_conn_timeout
20003ee4 g     O .bss	00000004 g_ble_ll_cur_adv_sm
00010448 g     F .text	0000000c os_arch_save_sr
000166d8 g     F .text	000000da ble_gatts_bonding_restored
0002540c g     F .text	00000020 ble_ll_resolv_list_clr
000116fc g     F .text	00000014 os_mempool_init
00008860 g     F .text	00000020 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h470504b6f43ee880E
000290c8 g     F .text	0000001c config_pkg_init
00012188 g     F .text	00000038 os_gettimeofday
20003d3c g     O .bss	00000001 g_task_id
0000cb64 g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17h604ca25004a88762E
00029028 g     F .text	00000016 conf_parse_and_lookup
00022ff0 g     F .text	00000028 ble_ll_conn_hci_set_chan_class
20003d68 g     O .bss	00000001 ble_hs_sync_state
00017e60 g     F .text	00000008 ble_hs_hci_cmd_build_le_lt_key_req_reply
000137e0 g     F .text	000000d0 ble_gap_adv_start
0001bd66 g     F .text	00000040 ble_att_clt_tx_notify
00028fd4 g     F .text	00000020 conf_handler_lookup
0001f4a8 g     F .text	00000060 ble_ll_pdu_max_tx_octets_get
00017a34 g     F .text	00000010 ble_hs_hci_acl_tx
00008946 g     F .text	00000036 _ZN6mynewt3sys7console6buffer17h937c567b6e383806E
000088a8 g     F .text	00000020 _ZN6mynewt6kernel2os10eventq_run17h35180d98e8e522beE
20003b68 g     O .bss	00000001 g_console_input_ignore
20004134 g     O .bss	0000000c g_ble_ll_rnum_data
00008e9e g     F .text	0000006a _ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h672f59bf22cbf6e9E
0001cf50 g     F .text	0000007c ble_att_svr_rx_read
0001eb6e g     F .text	00000016 get_le32
00008992 g     F .text	0000000a _ZN6mynewt3sys7console5flush17h498d792c115b7281E
00021be8 g     F .text	000002fa ble_ll_init_rx_isr_end
0000ace6 g     F .text	00000052 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17he345e78e5bebf816E
00023946 g     F .text	0000001e ble_ll_ctrl_is_start_enc_rsp
0002cabc g       .text	00000000 __exidx_start
00013ae8 g     F .text	00000014 ble_gap_disc_active
00029cdc g     F .text	00000004 __aeabi_memcpy4
0000ed0c g     F .text	000000bc sensor_network_init_post
00011bec g     F .text	00000010 os_sanity_init
20003f80 g     O .bss	00000004 g_ble_ll_conn_cur_sm
0000abda g     F .text	00000046 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h1f992f697420e688E
00017e50 g     F .text	00000008 ble_hs_hci_cmd_build_le_set_scan_enable
00010f14 g     F .text	000000a8 os_mbuf_append
0002958a g     F .text	0000000a mfg_read_tlv_mmr_ref
0001bb5a g     F .text	0000002c ble_att_clt_tx_read
000121e8 g     F .text	00000014 os_set_env
0001bcf2 g     F .text	00000042 ble_att_clt_rx_prep_write
0001e16c g     F .text	00000010 hal_bsp_flash_dev
0001eb18 g     F .text	00000008 nrf52_periph_create
0000b622 g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17hbed613464c36272dE
00018a44 g     F .text	0000000c ble_hs_pvcy_our_irk
0002c24c g     O .text	00000008 MemFile_methods
20003d20 g     O .bss	0000000c g_os_sanity_check_mu
0000e23e g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE
0001690c g     F .text	0000001c ble_hs_process_rx_data_queue
000157e8 g     F .text	0000001e ble_gattc_rx_read_group_type_adata
0001d522 g     F .text	00000050 ble_sm_alg_s1
000101fc g     F .text	00000064 sensor_set_poll_rate_ms
20003d74 g     O .bss	00000006 ble_hs_misc_null_addr
000102ac g     F .text	00000020 sensor_register_listener
200042c8 g     O .bss	00000008 g_ble_ll_sched_q
0000a304 g     F .text	00000022 _ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he3ed0b5e2c9f3406E
00008178 g     F .text	0000003c _sbrk
000281d8 g     F .text	00000010 ble_phy_encrypt_set_pkt_cntr
0001b452 g     F .text	0000000c ble_store_delete_cccd
0000e5d0 g     F .text	00000008 disable_buffer
0001e3dc g     F .text	00000098 os_tick_idle
00021874 g     F .text	000000e8 ble_ll_conn_end
0000e7a8 g     F .text	00000048 console_printf
0000c8f6 g     F .text	0000003e _ZN4core6option13expect_failed17h3eeb96a257d935a1E
0000e6c8 g     F .text	0000002c console_dump
0002764c g     F .text	00000038 ble_ll_utils_calc_window_widening
0000ef00 g     F .text	0000001c is_collector_node
000217f4 g     F .text	00000080 ble_ll_conn_datalen_update
0000e752 g     F .text	00000008 console_blocking_mode
0000e3b6 g     F .text	00000018 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hb41e1f6693cd74c4E
0000adc2 g     F .text	0000012e _ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE
00029194 g     F .text	00000018 conf_ensure_loaded
00008164  w    F .text	00000002 I2S_IRQHandler
0000b6ba g     F .text	00000020 _ZN6mynewt4libs14sensor_network14do_server_post17h7661fb0cf0ad1a96E
00013910 g     F .text	0000000a ble_gap_adv_active
00008650 g     F .text	00000002 _init
0001be36 g     F .text	0000004a ble_att_tx
00027980 g     F .text	00000018 ble_hw_whitelist_clear
000205bc g     F .text	00000044 ble_ll_adv_rx_pkt_in
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
00029914 g     F .text	0000009e .hidden __aeabi_d2f
0000acd0 g     F .text	00000016 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h612eb9cec733e365E
00015614 g     F .text	0000000a ble_gattc_notify
000142a8 g     F .text	00000038 ble_gap_event_listener_unregister
000190b2 g     F .text	000000b8 ble_l2cap_rx
0001e474 g     F .text	000000a0 os_tick_init
00027e80 g     F .text	00000084 ble_phy_rxpdu_copy
00027054 g     F .text	00000100 ble_ll_sched_slave_new
00014040 g     F .text	0000002c ble_gap_repeat_pairing_event
00010020 g     F .text	0000001c sensor_mgr_lock
00028a72 g     F .text	00000040 ble_store_config_read
000187f6 g     F .text	0000000a ble_hs_mbuf_acl_pkt
0001bd5a g     F .text	0000000c ble_att_clt_rx_exec_write
0001d738 g     F .text	00000054 ble_hci_trans_buf_alloc
0001a2c4 g     F .text	0000000a ble_sm_gen_pair_rand
00008164  w    F .text	00000002 TIMER0_IRQHandler
0000f986 g     F .text	00000010 oc_free_string
000107cc g     F .text	000000b0 os_init
0000a43c g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he0662d6d576dbc21E
00016380 g     F .text	00000148 ble_gatts_start
000080f8 g     F .text	0000005c Reset_Handler
0000c31e g     F .text	00000056 _ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h554be26f45a098a1E
00026b28 g     F .text	00000008 ble_ll_scan_get_peer_rpa
0000ec38 g     F .text	0000001c json_rep_start_root_object
000278b8 g     F .text	00000018 ble_ll_xcvr_rfclk_timer_exp
00017870 g     F .text	00000020 ble_hs_hci_set_buf_sz
000098d8 g     F .text	0000002c _ZN4core10intrinsics19copy_nonoverlapping17h30e244e51fb27f3dE
00018664 g     F .text	00000032 ble_hs_id_gen_rnd
00010a94 g     F .text	00000032 os_cputime_ticks_to_usecs
0001896c g     F .text	00000034 ble_hs_periodic_sync_init
0000f8ac g     F .text	0000000c oc_evq_set
20003d72 g     O .bss	00000002 ble_hs_hci_avail_pkts
000220b8 g     F .text	00000238 ble_ll_conn_rx_isr_end
0001e138 g     F .text	00000018 _copy
0001adfc g     F .text	000000a6 ble_sm_enc_initiate
000158b8 g     F .text	0000003c ble_gattc_rx_prep_write_rsp
20003bf0 g     O .bss	00000001 sysinit_active
00027a9c g     F .text	00000014 ble_hw_whitelist_disable
00027154 g     F .text	000000c4 ble_ll_sched_adv_new
00027ab0 g     F .text	0000000c ble_hw_whitelist_match
00022f2e g     F .text	0000003c ble_ll_conn_hci_rd_rem_ver_cmd
00016538 g     F .text	00000056 ble_gatts_send_next_indicate
0001eb22 g     F .text	00000008 put_le16
20003d6a g     O .bss	00000002 ble_hs_max_services
00023926 g     F .text	00000020 ble_ll_ctrl_enc_allowed_pdu_tx
00010e56 g     F .text	0000000a os_mbuf_pool_init
0000972e g     F .text	00000038 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h464403f29222bffdE
0001ca10 g     F .text	00000034 ble_att_svr_find_by_uuid
0001229a g     F .text	0000001e os_default_irq_asm
00011e1c g     F .text	0000000c os_sched_next_task
00013bec g     F .text	00000086 ble_gap_conn_broken
00011bfc g     F .text	00000054 os_sched_insert
00012d5c g     F .text	0000002a get_temp_raw_data
00010928 g     F .text	00000078 os_callout_reset
00029594 g     F .text	00000038 mfg_init
0001b7ce g     F .text	0000002c ble_att_mtu
0000f1e0 g     F .text	00000020 oc_ri_remove_client_cb_by_mid
00029854 g     F .text	00000038 nrf52_clock_hfxo_release
00010c74 g     F .text	00000010 os_dev_reset
0000c2dc g     F .text	00000042 _ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h1885e7d2ce4be516E
0001b912 g     F .text	00000028 ble_att_clt_rx_error
000195a0 g     F .text	00000038 ble_l2cap_sig_conn_broken
00026ef4 g     F .text	00000160 ble_ll_sched_master_new
00008846 g     F .text	0000001a _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h2b975e1f9ec08585E
000175e4 g     F .text	00000084 ble_hs_conn_timer
0000fe10 g     F .text	00000004 hal_bsp_hw_id_len
00016b20 g     F .text	0000000c ble_hs_hw_error
00009766 g     F .text	00000058 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h9a430e39befb7ad4E
0000c6fc g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h06272b98ac4d8924E
0000f82a g     F .text	0000000e coap_set_header_content_format
00018494 g     F .text	00000030 ble_hs_hci_evt_process
00029cdc g     F .text	00000004 __aeabi_memcpy8
00011964 g     F .text	00000014 os_mutex_init
00008168 g     F .text	00000010 _sbrkInit
000164e8 g     F .text	00000050 ble_gatts_conn_init
0000cb20 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E
0000a406 g     F .text	00000012 _ZN4core3mem7size_of17hd6e821d2e278c7d8E
00017e8e g     F .text	0000001a ble_hs_hci_cmd_build_add_to_resolv_list
0001be16 g     F .text	00000020 ble_att_cmd_get
20000250 g       .bssnz	00000000 __bssnz_end__
0001f1b0 g     F .text	00000028 ble_ll_is_our_devaddr
00009904 g     F .text	00000176 .hidden _ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E
00029308 g     F .text	00000070 flash_map_init
00027714 g     F .text	00000010 ble_ll_whitelist_match
00012b64 g     F .text	00000014 vprintf
000299e4 g     F .text	00000028 .hidden __popcountsi2
0001b240 g     F .text	000000b2 ble_sm_lgcy_random_rx
00010750 g     F .text	0000000c os_started
00008164  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
0001b56c g     F .text	0000003c ble_uuid_cmp
00028fa8 g     F .text	00000010 conf_unlock
0001ab26 g     F .text	0000000e ble_sm_enc_key_refresh_rx
00017a68 g     F .text	00000048 ble_hs_hci_init
00011da0 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00024e14 g     F .text	00000024 ble_ll_hci_cmd_rx
000168b4 g     F .text	00000024 ble_hs_is_parent_task
00025114 g     F .text	00000030 ble_ll_hci_ev_hw_err
00027708 g     F .text	0000000c ble_ll_whitelist_read_size
000255e8 g     F .text	0000002c ble_ll_resolv_peer_addr_rd
0000a764 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h027105c960327d71E
00022d90 g     F .text	000000c8 ble_ll_conn_hci_param_reply
00011098 g     F .text	00000054 os_mbuf_appendfrom
00008164  w    F .text	00000002 PWM2_IRQHandler
0000a586 g     F .text	00000022 _ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h1b1bd4fc0c06f6a7E
00016b00 g     F .text	00000020 ble_hs_sched_reset
00023c9a g     F .text	00000036 ble_ll_ctrl_proc_stop
0000a836 g     F .text	000000a8 _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E
0001ce30 g     F .text	00000078 ble_att_svr_rx_find_type_value
00025754 g     F .text	00000068 ble_ll_resolv_rpa
20003dc0 g     O .bss	00000006 g_random_addr
0000ee78 g     F .text	00000018 is_sensor_node
000088c8 g     F .text	0000001c _ZN6mynewt6kernel2os15eventq_dflt_get17hfdc26cb533694dccE
2000022c g       .data	00000000 __data_end__
00018610 g     F .text	00000038 ble_hs_hci_util_data_hdr_strip
0000f480 g     F .text	00000010 coap_get_mid
000155be g     F .text	00000056 ble_gattc_notify_custom
0000c598 g     F .text	00000072 .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE
00008164  w    F .text	00000002 ECB_IRQHandler
000274d8 g     F .text	00000010 ble_ll_sched_stop
0001b620 g     F .text	00000058 ble_uuid_flat
0000e02a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17h318eab348e5a5d7eE
00022816 g     F .text	00000128 ble_ll_conn_comp_event_send
200045b0 g     O .bss	00000004 ble_store_config_num_peer_secs
0001afe8 g     F .text	00000020 ble_sm_create_chan
0001afb4 g     F .text	00000034 ble_sm_init
00028858 g     F .text	00000020 ble_phy_resolv_list_enable
00024e44 g     F .text	00000050 ble_ll_hci_init
0001cd32 g     F .text	00000094 ble_att_svr_rx_mtu
0001f28c g     F .text	0000004c ble_ll_rx_start
0001c954 g     F .text	0000000c ble_att_svr_prev_handle
0000a6d6 g     F .text	0000008e _ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE
000286fc g     F .text	00000030 ble_phy_tx_set_start_time
0001b30c g     F .text	0000002c ble_store_read
20003d40 g     O .bss	00000004 g_os_time
0001b78a g     F .text	0000000a ble_att_set_peer_mtu
0001b7fc g     F .text	00000028 ble_att_create_chan
0001ead4 g     F .text	00000014 hal_watchdog_tickle
20004744 g       .bss	00000000 __bss_end__
00021638 g     F .text	00000010 ble_ll_conn_wfr_timer_exp
0000f114 g     F .text	00000028 oc_buffer_init
00010e60 g     F .text	00000032 os_mbuf_get
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
000188e0 g     F .text	00000014 ble_hs_misc_restore_irks
00027a80 g     F .text	0000001c ble_hw_whitelist_enable
0000d9fc g     F .text	0000000c _ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h3a34938e29ce59dcE
00013750 g     F .text	00000026 ble_gap_rx_rd_rem_sup_feat_complete
00012ca4 g     F .text	00000030 json_helper_set_int
0001b7b4 g     F .text	0000001a ble_att_truncate_to_mtu
0001acc2 g     F .text	00000010 ble_sm_peer_pair_rand
0000f7fc g     F .text	00000016 coap_send_message
00012d04 g     F .text	00000048 json_helper_set_text_string
0001f508 g     F .text	00000178 ble_ll_init
0001736a g     F .text	00000034 ble_hs_conn_chan_insert
0000e23e g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u64$GT$3fmt17h054eedd71fc90a11E
00009822 g     F .text	00000054 _ZN4core3ptr23swap_nonoverlapping_one17h90aaa0c74a7eb382E
000086ce g     F .text	000000ac rust_begin_unwind
20003d6c g     O .bss	00000002 ble_hs_max_attrs
200045b4 g     O .bss	00000080 ble_store_config_cccds
00027bd8 g     F .text	00000038 ble_hw_resolv_list_rmv
000118d8 g     F .text	00000010 os_msys_reset
00008164 g     F .text	00000002 Default_Handler
0000863c g     F .text	00000014 _start
0001d41c g     F .text	00000058 ble_att_svr_start
00027a00 g     F .text	00000080 ble_hw_whitelist_rmv
0000b5f0 g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17ha911407dafd615aaE
00027488 g     F .text	00000050 ble_ll_sched_rfclk_chk_restart
0000e648 g     F .text	00000070 console_printhex
0001f0d0 g     F .text	00000018 ble_ll_addr_is_id
00029698 g     F .text	0000008c base64_encode
20003f84 g     O .bss	00000004 g_ble_ll_conn_comp_ev
000121fc g     F .text	00000006 os_arch_init_task_stack
00010fbc g     F .text	000000b8 os_mbuf_dup
20004634 g     O .bss	00000004 ble_store_config_num_our_secs
000239a6 g     F .text	0000001c ble_ll_ctrl_conn_param_reply
00010d80 g     F .text	00000018 os_eventq_run
00010a84 g     F .text	00000010 os_cputime_usecs_to_ticks
0001ec02 g     F .text	00000022 swap_in_place
00012c2c g     F .text	00000024 json_helper_set_array
00028f94 g     F .text	00000014 conf_lock
00011746 g     F .text	00000040 os_memblock_from
0001edbc g     F .text	0000002c temp_stub_get_raw_temperature
0000d264 g     F .text	00000204 _ZN4core3fmt5write17h51826aee11d21b9bE
20003dc8 g     O .bss	00000006 g_dev_addr
000275c4 g     F .text	0000004a ble_ll_utils_remapped_channel
0001f400 g     F .text	00000010 ble_ll_event_send
0000f200 g     F .text	000000a8 oc_ri_alloc_client_cb
00026ad4 g     F .text	00000048 ble_ll_scan_initiator_start
20004738 g     O .bss	00000004 conf_save_dst
000097be g     F .text	00000022 _ZN4core3ptr145_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$unsafe$u20$extern$u20$$u22$C$u22$$u20$fn$LP$A$C$$u20$B$C$$u20$C$C$$u20$D$RP$$u20$.$GT$$u20$Ret$GT$2eq17h5b38778dac51aa20E
2000438c g     O .bss	0000010c g_nrf_encrypt_scratchpad
00027510 g     F .text	000000b4 ble_ll_utils_calc_access_addr
0001ad76 g     F .text	00000086 ble_sm_pair_initiate
00019684 g     F .text	00000040 ble_l2cap_sig_cmd_get
00027218 g     F .text	0000016c ble_ll_sched_adv_reschedule
20003c68 g     O .bss	00000050 g_idle_task
20000180 g     O .data	00000004 sysinit_panic_cb
0002760e g     F .text	0000003e ble_ll_utils_calc_num_used_chans
0001e92c g     F .text	0000008c hal_timer_start_at
0000c886 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E
0001f3e8 g     F .text	0000000c ble_ll_state_set
000188f4 g     F .text	00000014 ble_mqueue_init
20002518 g     O .bss	00000004 g_os_sanity_check_list
0001d6cc g     F .text	00000024 ble_hci_trans_ll_evt_tx
000174a8 g     F .text	00000018 ble_hs_conn_find
000186d0 g     F .text	00000050 ble_hs_id_addr
00010148 g     F .text	00000008 sensor_pkg_init
0000afe8 g     F .text	000000ea _ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE
0001ebfa g     F .text	00000008 put_be16
0001b338 g     F .text	00000028 ble_store_delete
00011786 g     F .text	00000032 os_memblock_get
00011d28 g     F .text	00000078 os_sched_wakeup
00028d0c g     F .text	00000054 ble_store_config_init
000266f0 g     F .text	00000078 ble_ll_scan_wfr_timer_exp
0000d242 g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE
00010df2 g     F .text	00000026 os_mqueue_get
00015716 g     F .text	0000001e ble_gattc_rx_find_info_idata
00011e78 g     F .text	00000010 os_sem_init
000168a8 g     F .text	0000000c ble_hs_evq_set
0001419c g     F .text	00000030 ble_gap_preempt_no_lock
0001d8c4 g     F .text	00000030 mem_init_mbuf_pool
0001750c g     F .text	0000000c ble_hs_conn_first
00028364 g     F .text	0000000c ble_phy_disable
00010628 g     F .text	00000098 os_default_irq
20004310 g     O .bss	00000001 g_nrf_num_irks
000098d4 g     F .text	00000004 _ZN4core3ptr8null_mut17h8415c8ad889a2a19E
00022f6a g     F .text	00000038 ble_ll_conn_hci_rd_rssi
000188d0 g     F .text	00000010 ble_hs_misc_addr_type_to_id
0000e3ce g     F .text	0000000a _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h7160b6abac7a3a12E
0000b378 g     F .text	00000078 _ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17he002753e56cbb7faE
20003d6e g     O .bss	00000001 ble_hs_enabled_state
00021254 g     F .text	00000024 ble_ll_conn_find_active_conn
00013dec g     F .text	00000026 ble_gap_timer
0001797c g     F .text	000000b8 ble_hs_hci_acl_tx_now
0001af8e g     F .text	00000026 ble_sm_connection_broken
00015824 g     F .text	00000030 ble_gattc_rx_read_rsp
0000c54a g     F .text	00000028 .hidden _ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h0cdc1a3a06ac5935E
20003d30 g     O .bss	00000004 g_os_last_ctx_sw_time
20003f88 g     O .bss	00000008 g_ble_ll_conn_free_list
00011e88 g     F .text	00000064 os_sem_release
00027464 g     F .text	00000024 ble_ll_sched_next_time
0000c2b4 g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6aed0cbdf725fdeeE
0000ac20 g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E
00017eb8 g     F .text	00000008 ble_hs_hci_cmd_build_le_set_priv_mode
0001f410 g     F .text	0000000a ble_ll_read_supp_states
0001247c g     F .text	00000048 memcmp
000104a4 g     F .text	00000018 os_arch_init
0000a76a g     F .text	0000009a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE
0000b528 g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17h2a8f18ee4916d0d4E
00015734 g     F .text	0000001e ble_gattc_rx_find_info_complete
0000b440 g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2a30ce0f4e55b06fE
00028270 g     F .text	0000001c ble_phy_txpwr_set
00029cd8  w    F .text	00000002 .hidden __aeabi_ldiv0
0001eb84 g     F .text	00000076 get_le64
00029074 g     F .text	00000054 conf_commit
0000f99c g     F .text	0000000c sysinit_start
0001e760 g     F .text	00000170 hal_timer_config
00010bf8 g     F .text	00000044 os_dev_open
00028bf4 g     F .text	0000002a ble_store_config_write
00022410 g     F .text	000001d0 ble_ll_conn_slave_start
0000d9ce g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E
00020638 g     F .text	00000028 ble_ll_adv_can_chg_whitelist
00013fd6 g     F .text	00000044 ble_gap_enc_event
0000edd4 g     F .text	00000064 sensor_network_prepare_post
00021228 g     F .text	00000012 ble_ll_conn_is_lru
0000e3ce g     F .text	0000000a _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE
000178b4 g     F .text	00000070 ble_hs_hci_cmd_tx
00012570 g     F .text	00000014 srand48
00027724 g     F .text	00000058 ble_ll_whitelist_add
00021674 g     F .text	0000001a ble_ll_conn_auth_pyld_timer_cb
0000b58c g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17h84b2efbc7ba28e82E
00011eec g     F .text	000000b8 os_sem_pend
00017242 g     F .text	00000038 ble_hs_adv_parse
0001eac4 g     F .text	00000010 hal_watchdog_enable
00020660 g     F .text	00000024 ble_ll_adv_send_conn_comp_ev
00008aaa g     F .text	0000005a _ZN4core6result19Result$LT$T$C$E$GT$6expect17hecdafdebd0535367E
00018e12 g     F .text	00000054 ble_hs_startup_go
00016b2c g     F .text	00000078 ble_hs_start
0002016c g     F .text	00000040 ble_ll_adv_halt
00010a68 g     F .text	00000008 os_cputime_timer_start
0000f812 g     F .text	00000018 coap_set_token
0001ffb8 g     F .text	0000002a ble_ll_adv_chk_rpa_timeout
0000ef38 g     F .text	00000058 get_device_id
00009876 g     F .text	00000042 _ZN4core3ptr4read17h3fc3f17e9fb23ef4E
0000f0ac g     F .text	00000040 oc_allocate_mbuf
0002390a g     F .text	0000001c ble_ll_ctrl_enc_allowed_pdu_rx
000281e8 g     F .text	0000002c ble_phy_encrypt_disable
0002308c g     F .text	0000005e ble_ll_conn_hci_le_start_encrypt
0000cebc g     F .text	0000014e _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E
00010e18 g     F .text	0000003e os_mqueue_put
0000e920 g     F .text	00000028 init_sensor_coap
00016ab8 g     F .text	0000000a ble_hs_timer_resched
00024d76 g     F .text	00000030 ble_ll_hci_send_noop
00011848 g     F .text	0000004c os_msys_register
00026b38 g     F .text	00000014 ble_ll_scan_set_peer_rpa
20003cb8 g     O .bss	00000004 g_os_idle_ctr
000292a0 g     F .text	00000040 flash_area_open
000231cc g     F .text	00000074 ble_ll_conn_hci_wr_auth_pyld_tmo
0000e98c g     F .text	00000028 json_rep_reset
000277c0 g     F .text	0000003c ble_ll_xcvr_rfclk_state
000111ea g     F .text	0000007a os_mbuf_cmpf
00008164  w    F .text	00000002 SAADC_IRQHandler
000238bc g     F .text	00000012 ble_ll_calc_session_key
0000877a g     F .text	0000005a _ZN4core6result19Result$LT$T$C$E$GT$6expect17h971a4fb20f73df2aE
0001d714 g     F .text	00000024 ble_hci_trans_ll_acl_tx
00015cac g     F .text	00000092 ble_gatts_clt_cfg_access
0000c84c g     F .text	0000003a _ZN4core9panicking5panic17h53ca63c6ac6312f8E
00028838 g     F .text	0000000c ble_phy_rx_started
0000a464 g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17he7aeb924cd1c8272E
00012516 g     F .text	00000038 memset
0000e02a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h562f60f4fbcc2e1dE
00008020 g       .text	000000d8 __isr_vector
00017e20 g     F .text	00000008 ble_hs_hci_cmd_build_le_set_adv_data
0000e100 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hc1bd8b99f165c287E
0001d14a g     F .text	0000006c ble_att_svr_rx_write
00008826 g     F .text	00000012 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h6d3955e1a79eef94E
00008652 g     F .text	0000007c main
0000c8c6 g     F .text	00000030 _ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E
0001d3b0 g     F .text	0000006c ble_att_svr_rx_indicate
000230ea g     F .text	00000060 ble_ll_conn_hci_le_ltk_reply
000274e8 g     F .text	00000028 ble_ll_sched_init
00025280 g     F .text	00000024 ble_ll_rand_init
0000e6f4 g     F .text	0000003c console_out_nolock
0002500e g     F .text	00000058 ble_ll_hci_ev_ltk_req
00025b4c g     F .text	0000000a ble_ll_scan_timer_cb
0000904e g     F .text	00000030 _ZN6mynewt4Strn9from_cstr17h0552e18bd48de365E
0000fda0 g     F .text	00000020 json_encode_array_start
0000e3ac g     F .text	0000000a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 WDT_IRQHandler
0001eeb8 g     F .text	00000034 ble_ll_task
00019046 g     F .text	0000000c ble_l2cap_get_conn_handle
00012d4c g     F .text	00000010 rust_sysinit
00022744 g     F .text	00000056 ble_ll_conn_hci_chk_conn_params
000278a4 g     F .text	00000014 ble_ll_xcvr_rfclk_start_now
20003dd0 g     O .bss	00000050 g_ble_ll_task
0000f8b8 g     F .text	00000020 oc_send_buffer
000250c2 g     F .text	00000052 ble_ll_hci_ev_rd_rem_ver
0000f9a8 g     F .text	0000000c sysinit_end
00013b54 g     F .text	0000005a ble_gap_terminate
00017e58 g     F .text	00000008 ble_hs_hci_cmd_build_le_conn_update
0000a564 g     F .text	00000022 _ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h070926fb062338c0E
00029378 g     F .text	00000002 modlog_init
00012202 g     F .text	00000046 SVC_Handler
000142e0 g     F .text	00000068 ble_gap_init
00024da8 g     F .text	00000038 ble_ll_hci_is_le_event_enabled
0001b1d8 g     F .text	00000068 ble_sm_lgcy_random_exec
00013b18 g     F .text	00000014 ble_gap_conn_active
00025144 g     F .text	00000026 ble_ll_hci_ev_databuf_overflow
00008f08 g     F .text	00000010 _ZN6mynewt7sysinit17hfbb6001f0140a448E
0000c434 g     F .text	00000036 .hidden _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17h32c1a16737a51327E
00028f38 g     F .text	00000028 ble_store_config_conf_init
00024c74 g     F .text	00000004 ble_ll_hci_adv_mode_ext
00010c94 g     F .text	0000000a os_eventq_inited
00029914 g     F .text	0000009e .hidden __truncdfsf2
0000b2e0 g     F .text	00000030 _ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h86d9940d247021b8E
00025540 g     F .text	00000060 ble_ll_resolv_list_rmv
00024eee g     F .text	0000005c ble_ll_hci_ev_rem_conn_parm_req
0000a350 g     F .text	00000042 _ZN4core3ptr4read17hd502bbc8ba3aabd4E
20003bd0 g     O .bss	00000020 oc_transports
20004498 g     O .bss	00000000 ble_phy_stats
00022c4c g     F .text	00000056 ble_ll_conn_hci_read_rem_features
000297c2 g     F .text	00000054 hal_flash_read
00018784 g     F .text	00000018 ble_hs_id_reset
00010dd8 g     F .text	00000008 os_eventq_dflt_get
0002c4a4 g     O .text	00000010 ble_hs_pvcy_default_irk
0001e8d0 g     F .text	00000030 hal_timer_read
00018814 g     F .text	00000028 ble_hs_mbuf_from_flat
20003da4 g     O .bss	0000001c nrf52_hal_timer5
0001ee8c g     F .text	00000002 oc_register_gatt
00010d06 g     F .text	0000007a os_eventq_get
000202fc g     F .text	00000120 ble_ll_adv_set_scan_rsp_data
00010f00 g     F .text	00000014 os_mbuf_len
0000c934 g     F .text	000001ec _ZN4core5slice6memchr6memchr17h94d07a4704a27026E
000121c0 g     F .text	00000026 os_time_ms_to_ticks
20003b69 g     O .bss	00000001 g_silence_console
00026b1c g     F .text	0000000c ble_ll_scan_enabled
000109fc g     F .text	00000034 os_callout_wakeup_ticks
00013738 g     F .text	00000018 ble_gap_rx_adv_report
00019014 g     F .text	00000032 ble_l2cap_prepend_hdr
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00017938 g     F .text	00000024 ble_hs_hci_rx_ack
00010150 g     F .text	00000018 sensor_lock
0002071c g     F .text	00000020 ble_ll_adv_init
0001d814 g     F .text	000000b0 ble_hci_ram_init
00017edc g     F .text	0000000a ble_hs_hci_cmd_build_le_read_remote_feat
0001880a g     F .text	0000000a ble_hs_mbuf_att_pkt
20004740 g     O .bss	00000004 flash_map_entries
00011146 g     F .text	000000a4 os_mbuf_adj
00026b54 g     F .text	0000001c ble_ll_scan_whitelist_enabled
0000e1d6 g     F .text	00000068 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E
00028fb8 g     F .text	0000001c conf_register
00008020 g       .imghdr	00000000 __text
00009682 g     F .text	0000007a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE
0000a392 g     F .text	00000018 _ZN4core3ptr5write17h4641f61a88075460E
0000d9c6 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E
00029554 g     F .text	00000012 mfg_seek_next
000092ea g     F .text	00000020 _ZN6mynewt4Strn8is_empty17hf6264bbc9f796f10E
00028328 g     F .text	0000003c ble_phy_disable_irq_and_ppi
000262bc g     F .text	00000054 ble_ll_scan_sm_stop
0000b490 g     F .text	00000034 _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h6bf6324cbd122d1aE
20003d98 g     O .bss	00000000 ble_l2cap_stats
00016bba g     F .text	0000000a ble_hs_tx_data
00012584 g     F .text	0000001c strcmp
000100f8 g     F .text	0000003c sensor_mgr_find_next
0001ab14 g     F .text	00000012 ble_sm_enc_change_rx
00011c80 g     F .text	0000000c os_sched_get_current_task
0000e734 g     F .text	0000001e console_write
000206b8 g     F .text	00000014 ble_ll_adv_wfr_timer_exp
20004234 g     O .bss	00000028 g_ble_ll_resolv_data
00013fa4 g     F .text	00000032 ble_gap_passkey_event
00018fe0 g     F .text	00000008 ble_l2cap_is_mtu_req_sent
000122cc g     F .text	00000010 lrand48
0000fe14 g     F .text	00000034 hal_bsp_hw_id
00028054 g     F .text	00000134 ble_phy_init
0001baa0 g     F .text	0000004a ble_att_clt_tx_read_type
00008468 g     F .text	000001d4 SystemInit
00010a78 g     F .text	0000000a os_cputime_get32
0001b51a g     F .text	00000052 ble_uuid_init_from_buf
00008164  w    F .text	00000002 RNG_IRQHandler
0001a8da g     F .text	000000de ble_sm_process_result
0001879c g     F .text	00000024 ble_hs_log_mbuf
00010d98 g     F .text	00000040 os_eventq_remove
0000fd98 g     F .text	00000008 json_encode_array_name
0002777c g     F .text	00000034 ble_ll_whitelist_rmv
00008f18 g     F .text	00000136 _ZN6mynewt4Strn3new17haa130bc407e45c8bE
20003e20 g     O .bss	000000c4 g_ble_ll_data
00017924 g     F .text	00000014 ble_hs_hci_cmd_tx_empty_ack
0000fa78 g     F .text	00000002 _fini
00028854 g     F .text	00000004 ble_phy_max_data_pdu_pyld
000174c0 g     F .text	00000018 ble_hs_conn_insert
000291ac g     F .text	00000068 conf_save_one
0000ee38 g     F .text	00000026 sensor_network_do_post
000194f2 g     F .text	0000008e ble_l2cap_sig_update
0001bc82 g     F .text	0000000a ble_att_clt_rx_write
0001eb2a g     F .text	00000014 put_le32
0001004c g     F .text	0000000c sensor_mgr_evq_get
0000b4f6 g     F .text	00000032 _ZN4core3fmt10ArgumentV13new17h1e15870702cd8f35E
00008880 g     F .text	00000028 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5fc8a869c255d083E
00026d5c g     F .text	00000198 ble_ll_sched_conn_reschedule
0001254e g     F .text	00000020 sprintf
0001f3be g     F .text	00000028 ble_ll_tx_mbuf_pducb
20003f90 g     O .bss	00000004 g_ble_ll_conn_create_sm
0000aaa2 g     F .text	00000050 .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h3a62c6e9b8547987E
00017de0 g     F .text	00000038 ble_hs_hci_cmd_send_buf
0001bde6 g     F .text	0000000a ble_att_clt_rx_indicate
0001ba24 g     F .text	00000048 ble_att_clt_tx_find_type_value
0001bbc4 g     F .text	0000000e ble_att_clt_rx_read_blob
00011e28 g     F .text	00000022 os_sched
0001ba6c g     F .text	00000034 ble_att_clt_rx_find_type_value
00017354 g     F .text	00000016 ble_hs_conn_chan_find_by_scid
0000f8d8 g     F .text	0000004c oc_send_multicast_message
0002888c g     F .text	00000008 ble_phy_rfclk_disable
0001baea g     F .text	00000070 ble_att_clt_rx_read_type
00022396 g     F .text	00000034 ble_ll_conn_tx_pkt_in
20004638 g     O .bss	00000004 ble_store_config_num_cccds
20003ee8 g     O .bss	00000080 g_ble_ll_adv_sm
00011a30 g     F .text	000000e0 os_mutex_pend
0000f86a g     F .text	00000026 coap_set_header_uri_query
00000000 g       .svc_table	00000000 SVC_Table
0000a418 g     F .text	00000012 _ZN4core3mem7size_of17h96e196a831b2ee50E
00018800 g     F .text	0000000a ble_hs_mbuf_l2cap_pkt
00008164  w    F .text	00000002 RTC2_IRQHandler
000256c8 g     F .text	0000002c ble_ll_resolv_set_peer_rpa
0001a348 g     F .text	00000040 ble_sm_proc_find
000257bc g     F .text	0000000c ble_ll_resolv_enabled
00015790 g     F .text	0000002c ble_gattc_rx_read_type_adata
0000fa7c g     F .text	0000003c json_encode_object_start
0000f4ac g     F .text	0000034e coap_serialize_message
000098d0 g     F .text	00000004 _ZN4core3ptr8null_mut17h323310d988ac6279E
20010000 g       .bss	00000000 __StackTop
0000d6e2 g     F .text	000002e4 _ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE
0001b794 g     F .text	00000020 ble_att_chan_mtu
00018572 g     F .text	00000022 ble_hs_hci_util_read_adv_tx_pwr
00010168 g     F .text	0000000a sensor_unlock
20004314 g     O .bss	00000040 g_nrf_irk_list
00025066 g     F .text	0000005c ble_ll_hci_ev_rd_rem_used_feat
000290e4 g     F .text	00000002 config_pkg_init_stage2
00010de0 g     F .text	00000012 os_mqueue_init
0001e158 g     F .text	00000012 _double_byte
0001b3ce g     F .text	0000000c ble_store_write_our_sec
0000a8de g     F .text	000000a8 _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E
0000dfcc g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h1d24bfddebe6efa8E
0002436a g     F .text	000000cc ble_ll_ctrl_tx_done
000188b0 g     F .text	00000020 ble_hs_misc_conn_chan_find_reqd
0000e588 g     F .text	00000048 console_flush
00008164  w    F .text	00000002 PWM0_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00023b5a g     F .text	00000018 ble_ll_ctrl_is_terminate_ind
000298c0 g     F .text	00000020 strsep
0000c22a g     F .text	00000064 _ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcbd1eb8875cb1b9fE
00024e94 g     F .text	0000005a ble_ll_hci_ev_datalen_chg
2000034c g     O .bss	00000004 oc_content_format
0001d372 g     F .text	0000003e ble_att_svr_rx_notify
0001b824 g     F .text	00000010 ble_att_init
0001cb7a g     F .text	00000016 ble_att_svr_ticks_until_tmo
0000e100 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E
00018762 g     F .text	00000020 ble_hs_id_use_addr
0001f1ec g     F .text	0000003c ble_ll_wfr_timer_exp
00017324 g     F .text	00000030 ble_hs_conn_can_alloc
000172da g     F .text	0000002c ble_hs_atomic_conn_flags
00018eec g     F .text	0000007a ble_ibeacon_set_adv_data
0001892e g     F .text	0000003e ble_mqueue_put
0000930a g     F .text	0000013c _ZN6mynewt4Strn8validate17ha2be07c8174826b4E
000185e8 g     F .text	00000028 ble_hs_hci_util_set_random_addr
00029724 g     F .text	00000058 base64_decode
000138b0 g     F .text	00000036 ble_gap_adv_set_data
00027998 g     F .text	00000068 ble_hw_whitelist_add
000176a0 g     F .text	00000004 ble_hs_flow_startup
00019614 g     F .text	00000034 ble_l2cap_sig_init
20003c2c g     O .bss	00000020 st_up_osco
00021f20 g     F .text	0000006c ble_ll_conn_rx_isr_start
20000270 g     O .bss	00000040 _ZN6mynewt8encoding12coap_context12COAP_CONTEXT17hcc1fd09be7e4ef0cE
0000b654 g     F .text	0000003c _ZN6mynewt4libs14sensor_network16init_server_post17h4d7cda996b2d7ef5E
000109a0 g     F .text	0000005c os_callout_tick
00017668 g     F .text	00000034 ble_hs_conn_init
0002ca30 g     O .text	00000048 sysflash_map_dflt
000141cc g     F .text	00000018 ble_gap_preempt
0000dfcc g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E
000262b8 g     F .text	00000002 ble_ll_scan_clean_cur_aux_data
0000ee5e g     F .text	00000018 do_server_post
0000b6da g     F .text	0000002e _ZN6mynewt4libs14sensor_network13get_device_id17hf2f7fef56ca514e0E
000080f8 g       .text	00000000 __isr_vector_end
0001087c g     F .text	0000001a os_start
000196fa g     F .text	0000001e ble_l2cap_sig_reject_invalid_cid_tx
0002431c g     F .text	0000004e ble_ll_ctrl_reject_ind_send
0001f0b8 g     F .text	00000018 ble_ll_is_rpa
0001ec24 g     F .text	0000001c swap_buf
00013e38 g     F .text	0000008c ble_gap_rx_param_req
00023964 g     F .text	00000042 ble_ll_ctrl_start_enc_send
0001f41c g     F .text	0000000c ble_ll_read_supp_features
000216f4 g     F .text	00000100 ble_ll_conn_sm_new
00020570 g     F .text	0000004c ble_ll_adv_rx_isr_end
00022e58 g     F .text	00000048 ble_ll_conn_create_cancel
00022ca2 g     F .text	000000ee ble_ll_conn_hci_update
0000a5a8 g     F .text	00000106 .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E
0002516c g     F .text	00000050 ble_ll_rand_sample
0001b3da g     F .text	0000000e ble_store_read_peer_sec
00017e7e g     F .text	00000008 ble_hs_hci_cmd_build_le_conn_param_neg_reply
00008164  w    F .text	00000002 RTC1_IRQHandler
0001e150 g     F .text	00000008 _set
0001f228 g     F .text	00000002 ble_ll_wfr_disable
00018594 g     F .text	00000054 ble_hs_hci_util_rand
0001f4a0 g     F .text	00000006 ble_ll_pdu_tx_time_get
00010a3c g     F .text	0000002c os_cputime_timer_init
00019676 g     F .text	0000000e ble_l2cap_sig_hdr_parse
0000df6e g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17he275dc913fe9b8e5E
0001cc6a g     F .text	00000030 ble_att_svr_tx_error_rsp
00021294 g     F .text	0000001c ble_ll_conn_calc_dci
00010260 g     F .text	0000002e sensor_mgr_register
0000891a g     F .text	0000002c _ZN6mynewt3sys7console10print_strn17h6acf88a32c052588E
0000ec30 g     F .text	00000008 do_sensor_post
00029214 g     F .text	00000014 conf_store_init
000277b8 g     F .text	00000008 ble_ll_whitelist_disable
00012c6c g     F .text	0000001c json_helper_object_array_start_item
0001f1d8 g     F .text	00000014 ble_ll_get_our_devaddr
00018b3c g     F .text	00000084 ble_hs_pvcy_set_our_irk
00026940 g     F .text	00000080 ble_ll_scan_set_scan_params
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
0002882c g     F .text	0000000c ble_phy_access_addr_get
00013cc8 g     F .text	000000b4 ble_gap_rx_update_complete
0001146a g     F .text	00000046 os_mbuf_concat
0001b3e8 g     F .text	00000050 ble_store_write_peer_sec
0000a986 g     F .text	0000002a _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h38789eadd0c58811E
000263d0 g     F .text	0000005c ble_ll_scan_chk_resume
0001ec90 g     F .text	0000005c temp_stub_create
0001b13c g     F .text	0000009c ble_sm_lgcy_confirm_exec
000295cc g     F .text	00000010 mfg_open
2000018c g     O .data	00000008 g_os_run_list
0000b1c4 g     F .text	0000010a _ZN6mynewt8encoding12coap_context11CoapContext4fail17h8b0f21dc333d20ccE
0000fddc g     F .text	00000034 NVIC_Relocate
000168ec g     F .text	00000010 ble_hs_unlock_nested
0001ee8e g     F .text	00000002 oc_register_ip4
0001d93c g     F .text	0000005c sysinit_app
00018f9c g     F .text	00000028 ble_l2cap_chan_alloc
0001003c g     F .text	00000010 sensor_mgr_unlock
0001b99e g     F .text	00000038 ble_att_clt_tx_find_info
20000620 g     O .bss	00000004 os_flags
0000fab8 g     F .text	00000054 json_encode_object_key
0000c1ee g     F .text	0000003c _ZN6mynewt2hw10sensor_mgr14find_bydevname17h896b27dd8b8e6b9fE
0000f1b0 g     F .text	00000030 oc_ri_mem_init
00010454 g     F .text	00000006 os_arch_restore_sr
20003d98 g     O .bss	0000000c g_hal_os_tick
000191a8 g     F .text	0000003c ble_l2cap_init
0002828c g     F .text	00000030 ble_phy_set_access_addr
0000be60 g     F .text	00000212 _ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E
0000fb0c g     F .text	0000006c json_encode_object_entry
00026b70 g     F .text	00000048 ble_ll_scan_reset
0001f03c g     F .text	00000056 ble_ll_rxpdu_alloc
00024c78 g     F .text	0000001c ble_ll_hci_event_send
000206b2 g     F .text	00000004 ble_ll_adv_get_peer_rpa
2000fe50 g       *ABS*	000001b0 __StackLimit
00015806 g     F .text	0000001e ble_gattc_rx_read_group_type_complete
00017e30 g     F .text	00000008 ble_hs_hci_cmd_build_set_event_mask2
20003cbc g     O .bss	00000004 g_os_started
0002863c g     F .text	00000060 ble_phy_rx
00010c3c g     F .text	00000036 os_dev_close
0001391c g     F .text	000001a8 ble_gap_rx_conn_complete
0000aaf2 g     F .text	0000003a .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$14saturating_mul17hacbe29afd3c85835E
00027868 g     F .text	0000003c ble_ll_xcvr_rfclk_time_till_settled
0000a4b2 g     F .text	00000014 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd0263209417be61aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
0001d78c g     F .text	00000084 ble_hci_trans_buf_free
0001916a g     F .text	0000003e ble_l2cap_tx
0000e100 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h27565ff90d14f5eeE
0001d658 g     F .text	00000028 ble_hci_trans_cfg_hs
00008164  w    F .text	00000002 NFCT_IRQHandler
00024e38 g     F .text	0000000a ble_ll_hci_acl_rx
000157bc g     F .text	0000002c ble_gattc_rx_read_type_complete
20004354 g     O .bss	00000004 g_ble_rng_isr_cb
20003f98 g     O .bss	00000198 g_ble_ll_conn_sm
0000f13c g     F .text	00000028 oc_rep_init
0000c83c g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5226165d8771f8a2E
00008b68 g     F .text	00000336 _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E
0001eb3e g     F .text	00000026 put_le64
00028ec4 g     F .text	0000001c ble_store_config_persist_our_secs
0001f092 g     F .text	00000010 ble_ll_chk_txrx_octets
0001b446 g     F .text	0000000c ble_store_write_cccd
0000d468 g     F .text	00000248 _ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E
00008458 g     F .text	00000010 SystemCoreClockUpdate
0001da54 g     F .text	000006e4 tc_aes_encrypt
0000fd78 g     F .text	00000020 json_encode_object_finish
20004498 g     O .bss	00000021 g_nrf_ccm_data
00010edc g     F .text	00000024 os_mbuf_free_chain
00028ce0 g     F .text	0000002a ble_store_config_delete
0001ed32 g     F .text	0000000e temp_stub_default_cfg
00016930 g     F .text	0000003a ble_hs_wakeup_tx
00021648 g     F .text	00000002 ble_ll_conn_reset_pending_aux_conn_rsp
00011930 g     F .text	00000034 os_msys_init
0000c734 g     F .text	00000050 .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h8c255323ca5519dfE
00017488 g     F .text	00000020 ble_hs_conn_remove
0001c960 g     F .text	00000018 ble_att_svr_find_by_handle
00011074 g     F .text	00000024 os_mbuf_off
0001f2d8 g     F .text	000000e6 ble_ll_rx_end
000277fc g     F .text	0000002c ble_ll_xcvr_rfclk_enable
00017890 g     F .text	00000024 ble_hs_hci_add_avail_pkts
0000fa50 g     F .text	00000014 start_ble
0001213c g     F .text	0000000c os_time_get
0001d680 g     F .text	00000028 ble_hci_trans_cfg_ll
0000e6b8 g     F .text	00000010 console_printint
0001b3c0 g     F .text	0000000e ble_store_read_our_sec
0001d20c g     F .text	000000b2 ble_att_svr_rx_prep_write
0001e9b8 g     F .text	00000064 hal_timer_stop
20003c50 g     O .bss	00000018 sensor_base_ts
0000b0d2 g     F .text	000000f2 _ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE
0000b468 g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h693fa46abaaed1e2E
00025670 g     F .text	0000000c ble_ll_resolv_get_rpa_tmo
0000fee8 g     F .text	0000002e sensor_mgr_match_bytype
0002567c g     F .text	0000004a ble_ll_resolv_get_priv_addr
0001bc8c g     F .text	00000066 ble_att_clt_tx_prep_write
0000e9b4 g     F .text	00000020 json_rep_new
00010e92 g     F .text	00000036 os_mbuf_get_pkthdr
20004640 g     O .bss	000000f0 ble_store_config_our_secs
00028884 g     F .text	00000008 ble_phy_rfclk_enable
00029cd8  w    F .text	00000002 .hidden __aeabi_idiv0
0000c492 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E
0001cfcc g     F .text	00000080 ble_att_svr_rx_read_blob
20003d70 g     O .bss	00000002 ble_hs_max_client_configs
0000b2ce g     F .text	00000012 _ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17ha96fa3cb38da5ddbE
000164c8 g     F .text	00000020 ble_gatts_conn_can_alloc
00017e18 g     F .text	00000008 ble_hs_hci_cmd_build_le_set_adv_params
0002903e g     F .text	00000034 conf_set_value
0000e948 g     F .text	00000044 init_sensor_post
000277b0 g     F .text	00000008 ble_ll_whitelist_enable
000168d8 g     F .text	00000014 ble_hs_lock_nested
00017e76 g     F .text	00000008 ble_hs_hci_cmd_build_le_conn_param_reply
000098b8 g     F .text	00000018 _ZN4core3ptr5write17hf10a8032013a1e53E
00017232 g     F .text	00000010 ble_hs_adv_set_fields
0002c96c g     O .text	00000028 g_ble_ll_supp_cmds
00011fbc g     F .text	000000d8 os_task_init
000081fc g     F .text	0000004c hal_system_clock_start
0001b47c g     F .text	0000002a ble_store_key_from_value_sec
0000e02a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17hc8816b6e2fbd78aaE
0000815a  w    F .text	00000002 BusFault_Handler
00018ed4 g     F .text	00000018 ble_hs_stop_init
0000b690 g     F .text	0000002a _ZN6mynewt4libs14sensor_network12prepare_post17hfdaf25fbf86be5c2E
0001a2ce g     F .text	00000078 ble_sm_ia_ra
00016ac4 g     F .text	0000003c ble_hs_enqueue_hci_event
00024fa6 g     F .text	00000068 ble_ll_hci_ev_encrypt_chg
000125a0 g     F .text	00000010 strlen
00008b04 g     F .text	0000004c .hidden _ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE
00010b6c g     F .text	00000040 os_dev_create
0001739e g     F .text	0000002e ble_hs_conn_delete_chan
000117b8 g     F .text	0000001e os_memblock_put_from_cb
00028878 g     F .text	0000000c ble_phy_resolv_list_disable
000094f0 g     F .text	00000014 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h35bdf6245f6900b2E
20004140 g     O .bss	00000020 g_ble_ll_rnum_buf
00010c84 g     F .text	00000010 os_eventq_init
0001bbd2 g     F .text	0000000e ble_att_clt_rx_read_mult
00012148 g     F .text	00000040 os_time_advance
00023198 g     F .text	00000032 ble_ll_conn_hci_rd_auth_pyld_tmo
0002123c g     F .text	00000018 ble_ll_conn_get_ce_end_time
00011e4c g     F .text	0000002c os_sched_resort
0001b67e g     F .text	00000024 ble_uuid_to_mbuf
00017e38 g     F .text	00000008 ble_hs_hci_cmd_build_disconnect
0000a2e2 g     F .text	00000022 _ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17he095d1e83d7c72c3E
000136fe g     F .text	0000002a ble_gap_conn_find
00011614 g     F .text	00000018 os_mbuf_prepend_pullup
0000c28e g     F .text	0000000c .hidden _ZN4core3ptr18real_drop_in_place17h234732f6022e6554E
0001b77a g     F .text	0000000e ble_att_conn_chan_find
0000b418 g     F .text	00000028 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2367f9954f2505edE
0002979a g     F .text	00000028 hal_flash_init
0001eb64 g     F .text	0000000a get_le16
00021a74 g     F .text	00000030 ble_ll_conn_connect_ind_send
0002988c g     F .text	00000014 strchr
00008164  w    F .text	00000002 MWU_IRQHandler
000137a0 g     F .text	0000003e ble_gap_rx_phy_update_complete
000225e0 g     F .text	000000b8 ble_ll_conn_module_reset
0001d572 g     F .text	000000e6 ble_sm_alg_c1
00008158  w    F .text	00000002 MemoryManagement_Handler
000141e4 g     F .text	000000c4 ble_gap_preempt_done
000202b8 g     F .text	0000000c ble_ll_adv_read_txpwr
0001589a g     F .text	0000001e ble_gattc_rx_write_rsp
0001b008 g     F .text	00000034 ble_sm_cmd_get
0001b93a g     F .text	00000064 ble_att_clt_rx_mtu
00017a5c g     F .text	0000000c ble_hs_hci_get_hci_version
20004130 g     O .bss	00000000 ble_ll_conn_stats
0001d6f0 g     F .text	00000024 ble_hci_trans_hs_acl_tx
0001696c g     F .text	00000014 ble_hs_is_enabled
0001e6e8 g     F .text	00000010 nrf52_timer5_irq_handler
000222f0 g     F .text	000000a6 ble_ll_conn_enqueue_pkt
00020150 g     F .text	0000001c ble_ll_adv_event_rmvd_from_sched
000187c0 g     F .text	0000000c ble_hs_log_flat_buf
000202c4 g     F .text	00000038 ble_ll_adv_set_enable
0000a326 g     F .text	00000026 _ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h5dfc35f677b1147aE
00023c2a g     F .text	00000070 ble_ll_ctrl_chk_proc_start
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0001028e g     F .text	0000001e sensor_init
000196c4 g     F .text	00000036 ble_l2cap_sig_reject_tx
00027c14 g     F .text	00000028 ble_hw_resolv_list_match
0001d1b6 g     F .text	00000040 ble_att_svr_rx_write_no_rsp
0001c904 g     F .text	00000050 ble_att_svr_register
00010bac g     F .text	0000002c os_dev_initialize_all
00018908 g     F .text	00000026 ble_mqueue_get
00022698 g     F .text	00000054 ble_ll_conn_module_init
000273f0 g     F .text	00000074 ble_ll_sched_rmv_elem
0000e4f0 g     F .text	00000026 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17h97d3cc39ae689800E
00018880 g     F .text	00000030 ble_hs_misc_conn_chan_find
0001561e g     F .text	0000000c ble_gatts_indicate_fail_notconn
00017306 g     F .text	0000001c ble_hs_atomic_first_conn_handle
00027e7c g     F .text	00000004 ble_phy_get_cur_phy
20000194 g     O .data	00000008 g_os_sleep_list
00012b78 g     F .text	00000058 jrand48
00018a1c g     F .text	00000028 ble_hs_pvcy_ensure_started
00023f98 g     F .text	00000384 ble_ll_ctrl_rx_pdu
0001e17c g     F .text	0000000c hal_bsp_init
0001593a g     F .text	0000000c ble_gattc_connection_broken
00010898 g     F .text	00000038 os_pkg_init
000282c8 g     F .text	00000044 ble_phy_setchan
20004130 g     O .bss	00000004 g_ble_ll_conn_active_list
0002296c g     F .text	00000104 ble_ll_conn_num_comp_pkts_event_send
000269c0 g     F .text	000000e4 ble_ll_scan_set_enable
00025264 g     F .text	0000001c ble_ll_rand_start
00013c72 g     F .text	00000054 ble_gap_rx_disconn_complete
00028f68 g     F .text	0000002c conf_init
00011b4c g     F .text	00000010 os_sanity_check_init
000253f4 g     F .text	00000018 ble_ll_resolv_irk_nonzero
0002584c g     F .text	0000001c ble_ll_resolv_list_reset
000276dc g     F .text	0000002c ble_ll_whitelist_clear
00017414 g     F .text	00000074 ble_hs_conn_alloc
0001795c g     F .text	00000020 ble_hs_hci_rx_evt
00021aa4 g     F .text	0000002c ble_ll_conn_event_halt
00012afc g     F .text	00000008 vfprintf
0000c39a g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE
000298e0 g     F .text	00000034 strpbrk
0001ee94 g     F .text	00000002 oc_register_serial
00025720 g     F .text	00000034 ble_ll_resolv_gen_rpa
20003cc0 g     O .bss	00000050 g_os_main_task
00017ec0 g     F .text	0000001c ble_hs_hci_cmd_build_set_random_addr
00012450 g     F .text	0000002c free
0001ee92 g     F .text	00000002 oc_register_lora
0001ee64 g     F .text	00000028 temp_stub_config



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	00012203 	.word	0x00012203
	...
    8058:	00012249 	.word	0x00012249
    805c:	0001228f 	.word	0x0001228f
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f844 	bl	81b4 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000250 	.word	0x20000250
    ldr     r3, =__bss_end__
    8134:	20004744 	.word	0x20004744
    ldr    r1, =__etext
    8138:	0002cad4 	.word	0x0002cad4
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	2000022c 	.word	0x2000022c
    LDR     R0, =__HeapBase
    8144:	20004748 	.word	0x20004748
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	00008469 	.word	0x00008469
    LDR     R0, =_start
    8150:	0000863d 	.word	0x0000863d

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <_sbrk>:
void *
_sbrk(int incr)
{
    void *prev_brk;

    if (incr < 0) {
    8178:	1e03      	subs	r3, r0, #0
    817a:	db09      	blt.n	8190 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
    817c:	4a0c      	ldr	r2, [pc, #48]	; (81b0 <_sbrk+0x38>)
    817e:	6890      	ldr	r0, [r2, #8]
    8180:	6852      	ldr	r2, [r2, #4]
    8182:	1a12      	subs	r2, r2, r0
    8184:	429a      	cmp	r2, r3
    8186:	db0f      	blt.n	81a8 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
    8188:	4403      	add	r3, r0
    818a:	4a09      	ldr	r2, [pc, #36]	; (81b0 <_sbrk+0x38>)
    818c:	6093      	str	r3, [r2, #8]
    818e:	4770      	bx	lr
        if (brk - incr < sbrkBase) {
    8190:	4a07      	ldr	r2, [pc, #28]	; (81b0 <_sbrk+0x38>)
    8192:	6890      	ldr	r0, [r2, #8]
    8194:	4403      	add	r3, r0
    8196:	6812      	ldr	r2, [r2, #0]
    8198:	4293      	cmp	r3, r2
    819a:	d302      	bcc.n	81a2 <_sbrk+0x2a>
            brk -= incr;
    819c:	4a04      	ldr	r2, [pc, #16]	; (81b0 <_sbrk+0x38>)
    819e:	6093      	str	r3, [r2, #8]
    81a0:	4770      	bx	lr
            prev_brk = (void *)-1;
    81a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    81a6:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
    81a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }

    return prev_brk;
}
    81ac:	4770      	bx	lr
    81ae:	bf00      	nop
    81b0:	200000d8 	.word	0x200000d8

000081b4 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    81b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81b8:	2201      	movs	r2, #1
    81ba:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    81be:	4770      	bx	lr

000081c0 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    81c0:	4b02      	ldr	r3, [pc, #8]	; (81cc <hal_debugger_connected+0xc>)
    81c2:	6818      	ldr	r0, [r3, #0]
}
    81c4:	f000 0001 	and.w	r0, r0, #1
    81c8:	4770      	bx	lr
    81ca:	bf00      	nop
    81cc:	e000edf0 	.word	0xe000edf0

000081d0 <hal_system_reset>:
{
    81d0:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    81d2:	f7ff fff5 	bl	81c0 <hal_debugger_connected>
    81d6:	b100      	cbz	r0, 81da <hal_system_reset+0xa>
            asm("bkpt");
    81d8:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    81da:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81de:	4905      	ldr	r1, [pc, #20]	; (81f4 <hal_system_reset+0x24>)
    81e0:	68ca      	ldr	r2, [r1, #12]
    81e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81e6:	4b04      	ldr	r3, [pc, #16]	; (81f8 <hal_system_reset+0x28>)
    81e8:	4313      	orrs	r3, r2
    81ea:	60cb      	str	r3, [r1, #12]
    81ec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81f0:	bf00      	nop
    81f2:	e7fd      	b.n	81f0 <hal_system_reset+0x20>
    81f4:	e000ed00 	.word	0xe000ed00
    81f8:	05fa0004 	.word	0x05fa0004

000081fc <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8200:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8204:	4b0f      	ldr	r3, [pc, #60]	; (8244 <hal_system_clock_start+0x48>)
    8206:	4013      	ands	r3, r2
    8208:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    820c:	d018      	beq.n	8240 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    820e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8212:	2201      	movs	r2, #1
    8214:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    8216:	2100      	movs	r1, #0
    8218:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    821c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    8220:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    8222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8226:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    822a:	2b00      	cmp	r3, #0
    822c:	d0f9      	beq.n	8222 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    822e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8232:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8236:	4b03      	ldr	r3, [pc, #12]	; (8244 <hal_system_clock_start+0x48>)
    8238:	4013      	ands	r3, r2
    823a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    823e:	d1f0      	bne.n	8222 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8240:	4770      	bx	lr
    8242:	bf00      	nop
    8244:	00010003 	.word	0x00010003

00008248 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0b      	ldr	r3, [pc, #44]	; (8278 <errata_16+0x30>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b09      	ldr	r3, [pc, #36]	; (827c <errata_16+0x34>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d107      	bne.n	826e <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b08      	ldr	r3, [pc, #32]	; (8280 <errata_16+0x38>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d003      	beq.n	8272 <errata_16+0x2a>
    return false;
    826a:	2000      	movs	r0, #0
    826c:	4770      	bx	lr
    826e:	2000      	movs	r0, #0
    8270:	4770      	bx	lr
            return true;
    8272:	2001      	movs	r0, #1
}
    8274:	4770      	bx	lr
    8276:	bf00      	nop
    8278:	f0000fe0 	.word	0xf0000fe0
    827c:	f0000fe4 	.word	0xf0000fe4
    8280:	f0000fe8 	.word	0xf0000fe8

00008284 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8284:	4b0f      	ldr	r3, [pc, #60]	; (82c4 <errata_31+0x40>)
    8286:	781b      	ldrb	r3, [r3, #0]
    8288:	2b06      	cmp	r3, #6
    828a:	d001      	beq.n	8290 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    828c:	2000      	movs	r0, #0
    828e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8290:	4b0d      	ldr	r3, [pc, #52]	; (82c8 <errata_31+0x44>)
    8292:	681b      	ldr	r3, [r3, #0]
    8294:	f013 0f0f 	tst.w	r3, #15
    8298:	d10b      	bne.n	82b2 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    829a:	4b0c      	ldr	r3, [pc, #48]	; (82cc <errata_31+0x48>)
    829c:	681b      	ldr	r3, [r3, #0]
    829e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82a2:	2b30      	cmp	r3, #48	; 0x30
    82a4:	d007      	beq.n	82b6 <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82a6:	2b40      	cmp	r3, #64	; 0x40
    82a8:	d007      	beq.n	82ba <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82aa:	2b50      	cmp	r3, #80	; 0x50
    82ac:	d007      	beq.n	82be <errata_31+0x3a>
    return false;
    82ae:	2000      	movs	r0, #0
    82b0:	4770      	bx	lr
    82b2:	2000      	movs	r0, #0
    82b4:	4770      	bx	lr
            return true;
    82b6:	2001      	movs	r0, #1
    82b8:	4770      	bx	lr
            return true;
    82ba:	2001      	movs	r0, #1
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0b      	ldr	r3, [pc, #44]	; (8300 <errata_32+0x30>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b09      	ldr	r3, [pc, #36]	; (8304 <errata_32+0x34>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d107      	bne.n	82f6 <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b08      	ldr	r3, [pc, #32]	; (8308 <errata_32+0x38>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d003      	beq.n	82fa <errata_32+0x2a>
    return false;
    82f2:	2000      	movs	r0, #0
    82f4:	4770      	bx	lr
    82f6:	2000      	movs	r0, #0
    82f8:	4770      	bx	lr
            return true;
    82fa:	2001      	movs	r0, #1
}
    82fc:	4770      	bx	lr
    82fe:	bf00      	nop
    8300:	f0000fe0 	.word	0xf0000fe0
    8304:	f0000fe4 	.word	0xf0000fe4
    8308:	f0000fe8 	.word	0xf0000fe8

0000830c <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    830c:	4b0f      	ldr	r3, [pc, #60]	; (834c <errata_36+0x40>)
    830e:	781b      	ldrb	r3, [r3, #0]
    8310:	2b06      	cmp	r3, #6
    8312:	d001      	beq.n	8318 <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8314:	2000      	movs	r0, #0
    8316:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8318:	4b0d      	ldr	r3, [pc, #52]	; (8350 <errata_36+0x44>)
    831a:	681b      	ldr	r3, [r3, #0]
    831c:	f013 0f0f 	tst.w	r3, #15
    8320:	d10b      	bne.n	833a <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8322:	4b0c      	ldr	r3, [pc, #48]	; (8354 <errata_36+0x48>)
    8324:	681b      	ldr	r3, [r3, #0]
    8326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    832a:	2b30      	cmp	r3, #48	; 0x30
    832c:	d007      	beq.n	833e <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    832e:	2b40      	cmp	r3, #64	; 0x40
    8330:	d007      	beq.n	8342 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8332:	2b50      	cmp	r3, #80	; 0x50
    8334:	d007      	beq.n	8346 <errata_36+0x3a>
    return false;
    8336:	2000      	movs	r0, #0
    8338:	4770      	bx	lr
    833a:	2000      	movs	r0, #0
    833c:	4770      	bx	lr
            return true;
    833e:	2001      	movs	r0, #1
    8340:	4770      	bx	lr
            return true;
    8342:	2001      	movs	r0, #1
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_37+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_37+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_37+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_37+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_57+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_57+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_57+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b30      	cmp	r3, #48	; 0x30
    83b4:	d003      	beq.n	83be <errata_57+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0b      	ldr	r3, [pc, #44]	; (8400 <errata_66+0x30>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b09      	ldr	r3, [pc, #36]	; (8404 <errata_66+0x34>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d107      	bne.n	83f6 <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83e6:	4b08      	ldr	r3, [pc, #32]	; (8408 <errata_66+0x38>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b50      	cmp	r3, #80	; 0x50
    83f0:	d003      	beq.n	83fa <errata_66+0x2a>
    return false;
    83f2:	2000      	movs	r0, #0
    83f4:	4770      	bx	lr
    83f6:	2000      	movs	r0, #0
    83f8:	4770      	bx	lr
            return true;
    83fa:	2001      	movs	r0, #1
}
    83fc:	4770      	bx	lr
    83fe:	bf00      	nop
    8400:	f0000fe0 	.word	0xf0000fe0
    8404:	f0000fe4 	.word	0xf0000fe4
    8408:	f0000fe8 	.word	0xf0000fe8

0000840c <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    840c:	4b0f      	ldr	r3, [pc, #60]	; (844c <errata_108+0x40>)
    840e:	781b      	ldrb	r3, [r3, #0]
    8410:	2b06      	cmp	r3, #6
    8412:	d001      	beq.n	8418 <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8414:	2000      	movs	r0, #0
    8416:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8418:	4b0d      	ldr	r3, [pc, #52]	; (8450 <errata_108+0x44>)
    841a:	681b      	ldr	r3, [r3, #0]
    841c:	f013 0f0f 	tst.w	r3, #15
    8420:	d10b      	bne.n	843a <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8422:	4b0c      	ldr	r3, [pc, #48]	; (8454 <errata_108+0x48>)
    8424:	681b      	ldr	r3, [r3, #0]
    8426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    842a:	2b30      	cmp	r3, #48	; 0x30
    842c:	d007      	beq.n	843e <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    842e:	2b40      	cmp	r3, #64	; 0x40
    8430:	d007      	beq.n	8442 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8432:	2b50      	cmp	r3, #80	; 0x50
    8434:	d007      	beq.n	8446 <errata_108+0x3a>
    return false;
    8436:	2000      	movs	r0, #0
    8438:	4770      	bx	lr
    843a:	2000      	movs	r0, #0
    843c:	4770      	bx	lr
            return true;
    843e:	2001      	movs	r0, #1
    8440:	4770      	bx	lr
            return true;
    8442:	2001      	movs	r0, #1
    8444:	4770      	bx	lr
            return true;
    8446:	2001      	movs	r0, #1
}
    8448:	4770      	bx	lr
    844a:	bf00      	nop
    844c:	f0000fe0 	.word	0xf0000fe0
    8450:	f0000fe4 	.word	0xf0000fe4
    8454:	f0000fe8 	.word	0xf0000fe8

00008458 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8458:	4b01      	ldr	r3, [pc, #4]	; (8460 <SystemCoreClockUpdate+0x8>)
    845a:	4a02      	ldr	r2, [pc, #8]	; (8464 <SystemCoreClockUpdate+0xc>)
    845c:	601a      	str	r2, [r3, #0]
}
    845e:	4770      	bx	lr
    8460:	200000e4 	.word	0x200000e4
    8464:	03d09000 	.word	0x03d09000

00008468 <SystemInit>:
{
    8468:	b508      	push	{r3, lr}
    if (errata_16()){
    846a:	f7ff feed 	bl	8248 <errata_16>
    846e:	b110      	cbz	r0, 8476 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8470:	4b65      	ldr	r3, [pc, #404]	; (8608 <SystemInit+0x1a0>)
    8472:	4a66      	ldr	r2, [pc, #408]	; (860c <SystemInit+0x1a4>)
    8474:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    8476:	f7ff ff05 	bl	8284 <errata_31>
    847a:	b128      	cbz	r0, 8488 <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    847c:	4b64      	ldr	r3, [pc, #400]	; (8610 <SystemInit+0x1a8>)
    847e:	681b      	ldr	r3, [r3, #0]
    8480:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8484:	4a63      	ldr	r2, [pc, #396]	; (8614 <SystemInit+0x1ac>)
    8486:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    8488:	f7ff ff22 	bl	82d0 <errata_32>
    848c:	b120      	cbz	r0, 8498 <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    848e:	4a62      	ldr	r2, [pc, #392]	; (8618 <SystemInit+0x1b0>)
    8490:	68d3      	ldr	r3, [r2, #12]
    8492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    8496:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    8498:	f7ff ff38 	bl	830c <errata_36>
    849c:	b140      	cbz	r0, 84b0 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    849e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84a2:	2200      	movs	r2, #0
    84a4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    84a8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    84ac:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    84b0:	f7ff ff52 	bl	8358 <errata_37>
    84b4:	b110      	cbz	r0, 84bc <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    84b6:	4b59      	ldr	r3, [pc, #356]	; (861c <SystemInit+0x1b4>)
    84b8:	2203      	movs	r2, #3
    84ba:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    84bc:	f7ff ff6a 	bl	8394 <errata_57>
    84c0:	b158      	cbz	r0, 84da <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    84c2:	4b57      	ldr	r3, [pc, #348]	; (8620 <SystemInit+0x1b8>)
    84c4:	2205      	movs	r2, #5
    84c6:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    84c8:	3378      	adds	r3, #120	; 0x78
    84ca:	2201      	movs	r2, #1
    84cc:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    84ce:	3b70      	subs	r3, #112	; 0x70
    84d0:	2200      	movs	r2, #0
    84d2:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    84d4:	3b04      	subs	r3, #4
    84d6:	223f      	movs	r2, #63	; 0x3f
    84d8:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    84da:	f7ff ff79 	bl	83d0 <errata_66>
    84de:	2800      	cmp	r0, #0
    84e0:	d046      	beq.n	8570 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84e6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ea:	4b4e      	ldr	r3, [pc, #312]	; (8624 <SystemInit+0x1bc>)
    84ec:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84f0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84f4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84f8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84fc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8500:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8504:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    8508:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    850c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8510:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8514:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    8518:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    851c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8520:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8524:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    8528:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    852c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8530:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8534:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    8538:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    853c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8540:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8544:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    8548:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    854c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8550:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8554:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    8558:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    855c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8560:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8564:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    8568:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    856c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8570:	f7ff ff4c 	bl	840c <errata_108>
    8574:	b128      	cbz	r0, 8582 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    8576:	4b2c      	ldr	r3, [pc, #176]	; (8628 <SystemInit+0x1c0>)
    8578:	681b      	ldr	r3, [r3, #0]
    857a:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    857e:	4a2b      	ldr	r2, [pc, #172]	; (862c <SystemInit+0x1c4>)
    8580:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8582:	4a2b      	ldr	r2, [pc, #172]	; (8630 <SystemInit+0x1c8>)
    8584:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    8588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    858c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8590:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8594:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    8598:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    859c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    85a0:	f013 0f01 	tst.w	r3, #1
    85a4:	d104      	bne.n	85b0 <SystemInit+0x148>
    SystemCoreClockUpdate();
    85a6:	f7ff ff57 	bl	8458 <SystemCoreClockUpdate>
    NVIC_Relocate();
    85aa:	f007 fc17 	bl	fddc <NVIC_Relocate>
}
    85ae:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    85b0:	4b20      	ldr	r3, [pc, #128]	; (8634 <SystemInit+0x1cc>)
    85b2:	2201      	movs	r2, #1
    85b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85b8:	4b1e      	ldr	r3, [pc, #120]	; (8634 <SystemInit+0x1cc>)
    85ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85be:	2b00      	cmp	r3, #0
    85c0:	d0fa      	beq.n	85b8 <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    85c2:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    85c6:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    85ca:	f023 0301 	bic.w	r3, r3, #1
    85ce:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85d2:	4b18      	ldr	r3, [pc, #96]	; (8634 <SystemInit+0x1cc>)
    85d4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85d8:	2b00      	cmp	r3, #0
    85da:	d0fa      	beq.n	85d2 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85dc:	4b15      	ldr	r3, [pc, #84]	; (8634 <SystemInit+0x1cc>)
    85de:	2200      	movs	r2, #0
    85e0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85e4:	4b13      	ldr	r3, [pc, #76]	; (8634 <SystemInit+0x1cc>)
    85e6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ea:	2b00      	cmp	r3, #0
    85ec:	d0fa      	beq.n	85e4 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85ee:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85f2:	490f      	ldr	r1, [pc, #60]	; (8630 <SystemInit+0x1c8>)
    85f4:	68ca      	ldr	r2, [r1, #12]
    85f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85fa:	4b0f      	ldr	r3, [pc, #60]	; (8638 <SystemInit+0x1d0>)
    85fc:	4313      	orrs	r3, r2
    85fe:	60cb      	str	r3, [r1, #12]
    8600:	f3bf 8f4f 	dsb	sy
    __NOP();
    8604:	bf00      	nop
    8606:	e7fd      	b.n	8604 <SystemInit+0x19c>
    8608:	4007c074 	.word	0x4007c074
    860c:	baadf00d 	.word	0xbaadf00d
    8610:	10000244 	.word	0x10000244
    8614:	4000053c 	.word	0x4000053c
    8618:	e000edf0 	.word	0xe000edf0
    861c:	400005a0 	.word	0x400005a0
    8620:	40005610 	.word	0x40005610
    8624:	4000c000 	.word	0x4000c000
    8628:	10000258 	.word	0x10000258
    862c:	40000ee4 	.word	0x40000ee4
    8630:	e000ed00 	.word	0xe000ed00
    8634:	4001e000 	.word	0x4001e000
    8638:	05fa0004 	.word	0x05fa0004

0000863c <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    863c:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    863e:	4803      	ldr	r0, [pc, #12]	; (864c <_start+0x10>)
    8640:	f008 f8c4 	bl	107cc <os_init>
    os_start();
    8644:	f008 f91a 	bl	1087c <os_start>
#endif
}
    8648:	bd08      	pop	{r3, pc}
    864a:	bf00      	nop
    864c:	00008653 	.word	0x00008653

00008650 <_init>:

void
_init(void)
{
}
    8650:	4770      	bx	lr

00008652 <main>:
};

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8652:	b086      	sub	sp, #24
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8654:	f000 fc58 	bl	8f08 <_ZN6mynewt7sysinit17hfbb6001f0140a448E>
    8658:	e7ff      	b.n	865a <main+0x8>
    //  Start the Server Transport for sending sensor data to CoAP Server over NB-IoT.
    //sensor_network::start_server_transport()
        //.expect("NET fail");

    //  Start polling the temperature sensor every 10 seconds in the background.
    app_sensor::start_sensor_listener()
    865a:	f001 f953 	bl	9904 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E>
    865e:	9002      	str	r0, [sp, #8]
    8660:	e7ff      	b.n	8662 <main+0x10>
    8662:	f649 41e0 	movw	r1, #40160	; 0x9ce0
    8666:	f2c0 0102 	movt	r1, #2
    866a:	2208      	movs	r2, #8
    866c:	9802      	ldr	r0, [sp, #8]
    866e:	f000 f8b1 	bl	87d4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hda19e15c4ec13e31E>
    8672:	e7ff      	b.n	8674 <main+0x22>
    //gps_sensor::start_gps_listener()
        //.expect("GPS fail");

    //  Start Bluetooth LE.  TODO: Create a safe wrapper for starting BLE.
    extern { fn start_ble() -> i32; }
    let rc = unsafe { start_ble() };
    8674:	f007 f9ec 	bl	fa50 <start_ble>
    8678:	9003      	str	r0, [sp, #12]
    867a:	e7ff      	b.n	867c <main+0x2a>
    assert!(rc == 0, "BLE fail");
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	2800      	cmp	r0, #0
    8680:	d007      	beq.n	8692 <main+0x40>
    8682:	e7ff      	b.n	8684 <main+0x32>
    8684:	f649 5014 	movw	r0, #40212	; 0x9d14
    8688:	f2c0 0002 	movt	r0, #2
    868c:	f004 f8de 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    8690:	defe      	udf	#254	; 0xfe

    //  Main event loop
    loop {                            //  Loop forever...
    8692:	e7ff      	b.n	8694 <main+0x42>
    8694:	a804      	add	r0, sp, #16
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8696:	f000 f917 	bl	88c8 <_ZN6mynewt6kernel2os15eventq_dflt_get17hfdc26cb533694dccE>
    869a:	e7ff      	b.n	869c <main+0x4a>
    869c:	f649 41f0 	movw	r1, #40176	; 0x9cf0
    86a0:	f2c0 0102 	movt	r1, #2
    86a4:	a804      	add	r0, sp, #16
    86a6:	2208      	movs	r2, #8
    86a8:	f000 f867 	bl	877a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h971a4fb20f73df2aE>
    86ac:	9001      	str	r0, [sp, #4]
    86ae:	e7ff      	b.n	86b0 <main+0x5e>
        os::eventq_run(               //  Processing events...
    86b0:	9801      	ldr	r0, [sp, #4]
    86b2:	f000 f8f9 	bl	88a8 <_ZN6mynewt6kernel2os10eventq_run17h35180d98e8e522beE>
    86b6:	9000      	str	r0, [sp, #0]
    86b8:	e7ff      	b.n	86ba <main+0x68>
    86ba:	f649 41f8 	movw	r1, #40184	; 0x9cf8
    86be:	f2c0 0102 	movt	r1, #2
    86c2:	2208      	movs	r2, #8
    86c4:	9800      	ldr	r0, [sp, #0]
    86c6:	f000 f885 	bl	87d4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hda19e15c4ec13e31E>
    86ca:	e7ff      	b.n	86cc <main+0x7a>
    loop {                            //  Loop forever...
    86cc:	e7e2      	b.n	8694 <main+0x42>

000086ce <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86ce:	b088      	sub	sp, #32
    86d0:	4601      	mov	r1, r0
    86d2:	9002      	str	r0, [sp, #8]
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f649 502c 	movw	r0, #40236	; 0x9d2c
    86d8:	f2c0 0002 	movt	r0, #2
    86dc:	2206      	movs	r2, #6
    86de:	9101      	str	r1, [sp, #4]
    86e0:	4611      	mov	r1, r2
    86e2:	f000 f8ff 	bl	88e4 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E>
    86e6:	e7ff      	b.n	86e8 <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86e8:	9802      	ldr	r0, [sp, #8]
    86ea:	f004 f8a7 	bl	c83c <_ZN4core5panic9PanicInfo8location17h5226165d8771f8a2E>
    86ee:	9003      	str	r0, [sp, #12]
    86f0:	e7ff      	b.n	86f2 <rust_begin_unwind+0x24>
    86f2:	9803      	ldr	r0, [sp, #12]
    86f4:	2800      	cmp	r0, #0
    86f6:	d032      	beq.n	875e <rust_begin_unwind+0x90>
    86f8:	e7ff      	b.n	86fa <rust_begin_unwind+0x2c>
    86fa:	9803      	ldr	r0, [sp, #12]
    86fc:	9004      	str	r0, [sp, #16]
        let file = location.file();
    86fe:	9804      	ldr	r0, [sp, #16]
    8700:	f004 f89e 	bl	c840 <_ZN4core5panic8Location4file17h94cc6af18de736c4E>
    8704:	9106      	str	r1, [sp, #24]
    8706:	9005      	str	r0, [sp, #20]
    8708:	e7ff      	b.n	870a <rust_begin_unwind+0x3c>
        let line = location.line();
    870a:	9804      	ldr	r0, [sp, #16]
    870c:	f004 f89c 	bl	c848 <_ZN4core5panic8Location4line17h3ffc63f14d0a6636E>
    8710:	9007      	str	r0, [sp, #28]
    8712:	e7ff      	b.n	8714 <rust_begin_unwind+0x46>
        console::print("at ");       console::buffer(&file);
    8714:	f649 5039 	movw	r0, #40249	; 0x9d39
    8718:	f2c0 0002 	movt	r0, #2
    871c:	2103      	movs	r1, #3
    871e:	f000 f8e1 	bl	88e4 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E>
    8722:	e7ff      	b.n	8724 <rust_begin_unwind+0x56>
    8724:	9805      	ldr	r0, [sp, #20]
    8726:	9906      	ldr	r1, [sp, #24]
    8728:	f000 f90d 	bl	8946 <_ZN6mynewt3sys7console6buffer17h937c567b6e383806E>
    872c:	e7ff      	b.n	872e <rust_begin_unwind+0x60>
        console::print(" line ");    console::printint(line as i32);
    872e:	f649 503c 	movw	r0, #40252	; 0x9d3c
    8732:	f2c0 0002 	movt	r0, #2
    8736:	2106      	movs	r1, #6
    8738:	f000 f8d4 	bl	88e4 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E>
    873c:	e7ff      	b.n	873e <rust_begin_unwind+0x70>
    873e:	9807      	ldr	r0, [sp, #28]
    8740:	f000 f91c 	bl	897c <_ZN6mynewt3sys7console8printint17h732f7e3d3f1828c1E>
    8744:	e7ff      	b.n	8746 <rust_begin_unwind+0x78>
        console::print("\n");        console::flush();
    8746:	f649 5042 	movw	r0, #40258	; 0x9d42
    874a:	f2c0 0002 	movt	r0, #2
    874e:	2101      	movs	r1, #1
    8750:	f000 f8c8 	bl	88e4 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E>
    8754:	e7ff      	b.n	8756 <rust_begin_unwind+0x88>
    8756:	f000 f91c 	bl	8992 <_ZN6mynewt3sys7console5flush17h498d792c115b7281E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8e>
    if let Some(location) = info.location() {
    875c:	e00a      	b.n	8774 <rust_begin_unwind+0xa6>
    } else {
        console::print("no loc\n");  console::flush();
    875e:	f649 5032 	movw	r0, #40242	; 0x9d32
    8762:	f2c0 0002 	movt	r0, #2
    8766:	2107      	movs	r1, #7
    8768:	f000 f8bc 	bl	88e4 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E>
    876c:	e7ff      	b.n	876e <rust_begin_unwind+0xa0>
    876e:	f000 f910 	bl	8992 <_ZN6mynewt3sys7console5flush17h498d792c115b7281E>
    8772:	e7ff      	b.n	8774 <rust_begin_unwind+0xa6>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    8774:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    8776:	e7ff      	b.n	8778 <rust_begin_unwind+0xaa>
    //  Loop forever so that device won't restart.
    loop {}
    8778:	e7fe      	b.n	8778 <rust_begin_unwind+0xaa>

0000877a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h971a4fb20f73df2aE>:
    877a:	b580      	push	{r7, lr}
    877c:	b08a      	sub	sp, #40	; 0x28
    877e:	4613      	mov	r3, r2
    8780:	468c      	mov	ip, r1
    8782:	4686      	mov	lr, r0
    8784:	9106      	str	r1, [sp, #24]
    8786:	9207      	str	r2, [sp, #28]
    8788:	6800      	ldr	r0, [r0, #0]
    878a:	2800      	cmp	r0, #0
    878c:	9305      	str	r3, [sp, #20]
    878e:	f8cd c010 	str.w	ip, [sp, #16]
    8792:	f8cd e00c 	str.w	lr, [sp, #12]
    8796:	9002      	str	r0, [sp, #8]
    8798:	d005      	beq.n	87a6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h971a4fb20f73df2aE+0x2c>
    879a:	e7ff      	b.n	879c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h971a4fb20f73df2aE+0x22>
    879c:	9802      	ldr	r0, [sp, #8]
    879e:	2801      	cmp	r0, #1
    87a0:	d00b      	beq.n	87ba <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h971a4fb20f73df2aE+0x40>
    87a2:	e7ff      	b.n	87a4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h971a4fb20f73df2aE+0x2a>
    87a4:	defe      	udf	#254	; 0xfe
    87a6:	9803      	ldr	r0, [sp, #12]
    87a8:	6841      	ldr	r1, [r0, #4]
    87aa:	9108      	str	r1, [sp, #32]
    87ac:	9808      	ldr	r0, [sp, #32]
    87ae:	9903      	ldr	r1, [sp, #12]
    87b0:	680a      	ldr	r2, [r1, #0]
    87b2:	2a00      	cmp	r2, #0
    87b4:	9001      	str	r0, [sp, #4]
    87b6:	d009      	beq.n	87cc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h971a4fb20f73df2aE+0x52>
    87b8:	e00b      	b.n	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h971a4fb20f73df2aE+0x58>
    87ba:	9803      	ldr	r0, [sp, #12]
    87bc:	6841      	ldr	r1, [r0, #4]
    87be:	9109      	str	r1, [sp, #36]	; 0x24
    87c0:	9806      	ldr	r0, [sp, #24]
    87c2:	9907      	ldr	r1, [sp, #28]
    87c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    87c6:	f000 f929 	bl	8a1c <_ZN4core6result13unwrap_failed17hcd10af70e9ab946bE>
    87ca:	defe      	udf	#254	; 0xfe
    87cc:	9801      	ldr	r0, [sp, #4]
    87ce:	b00a      	add	sp, #40	; 0x28
    87d0:	bd80      	pop	{r7, pc}
    87d2:	e7fb      	b.n	87cc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h971a4fb20f73df2aE+0x52>

000087d4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hda19e15c4ec13e31E>:
    87d4:	b580      	push	{r7, lr}
    87d6:	b08a      	sub	sp, #40	; 0x28
    87d8:	4613      	mov	r3, r2
    87da:	468c      	mov	ip, r1
    87dc:	4686      	mov	lr, r0
    87de:	9005      	str	r0, [sp, #20]
    87e0:	9106      	str	r1, [sp, #24]
    87e2:	9207      	str	r2, [sp, #28]
    87e4:	9805      	ldr	r0, [sp, #20]
    87e6:	1e41      	subs	r1, r0, #1
    87e8:	bf18      	it	ne
    87ea:	2101      	movne	r1, #1
    87ec:	2801      	cmp	r0, #1
    87ee:	9304      	str	r3, [sp, #16]
    87f0:	f8cd c00c 	str.w	ip, [sp, #12]
    87f4:	f8cd e008 	str.w	lr, [sp, #8]
    87f8:	9101      	str	r1, [sp, #4]
    87fa:	d005      	beq.n	8808 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hda19e15c4ec13e31E+0x34>
    87fc:	e7ff      	b.n	87fe <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hda19e15c4ec13e31E+0x2a>
    87fe:	9801      	ldr	r0, [sp, #4]
    8800:	2801      	cmp	r0, #1
    8802:	d005      	beq.n	8810 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hda19e15c4ec13e31E+0x3c>
    8804:	e7ff      	b.n	8806 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hda19e15c4ec13e31E+0x32>
    8806:	defe      	udf	#254	; 0xfe
    8808:	9805      	ldr	r0, [sp, #20]
    880a:	2801      	cmp	r0, #1
    880c:	d008      	beq.n	8820 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hda19e15c4ec13e31E+0x4c>
    880e:	e009      	b.n	8824 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hda19e15c4ec13e31E+0x50>
    8810:	9805      	ldr	r0, [sp, #20]
    8812:	9009      	str	r0, [sp, #36]	; 0x24
    8814:	9806      	ldr	r0, [sp, #24]
    8816:	9907      	ldr	r1, [sp, #28]
    8818:	9a09      	ldr	r2, [sp, #36]	; 0x24
    881a:	f000 f8ff 	bl	8a1c <_ZN4core6result13unwrap_failed17hcd10af70e9ab946bE>
    881e:	defe      	udf	#254	; 0xfe
    8820:	b00a      	add	sp, #40	; 0x28
    8822:	bd80      	pop	{r7, pc}
    8824:	e7fc      	b.n	8820 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hda19e15c4ec13e31E+0x4c>

00008826 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h6d3955e1a79eef94E>:
    8826:	b083      	sub	sp, #12
    8828:	4601      	mov	r1, r0
    882a:	9001      	str	r0, [sp, #4]
    882c:	9801      	ldr	r0, [sp, #4]
    882e:	9002      	str	r0, [sp, #8]
    8830:	9802      	ldr	r0, [sp, #8]
    8832:	9100      	str	r1, [sp, #0]
    8834:	b003      	add	sp, #12
    8836:	4770      	bx	lr

00008838 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h00bf1b57699326cfE>:
    8838:	b082      	sub	sp, #8
    883a:	4601      	mov	r1, r0
    883c:	9001      	str	r0, [sp, #4]
    883e:	9801      	ldr	r0, [sp, #4]
    8840:	9100      	str	r1, [sp, #0]
    8842:	b002      	add	sp, #8
    8844:	4770      	bx	lr

00008846 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h2b975e1f9ec08585E>:
    8846:	b082      	sub	sp, #8
    8848:	460a      	mov	r2, r1
    884a:	4603      	mov	r3, r0
    884c:	f8d1 c000 	ldr.w	ip, [r1]
    8850:	6849      	ldr	r1, [r1, #4]
    8852:	6041      	str	r1, [r0, #4]
    8854:	f8c0 c000 	str.w	ip, [r0]
    8858:	9201      	str	r2, [sp, #4]
    885a:	9300      	str	r3, [sp, #0]
    885c:	b002      	add	sp, #8
    885e:	4770      	bx	lr

00008860 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h470504b6f43ee880E>:
    8860:	b5b0      	push	{r4, r5, r7, lr}
    8862:	b082      	sub	sp, #8
    8864:	460a      	mov	r2, r1
    8866:	4603      	mov	r3, r0
    8868:	e8b1 5030 	ldmia.w	r1!, {r4, r5, ip, lr}
    886c:	e8a0 5030 	stmia.w	r0!, {r4, r5, ip, lr}
    8870:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
    8874:	e880 5030 	stmia.w	r0, {r4, r5, ip, lr}
    8878:	9201      	str	r2, [sp, #4]
    887a:	9300      	str	r3, [sp, #0]
    887c:	b002      	add	sp, #8
    887e:	bdb0      	pop	{r4, r5, r7, pc}

00008880 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5fc8a869c255d083E>:
    8880:	b510      	push	{r4, lr}
    8882:	b082      	sub	sp, #8
    8884:	460a      	mov	r2, r1
    8886:	4603      	mov	r3, r0
    8888:	f8d1 c000 	ldr.w	ip, [r1]
    888c:	f8d1 e004 	ldr.w	lr, [r1, #4]
    8890:	688c      	ldr	r4, [r1, #8]
    8892:	68c9      	ldr	r1, [r1, #12]
    8894:	60c1      	str	r1, [r0, #12]
    8896:	6084      	str	r4, [r0, #8]
    8898:	f8c0 e004 	str.w	lr, [r0, #4]
    889c:	f8c0 c000 	str.w	ip, [r0]
    88a0:	9201      	str	r2, [sp, #4]
    88a2:	9300      	str	r3, [sp, #0]
    88a4:	b002      	add	sp, #8
    88a6:	bd10      	pop	{r4, pc}

000088a8 <_ZN6mynewt6kernel2os10eventq_run17h35180d98e8e522beE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    88a8:	b580      	push	{r7, lr}
    88aa:	b084      	sub	sp, #16
    88ac:	4601      	mov	r1, r0
    88ae:	9001      	str	r0, [sp, #4]
    88b0:	9801      	ldr	r0, [sp, #4]
    88b2:	9100      	str	r1, [sp, #0]
    88b4:	f008 fa64 	bl	10d80 <os_eventq_run>
    88b8:	e7ff      	b.n	88ba <_ZN6mynewt6kernel2os10eventq_run17h35180d98e8e522beE+0x12>
    88ba:	2000      	movs	r0, #0
    88bc:	9002      	str	r0, [sp, #8]
    88be:	2001      	movs	r0, #1
    88c0:	9002      	str	r0, [sp, #8]
    88c2:	9802      	ldr	r0, [sp, #8]
    88c4:	b004      	add	sp, #16
    88c6:	bd80      	pop	{r7, pc}

000088c8 <_ZN6mynewt6kernel2os15eventq_dflt_get17hfdc26cb533694dccE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    88c8:	b580      	push	{r7, lr}
    88ca:	b082      	sub	sp, #8
    88cc:	9000      	str	r0, [sp, #0]
    88ce:	f008 fa83 	bl	10dd8 <os_eventq_dflt_get>
    88d2:	9001      	str	r0, [sp, #4]
    88d4:	e7ff      	b.n	88d6 <_ZN6mynewt6kernel2os15eventq_dflt_get17hfdc26cb533694dccE+0xe>
    88d6:	9801      	ldr	r0, [sp, #4]
    88d8:	9900      	ldr	r1, [sp, #0]
    88da:	6048      	str	r0, [r1, #4]
    88dc:	2000      	movs	r0, #0
    88de:	6008      	str	r0, [r1, #0]
    88e0:	b002      	add	sp, #8
    88e2:	bd80      	pop	{r7, pc}

000088e4 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn print(msg: &str) {
    88e4:	b580      	push	{r7, lr}
    88e6:	b086      	sub	sp, #24
    88e8:	460a      	mov	r2, r1
    88ea:	4603      	mov	r3, r0
    88ec:	9004      	str	r0, [sp, #16]
    88ee:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    88f0:	9804      	ldr	r0, [sp, #16]
    88f2:	9905      	ldr	r1, [sp, #20]
    88f4:	9203      	str	r2, [sp, #12]
    88f6:	9302      	str	r3, [sp, #8]
    88f8:	f000 f86e 	bl	89d8 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17hce9b57fe2054131fE>
    88fc:	9001      	str	r0, [sp, #4]
    88fe:	e7ff      	b.n	8900 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E+0x1c>
    8900:	9804      	ldr	r0, [sp, #16]
    8902:	9905      	ldr	r1, [sp, #20]
    8904:	f000 f84a 	bl	899c <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h3c364589ae20b9a9E>
    8908:	9000      	str	r0, [sp, #0]
    890a:	e7ff      	b.n	890c <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E+0x28>
    890c:	9801      	ldr	r0, [sp, #4]
    890e:	9900      	ldr	r1, [sp, #0]
    8910:	f005 fe62 	bl	e5d8 <console_buffer>
    8914:	e7ff      	b.n	8916 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E+0x32>
}
    8916:	b006      	add	sp, #24
    8918:	bd80      	pop	{r7, pc}

0000891a <_ZN6mynewt3sys7console10print_strn17h6acf88a32c052588E>:

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn print_strn(msg: &crate::Strn) {
    891a:	b580      	push	{r7, lr}
    891c:	b084      	sub	sp, #16
    891e:	4601      	mov	r1, r0
    8920:	9003      	str	r0, [sp, #12]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    8922:	9803      	ldr	r0, [sp, #12]
    8924:	9102      	str	r1, [sp, #8]
    8926:	f000 fbaa 	bl	907e <_ZN6mynewt4Strn6as_ptr17hce51ed792e0d4eabE>
    892a:	9001      	str	r0, [sp, #4]
    892c:	e7ff      	b.n	892e <_ZN6mynewt3sys7console10print_strn17h6acf88a32c052588E+0x14>
    892e:	9803      	ldr	r0, [sp, #12]
    8930:	f000 fbcc 	bl	90cc <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E>
    8934:	9000      	str	r0, [sp, #0]
    8936:	e7ff      	b.n	8938 <_ZN6mynewt3sys7console10print_strn17h6acf88a32c052588E+0x1e>
    8938:	9801      	ldr	r0, [sp, #4]
    893a:	9900      	ldr	r1, [sp, #0]
    893c:	f005 fe4c 	bl	e5d8 <console_buffer>
    8940:	e7ff      	b.n	8942 <_ZN6mynewt3sys7console10print_strn17h6acf88a32c052588E+0x28>
}
    8942:	b004      	add	sp, #16
    8944:	bd80      	pop	{r7, pc}

00008946 <_ZN6mynewt3sys7console6buffer17h937c567b6e383806E>:

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    8946:	b580      	push	{r7, lr}
    8948:	b086      	sub	sp, #24
    894a:	460a      	mov	r2, r1
    894c:	4603      	mov	r3, r0
    894e:	9004      	str	r0, [sp, #16]
    8950:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    8952:	9804      	ldr	r0, [sp, #16]
    8954:	9905      	ldr	r1, [sp, #20]
    8956:	9203      	str	r2, [sp, #12]
    8958:	9302      	str	r3, [sp, #8]
    895a:	f000 f83d 	bl	89d8 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17hce9b57fe2054131fE>
    895e:	9001      	str	r0, [sp, #4]
    8960:	e7ff      	b.n	8962 <_ZN6mynewt3sys7console6buffer17h937c567b6e383806E+0x1c>
    8962:	9804      	ldr	r0, [sp, #16]
    8964:	9905      	ldr	r1, [sp, #20]
    8966:	f000 f819 	bl	899c <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h3c364589ae20b9a9E>
    896a:	9000      	str	r0, [sp, #0]
    896c:	e7ff      	b.n	896e <_ZN6mynewt3sys7console6buffer17h937c567b6e383806E+0x28>
    896e:	9801      	ldr	r0, [sp, #4]
    8970:	9900      	ldr	r1, [sp, #0]
    8972:	f005 fe31 	bl	e5d8 <console_buffer>
    8976:	e7ff      	b.n	8978 <_ZN6mynewt3sys7console6buffer17h937c567b6e383806E+0x32>
}
    8978:	b006      	add	sp, #24
    897a:	bd80      	pop	{r7, pc}

0000897c <_ZN6mynewt3sys7console8printint17h732f7e3d3f1828c1E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    897c:	b580      	push	{r7, lr}
    897e:	b082      	sub	sp, #8
    8980:	4601      	mov	r1, r0
    8982:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    8984:	9801      	ldr	r0, [sp, #4]
    8986:	9100      	str	r1, [sp, #0]
    8988:	f005 fe96 	bl	e6b8 <console_printint>
    898c:	e7ff      	b.n	898e <_ZN6mynewt3sys7console8printint17h732f7e3d3f1828c1E+0x12>
}
    898e:	b002      	add	sp, #8
    8990:	bd80      	pop	{r7, pc}

00008992 <_ZN6mynewt3sys7console5flush17h498d792c115b7281E>:
pub fn printdouble(v: f64) {
    unsafe { console_printdouble(v); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    8992:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    8994:	f005 fdf8 	bl	e588 <console_flush>
    8998:	e7ff      	b.n	899a <_ZN6mynewt3sys7console5flush17h498d792c115b7281E+0x8>
}
    899a:	bd80      	pop	{r7, pc}

0000899c <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h3c364589ae20b9a9E>:
    899c:	b580      	push	{r7, lr}
    899e:	b08c      	sub	sp, #48	; 0x30
    89a0:	460a      	mov	r2, r1
    89a2:	4603      	mov	r3, r0
    89a4:	9006      	str	r0, [sp, #24]
    89a6:	9107      	str	r1, [sp, #28]
    89a8:	9806      	ldr	r0, [sp, #24]
    89aa:	9907      	ldr	r1, [sp, #28]
    89ac:	9008      	str	r0, [sp, #32]
    89ae:	9109      	str	r1, [sp, #36]	; 0x24
    89b0:	9808      	ldr	r0, [sp, #32]
    89b2:	9909      	ldr	r1, [sp, #36]	; 0x24
    89b4:	900a      	str	r0, [sp, #40]	; 0x28
    89b6:	910b      	str	r1, [sp, #44]	; 0x2c
    89b8:	980a      	ldr	r0, [sp, #40]	; 0x28
    89ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
    89bc:	9205      	str	r2, [sp, #20]
    89be:	9304      	str	r3, [sp, #16]
    89c0:	9003      	str	r0, [sp, #12]
    89c2:	9102      	str	r1, [sp, #8]
    89c4:	e7ff      	b.n	89c6 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h3c364589ae20b9a9E+0x2a>
    89c6:	9803      	ldr	r0, [sp, #12]
    89c8:	9902      	ldr	r1, [sp, #8]
    89ca:	f001 fd64 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    89ce:	9001      	str	r0, [sp, #4]
    89d0:	e7ff      	b.n	89d2 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h3c364589ae20b9a9E+0x36>
    89d2:	9801      	ldr	r0, [sp, #4]
    89d4:	b00c      	add	sp, #48	; 0x30
    89d6:	bd80      	pop	{r7, pc}

000089d8 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17hce9b57fe2054131fE>:
    89d8:	b084      	sub	sp, #16
    89da:	460a      	mov	r2, r1
    89dc:	4603      	mov	r3, r0
    89de:	9002      	str	r0, [sp, #8]
    89e0:	9103      	str	r1, [sp, #12]
    89e2:	9802      	ldr	r0, [sp, #8]
    89e4:	9201      	str	r2, [sp, #4]
    89e6:	9300      	str	r3, [sp, #0]
    89e8:	b004      	add	sp, #16
    89ea:	4770      	bx	lr

000089ec <_ZN4core3mem4swap17hd6a0921c9f9f5238E>:
    89ec:	b580      	push	{r7, lr}
    89ee:	b084      	sub	sp, #16
    89f0:	460a      	mov	r2, r1
    89f2:	4603      	mov	r3, r0
    89f4:	9002      	str	r0, [sp, #8]
    89f6:	9103      	str	r1, [sp, #12]
    89f8:	9802      	ldr	r0, [sp, #8]
    89fa:	9903      	ldr	r1, [sp, #12]
    89fc:	9201      	str	r2, [sp, #4]
    89fe:	9300      	str	r3, [sp, #0]
    8a00:	f000 ff0f 	bl	9822 <_ZN4core3ptr23swap_nonoverlapping_one17h90aaa0c74a7eb382E>
    8a04:	e7ff      	b.n	8a06 <_ZN4core3mem4swap17hd6a0921c9f9f5238E+0x1a>
    8a06:	b004      	add	sp, #16
    8a08:	bd80      	pop	{r7, pc}

00008a0a <_ZN4core3mem7size_of17h5c195dec1f846941E>:
    8a0a:	b082      	sub	sp, #8
    8a0c:	2004      	movs	r0, #4
    8a0e:	9001      	str	r0, [sp, #4]
    8a10:	9801      	ldr	r0, [sp, #4]
    8a12:	9000      	str	r0, [sp, #0]
    8a14:	e7ff      	b.n	8a16 <_ZN4core3mem7size_of17h5c195dec1f846941E+0xc>
    8a16:	9800      	ldr	r0, [sp, #0]
    8a18:	b002      	add	sp, #8
    8a1a:	4770      	bx	lr

00008a1c <_ZN4core6result13unwrap_failed17hcd10af70e9ab946bE>:
    8a1c:	b09a      	sub	sp, #104	; 0x68
    8a1e:	4613      	mov	r3, r2
    8a20:	468c      	mov	ip, r1
    8a22:	4686      	mov	lr, r0
    8a24:	9009      	str	r0, [sp, #36]	; 0x24
    8a26:	910a      	str	r1, [sp, #40]	; 0x28
    8a28:	920b      	str	r2, [sp, #44]	; 0x2c
    8a2a:	a809      	add	r0, sp, #36	; 0x24
    8a2c:	9016      	str	r0, [sp, #88]	; 0x58
    8a2e:	a80b      	add	r0, sp, #44	; 0x2c
    8a30:	9017      	str	r0, [sp, #92]	; 0x5c
//! Mynewt API for Rust. Contains Rust bindings for Mynewt API for C, generated by `bindgen`.
    8a32:	9816      	ldr	r0, [sp, #88]	; 0x58
    8a34:	9018      	str	r0, [sp, #96]	; 0x60
    8a36:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8a38:	9019      	str	r0, [sp, #100]	; 0x64
    8a3a:	9818      	ldr	r0, [sp, #96]	; 0x60
    8a3c:	f24b 4191 	movw	r1, #46225	; 0xb491
    8a40:	f2c0 0100 	movt	r1, #0
    8a44:	9308      	str	r3, [sp, #32]
    8a46:	f8cd c01c 	str.w	ip, [sp, #28]
    8a4a:	f8cd e018 	str.w	lr, [sp, #24]
    8a4e:	f002 fd39 	bl	b4c4 <_ZN4core3fmt10ArgumentV13new17h096de7e29d61d94fE>
    8a52:	9005      	str	r0, [sp, #20]
    8a54:	9104      	str	r1, [sp, #16]
    8a56:	e7ff      	b.n	8a58 <_ZN4core6result13unwrap_failed17hcd10af70e9ab946bE+0x3c>
    8a58:	9819      	ldr	r0, [sp, #100]	; 0x64
    8a5a:	f648 3169 	movw	r1, #35689	; 0x8b69
    8a5e:	f2c0 0100 	movt	r1, #0
    8a62:	f002 fd61 	bl	b528 <_ZN4core3fmt10ArgumentV13new17h2a8f18ee4916d0d4E>
    8a66:	9003      	str	r0, [sp, #12]
    8a68:	9102      	str	r1, [sp, #8]
    8a6a:	e7ff      	b.n	8a6c <_ZN4core6result13unwrap_failed17hcd10af70e9ab946bE+0x50>
    8a6c:	9805      	ldr	r0, [sp, #20]
    8a6e:	9012      	str	r0, [sp, #72]	; 0x48
    8a70:	9904      	ldr	r1, [sp, #16]
    8a72:	9113      	str	r1, [sp, #76]	; 0x4c
    8a74:	9a03      	ldr	r2, [sp, #12]
    8a76:	9214      	str	r2, [sp, #80]	; 0x50
    8a78:	9b02      	ldr	r3, [sp, #8]
    8a7a:	9315      	str	r3, [sp, #84]	; 0x54
    8a7c:	46ec      	mov	ip, sp
    8a7e:	f04f 0e02 	mov.w	lr, #2
    8a82:	f8cc e000 	str.w	lr, [ip]
    8a86:	f649 5148 	movw	r1, #40264	; 0x9d48
    8a8a:	f2c0 0102 	movt	r1, #2
    8a8e:	a80c      	add	r0, sp, #48	; 0x30
    8a90:	ab12      	add	r3, sp, #72	; 0x48
    8a92:	4672      	mov	r2, lr
    8a94:	f000 f836 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    8a98:	e7ff      	b.n	8a9a <_ZN4core6result13unwrap_failed17hcd10af70e9ab946bE+0x7e>
    8a9a:	f649 5170 	movw	r1, #40304	; 0x9d70
    8a9e:	f2c0 0102 	movt	r1, #2
    8aa2:	a80c      	add	r0, sp, #48	; 0x30
    8aa4:	f003 ff0f 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    8aa8:	defe      	udf	#254	; 0xfe

00008aaa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hecdafdebd0535367E>:
    8aaa:	b580      	push	{r7, lr}
    8aac:	b08a      	sub	sp, #40	; 0x28
    8aae:	4613      	mov	r3, r2
    8ab0:	468c      	mov	ip, r1
    8ab2:	4686      	mov	lr, r0
    8ab4:	9106      	str	r1, [sp, #24]
    8ab6:	9207      	str	r2, [sp, #28]
    8ab8:	6800      	ldr	r0, [r0, #0]
    8aba:	2800      	cmp	r0, #0
    8abc:	9305      	str	r3, [sp, #20]
    8abe:	f8cd c010 	str.w	ip, [sp, #16]
    8ac2:	f8cd e00c 	str.w	lr, [sp, #12]
    8ac6:	9002      	str	r0, [sp, #8]
    8ac8:	d005      	beq.n	8ad6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hecdafdebd0535367E+0x2c>
    8aca:	e7ff      	b.n	8acc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hecdafdebd0535367E+0x22>
    8acc:	9802      	ldr	r0, [sp, #8]
    8ace:	2801      	cmp	r0, #1
    8ad0:	d00b      	beq.n	8aea <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hecdafdebd0535367E+0x40>
    8ad2:	e7ff      	b.n	8ad4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hecdafdebd0535367E+0x2a>
    8ad4:	defe      	udf	#254	; 0xfe
    8ad6:	9803      	ldr	r0, [sp, #12]
    8ad8:	6841      	ldr	r1, [r0, #4]
    8ada:	9108      	str	r1, [sp, #32]
    8adc:	9808      	ldr	r0, [sp, #32]
    8ade:	9903      	ldr	r1, [sp, #12]
    8ae0:	680a      	ldr	r2, [r1, #0]
    8ae2:	2a00      	cmp	r2, #0
    8ae4:	9001      	str	r0, [sp, #4]
    8ae6:	d009      	beq.n	8afc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hecdafdebd0535367E+0x52>
    8ae8:	e00b      	b.n	8b02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hecdafdebd0535367E+0x58>
    8aea:	9803      	ldr	r0, [sp, #12]
    8aec:	6841      	ldr	r1, [r0, #4]
    8aee:	9109      	str	r1, [sp, #36]	; 0x24
    8af0:	9806      	ldr	r0, [sp, #24]
    8af2:	9907      	ldr	r1, [sp, #28]
    8af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8af6:	f7ff ff91 	bl	8a1c <_ZN4core6result13unwrap_failed17hcd10af70e9ab946bE>
    8afa:	defe      	udf	#254	; 0xfe
    8afc:	9801      	ldr	r0, [sp, #4]
    8afe:	b00a      	add	sp, #40	; 0x28
    8b00:	bd80      	pop	{r7, pc}
    8b02:	e7fb      	b.n	8afc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hecdafdebd0535367E+0x52>

00008b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>:
    8b04:	b570      	push	{r4, r5, r6, lr}
    8b06:	b08a      	sub	sp, #40	; 0x28
    8b08:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    8b0c:	469e      	mov	lr, r3
    8b0e:	4614      	mov	r4, r2
    8b10:	460d      	mov	r5, r1
    8b12:	4606      	mov	r6, r0
    8b14:	9104      	str	r1, [sp, #16]
    8b16:	9205      	str	r2, [sp, #20]
    8b18:	9306      	str	r3, [sp, #24]
    8b1a:	f8cd c01c 	str.w	ip, [sp, #28]
    8b1e:	9904      	ldr	r1, [sp, #16]
    8b20:	9a05      	ldr	r2, [sp, #20]
    8b22:	2300      	movs	r3, #0
    8b24:	9309      	str	r3, [sp, #36]	; 0x24
    8b26:	9308      	str	r3, [sp, #32]
    8b28:	9308      	str	r3, [sp, #32]
    8b2a:	9b06      	ldr	r3, [sp, #24]
    8b2c:	f8dd c01c 	ldr.w	ip, [sp, #28]
    8b30:	6001      	str	r1, [r0, #0]
    8b32:	6042      	str	r2, [r0, #4]
    8b34:	9908      	ldr	r1, [sp, #32]
    8b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
    8b38:	6081      	str	r1, [r0, #8]
    8b3a:	60c2      	str	r2, [r0, #12]
    8b3c:	6103      	str	r3, [r0, #16]
    8b3e:	f8c0 c014 	str.w	ip, [r0, #20]
    8b42:	f8cd e00c 	str.w	lr, [sp, #12]
    8b46:	9402      	str	r4, [sp, #8]
    8b48:	9501      	str	r5, [sp, #4]
    8b4a:	9600      	str	r6, [sp, #0]
    8b4c:	b00a      	add	sp, #40	; 0x28
    8b4e:	bd70      	pop	{r4, r5, r6, pc}

00008b50 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17haa0bb50d5ceeead8E>:
    }

    /// Cast `i32` to `MynewtError`
    impl From<i32> for MynewtError {
        /// Cast `i32` to `MynewtError`
        fn from(num: i32) -> Self {
    8b50:	b084      	sub	sp, #16
    8b52:	4601      	mov	r1, r0
    8b54:	9002      	str	r0, [sp, #8]
            unsafe { 
                ::core::mem::transmute::
                    <i32, MynewtError>
                    (num)
    8b56:	9802      	ldr	r0, [sp, #8]
                ::core::mem::transmute::
    8b58:	9003      	str	r0, [sp, #12]
    8b5a:	9803      	ldr	r0, [sp, #12]
    8b5c:	9101      	str	r1, [sp, #4]
    8b5e:	9000      	str	r0, [sp, #0]
    8b60:	e7ff      	b.n	8b62 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17haa0bb50d5ceeead8E+0x12>
            }  
        }
    8b62:	9800      	ldr	r0, [sp, #0]
    8b64:	b004      	add	sp, #16
    8b66:	4770      	bx	lr

00008b68 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E>:
    #[derive(Debug, PartialEq)]
    8b68:	b580      	push	{r7, lr}
    8b6a:	b0ba      	sub	sp, #232	; 0xe8
    8b6c:	460a      	mov	r2, r1
    8b6e:	4603      	mov	r3, r0
    8b70:	9003      	str	r0, [sp, #12]
    8b72:	9104      	str	r1, [sp, #16]
    8b74:	9803      	ldr	r0, [sp, #12]
    8b76:	9006      	str	r0, [sp, #24]
    8b78:	9806      	ldr	r0, [sp, #24]
    8b7a:	6800      	ldr	r0, [r0, #0]
    8b7c:	2101      	movs	r1, #1
    8b7e:	f6cf 71ff 	movt	r1, #65535	; 0xffff
    8b82:	4288      	cmp	r0, r1
    8b84:	9202      	str	r2, [sp, #8]
    8b86:	9301      	str	r3, [sp, #4]
    8b88:	9000      	str	r0, [sp, #0]
    8b8a:	f000 8173 	beq.w	8e74 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x30c>
    8b8e:	e7ff      	b.n	8b90 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x28>
    8b90:	9800      	ldr	r0, [sp, #0]
    8b92:	f100 010f 	add.w	r1, r0, #15
    8b96:	2900      	cmp	r1, #0
    8b98:	f000 815b 	beq.w	8e52 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x2ea>
    8b9c:	e7ff      	b.n	8b9e <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x36>
    8b9e:	9800      	ldr	r0, [sp, #0]
    8ba0:	f100 010e 	add.w	r1, r0, #14
    8ba4:	2900      	cmp	r1, #0
    8ba6:	f000 8143 	beq.w	8e30 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x2c8>
    8baa:	e7ff      	b.n	8bac <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x44>
    8bac:	9800      	ldr	r0, [sp, #0]
    8bae:	f100 010d 	add.w	r1, r0, #13
    8bb2:	2900      	cmp	r1, #0
    8bb4:	f000 812b 	beq.w	8e0e <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x2a6>
    8bb8:	e7ff      	b.n	8bba <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x52>
    8bba:	9800      	ldr	r0, [sp, #0]
    8bbc:	f100 010c 	add.w	r1, r0, #12
    8bc0:	2900      	cmp	r1, #0
    8bc2:	f000 8113 	beq.w	8dec <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x284>
    8bc6:	e7ff      	b.n	8bc8 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x60>
    8bc8:	9800      	ldr	r0, [sp, #0]
    8bca:	f100 010b 	add.w	r1, r0, #11
    8bce:	2900      	cmp	r1, #0
    8bd0:	f000 80fb 	beq.w	8dca <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x262>
    8bd4:	e7ff      	b.n	8bd6 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x6e>
    8bd6:	9800      	ldr	r0, [sp, #0]
    8bd8:	f100 010a 	add.w	r1, r0, #10
    8bdc:	2900      	cmp	r1, #0
    8bde:	f000 80e3 	beq.w	8da8 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x240>
    8be2:	e7ff      	b.n	8be4 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x7c>
    8be4:	9800      	ldr	r0, [sp, #0]
    8be6:	f100 0109 	add.w	r1, r0, #9
    8bea:	2900      	cmp	r1, #0
    8bec:	f000 80cb 	beq.w	8d86 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x21e>
    8bf0:	e7ff      	b.n	8bf2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x8a>
    8bf2:	9800      	ldr	r0, [sp, #0]
    8bf4:	f100 0108 	add.w	r1, r0, #8
    8bf8:	2900      	cmp	r1, #0
    8bfa:	f000 80b3 	beq.w	8d64 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x1fc>
    8bfe:	e7ff      	b.n	8c00 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x98>
    8c00:	9800      	ldr	r0, [sp, #0]
    8c02:	1dc1      	adds	r1, r0, #7
    8c04:	2900      	cmp	r1, #0
    8c06:	f000 809c 	beq.w	8d42 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x1da>
    8c0a:	e7ff      	b.n	8c0c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0xa4>
    8c0c:	9800      	ldr	r0, [sp, #0]
    8c0e:	1d81      	adds	r1, r0, #6
    8c10:	2900      	cmp	r1, #0
    8c12:	f000 8085 	beq.w	8d20 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x1b8>
    8c16:	e7ff      	b.n	8c18 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0xb0>
    8c18:	9800      	ldr	r0, [sp, #0]
    8c1a:	1d41      	adds	r1, r0, #5
    8c1c:	2900      	cmp	r1, #0
    8c1e:	d06e      	beq.n	8cfe <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x196>
    8c20:	e7ff      	b.n	8c22 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0xba>
    8c22:	9800      	ldr	r0, [sp, #0]
    8c24:	1d01      	adds	r1, r0, #4
    8c26:	2900      	cmp	r1, #0
    8c28:	d058      	beq.n	8cdc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x174>
    8c2a:	e7ff      	b.n	8c2c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0xc4>
    8c2c:	9800      	ldr	r0, [sp, #0]
    8c2e:	1cc1      	adds	r1, r0, #3
    8c30:	2900      	cmp	r1, #0
    8c32:	d042      	beq.n	8cba <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x152>
    8c34:	e7ff      	b.n	8c36 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0xce>
    8c36:	9800      	ldr	r0, [sp, #0]
    8c38:	1c81      	adds	r1, r0, #2
    8c3a:	2900      	cmp	r1, #0
    8c3c:	d02c      	beq.n	8c98 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x130>
    8c3e:	e7ff      	b.n	8c40 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0xd8>
    8c40:	9800      	ldr	r0, [sp, #0]
    8c42:	1c41      	adds	r1, r0, #1
    8c44:	2900      	cmp	r1, #0
    8c46:	d016      	beq.n	8c76 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x10e>
    8c48:	e7ff      	b.n	8c4a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0xe2>
    8c4a:	9800      	ldr	r0, [sp, #0]
    8c4c:	2800      	cmp	r0, #0
    8c4e:	d001      	beq.n	8c54 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0xec>
    8c50:	e7ff      	b.n	8c52 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0xea>
    8c52:	defe      	udf	#254	; 0xfe
    8c54:	9904      	ldr	r1, [sp, #16]
    8c56:	f649 6227 	movw	r2, #40487	; 0x9e27
    8c5a:	f2c0 0202 	movt	r2, #2
    8c5e:	a807      	add	r0, sp, #28
    8c60:	2307      	movs	r3, #7
    8c62:	f004 feb8 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8c66:	e7ff      	b.n	8c68 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x100>
    8c68:	a807      	add	r0, sp, #28
    8c6a:	f004 fa43 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8c6e:	f88d 0017 	strb.w	r0, [sp, #23]
    8c72:	e7ff      	b.n	8c74 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x10c>
    8c74:	e10f      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8c76:	9904      	ldr	r1, [sp, #16]
    8c78:	f649 621d 	movw	r2, #40477	; 0x9e1d
    8c7c:	f2c0 0202 	movt	r2, #2
    8c80:	a80a      	add	r0, sp, #40	; 0x28
    8c82:	230a      	movs	r3, #10
    8c84:	f004 fea7 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8c88:	e7ff      	b.n	8c8a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x122>
    8c8a:	a80a      	add	r0, sp, #40	; 0x28
    8c8c:	f004 fa32 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8c90:	f88d 0017 	strb.w	r0, [sp, #23]
    8c94:	e7ff      	b.n	8c96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x12e>
    8c96:	e0fe      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8c98:	9904      	ldr	r1, [sp, #16]
    8c9a:	f649 6213 	movw	r2, #40467	; 0x9e13
    8c9e:	f2c0 0202 	movt	r2, #2
    8ca2:	a80d      	add	r0, sp, #52	; 0x34
    8ca4:	230a      	movs	r3, #10
    8ca6:	f004 fe96 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8caa:	e7ff      	b.n	8cac <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x144>
    8cac:	a80d      	add	r0, sp, #52	; 0x34
    8cae:	f004 fa21 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8cb2:	f88d 0017 	strb.w	r0, [sp, #23]
    8cb6:	e7ff      	b.n	8cb8 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x150>
    8cb8:	e0ed      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8cba:	9904      	ldr	r1, [sp, #16]
    8cbc:	f649 6207 	movw	r2, #40455	; 0x9e07
    8cc0:	f2c0 0202 	movt	r2, #2
    8cc4:	a810      	add	r0, sp, #64	; 0x40
    8cc6:	230c      	movs	r3, #12
    8cc8:	f004 fe85 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8ccc:	e7ff      	b.n	8cce <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x166>
    8cce:	a810      	add	r0, sp, #64	; 0x40
    8cd0:	f004 fa10 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8cd4:	f88d 0017 	strb.w	r0, [sp, #23]
    8cd8:	e7ff      	b.n	8cda <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x172>
    8cda:	e0dc      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8cdc:	9904      	ldr	r1, [sp, #16]
    8cde:	f649 52fd 	movw	r2, #40445	; 0x9dfd
    8ce2:	f2c0 0202 	movt	r2, #2
    8ce6:	a813      	add	r0, sp, #76	; 0x4c
    8ce8:	230a      	movs	r3, #10
    8cea:	f004 fe74 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8cee:	e7ff      	b.n	8cf0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x188>
    8cf0:	a813      	add	r0, sp, #76	; 0x4c
    8cf2:	f004 f9ff 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8cf6:	f88d 0017 	strb.w	r0, [sp, #23]
    8cfa:	e7ff      	b.n	8cfc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x194>
    8cfc:	e0cb      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8cfe:	9904      	ldr	r1, [sp, #16]
    8d00:	f649 52f6 	movw	r2, #40438	; 0x9df6
    8d04:	f2c0 0202 	movt	r2, #2
    8d08:	a816      	add	r0, sp, #88	; 0x58
    8d0a:	2307      	movs	r3, #7
    8d0c:	f004 fe63 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8d10:	e7ff      	b.n	8d12 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x1aa>
    8d12:	a816      	add	r0, sp, #88	; 0x58
    8d14:	f004 f9ee 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8d18:	f88d 0017 	strb.w	r0, [sp, #23]
    8d1c:	e7ff      	b.n	8d1e <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x1b6>
    8d1e:	e0ba      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8d20:	9904      	ldr	r1, [sp, #16]
    8d22:	f649 52ec 	movw	r2, #40428	; 0x9dec
    8d26:	f2c0 0202 	movt	r2, #2
    8d2a:	a819      	add	r0, sp, #100	; 0x64
    8d2c:	230a      	movs	r3, #10
    8d2e:	f004 fe52 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8d32:	e7ff      	b.n	8d34 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x1cc>
    8d34:	a819      	add	r0, sp, #100	; 0x64
    8d36:	f004 f9dd 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8d3a:	f88d 0017 	strb.w	r0, [sp, #23]
    8d3e:	e7ff      	b.n	8d40 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x1d8>
    8d40:	e0a9      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8d42:	9904      	ldr	r1, [sp, #16]
    8d44:	f649 52e2 	movw	r2, #40418	; 0x9de2
    8d48:	f2c0 0202 	movt	r2, #2
    8d4c:	a81c      	add	r0, sp, #112	; 0x70
    8d4e:	230a      	movs	r3, #10
    8d50:	f004 fe41 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8d54:	e7ff      	b.n	8d56 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x1ee>
    8d56:	a81c      	add	r0, sp, #112	; 0x70
    8d58:	f004 f9cc 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8d5c:	f88d 0017 	strb.w	r0, [sp, #23]
    8d60:	e7ff      	b.n	8d62 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x1fa>
    8d62:	e098      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8d64:	9904      	ldr	r1, [sp, #16]
    8d66:	f649 52d9 	movw	r2, #40409	; 0x9dd9
    8d6a:	f2c0 0202 	movt	r2, #2
    8d6e:	a81f      	add	r0, sp, #124	; 0x7c
    8d70:	2309      	movs	r3, #9
    8d72:	f004 fe30 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8d76:	e7ff      	b.n	8d78 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x210>
    8d78:	a81f      	add	r0, sp, #124	; 0x7c
    8d7a:	f004 f9bb 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8d7e:	f88d 0017 	strb.w	r0, [sp, #23]
    8d82:	e7ff      	b.n	8d84 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x21c>
    8d84:	e087      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8d86:	9904      	ldr	r1, [sp, #16]
    8d88:	f649 52cf 	movw	r2, #40399	; 0x9dcf
    8d8c:	f2c0 0202 	movt	r2, #2
    8d90:	a822      	add	r0, sp, #136	; 0x88
    8d92:	230a      	movs	r3, #10
    8d94:	f004 fe1f 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8d98:	e7ff      	b.n	8d9a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x232>
    8d9a:	a822      	add	r0, sp, #136	; 0x88
    8d9c:	f004 f9aa 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8da0:	f88d 0017 	strb.w	r0, [sp, #23]
    8da4:	e7ff      	b.n	8da6 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x23e>
    8da6:	e076      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8da8:	9904      	ldr	r1, [sp, #16]
    8daa:	f649 52c5 	movw	r2, #40389	; 0x9dc5
    8dae:	f2c0 0202 	movt	r2, #2
    8db2:	a825      	add	r0, sp, #148	; 0x94
    8db4:	230a      	movs	r3, #10
    8db6:	f004 fe0e 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8dba:	e7ff      	b.n	8dbc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x254>
    8dbc:	a825      	add	r0, sp, #148	; 0x94
    8dbe:	f004 f999 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8dc2:	f88d 0017 	strb.w	r0, [sp, #23]
    8dc6:	e7ff      	b.n	8dc8 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x260>
    8dc8:	e065      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8dca:	9904      	ldr	r1, [sp, #16]
    8dcc:	f649 52b9 	movw	r2, #40377	; 0x9db9
    8dd0:	f2c0 0202 	movt	r2, #2
    8dd4:	a828      	add	r0, sp, #160	; 0xa0
    8dd6:	230c      	movs	r3, #12
    8dd8:	f004 fdfd 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8ddc:	e7ff      	b.n	8dde <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x276>
    8dde:	a828      	add	r0, sp, #160	; 0xa0
    8de0:	f004 f988 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8de4:	f88d 0017 	strb.w	r0, [sp, #23]
    8de8:	e7ff      	b.n	8dea <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x282>
    8dea:	e054      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8dec:	9904      	ldr	r1, [sp, #16]
    8dee:	f649 52ae 	movw	r2, #40366	; 0x9dae
    8df2:	f2c0 0202 	movt	r2, #2
    8df6:	a82b      	add	r0, sp, #172	; 0xac
    8df8:	230b      	movs	r3, #11
    8dfa:	f004 fdec 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8dfe:	e7ff      	b.n	8e00 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x298>
    8e00:	a82b      	add	r0, sp, #172	; 0xac
    8e02:	f004 f977 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8e06:	f88d 0017 	strb.w	r0, [sp, #23]
    8e0a:	e7ff      	b.n	8e0c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x2a4>
    8e0c:	e043      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8e0e:	9904      	ldr	r1, [sp, #16]
    8e10:	f649 52a2 	movw	r2, #40354	; 0x9da2
    8e14:	f2c0 0202 	movt	r2, #2
    8e18:	a82e      	add	r0, sp, #184	; 0xb8
    8e1a:	230c      	movs	r3, #12
    8e1c:	f004 fddb 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8e20:	e7ff      	b.n	8e22 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x2ba>
    8e22:	a82e      	add	r0, sp, #184	; 0xb8
    8e24:	f004 f966 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8e28:	f88d 0017 	strb.w	r0, [sp, #23]
    8e2c:	e7ff      	b.n	8e2e <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x2c6>
    8e2e:	e032      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8e30:	9904      	ldr	r1, [sp, #16]
    8e32:	f649 5295 	movw	r2, #40341	; 0x9d95
    8e36:	f2c0 0202 	movt	r2, #2
    8e3a:	a831      	add	r0, sp, #196	; 0xc4
    8e3c:	230d      	movs	r3, #13
    8e3e:	f004 fdca 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8e42:	e7ff      	b.n	8e44 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x2dc>
    8e44:	a831      	add	r0, sp, #196	; 0xc4
    8e46:	f004 f955 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8e4a:	f88d 0017 	strb.w	r0, [sp, #23]
    8e4e:	e7ff      	b.n	8e50 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x2e8>
    8e50:	e021      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8e52:	9904      	ldr	r1, [sp, #16]
    8e54:	f649 528c 	movw	r2, #40332	; 0x9d8c
    8e58:	f2c0 0202 	movt	r2, #2
    8e5c:	a834      	add	r0, sp, #208	; 0xd0
    8e5e:	2309      	movs	r3, #9
    8e60:	f004 fdb9 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8e64:	e7ff      	b.n	8e66 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x2fe>
    8e66:	a834      	add	r0, sp, #208	; 0xd0
    8e68:	f004 f944 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8e6c:	f88d 0017 	strb.w	r0, [sp, #23]
    8e70:	e7ff      	b.n	8e72 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x30a>
    8e72:	e010      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8e74:	9904      	ldr	r1, [sp, #16]
    8e76:	f649 5280 	movw	r2, #40320	; 0x9d80
    8e7a:	f2c0 0202 	movt	r2, #2
    8e7e:	a837      	add	r0, sp, #220	; 0xdc
    8e80:	230c      	movs	r3, #12
    8e82:	f004 fda8 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    8e86:	e7ff      	b.n	8e88 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x320>
    8e88:	a837      	add	r0, sp, #220	; 0xdc
    8e8a:	f004 f933 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    8e8e:	f88d 0017 	strb.w	r0, [sp, #23]
    8e92:	e7ff      	b.n	8e94 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32c>
    8e94:	e7ff      	b.n	8e96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h0ce631548774abe1E+0x32e>
    8e96:	f89d 0017 	ldrb.w	r0, [sp, #23]
    8e9a:	b03a      	add	sp, #232	; 0xe8
    8e9c:	bd80      	pop	{r7, pc}

00008e9e <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h672f59bf22cbf6e9E>:
}

/// Convert the type to array of bytes that may or may not end with null. Strn always ends with null.
impl ToBytesOptionalNull for crate::Strn {
    /// Convert the type to array of bytes that may or may not end with null. Strn always ends with null.
    fn to_bytes_optional_nul(&self) -> &[u8] {
    8e9e:	b088      	sub	sp, #32
    8ea0:	4601      	mov	r1, r0
    8ea2:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs }
    8ea4:	9802      	ldr	r0, [sp, #8]
    8ea6:	7800      	ldrb	r0, [r0, #0]
    8ea8:	07c2      	lsls	r2, r0, #31
    8eaa:	2a00      	cmp	r2, #0
    8eac:	9101      	str	r1, [sp, #4]
    8eae:	9000      	str	r0, [sp, #0]
    8eb0:	d006      	beq.n	8ec0 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h672f59bf22cbf6e9E+0x22>
    8eb2:	e7ff      	b.n	8eb4 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h672f59bf22cbf6e9E+0x16>
    8eb4:	9800      	ldr	r0, [sp, #0]
    8eb6:	b2c1      	uxtb	r1, r0
    8eb8:	2901      	cmp	r1, #1
    8eba:	d00b      	beq.n	8ed4 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h672f59bf22cbf6e9E+0x36>
    8ebc:	e7ff      	b.n	8ebe <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h672f59bf22cbf6e9E+0x20>
            StrnRep::CStr(_cstr)  => { assert!(false, "strn bytes"); &[] }
            //  TODO: unsafe { ::core::mem::transmute::<*const u8, &[u8]>(cstr) }
        }
    }
    8ebe:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs }
    8ec0:	9802      	ldr	r0, [sp, #8]
    8ec2:	6841      	ldr	r1, [r0, #4]
    8ec4:	6880      	ldr	r0, [r0, #8]
    8ec6:	9105      	str	r1, [sp, #20]
    8ec8:	9006      	str	r0, [sp, #24]
    8eca:	9805      	ldr	r0, [sp, #20]
    8ecc:	9906      	ldr	r1, [sp, #24]
    8ece:	9003      	str	r0, [sp, #12]
    8ed0:	9104      	str	r1, [sp, #16]
        match self.rep {
    8ed2:	e015      	b.n	8f00 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h672f59bf22cbf6e9E+0x62>
            StrnRep::CStr(_cstr)  => { assert!(false, "strn bytes"); &[] }
    8ed4:	9802      	ldr	r0, [sp, #8]
    8ed6:	6840      	ldr	r0, [r0, #4]
    8ed8:	9007      	str	r0, [sp, #28]
    8eda:	2000      	movs	r0, #0
    8edc:	2800      	cmp	r0, #0
    8ede:	d107      	bne.n	8ef0 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h672f59bf22cbf6e9E+0x52>
    8ee0:	e7ff      	b.n	8ee2 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h672f59bf22cbf6e9E+0x44>
    8ee2:	f649 6060 	movw	r0, #40544	; 0x9e60
    8ee6:	f2c0 0002 	movt	r0, #2
    8eea:	f003 fcaf 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    8eee:	defe      	udf	#254	; 0xfe
    8ef0:	f649 6078 	movw	r0, #40568	; 0x9e78
    8ef4:	f2c0 0002 	movt	r0, #2
    8ef8:	9003      	str	r0, [sp, #12]
    8efa:	2000      	movs	r0, #0
    8efc:	9004      	str	r0, [sp, #16]
        match self.rep {
    8efe:	e7ff      	b.n	8f00 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h672f59bf22cbf6e9E+0x62>
    }
    8f00:	9803      	ldr	r0, [sp, #12]
    8f02:	9904      	ldr	r1, [sp, #16]
    8f04:	b008      	add	sp, #32
    8f06:	4770      	bx	lr

00008f08 <_ZN6mynewt7sysinit17hfbb6001f0140a448E>:
pub fn sysinit() {
    8f08:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    8f0a:	f009 ff1f 	bl	12d4c <rust_sysinit>
    8f0e:	e7ff      	b.n	8f10 <_ZN6mynewt7sysinit17hfbb6001f0140a448E+0x8>
    sys::console::flush();
    8f10:	f7ff fd3f 	bl	8992 <_ZN6mynewt3sys7console5flush17h498d792c115b7281E>
    8f14:	e7ff      	b.n	8f16 <_ZN6mynewt7sysinit17hfbb6001f0140a448E+0xe>
}
    8f16:	bd80      	pop	{r7, pc}

00008f18 <_ZN6mynewt4Strn3new17haa130bc407e45c8bE>:
    /// Create a new `Strn` with a byte string. Fail if the last byte is not zero.
    /// ```
    /// Strn::new(b"network\0")
    /// strn!("network")
    /// ```
    pub fn new(bs: &'static [u8]) -> Strn {
    8f18:	b5b0      	push	{r4, r5, r7, lr}
    8f1a:	b0b0      	sub	sp, #192	; 0xc0
    8f1c:	4613      	mov	r3, r2
    8f1e:	468c      	mov	ip, r1
    8f20:	910c      	str	r1, [sp, #48]	; 0x30
    8f22:	920d      	str	r2, [sp, #52]	; 0x34
        assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8f24:	990c      	ldr	r1, [sp, #48]	; 0x30
    8f26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8f28:	900b      	str	r0, [sp, #44]	; 0x2c
    8f2a:	4608      	mov	r0, r1
    8f2c:	4611      	mov	r1, r2
    8f2e:	930a      	str	r3, [sp, #40]	; 0x28
    8f30:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    8f34:	f000 fba5 	bl	9682 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE>
    8f38:	9010      	str	r0, [sp, #64]	; 0x40
    8f3a:	e7ff      	b.n	8f3c <_ZN6mynewt4Strn3new17haa130bc407e45c8bE+0x24>
    8f3c:	a810      	add	r0, sp, #64	; 0x40
    8f3e:	900e      	str	r0, [sp, #56]	; 0x38
    8f40:	f649 607c 	movw	r0, #40572	; 0x9e7c
    8f44:	f2c0 0002 	movt	r0, #2
    8f48:	900f      	str	r0, [sp, #60]	; 0x3c
    8f4a:	980e      	ldr	r0, [sp, #56]	; 0x38
    8f4c:	9011      	str	r0, [sp, #68]	; 0x44
    8f4e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8f50:	9012      	str	r0, [sp, #72]	; 0x48
    8f52:	9811      	ldr	r0, [sp, #68]	; 0x44
    8f54:	9912      	ldr	r1, [sp, #72]	; 0x48
    8f56:	f001 fcc2 	bl	a8de <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E>
    8f5a:	9008      	str	r0, [sp, #32]
    8f5c:	e7ff      	b.n	8f5e <_ZN6mynewt4Strn3new17haa130bc407e45c8bE+0x46>
    8f5e:	9808      	ldr	r0, [sp, #32]
    8f60:	07c1      	lsls	r1, r0, #31
    8f62:	2900      	cmp	r1, #0
    8f64:	d163      	bne.n	902e <_ZN6mynewt4Strn3new17haa130bc407e45c8bE+0x116>
    8f66:	e7ff      	b.n	8f68 <_ZN6mynewt4Strn3new17haa130bc407e45c8bE+0x50>
    8f68:	9811      	ldr	r0, [sp, #68]	; 0x44
    8f6a:	9022      	str	r0, [sp, #136]	; 0x88
    8f6c:	9812      	ldr	r0, [sp, #72]	; 0x48
    8f6e:	9023      	str	r0, [sp, #140]	; 0x8c
    8f70:	4668      	mov	r0, sp
    8f72:	2100      	movs	r1, #0
    8f74:	6001      	str	r1, [r0, #0]
    8f76:	f649 61dc 	movw	r1, #40668	; 0x9edc
    8f7a:	f2c0 0102 	movt	r1, #2
    8f7e:	f649 6378 	movw	r3, #40568	; 0x9e78
    8f82:	f2c0 0302 	movt	r3, #2
    8f86:	a824      	add	r0, sp, #144	; 0x90
    8f88:	2201      	movs	r2, #1
    8f8a:	f7ff fdbb 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    8f8e:	e7ff      	b.n	8f90 <_ZN6mynewt4Strn3new17haa130bc407e45c8bE+0x78>
    8f90:	a822      	add	r0, sp, #136	; 0x88
    8f92:	901f      	str	r0, [sp, #124]	; 0x7c
    8f94:	a823      	add	r0, sp, #140	; 0x8c
    8f96:	9020      	str	r0, [sp, #128]	; 0x80
    8f98:	a824      	add	r0, sp, #144	; 0x90
    8f9a:	9021      	str	r0, [sp, #132]	; 0x84
    8f9c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8f9e:	902a      	str	r0, [sp, #168]	; 0xa8
    8fa0:	9820      	ldr	r0, [sp, #128]	; 0x80
    8fa2:	902b      	str	r0, [sp, #172]	; 0xac
    8fa4:	9821      	ldr	r0, [sp, #132]	; 0x84
    8fa6:	902c      	str	r0, [sp, #176]	; 0xb0
    8fa8:	982a      	ldr	r0, [sp, #168]	; 0xa8
    8faa:	f24a 61af 	movw	r1, #42671	; 0xa6af
    8fae:	f2c0 0100 	movt	r1, #0
    8fb2:	f002 fb04 	bl	b5be <_ZN4core3fmt10ArgumentV13new17h963f5691124f9a6eE>
    8fb6:	9007      	str	r0, [sp, #28]
    8fb8:	9106      	str	r1, [sp, #24]
    8fba:	e7ff      	b.n	8fbc <_ZN6mynewt4Strn3new17haa130bc407e45c8bE+0xa4>
    8fbc:	982b      	ldr	r0, [sp, #172]	; 0xac
    8fbe:	f24a 61af 	movw	r1, #42671	; 0xa6af
    8fc2:	f2c0 0100 	movt	r1, #0
    8fc6:	f002 fafa 	bl	b5be <_ZN4core3fmt10ArgumentV13new17h963f5691124f9a6eE>
    8fca:	9005      	str	r0, [sp, #20]
    8fcc:	9104      	str	r1, [sp, #16]
    8fce:	e7ff      	b.n	8fd0 <_ZN6mynewt4Strn3new17haa130bc407e45c8bE+0xb8>
    8fd0:	982c      	ldr	r0, [sp, #176]	; 0xb0
    8fd2:	f24d 2143 	movw	r1, #53827	; 0xd243
    8fd6:	f2c0 0100 	movt	r1, #0
    8fda:	f002 fabe 	bl	b55a <_ZN4core3fmt10ArgumentV13new17h77e41a362c8b7a28E>
    8fde:	9003      	str	r0, [sp, #12]
    8fe0:	9102      	str	r1, [sp, #8]
    8fe2:	e7ff      	b.n	8fe4 <_ZN6mynewt4Strn3new17haa130bc407e45c8bE+0xcc>
    8fe4:	9807      	ldr	r0, [sp, #28]
    8fe6:	9019      	str	r0, [sp, #100]	; 0x64
    8fe8:	9906      	ldr	r1, [sp, #24]
    8fea:	911a      	str	r1, [sp, #104]	; 0x68
    8fec:	9a05      	ldr	r2, [sp, #20]
    8fee:	921b      	str	r2, [sp, #108]	; 0x6c
    8ff0:	9b04      	ldr	r3, [sp, #16]
    8ff2:	931c      	str	r3, [sp, #112]	; 0x70
    8ff4:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8ff8:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
    8ffc:	f8dd e008 	ldr.w	lr, [sp, #8]
    9000:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
    9004:	466c      	mov	r4, sp
    9006:	2503      	movs	r5, #3
    9008:	6025      	str	r5, [r4, #0]
    900a:	f649 61bc 	movw	r1, #40636	; 0x9ebc
    900e:	f2c0 0102 	movt	r1, #2
    9012:	a813      	add	r0, sp, #76	; 0x4c
    9014:	ab19      	add	r3, sp, #100	; 0x64
    9016:	462a      	mov	r2, r5
    9018:	f7ff fd74 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    901c:	e7ff      	b.n	901e <_ZN6mynewt4Strn3new17haa130bc407e45c8bE+0x106>
    901e:	f649 61fc 	movw	r1, #40700	; 0x9efc
    9022:	f2c0 0102 	movt	r1, #2
    9026:	a813      	add	r0, sp, #76	; 0x4c
    9028:	f003 fc4d 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    902c:	defe      	udf	#254	; 0xfe
        Strn { 
            rep: StrnRep::ByteStr(bs)
    902e:	980c      	ldr	r0, [sp, #48]	; 0x30
    9030:	990d      	ldr	r1, [sp, #52]	; 0x34
    9032:	902e      	str	r0, [sp, #184]	; 0xb8
    9034:	912f      	str	r1, [sp, #188]	; 0xbc
    9036:	2000      	movs	r0, #0
    9038:	f88d 00b4 	strb.w	r0, [sp, #180]	; 0xb4
        Strn { 
    903c:	982d      	ldr	r0, [sp, #180]	; 0xb4
    903e:	992e      	ldr	r1, [sp, #184]	; 0xb8
    9040:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    9042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9044:	609a      	str	r2, [r3, #8]
    9046:	6059      	str	r1, [r3, #4]
    9048:	6018      	str	r0, [r3, #0]
        }
    }
    904a:	b030      	add	sp, #192	; 0xc0
    904c:	bdb0      	pop	{r4, r5, r7, pc}

0000904e <_ZN6mynewt4Strn9from_cstr17h0552e18bd48de365E>:

    /// Create a new `Strn` with a null-terminated string pointer returned by C.
    pub fn from_cstr(cstr: *const u8) -> Strn {
    904e:	b580      	push	{r7, lr}
    9050:	b086      	sub	sp, #24
    9052:	460a      	mov	r2, r1
    9054:	4603      	mov	r3, r0
    9056:	9102      	str	r1, [sp, #8]
        Strn { 
            rep: StrnRep::CStr(cstr)
    9058:	9902      	ldr	r1, [sp, #8]
    905a:	9104      	str	r1, [sp, #16]
    905c:	2101      	movs	r1, #1
    905e:	f88d 100c 	strb.w	r1, [sp, #12]
        Strn { 
    9062:	9903      	ldr	r1, [sp, #12]
    9064:	f8dd c010 	ldr.w	ip, [sp, #16]
    9068:	f8dd e014 	ldr.w	lr, [sp, #20]
    906c:	f8c0 e008 	str.w	lr, [r0, #8]
    9070:	f8c0 c004 	str.w	ip, [r0, #4]
    9074:	6001      	str	r1, [r0, #0]
        }
    }
    9076:	9201      	str	r2, [sp, #4]
    9078:	9300      	str	r3, [sp, #0]
    907a:	b006      	add	sp, #24
    907c:	bd80      	pop	{r7, pc}

0000907e <_ZN6mynewt4Strn6as_ptr17hce51ed792e0d4eabE>:

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    907e:	b580      	push	{r7, lr}
    9080:	b088      	sub	sp, #32
    9082:	4601      	mov	r1, r0
    9084:	9003      	str	r0, [sp, #12]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    9086:	9803      	ldr	r0, [sp, #12]
    9088:	7800      	ldrb	r0, [r0, #0]
    908a:	07c2      	lsls	r2, r0, #31
    908c:	2a00      	cmp	r2, #0
    908e:	9102      	str	r1, [sp, #8]
    9090:	9001      	str	r0, [sp, #4]
    9092:	d006      	beq.n	90a2 <_ZN6mynewt4Strn6as_ptr17hce51ed792e0d4eabE+0x24>
    9094:	e7ff      	b.n	9096 <_ZN6mynewt4Strn6as_ptr17hce51ed792e0d4eabE+0x18>
    9096:	9801      	ldr	r0, [sp, #4]
    9098:	b2c1      	uxtb	r1, r0
    909a:	2901      	cmp	r1, #1
    909c:	d00d      	beq.n	90ba <_ZN6mynewt4Strn6as_ptr17hce51ed792e0d4eabE+0x3c>
    909e:	e7ff      	b.n	90a0 <_ZN6mynewt4Strn6as_ptr17hce51ed792e0d4eabE+0x22>
            StrnRep::CStr(cstr)  => { cstr }
        }
    }
    90a0:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    90a2:	9803      	ldr	r0, [sp, #12]
    90a4:	6841      	ldr	r1, [r0, #4]
    90a6:	6880      	ldr	r0, [r0, #8]
    90a8:	9105      	str	r1, [sp, #20]
    90aa:	9006      	str	r0, [sp, #24]
    90ac:	9805      	ldr	r0, [sp, #20]
    90ae:	9906      	ldr	r1, [sp, #24]
    90b0:	f001 f9ff 	bl	a4b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd0263209417be61aE>
    90b4:	9004      	str	r0, [sp, #16]
    90b6:	e7ff      	b.n	90b8 <_ZN6mynewt4Strn6as_ptr17hce51ed792e0d4eabE+0x3a>
        match self.rep {
    90b8:	e005      	b.n	90c6 <_ZN6mynewt4Strn6as_ptr17hce51ed792e0d4eabE+0x48>
            StrnRep::CStr(cstr)  => { cstr }
    90ba:	9803      	ldr	r0, [sp, #12]
    90bc:	6840      	ldr	r0, [r0, #4]
    90be:	9007      	str	r0, [sp, #28]
    90c0:	9807      	ldr	r0, [sp, #28]
    90c2:	9004      	str	r0, [sp, #16]
        match self.rep {
    90c4:	e7ff      	b.n	90c6 <_ZN6mynewt4Strn6as_ptr17hce51ed792e0d4eabE+0x48>
    }
    90c6:	9804      	ldr	r0, [sp, #16]
    90c8:	b008      	add	sp, #32
    90ca:	bd80      	pop	{r7, pc}

000090cc <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E>:

    /// Return the length of the string, excluding the terminating null. For safety, we limit to 128.
    pub fn len(&self) -> usize {
    90cc:	b5b0      	push	{r4, r5, r7, lr}
    90ce:	b0c0      	sub	sp, #256	; 0x100
    90d0:	4601      	mov	r1, r0
    90d2:	9012      	str	r0, [sp, #72]	; 0x48
        match self.rep {
            StrnRep::ByteStr(bs) => { 
    90d4:	9812      	ldr	r0, [sp, #72]	; 0x48
    90d6:	7800      	ldrb	r0, [r0, #0]
    90d8:	07c2      	lsls	r2, r0, #31
    90da:	2a00      	cmp	r2, #0
    90dc:	9111      	str	r1, [sp, #68]	; 0x44
    90de:	9010      	str	r0, [sp, #64]	; 0x40
    90e0:	d007      	beq.n	90f2 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x26>
    90e2:	e7ff      	b.n	90e4 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x18>
    90e4:	9810      	ldr	r0, [sp, #64]	; 0x40
    90e6:	b2c1      	uxtb	r1, r0
    90e8:	2901      	cmp	r1, #1
    90ea:	f000 8095 	beq.w	9218 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x14c>
    90ee:	e7ff      	b.n	90f0 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x24>
                }
                assert!(false, "big strn");  //  String too long
                return 128 as usize;
            }
        }
    }
    90f0:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { 
    90f2:	9812      	ldr	r0, [sp, #72]	; 0x48
    90f4:	6841      	ldr	r1, [r0, #4]
    90f6:	6880      	ldr	r0, [r0, #8]
    90f8:	9114      	str	r1, [sp, #80]	; 0x50
    90fa:	9015      	str	r0, [sp, #84]	; 0x54
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    90fc:	9814      	ldr	r0, [sp, #80]	; 0x50
    90fe:	9915      	ldr	r1, [sp, #84]	; 0x54
    9100:	f000 fabf 	bl	9682 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE>
    9104:	9018      	str	r0, [sp, #96]	; 0x60
    9106:	e7ff      	b.n	9108 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x3c>
    9108:	a818      	add	r0, sp, #96	; 0x60
    910a:	9016      	str	r0, [sp, #88]	; 0x58
    910c:	f649 607c 	movw	r0, #40572	; 0x9e7c
    9110:	f2c0 0002 	movt	r0, #2
    9114:	9017      	str	r0, [sp, #92]	; 0x5c
    9116:	9816      	ldr	r0, [sp, #88]	; 0x58
    9118:	9019      	str	r0, [sp, #100]	; 0x64
    911a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    911c:	901a      	str	r0, [sp, #104]	; 0x68
    911e:	9819      	ldr	r0, [sp, #100]	; 0x64
    9120:	991a      	ldr	r1, [sp, #104]	; 0x68
    9122:	f001 fbdc 	bl	a8de <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E>
    9126:	900f      	str	r0, [sp, #60]	; 0x3c
    9128:	e7ff      	b.n	912a <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x5e>
    912a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    912c:	07c1      	lsls	r1, r0, #31
    912e:	2900      	cmp	r1, #0
    9130:	d163      	bne.n	91fa <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x12e>
    9132:	e7ff      	b.n	9134 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x68>
    9134:	9819      	ldr	r0, [sp, #100]	; 0x64
    9136:	902a      	str	r0, [sp, #168]	; 0xa8
    9138:	981a      	ldr	r0, [sp, #104]	; 0x68
    913a:	902b      	str	r0, [sp, #172]	; 0xac
    913c:	4668      	mov	r0, sp
    913e:	2100      	movs	r1, #0
    9140:	6001      	str	r1, [r0, #0]
    9142:	f649 61dc 	movw	r1, #40668	; 0x9edc
    9146:	f2c0 0102 	movt	r1, #2
    914a:	f649 6378 	movw	r3, #40568	; 0x9e78
    914e:	f2c0 0302 	movt	r3, #2
    9152:	a82c      	add	r0, sp, #176	; 0xb0
    9154:	2201      	movs	r2, #1
    9156:	f7ff fcd5 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    915a:	e7ff      	b.n	915c <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x90>
    915c:	a82a      	add	r0, sp, #168	; 0xa8
    915e:	9027      	str	r0, [sp, #156]	; 0x9c
    9160:	a82b      	add	r0, sp, #172	; 0xac
    9162:	9028      	str	r0, [sp, #160]	; 0xa0
    9164:	a82c      	add	r0, sp, #176	; 0xb0
    9166:	9029      	str	r0, [sp, #164]	; 0xa4
    9168:	9827      	ldr	r0, [sp, #156]	; 0x9c
    916a:	9032      	str	r0, [sp, #200]	; 0xc8
    916c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    916e:	9033      	str	r0, [sp, #204]	; 0xcc
    9170:	9829      	ldr	r0, [sp, #164]	; 0xa4
    9172:	9034      	str	r0, [sp, #208]	; 0xd0
    9174:	9832      	ldr	r0, [sp, #200]	; 0xc8
    9176:	f24a 61af 	movw	r1, #42671	; 0xa6af
    917a:	f2c0 0100 	movt	r1, #0
    917e:	f002 fa1e 	bl	b5be <_ZN4core3fmt10ArgumentV13new17h963f5691124f9a6eE>
    9182:	900e      	str	r0, [sp, #56]	; 0x38
    9184:	910d      	str	r1, [sp, #52]	; 0x34
    9186:	e7ff      	b.n	9188 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0xbc>
    9188:	9833      	ldr	r0, [sp, #204]	; 0xcc
    918a:	f24a 61af 	movw	r1, #42671	; 0xa6af
    918e:	f2c0 0100 	movt	r1, #0
    9192:	f002 fa14 	bl	b5be <_ZN4core3fmt10ArgumentV13new17h963f5691124f9a6eE>
    9196:	900c      	str	r0, [sp, #48]	; 0x30
    9198:	910b      	str	r1, [sp, #44]	; 0x2c
    919a:	e7ff      	b.n	919c <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0xd0>
    919c:	9834      	ldr	r0, [sp, #208]	; 0xd0
    919e:	f24d 2143 	movw	r1, #53827	; 0xd243
    91a2:	f2c0 0100 	movt	r1, #0
    91a6:	f002 f9d8 	bl	b55a <_ZN4core3fmt10ArgumentV13new17h77e41a362c8b7a28E>
    91aa:	900a      	str	r0, [sp, #40]	; 0x28
    91ac:	9109      	str	r1, [sp, #36]	; 0x24
    91ae:	e7ff      	b.n	91b0 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0xe4>
    91b0:	980e      	ldr	r0, [sp, #56]	; 0x38
    91b2:	9021      	str	r0, [sp, #132]	; 0x84
    91b4:	990d      	ldr	r1, [sp, #52]	; 0x34
    91b6:	9122      	str	r1, [sp, #136]	; 0x88
    91b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    91ba:	9223      	str	r2, [sp, #140]	; 0x8c
    91bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    91be:	9324      	str	r3, [sp, #144]	; 0x90
    91c0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    91c4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
    91c8:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    91cc:	f8cd e098 	str.w	lr, [sp, #152]	; 0x98
    91d0:	466c      	mov	r4, sp
    91d2:	2503      	movs	r5, #3
    91d4:	6025      	str	r5, [r4, #0]
    91d6:	f649 61bc 	movw	r1, #40636	; 0x9ebc
    91da:	f2c0 0102 	movt	r1, #2
    91de:	a81b      	add	r0, sp, #108	; 0x6c
    91e0:	ab21      	add	r3, sp, #132	; 0x84
    91e2:	462a      	mov	r2, r5
    91e4:	f7ff fc8e 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    91e8:	e7ff      	b.n	91ea <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x11e>
    91ea:	f649 7184 	movw	r1, #40836	; 0x9f84
    91ee:	f2c0 0102 	movt	r1, #2
    91f2:	a81b      	add	r0, sp, #108	; 0x6c
    91f4:	f003 fb67 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    91f8:	defe      	udf	#254	; 0xfe
                bs.len() - 1  //  Don't count the terminating null.
    91fa:	9814      	ldr	r0, [sp, #80]	; 0x50
    91fc:	9915      	ldr	r1, [sp, #84]	; 0x54
    91fe:	f001 f94a 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    9202:	9008      	str	r0, [sp, #32]
    9204:	e7ff      	b.n	9206 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x13a>
    9206:	9808      	ldr	r0, [sp, #32]
    9208:	1e41      	subs	r1, r0, #1
    920a:	2801      	cmp	r0, #1
    920c:	9107      	str	r1, [sp, #28]
    920e:	d365      	bcc.n	92dc <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x210>
    9210:	e7ff      	b.n	9212 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x146>
    9212:	9807      	ldr	r0, [sp, #28]
    9214:	9013      	str	r0, [sp, #76]	; 0x4c
    }
    9216:	e00f      	b.n	9238 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x16c>
            StrnRep::CStr(cstr)  => { 
    9218:	9812      	ldr	r0, [sp, #72]	; 0x48
    921a:	6840      	ldr	r0, [r0, #4]
    921c:	9035      	str	r0, [sp, #212]	; 0xd4
                if cstr.is_null() { return 0; }
    921e:	9835      	ldr	r0, [sp, #212]	; 0xd4
    9220:	f001 f881 	bl	a326 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h5dfc35f677b1147aE>
    9224:	9006      	str	r0, [sp, #24]
    9226:	e7ff      	b.n	9228 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x15c>
    9228:	9806      	ldr	r0, [sp, #24]
    922a:	07c1      	lsls	r1, r0, #31
    922c:	2900      	cmp	r1, #0
    922e:	d007      	beq.n	9240 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x174>
    9230:	e7ff      	b.n	9232 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x166>
    9232:	2000      	movs	r0, #0
    9234:	9013      	str	r0, [sp, #76]	; 0x4c
    9236:	e002      	b.n	923e <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x172>
    }
    9238:	9813      	ldr	r0, [sp, #76]	; 0x4c
    923a:	b040      	add	sp, #256	; 0x100
    923c:	bdb0      	pop	{r4, r5, r7, pc}
                if cstr.is_null() { return 0; }
    923e:	e7fb      	b.n	9238 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x16c>
    9240:	2000      	movs	r0, #0
                for len in 0..127 {
    9242:	9036      	str	r0, [sp, #216]	; 0xd8
    9244:	207f      	movs	r0, #127	; 0x7f
    9246:	9037      	str	r0, [sp, #220]	; 0xdc
    9248:	9836      	ldr	r0, [sp, #216]	; 0xd8
    924a:	9937      	ldr	r1, [sp, #220]	; 0xdc
    924c:	f001 fd35 	bl	acba <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2709466b664fb27cE>
    9250:	9005      	str	r0, [sp, #20]
    9252:	9104      	str	r1, [sp, #16]
    9254:	e7ff      	b.n	9256 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x18a>
    9256:	9805      	ldr	r0, [sp, #20]
    9258:	9038      	str	r0, [sp, #224]	; 0xe0
    925a:	9904      	ldr	r1, [sp, #16]
    925c:	9139      	str	r1, [sp, #228]	; 0xe4
    925e:	e7ff      	b.n	9260 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x194>
    9260:	a838      	add	r0, sp, #224	; 0xe0
    9262:	f001 fcdd 	bl	ac20 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E>
    9266:	913c      	str	r1, [sp, #240]	; 0xf0
    9268:	903b      	str	r0, [sp, #236]	; 0xec
    926a:	e7ff      	b.n	926c <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x1a0>
    926c:	983b      	ldr	r0, [sp, #236]	; 0xec
    926e:	2800      	cmp	r0, #0
    9270:	9003      	str	r0, [sp, #12]
    9272:	d013      	beq.n	929c <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x1d0>
    9274:	e7ff      	b.n	9276 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x1aa>
    9276:	9803      	ldr	r0, [sp, #12]
    9278:	2801      	cmp	r0, #1
    927a:	f47f af39 	bne.w	90f0 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x24>
    927e:	e7ff      	b.n	9280 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x1b4>
    9280:	983c      	ldr	r0, [sp, #240]	; 0xf0
    9282:	903d      	str	r0, [sp, #244]	; 0xf4
    9284:	983d      	ldr	r0, [sp, #244]	; 0xf4
    9286:	903a      	str	r0, [sp, #232]	; 0xe8
    9288:	983a      	ldr	r0, [sp, #232]	; 0xe8
    928a:	903e      	str	r0, [sp, #248]	; 0xf8
                    let ptr: *const u8 =  ((cstr as u32) + len) as *const u8;
    928c:	9835      	ldr	r0, [sp, #212]	; 0xd4
    928e:	993e      	ldr	r1, [sp, #248]	; 0xf8
    9290:	4401      	add	r1, r0
    9292:	460a      	mov	r2, r1
    9294:	4281      	cmp	r1, r0
    9296:	9202      	str	r2, [sp, #8]
    9298:	d319      	bcc.n	92ce <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x202>
    929a:	e003      	b.n	92a4 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x1d8>
    929c:	2001      	movs	r0, #1
                assert!(false, "big strn");  //  String too long
    929e:	2800      	cmp	r0, #0
    92a0:	d10b      	bne.n	92ba <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x1ee>
    92a2:	e011      	b.n	92c8 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x1fc>
                    let ptr: *const u8 =  ((cstr as u32) + len) as *const u8;
    92a4:	9802      	ldr	r0, [sp, #8]
    92a6:	903f      	str	r0, [sp, #252]	; 0xfc
                    if unsafe { *ptr } == 0 { return len as usize; }                    
    92a8:	993f      	ldr	r1, [sp, #252]	; 0xfc
    92aa:	7809      	ldrb	r1, [r1, #0]
    92ac:	2900      	cmp	r1, #0
    92ae:	d103      	bne.n	92b8 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x1ec>
    92b0:	e7ff      	b.n	92b2 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x1e6>
    92b2:	983e      	ldr	r0, [sp, #248]	; 0xf8
    92b4:	9013      	str	r0, [sp, #76]	; 0x4c
    92b6:	e7c2      	b.n	923e <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x172>
                for len in 0..127 {
    92b8:	e7d2      	b.n	9260 <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x194>
                assert!(false, "big strn");  //  String too long
    92ba:	f649 706c 	movw	r0, #40812	; 0x9f6c
    92be:	f2c0 0002 	movt	r0, #2
    92c2:	f003 fac3 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    92c6:	defe      	udf	#254	; 0xfe
    92c8:	2080      	movs	r0, #128	; 0x80
                return 128 as usize;
    92ca:	9013      	str	r0, [sp, #76]	; 0x4c
    92cc:	e7b7      	b.n	923e <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E+0x172>
                    let ptr: *const u8 =  ((cstr as u32) + len) as *const u8;
    92ce:	f649 704c 	movw	r0, #40780	; 0x9f4c
    92d2:	f2c0 0002 	movt	r0, #2
    92d6:	f003 fab9 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    92da:	defe      	udf	#254	; 0xfe
                bs.len() - 1  //  Don't count the terminating null.
    92dc:	f649 70c4 	movw	r0, #40900	; 0x9fc4
    92e0:	f2c0 0002 	movt	r0, #2
    92e4:	f003 fab2 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    92e8:	defe      	udf	#254	; 0xfe

000092ea <_ZN6mynewt4Strn8is_empty17hf6264bbc9f796f10E>:

    /// Return true if the string is empty
    pub fn is_empty(&self) -> bool {
    92ea:	b580      	push	{r7, lr}
    92ec:	b084      	sub	sp, #16
    92ee:	4601      	mov	r1, r0
    92f0:	9003      	str	r0, [sp, #12]
        self.len() == 0
    92f2:	9803      	ldr	r0, [sp, #12]
    92f4:	9102      	str	r1, [sp, #8]
    92f6:	f7ff fee9 	bl	90cc <_ZN6mynewt4Strn3len17h8ed95dfae8539c50E>
    92fa:	9001      	str	r0, [sp, #4]
    92fc:	e7ff      	b.n	92fe <_ZN6mynewt4Strn8is_empty17hf6264bbc9f796f10E+0x14>
    92fe:	9801      	ldr	r0, [sp, #4]
    9300:	fab0 f180 	clz	r1, r0
    9304:	0948      	lsrs	r0, r1, #5
    }
    9306:	b004      	add	sp, #16
    9308:	bd80      	pop	{r7, pc}

0000930a <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    930a:	b5b0      	push	{r4, r5, r7, lr}
    930c:	b0ae      	sub	sp, #184	; 0xb8
    930e:	4601      	mov	r1, r0
    9310:	900b      	str	r0, [sp, #44]	; 0x2c
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    9312:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9314:	7800      	ldrb	r0, [r0, #0]
    9316:	07c2      	lsls	r2, r0, #31
    9318:	2a00      	cmp	r2, #0
    931a:	910a      	str	r1, [sp, #40]	; 0x28
    931c:	9009      	str	r0, [sp, #36]	; 0x24
    931e:	d007      	beq.n	9330 <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0x26>
    9320:	e7ff      	b.n	9322 <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0x18>
    9322:	9809      	ldr	r0, [sp, #36]	; 0x24
    9324:	b2c1      	uxtb	r1, r0
    9326:	2901      	cmp	r1, #1
    9328:	f000 8087 	beq.w	943a <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0x130>
    932c:	e7ff      	b.n	932e <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0x24>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
        }
    }
    932e:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    9330:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9332:	6841      	ldr	r1, [r0, #4]
    9334:	6880      	ldr	r0, [r0, #8]
    9336:	910c      	str	r1, [sp, #48]	; 0x30
    9338:	900d      	str	r0, [sp, #52]	; 0x34
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    933a:	980c      	ldr	r0, [sp, #48]	; 0x30
    933c:	990d      	ldr	r1, [sp, #52]	; 0x34
    933e:	f000 f9a0 	bl	9682 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE>
    9342:	9010      	str	r0, [sp, #64]	; 0x40
    9344:	e7ff      	b.n	9346 <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0x3c>
    9346:	a810      	add	r0, sp, #64	; 0x40
    9348:	900e      	str	r0, [sp, #56]	; 0x38
    934a:	f649 607c 	movw	r0, #40572	; 0x9e7c
    934e:	f2c0 0002 	movt	r0, #2
    9352:	900f      	str	r0, [sp, #60]	; 0x3c
    9354:	980e      	ldr	r0, [sp, #56]	; 0x38
    9356:	9011      	str	r0, [sp, #68]	; 0x44
    9358:	980f      	ldr	r0, [sp, #60]	; 0x3c
    935a:	9012      	str	r0, [sp, #72]	; 0x48
    935c:	9811      	ldr	r0, [sp, #68]	; 0x44
    935e:	9912      	ldr	r1, [sp, #72]	; 0x48
    9360:	f001 fabd 	bl	a8de <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E>
    9364:	9008      	str	r0, [sp, #32]
    9366:	e7ff      	b.n	9368 <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0x5e>
    9368:	9808      	ldr	r0, [sp, #32]
    936a:	07c1      	lsls	r1, r0, #31
    936c:	2900      	cmp	r1, #0
    936e:	d163      	bne.n	9438 <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0x12e>
    9370:	e7ff      	b.n	9372 <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0x68>
    9372:	9811      	ldr	r0, [sp, #68]	; 0x44
    9374:	9022      	str	r0, [sp, #136]	; 0x88
    9376:	9812      	ldr	r0, [sp, #72]	; 0x48
    9378:	9023      	str	r0, [sp, #140]	; 0x8c
    937a:	4668      	mov	r0, sp
    937c:	2100      	movs	r1, #0
    937e:	6001      	str	r1, [r0, #0]
    9380:	f649 61dc 	movw	r1, #40668	; 0x9edc
    9384:	f2c0 0102 	movt	r1, #2
    9388:	f649 6378 	movw	r3, #40568	; 0x9e78
    938c:	f2c0 0302 	movt	r3, #2
    9390:	a824      	add	r0, sp, #144	; 0x90
    9392:	2201      	movs	r2, #1
    9394:	f7ff fbb6 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    9398:	e7ff      	b.n	939a <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0x90>
    939a:	a822      	add	r0, sp, #136	; 0x88
    939c:	901f      	str	r0, [sp, #124]	; 0x7c
    939e:	a823      	add	r0, sp, #140	; 0x8c
    93a0:	9020      	str	r0, [sp, #128]	; 0x80
    93a2:	a824      	add	r0, sp, #144	; 0x90
    93a4:	9021      	str	r0, [sp, #132]	; 0x84
    93a6:	981f      	ldr	r0, [sp, #124]	; 0x7c
    93a8:	902a      	str	r0, [sp, #168]	; 0xa8
    93aa:	9820      	ldr	r0, [sp, #128]	; 0x80
    93ac:	902b      	str	r0, [sp, #172]	; 0xac
    93ae:	9821      	ldr	r0, [sp, #132]	; 0x84
    93b0:	902c      	str	r0, [sp, #176]	; 0xb0
    93b2:	982a      	ldr	r0, [sp, #168]	; 0xa8
    93b4:	f24a 61af 	movw	r1, #42671	; 0xa6af
    93b8:	f2c0 0100 	movt	r1, #0
    93bc:	f002 f8ff 	bl	b5be <_ZN4core3fmt10ArgumentV13new17h963f5691124f9a6eE>
    93c0:	9007      	str	r0, [sp, #28]
    93c2:	9106      	str	r1, [sp, #24]
    93c4:	e7ff      	b.n	93c6 <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0xbc>
    93c6:	982b      	ldr	r0, [sp, #172]	; 0xac
    93c8:	f24a 61af 	movw	r1, #42671	; 0xa6af
    93cc:	f2c0 0100 	movt	r1, #0
    93d0:	f002 f8f5 	bl	b5be <_ZN4core3fmt10ArgumentV13new17h963f5691124f9a6eE>
    93d4:	9005      	str	r0, [sp, #20]
    93d6:	9104      	str	r1, [sp, #16]
    93d8:	e7ff      	b.n	93da <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0xd0>
    93da:	982c      	ldr	r0, [sp, #176]	; 0xb0
    93dc:	f24d 2143 	movw	r1, #53827	; 0xd243
    93e0:	f2c0 0100 	movt	r1, #0
    93e4:	f002 f8b9 	bl	b55a <_ZN4core3fmt10ArgumentV13new17h77e41a362c8b7a28E>
    93e8:	9003      	str	r0, [sp, #12]
    93ea:	9102      	str	r1, [sp, #8]
    93ec:	e7ff      	b.n	93ee <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0xe4>
    93ee:	9807      	ldr	r0, [sp, #28]
    93f0:	9019      	str	r0, [sp, #100]	; 0x64
    93f2:	9906      	ldr	r1, [sp, #24]
    93f4:	911a      	str	r1, [sp, #104]	; 0x68
    93f6:	9a05      	ldr	r2, [sp, #20]
    93f8:	921b      	str	r2, [sp, #108]	; 0x6c
    93fa:	9b04      	ldr	r3, [sp, #16]
    93fc:	931c      	str	r3, [sp, #112]	; 0x70
    93fe:	f8dd c00c 	ldr.w	ip, [sp, #12]
    9402:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
    9406:	f8dd e008 	ldr.w	lr, [sp, #8]
    940a:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
    940e:	466c      	mov	r4, sp
    9410:	2503      	movs	r5, #3
    9412:	6025      	str	r5, [r4, #0]
    9414:	f649 61bc 	movw	r1, #40636	; 0x9ebc
    9418:	f2c0 0102 	movt	r1, #2
    941c:	a813      	add	r0, sp, #76	; 0x4c
    941e:	ab19      	add	r3, sp, #100	; 0x64
    9420:	462a      	mov	r2, r5
    9422:	f7ff fb6f 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    9426:	e7ff      	b.n	9428 <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0x11e>
    9428:	f649 71dc 	movw	r1, #40924	; 0x9fdc
    942c:	f2c0 0102 	movt	r1, #2
    9430:	a813      	add	r0, sp, #76	; 0x4c
    9432:	f003 fa48 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    9436:	defe      	udf	#254	; 0xfe
        match self.rep {
    9438:	e003      	b.n	9442 <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0x138>
            StrnRep::CStr(_cstr)  => {}
    943a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    943c:	6840      	ldr	r0, [r0, #4]
    943e:	902d      	str	r0, [sp, #180]	; 0xb4
        match self.rep {
    9440:	e7ff      	b.n	9442 <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E+0x138>
    }
    9442:	b02e      	add	sp, #184	; 0xb8
    9444:	bdb0      	pop	{r4, r5, r7, pc}

00009446 <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E>:
    9446:	b580      	push	{r7, lr}
    9448:	b08c      	sub	sp, #48	; 0x30
    944a:	460a      	mov	r2, r1
    944c:	4603      	mov	r3, r0
    944e:	9006      	str	r0, [sp, #24]
    9450:	9107      	str	r1, [sp, #28]
    9452:	2001      	movs	r0, #1
    9454:	2800      	cmp	r0, #0
    9456:	9205      	str	r2, [sp, #20]
    9458:	9304      	str	r3, [sp, #16]
    945a:	d11b      	bne.n	9494 <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x4e>
    945c:	e7ff      	b.n	945e <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x18>
    945e:	9806      	ldr	r0, [sp, #24]
    9460:	9003      	str	r0, [sp, #12]
    9462:	f000 ffe2 	bl	a42a <_ZN4core3mem8align_of17h58768cca995720e6E>
    9466:	9002      	str	r0, [sp, #8]
    9468:	e7ff      	b.n	946a <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x24>
    946a:	9802      	ldr	r0, [sp, #8]
    946c:	2800      	cmp	r0, #0
    946e:	d038      	beq.n	94e2 <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x9c>
    9470:	e7ff      	b.n	9472 <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x2c>
    9472:	9803      	ldr	r0, [sp, #12]
    9474:	9902      	ldr	r1, [sp, #8]
    9476:	fbb0 f2f1 	udiv	r2, r0, r1
    947a:	fb02 0211 	mls	r2, r2, r1, r0
    947e:	2a00      	cmp	r2, #0
    9480:	d007      	beq.n	9492 <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x4c>
    9482:	e7ff      	b.n	9484 <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x3e>
    9484:	f24a 00d0 	movw	r0, #41168	; 0xa0d0
    9488:	f2c0 0002 	movt	r0, #2
    948c:	f003 f9de 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    9490:	defe      	udf	#254	; 0xfe
    9492:	e7ff      	b.n	9494 <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x4e>
    9494:	2001      	movs	r0, #1
    9496:	2800      	cmp	r0, #0
    9498:	d117      	bne.n	94ca <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x84>
    949a:	e7ff      	b.n	949c <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x56>
    949c:	f000 ffbc 	bl	a418 <_ZN4core3mem7size_of17h96e196a831b2ee50E>
    94a0:	9001      	str	r0, [sp, #4]
    94a2:	e7ff      	b.n	94a4 <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x5e>
    94a4:	9907      	ldr	r1, [sp, #28]
    94a6:	9801      	ldr	r0, [sp, #4]
    94a8:	f001 fb23 	bl	aaf2 <_ZN4core3num23_$LT$impl$u20$usize$GT$14saturating_mul17hacbe29afd3c85835E>
    94ac:	9000      	str	r0, [sp, #0]
    94ae:	e7ff      	b.n	94b0 <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x6a>
    94b0:	9800      	ldr	r0, [sp, #0]
    94b2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    94b6:	dc07      	bgt.n	94c8 <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x82>
    94b8:	e7ff      	b.n	94ba <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x74>
    94ba:	f24a 1020 	movw	r0, #41248	; 0xa120
    94be:	f2c0 0002 	movt	r0, #2
    94c2:	f003 f9c3 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    94c6:	defe      	udf	#254	; 0xfe
    94c8:	e7ff      	b.n	94ca <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E+0x84>
    94ca:	9806      	ldr	r0, [sp, #24]
    94cc:	9907      	ldr	r1, [sp, #28]
    94ce:	900a      	str	r0, [sp, #40]	; 0x28
    94d0:	910b      	str	r1, [sp, #44]	; 0x2c
    94d2:	980a      	ldr	r0, [sp, #40]	; 0x28
    94d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    94d6:	9008      	str	r0, [sp, #32]
    94d8:	9109      	str	r1, [sp, #36]	; 0x24
    94da:	9808      	ldr	r0, [sp, #32]
    94dc:	9909      	ldr	r1, [sp, #36]	; 0x24
    94de:	b00c      	add	sp, #48	; 0x30
    94e0:	bd80      	pop	{r7, pc}
    94e2:	f24a 007c 	movw	r0, #41084	; 0xa07c
    94e6:	f2c0 0002 	movt	r0, #2
    94ea:	f003 f9af 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    94ee:	defe      	udf	#254	; 0xfe

000094f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h35bdf6245f6900b2E>:
    94f0:	b084      	sub	sp, #16
    94f2:	460a      	mov	r2, r1
    94f4:	4603      	mov	r3, r0
    94f6:	9002      	str	r0, [sp, #8]
    94f8:	9103      	str	r1, [sp, #12]
    94fa:	9802      	ldr	r0, [sp, #8]
    94fc:	9201      	str	r2, [sp, #4]
    94fe:	9300      	str	r3, [sp, #0]
    9500:	b004      	add	sp, #16
    9502:	4770      	bx	lr

00009504 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E>:
    9504:	b5b0      	push	{r4, r5, r7, lr}
    9506:	b0b2      	sub	sp, #200	; 0xc8
    9508:	469c      	mov	ip, r3
    950a:	4696      	mov	lr, r2
    950c:	460c      	mov	r4, r1
    950e:	4605      	mov	r5, r0
    9510:	900e      	str	r0, [sp, #56]	; 0x38
    9512:	910f      	str	r1, [sp, #60]	; 0x3c
    9514:	9210      	str	r2, [sp, #64]	; 0x40
    9516:	9311      	str	r3, [sp, #68]	; 0x44
    9518:	980e      	ldr	r0, [sp, #56]	; 0x38
    951a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    951c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    9520:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    9524:	940b      	str	r4, [sp, #44]	; 0x2c
    9526:	950a      	str	r5, [sp, #40]	; 0x28
    9528:	f000 ffb5 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    952c:	9014      	str	r0, [sp, #80]	; 0x50
    952e:	e7ff      	b.n	9530 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E+0x2c>
    9530:	9810      	ldr	r0, [sp, #64]	; 0x40
    9532:	9911      	ldr	r1, [sp, #68]	; 0x44
    9534:	f000 ffaf 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    9538:	9015      	str	r0, [sp, #84]	; 0x54
    953a:	e7ff      	b.n	953c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E+0x38>
    953c:	a814      	add	r0, sp, #80	; 0x50
    953e:	9012      	str	r0, [sp, #72]	; 0x48
    9540:	a815      	add	r0, sp, #84	; 0x54
    9542:	9013      	str	r0, [sp, #76]	; 0x4c
    9544:	9812      	ldr	r0, [sp, #72]	; 0x48
    9546:	9016      	str	r0, [sp, #88]	; 0x58
    9548:	9813      	ldr	r0, [sp, #76]	; 0x4c
    954a:	9017      	str	r0, [sp, #92]	; 0x5c
    954c:	9816      	ldr	r0, [sp, #88]	; 0x58
    954e:	6800      	ldr	r0, [r0, #0]
    9550:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9552:	6809      	ldr	r1, [r1, #0]
    9554:	4288      	cmp	r0, r1
    9556:	d014      	beq.n	9582 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E+0x7e>
    9558:	e7ff      	b.n	955a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E+0x56>
    955a:	9816      	ldr	r0, [sp, #88]	; 0x58
    955c:	9027      	str	r0, [sp, #156]	; 0x9c
    955e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9560:	9028      	str	r0, [sp, #160]	; 0xa0
    9562:	4668      	mov	r0, sp
    9564:	2100      	movs	r1, #0
    9566:	6001      	str	r1, [r0, #0]
    9568:	f24a 11c0 	movw	r1, #41408	; 0xa1c0
    956c:	f2c0 0102 	movt	r1, #2
    9570:	f24a 13c8 	movw	r3, #41416	; 0xa1c8
    9574:	f2c0 0302 	movt	r3, #2
    9578:	a829      	add	r0, sp, #164	; 0xa4
    957a:	2201      	movs	r2, #1
    957c:	f7ff fac2 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    9580:	e005      	b.n	958e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E+0x8a>
    9582:	9810      	ldr	r0, [sp, #64]	; 0x40
    9584:	9911      	ldr	r1, [sp, #68]	; 0x44
    9586:	f000 ff94 	bl	a4b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd0263209417be61aE>
    958a:	9009      	str	r0, [sp, #36]	; 0x24
    958c:	e04e      	b.n	962c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E+0x128>
    958e:	a827      	add	r0, sp, #156	; 0x9c
    9590:	9024      	str	r0, [sp, #144]	; 0x90
    9592:	a828      	add	r0, sp, #160	; 0xa0
    9594:	9025      	str	r0, [sp, #148]	; 0x94
    9596:	a829      	add	r0, sp, #164	; 0xa4
    9598:	9026      	str	r0, [sp, #152]	; 0x98
//! Mynewt API for Rust. Contains Rust bindings for Mynewt API for C, generated by `bindgen`.
    959a:	9824      	ldr	r0, [sp, #144]	; 0x90
    959c:	902f      	str	r0, [sp, #188]	; 0xbc
    959e:	9825      	ldr	r0, [sp, #148]	; 0x94
    95a0:	9030      	str	r0, [sp, #192]	; 0xc0
    95a2:	9826      	ldr	r0, [sp, #152]	; 0x98
    95a4:	9031      	str	r0, [sp, #196]	; 0xc4
    95a6:	982f      	ldr	r0, [sp, #188]	; 0xbc
    95a8:	f24a 413d 	movw	r1, #42045	; 0xa43d
    95ac:	f2c0 0100 	movt	r1, #0
    95b0:	f000 ff58 	bl	a464 <_ZN4core3fmt10ArgumentV13new17he7aeb924cd1c8272E>
    95b4:	9008      	str	r0, [sp, #32]
    95b6:	9107      	str	r1, [sp, #28]
    95b8:	e7ff      	b.n	95ba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E+0xb6>
    95ba:	9830      	ldr	r0, [sp, #192]	; 0xc0
    95bc:	f24a 413d 	movw	r1, #42045	; 0xa43d
    95c0:	f2c0 0100 	movt	r1, #0
    95c4:	f000 ff4e 	bl	a464 <_ZN4core3fmt10ArgumentV13new17he7aeb924cd1c8272E>
    95c8:	9006      	str	r0, [sp, #24]
    95ca:	9105      	str	r1, [sp, #20]
    95cc:	e7ff      	b.n	95ce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E+0xca>
    95ce:	9831      	ldr	r0, [sp, #196]	; 0xc4
    95d0:	f24d 2143 	movw	r1, #53827	; 0xd243
    95d4:	f2c0 0100 	movt	r1, #0
    95d8:	f001 ffbf 	bl	b55a <_ZN4core3fmt10ArgumentV13new17h77e41a362c8b7a28E>
    95dc:	9004      	str	r0, [sp, #16]
    95de:	9103      	str	r1, [sp, #12]
    95e0:	e7ff      	b.n	95e2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E+0xde>
    95e2:	9808      	ldr	r0, [sp, #32]
    95e4:	901e      	str	r0, [sp, #120]	; 0x78
    95e6:	9907      	ldr	r1, [sp, #28]
    95e8:	911f      	str	r1, [sp, #124]	; 0x7c
    95ea:	9a06      	ldr	r2, [sp, #24]
    95ec:	9220      	str	r2, [sp, #128]	; 0x80
    95ee:	9b05      	ldr	r3, [sp, #20]
    95f0:	9321      	str	r3, [sp, #132]	; 0x84
    95f2:	f8dd c010 	ldr.w	ip, [sp, #16]
    95f6:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    95fa:	f8dd e00c 	ldr.w	lr, [sp, #12]
    95fe:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    9602:	466c      	mov	r4, sp
    9604:	2503      	movs	r5, #3
    9606:	6025      	str	r5, [r4, #0]
    9608:	f24a 1174 	movw	r1, #41332	; 0xa174
    960c:	f2c0 0102 	movt	r1, #2
    9610:	a818      	add	r0, sp, #96	; 0x60
    9612:	ab1e      	add	r3, sp, #120	; 0x78
    9614:	462a      	mov	r2, r5
    9616:	f7ff fa75 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    961a:	e7ff      	b.n	961c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E+0x118>
    961c:	f24a 11c8 	movw	r1, #41416	; 0xa1c8
    9620:	f2c0 0102 	movt	r1, #2
    9624:	a818      	add	r0, sp, #96	; 0x60
    9626:	f003 f94e 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    962a:	defe      	udf	#254	; 0xfe
    962c:	980e      	ldr	r0, [sp, #56]	; 0x38
    962e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9630:	f7ff ff5e 	bl	94f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h35bdf6245f6900b2E>
    9634:	9002      	str	r0, [sp, #8]
    9636:	e7ff      	b.n	9638 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E+0x134>
    9638:	980e      	ldr	r0, [sp, #56]	; 0x38
    963a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    963c:	f000 ff2b 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    9640:	9001      	str	r0, [sp, #4]
    9642:	e7ff      	b.n	9644 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E+0x140>
    9644:	9809      	ldr	r0, [sp, #36]	; 0x24
    9646:	9902      	ldr	r1, [sp, #8]
    9648:	9a01      	ldr	r2, [sp, #4]
    964a:	f000 ff3c 	bl	a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>
    964e:	e7ff      	b.n	9650 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E+0x14c>
    9650:	b032      	add	sp, #200	; 0xc8
    9652:	bdb0      	pop	{r4, r5, r7, pc}

00009654 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h6a84f0d1d4d912f5E>:
    9654:	b580      	push	{r7, lr}
    9656:	b088      	sub	sp, #32
    9658:	4613      	mov	r3, r2
    965a:	468c      	mov	ip, r1
    965c:	4686      	mov	lr, r0
    965e:	9005      	str	r0, [sp, #20]
    9660:	9106      	str	r1, [sp, #24]
    9662:	9207      	str	r2, [sp, #28]
    9664:	9807      	ldr	r0, [sp, #28]
    9666:	9905      	ldr	r1, [sp, #20]
    9668:	9a06      	ldr	r2, [sp, #24]
    966a:	9304      	str	r3, [sp, #16]
    966c:	f8cd c00c 	str.w	ip, [sp, #12]
    9670:	f8cd e008 	str.w	lr, [sp, #8]
    9674:	f000 f877 	bl	9766 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h9a430e39befb7ad4E>
    9678:	9001      	str	r0, [sp, #4]
    967a:	e7ff      	b.n	967c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h6a84f0d1d4d912f5E+0x28>
    967c:	9801      	ldr	r0, [sp, #4]
    967e:	b008      	add	sp, #32
    9680:	bd80      	pop	{r7, pc}

00009682 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE>:
    9682:	b580      	push	{r7, lr}
    9684:	b08e      	sub	sp, #56	; 0x38
    9686:	460a      	mov	r2, r1
    9688:	4603      	mov	r3, r0
    968a:	9006      	str	r0, [sp, #24]
    968c:	9107      	str	r1, [sp, #28]
    968e:	9806      	ldr	r0, [sp, #24]
    9690:	9907      	ldr	r1, [sp, #28]
    9692:	9205      	str	r2, [sp, #20]
    9694:	9304      	str	r3, [sp, #16]
    9696:	f000 fefe 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    969a:	9003      	str	r0, [sp, #12]
    969c:	e7ff      	b.n	969e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE+0x1c>
    969e:	2101      	movs	r1, #1
    96a0:	9803      	ldr	r0, [sp, #12]
    96a2:	f001 f9fe 	bl	aaa2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h3a62c6e9b8547987E>
    96a6:	9002      	str	r0, [sp, #8]
    96a8:	9101      	str	r1, [sp, #4]
    96aa:	e7ff      	b.n	96ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE+0x2a>
    96ac:	9802      	ldr	r0, [sp, #8]
    96ae:	9901      	ldr	r1, [sp, #4]
    96b0:	f001 f8ae 	bl	a810 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hd686c3141f50ebdcE>
    96b4:	910b      	str	r1, [sp, #44]	; 0x2c
    96b6:	900a      	str	r0, [sp, #40]	; 0x28
    96b8:	e7ff      	b.n	96ba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE+0x38>
    96ba:	980a      	ldr	r0, [sp, #40]	; 0x28
    96bc:	2800      	cmp	r0, #0
    96be:	9000      	str	r0, [sp, #0]
    96c0:	d010      	beq.n	96e4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE+0x62>
    96c2:	e7ff      	b.n	96c4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE+0x42>
    96c4:	9800      	ldr	r0, [sp, #0]
    96c6:	2801      	cmp	r0, #1
    96c8:	d001      	beq.n	96ce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE+0x4c>
    96ca:	e7ff      	b.n	96cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE+0x4a>
    96cc:	defe      	udf	#254	; 0xfe
    96ce:	f001 f849 	bl	a764 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h027105c960327d71E>
    96d2:	e7ff      	b.n	96d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE+0x52>
    96d4:	f001 f896 	bl	a804 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h1cdb1d96882cb73bE>
    96d8:	9008      	str	r0, [sp, #32]
    96da:	e7ff      	b.n	96dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE+0x5a>
    96dc:	e7ff      	b.n	96de <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE+0x5c>
    96de:	9808      	ldr	r0, [sp, #32]
    96e0:	b00e      	add	sp, #56	; 0x38
    96e2:	bd80      	pop	{r7, pc}
    96e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    96e6:	900d      	str	r0, [sp, #52]	; 0x34
    96e8:	980d      	ldr	r0, [sp, #52]	; 0x34
    96ea:	9009      	str	r0, [sp, #36]	; 0x24
    96ec:	9806      	ldr	r0, [sp, #24]
    96ee:	9907      	ldr	r1, [sp, #28]
    96f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    96f2:	f7ff ffaf 	bl	9654 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h6a84f0d1d4d912f5E>
    96f6:	9008      	str	r0, [sp, #32]
    96f8:	e7ff      	b.n	96fa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE+0x78>
    96fa:	e7f0      	b.n	96de <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE+0x5c>

000096fc <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc37ea63e0a33f701E>:
    96fc:	b580      	push	{r7, lr}
    96fe:	b088      	sub	sp, #32
    9700:	4613      	mov	r3, r2
    9702:	468c      	mov	ip, r1
    9704:	4686      	mov	lr, r0
    9706:	9005      	str	r0, [sp, #20]
    9708:	9106      	str	r1, [sp, #24]
    970a:	9207      	str	r2, [sp, #28]
    970c:	9807      	ldr	r0, [sp, #28]
    970e:	9905      	ldr	r1, [sp, #20]
    9710:	9a06      	ldr	r2, [sp, #24]
    9712:	9304      	str	r3, [sp, #16]
    9714:	f8cd c00c 	str.w	ip, [sp, #12]
    9718:	f8cd e008 	str.w	lr, [sp, #8]
    971c:	f001 fa5d 	bl	abda <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h1f992f697420e688E>
    9720:	9001      	str	r0, [sp, #4]
    9722:	9100      	str	r1, [sp, #0]
    9724:	e7ff      	b.n	9726 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc37ea63e0a33f701E+0x2a>
    9726:	9801      	ldr	r0, [sp, #4]
    9728:	9900      	ldr	r1, [sp, #0]
    972a:	b008      	add	sp, #32
    972c:	bd80      	pop	{r7, pc}

0000972e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h464403f29222bffdE>:
    972e:	b580      	push	{r7, lr}
    9730:	b088      	sub	sp, #32
    9732:	4613      	mov	r3, r2
    9734:	468c      	mov	ip, r1
    9736:	4686      	mov	lr, r0
    9738:	9005      	str	r0, [sp, #20]
    973a:	9106      	str	r1, [sp, #24]
    973c:	9207      	str	r2, [sp, #28]
    973e:	9806      	ldr	r0, [sp, #24]
    9740:	9907      	ldr	r1, [sp, #28]
    9742:	9304      	str	r3, [sp, #16]
    9744:	f8cd c00c 	str.w	ip, [sp, #12]
    9748:	f8cd e008 	str.w	lr, [sp, #8]
    974c:	f000 feb1 	bl	a4b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd0263209417be61aE>
    9750:	9001      	str	r0, [sp, #4]
    9752:	e7ff      	b.n	9754 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h464403f29222bffdE+0x26>
    9754:	9905      	ldr	r1, [sp, #20]
    9756:	9801      	ldr	r0, [sp, #4]
    9758:	f000 ff04 	bl	a564 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h070926fb062338c0E>
    975c:	9000      	str	r0, [sp, #0]
    975e:	e7ff      	b.n	9760 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h464403f29222bffdE+0x32>
    9760:	9800      	ldr	r0, [sp, #0]
    9762:	b008      	add	sp, #32
    9764:	bd80      	pop	{r7, pc}

00009766 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h9a430e39befb7ad4E>:
    9766:	b580      	push	{r7, lr}
    9768:	b08a      	sub	sp, #40	; 0x28
    976a:	4613      	mov	r3, r2
    976c:	468c      	mov	ip, r1
    976e:	4686      	mov	lr, r0
    9770:	9006      	str	r0, [sp, #24]
    9772:	9107      	str	r1, [sp, #28]
    9774:	9208      	str	r2, [sp, #32]
    9776:	9806      	ldr	r0, [sp, #24]
    9778:	9907      	ldr	r1, [sp, #28]
    977a:	9a08      	ldr	r2, [sp, #32]
    977c:	9005      	str	r0, [sp, #20]
    977e:	4608      	mov	r0, r1
    9780:	4611      	mov	r1, r2
    9782:	9304      	str	r3, [sp, #16]
    9784:	f8cd c00c 	str.w	ip, [sp, #12]
    9788:	f8cd e008 	str.w	lr, [sp, #8]
    978c:	f000 fe83 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    9790:	9001      	str	r0, [sp, #4]
    9792:	e7ff      	b.n	9794 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h9a430e39befb7ad4E+0x2e>
    9794:	9805      	ldr	r0, [sp, #20]
    9796:	9901      	ldr	r1, [sp, #4]
    9798:	4288      	cmp	r0, r1
    979a:	d20a      	bcs.n	97b2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h9a430e39befb7ad4E+0x4c>
    979c:	e7ff      	b.n	979e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h9a430e39befb7ad4E+0x38>
    979e:	9806      	ldr	r0, [sp, #24]
    97a0:	9907      	ldr	r1, [sp, #28]
    97a2:	9a08      	ldr	r2, [sp, #32]
    97a4:	f7ff ffc3 	bl	972e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17h464403f29222bffdE>
    97a8:	9000      	str	r0, [sp, #0]
    97aa:	e7ff      	b.n	97ac <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h9a430e39befb7ad4E+0x46>
    97ac:	9800      	ldr	r0, [sp, #0]
    97ae:	9009      	str	r0, [sp, #36]	; 0x24
    97b0:	e002      	b.n	97b8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h9a430e39befb7ad4E+0x52>
    97b2:	2000      	movs	r0, #0
    97b4:	9009      	str	r0, [sp, #36]	; 0x24
    97b6:	e7ff      	b.n	97b8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17h9a430e39befb7ad4E+0x52>
    97b8:	9809      	ldr	r0, [sp, #36]	; 0x24
    97ba:	b00a      	add	sp, #40	; 0x28
    97bc:	bd80      	pop	{r7, pc}

000097be <_ZN4core3ptr145_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$unsafe$u20$extern$u20$$u22$C$u22$$u20$fn$LP$A$C$$u20$B$C$$u20$C$C$$u20$D$RP$$u20$.$GT$$u20$Ret$GT$2eq17h5b38778dac51aa20E>:
    97be:	b084      	sub	sp, #16
    97c0:	460a      	mov	r2, r1
    97c2:	4603      	mov	r3, r0
    97c4:	9002      	str	r0, [sp, #8]
    97c6:	9103      	str	r1, [sp, #12]
    97c8:	9802      	ldr	r0, [sp, #8]
    97ca:	6800      	ldr	r0, [r0, #0]
    97cc:	9903      	ldr	r1, [sp, #12]
    97ce:	6809      	ldr	r1, [r1, #0]
    97d0:	1a40      	subs	r0, r0, r1
    97d2:	fab0 f080 	clz	r0, r0
    97d6:	0940      	lsrs	r0, r0, #5
    97d8:	9201      	str	r2, [sp, #4]
    97da:	9300      	str	r3, [sp, #0]
    97dc:	b004      	add	sp, #16
    97de:	4770      	bx	lr

000097e0 <_ZN4core3ptr19swap_nonoverlapping17h2c69b763be82cdd6E>:
    97e0:	b580      	push	{r7, lr}
    97e2:	b08a      	sub	sp, #40	; 0x28
    97e4:	4613      	mov	r3, r2
    97e6:	468c      	mov	ip, r1
    97e8:	4686      	mov	lr, r0
    97ea:	9004      	str	r0, [sp, #16]
    97ec:	9105      	str	r1, [sp, #20]
    97ee:	9206      	str	r2, [sp, #24]
    97f0:	9804      	ldr	r0, [sp, #16]
    97f2:	9007      	str	r0, [sp, #28]
    97f4:	9805      	ldr	r0, [sp, #20]
    97f6:	9008      	str	r0, [sp, #32]
    97f8:	9303      	str	r3, [sp, #12]
    97fa:	f8cd c008 	str.w	ip, [sp, #8]
    97fe:	f8cd e004 	str.w	lr, [sp, #4]
    9802:	f7ff f902 	bl	8a0a <_ZN4core3mem7size_of17h5c195dec1f846941E>
    9806:	9000      	str	r0, [sp, #0]
    9808:	e7ff      	b.n	980a <_ZN4core3ptr19swap_nonoverlapping17h2c69b763be82cdd6E+0x2a>
    980a:	9806      	ldr	r0, [sp, #24]
    980c:	9900      	ldr	r1, [sp, #0]
    980e:	4348      	muls	r0, r1
    9810:	9009      	str	r0, [sp, #36]	; 0x24
    9812:	9807      	ldr	r0, [sp, #28]
    9814:	9908      	ldr	r1, [sp, #32]
    9816:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9818:	f000 fec6 	bl	a5a8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E>
    981c:	e7ff      	b.n	981e <_ZN4core3ptr19swap_nonoverlapping17h2c69b763be82cdd6E+0x3e>
    981e:	b00a      	add	sp, #40	; 0x28
    9820:	bd80      	pop	{r7, pc}

00009822 <_ZN4core3ptr23swap_nonoverlapping_one17h90aaa0c74a7eb382E>:
    9822:	b580      	push	{r7, lr}
    9824:	b086      	sub	sp, #24
    9826:	460a      	mov	r2, r1
    9828:	4603      	mov	r3, r0
    982a:	9003      	str	r0, [sp, #12]
    982c:	9104      	str	r1, [sp, #16]
    982e:	9202      	str	r2, [sp, #8]
    9830:	9301      	str	r3, [sp, #4]
    9832:	f7ff f8ea 	bl	8a0a <_ZN4core3mem7size_of17h5c195dec1f846941E>
    9836:	9000      	str	r0, [sp, #0]
    9838:	e7ff      	b.n	983a <_ZN4core3ptr23swap_nonoverlapping_one17h90aaa0c74a7eb382E+0x18>
    983a:	9800      	ldr	r0, [sp, #0]
    983c:	281f      	cmp	r0, #31
    983e:	d811      	bhi.n	9864 <_ZN4core3ptr23swap_nonoverlapping_one17h90aaa0c74a7eb382E+0x42>
    9840:	e7ff      	b.n	9842 <_ZN4core3ptr23swap_nonoverlapping_one17h90aaa0c74a7eb382E+0x20>
    9842:	9803      	ldr	r0, [sp, #12]
    9844:	f000 f817 	bl	9876 <_ZN4core3ptr4read17h3fc3f17e9fb23ef4E>
    9848:	9005      	str	r0, [sp, #20]
    984a:	e7ff      	b.n	984c <_ZN4core3ptr23swap_nonoverlapping_one17h90aaa0c74a7eb382E+0x2a>
    984c:	9804      	ldr	r0, [sp, #16]
    984e:	9903      	ldr	r1, [sp, #12]
    9850:	2201      	movs	r2, #1
    9852:	f000 f841 	bl	98d8 <_ZN4core10intrinsics19copy_nonoverlapping17h30e244e51fb27f3dE>
    9856:	e7ff      	b.n	9858 <_ZN4core3ptr23swap_nonoverlapping_one17h90aaa0c74a7eb382E+0x36>
    9858:	9804      	ldr	r0, [sp, #16]
    985a:	9905      	ldr	r1, [sp, #20]
    985c:	f000 f82c 	bl	98b8 <_ZN4core3ptr5write17hf10a8032013a1e53E>
    9860:	e7ff      	b.n	9862 <_ZN4core3ptr23swap_nonoverlapping_one17h90aaa0c74a7eb382E+0x40>
    9862:	e006      	b.n	9872 <_ZN4core3ptr23swap_nonoverlapping_one17h90aaa0c74a7eb382E+0x50>
    9864:	9803      	ldr	r0, [sp, #12]
    9866:	9904      	ldr	r1, [sp, #16]
    9868:	2201      	movs	r2, #1
    986a:	f7ff ffb9 	bl	97e0 <_ZN4core3ptr19swap_nonoverlapping17h2c69b763be82cdd6E>
    986e:	e7ff      	b.n	9870 <_ZN4core3ptr23swap_nonoverlapping_one17h90aaa0c74a7eb382E+0x4e>
    9870:	e7ff      	b.n	9872 <_ZN4core3ptr23swap_nonoverlapping_one17h90aaa0c74a7eb382E+0x50>
    9872:	b006      	add	sp, #24
    9874:	bd80      	pop	{r7, pc}

00009876 <_ZN4core3ptr4read17h3fc3f17e9fb23ef4E>:
    9876:	b580      	push	{r7, lr}
    9878:	b08c      	sub	sp, #48	; 0x30
    987a:	4601      	mov	r1, r0
    987c:	9005      	str	r0, [sp, #20]
    987e:	9807      	ldr	r0, [sp, #28]
    9880:	9006      	str	r0, [sp, #24]
    9882:	9104      	str	r1, [sp, #16]
    9884:	e7ff      	b.n	9886 <_ZN4core3ptr4read17h3fc3f17e9fb23ef4E+0x10>
    9886:	9805      	ldr	r0, [sp, #20]
    9888:	a906      	add	r1, sp, #24
    988a:	910a      	str	r1, [sp, #40]	; 0x28
    988c:	990a      	ldr	r1, [sp, #40]	; 0x28
    988e:	910b      	str	r1, [sp, #44]	; 0x2c
    9890:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9892:	9003      	str	r0, [sp, #12]
    9894:	9102      	str	r1, [sp, #8]
    9896:	e7ff      	b.n	9898 <_ZN4core3ptr4read17h3fc3f17e9fb23ef4E+0x22>
    9898:	2201      	movs	r2, #1
    989a:	9803      	ldr	r0, [sp, #12]
    989c:	9902      	ldr	r1, [sp, #8]
    989e:	f000 f81b 	bl	98d8 <_ZN4core10intrinsics19copy_nonoverlapping17h30e244e51fb27f3dE>
    98a2:	e7ff      	b.n	98a4 <_ZN4core3ptr4read17h3fc3f17e9fb23ef4E+0x2e>
    98a4:	9806      	ldr	r0, [sp, #24]
    98a6:	9008      	str	r0, [sp, #32]
    98a8:	9808      	ldr	r0, [sp, #32]
    98aa:	9009      	str	r0, [sp, #36]	; 0x24
    98ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    98ae:	9001      	str	r0, [sp, #4]
    98b0:	e7ff      	b.n	98b2 <_ZN4core3ptr4read17h3fc3f17e9fb23ef4E+0x3c>
    98b2:	9801      	ldr	r0, [sp, #4]
    98b4:	b00c      	add	sp, #48	; 0x30
    98b6:	bd80      	pop	{r7, pc}

000098b8 <_ZN4core3ptr5write17hf10a8032013a1e53E>:
    98b8:	b084      	sub	sp, #16
    98ba:	460a      	mov	r2, r1
    98bc:	4603      	mov	r3, r0
    98be:	9002      	str	r0, [sp, #8]
    98c0:	9103      	str	r1, [sp, #12]
    98c2:	9802      	ldr	r0, [sp, #8]
    98c4:	9903      	ldr	r1, [sp, #12]
    98c6:	6001      	str	r1, [r0, #0]
    98c8:	9201      	str	r2, [sp, #4]
    98ca:	9300      	str	r3, [sp, #0]
    98cc:	b004      	add	sp, #16
    98ce:	4770      	bx	lr

000098d0 <_ZN4core3ptr8null_mut17h323310d988ac6279E>:
    98d0:	2000      	movs	r0, #0
    98d2:	4770      	bx	lr

000098d4 <_ZN4core3ptr8null_mut17h8415c8ad889a2a19E>:
    98d4:	2000      	movs	r0, #0
    98d6:	4770      	bx	lr

000098d8 <_ZN4core10intrinsics19copy_nonoverlapping17h30e244e51fb27f3dE>:
    98d8:	b580      	push	{r7, lr}
    98da:	b086      	sub	sp, #24
    98dc:	4613      	mov	r3, r2
    98de:	468c      	mov	ip, r1
    98e0:	4686      	mov	lr, r0
    98e2:	9003      	str	r0, [sp, #12]
    98e4:	9104      	str	r1, [sp, #16]
    98e6:	9205      	str	r2, [sp, #20]
    98e8:	9903      	ldr	r1, [sp, #12]
    98ea:	9804      	ldr	r0, [sp, #16]
    98ec:	9a05      	ldr	r2, [sp, #20]
    98ee:	0092      	lsls	r2, r2, #2
    98f0:	9302      	str	r3, [sp, #8]
    98f2:	f8cd c004 	str.w	ip, [sp, #4]
    98f6:	f8cd e000 	str.w	lr, [sp]
    98fa:	f020 f9ef 	bl	29cdc <__aeabi_memcpy>
    98fe:	e7ff      	b.n	9900 <_ZN4core10intrinsics19copy_nonoverlapping17h30e244e51fb27f3dE+0x28>
    9900:	b006      	add	sp, #24
    9902:	bd80      	pop	{r7, pc}

00009904 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E>:
///  Type of sensor: Raw temperature sensor (integer sensor values 0 to 4095)
const TEMP_SENSOR_TYPE: sensor_type_t = sensor::SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW;

///  Ask Mynewt to poll or read the temperature sensor and call `aggregate_sensor_data()`
///  Return `Ok()` if successful, else return `Err()` with `MynewtError` error code inside.
pub fn start_sensor_listener() -> MynewtResult<()>  {  //  Returns an error code upon error.
    9904:	b5f0      	push	{r4, r5, r6, r7, lr}
    9906:	b0bd      	sub	sp, #244	; 0xf4
    console::print("Rust TMP poll\n");
    9908:	f24a 10f0 	movw	r0, #41456	; 0xa1f0
    990c:	f2c0 0002 	movt	r0, #2
    9910:	210e      	movs	r1, #14
    9912:	f7fe ffe7 	bl	88e4 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E>
    9916:	e7ff      	b.n	9918 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x14>

    //  Fetch the sensor by name.
    let sensor = sensor_mgr::find_bydevname(&SENSOR_DEVICE)
    9918:	f24a 11e4 	movw	r1, #41444	; 0xa1e4
    991c:	f2c0 0102 	movt	r1, #2
    9920:	a80d      	add	r0, sp, #52	; 0x34
    9922:	f002 fc64 	bl	c1ee <_ZN6mynewt2hw10sensor_mgr14find_bydevname17h896b27dd8b8e6b9fE>
    9926:	e7ff      	b.n	9928 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x24>
    9928:	a80d      	add	r0, sp, #52	; 0x34
    992a:	f002 fc7e 	bl	c22a <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcbd1eb8875cb1b9fE>
    992e:	900a      	str	r0, [sp, #40]	; 0x28
    9930:	9109      	str	r1, [sp, #36]	; 0x24
    9932:	e7ff      	b.n	9934 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x30>
    9934:	f24a 12fe 	movw	r2, #41470	; 0xa1fe
    9938:	f2c0 0202 	movt	r2, #2
    993c:	2306      	movs	r3, #6
    993e:	980a      	ldr	r0, [sp, #40]	; 0x28
    9940:	9909      	ldr	r1, [sp, #36]	; 0x24
    9942:	f000 fbd5 	bl	a0f0 <_ZN4core6option15Option$LT$T$GT$6expect17h0fd15c4bf762390eE>
    9946:	900c      	str	r0, [sp, #48]	; 0x30
    9948:	e7ff      	b.n	994a <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x46>
        .next()             //  Fetch the first sensor that matches
        .expect("no TMP");  //  Stop if no sensor found

    //  At power on, we ask Mynewt to poll our temperature sensor every 10 seconds.
    sensor::set_poll_rate_ms(&SENSOR_DEVICE, SENSOR_POLL_TIME) ? ;
    994a:	f24a 10e4 	movw	r0, #41444	; 0xa1e4
    994e:	f2c0 0002 	movt	r0, #2
    9952:	f242 7110 	movw	r1, #10000	; 0x2710
    9956:	f002 fce2 	bl	c31e <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h554be26f45a098a1E>
    995a:	9008      	str	r0, [sp, #32]
    995c:	e7ff      	b.n	995e <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x5a>
    995e:	9808      	ldr	r0, [sp, #32]
    9960:	f7fe ff6a 	bl	8838 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h00bf1b57699326cfE>
    9964:	9011      	str	r0, [sp, #68]	; 0x44
    9966:	e7ff      	b.n	9968 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x64>
    9968:	9811      	ldr	r0, [sp, #68]	; 0x44
    996a:	1e41      	subs	r1, r0, #1
    996c:	bf18      	it	ne
    996e:	2101      	movne	r1, #1
    9970:	2801      	cmp	r0, #1
    9972:	9107      	str	r1, [sp, #28]
    9974:	d016      	beq.n	99a4 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0xa0>
    9976:	e7ff      	b.n	9978 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x74>
    9978:	9807      	ldr	r0, [sp, #28]
    997a:	2801      	cmp	r0, #1
    997c:	d001      	beq.n	9982 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x7e>
    997e:	e7ff      	b.n	9980 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x7c>
    //  Register the Listener Function to be called with the polled sensor data.
    sensor::register_listener(sensor, listener) ? ;  //  `?` means in case of error, return error now.

    //  Return `Ok()` to indicate success.  This line should not end with a semicolon (;).
    Ok(())
    9980:	defe      	udf	#254	; 0xfe
    sensor::set_poll_rate_ms(&SENSOR_DEVICE, SENSOR_POLL_TIME) ? ;
    9982:	9811      	ldr	r0, [sp, #68]	; 0x44
    9984:	9012      	str	r0, [sp, #72]	; 0x48
    9986:	9812      	ldr	r0, [sp, #72]	; 0x48
    9988:	f000 fbab 	bl	a0e2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h4bfa181a78946fa0E>
    998c:	9006      	str	r0, [sp, #24]
    998e:	e7ff      	b.n	9990 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x8c>
    9990:	9806      	ldr	r0, [sp, #24]
    9992:	f7fe ff48 	bl	8826 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h6d3955e1a79eef94E>
    9996:	900b      	str	r0, [sp, #44]	; 0x2c
    9998:	e7ff      	b.n	999a <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x96>
    999a:	e002      	b.n	99a2 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x9e>
    999c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    999e:	b03d      	add	sp, #244	; 0xf4
    99a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sensor::set_poll_rate_ms(&SENSOR_DEVICE, SENSOR_POLL_TIME) ? ;
    99a2:	e7fb      	b.n	999c <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x98>
    let listener = sensor::new_sensor_listener(
    99a4:	f649 207b 	movw	r0, #39547	; 0x9a7b
    99a8:	f2c0 0000 	movt	r0, #0
    99ac:	4669      	mov	r1, sp
    99ae:	6008      	str	r0, [r1, #0]
    99b0:	f24a 2108 	movw	r1, #41480	; 0xa208
    99b4:	f2c0 0102 	movt	r1, #2
    99b8:	a822      	add	r0, sp, #136	; 0x88
    99ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    99be:	2300      	movs	r3, #0
    99c0:	f002 fa4e 	bl	be60 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E>
    99c4:	e7ff      	b.n	99c6 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0xc2>
    99c6:	a81a      	add	r0, sp, #104	; 0x68
    99c8:	a922      	add	r1, sp, #136	; 0x88
    99ca:	f7fe ff49 	bl	8860 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h470504b6f43ee880E>
    99ce:	e7ff      	b.n	99d0 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0xcc>
    ) ? ;
    99d0:	981a      	ldr	r0, [sp, #104]	; 0x68
    99d2:	2800      	cmp	r0, #0
    99d4:	9005      	str	r0, [sp, #20]
    99d6:	d012      	beq.n	99fe <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0xfa>
    99d8:	e7ff      	b.n	99da <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0xd6>
    99da:	9805      	ldr	r0, [sp, #20]
    99dc:	2801      	cmp	r0, #1
    99de:	d1cf      	bne.n	9980 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x7c>
    99e0:	e7ff      	b.n	99e2 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0xde>
    99e2:	981b      	ldr	r0, [sp, #108]	; 0x6c
    99e4:	902b      	str	r0, [sp, #172]	; 0xac
    99e6:	982b      	ldr	r0, [sp, #172]	; 0xac
    99e8:	f000 fb7b 	bl	a0e2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h4bfa181a78946fa0E>
    99ec:	9004      	str	r0, [sp, #16]
    99ee:	e7ff      	b.n	99f0 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0xec>
    99f0:	9804      	ldr	r0, [sp, #16]
    99f2:	f7fe ff18 	bl	8826 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h6d3955e1a79eef94E>
    99f6:	900b      	str	r0, [sp, #44]	; 0x2c
    99f8:	e7ff      	b.n	99fa <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0xf6>
    99fa:	e7ff      	b.n	99fc <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0xf8>
    99fc:	e7d1      	b.n	99a2 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x9e>
    99fe:	a81a      	add	r0, sp, #104	; 0x68
    let listener = sensor::new_sensor_listener(
    9a00:	3008      	adds	r0, #8
    9a02:	a92c      	add	r1, sp, #176	; 0xb0
    9a04:	460a      	mov	r2, r1
    9a06:	e890 5078 	ldmia.w	r0, {r3, r4, r5, r6, ip, lr}
    9a0a:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
    9a0e:	a814      	add	r0, sp, #80	; 0x50
    9a10:	4602      	mov	r2, r0
    9a12:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
    9a16:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
    sensor::register_listener(sensor, listener) ? ;  //  `?` means in case of error, return error now.
    9a1a:	990c      	ldr	r1, [sp, #48]	; 0x30
    9a1c:	aa34      	add	r2, sp, #208	; 0xd0
    9a1e:	4613      	mov	r3, r2
    9a20:	e890 50f0 	ldmia.w	r0, {r4, r5, r6, r7, ip, lr}
    9a24:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
    9a28:	4608      	mov	r0, r1
    9a2a:	4611      	mov	r1, r2
    9a2c:	f002 f8bd 	bl	bbaa <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E>
    9a30:	9003      	str	r0, [sp, #12]
    9a32:	e7ff      	b.n	9a34 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x130>
    9a34:	9803      	ldr	r0, [sp, #12]
    9a36:	f7fe feff 	bl	8838 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h00bf1b57699326cfE>
    9a3a:	9033      	str	r0, [sp, #204]	; 0xcc
    9a3c:	e7ff      	b.n	9a3e <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x13a>
    9a3e:	9833      	ldr	r0, [sp, #204]	; 0xcc
    9a40:	1e41      	subs	r1, r0, #1
    9a42:	bf18      	it	ne
    9a44:	2101      	movne	r1, #1
    9a46:	2801      	cmp	r0, #1
    9a48:	9102      	str	r1, [sp, #8]
    9a4a:	d011      	beq.n	9a70 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x16c>
    9a4c:	e7ff      	b.n	9a4e <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x14a>
    9a4e:	9802      	ldr	r0, [sp, #8]
    9a50:	2801      	cmp	r0, #1
    9a52:	d195      	bne.n	9980 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x7c>
    9a54:	e7ff      	b.n	9a56 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x152>
    9a56:	9833      	ldr	r0, [sp, #204]	; 0xcc
    9a58:	903a      	str	r0, [sp, #232]	; 0xe8
    9a5a:	983a      	ldr	r0, [sp, #232]	; 0xe8
    9a5c:	f000 fb41 	bl	a0e2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h4bfa181a78946fa0E>
    9a60:	9001      	str	r0, [sp, #4]
    9a62:	e7ff      	b.n	9a64 <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x160>
    9a64:	9801      	ldr	r0, [sp, #4]
    9a66:	f7fe fede 	bl	8826 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h6d3955e1a79eef94E>
    9a6a:	900b      	str	r0, [sp, #44]	; 0x2c
    9a6c:	e7ff      	b.n	9a6e <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x16a>
    9a6e:	e7c5      	b.n	99fc <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0xf8>
    9a70:	2000      	movs	r0, #0
    Ok(())
    9a72:	900b      	str	r0, [sp, #44]	; 0x2c
    9a74:	2001      	movs	r0, #1
    9a76:	900b      	str	r0, [sp, #44]	; 0x2c
    9a78:	e790      	b.n	999c <_ZN3app10app_sensor21start_sensor_listener17h09088494e967a630E+0x98>

00009a7a <_ZN3app11app_network21aggregate_sensor_data17hab11c32b63abf594E>:
};
use mynewt_macros::strn;        //  Import Mynewt procedural macros

///  Aggregate the sensor value with other sensor data before transmitting to server.
///  If the sensor value is a GPS geolocation, we remember it and attach it to other sensor data for transmission.
pub fn aggregate_sensor_data(sensor_value: &SensorValue) -> MynewtResult<()>  {  //  Returns an error code upon error.
    9a7a:	b5b0      	push	{r4, r5, r7, lr}
    9a7c:	b0a8      	sub	sp, #160	; 0xa0
    9a7e:	4601      	mov	r1, r0
    9a80:	9002      	str	r0, [sp, #8]
    if let SensorValueType::Geolocation {..} = sensor_value.value {
    9a82:	9802      	ldr	r0, [sp, #8]
    9a84:	6800      	ldr	r0, [r0, #0]
    9a86:	2803      	cmp	r0, #3
    9a88:	9101      	str	r1, [sp, #4]
    9a8a:	d11c      	bne.n	9ac6 <_ZN3app11app_network21aggregate_sensor_data17hab11c32b63abf594E+0x4c>
    9a8c:	e7ff      	b.n	9a8e <_ZN3app11app_network21aggregate_sensor_data17hab11c32b63abf594E+0x14>
        //  If this is a geolocation, save the geolocation for later transmission.
        unsafe { CURRENT_GEOLOCATION = sensor_value.value };  //  Current geolocation is unsafe because it's a mutable static
    9a8e:	9802      	ldr	r0, [sp, #8]
    9a90:	a904      	add	r1, sp, #16
    9a92:	460a      	mov	r2, r1
    9a94:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
    9a98:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
    9a9c:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    9aa0:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    9aa4:	f240 2050 	movw	r0, #592	; 0x250
    9aa8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9aac:	e8b1 500c 	ldmia.w	r1!, {r2, r3, ip, lr}
    9ab0:	e8a0 500c 	stmia.w	r0!, {r2, r3, ip, lr}
    9ab4:	e891 500c 	ldmia.w	r1, {r2, r3, ip, lr}
    9ab8:	e880 500c 	stmia.w	r0, {r2, r3, ip, lr}
    9abc:	2000      	movs	r0, #0
        Ok(())
    9abe:	9003      	str	r0, [sp, #12]
    9ac0:	2001      	movs	r0, #1
    9ac2:	9003      	str	r0, [sp, #12]
    if let SensorValueType::Geolocation {..} = sensor_value.value {
    9ac4:	e02b      	b.n	9b1e <_ZN3app11app_network21aggregate_sensor_data17hab11c32b63abf594E+0xa4>
    } else {
        //  If this is temperature sensor data, attach the current geolocation to the sensor data for transmission.
        let transmit_value = SensorValue {
            geo: unsafe { CURRENT_GEOLOCATION },  //  Current geolocation is unsafe because it's a mutable static
    9ac6:	f240 2050 	movw	r0, #592	; 0x250
    9aca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9ace:	a920      	add	r1, sp, #128	; 0x80
    9ad0:	460a      	mov	r2, r1
    9ad2:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
    9ad6:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
    9ada:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    9ade:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
        let transmit_value = SensorValue {
    9ae2:	9802      	ldr	r0, [sp, #8]
    9ae4:	6c00      	ldr	r0, [r0, #64]	; 0x40
    9ae6:	901e      	str	r0, [sp, #120]	; 0x78
    9ae8:	9802      	ldr	r0, [sp, #8]
    9aea:	aa0e      	add	r2, sp, #56	; 0x38
    9aec:	4613      	mov	r3, r2
    9aee:	e8b0 5030 	ldmia.w	r0!, {r4, r5, ip, lr}
    9af2:	e8a3 5030 	stmia.w	r3!, {r4, r5, ip, lr}
    9af6:	e890 5030 	ldmia.w	r0, {r4, r5, ip, lr}
    9afa:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
    9afe:	f102 0020 	add.w	r0, r2, #32
    9b02:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
    9b06:	e8a0 5018 	stmia.w	r0!, {r3, r4, ip, lr}
    9b0a:	e891 5018 	ldmia.w	r1, {r3, r4, ip, lr}
    9b0e:	e880 5018 	stmia.w	r0, {r3, r4, ip, lr}
            ..*sensor_value                       //  Copy the sensor name and value for transmission
        };
        //  Transmit sensor value with geolocation and return the result
        send_sensor_data(&transmit_value)
    9b12:	4610      	mov	r0, r2
    9b14:	f000 f806 	bl	9b24 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE>
    9b18:	9003      	str	r0, [sp, #12]
    9b1a:	e7ff      	b.n	9b1c <_ZN3app11app_network21aggregate_sensor_data17hab11c32b63abf594E+0xa2>
    if let SensorValueType::Geolocation {..} = sensor_value.value {
    9b1c:	e7ff      	b.n	9b1e <_ZN3app11app_network21aggregate_sensor_data17hab11c32b63abf594E+0xa4>
    }
}
    9b1e:	9803      	ldr	r0, [sp, #12]
    9b20:	b028      	add	sp, #160	; 0xa0
    9b22:	bdb0      	pop	{r4, r5, r7, pc}

00009b24 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE>:
/// {"values":[
///   {"key":"t",      "value":1715, "geo": { "lat": ..., "long": ... }},
///   {"key":"device", "value":"0102030405060708090a0b0c0d0e0f10"}
/// ]}
/// ```
fn send_sensor_data(val: &SensorValue) -> MynewtResult<()>  {  //  Returns an error code upon error.
    9b24:	b510      	push	{r4, lr}
    9b26:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
    9b2a:	4601      	mov	r1, r0
    9b2c:	902a      	str	r0, [sp, #168]	; 0xa8
    console::print("Rust send_sensor_data: ");
    9b2e:	f24a 2014 	movw	r0, #41492	; 0xa214
    9b32:	f2c0 0002 	movt	r0, #2
    9b36:	2217      	movs	r2, #23
    9b38:	9129      	str	r1, [sp, #164]	; 0xa4
    9b3a:	4611      	mov	r1, r2
    9b3c:	f7fe fed2 	bl	88e4 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E>
    9b40:	e7ff      	b.n	9b42 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x1e>
    if let SensorValueType::Uint(i) = val.value {
    9b42:	982a      	ldr	r0, [sp, #168]	; 0xa8
    9b44:	6800      	ldr	r0, [r0, #0]
    9b46:	2801      	cmp	r0, #1
    9b48:	d115      	bne.n	9b76 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x52>
    9b4a:	e7ff      	b.n	9b4c <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x28>
    9b4c:	982a      	ldr	r0, [sp, #168]	; 0xa8
    9b4e:	6840      	ldr	r0, [r0, #4]
    9b50:	902c      	str	r0, [sp, #176]	; 0xb0
        console::print_strn(val.key);
    9b52:	982a      	ldr	r0, [sp, #168]	; 0xa8
    9b54:	6c00      	ldr	r0, [r0, #64]	; 0x40
    9b56:	f7fe fee0 	bl	891a <_ZN6mynewt3sys7console10print_strn17h6acf88a32c052588E>
    9b5a:	e7ff      	b.n	9b5c <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x38>
        console::print("=");
    9b5c:	f24a 202b 	movw	r0, #41515	; 0xa22b
    9b60:	f2c0 0002 	movt	r0, #2
    9b64:	2101      	movs	r1, #1
    9b66:	f7fe febd 	bl	88e4 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E>
    9b6a:	e7ff      	b.n	9b6c <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x48>
        console::printint(i as i32);
    9b6c:	982c      	ldr	r0, [sp, #176]	; 0xb0
    9b6e:	f7fe ff05 	bl	897c <_ZN6mynewt3sys7console8printint17h732f7e3d3f1828c1E>
    9b72:	e7ff      	b.n	9b74 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x50>
    if let SensorValueType::Uint(i) = val.value {
    9b74:	e7ff      	b.n	9b76 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x52>
    }
    console::print("\n");
    9b76:	f24a 202c 	movw	r0, #41516	; 0xa22c
    9b7a:	f2c0 0002 	movt	r0, #2
    9b7e:	2101      	movs	r1, #1
    9b80:	f7fe feb0 	bl	88e4 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E>
    9b84:	e7ff      	b.n	9b86 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x62>
    console::flush(); ////
    9b86:	f7fe ff04 	bl	8992 <_ZN6mynewt3sys7console5flush17h498d792c115b7281E>
    9b8a:	e7ff      	b.n	9b8c <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x68>
    9b8c:	a834      	add	r0, sp, #208	; 0xd0

    //  Get a randomly-generated device ID that changes each time we restart the device.
    let device_id = sensor_network::get_device_id() ? ;
    9b8e:	f001 fda4 	bl	b6da <_ZN6mynewt4libs14sensor_network13get_device_id17hf2f7fef56ca514e0E>
    9b92:	e7ff      	b.n	9b94 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x70>
    9b94:	a830      	add	r0, sp, #192	; 0xc0
    9b96:	a934      	add	r1, sp, #208	; 0xd0
    9b98:	f7fe fe72 	bl	8880 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5fc8a869c255d083E>
    9b9c:	e7ff      	b.n	9b9e <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x7a>
    9b9e:	9830      	ldr	r0, [sp, #192]	; 0xc0
    9ba0:	2800      	cmp	r0, #0
    9ba2:	9028      	str	r0, [sp, #160]	; 0xa0
    9ba4:	d017      	beq.n	9bd6 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0xb2>
    9ba6:	e7ff      	b.n	9ba8 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x84>
    9ba8:	9828      	ldr	r0, [sp, #160]	; 0xa0
    9baa:	2801      	cmp	r0, #1
    9bac:	d001      	beq.n	9bb2 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x8e>
    9bae:	e7ff      	b.n	9bb0 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x8c>
    console::print("NET view your sensor at \nhttps://blue-pill-geolocate.appspot.com?device=");
    console::print_strn(&device_id); console::print("\n");

    //  The CoAP Background Task will transmit the message in the background.
    Ok(())
}
    9bb0:	defe      	udf	#254	; 0xfe
    let device_id = sensor_network::get_device_id() ? ;
    9bb2:	9831      	ldr	r0, [sp, #196]	; 0xc4
    9bb4:	9038      	str	r0, [sp, #224]	; 0xe0
    9bb6:	9838      	ldr	r0, [sp, #224]	; 0xe0
    9bb8:	f000 fa93 	bl	a0e2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h4bfa181a78946fa0E>
    9bbc:	9027      	str	r0, [sp, #156]	; 0x9c
    9bbe:	e7ff      	b.n	9bc0 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x9c>
    9bc0:	9827      	ldr	r0, [sp, #156]	; 0x9c
    9bc2:	f7fe fe30 	bl	8826 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h6d3955e1a79eef94E>
    9bc6:	902b      	str	r0, [sp, #172]	; 0xac
    9bc8:	e7ff      	b.n	9bca <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0xa6>
    9bca:	e003      	b.n	9bd4 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0xb0>
}
    9bcc:	982b      	ldr	r0, [sp, #172]	; 0xac
    9bce:	f50d 7d2c 	add.w	sp, sp, #688	; 0x2b0
    9bd2:	bd10      	pop	{r4, pc}
    let device_id = sensor_network::get_device_id() ? ;
    9bd4:	e7fa      	b.n	9bcc <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0xa8>
    9bd6:	9831      	ldr	r0, [sp, #196]	; 0xc4
    9bd8:	9932      	ldr	r1, [sp, #200]	; 0xc8
    9bda:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    9bdc:	923b      	str	r2, [sp, #236]	; 0xec
    9bde:	913a      	str	r1, [sp, #232]	; 0xe8
    9be0:	9039      	str	r0, [sp, #228]	; 0xe4
    9be2:	9839      	ldr	r0, [sp, #228]	; 0xe4
    9be4:	993a      	ldr	r1, [sp, #232]	; 0xe8
    9be6:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    9be8:	922f      	str	r2, [sp, #188]	; 0xbc
    9bea:	912e      	str	r1, [sp, #184]	; 0xb8
    9bec:	902d      	str	r0, [sp, #180]	; 0xb4
    let rc = sensor_network::init_server_post( strn!(()) ) ? ;  //  `strn!(())` means use default CoAP URI in `syscfg.yml`
    9bee:	f24a 212d 	movw	r1, #41517	; 0xa22d
    9bf2:	f2c0 0102 	movt	r1, #2
    9bf6:	a841      	add	r0, sp, #260	; 0x104
    9bf8:	2201      	movs	r2, #1
    9bfa:	f7ff f98d 	bl	8f18 <_ZN6mynewt4Strn3new17haa130bc407e45c8bE>
    9bfe:	e7ff      	b.n	9c00 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0xdc>
    9c00:	a83f      	add	r0, sp, #252	; 0xfc
    9c02:	a941      	add	r1, sp, #260	; 0x104
    9c04:	f001 fd26 	bl	b654 <_ZN6mynewt4libs14sensor_network16init_server_post17h4d7cda996b2d7ef5E>
    9c08:	e7ff      	b.n	9c0a <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0xe6>
    9c0a:	a83d      	add	r0, sp, #244	; 0xf4
    9c0c:	a93f      	add	r1, sp, #252	; 0xfc
    9c0e:	f7fe fe1a 	bl	8846 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h2b975e1f9ec08585E>
    9c12:	e7ff      	b.n	9c14 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0xf0>
    9c14:	f89d 00f4 	ldrb.w	r0, [sp, #244]	; 0xf4
    9c18:	07c1      	lsls	r1, r0, #31
    9c1a:	2900      	cmp	r1, #0
    9c1c:	9026      	str	r0, [sp, #152]	; 0x98
    9c1e:	d012      	beq.n	9c46 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x122>
    9c20:	e7ff      	b.n	9c22 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0xfe>
    9c22:	9826      	ldr	r0, [sp, #152]	; 0x98
    9c24:	2801      	cmp	r0, #1
    9c26:	d1c3      	bne.n	9bb0 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x8c>
    9c28:	e7ff      	b.n	9c2a <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x106>
    9c2a:	983e      	ldr	r0, [sp, #248]	; 0xf8
    9c2c:	9044      	str	r0, [sp, #272]	; 0x110
    9c2e:	9844      	ldr	r0, [sp, #272]	; 0x110
    9c30:	f000 fa57 	bl	a0e2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h4bfa181a78946fa0E>
    9c34:	9025      	str	r0, [sp, #148]	; 0x94
    9c36:	e7ff      	b.n	9c38 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x114>
    9c38:	9825      	ldr	r0, [sp, #148]	; 0x94
    9c3a:	f7fe fdf4 	bl	8826 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h6d3955e1a79eef94E>
    9c3e:	902b      	str	r0, [sp, #172]	; 0xac
    9c40:	e7ff      	b.n	9c42 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x11e>
    9c42:	e7ff      	b.n	9c44 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x120>
    9c44:	e7c6      	b.n	9bd4 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0xb0>
    9c46:	f89d 00f5 	ldrb.w	r0, [sp, #245]	; 0xf5
    9c4a:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    9c4e:	f89d 0117 	ldrb.w	r0, [sp, #279]	; 0x117
    9c52:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    if !rc { return Err(MynewtError::SYS_EAGAIN); }
    9c56:	f89d 00f3 	ldrb.w	r0, [sp, #243]	; 0xf3
    9c5a:	07c0      	lsls	r0, r0, #31
    9c5c:	2800      	cmp	r0, #0
    9c5e:	d106      	bne.n	9c6e <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x14a>
    9c60:	e7ff      	b.n	9c62 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x13e>
    9c62:	f06f 0005 	mvn.w	r0, #5
    9c66:	9046      	str	r0, [sp, #280]	; 0x118
    9c68:	9846      	ldr	r0, [sp, #280]	; 0x118
    9c6a:	902b      	str	r0, [sp, #172]	; 0xac
    9c6c:	e7ea      	b.n	9c44 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x120>
    9c6e:	a84a      	add	r0, sp, #296	; 0x128
    9c70:	2132      	movs	r1, #50	; 0x32
    let _payload = coap!( @json {        
    9c72:	f001 fd0d 	bl	b690 <_ZN6mynewt4libs14sensor_network12prepare_post17hfdaf25fbf86be5c2E>
    9c76:	e7ff      	b.n	9c78 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x154>
    9c78:	a848      	add	r0, sp, #288	; 0x120
    9c7a:	a94a      	add	r1, sp, #296	; 0x128
    9c7c:	f7fe fde3 	bl	8846 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h2b975e1f9ec08585E>
    9c80:	e7ff      	b.n	9c82 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x15e>
    9c82:	f89d 0120 	ldrb.w	r0, [sp, #288]	; 0x120
    9c86:	07c1      	lsls	r1, r0, #31
    9c88:	2900      	cmp	r1, #0
    9c8a:	9024      	str	r0, [sp, #144]	; 0x90
    9c8c:	d013      	beq.n	9cb6 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x192>
    9c8e:	e7ff      	b.n	9c90 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x16c>
    9c90:	9824      	ldr	r0, [sp, #144]	; 0x90
    9c92:	2801      	cmp	r0, #1
    9c94:	f47f af8c 	bne.w	9bb0 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x8c>
    9c98:	e7ff      	b.n	9c9a <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x176>
    9c9a:	9849      	ldr	r0, [sp, #292]	; 0x124
    9c9c:	904c      	str	r0, [sp, #304]	; 0x130
    9c9e:	984c      	ldr	r0, [sp, #304]	; 0x130
    9ca0:	f000 fa1f 	bl	a0e2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h4bfa181a78946fa0E>
    9ca4:	9023      	str	r0, [sp, #140]	; 0x8c
    9ca6:	e7ff      	b.n	9ca8 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x184>
    9ca8:	9823      	ldr	r0, [sp, #140]	; 0x8c
    9caa:	f7fe fdbc 	bl	8826 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h6d3955e1a79eef94E>
    9cae:	902b      	str	r0, [sp, #172]	; 0xac
    9cb0:	e7ff      	b.n	9cb2 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x18e>
    9cb2:	e7ff      	b.n	9cb4 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x190>
    9cb4:	e7c6      	b.n	9c44 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x120>
    9cb6:	f89d 0121 	ldrb.w	r0, [sp, #289]	; 0x121
    9cba:	f88d 0137 	strb.w	r0, [sp, #311]	; 0x137
    9cbe:	f004 ffbb 	bl	ec38 <json_rep_start_root_object>
    9cc2:	e7ff      	b.n	9cc4 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x1a0>
    9cc4:	f24a 202e 	movw	r0, #41518	; 0xa22e
    9cc8:	f2c0 0002 	movt	r0, #2
    9ccc:	904e      	str	r0, [sp, #312]	; 0x138
    9cce:	2007      	movs	r0, #7
    9cd0:	904f      	str	r0, [sp, #316]	; 0x13c
/*
    9cd2:	f240 2070 	movw	r0, #624	; 0x270
    9cd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9cda:	f001 faf8 	bl	b2ce <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17ha96fa3cb38da5ddbE>
    9cde:	9022      	str	r0, [sp, #136]	; 0x88
    9ce0:	e7ff      	b.n	9ce2 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x1be>
    9ce2:	984e      	ldr	r0, [sp, #312]	; 0x138
    9ce4:	994f      	ldr	r1, [sp, #316]	; 0x13c
    9ce6:	9094      	str	r0, [sp, #592]	; 0x250
    9ce8:	9195      	str	r1, [sp, #596]	; 0x254
    9cea:	9894      	ldr	r0, [sp, #592]	; 0x250
    9cec:	9995      	ldr	r1, [sp, #596]	; 0x254
    9cee:	9096      	str	r0, [sp, #600]	; 0x258
    9cf0:	9197      	str	r1, [sp, #604]	; 0x25c
    9cf2:	9996      	ldr	r1, [sp, #600]	; 0x258
    9cf4:	9a97      	ldr	r2, [sp, #604]	; 0x25c
    9cf6:	9121      	str	r1, [sp, #132]	; 0x84
    9cf8:	9220      	str	r2, [sp, #128]	; 0x80
    9cfa:	e7ff      	b.n	9cfc <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x1d8>
    9cfc:	f240 2070 	movw	r0, #624	; 0x270
    9d00:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9d04:	9921      	ldr	r1, [sp, #132]	; 0x84
    9d06:	9a20      	ldr	r2, [sp, #128]	; 0x80
    9d08:	f001 f96e 	bl	afe8 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE>
    9d0c:	901f      	str	r0, [sp, #124]	; 0x7c
    9d0e:	e7ff      	b.n	9d10 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x1ec>
    9d10:	9822      	ldr	r0, [sp, #136]	; 0x88
    9d12:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9d14:	f008 ff8a 	bl	12c2c <json_helper_set_array>
    9d18:	e7ff      	b.n	9d1a <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x1f6>
    9d1a:	982a      	ldr	r0, [sp, #168]	; 0xa8
    9d1c:	3020      	adds	r0, #32
    9d1e:	a950      	add	r1, sp, #320	; 0x140
    9d20:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
    9d24:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
    9d28:	e890 500c 	ldmia.w	r0, {r2, r3, ip, lr}
    9d2c:	e881 500c 	stmia.w	r1, {r2, r3, ip, lr}
    9d30:	982a      	ldr	r0, [sp, #168]	; 0xa8
    9d32:	6800      	ldr	r0, [r0, #0]
    9d34:	2801      	cmp	r0, #1
    9d36:	f040 80e1 	bne.w	9efc <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x3d8>
    9d3a:	e7ff      	b.n	9d3c <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x218>
    9d3c:	982a      	ldr	r0, [sp, #168]	; 0xa8
    9d3e:	6840      	ldr	r0, [r0, #4]
    9d40:	9059      	str	r0, [sp, #356]	; 0x164
    9d42:	f24a 2035 	movw	r0, #41525	; 0xa235
    9d46:	f2c0 0002 	movt	r0, #2
    9d4a:	905a      	str	r0, [sp, #360]	; 0x168
    9d4c:	200d      	movs	r0, #13
    9d4e:	905b      	str	r0, [sp, #364]	; 0x16c
    9d50:	985a      	ldr	r0, [sp, #360]	; 0x168
    9d52:	995b      	ldr	r1, [sp, #364]	; 0x16c
    9d54:	90a8      	str	r0, [sp, #672]	; 0x2a0
    9d56:	91a9      	str	r1, [sp, #676]	; 0x2a4
    9d58:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    9d5a:	99a9      	ldr	r1, [sp, #676]	; 0x2a4
    9d5c:	90aa      	str	r0, [sp, #680]	; 0x2a8
    9d5e:	91ab      	str	r1, [sp, #684]	; 0x2ac
    9d60:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    9d62:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
    9d64:	911e      	str	r1, [sp, #120]	; 0x78
    9d66:	921d      	str	r2, [sp, #116]	; 0x74
    9d68:	e7ff      	b.n	9d6a <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x246>
    9d6a:	f240 2070 	movw	r0, #624	; 0x270
    9d6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9d72:	991e      	ldr	r1, [sp, #120]	; 0x78
    9d74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    9d76:	f001 f937 	bl	afe8 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE>
    9d7a:	901c      	str	r0, [sp, #112]	; 0x70
    9d7c:	e7ff      	b.n	9d7e <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x25a>
    9d7e:	981c      	ldr	r0, [sp, #112]	; 0x70
    9d80:	f008 ff74 	bl	12c6c <json_helper_object_array_start_item>
    9d84:	e7ff      	b.n	9d86 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x262>
    9d86:	f24a 2042 	movw	r0, #41538	; 0xa242
    9d8a:	f2c0 0002 	movt	r0, #2
    9d8e:	2103      	movs	r1, #3
    9d90:	f001 faa6 	bl	b2e0 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h86d9940d247021b8E>
    9d94:	901b      	str	r0, [sp, #108]	; 0x6c
    9d96:	911a      	str	r1, [sp, #104]	; 0x68
    9d98:	e7ff      	b.n	9d9a <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x276>
    9d9a:	981b      	ldr	r0, [sp, #108]	; 0x6c
    9d9c:	905c      	str	r0, [sp, #368]	; 0x170
    9d9e:	991a      	ldr	r1, [sp, #104]	; 0x68
    9da0:	915d      	str	r1, [sp, #372]	; 0x174
    9da2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    9da4:	6c10      	ldr	r0, [r2, #64]	; 0x40
    9da6:	f7ff f87a 	bl	8e9e <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h672f59bf22cbf6e9E>
    9daa:	9019      	str	r0, [sp, #100]	; 0x64
    9dac:	9118      	str	r1, [sp, #96]	; 0x60
    9dae:	e7ff      	b.n	9db0 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x28c>
    9db0:	9819      	ldr	r0, [sp, #100]	; 0x64
    9db2:	905e      	str	r0, [sp, #376]	; 0x178
    9db4:	9918      	ldr	r1, [sp, #96]	; 0x60
    9db6:	915f      	str	r1, [sp, #380]	; 0x17c
    9db8:	f240 2070 	movw	r0, #624	; 0x270
    9dbc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9dc0:	f001 fa85 	bl	b2ce <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17ha96fa3cb38da5ddbE>
    9dc4:	9017      	str	r0, [sp, #92]	; 0x5c
    9dc6:	e7ff      	b.n	9dc8 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x2a4>
    9dc8:	995c      	ldr	r1, [sp, #368]	; 0x170
    9dca:	9a5d      	ldr	r2, [sp, #372]	; 0x174
    9dcc:	f240 2070 	movw	r0, #624	; 0x270
    9dd0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9dd4:	f001 f908 	bl	afe8 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE>
    9dd8:	9016      	str	r0, [sp, #88]	; 0x58
    9dda:	e7ff      	b.n	9ddc <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x2b8>
    9ddc:	995e      	ldr	r1, [sp, #376]	; 0x178
    9dde:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
    9de0:	f240 2070 	movw	r0, #624	; 0x270
    9de4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9de8:	f001 f973 	bl	b0d2 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE>
    9dec:	9015      	str	r0, [sp, #84]	; 0x54
    9dee:	e7ff      	b.n	9df0 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x2cc>
    9df0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9df2:	9916      	ldr	r1, [sp, #88]	; 0x58
    9df4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    9df6:	f008 ff85 	bl	12d04 <json_helper_set_text_string>
    9dfa:	e7ff      	b.n	9dfc <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x2d8>
    9dfc:	f24a 2045 	movw	r0, #41541	; 0xa245
    9e00:	f2c0 0002 	movt	r0, #2
    9e04:	2105      	movs	r1, #5
    9e06:	f001 fa6b 	bl	b2e0 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h86d9940d247021b8E>
    9e0a:	9014      	str	r0, [sp, #80]	; 0x50
    9e0c:	9113      	str	r1, [sp, #76]	; 0x4c
    9e0e:	e7ff      	b.n	9e10 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x2ec>
    9e10:	9814      	ldr	r0, [sp, #80]	; 0x50
    9e12:	9060      	str	r0, [sp, #384]	; 0x180
    9e14:	9913      	ldr	r1, [sp, #76]	; 0x4c
    9e16:	9161      	str	r1, [sp, #388]	; 0x184
    9e18:	9a59      	ldr	r2, [sp, #356]	; 0x164
    9e1a:	2300      	movs	r3, #0
    9e1c:	9363      	str	r3, [sp, #396]	; 0x18c
    9e1e:	9262      	str	r2, [sp, #392]	; 0x188
    9e20:	f240 2070 	movw	r0, #624	; 0x270
    9e24:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9e28:	f001 fa51 	bl	b2ce <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17ha96fa3cb38da5ddbE>
    9e2c:	9012      	str	r0, [sp, #72]	; 0x48
    9e2e:	e7ff      	b.n	9e30 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x30c>
    9e30:	9960      	ldr	r1, [sp, #384]	; 0x180
    9e32:	9a61      	ldr	r2, [sp, #388]	; 0x184
    9e34:	f240 2070 	movw	r0, #624	; 0x270
    9e38:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9e3c:	f001 f8d4 	bl	afe8 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE>
    9e40:	9011      	str	r0, [sp, #68]	; 0x44
    9e42:	e7ff      	b.n	9e44 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x320>
    9e44:	9a62      	ldr	r2, [sp, #392]	; 0x188
    9e46:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    9e48:	9812      	ldr	r0, [sp, #72]	; 0x48
    9e4a:	9911      	ldr	r1, [sp, #68]	; 0x44
    9e4c:	f008 ff2a 	bl	12ca4 <json_helper_set_int>
    9e50:	e7ff      	b.n	9e52 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x32e>
    9e52:	f24a 214a 	movw	r1, #41546	; 0xa24a
    9e56:	f2c0 0102 	movt	r1, #2
    9e5a:	a865      	add	r0, sp, #404	; 0x194
    9e5c:	2204      	movs	r2, #4
    9e5e:	f7ff f85b 	bl	8f18 <_ZN6mynewt4Strn3new17haa130bc407e45c8bE>
    9e62:	e7ff      	b.n	9e64 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x340>
    9e64:	f24a 214e 	movw	r1, #41550	; 0xa24e
    9e68:	f2c0 0102 	movt	r1, #2
    9e6c:	a868      	add	r0, sp, #416	; 0x1a0
    9e6e:	2204      	movs	r2, #4
    9e70:	f7ff f852 	bl	8f18 <_ZN6mynewt4Strn3new17haa130bc407e45c8bE>
    9e74:	e7ff      	b.n	9e76 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x352>
    9e76:	f24a 2156 	movw	r1, #41558	; 0xa256
    9e7a:	f2c0 0102 	movt	r1, #2
    9e7e:	a86b      	add	r0, sp, #428	; 0x1ac
    9e80:	2205      	movs	r2, #5
    9e82:	f7ff f849 	bl	8f18 <_ZN6mynewt4Strn3new17haa130bc407e45c8bE>
    9e86:	e7ff      	b.n	9e88 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x364>
    9e88:	a850      	add	r0, sp, #320	; 0x140
    9e8a:	a96e      	add	r1, sp, #440	; 0x1b8
    9e8c:	460a      	mov	r2, r1
    9e8e:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
    9e92:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
    9e96:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    9e9a:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    9e9e:	4668      	mov	r0, sp
    9ea0:	6001      	str	r1, [r0, #0]
    9ea2:	f240 2070 	movw	r0, #624	; 0x270
    9ea6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9eaa:	a965      	add	r1, sp, #404	; 0x194
    9eac:	aa68      	add	r2, sp, #416	; 0x1a0
    9eae:	ab6b      	add	r3, sp, #428	; 0x1ac
    9eb0:	f000 ff87 	bl	adc2 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE>
    9eb4:	e7ff      	b.n	9eb6 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x392>
    9eb6:	f24a 2035 	movw	r0, #41525	; 0xa235
    9eba:	f2c0 0002 	movt	r0, #2
    9ebe:	9077      	str	r0, [sp, #476]	; 0x1dc
    9ec0:	200d      	movs	r0, #13
    9ec2:	9078      	str	r0, [sp, #480]	; 0x1e0
    9ec4:	9877      	ldr	r0, [sp, #476]	; 0x1dc
    9ec6:	9978      	ldr	r1, [sp, #480]	; 0x1e0
    9ec8:	90a4      	str	r0, [sp, #656]	; 0x290
    9eca:	91a5      	str	r1, [sp, #660]	; 0x294
    9ecc:	98a4      	ldr	r0, [sp, #656]	; 0x290
    9ece:	99a5      	ldr	r1, [sp, #660]	; 0x294
    9ed0:	90a6      	str	r0, [sp, #664]	; 0x298
    9ed2:	91a7      	str	r1, [sp, #668]	; 0x29c
    9ed4:	99a6      	ldr	r1, [sp, #664]	; 0x298
    9ed6:	9aa7      	ldr	r2, [sp, #668]	; 0x29c
    9ed8:	9110      	str	r1, [sp, #64]	; 0x40
    9eda:	920f      	str	r2, [sp, #60]	; 0x3c
    9edc:	e7ff      	b.n	9ede <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x3ba>
    9ede:	f240 2070 	movw	r0, #624	; 0x270
    9ee2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9ee6:	9910      	ldr	r1, [sp, #64]	; 0x40
    9ee8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9eea:	f001 f87d 	bl	afe8 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE>
    9eee:	900e      	str	r0, [sp, #56]	; 0x38
    9ef0:	e7ff      	b.n	9ef2 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x3ce>
    9ef2:	980e      	ldr	r0, [sp, #56]	; 0x38
    9ef4:	f008 fec8 	bl	12c88 <json_helper_object_array_end_item>
    9ef8:	e7ff      	b.n	9efa <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x3d6>
    9efa:	e00c      	b.n	9f16 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x3f2>
    9efc:	2001      	movs	r0, #1
    9efe:	f88d 01e7 	strb.w	r0, [sp, #487]	; 0x1e7
    9f02:	f89d 11e7 	ldrb.w	r1, [sp, #487]	; 0x1e7
    9f06:	f240 2070 	movw	r0, #624	; 0x270
    9f0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9f0e:	f001 f959 	bl	b1c4 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h8b0f21dc333d20ccE>
    9f12:	e7ff      	b.n	9f14 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x3f0>
    9f14:	e7ff      	b.n	9f16 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x3f2>
    9f16:	f24a 2035 	movw	r0, #41525	; 0xa235
    9f1a:	f2c0 0002 	movt	r0, #2
    9f1e:	907a      	str	r0, [sp, #488]	; 0x1e8
    9f20:	200d      	movs	r0, #13
    9f22:	907b      	str	r0, [sp, #492]	; 0x1ec
    9f24:	987a      	ldr	r0, [sp, #488]	; 0x1e8
    9f26:	997b      	ldr	r1, [sp, #492]	; 0x1ec
    9f28:	90a0      	str	r0, [sp, #640]	; 0x280
    9f2a:	91a1      	str	r1, [sp, #644]	; 0x284
    9f2c:	98a0      	ldr	r0, [sp, #640]	; 0x280
    9f2e:	99a1      	ldr	r1, [sp, #644]	; 0x284
    9f30:	90a2      	str	r0, [sp, #648]	; 0x288
    9f32:	91a3      	str	r1, [sp, #652]	; 0x28c
    9f34:	99a2      	ldr	r1, [sp, #648]	; 0x288
    9f36:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
    9f38:	910d      	str	r1, [sp, #52]	; 0x34
    9f3a:	920c      	str	r2, [sp, #48]	; 0x30
    9f3c:	e7ff      	b.n	9f3e <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x41a>
    9f3e:	f240 2070 	movw	r0, #624	; 0x270
    9f42:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9f46:	990d      	ldr	r1, [sp, #52]	; 0x34
    9f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9f4a:	f001 f84d 	bl	afe8 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE>
    9f4e:	900b      	str	r0, [sp, #44]	; 0x2c
    9f50:	e7ff      	b.n	9f52 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x42e>
    9f52:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9f54:	f008 fe8a 	bl	12c6c <json_helper_object_array_start_item>
    9f58:	e7ff      	b.n	9f5a <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x436>
    9f5a:	f24a 2152 	movw	r1, #41554	; 0xa252
    9f5e:	f2c0 0102 	movt	r1, #2
    9f62:	a87d      	add	r0, sp, #500	; 0x1f4
    9f64:	2204      	movs	r2, #4
    9f66:	f7fe ffd7 	bl	8f18 <_ZN6mynewt4Strn3new17haa130bc407e45c8bE>
    9f6a:	e7ff      	b.n	9f6c <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x448>
    9f6c:	a87d      	add	r0, sp, #500	; 0x1f4
    9f6e:	907c      	str	r0, [sp, #496]	; 0x1f0
    9f70:	f24a 215b 	movw	r1, #41563	; 0xa25b
    9f74:	f2c0 0102 	movt	r1, #2
    9f78:	a881      	add	r0, sp, #516	; 0x204
    9f7a:	2207      	movs	r2, #7
    9f7c:	f7fe ffcc 	bl	8f18 <_ZN6mynewt4Strn3new17haa130bc407e45c8bE>
    9f80:	e7ff      	b.n	9f82 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x45e>
    9f82:	a881      	add	r0, sp, #516	; 0x204
    9f84:	9080      	str	r0, [sp, #512]	; 0x200
    9f86:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    9f88:	9a80      	ldr	r2, [sp, #512]	; 0x200
    9f8a:	f240 2070 	movw	r0, #624	; 0x270
    9f8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9f92:	f000 ffad 	bl	aef0 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hdbc3bda942320fdcE>
    9f96:	e7ff      	b.n	9f98 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x474>
    9f98:	f24a 2162 	movw	r1, #41570	; 0xa262
    9f9c:	f2c0 0102 	movt	r1, #2
    9fa0:	a885      	add	r0, sp, #532	; 0x214
    9fa2:	2206      	movs	r2, #6
    9fa4:	f7fe ffb8 	bl	8f18 <_ZN6mynewt4Strn3new17haa130bc407e45c8bE>
    9fa8:	e7ff      	b.n	9faa <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x486>
    9faa:	a885      	add	r0, sp, #532	; 0x214
    9fac:	9084      	str	r0, [sp, #528]	; 0x210
    9fae:	a82d      	add	r0, sp, #180	; 0xb4
        "device": &device_id,
    9fb0:	9088      	str	r0, [sp, #544]	; 0x220
    let _payload = coap!( @json {        
    9fb2:	9984      	ldr	r1, [sp, #528]	; 0x210
    9fb4:	9a88      	ldr	r2, [sp, #544]	; 0x220
    9fb6:	f240 2070 	movw	r0, #624	; 0x270
    9fba:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9fbe:	f000 ff97 	bl	aef0 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hdbc3bda942320fdcE>
    9fc2:	e7ff      	b.n	9fc4 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x4a0>
    9fc4:	f24a 2035 	movw	r0, #41525	; 0xa235
    9fc8:	f2c0 0002 	movt	r0, #2
    9fcc:	9089      	str	r0, [sp, #548]	; 0x224
    9fce:	200d      	movs	r0, #13
    9fd0:	908a      	str	r0, [sp, #552]	; 0x228
    9fd2:	9889      	ldr	r0, [sp, #548]	; 0x224
    9fd4:	998a      	ldr	r1, [sp, #552]	; 0x228
    9fd6:	909c      	str	r0, [sp, #624]	; 0x270
    9fd8:	919d      	str	r1, [sp, #628]	; 0x274
    9fda:	989c      	ldr	r0, [sp, #624]	; 0x270
    9fdc:	999d      	ldr	r1, [sp, #628]	; 0x274
    9fde:	909e      	str	r0, [sp, #632]	; 0x278
    9fe0:	919f      	str	r1, [sp, #636]	; 0x27c
    9fe2:	999e      	ldr	r1, [sp, #632]	; 0x278
    9fe4:	9a9f      	ldr	r2, [sp, #636]	; 0x27c
    9fe6:	910a      	str	r1, [sp, #40]	; 0x28
    9fe8:	9209      	str	r2, [sp, #36]	; 0x24
    9fea:	e7ff      	b.n	9fec <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x4c8>
    9fec:	f240 2070 	movw	r0, #624	; 0x270
    9ff0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9ff4:	990a      	ldr	r1, [sp, #40]	; 0x28
    9ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9ff8:	f000 fff6 	bl	afe8 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE>
    9ffc:	9008      	str	r0, [sp, #32]
    9ffe:	e7ff      	b.n	a000 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x4dc>
    a000:	9808      	ldr	r0, [sp, #32]
    a002:	f008 fe41 	bl	12c88 <json_helper_object_array_end_item>
    a006:	e7ff      	b.n	a008 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x4e4>
    a008:	f24a 202e 	movw	r0, #41518	; 0xa22e
    a00c:	f2c0 0002 	movt	r0, #2
    a010:	908b      	str	r0, [sp, #556]	; 0x22c
    a012:	2007      	movs	r0, #7
    a014:	908c      	str	r0, [sp, #560]	; 0x230
    a016:	f240 2070 	movw	r0, #624	; 0x270
    a01a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a01e:	f001 f956 	bl	b2ce <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17ha96fa3cb38da5ddbE>
    a022:	9007      	str	r0, [sp, #28]
    a024:	e7ff      	b.n	a026 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x502>
    a026:	988b      	ldr	r0, [sp, #556]	; 0x22c
    a028:	998c      	ldr	r1, [sp, #560]	; 0x230
    a02a:	9098      	str	r0, [sp, #608]	; 0x260
    a02c:	9199      	str	r1, [sp, #612]	; 0x264
    a02e:	9898      	ldr	r0, [sp, #608]	; 0x260
    a030:	9999      	ldr	r1, [sp, #612]	; 0x264
    a032:	909a      	str	r0, [sp, #616]	; 0x268
    a034:	919b      	str	r1, [sp, #620]	; 0x26c
    a036:	999a      	ldr	r1, [sp, #616]	; 0x268
    a038:	9a9b      	ldr	r2, [sp, #620]	; 0x26c
    a03a:	9106      	str	r1, [sp, #24]
    a03c:	9205      	str	r2, [sp, #20]
    a03e:	e7ff      	b.n	a040 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x51c>
    a040:	f240 2070 	movw	r0, #624	; 0x270
    a044:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a048:	9906      	ldr	r1, [sp, #24]
    a04a:	9a05      	ldr	r2, [sp, #20]
    a04c:	f000 ffcc 	bl	afe8 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE>
    a050:	9004      	str	r0, [sp, #16]
    a052:	e7ff      	b.n	a054 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x530>
    a054:	9807      	ldr	r0, [sp, #28]
    a056:	9904      	ldr	r1, [sp, #16]
    a058:	f008 fdfa 	bl	12c50 <json_helper_close_array>
    a05c:	e7ff      	b.n	a05e <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x53a>
    a05e:	f004 fdf9 	bl	ec54 <json_rep_end_root_object>
    a062:	e7ff      	b.n	a064 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x540>
    a064:	a88f      	add	r0, sp, #572	; 0x23c
    sensor_network::do_server_post() ? ;
    a066:	f001 fb28 	bl	b6ba <_ZN6mynewt4libs14sensor_network14do_server_post17h7661fb0cf0ad1a96E>
    a06a:	e7ff      	b.n	a06c <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x548>
    a06c:	a88d      	add	r0, sp, #564	; 0x234
    a06e:	a98f      	add	r1, sp, #572	; 0x23c
    a070:	f7fe fbe9 	bl	8846 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h2b975e1f9ec08585E>
    a074:	e7ff      	b.n	a076 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x552>
    a076:	f89d 0234 	ldrb.w	r0, [sp, #564]	; 0x234
    a07a:	07c1      	lsls	r1, r0, #31
    a07c:	2900      	cmp	r1, #0
    a07e:	9003      	str	r0, [sp, #12]
    a080:	d012      	beq.n	a0a8 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x584>
    a082:	e7ff      	b.n	a084 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x560>
    a084:	9803      	ldr	r0, [sp, #12]
    a086:	2801      	cmp	r0, #1
    a088:	f47f ad92 	bne.w	9bb0 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x8c>
    a08c:	e7ff      	b.n	a08e <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x56a>
    a08e:	988e      	ldr	r0, [sp, #568]	; 0x238
    a090:	9091      	str	r0, [sp, #580]	; 0x244
    a092:	9891      	ldr	r0, [sp, #580]	; 0x244
    a094:	f000 f825 	bl	a0e2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h4bfa181a78946fa0E>
    a098:	9002      	str	r0, [sp, #8]
    a09a:	e7ff      	b.n	a09c <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x578>
    a09c:	9802      	ldr	r0, [sp, #8]
    a09e:	f7fe fbc2 	bl	8826 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h6d3955e1a79eef94E>
    a0a2:	902b      	str	r0, [sp, #172]	; 0xac
    a0a4:	e7ff      	b.n	a0a6 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x582>
    a0a6:	e605      	b.n	9cb4 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x190>
    a0a8:	f89d 0235 	ldrb.w	r0, [sp, #565]	; 0x235
    a0ac:	f88d 024b 	strb.w	r0, [sp, #587]	; 0x24b
    console::print("NET view your sensor at \nhttps://blue-pill-geolocate.appspot.com?device=");
    a0b0:	f24a 2068 	movw	r0, #41576	; 0xa268
    a0b4:	f2c0 0002 	movt	r0, #2
    a0b8:	2148      	movs	r1, #72	; 0x48
    a0ba:	f7fe fc13 	bl	88e4 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E>
    a0be:	e7ff      	b.n	a0c0 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x59c>
    a0c0:	a82d      	add	r0, sp, #180	; 0xb4
    console::print_strn(&device_id); console::print("\n");
    a0c2:	f7fe fc2a 	bl	891a <_ZN6mynewt3sys7console10print_strn17h6acf88a32c052588E>
    a0c6:	e7ff      	b.n	a0c8 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x5a4>
    a0c8:	f24a 202c 	movw	r0, #41516	; 0xa22c
    a0cc:	f2c0 0002 	movt	r0, #2
    a0d0:	2101      	movs	r1, #1
    a0d2:	f7fe fc07 	bl	88e4 <_ZN6mynewt3sys7console5print17h0f65bc3b0e739871E>
    a0d6:	e7ff      	b.n	a0d8 <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0x5b4>
    a0d8:	2000      	movs	r0, #0
    Ok(())
    a0da:	902b      	str	r0, [sp, #172]	; 0xac
    a0dc:	2001      	movs	r0, #1
    a0de:	902b      	str	r0, [sp, #172]	; 0xac
}
    a0e0:	e574      	b.n	9bcc <_ZN3app11app_network16send_sensor_data17ha00b395570ee48dfE+0xa8>

0000a0e2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h4bfa181a78946fa0E>:
    a0e2:	b082      	sub	sp, #8
    a0e4:	4601      	mov	r1, r0
    a0e6:	9001      	str	r0, [sp, #4]
    a0e8:	9801      	ldr	r0, [sp, #4]
    a0ea:	9100      	str	r1, [sp, #0]
    a0ec:	b002      	add	sp, #8
    a0ee:	4770      	bx	lr

0000a0f0 <_ZN4core6option15Option$LT$T$GT$6expect17h0fd15c4bf762390eE>:
    a0f0:	b5b0      	push	{r4, r5, r7, lr}
    a0f2:	b08c      	sub	sp, #48	; 0x30
    a0f4:	469c      	mov	ip, r3
    a0f6:	4696      	mov	lr, r2
    a0f8:	460c      	mov	r4, r1
    a0fa:	4605      	mov	r5, r0
    a0fc:	9007      	str	r0, [sp, #28]
    a0fe:	9108      	str	r1, [sp, #32]
    a100:	9209      	str	r2, [sp, #36]	; 0x24
    a102:	930a      	str	r3, [sp, #40]	; 0x28
    a104:	9807      	ldr	r0, [sp, #28]
    a106:	2800      	cmp	r0, #0
    a108:	f8cd c018 	str.w	ip, [sp, #24]
    a10c:	f8cd e014 	str.w	lr, [sp, #20]
    a110:	9404      	str	r4, [sp, #16]
    a112:	9503      	str	r5, [sp, #12]
    a114:	9002      	str	r0, [sp, #8]
    a116:	d00d      	beq.n	a134 <_ZN4core6option15Option$LT$T$GT$6expect17h0fd15c4bf762390eE+0x44>
    a118:	e7ff      	b.n	a11a <_ZN4core6option15Option$LT$T$GT$6expect17h0fd15c4bf762390eE+0x2a>
    a11a:	9802      	ldr	r0, [sp, #8]
    a11c:	2801      	cmp	r0, #1
    a11e:	d001      	beq.n	a124 <_ZN4core6option15Option$LT$T$GT$6expect17h0fd15c4bf762390eE+0x34>
    a120:	e7ff      	b.n	a122 <_ZN4core6option15Option$LT$T$GT$6expect17h0fd15c4bf762390eE+0x32>
    a122:	defe      	udf	#254	; 0xfe
    a124:	9808      	ldr	r0, [sp, #32]
    a126:	900b      	str	r0, [sp, #44]	; 0x2c
    a128:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a12a:	9907      	ldr	r1, [sp, #28]
    a12c:	2901      	cmp	r1, #1
    a12e:	9001      	str	r0, [sp, #4]
    a130:	d005      	beq.n	a13e <_ZN4core6option15Option$LT$T$GT$6expect17h0fd15c4bf762390eE+0x4e>
    a132:	e007      	b.n	a144 <_ZN4core6option15Option$LT$T$GT$6expect17h0fd15c4bf762390eE+0x54>
    a134:	9809      	ldr	r0, [sp, #36]	; 0x24
    a136:	990a      	ldr	r1, [sp, #40]	; 0x28
    a138:	f002 fbdd 	bl	c8f6 <_ZN4core6option13expect_failed17h3eeb96a257d935a1E>
    a13c:	defe      	udf	#254	; 0xfe
    a13e:	9801      	ldr	r0, [sp, #4]
    a140:	b00c      	add	sp, #48	; 0x30
    a142:	bdb0      	pop	{r4, r5, r7, pc}
    a144:	e7fb      	b.n	a13e <_ZN4core6option15Option$LT$T$GT$6expect17h0fd15c4bf762390eE+0x4e>

0000a146 <_ZN4core3ptr19swap_nonoverlapping17ha620648bc0a20261E>:
    a146:	b580      	push	{r7, lr}
    a148:	b08a      	sub	sp, #40	; 0x28
    a14a:	4613      	mov	r3, r2
    a14c:	468c      	mov	ip, r1
    a14e:	4686      	mov	lr, r0
    a150:	9004      	str	r0, [sp, #16]
    a152:	9105      	str	r1, [sp, #20]
    a154:	9206      	str	r2, [sp, #24]
    a156:	9804      	ldr	r0, [sp, #16]
    a158:	9007      	str	r0, [sp, #28]
    a15a:	9805      	ldr	r0, [sp, #20]
    a15c:	9008      	str	r0, [sp, #32]
    a15e:	9303      	str	r3, [sp, #12]
    a160:	f8cd c008 	str.w	ip, [sp, #8]
    a164:	f8cd e004 	str.w	lr, [sp, #4]
    a168:	f000 f94d 	bl	a406 <_ZN4core3mem7size_of17hd6e821d2e278c7d8E>
    a16c:	9000      	str	r0, [sp, #0]
    a16e:	e7ff      	b.n	a170 <_ZN4core3ptr19swap_nonoverlapping17ha620648bc0a20261E+0x2a>
    a170:	9806      	ldr	r0, [sp, #24]
    a172:	9900      	ldr	r1, [sp, #0]
    a174:	4348      	muls	r0, r1
    a176:	9009      	str	r0, [sp, #36]	; 0x24
    a178:	9807      	ldr	r0, [sp, #28]
    a17a:	9908      	ldr	r1, [sp, #32]
    a17c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a17e:	f000 f82d 	bl	a1dc <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE>
    a182:	e7ff      	b.n	a184 <_ZN4core3ptr19swap_nonoverlapping17ha620648bc0a20261E+0x3e>
    a184:	b00a      	add	sp, #40	; 0x28
    a186:	bd80      	pop	{r7, pc}

0000a188 <_ZN4core3ptr23swap_nonoverlapping_one17h34abe6b6202b2c58E>:
    a188:	b580      	push	{r7, lr}
    a18a:	b086      	sub	sp, #24
    a18c:	460a      	mov	r2, r1
    a18e:	4603      	mov	r3, r0
    a190:	9003      	str	r0, [sp, #12]
    a192:	9104      	str	r1, [sp, #16]
    a194:	9202      	str	r2, [sp, #8]
    a196:	9301      	str	r3, [sp, #4]
    a198:	f000 f935 	bl	a406 <_ZN4core3mem7size_of17hd6e821d2e278c7d8E>
    a19c:	9000      	str	r0, [sp, #0]
    a19e:	e7ff      	b.n	a1a0 <_ZN4core3ptr23swap_nonoverlapping_one17h34abe6b6202b2c58E+0x18>
    a1a0:	9800      	ldr	r0, [sp, #0]
    a1a2:	281f      	cmp	r0, #31
    a1a4:	d811      	bhi.n	a1ca <_ZN4core3ptr23swap_nonoverlapping_one17h34abe6b6202b2c58E+0x42>
    a1a6:	e7ff      	b.n	a1a8 <_ZN4core3ptr23swap_nonoverlapping_one17h34abe6b6202b2c58E+0x20>
    a1a8:	9803      	ldr	r0, [sp, #12]
    a1aa:	f000 f8d1 	bl	a350 <_ZN4core3ptr4read17hd502bbc8ba3aabd4E>
    a1ae:	9005      	str	r0, [sp, #20]
    a1b0:	e7ff      	b.n	a1b2 <_ZN4core3ptr23swap_nonoverlapping_one17h34abe6b6202b2c58E+0x2a>
    a1b2:	9804      	ldr	r0, [sp, #16]
    a1b4:	9903      	ldr	r1, [sp, #12]
    a1b6:	2201      	movs	r2, #1
    a1b8:	f000 f8f7 	bl	a3aa <_ZN4core10intrinsics19copy_nonoverlapping17h5595299192d6abf2E>
    a1bc:	e7ff      	b.n	a1be <_ZN4core3ptr23swap_nonoverlapping_one17h34abe6b6202b2c58E+0x36>
    a1be:	9804      	ldr	r0, [sp, #16]
    a1c0:	9905      	ldr	r1, [sp, #20]
    a1c2:	f000 f8e6 	bl	a392 <_ZN4core3ptr5write17h4641f61a88075460E>
    a1c6:	e7ff      	b.n	a1c8 <_ZN4core3ptr23swap_nonoverlapping_one17h34abe6b6202b2c58E+0x40>
    a1c8:	e006      	b.n	a1d8 <_ZN4core3ptr23swap_nonoverlapping_one17h34abe6b6202b2c58E+0x50>
    a1ca:	9803      	ldr	r0, [sp, #12]
    a1cc:	9904      	ldr	r1, [sp, #16]
    a1ce:	2201      	movs	r2, #1
    a1d0:	f7ff ffb9 	bl	a146 <_ZN4core3ptr19swap_nonoverlapping17ha620648bc0a20261E>
    a1d4:	e7ff      	b.n	a1d6 <_ZN4core3ptr23swap_nonoverlapping_one17h34abe6b6202b2c58E+0x4e>
    a1d6:	e7ff      	b.n	a1d8 <_ZN4core3ptr23swap_nonoverlapping_one17h34abe6b6202b2c58E+0x50>
    a1d8:	b006      	add	sp, #24
    a1da:	bd80      	pop	{r7, pc}

0000a1dc <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE>:
    a1dc:	b5d0      	push	{r4, r6, r7, lr}
    a1de:	af02      	add	r7, sp, #8
    a1e0:	b0ac      	sub	sp, #176	; 0xb0
    a1e2:	466c      	mov	r4, sp
    a1e4:	f36f 0404 	bfc	r4, #0, #5
    a1e8:	46a5      	mov	sp, r4
    a1ea:	4613      	mov	r3, r2
    a1ec:	468c      	mov	ip, r1
    a1ee:	4686      	mov	lr, r0
    a1f0:	900b      	str	r0, [sp, #44]	; 0x2c
    a1f2:	910c      	str	r1, [sp, #48]	; 0x30
    a1f4:	920d      	str	r2, [sp, #52]	; 0x34
    a1f6:	930a      	str	r3, [sp, #40]	; 0x28
    a1f8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    a1fc:	f8cd e020 	str.w	lr, [sp, #32]
    a200:	f000 f8f8 	bl	a3f4 <_ZN4core3mem7size_of17ha5be24a1917b21b8E>
    a204:	900e      	str	r0, [sp, #56]	; 0x38
    a206:	e7ff      	b.n	a208 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0x2c>
    a208:	2000      	movs	r0, #0
    a20a:	900f      	str	r0, [sp, #60]	; 0x3c
    a20c:	e7ff      	b.n	a20e <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0x32>
    a20e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a210:	990e      	ldr	r1, [sp, #56]	; 0x38
    a212:	4408      	add	r0, r1
    a214:	990d      	ldr	r1, [sp, #52]	; 0x34
    a216:	4288      	cmp	r0, r1
    a218:	d905      	bls.n	a226 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0x4a>
    a21a:	e7ff      	b.n	a21c <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0x40>
    a21c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a21e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a220:	4288      	cmp	r0, r1
    a222:	d32d      	bcc.n	a280 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0xa4>
    a224:	e059      	b.n	a2da <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0xfe>
    a226:	e7ff      	b.n	a228 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0x4c>
    a228:	a810      	add	r0, sp, #64	; 0x40
    a22a:	9028      	str	r0, [sp, #160]	; 0xa0
    a22c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    a22e:	9029      	str	r0, [sp, #164]	; 0xa4
    a230:	9829      	ldr	r0, [sp, #164]	; 0xa4
    a232:	9007      	str	r0, [sp, #28]
    a234:	e7ff      	b.n	a236 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0x5a>
    a236:	9807      	ldr	r0, [sp, #28]
    a238:	9019      	str	r0, [sp, #100]	; 0x64
    a23a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a23c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a23e:	f000 f850 	bl	a2e2 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17he095d1e83d7c72c3E>
    a242:	901a      	str	r0, [sp, #104]	; 0x68
    a244:	e7ff      	b.n	a246 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0x6a>
    a246:	980c      	ldr	r0, [sp, #48]	; 0x30
    a248:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a24a:	f000 f84a 	bl	a2e2 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17he095d1e83d7c72c3E>
    a24e:	901b      	str	r0, [sp, #108]	; 0x6c
    a250:	e7ff      	b.n	a252 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0x76>
    a252:	981a      	ldr	r0, [sp, #104]	; 0x68
    a254:	9919      	ldr	r1, [sp, #100]	; 0x64
    a256:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a258:	f000 f935 	bl	a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>
    a25c:	e7ff      	b.n	a25e <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0x82>
    a25e:	981b      	ldr	r0, [sp, #108]	; 0x6c
    a260:	991a      	ldr	r1, [sp, #104]	; 0x68
    a262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a264:	f000 f92f 	bl	a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>
    a268:	e7ff      	b.n	a26a <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0x8e>
    a26a:	9819      	ldr	r0, [sp, #100]	; 0x64
    a26c:	991b      	ldr	r1, [sp, #108]	; 0x6c
    a26e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a270:	f000 f929 	bl	a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>
    a274:	e7ff      	b.n	a276 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0x9a>
    a276:	980e      	ldr	r0, [sp, #56]	; 0x38
    a278:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a27a:	4408      	add	r0, r1
    a27c:	900f      	str	r0, [sp, #60]	; 0x3c
    a27e:	e7c6      	b.n	a20e <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0x32>
    a280:	e7ff      	b.n	a282 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0xa6>
    a282:	980d      	ldr	r0, [sp, #52]	; 0x34
    a284:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a286:	1a40      	subs	r0, r0, r1
    a288:	9024      	str	r0, [sp, #144]	; 0x90
    a28a:	a81c      	add	r0, sp, #112	; 0x70
    a28c:	902a      	str	r0, [sp, #168]	; 0xa8
    a28e:	982a      	ldr	r0, [sp, #168]	; 0xa8
    a290:	902b      	str	r0, [sp, #172]	; 0xac
    a292:	982b      	ldr	r0, [sp, #172]	; 0xac
    a294:	9006      	str	r0, [sp, #24]
    a296:	e7ff      	b.n	a298 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0xbc>
    a298:	9806      	ldr	r0, [sp, #24]
    a29a:	9025      	str	r0, [sp, #148]	; 0x94
    a29c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a29e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a2a0:	f000 f81f 	bl	a2e2 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17he095d1e83d7c72c3E>
    a2a4:	9026      	str	r0, [sp, #152]	; 0x98
    a2a6:	e7ff      	b.n	a2a8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0xcc>
    a2a8:	980c      	ldr	r0, [sp, #48]	; 0x30
    a2aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a2ac:	f000 f819 	bl	a2e2 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17he095d1e83d7c72c3E>
    a2b0:	9027      	str	r0, [sp, #156]	; 0x9c
    a2b2:	e7ff      	b.n	a2b4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0xd8>
    a2b4:	9826      	ldr	r0, [sp, #152]	; 0x98
    a2b6:	9925      	ldr	r1, [sp, #148]	; 0x94
    a2b8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a2ba:	f000 f904 	bl	a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>
    a2be:	e7ff      	b.n	a2c0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0xe4>
    a2c0:	9827      	ldr	r0, [sp, #156]	; 0x9c
    a2c2:	9926      	ldr	r1, [sp, #152]	; 0x98
    a2c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a2c6:	f000 f8fe 	bl	a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>
    a2ca:	e7ff      	b.n	a2cc <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0xf0>
    a2cc:	9825      	ldr	r0, [sp, #148]	; 0x94
    a2ce:	9927      	ldr	r1, [sp, #156]	; 0x9c
    a2d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a2d2:	f000 f8f8 	bl	a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>
    a2d6:	e7ff      	b.n	a2d8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0xfc>
    a2d8:	e7ff      	b.n	a2da <_ZN4core3ptr25swap_nonoverlapping_bytes17h8f7f51ded7d36facE+0xfe>
    a2da:	f1a7 0408 	sub.w	r4, r7, #8
    a2de:	46a5      	mov	sp, r4
    a2e0:	bdd0      	pop	{r4, r6, r7, pc}

0000a2e2 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17he095d1e83d7c72c3E>:
    a2e2:	b580      	push	{r7, lr}
    a2e4:	b086      	sub	sp, #24
    a2e6:	460a      	mov	r2, r1
    a2e8:	4603      	mov	r3, r0
    a2ea:	9004      	str	r0, [sp, #16]
    a2ec:	9105      	str	r1, [sp, #20]
    a2ee:	9804      	ldr	r0, [sp, #16]
    a2f0:	9905      	ldr	r1, [sp, #20]
    a2f2:	9203      	str	r2, [sp, #12]
    a2f4:	9302      	str	r3, [sp, #8]
    a2f6:	f000 f805 	bl	a304 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he3ed0b5e2c9f3406E>
    a2fa:	9001      	str	r0, [sp, #4]
    a2fc:	e7ff      	b.n	a2fe <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17he095d1e83d7c72c3E+0x1c>
    a2fe:	9801      	ldr	r0, [sp, #4]
    a300:	b006      	add	sp, #24
    a302:	bd80      	pop	{r7, pc}

0000a304 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he3ed0b5e2c9f3406E>:
    a304:	b086      	sub	sp, #24
    a306:	460a      	mov	r2, r1
    a308:	4603      	mov	r3, r0
    a30a:	9003      	str	r0, [sp, #12]
    a30c:	9104      	str	r1, [sp, #16]
    a30e:	9803      	ldr	r0, [sp, #12]
    a310:	9904      	ldr	r1, [sp, #16]
    a312:	4408      	add	r0, r1
    a314:	9005      	str	r0, [sp, #20]
    a316:	9805      	ldr	r0, [sp, #20]
    a318:	9202      	str	r2, [sp, #8]
    a31a:	9301      	str	r3, [sp, #4]
    a31c:	9000      	str	r0, [sp, #0]
    a31e:	e7ff      	b.n	a320 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he3ed0b5e2c9f3406E+0x1c>
    a320:	9800      	ldr	r0, [sp, #0]
    a322:	b006      	add	sp, #24
    a324:	4770      	bx	lr

0000a326 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h5dfc35f677b1147aE>:
    a326:	b580      	push	{r7, lr}
    a328:	b084      	sub	sp, #16
    a32a:	4601      	mov	r1, r0
    a32c:	9003      	str	r0, [sp, #12]
    a32e:	9803      	ldr	r0, [sp, #12]
    a330:	9102      	str	r1, [sp, #8]
    a332:	9001      	str	r0, [sp, #4]
    a334:	f000 f80a 	bl	a34c <_ZN4core3ptr4null17h8bbb43e46b26b74aE>
    a338:	9000      	str	r0, [sp, #0]
    a33a:	e7ff      	b.n	a33c <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h5dfc35f677b1147aE+0x16>
    a33c:	9801      	ldr	r0, [sp, #4]
    a33e:	9900      	ldr	r1, [sp, #0]
    a340:	1a42      	subs	r2, r0, r1
    a342:	fab2 f282 	clz	r2, r2
    a346:	0950      	lsrs	r0, r2, #5
    a348:	b004      	add	sp, #16
    a34a:	bd80      	pop	{r7, pc}

0000a34c <_ZN4core3ptr4null17h8bbb43e46b26b74aE>:
    a34c:	2000      	movs	r0, #0
    a34e:	4770      	bx	lr

0000a350 <_ZN4core3ptr4read17hd502bbc8ba3aabd4E>:
    a350:	b580      	push	{r7, lr}
    a352:	b08c      	sub	sp, #48	; 0x30
    a354:	4601      	mov	r1, r0
    a356:	9005      	str	r0, [sp, #20]
    a358:	9807      	ldr	r0, [sp, #28]
    a35a:	9006      	str	r0, [sp, #24]
    a35c:	9104      	str	r1, [sp, #16]
    a35e:	e7ff      	b.n	a360 <_ZN4core3ptr4read17hd502bbc8ba3aabd4E+0x10>
    a360:	9805      	ldr	r0, [sp, #20]
    a362:	a906      	add	r1, sp, #24
    a364:	910a      	str	r1, [sp, #40]	; 0x28
    a366:	990a      	ldr	r1, [sp, #40]	; 0x28
    a368:	910b      	str	r1, [sp, #44]	; 0x2c
    a36a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a36c:	9003      	str	r0, [sp, #12]
    a36e:	9102      	str	r1, [sp, #8]
    a370:	e7ff      	b.n	a372 <_ZN4core3ptr4read17hd502bbc8ba3aabd4E+0x22>
    a372:	2201      	movs	r2, #1
    a374:	9803      	ldr	r0, [sp, #12]
    a376:	9902      	ldr	r1, [sp, #8]
    a378:	f000 f817 	bl	a3aa <_ZN4core10intrinsics19copy_nonoverlapping17h5595299192d6abf2E>
    a37c:	e7ff      	b.n	a37e <_ZN4core3ptr4read17hd502bbc8ba3aabd4E+0x2e>
    a37e:	9806      	ldr	r0, [sp, #24]
    a380:	9008      	str	r0, [sp, #32]
    a382:	9808      	ldr	r0, [sp, #32]
    a384:	9009      	str	r0, [sp, #36]	; 0x24
    a386:	9809      	ldr	r0, [sp, #36]	; 0x24
    a388:	9001      	str	r0, [sp, #4]
    a38a:	e7ff      	b.n	a38c <_ZN4core3ptr4read17hd502bbc8ba3aabd4E+0x3c>
    a38c:	9801      	ldr	r0, [sp, #4]
    a38e:	b00c      	add	sp, #48	; 0x30
    a390:	bd80      	pop	{r7, pc}

0000a392 <_ZN4core3ptr5write17h4641f61a88075460E>:
    a392:	b084      	sub	sp, #16
    a394:	460a      	mov	r2, r1
    a396:	4603      	mov	r3, r0
    a398:	9002      	str	r0, [sp, #8]
    a39a:	9103      	str	r1, [sp, #12]
    a39c:	9802      	ldr	r0, [sp, #8]
    a39e:	9903      	ldr	r1, [sp, #12]
    a3a0:	6001      	str	r1, [r0, #0]
    a3a2:	9201      	str	r2, [sp, #4]
    a3a4:	9300      	str	r3, [sp, #0]
    a3a6:	b004      	add	sp, #16
    a3a8:	4770      	bx	lr

0000a3aa <_ZN4core10intrinsics19copy_nonoverlapping17h5595299192d6abf2E>:
    a3aa:	b580      	push	{r7, lr}
    a3ac:	b086      	sub	sp, #24
    a3ae:	4613      	mov	r3, r2
    a3b0:	468c      	mov	ip, r1
    a3b2:	4686      	mov	lr, r0
    a3b4:	9003      	str	r0, [sp, #12]
    a3b6:	9104      	str	r1, [sp, #16]
    a3b8:	9205      	str	r2, [sp, #20]
    a3ba:	9903      	ldr	r1, [sp, #12]
    a3bc:	9804      	ldr	r0, [sp, #16]
    a3be:	9a05      	ldr	r2, [sp, #20]
    a3c0:	0092      	lsls	r2, r2, #2
    a3c2:	9302      	str	r3, [sp, #8]
    a3c4:	f8cd c004 	str.w	ip, [sp, #4]
    a3c8:	f8cd e000 	str.w	lr, [sp]
    a3cc:	f01f fc86 	bl	29cdc <__aeabi_memcpy>
    a3d0:	e7ff      	b.n	a3d2 <_ZN4core10intrinsics19copy_nonoverlapping17h5595299192d6abf2E+0x28>
    a3d2:	b006      	add	sp, #24
    a3d4:	bd80      	pop	{r7, pc}

0000a3d6 <_ZN4core3mem4swap17hb484fae726ea8945E>:
    a3d6:	b580      	push	{r7, lr}
    a3d8:	b084      	sub	sp, #16
    a3da:	460a      	mov	r2, r1
    a3dc:	4603      	mov	r3, r0
    a3de:	9002      	str	r0, [sp, #8]
    a3e0:	9103      	str	r1, [sp, #12]
    a3e2:	9802      	ldr	r0, [sp, #8]
    a3e4:	9903      	ldr	r1, [sp, #12]
    a3e6:	9201      	str	r2, [sp, #4]
    a3e8:	9300      	str	r3, [sp, #0]
    a3ea:	f7ff fecd 	bl	a188 <_ZN4core3ptr23swap_nonoverlapping_one17h34abe6b6202b2c58E>
    a3ee:	e7ff      	b.n	a3f0 <_ZN4core3mem4swap17hb484fae726ea8945E+0x1a>
    a3f0:	b004      	add	sp, #16
    a3f2:	bd80      	pop	{r7, pc}

0000a3f4 <_ZN4core3mem7size_of17ha5be24a1917b21b8E>:
    a3f4:	b082      	sub	sp, #8
    a3f6:	2020      	movs	r0, #32
    a3f8:	9001      	str	r0, [sp, #4]
    a3fa:	9801      	ldr	r0, [sp, #4]
    a3fc:	9000      	str	r0, [sp, #0]
    a3fe:	e7ff      	b.n	a400 <_ZN4core3mem7size_of17ha5be24a1917b21b8E+0xc>
    a400:	9800      	ldr	r0, [sp, #0]
    a402:	b002      	add	sp, #8
    a404:	4770      	bx	lr

0000a406 <_ZN4core3mem7size_of17hd6e821d2e278c7d8E>:
    a406:	b082      	sub	sp, #8
    a408:	2004      	movs	r0, #4
    a40a:	9001      	str	r0, [sp, #4]
    a40c:	9801      	ldr	r0, [sp, #4]
    a40e:	9000      	str	r0, [sp, #0]
    a410:	e7ff      	b.n	a412 <_ZN4core3mem7size_of17hd6e821d2e278c7d8E+0xc>
    a412:	9800      	ldr	r0, [sp, #0]
    a414:	b002      	add	sp, #8
    a416:	4770      	bx	lr

0000a418 <_ZN4core3mem7size_of17h96e196a831b2ee50E>:
    a418:	b082      	sub	sp, #8
    a41a:	2001      	movs	r0, #1
    a41c:	9001      	str	r0, [sp, #4]
    a41e:	9801      	ldr	r0, [sp, #4]
    a420:	9000      	str	r0, [sp, #0]
    a422:	e7ff      	b.n	a424 <_ZN4core3mem7size_of17h96e196a831b2ee50E+0xc>
    a424:	9800      	ldr	r0, [sp, #0]
    a426:	b002      	add	sp, #8
    a428:	4770      	bx	lr

0000a42a <_ZN4core3mem8align_of17h58768cca995720e6E>:
    a42a:	b082      	sub	sp, #8
    a42c:	2001      	movs	r0, #1
    a42e:	9001      	str	r0, [sp, #4]
    a430:	9801      	ldr	r0, [sp, #4]
    a432:	9000      	str	r0, [sp, #0]
    a434:	e7ff      	b.n	a436 <_ZN4core3mem8align_of17h58768cca995720e6E+0xc>
    a436:	9800      	ldr	r0, [sp, #0]
    a438:	b002      	add	sp, #8
    a43a:	4770      	bx	lr

0000a43c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he0662d6d576dbc21E>:
    a43c:	b580      	push	{r7, lr}
    a43e:	b086      	sub	sp, #24
    a440:	460a      	mov	r2, r1
    a442:	4603      	mov	r3, r0
    a444:	9004      	str	r0, [sp, #16]
    a446:	9105      	str	r1, [sp, #20]
    a448:	9804      	ldr	r0, [sp, #16]
    a44a:	6800      	ldr	r0, [r0, #0]
    a44c:	9905      	ldr	r1, [sp, #20]
    a44e:	9203      	str	r2, [sp, #12]
    a450:	9302      	str	r3, [sp, #8]
    a452:	f000 f84e 	bl	a4f2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE>
    a456:	9001      	str	r0, [sp, #4]
    a458:	e7ff      	b.n	a45a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he0662d6d576dbc21E+0x1e>
    a45a:	9801      	ldr	r0, [sp, #4]
    a45c:	f000 0001 	and.w	r0, r0, #1
    a460:	b006      	add	sp, #24
    a462:	bd80      	pop	{r7, pc}

0000a464 <_ZN4core3fmt10ArgumentV13new17he7aeb924cd1c8272E>:
    a464:	b08a      	sub	sp, #40	; 0x28
    a466:	460a      	mov	r2, r1
    a468:	4603      	mov	r3, r0
    a46a:	9004      	str	r0, [sp, #16]
    a46c:	9105      	str	r1, [sp, #20]
    a46e:	9805      	ldr	r0, [sp, #20]
    a470:	9008      	str	r0, [sp, #32]
    a472:	9808      	ldr	r0, [sp, #32]
    a474:	9203      	str	r2, [sp, #12]
    a476:	9302      	str	r3, [sp, #8]
    a478:	9001      	str	r0, [sp, #4]
    a47a:	e7ff      	b.n	a47c <_ZN4core3fmt10ArgumentV13new17he7aeb924cd1c8272E+0x18>
    a47c:	9804      	ldr	r0, [sp, #16]
    a47e:	9009      	str	r0, [sp, #36]	; 0x24
    a480:	9809      	ldr	r0, [sp, #36]	; 0x24
    a482:	9000      	str	r0, [sp, #0]
    a484:	e7ff      	b.n	a486 <_ZN4core3fmt10ArgumentV13new17he7aeb924cd1c8272E+0x22>
    a486:	9800      	ldr	r0, [sp, #0]
    a488:	9006      	str	r0, [sp, #24]
    a48a:	9901      	ldr	r1, [sp, #4]
    a48c:	9107      	str	r1, [sp, #28]
    a48e:	9806      	ldr	r0, [sp, #24]
    a490:	9907      	ldr	r1, [sp, #28]
    a492:	b00a      	add	sp, #40	; 0x28
    a494:	4770      	bx	lr

0000a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>:
    a496:	b086      	sub	sp, #24
    a498:	460a      	mov	r2, r1
    a49a:	4603      	mov	r3, r0
    a49c:	9002      	str	r0, [sp, #8]
    a49e:	9103      	str	r1, [sp, #12]
    a4a0:	9802      	ldr	r0, [sp, #8]
    a4a2:	9903      	ldr	r1, [sp, #12]
    a4a4:	9004      	str	r0, [sp, #16]
    a4a6:	9105      	str	r1, [sp, #20]
    a4a8:	9805      	ldr	r0, [sp, #20]
    a4aa:	9201      	str	r2, [sp, #4]
    a4ac:	9300      	str	r3, [sp, #0]
    a4ae:	b006      	add	sp, #24
    a4b0:	4770      	bx	lr

0000a4b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd0263209417be61aE>:
    a4b2:	b084      	sub	sp, #16
    a4b4:	460a      	mov	r2, r1
    a4b6:	4603      	mov	r3, r0
    a4b8:	9002      	str	r0, [sp, #8]
    a4ba:	9103      	str	r1, [sp, #12]
    a4bc:	9802      	ldr	r0, [sp, #8]
    a4be:	9201      	str	r2, [sp, #4]
    a4c0:	9300      	str	r3, [sp, #0]
    a4c2:	b004      	add	sp, #16
    a4c4:	4770      	bx	lr

0000a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>:
    a4c6:	b580      	push	{r7, lr}
    a4c8:	b088      	sub	sp, #32
    a4ca:	4613      	mov	r3, r2
    a4cc:	468c      	mov	ip, r1
    a4ce:	4686      	mov	lr, r0
    a4d0:	9005      	str	r0, [sp, #20]
    a4d2:	9106      	str	r1, [sp, #24]
    a4d4:	9207      	str	r2, [sp, #28]
    a4d6:	9905      	ldr	r1, [sp, #20]
    a4d8:	9806      	ldr	r0, [sp, #24]
    a4da:	9a07      	ldr	r2, [sp, #28]
    a4dc:	9304      	str	r3, [sp, #16]
    a4de:	f8cd c00c 	str.w	ip, [sp, #12]
    a4e2:	f8cd e008 	str.w	lr, [sp, #8]
    a4e6:	f01f fbf9 	bl	29cdc <__aeabi_memcpy>
    a4ea:	9001      	str	r0, [sp, #4]
    a4ec:	e7ff      	b.n	a4ee <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E+0x28>
    a4ee:	b008      	add	sp, #32
    a4f0:	bd80      	pop	{r7, pc}

0000a4f2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE>:
    a4f2:	b580      	push	{r7, lr}
    a4f4:	b088      	sub	sp, #32
    a4f6:	460a      	mov	r2, r1
    a4f8:	4603      	mov	r3, r0
    a4fa:	9005      	str	r0, [sp, #20]
    a4fc:	9106      	str	r1, [sp, #24]
    a4fe:	9806      	ldr	r0, [sp, #24]
    a500:	9204      	str	r2, [sp, #16]
    a502:	9303      	str	r3, [sp, #12]
    a504:	f003 fa5f 	bl	d9c6 <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
    a508:	9002      	str	r0, [sp, #8]
    a50a:	e7ff      	b.n	a50c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE+0x1a>
    a50c:	9802      	ldr	r0, [sp, #8]
    a50e:	07c1      	lsls	r1, r0, #31
    a510:	2900      	cmp	r1, #0
    a512:	d008      	beq.n	a526 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE+0x34>
    a514:	e7ff      	b.n	a516 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE+0x24>
    a516:	9805      	ldr	r0, [sp, #20]
    a518:	9906      	ldr	r1, [sp, #24]
    a51a:	f003 fd86 	bl	e02a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE>
    a51e:	f88d 001f 	strb.w	r0, [sp, #31]
    a522:	e7ff      	b.n	a524 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE+0x32>
    a524:	e01a      	b.n	a55c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE+0x6a>
    a526:	9806      	ldr	r0, [sp, #24]
    a528:	f003 fa51 	bl	d9ce <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
    a52c:	9001      	str	r0, [sp, #4]
    a52e:	e7ff      	b.n	a530 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE+0x3e>
    a530:	9801      	ldr	r0, [sp, #4]
    a532:	07c1      	lsls	r1, r0, #31
    a534:	2900      	cmp	r1, #0
    a536:	d008      	beq.n	a54a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE+0x58>
    a538:	e7ff      	b.n	a53a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE+0x48>
    a53a:	9805      	ldr	r0, [sp, #20]
    a53c:	9906      	ldr	r1, [sp, #24]
    a53e:	f003 fddf 	bl	e100 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E>
    a542:	f88d 001f 	strb.w	r0, [sp, #31]
    a546:	e7ff      	b.n	a548 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE+0x56>
    a548:	e007      	b.n	a55a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE+0x68>
    a54a:	9805      	ldr	r0, [sp, #20]
    a54c:	9906      	ldr	r1, [sp, #24]
    a54e:	f003 ff3e 	bl	e3ce <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE>
    a552:	f88d 001f 	strb.w	r0, [sp, #31]
    a556:	e7ff      	b.n	a558 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE+0x66>
    a558:	e7ff      	b.n	a55a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE+0x68>
    a55a:	e7ff      	b.n	a55c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h2796edf2b2bb0bbfE+0x6a>
    a55c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    a560:	b008      	add	sp, #32
    a562:	bd80      	pop	{r7, pc}

0000a564 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h070926fb062338c0E>:
    a564:	b580      	push	{r7, lr}
    a566:	b086      	sub	sp, #24
    a568:	460a      	mov	r2, r1
    a56a:	4603      	mov	r3, r0
    a56c:	9004      	str	r0, [sp, #16]
    a56e:	9105      	str	r1, [sp, #20]
    a570:	9804      	ldr	r0, [sp, #16]
    a572:	9905      	ldr	r1, [sp, #20]
    a574:	9203      	str	r2, [sp, #12]
    a576:	9302      	str	r3, [sp, #8]
    a578:	f000 f805 	bl	a586 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h1b1bd4fc0c06f6a7E>
    a57c:	9001      	str	r0, [sp, #4]
    a57e:	e7ff      	b.n	a580 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h070926fb062338c0E+0x1c>
    a580:	9801      	ldr	r0, [sp, #4]
    a582:	b006      	add	sp, #24
    a584:	bd80      	pop	{r7, pc}

0000a586 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h1b1bd4fc0c06f6a7E>:
    a586:	b086      	sub	sp, #24
    a588:	460a      	mov	r2, r1
    a58a:	4603      	mov	r3, r0
    a58c:	9003      	str	r0, [sp, #12]
    a58e:	9104      	str	r1, [sp, #16]
    a590:	9803      	ldr	r0, [sp, #12]
    a592:	9904      	ldr	r1, [sp, #16]
    a594:	4408      	add	r0, r1
    a596:	9005      	str	r0, [sp, #20]
    a598:	9805      	ldr	r0, [sp, #20]
    a59a:	9202      	str	r2, [sp, #8]
    a59c:	9301      	str	r3, [sp, #4]
    a59e:	9000      	str	r0, [sp, #0]
    a5a0:	e7ff      	b.n	a5a2 <_ZN4core3ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h1b1bd4fc0c06f6a7E+0x1c>
    a5a2:	9800      	ldr	r0, [sp, #0]
    a5a4:	b006      	add	sp, #24
    a5a6:	4770      	bx	lr

0000a5a8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E>:
    a5a8:	b5d0      	push	{r4, r6, r7, lr}
    a5aa:	af02      	add	r7, sp, #8
    a5ac:	b0ac      	sub	sp, #176	; 0xb0
    a5ae:	466c      	mov	r4, sp
    a5b0:	f36f 0404 	bfc	r4, #0, #5
    a5b4:	46a5      	mov	sp, r4
    a5b6:	4613      	mov	r3, r2
    a5b8:	468c      	mov	ip, r1
    a5ba:	4686      	mov	lr, r0
    a5bc:	900b      	str	r0, [sp, #44]	; 0x2c
    a5be:	910c      	str	r1, [sp, #48]	; 0x30
    a5c0:	920d      	str	r2, [sp, #52]	; 0x34
    a5c2:	930a      	str	r3, [sp, #40]	; 0x28
    a5c4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    a5c8:	f8cd e020 	str.w	lr, [sp, #32]
    a5cc:	f7ff ff12 	bl	a3f4 <_ZN4core3mem7size_of17ha5be24a1917b21b8E>
    a5d0:	900e      	str	r0, [sp, #56]	; 0x38
    a5d2:	e7ff      	b.n	a5d4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0x2c>
    a5d4:	2000      	movs	r0, #0
    a5d6:	900f      	str	r0, [sp, #60]	; 0x3c
    a5d8:	e7ff      	b.n	a5da <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0x32>
    a5da:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a5dc:	990e      	ldr	r1, [sp, #56]	; 0x38
    a5de:	4408      	add	r0, r1
    a5e0:	990d      	ldr	r1, [sp, #52]	; 0x34
    a5e2:	4288      	cmp	r0, r1
    a5e4:	d905      	bls.n	a5f2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0x4a>
    a5e6:	e7ff      	b.n	a5e8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0x40>
    a5e8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a5ea:	990d      	ldr	r1, [sp, #52]	; 0x34
    a5ec:	4288      	cmp	r0, r1
    a5ee:	d32d      	bcc.n	a64c <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0xa4>
    a5f0:	e059      	b.n	a6a6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0xfe>
    a5f2:	e7ff      	b.n	a5f4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0x4c>
    a5f4:	a810      	add	r0, sp, #64	; 0x40
    a5f6:	902a      	str	r0, [sp, #168]	; 0xa8
    a5f8:	982a      	ldr	r0, [sp, #168]	; 0xa8
    a5fa:	902b      	str	r0, [sp, #172]	; 0xac
    a5fc:	982b      	ldr	r0, [sp, #172]	; 0xac
    a5fe:	9007      	str	r0, [sp, #28]
    a600:	e7ff      	b.n	a602 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0x5a>
    a602:	9807      	ldr	r0, [sp, #28]
    a604:	9019      	str	r0, [sp, #100]	; 0x64
    a606:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a608:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a60a:	f7ff fe6a 	bl	a2e2 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17he095d1e83d7c72c3E>
    a60e:	901a      	str	r0, [sp, #104]	; 0x68
    a610:	e7ff      	b.n	a612 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0x6a>
    a612:	980c      	ldr	r0, [sp, #48]	; 0x30
    a614:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a616:	f7ff fe64 	bl	a2e2 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17he095d1e83d7c72c3E>
    a61a:	901b      	str	r0, [sp, #108]	; 0x6c
    a61c:	e7ff      	b.n	a61e <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0x76>
    a61e:	981a      	ldr	r0, [sp, #104]	; 0x68
    a620:	9919      	ldr	r1, [sp, #100]	; 0x64
    a622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a624:	f7ff ff4f 	bl	a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>
    a628:	e7ff      	b.n	a62a <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0x82>
    a62a:	981b      	ldr	r0, [sp, #108]	; 0x6c
    a62c:	991a      	ldr	r1, [sp, #104]	; 0x68
    a62e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a630:	f7ff ff49 	bl	a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>
    a634:	e7ff      	b.n	a636 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0x8e>
    a636:	9819      	ldr	r0, [sp, #100]	; 0x64
    a638:	991b      	ldr	r1, [sp, #108]	; 0x6c
    a63a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a63c:	f7ff ff43 	bl	a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>
    a640:	e7ff      	b.n	a642 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0x9a>
    a642:	980e      	ldr	r0, [sp, #56]	; 0x38
    a644:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a646:	4408      	add	r0, r1
    a648:	900f      	str	r0, [sp, #60]	; 0x3c
    a64a:	e7c6      	b.n	a5da <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0x32>
    a64c:	e7ff      	b.n	a64e <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0xa6>
    a64e:	980d      	ldr	r0, [sp, #52]	; 0x34
    a650:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a652:	1a40      	subs	r0, r0, r1
    a654:	9024      	str	r0, [sp, #144]	; 0x90
    a656:	a81c      	add	r0, sp, #112	; 0x70
    a658:	9028      	str	r0, [sp, #160]	; 0xa0
    a65a:	9828      	ldr	r0, [sp, #160]	; 0xa0
    a65c:	9029      	str	r0, [sp, #164]	; 0xa4
    a65e:	9829      	ldr	r0, [sp, #164]	; 0xa4
    a660:	9006      	str	r0, [sp, #24]
    a662:	e7ff      	b.n	a664 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0xbc>
    a664:	9806      	ldr	r0, [sp, #24]
    a666:	9025      	str	r0, [sp, #148]	; 0x94
    a668:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a66a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a66c:	f7ff fe39 	bl	a2e2 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17he095d1e83d7c72c3E>
    a670:	9026      	str	r0, [sp, #152]	; 0x98
    a672:	e7ff      	b.n	a674 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0xcc>
    a674:	980c      	ldr	r0, [sp, #48]	; 0x30
    a676:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a678:	f7ff fe33 	bl	a2e2 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17he095d1e83d7c72c3E>
    a67c:	9027      	str	r0, [sp, #156]	; 0x9c
    a67e:	e7ff      	b.n	a680 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0xd8>
    a680:	9826      	ldr	r0, [sp, #152]	; 0x98
    a682:	9925      	ldr	r1, [sp, #148]	; 0x94
    a684:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a686:	f7ff ff1e 	bl	a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>
    a68a:	e7ff      	b.n	a68c <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0xe4>
    a68c:	9827      	ldr	r0, [sp, #156]	; 0x9c
    a68e:	9926      	ldr	r1, [sp, #152]	; 0x98
    a690:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a692:	f7ff ff18 	bl	a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>
    a696:	e7ff      	b.n	a698 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0xf0>
    a698:	9825      	ldr	r0, [sp, #148]	; 0x94
    a69a:	9927      	ldr	r1, [sp, #156]	; 0x9c
    a69c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a69e:	f7ff ff12 	bl	a4c6 <_ZN4core10intrinsics19copy_nonoverlapping17h0bdf6ae081c159c2E>
    a6a2:	e7ff      	b.n	a6a4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0xfc>
    a6a4:	e7ff      	b.n	a6a6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h48e48ff60fbe8d69E+0xfe>
    a6a6:	f1a7 0408 	sub.w	r4, r7, #8
    a6aa:	46a5      	mov	sp, r4
    a6ac:	bdd0      	pop	{r4, r6, r7, pc}

0000a6ae <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h92a997fe3feebcc4E>:
    a6ae:	b580      	push	{r7, lr}
    a6b0:	b086      	sub	sp, #24
    a6b2:	460a      	mov	r2, r1
    a6b4:	4603      	mov	r3, r0
    a6b6:	9004      	str	r0, [sp, #16]
    a6b8:	9105      	str	r1, [sp, #20]
    a6ba:	9804      	ldr	r0, [sp, #16]
    a6bc:	6800      	ldr	r0, [r0, #0]
    a6be:	9905      	ldr	r1, [sp, #20]
    a6c0:	9203      	str	r2, [sp, #12]
    a6c2:	9302      	str	r3, [sp, #8]
    a6c4:	f000 f851 	bl	a76a <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE>
    a6c8:	9001      	str	r0, [sp, #4]
    a6ca:	e7ff      	b.n	a6cc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h92a997fe3feebcc4E+0x1e>
    a6cc:	9801      	ldr	r0, [sp, #4]
    a6ce:	f000 0001 	and.w	r0, r0, #1
    a6d2:	b006      	add	sp, #24
    a6d4:	bd80      	pop	{r7, pc}

0000a6d6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE>:
    a6d6:	b08a      	sub	sp, #40	; 0x28
    a6d8:	460a      	mov	r2, r1
    a6da:	4603      	mov	r3, r0
    a6dc:	9003      	str	r0, [sp, #12]
    a6de:	9104      	str	r1, [sp, #16]
    a6e0:	2000      	movs	r0, #0
    a6e2:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    a6e6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    a6ea:	2001      	movs	r0, #1
    a6ec:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    a6f0:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    a6f4:	9803      	ldr	r0, [sp, #12]
    a6f6:	2800      	cmp	r0, #0
    a6f8:	9202      	str	r2, [sp, #8]
    a6fa:	9301      	str	r3, [sp, #4]
    a6fc:	9000      	str	r0, [sp, #0]
    a6fe:	d00e      	beq.n	a71e <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x48>
    a700:	e7ff      	b.n	a702 <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x2c>
    a702:	9800      	ldr	r0, [sp, #0]
    a704:	2801      	cmp	r0, #1
    a706:	d001      	beq.n	a70c <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x36>
    a708:	e7ff      	b.n	a70a <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x34>
    a70a:	defe      	udf	#254	; 0xfe
    a70c:	2000      	movs	r0, #0
    a70e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    a712:	9904      	ldr	r1, [sp, #16]
    a714:	9108      	str	r1, [sp, #32]
    a716:	9908      	ldr	r1, [sp, #32]
    a718:	9107      	str	r1, [sp, #28]
    a71a:	9006      	str	r0, [sp, #24]
    a71c:	e005      	b.n	a72a <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x54>
    a71e:	2000      	movs	r0, #0
    a720:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    a724:	2001      	movs	r0, #1
    a726:	9006      	str	r0, [sp, #24]
    a728:	e7ff      	b.n	a72a <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x54>
    a72a:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    a72e:	07c0      	lsls	r0, r0, #31
    a730:	2800      	cmp	r0, #0
    a732:	d104      	bne.n	a73e <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x68>
    a734:	e7ff      	b.n	a736 <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x60>
    a736:	9803      	ldr	r0, [sp, #12]
    a738:	2801      	cmp	r0, #1
    a73a:	d008      	beq.n	a74e <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x78>
    a73c:	e011      	b.n	a762 <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x8c>
    a73e:	2000      	movs	r0, #0
    a740:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    a744:	e7f7      	b.n	a736 <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x60>
    a746:	9806      	ldr	r0, [sp, #24]
    a748:	9907      	ldr	r1, [sp, #28]
    a74a:	b00a      	add	sp, #40	; 0x28
    a74c:	4770      	bx	lr
    a74e:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    a752:	07c0      	lsls	r0, r0, #31
    a754:	2800      	cmp	r0, #0
    a756:	d0f6      	beq.n	a746 <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x70>
    a758:	e7ff      	b.n	a75a <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x84>
    a75a:	2000      	movs	r0, #0
    a75c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    a760:	e7f1      	b.n	a746 <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x70>
    a762:	e7f0      	b.n	a746 <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE+0x70>

0000a764 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h027105c960327d71E>:
    a764:	b081      	sub	sp, #4
    a766:	b001      	add	sp, #4
    a768:	4770      	bx	lr

0000a76a <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE>:
    a76a:	b580      	push	{r7, lr}
    a76c:	b090      	sub	sp, #64	; 0x40
    a76e:	460a      	mov	r2, r1
    a770:	4603      	mov	r3, r0
    a772:	9004      	str	r0, [sp, #16]
    a774:	9105      	str	r1, [sp, #20]
    a776:	9804      	ldr	r0, [sp, #16]
    a778:	9007      	str	r0, [sp, #28]
    a77a:	9807      	ldr	r0, [sp, #28]
    a77c:	6800      	ldr	r0, [r0, #0]
    a77e:	2800      	cmp	r0, #0
    a780:	4601      	mov	r1, r0
    a782:	bf18      	it	ne
    a784:	2101      	movne	r1, #1
    a786:	2800      	cmp	r0, #0
    a788:	9203      	str	r2, [sp, #12]
    a78a:	9302      	str	r3, [sp, #8]
    a78c:	9101      	str	r1, [sp, #4]
    a78e:	d005      	beq.n	a79c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE+0x32>
    a790:	e7ff      	b.n	a792 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE+0x28>
    a792:	9801      	ldr	r0, [sp, #4]
    a794:	2801      	cmp	r0, #1
    a796:	d012      	beq.n	a7be <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE+0x54>
    a798:	e7ff      	b.n	a79a <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE+0x30>
    a79a:	defe      	udf	#254	; 0xfe
    a79c:	9905      	ldr	r1, [sp, #20]
    a79e:	f24a 22b4 	movw	r2, #41652	; 0xa2b4
    a7a2:	f2c0 0202 	movt	r2, #2
    a7a6:	a808      	add	r0, sp, #32
    a7a8:	2304      	movs	r3, #4
    a7aa:	f003 f914 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    a7ae:	e7ff      	b.n	a7b0 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE+0x46>
    a7b0:	a808      	add	r0, sp, #32
    a7b2:	f002 fc9f 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    a7b6:	f88d 001b 	strb.w	r0, [sp, #27]
    a7ba:	e7ff      	b.n	a7bc <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE+0x52>
    a7bc:	e01e      	b.n	a7fc <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE+0x92>
    a7be:	9807      	ldr	r0, [sp, #28]
    a7c0:	900b      	str	r0, [sp, #44]	; 0x2c
    a7c2:	9905      	ldr	r1, [sp, #20]
    a7c4:	f24a 22b0 	movw	r2, #41648	; 0xa2b0
    a7c8:	f2c0 0202 	movt	r2, #2
    a7cc:	a80c      	add	r0, sp, #48	; 0x30
    a7ce:	2304      	movs	r3, #4
    a7d0:	f003 f901 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    a7d4:	e7ff      	b.n	a7d6 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE+0x6c>
    a7d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a7d8:	900f      	str	r0, [sp, #60]	; 0x3c
    a7da:	f24a 22b8 	movw	r2, #41656	; 0xa2b8
    a7de:	f2c0 0202 	movt	r2, #2
    a7e2:	a80c      	add	r0, sp, #48	; 0x30
    a7e4:	a90f      	add	r1, sp, #60	; 0x3c
    a7e6:	f002 fc10 	bl	d00a <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E>
    a7ea:	9000      	str	r0, [sp, #0]
    a7ec:	e7ff      	b.n	a7ee <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE+0x84>
    a7ee:	a80c      	add	r0, sp, #48	; 0x30
    a7f0:	f002 fc80 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    a7f4:	f88d 001b 	strb.w	r0, [sp, #27]
    a7f8:	e7ff      	b.n	a7fa <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE+0x90>
    a7fa:	e7ff      	b.n	a7fc <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h3319e719a945a50bE+0x92>
    a7fc:	f89d 001b 	ldrb.w	r0, [sp, #27]
    a800:	b010      	add	sp, #64	; 0x40
    a802:	bd80      	pop	{r7, pc}

0000a804 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h1cdb1d96882cb73bE>:
    a804:	b082      	sub	sp, #8
    a806:	2000      	movs	r0, #0
    a808:	9001      	str	r0, [sp, #4]
    a80a:	9801      	ldr	r0, [sp, #4]
    a80c:	b002      	add	sp, #8
    a80e:	4770      	bx	lr

0000a810 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hd686c3141f50ebdcE>:
    a810:	b580      	push	{r7, lr}
    a812:	b088      	sub	sp, #32
    a814:	460a      	mov	r2, r1
    a816:	4603      	mov	r3, r0
    a818:	9005      	str	r0, [sp, #20]
    a81a:	9106      	str	r1, [sp, #24]
    a81c:	9805      	ldr	r0, [sp, #20]
    a81e:	9906      	ldr	r1, [sp, #24]
    a820:	9204      	str	r2, [sp, #16]
    a822:	9303      	str	r3, [sp, #12]
    a824:	f7ff ff57 	bl	a6d6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h415e042178fbd82dE>
    a828:	9002      	str	r0, [sp, #8]
    a82a:	9101      	str	r1, [sp, #4]
    a82c:	e7ff      	b.n	a82e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hd686c3141f50ebdcE+0x1e>
    a82e:	9802      	ldr	r0, [sp, #8]
    a830:	9901      	ldr	r1, [sp, #4]
    a832:	b008      	add	sp, #32
    a834:	bd80      	pop	{r7, pc}

0000a836 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E>:
    a836:	b580      	push	{r7, lr}
    a838:	b094      	sub	sp, #80	; 0x50
    a83a:	460a      	mov	r2, r1
    a83c:	4603      	mov	r3, r0
    a83e:	9007      	str	r0, [sp, #28]
    a840:	9108      	str	r1, [sp, #32]
    a842:	9807      	ldr	r0, [sp, #28]
    a844:	6800      	ldr	r0, [r0, #0]
    a846:	2800      	cmp	r0, #0
    a848:	bf18      	it	ne
    a84a:	2001      	movne	r0, #1
    a84c:	f04f 0100 	mov.w	r1, #0
    a850:	9111      	str	r1, [sp, #68]	; 0x44
    a852:	9010      	str	r0, [sp, #64]	; 0x40
    a854:	9810      	ldr	r0, [sp, #64]	; 0x40
    a856:	9911      	ldr	r1, [sp, #68]	; 0x44
    a858:	9206      	str	r2, [sp, #24]
    a85a:	9305      	str	r3, [sp, #20]
    a85c:	9004      	str	r0, [sp, #16]
    a85e:	9103      	str	r1, [sp, #12]
    a860:	e7ff      	b.n	a862 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E+0x2c>
    a862:	9804      	ldr	r0, [sp, #16]
    a864:	900a      	str	r0, [sp, #40]	; 0x28
    a866:	9908      	ldr	r1, [sp, #32]
    a868:	6809      	ldr	r1, [r1, #0]
    a86a:	2900      	cmp	r1, #0
    a86c:	bf18      	it	ne
    a86e:	2101      	movne	r1, #1
    a870:	f04f 0200 	mov.w	r2, #0
    a874:	9213      	str	r2, [sp, #76]	; 0x4c
    a876:	9112      	str	r1, [sp, #72]	; 0x48
    a878:	9912      	ldr	r1, [sp, #72]	; 0x48
    a87a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a87c:	9102      	str	r1, [sp, #8]
    a87e:	9201      	str	r2, [sp, #4]
    a880:	e7ff      	b.n	a882 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E+0x4c>
    a882:	9802      	ldr	r0, [sp, #8]
    a884:	900b      	str	r0, [sp, #44]	; 0x2c
    a886:	990a      	ldr	r1, [sp, #40]	; 0x28
    a888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a88a:	4291      	cmp	r1, r2
    a88c:	d109      	bne.n	a8a2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E+0x6c>
    a88e:	e7ff      	b.n	a890 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E+0x5a>
    a890:	9807      	ldr	r0, [sp, #28]
    a892:	9908      	ldr	r1, [sp, #32]
    a894:	900c      	str	r0, [sp, #48]	; 0x30
    a896:	910d      	str	r1, [sp, #52]	; 0x34
    a898:	980c      	ldr	r0, [sp, #48]	; 0x30
    a89a:	6800      	ldr	r0, [r0, #0]
    a89c:	2800      	cmp	r0, #0
    a89e:	d113      	bne.n	a8c8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E+0x92>
    a8a0:	e00e      	b.n	a8c0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E+0x8a>
    a8a2:	2000      	movs	r0, #0
    a8a4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    a8a8:	e015      	b.n	a8d6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E+0xa0>
    a8aa:	980c      	ldr	r0, [sp, #48]	; 0x30
    a8ac:	900e      	str	r0, [sp, #56]	; 0x38
    a8ae:	980d      	ldr	r0, [sp, #52]	; 0x34
    a8b0:	900f      	str	r0, [sp, #60]	; 0x3c
    a8b2:	980e      	ldr	r0, [sp, #56]	; 0x38
    a8b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a8b6:	f7fe ff82 	bl	97be <_ZN4core3ptr145_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$unsafe$u20$extern$u20$$u22$C$u22$$u20$fn$LP$A$C$$u20$B$C$$u20$C$C$$u20$D$RP$$u20$.$GT$$u20$Ret$GT$2eq17h5b38778dac51aa20E>
    a8ba:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    a8be:	e008      	b.n	a8d2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E+0x9c>
    a8c0:	2001      	movs	r0, #1
    a8c2:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    a8c6:	e005      	b.n	a8d4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E+0x9e>
    a8c8:	980d      	ldr	r0, [sp, #52]	; 0x34
    a8ca:	6800      	ldr	r0, [r0, #0]
    a8cc:	2800      	cmp	r0, #0
    a8ce:	d1ec      	bne.n	a8aa <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E+0x74>
    a8d0:	e7f6      	b.n	a8c0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E+0x8a>
    a8d2:	e7ff      	b.n	a8d4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E+0x9e>
    a8d4:	e7ff      	b.n	a8d6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E+0xa0>
    a8d6:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    a8da:	b014      	add	sp, #80	; 0x50
    a8dc:	bd80      	pop	{r7, pc}

0000a8de <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E>:
    a8de:	b580      	push	{r7, lr}
    a8e0:	b094      	sub	sp, #80	; 0x50
    a8e2:	460a      	mov	r2, r1
    a8e4:	4603      	mov	r3, r0
    a8e6:	9007      	str	r0, [sp, #28]
    a8e8:	9108      	str	r1, [sp, #32]
    a8ea:	9807      	ldr	r0, [sp, #28]
    a8ec:	6800      	ldr	r0, [r0, #0]
    a8ee:	2800      	cmp	r0, #0
    a8f0:	bf18      	it	ne
    a8f2:	2001      	movne	r0, #1
    a8f4:	f04f 0100 	mov.w	r1, #0
    a8f8:	9111      	str	r1, [sp, #68]	; 0x44
    a8fa:	9010      	str	r0, [sp, #64]	; 0x40
    a8fc:	9810      	ldr	r0, [sp, #64]	; 0x40
    a8fe:	9911      	ldr	r1, [sp, #68]	; 0x44
    a900:	9206      	str	r2, [sp, #24]
    a902:	9305      	str	r3, [sp, #20]
    a904:	9004      	str	r0, [sp, #16]
    a906:	9103      	str	r1, [sp, #12]
    a908:	e7ff      	b.n	a90a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E+0x2c>
    a90a:	9804      	ldr	r0, [sp, #16]
    a90c:	900a      	str	r0, [sp, #40]	; 0x28
    a90e:	9908      	ldr	r1, [sp, #32]
    a910:	6809      	ldr	r1, [r1, #0]
    a912:	2900      	cmp	r1, #0
    a914:	bf18      	it	ne
    a916:	2101      	movne	r1, #1
    a918:	f04f 0200 	mov.w	r2, #0
    a91c:	9213      	str	r2, [sp, #76]	; 0x4c
    a91e:	9112      	str	r1, [sp, #72]	; 0x48
    a920:	9912      	ldr	r1, [sp, #72]	; 0x48
    a922:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a924:	9102      	str	r1, [sp, #8]
    a926:	9201      	str	r2, [sp, #4]
    a928:	e7ff      	b.n	a92a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E+0x4c>
    a92a:	9802      	ldr	r0, [sp, #8]
    a92c:	900b      	str	r0, [sp, #44]	; 0x2c
    a92e:	990a      	ldr	r1, [sp, #40]	; 0x28
    a930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a932:	4291      	cmp	r1, r2
    a934:	d109      	bne.n	a94a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E+0x6c>
    a936:	e7ff      	b.n	a938 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E+0x5a>
    a938:	9807      	ldr	r0, [sp, #28]
    a93a:	9908      	ldr	r1, [sp, #32]
    a93c:	900c      	str	r0, [sp, #48]	; 0x30
    a93e:	910d      	str	r1, [sp, #52]	; 0x34
    a940:	980c      	ldr	r0, [sp, #48]	; 0x30
    a942:	6800      	ldr	r0, [r0, #0]
    a944:	2800      	cmp	r0, #0
    a946:	d113      	bne.n	a970 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E+0x92>
    a948:	e00e      	b.n	a968 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E+0x8a>
    a94a:	2000      	movs	r0, #0
    a94c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    a950:	e015      	b.n	a97e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E+0xa0>
    a952:	980c      	ldr	r0, [sp, #48]	; 0x30
    a954:	900e      	str	r0, [sp, #56]	; 0x38
    a956:	980d      	ldr	r0, [sp, #52]	; 0x34
    a958:	900f      	str	r0, [sp, #60]	; 0x3c
    a95a:	980e      	ldr	r0, [sp, #56]	; 0x38
    a95c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a95e:	f000 f812 	bl	a986 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h38789eadd0c58811E>
    a962:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    a966:	e008      	b.n	a97a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E+0x9c>
    a968:	2001      	movs	r0, #1
    a96a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    a96e:	e005      	b.n	a97c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E+0x9e>
    a970:	980d      	ldr	r0, [sp, #52]	; 0x34
    a972:	6800      	ldr	r0, [r0, #0]
    a974:	2800      	cmp	r0, #0
    a976:	d1ec      	bne.n	a952 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E+0x74>
    a978:	e7f6      	b.n	a968 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E+0x8a>
    a97a:	e7ff      	b.n	a97c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E+0x9e>
    a97c:	e7ff      	b.n	a97e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E+0xa0>
    a97e:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    a982:	b014      	add	sp, #80	; 0x50
    a984:	bd80      	pop	{r7, pc}

0000a986 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h38789eadd0c58811E>:
    a986:	b580      	push	{r7, lr}
    a988:	b086      	sub	sp, #24
    a98a:	460a      	mov	r2, r1
    a98c:	4603      	mov	r3, r0
    a98e:	9004      	str	r0, [sp, #16]
    a990:	9105      	str	r1, [sp, #20]
    a992:	9804      	ldr	r0, [sp, #16]
    a994:	6800      	ldr	r0, [r0, #0]
    a996:	9905      	ldr	r1, [sp, #20]
    a998:	6809      	ldr	r1, [r1, #0]
    a99a:	9203      	str	r2, [sp, #12]
    a99c:	9302      	str	r3, [sp, #8]
    a99e:	f001 fdc3 	bl	c528 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17ha74613409c771b8aE>
    a9a2:	9001      	str	r0, [sp, #4]
    a9a4:	e7ff      	b.n	a9a6 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h38789eadd0c58811E+0x20>
    a9a6:	9801      	ldr	r0, [sp, #4]
    a9a8:	f000 0001 	and.w	r0, r0, #1
    a9ac:	b006      	add	sp, #24
    a9ae:	bd80      	pop	{r7, pc}

0000a9b0 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17haadbdd16ae4cb107E>:
    a9b0:	b580      	push	{r7, lr}
    a9b2:	b08a      	sub	sp, #40	; 0x28
    a9b4:	460a      	mov	r2, r1
    a9b6:	4603      	mov	r3, r0
    a9b8:	9004      	str	r0, [sp, #16]
    a9ba:	9105      	str	r1, [sp, #20]
    a9bc:	9804      	ldr	r0, [sp, #16]
    a9be:	9905      	ldr	r1, [sp, #20]
    a9c0:	9203      	str	r2, [sp, #12]
    a9c2:	9302      	str	r3, [sp, #8]
    a9c4:	f000 f81c 	bl	aa00 <_ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17hf4256588acad3c0eE>
    a9c8:	9001      	str	r0, [sp, #4]
    a9ca:	9100      	str	r1, [sp, #0]
    a9cc:	e7ff      	b.n	a9ce <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17haadbdd16ae4cb107E+0x1e>
    a9ce:	9801      	ldr	r0, [sp, #4]
    a9d0:	9008      	str	r0, [sp, #32]
    a9d2:	9900      	ldr	r1, [sp, #0]
    a9d4:	f001 0201 	and.w	r2, r1, #1
    a9d8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    a9dc:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    a9e0:	07d2      	lsls	r2, r2, #31
    a9e2:	2a00      	cmp	r2, #0
    a9e4:	d003      	beq.n	a9ee <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17haadbdd16ae4cb107E+0x3e>
    a9e6:	e7ff      	b.n	a9e8 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17haadbdd16ae4cb107E+0x38>
    a9e8:	2000      	movs	r0, #0
    a9ea:	9006      	str	r0, [sp, #24]
    a9ec:	e004      	b.n	a9f8 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17haadbdd16ae4cb107E+0x48>
    a9ee:	9808      	ldr	r0, [sp, #32]
    a9f0:	9007      	str	r0, [sp, #28]
    a9f2:	2001      	movs	r0, #1
    a9f4:	9006      	str	r0, [sp, #24]
    a9f6:	e7ff      	b.n	a9f8 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17haadbdd16ae4cb107E+0x48>
    a9f8:	9806      	ldr	r0, [sp, #24]
    a9fa:	9907      	ldr	r1, [sp, #28]
    a9fc:	b00a      	add	sp, #40	; 0x28
    a9fe:	bd80      	pop	{r7, pc}

0000aa00 <_ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17hf4256588acad3c0eE>:
    aa00:	b08c      	sub	sp, #48	; 0x30
    aa02:	460a      	mov	r2, r1
    aa04:	4603      	mov	r3, r0
    aa06:	9004      	str	r0, [sp, #16]
    aa08:	9105      	str	r1, [sp, #20]
    aa0a:	9804      	ldr	r0, [sp, #16]
    aa0c:	9905      	ldr	r1, [sp, #20]
    aa0e:	1840      	adds	r0, r0, r1
    aa10:	f04f 0100 	mov.w	r1, #0
    aa14:	f141 0100 	adc.w	r1, r1, #0
    aa18:	900a      	str	r0, [sp, #40]	; 0x28
    aa1a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    aa1e:	980a      	ldr	r0, [sp, #40]	; 0x28
    aa20:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
    aa24:	9203      	str	r2, [sp, #12]
    aa26:	9302      	str	r3, [sp, #8]
    aa28:	9001      	str	r0, [sp, #4]
    aa2a:	9100      	str	r1, [sp, #0]
    aa2c:	e7ff      	b.n	aa2e <_ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17hf4256588acad3c0eE+0x2e>
    aa2e:	9801      	ldr	r0, [sp, #4]
    aa30:	9008      	str	r0, [sp, #32]
    aa32:	9900      	ldr	r1, [sp, #0]
    aa34:	f001 0201 	and.w	r2, r1, #1
    aa38:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    aa3c:	9a08      	ldr	r2, [sp, #32]
    aa3e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    aa42:	9206      	str	r2, [sp, #24]
    aa44:	f88d 301c 	strb.w	r3, [sp, #28]
    aa48:	9806      	ldr	r0, [sp, #24]
    aa4a:	f89d 101c 	ldrb.w	r1, [sp, #28]
    aa4e:	b00c      	add	sp, #48	; 0x30
    aa50:	4770      	bx	lr

0000aa52 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7969d5bc878eb098E>:
    aa52:	b580      	push	{r7, lr}
    aa54:	b08a      	sub	sp, #40	; 0x28
    aa56:	460a      	mov	r2, r1
    aa58:	4603      	mov	r3, r0
    aa5a:	9004      	str	r0, [sp, #16]
    aa5c:	9105      	str	r1, [sp, #20]
    aa5e:	9804      	ldr	r0, [sp, #16]
    aa60:	9905      	ldr	r1, [sp, #20]
    aa62:	9203      	str	r2, [sp, #12]
    aa64:	9302      	str	r3, [sp, #8]
    aa66:	f000 f861 	bl	ab2c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17hca1bc4a69489c3f6E>
    aa6a:	9001      	str	r0, [sp, #4]
    aa6c:	9100      	str	r1, [sp, #0]
    aa6e:	e7ff      	b.n	aa70 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7969d5bc878eb098E+0x1e>
    aa70:	9801      	ldr	r0, [sp, #4]
    aa72:	9008      	str	r0, [sp, #32]
    aa74:	9900      	ldr	r1, [sp, #0]
    aa76:	f001 0201 	and.w	r2, r1, #1
    aa7a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    aa7e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    aa82:	07d2      	lsls	r2, r2, #31
    aa84:	2a00      	cmp	r2, #0
    aa86:	d003      	beq.n	aa90 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7969d5bc878eb098E+0x3e>
    aa88:	e7ff      	b.n	aa8a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7969d5bc878eb098E+0x38>
    aa8a:	2000      	movs	r0, #0
    aa8c:	9006      	str	r0, [sp, #24]
    aa8e:	e004      	b.n	aa9a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7969d5bc878eb098E+0x48>
    aa90:	9808      	ldr	r0, [sp, #32]
    aa92:	9007      	str	r0, [sp, #28]
    aa94:	2001      	movs	r0, #1
    aa96:	9006      	str	r0, [sp, #24]
    aa98:	e7ff      	b.n	aa9a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7969d5bc878eb098E+0x48>
    aa9a:	9806      	ldr	r0, [sp, #24]
    aa9c:	9907      	ldr	r1, [sp, #28]
    aa9e:	b00a      	add	sp, #40	; 0x28
    aaa0:	bd80      	pop	{r7, pc}

0000aaa2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h3a62c6e9b8547987E>:
    aaa2:	b580      	push	{r7, lr}
    aaa4:	b08a      	sub	sp, #40	; 0x28
    aaa6:	460a      	mov	r2, r1
    aaa8:	4603      	mov	r3, r0
    aaaa:	9004      	str	r0, [sp, #16]
    aaac:	9105      	str	r1, [sp, #20]
    aaae:	9804      	ldr	r0, [sp, #16]
    aab0:	9905      	ldr	r1, [sp, #20]
    aab2:	9203      	str	r2, [sp, #12]
    aab4:	9302      	str	r3, [sp, #8]
    aab6:	f000 f862 	bl	ab7e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17hac56863bb05a6d3dE>
    aaba:	9001      	str	r0, [sp, #4]
    aabc:	9100      	str	r1, [sp, #0]
    aabe:	e7ff      	b.n	aac0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h3a62c6e9b8547987E+0x1e>
    aac0:	9801      	ldr	r0, [sp, #4]
    aac2:	9008      	str	r0, [sp, #32]
    aac4:	9900      	ldr	r1, [sp, #0]
    aac6:	f001 0201 	and.w	r2, r1, #1
    aaca:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    aace:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    aad2:	07d2      	lsls	r2, r2, #31
    aad4:	2a00      	cmp	r2, #0
    aad6:	d003      	beq.n	aae0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h3a62c6e9b8547987E+0x3e>
    aad8:	e7ff      	b.n	aada <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h3a62c6e9b8547987E+0x38>
    aada:	2000      	movs	r0, #0
    aadc:	9006      	str	r0, [sp, #24]
    aade:	e004      	b.n	aaea <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h3a62c6e9b8547987E+0x48>
    aae0:	9808      	ldr	r0, [sp, #32]
    aae2:	9007      	str	r0, [sp, #28]
    aae4:	2001      	movs	r0, #1
    aae6:	9006      	str	r0, [sp, #24]
    aae8:	e7ff      	b.n	aaea <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h3a62c6e9b8547987E+0x48>
    aaea:	9806      	ldr	r0, [sp, #24]
    aaec:	9907      	ldr	r1, [sp, #28]
    aaee:	b00a      	add	sp, #40	; 0x28
    aaf0:	bd80      	pop	{r7, pc}

0000aaf2 <_ZN4core3num23_$LT$impl$u20$usize$GT$14saturating_mul17hacbe29afd3c85835E>:
    aaf2:	b580      	push	{r7, lr}
    aaf4:	b088      	sub	sp, #32
    aaf6:	460a      	mov	r2, r1
    aaf8:	4603      	mov	r3, r0
    aafa:	9006      	str	r0, [sp, #24]
    aafc:	9107      	str	r1, [sp, #28]
    aafe:	9806      	ldr	r0, [sp, #24]
    ab00:	9907      	ldr	r1, [sp, #28]
    ab02:	9205      	str	r2, [sp, #20]
    ab04:	9304      	str	r3, [sp, #16]
    ab06:	f7ff ffa4 	bl	aa52 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h7969d5bc878eb098E>
    ab0a:	9003      	str	r0, [sp, #12]
    ab0c:	9102      	str	r1, [sp, #8]
    ab0e:	e7ff      	b.n	ab10 <_ZN4core3num23_$LT$impl$u20$usize$GT$14saturating_mul17hacbe29afd3c85835E+0x1e>
    ab10:	f000 f860 	bl	abd4 <_ZN4core3num23_$LT$impl$u20$usize$GT$9max_value17h6da094a2bc03bf2bE>
    ab14:	9001      	str	r0, [sp, #4]
    ab16:	e7ff      	b.n	ab18 <_ZN4core3num23_$LT$impl$u20$usize$GT$14saturating_mul17hacbe29afd3c85835E+0x26>
    ab18:	9803      	ldr	r0, [sp, #12]
    ab1a:	9902      	ldr	r1, [sp, #8]
    ab1c:	9a01      	ldr	r2, [sp, #4]
    ab1e:	f001 fcb8 	bl	c492 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E>
    ab22:	9000      	str	r0, [sp, #0]
    ab24:	e7ff      	b.n	ab26 <_ZN4core3num23_$LT$impl$u20$usize$GT$14saturating_mul17hacbe29afd3c85835E+0x34>
    ab26:	9800      	ldr	r0, [sp, #0]
    ab28:	b008      	add	sp, #32
    ab2a:	bd80      	pop	{r7, pc}

0000ab2c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17hca1bc4a69489c3f6E>:
    ab2c:	b08c      	sub	sp, #48	; 0x30
    ab2e:	460a      	mov	r2, r1
    ab30:	4603      	mov	r3, r0
    ab32:	9004      	str	r0, [sp, #16]
    ab34:	9105      	str	r1, [sp, #20]
    ab36:	9804      	ldr	r0, [sp, #16]
    ab38:	9905      	ldr	r1, [sp, #20]
    ab3a:	fba0 0101 	umull	r0, r1, r0, r1
    ab3e:	2900      	cmp	r1, #0
    ab40:	bf18      	it	ne
    ab42:	2101      	movne	r1, #1
    ab44:	900a      	str	r0, [sp, #40]	; 0x28
    ab46:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    ab4a:	980a      	ldr	r0, [sp, #40]	; 0x28
    ab4c:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
    ab50:	9203      	str	r2, [sp, #12]
    ab52:	9302      	str	r3, [sp, #8]
    ab54:	9001      	str	r0, [sp, #4]
    ab56:	9100      	str	r1, [sp, #0]
    ab58:	e7ff      	b.n	ab5a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17hca1bc4a69489c3f6E+0x2e>
    ab5a:	9801      	ldr	r0, [sp, #4]
    ab5c:	9008      	str	r0, [sp, #32]
    ab5e:	9900      	ldr	r1, [sp, #0]
    ab60:	f001 0201 	and.w	r2, r1, #1
    ab64:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    ab68:	9a08      	ldr	r2, [sp, #32]
    ab6a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    ab6e:	9206      	str	r2, [sp, #24]
    ab70:	f88d 301c 	strb.w	r3, [sp, #28]
    ab74:	9806      	ldr	r0, [sp, #24]
    ab76:	f89d 101c 	ldrb.w	r1, [sp, #28]
    ab7a:	b00c      	add	sp, #48	; 0x30
    ab7c:	4770      	bx	lr

0000ab7e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17hac56863bb05a6d3dE>:
    ab7e:	b08c      	sub	sp, #48	; 0x30
    ab80:	460a      	mov	r2, r1
    ab82:	4603      	mov	r3, r0
    ab84:	9004      	str	r0, [sp, #16]
    ab86:	9105      	str	r1, [sp, #20]
    ab88:	9804      	ldr	r0, [sp, #16]
    ab8a:	9905      	ldr	r1, [sp, #20]
    ab8c:	1a40      	subs	r0, r0, r1
    ab8e:	f04f 0100 	mov.w	r1, #0
    ab92:	f141 0100 	adc.w	r1, r1, #0
    ab96:	f1c1 0101 	rsb	r1, r1, #1
    ab9a:	900a      	str	r0, [sp, #40]	; 0x28
    ab9c:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    aba0:	980a      	ldr	r0, [sp, #40]	; 0x28
    aba2:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
    aba6:	9203      	str	r2, [sp, #12]
    aba8:	9302      	str	r3, [sp, #8]
    abaa:	9001      	str	r0, [sp, #4]
    abac:	9100      	str	r1, [sp, #0]
    abae:	e7ff      	b.n	abb0 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17hac56863bb05a6d3dE+0x32>
    abb0:	9801      	ldr	r0, [sp, #4]
    abb2:	9008      	str	r0, [sp, #32]
    abb4:	9900      	ldr	r1, [sp, #0]
    abb6:	f001 0201 	and.w	r2, r1, #1
    abba:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    abbe:	9a08      	ldr	r2, [sp, #32]
    abc0:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    abc4:	9206      	str	r2, [sp, #24]
    abc6:	f88d 301c 	strb.w	r3, [sp, #28]
    abca:	9806      	ldr	r0, [sp, #24]
    abcc:	f89d 101c 	ldrb.w	r1, [sp, #28]
    abd0:	b00c      	add	sp, #48	; 0x30
    abd2:	4770      	bx	lr

0000abd4 <_ZN4core3num23_$LT$impl$u20$usize$GT$9max_value17h6da094a2bc03bf2bE>:
    abd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    abd8:	4770      	bx	lr

0000abda <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h1f992f697420e688E>:
    abda:	b510      	push	{r4, lr}
    abdc:	b08c      	sub	sp, #48	; 0x30
    abde:	4613      	mov	r3, r2
    abe0:	468c      	mov	ip, r1
    abe2:	4686      	mov	lr, r0
    abe4:	9007      	str	r0, [sp, #28]
    abe6:	9108      	str	r1, [sp, #32]
    abe8:	9209      	str	r2, [sp, #36]	; 0x24
    abea:	9807      	ldr	r0, [sp, #28]
    abec:	2100      	movs	r1, #0
    abee:	910a      	str	r1, [sp, #40]	; 0x28
    abf0:	900b      	str	r0, [sp, #44]	; 0x2c
    abf2:	9a08      	ldr	r2, [sp, #32]
    abf4:	9809      	ldr	r0, [sp, #36]	; 0x24
    abf6:	990a      	ldr	r1, [sp, #40]	; 0x28
    abf8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    abfa:	9006      	str	r0, [sp, #24]
    abfc:	4608      	mov	r0, r1
    abfe:	4621      	mov	r1, r4
    ac00:	9c06      	ldr	r4, [sp, #24]
    ac02:	9305      	str	r3, [sp, #20]
    ac04:	4623      	mov	r3, r4
    ac06:	f8cd c010 	str.w	ip, [sp, #16]
    ac0a:	f8cd e00c 	str.w	lr, [sp, #12]
    ac0e:	f000 f893 	bl	ad38 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h014fe90435385abdE>
    ac12:	9002      	str	r0, [sp, #8]
    ac14:	9101      	str	r1, [sp, #4]
    ac16:	e7ff      	b.n	ac18 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h1f992f697420e688E+0x3e>
    ac18:	9802      	ldr	r0, [sp, #8]
    ac1a:	9901      	ldr	r1, [sp, #4]
    ac1c:	b00c      	add	sp, #48	; 0x30
    ac1e:	bd10      	pop	{r4, pc}

0000ac20 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E>:
    ac20:	b580      	push	{r7, lr}
    ac22:	b08a      	sub	sp, #40	; 0x28
    ac24:	4601      	mov	r1, r0
    ac26:	9003      	str	r0, [sp, #12]
    ac28:	2000      	movs	r0, #0
    ac2a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    ac2e:	9803      	ldr	r0, [sp, #12]
    ac30:	1d02      	adds	r2, r0, #4
    ac32:	9102      	str	r1, [sp, #8]
    ac34:	4611      	mov	r1, r2
    ac36:	f001 fc88 	bl	c54a <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h0cdc1a3a06ac5935E>
    ac3a:	9001      	str	r0, [sp, #4]
    ac3c:	e7ff      	b.n	ac3e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x1e>
    ac3e:	9801      	ldr	r0, [sp, #4]
    ac40:	07c1      	lsls	r1, r0, #31
    ac42:	2900      	cmp	r1, #0
    ac44:	d023      	beq.n	ac8e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x6e>
    ac46:	e7ff      	b.n	ac48 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x28>
    ac48:	9803      	ldr	r0, [sp, #12]
    ac4a:	2101      	movs	r1, #1
    ac4c:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    ac50:	f000 fd5a 	bl	b708 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17h7d74cd408b535691E>
    ac54:	9107      	str	r1, [sp, #28]
    ac56:	9006      	str	r0, [sp, #24]
    ac58:	e7ff      	b.n	ac5a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x3a>
    ac5a:	9806      	ldr	r0, [sp, #24]
    ac5c:	2801      	cmp	r0, #1
    ac5e:	d10f      	bne.n	ac80 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x60>
    ac60:	e7ff      	b.n	ac62 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x42>
    ac62:	2000      	movs	r0, #0
    ac64:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    ac68:	9807      	ldr	r0, [sp, #28]
    ac6a:	9008      	str	r0, [sp, #32]
    ac6c:	9903      	ldr	r1, [sp, #12]
    ac6e:	a808      	add	r0, sp, #32
    ac70:	f7fd febc 	bl	89ec <_ZN4core3mem4swap17hd6a0921c9f9f5238E>
    ac74:	e7ff      	b.n	ac76 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x56>
    ac76:	9808      	ldr	r0, [sp, #32]
    ac78:	9005      	str	r0, [sp, #20]
    ac7a:	2001      	movs	r0, #1
    ac7c:	9004      	str	r0, [sp, #16]
    ac7e:	e002      	b.n	ac86 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x66>
    ac80:	2000      	movs	r0, #0
    ac82:	9004      	str	r0, [sp, #16]
    ac84:	e7ff      	b.n	ac86 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x66>
    ac86:	9806      	ldr	r0, [sp, #24]
    ac88:	2801      	cmp	r0, #1
    ac8a:	d00b      	beq.n	aca4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x84>
    ac8c:	e014      	b.n	acb8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x98>
    ac8e:	2000      	movs	r0, #0
    ac90:	9004      	str	r0, [sp, #16]
    ac92:	e7ff      	b.n	ac94 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x74>
    ac94:	9804      	ldr	r0, [sp, #16]
    ac96:	9905      	ldr	r1, [sp, #20]
    ac98:	b00a      	add	sp, #40	; 0x28
    ac9a:	bd80      	pop	{r7, pc}
    ac9c:	2000      	movs	r0, #0
    ac9e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    aca2:	e7f7      	b.n	ac94 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x74>
    aca4:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    aca8:	07c0      	lsls	r0, r0, #31
    acaa:	2800      	cmp	r0, #0
    acac:	d0f6      	beq.n	ac9c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x7c>
    acae:	e7ff      	b.n	acb0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x90>
    acb0:	2000      	movs	r0, #0
    acb2:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    acb6:	e7f1      	b.n	ac9c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x7c>
    acb8:	e7f0      	b.n	ac9c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h86f2a4e014738b32E+0x7c>

0000acba <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2709466b664fb27cE>:
    acba:	b084      	sub	sp, #16
    acbc:	460a      	mov	r2, r1
    acbe:	4603      	mov	r3, r0
    acc0:	9002      	str	r0, [sp, #8]
    acc2:	9103      	str	r1, [sp, #12]
    acc4:	9802      	ldr	r0, [sp, #8]
    acc6:	9903      	ldr	r1, [sp, #12]
    acc8:	9201      	str	r2, [sp, #4]
    acca:	9300      	str	r3, [sp, #0]
    accc:	b004      	add	sp, #16
    acce:	4770      	bx	lr

0000acd0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h612eb9cec733e365E>:
    acd0:	b084      	sub	sp, #16
    acd2:	460a      	mov	r2, r1
    acd4:	4603      	mov	r3, r0
    acd6:	9002      	str	r0, [sp, #8]
    acd8:	9103      	str	r1, [sp, #12]
    acda:	9802      	ldr	r0, [sp, #8]
    acdc:	9903      	ldr	r1, [sp, #12]
    acde:	9201      	str	r2, [sp, #4]
    ace0:	9300      	str	r3, [sp, #0]
    ace2:	b004      	add	sp, #16
    ace4:	4770      	bx	lr

0000ace6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17he345e78e5bebf816E>:
    ace6:	b5b0      	push	{r4, r5, r7, lr}
    ace8:	b08c      	sub	sp, #48	; 0x30
    acea:	469c      	mov	ip, r3
    acec:	4696      	mov	lr, r2
    acee:	460c      	mov	r4, r1
    acf0:	4605      	mov	r5, r0
    acf2:	9008      	str	r0, [sp, #32]
    acf4:	9109      	str	r1, [sp, #36]	; 0x24
    acf6:	920a      	str	r2, [sp, #40]	; 0x28
    acf8:	930b      	str	r3, [sp, #44]	; 0x2c
    acfa:	980a      	ldr	r0, [sp, #40]	; 0x28
    acfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    acfe:	f8cd c01c 	str.w	ip, [sp, #28]
    ad02:	f8cd e018 	str.w	lr, [sp, #24]
    ad06:	9405      	str	r4, [sp, #20]
    ad08:	9504      	str	r5, [sp, #16]
    ad0a:	f7fe fbf1 	bl	94f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h35bdf6245f6900b2E>
    ad0e:	9003      	str	r0, [sp, #12]
    ad10:	e7ff      	b.n	ad12 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17he345e78e5bebf816E+0x2c>
    ad12:	9908      	ldr	r1, [sp, #32]
    ad14:	9803      	ldr	r0, [sp, #12]
    ad16:	f7ff fae4 	bl	a2e2 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17he095d1e83d7c72c3E>
    ad1a:	9002      	str	r0, [sp, #8]
    ad1c:	e7ff      	b.n	ad1e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17he345e78e5bebf816E+0x38>
    ad1e:	9808      	ldr	r0, [sp, #32]
    ad20:	9909      	ldr	r1, [sp, #36]	; 0x24
    ad22:	1a09      	subs	r1, r1, r0
    ad24:	9802      	ldr	r0, [sp, #8]
    ad26:	f7fe fb8e 	bl	9446 <_ZN4core5slice18from_raw_parts_mut17h2490bf71c8902e78E>
    ad2a:	9001      	str	r0, [sp, #4]
    ad2c:	9100      	str	r1, [sp, #0]
    ad2e:	e7ff      	b.n	ad30 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17he345e78e5bebf816E+0x4a>
    ad30:	9801      	ldr	r0, [sp, #4]
    ad32:	9900      	ldr	r1, [sp, #0]
    ad34:	b00c      	add	sp, #48	; 0x30
    ad36:	bdb0      	pop	{r4, r5, r7, pc}

0000ad38 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h014fe90435385abdE>:
    ad38:	b5b0      	push	{r4, r5, r7, lr}
    ad3a:	b08e      	sub	sp, #56	; 0x38
    ad3c:	469c      	mov	ip, r3
    ad3e:	4696      	mov	lr, r2
    ad40:	460c      	mov	r4, r1
    ad42:	4605      	mov	r5, r0
    ad44:	900a      	str	r0, [sp, #40]	; 0x28
    ad46:	910b      	str	r1, [sp, #44]	; 0x2c
    ad48:	920c      	str	r2, [sp, #48]	; 0x30
    ad4a:	930d      	str	r3, [sp, #52]	; 0x34
    ad4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    ad4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ad50:	4288      	cmp	r0, r1
    ad52:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    ad56:	f8cd e020 	str.w	lr, [sp, #32]
    ad5a:	9407      	str	r4, [sp, #28]
    ad5c:	9506      	str	r5, [sp, #24]
    ad5e:	d905      	bls.n	ad6c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h014fe90435385abdE+0x34>
    ad60:	e7ff      	b.n	ad62 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h014fe90435385abdE+0x2a>
    ad62:	980a      	ldr	r0, [sp, #40]	; 0x28
    ad64:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ad66:	f001 fefd 	bl	cb64 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
    ad6a:	defe      	udf	#254	; 0xfe
    ad6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ad6e:	990c      	ldr	r1, [sp, #48]	; 0x30
    ad70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ad72:	9005      	str	r0, [sp, #20]
    ad74:	4608      	mov	r0, r1
    ad76:	4611      	mov	r1, r2
    ad78:	f7ff fb8d 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    ad7c:	9004      	str	r0, [sp, #16]
    ad7e:	e7ff      	b.n	ad80 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h014fe90435385abdE+0x48>
    ad80:	9805      	ldr	r0, [sp, #20]
    ad82:	9904      	ldr	r1, [sp, #16]
    ad84:	4288      	cmp	r0, r1
    ad86:	d90f      	bls.n	ada8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h014fe90435385abdE+0x70>
    ad88:	e7ff      	b.n	ad8a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h014fe90435385abdE+0x52>
    ad8a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ad8c:	990c      	ldr	r1, [sp, #48]	; 0x30
    ad8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ad90:	9003      	str	r0, [sp, #12]
    ad92:	4608      	mov	r0, r1
    ad94:	4611      	mov	r1, r2
    ad96:	f7ff fb7e 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    ad9a:	9002      	str	r0, [sp, #8]
    ad9c:	e7ff      	b.n	ad9e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h014fe90435385abdE+0x66>
    ad9e:	9803      	ldr	r0, [sp, #12]
    ada0:	9902      	ldr	r1, [sp, #8]
    ada2:	f001 febd 	bl	cb20 <_ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E>
    ada6:	defe      	udf	#254	; 0xfe
    ada8:	980a      	ldr	r0, [sp, #40]	; 0x28
    adaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    adac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    adae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    adb0:	f7ff ff99 	bl	ace6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17he345e78e5bebf816E>
    adb4:	9001      	str	r0, [sp, #4]
    adb6:	9100      	str	r1, [sp, #0]
    adb8:	e7ff      	b.n	adba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h014fe90435385abdE+0x82>
    adba:	9801      	ldr	r0, [sp, #4]
    adbc:	9900      	ldr	r1, [sp, #0]
    adbe:	b00e      	add	sp, #56	; 0x38
    adc0:	bdb0      	pop	{r4, r5, r7, pc}

0000adc2 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE>:
    pub fn json_set_geolocation(&mut self, key: &Strn, lat_key: &Strn, long_key: &Strn, geo: SensorValueType) {
    adc2:	b570      	push	{r4, r5, r6, lr}
    adc4:	b09a      	sub	sp, #104	; 0x68
    adc6:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
    adca:	469e      	mov	lr, r3
    adcc:	4614      	mov	r4, r2
    adce:	460d      	mov	r5, r1
    add0:	4606      	mov	r6, r0
    add2:	900a      	str	r0, [sp, #40]	; 0x28
    add4:	910b      	str	r1, [sp, #44]	; 0x2c
    add6:	920c      	str	r2, [sp, #48]	; 0x30
    add8:	930d      	str	r3, [sp, #52]	; 0x34
        if let SensorValueType::Geolocation { latitude, longitude, .. } = geo {
    adda:	f8dc 0000 	ldr.w	r0, [ip]
    adde:	2803      	cmp	r0, #3
    ade0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    ade4:	f8cd e020 	str.w	lr, [sp, #32]
    ade8:	9407      	str	r4, [sp, #28]
    adea:	9506      	str	r5, [sp, #24]
    adec:	9605      	str	r6, [sp, #20]
    adee:	d17d      	bne.n	aeec <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x12a>
    adf0:	e7ff      	b.n	adf2 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x30>
    adf2:	9809      	ldr	r0, [sp, #36]	; 0x24
    adf4:	ed90 0b02 	vldr	d0, [r0, #8]
    adf8:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
    adfc:	ed90 0b04 	vldr	d0, [r0, #16]
    ae00:	ed8d 0b10 	vstr	d0, [sp, #64]	; 0x40
            let notused = self.to_void_ptr();
    ae04:	980a      	ldr	r0, [sp, #40]	; 0x28
    ae06:	f000 fa62 	bl	b2ce <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17ha96fa3cb38da5ddbE>
    ae0a:	9012      	str	r0, [sp, #72]	; 0x48
    ae0c:	e7ff      	b.n	ae0e <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x4c>
            let encoder = unsafe { &mut sensor_coap::coap_json_encoder };
    ae0e:	f643 3070 	movw	r0, #15216	; 0x3b70
    ae12:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae16:	9013      	str	r0, [sp, #76]	; 0x4c
            let key_cstr = self.key_strn_to_cstr(key);
    ae18:	980a      	ldr	r0, [sp, #40]	; 0x28
    ae1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ae1c:	f000 f88e 	bl	af3c <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb1ff9e6d0f0e7437E>
    ae20:	9014      	str	r0, [sp, #80]	; 0x50
    ae22:	e7ff      	b.n	ae24 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x62>
            let rc = unsafe { json::json_encode_object_key(encoder, key_cstr as *mut u8) }; 
    ae24:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ae26:	9914      	ldr	r1, [sp, #80]	; 0x50
    ae28:	f004 fe46 	bl	fab8 <json_encode_object_key>
    ae2c:	9015      	str	r0, [sp, #84]	; 0x54
    ae2e:	e7ff      	b.n	ae30 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x6e>
            assert!(rc == 0);
    ae30:	9815      	ldr	r0, [sp, #84]	; 0x54
    ae32:	2800      	cmp	r0, #0
    ae34:	d007      	beq.n	ae46 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x84>
    ae36:	e7ff      	b.n	ae38 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x76>
    ae38:	f24a 300c 	movw	r0, #41740	; 0xa30c
    ae3c:	f2c0 0002 	movt	r0, #2
    ae40:	f001 fd04 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    ae44:	defe      	udf	#254	; 0xfe
            let rc = unsafe { json::json_encode_object_start(encoder) }; 
    ae46:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ae48:	f004 fe18 	bl	fa7c <json_encode_object_start>
    ae4c:	9016      	str	r0, [sp, #88]	; 0x58
    ae4e:	e7ff      	b.n	ae50 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x8e>
            assert!(rc == 0);
    ae50:	9816      	ldr	r0, [sp, #88]	; 0x58
    ae52:	2800      	cmp	r0, #0
    ae54:	d007      	beq.n	ae66 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0xa4>
    ae56:	e7ff      	b.n	ae58 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x96>
    ae58:	f24a 3024 	movw	r0, #41764	; 0xa324
    ae5c:	f2c0 0002 	movt	r0, #2
    ae60:	f001 fcf4 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    ae64:	defe      	udf	#254	; 0xfe
            let key_cstr = self.key_strn_to_cstr(lat_key);
    ae66:	980a      	ldr	r0, [sp, #40]	; 0x28
    ae68:	990c      	ldr	r1, [sp, #48]	; 0x30
    ae6a:	f000 f867 	bl	af3c <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb1ff9e6d0f0e7437E>
    ae6e:	9017      	str	r0, [sp, #92]	; 0x5c
    ae70:	e7ff      	b.n	ae72 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0xb0>
            unsafe { mynewt_rust::json_helper_set_float(notused, key_cstr, latitude as f32) };
    ae72:	9812      	ldr	r0, [sp, #72]	; 0x48
    ae74:	9917      	ldr	r1, [sp, #92]	; 0x5c
    ae76:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
    ae7a:	ec53 2b10 	vmov	r2, r3, d0
    ae7e:	9004      	str	r0, [sp, #16]
    ae80:	4610      	mov	r0, r2
    ae82:	9103      	str	r1, [sp, #12]
    ae84:	4619      	mov	r1, r3
    ae86:	f01e fd45 	bl	29914 <__aeabi_d2f>
    ae8a:	ee00 0a10 	vmov	s0, r0
    ae8e:	9804      	ldr	r0, [sp, #16]
    ae90:	9903      	ldr	r1, [sp, #12]
    ae92:	f007 ff1f 	bl	12cd4 <json_helper_set_float>
    ae96:	e7ff      	b.n	ae98 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0xd6>
            let key_cstr = self.key_strn_to_cstr(long_key);
    ae98:	980a      	ldr	r0, [sp, #40]	; 0x28
    ae9a:	990d      	ldr	r1, [sp, #52]	; 0x34
    ae9c:	f000 f84e 	bl	af3c <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb1ff9e6d0f0e7437E>
    aea0:	9018      	str	r0, [sp, #96]	; 0x60
    aea2:	e7ff      	b.n	aea4 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0xe2>
            unsafe { mynewt_rust::json_helper_set_float(notused, key_cstr, longitude as f32) };
    aea4:	9812      	ldr	r0, [sp, #72]	; 0x48
    aea6:	9918      	ldr	r1, [sp, #96]	; 0x60
    aea8:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
    aeac:	ec53 2b10 	vmov	r2, r3, d0
    aeb0:	9002      	str	r0, [sp, #8]
    aeb2:	4610      	mov	r0, r2
    aeb4:	9101      	str	r1, [sp, #4]
    aeb6:	4619      	mov	r1, r3
    aeb8:	f01e fd2c 	bl	29914 <__aeabi_d2f>
    aebc:	ee00 0a10 	vmov	s0, r0
    aec0:	9802      	ldr	r0, [sp, #8]
    aec2:	9901      	ldr	r1, [sp, #4]
    aec4:	f007 ff06 	bl	12cd4 <json_helper_set_float>
    aec8:	e7ff      	b.n	aeca <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x108>
            let rc = unsafe { json::json_encode_object_finish(encoder) }; 
    aeca:	9813      	ldr	r0, [sp, #76]	; 0x4c
    aecc:	f004 ff54 	bl	fd78 <json_encode_object_finish>
    aed0:	9019      	str	r0, [sp, #100]	; 0x64
    aed2:	e7ff      	b.n	aed4 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x112>
            assert!(rc == 0);
    aed4:	9819      	ldr	r0, [sp, #100]	; 0x64
    aed6:	2800      	cmp	r0, #0
    aed8:	d007      	beq.n	aeea <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x128>
    aeda:	e7ff      	b.n	aedc <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x11a>
    aedc:	f24a 303c 	movw	r0, #41788	; 0xa33c
    aee0:	f2c0 0002 	movt	r0, #2
    aee4:	f001 fcb2 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    aee8:	defe      	udf	#254	; 0xfe
        if let SensorValueType::Geolocation { latitude, longitude, .. } = geo {
    aeea:	e7ff      	b.n	aeec <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h5cef0a66b381353bE+0x12a>
    }
    aeec:	b01a      	add	sp, #104	; 0x68
    aeee:	bd70      	pop	{r4, r5, r6, pc}

0000aef0 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hdbc3bda942320fdcE>:
    pub fn json_set_text_string(&mut self, key: &Strn, value: &Strn) {
    aef0:	b580      	push	{r7, lr}
    aef2:	b08a      	sub	sp, #40	; 0x28
    aef4:	4613      	mov	r3, r2
    aef6:	468c      	mov	ip, r1
    aef8:	4686      	mov	lr, r0
    aefa:	9004      	str	r0, [sp, #16]
    aefc:	9105      	str	r1, [sp, #20]
    aefe:	9206      	str	r2, [sp, #24]
        let notused = self.to_void_ptr();
    af00:	9804      	ldr	r0, [sp, #16]
    af02:	9303      	str	r3, [sp, #12]
    af04:	f8cd c008 	str.w	ip, [sp, #8]
    af08:	f8cd e004 	str.w	lr, [sp, #4]
    af0c:	f000 f9df 	bl	b2ce <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17ha96fa3cb38da5ddbE>
    af10:	9007      	str	r0, [sp, #28]
    af12:	e7ff      	b.n	af14 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hdbc3bda942320fdcE+0x24>
        let key_cstr: *const u8 = self.key_strn_to_cstr(key);
    af14:	9804      	ldr	r0, [sp, #16]
    af16:	9905      	ldr	r1, [sp, #20]
    af18:	f000 f810 	bl	af3c <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb1ff9e6d0f0e7437E>
    af1c:	9008      	str	r0, [sp, #32]
    af1e:	e7ff      	b.n	af20 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hdbc3bda942320fdcE+0x30>
        let value_cstr: *const u8 = self.value_strn_to_cstr(value);
    af20:	9804      	ldr	r0, [sp, #16]
    af22:	9906      	ldr	r1, [sp, #24]
    af24:	f000 f835 	bl	af92 <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h477aa9b6d2a620eaE>
    af28:	9009      	str	r0, [sp, #36]	; 0x24
    af2a:	e7ff      	b.n	af2c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hdbc3bda942320fdcE+0x3c>
                notused,
    af2c:	9807      	ldr	r0, [sp, #28]
                key_cstr as *const c_char,
    af2e:	9908      	ldr	r1, [sp, #32]
                value_cstr as *const c_char
    af30:	9a09      	ldr	r2, [sp, #36]	; 0x24
            mynewt_rust::json_helper_set_text_string(
    af32:	f007 fee7 	bl	12d04 <json_helper_set_text_string>
    af36:	e7ff      	b.n	af38 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17hdbc3bda942320fdcE+0x48>
    }
    af38:	b00a      	add	sp, #40	; 0x28
    af3a:	bd80      	pop	{r7, pc}

0000af3c <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb1ff9e6d0f0e7437E>:
    fn key_strn_to_cstr(&mut self, key: &Strn) -> *const u8 {
    af3c:	b580      	push	{r7, lr}
    af3e:	b08a      	sub	sp, #40	; 0x28
    af40:	460a      	mov	r2, r1
    af42:	4603      	mov	r3, r0
    af44:	9004      	str	r0, [sp, #16]
    af46:	9105      	str	r1, [sp, #20]
            StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
    af48:	9805      	ldr	r0, [sp, #20]
    af4a:	7800      	ldrb	r0, [r0, #0]
    af4c:	07c1      	lsls	r1, r0, #31
    af4e:	2900      	cmp	r1, #0
    af50:	9203      	str	r2, [sp, #12]
    af52:	9302      	str	r3, [sp, #8]
    af54:	9001      	str	r0, [sp, #4]
    af56:	d006      	beq.n	af66 <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb1ff9e6d0f0e7437E+0x2a>
    af58:	e7ff      	b.n	af5a <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb1ff9e6d0f0e7437E+0x1e>
    af5a:	9801      	ldr	r0, [sp, #4]
    af5c:	b2c1      	uxtb	r1, r0
    af5e:	2901      	cmp	r1, #1
    af60:	d00e      	beq.n	af80 <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb1ff9e6d0f0e7437E+0x44>
    af62:	e7ff      	b.n	af64 <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb1ff9e6d0f0e7437E+0x28>
    }
    af64:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
    af66:	9805      	ldr	r0, [sp, #20]
    af68:	6841      	ldr	r1, [r0, #4]
    af6a:	6880      	ldr	r0, [r0, #8]
    af6c:	9107      	str	r1, [sp, #28]
    af6e:	9008      	str	r0, [sp, #32]
    af70:	9804      	ldr	r0, [sp, #16]
    af72:	9907      	ldr	r1, [sp, #28]
    af74:	9a08      	ldr	r2, [sp, #32]
    af76:	f000 f837 	bl	afe8 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE>
    af7a:	9006      	str	r0, [sp, #24]
    af7c:	e7ff      	b.n	af7e <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb1ff9e6d0f0e7437E+0x42>
        match key.rep {
    af7e:	e005      	b.n	af8c <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb1ff9e6d0f0e7437E+0x50>
            StrnRep::CStr(cstr)  => { cstr }
    af80:	9805      	ldr	r0, [sp, #20]
    af82:	6840      	ldr	r0, [r0, #4]
    af84:	9009      	str	r0, [sp, #36]	; 0x24
    af86:	9809      	ldr	r0, [sp, #36]	; 0x24
    af88:	9006      	str	r0, [sp, #24]
        match key.rep {
    af8a:	e7ff      	b.n	af8c <_ZN6mynewt8encoding12coap_context11CoapContext16key_strn_to_cstr17hb1ff9e6d0f0e7437E+0x50>
    }
    af8c:	9806      	ldr	r0, [sp, #24]
    af8e:	b00a      	add	sp, #40	; 0x28
    af90:	bd80      	pop	{r7, pc}

0000af92 <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h477aa9b6d2a620eaE>:
    fn value_strn_to_cstr(&mut self, value: &Strn) -> *const u8 {
    af92:	b580      	push	{r7, lr}
    af94:	b08a      	sub	sp, #40	; 0x28
    af96:	460a      	mov	r2, r1
    af98:	4603      	mov	r3, r0
    af9a:	9004      	str	r0, [sp, #16]
    af9c:	9105      	str	r1, [sp, #20]
            StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
    af9e:	9805      	ldr	r0, [sp, #20]
    afa0:	7800      	ldrb	r0, [r0, #0]
    afa2:	07c1      	lsls	r1, r0, #31
    afa4:	2900      	cmp	r1, #0
    afa6:	9203      	str	r2, [sp, #12]
    afa8:	9302      	str	r3, [sp, #8]
    afaa:	9001      	str	r0, [sp, #4]
    afac:	d006      	beq.n	afbc <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h477aa9b6d2a620eaE+0x2a>
    afae:	e7ff      	b.n	afb0 <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h477aa9b6d2a620eaE+0x1e>
    afb0:	9801      	ldr	r0, [sp, #4]
    afb2:	b2c1      	uxtb	r1, r0
    afb4:	2901      	cmp	r1, #1
    afb6:	d00e      	beq.n	afd6 <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h477aa9b6d2a620eaE+0x44>
    afb8:	e7ff      	b.n	afba <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h477aa9b6d2a620eaE+0x28>
    }
    afba:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
    afbc:	9805      	ldr	r0, [sp, #20]
    afbe:	6841      	ldr	r1, [r0, #4]
    afc0:	6880      	ldr	r0, [r0, #8]
    afc2:	9107      	str	r1, [sp, #28]
    afc4:	9008      	str	r0, [sp, #32]
    afc6:	9804      	ldr	r0, [sp, #16]
    afc8:	9907      	ldr	r1, [sp, #28]
    afca:	9a08      	ldr	r2, [sp, #32]
    afcc:	f000 f881 	bl	b0d2 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE>
    afd0:	9006      	str	r0, [sp, #24]
    afd2:	e7ff      	b.n	afd4 <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h477aa9b6d2a620eaE+0x42>
        match value.rep {
    afd4:	e005      	b.n	afe2 <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h477aa9b6d2a620eaE+0x50>
            StrnRep::CStr(cstr)  => { cstr }
    afd6:	9805      	ldr	r0, [sp, #20]
    afd8:	6840      	ldr	r0, [r0, #4]
    afda:	9009      	str	r0, [sp, #36]	; 0x24
    afdc:	9809      	ldr	r0, [sp, #36]	; 0x24
    afde:	9006      	str	r0, [sp, #24]
        match value.rep {
    afe0:	e7ff      	b.n	afe2 <_ZN6mynewt8encoding12coap_context11CoapContext18value_strn_to_cstr17h477aa9b6d2a620eaE+0x50>
    }
    afe2:	9806      	ldr	r0, [sp, #24]
    afe4:	b00a      	add	sp, #40	; 0x28
    afe6:	bd80      	pop	{r7, pc}

0000afe8 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE>:
    pub fn key_to_cstr(&mut self, s: &[u8]) -> *const u8 {                
    afe8:	b580      	push	{r7, lr}
    afea:	b090      	sub	sp, #64	; 0x40
    afec:	4613      	mov	r3, r2
    afee:	468c      	mov	ip, r1
    aff0:	4686      	mov	lr, r0
    aff2:	900a      	str	r0, [sp, #40]	; 0x28
    aff4:	910b      	str	r1, [sp, #44]	; 0x2c
    aff6:	920c      	str	r2, [sp, #48]	; 0x30
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
    aff8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    affa:	990c      	ldr	r1, [sp, #48]	; 0x30
    affc:	9309      	str	r3, [sp, #36]	; 0x24
    affe:	f8cd c020 	str.w	ip, [sp, #32]
    b002:	f8cd e01c 	str.w	lr, [sp, #28]
    b006:	f7fe fb3c 	bl	9682 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE>
    b00a:	900e      	str	r0, [sp, #56]	; 0x38
    b00c:	e7ff      	b.n	b00e <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0x26>
    b00e:	f24a 3158 	movw	r1, #41816	; 0xa358
    b012:	f2c0 0102 	movt	r1, #2
    b016:	a80e      	add	r0, sp, #56	; 0x38
    b018:	f7ff fc61 	bl	a8de <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E>
    b01c:	9006      	str	r0, [sp, #24]
    b01e:	e7ff      	b.n	b020 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0x38>
    b020:	9806      	ldr	r0, [sp, #24]
    b022:	07c1      	lsls	r1, r0, #31
    b024:	2900      	cmp	r1, #0
    b026:	d00a      	beq.n	b03e <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0x56>
    b028:	e7ff      	b.n	b02a <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0x42>
    b02a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b02c:	990c      	ldr	r1, [sp, #48]	; 0x30
    b02e:	f7ff fa40 	bl	a4b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd0263209417be61aE>
    b032:	900d      	str	r0, [sp, #52]	; 0x34
    b034:	e7ff      	b.n	b036 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0x4e>
    b036:	e7ff      	b.n	b038 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0x50>
    }
    b038:	980d      	ldr	r0, [sp, #52]	; 0x34
    b03a:	b010      	add	sp, #64	; 0x40
    b03c:	bd80      	pop	{r7, pc}
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
    b03e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b040:	990c      	ldr	r1, [sp, #48]	; 0x30
    b042:	f7ff fa28 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    b046:	9005      	str	r0, [sp, #20]
    b048:	e7ff      	b.n	b04a <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0x62>
    b04a:	9805      	ldr	r0, [sp, #20]
    b04c:	2820      	cmp	r0, #32
    b04e:	d307      	bcc.n	b060 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0x78>
    b050:	e7ff      	b.n	b052 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0x6a>
    b052:	f24a 3064 	movw	r0, #41828	; 0xa364
    b056:	f2c0 0002 	movt	r0, #2
    b05a:	f001 fbf7 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    b05e:	defe      	udf	#254	; 0xfe
        self.key_buffer[..s.len()].copy_from_slice(s);
    b060:	980a      	ldr	r0, [sp, #40]	; 0x28
    b062:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b064:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b066:	9004      	str	r0, [sp, #16]
    b068:	4608      	mov	r0, r1
    b06a:	4611      	mov	r1, r2
    b06c:	f7ff fa13 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    b070:	9003      	str	r0, [sp, #12]
    b072:	e7ff      	b.n	b074 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0x8c>
    b074:	9803      	ldr	r0, [sp, #12]
    b076:	900f      	str	r0, [sp, #60]	; 0x3c
    b078:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b07a:	2120      	movs	r1, #32
    b07c:	9804      	ldr	r0, [sp, #16]
    b07e:	f7fe fb3d 	bl	96fc <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc37ea63e0a33f701E>
    b082:	9002      	str	r0, [sp, #8]
    b084:	9101      	str	r1, [sp, #4]
    b086:	e7ff      	b.n	b088 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0xa0>
    b088:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b08a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b08c:	9802      	ldr	r0, [sp, #8]
    b08e:	9901      	ldr	r1, [sp, #4]
    b090:	f7fe fa38 	bl	9504 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E>
    b094:	e7ff      	b.n	b096 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0xae>
        self.key_buffer[s.len()] = 0;
    b096:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b098:	990c      	ldr	r1, [sp, #48]	; 0x30
    b09a:	f7ff f9fc 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    b09e:	9000      	str	r0, [sp, #0]
    b0a0:	e7ff      	b.n	b0a2 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0xba>
    b0a2:	9800      	ldr	r0, [sp, #0]
    b0a4:	281f      	cmp	r0, #31
    b0a6:	d80b      	bhi.n	b0c0 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0xd8>
    b0a8:	e7ff      	b.n	b0aa <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0xc2>
    b0aa:	980a      	ldr	r0, [sp, #40]	; 0x28
    b0ac:	2100      	movs	r1, #0
    b0ae:	9a00      	ldr	r2, [sp, #0]
    b0b0:	5481      	strb	r1, [r0, r2]
        self.key_buffer.as_ptr() as *const u8
    b0b2:	980a      	ldr	r0, [sp, #40]	; 0x28
    b0b4:	2120      	movs	r1, #32
    b0b6:	f7ff f9fc 	bl	a4b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd0263209417be61aE>
    b0ba:	900d      	str	r0, [sp, #52]	; 0x34
    b0bc:	e7ff      	b.n	b0be <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0xd6>
    }
    b0be:	e7bb      	b.n	b038 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17ha9bcadf10507edfaE+0x50>
        self.key_buffer[s.len()] = 0;
    b0c0:	f24a 30a8 	movw	r0, #41896	; 0xa3a8
    b0c4:	f2c0 0002 	movt	r0, #2
    b0c8:	2220      	movs	r2, #32
    b0ca:	9900      	ldr	r1, [sp, #0]
    b0cc:	f001 fbdb 	bl	c886 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
    b0d0:	defe      	udf	#254	; 0xfe

0000b0d2 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE>:
    pub fn value_to_cstr(&mut self, s: &[u8]) -> *const u8 {
    b0d2:	b580      	push	{r7, lr}
    b0d4:	b090      	sub	sp, #64	; 0x40
    b0d6:	4613      	mov	r3, r2
    b0d8:	468c      	mov	ip, r1
    b0da:	4686      	mov	lr, r0
    b0dc:	900a      	str	r0, [sp, #40]	; 0x28
    b0de:	910b      	str	r1, [sp, #44]	; 0x2c
    b0e0:	920c      	str	r2, [sp, #48]	; 0x30
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
    b0e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b0e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    b0e6:	9309      	str	r3, [sp, #36]	; 0x24
    b0e8:	f8cd c020 	str.w	ip, [sp, #32]
    b0ec:	f8cd e01c 	str.w	lr, [sp, #28]
    b0f0:	f7fe fac7 	bl	9682 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h7860d0eaff3ea09aE>
    b0f4:	900e      	str	r0, [sp, #56]	; 0x38
    b0f6:	e7ff      	b.n	b0f8 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0x26>
    b0f8:	f24a 3158 	movw	r1, #41816	; 0xa358
    b0fc:	f2c0 0102 	movt	r1, #2
    b100:	a80e      	add	r0, sp, #56	; 0x38
    b102:	f7ff fbec 	bl	a8de <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hd0c52d28a317ae89E>
    b106:	9006      	str	r0, [sp, #24]
    b108:	e7ff      	b.n	b10a <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0x38>
    b10a:	9806      	ldr	r0, [sp, #24]
    b10c:	07c1      	lsls	r1, r0, #31
    b10e:	2900      	cmp	r1, #0
    b110:	d00a      	beq.n	b128 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0x56>
    b112:	e7ff      	b.n	b114 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0x42>
    b114:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b116:	990c      	ldr	r1, [sp, #48]	; 0x30
    b118:	f7ff f9cb 	bl	a4b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd0263209417be61aE>
    b11c:	900d      	str	r0, [sp, #52]	; 0x34
    b11e:	e7ff      	b.n	b120 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0x4e>
    b120:	e7ff      	b.n	b122 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0x50>
    }
    b122:	980d      	ldr	r0, [sp, #52]	; 0x34
    b124:	b010      	add	sp, #64	; 0x40
    b126:	bd80      	pop	{r7, pc}
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
    b128:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b12a:	990c      	ldr	r1, [sp, #48]	; 0x30
    b12c:	f7ff f9b3 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    b130:	9005      	str	r0, [sp, #20]
    b132:	e7ff      	b.n	b134 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0x62>
    b134:	9805      	ldr	r0, [sp, #20]
    b136:	2820      	cmp	r0, #32
    b138:	d307      	bcc.n	b14a <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0x78>
    b13a:	e7ff      	b.n	b13c <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0x6a>
    b13c:	f24a 30c4 	movw	r0, #41924	; 0xa3c4
    b140:	f2c0 0002 	movt	r0, #2
    b144:	f001 fb82 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    b148:	defe      	udf	#254	; 0xfe
        self.value_buffer[..s.len()].copy_from_slice(s);
    b14a:	980a      	ldr	r0, [sp, #40]	; 0x28
    b14c:	3020      	adds	r0, #32
    b14e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b152:	9004      	str	r0, [sp, #16]
    b154:	4608      	mov	r0, r1
    b156:	4611      	mov	r1, r2
    b158:	f7ff f99d 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    b15c:	9003      	str	r0, [sp, #12]
    b15e:	e7ff      	b.n	b160 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0x8e>
    b160:	9803      	ldr	r0, [sp, #12]
    b162:	900f      	str	r0, [sp, #60]	; 0x3c
    b164:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b166:	2120      	movs	r1, #32
    b168:	9804      	ldr	r0, [sp, #16]
    b16a:	f7fe fac7 	bl	96fc <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc37ea63e0a33f701E>
    b16e:	9002      	str	r0, [sp, #8]
    b170:	9101      	str	r1, [sp, #4]
    b172:	e7ff      	b.n	b174 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0xa2>
    b174:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b178:	9802      	ldr	r0, [sp, #8]
    b17a:	9901      	ldr	r1, [sp, #4]
    b17c:	f7fe f9c2 	bl	9504 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hb2d038651f1372e3E>
    b180:	e7ff      	b.n	b182 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0xb0>
        self.value_buffer[s.len()] = 0;
    b182:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b184:	990c      	ldr	r1, [sp, #48]	; 0x30
    b186:	f7ff f986 	bl	a496 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h63f985867d9f263fE>
    b18a:	9000      	str	r0, [sp, #0]
    b18c:	e7ff      	b.n	b18e <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0xbc>
    b18e:	9800      	ldr	r0, [sp, #0]
    b190:	281f      	cmp	r0, #31
    b192:	d80e      	bhi.n	b1b2 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0xe0>
    b194:	e7ff      	b.n	b196 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0xc4>
    b196:	980a      	ldr	r0, [sp, #40]	; 0x28
    b198:	9900      	ldr	r1, [sp, #0]
    b19a:	4408      	add	r0, r1
    b19c:	2200      	movs	r2, #0
    b19e:	f880 2020 	strb.w	r2, [r0, #32]
        self.value_buffer.as_ptr() as *const u8
    b1a2:	980a      	ldr	r0, [sp, #40]	; 0x28
    b1a4:	3020      	adds	r0, #32
    b1a6:	2120      	movs	r1, #32
    b1a8:	f7ff f983 	bl	a4b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd0263209417be61aE>
    b1ac:	900d      	str	r0, [sp, #52]	; 0x34
    b1ae:	e7ff      	b.n	b1b0 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0xde>
    }
    b1b0:	e7b7      	b.n	b122 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17hfc1b92176b61a6eaE+0x50>
        self.value_buffer[s.len()] = 0;
    b1b2:	f24a 30dc 	movw	r0, #41948	; 0xa3dc
    b1b6:	f2c0 0002 	movt	r0, #2
    b1ba:	2220      	movs	r2, #32
    b1bc:	9900      	ldr	r1, [sp, #0]
    b1be:	f001 fb62 	bl	c886 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
    b1c2:	defe      	udf	#254	; 0xfe

0000b1c4 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h8b0f21dc333d20ccE>:
    pub fn fail(&mut self, err: CoapError) {
    b1c4:	b5b0      	push	{r4, r5, r7, lr}
    b1c6:	b0aa      	sub	sp, #168	; 0xa8
    b1c8:	460a      	mov	r2, r1
    b1ca:	4603      	mov	r3, r0
    b1cc:	900a      	str	r0, [sp, #40]	; 0x28
    b1ce:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
    b1d2:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
        assert_eq!(err, CoapError::OK, "enc fail");
    b1d6:	900c      	str	r0, [sp, #48]	; 0x30
    b1d8:	f24a 3054 	movw	r0, #41812	; 0xa354
    b1dc:	f2c0 0002 	movt	r0, #2
    b1e0:	900d      	str	r0, [sp, #52]	; 0x34
    b1e2:	980c      	ldr	r0, [sp, #48]	; 0x30
    b1e4:	900e      	str	r0, [sp, #56]	; 0x38
    b1e6:	980d      	ldr	r0, [sp, #52]	; 0x34
    b1e8:	900f      	str	r0, [sp, #60]	; 0x3c
    b1ea:	980e      	ldr	r0, [sp, #56]	; 0x38
    b1ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b1ee:	9209      	str	r2, [sp, #36]	; 0x24
    b1f0:	9308      	str	r3, [sp, #32]
    b1f2:	f000 f88d 	bl	b310 <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17hfbfa9cff7b1b3822E>
    b1f6:	9007      	str	r0, [sp, #28]
    b1f8:	e7ff      	b.n	b1fa <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h8b0f21dc333d20ccE+0x36>
    b1fa:	9807      	ldr	r0, [sp, #28]
    b1fc:	07c1      	lsls	r1, r0, #31
    b1fe:	2900      	cmp	r1, #0
    b200:	d163      	bne.n	b2ca <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h8b0f21dc333d20ccE+0x106>
    b202:	e7ff      	b.n	b204 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h8b0f21dc333d20ccE+0x40>
    b204:	980e      	ldr	r0, [sp, #56]	; 0x38
    b206:	901f      	str	r0, [sp, #124]	; 0x7c
    b208:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b20a:	9020      	str	r0, [sp, #128]	; 0x80
    b20c:	4668      	mov	r0, sp
    b20e:	2100      	movs	r1, #0
    b210:	6001      	str	r1, [r0, #0]
    b212:	f24a 4148 	movw	r1, #42056	; 0xa448
    b216:	f2c0 0102 	movt	r1, #2
    b21a:	f24a 4350 	movw	r3, #42064	; 0xa450
    b21e:	f2c0 0302 	movt	r3, #2
    b222:	a821      	add	r0, sp, #132	; 0x84
    b224:	2201      	movs	r2, #1
    b226:	f7fd fc6d 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    b22a:	e7ff      	b.n	b22c <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h8b0f21dc333d20ccE+0x68>
    b22c:	a81f      	add	r0, sp, #124	; 0x7c
    b22e:	901c      	str	r0, [sp, #112]	; 0x70
    b230:	a820      	add	r0, sp, #128	; 0x80
    b232:	901d      	str	r0, [sp, #116]	; 0x74
    b234:	a821      	add	r0, sp, #132	; 0x84
    b236:	901e      	str	r0, [sp, #120]	; 0x78
    b238:	981c      	ldr	r0, [sp, #112]	; 0x70
    b23a:	9027      	str	r0, [sp, #156]	; 0x9c
    b23c:	981d      	ldr	r0, [sp, #116]	; 0x74
    b23e:	9028      	str	r0, [sp, #160]	; 0xa0
    b240:	981e      	ldr	r0, [sp, #120]	; 0x78
    b242:	9029      	str	r0, [sp, #164]	; 0xa4
    b244:	9827      	ldr	r0, [sp, #156]	; 0x9c
    b246:	f24c 21b5 	movw	r1, #49845	; 0xc2b5
    b24a:	f2c0 0100 	movt	r1, #0
    b24e:	f000 f99d 	bl	b58c <_ZN4core3fmt10ArgumentV13new17h84b2efbc7ba28e82E>
    b252:	9006      	str	r0, [sp, #24]
    b254:	9105      	str	r1, [sp, #20]
    b256:	e7ff      	b.n	b258 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h8b0f21dc333d20ccE+0x94>
    b258:	9828      	ldr	r0, [sp, #160]	; 0xa0
    b25a:	f24c 21b5 	movw	r1, #49845	; 0xc2b5
    b25e:	f2c0 0100 	movt	r1, #0
    b262:	f000 f993 	bl	b58c <_ZN4core3fmt10ArgumentV13new17h84b2efbc7ba28e82E>
    b266:	9004      	str	r0, [sp, #16]
    b268:	9103      	str	r1, [sp, #12]
    b26a:	e7ff      	b.n	b26c <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h8b0f21dc333d20ccE+0xa8>
    b26c:	9829      	ldr	r0, [sp, #164]	; 0xa4
    b26e:	f24d 2143 	movw	r1, #53827	; 0xd243
    b272:	f2c0 0100 	movt	r1, #0
    b276:	f000 f970 	bl	b55a <_ZN4core3fmt10ArgumentV13new17h77e41a362c8b7a28E>
    b27a:	9002      	str	r0, [sp, #8]
    b27c:	9101      	str	r1, [sp, #4]
    b27e:	e7ff      	b.n	b280 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h8b0f21dc333d20ccE+0xbc>
    b280:	9806      	ldr	r0, [sp, #24]
    b282:	9016      	str	r0, [sp, #88]	; 0x58
    b284:	9905      	ldr	r1, [sp, #20]
    b286:	9117      	str	r1, [sp, #92]	; 0x5c
    b288:	9a04      	ldr	r2, [sp, #16]
    b28a:	9218      	str	r2, [sp, #96]	; 0x60
    b28c:	9b03      	ldr	r3, [sp, #12]
    b28e:	9319      	str	r3, [sp, #100]	; 0x64
    b290:	f8dd c008 	ldr.w	ip, [sp, #8]
    b294:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
    b298:	f8dd e004 	ldr.w	lr, [sp, #4]
    b29c:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
    b2a0:	466c      	mov	r4, sp
    b2a2:	2503      	movs	r5, #3
    b2a4:	6025      	str	r5, [r4, #0]
    b2a6:	f24a 4128 	movw	r1, #42024	; 0xa428
    b2aa:	f2c0 0102 	movt	r1, #2
    b2ae:	a810      	add	r0, sp, #64	; 0x40
    b2b0:	ab16      	add	r3, sp, #88	; 0x58
    b2b2:	462a      	mov	r2, r5
    b2b4:	f7fd fc26 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    b2b8:	e7ff      	b.n	b2ba <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h8b0f21dc333d20ccE+0xf6>
    b2ba:	f24a 4150 	movw	r1, #42064	; 0xa450
    b2be:	f2c0 0102 	movt	r1, #2
    b2c2:	a810      	add	r0, sp, #64	; 0x40
    b2c4:	f001 faff 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    b2c8:	defe      	udf	#254	; 0xfe
    }
    b2ca:	b02a      	add	sp, #168	; 0xa8
    b2cc:	bdb0      	pop	{r4, r5, r7, pc}

0000b2ce <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17ha96fa3cb38da5ddbE>:
    pub fn to_void_ptr(&mut self) -> *mut c_void {
    b2ce:	b083      	sub	sp, #12
    b2d0:	4601      	mov	r1, r0
    b2d2:	9001      	str	r0, [sp, #4]
        let ptr: *mut CoapContext = self;
    b2d4:	9801      	ldr	r0, [sp, #4]
    b2d6:	9002      	str	r0, [sp, #8]
        ptr as *mut c_void
    b2d8:	9802      	ldr	r0, [sp, #8]
    }
    b2da:	9100      	str	r1, [sp, #0]
    b2dc:	b003      	add	sp, #12
    b2de:	4770      	bx	lr

0000b2e0 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h86d9940d247021b8E>:
    fn to_bytes_optional_nul(&self) -> &[u8] {
    b2e0:	b08a      	sub	sp, #40	; 0x28
    b2e2:	460a      	mov	r2, r1
    b2e4:	4603      	mov	r3, r0
    b2e6:	9004      	str	r0, [sp, #16]
    b2e8:	9105      	str	r1, [sp, #20]
        self.as_bytes()
    b2ea:	9804      	ldr	r0, [sp, #16]
    b2ec:	9905      	ldr	r1, [sp, #20]
    b2ee:	9006      	str	r0, [sp, #24]
    b2f0:	9107      	str	r1, [sp, #28]
    b2f2:	9806      	ldr	r0, [sp, #24]
    b2f4:	9907      	ldr	r1, [sp, #28]
    b2f6:	9008      	str	r0, [sp, #32]
    b2f8:	9109      	str	r1, [sp, #36]	; 0x24
    b2fa:	9808      	ldr	r0, [sp, #32]
    b2fc:	9909      	ldr	r1, [sp, #36]	; 0x24
    b2fe:	9203      	str	r2, [sp, #12]
    b300:	9302      	str	r3, [sp, #8]
    b302:	9001      	str	r0, [sp, #4]
    b304:	9100      	str	r1, [sp, #0]
    b306:	e7ff      	b.n	b308 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h86d9940d247021b8E+0x28>
    }
    b308:	9801      	ldr	r0, [sp, #4]
    b30a:	9900      	ldr	r1, [sp, #0]
    b30c:	b00a      	add	sp, #40	; 0x28
    b30e:	4770      	bx	lr

0000b310 <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17hfbfa9cff7b1b3822E>:
#[derive(Debug, PartialEq)]
    b310:	b092      	sub	sp, #72	; 0x48
    b312:	460a      	mov	r2, r1
    b314:	4603      	mov	r3, r0
    b316:	9007      	str	r0, [sp, #28]
    b318:	9108      	str	r1, [sp, #32]
    b31a:	9807      	ldr	r0, [sp, #28]
    b31c:	7800      	ldrb	r0, [r0, #0]
    b31e:	2100      	movs	r1, #0
    b320:	910f      	str	r1, [sp, #60]	; 0x3c
    b322:	900e      	str	r0, [sp, #56]	; 0x38
    b324:	980e      	ldr	r0, [sp, #56]	; 0x38
    b326:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b328:	9206      	str	r2, [sp, #24]
    b32a:	9305      	str	r3, [sp, #20]
    b32c:	9004      	str	r0, [sp, #16]
    b32e:	9103      	str	r1, [sp, #12]
    b330:	e7ff      	b.n	b332 <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17hfbfa9cff7b1b3822E+0x22>
    b332:	9804      	ldr	r0, [sp, #16]
    b334:	900a      	str	r0, [sp, #40]	; 0x28
    b336:	9908      	ldr	r1, [sp, #32]
    b338:	7809      	ldrb	r1, [r1, #0]
    b33a:	2200      	movs	r2, #0
    b33c:	9211      	str	r2, [sp, #68]	; 0x44
    b33e:	9110      	str	r1, [sp, #64]	; 0x40
    b340:	9910      	ldr	r1, [sp, #64]	; 0x40
    b342:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b344:	9102      	str	r1, [sp, #8]
    b346:	9201      	str	r2, [sp, #4]
    b348:	e7ff      	b.n	b34a <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17hfbfa9cff7b1b3822E+0x3a>
    b34a:	9802      	ldr	r0, [sp, #8]
    b34c:	900b      	str	r0, [sp, #44]	; 0x2c
    b34e:	990a      	ldr	r1, [sp, #40]	; 0x28
    b350:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b352:	4291      	cmp	r1, r2
    b354:	d108      	bne.n	b368 <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17hfbfa9cff7b1b3822E+0x58>
    b356:	e7ff      	b.n	b358 <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17hfbfa9cff7b1b3822E+0x48>
    b358:	9807      	ldr	r0, [sp, #28]
    b35a:	9908      	ldr	r1, [sp, #32]
    b35c:	900c      	str	r0, [sp, #48]	; 0x30
    b35e:	910d      	str	r1, [sp, #52]	; 0x34
    b360:	2001      	movs	r0, #1
    b362:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    b366:	e003      	b.n	b370 <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17hfbfa9cff7b1b3822E+0x60>
    b368:	2000      	movs	r0, #0
    b36a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    b36e:	e7ff      	b.n	b370 <_ZN82_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..cmp..PartialEq$GT$2eq17hfbfa9cff7b1b3822E+0x60>
    b370:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    b374:	b012      	add	sp, #72	; 0x48
    b376:	4770      	bx	lr

0000b378 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17he002753e56cbb7faE>:
    b378:	b580      	push	{r7, lr}
    b37a:	b08e      	sub	sp, #56	; 0x38
    b37c:	460a      	mov	r2, r1
    b37e:	4603      	mov	r3, r0
    b380:	9004      	str	r0, [sp, #16]
    b382:	9105      	str	r1, [sp, #20]
    b384:	9804      	ldr	r0, [sp, #16]
    b386:	9007      	str	r0, [sp, #28]
    b388:	9807      	ldr	r0, [sp, #28]
    b38a:	7800      	ldrb	r0, [r0, #0]
    b38c:	07c1      	lsls	r1, r0, #31
    b38e:	2900      	cmp	r1, #0
    b390:	9203      	str	r2, [sp, #12]
    b392:	9302      	str	r3, [sp, #8]
    b394:	9001      	str	r0, [sp, #4]
    b396:	d005      	beq.n	b3a4 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17he002753e56cbb7faE+0x2c>
    b398:	e7ff      	b.n	b39a <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17he002753e56cbb7faE+0x22>
    b39a:	9801      	ldr	r0, [sp, #4]
    b39c:	2801      	cmp	r0, #1
    b39e:	d012      	beq.n	b3c6 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17he002753e56cbb7faE+0x4e>
    b3a0:	e7ff      	b.n	b3a2 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17he002753e56cbb7faE+0x2a>
    b3a2:	defe      	udf	#254	; 0xfe
    b3a4:	9905      	ldr	r1, [sp, #20]
    b3a6:	f24a 426e 	movw	r2, #42094	; 0xa46e
    b3aa:	f2c0 0202 	movt	r2, #2
    b3ae:	a808      	add	r0, sp, #32
    b3b0:	2302      	movs	r3, #2
    b3b2:	f002 fb10 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    b3b6:	e7ff      	b.n	b3b8 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17he002753e56cbb7faE+0x40>
    b3b8:	a808      	add	r0, sp, #32
    b3ba:	f001 fe9b 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    b3be:	f88d 001b 	strb.w	r0, [sp, #27]
    b3c2:	e7ff      	b.n	b3c4 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17he002753e56cbb7faE+0x4c>
    b3c4:	e010      	b.n	b3e8 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17he002753e56cbb7faE+0x70>
    b3c6:	9905      	ldr	r1, [sp, #20]
    b3c8:	f24a 4260 	movw	r2, #42080	; 0xa460
    b3cc:	f2c0 0202 	movt	r2, #2
    b3d0:	a80b      	add	r0, sp, #44	; 0x2c
    b3d2:	230e      	movs	r3, #14
    b3d4:	f002 faff 	bl	d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
    b3d8:	e7ff      	b.n	b3da <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17he002753e56cbb7faE+0x62>
    b3da:	a80b      	add	r0, sp, #44	; 0x2c
    b3dc:	f001 fe8a 	bl	d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
    b3e0:	f88d 001b 	strb.w	r0, [sp, #27]
    b3e4:	e7ff      	b.n	b3e6 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17he002753e56cbb7faE+0x6e>
    b3e6:	e7ff      	b.n	b3e8 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17he002753e56cbb7faE+0x70>
    b3e8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    b3ec:	b00e      	add	sp, #56	; 0x38
    b3ee:	bd80      	pop	{r7, pc}

0000b3f0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0eeec053ec2ee72cE>:
    b3f0:	b580      	push	{r7, lr}
    b3f2:	b086      	sub	sp, #24
    b3f4:	460a      	mov	r2, r1
    b3f6:	4603      	mov	r3, r0
    b3f8:	9004      	str	r0, [sp, #16]
    b3fa:	9105      	str	r1, [sp, #20]
    b3fc:	9804      	ldr	r0, [sp, #16]
    b3fe:	6800      	ldr	r0, [r0, #0]
    b400:	9905      	ldr	r1, [sp, #20]
    b402:	9203      	str	r2, [sp, #12]
    b404:	9302      	str	r3, [sp, #8]
    b406:	f001 f939 	bl	c67c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE>
    b40a:	9001      	str	r0, [sp, #4]
    b40c:	e7ff      	b.n	b40e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0eeec053ec2ee72cE+0x1e>
    b40e:	9801      	ldr	r0, [sp, #4]
    b410:	f000 0001 	and.w	r0, r0, #1
    b414:	b006      	add	sp, #24
    b416:	bd80      	pop	{r7, pc}

0000b418 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2367f9954f2505edE>:
    b418:	b580      	push	{r7, lr}
    b41a:	b086      	sub	sp, #24
    b41c:	460a      	mov	r2, r1
    b41e:	4603      	mov	r3, r0
    b420:	9004      	str	r0, [sp, #16]
    b422:	9105      	str	r1, [sp, #20]
    b424:	9804      	ldr	r0, [sp, #16]
    b426:	6800      	ldr	r0, [r0, #0]
    b428:	9905      	ldr	r1, [sp, #20]
    b42a:	9203      	str	r2, [sp, #12]
    b42c:	9302      	str	r3, [sp, #8]
    b42e:	f000 f81b 	bl	b468 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h693fa46abaaed1e2E>
    b432:	9001      	str	r0, [sp, #4]
    b434:	e7ff      	b.n	b436 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2367f9954f2505edE+0x1e>
    b436:	9801      	ldr	r0, [sp, #4]
    b438:	f000 0001 	and.w	r0, r0, #1
    b43c:	b006      	add	sp, #24
    b43e:	bd80      	pop	{r7, pc}

0000b440 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2a30ce0f4e55b06fE>:
    b440:	b580      	push	{r7, lr}
    b442:	b086      	sub	sp, #24
    b444:	460a      	mov	r2, r1
    b446:	4603      	mov	r3, r0
    b448:	9004      	str	r0, [sp, #16]
    b44a:	9105      	str	r1, [sp, #20]
    b44c:	9804      	ldr	r0, [sp, #16]
    b44e:	6800      	ldr	r0, [r0, #0]
    b450:	9905      	ldr	r1, [sp, #20]
    b452:	9203      	str	r2, [sp, #12]
    b454:	9302      	str	r3, [sp, #8]
    b456:	f001 f8d8 	bl	c60a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E>
    b45a:	9001      	str	r0, [sp, #4]
    b45c:	e7ff      	b.n	b45e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2a30ce0f4e55b06fE+0x1e>
    b45e:	9801      	ldr	r0, [sp, #4]
    b460:	f000 0001 	and.w	r0, r0, #1
    b464:	b006      	add	sp, #24
    b466:	bd80      	pop	{r7, pc}

0000b468 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h693fa46abaaed1e2E>:
    b468:	b580      	push	{r7, lr}
    b46a:	b086      	sub	sp, #24
    b46c:	460a      	mov	r2, r1
    b46e:	4603      	mov	r3, r0
    b470:	9004      	str	r0, [sp, #16]
    b472:	9105      	str	r1, [sp, #20]
    b474:	9804      	ldr	r0, [sp, #16]
    b476:	6800      	ldr	r0, [r0, #0]
    b478:	9905      	ldr	r1, [sp, #20]
    b47a:	9203      	str	r2, [sp, #12]
    b47c:	9302      	str	r3, [sp, #8]
    b47e:	f001 f88b 	bl	c598 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE>
    b482:	9001      	str	r0, [sp, #4]
    b484:	e7ff      	b.n	b486 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h693fa46abaaed1e2E+0x1e>
    b486:	9801      	ldr	r0, [sp, #4]
    b488:	f000 0001 	and.w	r0, r0, #1
    b48c:	b006      	add	sp, #24
    b48e:	bd80      	pop	{r7, pc}

0000b490 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h6bf6324cbd122d1aE>:
    b490:	b580      	push	{r7, lr}
    b492:	b086      	sub	sp, #24
    b494:	460a      	mov	r2, r1
    b496:	4603      	mov	r3, r0
    b498:	9004      	str	r0, [sp, #16]
    b49a:	9105      	str	r1, [sp, #20]
    b49c:	9804      	ldr	r0, [sp, #16]
    b49e:	6801      	ldr	r1, [r0, #0]
    b4a0:	6840      	ldr	r0, [r0, #4]
    b4a2:	f8dd c014 	ldr.w	ip, [sp, #20]
    b4a6:	9003      	str	r0, [sp, #12]
    b4a8:	4608      	mov	r0, r1
    b4aa:	9903      	ldr	r1, [sp, #12]
    b4ac:	9202      	str	r2, [sp, #8]
    b4ae:	4662      	mov	r2, ip
    b4b0:	9301      	str	r3, [sp, #4]
    b4b2:	f002 faa3 	bl	d9fc <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h3a34938e29ce59dcE>
    b4b6:	9000      	str	r0, [sp, #0]
    b4b8:	e7ff      	b.n	b4ba <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h6bf6324cbd122d1aE+0x2a>
    b4ba:	9800      	ldr	r0, [sp, #0]
    b4bc:	f000 0001 	and.w	r0, r0, #1
    b4c0:	b006      	add	sp, #24
    b4c2:	bd80      	pop	{r7, pc}

0000b4c4 <_ZN4core3fmt10ArgumentV13new17h096de7e29d61d94fE>:
    b4c4:	b08a      	sub	sp, #40	; 0x28
    b4c6:	460a      	mov	r2, r1
    b4c8:	4603      	mov	r3, r0
    b4ca:	9004      	str	r0, [sp, #16]
    b4cc:	9105      	str	r1, [sp, #20]
    b4ce:	9805      	ldr	r0, [sp, #20]
    b4d0:	9008      	str	r0, [sp, #32]
    b4d2:	9808      	ldr	r0, [sp, #32]
    b4d4:	9203      	str	r2, [sp, #12]
    b4d6:	9302      	str	r3, [sp, #8]
    b4d8:	9001      	str	r0, [sp, #4]
    b4da:	e7ff      	b.n	b4dc <_ZN4core3fmt10ArgumentV13new17h096de7e29d61d94fE+0x18>
    b4dc:	9804      	ldr	r0, [sp, #16]
    b4de:	9009      	str	r0, [sp, #36]	; 0x24
    b4e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    b4e2:	9000      	str	r0, [sp, #0]
    b4e4:	e7ff      	b.n	b4e6 <_ZN4core3fmt10ArgumentV13new17h096de7e29d61d94fE+0x22>
    b4e6:	9800      	ldr	r0, [sp, #0]
    b4e8:	9006      	str	r0, [sp, #24]
    b4ea:	9901      	ldr	r1, [sp, #4]
    b4ec:	9107      	str	r1, [sp, #28]
    b4ee:	9806      	ldr	r0, [sp, #24]
    b4f0:	9907      	ldr	r1, [sp, #28]
    b4f2:	b00a      	add	sp, #40	; 0x28
    b4f4:	4770      	bx	lr

0000b4f6 <_ZN4core3fmt10ArgumentV13new17h1e15870702cd8f35E>:
    b4f6:	b08a      	sub	sp, #40	; 0x28
    b4f8:	460a      	mov	r2, r1
    b4fa:	4603      	mov	r3, r0
    b4fc:	9004      	str	r0, [sp, #16]
    b4fe:	9105      	str	r1, [sp, #20]
    b500:	9805      	ldr	r0, [sp, #20]
    b502:	9008      	str	r0, [sp, #32]
    b504:	9808      	ldr	r0, [sp, #32]
    b506:	9203      	str	r2, [sp, #12]
    b508:	9302      	str	r3, [sp, #8]
    b50a:	9001      	str	r0, [sp, #4]
    b50c:	e7ff      	b.n	b50e <_ZN4core3fmt10ArgumentV13new17h1e15870702cd8f35E+0x18>
    b50e:	9804      	ldr	r0, [sp, #16]
    b510:	9009      	str	r0, [sp, #36]	; 0x24
    b512:	9809      	ldr	r0, [sp, #36]	; 0x24
    b514:	9000      	str	r0, [sp, #0]
    b516:	e7ff      	b.n	b518 <_ZN4core3fmt10ArgumentV13new17h1e15870702cd8f35E+0x22>
    b518:	9800      	ldr	r0, [sp, #0]
    b51a:	9006      	str	r0, [sp, #24]
    b51c:	9901      	ldr	r1, [sp, #4]
    b51e:	9107      	str	r1, [sp, #28]
    b520:	9806      	ldr	r0, [sp, #24]
    b522:	9907      	ldr	r1, [sp, #28]
    b524:	b00a      	add	sp, #40	; 0x28
    b526:	4770      	bx	lr

0000b528 <_ZN4core3fmt10ArgumentV13new17h2a8f18ee4916d0d4E>:
    b528:	b08a      	sub	sp, #40	; 0x28
    b52a:	460a      	mov	r2, r1
    b52c:	4603      	mov	r3, r0
    b52e:	9004      	str	r0, [sp, #16]
    b530:	9105      	str	r1, [sp, #20]
    b532:	9805      	ldr	r0, [sp, #20]
    b534:	9008      	str	r0, [sp, #32]
    b536:	9808      	ldr	r0, [sp, #32]
    b538:	9203      	str	r2, [sp, #12]
    b53a:	9302      	str	r3, [sp, #8]
    b53c:	9001      	str	r0, [sp, #4]
    b53e:	e7ff      	b.n	b540 <_ZN4core3fmt10ArgumentV13new17h2a8f18ee4916d0d4E+0x18>
    b540:	9804      	ldr	r0, [sp, #16]
    b542:	9009      	str	r0, [sp, #36]	; 0x24
    b544:	9809      	ldr	r0, [sp, #36]	; 0x24
    b546:	9000      	str	r0, [sp, #0]
    b548:	e7ff      	b.n	b54a <_ZN4core3fmt10ArgumentV13new17h2a8f18ee4916d0d4E+0x22>
    b54a:	9800      	ldr	r0, [sp, #0]
    b54c:	9006      	str	r0, [sp, #24]
    b54e:	9901      	ldr	r1, [sp, #4]
    b550:	9107      	str	r1, [sp, #28]
    b552:	9806      	ldr	r0, [sp, #24]
    b554:	9907      	ldr	r1, [sp, #28]
    b556:	b00a      	add	sp, #40	; 0x28
    b558:	4770      	bx	lr

0000b55a <_ZN4core3fmt10ArgumentV13new17h77e41a362c8b7a28E>:
    b55a:	b08a      	sub	sp, #40	; 0x28
    b55c:	460a      	mov	r2, r1
    b55e:	4603      	mov	r3, r0
    b560:	9004      	str	r0, [sp, #16]
    b562:	9105      	str	r1, [sp, #20]
    b564:	9805      	ldr	r0, [sp, #20]
    b566:	9008      	str	r0, [sp, #32]
    b568:	9808      	ldr	r0, [sp, #32]
    b56a:	9203      	str	r2, [sp, #12]
    b56c:	9302      	str	r3, [sp, #8]
    b56e:	9001      	str	r0, [sp, #4]
    b570:	e7ff      	b.n	b572 <_ZN4core3fmt10ArgumentV13new17h77e41a362c8b7a28E+0x18>
    b572:	9804      	ldr	r0, [sp, #16]
    b574:	9009      	str	r0, [sp, #36]	; 0x24
    b576:	9809      	ldr	r0, [sp, #36]	; 0x24
    b578:	9000      	str	r0, [sp, #0]
    b57a:	e7ff      	b.n	b57c <_ZN4core3fmt10ArgumentV13new17h77e41a362c8b7a28E+0x22>
    b57c:	9800      	ldr	r0, [sp, #0]
    b57e:	9006      	str	r0, [sp, #24]
    b580:	9901      	ldr	r1, [sp, #4]
    b582:	9107      	str	r1, [sp, #28]
    b584:	9806      	ldr	r0, [sp, #24]
    b586:	9907      	ldr	r1, [sp, #28]
    b588:	b00a      	add	sp, #40	; 0x28
    b58a:	4770      	bx	lr

0000b58c <_ZN4core3fmt10ArgumentV13new17h84b2efbc7ba28e82E>:
    b58c:	b08a      	sub	sp, #40	; 0x28
    b58e:	460a      	mov	r2, r1
    b590:	4603      	mov	r3, r0
    b592:	9004      	str	r0, [sp, #16]
    b594:	9105      	str	r1, [sp, #20]
    b596:	9805      	ldr	r0, [sp, #20]
    b598:	9008      	str	r0, [sp, #32]
    b59a:	9808      	ldr	r0, [sp, #32]
    b59c:	9203      	str	r2, [sp, #12]
    b59e:	9302      	str	r3, [sp, #8]
    b5a0:	9001      	str	r0, [sp, #4]
    b5a2:	e7ff      	b.n	b5a4 <_ZN4core3fmt10ArgumentV13new17h84b2efbc7ba28e82E+0x18>
    b5a4:	9804      	ldr	r0, [sp, #16]
    b5a6:	9009      	str	r0, [sp, #36]	; 0x24
    b5a8:	9809      	ldr	r0, [sp, #36]	; 0x24
    b5aa:	9000      	str	r0, [sp, #0]
    b5ac:	e7ff      	b.n	b5ae <_ZN4core3fmt10ArgumentV13new17h84b2efbc7ba28e82E+0x22>
    b5ae:	9800      	ldr	r0, [sp, #0]
    b5b0:	9006      	str	r0, [sp, #24]
    b5b2:	9901      	ldr	r1, [sp, #4]
    b5b4:	9107      	str	r1, [sp, #28]
    b5b6:	9806      	ldr	r0, [sp, #24]
    b5b8:	9907      	ldr	r1, [sp, #28]
    b5ba:	b00a      	add	sp, #40	; 0x28
    b5bc:	4770      	bx	lr

0000b5be <_ZN4core3fmt10ArgumentV13new17h963f5691124f9a6eE>:
    b5be:	b08a      	sub	sp, #40	; 0x28
    b5c0:	460a      	mov	r2, r1
    b5c2:	4603      	mov	r3, r0
    b5c4:	9004      	str	r0, [sp, #16]
    b5c6:	9105      	str	r1, [sp, #20]
    b5c8:	9805      	ldr	r0, [sp, #20]
    b5ca:	9008      	str	r0, [sp, #32]
    b5cc:	9808      	ldr	r0, [sp, #32]
    b5ce:	9203      	str	r2, [sp, #12]
    b5d0:	9302      	str	r3, [sp, #8]
    b5d2:	9001      	str	r0, [sp, #4]
    b5d4:	e7ff      	b.n	b5d6 <_ZN4core3fmt10ArgumentV13new17h963f5691124f9a6eE+0x18>
    b5d6:	9804      	ldr	r0, [sp, #16]
    b5d8:	9009      	str	r0, [sp, #36]	; 0x24
    b5da:	9809      	ldr	r0, [sp, #36]	; 0x24
    b5dc:	9000      	str	r0, [sp, #0]
    b5de:	e7ff      	b.n	b5e0 <_ZN4core3fmt10ArgumentV13new17h963f5691124f9a6eE+0x22>
    b5e0:	9800      	ldr	r0, [sp, #0]
    b5e2:	9006      	str	r0, [sp, #24]
    b5e4:	9901      	ldr	r1, [sp, #4]
    b5e6:	9107      	str	r1, [sp, #28]
    b5e8:	9806      	ldr	r0, [sp, #24]
    b5ea:	9907      	ldr	r1, [sp, #28]
    b5ec:	b00a      	add	sp, #40	; 0x28
    b5ee:	4770      	bx	lr

0000b5f0 <_ZN4core3fmt10ArgumentV13new17ha911407dafd615aaE>:
    b5f0:	b08a      	sub	sp, #40	; 0x28
    b5f2:	460a      	mov	r2, r1
    b5f4:	4603      	mov	r3, r0
    b5f6:	9004      	str	r0, [sp, #16]
    b5f8:	9105      	str	r1, [sp, #20]
    b5fa:	9805      	ldr	r0, [sp, #20]
    b5fc:	9008      	str	r0, [sp, #32]
    b5fe:	9808      	ldr	r0, [sp, #32]
    b600:	9203      	str	r2, [sp, #12]
    b602:	9302      	str	r3, [sp, #8]
    b604:	9001      	str	r0, [sp, #4]
    b606:	e7ff      	b.n	b608 <_ZN4core3fmt10ArgumentV13new17ha911407dafd615aaE+0x18>
    b608:	9804      	ldr	r0, [sp, #16]
    b60a:	9009      	str	r0, [sp, #36]	; 0x24
    b60c:	9809      	ldr	r0, [sp, #36]	; 0x24
    b60e:	9000      	str	r0, [sp, #0]
    b610:	e7ff      	b.n	b612 <_ZN4core3fmt10ArgumentV13new17ha911407dafd615aaE+0x22>
    b612:	9800      	ldr	r0, [sp, #0]
    b614:	9006      	str	r0, [sp, #24]
    b616:	9901      	ldr	r1, [sp, #4]
    b618:	9107      	str	r1, [sp, #28]
    b61a:	9806      	ldr	r0, [sp, #24]
    b61c:	9907      	ldr	r1, [sp, #28]
    b61e:	b00a      	add	sp, #40	; 0x28
    b620:	4770      	bx	lr

0000b622 <_ZN4core3fmt10ArgumentV13new17hbed613464c36272dE>:
    b622:	b08a      	sub	sp, #40	; 0x28
    b624:	460a      	mov	r2, r1
    b626:	4603      	mov	r3, r0
    b628:	9004      	str	r0, [sp, #16]
    b62a:	9105      	str	r1, [sp, #20]
    b62c:	9805      	ldr	r0, [sp, #20]
    b62e:	9008      	str	r0, [sp, #32]
    b630:	9808      	ldr	r0, [sp, #32]
    b632:	9203      	str	r2, [sp, #12]
    b634:	9302      	str	r3, [sp, #8]
    b636:	9001      	str	r0, [sp, #4]
    b638:	e7ff      	b.n	b63a <_ZN4core3fmt10ArgumentV13new17hbed613464c36272dE+0x18>
    b63a:	9804      	ldr	r0, [sp, #16]
    b63c:	9009      	str	r0, [sp, #36]	; 0x24
    b63e:	9809      	ldr	r0, [sp, #36]	; 0x24
    b640:	9000      	str	r0, [sp, #0]
    b642:	e7ff      	b.n	b644 <_ZN4core3fmt10ArgumentV13new17hbed613464c36272dE+0x22>
    b644:	9800      	ldr	r0, [sp, #0]
    b646:	9006      	str	r0, [sp, #24]
    b648:	9901      	ldr	r1, [sp, #4]
    b64a:	9107      	str	r1, [sp, #28]
    b64c:	9806      	ldr	r0, [sp, #24]
    b64e:	9907      	ldr	r1, [sp, #28]
    b650:	b00a      	add	sp, #40	; 0x28
    b652:	4770      	bx	lr

0000b654 <_ZN6mynewt4libs14sensor_network16init_server_post17h4d7cda996b2d7ef5E>:
    pub fn register_collector_transport() -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    pub fn sensor_network_register_transport(iface_type: u8) -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    b654:	b580      	push	{r7, lr}
    b656:	b086      	sub	sp, #24
    b658:	460a      	mov	r2, r1
    b65a:	9104      	str	r1, [sp, #16]
    b65c:	9904      	ldr	r1, [sp, #16]
    b65e:	9003      	str	r0, [sp, #12]
    b660:	4608      	mov	r0, r1
    b662:	9202      	str	r2, [sp, #8]
    b664:	f7fd fe51 	bl	930a <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E>
    b668:	e7ff      	b.n	b66a <_ZN6mynewt4libs14sensor_network16init_server_post17h4d7cda996b2d7ef5E+0x16>
    b66a:	9804      	ldr	r0, [sp, #16]
    b66c:	f7fd fd07 	bl	907e <_ZN6mynewt4Strn6as_ptr17hce51ed792e0d4eabE>
    b670:	9001      	str	r0, [sp, #4]
    b672:	e7ff      	b.n	b674 <_ZN6mynewt4libs14sensor_network16init_server_post17h4d7cda996b2d7ef5E+0x20>
    b674:	9801      	ldr	r0, [sp, #4]
    b676:	f003 fba7 	bl	edc8 <init_server_post>
    b67a:	f88d 0017 	strb.w	r0, [sp, #23]
    b67e:	e7ff      	b.n	b680 <_ZN6mynewt4libs14sensor_network16init_server_post17h4d7cda996b2d7ef5E+0x2c>
    b680:	f89d 0017 	ldrb.w	r0, [sp, #23]
    b684:	9903      	ldr	r1, [sp, #12]
    b686:	7048      	strb	r0, [r1, #1]
    b688:	2000      	movs	r0, #0
    b68a:	7008      	strb	r0, [r1, #0]
    b68c:	b006      	add	sp, #24
    b68e:	bd80      	pop	{r7, pc}

0000b690 <_ZN6mynewt4libs14sensor_network12prepare_post17hfdaf25fbf86be5c2E>:
    pub fn init_collector_post() -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    pub fn sensor_network_init_post(iface_type: u8, uri: *const ::cty::c_char) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    b690:	b580      	push	{r7, lr}
    b692:	b084      	sub	sp, #16
    b694:	460a      	mov	r2, r1
    b696:	9102      	str	r1, [sp, #8]
    b698:	9902      	ldr	r1, [sp, #8]
    b69a:	9001      	str	r0, [sp, #4]
    b69c:	4608      	mov	r0, r1
    b69e:	9200      	str	r2, [sp, #0]
    b6a0:	f003 fb98 	bl	edd4 <sensor_network_prepare_post>
    b6a4:	f88d 000f 	strb.w	r0, [sp, #15]
    b6a8:	e7ff      	b.n	b6aa <_ZN6mynewt4libs14sensor_network12prepare_post17hfdaf25fbf86be5c2E+0x1a>
    b6aa:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b6ae:	9901      	ldr	r1, [sp, #4]
    b6b0:	7048      	strb	r0, [r1, #1]
    b6b2:	2000      	movs	r0, #0
    b6b4:	7008      	strb	r0, [r1, #0]
    b6b6:	b004      	add	sp, #16
    b6b8:	bd80      	pop	{r7, pc}

0000b6ba <_ZN6mynewt4libs14sensor_network14do_server_post17h7661fb0cf0ad1a96E>:
    pub fn sensor_network_prepare_post(encoding: ::cty::c_int) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    b6ba:	b580      	push	{r7, lr}
    b6bc:	b082      	sub	sp, #8
    b6be:	9000      	str	r0, [sp, #0]
    b6c0:	f003 fbcd 	bl	ee5e <do_server_post>
    b6c4:	f88d 0007 	strb.w	r0, [sp, #7]
    b6c8:	e7ff      	b.n	b6ca <_ZN6mynewt4libs14sensor_network14do_server_post17h7661fb0cf0ad1a96E+0x10>
    b6ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
    b6ce:	9900      	ldr	r1, [sp, #0]
    b6d0:	7048      	strb	r0, [r1, #1]
    b6d2:	2000      	movs	r0, #0
    b6d4:	7008      	strb	r0, [r1, #0]
    b6d6:	b002      	add	sp, #8
    b6d8:	bd80      	pop	{r7, pc}

0000b6da <_ZN6mynewt4libs14sensor_network13get_device_id17hf2f7fef56ca514e0E>:
    pub fn should_send_to_collector(
        val: *mut sensor_value,
        device_name: *const ::cty::c_char,
    ) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    b6da:	b580      	push	{r7, lr}
    b6dc:	b086      	sub	sp, #24
    b6de:	9001      	str	r0, [sp, #4]
    b6e0:	f003 fc2a 	bl	ef38 <get_device_id>
    b6e4:	9002      	str	r0, [sp, #8]
    b6e6:	e7ff      	b.n	b6e8 <_ZN6mynewt4libs14sensor_network13get_device_id17hf2f7fef56ca514e0E+0xe>
    b6e8:	9902      	ldr	r1, [sp, #8]
    b6ea:	a803      	add	r0, sp, #12
    b6ec:	f7fd fcaf 	bl	904e <_ZN6mynewt4Strn9from_cstr17h0552e18bd48de365E>
    b6f0:	e7ff      	b.n	b6f2 <_ZN6mynewt4libs14sensor_network13get_device_id17hf2f7fef56ca514e0E+0x18>
    b6f2:	9803      	ldr	r0, [sp, #12]
    b6f4:	9904      	ldr	r1, [sp, #16]
    b6f6:	9a05      	ldr	r2, [sp, #20]
    b6f8:	9b01      	ldr	r3, [sp, #4]
    b6fa:	60da      	str	r2, [r3, #12]
    b6fc:	6099      	str	r1, [r3, #8]
    b6fe:	6058      	str	r0, [r3, #4]
    b700:	2000      	movs	r0, #0
    b702:	6018      	str	r0, [r3, #0]
    b704:	b006      	add	sp, #24
    b706:	bd80      	pop	{r7, pc}

0000b708 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17h7d74cd408b535691E>:
    b708:	b580      	push	{r7, lr}
    b70a:	b08a      	sub	sp, #40	; 0x28
    b70c:	460a      	mov	r2, r1
    b70e:	4603      	mov	r3, r0
    b710:	9003      	str	r0, [sp, #12]
    b712:	9104      	str	r1, [sp, #16]
    b714:	9804      	ldr	r0, [sp, #16]
    b716:	9202      	str	r2, [sp, #8]
    b718:	9301      	str	r3, [sp, #4]
    b71a:	f000 fdbe 	bl	c29a <_ZN4core3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hac57f825172bc7a7E>
    b71e:	9108      	str	r1, [sp, #32]
    b720:	9007      	str	r0, [sp, #28]
    b722:	e7ff      	b.n	b724 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17h7d74cd408b535691E+0x1c>
    b724:	9807      	ldr	r0, [sp, #28]
    b726:	2800      	cmp	r0, #0
    b728:	9000      	str	r0, [sp, #0]
    b72a:	d005      	beq.n	b738 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17h7d74cd408b535691E+0x30>
    b72c:	e7ff      	b.n	b72e <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17h7d74cd408b535691E+0x26>
    b72e:	9800      	ldr	r0, [sp, #0]
    b730:	2801      	cmp	r0, #1
    b732:	d00c      	beq.n	b74e <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17h7d74cd408b535691E+0x46>
    b734:	e7ff      	b.n	b736 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17h7d74cd408b535691E+0x2e>
    b736:	defe      	udf	#254	; 0xfe
    b738:	9808      	ldr	r0, [sp, #32]
    b73a:	9009      	str	r0, [sp, #36]	; 0x24
    b73c:	9803      	ldr	r0, [sp, #12]
    b73e:	6800      	ldr	r0, [r0, #0]
    b740:	9909      	ldr	r1, [sp, #36]	; 0x24
    b742:	f7ff f935 	bl	a9b0 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17haadbdd16ae4cb107E>
    b746:	9106      	str	r1, [sp, #24]
    b748:	9005      	str	r0, [sp, #20]
    b74a:	e7ff      	b.n	b74c <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17h7d74cd408b535691E+0x44>
    b74c:	e002      	b.n	b754 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17h7d74cd408b535691E+0x4c>
    b74e:	2000      	movs	r0, #0
    b750:	9005      	str	r0, [sp, #20]
    b752:	e7ff      	b.n	b754 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$9add_usize17h7d74cd408b535691E+0x4c>
    b754:	9805      	ldr	r0, [sp, #20]
    b756:	9906      	ldr	r1, [sp, #24]
    b758:	b00a      	add	sp, #40	; 0x28
    b75a:	bd80      	pop	{r7, pc}

0000b75c <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E>:
pub use self::bindings::*;

///  Convert the sensor data received from Mynewt into a `SensorValue` for transmission, which includes the sensor data key. 
///  `sensor_type` indicates the type of data in `sensor_data`.
#[allow(non_snake_case, unused_variables)]
fn convert_sensor_data(sensor_data: sensor_data_ptr, sensor_key: &'static Strn, sensor_type: sensor_type_t) -> SensorValue {
    b75c:	b5b0      	push	{r4, r5, r7, lr}
    b75e:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
    b762:	9ba9      	ldr	r3, [sp, #676]	; 0x2a4
    b764:	f8dd c2a0 	ldr.w	ip, [sp, #672]	; 0x2a0
    b768:	4696      	mov	lr, r2
    b76a:	460c      	mov	r4, r1
    b76c:	9120      	str	r1, [sp, #128]	; 0x80
    b76e:	9221      	str	r2, [sp, #132]	; 0x84
    b770:	9323      	str	r3, [sp, #140]	; 0x8c
    b772:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    //  Construct and return a new `SensorValue` (without semicolon)
    SensorValue {
        key: sensor_key,
    b776:	9921      	ldr	r1, [sp, #132]	; 0x84
    b778:	2200      	movs	r2, #0
        geo: SensorValueType::None,
    b77a:	9224      	str	r2, [sp, #144]	; 0x90
        value: match sensor_type {
            SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW => {  //  If this is raw temperature...
    b77c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    b77e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    b780:	f082 6c80 	eor.w	ip, r2, #67108864	; 0x4000000
    b784:	ea4c 0c03 	orr.w	ip, ip, r3
    b788:	f1bc 0f00 	cmp.w	ip, #0
    b78c:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    b790:	9418      	str	r4, [sp, #96]	; 0x60
    b792:	9017      	str	r0, [sp, #92]	; 0x5c
    b794:	9116      	str	r1, [sp, #88]	; 0x58
    b796:	9215      	str	r2, [sp, #84]	; 0x54
    b798:	9314      	str	r3, [sp, #80]	; 0x50
    b79a:	d009      	beq.n	b7b0 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x54>
    b79c:	e7ff      	b.n	b79e <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x42>
    b79e:	9815      	ldr	r0, [sp, #84]	; 0x54
    b7a0:	f080 6100 	eor.w	r1, r0, #134217728	; 0x8000000
    b7a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b7a6:	4311      	orrs	r1, r2
    b7a8:	2900      	cmp	r1, #0
    b7aa:	f000 8102 	beq.w	b9b2 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x256>
    b7ae:	e1d3      	b.n	bb58 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x3fc>
    b7b0:	2000      	movs	r0, #0
                //  Interpret the sensor data as a `sensor_temp_raw_data` struct that contains raw temp.
                let mut rawtempdata = fill_zero!(sensor_temp_raw_data);
    b7b2:	f88d 00e0 	strb.w	r0, [sp, #224]	; 0xe0
    b7b6:	9037      	str	r0, [sp, #220]	; 0xdc
    b7b8:	f89d 00e0 	ldrb.w	r0, [sp, #224]	; 0xe0
    b7bc:	f88d 00d8 	strb.w	r0, [sp, #216]	; 0xd8
    b7c0:	9837      	ldr	r0, [sp, #220]	; 0xdc
    b7c2:	9035      	str	r0, [sp, #212]	; 0xd4
    b7c4:	e7ff      	b.n	b7c6 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x6a>
                let rc = unsafe { get_temp_raw_data(sensor_data, &mut rawtempdata) };
    b7c6:	9820      	ldr	r0, [sp, #128]	; 0x80
    b7c8:	a935      	add	r1, sp, #212	; 0xd4
    b7ca:	f007 fac7 	bl	12d5c <get_temp_raw_data>
    b7ce:	9039      	str	r0, [sp, #228]	; 0xe4
    b7d0:	e7ff      	b.n	b7d2 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x76>
    b7d2:	a839      	add	r0, sp, #228	; 0xe4
                assert_eq!(rc, 0, "rawtmp fail");
    b7d4:	903a      	str	r0, [sp, #232]	; 0xe8
    b7d6:	f24a 40b0 	movw	r0, #42160	; 0xa4b0
    b7da:	f2c0 0002 	movt	r0, #2
    b7de:	903b      	str	r0, [sp, #236]	; 0xec
    b7e0:	983a      	ldr	r0, [sp, #232]	; 0xe8
    b7e2:	903c      	str	r0, [sp, #240]	; 0xf0
    b7e4:	983b      	ldr	r0, [sp, #236]	; 0xec
    b7e6:	903d      	str	r0, [sp, #244]	; 0xf4
    b7e8:	983c      	ldr	r0, [sp, #240]	; 0xf0
    b7ea:	6800      	ldr	r0, [r0, #0]
    b7ec:	993d      	ldr	r1, [sp, #244]	; 0xf4
    b7ee:	6809      	ldr	r1, [r1, #0]
    b7f0:	4288      	cmp	r0, r1
    b7f2:	d014      	beq.n	b81e <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0xc2>
    b7f4:	e7ff      	b.n	b7f6 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x9a>
    b7f6:	983c      	ldr	r0, [sp, #240]	; 0xf0
    b7f8:	904d      	str	r0, [sp, #308]	; 0x134
    b7fa:	983d      	ldr	r0, [sp, #244]	; 0xf4
    b7fc:	904e      	str	r0, [sp, #312]	; 0x138
    b7fe:	4668      	mov	r0, sp
    b800:	2100      	movs	r1, #0
    b802:	6001      	str	r1, [r0, #0]
    b804:	f24a 5138 	movw	r1, #42296	; 0xa538
    b808:	f2c0 0102 	movt	r1, #2
    b80c:	f24a 531c 	movw	r3, #42268	; 0xa51c
    b810:	f2c0 0302 	movt	r3, #2
    b814:	a84f      	add	r0, sp, #316	; 0x13c
    b816:	2201      	movs	r2, #1
    b818:	f7fd f974 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    b81c:	e012      	b.n	b844 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0xe8>
    b81e:	a835      	add	r0, sp, #212	; 0xd4
                //  Check that the raw temperature data is valid.
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
    b820:	3004      	adds	r0, #4
    b822:	9058      	str	r0, [sp, #352]	; 0x160
    b824:	f24a 5050 	movw	r0, #42320	; 0xa550
    b828:	f2c0 0002 	movt	r0, #2
    b82c:	9059      	str	r0, [sp, #356]	; 0x164
    b82e:	9858      	ldr	r0, [sp, #352]	; 0x160
    b830:	905a      	str	r0, [sp, #360]	; 0x168
    b832:	9859      	ldr	r0, [sp, #356]	; 0x164
    b834:	905b      	str	r0, [sp, #364]	; 0x16c
    b836:	985a      	ldr	r0, [sp, #360]	; 0x168
    b838:	7800      	ldrb	r0, [r0, #0]
    b83a:	995b      	ldr	r1, [sp, #364]	; 0x16c
    b83c:	7809      	ldrb	r1, [r1, #0]
    b83e:	4288      	cmp	r0, r1
    b840:	d04f      	beq.n	b8e2 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x186>
    b842:	e062      	b.n	b90a <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x1ae>
    b844:	a84d      	add	r0, sp, #308	; 0x134
                assert_eq!(rc, 0, "rawtmp fail");
    b846:	904a      	str	r0, [sp, #296]	; 0x128
    b848:	a84e      	add	r0, sp, #312	; 0x138
    b84a:	904b      	str	r0, [sp, #300]	; 0x12c
    b84c:	a84f      	add	r0, sp, #316	; 0x13c
    b84e:	904c      	str	r0, [sp, #304]	; 0x130
    b850:	984a      	ldr	r0, [sp, #296]	; 0x128
    b852:	9055      	str	r0, [sp, #340]	; 0x154
    b854:	984b      	ldr	r0, [sp, #300]	; 0x12c
    b856:	9056      	str	r0, [sp, #344]	; 0x158
    b858:	984c      	ldr	r0, [sp, #304]	; 0x130
    b85a:	9057      	str	r0, [sp, #348]	; 0x15c
    b85c:	9855      	ldr	r0, [sp, #340]	; 0x154
    b85e:	f24b 4141 	movw	r1, #46145	; 0xb441
    b862:	f2c0 0100 	movt	r1, #0
    b866:	f7ff fec3 	bl	b5f0 <_ZN4core3fmt10ArgumentV13new17ha911407dafd615aaE>
    b86a:	9013      	str	r0, [sp, #76]	; 0x4c
    b86c:	9112      	str	r1, [sp, #72]	; 0x48
    b86e:	e7ff      	b.n	b870 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x114>
    b870:	9856      	ldr	r0, [sp, #344]	; 0x158
    b872:	f24b 4141 	movw	r1, #46145	; 0xb441
    b876:	f2c0 0100 	movt	r1, #0
    b87a:	f7ff feb9 	bl	b5f0 <_ZN4core3fmt10ArgumentV13new17ha911407dafd615aaE>
    b87e:	9011      	str	r0, [sp, #68]	; 0x44
    b880:	9110      	str	r1, [sp, #64]	; 0x40
    b882:	e7ff      	b.n	b884 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x128>
    b884:	9857      	ldr	r0, [sp, #348]	; 0x15c
    b886:	f24d 2143 	movw	r1, #53827	; 0xd243
    b88a:	f2c0 0100 	movt	r1, #0
    b88e:	f7ff fe64 	bl	b55a <_ZN4core3fmt10ArgumentV13new17h77e41a362c8b7a28E>
    b892:	900f      	str	r0, [sp, #60]	; 0x3c
    b894:	910e      	str	r1, [sp, #56]	; 0x38
    b896:	e7ff      	b.n	b898 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x13c>
    b898:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b89a:	9044      	str	r0, [sp, #272]	; 0x110
    b89c:	9912      	ldr	r1, [sp, #72]	; 0x48
    b89e:	9145      	str	r1, [sp, #276]	; 0x114
    b8a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b8a2:	9246      	str	r2, [sp, #280]	; 0x118
    b8a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b8a6:	9347      	str	r3, [sp, #284]	; 0x11c
    b8a8:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    b8ac:	f8cd c120 	str.w	ip, [sp, #288]	; 0x120
    b8b0:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
    b8b4:	f8cd e124 	str.w	lr, [sp, #292]	; 0x124
    b8b8:	466c      	mov	r4, sp
    b8ba:	2503      	movs	r5, #3
    b8bc:	6025      	str	r5, [r4, #0]
    b8be:	f24a 41f0 	movw	r1, #42224	; 0xa4f0
    b8c2:	f2c0 0102 	movt	r1, #2
    b8c6:	a83e      	add	r0, sp, #248	; 0xf8
    b8c8:	ab44      	add	r3, sp, #272	; 0x110
    b8ca:	462a      	mov	r2, r5
    b8cc:	f7fd f91a 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    b8d0:	e7ff      	b.n	b8d2 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x176>
    b8d2:	f24a 5140 	movw	r1, #42304	; 0xa540
    b8d6:	f2c0 0102 	movt	r1, #2
    b8da:	a83e      	add	r0, sp, #248	; 0xf8
    b8dc:	f000 fff3 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    b8e0:	defe      	udf	#254	; 0xfe
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
    b8e2:	985a      	ldr	r0, [sp, #360]	; 0x168
    b8e4:	906b      	str	r0, [sp, #428]	; 0x1ac
    b8e6:	985b      	ldr	r0, [sp, #364]	; 0x16c
    b8e8:	906c      	str	r0, [sp, #432]	; 0x1b0
    b8ea:	4668      	mov	r0, sp
    b8ec:	2100      	movs	r1, #0
    b8ee:	6001      	str	r1, [r0, #0]
    b8f0:	f24a 51a4 	movw	r1, #42404	; 0xa5a4
    b8f4:	f2c0 0102 	movt	r1, #2
    b8f8:	f24a 531c 	movw	r3, #42268	; 0xa51c
    b8fc:	f2c0 0302 	movt	r3, #2
    b900:	a86d      	add	r0, sp, #436	; 0x1b4
    b902:	2201      	movs	r2, #1
    b904:	f7fd f8fe 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    b908:	e004      	b.n	b914 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x1b8>
                //  Raw temperature data is valid.  Return it.
                SensorValueType::Uint(rawtempdata.strd_temp_raw)  //  Raw Temperature in integer (0 to 4095)
    b90a:	9835      	ldr	r0, [sp, #212]	; 0xd4
    b90c:	902d      	str	r0, [sp, #180]	; 0xb4
    b90e:	2001      	movs	r0, #1
    b910:	902c      	str	r0, [sp, #176]	; 0xb0
        value: match sensor_type {
    b912:	e12f      	b.n	bb74 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x418>
    b914:	a86b      	add	r0, sp, #428	; 0x1ac
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
    b916:	9068      	str	r0, [sp, #416]	; 0x1a0
    b918:	a86c      	add	r0, sp, #432	; 0x1b0
    b91a:	9069      	str	r0, [sp, #420]	; 0x1a4
    b91c:	a86d      	add	r0, sp, #436	; 0x1b4
    b91e:	906a      	str	r0, [sp, #424]	; 0x1a8
    b920:	9868      	ldr	r0, [sp, #416]	; 0x1a0
    b922:	9073      	str	r0, [sp, #460]	; 0x1cc
    b924:	9869      	ldr	r0, [sp, #420]	; 0x1a4
    b926:	9074      	str	r0, [sp, #464]	; 0x1d0
    b928:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    b92a:	9075      	str	r0, [sp, #468]	; 0x1d4
    b92c:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    b92e:	f24b 4169 	movw	r1, #46185	; 0xb469
    b932:	f2c0 0100 	movt	r1, #0
    b936:	f7ff fdde 	bl	b4f6 <_ZN4core3fmt10ArgumentV13new17h1e15870702cd8f35E>
    b93a:	900d      	str	r0, [sp, #52]	; 0x34
    b93c:	910c      	str	r1, [sp, #48]	; 0x30
    b93e:	e7ff      	b.n	b940 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x1e4>
    b940:	9874      	ldr	r0, [sp, #464]	; 0x1d0
    b942:	f24b 4169 	movw	r1, #46185	; 0xb469
    b946:	f2c0 0100 	movt	r1, #0
    b94a:	f7ff fdd4 	bl	b4f6 <_ZN4core3fmt10ArgumentV13new17h1e15870702cd8f35E>
    b94e:	900b      	str	r0, [sp, #44]	; 0x2c
    b950:	910a      	str	r1, [sp, #40]	; 0x28
    b952:	e7ff      	b.n	b954 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x1f8>
    b954:	9875      	ldr	r0, [sp, #468]	; 0x1d4
    b956:	f24d 2143 	movw	r1, #53827	; 0xd243
    b95a:	f2c0 0100 	movt	r1, #0
    b95e:	f7ff fdfc 	bl	b55a <_ZN4core3fmt10ArgumentV13new17h77e41a362c8b7a28E>
    b962:	9009      	str	r0, [sp, #36]	; 0x24
    b964:	9108      	str	r1, [sp, #32]
    b966:	e7ff      	b.n	b968 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x20c>
    b968:	980d      	ldr	r0, [sp, #52]	; 0x34
    b96a:	9062      	str	r0, [sp, #392]	; 0x188
    b96c:	990c      	ldr	r1, [sp, #48]	; 0x30
    b96e:	9163      	str	r1, [sp, #396]	; 0x18c
    b970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b972:	9264      	str	r2, [sp, #400]	; 0x190
    b974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b976:	9365      	str	r3, [sp, #404]	; 0x194
    b978:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    b97c:	f8cd c198 	str.w	ip, [sp, #408]	; 0x198
    b980:	f8dd e020 	ldr.w	lr, [sp, #32]
    b984:	f8cd e19c 	str.w	lr, [sp, #412]	; 0x19c
    b988:	466c      	mov	r4, sp
    b98a:	2503      	movs	r5, #3
    b98c:	6025      	str	r5, [r4, #0]
    b98e:	f24a 5180 	movw	r1, #42368	; 0xa580
    b992:	f2c0 0102 	movt	r1, #2
    b996:	a85c      	add	r0, sp, #368	; 0x170
    b998:	ab62      	add	r3, sp, #392	; 0x188
    b99a:	462a      	mov	r2, r5
    b99c:	f7fd f8b2 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    b9a0:	e7ff      	b.n	b9a2 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x246>
    b9a2:	f24a 51ac 	movw	r1, #42412	; 0xa5ac
    b9a6:	f2c0 0102 	movt	r1, #2
    b9aa:	a85c      	add	r0, sp, #368	; 0x170
    b9ac:	f000 ff8b 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    b9b0:	defe      	udf	#254	; 0xfe
    b9b2:	2000      	movs	r0, #0
            }
            SENSOR_TYPE_GEOLOCATION => {  //  If sensor data is GPS geolocation...
                //  Interpret the sensor data as a `sensor_geolocation_data` struct that contains GPS geolocation.
                let mut geolocation = fill_zero!(sensor_geolocation_data);
    b9b4:	f8cd 020b 	str.w	r0, [sp, #523]	; 0x20b
    b9b8:	9082      	str	r0, [sp, #520]	; 0x208
    b9ba:	9081      	str	r0, [sp, #516]	; 0x204
    b9bc:	9080      	str	r0, [sp, #512]	; 0x200
    b9be:	907f      	str	r0, [sp, #508]	; 0x1fc
    b9c0:	907e      	str	r0, [sp, #504]	; 0x1f8
    b9c2:	907d      	str	r0, [sp, #500]	; 0x1f4
    b9c4:	a876      	add	r0, sp, #472	; 0x1d8
    b9c6:	a97d      	add	r1, sp, #500	; 0x1f4
    b9c8:	221b      	movs	r2, #27
    b9ca:	f01e f987 	bl	29cdc <__aeabi_memcpy>
    b9ce:	9007      	str	r0, [sp, #28]
    b9d0:	e7ff      	b.n	b9d2 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x276>
                let rc = unsafe { get_geolocation_data(sensor_data, &mut geolocation) };
    b9d2:	9820      	ldr	r0, [sp, #128]	; 0x80
    b9d4:	a976      	add	r1, sp, #472	; 0x1d8
    b9d6:	f007 f9d6 	bl	12d86 <get_geolocation_data>
    b9da:	9084      	str	r0, [sp, #528]	; 0x210
    b9dc:	e7ff      	b.n	b9de <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x282>
    b9de:	a884      	add	r0, sp, #528	; 0x210
                assert_eq!(rc, 0, "geodata fail");
    b9e0:	9085      	str	r0, [sp, #532]	; 0x214
    b9e2:	f24a 40b0 	movw	r0, #42160	; 0xa4b0
    b9e6:	f2c0 0002 	movt	r0, #2
    b9ea:	9086      	str	r0, [sp, #536]	; 0x218
    b9ec:	9885      	ldr	r0, [sp, #532]	; 0x214
    b9ee:	9087      	str	r0, [sp, #540]	; 0x21c
    b9f0:	9886      	ldr	r0, [sp, #536]	; 0x218
    b9f2:	9088      	str	r0, [sp, #544]	; 0x220
    b9f4:	9887      	ldr	r0, [sp, #540]	; 0x21c
    b9f6:	6800      	ldr	r0, [r0, #0]
    b9f8:	9988      	ldr	r1, [sp, #544]	; 0x220
    b9fa:	6809      	ldr	r1, [r1, #0]
    b9fc:	4288      	cmp	r0, r1
    b9fe:	d014      	beq.n	ba2a <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x2ce>
    ba00:	e7ff      	b.n	ba02 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x2a6>
    ba02:	9887      	ldr	r0, [sp, #540]	; 0x21c
    ba04:	9098      	str	r0, [sp, #608]	; 0x260
    ba06:	9888      	ldr	r0, [sp, #544]	; 0x220
    ba08:	9099      	str	r0, [sp, #612]	; 0x264
    ba0a:	4668      	mov	r0, sp
    ba0c:	2100      	movs	r1, #0
    ba0e:	6001      	str	r1, [r0, #0]
    ba10:	f24a 5114 	movw	r1, #42260	; 0xa514
    ba14:	f2c0 0102 	movt	r1, #2
    ba18:	f24a 531c 	movw	r3, #42268	; 0xa51c
    ba1c:	f2c0 0302 	movt	r3, #2
    ba20:	a89a      	add	r0, sp, #616	; 0x268
    ba22:	2201      	movs	r2, #1
    ba24:	f7fd f86e 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    ba28:	e004      	b.n	ba34 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x2d8>
                //  Check that the geolocation data is valid.
                if  geolocation.sgd_latitude_is_valid  != 0 &&
    ba2a:	f89d 01f0 	ldrb.w	r0, [sp, #496]	; 0x1f0
    ba2e:	2800      	cmp	r0, #0
    ba30:	d165      	bne.n	bafe <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x3a2>
    ba32:	e060      	b.n	baf6 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x39a>
    ba34:	a898      	add	r0, sp, #608	; 0x260
                assert_eq!(rc, 0, "geodata fail");
    ba36:	9095      	str	r0, [sp, #596]	; 0x254
    ba38:	a899      	add	r0, sp, #612	; 0x264
    ba3a:	9096      	str	r0, [sp, #600]	; 0x258
    ba3c:	a89a      	add	r0, sp, #616	; 0x268
    ba3e:	9097      	str	r0, [sp, #604]	; 0x25c
    ba40:	9895      	ldr	r0, [sp, #596]	; 0x254
    ba42:	90a0      	str	r0, [sp, #640]	; 0x280
    ba44:	9896      	ldr	r0, [sp, #600]	; 0x258
    ba46:	90a1      	str	r0, [sp, #644]	; 0x284
    ba48:	9897      	ldr	r0, [sp, #604]	; 0x25c
    ba4a:	90a2      	str	r0, [sp, #648]	; 0x288
    ba4c:	98a0      	ldr	r0, [sp, #640]	; 0x280
    ba4e:	f24b 4141 	movw	r1, #46145	; 0xb441
    ba52:	f2c0 0100 	movt	r1, #0
    ba56:	f7ff fdcb 	bl	b5f0 <_ZN4core3fmt10ArgumentV13new17ha911407dafd615aaE>
    ba5a:	9006      	str	r0, [sp, #24]
    ba5c:	9105      	str	r1, [sp, #20]
    ba5e:	e7ff      	b.n	ba60 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x304>
    ba60:	98a1      	ldr	r0, [sp, #644]	; 0x284
    ba62:	f24b 4141 	movw	r1, #46145	; 0xb441
    ba66:	f2c0 0100 	movt	r1, #0
    ba6a:	f7ff fdc1 	bl	b5f0 <_ZN4core3fmt10ArgumentV13new17ha911407dafd615aaE>
    ba6e:	9004      	str	r0, [sp, #16]
    ba70:	9103      	str	r1, [sp, #12]
    ba72:	e7ff      	b.n	ba74 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x318>
    ba74:	98a2      	ldr	r0, [sp, #648]	; 0x288
    ba76:	f24d 2143 	movw	r1, #53827	; 0xd243
    ba7a:	f2c0 0100 	movt	r1, #0
    ba7e:	f7ff fd6c 	bl	b55a <_ZN4core3fmt10ArgumentV13new17h77e41a362c8b7a28E>
    ba82:	9002      	str	r0, [sp, #8]
    ba84:	9101      	str	r1, [sp, #4]
    ba86:	e7ff      	b.n	ba88 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x32c>
    ba88:	9806      	ldr	r0, [sp, #24]
    ba8a:	908f      	str	r0, [sp, #572]	; 0x23c
    ba8c:	9905      	ldr	r1, [sp, #20]
    ba8e:	9190      	str	r1, [sp, #576]	; 0x240
    ba90:	9a04      	ldr	r2, [sp, #16]
    ba92:	9291      	str	r2, [sp, #580]	; 0x244
    ba94:	9b03      	ldr	r3, [sp, #12]
    ba96:	9392      	str	r3, [sp, #584]	; 0x248
    ba98:	f8dd c008 	ldr.w	ip, [sp, #8]
    ba9c:	f8cd c24c 	str.w	ip, [sp, #588]	; 0x24c
    baa0:	f8dd e004 	ldr.w	lr, [sp, #4]
    baa4:	f8cd e250 	str.w	lr, [sp, #592]	; 0x250
    baa8:	466c      	mov	r4, sp
    baaa:	2503      	movs	r5, #3
    baac:	6025      	str	r5, [r4, #0]
    baae:	f24a 41f0 	movw	r1, #42224	; 0xa4f0
    bab2:	f2c0 0102 	movt	r1, #2
    bab6:	a889      	add	r0, sp, #548	; 0x224
    bab8:	ab8f      	add	r3, sp, #572	; 0x23c
    baba:	462a      	mov	r2, r5
    babc:	f7fd f822 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    bac0:	e7ff      	b.n	bac2 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x366>
    bac2:	f24a 511c 	movw	r1, #42268	; 0xa51c
    bac6:	f2c0 0102 	movt	r1, #2
    baca:	a889      	add	r0, sp, #548	; 0x224
    bacc:	f000 fefb 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    bad0:	defe      	udf	#254	; 0xfe
    bad2:	2000      	movs	r0, #0
                if  geolocation.sgd_latitude_is_valid  != 0 &&
    bad4:	f88d 028e 	strb.w	r0, [sp, #654]	; 0x28e
    bad8:	e007      	b.n	baea <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x38e>
                    geolocation.sgd_longitude_is_valid != 0 &&
                    geolocation.sgd_altitude_is_valid  != 0 {
    bada:	f89d 01f2 	ldrb.w	r0, [sp, #498]	; 0x1f2
    bade:	2800      	cmp	r0, #0
    bae0:	bf18      	it	ne
    bae2:	2001      	movne	r0, #1
                if  geolocation.sgd_latitude_is_valid  != 0 &&
    bae4:	f88d 028e 	strb.w	r0, [sp, #654]	; 0x28e
    bae8:	e7ff      	b.n	baea <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x38e>
    baea:	f89d 028e 	ldrb.w	r0, [sp, #654]	; 0x28e
    baee:	07c0      	lsls	r0, r0, #31
    baf0:	2800      	cmp	r0, #0
    baf2:	d112      	bne.n	bb1a <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x3be>
    baf4:	e02c      	b.n	bb50 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x3f4>
    baf6:	2000      	movs	r0, #0
    baf8:	f88d 028f 	strb.w	r0, [sp, #655]	; 0x28f
    bafc:	e007      	b.n	bb0e <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x3b2>
                    geolocation.sgd_longitude_is_valid != 0 &&
    bafe:	f89d 01f1 	ldrb.w	r0, [sp, #497]	; 0x1f1
    bb02:	2800      	cmp	r0, #0
    bb04:	bf18      	it	ne
    bb06:	2001      	movne	r0, #1
                if  geolocation.sgd_latitude_is_valid  != 0 &&
    bb08:	f88d 028f 	strb.w	r0, [sp, #655]	; 0x28f
    bb0c:	e7ff      	b.n	bb0e <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x3b2>
    bb0e:	f89d 028f 	ldrb.w	r0, [sp, #655]	; 0x28f
    bb12:	07c0      	lsls	r0, r0, #31
    bb14:	2800      	cmp	r0, #0
    bb16:	d1e0      	bne.n	bada <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x37e>
    bb18:	e7db      	b.n	bad2 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x376>
                    //  Geolocation data is valid.  Return it.
                    SensorValueType::Geolocation {
                        latitude:  geolocation.sgd_latitude,
    bb1a:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    bb1c:	9977      	ldr	r1, [sp, #476]	; 0x1dc
                        longitude: geolocation.sgd_longitude,
    bb1e:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    bb20:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
                        latitude:  geolocation.sgd_latitude,
    bb22:	911b      	str	r1, [sp, #108]	; 0x6c
    bb24:	901a      	str	r0, [sp, #104]	; 0x68
    bb26:	ed9d 0b1a 	vldr	d0, [sp, #104]	; 0x68
                        longitude: geolocation.sgd_longitude,
    bb2a:	931d      	str	r3, [sp, #116]	; 0x74
    bb2c:	921c      	str	r2, [sp, #112]	; 0x70
    bb2e:	ed9d 1b1c 	vldr	d1, [sp, #112]	; 0x70
                        altitude:  geolocation.sgd_altitude,
    bb32:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    bb34:	901f      	str	r0, [sp, #124]	; 0x7c
    bb36:	987a      	ldr	r0, [sp, #488]	; 0x1e8
    bb38:	901e      	str	r0, [sp, #120]	; 0x78
    bb3a:	ed9d 2b1e 	vldr	d2, [sp, #120]	; 0x78
                    SensorValueType::Geolocation {
    bb3e:	ed8d 0b2e 	vstr	d0, [sp, #184]	; 0xb8
    bb42:	ed8d 1b30 	vstr	d1, [sp, #192]	; 0xc0
    bb46:	ed8d 2b32 	vstr	d2, [sp, #200]	; 0xc8
    bb4a:	2003      	movs	r0, #3
    bb4c:	902c      	str	r0, [sp, #176]	; 0xb0
                if  geolocation.sgd_latitude_is_valid  != 0 &&
    bb4e:	e002      	b.n	bb56 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x3fa>
    bb50:	2000      	movs	r0, #0
                    }
                } else { SensorValueType::None }  //  Geolocation data is invalid.  Maybe GPS is not ready.                 
    bb52:	902c      	str	r0, [sp, #176]	; 0xb0
                if  geolocation.sgd_latitude_is_valid  != 0 &&
    bb54:	e7ff      	b.n	bb56 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x3fa>
        value: match sensor_type {
    bb56:	e00d      	b.n	bb74 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x418>
    bb58:	2000      	movs	r0, #0
            }
            //  TODO: Convert other sensor types
            _ => { assert!(false, "sensor type"); SensorValueType::None }  //  Unknown type of sensor value
    bb5a:	2800      	cmp	r0, #0
    bb5c:	d107      	bne.n	bb6e <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x412>
    bb5e:	e7ff      	b.n	bb60 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x404>
    bb60:	f24a 4098 	movw	r0, #42136	; 0xa498
    bb64:	f2c0 0002 	movt	r0, #2
    bb68:	f000 fe70 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    bb6c:	defe      	udf	#254	; 0xfe
    bb6e:	2000      	movs	r0, #0
    bb70:	902c      	str	r0, [sp, #176]	; 0xb0
        value: match sensor_type {
    bb72:	e7ff      	b.n	bb74 <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E+0x418>
    SensorValue {
    bb74:	9816      	ldr	r0, [sp, #88]	; 0x58
    bb76:	9917      	ldr	r1, [sp, #92]	; 0x5c
    bb78:	6408      	str	r0, [r1, #64]	; 0x40
    bb7a:	aa2c      	add	r2, sp, #176	; 0xb0
    bb7c:	e8b2 5018 	ldmia.w	r2!, {r3, r4, ip, lr}
    bb80:	e8a1 5018 	stmia.w	r1!, {r3, r4, ip, lr}
    bb84:	e892 5018 	ldmia.w	r2, {r3, r4, ip, lr}
    bb88:	e881 5018 	stmia.w	r1, {r3, r4, ip, lr}
    bb8c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    bb8e:	f101 0220 	add.w	r2, r1, #32
    bb92:	ab24      	add	r3, sp, #144	; 0x90
    bb94:	e8b3 5030 	ldmia.w	r3!, {r4, r5, ip, lr}
    bb98:	e8a2 5030 	stmia.w	r2!, {r4, r5, ip, lr}
    bb9c:	e893 5030 	ldmia.w	r3, {r4, r5, ip, lr}
    bba0:	e882 5030 	stmia.w	r2, {r4, r5, ip, lr}
        }
    }
}
    bba4:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
    bba8:	bdb0      	pop	{r4, r5, r7, pc}

0000bbaa <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E>:
///  For more information on the type of callbacks available, see the documentation
///  for the sensor listener structure.
///  `sensor`: The sensor to register a listener on.
///  `listener`: The listener to register onto the sensor.
///  Returns `Ok()` on success, `Err()` containing `MynewtError` error code on failure.
pub fn register_listener(sensor: *mut sensor, listener: sensor_listener) -> MynewtResult<()> {  //  Returns an error code upon error. 
    bbaa:	b570      	push	{r4, r5, r6, lr}
    bbac:	b0d2      	sub	sp, #328	; 0x148
    bbae:	4602      	mov	r2, r0
    bbb0:	9014      	str	r0, [sp, #80]	; 0x50
    bbb2:	2003      	movs	r0, #3
    bbb4:	2300      	movs	r3, #0
    //  If this is a Wrapped Sensor Listener, register the associated Sensor Listener with Mynewt.
    let mut arg = MAX_SENSOR_LISTENERS + 1;
    bbb6:	2b00      	cmp	r3, #0
    bbb8:	9113      	str	r1, [sp, #76]	; 0x4c
    bbba:	9212      	str	r2, [sp, #72]	; 0x48
    bbbc:	9011      	str	r0, [sp, #68]	; 0x44
    bbbe:	f040 8136 	bne.w	be2e <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x284>
    bbc2:	e7ff      	b.n	bbc4 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x1a>
    bbc4:	9811      	ldr	r0, [sp, #68]	; 0x44
    bbc6:	9016      	str	r0, [sp, #88]	; 0x58
    bbc8:	2100      	movs	r1, #0
    //  Find a matching `sensor_listener_info`
    for i in 0 .. MAX_SENSOR_LISTENERS {
    bbca:	9117      	str	r1, [sp, #92]	; 0x5c
    bbcc:	2102      	movs	r1, #2
    bbce:	9118      	str	r1, [sp, #96]	; 0x60
    bbd0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    bbd2:	9918      	ldr	r1, [sp, #96]	; 0x60
    bbd4:	f7ff f87c 	bl	acd0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h612eb9cec733e365E>
    bbd8:	9010      	str	r0, [sp, #64]	; 0x40
    bbda:	910f      	str	r1, [sp, #60]	; 0x3c
    bbdc:	e7ff      	b.n	bbde <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x34>
    bbde:	9810      	ldr	r0, [sp, #64]	; 0x40
    bbe0:	9019      	str	r0, [sp, #100]	; 0x64
    bbe2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bbe4:	911a      	str	r1, [sp, #104]	; 0x68
    bbe6:	e7ff      	b.n	bbe8 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x3e>
    bbe8:	a819      	add	r0, sp, #100	; 0x64
    bbea:	f000 fbd6 	bl	c39a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE>
    bbee:	911d      	str	r1, [sp, #116]	; 0x74
    bbf0:	901c      	str	r0, [sp, #112]	; 0x70
    bbf2:	e7ff      	b.n	bbf4 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x4a>
    bbf4:	981c      	ldr	r0, [sp, #112]	; 0x70
    bbf6:	2800      	cmp	r0, #0
    bbf8:	900e      	str	r0, [sp, #56]	; 0x38
    bbfa:	d010      	beq.n	bc1e <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x74>
    bbfc:	e7ff      	b.n	bbfe <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x54>
    bbfe:	980e      	ldr	r0, [sp, #56]	; 0x38
    bc00:	2801      	cmp	r0, #1
    bc02:	d001      	beq.n	bc08 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x5e>
    bc04:	e7ff      	b.n	bc06 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x5c>
        unsafe { LISTENER_INTERNAL = listener };
        //  Pass the internal listener to the unsafe Mynewt API.
        unsafe { sensor_register_listener(sensor, &mut LISTENER_INTERNAL) };
    }
    Ok(())
}
    bc06:	defe      	udf	#254	; 0xfe
    for i in 0 .. MAX_SENSOR_LISTENERS {
    bc08:	981d      	ldr	r0, [sp, #116]	; 0x74
    bc0a:	901e      	str	r0, [sp, #120]	; 0x78
    bc0c:	981e      	ldr	r0, [sp, #120]	; 0x78
    bc0e:	901b      	str	r0, [sp, #108]	; 0x6c
    bc10:	981b      	ldr	r0, [sp, #108]	; 0x6c
    bc12:	901f      	str	r0, [sp, #124]	; 0x7c
        let info = unsafe { SENSOR_LISTENERS[i] };        
    bc14:	981f      	ldr	r0, [sp, #124]	; 0x7c
    bc16:	2802      	cmp	r0, #2
    bc18:	900d      	str	r0, [sp, #52]	; 0x34
    bc1a:	d305      	bcc.n	bc28 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x7e>
    bc1c:	e10e      	b.n	be3c <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x292>
    for i in 0 .. MAX_SENSOR_LISTENERS {
    bc1e:	e7ff      	b.n	bc20 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x76>
    if arg < MAX_SENSOR_LISTENERS {
    bc20:	9816      	ldr	r0, [sp, #88]	; 0x58
    bc22:	2802      	cmp	r0, #2
    bc24:	d351      	bcc.n	bcca <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x120>
    bc26:	e068      	b.n	bcfa <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x150>
        let info = unsafe { SENSOR_LISTENERS[i] };        
    bc28:	980d      	ldr	r0, [sp, #52]	; 0x34
    bc2a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    bc2e:	f240 1200 	movw	r2, #256	; 0x100
    bc32:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bc36:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
    bc3a:	aa20      	add	r2, sp, #128	; 0x80
    bc3c:	e8b1 5038 	ldmia.w	r1!, {r3, r4, r5, ip, lr}
    bc40:	e8a2 5038 	stmia.w	r2!, {r3, r4, r5, ip, lr}
    bc44:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
    bc48:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
        if  listener.sl_sensor_type == info.listener.sl_sensor_type &&
    bc4c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    bc4e:	680a      	ldr	r2, [r1, #0]
    bc50:	684b      	ldr	r3, [r1, #4]
    bc52:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
    bc56:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    bc5a:	ea83 030e 	eor.w	r3, r3, lr
    bc5e:	ea82 020c 	eor.w	r2, r2, ip
    bc62:	431a      	orrs	r2, r3
    bc64:	2a00      	cmp	r2, #0
    bc66:	d018      	beq.n	bc9a <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0xf0>
    bc68:	e013      	b.n	bc92 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0xe8>
    bc6a:	2000      	movs	r0, #0
    bc6c:	f88d 00ae 	strb.w	r0, [sp, #174]	; 0xae
    bc70:	e009      	b.n	bc86 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0xdc>
            listener.sl_arg         == info.listener.sl_arg {
    bc72:	9813      	ldr	r0, [sp, #76]	; 0x4c
    bc74:	68c1      	ldr	r1, [r0, #12]
    bc76:	9a25      	ldr	r2, [sp, #148]	; 0x94
    bc78:	1a89      	subs	r1, r1, r2
    bc7a:	fab1 f181 	clz	r1, r1
    bc7e:	0949      	lsrs	r1, r1, #5
        if  listener.sl_sensor_type == info.listener.sl_sensor_type &&
    bc80:	f88d 10ae 	strb.w	r1, [sp, #174]	; 0xae
    bc84:	e7ff      	b.n	bc86 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0xdc>
    bc86:	f89d 00ae 	ldrb.w	r0, [sp, #174]	; 0xae
    bc8a:	07c0      	lsls	r0, r0, #31
    bc8c:	2800      	cmp	r0, #0
    bc8e:	d118      	bne.n	bcc2 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x118>
    bc90:	e01a      	b.n	bcc8 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x11e>
    bc92:	2000      	movs	r0, #0
    bc94:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
    bc98:	e007      	b.n	bcaa <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x100>
            listener.sl_func        == info.listener.sl_func &&
    bc9a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    bc9c:	3008      	adds	r0, #8
    bc9e:	a920      	add	r1, sp, #128	; 0x80
    bca0:	3110      	adds	r1, #16
    bca2:	f7fe fdc8 	bl	a836 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h9e19357b9e0a14b3E>
    bca6:	900c      	str	r0, [sp, #48]	; 0x30
    bca8:	e005      	b.n	bcb6 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x10c>
        if  listener.sl_sensor_type == info.listener.sl_sensor_type &&
    bcaa:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
    bcae:	07c0      	lsls	r0, r0, #31
    bcb0:	2800      	cmp	r0, #0
    bcb2:	d1de      	bne.n	bc72 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0xc8>
    bcb4:	e7d9      	b.n	bc6a <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0xc0>
    bcb6:	980c      	ldr	r0, [sp, #48]	; 0x30
    bcb8:	f000 0101 	and.w	r1, r0, #1
    bcbc:	f88d 10af 	strb.w	r1, [sp, #175]	; 0xaf
    bcc0:	e7f3      	b.n	bcaa <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x100>
            arg = i;  //  Found the match
    bcc2:	981f      	ldr	r0, [sp, #124]	; 0x7c
    bcc4:	9016      	str	r0, [sp, #88]	; 0x58
            break;
    bcc6:	e7ab      	b.n	bc20 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x76>
    for i in 0 .. MAX_SENSOR_LISTENERS {
    bcc8:	e78e      	b.n	bbe8 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x3e>
        unsafe { sensor_register_listener(sensor, &mut SENSOR_LISTENERS[arg].listener) };
    bcca:	9814      	ldr	r0, [sp, #80]	; 0x50
    bccc:	9916      	ldr	r1, [sp, #88]	; 0x58
    bcce:	2901      	cmp	r1, #1
    bcd0:	900b      	str	r0, [sp, #44]	; 0x2c
    bcd2:	910a      	str	r1, [sp, #40]	; 0x28
    bcd4:	f200 80bb 	bhi.w	be4e <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x2a4>
    bcd8:	e7ff      	b.n	bcda <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x130>
    bcda:	980a      	ldr	r0, [sp, #40]	; 0x28
    bcdc:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    bce0:	f240 1200 	movw	r2, #256	; 0x100
    bce4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bce8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
    bcec:	3108      	adds	r1, #8
    bcee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bcf0:	f004 fadc 	bl	102ac <sensor_register_listener>
    bcf4:	9009      	str	r0, [sp, #36]	; 0x24
    bcf6:	e7ff      	b.n	bcf8 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x14e>
    if arg < MAX_SENSOR_LISTENERS {
    bcf8:	e092      	b.n	be20 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x276>
        unsafe { assert_eq!(LISTENER_INTERNAL.sl_sensor_type, 0, "reg lis") };  //  Make sure it's not used.
    bcfa:	f240 1050 	movw	r0, #336	; 0x150
    bcfe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bd02:	902c      	str	r0, [sp, #176]	; 0xb0
    bd04:	f24a 6038 	movw	r0, #42552	; 0xa638
    bd08:	f2c0 0002 	movt	r0, #2
    bd0c:	902d      	str	r0, [sp, #180]	; 0xb4
    bd0e:	982c      	ldr	r0, [sp, #176]	; 0xb0
    bd10:	902e      	str	r0, [sp, #184]	; 0xb8
    bd12:	982d      	ldr	r0, [sp, #180]	; 0xb4
    bd14:	902f      	str	r0, [sp, #188]	; 0xbc
    bd16:	982e      	ldr	r0, [sp, #184]	; 0xb8
    bd18:	6801      	ldr	r1, [r0, #0]
    bd1a:	6840      	ldr	r0, [r0, #4]
    bd1c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    bd1e:	6813      	ldr	r3, [r2, #0]
    bd20:	6852      	ldr	r2, [r2, #4]
    bd22:	4050      	eors	r0, r2
    bd24:	4059      	eors	r1, r3
    bd26:	4308      	orrs	r0, r1
    bd28:	2800      	cmp	r0, #0
    bd2a:	d014      	beq.n	bd56 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x1ac>
    bd2c:	e7ff      	b.n	bd2e <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x184>
    bd2e:	982e      	ldr	r0, [sp, #184]	; 0xb8
    bd30:	903f      	str	r0, [sp, #252]	; 0xfc
    bd32:	982f      	ldr	r0, [sp, #188]	; 0xbc
    bd34:	9040      	str	r0, [sp, #256]	; 0x100
    bd36:	4668      	mov	r0, sp
    bd38:	2100      	movs	r1, #0
    bd3a:	6001      	str	r1, [r0, #0]
    bd3c:	f24a 6148 	movw	r1, #42568	; 0xa648
    bd40:	f2c0 0102 	movt	r1, #2
    bd44:	f24a 531c 	movw	r3, #42268	; 0xa51c
    bd48:	f2c0 0302 	movt	r3, #2
    bd4c:	a841      	add	r0, sp, #260	; 0x104
    bd4e:	2201      	movs	r2, #1
    bd50:	f7fc fed8 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    bd54:	e014      	b.n	bd80 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x1d6>
    bd56:	a84a      	add	r0, sp, #296	; 0x128
        unsafe { LISTENER_INTERNAL = listener };
    bd58:	9913      	ldr	r1, [sp, #76]	; 0x4c
    bd5a:	4602      	mov	r2, r0
    bd5c:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
    bd60:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
    bd64:	f240 1150 	movw	r1, #336	; 0x150
    bd68:	f2c2 0100 	movt	r1, #8192	; 0x2000
    bd6c:	460a      	mov	r2, r1
    bd6e:	e890 5078 	ldmia.w	r0, {r3, r4, r5, r6, ip, lr}
    bd72:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
        unsafe { sensor_register_listener(sensor, &mut LISTENER_INTERNAL) };
    bd76:	9814      	ldr	r0, [sp, #80]	; 0x50
    bd78:	f004 fa98 	bl	102ac <sensor_register_listener>
    bd7c:	9008      	str	r0, [sp, #32]
    bd7e:	e04e      	b.n	be1e <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x274>
    bd80:	a83f      	add	r0, sp, #252	; 0xfc
        unsafe { assert_eq!(LISTENER_INTERNAL.sl_sensor_type, 0, "reg lis") };  //  Make sure it's not used.
    bd82:	903c      	str	r0, [sp, #240]	; 0xf0
    bd84:	a840      	add	r0, sp, #256	; 0x100
    bd86:	903d      	str	r0, [sp, #244]	; 0xf4
    bd88:	a841      	add	r0, sp, #260	; 0x104
    bd8a:	903e      	str	r0, [sp, #248]	; 0xf8
    bd8c:	983c      	ldr	r0, [sp, #240]	; 0xf0
    bd8e:	9047      	str	r0, [sp, #284]	; 0x11c
    bd90:	983d      	ldr	r0, [sp, #244]	; 0xf4
    bd92:	9048      	str	r0, [sp, #288]	; 0x120
    bd94:	983e      	ldr	r0, [sp, #248]	; 0xf8
    bd96:	9049      	str	r0, [sp, #292]	; 0x124
    bd98:	9847      	ldr	r0, [sp, #284]	; 0x11c
    bd9a:	f24b 31f1 	movw	r1, #46065	; 0xb3f1
    bd9e:	f2c0 0100 	movt	r1, #0
    bda2:	f7ff fc3e 	bl	b622 <_ZN4core3fmt10ArgumentV13new17hbed613464c36272dE>
    bda6:	9007      	str	r0, [sp, #28]
    bda8:	9106      	str	r1, [sp, #24]
    bdaa:	e7ff      	b.n	bdac <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x202>
    bdac:	9848      	ldr	r0, [sp, #288]	; 0x120
    bdae:	f24b 31f1 	movw	r1, #46065	; 0xb3f1
    bdb2:	f2c0 0100 	movt	r1, #0
    bdb6:	f7ff fc34 	bl	b622 <_ZN4core3fmt10ArgumentV13new17hbed613464c36272dE>
    bdba:	9005      	str	r0, [sp, #20]
    bdbc:	9104      	str	r1, [sp, #16]
    bdbe:	e7ff      	b.n	bdc0 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x216>
    bdc0:	9849      	ldr	r0, [sp, #292]	; 0x124
    bdc2:	f24d 2143 	movw	r1, #53827	; 0xd243
    bdc6:	f2c0 0100 	movt	r1, #0
    bdca:	f7ff fbc6 	bl	b55a <_ZN4core3fmt10ArgumentV13new17h77e41a362c8b7a28E>
    bdce:	9003      	str	r0, [sp, #12]
    bdd0:	9102      	str	r1, [sp, #8]
    bdd2:	e7ff      	b.n	bdd4 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x22a>
    bdd4:	9807      	ldr	r0, [sp, #28]
    bdd6:	9036      	str	r0, [sp, #216]	; 0xd8
    bdd8:	9906      	ldr	r1, [sp, #24]
    bdda:	9137      	str	r1, [sp, #220]	; 0xdc
    bddc:	9a05      	ldr	r2, [sp, #20]
    bdde:	9238      	str	r2, [sp, #224]	; 0xe0
    bde0:	9b04      	ldr	r3, [sp, #16]
    bde2:	9339      	str	r3, [sp, #228]	; 0xe4
    bde4:	f8dd c00c 	ldr.w	ip, [sp, #12]
    bde8:	f8cd c0e8 	str.w	ip, [sp, #232]	; 0xe8
    bdec:	f8dd e008 	ldr.w	lr, [sp, #8]
    bdf0:	f8cd e0ec 	str.w	lr, [sp, #236]	; 0xec
    bdf4:	466c      	mov	r4, sp
    bdf6:	2503      	movs	r5, #3
    bdf8:	6025      	str	r5, [r4, #0]
    bdfa:	f24a 41f0 	movw	r1, #42224	; 0xa4f0
    bdfe:	f2c0 0102 	movt	r1, #2
    be02:	a830      	add	r0, sp, #192	; 0xc0
    be04:	ab36      	add	r3, sp, #216	; 0xd8
    be06:	462a      	mov	r2, r5
    be08:	f7fc fe7c 	bl	8b04 <_ZN4core3fmt9Arguments6new_v117h3bd4528f8c6088aeE>
    be0c:	e7ff      	b.n	be0e <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x264>
    be0e:	f24a 6150 	movw	r1, #42576	; 0xa650
    be12:	f2c0 0102 	movt	r1, #2
    be16:	a830      	add	r0, sp, #192	; 0xc0
    be18:	f000 fd55 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    be1c:	defe      	udf	#254	; 0xfe
    if arg < MAX_SENSOR_LISTENERS {
    be1e:	e7ff      	b.n	be20 <_ZN6mynewt2hw6sensor17register_listener17h17ebbfb47266c768E+0x276>
    be20:	2000      	movs	r0, #0
    Ok(())
    be22:	9015      	str	r0, [sp, #84]	; 0x54
    be24:	2001      	movs	r0, #1
    be26:	9015      	str	r0, [sp, #84]	; 0x54
}
    be28:	9815      	ldr	r0, [sp, #84]	; 0x54
    be2a:	b052      	add	sp, #328	; 0x148
    be2c:	bd70      	pop	{r4, r5, r6, pc}
    let mut arg = MAX_SENSOR_LISTENERS + 1;
    be2e:	f24a 50fc 	movw	r0, #42492	; 0xa5fc
    be32:	f2c0 0002 	movt	r0, #2
    be36:	f000 fd09 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    be3a:	defe      	udf	#254	; 0xfe
        let info = unsafe { SENSOR_LISTENERS[i] };        
    be3c:	f24a 6014 	movw	r0, #42516	; 0xa614
    be40:	f2c0 0002 	movt	r0, #2
    be44:	2202      	movs	r2, #2
    be46:	990d      	ldr	r1, [sp, #52]	; 0x34
    be48:	f000 fd1d 	bl	c886 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
    be4c:	defe      	udf	#254	; 0xfe
        unsafe { sensor_register_listener(sensor, &mut SENSOR_LISTENERS[arg].listener) };
    be4e:	f24a 6024 	movw	r0, #42532	; 0xa624
    be52:	f2c0 0002 	movt	r0, #2
    be56:	2202      	movs	r2, #2
    be58:	990a      	ldr	r1, [sp, #40]	; 0x28
    be5a:	f000 fd14 	bl	c886 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
    be5e:	defe      	udf	#254	; 0xfe

0000be60 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E>:

///  Wrapped version of `sensor_data_func` used by Visual Embedded Rust
pub type SensorValueFunc = fn(sensor_value: &SensorValue) -> MynewtResult<()>;

///  Return a new `sensor_listener` with the sensor type and sensor value function. Called by Visual Embedded Rust.
pub fn new_sensor_listener(
    be60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be64:	b0cd      	sub	sp, #308	; 0x134
    be66:	469c      	mov	ip, r3
    be68:	4696      	mov	lr, r2
    be6a:	9c56      	ldr	r4, [sp, #344]	; 0x158
    be6c:	460d      	mov	r5, r1
    be6e:	9115      	str	r1, [sp, #84]	; 0x54
    be70:	9317      	str	r3, [sp, #92]	; 0x5c
    be72:	9216      	str	r2, [sp, #88]	; 0x58
    sensor_key:     &'static Strn,
    sensor_type:    sensor_type_t, 
    listener_func:  SensorValueFunc
) -> MynewtResult<sensor_listener> {
    assert!(!sensor_key.is_empty(), "missing sensor key");
    be74:	9915      	ldr	r1, [sp, #84]	; 0x54
    be76:	9014      	str	r0, [sp, #80]	; 0x50
    be78:	4608      	mov	r0, r1
    be7a:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
    be7e:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    be82:	9411      	str	r4, [sp, #68]	; 0x44
    be84:	9510      	str	r5, [sp, #64]	; 0x40
    be86:	f7fd fa30 	bl	92ea <_ZN6mynewt4Strn8is_empty17hf6264bbc9f796f10E>
    be8a:	900f      	str	r0, [sp, #60]	; 0x3c
    be8c:	e7ff      	b.n	be8e <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x2e>
    be8e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    be90:	07c1      	lsls	r1, r0, #31
    be92:	2900      	cmp	r1, #0
    be94:	d007      	beq.n	bea6 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x46>
    be96:	e7ff      	b.n	be98 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x38>
    be98:	f24a 6074 	movw	r0, #42612	; 0xa674
    be9c:	f2c0 0002 	movt	r0, #2
    bea0:	f000 fcd4 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    bea4:	defe      	udf	#254	; 0xfe
    bea6:	2003      	movs	r0, #3
    bea8:	2100      	movs	r1, #0
    //  Find an unused `sensor_listener_info`
    let mut arg = MAX_SENSOR_LISTENERS + 1;
    beaa:	2900      	cmp	r1, #0
    beac:	900e      	str	r0, [sp, #56]	; 0x38
    beae:	f040 80c7 	bne.w	c040 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x1e0>
    beb2:	e7ff      	b.n	beb4 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x54>
    beb4:	980e      	ldr	r0, [sp, #56]	; 0x38
    beb6:	9018      	str	r0, [sp, #96]	; 0x60
    beb8:	2100      	movs	r1, #0
    for i in 0 .. MAX_SENSOR_LISTENERS {
    beba:	9119      	str	r1, [sp, #100]	; 0x64
    bebc:	2102      	movs	r1, #2
    bebe:	911a      	str	r1, [sp, #104]	; 0x68
    bec0:	9819      	ldr	r0, [sp, #100]	; 0x64
    bec2:	991a      	ldr	r1, [sp, #104]	; 0x68
    bec4:	f7fe ff04 	bl	acd0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h612eb9cec733e365E>
    bec8:	900d      	str	r0, [sp, #52]	; 0x34
    beca:	910c      	str	r1, [sp, #48]	; 0x30
    becc:	e7ff      	b.n	bece <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x6e>
    bece:	980d      	ldr	r0, [sp, #52]	; 0x34
    bed0:	901b      	str	r0, [sp, #108]	; 0x6c
    bed2:	990c      	ldr	r1, [sp, #48]	; 0x30
    bed4:	911c      	str	r1, [sp, #112]	; 0x70
    bed6:	e7ff      	b.n	bed8 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x78>
    bed8:	a81b      	add	r0, sp, #108	; 0x6c
    beda:	f000 fa5e 	bl	c39a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE>
    bede:	911f      	str	r1, [sp, #124]	; 0x7c
    bee0:	901e      	str	r0, [sp, #120]	; 0x78
    bee2:	e7ff      	b.n	bee4 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x84>
    bee4:	981e      	ldr	r0, [sp, #120]	; 0x78
    bee6:	2800      	cmp	r0, #0
    bee8:	900b      	str	r0, [sp, #44]	; 0x2c
    beea:	d010      	beq.n	bf0e <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0xae>
    beec:	e7ff      	b.n	beee <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x8e>
    beee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bef0:	2801      	cmp	r0, #1
    bef2:	d001      	beq.n	bef8 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x98>
    bef4:	e7ff      	b.n	bef6 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x96>
        listener_func,
        listener,
    } };
    //  Return the Mynewt `sensor_listener`
    Ok(listener)
}
    bef6:	defe      	udf	#254	; 0xfe
    for i in 0 .. MAX_SENSOR_LISTENERS {
    bef8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    befa:	9020      	str	r0, [sp, #128]	; 0x80
    befc:	9820      	ldr	r0, [sp, #128]	; 0x80
    befe:	901d      	str	r0, [sp, #116]	; 0x74
    bf00:	981d      	ldr	r0, [sp, #116]	; 0x74
    bf02:	9021      	str	r0, [sp, #132]	; 0x84
        let info = unsafe { SENSOR_LISTENERS[i] };
    bf04:	9821      	ldr	r0, [sp, #132]	; 0x84
    bf06:	2802      	cmp	r0, #2
    bf08:	900a      	str	r0, [sp, #40]	; 0x28
    bf0a:	d305      	bcc.n	bf18 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0xb8>
    bf0c:	e09f      	b.n	c04e <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x1ee>
    for i in 0 .. MAX_SENSOR_LISTENERS {
    bf0e:	e7ff      	b.n	bf10 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0xb0>
    assert!(arg < MAX_SENSOR_LISTENERS, "increase MAX_SENSOR_LISTENERS");  //  Too many listeners registered. Increase MAX_SENSOR_LISTENERS
    bf10:	9818      	ldr	r0, [sp, #96]	; 0x60
    bf12:	2801      	cmp	r0, #1
    bf14:	d820      	bhi.n	bf58 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0xf8>
    bf16:	e026      	b.n	bf66 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x106>
        let info = unsafe { SENSOR_LISTENERS[i] };
    bf18:	980a      	ldr	r0, [sp, #40]	; 0x28
    bf1a:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    bf1e:	f240 1200 	movw	r2, #256	; 0x100
    bf22:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bf26:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
    bf2a:	aa22      	add	r2, sp, #136	; 0x88
    bf2c:	e8b1 5038 	ldmia.w	r1!, {r3, r4, r5, ip, lr}
    bf30:	e8a2 5038 	stmia.w	r2!, {r3, r4, r5, ip, lr}
    bf34:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
    bf38:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
        if info.sensor_key.is_empty() {
    bf3c:	982a      	ldr	r0, [sp, #168]	; 0xa8
    bf3e:	f7fd f9d4 	bl	92ea <_ZN6mynewt4Strn8is_empty17hf6264bbc9f796f10E>
    bf42:	9009      	str	r0, [sp, #36]	; 0x24
    bf44:	e7ff      	b.n	bf46 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0xe6>
    bf46:	9809      	ldr	r0, [sp, #36]	; 0x24
    bf48:	07c1      	lsls	r1, r0, #31
    bf4a:	2900      	cmp	r1, #0
    bf4c:	d003      	beq.n	bf56 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0xf6>
    bf4e:	e7ff      	b.n	bf50 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0xf0>
            arg = i;
    bf50:	9821      	ldr	r0, [sp, #132]	; 0x84
    bf52:	9018      	str	r0, [sp, #96]	; 0x60
            break;
    bf54:	e7dc      	b.n	bf10 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0xb0>
    for i in 0 .. MAX_SENSOR_LISTENERS {
    bf56:	e7bf      	b.n	bed8 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x78>
    assert!(arg < MAX_SENSOR_LISTENERS, "increase MAX_SENSOR_LISTENERS");  //  Too many listeners registered. Increase MAX_SENSOR_LISTENERS
    bf58:	f24a 60d4 	movw	r0, #42708	; 0xa6d4
    bf5c:	f2c0 0002 	movt	r0, #2
    bf60:	f000 fc74 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    bf64:	defe      	udf	#254	; 0xfe
        sl_sensor_type: sensor_type,
    bf66:	9816      	ldr	r0, [sp, #88]	; 0x58
    bf68:	9917      	ldr	r1, [sp, #92]	; 0x5c
        sl_func:        Some(wrap_sensor_listener),
    bf6a:	f24c 0273 	movw	r2, #49267	; 0xc073
    bf6e:	f2c0 0200 	movt	r2, #0
    bf72:	9233      	str	r2, [sp, #204]	; 0xcc
        sl_arg:         arg as *mut c_void,
    bf74:	9a18      	ldr	r2, [sp, #96]	; 0x60
    bf76:	2300      	movs	r3, #0
        ..fill_zero!(sensor_listener)
    bf78:	933f      	str	r3, [sp, #252]	; 0xfc
    bf7a:	933e      	str	r3, [sp, #248]	; 0xf8
    bf7c:	933d      	str	r3, [sp, #244]	; 0xf4
    bf7e:	933c      	str	r3, [sp, #240]	; 0xf0
    bf80:	933b      	str	r3, [sp, #236]	; 0xec
    bf82:	933a      	str	r3, [sp, #232]	; 0xe8
    bf84:	ab34      	add	r3, sp, #208	; 0xd0
    bf86:	f10d 0ce8 	add.w	ip, sp, #232	; 0xe8
    bf8a:	f04f 0e18 	mov.w	lr, #24
    bf8e:	9008      	str	r0, [sp, #32]
    bf90:	4618      	mov	r0, r3
    bf92:	9107      	str	r1, [sp, #28]
    bf94:	4661      	mov	r1, ip
    bf96:	9206      	str	r2, [sp, #24]
    bf98:	4672      	mov	r2, lr
    bf9a:	f01d fe9f 	bl	29cdc <__aeabi_memcpy>
    bf9e:	9005      	str	r0, [sp, #20]
    bfa0:	e7ff      	b.n	bfa2 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x142>
    let listener = sensor_listener {
    bfa2:	9808      	ldr	r0, [sp, #32]
    bfa4:	902c      	str	r0, [sp, #176]	; 0xb0
    bfa6:	9907      	ldr	r1, [sp, #28]
    bfa8:	912d      	str	r1, [sp, #180]	; 0xb4
    bfaa:	9a33      	ldr	r2, [sp, #204]	; 0xcc
    bfac:	922e      	str	r2, [sp, #184]	; 0xb8
    bfae:	9a06      	ldr	r2, [sp, #24]
    bfb0:	922f      	str	r2, [sp, #188]	; 0xbc
    bfb2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    bfb4:	9330      	str	r3, [sp, #192]	; 0xc0
        sensor_key,
    bfb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
        sensor_type,
    bfb8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
    bfbc:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
        listener_func,
    bfc0:	9c56      	ldr	r4, [sp, #344]	; 0x158
    bfc2:	ad2c      	add	r5, sp, #176	; 0xb0
    bfc4:	ae40      	add	r6, sp, #256	; 0x100
        listener,
    bfc6:	e895 0f81 	ldmia.w	r5, {r0, r7, r8, r9, sl, fp}
    bfca:	e886 0f81 	stmia.w	r6, {r0, r7, r8, r9, sl, fp}
    unsafe { SENSOR_LISTENERS[arg] = sensor_listener_info {
    bfce:	9818      	ldr	r0, [sp, #96]	; 0x60
    bfd0:	2801      	cmp	r0, #1
    bfd2:	9304      	str	r3, [sp, #16]
    bfd4:	f8cd c00c 	str.w	ip, [sp, #12]
    bfd8:	f8cd e008 	str.w	lr, [sp, #8]
    bfdc:	9401      	str	r4, [sp, #4]
    bfde:	9000      	str	r0, [sp, #0]
    bfe0:	d83e      	bhi.n	c060 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x200>
    bfe2:	e7ff      	b.n	bfe4 <_ZN6mynewt2hw6sensor19new_sensor_listener17he57f742295244c52E+0x184>
    bfe4:	9800      	ldr	r0, [sp, #0]
    bfe6:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    bfea:	f240 1200 	movw	r2, #256	; 0x100
    bfee:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bff2:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    bff6:	f8dd c010 	ldr.w	ip, [sp, #16]
    bffa:	f8c3 c020 	str.w	ip, [r3, #32]
    bffe:	f8dd e00c 	ldr.w	lr, [sp, #12]
    c002:	f842 e031 	str.w	lr, [r2, r1, lsl #3]
    c006:	9902      	ldr	r1, [sp, #8]
    c008:	6059      	str	r1, [r3, #4]
    c00a:	9a01      	ldr	r2, [sp, #4]
    c00c:	625a      	str	r2, [r3, #36]	; 0x24
    c00e:	3308      	adds	r3, #8
    c010:	ac40      	add	r4, sp, #256	; 0x100
    c012:	e894 07e0 	ldmia.w	r4, {r5, r6, r7, r8, r9, sl}
    c016:	e883 07e0 	stmia.w	r3, {r5, r6, r7, r8, r9, sl}
    c01a:	ab2c      	add	r3, sp, #176	; 0xb0
    c01c:	ac46      	add	r4, sp, #280	; 0x118
    Ok(listener)
    c01e:	4625      	mov	r5, r4
    c020:	e893 0fc0 	ldmia.w	r3, {r6, r7, r8, r9, sl, fp}
    c024:	e885 0fc0 	stmia.w	r5, {r6, r7, r8, r9, sl, fp}
    c028:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c02a:	f103 0508 	add.w	r5, r3, #8
    c02e:	e894 0fc0 	ldmia.w	r4, {r6, r7, r8, r9, sl, fp}
    c032:	e885 0fc0 	stmia.w	r5, {r6, r7, r8, r9, sl, fp}
    c036:	2400      	movs	r4, #0
    c038:	601c      	str	r4, [r3, #0]
}
    c03a:	b04d      	add	sp, #308	; 0x134
    c03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    let mut arg = MAX_SENSOR_LISTENERS + 1;
    c040:	f24a 608c 	movw	r0, #42636	; 0xa68c
    c044:	f2c0 0002 	movt	r0, #2
    c048:	f000 fc00 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    c04c:	defe      	udf	#254	; 0xfe
        let info = unsafe { SENSOR_LISTENERS[i] };
    c04e:	f24a 60a4 	movw	r0, #42660	; 0xa6a4
    c052:	f2c0 0002 	movt	r0, #2
    c056:	2202      	movs	r2, #2
    c058:	990a      	ldr	r1, [sp, #40]	; 0x28
    c05a:	f000 fc14 	bl	c886 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
    c05e:	defe      	udf	#254	; 0xfe
    unsafe { SENSOR_LISTENERS[arg] = sensor_listener_info {
    c060:	f24a 60ec 	movw	r0, #42732	; 0xa6ec
    c064:	f2c0 0002 	movt	r0, #2
    c068:	2202      	movs	r2, #2
    c06a:	9900      	ldr	r1, [sp, #0]
    c06c:	f000 fc0b 	bl	c886 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
    c070:	defe      	udf	#254	; 0xfe

0000c072 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE>:

///  Wrapped Sensor Listener that converts Mynewt `sensor_data` into our `sensor_value` format and calls the application's Listener Function
extern "C" fn wrap_sensor_listener(
    c072:	b5b0      	push	{r4, r5, r7, lr}
    c074:	b0b0      	sub	sp, #192	; 0xc0
    c076:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    c078:	f8dd c0d0 	ldr.w	ip, [sp, #208]	; 0xd0
    c07c:	4696      	mov	lr, r2
    c07e:	460c      	mov	r4, r1
    c080:	4605      	mov	r5, r0
    c082:	900b      	str	r0, [sp, #44]	; 0x2c
    c084:	910c      	str	r1, [sp, #48]	; 0x30
    c086:	920d      	str	r2, [sp, #52]	; 0x34
    c088:	930f      	str	r3, [sp, #60]	; 0x3c
    c08a:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
    arg:           sensor_arg,
    sensor_data:   sensor_data_ptr,
    sensor_type:   sensor_type_t
) -> i32 {
    //  Use `arg` to fetch the `sensor_listener_info`
    let arg = arg as usize;
    c08e:	980c      	ldr	r0, [sp, #48]	; 0x30
    c090:	9011      	str	r0, [sp, #68]	; 0x44
    assert!(arg < MAX_SENSOR_LISTENERS, "bad sensor arg");
    c092:	9811      	ldr	r0, [sp, #68]	; 0x44
    c094:	2802      	cmp	r0, #2
    c096:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    c09a:	9409      	str	r4, [sp, #36]	; 0x24
    c09c:	9508      	str	r5, [sp, #32]
    c09e:	d307      	bcc.n	c0b0 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0x3e>
    c0a0:	e7ff      	b.n	c0a2 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0x30>
    c0a2:	f24a 700c 	movw	r0, #42764	; 0xa70c
    c0a6:	f2c0 0002 	movt	r0, #2
    c0aa:	f000 fbcf 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    c0ae:	defe      	udf	#254	; 0xfe
    let info = unsafe { SENSOR_LISTENERS[arg] };
    c0b0:	9811      	ldr	r0, [sp, #68]	; 0x44
    c0b2:	2801      	cmp	r0, #1
    c0b4:	9007      	str	r0, [sp, #28]
    c0b6:	d871      	bhi.n	c19c <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0x12a>
    c0b8:	e7ff      	b.n	c0ba <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0x48>
    c0ba:	9807      	ldr	r0, [sp, #28]
    c0bc:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    c0c0:	f240 1200 	movw	r2, #256	; 0x100
    c0c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
    c0c8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
    c0cc:	aa12      	add	r2, sp, #72	; 0x48
    c0ce:	e8b1 5038 	ldmia.w	r1!, {r3, r4, r5, ip, lr}
    c0d2:	e8a2 5038 	stmia.w	r2!, {r3, r4, r5, ip, lr}
    c0d6:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
    c0da:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
    assert!(!info.sensor_key.is_empty(), "missing sensor key");
    c0de:	981a      	ldr	r0, [sp, #104]	; 0x68
    c0e0:	f7fd f903 	bl	92ea <_ZN6mynewt4Strn8is_empty17hf6264bbc9f796f10E>
    c0e4:	9006      	str	r0, [sp, #24]
    c0e6:	e7ff      	b.n	c0e8 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0x76>
    c0e8:	9806      	ldr	r0, [sp, #24]
    c0ea:	07c1      	lsls	r1, r0, #31
    c0ec:	2900      	cmp	r1, #0
    c0ee:	d007      	beq.n	c100 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0x8e>
    c0f0:	e7ff      	b.n	c0f2 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0x80>
    c0f2:	f24a 7034 	movw	r0, #42804	; 0xa734
    c0f6:	f2c0 0002 	movt	r0, #2
    c0fa:	f000 fba7 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    c0fe:	defe      	udf	#254	; 0xfe

    //  Check that the sensor data is valid
    if sensor_data.is_null() { return SYS_EINVAL }  //  Exit if data is missing
    c100:	980d      	ldr	r0, [sp, #52]	; 0x34
    c102:	f000 f937 	bl	c374 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcb61da1d9a7f9d5bE>
    c106:	9005      	str	r0, [sp, #20]
    c108:	e7ff      	b.n	c10a <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0x98>
    c10a:	9805      	ldr	r0, [sp, #20]
    c10c:	07c1      	lsls	r1, r0, #31
    c10e:	2900      	cmp	r1, #0
    c110:	d008      	beq.n	c124 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0xb2>
    c112:	e7ff      	b.n	c114 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0xa2>
    c114:	f06f 0001 	mvn.w	r0, #1
    c118:	9010      	str	r0, [sp, #64]	; 0x40
    c11a:	e002      	b.n	c122 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0xb0>
    if let Err(_err) = res {
        SYS_EINVAL  //  Return error to Mynewt
    } else {
        0           //  Return 0 to Mynewt to indicate no error
    }
}
    c11c:	9810      	ldr	r0, [sp, #64]	; 0x40
    c11e:	b030      	add	sp, #192	; 0xc0
    c120:	bdb0      	pop	{r4, r5, r7, pc}
    if sensor_data.is_null() { return SYS_EINVAL }  //  Exit if data is missing
    c122:	e7fb      	b.n	c11c <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0xaa>
    assert!(!sensor.is_null(), "null sensor");
    c124:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c126:	f000 fa24 	bl	c572 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h80b6c30939e62171E>
    c12a:	9004      	str	r0, [sp, #16]
    c12c:	e7ff      	b.n	c12e <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0xbc>
    c12e:	9804      	ldr	r0, [sp, #16]
    c130:	07c1      	lsls	r1, r0, #31
    c132:	2900      	cmp	r1, #0
    c134:	d007      	beq.n	c146 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0xd4>
    c136:	e7ff      	b.n	c138 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0xc6>
    c138:	f24a 7058 	movw	r0, #42840	; 0xa758
    c13c:	f2c0 0002 	movt	r0, #2
    c140:	f000 fb84 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    c144:	defe      	udf	#254	; 0xfe
    let sensor_value = convert_sensor_data(sensor_data, info.sensor_key, sensor_type);
    c146:	990d      	ldr	r1, [sp, #52]	; 0x34
    c148:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    c14a:	980e      	ldr	r0, [sp, #56]	; 0x38
    c14c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c14e:	46ec      	mov	ip, sp
    c150:	f8cc 3004 	str.w	r3, [ip, #4]
    c154:	f8cc 0000 	str.w	r0, [ip]
    c158:	a81c      	add	r0, sp, #112	; 0x70
    c15a:	f7ff faff 	bl	b75c <_ZN6mynewt2hw6sensor19convert_sensor_data17h27de64de0c0b2970E>
    c15e:	e7ff      	b.n	c160 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0xee>
    if let SensorValueType::None = sensor_value.value { 
    c160:	981c      	ldr	r0, [sp, #112]	; 0x70
    c162:	2800      	cmp	r0, #0
    c164:	d104      	bne.n	c170 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0xfe>
    c166:	e7ff      	b.n	c168 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0xf6>
    c168:	f06f 0001 	mvn.w	r0, #1
        return SYS_EINVAL;   //  Exit if sensor is not ready
    c16c:	9010      	str	r0, [sp, #64]	; 0x40
    c16e:	e7d8      	b.n	c122 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0xb0>
    let res = (info.listener_func)(&sensor_value);
    c170:	981b      	ldr	r0, [sp, #108]	; 0x6c
    c172:	a91c      	add	r1, sp, #112	; 0x70
    c174:	9003      	str	r0, [sp, #12]
    c176:	4608      	mov	r0, r1
    c178:	9903      	ldr	r1, [sp, #12]
    c17a:	4788      	blx	r1
    c17c:	902e      	str	r0, [sp, #184]	; 0xb8
    c17e:	e7ff      	b.n	c180 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0x10e>
    if let Err(_err) = res {
    c180:	982e      	ldr	r0, [sp, #184]	; 0xb8
    c182:	2801      	cmp	r0, #1
    c184:	d006      	beq.n	c194 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0x122>
    c186:	e7ff      	b.n	c188 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0x116>
    c188:	982e      	ldr	r0, [sp, #184]	; 0xb8
    c18a:	902f      	str	r0, [sp, #188]	; 0xbc
    c18c:	f06f 0001 	mvn.w	r0, #1
        SYS_EINVAL  //  Return error to Mynewt
    c190:	9010      	str	r0, [sp, #64]	; 0x40
    if let Err(_err) = res {
    c192:	e002      	b.n	c19a <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0x128>
    c194:	2000      	movs	r0, #0
        0           //  Return 0 to Mynewt to indicate no error
    c196:	9010      	str	r0, [sp, #64]	; 0x40
    if let Err(_err) = res {
    c198:	e7ff      	b.n	c19a <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0x128>
}
    c19a:	e7bf      	b.n	c11c <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h3106c863967b02dcE+0xaa>
    let info = unsafe { SENSOR_LISTENERS[arg] };
    c19c:	f24a 7024 	movw	r0, #42788	; 0xa724
    c1a0:	f2c0 0002 	movt	r0, #2
    c1a4:	2202      	movs	r2, #2
    c1a6:	9907      	ldr	r1, [sp, #28]
    c1a8:	f000 fb6d 	bl	c886 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
    c1ac:	defe      	udf	#254	; 0xfe

0000c1ae <_ZN6mynewt2hw6sensor21null_sensor_data_func17hc0c8b3b45de7f5dbE>:
    sl_func: Some(null_sensor_data_func),
    ..fill_zero!(sensor_listener)
};

///  Define a default sensor data function in case there is none.
extern fn null_sensor_data_func(
    c1ae:	b5b0      	push	{r4, r5, r7, lr}
    c1b0:	b088      	sub	sp, #32
    c1b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c1b4:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    c1b8:	4696      	mov	lr, r2
    c1ba:	460c      	mov	r4, r1
    c1bc:	4605      	mov	r5, r0
    c1be:	9003      	str	r0, [sp, #12]
    c1c0:	9104      	str	r1, [sp, #16]
    c1c2:	9205      	str	r2, [sp, #20]
    c1c4:	9307      	str	r3, [sp, #28]
    c1c6:	f8cd c018 	str.w	ip, [sp, #24]
    c1ca:	2000      	movs	r0, #0
    _sensor: sensor_ptr, 
    _arg: sensor_arg, 
    _sensor_data: sensor_data_ptr, 
    _sensor_type: sensor_type_t) -> i32
    { 0 }
    c1cc:	f8cd e008 	str.w	lr, [sp, #8]
    c1d0:	9401      	str	r4, [sp, #4]
    c1d2:	9500      	str	r5, [sp, #0]
    c1d4:	b008      	add	sp, #32
    c1d6:	bdb0      	pop	{r4, r5, r7, pc}

0000c1d8 <_ZN6mynewt2hw6sensor22null_sensor_value_func17hd571166552189f92E>:

///  Define a default sensor value function in case there is none.
fn null_sensor_value_func(
    c1d8:	b084      	sub	sp, #16
    c1da:	4601      	mov	r1, r0
    c1dc:	9001      	str	r0, [sp, #4]
    c1de:	2000      	movs	r0, #0
    _sensor_value: &SensorValue
    ) -> MynewtResult<()> 
    { Ok(()) }
    c1e0:	9002      	str	r0, [sp, #8]
    c1e2:	2001      	movs	r0, #1
    c1e4:	9002      	str	r0, [sp, #8]
    c1e6:	9802      	ldr	r0, [sp, #8]
    c1e8:	9100      	str	r1, [sp, #0]
    c1ea:	b004      	add	sp, #16
    c1ec:	4770      	bx	lr

0000c1ee <_ZN6mynewt2hw10sensor_mgr14find_bydevname17h896b27dd8b8e6b9fE>:
    },
    Strn,
};

/// Returns an iterator of sensors that match the device name `devname`
pub fn find_bydevname(devname: &Strn) -> SensorsByDevname {
    c1ee:	b580      	push	{r7, lr}
    c1f0:	b088      	sub	sp, #32
    c1f2:	460a      	mov	r2, r1
    c1f4:	9104      	str	r1, [sp, #16]
    SensorsByDevname { 
        devname: *devname,
    c1f6:	9904      	ldr	r1, [sp, #16]
    c1f8:	680b      	ldr	r3, [r1, #0]
    c1fa:	f8d1 c004 	ldr.w	ip, [r1, #4]
    c1fe:	6889      	ldr	r1, [r1, #8]
    c200:	9107      	str	r1, [sp, #28]
    c202:	f8cd c018 	str.w	ip, [sp, #24]
    c206:	9305      	str	r3, [sp, #20]
        previous: core::ptr::null_mut()
    c208:	9203      	str	r2, [sp, #12]
    c20a:	9002      	str	r0, [sp, #8]
    c20c:	f7fd fb60 	bl	98d0 <_ZN4core3ptr8null_mut17h323310d988ac6279E>
    c210:	9001      	str	r0, [sp, #4]
    c212:	e7ff      	b.n	c214 <_ZN6mynewt2hw10sensor_mgr14find_bydevname17h896b27dd8b8e6b9fE+0x26>
    SensorsByDevname { 
    c214:	9805      	ldr	r0, [sp, #20]
    c216:	9906      	ldr	r1, [sp, #24]
    c218:	9a07      	ldr	r2, [sp, #28]
    c21a:	9b02      	ldr	r3, [sp, #8]
    c21c:	609a      	str	r2, [r3, #8]
    c21e:	6059      	str	r1, [r3, #4]
    c220:	6018      	str	r0, [r3, #0]
    c222:	9801      	ldr	r0, [sp, #4]
    c224:	60d8      	str	r0, [r3, #12]
    }
    // MynewtResult<*mut sensor>
}
    c226:	b008      	add	sp, #32
    c228:	bd80      	pop	{r7, pc}

0000c22a <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcbd1eb8875cb1b9fE>:
impl Iterator for SensorsByDevname {
    /// Iterator returns a pointer to a sensor
    type Item = sensor_ptr;

    /// Return the next sensor that matches the device name    
    fn next(&mut self) -> Option<sensor_ptr> {
    c22a:	b580      	push	{r7, lr}
    c22c:	b08a      	sub	sp, #40	; 0x28
    c22e:	4601      	mov	r1, r0
    c230:	9004      	str	r0, [sp, #16]
        //  Based on last iteration, find the next sensor with matching device name.
        let sensor = mgr_find_next_bydevname(&self.devname, self.previous)
    c232:	9804      	ldr	r0, [sp, #16]
    c234:	68c2      	ldr	r2, [r0, #12]
    c236:	ab08      	add	r3, sp, #32
    c238:	9003      	str	r0, [sp, #12]
    c23a:	4618      	mov	r0, r3
    c23c:	9b03      	ldr	r3, [sp, #12]
    c23e:	9102      	str	r1, [sp, #8]
    c240:	4619      	mov	r1, r3
    c242:	f000 f84b 	bl	c2dc <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h1885e7d2ce4be516E>
    c246:	e7ff      	b.n	c248 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcbd1eb8875cb1b9fE+0x1e>
    c248:	f24a 7170 	movw	r1, #42864	; 0xa770
    c24c:	f2c0 0102 	movt	r1, #2
    c250:	a808      	add	r0, sp, #32
    c252:	220b      	movs	r2, #11
    c254:	f7fc fc29 	bl	8aaa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hecdafdebd0535367E>
    c258:	9007      	str	r0, [sp, #28]
    c25a:	e7ff      	b.n	c25c <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcbd1eb8875cb1b9fE+0x32>
            .expect("find sensor");
        if sensor.is_null() { None }  //  If sensor not found, return None
    c25c:	9807      	ldr	r0, [sp, #28]
    c25e:	f000 f988 	bl	c572 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h80b6c30939e62171E>
    c262:	9001      	str	r0, [sp, #4]
    c264:	e7ff      	b.n	c266 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcbd1eb8875cb1b9fE+0x3c>
    c266:	9801      	ldr	r0, [sp, #4]
    c268:	07c1      	lsls	r1, r0, #31
    c26a:	2900      	cmp	r1, #0
    c26c:	d003      	beq.n	c276 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcbd1eb8875cb1b9fE+0x4c>
    c26e:	e7ff      	b.n	c270 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcbd1eb8875cb1b9fE+0x46>
    c270:	2000      	movs	r0, #0
    c272:	9005      	str	r0, [sp, #20]
    c274:	e007      	b.n	c286 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcbd1eb8875cb1b9fE+0x5c>
        else {
            //  If sensor found, remember this sensor for next iteration.
            self.previous = sensor;
    c276:	9807      	ldr	r0, [sp, #28]
    c278:	9904      	ldr	r1, [sp, #16]
    c27a:	60c8      	str	r0, [r1, #12]
            Some(sensor)  //  Return the sensor
    c27c:	9807      	ldr	r0, [sp, #28]
    c27e:	9006      	str	r0, [sp, #24]
    c280:	2001      	movs	r0, #1
    c282:	9005      	str	r0, [sp, #20]
        if sensor.is_null() { None }  //  If sensor not found, return None
    c284:	e7ff      	b.n	c286 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hcbd1eb8875cb1b9fE+0x5c>
        }
    }
    c286:	9805      	ldr	r0, [sp, #20]
    c288:	9906      	ldr	r1, [sp, #24]
    c28a:	b00a      	add	sp, #40	; 0x28
    c28c:	bd80      	pop	{r7, pc}

0000c28e <_ZN4core3ptr18real_drop_in_place17h234732f6022e6554E>:
    c28e:	b082      	sub	sp, #8
    c290:	4601      	mov	r1, r0
    c292:	9001      	str	r0, [sp, #4]
    c294:	9100      	str	r1, [sp, #0]
    c296:	b002      	add	sp, #8
    c298:	4770      	bx	lr

0000c29a <_ZN4core3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hac57f825172bc7a7E>:
    c29a:	b084      	sub	sp, #16
    c29c:	4601      	mov	r1, r0
    c29e:	9001      	str	r0, [sp, #4]
    c2a0:	9801      	ldr	r0, [sp, #4]
    c2a2:	9003      	str	r0, [sp, #12]
    c2a4:	2000      	movs	r0, #0
    c2a6:	9002      	str	r0, [sp, #8]
    c2a8:	9802      	ldr	r0, [sp, #8]
    c2aa:	9a03      	ldr	r2, [sp, #12]
    c2ac:	9100      	str	r1, [sp, #0]
    c2ae:	4611      	mov	r1, r2
    c2b0:	b004      	add	sp, #16
    c2b2:	4770      	bx	lr

0000c2b4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6aed0cbdf725fdeeE>:
    c2b4:	b580      	push	{r7, lr}
    c2b6:	b086      	sub	sp, #24
    c2b8:	460a      	mov	r2, r1
    c2ba:	4603      	mov	r3, r0
    c2bc:	9004      	str	r0, [sp, #16]
    c2be:	9105      	str	r1, [sp, #20]
    c2c0:	9804      	ldr	r0, [sp, #16]
    c2c2:	6800      	ldr	r0, [r0, #0]
    c2c4:	9905      	ldr	r1, [sp, #20]
    c2c6:	9203      	str	r2, [sp, #12]
    c2c8:	9302      	str	r3, [sp, #8]
    c2ca:	f7ff f855 	bl	b378 <_ZN78_$LT$mynewt..encoding..coap_context..CoapError$u20$as$u20$core..fmt..Debug$GT$3fmt17he002753e56cbb7faE>
    c2ce:	9001      	str	r0, [sp, #4]
    c2d0:	e7ff      	b.n	c2d2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6aed0cbdf725fdeeE+0x1e>
    c2d2:	9801      	ldr	r0, [sp, #4]
    c2d4:	f000 0001 	and.w	r0, r0, #1
    c2d8:	b006      	add	sp, #24
    c2da:	bd80      	pop	{r7, pc}

0000c2dc <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h1885e7d2ce4be516E>:
    #[doc = ""]
    #[doc = " Return: A pointer to the sensor object matching that sensor type, or NULL if"]
    #[doc = "         none found."]
    pub fn sensor_mgr_find_next_bytype(type_: sensor_type_t, sensor: *mut sensor) -> *mut sensor;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    c2dc:	b580      	push	{r7, lr}
    c2de:	b088      	sub	sp, #32
    c2e0:	4613      	mov	r3, r2
    c2e2:	468c      	mov	ip, r1
    c2e4:	9105      	str	r1, [sp, #20]
    c2e6:	9206      	str	r2, [sp, #24]
    c2e8:	9905      	ldr	r1, [sp, #20]
    c2ea:	9004      	str	r0, [sp, #16]
    c2ec:	4608      	mov	r0, r1
    c2ee:	9303      	str	r3, [sp, #12]
    c2f0:	f8cd c008 	str.w	ip, [sp, #8]
    c2f4:	f7fd f809 	bl	930a <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E>
    c2f8:	e7ff      	b.n	c2fa <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h1885e7d2ce4be516E+0x1e>
    c2fa:	9805      	ldr	r0, [sp, #20]
    c2fc:	f7fc febf 	bl	907e <_ZN6mynewt4Strn6as_ptr17hce51ed792e0d4eabE>
    c300:	9001      	str	r0, [sp, #4]
    c302:	e7ff      	b.n	c304 <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h1885e7d2ce4be516E+0x28>
    c304:	9906      	ldr	r1, [sp, #24]
    c306:	9801      	ldr	r0, [sp, #4]
    c308:	f003 ff14 	bl	10134 <sensor_mgr_find_next_bydevname>
    c30c:	9007      	str	r0, [sp, #28]
    c30e:	e7ff      	b.n	c310 <_ZN6mynewt2hw6sensor8bindings23mgr_find_next_bydevname17h1885e7d2ce4be516E+0x34>
    c310:	9807      	ldr	r0, [sp, #28]
    c312:	9904      	ldr	r1, [sp, #16]
    c314:	6048      	str	r0, [r1, #4]
    c316:	2000      	movs	r0, #0
    c318:	6008      	str	r0, [r1, #0]
    c31a:	b008      	add	sp, #32
    c31c:	bd80      	pop	{r7, pc}

0000c31e <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h554be26f45a098a1E>:
    #[doc = " - __`arg`__: type to check"]
    #[doc = ""]
    #[doc = " Return: 1 if matches, 0 if it doesn't match."]
    pub fn sensor_mgr_match_bytype(sensor: *mut sensor, arg1: *mut ::cty::c_void) -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    c31e:	b580      	push	{r7, lr}
    c320:	b08a      	sub	sp, #40	; 0x28
    c322:	460a      	mov	r2, r1
    c324:	4603      	mov	r3, r0
    c326:	9005      	str	r0, [sp, #20]
    c328:	9106      	str	r1, [sp, #24]
    c32a:	9805      	ldr	r0, [sp, #20]
    c32c:	9204      	str	r2, [sp, #16]
    c32e:	9303      	str	r3, [sp, #12]
    c330:	f7fc ffeb 	bl	930a <_ZN6mynewt4Strn8validate17ha2be07c8174826b4E>
    c334:	e7ff      	b.n	c336 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h554be26f45a098a1E+0x18>
    c336:	9805      	ldr	r0, [sp, #20]
    c338:	f7fc fea1 	bl	907e <_ZN6mynewt4Strn6as_ptr17hce51ed792e0d4eabE>
    c33c:	9002      	str	r0, [sp, #8]
    c33e:	e7ff      	b.n	c340 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h554be26f45a098a1E+0x22>
    c340:	9906      	ldr	r1, [sp, #24]
    c342:	9802      	ldr	r0, [sp, #8]
    c344:	f003 ff5a 	bl	101fc <sensor_set_poll_rate_ms>
    c348:	9008      	str	r0, [sp, #32]
    c34a:	e7ff      	b.n	c34c <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h554be26f45a098a1E+0x2e>
    c34c:	9808      	ldr	r0, [sp, #32]
    c34e:	2800      	cmp	r0, #0
    c350:	d105      	bne.n	c35e <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h554be26f45a098a1E+0x40>
    c352:	e7ff      	b.n	c354 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h554be26f45a098a1E+0x36>
    c354:	2000      	movs	r0, #0
    c356:	9007      	str	r0, [sp, #28]
    c358:	2001      	movs	r0, #1
    c35a:	9007      	str	r0, [sp, #28]
    c35c:	e007      	b.n	c36e <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h554be26f45a098a1E+0x50>
    c35e:	9808      	ldr	r0, [sp, #32]
    c360:	f7fc fbf6 	bl	8b50 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17haa0bb50d5ceeead8E>
    c364:	9001      	str	r0, [sp, #4]
    c366:	e7ff      	b.n	c368 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h554be26f45a098a1E+0x4a>
    c368:	9801      	ldr	r0, [sp, #4]
    c36a:	9007      	str	r0, [sp, #28]
    c36c:	e7ff      	b.n	c36e <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h554be26f45a098a1E+0x50>
    c36e:	9807      	ldr	r0, [sp, #28]
    c370:	b00a      	add	sp, #40	; 0x28
    c372:	bd80      	pop	{r7, pc}

0000c374 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcb61da1d9a7f9d5bE>:
    c374:	b580      	push	{r7, lr}
    c376:	b084      	sub	sp, #16
    c378:	4601      	mov	r1, r0
    c37a:	9003      	str	r0, [sp, #12]
    c37c:	9803      	ldr	r0, [sp, #12]
    c37e:	9102      	str	r1, [sp, #8]
    c380:	9001      	str	r0, [sp, #4]
    c382:	f7fd faa7 	bl	98d4 <_ZN4core3ptr8null_mut17h8415c8ad889a2a19E>
    c386:	9000      	str	r0, [sp, #0]
    c388:	e7ff      	b.n	c38a <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcb61da1d9a7f9d5bE+0x16>
    c38a:	9801      	ldr	r0, [sp, #4]
    c38c:	9900      	ldr	r1, [sp, #0]
    c38e:	1a42      	subs	r2, r0, r1
    c390:	fab2 f282 	clz	r2, r2
    c394:	0950      	lsrs	r0, r2, #5
    c396:	b004      	add	sp, #16
    c398:	bd80      	pop	{r7, pc}

0000c39a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE>:
    c39a:	b580      	push	{r7, lr}
    c39c:	b08a      	sub	sp, #40	; 0x28
    c39e:	4601      	mov	r1, r0
    c3a0:	9003      	str	r0, [sp, #12]
    c3a2:	2000      	movs	r0, #0
    c3a4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c3a8:	9803      	ldr	r0, [sp, #12]
    c3aa:	1d02      	adds	r2, r0, #4
    c3ac:	9102      	str	r1, [sp, #8]
    c3ae:	4611      	mov	r1, r2
    c3b0:	f000 f85b 	bl	c46a <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha4f715bf1b969d3eE>
    c3b4:	9001      	str	r0, [sp, #4]
    c3b6:	e7ff      	b.n	c3b8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x1e>
    c3b8:	9801      	ldr	r0, [sp, #4]
    c3ba:	07c1      	lsls	r1, r0, #31
    c3bc:	2900      	cmp	r1, #0
    c3be:	d023      	beq.n	c408 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x6e>
    c3c0:	e7ff      	b.n	c3c2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x28>
    c3c2:	9803      	ldr	r0, [sp, #12]
    c3c4:	2101      	movs	r1, #1
    c3c6:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    c3ca:	f000 f833 	bl	c434 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17h32c1a16737a51327E>
    c3ce:	9107      	str	r1, [sp, #28]
    c3d0:	9006      	str	r0, [sp, #24]
    c3d2:	e7ff      	b.n	c3d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x3a>
    c3d4:	9806      	ldr	r0, [sp, #24]
    c3d6:	2801      	cmp	r0, #1
    c3d8:	d10f      	bne.n	c3fa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x60>
    c3da:	e7ff      	b.n	c3dc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x42>
    c3dc:	2000      	movs	r0, #0
    c3de:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c3e2:	9807      	ldr	r0, [sp, #28]
    c3e4:	9008      	str	r0, [sp, #32]
    c3e6:	9903      	ldr	r1, [sp, #12]
    c3e8:	a808      	add	r0, sp, #32
    c3ea:	f7fd fff4 	bl	a3d6 <_ZN4core3mem4swap17hb484fae726ea8945E>
    c3ee:	e7ff      	b.n	c3f0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x56>
    c3f0:	9808      	ldr	r0, [sp, #32]
    c3f2:	9005      	str	r0, [sp, #20]
    c3f4:	2001      	movs	r0, #1
    c3f6:	9004      	str	r0, [sp, #16]
    c3f8:	e002      	b.n	c400 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x66>
    c3fa:	2000      	movs	r0, #0
    c3fc:	9004      	str	r0, [sp, #16]
    c3fe:	e7ff      	b.n	c400 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x66>
    c400:	9806      	ldr	r0, [sp, #24]
    c402:	2801      	cmp	r0, #1
    c404:	d00b      	beq.n	c41e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x84>
    c406:	e014      	b.n	c432 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x98>
    c408:	2000      	movs	r0, #0
    c40a:	9004      	str	r0, [sp, #16]
    c40c:	e7ff      	b.n	c40e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x74>
    c40e:	9804      	ldr	r0, [sp, #16]
    c410:	9905      	ldr	r1, [sp, #20]
    c412:	b00a      	add	sp, #40	; 0x28
    c414:	bd80      	pop	{r7, pc}
    c416:	2000      	movs	r0, #0
    c418:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c41c:	e7f7      	b.n	c40e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x74>
    c41e:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    c422:	07c0      	lsls	r0, r0, #31
    c424:	2800      	cmp	r0, #0
    c426:	d0f6      	beq.n	c416 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x7c>
    c428:	e7ff      	b.n	c42a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x90>
    c42a:	2000      	movs	r0, #0
    c42c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c430:	e7f1      	b.n	c416 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x7c>
    c432:	e7f0      	b.n	c416 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hf290b57c570fbe7bE+0x7c>

0000c434 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17h32c1a16737a51327E>:
    c434:	b580      	push	{r7, lr}
    c436:	b088      	sub	sp, #32
    c438:	460a      	mov	r2, r1
    c43a:	4603      	mov	r3, r0
    c43c:	9004      	str	r0, [sp, #16]
    c43e:	9105      	str	r1, [sp, #20]
    c440:	9805      	ldr	r0, [sp, #20]
    c442:	9203      	str	r2, [sp, #12]
    c444:	9302      	str	r3, [sp, #8]
    c446:	f000 f966 	bl	c716 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17heb29fdb01680adabE>
    c44a:	9006      	str	r0, [sp, #24]
    c44c:	e7ff      	b.n	c44e <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17h32c1a16737a51327E+0x1a>
    c44e:	9806      	ldr	r0, [sp, #24]
    c450:	9007      	str	r0, [sp, #28]
    c452:	9804      	ldr	r0, [sp, #16]
    c454:	6800      	ldr	r0, [r0, #0]
    c456:	9907      	ldr	r1, [sp, #28]
    c458:	f000 f96c 	bl	c734 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h8c255323ca5519dfE>
    c45c:	9001      	str	r0, [sp, #4]
    c45e:	9100      	str	r1, [sp, #0]
    c460:	e7ff      	b.n	c462 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17h32c1a16737a51327E+0x2e>
    c462:	9801      	ldr	r0, [sp, #4]
    c464:	9900      	ldr	r1, [sp, #0]
    c466:	b008      	add	sp, #32
    c468:	bd80      	pop	{r7, pc}

0000c46a <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha4f715bf1b969d3eE>:
    c46a:	b084      	sub	sp, #16
    c46c:	460a      	mov	r2, r1
    c46e:	4603      	mov	r3, r0
    c470:	9002      	str	r0, [sp, #8]
    c472:	9103      	str	r1, [sp, #12]
    c474:	9802      	ldr	r0, [sp, #8]
    c476:	6800      	ldr	r0, [r0, #0]
    c478:	9903      	ldr	r1, [sp, #12]
    c47a:	6809      	ldr	r1, [r1, #0]
    c47c:	f04f 0c00 	mov.w	ip, #0
    c480:	4288      	cmp	r0, r1
    c482:	bf38      	it	cc
    c484:	f04f 0c01 	movcc.w	ip, #1
    c488:	4660      	mov	r0, ip
    c48a:	9201      	str	r2, [sp, #4]
    c48c:	9300      	str	r3, [sp, #0]
    c48e:	b004      	add	sp, #16
    c490:	4770      	bx	lr

0000c492 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E>:
    c492:	b580      	push	{r7, lr}
    c494:	b08a      	sub	sp, #40	; 0x28
    c496:	4613      	mov	r3, r2
    c498:	468c      	mov	ip, r1
    c49a:	4686      	mov	lr, r0
    c49c:	9004      	str	r0, [sp, #16]
    c49e:	9105      	str	r1, [sp, #20]
    c4a0:	9206      	str	r2, [sp, #24]
    c4a2:	2000      	movs	r0, #0
    c4a4:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c4a8:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c4ac:	2001      	movs	r0, #1
    c4ae:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c4b2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c4b6:	9804      	ldr	r0, [sp, #16]
    c4b8:	2800      	cmp	r0, #0
    c4ba:	9303      	str	r3, [sp, #12]
    c4bc:	f8cd c008 	str.w	ip, [sp, #8]
    c4c0:	f8cd e004 	str.w	lr, [sp, #4]
    c4c4:	9000      	str	r0, [sp, #0]
    c4c6:	d00d      	beq.n	c4e4 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x52>
    c4c8:	e7ff      	b.n	c4ca <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x38>
    c4ca:	9800      	ldr	r0, [sp, #0]
    c4cc:	2801      	cmp	r0, #1
    c4ce:	d001      	beq.n	c4d4 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x42>
    c4d0:	e7ff      	b.n	c4d2 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x40>
    c4d2:	defe      	udf	#254	; 0xfe
    c4d4:	2000      	movs	r0, #0
    c4d6:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c4da:	9805      	ldr	r0, [sp, #20]
    c4dc:	9008      	str	r0, [sp, #32]
    c4de:	9808      	ldr	r0, [sp, #32]
    c4e0:	9007      	str	r0, [sp, #28]
    c4e2:	e005      	b.n	c4f0 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x5e>
    c4e4:	2000      	movs	r0, #0
    c4e6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c4ea:	9806      	ldr	r0, [sp, #24]
    c4ec:	9007      	str	r0, [sp, #28]
    c4ee:	e7ff      	b.n	c4f0 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x5e>
    c4f0:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    c4f4:	07c0      	lsls	r0, r0, #31
    c4f6:	2800      	cmp	r0, #0
    c4f8:	d104      	bne.n	c504 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x72>
    c4fa:	e7ff      	b.n	c4fc <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x6a>
    c4fc:	9804      	ldr	r0, [sp, #16]
    c4fe:	2801      	cmp	r0, #1
    c500:	d007      	beq.n	c512 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x80>
    c502:	e010      	b.n	c526 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x94>
    c504:	2000      	movs	r0, #0
    c506:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c50a:	e7f7      	b.n	c4fc <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x6a>
    c50c:	9807      	ldr	r0, [sp, #28]
    c50e:	b00a      	add	sp, #40	; 0x28
    c510:	bd80      	pop	{r7, pc}
    c512:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    c516:	07c0      	lsls	r0, r0, #31
    c518:	2800      	cmp	r0, #0
    c51a:	d0f7      	beq.n	c50c <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x7a>
    c51c:	e7ff      	b.n	c51e <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x8c>
    c51e:	2000      	movs	r0, #0
    c520:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c524:	e7f2      	b.n	c50c <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x7a>
    c526:	e7f1      	b.n	c50c <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h11bcdf00467e6e73E+0x7a>

0000c528 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17ha74613409c771b8aE>:
    c528:	b084      	sub	sp, #16
    c52a:	460a      	mov	r2, r1
    c52c:	4603      	mov	r3, r0
    c52e:	9002      	str	r0, [sp, #8]
    c530:	9103      	str	r1, [sp, #12]
    c532:	9802      	ldr	r0, [sp, #8]
    c534:	7800      	ldrb	r0, [r0, #0]
    c536:	9903      	ldr	r1, [sp, #12]
    c538:	7809      	ldrb	r1, [r1, #0]
    c53a:	1a40      	subs	r0, r0, r1
    c53c:	fab0 f080 	clz	r0, r0
    c540:	0940      	lsrs	r0, r0, #5
    c542:	9201      	str	r2, [sp, #4]
    c544:	9300      	str	r3, [sp, #0]
    c546:	b004      	add	sp, #16
    c548:	4770      	bx	lr

0000c54a <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h0cdc1a3a06ac5935E>:
    c54a:	b084      	sub	sp, #16
    c54c:	460a      	mov	r2, r1
    c54e:	4603      	mov	r3, r0
    c550:	9002      	str	r0, [sp, #8]
    c552:	9103      	str	r1, [sp, #12]
    c554:	9802      	ldr	r0, [sp, #8]
    c556:	6800      	ldr	r0, [r0, #0]
    c558:	9903      	ldr	r1, [sp, #12]
    c55a:	6809      	ldr	r1, [r1, #0]
    c55c:	f04f 0c00 	mov.w	ip, #0
    c560:	4288      	cmp	r0, r1
    c562:	bf38      	it	cc
    c564:	f04f 0c01 	movcc.w	ip, #1
    c568:	4660      	mov	r0, ip
    c56a:	9201      	str	r2, [sp, #4]
    c56c:	9300      	str	r3, [sp, #0]
    c56e:	b004      	add	sp, #16
    c570:	4770      	bx	lr

0000c572 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h80b6c30939e62171E>:
    c572:	b580      	push	{r7, lr}
    c574:	b084      	sub	sp, #16
    c576:	4601      	mov	r1, r0
    c578:	9003      	str	r0, [sp, #12]
    c57a:	9803      	ldr	r0, [sp, #12]
    c57c:	9102      	str	r1, [sp, #8]
    c57e:	9001      	str	r0, [sp, #4]
    c580:	f7fd f9a8 	bl	98d4 <_ZN4core3ptr8null_mut17h8415c8ad889a2a19E>
    c584:	9000      	str	r0, [sp, #0]
    c586:	e7ff      	b.n	c588 <_ZN4core3ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h80b6c30939e62171E+0x16>
    c588:	9801      	ldr	r0, [sp, #4]
    c58a:	9900      	ldr	r1, [sp, #0]
    c58c:	1a42      	subs	r2, r0, r1
    c58e:	fab2 f282 	clz	r2, r2
    c592:	0950      	lsrs	r0, r2, #5
    c594:	b004      	add	sp, #16
    c596:	bd80      	pop	{r7, pc}

0000c598 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE>:
    c598:	b580      	push	{r7, lr}
    c59a:	b088      	sub	sp, #32
    c59c:	460a      	mov	r2, r1
    c59e:	4603      	mov	r3, r0
    c5a0:	9005      	str	r0, [sp, #20]
    c5a2:	9106      	str	r1, [sp, #24]
    c5a4:	9806      	ldr	r0, [sp, #24]
    c5a6:	9204      	str	r2, [sp, #16]
    c5a8:	9303      	str	r3, [sp, #12]
    c5aa:	f001 fa0c 	bl	d9c6 <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
    c5ae:	9002      	str	r0, [sp, #8]
    c5b0:	e7ff      	b.n	c5b2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE+0x1a>
    c5b2:	9802      	ldr	r0, [sp, #8]
    c5b4:	07c1      	lsls	r1, r0, #31
    c5b6:	2900      	cmp	r1, #0
    c5b8:	d008      	beq.n	c5cc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE+0x34>
    c5ba:	e7ff      	b.n	c5bc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE+0x24>
    c5bc:	9805      	ldr	r0, [sp, #20]
    c5be:	9906      	ldr	r1, [sp, #24]
    c5c0:	f001 fcd5 	bl	df6e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE>
    c5c4:	f88d 001f 	strb.w	r0, [sp, #31]
    c5c8:	e7ff      	b.n	c5ca <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE+0x32>
    c5ca:	e01a      	b.n	c602 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE+0x6a>
    c5cc:	9806      	ldr	r0, [sp, #24]
    c5ce:	f001 f9fe 	bl	d9ce <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
    c5d2:	9001      	str	r0, [sp, #4]
    c5d4:	e7ff      	b.n	c5d6 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE+0x3e>
    c5d6:	9801      	ldr	r0, [sp, #4]
    c5d8:	07c1      	lsls	r1, r0, #31
    c5da:	2900      	cmp	r1, #0
    c5dc:	d008      	beq.n	c5f0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE+0x58>
    c5de:	e7ff      	b.n	c5e0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE+0x48>
    c5e0:	9805      	ldr	r0, [sp, #20]
    c5e2:	9906      	ldr	r1, [sp, #24]
    c5e4:	f001 fcf2 	bl	dfcc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E>
    c5e8:	f88d 001f 	strb.w	r0, [sp, #31]
    c5ec:	e7ff      	b.n	c5ee <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE+0x56>
    c5ee:	e007      	b.n	c600 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE+0x68>
    c5f0:	9805      	ldr	r0, [sp, #20]
    c5f2:	9906      	ldr	r1, [sp, #24]
    c5f4:	f001 feda 	bl	e3ac <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E>
    c5f8:	f88d 001f 	strb.w	r0, [sp, #31]
    c5fc:	e7ff      	b.n	c5fe <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE+0x66>
    c5fe:	e7ff      	b.n	c600 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE+0x68>
    c600:	e7ff      	b.n	c602 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h06dc2ac0a9fc59cbE+0x6a>
    c602:	f89d 001f 	ldrb.w	r0, [sp, #31]
    c606:	b008      	add	sp, #32
    c608:	bd80      	pop	{r7, pc}

0000c60a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E>:
    c60a:	b580      	push	{r7, lr}
    c60c:	b088      	sub	sp, #32
    c60e:	460a      	mov	r2, r1
    c610:	4603      	mov	r3, r0
    c612:	9005      	str	r0, [sp, #20]
    c614:	9106      	str	r1, [sp, #24]
    c616:	9806      	ldr	r0, [sp, #24]
    c618:	9204      	str	r2, [sp, #16]
    c61a:	9303      	str	r3, [sp, #12]
    c61c:	f001 f9d3 	bl	d9c6 <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
    c620:	9002      	str	r0, [sp, #8]
    c622:	e7ff      	b.n	c624 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E+0x1a>
    c624:	9802      	ldr	r0, [sp, #8]
    c626:	07c1      	lsls	r1, r0, #31
    c628:	2900      	cmp	r1, #0
    c62a:	d008      	beq.n	c63e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E+0x34>
    c62c:	e7ff      	b.n	c62e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E+0x24>
    c62e:	9805      	ldr	r0, [sp, #20]
    c630:	9906      	ldr	r1, [sp, #24]
    c632:	f001 fcfa 	bl	e02a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE>
    c636:	f88d 001f 	strb.w	r0, [sp, #31]
    c63a:	e7ff      	b.n	c63c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E+0x32>
    c63c:	e01a      	b.n	c674 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E+0x6a>
    c63e:	9806      	ldr	r0, [sp, #24]
    c640:	f001 f9c5 	bl	d9ce <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
    c644:	9001      	str	r0, [sp, #4]
    c646:	e7ff      	b.n	c648 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E+0x3e>
    c648:	9801      	ldr	r0, [sp, #4]
    c64a:	07c1      	lsls	r1, r0, #31
    c64c:	2900      	cmp	r1, #0
    c64e:	d008      	beq.n	c662 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E+0x58>
    c650:	e7ff      	b.n	c652 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E+0x48>
    c652:	9805      	ldr	r0, [sp, #20]
    c654:	9906      	ldr	r1, [sp, #24]
    c656:	f001 fd53 	bl	e100 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E>
    c65a:	f88d 001f 	strb.w	r0, [sp, #31]
    c65e:	e7ff      	b.n	c660 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E+0x56>
    c660:	e007      	b.n	c672 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E+0x68>
    c662:	9805      	ldr	r0, [sp, #20]
    c664:	9906      	ldr	r1, [sp, #24]
    c666:	f001 fea6 	bl	e3b6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h33b3bbdbc74b88baE>
    c66a:	f88d 001f 	strb.w	r0, [sp, #31]
    c66e:	e7ff      	b.n	c670 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E+0x66>
    c670:	e7ff      	b.n	c672 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E+0x68>
    c672:	e7ff      	b.n	c674 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h1c7019d1fd3bd7e4E+0x6a>
    c674:	f89d 001f 	ldrb.w	r0, [sp, #31]
    c678:	b008      	add	sp, #32
    c67a:	bd80      	pop	{r7, pc}

0000c67c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE>:
    c67c:	b580      	push	{r7, lr}
    c67e:	b088      	sub	sp, #32
    c680:	460a      	mov	r2, r1
    c682:	4603      	mov	r3, r0
    c684:	9005      	str	r0, [sp, #20]
    c686:	9106      	str	r1, [sp, #24]
    c688:	9806      	ldr	r0, [sp, #24]
    c68a:	9204      	str	r2, [sp, #16]
    c68c:	9303      	str	r3, [sp, #12]
    c68e:	f001 f99a 	bl	d9c6 <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
    c692:	9002      	str	r0, [sp, #8]
    c694:	e7ff      	b.n	c696 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE+0x1a>
    c696:	9802      	ldr	r0, [sp, #8]
    c698:	07c1      	lsls	r1, r0, #31
    c69a:	2900      	cmp	r1, #0
    c69c:	d008      	beq.n	c6b0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE+0x34>
    c69e:	e7ff      	b.n	c6a0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE+0x24>
    c6a0:	9805      	ldr	r0, [sp, #20]
    c6a2:	9906      	ldr	r1, [sp, #24]
    c6a4:	f001 fd97 	bl	e1d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E>
    c6a8:	f88d 001f 	strb.w	r0, [sp, #31]
    c6ac:	e7ff      	b.n	c6ae <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE+0x32>
    c6ae:	e01a      	b.n	c6e6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE+0x6a>
    c6b0:	9806      	ldr	r0, [sp, #24]
    c6b2:	f001 f98c 	bl	d9ce <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
    c6b6:	9001      	str	r0, [sp, #4]
    c6b8:	e7ff      	b.n	c6ba <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE+0x3e>
    c6ba:	9801      	ldr	r0, [sp, #4]
    c6bc:	07c1      	lsls	r1, r0, #31
    c6be:	2900      	cmp	r1, #0
    c6c0:	d008      	beq.n	c6d4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE+0x58>
    c6c2:	e7ff      	b.n	c6c4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE+0x48>
    c6c4:	9805      	ldr	r0, [sp, #20]
    c6c6:	9906      	ldr	r1, [sp, #24]
    c6c8:	f001 fdb9 	bl	e23e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE>
    c6cc:	f88d 001f 	strb.w	r0, [sp, #31]
    c6d0:	e7ff      	b.n	c6d2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE+0x56>
    c6d2:	e007      	b.n	c6e4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE+0x68>
    c6d4:	9805      	ldr	r0, [sp, #20]
    c6d6:	9906      	ldr	r1, [sp, #24]
    c6d8:	f001 ff0a 	bl	e4f0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17h97d3cc39ae689800E>
    c6dc:	f88d 001f 	strb.w	r0, [sp, #31]
    c6e0:	e7ff      	b.n	c6e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE+0x66>
    c6e2:	e7ff      	b.n	c6e4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE+0x68>
    c6e4:	e7ff      	b.n	c6e6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i64$GT$3fmt17h092b98267ee9e93fE+0x6a>
    c6e6:	f89d 001f 	ldrb.w	r0, [sp, #31]
    c6ea:	b008      	add	sp, #32
    c6ec:	bd80      	pop	{r7, pc}

0000c6ee <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h961716e0b7c83112E>:
    c6ee:	b082      	sub	sp, #8
    c6f0:	4601      	mov	r1, r0
    c6f2:	9001      	str	r0, [sp, #4]
    c6f4:	9801      	ldr	r0, [sp, #4]
    c6f6:	9100      	str	r1, [sp, #0]
    c6f8:	b002      	add	sp, #8
    c6fa:	4770      	bx	lr

0000c6fc <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h06272b98ac4d8924E>:
    c6fc:	b580      	push	{r7, lr}
    c6fe:	b084      	sub	sp, #16
    c700:	4601      	mov	r1, r0
    c702:	9003      	str	r0, [sp, #12]
    c704:	9803      	ldr	r0, [sp, #12]
    c706:	9102      	str	r1, [sp, #8]
    c708:	f7ff fff1 	bl	c6ee <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h961716e0b7c83112E>
    c70c:	9001      	str	r0, [sp, #4]
    c70e:	e7ff      	b.n	c710 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h06272b98ac4d8924E+0x14>
    c710:	9801      	ldr	r0, [sp, #4]
    c712:	b004      	add	sp, #16
    c714:	bd80      	pop	{r7, pc}

0000c716 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17heb29fdb01680adabE>:
    c716:	b580      	push	{r7, lr}
    c718:	b084      	sub	sp, #16
    c71a:	4601      	mov	r1, r0
    c71c:	9002      	str	r0, [sp, #8]
    c71e:	9802      	ldr	r0, [sp, #8]
    c720:	9101      	str	r1, [sp, #4]
    c722:	f7ff ffeb 	bl	c6fc <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h06272b98ac4d8924E>
    c726:	9000      	str	r0, [sp, #0]
    c728:	e7ff      	b.n	c72a <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17heb29fdb01680adabE+0x14>
    c72a:	9800      	ldr	r0, [sp, #0]
    c72c:	9003      	str	r0, [sp, #12]
    c72e:	9803      	ldr	r0, [sp, #12]
    c730:	b004      	add	sp, #16
    c732:	bd80      	pop	{r7, pc}

0000c734 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h8c255323ca5519dfE>:
    c734:	b580      	push	{r7, lr}
    c736:	b08a      	sub	sp, #40	; 0x28
    c738:	460a      	mov	r2, r1
    c73a:	4603      	mov	r3, r0
    c73c:	9004      	str	r0, [sp, #16]
    c73e:	9105      	str	r1, [sp, #20]
    c740:	9804      	ldr	r0, [sp, #16]
    c742:	9905      	ldr	r1, [sp, #20]
    c744:	9203      	str	r2, [sp, #12]
    c746:	9302      	str	r3, [sp, #8]
    c748:	f000 f81c 	bl	c784 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h40aff0c4f9ba2454E>
    c74c:	9001      	str	r0, [sp, #4]
    c74e:	9100      	str	r1, [sp, #0]
    c750:	e7ff      	b.n	c752 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h8c255323ca5519dfE+0x1e>
    c752:	9801      	ldr	r0, [sp, #4]
    c754:	9008      	str	r0, [sp, #32]
    c756:	9900      	ldr	r1, [sp, #0]
    c758:	f001 0201 	and.w	r2, r1, #1
    c75c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    c760:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    c764:	07d2      	lsls	r2, r2, #31
    c766:	2a00      	cmp	r2, #0
    c768:	d003      	beq.n	c772 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h8c255323ca5519dfE+0x3e>
    c76a:	e7ff      	b.n	c76c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h8c255323ca5519dfE+0x38>
    c76c:	2000      	movs	r0, #0
    c76e:	9006      	str	r0, [sp, #24]
    c770:	e004      	b.n	c77c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h8c255323ca5519dfE+0x48>
    c772:	9808      	ldr	r0, [sp, #32]
    c774:	9007      	str	r0, [sp, #28]
    c776:	2001      	movs	r0, #1
    c778:	9006      	str	r0, [sp, #24]
    c77a:	e7ff      	b.n	c77c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h8c255323ca5519dfE+0x48>
    c77c:	9806      	ldr	r0, [sp, #24]
    c77e:	9907      	ldr	r1, [sp, #28]
    c780:	b00a      	add	sp, #40	; 0x28
    c782:	bd80      	pop	{r7, pc}

0000c784 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h40aff0c4f9ba2454E>:
    c784:	b08c      	sub	sp, #48	; 0x30
    c786:	460a      	mov	r2, r1
    c788:	4603      	mov	r3, r0
    c78a:	9004      	str	r0, [sp, #16]
    c78c:	9105      	str	r1, [sp, #20]
    c78e:	9804      	ldr	r0, [sp, #16]
    c790:	9905      	ldr	r1, [sp, #20]
    c792:	1840      	adds	r0, r0, r1
    c794:	f04f 0100 	mov.w	r1, #0
    c798:	f141 0100 	adc.w	r1, r1, #0
    c79c:	900a      	str	r0, [sp, #40]	; 0x28
    c79e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    c7a2:	980a      	ldr	r0, [sp, #40]	; 0x28
    c7a4:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
    c7a8:	9203      	str	r2, [sp, #12]
    c7aa:	9302      	str	r3, [sp, #8]
    c7ac:	9001      	str	r0, [sp, #4]
    c7ae:	9100      	str	r1, [sp, #0]
    c7b0:	e7ff      	b.n	c7b2 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h40aff0c4f9ba2454E+0x2e>
    c7b2:	9801      	ldr	r0, [sp, #4]
    c7b4:	9008      	str	r0, [sp, #32]
    c7b6:	9900      	ldr	r1, [sp, #0]
    c7b8:	f001 0201 	and.w	r2, r1, #1
    c7bc:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    c7c0:	9a08      	ldr	r2, [sp, #32]
    c7c2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    c7c6:	9206      	str	r2, [sp, #24]
    c7c8:	f88d 301c 	strb.w	r3, [sp, #28]
    c7cc:	9806      	ldr	r0, [sp, #24]
    c7ce:	f89d 101c 	ldrb.w	r1, [sp, #28]
    c7d2:	b00c      	add	sp, #48	; 0x30
    c7d4:	4770      	bx	lr

0000c7d6 <_ZN4core3ptr18real_drop_in_place17h034ec8dd70295f85E>:
    c7d6:	4770      	bx	lr

0000c7d8 <_ZN4core3ptr18real_drop_in_place17h0ef71ded6c57bedcE>:
    c7d8:	4770      	bx	lr

0000c7da <_ZN4core3ptr18real_drop_in_place17h921869e295dffcdcE>:
    c7da:	4770      	bx	lr

0000c7dc <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bd32f961ec2bdfaE>:
    c7dc:	b5b0      	push	{r4, r5, r7, lr}
    c7de:	b086      	sub	sp, #24
    c7e0:	460c      	mov	r4, r1
    c7e2:	4605      	mov	r5, r0
    c7e4:	f001 fb0b 	bl	ddfe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E>
    c7e8:	b9a8      	cbnz	r0, c816 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bd32f961ec2bdfaE+0x3a>
    c7ea:	f24a 737c 	movw	r3, #42876	; 0xa77c
    c7ee:	2200      	movs	r2, #0
    c7f0:	f2c0 0302 	movt	r3, #2
    c7f4:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
    c7f8:	9205      	str	r2, [sp, #20]
    c7fa:	9304      	str	r3, [sp, #16]
    c7fc:	e9cd 2202 	strd	r2, r2, [sp, #8]
    c800:	2201      	movs	r2, #1
    c802:	9201      	str	r2, [sp, #4]
    c804:	f24a 72e4 	movw	r2, #42980	; 0xa7e4
    c808:	f2c0 0202 	movt	r2, #2
    c80c:	9200      	str	r2, [sp, #0]
    c80e:	466a      	mov	r2, sp
    c810:	f000 fd28 	bl	d264 <_ZN4core3fmt5write17h51826aee11d21b9bE>
    c814:	b110      	cbz	r0, c81c <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bd32f961ec2bdfaE+0x40>
    c816:	2001      	movs	r0, #1
    c818:	b006      	add	sp, #24
    c81a:	bdb0      	pop	{r4, r5, r7, pc}
    c81c:	1d28      	adds	r0, r5, #4
    c81e:	4621      	mov	r1, r4
    c820:	b006      	add	sp, #24
    c822:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
    c826:	f001 baea 	b.w	ddfe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E>

0000c82a <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h589f04726b9846deE>:
    c82a:	f640 704d 	movw	r0, #3917	; 0xf4d
    c82e:	f240 713c 	movw	r1, #1852	; 0x73c
    c832:	f2cf 3047 	movt	r0, #62279	; 0xf347
    c836:	f2cb 21aa 	movt	r1, #45738	; 0xb2aa
    c83a:	4770      	bx	lr

0000c83c <_ZN4core5panic9PanicInfo8location17h5226165d8771f8a2E>:
    c83c:	300c      	adds	r0, #12
    c83e:	4770      	bx	lr

0000c840 <_ZN4core5panic8Location4file17h94cc6af18de736c4E>:
    c840:	e9d0 2100 	ldrd	r2, r1, [r0]
    c844:	4610      	mov	r0, r2
    c846:	4770      	bx	lr

0000c848 <_ZN4core5panic8Location4line17h3ffc63f14d0a6636E>:
    c848:	6880      	ldr	r0, [r0, #8]
    c84a:	4770      	bx	lr

0000c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>:
    c84c:	b08c      	sub	sp, #48	; 0x30
    c84e:	e890 5006 	ldmia.w	r0, {r1, r2, ip, lr}
    c852:	e9d0 3004 	ldrd	r3, r0, [r0, #16]
    c856:	e9cd 1206 	strd	r1, r2, [sp, #24]
    c85a:	f24a 727c 	movw	r2, #42876	; 0xa77c
    c85e:	2100      	movs	r1, #0
    c860:	f2c0 0202 	movt	r2, #2
    c864:	9105      	str	r1, [sp, #20]
    c866:	9204      	str	r2, [sp, #16]
    c868:	e9cd 1102 	strd	r1, r1, [sp, #8]
    c86c:	2101      	movs	r1, #1
    c86e:	9101      	str	r1, [sp, #4]
    c870:	a906      	add	r1, sp, #24
    c872:	9100      	str	r1, [sp, #0]
    c874:	a908      	add	r1, sp, #32
    c876:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
    c87a:	4668      	mov	r0, sp
    c87c:	e9cd ce08 	strd	ip, lr, [sp, #32]
    c880:	f000 f821 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    c884:	defe      	udf	#254	; 0xfe

0000c886 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>:
    c886:	b08c      	sub	sp, #48	; 0x30
    c888:	4603      	mov	r3, r0
    c88a:	f24e 30cf 	movw	r0, #58319	; 0xe3cf
    c88e:	e9cd 1200 	strd	r1, r2, [sp]
    c892:	f2c0 0000 	movt	r0, #0
    c896:	4669      	mov	r1, sp
    c898:	900b      	str	r0, [sp, #44]	; 0x2c
    c89a:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
    c89e:	a801      	add	r0, sp, #4
    c8a0:	9008      	str	r0, [sp, #32]
    c8a2:	2002      	movs	r0, #2
    c8a4:	a908      	add	r1, sp, #32
    c8a6:	9007      	str	r0, [sp, #28]
    c8a8:	9106      	str	r1, [sp, #24]
    c8aa:	2100      	movs	r1, #0
    c8ac:	9105      	str	r1, [sp, #20]
    c8ae:	e9cd 0103 	strd	r0, r1, [sp, #12]
    c8b2:	f64a 0064 	movw	r0, #43108	; 0xa864
    c8b6:	f2c0 0002 	movt	r0, #2
    c8ba:	4619      	mov	r1, r3
    c8bc:	9002      	str	r0, [sp, #8]
    c8be:	a802      	add	r0, sp, #8
    c8c0:	f000 f801 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    c8c4:	defe      	udf	#254	; 0xfe

0000c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>:
    c8c6:	b088      	sub	sp, #32
    c8c8:	e9d1 c300 	ldrd	ip, r3, [r1]
    c8cc:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
    c8d0:	9107      	str	r1, [sp, #28]
    c8d2:	e9cd 3205 	strd	r3, r2, [sp, #20]
    c8d6:	e9cd 0c03 	strd	r0, ip, [sp, #12]
    c8da:	f64a 0040 	movw	r0, #43072	; 0xa840
    c8de:	f2c0 0002 	movt	r0, #2
    c8e2:	9002      	str	r0, [sp, #8]
    c8e4:	f24a 707c 	movw	r0, #42876	; 0xa77c
    c8e8:	f2c0 0002 	movt	r0, #2
    c8ec:	9001      	str	r0, [sp, #4]
    c8ee:	a801      	add	r0, sp, #4
    c8f0:	f7fb feed 	bl	86ce <rust_begin_unwind>
    c8f4:	defe      	udf	#254	; 0xfe

0000c8f6 <_ZN4core6option13expect_failed17h3eeb96a257d935a1E>:
    c8f6:	b08a      	sub	sp, #40	; 0x28
    c8f8:	e9cd 0100 	strd	r0, r1, [sp]
    c8fc:	f24e 5017 	movw	r0, #58647	; 0xe517
    c900:	f2c0 0000 	movt	r0, #0
    c904:	a908      	add	r1, sp, #32
    c906:	9009      	str	r0, [sp, #36]	; 0x24
    c908:	4668      	mov	r0, sp
    c90a:	9008      	str	r0, [sp, #32]
    c90c:	2001      	movs	r0, #1
    c90e:	9007      	str	r0, [sp, #28]
    c910:	9106      	str	r1, [sp, #24]
    c912:	2100      	movs	r1, #0
    c914:	9105      	str	r1, [sp, #20]
    c916:	e9cd 0103 	strd	r0, r1, [sp, #12]
    c91a:	f64a 1048 	movw	r0, #43336	; 0xa948
    c91e:	f2c0 0002 	movt	r0, #2
    c922:	f64a 1150 	movw	r1, #43344	; 0xa950
    c926:	9002      	str	r0, [sp, #8]
    c928:	a802      	add	r0, sp, #8
    c92a:	f2c0 0102 	movt	r1, #2
    c92e:	f7ff ffca 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    c932:	defe      	udf	#254	; 0xfe

0000c934 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E>:
    c934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c938:	b081      	sub	sp, #4
    c93a:	f011 0303 	ands.w	r3, r1, #3
    c93e:	4684      	mov	ip, r0
    c940:	f04f 0000 	mov.w	r0, #0
    c944:	bf18      	it	ne
    c946:	f1d3 0e04 	rsbsne	lr, r3, #4
    c94a:	d152      	bne.n	c9f2 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xbe>
    c94c:	fa5f f38c 	uxtb.w	r3, ip
    c950:	2a08      	cmp	r2, #8
    c952:	d31f      	bcc.n	c994 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x60>
    c954:	f1a2 0c08 	sub.w	ip, r2, #8
    c958:	4560      	cmp	r0, ip
    c95a:	d81b      	bhi.n	c994 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x60>
    c95c:	f04f 3701 	mov.w	r7, #16843009	; 0x1010101
    c960:	fb03 f507 	mul.w	r5, r3, r7
    c964:	580f      	ldr	r7, [r1, r0]
    c966:	180c      	adds	r4, r1, r0
    c968:	6864      	ldr	r4, [r4, #4]
    c96a:	406f      	eors	r7, r5
    c96c:	f1a7 3601 	sub.w	r6, r7, #16843009	; 0x1010101
    c970:	ea26 0707 	bic.w	r7, r6, r7
    c974:	ea84 0605 	eor.w	r6, r4, r5
    c978:	f1a6 3401 	sub.w	r4, r6, #16843009	; 0x1010101
    c97c:	ea24 0606 	bic.w	r6, r4, r6
    c980:	4337      	orrs	r7, r6
    c982:	f017 3f80 	tst.w	r7, #2155905152	; 0x80808080
    c986:	d102      	bne.n	c98e <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x5a>
    c988:	3008      	adds	r0, #8
    c98a:	4560      	cmp	r0, ip
    c98c:	d9ea      	bls.n	c964 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x30>
    c98e:	4290      	cmp	r0, r2
    c990:	f200 80c2 	bhi.w	cb18 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1e4>
    c994:	180c      	adds	r4, r1, r0
    c996:	eb01 0e02 	add.w	lr, r1, r2
    c99a:	eba2 0c00 	sub.w	ip, r2, r0
    c99e:	2100      	movs	r1, #0
    c9a0:	4626      	mov	r6, r4
    c9a2:	2200      	movs	r2, #0
    c9a4:	ebae 0606 	sub.w	r6, lr, r6
    c9a8:	1865      	adds	r5, r4, r1
    c9aa:	2e03      	cmp	r6, #3
    c9ac:	f240 8081 	bls.w	cab2 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x17e>
    c9b0:	782e      	ldrb	r6, [r5, #0]
    c9b2:	1af7      	subs	r7, r6, r3
    c9b4:	bf18      	it	ne
    c9b6:	2701      	movne	r7, #1
    c9b8:	443a      	add	r2, r7
    c9ba:	429e      	cmp	r6, r3
    c9bc:	d016      	beq.n	c9ec <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb8>
    c9be:	786e      	ldrb	r6, [r5, #1]
    c9c0:	1af7      	subs	r7, r6, r3
    c9c2:	bf18      	it	ne
    c9c4:	2701      	movne	r7, #1
    c9c6:	443a      	add	r2, r7
    c9c8:	429e      	cmp	r6, r3
    c9ca:	d00f      	beq.n	c9ec <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb8>
    c9cc:	78ae      	ldrb	r6, [r5, #2]
    c9ce:	1af7      	subs	r7, r6, r3
    c9d0:	bf18      	it	ne
    c9d2:	2701      	movne	r7, #1
    c9d4:	443a      	add	r2, r7
    c9d6:	429e      	cmp	r6, r3
    c9d8:	d008      	beq.n	c9ec <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb8>
    c9da:	78ef      	ldrb	r7, [r5, #3]
    c9dc:	3104      	adds	r1, #4
    c9de:	1afe      	subs	r6, r7, r3
    c9e0:	bf18      	it	ne
    c9e2:	2601      	movne	r6, #1
    c9e4:	4432      	add	r2, r6
    c9e6:	1d2e      	adds	r6, r5, #4
    c9e8:	429f      	cmp	r7, r3
    c9ea:	d1db      	bne.n	c9a4 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x70>
    c9ec:	2101      	movs	r1, #1
    c9ee:	1813      	adds	r3, r2, r0
    c9f0:	e02c      	b.n	ca4c <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x118>
    c9f2:	4596      	cmp	lr, r2
    c9f4:	bf88      	it	hi
    c9f6:	4696      	movhi	lr, r2
    c9f8:	eb01 080e 	add.w	r8, r1, lr
    c9fc:	2300      	movs	r3, #0
    c9fe:	4674      	mov	r4, lr
    ca00:	460d      	mov	r5, r1
    ca02:	eba8 0605 	sub.w	r6, r8, r5
    ca06:	2e03      	cmp	r6, #3
    ca08:	d925      	bls.n	ca56 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x122>
    ca0a:	782f      	ldrb	r7, [r5, #0]
    ca0c:	fa5f f68c 	uxtb.w	r6, ip
    ca10:	1bb8      	subs	r0, r7, r6
    ca12:	bf18      	it	ne
    ca14:	2001      	movne	r0, #1
    ca16:	4403      	add	r3, r0
    ca18:	42b7      	cmp	r7, r6
    ca1a:	d016      	beq.n	ca4a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x116>
    ca1c:	7868      	ldrb	r0, [r5, #1]
    ca1e:	1b87      	subs	r7, r0, r6
    ca20:	bf18      	it	ne
    ca22:	2701      	movne	r7, #1
    ca24:	443b      	add	r3, r7
    ca26:	42b0      	cmp	r0, r6
    ca28:	d00f      	beq.n	ca4a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x116>
    ca2a:	78a8      	ldrb	r0, [r5, #2]
    ca2c:	1b87      	subs	r7, r0, r6
    ca2e:	bf18      	it	ne
    ca30:	2701      	movne	r7, #1
    ca32:	443b      	add	r3, r7
    ca34:	42b0      	cmp	r0, r6
    ca36:	d008      	beq.n	ca4a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x116>
    ca38:	78e8      	ldrb	r0, [r5, #3]
    ca3a:	3c04      	subs	r4, #4
    ca3c:	3504      	adds	r5, #4
    ca3e:	1b87      	subs	r7, r0, r6
    ca40:	bf18      	it	ne
    ca42:	2701      	movne	r7, #1
    ca44:	443b      	add	r3, r7
    ca46:	42b0      	cmp	r0, r6
    ca48:	d1db      	bne.n	ca02 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xce>
    ca4a:	2101      	movs	r1, #1
    ca4c:	4608      	mov	r0, r1
    ca4e:	4619      	mov	r1, r3
    ca50:	b001      	add	sp, #4
    ca52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ca56:	2c00      	cmp	r4, #0
    ca58:	d05c      	beq.n	cb14 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1e0>
    ca5a:	462f      	mov	r7, r5
    ca5c:	fa5f f68c 	uxtb.w	r6, ip
    ca60:	f817 9b01 	ldrb.w	r9, [r7], #1
    ca64:	ebb9 0006 	subs.w	r0, r9, r6
    ca68:	bf18      	it	ne
    ca6a:	2001      	movne	r0, #1
    ca6c:	4403      	add	r3, r0
    ca6e:	45b1      	cmp	r9, r6
    ca70:	d0eb      	beq.n	ca4a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x116>
    ca72:	4547      	cmp	r7, r8
    ca74:	d04e      	beq.n	cb14 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1e0>
    ca76:	7868      	ldrb	r0, [r5, #1]
    ca78:	1b87      	subs	r7, r0, r6
    ca7a:	bf18      	it	ne
    ca7c:	2701      	movne	r7, #1
    ca7e:	443b      	add	r3, r7
    ca80:	42b0      	cmp	r0, r6
    ca82:	d0e2      	beq.n	ca4a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x116>
    ca84:	1ca8      	adds	r0, r5, #2
    ca86:	4540      	cmp	r0, r8
    ca88:	d044      	beq.n	cb14 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1e0>
    ca8a:	78a8      	ldrb	r0, [r5, #2]
    ca8c:	1b87      	subs	r7, r0, r6
    ca8e:	bf18      	it	ne
    ca90:	2701      	movne	r7, #1
    ca92:	443b      	add	r3, r7
    ca94:	42b0      	cmp	r0, r6
    ca96:	d0d8      	beq.n	ca4a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x116>
    ca98:	1ce8      	adds	r0, r5, #3
    ca9a:	4540      	cmp	r0, r8
    ca9c:	d03a      	beq.n	cb14 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1e0>
    ca9e:	78e8      	ldrb	r0, [r5, #3]
    caa0:	3c04      	subs	r4, #4
    caa2:	3504      	adds	r5, #4
    caa4:	1b87      	subs	r7, r0, r6
    caa6:	bf18      	it	ne
    caa8:	2701      	movne	r7, #1
    caaa:	443b      	add	r3, r7
    caac:	42b0      	cmp	r0, r6
    caae:	d1d2      	bne.n	ca56 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x122>
    cab0:	e7cb      	b.n	ca4a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x116>
    cab2:	ebac 0401 	sub.w	r4, ip, r1
    cab6:	b35c      	cbz	r4, cb10 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1dc>
    cab8:	4629      	mov	r1, r5
    caba:	f811 7b01 	ldrb.w	r7, [r1], #1
    cabe:	1afe      	subs	r6, r7, r3
    cac0:	bf18      	it	ne
    cac2:	2601      	movne	r6, #1
    cac4:	4432      	add	r2, r6
    cac6:	429f      	cmp	r7, r3
    cac8:	f43f af90 	beq.w	c9ec <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb8>
    cacc:	4571      	cmp	r1, lr
    cace:	d01f      	beq.n	cb10 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1dc>
    cad0:	7869      	ldrb	r1, [r5, #1]
    cad2:	1acf      	subs	r7, r1, r3
    cad4:	bf18      	it	ne
    cad6:	2701      	movne	r7, #1
    cad8:	443a      	add	r2, r7
    cada:	4299      	cmp	r1, r3
    cadc:	f43f af86 	beq.w	c9ec <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb8>
    cae0:	1ca9      	adds	r1, r5, #2
    cae2:	4571      	cmp	r1, lr
    cae4:	d014      	beq.n	cb10 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1dc>
    cae6:	78a9      	ldrb	r1, [r5, #2]
    cae8:	1acf      	subs	r7, r1, r3
    caea:	bf18      	it	ne
    caec:	2701      	movne	r7, #1
    caee:	443a      	add	r2, r7
    caf0:	4299      	cmp	r1, r3
    caf2:	f43f af7b 	beq.w	c9ec <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb8>
    caf6:	1ce9      	adds	r1, r5, #3
    caf8:	4571      	cmp	r1, lr
    cafa:	d009      	beq.n	cb10 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1dc>
    cafc:	78e9      	ldrb	r1, [r5, #3]
    cafe:	3c04      	subs	r4, #4
    cb00:	3504      	adds	r5, #4
    cb02:	1acf      	subs	r7, r1, r3
    cb04:	bf18      	it	ne
    cb06:	2701      	movne	r7, #1
    cb08:	443a      	add	r2, r7
    cb0a:	4299      	cmp	r1, r3
    cb0c:	d1d3      	bne.n	cab6 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x182>
    cb0e:	e76d      	b.n	c9ec <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb8>
    cb10:	2100      	movs	r1, #0
    cb12:	e76c      	b.n	c9ee <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xba>
    cb14:	4670      	mov	r0, lr
    cb16:	e719      	b.n	c94c <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x18>
    cb18:	4611      	mov	r1, r2
    cb1a:	f000 f823 	bl	cb64 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
    cb1e:	defe      	udf	#254	; 0xfe

0000cb20 <_ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E>:
    cb20:	b08c      	sub	sp, #48	; 0x30
    cb22:	e9cd 0100 	strd	r0, r1, [sp]
    cb26:	f24e 30cf 	movw	r0, #58319	; 0xe3cf
    cb2a:	a901      	add	r1, sp, #4
    cb2c:	f2c0 0000 	movt	r0, #0
    cb30:	900b      	str	r0, [sp, #44]	; 0x2c
    cb32:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
    cb36:	4668      	mov	r0, sp
    cb38:	9008      	str	r0, [sp, #32]
    cb3a:	2002      	movs	r0, #2
    cb3c:	a908      	add	r1, sp, #32
    cb3e:	9007      	str	r0, [sp, #28]
    cb40:	9106      	str	r1, [sp, #24]
    cb42:	2100      	movs	r1, #0
    cb44:	9105      	str	r1, [sp, #20]
    cb46:	e9cd 0103 	strd	r0, r1, [sp, #12]
    cb4a:	f64a 10a0 	movw	r0, #43424	; 0xa9a0
    cb4e:	f2c0 0002 	movt	r0, #2
    cb52:	f64a 11b0 	movw	r1, #43440	; 0xa9b0
    cb56:	9002      	str	r0, [sp, #8]
    cb58:	a802      	add	r0, sp, #8
    cb5a:	f2c0 0102 	movt	r1, #2
    cb5e:	f7ff feb2 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    cb62:	defe      	udf	#254	; 0xfe

0000cb64 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>:
    cb64:	b08c      	sub	sp, #48	; 0x30
    cb66:	e9cd 0100 	strd	r0, r1, [sp]
    cb6a:	f24e 30cf 	movw	r0, #58319	; 0xe3cf
    cb6e:	a901      	add	r1, sp, #4
    cb70:	f2c0 0000 	movt	r0, #0
    cb74:	900b      	str	r0, [sp, #44]	; 0x2c
    cb76:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
    cb7a:	4668      	mov	r0, sp
    cb7c:	9008      	str	r0, [sp, #32]
    cb7e:	2002      	movs	r0, #2
    cb80:	a908      	add	r1, sp, #32
    cb82:	9007      	str	r0, [sp, #28]
    cb84:	9106      	str	r1, [sp, #24]
    cb86:	2100      	movs	r1, #0
    cb88:	9105      	str	r1, [sp, #20]
    cb8a:	e9cd 0103 	strd	r0, r1, [sp, #12]
    cb8e:	f64a 10e4 	movw	r0, #43492	; 0xa9e4
    cb92:	f2c0 0002 	movt	r0, #2
    cb96:	f64a 11f4 	movw	r1, #43508	; 0xa9f4
    cb9a:	9002      	str	r0, [sp, #8]
    cb9c:	a802      	add	r0, sp, #8
    cb9e:	f2c0 0102 	movt	r1, #2
    cba2:	f7ff fe90 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    cba6:	defe      	udf	#254	; 0xfe

0000cba8 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E>:
    cba8:	b09a      	sub	sp, #104	; 0x68
    cbaa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    cbae:	e9cd 2300 	strd	r2, r3, [sp]
    cbb2:	d802      	bhi.n	cbba <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x12>
    cbb4:	2501      	movs	r5, #1
    cbb6:	468c      	mov	ip, r1
    cbb8:	e03e      	b.n	cc38 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x90>
    cbba:	f1c1 0e00 	rsb	lr, r1, #0
    cbbe:	f44f 7c80 	mov.w	ip, #256	; 0x100
    cbc2:	458c      	cmp	ip, r1
    cbc4:	d205      	bcs.n	cbd2 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x2a>
    cbc6:	f910 400c 	ldrsb.w	r4, [r0, ip]
    cbca:	f114 0f41 	cmn.w	r4, #65	; 0x41
    cbce:	f300 8126 	bgt.w	ce1e <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x276>
    cbd2:	eb0e 040c 	add.w	r4, lr, ip
    cbd6:	f1ac 0601 	sub.w	r6, ip, #1
    cbda:	2c01      	cmp	r4, #1
    cbdc:	d02a      	beq.n	cc34 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x8c>
    cbde:	428e      	cmp	r6, r1
    cbe0:	d206      	bcs.n	cbf0 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x48>
    cbe2:	eb00 050c 	add.w	r5, r0, ip
    cbe6:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
    cbea:	f115 0f41 	cmn.w	r5, #65	; 0x41
    cbee:	dc21      	bgt.n	cc34 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x8c>
    cbf0:	f1ac 0602 	sub.w	r6, ip, #2
    cbf4:	2c02      	cmp	r4, #2
    cbf6:	d01d      	beq.n	cc34 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x8c>
    cbf8:	428e      	cmp	r6, r1
    cbfa:	d206      	bcs.n	cc0a <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x62>
    cbfc:	eb00 050c 	add.w	r5, r0, ip
    cc00:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
    cc04:	f115 0f41 	cmn.w	r5, #65	; 0x41
    cc08:	dc14      	bgt.n	cc34 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x8c>
    cc0a:	f1ac 0603 	sub.w	r6, ip, #3
    cc0e:	2c03      	cmp	r4, #3
    cc10:	d010      	beq.n	cc34 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x8c>
    cc12:	428e      	cmp	r6, r1
    cc14:	d206      	bcs.n	cc24 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x7c>
    cc16:	eb00 050c 	add.w	r5, r0, ip
    cc1a:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
    cc1e:	f115 0f41 	cmn.w	r5, #65	; 0x41
    cc22:	dc07      	bgt.n	cc34 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x8c>
    cc24:	f1bc 0c04 	subs.w	ip, ip, #4
    cc28:	f04f 0500 	mov.w	r5, #0
    cc2c:	d004      	beq.n	cc38 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x90>
    cc2e:	2c04      	cmp	r4, #4
    cc30:	d1c7      	bne.n	cbc2 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1a>
    cc32:	e001      	b.n	cc38 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x90>
    cc34:	2500      	movs	r5, #0
    cc36:	46b4      	mov	ip, r6
    cc38:	2605      	movs	r6, #5
    cc3a:	2d00      	cmp	r5, #0
    cc3c:	f64a 25c2 	movw	r5, #43714	; 0xaac2
    cc40:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    cc44:	bf18      	it	ne
    cc46:	2600      	movne	r6, #0
    cc48:	9605      	str	r6, [sp, #20]
    cc4a:	f24a 767c 	movw	r6, #42876	; 0xa77c
    cc4e:	f2c0 0502 	movt	r5, #2
    cc52:	f2c0 0602 	movt	r6, #2
    cc56:	bf18      	it	ne
    cc58:	4635      	movne	r5, r6
    cc5a:	428a      	cmp	r2, r1
    cc5c:	9504      	str	r5, [sp, #16]
    cc5e:	bf98      	it	ls
    cc60:	428b      	cmpls	r3, r1
    cc62:	f200 80de 	bhi.w	ce22 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x27a>
    cc66:	429a      	cmp	r2, r3
    cc68:	f200 8102 	bhi.w	ce70 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x2c8>
    cc6c:	2a00      	cmp	r2, #0
    cc6e:	bf18      	it	ne
    cc70:	4291      	cmpne	r1, r2
    cc72:	d156      	bne.n	cd22 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x17a>
    cc74:	461a      	mov	r2, r3
    cc76:	2a00      	cmp	r2, #0
    cc78:	9206      	str	r2, [sp, #24]
    cc7a:	bf18      	it	ne
    cc7c:	428a      	cmpne	r2, r1
    cc7e:	d103      	bne.n	cc88 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xe0>
    cc80:	4613      	mov	r3, r2
    cc82:	428b      	cmp	r3, r1
    cc84:	d03c      	beq.n	cd00 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x158>
    cc86:	e042      	b.n	cd0e <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x166>
    cc88:	f1a0 0c01 	sub.w	ip, r0, #1
    cc8c:	f101 0e02 	add.w	lr, r1, #2
    cc90:	1ccc      	adds	r4, r1, #3
    cc92:	1c4d      	adds	r5, r1, #1
    cc94:	1d0e      	adds	r6, r1, #4
    cc96:	428a      	cmp	r2, r1
    cc98:	d206      	bcs.n	cca8 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x100>
    cc9a:	eb0c 0302 	add.w	r3, ip, r2
    cc9e:	f993 3001 	ldrsb.w	r3, [r3, #1]
    cca2:	f113 0f40 	cmn.w	r3, #64	; 0x40
    cca6:	daeb      	bge.n	cc80 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xd8>
    cca8:	1e53      	subs	r3, r2, #1
    ccaa:	bf18      	it	ne
    ccac:	4295      	cmpne	r5, r2
    ccae:	d025      	beq.n	ccfc <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x154>
    ccb0:	428b      	cmp	r3, r1
    ccb2:	d204      	bcs.n	ccbe <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x116>
    ccb4:	f91c 7002 	ldrsb.w	r7, [ip, r2]
    ccb8:	f117 0f41 	cmn.w	r7, #65	; 0x41
    ccbc:	dc1e      	bgt.n	ccfc <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x154>
    ccbe:	1e93      	subs	r3, r2, #2
    ccc0:	bf18      	it	ne
    ccc2:	4596      	cmpne	lr, r2
    ccc4:	d01a      	beq.n	ccfc <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x154>
    ccc6:	428b      	cmp	r3, r1
    ccc8:	d206      	bcs.n	ccd8 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x130>
    ccca:	eb0c 0702 	add.w	r7, ip, r2
    ccce:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
    ccd2:	f117 0f41 	cmn.w	r7, #65	; 0x41
    ccd6:	dc11      	bgt.n	ccfc <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x154>
    ccd8:	1ed3      	subs	r3, r2, #3
    ccda:	bf18      	it	ne
    ccdc:	4294      	cmpne	r4, r2
    ccde:	d00d      	beq.n	ccfc <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x154>
    cce0:	428b      	cmp	r3, r1
    cce2:	d206      	bcs.n	ccf2 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x14a>
    cce4:	eb0c 0702 	add.w	r7, ip, r2
    cce8:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
    ccec:	f117 0f41 	cmn.w	r7, #65	; 0x41
    ccf0:	dc04      	bgt.n	ccfc <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x154>
    ccf2:	1f13      	subs	r3, r2, #4
    ccf4:	d002      	beq.n	ccfc <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x154>
    ccf6:	4296      	cmp	r6, r2
    ccf8:	461a      	mov	r2, r3
    ccfa:	d1cc      	bne.n	cc96 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xee>
    ccfc:	428b      	cmp	r3, r1
    ccfe:	d106      	bne.n	cd0e <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x166>
    cd00:	f64a 1030 	movw	r0, #43312	; 0xa930
    cd04:	f2c0 0002 	movt	r0, #2
    cd08:	f7ff fda0 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    cd0c:	defe      	udf	#254	; 0xfe
    cd0e:	18c5      	adds	r5, r0, r3
    cd10:	462e      	mov	r6, r5
    cd12:	f916 4b01 	ldrsb.w	r4, [r6], #1
    cd16:	2c00      	cmp	r4, #0
    cd18:	b2e2      	uxtb	r2, r4
    cd1a:	db09      	blt.n	cd30 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x188>
    cd1c:	9207      	str	r2, [sp, #28]
    cd1e:	2101      	movs	r1, #1
    cd20:	e046      	b.n	cdb0 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x208>
    cd22:	d9a8      	bls.n	cc76 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xce>
    cd24:	5686      	ldrsb	r6, [r0, r2]
    cd26:	f116 0f40 	cmn.w	r6, #64	; 0x40
    cd2a:	bfa8      	it	ge
    cd2c:	461a      	movge	r2, r3
    cd2e:	e7a2      	b.n	cc76 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xce>
    cd30:	4408      	add	r0, r1
    cd32:	4286      	cmp	r6, r0
    cd34:	d102      	bne.n	cd3c <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x194>
    cd36:	2500      	movs	r5, #0
    cd38:	4606      	mov	r6, r0
    cd3a:	e003      	b.n	cd44 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x19c>
    cd3c:	7869      	ldrb	r1, [r5, #1]
    cd3e:	1cae      	adds	r6, r5, #2
    cd40:	f001 053f 	and.w	r5, r1, #63	; 0x3f
    cd44:	f002 011f 	and.w	r1, r2, #31
    cd48:	2ae0      	cmp	r2, #224	; 0xe0
    cd4a:	d304      	bcc.n	cd56 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1ae>
    cd4c:	4286      	cmp	r6, r0
    cd4e:	d105      	bne.n	cd5c <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1b4>
    cd50:	2400      	movs	r4, #0
    cd52:	4606      	mov	r6, r0
    cd54:	e006      	b.n	cd64 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1bc>
    cd56:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
    cd5a:	e01a      	b.n	cd92 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1ea>
    cd5c:	f816 4b01 	ldrb.w	r4, [r6], #1
    cd60:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    cd64:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
    cd68:	2af0      	cmp	r2, #240	; 0xf0
    cd6a:	d310      	bcc.n	cd8e <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1e6>
    cd6c:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
    cd70:	ea02 4181 	and.w	r1, r2, r1, lsl #18
    cd74:	4286      	cmp	r6, r0
    cd76:	bf1a      	itte	ne
    cd78:	7830      	ldrbne	r0, [r6, #0]
    cd7a:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
    cd7e:	2000      	moveq	r0, #0
    cd80:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
    cd84:	4408      	add	r0, r1
    cd86:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
    cd8a:	d0b9      	beq.n	cd00 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x158>
    cd8c:	e001      	b.n	cd92 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1ea>
    cd8e:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
    cd92:	2880      	cmp	r0, #128	; 0x80
    cd94:	9007      	str	r0, [sp, #28]
    cd96:	d201      	bcs.n	cd9c <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1f4>
    cd98:	2101      	movs	r1, #1
    cd9a:	e009      	b.n	cdb0 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x208>
    cd9c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    cda0:	d201      	bcs.n	cda6 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1fe>
    cda2:	2102      	movs	r1, #2
    cda4:	e004      	b.n	cdb0 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x208>
    cda6:	2104      	movs	r1, #4
    cda8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    cdac:	bf38      	it	cc
    cdae:	2103      	movcc	r1, #3
    cdb0:	4419      	add	r1, r3
    cdb2:	aa04      	add	r2, sp, #16
    cdb4:	a808      	add	r0, sp, #32
    cdb6:	e9cd 3108 	strd	r3, r1, [sp, #32]
    cdba:	f24e 5117 	movw	r1, #58647	; 0xe517
    cdbe:	f2c0 0100 	movt	r1, #0
    cdc2:	9119      	str	r1, [sp, #100]	; 0x64
    cdc4:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
    cdc8:	a902      	add	r1, sp, #8
    cdca:	9116      	str	r1, [sp, #88]	; 0x58
    cdcc:	f24c 71dd 	movw	r1, #51165	; 0xc7dd
    cdd0:	f2c0 0100 	movt	r1, #0
    cdd4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
    cdd8:	f64d 2009 	movw	r0, #55817	; 0xda09
    cddc:	f2c0 0000 	movt	r0, #0
    cde0:	a910      	add	r1, sp, #64	; 0x40
    cde2:	9013      	str	r0, [sp, #76]	; 0x4c
    cde4:	a807      	add	r0, sp, #28
    cde6:	9012      	str	r0, [sp, #72]	; 0x48
    cde8:	f24e 30cf 	movw	r0, #58319	; 0xe3cf
    cdec:	f2c0 0000 	movt	r0, #0
    cdf0:	9011      	str	r0, [sp, #68]	; 0x44
    cdf2:	a806      	add	r0, sp, #24
    cdf4:	9010      	str	r0, [sp, #64]	; 0x40
    cdf6:	2005      	movs	r0, #5
    cdf8:	900f      	str	r0, [sp, #60]	; 0x3c
    cdfa:	910e      	str	r1, [sp, #56]	; 0x38
    cdfc:	2100      	movs	r1, #0
    cdfe:	910d      	str	r1, [sp, #52]	; 0x34
    ce00:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
    ce04:	f64a 307c 	movw	r0, #43900	; 0xab7c
    ce08:	f64a 31a4 	movw	r1, #43940	; 0xaba4
    ce0c:	f2c0 0002 	movt	r0, #2
    ce10:	900a      	str	r0, [sp, #40]	; 0x28
    ce12:	f2c0 0102 	movt	r1, #2
    ce16:	a80a      	add	r0, sp, #40	; 0x28
    ce18:	f7ff fd55 	bl	c8c6 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
    ce1c:	defe      	udf	#254	; 0xfe
    ce1e:	2500      	movs	r5, #0
    ce20:	e70a      	b.n	cc38 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x90>
    ce22:	428a      	cmp	r2, r1
    ce24:	f24e 5017 	movw	r0, #58647	; 0xe517
    ce28:	a904      	add	r1, sp, #16
    ce2a:	f2c0 0000 	movt	r0, #0
    ce2e:	bf88      	it	hi
    ce30:	4613      	movhi	r3, r2
    ce32:	9308      	str	r3, [sp, #32]
    ce34:	9015      	str	r0, [sp, #84]	; 0x54
    ce36:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
    ce3a:	a802      	add	r0, sp, #8
    ce3c:	9012      	str	r0, [sp, #72]	; 0x48
    ce3e:	f24e 30cf 	movw	r0, #58319	; 0xe3cf
    ce42:	f2c0 0000 	movt	r0, #0
    ce46:	a910      	add	r1, sp, #64	; 0x40
    ce48:	9011      	str	r0, [sp, #68]	; 0x44
    ce4a:	a808      	add	r0, sp, #32
    ce4c:	9010      	str	r0, [sp, #64]	; 0x40
    ce4e:	2003      	movs	r0, #3
    ce50:	900f      	str	r0, [sp, #60]	; 0x3c
    ce52:	910e      	str	r1, [sp, #56]	; 0x38
    ce54:	2100      	movs	r1, #0
    ce56:	910d      	str	r1, [sp, #52]	; 0x34
    ce58:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
    ce5c:	f64a 20e8 	movw	r0, #43752	; 0xaae8
    ce60:	f64a 3100 	movw	r1, #43776	; 0xab00
    ce64:	f2c0 0002 	movt	r0, #2
    ce68:	f2c0 0102 	movt	r1, #2
    ce6c:	900a      	str	r0, [sp, #40]	; 0x28
    ce6e:	e7d2      	b.n	ce16 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x26e>
    ce70:	f24e 5017 	movw	r0, #58647	; 0xe517
    ce74:	a904      	add	r1, sp, #16
    ce76:	f2c0 0000 	movt	r0, #0
    ce7a:	9017      	str	r0, [sp, #92]	; 0x5c
    ce7c:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
    ce80:	a802      	add	r0, sp, #8
    ce82:	9014      	str	r0, [sp, #80]	; 0x50
    ce84:	f24e 30cf 	movw	r0, #58319	; 0xe3cf
    ce88:	a901      	add	r1, sp, #4
    ce8a:	f2c0 0000 	movt	r0, #0
    ce8e:	9013      	str	r0, [sp, #76]	; 0x4c
    ce90:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
    ce94:	4668      	mov	r0, sp
    ce96:	9010      	str	r0, [sp, #64]	; 0x40
    ce98:	2004      	movs	r0, #4
    ce9a:	a910      	add	r1, sp, #64	; 0x40
    ce9c:	900f      	str	r0, [sp, #60]	; 0x3c
    ce9e:	910e      	str	r1, [sp, #56]	; 0x38
    cea0:	2100      	movs	r1, #0
    cea2:	910d      	str	r1, [sp, #52]	; 0x34
    cea4:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
    cea8:	f64a 3020 	movw	r0, #43808	; 0xab20
    ceac:	f64a 3140 	movw	r1, #43840	; 0xab40
    ceb0:	f2c0 0002 	movt	r0, #2
    ceb4:	900a      	str	r0, [sp, #40]	; 0x28
    ceb6:	f2c0 0102 	movt	r1, #2
    ceba:	e7ac      	b.n	ce16 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x26e>

0000cebc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E>:
    cebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cec0:	b089      	sub	sp, #36	; 0x24
    cec2:	2700      	movs	r7, #0
    cec4:	2a00      	cmp	r2, #0
    cec6:	f000 8089 	beq.w	cfdc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x120>
    ceca:	4683      	mov	fp, r0
    cecc:	a802      	add	r0, sp, #8
    cece:	4692      	mov	sl, r2
    ced0:	460d      	mov	r5, r1
    ced2:	3018      	adds	r0, #24
    ced4:	9001      	str	r0, [sp, #4]
    ced6:	f89b 0008 	ldrb.w	r0, [fp, #8]
    ceda:	b150      	cbz	r0, cef2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x36>
    cedc:	e9db 0100 	ldrd	r0, r1, [fp]
    cee0:	2204      	movs	r2, #4
    cee2:	68cb      	ldr	r3, [r1, #12]
    cee4:	f64a 0180 	movw	r1, #43136	; 0xa880
    cee8:	f2c0 0102 	movt	r1, #2
    ceec:	4798      	blx	r3
    ceee:	2800      	cmp	r0, #0
    cef0:	d171      	bne.n	cfd6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x11a>
    cef2:	200a      	movs	r0, #10
    cef4:	2101      	movs	r1, #1
    cef6:	9008      	str	r0, [sp, #32]
    cef8:	4652      	mov	r2, sl
    cefa:	e9cd 0106 	strd	r0, r1, [sp, #24]
    cefe:	200a      	movs	r0, #10
    cf00:	4629      	mov	r1, r5
    cf02:	e9cd 7a04 	strd	r7, sl, [sp, #16]
    cf06:	e9cd 5a02 	strd	r5, sl, [sp, #8]
    cf0a:	e006      	b.n	cf1a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x5e>
    cf0c:	eba0 0209 	sub.w	r2, r0, r9
    cf10:	a802      	add	r0, sp, #8
    cf12:	9902      	ldr	r1, [sp, #8]
    cf14:	4420      	add	r0, r4
    cf16:	7dc0      	ldrb	r0, [r0, #23]
    cf18:	4449      	add	r1, r9
    cf1a:	f7ff fd0b 	bl	c934 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E>
    cf1e:	2801      	cmp	r0, #1
    cf20:	d151      	bne.n	cfc6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x10a>
    cf22:	9804      	ldr	r0, [sp, #16]
    cf24:	9c07      	ldr	r4, [sp, #28]
    cf26:	4408      	add	r0, r1
    cf28:	f100 0901 	add.w	r9, r0, #1
    cf2c:	f8cd 9010 	str.w	r9, [sp, #16]
    cf30:	45a1      	cmp	r9, r4
    cf32:	d202      	bcs.n	cf3a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x7e>
    cf34:	f8dd 800c 	ldr.w	r8, [sp, #12]
    cf38:	e016      	b.n	cf68 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xac>
    cf3a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    cf3e:	4620      	mov	r0, r4
    cf40:	45c8      	cmp	r8, r9
    cf42:	bf38      	it	cc
    cf44:	2000      	movcc	r0, #0
    cf46:	d30f      	bcc.n	cf68 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xac>
    cf48:	2c05      	cmp	r4, #5
    cf4a:	d24b      	bcs.n	cfe4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x128>
    cf4c:	42a0      	cmp	r0, r4
    cf4e:	d10b      	bne.n	cf68 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xac>
    cf50:	9802      	ldr	r0, [sp, #8]
    cf52:	eba9 0604 	sub.w	r6, r9, r4
    cf56:	9901      	ldr	r1, [sp, #4]
    cf58:	4430      	add	r0, r6
    cf5a:	4288      	cmp	r0, r1
    cf5c:	d036      	beq.n	cfcc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x110>
    cf5e:	9901      	ldr	r1, [sp, #4]
    cf60:	4622      	mov	r2, r4
    cf62:	f005 fa8b 	bl	1247c <memcmp>
    cf66:	b388      	cbz	r0, cfcc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x110>
    cf68:	9805      	ldr	r0, [sp, #20]
    cf6a:	4548      	cmp	r0, r9
    cf6c:	bf28      	it	cs
    cf6e:	4580      	cmpcs	r8, r0
    cf70:	d2cc      	bcs.n	cf0c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x50>
    cf72:	4654      	mov	r4, sl
    cf74:	f88b 7008 	strb.w	r7, [fp, #8]
    cf78:	ebaa 0604 	sub.w	r6, sl, r4
    cf7c:	fab4 f384 	clz	r3, r4
    cf80:	fab6 f286 	clz	r2, r6
    cf84:	e9db 0100 	ldrd	r0, r1, [fp]
    cf88:	095b      	lsrs	r3, r3, #5
    cf8a:	0952      	lsrs	r2, r2, #5
    cf8c:	ea53 0702 	orrs.w	r7, r3, r2
    cf90:	d105      	bne.n	cf9e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xe2>
    cf92:	45a2      	cmp	sl, r4
    cf94:	d92b      	bls.n	cfee <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x132>
    cf96:	572a      	ldrsb	r2, [r5, r4]
    cf98:	f112 0f41 	cmn.w	r2, #65	; 0x41
    cf9c:	dd27      	ble.n	cfee <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x132>
    cf9e:	68cb      	ldr	r3, [r1, #12]
    cfa0:	4629      	mov	r1, r5
    cfa2:	4622      	mov	r2, r4
    cfa4:	4798      	blx	r3
    cfa6:	b9b0      	cbnz	r0, cfd6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x11a>
    cfa8:	b92f      	cbnz	r7, cfb6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xfa>
    cfaa:	45a2      	cmp	sl, r4
    cfac:	d926      	bls.n	cffc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x140>
    cfae:	5728      	ldrsb	r0, [r5, r4]
    cfb0:	f110 0f41 	cmn.w	r0, #65	; 0x41
    cfb4:	dd22      	ble.n	cffc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x140>
    cfb6:	4425      	add	r5, r4
    cfb8:	2e00      	cmp	r6, #0
    cfba:	46b2      	mov	sl, r6
    cfbc:	f04f 0700 	mov.w	r7, #0
    cfc0:	f47f af89 	bne.w	ced6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x1a>
    cfc4:	e009      	b.n	cfda <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x11e>
    cfc6:	9805      	ldr	r0, [sp, #20]
    cfc8:	9004      	str	r0, [sp, #16]
    cfca:	e7d2      	b.n	cf72 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xb6>
    cfcc:	2001      	movs	r0, #1
    cfce:	1c74      	adds	r4, r6, #1
    cfd0:	f88b 0008 	strb.w	r0, [fp, #8]
    cfd4:	e7d0      	b.n	cf78 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xbc>
    cfd6:	2701      	movs	r7, #1
    cfd8:	e000      	b.n	cfdc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x120>
    cfda:	2700      	movs	r7, #0
    cfdc:	4638      	mov	r0, r7
    cfde:	b009      	add	sp, #36	; 0x24
    cfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfe4:	4620      	mov	r0, r4
    cfe6:	2104      	movs	r1, #4
    cfe8:	f7ff fd9a 	bl	cb20 <_ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E>
    cfec:	defe      	udf	#254	; 0xfe
    cfee:	4628      	mov	r0, r5
    cff0:	4651      	mov	r1, sl
    cff2:	2200      	movs	r2, #0
    cff4:	4623      	mov	r3, r4
    cff6:	f7ff fdd7 	bl	cba8 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E>
    cffa:	defe      	udf	#254	; 0xfe
    cffc:	4628      	mov	r0, r5
    cffe:	4651      	mov	r1, sl
    d000:	4622      	mov	r2, r4
    d002:	4653      	mov	r3, sl
    d004:	f7ff fdd0 	bl	cba8 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E>
    d008:	defe      	udf	#254	; 0xfe

0000d00a <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E>:
    d00a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d00e:	b091      	sub	sp, #68	; 0x44
    d010:	4604      	mov	r4, r0
    d012:	7a00      	ldrb	r0, [r0, #8]
    d014:	b140      	cbz	r0, d028 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0x1e>
    d016:	2001      	movs	r0, #1
    d018:	6861      	ldr	r1, [r4, #4]
    d01a:	7220      	strb	r0, [r4, #8]
    d01c:	1c48      	adds	r0, r1, #1
    d01e:	6060      	str	r0, [r4, #4]
    d020:	4620      	mov	r0, r4
    d022:	b011      	add	sp, #68	; 0x44
    d024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d028:	4616      	mov	r6, r2
    d02a:	460d      	mov	r5, r1
    d02c:	e9d4 1200 	ldrd	r1, r2, [r4]
    d030:	7808      	ldrb	r0, [r1, #0]
    d032:	0740      	lsls	r0, r0, #29
    d034:	d419      	bmi.n	d06a <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0x60>
    d036:	f64a 439e 	movw	r3, #44190	; 0xac9e
    d03a:	e9d1 0706 	ldrd	r0, r7, [r1, #24]
    d03e:	f64a 419a 	movw	r1, #44186	; 0xac9a
    d042:	f2c0 0302 	movt	r3, #2
    d046:	f2c0 0102 	movt	r1, #2
    d04a:	2a00      	cmp	r2, #0
    d04c:	bf08      	it	eq
    d04e:	4619      	moveq	r1, r3
    d050:	68fb      	ldr	r3, [r7, #12]
    d052:	f04f 0202 	mov.w	r2, #2
    d056:	bf08      	it	eq
    d058:	2201      	moveq	r2, #1
    d05a:	4798      	blx	r3
    d05c:	2800      	cmp	r0, #0
    d05e:	d1da      	bne.n	d016 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xc>
    d060:	68f2      	ldr	r2, [r6, #12]
    d062:	4628      	mov	r0, r5
    d064:	6821      	ldr	r1, [r4, #0]
    d066:	4790      	blx	r2
    d068:	e7d6      	b.n	d018 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xe>
    d06a:	b95a      	cbnz	r2, d084 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0x7a>
    d06c:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
    d070:	2202      	movs	r2, #2
    d072:	68cb      	ldr	r3, [r1, #12]
    d074:	f64a 419c 	movw	r1, #44188	; 0xac9c
    d078:	f2c0 0102 	movt	r1, #2
    d07c:	4798      	blx	r3
    d07e:	2800      	cmp	r0, #0
    d080:	d1c9      	bne.n	d016 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xc>
    d082:	6821      	ldr	r1, [r4, #0]
    d084:	2000      	movs	r0, #0
    d086:	2301      	movs	r3, #1
    d088:	9003      	str	r0, [sp, #12]
    d08a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    d08e:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
    d092:	f88d 300c 	strb.w	r3, [sp, #12]
    d096:	e9cd 0201 	strd	r0, r2, [sp, #4]
    d09a:	e891 5c00 	ldmia.w	r1, {sl, fp, ip, lr}
    d09e:	e9d1 8904 	ldrd	r8, r9, [r1, #16]
    d0a2:	e9d1 3708 	ldrd	r3, r7, [r1, #32]
    d0a6:	e9d1 020a 	ldrd	r0, r2, [r1, #40]	; 0x28
    d0aa:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
    d0ae:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    d0b2:	a904      	add	r1, sp, #16
    d0b4:	e9cd ab04 	strd	sl, fp, [sp, #16]
    d0b8:	e9cd 020e 	strd	r0, r2, [sp, #56]	; 0x38
    d0bc:	f64a 4080 	movw	r0, #44160	; 0xac80
    d0c0:	f2c0 0002 	movt	r0, #2
    d0c4:	e9cd 370c 	strd	r3, r7, [sp, #48]	; 0x30
    d0c8:	900b      	str	r0, [sp, #44]	; 0x2c
    d0ca:	a801      	add	r0, sp, #4
    d0cc:	900a      	str	r0, [sp, #40]	; 0x28
    d0ce:	4628      	mov	r0, r5
    d0d0:	e9cd 8908 	strd	r8, r9, [sp, #32]
    d0d4:	e9cd ce06 	strd	ip, lr, [sp, #24]
    d0d8:	68f2      	ldr	r2, [r6, #12]
    d0da:	4790      	blx	r2
    d0dc:	2800      	cmp	r0, #0
    d0de:	d19a      	bne.n	d016 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xc>
    d0e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    d0e4:	2202      	movs	r2, #2
    d0e6:	68cb      	ldr	r3, [r1, #12]
    d0e8:	f64a 4198 	movw	r1, #44184	; 0xac98
    d0ec:	f2c0 0102 	movt	r1, #2
    d0f0:	4798      	blx	r3
    d0f2:	e791      	b.n	d018 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xe>

0000d0f4 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>:
    d0f4:	b5b0      	push	{r4, r5, r7, lr}
    d0f6:	4604      	mov	r4, r0
    d0f8:	7a05      	ldrb	r5, [r0, #8]
    d0fa:	6840      	ldr	r0, [r0, #4]
    d0fc:	b308      	cbz	r0, d142 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x4e>
    d0fe:	b10d      	cbz	r5, d104 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x10>
    d100:	2501      	movs	r5, #1
    d102:	e01d      	b.n	d140 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x4c>
    d104:	2801      	cmp	r0, #1
    d106:	d110      	bne.n	d12a <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x36>
    d108:	7a60      	ldrb	r0, [r4, #9]
    d10a:	b170      	cbz	r0, d12a <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x36>
    d10c:	6821      	ldr	r1, [r4, #0]
    d10e:	7808      	ldrb	r0, [r1, #0]
    d110:	0740      	lsls	r0, r0, #29
    d112:	d40a      	bmi.n	d12a <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x36>
    d114:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
    d118:	2201      	movs	r2, #1
    d11a:	68cb      	ldr	r3, [r1, #12]
    d11c:	f64a 419f 	movw	r1, #44191	; 0xac9f
    d120:	f2c0 0102 	movt	r1, #2
    d124:	2501      	movs	r5, #1
    d126:	4798      	blx	r3
    d128:	b950      	cbnz	r0, d140 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x4c>
    d12a:	6821      	ldr	r1, [r4, #0]
    d12c:	2201      	movs	r2, #1
    d12e:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
    d132:	68cb      	ldr	r3, [r1, #12]
    d134:	f64a 41a0 	movw	r1, #44192	; 0xaca0
    d138:	f2c0 0102 	movt	r1, #2
    d13c:	4798      	blx	r3
    d13e:	4605      	mov	r5, r0
    d140:	7225      	strb	r5, [r4, #8]
    d142:	2d00      	cmp	r5, #0
    d144:	bf18      	it	ne
    d146:	2501      	movne	r5, #1
    d148:	4628      	mov	r0, r5
    d14a:	bdb0      	pop	{r4, r5, r7, pc}

0000d14c <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E>:
    d14c:	b580      	push	{r7, lr}
    d14e:	b082      	sub	sp, #8
    d150:	2200      	movs	r2, #0
    d152:	297f      	cmp	r1, #127	; 0x7f
    d154:	9201      	str	r2, [sp, #4]
    d156:	d803      	bhi.n	d160 <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x14>
    d158:	f88d 1004 	strb.w	r1, [sp, #4]
    d15c:	2201      	movs	r2, #1
    d15e:	e03b      	b.n	d1d8 <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x8c>
    d160:	ebb2 2fd1 	cmp.w	r2, r1, lsr #11
    d164:	d10b      	bne.n	d17e <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x32>
    d166:	2202      	movs	r2, #2
    d168:	098b      	lsrs	r3, r1, #6
    d16a:	f362 119f 	bfi	r1, r2, #6, #26
    d16e:	f88d 1005 	strb.w	r1, [sp, #5]
    d172:	2106      	movs	r1, #6
    d174:	f361 135f 	bfi	r3, r1, #5, #27
    d178:	f88d 3004 	strb.w	r3, [sp, #4]
    d17c:	e02c      	b.n	d1d8 <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x8c>
    d17e:	2200      	movs	r2, #0
    d180:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
    d184:	d112      	bne.n	d1ac <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x60>
    d186:	2202      	movs	r2, #2
    d188:	460b      	mov	r3, r1
    d18a:	f362 139f 	bfi	r3, r2, #6, #26
    d18e:	f88d 3006 	strb.w	r3, [sp, #6]
    d192:	098b      	lsrs	r3, r1, #6
    d194:	0b09      	lsrs	r1, r1, #12
    d196:	f362 139f 	bfi	r3, r2, #6, #26
    d19a:	220e      	movs	r2, #14
    d19c:	f362 111f 	bfi	r1, r2, #4, #28
    d1a0:	f88d 3005 	strb.w	r3, [sp, #5]
    d1a4:	f88d 1004 	strb.w	r1, [sp, #4]
    d1a8:	2203      	movs	r2, #3
    d1aa:	e015      	b.n	d1d8 <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x8c>
    d1ac:	2202      	movs	r2, #2
    d1ae:	460b      	mov	r3, r1
    d1b0:	f362 139f 	bfi	r3, r2, #6, #26
    d1b4:	f88d 3007 	strb.w	r3, [sp, #7]
    d1b8:	098b      	lsrs	r3, r1, #6
    d1ba:	f362 139f 	bfi	r3, r2, #6, #26
    d1be:	f88d 3006 	strb.w	r3, [sp, #6]
    d1c2:	0b0b      	lsrs	r3, r1, #12
    d1c4:	f362 139f 	bfi	r3, r2, #6, #26
    d1c8:	22f0      	movs	r2, #240	; 0xf0
    d1ca:	ea42 4191 	orr.w	r1, r2, r1, lsr #18
    d1ce:	2204      	movs	r2, #4
    d1d0:	f88d 3005 	strb.w	r3, [sp, #5]
    d1d4:	f88d 1004 	strb.w	r1, [sp, #4]
    d1d8:	a901      	add	r1, sp, #4
    d1da:	f7ff fe6f 	bl	cebc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E>
    d1de:	b002      	add	sp, #8
    d1e0:	bd80      	pop	{r7, pc}

0000d1e2 <_ZN4core3fmt5Write9write_fmt17hd5d67e64151488d3E>:
    d1e2:	b570      	push	{r4, r5, r6, lr}
    d1e4:	b088      	sub	sp, #32
    d1e6:	9001      	str	r0, [sp, #4]
    d1e8:	aa02      	add	r2, sp, #8
    d1ea:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
    d1ee:	f64a 41a4 	movw	r1, #44196	; 0xaca4
    d1f2:	4610      	mov	r0, r2
    d1f4:	f2c0 0102 	movt	r1, #2
    d1f8:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
    d1fc:	a801      	add	r0, sp, #4
    d1fe:	f000 f831 	bl	d264 <_ZN4core3fmt5write17h51826aee11d21b9bE>
    d202:	b008      	add	sp, #32
    d204:	bd70      	pop	{r4, r5, r6, pc}

0000d206 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hc9f594331d92d7bbE>:
    d206:	6800      	ldr	r0, [r0, #0]
    d208:	f7ff be58 	b.w	cebc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E>

0000d20c <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h44c662229c53045aE>:
    d20c:	6800      	ldr	r0, [r0, #0]
    d20e:	f7ff bf9d 	b.w	d14c <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E>

0000d212 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h44a86feaf2f21d35E>:
    d212:	b570      	push	{r4, r5, r6, lr}
    d214:	b088      	sub	sp, #32
    d216:	6800      	ldr	r0, [r0, #0]
    d218:	aa02      	add	r2, sp, #8
    d21a:	9001      	str	r0, [sp, #4]
    d21c:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
    d220:	4610      	mov	r0, r2
    d222:	f64a 41a4 	movw	r1, #44196	; 0xaca4
    d226:	f2c0 0102 	movt	r1, #2
    d22a:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
    d22e:	a801      	add	r0, sp, #4
    d230:	f000 f818 	bl	d264 <_ZN4core3fmt5write17h51826aee11d21b9bE>
    d234:	b008      	add	sp, #32
    d236:	bd70      	pop	{r4, r5, r6, pc}

0000d238 <_ZN4core3fmt10ArgumentV110show_usize17h3c2fac3bad94a947E>:
    d238:	6800      	ldr	r0, [r0, #0]
    d23a:	460a      	mov	r2, r1
    d23c:	2101      	movs	r1, #1
    d23e:	f001 b832 	b.w	e2a6 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

0000d242 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE>:
    d242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d246:	b086      	sub	sp, #24
    d248:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
    d24c:	466a      	mov	r2, sp
    d24e:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
    d252:	4613      	mov	r3, r2
    d254:	4660      	mov	r0, ip
    d256:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
    d25a:	f000 f803 	bl	d264 <_ZN4core3fmt5write17h51826aee11d21b9bE>
    d25e:	b006      	add	sp, #24
    d260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d264 <_ZN4core3fmt5write17h51826aee11d21b9bE>:
    d264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d268:	b08d      	sub	sp, #52	; 0x34
    d26a:	2303      	movs	r3, #3
    d26c:	e9d2 5404 	ldrd	r5, r4, [r2, #16]
    d270:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    d274:	2320      	movs	r3, #32
    d276:	9301      	str	r3, [sp, #4]
    d278:	2300      	movs	r3, #0
    d27a:	f10d 0c18 	add.w	ip, sp, #24
    d27e:	9300      	str	r3, [sp, #0]
    d280:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
    d284:	e88c 0023 	stmia.w	ip, {r0, r1, r5}
    d288:	6897      	ldr	r7, [r2, #8]
    d28a:	9304      	str	r3, [sp, #16]
    d28c:	2f00      	cmp	r7, #0
    d28e:	9302      	str	r3, [sp, #8]
    d290:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
    d294:	9309      	str	r3, [sp, #36]	; 0x24
    d296:	f000 8098 	beq.w	d3ca <_ZN4core3fmt5write17h51826aee11d21b9bE+0x166>
    d29a:	e9d2 ba00 	ldrd	fp, sl, [r2]
    d29e:	68d4      	ldr	r4, [r2, #12]
    d2a0:	4554      	cmp	r4, sl
    d2a2:	bf88      	it	hi
    d2a4:	4654      	movhi	r4, sl
    d2a6:	2c00      	cmp	r4, #0
    d2a8:	f000 80b4 	beq.w	d414 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1b0>
    d2ac:	e9db 3200 	ldrd	r3, r2, [fp]
    d2b0:	68ce      	ldr	r6, [r1, #12]
    d2b2:	4619      	mov	r1, r3
    d2b4:	47b0      	blx	r6
    d2b6:	2800      	cmp	r0, #0
    d2b8:	f040 80b9 	bne.w	d42e <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1ca>
    d2bc:	f24d 2939 	movw	r9, #53817	; 0xd239
    d2c0:	2500      	movs	r5, #0
    d2c2:	f2c0 0900 	movt	r9, #0
    d2c6:	46e8      	mov	r8, sp
    d2c8:	68b8      	ldr	r0, [r7, #8]
    d2ca:	9001      	str	r0, [sp, #4]
    d2cc:	f897 0020 	ldrb.w	r0, [r7, #32]
    d2d0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    d2d4:	68f8      	ldr	r0, [r7, #12]
    d2d6:	9000      	str	r0, [sp, #0]
    d2d8:	69b8      	ldr	r0, [r7, #24]
    d2da:	2801      	cmp	r0, #1
    d2dc:	d011      	beq.n	d302 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x9e>
    d2de:	2802      	cmp	r0, #2
    d2e0:	d003      	beq.n	d2ea <_ZN4core3fmt5write17h51826aee11d21b9bE+0x86>
    d2e2:	2803      	cmp	r0, #3
    d2e4:	d01d      	beq.n	d322 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xbe>
    d2e6:	69f9      	ldr	r1, [r7, #28]
    d2e8:	e019      	b.n	d31e <_ZN4core3fmt5write17h51826aee11d21b9bE+0xba>
    d2ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    d2ee:	4288      	cmp	r0, r1
    d2f0:	d017      	beq.n	d322 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xbe>
    d2f2:	f100 0108 	add.w	r1, r0, #8
    d2f6:	9108      	str	r1, [sp, #32]
    d2f8:	6841      	ldr	r1, [r0, #4]
    d2fa:	4549      	cmp	r1, r9
    d2fc:	d111      	bne.n	d322 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xbe>
    d2fe:	6800      	ldr	r0, [r0, #0]
    d300:	e00c      	b.n	d31c <_ZN4core3fmt5write17h51826aee11d21b9bE+0xb8>
    d302:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d304:	69f9      	ldr	r1, [r7, #28]
    d306:	4291      	cmp	r1, r2
    d308:	f080 8099 	bcs.w	d43e <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1da>
    d30c:	980a      	ldr	r0, [sp, #40]	; 0x28
    d30e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    d312:	6852      	ldr	r2, [r2, #4]
    d314:	454a      	cmp	r2, r9
    d316:	d104      	bne.n	d322 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xbe>
    d318:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
    d31c:	6801      	ldr	r1, [r0, #0]
    d31e:	2001      	movs	r0, #1
    d320:	e000      	b.n	d324 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xc0>
    d322:	2000      	movs	r0, #0
    d324:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d328:	6938      	ldr	r0, [r7, #16]
    d32a:	2801      	cmp	r0, #1
    d32c:	d011      	beq.n	d352 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xee>
    d32e:	2802      	cmp	r0, #2
    d330:	d003      	beq.n	d33a <_ZN4core3fmt5write17h51826aee11d21b9bE+0xd6>
    d332:	2803      	cmp	r0, #3
    d334:	d01c      	beq.n	d370 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x10c>
    d336:	6979      	ldr	r1, [r7, #20]
    d338:	e018      	b.n	d36c <_ZN4core3fmt5write17h51826aee11d21b9bE+0x108>
    d33a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    d33e:	4288      	cmp	r0, r1
    d340:	d016      	beq.n	d370 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x10c>
    d342:	f100 0108 	add.w	r1, r0, #8
    d346:	9108      	str	r1, [sp, #32]
    d348:	6841      	ldr	r1, [r0, #4]
    d34a:	4549      	cmp	r1, r9
    d34c:	d110      	bne.n	d370 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x10c>
    d34e:	6800      	ldr	r0, [r0, #0]
    d350:	e00b      	b.n	d36a <_ZN4core3fmt5write17h51826aee11d21b9bE+0x106>
    d352:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d354:	6979      	ldr	r1, [r7, #20]
    d356:	4291      	cmp	r1, r2
    d358:	d271      	bcs.n	d43e <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1da>
    d35a:	980a      	ldr	r0, [sp, #40]	; 0x28
    d35c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    d360:	6852      	ldr	r2, [r2, #4]
    d362:	454a      	cmp	r2, r9
    d364:	d104      	bne.n	d370 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x10c>
    d366:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
    d36a:	6801      	ldr	r1, [r0, #0]
    d36c:	2001      	movs	r0, #1
    d36e:	e000      	b.n	d372 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x10e>
    d370:	2000      	movs	r0, #0
    d372:	e9cd 0104 	strd	r0, r1, [sp, #16]
    d376:	6838      	ldr	r0, [r7, #0]
    d378:	2801      	cmp	r0, #1
    d37a:	d107      	bne.n	d38c <_ZN4core3fmt5write17h51826aee11d21b9bE+0x128>
    d37c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d37e:	6879      	ldr	r1, [r7, #4]
    d380:	4291      	cmp	r1, r2
    d382:	d263      	bcs.n	d44c <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1e8>
    d384:	980a      	ldr	r0, [sp, #40]	; 0x28
    d386:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    d38a:	e006      	b.n	d39a <_ZN4core3fmt5write17h51826aee11d21b9bE+0x136>
    d38c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    d390:	4288      	cmp	r0, r1
    d392:	d062      	beq.n	d45a <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1f6>
    d394:	f100 0108 	add.w	r1, r0, #8
    d398:	9108      	str	r1, [sp, #32]
    d39a:	1d01      	adds	r1, r0, #4
    d39c:	6800      	ldr	r0, [r0, #0]
    d39e:	680a      	ldr	r2, [r1, #0]
    d3a0:	4641      	mov	r1, r8
    d3a2:	4790      	blx	r2
    d3a4:	2800      	cmp	r0, #0
    d3a6:	d142      	bne.n	d42e <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1ca>
    d3a8:	1c6e      	adds	r6, r5, #1
    d3aa:	42a6      	cmp	r6, r4
    d3ac:	d233      	bcs.n	d416 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1b2>
    d3ae:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
    d3b2:	eb0b 02c5 	add.w	r2, fp, r5, lsl #3
    d3b6:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
    d3ba:	68db      	ldr	r3, [r3, #12]
    d3bc:	4798      	blx	r3
    d3be:	3724      	adds	r7, #36	; 0x24
    d3c0:	2800      	cmp	r0, #0
    d3c2:	4635      	mov	r5, r6
    d3c4:	f43f af80 	beq.w	d2c8 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x64>
    d3c8:	e031      	b.n	d42e <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1ca>
    d3ca:	e9d2 ba00 	ldrd	fp, sl, [r2]
    d3ce:	4554      	cmp	r4, sl
    d3d0:	bf88      	it	hi
    d3d2:	4654      	movhi	r4, sl
    d3d4:	b1f4      	cbz	r4, d414 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1b0>
    d3d6:	e9db 3200 	ldrd	r3, r2, [fp]
    d3da:	68cf      	ldr	r7, [r1, #12]
    d3dc:	4619      	mov	r1, r3
    d3de:	47b8      	blx	r7
    d3e0:	bb28      	cbnz	r0, d42e <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1ca>
    d3e2:	2700      	movs	r7, #0
    d3e4:	46e8      	mov	r8, sp
    d3e6:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
    d3ea:	f855 0037 	ldr.w	r0, [r5, r7, lsl #3]
    d3ee:	684a      	ldr	r2, [r1, #4]
    d3f0:	4641      	mov	r1, r8
    d3f2:	4790      	blx	r2
    d3f4:	b9d8      	cbnz	r0, d42e <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1ca>
    d3f6:	1c7e      	adds	r6, r7, #1
    d3f8:	42a6      	cmp	r6, r4
    d3fa:	d20c      	bcs.n	d416 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1b2>
    d3fc:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
    d400:	eb0b 02c7 	add.w	r2, fp, r7, lsl #3
    d404:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
    d408:	68db      	ldr	r3, [r3, #12]
    d40a:	4798      	blx	r3
    d40c:	2800      	cmp	r0, #0
    d40e:	4637      	mov	r7, r6
    d410:	d0e9      	beq.n	d3e6 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x182>
    d412:	e00c      	b.n	d42e <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1ca>
    d414:	2600      	movs	r6, #0
    d416:	45b2      	cmp	sl, r6
    d418:	d90d      	bls.n	d436 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1d2>
    d41a:	eb0b 02c6 	add.w	r2, fp, r6, lsl #3
    d41e:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
    d422:	f85b 1036 	ldr.w	r1, [fp, r6, lsl #3]
    d426:	6852      	ldr	r2, [r2, #4]
    d428:	68db      	ldr	r3, [r3, #12]
    d42a:	4798      	blx	r3
    d42c:	b118      	cbz	r0, d436 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1d2>
    d42e:	2001      	movs	r0, #1
    d430:	b00d      	add	sp, #52	; 0x34
    d432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d436:	2000      	movs	r0, #0
    d438:	b00d      	add	sp, #52	; 0x34
    d43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d43e:	f64a 40e8 	movw	r0, #44264	; 0xace8
    d442:	f2c0 0002 	movt	r0, #2
    d446:	f7ff fa1e 	bl	c886 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
    d44a:	defe      	udf	#254	; 0xfe
    d44c:	f64a 40d8 	movw	r0, #44248	; 0xacd8
    d450:	f2c0 0002 	movt	r0, #2
    d454:	f7ff fa17 	bl	c886 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
    d458:	defe      	udf	#254	; 0xfe
    d45a:	f64a 1030 	movw	r0, #43312	; 0xa930
    d45e:	f2c0 0002 	movt	r0, #2
    d462:	f7ff f9f3 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    d466:	defe      	udf	#254	; 0xfe

0000d468 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>:
    d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d46c:	b083      	sub	sp, #12
    d46e:	e9dd 690c 	ldrd	r6, r9, [sp, #48]	; 0x30
    d472:	461f      	mov	r7, r3
    d474:	4692      	mov	sl, r2
    d476:	4604      	mov	r4, r0
    d478:	b1c9      	cbz	r1, d4ae <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x46>
    d47a:	f8d4 e000 	ldr.w	lr, [r4]
    d47e:	f04f 082b 	mov.w	r8, #43	; 0x2b
    d482:	f01e 0101 	ands.w	r1, lr, #1
    d486:	bf08      	it	eq
    d488:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
    d48c:	eb01 0b09 	add.w	fp, r1, r9
    d490:	ea5f 714e 	movs.w	r1, lr, lsl #29
    d494:	d514      	bpl.n	d4c0 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x58>
    d496:	b1bf      	cbz	r7, d4c8 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x60>
    d498:	1e79      	subs	r1, r7, #1
    d49a:	f007 0c03 	and.w	ip, r7, #3
    d49e:	2903      	cmp	r1, #3
    d4a0:	d214      	bcs.n	d4cc <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x64>
    d4a2:	2100      	movs	r1, #0
    d4a4:	4653      	mov	r3, sl
    d4a6:	f1bc 0f00 	cmp.w	ip, #0
    d4aa:	d136      	bne.n	d51a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xb2>
    d4ac:	e04d      	b.n	d54a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
    d4ae:	f8d4 e000 	ldr.w	lr, [r4]
    d4b2:	f109 0b01 	add.w	fp, r9, #1
    d4b6:	f04f 082d 	mov.w	r8, #45	; 0x2d
    d4ba:	ea5f 714e 	movs.w	r1, lr, lsl #29
    d4be:	d4ea      	bmi.n	d496 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x2e>
    d4c0:	2700      	movs	r7, #0
    d4c2:	f04f 0a00 	mov.w	sl, #0
    d4c6:	e044      	b.n	d552 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xea>
    d4c8:	2100      	movs	r1, #0
    d4ca:	e03e      	b.n	d54a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
    d4cc:	e9cd 9601 	strd	r9, r6, [sp, #4]
    d4d0:	ebac 0607 	sub.w	r6, ip, r7
    d4d4:	2100      	movs	r1, #0
    d4d6:	4653      	mov	r3, sl
    d4d8:	781d      	ldrb	r5, [r3, #0]
    d4da:	785a      	ldrb	r2, [r3, #1]
    d4dc:	7898      	ldrb	r0, [r3, #2]
    d4de:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
    d4e2:	f893 9003 	ldrb.w	r9, [r3, #3]
    d4e6:	2d80      	cmp	r5, #128	; 0x80
    d4e8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    d4ec:	bf08      	it	eq
    d4ee:	3101      	addeq	r1, #1
    d4f0:	2a80      	cmp	r2, #128	; 0x80
    d4f2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    d4f6:	bf08      	it	eq
    d4f8:	3101      	addeq	r1, #1
    d4fa:	2880      	cmp	r0, #128	; 0x80
    d4fc:	f009 00c0 	and.w	r0, r9, #192	; 0xc0
    d500:	bf08      	it	eq
    d502:	3101      	addeq	r1, #1
    d504:	2880      	cmp	r0, #128	; 0x80
    d506:	bf08      	it	eq
    d508:	3101      	addeq	r1, #1
    d50a:	3304      	adds	r3, #4
    d50c:	3604      	adds	r6, #4
    d50e:	d1e3      	bne.n	d4d8 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x70>
    d510:	e9dd 9601 	ldrd	r9, r6, [sp, #4]
    d514:	f1bc 0f00 	cmp.w	ip, #0
    d518:	d017      	beq.n	d54a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
    d51a:	7818      	ldrb	r0, [r3, #0]
    d51c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    d520:	2880      	cmp	r0, #128	; 0x80
    d522:	bf08      	it	eq
    d524:	3101      	addeq	r1, #1
    d526:	f1bc 0f01 	cmp.w	ip, #1
    d52a:	d00e      	beq.n	d54a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
    d52c:	7858      	ldrb	r0, [r3, #1]
    d52e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    d532:	2880      	cmp	r0, #128	; 0x80
    d534:	bf08      	it	eq
    d536:	3101      	addeq	r1, #1
    d538:	f1bc 0f02 	cmp.w	ip, #2
    d53c:	d005      	beq.n	d54a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
    d53e:	7898      	ldrb	r0, [r3, #2]
    d540:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    d544:	2880      	cmp	r0, #128	; 0x80
    d546:	bf08      	it	eq
    d548:	3101      	addeq	r1, #1
    d54a:	eb0b 0007 	add.w	r0, fp, r7
    d54e:	eba0 0b01 	sub.w	fp, r0, r1
    d552:	68a0      	ldr	r0, [r4, #8]
    d554:	2801      	cmp	r0, #1
    d556:	d115      	bne.n	d584 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x11c>
    d558:	68e5      	ldr	r5, [r4, #12]
    d55a:	455d      	cmp	r5, fp
    d55c:	d912      	bls.n	d584 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x11c>
    d55e:	ea5f 700e 	movs.w	r0, lr, lsl #28
    d562:	9602      	str	r6, [sp, #8]
    d564:	d423      	bmi.n	d5ae <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x146>
    d566:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    d56a:	eba5 000b 	sub.w	r0, r5, fp
    d56e:	2903      	cmp	r1, #3
    d570:	bf08      	it	eq
    d572:	2101      	moveq	r1, #1
    d574:	078a      	lsls	r2, r1, #30
    d576:	d036      	beq.n	d5e6 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x17e>
    d578:	2902      	cmp	r1, #2
    d57a:	d036      	beq.n	d5ea <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x182>
    d57c:	2100      	movs	r1, #0
    d57e:	4605      	mov	r5, r0
    d580:	9101      	str	r1, [sp, #4]
    d582:	e036      	b.n	d5f2 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x18a>
    d584:	4620      	mov	r0, r4
    d586:	4641      	mov	r1, r8
    d588:	4652      	mov	r2, sl
    d58a:	463b      	mov	r3, r7
    d58c:	f000 f890 	bl	d6b0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>
    d590:	b120      	cbz	r0, d59c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x134>
    d592:	2601      	movs	r6, #1
    d594:	4630      	mov	r0, r6
    d596:	b003      	add	sp, #12
    d598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d59c:	69e1      	ldr	r1, [r4, #28]
    d59e:	464a      	mov	r2, r9
    d5a0:	69a0      	ldr	r0, [r4, #24]
    d5a2:	68cb      	ldr	r3, [r1, #12]
    d5a4:	4631      	mov	r1, r6
    d5a6:	b003      	add	sp, #12
    d5a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d5ac:	4718      	bx	r3
    d5ae:	2601      	movs	r6, #1
    d5b0:	2030      	movs	r0, #48	; 0x30
    d5b2:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    d5b6:	4641      	mov	r1, r8
    d5b8:	6060      	str	r0, [r4, #4]
    d5ba:	4620      	mov	r0, r4
    d5bc:	4652      	mov	r2, sl
    d5be:	463b      	mov	r3, r7
    d5c0:	f000 f876 	bl	d6b0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>
    d5c4:	2800      	cmp	r0, #0
    d5c6:	d1e5      	bne.n	d594 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12c>
    d5c8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    d5cc:	eba5 000b 	sub.w	r0, r5, fp
    d5d0:	2903      	cmp	r1, #3
    d5d2:	bf08      	it	eq
    d5d4:	2101      	moveq	r1, #1
    d5d6:	078a      	lsls	r2, r1, #30
    d5d8:	d03a      	beq.n	d650 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1e8>
    d5da:	2902      	cmp	r1, #2
    d5dc:	d03b      	beq.n	d656 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1ee>
    d5de:	f04f 0800 	mov.w	r8, #0
    d5e2:	4605      	mov	r5, r0
    d5e4:	e03b      	b.n	d65e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1f6>
    d5e6:	2500      	movs	r5, #0
    d5e8:	e002      	b.n	d5f0 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x188>
    d5ea:	0845      	lsrs	r5, r0, #1
    d5ec:	3001      	adds	r0, #1
    d5ee:	0840      	lsrs	r0, r0, #1
    d5f0:	9001      	str	r0, [sp, #4]
    d5f2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    d5f6:	3601      	adds	r6, #1
    d5f8:	42ae      	cmp	r6, r5
    d5fa:	d207      	bcs.n	d60c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1a4>
    d5fc:	6861      	ldr	r1, [r4, #4]
    d5fe:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
    d602:	6912      	ldr	r2, [r2, #16]
    d604:	4790      	blx	r2
    d606:	2800      	cmp	r0, #0
    d608:	d0f5      	beq.n	d5f6 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x18e>
    d60a:	e7c2      	b.n	d592 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
    d60c:	4620      	mov	r0, r4
    d60e:	4641      	mov	r1, r8
    d610:	4652      	mov	r2, sl
    d612:	463b      	mov	r3, r7
    d614:	f8d4 b004 	ldr.w	fp, [r4, #4]
    d618:	f000 f84a 	bl	d6b0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>
    d61c:	2800      	cmp	r0, #0
    d61e:	d1b8      	bne.n	d592 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
    d620:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
    d624:	464a      	mov	r2, r9
    d626:	68cb      	ldr	r3, [r1, #12]
    d628:	9902      	ldr	r1, [sp, #8]
    d62a:	4798      	blx	r3
    d62c:	2800      	cmp	r0, #0
    d62e:	d1b0      	bne.n	d592 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
    d630:	e9d4 8406 	ldrd	r8, r4, [r4, #24]
    d634:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    d638:	9d01      	ldr	r5, [sp, #4]
    d63a:	2601      	movs	r6, #1
    d63c:	3701      	adds	r7, #1
    d63e:	42af      	cmp	r7, r5
    d640:	d234      	bcs.n	d6ac <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x244>
    d642:	6922      	ldr	r2, [r4, #16]
    d644:	4640      	mov	r0, r8
    d646:	4659      	mov	r1, fp
    d648:	4790      	blx	r2
    d64a:	2800      	cmp	r0, #0
    d64c:	d0f6      	beq.n	d63c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1d4>
    d64e:	e7a1      	b.n	d594 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12c>
    d650:	2500      	movs	r5, #0
    d652:	4680      	mov	r8, r0
    d654:	e003      	b.n	d65e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1f6>
    d656:	0845      	lsrs	r5, r0, #1
    d658:	3001      	adds	r0, #1
    d65a:	ea4f 0850 	mov.w	r8, r0, lsr #1
    d65e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    d662:	3601      	adds	r6, #1
    d664:	42ae      	cmp	r6, r5
    d666:	d207      	bcs.n	d678 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x210>
    d668:	6861      	ldr	r1, [r4, #4]
    d66a:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
    d66e:	6912      	ldr	r2, [r2, #16]
    d670:	4790      	blx	r2
    d672:	2800      	cmp	r0, #0
    d674:	d0f5      	beq.n	d662 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1fa>
    d676:	e78c      	b.n	d592 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
    d678:	f8d4 a004 	ldr.w	sl, [r4, #4]
    d67c:	464a      	mov	r2, r9
    d67e:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
    d682:	68cb      	ldr	r3, [r1, #12]
    d684:	9902      	ldr	r1, [sp, #8]
    d686:	4798      	blx	r3
    d688:	2800      	cmp	r0, #0
    d68a:	f47f af82 	bne.w	d592 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
    d68e:	e9d4 7406 	ldrd	r7, r4, [r4, #24]
    d692:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    d696:	2601      	movs	r6, #1
    d698:	3501      	adds	r5, #1
    d69a:	4545      	cmp	r5, r8
    d69c:	d206      	bcs.n	d6ac <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x244>
    d69e:	6922      	ldr	r2, [r4, #16]
    d6a0:	4638      	mov	r0, r7
    d6a2:	4651      	mov	r1, sl
    d6a4:	4790      	blx	r2
    d6a6:	2800      	cmp	r0, #0
    d6a8:	d0f6      	beq.n	d698 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x230>
    d6aa:	e773      	b.n	d594 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12c>
    d6ac:	2600      	movs	r6, #0
    d6ae:	e771      	b.n	d594 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12c>

0000d6b0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>:
    d6b0:	b570      	push	{r4, r5, r6, lr}
    d6b2:	461c      	mov	r4, r3
    d6b4:	4615      	mov	r5, r2
    d6b6:	4606      	mov	r6, r0
    d6b8:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
    d6bc:	d006      	beq.n	d6cc <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x1c>
    d6be:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
    d6c2:	6912      	ldr	r2, [r2, #16]
    d6c4:	4790      	blx	r2
    d6c6:	b108      	cbz	r0, d6cc <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x1c>
    d6c8:	2001      	movs	r0, #1
    d6ca:	bd70      	pop	{r4, r5, r6, pc}
    d6cc:	b13d      	cbz	r5, d6de <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x2e>
    d6ce:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
    d6d2:	4622      	mov	r2, r4
    d6d4:	68cb      	ldr	r3, [r1, #12]
    d6d6:	4629      	mov	r1, r5
    d6d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d6dc:	4718      	bx	r3
    d6de:	2000      	movs	r0, #0
    d6e0:	bd70      	pop	{r4, r5, r6, pc}

0000d6e2 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE>:
    d6e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6e6:	b081      	sub	sp, #4
    d6e8:	f8d0 e008 	ldr.w	lr, [r0, #8]
    d6ec:	4682      	mov	sl, r0
    d6ee:	6900      	ldr	r0, [r0, #16]
    d6f0:	4691      	mov	r9, r2
    d6f2:	4688      	mov	r8, r1
    d6f4:	f1be 0f01 	cmp.w	lr, #1
    d6f8:	d10f      	bne.n	d71a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x38>
    d6fa:	b988      	cbnz	r0, d720 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x3e>
    d6fc:	f1b9 0f00 	cmp.w	r9, #0
    d700:	f000 80a9 	beq.w	d856 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x174>
    d704:	f1a9 0101 	sub.w	r1, r9, #1
    d708:	f009 0003 	and.w	r0, r9, #3
    d70c:	2903      	cmp	r1, #3
    d70e:	d25f      	bcs.n	d7d0 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xee>
    d710:	2100      	movs	r1, #0
    d712:	4642      	mov	r2, r8
    d714:	2800      	cmp	r0, #0
    d716:	d17b      	bne.n	d810 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x12e>
    d718:	e09e      	b.n	d858 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x176>
    d71a:	2800      	cmp	r0, #0
    d71c:	f000 80b1 	beq.w	d882 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1a0>
    d720:	f1b9 0f00 	cmp.w	r9, #0
    d724:	d04d      	beq.n	d7c2 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xe0>
    d726:	f8da 0014 	ldr.w	r0, [sl, #20]
    d72a:	eb08 0109 	add.w	r1, r8, r9
    d72e:	2200      	movs	r2, #0
    d730:	4644      	mov	r4, r8
    d732:	4647      	mov	r7, r8
    d734:	43c3      	mvns	r3, r0
    d736:	4626      	mov	r6, r4
    d738:	f916 5b01 	ldrsb.w	r5, [r6], #1
    d73c:	2d00      	cmp	r5, #0
    d73e:	b2e8      	uxtb	r0, r5
    d740:	da28      	bge.n	d794 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xb2>
    d742:	428e      	cmp	r6, r1
    d744:	d005      	beq.n	d752 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x70>
    d746:	7865      	ldrb	r5, [r4, #1]
    d748:	1ca6      	adds	r6, r4, #2
    d74a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
    d74e:	4634      	mov	r4, r6
    d750:	e001      	b.n	d756 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x74>
    d752:	2500      	movs	r5, #0
    d754:	460c      	mov	r4, r1
    d756:	f000 0b1f 	and.w	fp, r0, #31
    d75a:	28e0      	cmp	r0, #224	; 0xe0
    d75c:	d307      	bcc.n	d76e <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x8c>
    d75e:	428c      	cmp	r4, r1
    d760:	d008      	beq.n	d774 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x92>
    d762:	f814 6b01 	ldrb.w	r6, [r4], #1
    d766:	f006 0c3f 	and.w	ip, r6, #63	; 0x3f
    d76a:	4626      	mov	r6, r4
    d76c:	e005      	b.n	d77a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x98>
    d76e:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
    d772:	e00f      	b.n	d794 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xb2>
    d774:	f04f 0c00 	mov.w	ip, #0
    d778:	460c      	mov	r4, r1
    d77a:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
    d77e:	28f0      	cmp	r0, #240	; 0xf0
    d780:	d306      	bcc.n	d790 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xae>
    d782:	428c      	cmp	r4, r1
    d784:	d010      	beq.n	d7a8 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xc6>
    d786:	f814 0b01 	ldrb.w	r0, [r4], #1
    d78a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d78e:	e00d      	b.n	d7ac <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xca>
    d790:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
    d794:	4634      	mov	r4, r6
    d796:	3301      	adds	r3, #1
    d798:	d051      	beq.n	d83e <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x15c>
    d79a:	1bd0      	subs	r0, r2, r7
    d79c:	42a1      	cmp	r1, r4
    d79e:	eb00 0204 	add.w	r2, r0, r4
    d7a2:	4627      	mov	r7, r4
    d7a4:	d1c7      	bne.n	d736 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x54>
    d7a6:	e04d      	b.n	d844 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x162>
    d7a8:	2000      	movs	r0, #0
    d7aa:	4634      	mov	r4, r6
    d7ac:	f44f 16e0 	mov.w	r6, #1835008	; 0x1c0000
    d7b0:	ea06 468b 	and.w	r6, r6, fp, lsl #18
    d7b4:	ea46 1685 	orr.w	r6, r6, r5, lsl #6
    d7b8:	4430      	add	r0, r6
    d7ba:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
    d7be:	d1ea      	bne.n	d796 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xb4>
    d7c0:	e040      	b.n	d844 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x162>
    d7c2:	2200      	movs	r2, #0
    d7c4:	f1be 0f00 	cmp.w	lr, #0
    d7c8:	d140      	bne.n	d84c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x16a>
    d7ca:	e9da 0106 	ldrd	r0, r1, [sl, #24]
    d7ce:	e05d      	b.n	d88c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1aa>
    d7d0:	eba0 0309 	sub.w	r3, r0, r9
    d7d4:	2100      	movs	r1, #0
    d7d6:	4642      	mov	r2, r8
    d7d8:	7817      	ldrb	r7, [r2, #0]
    d7da:	7856      	ldrb	r6, [r2, #1]
    d7dc:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    d7e0:	7895      	ldrb	r5, [r2, #2]
    d7e2:	78d4      	ldrb	r4, [r2, #3]
    d7e4:	2f80      	cmp	r7, #128	; 0x80
    d7e6:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
    d7ea:	bf08      	it	eq
    d7ec:	3101      	addeq	r1, #1
    d7ee:	2f80      	cmp	r7, #128	; 0x80
    d7f0:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
    d7f4:	bf08      	it	eq
    d7f6:	3101      	addeq	r1, #1
    d7f8:	2f80      	cmp	r7, #128	; 0x80
    d7fa:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
    d7fe:	bf08      	it	eq
    d800:	3101      	addeq	r1, #1
    d802:	2f80      	cmp	r7, #128	; 0x80
    d804:	bf08      	it	eq
    d806:	3101      	addeq	r1, #1
    d808:	3204      	adds	r2, #4
    d80a:	3304      	adds	r3, #4
    d80c:	d1e4      	bne.n	d7d8 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xf6>
    d80e:	b318      	cbz	r0, d858 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x176>
    d810:	7813      	ldrb	r3, [r2, #0]
    d812:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d816:	2b80      	cmp	r3, #128	; 0x80
    d818:	bf08      	it	eq
    d81a:	3101      	addeq	r1, #1
    d81c:	2801      	cmp	r0, #1
    d81e:	d01b      	beq.n	d858 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x176>
    d820:	7853      	ldrb	r3, [r2, #1]
    d822:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d826:	2b80      	cmp	r3, #128	; 0x80
    d828:	bf08      	it	eq
    d82a:	3101      	addeq	r1, #1
    d82c:	2802      	cmp	r0, #2
    d82e:	d013      	beq.n	d858 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x176>
    d830:	7890      	ldrb	r0, [r2, #2]
    d832:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
    d836:	2880      	cmp	r0, #128	; 0x80
    d838:	bf08      	it	eq
    d83a:	3101      	addeq	r1, #1
    d83c:	e00c      	b.n	d858 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x176>
    d83e:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
    d842:	d175      	bne.n	d930 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x24e>
    d844:	464a      	mov	r2, r9
    d846:	f1be 0f00 	cmp.w	lr, #0
    d84a:	d0be      	beq.n	d7ca <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xe8>
    d84c:	4691      	mov	r9, r2
    d84e:	f1b9 0f00 	cmp.w	r9, #0
    d852:	f47f af57 	bne.w	d704 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x22>
    d856:	2100      	movs	r1, #0
    d858:	f8da 000c 	ldr.w	r0, [sl, #12]
    d85c:	eba9 0101 	sub.w	r1, r9, r1
    d860:	4281      	cmp	r1, r0
    d862:	d20e      	bcs.n	d882 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1a0>
    d864:	f1b9 0f00 	cmp.w	r9, #0
    d868:	d016      	beq.n	d898 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1b6>
    d86a:	f1a9 0101 	sub.w	r1, r9, #1
    d86e:	f009 0c03 	and.w	ip, r9, #3
    d872:	2903      	cmp	r1, #3
    d874:	d212      	bcs.n	d89c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1ba>
    d876:	2100      	movs	r1, #0
    d878:	4643      	mov	r3, r8
    d87a:	f1bc 0f00 	cmp.w	ip, #0
    d87e:	d12f      	bne.n	d8e0 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1fe>
    d880:	e046      	b.n	d910 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x22e>
    d882:	f8da 101c 	ldr.w	r1, [sl, #28]
    d886:	464a      	mov	r2, r9
    d888:	f8da 0018 	ldr.w	r0, [sl, #24]
    d88c:	68cb      	ldr	r3, [r1, #12]
    d88e:	4641      	mov	r1, r8
    d890:	b001      	add	sp, #4
    d892:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d896:	4718      	bx	r3
    d898:	2100      	movs	r1, #0
    d89a:	e039      	b.n	d910 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x22e>
    d89c:	ebac 0709 	sub.w	r7, ip, r9
    d8a0:	2100      	movs	r1, #0
    d8a2:	4643      	mov	r3, r8
    d8a4:	781e      	ldrb	r6, [r3, #0]
    d8a6:	785d      	ldrb	r5, [r3, #1]
    d8a8:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
    d8ac:	789c      	ldrb	r4, [r3, #2]
    d8ae:	78da      	ldrb	r2, [r3, #3]
    d8b0:	2e80      	cmp	r6, #128	; 0x80
    d8b2:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
    d8b6:	bf08      	it	eq
    d8b8:	3101      	addeq	r1, #1
    d8ba:	2e80      	cmp	r6, #128	; 0x80
    d8bc:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
    d8c0:	bf08      	it	eq
    d8c2:	3101      	addeq	r1, #1
    d8c4:	2e80      	cmp	r6, #128	; 0x80
    d8c6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    d8ca:	bf08      	it	eq
    d8cc:	3101      	addeq	r1, #1
    d8ce:	2a80      	cmp	r2, #128	; 0x80
    d8d0:	bf08      	it	eq
    d8d2:	3101      	addeq	r1, #1
    d8d4:	3304      	adds	r3, #4
    d8d6:	3704      	adds	r7, #4
    d8d8:	d1e4      	bne.n	d8a4 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1c2>
    d8da:	f1bc 0f00 	cmp.w	ip, #0
    d8de:	d017      	beq.n	d910 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x22e>
    d8e0:	781a      	ldrb	r2, [r3, #0]
    d8e2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    d8e6:	2a80      	cmp	r2, #128	; 0x80
    d8e8:	bf08      	it	eq
    d8ea:	3101      	addeq	r1, #1
    d8ec:	f1bc 0f01 	cmp.w	ip, #1
    d8f0:	d00e      	beq.n	d910 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x22e>
    d8f2:	785a      	ldrb	r2, [r3, #1]
    d8f4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    d8f8:	2a80      	cmp	r2, #128	; 0x80
    d8fa:	bf08      	it	eq
    d8fc:	3101      	addeq	r1, #1
    d8fe:	f1bc 0f02 	cmp.w	ip, #2
    d902:	d005      	beq.n	d910 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x22e>
    d904:	789a      	ldrb	r2, [r3, #2]
    d906:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    d90a:	2a80      	cmp	r2, #128	; 0x80
    d90c:	bf08      	it	eq
    d90e:	3101      	addeq	r1, #1
    d910:	f89a 3030 	ldrb.w	r3, [sl, #48]	; 0x30
    d914:	eba1 0109 	sub.w	r1, r1, r9
    d918:	4408      	add	r0, r1
    d91a:	1eda      	subs	r2, r3, #3
    d91c:	bf18      	it	ne
    d91e:	461a      	movne	r2, r3
    d920:	0793      	lsls	r3, r2, #30
    d922:	d00b      	beq.n	d93c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x25a>
    d924:	2a02      	cmp	r2, #2
    d926:	d00c      	beq.n	d942 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x260>
    d928:	f04f 0b00 	mov.w	fp, #0
    d92c:	4604      	mov	r4, r0
    d92e:	e00c      	b.n	d94a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x268>
    d930:	2a00      	cmp	r2, #0
    d932:	bf18      	it	ne
    d934:	454a      	cmpne	r2, r9
    d936:	d134      	bne.n	d9a2 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x2c0>
    d938:	4640      	mov	r0, r8
    d93a:	e03b      	b.n	d9b4 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x2d2>
    d93c:	2400      	movs	r4, #0
    d93e:	4683      	mov	fp, r0
    d940:	e003      	b.n	d94a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x268>
    d942:	0844      	lsrs	r4, r0, #1
    d944:	3001      	adds	r0, #1
    d946:	ea4f 0b50 	mov.w	fp, r0, lsr #1
    d94a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    d94e:	3501      	adds	r5, #1
    d950:	42a5      	cmp	r5, r4
    d952:	d208      	bcs.n	d966 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x284>
    d954:	f8da 1004 	ldr.w	r1, [sl, #4]
    d958:	e9da 0206 	ldrd	r0, r2, [sl, #24]
    d95c:	6912      	ldr	r2, [r2, #16]
    d95e:	4790      	blx	r2
    d960:	2800      	cmp	r0, #0
    d962:	d0f4      	beq.n	d94e <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x26c>
    d964:	e015      	b.n	d992 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x2b0>
    d966:	f8da 7004 	ldr.w	r7, [sl, #4]
    d96a:	464a      	mov	r2, r9
    d96c:	e9da 0106 	ldrd	r0, r1, [sl, #24]
    d970:	68cb      	ldr	r3, [r1, #12]
    d972:	4641      	mov	r1, r8
    d974:	4798      	blx	r3
    d976:	b960      	cbnz	r0, d992 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x2b0>
    d978:	e9da 4506 	ldrd	r4, r5, [sl, #24]
    d97c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    d980:	3601      	adds	r6, #1
    d982:	455e      	cmp	r6, fp
    d984:	d209      	bcs.n	d99a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x2b8>
    d986:	692a      	ldr	r2, [r5, #16]
    d988:	4620      	mov	r0, r4
    d98a:	4639      	mov	r1, r7
    d98c:	4790      	blx	r2
    d98e:	2800      	cmp	r0, #0
    d990:	d0f6      	beq.n	d980 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x29e>
    d992:	2001      	movs	r0, #1
    d994:	b001      	add	sp, #4
    d996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d99a:	2000      	movs	r0, #0
    d99c:	b001      	add	sp, #4
    d99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9a2:	454a      	cmp	r2, r9
    d9a4:	d204      	bcs.n	d9b0 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x2ce>
    d9a6:	f918 0002 	ldrsb.w	r0, [r8, r2]
    d9aa:	f110 0f40 	cmn.w	r0, #64	; 0x40
    d9ae:	dac3      	bge.n	d938 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x256>
    d9b0:	2200      	movs	r2, #0
    d9b2:	2000      	movs	r0, #0
    d9b4:	2800      	cmp	r0, #0
    d9b6:	bf0c      	ite	eq
    d9b8:	464a      	moveq	r2, r9
    d9ba:	4680      	movne	r8, r0
    d9bc:	f1be 0f00 	cmp.w	lr, #0
    d9c0:	f47f af44 	bne.w	d84c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x16a>
    d9c4:	e701      	b.n	d7ca <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xe8>

0000d9c6 <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>:
    d9c6:	7800      	ldrb	r0, [r0, #0]
    d9c8:	f3c0 1000 	ubfx	r0, r0, #4, #1
    d9cc:	4770      	bx	lr

0000d9ce <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>:
    d9ce:	7800      	ldrb	r0, [r0, #0]
    d9d0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    d9d4:	4770      	bx	lr

0000d9d6 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>:
    d9d6:	b570      	push	{r4, r5, r6, lr}
    d9d8:	460d      	mov	r5, r1
    d9da:	4606      	mov	r6, r0
    d9dc:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
    d9e0:	461c      	mov	r4, r3
    d9e2:	68cb      	ldr	r3, [r1, #12]
    d9e4:	4611      	mov	r1, r2
    d9e6:	4622      	mov	r2, r4
    d9e8:	4798      	blx	r3
    d9ea:	7230      	strb	r0, [r6, #8]
    d9ec:	fab4 f084 	clz	r0, r4
    d9f0:	0940      	lsrs	r0, r0, #5
    d9f2:	7270      	strb	r0, [r6, #9]
    d9f4:	2000      	movs	r0, #0
    d9f6:	e9c6 5000 	strd	r5, r0, [r6]
    d9fa:	bd70      	pop	{r4, r5, r6, pc}

0000d9fc <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h3a34938e29ce59dcE>:
    d9fc:	460b      	mov	r3, r1
    d9fe:	4601      	mov	r1, r0
    da00:	4610      	mov	r0, r2
    da02:	461a      	mov	r2, r3
    da04:	f7ff be6d 	b.w	d6e2 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE>

0000da08 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE>:
    da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da0c:	b085      	sub	sp, #20
    da0e:	460c      	mov	r4, r1
    da10:	4605      	mov	r5, r0
    da12:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
    da16:	690a      	ldr	r2, [r1, #16]
    da18:	2127      	movs	r1, #39	; 0x27
    da1a:	4790      	blx	r2
    da1c:	b118      	cbz	r0, da26 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1e>
    da1e:	2001      	movs	r0, #1
    da20:	b005      	add	sp, #20
    da22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da26:	682d      	ldr	r5, [r5, #0]
    da28:	f1a5 0009 	sub.w	r0, r5, #9
    da2c:	281e      	cmp	r0, #30
    da2e:	d816      	bhi.n	da5e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x56>
    da30:	2702      	movs	r7, #2
    da32:	2674      	movs	r6, #116	; 0x74
    da34:	e8df f000 	tbb	[pc, r0]
    da38:	17171086 	.word	0x17171086
    da3c:	1717173a 	.word	0x1717173a
    da40:	17171717 	.word	0x17171717
    da44:	17171717 	.word	0x17171717
    da48:	17171717 	.word	0x17171717
    da4c:	17171717 	.word	0x17171717
    da50:	17171517 	.word	0x17171517
    da54:	00151717 	.word	0x00151717
    da58:	2702      	movs	r7, #2
    da5a:	266e      	movs	r6, #110	; 0x6e
    da5c:	e028      	b.n	dab0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xa8>
    da5e:	2d5c      	cmp	r5, #92	; 0x5c
    da60:	d101      	bne.n	da66 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x5e>
    da62:	2702      	movs	r7, #2
    da64:	e06d      	b.n	db42 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x13a>
    da66:	f64b 0090 	movw	r0, #47248	; 0xb890
    da6a:	4629      	mov	r1, r5
    da6c:	f2c0 0002 	movt	r0, #2
    da70:	f000 f8d3 	bl	dc1a <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E>
    da74:	2800      	cmp	r0, #0
    da76:	d159      	bne.n	db2c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x124>
    da78:	2000      	movs	r0, #0
    da7a:	ebb0 4f15 	cmp.w	r0, r5, lsr #16
    da7e:	d118      	bne.n	dab2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xaa>
    da80:	f64a 61ef 	movw	r1, #44783	; 0xaeef
    da84:	f240 122f 	movw	r2, #303	; 0x12f
    da88:	f2c0 0102 	movt	r1, #2
    da8c:	f64a 53c0 	movw	r3, #44480	; 0xadc0
    da90:	e9cd 2100 	strd	r2, r1, [sp]
    da94:	f64a 5170 	movw	r1, #44400	; 0xad70
    da98:	f44f 709e 	mov.w	r0, #316	; 0x13c
    da9c:	f2c0 0102 	movt	r1, #2
    daa0:	9002      	str	r0, [sp, #8]
    daa2:	f2c0 0302 	movt	r3, #2
    daa6:	4628      	mov	r0, r5
    daa8:	2228      	movs	r2, #40	; 0x28
    daaa:	e019      	b.n	dae0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xd8>
    daac:	2702      	movs	r7, #2
    daae:	2672      	movs	r6, #114	; 0x72
    dab0:	e048      	b.n	db44 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x13c>
    dab2:	ebb0 4f55 	cmp.w	r0, r5, lsr #17
    dab6:	d118      	bne.n	daea <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xe2>
    dab8:	f24b 110b 	movw	r1, #45323	; 0xb10b
    dabc:	229e      	movs	r2, #158	; 0x9e
    dabe:	f2c0 0102 	movt	r1, #2
    dac2:	f24b 036d 	movw	r3, #45165	; 0xb06d
    dac6:	e9cd 2100 	strd	r2, r1, [sp]
    daca:	f24b 012b 	movw	r1, #45099	; 0xb02b
    dace:	f240 107d 	movw	r0, #381	; 0x17d
    dad2:	f2c0 0102 	movt	r1, #2
    dad6:	9002      	str	r0, [sp, #8]
    dad8:	f2c0 0302 	movt	r3, #2
    dadc:	4628      	mov	r0, r5
    dade:	2221      	movs	r2, #33	; 0x21
    dae0:	f000 f919 	bl	dd16 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E>
    dae4:	b310      	cbz	r0, db2c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x124>
    dae6:	2701      	movs	r7, #1
    dae8:	e7bc      	b.n	da64 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x5c>
    daea:	f240 10ef 	movw	r0, #495	; 0x1ef
    daee:	f2c0 000e 	movt	r0, #14
    daf2:	4285      	cmp	r5, r0
    daf4:	d81a      	bhi.n	db2c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x124>
    daf6:	f240 50e2 	movw	r0, #1506	; 0x5e2
    dafa:	f240 61e2 	movw	r1, #1762	; 0x6e2
    dafe:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
    db02:	f2c0 010b 	movt	r1, #11
    db06:	4428      	add	r0, r5
    db08:	4288      	cmp	r0, r1
    db0a:	d30f      	bcc.n	db2c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x124>
    db0c:	f241 401f 	movw	r0, #5151	; 0x141f
    db10:	f640 411f 	movw	r1, #3103	; 0xc1f
    db14:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
    db18:	4428      	add	r0, r5
    db1a:	4288      	cmp	r0, r1
    db1c:	bf21      	itttt	cs
    db1e:	f243 105e 	movwcs	r0, #12638	; 0x315e
    db22:	f6cf 70fd 	movtcs	r0, #65533	; 0xfffd
    db26:	4428      	addcs	r0, r5
    db28:	280e      	cmpcs	r0, #14
    db2a:	d25d      	bcs.n	dbe8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1e0>
    db2c:	f045 0001 	orr.w	r0, r5, #1
    db30:	f04f 0905 	mov.w	r9, #5
    db34:	fab0 f080 	clz	r0, r0
    db38:	2703      	movs	r7, #3
    db3a:	2107      	movs	r1, #7
    db3c:	ea81 0090 	eor.w	r0, r1, r0, lsr #2
    db40:	9004      	str	r0, [sp, #16]
    db42:	462e      	mov	r6, r5
    db44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    db48:	f04f 0a1c 	mov.w	sl, #28
    db4c:	f04f 0802 	mov.w	r8, #2
    db50:	f04f 0b04 	mov.w	fp, #4
    db54:	2f01      	cmp	r7, #1
    db56:	d010      	beq.n	db7a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x172>
    db58:	2f02      	cmp	r7, #2
    db5a:	d011      	beq.n	db80 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x178>
    db5c:	2f03      	cmp	r7, #3
    db5e:	d13b      	bne.n	dbd8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1d0>
    db60:	fa55 f089 	uxtab	r0, r5, r9
    db64:	2804      	cmp	r0, #4
    db66:	d837      	bhi.n	dbd8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1d0>
    db68:	e8df f000 	tbb	[pc, r0]
    db6c:	221e0d03 	.word	0x221e0d03
    db70:	0027      	.short	0x0027
    db72:	f029 09ff 	bic.w	r9, r9, #255	; 0xff
    db76:	217d      	movs	r1, #125	; 0x7d
    db78:	e026      	b.n	dbc8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1c0>
    db7a:	2700      	movs	r7, #0
    db7c:	4631      	mov	r1, r6
    db7e:	e024      	b.n	dbca <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1c2>
    db80:	215c      	movs	r1, #92	; 0x5c
    db82:	2701      	movs	r7, #1
    db84:	e021      	b.n	dbca <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1c2>
    db86:	9a04      	ldr	r2, [sp, #16]
    db88:	ea0a 0082 	and.w	r0, sl, r2, lsl #2
    db8c:	fa26 f000 	lsr.w	r0, r6, r0
    db90:	f000 000f 	and.w	r0, r0, #15
    db94:	f100 0157 	add.w	r1, r0, #87	; 0x57
    db98:	280a      	cmp	r0, #10
    db9a:	bf38      	it	cc
    db9c:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
    dba0:	b17a      	cbz	r2, dbc2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1ba>
    dba2:	3a01      	subs	r2, #1
    dba4:	9204      	str	r2, [sp, #16]
    dba6:	e00f      	b.n	dbc8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1c0>
    dba8:	f368 0907 	bfi	r9, r8, #0, #8
    dbac:	217b      	movs	r1, #123	; 0x7b
    dbae:	e00b      	b.n	dbc8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1c0>
    dbb0:	2703      	movs	r7, #3
    dbb2:	2175      	movs	r1, #117	; 0x75
    dbb4:	f367 0907 	bfi	r9, r7, #0, #8
    dbb8:	e007      	b.n	dbca <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1c2>
    dbba:	f36b 0907 	bfi	r9, fp, #0, #8
    dbbe:	215c      	movs	r1, #92	; 0x5c
    dbc0:	e002      	b.n	dbc8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1c0>
    dbc2:	2001      	movs	r0, #1
    dbc4:	f360 0907 	bfi	r9, r0, #0, #8
    dbc8:	2703      	movs	r7, #3
    dbca:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
    dbce:	6912      	ldr	r2, [r2, #16]
    dbd0:	4790      	blx	r2
    dbd2:	2800      	cmp	r0, #0
    dbd4:	d0be      	beq.n	db54 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x14c>
    dbd6:	e722      	b.n	da1e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x16>
    dbd8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
    dbdc:	690a      	ldr	r2, [r1, #16]
    dbde:	2127      	movs	r1, #39	; 0x27
    dbe0:	b005      	add	sp, #20
    dbe2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dbe6:	4710      	bx	r2
    dbe8:	f64b 011e 	movw	r1, #47134	; 0xb81e
    dbec:	f025 0001 	bic.w	r0, r5, #1
    dbf0:	f2c0 0102 	movt	r1, #2
    dbf4:	4288      	cmp	r0, r1
    dbf6:	f43f af99 	beq.w	db2c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x124>
    dbfa:	f645 1029 	movw	r0, #22825	; 0x5929
    dbfe:	f6cf 70fd 	movt	r0, #65533	; 0xfffd
    dc02:	4428      	add	r0, r5
    dc04:	2829      	cmp	r0, #41	; 0x29
    dc06:	bf21      	itttt	cs
    dc08:	f644 00cb 	movwcs	r0, #18635	; 0x48cb
    dc0c:	f6cf 70fd 	movtcs	r0, #65533	; 0xfffd
    dc10:	4428      	addcs	r0, r5
    dc12:	280a      	cmpcs	r0, #10
    dc14:	f63f af67 	bhi.w	dae6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xde>
    dc18:	e788      	b.n	db2c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x124>

0000dc1a <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E>:
    dc1a:	b580      	push	{r7, lr}
    dc1c:	2200      	movs	r2, #0
    dc1e:	ebb2 2fd1 	cmp.w	r2, r1, lsr #11
    dc22:	d105      	bne.n	dc30 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0x16>
    dc24:	f06f 0207 	mvn.w	r2, #7
    dc28:	ea02 02d1 	and.w	r2, r2, r1, lsr #3
    dc2c:	4410      	add	r0, r2
    dc2e:	e030      	b.n	dc92 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0x78>
    dc30:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
    dc34:	d110      	bne.n	dc58 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0x3e>
    dc36:	f06f 021f 	mvn.w	r2, #31
    dc3a:	eb02 1391 	add.w	r3, r2, r1, lsr #6
    dc3e:	095a      	lsrs	r2, r3, #5
    dc40:	2a1e      	cmp	r2, #30
    dc42:	d842      	bhi.n	dcca <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xb0>
    dc44:	4403      	add	r3, r0
    dc46:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    dc4a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    dc4e:	429a      	cmp	r2, r3
    dc50:	d945      	bls.n	dcde <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xc4>
    dc52:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    dc56:	e01a      	b.n	dc8e <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0x74>
    dc58:	f06f 020f 	mvn.w	r2, #15
    dc5c:	eb02 3211 	add.w	r2, r2, r1, lsr #12
    dc60:	2aff      	cmp	r2, #255	; 0xff
    dc62:	d841      	bhi.n	dce8 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xce>
    dc64:	4402      	add	r2, r0
    dc66:	f892 c4f8 	ldrb.w	ip, [r2, #1272]	; 0x4f8
    dc6a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
    dc6e:	f3c1 1385 	ubfx	r3, r1, #6, #6
    dc72:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
    dc76:	4293      	cmp	r3, r2
    dc78:	d240      	bcs.n	dcfc <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xe2>
    dc7a:	f8d0 c108 	ldr.w	ip, [r0, #264]	; 0x108
    dc7e:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    dc82:	f81c 3003 	ldrb.w	r3, [ip, r3]
    dc86:	429a      	cmp	r2, r3
    dc88:	d93d      	bls.n	dd06 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xec>
    dc8a:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
    dc8e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    dc92:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    dc96:	f04f 0e01 	mov.w	lr, #1
    dc9a:	f1c1 0220 	rsb	r2, r1, #32
    dc9e:	e9d0 c300 	ldrd	ip, r3, [r0]
    dca2:	f1a1 0020 	sub.w	r0, r1, #32
    dca6:	fa0e f101 	lsl.w	r1, lr, r1
    dcaa:	fa2e f202 	lsr.w	r2, lr, r2
    dcae:	2800      	cmp	r0, #0
    dcb0:	bfa8      	it	ge
    dcb2:	fa0e f200 	lslge.w	r2, lr, r0
    dcb6:	bfa8      	it	ge
    dcb8:	2100      	movge	r1, #0
    dcba:	ea03 0002 	and.w	r0, r3, r2
    dcbe:	ea01 010c 	and.w	r1, r1, ip
    dcc2:	4308      	orrs	r0, r1
    dcc4:	bf18      	it	ne
    dcc6:	2001      	movne	r0, #1
    dcc8:	bd80      	pop	{r7, pc}
    dcca:	f64a 5020 	movw	r0, #44320	; 0xad20
    dcce:	4619      	mov	r1, r3
    dcd0:	f2c0 0002 	movt	r0, #2
    dcd4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
    dcd8:	f7fe fdd5 	bl	c886 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
    dcdc:	defe      	udf	#254	; 0xfe
    dcde:	f64a 5030 	movw	r0, #44336	; 0xad30
    dce2:	f2c0 0002 	movt	r0, #2
    dce6:	e012      	b.n	dd0e <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xf4>
    dce8:	f64a 5040 	movw	r0, #44352	; 0xad40
    dcec:	4611      	mov	r1, r2
    dcee:	f2c0 0002 	movt	r0, #2
    dcf2:	f44f 7280 	mov.w	r2, #256	; 0x100
    dcf6:	f7fe fdc6 	bl	c886 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
    dcfa:	defe      	udf	#254	; 0xfe
    dcfc:	f64a 5050 	movw	r0, #44368	; 0xad50
    dd00:	f2c0 0002 	movt	r0, #2
    dd04:	e003      	b.n	dd0e <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xf4>
    dd06:	f64a 5060 	movw	r0, #44384	; 0xad60
    dd0a:	f2c0 0002 	movt	r0, #2
    dd0e:	4619      	mov	r1, r3
    dd10:	f7fe fdb9 	bl	c886 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
    dd14:	defe      	udf	#254	; 0xfe

0000dd16 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E>:
    dd16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dd1a:	b081      	sub	sp, #4
    dd1c:	fa1f fa80 	uxth.w	sl, r0
    dd20:	b3a2      	cbz	r2, dd8c <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x76>
    dd22:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    dd26:	eb01 0842 	add.w	r8, r1, r2, lsl #1
    dd2a:	ea4f 291a 	mov.w	r9, sl, lsr #8
    dd2e:	f04f 0e00 	mov.w	lr, #0
    dd32:	784f      	ldrb	r7, [r1, #1]
    dd34:	4672      	mov	r2, lr
    dd36:	780c      	ldrb	r4, [r1, #0]
    dd38:	3102      	adds	r1, #2
    dd3a:	44be      	add	lr, r7
    dd3c:	454c      	cmp	r4, r9
    dd3e:	d122      	bne.n	dd86 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x70>
    dd40:	4596      	cmp	lr, r2
    dd42:	d352      	bcc.n	ddea <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xd4>
    dd44:	45e6      	cmp	lr, ip
    dd46:	d855      	bhi.n	ddf4 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xde>
    dd48:	189c      	adds	r4, r3, r2
    dd4a:	eb04 0b07 	add.w	fp, r4, r7
    dd4e:	b1df      	cbz	r7, dd88 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x72>
    dd50:	4625      	mov	r5, r4
    dd52:	b2c6      	uxtb	r6, r0
    dd54:	f815 2b01 	ldrb.w	r2, [r5], #1
    dd58:	42b2      	cmp	r2, r6
    dd5a:	d037      	beq.n	ddcc <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb6>
    dd5c:	455d      	cmp	r5, fp
    dd5e:	d013      	beq.n	dd88 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x72>
    dd60:	7862      	ldrb	r2, [r4, #1]
    dd62:	42b2      	cmp	r2, r6
    dd64:	d032      	beq.n	ddcc <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb6>
    dd66:	1ca2      	adds	r2, r4, #2
    dd68:	455a      	cmp	r2, fp
    dd6a:	d00d      	beq.n	dd88 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x72>
    dd6c:	78a2      	ldrb	r2, [r4, #2]
    dd6e:	42b2      	cmp	r2, r6
    dd70:	d02c      	beq.n	ddcc <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb6>
    dd72:	1ce2      	adds	r2, r4, #3
    dd74:	455a      	cmp	r2, fp
    dd76:	d007      	beq.n	dd88 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x72>
    dd78:	1d22      	adds	r2, r4, #4
    dd7a:	78e4      	ldrb	r4, [r4, #3]
    dd7c:	3f04      	subs	r7, #4
    dd7e:	42b4      	cmp	r4, r6
    dd80:	4614      	mov	r4, r2
    dd82:	d1e4      	bne.n	dd4e <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x38>
    dd84:	e022      	b.n	ddcc <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb6>
    dd86:	d801      	bhi.n	dd8c <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x76>
    dd88:	4541      	cmp	r1, r8
    dd8a:	d1d2      	bne.n	dd32 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x1c>
    dd8c:	980c      	ldr	r0, [sp, #48]	; 0x30
    dd8e:	b1f8      	cbz	r0, ddd0 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xba>
    dd90:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    dd92:	1831      	adds	r1, r6, r0
    dd94:	2001      	movs	r0, #1
    dd96:	4632      	mov	r2, r6
    dd98:	f812 3b01 	ldrb.w	r3, [r2], #1
    dd9c:	b25f      	sxtb	r7, r3
    dd9e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    dda2:	dd01      	ble.n	dda8 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x92>
    dda4:	4616      	mov	r6, r2
    dda6:	e007      	b.n	ddb8 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xa2>
    dda8:	428a      	cmp	r2, r1
    ddaa:	d017      	beq.n	dddc <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xc6>
    ddac:	7872      	ldrb	r2, [r6, #1]
    ddae:	f007 037f 	and.w	r3, r7, #127	; 0x7f
    ddb2:	3602      	adds	r6, #2
    ddb4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ddb8:	ebaa 0a03 	sub.w	sl, sl, r3
    ddbc:	f1ba 0f00 	cmp.w	sl, #0
    ddc0:	db07      	blt.n	ddd2 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xbc>
    ddc2:	f080 0001 	eor.w	r0, r0, #1
    ddc6:	428e      	cmp	r6, r1
    ddc8:	d1e5      	bne.n	dd96 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x80>
    ddca:	e002      	b.n	ddd2 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xbc>
    ddcc:	2000      	movs	r0, #0
    ddce:	e000      	b.n	ddd2 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xbc>
    ddd0:	2001      	movs	r0, #1
    ddd2:	f000 0001 	and.w	r0, r0, #1
    ddd6:	b001      	add	sp, #4
    ddd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dddc:	f64a 1030 	movw	r0, #43312	; 0xa930
    dde0:	f2c0 0002 	movt	r0, #2
    dde4:	f7fe fd32 	bl	c84c <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
    dde8:	defe      	udf	#254	; 0xfe
    ddea:	4610      	mov	r0, r2
    ddec:	4671      	mov	r1, lr
    ddee:	f7fe feb9 	bl	cb64 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
    ddf2:	defe      	udf	#254	; 0xfe
    ddf4:	4670      	mov	r0, lr
    ddf6:	4661      	mov	r1, ip
    ddf8:	f7fe fe92 	bl	cb20 <_ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E>
    ddfc:	defe      	udf	#254	; 0xfe

0000ddfe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E>:
    ddfe:	b5b0      	push	{r4, r5, r7, lr}
    de00:	b0a2      	sub	sp, #136	; 0x88
    de02:	468c      	mov	ip, r1
    de04:	6809      	ldr	r1, [r1, #0]
    de06:	06ca      	lsls	r2, r1, #27
    de08:	d409      	bmi.n	de1e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x20>
    de0a:	6800      	ldr	r0, [r0, #0]
    de0c:	0689      	lsls	r1, r1, #26
    de0e:	d448      	bmi.n	dea2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0xa4>
    de10:	2101      	movs	r1, #1
    de12:	4662      	mov	r2, ip
    de14:	b022      	add	sp, #136	; 0x88
    de16:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
    de1a:	f000 ba44 	b.w	e2a6 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>
    de1e:	6800      	ldr	r0, [r0, #0]
    de20:	f10d 0e08 	add.w	lr, sp, #8
    de24:	2281      	movs	r2, #129	; 0x81
    de26:	2300      	movs	r3, #0
    de28:	f000 010f 	and.w	r1, r0, #15
    de2c:	f101 0457 	add.w	r4, r1, #87	; 0x57
    de30:	290a      	cmp	r1, #10
    de32:	bf38      	it	cc
    de34:	f101 0430 	addcc.w	r4, r1, #48	; 0x30
    de38:	eb0e 0102 	add.w	r1, lr, r2
    de3c:	ebb3 1f10 	cmp.w	r3, r0, lsr #4
    de40:	f801 4c02 	strb.w	r4, [r1, #-2]
    de44:	d071      	beq.n	df2a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x12c>
    de46:	0904      	lsrs	r4, r0, #4
    de48:	f004 040f 	and.w	r4, r4, #15
    de4c:	f104 0557 	add.w	r5, r4, #87	; 0x57
    de50:	2c0a      	cmp	r4, #10
    de52:	bf38      	it	cc
    de54:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
    de58:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    de5c:	f801 5c03 	strb.w	r5, [r1, #-3]
    de60:	d078      	beq.n	df54 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x156>
    de62:	0a04      	lsrs	r4, r0, #8
    de64:	f004 040f 	and.w	r4, r4, #15
    de68:	f104 0557 	add.w	r5, r4, #87	; 0x57
    de6c:	2c0a      	cmp	r4, #10
    de6e:	bf38      	it	cc
    de70:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
    de74:	ebb3 3f10 	cmp.w	r3, r0, lsr #12
    de78:	f801 5c04 	strb.w	r5, [r1, #-4]
    de7c:	d072      	beq.n	df64 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x166>
    de7e:	0b04      	lsrs	r4, r0, #12
    de80:	3a04      	subs	r2, #4
    de82:	f004 040f 	and.w	r4, r4, #15
    de86:	f104 0557 	add.w	r5, r4, #87	; 0x57
    de8a:	2c0a      	cmp	r4, #10
    de8c:	bf38      	it	cc
    de8e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
    de92:	f801 5c05 	strb.w	r5, [r1, #-5]
    de96:	0c01      	lsrs	r1, r0, #16
    de98:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
    de9c:	4608      	mov	r0, r1
    de9e:	d1c3      	bne.n	de28 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x2a>
    dea0:	e03f      	b.n	df22 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x124>
    dea2:	f10d 0e08 	add.w	lr, sp, #8
    dea6:	2281      	movs	r2, #129	; 0x81
    dea8:	2300      	movs	r3, #0
    deaa:	f000 010f 	and.w	r1, r0, #15
    deae:	f101 0437 	add.w	r4, r1, #55	; 0x37
    deb2:	290a      	cmp	r1, #10
    deb4:	bf38      	it	cc
    deb6:	f101 0430 	addcc.w	r4, r1, #48	; 0x30
    deba:	eb0e 0102 	add.w	r1, lr, r2
    debe:	ebb3 1f10 	cmp.w	r3, r0, lsr #4
    dec2:	f801 4c02 	strb.w	r4, [r1, #-2]
    dec6:	d030      	beq.n	df2a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x12c>
    dec8:	0904      	lsrs	r4, r0, #4
    deca:	f004 040f 	and.w	r4, r4, #15
    dece:	f104 0537 	add.w	r5, r4, #55	; 0x37
    ded2:	2c0a      	cmp	r4, #10
    ded4:	bf38      	it	cc
    ded6:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
    deda:	ebb3 2f10 	cmp.w	r3, r0, lsr #8
    dede:	f801 5c03 	strb.w	r5, [r1, #-3]
    dee2:	d037      	beq.n	df54 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x156>
    dee4:	0a04      	lsrs	r4, r0, #8
    dee6:	f004 040f 	and.w	r4, r4, #15
    deea:	f104 0537 	add.w	r5, r4, #55	; 0x37
    deee:	2c0a      	cmp	r4, #10
    def0:	bf38      	it	cc
    def2:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
    def6:	ebb3 3f10 	cmp.w	r3, r0, lsr #12
    defa:	f801 5c04 	strb.w	r5, [r1, #-4]
    defe:	d031      	beq.n	df64 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x166>
    df00:	0b04      	lsrs	r4, r0, #12
    df02:	3a04      	subs	r2, #4
    df04:	f004 040f 	and.w	r4, r4, #15
    df08:	f104 0537 	add.w	r5, r4, #55	; 0x37
    df0c:	2c0a      	cmp	r4, #10
    df0e:	bf38      	it	cc
    df10:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
    df14:	f801 5c05 	strb.w	r5, [r1, #-5]
    df18:	0c01      	lsrs	r1, r0, #16
    df1a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
    df1e:	4608      	mov	r0, r1
    df20:	d1c3      	bne.n	deaa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0xac>
    df22:	1e50      	subs	r0, r2, #1
    df24:	2881      	cmp	r0, #129	; 0x81
    df26:	d305      	bcc.n	df34 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x136>
    df28:	e018      	b.n	df5c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x15e>
    df2a:	1e51      	subs	r1, r2, #1
    df2c:	1e90      	subs	r0, r2, #2
    df2e:	460a      	mov	r2, r1
    df30:	2881      	cmp	r0, #129	; 0x81
    df32:	d213      	bcs.n	df5c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x15e>
    df34:	f1c2 0181 	rsb	r1, r2, #129	; 0x81
    df38:	f64a 32b4 	movw	r2, #43956	; 0xabb4
    df3c:	4470      	add	r0, lr
    df3e:	f2c0 0202 	movt	r2, #2
    df42:	e9cd 0100 	strd	r0, r1, [sp]
    df46:	4660      	mov	r0, ip
    df48:	2101      	movs	r1, #1
    df4a:	2302      	movs	r3, #2
    df4c:	f7ff fa8c 	bl	d468 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
    df50:	b022      	add	sp, #136	; 0x88
    df52:	bdb0      	pop	{r4, r5, r7, pc}
    df54:	1ed0      	subs	r0, r2, #3
    df56:	3a02      	subs	r2, #2
    df58:	2881      	cmp	r0, #129	; 0x81
    df5a:	d3eb      	bcc.n	df34 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x136>
    df5c:	2180      	movs	r1, #128	; 0x80
    df5e:	f7fe fe01 	bl	cb64 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
    df62:	defe      	udf	#254	; 0xfe
    df64:	1f10      	subs	r0, r2, #4
    df66:	3a03      	subs	r2, #3
    df68:	2881      	cmp	r0, #129	; 0x81
    df6a:	d3e3      	bcc.n	df34 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x136>
    df6c:	e7f6      	b.n	df5c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x15e>

0000df6e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE>:
    df6e:	b580      	push	{r7, lr}
    df70:	b0a2      	sub	sp, #136	; 0x88
    df72:	7802      	ldrb	r2, [r0, #0]
    df74:	468c      	mov	ip, r1
    df76:	f002 030f 	and.w	r3, r2, #15
    df7a:	f103 0057 	add.w	r0, r3, #87	; 0x57
    df7e:	2b0a      	cmp	r3, #10
    df80:	bf38      	it	cc
    df82:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
    df86:	2300      	movs	r3, #0
    df88:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
    df8c:	d00b      	beq.n	dfa6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE+0x38>
    df8e:	0913      	lsrs	r3, r2, #4
    df90:	f103 0157 	add.w	r1, r3, #87	; 0x57
    df94:	2aa0      	cmp	r2, #160	; 0xa0
    df96:	bf38      	it	cc
    df98:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
    df9c:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
    dfa0:	227e      	movs	r2, #126	; 0x7e
    dfa2:	2302      	movs	r3, #2
    dfa4:	e001      	b.n	dfaa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE+0x3c>
    dfa6:	227f      	movs	r2, #127	; 0x7f
    dfa8:	2301      	movs	r3, #1
    dfaa:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    dfae:	a802      	add	r0, sp, #8
    dfb0:	4410      	add	r0, r2
    dfb2:	f64a 32b4 	movw	r2, #43956	; 0xabb4
    dfb6:	e9cd 0300 	strd	r0, r3, [sp]
    dfba:	f2c0 0202 	movt	r2, #2
    dfbe:	4660      	mov	r0, ip
    dfc0:	2101      	movs	r1, #1
    dfc2:	2302      	movs	r3, #2
    dfc4:	f7ff fa50 	bl	d468 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
    dfc8:	b022      	add	sp, #136	; 0x88
    dfca:	bd80      	pop	{r7, pc}

0000dfcc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E>:
    dfcc:	b580      	push	{r7, lr}
    dfce:	b0a2      	sub	sp, #136	; 0x88
    dfd0:	7802      	ldrb	r2, [r0, #0]
    dfd2:	468c      	mov	ip, r1
    dfd4:	f002 030f 	and.w	r3, r2, #15
    dfd8:	f103 0037 	add.w	r0, r3, #55	; 0x37
    dfdc:	2b0a      	cmp	r3, #10
    dfde:	bf38      	it	cc
    dfe0:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
    dfe4:	2300      	movs	r3, #0
    dfe6:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
    dfea:	d00b      	beq.n	e004 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E+0x38>
    dfec:	0913      	lsrs	r3, r2, #4
    dfee:	f103 0137 	add.w	r1, r3, #55	; 0x37
    dff2:	2aa0      	cmp	r2, #160	; 0xa0
    dff4:	bf38      	it	cc
    dff6:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
    dffa:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
    dffe:	227e      	movs	r2, #126	; 0x7e
    e000:	2302      	movs	r3, #2
    e002:	e001      	b.n	e008 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E+0x3c>
    e004:	227f      	movs	r2, #127	; 0x7f
    e006:	2301      	movs	r3, #1
    e008:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    e00c:	a802      	add	r0, sp, #8
    e00e:	4410      	add	r0, r2
    e010:	f64a 32b4 	movw	r2, #43956	; 0xabb4
    e014:	e9cd 0300 	strd	r0, r3, [sp]
    e018:	f2c0 0202 	movt	r2, #2
    e01c:	4660      	mov	r0, ip
    e01e:	2101      	movs	r1, #1
    e020:	2302      	movs	r3, #2
    e022:	f7ff fa21 	bl	d468 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
    e026:	b022      	add	sp, #136	; 0x88
    e028:	bd80      	pop	{r7, pc}

0000e02a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE>:
    e02a:	b5b0      	push	{r4, r5, r7, lr}
    e02c:	b0a2      	sub	sp, #136	; 0x88
    e02e:	6800      	ldr	r0, [r0, #0]
    e030:	f10d 0e08 	add.w	lr, sp, #8
    e034:	468c      	mov	ip, r1
    e036:	2381      	movs	r3, #129	; 0x81
    e038:	2100      	movs	r1, #0
    e03a:	f000 020f 	and.w	r2, r0, #15
    e03e:	f102 0457 	add.w	r4, r2, #87	; 0x57
    e042:	2a0a      	cmp	r2, #10
    e044:	bf38      	it	cc
    e046:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
    e04a:	eb0e 0203 	add.w	r2, lr, r3
    e04e:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
    e052:	f802 4c02 	strb.w	r4, [r2, #-2]
    e056:	d030      	beq.n	e0ba <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0x90>
    e058:	0904      	lsrs	r4, r0, #4
    e05a:	f004 040f 	and.w	r4, r4, #15
    e05e:	f104 0557 	add.w	r5, r4, #87	; 0x57
    e062:	2c0a      	cmp	r4, #10
    e064:	bf38      	it	cc
    e066:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
    e06a:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    e06e:	f802 5c03 	strb.w	r5, [r2, #-3]
    e072:	d028      	beq.n	e0c6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0x9c>
    e074:	0a04      	lsrs	r4, r0, #8
    e076:	f004 040f 	and.w	r4, r4, #15
    e07a:	f104 0557 	add.w	r5, r4, #87	; 0x57
    e07e:	2c0a      	cmp	r4, #10
    e080:	bf38      	it	cc
    e082:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
    e086:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
    e08a:	f802 5c04 	strb.w	r5, [r2, #-4]
    e08e:	d01f      	beq.n	e0d0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xa6>
    e090:	0b04      	lsrs	r4, r0, #12
    e092:	3b04      	subs	r3, #4
    e094:	f004 040f 	and.w	r4, r4, #15
    e098:	f104 0557 	add.w	r5, r4, #87	; 0x57
    e09c:	2c0a      	cmp	r4, #10
    e09e:	bf38      	it	cc
    e0a0:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
    e0a4:	f802 5c05 	strb.w	r5, [r2, #-5]
    e0a8:	0c02      	lsrs	r2, r0, #16
    e0aa:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
    e0ae:	4610      	mov	r0, r2
    e0b0:	d1c3      	bne.n	e03a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0x10>
    e0b2:	1e58      	subs	r0, r3, #1
    e0b4:	2881      	cmp	r0, #129	; 0x81
    e0b6:	d30f      	bcc.n	e0d8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xae>
    e0b8:	e01e      	b.n	e0f8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xce>
    e0ba:	1e59      	subs	r1, r3, #1
    e0bc:	1e98      	subs	r0, r3, #2
    e0be:	460b      	mov	r3, r1
    e0c0:	2881      	cmp	r0, #129	; 0x81
    e0c2:	d309      	bcc.n	e0d8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xae>
    e0c4:	e018      	b.n	e0f8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xce>
    e0c6:	1ed8      	subs	r0, r3, #3
    e0c8:	3b02      	subs	r3, #2
    e0ca:	2881      	cmp	r0, #129	; 0x81
    e0cc:	d304      	bcc.n	e0d8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xae>
    e0ce:	e013      	b.n	e0f8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xce>
    e0d0:	1f18      	subs	r0, r3, #4
    e0d2:	3b03      	subs	r3, #3
    e0d4:	2881      	cmp	r0, #129	; 0x81
    e0d6:	d20f      	bcs.n	e0f8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xce>
    e0d8:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
    e0dc:	f64a 32b4 	movw	r2, #43956	; 0xabb4
    e0e0:	4470      	add	r0, lr
    e0e2:	f2c0 0202 	movt	r2, #2
    e0e6:	e9cd 0100 	strd	r0, r1, [sp]
    e0ea:	4660      	mov	r0, ip
    e0ec:	2101      	movs	r1, #1
    e0ee:	2302      	movs	r3, #2
    e0f0:	f7ff f9ba 	bl	d468 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
    e0f4:	b022      	add	sp, #136	; 0x88
    e0f6:	bdb0      	pop	{r4, r5, r7, pc}
    e0f8:	2180      	movs	r1, #128	; 0x80
    e0fa:	f7fe fd33 	bl	cb64 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
    e0fe:	defe      	udf	#254	; 0xfe

0000e100 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E>:
    e100:	b5b0      	push	{r4, r5, r7, lr}
    e102:	b0a2      	sub	sp, #136	; 0x88
    e104:	6800      	ldr	r0, [r0, #0]
    e106:	f10d 0e08 	add.w	lr, sp, #8
    e10a:	468c      	mov	ip, r1
    e10c:	2381      	movs	r3, #129	; 0x81
    e10e:	2100      	movs	r1, #0
    e110:	f000 020f 	and.w	r2, r0, #15
    e114:	f102 0437 	add.w	r4, r2, #55	; 0x37
    e118:	2a0a      	cmp	r2, #10
    e11a:	bf38      	it	cc
    e11c:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
    e120:	eb0e 0203 	add.w	r2, lr, r3
    e124:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
    e128:	f802 4c02 	strb.w	r4, [r2, #-2]
    e12c:	d030      	beq.n	e190 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0x90>
    e12e:	0904      	lsrs	r4, r0, #4
    e130:	f004 040f 	and.w	r4, r4, #15
    e134:	f104 0537 	add.w	r5, r4, #55	; 0x37
    e138:	2c0a      	cmp	r4, #10
    e13a:	bf38      	it	cc
    e13c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
    e140:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    e144:	f802 5c03 	strb.w	r5, [r2, #-3]
    e148:	d028      	beq.n	e19c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0x9c>
    e14a:	0a04      	lsrs	r4, r0, #8
    e14c:	f004 040f 	and.w	r4, r4, #15
    e150:	f104 0537 	add.w	r5, r4, #55	; 0x37
    e154:	2c0a      	cmp	r4, #10
    e156:	bf38      	it	cc
    e158:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
    e15c:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
    e160:	f802 5c04 	strb.w	r5, [r2, #-4]
    e164:	d01f      	beq.n	e1a6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xa6>
    e166:	0b04      	lsrs	r4, r0, #12
    e168:	3b04      	subs	r3, #4
    e16a:	f004 040f 	and.w	r4, r4, #15
    e16e:	f104 0537 	add.w	r5, r4, #55	; 0x37
    e172:	2c0a      	cmp	r4, #10
    e174:	bf38      	it	cc
    e176:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
    e17a:	f802 5c05 	strb.w	r5, [r2, #-5]
    e17e:	0c02      	lsrs	r2, r0, #16
    e180:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
    e184:	4610      	mov	r0, r2
    e186:	d1c3      	bne.n	e110 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0x10>
    e188:	1e58      	subs	r0, r3, #1
    e18a:	2881      	cmp	r0, #129	; 0x81
    e18c:	d30f      	bcc.n	e1ae <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xae>
    e18e:	e01e      	b.n	e1ce <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xce>
    e190:	1e59      	subs	r1, r3, #1
    e192:	1e98      	subs	r0, r3, #2
    e194:	460b      	mov	r3, r1
    e196:	2881      	cmp	r0, #129	; 0x81
    e198:	d309      	bcc.n	e1ae <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xae>
    e19a:	e018      	b.n	e1ce <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xce>
    e19c:	1ed8      	subs	r0, r3, #3
    e19e:	3b02      	subs	r3, #2
    e1a0:	2881      	cmp	r0, #129	; 0x81
    e1a2:	d304      	bcc.n	e1ae <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xae>
    e1a4:	e013      	b.n	e1ce <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xce>
    e1a6:	1f18      	subs	r0, r3, #4
    e1a8:	3b03      	subs	r3, #3
    e1aa:	2881      	cmp	r0, #129	; 0x81
    e1ac:	d20f      	bcs.n	e1ce <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xce>
    e1ae:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
    e1b2:	f64a 32b4 	movw	r2, #43956	; 0xabb4
    e1b6:	4470      	add	r0, lr
    e1b8:	f2c0 0202 	movt	r2, #2
    e1bc:	e9cd 0100 	strd	r0, r1, [sp]
    e1c0:	4660      	mov	r0, ip
    e1c2:	2101      	movs	r1, #1
    e1c4:	2302      	movs	r3, #2
    e1c6:	f7ff f94f 	bl	d468 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
    e1ca:	b022      	add	sp, #136	; 0x88
    e1cc:	bdb0      	pop	{r4, r5, r7, pc}
    e1ce:	2180      	movs	r1, #128	; 0x80
    e1d0:	f7fe fcc8 	bl	cb64 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
    e1d4:	defe      	udf	#254	; 0xfe

0000e1d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E>:
    e1d6:	b510      	push	{r4, lr}
    e1d8:	b0a2      	sub	sp, #136	; 0x88
    e1da:	468c      	mov	ip, r1
    e1dc:	e9d0 2100 	ldrd	r2, r1, [r0]
    e1e0:	f10d 0e08 	add.w	lr, sp, #8
    e1e4:	237f      	movs	r3, #127	; 0x7f
    e1e6:	1c58      	adds	r0, r3, #1
    e1e8:	d013      	beq.n	e212 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E+0x3c>
    e1ea:	f002 000f 	and.w	r0, r2, #15
    e1ee:	f100 0457 	add.w	r4, r0, #87	; 0x57
    e1f2:	280a      	cmp	r0, #10
    e1f4:	bf38      	it	cc
    e1f6:	f100 0430 	addcc.w	r4, r0, #48	; 0x30
    e1fa:	0910      	lsrs	r0, r2, #4
    e1fc:	ea40 7201 	orr.w	r2, r0, r1, lsl #28
    e200:	f80e 4003 	strb.w	r4, [lr, r3]
    e204:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
    e208:	3b01      	subs	r3, #1
    e20a:	0909      	lsrs	r1, r1, #4
    e20c:	2800      	cmp	r0, #0
    e20e:	d1ea      	bne.n	e1e6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E+0x10>
    e210:	1c58      	adds	r0, r3, #1
    e212:	2881      	cmp	r0, #129	; 0x81
    e214:	d20f      	bcs.n	e236 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E+0x60>
    e216:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
    e21a:	f64a 32b4 	movw	r2, #43956	; 0xabb4
    e21e:	4470      	add	r0, lr
    e220:	f2c0 0202 	movt	r2, #2
    e224:	e9cd 0100 	strd	r0, r1, [sp]
    e228:	4660      	mov	r0, ip
    e22a:	2101      	movs	r1, #1
    e22c:	2302      	movs	r3, #2
    e22e:	f7ff f91b 	bl	d468 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
    e232:	b022      	add	sp, #136	; 0x88
    e234:	bd10      	pop	{r4, pc}
    e236:	2180      	movs	r1, #128	; 0x80
    e238:	f7fe fc94 	bl	cb64 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
    e23c:	defe      	udf	#254	; 0xfe

0000e23e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE>:
    e23e:	b510      	push	{r4, lr}
    e240:	b0a2      	sub	sp, #136	; 0x88
    e242:	468c      	mov	ip, r1
    e244:	e9d0 2100 	ldrd	r2, r1, [r0]
    e248:	f10d 0e08 	add.w	lr, sp, #8
    e24c:	237f      	movs	r3, #127	; 0x7f
    e24e:	1c58      	adds	r0, r3, #1
    e250:	d013      	beq.n	e27a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE+0x3c>
    e252:	f002 000f 	and.w	r0, r2, #15
    e256:	f100 0437 	add.w	r4, r0, #55	; 0x37
    e25a:	280a      	cmp	r0, #10
    e25c:	bf38      	it	cc
    e25e:	f100 0430 	addcc.w	r4, r0, #48	; 0x30
    e262:	0910      	lsrs	r0, r2, #4
    e264:	ea40 7201 	orr.w	r2, r0, r1, lsl #28
    e268:	f80e 4003 	strb.w	r4, [lr, r3]
    e26c:	ea42 1011 	orr.w	r0, r2, r1, lsr #4
    e270:	3b01      	subs	r3, #1
    e272:	0909      	lsrs	r1, r1, #4
    e274:	2800      	cmp	r0, #0
    e276:	d1ea      	bne.n	e24e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE+0x10>
    e278:	1c58      	adds	r0, r3, #1
    e27a:	2881      	cmp	r0, #129	; 0x81
    e27c:	d20f      	bcs.n	e29e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE+0x60>
    e27e:	f1c0 0180 	rsb	r1, r0, #128	; 0x80
    e282:	f64a 32b4 	movw	r2, #43956	; 0xabb4
    e286:	4470      	add	r0, lr
    e288:	f2c0 0202 	movt	r2, #2
    e28c:	e9cd 0100 	strd	r0, r1, [sp]
    e290:	4660      	mov	r0, ip
    e292:	2101      	movs	r1, #1
    e294:	2302      	movs	r3, #2
    e296:	f7ff f8e7 	bl	d468 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
    e29a:	b022      	add	sp, #136	; 0x88
    e29c:	bd10      	pop	{r4, pc}
    e29e:	2180      	movs	r1, #128	; 0x80
    e2a0:	f7fe fc60 	bl	cb64 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
    e2a4:	defe      	udf	#254	; 0xfe

0000e2a6 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>:
    e2a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2aa:	b08f      	sub	sp, #60	; 0x3c
    e2ac:	460e      	mov	r6, r1
    e2ae:	f242 7110 	movw	r1, #10000	; 0x2710
    e2b2:	4617      	mov	r7, r2
    e2b4:	4288      	cmp	r0, r1
    e2b6:	d345      	bcc.n	e344 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x9e>
    e2b8:	f241 7859 	movw	r8, #5977	; 0x1759
    e2bc:	f248 591f 	movw	r9, #34079	; 0x851f
    e2c0:	f24e 0eff 	movw	lr, #57599	; 0xe0ff
    e2c4:	e9cd 6703 	strd	r6, r7, [sp, #12]
    e2c8:	f64a 36b6 	movw	r6, #43958	; 0xabb6
    e2cc:	f10d 0b15 	add.w	fp, sp, #21
    e2d0:	2300      	movs	r3, #0
    e2d2:	f2cd 18b7 	movt	r8, #53687	; 0xd1b7
    e2d6:	f2c5 19eb 	movt	r9, #20971	; 0x51eb
    e2da:	f04f 0a64 	mov.w	sl, #100	; 0x64
    e2de:	f2c0 0602 	movt	r6, #2
    e2e2:	f2c0 5ef5 	movt	lr, #1525	; 0x5f5
    e2e6:	fba0 4508 	umull	r4, r5, r0, r8
    e2ea:	eb0b 0203 	add.w	r2, fp, r3
    e2ee:	3b04      	subs	r3, #4
    e2f0:	4570      	cmp	r0, lr
    e2f2:	ea4f 3455 	mov.w	r4, r5, lsr #13
    e2f6:	fb04 0511 	mls	r5, r4, r1, r0
    e2fa:	4620      	mov	r0, r4
    e2fc:	fba5 7c09 	umull	r7, ip, r5, r9
    e300:	ea4f 175c 	mov.w	r7, ip, lsr #5
    e304:	fb07 551a 	mls	r5, r7, sl, r5
    e308:	f836 7017 	ldrh.w	r7, [r6, r7, lsl #1]
    e30c:	f8a2 7023 	strh.w	r7, [r2, #35]	; 0x23
    e310:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
    e314:	f8a2 5025 	strh.w	r5, [r2, #37]	; 0x25
    e318:	d8e5      	bhi.n	e2e6 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x40>
    e31a:	e9dd 6703 	ldrd	r6, r7, [sp, #12]
    e31e:	f103 0227 	add.w	r2, r3, #39	; 0x27
    e322:	4620      	mov	r0, r4
    e324:	2863      	cmp	r0, #99	; 0x63
    e326:	dc10      	bgt.n	e34a <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0xa4>
    e328:	4603      	mov	r3, r0
    e32a:	2b09      	cmp	r3, #9
    e32c:	dd25      	ble.n	e37a <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0xd4>
    e32e:	f64a 31b6 	movw	r1, #43958	; 0xabb6
    e332:	1e90      	subs	r0, r2, #2
    e334:	f2c0 0102 	movt	r1, #2
    e338:	f10d 0215 	add.w	r2, sp, #21
    e33c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    e340:	5211      	strh	r1, [r2, r0]
    e342:	e020      	b.n	e386 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0xe0>
    e344:	2227      	movs	r2, #39	; 0x27
    e346:	2863      	cmp	r0, #99	; 0x63
    e348:	ddee      	ble.n	e328 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x82>
    e34a:	f248 531f 	movw	r3, #34079	; 0x851f
    e34e:	b281      	uxth	r1, r0
    e350:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    e354:	3a02      	subs	r2, #2
    e356:	fba1 1303 	umull	r1, r3, r1, r3
    e35a:	2164      	movs	r1, #100	; 0x64
    e35c:	095b      	lsrs	r3, r3, #5
    e35e:	fb03 0011 	mls	r0, r3, r1, r0
    e362:	f64a 31b6 	movw	r1, #43958	; 0xabb6
    e366:	f2c0 0102 	movt	r1, #2
    e36a:	b280      	uxth	r0, r0
    e36c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    e370:	f10d 0115 	add.w	r1, sp, #21
    e374:	5288      	strh	r0, [r1, r2]
    e376:	2b09      	cmp	r3, #9
    e378:	dcd9      	bgt.n	e32e <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x88>
    e37a:	1e50      	subs	r0, r2, #1
    e37c:	f10d 0215 	add.w	r2, sp, #21
    e380:	f103 0130 	add.w	r1, r3, #48	; 0x30
    e384:	5411      	strb	r1, [r2, r0]
    e386:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
    e38a:	f10d 0215 	add.w	r2, sp, #21
    e38e:	4410      	add	r0, r2
    e390:	f24a 727c 	movw	r2, #42876	; 0xa77c
    e394:	e9cd 0100 	strd	r0, r1, [sp]
    e398:	f2c0 0202 	movt	r2, #2
    e39c:	4638      	mov	r0, r7
    e39e:	4631      	mov	r1, r6
    e3a0:	2300      	movs	r3, #0
    e3a2:	f7ff f861 	bl	d468 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
    e3a6:	b00f      	add	sp, #60	; 0x3c
    e3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e3ac <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E>:
    e3ac:	7800      	ldrb	r0, [r0, #0]
    e3ae:	460a      	mov	r2, r1
    e3b0:	2101      	movs	r1, #1
    e3b2:	f7ff bf78 	b.w	e2a6 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

0000e3b6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h33b3bbdbc74b88baE>:
    e3b6:	6800      	ldr	r0, [r0, #0]
    e3b8:	460a      	mov	r2, r1
    e3ba:	2100      	movs	r1, #0
    e3bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    e3c0:	bfc8      	it	gt
    e3c2:	2101      	movgt	r1, #1
    e3c4:	2800      	cmp	r0, #0
    e3c6:	bf48      	it	mi
    e3c8:	4240      	negmi	r0, r0
    e3ca:	f7ff bf6c 	b.w	e2a6 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

0000e3ce <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE>:
    e3ce:	6800      	ldr	r0, [r0, #0]
    e3d0:	460a      	mov	r2, r1
    e3d2:	2101      	movs	r1, #1
    e3d4:	f7ff bf67 	b.w	e2a6 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

0000e3d8 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE>:
    e3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3dc:	b08f      	sub	sp, #60	; 0x3c
    e3de:	4606      	mov	r6, r0
    e3e0:	f242 7010 	movw	r0, #10000	; 0x2710
    e3e4:	1a30      	subs	r0, r6, r0
    e3e6:	461d      	mov	r5, r3
    e3e8:	4614      	mov	r4, r2
    e3ea:	f171 0000 	sbcs.w	r0, r1, #0
    e3ee:	d34c      	bcc.n	e48a <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0xb2>
    e3f0:	f64a 38b6 	movw	r8, #43958	; 0xabb6
    e3f4:	f24e 0bff 	movw	fp, #57599	; 0xe0ff
    e3f8:	f10d 0915 	add.w	r9, sp, #21
    e3fc:	e9cd 4503 	strd	r4, r5, [sp, #12]
    e400:	460f      	mov	r7, r1
    e402:	2564      	movs	r5, #100	; 0x64
    e404:	f2c0 0802 	movt	r8, #2
    e408:	f2c0 5bf5 	movt	fp, #1525	; 0x5f5
    e40c:	f04f 0a00 	mov.w	sl, #0
    e410:	4630      	mov	r0, r6
    e412:	4639      	mov	r1, r7
    e414:	f242 7210 	movw	r2, #10000	; 0x2710
    e418:	2300      	movs	r3, #0
    e41a:	f01b facb 	bl	299b4 <__aeabi_uldivmod>
    e41e:	f242 7210 	movw	r2, #10000	; 0x2710
    e422:	f248 531f 	movw	r3, #34079	; 0x851f
    e426:	fb00 6212 	mls	r2, r0, r2, r6
    e42a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    e42e:	fba2 3403 	umull	r3, r4, r2, r3
    e432:	0963      	lsrs	r3, r4, #5
    e434:	eb09 040a 	add.w	r4, r9, sl
    e438:	fb03 2215 	mls	r2, r3, r5, r2
    e43c:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
    e440:	f8a4 3023 	strh.w	r3, [r4, #35]	; 0x23
    e444:	f1aa 0a04 	sub.w	sl, sl, #4
    e448:	f838 2012 	ldrh.w	r2, [r8, r2, lsl #1]
    e44c:	f8a4 2025 	strh.w	r2, [r4, #37]	; 0x25
    e450:	ebbb 0206 	subs.w	r2, fp, r6
    e454:	f04f 0200 	mov.w	r2, #0
    e458:	4606      	mov	r6, r0
    e45a:	41ba      	sbcs	r2, r7
    e45c:	460f      	mov	r7, r1
    e45e:	d3d7      	bcc.n	e410 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x38>
    e460:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
    e464:	f10a 0127 	add.w	r1, sl, #39	; 0x27
    e468:	4606      	mov	r6, r0
    e46a:	2e63      	cmp	r6, #99	; 0x63
    e46c:	dc10      	bgt.n	e490 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0xb8>
    e46e:	4630      	mov	r0, r6
    e470:	2809      	cmp	r0, #9
    e472:	dd25      	ble.n	e4c0 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0xe8>
    e474:	f64a 32b6 	movw	r2, #43958	; 0xabb6
    e478:	3902      	subs	r1, #2
    e47a:	f2c0 0202 	movt	r2, #2
    e47e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
    e482:	f10d 0215 	add.w	r2, sp, #21
    e486:	5250      	strh	r0, [r2, r1]
    e488:	e01f      	b.n	e4ca <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0xf2>
    e48a:	2127      	movs	r1, #39	; 0x27
    e48c:	2e63      	cmp	r6, #99	; 0x63
    e48e:	ddee      	ble.n	e46e <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x96>
    e490:	f248 521f 	movw	r2, #34079	; 0x851f
    e494:	b2b0      	uxth	r0, r6
    e496:	f2c5 12eb 	movt	r2, #20971	; 0x51eb
    e49a:	f64a 33b6 	movw	r3, #43958	; 0xabb6
    e49e:	fba0 0202 	umull	r0, r2, r0, r2
    e4a2:	f2c0 0302 	movt	r3, #2
    e4a6:	3902      	subs	r1, #2
    e4a8:	0950      	lsrs	r0, r2, #5
    e4aa:	2264      	movs	r2, #100	; 0x64
    e4ac:	fb00 6212 	mls	r2, r0, r2, r6
    e4b0:	b292      	uxth	r2, r2
    e4b2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    e4b6:	f10d 0315 	add.w	r3, sp, #21
    e4ba:	525a      	strh	r2, [r3, r1]
    e4bc:	2809      	cmp	r0, #9
    e4be:	dcd9      	bgt.n	e474 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x9c>
    e4c0:	3901      	subs	r1, #1
    e4c2:	f10d 0215 	add.w	r2, sp, #21
    e4c6:	3030      	adds	r0, #48	; 0x30
    e4c8:	5450      	strb	r0, [r2, r1]
    e4ca:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
    e4ce:	f10d 0215 	add.w	r2, sp, #21
    e4d2:	4411      	add	r1, r2
    e4d4:	f24a 727c 	movw	r2, #42876	; 0xa77c
    e4d8:	e9cd 1000 	strd	r1, r0, [sp]
    e4dc:	f2c0 0202 	movt	r2, #2
    e4e0:	4628      	mov	r0, r5
    e4e2:	4621      	mov	r1, r4
    e4e4:	2300      	movs	r3, #0
    e4e6:	f7fe ffbf 	bl	d468 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
    e4ea:	b00f      	add	sp, #60	; 0x3c
    e4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e4f0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17h97d3cc39ae689800E>:
    e4f0:	468c      	mov	ip, r1
    e4f2:	e9d0 0100 	ldrd	r0, r1, [r0]
    e4f6:	2200      	movs	r2, #0
    e4f8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    e4fc:	bfc8      	it	gt
    e4fe:	2201      	movgt	r2, #1
    e500:	eb10 70e1 	adds.w	r0, r0, r1, asr #31
    e504:	eb41 73e1 	adc.w	r3, r1, r1, asr #31
    e508:	ea80 70e1 	eor.w	r0, r0, r1, asr #31
    e50c:	ea83 71e1 	eor.w	r1, r3, r1, asr #31
    e510:	4663      	mov	r3, ip
    e512:	f7ff bf61 	b.w	e3d8 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE>

0000e516 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h133134731e47c3ddE>:
    e516:	460b      	mov	r3, r1
    e518:	e9d0 1200 	ldrd	r1, r2, [r0]
    e51c:	4618      	mov	r0, r3
    e51e:	f7ff b8e0 	b.w	d6e2 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE>
	...

0000e524 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
    e524:	4b07      	ldr	r3, [pc, #28]	; (e544 <__semihost+0x20>)
    e526:	781b      	ldrb	r3, [r3, #0]
    e528:	b14b      	cbz	r3, e53e <__semihost+0x1a>
static int __semihost(int command, void* message) {
    e52a:	b410      	push	{r4}
    e52c:	4602      	mov	r2, r0
    e52e:	460c      	mov	r4, r1
    __asm( 
    e530:	4610      	mov	r0, r2
    e532:	4621      	mov	r1, r4
    e534:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
    e536:	2000      	movs	r0, #0
}
    e538:	f85d 4b04 	ldr.w	r4, [sp], #4
    e53c:	4770      	bx	lr
    if (!log_enabled) return -1;
    e53e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    e542:	4770      	bx	lr
    e544:	20000168 	.word	0x20000168

0000e548 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    e548:	4b02      	ldr	r3, [pc, #8]	; (e554 <debugger_connected+0xc>)
    e54a:	6818      	ldr	r0, [r3, #0]
}
    e54c:	f000 0001 	and.w	r0, r0, #1
    e550:	4770      	bx	lr
    e552:	bf00      	nop
    e554:	e000edf0 	.word	0xe000edf0

0000e558 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
    e558:	b570      	push	{r4, r5, r6, lr}
    e55a:	b084      	sub	sp, #16
    e55c:	4606      	mov	r6, r0
    e55e:	460d      	mov	r5, r1
    e560:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING
    return 0;
#else
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
    e562:	f7ff fff1 	bl	e548 <debugger_connected>
    e566:	4603      	mov	r3, r0
    e568:	b108      	cbz	r0, e56e <semihost_write+0x16>
    if (length == 0) { return 0; }
    e56a:	b91c      	cbnz	r4, e574 <semihost_write+0x1c>
    e56c:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
    e56e:	4618      	mov	r0, r3
    e570:	b004      	add	sp, #16
    e572:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
    e574:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
    e576:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
    e578:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
    e57a:	a901      	add	r1, sp, #4
    e57c:	2005      	movs	r0, #5
    e57e:	f7ff ffd1 	bl	e524 <__semihost>
    e582:	4603      	mov	r3, r0
    e584:	e7f3      	b.n	e56e <semihost_write+0x16>
	...

0000e588 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
    e588:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
    e58a:	4b0e      	ldr	r3, [pc, #56]	; (e5c4 <console_flush+0x3c>)
    e58c:	781b      	ldrb	r3, [r3, #0]
    e58e:	b1bb      	cbz	r3, e5c0 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
    e590:	4b0d      	ldr	r3, [pc, #52]	; (e5c8 <console_flush+0x40>)
    e592:	681d      	ldr	r5, [r3, #0]
    e594:	b1a5      	cbz	r5, e5c0 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    e596:	4b0d      	ldr	r3, [pc, #52]	; (e5cc <console_flush+0x44>)
    e598:	685b      	ldr	r3, [r3, #4]
    e59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
    e59e:	b97b      	cbnz	r3, e5c0 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
    e5a0:	4b09      	ldr	r3, [pc, #36]	; (e5c8 <console_flush+0x40>)
    e5a2:	2200      	movs	r2, #0
    e5a4:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
    e5a6:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
    e5a8:	e005      	b.n	e5b6 <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
    e5aa:	88e2      	ldrh	r2, [r4, #6]
    e5ac:	6821      	ldr	r1, [r4, #0]
    e5ae:	2002      	movs	r0, #2
    e5b0:	f7ff ffd2 	bl	e558 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
    e5b4:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
    e5b6:	2c00      	cmp	r4, #0
    e5b8:	d1f7      	bne.n	e5aa <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
    e5ba:	4628      	mov	r0, r5
    e5bc:	f002 fc8e 	bl	10edc <os_mbuf_free_chain>
}
    e5c0:	bd38      	pop	{r3, r4, r5, pc}
    e5c2:	bf00      	nop
    e5c4:	20000168 	.word	0x20000168
    e5c8:	200002b0 	.word	0x200002b0
    e5cc:	e000ed00 	.word	0xe000ed00

0000e5d0 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
    e5d0:	b508      	push	{r3, lr}
    e5d2:	f7ff ffd9 	bl	e588 <console_flush>
    e5d6:	bd08      	pop	{r3, pc}

0000e5d8 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
    e5d8:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
    e5da:	4b12      	ldr	r3, [pc, #72]	; (e624 <console_buffer+0x4c>)
    e5dc:	781b      	ldrb	r3, [r3, #0]
    e5de:	b903      	cbnz	r3, e5e2 <console_buffer+0xa>
    //  Limit the buffer size.  Quit if too big.
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
}
    e5e0:	bd38      	pop	{r3, r4, r5, pc}
    e5e2:	460d      	mov	r5, r1
    e5e4:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
    e5e6:	f7ff ffaf 	bl	e548 <debugger_connected>
    e5ea:	2800      	cmp	r0, #0
    e5ec:	d0f8      	beq.n	e5e0 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
    e5ee:	4b0e      	ldr	r3, [pc, #56]	; (e628 <console_buffer+0x50>)
    e5f0:	681b      	ldr	r3, [r3, #0]
    e5f2:	b173      	cbz	r3, e612 <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    e5f4:	4b0c      	ldr	r3, [pc, #48]	; (e628 <console_buffer+0x50>)
    e5f6:	6818      	ldr	r0, [r3, #0]
    e5f8:	f002 fc82 	bl	10f00 <os_mbuf_len>
    e5fc:	4428      	add	r0, r5
    e5fe:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    e602:	d2ed      	bcs.n	e5e0 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    e604:	b2aa      	uxth	r2, r5
    e606:	4621      	mov	r1, r4
    e608:	4b07      	ldr	r3, [pc, #28]	; (e628 <console_buffer+0x50>)
    e60a:	6818      	ldr	r0, [r3, #0]
    e60c:	f002 fc82 	bl	10f14 <os_mbuf_append>
    e610:	e7e6      	b.n	e5e0 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
    e612:	2100      	movs	r1, #0
    e614:	b2a8      	uxth	r0, r5
    e616:	f003 f976 	bl	11906 <os_msys_get_pkthdr>
    e61a:	4b03      	ldr	r3, [pc, #12]	; (e628 <console_buffer+0x50>)
    e61c:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
    e61e:	2800      	cmp	r0, #0
    e620:	d1e8      	bne.n	e5f4 <console_buffer+0x1c>
    e622:	e7dd      	b.n	e5e0 <console_buffer+0x8>
    e624:	20000168 	.word	0x20000168
    e628:	200002b0 	.word	0x200002b0

0000e62c <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
    e62c:	b500      	push	{lr}
    e62e:	b083      	sub	sp, #12
    e630:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
    e634:	280d      	cmp	r0, #13
    e636:	d004      	beq.n	e642 <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
    e638:	2101      	movs	r1, #1
    e63a:	f10d 0007 	add.w	r0, sp, #7
    e63e:	f7ff ffcb 	bl	e5d8 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
    e642:	b003      	add	sp, #12
    e644:	f85d fb04 	ldr.w	pc, [sp], #4

0000e648 <console_printhex>:
void console_printhex(uint8_t v) {
    e648:	b510      	push	{r4, lr}
    e64a:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
    e64c:	2310      	movs	r3, #16
    int length = 0;
    e64e:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
    e650:	e005      	b.n	e65e <console_printhex+0x16>
        v = v % divisor;
    e652:	fbb0 f1f3 	udiv	r1, r0, r3
    e656:	fb03 0011 	mls	r0, r3, r1, r0
    e65a:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
    e65c:	091b      	lsrs	r3, r3, #4
    e65e:	b18b      	cbz	r3, e684 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
    e660:	fbb0 f4f3 	udiv	r4, r0, r3
    e664:	f104 0130 	add.w	r1, r4, #48	; 0x30
    e668:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
    e66a:	2939      	cmp	r1, #57	; 0x39
    e66c:	d902      	bls.n	e674 <console_printhex+0x2c>
    e66e:	f104 0157 	add.w	r1, r4, #87	; 0x57
    e672:	b2c9      	uxtb	r1, r1
            if (length < size) {
    e674:	2a02      	cmp	r2, #2
    e676:	dcec      	bgt.n	e652 <console_printhex+0xa>
                buffer[length++] = digit;
    e678:	ac02      	add	r4, sp, #8
    e67a:	4414      	add	r4, r2
    e67c:	f804 1c04 	strb.w	r1, [r4, #-4]
    e680:	3201      	adds	r2, #1
    e682:	e7e6      	b.n	e652 <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
    e684:	b92a      	cbnz	r2, e692 <console_printhex+0x4a>
    e686:	ab02      	add	r3, sp, #8
    e688:	4413      	add	r3, r2
    e68a:	2130      	movs	r1, #48	; 0x30
    e68c:	f803 1c04 	strb.w	r1, [r3, #-4]
    e690:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
    e692:	2a02      	cmp	r2, #2
    e694:	dc04      	bgt.n	e6a0 <console_printhex+0x58>
    e696:	ab02      	add	r3, sp, #8
    e698:	441a      	add	r2, r3
    e69a:	2300      	movs	r3, #0
    e69c:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
    e6a0:	2300      	movs	r3, #0
    e6a2:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
    e6a6:	a801      	add	r0, sp, #4
    e6a8:	f003 ff7a 	bl	125a0 <strlen>
    e6ac:	4601      	mov	r1, r0
    e6ae:	a801      	add	r0, sp, #4
    e6b0:	f7ff ff92 	bl	e5d8 <console_buffer>
}
    e6b4:	b002      	add	sp, #8
    e6b6:	bd10      	pop	{r4, pc}

0000e6b8 <console_printint>:
void console_printint(int i) {
    e6b8:	b508      	push	{r3, lr}
    console_printf("%d", i);
    e6ba:	4601      	mov	r1, r0
    e6bc:	4801      	ldr	r0, [pc, #4]	; (e6c4 <console_printint+0xc>)
    e6be:	f000 f873 	bl	e7a8 <console_printf>
}
    e6c2:	bd08      	pop	{r3, pc}
    e6c4:	0002be8c 	.word	0x0002be8c

0000e6c8 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
    e6c8:	b180      	cbz	r0, e6ec <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
    e6ca:	b570      	push	{r4, r5, r6, lr}
    e6cc:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
    e6ce:	b161      	cbz	r1, e6ea <console_dump+0x22>
    e6d0:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
    e6d2:	2400      	movs	r4, #0
    e6d4:	e007      	b.n	e6e6 <console_dump+0x1e>
    e6d6:	5d30      	ldrb	r0, [r6, r4]
    e6d8:	f7ff ffb6 	bl	e648 <console_printhex>
    e6dc:	2101      	movs	r1, #1
    e6de:	4804      	ldr	r0, [pc, #16]	; (e6f0 <console_dump+0x28>)
    e6e0:	f7ff ff7a 	bl	e5d8 <console_buffer>
    e6e4:	3401      	adds	r4, #1
    e6e6:	42ac      	cmp	r4, r5
    e6e8:	d3f5      	bcc.n	e6d6 <console_dump+0xe>
}
    e6ea:	bd70      	pop	{r4, r5, r6, pc}
    e6ec:	4770      	bx	lr
    e6ee:	bf00      	nop
    e6f0:	0002be88 	.word	0x0002be88

0000e6f4 <console_out_nolock>:

int console_out_nolock(int character) {
    e6f4:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
    e6f6:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
    e6f8:	4b0b      	ldr	r3, [pc, #44]	; (e728 <console_out_nolock+0x34>)
    e6fa:	781b      	ldrb	r3, [r3, #0]
    e6fc:	b953      	cbnz	r3, e714 <console_out_nolock+0x20>
    e6fe:	4604      	mov	r4, r0
    if ('\n' == c) {
    e700:	2d0a      	cmp	r5, #10
    e702:	d009      	beq.n	e718 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
    e704:	4b09      	ldr	r3, [pc, #36]	; (e72c <console_out_nolock+0x38>)
    e706:	2201      	movs	r2, #1
    e708:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
    e70a:	4628      	mov	r0, r5
    e70c:	f7ff ff8e 	bl	e62c <semihosting_console_write_ch>
    return character;
    e710:	4620      	mov	r0, r4
}
    e712:	bd38      	pop	{r3, r4, r5, pc}
    e714:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
    e716:	e7fc      	b.n	e712 <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
    e718:	200d      	movs	r0, #13
    e71a:	f7ff ff87 	bl	e62c <semihosting_console_write_ch>
        console_is_midline = 0;
    e71e:	4b03      	ldr	r3, [pc, #12]	; (e72c <console_out_nolock+0x38>)
    e720:	2200      	movs	r2, #0
    e722:	601a      	str	r2, [r3, #0]
    e724:	e7f1      	b.n	e70a <console_out_nolock+0x16>
    e726:	bf00      	nop
    e728:	20003b69 	.word	0x20003b69
    e72c:	20003b64 	.word	0x20003b64

0000e730 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
    e730:	2000      	movs	r0, #0
    e732:	4770      	bx	lr

0000e734 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
    e734:	b570      	push	{r4, r5, r6, lr}
    e736:	4606      	mov	r6, r0
    e738:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
    e73a:	2400      	movs	r4, #0
    e73c:	42ac      	cmp	r4, r5
    e73e:	da07      	bge.n	e750 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
    e740:	5d30      	ldrb	r0, [r6, r4]
    e742:	f7ff ffd7 	bl	e6f4 <console_out_nolock>
    e746:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    e74a:	d001      	beq.n	e750 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
    e74c:	3401      	adds	r4, #1
    e74e:	e7f5      	b.n	e73c <console_write+0x8>
    }
}
    e750:	bd70      	pop	{r4, r5, r6, pc}

0000e752 <console_blocking_mode>:

void console_blocking_mode(void) {
    e752:	b508      	push	{r3, lr}
    disable_buffer();
    e754:	f7ff ff3c 	bl	e5d0 <disable_buffer>
}
    e758:	bd08      	pop	{r3, pc}
	...

0000e75c <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
    e75c:	b510      	push	{r4, lr}
    e75e:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    e760:	4b0d      	ldr	r3, [pc, #52]	; (e798 <console_pkg_init+0x3c>)
    e762:	781b      	ldrb	r3, [r3, #0]
    e764:	b193      	cbz	r3, e78c <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
    e766:	480d      	ldr	r0, [pc, #52]	; (e79c <console_pkg_init+0x40>)
    e768:	f002 fa8c 	bl	10c84 <os_eventq_init>
    os_mutex_init(&console_write_lock);
    e76c:	480c      	ldr	r0, [pc, #48]	; (e7a0 <console_pkg_init+0x44>)
    e76e:	f003 f8f9 	bl	11964 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
    e772:	f7ff ffdd 	bl	e730 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
    e776:	b138      	cbz	r0, e788 <console_pkg_init+0x2c>
    e778:	2000      	movs	r0, #0
    e77a:	9000      	str	r0, [sp, #0]
    e77c:	4b09      	ldr	r3, [pc, #36]	; (e7a4 <console_pkg_init+0x48>)
    e77e:	681c      	ldr	r4, [r3, #0]
    e780:	4603      	mov	r3, r0
    e782:	4602      	mov	r2, r0
    e784:	4601      	mov	r1, r0
    e786:	47a0      	blx	r4
}
    e788:	b002      	add	sp, #8
    e78a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    e78c:	461a      	mov	r2, r3
    e78e:	4619      	mov	r1, r3
    e790:	4618      	mov	r0, r3
    e792:	f001 ff23 	bl	105dc <__assert_func>
    e796:	bf00      	nop
    e798:	20003bf0 	.word	0x20003bf0
    e79c:	200002b4 	.word	0x200002b4
    e7a0:	200002c4 	.word	0x200002c4
    e7a4:	20000180 	.word	0x20000180

0000e7a8 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    e7a8:	b40f      	push	{r0, r1, r2, r3}
    e7aa:	b510      	push	{r4, lr}
    e7ac:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    e7ae:	f000 f81f 	bl	e7f0 <console_get_ticks>
    e7b2:	b160      	cbz	r0, e7ce <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    e7b4:	4b0c      	ldr	r3, [pc, #48]	; (e7e8 <console_printf+0x40>)
    e7b6:	681b      	ldr	r3, [r3, #0]
    e7b8:	b10b      	cbz	r3, e7be <console_printf+0x16>
    num_chars = 0;
    e7ba:	2400      	movs	r4, #0
    e7bc:	e008      	b.n	e7d0 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    e7be:	f003 fcbd 	bl	1213c <os_time_get>
    e7c2:	4601      	mov	r1, r0
    e7c4:	4809      	ldr	r0, [pc, #36]	; (e7ec <console_printf+0x44>)
    e7c6:	f004 f99d 	bl	12b04 <printf>
    e7ca:	4604      	mov	r4, r0
    e7cc:	e000      	b.n	e7d0 <console_printf+0x28>
    num_chars = 0;
    e7ce:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
    e7d0:	a905      	add	r1, sp, #20
    e7d2:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
    e7d4:	9804      	ldr	r0, [sp, #16]
    e7d6:	f004 f9c5 	bl	12b64 <vprintf>
    va_end(args);

    return num_chars;
}
    e7da:	4420      	add	r0, r4
    e7dc:	b002      	add	sp, #8
    e7de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7e2:	b004      	add	sp, #16
    e7e4:	4770      	bx	lr
    e7e6:	bf00      	nop
    e7e8:	20003b64 	.word	0x20003b64
    e7ec:	0002be90 	.word	0x0002be90

0000e7f0 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    e7f0:	4b01      	ldr	r3, [pc, #4]	; (e7f8 <console_get_ticks+0x8>)
    e7f2:	7818      	ldrb	r0, [r3, #0]
    e7f4:	4770      	bx	lr
    e7f6:	bf00      	nop
    e7f8:	200002d0 	.word	0x200002d0

0000e7fc <split_float>:
    return (rc);
}

///  Split the float f into 3 parts: neg is true if negative, the absolute integer part i, and the decimal part d, with 6 decimal places.
static void split_float(float f, bool *neg, int *i, int *d) {
    *neg = (f < 0.0f);                    //  True if f is negative
    e7fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    e800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    e804:	bf4c      	ite	mi
    e806:	2301      	movmi	r3, #1
    e808:	2300      	movpl	r3, #0
    e80a:	7003      	strb	r3, [r0, #0]
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    e80c:	b10b      	cbz	r3, e812 <split_float+0x16>
    e80e:	eeb1 0a40 	vneg.f32	s0, s0
    *i = (int) f_abs;                     //  Integer part
    e812:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    e816:	edc1 7a00 	vstr	s15, [r1]
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  Six decimal places
    e81a:	eddf 7a09 	vldr	s15, [pc, #36]	; e840 <split_float+0x44>
    e81e:	ee20 0a27 	vmul.f32	s0, s0, s15
    e822:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    e826:	ee17 3a90 	vmov	r3, s15
    e82a:	4806      	ldr	r0, [pc, #24]	; (e844 <split_float+0x48>)
    e82c:	fb80 1003 	smull	r1, r0, r0, r3
    e830:	17d9      	asrs	r1, r3, #31
    e832:	ebc1 41a0 	rsb	r1, r1, r0, asr #18
    e836:	4804      	ldr	r0, [pc, #16]	; (e848 <split_float+0x4c>)
    e838:	fb00 3111 	mls	r1, r0, r1, r3
    e83c:	6011      	str	r1, [r2, #0]
}
    e83e:	4770      	bx	lr
    e840:	49742400 	.word	0x49742400
    e844:	431bde83 	.word	0x431bde83
    e848:	000f4240 	.word	0x000f4240

0000e84c <handle_coap_response>:
static void handle_coap_response(oc_client_response_t *data) {
    e84c:	b508      	push	{r3, lr}
    console_printf("handle_coap\n");
    e84e:	4802      	ldr	r0, [pc, #8]	; (e858 <handle_coap_response+0xc>)
    e850:	f7ff ffaa 	bl	e7a8 <console_printf>
}
    e854:	bd08      	pop	{r3, pc}
    e856:	bf00      	nop
    e858:	0002be98 	.word	0x0002be98

0000e85c <json_write_mbuf>:
int json_write_mbuf(void *buf, char *data, int len) {
    e85c:	b508      	push	{r3, lr}
    if (oc_content_format != APPLICATION_JSON) { return 0; }  //  Exit if we are encoding CBOR, not JSON.
    e85e:	4b10      	ldr	r3, [pc, #64]	; (e8a0 <json_write_mbuf+0x44>)
    e860:	681b      	ldr	r3, [r3, #0]
    e862:	2b32      	cmp	r3, #50	; 0x32
    e864:	d001      	beq.n	e86a <json_write_mbuf+0xe>
}
    e866:	2000      	movs	r0, #0
    e868:	bd08      	pop	{r3, pc}
    assert(coap_json_mbuf);
    e86a:	4b0e      	ldr	r3, [pc, #56]	; (e8a4 <json_write_mbuf+0x48>)
    e86c:	6818      	ldr	r0, [r3, #0]
    e86e:	b158      	cbz	r0, e888 <json_write_mbuf+0x2c>
    assert(data);
    e870:	b181      	cbz	r1, e894 <json_write_mbuf+0x38>
    int rc = os_mbuf_append(coap_json_mbuf, data, len);  assert(rc == 0);
    e872:	b292      	uxth	r2, r2
    e874:	f002 fb4e 	bl	10f14 <os_mbuf_append>
    e878:	2800      	cmp	r0, #0
    e87a:	d0f4      	beq.n	e866 <json_write_mbuf+0xa>
    e87c:	2300      	movs	r3, #0
    e87e:	461a      	mov	r2, r3
    e880:	4619      	mov	r1, r3
    e882:	4618      	mov	r0, r3
    e884:	f001 feaa 	bl	105dc <__assert_func>
    assert(coap_json_mbuf);
    e888:	2300      	movs	r3, #0
    e88a:	461a      	mov	r2, r3
    e88c:	4619      	mov	r1, r3
    e88e:	4618      	mov	r0, r3
    e890:	f001 fea4 	bl	105dc <__assert_func>
    assert(data);
    e894:	2300      	movs	r3, #0
    e896:	461a      	mov	r2, r3
    e898:	4619      	mov	r1, r3
    e89a:	4618      	mov	r0, r3
    e89c:	f001 fe9e 	bl	105dc <__assert_func>
    e8a0:	2000034c 	.word	0x2000034c
    e8a4:	200002d4 	.word	0x200002d4

0000e8a8 <json_encode_value_ext>:
{
    e8a8:	b530      	push	{r4, r5, lr}
    e8aa:	b087      	sub	sp, #28
    assert(encoder);  assert(jv);
    e8ac:	b310      	cbz	r0, e8f4 <json_encode_value_ext+0x4c>
    e8ae:	460b      	mov	r3, r1
    e8b0:	4604      	mov	r4, r0
    e8b2:	b329      	cbz	r1, e900 <json_encode_value_ext+0x58>
    switch (jv->jv_type) {
    e8b4:	784a      	ldrb	r2, [r1, #1]
    e8b6:	2a06      	cmp	r2, #6
    e8b8:	d128      	bne.n	e90c <json_encode_value_ext+0x64>
            split_float(f, &neg, &i, &d);  //  Split the float into neg, integer and decimal parts (6 decimal places)
    e8ba:	aa05      	add	r2, sp, #20
    e8bc:	a904      	add	r1, sp, #16
    e8be:	f10d 000f 	add.w	r0, sp, #15
    e8c2:	ed93 0a02 	vldr	s0, [r3, #8]
    e8c6:	f7ff ff99 	bl	e7fc <split_float>
                encoder->je_encode_buf,
    e8ca:	f104 0509 	add.w	r5, r4, #9
                neg ? "-" : "",  //  Sign
    e8ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
            len = sprintf(
    e8d2:	b1cb      	cbz	r3, e908 <json_encode_value_ext+0x60>
    e8d4:	4a0f      	ldr	r2, [pc, #60]	; (e914 <json_encode_value_ext+0x6c>)
    e8d6:	9b05      	ldr	r3, [sp, #20]
    e8d8:	9300      	str	r3, [sp, #0]
    e8da:	9b04      	ldr	r3, [sp, #16]
    e8dc:	490e      	ldr	r1, [pc, #56]	; (e918 <json_encode_value_ext+0x70>)
    e8de:	4628      	mov	r0, r5
    e8e0:	f003 fe35 	bl	1254e <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
    e8e4:	6823      	ldr	r3, [r4, #0]
    e8e6:	4602      	mov	r2, r0
    e8e8:	4629      	mov	r1, r5
    e8ea:	6860      	ldr	r0, [r4, #4]
    e8ec:	4798      	blx	r3
    return (0);
    e8ee:	2000      	movs	r0, #0
}
    e8f0:	b007      	add	sp, #28
    e8f2:	bd30      	pop	{r4, r5, pc}
    assert(encoder);  assert(jv);
    e8f4:	2300      	movs	r3, #0
    e8f6:	461a      	mov	r2, r3
    e8f8:	4619      	mov	r1, r3
    e8fa:	4618      	mov	r0, r3
    e8fc:	f001 fe6e 	bl	105dc <__assert_func>
    e900:	460a      	mov	r2, r1
    e902:	4608      	mov	r0, r1
    e904:	f001 fe6a 	bl	105dc <__assert_func>
            len = sprintf(
    e908:	4a04      	ldr	r2, [pc, #16]	; (e91c <json_encode_value_ext+0x74>)
    e90a:	e7e4      	b.n	e8d6 <json_encode_value_ext+0x2e>
    return (rc);
    e90c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e910:	e7ee      	b.n	e8f0 <json_encode_value_ext+0x48>
    e912:	bf00      	nop
    e914:	0002beb4 	.word	0x0002beb4
    e918:	0002beb8 	.word	0x0002beb8
    e91c:	0002bed8 	.word	0x0002bed8

0000e920 <init_sensor_coap>:
void init_sensor_coap(void) {
    e920:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
    e922:	2101      	movs	r1, #1
    e924:	4806      	ldr	r0, [pc, #24]	; (e940 <init_sensor_coap+0x20>)
    e926:	f003 faa7 	bl	11e78 <os_sem_init>
    assert(rc == OS_OK);
    e92a:	b918      	cbnz	r0, e934 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
    e92c:	4b05      	ldr	r3, [pc, #20]	; (e944 <init_sensor_coap+0x24>)
    e92e:	2201      	movs	r2, #1
    e930:	701a      	strb	r2, [r3, #0]
}
    e932:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
    e934:	2300      	movs	r3, #0
    e936:	461a      	mov	r2, r3
    e938:	4619      	mov	r1, r3
    e93a:	4618      	mov	r0, r3
    e93c:	f001 fe4e 	bl	105dc <__assert_func>
    e940:	20000350 	.word	0x20000350
    e944:	20000358 	.word	0x20000358

0000e948 <init_sensor_post>:
{
    e948:	b508      	push	{r3, lr}
    assert(oc_sensor_coap_ready);  assert(server);
    e94a:	4b0e      	ldr	r3, [pc, #56]	; (e984 <init_sensor_post+0x3c>)
    e94c:	781b      	ldrb	r3, [r3, #0]
    e94e:	b143      	cbz	r3, e962 <init_sensor_post+0x1a>
    e950:	b160      	cbz	r0, e96c <init_sensor_post+0x24>
    os_error_t rc = os_sem_pend(&oc_sem, OS_TIMEOUT_NEVER);  //  Allow only 1 task to be creating a sensor request at any time.
    e952:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e956:	480c      	ldr	r0, [pc, #48]	; (e988 <init_sensor_post+0x40>)
    e958:	f003 fac8 	bl	11eec <os_sem_pend>
    assert(rc == OS_OK);
    e95c:	b960      	cbnz	r0, e978 <init_sensor_post+0x30>
}
    e95e:	2001      	movs	r0, #1
    e960:	bd08      	pop	{r3, pc}
    assert(oc_sensor_coap_ready);  assert(server);
    e962:	461a      	mov	r2, r3
    e964:	4619      	mov	r1, r3
    e966:	4618      	mov	r0, r3
    e968:	f001 fe38 	bl	105dc <__assert_func>
    e96c:	2300      	movs	r3, #0
    e96e:	461a      	mov	r2, r3
    e970:	4619      	mov	r1, r3
    e972:	4618      	mov	r0, r3
    e974:	f001 fe32 	bl	105dc <__assert_func>
    assert(rc == OS_OK);
    e978:	2300      	movs	r3, #0
    e97a:	461a      	mov	r2, r3
    e97c:	4619      	mov	r1, r3
    e97e:	4618      	mov	r0, r3
    e980:	f001 fe2c 	bl	105dc <__assert_func>
    e984:	20000358 	.word	0x20000358
    e988:	20000350 	.word	0x20000350

0000e98c <json_rep_reset>:
void json_rep_reset(void) {
    e98c:	b510      	push	{r4, lr}
    coap_json_mbuf = NULL;
    e98e:	2100      	movs	r1, #0
    e990:	4b05      	ldr	r3, [pc, #20]	; (e9a8 <json_rep_reset+0x1c>)
    e992:	6019      	str	r1, [r3, #0]
    memset(&coap_json_encoder, 0, sizeof(coap_json_encoder));  //  Erase the encoder.
    e994:	4c05      	ldr	r4, [pc, #20]	; (e9ac <json_rep_reset+0x20>)
    e996:	2248      	movs	r2, #72	; 0x48
    e998:	4620      	mov	r0, r4
    e99a:	f003 fdbc 	bl	12516 <memset>
    coap_json_encoder.je_write = json_write_mbuf;
    e99e:	4b04      	ldr	r3, [pc, #16]	; (e9b0 <json_rep_reset+0x24>)
    e9a0:	f844 3c04 	str.w	r3, [r4, #-4]
}
    e9a4:	bd10      	pop	{r4, pc}
    e9a6:	bf00      	nop
    e9a8:	200002d4 	.word	0x200002d4
    e9ac:	20003b74 	.word	0x20003b74
    e9b0:	0000e85d 	.word	0x0000e85d

0000e9b4 <json_rep_new>:
void json_rep_new(struct os_mbuf *m) {
    e9b4:	b510      	push	{r4, lr}
    assert(m);
    e9b6:	b128      	cbz	r0, e9c4 <json_rep_new+0x10>
    e9b8:	4604      	mov	r4, r0
    json_rep_reset();  //  Erase the JSON encoder.
    e9ba:	f7ff ffe7 	bl	e98c <json_rep_reset>
    coap_json_mbuf = m;
    e9be:	4b04      	ldr	r3, [pc, #16]	; (e9d0 <json_rep_new+0x1c>)
    e9c0:	601c      	str	r4, [r3, #0]
}
    e9c2:	bd10      	pop	{r4, pc}
    assert(m);
    e9c4:	2300      	movs	r3, #0
    e9c6:	461a      	mov	r2, r3
    e9c8:	4619      	mov	r1, r3
    e9ca:	4618      	mov	r0, r3
    e9cc:	f001 fe06 	bl	105dc <__assert_func>
    e9d0:	200002d4 	.word	0x200002d4

0000e9d4 <prepare_coap_request>:
{
    e9d4:	b570      	push	{r4, r5, r6, lr}
    e9d6:	4604      	mov	r4, r0
    e9d8:	460e      	mov	r6, r1
    oc_c_rsp = os_msys_get_pkthdr(0, 0);
    e9da:	2100      	movs	r1, #0
    e9dc:	4608      	mov	r0, r1
    e9de:	f002 ff92 	bl	11906 <os_msys_get_pkthdr>
    e9e2:	4b31      	ldr	r3, [pc, #196]	; (eaa8 <prepare_coap_request+0xd4>)
    e9e4:	6018      	str	r0, [r3, #0]
    if (!oc_c_rsp) {
    e9e6:	2800      	cmp	r0, #0
    e9e8:	d05b      	beq.n	eaa2 <prepare_coap_request+0xce>
    oc_c_message = oc_allocate_mbuf(&cb->server.endpoint);
    e9ea:	f104 0038 	add.w	r0, r4, #56	; 0x38
    e9ee:	f000 fb5d 	bl	f0ac <oc_allocate_mbuf>
    e9f2:	4b2e      	ldr	r3, [pc, #184]	; (eaac <prepare_coap_request+0xd8>)
    e9f4:	6018      	str	r0, [r3, #0]
    if (!oc_c_message) {
    e9f6:	2800      	cmp	r0, #0
    e9f8:	d04c      	beq.n	ea94 <prepare_coap_request+0xc0>
    if (oc_content_format == APPLICATION_JSON) { 
    e9fa:	4b2d      	ldr	r3, [pc, #180]	; (eab0 <prepare_coap_request+0xdc>)
    e9fc:	681b      	ldr	r3, [r3, #0]
    e9fe:	2b32      	cmp	r3, #50	; 0x32
    ea00:	d027      	beq.n	ea52 <prepare_coap_request+0x7e>
    else if (oc_content_format == APPLICATION_CBOR) { 
    ea02:	2b3c      	cmp	r3, #60	; 0x3c
    ea04:	d12a      	bne.n	ea5c <prepare_coap_request+0x88>
    coap_init_message(oc_c_request, type, cb->method, cb->mid);
    ea06:	4d2b      	ldr	r5, [pc, #172]	; (eab4 <prepare_coap_request+0xe0>)
    ea08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    ea0a:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
    ea0e:	2101      	movs	r1, #1
    ea10:	4628      	mov	r0, r5
    ea12:	f000 fd3d 	bl	f490 <coap_init_message>
    coap_set_header_accept(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
    ea16:	4b26      	ldr	r3, [pc, #152]	; (eab0 <prepare_coap_request+0xdc>)
    ea18:	6819      	ldr	r1, [r3, #0]
    ea1a:	4628      	mov	r0, r5
    ea1c:	f000 ff0c 	bl	f838 <coap_set_header_accept>
    coap_set_token(oc_c_request, cb->token, cb->token_len);
    ea20:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
    ea24:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    ea28:	4628      	mov	r0, r5
    ea2a:	f000 fef2 	bl	f812 <coap_set_token>
    coap_set_header_uri_path(oc_c_request, oc_string(cb->uri));
    ea2e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    ea30:	4628      	mov	r0, r5
    ea32:	f000 ff08 	bl	f846 <coap_set_header_uri_path>
    if (cb->observe_seq != -1) {
    ea36:	6da1      	ldr	r1, [r4, #88]	; 0x58
    ea38:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    ea3c:	d114      	bne.n	ea68 <prepare_coap_request+0x94>
    if (query && oc_string_len(*query)) {
    ea3e:	b116      	cbz	r6, ea46 <prepare_coap_request+0x72>
    ea40:	8833      	ldrh	r3, [r6, #0]
    ea42:	2b01      	cmp	r3, #1
    ea44:	d814      	bhi.n	ea70 <prepare_coap_request+0x9c>
    if (cb->observe_seq == -1 && cb->qos == LOW_QOS) {
    ea46:	6da3      	ldr	r3, [r4, #88]	; 0x58
    ea48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ea4c:	d015      	beq.n	ea7a <prepare_coap_request+0xa6>
    return true;
    ea4e:	2001      	movs	r0, #1
    ea50:	e028      	b.n	eaa4 <prepare_coap_request+0xd0>
        json_rep_new(oc_c_rsp); 
    ea52:	4b15      	ldr	r3, [pc, #84]	; (eaa8 <prepare_coap_request+0xd4>)
    ea54:	6818      	ldr	r0, [r3, #0]
    ea56:	f7ff ffad 	bl	e9b4 <json_rep_new>
    ea5a:	e7d4      	b.n	ea06 <prepare_coap_request+0x32>
    else { assert(0); }  //  Unknown CoAP content format.
    ea5c:	2300      	movs	r3, #0
    ea5e:	461a      	mov	r2, r3
    ea60:	4619      	mov	r1, r3
    ea62:	4618      	mov	r0, r3
    ea64:	f001 fdba 	bl	105dc <__assert_func>
        coap_set_header_observe(oc_c_request, cb->observe_seq);
    ea68:	4628      	mov	r0, r5
    ea6a:	f000 ff11 	bl	f890 <coap_set_header_observe>
    ea6e:	e7e6      	b.n	ea3e <prepare_coap_request+0x6a>
        coap_set_header_uri_query(oc_c_request, oc_string(*query));
    ea70:	6871      	ldr	r1, [r6, #4]
    ea72:	4810      	ldr	r0, [pc, #64]	; (eab4 <prepare_coap_request+0xe0>)
    ea74:	f000 fef9 	bl	f86a <coap_set_header_uri_query>
    ea78:	e7e5      	b.n	ea46 <prepare_coap_request+0x72>
    if (cb->observe_seq == -1 && cb->qos == LOW_QOS) {
    ea7a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    ea7e:	2b01      	cmp	r3, #1
    ea80:	d001      	beq.n	ea86 <prepare_coap_request+0xb2>
    return true;
    ea82:	2001      	movs	r0, #1
    ea84:	e00e      	b.n	eaa4 <prepare_coap_request+0xd0>
        os_callout_reset(&cb->callout,
    ea86:	f44f 7100 	mov.w	r1, #512	; 0x200
    ea8a:	1d20      	adds	r0, r4, #4
    ea8c:	f001 ff4c 	bl	10928 <os_callout_reset>
    return true;
    ea90:	2001      	movs	r0, #1
    ea92:	e007      	b.n	eaa4 <prepare_coap_request+0xd0>
    os_mbuf_free_chain(oc_c_rsp);
    ea94:	4c04      	ldr	r4, [pc, #16]	; (eaa8 <prepare_coap_request+0xd4>)
    ea96:	6820      	ldr	r0, [r4, #0]
    ea98:	f002 fa20 	bl	10edc <os_mbuf_free_chain>
    oc_c_rsp = NULL;
    ea9c:	2000      	movs	r0, #0
    ea9e:	6020      	str	r0, [r4, #0]
    return false;
    eaa0:	e000      	b.n	eaa4 <prepare_coap_request+0xd0>
        return false;
    eaa2:	2000      	movs	r0, #0
}
    eaa4:	bd70      	pop	{r4, r5, r6, pc}
    eaa6:	bf00      	nop
    eaa8:	20000348 	.word	0x20000348
    eaac:	200002d8 	.word	0x200002d8
    eab0:	2000034c 	.word	0x2000034c
    eab4:	200002dc 	.word	0x200002dc

0000eab8 <prepare_sensor_post>:
{
    eab8:	b510      	push	{r4, lr}
    eaba:	b082      	sub	sp, #8
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
    eabc:	4b1a      	ldr	r3, [pc, #104]	; (eb28 <prepare_sensor_post+0x70>)
    eabe:	781b      	ldrb	r3, [r3, #0]
    eac0:	b1a3      	cbz	r3, eaec <prepare_sensor_post+0x34>
    eac2:	460c      	mov	r4, r1
    eac4:	b1b8      	cbz	r0, eaf6 <prepare_sensor_post+0x3e>
    eac6:	b1e1      	cbz	r1, eb02 <prepare_sensor_post+0x4a>
    if (coap_content_format == 0) { coap_content_format = COAP_CONTENT_FORMAT; }
    eac8:	b902      	cbnz	r2, eacc <prepare_sensor_post+0x14>
    eaca:	2232      	movs	r2, #50	; 0x32
    oc_content_format = coap_content_format;
    eacc:	4b17      	ldr	r3, [pc, #92]	; (eb2c <prepare_sensor_post+0x74>)
    eace:	601a      	str	r2, [r3, #0]
    cb = oc_ri_alloc_client_cb(uri, server, OC_POST, handler, qos);
    ead0:	2301      	movs	r3, #1
    ead2:	9300      	str	r3, [sp, #0]
    ead4:	4b16      	ldr	r3, [pc, #88]	; (eb30 <prepare_sensor_post+0x78>)
    ead6:	2202      	movs	r2, #2
    ead8:	4601      	mov	r1, r0
    eada:	4620      	mov	r0, r4
    eadc:	f000 fb90 	bl	f200 <oc_ri_alloc_client_cb>
    if (!cb) {
    eae0:	b1a8      	cbz	r0, eb0e <prepare_sensor_post+0x56>
    status = prepare_coap_request(cb, NULL);
    eae2:	2100      	movs	r1, #0
    eae4:	f7ff ff76 	bl	e9d4 <prepare_coap_request>
}
    eae8:	b002      	add	sp, #8
    eaea:	bd10      	pop	{r4, pc}
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
    eaec:	461a      	mov	r2, r3
    eaee:	4619      	mov	r1, r3
    eaf0:	4618      	mov	r0, r3
    eaf2:	f001 fd73 	bl	105dc <__assert_func>
    eaf6:	2300      	movs	r3, #0
    eaf8:	461a      	mov	r2, r3
    eafa:	4619      	mov	r1, r3
    eafc:	4618      	mov	r0, r3
    eafe:	f001 fd6d 	bl	105dc <__assert_func>
    eb02:	2300      	movs	r3, #0
    eb04:	461a      	mov	r2, r3
    eb06:	4619      	mov	r1, r3
    eb08:	4618      	mov	r0, r3
    eb0a:	f001 fd67 	bl	105dc <__assert_func>
        os_error_t rc = os_sem_release(&oc_sem);  //  Failed.  Release the semaphore.
    eb0e:	4809      	ldr	r0, [pc, #36]	; (eb34 <prepare_sensor_post+0x7c>)
    eb10:	f003 f9ba 	bl	11e88 <os_sem_release>
        assert(rc == OS_OK);
    eb14:	b908      	cbnz	r0, eb1a <prepare_sensor_post+0x62>
        return false;
    eb16:	2000      	movs	r0, #0
    eb18:	e7e6      	b.n	eae8 <prepare_sensor_post+0x30>
        assert(rc == OS_OK);
    eb1a:	2300      	movs	r3, #0
    eb1c:	461a      	mov	r2, r3
    eb1e:	4619      	mov	r1, r3
    eb20:	4618      	mov	r0, r3
    eb22:	f001 fd5b 	bl	105dc <__assert_func>
    eb26:	bf00      	nop
    eb28:	20000358 	.word	0x20000358
    eb2c:	2000034c 	.word	0x2000034c
    eb30:	0000e84d 	.word	0x0000e84d
    eb34:	20000350 	.word	0x20000350

0000eb38 <json_rep_finalize>:
int json_rep_finalize(void) {
    eb38:	b538      	push	{r3, r4, r5, lr}
    assert(coap_json_mbuf);
    eb3a:	4b10      	ldr	r3, [pc, #64]	; (eb7c <json_rep_finalize+0x44>)
    eb3c:	681b      	ldr	r3, [r3, #0]
    eb3e:	b13b      	cbz	r3, eb50 <json_rep_finalize+0x18>
    int size = OS_MBUF_PKTLEN(coap_json_mbuf);
    eb40:	8a1d      	ldrh	r5, [r3, #16]
    console_printf("NET payload size %d\n", size); struct os_mbuf *m = coap_json_mbuf;
    eb42:	4629      	mov	r1, r5
    eb44:	480e      	ldr	r0, [pc, #56]	; (eb80 <json_rep_finalize+0x48>)
    eb46:	f7ff fe2f 	bl	e7a8 <console_printf>
    eb4a:	4b0c      	ldr	r3, [pc, #48]	; (eb7c <json_rep_finalize+0x44>)
    eb4c:	681c      	ldr	r4, [r3, #0]
    while (m) {
    eb4e:	e00c      	b.n	eb6a <json_rep_finalize+0x32>
    assert(coap_json_mbuf);
    eb50:	461a      	mov	r2, r3
    eb52:	4619      	mov	r1, r3
    eb54:	4618      	mov	r0, r3
    eb56:	f001 fd41 	bl	105dc <__assert_func>
        console_buffer((const char *) (m->om_databuf + m->om_pkthdr_len), m->om_len);
    eb5a:	f104 0010 	add.w	r0, r4, #16
    eb5e:	7963      	ldrb	r3, [r4, #5]
    eb60:	88e1      	ldrh	r1, [r4, #6]
    eb62:	4418      	add	r0, r3
    eb64:	f7ff fd38 	bl	e5d8 <console_buffer>
        m = m->om_next.sle_next;
    eb68:	68e4      	ldr	r4, [r4, #12]
    while (m) {
    eb6a:	2c00      	cmp	r4, #0
    eb6c:	d1f5      	bne.n	eb5a <json_rep_finalize+0x22>
    } console_printf("\n");
    eb6e:	4805      	ldr	r0, [pc, #20]	; (eb84 <json_rep_finalize+0x4c>)
    eb70:	f7ff fe1a 	bl	e7a8 <console_printf>
    json_rep_reset();
    eb74:	f7ff ff0a 	bl	e98c <json_rep_reset>
}
    eb78:	4628      	mov	r0, r5
    eb7a:	bd38      	pop	{r3, r4, r5, pc}
    eb7c:	200002d4 	.word	0x200002d4
    eb80:	0002bec4 	.word	0x0002bec4
    eb84:	0002c060 	.word	0x0002c060

0000eb88 <dispatch_coap_request>:
{
    eb88:	b510      	push	{r4, lr}
    assert(oc_content_format);
    eb8a:	4b24      	ldr	r3, [pc, #144]	; (ec1c <dispatch_coap_request+0x94>)
    eb8c:	681b      	ldr	r3, [r3, #0]
    eb8e:	b31b      	cbz	r3, ebd8 <dispatch_coap_request+0x50>
        (oc_content_format == APPLICATION_JSON) ? json_rep_finalize() :
    eb90:	2b32      	cmp	r3, #50	; 0x32
    eb92:	d026      	beq.n	ebe2 <dispatch_coap_request+0x5a>
        os_mbuf_free_chain(oc_c_rsp);
    eb94:	4b22      	ldr	r3, [pc, #136]	; (ec20 <dispatch_coap_request+0x98>)
    eb96:	6818      	ldr	r0, [r3, #0]
    eb98:	f002 f9a0 	bl	10edc <os_mbuf_free_chain>
    oc_c_rsp = NULL;
    eb9c:	4b20      	ldr	r3, [pc, #128]	; (ec20 <dispatch_coap_request+0x98>)
    eb9e:	2200      	movs	r2, #0
    eba0:	601a      	str	r2, [r3, #0]
    if (oc_c_message) {
    eba2:	4b20      	ldr	r3, [pc, #128]	; (ec24 <dispatch_coap_request+0x9c>)
    eba4:	6819      	ldr	r1, [r3, #0]
    eba6:	2900      	cmp	r1, #0
    eba8:	d030      	beq.n	ec0c <dispatch_coap_request+0x84>
        if (!coap_serialize_message(oc_c_request, oc_c_message)) {
    ebaa:	481f      	ldr	r0, [pc, #124]	; (ec28 <dispatch_coap_request+0xa0>)
    ebac:	f000 fc7e 	bl	f4ac <coap_serialize_message>
    ebb0:	bb38      	cbnz	r0, ec02 <dispatch_coap_request+0x7a>
            coap_send_message(oc_c_message, 0);
    ebb2:	2100      	movs	r1, #0
    ebb4:	4b1b      	ldr	r3, [pc, #108]	; (ec24 <dispatch_coap_request+0x9c>)
    ebb6:	6818      	ldr	r0, [r3, #0]
    ebb8:	f000 fe20 	bl	f7fc <coap_send_message>
        oc_ri_remove_client_cb_by_mid(oc_c_request->mid);
    ebbc:	4b1a      	ldr	r3, [pc, #104]	; (ec28 <dispatch_coap_request+0xa0>)
    ebbe:	8898      	ldrh	r0, [r3, #4]
    ebc0:	f000 fb0e 	bl	f1e0 <oc_ri_remove_client_cb_by_mid>
        oc_c_message = NULL;
    ebc4:	4b17      	ldr	r3, [pc, #92]	; (ec24 <dispatch_coap_request+0x9c>)
    ebc6:	2200      	movs	r2, #0
    ebc8:	601a      	str	r2, [r3, #0]
        ret = true;
    ebca:	2401      	movs	r4, #1
    os_error_t rc = os_sem_release(&oc_sem);  //  Request completed.  Release the semaphore for another request.
    ebcc:	4817      	ldr	r0, [pc, #92]	; (ec2c <dispatch_coap_request+0xa4>)
    ebce:	f003 f95b 	bl	11e88 <os_sem_release>
    assert(rc == OS_OK);
    ebd2:	b9e8      	cbnz	r0, ec10 <dispatch_coap_request+0x88>
}
    ebd4:	4620      	mov	r0, r4
    ebd6:	bd10      	pop	{r4, pc}
    assert(oc_content_format);
    ebd8:	461a      	mov	r2, r3
    ebda:	4619      	mov	r1, r3
    ebdc:	4618      	mov	r0, r3
    ebde:	f001 fcfd 	bl	105dc <__assert_func>
        (oc_content_format == APPLICATION_JSON) ? json_rep_finalize() :
    ebe2:	f7ff ffa9 	bl	eb38 <json_rep_finalize>
    if (response_length) {
    ebe6:	4603      	mov	r3, r0
    ebe8:	2800      	cmp	r0, #0
    ebea:	d0d3      	beq.n	eb94 <dispatch_coap_request+0xc>
        oc_c_request->payload_m = oc_c_rsp;
    ebec:	480e      	ldr	r0, [pc, #56]	; (ec28 <dispatch_coap_request+0xa0>)
    ebee:	4a0c      	ldr	r2, [pc, #48]	; (ec20 <dispatch_coap_request+0x98>)
    ebf0:	6812      	ldr	r2, [r2, #0]
    ebf2:	6682      	str	r2, [r0, #104]	; 0x68
        oc_c_request->payload_len = response_length;
    ebf4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
        coap_set_header_content_format(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
    ebf8:	4b08      	ldr	r3, [pc, #32]	; (ec1c <dispatch_coap_request+0x94>)
    ebfa:	6819      	ldr	r1, [r3, #0]
    ebfc:	f000 fe15 	bl	f82a <coap_set_header_content_format>
    ec00:	e7cc      	b.n	eb9c <dispatch_coap_request+0x14>
            os_mbuf_free_chain(oc_c_message);
    ec02:	4b08      	ldr	r3, [pc, #32]	; (ec24 <dispatch_coap_request+0x9c>)
    ec04:	6818      	ldr	r0, [r3, #0]
    ec06:	f002 f969 	bl	10edc <os_mbuf_free_chain>
    ec0a:	e7d7      	b.n	ebbc <dispatch_coap_request+0x34>
    bool ret = false;
    ec0c:	2400      	movs	r4, #0
    ec0e:	e7dd      	b.n	ebcc <dispatch_coap_request+0x44>
    assert(rc == OS_OK);
    ec10:	2300      	movs	r3, #0
    ec12:	461a      	mov	r2, r3
    ec14:	4619      	mov	r1, r3
    ec16:	4618      	mov	r0, r3
    ec18:	f001 fce0 	bl	105dc <__assert_func>
    ec1c:	2000034c 	.word	0x2000034c
    ec20:	20000348 	.word	0x20000348
    ec24:	200002d8 	.word	0x200002d8
    ec28:	200002dc 	.word	0x200002dc
    ec2c:	20000350 	.word	0x20000350

0000ec30 <do_sensor_post>:
{
    ec30:	b508      	push	{r3, lr}
    return dispatch_coap_request();
    ec32:	f7ff ffa9 	bl	eb88 <dispatch_coap_request>
}
    ec36:	bd08      	pop	{r3, pc}

0000ec38 <json_rep_start_root_object>:
void json_rep_start_root_object(void) {
    ec38:	b508      	push	{r3, lr}
    int rc = json_encode_object_start(&coap_json_encoder);  assert(rc == 0);
    ec3a:	4805      	ldr	r0, [pc, #20]	; (ec50 <json_rep_start_root_object+0x18>)
    ec3c:	f000 ff1e 	bl	fa7c <json_encode_object_start>
    ec40:	b900      	cbnz	r0, ec44 <json_rep_start_root_object+0xc>
}
    ec42:	bd08      	pop	{r3, pc}
    int rc = json_encode_object_start(&coap_json_encoder);  assert(rc == 0);
    ec44:	2300      	movs	r3, #0
    ec46:	461a      	mov	r2, r3
    ec48:	4619      	mov	r1, r3
    ec4a:	4618      	mov	r0, r3
    ec4c:	f001 fcc6 	bl	105dc <__assert_func>
    ec50:	20003b70 	.word	0x20003b70

0000ec54 <json_rep_end_root_object>:
void json_rep_end_root_object(void) {
    ec54:	b508      	push	{r3, lr}
    int rc = json_encode_object_finish(&coap_json_encoder);  assert(rc == 0);
    ec56:	4805      	ldr	r0, [pc, #20]	; (ec6c <json_rep_end_root_object+0x18>)
    ec58:	f001 f88e 	bl	fd78 <json_encode_object_finish>
    ec5c:	b900      	cbnz	r0, ec60 <json_rep_end_root_object+0xc>
}
    ec5e:	bd08      	pop	{r3, pc}
    int rc = json_encode_object_finish(&coap_json_encoder);  assert(rc == 0);
    ec60:	2300      	movs	r3, #0
    ec62:	461a      	mov	r2, r3
    ec64:	4619      	mov	r1, r3
    ec66:	4618      	mov	r0, r3
    ec68:	f001 fcb8 	bl	105dc <__assert_func>
    ec6c:	20003b70 	.word	0x20003b70

0000ec70 <json_encode_object_entry_ext>:
{
    ec70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(encoder); assert(key); assert(val);
    ec72:	2800      	cmp	r0, #0
    ec74:	d031      	beq.n	ecda <json_encode_object_entry_ext+0x6a>
    ec76:	460d      	mov	r5, r1
    ec78:	4616      	mov	r6, r2
    ec7a:	4604      	mov	r4, r0
    ec7c:	2900      	cmp	r1, #0
    ec7e:	d032      	beq.n	ece6 <json_encode_object_entry_ext+0x76>
    ec80:	2a00      	cmp	r2, #0
    ec82:	d036      	beq.n	ecf2 <json_encode_object_entry_ext+0x82>
    if (encoder->je_wr_commas) {
    ec84:	7a03      	ldrb	r3, [r0, #8]
    ec86:	f013 0f01 	tst.w	r3, #1
    ec8a:	d008      	beq.n	ec9e <json_encode_object_entry_ext+0x2e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
    ec8c:	6803      	ldr	r3, [r0, #0]
    ec8e:	2201      	movs	r2, #1
    ec90:	491b      	ldr	r1, [pc, #108]	; (ed00 <json_encode_object_entry_ext+0x90>)
    ec92:	6840      	ldr	r0, [r0, #4]
    ec94:	4798      	blx	r3
        encoder->je_wr_commas = 0;
    ec96:	7a23      	ldrb	r3, [r4, #8]
    ec98:	f36f 0300 	bfc	r3, #0, #1
    ec9c:	7223      	strb	r3, [r4, #8]
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
    ec9e:	6823      	ldr	r3, [r4, #0]
    eca0:	2201      	movs	r2, #1
    eca2:	4918      	ldr	r1, [pc, #96]	; (ed04 <json_encode_object_entry_ext+0x94>)
    eca4:	6860      	ldr	r0, [r4, #4]
    eca6:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
    eca8:	6827      	ldr	r7, [r4, #0]
    ecaa:	4628      	mov	r0, r5
    ecac:	f003 fc78 	bl	125a0 <strlen>
    ecb0:	4602      	mov	r2, r0
    ecb2:	4629      	mov	r1, r5
    ecb4:	6860      	ldr	r0, [r4, #4]
    ecb6:	47b8      	blx	r7
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
    ecb8:	6823      	ldr	r3, [r4, #0]
    ecba:	2203      	movs	r2, #3
    ecbc:	4912      	ldr	r1, [pc, #72]	; (ed08 <json_encode_object_entry_ext+0x98>)
    ecbe:	6860      	ldr	r0, [r4, #4]
    ecc0:	4798      	blx	r3
    rc = json_encode_value_ext(encoder, val);
    ecc2:	4631      	mov	r1, r6
    ecc4:	4620      	mov	r0, r4
    ecc6:	f7ff fdef 	bl	e8a8 <json_encode_value_ext>
    if (rc != 0) {
    ecca:	4602      	mov	r2, r0
    eccc:	b918      	cbnz	r0, ecd6 <json_encode_object_entry_ext+0x66>
    encoder->je_wr_commas = 1;
    ecce:	7a23      	ldrb	r3, [r4, #8]
    ecd0:	f043 0301 	orr.w	r3, r3, #1
    ecd4:	7223      	strb	r3, [r4, #8]
}
    ecd6:	4610      	mov	r0, r2
    ecd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(encoder); assert(key); assert(val);
    ecda:	2300      	movs	r3, #0
    ecdc:	461a      	mov	r2, r3
    ecde:	4619      	mov	r1, r3
    ece0:	4618      	mov	r0, r3
    ece2:	f001 fc7b 	bl	105dc <__assert_func>
    ece6:	2300      	movs	r3, #0
    ece8:	461a      	mov	r2, r3
    ecea:	4619      	mov	r1, r3
    ecec:	4618      	mov	r0, r3
    ecee:	f001 fc75 	bl	105dc <__assert_func>
    ecf2:	2300      	movs	r3, #0
    ecf4:	461a      	mov	r2, r3
    ecf6:	4619      	mov	r1, r3
    ecf8:	4618      	mov	r0, r3
    ecfa:	f001 fc6f 	bl	105dc <__assert_func>
    ecfe:	bf00      	nop
    ed00:	0002bea8 	.word	0x0002bea8
    ed04:	0002beac 	.word	0x0002beac
    ed08:	0002beb0 	.word	0x0002beb0

0000ed0c <sensor_network_init_post>:

//  Interface type and URI of the CoAP message being composed.
static uint8_t current_iface_type = 0xff;
static const char *current_uri = NULL;

bool sensor_network_init_post(uint8_t iface_type, const char *uri) {
    ed0c:	b510      	push	{r4, lr}
    //  Start composing the CoAP Server or Collector message with the sensor data in the payload.  This will 
    //  block other tasks from composing and posting CoAP messages (through a semaphore).
    //  We only have 1 memory buffer for composing CoAP messages so it needs to be locked.
    //  Return true if successful, false if network has not been registered.
    if (uri == NULL || uri[0] == 0) { uri = COAP_URI; }
    ed0e:	b341      	cbz	r1, ed62 <sensor_network_init_post+0x56>
    ed10:	460b      	mov	r3, r1
    ed12:	780a      	ldrb	r2, [r1, #0]
    ed14:	b33a      	cbz	r2, ed66 <sensor_network_init_post+0x5a>
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
    ed16:	b343      	cbz	r3, ed6a <sensor_network_init_post+0x5e>
    ed18:	2801      	cmp	r0, #1
    ed1a:	d82b      	bhi.n	ed74 <sensor_network_init_post+0x68>
    struct sensor_network_interface *iface = &sensor_network_interfaces[iface_type];
    if (!iface->transport_registered) {
    ed1c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    ed20:	0091      	lsls	r1, r2, #2
    ed22:	4a23      	ldr	r2, [pc, #140]	; (edb0 <sensor_network_init_post+0xa4>)
    ed24:	440a      	add	r2, r1
    ed26:	7c12      	ldrb	r2, [r2, #16]
    ed28:	b352      	cbz	r2, ed80 <sensor_network_init_post+0x74>
        //  If transport has not been registered, wait for the transport to be registered.
        console_printf("NET network not ready\n");
        return false;
    }
    void *endpoint = &sensor_network_endpoints[iface_type];
    ed2a:	4a22      	ldr	r2, [pc, #136]	; (edb4 <sensor_network_init_post+0xa8>)
    ed2c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    assert(iface->network_device);  assert(iface->register_transport_func);  assert(endpoint);
    ed30:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    ed34:	008c      	lsls	r4, r1, #2
    ed36:	491e      	ldr	r1, [pc, #120]	; (edb0 <sensor_network_init_post+0xa4>)
    ed38:	4421      	add	r1, r4
    ed3a:	6849      	ldr	r1, [r1, #4]
    ed3c:	b329      	cbz	r1, ed8a <sensor_network_init_post+0x7e>
    ed3e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
    ed42:	008c      	lsls	r4, r1, #2
    ed44:	491a      	ldr	r1, [pc, #104]	; (edb0 <sensor_network_init_post+0xa4>)
    ed46:	4421      	add	r1, r4
    ed48:	68c9      	ldr	r1, [r1, #12]
    ed4a:	b321      	cbz	r1, ed96 <sensor_network_init_post+0x8a>
    current_iface_type = iface_type;
    ed4c:	491a      	ldr	r1, [pc, #104]	; (edb8 <sensor_network_init_post+0xac>)
    ed4e:	7008      	strb	r0, [r1, #0]
    current_uri = uri;
    ed50:	491a      	ldr	r1, [pc, #104]	; (edbc <sensor_network_init_post+0xb0>)
    ed52:	600b      	str	r3, [r1, #0]
    bool status = init_sensor_post(endpoint);
    ed54:	4610      	mov	r0, r2
    ed56:	f7ff fdf7 	bl	e948 <init_sensor_post>
    assert(status);
    ed5a:	4603      	mov	r3, r0
    ed5c:	b308      	cbz	r0, eda2 <sensor_network_init_post+0x96>
    return status;
}
    ed5e:	4618      	mov	r0, r3
    ed60:	bd10      	pop	{r4, pc}
    if (uri == NULL || uri[0] == 0) { uri = COAP_URI; }
    ed62:	4b17      	ldr	r3, [pc, #92]	; (edc0 <sensor_network_init_post+0xb4>)
    ed64:	e7d7      	b.n	ed16 <sensor_network_init_post+0xa>
    ed66:	4b16      	ldr	r3, [pc, #88]	; (edc0 <sensor_network_init_post+0xb4>)
    ed68:	e7d5      	b.n	ed16 <sensor_network_init_post+0xa>
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
    ed6a:	461a      	mov	r2, r3
    ed6c:	4619      	mov	r1, r3
    ed6e:	4618      	mov	r0, r3
    ed70:	f001 fc34 	bl	105dc <__assert_func>
    ed74:	2300      	movs	r3, #0
    ed76:	461a      	mov	r2, r3
    ed78:	4619      	mov	r1, r3
    ed7a:	4618      	mov	r0, r3
    ed7c:	f001 fc2e 	bl	105dc <__assert_func>
        console_printf("NET network not ready\n");
    ed80:	4810      	ldr	r0, [pc, #64]	; (edc4 <sensor_network_init_post+0xb8>)
    ed82:	f7ff fd11 	bl	e7a8 <console_printf>
        return false;
    ed86:	2300      	movs	r3, #0
    ed88:	e7e9      	b.n	ed5e <sensor_network_init_post+0x52>
    assert(iface->network_device);  assert(iface->register_transport_func);  assert(endpoint);
    ed8a:	2300      	movs	r3, #0
    ed8c:	461a      	mov	r2, r3
    ed8e:	4619      	mov	r1, r3
    ed90:	4618      	mov	r0, r3
    ed92:	f001 fc23 	bl	105dc <__assert_func>
    ed96:	2300      	movs	r3, #0
    ed98:	461a      	mov	r2, r3
    ed9a:	4619      	mov	r1, r3
    ed9c:	4618      	mov	r0, r3
    ed9e:	f001 fc1d 	bl	105dc <__assert_func>
    assert(status);
    eda2:	2300      	movs	r3, #0
    eda4:	461a      	mov	r2, r3
    eda6:	4619      	mov	r1, r3
    eda8:	4618      	mov	r0, r3
    edaa:	f001 fc17 	bl	105dc <__assert_func>
    edae:	bf00      	nop
    edb0:	200003b4 	.word	0x200003b4
    edb4:	20000394 	.word	0x20000394
    edb8:	20000169 	.word	0x20000169
    edbc:	2000035c 	.word	0x2000035c
    edc0:	0002bedc 	.word	0x0002bedc
    edc4:	0002bfd4 	.word	0x0002bfd4

0000edc8 <init_server_post>:
bool init_server_post(const char *uri) {
    edc8:	b508      	push	{r3, lr}
    bool status = sensor_network_init_post(i, uri);
    edca:	4601      	mov	r1, r0
    edcc:	2000      	movs	r0, #0
    edce:	f7ff ff9d 	bl	ed0c <sensor_network_init_post>
}
    edd2:	bd08      	pop	{r3, pc}

0000edd4 <sensor_network_prepare_post>:

bool sensor_network_prepare_post(int encoding) {
    edd4:	b508      	push	{r3, lr}
    //  Set the encoding format for the CoAP message: APPLICATION_JSON or APPLICATION_CBOR.  If set to 0, use the default encoding format.
    //  Return true if successful.
    uint8_t iface_type = current_iface_type;
    edd6:	4b14      	ldr	r3, [pc, #80]	; (ee28 <sensor_network_prepare_post+0x54>)
    edd8:	781a      	ldrb	r2, [r3, #0]
    const char *uri = current_uri;
    edda:	4b14      	ldr	r3, [pc, #80]	; (ee2c <sensor_network_prepare_post+0x58>)
    eddc:	6819      	ldr	r1, [r3, #0]
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
    edde:	b161      	cbz	r1, edfa <sensor_network_prepare_post+0x26>
    ede0:	2a01      	cmp	r2, #1
    ede2:	d810      	bhi.n	ee06 <sensor_network_prepare_post+0x32>
    void *endpoint = &sensor_network_endpoints[iface_type];
    ede4:	4b12      	ldr	r3, [pc, #72]	; (ee30 <sensor_network_prepare_post+0x5c>)
    ede6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    assert(endpoint);

    //  Use the specified encoding. If not specified, select the default encoding for the interface type.
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
    edea:	2800      	cmp	r0, #0
    edec:	dd11      	ble.n	ee12 <sensor_network_prepare_post+0x3e>
    bool status = prepare_sensor_post(endpoint, uri, enc);
    edee:	4602      	mov	r2, r0
    edf0:	4618      	mov	r0, r3
    edf2:	f7ff fe61 	bl	eab8 <prepare_sensor_post>
    assert(status);
    edf6:	b180      	cbz	r0, ee1a <sensor_network_prepare_post+0x46>
    return status;
}
    edf8:	bd08      	pop	{r3, pc}
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
    edfa:	2300      	movs	r3, #0
    edfc:	461a      	mov	r2, r3
    edfe:	4619      	mov	r1, r3
    ee00:	4618      	mov	r0, r3
    ee02:	f001 fbeb 	bl	105dc <__assert_func>
    ee06:	2300      	movs	r3, #0
    ee08:	461a      	mov	r2, r3
    ee0a:	4619      	mov	r1, r3
    ee0c:	4618      	mov	r0, r3
    ee0e:	f001 fbe5 	bl	105dc <__assert_func>
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
    ee12:	4808      	ldr	r0, [pc, #32]	; (ee34 <sensor_network_prepare_post+0x60>)
    ee14:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    ee18:	e7e9      	b.n	edee <sensor_network_prepare_post+0x1a>
    assert(status);
    ee1a:	2300      	movs	r3, #0
    ee1c:	461a      	mov	r2, r3
    ee1e:	4619      	mov	r1, r3
    ee20:	4618      	mov	r0, r3
    ee22:	f001 fbdb 	bl	105dc <__assert_func>
    ee26:	bf00      	nop
    ee28:	20000169 	.word	0x20000169
    ee2c:	2000035c 	.word	0x2000035c
    ee30:	20000394 	.word	0x20000394
    ee34:	0002bf8c 	.word	0x0002bf8c

0000ee38 <sensor_network_do_post>:
    bool status = sensor_network_do_post(i);
    assert(status);
    return status;
}

bool sensor_network_do_post(uint8_t iface_type) {
    ee38:	b508      	push	{r3, lr}
    //  Post the CoAP Server or Collector message to the CoAP Background Task for transmission.  After posting the
    //  message to the background task, we release a semaphore that unblocks other requests
    //  to compose and post CoAP messages.
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
    ee3a:	2801      	cmp	r0, #1
    ee3c:	d803      	bhi.n	ee46 <sensor_network_do_post+0xe>
    bool status = do_sensor_post();
    ee3e:	f7ff fef7 	bl	ec30 <do_sensor_post>
    assert(status);
    ee42:	b130      	cbz	r0, ee52 <sensor_network_do_post+0x1a>
    return status;
}
    ee44:	bd08      	pop	{r3, pc}
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
    ee46:	2300      	movs	r3, #0
    ee48:	461a      	mov	r2, r3
    ee4a:	4619      	mov	r1, r3
    ee4c:	4618      	mov	r0, r3
    ee4e:	f001 fbc5 	bl	105dc <__assert_func>
    assert(status);
    ee52:	2300      	movs	r3, #0
    ee54:	461a      	mov	r2, r3
    ee56:	4619      	mov	r1, r3
    ee58:	4618      	mov	r0, r3
    ee5a:	f001 fbbf 	bl	105dc <__assert_func>

0000ee5e <do_server_post>:
bool do_server_post(void) {    
    ee5e:	b508      	push	{r3, lr}
    bool status = sensor_network_do_post(i);
    ee60:	2000      	movs	r0, #0
    ee62:	f7ff ffe9 	bl	ee38 <sensor_network_do_post>
    assert(status);
    ee66:	b100      	cbz	r0, ee6a <do_server_post+0xc>
}
    ee68:	bd08      	pop	{r3, pc}
    assert(status);
    ee6a:	2300      	movs	r3, #0
    ee6c:	461a      	mov	r2, r3
    ee6e:	4619      	mov	r1, r3
    ee70:	4618      	mov	r0, r3
    ee72:	f001 fbb3 	bl	105dc <__assert_func>
	...

0000ee78 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
    ee78:	4b04      	ldr	r3, [pc, #16]	; (ee8c <is_sensor_node+0x14>)
    ee7a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee7e:	4313      	orrs	r3, r2
    ee80:	d101      	bne.n	ee86 <is_sensor_node+0xe>
    return false;
    ee82:	2000      	movs	r0, #0
}
    ee84:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
    ee86:	2001      	movs	r0, #1
    ee88:	4770      	bx	lr
    ee8a:	bf00      	nop
    ee8c:	200003e0 	.word	0x200003e0

0000ee90 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
    ee90:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
    ee92:	4b16      	ldr	r3, [pc, #88]	; (eeec <get_hardware_id+0x5c>)
    ee94:	681b      	ldr	r3, [r3, #0]
    ee96:	b10b      	cbz	r3, ee9c <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
    ee98:	4815      	ldr	r0, [pc, #84]	; (eef0 <get_hardware_id+0x60>)
    ee9a:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
    ee9c:	f000 ffb8 	bl	fe10 <hal_bsp_hw_id_len>
    eea0:	4b12      	ldr	r3, [pc, #72]	; (eeec <get_hardware_id+0x5c>)
    eea2:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
    eea4:	280b      	cmp	r0, #11
    eea6:	d914      	bls.n	eed2 <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
    eea8:	210c      	movs	r1, #12
    eeaa:	4811      	ldr	r0, [pc, #68]	; (eef0 <get_hardware_id+0x60>)
    eeac:	f000 ffb2 	bl	fe14 <hal_bsp_hw_id>
    eeb0:	4b0e      	ldr	r3, [pc, #56]	; (eeec <get_hardware_id+0x5c>)
    eeb2:	6018      	str	r0, [r3, #0]
    eeb4:	2800      	cmp	r0, #0
    eeb6:	dd12      	ble.n	eede <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    eeb8:	490e      	ldr	r1, [pc, #56]	; (eef4 <get_hardware_id+0x64>)
    eeba:	480f      	ldr	r0, [pc, #60]	; (eef8 <get_hardware_id+0x68>)
    eebc:	f7ff fc74 	bl	e7a8 <console_printf>
    eec0:	4b0a      	ldr	r3, [pc, #40]	; (eeec <get_hardware_id+0x5c>)
    eec2:	6819      	ldr	r1, [r3, #0]
    eec4:	480a      	ldr	r0, [pc, #40]	; (eef0 <get_hardware_id+0x60>)
    eec6:	f7ff fbff 	bl	e6c8 <console_dump>
    eeca:	480c      	ldr	r0, [pc, #48]	; (eefc <get_hardware_id+0x6c>)
    eecc:	f7ff fc6c 	bl	e7a8 <console_printf>
    eed0:	e7e2      	b.n	ee98 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
    eed2:	2300      	movs	r3, #0
    eed4:	461a      	mov	r2, r3
    eed6:	4619      	mov	r1, r3
    eed8:	4618      	mov	r0, r3
    eeda:	f001 fb7f 	bl	105dc <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
    eede:	2300      	movs	r3, #0
    eee0:	461a      	mov	r2, r3
    eee2:	4619      	mov	r1, r3
    eee4:	4618      	mov	r0, r3
    eee6:	f001 fb79 	bl	105dc <__assert_func>
    eeea:	bf00      	nop
    eeec:	20000390 	.word	0x20000390
    eef0:	20000384 	.word	0x20000384
    eef4:	0002bfec 	.word	0x0002bfec
    eef8:	0002bf84 	.word	0x0002bf84
    eefc:	0002c060 	.word	0x0002c060

0000ef00 <is_collector_node>:
bool is_collector_node(void) {
    ef00:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
    ef02:	f7ff ffc5 	bl	ee90 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
    ef06:	220c      	movs	r2, #12
    ef08:	4903      	ldr	r1, [pc, #12]	; (ef18 <is_collector_node+0x18>)
    ef0a:	f003 fab7 	bl	1247c <memcmp>
    ef0e:	b108      	cbz	r0, ef14 <is_collector_node+0x14>
    return false; 
    ef10:	2000      	movs	r0, #0
}
    ef12:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
    ef14:	2001      	movs	r0, #1
    ef16:	e7fc      	b.n	ef12 <is_collector_node+0x12>
    ef18:	0002bf14 	.word	0x0002bf14

0000ef1c <is_standalone_node>:
bool is_standalone_node(void) {
    ef1c:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
    ef1e:	f7ff ffef 	bl	ef00 <is_collector_node>
    ef22:	b928      	cbnz	r0, ef30 <is_standalone_node+0x14>
    ef24:	4604      	mov	r4, r0
    ef26:	f7ff ffa7 	bl	ee78 <is_sensor_node>
    ef2a:	b910      	cbnz	r0, ef32 <is_standalone_node+0x16>
    ef2c:	2401      	movs	r4, #1
    ef2e:	e000      	b.n	ef32 <is_standalone_node+0x16>
    return false;
    ef30:	2400      	movs	r4, #0
}
    ef32:	4620      	mov	r0, r4
    ef34:	bd10      	pop	{r4, pc}
	...

0000ef38 <get_device_id>:

//  Device Type e.g. l476
static const char *DEVICE_TYPE = MYNEWT_VAL(DEVICE_TYPE);

const char *get_device_id(void) {
    ef38:	b538      	push	{r3, r4, r5, lr}
    //  Get the randomly-generated Device ID that will be sent in every CoAP Server message.  Changes upon restart.
    if (device_id_text[0]) { return device_id_text; }
    ef3a:	4b10      	ldr	r3, [pc, #64]	; (ef7c <get_device_id+0x44>)
    ef3c:	781b      	ldrb	r3, [r3, #0]
    ef3e:	b9d3      	cbnz	r3, ef76 <get_device_id+0x3e>
    //  Create a random device ID based on HMAC pseudorandom number generator e.g. 0xab 0xcd 0xef ...
    int rc = hmac_prng_generate(device_id, DEVICE_ID_LENGTH);  assert(rc == 0);
#endif  //  MYNEWT_VAL(HMAC_PRNG)
    char *s = device_id_text; int i;
    //  Convert to text e.g. abcdef...
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
    ef40:	2400      	movs	r4, #0
    char *s = device_id_text; int i;
    ef42:	4d0e      	ldr	r5, [pc, #56]	; (ef7c <get_device_id+0x44>)
    ef44:	e006      	b.n	ef54 <get_device_id+0x1c>
        sprintf(s, "%02x", device_id[i]);
    ef46:	2200      	movs	r2, #0
    ef48:	490d      	ldr	r1, [pc, #52]	; (ef80 <get_device_id+0x48>)
    ef4a:	4628      	mov	r0, r5
    ef4c:	f003 faff 	bl	1254e <sprintf>
        s += 2;
    ef50:	3502      	adds	r5, #2
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
    ef52:	3401      	adds	r4, #1
    ef54:	2c0f      	cmp	r4, #15
    ef56:	ddf6      	ble.n	ef46 <get_device_id+0xe>
    }
    device_id_text[DEVICE_ID_TEXT_LENGTH - 1] = 0;
    ef58:	4a08      	ldr	r2, [pc, #32]	; (ef7c <get_device_id+0x44>)
    ef5a:	2300      	movs	r3, #0
    ef5c:	f882 3020 	strb.w	r3, [r2, #32]
    //  Overwrite the start of the device ID by the device type followed by ",", e.g. "l476,010203".
    if (strlen(DEVICE_TYPE) > 0) {
        assert(strlen(DEVICE_TYPE) < DEVICE_ID_TEXT_LENGTH - 1);  //  DEVICE_TYPE too long
        strcpy(device_id_text, DEVICE_TYPE);
    ef60:	4b08      	ldr	r3, [pc, #32]	; (ef84 <get_device_id+0x4c>)
    ef62:	e893 0003 	ldmia.w	r3, {r0, r1}
    ef66:	6010      	str	r0, [r2, #0]
    ef68:	8091      	strh	r1, [r2, #4]
        device_id_text[strlen(DEVICE_TYPE)] = ',';
    ef6a:	232c      	movs	r3, #44	; 0x2c
    ef6c:	7153      	strb	r3, [r2, #5]
    }
    console_printf("%srandom device id %s\n", _net, device_id_text);
    ef6e:	4906      	ldr	r1, [pc, #24]	; (ef88 <get_device_id+0x50>)
    ef70:	4806      	ldr	r0, [pc, #24]	; (ef8c <get_device_id+0x54>)
    ef72:	f7ff fc19 	bl	e7a8 <console_printf>
    return device_id_text;
}
    ef76:	4801      	ldr	r0, [pc, #4]	; (ef7c <get_device_id+0x44>)
    ef78:	bd38      	pop	{r3, r4, r5, pc}
    ef7a:	bf00      	nop
    ef7c:	20000360 	.word	0x20000360
    ef80:	0002bf5c 	.word	0x0002bf5c
    ef84:	0002bf64 	.word	0x0002bf64
    ef88:	0002bfec 	.word	0x0002bfec
    ef8c:	0002bf6c 	.word	0x0002bf6c

0000ef90 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
    ef90:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
    ef92:	2400      	movs	r4, #0
    ef94:	2c04      	cmp	r4, #4
    ef96:	dc15      	bgt.n	efc4 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
    ef98:	4b23      	ldr	r3, [pc, #140]	; (f028 <sensor_network_init+0x98>)
    ef9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    ef9e:	e9d3 2300 	ldrd	r2, r3, [r3]
    efa2:	4922      	ldr	r1, [pc, #136]	; (f02c <sensor_network_init+0x9c>)
    efa4:	4822      	ldr	r0, [pc, #136]	; (f030 <sensor_network_init+0xa0>)
    efa6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    efaa:	f003 fad0 	bl	1254e <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
    efae:	3001      	adds	r0, #1
    efb0:	280b      	cmp	r0, #11
    efb2:	dc01      	bgt.n	efb8 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
    efb4:	3401      	adds	r4, #1
    efb6:	e7ed      	b.n	ef94 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
    efb8:	2300      	movs	r3, #0
    efba:	461a      	mov	r2, r3
    efbc:	4619      	mov	r1, r3
    efbe:	4618      	mov	r0, r3
    efc0:	f001 fb0c 	bl	105dc <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
    efc4:	f7ff ff64 	bl	ee90 <get_hardware_id>
    efc8:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
    efca:	2400      	movs	r4, #0
    efcc:	2c04      	cmp	r4, #4
    efce:	dc19      	bgt.n	f004 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
    efd0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    efd4:	0093      	lsls	r3, r2, #2
    efd6:	220c      	movs	r2, #12
    efd8:	4916      	ldr	r1, [pc, #88]	; (f034 <sensor_network_init+0xa4>)
    efda:	4419      	add	r1, r3
    efdc:	4628      	mov	r0, r5
    efde:	f003 fa4d 	bl	1247c <memcmp>
    efe2:	b108      	cbz	r0, efe8 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
    efe4:	3401      	adds	r4, #1
    efe6:	e7f1      	b.n	efcc <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
    efe8:	4b0f      	ldr	r3, [pc, #60]	; (f028 <sensor_network_init+0x98>)
    efea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    efee:	e9d3 0100 	ldrd	r0, r1, [r3]
    eff2:	4b11      	ldr	r3, [pc, #68]	; (f038 <sensor_network_init+0xa8>)
    eff4:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
    eff8:	1c63      	adds	r3, r4, #1
    effa:	4a10      	ldr	r2, [pc, #64]	; (f03c <sensor_network_init+0xac>)
    effc:	4910      	ldr	r1, [pc, #64]	; (f040 <sensor_network_init+0xb0>)
    effe:	4811      	ldr	r0, [pc, #68]	; (f044 <sensor_network_init+0xb4>)
    f000:	f7ff fbd2 	bl	e7a8 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
    f004:	f7ff ff7c 	bl	ef00 <is_collector_node>
    f008:	b940      	cbnz	r0, f01c <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
    f00a:	f7ff ff87 	bl	ef1c <is_standalone_node>
    f00e:	b150      	cbz	r0, f026 <sensor_network_init+0x96>
    f010:	4a0a      	ldr	r2, [pc, #40]	; (f03c <sensor_network_init+0xac>)
    f012:	490b      	ldr	r1, [pc, #44]	; (f040 <sensor_network_init+0xb0>)
    f014:	480c      	ldr	r0, [pc, #48]	; (f048 <sensor_network_init+0xb8>)
    f016:	f7ff fbc7 	bl	e7a8 <console_printf>
}
    f01a:	e004      	b.n	f026 <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
    f01c:	4a07      	ldr	r2, [pc, #28]	; (f03c <sensor_network_init+0xac>)
    f01e:	4908      	ldr	r1, [pc, #32]	; (f040 <sensor_network_init+0xb0>)
    f020:	480a      	ldr	r0, [pc, #40]	; (f04c <sensor_network_init+0xbc>)
    f022:	f7ff fbc1 	bl	e7a8 <console_printf>
}
    f026:	bd38      	pop	{r3, r4, r5, pc}
    f028:	0002c000 	.word	0x0002c000
    f02c:	0002bf94 	.word	0x0002bf94
    f030:	2000016c 	.word	0x2000016c
    f034:	0002bf20 	.word	0x0002bf20
    f038:	200003e0 	.word	0x200003e0
    f03c:	0002bf9c 	.word	0x0002bf9c
    f040:	0002bfec 	.word	0x0002bfec
    f044:	0002bfa4 	.word	0x0002bfa4
    f048:	0002bfc4 	.word	0x0002bfc4
    f04c:	0002bfb4 	.word	0x0002bfb4

0000f050 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
    f050:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
    f052:	e002      	b.n	f05a <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
    f054:	4618      	mov	r0, r3
    f056:	f000 fc2f 	bl	f8b8 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
    f05a:	4808      	ldr	r0, [pc, #32]	; (f07c <oc_buffer_tx+0x2c>)
    f05c:	f001 fec9 	bl	10df2 <os_mqueue_get>
    f060:	4603      	mov	r3, r0
    f062:	b148      	cbz	r0, f078 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
    f064:	2200      	movs	r2, #0
    f066:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
    f068:	7e1a      	ldrb	r2, [r3, #24]
    f06a:	f012 0f08 	tst.w	r2, #8
    f06e:	d0f1      	beq.n	f054 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
    f070:	4618      	mov	r0, r3
    f072:	f000 fc31 	bl	f8d8 <oc_send_multicast_message>
    f076:	e7f0      	b.n	f05a <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
    f078:	bd08      	pop	{r3, pc}
    f07a:	bf00      	nop
    f07c:	20000438 	.word	0x20000438

0000f080 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
    f080:	b500      	push	{lr}
    f082:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
    f084:	4808      	ldr	r0, [pc, #32]	; (f0a8 <oc_buffer_rx+0x28>)
    f086:	f001 feb4 	bl	10df2 <os_mqueue_get>
    f08a:	9001      	str	r0, [sp, #4]
    f08c:	b140      	cbz	r0, f0a0 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
    f08e:	a801      	add	r0, sp, #4
    f090:	f000 fce8 	bl	fa64 <__wrap_coap_receive>
#endif
        if (m) {
    f094:	9801      	ldr	r0, [sp, #4]
    f096:	2800      	cmp	r0, #0
    f098:	d0f4      	beq.n	f084 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
    f09a:	f001 ff1f 	bl	10edc <os_mbuf_free_chain>
    f09e:	e7f1      	b.n	f084 <oc_buffer_rx+0x4>
        }
    }
}
    f0a0:	b003      	add	sp, #12
    f0a2:	f85d fb04 	ldr.w	pc, [sp], #4
    f0a6:	bf00      	nop
    f0a8:	20000420 	.word	0x20000420

0000f0ac <oc_allocate_mbuf>:
{
    f0ac:	b570      	push	{r4, r5, r6, lr}
};

static inline int
oc_endpoint_size(struct oc_endpoint *oe)
{
    assert(oc_transports[oe->ep.oe_type]);
    f0ae:	7803      	ldrb	r3, [r0, #0]
    f0b0:	f003 0307 	and.w	r3, r3, #7
    f0b4:	4a0c      	ldr	r2, [pc, #48]	; (f0e8 <oc_allocate_mbuf+0x3c>)
    f0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f0ba:	b183      	cbz	r3, f0de <oc_allocate_mbuf+0x32>
    f0bc:	4604      	mov	r4, r0
    return oc_transports[oe->ep.oe_type]->ot_ep_size(oe);
    f0be:	685b      	ldr	r3, [r3, #4]
    f0c0:	4798      	blx	r3
    f0c2:	4606      	mov	r6, r0
    m = os_msys_get_pkthdr(0, ep_size);
    f0c4:	b281      	uxth	r1, r0
    f0c6:	2000      	movs	r0, #0
    f0c8:	f002 fc1d 	bl	11906 <os_msys_get_pkthdr>
    if (!m) {
    f0cc:	4605      	mov	r5, r0
    f0ce:	b120      	cbz	r0, f0da <oc_allocate_mbuf+0x2e>
    memcpy(OC_MBUF_ENDPOINT(m), oe, ep_size);
    f0d0:	4632      	mov	r2, r6
    f0d2:	4621      	mov	r1, r4
    f0d4:	3018      	adds	r0, #24
    f0d6:	f003 f9f5 	bl	124c4 <memcpy>
}
    f0da:	4628      	mov	r0, r5
    f0dc:	bd70      	pop	{r4, r5, r6, pc}
    assert(oc_transports[oe->ep.oe_type]);
    f0de:	461a      	mov	r2, r3
    f0e0:	4619      	mov	r1, r3
    f0e2:	4618      	mov	r0, r3
    f0e4:	f001 fa7a 	bl	105dc <__assert_func>
    f0e8:	20003bd0 	.word	0x20003bd0

0000f0ec <oc_send_message>:
{
    f0ec:	b510      	push	{r4, lr}
    f0ee:	4604      	mov	r4, r0
    rc = os_mqueue_put(&oc_outq, oc_evq_get(), m);
    f0f0:	f000 fbd6 	bl	f8a0 <oc_evq_get>
    f0f4:	4622      	mov	r2, r4
    f0f6:	4601      	mov	r1, r0
    f0f8:	4805      	ldr	r0, [pc, #20]	; (f110 <oc_send_message+0x24>)
    f0fa:	f001 fe8d 	bl	10e18 <os_mqueue_put>
    assert(rc == 0);
    f0fe:	b900      	cbnz	r0, f102 <oc_send_message+0x16>
}
    f100:	bd10      	pop	{r4, pc}
    assert(rc == 0);
    f102:	2300      	movs	r3, #0
    f104:	461a      	mov	r2, r3
    f106:	4619      	mov	r1, r3
    f108:	4618      	mov	r0, r3
    f10a:	f001 fa67 	bl	105dc <__assert_func>
    f10e:	bf00      	nop
    f110:	20000438 	.word	0x20000438

0000f114 <oc_buffer_init>:

void
oc_buffer_init(void)
{
    f114:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
    f116:	2200      	movs	r2, #0
    f118:	4904      	ldr	r1, [pc, #16]	; (f12c <oc_buffer_init+0x18>)
    f11a:	4805      	ldr	r0, [pc, #20]	; (f130 <oc_buffer_init+0x1c>)
    f11c:	f001 fe60 	bl	10de0 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
    f120:	2200      	movs	r2, #0
    f122:	4904      	ldr	r1, [pc, #16]	; (f134 <oc_buffer_init+0x20>)
    f124:	4804      	ldr	r0, [pc, #16]	; (f138 <oc_buffer_init+0x24>)
    f126:	f001 fe5b 	bl	10de0 <os_mqueue_init>
}
    f12a:	bd08      	pop	{r3, pc}
    f12c:	0000f081 	.word	0x0000f081
    f130:	20000420 	.word	0x20000420
    f134:	0000f051 	.word	0x0000f051
    f138:	20000438 	.word	0x20000438

0000f13c <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
    f13c:	b500      	push	{lr}
    f13e:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
    f140:	4b05      	ldr	r3, [pc, #20]	; (f158 <oc_rep_init+0x1c>)
    f142:	9300      	str	r3, [sp, #0]
    f144:	4b05      	ldr	r3, [pc, #20]	; (f15c <oc_rep_init+0x20>)
    f146:	2218      	movs	r2, #24
    f148:	2102      	movs	r1, #2
    f14a:	4805      	ldr	r0, [pc, #20]	; (f160 <oc_rep_init+0x24>)
    f14c:	f002 fad6 	bl	116fc <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
    f150:	b003      	add	sp, #12
    f152:	f85d fb04 	ldr.w	pc, [sp], #4
    f156:	bf00      	nop
    f158:	0002c028 	.word	0x0002c028
    f15c:	2000046c 	.word	0x2000046c
    f160:	20000450 	.word	0x20000450

0000f164 <free_client_cb>:
}

#ifdef OC_CLIENT
static void
free_client_cb(oc_client_cb_t *cb)
{
    f164:	b510      	push	{r4, lr}
    f166:	4604      	mov	r4, r0
    os_callout_stop(&cb->callout);
    f168:	3004      	adds	r0, #4
    f16a:	f001 fbbf 	bl	108ec <os_callout_stop>
    oc_free_string(&cb->uri);
    f16e:	f104 0024 	add.w	r0, r4, #36	; 0x24
    f172:	f000 fc08 	bl	f986 <oc_free_string>
    SLIST_REMOVE(&oc_client_cbs, cb, oc_client_cb, next);
    f176:	4b09      	ldr	r3, [pc, #36]	; (f19c <free_client_cb+0x38>)
    f178:	681a      	ldr	r2, [r3, #0]
    f17a:	42a2      	cmp	r2, r4
    f17c:	d103      	bne.n	f186 <free_client_cb+0x22>
    f17e:	6812      	ldr	r2, [r2, #0]
    f180:	601a      	str	r2, [r3, #0]
    f182:	e005      	b.n	f190 <free_client_cb+0x2c>
    f184:	461a      	mov	r2, r3
    f186:	6813      	ldr	r3, [r2, #0]
    f188:	42a3      	cmp	r3, r4
    f18a:	d1fb      	bne.n	f184 <free_client_cb+0x20>
    f18c:	681b      	ldr	r3, [r3, #0]
    f18e:	6013      	str	r3, [r2, #0]
    os_memblock_put(&oc_client_cb_pool, cb);
    f190:	4621      	mov	r1, r4
    f192:	4803      	ldr	r0, [pc, #12]	; (f1a0 <free_client_cb+0x3c>)
    f194:	f002 fb1f 	bl	117d6 <os_memblock_put>
}
    f198:	bd10      	pop	{r4, pc}
    f19a:	bf00      	nop
    f19c:	20000580 	.word	0x20000580
    f1a0:	20000564 	.word	0x20000564

0000f1a4 <oc_ri_remove_cb>:
    return NULL;
}

static void
oc_ri_remove_cb(struct os_event *ev)
{
    f1a4:	b508      	push	{r3, lr}
    struct oc_client_cb *cb;

    cb = ev->ev_arg;

    free_client_cb(cb);
    f1a6:	6880      	ldr	r0, [r0, #8]
    f1a8:	f7ff ffdc 	bl	f164 <free_client_cb>
}
    f1ac:	bd08      	pop	{r3, pc}
	...

0000f1b0 <oc_ri_mem_init>:
{
    f1b0:	b500      	push	{lr}
    f1b2:	b083      	sub	sp, #12
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
    f1b4:	4b07      	ldr	r3, [pc, #28]	; (f1d4 <oc_ri_mem_init+0x24>)
    f1b6:	9300      	str	r3, [sp, #0]
    f1b8:	4b07      	ldr	r3, [pc, #28]	; (f1d8 <oc_ri_mem_init+0x28>)
    f1ba:	2264      	movs	r2, #100	; 0x64
    f1bc:	2102      	movs	r1, #2
    f1be:	4807      	ldr	r0, [pc, #28]	; (f1dc <oc_ri_mem_init+0x2c>)
    f1c0:	f002 fa9c 	bl	116fc <os_mempool_init>
    oc_rep_init();
    f1c4:	f7ff ffba 	bl	f13c <oc_rep_init>
    oc_buffer_init();
    f1c8:	f7ff ffa4 	bl	f114 <oc_buffer_init>
}
    f1cc:	b003      	add	sp, #12
    f1ce:	f85d fb04 	ldr.w	pc, [sp], #4
    f1d2:	bf00      	nop
    f1d4:	0002c034 	.word	0x0002c034
    f1d8:	2000049c 	.word	0x2000049c
    f1dc:	20000564 	.word	0x20000564

0000f1e0 <oc_ri_remove_client_cb_by_mid>:
{
    f1e0:	b508      	push	{r3, lr}
    SLIST_FOREACH(cb, &oc_client_cbs, next) {
    f1e2:	4b06      	ldr	r3, [pc, #24]	; (f1fc <oc_ri_remove_client_cb_by_mid+0x1c>)
    f1e4:	681b      	ldr	r3, [r3, #0]
    f1e6:	b123      	cbz	r3, f1f2 <oc_ri_remove_client_cb_by_mid+0x12>
        if (cb->mid == mid) {
    f1e8:	8eda      	ldrh	r2, [r3, #54]	; 0x36
    f1ea:	4282      	cmp	r2, r0
    f1ec:	d001      	beq.n	f1f2 <oc_ri_remove_client_cb_by_mid+0x12>
    SLIST_FOREACH(cb, &oc_client_cbs, next) {
    f1ee:	681b      	ldr	r3, [r3, #0]
    f1f0:	e7f9      	b.n	f1e6 <oc_ri_remove_client_cb_by_mid+0x6>
    if (cb) {
    f1f2:	b113      	cbz	r3, f1fa <oc_ri_remove_client_cb_by_mid+0x1a>
        free_client_cb(cb);
    f1f4:	4618      	mov	r0, r3
    f1f6:	f7ff ffb5 	bl	f164 <free_client_cb>
}
    f1fa:	bd08      	pop	{r3, pc}
    f1fc:	20000580 	.word	0x20000580

0000f200 <oc_ri_alloc_client_cb>:

oc_client_cb_t *
oc_ri_alloc_client_cb(const char *uri, oc_server_handle_t *server,
                      oc_method_t method, void *handler, oc_qos_t qos)
{
    f200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f204:	4680      	mov	r8, r0
    f206:	460e      	mov	r6, r1
    f208:	4617      	mov	r7, r2
    f20a:	461d      	mov	r5, r3
    oc_client_cb_t *cb;

    cb = os_memblock_get(&oc_client_cb_pool);
    f20c:	4823      	ldr	r0, [pc, #140]	; (f29c <oc_ri_alloc_client_cb+0x9c>)
    f20e:	f002 faba 	bl	11786 <os_memblock_get>
    if (!cb) {
    f212:	4604      	mov	r4, r0
    f214:	2800      	cmp	r0, #0
    f216:	d03e      	beq.n	f296 <oc_ri_alloc_client_cb+0x96>
        return NULL;
    }
    cb->mid = coap_get_mid();
    f218:	f000 f932 	bl	f480 <coap_get_mid>
    f21c:	86e0      	strh	r0, [r4, #54]	; 0x36
    oc_new_string(&cb->uri, uri);
    f21e:	4641      	mov	r1, r8
    f220:	f104 0024 	add.w	r0, r4, #36	; 0x24
    f224:	f000 fb99 	bl	f95a <oc_new_string>
    cb->method = method;
    f228:	f884 7061 	strb.w	r7, [r4, #97]	; 0x61
    cb->qos = qos;
    f22c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    f230:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    cb->handler = handler;
    f234:	6525      	str	r5, [r4, #80]	; 0x50
    cb->token_len = 8;
    f236:	2308      	movs	r3, #8
    f238:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    int i = 0;
    f23c:	2500      	movs	r5, #0
    uint16_t r;
    while (i < cb->token_len) {
    f23e:	e005      	b.n	f24c <oc_ri_alloc_client_cb+0x4c>
        r = oc_random_rand();
    f240:	f000 fb86 	bl	f950 <oc_random_rand>
        memcpy(cb->token + i, &r, sizeof(r));
    f244:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    f248:	5358      	strh	r0, [r3, r5]
        i += sizeof(r);
    f24a:	3502      	adds	r5, #2
    while (i < cb->token_len) {
    f24c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    f250:	42ab      	cmp	r3, r5
    f252:	dcf5      	bgt.n	f240 <oc_ri_alloc_client_cb+0x40>
    }
    cb->discovery = false;
    f254:	2300      	movs	r3, #0
    f256:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    cb->timestamp = oc_clock_time();
    f25a:	f000 fb75 	bl	f948 <oc_clock_time>
    f25e:	65e0      	str	r0, [r4, #92]	; 0x5c
    cb->observe_seq = -1;
    f260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f264:	65a3      	str	r3, [r4, #88]	; 0x58
    memcpy(&cb->server, server, sizeof(oc_server_handle_t));
    f266:	6831      	ldr	r1, [r6, #0]
    f268:	6872      	ldr	r2, [r6, #4]
    f26a:	68b5      	ldr	r5, [r6, #8]
    f26c:	68f0      	ldr	r0, [r6, #12]
    f26e:	63a1      	str	r1, [r4, #56]	; 0x38
    f270:	63e2      	str	r2, [r4, #60]	; 0x3c
    f272:	6425      	str	r5, [r4, #64]	; 0x40
    f274:	6460      	str	r0, [r4, #68]	; 0x44
    f276:	6931      	ldr	r1, [r6, #16]
    f278:	6972      	ldr	r2, [r6, #20]
    f27a:	64a1      	str	r1, [r4, #72]	; 0x48
    f27c:	64e2      	str	r2, [r4, #76]	; 0x4c

    os_callout_init(&cb->callout, oc_evq_get(), oc_ri_remove_cb, cb);
    f27e:	f000 fb0f 	bl	f8a0 <oc_evq_get>
    f282:	4623      	mov	r3, r4
    f284:	4a06      	ldr	r2, [pc, #24]	; (f2a0 <oc_ri_alloc_client_cb+0xa0>)
    f286:	4601      	mov	r1, r0
    f288:	1d20      	adds	r0, r4, #4
    f28a:	f001 fb21 	bl	108d0 <os_callout_init>

    SLIST_INSERT_HEAD(&oc_client_cbs, cb, next);
    f28e:	4b05      	ldr	r3, [pc, #20]	; (f2a4 <oc_ri_alloc_client_cb+0xa4>)
    f290:	681a      	ldr	r2, [r3, #0]
    f292:	6022      	str	r2, [r4, #0]
    f294:	601c      	str	r4, [r3, #0]
    return cb;
}
    f296:	4620      	mov	r0, r4
    f298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f29c:	20000564 	.word	0x20000564
    f2a0:	0000f1a5 	.word	0x0000f1a5
    f2a4:	20000580 	.word	0x20000580

0000f2a8 <coap_log_2>:
/*---------------------------------------------------------------------------*/
/*- Local helper functions --------------------------------------------------*/
/*---------------------------------------------------------------------------*/
static uint16_t
coap_log_2(uint16_t value)
{
    f2a8:	4602      	mov	r2, r0
    uint16_t result = 0;
    f2aa:	2000      	movs	r0, #0
    f2ac:	e000      	b.n	f2b0 <coap_log_2+0x8>

    do {
        value = value >> 1;
        result++;
    f2ae:	4618      	mov	r0, r3
    f2b0:	1c43      	adds	r3, r0, #1
    f2b2:	b29b      	uxth	r3, r3
    } while (value);
    f2b4:	0852      	lsrs	r2, r2, #1
    f2b6:	d1fa      	bne.n	f2ae <coap_log_2+0x6>

    return (result - 1);
}
    f2b8:	4770      	bx	lr

0000f2ba <coap_option_nibble>:
}
/*---------------------------------------------------------------------------*/
static uint8_t
coap_option_nibble(unsigned int value)
{
    if (value < 13) {
    f2ba:	280c      	cmp	r0, #12
    f2bc:	d904      	bls.n	f2c8 <coap_option_nibble+0xe>
        return value;
    } else if (value <= 0xFF + 13) {
    f2be:	f5b0 7f86 	cmp.w	r0, #268	; 0x10c
    f2c2:	d803      	bhi.n	f2cc <coap_option_nibble+0x12>
        return 13;
    f2c4:	200d      	movs	r0, #13
    f2c6:	4770      	bx	lr
        return value;
    f2c8:	b2c0      	uxtb	r0, r0
    f2ca:	4770      	bx	lr
    } else {
        return 14;
    f2cc:	200e      	movs	r0, #14
    }
}
    f2ce:	4770      	bx	lr

0000f2d0 <coap_append_opt_hdr>:
/*---------------------------------------------------------------------------*/

static int
coap_append_opt_hdr(struct os_mbuf *m, unsigned int delta, size_t length)
{
    f2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2d2:	b083      	sub	sp, #12
    f2d4:	4606      	mov	r6, r0
    f2d6:	460d      	mov	r5, r1
    f2d8:	4614      	mov	r4, r2
    uint8_t buffer[4];
    size_t written = 0;

    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
    f2da:	4608      	mov	r0, r1
    f2dc:	f7ff ffed 	bl	f2ba <coap_option_nibble>
    f2e0:	0107      	lsls	r7, r0, #4
    f2e2:	4620      	mov	r0, r4
    f2e4:	f7ff ffe9 	bl	f2ba <coap_option_nibble>
    f2e8:	b240      	sxtb	r0, r0
    f2ea:	4338      	orrs	r0, r7
    f2ec:	f88d 0004 	strb.w	r0, [sp, #4]

    if (delta > 268) {
    f2f0:	f5b5 7f86 	cmp.w	r5, #268	; 0x10c
    f2f4:	d914      	bls.n	f320 <coap_append_opt_hdr+0x50>
        buffer[++written] = ((delta - 269) >> 8) & 0xff;
    f2f6:	f2a5 130d 	subw	r3, r5, #269	; 0x10d
    f2fa:	0a1b      	lsrs	r3, r3, #8
    f2fc:	f88d 3005 	strb.w	r3, [sp, #5]
        buffer[++written] = (delta - 269) & 0xff;
    f300:	3d0d      	subs	r5, #13
    f302:	f88d 5006 	strb.w	r5, [sp, #6]
    f306:	2202      	movs	r2, #2
    } else if (delta > 12) {
        buffer[++written] = (delta - 13);
    }

    if (length > 268) {
    f308:	f5b4 7f86 	cmp.w	r4, #268	; 0x10c
    f30c:	d811      	bhi.n	f332 <coap_append_opt_hdr+0x62>
        buffer[++written] = ((length - 269) >> 8) & 0xff;
        buffer[++written] = (length - 269) & 0xff;
    } else if (length > 12) {
    f30e:	2c0c      	cmp	r4, #12
    f310:	d91c      	bls.n	f34c <coap_append_opt_hdr+0x7c>
        buffer[++written] = (length - 13);
    f312:	3201      	adds	r2, #1
    f314:	3c0d      	subs	r4, #13
    f316:	ab02      	add	r3, sp, #8
    f318:	4413      	add	r3, r2
    f31a:	f803 4c04 	strb.w	r4, [r3, #-4]
    f31e:	e015      	b.n	f34c <coap_append_opt_hdr+0x7c>
    } else if (delta > 12) {
    f320:	2d0c      	cmp	r5, #12
    f322:	d904      	bls.n	f32e <coap_append_opt_hdr+0x5e>
        buffer[++written] = (delta - 13);
    f324:	3d0d      	subs	r5, #13
    f326:	f88d 5005 	strb.w	r5, [sp, #5]
    f32a:	2201      	movs	r2, #1
    f32c:	e7ec      	b.n	f308 <coap_append_opt_hdr+0x38>
    size_t written = 0;
    f32e:	2200      	movs	r2, #0
    f330:	e7ea      	b.n	f308 <coap_append_opt_hdr+0x38>
        buffer[++written] = ((length - 269) >> 8) & 0xff;
    f332:	f2a4 130d 	subw	r3, r4, #269	; 0x10d
    f336:	0a1b      	lsrs	r3, r3, #8
    f338:	a902      	add	r1, sp, #8
    f33a:	4411      	add	r1, r2
    f33c:	f801 3c03 	strb.w	r3, [r1, #-3]
        buffer[++written] = (length - 269) & 0xff;
    f340:	3202      	adds	r2, #2
    f342:	3c0d      	subs	r4, #13
    f344:	ab02      	add	r3, sp, #8
    f346:	4413      	add	r3, r2
    f348:	f803 4c04 	strb.w	r4, [r3, #-4]
    }

    return os_mbuf_append(m, buffer, written + 1);
    f34c:	3201      	adds	r2, #1
    f34e:	b292      	uxth	r2, r2
    f350:	a901      	add	r1, sp, #4
    f352:	4630      	mov	r0, r6
    f354:	f001 fdde 	bl	10f14 <os_mbuf_append>
}
    f358:	b003      	add	sp, #12
    f35a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f35c <coap_append_array_opt>:
/*---------------------------------------------------------------------------*/
static int
coap_append_array_opt(struct os_mbuf *m,
                      unsigned int number, unsigned int current_number,
                      uint8_t *array, size_t length, char split_char)
{
    f35c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f360:	4682      	mov	sl, r0
    f362:	468b      	mov	fp, r1
    f364:	4611      	mov	r1, r2
    f366:	461e      	mov	r6, r3
    f368:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    f36a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
    uint8_t *part_end = NULL;
    size_t blk;

    OC_LOG(DEBUG, "ARRAY type %u, len %zu\n", number, length);

    if (split_char != '\0') {
    f36e:	f1b9 0f00 	cmp.w	r9, #0
    f372:	d027      	beq.n	f3c4 <coap_append_array_opt+0x68>
    uint8_t *part_start = array;
    f374:	4698      	mov	r8, r3
        for (j = 0; j <= length + 1; ++j) {
    f376:	2400      	movs	r4, #0
    f378:	e015      	b.n	f3a6 <coap_append_array_opt+0x4a>
            if (array[j] == split_char || j == length) {
                part_end = array + j;
                blk = part_end - part_start;
    f37a:	eba5 0508 	sub.w	r5, r5, r8

                rc = coap_append_opt_hdr(m, number - current_number, blk);
    f37e:	462a      	mov	r2, r5
    f380:	ebab 0101 	sub.w	r1, fp, r1
    f384:	4650      	mov	r0, sl
    f386:	f7ff ffa3 	bl	f2d0 <coap_append_opt_hdr>
                if (rc) {
    f38a:	4603      	mov	r3, r0
    f38c:	b9b8      	cbnz	r0, f3be <coap_append_array_opt+0x62>
                    return rc;
                }
                rc = os_mbuf_append(m, part_start, blk);
    f38e:	b2aa      	uxth	r2, r5
    f390:	4641      	mov	r1, r8
    f392:	4650      	mov	r0, sl
    f394:	f001 fdbe 	bl	10f14 <os_mbuf_append>
                if (rc) {
    f398:	4603      	mov	r3, r0
    f39a:	b980      	cbnz	r0, f3be <coap_append_array_opt+0x62>
                }

                OC_LOG(DEBUG, "OPTION type %u, delta %u, len %zu\n", number,
                    number - current_number, (int)blk);

                ++j; /* skip the splitter */
    f39c:	3401      	adds	r4, #1
                current_number = number;
                part_start = array + j;
    f39e:	eb06 0804 	add.w	r8, r6, r4
                current_number = number;
    f3a2:	4659      	mov	r1, fp
        for (j = 0; j <= length + 1; ++j) {
    f3a4:	3401      	adds	r4, #1
    f3a6:	1c7b      	adds	r3, r7, #1
    f3a8:	4622      	mov	r2, r4
    f3aa:	42a3      	cmp	r3, r4
    f3ac:	d306      	bcc.n	f3bc <coap_append_array_opt+0x60>
            if (array[j] == split_char || j == length) {
    f3ae:	1935      	adds	r5, r6, r4
    f3b0:	5d33      	ldrb	r3, [r6, r4]
    f3b2:	454b      	cmp	r3, r9
    f3b4:	d0e1      	beq.n	f37a <coap_append_array_opt+0x1e>
    f3b6:	42ba      	cmp	r2, r7
    f3b8:	d1f4      	bne.n	f3a4 <coap_append_array_opt+0x48>
    f3ba:	e7de      	b.n	f37a <coap_append_array_opt+0x1e>

        OC_LOG(DEBUG, "OPTION type %u, delta %u, len %zu\n", number,
            number - current_number, length);
    }

    return 0;
    f3bc:	2300      	movs	r3, #0
}
    f3be:	4618      	mov	r0, r3
    f3c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = coap_append_opt_hdr(m, number - current_number, length);
    f3c4:	463a      	mov	r2, r7
    f3c6:	ebab 0101 	sub.w	r1, fp, r1
    f3ca:	f7ff ff81 	bl	f2d0 <coap_append_opt_hdr>
        if (rc) {
    f3ce:	4603      	mov	r3, r0
    f3d0:	2800      	cmp	r0, #0
    f3d2:	d1f4      	bne.n	f3be <coap_append_array_opt+0x62>
        rc = os_mbuf_append(m, array, length);
    f3d4:	b2ba      	uxth	r2, r7
    f3d6:	4631      	mov	r1, r6
    f3d8:	4650      	mov	r0, sl
    f3da:	f001 fd9b 	bl	10f14 <os_mbuf_append>
    f3de:	4603      	mov	r3, r0
    f3e0:	e7ed      	b.n	f3be <coap_append_array_opt+0x62>

0000f3e2 <coap_append_int_opt>:
{
    f3e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f3e6:	b085      	sub	sp, #20
    f3e8:	9001      	str	r0, [sp, #4]
    f3ea:	4610      	mov	r0, r2
    f3ec:	461c      	mov	r4, r3
    if (0xFF000000 & value) {
    f3ee:	f013 4b7f 	ands.w	fp, r3, #4278190080	; 0xff000000
    f3f2:	d13b      	bne.n	f46c <coap_append_int_opt+0x8a>
    size_t i = 0;
    f3f4:	f04f 0800 	mov.w	r8, #0
    if (0xFFFF0000 & value) {
    f3f8:	0c25      	lsrs	r5, r4, #16
    f3fa:	042d      	lsls	r5, r5, #16
    f3fc:	2d00      	cmp	r5, #0
    f3fe:	d038      	beq.n	f472 <coap_append_int_opt+0x90>
        ++i;
    f400:	f108 0701 	add.w	r7, r8, #1
    if (0xFFFFFF00 & value) {
    f404:	f034 0aff 	bics.w	sl, r4, #255	; 0xff
    f408:	d035      	beq.n	f476 <coap_append_int_opt+0x94>
        ++i;
    f40a:	1c7e      	adds	r6, r7, #1
    if (0xFFFFFFFF & value) {
    f40c:	b3ac      	cbz	r4, f47a <coap_append_int_opt+0x98>
        ++i;
    f40e:	f106 0901 	add.w	r9, r6, #1
    rc = coap_append_opt_hdr(m, number - current_number, i);
    f412:	464a      	mov	r2, r9
    f414:	1a09      	subs	r1, r1, r0
    f416:	9801      	ldr	r0, [sp, #4]
    f418:	f7ff ff5a 	bl	f2d0 <coap_append_opt_hdr>
    if (rc) {
    f41c:	4603      	mov	r3, r0
    f41e:	bb08      	cbnz	r0, f464 <coap_append_int_opt+0x82>
    if (0xFF000000 & value) {
    f420:	f1bb 0f00 	cmp.w	fp, #0
    f424:	d002      	beq.n	f42c <coap_append_int_opt+0x4a>
        buffer[i++] = (uint8_t)(value >> 24);
    f426:	0e23      	lsrs	r3, r4, #24
    f428:	f88d 300c 	strb.w	r3, [sp, #12]
    if (0xFFFF0000 & value) {
    f42c:	b12d      	cbz	r5, f43a <coap_append_int_opt+0x58>
        buffer[i++] = (uint8_t)(value >> 16);
    f42e:	f3c4 4307 	ubfx	r3, r4, #16, #8
    f432:	aa04      	add	r2, sp, #16
    f434:	4490      	add	r8, r2
    f436:	f808 3c04 	strb.w	r3, [r8, #-4]
    if (0xFFFFFF00 & value) {
    f43a:	f1ba 0f00 	cmp.w	sl, #0
    f43e:	d005      	beq.n	f44c <coap_append_int_opt+0x6a>
        buffer[i++] = (uint8_t)(value >> 8);
    f440:	f3c4 2307 	ubfx	r3, r4, #8, #8
    f444:	aa04      	add	r2, sp, #16
    f446:	4417      	add	r7, r2
    f448:	f807 3c04 	strb.w	r3, [r7, #-4]
    if (0xFFFFFFFF & value) {
    f44c:	b11c      	cbz	r4, f456 <coap_append_int_opt+0x74>
        buffer[i++] = (uint8_t)(value);
    f44e:	ab04      	add	r3, sp, #16
    f450:	441e      	add	r6, r3
    f452:	f806 4c04 	strb.w	r4, [r6, #-4]
    return os_mbuf_append(m, buffer, i);
    f456:	fa1f f289 	uxth.w	r2, r9
    f45a:	a903      	add	r1, sp, #12
    f45c:	9801      	ldr	r0, [sp, #4]
    f45e:	f001 fd59 	bl	10f14 <os_mbuf_append>
    f462:	4603      	mov	r3, r0
}
    f464:	4618      	mov	r0, r3
    f466:	b005      	add	sp, #20
    f468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ++i;
    f46c:	f04f 0801 	mov.w	r8, #1
    f470:	e7c2      	b.n	f3f8 <coap_append_int_opt+0x16>
    f472:	4647      	mov	r7, r8
    f474:	e7c6      	b.n	f404 <coap_append_int_opt+0x22>
    f476:	463e      	mov	r6, r7
    f478:	e7c8      	b.n	f40c <coap_append_int_opt+0x2a>
    f47a:	46b1      	mov	r9, r6
    f47c:	e7c9      	b.n	f412 <coap_append_int_opt+0x30>
	...

0000f480 <coap_get_mid>:
}
/*---------------------------------------------------------------------------*/
uint16_t
coap_get_mid(void)
{
    return ++current_mid;
    f480:	4b02      	ldr	r3, [pc, #8]	; (f48c <coap_get_mid+0xc>)
    f482:	8818      	ldrh	r0, [r3, #0]
    f484:	3001      	adds	r0, #1
    f486:	b280      	uxth	r0, r0
    f488:	8018      	strh	r0, [r3, #0]
}
    f48a:	4770      	bx	lr
    f48c:	20000584 	.word	0x20000584

0000f490 <coap_init_message>:
/*---------------------------------------------------------------------------*/
void
coap_init_message(coap_packet_t *pkt, coap_message_type_t type,
                  uint8_t code, uint16_t mid)
{
    f490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f492:	4604      	mov	r4, r0
    f494:	460f      	mov	r7, r1
    f496:	4616      	mov	r6, r2
    f498:	461d      	mov	r5, r3
    /* Important thing */
    memset(pkt, 0, sizeof(coap_packet_t));
    f49a:	226c      	movs	r2, #108	; 0x6c
    f49c:	2100      	movs	r1, #0
    f49e:	f003 f83a 	bl	12516 <memset>

    pkt->type = type;
    f4a2:	7067      	strb	r7, [r4, #1]
    pkt->code = code;
    f4a4:	70a6      	strb	r6, [r4, #2]
    pkt->mid = mid;
    f4a6:	80a5      	strh	r5, [r4, #4]
}
    f4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000f4ac <coap_serialize_message>:

/*---------------------------------------------------------------------------*/

int
coap_serialize_message(coap_packet_t *pkt, struct os_mbuf *m)
{
    f4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f4b0:	b082      	sub	sp, #8
    f4b2:	4604      	mov	r4, r0
    f4b4:	460d      	mov	r5, r1
    uint32_t u32;
    int tcp_hdr;
    int len, data_len;

    /* Initialize */
    pkt->version = 1;
    f4b6:	2301      	movs	r3, #1
    f4b8:	7003      	strb	r3, [r0, #0]
 * Whether transport uses TCP-style headers or not.
 */
static inline int
oc_endpoint_use_tcp(struct oc_endpoint *oe)
{
    return oc_transports[oe->ep.oe_type]->ot_flags & OC_TRANSPORT_USE_TCP;
    f4ba:	7e0b      	ldrb	r3, [r1, #24]
    f4bc:	f003 0307 	and.w	r3, r3, #7
    f4c0:	4aaf      	ldr	r2, [pc, #700]	; (f780 <coap_serialize_message+0x2d4>)
    f4c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f4c6:	781e      	ldrb	r6, [r3, #0]
    f4c8:	f006 0601 	and.w	r6, r6, #1

    /*
     * Move data pointer, leave enough space to insert coap header and
     * token before options.
     */
    m->om_data += (sizeof(struct coap_tcp_hdr32) + pkt->token_len);
    f4cc:	7983      	ldrb	r3, [r0, #6]
    f4ce:	1d9a      	adds	r2, r3, #6
    f4d0:	680b      	ldr	r3, [r1, #0]
    f4d2:	4413      	add	r3, r2
    f4d4:	600b      	str	r3, [r1, #0]
    COAP_SERIALIZE_BYTE_OPT(pkt, m, COAP_OPTION_ETAG, etag, "ETag");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_IF_NONE_MATCH,
        content_format - pkt-> content_format /* hack to get a zero field */,
                           "If-None-Match");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_OBSERVE, observe, "Observe");
    f4d6:	7bc3      	ldrb	r3, [r0, #15]
    f4d8:	f013 0f40 	tst.w	r3, #64	; 0x40
    f4dc:	d177      	bne.n	f5ce <coap_serialize_message+0x122>
    current_number = 0;
    f4de:	2700      	movs	r7, #0
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_URI_PORT, uri_port,
                              "Uri-Port");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_PATH,
                              location_path, '/', "Location-Path");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
    f4e0:	7c23      	ldrb	r3, [r4, #16]
    f4e2:	f013 0f08 	tst.w	r3, #8
    f4e6:	d17c      	bne.n	f5e2 <coap_serialize_message+0x136>
                              "Uri-Path");

    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_CONTENT_FORMAT, content_format,
    f4e8:	7c23      	ldrb	r3, [r4, #16]
    f4ea:	f013 0f10 	tst.w	r3, #16
    f4ee:	f040 8086 	bne.w	f5fe <coap_serialize_message+0x152>
                           "Content-Format");
#if 0
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_MAX_AGE, max_age, "Max-Age");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
    f4f2:	f994 3010 	ldrsb.w	r3, [r4, #16]
    f4f6:	2b00      	cmp	r3, #0
    f4f8:	f2c0 808b 	blt.w	f612 <coap_serialize_message+0x166>
                              "Uri-Query");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_ACCEPT, accept, "Accept");
    f4fc:	7c63      	ldrb	r3, [r4, #17]
    f4fe:	f013 0f02 	tst.w	r3, #2
    f502:	f040 8094 	bne.w	f62e <coap_serialize_message+0x182>
#if 0
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_QUERY,
                              location_query, '&', "Location-Query");
#endif
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
    f506:	f994 3011 	ldrsb.w	r3, [r4, #17]
    f50a:	2b00      	cmp	r3, #0
    f50c:	f2c0 8098 	blt.w	f640 <coap_serialize_message+0x194>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK1, block1, "Block1");
    f510:	7ca3      	ldrb	r3, [r4, #18]
    f512:	f013 0f08 	tst.w	r3, #8
    f516:	d019      	beq.n	f54c <coap_serialize_message+0xa0>
    f518:	6c63      	ldr	r3, [r4, #68]	; 0x44
    f51a:	ea4f 1803 	mov.w	r8, r3, lsl #4
    f51e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    f522:	b10b      	cbz	r3, f528 <coap_serialize_message+0x7c>
    f524:	f048 0808 	orr.w	r8, r8, #8
    f528:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
    f52c:	0900      	lsrs	r0, r0, #4
    f52e:	f7ff febb 	bl	f2a8 <coap_log_2>
    f532:	f000 030f 	and.w	r3, r0, #15
    f536:	ea43 0308 	orr.w	r3, r3, r8
    f53a:	463a      	mov	r2, r7
    f53c:	211b      	movs	r1, #27
    f53e:	4628      	mov	r0, r5
    f540:	f7ff ff4f 	bl	f3e2 <coap_append_int_opt>
    f544:	2800      	cmp	r0, #0
    f546:	f040 80a5 	bne.w	f694 <coap_serialize_message+0x1e8>
    f54a:	271b      	movs	r7, #27
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE2, size2, "Size2");
    f54c:	7ca3      	ldrb	r3, [r4, #18]
    f54e:	f013 0f10 	tst.w	r3, #16
    f552:	f040 808d 	bne.w	f670 <coap_serialize_message+0x1c4>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_URI, proxy_uri, '\0',
                              "Proxy-Uri");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_SCHEME, proxy_scheme,
                              '\0', "Proxy-Scheme");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
    f556:	7da3      	ldrb	r3, [r4, #22]
    f558:	f013 0f10 	tst.w	r3, #16
    f55c:	f040 8091 	bne.w	f682 <coap_serialize_message+0x1d6>

    /* Payload marker */
    if (pkt->payload_len) {
    f560:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    f564:	2b00      	cmp	r3, #0
    f566:	f040 80a0 	bne.w	f6aa <coap_serialize_message+0x1fe>
        if (os_mbuf_append(m, "\xff", 1)) {
            goto err_mem;
        }
    }
    data_len = OS_MBUF_PKTLEN(m) + pkt->payload_len;
    f56a:	8a2f      	ldrh	r7, [r5, #16]
    f56c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    f570:	441f      	add	r7, r3

    /*
     * Set header fields, aka CoAP header alignment nightmare.
     */
    if (!tcp_hdr) {
    f572:	2e00      	cmp	r6, #0
    f574:	f000 80a1 	beq.w	f6ba <coap_serialize_message+0x20e>
        cuh->code = pkt->code;
        u16 = htons(pkt->mid);
        memcpy(&cuh->id, &u16, sizeof(u16));
        memcpy(cuh + 1, pkt->token, pkt->token_len);
    } else {
        if (data_len < 13) {
    f578:	2f0c      	cmp	r7, #12
    f57a:	f340 80cf 	ble.w	f71c <coap_serialize_message+0x270>
            cth0 = (struct coap_tcp_hdr0 *)m->om_data;
            cth0->data_len = data_len;
            cth0->token_len = pkt->token_len;
            cth0->code = pkt->code;
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
        } else if (data_len < 269) {
    f57e:	f5b7 7f86 	cmp.w	r7, #268	; 0x10c
    f582:	f340 80e2 	ble.w	f74a <coap_serialize_message+0x29e>
            cth8->type = COAP_TCP_TYPE8;
            cth8->token_len = pkt->token_len;
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
            cth8->code = pkt->code;
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
        } else if (data_len < 65805) {
    f586:	4b7f      	ldr	r3, [pc, #508]	; (f784 <coap_serialize_message+0x2d8>)
    f588:	429f      	cmp	r7, r3
    f58a:	f300 80ff 	bgt.w	f78c <coap_serialize_message+0x2e0>
            len = sizeof(struct coap_tcp_hdr16) + pkt->token_len;
    f58e:	79a1      	ldrb	r1, [r4, #6]
            os_mbuf_prepend(m, len);
    f590:	3104      	adds	r1, #4
    f592:	4628      	mov	r0, r5
    f594:	f001 fec6 	bl	11324 <os_mbuf_prepend>
            cth16 = (struct coap_tcp_hdr16 *)m->om_data;
    f598:	6828      	ldr	r0, [r5, #0]
            cth16->type = COAP_TCP_TYPE16;
    f59a:	7803      	ldrb	r3, [r0, #0]
    f59c:	220e      	movs	r2, #14
    f59e:	f362 1307 	bfi	r3, r2, #4, #4
    f5a2:	7003      	strb	r3, [r0, #0]
            cth16->token_len = pkt->token_len;
    f5a4:	79a2      	ldrb	r2, [r4, #6]
    f5a6:	b2db      	uxtb	r3, r3
    f5a8:	f362 0303 	bfi	r3, r2, #0, #4
    f5ac:	7003      	strb	r3, [r0, #0]
            u16 = htons(data_len - COAP_TCP_LENGTH16_OFF);
    f5ae:	f2a7 170d 	subw	r7, r7, #269	; 0x10d
    f5b2:	f3c7 2307 	ubfx	r3, r7, #8, #8
    f5b6:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
            memcpy(&cth16->data_len, &u16, sizeof(u16));
    f5ba:	f8a0 7001 	strh.w	r7, [r0, #1]
            cth16->code = pkt->code;
    f5be:	78a3      	ldrb	r3, [r4, #2]
    f5c0:	70c3      	strb	r3, [r0, #3]
            memcpy(cth16 + 1, pkt->token, pkt->token_len);
    f5c2:	79a2      	ldrb	r2, [r4, #6]
    f5c4:	1de1      	adds	r1, r4, #7
    f5c6:	3004      	adds	r0, #4
    f5c8:	f002 ff7c 	bl	124c4 <memcpy>
    f5cc:	e096      	b.n	f6fc <coap_serialize_message+0x250>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_OBSERVE, observe, "Observe");
    f5ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
    f5d0:	2200      	movs	r2, #0
    f5d2:	2106      	movs	r1, #6
    f5d4:	4628      	mov	r0, r5
    f5d6:	f7ff ff04 	bl	f3e2 <coap_append_int_opt>
    f5da:	2800      	cmp	r0, #0
    f5dc:	d15a      	bne.n	f694 <coap_serialize_message+0x1e8>
    f5de:	2706      	movs	r7, #6
    f5e0:	e77e      	b.n	f4e0 <coap_serialize_message+0x34>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
    f5e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    f5e4:	222f      	movs	r2, #47	; 0x2f
    f5e6:	9201      	str	r2, [sp, #4]
    f5e8:	9300      	str	r3, [sp, #0]
    f5ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f5ec:	463a      	mov	r2, r7
    f5ee:	210b      	movs	r1, #11
    f5f0:	4628      	mov	r0, r5
    f5f2:	f7ff feb3 	bl	f35c <coap_append_array_opt>
    f5f6:	2800      	cmp	r0, #0
    f5f8:	d14c      	bne.n	f694 <coap_serialize_message+0x1e8>
    f5fa:	270b      	movs	r7, #11
    f5fc:	e774      	b.n	f4e8 <coap_serialize_message+0x3c>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_CONTENT_FORMAT, content_format,
    f5fe:	8b23      	ldrh	r3, [r4, #24]
    f600:	463a      	mov	r2, r7
    f602:	210c      	movs	r1, #12
    f604:	4628      	mov	r0, r5
    f606:	f7ff feec 	bl	f3e2 <coap_append_int_opt>
    f60a:	2800      	cmp	r0, #0
    f60c:	d142      	bne.n	f694 <coap_serialize_message+0x1e8>
    f60e:	270c      	movs	r7, #12
    f610:	e76f      	b.n	f4f2 <coap_serialize_message+0x46>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
    f612:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
    f616:	2226      	movs	r2, #38	; 0x26
    f618:	9201      	str	r2, [sp, #4]
    f61a:	9300      	str	r3, [sp, #0]
    f61c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    f61e:	463a      	mov	r2, r7
    f620:	210f      	movs	r1, #15
    f622:	4628      	mov	r0, r5
    f624:	f7ff fe9a 	bl	f35c <coap_append_array_opt>
    f628:	bba0      	cbnz	r0, f694 <coap_serialize_message+0x1e8>
    f62a:	270f      	movs	r7, #15
    f62c:	e766      	b.n	f4fc <coap_serialize_message+0x50>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_ACCEPT, accept, "Accept");
    f62e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    f630:	463a      	mov	r2, r7
    f632:	2111      	movs	r1, #17
    f634:	4628      	mov	r0, r5
    f636:	f7ff fed4 	bl	f3e2 <coap_append_int_opt>
    f63a:	bb58      	cbnz	r0, f694 <coap_serialize_message+0x1e8>
    f63c:	2711      	movs	r7, #17
    f63e:	e762      	b.n	f506 <coap_serialize_message+0x5a>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
    f640:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f642:	ea4f 1803 	mov.w	r8, r3, lsl #4
    f646:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    f64a:	b10b      	cbz	r3, f650 <coap_serialize_message+0x1a4>
    f64c:	f048 0808 	orr.w	r8, r8, #8
    f650:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    f652:	0900      	lsrs	r0, r0, #4
    f654:	f7ff fe28 	bl	f2a8 <coap_log_2>
    f658:	f000 030f 	and.w	r3, r0, #15
    f65c:	ea43 0308 	orr.w	r3, r3, r8
    f660:	463a      	mov	r2, r7
    f662:	2117      	movs	r1, #23
    f664:	4628      	mov	r0, r5
    f666:	f7ff febc 	bl	f3e2 <coap_append_int_opt>
    f66a:	b998      	cbnz	r0, f694 <coap_serialize_message+0x1e8>
    f66c:	2717      	movs	r7, #23
    f66e:	e74f      	b.n	f510 <coap_serialize_message+0x64>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE2, size2, "Size2");
    f670:	6d23      	ldr	r3, [r4, #80]	; 0x50
    f672:	463a      	mov	r2, r7
    f674:	211c      	movs	r1, #28
    f676:	4628      	mov	r0, r5
    f678:	f7ff feb3 	bl	f3e2 <coap_append_int_opt>
    f67c:	b950      	cbnz	r0, f694 <coap_serialize_message+0x1e8>
    f67e:	271c      	movs	r7, #28
    f680:	e769      	b.n	f556 <coap_serialize_message+0xaa>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
    f682:	6d63      	ldr	r3, [r4, #84]	; 0x54
    f684:	463a      	mov	r2, r7
    f686:	213c      	movs	r1, #60	; 0x3c
    f688:	4628      	mov	r0, r5
    f68a:	f7ff feaa 	bl	f3e2 <coap_append_int_opt>
    f68e:	2800      	cmp	r0, #0
    f690:	f43f af66 	beq.w	f560 <coap_serialize_message+0xb4>
        OS_MBUF_PKTLEN(m), OS_MBUF_PKTLEN(m) - pkt->payload_len,
        pkt->payload_len);

    return 0;
err_mem:
    if (pkt->payload_m) {
    f694:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    f696:	2800      	cmp	r0, #0
    f698:	f000 80ac 	beq.w	f7f4 <coap_serialize_message+0x348>
        os_mbuf_free_chain(pkt->payload_m);
    f69c:	f001 fc1e 	bl	10edc <os_mbuf_free_chain>
    }
    STATS_INC(coap_stats, oerr);
    return -1;
    f6a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    f6a4:	b002      	add	sp, #8
    f6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (os_mbuf_append(m, "\xff", 1)) {
    f6aa:	2201      	movs	r2, #1
    f6ac:	4936      	ldr	r1, [pc, #216]	; (f788 <coap_serialize_message+0x2dc>)
    f6ae:	4628      	mov	r0, r5
    f6b0:	f001 fc30 	bl	10f14 <os_mbuf_append>
    f6b4:	2800      	cmp	r0, #0
    f6b6:	d1ed      	bne.n	f694 <coap_serialize_message+0x1e8>
    f6b8:	e757      	b.n	f56a <coap_serialize_message+0xbe>
        len = sizeof(struct coap_udp_hdr) + pkt->token_len;
    f6ba:	79a1      	ldrb	r1, [r4, #6]
        os_mbuf_prepend(m, len);
    f6bc:	3104      	adds	r1, #4
    f6be:	4628      	mov	r0, r5
    f6c0:	f001 fe30 	bl	11324 <os_mbuf_prepend>
        cuh = (struct coap_udp_hdr *)m->om_data;
    f6c4:	6828      	ldr	r0, [r5, #0]
        cuh->version = pkt->version;
    f6c6:	7822      	ldrb	r2, [r4, #0]
    f6c8:	7803      	ldrb	r3, [r0, #0]
    f6ca:	f362 1387 	bfi	r3, r2, #6, #2
    f6ce:	7003      	strb	r3, [r0, #0]
        cuh->type = pkt->type;
    f6d0:	7862      	ldrb	r2, [r4, #1]
    f6d2:	b2db      	uxtb	r3, r3
    f6d4:	f362 1305 	bfi	r3, r2, #4, #2
    f6d8:	7003      	strb	r3, [r0, #0]
        cuh->token_len = pkt->token_len;
    f6da:	79a2      	ldrb	r2, [r4, #6]
    f6dc:	b2db      	uxtb	r3, r3
    f6de:	f362 0303 	bfi	r3, r2, #0, #4
    f6e2:	7003      	strb	r3, [r0, #0]
        cuh->code = pkt->code;
    f6e4:	78a3      	ldrb	r3, [r4, #2]
    f6e6:	7043      	strb	r3, [r0, #1]
        u16 = htons(pkt->mid);
    f6e8:	88a2      	ldrh	r2, [r4, #4]
    f6ea:	0213      	lsls	r3, r2, #8
    f6ec:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
        memcpy(&cuh->id, &u16, sizeof(u16));
    f6f0:	8043      	strh	r3, [r0, #2]
        memcpy(cuh + 1, pkt->token, pkt->token_len);
    f6f2:	79a2      	ldrb	r2, [r4, #6]
    f6f4:	1de1      	adds	r1, r4, #7
    f6f6:	3004      	adds	r0, #4
    f6f8:	f002 fee4 	bl	124c4 <memcpy>
    if (pkt->payload_m) {
    f6fc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    f6fe:	2800      	cmp	r0, #0
    f700:	d076      	beq.n	f7f0 <coap_serialize_message+0x344>
        assert(pkt->payload_len <= OS_MBUF_PKTLEN(pkt->payload_m));
    f702:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    f706:	8a01      	ldrh	r1, [r0, #16]
    f708:	428b      	cmp	r3, r1
    f70a:	d867      	bhi.n	f7dc <coap_serialize_message+0x330>
        if (pkt->payload_len < OS_MBUF_PKTLEN(pkt->payload_m)) {
    f70c:	428b      	cmp	r3, r1
    f70e:	d36b      	bcc.n	f7e8 <coap_serialize_message+0x33c>
        os_mbuf_concat(m, pkt->payload_m);
    f710:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    f712:	4628      	mov	r0, r5
    f714:	f001 fea9 	bl	1146a <os_mbuf_concat>
    return 0;
    f718:	2000      	movs	r0, #0
    f71a:	e7c3      	b.n	f6a4 <coap_serialize_message+0x1f8>
            len = sizeof(struct coap_tcp_hdr0) + pkt->token_len;
    f71c:	79a1      	ldrb	r1, [r4, #6]
            os_mbuf_prepend(m, len);
    f71e:	3102      	adds	r1, #2
    f720:	4628      	mov	r0, r5
    f722:	f001 fdff 	bl	11324 <os_mbuf_prepend>
            cth0 = (struct coap_tcp_hdr0 *)m->om_data;
    f726:	6828      	ldr	r0, [r5, #0]
            cth0->data_len = data_len;
    f728:	7803      	ldrb	r3, [r0, #0]
    f72a:	f367 1307 	bfi	r3, r7, #4, #4
    f72e:	7003      	strb	r3, [r0, #0]
            cth0->token_len = pkt->token_len;
    f730:	79a2      	ldrb	r2, [r4, #6]
    f732:	b2db      	uxtb	r3, r3
    f734:	f362 0303 	bfi	r3, r2, #0, #4
    f738:	7003      	strb	r3, [r0, #0]
            cth0->code = pkt->code;
    f73a:	78a3      	ldrb	r3, [r4, #2]
    f73c:	7043      	strb	r3, [r0, #1]
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
    f73e:	79a2      	ldrb	r2, [r4, #6]
    f740:	1de1      	adds	r1, r4, #7
    f742:	3002      	adds	r0, #2
    f744:	f002 febe 	bl	124c4 <memcpy>
    f748:	e7d8      	b.n	f6fc <coap_serialize_message+0x250>
            len = sizeof(struct coap_tcp_hdr8) + pkt->token_len;
    f74a:	79a1      	ldrb	r1, [r4, #6]
            os_mbuf_prepend(m, len);
    f74c:	3103      	adds	r1, #3
    f74e:	4628      	mov	r0, r5
    f750:	f001 fde8 	bl	11324 <os_mbuf_prepend>
            cth8 = (struct coap_tcp_hdr8 *)m->om_data;
    f754:	6828      	ldr	r0, [r5, #0]
            cth8->type = COAP_TCP_TYPE8;
    f756:	7803      	ldrb	r3, [r0, #0]
    f758:	220d      	movs	r2, #13
    f75a:	f362 1307 	bfi	r3, r2, #4, #4
    f75e:	7003      	strb	r3, [r0, #0]
            cth8->token_len = pkt->token_len;
    f760:	79a2      	ldrb	r2, [r4, #6]
    f762:	b2db      	uxtb	r3, r3
    f764:	f362 0303 	bfi	r3, r2, #0, #4
    f768:	7003      	strb	r3, [r0, #0]
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
    f76a:	3f0d      	subs	r7, #13
    f76c:	7047      	strb	r7, [r0, #1]
            cth8->code = pkt->code;
    f76e:	78a3      	ldrb	r3, [r4, #2]
    f770:	7083      	strb	r3, [r0, #2]
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
    f772:	79a2      	ldrb	r2, [r4, #6]
    f774:	1de1      	adds	r1, r4, #7
    f776:	3003      	adds	r0, #3
    f778:	f002 fea4 	bl	124c4 <memcpy>
    f77c:	e7be      	b.n	f6fc <coap_serialize_message+0x250>
    f77e:	bf00      	nop
    f780:	20003bd0 	.word	0x20003bd0
    f784:	0001010c 	.word	0x0001010c
    f788:	0002c040 	.word	0x0002c040
            len = sizeof(struct coap_tcp_hdr32) + pkt->token_len;
    f78c:	79a1      	ldrb	r1, [r4, #6]
            os_mbuf_prepend(m, len);
    f78e:	3106      	adds	r1, #6
    f790:	4628      	mov	r0, r5
    f792:	f001 fdc7 	bl	11324 <os_mbuf_prepend>
            cth32 = (struct coap_tcp_hdr32 *)m->om_data;
    f796:	6828      	ldr	r0, [r5, #0]
            cth32->type = COAP_TCP_TYPE32;
    f798:	7803      	ldrb	r3, [r0, #0]
    f79a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    f79e:	7003      	strb	r3, [r0, #0]
            cth32->token_len = pkt->token_len;
    f7a0:	79a2      	ldrb	r2, [r4, #6]
    f7a2:	b2db      	uxtb	r3, r3
    f7a4:	f362 0303 	bfi	r3, r2, #0, #4
    f7a8:	7003      	strb	r3, [r0, #0]
            u32 = htonl(data_len - COAP_TCP_LENGTH32_OFF);
    f7aa:	f5a7 3780 	sub.w	r7, r7, #65536	; 0x10000
    f7ae:	f2a7 170d 	subw	r7, r7, #269	; 0x10d
    f7b2:	123b      	asrs	r3, r7, #8
    f7b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    f7b8:	ea43 6317 	orr.w	r3, r3, r7, lsr #24
    f7bc:	023a      	lsls	r2, r7, #8
    f7be:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
    f7c2:	4313      	orrs	r3, r2
    f7c4:	ea43 6707 	orr.w	r7, r3, r7, lsl #24
            memcpy(&cth32->data_len, &u32, sizeof(u32));
    f7c8:	f8c0 7001 	str.w	r7, [r0, #1]
            cth32->code = pkt->code;
    f7cc:	78a3      	ldrb	r3, [r4, #2]
    f7ce:	7143      	strb	r3, [r0, #5]
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
    f7d0:	79a2      	ldrb	r2, [r4, #6]
    f7d2:	1de1      	adds	r1, r4, #7
    f7d4:	3006      	adds	r0, #6
    f7d6:	f002 fe75 	bl	124c4 <memcpy>
    f7da:	e78f      	b.n	f6fc <coap_serialize_message+0x250>
        assert(pkt->payload_len <= OS_MBUF_PKTLEN(pkt->payload_m));
    f7dc:	2300      	movs	r3, #0
    f7de:	461a      	mov	r2, r3
    f7e0:	4619      	mov	r1, r3
    f7e2:	4618      	mov	r0, r3
    f7e4:	f000 fefa 	bl	105dc <__assert_func>
            os_mbuf_adj(pkt->payload_m,
    f7e8:	1ac9      	subs	r1, r1, r3
    f7ea:	f001 fcac 	bl	11146 <os_mbuf_adj>
    f7ee:	e78f      	b.n	f710 <coap_serialize_message+0x264>
    return 0;
    f7f0:	2000      	movs	r0, #0
    f7f2:	e757      	b.n	f6a4 <coap_serialize_message+0x1f8>
    return -1;
    f7f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f7f8:	e754      	b.n	f6a4 <coap_serialize_message+0x1f8>
    f7fa:	bf00      	nop

0000f7fc <coap_send_message>:
/*---------------------------------------------------------------------------*/
void
coap_send_message(struct os_mbuf *m, int dup)
{
    f7fc:	b508      	push	{r3, lr}
    f7fe:	4603      	mov	r3, r0
    OC_LOG(INFO, "coap_send_message(): (%u) %s\n", OS_MBUF_PKTLEN(m),
      dup ? "dup" : "");

    STATS_INC(coap_stats, oframe);

    if (dup) {
    f800:	b119      	cbz	r1, f80a <coap_send_message+0xe>
        m = os_mbuf_dup(m);
    f802:	f001 fbdb 	bl	10fbc <os_mbuf_dup>
        if (!m) {
    f806:	4603      	mov	r3, r0
    f808:	b110      	cbz	r0, f810 <coap_send_message+0x14>
            STATS_INC(coap_stats, oerr);
            return;
        }
    }
    oc_send_message(m);
    f80a:	4618      	mov	r0, r3
    f80c:	f7ff fc6e 	bl	f0ec <oc_send_message>
}
    f810:	bd08      	pop	{r3, pc}

0000f812 <coap_set_token>:
    }
}
/*---------------------------------------------------------------------------*/
int
coap_set_token(coap_packet_t *pkt, const uint8_t *token, size_t token_len)
{
    f812:	b510      	push	{r4, lr}
    pkt->token_len = MIN(COAP_TOKEN_LEN, token_len);
    f814:	2a08      	cmp	r2, #8
    f816:	bf28      	it	cs
    f818:	2208      	movcs	r2, #8
    f81a:	b2d4      	uxtb	r4, r2
    f81c:	7184      	strb	r4, [r0, #6]
    memcpy(pkt->token, token, pkt->token_len);
    f81e:	4622      	mov	r2, r4
    f820:	3007      	adds	r0, #7
    f822:	f002 fe4f 	bl	124c4 <memcpy>

    return pkt->token_len;
}
    f826:	4620      	mov	r0, r4
    f828:	bd10      	pop	{r4, pc}

0000f82a <coap_set_header_content_format>:
}
#endif
int
coap_set_header_content_format(coap_packet_t *pkt, unsigned int format)
{
    pkt->content_format = format;
    f82a:	8301      	strh	r1, [r0, #24]
    SET_OPTION(pkt, COAP_OPTION_CONTENT_FORMAT);
    f82c:	7c03      	ldrb	r3, [r0, #16]
    f82e:	f043 0310 	orr.w	r3, r3, #16
    f832:	7403      	strb	r3, [r0, #16]
    return 1;
}
    f834:	2001      	movs	r0, #1
    f836:	4770      	bx	lr

0000f838 <coap_set_header_accept>:

#ifdef OC_CLIENT
int
coap_set_header_accept(coap_packet_t *pkt, unsigned int accept)
{
    pkt->accept = accept;
    f838:	8681      	strh	r1, [r0, #52]	; 0x34
    SET_OPTION(pkt, COAP_OPTION_ACCEPT);
    f83a:	7c43      	ldrb	r3, [r0, #17]
    f83c:	f043 0302 	orr.w	r3, r3, #2
    f840:	7443      	strb	r3, [r0, #17]
    return 1;
}
    f842:	2001      	movs	r0, #1
    f844:	4770      	bx	lr

0000f846 <coap_set_header_uri_path>:
    return maxlen;
}
#ifdef OC_CLIENT
int
coap_set_header_uri_path(coap_packet_t *pkt, const char *path)
{
    f846:	b510      	push	{r4, lr}
    f848:	4604      	mov	r4, r0
    while (path[0] == '/') {
    f84a:	e000      	b.n	f84e <coap_set_header_uri_path+0x8>
        ++path;
    f84c:	3101      	adds	r1, #1
    while (path[0] == '/') {
    f84e:	780b      	ldrb	r3, [r1, #0]
    f850:	2b2f      	cmp	r3, #47	; 0x2f
    f852:	d0fb      	beq.n	f84c <coap_set_header_uri_path+0x6>
    }
    pkt->uri_path = (char *)path;
    f854:	62e1      	str	r1, [r4, #44]	; 0x2c
    pkt->uri_path_len = strlen(path);
    f856:	4608      	mov	r0, r1
    f858:	f002 fea2 	bl	125a0 <strlen>
    f85c:	b280      	uxth	r0, r0
    f85e:	8560      	strh	r0, [r4, #42]	; 0x2a

    SET_OPTION(pkt, COAP_OPTION_URI_PATH);
    f860:	7c23      	ldrb	r3, [r4, #16]
    f862:	f043 0308 	orr.w	r3, r3, #8
    f866:	7423      	strb	r3, [r4, #16]
    return pkt->uri_path_len;
}
    f868:	bd10      	pop	{r4, pc}

0000f86a <coap_set_header_uri_query>:
    return maxlen;
}
#ifdef OC_CLIENT
int
coap_set_header_uri_query(coap_packet_t *pkt, const char *query)
{
    f86a:	b510      	push	{r4, lr}
    f86c:	4604      	mov	r4, r0
    while (query[0] == '?') {
    f86e:	e000      	b.n	f872 <coap_set_header_uri_query+0x8>
        ++query;
    f870:	3101      	adds	r1, #1
    while (query[0] == '?') {
    f872:	780b      	ldrb	r3, [r1, #0]
    f874:	2b3f      	cmp	r3, #63	; 0x3f
    f876:	d0fb      	beq.n	f870 <coap_set_header_uri_query+0x6>
    }
    pkt->uri_query = (char *)query;
    f878:	65e1      	str	r1, [r4, #92]	; 0x5c
    pkt->uri_query_len = strlen(query);
    f87a:	4608      	mov	r0, r1
    f87c:	f002 fe90 	bl	125a0 <strlen>
    f880:	b280      	uxth	r0, r0
    f882:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58

    SET_OPTION(pkt, COAP_OPTION_URI_QUERY);
    f886:	7c23      	ldrb	r3, [r4, #16]
    f888:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f88c:	7423      	strb	r3, [r4, #16]
    return pkt->uri_query_len;
}
    f88e:	bd10      	pop	{r4, pc}

0000f890 <coap_set_header_observe>:
}

int
coap_set_header_observe(coap_packet_t *pkt, uint32_t observe)
{
    pkt->observe = observe;
    f890:	6301      	str	r1, [r0, #48]	; 0x30
    SET_OPTION(pkt, COAP_OPTION_OBSERVE);
    f892:	7bc3      	ldrb	r3, [r0, #15]
    f894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f898:	73c3      	strb	r3, [r0, #15]
    return 1;
}
    f89a:	2001      	movs	r0, #1
    f89c:	4770      	bx	lr
	...

0000f8a0 <oc_evq_get>:

struct os_eventq *
oc_evq_get(void)
{
    return oc_evq;
}
    f8a0:	4b01      	ldr	r3, [pc, #4]	; (f8a8 <oc_evq_get+0x8>)
    f8a2:	6818      	ldr	r0, [r3, #0]
    f8a4:	4770      	bx	lr
    f8a6:	bf00      	nop
    f8a8:	20000588 	.word	0x20000588

0000f8ac <oc_evq_set>:

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
    f8ac:	4b01      	ldr	r3, [pc, #4]	; (f8b4 <oc_evq_set+0x8>)
    f8ae:	6018      	str	r0, [r3, #0]
}
    f8b0:	4770      	bx	lr
    f8b2:	bf00      	nop
    f8b4:	20000588 	.word	0x20000588

0000f8b8 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
    f8b8:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
    f8ba:	7e03      	ldrb	r3, [r0, #24]
    f8bc:	f003 0307 	and.w	r3, r3, #7
    f8c0:	4a04      	ldr	r2, [pc, #16]	; (f8d4 <oc_send_buffer+0x1c>)
    f8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
    f8c6:	b113      	cbz	r3, f8ce <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
    f8c8:	68db      	ldr	r3, [r3, #12]
    f8ca:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
    f8cc:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
    f8ce:	f001 fb05 	bl	10edc <os_mbuf_free_chain>
}
    f8d2:	e7fb      	b.n	f8cc <oc_send_buffer+0x14>
    f8d4:	20003bd0 	.word	0x20003bd0

0000f8d8 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
    f8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8dc:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
    f8de:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
    f8e0:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
    f8e2:	e002      	b.n	f8ea <oc_send_multicast_message+0x12>
    f8e4:	4635      	mov	r5, r6
    f8e6:	3401      	adds	r4, #1
    f8e8:	462e      	mov	r6, r5
    f8ea:	2c07      	cmp	r4, #7
    f8ec:	dc12      	bgt.n	f914 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
    f8ee:	4b0c      	ldr	r3, [pc, #48]	; (f920 <oc_send_multicast_message+0x48>)
    f8f0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    f8f4:	2d00      	cmp	r5, #0
    f8f6:	d0f5      	beq.n	f8e4 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
    f8f8:	2e00      	cmp	r6, #0
    f8fa:	d0f4      	beq.n	f8e6 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
    f8fc:	4638      	mov	r0, r7
    f8fe:	f001 fb5d 	bl	10fbc <os_mbuf_dup>
    f902:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
    f904:	6933      	ldr	r3, [r6, #16]
    f906:	4638      	mov	r0, r7
    f908:	4798      	blx	r3
            if (!n) {
    f90a:	f1b8 0f00 	cmp.w	r8, #0
    f90e:	d005      	beq.n	f91c <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
    f910:	4647      	mov	r7, r8
    f912:	e7e8      	b.n	f8e6 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
    f914:	b116      	cbz	r6, f91c <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
    f916:	6933      	ldr	r3, [r6, #16]
    f918:	4638      	mov	r0, r7
    f91a:	4798      	blx	r3
    }
}
    f91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f920:	20003bd0 	.word	0x20003bd0

0000f924 <oc_init>:
    return rc;
}

void
oc_init(void)
{
    f924:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
    f926:	4b07      	ldr	r3, [pc, #28]	; (f944 <oc_init+0x20>)
    f928:	781b      	ldrb	r3, [r3, #0]
    f92a:	b133      	cbz	r3, f93a <oc_init+0x16>
    oc_ri_mem_init();
    f92c:	f7ff fc40 	bl	f1b0 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
    f930:	f001 fa52 	bl	10dd8 <os_eventq_dflt_get>
    f934:	f7ff ffba 	bl	f8ac <oc_evq_set>
}
    f938:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    f93a:	461a      	mov	r2, r3
    f93c:	4619      	mov	r1, r3
    f93e:	4618      	mov	r0, r3
    f940:	f000 fe4c 	bl	105dc <__assert_func>
    f944:	20003bf0 	.word	0x20003bf0

0000f948 <oc_clock_time>:
void oc_clock_init(void)
{
    /* in mynewt clock is initialized elsewhere */
}
oc_clock_time_t oc_clock_time(void)
{
    f948:	b508      	push	{r3, lr}
    return os_time_get();
    f94a:	f002 fbf7 	bl	1213c <os_time_get>
}
    f94e:	bd08      	pop	{r3, pc}

0000f950 <oc_random_rand>:
{
    srand(seed);
}

unsigned short oc_random_rand(void)
{
    f950:	b508      	push	{r3, lr}
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
    f952:	f002 fcbb 	bl	122cc <lrand48>
    return rand();
}
    f956:	b280      	uxth	r0, r0
    f958:	bd08      	pop	{r3, pc}

0000f95a <oc_new_string>:
#include "oic/port/mynewt/config.h"
#include "oic/oc_helpers.h"

void
oc_new_string(oc_string_t *os, const char str[])
{
    f95a:	b570      	push	{r4, r5, r6, lr}
    f95c:	4605      	mov	r5, r0
    f95e:	460e      	mov	r6, r1
    int len = strlen(str);
    f960:	4608      	mov	r0, r1
    f962:	f002 fe1d 	bl	125a0 <strlen>
    f966:	4604      	mov	r4, r0

    os->os_str = malloc(len + 1);
    f968:	3001      	adds	r0, #1
    f96a:	f002 fd3b 	bl	123e4 <malloc>
    f96e:	6068      	str	r0, [r5, #4]
    if (os->os_str) {
    f970:	b140      	cbz	r0, f984 <oc_new_string+0x2a>
        os->os_sz = len + 1;
    f972:	1c63      	adds	r3, r4, #1
    f974:	802b      	strh	r3, [r5, #0]
        memcpy(os->os_str, str, len);
    f976:	4622      	mov	r2, r4
    f978:	4631      	mov	r1, r6
    f97a:	f002 fda3 	bl	124c4 <memcpy>
        os->os_str[len] = '\0';
    f97e:	686b      	ldr	r3, [r5, #4]
    f980:	2200      	movs	r2, #0
    f982:	551a      	strb	r2, [r3, r4]
    }
}
    f984:	bd70      	pop	{r4, r5, r6, pc}

0000f986 <oc_free_string>:
    }
}

void
oc_free_string(oc_string_t *os)
{
    f986:	b510      	push	{r4, lr}
    f988:	4604      	mov	r4, r0
    free(os->os_str);
    f98a:	6840      	ldr	r0, [r0, #4]
    f98c:	f002 fd60 	bl	12450 <free>
    os->os_sz = 0;
    f990:	2300      	movs	r3, #0
    f992:	8023      	strh	r3, [r4, #0]
}
    f994:	bd10      	pop	{r4, pc}

0000f996 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    f996:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    f998:	f000 fe20 	bl	105dc <__assert_func>

0000f99c <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
    f99c:	4b01      	ldr	r3, [pc, #4]	; (f9a4 <sysinit_start+0x8>)
    f99e:	2201      	movs	r2, #1
    f9a0:	701a      	strb	r2, [r3, #0]
}
    f9a2:	4770      	bx	lr
    f9a4:	20003bf0 	.word	0x20003bf0

0000f9a8 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
    f9a8:	4b01      	ldr	r3, [pc, #4]	; (f9b0 <sysinit_end+0x8>)
    f9aa:	2200      	movs	r2, #0
    f9ac:	701a      	strb	r2, [r3, #0]
}
    f9ae:	4770      	bx	lr
    f9b0:	20003bf0 	.word	0x20003bf0

0000f9b4 <ble_app_set_addr>:

    //  Advertise indefinitely as an iBeacon.
    ble_app_advertise();
}

static void ble_app_set_addr(void) {
    f9b4:	b500      	push	{lr}
    f9b6:	b083      	sub	sp, #12
    //  Generate a non-resolvable private address.
    ble_addr_t addr;
    int rc;

    rc = ble_hs_id_gen_rnd(1, &addr);
    f9b8:	4669      	mov	r1, sp
    f9ba:	2001      	movs	r0, #1
    f9bc:	f008 fe52 	bl	18664 <ble_hs_id_gen_rnd>
    assert(rc == 0);
    f9c0:	b938      	cbnz	r0, f9d2 <ble_app_set_addr+0x1e>

    rc = ble_hs_id_set_rnd(addr.val);
    f9c2:	f10d 0001 	add.w	r0, sp, #1
    f9c6:	f008 fe67 	bl	18698 <ble_hs_id_set_rnd>
    assert(rc == 0);
    f9ca:	b940      	cbnz	r0, f9de <ble_app_set_addr+0x2a>
}
    f9cc:	b003      	add	sp, #12
    f9ce:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    f9d2:	2300      	movs	r3, #0
    f9d4:	461a      	mov	r2, r3
    f9d6:	4619      	mov	r1, r3
    f9d8:	4618      	mov	r0, r3
    f9da:	f000 fdff 	bl	105dc <__assert_func>
    assert(rc == 0);
    f9de:	2300      	movs	r3, #0
    f9e0:	461a      	mov	r2, r3
    f9e2:	4619      	mov	r1, r3
    f9e4:	4618      	mov	r0, r3
    f9e6:	f000 fdf9 	bl	105dc <__assert_func>

0000f9ea <ble_app_advertise>:

static void ble_app_advertise(void) {
    f9ea:	b500      	push	{lr}
    f9ec:	b08b      	sub	sp, #44	; 0x2c
    struct ble_gap_adv_params adv_params;
    uint8_t uuid128[16];
    int rc;

    //  Arbitrarily set the UUID to a string of 0x11 bytes.
    memset(uuid128, 0x11, sizeof uuid128);
    f9ee:	f04f 3311 	mov.w	r3, #286331153	; 0x11111111
    f9f2:	9303      	str	r3, [sp, #12]
    f9f4:	9304      	str	r3, [sp, #16]
    f9f6:	9305      	str	r3, [sp, #20]
    f9f8:	9306      	str	r3, [sp, #24]

    //  Set iBeacon parameters: Major=2, Minor=10, RSSI=-60.
    //  RSSI is the Measured Power ranging data (Calibrated tx power at 1 meters). Must be > -126 and < 20.
    rc = ble_ibeacon_set_adv_data(uuid128, 2, 10, -60);  //  TODO: Verify RSSI for your device.
    f9fa:	f06f 033b 	mvn.w	r3, #59	; 0x3b
    f9fe:	220a      	movs	r2, #10
    fa00:	2102      	movs	r1, #2
    fa02:	a803      	add	r0, sp, #12
    fa04:	f009 fa72 	bl	18eec <ble_ibeacon_set_adv_data>
    assert(rc == 0);
    fa08:	b980      	cbnz	r0, fa2c <ble_app_advertise+0x42>

    //  Begin advertising as an iBeacon.
    adv_params = (struct ble_gap_adv_params){ 0 };
    fa0a:	2100      	movs	r1, #0
    fa0c:	9107      	str	r1, [sp, #28]
    fa0e:	9108      	str	r1, [sp, #32]
    fa10:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    rc = ble_gap_adv_start(BLE_OWN_ADDR_RANDOM, NULL, BLE_HS_FOREVER,
    fa14:	9101      	str	r1, [sp, #4]
    fa16:	9100      	str	r1, [sp, #0]
    fa18:	ab07      	add	r3, sp, #28
    fa1a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    fa1e:	2001      	movs	r0, #1
    fa20:	f003 fede 	bl	137e0 <ble_gap_adv_start>
                           &adv_params, NULL, NULL);
    assert(rc == 0);
    fa24:	b940      	cbnz	r0, fa38 <ble_app_advertise+0x4e>
}
    fa26:	b00b      	add	sp, #44	; 0x2c
    fa28:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    fa2c:	2300      	movs	r3, #0
    fa2e:	461a      	mov	r2, r3
    fa30:	4619      	mov	r1, r3
    fa32:	4618      	mov	r0, r3
    fa34:	f000 fdd2 	bl	105dc <__assert_func>
    assert(rc == 0);
    fa38:	2300      	movs	r3, #0
    fa3a:	461a      	mov	r2, r3
    fa3c:	4619      	mov	r1, r3
    fa3e:	4618      	mov	r0, r3
    fa40:	f000 fdcc 	bl	105dc <__assert_func>

0000fa44 <ble_app_on_sync>:
static void ble_app_on_sync(void) {
    fa44:	b508      	push	{r3, lr}
    ble_app_set_addr();
    fa46:	f7ff ffb5 	bl	f9b4 <ble_app_set_addr>
    ble_app_advertise();
    fa4a:	f7ff ffce 	bl	f9ea <ble_app_advertise>
}
    fa4e:	bd08      	pop	{r3, pc}

0000fa50 <start_ble>:
    ble_hs_cfg.sync_cb = ble_app_on_sync;
    fa50:	4b02      	ldr	r3, [pc, #8]	; (fa5c <start_ble+0xc>)
    fa52:	4a03      	ldr	r2, [pc, #12]	; (fa60 <start_ble+0x10>)
    fa54:	611a      	str	r2, [r3, #16]
}
    fa56:	2000      	movs	r0, #0
    fa58:	4770      	bx	lr
    fa5a:	bf00      	nop
    fa5c:	200001dc 	.word	0x200001dc
    fa60:	0000fa45 	.word	0x0000fa45

0000fa64 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
    fa64:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
    fa66:	4803      	ldr	r0, [pc, #12]	; (fa74 <__wrap_coap_receive+0x10>)
    fa68:	f7fe fe9e 	bl	e7a8 <console_printf>
    return -1;
}
    fa6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fa70:	bd08      	pop	{r3, pc}
    fa72:	bf00      	nop
    fa74:	0002c044 	.word	0x0002c044

0000fa78 <_fini>:
//  Other Functions

//  Dummy destructor for global C++ objects, since our program never terminates.  
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
void _fini(void) { }
    fa78:	4770      	bx	lr
	...

0000fa7c <json_encode_object_start>:
    (__e)->je_write((__e)->je_arg, "]", sizeof("]")-1);


int
json_encode_object_start(struct json_encoder *encoder)
{
    fa7c:	b510      	push	{r4, lr}
    fa7e:	4604      	mov	r4, r0
    if (encoder->je_wr_commas) {
    fa80:	7a03      	ldrb	r3, [r0, #8]
    fa82:	f013 0f01 	tst.w	r3, #1
    fa86:	d008      	beq.n	fa9a <json_encode_object_start+0x1e>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
    fa88:	6803      	ldr	r3, [r0, #0]
    fa8a:	2201      	movs	r2, #1
    fa8c:	4908      	ldr	r1, [pc, #32]	; (fab0 <json_encode_object_start+0x34>)
    fa8e:	6840      	ldr	r0, [r0, #4]
    fa90:	4798      	blx	r3
        encoder->je_wr_commas = 0;
    fa92:	7a23      	ldrb	r3, [r4, #8]
    fa94:	f36f 0300 	bfc	r3, #0, #1
    fa98:	7223      	strb	r3, [r4, #8]
    }
    JSON_ENCODE_OBJECT_START(encoder);
    fa9a:	6823      	ldr	r3, [r4, #0]
    fa9c:	2201      	movs	r2, #1
    fa9e:	4905      	ldr	r1, [pc, #20]	; (fab4 <json_encode_object_start+0x38>)
    faa0:	6860      	ldr	r0, [r4, #4]
    faa2:	4798      	blx	r3
    encoder->je_wr_commas = 0;
    faa4:	7a23      	ldrb	r3, [r4, #8]
    faa6:	f36f 0300 	bfc	r3, #0, #1
    faaa:	7223      	strb	r3, [r4, #8]

    return (0);
}
    faac:	2000      	movs	r0, #0
    faae:	bd10      	pop	{r4, pc}
    fab0:	0002bea8 	.word	0x0002bea8
    fab4:	0002c064 	.word	0x0002c064

0000fab8 <json_encode_object_key>:
    return (rc);
}

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
    fab8:	b570      	push	{r4, r5, r6, lr}
    faba:	4604      	mov	r4, r0
    fabc:	460d      	mov	r5, r1
    if (encoder->je_wr_commas) {
    fabe:	7a03      	ldrb	r3, [r0, #8]
    fac0:	f013 0f01 	tst.w	r3, #1
    fac4:	d008      	beq.n	fad8 <json_encode_object_key+0x20>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
    fac6:	6803      	ldr	r3, [r0, #0]
    fac8:	2201      	movs	r2, #1
    faca:	490d      	ldr	r1, [pc, #52]	; (fb00 <json_encode_object_key+0x48>)
    facc:	6840      	ldr	r0, [r0, #4]
    face:	4798      	blx	r3
        encoder->je_wr_commas = 0;
    fad0:	7a23      	ldrb	r3, [r4, #8]
    fad2:	f36f 0300 	bfc	r3, #0, #1
    fad6:	7223      	strb	r3, [r4, #8]
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
    fad8:	6823      	ldr	r3, [r4, #0]
    fada:	2201      	movs	r2, #1
    fadc:	4909      	ldr	r1, [pc, #36]	; (fb04 <json_encode_object_key+0x4c>)
    fade:	6860      	ldr	r0, [r4, #4]
    fae0:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
    fae2:	6826      	ldr	r6, [r4, #0]
    fae4:	4628      	mov	r0, r5
    fae6:	f002 fd5b 	bl	125a0 <strlen>
    faea:	4602      	mov	r2, r0
    faec:	4629      	mov	r1, r5
    faee:	6860      	ldr	r0, [r4, #4]
    faf0:	47b0      	blx	r6
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
    faf2:	6823      	ldr	r3, [r4, #0]
    faf4:	2203      	movs	r2, #3
    faf6:	4904      	ldr	r1, [pc, #16]	; (fb08 <json_encode_object_key+0x50>)
    faf8:	6860      	ldr	r0, [r4, #4]
    fafa:	4798      	blx	r3

    return (0);
}
    fafc:	2000      	movs	r0, #0
    fafe:	bd70      	pop	{r4, r5, r6, pc}
    fb00:	0002bea8 	.word	0x0002bea8
    fb04:	0002beac 	.word	0x0002beac
    fb08:	0002beb0 	.word	0x0002beb0

0000fb0c <json_encode_object_entry>:

int
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
    fb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb0e:	4604      	mov	r4, r0
    fb10:	460d      	mov	r5, r1
    fb12:	4616      	mov	r6, r2
    int rc;

    if (encoder->je_wr_commas) {
    fb14:	7a03      	ldrb	r3, [r0, #8]
    fb16:	f013 0f01 	tst.w	r3, #1
    fb1a:	d008      	beq.n	fb2e <json_encode_object_entry+0x22>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
    fb1c:	6803      	ldr	r3, [r0, #0]
    fb1e:	2201      	movs	r2, #1
    fb20:	4912      	ldr	r1, [pc, #72]	; (fb6c <json_encode_object_entry+0x60>)
    fb22:	6840      	ldr	r0, [r0, #4]
    fb24:	4798      	blx	r3
        encoder->je_wr_commas = 0;
    fb26:	7a23      	ldrb	r3, [r4, #8]
    fb28:	f36f 0300 	bfc	r3, #0, #1
    fb2c:	7223      	strb	r3, [r4, #8]
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
    fb2e:	6823      	ldr	r3, [r4, #0]
    fb30:	2201      	movs	r2, #1
    fb32:	490f      	ldr	r1, [pc, #60]	; (fb70 <json_encode_object_entry+0x64>)
    fb34:	6860      	ldr	r0, [r4, #4]
    fb36:	4798      	blx	r3
    encoder->je_write(encoder->je_arg, key, strlen(key));
    fb38:	6827      	ldr	r7, [r4, #0]
    fb3a:	4628      	mov	r0, r5
    fb3c:	f002 fd30 	bl	125a0 <strlen>
    fb40:	4602      	mov	r2, r0
    fb42:	4629      	mov	r1, r5
    fb44:	6860      	ldr	r0, [r4, #4]
    fb46:	47b8      	blx	r7
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
    fb48:	6823      	ldr	r3, [r4, #0]
    fb4a:	2203      	movs	r2, #3
    fb4c:	4909      	ldr	r1, [pc, #36]	; (fb74 <json_encode_object_entry+0x68>)
    fb4e:	6860      	ldr	r0, [r4, #4]
    fb50:	4798      	blx	r3

    rc = json_encode_value(encoder, val);
    fb52:	4631      	mov	r1, r6
    fb54:	4620      	mov	r0, r4
    fb56:	f000 f80f 	bl	fb78 <json_encode_value>
    if (rc != 0) {
    fb5a:	4602      	mov	r2, r0
    fb5c:	b918      	cbnz	r0, fb66 <json_encode_object_entry+0x5a>
        goto err;
    }
    encoder->je_wr_commas = 1;
    fb5e:	7a23      	ldrb	r3, [r4, #8]
    fb60:	f043 0301 	orr.w	r3, r3, #1
    fb64:	7223      	strb	r3, [r4, #8]

    return (0);
err:
    return (rc);
}
    fb66:	4610      	mov	r0, r2
    fb68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb6a:	bf00      	nop
    fb6c:	0002bea8 	.word	0x0002bea8
    fb70:	0002beac 	.word	0x0002beac
    fb74:	0002beb0 	.word	0x0002beb0

0000fb78 <json_encode_value>:
{
    fb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb7a:	4605      	mov	r5, r0
    fb7c:	460c      	mov	r4, r1
    switch (jv->jv_type) {
    fb7e:	784b      	ldrb	r3, [r1, #1]
    fb80:	2b05      	cmp	r3, #5
    fb82:	f200 80d4 	bhi.w	fd2e <json_encode_value+0x1b6>
    fb86:	e8df f013 	tbh	[pc, r3, lsl #1]
    fb8a:	0006      	.short	0x0006
    fb8c:	0029001a 	.word	0x0029001a
    fb90:	008f0038 	.word	0x008f0038
    fb94:	00b4      	.short	0x00b4
            len = sprintf(encoder->je_encode_buf, "%s",
    fb96:	f100 0609 	add.w	r6, r0, #9
                    jv->jv_val.u > 0 ? "true" : "false");
    fb9a:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
            len = sprintf(encoder->je_encode_buf, "%s",
    fb9e:	4313      	orrs	r3, r2
    fba0:	d10b      	bne.n	fbba <json_encode_value+0x42>
    fba2:	4a64      	ldr	r2, [pc, #400]	; (fd34 <json_encode_value+0x1bc>)
    fba4:	4964      	ldr	r1, [pc, #400]	; (fd38 <json_encode_value+0x1c0>)
    fba6:	4630      	mov	r0, r6
    fba8:	f002 fcd1 	bl	1254e <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
    fbac:	682b      	ldr	r3, [r5, #0]
    fbae:	4602      	mov	r2, r0
    fbb0:	4631      	mov	r1, r6
    fbb2:	6868      	ldr	r0, [r5, #4]
    fbb4:	4798      	blx	r3
    return (0);
    fbb6:	2300      	movs	r3, #0
            break;
    fbb8:	e074      	b.n	fca4 <json_encode_value+0x12c>
            len = sprintf(encoder->je_encode_buf, "%s",
    fbba:	4a60      	ldr	r2, [pc, #384]	; (fd3c <json_encode_value+0x1c4>)
    fbbc:	e7f2      	b.n	fba4 <json_encode_value+0x2c>
            len = sprintf(encoder->je_encode_buf, "%llu",
    fbbe:	f100 0609 	add.w	r6, r0, #9
    fbc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    fbc6:	495e      	ldr	r1, [pc, #376]	; (fd40 <json_encode_value+0x1c8>)
    fbc8:	4630      	mov	r0, r6
    fbca:	f002 fcc0 	bl	1254e <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
    fbce:	682b      	ldr	r3, [r5, #0]
    fbd0:	4602      	mov	r2, r0
    fbd2:	4631      	mov	r1, r6
    fbd4:	6868      	ldr	r0, [r5, #4]
    fbd6:	4798      	blx	r3
    return (0);
    fbd8:	2300      	movs	r3, #0
            break;
    fbda:	e063      	b.n	fca4 <json_encode_value+0x12c>
            len = sprintf(encoder->je_encode_buf, "%lld",
    fbdc:	f100 0609 	add.w	r6, r0, #9
    fbe0:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    fbe4:	4957      	ldr	r1, [pc, #348]	; (fd44 <json_encode_value+0x1cc>)
    fbe6:	4630      	mov	r0, r6
    fbe8:	f002 fcb1 	bl	1254e <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
    fbec:	682b      	ldr	r3, [r5, #0]
    fbee:	4602      	mov	r2, r0
    fbf0:	4631      	mov	r1, r6
    fbf2:	6868      	ldr	r0, [r5, #4]
    fbf4:	4798      	blx	r3
    return (0);
    fbf6:	2300      	movs	r3, #0
            break;
    fbf8:	e054      	b.n	fca4 <json_encode_value+0x12c>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
    fbfa:	6803      	ldr	r3, [r0, #0]
    fbfc:	2201      	movs	r2, #1
    fbfe:	4952      	ldr	r1, [pc, #328]	; (fd48 <json_encode_value+0x1d0>)
    fc00:	6840      	ldr	r0, [r0, #4]
    fc02:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
    fc04:	2600      	movs	r6, #0
    fc06:	e01a      	b.n	fc3e <json_encode_value+0xc6>
                switch (jv->jv_val.str[i]) {
    fc08:	2b22      	cmp	r3, #34	; 0x22
    fc0a:	d00c      	beq.n	fc26 <json_encode_value+0xae>
    fc0c:	d807      	bhi.n	fc1e <json_encode_value+0xa6>
    fc0e:	2b0d      	cmp	r3, #13
    fc10:	d125      	bne.n	fc5e <json_encode_value+0xe6>
                        encoder->je_write(encoder->je_arg, "\\r",
    fc12:	682b      	ldr	r3, [r5, #0]
    fc14:	2202      	movs	r2, #2
    fc16:	494d      	ldr	r1, [pc, #308]	; (fd4c <json_encode_value+0x1d4>)
    fc18:	6868      	ldr	r0, [r5, #4]
    fc1a:	4798      	blx	r3
                        break;
    fc1c:	e00e      	b.n	fc3c <json_encode_value+0xc4>
                switch (jv->jv_val.str[i]) {
    fc1e:	2b2f      	cmp	r3, #47	; 0x2f
    fc20:	d001      	beq.n	fc26 <json_encode_value+0xae>
    fc22:	2b5c      	cmp	r3, #92	; 0x5c
    fc24:	d11b      	bne.n	fc5e <json_encode_value+0xe6>
                        encoder->je_write(encoder->je_arg, "\\",
    fc26:	682b      	ldr	r3, [r5, #0]
    fc28:	2201      	movs	r2, #1
    fc2a:	4949      	ldr	r1, [pc, #292]	; (fd50 <json_encode_value+0x1d8>)
    fc2c:	6868      	ldr	r0, [r5, #4]
    fc2e:	4798      	blx	r3
                        encoder->je_write(encoder->je_arg,
    fc30:	682b      	ldr	r3, [r5, #0]
                                (char *) &jv->jv_val.str[i], 1);
    fc32:	68a1      	ldr	r1, [r4, #8]
                        encoder->je_write(encoder->je_arg,
    fc34:	2201      	movs	r2, #1
    fc36:	4439      	add	r1, r7
    fc38:	6868      	ldr	r0, [r5, #4]
    fc3a:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
    fc3c:	3601      	adds	r6, #1
    fc3e:	8863      	ldrh	r3, [r4, #2]
    fc40:	42b3      	cmp	r3, r6
    fc42:	dd29      	ble.n	fc98 <json_encode_value+0x120>
                switch (jv->jv_val.str[i]) {
    fc44:	68a3      	ldr	r3, [r4, #8]
    fc46:	4637      	mov	r7, r6
    fc48:	1999      	adds	r1, r3, r6
    fc4a:	5d9b      	ldrb	r3, [r3, r6]
    fc4c:	2b0c      	cmp	r3, #12
    fc4e:	d017      	beq.n	fc80 <json_encode_value+0x108>
    fc50:	d8da      	bhi.n	fc08 <json_encode_value+0x90>
    fc52:	2b09      	cmp	r3, #9
    fc54:	d008      	beq.n	fc68 <json_encode_value+0xf0>
    fc56:	2b0a      	cmp	r3, #10
    fc58:	d00c      	beq.n	fc74 <json_encode_value+0xfc>
    fc5a:	2b08      	cmp	r3, #8
    fc5c:	d016      	beq.n	fc8c <json_encode_value+0x114>
                        encoder->je_write(encoder->je_arg,
    fc5e:	682b      	ldr	r3, [r5, #0]
    fc60:	2201      	movs	r2, #1
    fc62:	6868      	ldr	r0, [r5, #4]
    fc64:	4798      	blx	r3
                        break;
    fc66:	e7e9      	b.n	fc3c <json_encode_value+0xc4>
                        encoder->je_write(encoder->je_arg, "\\t",
    fc68:	682b      	ldr	r3, [r5, #0]
    fc6a:	2202      	movs	r2, #2
    fc6c:	4939      	ldr	r1, [pc, #228]	; (fd54 <json_encode_value+0x1dc>)
    fc6e:	6868      	ldr	r0, [r5, #4]
    fc70:	4798      	blx	r3
                        break;
    fc72:	e7e3      	b.n	fc3c <json_encode_value+0xc4>
                        encoder->je_write(encoder->je_arg, "\\n",
    fc74:	682b      	ldr	r3, [r5, #0]
    fc76:	2202      	movs	r2, #2
    fc78:	4937      	ldr	r1, [pc, #220]	; (fd58 <json_encode_value+0x1e0>)
    fc7a:	6868      	ldr	r0, [r5, #4]
    fc7c:	4798      	blx	r3
                        break;
    fc7e:	e7dd      	b.n	fc3c <json_encode_value+0xc4>
                        encoder->je_write(encoder->je_arg, "\\f",
    fc80:	682b      	ldr	r3, [r5, #0]
    fc82:	2202      	movs	r2, #2
    fc84:	4935      	ldr	r1, [pc, #212]	; (fd5c <json_encode_value+0x1e4>)
    fc86:	6868      	ldr	r0, [r5, #4]
    fc88:	4798      	blx	r3
                        break;
    fc8a:	e7d7      	b.n	fc3c <json_encode_value+0xc4>
                        encoder->je_write(encoder->je_arg, "\\b",
    fc8c:	682b      	ldr	r3, [r5, #0]
    fc8e:	2202      	movs	r2, #2
    fc90:	4933      	ldr	r1, [pc, #204]	; (fd60 <json_encode_value+0x1e8>)
    fc92:	6868      	ldr	r0, [r5, #4]
    fc94:	4798      	blx	r3
                        break;
    fc96:	e7d1      	b.n	fc3c <json_encode_value+0xc4>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
    fc98:	682b      	ldr	r3, [r5, #0]
    fc9a:	2201      	movs	r2, #1
    fc9c:	492a      	ldr	r1, [pc, #168]	; (fd48 <json_encode_value+0x1d0>)
    fc9e:	6868      	ldr	r0, [r5, #4]
    fca0:	4798      	blx	r3
    return (0);
    fca2:	2300      	movs	r3, #0
}
    fca4:	4618      	mov	r0, r3
    fca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            JSON_ENCODE_ARRAY_START(encoder);
    fca8:	6803      	ldr	r3, [r0, #0]
    fcaa:	2201      	movs	r2, #1
    fcac:	492d      	ldr	r1, [pc, #180]	; (fd64 <json_encode_value+0x1ec>)
    fcae:	6840      	ldr	r0, [r0, #4]
    fcb0:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
    fcb2:	2600      	movs	r6, #0
    fcb4:	e000      	b.n	fcb8 <json_encode_value+0x140>
    fcb6:	3601      	adds	r6, #1
    fcb8:	8863      	ldrh	r3, [r4, #2]
    fcba:	42b3      	cmp	r3, r6
    fcbc:	dd12      	ble.n	fce4 <json_encode_value+0x16c>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
    fcbe:	68e3      	ldr	r3, [r4, #12]
    fcc0:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    fcc4:	4628      	mov	r0, r5
    fcc6:	f7ff ff57 	bl	fb78 <json_encode_value>
                if (rc != 0) {
    fcca:	4603      	mov	r3, r0
    fccc:	2800      	cmp	r0, #0
    fcce:	d1e9      	bne.n	fca4 <json_encode_value+0x12c>
                if (i != jv->jv_len - 1) {
    fcd0:	8863      	ldrh	r3, [r4, #2]
    fcd2:	3b01      	subs	r3, #1
    fcd4:	42b3      	cmp	r3, r6
    fcd6:	d0ee      	beq.n	fcb6 <json_encode_value+0x13e>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
    fcd8:	682b      	ldr	r3, [r5, #0]
    fcda:	2201      	movs	r2, #1
    fcdc:	4922      	ldr	r1, [pc, #136]	; (fd68 <json_encode_value+0x1f0>)
    fcde:	6868      	ldr	r0, [r5, #4]
    fce0:	4798      	blx	r3
    fce2:	e7e8      	b.n	fcb6 <json_encode_value+0x13e>
            JSON_ENCODE_ARRAY_END(encoder);
    fce4:	682b      	ldr	r3, [r5, #0]
    fce6:	2201      	movs	r2, #1
    fce8:	4920      	ldr	r1, [pc, #128]	; (fd6c <json_encode_value+0x1f4>)
    fcea:	6868      	ldr	r0, [r5, #4]
    fcec:	4798      	blx	r3
    return (0);
    fcee:	2300      	movs	r3, #0
            break;
    fcf0:	e7d8      	b.n	fca4 <json_encode_value+0x12c>
            JSON_ENCODE_OBJECT_START(encoder);
    fcf2:	6803      	ldr	r3, [r0, #0]
    fcf4:	2201      	movs	r2, #1
    fcf6:	491e      	ldr	r1, [pc, #120]	; (fd70 <json_encode_value+0x1f8>)
    fcf8:	6840      	ldr	r0, [r0, #4]
    fcfa:	4798      	blx	r3
            for (i = 0; i < jv->jv_len; i++) {
    fcfc:	2600      	movs	r6, #0
    fcfe:	8863      	ldrh	r3, [r4, #2]
    fd00:	42b3      	cmp	r3, r6
    fd02:	dd0d      	ble.n	fd20 <json_encode_value+0x1a8>
                        jv->jv_val.composite.keys[i],
    fd04:	68a3      	ldr	r3, [r4, #8]
                        jv->jv_val.composite.values[i]);
    fd06:	68e2      	ldr	r2, [r4, #12]
                rc = json_encode_object_entry(encoder,
    fd08:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    fd0c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    fd10:	4628      	mov	r0, r5
    fd12:	f7ff fefb 	bl	fb0c <json_encode_object_entry>
                if (rc != 0) {
    fd16:	4603      	mov	r3, r0
    fd18:	2800      	cmp	r0, #0
    fd1a:	d1c3      	bne.n	fca4 <json_encode_value+0x12c>
            for (i = 0; i < jv->jv_len; i++) {
    fd1c:	3601      	adds	r6, #1
    fd1e:	e7ee      	b.n	fcfe <json_encode_value+0x186>
            JSON_ENCODE_OBJECT_END(encoder);
    fd20:	682b      	ldr	r3, [r5, #0]
    fd22:	2201      	movs	r2, #1
    fd24:	4913      	ldr	r1, [pc, #76]	; (fd74 <json_encode_value+0x1fc>)
    fd26:	6868      	ldr	r0, [r5, #4]
    fd28:	4798      	blx	r3
    return (0);
    fd2a:	2300      	movs	r3, #0
            break;
    fd2c:	e7ba      	b.n	fca4 <json_encode_value+0x12c>
            rc = -1;
    fd2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fd32:	e7b7      	b.n	fca4 <json_encode_value+0x12c>
    fd34:	0002c070 	.word	0x0002c070
    fd38:	0002c078 	.word	0x0002c078
    fd3c:	0002c068 	.word	0x0002c068
    fd40:	0002c07c 	.word	0x0002c07c
    fd44:	0002c084 	.word	0x0002c084
    fd48:	0002beac 	.word	0x0002beac
    fd4c:	0002c094 	.word	0x0002c094
    fd50:	0002c08c 	.word	0x0002c08c
    fd54:	0002c090 	.word	0x0002c090
    fd58:	0002c098 	.word	0x0002c098
    fd5c:	0002c09c 	.word	0x0002c09c
    fd60:	0002c0a0 	.word	0x0002c0a0
    fd64:	0002c0a4 	.word	0x0002c0a4
    fd68:	0002bea8 	.word	0x0002bea8
    fd6c:	0002c0a8 	.word	0x0002c0a8
    fd70:	0002c064 	.word	0x0002c064
    fd74:	0002c0ac 	.word	0x0002c0ac

0000fd78 <json_encode_object_finish>:

int
json_encode_object_finish(struct json_encoder *encoder)
{
    fd78:	b510      	push	{r4, lr}
    fd7a:	4604      	mov	r4, r0
    JSON_ENCODE_OBJECT_END(encoder);
    fd7c:	6803      	ldr	r3, [r0, #0]
    fd7e:	2201      	movs	r2, #1
    fd80:	4904      	ldr	r1, [pc, #16]	; (fd94 <json_encode_object_finish+0x1c>)
    fd82:	6840      	ldr	r0, [r0, #4]
    fd84:	4798      	blx	r3
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
    fd86:	7a23      	ldrb	r3, [r4, #8]
    fd88:	f043 0301 	orr.w	r3, r3, #1
    fd8c:	7223      	strb	r3, [r4, #8]

    return (0);
}
    fd8e:	2000      	movs	r0, #0
    fd90:	bd10      	pop	{r4, pc}
    fd92:	bf00      	nop
    fd94:	0002c0ac 	.word	0x0002c0ac

0000fd98 <json_encode_array_name>:

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
    fd98:	b508      	push	{r3, lr}
    return json_encode_object_key(encoder, name);
    fd9a:	f7ff fe8d 	bl	fab8 <json_encode_object_key>
}
    fd9e:	bd08      	pop	{r3, pc}

0000fda0 <json_encode_array_start>:

int
json_encode_array_start(struct json_encoder *encoder)
{
    fda0:	b510      	push	{r4, lr}
    fda2:	4604      	mov	r4, r0
    JSON_ENCODE_ARRAY_START(encoder);
    fda4:	6803      	ldr	r3, [r0, #0]
    fda6:	2201      	movs	r2, #1
    fda8:	4904      	ldr	r1, [pc, #16]	; (fdbc <json_encode_array_start+0x1c>)
    fdaa:	6840      	ldr	r0, [r0, #4]
    fdac:	4798      	blx	r3
    encoder->je_wr_commas = 0;
    fdae:	7a23      	ldrb	r3, [r4, #8]
    fdb0:	f36f 0300 	bfc	r3, #0, #1
    fdb4:	7223      	strb	r3, [r4, #8]

    return (0);
}
    fdb6:	2000      	movs	r0, #0
    fdb8:	bd10      	pop	{r4, pc}
    fdba:	bf00      	nop
    fdbc:	0002c0a4 	.word	0x0002c0a4

0000fdc0 <json_encode_array_finish>:
}


int
json_encode_array_finish(struct json_encoder *encoder)
{
    fdc0:	b508      	push	{r3, lr}
    encoder->je_wr_commas = 1;
    fdc2:	7a03      	ldrb	r3, [r0, #8]
    fdc4:	f043 0301 	orr.w	r3, r3, #1
    fdc8:	7203      	strb	r3, [r0, #8]
    JSON_ENCODE_ARRAY_END(encoder);
    fdca:	6803      	ldr	r3, [r0, #0]
    fdcc:	2201      	movs	r2, #1
    fdce:	4902      	ldr	r1, [pc, #8]	; (fdd8 <json_encode_array_finish+0x18>)
    fdd0:	6840      	ldr	r0, [r0, #4]
    fdd2:	4798      	blx	r3

    return (0);
}
    fdd4:	2000      	movs	r0, #0
    fdd6:	bd08      	pop	{r3, pc}
    fdd8:	0002c0a8 	.word	0x0002c0a8

0000fddc <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    fddc:	4a09      	ldr	r2, [pc, #36]	; (fe04 <NVIC_Relocate+0x28>)
    fdde:	4b0a      	ldr	r3, [pc, #40]	; (fe08 <NVIC_Relocate+0x2c>)
    fde0:	429a      	cmp	r2, r3
    fde2:	d00a      	beq.n	fdfa <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    fde4:	2300      	movs	r3, #0
    fde6:	e006      	b.n	fdf6 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
    fde8:	4a07      	ldr	r2, [pc, #28]	; (fe08 <NVIC_Relocate+0x2c>)
    fdea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    fdee:	4a05      	ldr	r2, [pc, #20]	; (fe04 <NVIC_Relocate+0x28>)
    fdf0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    fdf4:	3301      	adds	r3, #1
    fdf6:	2b35      	cmp	r3, #53	; 0x35
    fdf8:	ddf6      	ble.n	fde8 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    fdfa:	4a02      	ldr	r2, [pc, #8]	; (fe04 <NVIC_Relocate+0x28>)
    fdfc:	4b03      	ldr	r3, [pc, #12]	; (fe0c <NVIC_Relocate+0x30>)
    fdfe:	609a      	str	r2, [r3, #8]
#endif
}
    fe00:	4770      	bx	lr
    fe02:	bf00      	nop
    fe04:	20000000 	.word	0x20000000
    fe08:	00008020 	.word	0x00008020
    fe0c:	e000ed00 	.word	0xe000ed00

0000fe10 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
    fe10:	2010      	movs	r0, #16
    fe12:	4770      	bx	lr

0000fe14 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
    fe14:	b570      	push	{r4, r5, r6, lr}
    fe16:	4606      	mov	r6, r0
    fe18:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
    fe1a:	460d      	mov	r5, r1
    fe1c:	2908      	cmp	r1, #8
    fe1e:	bf28      	it	cs
    fe20:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
    fe22:	462a      	mov	r2, r5
    fe24:	4906      	ldr	r1, [pc, #24]	; (fe40 <hal_bsp_hw_id+0x2c>)
    fe26:	f002 fb4d 	bl	124c4 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
    fe2a:	1b64      	subs	r4, r4, r5
    fe2c:	2c08      	cmp	r4, #8
    fe2e:	bf28      	it	cs
    fe30:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
    fe32:	4622      	mov	r2, r4
    fe34:	4903      	ldr	r1, [pc, #12]	; (fe44 <hal_bsp_hw_id+0x30>)
    fe36:	1970      	adds	r0, r6, r5
    fe38:	f002 fb44 	bl	124c4 <memcpy>

    return len + cnt;
}
    fe3c:	1928      	adds	r0, r5, r4
    fe3e:	bd70      	pop	{r4, r5, r6, pc}
    fe40:	10000060 	.word	0x10000060
    fe44:	100000a4 	.word	0x100000a4

0000fe48 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
    fe48:	4b08      	ldr	r3, [pc, #32]	; (fe6c <sensor_mgr_remove+0x24>)
    fe4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    fe4c:	4282      	cmp	r2, r0
    fe4e:	d104      	bne.n	fe5a <sensor_mgr_remove+0x12>
    fe50:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
    fe54:	631a      	str	r2, [r3, #48]	; 0x30
    fe56:	4770      	bx	lr
    fe58:	461a      	mov	r2, r3
    fe5a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    fe5e:	4283      	cmp	r3, r0
    fe60:	d1fa      	bne.n	fe58 <sensor_mgr_remove+0x10>
    fe62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    fe66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
    fe6a:	4770      	bx	lr
    fe6c:	20003bf8 	.word	0x20003bf8

0000fe70 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
    fe70:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
    fe72:	6a03      	ldr	r3, [r0, #32]
    fe74:	b993      	cbnz	r3, fe9c <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
    fe76:	4b15      	ldr	r3, [pc, #84]	; (fecc <sensor_mgr_insert+0x5c>)
    fe78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
    fe7a:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
    fe7c:	e002      	b.n	fe84 <sensor_mgr_insert+0x14>
            prev = cursor;
    fe7e:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
    fe80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    fe84:	2b00      	cmp	r3, #0
    fe86:	d1fa      	bne.n	fe7e <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
    fe88:	b1c9      	cbz	r1, febe <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
    fe8a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    fe8e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    fe92:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
    fe96:	f85d 4b04 	ldr.w	r4, [sp], #4
    fe9a:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
    fe9c:	4b0b      	ldr	r3, [pc, #44]	; (fecc <sensor_mgr_insert+0x5c>)
    fe9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
    fea0:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
    fea2:	2b00      	cmp	r3, #0
    fea4:	d0f0      	beq.n	fe88 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
    fea6:	6a1a      	ldr	r2, [r3, #32]
    fea8:	2a00      	cmp	r2, #0
    feaa:	d0ed      	beq.n	fe88 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
    feac:	6a42      	ldr	r2, [r0, #36]	; 0x24
    feae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    feb0:	1b12      	subs	r2, r2, r4
    feb2:	2a00      	cmp	r2, #0
    feb4:	dbe8      	blt.n	fe88 <sensor_mgr_insert+0x18>
        prev = cursor;
    feb6:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
    feb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    febc:	e7f1      	b.n	fea2 <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    febe:	4b03      	ldr	r3, [pc, #12]	; (fecc <sensor_mgr_insert+0x5c>)
    fec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    fec2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    fec6:	6318      	str	r0, [r3, #48]	; 0x30
    fec8:	e7e5      	b.n	fe96 <sensor_mgr_insert+0x26>
    feca:	bf00      	nop
    fecc:	20003bf8 	.word	0x20003bf8

0000fed0 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
    fed0:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
    fed2:	fab0 f080 	clz	r0, r0
    fed6:	0940      	lsrs	r0, r0, #5
    fed8:	4770      	bx	lr
	...

0000fedc <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
    fedc:	4b01      	ldr	r3, [pc, #4]	; (fee4 <sensor_mgr_evq_set+0x8>)
    fede:	62d8      	str	r0, [r3, #44]	; 0x2c
}
    fee0:	4770      	bx	lr
    fee2:	bf00      	nop
    fee4:	20003bf8 	.word	0x20003bf8

0000fee8 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
    fee8:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
    feec:	e9d1 2300 	ldrd	r2, r3, [r1]
    fef0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    fef4:	ea02 0b04 	and.w	fp, r2, r4
    fef8:	ea03 0c05 	and.w	ip, r3, r5
    fefc:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
    ff00:	ea0b 0200 	and.w	r2, fp, r0
    ff04:	ea0c 0301 	and.w	r3, ip, r1
    ff08:	4313      	orrs	r3, r2
}
    ff0a:	bf14      	ite	ne
    ff0c:	2001      	movne	r0, #1
    ff0e:	2000      	moveq	r0, #0
    ff10:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
    ff14:	4770      	bx	lr

0000ff16 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
    ff16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ff1a:	b083      	sub	sp, #12
    ff1c:	4605      	mov	r5, r0
    ff1e:	4689      	mov	r9, r1
    ff20:	4690      	mov	r8, r2
    ff22:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
    ff26:	790b      	ldrb	r3, [r1, #4]
    ff28:	2b01      	cmp	r3, #1
    ff2a:	d013      	beq.n	ff54 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
    ff2c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    ff2e:	e000      	b.n	ff32 <sensor_read_data_func+0x1c>
    ff30:	6924      	ldr	r4, [r4, #16]
    ff32:	b17c      	cbz	r4, ff54 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
    ff34:	e9d4 0100 	ldrd	r0, r1, [r4]
    ff38:	ea00 0206 	and.w	r2, r0, r6
    ff3c:	ea01 0307 	and.w	r3, r1, r7
    ff40:	4313      	orrs	r3, r2
    ff42:	d0f5      	beq.n	ff30 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
    ff44:	68a3      	ldr	r3, [r4, #8]
    ff46:	68e1      	ldr	r1, [r4, #12]
    ff48:	e9cd 6700 	strd	r6, r7, [sp]
    ff4c:	4642      	mov	r2, r8
    ff4e:	4628      	mov	r0, r5
    ff50:	4798      	blx	r3
    ff52:	e7ed      	b.n	ff30 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
    ff54:	f8d9 3000 	ldr.w	r3, [r9]
    ff58:	b14b      	cbz	r3, ff6e <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
    ff5a:	f8d9 1004 	ldr.w	r1, [r9, #4]
    ff5e:	e9cd 6700 	strd	r6, r7, [sp]
    ff62:	4642      	mov	r2, r8
    ff64:	4628      	mov	r0, r5
    ff66:	4798      	blx	r3
    }

    return (0);
}
    ff68:	b003      	add	sp, #12
    ff6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
    ff6e:	2000      	movs	r0, #0
    ff70:	e7fa      	b.n	ff68 <sensor_read_data_func+0x52>

0000ff72 <sensor_mgr_match_bydevname>:
{
    ff72:	b508      	push	{r3, lr}
    if (!strcmp(sensor->s_dev->od_name, devname)) {
    ff74:	6803      	ldr	r3, [r0, #0]
    ff76:	69d8      	ldr	r0, [r3, #28]
    ff78:	f002 fb04 	bl	12584 <strcmp>
    ff7c:	b108      	cbz	r0, ff82 <sensor_mgr_match_bydevname+0x10>
    return (0);
    ff7e:	2000      	movs	r0, #0
}
    ff80:	bd08      	pop	{r3, pc}
        return (1);
    ff82:	2001      	movs	r0, #1
    ff84:	e7fc      	b.n	ff80 <sensor_mgr_match_bydevname+0xe>
	...

0000ff88 <sensor_base_ts_update_event>:
{
    ff88:	b530      	push	{r4, r5, lr}
    ff8a:	b087      	sub	sp, #28
    ticks = os_time_get();
    ff8c:	f002 f8d6 	bl	1213c <os_time_get>
    ff90:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
    ff92:	a901      	add	r1, sp, #4
    ff94:	a802      	add	r0, sp, #8
    ff96:	f002 f8f7 	bl	12188 <os_gettimeofday>
    if (rc) {
    ff9a:	b138      	cbz	r0, ffac <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
    ff9c:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
    ffa0:	4621      	mov	r1, r4
    ffa2:	4809      	ldr	r0, [pc, #36]	; (ffc8 <sensor_base_ts_update_event+0x40>)
    ffa4:	f000 fcc0 	bl	10928 <os_callout_reset>
}
    ffa8:	b007      	add	sp, #28
    ffaa:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
    ffac:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
    ffb0:	4d06      	ldr	r5, [pc, #24]	; (ffcc <sensor_base_ts_update_event+0x44>)
    ffb2:	ab06      	add	r3, sp, #24
    ffb4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
    ffb8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
    ffbc:	9b01      	ldr	r3, [sp, #4]
    ffbe:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
    ffc0:	f000 fd5a 	bl	10a78 <os_cputime_get32>
    ffc4:	6168      	str	r0, [r5, #20]
    ffc6:	e7eb      	b.n	ffa0 <sensor_base_ts_update_event+0x18>
    ffc8:	20003c2c 	.word	0x20003c2c
    ffcc:	20003c50 	.word	0x20003c50

0000ffd0 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
    ffd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ffd2:	4607      	mov	r7, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
    ffd4:	f000 fd50 	bl	10a78 <os_cputime_get32>
    ffd8:	4604      	mov	r4, r0

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
             sensor_base_ts.st_cputime);
    ffda:	4e0e      	ldr	r6, [pc, #56]	; (10014 <sensor_up_timestamp+0x44>)
    ffdc:	6970      	ldr	r0, [r6, #20]
    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
    ffde:	1a20      	subs	r0, r4, r0
    ffe0:	f000 fd58 	bl	10a94 <os_cputime_ticks_to_usecs>

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
    ffe4:	647c      	str	r4, [r7, #68]	; 0x44
    ffe6:	6174      	str	r4, [r6, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
    ffe8:	e9d6 4500 	ldrd	r4, r5, [r6]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
    ffec:	68b3      	ldr	r3, [r6, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
    ffee:	4418      	add	r0, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
    fff0:	4b09      	ldr	r3, [pc, #36]	; (10018 <sensor_up_timestamp+0x48>)
    fff2:	fba3 2300 	umull	r2, r3, r3, r0
    fff6:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
    fff8:	18e1      	adds	r1, r4, r3
    fffa:	f145 0200 	adc.w	r2, r5, #0
    fffe:	e9c6 1200 	strd	r1, r2, [r6]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   10002:	e9c7 120c 	strd	r1, r2, [r7, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   10006:	4a05      	ldr	r2, [pc, #20]	; (1001c <sensor_up_timestamp+0x4c>)
   10008:	fb02 0213 	mls	r2, r2, r3, r0
    sensor_base_ts.st_ostv.tv_usec  =
   1000c:	60b2      	str	r2, [r6, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1000e:	63ba      	str	r2, [r7, #56]	; 0x38

}
   10010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10012:	bf00      	nop
   10014:	20003c50 	.word	0x20003c50
   10018:	431bde83 	.word	0x431bde83
   1001c:	000f4240 	.word	0x000f4240

00010020 <sensor_mgr_lock>:
{
   10020:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   10022:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10026:	4804      	ldr	r0, [pc, #16]	; (10038 <sensor_mgr_lock+0x18>)
   10028:	f001 fd02 	bl	11a30 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1002c:	b108      	cbz	r0, 10032 <sensor_mgr_lock+0x12>
   1002e:	2809      	cmp	r0, #9
   10030:	d000      	beq.n	10034 <sensor_mgr_lock+0x14>
}
   10032:	bd08      	pop	{r3, pc}
        return (0);
   10034:	2000      	movs	r0, #0
   10036:	e7fc      	b.n	10032 <sensor_mgr_lock+0x12>
   10038:	20003bf8 	.word	0x20003bf8

0001003c <sensor_mgr_unlock>:
{
   1003c:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1003e:	4802      	ldr	r0, [pc, #8]	; (10048 <sensor_mgr_unlock+0xc>)
   10040:	f001 fc9a 	bl	11978 <os_mutex_release>
}
   10044:	bd08      	pop	{r3, pc}
   10046:	bf00      	nop
   10048:	20003bf8 	.word	0x20003bf8

0001004c <sensor_mgr_evq_get>:
}
   1004c:	4b01      	ldr	r3, [pc, #4]	; (10054 <sensor_mgr_evq_get+0x8>)
   1004e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   10050:	4770      	bx	lr
   10052:	bf00      	nop
   10054:	20003bf8 	.word	0x20003bf8

00010058 <sensor_mgr_init>:
{
   10058:	b570      	push	{r4, r5, r6, lr}
   1005a:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1005c:	f000 febc 	bl	10dd8 <os_eventq_dflt_get>
   10060:	f7ff ff3c 	bl	fedc <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   10064:	4b1c      	ldr	r3, [pc, #112]	; (100d8 <sensor_mgr_init+0x80>)
   10066:	9300      	str	r3, [sp, #0]
   10068:	4b1c      	ldr	r3, [pc, #112]	; (100dc <sensor_mgr_init+0x84>)
   1006a:	2218      	movs	r2, #24
   1006c:	2105      	movs	r1, #5
   1006e:	481c      	ldr	r0, [pc, #112]	; (100e0 <sensor_mgr_init+0x88>)
   10070:	f001 fb44 	bl	116fc <os_mempool_init>
    assert(rc == OS_OK);
   10074:	bb50      	cbnz	r0, 100cc <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   10076:	f7ff ffe9 	bl	1004c <sensor_mgr_evq_get>
   1007a:	4e1a      	ldr	r6, [pc, #104]	; (100e4 <sensor_mgr_init+0x8c>)
   1007c:	2300      	movs	r3, #0
   1007e:	4a1a      	ldr	r2, [pc, #104]	; (100e8 <sensor_mgr_init+0x90>)
   10080:	4601      	mov	r1, r0
   10082:	4630      	mov	r0, r6
   10084:	f000 fc24 	bl	108d0 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   10088:	ad04      	add	r5, sp, #16
   1008a:	a903      	add	r1, sp, #12
   1008c:	4628      	mov	r0, r5
   1008e:	f002 f87b 	bl	12188 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   10092:	4c16      	ldr	r4, [pc, #88]	; (100ec <sensor_mgr_init+0x94>)
   10094:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   10098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1009c:	9b03      	ldr	r3, [sp, #12]
   1009e:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   100a0:	f000 fcea 	bl	10a78 <os_cputime_get32>
   100a4:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   100a6:	f7ff ffd1 	bl	1004c <sensor_mgr_evq_get>
   100aa:	4c11      	ldr	r4, [pc, #68]	; (100f0 <sensor_mgr_init+0x98>)
   100ac:	2300      	movs	r3, #0
   100ae:	4a11      	ldr	r2, [pc, #68]	; (100f4 <sensor_mgr_init+0x9c>)
   100b0:	4601      	mov	r1, r0
   100b2:	4620      	mov	r0, r4
   100b4:	f000 fc0c 	bl	108d0 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   100b8:	2180      	movs	r1, #128	; 0x80
   100ba:	4620      	mov	r0, r4
   100bc:	f000 fc34 	bl	10928 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   100c0:	f1a6 000c 	sub.w	r0, r6, #12
   100c4:	f001 fc4e 	bl	11964 <os_mutex_init>
}
   100c8:	b008      	add	sp, #32
   100ca:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   100cc:	2300      	movs	r3, #0
   100ce:	461a      	mov	r2, r3
   100d0:	4619      	mov	r1, r3
   100d2:	4618      	mov	r0, r3
   100d4:	f000 fa82 	bl	105dc <__assert_func>
   100d8:	0002c0b0 	.word	0x0002c0b0
   100dc:	2000058c 	.word	0x2000058c
   100e0:	20000604 	.word	0x20000604
   100e4:	20003c04 	.word	0x20003c04
   100e8:	000103ad 	.word	0x000103ad
   100ec:	20003c50 	.word	0x20003c50
   100f0:	20003c2c 	.word	0x20003c2c
   100f4:	0000ff89 	.word	0x0000ff89

000100f8 <sensor_mgr_find_next>:
{
   100f8:	b570      	push	{r4, r5, r6, lr}
   100fa:	4605      	mov	r5, r0
   100fc:	460e      	mov	r6, r1
   100fe:	4614      	mov	r4, r2
    rc = sensor_mgr_lock();
   10100:	f7ff ff8e 	bl	10020 <sensor_mgr_lock>
    if (rc != 0) {
   10104:	b988      	cbnz	r0, 1012a <sensor_mgr_find_next+0x32>
    if (cursor == NULL) {
   10106:	b14c      	cbz	r4, 1011c <sensor_mgr_find_next+0x24>
        cursor = SLIST_NEXT(prev_cursor, s_next);
   10108:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
    while (cursor != NULL) {
   1010c:	b14c      	cbz	r4, 10122 <sensor_mgr_find_next+0x2a>
        if (compare_func(cursor, arg)) {
   1010e:	4631      	mov	r1, r6
   10110:	4620      	mov	r0, r4
   10112:	47a8      	blx	r5
   10114:	b928      	cbnz	r0, 10122 <sensor_mgr_find_next+0x2a>
        cursor = SLIST_NEXT(cursor, s_next);
   10116:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
   1011a:	e7f7      	b.n	1010c <sensor_mgr_find_next+0x14>
        cursor = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1011c:	4b04      	ldr	r3, [pc, #16]	; (10130 <sensor_mgr_find_next+0x38>)
   1011e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   10120:	e7f4      	b.n	1010c <sensor_mgr_find_next+0x14>
    sensor_mgr_unlock();
   10122:	f7ff ff8b 	bl	1003c <sensor_mgr_unlock>
}
   10126:	4620      	mov	r0, r4
   10128:	bd70      	pop	{r4, r5, r6, pc}
    cursor = NULL;
   1012a:	2400      	movs	r4, #0
    return (cursor);
   1012c:	e7fb      	b.n	10126 <sensor_mgr_find_next+0x2e>
   1012e:	bf00      	nop
   10130:	20003bf8 	.word	0x20003bf8

00010134 <sensor_mgr_find_next_bydevname>:
{
   10134:	b508      	push	{r3, lr}
    return (sensor_mgr_find_next(sensor_mgr_match_bydevname, (char *)devname,
   10136:	460a      	mov	r2, r1
   10138:	4601      	mov	r1, r0
   1013a:	4802      	ldr	r0, [pc, #8]	; (10144 <sensor_mgr_find_next_bydevname+0x10>)
   1013c:	f7ff ffdc 	bl	100f8 <sensor_mgr_find_next>
}
   10140:	bd08      	pop	{r3, pc}
   10142:	bf00      	nop
   10144:	0000ff73 	.word	0x0000ff73

00010148 <sensor_pkg_init>:
{
   10148:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1014a:	f7ff ff85 	bl	10058 <sensor_mgr_init>
}
   1014e:	bd08      	pop	{r3, pc}

00010150 <sensor_lock>:
{
   10150:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   10152:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10156:	3004      	adds	r0, #4
   10158:	f001 fc6a 	bl	11a30 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1015c:	b108      	cbz	r0, 10162 <sensor_lock+0x12>
   1015e:	2809      	cmp	r0, #9
   10160:	d000      	beq.n	10164 <sensor_lock+0x14>
}
   10162:	bd08      	pop	{r3, pc}
        return (0);
   10164:	2000      	movs	r0, #0
   10166:	e7fc      	b.n	10162 <sensor_lock+0x12>

00010168 <sensor_unlock>:
{
   10168:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1016a:	3004      	adds	r0, #4
   1016c:	f001 fc04 	bl	11978 <os_mutex_release>
}
   10170:	bd08      	pop	{r3, pc}

00010172 <sensor_update_poll_rate>:
{
   10172:	b538      	push	{r3, r4, r5, lr}
   10174:	4604      	mov	r4, r0
   10176:	460d      	mov	r5, r1
    sensor_lock(sensor);
   10178:	f7ff ffea 	bl	10150 <sensor_lock>
    sensor->s_poll_rate = poll_rate;
   1017c:	6225      	str	r5, [r4, #32]
    sensor_unlock(sensor);
   1017e:	4620      	mov	r0, r4
   10180:	f7ff fff2 	bl	10168 <sensor_unlock>
}
   10184:	bd38      	pop	{r3, r4, r5, pc}

00010186 <sensor_update_nextrun>:
{
   10186:	b530      	push	{r4, r5, lr}
   10188:	b083      	sub	sp, #12
   1018a:	4604      	mov	r4, r0
   1018c:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1018e:	a901      	add	r1, sp, #4
   10190:	6a00      	ldr	r0, [r0, #32]
   10192:	f002 f815 	bl	121c0 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   10196:	4620      	mov	r0, r4
   10198:	f7ff ffda 	bl	10150 <sensor_lock>
    sensor_mgr_remove(sensor);
   1019c:	4620      	mov	r0, r4
   1019e:	f7ff fe53 	bl	fe48 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   101a2:	9b01      	ldr	r3, [sp, #4]
   101a4:	441d      	add	r5, r3
   101a6:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   101a8:	4620      	mov	r0, r4
   101aa:	f7ff fe61 	bl	fe70 <sensor_mgr_insert>
    sensor_unlock(sensor);
   101ae:	4620      	mov	r0, r4
   101b0:	f7ff ffda 	bl	10168 <sensor_unlock>
}
   101b4:	b003      	add	sp, #12
   101b6:	bd30      	pop	{r4, r5, pc}

000101b8 <sensor_calc_nextrun_delta>:
{
   101b8:	b538      	push	{r3, r4, r5, lr}
   101ba:	4605      	mov	r5, r0
   101bc:	460c      	mov	r4, r1
    sensor_lock(sensor);
   101be:	f7ff ffc7 	bl	10150 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   101c2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   101c4:	1b0c      	subs	r4, r1, r4
   101c6:	d404      	bmi.n	101d2 <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   101c8:	4628      	mov	r0, r5
   101ca:	f7ff ffcd 	bl	10168 <sensor_unlock>
}
   101ce:	4620      	mov	r0, r4
   101d0:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   101d2:	2400      	movs	r4, #0
   101d4:	e7f8      	b.n	101c8 <sensor_calc_nextrun_delta+0x10>
	...

000101d8 <sensor_find_min_nextrun_sensor>:
{
   101d8:	b570      	push	{r4, r5, r6, lr}
   101da:	4606      	mov	r6, r0
   101dc:	460d      	mov	r5, r1
    sensor_mgr_lock();
   101de:	f7ff ff1f 	bl	10020 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   101e2:	4b05      	ldr	r3, [pc, #20]	; (101f8 <sensor_find_min_nextrun_sensor+0x20>)
   101e4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   101e6:	4631      	mov	r1, r6
   101e8:	4620      	mov	r0, r4
   101ea:	f7ff ffe5 	bl	101b8 <sensor_calc_nextrun_delta>
   101ee:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   101f0:	f7ff ff24 	bl	1003c <sensor_mgr_unlock>
}
   101f4:	4620      	mov	r0, r4
   101f6:	bd70      	pop	{r4, r5, r6, pc}
   101f8:	20003bf8 	.word	0x20003bf8

000101fc <sensor_set_poll_rate_ms>:
{
   101fc:	b570      	push	{r4, r5, r6, lr}
   101fe:	b082      	sub	sp, #8
   10200:	4604      	mov	r4, r0
   10202:	460d      	mov	r5, r1
    os_callout_stop(&sensor_mgr.mgr_wakeup_callout);
   10204:	4815      	ldr	r0, [pc, #84]	; (1025c <sensor_set_poll_rate_ms+0x60>)
   10206:	f000 fb71 	bl	108ec <os_callout_stop>
    sensor = sensor_mgr_find_next_bydevname(devname, NULL);
   1020a:	2100      	movs	r1, #0
   1020c:	4620      	mov	r0, r4
   1020e:	f7ff ff91 	bl	10134 <sensor_mgr_find_next_bydevname>
    if (!sensor) {
   10212:	b1f8      	cbz	r0, 10254 <sensor_set_poll_rate_ms+0x58>
   10214:	4604      	mov	r4, r0
    sensor_lock(sensor);
   10216:	f7ff ff9b 	bl	10150 <sensor_lock>
    now = os_time_get();
   1021a:	f001 ff8f 	bl	1213c <os_time_get>
   1021e:	4606      	mov	r6, r0
    os_time_ms_to_ticks(poll_rate, &next_wakeup);
   10220:	a901      	add	r1, sp, #4
   10222:	4628      	mov	r0, r5
   10224:	f001 ffcc 	bl	121c0 <os_time_ms_to_ticks>
    sensor_update_poll_rate(sensor, poll_rate);
   10228:	4629      	mov	r1, r5
   1022a:	4620      	mov	r0, r4
   1022c:	f7ff ffa1 	bl	10172 <sensor_update_poll_rate>
    sensor_update_nextrun(sensor, now);
   10230:	4631      	mov	r1, r6
   10232:	4620      	mov	r0, r4
   10234:	f7ff ffa7 	bl	10186 <sensor_update_nextrun>
    sensor_unlock(sensor);
   10238:	4620      	mov	r0, r4
   1023a:	f7ff ff95 	bl	10168 <sensor_unlock>
    sensor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1023e:	a901      	add	r1, sp, #4
   10240:	4630      	mov	r0, r6
   10242:	f7ff ffc9 	bl	101d8 <sensor_find_min_nextrun_sensor>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   10246:	9901      	ldr	r1, [sp, #4]
   10248:	4804      	ldr	r0, [pc, #16]	; (1025c <sensor_set_poll_rate_ms+0x60>)
   1024a:	f000 fb6d 	bl	10928 <os_callout_reset>
    return 0;
   1024e:	2000      	movs	r0, #0
}
   10250:	b002      	add	sp, #8
   10252:	bd70      	pop	{r4, r5, r6, pc}
    return rc;
   10254:	f06f 0001 	mvn.w	r0, #1
   10258:	e7fa      	b.n	10250 <sensor_set_poll_rate_ms+0x54>
   1025a:	bf00      	nop
   1025c:	20003c04 	.word	0x20003c04

00010260 <sensor_mgr_register>:
{
   10260:	b538      	push	{r3, r4, r5, lr}
   10262:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   10264:	f7ff fedc 	bl	10020 <sensor_mgr_lock>
    if (rc != 0) {
   10268:	4604      	mov	r4, r0
   1026a:	b108      	cbz	r0, 10270 <sensor_mgr_register+0x10>
}
   1026c:	4620      	mov	r0, r4
   1026e:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   10270:	4628      	mov	r0, r5
   10272:	f7ff ff6d 	bl	10150 <sensor_lock>
    if (rc != 0) {
   10276:	4604      	mov	r4, r0
   10278:	2800      	cmp	r0, #0
   1027a:	d1f7      	bne.n	1026c <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1027c:	4628      	mov	r0, r5
   1027e:	f7ff fdf7 	bl	fe70 <sensor_mgr_insert>
    sensor_unlock(sensor);
   10282:	4628      	mov	r0, r5
   10284:	f7ff ff70 	bl	10168 <sensor_unlock>
    sensor_mgr_unlock();
   10288:	f7ff fed8 	bl	1003c <sensor_mgr_unlock>
    return (0);
   1028c:	e7ee      	b.n	1026c <sensor_mgr_register+0xc>

0001028e <sensor_init>:
{
   1028e:	b538      	push	{r3, r4, r5, lr}
   10290:	4604      	mov	r4, r0
   10292:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   10294:	2288      	movs	r2, #136	; 0x88
   10296:	2100      	movs	r1, #0
   10298:	f002 f93d 	bl	12516 <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1029c:	1d20      	adds	r0, r4, #4
   1029e:	f001 fb61 	bl	11964 <os_mutex_init>
    if (rc != 0) {
   102a2:	4603      	mov	r3, r0
   102a4:	b900      	cbnz	r0, 102a8 <sensor_init+0x1a>
    sensor->s_dev = dev;
   102a6:	6025      	str	r5, [r4, #0]
}
   102a8:	4618      	mov	r0, r3
   102aa:	bd38      	pop	{r3, r4, r5, pc}

000102ac <sensor_register_listener>:
{
   102ac:	b570      	push	{r4, r5, r6, lr}
   102ae:	4604      	mov	r4, r0
   102b0:	460e      	mov	r6, r1
    rc = sensor_lock(sensor);
   102b2:	f7ff ff4d 	bl	10150 <sensor_lock>
    if (rc != 0) {
   102b6:	4605      	mov	r5, r0
   102b8:	b108      	cbz	r0, 102be <sensor_register_listener+0x12>
}
   102ba:	4628      	mov	r0, r5
   102bc:	bd70      	pop	{r4, r5, r6, pc}
    SLIST_INSERT_HEAD(&sensor->s_listener_list, listener, sl_next);
   102be:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   102c0:	6133      	str	r3, [r6, #16]
   102c2:	66e6      	str	r6, [r4, #108]	; 0x6c
    sensor_unlock(sensor);
   102c4:	4620      	mov	r0, r4
   102c6:	f7ff ff4f 	bl	10168 <sensor_unlock>
    return (0);
   102ca:	e7f6      	b.n	102ba <sensor_register_listener+0xe>

000102cc <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   102cc:	b530      	push	{r4, r5, lr}
   102ce:	b089      	sub	sp, #36	; 0x24
   102d0:	4604      	mov	r4, r0
   102d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   102d6:	f7ff ff3b 	bl	10150 <sensor_lock>
    if (rc) {
   102da:	4605      	mov	r5, r0
   102dc:	b9f8      	cbnz	r0, 1031e <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   102de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   102e0:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   102e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   102e4:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   102e6:	a904      	add	r1, sp, #16
   102e8:	4620      	mov	r0, r4
   102ea:	f7ff fdfd 	bl	fee8 <sensor_mgr_match_bytype>
   102ee:	b1e0      	cbz	r0, 1032a <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   102f0:	4620      	mov	r0, r4
   102f2:	f7ff fe6d 	bl	ffd0 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   102f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   102f8:	6819      	ldr	r1, [r3, #0]
   102fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   102fc:	9302      	str	r3, [sp, #8]
   102fe:	ab06      	add	r3, sp, #24
   10300:	9301      	str	r3, [sp, #4]
   10302:	4b0b      	ldr	r3, [pc, #44]	; (10330 <sensor_read+0x64>)
   10304:	9300      	str	r3, [sp, #0]
   10306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1030a:	4620      	mov	r0, r4
   1030c:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1030e:	4605      	mov	r5, r0
   10310:	b128      	cbz	r0, 1031e <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   10312:	6f23      	ldr	r3, [r4, #112]	; 0x70
   10314:	b11b      	cbz	r3, 1031e <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   10316:	4602      	mov	r2, r0
   10318:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1031a:	4620      	mov	r0, r4
   1031c:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1031e:	4620      	mov	r0, r4
   10320:	f7ff ff22 	bl	10168 <sensor_unlock>
    return (rc);
}
   10324:	4628      	mov	r0, r5
   10326:	b009      	add	sp, #36	; 0x24
   10328:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1032a:	f06f 0503 	mvn.w	r5, #3
   1032e:	e7f6      	b.n	1031e <sensor_read+0x52>
   10330:	0000ff17 	.word	0x0000ff17

00010334 <sensor_mgr_poll_bytype>:
{
   10334:	b5f0      	push	{r4, r5, r6, r7, lr}
   10336:	b085      	sub	sp, #20
   10338:	4616      	mov	r6, r2
   1033a:	461f      	mov	r7, r3
   1033c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1033e:	b10c      	cbz	r4, 10344 <sensor_mgr_poll_bytype+0x10>
   10340:	8aa3      	ldrh	r3, [r4, #20]
   10342:	b9cb      	cbnz	r3, 10378 <sensor_mgr_poll_bytype+0x44>
   10344:	4632      	mov	r2, r6
   10346:	463b      	mov	r3, r7
   10348:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1034a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1034e:	9102      	str	r1, [sp, #8]
   10350:	2100      	movs	r1, #0
   10352:	9101      	str	r1, [sp, #4]
   10354:	9100      	str	r1, [sp, #0]
   10356:	f7ff ffb9 	bl	102cc <sensor_read>
        sensor_lock(sensor);
   1035a:	4628      	mov	r0, r5
   1035c:	f7ff fef8 	bl	10150 <sensor_lock>
        if (stt) {
   10360:	b12c      	cbz	r4, 1036e <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   10362:	8aa3      	ldrh	r3, [r4, #20]
   10364:	b91b      	cbnz	r3, 1036e <sensor_mgr_poll_bytype+0x3a>
   10366:	8a63      	ldrh	r3, [r4, #18]
   10368:	b10b      	cbz	r3, 1036e <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1036a:	3b01      	subs	r3, #1
   1036c:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1036e:	4628      	mov	r0, r5
   10370:	f7ff fefa 	bl	10168 <sensor_unlock>
}
   10374:	b005      	add	sp, #20
   10376:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   10378:	3b01      	subs	r3, #1
   1037a:	82a3      	strh	r3, [r4, #20]
}
   1037c:	e7fa      	b.n	10374 <sensor_mgr_poll_bytype+0x40>

0001037e <sensor_poll_per_type_trait>:
{
   1037e:	b570      	push	{r4, r5, r6, lr}
   10380:	b082      	sub	sp, #8
   10382:	4605      	mov	r5, r0
   10384:	460e      	mov	r6, r1
    sensor_lock(sensor);
   10386:	f7ff fee3 	bl	10150 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1038a:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1038c:	e007      	b.n	1039e <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1038e:	e9d4 2300 	ldrd	r2, r3, [r4]
   10392:	9601      	str	r6, [sp, #4]
   10394:	9400      	str	r4, [sp, #0]
   10396:	4628      	mov	r0, r5
   10398:	f7ff ffcc 	bl	10334 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1039c:	6a24      	ldr	r4, [r4, #32]
   1039e:	2c00      	cmp	r4, #0
   103a0:	d1f5      	bne.n	1038e <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   103a2:	4628      	mov	r0, r5
   103a4:	f7ff fee0 	bl	10168 <sensor_unlock>
}
   103a8:	b002      	add	sp, #8
   103aa:	bd70      	pop	{r4, r5, r6, pc}

000103ac <sensor_mgr_wakeup_event>:
{
   103ac:	b570      	push	{r4, r5, r6, lr}
   103ae:	b084      	sub	sp, #16
    now = os_time_get();
   103b0:	f001 fec4 	bl	1213c <os_time_get>
   103b4:	4605      	mov	r5, r0
    sensor_mgr_lock();
   103b6:	f7ff fe33 	bl	10020 <sensor_mgr_lock>
   103ba:	e012      	b.n	103e2 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   103bc:	4620      	mov	r0, r4
   103be:	f7ff fed3 	bl	10168 <sensor_unlock>
            sensor_mgr_unlock();
   103c2:	f7ff fe3b 	bl	1003c <sensor_mgr_unlock>
}
   103c6:	b004      	add	sp, #16
   103c8:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   103ca:	4632      	mov	r2, r6
   103cc:	4629      	mov	r1, r5
   103ce:	4620      	mov	r0, r4
   103d0:	f7ff ffd5 	bl	1037e <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   103d4:	4629      	mov	r1, r5
   103d6:	4620      	mov	r0, r4
   103d8:	f7ff fed5 	bl	10186 <sensor_update_nextrun>
        sensor_unlock(cursor);
   103dc:	4620      	mov	r0, r4
   103de:	f7ff fec3 	bl	10168 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   103e2:	a903      	add	r1, sp, #12
   103e4:	4628      	mov	r0, r5
   103e6:	f7ff fef7 	bl	101d8 <sensor_find_min_nextrun_sensor>
   103ea:	4604      	mov	r4, r0
        sensor_lock(cursor);
   103ec:	f7ff feb0 	bl	10150 <sensor_lock>
        if (!cursor->s_poll_rate) {
   103f0:	6a23      	ldr	r3, [r4, #32]
   103f2:	2b00      	cmp	r3, #0
   103f4:	d0e2      	beq.n	103bc <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   103f6:	9e03      	ldr	r6, [sp, #12]
   103f8:	b96e      	cbnz	r6, 10416 <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   103fa:	4620      	mov	r0, r4
   103fc:	f7ff fd68 	bl	fed0 <sensor_type_traits_empty>
   10400:	2800      	cmp	r0, #0
   10402:	d0e2      	beq.n	103ca <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   10404:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   10408:	9501      	str	r5, [sp, #4]
   1040a:	2100      	movs	r1, #0
   1040c:	9100      	str	r1, [sp, #0]
   1040e:	4620      	mov	r0, r4
   10410:	f7ff ff90 	bl	10334 <sensor_mgr_poll_bytype>
   10414:	e7de      	b.n	103d4 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   10416:	f7ff fe11 	bl	1003c <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1041a:	9903      	ldr	r1, [sp, #12]
   1041c:	4801      	ldr	r0, [pc, #4]	; (10424 <sensor_mgr_wakeup_event+0x78>)
   1041e:	f000 fa83 	bl	10928 <os_callout_reset>
   10422:	e7d0      	b.n	103c6 <sensor_mgr_wakeup_event+0x1a>
   10424:	20003c04 	.word	0x20003c04

00010428 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   10428:	b508      	push	{r3, lr}
    os_time_advance(1);
   1042a:	2001      	movs	r0, #1
   1042c:	f001 fe8c 	bl	12148 <os_time_advance>
}
   10430:	bd08      	pop	{r3, pc}
	...

00010434 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   10434:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   10436:	f001 fc0b 	bl	11c50 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1043a:	4b02      	ldr	r3, [pc, #8]	; (10444 <os_arch_ctx_sw+0x10>)
   1043c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   10440:	605a      	str	r2, [r3, #4]
}
   10442:	bd08      	pop	{r3, pc}
   10444:	e000ed00 	.word	0xe000ed00

00010448 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   10448:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1044c:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1044e:	f000 0001 	and.w	r0, r0, #1
   10452:	4770      	bx	lr

00010454 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   10454:	b900      	cbnz	r0, 10458 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   10456:	b662      	cpsie	i
        __enable_irq();
    }
}
   10458:	4770      	bx	lr

0001045a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1045a:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1045e:	f000 0001 	and.w	r0, r0, #1
   10462:	4770      	bx	lr

00010464 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   10464:	b570      	push	{r4, r5, r6, lr}
   10466:	4606      	mov	r6, r0
   10468:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1046a:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1046e:	2309      	movs	r3, #9
   10470:	e003      	b.n	1047a <os_arch_task_stack_init+0x16>
        s[i] = 0;
   10472:	2200      	movs	r2, #0
   10474:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   10478:	3301      	adds	r3, #1
   1047a:	2b0d      	cmp	r3, #13
   1047c:	ddf9      	ble.n	10472 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1047e:	4620      	mov	r0, r4
   10480:	f001 febc 	bl	121fc <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   10484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   10488:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1048c:	6973      	ldr	r3, [r6, #20]
   1048e:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   10492:	69b3      	ldr	r3, [r6, #24]
   10494:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   10498:	f06f 0302 	mvn.w	r3, #2
   1049c:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   104a0:	4620      	mov	r0, r4
   104a2:	bd70      	pop	{r4, r5, r6, pc}

000104a4 <os_arch_init>:

void
os_arch_init(void)
{
   104a4:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   104a6:	4a04      	ldr	r2, [pc, #16]	; (104b8 <os_arch_init+0x14>)
   104a8:	6953      	ldr	r3, [r2, #20]
   104aa:	f043 0310 	orr.w	r3, r3, #16
   104ae:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   104b0:	f000 f954 	bl	1075c <os_init_idle_task>
}
   104b4:	bd08      	pop	{r3, pc}
   104b6:	bf00      	nop
   104b8:	e000ed00 	.word	0xe000ed00

000104bc <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   104bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   104be:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   104c2:	b90c      	cbnz	r4, 104c8 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   104c4:	2400      	movs	r4, #0
   104c6:	e009      	b.n	104dc <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   104c8:	2007      	movs	r0, #7
   104ca:	e02e      	b.n	1052a <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   104cc:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   104d0:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   104d4:	26ff      	movs	r6, #255	; 0xff
   104d6:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   104da:	3401      	adds	r4, #1
   104dc:	2cef      	cmp	r4, #239	; 0xef
   104de:	d9f5      	bls.n	104cc <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   104e0:	f06f 040d 	mvn.w	r4, #13
   104e4:	e007      	b.n	104f6 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   104e6:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   104e8:	4e12      	ldr	r6, [pc, #72]	; (10534 <os_arch_os_init+0x78>)
   104ea:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   104ec:	3510      	adds	r5, #16
   104ee:	4f12      	ldr	r7, [pc, #72]	; (10538 <os_arch_os_init+0x7c>)
   104f0:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   104f4:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   104f6:	2c25      	cmp	r4, #37	; 0x25
   104f8:	ddf5      	ble.n	104e6 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   104fa:	4c0e      	ldr	r4, [pc, #56]	; (10534 <os_arch_os_init+0x78>)
   104fc:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   104fe:	4e0f      	ldr	r6, [pc, #60]	; (1053c <os_arch_os_init+0x80>)
   10500:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   10502:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   10504:	4e0e      	ldr	r6, [pc, #56]	; (10540 <os_arch_os_init+0x84>)
   10506:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   10508:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1050a:	4e0e      	ldr	r6, [pc, #56]	; (10544 <os_arch_os_init+0x88>)
   1050c:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1050e:	25e0      	movs	r5, #224	; 0xe0
   10510:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   10514:	2520      	movs	r5, #32
   10516:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   10518:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1051c:	f014 0f01 	tst.w	r4, #1
   10520:	d004      	beq.n	1052c <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   10522:	f8df c024 	ldr.w	ip, [pc, #36]	; 10548 <os_arch_os_init+0x8c>
   10526:	df00      	svc	0
        err = OS_OK;
   10528:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1052a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1052c:	f7ff ffba 	bl	104a4 <os_arch_init>
        err = OS_OK;
   10530:	2000      	movs	r0, #0
   10532:	e7fa      	b.n	1052a <os_arch_os_init+0x6e>
   10534:	e000ed00 	.word	0xe000ed00
   10538:	0001229b 	.word	0x0001229b
   1053c:	00012203 	.word	0x00012203
   10540:	00012249 	.word	0x00012249
   10544:	0001228f 	.word	0x0001228f
   10548:	000104a5 	.word	0x000104a5

0001054c <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1054c:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1054e:	f001 fc65 	bl	11e1c <os_sched_next_task>
   10552:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   10554:	f001 fb9a 	bl	11c8c <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   10558:	6823      	ldr	r3, [r4, #0]
   1055a:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1055c:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   10560:	2106      	movs	r1, #6
   10562:	2080      	movs	r0, #128	; 0x80
   10564:	f00d ff86 	bl	1e474 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   10568:	4b03      	ldr	r3, [pc, #12]	; (10578 <os_arch_start+0x2c>)
   1056a:	2201      	movs	r2, #1
   1056c:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1056e:	4620      	mov	r0, r4
   10570:	f7ff ff60 	bl	10434 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   10574:	69a0      	ldr	r0, [r4, #24]
   10576:	bd10      	pop	{r4, pc}
   10578:	20003cbc 	.word	0x20003cbc

0001057c <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1057c:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1057e:	4814      	ldr	r0, [pc, #80]	; (105d0 <os_arch_os_start+0x54>)
   10580:	6800      	ldr	r0, [r0, #0]
   10582:	3804      	subs	r0, #4
   10584:	f001 fe30 	bl	121e8 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10588:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1058c:	b9d4      	cbnz	r4, 105c4 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1058e:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   10592:	f004 0403 	and.w	r4, r4, #3
   10596:	2c03      	cmp	r4, #3
   10598:	d808      	bhi.n	105ac <os_arch_os_start+0x30>
   1059a:	e8df f004 	tbb	[pc, r4]
   1059e:	1515      	.short	0x1515
   105a0:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   105a2:	4c0c      	ldr	r4, [pc, #48]	; (105d4 <os_arch_os_start+0x58>)
   105a4:	6824      	ldr	r4, [r4, #0]
   105a6:	f014 0f01 	tst.w	r4, #1
   105aa:	d10f      	bne.n	105cc <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   105ac:	f8df c028 	ldr.w	ip, [pc, #40]	; 105d8 <os_arch_os_start+0x5c>
   105b0:	df00      	svc	0
   105b2:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   105b4:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   105b6:	4c07      	ldr	r4, [pc, #28]	; (105d4 <os_arch_os_start+0x58>)
   105b8:	6824      	ldr	r4, [r4, #0]
   105ba:	f014 0f01 	tst.w	r4, #1
   105be:	d1f5      	bne.n	105ac <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   105c0:	2008      	movs	r0, #8
   105c2:	e7f7      	b.n	105b4 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   105c4:	2007      	movs	r0, #7
   105c6:	e7f5      	b.n	105b4 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   105c8:	2008      	movs	r0, #8
   105ca:	e7f3      	b.n	105b4 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   105cc:	2008      	movs	r0, #8
   105ce:	e7f1      	b.n	105b4 <os_arch_os_start+0x38>
   105d0:	20003c68 	.word	0x20003c68
   105d4:	20000620 	.word	0x20000620
   105d8:	0001054d 	.word	0x0001054d

000105dc <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   105dc:	b508      	push	{r3, lr}
   105de:	4675      	mov	r5, lr
   105e0:	4604      	mov	r4, r0
   105e2:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   105e4:	f7ff ff30 	bl	10448 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   105e8:	f7fe f8b3 	bl	e752 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   105ec:	b18c      	cbz	r4, 10612 <__assert_func+0x36>
   105ee:	4633      	mov	r3, r6
   105f0:	4622      	mov	r2, r4
   105f2:	4629      	mov	r1, r5
   105f4:	4809      	ldr	r0, [pc, #36]	; (1061c <__assert_func+0x40>)
   105f6:	f7fe f8d7 	bl	e7a8 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   105fa:	f7f7 fde1 	bl	81c0 <hal_debugger_connected>
   105fe:	b100      	cbz	r0, 10602 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   10600:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   10602:	4b07      	ldr	r3, [pc, #28]	; (10620 <__assert_func+0x44>)
   10604:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   10608:	605a      	str	r2, [r3, #4]
    asm("isb");
   1060a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   1060e:	f7f7 fddf 	bl	81d0 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   10612:	4629      	mov	r1, r5
   10614:	4803      	ldr	r0, [pc, #12]	; (10624 <__assert_func+0x48>)
   10616:	f7fe f8c7 	bl	e7a8 <console_printf>
   1061a:	e7ee      	b.n	105fa <__assert_func+0x1e>
   1061c:	0002c0d4 	.word	0x0002c0d4
   10620:	e000ed00 	.word	0xe000ed00
   10624:	0002c0c4 	.word	0x0002c0c4

00010628 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   10628:	b500      	push	{lr}
   1062a:	b083      	sub	sp, #12
   1062c:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   1062e:	f7fe f890 	bl	e752 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   10632:	4d1b      	ldr	r5, [pc, #108]	; (106a0 <os_default_irq+0x78>)
   10634:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   10636:	6822      	ldr	r2, [r4, #0]
   10638:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1063c:	4819      	ldr	r0, [pc, #100]	; (106a4 <os_default_irq+0x7c>)
   1063e:	f7fe f8b3 	bl	e7a8 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   10642:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   10644:	6883      	ldr	r3, [r0, #8]
   10646:	6842      	ldr	r2, [r0, #4]
   10648:	6801      	ldr	r1, [r0, #0]
   1064a:	68c0      	ldr	r0, [r0, #12]
   1064c:	9000      	str	r0, [sp, #0]
   1064e:	4816      	ldr	r0, [pc, #88]	; (106a8 <os_default_irq+0x80>)
   10650:	f7fe f8aa 	bl	e7a8 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   10654:	6923      	ldr	r3, [r4, #16]
   10656:	9300      	str	r3, [sp, #0]
   10658:	68e3      	ldr	r3, [r4, #12]
   1065a:	68a2      	ldr	r2, [r4, #8]
   1065c:	6861      	ldr	r1, [r4, #4]
   1065e:	4813      	ldr	r0, [pc, #76]	; (106ac <os_default_irq+0x84>)
   10660:	f7fe f8a2 	bl	e7a8 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   10664:	6a23      	ldr	r3, [r4, #32]
   10666:	9300      	str	r3, [sp, #0]
   10668:	69e3      	ldr	r3, [r4, #28]
   1066a:	69a2      	ldr	r2, [r4, #24]
   1066c:	6961      	ldr	r1, [r4, #20]
   1066e:	4810      	ldr	r0, [pc, #64]	; (106b0 <os_default_irq+0x88>)
   10670:	f7fe f89a 	bl	e7a8 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   10674:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   10676:	6983      	ldr	r3, [r0, #24]
   10678:	6942      	ldr	r2, [r0, #20]
   1067a:	6901      	ldr	r1, [r0, #16]
   1067c:	69c0      	ldr	r0, [r0, #28]
   1067e:	9000      	str	r0, [sp, #0]
   10680:	480c      	ldr	r0, [pc, #48]	; (106b4 <os_default_irq+0x8c>)
   10682:	f7fe f891 	bl	e7a8 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   10686:	6869      	ldr	r1, [r5, #4]
   10688:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1068a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1068c:	480a      	ldr	r0, [pc, #40]	; (106b8 <os_default_irq+0x90>)
   1068e:	f7fe f88b 	bl	e7a8 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   10692:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   10694:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   10696:	4809      	ldr	r0, [pc, #36]	; (106bc <os_default_irq+0x94>)
   10698:	f7fe f886 	bl	e7a8 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   1069c:	f7f7 fd98 	bl	81d0 <hal_system_reset>
   106a0:	e000ed00 	.word	0xe000ed00
   106a4:	0002c0ec 	.word	0x0002c0ec
   106a8:	0002c120 	.word	0x0002c120
   106ac:	0002c154 	.word	0x0002c154
   106b0:	0002c188 	.word	0x0002c188
   106b4:	0002c1bc 	.word	0x0002c1bc
   106b8:	0002c1f0 	.word	0x0002c1f0
   106bc:	0002c218 	.word	0x0002c218

000106c0 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   106c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   106c2:	f00e fa07 	bl	1ead4 <hal_watchdog_tickle>
    sanity_last = 0;
   106c6:	2500      	movs	r5, #0
   106c8:	e00b      	b.n	106e2 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   106ca:	f001 fa59 	bl	11b80 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   106ce:	f00e fa01 	bl	1ead4 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   106d2:	4625      	mov	r5, r4
   106d4:	e011      	b.n	106fa <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   106d6:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   106d8:	f00d fe80 	bl	1e3dc <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   106dc:	4638      	mov	r0, r7
   106de:	f7ff feb9 	bl	10454 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   106e2:	4a14      	ldr	r2, [pc, #80]	; (10734 <os_idle_task+0x74>)
   106e4:	6813      	ldr	r3, [r2, #0]
   106e6:	3301      	adds	r3, #1
   106e8:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   106ea:	f001 fd27 	bl	1213c <os_time_get>
   106ee:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   106f0:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   106f4:	1ac3      	subs	r3, r0, r3
   106f6:	2b00      	cmp	r3, #0
   106f8:	dce7      	bgt.n	106ca <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   106fa:	f7ff fea5 	bl	10448 <os_arch_save_sr>
   106fe:	4607      	mov	r7, r0
        now = os_time_get();
   10700:	f001 fd1c 	bl	1213c <os_time_get>
   10704:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   10706:	f001 fb69 	bl	11ddc <os_sched_wakeup_ticks>
   1070a:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   1070c:	4630      	mov	r0, r6
   1070e:	f000 f975 	bl	109fc <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   10712:	42a0      	cmp	r0, r4
   10714:	bf28      	it	cs
   10716:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   10718:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1071c:	1b9b      	subs	r3, r3, r6
   1071e:	4298      	cmp	r0, r3
   10720:	bf28      	it	cs
   10722:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   10724:	280b      	cmp	r0, #11
   10726:	d9d6      	bls.n	106d6 <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   10728:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   1072c:	d9d4      	bls.n	106d8 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   1072e:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   10732:	e7d1      	b.n	106d8 <os_idle_task+0x18>
   10734:	20003cb8 	.word	0x20003cb8

00010738 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   10738:	b508      	push	{r3, lr}
   1073a:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   1073c:	2100      	movs	r1, #0
   1073e:	4608      	mov	r0, r1
   10740:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   10742:	2300      	movs	r3, #0
   10744:	461a      	mov	r2, r3
   10746:	4619      	mov	r1, r3
   10748:	4618      	mov	r0, r3
   1074a:	f7ff ff47 	bl	105dc <__assert_func>
	...

00010750 <os_started>:
}
   10750:	4b01      	ldr	r3, [pc, #4]	; (10758 <os_started+0x8>)
   10752:	6818      	ldr	r0, [r3, #0]
   10754:	4770      	bx	lr
   10756:	bf00      	nop
   10758:	20003cbc 	.word	0x20003cbc

0001075c <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   1075c:	b500      	push	{lr}
   1075e:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   10760:	2340      	movs	r3, #64	; 0x40
   10762:	9303      	str	r3, [sp, #12]
   10764:	4b15      	ldr	r3, [pc, #84]	; (107bc <os_init_idle_task+0x60>)
   10766:	9302      	str	r3, [sp, #8]
   10768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1076c:	9301      	str	r3, [sp, #4]
   1076e:	23ff      	movs	r3, #255	; 0xff
   10770:	9300      	str	r3, [sp, #0]
   10772:	2300      	movs	r3, #0
   10774:	4a12      	ldr	r2, [pc, #72]	; (107c0 <os_init_idle_task+0x64>)
   10776:	4913      	ldr	r1, [pc, #76]	; (107c4 <os_init_idle_task+0x68>)
   10778:	4813      	ldr	r0, [pc, #76]	; (107c8 <os_init_idle_task+0x6c>)
   1077a:	f001 fc1f 	bl	11fbc <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   1077e:	b950      	cbnz	r0, 10796 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   10780:	f001 fa34 	bl	11bec <os_sanity_init>
    assert(rc == 0);
   10784:	b968      	cbnz	r0, 107a2 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   10786:	f247 5030 	movw	r0, #30000	; 0x7530
   1078a:	f00e f95f 	bl	1ea4c <hal_watchdog_init>
    assert(rc == 0);
   1078e:	b970      	cbnz	r0, 107ae <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   10790:	b005      	add	sp, #20
   10792:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   10796:	2300      	movs	r3, #0
   10798:	461a      	mov	r2, r3
   1079a:	4619      	mov	r1, r3
   1079c:	4618      	mov	r0, r3
   1079e:	f7ff ff1d 	bl	105dc <__assert_func>
    assert(rc == 0);
   107a2:	2300      	movs	r3, #0
   107a4:	461a      	mov	r2, r3
   107a6:	4619      	mov	r1, r3
   107a8:	4618      	mov	r0, r3
   107aa:	f7ff ff17 	bl	105dc <__assert_func>
    assert(rc == 0);
   107ae:	2300      	movs	r3, #0
   107b0:	461a      	mov	r2, r3
   107b2:	4619      	mov	r1, r3
   107b4:	4618      	mov	r0, r3
   107b6:	f7ff ff11 	bl	105dc <__assert_func>
   107ba:	bf00      	nop
   107bc:	20000628 	.word	0x20000628
   107c0:	000106c1 	.word	0x000106c1
   107c4:	0002c23c 	.word	0x0002c23c
   107c8:	20003c68 	.word	0x20003c68

000107cc <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   107cc:	b510      	push	{r4, lr}
   107ce:	b084      	sub	sp, #16
   107d0:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   107d2:	4b24      	ldr	r3, [pc, #144]	; (10864 <os_init+0x98>)
   107d4:	2200      	movs	r2, #0
   107d6:	601a      	str	r2, [r3, #0]
   107d8:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   107da:	4b23      	ldr	r3, [pc, #140]	; (10868 <os_init+0x9c>)
   107dc:	601a      	str	r2, [r3, #0]
   107de:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   107e0:	f000 fafa 	bl	10dd8 <os_eventq_dflt_get>
   107e4:	f000 fa4e 	bl	10c84 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   107e8:	f000 fa44 	bl	10c74 <os_dev_reset>

    err = os_arch_os_init();
   107ec:	f7ff fe66 	bl	104bc <os_arch_os_init>
    assert(err == OS_OK);
   107f0:	bb00      	cbnz	r0, 10834 <os_init+0x68>

    if (main_fn) {
   107f2:	b18c      	cbz	r4, 10818 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   107f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   107f8:	9303      	str	r3, [sp, #12]
   107fa:	4b1c      	ldr	r3, [pc, #112]	; (1086c <os_init+0xa0>)
   107fc:	9302      	str	r3, [sp, #8]
   107fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10802:	9301      	str	r3, [sp, #4]
   10804:	237f      	movs	r3, #127	; 0x7f
   10806:	9300      	str	r3, [sp, #0]
   10808:	4623      	mov	r3, r4
   1080a:	4a19      	ldr	r2, [pc, #100]	; (10870 <os_init+0xa4>)
   1080c:	4919      	ldr	r1, [pc, #100]	; (10874 <os_init+0xa8>)
   1080e:	481a      	ldr	r0, [pc, #104]	; (10878 <os_init+0xac>)
   10810:	f001 fbd4 	bl	11fbc <os_task_init>
   10814:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   10816:	b998      	cbnz	r0, 10840 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   10818:	f00d fcb0 	bl	1e17c <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1081c:	2001      	movs	r0, #1
   1081e:	f000 f9c5 	bl	10bac <os_dev_initialize_all>
   10822:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   10824:	b990      	cbnz	r0, 1084c <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   10826:	2002      	movs	r0, #2
   10828:	f000 f9c0 	bl	10bac <os_dev_initialize_all>
   1082c:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1082e:	b998      	cbnz	r0, 10858 <os_init+0x8c>
}
   10830:	b004      	add	sp, #16
   10832:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   10834:	2300      	movs	r3, #0
   10836:	461a      	mov	r2, r3
   10838:	4619      	mov	r1, r3
   1083a:	4618      	mov	r0, r3
   1083c:	f7ff fece 	bl	105dc <__assert_func>
        assert(err == 0);
   10840:	2300      	movs	r3, #0
   10842:	461a      	mov	r2, r3
   10844:	4619      	mov	r1, r3
   10846:	4618      	mov	r0, r3
   10848:	f7ff fec8 	bl	105dc <__assert_func>
    assert(err == OS_OK);
   1084c:	2300      	movs	r3, #0
   1084e:	461a      	mov	r2, r3
   10850:	4619      	mov	r1, r3
   10852:	4618      	mov	r0, r3
   10854:	f7ff fec2 	bl	105dc <__assert_func>
    assert(err == OS_OK);
   10858:	2300      	movs	r3, #0
   1085a:	461a      	mov	r2, r3
   1085c:	4619      	mov	r1, r3
   1085e:	4618      	mov	r0, r3
   10860:	f7ff febc 	bl	105dc <__assert_func>
   10864:	20003d10 	.word	0x20003d10
   10868:	20003d34 	.word	0x20003d34
   1086c:	20000728 	.word	0x20000728
   10870:	00010739 	.word	0x00010739
   10874:	0002c234 	.word	0x0002c234
   10878:	20003cc0 	.word	0x20003cc0

0001087c <os_start>:

void
os_start(void)
{
   1087c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   1087e:	f00e f921 	bl	1eac4 <hal_watchdog_enable>

    err = os_arch_os_start();
   10882:	f7ff fe7b 	bl	1057c <os_arch_os_start>
    assert(err == OS_OK);
   10886:	b900      	cbnz	r0, 1088a <os_start+0xe>
#else
    assert(0);
#endif
}
   10888:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   1088a:	2300      	movs	r3, #0
   1088c:	461a      	mov	r2, r3
   1088e:	4619      	mov	r1, r3
   10890:	4618      	mov	r0, r3
   10892:	f7ff fea3 	bl	105dc <__assert_func>
	...

00010898 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   10898:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1089a:	4b0c      	ldr	r3, [pc, #48]	; (108cc <os_pkg_init+0x34>)
   1089c:	781b      	ldrb	r3, [r3, #0]
   1089e:	b14b      	cbz	r3, 108b4 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   108a0:	2003      	movs	r0, #3
   108a2:	f000 f983 	bl	10bac <os_dev_initialize_all>
   108a6:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   108a8:	b948      	cbnz	r0, 108be <os_pkg_init+0x26>

    os_mempool_module_init();
   108aa:	f000 ffa7 	bl	117fc <os_mempool_module_init>
    os_msys_init();
   108ae:	f001 f83f 	bl	11930 <os_msys_init>
}
   108b2:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   108b4:	461a      	mov	r2, r3
   108b6:	4619      	mov	r1, r3
   108b8:	4618      	mov	r0, r3
   108ba:	f7ff fe8f 	bl	105dc <__assert_func>
    assert(err == OS_OK);
   108be:	2300      	movs	r3, #0
   108c0:	461a      	mov	r2, r3
   108c2:	4619      	mov	r1, r3
   108c4:	4618      	mov	r0, r3
   108c6:	f7ff fe89 	bl	105dc <__assert_func>
   108ca:	bf00      	nop
   108cc:	20003bf0 	.word	0x20003bf0

000108d0 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   108d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108d2:	4604      	mov	r4, r0
   108d4:	460d      	mov	r5, r1
   108d6:	4617      	mov	r7, r2
   108d8:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   108da:	2220      	movs	r2, #32
   108dc:	2100      	movs	r1, #0
   108de:	f001 fe1a 	bl	12516 <memset>
    c->c_ev.ev_cb = ev_cb;
   108e2:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   108e4:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   108e6:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   108e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000108ec <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   108ec:	b538      	push	{r3, r4, r5, lr}
   108ee:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   108f0:	f7ff fdaa 	bl	10448 <os_arch_save_sr>
   108f4:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   108f6:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   108f8:	b13b      	cbz	r3, 1090a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   108fa:	69a2      	ldr	r2, [r4, #24]
   108fc:	b172      	cbz	r2, 1091c <os_callout_stop+0x30>
   108fe:	61d3      	str	r3, [r2, #28]
   10900:	69e3      	ldr	r3, [r4, #28]
   10902:	69a2      	ldr	r2, [r4, #24]
   10904:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   10906:	2300      	movs	r3, #0
   10908:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   1090a:	6920      	ldr	r0, [r4, #16]
   1090c:	b110      	cbz	r0, 10914 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   1090e:	4621      	mov	r1, r4
   10910:	f000 fa42 	bl	10d98 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   10914:	4628      	mov	r0, r5
   10916:	f7ff fd9d 	bl	10454 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1091a:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1091c:	4a01      	ldr	r2, [pc, #4]	; (10924 <os_callout_stop+0x38>)
   1091e:	6053      	str	r3, [r2, #4]
   10920:	e7ee      	b.n	10900 <os_callout_stop+0x14>
   10922:	bf00      	nop
   10924:	20003d10 	.word	0x20003d10

00010928 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   10928:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   1092a:	6903      	ldr	r3, [r0, #16]
   1092c:	b1c3      	cbz	r3, 10960 <os_callout_reset+0x38>
   1092e:	4605      	mov	r5, r0
   10930:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   10932:	2900      	cmp	r1, #0
   10934:	db2f      	blt.n	10996 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   10936:	f7ff fd87 	bl	10448 <os_arch_save_sr>
   1093a:	4606      	mov	r6, r0

    os_callout_stop(c);
   1093c:	4628      	mov	r0, r5
   1093e:	f7ff ffd5 	bl	108ec <os_callout_stop>

    if (ticks == 0) {
   10942:	b904      	cbnz	r4, 10946 <os_callout_reset+0x1e>
        ticks = 1;
   10944:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   10946:	f001 fbf9 	bl	1213c <os_time_get>
   1094a:	4420      	add	r0, r4
   1094c:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1094e:	4b13      	ldr	r3, [pc, #76]	; (1099c <os_callout_reset+0x74>)
   10950:	681b      	ldr	r3, [r3, #0]
   10952:	b153      	cbz	r3, 1096a <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   10954:	695a      	ldr	r2, [r3, #20]
   10956:	1a82      	subs	r2, r0, r2
   10958:	2a00      	cmp	r2, #0
   1095a:	db06      	blt.n	1096a <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1095c:	699b      	ldr	r3, [r3, #24]
   1095e:	e7f8      	b.n	10952 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   10960:	461a      	mov	r2, r3
   10962:	4619      	mov	r1, r3
   10964:	4618      	mov	r0, r3
   10966:	f7ff fe39 	bl	105dc <__assert_func>
            break;
        }
    }

    if (entry) {
   1096a:	b15b      	cbz	r3, 10984 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   1096c:	69da      	ldr	r2, [r3, #28]
   1096e:	61ea      	str	r2, [r5, #28]
   10970:	61ab      	str	r3, [r5, #24]
   10972:	69da      	ldr	r2, [r3, #28]
   10974:	6015      	str	r5, [r2, #0]
   10976:	3518      	adds	r5, #24
   10978:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   1097a:	4630      	mov	r0, r6
   1097c:	f7ff fd6a 	bl	10454 <os_arch_restore_sr>

    ret = OS_OK;
   10980:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   10982:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   10984:	2300      	movs	r3, #0
   10986:	61ab      	str	r3, [r5, #24]
   10988:	4b04      	ldr	r3, [pc, #16]	; (1099c <os_callout_reset+0x74>)
   1098a:	685a      	ldr	r2, [r3, #4]
   1098c:	61ea      	str	r2, [r5, #28]
   1098e:	6015      	str	r5, [r2, #0]
   10990:	3518      	adds	r5, #24
   10992:	605d      	str	r5, [r3, #4]
   10994:	e7f1      	b.n	1097a <os_callout_reset+0x52>
        ret = OS_EINVAL;
   10996:	2002      	movs	r0, #2
    return ret;
   10998:	e7f3      	b.n	10982 <os_callout_reset+0x5a>
   1099a:	bf00      	nop
   1099c:	20003d10 	.word	0x20003d10

000109a0 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   109a0:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   109a2:	f001 fbcb 	bl	1213c <os_time_get>
   109a6:	4605      	mov	r5, r0
   109a8:	e00f      	b.n	109ca <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   109aa:	69e2      	ldr	r2, [r4, #28]
   109ac:	4b12      	ldr	r3, [pc, #72]	; (109f8 <os_callout_tick+0x58>)
   109ae:	605a      	str	r2, [r3, #4]
   109b0:	69e3      	ldr	r3, [r4, #28]
   109b2:	69a2      	ldr	r2, [r4, #24]
   109b4:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   109b6:	2300      	movs	r3, #0
   109b8:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   109ba:	f7ff fd4b 	bl	10454 <os_arch_restore_sr>

        if (c) {
   109be:	b1d4      	cbz	r4, 109f6 <os_callout_tick+0x56>
            if (c->c_evq) {
   109c0:	6920      	ldr	r0, [r4, #16]
   109c2:	b9a0      	cbnz	r0, 109ee <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   109c4:	6863      	ldr	r3, [r4, #4]
   109c6:	4620      	mov	r0, r4
   109c8:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   109ca:	f7ff fd3d 	bl	10448 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   109ce:	4b0a      	ldr	r3, [pc, #40]	; (109f8 <os_callout_tick+0x58>)
   109d0:	681c      	ldr	r4, [r3, #0]
        if (c) {
   109d2:	2c00      	cmp	r4, #0
   109d4:	d0f1      	beq.n	109ba <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   109d6:	6963      	ldr	r3, [r4, #20]
   109d8:	1aeb      	subs	r3, r5, r3
   109da:	2b00      	cmp	r3, #0
   109dc:	db05      	blt.n	109ea <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   109de:	69a3      	ldr	r3, [r4, #24]
   109e0:	2b00      	cmp	r3, #0
   109e2:	d0e2      	beq.n	109aa <os_callout_tick+0xa>
   109e4:	69e2      	ldr	r2, [r4, #28]
   109e6:	61da      	str	r2, [r3, #28]
   109e8:	e7e2      	b.n	109b0 <os_callout_tick+0x10>
                c = NULL;
   109ea:	2400      	movs	r4, #0
   109ec:	e7e5      	b.n	109ba <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   109ee:	4621      	mov	r1, r4
   109f0:	f000 f955 	bl	10c9e <os_eventq_put>
   109f4:	e7e9      	b.n	109ca <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   109f6:	bd38      	pop	{r3, r4, r5, pc}
   109f8:	20003d10 	.word	0x20003d10

000109fc <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   109fc:	b510      	push	{r4, lr}
   109fe:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   10a00:	f7ff fd2b 	bl	1045a <os_arch_in_critical>
   10a04:	b130      	cbz	r0, 10a14 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   10a06:	4b09      	ldr	r3, [pc, #36]	; (10a2c <os_callout_wakeup_ticks+0x30>)
   10a08:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   10a0a:	b15b      	cbz	r3, 10a24 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   10a0c:	6958      	ldr	r0, [r3, #20]
   10a0e:	1b00      	subs	r0, r0, r4
   10a10:	d406      	bmi.n	10a20 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   10a12:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   10a14:	2300      	movs	r3, #0
   10a16:	461a      	mov	r2, r3
   10a18:	4619      	mov	r1, r3
   10a1a:	4618      	mov	r0, r3
   10a1c:	f7ff fdde 	bl	105dc <__assert_func>
            rt = 0;     /* callout time is in the past */
   10a20:	2000      	movs	r0, #0
   10a22:	e7f6      	b.n	10a12 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   10a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   10a28:	e7f3      	b.n	10a12 <os_callout_wakeup_ticks+0x16>
   10a2a:	bf00      	nop
   10a2c:	20003d10 	.word	0x20003d10

00010a30 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   10a30:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   10a32:	4601      	mov	r1, r0
   10a34:	2005      	movs	r0, #5
   10a36:	f00d fe93 	bl	1e760 <hal_timer_config>
    return rc;
}
   10a3a:	bd08      	pop	{r3, pc}

00010a3c <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
   10a3c:	b510      	push	{r4, lr}
    assert(timer != NULL);
   10a3e:	b138      	cbz	r0, 10a50 <os_cputime_timer_init+0x14>
    assert(fp != NULL);
   10a40:	b161      	cbz	r1, 10a5c <os_cputime_timer_init+0x20>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   10a42:	4613      	mov	r3, r2
   10a44:	460a      	mov	r2, r1
   10a46:	4601      	mov	r1, r0
   10a48:	2005      	movs	r0, #5
   10a4a:	f00d ff59 	bl	1e900 <hal_timer_set_cb>
}
   10a4e:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
   10a50:	2300      	movs	r3, #0
   10a52:	461a      	mov	r2, r3
   10a54:	4619      	mov	r1, r3
   10a56:	4618      	mov	r0, r3
   10a58:	f7ff fdc0 	bl	105dc <__assert_func>
    assert(fp != NULL);
   10a5c:	2300      	movs	r3, #0
   10a5e:	461a      	mov	r2, r3
   10a60:	4619      	mov	r1, r3
   10a62:	4618      	mov	r0, r3
   10a64:	f7ff fdba 	bl	105dc <__assert_func>

00010a68 <os_cputime_timer_start>:

int
os_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
   10a68:	b508      	push	{r3, lr}
    int rc;

    rc = hal_timer_start_at(timer, cputime);
   10a6a:	f00d ff5f 	bl	1e92c <hal_timer_start_at>
    return rc;
}
   10a6e:	bd08      	pop	{r3, pc}

00010a70 <os_cputime_timer_stop>:
    return rc;
}

void
os_cputime_timer_stop(struct hal_timer *timer)
{
   10a70:	b508      	push	{r3, lr}
    hal_timer_stop(timer);
   10a72:	f00d ffa1 	bl	1e9b8 <hal_timer_stop>
}
   10a76:	bd08      	pop	{r3, pc}

00010a78 <os_cputime_get32>:

uint32_t
os_cputime_get32(void)
{
   10a78:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   10a7a:	2005      	movs	r0, #5
   10a7c:	f00d ff28 	bl	1e8d0 <hal_timer_read>
    return cpu_time;
}
   10a80:	bd08      	pop	{r3, pc}
	...

00010a84 <os_cputime_usecs_to_ticks>:
    /*
     * Faster calculation but could be off 1 full tick since we do not
     * add residual back. Adding back the residual is commented out below, but
     * shown.
     */
    ticks = (1ULL << 32) * MYNEWT_VAL(OS_CPUTIME_FREQ) / 1000000 * usecs;
   10a84:	4b02      	ldr	r3, [pc, #8]	; (10a90 <os_cputime_usecs_to_ticks+0xc>)
   10a86:	fba0 0103 	umull	r0, r1, r0, r3

    /* Residual for 32768 Hz. */
    //ticks += ((uint64_t)usecs * (1526122139+1)) >> 32;

    return ticks >> 32;
}
   10a8a:	4608      	mov	r0, r1
   10a8c:	4770      	bx	lr
   10a8e:	bf00      	nop
   10a90:	08637bd0 	.word	0x08637bd0

00010a94 <os_cputime_ticks_to_usecs>:

    /* Given: `freq = 2^n`, calculate `n`. */
    /* Note: this looks like a lot of work, but gcc can optimize it away since
     * `freq` is known at compile time.
     */
    freq = MYNEWT_VAL(OS_CPUTIME_FREQ);
   10a94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    shift = 0;
   10a98:	2200      	movs	r2, #0
    while (freq != 0) {
   10a9a:	e001      	b.n	10aa0 <os_cputime_ticks_to_usecs+0xc>
        freq >>= 1;
   10a9c:	085b      	lsrs	r3, r3, #1
        shift++;
   10a9e:	3201      	adds	r2, #1
    while (freq != 0) {
   10aa0:	2b00      	cmp	r3, #0
   10aa2:	d1fb      	bne.n	10a9c <os_cputime_ticks_to_usecs+0x8>
    }

    if (shift <= 7) {
   10aa4:	2a07      	cmp	r2, #7
   10aa6:	d90c      	bls.n	10ac2 <os_cputime_ticks_to_usecs+0x2e>
        return 0;
    }
    shift -= 7;
   10aa8:	3a07      	subs	r2, #7

    usecs = ((ticks >> shift) * 15625) + (((ticks & 0x1ff) * 15625) >> shift);
   10aaa:	fa20 f302 	lsr.w	r3, r0, r2
   10aae:	f643 5109 	movw	r1, #15625	; 0x3d09
   10ab2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10ab6:	fb01 f000 	mul.w	r0, r1, r0
   10aba:	fa20 f202 	lsr.w	r2, r0, r2
   10abe:	fb01 2303 	mla	r3, r1, r3, r2
    return usecs;
}
   10ac2:	4618      	mov	r0, r3
   10ac4:	4770      	bx	lr
	...

00010ac8 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   10ac8:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   10aca:	4b15      	ldr	r3, [pc, #84]	; (10b20 <os_dev_add+0x58>)
   10acc:	681d      	ldr	r5, [r3, #0]
   10ace:	b115      	cbz	r5, 10ad6 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   10ad0:	462b      	mov	r3, r5
    prev_dev = NULL;
   10ad2:	2400      	movs	r4, #0
   10ad4:	e008      	b.n	10ae8 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   10ad6:	4603      	mov	r3, r0
   10ad8:	f843 5f20 	str.w	r5, [r3, #32]!
   10adc:	4a10      	ldr	r2, [pc, #64]	; (10b20 <os_dev_add+0x58>)
   10ade:	6053      	str	r3, [r2, #4]
   10ae0:	6010      	str	r0, [r2, #0]
        return (0);
   10ae2:	e010      	b.n	10b06 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   10ae4:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   10ae6:	6a1b      	ldr	r3, [r3, #32]
   10ae8:	b143      	cbz	r3, 10afc <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   10aea:	7e01      	ldrb	r1, [r0, #24]
   10aec:	7e1a      	ldrb	r2, [r3, #24]
   10aee:	4291      	cmp	r1, r2
   10af0:	d304      	bcc.n	10afc <os_dev_add+0x34>
   10af2:	d1f7      	bne.n	10ae4 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   10af4:	7e41      	ldrb	r1, [r0, #25]
   10af6:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   10af8:	4291      	cmp	r1, r2
   10afa:	d2f3      	bcs.n	10ae4 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   10afc:	b15c      	cbz	r4, 10b16 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   10afe:	6a23      	ldr	r3, [r4, #32]
   10b00:	6203      	str	r3, [r0, #32]
   10b02:	b11b      	cbz	r3, 10b0c <os_dev_add+0x44>
   10b04:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   10b06:	2000      	movs	r0, #0
   10b08:	bc30      	pop	{r4, r5}
   10b0a:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   10b0c:	f100 0320 	add.w	r3, r0, #32
   10b10:	4a03      	ldr	r2, [pc, #12]	; (10b20 <os_dev_add+0x58>)
   10b12:	6053      	str	r3, [r2, #4]
   10b14:	e7f6      	b.n	10b04 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   10b16:	6205      	str	r5, [r0, #32]
   10b18:	4b01      	ldr	r3, [pc, #4]	; (10b20 <os_dev_add+0x58>)
   10b1a:	6018      	str	r0, [r3, #0]
   10b1c:	e7f3      	b.n	10b06 <os_dev_add+0x3e>
   10b1e:	bf00      	nop
   10b20:	20001728 	.word	0x20001728

00010b24 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   10b24:	b510      	push	{r4, lr}
   10b26:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   10b28:	6903      	ldr	r3, [r0, #16]
   10b2a:	6941      	ldr	r1, [r0, #20]
   10b2c:	4798      	blx	r3
    if (rc != 0) {
   10b2e:	4603      	mov	r3, r0
   10b30:	b128      	cbz	r0, 10b3e <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   10b32:	7ee2      	ldrb	r2, [r4, #27]
   10b34:	f012 0f08 	tst.w	r2, #8
   10b38:	d105      	bne.n	10b46 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   10b3a:	2300      	movs	r3, #0
   10b3c:	e003      	b.n	10b46 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   10b3e:	7ee2      	ldrb	r2, [r4, #27]
   10b40:	f042 0201 	orr.w	r2, r2, #1
   10b44:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   10b46:	4618      	mov	r0, r3
   10b48:	bd10      	pop	{r4, pc}

00010b4a <os_dev_init>:
    dev->od_name = name;
   10b4a:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   10b4c:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   10b4e:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   10b50:	2300      	movs	r3, #0
   10b52:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   10b54:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   10b56:	9a00      	ldr	r2, [sp, #0]
   10b58:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   10b5a:	9a01      	ldr	r2, [sp, #4]
   10b5c:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   10b5e:	6003      	str	r3, [r0, #0]
   10b60:	6043      	str	r3, [r0, #4]
   10b62:	6083      	str	r3, [r0, #8]
   10b64:	60c3      	str	r3, [r0, #12]
}
   10b66:	4618      	mov	r0, r3
   10b68:	4770      	bx	lr
	...

00010b6c <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   10b6c:	b530      	push	{r4, r5, lr}
   10b6e:	b083      	sub	sp, #12
   10b70:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   10b72:	9c07      	ldr	r4, [sp, #28]
   10b74:	9401      	str	r4, [sp, #4]
   10b76:	9c06      	ldr	r4, [sp, #24]
   10b78:	9400      	str	r4, [sp, #0]
   10b7a:	f7ff ffe6 	bl	10b4a <os_dev_init>
    if (rc != 0) {
   10b7e:	4603      	mov	r3, r0
   10b80:	b110      	cbz	r0, 10b88 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   10b82:	4618      	mov	r0, r3
   10b84:	b003      	add	sp, #12
   10b86:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   10b88:	4628      	mov	r0, r5
   10b8a:	f7ff ff9d 	bl	10ac8 <os_dev_add>
    if (rc != 0) {
   10b8e:	4603      	mov	r3, r0
   10b90:	2800      	cmp	r0, #0
   10b92:	d1f6      	bne.n	10b82 <os_dev_create+0x16>
    if (g_os_started) {
   10b94:	4a04      	ldr	r2, [pc, #16]	; (10ba8 <os_dev_create+0x3c>)
   10b96:	6812      	ldr	r2, [r2, #0]
   10b98:	2a00      	cmp	r2, #0
   10b9a:	d0f2      	beq.n	10b82 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   10b9c:	4628      	mov	r0, r5
   10b9e:	f7ff ffc1 	bl	10b24 <os_dev_initialize>
   10ba2:	4603      	mov	r3, r0
    return (rc);
   10ba4:	e7ed      	b.n	10b82 <os_dev_create+0x16>
   10ba6:	bf00      	nop
   10ba8:	20003cbc 	.word	0x20003cbc

00010bac <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   10bac:	b538      	push	{r3, r4, r5, lr}
   10bae:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   10bb0:	4b08      	ldr	r3, [pc, #32]	; (10bd4 <os_dev_initialize_all+0x28>)
   10bb2:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   10bb4:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   10bb6:	e000      	b.n	10bba <os_dev_initialize_all+0xe>
   10bb8:	6a24      	ldr	r4, [r4, #32]
   10bba:	b144      	cbz	r4, 10bce <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   10bbc:	7e23      	ldrb	r3, [r4, #24]
   10bbe:	42ab      	cmp	r3, r5
   10bc0:	d1fa      	bne.n	10bb8 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   10bc2:	4620      	mov	r0, r4
   10bc4:	f7ff ffae 	bl	10b24 <os_dev_initialize>
            if (rc) {
   10bc8:	4602      	mov	r2, r0
   10bca:	2800      	cmp	r0, #0
   10bcc:	d0f4      	beq.n	10bb8 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   10bce:	4610      	mov	r0, r2
   10bd0:	bd38      	pop	{r3, r4, r5, pc}
   10bd2:	bf00      	nop
   10bd4:	20001728 	.word	0x20001728

00010bd8 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   10bd8:	b538      	push	{r3, r4, r5, lr}
   10bda:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   10bdc:	4b05      	ldr	r3, [pc, #20]	; (10bf4 <os_dev_lookup+0x1c>)
   10bde:	681c      	ldr	r4, [r3, #0]
   10be0:	b134      	cbz	r4, 10bf0 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   10be2:	4629      	mov	r1, r5
   10be4:	69e0      	ldr	r0, [r4, #28]
   10be6:	f001 fccd 	bl	12584 <strcmp>
   10bea:	b108      	cbz	r0, 10bf0 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   10bec:	6a24      	ldr	r4, [r4, #32]
   10bee:	e7f7      	b.n	10be0 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   10bf0:	4620      	mov	r0, r4
   10bf2:	bd38      	pop	{r3, r4, r5, pc}
   10bf4:	20001728 	.word	0x20001728

00010bf8 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   10bf8:	b570      	push	{r4, r5, r6, lr}
   10bfa:	460d      	mov	r5, r1
   10bfc:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   10bfe:	f7ff ffeb 	bl	10bd8 <os_dev_lookup>
    if (dev == NULL) {
   10c02:	4604      	mov	r4, r0
   10c04:	b1a0      	cbz	r0, 10c30 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   10c06:	7ec3      	ldrb	r3, [r0, #27]
   10c08:	f013 0f01 	tst.w	r3, #1
   10c0c:	d012      	beq.n	10c34 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   10c0e:	6803      	ldr	r3, [r0, #0]
   10c10:	b11b      	cbz	r3, 10c1a <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   10c12:	4632      	mov	r2, r6
   10c14:	4629      	mov	r1, r5
   10c16:	4798      	blx	r3
        if (rc != 0) {
   10c18:	b970      	cbnz	r0, 10c38 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   10c1a:	f7ff fc15 	bl	10448 <os_arch_save_sr>
    ++dev->od_open_ref;
   10c1e:	7ea3      	ldrb	r3, [r4, #26]
   10c20:	3301      	adds	r3, #1
   10c22:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   10c24:	7ee3      	ldrb	r3, [r4, #27]
   10c26:	f043 0302 	orr.w	r3, r3, #2
   10c2a:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   10c2c:	f7ff fc12 	bl	10454 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   10c30:	4620      	mov	r0, r4
   10c32:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   10c34:	2400      	movs	r4, #0
   10c36:	e7fb      	b.n	10c30 <os_dev_open+0x38>
    return (NULL);
   10c38:	2400      	movs	r4, #0
   10c3a:	e7f9      	b.n	10c30 <os_dev_open+0x38>

00010c3c <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   10c3c:	b1b0      	cbz	r0, 10c6c <os_dev_close+0x30>
{
   10c3e:	b510      	push	{r4, lr}
   10c40:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   10c42:	68c3      	ldr	r3, [r0, #12]
   10c44:	b113      	cbz	r3, 10c4c <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   10c46:	4798      	blx	r3
        if (rc != 0) {
   10c48:	4603      	mov	r3, r0
   10c4a:	b968      	cbnz	r0, 10c68 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   10c4c:	f7ff fbfc 	bl	10448 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   10c50:	7ea3      	ldrb	r3, [r4, #26]
   10c52:	3b01      	subs	r3, #1
   10c54:	b2db      	uxtb	r3, r3
   10c56:	76a3      	strb	r3, [r4, #26]
   10c58:	b91b      	cbnz	r3, 10c62 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   10c5a:	7ee3      	ldrb	r3, [r4, #27]
   10c5c:	f023 0306 	bic.w	r3, r3, #6
   10c60:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   10c62:	f7ff fbf7 	bl	10454 <os_arch_restore_sr>

    return (0);
   10c66:	2300      	movs	r3, #0
err:
    return (rc);
}
   10c68:	4618      	mov	r0, r3
   10c6a:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   10c6c:	2302      	movs	r3, #2
}
   10c6e:	4618      	mov	r0, r3
   10c70:	4770      	bx	lr
	...

00010c74 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   10c74:	4b02      	ldr	r3, [pc, #8]	; (10c80 <os_dev_reset+0xc>)
   10c76:	2200      	movs	r2, #0
   10c78:	601a      	str	r2, [r3, #0]
   10c7a:	605b      	str	r3, [r3, #4]
}
   10c7c:	4770      	bx	lr
   10c7e:	bf00      	nop
   10c80:	20001728 	.word	0x20001728

00010c84 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   10c84:	2200      	movs	r2, #0
   10c86:	6002      	str	r2, [r0, #0]
   10c88:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   10c8a:	4603      	mov	r3, r0
   10c8c:	f843 2f08 	str.w	r2, [r3, #8]!
   10c90:	60c3      	str	r3, [r0, #12]
}
   10c92:	4770      	bx	lr

00010c94 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   10c94:	68c0      	ldr	r0, [r0, #12]
}
   10c96:	3000      	adds	r0, #0
   10c98:	bf18      	it	ne
   10c9a:	2001      	movne	r0, #1
   10c9c:	4770      	bx	lr

00010c9e <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   10c9e:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   10ca0:	b1f0      	cbz	r0, 10ce0 <os_eventq_put+0x42>
   10ca2:	460c      	mov	r4, r1
   10ca4:	4605      	mov	r5, r0
   10ca6:	f7ff fff5 	bl	10c94 <os_eventq_inited>
   10caa:	b1c8      	cbz	r0, 10ce0 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   10cac:	f7ff fbcc 	bl	10448 <os_arch_save_sr>
   10cb0:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   10cb2:	7823      	ldrb	r3, [r4, #0]
   10cb4:	b9d3      	cbnz	r3, 10cec <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   10cb6:	2301      	movs	r3, #1
   10cb8:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   10cba:	2300      	movs	r3, #0
   10cbc:	60e3      	str	r3, [r4, #12]
   10cbe:	68eb      	ldr	r3, [r5, #12]
   10cc0:	601c      	str	r4, [r3, #0]
   10cc2:	340c      	adds	r4, #12
   10cc4:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   10cc6:	6868      	ldr	r0, [r5, #4]
   10cc8:	b1b8      	cbz	r0, 10cfa <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   10cca:	7b03      	ldrb	r3, [r0, #12]
   10ccc:	2b02      	cmp	r3, #2
   10cce:	d010      	beq.n	10cf2 <os_eventq_put+0x54>
    resched = 0;
   10cd0:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   10cd2:	2300      	movs	r3, #0
   10cd4:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   10cd6:	4630      	mov	r0, r6
   10cd8:	f7ff fbbc 	bl	10454 <os_arch_restore_sr>

    if (resched) {
   10cdc:	b97c      	cbnz	r4, 10cfe <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   10cde:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   10ce0:	2300      	movs	r3, #0
   10ce2:	461a      	mov	r2, r3
   10ce4:	4619      	mov	r1, r3
   10ce6:	4618      	mov	r0, r3
   10ce8:	f7ff fc78 	bl	105dc <__assert_func>
        OS_EXIT_CRITICAL(sr);
   10cec:	f7ff fbb2 	bl	10454 <os_arch_restore_sr>
   10cf0:	e7f5      	b.n	10cde <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   10cf2:	f001 f819 	bl	11d28 <os_sched_wakeup>
            resched = 1;
   10cf6:	2401      	movs	r4, #1
   10cf8:	e7eb      	b.n	10cd2 <os_eventq_put+0x34>
    resched = 0;
   10cfa:	2400      	movs	r4, #0
   10cfc:	e7eb      	b.n	10cd6 <os_eventq_put+0x38>
        os_sched(NULL);
   10cfe:	2000      	movs	r0, #0
   10d00:	f001 f892 	bl	11e28 <os_sched>
   10d04:	e7eb      	b.n	10cde <os_eventq_put+0x40>

00010d06 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   10d06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d08:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   10d0a:	f000 ffb9 	bl	11c80 <os_sched_get_current_task>
   10d0e:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   10d10:	682b      	ldr	r3, [r5, #0]
   10d12:	4283      	cmp	r3, r0
   10d14:	d001      	beq.n	10d1a <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   10d16:	b9db      	cbnz	r3, 10d50 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   10d18:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   10d1a:	f7ff fb95 	bl	10448 <os_arch_save_sr>
   10d1e:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   10d20:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   10d22:	b9de      	cbnz	r6, 10d5c <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   10d24:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   10d26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10d2a:	4620      	mov	r0, r4
   10d2c:	f000 ffb4 	bl	11c98 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   10d30:	7b63      	ldrb	r3, [r4, #13]
   10d32:	f043 0308 	orr.w	r3, r3, #8
   10d36:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   10d38:	4638      	mov	r0, r7
   10d3a:	f7ff fb8b 	bl	10454 <os_arch_restore_sr>

        os_sched(NULL);
   10d3e:	2000      	movs	r0, #0
   10d40:	f001 f872 	bl	11e28 <os_sched>

        OS_ENTER_CRITICAL(sr);
   10d44:	f7ff fb80 	bl	10448 <os_arch_save_sr>
   10d48:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   10d4a:	2300      	movs	r3, #0
   10d4c:	606b      	str	r3, [r5, #4]
        goto pull_one;
   10d4e:	e7e7      	b.n	10d20 <os_eventq_get+0x1a>
            assert(0);
   10d50:	2300      	movs	r3, #0
   10d52:	461a      	mov	r2, r3
   10d54:	4619      	mov	r1, r3
   10d56:	4618      	mov	r0, r3
   10d58:	f7ff fc40 	bl	105dc <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   10d5c:	68f3      	ldr	r3, [r6, #12]
   10d5e:	60ab      	str	r3, [r5, #8]
   10d60:	b153      	cbz	r3, 10d78 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   10d62:	2300      	movs	r3, #0
   10d64:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   10d66:	7b63      	ldrb	r3, [r4, #13]
   10d68:	f023 0308 	bic.w	r3, r3, #8
   10d6c:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   10d6e:	4638      	mov	r0, r7
   10d70:	f7ff fb70 	bl	10454 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   10d74:	4630      	mov	r0, r6
   10d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   10d78:	f105 0308 	add.w	r3, r5, #8
   10d7c:	60eb      	str	r3, [r5, #12]
   10d7e:	e7f0      	b.n	10d62 <os_eventq_get+0x5c>

00010d80 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   10d80:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   10d82:	f7ff ffc0 	bl	10d06 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   10d86:	6843      	ldr	r3, [r0, #4]
   10d88:	b10b      	cbz	r3, 10d8e <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   10d8a:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   10d8c:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   10d8e:	461a      	mov	r2, r3
   10d90:	4619      	mov	r1, r3
   10d92:	4618      	mov	r0, r3
   10d94:	f7ff fc22 	bl	105dc <__assert_func>

00010d98 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   10d98:	b538      	push	{r3, r4, r5, lr}
   10d9a:	4605      	mov	r5, r0
   10d9c:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   10d9e:	f7ff fb53 	bl	10448 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   10da2:	7823      	ldrb	r3, [r4, #0]
   10da4:	b183      	cbz	r3, 10dc8 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   10da6:	68aa      	ldr	r2, [r5, #8]
   10da8:	42a2      	cmp	r2, r4
   10daa:	d107      	bne.n	10dbc <os_eventq_remove+0x24>
   10dac:	68d3      	ldr	r3, [r2, #12]
   10dae:	60ab      	str	r3, [r5, #8]
   10db0:	b953      	cbnz	r3, 10dc8 <os_eventq_remove+0x30>
   10db2:	f105 0308 	add.w	r3, r5, #8
   10db6:	60eb      	str	r3, [r5, #12]
   10db8:	e006      	b.n	10dc8 <os_eventq_remove+0x30>
   10dba:	461a      	mov	r2, r3
   10dbc:	68d3      	ldr	r3, [r2, #12]
   10dbe:	42a3      	cmp	r3, r4
   10dc0:	d1fb      	bne.n	10dba <os_eventq_remove+0x22>
   10dc2:	68db      	ldr	r3, [r3, #12]
   10dc4:	60d3      	str	r3, [r2, #12]
   10dc6:	b123      	cbz	r3, 10dd2 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   10dc8:	2300      	movs	r3, #0
   10dca:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   10dcc:	f7ff fb42 	bl	10454 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   10dd0:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   10dd2:	320c      	adds	r2, #12
   10dd4:	60ea      	str	r2, [r5, #12]
   10dd6:	e7f7      	b.n	10dc8 <os_eventq_remove+0x30>

00010dd8 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   10dd8:	4800      	ldr	r0, [pc, #0]	; (10ddc <os_eventq_dflt_get+0x4>)
   10dda:	4770      	bx	lr
   10ddc:	20001730 	.word	0x20001730

00010de0 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   10de0:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   10de2:	2000      	movs	r0, #0
   10de4:	6018      	str	r0, [r3, #0]
   10de6:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   10de8:	6098      	str	r0, [r3, #8]
   10dea:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   10dec:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   10dee:	611a      	str	r2, [r3, #16]

    return (0);
}
   10df0:	4770      	bx	lr

00010df2 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   10df2:	b538      	push	{r3, r4, r5, lr}
   10df4:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   10df6:	f7ff fb27 	bl	10448 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   10dfa:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   10dfc:	b114      	cbz	r4, 10e04 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   10dfe:	6863      	ldr	r3, [r4, #4]
   10e00:	602b      	str	r3, [r5, #0]
   10e02:	b12b      	cbz	r3, 10e10 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   10e04:	f7ff fb26 	bl	10454 <os_arch_restore_sr>

    if (mp) {
   10e08:	b124      	cbz	r4, 10e14 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   10e0a:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   10e0e:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   10e10:	606d      	str	r5, [r5, #4]
   10e12:	e7f7      	b.n	10e04 <os_mqueue_get+0x12>
        m = NULL;
   10e14:	2000      	movs	r0, #0
    return (m);
   10e16:	e7fa      	b.n	10e0e <os_mqueue_get+0x1c>

00010e18 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   10e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   10e1a:	7953      	ldrb	r3, [r2, #5]
   10e1c:	2b07      	cmp	r3, #7
   10e1e:	d916      	bls.n	10e4e <os_mqueue_put+0x36>
   10e20:	4614      	mov	r4, r2
   10e22:	460e      	mov	r6, r1
   10e24:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   10e26:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   10e2a:	f7ff fb0d 	bl	10448 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   10e2e:	2300      	movs	r3, #0
   10e30:	f844 3f14 	str.w	r3, [r4, #20]!
   10e34:	686b      	ldr	r3, [r5, #4]
   10e36:	601f      	str	r7, [r3, #0]
   10e38:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   10e3a:	f7ff fb0b 	bl	10454 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   10e3e:	b146      	cbz	r6, 10e52 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   10e40:	f105 0108 	add.w	r1, r5, #8
   10e44:	4630      	mov	r0, r6
   10e46:	f7ff ff2a 	bl	10c9e <os_eventq_put>
    }

    return (0);
   10e4a:	2000      	movs	r0, #0
   10e4c:	e000      	b.n	10e50 <os_mqueue_put+0x38>
err:
    return (rc);
   10e4e:	2002      	movs	r0, #2
}
   10e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   10e52:	2000      	movs	r0, #0
   10e54:	e7fc      	b.n	10e50 <os_mqueue_put+0x38>

00010e56 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   10e56:	3a10      	subs	r2, #16
   10e58:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   10e5a:	6041      	str	r1, [r0, #4]

    return (0);
}
   10e5c:	2000      	movs	r0, #0
   10e5e:	4770      	bx	lr

00010e60 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   10e60:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   10e62:	8803      	ldrh	r3, [r0, #0]
   10e64:	428b      	cmp	r3, r1
   10e66:	d312      	bcc.n	10e8e <os_mbuf_get+0x2e>
   10e68:	460d      	mov	r5, r1
   10e6a:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   10e6c:	6840      	ldr	r0, [r0, #4]
   10e6e:	f000 fc8a 	bl	11786 <os_memblock_get>
    if (!om) {
   10e72:	4603      	mov	r3, r0
   10e74:	b148      	cbz	r0, 10e8a <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   10e76:	2200      	movs	r2, #0
   10e78:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   10e7a:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   10e7c:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   10e7e:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   10e80:	f100 0110 	add.w	r1, r0, #16
   10e84:	4429      	add	r1, r5
   10e86:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   10e88:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   10e8a:	4618      	mov	r0, r3
   10e8c:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   10e8e:	2300      	movs	r3, #0
    return om;
   10e90:	e7fb      	b.n	10e8a <os_mbuf_get+0x2a>

00010e92 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   10e92:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   10e94:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   10e98:	8803      	ldrh	r3, [r0, #0]
   10e9a:	42ab      	cmp	r3, r5
   10e9c:	d310      	bcc.n	10ec0 <os_mbuf_get_pkthdr+0x2e>
   10e9e:	2dff      	cmp	r5, #255	; 0xff
   10ea0:	d810      	bhi.n	10ec4 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   10ea2:	2100      	movs	r1, #0
   10ea4:	f7ff ffdc 	bl	10e60 <os_mbuf_get>
    if (om) {
   10ea8:	4603      	mov	r3, r0
   10eaa:	b138      	cbz	r0, 10ebc <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   10eac:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   10eae:	6802      	ldr	r2, [r0, #0]
   10eb0:	4415      	add	r5, r2
   10eb2:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   10eb4:	2200      	movs	r2, #0
   10eb6:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   10eb8:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   10eba:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   10ebc:	4618      	mov	r0, r3
   10ebe:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   10ec0:	2300      	movs	r3, #0
   10ec2:	e7fb      	b.n	10ebc <os_mbuf_get_pkthdr+0x2a>
   10ec4:	2300      	movs	r3, #0
    return om;
   10ec6:	e7f9      	b.n	10ebc <os_mbuf_get_pkthdr+0x2a>

00010ec8 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   10ec8:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   10eca:	6883      	ldr	r3, [r0, #8]
   10ecc:	b123      	cbz	r3, 10ed8 <os_mbuf_free+0x10>
   10ece:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   10ed0:	6858      	ldr	r0, [r3, #4]
   10ed2:	f000 fc80 	bl	117d6 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   10ed6:	bd08      	pop	{r3, pc}
    rc = 0;
   10ed8:	2000      	movs	r0, #0
    return (rc);
   10eda:	e7fc      	b.n	10ed6 <os_mbuf_free+0xe>

00010edc <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   10edc:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   10ede:	b160      	cbz	r0, 10efa <os_mbuf_free_chain+0x1e>
{
   10ee0:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   10ee2:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   10ee4:	4618      	mov	r0, r3
   10ee6:	f7ff ffef 	bl	10ec8 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   10eea:	4623      	mov	r3, r4
        if (rc != 0) {
   10eec:	4602      	mov	r2, r0
   10eee:	b910      	cbnz	r0, 10ef6 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   10ef0:	2c00      	cmp	r4, #0
   10ef2:	d1f6      	bne.n	10ee2 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   10ef4:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   10ef6:	4610      	mov	r0, r2
   10ef8:	bd10      	pop	{r4, pc}
    rc = 0;
   10efa:	2200      	movs	r2, #0
}
   10efc:	4610      	mov	r0, r2
   10efe:	4770      	bx	lr

00010f00 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   10f00:	2300      	movs	r3, #0
    while (om != NULL) {
   10f02:	e003      	b.n	10f0c <os_mbuf_len+0xc>
        len += om->om_len;
   10f04:	88c2      	ldrh	r2, [r0, #6]
   10f06:	4413      	add	r3, r2
   10f08:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   10f0a:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   10f0c:	2800      	cmp	r0, #0
   10f0e:	d1f9      	bne.n	10f04 <os_mbuf_len+0x4>
    }

    return len;
}
   10f10:	4618      	mov	r0, r3
   10f12:	4770      	bx	lr

00010f14 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   10f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   10f18:	2800      	cmp	r0, #0
   10f1a:	d04d      	beq.n	10fb8 <os_mbuf_append+0xa4>
   10f1c:	460f      	mov	r7, r1
   10f1e:	4691      	mov	r9, r2
   10f20:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   10f22:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   10f26:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   10f28:	e000      	b.n	10f2c <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   10f2a:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   10f2c:	68eb      	ldr	r3, [r5, #12]
   10f2e:	2b00      	cmp	r3, #0
   10f30:	d1fb      	bne.n	10f2a <os_mbuf_append+0x16>
    }

    remainder = len;
   10f32:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   10f34:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   10f36:	f105 0410 	add.w	r4, r5, #16
   10f3a:	881b      	ldrh	r3, [r3, #0]
   10f3c:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   10f3e:	6828      	ldr	r0, [r5, #0]
   10f40:	88eb      	ldrh	r3, [r5, #6]
   10f42:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   10f44:	1a24      	subs	r4, r4, r0
   10f46:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   10f48:	b164      	cbz	r4, 10f64 <os_mbuf_append+0x50>
        if (space > remainder) {
   10f4a:	454c      	cmp	r4, r9
   10f4c:	dd00      	ble.n	10f50 <os_mbuf_append+0x3c>
            space = remainder;
   10f4e:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   10f50:	4622      	mov	r2, r4
   10f52:	4639      	mov	r1, r7
   10f54:	f001 fab6 	bl	124c4 <memcpy>

        last->om_len += space;
   10f58:	88eb      	ldrh	r3, [r5, #6]
   10f5a:	4423      	add	r3, r4
   10f5c:	80eb      	strh	r3, [r5, #6]
        data += space;
   10f5e:	4427      	add	r7, r4
        remainder -= space;
   10f60:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   10f64:	2e00      	cmp	r6, #0
   10f66:	dd16      	ble.n	10f96 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   10f68:	2100      	movs	r1, #0
   10f6a:	4640      	mov	r0, r8
   10f6c:	f7ff ff78 	bl	10e60 <os_mbuf_get>
        if (!new) {
   10f70:	4604      	mov	r4, r0
   10f72:	b180      	cbz	r0, 10f96 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   10f74:	f8b8 2000 	ldrh.w	r2, [r8]
   10f78:	42b2      	cmp	r2, r6
   10f7a:	bfa8      	it	ge
   10f7c:	4632      	movge	r2, r6
   10f7e:	b292      	uxth	r2, r2
   10f80:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   10f82:	4639      	mov	r1, r7
   10f84:	6800      	ldr	r0, [r0, #0]
   10f86:	f001 fa9d 	bl	124c4 <memcpy>
        data += new->om_len;
   10f8a:	88e3      	ldrh	r3, [r4, #6]
   10f8c:	441f      	add	r7, r3
        remainder -= new->om_len;
   10f8e:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   10f90:	60ec      	str	r4, [r5, #12]
        last = new;
   10f92:	4625      	mov	r5, r4
   10f94:	e7e6      	b.n	10f64 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   10f96:	f89a 3005 	ldrb.w	r3, [sl, #5]
   10f9a:	2b07      	cmp	r3, #7
   10f9c:	d907      	bls.n	10fae <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   10f9e:	eba9 0906 	sub.w	r9, r9, r6
   10fa2:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   10fa6:	fa13 f989 	uxtah	r9, r3, r9
   10faa:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   10fae:	b106      	cbz	r6, 10fb2 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   10fb0:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   10fb2:	4630      	mov	r0, r6
   10fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   10fb8:	2602      	movs	r6, #2
   10fba:	e7fa      	b.n	10fb2 <os_mbuf_append+0x9e>

00010fbc <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   10fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fc0:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   10fc2:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   10fc6:	2700      	movs	r7, #0
    head = NULL;
   10fc8:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   10fca:	e017      	b.n	10ffc <os_mbuf_dup+0x40>
    startoff = 0;
   10fcc:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   10fce:	4623      	mov	r3, r4
   10fd0:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   10fd4:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   10fd6:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   10fd8:	b299      	uxth	r1, r3
   10fda:	4640      	mov	r0, r8
   10fdc:	f7ff ff40 	bl	10e60 <os_mbuf_get>
   10fe0:	4605      	mov	r5, r0
   10fe2:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   10fe4:	b188      	cbz	r0, 1100a <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   10fe6:	7923      	ldrb	r3, [r4, #4]
   10fe8:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   10fea:	88e3      	ldrh	r3, [r4, #6]
   10fec:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   10fee:	88e2      	ldrh	r2, [r4, #6]
   10ff0:	6821      	ldr	r1, [r4, #0]
   10ff2:	6828      	ldr	r0, [r5, #0]
   10ff4:	f001 fa66 	bl	124c4 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   10ff8:	68e4      	ldr	r4, [r4, #12]
   10ffa:	462f      	mov	r7, r5
   10ffc:	b14c      	cbz	r4, 11012 <os_mbuf_dup+0x56>
        if (head) {
   10ffe:	b15e      	cbz	r6, 11018 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   11000:	7963      	ldrb	r3, [r4, #5]
   11002:	2b07      	cmp	r3, #7
   11004:	d9e2      	bls.n	10fcc <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   11006:	b299      	uxth	r1, r3
   11008:	e7e1      	b.n	10fce <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1100a:	4630      	mov	r0, r6
   1100c:	f7ff ff66 	bl	10edc <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   11010:	462e      	mov	r6, r5
}
   11012:	4630      	mov	r0, r6
   11014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   11018:	7963      	ldrb	r3, [r4, #5]
   1101a:	2b07      	cmp	r3, #7
   1101c:	d911      	bls.n	11042 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1101e:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   11020:	4623      	mov	r3, r4
   11022:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   11026:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   11028:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1102a:	b299      	uxth	r1, r3
   1102c:	4640      	mov	r0, r8
   1102e:	f7ff ff17 	bl	10e60 <os_mbuf_get>
            if (!head) {
   11032:	4606      	mov	r6, r0
   11034:	2800      	cmp	r0, #0
   11036:	d0ec      	beq.n	11012 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   11038:	7963      	ldrb	r3, [r4, #5]
   1103a:	2b07      	cmp	r3, #7
   1103c:	d803      	bhi.n	11046 <os_mbuf_dup+0x8a>
            copy = head;
   1103e:	4605      	mov	r5, r0
   11040:	e7d1      	b.n	10fe6 <os_mbuf_dup+0x2a>
    startoff = 0;
   11042:	2100      	movs	r1, #0
   11044:	e7ec      	b.n	11020 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   11046:	88c3      	ldrh	r3, [r0, #6]
   11048:	b973      	cbnz	r3, 11068 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1104a:	f100 0510 	add.w	r5, r0, #16
   1104e:	7962      	ldrb	r2, [r4, #5]
   11050:	f104 0110 	add.w	r1, r4, #16
   11054:	4628      	mov	r0, r5
   11056:	f001 fa35 	bl	124c4 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1105a:	7963      	ldrb	r3, [r4, #5]
   1105c:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1105e:	7963      	ldrb	r3, [r4, #5]
   11060:	441d      	add	r5, r3
   11062:	6035      	str	r5, [r6, #0]
            copy = head;
   11064:	4635      	mov	r5, r6
   11066:	e7be      	b.n	10fe6 <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   11068:	2300      	movs	r3, #0
   1106a:	461a      	mov	r2, r3
   1106c:	4619      	mov	r1, r3
   1106e:	4618      	mov	r0, r3
   11070:	f7ff fab4 	bl	105dc <__assert_func>

00011074 <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
   11074:	b178      	cbz	r0, 11096 <os_mbuf_off+0x22>
{
   11076:	b410      	push	{r4}
   11078:	e002      	b.n	11080 <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
   1107a:	1ac9      	subs	r1, r1, r3
        cur = next;
   1107c:	4620      	mov	r0, r4
        if (cur == NULL) {
   1107e:	b13c      	cbz	r4, 11090 <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
   11080:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
   11082:	88c3      	ldrh	r3, [r0, #6]
   11084:	428b      	cmp	r3, r1
   11086:	dc02      	bgt.n	1108e <os_mbuf_off+0x1a>
   11088:	d1f7      	bne.n	1107a <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
   1108a:	2c00      	cmp	r4, #0
   1108c:	d1f5      	bne.n	1107a <os_mbuf_off+0x6>
            *out_off = off;
   1108e:	8011      	strh	r1, [r2, #0]
    }
}
   11090:	f85d 4b04 	ldr.w	r4, [sp], #4
   11094:	4770      	bx	lr
   11096:	4770      	bx	lr

00011098 <os_mbuf_appendfrom>:
{
   11098:	b5f0      	push	{r4, r5, r6, r7, lr}
   1109a:	b083      	sub	sp, #12
   1109c:	4607      	mov	r7, r0
   1109e:	4608      	mov	r0, r1
   110a0:	4611      	mov	r1, r2
   110a2:	461e      	mov	r6, r3
    src_cur_om = os_mbuf_off(src, src_off, &src_cur_off);
   110a4:	f10d 0206 	add.w	r2, sp, #6
   110a8:	f7ff ffe4 	bl	11074 <os_mbuf_off>
   110ac:	4605      	mov	r5, r0
    while (len > 0) {
   110ae:	b1be      	cbz	r6, 110e0 <os_mbuf_appendfrom+0x48>
        if (src_cur_om == NULL) {
   110b0:	b1d5      	cbz	r5, 110e8 <os_mbuf_appendfrom+0x50>
        chunk_sz = min(len, src_cur_om->om_len - src_cur_off);
   110b2:	88ec      	ldrh	r4, [r5, #6]
   110b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   110b8:	1ae4      	subs	r4, r4, r3
   110ba:	42b4      	cmp	r4, r6
   110bc:	bfa8      	it	ge
   110be:	4634      	movge	r4, r6
   110c0:	b2a4      	uxth	r4, r4
        rc = os_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
   110c2:	6829      	ldr	r1, [r5, #0]
   110c4:	4622      	mov	r2, r4
   110c6:	4419      	add	r1, r3
   110c8:	4638      	mov	r0, r7
   110ca:	f7ff ff23 	bl	10f14 <os_mbuf_append>
        if (rc != 0) {
   110ce:	4603      	mov	r3, r0
   110d0:	b938      	cbnz	r0, 110e2 <os_mbuf_appendfrom+0x4a>
        len -= chunk_sz;
   110d2:	1b34      	subs	r4, r6, r4
   110d4:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
   110d6:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
   110d8:	2300      	movs	r3, #0
   110da:	f8ad 3006 	strh.w	r3, [sp, #6]
   110de:	e7e6      	b.n	110ae <os_mbuf_appendfrom+0x16>
    return 0;
   110e0:	2300      	movs	r3, #0
}
   110e2:	4618      	mov	r0, r3
   110e4:	b003      	add	sp, #12
   110e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return OS_EINVAL;
   110e8:	2302      	movs	r3, #2
   110ea:	e7fa      	b.n	110e2 <os_mbuf_appendfrom+0x4a>

000110ec <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
   110ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   110ee:	4604      	mov	r4, r0
   110f0:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
   110f2:	4616      	mov	r6, r2
   110f4:	b312      	cbz	r2, 1113c <os_mbuf_copydata+0x50>
        return 0;
    }

    udst = dst;

    while (off > 0) {
   110f6:	2900      	cmp	r1, #0
   110f8:	dd06      	ble.n	11108 <os_mbuf_copydata+0x1c>
        if (!m) {
   110fa:	b30c      	cbz	r4, 11140 <os_mbuf_copydata+0x54>
            return (-1);
        }

        if (off < m->om_len)
   110fc:	88e3      	ldrh	r3, [r4, #6]
   110fe:	428b      	cmp	r3, r1
   11100:	dc02      	bgt.n	11108 <os_mbuf_copydata+0x1c>
            break;
        off -= m->om_len;
   11102:	1ac9      	subs	r1, r1, r3
        m = SLIST_NEXT(m, om_next);
   11104:	68e4      	ldr	r4, [r4, #12]
   11106:	e7f6      	b.n	110f6 <os_mbuf_copydata+0xa>
    }
    while (len > 0 && m != NULL) {
   11108:	2e00      	cmp	r6, #0
   1110a:	dd10      	ble.n	1112e <os_mbuf_copydata+0x42>
   1110c:	b17c      	cbz	r4, 1112e <os_mbuf_copydata+0x42>
        count = min(m->om_len - off, len);
   1110e:	88e5      	ldrh	r5, [r4, #6]
   11110:	1a6d      	subs	r5, r5, r1
   11112:	42b5      	cmp	r5, r6
   11114:	bfa8      	it	ge
   11116:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
   11118:	6823      	ldr	r3, [r4, #0]
   1111a:	462a      	mov	r2, r5
   1111c:	4419      	add	r1, r3
   1111e:	4638      	mov	r0, r7
   11120:	f001 f9d0 	bl	124c4 <memcpy>
        len -= count;
   11124:	1b76      	subs	r6, r6, r5
        udst += count;
   11126:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
   11128:	68e4      	ldr	r4, [r4, #12]
        off = 0;
   1112a:	2100      	movs	r1, #0
   1112c:	e7ec      	b.n	11108 <os_mbuf_copydata+0x1c>
    }

    return (len > 0 ? -1 : 0);
   1112e:	2e00      	cmp	r6, #0
   11130:	dc01      	bgt.n	11136 <os_mbuf_copydata+0x4a>
   11132:	2000      	movs	r0, #0
   11134:	e003      	b.n	1113e <os_mbuf_copydata+0x52>
   11136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1113a:	e000      	b.n	1113e <os_mbuf_copydata+0x52>
        return 0;
   1113c:	4610      	mov	r0, r2
}
   1113e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return (-1);
   11140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11144:	e7fb      	b.n	1113e <os_mbuf_copydata+0x52>

00011146 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
   11146:	2800      	cmp	r0, #0
   11148:	d04e      	beq.n	111e8 <os_mbuf_adj+0xa2>
{
   1114a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1114c:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
   1114e:	2900      	cmp	r1, #0
   11150:	db1c      	blt.n	1118c <os_mbuf_adj+0x46>
    if ((m = mp) == NULL)
   11152:	4603      	mov	r3, r0
    int len = req_len;
   11154:	460a      	mov	r2, r1
   11156:	e005      	b.n	11164 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
   11158:	1a80      	subs	r0, r0, r2
   1115a:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
   1115c:	6818      	ldr	r0, [r3, #0]
   1115e:	4402      	add	r2, r0
   11160:	601a      	str	r2, [r3, #0]
                len = 0;
   11162:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
   11164:	b14b      	cbz	r3, 1117a <os_mbuf_adj+0x34>
   11166:	2a00      	cmp	r2, #0
   11168:	dd07      	ble.n	1117a <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
   1116a:	88d8      	ldrh	r0, [r3, #6]
   1116c:	4290      	cmp	r0, r2
   1116e:	dcf3      	bgt.n	11158 <os_mbuf_adj+0x12>
                len -= m->om_len;
   11170:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
   11172:	2000      	movs	r0, #0
   11174:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
   11176:	68db      	ldr	r3, [r3, #12]
   11178:	e7f4      	b.n	11164 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
   1117a:	7963      	ldrb	r3, [r4, #5]
   1117c:	2b07      	cmp	r3, #7
   1117e:	d904      	bls.n	1118a <os_mbuf_adj+0x44>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
   11180:	1a52      	subs	r2, r2, r1
   11182:	8a21      	ldrh	r1, [r4, #16]
   11184:	fa11 f282 	uxtah	r2, r1, r2
   11188:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
   1118a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len = -len;
   1118c:	424f      	negs	r7, r1
        count = 0;
   1118e:	2200      	movs	r2, #0
   11190:	e000      	b.n	11194 <os_mbuf_adj+0x4e>
            m = SLIST_NEXT(m, om_next);
   11192:	4628      	mov	r0, r5
            count += m->om_len;
   11194:	88c3      	ldrh	r3, [r0, #6]
   11196:	441a      	add	r2, r3
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
   11198:	68c5      	ldr	r5, [r0, #12]
   1119a:	2d00      	cmp	r5, #0
   1119c:	d1f9      	bne.n	11192 <os_mbuf_adj+0x4c>
        if (m->om_len >= len) {
   1119e:	42bb      	cmp	r3, r7
   111a0:	db09      	blt.n	111b6 <os_mbuf_adj+0x70>
            m->om_len -= len;
   111a2:	b2bf      	uxth	r7, r7
   111a4:	1bdb      	subs	r3, r3, r7
   111a6:	80c3      	strh	r3, [r0, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
   111a8:	7963      	ldrb	r3, [r4, #5]
   111aa:	2b07      	cmp	r3, #7
   111ac:	d9ed      	bls.n	1118a <os_mbuf_adj+0x44>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
   111ae:	8a23      	ldrh	r3, [r4, #16]
   111b0:	1bdf      	subs	r7, r3, r7
   111b2:	8227      	strh	r7, [r4, #16]
   111b4:	e7e9      	b.n	1118a <os_mbuf_adj+0x44>
        if (count < 0)
   111b6:	188a      	adds	r2, r1, r2
   111b8:	d40b      	bmi.n	111d2 <os_mbuf_adj+0x8c>
        if (OS_MBUF_IS_PKTHDR(m))
   111ba:	7963      	ldrb	r3, [r4, #5]
   111bc:	2b07      	cmp	r3, #7
   111be:	d900      	bls.n	111c2 <os_mbuf_adj+0x7c>
            OS_MBUF_PKTHDR(m)->omp_len = count;
   111c0:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
   111c2:	2c00      	cmp	r4, #0
   111c4:	d0e1      	beq.n	1118a <os_mbuf_adj+0x44>
            if (m->om_len >= count) {
   111c6:	88e3      	ldrh	r3, [r4, #6]
   111c8:	4293      	cmp	r3, r2
   111ca:	da04      	bge.n	111d6 <os_mbuf_adj+0x90>
            count -= m->om_len;
   111cc:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
   111ce:	68e4      	ldr	r4, [r4, #12]
   111d0:	e7f7      	b.n	111c2 <os_mbuf_adj+0x7c>
            count = 0;
   111d2:	2200      	movs	r2, #0
   111d4:	e7f1      	b.n	111ba <os_mbuf_adj+0x74>
                m->om_len = count;
   111d6:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
   111d8:	68e0      	ldr	r0, [r4, #12]
   111da:	2800      	cmp	r0, #0
   111dc:	d0d5      	beq.n	1118a <os_mbuf_adj+0x44>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
   111de:	f7ff fe7d 	bl	10edc <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
   111e2:	2300      	movs	r3, #0
   111e4:	60e3      	str	r3, [r4, #12]
   111e6:	e7d0      	b.n	1118a <os_mbuf_adj+0x44>
   111e8:	4770      	bx	lr

000111ea <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
   111ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111ee:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
   111f0:	1e1e      	subs	r6, r3, #0
   111f2:	dd2d      	ble.n	11250 <os_mbuf_cmpf+0x66>
   111f4:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
   111f6:	f10d 0206 	add.w	r2, sp, #6
   111fa:	f7ff ff3b 	bl	11074 <os_mbuf_off>
   111fe:	4604      	mov	r4, r0
    data_off = 0;
   11200:	f04f 0800 	mov.w	r8, #0
   11204:	e009      	b.n	1121a <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
   11206:	4445      	add	r5, r8
   11208:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
   1120c:	45b0      	cmp	r8, r6
   1120e:	d027      	beq.n	11260 <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
   11210:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
   11212:	2300      	movs	r3, #0
   11214:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
   11218:	b1bc      	cbz	r4, 1124a <os_mbuf_cmpf+0x60>
        if (om == NULL) {
   1121a:	b1f4      	cbz	r4, 1125a <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
   1121c:	eba6 0208 	sub.w	r2, r6, r8
   11220:	88e3      	ldrh	r3, [r4, #6]
   11222:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   11226:	1a1b      	subs	r3, r3, r0
   11228:	429a      	cmp	r2, r3
   1122a:	bfa8      	it	ge
   1122c:	461a      	movge	r2, r3
   1122e:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
   11230:	2d00      	cmp	r5, #0
   11232:	d0e8      	beq.n	11206 <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
   11234:	6823      	ldr	r3, [r4, #0]
   11236:	462a      	mov	r2, r5
   11238:	eb07 0108 	add.w	r1, r7, r8
   1123c:	4418      	add	r0, r3
   1123e:	f001 f91d 	bl	1247c <memcmp>
            if (rc != 0) {
   11242:	4603      	mov	r3, r0
   11244:	2800      	cmp	r0, #0
   11246:	d0de      	beq.n	11206 <os_mbuf_cmpf+0x1c>
   11248:	e003      	b.n	11252 <os_mbuf_cmpf+0x68>
            return INT_MAX;
   1124a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1124e:	e000      	b.n	11252 <os_mbuf_cmpf+0x68>
        return 0;
   11250:	2300      	movs	r3, #0
        }
    }
}
   11252:	4618      	mov	r0, r3
   11254:	b002      	add	sp, #8
   11256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
   1125a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1125e:	e7f8      	b.n	11252 <os_mbuf_cmpf+0x68>
            return 0;
   11260:	2300      	movs	r3, #0
   11262:	e7f6      	b.n	11252 <os_mbuf_cmpf+0x68>

00011264 <os_mbuf_cmpm>:

int
os_mbuf_cmpm(const struct os_mbuf *om1, uint16_t offset1,
             const struct os_mbuf *om2, uint16_t offset2,
             uint16_t len)
{
   11264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11268:	b083      	sub	sp, #12
   1126a:	4615      	mov	r5, r2
   1126c:	461f      	mov	r7, r3
   1126e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    uint16_t om2_left;
    uint16_t om1_off;
    uint16_t om2_off;
    int rc;

    om1_off = 0;
   11272:	2300      	movs	r3, #0
   11274:	f8ad 3006 	strh.w	r3, [sp, #6]
    om2_off = 0;
   11278:	f8ad 3004 	strh.w	r3, [sp, #4]

    cur1 = os_mbuf_off(om1, offset1, &om1_off);
   1127c:	f10d 0206 	add.w	r2, sp, #6
   11280:	f7ff fef8 	bl	11074 <os_mbuf_off>
   11284:	4604      	mov	r4, r0
    cur2 = os_mbuf_off(om2, offset2, &om2_off);
   11286:	aa01      	add	r2, sp, #4
   11288:	4639      	mov	r1, r7
   1128a:	4628      	mov	r0, r5
   1128c:	f7ff fef2 	bl	11074 <os_mbuf_off>
   11290:	4605      	mov	r5, r0
   11292:	e03a      	b.n	1130a <os_mbuf_cmpm+0xa6>
        if (bytes_remaining == 0) {
            return 0;
        }

        while (cur1 != NULL && om1_off >= cur1->om_len) {
            cur1 = SLIST_NEXT(cur1, om_next);
   11294:	68e4      	ldr	r4, [r4, #12]
            om1_off = 0;
   11296:	2300      	movs	r3, #0
   11298:	f8ad 3006 	strh.w	r3, [sp, #6]
        while (cur1 != NULL && om1_off >= cur1->om_len) {
   1129c:	b14c      	cbz	r4, 112b2 <os_mbuf_cmpm+0x4e>
   1129e:	88e2      	ldrh	r2, [r4, #6]
   112a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   112a4:	429a      	cmp	r2, r3
   112a6:	d9f5      	bls.n	11294 <os_mbuf_cmpm+0x30>
   112a8:	e003      	b.n	112b2 <os_mbuf_cmpm+0x4e>
        }
        while (cur2 != NULL && om2_off >= cur2->om_len) {
            cur2 = SLIST_NEXT(cur2, om_next);
   112aa:	68ed      	ldr	r5, [r5, #12]
            om2_off = 0;
   112ac:	2300      	movs	r3, #0
   112ae:	f8ad 3004 	strh.w	r3, [sp, #4]
        while (cur2 != NULL && om2_off >= cur2->om_len) {
   112b2:	b125      	cbz	r5, 112be <os_mbuf_cmpm+0x5a>
   112b4:	88ea      	ldrh	r2, [r5, #6]
   112b6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   112ba:	429a      	cmp	r2, r3
   112bc:	d9f5      	bls.n	112aa <os_mbuf_cmpm+0x46>
        }

        if (cur1 == NULL || cur2 == NULL) {
   112be:	b35c      	cbz	r4, 11318 <os_mbuf_cmpm+0xb4>
   112c0:	b36d      	cbz	r5, 1131e <os_mbuf_cmpm+0xba>
            return INT_MAX;
        }

        om1_left = cur1->om_len - om1_off;
   112c2:	88e3      	ldrh	r3, [r4, #6]
   112c4:	f8bd 9006 	ldrh.w	r9, [sp, #6]
   112c8:	eba3 0309 	sub.w	r3, r3, r9
   112cc:	b29a      	uxth	r2, r3
        om2_left = cur2->om_len - om2_off;
   112ce:	88eb      	ldrh	r3, [r5, #6]
   112d0:	f8bd 8004 	ldrh.w	r8, [sp, #4]
   112d4:	eba3 0308 	sub.w	r3, r3, r8
   112d8:	b29b      	uxth	r3, r3
        chunk_sz = min(min(om1_left, om2_left), bytes_remaining);
   112da:	4637      	mov	r7, r6
   112dc:	429a      	cmp	r2, r3
   112de:	d200      	bcs.n	112e2 <os_mbuf_cmpm+0x7e>
   112e0:	4613      	mov	r3, r2
   112e2:	429f      	cmp	r7, r3
   112e4:	bfa8      	it	ge
   112e6:	461f      	movge	r7, r3

        rc = memcmp(cur1->om_data + om1_off, cur2->om_data + om2_off,
   112e8:	6820      	ldr	r0, [r4, #0]
   112ea:	6829      	ldr	r1, [r5, #0]
   112ec:	463a      	mov	r2, r7
   112ee:	4441      	add	r1, r8
   112f0:	4448      	add	r0, r9
   112f2:	f001 f8c3 	bl	1247c <memcmp>
                    chunk_sz);
        if (rc != 0) {
   112f6:	4603      	mov	r3, r0
   112f8:	b950      	cbnz	r0, 11310 <os_mbuf_cmpm+0xac>
            return rc;
        }

        om1_off += chunk_sz;
   112fa:	44b9      	add	r9, r7
   112fc:	f8ad 9006 	strh.w	r9, [sp, #6]
        om2_off += chunk_sz;
   11300:	44b8      	add	r8, r7
   11302:	f8ad 8004 	strh.w	r8, [sp, #4]
        bytes_remaining -= chunk_sz;
   11306:	1bf6      	subs	r6, r6, r7
   11308:	b2b6      	uxth	r6, r6
        if (bytes_remaining == 0) {
   1130a:	2e00      	cmp	r6, #0
   1130c:	d1c6      	bne.n	1129c <os_mbuf_cmpm+0x38>
            return 0;
   1130e:	2300      	movs	r3, #0
    }
}
   11310:	4618      	mov	r0, r3
   11312:	b003      	add	sp, #12
   11314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return INT_MAX;
   11318:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1131c:	e7f8      	b.n	11310 <os_mbuf_cmpm+0xac>
   1131e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   11322:	e7f5      	b.n	11310 <os_mbuf_cmpm+0xac>

00011324 <os_mbuf_prepend>:

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
   11324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11326:	4604      	mov	r4, r0
   11328:	460e      	mov	r6, r1
   1132a:	e019      	b.n	11360 <os_mbuf_prepend+0x3c>
   1132c:	2000      	movs	r0, #0
   1132e:	e01b      	b.n	11368 <os_mbuf_prepend+0x44>
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
   11330:	2100      	movs	r1, #0
   11332:	68a0      	ldr	r0, [r4, #8]
   11334:	f7ff fd94 	bl	10e60 <os_mbuf_get>
   11338:	4605      	mov	r5, r0
        }
        if (p == NULL) {
   1133a:	2d00      	cmp	r5, #0
   1133c:	d033      	beq.n	113a6 <os_mbuf_prepend+0x82>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
   1133e:	7963      	ldrb	r3, [r4, #5]
   11340:	2b07      	cmp	r3, #7
   11342:	d836      	bhi.n	113b2 <os_mbuf_prepend+0x8e>
    omp = om->om_omp;
   11344:	68aa      	ldr	r2, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   11346:	f105 0310 	add.w	r3, r5, #16
   1134a:	8812      	ldrh	r2, [r2, #0]
   1134c:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   1134e:	6829      	ldr	r1, [r5, #0]
   11350:	88ea      	ldrh	r2, [r5, #6]
   11352:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   11354:	1a9b      	subs	r3, r3, r2
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
   11356:	fa11 f383 	uxtah	r3, r1, r3
   1135a:	602b      	str	r3, [r5, #0]

        SLIST_NEXT(p, om_next) = om;
   1135c:	60ec      	str	r4, [r5, #12]
        om = p;
   1135e:	462c      	mov	r4, r5
    if (OS_MBUF_IS_PKTHDR(om)) {
   11360:	7961      	ldrb	r1, [r4, #5]
   11362:	2907      	cmp	r1, #7
   11364:	d9e2      	bls.n	1132c <os_mbuf_prepend+0x8>
        startoff = om->om_pkthdr_len;
   11366:	b288      	uxth	r0, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   11368:	4623      	mov	r3, r4
   1136a:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1136e:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   11370:	1ad3      	subs	r3, r2, r3
   11372:	b29b      	uxth	r3, r3
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
   11374:	429e      	cmp	r6, r3
   11376:	da00      	bge.n	1137a <os_mbuf_prepend+0x56>
   11378:	4633      	mov	r3, r6
        om->om_data -= leading;
   1137a:	1ad2      	subs	r2, r2, r3
   1137c:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
   1137e:	b298      	uxth	r0, r3
   11380:	88e2      	ldrh	r2, [r4, #6]
   11382:	4402      	add	r2, r0
   11384:	80e2      	strh	r2, [r4, #6]
        if (OS_MBUF_IS_PKTHDR(om)) {
   11386:	2907      	cmp	r1, #7
   11388:	d902      	bls.n	11390 <os_mbuf_prepend+0x6c>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
   1138a:	8a22      	ldrh	r2, [r4, #16]
   1138c:	4410      	add	r0, r2
   1138e:	8220      	strh	r0, [r4, #16]
        if (len == 0) {
   11390:	1af6      	subs	r6, r6, r3
   11392:	d00c      	beq.n	113ae <os_mbuf_prepend+0x8a>
        if (OS_MBUF_IS_PKTHDR(om)) {
   11394:	2907      	cmp	r1, #7
   11396:	d9cb      	bls.n	11330 <os_mbuf_prepend+0xc>
            p = os_mbuf_get_pkthdr(om->om_omp,
   11398:	3908      	subs	r1, #8
   1139a:	b2c9      	uxtb	r1, r1
   1139c:	68a0      	ldr	r0, [r4, #8]
   1139e:	f7ff fd78 	bl	10e92 <os_mbuf_get_pkthdr>
   113a2:	4605      	mov	r5, r0
   113a4:	e7c9      	b.n	1133a <os_mbuf_prepend+0x16>
            os_mbuf_free_chain(om);
   113a6:	4620      	mov	r0, r4
   113a8:	f7ff fd98 	bl	10edc <os_mbuf_free_chain>
            om = NULL;
   113ac:	462c      	mov	r4, r5
    }

    return om;
}
   113ae:	4620      	mov	r0, r4
   113b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(new_buf->om_len == 0);
   113b2:	88eb      	ldrh	r3, [r5, #6]
   113b4:	b97b      	cbnz	r3, 113d6 <os_mbuf_prepend+0xb2>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   113b6:	f105 0710 	add.w	r7, r5, #16
   113ba:	7962      	ldrb	r2, [r4, #5]
   113bc:	f104 0110 	add.w	r1, r4, #16
   113c0:	4638      	mov	r0, r7
   113c2:	f001 f87f 	bl	124c4 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   113c6:	7963      	ldrb	r3, [r4, #5]
   113c8:	716b      	strb	r3, [r5, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   113ca:	7963      	ldrb	r3, [r4, #5]
   113cc:	441f      	add	r7, r3
   113ce:	602f      	str	r7, [r5, #0]
            om->om_pkthdr_len = 0;
   113d0:	2300      	movs	r3, #0
   113d2:	7163      	strb	r3, [r4, #5]
   113d4:	e7b6      	b.n	11344 <os_mbuf_prepend+0x20>
    assert(new_buf->om_len == 0);
   113d6:	2300      	movs	r3, #0
   113d8:	461a      	mov	r2, r3
   113da:	4619      	mov	r1, r3
   113dc:	4618      	mov	r0, r3
   113de:	f7ff f8fd 	bl	105dc <__assert_func>

000113e2 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
   113e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   113e6:	b083      	sub	sp, #12
   113e8:	4681      	mov	r9, r0
   113ea:	4688      	mov	r8, r1
   113ec:	4617      	mov	r7, r2
   113ee:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
   113f0:	f10d 0206 	add.w	r2, sp, #6
   113f4:	f7ff fe3e 	bl	11074 <os_mbuf_off>
    if (cur == NULL) {
   113f8:	4605      	mov	r5, r0
   113fa:	b948      	cbnz	r0, 11410 <os_mbuf_copyinto+0x2e>
        return -1;
   113fc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   11400:	e02d      	b.n	1145e <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
   11402:	b366      	cbz	r6, 1145e <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
   11404:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
   11406:	b1ab      	cbz	r3, 11434 <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
   11408:	2200      	movs	r2, #0
   1140a:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
   1140e:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
   11410:	88ec      	ldrh	r4, [r5, #6]
   11412:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11416:	1ae4      	subs	r4, r4, r3
   11418:	42b4      	cmp	r4, r6
   1141a:	bfa8      	it	ge
   1141c:	4634      	movge	r4, r6
        if (copylen > 0) {
   1141e:	2c00      	cmp	r4, #0
   11420:	ddef      	ble.n	11402 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
   11422:	6828      	ldr	r0, [r5, #0]
   11424:	4622      	mov	r2, r4
   11426:	4639      	mov	r1, r7
   11428:	4418      	add	r0, r3
   1142a:	f001 f84b 	bl	124c4 <memcpy>
            sptr += copylen;
   1142e:	4427      	add	r7, r4
            len -= copylen;
   11430:	1b36      	subs	r6, r6, r4
   11432:	e7e6      	b.n	11402 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
   11434:	b2b2      	uxth	r2, r6
   11436:	4639      	mov	r1, r7
   11438:	4628      	mov	r0, r5
   1143a:	f7ff fd6b 	bl	10f14 <os_mbuf_append>
    if (rc != 0) {
   1143e:	b968      	cbnz	r0, 1145c <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
   11440:	f899 2005 	ldrb.w	r2, [r9, #5]
   11444:	2a07      	cmp	r2, #7
   11446:	d90e      	bls.n	11466 <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
   11448:	4446      	add	r6, r8
   1144a:	f8b9 8010 	ldrh.w	r8, [r9, #16]
   1144e:	4546      	cmp	r6, r8
   11450:	bfb8      	it	lt
   11452:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
   11454:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
   11458:	4606      	mov	r6, r0
   1145a:	e000      	b.n	1145e <os_mbuf_copyinto+0x7c>
        return rc;
   1145c:	4606      	mov	r6, r0
}
   1145e:	4630      	mov	r0, r6
   11460:	b003      	add	sp, #12
   11462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
   11466:	4606      	mov	r6, r0
   11468:	e7f9      	b.n	1145e <os_mbuf_copyinto+0x7c>

0001146a <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
   1146a:	4602      	mov	r2, r0
   1146c:	e000      	b.n	11470 <os_mbuf_concat+0x6>
        next = SLIST_NEXT(cur, om_next);
        if (next == NULL) {
            break;
        }

        cur = next;
   1146e:	461a      	mov	r2, r3
        next = SLIST_NEXT(cur, om_next);
   11470:	68d3      	ldr	r3, [r2, #12]
        if (next == NULL) {
   11472:	2b00      	cmp	r3, #0
   11474:	d1fb      	bne.n	1146e <os_mbuf_concat+0x4>
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
   11476:	60d1      	str	r1, [r2, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
   11478:	7943      	ldrb	r3, [r0, #5]
   1147a:	2b07      	cmp	r3, #7
   1147c:	d915      	bls.n	114aa <os_mbuf_concat+0x40>
        if (OS_MBUF_IS_PKTHDR(second)) {
   1147e:	794b      	ldrb	r3, [r1, #5]
   11480:	2b07      	cmp	r3, #7
   11482:	d80e      	bhi.n	114a2 <os_mbuf_concat+0x38>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
        } else {
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
   11484:	460b      	mov	r3, r1
   11486:	b181      	cbz	r1, 114aa <os_mbuf_concat+0x40>
{
   11488:	b410      	push	{r4}
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
   1148a:	88da      	ldrh	r2, [r3, #6]
   1148c:	8a04      	ldrh	r4, [r0, #16]
   1148e:	4422      	add	r2, r4
   11490:	8202      	strh	r2, [r0, #16]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
   11492:	68db      	ldr	r3, [r3, #12]
   11494:	2b00      	cmp	r3, #0
   11496:	d1f8      	bne.n	1148a <os_mbuf_concat+0x20>
            }
        }
    }

    second->om_pkthdr_len = 0;
   11498:	2300      	movs	r3, #0
   1149a:	714b      	strb	r3, [r1, #5]
}
   1149c:	f85d 4b04 	ldr.w	r4, [sp], #4
   114a0:	4770      	bx	lr
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
   114a2:	8a0b      	ldrh	r3, [r1, #16]
   114a4:	8a02      	ldrh	r2, [r0, #16]
   114a6:	4413      	add	r3, r2
   114a8:	8203      	strh	r3, [r0, #16]
    second->om_pkthdr_len = 0;
   114aa:	2300      	movs	r3, #0
   114ac:	714b      	strb	r3, [r1, #5]
   114ae:	4770      	bx	lr

000114b0 <os_mbuf_extend>:

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
   114b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
   114b2:	6887      	ldr	r7, [r0, #8]
   114b4:	883b      	ldrh	r3, [r7, #0]
   114b6:	428b      	cmp	r3, r1
   114b8:	d327      	bcc.n	1150a <os_mbuf_extend+0x5a>
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
   114ba:	4604      	mov	r4, r0
   114bc:	e000      	b.n	114c0 <os_mbuf_extend+0x10>
    while (SLIST_NEXT(last, om_next) != NULL) {
        last = SLIST_NEXT(last, om_next);
   114be:	461c      	mov	r4, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   114c0:	68e3      	ldr	r3, [r4, #12]
   114c2:	2b00      	cmp	r3, #0
   114c4:	d1fb      	bne.n	114be <os_mbuf_extend+0xe>
   114c6:	460d      	mov	r5, r1
   114c8:	4606      	mov	r6, r0
    omp = om->om_omp;
   114ca:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   114cc:	f104 0310 	add.w	r3, r4, #16
   114d0:	8812      	ldrh	r2, [r2, #0]
   114d2:	4413      	add	r3, r2
      (om->om_data + om->om_len);
   114d4:	6822      	ldr	r2, [r4, #0]
   114d6:	88e1      	ldrh	r1, [r4, #6]
   114d8:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   114da:	1a9b      	subs	r3, r3, r2
   114dc:	b29b      	uxth	r3, r3
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
   114de:	429d      	cmp	r5, r3
   114e0:	d80b      	bhi.n	114fa <os_mbuf_extend+0x4a>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
   114e2:	6820      	ldr	r0, [r4, #0]
   114e4:	88e3      	ldrh	r3, [r4, #6]
   114e6:	4418      	add	r0, r3
    last->om_len += len;
   114e8:	442b      	add	r3, r5
   114ea:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
   114ec:	7973      	ldrb	r3, [r6, #5]
   114ee:	2b07      	cmp	r3, #7
   114f0:	d902      	bls.n	114f8 <os_mbuf_extend+0x48>
        OS_MBUF_PKTHDR(om)->omp_len += len;
   114f2:	8a31      	ldrh	r1, [r6, #16]
   114f4:	440d      	add	r5, r1
   114f6:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
   114f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        newm = os_mbuf_get(om->om_omp, 0);
   114fa:	2100      	movs	r1, #0
   114fc:	4638      	mov	r0, r7
   114fe:	f7ff fcaf 	bl	10e60 <os_mbuf_get>
        if (newm == NULL) {
   11502:	b120      	cbz	r0, 1150e <os_mbuf_extend+0x5e>
        SLIST_NEXT(last, om_next) = newm;
   11504:	60e0      	str	r0, [r4, #12]
        last = newm;
   11506:	4604      	mov	r4, r0
   11508:	e7eb      	b.n	114e2 <os_mbuf_extend+0x32>
        return NULL;
   1150a:	2000      	movs	r0, #0
   1150c:	e7f4      	b.n	114f8 <os_mbuf_extend+0x48>
            return NULL;
   1150e:	2000      	movs	r0, #0
   11510:	e7f2      	b.n	114f8 <os_mbuf_extend+0x48>

00011512 <os_mbuf_pullup>:


struct os_mbuf *
os_mbuf_pullup(struct os_mbuf *om, uint16_t len)
{
   11512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11516:	4604      	mov	r4, r0
    struct os_mbuf *next;
    struct os_mbuf *om2;
    int count;
    int space;

    omp = om->om_omp;
   11518:	6880      	ldr	r0, [r0, #8]
    /*
     * If first mbuf has no cluster, and has room for len bytes
     * without shifting current data, pullup into it,
     * otherwise allocate a new mbuf to prepend to the chain.
     */
    if (om->om_len >= len) {
   1151a:	88e2      	ldrh	r2, [r4, #6]
   1151c:	428a      	cmp	r2, r1
   1151e:	d275      	bcs.n	1160c <os_mbuf_pullup+0xfa>
   11520:	460d      	mov	r5, r1
   11522:	f104 0310 	add.w	r3, r4, #16
   11526:	8806      	ldrh	r6, [r0, #0]
   11528:	4433      	add	r3, r6
      (om->om_data + om->om_len);
   1152a:	6821      	ldr	r1, [r4, #0]
   1152c:	4411      	add	r1, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1152e:	1a5b      	subs	r3, r3, r1
        return (om);
    }
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
   11530:	fa12 f383 	uxtah	r3, r2, r3
   11534:	4629      	mov	r1, r5
   11536:	42ab      	cmp	r3, r5
   11538:	db12      	blt.n	11560 <os_mbuf_pullup+0x4e>
        SLIST_NEXT(om, om_next)) {
   1153a:	68e3      	ldr	r3, [r4, #12]
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
   1153c:	b183      	cbz	r3, 11560 <os_mbuf_pullup+0x4e>
        om2 = om;
        om = SLIST_NEXT(om, om_next);
        len -= om2->om_len;
   1153e:	1aad      	subs	r5, r5, r2
   11540:	b2ad      	uxth	r5, r5
        om2 = om;
   11542:	4627      	mov	r7, r4
        om = SLIST_NEXT(om, om_next);
   11544:	461c      	mov	r4, r3
    omp = om->om_omp;
   11546:	68bb      	ldr	r3, [r7, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   11548:	f107 0810 	add.w	r8, r7, #16
   1154c:	881b      	ldrh	r3, [r3, #0]
   1154e:	4498      	add	r8, r3
      (om->om_data + om->om_len);
   11550:	683b      	ldr	r3, [r7, #0]
   11552:	88fa      	ldrh	r2, [r7, #6]
   11554:	4413      	add	r3, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   11556:	eba8 0803 	sub.w	r8, r8, r3
   1155a:	fa1f f888 	uxth.w	r8, r8
   1155e:	e029      	b.n	115b4 <os_mbuf_pullup+0xa2>
    } else {
        if (len > omp->omp_databuf_len - om->om_pkthdr_len) {
   11560:	7963      	ldrb	r3, [r4, #5]
   11562:	1af6      	subs	r6, r6, r3
   11564:	42b1      	cmp	r1, r6
   11566:	dc4c      	bgt.n	11602 <os_mbuf_pullup+0xf0>
            goto bad;
        }

        om2 = os_mbuf_get(omp, 0);
   11568:	2100      	movs	r1, #0
   1156a:	f7ff fc79 	bl	10e60 <os_mbuf_get>
        if (om2 == NULL) {
   1156e:	4607      	mov	r7, r0
   11570:	2800      	cmp	r0, #0
   11572:	d046      	beq.n	11602 <os_mbuf_pullup+0xf0>
            goto bad;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
   11574:	7963      	ldrb	r3, [r4, #5]
   11576:	2b07      	cmp	r3, #7
   11578:	d9e5      	bls.n	11546 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
   1157a:	88c3      	ldrh	r3, [r0, #6]
   1157c:	b96b      	cbnz	r3, 1159a <os_mbuf_pullup+0x88>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1157e:	f100 0610 	add.w	r6, r0, #16
   11582:	7962      	ldrb	r2, [r4, #5]
   11584:	f104 0110 	add.w	r1, r4, #16
   11588:	4630      	mov	r0, r6
   1158a:	f000 ff9b 	bl	124c4 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1158e:	7963      	ldrb	r3, [r4, #5]
   11590:	717b      	strb	r3, [r7, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   11592:	7963      	ldrb	r3, [r4, #5]
   11594:	441e      	add	r6, r3
   11596:	603e      	str	r6, [r7, #0]
   11598:	e7d5      	b.n	11546 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
   1159a:	2300      	movs	r3, #0
   1159c:	461a      	mov	r2, r3
   1159e:	4619      	mov	r1, r3
   115a0:	4618      	mov	r0, r3
   115a2:	f7ff f81b 	bl	105dc <__assert_func>
        om->om_len -= count;
        space -= count;
        if (om->om_len) {
            om->om_data += count;
        } else {
            next = SLIST_NEXT(om, om_next);
   115a6:	68e6      	ldr	r6, [r4, #12]
            os_mbuf_free(om);
   115a8:	4620      	mov	r0, r4
   115aa:	f7ff fc8d 	bl	10ec8 <os_mbuf_free>
            om = next;
   115ae:	4634      	mov	r4, r6
        }
    } while (len > 0 && om);
   115b0:	b30d      	cbz	r5, 115f6 <os_mbuf_pullup+0xe4>
   115b2:	b304      	cbz	r4, 115f6 <os_mbuf_pullup+0xe4>
        count = min(min(len, space), om->om_len);
   115b4:	88e6      	ldrh	r6, [r4, #6]
   115b6:	462b      	mov	r3, r5
   115b8:	4545      	cmp	r5, r8
   115ba:	bfa8      	it	ge
   115bc:	4643      	movge	r3, r8
   115be:	429e      	cmp	r6, r3
   115c0:	bfa8      	it	ge
   115c2:	461e      	movge	r6, r3
        memcpy(om2->om_data + om2->om_len, om->om_data, count);
   115c4:	6838      	ldr	r0, [r7, #0]
   115c6:	88fb      	ldrh	r3, [r7, #6]
   115c8:	4632      	mov	r2, r6
   115ca:	6821      	ldr	r1, [r4, #0]
   115cc:	4418      	add	r0, r3
   115ce:	f000 ff79 	bl	124c4 <memcpy>
        len -= count;
   115d2:	b2b2      	uxth	r2, r6
   115d4:	1aad      	subs	r5, r5, r2
   115d6:	b2ad      	uxth	r5, r5
        om2->om_len += count;
   115d8:	88fb      	ldrh	r3, [r7, #6]
   115da:	4413      	add	r3, r2
   115dc:	80fb      	strh	r3, [r7, #6]
        om->om_len -= count;
   115de:	88e3      	ldrh	r3, [r4, #6]
   115e0:	1a9b      	subs	r3, r3, r2
   115e2:	b29b      	uxth	r3, r3
   115e4:	80e3      	strh	r3, [r4, #6]
        space -= count;
   115e6:	eba8 0806 	sub.w	r8, r8, r6
        if (om->om_len) {
   115ea:	2b00      	cmp	r3, #0
   115ec:	d0db      	beq.n	115a6 <os_mbuf_pullup+0x94>
            om->om_data += count;
   115ee:	6823      	ldr	r3, [r4, #0]
   115f0:	441e      	add	r6, r3
   115f2:	6026      	str	r6, [r4, #0]
   115f4:	e7dc      	b.n	115b0 <os_mbuf_pullup+0x9e>
    if (len > 0) {
   115f6:	b90d      	cbnz	r5, 115fc <os_mbuf_pullup+0xea>
        os_mbuf_free(om2);
        goto bad;
    }
    SLIST_NEXT(om2, om_next) = om;
   115f8:	60fc      	str	r4, [r7, #12]
    return (om2);
   115fa:	e008      	b.n	1160e <os_mbuf_pullup+0xfc>
        os_mbuf_free(om2);
   115fc:	4638      	mov	r0, r7
   115fe:	f7ff fc63 	bl	10ec8 <os_mbuf_free>
bad:
    os_mbuf_free_chain(om);
   11602:	4620      	mov	r0, r4
   11604:	f7ff fc6a 	bl	10edc <os_mbuf_free_chain>
    return (NULL);
   11608:	2700      	movs	r7, #0
   1160a:	e000      	b.n	1160e <os_mbuf_pullup+0xfc>
        return (om);
   1160c:	4627      	mov	r7, r4
}
   1160e:	4638      	mov	r0, r7
   11610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011614 <os_mbuf_prepend_pullup>:
{
   11614:	b510      	push	{r4, lr}
   11616:	460c      	mov	r4, r1
    om = os_mbuf_prepend(om, len);
   11618:	f7ff fe84 	bl	11324 <os_mbuf_prepend>
    if (om == NULL) {
   1161c:	4603      	mov	r3, r0
   1161e:	b118      	cbz	r0, 11628 <os_mbuf_prepend_pullup+0x14>
    om = os_mbuf_pullup(om, len);
   11620:	4621      	mov	r1, r4
   11622:	f7ff ff76 	bl	11512 <os_mbuf_pullup>
   11626:	4603      	mov	r3, r0
}
   11628:	4618      	mov	r0, r3
   1162a:	bd10      	pop	{r4, pc}

0001162c <os_mbuf_trim_front>:

struct os_mbuf *
os_mbuf_trim_front(struct os_mbuf *om)
{
   1162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1162e:	4606      	mov	r6, r0
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
   11630:	88c7      	ldrh	r7, [r0, #6]
   11632:	b9d7      	cbnz	r7, 1166a <os_mbuf_trim_front+0x3e>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
   11634:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
   11636:	e005      	b.n	11644 <os_mbuf_trim_front+0x18>
        next = SLIST_NEXT(cur, om_next);
   11638:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
   1163a:	60f5      	str	r5, [r6, #12]
        os_mbuf_free(cur);
   1163c:	4620      	mov	r0, r4
   1163e:	f7ff fc43 	bl	10ec8 <os_mbuf_free>

        cur = next;
   11642:	462c      	mov	r4, r5
    while (cur != NULL && cur->om_len == 0) {
   11644:	b114      	cbz	r4, 1164c <os_mbuf_trim_front+0x20>
   11646:	88e3      	ldrh	r3, [r4, #6]
   11648:	2b00      	cmp	r3, #0
   1164a:	d0f5      	beq.n	11638 <os_mbuf_trim_front+0xc>
    }

    if (cur == NULL) {
   1164c:	b16c      	cbz	r4, 1166a <os_mbuf_trim_front+0x3e>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1164e:	7963      	ldrb	r3, [r4, #5]
   11650:	2b07      	cmp	r3, #7
   11652:	d900      	bls.n	11656 <os_mbuf_trim_front+0x2a>
        startoff = om->om_pkthdr_len;
   11654:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   11656:	4620      	mov	r0, r4
   11658:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1165c:	4407      	add	r7, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1165e:	1bdf      	subs	r7, r3, r7
   11660:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (OS_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
   11662:	7973      	ldrb	r3, [r6, #5]
   11664:	b29a      	uxth	r2, r3
   11666:	42ba      	cmp	r2, r7
   11668:	d901      	bls.n	1166e <os_mbuf_trim_front+0x42>
        os_mbuf_free(om);
        om = cur;
    }

    return om;
}
   1166a:	4630      	mov	r0, r6
   1166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
   1166e:	7163      	strb	r3, [r4, #5]
        memcpy(OS_MBUF_PKTHDR(cur), OS_MBUF_PKTHDR(om), om->om_pkthdr_len);
   11670:	7972      	ldrb	r2, [r6, #5]
   11672:	f106 0110 	add.w	r1, r6, #16
   11676:	f000 ff25 	bl	124c4 <memcpy>
        os_mbuf_free(om);
   1167a:	4630      	mov	r0, r6
   1167c:	f7ff fc24 	bl	10ec8 <os_mbuf_free>
        om = cur;
   11680:	4626      	mov	r6, r4
   11682:	e7f2      	b.n	1166a <os_mbuf_trim_front+0x3e>

00011684 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   11684:	2800      	cmp	r0, #0
   11686:	d031      	beq.n	116ec <os_mempool_init_internal+0x68>
{
   11688:	b430      	push	{r4, r5}
   1168a:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1168c:	2a00      	cmp	r2, #0
   1168e:	d02f      	beq.n	116f0 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   11690:	b1bb      	cbz	r3, 116c2 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   11692:	b113      	cbz	r3, 1169a <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   11694:	f013 0f03 	tst.w	r3, #3
   11698:	d12c      	bne.n	116f4 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1169a:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1169c:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1169e:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   116a0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   116a4:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   116a6:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   116a8:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   116aa:	9802      	ldr	r0, [sp, #8]
   116ac:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   116ae:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   116b0:	b199      	cbz	r1, 116da <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   116b2:	f012 0f03 	tst.w	r2, #3
   116b6:	d002      	beq.n	116be <os_mempool_init_internal+0x3a>
   116b8:	f022 0203 	bic.w	r2, r2, #3
   116bc:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   116be:	2001      	movs	r0, #1
   116c0:	e007      	b.n	116d2 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   116c2:	2900      	cmp	r1, #0
   116c4:	d0e5      	beq.n	11692 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   116c6:	2003      	movs	r0, #3
   116c8:	e00e      	b.n	116e8 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   116ca:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   116cc:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   116ce:	3001      	adds	r0, #1
            block_addr += true_block_size;
   116d0:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   116d2:	4281      	cmp	r1, r0
   116d4:	dcf9      	bgt.n	116ca <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   116d6:	2200      	movs	r2, #0
   116d8:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   116da:	2000      	movs	r0, #0
   116dc:	6120      	str	r0, [r4, #16]
   116de:	4b06      	ldr	r3, [pc, #24]	; (116f8 <os_mempool_init_internal+0x74>)
   116e0:	685a      	ldr	r2, [r3, #4]
   116e2:	6014      	str	r4, [r2, #0]
   116e4:	3410      	adds	r4, #16
   116e6:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   116e8:	bc30      	pop	{r4, r5}
   116ea:	4770      	bx	lr
        return OS_INVALID_PARM;
   116ec:	2003      	movs	r0, #3
}
   116ee:	4770      	bx	lr
        return OS_INVALID_PARM;
   116f0:	2003      	movs	r0, #3
   116f2:	e7f9      	b.n	116e8 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   116f4:	2004      	movs	r0, #4
   116f6:	e7f7      	b.n	116e8 <os_mempool_init_internal+0x64>
   116f8:	20003d18 	.word	0x20003d18

000116fc <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   116fc:	b510      	push	{r4, lr}
   116fe:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   11700:	2400      	movs	r4, #0
   11702:	9401      	str	r4, [sp, #4]
   11704:	9c04      	ldr	r4, [sp, #16]
   11706:	9400      	str	r4, [sp, #0]
   11708:	f7ff ffbc 	bl	11684 <os_mempool_init_internal>
}
   1170c:	b002      	add	sp, #8
   1170e:	bd10      	pop	{r4, pc}

00011710 <os_mempool_clear>:
    struct os_memblock *block_ptr;
    int true_block_size;
    uint8_t *block_addr;
    uint16_t blocks;

    if (!mp) {
   11710:	4601      	mov	r1, r0
   11712:	b1b0      	cbz	r0, 11742 <os_mempool_clear+0x32>
        return OS_INVALID_PARM;
    }

    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   11714:	6800      	ldr	r0, [r0, #0]
   11716:	f010 0f03 	tst.w	r0, #3
   1171a:	d002      	beq.n	11722 <os_mempool_clear+0x12>
   1171c:	f020 0003 	bic.w	r0, r0, #3
   11720:	3004      	adds	r0, #4

    /* cleanup the memory pool structure */
    mp->mp_num_free = mp->mp_num_blocks;
   11722:	888b      	ldrh	r3, [r1, #4]
   11724:	80cb      	strh	r3, [r1, #6]
    mp->mp_min_free = mp->mp_num_blocks;
   11726:	810b      	strh	r3, [r1, #8]
    os_mempool_poison(mp, (void *)mp->mp_membuf_addr);
    os_mempool_guard(mp, (void *)mp->mp_membuf_addr);
    SLIST_FIRST(mp) = (void *)mp->mp_membuf_addr;
   11728:	68ca      	ldr	r2, [r1, #12]
   1172a:	614a      	str	r2, [r1, #20]
    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)mp->mp_membuf_addr;
    block_ptr = (struct os_memblock *)block_addr;
    blocks = mp->mp_num_blocks;

    while (blocks > 1) {
   1172c:	e004      	b.n	11738 <os_mempool_clear+0x28>
        block_addr += true_block_size;
   1172e:	1811      	adds	r1, r2, r0
        os_mempool_poison(mp, block_addr);
        os_mempool_guard(mp, block_addr);
        SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   11730:	6011      	str	r1, [r2, #0]
        block_ptr = (struct os_memblock *)block_addr;
        --blocks;
   11732:	3b01      	subs	r3, #1
   11734:	b29b      	uxth	r3, r3
        block_ptr = (struct os_memblock *)block_addr;
   11736:	460a      	mov	r2, r1
    while (blocks > 1) {
   11738:	2b01      	cmp	r3, #1
   1173a:	d8f8      	bhi.n	1172e <os_mempool_clear+0x1e>
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
   1173c:	2000      	movs	r0, #0
   1173e:	6010      	str	r0, [r2, #0]

    return OS_OK;
   11740:	4770      	bx	lr
        return OS_INVALID_PARM;
   11742:	2003      	movs	r0, #3
}
   11744:	4770      	bx	lr

00011746 <os_memblock_from>:
    return true;
}

int
os_memblock_from(const struct os_mempool *mp, const void *block_addr)
{
   11746:	b410      	push	{r4}

    static_assert(sizeof block_addr == sizeof baddr32,
                  "Pointer to void must be 32-bits.");

    baddr32 = (uint32_t)block_addr;
    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   11748:	6803      	ldr	r3, [r0, #0]
   1174a:	f013 0f03 	tst.w	r3, #3
   1174e:	d002      	beq.n	11756 <os_memblock_from+0x10>
   11750:	f023 0303 	bic.w	r3, r3, #3
   11754:	3304      	adds	r3, #4
    end = mp->mp_membuf_addr + (mp->mp_num_blocks * true_block_size);
   11756:	68c4      	ldr	r4, [r0, #12]
   11758:	8882      	ldrh	r2, [r0, #4]
   1175a:	fb03 4202 	mla	r2, r3, r2, r4

    /* Check that the block is in the memory buffer range. */
    if ((baddr32 < mp->mp_membuf_addr) || (baddr32 >= end)) {
   1175e:	428c      	cmp	r4, r1
   11760:	d80b      	bhi.n	1177a <os_memblock_from+0x34>
   11762:	4291      	cmp	r1, r2
   11764:	d20d      	bcs.n	11782 <os_memblock_from+0x3c>
        return 0;
    }

    /* All freed blocks should be on true block size boundaries! */
    if (((baddr32 - mp->mp_membuf_addr) % true_block_size) != 0) {
   11766:	1b09      	subs	r1, r1, r4
   11768:	fbb1 f2f3 	udiv	r2, r1, r3
   1176c:	fb03 1112 	mls	r1, r3, r2, r1
   11770:	b909      	cbnz	r1, 11776 <os_memblock_from+0x30>
        return 0;
    }

    return 1;
   11772:	2001      	movs	r0, #1
   11774:	e002      	b.n	1177c <os_memblock_from+0x36>
        return 0;
   11776:	2000      	movs	r0, #0
   11778:	e000      	b.n	1177c <os_memblock_from+0x36>
        return 0;
   1177a:	2000      	movs	r0, #0
}
   1177c:	f85d 4b04 	ldr.w	r4, [sp], #4
   11780:	4770      	bx	lr
        return 0;
   11782:	2000      	movs	r0, #0
   11784:	e7fa      	b.n	1177c <os_memblock_from+0x36>

00011786 <os_memblock_get>:

void *
os_memblock_get(struct os_mempool *mp)
{
   11786:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   11788:	b1a0      	cbz	r0, 117b4 <os_memblock_get+0x2e>
   1178a:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1178c:	f7fe fe5c 	bl	10448 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   11790:	88e3      	ldrh	r3, [r4, #6]
   11792:	b153      	cbz	r3, 117aa <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   11794:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   11796:	682a      	ldr	r2, [r5, #0]
   11798:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1179a:	3b01      	subs	r3, #1
   1179c:	b29b      	uxth	r3, r3
   1179e:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   117a0:	8922      	ldrh	r2, [r4, #8]
   117a2:	4293      	cmp	r3, r2
   117a4:	d202      	bcs.n	117ac <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   117a6:	8123      	strh	r3, [r4, #8]
   117a8:	e000      	b.n	117ac <os_memblock_get+0x26>
    block = NULL;
   117aa:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   117ac:	f7fe fe52 	bl	10454 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   117b0:	4628      	mov	r0, r5
   117b2:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   117b4:	2500      	movs	r5, #0
    return (void *)block;
   117b6:	e7fb      	b.n	117b0 <os_memblock_get+0x2a>

000117b8 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   117b8:	b538      	push	{r3, r4, r5, lr}
   117ba:	4604      	mov	r4, r0
   117bc:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   117be:	f7fe fe43 	bl	10448 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   117c2:	6963      	ldr	r3, [r4, #20]
   117c4:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   117c6:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   117c8:	88e3      	ldrh	r3, [r4, #6]
   117ca:	3301      	adds	r3, #1
   117cc:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   117ce:	f7fe fe41 	bl	10454 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   117d2:	2000      	movs	r0, #0
   117d4:	bd38      	pop	{r3, r4, r5, pc}

000117d6 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   117d6:	b168      	cbz	r0, 117f4 <os_memblock_put+0x1e>
{
   117d8:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   117da:	b169      	cbz	r1, 117f8 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   117dc:	7a83      	ldrb	r3, [r0, #10]
   117de:	f013 0f01 	tst.w	r3, #1
   117e2:	d004      	beq.n	117ee <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   117e4:	69c3      	ldr	r3, [r0, #28]
   117e6:	b113      	cbz	r3, 117ee <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   117e8:	6a02      	ldr	r2, [r0, #32]
   117ea:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   117ec:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   117ee:	f7ff ffe3 	bl	117b8 <os_memblock_put_from_cb>
   117f2:	e7fb      	b.n	117ec <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   117f4:	2003      	movs	r0, #3
}
   117f6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   117f8:	2003      	movs	r0, #3
   117fa:	e7f7      	b.n	117ec <os_memblock_put+0x16>

000117fc <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   117fc:	4b02      	ldr	r3, [pc, #8]	; (11808 <os_mempool_module_init+0xc>)
   117fe:	2200      	movs	r2, #0
   11800:	601a      	str	r2, [r3, #0]
   11802:	605b      	str	r3, [r3, #4]
}
   11804:	4770      	bx	lr
   11806:	bf00      	nop
   11808:	20003d18 	.word	0x20003d18

0001180c <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1180c:	4b02      	ldr	r3, [pc, #8]	; (11818 <os_msys_find_biggest_pool+0xc>)
   1180e:	6818      	ldr	r0, [r3, #0]
   11810:	b108      	cbz	r0, 11816 <os_msys_find_biggest_pool+0xa>
   11812:	6858      	ldr	r0, [r3, #4]
   11814:	3808      	subs	r0, #8
}
   11816:	4770      	bx	lr
   11818:	20000184 	.word	0x20000184

0001181c <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1181c:	4b09      	ldr	r3, [pc, #36]	; (11844 <os_msys_find_pool+0x28>)
   1181e:	6819      	ldr	r1, [r3, #0]
   11820:	460b      	mov	r3, r1
   11822:	b123      	cbz	r3, 1182e <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   11824:	881a      	ldrh	r2, [r3, #0]
   11826:	4282      	cmp	r2, r0
   11828:	d201      	bcs.n	1182e <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1182a:	689b      	ldr	r3, [r3, #8]
   1182c:	e7f9      	b.n	11822 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1182e:	b10b      	cbz	r3, 11834 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   11830:	4618      	mov	r0, r3
   11832:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   11834:	b119      	cbz	r1, 1183e <os_msys_find_pool+0x22>
   11836:	4b03      	ldr	r3, [pc, #12]	; (11844 <os_msys_find_pool+0x28>)
   11838:	685b      	ldr	r3, [r3, #4]
   1183a:	3b08      	subs	r3, #8
   1183c:	e7f8      	b.n	11830 <os_msys_find_pool+0x14>
   1183e:	460b      	mov	r3, r1
    return (pool);
   11840:	e7f6      	b.n	11830 <os_msys_find_pool+0x14>
   11842:	bf00      	nop
   11844:	20000184 	.word	0x20000184

00011848 <os_msys_register>:
{
   11848:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1184a:	4b11      	ldr	r3, [pc, #68]	; (11890 <os_msys_register+0x48>)
   1184c:	681d      	ldr	r5, [r3, #0]
   1184e:	462b      	mov	r3, r5
    prev = NULL;
   11850:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   11852:	b133      	cbz	r3, 11862 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   11854:	8801      	ldrh	r1, [r0, #0]
   11856:	881a      	ldrh	r2, [r3, #0]
   11858:	4291      	cmp	r1, r2
   1185a:	d302      	bcc.n	11862 <os_msys_register+0x1a>
        prev = pool;
   1185c:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1185e:	689b      	ldr	r3, [r3, #8]
   11860:	e7f7      	b.n	11852 <os_msys_register+0xa>
    if (prev) {
   11862:	b15c      	cbz	r4, 1187c <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   11864:	68a3      	ldr	r3, [r4, #8]
   11866:	6083      	str	r3, [r0, #8]
   11868:	b11b      	cbz	r3, 11872 <os_msys_register+0x2a>
   1186a:	60a0      	str	r0, [r4, #8]
}
   1186c:	2000      	movs	r0, #0
   1186e:	bc30      	pop	{r4, r5}
   11870:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   11872:	f100 0308 	add.w	r3, r0, #8
   11876:	4a06      	ldr	r2, [pc, #24]	; (11890 <os_msys_register+0x48>)
   11878:	6053      	str	r3, [r2, #4]
   1187a:	e7f6      	b.n	1186a <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1187c:	6085      	str	r5, [r0, #8]
   1187e:	b115      	cbz	r5, 11886 <os_msys_register+0x3e>
   11880:	4b03      	ldr	r3, [pc, #12]	; (11890 <os_msys_register+0x48>)
   11882:	6018      	str	r0, [r3, #0]
   11884:	e7f2      	b.n	1186c <os_msys_register+0x24>
   11886:	f100 0308 	add.w	r3, r0, #8
   1188a:	4a01      	ldr	r2, [pc, #4]	; (11890 <os_msys_register+0x48>)
   1188c:	6053      	str	r3, [r2, #4]
   1188e:	e7f7      	b.n	11880 <os_msys_register+0x38>
   11890:	20000184 	.word	0x20000184

00011894 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   11894:	b530      	push	{r4, r5, lr}
   11896:	b083      	sub	sp, #12
   11898:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1189a:	9d07      	ldr	r5, [sp, #28]
   1189c:	9501      	str	r5, [sp, #4]
   1189e:	9d06      	ldr	r5, [sp, #24]
   118a0:	9500      	str	r5, [sp, #0]
   118a2:	f00c f80f 	bl	1d8c4 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   118a6:	b138      	cbz	r0, 118b8 <os_msys_init_once+0x24>
   118a8:	2000      	movs	r0, #0
   118aa:	9000      	str	r0, [sp, #0]
   118ac:	4b09      	ldr	r3, [pc, #36]	; (118d4 <os_msys_init_once+0x40>)
   118ae:	681d      	ldr	r5, [r3, #0]
   118b0:	4603      	mov	r3, r0
   118b2:	4602      	mov	r2, r0
   118b4:	4601      	mov	r1, r0
   118b6:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   118b8:	4620      	mov	r0, r4
   118ba:	f7ff ffc5 	bl	11848 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   118be:	b138      	cbz	r0, 118d0 <os_msys_init_once+0x3c>
   118c0:	2000      	movs	r0, #0
   118c2:	9000      	str	r0, [sp, #0]
   118c4:	4b03      	ldr	r3, [pc, #12]	; (118d4 <os_msys_init_once+0x40>)
   118c6:	681c      	ldr	r4, [r3, #0]
   118c8:	4603      	mov	r3, r0
   118ca:	4602      	mov	r2, r0
   118cc:	4601      	mov	r1, r0
   118ce:	47a0      	blx	r4
}
   118d0:	b003      	add	sp, #12
   118d2:	bd30      	pop	{r4, r5, pc}
   118d4:	20000180 	.word	0x20000180

000118d8 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   118d8:	4b02      	ldr	r3, [pc, #8]	; (118e4 <os_msys_reset+0xc>)
   118da:	2200      	movs	r2, #0
   118dc:	601a      	str	r2, [r3, #0]
   118de:	605b      	str	r3, [r3, #4]
}
   118e0:	4770      	bx	lr
   118e2:	bf00      	nop
   118e4:	20000184 	.word	0x20000184

000118e8 <os_msys_get>:
{
   118e8:	b510      	push	{r4, lr}
   118ea:	460c      	mov	r4, r1
    if (dsize == 0) {
   118ec:	b930      	cbnz	r0, 118fc <os_msys_get+0x14>
        pool = os_msys_find_biggest_pool();
   118ee:	f7ff ff8d 	bl	1180c <os_msys_find_biggest_pool>
    if (!pool) {
   118f2:	b130      	cbz	r0, 11902 <os_msys_get+0x1a>
    m = os_mbuf_get(pool, leadingspace);
   118f4:	4621      	mov	r1, r4
   118f6:	f7ff fab3 	bl	10e60 <os_mbuf_get>
}
   118fa:	bd10      	pop	{r4, pc}
        pool = os_msys_find_pool(dsize);
   118fc:	f7ff ff8e 	bl	1181c <os_msys_find_pool>
   11900:	e7f7      	b.n	118f2 <os_msys_get+0xa>
    return (NULL);
   11902:	2000      	movs	r0, #0
   11904:	e7f9      	b.n	118fa <os_msys_get+0x12>

00011906 <os_msys_get_pkthdr>:
{
   11906:	b510      	push	{r4, lr}
   11908:	460c      	mov	r4, r1
    if (dsize == 0) {
   1190a:	b930      	cbnz	r0, 1191a <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1190c:	f7ff ff7e 	bl	1180c <os_msys_find_biggest_pool>
    if (!pool) {
   11910:	b158      	cbz	r0, 1192a <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   11912:	b2e1      	uxtb	r1, r4
   11914:	f7ff fabd 	bl	10e92 <os_mbuf_get_pkthdr>
}
   11918:	bd10      	pop	{r4, pc}
   1191a:	f101 0308 	add.w	r3, r1, #8
   1191e:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   11920:	4403      	add	r3, r0
   11922:	b298      	uxth	r0, r3
   11924:	f7ff ff7a 	bl	1181c <os_msys_find_pool>
   11928:	e7f2      	b.n	11910 <os_msys_get_pkthdr+0xa>
    return (NULL);
   1192a:	2000      	movs	r0, #0
   1192c:	e7f4      	b.n	11918 <os_msys_get_pkthdr+0x12>
	...

00011930 <os_msys_init>:

void
os_msys_init(void)
{
   11930:	b500      	push	{lr}
   11932:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   11934:	f7ff ffd0 	bl	118d8 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   11938:	4b06      	ldr	r3, [pc, #24]	; (11954 <os_msys_init+0x24>)
   1193a:	9301      	str	r3, [sp, #4]
   1193c:	f44f 7392 	mov.w	r3, #292	; 0x124
   11940:	9300      	str	r3, [sp, #0]
   11942:	230c      	movs	r3, #12
   11944:	4a04      	ldr	r2, [pc, #16]	; (11958 <os_msys_init+0x28>)
   11946:	4905      	ldr	r1, [pc, #20]	; (1195c <os_msys_init+0x2c>)
   11948:	4805      	ldr	r0, [pc, #20]	; (11960 <os_msys_init+0x30>)
   1194a:	f7ff ffa3 	bl	11894 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1194e:	b003      	add	sp, #12
   11950:	f85d fb04 	ldr.w	pc, [sp], #4
   11954:	0002c244 	.word	0x0002c244
   11958:	200024f0 	.word	0x200024f0
   1195c:	200024fc 	.word	0x200024fc
   11960:	20001740 	.word	0x20001740

00011964 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   11964:	4603      	mov	r3, r0
   11966:	b128      	cbz	r0, 11974 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   11968:	2000      	movs	r0, #0
   1196a:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1196c:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1196e:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   11970:	6018      	str	r0, [r3, #0]
   11972:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   11974:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   11976:	4770      	bx	lr

00011978 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   11978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1197a:	4b2c      	ldr	r3, [pc, #176]	; (11a2c <os_mutex_release+0xb4>)
   1197c:	681b      	ldr	r3, [r3, #0]
   1197e:	2b00      	cmp	r3, #0
   11980:	d04d      	beq.n	11a1e <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   11982:	2800      	cmp	r0, #0
   11984:	d04d      	beq.n	11a22 <os_mutex_release+0xaa>
   11986:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   11988:	f000 f97a 	bl	11c80 <os_sched_get_current_task>
   1198c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1198e:	88e3      	ldrh	r3, [r4, #6]
   11990:	2b00      	cmp	r3, #0
   11992:	d048      	beq.n	11a26 <os_mutex_release+0xae>
   11994:	68a2      	ldr	r2, [r4, #8]
   11996:	4282      	cmp	r2, r0
   11998:	d001      	beq.n	1199e <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1199a:	2005      	movs	r0, #5
   1199c:	e040      	b.n	11a20 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1199e:	2b01      	cmp	r3, #1
   119a0:	d003      	beq.n	119aa <os_mutex_release+0x32>
        --mu->mu_level;
   119a2:	3b01      	subs	r3, #1
   119a4:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   119a6:	2000      	movs	r0, #0
        goto done;
   119a8:	e03a      	b.n	11a20 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   119aa:	f7fe fd4d 	bl	10448 <os_arch_save_sr>
   119ae:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   119b0:	88e3      	ldrh	r3, [r4, #6]
   119b2:	3b01      	subs	r3, #1
   119b4:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   119b6:	7aea      	ldrb	r2, [r5, #11]
   119b8:	7963      	ldrb	r3, [r4, #5]
   119ba:	429a      	cmp	r2, r3
   119bc:	d11e      	bne.n	119fc <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   119be:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   119c0:	b146      	cbz	r6, 119d4 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   119c2:	69f3      	ldr	r3, [r6, #28]
   119c4:	b1fb      	cbz	r3, 11a06 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   119c6:	4630      	mov	r0, r6
   119c8:	f000 f9ae 	bl	11d28 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   119cc:	2301      	movs	r3, #1
   119ce:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   119d0:	7af3      	ldrb	r3, [r6, #11]
   119d2:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   119d4:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   119d6:	b116      	cbz	r6, 119de <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   119d8:	7bb3      	ldrb	r3, [r6, #14]
   119da:	3301      	adds	r3, #1
   119dc:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   119de:	7bab      	ldrb	r3, [r5, #14]
   119e0:	3b01      	subs	r3, #1
   119e2:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   119e4:	f000 fa1a 	bl	11e1c <os_sched_next_task>
   119e8:	4604      	mov	r4, r0
    if (rdy != current) {
   119ea:	4285      	cmp	r5, r0
   119ec:	d010      	beq.n	11a10 <os_mutex_release+0x98>
        resched = 1;
   119ee:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   119f0:	4638      	mov	r0, r7
   119f2:	f7fe fd2f 	bl	10454 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   119f6:	b96d      	cbnz	r5, 11a14 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   119f8:	2000      	movs	r0, #0
   119fa:	e011      	b.n	11a20 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   119fc:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   119fe:	4628      	mov	r0, r5
   11a00:	f000 fa24 	bl	11e4c <os_sched_resort>
   11a04:	e7db      	b.n	119be <os_mutex_release+0x46>
        assert(rdy->t_obj);
   11a06:	461a      	mov	r2, r3
   11a08:	4619      	mov	r1, r3
   11a0a:	4618      	mov	r0, r3
   11a0c:	f7fe fde6 	bl	105dc <__assert_func>
    resched = 0;
   11a10:	2500      	movs	r5, #0
   11a12:	e7ed      	b.n	119f0 <os_mutex_release+0x78>
        os_sched(rdy);
   11a14:	4620      	mov	r0, r4
   11a16:	f000 fa07 	bl	11e28 <os_sched>
    ret = OS_OK;
   11a1a:	2000      	movs	r0, #0
   11a1c:	e000      	b.n	11a20 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   11a1e:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   11a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   11a22:	2003      	movs	r0, #3
   11a24:	e7fc      	b.n	11a20 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   11a26:	2005      	movs	r0, #5
   11a28:	e7fa      	b.n	11a20 <os_mutex_release+0xa8>
   11a2a:	bf00      	nop
   11a2c:	20003cbc 	.word	0x20003cbc

00011a30 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   11a30:	4b36      	ldr	r3, [pc, #216]	; (11b0c <os_mutex_pend+0xdc>)
   11a32:	681b      	ldr	r3, [r3, #0]
   11a34:	2b00      	cmp	r3, #0
   11a36:	d065      	beq.n	11b04 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   11a38:	2800      	cmp	r0, #0
   11a3a:	d065      	beq.n	11b08 <os_mutex_pend+0xd8>
{
   11a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a40:	460f      	mov	r7, r1
   11a42:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   11a44:	f7fe fd00 	bl	10448 <os_arch_save_sr>
   11a48:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   11a4a:	f000 f919 	bl	11c80 <os_sched_get_current_task>
   11a4e:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   11a50:	88e3      	ldrh	r3, [r4, #6]
   11a52:	b19b      	cbz	r3, 11a7c <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   11a54:	68a2      	ldr	r2, [r4, #8]
   11a56:	4282      	cmp	r2, r0
   11a58:	d01e      	beq.n	11a98 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   11a5a:	b327      	cbz	r7, 11aa6 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   11a5c:	7ad1      	ldrb	r1, [r2, #11]
   11a5e:	7ac3      	ldrb	r3, [r0, #11]
   11a60:	4299      	cmp	r1, r3
   11a62:	d825      	bhi.n	11ab0 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   11a64:	6821      	ldr	r1, [r4, #0]
   11a66:	b369      	cbz	r1, 11ac4 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   11a68:	460b      	mov	r3, r1
    last = NULL;
   11a6a:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   11a6c:	b32b      	cbz	r3, 11aba <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   11a6e:	7ae8      	ldrb	r0, [r5, #11]
   11a70:	7ada      	ldrb	r2, [r3, #11]
   11a72:	4290      	cmp	r0, r2
   11a74:	d321      	bcc.n	11aba <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   11a76:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   11a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11a7a:	e7f7      	b.n	11a6c <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   11a7c:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   11a7e:	7ac3      	ldrb	r3, [r0, #11]
   11a80:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   11a82:	7b83      	ldrb	r3, [r0, #14]
   11a84:	3301      	adds	r3, #1
   11a86:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   11a88:	2301      	movs	r3, #1
   11a8a:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   11a8c:	4640      	mov	r0, r8
   11a8e:	f7fe fce1 	bl	10454 <os_arch_restore_sr>
        ret = OS_OK;
   11a92:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   11a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   11a98:	3301      	adds	r3, #1
   11a9a:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   11a9c:	4640      	mov	r0, r8
   11a9e:	f7fe fcd9 	bl	10454 <os_arch_restore_sr>
        ret = OS_OK;
   11aa2:	2000      	movs	r0, #0
        goto done;
   11aa4:	e7f6      	b.n	11a94 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   11aa6:	4640      	mov	r0, r8
   11aa8:	f7fe fcd4 	bl	10454 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   11aac:	2006      	movs	r0, #6
        goto done;
   11aae:	e7f1      	b.n	11a94 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   11ab0:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   11ab2:	68a0      	ldr	r0, [r4, #8]
   11ab4:	f000 f9ca 	bl	11e4c <os_sched_resort>
   11ab8:	e7d4      	b.n	11a64 <os_mutex_pend+0x34>
    if (last) {
   11aba:	b11e      	cbz	r6, 11ac4 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   11abc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   11abe:	64eb      	str	r3, [r5, #76]	; 0x4c
   11ac0:	64f5      	str	r5, [r6, #76]	; 0x4c
   11ac2:	e001      	b.n	11ac8 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   11ac4:	64e9      	str	r1, [r5, #76]	; 0x4c
   11ac6:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   11ac8:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   11aca:	7b6b      	ldrb	r3, [r5, #13]
   11acc:	f043 0304 	orr.w	r3, r3, #4
   11ad0:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   11ad2:	4639      	mov	r1, r7
   11ad4:	4628      	mov	r0, r5
   11ad6:	f000 f8df 	bl	11c98 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   11ada:	4640      	mov	r0, r8
   11adc:	f7fe fcba 	bl	10454 <os_arch_restore_sr>
    os_sched(NULL);
   11ae0:	2000      	movs	r0, #0
   11ae2:	f000 f9a1 	bl	11e28 <os_sched>
    OS_ENTER_CRITICAL(sr);
   11ae6:	f7fe fcaf 	bl	10448 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   11aea:	7b6b      	ldrb	r3, [r5, #13]
   11aec:	f023 0304 	bic.w	r3, r3, #4
   11af0:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   11af2:	f7fe fcaf 	bl	10454 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   11af6:	68a3      	ldr	r3, [r4, #8]
   11af8:	42ab      	cmp	r3, r5
   11afa:	d001      	beq.n	11b00 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   11afc:	2006      	movs	r0, #6
   11afe:	e7c9      	b.n	11a94 <os_mutex_pend+0x64>
        ret = OS_OK;
   11b00:	2000      	movs	r0, #0
   11b02:	e7c7      	b.n	11a94 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   11b04:	2009      	movs	r0, #9
   11b06:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   11b08:	2003      	movs	r0, #3
}
   11b0a:	4770      	bx	lr
   11b0c:	20003cbc 	.word	0x20003cbc

00011b10 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   11b10:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   11b12:	4b05      	ldr	r3, [pc, #20]	; (11b28 <os_sanity_check_list_lock+0x18>)
   11b14:	6818      	ldr	r0, [r3, #0]
   11b16:	b900      	cbnz	r0, 11b1a <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   11b18:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   11b1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11b1e:	4803      	ldr	r0, [pc, #12]	; (11b2c <os_sanity_check_list_lock+0x1c>)
   11b20:	f7ff ff86 	bl	11a30 <os_mutex_pend>
err:
   11b24:	e7f8      	b.n	11b18 <os_sanity_check_list_lock+0x8>
   11b26:	bf00      	nop
   11b28:	20003cbc 	.word	0x20003cbc
   11b2c:	20003d20 	.word	0x20003d20

00011b30 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   11b30:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   11b32:	4b04      	ldr	r3, [pc, #16]	; (11b44 <os_sanity_check_list_unlock+0x14>)
   11b34:	6818      	ldr	r0, [r3, #0]
   11b36:	b900      	cbnz	r0, 11b3a <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   11b38:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   11b3a:	4803      	ldr	r0, [pc, #12]	; (11b48 <os_sanity_check_list_unlock+0x18>)
   11b3c:	f7ff ff1c 	bl	11978 <os_mutex_release>
err:
   11b40:	e7fa      	b.n	11b38 <os_sanity_check_list_unlock+0x8>
   11b42:	bf00      	nop
   11b44:	20003cbc 	.word	0x20003cbc
   11b48:	20003d20 	.word	0x20003d20

00011b4c <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   11b4c:	2300      	movs	r3, #0
   11b4e:	6003      	str	r3, [r0, #0]
   11b50:	6043      	str	r3, [r0, #4]
   11b52:	6083      	str	r3, [r0, #8]
   11b54:	60c3      	str	r3, [r0, #12]
   11b56:	6103      	str	r3, [r0, #16]
}
   11b58:	4618      	mov	r0, r3
   11b5a:	4770      	bx	lr

00011b5c <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   11b5c:	b510      	push	{r4, lr}
   11b5e:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   11b60:	f7ff ffd6 	bl	11b10 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   11b64:	4603      	mov	r3, r0
   11b66:	b108      	cbz	r0, 11b6c <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   11b68:	4618      	mov	r0, r3
   11b6a:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   11b6c:	4b03      	ldr	r3, [pc, #12]	; (11b7c <os_sanity_check_register+0x20>)
   11b6e:	681a      	ldr	r2, [r3, #0]
   11b70:	6122      	str	r2, [r4, #16]
   11b72:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   11b74:	f7ff ffdc 	bl	11b30 <os_sanity_check_list_unlock>
   11b78:	4603      	mov	r3, r0
err:
   11b7a:	e7f5      	b.n	11b68 <os_sanity_check_register+0xc>
   11b7c:	20002518 	.word	0x20002518

00011b80 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   11b80:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   11b82:	f7ff ffc5 	bl	11b10 <os_sanity_check_list_lock>
    if (rc != 0) {
   11b86:	b910      	cbnz	r0, 11b8e <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   11b88:	4b17      	ldr	r3, [pc, #92]	; (11be8 <os_sanity_run+0x68>)
   11b8a:	681c      	ldr	r4, [r3, #0]
   11b8c:	e00e      	b.n	11bac <os_sanity_run+0x2c>
        assert(0);
   11b8e:	2300      	movs	r3, #0
   11b90:	461a      	mov	r2, r3
   11b92:	4619      	mov	r1, r3
   11b94:	4618      	mov	r0, r3
   11b96:	f7fe fd21 	bl	105dc <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   11b9a:	f000 facf 	bl	1213c <os_time_get>
   11b9e:	6823      	ldr	r3, [r4, #0]
   11ba0:	6862      	ldr	r2, [r4, #4]
   11ba2:	4413      	add	r3, r2
   11ba4:	1ac3      	subs	r3, r0, r3
   11ba6:	2b00      	cmp	r3, #0
   11ba8:	dc0d      	bgt.n	11bc6 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   11baa:	6924      	ldr	r4, [r4, #16]
   11bac:	b18c      	cbz	r4, 11bd2 <os_sanity_run+0x52>
        if (sc->sc_func) {
   11bae:	68a3      	ldr	r3, [r4, #8]
   11bb0:	2b00      	cmp	r3, #0
   11bb2:	d0f2      	beq.n	11b9a <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   11bb4:	68e1      	ldr	r1, [r4, #12]
   11bb6:	4620      	mov	r0, r4
   11bb8:	4798      	blx	r3
            if (rc == OS_OK) {
   11bba:	2800      	cmp	r0, #0
   11bbc:	d1ed      	bne.n	11b9a <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   11bbe:	f000 fabd 	bl	1213c <os_time_get>
   11bc2:	6020      	str	r0, [r4, #0]
                continue;
   11bc4:	e7f1      	b.n	11baa <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   11bc6:	2300      	movs	r3, #0
   11bc8:	461a      	mov	r2, r3
   11bca:	4619      	mov	r1, r3
   11bcc:	4618      	mov	r0, r3
   11bce:	f7fe fd05 	bl	105dc <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   11bd2:	f7ff ffad 	bl	11b30 <os_sanity_check_list_unlock>
    if (rc != 0) {
   11bd6:	b900      	cbnz	r0, 11bda <os_sanity_run+0x5a>
        assert(0);
    }
}
   11bd8:	bd10      	pop	{r4, pc}
        assert(0);
   11bda:	2300      	movs	r3, #0
   11bdc:	461a      	mov	r2, r3
   11bde:	4619      	mov	r1, r3
   11be0:	4618      	mov	r0, r3
   11be2:	f7fe fcfb 	bl	105dc <__assert_func>
   11be6:	bf00      	nop
   11be8:	20002518 	.word	0x20002518

00011bec <os_sanity_init>:

int
os_sanity_init(void)
{
   11bec:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   11bee:	4802      	ldr	r0, [pc, #8]	; (11bf8 <os_sanity_init+0xc>)
   11bf0:	f7ff feb8 	bl	11964 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   11bf4:	bd08      	pop	{r3, pc}
   11bf6:	bf00      	nop
   11bf8:	20003d20 	.word	0x20003d20

00011bfc <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   11bfc:	7b03      	ldrb	r3, [r0, #12]
   11bfe:	2b01      	cmp	r3, #1
   11c00:	d001      	beq.n	11c06 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   11c02:	2002      	movs	r0, #2
}
   11c04:	4770      	bx	lr
{
   11c06:	b510      	push	{r4, lr}
   11c08:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   11c0a:	f7fe fc1d 	bl	10448 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   11c0e:	4b0f      	ldr	r3, [pc, #60]	; (11c4c <os_sched_insert+0x50>)
   11c10:	681b      	ldr	r3, [r3, #0]
   11c12:	b12b      	cbz	r3, 11c20 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   11c14:	7ae1      	ldrb	r1, [r4, #11]
   11c16:	7ada      	ldrb	r2, [r3, #11]
   11c18:	4291      	cmp	r1, r2
   11c1a:	d301      	bcc.n	11c20 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   11c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11c1e:	e7f8      	b.n	11c12 <os_sched_insert+0x16>
    if (entry) {
   11c20:	b153      	cbz	r3, 11c38 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   11c22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   11c24:	64a2      	str	r2, [r4, #72]	; 0x48
   11c26:	6463      	str	r3, [r4, #68]	; 0x44
   11c28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   11c2a:	6014      	str	r4, [r2, #0]
   11c2c:	3444      	adds	r4, #68	; 0x44
   11c2e:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   11c30:	f7fe fc10 	bl	10454 <os_arch_restore_sr>
    return (0);
   11c34:	2000      	movs	r0, #0
}
   11c36:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   11c38:	2300      	movs	r3, #0
   11c3a:	6463      	str	r3, [r4, #68]	; 0x44
   11c3c:	4b03      	ldr	r3, [pc, #12]	; (11c4c <os_sched_insert+0x50>)
   11c3e:	685a      	ldr	r2, [r3, #4]
   11c40:	64a2      	str	r2, [r4, #72]	; 0x48
   11c42:	6014      	str	r4, [r2, #0]
   11c44:	3444      	adds	r4, #68	; 0x44
   11c46:	605c      	str	r4, [r3, #4]
   11c48:	e7f2      	b.n	11c30 <os_sched_insert+0x34>
   11c4a:	bf00      	nop
   11c4c:	2000018c 	.word	0x2000018c

00011c50 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   11c50:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   11c52:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   11c54:	3301      	adds	r3, #1
   11c56:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   11c58:	4b06      	ldr	r3, [pc, #24]	; (11c74 <os_sched_ctx_sw_hook+0x24>)
   11c5a:	681c      	ldr	r4, [r3, #0]
   11c5c:	4b06      	ldr	r3, [pc, #24]	; (11c78 <os_sched_ctx_sw_hook+0x28>)
   11c5e:	6818      	ldr	r0, [r3, #0]
   11c60:	4906      	ldr	r1, [pc, #24]	; (11c7c <os_sched_ctx_sw_hook+0x2c>)
   11c62:	680b      	ldr	r3, [r1, #0]
   11c64:	1ac2      	subs	r2, r0, r3
   11c66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11c68:	4413      	add	r3, r2
   11c6a:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   11c6c:	6008      	str	r0, [r1, #0]
}
   11c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
   11c72:	4770      	bx	lr
   11c74:	20003d2c 	.word	0x20003d2c
   11c78:	20003d40 	.word	0x20003d40
   11c7c:	20003d30 	.word	0x20003d30

00011c80 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   11c80:	4b01      	ldr	r3, [pc, #4]	; (11c88 <os_sched_get_current_task+0x8>)
   11c82:	6818      	ldr	r0, [r3, #0]
   11c84:	4770      	bx	lr
   11c86:	bf00      	nop
   11c88:	20003d2c 	.word	0x20003d2c

00011c8c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   11c8c:	4b01      	ldr	r3, [pc, #4]	; (11c94 <os_sched_set_current_task+0x8>)
   11c8e:	6018      	str	r0, [r3, #0]
}
   11c90:	4770      	bx	lr
   11c92:	bf00      	nop
   11c94:	20003d2c 	.word	0x20003d2c

00011c98 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   11c98:	b538      	push	{r3, r4, r5, lr}
   11c9a:	4604      	mov	r4, r0
   11c9c:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   11c9e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11ca0:	b1d3      	cbz	r3, 11cd8 <os_sched_sleep+0x40>
   11ca2:	6c82      	ldr	r2, [r0, #72]	; 0x48
   11ca4:	649a      	str	r2, [r3, #72]	; 0x48
   11ca6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   11ca8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   11caa:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   11cac:	2302      	movs	r3, #2
   11cae:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   11cb0:	f000 fa44 	bl	1213c <os_time_get>
   11cb4:	4428      	add	r0, r5
   11cb6:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   11cb8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   11cbc:	d010      	beq.n	11ce0 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   11cbe:	4b18      	ldr	r3, [pc, #96]	; (11d20 <os_sched_sleep+0x88>)
   11cc0:	681b      	ldr	r3, [r3, #0]
   11cc2:	b1d3      	cbz	r3, 11cfa <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   11cc4:	7b5a      	ldrb	r2, [r3, #13]
   11cc6:	f012 0f01 	tst.w	r2, #1
   11cca:	d116      	bne.n	11cfa <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   11ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   11cce:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   11cd0:	2a00      	cmp	r2, #0
   11cd2:	dc12      	bgt.n	11cfa <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   11cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   11cd6:	e7f4      	b.n	11cc2 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   11cd8:	6c82      	ldr	r2, [r0, #72]	; 0x48
   11cda:	4b12      	ldr	r3, [pc, #72]	; (11d24 <os_sched_sleep+0x8c>)
   11cdc:	605a      	str	r2, [r3, #4]
   11cde:	e7e2      	b.n	11ca6 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   11ce0:	7b63      	ldrb	r3, [r4, #13]
   11ce2:	f043 0301 	orr.w	r3, r3, #1
   11ce6:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   11ce8:	2300      	movs	r3, #0
   11cea:	6463      	str	r3, [r4, #68]	; 0x44
   11cec:	4b0c      	ldr	r3, [pc, #48]	; (11d20 <os_sched_sleep+0x88>)
   11cee:	685a      	ldr	r2, [r3, #4]
   11cf0:	64a2      	str	r2, [r4, #72]	; 0x48
   11cf2:	6014      	str	r4, [r2, #0]
   11cf4:	3444      	adds	r4, #68	; 0x44
   11cf6:	605c      	str	r4, [r3, #4]
   11cf8:	e007      	b.n	11d0a <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   11cfa:	b143      	cbz	r3, 11d0e <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   11cfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   11cfe:	64a2      	str	r2, [r4, #72]	; 0x48
   11d00:	6463      	str	r3, [r4, #68]	; 0x44
   11d02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   11d04:	6014      	str	r4, [r2, #0]
   11d06:	3444      	adds	r4, #68	; 0x44
   11d08:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   11d0a:	2000      	movs	r0, #0
   11d0c:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   11d0e:	2300      	movs	r3, #0
   11d10:	6463      	str	r3, [r4, #68]	; 0x44
   11d12:	4b03      	ldr	r3, [pc, #12]	; (11d20 <os_sched_sleep+0x88>)
   11d14:	685a      	ldr	r2, [r3, #4]
   11d16:	64a2      	str	r2, [r4, #72]	; 0x48
   11d18:	6014      	str	r4, [r2, #0]
   11d1a:	3444      	adds	r4, #68	; 0x44
   11d1c:	605c      	str	r4, [r3, #4]
   11d1e:	e7f4      	b.n	11d0a <os_sched_sleep+0x72>
   11d20:	20000194 	.word	0x20000194
   11d24:	2000018c 	.word	0x2000018c

00011d28 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   11d28:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   11d2a:	7b03      	ldrb	r3, [r0, #12]
   11d2c:	2b02      	cmp	r3, #2
   11d2e:	d108      	bne.n	11d42 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   11d30:	69c3      	ldr	r3, [r0, #28]
   11d32:	b1db      	cbz	r3, 11d6c <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   11d34:	681a      	ldr	r2, [r3, #0]
   11d36:	b152      	cbz	r2, 11d4e <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   11d38:	4282      	cmp	r2, r0
   11d3a:	d10f      	bne.n	11d5c <os_sched_wakeup+0x34>
   11d3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   11d3e:	601a      	str	r2, [r3, #0]
   11d40:	e011      	b.n	11d66 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   11d42:	2300      	movs	r3, #0
   11d44:	461a      	mov	r2, r3
   11d46:	4619      	mov	r1, r3
   11d48:	4618      	mov	r0, r3
   11d4a:	f7fe fc47 	bl	105dc <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   11d4e:	2300      	movs	r3, #0
   11d50:	461a      	mov	r2, r3
   11d52:	4619      	mov	r1, r3
   11d54:	4618      	mov	r0, r3
   11d56:	f7fe fc41 	bl	105dc <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   11d5a:	461a      	mov	r2, r3
   11d5c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   11d5e:	4283      	cmp	r3, r0
   11d60:	d1fb      	bne.n	11d5a <os_sched_wakeup+0x32>
   11d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11d64:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   11d66:	2300      	movs	r3, #0
   11d68:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   11d6a:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   11d6c:	2301      	movs	r3, #1
   11d6e:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   11d70:	2300      	movs	r3, #0
   11d72:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   11d74:	7b43      	ldrb	r3, [r0, #13]
   11d76:	f023 0301 	bic.w	r3, r3, #1
   11d7a:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   11d7c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11d7e:	b143      	cbz	r3, 11d92 <os_sched_wakeup+0x6a>
   11d80:	6c82      	ldr	r2, [r0, #72]	; 0x48
   11d82:	649a      	str	r2, [r3, #72]	; 0x48
   11d84:	6c83      	ldr	r3, [r0, #72]	; 0x48
   11d86:	6c42      	ldr	r2, [r0, #68]	; 0x44
   11d88:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   11d8a:	f7ff ff37 	bl	11bfc <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   11d8e:	2000      	movs	r0, #0
   11d90:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   11d92:	6c82      	ldr	r2, [r0, #72]	; 0x48
   11d94:	4b01      	ldr	r3, [pc, #4]	; (11d9c <os_sched_wakeup+0x74>)
   11d96:	605a      	str	r2, [r3, #4]
   11d98:	e7f4      	b.n	11d84 <os_sched_wakeup+0x5c>
   11d9a:	bf00      	nop
   11d9c:	20000194 	.word	0x20000194

00011da0 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   11da0:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   11da2:	f000 f9cb 	bl	1213c <os_time_get>
   11da6:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   11da8:	f7fe fb4e 	bl	10448 <os_arch_save_sr>
   11dac:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   11dae:	4b0a      	ldr	r3, [pc, #40]	; (11dd8 <os_sched_os_timer_exp+0x38>)
   11db0:	6818      	ldr	r0, [r3, #0]
    while (t) {
   11db2:	b160      	cbz	r0, 11dce <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   11db4:	7b43      	ldrb	r3, [r0, #13]
   11db6:	f013 0f01 	tst.w	r3, #1
   11dba:	d108      	bne.n	11dce <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   11dbc:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   11dbe:	6b43      	ldr	r3, [r0, #52]	; 0x34
   11dc0:	1aeb      	subs	r3, r5, r3
   11dc2:	2b00      	cmp	r3, #0
   11dc4:	db03      	blt.n	11dce <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   11dc6:	f7ff ffaf 	bl	11d28 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   11dca:	4620      	mov	r0, r4
   11dcc:	e7f1      	b.n	11db2 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   11dce:	4630      	mov	r0, r6
   11dd0:	f7fe fb40 	bl	10454 <os_arch_restore_sr>
}
   11dd4:	bd70      	pop	{r4, r5, r6, pc}
   11dd6:	bf00      	nop
   11dd8:	20000194 	.word	0x20000194

00011ddc <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   11ddc:	b510      	push	{r4, lr}
   11dde:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   11de0:	f7fe fb3b 	bl	1045a <os_arch_in_critical>
   11de4:	b150      	cbz	r0, 11dfc <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   11de6:	4b0c      	ldr	r3, [pc, #48]	; (11e18 <os_sched_wakeup_ticks+0x3c>)
   11de8:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   11dea:	b17b      	cbz	r3, 11e0c <os_sched_wakeup_ticks+0x30>
   11dec:	7b5a      	ldrb	r2, [r3, #13]
   11dee:	f012 0f01 	tst.w	r2, #1
   11df2:	d10e      	bne.n	11e12 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   11df4:	6b58      	ldr	r0, [r3, #52]	; 0x34
   11df6:	1b00      	subs	r0, r0, r4
   11df8:	d406      	bmi.n	11e08 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   11dfa:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   11dfc:	2300      	movs	r3, #0
   11dfe:	461a      	mov	r2, r3
   11e00:	4619      	mov	r1, r3
   11e02:	4618      	mov	r0, r3
   11e04:	f7fe fbea 	bl	105dc <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   11e08:	2000      	movs	r0, #0
   11e0a:	e7f6      	b.n	11dfa <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   11e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11e10:	e7f3      	b.n	11dfa <os_sched_wakeup_ticks+0x1e>
   11e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   11e16:	e7f0      	b.n	11dfa <os_sched_wakeup_ticks+0x1e>
   11e18:	20000194 	.word	0x20000194

00011e1c <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   11e1c:	4b01      	ldr	r3, [pc, #4]	; (11e24 <os_sched_next_task+0x8>)
   11e1e:	6818      	ldr	r0, [r3, #0]
   11e20:	4770      	bx	lr
   11e22:	bf00      	nop
   11e24:	2000018c 	.word	0x2000018c

00011e28 <os_sched>:
{
   11e28:	b538      	push	{r3, r4, r5, lr}
   11e2a:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   11e2c:	f7fe fb0c 	bl	10448 <os_arch_save_sr>
   11e30:	4605      	mov	r5, r0
    if (!next_t) {
   11e32:	b134      	cbz	r4, 11e42 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   11e34:	4620      	mov	r0, r4
   11e36:	f7fe fafd 	bl	10434 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   11e3a:	4628      	mov	r0, r5
   11e3c:	f7fe fb0a 	bl	10454 <os_arch_restore_sr>
}
   11e40:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   11e42:	f7ff ffeb 	bl	11e1c <os_sched_next_task>
   11e46:	4604      	mov	r4, r0
   11e48:	e7f4      	b.n	11e34 <os_sched+0xc>
	...

00011e4c <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   11e4c:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   11e4e:	7b03      	ldrb	r3, [r0, #12]
   11e50:	2b01      	cmp	r3, #1
   11e52:	d000      	beq.n	11e56 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   11e54:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   11e56:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11e58:	b13b      	cbz	r3, 11e6a <os_sched_resort+0x1e>
   11e5a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   11e5c:	649a      	str	r2, [r3, #72]	; 0x48
   11e5e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   11e60:	6c42      	ldr	r2, [r0, #68]	; 0x44
   11e62:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   11e64:	f7ff feca 	bl	11bfc <os_sched_insert>
}
   11e68:	e7f4      	b.n	11e54 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   11e6a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   11e6c:	4b01      	ldr	r3, [pc, #4]	; (11e74 <os_sched_resort+0x28>)
   11e6e:	605a      	str	r2, [r3, #4]
   11e70:	e7f5      	b.n	11e5e <os_sched_resort+0x12>
   11e72:	bf00      	nop
   11e74:	2000018c 	.word	0x2000018c

00011e78 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   11e78:	4603      	mov	r3, r0
   11e7a:	b118      	cbz	r0, 11e84 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   11e7c:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   11e7e:	2000      	movs	r0, #0
   11e80:	6018      	str	r0, [r3, #0]
   11e82:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   11e84:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   11e86:	4770      	bx	lr

00011e88 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   11e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   11e8a:	4b17      	ldr	r3, [pc, #92]	; (11ee8 <os_sem_release+0x60>)
   11e8c:	681b      	ldr	r3, [r3, #0]
   11e8e:	b33b      	cbz	r3, 11ee0 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   11e90:	b340      	cbz	r0, 11ee4 <os_sem_release+0x5c>
   11e92:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   11e94:	f7ff fef4 	bl	11c80 <os_sched_get_current_task>
   11e98:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   11e9a:	f7fe fad5 	bl	10448 <os_arch_save_sr>
   11e9e:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   11ea0:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   11ea2:	b165      	cbz	r5, 11ebe <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   11ea4:	7b6b      	ldrb	r3, [r5, #13]
   11ea6:	f023 0302 	bic.w	r3, r3, #2
   11eaa:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   11eac:	4628      	mov	r0, r5
   11eae:	f7ff ff3b 	bl	11d28 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   11eb2:	7afa      	ldrb	r2, [r7, #11]
   11eb4:	7aeb      	ldrb	r3, [r5, #11]
   11eb6:	429a      	cmp	r2, r3
   11eb8:	d80b      	bhi.n	11ed2 <os_sem_release+0x4a>
    resched = 0;
   11eba:	2400      	movs	r4, #0
   11ebc:	e003      	b.n	11ec6 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   11ebe:	88e3      	ldrh	r3, [r4, #6]
   11ec0:	3301      	adds	r3, #1
   11ec2:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   11ec4:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   11ec6:	4630      	mov	r0, r6
   11ec8:	f7fe fac4 	bl	10454 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   11ecc:	b91c      	cbnz	r4, 11ed6 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   11ece:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   11ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   11ed2:	2401      	movs	r4, #1
   11ed4:	e7f7      	b.n	11ec6 <os_sem_release+0x3e>
        os_sched(rdy);
   11ed6:	4628      	mov	r0, r5
   11ed8:	f7ff ffa6 	bl	11e28 <os_sched>
    ret = OS_OK;
   11edc:	2000      	movs	r0, #0
   11ede:	e7f7      	b.n	11ed0 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   11ee0:	2009      	movs	r0, #9
   11ee2:	e7f5      	b.n	11ed0 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   11ee4:	2003      	movs	r0, #3
   11ee6:	e7f3      	b.n	11ed0 <os_sem_release+0x48>
   11ee8:	20003cbc 	.word	0x20003cbc

00011eec <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   11eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   11eee:	4b2c      	ldr	r3, [pc, #176]	; (11fa0 <os_sem_pend+0xb4>)
   11ef0:	681b      	ldr	r3, [r3, #0]
   11ef2:	2b00      	cmp	r3, #0
   11ef4:	d04f      	beq.n	11f96 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   11ef6:	2800      	cmp	r0, #0
   11ef8:	d04f      	beq.n	11f9a <os_sem_pend+0xae>
   11efa:	460d      	mov	r5, r1
   11efc:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   11efe:	f7ff febf 	bl	11c80 <os_sched_get_current_task>
   11f02:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   11f04:	f7fe faa0 	bl	10448 <os_arch_save_sr>
   11f08:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   11f0a:	88e3      	ldrh	r3, [r4, #6]
   11f0c:	b14b      	cbz	r3, 11f22 <os_sem_pend+0x36>
        sem->sem_tokens--;
   11f0e:	3b01      	subs	r3, #1
   11f10:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   11f12:	2400      	movs	r4, #0
    sched = 0;
   11f14:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   11f16:	4638      	mov	r0, r7
   11f18:	f7fe fa9c 	bl	10454 <os_arch_restore_sr>

    if (sched) {
   11f1c:	bb45      	cbnz	r5, 11f70 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   11f1e:	4620      	mov	r0, r4
   11f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   11f22:	b315      	cbz	r5, 11f6a <os_sem_pend+0x7e>
        current->t_obj = sem;
   11f24:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   11f26:	7b73      	ldrb	r3, [r6, #13]
   11f28:	f043 0302 	orr.w	r3, r3, #2
   11f2c:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   11f2e:	f8d4 c000 	ldr.w	ip, [r4]
   11f32:	f1bc 0f00 	cmp.w	ip, #0
   11f36:	d00e      	beq.n	11f56 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   11f38:	4663      	mov	r3, ip
        last = NULL;
   11f3a:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   11f3c:	b133      	cbz	r3, 11f4c <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   11f3e:	7af1      	ldrb	r1, [r6, #11]
   11f40:	7ada      	ldrb	r2, [r3, #11]
   11f42:	4291      	cmp	r1, r2
   11f44:	d302      	bcc.n	11f4c <os_sem_pend+0x60>
                last = entry;
   11f46:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   11f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11f4a:	e7f7      	b.n	11f3c <os_sem_pend+0x50>
        if (last) {
   11f4c:	b118      	cbz	r0, 11f56 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   11f4e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   11f50:	64f3      	str	r3, [r6, #76]	; 0x4c
   11f52:	64c6      	str	r6, [r0, #76]	; 0x4c
   11f54:	e002      	b.n	11f5c <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   11f56:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   11f5a:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   11f5c:	4629      	mov	r1, r5
   11f5e:	4630      	mov	r0, r6
   11f60:	f7ff fe9a 	bl	11c98 <os_sched_sleep>
        ret = OS_OK;
   11f64:	2400      	movs	r4, #0
        sched = 1;
   11f66:	2501      	movs	r5, #1
   11f68:	e7d5      	b.n	11f16 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   11f6a:	2406      	movs	r4, #6
    sched = 0;
   11f6c:	2500      	movs	r5, #0
   11f6e:	e7d2      	b.n	11f16 <os_sem_pend+0x2a>
        os_sched(NULL);
   11f70:	2000      	movs	r0, #0
   11f72:	f7ff ff59 	bl	11e28 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   11f76:	7b73      	ldrb	r3, [r6, #13]
   11f78:	f013 0f02 	tst.w	r3, #2
   11f7c:	d101      	bne.n	11f82 <os_sem_pend+0x96>
            ret = OS_OK;
   11f7e:	2400      	movs	r4, #0
   11f80:	e7cd      	b.n	11f1e <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   11f82:	f7fe fa61 	bl	10448 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   11f86:	7b73      	ldrb	r3, [r6, #13]
   11f88:	f023 0302 	bic.w	r3, r3, #2
   11f8c:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   11f8e:	f7fe fa61 	bl	10454 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   11f92:	2406      	movs	r4, #6
   11f94:	e7c3      	b.n	11f1e <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   11f96:	2409      	movs	r4, #9
   11f98:	e7c1      	b.n	11f1e <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   11f9a:	2403      	movs	r4, #3
   11f9c:	e7bf      	b.n	11f1e <os_sem_pend+0x32>
   11f9e:	bf00      	nop
   11fa0:	20003cbc 	.word	0x20003cbc

00011fa4 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   11fa4:	2300      	movs	r3, #0
   11fa6:	e003      	b.n	11fb0 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   11fa8:	4a03      	ldr	r2, [pc, #12]	; (11fb8 <_clear_stack+0x14>)
   11faa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   11fae:	3301      	adds	r3, #1
   11fb0:	428b      	cmp	r3, r1
   11fb2:	dbf9      	blt.n	11fa8 <_clear_stack+0x4>
    }
}
   11fb4:	4770      	bx	lr
   11fb6:	bf00      	nop
   11fb8:	deadbeef 	.word	0xdeadbeef

00011fbc <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   11fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11fc0:	4604      	mov	r4, r0
   11fc2:	460f      	mov	r7, r1
   11fc4:	4690      	mov	r8, r2
   11fc6:	461d      	mov	r5, r3
   11fc8:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   11fcc:	2250      	movs	r2, #80	; 0x50
   11fce:	2100      	movs	r1, #0
   11fd0:	f000 faa1 	bl	12516 <memset>

    t->t_func = func;
   11fd4:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   11fd8:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   11fda:	f7fe fa35 	bl	10448 <os_arch_save_sr>
    rc = g_task_id;
   11fde:	4b2b      	ldr	r3, [pc, #172]	; (1208c <os_task_init+0xd0>)
   11fe0:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   11fe2:	1c6a      	adds	r2, r5, #1
   11fe4:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   11fe6:	f7fe fa35 	bl	10454 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   11fea:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   11fec:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11ff0:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   11ff2:	2301      	movs	r3, #1
   11ff4:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   11ff6:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   11ff8:	2300      	movs	r3, #0
   11ffa:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   11ffc:	f104 0720 	add.w	r7, r4, #32
   12000:	4638      	mov	r0, r7
   12002:	f7ff fda3 	bl	11b4c <os_sanity_check_init>
    if (rc != OS_OK) {
   12006:	4605      	mov	r5, r0
   12008:	2800      	cmp	r0, #0
   1200a:	d132      	bne.n	12072 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1200c:	9b07      	ldr	r3, [sp, #28]
   1200e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12012:	d005      	beq.n	12020 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   12014:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   12016:	4638      	mov	r0, r7
   12018:	f7ff fda0 	bl	11b5c <os_sanity_check_register>
        if (rc != OS_OK) {
   1201c:	4605      	mov	r5, r0
   1201e:	bb40      	cbnz	r0, 12072 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   12020:	4631      	mov	r1, r6
   12022:	9808      	ldr	r0, [sp, #32]
   12024:	f7ff ffbe 	bl	11fa4 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   12028:	9b08      	ldr	r3, [sp, #32]
   1202a:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1202e:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   12030:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   12032:	4632      	mov	r2, r6
   12034:	4620      	mov	r0, r4
   12036:	f7fe fa15 	bl	10464 <os_arch_task_stack_init>
   1203a:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1203c:	4b14      	ldr	r3, [pc, #80]	; (12090 <os_task_init+0xd4>)
   1203e:	681b      	ldr	r3, [r3, #0]
   12040:	b15b      	cbz	r3, 1205a <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   12042:	7ae1      	ldrb	r1, [r4, #11]
   12044:	7ada      	ldrb	r2, [r3, #11]
   12046:	4291      	cmp	r1, r2
   12048:	d001      	beq.n	1204e <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1204c:	e7f8      	b.n	12040 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1204e:	2300      	movs	r3, #0
   12050:	461a      	mov	r2, r3
   12052:	4619      	mov	r1, r3
   12054:	4618      	mov	r0, r3
   12056:	f7fe fac1 	bl	105dc <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1205a:	6423      	str	r3, [r4, #64]	; 0x40
   1205c:	4b0c      	ldr	r3, [pc, #48]	; (12090 <os_task_init+0xd4>)
   1205e:	685a      	ldr	r2, [r3, #4]
   12060:	6014      	str	r4, [r2, #0]
   12062:	f104 0240 	add.w	r2, r4, #64	; 0x40
   12066:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   12068:	4620      	mov	r0, r4
   1206a:	f7ff fdc7 	bl	11bfc <os_sched_insert>
   1206e:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   12070:	b110      	cbz	r0, 12078 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   12072:	4628      	mov	r0, r5
   12074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   12078:	f7fe fb6a 	bl	10750 <os_started>
   1207c:	b908      	cbnz	r0, 12082 <os_task_init+0xc6>
    return (0);
   1207e:	4605      	mov	r5, r0
   12080:	e7f7      	b.n	12072 <os_task_init+0xb6>
        os_sched(NULL);
   12082:	2000      	movs	r0, #0
   12084:	f7ff fed0 	bl	11e28 <os_sched>
   12088:	e7f3      	b.n	12072 <os_task_init+0xb6>
   1208a:	bf00      	nop
   1208c:	20003d3c 	.word	0x20003d3c
   12090:	20003d34 	.word	0x20003d34

00012094 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   12094:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   12098:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1209a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1209e:	e9d1 4500 	ldrd	r4, r5, [r1]
   120a2:	eb14 0b03 	adds.w	fp, r4, r3
   120a6:	f145 0c00 	adc.w	ip, r5, #0
   120aa:	e9c2 bc00 	strd	fp, ip, [r2]
   120ae:	688b      	ldr	r3, [r1, #8]
   120b0:	f641 6184 	movw	r1, #7812	; 0x1e84
   120b4:	fb01 3000 	mla	r0, r1, r0, r3
   120b8:	6090      	str	r0, [r2, #8]
   120ba:	4b08      	ldr	r3, [pc, #32]	; (120dc <os_deltatime+0x48>)
   120bc:	4298      	cmp	r0, r3
   120be:	dd0a      	ble.n	120d6 <os_deltatime+0x42>
   120c0:	f11b 0401 	adds.w	r4, fp, #1
   120c4:	f14c 0500 	adc.w	r5, ip, #0
   120c8:	e9c2 4500 	strd	r4, r5, [r2]
   120cc:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   120d0:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   120d4:	6090      	str	r0, [r2, #8]
}
   120d6:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   120da:	4770      	bx	lr
   120dc:	000f423f 	.word	0x000f423f

000120e0 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   120e0:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   120e2:	1e04      	subs	r4, r0, #0
   120e4:	db0d      	blt.n	12102 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   120e6:	f7fe f9af 	bl	10448 <os_arch_save_sr>
   120ea:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   120ec:	4a11      	ldr	r2, [pc, #68]	; (12134 <os_time_tick+0x54>)
   120ee:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   120f0:	18e0      	adds	r0, r4, r3
   120f2:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   120f4:	ea90 0f03 	teq	r0, r3
   120f8:	d409      	bmi.n	1210e <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   120fa:	4628      	mov	r0, r5
   120fc:	f7fe f9aa 	bl	10454 <os_arch_restore_sr>
}
   12100:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   12102:	2300      	movs	r3, #0
   12104:	461a      	mov	r2, r3
   12106:	4619      	mov	r1, r3
   12108:	4618      	mov	r0, r3
   1210a:	f7fe fa67 	bl	105dc <__assert_func>
        delta = g_os_time - basetod.ostime;
   1210e:	4e0a      	ldr	r6, [pc, #40]	; (12138 <os_time_tick+0x58>)
   12110:	4631      	mov	r1, r6
   12112:	f851 4b08 	ldr.w	r4, [r1], #8
   12116:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   12118:	460a      	mov	r2, r1
   1211a:	4620      	mov	r0, r4
   1211c:	f7ff ffba 	bl	12094 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   12120:	f106 0118 	add.w	r1, r6, #24
   12124:	460a      	mov	r2, r1
   12126:	4620      	mov	r0, r4
   12128:	f7ff ffb4 	bl	12094 <os_deltatime>
        basetod.ostime = g_os_time;
   1212c:	4b01      	ldr	r3, [pc, #4]	; (12134 <os_time_tick+0x54>)
   1212e:	681b      	ldr	r3, [r3, #0]
   12130:	6033      	str	r3, [r6, #0]
   12132:	e7e2      	b.n	120fa <os_time_tick+0x1a>
   12134:	20003d40 	.word	0x20003d40
   12138:	20002520 	.word	0x20002520

0001213c <os_time_get>:
}
   1213c:	4b01      	ldr	r3, [pc, #4]	; (12144 <os_time_get+0x8>)
   1213e:	6818      	ldr	r0, [r3, #0]
   12140:	4770      	bx	lr
   12142:	bf00      	nop
   12144:	20003d40 	.word	0x20003d40

00012148 <os_time_advance>:

void
os_time_advance(int ticks)
{
   12148:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1214a:	1e04      	subs	r4, r0, #0
   1214c:	db09      	blt.n	12162 <os_time_advance+0x1a>

    if (ticks > 0) {
   1214e:	2c00      	cmp	r4, #0
   12150:	dd06      	ble.n	12160 <os_time_advance+0x18>
        if (!os_started()) {
   12152:	f7fe fafd 	bl	10750 <os_started>
   12156:	b950      	cbnz	r0, 1216e <os_time_advance+0x26>
            g_os_time += ticks;
   12158:	4a0a      	ldr	r2, [pc, #40]	; (12184 <os_time_advance+0x3c>)
   1215a:	6813      	ldr	r3, [r2, #0]
   1215c:	441c      	add	r4, r3
   1215e:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   12160:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   12162:	2300      	movs	r3, #0
   12164:	461a      	mov	r2, r3
   12166:	4619      	mov	r1, r3
   12168:	4618      	mov	r0, r3
   1216a:	f7fe fa37 	bl	105dc <__assert_func>
            os_time_tick(ticks);
   1216e:	4620      	mov	r0, r4
   12170:	f7ff ffb6 	bl	120e0 <os_time_tick>
            os_callout_tick();
   12174:	f7fe fc14 	bl	109a0 <os_callout_tick>
            os_sched_os_timer_exp();
   12178:	f7ff fe12 	bl	11da0 <os_sched_os_timer_exp>
            os_sched(NULL);
   1217c:	2000      	movs	r0, #0
   1217e:	f7ff fe53 	bl	11e28 <os_sched>
}
   12182:	e7ed      	b.n	12160 <os_time_advance+0x18>
   12184:	20003d40 	.word	0x20003d40

00012188 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   12188:	b570      	push	{r4, r5, r6, lr}
   1218a:	4605      	mov	r5, r0
   1218c:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1218e:	f7fe f95b 	bl	10448 <os_arch_save_sr>
   12192:	4606      	mov	r6, r0
    if (tv != NULL) {
   12194:	b145      	cbz	r5, 121a8 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   12196:	f7ff ffd1 	bl	1213c <os_time_get>
   1219a:	4908      	ldr	r1, [pc, #32]	; (121bc <os_gettimeofday+0x34>)
   1219c:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   121a0:	462a      	mov	r2, r5
   121a2:	1ac0      	subs	r0, r0, r3
   121a4:	f7ff ff76 	bl	12094 <os_deltatime>
    }

    if (tz != NULL) {
   121a8:	b114      	cbz	r4, 121b0 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   121aa:	4b04      	ldr	r3, [pc, #16]	; (121bc <os_gettimeofday+0x34>)
   121ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
   121ae:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   121b0:	4630      	mov	r0, r6
   121b2:	f7fe f94f 	bl	10454 <os_arch_restore_sr>

    return (0);
}
   121b6:	2000      	movs	r0, #0
   121b8:	bd70      	pop	{r4, r5, r6, pc}
   121ba:	bf00      	nop
   121bc:	20002520 	.word	0x20002520

000121c0 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   121c0:	b538      	push	{r3, r4, r5, lr}
   121c2:	4604      	mov	r4, r0
   121c4:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   121c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   121ca:	2300      	movs	r3, #0
   121cc:	01c0      	lsls	r0, r0, #7
   121ce:	0e61      	lsrs	r1, r4, #25
   121d0:	f017 fbf0 	bl	299b4 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   121d4:	2901      	cmp	r1, #1
   121d6:	bf08      	it	eq
   121d8:	2800      	cmpeq	r0, #0
   121da:	d202      	bcs.n	121e2 <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   121dc:	6028      	str	r0, [r5, #0]
    return 0;
   121de:	2000      	movs	r0, #0
}
   121e0:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   121e2:	2002      	movs	r0, #2
   121e4:	e7fc      	b.n	121e0 <os_time_ms_to_ticks+0x20>
	...

000121e8 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   121e8:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   121ec:	4832      	ldr	r0, [pc, #200]	; (122b8 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   121ee:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   121f0:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   121f2:	f380 8814 	msr	CONTROL, r0
        ISB
   121f6:	f3bf 8f6f 	isb	sy
        BX      LR
   121fa:	4770      	bx	lr

000121fc <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   121fc:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   12200:	4770      	bx	lr

00012202 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   12202:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   12206:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   12208:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1220c:	b951      	cbnz	r1, 12224 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1220e:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   12212:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   12214:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   12216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1221a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1221e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   12222:	4770      	bx	lr

00012224 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   12224:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   12226:	4a25      	ldr	r2, [pc, #148]	; (122bc <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   12228:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1222a:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1222c:	d809      	bhi.n	12242 <SVC_Done>

        LDR     R4,=SVC_Table-4
   1222e:	4c24      	ldr	r4, [pc, #144]	; (122c0 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   12230:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   12234:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   12238:	47a0      	blx	r4

        MRS     R12,PSP
   1223a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1223e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

00012242 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   12242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   12246:	4770      	bx	lr

00012248 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   12248:	4b1e      	ldr	r3, [pc, #120]	; (122c4 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1224a:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1224c:	4b1e      	ldr	r3, [pc, #120]	; (122c8 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1224e:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   12250:	4291      	cmp	r1, r2
        IT      EQ
   12252:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   12254:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   12256:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1225a:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1225e:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   12260:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   12264:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   12268:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1226c:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1226e:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   12272:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   12276:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1227a:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1227c:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   12280:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   12284:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   12288:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1228c:	4770      	bx	lr

0001228e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1228e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   12290:	f7fe f8ca 	bl	10428 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   12294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   12298:	4770      	bx	lr

0001229a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1229a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1229e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   122a0:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   122a4:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   122a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   122ac:	4668      	mov	r0, sp
        BL      os_default_irq
   122ae:	f7fe f9bb 	bl	10628 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   122b2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   122b6:	4770      	bx	lr
        LDR     R0,=os_flags
   122b8:	20000620 	.word	0x20000620
        LDR     R2,=SVC_Count
   122bc:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   122c0:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   122c4:	2000018c 	.word	0x2000018c
        LDR     R3,=g_current_task      /* Get current task */
   122c8:	20003d2c 	.word	0x20003d2c

000122cc <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
   122cc:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
   122ce:	4802      	ldr	r0, [pc, #8]	; (122d8 <lrand48+0xc>)
   122d0:	f000 fc52 	bl	12b78 <jrand48>
}
   122d4:	0840      	lsrs	r0, r0, #1
   122d6:	bd08      	pop	{r3, pc}
   122d8:	20003d44 	.word	0x20003d44

000122dc <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   122dc:	2001      	movs	r0, #1
   122de:	4770      	bx	lr

000122e0 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   122e0:	4770      	bx	lr

000122e2 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   122e2:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   122e4:	f101 0320 	add.w	r3, r1, #32
   122e8:	4293      	cmp	r3, r2
   122ea:	d907      	bls.n	122fc <__malloc_from_block+0x1a>
        nfp->next_free = fpn = fp->next_free;
        nfp->prev_free = fpp = fp->prev_free;
        fpn->prev_free = nfp;
        fpp->next_free = nfp;
    } else {
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   122ec:	2300      	movs	r3, #0
   122ee:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   122f0:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   122f2:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   122f4:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   122f6:	615a      	str	r2, [r3, #20]
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   122f8:	3010      	adds	r0, #16
   122fa:	4770      	bx	lr
{
   122fc:	b430      	push	{r4, r5}
        nfp = (struct free_arena_header *)((char *)fp + size);
   122fe:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   12300:	6884      	ldr	r4, [r0, #8]
        nfp->a.type = ARENA_TYPE_FREE;
   12302:	2501      	movs	r5, #1
   12304:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   12306:	1a52      	subs	r2, r2, r1
   12308:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   1230a:	2200      	movs	r2, #0
   1230c:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   1230e:	6041      	str	r1, [r0, #4]
        nfp->a.prev = fp;
   12310:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   12312:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   12314:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   12316:	6083      	str	r3, [r0, #8]
        nfp->next_free = fpn = fp->next_free;
   12318:	6901      	ldr	r1, [r0, #16]
   1231a:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   1231c:	6942      	ldr	r2, [r0, #20]
   1231e:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   12320:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   12322:	6113      	str	r3, [r2, #16]
}
   12324:	3010      	adds	r0, #16
   12326:	bc30      	pop	{r4, r5}
   12328:	4770      	bx	lr
	...

0001232c <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   1232c:	b410      	push	{r4}
   1232e:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   12330:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   12332:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   12334:	6802      	ldr	r2, [r0, #0]
   12336:	2a01      	cmp	r2, #1
   12338:	d00f      	beq.n	1235a <__free_block+0x2e>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   1233a:	2201      	movs	r2, #1
   1233c:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   1233e:	4a14      	ldr	r2, [pc, #80]	; (12390 <__free_block+0x64>)
   12340:	6910      	ldr	r0, [r2, #16]
   12342:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   12344:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   12346:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   12348:	691a      	ldr	r2, [r3, #16]
   1234a:	6153      	str	r3, [r2, #20]
   1234c:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   1234e:	680b      	ldr	r3, [r1, #0]
   12350:	2b01      	cmp	r3, #1
   12352:	d00c      	beq.n	1236e <__free_block+0x42>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   12354:	f85d 4b04 	ldr.w	r4, [sp], #4
   12358:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   1235a:	6842      	ldr	r2, [r0, #4]
   1235c:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   1235e:	429c      	cmp	r4, r3
   12360:	d1eb      	bne.n	1233a <__free_block+0xe>
        pah->a.size += ah->a.size;
   12362:	685b      	ldr	r3, [r3, #4]
   12364:	441a      	add	r2, r3
   12366:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   12368:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   1236a:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   1236c:	e7ef      	b.n	1234e <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   1236e:	6843      	ldr	r3, [r0, #4]
   12370:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   12372:	428a      	cmp	r2, r1
   12374:	d1ee      	bne.n	12354 <__free_block+0x28>
        ah->a.size += nah->a.size;
   12376:	684a      	ldr	r2, [r1, #4]
   12378:	4413      	add	r3, r2
   1237a:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   1237c:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   1237e:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   12380:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   12382:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   12384:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   12386:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   12388:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   1238a:	60da      	str	r2, [r3, #12]
    return ah;
   1238c:	e7e2      	b.n	12354 <__free_block+0x28>
   1238e:	bf00      	nop
   12390:	2000019c 	.word	0x2000019c

00012394 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   12394:	2917      	cmp	r1, #23
   12396:	d91e      	bls.n	123d6 <add_malloc_block+0x42>
{
   12398:	b510      	push	{r4, lr}
   1239a:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   1239c:	2301      	movs	r3, #1
   1239e:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   123a0:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   123a2:	4b0d      	ldr	r3, [pc, #52]	; (123d8 <add_malloc_block+0x44>)
   123a4:	681b      	ldr	r3, [r3, #0]
   123a6:	4798      	blx	r3
   123a8:	b1a0      	cbz	r0, 123d4 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   123aa:	4b0c      	ldr	r3, [pc, #48]	; (123dc <add_malloc_block+0x48>)
   123ac:	68db      	ldr	r3, [r3, #12]
   123ae:	681a      	ldr	r2, [r3, #0]
   123b0:	2a02      	cmp	r2, #2
   123b2:	d003      	beq.n	123bc <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   123b4:	42a3      	cmp	r3, r4
   123b6:	d301      	bcc.n	123bc <add_malloc_block+0x28>
         pah = pah->a.prev) {
   123b8:	68db      	ldr	r3, [r3, #12]
   123ba:	e7f8      	b.n	123ae <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   123bc:	689a      	ldr	r2, [r3, #8]
   123be:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   123c0:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   123c2:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   123c4:	68a3      	ldr	r3, [r4, #8]
   123c6:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   123c8:	4620      	mov	r0, r4
   123ca:	f7ff ffaf 	bl	1232c <__free_block>

    malloc_unlock();
   123ce:	4b04      	ldr	r3, [pc, #16]	; (123e0 <add_malloc_block+0x4c>)
   123d0:	681b      	ldr	r3, [r3, #0]
   123d2:	4798      	blx	r3
}
   123d4:	bd10      	pop	{r4, pc}
   123d6:	4770      	bx	lr
   123d8:	200001b4 	.word	0x200001b4
   123dc:	2000019c 	.word	0x2000019c
   123e0:	200001b8 	.word	0x200001b8

000123e4 <malloc>:
{
   123e4:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   123e6:	1e43      	subs	r3, r0, #1
   123e8:	f113 0f12 	cmn.w	r3, #18
   123ec:	d826      	bhi.n	1243c <malloc+0x58>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   123ee:	f100 041f 	add.w	r4, r0, #31
   123f2:	f024 040f 	bic.w	r4, r4, #15
    if (!malloc_lock())
   123f6:	4b13      	ldr	r3, [pc, #76]	; (12444 <malloc+0x60>)
   123f8:	681b      	ldr	r3, [r3, #0]
   123fa:	4798      	blx	r3
   123fc:	b300      	cbz	r0, 12440 <malloc+0x5c>
    void *result = NULL;
   123fe:	2500      	movs	r5, #0
   12400:	e00d      	b.n	1241e <malloc+0x3a>
            result = __malloc_from_block(fp, size);
   12402:	4621      	mov	r1, r4
   12404:	f7ff ff6d 	bl	122e2 <__malloc_from_block>
   12408:	4605      	mov	r5, r0
    if (result == NULL) {
   1240a:	b995      	cbnz	r5, 12432 <malloc+0x4e>
        more_mem = _sbrk(size);
   1240c:	4620      	mov	r0, r4
   1240e:	f7f5 feb3 	bl	8178 <_sbrk>
        if (more_mem != (void *)-1) {
   12412:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   12416:	d00c      	beq.n	12432 <malloc+0x4e>
            add_malloc_block(more_mem, size);
   12418:	4621      	mov	r1, r4
   1241a:	f7ff ffbb 	bl	12394 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   1241e:	4b0a      	ldr	r3, [pc, #40]	; (12448 <malloc+0x64>)
   12420:	6918      	ldr	r0, [r3, #16]
   12422:	6803      	ldr	r3, [r0, #0]
   12424:	2b02      	cmp	r3, #2
   12426:	d0f0      	beq.n	1240a <malloc+0x26>
        if (fp->a.size >= size) {
   12428:	6843      	ldr	r3, [r0, #4]
   1242a:	42a3      	cmp	r3, r4
   1242c:	d2e9      	bcs.n	12402 <malloc+0x1e>
         fp = fp->next_free) {
   1242e:	6900      	ldr	r0, [r0, #16]
   12430:	e7f7      	b.n	12422 <malloc+0x3e>
    malloc_unlock();
   12432:	4b06      	ldr	r3, [pc, #24]	; (1244c <malloc+0x68>)
   12434:	681b      	ldr	r3, [r3, #0]
   12436:	4798      	blx	r3
}
   12438:	4628      	mov	r0, r5
   1243a:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   1243c:	2500      	movs	r5, #0
   1243e:	e7fb      	b.n	12438 <malloc+0x54>
        return NULL;
   12440:	2500      	movs	r5, #0
   12442:	e7f9      	b.n	12438 <malloc+0x54>
   12444:	200001b4 	.word	0x200001b4
   12448:	2000019c 	.word	0x2000019c
   1244c:	200001b8 	.word	0x200001b8

00012450 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   12450:	b170      	cbz	r0, 12470 <free+0x20>
{
   12452:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   12454:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   12458:	4b06      	ldr	r3, [pc, #24]	; (12474 <free+0x24>)
   1245a:	681b      	ldr	r3, [r3, #0]
   1245c:	4798      	blx	r3
   1245e:	b900      	cbnz	r0, 12462 <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   12460:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   12462:	4620      	mov	r0, r4
   12464:	f7ff ff62 	bl	1232c <__free_block>
    malloc_unlock();
   12468:	4b03      	ldr	r3, [pc, #12]	; (12478 <free+0x28>)
   1246a:	681b      	ldr	r3, [r3, #0]
   1246c:	4798      	blx	r3
   1246e:	e7f7      	b.n	12460 <free+0x10>
   12470:	4770      	bx	lr
   12472:	bf00      	nop
   12474:	200001b4 	.word	0x200001b4
   12478:	200001b8 	.word	0x200001b8

0001247c <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1247c:	b470      	push	{r4, r5, r6}
   1247e:	f04f 0500 	mov.w	r5, #0
   12482:	f022 0603 	bic.w	r6, r2, #3
   12486:	e005      	b.n	12494 <test1>

00012488 <loop1>:
   12488:	5943      	ldr	r3, [r0, r5]
   1248a:	594c      	ldr	r4, [r1, r5]
   1248c:	42a3      	cmp	r3, r4
   1248e:	d104      	bne.n	1249a <res1>
   12490:	f105 0504 	add.w	r5, r5, #4

00012494 <test1>:
   12494:	42b5      	cmp	r5, r6
   12496:	d1f7      	bne.n	12488 <loop1>
   12498:	e00d      	b.n	124b6 <test2>

0001249a <res1>:
   1249a:	ba1b      	rev	r3, r3
   1249c:	ba24      	rev	r4, r4
   1249e:	1b1b      	subs	r3, r3, r4
   124a0:	bf8c      	ite	hi
   124a2:	2301      	movhi	r3, #1
   124a4:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   124a8:	e009      	b.n	124be <done>

000124aa <loop2>:
   124aa:	5d43      	ldrb	r3, [r0, r5]
   124ac:	5d4c      	ldrb	r4, [r1, r5]
   124ae:	1b1b      	subs	r3, r3, r4
   124b0:	d105      	bne.n	124be <done>
   124b2:	f105 0501 	add.w	r5, r5, #1

000124b6 <test2>:
   124b6:	4295      	cmp	r5, r2
   124b8:	d1f7      	bne.n	124aa <loop2>
   124ba:	f04f 0300 	mov.w	r3, #0

000124be <done>:
   124be:	4618      	mov	r0, r3
   124c0:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   124c2:	4770      	bx	lr

000124c4 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   124c4:	e001      	b.n	124ca <test1>

000124c6 <loop1>:
   124c6:	588b      	ldr	r3, [r1, r2]
   124c8:	5083      	str	r3, [r0, r2]

000124ca <test1>:
   124ca:	3a04      	subs	r2, #4
   124cc:	d5fb      	bpl.n	124c6 <loop1>
   124ce:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   124d2:	e001      	b.n	124d8 <test2>

000124d4 <loop2>:
   124d4:	5c8b      	ldrb	r3, [r1, r2]
   124d6:	5483      	strb	r3, [r0, r2]

000124d8 <test2>:
   124d8:	3a01      	subs	r2, #1
   124da:	d5fb      	bpl.n	124d4 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   124dc:	4770      	bx	lr

000124de <memmove>:
 */

#include <string.h>

void *memmove(void *dst, const void *src, size_t n)
{
   124de:	b410      	push	{r4}
		q += (n - 1);
		asm volatile("std; rep; movsb; cld"
			     : "+c" (n), "+S"(p), "+D"(q));
	}
#else
	if (q < p) {
   124e0:	4281      	cmp	r1, r0
   124e2:	d80d      	bhi.n	12500 <memmove+0x22>
		while (n--) {
			*q++ = *p++;
		}
	} else {
		p += n;
   124e4:	4411      	add	r1, r2
		q += n;
   124e6:	1883      	adds	r3, r0, r2
		while (n--) {
   124e8:	e011      	b.n	1250e <memmove+0x30>
			*q++ = *p++;
   124ea:	780a      	ldrb	r2, [r1, #0]
   124ec:	701a      	strb	r2, [r3, #0]
   124ee:	3301      	adds	r3, #1
   124f0:	3101      	adds	r1, #1
		while (n--) {
   124f2:	4622      	mov	r2, r4
   124f4:	1e54      	subs	r4, r2, #1
   124f6:	2a00      	cmp	r2, #0
   124f8:	d1f7      	bne.n	124ea <memmove+0xc>
		}
	}
#endif

	return dst;
}
   124fa:	f85d 4b04 	ldr.w	r4, [sp], #4
   124fe:	4770      	bx	lr
	char *q = dst;
   12500:	4603      	mov	r3, r0
   12502:	e7f7      	b.n	124f4 <memmove+0x16>
			*--q = *--p;
   12504:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
   12508:	f803 2d01 	strb.w	r2, [r3, #-1]!
		while (n--) {
   1250c:	4622      	mov	r2, r4
   1250e:	1e54      	subs	r4, r2, #1
   12510:	2a00      	cmp	r2, #0
   12512:	d1f7      	bne.n	12504 <memmove+0x26>
   12514:	e7f1      	b.n	124fa <memmove+0x1c>

00012516 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   12516:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   12518:	4605      	mov	r5, r0
   1251a:	b2c9      	uxtb	r1, r1
   1251c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   12520:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   12524:	18ab      	adds	r3, r5, r2
   12526:	2403      	movs	r4, #3
   12528:	4023      	ands	r3, r4
   1252a:	1ad3      	subs	r3, r2, r3
   1252c:	d40b      	bmi.n	12546 <memset+0x30>
   1252e:	e001      	b.n	12534 <memset+0x1e>
   12530:	3a01      	subs	r2, #1
   12532:	54a9      	strb	r1, [r5, r2]
   12534:	429a      	cmp	r2, r3
   12536:	d1fb      	bne.n	12530 <memset+0x1a>
   12538:	e000      	b.n	1253c <memset+0x26>
   1253a:	50a9      	str	r1, [r5, r2]
   1253c:	3a04      	subs	r2, #4
   1253e:	d5fc      	bpl.n	1253a <memset+0x24>
   12540:	3204      	adds	r2, #4
   12542:	e000      	b.n	12546 <memset+0x30>
   12544:	54a9      	strb	r1, [r5, r2]
   12546:	3a01      	subs	r2, #1
   12548:	d5fc      	bpl.n	12544 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1254a:	bc30      	pop	{r4, r5}
   1254c:	4770      	bx	lr

0001254e <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1254e:	b40e      	push	{r1, r2, r3}
   12550:	b500      	push	{lr}
   12552:	b082      	sub	sp, #8
   12554:	ab03      	add	r3, sp, #12
   12556:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1255a:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1255c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12560:	f000 fae2 	bl	12b28 <vsnprintf>
	va_end(ap);

	return rv;
}
   12564:	b002      	add	sp, #8
   12566:	f85d eb04 	ldr.w	lr, [sp], #4
   1256a:	b003      	add	sp, #12
   1256c:	4770      	bx	lr
	...

00012570 <srand48>:

unsigned short __rand48_seed[3];	/* Common with mrand48.c, lrand48.c */

void srand48(long seedval)
{
	__rand48_seed[0] = 0x330e;
   12570:	4b03      	ldr	r3, [pc, #12]	; (12580 <srand48+0x10>)
   12572:	f243 320e 	movw	r2, #13070	; 0x330e
   12576:	801a      	strh	r2, [r3, #0]
	__rand48_seed[1] = (unsigned short)seedval;
   12578:	8058      	strh	r0, [r3, #2]
	__rand48_seed[2] = (unsigned short)((uint32_t) seedval >> 16);
   1257a:	0c00      	lsrs	r0, r0, #16
   1257c:	8098      	strh	r0, [r3, #4]
}
   1257e:	4770      	bx	lr
   12580:	20003d44 	.word	0x20003d44

00012584 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   12584:	b430      	push	{r4, r5}
   12586:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   12588:	1c55      	adds	r5, r2, #1
   1258a:	7813      	ldrb	r3, [r2, #0]
   1258c:	1c4c      	adds	r4, r1, #1
   1258e:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   12590:	1a18      	subs	r0, r3, r0
   12592:	d103      	bne.n	1259c <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   12594:	462a      	mov	r2, r5
   12596:	4621      	mov	r1, r4
		if (d || !ch)
   12598:	2b00      	cmp	r3, #0
   1259a:	d1f5      	bne.n	12588 <strcmp+0x4>
			break;
	}

	return d;
}
   1259c:	bc30      	pop	{r4, r5}
   1259e:	4770      	bx	lr

000125a0 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   125a0:	4603      	mov	r3, r0
	while (*ss)
   125a2:	e000      	b.n	125a6 <strlen+0x6>
		ss++;
   125a4:	3301      	adds	r3, #1
	while (*ss)
   125a6:	781a      	ldrb	r2, [r3, #0]
   125a8:	2a00      	cmp	r2, #0
   125aa:	d1fb      	bne.n	125a4 <strlen+0x4>
	return ss - s;
}
   125ac:	1a18      	subs	r0, r3, r0
   125ae:	4770      	bx	lr

000125b0 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   125b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   125b4:	b082      	sub	sp, #8
   125b6:	e9cd 0100 	strd	r0, r1, [sp]
   125ba:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   125bc:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   125c0:	2401      	movs	r4, #1
   125c2:	2500      	movs	r5, #0
    while (num / d >= p->base)
   125c4:	e004      	b.n	125d0 <ui2a+0x20>
        d *= p->base;
   125c6:	fb06 f305 	mul.w	r3, r6, r5
   125ca:	fba4 4506 	umull	r4, r5, r4, r6
   125ce:	441d      	add	r5, r3
    while (num / d >= p->base)
   125d0:	4622      	mov	r2, r4
   125d2:	462b      	mov	r3, r5
   125d4:	e9dd 0100 	ldrd	r0, r1, [sp]
   125d8:	f017 f9ec 	bl	299b4 <__aeabi_uldivmod>
   125dc:	f899 6003 	ldrb.w	r6, [r9, #3]
   125e0:	2700      	movs	r7, #0
   125e2:	42b9      	cmp	r1, r7
   125e4:	bf08      	it	eq
   125e6:	42b0      	cmpeq	r0, r6
   125e8:	d2ed      	bcs.n	125c6 <ui2a+0x16>
    int n = 0;
   125ea:	f04f 0a00 	mov.w	sl, #0
   125ee:	e007      	b.n	12600 <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   125f0:	2330      	movs	r3, #48	; 0x30
   125f2:	441e      	add	r6, r3
   125f4:	f888 6000 	strb.w	r6, [r8]
            ++n;
   125f8:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   125fc:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   12600:	ea54 0305 	orrs.w	r3, r4, r5
   12604:	d02e      	beq.n	12664 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   12606:	4622      	mov	r2, r4
   12608:	462b      	mov	r3, r5
   1260a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1260e:	f017 f9d1 	bl	299b4 <__aeabi_uldivmod>
   12612:	4606      	mov	r6, r0
   12614:	460f      	mov	r7, r1
        num %= d;
   12616:	4622      	mov	r2, r4
   12618:	462b      	mov	r3, r5
   1261a:	e9dd 0100 	ldrd	r0, r1, [sp]
   1261e:	f017 f9c9 	bl	299b4 <__aeabi_uldivmod>
   12622:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   12626:	f899 2003 	ldrb.w	r2, [r9, #3]
   1262a:	2300      	movs	r3, #0
   1262c:	4620      	mov	r0, r4
   1262e:	4629      	mov	r1, r5
   12630:	f017 f9c0 	bl	299b4 <__aeabi_uldivmod>
   12634:	4604      	mov	r4, r0
   12636:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   12638:	f1ba 0f00 	cmp.w	sl, #0
   1263c:	d105      	bne.n	1264a <ui2a+0x9a>
   1263e:	ea56 0307 	orrs.w	r3, r6, r7
   12642:	d102      	bne.n	1264a <ui2a+0x9a>
   12644:	ea54 0305 	orrs.w	r3, r4, r5
   12648:	d1da      	bne.n	12600 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1264a:	2f00      	cmp	r7, #0
   1264c:	bf08      	it	eq
   1264e:	2e0a      	cmpeq	r6, #10
   12650:	d3ce      	bcc.n	125f0 <ui2a+0x40>
   12652:	f899 3002 	ldrb.w	r3, [r9, #2]
   12656:	f013 0f04 	tst.w	r3, #4
   1265a:	d001      	beq.n	12660 <ui2a+0xb0>
   1265c:	2337      	movs	r3, #55	; 0x37
   1265e:	e7c8      	b.n	125f2 <ui2a+0x42>
   12660:	2357      	movs	r3, #87	; 0x57
   12662:	e7c6      	b.n	125f2 <ui2a+0x42>
        }
    }
    *bf = 0;
   12664:	2300      	movs	r3, #0
   12666:	f888 3000 	strb.w	r3, [r8]
}
   1266a:	b002      	add	sp, #8
   1266c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00012670 <i2a>:

static void i2a(long long int num, struct param *p)
{
   12670:	b508      	push	{r3, lr}
    if (num < 0) {
   12672:	2800      	cmp	r0, #0
   12674:	f171 0300 	sbcs.w	r3, r1, #0
   12678:	db02      	blt.n	12680 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1267a:	f7ff ff99 	bl	125b0 <ui2a>
}
   1267e:	bd08      	pop	{r3, pc}
        num = -num;
   12680:	4240      	negs	r0, r0
   12682:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   12686:	7893      	ldrb	r3, [r2, #2]
   12688:	f043 0301 	orr.w	r3, r3, #1
   1268c:	7093      	strb	r3, [r2, #2]
   1268e:	e7f4      	b.n	1267a <i2a+0xa>

00012690 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   12690:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   12694:	b2db      	uxtb	r3, r3
   12696:	2b09      	cmp	r3, #9
   12698:	d90b      	bls.n	126b2 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1269a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1269e:	b2db      	uxtb	r3, r3
   126a0:	2b05      	cmp	r3, #5
   126a2:	d908      	bls.n	126b6 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   126a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   126a8:	b2db      	uxtb	r3, r3
   126aa:	2b05      	cmp	r3, #5
   126ac:	d805      	bhi.n	126ba <a2d+0x2a>
        return ch - 'A' + 10;
   126ae:	3837      	subs	r0, #55	; 0x37
   126b0:	4770      	bx	lr
        return ch - '0';
   126b2:	3830      	subs	r0, #48	; 0x30
   126b4:	4770      	bx	lr
        return ch - 'a' + 10;
   126b6:	3857      	subs	r0, #87	; 0x57
   126b8:	4770      	bx	lr
    else
        return -1;
   126ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   126be:	4770      	bx	lr

000126c0 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   126c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   126c4:	4605      	mov	r5, r0
   126c6:	4688      	mov	r8, r1
   126c8:	4617      	mov	r7, r2
   126ca:	4699      	mov	r9, r3
    const char *p = *src;
   126cc:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   126ce:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   126d0:	4628      	mov	r0, r5
   126d2:	f7ff ffdd 	bl	12690 <a2d>
   126d6:	2800      	cmp	r0, #0
   126d8:	db06      	blt.n	126e8 <a2i+0x28>
        if (digit > base)
   126da:	42b8      	cmp	r0, r7
   126dc:	dc04      	bgt.n	126e8 <a2i+0x28>
            break;
        num = num * base + digit;
   126de:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   126e2:	7825      	ldrb	r5, [r4, #0]
   126e4:	3401      	adds	r4, #1
   126e6:	e7f3      	b.n	126d0 <a2i+0x10>
    }
    *src = p;
   126e8:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   126ec:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   126f0:	4628      	mov	r0, r5
   126f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000126f6 <putf>:

static int putf(FILE *putp, char c)
{
   126f6:	b500      	push	{lr}
   126f8:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   126fa:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   126fe:	6803      	ldr	r3, [r0, #0]
   12700:	681b      	ldr	r3, [r3, #0]
   12702:	b14b      	cbz	r3, 12718 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   12704:	2201      	movs	r2, #1
   12706:	f10d 0107 	add.w	r1, sp, #7
   1270a:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1270c:	2801      	cmp	r0, #1
   1270e:	d005      	beq.n	1271c <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   12710:	2000      	movs	r0, #0
    else
        return 1;
}
   12712:	b003      	add	sp, #12
   12714:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   12718:	2000      	movs	r0, #0
   1271a:	e7fa      	b.n	12712 <putf+0x1c>
        return 1;
   1271c:	2001      	movs	r0, #1
   1271e:	e7f8      	b.n	12712 <putf+0x1c>

00012720 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   12720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12724:	4606      	mov	r6, r0
   12726:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   12728:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1272a:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1272c:	e001      	b.n	12732 <putchw+0x12>
        n--;
   1272e:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   12730:	4613      	mov	r3, r2
   12732:	1c5a      	adds	r2, r3, #1
   12734:	781b      	ldrb	r3, [r3, #0]
   12736:	b10b      	cbz	r3, 1273c <putchw+0x1c>
   12738:	2c00      	cmp	r4, #0
   1273a:	dcf8      	bgt.n	1272e <putchw+0xe>
    if (p->sign)
   1273c:	78bb      	ldrb	r3, [r7, #2]
   1273e:	f013 0f01 	tst.w	r3, #1
   12742:	d000      	beq.n	12746 <putchw+0x26>
        n--;
   12744:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   12746:	887b      	ldrh	r3, [r7, #2]
   12748:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1274c:	b29b      	uxth	r3, r3
   1274e:	f241 0202 	movw	r2, #4098	; 0x1002
   12752:	4293      	cmp	r3, r2
   12754:	d01c      	beq.n	12790 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   12756:	f640 0202 	movw	r2, #2050	; 0x802
   1275a:	4293      	cmp	r3, r2
   1275c:	d01a      	beq.n	12794 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1275e:	683b      	ldr	r3, [r7, #0]
   12760:	4d35      	ldr	r5, [pc, #212]	; (12838 <putchw+0x118>)
   12762:	401d      	ands	r5, r3
   12764:	b1f5      	cbz	r5, 127a4 <putchw+0x84>
    unsigned written = 0;
   12766:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   12768:	78bb      	ldrb	r3, [r7, #2]
   1276a:	f013 0f01 	tst.w	r3, #1
   1276e:	d11f      	bne.n	127b0 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   12770:	887b      	ldrh	r3, [r7, #2]
   12772:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   12776:	b29b      	uxth	r3, r3
   12778:	f241 0202 	movw	r2, #4098	; 0x1002
   1277c:	4293      	cmp	r3, r2
   1277e:	d01d      	beq.n	127bc <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   12780:	f640 0202 	movw	r2, #2050	; 0x802
   12784:	4293      	cmp	r3, r2
   12786:	d02a      	beq.n	127de <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   12788:	787b      	ldrb	r3, [r7, #1]
   1278a:	bba3      	cbnz	r3, 127f6 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1278c:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1278e:	e03d      	b.n	1280c <putchw+0xec>
        n -= 2;
   12790:	3c02      	subs	r4, #2
   12792:	e7e4      	b.n	1275e <putchw+0x3e>
        n--;
   12794:	3c01      	subs	r4, #1
   12796:	e7e2      	b.n	1275e <putchw+0x3e>
            written += putf(putp, ' ');
   12798:	2120      	movs	r1, #32
   1279a:	4630      	mov	r0, r6
   1279c:	f7ff ffab 	bl	126f6 <putf>
   127a0:	4405      	add	r5, r0
        while (n-- > 0)
   127a2:	4644      	mov	r4, r8
   127a4:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   127a8:	2c00      	cmp	r4, #0
   127aa:	dcf5      	bgt.n	12798 <putchw+0x78>
   127ac:	4644      	mov	r4, r8
   127ae:	e7db      	b.n	12768 <putchw+0x48>
        written += putf(putp, '-');
   127b0:	212d      	movs	r1, #45	; 0x2d
   127b2:	4630      	mov	r0, r6
   127b4:	f7ff ff9f 	bl	126f6 <putf>
   127b8:	4405      	add	r5, r0
   127ba:	e7d9      	b.n	12770 <putchw+0x50>
        written += putf(putp, '0');
   127bc:	2130      	movs	r1, #48	; 0x30
   127be:	4630      	mov	r0, r6
   127c0:	f7ff ff99 	bl	126f6 <putf>
   127c4:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   127c6:	78bb      	ldrb	r3, [r7, #2]
   127c8:	f013 0f04 	tst.w	r3, #4
   127cc:	d005      	beq.n	127da <putchw+0xba>
   127ce:	2158      	movs	r1, #88	; 0x58
   127d0:	4630      	mov	r0, r6
   127d2:	f7ff ff90 	bl	126f6 <putf>
   127d6:	4405      	add	r5, r0
   127d8:	e7d6      	b.n	12788 <putchw+0x68>
   127da:	2178      	movs	r1, #120	; 0x78
   127dc:	e7f8      	b.n	127d0 <putchw+0xb0>
        written += putf(putp, '0');
   127de:	2130      	movs	r1, #48	; 0x30
   127e0:	4630      	mov	r0, r6
   127e2:	f7ff ff88 	bl	126f6 <putf>
   127e6:	4405      	add	r5, r0
   127e8:	e7ce      	b.n	12788 <putchw+0x68>
            written += putf(putp, '0');
   127ea:	2130      	movs	r1, #48	; 0x30
   127ec:	4630      	mov	r0, r6
   127ee:	f7ff ff82 	bl	126f6 <putf>
   127f2:	4405      	add	r5, r0
        while (n-- > 0)
   127f4:	4644      	mov	r4, r8
   127f6:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   127fa:	2c00      	cmp	r4, #0
   127fc:	dcf5      	bgt.n	127ea <putchw+0xca>
   127fe:	4644      	mov	r4, r8
   12800:	e7c4      	b.n	1278c <putchw+0x6c>
        written += putf(putp, ch);
   12802:	4630      	mov	r0, r6
   12804:	f7ff ff77 	bl	126f6 <putf>
   12808:	4405      	add	r5, r0
    while ((ch = *bf++))
   1280a:	4643      	mov	r3, r8
   1280c:	f103 0801 	add.w	r8, r3, #1
   12810:	7819      	ldrb	r1, [r3, #0]
   12812:	2900      	cmp	r1, #0
   12814:	d1f5      	bne.n	12802 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   12816:	78bb      	ldrb	r3, [r7, #2]
   12818:	f013 0f08 	tst.w	r3, #8
   1281c:	d106      	bne.n	1282c <putchw+0x10c>
   1281e:	e008      	b.n	12832 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   12820:	2120      	movs	r1, #32
   12822:	4630      	mov	r0, r6
   12824:	f7ff ff67 	bl	126f6 <putf>
   12828:	4405      	add	r5, r0
        while (n-- > 0)
   1282a:	463c      	mov	r4, r7
   1282c:	1e67      	subs	r7, r4, #1
   1282e:	2c00      	cmp	r4, #0
   12830:	dcf6      	bgt.n	12820 <putchw+0x100>
    }
    
    return written;
}
   12832:	4628      	mov	r0, r5
   12834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12838:	0008ff00 	.word	0x0008ff00

0001283c <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1283c:	b160      	cbz	r0, 12858 <intarg+0x1c>
   1283e:	2801      	cmp	r0, #1
   12840:	d017      	beq.n	12872 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   12842:	bb19      	cbnz	r1, 1288c <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   12844:	6813      	ldr	r3, [r2, #0]
   12846:	3307      	adds	r3, #7
   12848:	f023 0307 	bic.w	r3, r3, #7
   1284c:	f103 0108 	add.w	r1, r3, #8
   12850:	6011      	str	r1, [r2, #0]
   12852:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   12856:	4770      	bx	lr
        if (sign) {
   12858:	b129      	cbz	r1, 12866 <intarg+0x2a>
            val = va_arg(*va, int);
   1285a:	6813      	ldr	r3, [r2, #0]
   1285c:	1d19      	adds	r1, r3, #4
   1285e:	6011      	str	r1, [r2, #0]
   12860:	6818      	ldr	r0, [r3, #0]
   12862:	17c1      	asrs	r1, r0, #31
   12864:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   12866:	6813      	ldr	r3, [r2, #0]
   12868:	1d19      	adds	r1, r3, #4
   1286a:	6011      	str	r1, [r2, #0]
   1286c:	6818      	ldr	r0, [r3, #0]
   1286e:	2100      	movs	r1, #0
   12870:	4770      	bx	lr
        if (sign) {
   12872:	b129      	cbz	r1, 12880 <intarg+0x44>
            val = va_arg(*va, long);
   12874:	6813      	ldr	r3, [r2, #0]
   12876:	1d19      	adds	r1, r3, #4
   12878:	6011      	str	r1, [r2, #0]
   1287a:	6818      	ldr	r0, [r3, #0]
   1287c:	17c1      	asrs	r1, r0, #31
   1287e:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   12880:	6813      	ldr	r3, [r2, #0]
   12882:	1d19      	adds	r1, r3, #4
   12884:	6011      	str	r1, [r2, #0]
   12886:	6818      	ldr	r0, [r3, #0]
   12888:	2100      	movs	r1, #0
   1288a:	4770      	bx	lr
            val = va_arg(*va, long long);
   1288c:	6813      	ldr	r3, [r2, #0]
   1288e:	3307      	adds	r3, #7
   12890:	f023 0307 	bic.w	r3, r3, #7
   12894:	f103 0108 	add.w	r1, r3, #8
   12898:	6011      	str	r1, [r2, #0]
   1289a:	e9d3 0100 	ldrd	r0, r1, [r3]
   1289e:	4770      	bx	lr

000128a0 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   128a0:	b570      	push	{r4, r5, r6, lr}
   128a2:	b08a      	sub	sp, #40	; 0x28
   128a4:	4605      	mov	r5, r0
   128a6:	9101      	str	r1, [sp, #4]
   128a8:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   128aa:	ab02      	add	r3, sp, #8
   128ac:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   128ae:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   128b0:	9b01      	ldr	r3, [sp, #4]
   128b2:	1c5a      	adds	r2, r3, #1
   128b4:	9201      	str	r2, [sp, #4]
   128b6:	7819      	ldrb	r1, [r3, #0]
   128b8:	2900      	cmp	r1, #0
   128ba:	f000 811c 	beq.w	12af6 <tfp_format+0x256>
        if (ch != '%') {
   128be:	2925      	cmp	r1, #37	; 0x25
   128c0:	d004      	beq.n	128cc <tfp_format+0x2c>
            written += putf(putp, ch);
   128c2:	4628      	mov	r0, r5
   128c4:	f7ff ff17 	bl	126f6 <putf>
   128c8:	4404      	add	r4, r0
   128ca:	e7f1      	b.n	128b0 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   128cc:	2200      	movs	r2, #0
   128ce:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   128d2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   128d6:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   128da:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   128de:	f362 0382 	bfi	r3, r2, #2, #1
   128e2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   128e6:	9b01      	ldr	r3, [sp, #4]
   128e8:	1c5a      	adds	r2, r3, #1
   128ea:	9201      	str	r2, [sp, #4]
   128ec:	7818      	ldrb	r0, [r3, #0]
   128ee:	b128      	cbz	r0, 128fc <tfp_format+0x5c>
                switch (ch) {
   128f0:	282d      	cmp	r0, #45	; 0x2d
   128f2:	d04e      	beq.n	12992 <tfp_format+0xf2>
   128f4:	2830      	cmp	r0, #48	; 0x30
   128f6:	d03c      	beq.n	12972 <tfp_format+0xd2>
   128f8:	2823      	cmp	r0, #35	; 0x23
   128fa:	d043      	beq.n	12984 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   128fc:	282a      	cmp	r0, #42	; 0x2a
   128fe:	d052      	beq.n	129a6 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   12900:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   12904:	b2db      	uxtb	r3, r3
   12906:	2b09      	cmp	r3, #9
   12908:	d961      	bls.n	129ce <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1290a:	286c      	cmp	r0, #108	; 0x6c
   1290c:	d065      	beq.n	129da <tfp_format+0x13a>
            lng = 0;
   1290e:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   12910:	287a      	cmp	r0, #122	; 0x7a
   12912:	d06f      	beq.n	129f4 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   12914:	2869      	cmp	r0, #105	; 0x69
   12916:	f000 808e 	beq.w	12a36 <tfp_format+0x196>
   1291a:	d970      	bls.n	129fe <tfp_format+0x15e>
   1291c:	2873      	cmp	r0, #115	; 0x73
   1291e:	f000 80dd 	beq.w	12adc <tfp_format+0x23c>
   12922:	f200 8099 	bhi.w	12a58 <tfp_format+0x1b8>
   12926:	286f      	cmp	r0, #111	; 0x6f
   12928:	f000 80c7 	beq.w	12aba <tfp_format+0x21a>
   1292c:	2870      	cmp	r0, #112	; 0x70
   1292e:	d1bf      	bne.n	128b0 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   12930:	9b00      	ldr	r3, [sp, #0]
   12932:	1d1a      	adds	r2, r3, #4
   12934:	9200      	str	r2, [sp, #0]
   12936:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   12938:	2310      	movs	r3, #16
   1293a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1293e:	aa08      	add	r2, sp, #32
   12940:	2100      	movs	r1, #0
   12942:	f7ff fe35 	bl	125b0 <ui2a>
                p.width = 2 * sizeof(void*);
   12946:	2308      	movs	r3, #8
   12948:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1294c:	2301      	movs	r3, #1
   1294e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   12952:	2130      	movs	r1, #48	; 0x30
   12954:	4628      	mov	r0, r5
   12956:	f7ff fece 	bl	126f6 <putf>
   1295a:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1295c:	2178      	movs	r1, #120	; 0x78
   1295e:	4628      	mov	r0, r5
   12960:	f7ff fec9 	bl	126f6 <putf>
   12964:	4404      	add	r4, r0
                written += putchw(putp, &p);
   12966:	a908      	add	r1, sp, #32
   12968:	4628      	mov	r0, r5
   1296a:	f7ff fed9 	bl	12720 <putchw>
   1296e:	4404      	add	r4, r0
                break;
   12970:	e79e      	b.n	128b0 <tfp_format+0x10>
                    if (!p.left) {
   12972:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   12976:	f013 0f08 	tst.w	r3, #8
   1297a:	d1b4      	bne.n	128e6 <tfp_format+0x46>
                        p.lz = 1;
   1297c:	2301      	movs	r3, #1
   1297e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   12982:	e7b0      	b.n	128e6 <tfp_format+0x46>
                    p.alt = 1;
   12984:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   12988:	f043 0302 	orr.w	r3, r3, #2
   1298c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   12990:	e7a9      	b.n	128e6 <tfp_format+0x46>
                    p.left = 1;
   12992:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   12996:	f043 0308 	orr.w	r3, r3, #8
   1299a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1299e:	2300      	movs	r3, #0
   129a0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   129a4:	e79f      	b.n	128e6 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   129a6:	466a      	mov	r2, sp
   129a8:	2101      	movs	r1, #1
   129aa:	2000      	movs	r0, #0
   129ac:	f7ff ff46 	bl	1283c <intarg>
                if (i > UCHAR_MAX) {
   129b0:	28ff      	cmp	r0, #255	; 0xff
   129b2:	dd07      	ble.n	129c4 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   129b4:	23ff      	movs	r3, #255	; 0xff
   129b6:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   129ba:	9b01      	ldr	r3, [sp, #4]
   129bc:	1c5a      	adds	r2, r3, #1
   129be:	9201      	str	r2, [sp, #4]
   129c0:	7818      	ldrb	r0, [r3, #0]
   129c2:	e7a2      	b.n	1290a <tfp_format+0x6a>
                } else if (i > 0) {
   129c4:	2800      	cmp	r0, #0
   129c6:	ddf8      	ble.n	129ba <tfp_format+0x11a>
                    p.width = i;
   129c8:	f88d 0020 	strb.w	r0, [sp, #32]
   129cc:	e7f5      	b.n	129ba <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   129ce:	ab08      	add	r3, sp, #32
   129d0:	220a      	movs	r2, #10
   129d2:	a901      	add	r1, sp, #4
   129d4:	f7ff fe74 	bl	126c0 <a2i>
   129d8:	e797      	b.n	1290a <tfp_format+0x6a>
                ch = *(fmt++);
   129da:	9b01      	ldr	r3, [sp, #4]
   129dc:	1c5a      	adds	r2, r3, #1
   129de:	9201      	str	r2, [sp, #4]
   129e0:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   129e2:	286c      	cmp	r0, #108	; 0x6c
   129e4:	d001      	beq.n	129ea <tfp_format+0x14a>
                lng = 1;
   129e6:	2601      	movs	r6, #1
   129e8:	e792      	b.n	12910 <tfp_format+0x70>
                    ch = *(fmt++);
   129ea:	1c9a      	adds	r2, r3, #2
   129ec:	9201      	str	r2, [sp, #4]
   129ee:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   129f0:	2602      	movs	r6, #2
   129f2:	e78d      	b.n	12910 <tfp_format+0x70>
                ch = *(fmt++);
   129f4:	9b01      	ldr	r3, [sp, #4]
   129f6:	1c5a      	adds	r2, r3, #1
   129f8:	9201      	str	r2, [sp, #4]
   129fa:	7818      	ldrb	r0, [r3, #0]
   129fc:	e78a      	b.n	12914 <tfp_format+0x74>
            switch (ch) {
   129fe:	2858      	cmp	r0, #88	; 0x58
   12a00:	d040      	beq.n	12a84 <tfp_format+0x1e4>
   12a02:	d80a      	bhi.n	12a1a <tfp_format+0x17a>
   12a04:	2800      	cmp	r0, #0
   12a06:	d076      	beq.n	12af6 <tfp_format+0x256>
   12a08:	2825      	cmp	r0, #37	; 0x25
   12a0a:	f47f af51 	bne.w	128b0 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   12a0e:	4601      	mov	r1, r0
   12a10:	4628      	mov	r0, r5
   12a12:	f7ff fe70 	bl	126f6 <putf>
   12a16:	4404      	add	r4, r0
                break;
   12a18:	e74a      	b.n	128b0 <tfp_format+0x10>
            switch (ch) {
   12a1a:	2863      	cmp	r0, #99	; 0x63
   12a1c:	d108      	bne.n	12a30 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   12a1e:	9b00      	ldr	r3, [sp, #0]
   12a20:	1d1a      	adds	r2, r3, #4
   12a22:	9200      	str	r2, [sp, #0]
   12a24:	7819      	ldrb	r1, [r3, #0]
   12a26:	4628      	mov	r0, r5
   12a28:	f7ff fe65 	bl	126f6 <putf>
   12a2c:	4404      	add	r4, r0
                break;
   12a2e:	e73f      	b.n	128b0 <tfp_format+0x10>
            switch (ch) {
   12a30:	2864      	cmp	r0, #100	; 0x64
   12a32:	f47f af3d 	bne.w	128b0 <tfp_format+0x10>
                p.base = 10;
   12a36:	230a      	movs	r3, #10
   12a38:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   12a3c:	466a      	mov	r2, sp
   12a3e:	2101      	movs	r1, #1
   12a40:	4630      	mov	r0, r6
   12a42:	f7ff fefb 	bl	1283c <intarg>
   12a46:	aa08      	add	r2, sp, #32
   12a48:	f7ff fe12 	bl	12670 <i2a>
                written += putchw(putp, &p);
   12a4c:	a908      	add	r1, sp, #32
   12a4e:	4628      	mov	r0, r5
   12a50:	f7ff fe66 	bl	12720 <putchw>
   12a54:	4404      	add	r4, r0
                break;
   12a56:	e72b      	b.n	128b0 <tfp_format+0x10>
            switch (ch) {
   12a58:	2875      	cmp	r0, #117	; 0x75
   12a5a:	d110      	bne.n	12a7e <tfp_format+0x1de>
                p.base = 10;
   12a5c:	230a      	movs	r3, #10
   12a5e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   12a62:	466a      	mov	r2, sp
   12a64:	2100      	movs	r1, #0
   12a66:	4630      	mov	r0, r6
   12a68:	f7ff fee8 	bl	1283c <intarg>
   12a6c:	aa08      	add	r2, sp, #32
   12a6e:	f7ff fd9f 	bl	125b0 <ui2a>
                written += putchw(putp, &p);
   12a72:	a908      	add	r1, sp, #32
   12a74:	4628      	mov	r0, r5
   12a76:	f7ff fe53 	bl	12720 <putchw>
   12a7a:	4404      	add	r4, r0
                break;
   12a7c:	e718      	b.n	128b0 <tfp_format+0x10>
            switch (ch) {
   12a7e:	2878      	cmp	r0, #120	; 0x78
   12a80:	f47f af16 	bne.w	128b0 <tfp_format+0x10>
                p.base = 16;
   12a84:	2310      	movs	r3, #16
   12a86:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   12a8a:	2858      	cmp	r0, #88	; 0x58
   12a8c:	bf14      	ite	ne
   12a8e:	2300      	movne	r3, #0
   12a90:	2301      	moveq	r3, #1
   12a92:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   12a96:	f363 0282 	bfi	r2, r3, #2, #1
   12a9a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   12a9e:	466a      	mov	r2, sp
   12aa0:	2100      	movs	r1, #0
   12aa2:	4630      	mov	r0, r6
   12aa4:	f7ff feca 	bl	1283c <intarg>
   12aa8:	aa08      	add	r2, sp, #32
   12aaa:	f7ff fd81 	bl	125b0 <ui2a>
                written += putchw(putp, &p);
   12aae:	a908      	add	r1, sp, #32
   12ab0:	4628      	mov	r0, r5
   12ab2:	f7ff fe35 	bl	12720 <putchw>
   12ab6:	4404      	add	r4, r0
                break;
   12ab8:	e6fa      	b.n	128b0 <tfp_format+0x10>
                p.base = 8;
   12aba:	2308      	movs	r3, #8
   12abc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   12ac0:	466a      	mov	r2, sp
   12ac2:	2100      	movs	r1, #0
   12ac4:	4630      	mov	r0, r6
   12ac6:	f7ff feb9 	bl	1283c <intarg>
   12aca:	aa08      	add	r2, sp, #32
   12acc:	f7ff fd70 	bl	125b0 <ui2a>
                written += putchw(putp, &p);
   12ad0:	a908      	add	r1, sp, #32
   12ad2:	4628      	mov	r0, r5
   12ad4:	f7ff fe24 	bl	12720 <putchw>
   12ad8:	4404      	add	r4, r0
                break;
   12ada:	e6e9      	b.n	128b0 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   12adc:	9b00      	ldr	r3, [sp, #0]
   12ade:	1d1a      	adds	r2, r3, #4
   12ae0:	9200      	str	r2, [sp, #0]
   12ae2:	681b      	ldr	r3, [r3, #0]
   12ae4:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   12ae6:	a908      	add	r1, sp, #32
   12ae8:	4628      	mov	r0, r5
   12aea:	f7ff fe19 	bl	12720 <putchw>
   12aee:	4404      	add	r4, r0
                p.bf = bf;
   12af0:	ab02      	add	r3, sp, #8
   12af2:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   12af4:	e6dc      	b.n	128b0 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   12af6:	4620      	mov	r0, r4
   12af8:	b00a      	add	sp, #40	; 0x28
   12afa:	bd70      	pop	{r4, r5, r6, pc}

00012afc <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   12afc:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   12afe:	f7ff fecf 	bl	128a0 <tfp_format>
}
   12b02:	bd08      	pop	{r3, pc}

00012b04 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   12b04:	b40f      	push	{r0, r1, r2, r3}
   12b06:	b500      	push	{lr}
   12b08:	b083      	sub	sp, #12
   12b0a:	aa04      	add	r2, sp, #16
   12b0c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   12b10:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   12b12:	4b04      	ldr	r3, [pc, #16]	; (12b24 <printf+0x20>)
   12b14:	6818      	ldr	r0, [r3, #0]
   12b16:	f7ff fff1 	bl	12afc <vfprintf>
    va_end(va);
    return rv;
}
   12b1a:	b003      	add	sp, #12
   12b1c:	f85d eb04 	ldr.w	lr, [sp], #4
   12b20:	b004      	add	sp, #16
   12b22:	4770      	bx	lr
   12b24:	0002c254 	.word	0x0002c254

00012b28 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   12b28:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b2a:	b085      	sub	sp, #20
   12b2c:	4605      	mov	r5, r0
   12b2e:	460c      	mov	r4, r1
   12b30:	4616      	mov	r6, r2
   12b32:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   12b34:	460a      	mov	r2, r1
   12b36:	4601      	mov	r1, r0
   12b38:	4668      	mov	r0, sp
   12b3a:	f000 f861 	bl	12c00 <fmemopen_w>
    tfp_format(f, fmt, va);
   12b3e:	463a      	mov	r2, r7
   12b40:	4631      	mov	r1, r6
   12b42:	f7ff fead 	bl	128a0 <tfp_format>
    if (size > 0) {
   12b46:	b12c      	cbz	r4, 12b54 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   12b48:	9b02      	ldr	r3, [sp, #8]
   12b4a:	42a3      	cmp	r3, r4
   12b4c:	d305      	bcc.n	12b5a <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   12b4e:	3c01      	subs	r4, #1
   12b50:	2300      	movs	r3, #0
   12b52:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   12b54:	9802      	ldr	r0, [sp, #8]
   12b56:	b005      	add	sp, #20
   12b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   12b5a:	9b01      	ldr	r3, [sp, #4]
   12b5c:	2200      	movs	r2, #0
   12b5e:	701a      	strb	r2, [r3, #0]
   12b60:	e7f8      	b.n	12b54 <vsnprintf+0x2c>
	...

00012b64 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   12b64:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   12b66:	460a      	mov	r2, r1
   12b68:	4601      	mov	r1, r0
   12b6a:	4b02      	ldr	r3, [pc, #8]	; (12b74 <vprintf+0x10>)
   12b6c:	6818      	ldr	r0, [r3, #0]
   12b6e:	f7ff ffc5 	bl	12afc <vfprintf>
}
   12b72:	bd08      	pop	{r3, pc}
   12b74:	0002c254 	.word	0x0002c254

00012b78 <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
   12b78:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
   12b7c:	4601      	mov	r1, r0
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
   12b7e:	f8b0 b000 	ldrh.w	fp, [r0]
   12b82:	f04f 0c00 	mov.w	ip, #0
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
   12b86:	8846      	ldrh	r6, [r0, #2]
   12b88:	0c35      	lsrs	r5, r6, #16
   12b8a:	0434      	lsls	r4, r6, #16
	x = (uint64_t) (uint16_t) xsubi[0] +
   12b8c:	eb1b 0204 	adds.w	r2, fp, r4
   12b90:	eb4c 0305 	adc.w	r3, ip, r5
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
   12b94:	2400      	movs	r4, #0
   12b96:	8885      	ldrh	r5, [r0, #4]
	x = (uint64_t) (uint16_t) xsubi[0] +
   12b98:	1916      	adds	r6, r2, r4
   12b9a:	eb43 0705 	adc.w	r7, r3, r5

	x = (0x5deece66dULL * x) + 0xb;
   12b9e:	4c0b      	ldr	r4, [pc, #44]	; (12bcc <jrand48+0x54>)
   12ba0:	2005      	movs	r0, #5
   12ba2:	fb00 f006 	mul.w	r0, r0, r6
   12ba6:	fb04 0007 	mla	r0, r4, r7, r0
   12baa:	fba6 2304 	umull	r2, r3, r6, r4
   12bae:	4403      	add	r3, r0
   12bb0:	f112 040b 	adds.w	r4, r2, #11
   12bb4:	f143 0500 	adc.w	r5, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
   12bb8:	800c      	strh	r4, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
   12bba:	0c20      	lsrs	r0, r4, #16
   12bbc:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   12bc0:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
   12bc2:	808d      	strh	r5, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
   12bc4:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
   12bc8:	4770      	bx	lr
   12bca:	bf00      	nop
   12bcc:	deece66d 	.word	0xdeece66d

00012bd0 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   12bd0:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   12bd2:	2500      	movs	r5, #0
    
    while (n--)
   12bd4:	e000      	b.n	12bd8 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   12bd6:	4622      	mov	r2, r4
    while (n--)
   12bd8:	1e54      	subs	r4, r2, #1
   12bda:	b16a      	cbz	r2, 12bf8 <memfile_write+0x28>
        f->bytes_written++;
   12bdc:	6883      	ldr	r3, [r0, #8]
   12bde:	3301      	adds	r3, #1
   12be0:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   12be2:	68c2      	ldr	r2, [r0, #12]
   12be4:	4293      	cmp	r3, r2
   12be6:	d8f6      	bhi.n	12bd6 <memfile_write+0x6>
            *f->buffer++ = *bp++;
   12be8:	6843      	ldr	r3, [r0, #4]
   12bea:	1c5a      	adds	r2, r3, #1
   12bec:	6042      	str	r2, [r0, #4]
   12bee:	780a      	ldrb	r2, [r1, #0]
   12bf0:	701a      	strb	r2, [r3, #0]
            i++;
   12bf2:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   12bf4:	3101      	adds	r1, #1
   12bf6:	e7ee      	b.n	12bd6 <memfile_write+0x6>
        }
    }
    
    return i;
}
   12bf8:	4628      	mov	r0, r5
   12bfa:	bc30      	pop	{r4, r5}
   12bfc:	4770      	bx	lr
	...

00012c00 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   12c00:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   12c02:	4c04      	ldr	r4, [pc, #16]	; (12c14 <fmemopen_w+0x14>)
   12c04:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   12c06:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   12c08:	2100      	movs	r1, #0
   12c0a:	6081      	str	r1, [r0, #8]
    storage->size = size;
   12c0c:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   12c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
   12c12:	4770      	bx	lr
   12c14:	0002c24c 	.word	0x0002c24c

00012c18 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   12c18:	2000      	movs	r0, #0
   12c1a:	4770      	bx	lr

00012c1c <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   12c1c:	b510      	push	{r4, lr}
   12c1e:	4608      	mov	r0, r1
   12c20:	4614      	mov	r4, r2
    console_write(bp, n);
   12c22:	4611      	mov	r1, r2
   12c24:	f7fb fd86 	bl	e734 <console_write>
    return n;
}
   12c28:	4620      	mov	r0, r4
   12c2a:	bd10      	pop	{r4, pc}

00012c2c <json_helper_set_array>:
#include <sensor_coap/sensor_coap.h>
#include <mynewt_rust/json_helper.h>

//  Assume we are writing an object now.  Write the key name and start a child array.
//  {a:b --> {a:b, key:[
void json_helper_set_array(void *object, const char *key) {
   12c2c:	b510      	push	{r4, lr}
    assert(key);
   12c2e:	b139      	cbz	r1, 12c40 <json_helper_set_array+0x14>
    //  console_printf("json_helper_set_array: %s\n", key); ////
    json_rep_set_array_k(object, (char *) key);
   12c30:	4c06      	ldr	r4, [pc, #24]	; (12c4c <json_helper_set_array+0x20>)
   12c32:	4620      	mov	r0, r4
   12c34:	f7fd f8b0 	bl	fd98 <json_encode_array_name>
   12c38:	4620      	mov	r0, r4
   12c3a:	f7fd f8b1 	bl	fda0 <json_encode_array_start>
}
   12c3e:	bd10      	pop	{r4, pc}
    assert(key);
   12c40:	2300      	movs	r3, #0
   12c42:	461a      	mov	r2, r3
   12c44:	4619      	mov	r1, r3
   12c46:	4618      	mov	r0, r3
   12c48:	f7fd fcc8 	bl	105dc <__assert_func>
   12c4c:	20003b70 	.word	0x20003b70

00012c50 <json_helper_close_array>:

//  End the child array and resume writing the parent object.
//  {a:b, key:[... --> {a:b, key:[...]
void json_helper_close_array(void *object, const char *key) {
   12c50:	b508      	push	{r3, lr}
    assert(key);
   12c52:	b119      	cbz	r1, 12c5c <json_helper_close_array+0xc>
    json_rep_close_array(object, key);
   12c54:	4804      	ldr	r0, [pc, #16]	; (12c68 <json_helper_close_array+0x18>)
   12c56:	f7fd f8b3 	bl	fdc0 <json_encode_array_finish>
}
   12c5a:	bd08      	pop	{r3, pc}
    assert(key);
   12c5c:	2300      	movs	r3, #0
   12c5e:	461a      	mov	r2, r3
   12c60:	4619      	mov	r1, r3
   12c62:	4618      	mov	r0, r3
   12c64:	f7fd fcba 	bl	105dc <__assert_func>
   12c68:	20003b70 	.word	0x20003b70

00012c6c <json_helper_object_array_start_item>:

//  Assume we have called set_array.  Start an array item, assumed to be an object.
//  [... --> [...,
void json_helper_object_array_start_item(const char *key) {
   12c6c:	b508      	push	{r3, lr}
    assert(key);
   12c6e:	b118      	cbz	r0, 12c78 <json_helper_object_array_start_item+0xc>
    //  console_printf("json_helper_object_array_start_item: %s\n", key); ////
    json_rep_object_array_start_item(key);
   12c70:	4804      	ldr	r0, [pc, #16]	; (12c84 <json_helper_object_array_start_item+0x18>)
   12c72:	f7fc ff03 	bl	fa7c <json_encode_object_start>
}
   12c76:	bd08      	pop	{r3, pc}
    assert(key);
   12c78:	2300      	movs	r3, #0
   12c7a:	461a      	mov	r2, r3
   12c7c:	4619      	mov	r1, r3
   12c7e:	4618      	mov	r0, r3
   12c80:	f7fd fcac 	bl	105dc <__assert_func>
   12c84:	20003b70 	.word	0x20003b70

00012c88 <json_helper_object_array_end_item>:

//  End an array item, assumed to be an object.
//  [... --> [...,
void json_helper_object_array_end_item(const char *key) {
   12c88:	b508      	push	{r3, lr}
    assert(key);
   12c8a:	b118      	cbz	r0, 12c94 <json_helper_object_array_end_item+0xc>
    json_rep_object_array_end_item(key);
   12c8c:	4804      	ldr	r0, [pc, #16]	; (12ca0 <json_helper_object_array_end_item+0x18>)
   12c8e:	f7fd f873 	bl	fd78 <json_encode_object_finish>
}
   12c92:	bd08      	pop	{r3, pc}
    assert(key);
   12c94:	2300      	movs	r3, #0
   12c96:	461a      	mov	r2, r3
   12c98:	4619      	mov	r1, r3
   12c9a:	4618      	mov	r0, r3
   12c9c:	f7fd fc9e 	bl	105dc <__assert_func>
   12ca0:	20003b70 	.word	0x20003b70

00012ca4 <json_helper_set_int>:

//  Encode a value into JSON: int, unsigned int, float, text, ...
void json_helper_set_int(void *object, const char *key, uint64_t value) {
   12ca4:	b538      	push	{r3, r4, r5, lr}
    assert(key);
   12ca6:	b159      	cbz	r1, 12cc0 <json_helper_set_int+0x1c>
   12ca8:	4614      	mov	r4, r2
   12caa:	461d      	mov	r5, r3
    //  console_printf("json_helper_set_int: %s\n", key); ////
    json_rep_set_int_k(object, (char *) key, value);
   12cac:	4b07      	ldr	r3, [pc, #28]	; (12ccc <json_helper_set_int+0x28>)
   12cae:	2202      	movs	r2, #2
   12cb0:	705a      	strb	r2, [r3, #1]
   12cb2:	e9c3 4502 	strd	r4, r5, [r3, #8]
   12cb6:	461a      	mov	r2, r3
   12cb8:	4805      	ldr	r0, [pc, #20]	; (12cd0 <json_helper_set_int+0x2c>)
   12cba:	f7fc ff27 	bl	fb0c <json_encode_object_entry>
}
   12cbe:	bd38      	pop	{r3, r4, r5, pc}
    assert(key);
   12cc0:	2300      	movs	r3, #0
   12cc2:	461a      	mov	r2, r3
   12cc4:	4619      	mov	r1, r3
   12cc6:	4618      	mov	r0, r3
   12cc8:	f7fd fc88 	bl	105dc <__assert_func>
   12ccc:	20003bc0 	.word	0x20003bc0
   12cd0:	20003b70 	.word	0x20003b70

00012cd4 <json_helper_set_float>:
void json_helper_set_uint(void *object, const char *key, uint64_t value) {
    assert(key);
    json_rep_set_uint_k(object, (char *) key, value);
}

void json_helper_set_float(void *object, const char *key, float value) {
   12cd4:	b508      	push	{r3, lr}
    assert(key);
   12cd6:	b151      	cbz	r1, 12cee <json_helper_set_float+0x1a>
   12cd8:	460b      	mov	r3, r1
    json_rep_set_float_k(object, (char *) key, value);
   12cda:	4a08      	ldr	r2, [pc, #32]	; (12cfc <json_helper_set_float+0x28>)
   12cdc:	2106      	movs	r1, #6
   12cde:	7051      	strb	r1, [r2, #1]
   12ce0:	ed82 0a02 	vstr	s0, [r2, #8]
   12ce4:	4619      	mov	r1, r3
   12ce6:	4806      	ldr	r0, [pc, #24]	; (12d00 <json_helper_set_float+0x2c>)
   12ce8:	f7fb ffc2 	bl	ec70 <json_encode_object_entry_ext>
}
   12cec:	bd08      	pop	{r3, pc}
    assert(key);
   12cee:	2300      	movs	r3, #0
   12cf0:	461a      	mov	r2, r3
   12cf2:	4619      	mov	r1, r3
   12cf4:	4618      	mov	r0, r3
   12cf6:	f7fd fc71 	bl	105dc <__assert_func>
   12cfa:	bf00      	nop
   12cfc:	20003bc0 	.word	0x20003bc0
   12d00:	20003b70 	.word	0x20003b70

00012d04 <json_helper_set_text_string>:

void json_helper_set_text_string(void *object, const char *key, const char *value) {
   12d04:	b570      	push	{r4, r5, r6, lr}
    assert(key);
   12d06:	b181      	cbz	r1, 12d2a <json_helper_set_text_string+0x26>
   12d08:	4615      	mov	r5, r2
   12d0a:	460e      	mov	r6, r1
    assert(value);
   12d0c:	b19a      	cbz	r2, 12d36 <json_helper_set_text_string+0x32>
    //  console_printf("json_helper_set_text_string: %s\n", key); ////
    json_rep_set_text_string_k(object, (char *) key, value);
   12d0e:	4c0d      	ldr	r4, [pc, #52]	; (12d44 <json_helper_set_text_string+0x40>)
   12d10:	2303      	movs	r3, #3
   12d12:	7063      	strb	r3, [r4, #1]
   12d14:	4610      	mov	r0, r2
   12d16:	f7ff fc43 	bl	125a0 <strlen>
   12d1a:	8060      	strh	r0, [r4, #2]
   12d1c:	60a5      	str	r5, [r4, #8]
   12d1e:	4622      	mov	r2, r4
   12d20:	4631      	mov	r1, r6
   12d22:	4809      	ldr	r0, [pc, #36]	; (12d48 <json_helper_set_text_string+0x44>)
   12d24:	f7fc fef2 	bl	fb0c <json_encode_object_entry>
}
   12d28:	bd70      	pop	{r4, r5, r6, pc}
    assert(key);
   12d2a:	2300      	movs	r3, #0
   12d2c:	461a      	mov	r2, r3
   12d2e:	4619      	mov	r1, r3
   12d30:	4618      	mov	r0, r3
   12d32:	f7fd fc53 	bl	105dc <__assert_func>
    assert(value);
   12d36:	2300      	movs	r3, #0
   12d38:	461a      	mov	r2, r3
   12d3a:	4619      	mov	r1, r3
   12d3c:	4618      	mov	r0, r3
   12d3e:	f7fd fc4d 	bl	105dc <__assert_func>
   12d42:	bf00      	nop
   12d44:	20003bc0 	.word	0x20003bc0
   12d48:	20003b70 	.word	0x20003b70

00012d4c <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   12d4c:	b508      	push	{r3, lr}
    sysinit();
   12d4e:	f7fc fe25 	bl	f99c <sysinit_start>
   12d52:	f00a fdf3 	bl	1d93c <sysinit_app>
   12d56:	f7fc fe27 	bl	f9a8 <sysinit_end>
}
   12d5a:	bd08      	pop	{r3, pc}

00012d5c <get_temp_raw_data>:
#include <custom_sensor/custom_sensor.h>
#include <mynewt_rust/sensor_helper.h>

///  Interpret `sensor_data` as a `sensor_temp_raw_data` struct that contains raw temp.
///  Copy the sensor data into `dest`.  Return 0 if successful.
int get_temp_raw_data(void *sensor_data, struct sensor_temp_raw_data *dest) {
   12d5c:	b508      	push	{r3, lr}
    assert(sensor_data); assert(dest);
   12d5e:	b130      	cbz	r0, 12d6e <get_temp_raw_data+0x12>
   12d60:	b159      	cbz	r1, 12d7a <get_temp_raw_data+0x1e>
    struct sensor_temp_raw_data *src = (struct sensor_temp_raw_data *) sensor_data;
    memcpy(dest, src, sizeof(struct sensor_temp_raw_data));
   12d62:	6802      	ldr	r2, [r0, #0]
   12d64:	600a      	str	r2, [r1, #0]
   12d66:	7903      	ldrb	r3, [r0, #4]
   12d68:	710b      	strb	r3, [r1, #4]
    return 0;
}
   12d6a:	2000      	movs	r0, #0
   12d6c:	bd08      	pop	{r3, pc}
    assert(sensor_data); assert(dest);
   12d6e:	2300      	movs	r3, #0
   12d70:	461a      	mov	r2, r3
   12d72:	4619      	mov	r1, r3
   12d74:	4618      	mov	r0, r3
   12d76:	f7fd fc31 	bl	105dc <__assert_func>
   12d7a:	2300      	movs	r3, #0
   12d7c:	461a      	mov	r2, r3
   12d7e:	4619      	mov	r1, r3
   12d80:	4618      	mov	r0, r3
   12d82:	f7fd fc2b 	bl	105dc <__assert_func>

00012d86 <get_geolocation_data>:
    return 0;
}

///  Interpret `sensor_data` as a `sensor_geolocation_data` struct that contains geolocation.
///  Copy the sensor data into `dest`.  Return 0 if successful.
int get_geolocation_data(void *sensor_data, struct sensor_geolocation_data *dest) {
   12d86:	b538      	push	{r3, r4, r5, lr}
    assert(sensor_data); assert(dest);
   12d88:	b198      	cbz	r0, 12db2 <get_geolocation_data+0x2c>
   12d8a:	4603      	mov	r3, r0
   12d8c:	b1b9      	cbz	r1, 12dbe <get_geolocation_data+0x38>
    struct sensor_geolocation_data *src = (struct sensor_geolocation_data *) sensor_data;
    memcpy(dest, src, sizeof(struct sensor_geolocation_data));
   12d8e:	6800      	ldr	r0, [r0, #0]
   12d90:	685a      	ldr	r2, [r3, #4]
   12d92:	689d      	ldr	r5, [r3, #8]
   12d94:	68dc      	ldr	r4, [r3, #12]
   12d96:	6008      	str	r0, [r1, #0]
   12d98:	604a      	str	r2, [r1, #4]
   12d9a:	608d      	str	r5, [r1, #8]
   12d9c:	60cc      	str	r4, [r1, #12]
   12d9e:	6918      	ldr	r0, [r3, #16]
   12da0:	695a      	ldr	r2, [r3, #20]
   12da2:	6108      	str	r0, [r1, #16]
   12da4:	614a      	str	r2, [r1, #20]
   12da6:	8b1a      	ldrh	r2, [r3, #24]
   12da8:	7e9b      	ldrb	r3, [r3, #26]
   12daa:	830a      	strh	r2, [r1, #24]
   12dac:	768b      	strb	r3, [r1, #26]
    return 0;
}
   12dae:	2000      	movs	r0, #0
   12db0:	bd38      	pop	{r3, r4, r5, pc}
    assert(sensor_data); assert(dest);
   12db2:	2300      	movs	r3, #0
   12db4:	461a      	mov	r2, r3
   12db6:	4619      	mov	r1, r3
   12db8:	4618      	mov	r0, r3
   12dba:	f7fd fc0f 	bl	105dc <__assert_func>
   12dbe:	2300      	movs	r3, #0
   12dc0:	461a      	mov	r2, r3
   12dc2:	4619      	mov	r1, r3
   12dc4:	4618      	mov	r0, r3
   12dc6:	f7fd fc09 	bl	105dc <__assert_func>

00012dca <ble_gap_call_event_cb>:
ble_gap_event_listener_call(struct ble_gap_event *event);

static int
ble_gap_call_event_cb(struct ble_gap_event *event,
                      ble_gap_event_fn *cb, void *cb_arg)
{
   12dca:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (cb != NULL) {
   12dcc:	b119      	cbz	r1, 12dd6 <ble_gap_call_event_cb+0xc>
   12dce:	460b      	mov	r3, r1
   12dd0:	4611      	mov	r1, r2
        rc = cb(event, cb_arg);
   12dd2:	4798      	blx	r3
        }
        rc = 0;
    }

    return rc;
}
   12dd4:	bd08      	pop	{r3, pc}
        if (event->type == BLE_GAP_EVENT_CONN_UPDATE_REQ) {
   12dd6:	7803      	ldrb	r3, [r0, #0]
   12dd8:	2b04      	cmp	r3, #4
   12dda:	d001      	beq.n	12de0 <ble_gap_call_event_cb+0x16>
        rc = 0;
   12ddc:	2000      	movs	r0, #0
    return rc;
   12dde:	e7f9      	b.n	12dd4 <ble_gap_call_event_cb+0xa>
                *event->conn_update_req.peer_params;
   12de0:	6842      	ldr	r2, [r0, #4]
            *event->conn_update_req.self_params =
   12de2:	6883      	ldr	r3, [r0, #8]
   12de4:	6810      	ldr	r0, [r2, #0]
   12de6:	6851      	ldr	r1, [r2, #4]
   12de8:	6892      	ldr	r2, [r2, #8]
   12dea:	6018      	str	r0, [r3, #0]
   12dec:	6059      	str	r1, [r3, #4]
   12dee:	609a      	str	r2, [r3, #8]
        rc = 0;
   12df0:	2000      	movs	r0, #0
   12df2:	e7ef      	b.n	12dd4 <ble_gap_call_event_cb+0xa>

00012df4 <ble_gap_is_preempted>:
{
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    if (ble_gap_master.preempted_op != BLE_GAP_OP_NULL) {
   12df4:	4b09      	ldr	r3, [pc, #36]	; (12e1c <ble_gap_is_preempted+0x28>)
   12df6:	7c1b      	ldrb	r3, [r3, #16]
   12df8:	b963      	cbnz	r3, 12e14 <ble_gap_is_preempted+0x20>
        return true;
    }

    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   12dfa:	2b00      	cmp	r3, #0
   12dfc:	dd01      	ble.n	12e02 <ble_gap_is_preempted+0xe>
        if (ble_gap_slave[i].preempted) {
            return true;
        }
    }

    return false;
   12dfe:	2000      	movs	r0, #0
   12e00:	4770      	bx	lr
        if (ble_gap_slave[i].preempted) {
   12e02:	4a06      	ldr	r2, [pc, #24]	; (12e1c <ble_gap_is_preempted+0x28>)
   12e04:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   12e08:	7d52      	ldrb	r2, [r2, #21]
   12e0a:	f012 0f04 	tst.w	r2, #4
   12e0e:	d103      	bne.n	12e18 <ble_gap_is_preempted+0x24>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   12e10:	3301      	adds	r3, #1
   12e12:	e7f2      	b.n	12dfa <ble_gap_is_preempted+0x6>
        return true;
   12e14:	2001      	movs	r0, #1
   12e16:	4770      	bx	lr
            return true;
   12e18:	2001      	movs	r0, #1
}
   12e1a:	4770      	bx	lr
   12e1c:	2000022c 	.word	0x2000022c

00012e20 <ble_gap_has_client>:
}

static bool
ble_gap_has_client(struct ble_gap_master_state *out_state)
{
    if (!out_state) {
   12e20:	b120      	cbz	r0, 12e2c <ble_gap_has_client+0xc>
        return 0;
    }

    return out_state->cb;
   12e22:	6880      	ldr	r0, [r0, #8]
   12e24:	3000      	adds	r0, #0
   12e26:	bf18      	it	ne
   12e28:	2001      	movne	r0, #1
   12e2a:	4770      	bx	lr
        return 0;
   12e2c:	2000      	movs	r0, #0
}
   12e2e:	4770      	bx	lr

00012e30 <ble_gap_update_to_l2cap>:

static void
ble_gap_update_to_l2cap(const struct ble_gap_upd_params *params,
                        struct ble_l2cap_sig_update_params *l2cap_params)
{
    l2cap_params->itvl_min = params->itvl_min;
   12e30:	8803      	ldrh	r3, [r0, #0]
   12e32:	800b      	strh	r3, [r1, #0]
    l2cap_params->itvl_max = params->itvl_max;
   12e34:	8843      	ldrh	r3, [r0, #2]
   12e36:	804b      	strh	r3, [r1, #2]
    l2cap_params->slave_latency = params->latency;
   12e38:	8883      	ldrh	r3, [r0, #4]
   12e3a:	808b      	strh	r3, [r1, #4]
    l2cap_params->timeout_multiplier = params->supervision_timeout;
   12e3c:	88c3      	ldrh	r3, [r0, #6]
   12e3e:	80cb      	strh	r3, [r1, #6]
}
   12e40:	4770      	bx	lr
	...

00012e44 <ble_gap_accept_master_conn>:
static int
ble_gap_accept_master_conn(void)
{
    int rc;

    switch (ble_gap_master.op) {
   12e44:	4b03      	ldr	r3, [pc, #12]	; (12e54 <ble_gap_accept_master_conn+0x10>)
   12e46:	781b      	ldrb	r3, [r3, #0]
   12e48:	2b02      	cmp	r3, #2
   12e4a:	d001      	beq.n	12e50 <ble_gap_accept_master_conn+0xc>
    case BLE_GAP_OP_NULL:
    case BLE_GAP_OP_M_DISC:
        rc = BLE_HS_ENOENT;
   12e4c:	2005      	movs	r0, #5
   12e4e:	4770      	bx	lr
        break;

    case BLE_GAP_OP_M_CONN:
        rc = 0;
   12e50:	2000      	movs	r0, #0
    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_mst);
    }

    return rc;
}
   12e52:	4770      	bx	lr
   12e54:	2000022c 	.word	0x2000022c

00012e58 <ble_gap_adv_active_instance>:

static int
ble_gap_adv_active_instance(uint8_t instance)
{
    /* Assume read is atomic; mutex not necessary. */
    return ble_gap_slave[instance].op == BLE_GAP_OP_S_ADV;
   12e58:	4b04      	ldr	r3, [pc, #16]	; (12e6c <ble_gap_adv_active_instance+0x14>)
   12e5a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   12e5e:	7d00      	ldrb	r0, [r0, #20]
}
   12e60:	2801      	cmp	r0, #1
   12e62:	bf14      	ite	ne
   12e64:	2000      	movne	r0, #0
   12e66:	2001      	moveq	r0, #1
   12e68:	4770      	bx	lr
   12e6a:	bf00      	nop
   12e6c:	2000022c 	.word	0x2000022c

00012e70 <ble_gap_accept_slave_conn>:
static int
ble_gap_accept_slave_conn(uint8_t instance)
{
    int rc;

    if (instance >= BLE_ADV_INSTANCES) {
   12e70:	b968      	cbnz	r0, 12e8e <ble_gap_accept_slave_conn+0x1e>
{
   12e72:	b510      	push	{r4, lr}
   12e74:	4604      	mov	r4, r0
       rc = BLE_HS_ENOENT;
    } else if (!ble_gap_adv_active_instance(instance)) {
   12e76:	f7ff ffef 	bl	12e58 <ble_gap_adv_active_instance>
   12e7a:	b150      	cbz	r0, 12e92 <ble_gap_accept_slave_conn+0x22>
        rc = BLE_HS_ENOENT;
    } else {
        if (ble_gap_slave[instance].connectable) {
   12e7c:	4b07      	ldr	r3, [pc, #28]	; (12e9c <ble_gap_accept_slave_conn+0x2c>)
   12e7e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
   12e82:	7d63      	ldrb	r3, [r4, #21]
   12e84:	f013 0f08 	tst.w	r3, #8
   12e88:	d005      	beq.n	12e96 <ble_gap_accept_slave_conn+0x26>
            rc = 0;
   12e8a:	2000      	movs	r0, #0
    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_slv);
    }

    return rc;
}
   12e8c:	bd10      	pop	{r4, pc}
       rc = BLE_HS_ENOENT;
   12e8e:	2005      	movs	r0, #5
}
   12e90:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   12e92:	2005      	movs	r0, #5
   12e94:	e7fa      	b.n	12e8c <ble_gap_accept_slave_conn+0x1c>
            rc = BLE_HS_ENOENT;
   12e96:	2005      	movs	r0, #5
    return rc;
   12e98:	e7f8      	b.n	12e8c <ble_gap_accept_slave_conn+0x1c>
   12e9a:	bf00      	nop
   12e9c:	2000022c 	.word	0x2000022c

00012ea0 <ble_gap_adv_type>:
 *****************************************************************************/
#if NIMBLE_BLE_ADVERTISE && !MYNEWT_VAL(BLE_EXT_ADV)
static int
ble_gap_adv_type(const struct ble_gap_adv_params *adv_params)
{
    switch (adv_params->conn_mode) {
   12ea0:	7803      	ldrb	r3, [r0, #0]
   12ea2:	b11b      	cbz	r3, 12eac <ble_gap_adv_type+0xc>
   12ea4:	2b01      	cmp	r3, #1
   12ea6:	d005      	beq.n	12eb4 <ble_gap_adv_type+0x14>
        } else {
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
        }

    case BLE_GAP_CONN_MODE_UND:
        return BLE_HCI_ADV_TYPE_ADV_IND;
   12ea8:	2000      	movs	r0, #0
   12eaa:	4770      	bx	lr
        if (adv_params->disc_mode == BLE_GAP_DISC_MODE_NON) {
   12eac:	7843      	ldrb	r3, [r0, #1]
   12eae:	b93b      	cbnz	r3, 12ec0 <ble_gap_adv_type+0x20>
            return BLE_HCI_ADV_TYPE_ADV_NONCONN_IND;
   12eb0:	2003      	movs	r0, #3
   12eb2:	4770      	bx	lr

    case BLE_GAP_CONN_MODE_DIR:
        if (adv_params->high_duty_cycle) {
   12eb4:	7a03      	ldrb	r3, [r0, #8]
   12eb6:	f013 0f01 	tst.w	r3, #1
   12eba:	d003      	beq.n	12ec4 <ble_gap_adv_type+0x24>
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_HD;
   12ebc:	2001      	movs	r0, #1
   12ebe:	4770      	bx	lr
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
   12ec0:	2002      	movs	r0, #2
   12ec2:	4770      	bx	lr
        } else {
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_LD;
   12ec4:	2004      	movs	r0, #4

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HCI_ADV_TYPE_ADV_IND;
    }
}
   12ec6:	4770      	bx	lr

00012ec8 <ble_gap_adv_dflt_itvls>:

static void
ble_gap_adv_dflt_itvls(uint8_t conn_mode,
                       uint16_t *out_itvl_min, uint16_t *out_itvl_max)
{
    switch (conn_mode) {
   12ec8:	2801      	cmp	r0, #1
   12eca:	d00d      	beq.n	12ee8 <ble_gap_adv_dflt_itvls+0x20>
   12ecc:	b110      	cbz	r0, 12ed4 <ble_gap_adv_dflt_itvls+0xc>
   12ece:	2802      	cmp	r0, #2
   12ed0:	d005      	beq.n	12ede <ble_gap_adv_dflt_itvls+0x16>
   12ed2:	4770      	bx	lr
    case BLE_GAP_CONN_MODE_NON:
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL2_MIN;
   12ed4:	23a0      	movs	r3, #160	; 0xa0
   12ed6:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL2_MAX;
   12ed8:	23f0      	movs	r3, #240	; 0xf0
   12eda:	8013      	strh	r3, [r2, #0]
        break;
   12edc:	4770      	bx	lr

    case BLE_GAP_CONN_MODE_UND:
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   12ede:	2330      	movs	r3, #48	; 0x30
   12ee0:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   12ee2:	2360      	movs	r3, #96	; 0x60
   12ee4:	8013      	strh	r3, [r2, #0]
        break;
   12ee6:	4770      	bx	lr

    case BLE_GAP_CONN_MODE_DIR:
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   12ee8:	2330      	movs	r3, #48	; 0x30
   12eea:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   12eec:	2360      	movs	r3, #96	; 0x60
   12eee:	8013      	strh	r3, [r2, #0]

    default:
        BLE_HS_DBG_ASSERT(0);
        break;
    }
}
   12ef0:	4770      	bx	lr
	...

00012ef4 <ble_gap_update_entry_find>:
}

static struct ble_gap_update_entry *
ble_gap_update_entry_find(uint16_t conn_handle,
                          struct ble_gap_update_entry **out_prev)
{
   12ef4:	b410      	push	{r4}
    struct ble_gap_update_entry *prev;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    prev = NULL;
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   12ef6:	4b08      	ldr	r3, [pc, #32]	; (12f18 <ble_gap_update_entry_find+0x24>)
   12ef8:	681b      	ldr	r3, [r3, #0]
    prev = NULL;
   12efa:	2400      	movs	r4, #0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   12efc:	b12b      	cbz	r3, 12f0a <ble_gap_update_entry_find+0x16>
        if (entry->conn_handle == conn_handle) {
   12efe:	8a9a      	ldrh	r2, [r3, #20]
   12f00:	4282      	cmp	r2, r0
   12f02:	d002      	beq.n	12f0a <ble_gap_update_entry_find+0x16>
            break;
        }

        prev = entry;
   12f04:	461c      	mov	r4, r3
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   12f06:	681b      	ldr	r3, [r3, #0]
   12f08:	e7f8      	b.n	12efc <ble_gap_update_entry_find+0x8>
    }

    if (out_prev != NULL) {
   12f0a:	b101      	cbz	r1, 12f0e <ble_gap_update_entry_find+0x1a>
        *out_prev = prev;
   12f0c:	600c      	str	r4, [r1, #0]
    }

    return entry;
}
   12f0e:	4618      	mov	r0, r3
   12f10:	f85d 4b04 	ldr.w	r4, [sp], #4
   12f14:	4770      	bx	lr
   12f16:	bf00      	nop
   12f18:	20002554 	.word	0x20002554

00012f1c <ble_gap_validate_conn_params>:
static bool
ble_gap_validate_conn_params(const struct ble_gap_upd_params *params)
{

    /* Requirements from Bluetooth spec. v4.2 [Vol 2, Part E], 7.8.18 */
    if (params->itvl_min > params->itvl_max) {
   12f1c:	8802      	ldrh	r2, [r0, #0]
   12f1e:	8843      	ldrh	r3, [r0, #2]
   12f20:	429a      	cmp	r2, r3
   12f22:	d816      	bhi.n	12f52 <ble_gap_validate_conn_params+0x36>
        return false;
    }

    if (params->itvl_min < 0x0006 || params->itvl_max > 0x0C80) {
   12f24:	2a05      	cmp	r2, #5
   12f26:	d916      	bls.n	12f56 <ble_gap_validate_conn_params+0x3a>
   12f28:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   12f2c:	d815      	bhi.n	12f5a <ble_gap_validate_conn_params+0x3e>
        return false;
    }

    if (params->latency > 0x01F3) {
   12f2e:	8882      	ldrh	r2, [r0, #4]
   12f30:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   12f34:	d213      	bcs.n	12f5e <ble_gap_validate_conn_params+0x42>
    /* According to specification mentioned above we should make sure that:
     * supervision_timeout_ms > (1 + latency) * 2 * max_interval_ms
     *    =>
     * supervision_timeout * 10 ms > (1 + latency) * 2 * itvl_max * 1.25ms
     */
    if (params->supervision_timeout <=
   12f36:	88c1      	ldrh	r1, [r0, #6]
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   12f38:	fb02 3303 	mla	r3, r2, r3, r3
   12f3c:	2b00      	cmp	r3, #0
   12f3e:	db04      	blt.n	12f4a <ble_gap_validate_conn_params+0x2e>
    if (params->supervision_timeout <=
   12f40:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
   12f44:	dd03      	ble.n	12f4e <ble_gap_validate_conn_params+0x32>
        return false;
    }

    return true;
   12f46:	2001      	movs	r0, #1
}
   12f48:	4770      	bx	lr
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   12f4a:	3303      	adds	r3, #3
   12f4c:	e7f8      	b.n	12f40 <ble_gap_validate_conn_params+0x24>
        return false;
   12f4e:	2000      	movs	r0, #0
   12f50:	4770      	bx	lr
        return false;
   12f52:	2000      	movs	r0, #0
   12f54:	4770      	bx	lr
        return false;
   12f56:	2000      	movs	r0, #0
   12f58:	4770      	bx	lr
   12f5a:	2000      	movs	r0, #0
   12f5c:	4770      	bx	lr
        return false;
   12f5e:	2000      	movs	r0, #0
   12f60:	4770      	bx	lr
	...

00012f64 <ble_gap_event_listener_call>:
    return rc;
}

static int
ble_gap_event_listener_call(struct ble_gap_event *event)
{
   12f64:	b538      	push	{r3, r4, r5, lr}
   12f66:	4605      	mov	r5, r0
    struct ble_gap_event_listener *evl = NULL;

    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   12f68:	4b05      	ldr	r3, [pc, #20]	; (12f80 <ble_gap_event_listener_call+0x1c>)
   12f6a:	681c      	ldr	r4, [r3, #0]
   12f6c:	e004      	b.n	12f78 <ble_gap_event_listener_call+0x14>
        evl->fn(event, evl->arg);
   12f6e:	6823      	ldr	r3, [r4, #0]
   12f70:	6861      	ldr	r1, [r4, #4]
   12f72:	4628      	mov	r0, r5
   12f74:	4798      	blx	r3
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   12f76:	68a4      	ldr	r4, [r4, #8]
   12f78:	2c00      	cmp	r4, #0
   12f7a:	d1f8      	bne.n	12f6e <ble_gap_event_listener_call+0xa>
    }

    return 0;
}
   12f7c:	2000      	movs	r0, #0
   12f7e:	bd38      	pop	{r3, r4, r5, pc}
   12f80:	20002550 	.word	0x20002550

00012f84 <ble_gap_extract_conn_cb>:
{
   12f84:	b570      	push	{r4, r5, r6, lr}
   12f86:	4604      	mov	r4, r0
   12f88:	460e      	mov	r6, r1
   12f8a:	4615      	mov	r5, r2
    ble_hs_lock();
   12f8c:	f003 fcb6 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   12f90:	4620      	mov	r0, r4
   12f92:	f004 fa89 	bl	174a8 <ble_hs_conn_find>
    if (conn != NULL) {
   12f96:	4604      	mov	r4, r0
   12f98:	b140      	cbz	r0, 12fac <ble_gap_extract_conn_cb+0x28>
        *out_cb = conn->bhc_cb;
   12f9a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   12f9c:	6033      	str	r3, [r6, #0]
        *out_cb_arg = conn->bhc_cb_arg;
   12f9e:	6e03      	ldr	r3, [r0, #96]	; 0x60
   12fa0:	602b      	str	r3, [r5, #0]
    ble_hs_unlock();
   12fa2:	f003 fcaf 	bl	16904 <ble_hs_unlock>
    if (conn == NULL) {
   12fa6:	b12c      	cbz	r4, 12fb4 <ble_gap_extract_conn_cb+0x30>
        return 0;
   12fa8:	2000      	movs	r0, #0
}
   12faa:	bd70      	pop	{r4, r5, r6, pc}
        *out_cb = NULL;
   12fac:	2300      	movs	r3, #0
   12fae:	6033      	str	r3, [r6, #0]
        *out_cb_arg = NULL;
   12fb0:	602b      	str	r3, [r5, #0]
   12fb2:	e7f6      	b.n	12fa2 <ble_gap_extract_conn_cb+0x1e>
        return BLE_HS_ENOTCONN;
   12fb4:	2007      	movs	r0, #7
   12fb6:	e7f8      	b.n	12faa <ble_gap_extract_conn_cb+0x26>

00012fb8 <ble_gap_call_conn_event_cb>:
{
   12fb8:	b510      	push	{r4, lr}
   12fba:	b082      	sub	sp, #8
   12fbc:	4604      	mov	r4, r0
   12fbe:	4608      	mov	r0, r1
    rc = ble_gap_extract_conn_cb(conn_handle, &cb, &cb_arg);
   12fc0:	466a      	mov	r2, sp
   12fc2:	a901      	add	r1, sp, #4
   12fc4:	f7ff ffde 	bl	12f84 <ble_gap_extract_conn_cb>
    if (rc != 0) {
   12fc8:	4603      	mov	r3, r0
   12fca:	b110      	cbz	r0, 12fd2 <ble_gap_call_conn_event_cb+0x1a>
}
   12fcc:	4618      	mov	r0, r3
   12fce:	b002      	add	sp, #8
   12fd0:	bd10      	pop	{r4, pc}
    rc = ble_gap_call_event_cb(event, cb, cb_arg);
   12fd2:	9a00      	ldr	r2, [sp, #0]
   12fd4:	9901      	ldr	r1, [sp, #4]
   12fd6:	4620      	mov	r0, r4
   12fd8:	f7ff fef7 	bl	12dca <ble_gap_call_event_cb>
   12fdc:	4603      	mov	r3, r0
   12fde:	e7f5      	b.n	12fcc <ble_gap_call_conn_event_cb+0x14>

00012fe0 <ble_gap_fill_conn_desc>:
{
   12fe0:	b570      	push	{r4, r5, r6, lr}
   12fe2:	b088      	sub	sp, #32
   12fe4:	4605      	mov	r5, r0
   12fe6:	460c      	mov	r4, r1
    ble_hs_conn_addrs(conn, &addrs);
   12fe8:	ae01      	add	r6, sp, #4
   12fea:	4631      	mov	r1, r6
   12fec:	f004 fa94 	bl	17518 <ble_hs_conn_addrs>
    desc->our_id_addr = addrs.our_id_addr;
   12ff0:	e896 0003 	ldmia.w	r6, {r0, r1}
   12ff4:	6060      	str	r0, [r4, #4]
   12ff6:	f104 0308 	add.w	r3, r4, #8
   12ffa:	f823 1b02 	strh.w	r1, [r3], #2
   12ffe:	0c09      	lsrs	r1, r1, #16
   13000:	7019      	strb	r1, [r3, #0]
    desc->peer_id_addr = addrs.peer_id_addr;
   13002:	ab08      	add	r3, sp, #32
   13004:	f853 1d15 	ldr.w	r1, [r3, #-21]!
   13008:	f8c4 100b 	str.w	r1, [r4, #11]
   1300c:	8899      	ldrh	r1, [r3, #4]
   1300e:	799b      	ldrb	r3, [r3, #6]
   13010:	f8a4 100f 	strh.w	r1, [r4, #15]
   13014:	7463      	strb	r3, [r4, #17]
    desc->our_ota_addr = addrs.our_ota_addr;
   13016:	ab08      	add	r3, sp, #32
   13018:	f853 1d0e 	ldr.w	r1, [r3, #-14]!
   1301c:	f8c4 1012 	str.w	r1, [r4, #18]
   13020:	8899      	ldrh	r1, [r3, #4]
   13022:	799b      	ldrb	r3, [r3, #6]
   13024:	82e1      	strh	r1, [r4, #22]
   13026:	7623      	strb	r3, [r4, #24]
    desc->peer_ota_addr = addrs.peer_ota_addr;
   13028:	ab08      	add	r3, sp, #32
   1302a:	f853 1d07 	ldr.w	r1, [r3, #-7]!
   1302e:	f8c4 1019 	str.w	r1, [r4, #25]
   13032:	8899      	ldrh	r1, [r3, #4]
   13034:	799b      	ldrb	r3, [r3, #6]
   13036:	f8a4 101d 	strh.w	r1, [r4, #29]
   1303a:	77e3      	strb	r3, [r4, #31]
    desc->conn_handle = conn->bhc_handle;
   1303c:	88ab      	ldrh	r3, [r5, #4]
   1303e:	8423      	strh	r3, [r4, #32]
    desc->conn_itvl = conn->bhc_itvl;
   13040:	8bab      	ldrh	r3, [r5, #28]
   13042:	8463      	strh	r3, [r4, #34]	; 0x22
    desc->conn_latency = conn->bhc_latency;
   13044:	8beb      	ldrh	r3, [r5, #30]
   13046:	84a3      	strh	r3, [r4, #36]	; 0x24
    desc->supervision_timeout = conn->bhc_supervision_timeout;
   13048:	8c2b      	ldrh	r3, [r5, #32]
   1304a:	84e3      	strh	r3, [r4, #38]	; 0x26
    desc->master_clock_accuracy = conn->bhc_master_clock_accuracy;
   1304c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   13050:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    desc->sec_state = conn->bhc_sec_state;
   13054:	6dab      	ldr	r3, [r5, #88]	; 0x58
   13056:	6023      	str	r3, [r4, #0]
    if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   13058:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1305c:	f013 0f01 	tst.w	r3, #1
   13060:	d104      	bne.n	1306c <ble_gap_fill_conn_desc+0x8c>
        desc->role = BLE_GAP_ROLE_SLAVE;
   13062:	2301      	movs	r3, #1
   13064:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   13068:	b008      	add	sp, #32
   1306a:	bd70      	pop	{r4, r5, r6, pc}
        desc->role = BLE_GAP_ROLE_MASTER;
   1306c:	2300      	movs	r3, #0
   1306e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   13072:	e7f9      	b.n	13068 <ble_gap_fill_conn_desc+0x88>

00013074 <ble_gap_conn_to_snapshot>:
{
   13074:	b538      	push	{r3, r4, r5, lr}
   13076:	4605      	mov	r5, r0
   13078:	460c      	mov	r4, r1
    ble_gap_fill_conn_desc(conn, snap->desc);
   1307a:	6809      	ldr	r1, [r1, #0]
   1307c:	f7ff ffb0 	bl	12fe0 <ble_gap_fill_conn_desc>
    snap->cb = conn->bhc_cb;
   13080:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   13082:	6063      	str	r3, [r4, #4]
    snap->cb_arg = conn->bhc_cb_arg;
   13084:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   13086:	60a3      	str	r3, [r4, #8]
}
   13088:	bd38      	pop	{r3, r4, r5, pc}

0001308a <ble_gap_find_snapshot>:
{
   1308a:	b538      	push	{r3, r4, r5, lr}
   1308c:	4604      	mov	r4, r0
   1308e:	460d      	mov	r5, r1
    ble_hs_lock();
   13090:	f003 fc34 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   13094:	4620      	mov	r0, r4
   13096:	f004 fa07 	bl	174a8 <ble_hs_conn_find>
    if (conn != NULL) {
   1309a:	4604      	mov	r4, r0
   1309c:	b110      	cbz	r0, 130a4 <ble_gap_find_snapshot+0x1a>
        ble_gap_conn_to_snapshot(conn, snap);
   1309e:	4629      	mov	r1, r5
   130a0:	f7ff ffe8 	bl	13074 <ble_gap_conn_to_snapshot>
    ble_hs_unlock();
   130a4:	f003 fc2e 	bl	16904 <ble_hs_unlock>
    if (conn == NULL) {
   130a8:	b10c      	cbz	r4, 130ae <ble_gap_find_snapshot+0x24>
        return 0;
   130aa:	2000      	movs	r0, #0
}
   130ac:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   130ae:	2007      	movs	r0, #7
   130b0:	e7fc      	b.n	130ac <ble_gap_find_snapshot+0x22>
	...

000130b4 <ble_gap_update_entry_remove>:
{
   130b4:	b510      	push	{r4, lr}
   130b6:	b082      	sub	sp, #8
    entry = ble_gap_update_entry_find(conn_handle, &prev);
   130b8:	a901      	add	r1, sp, #4
   130ba:	f7ff ff1b 	bl	12ef4 <ble_gap_update_entry_find>
    if (entry != NULL) {
   130be:	4604      	mov	r4, r0
   130c0:	b128      	cbz	r0, 130ce <ble_gap_update_entry_remove+0x1a>
        if (prev == NULL) {
   130c2:	9b01      	ldr	r3, [sp, #4]
   130c4:	b133      	cbz	r3, 130d4 <ble_gap_update_entry_remove+0x20>
            SLIST_NEXT(prev, next) = SLIST_NEXT(entry, next);
   130c6:	6802      	ldr	r2, [r0, #0]
   130c8:	601a      	str	r2, [r3, #0]
        ble_hs_timer_resched();
   130ca:	f003 fcf5 	bl	16ab8 <ble_hs_timer_resched>
}
   130ce:	4620      	mov	r0, r4
   130d0:	b002      	add	sp, #8
   130d2:	bd10      	pop	{r4, pc}
            SLIST_REMOVE_HEAD(&ble_gap_update_entries, next);
   130d4:	4b02      	ldr	r3, [pc, #8]	; (130e0 <ble_gap_update_entry_remove+0x2c>)
   130d6:	681a      	ldr	r2, [r3, #0]
   130d8:	6812      	ldr	r2, [r2, #0]
   130da:	601a      	str	r2, [r3, #0]
   130dc:	e7f5      	b.n	130ca <ble_gap_update_entry_remove+0x16>
   130de:	bf00      	nop
   130e0:	20002554 	.word	0x20002554

000130e4 <ble_gap_master_reset_state>:
{
   130e4:	b508      	push	{r3, lr}
    ble_gap_master.op = BLE_GAP_OP_NULL;
   130e6:	4b07      	ldr	r3, [pc, #28]	; (13104 <ble_gap_master_reset_state+0x20>)
   130e8:	2200      	movs	r2, #0
   130ea:	701a      	strb	r2, [r3, #0]
    ble_gap_master.exp_set = 0;
   130ec:	7859      	ldrb	r1, [r3, #1]
   130ee:	f362 0100 	bfi	r1, r2, #0, #1
   130f2:	7059      	strb	r1, [r3, #1]
    ble_gap_master.conn.cancel = 0;
   130f4:	7c59      	ldrb	r1, [r3, #17]
   130f6:	f362 01c3 	bfi	r1, r2, #3, #1
   130fa:	7459      	strb	r1, [r3, #17]
    ble_hs_timer_resched();
   130fc:	f003 fcdc 	bl	16ab8 <ble_hs_timer_resched>
}
   13100:	bd08      	pop	{r3, pc}
   13102:	bf00      	nop
   13104:	2000022c 	.word	0x2000022c

00013108 <ble_gap_master_extract_state>:
{
   13108:	b570      	push	{r4, r5, r6, lr}
   1310a:	4604      	mov	r4, r0
   1310c:	460e      	mov	r6, r1
    ble_hs_lock();
   1310e:	f003 fbf5 	bl	168fc <ble_hs_lock>
    *out_state = ble_gap_master;
   13112:	4d08      	ldr	r5, [pc, #32]	; (13134 <ble_gap_master_extract_state+0x2c>)
   13114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   13116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13118:	682b      	ldr	r3, [r5, #0]
   1311a:	6023      	str	r3, [r4, #0]
    if (reset_state) {
   1311c:	b916      	cbnz	r6, 13124 <ble_gap_master_extract_state+0x1c>
    ble_hs_unlock();
   1311e:	f003 fbf1 	bl	16904 <ble_hs_unlock>
}
   13122:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_master_reset_state();
   13124:	f7ff ffde 	bl	130e4 <ble_gap_master_reset_state>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   13128:	f1a5 0310 	sub.w	r3, r5, #16
   1312c:	2200      	movs	r2, #0
   1312e:	741a      	strb	r2, [r3, #16]
   13130:	e7f5      	b.n	1311e <ble_gap_master_extract_state+0x16>
   13132:	bf00      	nop
   13134:	2000022c 	.word	0x2000022c

00013138 <ble_gap_disc_report>:
{
   13138:	b530      	push	{r4, r5, lr}
   1313a:	b093      	sub	sp, #76	; 0x4c
   1313c:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   1313e:	2234      	movs	r2, #52	; 0x34
   13140:	2100      	movs	r1, #0
   13142:	4668      	mov	r0, sp
   13144:	f7ff f9e7 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_DISC;
   13148:	2307      	movs	r3, #7
   1314a:	f88d 3000 	strb.w	r3, [sp]
    event.disc = *((struct ble_gap_disc_desc *)desc);
   1314e:	ad01      	add	r5, sp, #4
   13150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13154:	e894 0003 	ldmia.w	r4, {r0, r1}
   13158:	e885 0003 	stmia.w	r5, {r0, r1}
    ble_gap_master_extract_state(&state, 0);
   1315c:	2100      	movs	r1, #0
   1315e:	a80d      	add	r0, sp, #52	; 0x34
   13160:	f7ff ffd2 	bl	13108 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   13164:	a80d      	add	r0, sp, #52	; 0x34
   13166:	f7ff fe5b 	bl	12e20 <ble_gap_has_client>
   1316a:	b118      	cbz	r0, 13174 <ble_gap_disc_report+0x3c>
        state.cb(&event, state.cb_arg);
   1316c:	9910      	ldr	r1, [sp, #64]	; 0x40
   1316e:	4668      	mov	r0, sp
   13170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13172:	4798      	blx	r3
    ble_gap_event_listener_call(&event);
   13174:	4668      	mov	r0, sp
   13176:	f7ff fef5 	bl	12f64 <ble_gap_event_listener_call>
}
   1317a:	b013      	add	sp, #76	; 0x4c
   1317c:	bd30      	pop	{r4, r5, pc}

0001317e <ble_gap_master_connect_failure>:
{
   1317e:	b510      	push	{r4, lr}
   13180:	b092      	sub	sp, #72	; 0x48
   13182:	4604      	mov	r4, r0
    ble_gap_master_extract_state(&state, 1);
   13184:	2101      	movs	r1, #1
   13186:	a80d      	add	r0, sp, #52	; 0x34
   13188:	f7ff ffbe 	bl	13108 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   1318c:	a80d      	add	r0, sp, #52	; 0x34
   1318e:	f7ff fe47 	bl	12e20 <ble_gap_has_client>
   13192:	b910      	cbnz	r0, 1319a <ble_gap_master_connect_failure+0x1c>
        rc = 0;
   13194:	2000      	movs	r0, #0
}
   13196:	b012      	add	sp, #72	; 0x48
   13198:	bd10      	pop	{r4, pc}
        memset(&event, 0, sizeof event);
   1319a:	2234      	movs	r2, #52	; 0x34
   1319c:	2100      	movs	r1, #0
   1319e:	4668      	mov	r0, sp
   131a0:	f7ff f9b9 	bl	12516 <memset>
        event.connect.status = status;
   131a4:	9401      	str	r4, [sp, #4]
        rc = state.cb(&event, state.cb_arg);
   131a6:	9910      	ldr	r1, [sp, #64]	; 0x40
   131a8:	4668      	mov	r0, sp
   131aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   131ac:	4798      	blx	r3
   131ae:	e7f2      	b.n	13196 <ble_gap_master_connect_failure+0x18>

000131b0 <ble_gap_master_failed>:
{
   131b0:	b508      	push	{r3, lr}
    switch (ble_gap_master.op) {
   131b2:	4b04      	ldr	r3, [pc, #16]	; (131c4 <ble_gap_master_failed+0x14>)
   131b4:	781b      	ldrb	r3, [r3, #0]
   131b6:	2b02      	cmp	r3, #2
   131b8:	d000      	beq.n	131bc <ble_gap_master_failed+0xc>
}
   131ba:	bd08      	pop	{r3, pc}
        ble_gap_master_connect_failure(status);
   131bc:	f7ff ffdf 	bl	1317e <ble_gap_master_connect_failure>
}
   131c0:	e7fb      	b.n	131ba <ble_gap_master_failed+0xa>
   131c2:	bf00      	nop
   131c4:	2000022c 	.word	0x2000022c

000131c8 <ble_gap_master_connect_cancelled>:
{
   131c8:	b510      	push	{r4, lr}
   131ca:	b092      	sub	sp, #72	; 0x48
    ble_gap_master_extract_state(&state, 1);
   131cc:	2101      	movs	r1, #1
   131ce:	a80d      	add	r0, sp, #52	; 0x34
   131d0:	f7ff ff9a 	bl	13108 <ble_gap_master_extract_state>
    if (state.cb != NULL) {
   131d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   131d6:	b194      	cbz	r4, 131fe <ble_gap_master_connect_cancelled+0x36>
        memset(&event, 0, sizeof event);
   131d8:	2234      	movs	r2, #52	; 0x34
   131da:	2100      	movs	r1, #0
   131dc:	4668      	mov	r0, sp
   131de:	f7ff f99a 	bl	12516 <memset>
        event.connect.conn_handle = BLE_HS_CONN_HANDLE_NONE;
   131e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   131e6:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (state.conn.cancel) {
   131ea:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   131ee:	f013 0f08 	tst.w	r3, #8
   131f2:	d006      	beq.n	13202 <ble_gap_master_connect_cancelled+0x3a>
            event.connect.status = BLE_HS_EAPP;
   131f4:	2309      	movs	r3, #9
   131f6:	9301      	str	r3, [sp, #4]
        state.cb(&event, state.cb_arg);
   131f8:	9910      	ldr	r1, [sp, #64]	; 0x40
   131fa:	4668      	mov	r0, sp
   131fc:	47a0      	blx	r4
}
   131fe:	b012      	add	sp, #72	; 0x48
   13200:	bd10      	pop	{r4, pc}
            event.connect.status = BLE_HS_ETIMEOUT;
   13202:	230d      	movs	r3, #13
   13204:	9301      	str	r3, [sp, #4]
   13206:	e7f7      	b.n	131f8 <ble_gap_master_connect_cancelled+0x30>

00013208 <ble_gap_disc_complete>:
{
   13208:	b500      	push	{lr}
   1320a:	b093      	sub	sp, #76	; 0x4c
    memset(&event, 0, sizeof event);
   1320c:	2234      	movs	r2, #52	; 0x34
   1320e:	2100      	movs	r1, #0
   13210:	4668      	mov	r0, sp
   13212:	f7ff f980 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   13216:	2308      	movs	r3, #8
   13218:	f88d 3000 	strb.w	r3, [sp]
    ble_gap_master_extract_state(&state, 1);
   1321c:	2101      	movs	r1, #1
   1321e:	a80d      	add	r0, sp, #52	; 0x34
   13220:	f7ff ff72 	bl	13108 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   13224:	a80d      	add	r0, sp, #52	; 0x34
   13226:	f7ff fdfb 	bl	12e20 <ble_gap_has_client>
   1322a:	b928      	cbnz	r0, 13238 <ble_gap_disc_complete+0x30>
    ble_gap_event_listener_call(&event);
   1322c:	4668      	mov	r0, sp
   1322e:	f7ff fe99 	bl	12f64 <ble_gap_event_listener_call>
}
   13232:	b013      	add	sp, #76	; 0x4c
   13234:	f85d fb04 	ldr.w	pc, [sp], #4
        ble_gap_call_event_cb(&event, state.cb, state.cb_arg);
   13238:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1323a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1323c:	4668      	mov	r0, sp
   1323e:	f7ff fdc4 	bl	12dca <ble_gap_call_event_cb>
   13242:	e7f3      	b.n	1322c <ble_gap_disc_complete+0x24>

00013244 <ble_gap_slave_reset_state>:
{
   13244:	b508      	push	{r3, lr}
    ble_gap_slave[instance].op = BLE_GAP_OP_NULL;
   13246:	4b06      	ldr	r3, [pc, #24]	; (13260 <ble_gap_slave_reset_state+0x1c>)
   13248:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1324c:	2100      	movs	r1, #0
   1324e:	7501      	strb	r1, [r0, #20]
    ble_gap_slave[instance].exp_set = 0;
   13250:	7d42      	ldrb	r2, [r0, #21]
   13252:	f361 1204 	bfi	r2, r1, #4, #1
   13256:	7542      	strb	r2, [r0, #21]
    ble_hs_timer_resched();
   13258:	f003 fc2e 	bl	16ab8 <ble_hs_timer_resched>
}
   1325c:	bd08      	pop	{r3, pc}
   1325e:	bf00      	nop
   13260:	2000022c 	.word	0x2000022c

00013264 <ble_gap_slave_extract_cb>:
{
   13264:	b570      	push	{r4, r5, r6, lr}
   13266:	4604      	mov	r4, r0
   13268:	460e      	mov	r6, r1
   1326a:	4615      	mov	r5, r2
    ble_hs_lock();
   1326c:	f003 fb46 	bl	168fc <ble_hs_lock>
    *out_cb = ble_gap_slave[instance].cb;
   13270:	4b06      	ldr	r3, [pc, #24]	; (1328c <ble_gap_slave_extract_cb+0x28>)
   13272:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   13276:	69da      	ldr	r2, [r3, #28]
   13278:	6032      	str	r2, [r6, #0]
    *out_cb_arg = ble_gap_slave[instance].cb_arg;
   1327a:	6a1b      	ldr	r3, [r3, #32]
   1327c:	602b      	str	r3, [r5, #0]
    ble_gap_slave_reset_state(instance);
   1327e:	4620      	mov	r0, r4
   13280:	f7ff ffe0 	bl	13244 <ble_gap_slave_reset_state>
    ble_hs_unlock();
   13284:	f003 fb3e 	bl	16904 <ble_hs_unlock>
}
   13288:	bd70      	pop	{r4, r5, r6, pc}
   1328a:	bf00      	nop
   1328c:	2000022c 	.word	0x2000022c

00013290 <ble_gap_adv_finished>:
{
   13290:	b530      	push	{r4, r5, lr}
   13292:	b091      	sub	sp, #68	; 0x44
   13294:	460d      	mov	r5, r1
    ble_gap_slave_extract_cb(instance, &cb, &cb_arg);
   13296:	aa01      	add	r2, sp, #4
   13298:	a902      	add	r1, sp, #8
   1329a:	f7ff ffe3 	bl	13264 <ble_gap_slave_extract_cb>
    if (cb != NULL) {
   1329e:	9c02      	ldr	r4, [sp, #8]
   132a0:	b15c      	cbz	r4, 132ba <ble_gap_adv_finished+0x2a>
        memset(&event, 0, sizeof event);
   132a2:	2234      	movs	r2, #52	; 0x34
   132a4:	2100      	movs	r1, #0
   132a6:	a803      	add	r0, sp, #12
   132a8:	f7ff f935 	bl	12516 <memset>
        event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   132ac:	2309      	movs	r3, #9
   132ae:	f88d 300c 	strb.w	r3, [sp, #12]
        event.adv_complete.reason = reason;
   132b2:	9504      	str	r5, [sp, #16]
        cb(&event, cb_arg);
   132b4:	9901      	ldr	r1, [sp, #4]
   132b6:	a803      	add	r0, sp, #12
   132b8:	47a0      	blx	r4
}
   132ba:	b011      	add	sp, #68	; 0x44
   132bc:	bd30      	pop	{r4, r5, pc}
	...

000132c0 <ble_gap_update_entry_free>:
    if (entry != NULL) {
   132c0:	b128      	cbz	r0, 132ce <ble_gap_update_entry_free+0xe>
{
   132c2:	b508      	push	{r3, lr}
   132c4:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gap_update_entry_pool, entry);
   132c6:	4802      	ldr	r0, [pc, #8]	; (132d0 <ble_gap_update_entry_free+0x10>)
   132c8:	f7fe fa85 	bl	117d6 <os_memblock_put>
}
   132cc:	bd08      	pop	{r3, pc}
   132ce:	4770      	bx	lr
   132d0:	20002570 	.word	0x20002570

000132d4 <ble_gap_master_ticks_until_exp>:
    if (ble_gap_master.op == BLE_GAP_OP_NULL || !ble_gap_master.exp_set) {
   132d4:	4b0c      	ldr	r3, [pc, #48]	; (13308 <ble_gap_master_ticks_until_exp+0x34>)
   132d6:	781b      	ldrb	r3, [r3, #0]
   132d8:	b16b      	cbz	r3, 132f6 <ble_gap_master_ticks_until_exp+0x22>
   132da:	4b0b      	ldr	r3, [pc, #44]	; (13308 <ble_gap_master_ticks_until_exp+0x34>)
   132dc:	785b      	ldrb	r3, [r3, #1]
   132de:	f013 0f01 	tst.w	r3, #1
   132e2:	d00b      	beq.n	132fc <ble_gap_master_ticks_until_exp+0x28>
{
   132e4:	b510      	push	{r4, lr}
    ticks = ble_gap_master.exp_os_ticks - ble_npl_time_get();
   132e6:	4b08      	ldr	r3, [pc, #32]	; (13308 <ble_gap_master_ticks_until_exp+0x34>)
   132e8:	685c      	ldr	r4, [r3, #4]
}

static inline uint32_t
ble_npl_time_get(void)
{
    return os_time_get();
   132ea:	f7fe ff27 	bl	1213c <os_time_get>
   132ee:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   132f0:	2800      	cmp	r0, #0
   132f2:	dd06      	ble.n	13302 <ble_gap_master_ticks_until_exp+0x2e>
}
   132f4:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   132f6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   132fa:	4770      	bx	lr
   132fc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   13300:	4770      	bx	lr
    return 0;
   13302:	2000      	movs	r0, #0
   13304:	e7f6      	b.n	132f4 <ble_gap_master_ticks_until_exp+0x20>
   13306:	bf00      	nop
   13308:	2000022c 	.word	0x2000022c

0001330c <ble_gap_update_next_exp>:
{
   1330c:	b538      	push	{r3, r4, r5, lr}
   1330e:	4605      	mov	r5, r0
   13310:	f7fe ff14 	bl	1213c <os_time_get>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   13314:	4b0b      	ldr	r3, [pc, #44]	; (13344 <ble_gap_update_next_exp+0x38>)
   13316:	681a      	ldr	r2, [r3, #0]
    best_ticks = BLE_HS_FOREVER;
   13318:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1331c:	f64f 74ff 	movw	r4, #65535	; 0xffff
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   13320:	e002      	b.n	13328 <ble_gap_update_next_exp+0x1c>
            ticks = 0;
   13322:	2300      	movs	r3, #0
   13324:	e005      	b.n	13332 <ble_gap_update_next_exp+0x26>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   13326:	6812      	ldr	r2, [r2, #0]
   13328:	b142      	cbz	r2, 1333c <ble_gap_update_next_exp+0x30>
        ticks = entry->exp_os_ticks - now;
   1332a:	6913      	ldr	r3, [r2, #16]
   1332c:	1a1b      	subs	r3, r3, r0
        if (ticks <= 0) {
   1332e:	2b00      	cmp	r3, #0
   13330:	ddf7      	ble.n	13322 <ble_gap_update_next_exp+0x16>
        if (ticks < best_ticks) {
   13332:	4299      	cmp	r1, r3
   13334:	ddf7      	ble.n	13326 <ble_gap_update_next_exp+0x1a>
            conn_handle = entry->conn_handle;
   13336:	8a94      	ldrh	r4, [r2, #20]
            best_ticks = ticks;
   13338:	4619      	mov	r1, r3
   1333a:	e7f4      	b.n	13326 <ble_gap_update_next_exp+0x1a>
    if (out_ticks_from_now != NULL) {
   1333c:	b105      	cbz	r5, 13340 <ble_gap_update_next_exp+0x34>
        *out_ticks_from_now = best_ticks;
   1333e:	6029      	str	r1, [r5, #0]
}
   13340:	4620      	mov	r0, r4
   13342:	bd38      	pop	{r3, r4, r5, pc}
   13344:	20002554 	.word	0x20002554

00013348 <ble_gap_slave_ticks_until_exp>:
    if (ble_gap_slave[0].op == BLE_GAP_OP_NULL || !ble_gap_slave[0].exp_set) {
   13348:	4b0c      	ldr	r3, [pc, #48]	; (1337c <ble_gap_slave_ticks_until_exp+0x34>)
   1334a:	7d1b      	ldrb	r3, [r3, #20]
   1334c:	b16b      	cbz	r3, 1336a <ble_gap_slave_ticks_until_exp+0x22>
   1334e:	4b0b      	ldr	r3, [pc, #44]	; (1337c <ble_gap_slave_ticks_until_exp+0x34>)
   13350:	7d5b      	ldrb	r3, [r3, #21]
   13352:	f013 0f10 	tst.w	r3, #16
   13356:	d00b      	beq.n	13370 <ble_gap_slave_ticks_until_exp+0x28>
{
   13358:	b510      	push	{r4, lr}
    ticks = ble_gap_slave[0].exp_os_ticks - ble_npl_time_get();
   1335a:	4b08      	ldr	r3, [pc, #32]	; (1337c <ble_gap_slave_ticks_until_exp+0x34>)
   1335c:	699c      	ldr	r4, [r3, #24]
   1335e:	f7fe feed 	bl	1213c <os_time_get>
   13362:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   13364:	2800      	cmp	r0, #0
   13366:	dd06      	ble.n	13376 <ble_gap_slave_ticks_until_exp+0x2e>
}
   13368:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   1336a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1336e:	4770      	bx	lr
   13370:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   13374:	4770      	bx	lr
    return 0;
   13376:	2000      	movs	r0, #0
   13378:	e7f6      	b.n	13368 <ble_gap_slave_ticks_until_exp+0x20>
   1337a:	bf00      	nop
   1337c:	2000022c 	.word	0x2000022c

00013380 <ble_gap_slave_set_timer>:
{
   13380:	b510      	push	{r4, lr}
   13382:	4604      	mov	r4, r0
   13384:	f7fe feda 	bl	1213c <os_time_get>
    ble_gap_slave[0].exp_os_ticks = ble_npl_time_get() + ticks_from_now;
   13388:	4420      	add	r0, r4
   1338a:	4b04      	ldr	r3, [pc, #16]	; (1339c <ble_gap_slave_set_timer+0x1c>)
   1338c:	6198      	str	r0, [r3, #24]
    ble_gap_slave[0].exp_set = 1;
   1338e:	7d5a      	ldrb	r2, [r3, #21]
   13390:	f042 0210 	orr.w	r2, r2, #16
   13394:	755a      	strb	r2, [r3, #21]
    ble_hs_timer_resched();
   13396:	f003 fb8f 	bl	16ab8 <ble_hs_timer_resched>
}
   1339a:	bd10      	pop	{r4, pc}
   1339c:	2000022c 	.word	0x2000022c

000133a0 <ble_gap_rx_adv_report_sanity_check>:
    if (ble_gap_master.op != BLE_GAP_OP_M_DISC) {
   133a0:	4b14      	ldr	r3, [pc, #80]	; (133f4 <ble_gap_rx_adv_report_sanity_check+0x54>)
   133a2:	781b      	ldrb	r3, [r3, #0]
   133a4:	2b01      	cmp	r3, #1
   133a6:	d11c      	bne.n	133e2 <ble_gap_rx_adv_report_sanity_check+0x42>
    if (ble_gap_master.disc.limited) {
   133a8:	4b12      	ldr	r3, [pc, #72]	; (133f4 <ble_gap_rx_adv_report_sanity_check+0x54>)
   133aa:	7c5b      	ldrb	r3, [r3, #17]
   133ac:	f013 0f01 	tst.w	r3, #1
   133b0:	d102      	bne.n	133b8 <ble_gap_rx_adv_report_sanity_check+0x18>
    return 0;
   133b2:	2300      	movs	r3, #0
}
   133b4:	4618      	mov	r0, r3
   133b6:	4770      	bx	lr
{
   133b8:	b500      	push	{lr}
   133ba:	b083      	sub	sp, #12
   133bc:	460a      	mov	r2, r1
   133be:	4601      	mov	r1, r0
        rc = ble_hs_adv_find_field(BLE_HS_ADV_TYPE_FLAGS, adv_data,
   133c0:	ab01      	add	r3, sp, #4
   133c2:	2001      	movs	r0, #1
   133c4:	f003 ff5a 	bl	1727c <ble_hs_adv_find_field>
        if ((rc == 0) && (flags->length == 2) &&
   133c8:	4603      	mov	r3, r0
   133ca:	b968      	cbnz	r0, 133e8 <ble_gap_rx_adv_report_sanity_check+0x48>
   133cc:	9a01      	ldr	r2, [sp, #4]
   133ce:	7811      	ldrb	r1, [r2, #0]
   133d0:	2902      	cmp	r1, #2
   133d2:	d10a      	bne.n	133ea <ble_gap_rx_adv_report_sanity_check+0x4a>
            !(flags->value[0] & BLE_HS_ADV_F_DISC_LTD)) {
   133d4:	7892      	ldrb	r2, [r2, #2]
        if ((rc == 0) && (flags->length == 2) &&
   133d6:	f012 0f01 	tst.w	r2, #1
   133da:	d106      	bne.n	133ea <ble_gap_rx_adv_report_sanity_check+0x4a>
            return -1;
   133dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   133e0:	e003      	b.n	133ea <ble_gap_rx_adv_report_sanity_check+0x4a>
        return -1;
   133e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   133e6:	e7e5      	b.n	133b4 <ble_gap_rx_adv_report_sanity_check+0x14>
    return 0;
   133e8:	2300      	movs	r3, #0
}
   133ea:	4618      	mov	r0, r3
   133ec:	b003      	add	sp, #12
   133ee:	f85d fb04 	ldr.w	pc, [sp], #4
   133f2:	bf00      	nop
   133f4:	2000022c 	.word	0x2000022c

000133f8 <ble_gap_rd_rem_sup_feat_tx>:
{
   133f8:	b500      	push	{lr}
   133fa:	b083      	sub	sp, #12
    rc = ble_hs_hci_cmd_build_le_read_remote_feat(handle, buf, sizeof buf);
   133fc:	2202      	movs	r2, #2
   133fe:	a901      	add	r1, sp, #4
   13400:	f004 fd6c 	bl	17edc <ble_hs_hci_cmd_build_le_read_remote_feat>
    if (rc != 0) {
   13404:	b940      	cbnz	r0, 13418 <ble_gap_rd_rem_sup_feat_tx+0x20>
    rc = ble_hs_hci_cmd_tx_empty_ack(BLE_HCI_OP(BLE_HCI_OGF_LE,
   13406:	2202      	movs	r2, #2
   13408:	a901      	add	r1, sp, #4
   1340a:	f242 0016 	movw	r0, #8214	; 0x2016
   1340e:	f004 fa89 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
}
   13412:	b003      	add	sp, #12
   13414:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EUNKNOWN;
   13418:	2011      	movs	r0, #17
   1341a:	e7fa      	b.n	13412 <ble_gap_rd_rem_sup_feat_tx+0x1a>

0001341c <ble_gap_conn_cancel_tx>:
{
   1341c:	b508      	push	{r3, lr}
    rc = ble_hs_hci_cmd_tx_empty_ack(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1341e:	2200      	movs	r2, #0
   13420:	4611      	mov	r1, r2
   13422:	f242 000e 	movw	r0, #8206	; 0x200e
   13426:	f004 fa7d 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
}
   1342a:	bd08      	pop	{r3, pc}

0001342c <ble_gap_disc_enable_tx>:
{
   1342c:	b500      	push	{lr}
   1342e:	b083      	sub	sp, #12
    ble_hs_hci_cmd_build_le_set_scan_enable(!!enable, !!filter_duplicates,
   13430:	2302      	movs	r3, #2
   13432:	aa01      	add	r2, sp, #4
   13434:	3100      	adds	r1, #0
   13436:	bf18      	it	ne
   13438:	2101      	movne	r1, #1
   1343a:	3000      	adds	r0, #0
   1343c:	bf18      	it	ne
   1343e:	2001      	movne	r0, #1
   13440:	f004 fd06 	bl	17e50 <ble_hs_hci_cmd_build_le_set_scan_enable>
    rc = ble_hs_hci_cmd_tx_empty_ack(
   13444:	2202      	movs	r2, #2
   13446:	a901      	add	r1, sp, #4
   13448:	f242 000c 	movw	r0, #8204	; 0x200c
   1344c:	f004 fa6a 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
}
   13450:	b003      	add	sp, #12
   13452:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00013458 <ble_gap_master_timer>:
{
   13458:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_master_ticks_until_exp();
   1345a:	f7ff ff3b 	bl	132d4 <ble_gap_master_ticks_until_exp>
    if (ticks_until_exp != 0) {
   1345e:	b9f0      	cbnz	r0, 1349e <ble_gap_master_timer+0x46>
    switch (ble_gap_master.op) {
   13460:	4b10      	ldr	r3, [pc, #64]	; (134a4 <ble_gap_master_timer+0x4c>)
   13462:	781b      	ldrb	r3, [r3, #0]
   13464:	2b01      	cmp	r3, #1
   13466:	d00c      	beq.n	13482 <ble_gap_master_timer+0x2a>
   13468:	2b02      	cmp	r3, #2
   1346a:	d116      	bne.n	1349a <ble_gap_master_timer+0x42>
        rc = ble_gap_conn_cancel_tx();
   1346c:	f7ff ffd6 	bl	1341c <ble_gap_conn_cancel_tx>
        if (rc != 0) {
   13470:	b9b0      	cbnz	r0, 134a0 <ble_gap_master_timer+0x48>
            ble_gap_master.exp_set = 0;
   13472:	4b0c      	ldr	r3, [pc, #48]	; (134a4 <ble_gap_master_timer+0x4c>)
   13474:	785a      	ldrb	r2, [r3, #1]
   13476:	f36f 0200 	bfc	r2, #0, #1
   1347a:	705a      	strb	r2, [r3, #1]
    return BLE_HS_FOREVER;
   1347c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   13480:	e00d      	b.n	1349e <ble_gap_master_timer+0x46>
        rc = ble_gap_disc_enable_tx(0, 0);
   13482:	2100      	movs	r1, #0
   13484:	4608      	mov	r0, r1
   13486:	f7ff ffd1 	bl	1342c <ble_gap_disc_enable_tx>
        if (rc != 0) {
   1348a:	b108      	cbz	r0, 13490 <ble_gap_master_timer+0x38>
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   1348c:	200c      	movs	r0, #12
   1348e:	e006      	b.n	1349e <ble_gap_master_timer+0x46>
        ble_gap_disc_complete();
   13490:	f7ff feba 	bl	13208 <ble_gap_disc_complete>
    return BLE_HS_FOREVER;
   13494:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   13498:	e001      	b.n	1349e <ble_gap_master_timer+0x46>
    return BLE_HS_FOREVER;
   1349a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1349e:	bd08      	pop	{r3, pc}
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   134a0:	200c      	movs	r0, #12
   134a2:	e7fc      	b.n	1349e <ble_gap_master_timer+0x46>
   134a4:	2000022c 	.word	0x2000022c

000134a8 <ble_gap_disc_disable_tx>:
{
   134a8:	b508      	push	{r3, lr}
    return ble_gap_disc_enable_tx(0, 0);
   134aa:	2100      	movs	r1, #0
   134ac:	4608      	mov	r0, r1
   134ae:	f7ff ffbd 	bl	1342c <ble_gap_disc_enable_tx>
}
   134b2:	bd08      	pop	{r3, pc}

000134b4 <ble_gap_adv_enable_tx>:
{
   134b4:	b500      	push	{lr}
   134b6:	b083      	sub	sp, #12
    ble_hs_hci_cmd_build_le_set_adv_enable(!!enable, buf, sizeof buf);
   134b8:	2201      	movs	r2, #1
   134ba:	a901      	add	r1, sp, #4
   134bc:	3000      	adds	r0, #0
   134be:	bf18      	it	ne
   134c0:	2001      	movne	r0, #1
   134c2:	f004 fcc1 	bl	17e48 <ble_hs_hci_cmd_build_le_set_adv_enable>
    rc = ble_hs_hci_cmd_tx_empty_ack(opcode, buf, sizeof(buf));
   134c6:	2201      	movs	r2, #1
   134c8:	a901      	add	r1, sp, #4
   134ca:	f242 000a 	movw	r0, #8202	; 0x200a
   134ce:	f004 fa29 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
}
   134d2:	b003      	add	sp, #12
   134d4:	f85d fb04 	ldr.w	pc, [sp], #4

000134d8 <ble_gap_slave_timer>:
{
   134d8:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_slave_ticks_until_exp();
   134da:	f7ff ff35 	bl	13348 <ble_gap_slave_ticks_until_exp>
    if (ticks_until_exp != 0) {
   134de:	b100      	cbz	r0, 134e2 <ble_gap_slave_timer+0xa>
}
   134e0:	bd08      	pop	{r3, pc}
    rc = ble_gap_adv_enable_tx(0);
   134e2:	2000      	movs	r0, #0
   134e4:	f7ff ffe6 	bl	134b4 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   134e8:	b108      	cbz	r0, 134ee <ble_gap_slave_timer+0x16>
        return 100;
   134ea:	2064      	movs	r0, #100	; 0x64
   134ec:	e7f8      	b.n	134e0 <ble_gap_slave_timer+0x8>
    ble_gap_slave_reset_state(0);
   134ee:	f7ff fea9 	bl	13244 <ble_gap_slave_reset_state>
    ble_gap_adv_finished(0, BLE_HS_ETIMEOUT, 0, 0);
   134f2:	2300      	movs	r3, #0
   134f4:	461a      	mov	r2, r3
   134f6:	210d      	movs	r1, #13
   134f8:	4618      	mov	r0, r3
   134fa:	f7ff fec9 	bl	13290 <ble_gap_adv_finished>
    return BLE_HS_FOREVER;
   134fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   13502:	e7ed      	b.n	134e0 <ble_gap_slave_timer+0x8>

00013504 <ble_gap_adv_validate>:
    if (adv_params == NULL) {
   13504:	b37a      	cbz	r2, 13566 <ble_gap_adv_validate+0x62>
{
   13506:	b508      	push	{r3, lr}
   13508:	4613      	mov	r3, r2
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   1350a:	2803      	cmp	r0, #3
   1350c:	d82d      	bhi.n	1356a <ble_gap_adv_validate+0x66>
    if (adv_params->disc_mode >= BLE_GAP_DISC_MODE_MAX) {
   1350e:	7852      	ldrb	r2, [r2, #1]
   13510:	2a02      	cmp	r2, #2
   13512:	d82c      	bhi.n	1356e <ble_gap_adv_validate+0x6a>
    if (ble_gap_slave[0].op != BLE_GAP_OP_NULL) {
   13514:	4a1b      	ldr	r2, [pc, #108]	; (13584 <ble_gap_adv_validate+0x80>)
   13516:	7d12      	ldrb	r2, [r2, #20]
   13518:	bb5a      	cbnz	r2, 13572 <ble_gap_adv_validate+0x6e>
    switch (adv_params->conn_mode) {
   1351a:	781a      	ldrb	r2, [r3, #0]
   1351c:	2a01      	cmp	r2, #1
   1351e:	d017      	beq.n	13550 <ble_gap_adv_validate+0x4c>
   13520:	b11a      	cbz	r2, 1352a <ble_gap_adv_validate+0x26>
   13522:	2a02      	cmp	r2, #2
   13524:	d009      	beq.n	1353a <ble_gap_adv_validate+0x36>
        return BLE_HS_EINVAL;
   13526:	2003      	movs	r0, #3
   13528:	e020      	b.n	1356c <ble_gap_adv_validate+0x68>
        if (adv_params->high_duty_cycle) {
   1352a:	7a1b      	ldrb	r3, [r3, #8]
   1352c:	f013 0f01 	tst.w	r3, #1
   13530:	d101      	bne.n	13536 <ble_gap_adv_validate+0x32>
    return 0;
   13532:	2000      	movs	r0, #0
   13534:	e01a      	b.n	1356c <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
   13536:	2003      	movs	r0, #3
   13538:	e018      	b.n	1356c <ble_gap_adv_validate+0x68>
        if (adv_params->high_duty_cycle) {
   1353a:	7a1b      	ldrb	r3, [r3, #8]
   1353c:	f013 0f01 	tst.w	r3, #1
   13540:	d119      	bne.n	13576 <ble_gap_adv_validate+0x72>
        if (!ble_hs_conn_can_alloc()) {
   13542:	f003 feef 	bl	17324 <ble_hs_conn_can_alloc>
   13546:	b108      	cbz	r0, 1354c <ble_gap_adv_validate+0x48>
    return 0;
   13548:	2000      	movs	r0, #0
   1354a:	e00f      	b.n	1356c <ble_gap_adv_validate+0x68>
            return BLE_HS_ENOMEM;
   1354c:	2006      	movs	r0, #6
   1354e:	e00d      	b.n	1356c <ble_gap_adv_validate+0x68>
        if (peer_addr == NULL) {
   13550:	b199      	cbz	r1, 1357a <ble_gap_adv_validate+0x76>
        if (peer_addr->type != BLE_ADDR_PUBLIC &&
   13552:	780b      	ldrb	r3, [r1, #0]
   13554:	2b03      	cmp	r3, #3
   13556:	d812      	bhi.n	1357e <ble_gap_adv_validate+0x7a>
        if (!ble_hs_conn_can_alloc()) {
   13558:	f003 fee4 	bl	17324 <ble_hs_conn_can_alloc>
   1355c:	b108      	cbz	r0, 13562 <ble_gap_adv_validate+0x5e>
    return 0;
   1355e:	2000      	movs	r0, #0
   13560:	e004      	b.n	1356c <ble_gap_adv_validate+0x68>
            return BLE_HS_ENOMEM;
   13562:	2006      	movs	r0, #6
   13564:	e002      	b.n	1356c <ble_gap_adv_validate+0x68>
        return BLE_HS_EINVAL;
   13566:	2003      	movs	r0, #3
}
   13568:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1356a:	2003      	movs	r0, #3
}
   1356c:	bd08      	pop	{r3, pc}
        return BLE_HS_EINVAL;
   1356e:	2003      	movs	r0, #3
   13570:	e7fc      	b.n	1356c <ble_gap_adv_validate+0x68>
        return BLE_HS_EALREADY;
   13572:	2002      	movs	r0, #2
   13574:	e7fa      	b.n	1356c <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
   13576:	2003      	movs	r0, #3
   13578:	e7f8      	b.n	1356c <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
   1357a:	2003      	movs	r0, #3
   1357c:	e7f6      	b.n	1356c <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
   1357e:	2003      	movs	r0, #3
   13580:	e7f4      	b.n	1356c <ble_gap_adv_validate+0x68>
   13582:	bf00      	nop
   13584:	2000022c 	.word	0x2000022c

00013588 <ble_gap_adv_params_tx>:
{
   13588:	b510      	push	{r4, lr}
   1358a:	b08a      	sub	sp, #40	; 0x28
   1358c:	4614      	mov	r4, r2
    const ble_addr_t *peer_any = BLE_ADDR_ANY;
   1358e:	2300      	movs	r3, #0
   13590:	9308      	str	r3, [sp, #32]
   13592:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    if (peer_addr == NULL) {
   13596:	460b      	mov	r3, r1
   13598:	b381      	cbz	r1, 135fc <ble_gap_adv_params_tx+0x74>
    hci_adv_params.own_addr_type = own_addr_type;
   1359a:	f88d 0012 	strb.w	r0, [sp, #18]
    hci_adv_params.peer_addr_type = peer_addr->type;
   1359e:	781a      	ldrb	r2, [r3, #0]
   135a0:	f88d 2013 	strb.w	r2, [sp, #19]
    memcpy(hci_adv_params.peer_addr, peer_addr->val,
   135a4:	4619      	mov	r1, r3
   135a6:	f851 3f01 	ldr.w	r3, [r1, #1]!
   135aa:	f8cd 301a 	str.w	r3, [sp, #26]
   135ae:	888b      	ldrh	r3, [r1, #4]
   135b0:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (adv_params->itvl_min == 0 && adv_params->itvl_max == 0) {
   135b4:	8863      	ldrh	r3, [r4, #2]
   135b6:	b90b      	cbnz	r3, 135bc <ble_gap_adv_params_tx+0x34>
   135b8:	88a2      	ldrh	r2, [r4, #4]
   135ba:	b30a      	cbz	r2, 13600 <ble_gap_adv_params_tx+0x78>
        hci_adv_params.adv_itvl_min = adv_params->itvl_min;
   135bc:	f8ad 3016 	strh.w	r3, [sp, #22]
        hci_adv_params.adv_itvl_max = adv_params->itvl_max;
   135c0:	88a3      	ldrh	r3, [r4, #4]
   135c2:	f8ad 3018 	strh.w	r3, [sp, #24]
    if (adv_params->channel_map == 0) {
   135c6:	79a3      	ldrb	r3, [r4, #6]
   135c8:	bb0b      	cbnz	r3, 1360e <ble_gap_adv_params_tx+0x86>
        hci_adv_params.adv_channel_map = BLE_GAP_ADV_DFLT_CHANNEL_MAP;
   135ca:	2307      	movs	r3, #7
   135cc:	f88d 3011 	strb.w	r3, [sp, #17]
    hci_adv_params.adv_filter_policy = adv_params->filter_policy;
   135d0:	79e3      	ldrb	r3, [r4, #7]
   135d2:	f88d 3014 	strb.w	r3, [sp, #20]
    hci_adv_params.adv_type = ble_gap_adv_type(adv_params);
   135d6:	4620      	mov	r0, r4
   135d8:	f7ff fc62 	bl	12ea0 <ble_gap_adv_type>
   135dc:	f88d 0010 	strb.w	r0, [sp, #16]
    rc = ble_hs_hci_cmd_build_le_set_adv_params(&hci_adv_params,
   135e0:	220f      	movs	r2, #15
   135e2:	4669      	mov	r1, sp
   135e4:	a804      	add	r0, sp, #16
   135e6:	f004 fc17 	bl	17e18 <ble_hs_hci_cmd_build_le_set_adv_params>
    if (rc != 0) {
   135ea:	b998      	cbnz	r0, 13614 <ble_gap_adv_params_tx+0x8c>
    rc = ble_hs_hci_cmd_tx_empty_ack(BLE_HCI_OP(BLE_HCI_OGF_LE,
   135ec:	220f      	movs	r2, #15
   135ee:	4669      	mov	r1, sp
   135f0:	f242 0006 	movw	r0, #8198	; 0x2006
   135f4:	f004 f996 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
}
   135f8:	b00a      	add	sp, #40	; 0x28
   135fa:	bd10      	pop	{r4, pc}
        peer_addr = peer_any;
   135fc:	ab08      	add	r3, sp, #32
   135fe:	e7cc      	b.n	1359a <ble_gap_adv_params_tx+0x12>
        ble_gap_adv_dflt_itvls(adv_params->conn_mode,
   13600:	aa06      	add	r2, sp, #24
   13602:	f10d 0116 	add.w	r1, sp, #22
   13606:	7820      	ldrb	r0, [r4, #0]
   13608:	f7ff fc5e 	bl	12ec8 <ble_gap_adv_dflt_itvls>
   1360c:	e7db      	b.n	135c6 <ble_gap_adv_params_tx+0x3e>
        hci_adv_params.adv_channel_map = adv_params->channel_map;
   1360e:	f88d 3011 	strb.w	r3, [sp, #17]
   13612:	e7dd      	b.n	135d0 <ble_gap_adv_params_tx+0x48>
        return BLE_HS_EINVAL;
   13614:	2003      	movs	r0, #3
   13616:	e7ef      	b.n	135f8 <ble_gap_adv_params_tx+0x70>

00013618 <ble_gap_tx_param_pos_reply>:
{
   13618:	b500      	push	{lr}
   1361a:	b089      	sub	sp, #36	; 0x24
    pos_reply.handle = conn_handle;
   1361c:	f8ad 0000 	strh.w	r0, [sp]
    pos_reply.conn_itvl_min = params->itvl_min;
   13620:	880b      	ldrh	r3, [r1, #0]
   13622:	f8ad 3002 	strh.w	r3, [sp, #2]
    pos_reply.conn_itvl_max = params->itvl_max;
   13626:	884b      	ldrh	r3, [r1, #2]
   13628:	f8ad 3004 	strh.w	r3, [sp, #4]
    pos_reply.conn_latency = params->latency;
   1362c:	888b      	ldrh	r3, [r1, #4]
   1362e:	f8ad 3006 	strh.w	r3, [sp, #6]
    pos_reply.supervision_timeout = params->supervision_timeout;
   13632:	88cb      	ldrh	r3, [r1, #6]
   13634:	f8ad 3008 	strh.w	r3, [sp, #8]
    pos_reply.min_ce_len = params->min_ce_len;
   13638:	890b      	ldrh	r3, [r1, #8]
   1363a:	f8ad 300a 	strh.w	r3, [sp, #10]
    pos_reply.max_ce_len = params->max_ce_len;
   1363e:	894b      	ldrh	r3, [r1, #10]
   13640:	f8ad 300c 	strh.w	r3, [sp, #12]
    ble_hs_hci_cmd_build_le_conn_param_reply(&pos_reply, buf, sizeof buf);
   13644:	220e      	movs	r2, #14
   13646:	a904      	add	r1, sp, #16
   13648:	4668      	mov	r0, sp
   1364a:	f004 fc14 	bl	17e76 <ble_hs_hci_cmd_build_le_conn_param_reply>
    rc = ble_hs_hci_cmd_tx_empty_ack(
   1364e:	220e      	movs	r2, #14
   13650:	a904      	add	r1, sp, #16
   13652:	f242 0020 	movw	r0, #8224	; 0x2020
   13656:	f004 f965 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
}
   1365a:	b009      	add	sp, #36	; 0x24
   1365c:	f85d fb04 	ldr.w	pc, [sp], #4

00013660 <ble_gap_tx_param_neg_reply>:
{
   13660:	b500      	push	{lr}
   13662:	b083      	sub	sp, #12
    neg_reply.handle = conn_handle;
   13664:	f8ad 0000 	strh.w	r0, [sp]
    neg_reply.reason = reject_reason;
   13668:	f88d 1002 	strb.w	r1, [sp, #2]
    ble_hs_hci_cmd_build_le_conn_param_neg_reply(&neg_reply, buf, sizeof buf);
   1366c:	2203      	movs	r2, #3
   1366e:	a901      	add	r1, sp, #4
   13670:	4668      	mov	r0, sp
   13672:	f004 fc04 	bl	17e7e <ble_hs_hci_cmd_build_le_conn_param_neg_reply>
    rc = ble_hs_hci_cmd_tx_empty_ack(BLE_HCI_OP(BLE_HCI_OGF_LE,
   13676:	2203      	movs	r2, #3
   13678:	a901      	add	r1, sp, #4
   1367a:	f242 0021 	movw	r0, #8225	; 0x2021
   1367e:	f004 f951 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
}
   13682:	b003      	add	sp, #12
   13684:	f85d fb04 	ldr.w	pc, [sp], #4

00013688 <ble_gap_update_entry_alloc>:
{
   13688:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_gap_update_entry_pool);
   1368a:	4807      	ldr	r0, [pc, #28]	; (136a8 <ble_gap_update_entry_alloc+0x20>)
   1368c:	f7fe f87b 	bl	11786 <os_memblock_get>
    if (entry != NULL) {
   13690:	4603      	mov	r3, r0
   13692:	b130      	cbz	r0, 136a2 <ble_gap_update_entry_alloc+0x1a>
        memset(entry, 0, sizeof *entry);
   13694:	2200      	movs	r2, #0
   13696:	6002      	str	r2, [r0, #0]
   13698:	6042      	str	r2, [r0, #4]
   1369a:	6082      	str	r2, [r0, #8]
   1369c:	60c2      	str	r2, [r0, #12]
   1369e:	6102      	str	r2, [r0, #16]
   136a0:	6142      	str	r2, [r0, #20]
}
   136a2:	4618      	mov	r0, r3
   136a4:	bd08      	pop	{r3, pc}
   136a6:	bf00      	nop
   136a8:	20002570 	.word	0x20002570

000136ac <ble_gap_update_tx>:
{
   136ac:	b500      	push	{lr}
   136ae:	b089      	sub	sp, #36	; 0x24
    cmd.handle = conn_handle;
   136b0:	f8ad 0000 	strh.w	r0, [sp]
    cmd.conn_itvl_min = params->itvl_min;
   136b4:	880b      	ldrh	r3, [r1, #0]
   136b6:	f8ad 3002 	strh.w	r3, [sp, #2]
    cmd.conn_itvl_max = params->itvl_max;
   136ba:	884b      	ldrh	r3, [r1, #2]
   136bc:	f8ad 3004 	strh.w	r3, [sp, #4]
    cmd.conn_latency = params->latency;
   136c0:	888b      	ldrh	r3, [r1, #4]
   136c2:	f8ad 3006 	strh.w	r3, [sp, #6]
    cmd.supervision_timeout = params->supervision_timeout;
   136c6:	88cb      	ldrh	r3, [r1, #6]
   136c8:	f8ad 3008 	strh.w	r3, [sp, #8]
    cmd.min_ce_len = params->min_ce_len;
   136cc:	890b      	ldrh	r3, [r1, #8]
   136ce:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.max_ce_len = params->max_ce_len;
   136d2:	894b      	ldrh	r3, [r1, #10]
   136d4:	f8ad 300c 	strh.w	r3, [sp, #12]
    rc = ble_hs_hci_cmd_build_le_conn_update(&cmd, buf, sizeof buf);
   136d8:	220e      	movs	r2, #14
   136da:	a904      	add	r1, sp, #16
   136dc:	4668      	mov	r0, sp
   136de:	f004 fbbb 	bl	17e58 <ble_hs_hci_cmd_build_le_conn_update>
    if (rc != 0) {
   136e2:	4603      	mov	r3, r0
   136e4:	b118      	cbz	r0, 136ee <ble_gap_update_tx+0x42>
}
   136e6:	4618      	mov	r0, r3
   136e8:	b009      	add	sp, #36	; 0x24
   136ea:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_hs_hci_cmd_tx_empty_ack(BLE_HCI_OP(BLE_HCI_OGF_LE,
   136ee:	220e      	movs	r2, #14
   136f0:	a904      	add	r1, sp, #16
   136f2:	f242 0013 	movw	r0, #8211	; 0x2013
   136f6:	f004 f915 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
   136fa:	4603      	mov	r3, r0
   136fc:	e7f3      	b.n	136e6 <ble_gap_update_tx+0x3a>

000136fe <ble_gap_conn_find>:
{
   136fe:	b538      	push	{r3, r4, r5, lr}
   13700:	4604      	mov	r4, r0
   13702:	460d      	mov	r5, r1
    ble_hs_lock();
   13704:	f003 f8fa 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   13708:	4620      	mov	r0, r4
   1370a:	f003 fecd 	bl	174a8 <ble_hs_conn_find>
    if (conn != NULL && out_desc != NULL) {
   1370e:	4604      	mov	r4, r0
   13710:	b118      	cbz	r0, 1371a <ble_gap_conn_find+0x1c>
   13712:	b115      	cbz	r5, 1371a <ble_gap_conn_find+0x1c>
        ble_gap_fill_conn_desc(conn, out_desc);
   13714:	4629      	mov	r1, r5
   13716:	f7ff fc63 	bl	12fe0 <ble_gap_fill_conn_desc>
    ble_hs_unlock();
   1371a:	f003 f8f3 	bl	16904 <ble_hs_unlock>
    if (conn == NULL) {
   1371e:	b10c      	cbz	r4, 13724 <ble_gap_conn_find+0x26>
        return 0;
   13720:	2000      	movs	r0, #0
}
   13722:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   13724:	2007      	movs	r0, #7
   13726:	e7fc      	b.n	13722 <ble_gap_conn_find+0x24>

00013728 <ble_gap_master_in_progress>:
    return ble_gap_master.op != BLE_GAP_OP_NULL;
   13728:	4b02      	ldr	r3, [pc, #8]	; (13734 <ble_gap_master_in_progress+0xc>)
   1372a:	7818      	ldrb	r0, [r3, #0]
}
   1372c:	3000      	adds	r0, #0
   1372e:	bf18      	it	ne
   13730:	2001      	movne	r0, #1
   13732:	4770      	bx	lr
   13734:	2000022c 	.word	0x2000022c

00013738 <ble_gap_rx_adv_report>:
{
   13738:	b510      	push	{r4, lr}
   1373a:	4604      	mov	r4, r0
    if (ble_gap_rx_adv_report_sanity_check(desc->data, desc->length_data)) {
   1373c:	7841      	ldrb	r1, [r0, #1]
   1373e:	68c0      	ldr	r0, [r0, #12]
   13740:	f7ff fe2e 	bl	133a0 <ble_gap_rx_adv_report_sanity_check>
   13744:	b100      	cbz	r0, 13748 <ble_gap_rx_adv_report+0x10>
}
   13746:	bd10      	pop	{r4, pc}
    ble_gap_disc_report(desc);
   13748:	4620      	mov	r0, r4
   1374a:	f7ff fcf5 	bl	13138 <ble_gap_disc_report>
   1374e:	e7fa      	b.n	13746 <ble_gap_rx_adv_report+0xe>

00013750 <ble_gap_rx_rd_rem_sup_feat_complete>:
{
   13750:	b538      	push	{r3, r4, r5, lr}
   13752:	4604      	mov	r4, r0
    ble_hs_lock();
   13754:	f003 f8d2 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(evt->connection_handle);
   13758:	8860      	ldrh	r0, [r4, #2]
   1375a:	f003 fea5 	bl	174a8 <ble_hs_conn_find>
    if (conn != NULL && evt->status == 0) {
   1375e:	b110      	cbz	r0, 13766 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>
   13760:	4605      	mov	r5, r0
   13762:	7863      	ldrb	r3, [r4, #1]
   13764:	b113      	cbz	r3, 1376c <ble_gap_rx_rd_rem_sup_feat_complete+0x1c>
    ble_hs_unlock();
   13766:	f003 f8cd 	bl	16904 <ble_hs_unlock>
}
   1376a:	bd38      	pop	{r3, r4, r5, pc}
            conn->supported_feat = get_le32(evt->features);
   1376c:	1d20      	adds	r0, r4, #4
   1376e:	f00b f9fe 	bl	1eb6e <get_le32>
   13772:	6268      	str	r0, [r5, #36]	; 0x24
   13774:	e7f7      	b.n	13766 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>

00013776 <ble_gap_rx_l2cap_update_req>:
{
   13776:	b530      	push	{r4, r5, lr}
   13778:	b08f      	sub	sp, #60	; 0x3c
   1377a:	4604      	mov	r4, r0
   1377c:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1377e:	2234      	movs	r2, #52	; 0x34
   13780:	2100      	movs	r1, #0
   13782:	a801      	add	r0, sp, #4
   13784:	f7fe fec7 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_L2CAP_UPDATE_REQ;
   13788:	2305      	movs	r3, #5
   1378a:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   1378e:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.conn_update_req.peer_params = params;
   13792:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   13794:	4621      	mov	r1, r4
   13796:	a801      	add	r0, sp, #4
   13798:	f7ff fc0e 	bl	12fb8 <ble_gap_call_conn_event_cb>
}
   1379c:	b00f      	add	sp, #60	; 0x3c
   1379e:	bd30      	pop	{r4, r5, pc}

000137a0 <ble_gap_rx_phy_update_complete>:
{
   137a0:	b510      	push	{r4, lr}
   137a2:	b08e      	sub	sp, #56	; 0x38
   137a4:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   137a6:	2234      	movs	r2, #52	; 0x34
   137a8:	2100      	movs	r1, #0
   137aa:	a801      	add	r0, sp, #4
   137ac:	f7fe feb3 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_PHY_UPDATE_COMPLETE;
   137b0:	2312      	movs	r3, #18
   137b2:	f88d 3004 	strb.w	r3, [sp, #4]
    event.phy_updated.status = evt->status;
   137b6:	7863      	ldrb	r3, [r4, #1]
   137b8:	9302      	str	r3, [sp, #8]
    event.phy_updated.conn_handle = evt->connection_handle;
   137ba:	8863      	ldrh	r3, [r4, #2]
   137bc:	f8ad 300c 	strh.w	r3, [sp, #12]
    event.phy_updated.tx_phy = evt->tx_phy;
   137c0:	7923      	ldrb	r3, [r4, #4]
   137c2:	f88d 300e 	strb.w	r3, [sp, #14]
    event.phy_updated.rx_phy = evt->rx_phy;
   137c6:	7963      	ldrb	r3, [r4, #5]
   137c8:	f88d 300f 	strb.w	r3, [sp, #15]
    ble_gap_event_listener_call(&event);
   137cc:	a801      	add	r0, sp, #4
   137ce:	f7ff fbc9 	bl	12f64 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, evt->connection_handle);
   137d2:	8861      	ldrh	r1, [r4, #2]
   137d4:	a801      	add	r0, sp, #4
   137d6:	f7ff fbef 	bl	12fb8 <ble_gap_call_conn_event_cb>
}
   137da:	b00e      	add	sp, #56	; 0x38
   137dc:	bd10      	pop	{r4, pc}
	...

000137e0 <ble_gap_adv_start>:
{
   137e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137e4:	b082      	sub	sp, #8
   137e6:	4605      	mov	r5, r0
   137e8:	460f      	mov	r7, r1
   137ea:	4690      	mov	r8, r2
   137ec:	461e      	mov	r6, r3
    ble_hs_lock();
   137ee:	f003 f885 	bl	168fc <ble_hs_lock>
    rc = ble_gap_adv_validate(own_addr_type, direct_addr, adv_params);
   137f2:	4632      	mov	r2, r6
   137f4:	4639      	mov	r1, r7
   137f6:	4628      	mov	r0, r5
   137f8:	f7ff fe84 	bl	13504 <ble_gap_adv_validate>
    if (rc != 0) {
   137fc:	4604      	mov	r4, r0
   137fe:	2800      	cmp	r0, #0
   13800:	d14d      	bne.n	1389e <ble_gap_adv_start+0xbe>
    if (duration_ms != BLE_HS_FOREVER) {
   13802:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13806:	4598      	cmp	r8, r3
   13808:	d006      	beq.n	13818 <ble_gap_adv_start+0x38>
}

static inline ble_npl_error_t
ble_npl_time_ms_to_ticks(uint32_t ms, ble_npl_time_t *out_ticks)
{
    return (ble_npl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   1380a:	a901      	add	r1, sp, #4
   1380c:	4640      	mov	r0, r8
   1380e:	f7fe fcd7 	bl	121c0 <os_time_ms_to_ticks>
        if (rc != 0) {
   13812:	b2c0      	uxtb	r0, r0
   13814:	2800      	cmp	r0, #0
   13816:	d13d      	bne.n	13894 <ble_gap_adv_start+0xb4>
    if (!ble_hs_is_enabled()) {
   13818:	f003 f8a8 	bl	1696c <ble_hs_is_enabled>
   1381c:	2800      	cmp	r0, #0
   1381e:	d03b      	beq.n	13898 <ble_gap_adv_start+0xb8>
    if (ble_gap_is_preempted()) {
   13820:	f7ff fae8 	bl	12df4 <ble_gap_is_preempted>
   13824:	2800      	cmp	r0, #0
   13826:	d139      	bne.n	1389c <ble_gap_adv_start+0xbc>
    rc = ble_hs_id_use_addr(own_addr_type);
   13828:	4628      	mov	r0, r5
   1382a:	f004 ff9a 	bl	18762 <ble_hs_id_use_addr>
    if (rc != 0) {
   1382e:	4604      	mov	r4, r0
   13830:	2800      	cmp	r0, #0
   13832:	d134      	bne.n	1389e <ble_gap_adv_start+0xbe>
    ble_gap_slave[0].cb = cb;
   13834:	4b1d      	ldr	r3, [pc, #116]	; (138ac <ble_gap_adv_start+0xcc>)
   13836:	9a08      	ldr	r2, [sp, #32]
   13838:	61da      	str	r2, [r3, #28]
    ble_gap_slave[0].cb_arg = cb_arg;
   1383a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1383c:	621a      	str	r2, [r3, #32]
    ble_gap_slave[0].our_addr_type = own_addr_type;
   1383e:	7d5a      	ldrb	r2, [r3, #21]
   13840:	f365 0201 	bfi	r2, r5, #0, #2
   13844:	755a      	strb	r2, [r3, #21]
    if (adv_params->conn_mode != BLE_GAP_CONN_MODE_NON) {
   13846:	7833      	ldrb	r3, [r6, #0]
   13848:	b1d3      	cbz	r3, 13880 <ble_gap_adv_start+0xa0>
        ble_gap_slave[0].connectable = 1;
   1384a:	4a18      	ldr	r2, [pc, #96]	; (138ac <ble_gap_adv_start+0xcc>)
   1384c:	7d53      	ldrb	r3, [r2, #21]
   1384e:	f043 0308 	orr.w	r3, r3, #8
   13852:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_adv_params_tx(own_addr_type, direct_addr, adv_params);
   13854:	4632      	mov	r2, r6
   13856:	4639      	mov	r1, r7
   13858:	4628      	mov	r0, r5
   1385a:	f7ff fe95 	bl	13588 <ble_gap_adv_params_tx>
    if (rc != 0) {
   1385e:	4604      	mov	r4, r0
   13860:	b9e8      	cbnz	r0, 1389e <ble_gap_adv_start+0xbe>
    ble_gap_slave[0].op = BLE_GAP_OP_S_ADV;
   13862:	2001      	movs	r0, #1
   13864:	4b11      	ldr	r3, [pc, #68]	; (138ac <ble_gap_adv_start+0xcc>)
   13866:	7518      	strb	r0, [r3, #20]
    rc = ble_gap_adv_enable_tx(1);
   13868:	f7ff fe24 	bl	134b4 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   1386c:	4604      	mov	r4, r0
   1386e:	b968      	cbnz	r0, 1388c <ble_gap_adv_start+0xac>
    if (duration_ms != BLE_HS_FOREVER) {
   13870:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13874:	4598      	cmp	r8, r3
   13876:	d012      	beq.n	1389e <ble_gap_adv_start+0xbe>
        ble_gap_slave_set_timer(duration_ticks);
   13878:	9801      	ldr	r0, [sp, #4]
   1387a:	f7ff fd81 	bl	13380 <ble_gap_slave_set_timer>
   1387e:	e00e      	b.n	1389e <ble_gap_adv_start+0xbe>
        ble_gap_slave[0].connectable = 0;
   13880:	4b0a      	ldr	r3, [pc, #40]	; (138ac <ble_gap_adv_start+0xcc>)
   13882:	7d5a      	ldrb	r2, [r3, #21]
   13884:	f36f 02c3 	bfc	r2, #3, #1
   13888:	755a      	strb	r2, [r3, #21]
   1388a:	e7e3      	b.n	13854 <ble_gap_adv_start+0x74>
        ble_gap_slave_reset_state(0);
   1388c:	2000      	movs	r0, #0
   1388e:	f7ff fcd9 	bl	13244 <ble_gap_slave_reset_state>
        goto done;
   13892:	e004      	b.n	1389e <ble_gap_adv_start+0xbe>
            rc = BLE_HS_EINVAL;
   13894:	2403      	movs	r4, #3
   13896:	e002      	b.n	1389e <ble_gap_adv_start+0xbe>
        rc = BLE_HS_EDISABLED;
   13898:	241e      	movs	r4, #30
   1389a:	e000      	b.n	1389e <ble_gap_adv_start+0xbe>
        rc = BLE_HS_EPREEMPTED;
   1389c:	241d      	movs	r4, #29
    ble_hs_unlock();
   1389e:	f003 f831 	bl	16904 <ble_hs_unlock>
}
   138a2:	4620      	mov	r0, r4
   138a4:	b002      	add	sp, #8
   138a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   138aa:	bf00      	nop
   138ac:	2000022c 	.word	0x2000022c

000138b0 <ble_gap_adv_set_data>:
{
   138b0:	b530      	push	{r4, r5, lr}
   138b2:	b089      	sub	sp, #36	; 0x24
   138b4:	4604      	mov	r4, r0
   138b6:	460d      	mov	r5, r1
    ble_hs_lock();
   138b8:	f003 f820 	bl	168fc <ble_hs_lock>
    rc = ble_hs_hci_cmd_build_le_set_adv_data(data, data_len, buf,
   138bc:	2320      	movs	r3, #32
   138be:	466a      	mov	r2, sp
   138c0:	b2e9      	uxtb	r1, r5
   138c2:	4620      	mov	r0, r4
   138c4:	f004 faac 	bl	17e20 <ble_hs_hci_cmd_build_le_set_adv_data>
    if (rc != 0) {
   138c8:	4604      	mov	r4, r0
   138ca:	b120      	cbz	r0, 138d6 <ble_gap_adv_set_data+0x26>
    ble_hs_unlock();
   138cc:	f003 f81a 	bl	16904 <ble_hs_unlock>
}
   138d0:	4620      	mov	r0, r4
   138d2:	b009      	add	sp, #36	; 0x24
   138d4:	bd30      	pop	{r4, r5, pc}
    rc = ble_hs_hci_cmd_tx_empty_ack(opcode, buf, sizeof(buf));
   138d6:	2220      	movs	r2, #32
   138d8:	4669      	mov	r1, sp
   138da:	f242 0008 	movw	r0, #8200	; 0x2008
   138de:	f004 f821 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
   138e2:	4604      	mov	r4, r0
   138e4:	e7f2      	b.n	138cc <ble_gap_adv_set_data+0x1c>

000138e6 <ble_gap_adv_set_fields>:
{
   138e6:	b500      	push	{lr}
   138e8:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(adv_fields, buf, &buf_sz, sizeof buf);
   138ea:	231f      	movs	r3, #31
   138ec:	f10d 0207 	add.w	r2, sp, #7
   138f0:	a902      	add	r1, sp, #8
   138f2:	f003 fc9e 	bl	17232 <ble_hs_adv_set_fields>
    if (rc != 0) {
   138f6:	4603      	mov	r3, r0
   138f8:	b118      	cbz	r0, 13902 <ble_gap_adv_set_fields+0x1c>
}
   138fa:	4618      	mov	r0, r3
   138fc:	b00b      	add	sp, #44	; 0x2c
   138fe:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_set_data(buf, buf_sz);
   13902:	f89d 1007 	ldrb.w	r1, [sp, #7]
   13906:	a802      	add	r0, sp, #8
   13908:	f7ff ffd2 	bl	138b0 <ble_gap_adv_set_data>
   1390c:	4603      	mov	r3, r0
   1390e:	e7f4      	b.n	138fa <ble_gap_adv_set_fields+0x14>

00013910 <ble_gap_adv_active>:
{
   13910:	b508      	push	{r3, lr}
    return ble_gap_adv_active_instance(0);
   13912:	2000      	movs	r0, #0
   13914:	f7ff faa0 	bl	12e58 <ble_gap_adv_active_instance>
}
   13918:	bd08      	pop	{r3, pc}
	...

0001391c <ble_gap_rx_conn_complete>:
{
   1391c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1391e:	b091      	sub	sp, #68	; 0x44
    if (evt->status != BLE_ERR_SUCCESS) {
   13920:	7843      	ldrb	r3, [r0, #1]
   13922:	b353      	cbz	r3, 1397a <ble_gap_rx_conn_complete+0x5e>
        switch (evt->status) {
   13924:	2b02      	cmp	r3, #2
   13926:	d010      	beq.n	1394a <ble_gap_rx_conn_complete+0x2e>
   13928:	2b3c      	cmp	r3, #60	; 0x3c
   1392a:	d120      	bne.n	1396e <ble_gap_rx_conn_complete+0x52>
            if (ble_gap_adv_active()) {
   1392c:	f7ff fff0 	bl	13910 <ble_gap_adv_active>
   13930:	4605      	mov	r5, r0
   13932:	b910      	cbnz	r0, 1393a <ble_gap_rx_conn_complete+0x1e>
}
   13934:	4628      	mov	r0, r5
   13936:	b011      	add	sp, #68	; 0x44
   13938:	bdf0      	pop	{r4, r5, r6, r7, pc}
                ble_gap_adv_finished(0, 0, 0, 0);
   1393a:	2300      	movs	r3, #0
   1393c:	461a      	mov	r2, r3
   1393e:	4619      	mov	r1, r3
   13940:	4618      	mov	r0, r3
   13942:	f7ff fca5 	bl	13290 <ble_gap_adv_finished>
        return 0;
   13946:	2500      	movs	r5, #0
   13948:	e7f4      	b.n	13934 <ble_gap_rx_conn_complete+0x18>
            if (ble_gap_master_in_progress()) {
   1394a:	f7ff feed 	bl	13728 <ble_gap_master_in_progress>
   1394e:	4605      	mov	r5, r0
   13950:	2800      	cmp	r0, #0
   13952:	d0ef      	beq.n	13934 <ble_gap_rx_conn_complete+0x18>
                if (ble_gap_master.preempted_op == BLE_GAP_OP_M_CONN) {
   13954:	4b5a      	ldr	r3, [pc, #360]	; (13ac0 <ble_gap_rx_conn_complete+0x1a4>)
   13956:	7c1b      	ldrb	r3, [r3, #16]
   13958:	2b02      	cmp	r3, #2
   1395a:	d003      	beq.n	13964 <ble_gap_rx_conn_complete+0x48>
                    ble_gap_master_connect_cancelled();
   1395c:	f7ff fc34 	bl	131c8 <ble_gap_master_connect_cancelled>
        return 0;
   13960:	2500      	movs	r5, #0
   13962:	e7e7      	b.n	13934 <ble_gap_rx_conn_complete+0x18>
                    ble_gap_master_failed(BLE_HS_EPREEMPTED);
   13964:	201d      	movs	r0, #29
   13966:	f7ff fc23 	bl	131b0 <ble_gap_master_failed>
        return 0;
   1396a:	2500      	movs	r5, #0
   1396c:	e7e2      	b.n	13934 <ble_gap_rx_conn_complete+0x18>
            assert(0);
   1396e:	2300      	movs	r3, #0
   13970:	461a      	mov	r2, r3
   13972:	4619      	mov	r1, r3
   13974:	4618      	mov	r0, r3
   13976:	f7fc fe31 	bl	105dc <__assert_func>
   1397a:	4604      	mov	r4, r0
   1397c:	460e      	mov	r6, r1
    if (ble_hs_atomic_conn_flags(evt->connection_handle, NULL) == 0) {
   1397e:	2100      	movs	r1, #0
   13980:	8840      	ldrh	r0, [r0, #2]
   13982:	f003 fcaa 	bl	172da <ble_hs_atomic_conn_flags>
   13986:	4605      	mov	r5, r0
   13988:	2800      	cmp	r0, #0
   1398a:	d0d3      	beq.n	13934 <ble_gap_rx_conn_complete+0x18>
    switch (evt->role) {
   1398c:	7923      	ldrb	r3, [r4, #4]
   1398e:	2b00      	cmp	r3, #0
   13990:	d062      	beq.n	13a58 <ble_gap_rx_conn_complete+0x13c>
   13992:	2b01      	cmp	r3, #1
   13994:	d066      	beq.n	13a64 <ble_gap_rx_conn_complete+0x148>
    conn = ble_hs_conn_alloc(evt->connection_handle);
   13996:	8860      	ldrh	r0, [r4, #2]
   13998:	f003 fd3c 	bl	17414 <ble_hs_conn_alloc>
   1399c:	4605      	mov	r5, r0
    conn->bhc_itvl = evt->conn_itvl;
   1399e:	89a3      	ldrh	r3, [r4, #12]
   139a0:	8383      	strh	r3, [r0, #28]
    conn->bhc_latency = evt->conn_latency;
   139a2:	89e3      	ldrh	r3, [r4, #14]
   139a4:	83c3      	strh	r3, [r0, #30]
    conn->bhc_supervision_timeout = evt->supervision_timeout;
   139a6:	8a23      	ldrh	r3, [r4, #16]
   139a8:	8403      	strh	r3, [r0, #32]
    conn->bhc_master_clock_accuracy = evt->master_clk_acc;
   139aa:	7ca3      	ldrb	r3, [r4, #18]
   139ac:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    if (evt->role == BLE_HCI_LE_CONN_COMPLETE_ROLE_MASTER) {
   139b0:	7923      	ldrb	r3, [r4, #4]
   139b2:	2b00      	cmp	r3, #0
   139b4:	d15d      	bne.n	13a72 <ble_gap_rx_conn_complete+0x156>
        conn->bhc_cb = ble_gap_master.cb;
   139b6:	4b42      	ldr	r3, [pc, #264]	; (13ac0 <ble_gap_rx_conn_complete+0x1a4>)
   139b8:	689a      	ldr	r2, [r3, #8]
   139ba:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_master.cb_arg;
   139bc:	68da      	ldr	r2, [r3, #12]
   139be:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_flags |= BLE_HS_CONN_F_MASTER;
   139c0:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
   139c4:	f042 0201 	orr.w	r2, r2, #1
   139c8:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        conn->bhc_our_addr_type = ble_gap_master.conn.our_addr_type;
   139cc:	7c5b      	ldrb	r3, [r3, #17]
   139ce:	f3c3 0341 	ubfx	r3, r3, #1, #2
   139d2:	7183      	strb	r3, [r0, #6]
        ble_gap_master_reset_state();
   139d4:	f7ff fb86 	bl	130e4 <ble_gap_master_reset_state>
    conn->bhc_peer_addr.type = evt->peer_addr_type;
   139d8:	7966      	ldrb	r6, [r4, #5]
   139da:	71ee      	strb	r6, [r5, #7]
    memcpy(conn->bhc_peer_addr.val, evt->peer_addr, 6);
   139dc:	4623      	mov	r3, r4
   139de:	f853 2f06 	ldr.w	r2, [r3, #6]!
   139e2:	60aa      	str	r2, [r5, #8]
   139e4:	889b      	ldrh	r3, [r3, #4]
   139e6:	81ab      	strh	r3, [r5, #12]
    conn->bhc_our_rpa_addr.type = BLE_ADDR_RANDOM;
   139e8:	2301      	movs	r3, #1
   139ea:	73ab      	strb	r3, [r5, #14]
    memcpy(conn->bhc_our_rpa_addr.val, evt->local_rpa, 6);
   139ec:	4623      	mov	r3, r4
   139ee:	f853 2f13 	ldr.w	r2, [r3, #19]!
   139f2:	f8c5 200f 	str.w	r2, [r5, #15]
   139f6:	889b      	ldrh	r3, [r3, #4]
   139f8:	f8a5 3013 	strh.w	r3, [r5, #19]
    if (memcmp(BLE_ADDR_ANY->val, evt->peer_rpa, 6) == 0) {
   139fc:	2300      	movs	r3, #0
   139fe:	930e      	str	r3, [sp, #56]	; 0x38
   13a00:	f8cd 303b 	str.w	r3, [sp, #59]	; 0x3b
   13a04:	f104 0719 	add.w	r7, r4, #25
   13a08:	2206      	movs	r2, #6
   13a0a:	4639      	mov	r1, r7
   13a0c:	f10d 0039 	add.w	r0, sp, #57	; 0x39
   13a10:	f7fe fd34 	bl	1247c <memcmp>
   13a14:	2800      	cmp	r0, #0
   13a16:	d14b      	bne.n	13ab0 <ble_gap_rx_conn_complete+0x194>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   13a18:	2e01      	cmp	r6, #1
   13a1a:	d039      	beq.n	13a90 <ble_gap_rx_conn_complete+0x174>
    ble_hs_lock();
   13a1c:	f002 ff6e 	bl	168fc <ble_hs_lock>
    memset(&event, 0, sizeof event);
   13a20:	2234      	movs	r2, #52	; 0x34
   13a22:	2100      	movs	r1, #0
   13a24:	a801      	add	r0, sp, #4
   13a26:	f7fe fd76 	bl	12516 <memset>
    ble_hs_conn_insert(conn);
   13a2a:	4628      	mov	r0, r5
   13a2c:	f003 fd48 	bl	174c0 <ble_hs_conn_insert>
    ble_hs_unlock();
   13a30:	f002 ff68 	bl	16904 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_CONNECT;
   13a34:	2500      	movs	r5, #0
   13a36:	f88d 5004 	strb.w	r5, [sp, #4]
    event.connect.conn_handle = evt->connection_handle;
   13a3a:	8863      	ldrh	r3, [r4, #2]
   13a3c:	f8ad 300c 	strh.w	r3, [sp, #12]
    event.connect.status = 0;
   13a40:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   13a42:	a801      	add	r0, sp, #4
   13a44:	f7ff fa8e 	bl	12f64 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, evt->connection_handle);
   13a48:	8861      	ldrh	r1, [r4, #2]
   13a4a:	a801      	add	r0, sp, #4
   13a4c:	f7ff fab4 	bl	12fb8 <ble_gap_call_conn_event_cb>
    ble_gap_rd_rem_sup_feat_tx(evt->connection_handle);
   13a50:	8860      	ldrh	r0, [r4, #2]
   13a52:	f7ff fcd1 	bl	133f8 <ble_gap_rd_rem_sup_feat_tx>
    return 0;
   13a56:	e76d      	b.n	13934 <ble_gap_rx_conn_complete+0x18>
        rc = ble_gap_accept_master_conn();
   13a58:	f7ff f9f4 	bl	12e44 <ble_gap_accept_master_conn>
        if (rc != 0) {
   13a5c:	4605      	mov	r5, r0
   13a5e:	2800      	cmp	r0, #0
   13a60:	d099      	beq.n	13996 <ble_gap_rx_conn_complete+0x7a>
   13a62:	e767      	b.n	13934 <ble_gap_rx_conn_complete+0x18>
        rc = ble_gap_accept_slave_conn(instance);
   13a64:	4630      	mov	r0, r6
   13a66:	f7ff fa03 	bl	12e70 <ble_gap_accept_slave_conn>
        if (rc != 0) {
   13a6a:	4605      	mov	r5, r0
   13a6c:	2800      	cmp	r0, #0
   13a6e:	d092      	beq.n	13996 <ble_gap_rx_conn_complete+0x7a>
   13a70:	e760      	b.n	13934 <ble_gap_rx_conn_complete+0x18>
        conn->bhc_cb = ble_gap_slave[instance].cb;
   13a72:	4b13      	ldr	r3, [pc, #76]	; (13ac0 <ble_gap_rx_conn_complete+0x1a4>)
   13a74:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   13a78:	69da      	ldr	r2, [r3, #28]
   13a7a:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_slave[instance].cb_arg;
   13a7c:	6a1a      	ldr	r2, [r3, #32]
   13a7e:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_our_addr_type = ble_gap_slave[instance].our_addr_type;
   13a80:	7d5b      	ldrb	r3, [r3, #21]
   13a82:	f3c3 0301 	ubfx	r3, r3, #0, #2
   13a86:	7183      	strb	r3, [r0, #6]
        ble_gap_slave_reset_state(instance);
   13a88:	4630      	mov	r0, r6
   13a8a:	f7ff fbdb 	bl	13244 <ble_gap_slave_reset_state>
   13a8e:	e7a3      	b.n	139d8 <ble_gap_rx_conn_complete+0xbc>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   13a90:	7b6b      	ldrb	r3, [r5, #13]
   13a92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13a96:	2b40      	cmp	r3, #64	; 0x40
   13a98:	d1c0      	bne.n	13a1c <ble_gap_rx_conn_complete+0x100>
            conn->bhc_peer_rpa_addr = conn->bhc_peer_addr;
   13a9a:	462a      	mov	r2, r5
   13a9c:	f852 1f07 	ldr.w	r1, [r2, #7]!
   13aa0:	f8c5 1015 	str.w	r1, [r5, #21]
   13aa4:	8891      	ldrh	r1, [r2, #4]
   13aa6:	7992      	ldrb	r2, [r2, #6]
   13aa8:	f8a5 1019 	strh.w	r1, [r5, #25]
   13aac:	76ea      	strb	r2, [r5, #27]
   13aae:	e7b5      	b.n	13a1c <ble_gap_rx_conn_complete+0x100>
        conn->bhc_peer_rpa_addr.type = BLE_ADDR_RANDOM;
   13ab0:	2301      	movs	r3, #1
   13ab2:	756b      	strb	r3, [r5, #21]
        memcpy(conn->bhc_peer_rpa_addr.val, evt->peer_rpa, 6);
   13ab4:	683b      	ldr	r3, [r7, #0]
   13ab6:	f8c5 3016 	str.w	r3, [r5, #22]
   13aba:	88bb      	ldrh	r3, [r7, #4]
   13abc:	836b      	strh	r3, [r5, #26]
   13abe:	e7ad      	b.n	13a1c <ble_gap_rx_conn_complete+0x100>
   13ac0:	2000022c 	.word	0x2000022c

00013ac4 <ble_gap_adv_stop_no_lock>:
{
   13ac4:	b538      	push	{r3, r4, r5, lr}
    active = ble_gap_adv_active();
   13ac6:	f7ff ff23 	bl	13910 <ble_gap_adv_active>
   13aca:	4605      	mov	r5, r0
    rc = ble_gap_adv_enable_tx(0);
   13acc:	2000      	movs	r0, #0
   13ace:	f7ff fcf1 	bl	134b4 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   13ad2:	4604      	mov	r4, r0
   13ad4:	b108      	cbz	r0, 13ada <ble_gap_adv_stop_no_lock+0x16>
}
   13ad6:	4620      	mov	r0, r4
   13ad8:	bd38      	pop	{r3, r4, r5, pc}
    ble_gap_slave_reset_state(0);
   13ada:	f7ff fbb3 	bl	13244 <ble_gap_slave_reset_state>
    if (!active) {
   13ade:	2d00      	cmp	r5, #0
   13ae0:	d1f9      	bne.n	13ad6 <ble_gap_adv_stop_no_lock+0x12>
        rc = BLE_HS_EALREADY;
   13ae2:	2402      	movs	r4, #2
    return rc;
   13ae4:	e7f7      	b.n	13ad6 <ble_gap_adv_stop_no_lock+0x12>
	...

00013ae8 <ble_gap_disc_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_DISC;
   13ae8:	4b03      	ldr	r3, [pc, #12]	; (13af8 <ble_gap_disc_active+0x10>)
   13aea:	7818      	ldrb	r0, [r3, #0]
}
   13aec:	2801      	cmp	r0, #1
   13aee:	bf14      	ite	ne
   13af0:	2000      	movne	r0, #0
   13af2:	2001      	moveq	r0, #1
   13af4:	4770      	bx	lr
   13af6:	bf00      	nop
   13af8:	2000022c 	.word	0x2000022c

00013afc <ble_gap_disc_cancel_no_lock>:
{
   13afc:	b510      	push	{r4, lr}
    if (!ble_gap_disc_active()) {
   13afe:	f7ff fff3 	bl	13ae8 <ble_gap_disc_active>
   13b02:	b130      	cbz	r0, 13b12 <ble_gap_disc_cancel_no_lock+0x16>
    rc = ble_gap_disc_disable_tx();
   13b04:	f7ff fcd0 	bl	134a8 <ble_gap_disc_disable_tx>
    if (rc != 0) {
   13b08:	4604      	mov	r4, r0
   13b0a:	b918      	cbnz	r0, 13b14 <ble_gap_disc_cancel_no_lock+0x18>
    ble_gap_master_reset_state();
   13b0c:	f7ff faea 	bl	130e4 <ble_gap_master_reset_state>
   13b10:	e000      	b.n	13b14 <ble_gap_disc_cancel_no_lock+0x18>
        rc = BLE_HS_EALREADY;
   13b12:	2402      	movs	r4, #2
}
   13b14:	4620      	mov	r0, r4
   13b16:	bd10      	pop	{r4, pc}

00013b18 <ble_gap_conn_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_CONN;
   13b18:	4b03      	ldr	r3, [pc, #12]	; (13b28 <ble_gap_conn_active+0x10>)
   13b1a:	7818      	ldrb	r0, [r3, #0]
}
   13b1c:	2802      	cmp	r0, #2
   13b1e:	bf14      	ite	ne
   13b20:	2000      	movne	r0, #0
   13b22:	2001      	moveq	r0, #1
   13b24:	4770      	bx	lr
   13b26:	bf00      	nop
   13b28:	2000022c 	.word	0x2000022c

00013b2c <ble_gap_conn_cancel_no_lock>:
{
   13b2c:	b508      	push	{r3, lr}
    if (!ble_gap_conn_active()) {
   13b2e:	f7ff fff3 	bl	13b18 <ble_gap_conn_active>
   13b32:	b148      	cbz	r0, 13b48 <ble_gap_conn_cancel_no_lock+0x1c>
    rc = ble_gap_conn_cancel_tx();
   13b34:	f7ff fc72 	bl	1341c <ble_gap_conn_cancel_tx>
    if (rc != 0) {
   13b38:	4603      	mov	r3, r0
   13b3a:	b930      	cbnz	r0, 13b4a <ble_gap_conn_cancel_no_lock+0x1e>
    ble_gap_master.conn.cancel = 1;
   13b3c:	4904      	ldr	r1, [pc, #16]	; (13b50 <ble_gap_conn_cancel_no_lock+0x24>)
   13b3e:	7c4a      	ldrb	r2, [r1, #17]
   13b40:	f042 0208 	orr.w	r2, r2, #8
   13b44:	744a      	strb	r2, [r1, #17]
   13b46:	e000      	b.n	13b4a <ble_gap_conn_cancel_no_lock+0x1e>
        rc = BLE_HS_EALREADY;
   13b48:	2302      	movs	r3, #2
}
   13b4a:	4618      	mov	r0, r3
   13b4c:	bd08      	pop	{r3, pc}
   13b4e:	bf00      	nop
   13b50:	2000022c 	.word	0x2000022c

00013b54 <ble_gap_terminate>:
{
   13b54:	b570      	push	{r4, r5, r6, lr}
   13b56:	b082      	sub	sp, #8
   13b58:	4604      	mov	r4, r0
   13b5a:	460e      	mov	r6, r1
    ble_hs_lock();
   13b5c:	f002 fece 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   13b60:	4620      	mov	r0, r4
   13b62:	f003 fca1 	bl	174a8 <ble_hs_conn_find>
    if (conn == NULL) {
   13b66:	b1d0      	cbz	r0, 13b9e <ble_gap_terminate+0x4a>
   13b68:	4605      	mov	r5, r0
    if (conn->bhc_flags & BLE_HS_CONN_F_TERMINATING) {
   13b6a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   13b6e:	f013 0f02 	tst.w	r3, #2
   13b72:	d116      	bne.n	13ba2 <ble_gap_terminate+0x4e>
    ble_hs_hci_cmd_build_disconnect(conn_handle, hci_reason,
   13b74:	2303      	movs	r3, #3
   13b76:	aa01      	add	r2, sp, #4
   13b78:	4631      	mov	r1, r6
   13b7a:	4620      	mov	r0, r4
   13b7c:	f004 f95c 	bl	17e38 <ble_hs_hci_cmd_build_disconnect>
    rc = ble_hs_hci_cmd_tx_empty_ack(BLE_HCI_OP(BLE_HCI_OGF_LINK_CTRL,
   13b80:	2203      	movs	r2, #3
   13b82:	a901      	add	r1, sp, #4
   13b84:	f240 4006 	movw	r0, #1030	; 0x406
   13b88:	f003 fecc 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
    if (rc != 0) {
   13b8c:	4604      	mov	r4, r0
   13b8e:	b948      	cbnz	r0, 13ba4 <ble_gap_terminate+0x50>
    conn->bhc_flags |= BLE_HS_CONN_F_TERMINATING;
   13b90:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   13b94:	f043 0302 	orr.w	r3, r3, #2
   13b98:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
   13b9c:	e002      	b.n	13ba4 <ble_gap_terminate+0x50>
        rc = BLE_HS_ENOTCONN;
   13b9e:	2407      	movs	r4, #7
   13ba0:	e000      	b.n	13ba4 <ble_gap_terminate+0x50>
        rc = BLE_HS_EALREADY;
   13ba2:	2402      	movs	r4, #2
    ble_hs_unlock();
   13ba4:	f002 feae 	bl	16904 <ble_hs_unlock>
}
   13ba8:	4620      	mov	r0, r4
   13baa:	b002      	add	sp, #8
   13bac:	bd70      	pop	{r4, r5, r6, pc}

00013bae <ble_gap_update_notify>:
{
   13bae:	b530      	push	{r4, r5, lr}
   13bb0:	b08f      	sub	sp, #60	; 0x3c
   13bb2:	4604      	mov	r4, r0
   13bb4:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   13bb6:	2234      	movs	r2, #52	; 0x34
   13bb8:	2100      	movs	r1, #0
   13bba:	a801      	add	r0, sp, #4
   13bbc:	f7fe fcab 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE;
   13bc0:	2303      	movs	r3, #3
   13bc2:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update.conn_handle = conn_handle;
   13bc6:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.conn_update.status = status;
   13bca:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   13bcc:	a801      	add	r0, sp, #4
   13bce:	f7ff f9c9 	bl	12f64 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   13bd2:	4621      	mov	r1, r4
   13bd4:	a801      	add	r0, sp, #4
   13bd6:	f7ff f9ef 	bl	12fb8 <ble_gap_call_conn_event_cb>
    if (status == BLE_HS_ETIMEOUT) {
   13bda:	2d0d      	cmp	r5, #13
   13bdc:	d001      	beq.n	13be2 <ble_gap_update_notify+0x34>
}
   13bde:	b00f      	add	sp, #60	; 0x3c
   13be0:	bd30      	pop	{r4, r5, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   13be2:	2113      	movs	r1, #19
   13be4:	4620      	mov	r0, r4
   13be6:	f7ff ffb5 	bl	13b54 <ble_gap_terminate>
}
   13bea:	e7f8      	b.n	13bde <ble_gap_update_notify+0x30>

00013bec <ble_gap_conn_broken>:
{
   13bec:	b570      	push	{r4, r5, r6, lr}
   13bee:	b090      	sub	sp, #64	; 0x40
   13bf0:	4604      	mov	r4, r0
   13bf2:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   13bf4:	2234      	movs	r2, #52	; 0x34
   13bf6:	2100      	movs	r1, #0
   13bf8:	4668      	mov	r0, sp
   13bfa:	f7fe fc8c 	bl	12516 <memset>
    snap.desc = &event.disconnect.conn;
   13bfe:	a910      	add	r1, sp, #64	; 0x40
   13c00:	ab02      	add	r3, sp, #8
   13c02:	f841 3d0c 	str.w	r3, [r1, #-12]!
    rc = ble_gap_find_snapshot(conn_handle, &snap);
   13c06:	4620      	mov	r0, r4
   13c08:	f7ff fa3f 	bl	1308a <ble_gap_find_snapshot>
    if (rc != 0) {
   13c0c:	b108      	cbz	r0, 13c12 <ble_gap_conn_broken+0x26>
}
   13c0e:	b010      	add	sp, #64	; 0x40
   13c10:	bd70      	pop	{r4, r5, r6, pc}
    ble_hs_lock();
   13c12:	f002 fe73 	bl	168fc <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   13c16:	4620      	mov	r0, r4
   13c18:	f7ff fa4c 	bl	130b4 <ble_gap_update_entry_remove>
   13c1c:	4606      	mov	r6, r0
    ble_hs_unlock();
   13c1e:	f002 fe71 	bl	16904 <ble_hs_unlock>
    if (entry != NULL) {
   13c22:	b136      	cbz	r6, 13c32 <ble_gap_conn_broken+0x46>
        ble_gap_update_notify(conn_handle, reason);
   13c24:	4629      	mov	r1, r5
   13c26:	4620      	mov	r0, r4
   13c28:	f7ff ffc1 	bl	13bae <ble_gap_update_notify>
        ble_gap_update_entry_free(entry);
   13c2c:	4630      	mov	r0, r6
   13c2e:	f7ff fb47 	bl	132c0 <ble_gap_update_entry_free>
    ble_l2cap_sig_conn_broken(conn_handle, reason);
   13c32:	4629      	mov	r1, r5
   13c34:	4620      	mov	r0, r4
   13c36:	f005 fcb3 	bl	195a0 <ble_l2cap_sig_conn_broken>
    ble_sm_connection_broken(conn_handle);
   13c3a:	4620      	mov	r0, r4
   13c3c:	f007 f9a7 	bl	1af8e <ble_sm_connection_broken>
    ble_gatts_connection_broken(conn_handle);
   13c40:	4620      	mov	r0, r4
   13c42:	f002 fb6f 	bl	16324 <ble_gatts_connection_broken>
    ble_gattc_connection_broken(conn_handle);
   13c46:	4620      	mov	r0, r4
   13c48:	f001 fe77 	bl	1593a <ble_gattc_connection_broken>
    ble_hs_flow_connection_broken(conn_handle);;
   13c4c:	4620      	mov	r0, r4
   13c4e:	f003 fd25 	bl	1769c <ble_hs_flow_connection_broken>
    ble_hs_atomic_conn_delete(conn_handle);
   13c52:	4620      	mov	r0, r4
   13c54:	f003 fb2c 	bl	172b0 <ble_hs_atomic_conn_delete>
    event.type = BLE_GAP_EVENT_DISCONNECT;
   13c58:	2301      	movs	r3, #1
   13c5a:	f88d 3000 	strb.w	r3, [sp]
    event.disconnect.reason = reason;
   13c5e:	9501      	str	r5, [sp, #4]
    ble_gap_event_listener_call(&event);
   13c60:	4668      	mov	r0, sp
   13c62:	f7ff f97f 	bl	12f64 <ble_gap_event_listener_call>
    ble_gap_call_event_cb(&event, snap.cb, snap.cb_arg);
   13c66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13c68:	990e      	ldr	r1, [sp, #56]	; 0x38
   13c6a:	4668      	mov	r0, sp
   13c6c:	f7ff f8ad 	bl	12dca <ble_gap_call_event_cb>
   13c70:	e7cd      	b.n	13c0e <ble_gap_conn_broken+0x22>

00013c72 <ble_gap_rx_disconn_complete>:
{
   13c72:	b510      	push	{r4, lr}
   13c74:	b08e      	sub	sp, #56	; 0x38
   13c76:	4604      	mov	r4, r0
    if (evt->status == 0) {
   13c78:	7883      	ldrb	r3, [r0, #2]
   13c7a:	b953      	cbnz	r3, 13c92 <ble_gap_rx_disconn_complete+0x20>
        ble_gap_conn_broken(evt->connection_handle,
   13c7c:	8800      	ldrh	r0, [r0, #0]
                            BLE_HS_HCI_ERR(evt->reason));
   13c7e:	78e1      	ldrb	r1, [r4, #3]
        ble_gap_conn_broken(evt->connection_handle,
   13c80:	b129      	cbz	r1, 13c8e <ble_gap_rx_disconn_complete+0x1c>
   13c82:	f501 7100 	add.w	r1, r1, #512	; 0x200
   13c86:	f7ff ffb1 	bl	13bec <ble_gap_conn_broken>
}
   13c8a:	b00e      	add	sp, #56	; 0x38
   13c8c:	bd10      	pop	{r4, pc}
        ble_gap_conn_broken(evt->connection_handle,
   13c8e:	2100      	movs	r1, #0
   13c90:	e7f9      	b.n	13c86 <ble_gap_rx_disconn_complete+0x14>
        memset(&event, 0, sizeof event);
   13c92:	2234      	movs	r2, #52	; 0x34
   13c94:	2100      	movs	r1, #0
   13c96:	a801      	add	r0, sp, #4
   13c98:	f7fe fc3d 	bl	12516 <memset>
        event.type = BLE_GAP_EVENT_TERM_FAILURE;
   13c9c:	2306      	movs	r3, #6
   13c9e:	f88d 3004 	strb.w	r3, [sp, #4]
        event.term_failure.conn_handle = evt->connection_handle;
   13ca2:	8823      	ldrh	r3, [r4, #0]
   13ca4:	f8ad 300c 	strh.w	r3, [sp, #12]
        event.term_failure.status = BLE_HS_HCI_ERR(evt->status);
   13ca8:	78a3      	ldrb	r3, [r4, #2]
   13caa:	b153      	cbz	r3, 13cc2 <ble_gap_rx_disconn_complete+0x50>
   13cac:	f503 7300 	add.w	r3, r3, #512	; 0x200
   13cb0:	9302      	str	r3, [sp, #8]
        ble_gap_event_listener_call(&event);
   13cb2:	a801      	add	r0, sp, #4
   13cb4:	f7ff f956 	bl	12f64 <ble_gap_event_listener_call>
        ble_gap_call_conn_event_cb(&event, evt->connection_handle);
   13cb8:	8821      	ldrh	r1, [r4, #0]
   13cba:	a801      	add	r0, sp, #4
   13cbc:	f7ff f97c 	bl	12fb8 <ble_gap_call_conn_event_cb>
}
   13cc0:	e7e3      	b.n	13c8a <ble_gap_rx_disconn_complete+0x18>
        event.term_failure.status = BLE_HS_HCI_ERR(evt->status);
   13cc2:	2300      	movs	r3, #0
   13cc4:	e7f4      	b.n	13cb0 <ble_gap_rx_disconn_complete+0x3e>
	...

00013cc8 <ble_gap_rx_update_complete>:
{
   13cc8:	b570      	push	{r4, r5, r6, lr}
   13cca:	b090      	sub	sp, #64	; 0x40
   13ccc:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   13cce:	2234      	movs	r2, #52	; 0x34
   13cd0:	2100      	movs	r1, #0
   13cd2:	a801      	add	r0, sp, #4
   13cd4:	f7fe fc1f 	bl	12516 <memset>
    memset(&l2cap_params, 0, sizeof l2cap_params);
   13cd8:	2300      	movs	r3, #0
   13cda:	930e      	str	r3, [sp, #56]	; 0x38
   13cdc:	930f      	str	r3, [sp, #60]	; 0x3c
    ble_hs_lock();
   13cde:	f002 fe0d 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(evt->connection_handle);
   13ce2:	8860      	ldrh	r0, [r4, #2]
   13ce4:	f003 fbe0 	bl	174a8 <ble_hs_conn_find>
    if (conn != NULL) {
   13ce8:	b120      	cbz	r0, 13cf4 <ble_gap_rx_update_complete+0x2c>
   13cea:	4605      	mov	r5, r0
        switch (evt->status) {
   13cec:	7863      	ldrb	r3, [r4, #1]
   13cee:	b19b      	cbz	r3, 13d18 <ble_gap_rx_update_complete+0x50>
   13cf0:	2b1a      	cmp	r3, #26
   13cf2:	d018      	beq.n	13d26 <ble_gap_rx_update_complete+0x5e>
    if (l2cap_params.itvl_min == 0) {
   13cf4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   13cf8:	b35b      	cbz	r3, 13d52 <ble_gap_rx_update_complete+0x8a>
    ble_hs_unlock();
   13cfa:	f002 fe03 	bl	16904 <ble_hs_unlock>
    if (l2cap_params.itvl_min != 0) {
   13cfe:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   13d02:	bb63      	cbnz	r3, 13d5e <ble_gap_rx_update_complete+0x96>
        cb_status = BLE_HS_HCI_ERR(evt->status);
   13d04:	7861      	ldrb	r1, [r4, #1]
   13d06:	2900      	cmp	r1, #0
   13d08:	d033      	beq.n	13d72 <ble_gap_rx_update_complete+0xaa>
   13d0a:	f501 7100 	add.w	r1, r1, #512	; 0x200
        ble_gap_update_notify(evt->connection_handle, cb_status);
   13d0e:	8860      	ldrh	r0, [r4, #2]
   13d10:	f7ff ff4d 	bl	13bae <ble_gap_update_notify>
}
   13d14:	b010      	add	sp, #64	; 0x40
   13d16:	bd70      	pop	{r4, r5, r6, pc}
            conn->bhc_itvl = evt->conn_itvl;
   13d18:	88a3      	ldrh	r3, [r4, #4]
   13d1a:	8383      	strh	r3, [r0, #28]
            conn->bhc_latency = evt->conn_latency;
   13d1c:	88e3      	ldrh	r3, [r4, #6]
   13d1e:	83c3      	strh	r3, [r0, #30]
            conn->bhc_supervision_timeout = evt->supervision_timeout;
   13d20:	8923      	ldrh	r3, [r4, #8]
   13d22:	8403      	strh	r3, [r0, #32]
            break;
   13d24:	e7e6      	b.n	13cf4 <ble_gap_rx_update_complete+0x2c>
            entry = ble_gap_update_entry_find(evt->connection_handle, NULL);
   13d26:	2100      	movs	r1, #0
   13d28:	8860      	ldrh	r0, [r4, #2]
   13d2a:	f7ff f8e3 	bl	12ef4 <ble_gap_update_entry_find>
            if (entry != NULL && !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   13d2e:	4606      	mov	r6, r0
   13d30:	2800      	cmp	r0, #0
   13d32:	d0df      	beq.n	13cf4 <ble_gap_rx_update_complete+0x2c>
   13d34:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   13d38:	f013 0f01 	tst.w	r3, #1
   13d3c:	d1da      	bne.n	13cf4 <ble_gap_rx_update_complete+0x2c>
                ble_gap_update_to_l2cap(&entry->params, &l2cap_params);
   13d3e:	a90e      	add	r1, sp, #56	; 0x38
   13d40:	3004      	adds	r0, #4
   13d42:	f7ff f875 	bl	12e30 <ble_gap_update_to_l2cap>
    return os_time_get();
   13d46:	f7fe f9f9 	bl	1213c <os_time_get>
                entry->exp_os_ticks = ble_npl_time_get() +
   13d4a:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   13d4e:	6130      	str	r0, [r6, #16]
   13d50:	e7d0      	b.n	13cf4 <ble_gap_rx_update_complete+0x2c>
        entry = ble_gap_update_entry_remove(evt->connection_handle);
   13d52:	8860      	ldrh	r0, [r4, #2]
   13d54:	f7ff f9ae 	bl	130b4 <ble_gap_update_entry_remove>
        ble_gap_update_entry_free(entry);
   13d58:	f7ff fab2 	bl	132c0 <ble_gap_update_entry_free>
   13d5c:	e7cd      	b.n	13cfa <ble_gap_rx_update_complete+0x32>
        rc = ble_l2cap_sig_update(evt->connection_handle,
   13d5e:	2300      	movs	r3, #0
   13d60:	4a05      	ldr	r2, [pc, #20]	; (13d78 <ble_gap_rx_update_complete+0xb0>)
   13d62:	a90e      	add	r1, sp, #56	; 0x38
   13d64:	8860      	ldrh	r0, [r4, #2]
   13d66:	f005 fbc4 	bl	194f2 <ble_l2cap_sig_update>
        if (rc == 0) {
   13d6a:	4601      	mov	r1, r0
   13d6c:	2800      	cmp	r0, #0
   13d6e:	d1ce      	bne.n	13d0e <ble_gap_rx_update_complete+0x46>
   13d70:	e7d0      	b.n	13d14 <ble_gap_rx_update_complete+0x4c>
        cb_status = BLE_HS_HCI_ERR(evt->status);
   13d72:	2100      	movs	r1, #0
   13d74:	e7cb      	b.n	13d0e <ble_gap_rx_update_complete+0x46>
   13d76:	bf00      	nop
   13d78:	00013d7d 	.word	0x00013d7d

00013d7c <ble_gap_update_l2cap_cb>:
{
   13d7c:	b570      	push	{r4, r5, r6, lr}
   13d7e:	4605      	mov	r5, r0
   13d80:	460e      	mov	r6, r1
    ble_hs_lock();
   13d82:	f002 fdbb 	bl	168fc <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   13d86:	4628      	mov	r0, r5
   13d88:	f7ff f994 	bl	130b4 <ble_gap_update_entry_remove>
   13d8c:	4604      	mov	r4, r0
    ble_hs_unlock();
   13d8e:	f002 fdb9 	bl	16904 <ble_hs_unlock>
    if (entry != NULL) {
   13d92:	b11c      	cbz	r4, 13d9c <ble_gap_update_l2cap_cb+0x20>
        ble_gap_update_entry_free(entry);
   13d94:	4620      	mov	r0, r4
   13d96:	f7ff fa93 	bl	132c0 <ble_gap_update_entry_free>
        if (status != 0) {
   13d9a:	b906      	cbnz	r6, 13d9e <ble_gap_update_l2cap_cb+0x22>
}
   13d9c:	bd70      	pop	{r4, r5, r6, pc}
            ble_gap_update_notify(conn_handle, status);
   13d9e:	4631      	mov	r1, r6
   13da0:	4628      	mov	r0, r5
   13da2:	f7ff ff04 	bl	13bae <ble_gap_update_notify>
}
   13da6:	e7f9      	b.n	13d9c <ble_gap_update_l2cap_cb+0x20>

00013da8 <ble_gap_update_timer>:
{
   13da8:	b530      	push	{r4, r5, lr}
   13daa:	b083      	sub	sp, #12
   13dac:	e003      	b.n	13db6 <ble_gap_update_timer+0xe>
        ble_hs_unlock();
   13dae:	f002 fda9 	bl	16904 <ble_hs_unlock>
            entry = NULL;
   13db2:	2400      	movs	r4, #0
    } while (entry != NULL);
   13db4:	b1bc      	cbz	r4, 13de6 <ble_gap_update_timer+0x3e>
        ble_hs_lock();
   13db6:	f002 fda1 	bl	168fc <ble_hs_lock>
        conn_handle = ble_gap_update_next_exp(&ticks_until_exp);
   13dba:	a801      	add	r0, sp, #4
   13dbc:	f7ff faa6 	bl	1330c <ble_gap_update_next_exp>
        if (ticks_until_exp == 0) {
   13dc0:	9b01      	ldr	r3, [sp, #4]
   13dc2:	2b00      	cmp	r3, #0
   13dc4:	d1f3      	bne.n	13dae <ble_gap_update_timer+0x6>
   13dc6:	4605      	mov	r5, r0
            entry = ble_gap_update_entry_remove(conn_handle);
   13dc8:	f7ff f974 	bl	130b4 <ble_gap_update_entry_remove>
   13dcc:	4604      	mov	r4, r0
        ble_hs_unlock();
   13dce:	f002 fd99 	bl	16904 <ble_hs_unlock>
        if (entry != NULL) {
   13dd2:	2c00      	cmp	r4, #0
   13dd4:	d0ee      	beq.n	13db4 <ble_gap_update_timer+0xc>
            ble_gap_update_notify(conn_handle, BLE_HS_ETIMEOUT);
   13dd6:	210d      	movs	r1, #13
   13dd8:	4628      	mov	r0, r5
   13dda:	f7ff fee8 	bl	13bae <ble_gap_update_notify>
            ble_gap_update_entry_free(entry);
   13dde:	4620      	mov	r0, r4
   13de0:	f7ff fa6e 	bl	132c0 <ble_gap_update_entry_free>
   13de4:	e7e6      	b.n	13db4 <ble_gap_update_timer+0xc>
}
   13de6:	9801      	ldr	r0, [sp, #4]
   13de8:	b003      	add	sp, #12
   13dea:	bd30      	pop	{r4, r5, pc}

00013dec <ble_gap_timer>:
{
   13dec:	b510      	push	{r4, lr}
    master_ticks = ble_gap_master_timer();
   13dee:	f7ff fb33 	bl	13458 <ble_gap_master_timer>
   13df2:	4604      	mov	r4, r0
    update_ticks = ble_gap_update_timer();
   13df4:	f7ff ffd8 	bl	13da8 <ble_gap_update_timer>
    min_ticks = min(master_ticks, update_ticks);
   13df8:	4284      	cmp	r4, r0
   13dfa:	bfa8      	it	ge
   13dfc:	4604      	movge	r4, r0
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   13dfe:	f7ff fb6b 	bl	134d8 <ble_gap_slave_timer>
   13e02:	42a0      	cmp	r0, r4
   13e04:	dd01      	ble.n	13e0a <ble_gap_timer+0x1e>
}
   13e06:	4620      	mov	r0, r4
   13e08:	bd10      	pop	{r4, pc}
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   13e0a:	f7ff fb65 	bl	134d8 <ble_gap_slave_timer>
   13e0e:	4604      	mov	r4, r0
    return min_ticks;
   13e10:	e7f9      	b.n	13e06 <ble_gap_timer+0x1a>

00013e12 <ble_gap_update_failed>:
{
   13e12:	b570      	push	{r4, r5, r6, lr}
   13e14:	4604      	mov	r4, r0
   13e16:	460d      	mov	r5, r1
    ble_hs_lock();
   13e18:	f002 fd70 	bl	168fc <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   13e1c:	4620      	mov	r0, r4
   13e1e:	f7ff f949 	bl	130b4 <ble_gap_update_entry_remove>
   13e22:	4606      	mov	r6, r0
    ble_hs_unlock();
   13e24:	f002 fd6e 	bl	16904 <ble_hs_unlock>
    ble_gap_update_entry_free(entry);
   13e28:	4630      	mov	r0, r6
   13e2a:	f7ff fa49 	bl	132c0 <ble_gap_update_entry_free>
    ble_gap_update_notify(conn_handle, status);
   13e2e:	4629      	mov	r1, r5
   13e30:	4620      	mov	r0, r4
   13e32:	f7ff febc 	bl	13bae <ble_gap_update_notify>
}
   13e36:	bd70      	pop	{r4, r5, r6, pc}

00013e38 <ble_gap_rx_param_req>:
{
   13e38:	b5f0      	push	{r4, r5, r6, r7, lr}
   13e3a:	b095      	sub	sp, #84	; 0x54
   13e3c:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   13e3e:	2734      	movs	r7, #52	; 0x34
   13e40:	463a      	mov	r2, r7
   13e42:	2100      	movs	r1, #0
   13e44:	a801      	add	r0, sp, #4
   13e46:	f7fe fb66 	bl	12516 <memset>
    peer_params.itvl_min = evt->itvl_min;
   13e4a:	88a3      	ldrh	r3, [r4, #4]
   13e4c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    peer_params.itvl_max = evt->itvl_max;
   13e50:	88e3      	ldrh	r3, [r4, #6]
   13e52:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    peer_params.latency = evt->latency;
   13e56:	8923      	ldrh	r3, [r4, #8]
   13e58:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    peer_params.supervision_timeout = evt->timeout;
   13e5c:	8963      	ldrh	r3, [r4, #10]
   13e5e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    peer_params.min_ce_len = 0;
   13e62:	2300      	movs	r3, #0
   13e64:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    peer_params.max_ce_len = 0;
   13e68:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    self_params = peer_params;
   13e6c:	ae0e      	add	r6, sp, #56	; 0x38
   13e6e:	ad11      	add	r5, sp, #68	; 0x44
   13e70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   13e74:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    memset(&event, 0, sizeof event);
   13e78:	463a      	mov	r2, r7
   13e7a:	4619      	mov	r1, r3
   13e7c:	a801      	add	r0, sp, #4
   13e7e:	f7fe fb4a 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE_REQ;
   13e82:	2304      	movs	r3, #4
   13e84:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = evt->connection_handle;
   13e88:	8861      	ldrh	r1, [r4, #2]
   13e8a:	f8ad 1010 	strh.w	r1, [sp, #16]
    event.conn_update_req.self_params = &self_params;
   13e8e:	9603      	str	r6, [sp, #12]
    event.conn_update_req.peer_params = &peer_params;
   13e90:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, evt->connection_handle);
   13e92:	eb0d 0003 	add.w	r0, sp, r3
   13e96:	f7ff f88f 	bl	12fb8 <ble_gap_call_conn_event_cb>
    if (rc != 0) {
   13e9a:	4603      	mov	r3, r0
   13e9c:	b158      	cbz	r0, 13eb6 <ble_gap_rx_param_req+0x7e>
        reject_reason = rc;
   13e9e:	b2c1      	uxtb	r1, r0
    if (rc == 0) {
   13ea0:	b95b      	cbnz	r3, 13eba <ble_gap_rx_param_req+0x82>
        rc = ble_gap_tx_param_pos_reply(evt->connection_handle, &self_params);
   13ea2:	a90e      	add	r1, sp, #56	; 0x38
   13ea4:	8860      	ldrh	r0, [r4, #2]
   13ea6:	f7ff fbb7 	bl	13618 <ble_gap_tx_param_pos_reply>
        if (rc != 0) {
   13eaa:	4601      	mov	r1, r0
   13eac:	b140      	cbz	r0, 13ec0 <ble_gap_rx_param_req+0x88>
            ble_gap_update_failed(evt->connection_handle, rc);
   13eae:	8860      	ldrh	r0, [r4, #2]
   13eb0:	f7ff ffaf 	bl	13e12 <ble_gap_update_failed>
   13eb4:	e004      	b.n	13ec0 <ble_gap_rx_param_req+0x88>
    reject_reason = 0; /* Silence warning. */
   13eb6:	2100      	movs	r1, #0
   13eb8:	e7f2      	b.n	13ea0 <ble_gap_rx_param_req+0x68>
        ble_gap_tx_param_neg_reply(evt->connection_handle, reject_reason);
   13eba:	8860      	ldrh	r0, [r4, #2]
   13ebc:	f7ff fbd0 	bl	13660 <ble_gap_tx_param_neg_reply>
}
   13ec0:	b015      	add	sp, #84	; 0x54
   13ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013ec4 <ble_gap_update_params>:
{
   13ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ec8:	b082      	sub	sp, #8
   13eca:	4606      	mov	r6, r0
   13ecc:	460d      	mov	r5, r1
    if (!ble_gap_validate_conn_params(params)) {
   13ece:	4608      	mov	r0, r1
   13ed0:	f7ff f824 	bl	12f1c <ble_gap_validate_conn_params>
   13ed4:	2800      	cmp	r0, #0
   13ed6:	d05f      	beq.n	13f98 <ble_gap_update_params+0xd4>
    memset(&l2cap_params, 0, sizeof l2cap_params);
   13ed8:	2300      	movs	r3, #0
   13eda:	9300      	str	r3, [sp, #0]
   13edc:	9301      	str	r3, [sp, #4]
    ble_hs_lock();
   13ede:	f002 fd0d 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   13ee2:	4630      	mov	r0, r6
   13ee4:	f003 fae0 	bl	174a8 <ble_hs_conn_find>
    if (conn == NULL) {
   13ee8:	4604      	mov	r4, r0
   13eea:	b340      	cbz	r0, 13f3e <ble_gap_update_params+0x7a>
    dup = ble_gap_update_entry_find(conn_handle, NULL);
   13eec:	2100      	movs	r1, #0
   13eee:	4630      	mov	r0, r6
   13ef0:	f7ff f800 	bl	12ef4 <ble_gap_update_entry_find>
    if (dup != NULL) {
   13ef4:	b118      	cbz	r0, 13efe <ble_gap_update_params+0x3a>
        rc = BLE_HS_EALREADY;
   13ef6:	2402      	movs	r4, #2
    l2cap_update = 0;
   13ef8:	2700      	movs	r7, #0
    entry = NULL;
   13efa:	46b8      	mov	r8, r7
   13efc:	e022      	b.n	13f44 <ble_gap_update_params+0x80>
    entry = ble_gap_update_entry_alloc();
   13efe:	f7ff fbc3 	bl	13688 <ble_gap_update_entry_alloc>
    if (entry == NULL) {
   13f02:	4680      	mov	r8, r0
   13f04:	b390      	cbz	r0, 13f6c <ble_gap_update_params+0xa8>
    entry->conn_handle = conn_handle;
   13f06:	8286      	strh	r6, [r0, #20]
    entry->params = *params;
   13f08:	1d03      	adds	r3, r0, #4
   13f0a:	6828      	ldr	r0, [r5, #0]
   13f0c:	6869      	ldr	r1, [r5, #4]
   13f0e:	68aa      	ldr	r2, [r5, #8]
   13f10:	c307      	stmia	r3!, {r0, r1, r2}
   13f12:	f7fe f913 	bl	1213c <os_time_get>
    entry->exp_os_ticks = ble_npl_time_get() +
   13f16:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   13f1a:	f8c8 0010 	str.w	r0, [r8, #16]
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   13f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13f20:	f013 0f02 	tst.w	r3, #2
   13f24:	d104      	bne.n	13f30 <ble_gap_update_params+0x6c>
            !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   13f26:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   13f2a:	f013 0f01 	tst.w	r3, #1
   13f2e:	d020      	beq.n	13f72 <ble_gap_update_params+0xae>
        rc = ble_gap_update_tx(conn_handle, params);
   13f30:	4629      	mov	r1, r5
   13f32:	4630      	mov	r0, r6
   13f34:	f7ff fbba 	bl	136ac <ble_gap_update_tx>
   13f38:	4604      	mov	r4, r0
    l2cap_update = 0;
   13f3a:	2700      	movs	r7, #0
   13f3c:	e002      	b.n	13f44 <ble_gap_update_params+0x80>
        rc = BLE_HS_ENOTCONN;
   13f3e:	2407      	movs	r4, #7
    l2cap_update = 0;
   13f40:	2700      	movs	r7, #0
    entry = NULL;
   13f42:	46b8      	mov	r8, r7
    ble_hs_unlock();
   13f44:	f002 fcde 	bl	16904 <ble_hs_unlock>
    if (!l2cap_update) {
   13f48:	b9b7      	cbnz	r7, 13f78 <ble_gap_update_params+0xb4>
        ble_hs_timer_resched();
   13f4a:	f002 fdb5 	bl	16ab8 <ble_hs_timer_resched>
    ble_hs_lock();
   13f4e:	f002 fcd5 	bl	168fc <ble_hs_lock>
    if (rc == 0) {
   13f52:	b9ec      	cbnz	r4, 13f90 <ble_gap_update_params+0xcc>
        SLIST_INSERT_HEAD(&ble_gap_update_entries, entry, next);
   13f54:	4b11      	ldr	r3, [pc, #68]	; (13f9c <ble_gap_update_params+0xd8>)
   13f56:	681a      	ldr	r2, [r3, #0]
   13f58:	f8c8 2000 	str.w	r2, [r8]
   13f5c:	f8c3 8000 	str.w	r8, [r3]
    ble_hs_unlock();
   13f60:	f002 fcd0 	bl	16904 <ble_hs_unlock>
}
   13f64:	4620      	mov	r0, r4
   13f66:	b002      	add	sp, #8
   13f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   13f6c:	2406      	movs	r4, #6
    l2cap_update = 0;
   13f6e:	2700      	movs	r7, #0
   13f70:	e7e8      	b.n	13f44 <ble_gap_update_params+0x80>
        rc = 0;
   13f72:	2400      	movs	r4, #0
        l2cap_update = 1;
   13f74:	2701      	movs	r7, #1
   13f76:	e7e5      	b.n	13f44 <ble_gap_update_params+0x80>
        ble_gap_update_to_l2cap(params, &l2cap_params);
   13f78:	4669      	mov	r1, sp
   13f7a:	4628      	mov	r0, r5
   13f7c:	f7fe ff58 	bl	12e30 <ble_gap_update_to_l2cap>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   13f80:	2300      	movs	r3, #0
   13f82:	4a07      	ldr	r2, [pc, #28]	; (13fa0 <ble_gap_update_params+0xdc>)
   13f84:	4669      	mov	r1, sp
   13f86:	4630      	mov	r0, r6
   13f88:	f005 fab3 	bl	194f2 <ble_l2cap_sig_update>
   13f8c:	4604      	mov	r4, r0
   13f8e:	e7de      	b.n	13f4e <ble_gap_update_params+0x8a>
        ble_gap_update_entry_free(entry);
   13f90:	4640      	mov	r0, r8
   13f92:	f7ff f995 	bl	132c0 <ble_gap_update_entry_free>
   13f96:	e7e3      	b.n	13f60 <ble_gap_update_params+0x9c>
        return BLE_HS_EINVAL;
   13f98:	2403      	movs	r4, #3
   13f9a:	e7e3      	b.n	13f64 <ble_gap_update_params+0xa0>
   13f9c:	20002554 	.word	0x20002554
   13fa0:	00013d7d 	.word	0x00013d7d

00013fa4 <ble_gap_passkey_event>:
{
   13fa4:	b530      	push	{r4, r5, lr}
   13fa6:	b08f      	sub	sp, #60	; 0x3c
   13fa8:	4604      	mov	r4, r0
   13faa:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   13fac:	2234      	movs	r2, #52	; 0x34
   13fae:	2100      	movs	r1, #0
   13fb0:	a801      	add	r0, sp, #4
   13fb2:	f7fe fab0 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_PASSKEY_ACTION;
   13fb6:	230b      	movs	r3, #11
   13fb8:	f88d 3004 	strb.w	r3, [sp, #4]
    event.passkey.conn_handle = conn_handle;
   13fbc:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.passkey.params = *passkey_params;
   13fc0:	ab02      	add	r3, sp, #8
   13fc2:	e895 0003 	ldmia.w	r5, {r0, r1}
   13fc6:	e883 0003 	stmia.w	r3, {r0, r1}
    ble_gap_call_conn_event_cb(&event, conn_handle);
   13fca:	4621      	mov	r1, r4
   13fcc:	a801      	add	r0, sp, #4
   13fce:	f7fe fff3 	bl	12fb8 <ble_gap_call_conn_event_cb>
}
   13fd2:	b00f      	add	sp, #60	; 0x3c
   13fd4:	bd30      	pop	{r4, r5, pc}

00013fd6 <ble_gap_enc_event>:
{
   13fd6:	b570      	push	{r4, r5, r6, lr}
   13fd8:	b08e      	sub	sp, #56	; 0x38
   13fda:	4604      	mov	r4, r0
   13fdc:	460d      	mov	r5, r1
   13fde:	4616      	mov	r6, r2
    memset(&event, 0, sizeof event);
   13fe0:	2234      	movs	r2, #52	; 0x34
   13fe2:	2100      	movs	r1, #0
   13fe4:	a801      	add	r0, sp, #4
   13fe6:	f7fe fa96 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_ENC_CHANGE;
   13fea:	230a      	movs	r3, #10
   13fec:	f88d 3004 	strb.w	r3, [sp, #4]
    event.enc_change.conn_handle = conn_handle;
   13ff0:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.enc_change.status = status;
   13ff4:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   13ff6:	a801      	add	r0, sp, #4
   13ff8:	f7fe ffb4 	bl	12f64 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   13ffc:	4621      	mov	r1, r4
   13ffe:	a801      	add	r0, sp, #4
   14000:	f7fe ffda 	bl	12fb8 <ble_gap_call_conn_event_cb>
    if (status == 0) {
   14004:	b91d      	cbnz	r5, 1400e <ble_gap_enc_event+0x38>
        if (security_restored) {
   14006:	b926      	cbnz	r6, 14012 <ble_gap_enc_event+0x3c>
            ble_gatts_bonding_established(conn_handle);
   14008:	4620      	mov	r0, r4
   1400a:	f002 fb31 	bl	16670 <ble_gatts_bonding_established>
}
   1400e:	b00e      	add	sp, #56	; 0x38
   14010:	bd70      	pop	{r4, r5, r6, pc}
            ble_gatts_bonding_restored(conn_handle);
   14012:	4620      	mov	r0, r4
   14014:	f002 fb60 	bl	166d8 <ble_gatts_bonding_restored>
   14018:	e7f9      	b.n	1400e <ble_gap_enc_event+0x38>

0001401a <ble_gap_identity_event>:
{
   1401a:	b510      	push	{r4, lr}
   1401c:	b08e      	sub	sp, #56	; 0x38
   1401e:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   14020:	2234      	movs	r2, #52	; 0x34
   14022:	2100      	movs	r1, #0
   14024:	a801      	add	r0, sp, #4
   14026:	f7fe fa76 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_IDENTITY_RESOLVED;
   1402a:	2310      	movs	r3, #16
   1402c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.identity_resolved.conn_handle = conn_handle;
   14030:	f8ad 4008 	strh.w	r4, [sp, #8]
    ble_gap_call_conn_event_cb(&event, conn_handle);
   14034:	4621      	mov	r1, r4
   14036:	a801      	add	r0, sp, #4
   14038:	f7fe ffbe 	bl	12fb8 <ble_gap_call_conn_event_cb>
}
   1403c:	b00e      	add	sp, #56	; 0x38
   1403e:	bd10      	pop	{r4, pc}

00014040 <ble_gap_repeat_pairing_event>:
{
   14040:	b510      	push	{r4, lr}
   14042:	b08e      	sub	sp, #56	; 0x38
   14044:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   14046:	2234      	movs	r2, #52	; 0x34
   14048:	2100      	movs	r1, #0
   1404a:	a801      	add	r0, sp, #4
   1404c:	f7fe fa63 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_REPEAT_PAIRING;
   14050:	2311      	movs	r3, #17
   14052:	f88d 3004 	strb.w	r3, [sp, #4]
    event.repeat_pairing = *rp;
   14056:	6820      	ldr	r0, [r4, #0]
   14058:	9002      	str	r0, [sp, #8]
   1405a:	88a3      	ldrh	r3, [r4, #4]
   1405c:	f8ad 300c 	strh.w	r3, [sp, #12]
    rc = ble_gap_call_conn_event_cb(&event, rp->conn_handle);
   14060:	8821      	ldrh	r1, [r4, #0]
   14062:	a801      	add	r0, sp, #4
   14064:	f7fe ffa8 	bl	12fb8 <ble_gap_call_conn_event_cb>
}
   14068:	b00e      	add	sp, #56	; 0x38
   1406a:	bd10      	pop	{r4, pc}

0001406c <ble_gap_notify_rx_event>:
{
   1406c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1406e:	b08f      	sub	sp, #60	; 0x3c
   14070:	4604      	mov	r4, r0
   14072:	460f      	mov	r7, r1
   14074:	4616      	mov	r6, r2
   14076:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   14078:	2234      	movs	r2, #52	; 0x34
   1407a:	2100      	movs	r1, #0
   1407c:	a801      	add	r0, sp, #4
   1407e:	f7fe fa4a 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_RX;
   14082:	230c      	movs	r3, #12
   14084:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_rx.conn_handle = conn_handle;
   14088:	f8ad 400e 	strh.w	r4, [sp, #14]
    event.notify_rx.attr_handle = attr_handle;
   1408c:	f8ad 700c 	strh.w	r7, [sp, #12]
    event.notify_rx.om = om;
   14090:	9602      	str	r6, [sp, #8]
    event.notify_rx.indication = is_indication;
   14092:	f04f 0300 	mov.w	r3, #0
   14096:	f365 0300 	bfi	r3, r5, #0, #1
   1409a:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   1409e:	a801      	add	r0, sp, #4
   140a0:	f7fe ff60 	bl	12f64 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   140a4:	4621      	mov	r1, r4
   140a6:	a801      	add	r0, sp, #4
   140a8:	f7fe ff86 	bl	12fb8 <ble_gap_call_conn_event_cb>
    os_mbuf_free_chain(event.notify_rx.om);
   140ac:	9802      	ldr	r0, [sp, #8]
   140ae:	f7fc ff15 	bl	10edc <os_mbuf_free_chain>
}
   140b2:	b00f      	add	sp, #60	; 0x3c
   140b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000140b6 <ble_gap_notify_tx_event>:
{
   140b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   140b8:	b08f      	sub	sp, #60	; 0x3c
   140ba:	4607      	mov	r7, r0
   140bc:	460c      	mov	r4, r1
   140be:	4616      	mov	r6, r2
   140c0:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   140c2:	2234      	movs	r2, #52	; 0x34
   140c4:	2100      	movs	r1, #0
   140c6:	a801      	add	r0, sp, #4
   140c8:	f7fe fa25 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_TX;
   140cc:	230d      	movs	r3, #13
   140ce:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_tx.conn_handle = conn_handle;
   140d2:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.notify_tx.status = status;
   140d6:	9702      	str	r7, [sp, #8]
    event.notify_tx.attr_handle = attr_handle;
   140d8:	f8ad 600e 	strh.w	r6, [sp, #14]
    event.notify_tx.indication = is_indication;
   140dc:	f04f 0300 	mov.w	r3, #0
   140e0:	f365 0300 	bfi	r3, r5, #0, #1
   140e4:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_call_conn_event_cb(&event, conn_handle);
   140e8:	4621      	mov	r1, r4
   140ea:	a801      	add	r0, sp, #4
   140ec:	f7fe ff64 	bl	12fb8 <ble_gap_call_conn_event_cb>
}
   140f0:	b00f      	add	sp, #60	; 0x3c
   140f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000140f4 <ble_gap_subscribe_event>:
{
   140f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   140f6:	b08f      	sub	sp, #60	; 0x3c
   140f8:	4605      	mov	r5, r0
   140fa:	460f      	mov	r7, r1
   140fc:	4616      	mov	r6, r2
   140fe:	461c      	mov	r4, r3
    memset(&event, 0, sizeof event);
   14100:	2234      	movs	r2, #52	; 0x34
   14102:	2100      	movs	r1, #0
   14104:	a801      	add	r0, sp, #4
   14106:	f7fe fa06 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_SUBSCRIBE;
   1410a:	230e      	movs	r3, #14
   1410c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.subscribe.conn_handle = conn_handle;
   14110:	f8ad 5008 	strh.w	r5, [sp, #8]
    event.subscribe.attr_handle = attr_handle;
   14114:	f8ad 700a 	strh.w	r7, [sp, #10]
    event.subscribe.reason = reason;
   14118:	f88d 600c 	strb.w	r6, [sp, #12]
    event.subscribe.cur_notify = !!cur_notify;
   1411c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
   14120:	3200      	adds	r2, #0
   14122:	bf18      	it	ne
   14124:	2201      	movne	r2, #1
   14126:	1c23      	adds	r3, r4, #0
   14128:	bf18      	it	ne
   1412a:	2301      	movne	r3, #1
   1412c:	f362 0341 	bfi	r3, r2, #1, #1
    event.subscribe.prev_indicate = !!prev_indicate;
   14130:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   14134:	3200      	adds	r2, #0
   14136:	bf18      	it	ne
   14138:	2201      	movne	r2, #1
   1413a:	f362 0382 	bfi	r3, r2, #2, #1
    event.subscribe.cur_indicate = !!cur_indicate;
   1413e:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   14142:	3200      	adds	r2, #0
   14144:	bf18      	it	ne
   14146:	2201      	movne	r2, #1
   14148:	f362 03c3 	bfi	r3, r2, #3, #1
   1414c:	f88d 300d 	strb.w	r3, [sp, #13]
    ble_gap_event_listener_call(&event);
   14150:	a801      	add	r0, sp, #4
   14152:	f7fe ff07 	bl	12f64 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   14156:	4629      	mov	r1, r5
   14158:	a801      	add	r0, sp, #4
   1415a:	f7fe ff2d 	bl	12fb8 <ble_gap_call_conn_event_cb>
}
   1415e:	b00f      	add	sp, #60	; 0x3c
   14160:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014162 <ble_gap_mtu_event>:
{
   14162:	b570      	push	{r4, r5, r6, lr}
   14164:	b08e      	sub	sp, #56	; 0x38
   14166:	4604      	mov	r4, r0
   14168:	460e      	mov	r6, r1
   1416a:	4615      	mov	r5, r2
    memset(&event, 0, sizeof event);
   1416c:	2234      	movs	r2, #52	; 0x34
   1416e:	2100      	movs	r1, #0
   14170:	a801      	add	r0, sp, #4
   14172:	f7fe f9d0 	bl	12516 <memset>
    event.type = BLE_GAP_EVENT_MTU;
   14176:	230f      	movs	r3, #15
   14178:	f88d 3004 	strb.w	r3, [sp, #4]
    event.mtu.conn_handle = conn_handle;
   1417c:	f8ad 4008 	strh.w	r4, [sp, #8]
    event.mtu.channel_id = cid;
   14180:	f8ad 600a 	strh.w	r6, [sp, #10]
    event.mtu.value = mtu;
   14184:	f8ad 500c 	strh.w	r5, [sp, #12]
    ble_gap_event_listener_call(&event);
   14188:	a801      	add	r0, sp, #4
   1418a:	f7fe feeb 	bl	12f64 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1418e:	4621      	mov	r1, r4
   14190:	a801      	add	r0, sp, #4
   14192:	f7fe ff11 	bl	12fb8 <ble_gap_call_conn_event_cb>
}
   14196:	b00e      	add	sp, #56	; 0x38
   14198:	bd70      	pop	{r4, r5, r6, pc}
	...

0001419c <ble_gap_preempt_no_lock>:
{
   1419c:	b508      	push	{r3, lr}
    rc = ble_gap_adv_stop_no_lock();
   1419e:	f7ff fc91 	bl	13ac4 <ble_gap_adv_stop_no_lock>
    if (rc == 0) {
   141a2:	b920      	cbnz	r0, 141ae <ble_gap_preempt_no_lock+0x12>
        ble_gap_slave[0].preempted = 1;
   141a4:	4a08      	ldr	r2, [pc, #32]	; (141c8 <ble_gap_preempt_no_lock+0x2c>)
   141a6:	7d53      	ldrb	r3, [r2, #21]
   141a8:	f043 0304 	orr.w	r3, r3, #4
   141ac:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_conn_cancel_no_lock();
   141ae:	f7ff fcbd 	bl	13b2c <ble_gap_conn_cancel_no_lock>
    if (rc == 0) {
   141b2:	b910      	cbnz	r0, 141ba <ble_gap_preempt_no_lock+0x1e>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_CONN;
   141b4:	4b04      	ldr	r3, [pc, #16]	; (141c8 <ble_gap_preempt_no_lock+0x2c>)
   141b6:	2202      	movs	r2, #2
   141b8:	741a      	strb	r2, [r3, #16]
    rc = ble_gap_disc_cancel_no_lock();
   141ba:	f7ff fc9f 	bl	13afc <ble_gap_disc_cancel_no_lock>
    if (rc == 0) {
   141be:	b910      	cbnz	r0, 141c6 <ble_gap_preempt_no_lock+0x2a>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_DISC;
   141c0:	4b01      	ldr	r3, [pc, #4]	; (141c8 <ble_gap_preempt_no_lock+0x2c>)
   141c2:	2201      	movs	r2, #1
   141c4:	741a      	strb	r2, [r3, #16]
}
   141c6:	bd08      	pop	{r3, pc}
   141c8:	2000022c 	.word	0x2000022c

000141cc <ble_gap_preempt>:
{
   141cc:	b508      	push	{r3, lr}
    ble_hs_lock();
   141ce:	f002 fb95 	bl	168fc <ble_hs_lock>
    if (!ble_gap_is_preempted()) {
   141d2:	f7fe fe0f 	bl	12df4 <ble_gap_is_preempted>
   141d6:	b110      	cbz	r0, 141de <ble_gap_preempt+0x12>
    ble_hs_unlock();
   141d8:	f002 fb94 	bl	16904 <ble_hs_unlock>
}
   141dc:	bd08      	pop	{r3, pc}
        ble_gap_preempt_no_lock();
   141de:	f7ff ffdd 	bl	1419c <ble_gap_preempt_no_lock>
   141e2:	e7f9      	b.n	141d8 <ble_gap_preempt+0xc>

000141e4 <ble_gap_preempt_done>:
{
   141e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   141e6:	b08f      	sub	sp, #60	; 0x3c
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   141e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   141ec:	482b      	ldr	r0, [pc, #172]	; (1429c <ble_gap_preempt_done+0xb8>)
   141ee:	f7fd fc1f 	bl	11a30 <os_mutex_pend>
    memset(slaves, 0, sizeof(slaves));
   141f2:	4b2b      	ldr	r3, [pc, #172]	; (142a0 <ble_gap_preempt_done+0xbc>)
   141f4:	2400      	movs	r4, #0
   141f6:	601c      	str	r4, [r3, #0]
   141f8:	605c      	str	r4, [r3, #4]
    ble_hs_lock();
   141fa:	f002 fb7f 	bl	168fc <ble_hs_lock>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   141fe:	4623      	mov	r3, r4
   14200:	2b00      	cmp	r3, #0
   14202:	dd14      	ble.n	1422e <ble_gap_preempt_done+0x4a>
    if (ble_gap_master.preempted_op == BLE_GAP_OP_M_DISC) {
   14204:	4b27      	ldr	r3, [pc, #156]	; (142a4 <ble_gap_preempt_done+0xc0>)
   14206:	7c1b      	ldrb	r3, [r3, #16]
   14208:	2b01      	cmp	r3, #1
   1420a:	d028      	beq.n	1425e <ble_gap_preempt_done+0x7a>
    disc_preempted = 0;
   1420c:	2700      	movs	r7, #0
    ble_hs_unlock();
   1420e:	f002 fb79 	bl	16904 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   14212:	2309      	movs	r3, #9
   14214:	f88d 3004 	strb.w	r3, [sp, #4]
    event.adv_complete.reason = BLE_HS_EPREEMPTED;
   14218:	231d      	movs	r3, #29
   1421a:	9302      	str	r3, [sp, #8]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1421c:	2400      	movs	r4, #0
   1421e:	2c00      	cmp	r4, #0
   14220:	dd24      	ble.n	1426c <ble_gap_preempt_done+0x88>
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   14222:	481e      	ldr	r0, [pc, #120]	; (1429c <ble_gap_preempt_done+0xb8>)
   14224:	f7fd fba8 	bl	11978 <os_mutex_release>
    if (disc_preempted) {
   14228:	bb67      	cbnz	r7, 14284 <ble_gap_preempt_done+0xa0>
}
   1422a:	b00f      	add	sp, #60	; 0x3c
   1422c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_gap_slave[i].preempted) {
   1422e:	4a1d      	ldr	r2, [pc, #116]	; (142a4 <ble_gap_preempt_done+0xc0>)
   14230:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   14234:	7d52      	ldrb	r2, [r2, #21]
   14236:	f012 0f04 	tst.w	r2, #4
   1423a:	d00e      	beq.n	1425a <ble_gap_preempt_done+0x76>
            ble_gap_slave[i].preempted = 0;
   1423c:	4a19      	ldr	r2, [pc, #100]	; (142a4 <ble_gap_preempt_done+0xc0>)
   1423e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   14242:	7d50      	ldrb	r0, [r2, #21]
   14244:	f36f 0082 	bfc	r0, #2, #1
   14248:	7550      	strb	r0, [r2, #21]
            slaves[i].cb = ble_gap_slave[i].cb;
   1424a:	69d0      	ldr	r0, [r2, #28]
   1424c:	4914      	ldr	r1, [pc, #80]	; (142a0 <ble_gap_preempt_done+0xbc>)
   1424e:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
            slaves[i].arg = ble_gap_slave[i].cb_arg;
   14252:	6a12      	ldr	r2, [r2, #32]
   14254:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   14258:	604a      	str	r2, [r1, #4]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1425a:	3301      	adds	r3, #1
   1425c:	e7d0      	b.n	14200 <ble_gap_preempt_done+0x1c>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   1425e:	4b11      	ldr	r3, [pc, #68]	; (142a4 <ble_gap_preempt_done+0xc0>)
   14260:	2200      	movs	r2, #0
   14262:	741a      	strb	r2, [r3, #16]
        master_cb = ble_gap_master.cb;
   14264:	689d      	ldr	r5, [r3, #8]
        master_arg = ble_gap_master.cb_arg;
   14266:	68de      	ldr	r6, [r3, #12]
        disc_preempted = 1;
   14268:	2701      	movs	r7, #1
   1426a:	e7d0      	b.n	1420e <ble_gap_preempt_done+0x2a>
        if (slaves[i].cb) {
   1426c:	4b0c      	ldr	r3, [pc, #48]	; (142a0 <ble_gap_preempt_done+0xbc>)
   1426e:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   14272:	b129      	cbz	r1, 14280 <ble_gap_preempt_done+0x9c>
            ble_gap_call_event_cb(&event, slaves[i].cb, slaves[i].arg);
   14274:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   14278:	685a      	ldr	r2, [r3, #4]
   1427a:	a801      	add	r0, sp, #4
   1427c:	f7fe fda5 	bl	12dca <ble_gap_call_event_cb>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   14280:	3401      	adds	r4, #1
   14282:	e7cc      	b.n	1421e <ble_gap_preempt_done+0x3a>
        event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   14284:	2308      	movs	r3, #8
   14286:	f88d 3004 	strb.w	r3, [sp, #4]
        event.disc_complete.reason = BLE_HS_EPREEMPTED;
   1428a:	231d      	movs	r3, #29
   1428c:	9302      	str	r3, [sp, #8]
        ble_gap_call_event_cb(&event, master_cb, master_arg);
   1428e:	4632      	mov	r2, r6
   14290:	4629      	mov	r1, r5
   14292:	a801      	add	r0, sp, #4
   14294:	f7fe fd99 	bl	12dca <ble_gap_call_event_cb>
}
   14298:	e7c7      	b.n	1422a <ble_gap_preempt_done+0x46>
   1429a:	bf00      	nop
   1429c:	2000258c 	.word	0x2000258c
   142a0:	20002598 	.word	0x20002598
   142a4:	2000022c 	.word	0x2000022c

000142a8 <ble_gap_event_listener_unregister>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   142a8:	4b0c      	ldr	r3, [pc, #48]	; (142dc <ble_gap_event_listener_unregister+0x34>)
   142aa:	681a      	ldr	r2, [r3, #0]
   142ac:	4613      	mov	r3, r2
   142ae:	b11b      	cbz	r3, 142b8 <ble_gap_event_listener_unregister+0x10>
        if (evl == listener) {
   142b0:	4283      	cmp	r3, r0
   142b2:	d001      	beq.n	142b8 <ble_gap_event_listener_unregister+0x10>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   142b4:	689b      	ldr	r3, [r3, #8]
   142b6:	e7fa      	b.n	142ae <ble_gap_event_listener_unregister+0x6>
    if (!evl) {
   142b8:	b173      	cbz	r3, 142d8 <ble_gap_event_listener_unregister+0x30>
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   142ba:	4282      	cmp	r2, r0
   142bc:	d105      	bne.n	142ca <ble_gap_event_listener_unregister+0x22>
   142be:	6892      	ldr	r2, [r2, #8]
   142c0:	4b06      	ldr	r3, [pc, #24]	; (142dc <ble_gap_event_listener_unregister+0x34>)
   142c2:	601a      	str	r2, [r3, #0]
        rc = 0;
   142c4:	2000      	movs	r0, #0
   142c6:	4770      	bx	lr
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   142c8:	461a      	mov	r2, r3
   142ca:	6893      	ldr	r3, [r2, #8]
   142cc:	4283      	cmp	r3, r0
   142ce:	d1fb      	bne.n	142c8 <ble_gap_event_listener_unregister+0x20>
   142d0:	689b      	ldr	r3, [r3, #8]
   142d2:	6093      	str	r3, [r2, #8]
        rc = 0;
   142d4:	2000      	movs	r0, #0
   142d6:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   142d8:	2005      	movs	r0, #5
}
   142da:	4770      	bx	lr
   142dc:	20002550 	.word	0x20002550

000142e0 <ble_gap_init>:
 * $init                                                                     *
 *****************************************************************************/

int
ble_gap_init(void)
{
   142e0:	b510      	push	{r4, lr}
   142e2:	b082      	sub	sp, #8
    int rc;

    memset(&ble_gap_master, 0, sizeof(ble_gap_master));
   142e4:	4b11      	ldr	r3, [pc, #68]	; (1432c <ble_gap_init+0x4c>)
   142e6:	2400      	movs	r4, #0
   142e8:	601c      	str	r4, [r3, #0]
   142ea:	605c      	str	r4, [r3, #4]
   142ec:	609c      	str	r4, [r3, #8]
   142ee:	60dc      	str	r4, [r3, #12]
   142f0:	611c      	str	r4, [r3, #16]
    memset(ble_gap_slave, 0, sizeof(ble_gap_slave));
   142f2:	615c      	str	r4, [r3, #20]
   142f4:	619c      	str	r4, [r3, #24]
   142f6:	61dc      	str	r4, [r3, #28]
   142f8:	621c      	str	r4, [r3, #32]
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   142fa:	480d      	ldr	r0, [pc, #52]	; (14330 <ble_gap_init+0x50>)
   142fc:	f7fd fb32 	bl	11964 <os_mutex_init>
    memset(&ble_gap_sync, 0, sizeof(ble_gap_sync));
#endif

    ble_npl_mutex_init(&preempt_done_mutex);

    SLIST_INIT(&ble_gap_update_entries);
   14300:	4b0c      	ldr	r3, [pc, #48]	; (14334 <ble_gap_init+0x54>)
   14302:	601c      	str	r4, [r3, #0]
    SLIST_INIT(&ble_gap_event_listener_list);
   14304:	4b0c      	ldr	r3, [pc, #48]	; (14338 <ble_gap_init+0x58>)
   14306:	601c      	str	r4, [r3, #0]

    rc = os_mempool_init(&ble_gap_update_entry_pool,
   14308:	4b0c      	ldr	r3, [pc, #48]	; (1433c <ble_gap_init+0x5c>)
   1430a:	9300      	str	r3, [sp, #0]
   1430c:	4b0c      	ldr	r3, [pc, #48]	; (14340 <ble_gap_init+0x60>)
   1430e:	2218      	movs	r2, #24
   14310:	2101      	movs	r1, #1
   14312:	480c      	ldr	r0, [pc, #48]	; (14344 <ble_gap_init+0x64>)
   14314:	f7fd f9f2 	bl	116fc <os_mempool_init>
                         MYNEWT_VAL(BLE_GAP_MAX_PENDING_CONN_PARAM_UPDATE),
                         sizeof (struct ble_gap_update_entry),
                         ble_gap_update_entry_mem,
                         "ble_gap_update");
    switch (rc) {
   14318:	b118      	cbz	r0, 14322 <ble_gap_init+0x42>
   1431a:	2801      	cmp	r0, #1
   1431c:	d004      	beq.n	14328 <ble_gap_init+0x48>
        break;
    case OS_ENOMEM:
        rc = BLE_HS_ENOMEM;
        goto err;
    default:
        rc = BLE_HS_EOS;
   1431e:	200b      	movs	r0, #11
        goto err;
   14320:	e000      	b.n	14324 <ble_gap_init+0x44>
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_gap_stats), "ble_gap");
    if (rc != 0) {
        goto err;
    }

    return 0;
   14322:	2000      	movs	r0, #0

err:
    return rc;
}
   14324:	b002      	add	sp, #8
   14326:	bd10      	pop	{r4, pc}
        rc = BLE_HS_ENOMEM;
   14328:	2006      	movs	r0, #6
   1432a:	e7fb      	b.n	14324 <ble_gap_init+0x44>
   1432c:	2000022c 	.word	0x2000022c
   14330:	2000258c 	.word	0x2000258c
   14334:	20002554 	.word	0x20002554
   14338:	20002550 	.word	0x20002550
   1433c:	0002c258 	.word	0x0002c258
   14340:	20002558 	.word	0x20002558
   14344:	20002570 	.word	0x20002570

00014348 <ble_gattc_rx_entry_find>:
 * $rx entry                                                                 *
 *****************************************************************************/

static const void *
ble_gattc_rx_entry_find(uint8_t op, const void *rx_entries, int num_entries)
{
   14348:	b430      	push	{r4, r5}
   1434a:	4605      	mov	r5, r0

    const struct gen_entry *entries;
    int i;

    entries = rx_entries;
    for (i = 0; i < num_entries; i++) {
   1434c:	2300      	movs	r3, #0
   1434e:	4293      	cmp	r3, r2
   14350:	da07      	bge.n	14362 <ble_gattc_rx_entry_find+0x1a>
        if (entries[i].op == op) {
   14352:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   14356:	f811 4033 	ldrb.w	r4, [r1, r3, lsl #3]
   1435a:	42ac      	cmp	r4, r5
   1435c:	d002      	beq.n	14364 <ble_gattc_rx_entry_find+0x1c>
    for (i = 0; i < num_entries; i++) {
   1435e:	3301      	adds	r3, #1
   14360:	e7f5      	b.n	1434e <ble_gattc_rx_entry_find+0x6>
            return entries + i;
        }
    }

    return NULL;
   14362:	2000      	movs	r0, #0
}
   14364:	bc30      	pop	{r4, r5}
   14366:	4770      	bx	lr

00014368 <ble_gattc_err_dispatch_get>:
static ble_gattc_err_fn *
ble_gattc_err_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_err_dispatch[op];
}
   14368:	4b01      	ldr	r3, [pc, #4]	; (14370 <ble_gattc_err_dispatch_get+0x8>)
   1436a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1436e:	4770      	bx	lr
   14370:	0002c274 	.word	0x0002c274

00014374 <ble_gattc_resume_dispatch_get>:
static ble_gattc_resume_fn *
ble_gattc_resume_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_resume_dispatch[op];
}
   14374:	4b01      	ldr	r3, [pc, #4]	; (1437c <ble_gattc_resume_dispatch_get+0x8>)
   14376:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1437a:	4770      	bx	lr
   1437c:	0002c2c4 	.word	0x0002c2c4

00014380 <ble_gattc_tmo_dispatch_get>:
static ble_gattc_tmo_fn *
ble_gattc_tmo_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_tmo_dispatch[op];
}
   14380:	4b01      	ldr	r3, [pc, #4]	; (14388 <ble_gattc_tmo_dispatch_get+0x8>)
   14382:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   14386:	4770      	bx	lr
   14388:	0002c378 	.word	0x0002c378

0001438c <ble_gattc_proc_matches_conn_op>:
{
    const struct ble_gattc_criteria_conn_op *criteria;

    criteria = arg;

    if (criteria->conn_handle != proc->conn_handle) {
   1438c:	880a      	ldrh	r2, [r1, #0]
   1438e:	8903      	ldrh	r3, [r0, #8]
   14390:	429a      	cmp	r2, r3
   14392:	d001      	beq.n	14398 <ble_gattc_proc_matches_conn_op+0xc>
        return 0;
   14394:	2000      	movs	r0, #0
   14396:	4770      	bx	lr
    }

    if (criteria->op != proc->op && criteria->op != BLE_GATT_OP_NONE) {
   14398:	788b      	ldrb	r3, [r1, #2]
   1439a:	7a82      	ldrb	r2, [r0, #10]
   1439c:	4293      	cmp	r3, r2
   1439e:	d005      	beq.n	143ac <ble_gattc_proc_matches_conn_op+0x20>
   143a0:	2bff      	cmp	r3, #255	; 0xff
   143a2:	d001      	beq.n	143a8 <ble_gattc_proc_matches_conn_op+0x1c>
        return 0;
   143a4:	2000      	movs	r0, #0
    }

    return 1;
}
   143a6:	4770      	bx	lr
    return 1;
   143a8:	2001      	movs	r0, #1
   143aa:	4770      	bx	lr
   143ac:	2001      	movs	r0, #1
   143ae:	4770      	bx	lr

000143b0 <ble_gattc_proc_matches_expired>:
    struct ble_gattc_criteria_exp *criteria;
    int32_t time_diff;

    criteria = arg;

    time_diff = proc->exp_os_ticks - criteria->now;
   143b0:	6843      	ldr	r3, [r0, #4]
   143b2:	680a      	ldr	r2, [r1, #0]
   143b4:	1a9b      	subs	r3, r3, r2

    if (time_diff <= 0) {
   143b6:	2b00      	cmp	r3, #0
   143b8:	dd05      	ble.n	143c6 <ble_gattc_proc_matches_expired+0x16>
        /* Procedure is expired. */
        return 1;
    }

    /* Procedure isn't expired; determine if it is the next to expire. */
    if (time_diff < criteria->next_exp_in) {
   143ba:	684a      	ldr	r2, [r1, #4]
   143bc:	429a      	cmp	r2, r3
   143be:	dd04      	ble.n	143ca <ble_gattc_proc_matches_expired+0x1a>
        criteria->next_exp_in = time_diff;
   143c0:	604b      	str	r3, [r1, #4]
    }
    return 0;
   143c2:	2000      	movs	r0, #0
   143c4:	4770      	bx	lr
        return 1;
   143c6:	2001      	movs	r0, #1
   143c8:	4770      	bx	lr
    return 0;
   143ca:	2000      	movs	r0, #0
}
   143cc:	4770      	bx	lr

000143ce <ble_gattc_proc_matches_conn_rx_entry>:
{
    struct ble_gattc_criteria_conn_rx_entry *criteria;

    criteria = arg;

    if (criteria->conn_handle != BLE_HS_CONN_HANDLE_NONE &&
   143ce:	880b      	ldrh	r3, [r1, #0]
   143d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   143d4:	4293      	cmp	r3, r2
   143d6:	d004      	beq.n	143e2 <ble_gattc_proc_matches_conn_rx_entry+0x14>
        criteria->conn_handle != proc->conn_handle) {
   143d8:	8902      	ldrh	r2, [r0, #8]
    if (criteria->conn_handle != BLE_HS_CONN_HANDLE_NONE &&
   143da:	4293      	cmp	r3, r2
   143dc:	d001      	beq.n	143e2 <ble_gattc_proc_matches_conn_rx_entry+0x14>

        return 0;
   143de:	2000      	movs	r0, #0
    /* Entry matches; indicate corresponding rx entry. */
    criteria->matching_rx_entry = ble_gattc_rx_entry_find(
        proc->op, criteria->rx_entries, criteria->num_rx_entries);

    return 1;
}
   143e0:	4770      	bx	lr
{
   143e2:	b510      	push	{r4, lr}
   143e4:	460c      	mov	r4, r1
    criteria->matching_rx_entry = ble_gattc_rx_entry_find(
   143e6:	688a      	ldr	r2, [r1, #8]
   143e8:	6849      	ldr	r1, [r1, #4]
   143ea:	7a80      	ldrb	r0, [r0, #10]
   143ec:	f7ff ffac 	bl	14348 <ble_gattc_rx_entry_find>
   143f0:	60e0      	str	r0, [r4, #12]
    return 1;
   143f2:	2001      	movs	r0, #1
}
   143f4:	bd10      	pop	{r4, pc}

000143f6 <ble_gattc_proc_matches_stalled>:
}

static int
ble_gattc_proc_matches_stalled(struct ble_gattc_proc *proc, void *unused)
{
    return proc->flags & BLE_GATTC_PROC_F_STALLED;
   143f6:	7ac0      	ldrb	r0, [r0, #11]
}
   143f8:	f000 0001 	and.w	r0, r0, #1
   143fc:	4770      	bx	lr

000143fe <ble_gattc_proc_timeout>:
    return diff;
}

static void
ble_gattc_proc_timeout(struct ble_gattc_proc *proc)
{
   143fe:	b510      	push	{r4, lr}
   14400:	4604      	mov	r4, r0
    ble_gattc_tmo_fn *cb;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    cb = ble_gattc_tmo_dispatch_get(proc->op);
   14402:	7a80      	ldrb	r0, [r0, #10]
   14404:	f7ff ffbc 	bl	14380 <ble_gattc_tmo_dispatch_get>
    if (cb != NULL) {
   14408:	b110      	cbz	r0, 14410 <ble_gattc_proc_timeout+0x12>
   1440a:	4603      	mov	r3, r0
        cb(proc);
   1440c:	4620      	mov	r0, r4
   1440e:	4798      	blx	r3
    }
}
   14410:	bd10      	pop	{r4, pc}
	...

00014414 <ble_gattc_error>:
ble_gattc_error(int status, uint16_t att_handle)
{
    static struct ble_gatt_error error;

    /* For consistency, always indicate a handle of 0 on success. */
    if (status == 0 || status == BLE_HS_EDONE) {
   14414:	4603      	mov	r3, r0
   14416:	b118      	cbz	r0, 14420 <ble_gattc_error+0xc>
   14418:	280e      	cmp	r0, #14
   1441a:	d102      	bne.n	14422 <ble_gattc_error+0xe>
        att_handle = 0;
   1441c:	2100      	movs	r1, #0
   1441e:	e000      	b.n	14422 <ble_gattc_error+0xe>
   14420:	2100      	movs	r1, #0
    }

    error.status = status;
   14422:	4802      	ldr	r0, [pc, #8]	; (1442c <ble_gattc_error+0x18>)
   14424:	8003      	strh	r3, [r0, #0]
    error.att_handle = att_handle;
   14426:	8041      	strh	r1, [r0, #2]
    return &error;
}
   14428:	4770      	bx	lr
   1442a:	bf00      	nop
   1442c:	200026a8 	.word	0x200026a8

00014430 <ble_gattc_mtu_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_mtu_cb(struct ble_gattc_proc *proc, int status, uint16_t att_handle,
                 uint16_t mtu)
{
   14430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, mtu_fail);
    }

    if (proc->mtu.cb == NULL) {
   14434:	68c6      	ldr	r6, [r0, #12]
   14436:	b17e      	cbz	r6, 14458 <ble_gattc_mtu_cb+0x28>
   14438:	461f      	mov	r7, r3
   1443a:	460d      	mov	r5, r1
   1443c:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->mtu.cb(proc->conn_handle,
   1443e:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                          ble_gattc_error(status, att_handle),
   14442:	4611      	mov	r1, r2
   14444:	4628      	mov	r0, r5
   14446:	f7ff ffe5 	bl	14414 <ble_gattc_error>
        rc = proc->mtu.cb(proc->conn_handle,
   1444a:	6923      	ldr	r3, [r4, #16]
   1444c:	463a      	mov	r2, r7
   1444e:	4601      	mov	r1, r0
   14450:	4640      	mov	r0, r8
   14452:	47b0      	blx	r6
                          mtu, proc->mtu.cb_arg);
    }

    return rc;
}
   14454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   14458:	2000      	movs	r0, #0
    return rc;
   1445a:	e7fb      	b.n	14454 <ble_gattc_mtu_cb+0x24>

0001445c <ble_gattc_mtu_tmo>:

static void
ble_gattc_mtu_tmo(struct ble_gattc_proc *proc)
{
   1445c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_mtu_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1445e:	2300      	movs	r3, #0
   14460:	461a      	mov	r2, r3
   14462:	210d      	movs	r1, #13
   14464:	f7ff ffe4 	bl	14430 <ble_gattc_mtu_cb>
}
   14468:	bd08      	pop	{r3, pc}

0001446a <ble_gattc_mtu_err>:
/**
 * Handles an incoming ATT error response for the specified mtu-exchange proc.
 */
static void
ble_gattc_mtu_err(struct ble_gattc_proc *proc, int status, uint16_t att_handle)
{
   1446a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_mtu_cb(proc, status, att_handle, 0);
   1446c:	2300      	movs	r3, #0
   1446e:	f7ff ffdf 	bl	14430 <ble_gattc_mtu_cb>
}
   14472:	bd08      	pop	{r3, pc}

00014474 <ble_gattc_disc_all_svcs_cb>:
 */
static int
ble_gattc_disc_all_svcs_cb(struct ble_gattc_proc *proc,
                           uint16_t status, uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   14474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
    }

    if (proc->disc_all_svcs.cb == NULL) {
   14478:	6906      	ldr	r6, [r0, #16]
   1447a:	b17e      	cbz	r6, 1449c <ble_gattc_disc_all_svcs_cb+0x28>
   1447c:	461f      	mov	r7, r3
   1447e:	460d      	mov	r5, r1
   14480:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   14482:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
   14486:	4611      	mov	r1, r2
   14488:	4628      	mov	r0, r5
   1448a:	f7ff ffc3 	bl	14414 <ble_gattc_error>
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   1448e:	6963      	ldr	r3, [r4, #20]
   14490:	463a      	mov	r2, r7
   14492:	4601      	mov	r1, r0
   14494:	4640      	mov	r0, r8
   14496:	47b0      	blx	r6
                                    service, proc->disc_all_svcs.cb_arg);
    }

    return rc;
}
   14498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   1449c:	2000      	movs	r0, #0
    return rc;
   1449e:	e7fb      	b.n	14498 <ble_gattc_disc_all_svcs_cb+0x24>

000144a0 <ble_gattc_disc_all_svcs_tmo>:

static void
ble_gattc_disc_all_svcs_tmo(struct ble_gattc_proc *proc)
{
   144a0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   144a2:	2300      	movs	r3, #0
   144a4:	461a      	mov	r2, r3
   144a6:	210d      	movs	r1, #13
   144a8:	f7ff ffe4 	bl	14474 <ble_gattc_disc_all_svcs_cb>
}
   144ac:	bd08      	pop	{r3, pc}

000144ae <ble_gattc_disc_all_svcs_err>:
 * discover-all-services proc.
 */
static void
ble_gattc_disc_all_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   144ae:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   144b0:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   144b4:	d004      	beq.n	144c0 <ble_gattc_disc_all_svcs_err+0x12>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_svcs_cb(proc, status, att_handle, NULL);
   144b6:	2300      	movs	r3, #0
   144b8:	b289      	uxth	r1, r1
   144ba:	f7ff ffdb 	bl	14474 <ble_gattc_disc_all_svcs_cb>
}
   144be:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   144c0:	210e      	movs	r1, #14
   144c2:	e7f8      	b.n	144b6 <ble_gattc_disc_all_svcs_err+0x8>

000144c4 <ble_gattc_disc_svc_uuid_cb>:
 */
static int
ble_gattc_disc_svc_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   144c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
    }

    if (proc->disc_svc_uuid.cb == NULL) {
   144c8:	6a46      	ldr	r6, [r0, #36]	; 0x24
   144ca:	b17e      	cbz	r6, 144ec <ble_gattc_disc_svc_uuid_cb+0x28>
   144cc:	461f      	mov	r7, r3
   144ce:	460d      	mov	r5, r1
   144d0:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   144d2:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
   144d6:	4611      	mov	r1, r2
   144d8:	4628      	mov	r0, r5
   144da:	f7ff ff9b 	bl	14414 <ble_gattc_error>
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   144de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   144e0:	463a      	mov	r2, r7
   144e2:	4601      	mov	r1, r0
   144e4:	4640      	mov	r0, r8
   144e6:	47b0      	blx	r6
                                    service, proc->disc_svc_uuid.cb_arg);
    }

    return rc;
}
   144e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   144ec:	2000      	movs	r0, #0
    return rc;
   144ee:	e7fb      	b.n	144e8 <ble_gattc_disc_svc_uuid_cb+0x24>

000144f0 <ble_gattc_disc_svc_uuid_tmo>:

static void
ble_gattc_disc_svc_uuid_tmo(struct ble_gattc_proc *proc)
{
   144f0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   144f2:	2300      	movs	r3, #0
   144f4:	461a      	mov	r2, r3
   144f6:	210d      	movs	r1, #13
   144f8:	f7ff ffe4 	bl	144c4 <ble_gattc_disc_svc_uuid_cb>
}
   144fc:	bd08      	pop	{r3, pc}

000144fe <ble_gattc_disc_svc_uuid_err>:
 * discover-service-by-uuid proc.
 */
static void
ble_gattc_disc_svc_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   144fe:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   14500:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   14504:	d003      	beq.n	1450e <ble_gattc_disc_svc_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_svc_uuid_cb(proc, status, att_handle, NULL);
   14506:	2300      	movs	r3, #0
   14508:	f7ff ffdc 	bl	144c4 <ble_gattc_disc_svc_uuid_cb>
}
   1450c:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1450e:	210e      	movs	r1, #14
   14510:	e7f9      	b.n	14506 <ble_gattc_disc_svc_uuid_err+0x8>

00014512 <ble_gattc_disc_svc_uuid_rx_hinfo>:
 * the specified discover-service-by-uuid proc.
 */
static int
ble_gattc_disc_svc_uuid_rx_hinfo(struct ble_gattc_proc *proc,
                                 struct ble_att_find_type_value_hinfo *hinfo)
{
   14512:	b570      	push	{r4, r5, r6, lr}
   14514:	b086      	sub	sp, #24
   14516:	4604      	mov	r4, r0
    int cbrc;
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (hinfo->group_end_handle <= proc->disc_svc_uuid.prev_handle) {
   14518:	884b      	ldrh	r3, [r1, #2]
   1451a:	8c02      	ldrh	r2, [r0, #32]
   1451c:	4293      	cmp	r3, r2
   1451e:	d918      	bls.n	14552 <ble_gattc_disc_svc_uuid_rx_hinfo+0x40>
        /* Peer sent services out of order; terminate procedure. */
        rc = BLE_HS_EBADDATA;
        goto done;
    }

    proc->disc_svc_uuid.prev_handle = hinfo->group_end_handle;
   14520:	8403      	strh	r3, [r0, #32]

    service.start_handle = hinfo->attr_handle;
   14522:	880b      	ldrh	r3, [r1, #0]
   14524:	f8ad 3000 	strh.w	r3, [sp]
    service.end_handle = hinfo->group_end_handle;
   14528:	884b      	ldrh	r3, [r1, #2]
   1452a:	f8ad 3002 	strh.w	r3, [sp, #2]
    service.uuid = proc->disc_svc_uuid.service_uuid;
   1452e:	ad01      	add	r5, sp, #4
   14530:	f100 060c 	add.w	r6, r0, #12
   14534:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14538:	6833      	ldr	r3, [r6, #0]
   1453a:	602b      	str	r3, [r5, #0]

    rc = 0;
   1453c:	2500      	movs	r5, #0

done:
    cbrc = ble_gattc_disc_svc_uuid_cb(proc, rc, 0, &service);
   1453e:	466b      	mov	r3, sp
   14540:	2200      	movs	r2, #0
   14542:	4629      	mov	r1, r5
   14544:	4620      	mov	r0, r4
   14546:	f7ff ffbd 	bl	144c4 <ble_gattc_disc_svc_uuid_cb>
    if (rc != 0 || cbrc != 0) {
   1454a:	b935      	cbnz	r5, 1455a <ble_gattc_disc_svc_uuid_rx_hinfo+0x48>
   1454c:	b918      	cbnz	r0, 14556 <ble_gattc_disc_svc_uuid_rx_hinfo+0x44>
        return BLE_HS_EDONE;
    } else {
        return 0;
    }
}
   1454e:	b006      	add	sp, #24
   14550:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_EBADDATA;
   14552:	250a      	movs	r5, #10
   14554:	e7f3      	b.n	1453e <ble_gattc_disc_svc_uuid_rx_hinfo+0x2c>
        return BLE_HS_EDONE;
   14556:	200e      	movs	r0, #14
   14558:	e7f9      	b.n	1454e <ble_gattc_disc_svc_uuid_rx_hinfo+0x3c>
   1455a:	200e      	movs	r0, #14
   1455c:	e7f7      	b.n	1454e <ble_gattc_disc_svc_uuid_rx_hinfo+0x3c>

0001455e <ble_gattc_find_inc_svcs_cb>:
 */
static int
ble_gattc_find_inc_svcs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   1455e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
    }

    if (proc->find_inc_svcs.cb == NULL) {
   14562:	6946      	ldr	r6, [r0, #20]
   14564:	b17e      	cbz	r6, 14586 <ble_gattc_find_inc_svcs_cb+0x28>
   14566:	461f      	mov	r7, r3
   14568:	460d      	mov	r5, r1
   1456a:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   1456c:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
   14570:	4611      	mov	r1, r2
   14572:	4628      	mov	r0, r5
   14574:	f7ff ff4e 	bl	14414 <ble_gattc_error>
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   14578:	69a3      	ldr	r3, [r4, #24]
   1457a:	463a      	mov	r2, r7
   1457c:	4601      	mov	r1, r0
   1457e:	4640      	mov	r0, r8
   14580:	47b0      	blx	r6
                                    service, proc->find_inc_svcs.cb_arg);
    }

    return rc;
}
   14582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   14586:	2000      	movs	r0, #0
    return rc;
   14588:	e7fb      	b.n	14582 <ble_gattc_find_inc_svcs_cb+0x24>

0001458a <ble_gattc_find_inc_svcs_tmo>:

static void
ble_gattc_find_inc_svcs_tmo(struct ble_gattc_proc *proc)
{
   1458a:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_find_inc_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1458c:	2300      	movs	r3, #0
   1458e:	461a      	mov	r2, r3
   14590:	210d      	movs	r1, #13
   14592:	f7ff ffe4 	bl	1455e <ble_gattc_find_inc_svcs_cb>
}
   14596:	bd08      	pop	{r3, pc}

00014598 <ble_gattc_find_inc_svcs_err>:
 * find-included-services proc.
 */
static void
ble_gattc_find_inc_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   14598:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->find_inc_svcs.cur_start == 0 &&
   1459a:	8a03      	ldrh	r3, [r0, #16]
   1459c:	b913      	cbnz	r3, 145a4 <ble_gattc_find_inc_svcs_err+0xc>
   1459e:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   145a2:	d003      	beq.n	145ac <ble_gattc_find_inc_svcs_err+0x14>

        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_find_inc_svcs_cb(proc, status, att_handle, NULL);
   145a4:	2300      	movs	r3, #0
   145a6:	f7ff ffda 	bl	1455e <ble_gattc_find_inc_svcs_cb>
}
   145aa:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   145ac:	210e      	movs	r1, #14
   145ae:	e7f9      	b.n	145a4 <ble_gattc_find_inc_svcs_err+0xc>

000145b0 <ble_gattc_disc_all_chrs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_chrs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   145b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
    }

    if (proc->disc_all_chrs.cb == NULL) {
   145b4:	6906      	ldr	r6, [r0, #16]
   145b6:	b17e      	cbz	r6, 145d8 <ble_gattc_disc_all_chrs_cb+0x28>
   145b8:	461f      	mov	r7, r3
   145ba:	460d      	mov	r5, r1
   145bc:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   145be:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle), chr,
   145c2:	4611      	mov	r1, r2
   145c4:	4628      	mov	r0, r5
   145c6:	f7ff ff25 	bl	14414 <ble_gattc_error>
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   145ca:	6963      	ldr	r3, [r4, #20]
   145cc:	463a      	mov	r2, r7
   145ce:	4601      	mov	r1, r0
   145d0:	4640      	mov	r0, r8
   145d2:	47b0      	blx	r6
                                    proc->disc_all_chrs.cb_arg);
    }

    return rc;
}
   145d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   145d8:	2000      	movs	r0, #0
    return rc;
   145da:	e7fb      	b.n	145d4 <ble_gattc_disc_all_chrs_cb+0x24>

000145dc <ble_gattc_disc_all_chrs_tmo>:

static void
ble_gattc_disc_all_chrs_tmo(struct ble_gattc_proc *proc)
{
   145dc:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_chrs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   145de:	2300      	movs	r3, #0
   145e0:	461a      	mov	r2, r3
   145e2:	210d      	movs	r1, #13
   145e4:	f7ff ffe4 	bl	145b0 <ble_gattc_disc_all_chrs_cb>
}
   145e8:	bd08      	pop	{r3, pc}

000145ea <ble_gattc_disc_all_chrs_err>:
 * discover-all-characteristics proc.
 */
static void
ble_gattc_disc_all_chrs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   145ea:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   145ec:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   145f0:	d003      	beq.n	145fa <ble_gattc_disc_all_chrs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_chrs_cb(proc, status, att_handle, NULL);
   145f2:	2300      	movs	r3, #0
   145f4:	f7ff ffdc 	bl	145b0 <ble_gattc_disc_all_chrs_cb>
}
   145f8:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   145fa:	210e      	movs	r1, #14
   145fc:	e7f9      	b.n	145f2 <ble_gattc_disc_all_chrs_err+0x8>

000145fe <ble_gattc_disc_chr_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_chr_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   145fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
    }

    if (proc->disc_chr_uuid.cb == NULL) {
   14602:	6a46      	ldr	r6, [r0, #36]	; 0x24
   14604:	b17e      	cbz	r6, 14626 <ble_gattc_disc_chr_uuid_cb+0x28>
   14606:	461f      	mov	r7, r3
   14608:	460d      	mov	r5, r1
   1460a:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   1460c:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle), chr,
   14610:	4611      	mov	r1, r2
   14612:	4628      	mov	r0, r5
   14614:	f7ff fefe 	bl	14414 <ble_gattc_error>
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   14618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1461a:	463a      	mov	r2, r7
   1461c:	4601      	mov	r1, r0
   1461e:	4640      	mov	r0, r8
   14620:	47b0      	blx	r6
                                    proc->disc_chr_uuid.cb_arg);
    }

    return rc;
}
   14622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   14626:	2000      	movs	r0, #0
    return rc;
   14628:	e7fb      	b.n	14622 <ble_gattc_disc_chr_uuid_cb+0x24>

0001462a <ble_gattc_disc_chr_uuid_tmo>:

static void
ble_gattc_disc_chr_uuid_tmo(struct ble_gattc_proc *proc)
{
   1462a:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1462c:	2300      	movs	r3, #0
   1462e:	461a      	mov	r2, r3
   14630:	210d      	movs	r1, #13
   14632:	f7ff ffe4 	bl	145fe <ble_gattc_disc_chr_uuid_cb>
}
   14636:	bd08      	pop	{r3, pc}

00014638 <ble_gattc_disc_chr_uuid_err>:
 * discover-characteristic-by-uuid proc.
 */
static void
ble_gattc_disc_chr_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   14638:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1463a:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1463e:	d003      	beq.n	14648 <ble_gattc_disc_chr_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_chr_uuid_cb(proc, status, att_handle, NULL);
   14640:	2300      	movs	r3, #0
   14642:	f7ff ffdc 	bl	145fe <ble_gattc_disc_chr_uuid_cb>
}
   14646:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   14648:	210e      	movs	r1, #14
   1464a:	e7f9      	b.n	14640 <ble_gattc_disc_chr_uuid_err+0x8>

0001464c <ble_gattc_disc_all_dscs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_dscs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_dsc *dsc)
{
   1464c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14650:	b082      	sub	sp, #8

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
    }

    if (proc->disc_all_dscs.cb == NULL) {
   14652:	6946      	ldr	r6, [r0, #20]
   14654:	b196      	cbz	r6, 1467c <ble_gattc_disc_all_dscs_cb+0x30>
   14656:	461f      	mov	r7, r3
   14658:	460d      	mov	r5, r1
   1465a:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   1465c:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
   14660:	4611      	mov	r1, r2
   14662:	4628      	mov	r0, r5
   14664:	f7ff fed6 	bl	14414 <ble_gattc_error>
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   14668:	89a2      	ldrh	r2, [r4, #12]
   1466a:	69a3      	ldr	r3, [r4, #24]
   1466c:	9300      	str	r3, [sp, #0]
   1466e:	463b      	mov	r3, r7
   14670:	4601      	mov	r1, r0
   14672:	4640      	mov	r0, r8
   14674:	47b0      	blx	r6
                                    proc->disc_all_dscs.chr_val_handle,
                                    dsc, proc->disc_all_dscs.cb_arg);
    }

    return rc;
}
   14676:	b002      	add	sp, #8
   14678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   1467c:	2000      	movs	r0, #0
    return rc;
   1467e:	e7fa      	b.n	14676 <ble_gattc_disc_all_dscs_cb+0x2a>

00014680 <ble_gattc_disc_all_dscs_tmo>:

static void
ble_gattc_disc_all_dscs_tmo(struct ble_gattc_proc *proc)
{
   14680:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_dscs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   14682:	2300      	movs	r3, #0
   14684:	461a      	mov	r2, r3
   14686:	210d      	movs	r1, #13
   14688:	f7ff ffe0 	bl	1464c <ble_gattc_disc_all_dscs_cb>
}
   1468c:	bd08      	pop	{r3, pc}

0001468e <ble_gattc_disc_all_dscs_err>:
 * discover-all-descriptors proc.
 */
static void
ble_gattc_disc_all_dscs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1468e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   14690:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   14694:	d003      	beq.n	1469e <ble_gattc_disc_all_dscs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_dscs_cb(proc, status, att_handle, NULL);
   14696:	2300      	movs	r3, #0
   14698:	f7ff ffd8 	bl	1464c <ble_gattc_disc_all_dscs_cb>
}
   1469c:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1469e:	210e      	movs	r1, #14
   146a0:	e7f9      	b.n	14696 <ble_gattc_disc_all_dscs_err+0x8>

000146a2 <ble_gattc_disc_all_dscs_rx_idata>:
 * response for the specified discover-all-descriptors proc.
 */
static int
ble_gattc_disc_all_dscs_rx_idata(struct ble_gattc_proc *proc,
                                 struct ble_att_find_info_idata *idata)
{
   146a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   146a4:	b087      	sub	sp, #28
   146a6:	4606      	mov	r6, r0
    int cbrc;
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (idata->attr_handle <= proc->disc_all_dscs.prev_handle) {
   146a8:	880b      	ldrh	r3, [r1, #0]
   146aa:	89c2      	ldrh	r2, [r0, #14]
   146ac:	4293      	cmp	r3, r2
   146ae:	d915      	bls.n	146dc <ble_gattc_disc_all_dscs_rx_idata+0x3a>
        /* Peer sent descriptors out of order; terminate procedure. */
        rc = BLE_HS_EBADDATA;
        goto done;
    }
    proc->disc_all_dscs.prev_handle = idata->attr_handle;
   146b0:	81c3      	strh	r3, [r0, #14]

    rc = 0;
   146b2:	2700      	movs	r7, #0

done:
    dsc.handle = idata->attr_handle;
   146b4:	460c      	mov	r4, r1
   146b6:	f834 3b04 	ldrh.w	r3, [r4], #4
   146ba:	f8ad 3000 	strh.w	r3, [sp]
    dsc.uuid = idata->uuid;
   146be:	ad01      	add	r5, sp, #4
   146c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   146c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   146c4:	6823      	ldr	r3, [r4, #0]
   146c6:	602b      	str	r3, [r5, #0]

    cbrc = ble_gattc_disc_all_dscs_cb(proc, rc, 0, &dsc);
   146c8:	466b      	mov	r3, sp
   146ca:	2200      	movs	r2, #0
   146cc:	4639      	mov	r1, r7
   146ce:	4630      	mov	r0, r6
   146d0:	f7ff ffbc 	bl	1464c <ble_gattc_disc_all_dscs_cb>
    if (rc != 0 || cbrc != 0) {
   146d4:	b937      	cbnz	r7, 146e4 <ble_gattc_disc_all_dscs_rx_idata+0x42>
   146d6:	b918      	cbnz	r0, 146e0 <ble_gattc_disc_all_dscs_rx_idata+0x3e>
        return BLE_HS_EDONE;
    } else {
        return 0;
    }
}
   146d8:	b007      	add	sp, #28
   146da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   146dc:	270a      	movs	r7, #10
   146de:	e7e9      	b.n	146b4 <ble_gattc_disc_all_dscs_rx_idata+0x12>
        return BLE_HS_EDONE;
   146e0:	200e      	movs	r0, #14
   146e2:	e7f9      	b.n	146d8 <ble_gattc_disc_all_dscs_rx_idata+0x36>
   146e4:	200e      	movs	r0, #14
   146e6:	e7f7      	b.n	146d8 <ble_gattc_disc_all_dscs_rx_idata+0x36>

000146e8 <ble_gattc_read_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_cb(struct ble_gattc_proc *proc, int status,
                  uint16_t att_handle, struct ble_gatt_attr *attr)
{
   146e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, read_fail);
    }

    if (proc->read.cb == NULL) {
   146ec:	6906      	ldr	r6, [r0, #16]
   146ee:	b17e      	cbz	r6, 14710 <ble_gattc_read_cb+0x28>
   146f0:	461f      	mov	r7, r3
   146f2:	460d      	mov	r5, r1
   146f4:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read.cb(proc->conn_handle,
   146f6:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                           ble_gattc_error(status, att_handle), attr,
   146fa:	4611      	mov	r1, r2
   146fc:	4628      	mov	r0, r5
   146fe:	f7ff fe89 	bl	14414 <ble_gattc_error>
        rc = proc->read.cb(proc->conn_handle,
   14702:	6963      	ldr	r3, [r4, #20]
   14704:	463a      	mov	r2, r7
   14706:	4601      	mov	r1, r0
   14708:	4640      	mov	r0, r8
   1470a:	47b0      	blx	r6
                           proc->read.cb_arg);
    }

    return rc;
}
   1470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   14710:	2000      	movs	r0, #0
    return rc;
   14712:	e7fb      	b.n	1470c <ble_gattc_read_cb+0x24>

00014714 <ble_gattc_read_tmo>:

static void
ble_gattc_read_tmo(struct ble_gattc_proc *proc)
{
   14714:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   14716:	2300      	movs	r3, #0
   14718:	461a      	mov	r2, r3
   1471a:	210d      	movs	r1, #13
   1471c:	f7ff ffe4 	bl	146e8 <ble_gattc_read_cb>
}
   14720:	bd08      	pop	{r3, pc}

00014722 <ble_gattc_read_err>:
 * read-characteristic-value proc.
 */
static void
ble_gattc_read_err(struct ble_gattc_proc *proc, int status,
                   uint16_t att_handle)
{
   14722:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_cb(proc, status, att_handle, NULL);
   14724:	2300      	movs	r3, #0
   14726:	f7ff ffdf 	bl	146e8 <ble_gattc_read_cb>
}
   1472a:	bd08      	pop	{r3, pc}

0001472c <ble_gattc_read_rx_read_rsp>:
 * read-characteristic-value proc.
 */
static int
ble_gattc_read_rx_read_rsp(struct ble_gattc_proc *proc, int status,
                           struct os_mbuf **om)
{
   1472c:	b510      	push	{r4, lr}
   1472e:	b082      	sub	sp, #8
   14730:	4614      	mov	r4, r2
    struct ble_gatt_attr attr;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    attr.handle = proc->read.handle;
   14732:	8983      	ldrh	r3, [r0, #12]
   14734:	f8ad 3000 	strh.w	r3, [sp]
    attr.offset = 0;
   14738:	2200      	movs	r2, #0
   1473a:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = *om;
   1473e:	6823      	ldr	r3, [r4, #0]
   14740:	9301      	str	r3, [sp, #4]

    ble_gattc_read_cb(proc, status, 0, &attr);
   14742:	466b      	mov	r3, sp
   14744:	f7ff ffd0 	bl	146e8 <ble_gattc_read_cb>

    /* Indicate to the caller whether the application consumed the mbuf. */
    *om = attr.om;
   14748:	9b01      	ldr	r3, [sp, #4]
   1474a:	6023      	str	r3, [r4, #0]

    /* The read operation only has a single request / response exchange. */
    return BLE_HS_EDONE;
}
   1474c:	200e      	movs	r0, #14
   1474e:	b002      	add	sp, #8
   14750:	bd10      	pop	{r4, pc}

00014752 <ble_gattc_read_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_uuid_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   14752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, read_uuid_fail);
    }

    if (proc->read_uuid.cb == NULL) {
   14756:	6a46      	ldr	r6, [r0, #36]	; 0x24
   14758:	b17e      	cbz	r6, 1477a <ble_gattc_read_uuid_cb+0x28>
   1475a:	461f      	mov	r7, r3
   1475c:	460d      	mov	r5, r1
   1475e:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read_uuid.cb(proc->conn_handle,
   14760:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                ble_gattc_error(status, att_handle), attr,
   14764:	4611      	mov	r1, r2
   14766:	4628      	mov	r0, r5
   14768:	f7ff fe54 	bl	14414 <ble_gattc_error>
        rc = proc->read_uuid.cb(proc->conn_handle,
   1476c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1476e:	463a      	mov	r2, r7
   14770:	4601      	mov	r1, r0
   14772:	4640      	mov	r0, r8
   14774:	47b0      	blx	r6
                                proc->read_uuid.cb_arg);
    }

    return rc;
}
   14776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   1477a:	2000      	movs	r0, #0
    return rc;
   1477c:	e7fb      	b.n	14776 <ble_gattc_read_uuid_cb+0x24>

0001477e <ble_gattc_read_uuid_tmo>:

static void
ble_gattc_read_uuid_tmo(struct ble_gattc_proc *proc)
{
   1477e:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   14780:	2300      	movs	r3, #0
   14782:	461a      	mov	r2, r3
   14784:	210d      	movs	r1, #13
   14786:	f7ff ffe4 	bl	14752 <ble_gattc_read_uuid_cb>
}
   1478a:	bd08      	pop	{r3, pc}

0001478c <ble_gattc_read_uuid_err>:
 * read-using-characteristic-uuid proc.
 */
static void
ble_gattc_read_uuid_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1478c:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, status, att_handle, NULL);
   1478e:	2300      	movs	r3, #0
   14790:	f7ff ffdf 	bl	14752 <ble_gattc_read_uuid_cb>
}
   14794:	bd08      	pop	{r3, pc}

00014796 <ble_gattc_read_uuid_rx_complete>:
 * Handles a notification that a read-by-type response has been fully
 * processed for the specified read-using-characteristic-uuid proc.
 */
static int
ble_gattc_read_uuid_rx_complete(struct ble_gattc_proc *proc, int status)
{
   14796:	b510      	push	{r4, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0) {
   14798:	b931      	cbnz	r1, 147a8 <ble_gattc_read_uuid_rx_complete+0x12>
    }

    /* XXX: We may need to send a follow-up request to address the possibility
     * of multiple characteristics with identical UUIDs.
     */
    ble_gattc_read_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   1479a:	2300      	movs	r3, #0
   1479c:	461a      	mov	r2, r3
   1479e:	210e      	movs	r1, #14
   147a0:	f7ff ffd7 	bl	14752 <ble_gattc_read_uuid_cb>
    return BLE_HS_EDONE;
}
   147a4:	200e      	movs	r0, #14
   147a6:	bd10      	pop	{r4, pc}
        ble_gattc_read_uuid_cb(proc, status, 0, NULL);
   147a8:	2300      	movs	r3, #0
   147aa:	461a      	mov	r2, r3
   147ac:	f7ff ffd1 	bl	14752 <ble_gattc_read_uuid_cb>
        return BLE_HS_EDONE;
   147b0:	e7f8      	b.n	147a4 <ble_gattc_read_uuid_rx_complete+0xe>

000147b2 <ble_gattc_read_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_long_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   147b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, read_long_fail);
    }

    if (proc->read_long.cb == NULL) {
   147b6:	6906      	ldr	r6, [r0, #16]
   147b8:	b17e      	cbz	r6, 147da <ble_gattc_read_long_cb+0x28>
   147ba:	461f      	mov	r7, r3
   147bc:	460d      	mov	r5, r1
   147be:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read_long.cb(proc->conn_handle,
   147c0:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                ble_gattc_error(status, att_handle), attr,
   147c4:	4611      	mov	r1, r2
   147c6:	4628      	mov	r0, r5
   147c8:	f7ff fe24 	bl	14414 <ble_gattc_error>
        rc = proc->read_long.cb(proc->conn_handle,
   147cc:	6963      	ldr	r3, [r4, #20]
   147ce:	463a      	mov	r2, r7
   147d0:	4601      	mov	r1, r0
   147d2:	4640      	mov	r0, r8
   147d4:	47b0      	blx	r6
                                proc->read_long.cb_arg);
    }

    return rc;
}
   147d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   147da:	2000      	movs	r0, #0
    return rc;
   147dc:	e7fb      	b.n	147d6 <ble_gattc_read_long_cb+0x24>

000147de <ble_gattc_read_long_tmo>:

static void
ble_gattc_read_long_tmo(struct ble_gattc_proc *proc)
{
   147de:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_long_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   147e0:	2300      	movs	r3, #0
   147e2:	461a      	mov	r2, r3
   147e4:	210d      	movs	r1, #13
   147e6:	f7ff ffe4 	bl	147b2 <ble_gattc_read_long_cb>
}
   147ea:	bd08      	pop	{r3, pc}

000147ec <ble_gattc_read_long_err>:
 * read-long-characteristic proc.
 */
static void
ble_gattc_read_long_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   147ec:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_long_cb(proc, status, att_handle, NULL);
   147ee:	2300      	movs	r3, #0
   147f0:	f7ff ffdf 	bl	147b2 <ble_gattc_read_long_cb>
}
   147f4:	bd08      	pop	{r3, pc}

000147f6 <ble_gattc_read_mult_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_mult_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct os_mbuf **om)
{
   147f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   147f8:	b083      	sub	sp, #12
   147fa:	4605      	mov	r5, r0
   147fc:	4608      	mov	r0, r1

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, read_mult_fail);
    }

    attr.handle = 0;
   147fe:	2400      	movs	r4, #0
   14800:	f8ad 4000 	strh.w	r4, [sp]
    attr.offset = 0;
   14804:	f8ad 4002 	strh.w	r4, [sp, #2]
    if (om == NULL) {
   14808:	461c      	mov	r4, r3
   1480a:	b18b      	cbz	r3, 14830 <ble_gattc_read_mult_cb+0x3a>
        attr.om = NULL;
    } else {
        attr.om = *om;
   1480c:	681b      	ldr	r3, [r3, #0]
   1480e:	9301      	str	r3, [sp, #4]
    }

    if (proc->read_mult.cb == NULL) {
   14810:	6a2e      	ldr	r6, [r5, #32]
   14812:	b17e      	cbz	r6, 14834 <ble_gattc_read_mult_cb+0x3e>
        rc = 0;
    } else {
        rc = proc->read_mult.cb(proc->conn_handle,
   14814:	892f      	ldrh	r7, [r5, #8]
                                ble_gattc_error(status, att_handle), &attr,
   14816:	4611      	mov	r1, r2
   14818:	f7ff fdfc 	bl	14414 <ble_gattc_error>
        rc = proc->read_mult.cb(proc->conn_handle,
   1481c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1481e:	466a      	mov	r2, sp
   14820:	4601      	mov	r1, r0
   14822:	4638      	mov	r0, r7
   14824:	47b0      	blx	r6
                                proc->read_mult.cb_arg);
    }

    /* Indicate to the caller whether the application consumed the mbuf. */
    if (om != NULL) {
   14826:	b10c      	cbz	r4, 1482c <ble_gattc_read_mult_cb+0x36>
        *om = attr.om;
   14828:	9b01      	ldr	r3, [sp, #4]
   1482a:	6023      	str	r3, [r4, #0]
    }

    return rc;
}
   1482c:	b003      	add	sp, #12
   1482e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        attr.om = NULL;
   14830:	9301      	str	r3, [sp, #4]
   14832:	e7ed      	b.n	14810 <ble_gattc_read_mult_cb+0x1a>
        rc = 0;
   14834:	2000      	movs	r0, #0
   14836:	e7f6      	b.n	14826 <ble_gattc_read_mult_cb+0x30>

00014838 <ble_gattc_read_mult_tmo>:

static void
ble_gattc_read_mult_tmo(struct ble_gattc_proc *proc)
{
   14838:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_mult_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1483a:	2300      	movs	r3, #0
   1483c:	461a      	mov	r2, r3
   1483e:	210d      	movs	r1, #13
   14840:	f7ff ffd9 	bl	147f6 <ble_gattc_read_mult_cb>
}
   14844:	bd08      	pop	{r3, pc}

00014846 <ble_gattc_read_mult_err>:
 * read-multiple-characteristics proc.
 */
static void
ble_gattc_read_mult_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   14846:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_mult_cb(proc, status, att_handle, NULL);
   14848:	2300      	movs	r3, #0
   1484a:	f7ff ffd4 	bl	147f6 <ble_gattc_read_mult_cb>
}
   1484e:	bd08      	pop	{r3, pc}

00014850 <ble_gattc_write_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_long_cb(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   14850:	b570      	push	{r4, r5, r6, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, write_long_fail);
    }

    if (proc->write_long.cb == NULL) {
   14852:	6985      	ldr	r5, [r0, #24]
   14854:	b16d      	cbz	r5, 14872 <ble_gattc_write_long_cb+0x22>
   14856:	460b      	mov	r3, r1
   14858:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->write_long.cb(proc->conn_handle,
   1485a:	8906      	ldrh	r6, [r0, #8]
                                 ble_gattc_error(status, att_handle),
   1485c:	4611      	mov	r1, r2
   1485e:	4618      	mov	r0, r3
   14860:	f7ff fdd8 	bl	14414 <ble_gattc_error>
        rc = proc->write_long.cb(proc->conn_handle,
   14864:	69e3      	ldr	r3, [r4, #28]
   14866:	f104 020c 	add.w	r2, r4, #12
   1486a:	4601      	mov	r1, r0
   1486c:	4630      	mov	r0, r6
   1486e:	47a8      	blx	r5
                                 &proc->write_long.attr,
                                 proc->write_long.cb_arg);
    }

    return rc;
}
   14870:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   14872:	2000      	movs	r0, #0
    return rc;
   14874:	e7fc      	b.n	14870 <ble_gattc_write_long_cb+0x20>

00014876 <ble_gattc_write_long_tmo>:

static void
ble_gattc_write_long_tmo(struct ble_gattc_proc *proc)
{
   14876:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_long_cb(proc, BLE_HS_ETIMEOUT, 0);
   14878:	2200      	movs	r2, #0
   1487a:	210d      	movs	r1, #13
   1487c:	f7ff ffe8 	bl	14850 <ble_gattc_write_long_cb>
}
   14880:	bd08      	pop	{r3, pc}

00014882 <ble_gattc_write_long_rx_exec>:
 * Handles an incoming execute-write-response for the specified
 * write-long-characteristic-values proc.
 */
static int
ble_gattc_write_long_rx_exec(struct ble_gattc_proc *proc, int status)
{
   14882:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->write_long.attr.offset <
   14884:	89c2      	ldrh	r2, [r0, #14]
        OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   14886:	6903      	ldr	r3, [r0, #16]
   14888:	8a1b      	ldrh	r3, [r3, #16]
    if (proc->write_long.attr.offset <
   1488a:	429a      	cmp	r2, r3
   1488c:	d201      	bcs.n	14892 <ble_gattc_write_long_rx_exec+0x10>

        /* Expecting an execute write response, not a prepare write
         * response.
         */
        return BLE_HS_EBADDATA;
   1488e:	200a      	movs	r0, #10
    }

    ble_gattc_write_long_cb(proc, status, 0);
    return BLE_HS_EDONE;
}
   14890:	bd08      	pop	{r3, pc}
    ble_gattc_write_long_cb(proc, status, 0);
   14892:	2200      	movs	r2, #0
   14894:	f7ff ffdc 	bl	14850 <ble_gattc_write_long_cb>
    return BLE_HS_EDONE;
   14898:	200e      	movs	r0, #14
   1489a:	e7f9      	b.n	14890 <ble_gattc_write_long_rx_exec+0xe>

0001489c <ble_gattc_write_reliable_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_reliable_cb(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1489c:	b570      	push	{r4, r5, r6, lr}
   1489e:	b082      	sub	sp, #8

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, write_reliable_fail);
    }

    if (proc->write_reliable.cb == NULL) {
   148a0:	6b05      	ldr	r5, [r0, #48]	; 0x30
   148a2:	b18d      	cbz	r5, 148c8 <ble_gattc_write_reliable_cb+0x2c>
   148a4:	460b      	mov	r3, r1
   148a6:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->write_reliable.cb(proc->conn_handle,
   148a8:	8906      	ldrh	r6, [r0, #8]
                                     ble_gattc_error(status, att_handle),
   148aa:	4611      	mov	r1, r2
   148ac:	4618      	mov	r0, r3
   148ae:	f7ff fdb1 	bl	14414 <ble_gattc_error>
        rc = proc->write_reliable.cb(proc->conn_handle,
   148b2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   148b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
   148b8:	9200      	str	r2, [sp, #0]
   148ba:	f104 020c 	add.w	r2, r4, #12
   148be:	4601      	mov	r1, r0
   148c0:	4630      	mov	r0, r6
   148c2:	47a8      	blx	r5
                                     proc->write_reliable.num_attrs,
                                     proc->write_reliable.cb_arg);
    }

    return rc;
}
   148c4:	b002      	add	sp, #8
   148c6:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   148c8:	2000      	movs	r0, #0
    return rc;
   148ca:	e7fb      	b.n	148c4 <ble_gattc_write_reliable_cb+0x28>

000148cc <ble_gattc_write_reliable_tmo>:

static void
ble_gattc_write_reliable_tmo(struct ble_gattc_proc *proc)
{
   148cc:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_reliable_cb(proc, BLE_HS_ETIMEOUT, 0);
   148ce:	2200      	movs	r2, #0
   148d0:	210d      	movs	r1, #13
   148d2:	f7ff ffe3 	bl	1489c <ble_gattc_write_reliable_cb>
}
   148d6:	bd08      	pop	{r3, pc}

000148d8 <ble_gattc_write_reliable_rx_exec>:
 * Handles an incoming execute-write-response for the specified
 * write-reliable-characteristic-values proc.
 */
static int
ble_gattc_write_reliable_rx_exec(struct ble_gattc_proc *proc, int status)
{
   148d8:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_write_reliable_cb(proc, status, 0);
   148da:	2200      	movs	r2, #0
   148dc:	f7ff ffde 	bl	1489c <ble_gattc_write_reliable_cb>
    return BLE_HS_EDONE;
}
   148e0:	200e      	movs	r0, #14
   148e2:	bd08      	pop	{r3, pc}

000148e4 <ble_gattc_proc_set_resume_timer>:
{
   148e4:	b508      	push	{r3, lr}
    proc->flags |= BLE_GATTC_PROC_F_STALLED;
   148e6:	7ac3      	ldrb	r3, [r0, #11]
   148e8:	f043 0301 	orr.w	r3, r3, #1
   148ec:	72c3      	strb	r3, [r0, #11]
    if (ble_gattc_resume_at == 0) {
   148ee:	4b07      	ldr	r3, [pc, #28]	; (1490c <ble_gattc_proc_set_resume_timer+0x28>)
   148f0:	681b      	ldr	r3, [r3, #0]
   148f2:	b103      	cbz	r3, 148f6 <ble_gattc_proc_set_resume_timer+0x12>
}
   148f4:	bd08      	pop	{r3, pc}
    return os_time_get();
   148f6:	f7fd fc21 	bl	1213c <os_time_get>
        ble_gattc_resume_at = ble_npl_time_get() +
   148fa:	3080      	adds	r0, #128	; 0x80
   148fc:	4b03      	ldr	r3, [pc, #12]	; (1490c <ble_gattc_proc_set_resume_timer+0x28>)
   148fe:	6018      	str	r0, [r3, #0]
        if (ble_gattc_resume_at == 0) {
   14900:	2800      	cmp	r0, #0
   14902:	d1f7      	bne.n	148f4 <ble_gattc_proc_set_resume_timer+0x10>
            ble_gattc_resume_at++;
   14904:	3001      	adds	r0, #1
   14906:	6018      	str	r0, [r3, #0]
}
   14908:	e7f4      	b.n	148f4 <ble_gattc_proc_set_resume_timer+0x10>
   1490a:	bf00      	nop
   1490c:	200026a4 	.word	0x200026a4

00014910 <ble_gattc_process_resume_status>:
    switch (status) {
   14910:	2906      	cmp	r1, #6
   14912:	d001      	beq.n	14918 <ble_gattc_process_resume_status+0x8>
}
   14914:	4608      	mov	r0, r1
   14916:	4770      	bx	lr
{
   14918:	b508      	push	{r3, lr}
        ble_gattc_proc_set_resume_timer(proc);
   1491a:	f7ff ffe3 	bl	148e4 <ble_gattc_proc_set_resume_timer>
        return 0;
   1491e:	2100      	movs	r1, #0
}
   14920:	4608      	mov	r0, r1
   14922:	bd08      	pop	{r3, pc}

00014924 <ble_gattc_proc_set_exp_timer>:
{
   14924:	b510      	push	{r4, lr}
   14926:	4604      	mov	r4, r0
   14928:	f7fd fc08 	bl	1213c <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   1492c:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   14930:	6060      	str	r0, [r4, #4]
}
   14932:	bd10      	pop	{r4, pc}

00014934 <ble_gattc_ticks_until_resume>:
{
   14934:	b508      	push	{r3, lr}
    if (ble_gattc_resume_at == 0) {
   14936:	4b07      	ldr	r3, [pc, #28]	; (14954 <ble_gattc_ticks_until_resume+0x20>)
   14938:	681b      	ldr	r3, [r3, #0]
   1493a:	b143      	cbz	r3, 1494e <ble_gattc_ticks_until_resume+0x1a>
   1493c:	f7fd fbfe 	bl	1213c <os_time_get>
    diff = ble_gattc_resume_at - now;
   14940:	4b04      	ldr	r3, [pc, #16]	; (14954 <ble_gattc_ticks_until_resume+0x20>)
   14942:	681b      	ldr	r3, [r3, #0]
   14944:	1a18      	subs	r0, r3, r0
    if (diff <= 0) {
   14946:	2800      	cmp	r0, #0
   14948:	dc03      	bgt.n	14952 <ble_gattc_ticks_until_resume+0x1e>
        return 0;
   1494a:	2000      	movs	r0, #0
   1494c:	e001      	b.n	14952 <ble_gattc_ticks_until_resume+0x1e>
        return BLE_HS_FOREVER;
   1494e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   14952:	bd08      	pop	{r3, pc}
   14954:	200026a4 	.word	0x200026a4

00014958 <ble_gattc_extract>:
{
   14958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1495c:	4681      	mov	r9, r0
   1495e:	4688      	mov	r8, r1
   14960:	4693      	mov	fp, r2
   14962:	461f      	mov	r7, r3
    STAILQ_INIT(dst_list);
   14964:	2500      	movs	r5, #0
   14966:	601d      	str	r5, [r3, #0]
   14968:	605b      	str	r3, [r3, #4]
    ble_hs_lock();
   1496a:	f001 ffc7 	bl	168fc <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_gattc_procs);
   1496e:	4b17      	ldr	r3, [pc, #92]	; (149cc <ble_gattc_extract+0x74>)
   14970:	681c      	ldr	r4, [r3, #0]
    num_extracted = 0;
   14972:	46aa      	mov	sl, r5
    while (proc != NULL) {
   14974:	e00c      	b.n	14990 <ble_gattc_extract+0x38>
                STAILQ_REMOVE_HEAD(&ble_gattc_procs, next);
   14976:	4a15      	ldr	r2, [pc, #84]	; (149cc <ble_gattc_extract+0x74>)
   14978:	6813      	ldr	r3, [r2, #0]
   1497a:	681b      	ldr	r3, [r3, #0]
   1497c:	6013      	str	r3, [r2, #0]
   1497e:	b9ab      	cbnz	r3, 149ac <ble_gattc_extract+0x54>
   14980:	4613      	mov	r3, r2
   14982:	605a      	str	r2, [r3, #4]
   14984:	e012      	b.n	149ac <ble_gattc_extract+0x54>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   14986:	4b11      	ldr	r3, [pc, #68]	; (149cc <ble_gattc_extract+0x74>)
   14988:	605d      	str	r5, [r3, #4]
   1498a:	e00f      	b.n	149ac <ble_gattc_extract+0x54>
            prev = proc;
   1498c:	4625      	mov	r5, r4
   1498e:	4634      	mov	r4, r6
    while (proc != NULL) {
   14990:	b1c4      	cbz	r4, 149c4 <ble_gattc_extract+0x6c>
        next = STAILQ_NEXT(proc, next);
   14992:	6826      	ldr	r6, [r4, #0]
        if (cb(proc, arg)) {
   14994:	4641      	mov	r1, r8
   14996:	4620      	mov	r0, r4
   14998:	47c8      	blx	r9
   1499a:	2800      	cmp	r0, #0
   1499c:	d0f6      	beq.n	1498c <ble_gattc_extract+0x34>
            if (prev == NULL) {
   1499e:	2d00      	cmp	r5, #0
   149a0:	d0e9      	beq.n	14976 <ble_gattc_extract+0x1e>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   149a2:	682b      	ldr	r3, [r5, #0]
   149a4:	681b      	ldr	r3, [r3, #0]
   149a6:	602b      	str	r3, [r5, #0]
   149a8:	2b00      	cmp	r3, #0
   149aa:	d0ec      	beq.n	14986 <ble_gattc_extract+0x2e>
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   149ac:	2300      	movs	r3, #0
   149ae:	6023      	str	r3, [r4, #0]
   149b0:	687b      	ldr	r3, [r7, #4]
   149b2:	601c      	str	r4, [r3, #0]
   149b4:	607c      	str	r4, [r7, #4]
            if (max_procs > 0) {
   149b6:	f1bb 0f00 	cmp.w	fp, #0
   149ba:	dde8      	ble.n	1498e <ble_gattc_extract+0x36>
                num_extracted++;
   149bc:	f10a 0a01 	add.w	sl, sl, #1
                if (num_extracted >= max_procs) {
   149c0:	45d3      	cmp	fp, sl
   149c2:	dce4      	bgt.n	1498e <ble_gattc_extract+0x36>
    ble_hs_unlock();
   149c4:	f001 ff9e 	bl	16904 <ble_hs_unlock>
}
   149c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149cc:	2000269c 	.word	0x2000269c

000149d0 <ble_gattc_extract_expired>:
{
   149d0:	b510      	push	{r4, lr}
   149d2:	b082      	sub	sp, #8
   149d4:	4604      	mov	r4, r0
   149d6:	f7fd fbb1 	bl	1213c <os_time_get>
    criteria.now = ble_npl_time_get();
   149da:	9000      	str	r0, [sp, #0]
    criteria.next_exp_in = BLE_HS_FOREVER;
   149dc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   149e0:	9301      	str	r3, [sp, #4]
    STAILQ_INIT(dst_list);
   149e2:	2200      	movs	r2, #0
   149e4:	6022      	str	r2, [r4, #0]
   149e6:	6064      	str	r4, [r4, #4]
    ble_gattc_extract(ble_gattc_proc_matches_expired, &criteria, 0, dst_list);
   149e8:	4623      	mov	r3, r4
   149ea:	4669      	mov	r1, sp
   149ec:	4802      	ldr	r0, [pc, #8]	; (149f8 <ble_gattc_extract_expired+0x28>)
   149ee:	f7ff ffb3 	bl	14958 <ble_gattc_extract>
}
   149f2:	9801      	ldr	r0, [sp, #4]
   149f4:	b002      	add	sp, #8
   149f6:	bd10      	pop	{r4, pc}
   149f8:	000143b1 	.word	0x000143b1

000149fc <ble_gattc_extract_stalled>:
{
   149fc:	b508      	push	{r3, lr}
    ble_gattc_extract(ble_gattc_proc_matches_stalled, NULL, 0, dst_list);
   149fe:	4603      	mov	r3, r0
   14a00:	2200      	movs	r2, #0
   14a02:	4611      	mov	r1, r2
   14a04:	4801      	ldr	r0, [pc, #4]	; (14a0c <ble_gattc_extract_stalled+0x10>)
   14a06:	f7ff ffa7 	bl	14958 <ble_gattc_extract>
}
   14a0a:	bd08      	pop	{r3, pc}
   14a0c:	000143f7 	.word	0x000143f7

00014a10 <ble_gattc_extract_by_conn_op>:
{
   14a10:	b500      	push	{lr}
   14a12:	b083      	sub	sp, #12
    criteria.conn_handle = conn_handle;
   14a14:	f8ad 0004 	strh.w	r0, [sp, #4]
    criteria.op = op;
   14a18:	f88d 1006 	strb.w	r1, [sp, #6]
    ble_gattc_extract(ble_gattc_proc_matches_conn_op, &criteria, max_procs, dst_list);
   14a1c:	a901      	add	r1, sp, #4
   14a1e:	4803      	ldr	r0, [pc, #12]	; (14a2c <ble_gattc_extract_by_conn_op+0x1c>)
   14a20:	f7ff ff9a 	bl	14958 <ble_gattc_extract>
}
   14a24:	b003      	add	sp, #12
   14a26:	f85d fb04 	ldr.w	pc, [sp], #4
   14a2a:	bf00      	nop
   14a2c:	0001438d 	.word	0x0001438d

00014a30 <ble_gattc_extract_first_by_conn_op>:
{
   14a30:	b500      	push	{lr}
   14a32:	b083      	sub	sp, #12
    ble_gattc_extract_by_conn_op(conn_handle, op, 1, &dst_list);
   14a34:	466b      	mov	r3, sp
   14a36:	2201      	movs	r2, #1
   14a38:	f7ff ffea 	bl	14a10 <ble_gattc_extract_by_conn_op>
}
   14a3c:	9800      	ldr	r0, [sp, #0]
   14a3e:	b003      	add	sp, #12
   14a40:	f85d fb04 	ldr.w	pc, [sp], #4

00014a44 <ble_gattc_extract_one>:
{
   14a44:	b500      	push	{lr}
   14a46:	b083      	sub	sp, #12
    ble_gattc_extract(cb, arg, 1, &dst_list);
   14a48:	466b      	mov	r3, sp
   14a4a:	2201      	movs	r2, #1
   14a4c:	f7ff ff84 	bl	14958 <ble_gattc_extract>
}
   14a50:	9800      	ldr	r0, [sp, #0]
   14a52:	b003      	add	sp, #12
   14a54:	f85d fb04 	ldr.w	pc, [sp], #4

00014a58 <ble_gattc_extract_with_rx_entry>:
{
   14a58:	b510      	push	{r4, lr}
   14a5a:	b084      	sub	sp, #16
   14a5c:	461c      	mov	r4, r3
    criteria.conn_handle = conn_handle;
   14a5e:	f8ad 0000 	strh.w	r0, [sp]
    criteria.rx_entries = rx_entries;
   14a62:	9101      	str	r1, [sp, #4]
    criteria.num_rx_entries = num_rx_entries;
   14a64:	9202      	str	r2, [sp, #8]
    criteria.matching_rx_entry = NULL;
   14a66:	2300      	movs	r3, #0
   14a68:	9303      	str	r3, [sp, #12]
    proc = ble_gattc_extract_one(ble_gattc_proc_matches_conn_rx_entry,
   14a6a:	4669      	mov	r1, sp
   14a6c:	4803      	ldr	r0, [pc, #12]	; (14a7c <ble_gattc_extract_with_rx_entry+0x24>)
   14a6e:	f7ff ffe9 	bl	14a44 <ble_gattc_extract_one>
    *out_rx_entry = criteria.matching_rx_entry;
   14a72:	9b03      	ldr	r3, [sp, #12]
   14a74:	6023      	str	r3, [r4, #0]
}
   14a76:	b004      	add	sp, #16
   14a78:	bd10      	pop	{r4, pc}
   14a7a:	bf00      	nop
   14a7c:	000143cf 	.word	0x000143cf

00014a80 <ble_gattc_proc_insert>:
{
   14a80:	b510      	push	{r4, lr}
   14a82:	4604      	mov	r4, r0
    ble_hs_lock();
   14a84:	f001 ff3a 	bl	168fc <ble_hs_lock>
    STAILQ_INSERT_TAIL(&ble_gattc_procs, proc, next);
   14a88:	2300      	movs	r3, #0
   14a8a:	6023      	str	r3, [r4, #0]
   14a8c:	4b03      	ldr	r3, [pc, #12]	; (14a9c <ble_gattc_proc_insert+0x1c>)
   14a8e:	685a      	ldr	r2, [r3, #4]
   14a90:	6014      	str	r4, [r2, #0]
   14a92:	605c      	str	r4, [r3, #4]
    ble_hs_unlock();
   14a94:	f001 ff36 	bl	16904 <ble_hs_unlock>
}
   14a98:	bd10      	pop	{r4, pc}
   14a9a:	bf00      	nop
   14a9c:	2000269c 	.word	0x2000269c

00014aa0 <ble_gattc_indicate_tmo>:
    ble_gatts_send_next_indicate(proc->conn_handle);
}

static void
ble_gattc_indicate_tmo(struct ble_gattc_proc *proc)
{
   14aa0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gap_notify_tx_event(BLE_HS_ETIMEOUT, proc->conn_handle,
   14aa2:	2301      	movs	r3, #1
   14aa4:	8982      	ldrh	r2, [r0, #12]
   14aa6:	8901      	ldrh	r1, [r0, #8]
   14aa8:	200d      	movs	r0, #13
   14aaa:	f7ff fb04 	bl	140b6 <ble_gap_notify_tx_event>
                            proc->indicate.chr_val_handle, 1);
}
   14aae:	bd08      	pop	{r3, pc}

00014ab0 <ble_gattc_write_cb>:
{
   14ab0:	b570      	push	{r4, r5, r6, lr}
   14ab2:	b082      	sub	sp, #8
    if (proc->write.cb == NULL) {
   14ab4:	6905      	ldr	r5, [r0, #16]
   14ab6:	b1ad      	cbz	r5, 14ae4 <ble_gattc_write_cb+0x34>
   14ab8:	460b      	mov	r3, r1
   14aba:	4604      	mov	r4, r0
        memset(&attr, 0, sizeof attr);
   14abc:	2100      	movs	r1, #0
   14abe:	f8cd 1002 	str.w	r1, [sp, #2]
   14ac2:	f8ad 1006 	strh.w	r1, [sp, #6]
        attr.handle = proc->write.att_handle;
   14ac6:	8981      	ldrh	r1, [r0, #12]
   14ac8:	f8ad 1000 	strh.w	r1, [sp]
        rc = proc->write.cb(proc->conn_handle,
   14acc:	8906      	ldrh	r6, [r0, #8]
                            ble_gattc_error(status, att_handle),
   14ace:	4611      	mov	r1, r2
   14ad0:	4618      	mov	r0, r3
   14ad2:	f7ff fc9f 	bl	14414 <ble_gattc_error>
        rc = proc->write.cb(proc->conn_handle,
   14ad6:	6963      	ldr	r3, [r4, #20]
   14ad8:	466a      	mov	r2, sp
   14ada:	4601      	mov	r1, r0
   14adc:	4630      	mov	r0, r6
   14ade:	47a8      	blx	r5
}
   14ae0:	b002      	add	sp, #8
   14ae2:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   14ae4:	2000      	movs	r0, #0
    return rc;
   14ae6:	e7fb      	b.n	14ae0 <ble_gattc_write_cb+0x30>

00014ae8 <ble_gattc_write_tmo>:
{
   14ae8:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, BLE_HS_ETIMEOUT, 0);
   14aea:	2200      	movs	r2, #0
   14aec:	210d      	movs	r1, #13
   14aee:	f7ff ffdf 	bl	14ab0 <ble_gattc_write_cb>
}
   14af2:	bd08      	pop	{r3, pc}

00014af4 <ble_gattc_write_err>:
{
   14af4:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, status, att_handle);
   14af6:	f7ff ffdb 	bl	14ab0 <ble_gattc_write_cb>
}
   14afa:	bd08      	pop	{r3, pc}

00014afc <ble_gattc_proc_free>:
    if (proc != NULL) {
   14afc:	b1e8      	cbz	r0, 14b3a <ble_gattc_proc_free+0x3e>
{
   14afe:	b538      	push	{r3, r4, r5, lr}
   14b00:	4604      	mov	r4, r0
        switch (proc->op) {
   14b02:	7a83      	ldrb	r3, [r0, #10]
   14b04:	2b0c      	cmp	r3, #12
   14b06:	d006      	beq.n	14b16 <ble_gattc_proc_free+0x1a>
   14b08:	2b0d      	cmp	r3, #13
   14b0a:	d014      	beq.n	14b36 <ble_gattc_proc_free+0x3a>
        rc = os_memblock_put(&ble_gattc_proc_pool, proc);
   14b0c:	4621      	mov	r1, r4
   14b0e:	480b      	ldr	r0, [pc, #44]	; (14b3c <ble_gattc_proc_free+0x40>)
   14b10:	f7fc fe61 	bl	117d6 <os_memblock_put>
}
   14b14:	bd38      	pop	{r3, r4, r5, pc}
            os_mbuf_free_chain(proc->write_long.attr.om);
   14b16:	6900      	ldr	r0, [r0, #16]
   14b18:	f7fc f9e0 	bl	10edc <os_mbuf_free_chain>
            break;
   14b1c:	e7f6      	b.n	14b0c <ble_gattc_proc_free+0x10>
                os_mbuf_free_chain(proc->write_reliable.attrs[i].om);
   14b1e:	1c5d      	adds	r5, r3, #1
   14b20:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   14b24:	6898      	ldr	r0, [r3, #8]
   14b26:	f7fc f9d9 	bl	10edc <os_mbuf_free_chain>
            for (i = 0; i < proc->write_reliable.num_attrs; i++) {
   14b2a:	462b      	mov	r3, r5
   14b2c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   14b30:	429a      	cmp	r2, r3
   14b32:	dcf4      	bgt.n	14b1e <ble_gattc_proc_free+0x22>
   14b34:	e7ea      	b.n	14b0c <ble_gattc_proc_free+0x10>
   14b36:	2300      	movs	r3, #0
   14b38:	e7f8      	b.n	14b2c <ble_gattc_proc_free+0x30>
   14b3a:	4770      	bx	lr
   14b3c:	20002680 	.word	0x20002680

00014b40 <ble_gattc_fail_procs>:
{
   14b40:	b530      	push	{r4, r5, lr}
   14b42:	b083      	sub	sp, #12
   14b44:	4615      	mov	r5, r2
    ble_gattc_extract_by_conn_op(conn_handle, op, 0, &temp_list);
   14b46:	466b      	mov	r3, sp
   14b48:	2200      	movs	r2, #0
   14b4a:	f7ff ff61 	bl	14a10 <ble_gattc_extract_by_conn_op>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   14b4e:	e002      	b.n	14b56 <ble_gattc_fail_procs+0x16>
        ble_gattc_proc_free(proc);
   14b50:	4620      	mov	r0, r4
   14b52:	f7ff ffd3 	bl	14afc <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   14b56:	9c00      	ldr	r4, [sp, #0]
   14b58:	b17c      	cbz	r4, 14b7a <ble_gattc_fail_procs+0x3a>
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   14b5a:	7aa0      	ldrb	r0, [r4, #10]
   14b5c:	f7ff fc04 	bl	14368 <ble_gattc_err_dispatch_get>
   14b60:	4603      	mov	r3, r0
        err_cb(proc, status, 0);
   14b62:	2200      	movs	r2, #0
   14b64:	4629      	mov	r1, r5
   14b66:	4620      	mov	r0, r4
   14b68:	4798      	blx	r3
        STAILQ_REMOVE_HEAD(&temp_list, next);
   14b6a:	9b00      	ldr	r3, [sp, #0]
   14b6c:	681b      	ldr	r3, [r3, #0]
   14b6e:	9300      	str	r3, [sp, #0]
   14b70:	2b00      	cmp	r3, #0
   14b72:	d1ed      	bne.n	14b50 <ble_gattc_fail_procs+0x10>
   14b74:	f8cd d004 	str.w	sp, [sp, #4]
   14b78:	e7ea      	b.n	14b50 <ble_gattc_fail_procs+0x10>
}
   14b7a:	b003      	add	sp, #12
   14b7c:	bd30      	pop	{r4, r5, pc}

00014b7e <ble_gattc_write_reliable_err>:
{
   14b7e:	b510      	push	{r4, lr}
   14b80:	4604      	mov	r4, r0
    ble_gattc_write_reliable_cb(proc, status, att_handle);
   14b82:	f7ff fe8b 	bl	1489c <ble_gattc_write_reliable_cb>
    if (proc->write_reliable.cur_attr < proc->write_reliable.num_attrs) {
   14b86:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   14b8a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   14b8e:	429a      	cmp	r2, r3
   14b90:	d300      	bcc.n	14b94 <ble_gattc_write_reliable_err+0x16>
}
   14b92:	bd10      	pop	{r4, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   14b94:	2100      	movs	r1, #0
   14b96:	8920      	ldrh	r0, [r4, #8]
   14b98:	f007 f8cc 	bl	1bd34 <ble_att_clt_tx_exec_write>
}
   14b9c:	e7f9      	b.n	14b92 <ble_gattc_write_reliable_err+0x14>

00014b9e <ble_gattc_write_long_err>:
{
   14b9e:	b570      	push	{r4, r5, r6, lr}
   14ba0:	4604      	mov	r4, r0
   14ba2:	460d      	mov	r5, r1
   14ba4:	4616      	mov	r6, r2
    if (proc->write_long.attr.offset > 0 &&
   14ba6:	89c3      	ldrh	r3, [r0, #14]
   14ba8:	b11b      	cbz	r3, 14bb2 <ble_gattc_write_long_err+0x14>
            OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   14baa:	6902      	ldr	r2, [r0, #16]
   14bac:	8a12      	ldrh	r2, [r2, #16]
    if (proc->write_long.attr.offset > 0 &&
   14bae:	4293      	cmp	r3, r2
   14bb0:	d305      	bcc.n	14bbe <ble_gattc_write_long_err+0x20>
    ble_gattc_write_long_cb(proc, status, att_handle);
   14bb2:	4632      	mov	r2, r6
   14bb4:	4629      	mov	r1, r5
   14bb6:	4620      	mov	r0, r4
   14bb8:	f7ff fe4a 	bl	14850 <ble_gattc_write_long_cb>
}
   14bbc:	bd70      	pop	{r4, r5, r6, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   14bbe:	2100      	movs	r1, #0
   14bc0:	8900      	ldrh	r0, [r0, #8]
   14bc2:	f007 f8b7 	bl	1bd34 <ble_att_clt_tx_exec_write>
   14bc6:	e7f4      	b.n	14bb2 <ble_gattc_write_long_err+0x14>

00014bc8 <ble_gattc_write_reliable_tx>:
{
   14bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14bcc:	4604      	mov	r4, r0
    attr_idx = proc->write_reliable.cur_attr;
   14bce:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
    if (attr_idx >= proc->write_reliable.num_attrs) {
   14bd2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   14bd6:	429d      	cmp	r5, r3
   14bd8:	d225      	bcs.n	14c26 <ble_gattc_write_reliable_tx+0x5e>
    attr = proc->write_reliable.attrs + attr_idx;
   14bda:	f100 080c 	add.w	r8, r0, #12
   14bde:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   14be2:	8900      	ldrh	r0, [r0, #8]
   14be4:	f006 fdf3 	bl	1b7ce <ble_att_mtu>
   14be8:	3805      	subs	r0, #5
   14bea:	b280      	uxth	r0, r0
    if (max_sz <= 0) {
   14bec:	b338      	cbz	r0, 14c3e <ble_gattc_write_reliable_tx+0x76>
        min(max_sz, OS_MBUF_PKTLEN(attr->om) - attr->offset);
   14bee:	687b      	ldr	r3, [r7, #4]
   14bf0:	8a1b      	ldrh	r3, [r3, #16]
   14bf2:	887a      	ldrh	r2, [r7, #2]
   14bf4:	1a9b      	subs	r3, r3, r2
   14bf6:	4298      	cmp	r0, r3
   14bf8:	bfa8      	it	ge
   14bfa:	4618      	movge	r0, r3
    proc->write_reliable.length =
   14bfc:	85e0      	strh	r0, [r4, #46]	; 0x2e
    om = ble_hs_mbuf_att_pkt();
   14bfe:	f003 fe04 	bl	1880a <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   14c02:	4606      	mov	r6, r0
   14c04:	b1f0      	cbz	r0, 14c44 <ble_gattc_write_reliable_tx+0x7c>
    rc = os_mbuf_appendfrom(om, attr->om, attr->offset,
   14c06:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   14c08:	887a      	ldrh	r2, [r7, #2]
   14c0a:	6879      	ldr	r1, [r7, #4]
   14c0c:	f7fc fa44 	bl	11098 <os_mbuf_appendfrom>
    if (rc != 0) {
   14c10:	b9d0      	cbnz	r0, 14c48 <ble_gattc_write_reliable_tx+0x80>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle, attr->handle,
   14c12:	4633      	mov	r3, r6
   14c14:	887a      	ldrh	r2, [r7, #2]
   14c16:	f838 1035 	ldrh.w	r1, [r8, r5, lsl #3]
   14c1a:	8920      	ldrh	r0, [r4, #8]
   14c1c:	f007 f836 	bl	1bc8c <ble_att_clt_tx_prep_write>
   14c20:	4604      	mov	r4, r0
    om = NULL;
   14c22:	2600      	movs	r6, #0
done:
   14c24:	e005      	b.n	14c32 <ble_gattc_write_reliable_tx+0x6a>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   14c26:	2101      	movs	r1, #1
   14c28:	8900      	ldrh	r0, [r0, #8]
   14c2a:	f007 f883 	bl	1bd34 <ble_att_clt_tx_exec_write>
   14c2e:	4604      	mov	r4, r0
    om = NULL;
   14c30:	2600      	movs	r6, #0
    os_mbuf_free_chain(om);
   14c32:	4630      	mov	r0, r6
   14c34:	f7fc f952 	bl	10edc <os_mbuf_free_chain>
}
   14c38:	4620      	mov	r0, r4
   14c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOTCONN;
   14c3e:	2407      	movs	r4, #7
    om = NULL;
   14c40:	2600      	movs	r6, #0
   14c42:	e7f6      	b.n	14c32 <ble_gattc_write_reliable_tx+0x6a>
        rc = BLE_HS_ENOMEM;
   14c44:	2406      	movs	r4, #6
   14c46:	e7f4      	b.n	14c32 <ble_gattc_write_reliable_tx+0x6a>
        rc = BLE_HS_ENOMEM;
   14c48:	2406      	movs	r4, #6
   14c4a:	e7f2      	b.n	14c32 <ble_gattc_write_reliable_tx+0x6a>

00014c4c <ble_gattc_write_reliable_resume>:
{
   14c4c:	b538      	push	{r3, r4, r5, lr}
   14c4e:	4605      	mov	r5, r0
    status = ble_gattc_write_reliable_tx(proc);
   14c50:	f7ff ffba 	bl	14bc8 <ble_gattc_write_reliable_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   14c54:	4601      	mov	r1, r0
   14c56:	4628      	mov	r0, r5
   14c58:	f7ff fe5a 	bl	14910 <ble_gattc_process_resume_status>
    if (rc != 0) {
   14c5c:	4604      	mov	r4, r0
   14c5e:	b908      	cbnz	r0, 14c64 <ble_gattc_write_reliable_resume+0x18>
}
   14c60:	4620      	mov	r0, r4
   14c62:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_reliable_cb(proc, rc, 0);
   14c64:	2200      	movs	r2, #0
   14c66:	4601      	mov	r1, r0
   14c68:	4628      	mov	r0, r5
   14c6a:	f7ff fe17 	bl	1489c <ble_gattc_write_reliable_cb>
        return rc;
   14c6e:	e7f7      	b.n	14c60 <ble_gattc_write_reliable_resume+0x14>

00014c70 <ble_gattc_write_long_tx>:
{
   14c70:	b538      	push	{r3, r4, r5, lr}
   14c72:	4604      	mov	r4, r0
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   14c74:	8900      	ldrh	r0, [r0, #8]
   14c76:	f006 fdaa 	bl	1b7ce <ble_att_mtu>
   14c7a:	1f42      	subs	r2, r0, #5
    if (max_sz <= 0) {
   14c7c:	2a00      	cmp	r2, #0
   14c7e:	dd27      	ble.n	14cd0 <ble_gattc_write_long_tx+0x60>
    write_len = min(max_sz,
   14c80:	6923      	ldr	r3, [r4, #16]
   14c82:	8a1b      	ldrh	r3, [r3, #16]
   14c84:	89e0      	ldrh	r0, [r4, #14]
   14c86:	1a18      	subs	r0, r3, r0
   14c88:	4290      	cmp	r0, r2
   14c8a:	bfa8      	it	ge
   14c8c:	4610      	movge	r0, r2
    if (write_len <= 0) {
   14c8e:	2800      	cmp	r0, #0
   14c90:	dd13      	ble.n	14cba <ble_gattc_write_long_tx+0x4a>
    proc->write_long.length = write_len;
   14c92:	82a0      	strh	r0, [r4, #20]
    om = ble_hs_mbuf_att_pkt();
   14c94:	f003 fdb9 	bl	1880a <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   14c98:	4605      	mov	r5, r0
   14c9a:	b1e0      	cbz	r0, 14cd6 <ble_gattc_write_long_tx+0x66>
    rc = os_mbuf_appendfrom(om, proc->write_long.attr.om,
   14c9c:	8aa3      	ldrh	r3, [r4, #20]
   14c9e:	89e2      	ldrh	r2, [r4, #14]
   14ca0:	6921      	ldr	r1, [r4, #16]
   14ca2:	f7fc f9f9 	bl	11098 <os_mbuf_appendfrom>
    if (rc != 0) {
   14ca6:	b9c0      	cbnz	r0, 14cda <ble_gattc_write_long_tx+0x6a>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle,
   14ca8:	462b      	mov	r3, r5
   14caa:	89e2      	ldrh	r2, [r4, #14]
   14cac:	89a1      	ldrh	r1, [r4, #12]
   14cae:	8920      	ldrh	r0, [r4, #8]
   14cb0:	f006 ffec 	bl	1bc8c <ble_att_clt_tx_prep_write>
   14cb4:	4604      	mov	r4, r0
    om = NULL;
   14cb6:	2500      	movs	r5, #0
done:
   14cb8:	e005      	b.n	14cc6 <ble_gattc_write_long_tx+0x56>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   14cba:	2101      	movs	r1, #1
   14cbc:	8920      	ldrh	r0, [r4, #8]
   14cbe:	f007 f839 	bl	1bd34 <ble_att_clt_tx_exec_write>
   14cc2:	4604      	mov	r4, r0
    om = NULL;
   14cc4:	2500      	movs	r5, #0
    os_mbuf_free_chain(om);
   14cc6:	4628      	mov	r0, r5
   14cc8:	f7fc f908 	bl	10edc <os_mbuf_free_chain>
}
   14ccc:	4620      	mov	r0, r4
   14cce:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   14cd0:	2407      	movs	r4, #7
    om = NULL;
   14cd2:	2500      	movs	r5, #0
   14cd4:	e7f7      	b.n	14cc6 <ble_gattc_write_long_tx+0x56>
        rc = BLE_HS_ENOMEM;
   14cd6:	2406      	movs	r4, #6
   14cd8:	e7f5      	b.n	14cc6 <ble_gattc_write_long_tx+0x56>
        rc = BLE_HS_ENOMEM;
   14cda:	2406      	movs	r4, #6
   14cdc:	e7f3      	b.n	14cc6 <ble_gattc_write_long_tx+0x56>

00014cde <ble_gattc_write_long_resume>:
{
   14cde:	b538      	push	{r3, r4, r5, lr}
   14ce0:	4605      	mov	r5, r0
    status = ble_gattc_write_long_tx(proc);
   14ce2:	f7ff ffc5 	bl	14c70 <ble_gattc_write_long_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   14ce6:	4601      	mov	r1, r0
   14ce8:	4628      	mov	r0, r5
   14cea:	f7ff fe11 	bl	14910 <ble_gattc_process_resume_status>
    if (rc != 0) {
   14cee:	4604      	mov	r4, r0
   14cf0:	b908      	cbnz	r0, 14cf6 <ble_gattc_write_long_resume+0x18>
}
   14cf2:	4620      	mov	r0, r4
   14cf4:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_long_cb(proc, rc, 0);
   14cf6:	2200      	movs	r2, #0
   14cf8:	4601      	mov	r1, r0
   14cfa:	4628      	mov	r0, r5
   14cfc:	f7ff fda8 	bl	14850 <ble_gattc_write_long_cb>
        return rc;
   14d00:	e7f7      	b.n	14cf2 <ble_gattc_write_long_resume+0x14>

00014d02 <ble_gattc_read_long_tx>:
{
   14d02:	b508      	push	{r3, lr}
    if (proc->read_long.offset == 0) {
   14d04:	89c2      	ldrh	r2, [r0, #14]
   14d06:	b922      	cbnz	r2, 14d12 <ble_gattc_read_long_tx+0x10>
        rc = ble_att_clt_tx_read(proc->conn_handle, proc->read_long.handle);
   14d08:	8981      	ldrh	r1, [r0, #12]
   14d0a:	8900      	ldrh	r0, [r0, #8]
   14d0c:	f006 ff25 	bl	1bb5a <ble_att_clt_tx_read>
}
   14d10:	bd08      	pop	{r3, pc}
        rc = ble_att_clt_tx_read_blob(proc->conn_handle,
   14d12:	8981      	ldrh	r1, [r0, #12]
   14d14:	8900      	ldrh	r0, [r0, #8]
   14d16:	f006 ff3d 	bl	1bb94 <ble_att_clt_tx_read_blob>
   14d1a:	e7f9      	b.n	14d10 <ble_gattc_read_long_tx+0xe>

00014d1c <ble_gattc_read_long_resume>:
{
   14d1c:	b538      	push	{r3, r4, r5, lr}
   14d1e:	4605      	mov	r5, r0
    status = ble_gattc_read_long_tx(proc);
   14d20:	f7ff ffef 	bl	14d02 <ble_gattc_read_long_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   14d24:	4601      	mov	r1, r0
   14d26:	4628      	mov	r0, r5
   14d28:	f7ff fdf2 	bl	14910 <ble_gattc_process_resume_status>
    if (rc != 0) {
   14d2c:	4604      	mov	r4, r0
   14d2e:	b908      	cbnz	r0, 14d34 <ble_gattc_read_long_resume+0x18>
}
   14d30:	4620      	mov	r0, r4
   14d32:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_read_long_cb(proc, rc, 0, NULL);
   14d34:	2300      	movs	r3, #0
   14d36:	461a      	mov	r2, r3
   14d38:	4601      	mov	r1, r0
   14d3a:	4628      	mov	r0, r5
   14d3c:	f7ff fd39 	bl	147b2 <ble_gattc_read_long_cb>
        return rc;
   14d40:	e7f6      	b.n	14d30 <ble_gattc_read_long_resume+0x14>

00014d42 <ble_gattc_read_long_rx_read_rsp>:
{
   14d42:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d44:	b083      	sub	sp, #12
   14d46:	4604      	mov	r4, r0
   14d48:	460f      	mov	r7, r1
   14d4a:	4615      	mov	r5, r2
    data_len = OS_MBUF_PKTLEN(*om);
   14d4c:	6813      	ldr	r3, [r2, #0]
   14d4e:	8a1e      	ldrh	r6, [r3, #16]
    attr.handle = proc->read_long.handle;
   14d50:	8982      	ldrh	r2, [r0, #12]
   14d52:	f8ad 2000 	strh.w	r2, [sp]
    attr.offset = proc->read_long.offset;
   14d56:	89c2      	ldrh	r2, [r0, #14]
   14d58:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = *om;
   14d5c:	9301      	str	r3, [sp, #4]
    rc = ble_gattc_read_long_cb(proc, status, 0, &attr);
   14d5e:	466b      	mov	r3, sp
   14d60:	2200      	movs	r2, #0
   14d62:	f7ff fd26 	bl	147b2 <ble_gattc_read_long_cb>
    *om = attr.om;
   14d66:	9b01      	ldr	r3, [sp, #4]
   14d68:	602b      	str	r3, [r5, #0]
    if (rc != 0 || status != 0) {
   14d6a:	b9c8      	cbnz	r0, 14da0 <ble_gattc_read_long_rx_read_rsp+0x5e>
   14d6c:	b9d7      	cbnz	r7, 14da4 <ble_gattc_read_long_rx_read_rsp+0x62>
    mtu = ble_att_mtu(proc->conn_handle);
   14d6e:	8920      	ldrh	r0, [r4, #8]
   14d70:	f006 fd2d 	bl	1b7ce <ble_att_mtu>
    if (mtu == 0) {
   14d74:	b1d0      	cbz	r0, 14dac <ble_gattc_read_long_rx_read_rsp+0x6a>
    if (data_len < mtu - 1) {
   14d76:	1e43      	subs	r3, r0, #1
   14d78:	429e      	cmp	r6, r3
   14d7a:	db09      	blt.n	14d90 <ble_gattc_read_long_rx_read_rsp+0x4e>
    proc->read_long.offset += data_len;
   14d7c:	89e3      	ldrh	r3, [r4, #14]
   14d7e:	441e      	add	r6, r3
   14d80:	81e6      	strh	r6, [r4, #14]
    rc = ble_gattc_read_long_resume(proc);
   14d82:	4620      	mov	r0, r4
   14d84:	f7ff ffca 	bl	14d1c <ble_gattc_read_long_resume>
    if (rc != 0) {
   14d88:	4603      	mov	r3, r0
   14d8a:	b160      	cbz	r0, 14da6 <ble_gattc_read_long_rx_read_rsp+0x64>
        return BLE_HS_EDONE;
   14d8c:	230e      	movs	r3, #14
   14d8e:	e00a      	b.n	14da6 <ble_gattc_read_long_rx_read_rsp+0x64>
        ble_gattc_read_long_cb(proc, BLE_HS_EDONE, 0, NULL);
   14d90:	2300      	movs	r3, #0
   14d92:	461a      	mov	r2, r3
   14d94:	210e      	movs	r1, #14
   14d96:	4620      	mov	r0, r4
   14d98:	f7ff fd0b 	bl	147b2 <ble_gattc_read_long_cb>
        return BLE_HS_EDONE;
   14d9c:	230e      	movs	r3, #14
   14d9e:	e002      	b.n	14da6 <ble_gattc_read_long_rx_read_rsp+0x64>
        return BLE_HS_EDONE;
   14da0:	230e      	movs	r3, #14
   14da2:	e000      	b.n	14da6 <ble_gattc_read_long_rx_read_rsp+0x64>
   14da4:	230e      	movs	r3, #14
}
   14da6:	4618      	mov	r0, r3
   14da8:	b003      	add	sp, #12
   14daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EDONE;
   14dac:	230e      	movs	r3, #14
   14dae:	e7fa      	b.n	14da6 <ble_gattc_read_long_rx_read_rsp+0x64>

00014db0 <ble_gattc_disc_all_dscs_tx>:
{
   14db0:	b508      	push	{r3, lr}
                                  proc->disc_all_dscs.prev_handle + 1,
   14db2:	89c1      	ldrh	r1, [r0, #14]
    rc = ble_att_clt_tx_find_info(proc->conn_handle,
   14db4:	3101      	adds	r1, #1
   14db6:	8a02      	ldrh	r2, [r0, #16]
   14db8:	b289      	uxth	r1, r1
   14dba:	8900      	ldrh	r0, [r0, #8]
   14dbc:	f006 fdef 	bl	1b99e <ble_att_clt_tx_find_info>
}
   14dc0:	bd08      	pop	{r3, pc}

00014dc2 <ble_gattc_disc_all_dscs_resume>:
{
   14dc2:	b538      	push	{r3, r4, r5, lr}
   14dc4:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_dscs_tx(proc);
   14dc6:	f7ff fff3 	bl	14db0 <ble_gattc_disc_all_dscs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   14dca:	4601      	mov	r1, r0
   14dcc:	4628      	mov	r0, r5
   14dce:	f7ff fd9f 	bl	14910 <ble_gattc_process_resume_status>
    if (rc != 0) {
   14dd2:	4604      	mov	r4, r0
   14dd4:	b908      	cbnz	r0, 14dda <ble_gattc_disc_all_dscs_resume+0x18>
}
   14dd6:	4620      	mov	r0, r4
   14dd8:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_dscs_cb(proc, rc, 0, NULL);
   14dda:	2300      	movs	r3, #0
   14ddc:	461a      	mov	r2, r3
   14dde:	4601      	mov	r1, r0
   14de0:	4628      	mov	r0, r5
   14de2:	f7ff fc33 	bl	1464c <ble_gattc_disc_all_dscs_cb>
        return rc;
   14de6:	e7f6      	b.n	14dd6 <ble_gattc_disc_all_dscs_resume+0x14>

00014de8 <ble_gattc_disc_all_dscs_rx_complete>:
{
   14de8:	b510      	push	{r4, lr}
    if (status != 0) {
   14dea:	b949      	cbnz	r1, 14e00 <ble_gattc_disc_all_dscs_rx_complete+0x18>
    if (proc->disc_all_dscs.prev_handle == proc->disc_all_dscs.end_handle) {
   14dec:	89c2      	ldrh	r2, [r0, #14]
   14dee:	8a03      	ldrh	r3, [r0, #16]
   14df0:	429a      	cmp	r2, r3
   14df2:	d00b      	beq.n	14e0c <ble_gattc_disc_all_dscs_rx_complete+0x24>
    rc = ble_gattc_disc_all_dscs_resume(proc);
   14df4:	f7ff ffe5 	bl	14dc2 <ble_gattc_disc_all_dscs_resume>
    if (rc != 0) {
   14df8:	4603      	mov	r3, r0
   14dfa:	b970      	cbnz	r0, 14e1a <ble_gattc_disc_all_dscs_rx_complete+0x32>
}
   14dfc:	4618      	mov	r0, r3
   14dfe:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_dscs_cb(proc, status, 0, NULL);
   14e00:	2300      	movs	r3, #0
   14e02:	461a      	mov	r2, r3
   14e04:	f7ff fc22 	bl	1464c <ble_gattc_disc_all_dscs_cb>
        return BLE_HS_EDONE;
   14e08:	230e      	movs	r3, #14
   14e0a:	e7f7      	b.n	14dfc <ble_gattc_disc_all_dscs_rx_complete+0x14>
        ble_gattc_disc_all_dscs_cb(proc, BLE_HS_EDONE, 0, NULL);
   14e0c:	2300      	movs	r3, #0
   14e0e:	461a      	mov	r2, r3
   14e10:	210e      	movs	r1, #14
   14e12:	f7ff fc1b 	bl	1464c <ble_gattc_disc_all_dscs_cb>
        return BLE_HS_EDONE;
   14e16:	230e      	movs	r3, #14
   14e18:	e7f0      	b.n	14dfc <ble_gattc_disc_all_dscs_rx_complete+0x14>
        return BLE_HS_EDONE;
   14e1a:	230e      	movs	r3, #14
   14e1c:	e7ee      	b.n	14dfc <ble_gattc_disc_all_dscs_rx_complete+0x14>
	...

00014e20 <ble_gattc_disc_chr_uuid_tx>:
{
   14e20:	b500      	push	{lr}
   14e22:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   14e24:	4b07      	ldr	r3, [pc, #28]	; (14e44 <ble_gattc_disc_chr_uuid_tx+0x24>)
   14e26:	681a      	ldr	r2, [r3, #0]
   14e28:	ab02      	add	r3, sp, #8
   14e2a:	f843 2d04 	str.w	r2, [r3, #-4]!
                                  proc->disc_chr_uuid.prev_handle + 1,
   14e2e:	8c01      	ldrh	r1, [r0, #32]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   14e30:	3101      	adds	r1, #1
   14e32:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   14e34:	b289      	uxth	r1, r1
   14e36:	8900      	ldrh	r0, [r0, #8]
   14e38:	f006 fe32 	bl	1baa0 <ble_att_clt_tx_read_type>
}
   14e3c:	b003      	add	sp, #12
   14e3e:	f85d fb04 	ldr.w	pc, [sp], #4
   14e42:	bf00      	nop
   14e44:	0002c268 	.word	0x0002c268

00014e48 <ble_gattc_disc_chr_uuid_resume>:
{
   14e48:	b538      	push	{r3, r4, r5, lr}
   14e4a:	4605      	mov	r5, r0
    status = ble_gattc_disc_chr_uuid_tx(proc);
   14e4c:	f7ff ffe8 	bl	14e20 <ble_gattc_disc_chr_uuid_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   14e50:	4601      	mov	r1, r0
   14e52:	4628      	mov	r0, r5
   14e54:	f7ff fd5c 	bl	14910 <ble_gattc_process_resume_status>
    if (rc != 0) {
   14e58:	4604      	mov	r4, r0
   14e5a:	b908      	cbnz	r0, 14e60 <ble_gattc_disc_chr_uuid_resume+0x18>
}
   14e5c:	4620      	mov	r0, r4
   14e5e:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   14e60:	2300      	movs	r3, #0
   14e62:	461a      	mov	r2, r3
   14e64:	4601      	mov	r1, r0
   14e66:	4628      	mov	r0, r5
   14e68:	f7ff fbc9 	bl	145fe <ble_gattc_disc_chr_uuid_cb>
        return rc;
   14e6c:	e7f6      	b.n	14e5c <ble_gattc_disc_chr_uuid_resume+0x14>

00014e6e <ble_gattc_disc_chr_uuid_rx_complete>:
{
   14e6e:	b510      	push	{r4, lr}
    if (status != 0) {
   14e70:	b949      	cbnz	r1, 14e86 <ble_gattc_disc_chr_uuid_rx_complete+0x18>
    if (proc->disc_chr_uuid.prev_handle == proc->disc_chr_uuid.end_handle) {
   14e72:	8c02      	ldrh	r2, [r0, #32]
   14e74:	8c43      	ldrh	r3, [r0, #34]	; 0x22
   14e76:	429a      	cmp	r2, r3
   14e78:	d00b      	beq.n	14e92 <ble_gattc_disc_chr_uuid_rx_complete+0x24>
    rc = ble_gattc_disc_chr_uuid_resume(proc);
   14e7a:	f7ff ffe5 	bl	14e48 <ble_gattc_disc_chr_uuid_resume>
    if (rc != 0) {
   14e7e:	4603      	mov	r3, r0
   14e80:	b970      	cbnz	r0, 14ea0 <ble_gattc_disc_chr_uuid_rx_complete+0x32>
}
   14e82:	4618      	mov	r0, r3
   14e84:	bd10      	pop	{r4, pc}
        ble_gattc_disc_chr_uuid_cb(proc, status, 0, NULL);
   14e86:	2300      	movs	r3, #0
   14e88:	461a      	mov	r2, r3
   14e8a:	f7ff fbb8 	bl	145fe <ble_gattc_disc_chr_uuid_cb>
        return BLE_HS_EDONE;
   14e8e:	230e      	movs	r3, #14
   14e90:	e7f7      	b.n	14e82 <ble_gattc_disc_chr_uuid_rx_complete+0x14>
        ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   14e92:	2300      	movs	r3, #0
   14e94:	461a      	mov	r2, r3
   14e96:	210e      	movs	r1, #14
   14e98:	f7ff fbb1 	bl	145fe <ble_gattc_disc_chr_uuid_cb>
        return BLE_HS_EDONE;
   14e9c:	230e      	movs	r3, #14
   14e9e:	e7f0      	b.n	14e82 <ble_gattc_disc_chr_uuid_rx_complete+0x14>
        return BLE_HS_EDONE;
   14ea0:	230e      	movs	r3, #14
   14ea2:	e7ee      	b.n	14e82 <ble_gattc_disc_chr_uuid_rx_complete+0x14>

00014ea4 <ble_gattc_disc_all_chrs_tx>:
{
   14ea4:	b500      	push	{lr}
   14ea6:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   14ea8:	4b07      	ldr	r3, [pc, #28]	; (14ec8 <ble_gattc_disc_all_chrs_tx+0x24>)
   14eaa:	681a      	ldr	r2, [r3, #0]
   14eac:	ab02      	add	r3, sp, #8
   14eae:	f843 2d04 	str.w	r2, [r3, #-4]!
                                  proc->disc_all_chrs.prev_handle + 1,
   14eb2:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   14eb4:	3101      	adds	r1, #1
   14eb6:	89c2      	ldrh	r2, [r0, #14]
   14eb8:	b289      	uxth	r1, r1
   14eba:	8900      	ldrh	r0, [r0, #8]
   14ebc:	f006 fdf0 	bl	1baa0 <ble_att_clt_tx_read_type>
}
   14ec0:	b003      	add	sp, #12
   14ec2:	f85d fb04 	ldr.w	pc, [sp], #4
   14ec6:	bf00      	nop
   14ec8:	0002c268 	.word	0x0002c268

00014ecc <ble_gattc_disc_all_chrs_resume>:
{
   14ecc:	b538      	push	{r3, r4, r5, lr}
   14ece:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_chrs_tx(proc);
   14ed0:	f7ff ffe8 	bl	14ea4 <ble_gattc_disc_all_chrs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   14ed4:	4601      	mov	r1, r0
   14ed6:	4628      	mov	r0, r5
   14ed8:	f7ff fd1a 	bl	14910 <ble_gattc_process_resume_status>
    if (rc != 0) {
   14edc:	4604      	mov	r4, r0
   14ede:	b908      	cbnz	r0, 14ee4 <ble_gattc_disc_all_chrs_resume+0x18>
}
   14ee0:	4620      	mov	r0, r4
   14ee2:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_chrs_cb(proc, rc, 0, NULL);
   14ee4:	2300      	movs	r3, #0
   14ee6:	461a      	mov	r2, r3
   14ee8:	4601      	mov	r1, r0
   14eea:	4628      	mov	r0, r5
   14eec:	f7ff fb60 	bl	145b0 <ble_gattc_disc_all_chrs_cb>
        return rc;
   14ef0:	e7f6      	b.n	14ee0 <ble_gattc_disc_all_chrs_resume+0x14>

00014ef2 <ble_gattc_disc_all_chrs_rx_complete>:
{
   14ef2:	b510      	push	{r4, lr}
    if (status != 0) {
   14ef4:	b949      	cbnz	r1, 14f0a <ble_gattc_disc_all_chrs_rx_complete+0x18>
    if (proc->disc_all_chrs.prev_handle == proc->disc_all_chrs.end_handle) {
   14ef6:	8982      	ldrh	r2, [r0, #12]
   14ef8:	89c3      	ldrh	r3, [r0, #14]
   14efa:	429a      	cmp	r2, r3
   14efc:	d00b      	beq.n	14f16 <ble_gattc_disc_all_chrs_rx_complete+0x24>
    rc = ble_gattc_disc_all_chrs_resume(proc);
   14efe:	f7ff ffe5 	bl	14ecc <ble_gattc_disc_all_chrs_resume>
    if (rc != 0) {
   14f02:	4603      	mov	r3, r0
   14f04:	b970      	cbnz	r0, 14f24 <ble_gattc_disc_all_chrs_rx_complete+0x32>
}
   14f06:	4618      	mov	r0, r3
   14f08:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_chrs_cb(proc, status, 0, NULL);
   14f0a:	2300      	movs	r3, #0
   14f0c:	461a      	mov	r2, r3
   14f0e:	f7ff fb4f 	bl	145b0 <ble_gattc_disc_all_chrs_cb>
        return BLE_HS_EDONE;
   14f12:	230e      	movs	r3, #14
   14f14:	e7f7      	b.n	14f06 <ble_gattc_disc_all_chrs_rx_complete+0x14>
        ble_gattc_disc_all_chrs_cb(proc, BLE_HS_EDONE, 0, NULL);
   14f16:	2300      	movs	r3, #0
   14f18:	461a      	mov	r2, r3
   14f1a:	210e      	movs	r1, #14
   14f1c:	f7ff fb48 	bl	145b0 <ble_gattc_disc_all_chrs_cb>
        return BLE_HS_EDONE;
   14f20:	230e      	movs	r3, #14
   14f22:	e7f0      	b.n	14f06 <ble_gattc_disc_all_chrs_rx_complete+0x14>
        return BLE_HS_EDONE;
   14f24:	230e      	movs	r3, #14
   14f26:	e7ee      	b.n	14f06 <ble_gattc_disc_all_chrs_rx_complete+0x14>

00014f28 <ble_gattc_find_inc_svcs_tx>:
{
   14f28:	b500      	push	{lr}
   14f2a:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_INCLUDE);
   14f2c:	4b09      	ldr	r3, [pc, #36]	; (14f54 <ble_gattc_find_inc_svcs_tx+0x2c>)
   14f2e:	685b      	ldr	r3, [r3, #4]
   14f30:	9301      	str	r3, [sp, #4]
    if (proc->find_inc_svcs.cur_start == 0) {
   14f32:	8a01      	ldrh	r1, [r0, #16]
   14f34:	b951      	cbnz	r1, 14f4c <ble_gattc_find_inc_svcs_tx+0x24>
                                      proc->find_inc_svcs.prev_handle + 1,
   14f36:	8981      	ldrh	r1, [r0, #12]
        rc = ble_att_clt_tx_read_type(proc->conn_handle,
   14f38:	3101      	adds	r1, #1
   14f3a:	ab01      	add	r3, sp, #4
   14f3c:	89c2      	ldrh	r2, [r0, #14]
   14f3e:	b289      	uxth	r1, r1
   14f40:	8900      	ldrh	r0, [r0, #8]
   14f42:	f006 fdad 	bl	1baa0 <ble_att_clt_tx_read_type>
}
   14f46:	b003      	add	sp, #12
   14f48:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_att_clt_tx_read(proc->conn_handle,
   14f4c:	8900      	ldrh	r0, [r0, #8]
   14f4e:	f006 fe04 	bl	1bb5a <ble_att_clt_tx_read>
   14f52:	e7f8      	b.n	14f46 <ble_gattc_find_inc_svcs_tx+0x1e>
   14f54:	0002c268 	.word	0x0002c268

00014f58 <ble_gattc_find_inc_svcs_resume>:
{
   14f58:	b538      	push	{r3, r4, r5, lr}
   14f5a:	4605      	mov	r5, r0
    status = ble_gattc_find_inc_svcs_tx(proc);
   14f5c:	f7ff ffe4 	bl	14f28 <ble_gattc_find_inc_svcs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   14f60:	4601      	mov	r1, r0
   14f62:	4628      	mov	r0, r5
   14f64:	f7ff fcd4 	bl	14910 <ble_gattc_process_resume_status>
    if (rc != 0) {
   14f68:	4604      	mov	r4, r0
   14f6a:	b908      	cbnz	r0, 14f70 <ble_gattc_find_inc_svcs_resume+0x18>
}
   14f6c:	4620      	mov	r0, r4
   14f6e:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   14f70:	2300      	movs	r3, #0
   14f72:	461a      	mov	r2, r3
   14f74:	4601      	mov	r1, r0
   14f76:	4628      	mov	r0, r5
   14f78:	f7ff faf1 	bl	1455e <ble_gattc_find_inc_svcs_cb>
        return rc;
   14f7c:	e7f6      	b.n	14f6c <ble_gattc_find_inc_svcs_resume+0x14>

00014f7e <ble_gattc_find_inc_svcs_rx_complete>:
{
   14f7e:	b510      	push	{r4, lr}
    if (status != 0) {
   14f80:	b951      	cbnz	r1, 14f98 <ble_gattc_find_inc_svcs_rx_complete+0x1a>
    if (proc->find_inc_svcs.prev_handle == 0xffff) {
   14f82:	8982      	ldrh	r2, [r0, #12]
   14f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14f88:	429a      	cmp	r2, r3
   14f8a:	d00b      	beq.n	14fa4 <ble_gattc_find_inc_svcs_rx_complete+0x26>
    rc = ble_gattc_find_inc_svcs_resume(proc);
   14f8c:	f7ff ffe4 	bl	14f58 <ble_gattc_find_inc_svcs_resume>
    if (rc != 0) {
   14f90:	4603      	mov	r3, r0
   14f92:	b970      	cbnz	r0, 14fb2 <ble_gattc_find_inc_svcs_rx_complete+0x34>
}
   14f94:	4618      	mov	r0, r3
   14f96:	bd10      	pop	{r4, pc}
        ble_gattc_find_inc_svcs_cb(proc, status, 0, NULL);
   14f98:	2300      	movs	r3, #0
   14f9a:	461a      	mov	r2, r3
   14f9c:	f7ff fadf 	bl	1455e <ble_gattc_find_inc_svcs_cb>
        return BLE_HS_EDONE;
   14fa0:	230e      	movs	r3, #14
   14fa2:	e7f7      	b.n	14f94 <ble_gattc_find_inc_svcs_rx_complete+0x16>
        ble_gattc_find_inc_svcs_cb(proc, BLE_HS_EDONE, 0, NULL);
   14fa4:	2300      	movs	r3, #0
   14fa6:	461a      	mov	r2, r3
   14fa8:	210e      	movs	r1, #14
   14faa:	f7ff fad8 	bl	1455e <ble_gattc_find_inc_svcs_cb>
        return BLE_HS_EDONE;
   14fae:	230e      	movs	r3, #14
   14fb0:	e7f0      	b.n	14f94 <ble_gattc_find_inc_svcs_rx_complete+0x16>
        return BLE_HS_EDONE;
   14fb2:	230e      	movs	r3, #14
   14fb4:	e7ee      	b.n	14f94 <ble_gattc_find_inc_svcs_rx_complete+0x16>

00014fb6 <ble_gattc_disc_svc_uuid_tx>:
{
   14fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fb8:	b087      	sub	sp, #28
   14fba:	4604      	mov	r4, r0
    ble_uuid_flat(&proc->disc_svc_uuid.service_uuid.u, val);
   14fbc:	f100 060c 	add.w	r6, r0, #12
   14fc0:	ad02      	add	r5, sp, #8
   14fc2:	4629      	mov	r1, r5
   14fc4:	4630      	mov	r0, r6
   14fc6:	f006 fb2b 	bl	1b620 <ble_uuid_flat>
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   14fca:	8927      	ldrh	r7, [r4, #8]
                                        proc->disc_svc_uuid.prev_handle + 1,
   14fcc:	8c24      	ldrh	r4, [r4, #32]
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   14fce:	3401      	adds	r4, #1
   14fd0:	b2a4      	uxth	r4, r4
   14fd2:	4630      	mov	r0, r6
   14fd4:	f006 fb50 	bl	1b678 <ble_uuid_length>
   14fd8:	9001      	str	r0, [sp, #4]
   14fda:	9500      	str	r5, [sp, #0]
   14fdc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14fe4:	4621      	mov	r1, r4
   14fe6:	4638      	mov	r0, r7
   14fe8:	f006 fd1c 	bl	1ba24 <ble_att_clt_tx_find_type_value>
}
   14fec:	b007      	add	sp, #28
   14fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014ff0 <ble_gattc_disc_svc_uuid_resume>:
{
   14ff0:	b538      	push	{r3, r4, r5, lr}
   14ff2:	4605      	mov	r5, r0
    status = ble_gattc_disc_svc_uuid_tx(proc);
   14ff4:	f7ff ffdf 	bl	14fb6 <ble_gattc_disc_svc_uuid_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   14ff8:	4601      	mov	r1, r0
   14ffa:	4628      	mov	r0, r5
   14ffc:	f7ff fc88 	bl	14910 <ble_gattc_process_resume_status>
    if (rc != 0) {
   15000:	4604      	mov	r4, r0
   15002:	b908      	cbnz	r0, 15008 <ble_gattc_disc_svc_uuid_resume+0x18>
}
   15004:	4620      	mov	r0, r4
   15006:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_svc_uuid_cb(proc, rc, 0, NULL);
   15008:	2300      	movs	r3, #0
   1500a:	461a      	mov	r2, r3
   1500c:	4601      	mov	r1, r0
   1500e:	4628      	mov	r0, r5
   15010:	f7ff fa58 	bl	144c4 <ble_gattc_disc_svc_uuid_cb>
        return rc;
   15014:	e7f6      	b.n	15004 <ble_gattc_disc_svc_uuid_resume+0x14>

00015016 <ble_gattc_disc_svc_uuid_rx_complete>:
{
   15016:	b510      	push	{r4, lr}
    if (status != 0) {
   15018:	b951      	cbnz	r1, 15030 <ble_gattc_disc_svc_uuid_rx_complete+0x1a>
    if (proc->disc_svc_uuid.prev_handle == 0xffff) {
   1501a:	8c02      	ldrh	r2, [r0, #32]
   1501c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15020:	429a      	cmp	r2, r3
   15022:	d00b      	beq.n	1503c <ble_gattc_disc_svc_uuid_rx_complete+0x26>
    rc = ble_gattc_disc_svc_uuid_resume(proc);
   15024:	f7ff ffe4 	bl	14ff0 <ble_gattc_disc_svc_uuid_resume>
    if (rc != 0) {
   15028:	4603      	mov	r3, r0
   1502a:	b970      	cbnz	r0, 1504a <ble_gattc_disc_svc_uuid_rx_complete+0x34>
}
   1502c:	4618      	mov	r0, r3
   1502e:	bd10      	pop	{r4, pc}
        ble_gattc_disc_svc_uuid_cb(proc, status, 0, NULL);
   15030:	2300      	movs	r3, #0
   15032:	461a      	mov	r2, r3
   15034:	f7ff fa46 	bl	144c4 <ble_gattc_disc_svc_uuid_cb>
        return BLE_HS_EDONE;
   15038:	230e      	movs	r3, #14
   1503a:	e7f7      	b.n	1502c <ble_gattc_disc_svc_uuid_rx_complete+0x16>
        ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   1503c:	2300      	movs	r3, #0
   1503e:	461a      	mov	r2, r3
   15040:	210e      	movs	r1, #14
   15042:	f7ff fa3f 	bl	144c4 <ble_gattc_disc_svc_uuid_cb>
        return BLE_HS_EDONE;
   15046:	230e      	movs	r3, #14
   15048:	e7f0      	b.n	1502c <ble_gattc_disc_svc_uuid_rx_complete+0x16>
        return BLE_HS_EDONE;
   1504a:	230e      	movs	r3, #14
   1504c:	e7ee      	b.n	1502c <ble_gattc_disc_svc_uuid_rx_complete+0x16>
	...

00015050 <ble_gattc_disc_all_svcs_tx>:
{
   15050:	b500      	push	{lr}
   15052:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_PRIMARY_SERVICE);
   15054:	4b07      	ldr	r3, [pc, #28]	; (15074 <ble_gattc_disc_all_svcs_tx+0x24>)
   15056:	689a      	ldr	r2, [r3, #8]
   15058:	ab02      	add	r3, sp, #8
   1505a:	f843 2d04 	str.w	r2, [r3, #-4]!
                                        proc->disc_all_svcs.prev_handle + 1,
   1505e:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_group_type(proc->conn_handle,
   15060:	3101      	adds	r1, #1
   15062:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15066:	b289      	uxth	r1, r1
   15068:	8900      	ldrh	r0, [r0, #8]
   1506a:	f006 fdb9 	bl	1bbe0 <ble_att_clt_tx_read_group_type>
}
   1506e:	b003      	add	sp, #12
   15070:	f85d fb04 	ldr.w	pc, [sp], #4
   15074:	0002c268 	.word	0x0002c268

00015078 <ble_gattc_disc_all_svcs_resume>:
{
   15078:	b538      	push	{r3, r4, r5, lr}
   1507a:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_svcs_tx(proc);
   1507c:	f7ff ffe8 	bl	15050 <ble_gattc_disc_all_svcs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   15080:	4601      	mov	r1, r0
   15082:	4628      	mov	r0, r5
   15084:	f7ff fc44 	bl	14910 <ble_gattc_process_resume_status>
    if (rc != 0) {
   15088:	4604      	mov	r4, r0
   1508a:	b908      	cbnz	r0, 15090 <ble_gattc_disc_all_svcs_resume+0x18>
}
   1508c:	4620      	mov	r0, r4
   1508e:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_svcs_cb(proc, rc, 0, NULL);
   15090:	2300      	movs	r3, #0
   15092:	461a      	mov	r2, r3
   15094:	b281      	uxth	r1, r0
   15096:	4628      	mov	r0, r5
   15098:	f7ff f9ec 	bl	14474 <ble_gattc_disc_all_svcs_cb>
        return rc;
   1509c:	e7f6      	b.n	1508c <ble_gattc_disc_all_svcs_resume+0x14>

0001509e <ble_gattc_disc_all_svcs_rx_complete>:
{
   1509e:	b510      	push	{r4, lr}
    if (status != 0) {
   150a0:	b951      	cbnz	r1, 150b8 <ble_gattc_disc_all_svcs_rx_complete+0x1a>
    if (proc->disc_all_svcs.prev_handle == 0xffff) {
   150a2:	8982      	ldrh	r2, [r0, #12]
   150a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   150a8:	429a      	cmp	r2, r3
   150aa:	d00c      	beq.n	150c6 <ble_gattc_disc_all_svcs_rx_complete+0x28>
    rc = ble_gattc_disc_all_svcs_resume(proc);
   150ac:	f7ff ffe4 	bl	15078 <ble_gattc_disc_all_svcs_resume>
    if (rc != 0) {
   150b0:	4603      	mov	r3, r0
   150b2:	b978      	cbnz	r0, 150d4 <ble_gattc_disc_all_svcs_rx_complete+0x36>
}
   150b4:	4618      	mov	r0, r3
   150b6:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_svcs_cb(proc, status, 0, NULL);
   150b8:	2300      	movs	r3, #0
   150ba:	461a      	mov	r2, r3
   150bc:	b289      	uxth	r1, r1
   150be:	f7ff f9d9 	bl	14474 <ble_gattc_disc_all_svcs_cb>
        return BLE_HS_EDONE;
   150c2:	230e      	movs	r3, #14
   150c4:	e7f6      	b.n	150b4 <ble_gattc_disc_all_svcs_rx_complete+0x16>
        ble_gattc_disc_all_svcs_cb(proc, BLE_HS_EDONE, 0, NULL);
   150c6:	2300      	movs	r3, #0
   150c8:	461a      	mov	r2, r3
   150ca:	210e      	movs	r1, #14
   150cc:	f7ff f9d2 	bl	14474 <ble_gattc_disc_all_svcs_cb>
        return BLE_HS_EDONE;
   150d0:	230e      	movs	r3, #14
   150d2:	e7ef      	b.n	150b4 <ble_gattc_disc_all_svcs_rx_complete+0x16>
        return BLE_HS_EDONE;
   150d4:	230e      	movs	r3, #14
   150d6:	e7ed      	b.n	150b4 <ble_gattc_disc_all_svcs_rx_complete+0x16>

000150d8 <ble_gattc_process_status>:
{
   150d8:	b510      	push	{r4, lr}
   150da:	4604      	mov	r4, r0
    switch (status) {
   150dc:	b961      	cbnz	r1, 150f8 <ble_gattc_process_status+0x20>
        if (!(proc->flags & BLE_GATTC_PROC_F_STALLED)) {
   150de:	7ac3      	ldrb	r3, [r0, #11]
   150e0:	f013 0f01 	tst.w	r3, #1
   150e4:	d005      	beq.n	150f2 <ble_gattc_process_status+0x1a>
        ble_gattc_proc_insert(proc);
   150e6:	4620      	mov	r0, r4
   150e8:	f7ff fcca 	bl	14a80 <ble_gattc_proc_insert>
        ble_hs_timer_resched();
   150ec:	f001 fce4 	bl	16ab8 <ble_hs_timer_resched>
}
   150f0:	bd10      	pop	{r4, pc}
            ble_gattc_proc_set_exp_timer(proc);
   150f2:	f7ff fc17 	bl	14924 <ble_gattc_proc_set_exp_timer>
   150f6:	e7f6      	b.n	150e6 <ble_gattc_process_status+0xe>
        ble_gattc_proc_free(proc);
   150f8:	f7ff fd00 	bl	14afc <ble_gattc_proc_free>
}
   150fc:	e7f8      	b.n	150f0 <ble_gattc_process_status+0x18>
	...

00015100 <ble_gattc_resume_procs>:
{
   15100:	b510      	push	{r4, lr}
   15102:	b082      	sub	sp, #8
    ble_gattc_resume_at = 0;
   15104:	4b0d      	ldr	r3, [pc, #52]	; (1513c <ble_gattc_resume_procs+0x3c>)
   15106:	2200      	movs	r2, #0
   15108:	601a      	str	r2, [r3, #0]
    ble_gattc_extract_stalled(&stall_list);
   1510a:	4668      	mov	r0, sp
   1510c:	f7ff fc76 	bl	149fc <ble_gattc_extract_stalled>
    STAILQ_FOREACH(proc, &stall_list, next) {
   15110:	9c00      	ldr	r4, [sp, #0]
   15112:	e00e      	b.n	15132 <ble_gattc_resume_procs+0x32>
        resume_cb = ble_gattc_resume_dispatch_get(proc->op);
   15114:	7aa0      	ldrb	r0, [r4, #10]
   15116:	f7ff f92d 	bl	14374 <ble_gattc_resume_dispatch_get>
   1511a:	4602      	mov	r2, r0
        proc->flags &= ~BLE_GATTC_PROC_F_STALLED;
   1511c:	7ae3      	ldrb	r3, [r4, #11]
   1511e:	f023 0301 	bic.w	r3, r3, #1
   15122:	72e3      	strb	r3, [r4, #11]
        rc = resume_cb(proc);
   15124:	4620      	mov	r0, r4
   15126:	4790      	blx	r2
        ble_gattc_process_status(proc, rc);
   15128:	4601      	mov	r1, r0
   1512a:	4620      	mov	r0, r4
   1512c:	f7ff ffd4 	bl	150d8 <ble_gattc_process_status>
    STAILQ_FOREACH(proc, &stall_list, next) {
   15130:	6824      	ldr	r4, [r4, #0]
   15132:	2c00      	cmp	r4, #0
   15134:	d1ee      	bne.n	15114 <ble_gattc_resume_procs+0x14>
}
   15136:	b002      	add	sp, #8
   15138:	bd10      	pop	{r4, pc}
   1513a:	bf00      	nop
   1513c:	200026a4 	.word	0x200026a4

00015140 <ble_gattc_proc_alloc>:
{
   15140:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_gattc_proc_pool);
   15142:	4805      	ldr	r0, [pc, #20]	; (15158 <ble_gattc_proc_alloc+0x18>)
   15144:	f7fc fb1f 	bl	11786 <os_memblock_get>
    if (proc != NULL) {
   15148:	4604      	mov	r4, r0
   1514a:	b118      	cbz	r0, 15154 <ble_gattc_proc_alloc+0x14>
        memset(proc, 0, sizeof *proc);
   1514c:	2238      	movs	r2, #56	; 0x38
   1514e:	2100      	movs	r1, #0
   15150:	f7fd f9e1 	bl	12516 <memset>
}
   15154:	4620      	mov	r0, r4
   15156:	bd10      	pop	{r4, pc}
   15158:	20002680 	.word	0x20002680

0001515c <ble_gattc_read_uuid_rx_adata>:
{
   1515c:	b510      	push	{r4, lr}
   1515e:	b082      	sub	sp, #8
   15160:	4604      	mov	r4, r0
   15162:	460b      	mov	r3, r1
    attr.handle = adata->att_handle;
   15164:	880a      	ldrh	r2, [r1, #0]
   15166:	f8ad 2000 	strh.w	r2, [sp]
    attr.offset = 0;
   1516a:	2200      	movs	r2, #0
   1516c:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = ble_hs_mbuf_from_flat(adata->value, adata->value_len);
   15170:	8889      	ldrh	r1, [r1, #4]
   15172:	6898      	ldr	r0, [r3, #8]
   15174:	f003 fb4e 	bl	18814 <ble_hs_mbuf_from_flat>
   15178:	9001      	str	r0, [sp, #4]
    if (attr.om == NULL) {
   1517a:	b168      	cbz	r0, 15198 <ble_gattc_read_uuid_rx_adata+0x3c>
        rc = 0;
   1517c:	2100      	movs	r1, #0
    rc = ble_gattc_read_uuid_cb(proc, rc, 0, &attr);
   1517e:	466b      	mov	r3, sp
   15180:	2200      	movs	r2, #0
   15182:	4620      	mov	r0, r4
   15184:	f7ff fae5 	bl	14752 <ble_gattc_read_uuid_cb>
   15188:	4604      	mov	r4, r0
    os_mbuf_free_chain(attr.om);
   1518a:	9801      	ldr	r0, [sp, #4]
   1518c:	f7fb fea6 	bl	10edc <os_mbuf_free_chain>
    if (rc != 0) {
   15190:	b924      	cbnz	r4, 1519c <ble_gattc_read_uuid_rx_adata+0x40>
}
   15192:	4620      	mov	r0, r4
   15194:	b002      	add	sp, #8
   15196:	bd10      	pop	{r4, pc}
        rc = BLE_HS_ENOMEM;
   15198:	2106      	movs	r1, #6
   1519a:	e7f0      	b.n	1517e <ble_gattc_read_uuid_rx_adata+0x22>
        return BLE_HS_EDONE;
   1519c:	240e      	movs	r4, #14
   1519e:	e7f8      	b.n	15192 <ble_gattc_read_uuid_rx_adata+0x36>

000151a0 <ble_gattc_indicate_err>:
{
   151a0:	b538      	push	{r3, r4, r5, lr}
   151a2:	4604      	mov	r4, r0
   151a4:	460d      	mov	r5, r1
    if (status != BLE_HS_ENOTCONN) {
   151a6:	2907      	cmp	r1, #7
   151a8:	d004      	beq.n	151b4 <ble_gattc_indicate_err+0x14>
        rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   151aa:	8981      	ldrh	r1, [r0, #12]
   151ac:	8900      	ldrh	r0, [r0, #8]
   151ae:	f001 f9ef 	bl	16590 <ble_gatts_rx_indicate_ack>
        if (rc != 0) {
   151b2:	b940      	cbnz	r0, 151c6 <ble_gattc_indicate_err+0x26>
    ble_gap_notify_tx_event(status, proc->conn_handle,
   151b4:	2301      	movs	r3, #1
   151b6:	89a2      	ldrh	r2, [r4, #12]
   151b8:	8921      	ldrh	r1, [r4, #8]
   151ba:	4628      	mov	r0, r5
   151bc:	f7fe ff7b 	bl	140b6 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   151c0:	8920      	ldrh	r0, [r4, #8]
   151c2:	f001 f9b9 	bl	16538 <ble_gatts_send_next_indicate>
}
   151c6:	bd38      	pop	{r3, r4, r5, pc}

000151c8 <ble_gattc_indicate_rx_rsp>:
 * Handles an incoming handle-value-confirmation for the specified indication
 * proc.
 */
static void
ble_gattc_indicate_rx_rsp(struct ble_gattc_proc *proc)
{
   151c8:	b510      	push	{r4, lr}
   151ca:	4604      	mov	r4, r0
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   151cc:	8981      	ldrh	r1, [r0, #12]
   151ce:	8900      	ldrh	r0, [r0, #8]
   151d0:	f001 f9de 	bl	16590 <ble_gatts_rx_indicate_ack>
                                   proc->indicate.chr_val_handle);
    if (rc != 0) {
   151d4:	b100      	cbz	r0, 151d8 <ble_gattc_indicate_rx_rsp+0x10>
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
                            proc->indicate.chr_val_handle, 1);

    /* Send the next indication if one is pending. */
    ble_gatts_send_next_indicate(proc->conn_handle);
}
   151d6:	bd10      	pop	{r4, pc}
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
   151d8:	2301      	movs	r3, #1
   151da:	89a2      	ldrh	r2, [r4, #12]
   151dc:	8921      	ldrh	r1, [r4, #8]
   151de:	200e      	movs	r0, #14
   151e0:	f7fe ff69 	bl	140b6 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   151e4:	8920      	ldrh	r0, [r4, #8]
   151e6:	f001 f9a7 	bl	16538 <ble_gatts_send_next_indicate>
   151ea:	e7f4      	b.n	151d6 <ble_gattc_indicate_rx_rsp+0xe>

000151ec <ble_gattc_disc_all_svcs_rx_adata>:
{
   151ec:	b570      	push	{r4, r5, r6, lr}
   151ee:	b086      	sub	sp, #24
   151f0:	4606      	mov	r6, r0
   151f2:	460d      	mov	r5, r1
    switch (adata->value_len) {
   151f4:	684a      	ldr	r2, [r1, #4]
   151f6:	2a02      	cmp	r2, #2
   151f8:	d00c      	beq.n	15214 <ble_gattc_disc_all_svcs_rx_adata+0x28>
   151fa:	2a10      	cmp	r2, #16
   151fc:	d00a      	beq.n	15214 <ble_gattc_disc_all_svcs_rx_adata+0x28>
        rc = BLE_HS_EBADDATA;
   151fe:	240a      	movs	r4, #10
    cbrc = ble_gattc_disc_all_svcs_cb(proc, rc, 0, &service);
   15200:	466b      	mov	r3, sp
   15202:	2200      	movs	r2, #0
   15204:	b2a1      	uxth	r1, r4
   15206:	4630      	mov	r0, r6
   15208:	f7ff f934 	bl	14474 <ble_gattc_disc_all_svcs_cb>
    if (rc != 0 || cbrc != 0) {
   1520c:	b9d4      	cbnz	r4, 15244 <ble_gattc_disc_all_svcs_rx_adata+0x58>
   1520e:	b9b8      	cbnz	r0, 15240 <ble_gattc_disc_all_svcs_rx_adata+0x54>
}
   15210:	b006      	add	sp, #24
   15212:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&service.uuid, adata->value,
   15214:	68a9      	ldr	r1, [r5, #8]
   15216:	a801      	add	r0, sp, #4
   15218:	f006 f9cd 	bl	1b5b6 <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   1521c:	4604      	mov	r4, r0
   1521e:	b958      	cbnz	r0, 15238 <ble_gattc_disc_all_svcs_rx_adata+0x4c>
    if (adata->end_group_handle <= proc->disc_all_svcs.prev_handle) {
   15220:	886b      	ldrh	r3, [r5, #2]
   15222:	89b2      	ldrh	r2, [r6, #12]
   15224:	4293      	cmp	r3, r2
   15226:	d909      	bls.n	1523c <ble_gattc_disc_all_svcs_rx_adata+0x50>
    proc->disc_all_svcs.prev_handle = adata->end_group_handle;
   15228:	81b3      	strh	r3, [r6, #12]
    service.start_handle = adata->att_handle;
   1522a:	882b      	ldrh	r3, [r5, #0]
   1522c:	f8ad 3000 	strh.w	r3, [sp]
    service.end_handle = adata->end_group_handle;
   15230:	886b      	ldrh	r3, [r5, #2]
   15232:	f8ad 3002 	strh.w	r3, [sp, #2]
   15236:	e7e3      	b.n	15200 <ble_gattc_disc_all_svcs_rx_adata+0x14>
            rc = BLE_HS_EBADDATA;
   15238:	240a      	movs	r4, #10
   1523a:	e7e1      	b.n	15200 <ble_gattc_disc_all_svcs_rx_adata+0x14>
        rc = BLE_HS_EBADDATA;
   1523c:	240a      	movs	r4, #10
   1523e:	e7df      	b.n	15200 <ble_gattc_disc_all_svcs_rx_adata+0x14>
        return BLE_HS_EDONE;
   15240:	200e      	movs	r0, #14
   15242:	e7e5      	b.n	15210 <ble_gattc_disc_all_svcs_rx_adata+0x24>
   15244:	200e      	movs	r0, #14
   15246:	e7e3      	b.n	15210 <ble_gattc_disc_all_svcs_rx_adata+0x24>

00015248 <ble_gattc_disc_all_chrs_rx_adata>:
{
   15248:	b570      	push	{r4, r5, r6, lr}
   1524a:	b088      	sub	sp, #32
   1524c:	4606      	mov	r6, r0
   1524e:	460c      	mov	r4, r1
    memset(&chr, 0, sizeof chr);
   15250:	2300      	movs	r3, #0
   15252:	9301      	str	r3, [sp, #4]
   15254:	9302      	str	r3, [sp, #8]
   15256:	9303      	str	r3, [sp, #12]
   15258:	9304      	str	r3, [sp, #16]
   1525a:	9305      	str	r3, [sp, #20]
   1525c:	9306      	str	r3, [sp, #24]
   1525e:	9307      	str	r3, [sp, #28]
    chr.def_handle = adata->att_handle;
   15260:	880b      	ldrh	r3, [r1, #0]
   15262:	f8ad 3004 	strh.w	r3, [sp, #4]
    switch (adata->value_len) {
   15266:	684a      	ldr	r2, [r1, #4]
   15268:	2a05      	cmp	r2, #5
   1526a:	d00c      	beq.n	15286 <ble_gattc_disc_all_chrs_rx_adata+0x3e>
   1526c:	2a13      	cmp	r2, #19
   1526e:	d00a      	beq.n	15286 <ble_gattc_disc_all_chrs_rx_adata+0x3e>
        rc = BLE_HS_EBADDATA;
   15270:	250a      	movs	r5, #10
    cbrc = ble_gattc_disc_all_chrs_cb(proc, rc, 0, &chr);
   15272:	ab01      	add	r3, sp, #4
   15274:	2200      	movs	r2, #0
   15276:	4629      	mov	r1, r5
   15278:	4630      	mov	r0, r6
   1527a:	f7ff f999 	bl	145b0 <ble_gattc_disc_all_chrs_cb>
    if (rc != 0 || cbrc != 0) {
   1527e:	b9fd      	cbnz	r5, 152c0 <ble_gattc_disc_all_chrs_rx_adata+0x78>
   15280:	b9e0      	cbnz	r0, 152bc <ble_gattc_disc_all_chrs_rx_adata+0x74>
}
   15282:	b008      	add	sp, #32
   15284:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&chr.uuid, adata->value + 3,
   15286:	68a1      	ldr	r1, [r4, #8]
   15288:	3a03      	subs	r2, #3
   1528a:	3103      	adds	r1, #3
   1528c:	a803      	add	r0, sp, #12
   1528e:	f006 f992 	bl	1b5b6 <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   15292:	4605      	mov	r5, r0
   15294:	b108      	cbz	r0, 1529a <ble_gattc_disc_all_chrs_rx_adata+0x52>
            rc = BLE_HS_EBADDATA;
   15296:	250a      	movs	r5, #10
   15298:	e7eb      	b.n	15272 <ble_gattc_disc_all_chrs_rx_adata+0x2a>
    chr.properties = adata->value[0];
   1529a:	68a0      	ldr	r0, [r4, #8]
   1529c:	f810 3b01 	ldrb.w	r3, [r0], #1
   152a0:	f88d 3008 	strb.w	r3, [sp, #8]
    chr.val_handle = get_le16(adata->value + 1);
   152a4:	f009 fc5e 	bl	1eb64 <get_le16>
   152a8:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (adata->att_handle <= proc->disc_all_chrs.prev_handle) {
   152ac:	8823      	ldrh	r3, [r4, #0]
   152ae:	89b2      	ldrh	r2, [r6, #12]
   152b0:	4293      	cmp	r3, r2
   152b2:	d901      	bls.n	152b8 <ble_gattc_disc_all_chrs_rx_adata+0x70>
    proc->disc_all_chrs.prev_handle = adata->att_handle;
   152b4:	81b3      	strh	r3, [r6, #12]
   152b6:	e7dc      	b.n	15272 <ble_gattc_disc_all_chrs_rx_adata+0x2a>
        rc = BLE_HS_EBADDATA;
   152b8:	250a      	movs	r5, #10
   152ba:	e7da      	b.n	15272 <ble_gattc_disc_all_chrs_rx_adata+0x2a>
        return BLE_HS_EDONE;
   152bc:	200e      	movs	r0, #14
   152be:	e7e0      	b.n	15282 <ble_gattc_disc_all_chrs_rx_adata+0x3a>
   152c0:	200e      	movs	r0, #14
   152c2:	e7de      	b.n	15282 <ble_gattc_disc_all_chrs_rx_adata+0x3a>

000152c4 <ble_gattc_find_inc_svcs_rx_adata>:
    if (proc->find_inc_svcs.cur_start != 0) {
   152c4:	8a03      	ldrh	r3, [r0, #16]
   152c6:	2b00      	cmp	r3, #0
   152c8:	d13f      	bne.n	1534a <ble_gattc_find_inc_svcs_rx_adata+0x86>
{
   152ca:	b530      	push	{r4, r5, lr}
   152cc:	b087      	sub	sp, #28
   152ce:	460c      	mov	r4, r1
   152d0:	4605      	mov	r5, r0
    if (adata->att_handle <= proc->find_inc_svcs.prev_handle) {
   152d2:	880b      	ldrh	r3, [r1, #0]
   152d4:	8982      	ldrh	r2, [r0, #12]
   152d6:	4293      	cmp	r3, r2
   152d8:	d928      	bls.n	1532c <ble_gattc_find_inc_svcs_rx_adata+0x68>
    proc->find_inc_svcs.prev_handle = adata->att_handle;
   152da:	8183      	strh	r3, [r0, #12]
    switch (adata->value_len) {
   152dc:	684b      	ldr	r3, [r1, #4]
   152de:	2b04      	cmp	r3, #4
   152e0:	d003      	beq.n	152ea <ble_gattc_find_inc_svcs_rx_adata+0x26>
   152e2:	2b06      	cmp	r3, #6
   152e4:	d00d      	beq.n	15302 <ble_gattc_find_inc_svcs_rx_adata+0x3e>
        rc = BLE_HS_EBADDATA;
   152e6:	240a      	movs	r4, #10
   152e8:	e021      	b.n	1532e <ble_gattc_find_inc_svcs_rx_adata+0x6a>
        proc->find_inc_svcs.cur_start = get_le16(adata->value + 0);
   152ea:	6888      	ldr	r0, [r1, #8]
   152ec:	f009 fc3a 	bl	1eb64 <get_le16>
   152f0:	8228      	strh	r0, [r5, #16]
        proc->find_inc_svcs.cur_end = get_le16(adata->value + 2);
   152f2:	68a0      	ldr	r0, [r4, #8]
   152f4:	3002      	adds	r0, #2
   152f6:	f009 fc35 	bl	1eb64 <get_le16>
   152fa:	8268      	strh	r0, [r5, #18]
    rc = 0;
   152fc:	2400      	movs	r4, #0
        cbrc = 0;
   152fe:	4620      	mov	r0, r4
   15300:	e01d      	b.n	1533e <ble_gattc_find_inc_svcs_rx_adata+0x7a>
        service.start_handle = get_le16(adata->value + 0);
   15302:	6888      	ldr	r0, [r1, #8]
   15304:	f009 fc2e 	bl	1eb64 <get_le16>
   15308:	f8ad 0000 	strh.w	r0, [sp]
        service.end_handle = get_le16(adata->value + 2);
   1530c:	68a0      	ldr	r0, [r4, #8]
   1530e:	3002      	adds	r0, #2
   15310:	f009 fc28 	bl	1eb64 <get_le16>
   15314:	f8ad 0002 	strh.w	r0, [sp, #2]
        rc = ble_uuid_init_from_att_buf(&service.uuid, adata->value + 4, 2);
   15318:	68a1      	ldr	r1, [r4, #8]
   1531a:	2202      	movs	r2, #2
   1531c:	3104      	adds	r1, #4
   1531e:	a801      	add	r0, sp, #4
   15320:	f006 f949 	bl	1b5b6 <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   15324:	4604      	mov	r4, r0
   15326:	b110      	cbz	r0, 1532e <ble_gattc_find_inc_svcs_rx_adata+0x6a>
            rc = BLE_HS_EBADDATA;
   15328:	240a      	movs	r4, #10
   1532a:	e000      	b.n	1532e <ble_gattc_find_inc_svcs_rx_adata+0x6a>
        rc = BLE_HS_EBADDATA;
   1532c:	240a      	movs	r4, #10
        cbrc = ble_gattc_find_inc_svcs_cb(proc, 0, 0, &service);
   1532e:	466b      	mov	r3, sp
   15330:	2200      	movs	r2, #0
   15332:	4611      	mov	r1, r2
   15334:	4628      	mov	r0, r5
   15336:	f7ff f912 	bl	1455e <ble_gattc_find_inc_svcs_cb>
        if (rc != 0) {
   1533a:	b104      	cbz	r4, 1533e <ble_gattc_find_inc_svcs_rx_adata+0x7a>
            rc = cbrc;
   1533c:	4604      	mov	r4, r0
    if (rc != 0 || cbrc != 0) {
   1533e:	b934      	cbnz	r4, 1534e <ble_gattc_find_inc_svcs_rx_adata+0x8a>
   15340:	b908      	cbnz	r0, 15346 <ble_gattc_find_inc_svcs_rx_adata+0x82>
}
   15342:	b007      	add	sp, #28
   15344:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EDONE;
   15346:	200e      	movs	r0, #14
   15348:	e7fb      	b.n	15342 <ble_gattc_find_inc_svcs_rx_adata+0x7e>
        return 0;
   1534a:	2000      	movs	r0, #0
}
   1534c:	4770      	bx	lr
        return BLE_HS_EDONE;
   1534e:	200e      	movs	r0, #14
   15350:	e7f7      	b.n	15342 <ble_gattc_find_inc_svcs_rx_adata+0x7e>

00015352 <ble_gattc_disc_chr_uuid_rx_adata>:
{
   15352:	b570      	push	{r4, r5, r6, lr}
   15354:	b088      	sub	sp, #32
   15356:	4606      	mov	r6, r0
   15358:	460c      	mov	r4, r1
    memset(&chr, 0, sizeof chr);
   1535a:	2300      	movs	r3, #0
   1535c:	9301      	str	r3, [sp, #4]
   1535e:	9302      	str	r3, [sp, #8]
   15360:	9303      	str	r3, [sp, #12]
   15362:	9304      	str	r3, [sp, #16]
   15364:	9305      	str	r3, [sp, #20]
   15366:	9306      	str	r3, [sp, #24]
   15368:	9307      	str	r3, [sp, #28]
    chr.def_handle = adata->att_handle;
   1536a:	880b      	ldrh	r3, [r1, #0]
   1536c:	f8ad 3004 	strh.w	r3, [sp, #4]
    switch (adata->value_len) {
   15370:	684a      	ldr	r2, [r1, #4]
   15372:	2a05      	cmp	r2, #5
   15374:	d00e      	beq.n	15394 <ble_gattc_disc_chr_uuid_rx_adata+0x42>
   15376:	2a13      	cmp	r2, #19
   15378:	d00c      	beq.n	15394 <ble_gattc_disc_chr_uuid_rx_adata+0x42>
        cbrc = ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   1537a:	2300      	movs	r3, #0
   1537c:	461a      	mov	r2, r3
   1537e:	210a      	movs	r1, #10
   15380:	4630      	mov	r0, r6
   15382:	f7ff f93c 	bl	145fe <ble_gattc_disc_chr_uuid_cb>
   15386:	4605      	mov	r5, r0
   15388:	240a      	movs	r4, #10
    if (rc != 0 || cbrc != 0) {
   1538a:	bb6c      	cbnz	r4, 153e8 <ble_gattc_disc_chr_uuid_rx_adata+0x96>
   1538c:	bb55      	cbnz	r5, 153e4 <ble_gattc_disc_chr_uuid_rx_adata+0x92>
}
   1538e:	4628      	mov	r0, r5
   15390:	b008      	add	sp, #32
   15392:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&chr.uuid, adata->value + 3,
   15394:	68a1      	ldr	r1, [r4, #8]
   15396:	3a03      	subs	r2, #3
   15398:	3103      	adds	r1, #3
   1539a:	a803      	add	r0, sp, #12
   1539c:	f006 f90b 	bl	1b5b6 <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   153a0:	4605      	mov	r5, r0
   153a2:	2800      	cmp	r0, #0
   153a4:	d1e9      	bne.n	1537a <ble_gattc_disc_chr_uuid_rx_adata+0x28>
    chr.properties = adata->value[0];
   153a6:	68a0      	ldr	r0, [r4, #8]
   153a8:	f810 3b01 	ldrb.w	r3, [r0], #1
   153ac:	f88d 3008 	strb.w	r3, [sp, #8]
    chr.val_handle = get_le16(adata->value + 1);
   153b0:	f009 fbd8 	bl	1eb64 <get_le16>
   153b4:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (adata->att_handle <= proc->disc_chr_uuid.prev_handle) {
   153b8:	8823      	ldrh	r3, [r4, #0]
   153ba:	8c32      	ldrh	r2, [r6, #32]
   153bc:	4293      	cmp	r3, r2
   153be:	d9dc      	bls.n	1537a <ble_gattc_disc_chr_uuid_rx_adata+0x28>
    proc->disc_chr_uuid.prev_handle = adata->att_handle;
   153c0:	8433      	strh	r3, [r6, #32]
    } else if (ble_uuid_cmp(&chr.uuid.u, &proc->disc_chr_uuid.chr_uuid.u) == 0) {
   153c2:	f106 010c 	add.w	r1, r6, #12
   153c6:	a803      	add	r0, sp, #12
   153c8:	f006 f8d0 	bl	1b56c <ble_uuid_cmp>
   153cc:	4604      	mov	r4, r0
   153ce:	b108      	cbz	r0, 153d4 <ble_gattc_disc_chr_uuid_rx_adata+0x82>
    rc = 0;
   153d0:	462c      	mov	r4, r5
   153d2:	e7da      	b.n	1538a <ble_gattc_disc_chr_uuid_rx_adata+0x38>
        cbrc = ble_gattc_disc_chr_uuid_cb(proc, 0, 0, &chr);
   153d4:	ab01      	add	r3, sp, #4
   153d6:	2200      	movs	r2, #0
   153d8:	4611      	mov	r1, r2
   153da:	4630      	mov	r0, r6
   153dc:	f7ff f90f 	bl	145fe <ble_gattc_disc_chr_uuid_cb>
   153e0:	4605      	mov	r5, r0
   153e2:	e7d2      	b.n	1538a <ble_gattc_disc_chr_uuid_rx_adata+0x38>
        return BLE_HS_EDONE;
   153e4:	250e      	movs	r5, #14
   153e6:	e7d2      	b.n	1538e <ble_gattc_disc_chr_uuid_rx_adata+0x3c>
   153e8:	250e      	movs	r5, #14
   153ea:	e7d0      	b.n	1538e <ble_gattc_disc_chr_uuid_rx_adata+0x3c>

000153ec <ble_gattc_find_inc_svcs_rx_read_rsp>:
{
   153ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   153ee:	b087      	sub	sp, #28
   153f0:	4606      	mov	r6, r0
   153f2:	460c      	mov	r4, r1
   153f4:	4615      	mov	r5, r2
    rc = ble_uuid_init_from_att_mbuf(&service.uuid, *om, 0, 16);
   153f6:	2310      	movs	r3, #16
   153f8:	2200      	movs	r2, #0
   153fa:	6829      	ldr	r1, [r5, #0]
   153fc:	a801      	add	r0, sp, #4
   153fe:	f006 f8f9 	bl	1b5f4 <ble_uuid_init_from_att_mbuf>
   15402:	4607      	mov	r7, r0
    os_mbuf_free_chain(*om);
   15404:	6828      	ldr	r0, [r5, #0]
   15406:	f7fb fd69 	bl	10edc <os_mbuf_free_chain>
    *om = NULL;
   1540a:	2300      	movs	r3, #0
   1540c:	602b      	str	r3, [r5, #0]
    if (rc != 0) {
   1540e:	b9bf      	cbnz	r7, 15440 <ble_gattc_find_inc_svcs_rx_read_rsp+0x54>
    if (proc->find_inc_svcs.cur_start == 0) {
   15410:	8a33      	ldrh	r3, [r6, #16]
   15412:	b1bb      	cbz	r3, 15444 <ble_gattc_find_inc_svcs_rx_read_rsp+0x58>
    if (status != 0) {
   15414:	b9bc      	cbnz	r4, 15446 <ble_gattc_find_inc_svcs_rx_read_rsp+0x5a>
    service.start_handle = proc->find_inc_svcs.cur_start;
   15416:	f8ad 3000 	strh.w	r3, [sp]
    service.end_handle = proc->find_inc_svcs.cur_end;
   1541a:	8a73      	ldrh	r3, [r6, #18]
   1541c:	f8ad 3002 	strh.w	r3, [sp, #2]
    rc = ble_gattc_find_inc_svcs_cb(proc, 0, 0, &service);
   15420:	466b      	mov	r3, sp
   15422:	2200      	movs	r2, #0
   15424:	4611      	mov	r1, r2
   15426:	4630      	mov	r0, r6
   15428:	f7ff f899 	bl	1455e <ble_gattc_find_inc_svcs_cb>
    if (rc != 0) {
   1542c:	b9a8      	cbnz	r0, 1545a <ble_gattc_find_inc_svcs_rx_read_rsp+0x6e>
    proc->find_inc_svcs.cur_start = 0;
   1542e:	2300      	movs	r3, #0
   15430:	8233      	strh	r3, [r6, #16]
    proc->find_inc_svcs.cur_end = 0;
   15432:	8273      	strh	r3, [r6, #18]
    rc = ble_gattc_find_inc_svcs_resume(proc);
   15434:	4630      	mov	r0, r6
   15436:	f7ff fd8f 	bl	14f58 <ble_gattc_find_inc_svcs_resume>
    if (rc != 0) {
   1543a:	4604      	mov	r4, r0
   1543c:	b150      	cbz	r0, 15454 <ble_gattc_find_inc_svcs_rx_read_rsp+0x68>
   1543e:	e002      	b.n	15446 <ble_gattc_find_inc_svcs_rx_read_rsp+0x5a>
        rc = BLE_HS_EBADDATA;
   15440:	240a      	movs	r4, #10
   15442:	e000      	b.n	15446 <ble_gattc_find_inc_svcs_rx_read_rsp+0x5a>
        rc = BLE_HS_EBADDATA;
   15444:	240a      	movs	r4, #10
    ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   15446:	2300      	movs	r3, #0
   15448:	461a      	mov	r2, r3
   1544a:	4621      	mov	r1, r4
   1544c:	4630      	mov	r0, r6
   1544e:	f7ff f886 	bl	1455e <ble_gattc_find_inc_svcs_cb>
    return BLE_HS_EDONE;
   15452:	240e      	movs	r4, #14
}
   15454:	4620      	mov	r0, r4
   15456:	b007      	add	sp, #28
   15458:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EDONE;
   1545a:	240e      	movs	r4, #14
   1545c:	e7fa      	b.n	15454 <ble_gattc_find_inc_svcs_rx_read_rsp+0x68>

0001545e <ble_gattc_write_reliable_rx_prep>:
{
   1545e:	b5f0      	push	{r4, r5, r6, r7, lr}
   15460:	b083      	sub	sp, #12
   15462:	4604      	mov	r4, r0
   15464:	461d      	mov	r5, r3
    om = *rxom;
   15466:	9b08      	ldr	r3, [sp, #32]
   15468:	681f      	ldr	r7, [r3, #0]
    if (status != 0) {
   1546a:	460b      	mov	r3, r1
   1546c:	bba1      	cbnz	r1, 154d8 <ble_gattc_write_reliable_rx_prep+0x7a>
    if (proc->write_reliable.cur_attr >= proc->write_reliable.num_attrs) {
   1546e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   15472:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
   15476:	428b      	cmp	r3, r1
   15478:	d22b      	bcs.n	154d2 <ble_gattc_write_reliable_rx_prep+0x74>
    attr = proc->write_reliable.attrs + proc->write_reliable.cur_attr;
   1547a:	f100 010c 	add.w	r1, r0, #12
   1547e:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
    if (handle != attr->handle) {
   15482:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
   15486:	4293      	cmp	r3, r2
   15488:	d125      	bne.n	154d6 <ble_gattc_write_reliable_rx_prep+0x78>
    if (offset != attr->offset) {
   1548a:	8873      	ldrh	r3, [r6, #2]
   1548c:	42ab      	cmp	r3, r5
   1548e:	d001      	beq.n	15494 <ble_gattc_write_reliable_rx_prep+0x36>
        rc = BLE_HS_EBADDATA;
   15490:	230a      	movs	r3, #10
   15492:	e021      	b.n	154d8 <ble_gattc_write_reliable_rx_prep+0x7a>
    if (os_mbuf_cmpm(attr->om, offset, om, 0,
   15494:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   15496:	9300      	str	r3, [sp, #0]
   15498:	2300      	movs	r3, #0
   1549a:	463a      	mov	r2, r7
   1549c:	4629      	mov	r1, r5
   1549e:	6870      	ldr	r0, [r6, #4]
   154a0:	f7fb fee0 	bl	11264 <os_mbuf_cmpm>
   154a4:	bb08      	cbnz	r0, 154ea <ble_gattc_write_reliable_rx_prep+0x8c>
    attr->offset += proc->write_reliable.length;
   154a6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   154a8:	8872      	ldrh	r2, [r6, #2]
   154aa:	4413      	add	r3, r2
   154ac:	b29b      	uxth	r3, r3
   154ae:	8073      	strh	r3, [r6, #2]
    if (attr->offset >= OS_MBUF_PKTLEN(attr->om)) {
   154b0:	6872      	ldr	r2, [r6, #4]
   154b2:	8a12      	ldrh	r2, [r2, #16]
   154b4:	4293      	cmp	r3, r2
   154b6:	d306      	bcc.n	154c6 <ble_gattc_write_reliable_rx_prep+0x68>
        attr->offset = 0;
   154b8:	2300      	movs	r3, #0
   154ba:	8073      	strh	r3, [r6, #2]
        proc->write_reliable.cur_attr++;
   154bc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   154c0:	3301      	adds	r3, #1
   154c2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    rc = ble_gattc_write_reliable_resume(proc);
   154c6:	4620      	mov	r0, r4
   154c8:	f7ff fbc0 	bl	14c4c <ble_gattc_write_reliable_resume>
    if (rc != 0) {
   154cc:	4603      	mov	r3, r0
   154ce:	b148      	cbz	r0, 154e4 <ble_gattc_write_reliable_rx_prep+0x86>
   154d0:	e002      	b.n	154d8 <ble_gattc_write_reliable_rx_prep+0x7a>
        rc = BLE_HS_EBADDATA;
   154d2:	230a      	movs	r3, #10
   154d4:	e000      	b.n	154d8 <ble_gattc_write_reliable_rx_prep+0x7a>
        rc = BLE_HS_EBADDATA;
   154d6:	230a      	movs	r3, #10
    ble_gattc_write_reliable_err(proc, rc, 0);
   154d8:	2200      	movs	r2, #0
   154da:	4619      	mov	r1, r3
   154dc:	4620      	mov	r0, r4
   154de:	f7ff fb4e 	bl	14b7e <ble_gattc_write_reliable_err>
    return BLE_HS_EDONE;
   154e2:	230e      	movs	r3, #14
}
   154e4:	4618      	mov	r0, r3
   154e6:	b003      	add	sp, #12
   154e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   154ea:	230a      	movs	r3, #10
   154ec:	e7f4      	b.n	154d8 <ble_gattc_write_reliable_rx_prep+0x7a>

000154ee <ble_gattc_write_long_rx_prep>:
{
   154ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   154f0:	b083      	sub	sp, #12
   154f2:	4604      	mov	r4, r0
    om = *rxom;
   154f4:	9808      	ldr	r0, [sp, #32]
   154f6:	6806      	ldr	r6, [r0, #0]
    if (status != 0) {
   154f8:	4608      	mov	r0, r1
   154fa:	bb31      	cbnz	r1, 1554a <ble_gattc_write_long_rx_prep+0x5c>
    if (proc->write_long.attr.offset >=
   154fc:	89e1      	ldrh	r1, [r4, #14]
        OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   154fe:	6925      	ldr	r5, [r4, #16]
   15500:	8a28      	ldrh	r0, [r5, #16]
    if (proc->write_long.attr.offset >=
   15502:	4281      	cmp	r1, r0
   15504:	d21e      	bcs.n	15544 <ble_gattc_write_long_rx_prep+0x56>
    if (handle != proc->write_long.attr.handle) {
   15506:	89a7      	ldrh	r7, [r4, #12]
   15508:	4297      	cmp	r7, r2
   1550a:	d11d      	bne.n	15548 <ble_gattc_write_long_rx_prep+0x5a>
    if (offset != proc->write_long.attr.offset) {
   1550c:	4299      	cmp	r1, r3
   1550e:	d125      	bne.n	1555c <ble_gattc_write_long_rx_prep+0x6e>
    if (offset + OS_MBUF_PKTLEN(om) >
   15510:	8a32      	ldrh	r2, [r6, #16]
   15512:	1899      	adds	r1, r3, r2
   15514:	4281      	cmp	r1, r0
   15516:	dc23      	bgt.n	15560 <ble_gattc_write_long_rx_prep+0x72>
    if (OS_MBUF_PKTLEN(om) != proc->write_long.length) {
   15518:	8aa1      	ldrh	r1, [r4, #20]
   1551a:	428a      	cmp	r2, r1
   1551c:	d001      	beq.n	15522 <ble_gattc_write_long_rx_prep+0x34>
        rc = BLE_HS_EBADDATA;
   1551e:	200a      	movs	r0, #10
   15520:	e013      	b.n	1554a <ble_gattc_write_long_rx_prep+0x5c>
    if (os_mbuf_cmpm(om, 0,
   15522:	9100      	str	r1, [sp, #0]
   15524:	462a      	mov	r2, r5
   15526:	2100      	movs	r1, #0
   15528:	4630      	mov	r0, r6
   1552a:	f7fb fe9b 	bl	11264 <os_mbuf_cmpm>
   1552e:	b9c8      	cbnz	r0, 15564 <ble_gattc_write_long_rx_prep+0x76>
    proc->write_long.attr.offset += OS_MBUF_PKTLEN(om);
   15530:	8a33      	ldrh	r3, [r6, #16]
   15532:	89e2      	ldrh	r2, [r4, #14]
   15534:	4413      	add	r3, r2
   15536:	81e3      	strh	r3, [r4, #14]
    rc = ble_gattc_write_long_resume(proc);
   15538:	4620      	mov	r0, r4
   1553a:	f7ff fbd0 	bl	14cde <ble_gattc_write_long_resume>
    if (rc != 0) {
   1553e:	4603      	mov	r3, r0
   15540:	b148      	cbz	r0, 15556 <ble_gattc_write_long_rx_prep+0x68>
   15542:	e002      	b.n	1554a <ble_gattc_write_long_rx_prep+0x5c>
        rc = BLE_HS_EBADDATA;
   15544:	200a      	movs	r0, #10
   15546:	e000      	b.n	1554a <ble_gattc_write_long_rx_prep+0x5c>
        rc = BLE_HS_EBADDATA;
   15548:	200a      	movs	r0, #10
    ble_gattc_write_long_cb(proc, rc, 0);
   1554a:	2200      	movs	r2, #0
   1554c:	4601      	mov	r1, r0
   1554e:	4620      	mov	r0, r4
   15550:	f7ff f97e 	bl	14850 <ble_gattc_write_long_cb>
    return BLE_HS_EDONE;
   15554:	230e      	movs	r3, #14
}
   15556:	4618      	mov	r0, r3
   15558:	b003      	add	sp, #12
   1555a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   1555c:	200a      	movs	r0, #10
   1555e:	e7f4      	b.n	1554a <ble_gattc_write_long_rx_prep+0x5c>
        rc = BLE_HS_EBADDATA;
   15560:	200a      	movs	r0, #10
   15562:	e7f2      	b.n	1554a <ble_gattc_write_long_rx_prep+0x5c>
        rc = BLE_HS_EBADDATA;
   15564:	200a      	movs	r0, #10
   15566:	e7f0      	b.n	1554a <ble_gattc_write_long_rx_prep+0x5c>

00015568 <ble_gattc_timer>:
{
   15568:	b530      	push	{r4, r5, lr}
   1556a:	b083      	sub	sp, #12
    ticks_until_exp = ble_gattc_extract_expired(&exp_list);
   1556c:	4668      	mov	r0, sp
   1556e:	f7ff fa2f 	bl	149d0 <ble_gattc_extract_expired>
   15572:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   15574:	e002      	b.n	1557c <ble_gattc_timer+0x14>
        ble_gattc_proc_free(proc);
   15576:	4620      	mov	r0, r4
   15578:	f7ff fac0 	bl	14afc <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   1557c:	9c00      	ldr	r4, [sp, #0]
   1557e:	b174      	cbz	r4, 1559e <ble_gattc_timer+0x36>
        ble_gattc_proc_timeout(proc);
   15580:	4620      	mov	r0, r4
   15582:	f7fe ff3c 	bl	143fe <ble_gattc_proc_timeout>
        ble_gap_terminate(proc->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   15586:	2113      	movs	r1, #19
   15588:	8920      	ldrh	r0, [r4, #8]
   1558a:	f7fe fae3 	bl	13b54 <ble_gap_terminate>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   1558e:	9b00      	ldr	r3, [sp, #0]
   15590:	681b      	ldr	r3, [r3, #0]
   15592:	9300      	str	r3, [sp, #0]
   15594:	2b00      	cmp	r3, #0
   15596:	d1ee      	bne.n	15576 <ble_gattc_timer+0xe>
   15598:	f8cd d004 	str.w	sp, [sp, #4]
   1559c:	e7eb      	b.n	15576 <ble_gattc_timer+0xe>
    ticks_until_resume = ble_gattc_ticks_until_resume();
   1559e:	f7ff f9c9 	bl	14934 <ble_gattc_ticks_until_resume>
    if (ticks_until_resume == 0) {
   155a2:	4603      	mov	r3, r0
   155a4:	b128      	cbz	r0, 155b2 <ble_gattc_timer+0x4a>
}
   155a6:	42ab      	cmp	r3, r5
   155a8:	bfa8      	it	ge
   155aa:	462b      	movge	r3, r5
   155ac:	4618      	mov	r0, r3
   155ae:	b003      	add	sp, #12
   155b0:	bd30      	pop	{r4, r5, pc}
        ble_gattc_resume_procs();
   155b2:	f7ff fda5 	bl	15100 <ble_gattc_resume_procs>
        ticks_until_resume = ble_gattc_ticks_until_resume();
   155b6:	f7ff f9bd 	bl	14934 <ble_gattc_ticks_until_resume>
   155ba:	4603      	mov	r3, r0
   155bc:	e7f3      	b.n	155a6 <ble_gattc_timer+0x3e>

000155be <ble_gattc_notify_custom>:
{
   155be:	b5f0      	push	{r4, r5, r6, r7, lr}
   155c0:	b083      	sub	sp, #12
   155c2:	4607      	mov	r7, r0
   155c4:	460d      	mov	r5, r1
    if (txom == NULL) {
   155c6:	4614      	mov	r4, r2
   155c8:	b192      	cbz	r2, 155f0 <ble_gattc_notify_custom+0x32>
    rc = ble_att_clt_tx_notify(conn_handle, chr_val_handle, txom);
   155ca:	4622      	mov	r2, r4
   155cc:	4629      	mov	r1, r5
   155ce:	4638      	mov	r0, r7
   155d0:	f006 fbc9 	bl	1bd66 <ble_att_clt_tx_notify>
   155d4:	4606      	mov	r6, r0
    txom = NULL;
   155d6:	2400      	movs	r4, #0
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 0);
   155d8:	2300      	movs	r3, #0
   155da:	462a      	mov	r2, r5
   155dc:	4639      	mov	r1, r7
   155de:	4630      	mov	r0, r6
   155e0:	f7fe fd69 	bl	140b6 <ble_gap_notify_tx_event>
    os_mbuf_free_chain(txom);
   155e4:	4620      	mov	r0, r4
   155e6:	f7fb fc79 	bl	10edc <os_mbuf_free_chain>
}
   155ea:	4630      	mov	r0, r6
   155ec:	b003      	add	sp, #12
   155ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txom = ble_hs_mbuf_att_pkt();
   155f0:	f003 f90b 	bl	1880a <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   155f4:	4604      	mov	r4, r0
   155f6:	b158      	cbz	r0, 15610 <ble_gattc_notify_custom+0x52>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE,
   155f8:	2200      	movs	r2, #0
   155fa:	9200      	str	r2, [sp, #0]
   155fc:	4603      	mov	r3, r0
   155fe:	4629      	mov	r1, r5
   15600:	f64f 70ff 	movw	r0, #65535	; 0xffff
   15604:	f007 fac4 	bl	1cb90 <ble_att_svr_read_handle>
        if (rc != 0) {
   15608:	2800      	cmp	r0, #0
   1560a:	d0de      	beq.n	155ca <ble_gattc_notify_custom+0xc>
            rc = BLE_HS_EAPP;
   1560c:	2609      	movs	r6, #9
   1560e:	e7e3      	b.n	155d8 <ble_gattc_notify_custom+0x1a>
            rc = BLE_HS_ENOMEM;
   15610:	2606      	movs	r6, #6
   15612:	e7e1      	b.n	155d8 <ble_gattc_notify_custom+0x1a>

00015614 <ble_gattc_notify>:
{
   15614:	b508      	push	{r3, lr}
    rc = ble_gattc_notify_custom(conn_handle, chr_val_handle, NULL);
   15616:	2200      	movs	r2, #0
   15618:	f7ff ffd1 	bl	155be <ble_gattc_notify_custom>
}
   1561c:	bd08      	pop	{r3, pc}

0001561e <ble_gatts_indicate_fail_notconn>:
 * Causes the indication in progress for the specified connection (if any) to
 * fail with a status code of BLE_HS_ENOTCONN;
 */
void
ble_gatts_indicate_fail_notconn(uint16_t conn_handle)
{
   1561e:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_INDICATE, BLE_HS_ENOTCONN);
   15620:	2207      	movs	r2, #7
   15622:	210e      	movs	r1, #14
   15624:	f7ff fa8c 	bl	14b40 <ble_gattc_fail_procs>
}
   15628:	bd08      	pop	{r3, pc}

0001562a <ble_gattc_indicate_custom>:

int
ble_gattc_indicate_custom(uint16_t conn_handle, uint16_t chr_val_handle,
                          struct os_mbuf *txom)
{
   1562a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1562e:	b082      	sub	sp, #8
   15630:	4680      	mov	r8, r0
   15632:	460f      	mov	r7, r1
   15634:	4614      	mov	r4, r2
    struct ble_hs_conn *conn;
    int rc;

    STATS_INC(ble_gattc_stats, indicate);

    proc = ble_gattc_proc_alloc();
   15636:	f7ff fd83 	bl	15140 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1563a:	4605      	mov	r5, r0
   1563c:	b3d0      	cbz	r0, 156b4 <ble_gattc_indicate_custom+0x8a>
        rc = BLE_HS_ENOMEM;
        goto done;
    }

    proc->op = BLE_GATT_OP_INDICATE;
   1563e:	230e      	movs	r3, #14
   15640:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   15642:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->indicate.chr_val_handle = chr_val_handle;
   15646:	8187      	strh	r7, [r0, #12]

    ble_gattc_log_indicate(chr_val_handle);

    if (txom == NULL) {
   15648:	b1c4      	cbz	r4, 1567c <ble_gattc_indicate_custom+0x52>
            rc = BLE_HS_EAPP;
            goto done;
        }
    }

    rc = ble_att_clt_tx_indicate(conn_handle, chr_val_handle, txom);
   1564a:	4622      	mov	r2, r4
   1564c:	4639      	mov	r1, r7
   1564e:	4640      	mov	r0, r8
   15650:	f006 fba9 	bl	1bda6 <ble_att_clt_tx_indicate>
    txom = NULL;
    if (rc != 0) {
   15654:	4606      	mov	r6, r0
   15656:	b308      	cbz	r0, 1569c <ble_gattc_indicate_custom+0x72>
    txom = NULL;
   15658:	2400      	movs	r4, #0
    if (rc != 0) {
        STATS_INC(ble_gattc_stats, indicate_fail);
    }

    /* Tell the application that an indication transmission was attempted. */
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 1);
   1565a:	2301      	movs	r3, #1
   1565c:	463a      	mov	r2, r7
   1565e:	4641      	mov	r1, r8
   15660:	4630      	mov	r0, r6
   15662:	f7fe fd28 	bl	140b6 <ble_gap_notify_tx_event>

    ble_gattc_process_status(proc, rc);
   15666:	4631      	mov	r1, r6
   15668:	4628      	mov	r0, r5
   1566a:	f7ff fd35 	bl	150d8 <ble_gattc_process_status>
    os_mbuf_free_chain(txom);
   1566e:	4620      	mov	r0, r4
   15670:	f7fb fc34 	bl	10edc <os_mbuf_free_chain>
    return rc;
}
   15674:	4630      	mov	r0, r6
   15676:	b002      	add	sp, #8
   15678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txom = ble_hs_mbuf_att_pkt();
   1567c:	f003 f8c5 	bl	1880a <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   15680:	4604      	mov	r4, r0
   15682:	b1c8      	cbz	r0, 156b8 <ble_gattc_indicate_custom+0x8e>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, chr_val_handle,
   15684:	2200      	movs	r2, #0
   15686:	9200      	str	r2, [sp, #0]
   15688:	4603      	mov	r3, r0
   1568a:	4639      	mov	r1, r7
   1568c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   15690:	f007 fa7e 	bl	1cb90 <ble_att_svr_read_handle>
        if (rc != 0) {
   15694:	2800      	cmp	r0, #0
   15696:	d0d8      	beq.n	1564a <ble_gattc_indicate_custom+0x20>
            rc = BLE_HS_EAPP;
   15698:	2609      	movs	r6, #9
   1569a:	e7de      	b.n	1565a <ble_gattc_indicate_custom+0x30>
    ble_hs_lock();
   1569c:	f001 f92e 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   156a0:	4640      	mov	r0, r8
   156a2:	f001 ff01 	bl	174a8 <ble_hs_conn_find>
    if (conn != NULL) {
   156a6:	b108      	cbz	r0, 156ac <ble_gattc_indicate_custom+0x82>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
   156a8:	f8a0 7054 	strh.w	r7, [r0, #84]	; 0x54
    ble_hs_unlock();
   156ac:	f001 f92a 	bl	16904 <ble_hs_unlock>
    txom = NULL;
   156b0:	2400      	movs	r4, #0
   156b2:	e7d2      	b.n	1565a <ble_gattc_indicate_custom+0x30>
        rc = BLE_HS_ENOMEM;
   156b4:	2606      	movs	r6, #6
   156b6:	e7d0      	b.n	1565a <ble_gattc_indicate_custom+0x30>
            rc = BLE_HS_ENOMEM;
   156b8:	2606      	movs	r6, #6
   156ba:	e7ce      	b.n	1565a <ble_gattc_indicate_custom+0x30>

000156bc <ble_gattc_indicate>:

int
ble_gattc_indicate(uint16_t conn_handle, uint16_t chr_val_handle)
{
   156bc:	b508      	push	{r3, lr}
    return ble_gattc_indicate_custom(conn_handle, chr_val_handle, NULL);
   156be:	2200      	movs	r2, #0
   156c0:	f7ff ffb3 	bl	1562a <ble_gattc_indicate_custom>
}
   156c4:	bd08      	pop	{r3, pc}

000156c6 <ble_gattc_rx_err>:
 * Dispatches an incoming ATT error-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_err(uint16_t conn_handle, uint16_t handle, uint16_t status)
{
   156c6:	b570      	push	{r4, r5, r6, lr}
   156c8:	460e      	mov	r6, r1
   156ca:	4615      	mov	r5, r2
    struct ble_gattc_proc *proc;
    ble_gattc_err_fn *err_cb;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_NONE);
   156cc:	21ff      	movs	r1, #255	; 0xff
   156ce:	f7ff f9af 	bl	14a30 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   156d2:	b168      	cbz	r0, 156f0 <ble_gattc_rx_err+0x2a>
   156d4:	4604      	mov	r4, r0
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   156d6:	7a80      	ldrb	r0, [r0, #10]
   156d8:	f7fe fe46 	bl	14368 <ble_gattc_err_dispatch_get>
        if (err_cb != NULL) {
   156dc:	4603      	mov	r3, r0
   156de:	b120      	cbz	r0, 156ea <ble_gattc_rx_err+0x24>
            err_cb(proc, BLE_HS_ERR_ATT_BASE + status, handle);
   156e0:	4632      	mov	r2, r6
   156e2:	f505 7180 	add.w	r1, r5, #256	; 0x100
   156e6:	4620      	mov	r0, r4
   156e8:	4798      	blx	r3
        }
        ble_gattc_proc_free(proc);
   156ea:	4620      	mov	r0, r4
   156ec:	f7ff fa06 	bl	14afc <ble_gattc_proc_free>
    }
}
   156f0:	bd70      	pop	{r4, r5, r6, pc}

000156f2 <ble_gattc_rx_mtu>:
 * Dispatches an incoming ATT exchange-mtu-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_mtu(uint16_t conn_handle, int status, uint16_t chan_mtu)
{
   156f2:	b570      	push	{r4, r5, r6, lr}
   156f4:	460d      	mov	r5, r1
   156f6:	4616      	mov	r6, r2
    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_MTU);
   156f8:	2100      	movs	r1, #0
   156fa:	f7ff f999 	bl	14a30 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   156fe:	b148      	cbz	r0, 15714 <ble_gattc_rx_mtu+0x22>
   15700:	4604      	mov	r4, r0
        ble_gattc_mtu_cb(proc, status, 0, chan_mtu);
   15702:	4633      	mov	r3, r6
   15704:	2200      	movs	r2, #0
   15706:	4629      	mov	r1, r5
   15708:	f7fe fe92 	bl	14430 <ble_gattc_mtu_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   1570c:	210e      	movs	r1, #14
   1570e:	4620      	mov	r0, r4
   15710:	f7ff fce2 	bl	150d8 <ble_gattc_process_status>
    }
}
   15714:	bd70      	pop	{r4, r5, r6, pc}

00015716 <ble_gattc_rx_find_info_idata>:
 * find-information-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_info_idata(uint16_t conn_handle,
                             struct ble_att_find_info_idata *idata)
{
   15716:	b538      	push	{r3, r4, r5, lr}
   15718:	460d      	mov	r5, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1571a:	2106      	movs	r1, #6
   1571c:	f7ff f988 	bl	14a30 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_DSCS);
    if (proc != NULL) {
   15720:	b138      	cbz	r0, 15732 <ble_gattc_rx_find_info_idata+0x1c>
   15722:	4604      	mov	r4, r0
        rc = ble_gattc_disc_all_dscs_rx_idata(proc, idata);
   15724:	4629      	mov	r1, r5
   15726:	f7fe ffbc 	bl	146a2 <ble_gattc_disc_all_dscs_rx_idata>
        ble_gattc_process_status(proc, rc);
   1572a:	4601      	mov	r1, r0
   1572c:	4620      	mov	r0, r4
   1572e:	f7ff fcd3 	bl	150d8 <ble_gattc_process_status>
    }
}
   15732:	bd38      	pop	{r3, r4, r5, pc}

00015734 <ble_gattc_rx_find_info_complete>:
 * Dispatches an incoming notification of the end of a
 * find-information-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_info_complete(uint16_t conn_handle, int status)
{
   15734:	b538      	push	{r3, r4, r5, lr}
   15736:	460d      	mov	r5, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   15738:	2106      	movs	r1, #6
   1573a:	f7ff f979 	bl	14a30 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_DSCS);
    if (proc != NULL) {
   1573e:	b138      	cbz	r0, 15750 <ble_gattc_rx_find_info_complete+0x1c>
   15740:	4604      	mov	r4, r0
        rc = ble_gattc_disc_all_dscs_rx_complete(proc, status);
   15742:	4629      	mov	r1, r5
   15744:	f7ff fb50 	bl	14de8 <ble_gattc_disc_all_dscs_rx_complete>
        ble_gattc_process_status(proc, rc);
   15748:	4601      	mov	r1, r0
   1574a:	4620      	mov	r0, r4
   1574c:	f7ff fcc4 	bl	150d8 <ble_gattc_process_status>
    }
}
   15750:	bd38      	pop	{r3, r4, r5, pc}

00015752 <ble_gattc_rx_find_type_value_hinfo>:
 * find-by-type-value-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_type_value_hinfo(uint16_t conn_handle,
                                   struct ble_att_find_type_value_hinfo *hinfo)
{
   15752:	b538      	push	{r3, r4, r5, lr}
   15754:	460d      	mov	r5, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   15756:	2102      	movs	r1, #2
   15758:	f7ff f96a 	bl	14a30 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_SVC_UUID);
    if (proc != NULL) {
   1575c:	b138      	cbz	r0, 1576e <ble_gattc_rx_find_type_value_hinfo+0x1c>
   1575e:	4604      	mov	r4, r0
        rc = ble_gattc_disc_svc_uuid_rx_hinfo(proc, hinfo);
   15760:	4629      	mov	r1, r5
   15762:	f7fe fed6 	bl	14512 <ble_gattc_disc_svc_uuid_rx_hinfo>
        ble_gattc_process_status(proc, rc);
   15766:	4601      	mov	r1, r0
   15768:	4620      	mov	r0, r4
   1576a:	f7ff fcb5 	bl	150d8 <ble_gattc_process_status>
    }
}
   1576e:	bd38      	pop	{r3, r4, r5, pc}

00015770 <ble_gattc_rx_find_type_value_complete>:
 * Dispatches an incoming notification of the end of a
 * find-by-type-value-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_type_value_complete(uint16_t conn_handle, int status)
{
   15770:	b538      	push	{r3, r4, r5, lr}
   15772:	460d      	mov	r5, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   15774:	2102      	movs	r1, #2
   15776:	f7ff f95b 	bl	14a30 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_SVC_UUID);
    if (proc != NULL) {
   1577a:	b138      	cbz	r0, 1578c <ble_gattc_rx_find_type_value_complete+0x1c>
   1577c:	4604      	mov	r4, r0
        rc = ble_gattc_disc_svc_uuid_rx_complete(proc, status);
   1577e:	4629      	mov	r1, r5
   15780:	f7ff fc49 	bl	15016 <ble_gattc_disc_svc_uuid_rx_complete>
        ble_gattc_process_status(proc, rc);
   15784:	4601      	mov	r1, r0
   15786:	4620      	mov	r0, r4
   15788:	f7ff fca6 	bl	150d8 <ble_gattc_process_status>
    }
}
   1578c:	bd38      	pop	{r3, r4, r5, pc}
	...

00015790 <ble_gattc_rx_read_type_adata>:
 * to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_type_adata(uint16_t conn_handle,
                             struct ble_att_read_type_adata *adata)
{
   15790:	b530      	push	{r4, r5, lr}
   15792:	b083      	sub	sp, #12
   15794:	460d      	mov	r5, r1

    const struct ble_gattc_rx_adata_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   15796:	ab01      	add	r3, sp, #4
   15798:	2204      	movs	r2, #4
   1579a:	4907      	ldr	r1, [pc, #28]	; (157b8 <ble_gattc_rx_read_type_adata+0x28>)
   1579c:	f7ff f95c 	bl	14a58 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_read_type_elem_entries,
                                         &rx_entry);
    if (proc != NULL) {
   157a0:	b140      	cbz	r0, 157b4 <ble_gattc_rx_read_type_adata+0x24>
   157a2:	4604      	mov	r4, r0
        rc = rx_entry->cb(proc, adata);
   157a4:	9b01      	ldr	r3, [sp, #4]
   157a6:	685b      	ldr	r3, [r3, #4]
   157a8:	4629      	mov	r1, r5
   157aa:	4798      	blx	r3
        ble_gattc_process_status(proc, rc);
   157ac:	4601      	mov	r1, r0
   157ae:	4620      	mov	r0, r4
   157b0:	f7ff fc92 	bl	150d8 <ble_gattc_process_status>
    }
}
   157b4:	b003      	add	sp, #12
   157b6:	bd30      	pop	{r4, r5, pc}
   157b8:	0002c358 	.word	0x0002c358

000157bc <ble_gattc_rx_read_type_complete>:
 * Dispatches an incoming notification of the end of a read-by-type-response to
 * the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_type_complete(uint16_t conn_handle, int status)
{
   157bc:	b530      	push	{r4, r5, lr}
   157be:	b083      	sub	sp, #12
   157c0:	460d      	mov	r5, r1

    const struct ble_gattc_rx_complete_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(
   157c2:	ab01      	add	r3, sp, #4
   157c4:	2204      	movs	r2, #4
   157c6:	4907      	ldr	r1, [pc, #28]	; (157e4 <ble_gattc_rx_read_type_complete+0x28>)
   157c8:	f7ff f946 	bl	14a58 <ble_gattc_extract_with_rx_entry>
        conn_handle, ble_gattc_rx_read_type_complete_entries,
        &rx_entry);
    if (proc != NULL) {
   157cc:	b140      	cbz	r0, 157e0 <ble_gattc_rx_read_type_complete+0x24>
   157ce:	4604      	mov	r4, r0
        rc = rx_entry->cb(proc, status);
   157d0:	9b01      	ldr	r3, [sp, #4]
   157d2:	685b      	ldr	r3, [r3, #4]
   157d4:	4629      	mov	r1, r5
   157d6:	4798      	blx	r3
        ble_gattc_process_status(proc, rc);
   157d8:	4601      	mov	r1, r0
   157da:	4620      	mov	r0, r4
   157dc:	f7ff fc7c 	bl	150d8 <ble_gattc_process_status>
    }
}
   157e0:	b003      	add	sp, #12
   157e2:	bd30      	pop	{r4, r5, pc}
   157e4:	0002c338 	.word	0x0002c338

000157e8 <ble_gattc_rx_read_group_type_adata>:
 * read-by-group-type-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_group_type_adata(uint16_t conn_handle,
                                   struct ble_att_read_group_type_adata *adata)
{
   157e8:	b538      	push	{r3, r4, r5, lr}
   157ea:	460d      	mov	r5, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   157ec:	2101      	movs	r1, #1
   157ee:	f7ff f91f 	bl	14a30 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_SVCS);
    if (proc != NULL) {
   157f2:	b138      	cbz	r0, 15804 <ble_gattc_rx_read_group_type_adata+0x1c>
   157f4:	4604      	mov	r4, r0
        rc = ble_gattc_disc_all_svcs_rx_adata(proc, adata);
   157f6:	4629      	mov	r1, r5
   157f8:	f7ff fcf8 	bl	151ec <ble_gattc_disc_all_svcs_rx_adata>
        ble_gattc_process_status(proc, rc);
   157fc:	4601      	mov	r1, r0
   157fe:	4620      	mov	r0, r4
   15800:	f7ff fc6a 	bl	150d8 <ble_gattc_process_status>
    }
}
   15804:	bd38      	pop	{r3, r4, r5, pc}

00015806 <ble_gattc_rx_read_group_type_complete>:
 * Dispatches an incoming notification of the end of a
 * read-by-group-type-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_group_type_complete(uint16_t conn_handle, int status)
{
   15806:	b538      	push	{r3, r4, r5, lr}
   15808:	460d      	mov	r5, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1580a:	2101      	movs	r1, #1
   1580c:	f7ff f910 	bl	14a30 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_SVCS);
    if (proc != NULL) {
   15810:	b138      	cbz	r0, 15822 <ble_gattc_rx_read_group_type_complete+0x1c>
   15812:	4604      	mov	r4, r0
        rc = ble_gattc_disc_all_svcs_rx_complete(proc, status);
   15814:	4629      	mov	r1, r5
   15816:	f7ff fc42 	bl	1509e <ble_gattc_disc_all_svcs_rx_complete>
        ble_gattc_process_status(proc, rc);
   1581a:	4601      	mov	r1, r0
   1581c:	4620      	mov	r0, r4
   1581e:	f7ff fc5b 	bl	150d8 <ble_gattc_process_status>
    }
}
   15822:	bd38      	pop	{r3, r4, r5, pc}

00015824 <ble_gattc_rx_read_rsp>:
 * Dispatches an incoming ATT read-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_read_rsp(uint16_t conn_handle, int status, struct os_mbuf **om)
{
   15824:	b570      	push	{r4, r5, r6, lr}
   15826:	b082      	sub	sp, #8
   15828:	460d      	mov	r5, r1
   1582a:	4616      	mov	r6, r2

    const struct ble_gattc_rx_attr_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   1582c:	ab01      	add	r3, sp, #4
   1582e:	2203      	movs	r2, #3
   15830:	4907      	ldr	r1, [pc, #28]	; (15850 <ble_gattc_rx_read_rsp+0x2c>)
   15832:	f7ff f911 	bl	14a58 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_read_rsp_entries,
                                         &rx_entry);
    if (proc != NULL) {
   15836:	b148      	cbz	r0, 1584c <ble_gattc_rx_read_rsp+0x28>
   15838:	4604      	mov	r4, r0
        rc = rx_entry->cb(proc, status, om);
   1583a:	9b01      	ldr	r3, [sp, #4]
   1583c:	685b      	ldr	r3, [r3, #4]
   1583e:	4632      	mov	r2, r6
   15840:	4629      	mov	r1, r5
   15842:	4798      	blx	r3
        ble_gattc_process_status(proc, rc);
   15844:	4601      	mov	r1, r0
   15846:	4620      	mov	r0, r4
   15848:	f7ff fc46 	bl	150d8 <ble_gattc_process_status>
    }
}
   1584c:	b002      	add	sp, #8
   1584e:	bd70      	pop	{r4, r5, r6, pc}
   15850:	0002c320 	.word	0x0002c320

00015854 <ble_gattc_rx_read_blob_rsp>:
 * procedure.
 */
void
ble_gattc_rx_read_blob_rsp(uint16_t conn_handle, int status,
                           struct os_mbuf **om)
{
   15854:	b570      	push	{r4, r5, r6, lr}
   15856:	460d      	mov	r5, r1
   15858:	4616      	mov	r6, r2
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1585a:	2109      	movs	r1, #9
   1585c:	f7ff f8e8 	bl	14a30 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_READ_LONG);
    if (proc != NULL) {
   15860:	b140      	cbz	r0, 15874 <ble_gattc_rx_read_blob_rsp+0x20>
   15862:	4604      	mov	r4, r0
        rc = ble_gattc_read_long_rx_read_rsp(proc, status, om);
   15864:	4632      	mov	r2, r6
   15866:	4629      	mov	r1, r5
   15868:	f7ff fa6b 	bl	14d42 <ble_gattc_read_long_rx_read_rsp>
        ble_gattc_process_status(proc, rc);
   1586c:	4601      	mov	r1, r0
   1586e:	4620      	mov	r0, r4
   15870:	f7ff fc32 	bl	150d8 <ble_gattc_process_status>
    }
}
   15874:	bd70      	pop	{r4, r5, r6, pc}

00015876 <ble_gattc_rx_read_mult_rsp>:
 * GATT procedure.
 */
void
ble_gattc_rx_read_mult_rsp(uint16_t conn_handle, int status,
                           struct os_mbuf **om)
{
   15876:	b570      	push	{r4, r5, r6, lr}
   15878:	460d      	mov	r5, r1
   1587a:	4616      	mov	r6, r2
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1587c:	210a      	movs	r1, #10
   1587e:	f7ff f8d7 	bl	14a30 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_READ_MULT);
    if (proc != NULL) {
   15882:	b148      	cbz	r0, 15898 <ble_gattc_rx_read_mult_rsp+0x22>
   15884:	4604      	mov	r4, r0
        ble_gattc_read_mult_cb(proc, status, 0, om);
   15886:	4633      	mov	r3, r6
   15888:	2200      	movs	r2, #0
   1588a:	4629      	mov	r1, r5
   1588c:	f7fe ffb3 	bl	147f6 <ble_gattc_read_mult_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   15890:	210e      	movs	r1, #14
   15892:	4620      	mov	r0, r4
   15894:	f7ff fc20 	bl	150d8 <ble_gattc_process_status>
    }
}
   15898:	bd70      	pop	{r4, r5, r6, pc}

0001589a <ble_gattc_rx_write_rsp>:
 * Dispatches an incoming ATT write-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_write_rsp(uint16_t conn_handle)
{
   1589a:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1589c:	210b      	movs	r1, #11
   1589e:	f7ff f8c7 	bl	14a30 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_WRITE);
    if (proc != NULL) {
   158a2:	b140      	cbz	r0, 158b6 <ble_gattc_rx_write_rsp+0x1c>
   158a4:	4604      	mov	r4, r0
        ble_gattc_write_cb(proc, 0, 0);
   158a6:	2200      	movs	r2, #0
   158a8:	4611      	mov	r1, r2
   158aa:	f7ff f901 	bl	14ab0 <ble_gattc_write_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   158ae:	210e      	movs	r1, #14
   158b0:	4620      	mov	r0, r4
   158b2:	f7ff fc11 	bl	150d8 <ble_gattc_process_status>
    }
}
   158b6:	bd10      	pop	{r4, pc}

000158b8 <ble_gattc_rx_prep_write_rsp>:
 */
void
ble_gattc_rx_prep_write_rsp(uint16_t conn_handle, int status,
                            uint16_t handle, uint16_t offset,
                            struct os_mbuf **om)
{
   158b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158bc:	b084      	sub	sp, #16
   158be:	4688      	mov	r8, r1
   158c0:	4616      	mov	r6, r2
   158c2:	461f      	mov	r7, r3

    const struct ble_gattc_rx_prep_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   158c4:	ab03      	add	r3, sp, #12
   158c6:	2202      	movs	r2, #2
   158c8:	4909      	ldr	r1, [pc, #36]	; (158f0 <ble_gattc_rx_prep_write_rsp+0x38>)
   158ca:	f7ff f8c5 	bl	14a58 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_prep_entries,
                                         &rx_entry);
    if (proc != NULL) {
   158ce:	b160      	cbz	r0, 158ea <ble_gattc_rx_prep_write_rsp+0x32>
   158d0:	4604      	mov	r4, r0
        rc = rx_entry->cb(proc, status, handle, offset, om);
   158d2:	9b03      	ldr	r3, [sp, #12]
   158d4:	685d      	ldr	r5, [r3, #4]
   158d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   158d8:	9300      	str	r3, [sp, #0]
   158da:	463b      	mov	r3, r7
   158dc:	4632      	mov	r2, r6
   158de:	4641      	mov	r1, r8
   158e0:	47a8      	blx	r5
        ble_gattc_process_status(proc, rc);
   158e2:	4601      	mov	r1, r0
   158e4:	4620      	mov	r0, r4
   158e6:	f7ff fbf7 	bl	150d8 <ble_gattc_process_status>
    }
}
   158ea:	b004      	add	sp, #16
   158ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   158f0:	0002c310 	.word	0x0002c310

000158f4 <ble_gattc_rx_exec_write_rsp>:
 * Dispatches an incoming ATT execute-write-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_exec_write_rsp(uint16_t conn_handle, int status)
{
   158f4:	b530      	push	{r4, r5, lr}
   158f6:	b083      	sub	sp, #12
   158f8:	460d      	mov	r5, r1

    const struct ble_gattc_rx_exec_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   158fa:	ab01      	add	r3, sp, #4
   158fc:	2202      	movs	r2, #2
   158fe:	4907      	ldr	r1, [pc, #28]	; (1591c <ble_gattc_rx_exec_write_rsp+0x28>)
   15900:	f7ff f8aa 	bl	14a58 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_exec_entries, &rx_entry);
    if (proc != NULL) {
   15904:	b140      	cbz	r0, 15918 <ble_gattc_rx_exec_write_rsp+0x24>
   15906:	4604      	mov	r4, r0
        rc = rx_entry->cb(proc, status);
   15908:	9b01      	ldr	r3, [sp, #4]
   1590a:	685b      	ldr	r3, [r3, #4]
   1590c:	4629      	mov	r1, r5
   1590e:	4798      	blx	r3
        ble_gattc_process_status(proc, rc);
   15910:	4601      	mov	r1, r0
   15912:	4620      	mov	r0, r4
   15914:	f7ff fbe0 	bl	150d8 <ble_gattc_process_status>
    }
}
   15918:	b003      	add	sp, #12
   1591a:	bd30      	pop	{r4, r5, pc}
   1591c:	0002c300 	.word	0x0002c300

00015920 <ble_gattc_rx_indicate_rsp>:
 * Dispatches an incoming ATT handle-value-confirmation to the appropriate
 * active GATT procedure.
 */
void
ble_gattc_rx_indicate_rsp(uint16_t conn_handle)
{
   15920:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   15922:	210e      	movs	r1, #14
   15924:	f7ff f884 	bl	14a30 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_INDICATE);
    if (proc != NULL) {
   15928:	b130      	cbz	r0, 15938 <ble_gattc_rx_indicate_rsp+0x18>
   1592a:	4604      	mov	r4, r0
        ble_gattc_indicate_rx_rsp(proc);
   1592c:	f7ff fc4c 	bl	151c8 <ble_gattc_indicate_rx_rsp>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   15930:	210e      	movs	r1, #14
   15932:	4620      	mov	r0, r4
   15934:	f7ff fbd0 	bl	150d8 <ble_gattc_process_status>
    }
}
   15938:	bd10      	pop	{r4, pc}

0001593a <ble_gattc_connection_broken>:
 * @param conn_handle           The handle of the connection that was
 *                                  terminated.
 */
void
ble_gattc_connection_broken(uint16_t conn_handle)
{
   1593a:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_NONE, BLE_HS_ENOTCONN);
   1593c:	2207      	movs	r2, #7
   1593e:	21ff      	movs	r1, #255	; 0xff
   15940:	f7ff f8fe 	bl	14b40 <ble_gattc_fail_procs>
}
   15944:	bd08      	pop	{r3, pc}
	...

00015948 <ble_gattc_init>:
    return !STAILQ_EMPTY(&ble_gattc_procs);
}

int
ble_gattc_init(void)
{
   15948:	b500      	push	{lr}
   1594a:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_gattc_procs);
   1594c:	4b07      	ldr	r3, [pc, #28]	; (1596c <ble_gattc_init+0x24>)
   1594e:	2200      	movs	r2, #0
   15950:	601a      	str	r2, [r3, #0]
   15952:	605b      	str	r3, [r3, #4]

    if (MYNEWT_VAL(BLE_GATT_MAX_PROCS) > 0) {
        rc = os_mempool_init(&ble_gattc_proc_pool,
   15954:	4b06      	ldr	r3, [pc, #24]	; (15970 <ble_gattc_init+0x28>)
   15956:	9300      	str	r3, [sp, #0]
   15958:	4b06      	ldr	r3, [pc, #24]	; (15974 <ble_gattc_init+0x2c>)
   1595a:	2238      	movs	r2, #56	; 0x38
   1595c:	2104      	movs	r1, #4
   1595e:	4806      	ldr	r0, [pc, #24]	; (15978 <ble_gattc_init+0x30>)
   15960:	f7fb fecc 	bl	116fc <os_mempool_init>
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   15964:	b003      	add	sp, #12
   15966:	f85d fb04 	ldr.w	pc, [sp], #4
   1596a:	bf00      	nop
   1596c:	2000269c 	.word	0x2000269c
   15970:	0002c2b0 	.word	0x0002c2b0
   15974:	200025a0 	.word	0x200025a0
   15978:	20002680 	.word	0x20002680

0001597c <ble_gatts_chr_clt_cfg_allowed>:
ble_gatts_chr_clt_cfg_allowed(const struct ble_gatt_chr_def *chr)
{
    uint16_t flags;

    flags = 0;
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   1597c:	8a03      	ldrh	r3, [r0, #16]
   1597e:	f013 0f10 	tst.w	r3, #16
   15982:	d106      	bne.n	15992 <ble_gatts_chr_clt_cfg_allowed+0x16>
    flags = 0;
   15984:	2000      	movs	r0, #0
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   15986:	f013 0f20 	tst.w	r3, #32
   1598a:	d001      	beq.n	15990 <ble_gatts_chr_clt_cfg_allowed+0x14>
        flags |= BLE_GATTS_CLT_CFG_F_INDICATE;
   1598c:	f040 0002 	orr.w	r0, r0, #2
    }

    return flags;
}
   15990:	4770      	bx	lr
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
   15992:	2001      	movs	r0, #1
   15994:	e7f7      	b.n	15986 <ble_gatts_chr_clt_cfg_allowed+0xa>

00015996 <ble_gatts_att_flags_from_chr_flags>:
ble_gatts_att_flags_from_chr_flags(ble_gatt_chr_flags chr_flags)
{
    uint8_t att_flags;

    att_flags = 0;
    if (chr_flags & BLE_GATT_CHR_F_READ) {
   15996:	f010 0f02 	tst.w	r0, #2
   1599a:	d125      	bne.n	159e8 <ble_gatts_att_flags_from_chr_flags+0x52>
    att_flags = 0;
   1599c:	2300      	movs	r3, #0
        att_flags |= BLE_ATT_F_READ;
    }
    if (chr_flags & (BLE_GATT_CHR_F_WRITE_NO_RSP | BLE_GATT_CHR_F_WRITE)) {
   1599e:	f010 0f0c 	tst.w	r0, #12
   159a2:	d001      	beq.n	159a8 <ble_gatts_att_flags_from_chr_flags+0x12>
        att_flags |= BLE_ATT_F_WRITE;
   159a4:	f043 0302 	orr.w	r3, r3, #2
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_ENC) {
   159a8:	f410 7f00 	tst.w	r0, #512	; 0x200
   159ac:	d001      	beq.n	159b2 <ble_gatts_att_flags_from_chr_flags+0x1c>
        att_flags |= BLE_ATT_F_READ_ENC;
   159ae:	f043 0304 	orr.w	r3, r3, #4
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHEN) {
   159b2:	f410 6f80 	tst.w	r0, #1024	; 0x400
   159b6:	d001      	beq.n	159bc <ble_gatts_att_flags_from_chr_flags+0x26>
        att_flags |= BLE_ATT_F_READ_AUTHEN;
   159b8:	f043 0308 	orr.w	r3, r3, #8
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHOR) {
   159bc:	f410 6f00 	tst.w	r0, #2048	; 0x800
   159c0:	d001      	beq.n	159c6 <ble_gatts_att_flags_from_chr_flags+0x30>
        att_flags |= BLE_ATT_F_READ_AUTHOR;
   159c2:	f043 0310 	orr.w	r3, r3, #16
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_ENC) {
   159c6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   159ca:	d001      	beq.n	159d0 <ble_gatts_att_flags_from_chr_flags+0x3a>
        att_flags |= BLE_ATT_F_WRITE_ENC;
   159cc:	f043 0320 	orr.w	r3, r3, #32
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHEN) {
   159d0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   159d4:	d001      	beq.n	159da <ble_gatts_att_flags_from_chr_flags+0x44>
        att_flags |= BLE_ATT_F_WRITE_AUTHEN;
   159d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHOR) {
   159da:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   159de:	d001      	beq.n	159e4 <ble_gatts_att_flags_from_chr_flags+0x4e>
        att_flags |= BLE_ATT_F_WRITE_AUTHOR;
   159e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    }

    return att_flags;
}
   159e4:	4618      	mov	r0, r3
   159e6:	4770      	bx	lr
        att_flags |= BLE_ATT_F_READ;
   159e8:	2301      	movs	r3, #1
   159ea:	e7d8      	b.n	1599e <ble_gatts_att_flags_from_chr_flags+0x8>

000159ec <ble_gatts_chr_properties>:
{
    uint8_t properties;

    properties = 0;

    if (chr->flags & BLE_GATT_CHR_F_BROADCAST) {
   159ec:	8a03      	ldrh	r3, [r0, #16]
   159ee:	f013 0f01 	tst.w	r3, #1
   159f2:	d124      	bne.n	15a3e <ble_gatts_chr_properties+0x52>
    properties = 0;
   159f4:	2000      	movs	r0, #0
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
    }
    if (chr->flags & BLE_GATT_CHR_F_READ) {
   159f6:	f013 0f02 	tst.w	r3, #2
   159fa:	d001      	beq.n	15a00 <ble_gatts_chr_properties+0x14>
        properties |= BLE_GATT_CHR_PROP_READ;
   159fc:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE_NO_RSP) {
   15a00:	f013 0f04 	tst.w	r3, #4
   15a04:	d001      	beq.n	15a0a <ble_gatts_chr_properties+0x1e>
        properties |= BLE_GATT_CHR_PROP_WRITE_NO_RSP;
   15a06:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE) {
   15a0a:	f013 0f08 	tst.w	r3, #8
   15a0e:	d001      	beq.n	15a14 <ble_gatts_chr_properties+0x28>
        properties |= BLE_GATT_CHR_PROP_WRITE;
   15a10:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   15a14:	f013 0f10 	tst.w	r3, #16
   15a18:	d001      	beq.n	15a1e <ble_gatts_chr_properties+0x32>
        properties |= BLE_GATT_CHR_PROP_NOTIFY;
   15a1a:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   15a1e:	f013 0f20 	tst.w	r3, #32
   15a22:	d001      	beq.n	15a28 <ble_gatts_chr_properties+0x3c>
        properties |= BLE_GATT_CHR_PROP_INDICATE;
   15a24:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr->flags & BLE_GATT_CHR_F_AUTH_SIGN_WRITE) {
   15a28:	f013 0f40 	tst.w	r3, #64	; 0x40
   15a2c:	d001      	beq.n	15a32 <ble_gatts_chr_properties+0x46>
        properties |= BLE_GATT_CHR_PROP_AUTH_SIGN_WRITE;
   15a2e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr->flags &
   15a32:	f413 7fc0 	tst.w	r3, #384	; 0x180
   15a36:	d001      	beq.n	15a3c <ble_gatts_chr_properties+0x50>
        (BLE_GATT_CHR_F_RELIABLE_WRITE | BLE_GATT_CHR_F_AUX_WRITE)) {

        properties |= BLE_GATT_CHR_PROP_EXTENDED;
   15a38:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return properties;
}
   15a3c:	4770      	bx	lr
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
   15a3e:	2001      	movs	r0, #1
   15a40:	e7d9      	b.n	159f6 <ble_gatts_chr_properties+0xa>

00015a42 <ble_gatts_chr_is_sane>:
}

static int
ble_gatts_chr_is_sane(const struct ble_gatt_chr_def *chr)
{
    if (chr->uuid == NULL) {
   15a42:	6803      	ldr	r3, [r0, #0]
   15a44:	b12b      	cbz	r3, 15a52 <ble_gatts_chr_is_sane+0x10>
        return 0;
    }

    if (chr->access_cb == NULL) {
   15a46:	6843      	ldr	r3, [r0, #4]
   15a48:	b10b      	cbz	r3, 15a4e <ble_gatts_chr_is_sane+0xc>
        return 0;
    }

    /* XXX: Check properties. */

    return 1;
   15a4a:	2001      	movs	r0, #1
}
   15a4c:	4770      	bx	lr
        return 0;
   15a4e:	2000      	movs	r0, #0
   15a50:	4770      	bx	lr
        return 0;
   15a52:	2000      	movs	r0, #0
   15a54:	4770      	bx	lr

00015a56 <ble_gatts_chr_op>:

static uint8_t
ble_gatts_chr_op(uint8_t att_op)
{
    switch (att_op) {
   15a56:	2802      	cmp	r0, #2
   15a58:	d001      	beq.n	15a5e <ble_gatts_chr_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_CHR;
   15a5a:	2000      	movs	r0, #0
   15a5c:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_CHR;
   15a5e:	2001      	movs	r0, #1

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_CHR;
    }
}
   15a60:	4770      	bx	lr
	...

00015a64 <ble_gatts_find_svc_entry_idx>:
static int
ble_gatts_find_svc_entry_idx(const struct ble_gatt_svc_def *svc)
{
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   15a64:	2300      	movs	r3, #0
   15a66:	4a08      	ldr	r2, [pc, #32]	; (15a88 <ble_gatts_find_svc_entry_idx+0x24>)
   15a68:	8812      	ldrh	r2, [r2, #0]
   15a6a:	429a      	cmp	r2, r3
   15a6c:	dd07      	ble.n	15a7e <ble_gatts_find_svc_entry_idx+0x1a>
        if (ble_gatts_svc_entries[i].svc == svc) {
   15a6e:	4a07      	ldr	r2, [pc, #28]	; (15a8c <ble_gatts_find_svc_entry_idx+0x28>)
   15a70:	6812      	ldr	r2, [r2, #0]
   15a72:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   15a76:	4282      	cmp	r2, r0
   15a78:	d003      	beq.n	15a82 <ble_gatts_find_svc_entry_idx+0x1e>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   15a7a:	3301      	adds	r3, #1
   15a7c:	e7f3      	b.n	15a66 <ble_gatts_find_svc_entry_idx+0x2>
            return i;
        }
    }

    return -1;
   15a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   15a82:	4618      	mov	r0, r3
   15a84:	4770      	bx	lr
   15a86:	bf00      	nop
   15a88:	200026d8 	.word	0x200026d8
   15a8c:	200026e0 	.word	0x200026e0

00015a90 <ble_gatts_svc_incs_satisfied>:

static int
ble_gatts_svc_incs_satisfied(const struct ble_gatt_svc_def *svc)
{
   15a90:	b538      	push	{r3, r4, r5, lr}
    int idx;
    int i;

    if (svc->includes == NULL) {
   15a92:	6885      	ldr	r5, [r0, #8]
   15a94:	b195      	cbz	r5, 15abc <ble_gatts_svc_incs_satisfied+0x2c>
        /* No included services. */
        return 1;
    }

    for (i = 0; svc->includes[i] != NULL; i++) {
   15a96:	2400      	movs	r4, #0
   15a98:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   15a9c:	b160      	cbz	r0, 15ab8 <ble_gatts_svc_incs_satisfied+0x28>
        idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   15a9e:	f7ff ffe1 	bl	15a64 <ble_gatts_find_svc_entry_idx>
        if (idx == -1 || ble_gatts_svc_entries[idx].handle == 0) {
   15aa2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15aa6:	d00b      	beq.n	15ac0 <ble_gatts_svc_incs_satisfied+0x30>
   15aa8:	4b07      	ldr	r3, [pc, #28]	; (15ac8 <ble_gatts_svc_incs_satisfied+0x38>)
   15aaa:	681b      	ldr	r3, [r3, #0]
   15aac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   15ab0:	8883      	ldrh	r3, [r0, #4]
   15ab2:	b13b      	cbz	r3, 15ac4 <ble_gatts_svc_incs_satisfied+0x34>
    for (i = 0; svc->includes[i] != NULL; i++) {
   15ab4:	3401      	adds	r4, #1
   15ab6:	e7ef      	b.n	15a98 <ble_gatts_svc_incs_satisfied+0x8>
            return 0;
        }
    }

    return 1;
   15ab8:	2001      	movs	r0, #1
   15aba:	e000      	b.n	15abe <ble_gatts_svc_incs_satisfied+0x2e>
        return 1;
   15abc:	2001      	movs	r0, #1
}
   15abe:	bd38      	pop	{r3, r4, r5, pc}
            return 0;
   15ac0:	2000      	movs	r0, #0
   15ac2:	e7fc      	b.n	15abe <ble_gatts_svc_incs_satisfied+0x2e>
   15ac4:	2000      	movs	r0, #0
   15ac6:	e7fa      	b.n	15abe <ble_gatts_svc_incs_satisfied+0x2e>
   15ac8:	200026e0 	.word	0x200026e0

00015acc <ble_gatts_dsc_op>:
}

static uint8_t
ble_gatts_dsc_op(uint8_t att_op)
{
    switch (att_op) {
   15acc:	2802      	cmp	r0, #2
   15ace:	d001      	beq.n	15ad4 <ble_gatts_dsc_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_DSC;
   15ad0:	2002      	movs	r0, #2
   15ad2:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_DSC;
   15ad4:	2003      	movs	r0, #3

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_DSC;
    }
}
   15ad6:	4770      	bx	lr

00015ad8 <ble_gatts_dsc_is_sane>:
}

static int
ble_gatts_dsc_is_sane(const struct ble_gatt_dsc_def *dsc)
{
    if (dsc->uuid == NULL) {
   15ad8:	6803      	ldr	r3, [r0, #0]
   15ada:	b12b      	cbz	r3, 15ae8 <ble_gatts_dsc_is_sane+0x10>
        return 0;
    }

    if (dsc->access_cb == NULL) {
   15adc:	6883      	ldr	r3, [r0, #8]
   15ade:	b10b      	cbz	r3, 15ae4 <ble_gatts_dsc_is_sane+0xc>
        return 0;
    }

    return 1;
   15ae0:	2001      	movs	r0, #1
}
   15ae2:	4770      	bx	lr
        return 0;
   15ae4:	2000      	movs	r0, #0
   15ae6:	4770      	bx	lr
        return 0;
   15ae8:	2000      	movs	r0, #0
   15aea:	4770      	bx	lr

00015aec <ble_gatts_clt_cfg_find_idx>:
                           uint16_t chr_val_handle)
{
    struct ble_gatts_clt_cfg *cfg;
    int i;

    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   15aec:	2300      	movs	r3, #0
   15aee:	4a07      	ldr	r2, [pc, #28]	; (15b0c <ble_gatts_clt_cfg_find_idx+0x20>)
   15af0:	6812      	ldr	r2, [r2, #0]
   15af2:	429a      	cmp	r2, r3
   15af4:	dd05      	ble.n	15b02 <ble_gatts_clt_cfg_find_idx+0x16>
        cfg = cfgs + i;
        if (cfg->chr_val_handle == chr_val_handle) {
   15af6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
   15afa:	428a      	cmp	r2, r1
   15afc:	d003      	beq.n	15b06 <ble_gatts_clt_cfg_find_idx+0x1a>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   15afe:	3301      	adds	r3, #1
   15b00:	e7f5      	b.n	15aee <ble_gatts_clt_cfg_find_idx+0x2>
            return i;
        }
    }

    return -1;
   15b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   15b06:	4618      	mov	r0, r3
   15b08:	4770      	bx	lr
   15b0a:	bf00      	nop
   15b0c:	200026d0 	.word	0x200026d0

00015b10 <ble_gatts_clt_cfg_find>:

static struct ble_gatts_clt_cfg *
ble_gatts_clt_cfg_find(struct ble_gatts_clt_cfg *cfgs,
                       uint16_t chr_val_handle)
{
   15b10:	b510      	push	{r4, lr}
   15b12:	4604      	mov	r4, r0
    int idx;

    idx = ble_gatts_clt_cfg_find_idx(cfgs, chr_val_handle);
   15b14:	f7ff ffea 	bl	15aec <ble_gatts_clt_cfg_find_idx>
    if (idx == -1) {
   15b18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15b1c:	d002      	beq.n	15b24 <ble_gatts_clt_cfg_find+0x14>
        return NULL;
    } else {
        return cfgs + idx;
   15b1e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    }
}
   15b22:	bd10      	pop	{r4, pc}
        return NULL;
   15b24:	2000      	movs	r0, #0
   15b26:	e7fc      	b.n	15b22 <ble_gatts_clt_cfg_find+0x12>

00015b28 <ble_gatts_svc_type_to_uuid>:
}

static int
ble_gatts_svc_type_to_uuid(uint8_t svc_type, const ble_uuid_t **uuid)
{
    switch (svc_type) {
   15b28:	2801      	cmp	r0, #1
   15b2a:	d003      	beq.n	15b34 <ble_gatts_svc_type_to_uuid+0xc>
   15b2c:	2802      	cmp	r0, #2
   15b2e:	d005      	beq.n	15b3c <ble_gatts_svc_type_to_uuid+0x14>
    case BLE_GATT_SVC_TYPE_SECONDARY:
        *uuid = uuid_sec;
        return 0;

    default:
        return BLE_HS_EINVAL;
   15b30:	2003      	movs	r0, #3
    }
}
   15b32:	4770      	bx	lr
        *uuid = uuid_pri;
   15b34:	4b03      	ldr	r3, [pc, #12]	; (15b44 <ble_gatts_svc_type_to_uuid+0x1c>)
   15b36:	600b      	str	r3, [r1, #0]
        return 0;
   15b38:	2000      	movs	r0, #0
   15b3a:	4770      	bx	lr
        *uuid = uuid_sec;
   15b3c:	4b02      	ldr	r3, [pc, #8]	; (15b48 <ble_gatts_svc_type_to_uuid+0x20>)
   15b3e:	600b      	str	r3, [r1, #0]
        return 0;
   15b40:	2000      	movs	r0, #0
   15b42:	4770      	bx	lr
   15b44:	200001c8 	.word	0x200001c8
   15b48:	200001cc 	.word	0x200001cc

00015b4c <ble_gatts_svc_is_sane>:

static int
ble_gatts_svc_is_sane(const struct ble_gatt_svc_def *svc)
{
    if (svc->type != BLE_GATT_SVC_TYPE_PRIMARY &&
   15b4c:	7803      	ldrb	r3, [r0, #0]
   15b4e:	3b01      	subs	r3, #1
   15b50:	b2db      	uxtb	r3, r3
   15b52:	2b01      	cmp	r3, #1
   15b54:	d901      	bls.n	15b5a <ble_gatts_svc_is_sane+0xe>
        svc->type != BLE_GATT_SVC_TYPE_SECONDARY) {

        return 0;
   15b56:	2000      	movs	r0, #0
   15b58:	4770      	bx	lr
    }

    if (svc->uuid == NULL) {
   15b5a:	6843      	ldr	r3, [r0, #4]
   15b5c:	b10b      	cbz	r3, 15b62 <ble_gatts_svc_is_sane+0x16>
        return 0;
    }

    return 1;
   15b5e:	2001      	movs	r0, #1
}
   15b60:	4770      	bx	lr
        return 0;
   15b62:	2000      	movs	r0, #0
   15b64:	4770      	bx	lr
	...

00015b68 <ble_gatts_clt_cfg_size>:
}

static int
ble_gatts_clt_cfg_size(void)
{
    return ble_gatts_num_cfgable_chrs * sizeof (struct ble_gatts_clt_cfg);
   15b68:	4b01      	ldr	r3, [pc, #4]	; (15b70 <ble_gatts_clt_cfg_size+0x8>)
   15b6a:	6818      	ldr	r0, [r3, #0]
}
   15b6c:	0080      	lsls	r0, r0, #2
   15b6e:	4770      	bx	lr
   15b70:	200026d0 	.word	0x200026d0

00015b74 <ble_gatts_schedule_update>:
ble_gatts_schedule_update(struct ble_hs_conn *conn,
                          struct ble_gatts_clt_cfg *clt_cfg)
{
    uint8_t att_op;

    if (!(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED)) {
   15b74:	788b      	ldrb	r3, [r1, #2]
   15b76:	f013 0f80 	tst.w	r3, #128	; 0x80
   15b7a:	d101      	bne.n	15b80 <ble_gatts_schedule_update+0xc>
        /* Characteristic not modified.  Nothing to send. */
        att_op = 0;
   15b7c:	2000      	movs	r0, #0
   15b7e:	4770      	bx	lr
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_NOTIFY) {
   15b80:	f013 0f01 	tst.w	r3, #1
   15b84:	d107      	bne.n	15b96 <ble_gatts_schedule_update+0x22>
        /* Notifications always get sent immediately. */
        att_op = BLE_ATT_OP_NOTIFY_REQ;
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
   15b86:	f013 0f02 	tst.w	r3, #2
   15b8a:	d009      	beq.n	15ba0 <ble_gatts_schedule_update+0x2c>
        /* Only one outstanding indication per peer is allowed.  If we
         * are still awaiting an ack, mark this CCCD as updated so that
         * we know to send the indication upon receiving the expected ack.
         * If there isn't an outstanding indication, send this one now.
         */
        if (conn->bhc_gatt_svr.indicate_val_handle != 0) {
   15b8c:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   15b90:	b942      	cbnz	r2, 15ba4 <ble_gatts_schedule_update+0x30>
            att_op = 0;
        } else {
            att_op = BLE_ATT_OP_INDICATE_REQ;
   15b92:	201d      	movs	r0, #29
   15b94:	e000      	b.n	15b98 <ble_gatts_schedule_update+0x24>
        att_op = BLE_ATT_OP_NOTIFY_REQ;
   15b96:	201b      	movs	r0, #27

    /* If we will be sending an update, clear the modified flag so that we
     * don't double-send.
     */
    if (att_op != 0) {
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   15b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15b9c:	708b      	strb	r3, [r1, #2]
   15b9e:	4770      	bx	lr
        att_op = 0;
   15ba0:	2000      	movs	r0, #0
   15ba2:	4770      	bx	lr
            att_op = 0;
   15ba4:	2000      	movs	r0, #0
    }

    return att_op;
}
   15ba6:	4770      	bx	lr

00015ba8 <ble_gatts_clt_cfg_access_locked>:
{
   15ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15bac:	9d07      	ldr	r5, [sp, #28]
    out_cccd->chr_val_handle = 0;
   15bae:	2300      	movs	r3, #0
   15bb0:	812b      	strh	r3, [r5, #8]
    chr_val_handle = attr_handle - 1;
   15bb2:	1e4c      	subs	r4, r1, #1
   15bb4:	b2a4      	uxth	r4, r4
    if (chr_val_handle > attr_handle) {
   15bb6:	42a1      	cmp	r1, r4
   15bb8:	d355      	bcc.n	15c66 <ble_gatts_clt_cfg_access_locked+0xbe>
   15bba:	4617      	mov	r7, r2
   15bbc:	4606      	mov	r6, r0
    clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   15bbe:	4621      	mov	r1, r4
   15bc0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   15bc2:	f7ff ffa5 	bl	15b10 <ble_gatts_clt_cfg_find>
    if (clt_cfg == NULL) {
   15bc6:	4680      	mov	r8, r0
   15bc8:	2800      	cmp	r0, #0
   15bca:	d050      	beq.n	15c6e <ble_gatts_clt_cfg_access_locked+0xc6>
    *out_prev_clt_cfg_flags = clt_cfg->flags;
   15bcc:	7882      	ldrb	r2, [r0, #2]
   15bce:	9b08      	ldr	r3, [sp, #32]
   15bd0:	701a      	strb	r2, [r3, #0]
    *out_cur_clt_cfg_flags = clt_cfg->flags;
   15bd2:	7883      	ldrb	r3, [r0, #2]
   15bd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15bd6:	7013      	strb	r3, [r2, #0]
    gatt_op = ble_gatts_dsc_op(att_op);
   15bd8:	4638      	mov	r0, r7
   15bda:	f7ff ff77 	bl	15acc <ble_gatts_dsc_op>
    switch (gatt_op) {
   15bde:	2802      	cmp	r0, #2
   15be0:	d003      	beq.n	15bea <ble_gatts_clt_cfg_access_locked+0x42>
   15be2:	2803      	cmp	r0, #3
   15be4:	d00f      	beq.n	15c06 <ble_gatts_clt_cfg_access_locked+0x5e>
        return BLE_ATT_ERR_UNLIKELY;
   15be6:	230e      	movs	r3, #14
   15be8:	e03e      	b.n	15c68 <ble_gatts_clt_cfg_access_locked+0xc0>
        buf = os_mbuf_extend(om, 2);
   15bea:	2102      	movs	r1, #2
   15bec:	9806      	ldr	r0, [sp, #24]
   15bee:	f7fb fc5f 	bl	114b0 <os_mbuf_extend>
        if (buf == NULL) {
   15bf2:	2800      	cmp	r0, #0
   15bf4:	d03d      	beq.n	15c72 <ble_gatts_clt_cfg_access_locked+0xca>
        put_le16(buf, clt_cfg->flags & ~BLE_GATTS_CLT_CFG_F_RESERVED);
   15bf6:	f898 1002 	ldrb.w	r1, [r8, #2]
   15bfa:	f001 0103 	and.w	r1, r1, #3
   15bfe:	f008 ff90 	bl	1eb22 <put_le16>
    return 0;
   15c02:	2300      	movs	r3, #0
        break;
   15c04:	e030      	b.n	15c68 <ble_gatts_clt_cfg_access_locked+0xc0>
        if (OS_MBUF_PKTLEN(om) != 2) {
   15c06:	9b06      	ldr	r3, [sp, #24]
   15c08:	8a1b      	ldrh	r3, [r3, #16]
   15c0a:	2b02      	cmp	r3, #2
   15c0c:	d001      	beq.n	15c12 <ble_gatts_clt_cfg_access_locked+0x6a>
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   15c0e:	230d      	movs	r3, #13
   15c10:	e02a      	b.n	15c68 <ble_gatts_clt_cfg_access_locked+0xc0>
        om = os_mbuf_pullup(om, 2);
   15c12:	2102      	movs	r1, #2
   15c14:	9806      	ldr	r0, [sp, #24]
   15c16:	f7fb fc7c 	bl	11512 <os_mbuf_pullup>
        flags = get_le16(om->om_data);
   15c1a:	6800      	ldr	r0, [r0, #0]
   15c1c:	f008 ffa2 	bl	1eb64 <get_le16>
        if ((flags & ~clt_cfg->allowed) != 0) {
   15c20:	f898 3003 	ldrb.w	r3, [r8, #3]
   15c24:	ea30 0303 	bics.w	r3, r0, r3
   15c28:	d125      	bne.n	15c76 <ble_gatts_clt_cfg_access_locked+0xce>
        if (clt_cfg->flags != flags) {
   15c2a:	f898 2002 	ldrb.w	r2, [r8, #2]
   15c2e:	4282      	cmp	r2, r0
   15c30:	d01a      	beq.n	15c68 <ble_gatts_clt_cfg_access_locked+0xc0>
            clt_cfg->flags = flags;
   15c32:	b2c0      	uxtb	r0, r0
   15c34:	f888 0002 	strb.w	r0, [r8, #2]
            *out_cur_clt_cfg_flags = flags;
   15c38:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15c3a:	7010      	strb	r0, [r2, #0]
            if (conn->bhc_sec_state.bonded) {
   15c3c:	f896 2058 	ldrb.w	r2, [r6, #88]	; 0x58
   15c40:	f012 0f04 	tst.w	r2, #4
   15c44:	d010      	beq.n	15c68 <ble_gatts_clt_cfg_access_locked+0xc0>
                out_cccd->peer_addr = conn->bhc_peer_addr;
   15c46:	f856 0f07 	ldr.w	r0, [r6, #7]!
   15c4a:	6028      	str	r0, [r5, #0]
   15c4c:	88b1      	ldrh	r1, [r6, #4]
   15c4e:	79b2      	ldrb	r2, [r6, #6]
   15c50:	80a9      	strh	r1, [r5, #4]
   15c52:	71aa      	strb	r2, [r5, #6]
                out_cccd->chr_val_handle = chr_val_handle;
   15c54:	812c      	strh	r4, [r5, #8]
                out_cccd->flags = clt_cfg->flags;
   15c56:	f898 2002 	ldrb.w	r2, [r8, #2]
   15c5a:	816a      	strh	r2, [r5, #10]
                out_cccd->value_changed = 0;
   15c5c:	7b2a      	ldrb	r2, [r5, #12]
   15c5e:	f36f 0200 	bfc	r2, #0, #1
   15c62:	732a      	strb	r2, [r5, #12]
   15c64:	e000      	b.n	15c68 <ble_gatts_clt_cfg_access_locked+0xc0>
        return BLE_ATT_ERR_UNLIKELY;
   15c66:	230e      	movs	r3, #14
}
   15c68:	4618      	mov	r0, r3
   15c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_ATT_ERR_UNLIKELY;
   15c6e:	230e      	movs	r3, #14
   15c70:	e7fa      	b.n	15c68 <ble_gatts_clt_cfg_access_locked+0xc0>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   15c72:	2311      	movs	r3, #17
   15c74:	e7f8      	b.n	15c68 <ble_gatts_clt_cfg_access_locked+0xc0>
            return BLE_ATT_ERR_REQ_NOT_SUPPORTED;
   15c76:	2306      	movs	r3, #6
   15c78:	e7f6      	b.n	15c68 <ble_gatts_clt_cfg_access_locked+0xc0>

00015c7a <ble_gatts_subscribe_event>:
{
   15c7a:	b530      	push	{r4, r5, lr}
   15c7c:	b085      	sub	sp, #20
   15c7e:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if ((prev_flags ^ cur_flags) & ~BLE_GATTS_CLT_CFG_F_RESERVED) {
   15c82:	ea83 0504 	eor.w	r5, r3, r4
   15c86:	f035 05fc 	bics.w	r5, r5, #252	; 0xfc
   15c8a:	d101      	bne.n	15c90 <ble_gatts_subscribe_event+0x16>
}
   15c8c:	b005      	add	sp, #20
   15c8e:	bd30      	pop	{r4, r5, pc}
        ble_gap_subscribe_event(conn_handle,
   15c90:	f004 0502 	and.w	r5, r4, #2
   15c94:	9502      	str	r5, [sp, #8]
   15c96:	f003 0502 	and.w	r5, r3, #2
   15c9a:	9501      	str	r5, [sp, #4]
   15c9c:	f004 0401 	and.w	r4, r4, #1
   15ca0:	9400      	str	r4, [sp, #0]
   15ca2:	f003 0301 	and.w	r3, r3, #1
   15ca6:	f7fe fa25 	bl	140f4 <ble_gap_subscribe_event>
}
   15caa:	e7ef      	b.n	15c8c <ble_gatts_subscribe_event+0x12>

00015cac <ble_gatts_clt_cfg_access>:
{
   15cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15cb0:	b08c      	sub	sp, #48	; 0x30
   15cb2:	4606      	mov	r6, r0
   15cb4:	460d      	mov	r5, r1
   15cb6:	4617      	mov	r7, r2
   15cb8:	4698      	mov	r8, r3
    ble_hs_lock();
   15cba:	f000 fe1f 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   15cbe:	4630      	mov	r0, r6
   15cc0:	f001 fbf2 	bl	174a8 <ble_hs_conn_find>
    if (conn == NULL) {
   15cc4:	b1b8      	cbz	r0, 15cf6 <ble_gatts_clt_cfg_access+0x4a>
        rc = ble_gatts_clt_cfg_access_locked(conn, attr_handle, op, offset,
   15cc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15cc8:	681b      	ldr	r3, [r3, #0]
   15cca:	f10d 0212 	add.w	r2, sp, #18
   15cce:	9203      	str	r2, [sp, #12]
   15cd0:	f10d 0213 	add.w	r2, sp, #19
   15cd4:	9202      	str	r2, [sp, #8]
   15cd6:	aa08      	add	r2, sp, #32
   15cd8:	9201      	str	r2, [sp, #4]
   15cda:	9300      	str	r3, [sp, #0]
   15cdc:	4643      	mov	r3, r8
   15cde:	463a      	mov	r2, r7
   15ce0:	4629      	mov	r1, r5
   15ce2:	f7ff ff61 	bl	15ba8 <ble_gatts_clt_cfg_access_locked>
   15ce6:	4604      	mov	r4, r0
    ble_hs_unlock();
   15ce8:	f000 fe0c 	bl	16904 <ble_hs_unlock>
    if (rc != 0) {
   15cec:	b13c      	cbz	r4, 15cfe <ble_gatts_clt_cfg_access+0x52>
}
   15cee:	4620      	mov	r0, r4
   15cf0:	b00c      	add	sp, #48	; 0x30
   15cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   15cf6:	f000 fe05 	bl	16904 <ble_hs_unlock>
        rc = BLE_ATT_ERR_UNLIKELY;
   15cfa:	240e      	movs	r4, #14
   15cfc:	e7f7      	b.n	15cee <ble_gatts_clt_cfg_access+0x42>
    chr_val_handle = attr_handle - 1;
   15cfe:	1e69      	subs	r1, r5, #1
    ble_gatts_subscribe_event(conn_handle, chr_val_handle,
   15d00:	f89d 3013 	ldrb.w	r3, [sp, #19]
   15d04:	f89d 2012 	ldrb.w	r2, [sp, #18]
   15d08:	9200      	str	r2, [sp, #0]
   15d0a:	2201      	movs	r2, #1
   15d0c:	b289      	uxth	r1, r1
   15d0e:	4630      	mov	r0, r6
   15d10:	f7ff ffb3 	bl	15c7a <ble_gatts_subscribe_event>
    if (cccd_value.chr_val_handle != 0) {
   15d14:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   15d18:	2b00      	cmp	r3, #0
   15d1a:	d0e8      	beq.n	15cee <ble_gatts_clt_cfg_access+0x42>
        if (cccd_value.flags == 0) {
   15d1c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   15d20:	b123      	cbz	r3, 15d2c <ble_gatts_clt_cfg_access+0x80>
            rc = ble_store_write_cccd(&cccd_value);
   15d22:	a808      	add	r0, sp, #32
   15d24:	f005 fb8f 	bl	1b446 <ble_store_write_cccd>
   15d28:	4604      	mov	r4, r0
   15d2a:	e7e0      	b.n	15cee <ble_gatts_clt_cfg_access+0x42>
            ble_store_key_from_value_cccd(&cccd_key, &cccd_value);
   15d2c:	a908      	add	r1, sp, #32
   15d2e:	a805      	add	r0, sp, #20
   15d30:	f005 fb95 	bl	1b45e <ble_store_key_from_value_cccd>
            rc = ble_store_delete_cccd(&cccd_key);
   15d34:	a805      	add	r0, sp, #20
   15d36:	f005 fb8c 	bl	1b452 <ble_store_delete_cccd>
   15d3a:	4604      	mov	r4, r0
   15d3c:	e7d7      	b.n	15cee <ble_gatts_clt_cfg_access+0x42>
	...

00015d40 <ble_gatts_register_inc>:
{
   15d40:	b500      	push	{lr}
   15d42:	b085      	sub	sp, #20
    rc = ble_att_svr_register(uuid_inc, BLE_ATT_F_READ, 0, &handle,
   15d44:	9001      	str	r0, [sp, #4]
   15d46:	4b06      	ldr	r3, [pc, #24]	; (15d60 <ble_gatts_register_inc+0x20>)
   15d48:	9300      	str	r3, [sp, #0]
   15d4a:	f10d 030e 	add.w	r3, sp, #14
   15d4e:	2200      	movs	r2, #0
   15d50:	2101      	movs	r1, #1
   15d52:	4804      	ldr	r0, [pc, #16]	; (15d64 <ble_gatts_register_inc+0x24>)
   15d54:	f006 fdd6 	bl	1c904 <ble_att_svr_register>
}
   15d58:	b005      	add	sp, #20
   15d5a:	f85d fb04 	ldr.w	pc, [sp], #4
   15d5e:	bf00      	nop
   15d60:	00016083 	.word	0x00016083
   15d64:	200001d0 	.word	0x200001d0

00015d68 <ble_gatts_register_clt_cfg_dsc>:
{
   15d68:	b500      	push	{lr}
   15d6a:	b083      	sub	sp, #12
    rc = ble_att_svr_register(uuid_ccc, BLE_ATT_F_READ | BLE_ATT_F_WRITE, 0,
   15d6c:	2200      	movs	r2, #0
   15d6e:	9201      	str	r2, [sp, #4]
   15d70:	4b04      	ldr	r3, [pc, #16]	; (15d84 <ble_gatts_register_clt_cfg_dsc+0x1c>)
   15d72:	9300      	str	r3, [sp, #0]
   15d74:	4603      	mov	r3, r0
   15d76:	2103      	movs	r1, #3
   15d78:	4803      	ldr	r0, [pc, #12]	; (15d88 <ble_gatts_register_clt_cfg_dsc+0x20>)
   15d7a:	f006 fdc3 	bl	1c904 <ble_att_svr_register>
}
   15d7e:	b003      	add	sp, #12
   15d80:	f85d fb04 	ldr.w	pc, [sp], #4
   15d84:	00015cad 	.word	0x00015cad
   15d88:	200001d8 	.word	0x200001d8

00015d8c <ble_gatts_register_dsc>:
{
   15d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d8e:	b089      	sub	sp, #36	; 0x24
   15d90:	4607      	mov	r7, r0
   15d92:	460e      	mov	r6, r1
   15d94:	4614      	mov	r4, r2
    if (!ble_gatts_dsc_is_sane(dsc)) {
   15d96:	4610      	mov	r0, r2
   15d98:	f7ff fe9e 	bl	15ad8 <ble_gatts_dsc_is_sane>
   15d9c:	b1e0      	cbz	r0, 15dd8 <ble_gatts_register_dsc+0x4c>
    rc = ble_att_svr_register(dsc->uuid, dsc->att_flags, dsc->min_key_size,
   15d9e:	7921      	ldrb	r1, [r4, #4]
   15da0:	7962      	ldrb	r2, [r4, #5]
   15da2:	9401      	str	r4, [sp, #4]
   15da4:	4b0e      	ldr	r3, [pc, #56]	; (15de0 <ble_gatts_register_dsc+0x54>)
   15da6:	9300      	str	r3, [sp, #0]
   15da8:	f10d 030a 	add.w	r3, sp, #10
   15dac:	6820      	ldr	r0, [r4, #0]
   15dae:	f006 fda9 	bl	1c904 <ble_att_svr_register>
    if (rc != 0) {
   15db2:	4605      	mov	r5, r0
   15db4:	b988      	cbnz	r0, 15dda <ble_gatts_register_dsc+0x4e>
    if (register_cb != NULL) {
   15db6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15db8:	b17b      	cbz	r3, 15dda <ble_gatts_register_dsc+0x4e>
        register_ctxt.op = BLE_GATT_REGISTER_OP_DSC;
   15dba:	2303      	movs	r3, #3
   15dbc:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.dsc.handle = dsc_handle;
   15dc0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   15dc4:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.dsc.svc_def = svc;
   15dc8:	9707      	str	r7, [sp, #28]
        register_ctxt.dsc.chr_def = chr;
   15dca:	9606      	str	r6, [sp, #24]
        register_ctxt.dsc.dsc_def = dsc;
   15dcc:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   15dce:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15dd0:	a803      	add	r0, sp, #12
   15dd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   15dd4:	4798      	blx	r3
   15dd6:	e000      	b.n	15dda <ble_gatts_register_dsc+0x4e>
        return BLE_HS_EINVAL;
   15dd8:	2503      	movs	r5, #3
}
   15dda:	4628      	mov	r0, r5
   15ddc:	b009      	add	sp, #36	; 0x24
   15dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15de0:	000161a1 	.word	0x000161a1

00015de4 <ble_gatts_register_chr>:
{
   15de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15de8:	b08b      	sub	sp, #44	; 0x2c
   15dea:	4680      	mov	r8, r0
   15dec:	460c      	mov	r4, r1
   15dee:	4617      	mov	r7, r2
   15df0:	4699      	mov	r9, r3
    if (!ble_gatts_chr_is_sane(chr)) {
   15df2:	4608      	mov	r0, r1
   15df4:	f7ff fe25 	bl	15a42 <ble_gatts_chr_is_sane>
   15df8:	2800      	cmp	r0, #0
   15dfa:	d061      	beq.n	15ec0 <ble_gatts_register_chr+0xdc>
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   15dfc:	4620      	mov	r0, r4
   15dfe:	f7ff fdbd 	bl	1597c <ble_gatts_chr_clt_cfg_allowed>
   15e02:	b140      	cbz	r0, 15e16 <ble_gatts_register_chr+0x32>
        if (ble_gatts_num_cfgable_chrs > ble_hs_max_client_configs) {
   15e04:	4b31      	ldr	r3, [pc, #196]	; (15ecc <ble_gatts_register_chr+0xe8>)
   15e06:	881a      	ldrh	r2, [r3, #0]
   15e08:	4b31      	ldr	r3, [pc, #196]	; (15ed0 <ble_gatts_register_chr+0xec>)
   15e0a:	681b      	ldr	r3, [r3, #0]
   15e0c:	429a      	cmp	r2, r3
   15e0e:	db59      	blt.n	15ec4 <ble_gatts_register_chr+0xe0>
        ble_gatts_num_cfgable_chrs++;
   15e10:	3301      	adds	r3, #1
   15e12:	4a2f      	ldr	r2, [pc, #188]	; (15ed0 <ble_gatts_register_chr+0xec>)
   15e14:	6013      	str	r3, [r2, #0]
    rc = ble_att_svr_register(uuid_chr, BLE_ATT_F_READ, 0, &def_handle,
   15e16:	9401      	str	r4, [sp, #4]
   15e18:	4b2e      	ldr	r3, [pc, #184]	; (15ed4 <ble_gatts_register_chr+0xf0>)
   15e1a:	9300      	str	r3, [sp, #0]
   15e1c:	f10d 0312 	add.w	r3, sp, #18
   15e20:	2200      	movs	r2, #0
   15e22:	2101      	movs	r1, #1
   15e24:	482c      	ldr	r0, [pc, #176]	; (15ed8 <ble_gatts_register_chr+0xf4>)
   15e26:	f006 fd6d 	bl	1c904 <ble_att_svr_register>
    if (rc != 0) {
   15e2a:	4605      	mov	r5, r0
   15e2c:	b118      	cbz	r0, 15e36 <ble_gatts_register_chr+0x52>
}
   15e2e:	4628      	mov	r0, r5
   15e30:	b00b      	add	sp, #44	; 0x2c
   15e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    att_flags = ble_gatts_att_flags_from_chr_flags(chr->flags);
   15e36:	8a20      	ldrh	r0, [r4, #16]
   15e38:	f7ff fdad 	bl	15996 <ble_gatts_att_flags_from_chr_flags>
    rc = ble_att_svr_register(chr->uuid, att_flags, chr->min_key_size,
   15e3c:	7ca2      	ldrb	r2, [r4, #18]
   15e3e:	9401      	str	r4, [sp, #4]
   15e40:	4b26      	ldr	r3, [pc, #152]	; (15edc <ble_gatts_register_chr+0xf8>)
   15e42:	9300      	str	r3, [sp, #0]
   15e44:	ab04      	add	r3, sp, #16
   15e46:	4601      	mov	r1, r0
   15e48:	6820      	ldr	r0, [r4, #0]
   15e4a:	f006 fd5b 	bl	1c904 <ble_att_svr_register>
    if (rc != 0) {
   15e4e:	4605      	mov	r5, r0
   15e50:	2800      	cmp	r0, #0
   15e52:	d1ec      	bne.n	15e2e <ble_gatts_register_chr+0x4a>
    if (chr->val_handle != NULL) {
   15e54:	6963      	ldr	r3, [r4, #20]
   15e56:	b113      	cbz	r3, 15e5e <ble_gatts_register_chr+0x7a>
        *chr->val_handle = val_handle;
   15e58:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   15e5c:	801a      	strh	r2, [r3, #0]
    if (register_cb != NULL) {
   15e5e:	b187      	cbz	r7, 15e82 <ble_gatts_register_chr+0x9e>
        register_ctxt.op = BLE_GATT_REGISTER_OP_CHR;
   15e60:	2302      	movs	r3, #2
   15e62:	f88d 3014 	strb.w	r3, [sp, #20]
        register_ctxt.chr.def_handle = def_handle;
   15e66:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   15e6a:	f8ad 3018 	strh.w	r3, [sp, #24]
        register_ctxt.chr.val_handle = val_handle;
   15e6e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   15e72:	f8ad 301a 	strh.w	r3, [sp, #26]
        register_ctxt.chr.svc_def = svc;
   15e76:	f8cd 8020 	str.w	r8, [sp, #32]
        register_ctxt.chr.chr_def = chr;
   15e7a:	9407      	str	r4, [sp, #28]
        register_cb(&register_ctxt, cb_arg);
   15e7c:	4649      	mov	r1, r9
   15e7e:	a805      	add	r0, sp, #20
   15e80:	47b8      	blx	r7
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   15e82:	4620      	mov	r0, r4
   15e84:	f7ff fd7a 	bl	1597c <ble_gatts_chr_clt_cfg_allowed>
   15e88:	b990      	cbnz	r0, 15eb0 <ble_gatts_register_chr+0xcc>
    if (chr->descriptors != NULL) {
   15e8a:	68e6      	ldr	r6, [r4, #12]
   15e8c:	2e00      	cmp	r6, #0
   15e8e:	d0ce      	beq.n	15e2e <ble_gatts_register_chr+0x4a>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   15e90:	6833      	ldr	r3, [r6, #0]
   15e92:	2b00      	cmp	r3, #0
   15e94:	d0cb      	beq.n	15e2e <ble_gatts_register_chr+0x4a>
            rc = ble_gatts_register_dsc(svc, chr, dsc, def_handle, register_cb,
   15e96:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   15e9a:	f8cd 9004 	str.w	r9, [sp, #4]
   15e9e:	9700      	str	r7, [sp, #0]
   15ea0:	4632      	mov	r2, r6
   15ea2:	4621      	mov	r1, r4
   15ea4:	4640      	mov	r0, r8
   15ea6:	f7ff ff71 	bl	15d8c <ble_gatts_register_dsc>
            if (rc != 0) {
   15eaa:	b968      	cbnz	r0, 15ec8 <ble_gatts_register_chr+0xe4>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   15eac:	3610      	adds	r6, #16
   15eae:	e7ef      	b.n	15e90 <ble_gatts_register_chr+0xac>
        rc = ble_gatts_register_clt_cfg_dsc(&dsc_handle);
   15eb0:	f10d 000e 	add.w	r0, sp, #14
   15eb4:	f7ff ff58 	bl	15d68 <ble_gatts_register_clt_cfg_dsc>
        if (rc != 0) {
   15eb8:	2800      	cmp	r0, #0
   15eba:	d0e6      	beq.n	15e8a <ble_gatts_register_chr+0xa6>
            return rc;
   15ebc:	4605      	mov	r5, r0
   15ebe:	e7b6      	b.n	15e2e <ble_gatts_register_chr+0x4a>
        return BLE_HS_EINVAL;
   15ec0:	2503      	movs	r5, #3
   15ec2:	e7b4      	b.n	15e2e <ble_gatts_register_chr+0x4a>
            return BLE_HS_ENOMEM;
   15ec4:	2506      	movs	r5, #6
   15ec6:	e7b2      	b.n	15e2e <ble_gatts_register_chr+0x4a>
                return rc;
   15ec8:	4605      	mov	r5, r0
   15eca:	e7b0      	b.n	15e2e <ble_gatts_register_chr+0x4a>
   15ecc:	20003d70 	.word	0x20003d70
   15ed0:	200026d0 	.word	0x200026d0
   15ed4:	00016035 	.word	0x00016035
   15ed8:	200001d4 	.word	0x200001d4
   15edc:	0001616d 	.word	0x0001616d

00015ee0 <ble_gatts_register_svc>:
{
   15ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ee4:	b088      	sub	sp, #32
   15ee6:	4604      	mov	r4, r0
   15ee8:	460e      	mov	r6, r1
   15eea:	4617      	mov	r7, r2
   15eec:	4698      	mov	r8, r3
    if (!ble_gatts_svc_incs_satisfied(svc)) {
   15eee:	f7ff fdcf 	bl	15a90 <ble_gatts_svc_incs_satisfied>
   15ef2:	2800      	cmp	r0, #0
   15ef4:	d040      	beq.n	15f78 <ble_gatts_register_svc+0x98>
    if (!ble_gatts_svc_is_sane(svc)) {
   15ef6:	4620      	mov	r0, r4
   15ef8:	f7ff fe28 	bl	15b4c <ble_gatts_svc_is_sane>
   15efc:	2800      	cmp	r0, #0
   15efe:	d040      	beq.n	15f82 <ble_gatts_register_svc+0xa2>
    uuid = NULL;
   15f00:	2500      	movs	r5, #0
   15f02:	a908      	add	r1, sp, #32
   15f04:	f841 5d18 	str.w	r5, [r1, #-24]!
    rc = ble_gatts_svc_type_to_uuid(svc->type, &uuid);
   15f08:	7820      	ldrb	r0, [r4, #0]
   15f0a:	f7ff fe0d 	bl	15b28 <ble_gatts_svc_type_to_uuid>
    rc = ble_att_svr_register(uuid, BLE_ATT_F_READ, 0, out_handle,
   15f0e:	9401      	str	r4, [sp, #4]
   15f10:	4b1f      	ldr	r3, [pc, #124]	; (15f90 <ble_gatts_register_svc+0xb0>)
   15f12:	9300      	str	r3, [sp, #0]
   15f14:	4633      	mov	r3, r6
   15f16:	462a      	mov	r2, r5
   15f18:	2101      	movs	r1, #1
   15f1a:	9802      	ldr	r0, [sp, #8]
   15f1c:	f006 fcf2 	bl	1c904 <ble_att_svr_register>
    if (rc != 0) {
   15f20:	4605      	mov	r5, r0
   15f22:	bb50      	cbnz	r0, 15f7a <ble_gatts_register_svc+0x9a>
    if (register_cb != NULL) {
   15f24:	b14f      	cbz	r7, 15f3a <ble_gatts_register_svc+0x5a>
        register_ctxt.op = BLE_GATT_REGISTER_OP_SVC;
   15f26:	2301      	movs	r3, #1
   15f28:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.svc.handle = *out_handle;
   15f2c:	8833      	ldrh	r3, [r6, #0]
   15f2e:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.svc.svc_def = svc;
   15f32:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   15f34:	4641      	mov	r1, r8
   15f36:	a803      	add	r0, sp, #12
   15f38:	47b8      	blx	r7
    if (svc->includes != NULL) {
   15f3a:	68a3      	ldr	r3, [r4, #8]
   15f3c:	b17b      	cbz	r3, 15f5e <ble_gatts_register_svc+0x7e>
        for (i = 0; svc->includes[i] != NULL; i++) {
   15f3e:	462e      	mov	r6, r5
   15f40:	68a3      	ldr	r3, [r4, #8]
   15f42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   15f46:	b150      	cbz	r0, 15f5e <ble_gatts_register_svc+0x7e>
            idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   15f48:	f7ff fd8c 	bl	15a64 <ble_gatts_find_svc_entry_idx>
            rc = ble_gatts_register_inc(ble_gatts_svc_entries + idx);
   15f4c:	4b11      	ldr	r3, [pc, #68]	; (15f94 <ble_gatts_register_svc+0xb4>)
   15f4e:	681b      	ldr	r3, [r3, #0]
   15f50:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   15f54:	f7ff fef4 	bl	15d40 <ble_gatts_register_inc>
            if (rc != 0) {
   15f58:	b9a8      	cbnz	r0, 15f86 <ble_gatts_register_svc+0xa6>
        for (i = 0; svc->includes[i] != NULL; i++) {
   15f5a:	3601      	adds	r6, #1
   15f5c:	e7f0      	b.n	15f40 <ble_gatts_register_svc+0x60>
    if (svc->characteristics != NULL) {
   15f5e:	68e6      	ldr	r6, [r4, #12]
   15f60:	b15e      	cbz	r6, 15f7a <ble_gatts_register_svc+0x9a>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   15f62:	6833      	ldr	r3, [r6, #0]
   15f64:	b14b      	cbz	r3, 15f7a <ble_gatts_register_svc+0x9a>
            rc = ble_gatts_register_chr(svc, chr, register_cb, cb_arg);
   15f66:	4643      	mov	r3, r8
   15f68:	463a      	mov	r2, r7
   15f6a:	4631      	mov	r1, r6
   15f6c:	4620      	mov	r0, r4
   15f6e:	f7ff ff39 	bl	15de4 <ble_gatts_register_chr>
            if (rc != 0) {
   15f72:	b950      	cbnz	r0, 15f8a <ble_gatts_register_svc+0xaa>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   15f74:	3618      	adds	r6, #24
   15f76:	e7f4      	b.n	15f62 <ble_gatts_register_svc+0x82>
        return BLE_HS_EAGAIN;
   15f78:	2501      	movs	r5, #1
}
   15f7a:	4628      	mov	r0, r5
   15f7c:	b008      	add	sp, #32
   15f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EINVAL;
   15f82:	2503      	movs	r5, #3
   15f84:	e7f9      	b.n	15f7a <ble_gatts_register_svc+0x9a>
                return rc;
   15f86:	4605      	mov	r5, r0
   15f88:	e7f7      	b.n	15f7a <ble_gatts_register_svc+0x9a>
                return rc;
   15f8a:	4605      	mov	r5, r0
   15f8c:	e7f5      	b.n	15f7a <ble_gatts_register_svc+0x9a>
   15f8e:	bf00      	nop
   15f90:	0001600d 	.word	0x0001600d
   15f94:	200026e0 	.word	0x200026e0

00015f98 <ble_gatts_register_round>:
{
   15f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15f9c:	b082      	sub	sp, #8
   15f9e:	4606      	mov	r6, r0
   15fa0:	4688      	mov	r8, r1
   15fa2:	4617      	mov	r7, r2
    *out_num_registered = 0;
   15fa4:	2400      	movs	r4, #0
   15fa6:	6004      	str	r4, [r0, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   15fa8:	e009      	b.n	15fbe <ble_gatts_register_round+0x26>
                entry->handle = handle;
   15faa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   15fae:	80ab      	strh	r3, [r5, #4]
                entry->end_group_handle = ble_att_svr_prev_handle();
   15fb0:	f006 fcd0 	bl	1c954 <ble_att_svr_prev_handle>
   15fb4:	80e8      	strh	r0, [r5, #6]
                (*out_num_registered)++;
   15fb6:	6833      	ldr	r3, [r6, #0]
   15fb8:	3301      	adds	r3, #1
   15fba:	6033      	str	r3, [r6, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   15fbc:	3401      	adds	r4, #1
   15fbe:	4b11      	ldr	r3, [pc, #68]	; (16004 <ble_gatts_register_round+0x6c>)
   15fc0:	881b      	ldrh	r3, [r3, #0]
   15fc2:	42a3      	cmp	r3, r4
   15fc4:	dd17      	ble.n	15ff6 <ble_gatts_register_round+0x5e>
        entry = ble_gatts_svc_entries + i;
   15fc6:	4b10      	ldr	r3, [pc, #64]	; (16008 <ble_gatts_register_round+0x70>)
   15fc8:	6818      	ldr	r0, [r3, #0]
   15fca:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
        if (entry->handle == 0) {
   15fce:	88ab      	ldrh	r3, [r5, #4]
   15fd0:	2b00      	cmp	r3, #0
   15fd2:	d1f3      	bne.n	15fbc <ble_gatts_register_round+0x24>
            rc = ble_gatts_register_svc(entry->svc, &handle, cb, cb_arg);
   15fd4:	463b      	mov	r3, r7
   15fd6:	4642      	mov	r2, r8
   15fd8:	f10d 0106 	add.w	r1, sp, #6
   15fdc:	f850 0034 	ldr.w	r0, [r0, r4, lsl #3]
   15fe0:	f7ff ff7e 	bl	15ee0 <ble_gatts_register_svc>
            switch (rc) {
   15fe4:	4603      	mov	r3, r0
   15fe6:	2800      	cmp	r0, #0
   15fe8:	d0df      	beq.n	15faa <ble_gatts_register_round+0x12>
   15fea:	2801      	cmp	r0, #1
   15fec:	d0e6      	beq.n	15fbc <ble_gatts_register_round+0x24>
}
   15fee:	4618      	mov	r0, r3
   15ff0:	b002      	add	sp, #8
   15ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*out_num_registered == 0) {
   15ff6:	6833      	ldr	r3, [r6, #0]
   15ff8:	b10b      	cbz	r3, 15ffe <ble_gatts_register_round+0x66>
    return 0;
   15ffa:	2300      	movs	r3, #0
   15ffc:	e7f7      	b.n	15fee <ble_gatts_register_round+0x56>
        return BLE_HS_EINVAL;
   15ffe:	2303      	movs	r3, #3
   16000:	e7f5      	b.n	15fee <ble_gatts_register_round+0x56>
   16002:	bf00      	nop
   16004:	200026d8 	.word	0x200026d8
   16008:	200026e0 	.word	0x200026e0

0001600c <ble_gatts_svc_access>:
{
   1600c:	b538      	push	{r3, r4, r5, lr}
   1600e:	9c05      	ldr	r4, [sp, #20]
    buf = os_mbuf_extend(*om, ble_uuid_length(svc->uuid));
   16010:	9b04      	ldr	r3, [sp, #16]
   16012:	681d      	ldr	r5, [r3, #0]
   16014:	6860      	ldr	r0, [r4, #4]
   16016:	f005 fb2f 	bl	1b678 <ble_uuid_length>
   1601a:	b281      	uxth	r1, r0
   1601c:	4628      	mov	r0, r5
   1601e:	f7fb fa47 	bl	114b0 <os_mbuf_extend>
    if (buf == NULL) {
   16022:	b128      	cbz	r0, 16030 <ble_gatts_svc_access+0x24>
   16024:	4601      	mov	r1, r0
    ble_uuid_flat(svc->uuid, buf);
   16026:	6860      	ldr	r0, [r4, #4]
   16028:	f005 fafa 	bl	1b620 <ble_uuid_flat>
    return 0;
   1602c:	2000      	movs	r0, #0
}
   1602e:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   16030:	2011      	movs	r0, #17
   16032:	e7fc      	b.n	1602e <ble_gatts_svc_access+0x22>

00016034 <ble_gatts_chr_def_access>:
{
   16034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16036:	460d      	mov	r5, r1
   16038:	9f06      	ldr	r7, [sp, #24]
   1603a:	9e07      	ldr	r6, [sp, #28]
    buf = os_mbuf_extend(*om, 3);
   1603c:	2103      	movs	r1, #3
   1603e:	6838      	ldr	r0, [r7, #0]
   16040:	f7fb fa36 	bl	114b0 <os_mbuf_extend>
    if (buf == NULL) {
   16044:	b1c8      	cbz	r0, 1607a <ble_gatts_chr_def_access+0x46>
   16046:	4604      	mov	r4, r0
    buf[0] = ble_gatts_chr_properties(chr);
   16048:	4630      	mov	r0, r6
   1604a:	f7ff fccf 	bl	159ec <ble_gatts_chr_properties>
   1604e:	f804 0b01 	strb.w	r0, [r4], #1
    put_le16(buf + 1, attr_handle + 1);
   16052:	1c69      	adds	r1, r5, #1
   16054:	b289      	uxth	r1, r1
   16056:	4620      	mov	r0, r4
   16058:	f008 fd63 	bl	1eb22 <put_le16>
    buf = os_mbuf_extend(*om, ble_uuid_length(chr->uuid));
   1605c:	683c      	ldr	r4, [r7, #0]
   1605e:	6830      	ldr	r0, [r6, #0]
   16060:	f005 fb0a 	bl	1b678 <ble_uuid_length>
   16064:	b281      	uxth	r1, r0
   16066:	4620      	mov	r0, r4
   16068:	f7fb fa22 	bl	114b0 <os_mbuf_extend>
    if (buf == NULL) {
   1606c:	4601      	mov	r1, r0
   1606e:	b130      	cbz	r0, 1607e <ble_gatts_chr_def_access+0x4a>
    ble_uuid_flat(chr->uuid, buf);
   16070:	6830      	ldr	r0, [r6, #0]
   16072:	f005 fad5 	bl	1b620 <ble_uuid_flat>
    return 0;
   16076:	2000      	movs	r0, #0
}
   16078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   1607a:	2011      	movs	r0, #17
   1607c:	e7fc      	b.n	16078 <ble_gatts_chr_def_access+0x44>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   1607e:	2011      	movs	r0, #17
   16080:	e7fa      	b.n	16078 <ble_gatts_chr_def_access+0x44>

00016082 <ble_gatts_inc_access>:
{
   16082:	b570      	push	{r4, r5, r6, lr}
   16084:	9e04      	ldr	r6, [sp, #16]
   16086:	9c05      	ldr	r4, [sp, #20]
    buf = os_mbuf_extend(*om, 4);
   16088:	2104      	movs	r1, #4
   1608a:	6830      	ldr	r0, [r6, #0]
   1608c:	f7fb fa10 	bl	114b0 <os_mbuf_extend>
    if (buf == NULL) {
   16090:	b1c8      	cbz	r0, 160c6 <ble_gatts_inc_access+0x44>
   16092:	4605      	mov	r5, r0
    put_le16(buf + 0, entry->handle);
   16094:	88a1      	ldrh	r1, [r4, #4]
   16096:	f008 fd44 	bl	1eb22 <put_le16>
    put_le16(buf + 2, entry->end_group_handle);
   1609a:	88e1      	ldrh	r1, [r4, #6]
   1609c:	1ca8      	adds	r0, r5, #2
   1609e:	f008 fd40 	bl	1eb22 <put_le16>
    uuid16 = ble_uuid_u16(entry->svc->uuid);
   160a2:	6823      	ldr	r3, [r4, #0]
   160a4:	6858      	ldr	r0, [r3, #4]
   160a6:	f005 fa7f 	bl	1b5a8 <ble_uuid_u16>
    if (uuid16 != 0) {
   160aa:	4604      	mov	r4, r0
   160ac:	b908      	cbnz	r0, 160b2 <ble_gatts_inc_access+0x30>
    return 0;
   160ae:	2000      	movs	r0, #0
}
   160b0:	bd70      	pop	{r4, r5, r6, pc}
        buf = os_mbuf_extend(*om, 2);
   160b2:	2102      	movs	r1, #2
   160b4:	6830      	ldr	r0, [r6, #0]
   160b6:	f7fb f9fb 	bl	114b0 <os_mbuf_extend>
        if (buf == NULL) {
   160ba:	b130      	cbz	r0, 160ca <ble_gatts_inc_access+0x48>
        put_le16(buf, uuid16);
   160bc:	4621      	mov	r1, r4
   160be:	f008 fd30 	bl	1eb22 <put_le16>
    return 0;
   160c2:	2000      	movs	r0, #0
   160c4:	e7f4      	b.n	160b0 <ble_gatts_inc_access+0x2e>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   160c6:	2011      	movs	r0, #17
   160c8:	e7f2      	b.n	160b0 <ble_gatts_inc_access+0x2e>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   160ca:	2011      	movs	r0, #17
   160cc:	e7f0      	b.n	160b0 <ble_gatts_inc_access+0x2e>

000160ce <ble_gatts_val_access>:
{
   160ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   160d2:	4606      	mov	r6, r0
   160d4:	4688      	mov	r8, r1
   160d6:	4617      	mov	r7, r2
   160d8:	461c      	mov	r4, r3
   160da:	9d08      	ldr	r5, [sp, #32]
    switch (gatt_ctxt->op) {
   160dc:	781b      	ldrb	r3, [r3, #0]
   160de:	2b03      	cmp	r3, #3
   160e0:	d840      	bhi.n	16164 <ble_gatts_val_access+0x96>
   160e2:	e8df f003 	tbb	[pc, r3]
   160e6:	3302      	.short	0x3302
   160e8:	3302      	.short	0x3302
        if (offset == 0) {
   160ea:	b9f7      	cbnz	r7, 1612a <ble_gatts_val_access+0x5c>
            gatt_ctxt->om = *om;
   160ec:	682b      	ldr	r3, [r5, #0]
   160ee:	6063      	str	r3, [r4, #4]
            new_om = 0;
   160f0:	f04f 0900 	mov.w	r9, #0
        initial_len = OS_MBUF_PKTLEN(gatt_ctxt->om);
   160f4:	6863      	ldr	r3, [r4, #4]
   160f6:	f8b3 a010 	ldrh.w	sl, [r3, #16]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   160fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   160fc:	4622      	mov	r2, r4
   160fe:	4641      	mov	r1, r8
   16100:	4630      	mov	r0, r6
   16102:	9e09      	ldr	r6, [sp, #36]	; 0x24
   16104:	47b0      	blx	r6
        if (rc == 0) {
   16106:	4606      	mov	r6, r0
   16108:	b940      	cbnz	r0, 1611c <ble_gatts_val_access+0x4e>
            attr_len = OS_MBUF_PKTLEN(gatt_ctxt->om) - initial_len - offset;
   1610a:	6861      	ldr	r1, [r4, #4]
   1610c:	8a0b      	ldrh	r3, [r1, #16]
   1610e:	eba3 030a 	sub.w	r3, r3, sl
            if (attr_len >= 0) {
   16112:	1bdb      	subs	r3, r3, r7
   16114:	d418      	bmi.n	16148 <ble_gatts_val_access+0x7a>
                if (new_om) {
   16116:	f1b9 0f00 	cmp.w	r9, #0
   1611a:	d10f      	bne.n	1613c <ble_gatts_val_access+0x6e>
        if (new_om) {
   1611c:	f1b9 0f00 	cmp.w	r9, #0
   16120:	d01d      	beq.n	1615e <ble_gatts_val_access+0x90>
            os_mbuf_free_chain(gatt_ctxt->om);
   16122:	6860      	ldr	r0, [r4, #4]
   16124:	f7fa feda 	bl	10edc <os_mbuf_free_chain>
   16128:	e019      	b.n	1615e <ble_gatts_val_access+0x90>
            gatt_ctxt->om = os_msys_get_pkthdr(0, 0);
   1612a:	2100      	movs	r1, #0
   1612c:	4608      	mov	r0, r1
   1612e:	f7fb fbea 	bl	11906 <os_msys_get_pkthdr>
   16132:	6060      	str	r0, [r4, #4]
            if (gatt_ctxt->om == NULL) {
   16134:	b1c0      	cbz	r0, 16168 <ble_gatts_val_access+0x9a>
            new_om = 1;
   16136:	f04f 0901 	mov.w	r9, #1
   1613a:	e7db      	b.n	160f4 <ble_gatts_val_access+0x26>
                    os_mbuf_appendfrom(*om, gatt_ctxt->om, offset, attr_len);
   1613c:	b29b      	uxth	r3, r3
   1613e:	463a      	mov	r2, r7
   16140:	6828      	ldr	r0, [r5, #0]
   16142:	f7fa ffa9 	bl	11098 <os_mbuf_appendfrom>
   16146:	e7e9      	b.n	1611c <ble_gatts_val_access+0x4e>
                rc = BLE_ATT_ERR_INVALID_OFFSET;
   16148:	2607      	movs	r6, #7
   1614a:	e7e7      	b.n	1611c <ble_gatts_val_access+0x4e>
        gatt_ctxt->om = *om;
   1614c:	682b      	ldr	r3, [r5, #0]
   1614e:	6063      	str	r3, [r4, #4]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   16150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16152:	4622      	mov	r2, r4
   16154:	9e09      	ldr	r6, [sp, #36]	; 0x24
   16156:	47b0      	blx	r6
   16158:	4606      	mov	r6, r0
        *om = gatt_ctxt->om;
   1615a:	6863      	ldr	r3, [r4, #4]
   1615c:	602b      	str	r3, [r5, #0]
}
   1615e:	4630      	mov	r0, r6
   16160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BLE_ATT_ERR_UNLIKELY;
   16164:	260e      	movs	r6, #14
   16166:	e7fa      	b.n	1615e <ble_gatts_val_access+0x90>
                return BLE_ATT_ERR_INSUFFICIENT_RES;
   16168:	2611      	movs	r6, #17
   1616a:	e7f8      	b.n	1615e <ble_gatts_val_access+0x90>

0001616c <ble_gatts_chr_val_access>:
{
   1616c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1616e:	b089      	sub	sp, #36	; 0x24
   16170:	4605      	mov	r5, r0
   16172:	460e      	mov	r6, r1
   16174:	461f      	mov	r7, r3
   16176:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_chr_op(att_op);
   16178:	4610      	mov	r0, r2
   1617a:	f7ff fc6c 	bl	15a56 <ble_gatts_chr_op>
   1617e:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.chr = chr_def;
   16182:	9407      	str	r4, [sp, #28]
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   16184:	6863      	ldr	r3, [r4, #4]
   16186:	68a2      	ldr	r2, [r4, #8]
   16188:	9202      	str	r2, [sp, #8]
   1618a:	9301      	str	r3, [sp, #4]
   1618c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1618e:	9300      	str	r3, [sp, #0]
   16190:	ab05      	add	r3, sp, #20
   16192:	463a      	mov	r2, r7
   16194:	4631      	mov	r1, r6
   16196:	4628      	mov	r0, r5
   16198:	f7ff ff99 	bl	160ce <ble_gatts_val_access>
}
   1619c:	b009      	add	sp, #36	; 0x24
   1619e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000161a0 <ble_gatts_dsc_access>:
{
   161a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   161a2:	b089      	sub	sp, #36	; 0x24
   161a4:	4605      	mov	r5, r0
   161a6:	460e      	mov	r6, r1
   161a8:	461f      	mov	r7, r3
   161aa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_dsc_op(att_op);
   161ac:	4610      	mov	r0, r2
   161ae:	f7ff fc8d 	bl	15acc <ble_gatts_dsc_op>
   161b2:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.dsc = dsc_def;
   161b6:	9407      	str	r4, [sp, #28]
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   161b8:	68a3      	ldr	r3, [r4, #8]
   161ba:	68e2      	ldr	r2, [r4, #12]
   161bc:	9202      	str	r2, [sp, #8]
   161be:	9301      	str	r3, [sp, #4]
   161c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   161c2:	9300      	str	r3, [sp, #0]
   161c4:	ab05      	add	r3, sp, #20
   161c6:	463a      	mov	r2, r7
   161c8:	4631      	mov	r1, r6
   161ca:	4628      	mov	r0, r5
   161cc:	f7ff ff7f 	bl	160ce <ble_gatts_val_access>
}
   161d0:	b009      	add	sp, #36	; 0x24
   161d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000161d4 <ble_gatts_mutable>:
{
   161d4:	b508      	push	{r3, lr}
    if (ble_gap_adv_active() ||
   161d6:	f7fd fb9b 	bl	13910 <ble_gap_adv_active>
   161da:	b108      	cbz	r0, 161e0 <ble_gatts_mutable+0xc>
        return false;
   161dc:	2000      	movs	r0, #0
}
   161de:	bd08      	pop	{r3, pc}
        ble_gap_disc_active() ||
   161e0:	f7fd fc82 	bl	13ae8 <ble_gap_disc_active>
    if (ble_gap_adv_active() ||
   161e4:	b108      	cbz	r0, 161ea <ble_gatts_mutable+0x16>
        return false;
   161e6:	2000      	movs	r0, #0
   161e8:	e7f9      	b.n	161de <ble_gatts_mutable+0xa>
        ble_gap_conn_active()) {
   161ea:	f7fd fc95 	bl	13b18 <ble_gap_conn_active>
        ble_gap_disc_active() ||
   161ee:	b108      	cbz	r0, 161f4 <ble_gatts_mutable+0x20>
        return false;
   161f0:	2000      	movs	r0, #0
   161f2:	e7f4      	b.n	161de <ble_gatts_mutable+0xa>
    if (ble_hs_conn_first() != NULL) {
   161f4:	f001 f98a 	bl	1750c <ble_hs_conn_first>
   161f8:	b108      	cbz	r0, 161fe <ble_gatts_mutable+0x2a>
        return false;
   161fa:	2000      	movs	r0, #0
   161fc:	e7ef      	b.n	161de <ble_gatts_mutable+0xa>
    return true;
   161fe:	2001      	movs	r0, #1
   16200:	e7ed      	b.n	161de <ble_gatts_mutable+0xa>
	...

00016204 <ble_gatts_free_mem>:
{
   16204:	b538      	push	{r3, r4, r5, lr}
    free(ble_gatts_clt_cfg_mem);
   16206:	4c06      	ldr	r4, [pc, #24]	; (16220 <ble_gatts_free_mem+0x1c>)
   16208:	6820      	ldr	r0, [r4, #0]
   1620a:	f7fc f921 	bl	12450 <free>
    ble_gatts_clt_cfg_mem = NULL;
   1620e:	2500      	movs	r5, #0
   16210:	6025      	str	r5, [r4, #0]
    free(ble_gatts_svc_entries);
   16212:	4c04      	ldr	r4, [pc, #16]	; (16224 <ble_gatts_free_mem+0x20>)
   16214:	6820      	ldr	r0, [r4, #0]
   16216:	f7fc f91b 	bl	12450 <free>
    ble_gatts_svc_entries = NULL;
   1621a:	6025      	str	r5, [r4, #0]
}
   1621c:	bd38      	pop	{r3, r4, r5, pc}
   1621e:	bf00      	nop
   16220:	200026ac 	.word	0x200026ac
   16224:	200026e0 	.word	0x200026e0

00016228 <ble_gatts_free_svc_defs>:
{
   16228:	b510      	push	{r4, lr}
    free(ble_gatts_svc_defs);
   1622a:	4c04      	ldr	r4, [pc, #16]	; (1623c <ble_gatts_free_svc_defs+0x14>)
   1622c:	6820      	ldr	r0, [r4, #0]
   1622e:	f7fc f90f 	bl	12450 <free>
    ble_gatts_svc_defs = NULL;
   16232:	2300      	movs	r3, #0
   16234:	6023      	str	r3, [r4, #0]
    ble_gatts_num_svc_defs = 0;
   16236:	4a02      	ldr	r2, [pc, #8]	; (16240 <ble_gatts_free_svc_defs+0x18>)
   16238:	6013      	str	r3, [r2, #0]
}
   1623a:	bd10      	pop	{r4, pc}
   1623c:	200026dc 	.word	0x200026dc
   16240:	200026d4 	.word	0x200026d4

00016244 <ble_gatts_tx_notifications_one_chr>:
 * concurrent indication for a single peer, so this function will hold off on
 * sending such indications.
 */
static void
ble_gatts_tx_notifications_one_chr(uint16_t chr_val_handle)
{
   16244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16248:	4680      	mov	r8, r0
    int i;

    /* Determine if notifications / indications are enabled for this
     * characteristic.
     */
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   1624a:	4601      	mov	r1, r0
   1624c:	4b17      	ldr	r3, [pc, #92]	; (162ac <ble_gatts_tx_notifications_one_chr+0x68>)
   1624e:	6818      	ldr	r0, [r3, #0]
   16250:	f7ff fc4c 	bl	15aec <ble_gatts_clt_cfg_find_idx>
                                             chr_val_handle);
    if (clt_cfg_idx == -1) {
   16254:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16258:	d026      	beq.n	162a8 <ble_gatts_tx_notifications_one_chr+0x64>
   1625a:	4681      	mov	r9, r0
        return;
    }

    for (i = 0; ; i++) {
   1625c:	2500      	movs	r5, #0
   1625e:	e008      	b.n	16272 <ble_gatts_tx_notifications_one_chr+0x2e>
            /* Determine what type of command should get sent, if any. */
            att_op = ble_gatts_schedule_update(conn, clt_cfg);
            conn_handle = conn->bhc_handle;
        } else {
            /* Silence some spurious gcc warnings. */
            att_op = 0;
   16260:	2600      	movs	r6, #0
            conn_handle = BLE_HS_CONN_HANDLE_NONE;
   16262:	f64f 77ff 	movw	r7, #65535	; 0xffff
   16266:	e013      	b.n	16290 <ble_gatts_tx_notifications_one_chr+0x4c>
        switch (att_op) {
        case 0:
            break;

        case BLE_ATT_OP_NOTIFY_REQ:
            ble_gattc_notify(conn_handle, chr_val_handle);
   16268:	4641      	mov	r1, r8
   1626a:	4638      	mov	r0, r7
   1626c:	f7ff f9d2 	bl	15614 <ble_gattc_notify>
    for (i = 0; ; i++) {
   16270:	3501      	adds	r5, #1
        ble_hs_lock();
   16272:	f000 fb43 	bl	168fc <ble_hs_lock>
        conn = ble_hs_conn_find_by_idx(i);
   16276:	4628      	mov	r0, r5
   16278:	f001 f932 	bl	174e0 <ble_hs_conn_find_by_idx>
        if (conn != NULL) {
   1627c:	4604      	mov	r4, r0
   1627e:	2800      	cmp	r0, #0
   16280:	d0ee      	beq.n	16260 <ble_gatts_tx_notifications_one_chr+0x1c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   16282:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
            att_op = ble_gatts_schedule_update(conn, clt_cfg);
   16284:	eb01 0189 	add.w	r1, r1, r9, lsl #2
   16288:	f7ff fc74 	bl	15b74 <ble_gatts_schedule_update>
   1628c:	4606      	mov	r6, r0
            conn_handle = conn->bhc_handle;
   1628e:	88a7      	ldrh	r7, [r4, #4]
        ble_hs_unlock();
   16290:	f000 fb38 	bl	16904 <ble_hs_unlock>
        if (conn == NULL) {
   16294:	b144      	cbz	r4, 162a8 <ble_gatts_tx_notifications_one_chr+0x64>
        switch (att_op) {
   16296:	2e1b      	cmp	r6, #27
   16298:	d0e6      	beq.n	16268 <ble_gatts_tx_notifications_one_chr+0x24>
   1629a:	2e1d      	cmp	r6, #29
   1629c:	d1e8      	bne.n	16270 <ble_gatts_tx_notifications_one_chr+0x2c>
            break;

        case BLE_ATT_OP_INDICATE_REQ:
            ble_gattc_indicate(conn_handle, chr_val_handle);
   1629e:	4641      	mov	r1, r8
   162a0:	4638      	mov	r0, r7
   162a2:	f7ff fa0b 	bl	156bc <ble_gattc_indicate>
            break;
   162a6:	e7e3      	b.n	16270 <ble_gatts_tx_notifications_one_chr+0x2c>
        default:
            BLE_HS_DBG_ASSERT(0);
            break;
        }
    }
}
   162a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   162ac:	200026cc 	.word	0x200026cc

000162b0 <ble_gatts_register_svcs>:
{
   162b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   162b2:	b083      	sub	sp, #12
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   162b4:	2400      	movs	r4, #0
   162b6:	0123      	lsls	r3, r4, #4
   162b8:	18c7      	adds	r7, r0, r3
   162ba:	5cc3      	ldrb	r3, [r0, r3]
   162bc:	b19b      	cbz	r3, 162e6 <ble_gatts_register_svcs+0x36>
        idx = ble_gatts_num_svc_entries + i;
   162be:	4b16      	ldr	r3, [pc, #88]	; (16318 <ble_gatts_register_svcs+0x68>)
   162c0:	881b      	ldrh	r3, [r3, #0]
   162c2:	4423      	add	r3, r4
        if (idx >= ble_hs_max_services) {
   162c4:	4d15      	ldr	r5, [pc, #84]	; (1631c <ble_gatts_register_svcs+0x6c>)
   162c6:	882d      	ldrh	r5, [r5, #0]
   162c8:	429d      	cmp	r5, r3
   162ca:	dd21      	ble.n	16310 <ble_gatts_register_svcs+0x60>
        ble_gatts_svc_entries[idx].svc = svcs + i;
   162cc:	4d14      	ldr	r5, [pc, #80]	; (16320 <ble_gatts_register_svcs+0x70>)
   162ce:	682e      	ldr	r6, [r5, #0]
   162d0:	eb06 05c3 	add.w	r5, r6, r3, lsl #3
   162d4:	f846 7033 	str.w	r7, [r6, r3, lsl #3]
        ble_gatts_svc_entries[idx].handle = 0;
   162d8:	2300      	movs	r3, #0
   162da:	80ab      	strh	r3, [r5, #4]
        ble_gatts_svc_entries[idx].end_group_handle = 0xffff;
   162dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   162e0:	80eb      	strh	r3, [r5, #6]
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   162e2:	3401      	adds	r4, #1
   162e4:	e7e7      	b.n	162b6 <ble_gatts_register_svcs+0x6>
   162e6:	4617      	mov	r7, r2
   162e8:	460e      	mov	r6, r1
    ble_gatts_num_svc_entries += num_svcs;
   162ea:	4a0b      	ldr	r2, [pc, #44]	; (16318 <ble_gatts_register_svcs+0x68>)
   162ec:	8813      	ldrh	r3, [r2, #0]
   162ee:	4423      	add	r3, r4
   162f0:	8013      	strh	r3, [r2, #0]
    total_registered = 0;
   162f2:	2500      	movs	r5, #0
    while (total_registered < num_svcs) {
   162f4:	42a5      	cmp	r5, r4
   162f6:	da09      	bge.n	1630c <ble_gatts_register_svcs+0x5c>
        rc = ble_gatts_register_round(&cur_registered, cb, cb_arg);
   162f8:	463a      	mov	r2, r7
   162fa:	4631      	mov	r1, r6
   162fc:	a801      	add	r0, sp, #4
   162fe:	f7ff fe4b 	bl	15f98 <ble_gatts_register_round>
        if (rc != 0) {
   16302:	4603      	mov	r3, r0
   16304:	b928      	cbnz	r0, 16312 <ble_gatts_register_svcs+0x62>
        total_registered += cur_registered;
   16306:	9b01      	ldr	r3, [sp, #4]
   16308:	441d      	add	r5, r3
   1630a:	e7f3      	b.n	162f4 <ble_gatts_register_svcs+0x44>
    return 0;
   1630c:	2300      	movs	r3, #0
   1630e:	e000      	b.n	16312 <ble_gatts_register_svcs+0x62>
            return BLE_HS_ENOMEM;
   16310:	2306      	movs	r3, #6
}
   16312:	4618      	mov	r0, r3
   16314:	b003      	add	sp, #12
   16316:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16318:	200026d8 	.word	0x200026d8
   1631c:	20003d6a 	.word	0x20003d6a
   16320:	200026e0 	.word	0x200026e0

00016324 <ble_gatts_connection_broken>:
{
   16324:	b5f0      	push	{r4, r5, r6, r7, lr}
   16326:	b083      	sub	sp, #12
   16328:	4606      	mov	r6, r0
    ble_hs_lock();
   1632a:	f000 fae7 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1632e:	4630      	mov	r0, r6
   16330:	f001 f8ba 	bl	174a8 <ble_hs_conn_find>
    if (conn != NULL) {
   16334:	4604      	mov	r4, r0
   16336:	b120      	cbz	r0, 16342 <ble_gatts_connection_broken+0x1e>
        clt_cfgs = conn->bhc_gatt_svr.clt_cfgs;
   16338:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
        num_clt_cfgs = conn->bhc_gatt_svr.num_clt_cfgs;
   1633a:	6d07      	ldr	r7, [r0, #80]	; 0x50
        conn->bhc_gatt_svr.clt_cfgs = NULL;
   1633c:	2300      	movs	r3, #0
   1633e:	64c3      	str	r3, [r0, #76]	; 0x4c
        conn->bhc_gatt_svr.num_clt_cfgs = 0;
   16340:	6503      	str	r3, [r0, #80]	; 0x50
    ble_hs_unlock();
   16342:	f000 fadf 	bl	16904 <ble_hs_unlock>
    if (conn == NULL) {
   16346:	b1bc      	cbz	r4, 16378 <ble_gatts_connection_broken+0x54>
    ble_gatts_indicate_fail_notconn(conn_handle);
   16348:	4630      	mov	r0, r6
   1634a:	f7ff f968 	bl	1561e <ble_gatts_indicate_fail_notconn>
    if (clt_cfgs != NULL) {
   1634e:	b19d      	cbz	r5, 16378 <ble_gatts_connection_broken+0x54>
        for (i = 0; i < num_clt_cfgs; i++) {
   16350:	2400      	movs	r4, #0
   16352:	e00b      	b.n	1636c <ble_gatts_connection_broken+0x48>
            ble_gatts_subscribe_event(conn_handle, clt_cfgs[i].chr_val_handle,
   16354:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   16358:	789b      	ldrb	r3, [r3, #2]
   1635a:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
   1635e:	2200      	movs	r2, #0
   16360:	9200      	str	r2, [sp, #0]
   16362:	2202      	movs	r2, #2
   16364:	4630      	mov	r0, r6
   16366:	f7ff fc88 	bl	15c7a <ble_gatts_subscribe_event>
        for (i = 0; i < num_clt_cfgs; i++) {
   1636a:	3401      	adds	r4, #1
   1636c:	42a7      	cmp	r7, r4
   1636e:	dcf1      	bgt.n	16354 <ble_gatts_connection_broken+0x30>
        rc = os_memblock_put(&ble_gatts_clt_cfg_pool, clt_cfgs);
   16370:	4629      	mov	r1, r5
   16372:	4802      	ldr	r0, [pc, #8]	; (1637c <ble_gatts_connection_broken+0x58>)
   16374:	f7fb fa2f 	bl	117d6 <os_memblock_put>
}
   16378:	b003      	add	sp, #12
   1637a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1637c:	200026b0 	.word	0x200026b0

00016380 <ble_gatts_start>:
{
   16380:	b570      	push	{r4, r5, r6, lr}
   16382:	b084      	sub	sp, #16
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   16384:	4b43      	ldr	r3, [pc, #268]	; (16494 <ble_gatts_start+0x114>)
   16386:	681b      	ldr	r3, [r3, #0]
   16388:	9303      	str	r3, [sp, #12]
    ble_hs_lock();
   1638a:	f000 fab7 	bl	168fc <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   1638e:	f7ff ff21 	bl	161d4 <ble_gatts_mutable>
   16392:	2800      	cmp	r0, #0
   16394:	d071      	beq.n	1647a <ble_gatts_start+0xfa>
    ble_gatts_free_mem();
   16396:	f7ff ff35 	bl	16204 <ble_gatts_free_mem>
    rc = ble_att_svr_start();
   1639a:	f007 f83f 	bl	1d41c <ble_att_svr_start>
    if (rc != 0) {
   1639e:	4604      	mov	r4, r0
   163a0:	2800      	cmp	r0, #0
   163a2:	d168      	bne.n	16476 <ble_gatts_start+0xf6>
    if (ble_hs_max_client_configs > 0) {
   163a4:	4b3c      	ldr	r3, [pc, #240]	; (16498 <ble_gatts_start+0x118>)
   163a6:	8818      	ldrh	r0, [r3, #0]
   163a8:	b9b0      	cbnz	r0, 163d8 <ble_gatts_start+0x58>
    if (ble_hs_max_services > 0) {
   163aa:	4b3c      	ldr	r3, [pc, #240]	; (1649c <ble_gatts_start+0x11c>)
   163ac:	8818      	ldrh	r0, [r3, #0]
   163ae:	b9e0      	cbnz	r0, 163ea <ble_gatts_start+0x6a>
    ble_gatts_num_svc_entries = 0;
   163b0:	4b3b      	ldr	r3, [pc, #236]	; (164a0 <ble_gatts_start+0x120>)
   163b2:	2200      	movs	r2, #0
   163b4:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   163b6:	4b3b      	ldr	r3, [pc, #236]	; (164a4 <ble_gatts_start+0x124>)
   163b8:	681b      	ldr	r3, [r3, #0]
   163ba:	42a3      	cmp	r3, r4
   163bc:	dd1e      	ble.n	163fc <ble_gatts_start+0x7c>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   163be:	4b3a      	ldr	r3, [pc, #232]	; (164a8 <ble_gatts_start+0x128>)
   163c0:	6818      	ldr	r0, [r3, #0]
   163c2:	4b3a      	ldr	r3, [pc, #232]	; (164ac <ble_gatts_start+0x12c>)
   163c4:	685a      	ldr	r2, [r3, #4]
   163c6:	6819      	ldr	r1, [r3, #0]
   163c8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   163cc:	f7ff ff70 	bl	162b0 <ble_gatts_register_svcs>
        if (rc != 0) {
   163d0:	2800      	cmp	r0, #0
   163d2:	d14f      	bne.n	16474 <ble_gatts_start+0xf4>
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   163d4:	3401      	adds	r4, #1
   163d6:	e7ee      	b.n	163b6 <ble_gatts_start+0x36>
        ble_gatts_clt_cfg_mem = malloc(
   163d8:	0080      	lsls	r0, r0, #2
   163da:	f7fc f803 	bl	123e4 <malloc>
   163de:	4b34      	ldr	r3, [pc, #208]	; (164b0 <ble_gatts_start+0x130>)
   163e0:	6018      	str	r0, [r3, #0]
        if (ble_gatts_clt_cfg_mem == NULL) {
   163e2:	2800      	cmp	r0, #0
   163e4:	d1e1      	bne.n	163aa <ble_gatts_start+0x2a>
            rc = BLE_HS_ENOMEM;
   163e6:	2406      	movs	r4, #6
   163e8:	e048      	b.n	1647c <ble_gatts_start+0xfc>
            malloc(ble_hs_max_services * sizeof *ble_gatts_svc_entries);
   163ea:	00c0      	lsls	r0, r0, #3
   163ec:	f7fb fffa 	bl	123e4 <malloc>
        ble_gatts_svc_entries =
   163f0:	4b30      	ldr	r3, [pc, #192]	; (164b4 <ble_gatts_start+0x134>)
   163f2:	6018      	str	r0, [r3, #0]
        if (ble_gatts_svc_entries == NULL) {
   163f4:	2800      	cmp	r0, #0
   163f6:	d1db      	bne.n	163b0 <ble_gatts_start+0x30>
            rc = BLE_HS_ENOMEM;
   163f8:	2406      	movs	r4, #6
   163fa:	e03f      	b.n	1647c <ble_gatts_start+0xfc>
    ble_gatts_free_svc_defs();
   163fc:	f7ff ff14 	bl	16228 <ble_gatts_free_svc_defs>
    if (ble_gatts_num_cfgable_chrs == 0) {
   16400:	4b2d      	ldr	r3, [pc, #180]	; (164b8 <ble_gatts_start+0x138>)
   16402:	681c      	ldr	r4, [r3, #0]
   16404:	2c00      	cmp	r4, #0
   16406:	d03d      	beq.n	16484 <ble_gatts_start+0x104>
    num_elems = ble_hs_max_client_configs / ble_gatts_num_cfgable_chrs;
   16408:	4b23      	ldr	r3, [pc, #140]	; (16498 <ble_gatts_start+0x118>)
   1640a:	881b      	ldrh	r3, [r3, #0]
   1640c:	fb93 f4f4 	sdiv	r4, r3, r4
                         ble_gatts_clt_cfg_size(), ble_gatts_clt_cfg_mem,
   16410:	f7ff fbaa 	bl	15b68 <ble_gatts_clt_cfg_size>
    rc = os_mempool_init(&ble_gatts_clt_cfg_pool, num_elems,
   16414:	4b26      	ldr	r3, [pc, #152]	; (164b0 <ble_gatts_start+0x130>)
   16416:	681b      	ldr	r3, [r3, #0]
   16418:	4a28      	ldr	r2, [pc, #160]	; (164bc <ble_gatts_start+0x13c>)
   1641a:	9200      	str	r2, [sp, #0]
   1641c:	4602      	mov	r2, r0
   1641e:	b2a1      	uxth	r1, r4
   16420:	4827      	ldr	r0, [pc, #156]	; (164c0 <ble_gatts_start+0x140>)
   16422:	f7fb f96b 	bl	116fc <os_mempool_init>
   16426:	4606      	mov	r6, r0
   16428:	4604      	mov	r4, r0
    if (rc != 0) {
   1642a:	b108      	cbz	r0, 16430 <ble_gatts_start+0xb0>
        rc = BLE_HS_EOS;
   1642c:	240b      	movs	r4, #11
   1642e:	e025      	b.n	1647c <ble_gatts_start+0xfc>
    ble_gatts_clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   16430:	4823      	ldr	r0, [pc, #140]	; (164c0 <ble_gatts_start+0x140>)
   16432:	f7fb f9a8 	bl	11786 <os_memblock_get>
   16436:	4b23      	ldr	r3, [pc, #140]	; (164c4 <ble_gatts_start+0x144>)
   16438:	6018      	str	r0, [r3, #0]
    if (ble_gatts_clt_cfgs == NULL) {
   1643a:	b340      	cbz	r0, 1648e <ble_gatts_start+0x10e>
    ha = NULL;
   1643c:	2500      	movs	r5, #0
    while ((ha = ble_att_svr_find_by_uuid(ha, &uuid.u, 0xffff)) != NULL) {
   1643e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16442:	a903      	add	r1, sp, #12
   16444:	4628      	mov	r0, r5
   16446:	f006 fae3 	bl	1ca10 <ble_att_svr_find_by_uuid>
   1644a:	4605      	mov	r5, r0
   1644c:	b198      	cbz	r0, 16476 <ble_gatts_start+0xf6>
        allowed_flags = ble_gatts_chr_clt_cfg_allowed(chr);
   1644e:	6928      	ldr	r0, [r5, #16]
   16450:	f7ff fa94 	bl	1597c <ble_gatts_chr_clt_cfg_allowed>
        if (allowed_flags != 0) {
   16454:	4601      	mov	r1, r0
   16456:	2800      	cmp	r0, #0
   16458:	d0f1      	beq.n	1643e <ble_gatts_start+0xbe>
            ble_gatts_clt_cfgs[idx].chr_val_handle = ha->ha_handle_id + 1;
   1645a:	896b      	ldrh	r3, [r5, #10]
   1645c:	4a19      	ldr	r2, [pc, #100]	; (164c4 <ble_gatts_start+0x144>)
   1645e:	6810      	ldr	r0, [r2, #0]
   16460:	eb00 0286 	add.w	r2, r0, r6, lsl #2
   16464:	3301      	adds	r3, #1
   16466:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
            ble_gatts_clt_cfgs[idx].allowed = allowed_flags;
   1646a:	70d1      	strb	r1, [r2, #3]
            ble_gatts_clt_cfgs[idx].flags = 0;
   1646c:	2300      	movs	r3, #0
   1646e:	7093      	strb	r3, [r2, #2]
            idx++;
   16470:	3601      	adds	r6, #1
   16472:	e7e4      	b.n	1643e <ble_gatts_start+0xbe>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   16474:	4604      	mov	r4, r0
    if (rc != 0) {
   16476:	b90c      	cbnz	r4, 1647c <ble_gatts_start+0xfc>
   16478:	e004      	b.n	16484 <ble_gatts_start+0x104>
        rc = BLE_HS_EBUSY;
   1647a:	240f      	movs	r4, #15
        ble_gatts_free_mem();
   1647c:	f7ff fec2 	bl	16204 <ble_gatts_free_mem>
        ble_gatts_free_svc_defs();
   16480:	f7ff fed2 	bl	16228 <ble_gatts_free_svc_defs>
    ble_hs_unlock();
   16484:	f000 fa3e 	bl	16904 <ble_hs_unlock>
}
   16488:	4620      	mov	r0, r4
   1648a:	b004      	add	sp, #16
   1648c:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOMEM;
   1648e:	2406      	movs	r4, #6
   16490:	e7f4      	b.n	1647c <ble_gatts_start+0xfc>
   16492:	bf00      	nop
   16494:	0002c3b4 	.word	0x0002c3b4
   16498:	20003d70 	.word	0x20003d70
   1649c:	20003d6a 	.word	0x20003d6a
   164a0:	200026d8 	.word	0x200026d8
   164a4:	200026d4 	.word	0x200026d4
   164a8:	200026dc 	.word	0x200026dc
   164ac:	200001dc 	.word	0x200001dc
   164b0:	200026ac 	.word	0x200026ac
   164b4:	200026e0 	.word	0x200026e0
   164b8:	200026d0 	.word	0x200026d0
   164bc:	0002c3b8 	.word	0x0002c3b8
   164c0:	200026b0 	.word	0x200026b0
   164c4:	200026cc 	.word	0x200026cc

000164c8 <ble_gatts_conn_can_alloc>:
    return ble_gatts_num_cfgable_chrs == 0 ||
   164c8:	4b05      	ldr	r3, [pc, #20]	; (164e0 <ble_gatts_conn_can_alloc+0x18>)
   164ca:	681b      	ldr	r3, [r3, #0]
   164cc:	b133      	cbz	r3, 164dc <ble_gatts_conn_can_alloc+0x14>
           ble_gatts_clt_cfg_pool.mp_num_free > 0;
   164ce:	4b05      	ldr	r3, [pc, #20]	; (164e4 <ble_gatts_conn_can_alloc+0x1c>)
   164d0:	88db      	ldrh	r3, [r3, #6]
    return ble_gatts_num_cfgable_chrs == 0 ||
   164d2:	b90b      	cbnz	r3, 164d8 <ble_gatts_conn_can_alloc+0x10>
   164d4:	2000      	movs	r0, #0
}
   164d6:	4770      	bx	lr
    return ble_gatts_num_cfgable_chrs == 0 ||
   164d8:	2001      	movs	r0, #1
   164da:	4770      	bx	lr
   164dc:	2001      	movs	r0, #1
   164de:	4770      	bx	lr
   164e0:	200026d0 	.word	0x200026d0
   164e4:	200026b0 	.word	0x200026b0

000164e8 <ble_gatts_conn_init>:
    if (ble_gatts_num_cfgable_chrs > 0) {
   164e8:	4b10      	ldr	r3, [pc, #64]	; (1652c <ble_gatts_conn_init+0x44>)
   164ea:	681b      	ldr	r3, [r3, #0]
   164ec:	2b00      	cmp	r3, #0
   164ee:	dc04      	bgt.n	164fa <ble_gatts_conn_init+0x12>
        gatts_conn->clt_cfgs = NULL;
   164f0:	2300      	movs	r3, #0
   164f2:	6003      	str	r3, [r0, #0]
        gatts_conn->num_clt_cfgs = 0;
   164f4:	6043      	str	r3, [r0, #4]
    return 0;
   164f6:	4618      	mov	r0, r3
}
   164f8:	4770      	bx	lr
{
   164fa:	b570      	push	{r4, r5, r6, lr}
   164fc:	4604      	mov	r4, r0
        gatts_conn->clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   164fe:	480c      	ldr	r0, [pc, #48]	; (16530 <ble_gatts_conn_init+0x48>)
   16500:	f7fb f941 	bl	11786 <os_memblock_get>
   16504:	4605      	mov	r5, r0
   16506:	6020      	str	r0, [r4, #0]
        if (gatts_conn->clt_cfgs == NULL) {
   16508:	b168      	cbz	r0, 16526 <ble_gatts_conn_init+0x3e>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   1650a:	4b0a      	ldr	r3, [pc, #40]	; (16534 <ble_gatts_conn_init+0x4c>)
   1650c:	681e      	ldr	r6, [r3, #0]
               ble_gatts_clt_cfg_size());
   1650e:	f7ff fb2b 	bl	15b68 <ble_gatts_clt_cfg_size>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   16512:	4602      	mov	r2, r0
   16514:	4631      	mov	r1, r6
   16516:	4628      	mov	r0, r5
   16518:	f7fb ffd4 	bl	124c4 <memcpy>
        gatts_conn->num_clt_cfgs = ble_gatts_num_cfgable_chrs;
   1651c:	4b03      	ldr	r3, [pc, #12]	; (1652c <ble_gatts_conn_init+0x44>)
   1651e:	681b      	ldr	r3, [r3, #0]
   16520:	6063      	str	r3, [r4, #4]
    return 0;
   16522:	2000      	movs	r0, #0
}
   16524:	bd70      	pop	{r4, r5, r6, pc}
            return BLE_HS_ENOMEM;
   16526:	2006      	movs	r0, #6
   16528:	e7fc      	b.n	16524 <ble_gatts_conn_init+0x3c>
   1652a:	bf00      	nop
   1652c:	200026d0 	.word	0x200026d0
   16530:	200026b0 	.word	0x200026b0
   16534:	200026cc 	.word	0x200026cc

00016538 <ble_gatts_send_next_indicate>:
{
   16538:	b570      	push	{r4, r5, r6, lr}
   1653a:	4605      	mov	r5, r0
    ble_hs_lock();
   1653c:	f000 f9de 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   16540:	4628      	mov	r0, r5
   16542:	f000 ffb1 	bl	174a8 <ble_hs_conn_find>
    if (conn != NULL) {
   16546:	4604      	mov	r4, r0
   16548:	b160      	cbz	r0, 16564 <ble_gatts_send_next_indicate+0x2c>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   1654a:	2200      	movs	r2, #0
   1654c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1654e:	4293      	cmp	r3, r2
   16550:	dd0f      	ble.n	16572 <ble_gatts_send_next_indicate+0x3a>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + i;
   16552:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   16554:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED) {
   16558:	7899      	ldrb	r1, [r3, #2]
   1655a:	f011 0f80 	tst.w	r1, #128	; 0x80
   1655e:	d103      	bne.n	16568 <ble_gatts_send_next_indicate+0x30>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   16560:	3201      	adds	r2, #1
   16562:	e7f3      	b.n	1654c <ble_gatts_send_next_indicate+0x14>
    chr_val_handle = 0;
   16564:	2600      	movs	r6, #0
   16566:	e005      	b.n	16574 <ble_gatts_send_next_indicate+0x3c>
                chr_val_handle = clt_cfg->chr_val_handle;
   16568:	881e      	ldrh	r6, [r3, #0]
                clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   1656a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1656e:	7099      	strb	r1, [r3, #2]
                break;
   16570:	e000      	b.n	16574 <ble_gatts_send_next_indicate+0x3c>
    chr_val_handle = 0;
   16572:	2600      	movs	r6, #0
    ble_hs_unlock();
   16574:	f000 f9c6 	bl	16904 <ble_hs_unlock>
    if (conn == NULL) {
   16578:	b12c      	cbz	r4, 16586 <ble_gatts_send_next_indicate+0x4e>
    if (chr_val_handle == 0) {
   1657a:	b136      	cbz	r6, 1658a <ble_gatts_send_next_indicate+0x52>
    rc = ble_gattc_indicate(conn_handle, chr_val_handle);
   1657c:	4631      	mov	r1, r6
   1657e:	4628      	mov	r0, r5
   16580:	f7ff f89c 	bl	156bc <ble_gattc_indicate>
}
   16584:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOTCONN;
   16586:	2007      	movs	r0, #7
   16588:	e7fc      	b.n	16584 <ble_gatts_send_next_indicate+0x4c>
        return BLE_HS_ENOENT;
   1658a:	2005      	movs	r0, #5
   1658c:	e7fa      	b.n	16584 <ble_gatts_send_next_indicate+0x4c>
	...

00016590 <ble_gatts_rx_indicate_ack>:
{
   16590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16594:	b084      	sub	sp, #16
   16596:	4680      	mov	r8, r0
   16598:	460e      	mov	r6, r1
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   1659a:	4b2a      	ldr	r3, [pc, #168]	; (16644 <ble_gatts_rx_indicate_ack+0xb4>)
   1659c:	681c      	ldr	r4, [r3, #0]
   1659e:	4620      	mov	r0, r4
   165a0:	f7ff faa4 	bl	15aec <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   165a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   165a8:	d045      	beq.n	16636 <ble_gatts_rx_indicate_ack+0xa6>
    clt_cfg = ble_gatts_clt_cfgs + clt_cfg_idx;
   165aa:	0085      	lsls	r5, r0, #2
   165ac:	442c      	add	r4, r5
    if (!(clt_cfg->allowed & BLE_GATTS_CLT_CFG_F_INDICATE)) {
   165ae:	78e3      	ldrb	r3, [r4, #3]
   165b0:	f013 0f02 	tst.w	r3, #2
   165b4:	d041      	beq.n	1663a <ble_gatts_rx_indicate_ack+0xaa>
    ble_hs_lock();
   165b6:	f000 f9a1 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   165ba:	4640      	mov	r0, r8
   165bc:	f000 ff74 	bl	174a8 <ble_hs_conn_find>
    if (conn->bhc_gatt_svr.indicate_val_handle == chr_val_handle) {
   165c0:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   165c4:	42b3      	cmp	r3, r6
   165c6:	d006      	beq.n	165d6 <ble_gatts_rx_indicate_ack+0x46>
        rc = BLE_HS_ENOENT;
   165c8:	2405      	movs	r4, #5
    ble_hs_unlock();
   165ca:	f000 f99b 	bl	16904 <ble_hs_unlock>
    if (rc != 0) {
   165ce:	bbac      	cbnz	r4, 1663c <ble_gatts_rx_indicate_ack+0xac>
    if (persist) {
   165d0:	bb6f      	cbnz	r7, 1662e <ble_gatts_rx_indicate_ack+0x9e>
    return 0;
   165d2:	463c      	mov	r4, r7
   165d4:	e032      	b.n	1663c <ble_gatts_rx_indicate_ack+0xac>
        conn->bhc_gatt_svr.indicate_val_handle = 0;
   165d6:	2300      	movs	r3, #0
   165d8:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   165dc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   165de:	441d      	add	r5, r3
        persist = conn->bhc_sec_state.bonded &&
   165e0:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
   165e4:	f013 0f04 	tst.w	r3, #4
   165e8:	d01b      	beq.n	16622 <ble_gatts_rx_indicate_ack+0x92>
                  !(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED);
   165ea:	f995 3002 	ldrsb.w	r3, [r5, #2]
        persist = conn->bhc_sec_state.bonded &&
   165ee:	2b00      	cmp	r3, #0
   165f0:	db1a      	blt.n	16628 <ble_gatts_rx_indicate_ack+0x98>
            cccd_value.peer_addr = conn->bhc_peer_addr;
   165f2:	4603      	mov	r3, r0
   165f4:	f853 0f07 	ldr.w	r0, [r3, #7]!
   165f8:	9000      	str	r0, [sp, #0]
   165fa:	889a      	ldrh	r2, [r3, #4]
   165fc:	799b      	ldrb	r3, [r3, #6]
   165fe:	f8ad 2004 	strh.w	r2, [sp, #4]
   16602:	f88d 3006 	strb.w	r3, [sp, #6]
            cccd_value.chr_val_handle = chr_val_handle;
   16606:	f8ad 6008 	strh.w	r6, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   1660a:	78ab      	ldrb	r3, [r5, #2]
   1660c:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   16610:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16614:	f36f 0300 	bfc	r3, #0, #1
   16618:	f88d 300c 	strb.w	r3, [sp, #12]
        rc = 0;
   1661c:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   1661e:	2701      	movs	r7, #1
   16620:	e7d3      	b.n	165ca <ble_gatts_rx_indicate_ack+0x3a>
        rc = 0;
   16622:	2400      	movs	r4, #0
   16624:	4627      	mov	r7, r4
   16626:	e7d0      	b.n	165ca <ble_gatts_rx_indicate_ack+0x3a>
   16628:	2400      	movs	r4, #0
   1662a:	4627      	mov	r7, r4
   1662c:	e7cd      	b.n	165ca <ble_gatts_rx_indicate_ack+0x3a>
        rc = ble_store_write_cccd(&cccd_value);
   1662e:	4668      	mov	r0, sp
   16630:	f004 ff09 	bl	1b446 <ble_store_write_cccd>
   16634:	e002      	b.n	1663c <ble_gatts_rx_indicate_ack+0xac>
        return BLE_HS_ENOENT;
   16636:	2405      	movs	r4, #5
   16638:	e000      	b.n	1663c <ble_gatts_rx_indicate_ack+0xac>
        return BLE_HS_ENOENT;
   1663a:	2405      	movs	r4, #5
}
   1663c:	4620      	mov	r0, r4
   1663e:	b004      	add	sp, #16
   16640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16644:	200026cc 	.word	0x200026cc

00016648 <ble_gatts_tx_notifications>:
 * not allow more than one concurrent indication for a single peer, so this
 * function will hold off on sending such indications.
 */
void
ble_gatts_tx_notifications(void)
{
   16648:	b510      	push	{r4, lr}
    uint16_t chr_val_handle;
    int i;

    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   1664a:	2400      	movs	r4, #0
   1664c:	e006      	b.n	1665c <ble_gatts_tx_notifications+0x14>
        chr_val_handle = ble_gatts_clt_cfgs[i].chr_val_handle;
   1664e:	4b06      	ldr	r3, [pc, #24]	; (16668 <ble_gatts_tx_notifications+0x20>)
   16650:	681b      	ldr	r3, [r3, #0]
        ble_gatts_tx_notifications_one_chr(chr_val_handle);
   16652:	f833 0024 	ldrh.w	r0, [r3, r4, lsl #2]
   16656:	f7ff fdf5 	bl	16244 <ble_gatts_tx_notifications_one_chr>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   1665a:	3401      	adds	r4, #1
   1665c:	4b03      	ldr	r3, [pc, #12]	; (1666c <ble_gatts_tx_notifications+0x24>)
   1665e:	681b      	ldr	r3, [r3, #0]
   16660:	42a3      	cmp	r3, r4
   16662:	dcf4      	bgt.n	1664e <ble_gatts_tx_notifications+0x6>
    }
}
   16664:	bd10      	pop	{r4, pc}
   16666:	bf00      	nop
   16668:	200026cc 	.word	0x200026cc
   1666c:	200026d0 	.word	0x200026d0

00016670 <ble_gatts_bonding_established>:

void
ble_gatts_bonding_established(uint16_t conn_handle)
{
   16670:	b530      	push	{r4, r5, lr}
   16672:	b085      	sub	sp, #20
   16674:	4604      	mov	r4, r0
    struct ble_gatts_clt_cfg *clt_cfg;
    struct ble_gatts_conn *gatt_srv;
    struct ble_hs_conn *conn;
    int i;

    ble_hs_lock();
   16676:	f000 f941 	bl	168fc <ble_hs_lock>

    conn = ble_hs_conn_find(conn_handle);
   1667a:	4620      	mov	r0, r4
   1667c:	f000 ff14 	bl	174a8 <ble_hs_conn_find>
   16680:	4605      	mov	r5, r0
    BLE_HS_DBG_ASSERT(conn != NULL);
    BLE_HS_DBG_ASSERT(conn->bhc_sec_state.bonded);

    cccd_value.peer_addr = conn->bhc_peer_addr;
   16682:	4603      	mov	r3, r0
   16684:	f853 0f07 	ldr.w	r0, [r3, #7]!
   16688:	9000      	str	r0, [sp, #0]
   1668a:	889a      	ldrh	r2, [r3, #4]
   1668c:	799b      	ldrb	r3, [r3, #6]
   1668e:	f8ad 2004 	strh.w	r2, [sp, #4]
   16692:	f88d 3006 	strb.w	r3, [sp, #6]
    gatt_srv = &conn->bhc_gatt_svr;

    for (i = 0; i < gatt_srv->num_clt_cfgs; ++i) {
   16696:	2400      	movs	r4, #0
   16698:	e000      	b.n	1669c <ble_gatts_bonding_established+0x2c>
   1669a:	3401      	adds	r4, #1
   1669c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1669e:	42a3      	cmp	r3, r4
   166a0:	dd16      	ble.n	166d0 <ble_gatts_bonding_established+0x60>
        clt_cfg = (gatt_srv->clt_cfgs + i);
   166a2:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   166a4:	00a3      	lsls	r3, r4, #2
        if (clt_cfg == NULL) {
   166a6:	18d1      	adds	r1, r2, r3
   166a8:	d0f7      	beq.n	1669a <ble_gatts_bonding_established+0x2a>
            continue;
        }

        if (clt_cfg->flags != 0) {
   166aa:	7888      	ldrb	r0, [r1, #2]
   166ac:	2800      	cmp	r0, #0
   166ae:	d0f4      	beq.n	1669a <ble_gatts_bonding_established+0x2a>
            cccd_value.chr_val_handle = clt_cfg->chr_val_handle;
   166b0:	5ad3      	ldrh	r3, [r2, r3]
   166b2:	f8ad 3008 	strh.w	r3, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   166b6:	788b      	ldrb	r3, [r1, #2]
   166b8:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   166bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   166c0:	f36f 0300 	bfc	r3, #0, #1
   166c4:	f88d 300c 	strb.w	r3, [sp, #12]
            ble_store_write_cccd(&cccd_value);
   166c8:	4668      	mov	r0, sp
   166ca:	f004 febc 	bl	1b446 <ble_store_write_cccd>
   166ce:	e7e4      	b.n	1669a <ble_gatts_bonding_established+0x2a>
        }
    }

    ble_hs_unlock();
   166d0:	f000 f918 	bl	16904 <ble_hs_unlock>
}
   166d4:	b005      	add	sp, #20
   166d6:	bd30      	pop	{r4, r5, pc}

000166d8 <ble_gatts_bonding_restored>:
 *     o Sends up to one pending indication to the connected peer; schedules
 *       any remaining pending indications.
 */
void
ble_gatts_bonding_restored(uint16_t conn_handle)
{
   166d8:	b530      	push	{r4, r5, lr}
   166da:	b08b      	sub	sp, #44	; 0x2c
   166dc:	4604      	mov	r4, r0
    struct ble_gatts_clt_cfg *clt_cfg;
    struct ble_hs_conn *conn;
    uint8_t att_op;
    int rc;

    ble_hs_lock();
   166de:	f000 f90d 	bl	168fc <ble_hs_lock>

    conn = ble_hs_conn_find(conn_handle);
   166e2:	4620      	mov	r0, r4
   166e4:	f000 fee0 	bl	174a8 <ble_hs_conn_find>
    BLE_HS_DBG_ASSERT(conn != NULL);
    BLE_HS_DBG_ASSERT(conn->bhc_sec_state.bonded);

    cccd_key.peer_addr = conn->bhc_peer_addr;
   166e8:	4603      	mov	r3, r0
   166ea:	f853 0f07 	ldr.w	r0, [r3, #7]!
   166ee:	9003      	str	r0, [sp, #12]
   166f0:	889a      	ldrh	r2, [r3, #4]
   166f2:	799b      	ldrb	r3, [r3, #6]
   166f4:	f8ad 2010 	strh.w	r2, [sp, #16]
   166f8:	f88d 3012 	strb.w	r3, [sp, #18]
    cccd_key.chr_val_handle = 0;
   166fc:	2300      	movs	r3, #0
   166fe:	f8ad 3014 	strh.w	r3, [sp, #20]
    cccd_key.idx = 0;
   16702:	f88d 3016 	strb.w	r3, [sp, #22]

    ble_hs_unlock();
   16706:	f000 f8fd 	bl	16904 <ble_hs_unlock>
   1670a:	e014      	b.n	16736 <ble_gatts_bonding_restored+0x5e>
            if (cccd_value.value_changed) {
                /* The characteristic's value changed while the device was
                 * disconnected or unbonded.  Schedule the notification or
                 * indication now.
                 */
                clt_cfg->flags |= BLE_GATTS_CLT_CFG_F_MODIFIED;
   1670c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16710:	7083      	strb	r3, [r0, #2]
                att_op = ble_gatts_schedule_update(conn, clt_cfg);
   16712:	4628      	mov	r0, r5
   16714:	f7ff fa2e 	bl	15b74 <ble_gatts_schedule_update>
   16718:	4605      	mov	r5, r0
   1671a:	e028      	b.n	1676e <ble_gatts_bonding_restored+0x96>
        att_op = 0;
   1671c:	2500      	movs	r5, #0
   1671e:	e026      	b.n	1676e <ble_gatts_bonding_restored+0x96>
        switch (att_op) {
        case 0:
            break;

        case BLE_ATT_OP_NOTIFY_REQ:
            rc = ble_gattc_notify(conn_handle, cccd_value.chr_val_handle);
   16720:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   16724:	4620      	mov	r0, r4
   16726:	f7fe ff75 	bl	15614 <ble_gattc_notify>
            if (rc == 0) {
   1672a:	b3b0      	cbz	r0, 1679a <ble_gatts_bonding_restored+0xc2>
        default:
            BLE_HS_DBG_ASSERT(0);
            break;
        }

        cccd_key.idx++;
   1672c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   16730:	3301      	adds	r3, #1
   16732:	f88d 3016 	strb.w	r3, [sp, #22]
        rc = ble_store_read_cccd(&cccd_key, &cccd_value);
   16736:	a906      	add	r1, sp, #24
   16738:	a803      	add	r0, sp, #12
   1673a:	f004 fe7d 	bl	1b438 <ble_store_read_cccd>
        if (rc != 0) {
   1673e:	bbb0      	cbnz	r0, 167ae <ble_gatts_bonding_restored+0xd6>
        ble_hs_lock();
   16740:	f000 f8dc 	bl	168fc <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   16744:	4620      	mov	r0, r4
   16746:	f000 feaf 	bl	174a8 <ble_hs_conn_find>
   1674a:	4605      	mov	r5, r0
        clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   1674c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   16750:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   16752:	f7ff f9dd 	bl	15b10 <ble_gatts_clt_cfg_find>
        if (clt_cfg != NULL) {
   16756:	4601      	mov	r1, r0
   16758:	2800      	cmp	r0, #0
   1675a:	d0df      	beq.n	1671c <ble_gatts_bonding_restored+0x44>
            clt_cfg->flags = cccd_value.flags;
   1675c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   16760:	7083      	strb	r3, [r0, #2]
            if (cccd_value.value_changed) {
   16762:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   16766:	f012 0f01 	tst.w	r2, #1
   1676a:	d1cf      	bne.n	1670c <ble_gatts_bonding_restored+0x34>
        att_op = 0;
   1676c:	2500      	movs	r5, #0
        ble_hs_unlock();
   1676e:	f000 f8c9 	bl	16904 <ble_hs_unlock>
        ble_gatts_subscribe_event(conn_handle, cccd_value.chr_val_handle,
   16772:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   16776:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1677a:	9300      	str	r3, [sp, #0]
   1677c:	2300      	movs	r3, #0
   1677e:	2203      	movs	r2, #3
   16780:	4620      	mov	r0, r4
   16782:	f7ff fa7a 	bl	15c7a <ble_gatts_subscribe_event>
        switch (att_op) {
   16786:	2d1b      	cmp	r5, #27
   16788:	d0ca      	beq.n	16720 <ble_gatts_bonding_restored+0x48>
   1678a:	2d1d      	cmp	r5, #29
   1678c:	d1ce      	bne.n	1672c <ble_gatts_bonding_restored+0x54>
            ble_gattc_indicate(conn_handle, cccd_value.chr_val_handle);
   1678e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   16792:	4620      	mov	r0, r4
   16794:	f7fe ff92 	bl	156bc <ble_gattc_indicate>
            break;
   16798:	e7c8      	b.n	1672c <ble_gatts_bonding_restored+0x54>
                cccd_value.value_changed = 0;
   1679a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1679e:	f36f 0300 	bfc	r3, #0, #1
   167a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                ble_store_write_cccd(&cccd_value);
   167a6:	a806      	add	r0, sp, #24
   167a8:	f004 fe4d 	bl	1b446 <ble_store_write_cccd>
   167ac:	e7be      	b.n	1672c <ble_gatts_bonding_restored+0x54>
    }
}
   167ae:	b00b      	add	sp, #44	; 0x2c
   167b0:	bd30      	pop	{r4, r5, pc}
	...

000167b4 <ble_gatts_init>:
int
ble_gatts_init(void)
{
    int rc;

    ble_gatts_num_cfgable_chrs = 0;
   167b4:	2000      	movs	r0, #0
   167b6:	4b02      	ldr	r3, [pc, #8]	; (167c0 <ble_gatts_init+0xc>)
   167b8:	6018      	str	r0, [r3, #0]
    ble_gatts_clt_cfgs = NULL;
   167ba:	4b02      	ldr	r3, [pc, #8]	; (167c4 <ble_gatts_init+0x10>)
   167bc:	6018      	str	r0, [r3, #0]
        return BLE_HS_EOS;
    }

    return 0;

}
   167be:	4770      	bx	lr
   167c0:	200026d0 	.word	0x200026d0
   167c4:	200026cc 	.word	0x200026cc

000167c8 <ble_hs_wakeup_tx_conn>:
    }
}

static int
ble_hs_wakeup_tx_conn(struct ble_hs_conn *conn)
{
   167c8:	b510      	push	{r4, lr}
   167ca:	b082      	sub	sp, #8
   167cc:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *omp;
    struct os_mbuf *om;
    int rc;

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   167ce:	e008      	b.n	167e2 <ble_hs_wakeup_tx_conn+0x1a>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);

        om = OS_MBUF_PKTHDR_TO_MBUF(omp);
   167d0:	3b10      	subs	r3, #16
   167d2:	a902      	add	r1, sp, #8
   167d4:	f841 3d04 	str.w	r3, [r1, #-4]!
        rc = ble_hs_hci_acl_tx_now(conn, &om);
   167d8:	4620      	mov	r0, r4
   167da:	f001 f8cf 	bl	1797c <ble_hs_hci_acl_tx_now>
        if (rc == BLE_HS_EAGAIN) {
   167de:	2801      	cmp	r0, #1
   167e0:	d009      	beq.n	167f6 <ble_hs_wakeup_tx_conn+0x2e>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   167e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   167e4:	b193      	cbz	r3, 1680c <ble_hs_wakeup_tx_conn+0x44>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   167e6:	685a      	ldr	r2, [r3, #4]
   167e8:	63e2      	str	r2, [r4, #60]	; 0x3c
   167ea:	2a00      	cmp	r2, #0
   167ec:	d1f0      	bne.n	167d0 <ble_hs_wakeup_tx_conn+0x8>
   167ee:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   167f2:	6422      	str	r2, [r4, #64]	; 0x40
   167f4:	e7ec      	b.n	167d0 <ble_hs_wakeup_tx_conn+0x8>
            /* Controller is at capacity.  This packet will be the first to
             * get transmitted next time around.
             */
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   167f6:	9b01      	ldr	r3, [sp, #4]
   167f8:	f103 0110 	add.w	r1, r3, #16
   167fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   167fe:	615a      	str	r2, [r3, #20]
   16800:	b10a      	cbz	r2, 16806 <ble_hs_wakeup_tx_conn+0x3e>
   16802:	63e1      	str	r1, [r4, #60]	; 0x3c
            return BLE_HS_EAGAIN;
   16804:	e003      	b.n	1680e <ble_hs_wakeup_tx_conn+0x46>
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   16806:	3314      	adds	r3, #20
   16808:	6423      	str	r3, [r4, #64]	; 0x40
   1680a:	e7fa      	b.n	16802 <ble_hs_wakeup_tx_conn+0x3a>
        }
    }

    return 0;
   1680c:	2000      	movs	r0, #0
}
   1680e:	b002      	add	sp, #8
   16810:	bd10      	pop	{r4, pc}
	...

00016814 <ble_hs_event_rx_hci_ev>:
#endif
}

static void
ble_hs_event_rx_hci_ev(struct ble_npl_event *ev)
{
   16814:	b510      	push	{r4, lr}
   16816:	4601      	mov	r1, r0
    return ev->ev.ev_arg;
   16818:	6884      	ldr	r4, [r0, #8]
    uint8_t *hci_evt;
    int rc;

    hci_evt = ble_npl_event_get_arg(ev);

    rc = os_memblock_put(&ble_hs_hci_ev_pool, ev);
   1681a:	4803      	ldr	r0, [pc, #12]	; (16828 <ble_hs_event_rx_hci_ev+0x14>)
   1681c:	f7fa ffdb 	bl	117d6 <os_memblock_put>
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_EVENT_PKT, hci_evt,
                     hci_evt[1] + BLE_HCI_EVENT_HDR_LEN);
#endif

    ble_hs_hci_evt_process(hci_evt);
   16820:	4620      	mov	r0, r4
   16822:	f001 fe37 	bl	18494 <ble_hs_hci_evt_process>
}
   16826:	bd10      	pop	{r4, pc}
   16828:	20003d4c 	.word	0x20003d4c

0001682c <ble_hs_clear_rx_queue>:
{
   1682c:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   1682e:	e002      	b.n	16836 <ble_hs_clear_rx_queue+0xa>
        os_mbuf_free_chain(om);
   16830:	4618      	mov	r0, r3
   16832:	f7fa fb53 	bl	10edc <os_mbuf_free_chain>
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   16836:	4803      	ldr	r0, [pc, #12]	; (16844 <ble_hs_clear_rx_queue+0x18>)
   16838:	f002 f866 	bl	18908 <ble_mqueue_get>
   1683c:	4603      	mov	r3, r0
   1683e:	2800      	cmp	r0, #0
   16840:	d1f6      	bne.n	16830 <ble_hs_clear_rx_queue+0x4>
}
   16842:	bd08      	pop	{r3, pc}
   16844:	200027dc 	.word	0x200027dc

00016848 <ble_hs_rx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_hs_rx_data(struct os_mbuf *om, void *arg)
{
   16848:	b510      	push	{r4, lr}
   1684a:	4604      	mov	r4, r0
    int rc;

    /* If flow control is enabled, mark this packet with its corresponding
     * connection handle.
     */
    ble_hs_flow_fill_acl_usrhdr(om);
   1684c:	f000 ff27 	bl	1769e <ble_hs_flow_fill_acl_usrhdr>

    rc = ble_mqueue_put(&ble_hs_rx_q, ble_hs_evq, om);
   16850:	4622      	mov	r2, r4
   16852:	4b07      	ldr	r3, [pc, #28]	; (16870 <ble_hs_rx_data+0x28>)
   16854:	6819      	ldr	r1, [r3, #0]
   16856:	4807      	ldr	r0, [pc, #28]	; (16874 <ble_hs_rx_data+0x2c>)
   16858:	f002 f869 	bl	1892e <ble_mqueue_put>
    if (rc != 0) {
   1685c:	4603      	mov	r3, r0
   1685e:	b908      	cbnz	r0, 16864 <ble_hs_rx_data+0x1c>
        os_mbuf_free_chain(om);
        return BLE_HS_EOS;
    }

    return 0;
}
   16860:	4618      	mov	r0, r3
   16862:	bd10      	pop	{r4, pc}
        os_mbuf_free_chain(om);
   16864:	4620      	mov	r0, r4
   16866:	f7fa fb39 	bl	10edc <os_mbuf_free_chain>
        return BLE_HS_EOS;
   1686a:	230b      	movs	r3, #11
   1686c:	e7f8      	b.n	16860 <ble_hs_rx_data+0x18>
   1686e:	bf00      	nop
   16870:	20002724 	.word	0x20002724
   16874:	200027dc 	.word	0x200027dc

00016878 <ble_hs_event_tx_notify>:
{
   16878:	b508      	push	{r3, lr}
    ble_gatts_tx_notifications();
   1687a:	f7ff fee5 	bl	16648 <ble_gatts_tx_notifications>
}
   1687e:	bd08      	pop	{r3, pc}

00016880 <ble_hs_evq_get>:
}
   16880:	4b01      	ldr	r3, [pc, #4]	; (16888 <ble_hs_evq_get+0x8>)
   16882:	6818      	ldr	r0, [r3, #0]
   16884:	4770      	bx	lr
   16886:	bf00      	nop
   16888:	20002724 	.word	0x20002724

0001688c <ble_hs_sched_start_stage2>:
{
   1688c:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)ble_hs_evq_get(),
   1688e:	f7ff fff7 	bl	16880 <ble_hs_evq_get>
    os_eventq_put(&evq->evq, &ev->ev);
   16892:	4902      	ldr	r1, [pc, #8]	; (1689c <ble_hs_sched_start_stage2+0x10>)
   16894:	f7fa fa03 	bl	10c9e <os_eventq_put>
}
   16898:	bd08      	pop	{r3, pc}
   1689a:	bf00      	nop
   1689c:	20002704 	.word	0x20002704

000168a0 <ble_hs_event_start_stage1>:
{
   168a0:	b508      	push	{r3, lr}
    ble_hs_sched_start_stage2();
   168a2:	f7ff fff3 	bl	1688c <ble_hs_sched_start_stage2>
}
   168a6:	bd08      	pop	{r3, pc}

000168a8 <ble_hs_evq_set>:
    ble_hs_evq = evq;
   168a8:	4b01      	ldr	r3, [pc, #4]	; (168b0 <ble_hs_evq_set+0x8>)
   168aa:	6018      	str	r0, [r3, #0]
}
   168ac:	4770      	bx	lr
   168ae:	bf00      	nop
   168b0:	20002724 	.word	0x20002724

000168b4 <ble_hs_is_parent_task>:
{
   168b4:	b508      	push	{r3, lr}
    return os_started();
   168b6:	f7f9 ff4b 	bl	10750 <os_started>
    return !ble_npl_os_started() ||
   168ba:	b908      	cbnz	r0, 168c0 <ble_hs_is_parent_task+0xc>
   168bc:	2001      	movs	r0, #1
}
   168be:	bd08      	pop	{r3, pc}
    return os_sched_get_current_task();
   168c0:	f7fb f9de 	bl	11c80 <os_sched_get_current_task>
           ble_npl_get_current_task_id() == ble_hs_parent_task;
   168c4:	4b03      	ldr	r3, [pc, #12]	; (168d4 <ble_hs_is_parent_task+0x20>)
   168c6:	681b      	ldr	r3, [r3, #0]
    return !ble_npl_os_started() ||
   168c8:	4283      	cmp	r3, r0
   168ca:	d001      	beq.n	168d0 <ble_hs_is_parent_task+0x1c>
   168cc:	2000      	movs	r0, #0
   168ce:	e7f6      	b.n	168be <ble_hs_is_parent_task+0xa>
   168d0:	2001      	movs	r0, #1
   168d2:	e7f4      	b.n	168be <ble_hs_is_parent_task+0xa>
   168d4:	200027d4 	.word	0x200027d4

000168d8 <ble_hs_lock_nested>:
{
   168d8:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   168da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   168de:	4802      	ldr	r0, [pc, #8]	; (168e8 <ble_hs_lock_nested+0x10>)
   168e0:	f7fb f8a6 	bl	11a30 <os_mutex_pend>
}
   168e4:	bd08      	pop	{r3, pc}
   168e6:	bf00      	nop
   168e8:	200027c8 	.word	0x200027c8

000168ec <ble_hs_unlock_nested>:
{
   168ec:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   168ee:	4802      	ldr	r0, [pc, #8]	; (168f8 <ble_hs_unlock_nested+0xc>)
   168f0:	f7fb f842 	bl	11978 <os_mutex_release>
}
   168f4:	bd08      	pop	{r3, pc}
   168f6:	bf00      	nop
   168f8:	200027c8 	.word	0x200027c8

000168fc <ble_hs_lock>:
{
   168fc:	b508      	push	{r3, lr}
    ble_hs_lock_nested();
   168fe:	f7ff ffeb 	bl	168d8 <ble_hs_lock_nested>
}
   16902:	bd08      	pop	{r3, pc}

00016904 <ble_hs_unlock>:
{
   16904:	b508      	push	{r3, lr}
    ble_hs_unlock_nested();
   16906:	f7ff fff1 	bl	168ec <ble_hs_unlock_nested>
}
   1690a:	bd08      	pop	{r3, pc}

0001690c <ble_hs_process_rx_data_queue>:
{
   1690c:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   1690e:	e002      	b.n	16916 <ble_hs_process_rx_data_queue+0xa>
        ble_hs_hci_evt_acl_process(om);
   16910:	4618      	mov	r0, r3
   16912:	f001 fdd7 	bl	184c4 <ble_hs_hci_evt_acl_process>
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   16916:	4803      	ldr	r0, [pc, #12]	; (16924 <ble_hs_process_rx_data_queue+0x18>)
   16918:	f001 fff6 	bl	18908 <ble_mqueue_get>
   1691c:	4603      	mov	r3, r0
   1691e:	2800      	cmp	r0, #0
   16920:	d1f6      	bne.n	16910 <ble_hs_process_rx_data_queue+0x4>
}
   16922:	bd08      	pop	{r3, pc}
   16924:	200027dc 	.word	0x200027dc

00016928 <ble_hs_event_rx_data>:
{
   16928:	b508      	push	{r3, lr}
    ble_hs_process_rx_data_queue();
   1692a:	f7ff ffef 	bl	1690c <ble_hs_process_rx_data_queue>
}
   1692e:	bd08      	pop	{r3, pc}

00016930 <ble_hs_wakeup_tx>:
{
   16930:	b510      	push	{r4, lr}
    ble_hs_lock();
   16932:	f7ff ffe3 	bl	168fc <ble_hs_lock>
    for (conn = ble_hs_conn_first();
   16936:	f000 fde9 	bl	1750c <ble_hs_conn_first>
   1693a:	b148      	cbz	r0, 16950 <ble_hs_wakeup_tx+0x20>
        if (conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG) {
   1693c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   16940:	f013 0f04 	tst.w	r3, #4
   16944:	d101      	bne.n	1694a <ble_hs_wakeup_tx+0x1a>
         conn = SLIST_NEXT(conn, bhc_next)) {
   16946:	6800      	ldr	r0, [r0, #0]
   16948:	e7f7      	b.n	1693a <ble_hs_wakeup_tx+0xa>
            rc = ble_hs_wakeup_tx_conn(conn);
   1694a:	f7ff ff3d 	bl	167c8 <ble_hs_wakeup_tx_conn>
            if (rc != 0) {
   1694e:	b948      	cbnz	r0, 16964 <ble_hs_wakeup_tx+0x34>
    for (conn = ble_hs_conn_first();
   16950:	f000 fddc 	bl	1750c <ble_hs_conn_first>
   16954:	4604      	mov	r4, r0
   16956:	b12c      	cbz	r4, 16964 <ble_hs_wakeup_tx+0x34>
        rc = ble_hs_wakeup_tx_conn(conn);
   16958:	4620      	mov	r0, r4
   1695a:	f7ff ff35 	bl	167c8 <ble_hs_wakeup_tx_conn>
        if (rc != 0) {
   1695e:	b908      	cbnz	r0, 16964 <ble_hs_wakeup_tx+0x34>
         conn = SLIST_NEXT(conn, bhc_next)) {
   16960:	6824      	ldr	r4, [r4, #0]
   16962:	e7f8      	b.n	16956 <ble_hs_wakeup_tx+0x26>
    ble_hs_unlock();
   16964:	f7ff ffce 	bl	16904 <ble_hs_unlock>
}
   16968:	bd10      	pop	{r4, pc}
	...

0001696c <ble_hs_is_enabled>:
    return ble_hs_enabled_state == BLE_HS_ENABLED_STATE_ON;
   1696c:	4b03      	ldr	r3, [pc, #12]	; (1697c <ble_hs_is_enabled+0x10>)
   1696e:	7818      	ldrb	r0, [r3, #0]
}
   16970:	2802      	cmp	r0, #2
   16972:	bf14      	ite	ne
   16974:	2000      	movne	r0, #0
   16976:	2001      	moveq	r0, #1
   16978:	4770      	bx	lr
   1697a:	bf00      	nop
   1697c:	20003d6e 	.word	0x20003d6e

00016980 <ble_hs_timer_reset>:
{
   16980:	b510      	push	{r4, lr}
   16982:	4604      	mov	r4, r0
    if (!ble_hs_is_enabled()) {
   16984:	f7ff fff2 	bl	1696c <ble_hs_is_enabled>
   16988:	b120      	cbz	r0, 16994 <ble_hs_timer_reset+0x14>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1698a:	4621      	mov	r1, r4
   1698c:	4803      	ldr	r0, [pc, #12]	; (1699c <ble_hs_timer_reset+0x1c>)
   1698e:	f7f9 ffcb 	bl	10928 <os_callout_reset>
}
   16992:	bd10      	pop	{r4, pc}
    os_callout_stop(&co->co);
   16994:	4801      	ldr	r0, [pc, #4]	; (1699c <ble_hs_timer_reset+0x1c>)
   16996:	f7f9 ffa9 	bl	108ec <os_callout_stop>
   1699a:	e7fa      	b.n	16992 <ble_hs_timer_reset+0x12>
   1699c:	200027f4 	.word	0x200027f4

000169a0 <ble_hs_timer_sched>:
    if (ticks_from_now == BLE_HS_FOREVER) {
   169a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   169a4:	4298      	cmp	r0, r3
   169a6:	d010      	beq.n	169ca <ble_hs_timer_sched+0x2a>
{
   169a8:	b510      	push	{r4, lr}
   169aa:	4604      	mov	r4, r0
    return os_time_get();
   169ac:	f7fb fbc6 	bl	1213c <os_time_get>
    abs_time = ble_npl_time_get() + ticks_from_now;
   169b0:	4420      	add	r0, r4
   169b2:	4b06      	ldr	r3, [pc, #24]	; (169cc <ble_hs_timer_sched+0x2c>)
   169b4:	69db      	ldr	r3, [r3, #28]
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   169b6:	b123      	cbz	r3, 169c2 <ble_hs_timer_sched+0x22>
    return co->co.c_ticks;
   169b8:	4b04      	ldr	r3, [pc, #16]	; (169cc <ble_hs_timer_sched+0x2c>)
   169ba:	695b      	ldr	r3, [r3, #20]
            ((ble_npl_stime_t)(abs_time -
   169bc:	1ac0      	subs	r0, r0, r3
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   169be:	2800      	cmp	r0, #0
   169c0:	da02      	bge.n	169c8 <ble_hs_timer_sched+0x28>
        ble_hs_timer_reset(ticks_from_now);
   169c2:	4620      	mov	r0, r4
   169c4:	f7ff ffdc 	bl	16980 <ble_hs_timer_reset>
}
   169c8:	bd10      	pop	{r4, pc}
   169ca:	4770      	bx	lr
   169cc:	200027f4 	.word	0x200027f4

000169d0 <ble_hs_sync>:
{
   169d0:	b510      	push	{r4, lr}
    ble_hs_sync_state = BLE_HS_SYNC_STATE_BRINGUP;
   169d2:	4b0e      	ldr	r3, [pc, #56]	; (16a0c <ble_hs_sync+0x3c>)
   169d4:	2201      	movs	r2, #1
   169d6:	701a      	strb	r2, [r3, #0]
    rc = ble_hs_startup_go();
   169d8:	f002 fa1b 	bl	18e12 <ble_hs_startup_go>
    if (rc == 0) {
   169dc:	4604      	mov	r4, r0
   169de:	b940      	cbnz	r0, 169f2 <ble_hs_sync+0x22>
        ble_hs_sync_state = BLE_HS_SYNC_STATE_GOOD;
   169e0:	4b0a      	ldr	r3, [pc, #40]	; (16a0c <ble_hs_sync+0x3c>)
   169e2:	2202      	movs	r2, #2
   169e4:	701a      	strb	r2, [r3, #0]
    ble_hs_timer_sched(retry_tmo_ticks);
   169e6:	200c      	movs	r0, #12
   169e8:	f7ff ffda 	bl	169a0 <ble_hs_timer_sched>
    if (rc == 0) {
   169ec:	b12c      	cbz	r4, 169fa <ble_hs_sync+0x2a>
}
   169ee:	4620      	mov	r0, r4
   169f0:	bd10      	pop	{r4, pc}
        ble_hs_sync_state = BLE_HS_SYNC_STATE_BAD;
   169f2:	4b06      	ldr	r3, [pc, #24]	; (16a0c <ble_hs_sync+0x3c>)
   169f4:	2200      	movs	r2, #0
   169f6:	701a      	strb	r2, [r3, #0]
   169f8:	e7f5      	b.n	169e6 <ble_hs_sync+0x16>
        rc = ble_hs_misc_restore_irks();
   169fa:	f001 ff71 	bl	188e0 <ble_hs_misc_restore_irks>
   169fe:	4604      	mov	r4, r0
        if (ble_hs_cfg.sync_cb != NULL) {
   16a00:	4b03      	ldr	r3, [pc, #12]	; (16a10 <ble_hs_sync+0x40>)
   16a02:	691b      	ldr	r3, [r3, #16]
   16a04:	2b00      	cmp	r3, #0
   16a06:	d0f2      	beq.n	169ee <ble_hs_sync+0x1e>
            ble_hs_cfg.sync_cb();
   16a08:	4798      	blx	r3
    return rc;
   16a0a:	e7f0      	b.n	169ee <ble_hs_sync+0x1e>
   16a0c:	20003d68 	.word	0x20003d68
   16a10:	200001dc 	.word	0x200001dc

00016a14 <ble_hs_reset>:
{
   16a14:	b508      	push	{r3, lr}
    ble_hs_sync_state = 0;
   16a16:	4b10      	ldr	r3, [pc, #64]	; (16a58 <ble_hs_reset+0x44>)
   16a18:	2200      	movs	r2, #0
   16a1a:	701a      	strb	r2, [r3, #0]
    (void)ble_hci_trans_reset();
   16a1c:	f006 fef8 	bl	1d810 <ble_hci_trans_reset>
    ble_hs_clear_rx_queue();
   16a20:	f7ff ff04 	bl	1682c <ble_hs_clear_rx_queue>
        conn_handle = ble_hs_atomic_first_conn_handle();
   16a24:	f000 fc6f 	bl	17306 <ble_hs_atomic_first_conn_handle>
        if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   16a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16a2c:	4298      	cmp	r0, r3
   16a2e:	d004      	beq.n	16a3a <ble_hs_reset+0x26>
        ble_gap_conn_broken(conn_handle, ble_hs_reset_reason);
   16a30:	4b0a      	ldr	r3, [pc, #40]	; (16a5c <ble_hs_reset+0x48>)
   16a32:	6819      	ldr	r1, [r3, #0]
   16a34:	f7fd f8da 	bl	13bec <ble_gap_conn_broken>
        conn_handle = ble_hs_atomic_first_conn_handle();
   16a38:	e7f4      	b.n	16a24 <ble_hs_reset+0x10>
    ble_hs_id_reset();
   16a3a:	f001 fea3 	bl	18784 <ble_hs_id_reset>
    if (ble_hs_cfg.reset_cb != NULL && ble_hs_reset_reason != 0) {
   16a3e:	4b08      	ldr	r3, [pc, #32]	; (16a60 <ble_hs_reset+0x4c>)
   16a40:	68db      	ldr	r3, [r3, #12]
   16a42:	b11b      	cbz	r3, 16a4c <ble_hs_reset+0x38>
   16a44:	4a05      	ldr	r2, [pc, #20]	; (16a5c <ble_hs_reset+0x48>)
   16a46:	6810      	ldr	r0, [r2, #0]
   16a48:	b100      	cbz	r0, 16a4c <ble_hs_reset+0x38>
        ble_hs_cfg.reset_cb(ble_hs_reset_reason);
   16a4a:	4798      	blx	r3
    ble_hs_reset_reason = 0;
   16a4c:	4b03      	ldr	r3, [pc, #12]	; (16a5c <ble_hs_reset+0x48>)
   16a4e:	2200      	movs	r2, #0
   16a50:	601a      	str	r2, [r3, #0]
    rc = ble_hs_sync();
   16a52:	f7ff ffbd 	bl	169d0 <ble_hs_sync>
}
   16a56:	bd08      	pop	{r3, pc}
   16a58:	20003d68 	.word	0x20003d68
   16a5c:	200027d8 	.word	0x200027d8
   16a60:	200001dc 	.word	0x200001dc

00016a64 <ble_hs_event_reset>:
{
   16a64:	b508      	push	{r3, lr}
    ble_hs_reset();
   16a66:	f7ff ffd5 	bl	16a14 <ble_hs_reset>
}
   16a6a:	bd08      	pop	{r3, pc}

00016a6c <ble_hs_timer_exp>:
{
   16a6c:	b508      	push	{r3, lr}
    switch (ble_hs_sync_state) {
   16a6e:	4b11      	ldr	r3, [pc, #68]	; (16ab4 <ble_hs_timer_exp+0x48>)
   16a70:	781b      	ldrb	r3, [r3, #0]
   16a72:	b1b3      	cbz	r3, 16aa2 <ble_hs_timer_exp+0x36>
   16a74:	2b02      	cmp	r3, #2
   16a76:	d117      	bne.n	16aa8 <ble_hs_timer_exp+0x3c>
        ticks_until_next = ble_gattc_timer();
   16a78:	f7fe fd76 	bl	15568 <ble_gattc_timer>
        ble_hs_timer_sched(ticks_until_next);
   16a7c:	f7ff ff90 	bl	169a0 <ble_hs_timer_sched>
        ticks_until_next = ble_gap_timer();
   16a80:	f7fd f9b4 	bl	13dec <ble_gap_timer>
        ble_hs_timer_sched(ticks_until_next);
   16a84:	f7ff ff8c 	bl	169a0 <ble_hs_timer_sched>
        ticks_until_next = ble_l2cap_sig_timer();
   16a88:	f002 fda6 	bl	195d8 <ble_l2cap_sig_timer>
        ble_hs_timer_sched(ticks_until_next);
   16a8c:	f7ff ff88 	bl	169a0 <ble_hs_timer_sched>
        ticks_until_next = ble_sm_timer();
   16a90:	f004 f955 	bl	1ad3e <ble_sm_timer>
        ble_hs_timer_sched(ticks_until_next);
   16a94:	f7ff ff84 	bl	169a0 <ble_hs_timer_sched>
        ticks_until_next = ble_hs_conn_timer();
   16a98:	f000 fda4 	bl	175e4 <ble_hs_conn_timer>
        ble_hs_timer_sched(ticks_until_next);
   16a9c:	f7ff ff80 	bl	169a0 <ble_hs_timer_sched>
}
   16aa0:	bd08      	pop	{r3, pc}
        ble_hs_reset();
   16aa2:	f7ff ffb7 	bl	16a14 <ble_hs_reset>
        break;
   16aa6:	e7fb      	b.n	16aa0 <ble_hs_timer_exp+0x34>
        assert(0);
   16aa8:	2300      	movs	r3, #0
   16aaa:	461a      	mov	r2, r3
   16aac:	4619      	mov	r1, r3
   16aae:	4618      	mov	r0, r3
   16ab0:	f7f9 fd94 	bl	105dc <__assert_func>
   16ab4:	20003d68 	.word	0x20003d68

00016ab8 <ble_hs_timer_resched>:
{
   16ab8:	b508      	push	{r3, lr}
    ble_hs_timer_reset(0);
   16aba:	2000      	movs	r0, #0
   16abc:	f7ff ff60 	bl	16980 <ble_hs_timer_reset>
}
   16ac0:	bd08      	pop	{r3, pc}
	...

00016ac4 <ble_hs_enqueue_hci_event>:
{
   16ac4:	b510      	push	{r4, lr}
   16ac6:	4604      	mov	r4, r0
    ev = os_memblock_get(&ble_hs_hci_ev_pool);
   16ac8:	480a      	ldr	r0, [pc, #40]	; (16af4 <ble_hs_enqueue_hci_event+0x30>)
   16aca:	f7fa fe5c 	bl	11786 <os_memblock_get>
    if (ev == NULL) {
   16ace:	b160      	cbz	r0, 16aea <ble_hs_enqueue_hci_event+0x26>
   16ad0:	4601      	mov	r1, r0
    memset(ev, 0, sizeof(*ev));
   16ad2:	2300      	movs	r3, #0
   16ad4:	6003      	str	r3, [r0, #0]
   16ad6:	60c3      	str	r3, [r0, #12]
    ev->ev.ev_queued = 0;
   16ad8:	7003      	strb	r3, [r0, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   16ada:	4b07      	ldr	r3, [pc, #28]	; (16af8 <ble_hs_enqueue_hci_event+0x34>)
   16adc:	6043      	str	r3, [r0, #4]
    ev->ev.ev_arg = arg;
   16ade:	6084      	str	r4, [r0, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   16ae0:	4b06      	ldr	r3, [pc, #24]	; (16afc <ble_hs_enqueue_hci_event+0x38>)
   16ae2:	6818      	ldr	r0, [r3, #0]
   16ae4:	f7fa f8db 	bl	10c9e <os_eventq_put>
}
   16ae8:	bd10      	pop	{r4, pc}
        ble_hci_trans_buf_free(hci_evt);
   16aea:	4620      	mov	r0, r4
   16aec:	f006 fe4e 	bl	1d78c <ble_hci_trans_buf_free>
   16af0:	e7fa      	b.n	16ae8 <ble_hs_enqueue_hci_event+0x24>
   16af2:	bf00      	nop
   16af4:	20003d4c 	.word	0x20003d4c
   16af8:	00016815 	.word	0x00016815
   16afc:	20002724 	.word	0x20002724

00016b00 <ble_hs_sched_reset>:
{
   16b00:	b508      	push	{r3, lr}
    ble_hs_reset_reason = reason;
   16b02:	4b04      	ldr	r3, [pc, #16]	; (16b14 <ble_hs_sched_reset+0x14>)
   16b04:	6018      	str	r0, [r3, #0]
   16b06:	4904      	ldr	r1, [pc, #16]	; (16b18 <ble_hs_sched_reset+0x18>)
   16b08:	4b04      	ldr	r3, [pc, #16]	; (16b1c <ble_hs_sched_reset+0x1c>)
   16b0a:	6818      	ldr	r0, [r3, #0]
   16b0c:	f7fa f8c7 	bl	10c9e <os_eventq_put>
}
   16b10:	bd08      	pop	{r3, pc}
   16b12:	bf00      	nop
   16b14:	200027d8 	.word	0x200027d8
   16b18:	200026e4 	.word	0x200026e4
   16b1c:	20002724 	.word	0x20002724

00016b20 <ble_hs_hw_error>:
{
   16b20:	b508      	push	{r3, lr}
    ble_hs_sched_reset(BLE_HS_HW_ERR(hw_code));
   16b22:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
   16b26:	f7ff ffeb 	bl	16b00 <ble_hs_sched_reset>
}
   16b2a:	bd08      	pop	{r3, pc}

00016b2c <ble_hs_start>:
{
   16b2c:	b510      	push	{r4, lr}
    ble_hs_lock();
   16b2e:	f7ff fee5 	bl	168fc <ble_hs_lock>
    switch (ble_hs_enabled_state) {
   16b32:	4b17      	ldr	r3, [pc, #92]	; (16b90 <ble_hs_start+0x64>)
   16b34:	781b      	ldrb	r3, [r3, #0]
   16b36:	2b01      	cmp	r3, #1
   16b38:	d025      	beq.n	16b86 <ble_hs_start+0x5a>
   16b3a:	b133      	cbz	r3, 16b4a <ble_hs_start+0x1e>
   16b3c:	2b02      	cmp	r3, #2
   16b3e:	d11c      	bne.n	16b7a <ble_hs_start+0x4e>
    ble_hs_unlock();
   16b40:	f7ff fee0 	bl	16904 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   16b44:	2402      	movs	r4, #2
}
   16b46:	4620      	mov	r0, r4
   16b48:	bd10      	pop	{r4, pc}
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_ON;
   16b4a:	4b11      	ldr	r3, [pc, #68]	; (16b90 <ble_hs_start+0x64>)
   16b4c:	2202      	movs	r2, #2
   16b4e:	701a      	strb	r2, [r3, #0]
    ble_hs_unlock();
   16b50:	f7ff fed8 	bl	16904 <ble_hs_unlock>
    return os_sched_get_current_task();
   16b54:	f7fb f894 	bl	11c80 <os_sched_get_current_task>
    ble_hs_parent_task = ble_npl_get_current_task_id();
   16b58:	4b0e      	ldr	r3, [pc, #56]	; (16b94 <ble_hs_start+0x68>)
   16b5a:	6018      	str	r0, [r3, #0]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   16b5c:	2300      	movs	r3, #0
   16b5e:	4a0e      	ldr	r2, [pc, #56]	; (16b98 <ble_hs_start+0x6c>)
   16b60:	490e      	ldr	r1, [pc, #56]	; (16b9c <ble_hs_start+0x70>)
   16b62:	6809      	ldr	r1, [r1, #0]
   16b64:	480e      	ldr	r0, [pc, #56]	; (16ba0 <ble_hs_start+0x74>)
   16b66:	f7f9 feb3 	bl	108d0 <os_callout_init>
    rc = ble_gatts_start();
   16b6a:	f7ff fc09 	bl	16380 <ble_gatts_start>
    if (rc != 0) {
   16b6e:	4604      	mov	r4, r0
   16b70:	2800      	cmp	r0, #0
   16b72:	d1e8      	bne.n	16b46 <ble_hs_start+0x1a>
    ble_hs_sync();
   16b74:	f7ff ff2c 	bl	169d0 <ble_hs_sync>
    return 0;
   16b78:	e7e5      	b.n	16b46 <ble_hs_start+0x1a>
        assert(0);
   16b7a:	2300      	movs	r3, #0
   16b7c:	461a      	mov	r2, r3
   16b7e:	4619      	mov	r1, r3
   16b80:	4618      	mov	r0, r3
   16b82:	f7f9 fd2b 	bl	105dc <__assert_func>
    ble_hs_unlock();
   16b86:	f7ff febd 	bl	16904 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   16b8a:	240f      	movs	r4, #15
   16b8c:	e7db      	b.n	16b46 <ble_hs_start+0x1a>
   16b8e:	bf00      	nop
   16b90:	20003d6e 	.word	0x20003d6e
   16b94:	200027d4 	.word	0x200027d4
   16b98:	00016a6d 	.word	0x00016a6d
   16b9c:	20002724 	.word	0x20002724
   16ba0:	200027f4 	.word	0x200027f4

00016ba4 <ble_hs_event_start_stage2>:
{
   16ba4:	b508      	push	{r3, lr}
    rc = ble_hs_start();
   16ba6:	f7ff ffc1 	bl	16b2c <ble_hs_start>
    assert(rc == 0);
   16baa:	b900      	cbnz	r0, 16bae <ble_hs_event_start_stage2+0xa>
}
   16bac:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   16bae:	2300      	movs	r3, #0
   16bb0:	461a      	mov	r2, r3
   16bb2:	4619      	mov	r1, r3
   16bb4:	4618      	mov	r0, r3
   16bb6:	f7f9 fd11 	bl	105dc <__assert_func>

00016bba <ble_hs_tx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_tx_data(struct os_mbuf *om)
{
   16bba:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send_om(BLE_MONITOR_OPCODE_ACL_TX_PKT, om);
#endif

    ble_hci_trans_hs_acl_tx(om);
   16bbc:	f006 fd98 	bl	1d6f0 <ble_hci_trans_hs_acl_tx>
    return 0;
}
   16bc0:	2000      	movs	r0, #0
   16bc2:	bd08      	pop	{r3, pc}

00016bc4 <ble_hs_init>:

void
ble_hs_init(void)
{
   16bc4:	b510      	push	{r4, lr}
   16bc6:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16bc8:	4b5a      	ldr	r3, [pc, #360]	; (16d34 <ble_hs_init+0x170>)
   16bca:	781b      	ldrb	r3, [r3, #0]
   16bcc:	2b00      	cmp	r3, #0
   16bce:	f000 80ac 	beq.w	16d2a <ble_hs_init+0x166>

    /* Create memory pool of OS events */
    rc = os_mempool_init(&ble_hs_hci_ev_pool, BLE_HS_HCI_EVT_COUNT,
   16bd2:	4b59      	ldr	r3, [pc, #356]	; (16d38 <ble_hs_init+0x174>)
   16bd4:	9300      	str	r3, [sp, #0]
   16bd6:	4b59      	ldr	r3, [pc, #356]	; (16d3c <ble_hs_init+0x178>)
   16bd8:	2210      	movs	r2, #16
   16bda:	210a      	movs	r1, #10
   16bdc:	4858      	ldr	r0, [pc, #352]	; (16d40 <ble_hs_init+0x17c>)
   16bde:	f7fa fd8d 	bl	116fc <os_mempool_init>
                         sizeof (struct ble_npl_event), ble_hs_hci_os_event_buf,
                         "ble_hs_hci_ev_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   16be2:	b138      	cbz	r0, 16bf4 <ble_hs_init+0x30>
   16be4:	2000      	movs	r0, #0
   16be6:	9000      	str	r0, [sp, #0]
   16be8:	4b56      	ldr	r3, [pc, #344]	; (16d44 <ble_hs_init+0x180>)
   16bea:	681c      	ldr	r4, [r3, #0]
   16bec:	4603      	mov	r3, r0
   16bee:	4602      	mov	r2, r0
   16bf0:	4601      	mov	r1, r0
   16bf2:	47a0      	blx	r4

    /* These get initialized here to allow unit tests to run without a zeroed
     * bss.
     */
    ble_hs_reset_reason = 0;
   16bf4:	2300      	movs	r3, #0
   16bf6:	4a54      	ldr	r2, [pc, #336]	; (16d48 <ble_hs_init+0x184>)
   16bf8:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   16bfa:	4a54      	ldr	r2, [pc, #336]	; (16d4c <ble_hs_init+0x188>)
   16bfc:	7013      	strb	r3, [r2, #0]
    memset(ev, 0, sizeof(*ev));
   16bfe:	4a54      	ldr	r2, [pc, #336]	; (16d50 <ble_hs_init+0x18c>)
   16c00:	6013      	str	r3, [r2, #0]
   16c02:	6093      	str	r3, [r2, #8]
   16c04:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   16c06:	4953      	ldr	r1, [pc, #332]	; (16d54 <ble_hs_init+0x190>)
   16c08:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   16c0a:	4a53      	ldr	r2, [pc, #332]	; (16d58 <ble_hs_init+0x194>)
   16c0c:	6013      	str	r3, [r2, #0]
   16c0e:	6093      	str	r3, [r2, #8]
   16c10:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   16c12:	4952      	ldr	r1, [pc, #328]	; (16d5c <ble_hs_init+0x198>)
   16c14:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   16c16:	4a52      	ldr	r2, [pc, #328]	; (16d60 <ble_hs_init+0x19c>)
   16c18:	6013      	str	r3, [r2, #0]
   16c1a:	6093      	str	r3, [r2, #8]
   16c1c:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   16c1e:	4951      	ldr	r1, [pc, #324]	; (16d64 <ble_hs_init+0x1a0>)
   16c20:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   16c22:	4a51      	ldr	r2, [pc, #324]	; (16d68 <ble_hs_init+0x1a4>)
   16c24:	6013      	str	r3, [r2, #0]
   16c26:	6093      	str	r3, [r2, #8]
   16c28:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   16c2a:	4b50      	ldr	r3, [pc, #320]	; (16d6c <ble_hs_init+0x1a8>)
   16c2c:	6053      	str	r3, [r2, #4]
    ble_npl_event_init(&ble_hs_ev_start_stage1, ble_hs_event_start_stage1,
                       NULL);
    ble_npl_event_init(&ble_hs_ev_start_stage2, ble_hs_event_start_stage2,
                       NULL);

    ble_hs_hci_init();
   16c2e:	f000 ff1b 	bl	17a68 <ble_hs_hci_init>

    rc = ble_hs_conn_init();
   16c32:	f000 fd19 	bl	17668 <ble_hs_conn_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16c36:	b138      	cbz	r0, 16c48 <ble_hs_init+0x84>
   16c38:	2000      	movs	r0, #0
   16c3a:	9000      	str	r0, [sp, #0]
   16c3c:	4b41      	ldr	r3, [pc, #260]	; (16d44 <ble_hs_init+0x180>)
   16c3e:	681c      	ldr	r4, [r3, #0]
   16c40:	4603      	mov	r3, r0
   16c42:	4602      	mov	r2, r0
   16c44:	4601      	mov	r1, r0
   16c46:	47a0      	blx	r4

    rc = ble_hs_periodic_sync_init();
   16c48:	f001 fe90 	bl	1896c <ble_hs_periodic_sync_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16c4c:	b138      	cbz	r0, 16c5e <ble_hs_init+0x9a>
   16c4e:	2000      	movs	r0, #0
   16c50:	9000      	str	r0, [sp, #0]
   16c52:	4b3c      	ldr	r3, [pc, #240]	; (16d44 <ble_hs_init+0x180>)
   16c54:	681c      	ldr	r4, [r3, #0]
   16c56:	4603      	mov	r3, r0
   16c58:	4602      	mov	r2, r0
   16c5a:	4601      	mov	r1, r0
   16c5c:	47a0      	blx	r4

    rc = ble_l2cap_init();
   16c5e:	f002 faa3 	bl	191a8 <ble_l2cap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16c62:	b138      	cbz	r0, 16c74 <ble_hs_init+0xb0>
   16c64:	2000      	movs	r0, #0
   16c66:	9000      	str	r0, [sp, #0]
   16c68:	4b36      	ldr	r3, [pc, #216]	; (16d44 <ble_hs_init+0x180>)
   16c6a:	681c      	ldr	r4, [r3, #0]
   16c6c:	4603      	mov	r3, r0
   16c6e:	4602      	mov	r2, r0
   16c70:	4601      	mov	r1, r0
   16c72:	47a0      	blx	r4

    rc = ble_att_init();
   16c74:	f004 fdd6 	bl	1b824 <ble_att_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16c78:	b138      	cbz	r0, 16c8a <ble_hs_init+0xc6>
   16c7a:	2000      	movs	r0, #0
   16c7c:	9000      	str	r0, [sp, #0]
   16c7e:	4b31      	ldr	r3, [pc, #196]	; (16d44 <ble_hs_init+0x180>)
   16c80:	681c      	ldr	r4, [r3, #0]
   16c82:	4603      	mov	r3, r0
   16c84:	4602      	mov	r2, r0
   16c86:	4601      	mov	r1, r0
   16c88:	47a0      	blx	r4

    rc = ble_att_svr_init();
   16c8a:	f006 fbf3 	bl	1d474 <ble_att_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16c8e:	b138      	cbz	r0, 16ca0 <ble_hs_init+0xdc>
   16c90:	2000      	movs	r0, #0
   16c92:	9000      	str	r0, [sp, #0]
   16c94:	4b2b      	ldr	r3, [pc, #172]	; (16d44 <ble_hs_init+0x180>)
   16c96:	681c      	ldr	r4, [r3, #0]
   16c98:	4603      	mov	r3, r0
   16c9a:	4602      	mov	r2, r0
   16c9c:	4601      	mov	r1, r0
   16c9e:	47a0      	blx	r4

    rc = ble_gap_init();
   16ca0:	f7fd fb1e 	bl	142e0 <ble_gap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16ca4:	b138      	cbz	r0, 16cb6 <ble_hs_init+0xf2>
   16ca6:	2000      	movs	r0, #0
   16ca8:	9000      	str	r0, [sp, #0]
   16caa:	4b26      	ldr	r3, [pc, #152]	; (16d44 <ble_hs_init+0x180>)
   16cac:	681c      	ldr	r4, [r3, #0]
   16cae:	4603      	mov	r3, r0
   16cb0:	4602      	mov	r2, r0
   16cb2:	4601      	mov	r1, r0
   16cb4:	47a0      	blx	r4

    rc = ble_gattc_init();
   16cb6:	f7fe fe47 	bl	15948 <ble_gattc_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16cba:	b138      	cbz	r0, 16ccc <ble_hs_init+0x108>
   16cbc:	2000      	movs	r0, #0
   16cbe:	9000      	str	r0, [sp, #0]
   16cc0:	4b20      	ldr	r3, [pc, #128]	; (16d44 <ble_hs_init+0x180>)
   16cc2:	681c      	ldr	r4, [r3, #0]
   16cc4:	4603      	mov	r3, r0
   16cc6:	4602      	mov	r2, r0
   16cc8:	4601      	mov	r1, r0
   16cca:	47a0      	blx	r4

    rc = ble_gatts_init();
   16ccc:	f7ff fd72 	bl	167b4 <ble_gatts_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16cd0:	b138      	cbz	r0, 16ce2 <ble_hs_init+0x11e>
   16cd2:	2000      	movs	r0, #0
   16cd4:	9000      	str	r0, [sp, #0]
   16cd6:	4b1b      	ldr	r3, [pc, #108]	; (16d44 <ble_hs_init+0x180>)
   16cd8:	681c      	ldr	r4, [r3, #0]
   16cda:	4603      	mov	r3, r0
   16cdc:	4602      	mov	r2, r0
   16cde:	4601      	mov	r1, r0
   16ce0:	47a0      	blx	r4

    ble_hs_stop_init();
   16ce2:	f002 f8f7 	bl	18ed4 <ble_hs_stop_init>

    ble_mqueue_init(&ble_hs_rx_q, ble_hs_event_rx_data, NULL);
   16ce6:	2200      	movs	r2, #0
   16ce8:	4921      	ldr	r1, [pc, #132]	; (16d70 <ble_hs_init+0x1ac>)
   16cea:	4822      	ldr	r0, [pc, #136]	; (16d74 <ble_hs_init+0x1b0>)
   16cec:	f001 fe02 	bl	188f4 <ble_mqueue_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   16cf0:	4821      	ldr	r0, [pc, #132]	; (16d78 <ble_hs_init+0x1b4>)
   16cf2:	f7fa fe37 	bl	11964 <os_mutex_init>
        STATS_HDR(ble_hs_stats), STATS_SIZE_INIT_PARMS(ble_hs_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_hs_stats), "ble_hs");
    SYSINIT_PANIC_ASSERT(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_mutex);
    SYSINIT_PANIC_ASSERT(rc == 0);
   16cf6:	b138      	cbz	r0, 16d08 <ble_hs_init+0x144>
   16cf8:	2000      	movs	r0, #0
   16cfa:	9000      	str	r0, [sp, #0]
   16cfc:	4b11      	ldr	r3, [pc, #68]	; (16d44 <ble_hs_init+0x180>)
   16cfe:	681c      	ldr	r4, [r3, #0]
   16d00:	4603      	mov	r3, r0
   16d02:	4602      	mov	r2, r0
   16d04:	4601      	mov	r1, r0
   16d06:	47a0      	blx	r4
#if MYNEWT_VAL(BLE_HS_DEBUG)
    ble_hs_dbg_mutex_locked = 0;
#endif

    /* Configure the HCI transport to communicate with a host. */
    ble_hci_trans_cfg_hs(ble_hs_hci_rx_evt, NULL, ble_hs_rx_data, NULL);
   16d08:	2300      	movs	r3, #0
   16d0a:	4a1c      	ldr	r2, [pc, #112]	; (16d7c <ble_hs_init+0x1b8>)
   16d0c:	4619      	mov	r1, r3
   16d0e:	481c      	ldr	r0, [pc, #112]	; (16d80 <ble_hs_init+0x1bc>)
   16d10:	f006 fca2 	bl	1d658 <ble_hci_trans_cfg_hs>

#ifdef MYNEWT
    ble_hs_evq_set((struct ble_npl_eventq *)os_eventq_dflt_get());
   16d14:	f7fa f860 	bl	10dd8 <os_eventq_dflt_get>
   16d18:	f7ff fdc6 	bl	168a8 <ble_hs_evq_set>
     * queue ensures the event won't run until the end of main().  This allows
     * the application to configure this package in the meantime.
     */
#if MYNEWT_VAL(BLE_HS_AUTO_START)
#ifdef MYNEWT
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
   16d1c:	f7fa f85c 	bl	10dd8 <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
   16d20:	490f      	ldr	r1, [pc, #60]	; (16d60 <ble_hs_init+0x19c>)
   16d22:	f7f9 ffbc 	bl	10c9e <os_eventq_put>
#endif

#if BLE_MONITOR
    ble_monitor_new_index(0, (uint8_t[6]){ }, "nimble0");
#endif
}
   16d26:	b002      	add	sp, #8
   16d28:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16d2a:	461a      	mov	r2, r3
   16d2c:	4619      	mov	r1, r3
   16d2e:	4618      	mov	r0, r3
   16d30:	f7f9 fc54 	bl	105dc <__assert_func>
   16d34:	20003bf0 	.word	0x20003bf0
   16d38:	0002c3d0 	.word	0x0002c3d0
   16d3c:	20002728 	.word	0x20002728
   16d40:	20003d4c 	.word	0x20003d4c
   16d44:	20000180 	.word	0x20000180
   16d48:	200027d8 	.word	0x200027d8
   16d4c:	20003d6e 	.word	0x20003d6e
   16d50:	20002714 	.word	0x20002714
   16d54:	00016879 	.word	0x00016879
   16d58:	200026e4 	.word	0x200026e4
   16d5c:	00016a65 	.word	0x00016a65
   16d60:	200026f4 	.word	0x200026f4
   16d64:	000168a1 	.word	0x000168a1
   16d68:	20002704 	.word	0x20002704
   16d6c:	00016ba5 	.word	0x00016ba5
   16d70:	00016929 	.word	0x00016929
   16d74:	200027dc 	.word	0x200027dc
   16d78:	200027c8 	.word	0x200027c8
   16d7c:	00016849 	.word	0x00016849
   16d80:	0001795d 	.word	0x0001795d

00016d84 <find_field_func>:
static int
find_field_func(const struct ble_hs_adv_field *field, void *user_data)
{
    struct find_field_data *ffd = user_data;

    if (field->type != ffd->type) {
   16d84:	7842      	ldrb	r2, [r0, #1]
   16d86:	780b      	ldrb	r3, [r1, #0]
   16d88:	429a      	cmp	r2, r3
   16d8a:	d001      	beq.n	16d90 <find_field_func+0xc>
        return BLE_HS_EAGAIN;
   16d8c:	2001      	movs	r0, #1
    }

    ffd->field = field;

    return 0;
}
   16d8e:	4770      	bx	lr
    ffd->field = field;
   16d90:	6048      	str	r0, [r1, #4]
    return 0;
   16d92:	2000      	movs	r0, #0
   16d94:	4770      	bx	lr

00016d96 <ble_hs_adv_set_hdr>:
{
   16d96:	b530      	push	{r4, r5, lr}
   16d98:	b083      	sub	sp, #12
   16d9a:	9d06      	ldr	r5, [sp, #24]
   16d9c:	9c07      	ldr	r4, [sp, #28]
   16d9e:	f88d 0007 	strb.w	r0, [sp, #7]
   16da2:	f88d 1006 	strb.w	r1, [sp, #6]
    if (om ) {
   16da6:	b1ac      	cbz	r4, 16dd4 <ble_hs_adv_set_hdr+0x3e>
        data_len++;
   16da8:	b2cb      	uxtb	r3, r1
   16daa:	3301      	adds	r3, #1
   16dac:	a902      	add	r1, sp, #8
   16dae:	f801 3d02 	strb.w	r3, [r1, #-2]!
        rc = os_mbuf_append(om, &data_len, sizeof(data_len));
   16db2:	2201      	movs	r2, #1
   16db4:	4620      	mov	r0, r4
   16db6:	f7fa f8ad 	bl	10f14 <os_mbuf_append>
        if (rc) {
   16dba:	4603      	mov	r3, r0
   16dbc:	b110      	cbz	r0, 16dc4 <ble_hs_adv_set_hdr+0x2e>
}
   16dbe:	4618      	mov	r0, r3
   16dc0:	b003      	add	sp, #12
   16dc2:	bd30      	pop	{r4, r5, pc}
        return os_mbuf_append(om, &type, sizeof(type));
   16dc4:	2201      	movs	r2, #1
   16dc6:	f10d 0107 	add.w	r1, sp, #7
   16dca:	4620      	mov	r0, r4
   16dcc:	f7fa f8a2 	bl	10f14 <os_mbuf_append>
   16dd0:	4603      	mov	r3, r0
   16dd2:	e7f4      	b.n	16dbe <ble_hs_adv_set_hdr+0x28>
    if (*dst_len + 2 + data_len > max_len) {
   16dd4:	782c      	ldrb	r4, [r5, #0]
   16dd6:	1ca0      	adds	r0, r4, #2
   16dd8:	f89d 1006 	ldrb.w	r1, [sp, #6]
   16ddc:	4408      	add	r0, r1
   16dde:	4290      	cmp	r0, r2
   16de0:	dc0b      	bgt.n	16dfa <ble_hs_adv_set_hdr+0x64>
    dst[*dst_len] = data_len + 1;
   16de2:	3101      	adds	r1, #1
   16de4:	5519      	strb	r1, [r3, r4]
    dst[*dst_len + 1] = type;
   16de6:	782a      	ldrb	r2, [r5, #0]
   16de8:	3201      	adds	r2, #1
   16dea:	f89d 1007 	ldrb.w	r1, [sp, #7]
   16dee:	5499      	strb	r1, [r3, r2]
    *dst_len += 2;
   16df0:	782b      	ldrb	r3, [r5, #0]
   16df2:	3302      	adds	r3, #2
   16df4:	702b      	strb	r3, [r5, #0]
    return 0;
   16df6:	2300      	movs	r3, #0
   16df8:	e7e1      	b.n	16dbe <ble_hs_adv_set_hdr+0x28>
        return BLE_HS_EMSGSIZE;
   16dfa:	2304      	movs	r3, #4
   16dfc:	e7df      	b.n	16dbe <ble_hs_adv_set_hdr+0x28>

00016dfe <ble_hs_adv_set_flat_mbuf>:
{
   16dfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e02:	b082      	sub	sp, #8
   16e04:	460f      	mov	r7, r1
   16e06:	4691      	mov	r9, r2
   16e08:	469a      	mov	sl, r3
   16e0a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   16e0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, data_len, max_len, dst, dst_len, om);
   16e0e:	b2ce      	uxtb	r6, r1
   16e10:	9401      	str	r4, [sp, #4]
   16e12:	9500      	str	r5, [sp, #0]
   16e14:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   16e18:	4631      	mov	r1, r6
   16e1a:	f7ff ffbc 	bl	16d96 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   16e1e:	4680      	mov	r8, r0
   16e20:	b930      	cbnz	r0, 16e30 <ble_hs_adv_set_flat_mbuf+0x32>
    if (om) {
   16e22:	b14c      	cbz	r4, 16e38 <ble_hs_adv_set_flat_mbuf+0x3a>
        return os_mbuf_append(om, data, data_len);
   16e24:	b2ba      	uxth	r2, r7
   16e26:	4649      	mov	r1, r9
   16e28:	4620      	mov	r0, r4
   16e2a:	f7fa f873 	bl	10f14 <os_mbuf_append>
   16e2e:	4680      	mov	r8, r0
}
   16e30:	4640      	mov	r0, r8
   16e32:	b002      	add	sp, #8
   16e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(dst + *dst_len, data, data_len);
   16e38:	7828      	ldrb	r0, [r5, #0]
   16e3a:	463a      	mov	r2, r7
   16e3c:	4649      	mov	r1, r9
   16e3e:	4450      	add	r0, sl
   16e40:	f7fb fb40 	bl	124c4 <memcpy>
    *dst_len += data_len;
   16e44:	782b      	ldrb	r3, [r5, #0]
   16e46:	441e      	add	r6, r3
   16e48:	702e      	strb	r6, [r5, #0]
    return 0;
   16e4a:	e7f1      	b.n	16e30 <ble_hs_adv_set_flat_mbuf+0x32>

00016e4c <ble_hs_adv_set_array_uuid16>:
{
   16e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16e50:	b082      	sub	sp, #8
   16e52:	460e      	mov	r6, r1
   16e54:	4690      	mov	r8, r2
   16e56:	469a      	mov	sl, r3
   16e58:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   16e5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, num_elems * 2, max_len, dst,
   16e5c:	0049      	lsls	r1, r1, #1
   16e5e:	9501      	str	r5, [sp, #4]
   16e60:	9700      	str	r7, [sp, #0]
   16e62:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   16e66:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   16e6a:	f7ff ff94 	bl	16d96 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   16e6e:	4681      	mov	r9, r0
   16e70:	b9b8      	cbnz	r0, 16ea2 <ble_hs_adv_set_array_uuid16+0x56>
    for (i = 0; i < num_elems; i++) {
   16e72:	4604      	mov	r4, r0
   16e74:	e009      	b.n	16e8a <ble_hs_adv_set_array_uuid16+0x3e>
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   16e76:	7839      	ldrb	r1, [r7, #0]
   16e78:	4451      	add	r1, sl
   16e7a:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   16e7e:	f004 fbcf 	bl	1b620 <ble_uuid_flat>
            *dst_len += 2;
   16e82:	783b      	ldrb	r3, [r7, #0]
   16e84:	3302      	adds	r3, #2
   16e86:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   16e88:	3401      	adds	r4, #1
   16e8a:	42a6      	cmp	r6, r4
   16e8c:	dd09      	ble.n	16ea2 <ble_hs_adv_set_array_uuid16+0x56>
        if (om) {
   16e8e:	2d00      	cmp	r5, #0
   16e90:	d0f1      	beq.n	16e76 <ble_hs_adv_set_array_uuid16+0x2a>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   16e92:	4629      	mov	r1, r5
   16e94:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   16e98:	f004 fbf1 	bl	1b67e <ble_uuid_to_mbuf>
            if (rc) {
   16e9c:	2800      	cmp	r0, #0
   16e9e:	d0f3      	beq.n	16e88 <ble_hs_adv_set_array_uuid16+0x3c>
                return rc;
   16ea0:	4681      	mov	r9, r0
}
   16ea2:	4648      	mov	r0, r9
   16ea4:	b002      	add	sp, #8
   16ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00016eaa <ble_hs_adv_set_array_uuid128>:
{
   16eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16eae:	b082      	sub	sp, #8
   16eb0:	460e      	mov	r6, r1
   16eb2:	4690      	mov	r8, r2
   16eb4:	469a      	mov	sl, r3
   16eb6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   16eb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, num_elems * 16, max_len, dst,
   16eba:	0109      	lsls	r1, r1, #4
   16ebc:	9501      	str	r5, [sp, #4]
   16ebe:	9700      	str	r7, [sp, #0]
   16ec0:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   16ec4:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   16ec8:	f7ff ff65 	bl	16d96 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   16ecc:	4681      	mov	r9, r0
   16ece:	b9c8      	cbnz	r0, 16f04 <ble_hs_adv_set_array_uuid128+0x5a>
    for (i = 0; i < num_elems; i++) {
   16ed0:	4604      	mov	r4, r0
   16ed2:	e00a      	b.n	16eea <ble_hs_adv_set_array_uuid128+0x40>
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   16ed4:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   16ed8:	7839      	ldrb	r1, [r7, #0]
   16eda:	4451      	add	r1, sl
   16edc:	4440      	add	r0, r8
   16ede:	f004 fb9f 	bl	1b620 <ble_uuid_flat>
            *dst_len += 16;
   16ee2:	783b      	ldrb	r3, [r7, #0]
   16ee4:	3310      	adds	r3, #16
   16ee6:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   16ee8:	3401      	adds	r4, #1
   16eea:	42a6      	cmp	r6, r4
   16eec:	dd0a      	ble.n	16f04 <ble_hs_adv_set_array_uuid128+0x5a>
        if (om) {
   16eee:	2d00      	cmp	r5, #0
   16ef0:	d0f0      	beq.n	16ed4 <ble_hs_adv_set_array_uuid128+0x2a>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   16ef2:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   16ef6:	4629      	mov	r1, r5
   16ef8:	4440      	add	r0, r8
   16efa:	f004 fbc0 	bl	1b67e <ble_uuid_to_mbuf>
            if (rc) {
   16efe:	2800      	cmp	r0, #0
   16f00:	d0f2      	beq.n	16ee8 <ble_hs_adv_set_array_uuid128+0x3e>
                return rc;
   16f02:	4681      	mov	r9, r0
}
   16f04:	4648      	mov	r0, r9
   16f06:	b002      	add	sp, #8
   16f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00016f0c <ble_hs_adv_set_array_uuid32>:
{
   16f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16f10:	b084      	sub	sp, #16
   16f12:	460e      	mov	r6, r1
   16f14:	4690      	mov	r8, r2
   16f16:	469a      	mov	sl, r3
   16f18:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   16f1a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * 4, max_len, dst,
   16f1c:	0089      	lsls	r1, r1, #2
   16f1e:	9501      	str	r5, [sp, #4]
   16f20:	9700      	str	r7, [sp, #0]
   16f22:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   16f26:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   16f2a:	f7ff ff34 	bl	16d96 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   16f2e:	4681      	mov	r9, r0
   16f30:	b9e8      	cbnz	r0, 16f6e <ble_hs_adv_set_array_uuid32+0x62>
    for (i = 0; i < num_elems; i++) {
   16f32:	4604      	mov	r4, r0
   16f34:	e00a      	b.n	16f4c <ble_hs_adv_set_array_uuid32+0x40>
            put_le32(dst + *dst_len, elems[i].value);
   16f36:	7838      	ldrb	r0, [r7, #0]
   16f38:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   16f3c:	6859      	ldr	r1, [r3, #4]
   16f3e:	4450      	add	r0, sl
   16f40:	f007 fdf3 	bl	1eb2a <put_le32>
            *dst_len += 4;
   16f44:	783b      	ldrb	r3, [r7, #0]
   16f46:	3304      	adds	r3, #4
   16f48:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   16f4a:	3401      	adds	r4, #1
   16f4c:	42a6      	cmp	r6, r4
   16f4e:	dd0e      	ble.n	16f6e <ble_hs_adv_set_array_uuid32+0x62>
        if (om) {
   16f50:	2d00      	cmp	r5, #0
   16f52:	d0f0      	beq.n	16f36 <ble_hs_adv_set_array_uuid32+0x2a>
            uuid_le = htole32(elems[i].value);
   16f54:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   16f58:	685b      	ldr	r3, [r3, #4]
   16f5a:	a904      	add	r1, sp, #16
   16f5c:	f841 3d04 	str.w	r3, [r1, #-4]!
            rc = os_mbuf_append(om, &uuid_le, sizeof(uuid_le));
   16f60:	2204      	movs	r2, #4
   16f62:	4628      	mov	r0, r5
   16f64:	f7f9 ffd6 	bl	10f14 <os_mbuf_append>
            if (rc) {
   16f68:	2800      	cmp	r0, #0
   16f6a:	d0ee      	beq.n	16f4a <ble_hs_adv_set_array_uuid32+0x3e>
                return rc;
   16f6c:	4681      	mov	r9, r0
}
   16f6e:	4648      	mov	r0, r9
   16f70:	b004      	add	sp, #16
   16f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00016f76 <ble_hs_adv_set_array16>:
{
   16f76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16f7a:	b084      	sub	sp, #16
   16f7c:	460e      	mov	r6, r1
   16f7e:	4690      	mov	r8, r2
   16f80:	469a      	mov	sl, r3
   16f82:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   16f84:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * sizeof *elems, max_len, dst,
   16f86:	0049      	lsls	r1, r1, #1
   16f88:	9501      	str	r5, [sp, #4]
   16f8a:	9700      	str	r7, [sp, #0]
   16f8c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   16f90:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   16f94:	f7ff feff 	bl	16d96 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   16f98:	4681      	mov	r9, r0
   16f9a:	b9d8      	cbnz	r0, 16fd4 <ble_hs_adv_set_array16+0x5e>
    for (i = 0; i < num_elems; i++) {
   16f9c:	4604      	mov	r4, r0
   16f9e:	e009      	b.n	16fb4 <ble_hs_adv_set_array16+0x3e>
            put_le16(dst + *dst_len, elems[i]);
   16fa0:	7838      	ldrb	r0, [r7, #0]
   16fa2:	f838 1014 	ldrh.w	r1, [r8, r4, lsl #1]
   16fa6:	4450      	add	r0, sl
   16fa8:	f007 fdbb 	bl	1eb22 <put_le16>
            *dst_len += sizeof elems[i];
   16fac:	783b      	ldrb	r3, [r7, #0]
   16fae:	3302      	adds	r3, #2
   16fb0:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   16fb2:	3401      	adds	r4, #1
   16fb4:	42a6      	cmp	r6, r4
   16fb6:	dd0d      	ble.n	16fd4 <ble_hs_adv_set_array16+0x5e>
        if (om) {
   16fb8:	2d00      	cmp	r5, #0
   16fba:	d0f1      	beq.n	16fa0 <ble_hs_adv_set_array16+0x2a>
            tmp = htole16(elems[i]);
   16fbc:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
   16fc0:	a904      	add	r1, sp, #16
   16fc2:	f821 3d02 	strh.w	r3, [r1, #-2]!
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
   16fc6:	2202      	movs	r2, #2
   16fc8:	4628      	mov	r0, r5
   16fca:	f7f9 ffa3 	bl	10f14 <os_mbuf_append>
            if (rc) {
   16fce:	2800      	cmp	r0, #0
   16fd0:	d0ef      	beq.n	16fb2 <ble_hs_adv_set_array16+0x3c>
                return rc;
   16fd2:	4681      	mov	r9, r0
}
   16fd4:	4648      	mov	r0, r9
   16fd6:	b004      	add	sp, #16
   16fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00016fdc <adv_set_fields>:
{
   16fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16fe0:	b086      	sub	sp, #24
   16fe2:	4604      	mov	r4, r0
   16fe4:	4688      	mov	r8, r1
   16fe6:	461f      	mov	r7, r3
   16fe8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    if (dst_len) {
   16fea:	4615      	mov	r5, r2
   16fec:	b10a      	cbz	r2, 16ff2 <adv_set_fields+0x16>
        *dst_len = 0;
   16fee:	2300      	movs	r3, #0
   16ff0:	7013      	strb	r3, [r2, #0]
    if (adv_fields->flags != 0) {
   16ff2:	7823      	ldrb	r3, [r4, #0]
   16ff4:	2b00      	cmp	r3, #0
   16ff6:	f040 80cd 	bne.w	17194 <adv_set_fields+0x1b8>
    if (adv_fields->uuids16 != NULL && adv_fields->num_uuids16) {
   16ffa:	6862      	ldr	r2, [r4, #4]
   16ffc:	b18a      	cbz	r2, 17022 <adv_set_fields+0x46>
   16ffe:	7a21      	ldrb	r1, [r4, #8]
   17000:	b179      	cbz	r1, 17022 <adv_set_fields+0x46>
        if (adv_fields->uuids16_is_complete) {
   17002:	7a63      	ldrb	r3, [r4, #9]
   17004:	f013 0f01 	tst.w	r3, #1
   17008:	f000 80d5 	beq.w	171b6 <adv_set_fields+0x1da>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS16;
   1700c:	2003      	movs	r0, #3
        rc = ble_hs_adv_set_array_uuid16(type, adv_fields->num_uuids16,
   1700e:	9602      	str	r6, [sp, #8]
   17010:	9701      	str	r7, [sp, #4]
   17012:	9500      	str	r5, [sp, #0]
   17014:	4643      	mov	r3, r8
   17016:	f7ff ff19 	bl	16e4c <ble_hs_adv_set_array_uuid16>
        if (rc != 0) {
   1701a:	4603      	mov	r3, r0
   1701c:	2800      	cmp	r0, #0
   1701e:	f040 80c6 	bne.w	171ae <adv_set_fields+0x1d2>
    if (adv_fields->uuids32 != NULL && adv_fields->num_uuids32) {
   17022:	68e2      	ldr	r2, [r4, #12]
   17024:	b18a      	cbz	r2, 1704a <adv_set_fields+0x6e>
   17026:	7c21      	ldrb	r1, [r4, #16]
   17028:	b179      	cbz	r1, 1704a <adv_set_fields+0x6e>
        if (adv_fields->uuids32_is_complete) {
   1702a:	7c63      	ldrb	r3, [r4, #17]
   1702c:	f013 0f01 	tst.w	r3, #1
   17030:	f000 80c3 	beq.w	171ba <adv_set_fields+0x1de>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS32;
   17034:	2005      	movs	r0, #5
        rc = ble_hs_adv_set_array_uuid32(type, adv_fields->num_uuids32,
   17036:	9602      	str	r6, [sp, #8]
   17038:	9701      	str	r7, [sp, #4]
   1703a:	9500      	str	r5, [sp, #0]
   1703c:	4643      	mov	r3, r8
   1703e:	f7ff ff65 	bl	16f0c <ble_hs_adv_set_array_uuid32>
        if (rc != 0) {
   17042:	4603      	mov	r3, r0
   17044:	2800      	cmp	r0, #0
   17046:	f040 80b2 	bne.w	171ae <adv_set_fields+0x1d2>
    if (adv_fields->uuids128 != NULL && adv_fields->num_uuids128 > 0) {
   1704a:	6962      	ldr	r2, [r4, #20]
   1704c:	b18a      	cbz	r2, 17072 <adv_set_fields+0x96>
   1704e:	7e21      	ldrb	r1, [r4, #24]
   17050:	b179      	cbz	r1, 17072 <adv_set_fields+0x96>
        if (adv_fields->uuids128_is_complete) {
   17052:	7e63      	ldrb	r3, [r4, #25]
   17054:	f013 0f01 	tst.w	r3, #1
   17058:	f000 80b1 	beq.w	171be <adv_set_fields+0x1e2>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS128;
   1705c:	2007      	movs	r0, #7
        rc = ble_hs_adv_set_array_uuid128(type, adv_fields->num_uuids128,
   1705e:	9602      	str	r6, [sp, #8]
   17060:	9701      	str	r7, [sp, #4]
   17062:	9500      	str	r5, [sp, #0]
   17064:	4643      	mov	r3, r8
   17066:	f7ff ff20 	bl	16eaa <ble_hs_adv_set_array_uuid128>
        if (rc != 0) {
   1706a:	4603      	mov	r3, r0
   1706c:	2800      	cmp	r0, #0
   1706e:	f040 809e 	bne.w	171ae <adv_set_fields+0x1d2>
    if (adv_fields->name != NULL && adv_fields->name_len > 0) {
   17072:	69e2      	ldr	r2, [r4, #28]
   17074:	b19a      	cbz	r2, 1709e <adv_set_fields+0xc2>
   17076:	f894 1020 	ldrb.w	r1, [r4, #32]
   1707a:	b181      	cbz	r1, 1709e <adv_set_fields+0xc2>
        if (adv_fields->name_is_complete) {
   1707c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   17080:	f013 0f01 	tst.w	r3, #1
   17084:	f000 809d 	beq.w	171c2 <adv_set_fields+0x1e6>
            type = BLE_HS_ADV_TYPE_COMP_NAME;
   17088:	2009      	movs	r0, #9
        rc = ble_hs_adv_set_flat_mbuf(type, adv_fields->name_len,
   1708a:	9602      	str	r6, [sp, #8]
   1708c:	9701      	str	r7, [sp, #4]
   1708e:	9500      	str	r5, [sp, #0]
   17090:	4643      	mov	r3, r8
   17092:	f7ff feb4 	bl	16dfe <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   17096:	4603      	mov	r3, r0
   17098:	2800      	cmp	r0, #0
   1709a:	f040 8088 	bne.w	171ae <adv_set_fields+0x1d2>
    if (adv_fields->tx_pwr_lvl_is_present) {
   1709e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   170a2:	f013 0f01 	tst.w	r3, #1
   170a6:	d014      	beq.n	170d2 <adv_set_fields+0xf6>
        if (adv_fields->tx_pwr_lvl == BLE_HS_ADV_TX_PWR_LVL_AUTO) {
   170a8:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
   170ac:	f113 0f80 	cmn.w	r3, #128	; 0x80
   170b0:	f000 8089 	beq.w	171c6 <adv_set_fields+0x1ea>
            tx_pwr_lvl = adv_fields->tx_pwr_lvl;
   170b4:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_TX_PWR_LVL, 1,
   170b8:	9602      	str	r6, [sp, #8]
   170ba:	9701      	str	r7, [sp, #4]
   170bc:	9500      	str	r5, [sp, #0]
   170be:	4643      	mov	r3, r8
   170c0:	f10d 0217 	add.w	r2, sp, #23
   170c4:	2101      	movs	r1, #1
   170c6:	200a      	movs	r0, #10
   170c8:	f7ff fe99 	bl	16dfe <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   170cc:	4603      	mov	r3, r0
   170ce:	2800      	cmp	r0, #0
   170d0:	d16d      	bne.n	171ae <adv_set_fields+0x1d2>
    if (adv_fields->slave_itvl_range != NULL) {
   170d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   170d4:	b152      	cbz	r2, 170ec <adv_set_fields+0x110>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SLAVE_ITVL_RANGE,
   170d6:	9602      	str	r6, [sp, #8]
   170d8:	9701      	str	r7, [sp, #4]
   170da:	9500      	str	r5, [sp, #0]
   170dc:	4643      	mov	r3, r8
   170de:	2104      	movs	r1, #4
   170e0:	2012      	movs	r0, #18
   170e2:	f7ff fe8c 	bl	16dfe <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   170e6:	4603      	mov	r3, r0
   170e8:	2800      	cmp	r0, #0
   170ea:	d160      	bne.n	171ae <adv_set_fields+0x1d2>
    if (adv_fields->svc_data_uuid16 != NULL) {
   170ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   170ee:	b15a      	cbz	r2, 17108 <adv_set_fields+0x12c>
                                      adv_fields->svc_data_uuid16_len,
   170f0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID16,
   170f4:	9602      	str	r6, [sp, #8]
   170f6:	9701      	str	r7, [sp, #4]
   170f8:	9500      	str	r5, [sp, #0]
   170fa:	4643      	mov	r3, r8
   170fc:	2016      	movs	r0, #22
   170fe:	f7ff fe7e 	bl	16dfe <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   17102:	4603      	mov	r3, r0
   17104:	2800      	cmp	r0, #0
   17106:	d152      	bne.n	171ae <adv_set_fields+0x1d2>
    if (adv_fields->public_tgt_addr != NULL &&
   17108:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1710a:	b11a      	cbz	r2, 17114 <adv_set_fields+0x138>
        adv_fields->num_public_tgt_addrs != 0) {
   1710c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    if (adv_fields->public_tgt_addr != NULL &&
   17110:	2b00      	cmp	r3, #0
   17112:	d161      	bne.n	171d8 <adv_set_fields+0x1fc>
    if (adv_fields->appearance_is_present) {
   17114:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   17118:	f013 0f01 	tst.w	r3, #1
   1711c:	d16a      	bne.n	171f4 <adv_set_fields+0x218>
    if (adv_fields->adv_itvl_is_present) {
   1711e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   17122:	f013 0f01 	tst.w	r3, #1
   17126:	d173      	bne.n	17210 <adv_set_fields+0x234>
    if (adv_fields->svc_data_uuid32 != NULL) {
   17128:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1712a:	b15a      	cbz	r2, 17144 <adv_set_fields+0x168>
                                     adv_fields->svc_data_uuid32_len,
   1712c:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID32,
   17130:	9602      	str	r6, [sp, #8]
   17132:	9701      	str	r7, [sp, #4]
   17134:	9500      	str	r5, [sp, #0]
   17136:	4643      	mov	r3, r8
   17138:	2020      	movs	r0, #32
   1713a:	f7ff fe60 	bl	16dfe <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1713e:	4603      	mov	r3, r0
   17140:	2800      	cmp	r0, #0
   17142:	d134      	bne.n	171ae <adv_set_fields+0x1d2>
    if (adv_fields->svc_data_uuid128 != NULL) {
   17144:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   17146:	b152      	cbz	r2, 1715e <adv_set_fields+0x182>
                                      adv_fields->svc_data_uuid128_len,
   17148:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID128,
   1714c:	9602      	str	r6, [sp, #8]
   1714e:	9701      	str	r7, [sp, #4]
   17150:	9500      	str	r5, [sp, #0]
   17152:	4643      	mov	r3, r8
   17154:	2021      	movs	r0, #33	; 0x21
   17156:	f7ff fe52 	bl	16dfe <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1715a:	4603      	mov	r3, r0
   1715c:	bb38      	cbnz	r0, 171ae <adv_set_fields+0x1d2>
    if (adv_fields->uri != NULL) {
   1715e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   17160:	b152      	cbz	r2, 17178 <adv_set_fields+0x19c>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_URI, adv_fields->uri_len,
   17162:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   17166:	9602      	str	r6, [sp, #8]
   17168:	9701      	str	r7, [sp, #4]
   1716a:	9500      	str	r5, [sp, #0]
   1716c:	4643      	mov	r3, r8
   1716e:	2024      	movs	r0, #36	; 0x24
   17170:	f7ff fe45 	bl	16dfe <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   17174:	4603      	mov	r3, r0
   17176:	b9d0      	cbnz	r0, 171ae <adv_set_fields+0x1d2>
    if (adv_fields->mfg_data != NULL) {
   17178:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1717a:	2a00      	cmp	r2, #0
   1717c:	d057      	beq.n	1722e <adv_set_fields+0x252>
                                      adv_fields->mfg_data_len,
   1717e:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_MFG_DATA,
   17182:	9602      	str	r6, [sp, #8]
   17184:	9701      	str	r7, [sp, #4]
   17186:	9500      	str	r5, [sp, #0]
   17188:	4643      	mov	r3, r8
   1718a:	20ff      	movs	r0, #255	; 0xff
   1718c:	f7ff fe37 	bl	16dfe <ble_hs_adv_set_flat_mbuf>
   17190:	4603      	mov	r3, r0
   17192:	e00c      	b.n	171ae <adv_set_fields+0x1d2>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_FLAGS, 1,
   17194:	9602      	str	r6, [sp, #8]
   17196:	9701      	str	r7, [sp, #4]
   17198:	9500      	str	r5, [sp, #0]
   1719a:	4643      	mov	r3, r8
   1719c:	4622      	mov	r2, r4
   1719e:	2101      	movs	r1, #1
   171a0:	4608      	mov	r0, r1
   171a2:	f7ff fe2c 	bl	16dfe <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   171a6:	4603      	mov	r3, r0
   171a8:	2800      	cmp	r0, #0
   171aa:	f43f af26 	beq.w	16ffa <adv_set_fields+0x1e>
}
   171ae:	4618      	mov	r0, r3
   171b0:	b006      	add	sp, #24
   171b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
   171b6:	2002      	movs	r0, #2
   171b8:	e729      	b.n	1700e <adv_set_fields+0x32>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
   171ba:	2004      	movs	r0, #4
   171bc:	e73b      	b.n	17036 <adv_set_fields+0x5a>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
   171be:	2006      	movs	r0, #6
   171c0:	e74d      	b.n	1705e <adv_set_fields+0x82>
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
   171c2:	2008      	movs	r0, #8
   171c4:	e761      	b.n	1708a <adv_set_fields+0xae>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
   171c6:	f10d 0017 	add.w	r0, sp, #23
   171ca:	f001 f9d2 	bl	18572 <ble_hs_hci_util_read_adv_tx_pwr>
            if (rc != 0) {
   171ce:	4603      	mov	r3, r0
   171d0:	2800      	cmp	r0, #0
   171d2:	f43f af71 	beq.w	170b8 <adv_set_fields+0xdc>
   171d6:	e7ea      	b.n	171ae <adv_set_fields+0x1d2>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_PUBLIC_TGT_ADDR,
   171d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   171dc:	0059      	lsls	r1, r3, #1
   171de:	9602      	str	r6, [sp, #8]
   171e0:	9701      	str	r7, [sp, #4]
   171e2:	9500      	str	r5, [sp, #0]
   171e4:	4643      	mov	r3, r8
   171e6:	2017      	movs	r0, #23
   171e8:	f7ff fe09 	bl	16dfe <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   171ec:	4603      	mov	r3, r0
   171ee:	2800      	cmp	r0, #0
   171f0:	d090      	beq.n	17114 <adv_set_fields+0x138>
   171f2:	e7dc      	b.n	171ae <adv_set_fields+0x1d2>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_APPEARANCE,
   171f4:	9602      	str	r6, [sp, #8]
   171f6:	9701      	str	r7, [sp, #4]
   171f8:	9500      	str	r5, [sp, #0]
   171fa:	4643      	mov	r3, r8
   171fc:	f104 0236 	add.w	r2, r4, #54	; 0x36
   17200:	2102      	movs	r1, #2
   17202:	2019      	movs	r0, #25
   17204:	f7ff fdfb 	bl	16dfe <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   17208:	4603      	mov	r3, r0
   1720a:	2800      	cmp	r0, #0
   1720c:	d087      	beq.n	1711e <adv_set_fields+0x142>
   1720e:	e7ce      	b.n	171ae <adv_set_fields+0x1d2>
        rc = ble_hs_adv_set_array16(BLE_HS_ADV_TYPE_ADV_ITVL, 1,
   17210:	9602      	str	r6, [sp, #8]
   17212:	9701      	str	r7, [sp, #4]
   17214:	9500      	str	r5, [sp, #0]
   17216:	4643      	mov	r3, r8
   17218:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   1721c:	2101      	movs	r1, #1
   1721e:	201a      	movs	r0, #26
   17220:	f7ff fea9 	bl	16f76 <ble_hs_adv_set_array16>
        if (rc != 0) {
   17224:	4603      	mov	r3, r0
   17226:	2800      	cmp	r0, #0
   17228:	f43f af7e 	beq.w	17128 <adv_set_fields+0x14c>
   1722c:	e7bf      	b.n	171ae <adv_set_fields+0x1d2>
    return 0;
   1722e:	2300      	movs	r3, #0
   17230:	e7bd      	b.n	171ae <adv_set_fields+0x1d2>

00017232 <ble_hs_adv_set_fields>:
{
   17232:	b510      	push	{r4, lr}
   17234:	b082      	sub	sp, #8
    return adv_set_fields(adv_fields, dst, dst_len, max_len, NULL);
   17236:	2400      	movs	r4, #0
   17238:	9400      	str	r4, [sp, #0]
   1723a:	f7ff fecf 	bl	16fdc <adv_set_fields>
}
   1723e:	b002      	add	sp, #8
   17240:	bd10      	pop	{r4, pc}

00017242 <ble_hs_adv_parse>:
{
   17242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17244:	4605      	mov	r5, r0
   17246:	460c      	mov	r4, r1
   17248:	4617      	mov	r7, r2
   1724a:	461e      	mov	r6, r3
    while (length > 1) {
   1724c:	2c01      	cmp	r4, #1
   1724e:	d90f      	bls.n	17270 <ble_hs_adv_parse+0x2e>
        if (field->length >= length) {
   17250:	782b      	ldrb	r3, [r5, #0]
   17252:	42a3      	cmp	r3, r4
   17254:	d20f      	bcs.n	17276 <ble_hs_adv_parse+0x34>
        if (func(field, user_data) == 0) {
   17256:	4631      	mov	r1, r6
   17258:	4628      	mov	r0, r5
   1725a:	47b8      	blx	r7
   1725c:	4603      	mov	r3, r0
   1725e:	b140      	cbz	r0, 17272 <ble_hs_adv_parse+0x30>
        length -= 1 + field->length;
   17260:	782b      	ldrb	r3, [r5, #0]
   17262:	1ae4      	subs	r4, r4, r3
   17264:	b2e4      	uxtb	r4, r4
   17266:	3c01      	subs	r4, #1
   17268:	b2e4      	uxtb	r4, r4
        data += 1 + field->length;
   1726a:	3301      	adds	r3, #1
   1726c:	441d      	add	r5, r3
   1726e:	e7ed      	b.n	1724c <ble_hs_adv_parse+0xa>
    return 0;
   17270:	2300      	movs	r3, #0
}
   17272:	4618      	mov	r0, r3
   17274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return BLE_HS_EBADDATA;
   17276:	230a      	movs	r3, #10
   17278:	e7fb      	b.n	17272 <ble_hs_adv_parse+0x30>
	...

0001727c <ble_hs_adv_find_field>:

int
ble_hs_adv_find_field(uint8_t type, const uint8_t *data, uint8_t length,
                      const struct ble_hs_adv_field **out)
{
   1727c:	b530      	push	{r4, r5, lr}
   1727e:	b083      	sub	sp, #12
   17280:	460c      	mov	r4, r1
   17282:	4611      	mov	r1, r2
   17284:	461d      	mov	r5, r3
    int rc;
    struct find_field_data ffd = {
   17286:	f88d 0000 	strb.w	r0, [sp]
   1728a:	2300      	movs	r3, #0
   1728c:	9301      	str	r3, [sp, #4]
            .type = type,
            .field = NULL,
    };

    rc = ble_hs_adv_parse(data, length, find_field_func, &ffd);
   1728e:	466b      	mov	r3, sp
   17290:	4a06      	ldr	r2, [pc, #24]	; (172ac <ble_hs_adv_find_field+0x30>)
   17292:	4620      	mov	r0, r4
   17294:	f7ff ffd5 	bl	17242 <ble_hs_adv_parse>
    if (rc != 0) {
   17298:	4603      	mov	r3, r0
   1729a:	b910      	cbnz	r0, 172a2 <ble_hs_adv_find_field+0x26>
        return rc;
    }

    if (!ffd.field) {
   1729c:	9a01      	ldr	r2, [sp, #4]
   1729e:	b11a      	cbz	r2, 172a8 <ble_hs_adv_find_field+0x2c>
        return BLE_HS_ENOENT;
    }

    *out = ffd.field;
   172a0:	602a      	str	r2, [r5, #0]

    return 0;
}
   172a2:	4618      	mov	r0, r3
   172a4:	b003      	add	sp, #12
   172a6:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ENOENT;
   172a8:	2305      	movs	r3, #5
   172aa:	e7fa      	b.n	172a2 <ble_hs_adv_find_field+0x26>
   172ac:	00016d85 	.word	0x00016d85

000172b0 <ble_hs_atomic_conn_delete>:

#include "ble_hs_priv.h"

int
ble_hs_atomic_conn_delete(uint16_t conn_handle)
{
   172b0:	b510      	push	{r4, lr}
   172b2:	4604      	mov	r4, r0
    struct ble_hs_conn *conn;

    ble_hs_lock();
   172b4:	f7ff fb22 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   172b8:	4620      	mov	r0, r4
   172ba:	f000 f8f5 	bl	174a8 <ble_hs_conn_find>
    if (conn != NULL) {
   172be:	4604      	mov	r4, r0
   172c0:	b120      	cbz	r0, 172cc <ble_hs_atomic_conn_delete+0x1c>
        ble_hs_conn_remove(conn);
   172c2:	f000 f8e1 	bl	17488 <ble_hs_conn_remove>
        ble_hs_conn_free(conn);
   172c6:	4620      	mov	r0, r4
   172c8:	f000 f880 	bl	173cc <ble_hs_conn_free>

    }
    ble_hs_unlock();
   172cc:	f7ff fb1a 	bl	16904 <ble_hs_unlock>

    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   172d0:	b10c      	cbz	r4, 172d6 <ble_hs_atomic_conn_delete+0x26>
   172d2:	2000      	movs	r0, #0
}
   172d4:	bd10      	pop	{r4, pc}
    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   172d6:	2007      	movs	r0, #7
   172d8:	e7fc      	b.n	172d4 <ble_hs_atomic_conn_delete+0x24>

000172da <ble_hs_atomic_conn_flags>:
    ble_hs_unlock();
}

int
ble_hs_atomic_conn_flags(uint16_t conn_handle, ble_hs_conn_flags_t *out_flags)
{
   172da:	b538      	push	{r3, r4, r5, lr}
   172dc:	4605      	mov	r5, r0
   172de:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   172e0:	f7ff fb0c 	bl	168fc <ble_hs_lock>

    conn = ble_hs_conn_find(conn_handle);
   172e4:	4628      	mov	r0, r5
   172e6:	f000 f8df 	bl	174a8 <ble_hs_conn_find>
    if (conn == NULL) {
   172ea:	b140      	cbz	r0, 172fe <ble_hs_atomic_conn_flags+0x24>
        rc = BLE_HS_ENOTCONN;
    } else {
        rc = 0;
        if (out_flags != NULL) {
   172ec:	b14c      	cbz	r4, 17302 <ble_hs_atomic_conn_flags+0x28>
            *out_flags = conn->bhc_flags;
   172ee:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   172f2:	7023      	strb	r3, [r4, #0]
        rc = 0;
   172f4:	2400      	movs	r4, #0
        }
    }

    ble_hs_unlock();
   172f6:	f7ff fb05 	bl	16904 <ble_hs_unlock>

    return rc;
}
   172fa:	4620      	mov	r0, r4
   172fc:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   172fe:	2407      	movs	r4, #7
   17300:	e7f9      	b.n	172f6 <ble_hs_atomic_conn_flags+0x1c>
        rc = 0;
   17302:	2400      	movs	r4, #0
   17304:	e7f7      	b.n	172f6 <ble_hs_atomic_conn_flags+0x1c>

00017306 <ble_hs_atomic_first_conn_handle>:
    return rc;
}

uint16_t
ble_hs_atomic_first_conn_handle(void)
{
   17306:	b510      	push	{r4, lr}
    const struct ble_hs_conn *conn;
    uint16_t conn_handle;

    ble_hs_lock();
   17308:	f7ff faf8 	bl	168fc <ble_hs_lock>

    conn = ble_hs_conn_first();
   1730c:	f000 f8fe 	bl	1750c <ble_hs_conn_first>
    if (conn != NULL) {
   17310:	b120      	cbz	r0, 1731c <ble_hs_atomic_first_conn_handle+0x16>
        conn_handle = conn->bhc_handle;
   17312:	8884      	ldrh	r4, [r0, #4]
    } else {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
    }

    ble_hs_unlock();
   17314:	f7ff faf6 	bl	16904 <ble_hs_unlock>

    return conn_handle;
}
   17318:	4620      	mov	r0, r4
   1731a:	bd10      	pop	{r4, pc}
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1731c:	f64f 74ff 	movw	r4, #65535	; 0xffff
   17320:	e7f8      	b.n	17314 <ble_hs_atomic_first_conn_handle+0xe>
	...

00017324 <ble_hs_conn_can_alloc>:

static const uint8_t ble_hs_conn_null_addr[6];

int
ble_hs_conn_can_alloc(void)
{
   17324:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif

    return ble_hs_conn_pool.mp_num_free >= 1 &&
   17326:	4b09      	ldr	r3, [pc, #36]	; (1734c <ble_hs_conn_can_alloc+0x28>)
   17328:	88db      	ldrh	r3, [r3, #6]
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   1732a:	b15b      	cbz	r3, 17344 <ble_hs_conn_can_alloc+0x20>
   1732c:	4b08      	ldr	r3, [pc, #32]	; (17350 <ble_hs_conn_can_alloc+0x2c>)
   1732e:	88db      	ldrh	r3, [r3, #6]
    return ble_hs_conn_pool.mp_num_free >= 1 &&
   17330:	2b02      	cmp	r3, #2
   17332:	d801      	bhi.n	17338 <ble_hs_conn_can_alloc+0x14>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   17334:	2300      	movs	r3, #0
   17336:	e006      	b.n	17346 <ble_hs_conn_can_alloc+0x22>
           ble_gatts_conn_can_alloc();
   17338:	f7ff f8c6 	bl	164c8 <ble_gatts_conn_can_alloc>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   1733c:	4603      	mov	r3, r0
   1733e:	b110      	cbz	r0, 17346 <ble_hs_conn_can_alloc+0x22>
   17340:	2301      	movs	r3, #1
   17342:	e000      	b.n	17346 <ble_hs_conn_can_alloc+0x22>
   17344:	2300      	movs	r3, #0
}
   17346:	4618      	mov	r0, r3
   17348:	bd08      	pop	{r3, pc}
   1734a:	bf00      	nop
   1734c:	20002880 	.word	0x20002880
   17350:	20003d7c 	.word	0x20003d7c

00017354 <ble_hs_conn_chan_find_by_scid>:
    return NULL;
#endif

    struct ble_l2cap_chan *chan;

    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   17354:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   17356:	b128      	cbz	r0, 17364 <ble_hs_conn_chan_find_by_scid+0x10>
        if (chan->scid == cid) {
   17358:	8903      	ldrh	r3, [r0, #8]
   1735a:	428b      	cmp	r3, r1
   1735c:	d004      	beq.n	17368 <ble_hs_conn_chan_find_by_scid+0x14>
            return chan;
        }
        if (chan->scid > cid) {
   1735e:	d802      	bhi.n	17366 <ble_hs_conn_chan_find_by_scid+0x12>
    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   17360:	6800      	ldr	r0, [r0, #0]
   17362:	e7f8      	b.n	17356 <ble_hs_conn_chan_find_by_scid+0x2>
   17364:	4770      	bx	lr
            return NULL;
   17366:	2000      	movs	r0, #0
        }
    }

    return NULL;
}
   17368:	4770      	bx	lr

0001736a <ble_hs_conn_chan_insert>:
    return NULL;
}

int
ble_hs_conn_chan_insert(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   1736a:	b470      	push	{r4, r5, r6}

    struct ble_l2cap_chan *prev;
    struct ble_l2cap_chan *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   1736c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   1736e:	4633      	mov	r3, r6
    prev = NULL;
   17370:	2500      	movs	r5, #0
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   17372:	b13b      	cbz	r3, 17384 <ble_hs_conn_chan_insert+0x1a>
        if (cur->scid == chan->scid) {
   17374:	891c      	ldrh	r4, [r3, #8]
   17376:	890a      	ldrh	r2, [r1, #8]
   17378:	4294      	cmp	r4, r2
   1737a:	d00e      	beq.n	1739a <ble_hs_conn_chan_insert+0x30>
            return BLE_HS_EALREADY;
        }
        if (cur->scid > chan->scid) {
   1737c:	d802      	bhi.n	17384 <ble_hs_conn_chan_insert+0x1a>
            break;
        }

        prev = cur;
   1737e:	461d      	mov	r5, r3
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   17380:	681b      	ldr	r3, [r3, #0]
   17382:	e7f6      	b.n	17372 <ble_hs_conn_chan_insert+0x8>
    }

    if (prev == NULL) {
   17384:	b12d      	cbz	r5, 17392 <ble_hs_conn_chan_insert+0x28>
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
    } else {
        SLIST_INSERT_AFTER(prev, chan, next);
   17386:	682b      	ldr	r3, [r5, #0]
   17388:	600b      	str	r3, [r1, #0]
   1738a:	6029      	str	r1, [r5, #0]
    }

    return 0;
   1738c:	2000      	movs	r0, #0
}
   1738e:	bc70      	pop	{r4, r5, r6}
   17390:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
   17392:	600e      	str	r6, [r1, #0]
   17394:	62c1      	str	r1, [r0, #44]	; 0x2c
    return 0;
   17396:	2000      	movs	r0, #0
   17398:	e7f9      	b.n	1738e <ble_hs_conn_chan_insert+0x24>
            return BLE_HS_EALREADY;
   1739a:	2002      	movs	r0, #2
   1739c:	e7f7      	b.n	1738e <ble_hs_conn_chan_insert+0x24>

0001739e <ble_hs_conn_delete_chan>:
    return NULL;
}

void
ble_hs_conn_delete_chan(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   1739e:	b508      	push	{r3, lr}
    if (conn->bhc_rx_chan == chan) {
   173a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
   173a2:	428b      	cmp	r3, r1
   173a4:	d005      	beq.n	173b2 <ble_hs_conn_delete_chan+0x14>
        conn->bhc_rx_chan = NULL;
    }

    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   173a6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   173a8:	428a      	cmp	r2, r1
   173aa:	d106      	bne.n	173ba <ble_hs_conn_delete_chan+0x1c>
   173ac:	6813      	ldr	r3, [r2, #0]
   173ae:	62c3      	str	r3, [r0, #44]	; 0x2c
   173b0:	e008      	b.n	173c4 <ble_hs_conn_delete_chan+0x26>
        conn->bhc_rx_chan = NULL;
   173b2:	2300      	movs	r3, #0
   173b4:	6303      	str	r3, [r0, #48]	; 0x30
   173b6:	e7f6      	b.n	173a6 <ble_hs_conn_delete_chan+0x8>
    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   173b8:	461a      	mov	r2, r3
   173ba:	6813      	ldr	r3, [r2, #0]
   173bc:	428b      	cmp	r3, r1
   173be:	d1fb      	bne.n	173b8 <ble_hs_conn_delete_chan+0x1a>
   173c0:	681b      	ldr	r3, [r3, #0]
   173c2:	6013      	str	r3, [r2, #0]
    ble_l2cap_chan_free(chan);
   173c4:	4608      	mov	r0, r1
   173c6:	f001 fdfd 	bl	18fc4 <ble_l2cap_chan_free>
}
   173ca:	bd08      	pop	{r3, pc}

000173cc <ble_hs_conn_free>:

    struct ble_l2cap_chan *chan;
    struct os_mbuf_pkthdr *omp;
    int rc;

    if (conn == NULL) {
   173cc:	b1f0      	cbz	r0, 1740c <ble_hs_conn_free+0x40>
{
   173ce:	b510      	push	{r4, lr}
   173d0:	4604      	mov	r4, r0
        return;
    }

    ble_att_svr_prep_clear(&conn->bhc_att_svr.basc_prep_list);
   173d2:	3044      	adds	r0, #68	; 0x44
   173d4:	f005 ff0f 	bl	1d1f6 <ble_att_svr_prep_clear>

    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   173d8:	e002      	b.n	173e0 <ble_hs_conn_free+0x14>
        ble_hs_conn_delete_chan(conn, chan);
   173da:	4620      	mov	r0, r4
   173dc:	f7ff ffdf 	bl	1739e <ble_hs_conn_delete_chan>
    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   173e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   173e2:	2900      	cmp	r1, #0
   173e4:	d1f9      	bne.n	173da <ble_hs_conn_free+0xe>
   173e6:	e002      	b.n	173ee <ble_hs_conn_free+0x22>
    }

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
        os_mbuf_free_chain(OS_MBUF_PKTHDR_TO_MBUF(omp));
   173e8:	3810      	subs	r0, #16
   173ea:	f7f9 fd77 	bl	10edc <os_mbuf_free_chain>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   173ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   173f0:	b138      	cbz	r0, 17402 <ble_hs_conn_free+0x36>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   173f2:	6843      	ldr	r3, [r0, #4]
   173f4:	63e3      	str	r3, [r4, #60]	; 0x3c
   173f6:	2b00      	cmp	r3, #0
   173f8:	d1f6      	bne.n	173e8 <ble_hs_conn_free+0x1c>
   173fa:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   173fe:	6423      	str	r3, [r4, #64]	; 0x40
   17400:	e7f2      	b.n	173e8 <ble_hs_conn_free+0x1c>
    }

#if MYNEWT_VAL(BLE_HS_DEBUG)
    memset(conn, 0xff, sizeof *conn);
#endif
    rc = os_memblock_put(&ble_hs_conn_pool, conn);
   17402:	4621      	mov	r1, r4
   17404:	4802      	ldr	r0, [pc, #8]	; (17410 <ble_hs_conn_free+0x44>)
   17406:	f7fa f9e6 	bl	117d6 <os_memblock_put>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    STATS_INC(ble_hs_stats, conn_delete);
}
   1740a:	bd10      	pop	{r4, pc}
   1740c:	4770      	bx	lr
   1740e:	bf00      	nop
   17410:	20002880 	.word	0x20002880

00017414 <ble_hs_conn_alloc>:
{
   17414:	b538      	push	{r3, r4, r5, lr}
   17416:	4605      	mov	r5, r0
    conn = os_memblock_get(&ble_hs_conn_pool);
   17418:	481a      	ldr	r0, [pc, #104]	; (17484 <ble_hs_conn_alloc+0x70>)
   1741a:	f7fa f9b4 	bl	11786 <os_memblock_get>
    if (conn == NULL) {
   1741e:	4604      	mov	r4, r0
   17420:	b350      	cbz	r0, 17478 <ble_hs_conn_alloc+0x64>
    memset(conn, 0, sizeof *conn);
   17422:	2264      	movs	r2, #100	; 0x64
   17424:	2100      	movs	r1, #0
   17426:	f7fb f876 	bl	12516 <memset>
    conn->bhc_handle = conn_handle;
   1742a:	80a5      	strh	r5, [r4, #4]
    chan = ble_att_create_chan(conn_handle);
   1742c:	4628      	mov	r0, r5
   1742e:	f004 f9e5 	bl	1b7fc <ble_att_create_chan>
    if (chan == NULL) {
   17432:	4601      	mov	r1, r0
   17434:	b300      	cbz	r0, 17478 <ble_hs_conn_alloc+0x64>
    rc = ble_hs_conn_chan_insert(conn, chan);
   17436:	4620      	mov	r0, r4
   17438:	f7ff ff97 	bl	1736a <ble_hs_conn_chan_insert>
    if (rc != 0) {
   1743c:	b9e0      	cbnz	r0, 17478 <ble_hs_conn_alloc+0x64>
    chan = ble_l2cap_sig_create_chan(conn_handle);
   1743e:	4628      	mov	r0, r5
   17440:	f002 f89e 	bl	19580 <ble_l2cap_sig_create_chan>
    if (chan == NULL) {
   17444:	4601      	mov	r1, r0
   17446:	b1b8      	cbz	r0, 17478 <ble_hs_conn_alloc+0x64>
    rc = ble_hs_conn_chan_insert(conn, chan);
   17448:	4620      	mov	r0, r4
   1744a:	f7ff ff8e 	bl	1736a <ble_hs_conn_chan_insert>
    if (rc != 0) {
   1744e:	b998      	cbnz	r0, 17478 <ble_hs_conn_alloc+0x64>
    chan = ble_sm_create_chan(conn_handle);
   17450:	4628      	mov	r0, r5
   17452:	f003 fdc9 	bl	1afe8 <ble_sm_create_chan>
    if (chan == NULL) {
   17456:	4601      	mov	r1, r0
   17458:	b170      	cbz	r0, 17478 <ble_hs_conn_alloc+0x64>
    rc = ble_hs_conn_chan_insert(conn, chan);
   1745a:	4620      	mov	r0, r4
   1745c:	f7ff ff85 	bl	1736a <ble_hs_conn_chan_insert>
    if (rc != 0) {
   17460:	b950      	cbnz	r0, 17478 <ble_hs_conn_alloc+0x64>
    rc = ble_gatts_conn_init(&conn->bhc_gatt_svr);
   17462:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   17466:	f7ff f83f 	bl	164e8 <ble_gatts_conn_init>
    if (rc != 0) {
   1746a:	b928      	cbnz	r0, 17478 <ble_hs_conn_alloc+0x64>
    STAILQ_INIT(&conn->bhc_tx_q);
   1746c:	4623      	mov	r3, r4
   1746e:	2200      	movs	r2, #0
   17470:	f843 2f3c 	str.w	r2, [r3, #60]!
   17474:	6423      	str	r3, [r4, #64]	; 0x40
    return conn;
   17476:	e003      	b.n	17480 <ble_hs_conn_alloc+0x6c>
    ble_hs_conn_free(conn);
   17478:	4620      	mov	r0, r4
   1747a:	f7ff ffa7 	bl	173cc <ble_hs_conn_free>
    return NULL;
   1747e:	2400      	movs	r4, #0
}
   17480:	4620      	mov	r0, r4
   17482:	bd38      	pop	{r3, r4, r5, pc}
   17484:	20002880 	.word	0x20002880

00017488 <ble_hs_conn_remove>:
    return;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   17488:	4b06      	ldr	r3, [pc, #24]	; (174a4 <ble_hs_conn_remove+0x1c>)
   1748a:	681a      	ldr	r2, [r3, #0]
   1748c:	4282      	cmp	r2, r0
   1748e:	d103      	bne.n	17498 <ble_hs_conn_remove+0x10>
   17490:	6812      	ldr	r2, [r2, #0]
   17492:	601a      	str	r2, [r3, #0]
   17494:	4770      	bx	lr
   17496:	461a      	mov	r2, r3
   17498:	6813      	ldr	r3, [r2, #0]
   1749a:	4283      	cmp	r3, r0
   1749c:	d1fb      	bne.n	17496 <ble_hs_conn_remove+0xe>
   1749e:	681b      	ldr	r3, [r3, #0]
   174a0:	6013      	str	r3, [r2, #0]
}
   174a2:	4770      	bx	lr
   174a4:	2000289c 	.word	0x2000289c

000174a8 <ble_hs_conn_find>:

    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   174a8:	4b04      	ldr	r3, [pc, #16]	; (174bc <ble_hs_conn_find+0x14>)
   174aa:	681b      	ldr	r3, [r3, #0]
   174ac:	b123      	cbz	r3, 174b8 <ble_hs_conn_find+0x10>
        if (conn->bhc_handle == conn_handle) {
   174ae:	889a      	ldrh	r2, [r3, #4]
   174b0:	4282      	cmp	r2, r0
   174b2:	d001      	beq.n	174b8 <ble_hs_conn_find+0x10>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   174b4:	681b      	ldr	r3, [r3, #0]
   174b6:	e7f9      	b.n	174ac <ble_hs_conn_find+0x4>
            return conn;
        }
    }

    return NULL;
}
   174b8:	4618      	mov	r0, r3
   174ba:	4770      	bx	lr
   174bc:	2000289c 	.word	0x2000289c

000174c0 <ble_hs_conn_insert>:
{
   174c0:	b510      	push	{r4, lr}
   174c2:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT_EVAL(ble_hs_conn_find(conn->bhc_handle) == NULL);
   174c4:	8880      	ldrh	r0, [r0, #4]
   174c6:	f7ff ffef 	bl	174a8 <ble_hs_conn_find>
    SLIST_INSERT_HEAD(&ble_hs_conns, conn, bhc_next);
   174ca:	4b02      	ldr	r3, [pc, #8]	; (174d4 <ble_hs_conn_insert+0x14>)
   174cc:	681a      	ldr	r2, [r3, #0]
   174ce:	6022      	str	r2, [r4, #0]
   174d0:	601c      	str	r4, [r3, #0]
}
   174d2:	bd10      	pop	{r4, pc}
   174d4:	2000289c 	.word	0x2000289c

000174d8 <ble_hs_conn_find_assert>:

struct ble_hs_conn *
ble_hs_conn_find_assert(uint16_t conn_handle)
{
   174d8:	b508      	push	{r3, lr}
    struct ble_hs_conn *conn;

    conn = ble_hs_conn_find(conn_handle);
   174da:	f7ff ffe5 	bl	174a8 <ble_hs_conn_find>
    BLE_HS_DBG_ASSERT(conn != NULL);

    return conn;
}
   174de:	bd08      	pop	{r3, pc}

000174e0 <ble_hs_conn_find_by_idx>:
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    i = 0;
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   174e0:	4b05      	ldr	r3, [pc, #20]	; (174f8 <ble_hs_conn_find_by_idx+0x18>)
   174e2:	681b      	ldr	r3, [r3, #0]
    i = 0;
   174e4:	2200      	movs	r2, #0
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   174e6:	b123      	cbz	r3, 174f2 <ble_hs_conn_find_by_idx+0x12>
        if (i == idx) {
   174e8:	4282      	cmp	r2, r0
   174ea:	d002      	beq.n	174f2 <ble_hs_conn_find_by_idx+0x12>
            return conn;
        }

        i++;
   174ec:	3201      	adds	r2, #1
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   174ee:	681b      	ldr	r3, [r3, #0]
   174f0:	e7f9      	b.n	174e6 <ble_hs_conn_find_by_idx+0x6>
    }

    return NULL;
}
   174f2:	4618      	mov	r0, r3
   174f4:	4770      	bx	lr
   174f6:	bf00      	nop
   174f8:	2000289c 	.word	0x2000289c

000174fc <ble_hs_conn_exists>:

int
ble_hs_conn_exists(uint16_t conn_handle)
{
   174fc:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif
    return ble_hs_conn_find(conn_handle) != NULL;
   174fe:	f7ff ffd3 	bl	174a8 <ble_hs_conn_find>
}
   17502:	3000      	adds	r0, #0
   17504:	bf18      	it	ne
   17506:	2001      	movne	r0, #1
   17508:	bd08      	pop	{r3, pc}
	...

0001750c <ble_hs_conn_first>:
    return NULL;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());
    return SLIST_FIRST(&ble_hs_conns);
}
   1750c:	4b01      	ldr	r3, [pc, #4]	; (17514 <ble_hs_conn_first+0x8>)
   1750e:	6818      	ldr	r0, [r3, #0]
   17510:	4770      	bx	lr
   17512:	bf00      	nop
   17514:	2000289c 	.word	0x2000289c

00017518 <ble_hs_conn_addrs>:

void
ble_hs_conn_addrs(const struct ble_hs_conn *conn,
                  struct ble_hs_conn_addrs *addrs)
{
   17518:	b570      	push	{r4, r5, r6, lr}
   1751a:	b082      	sub	sp, #8
   1751c:	4605      	mov	r5, r0
   1751e:	460c      	mov	r4, r1
    const uint8_t *our_id_addr_val;
    int rc;

    /* Determine our address information. */
    addrs->our_id_addr.type =
        ble_hs_misc_addr_type_to_id(conn->bhc_our_addr_type);
   17520:	7980      	ldrb	r0, [r0, #6]
   17522:	f001 f9d5 	bl	188d0 <ble_hs_misc_addr_type_to_id>
    addrs->our_id_addr.type =
   17526:	7020      	strb	r0, [r4, #0]
    } else {
        rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
        assert(rc == 0);
    }
#else
    rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
   17528:	2200      	movs	r2, #0
   1752a:	a901      	add	r1, sp, #4
   1752c:	f001 f8d0 	bl	186d0 <ble_hs_id_addr>
    assert(rc == 0);
   17530:	bb70      	cbnz	r0, 17590 <ble_hs_conn_addrs+0x78>
#endif

    memcpy(addrs->our_id_addr.val, our_id_addr_val, 6);
   17532:	9b01      	ldr	r3, [sp, #4]
   17534:	681a      	ldr	r2, [r3, #0]
   17536:	f8c4 2001 	str.w	r2, [r4, #1]
   1753a:	889b      	ldrh	r3, [r3, #4]
   1753c:	f8a4 3005 	strh.w	r3, [r4, #5]

    if (memcmp(conn->bhc_our_rpa_addr.val, ble_hs_conn_null_addr, 6) == 0) {
   17540:	2206      	movs	r2, #6
   17542:	4927      	ldr	r1, [pc, #156]	; (175e0 <ble_hs_conn_addrs+0xc8>)
   17544:	f105 000f 	add.w	r0, r5, #15
   17548:	f7fa ff98 	bl	1247c <memcmp>
   1754c:	bb30      	cbnz	r0, 1759c <ble_hs_conn_addrs+0x84>
        addrs->our_ota_addr = addrs->our_id_addr;
   1754e:	6822      	ldr	r2, [r4, #0]
   17550:	f8c4 200e 	str.w	r2, [r4, #14]
   17554:	88a1      	ldrh	r1, [r4, #4]
   17556:	79a2      	ldrb	r2, [r4, #6]
   17558:	8261      	strh	r1, [r4, #18]
   1755a:	7522      	strb	r2, [r4, #20]
    } else {
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
    }

    /* Determine peer address information. */
    addrs->peer_id_addr = conn->bhc_peer_addr;
   1755c:	462b      	mov	r3, r5
   1755e:	f853 1f07 	ldr.w	r1, [r3, #7]!
   17562:	f8c4 1007 	str.w	r1, [r4, #7]
   17566:	8898      	ldrh	r0, [r3, #4]
   17568:	7999      	ldrb	r1, [r3, #6]
   1756a:	f8a4 000b 	strh.w	r0, [r4, #11]
   1756e:	7361      	strb	r1, [r4, #13]
    addrs->peer_ota_addr = conn->bhc_peer_addr;
   17570:	f104 0215 	add.w	r2, r4, #21
   17574:	6819      	ldr	r1, [r3, #0]
   17576:	f8c4 1015 	str.w	r1, [r4, #21]
   1757a:	8898      	ldrh	r0, [r3, #4]
   1757c:	7999      	ldrb	r1, [r3, #6]
   1757e:	8090      	strh	r0, [r2, #4]
   17580:	7191      	strb	r1, [r2, #6]
    switch (conn->bhc_peer_addr.type) {
   17582:	79eb      	ldrb	r3, [r5, #7]
   17584:	2b02      	cmp	r3, #2
   17586:	d013      	beq.n	175b0 <ble_hs_conn_addrs+0x98>
   17588:	2b03      	cmp	r3, #3
   1758a:	d01d      	beq.n	175c8 <ble_hs_conn_addrs+0xb0>

    default:
        BLE_HS_DBG_ASSERT(0);
        break;
    }
}
   1758c:	b002      	add	sp, #8
   1758e:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
   17590:	2300      	movs	r3, #0
   17592:	461a      	mov	r2, r3
   17594:	4619      	mov	r1, r3
   17596:	4618      	mov	r0, r3
   17598:	f7f9 f820 	bl	105dc <__assert_func>
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
   1759c:	462a      	mov	r2, r5
   1759e:	f852 1f0e 	ldr.w	r1, [r2, #14]!
   175a2:	f8c4 100e 	str.w	r1, [r4, #14]
   175a6:	8891      	ldrh	r1, [r2, #4]
   175a8:	7992      	ldrb	r2, [r2, #6]
   175aa:	8261      	strh	r1, [r4, #18]
   175ac:	7522      	strb	r2, [r4, #20]
   175ae:	e7d5      	b.n	1755c <ble_hs_conn_addrs+0x44>
        addrs->peer_id_addr.type = BLE_ADDR_PUBLIC;
   175b0:	2300      	movs	r3, #0
   175b2:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   175b4:	f855 2f15 	ldr.w	r2, [r5, #21]!
   175b8:	f8c4 2015 	str.w	r2, [r4, #21]
   175bc:	88a9      	ldrh	r1, [r5, #4]
   175be:	79aa      	ldrb	r2, [r5, #6]
   175c0:	f8a4 1019 	strh.w	r1, [r4, #25]
   175c4:	76e2      	strb	r2, [r4, #27]
        break;
   175c6:	e7e1      	b.n	1758c <ble_hs_conn_addrs+0x74>
        addrs->peer_id_addr.type = BLE_ADDR_RANDOM;
   175c8:	2301      	movs	r3, #1
   175ca:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   175cc:	f855 2f15 	ldr.w	r2, [r5, #21]!
   175d0:	f8c4 2015 	str.w	r2, [r4, #21]
   175d4:	88a9      	ldrh	r1, [r5, #4]
   175d6:	79aa      	ldrb	r2, [r5, #6]
   175d8:	f8a4 1019 	strh.w	r1, [r4, #25]
   175dc:	76e2      	strb	r2, [r4, #27]
}
   175de:	e7d5      	b.n	1758c <ble_hs_conn_addrs+0x74>
   175e0:	20002878 	.word	0x20002878

000175e4 <ble_hs_conn_timer>:

int32_t
ble_hs_conn_timer(void)
{
   175e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return os_time_get();
   175e6:	f7fa fda9 	bl	1213c <os_time_get>
   175ea:	4607      	mov	r7, r0

    conn_handle = BLE_HS_CONN_HANDLE_NONE;
    next_exp_in = BLE_HS_FOREVER;
    now = ble_npl_time_get();

    ble_hs_lock();
   175ec:	f7ff f986 	bl	168fc <ble_hs_lock>
     * 1. Determine if any connections need to be terminated due to timeout.
     *    If so, break out of the loop and terminate the connection.  This
     *    function will need to be executed again.
     * 2. Otherwise, determine when the next timeout will occur.
     */
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   175f0:	4b1c      	ldr	r3, [pc, #112]	; (17664 <ble_hs_conn_timer+0x80>)
   175f2:	681c      	ldr	r4, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   175f4:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   175f8:	e00d      	b.n	17616 <ble_hs_conn_timer+0x32>
                if (time_diff <= 0) {
                    /* ACL reassembly has timed out.  Remember the connection
                     * handle so it can be terminated after the mutex is
                     * unlocked.
                     */
                    conn_handle = conn->bhc_handle;
   175fa:	88a4      	ldrh	r4, [r4, #4]
                    break;
   175fc:	e021      	b.n	17642 <ble_hs_conn_timer+0x5e>
   175fe:	4635      	mov	r5, r6
#if BLE_HS_ATT_SVR_QUEUED_WRITE_TMO
            /* Check each connection's rx queued write timer.  If too much
             * time passes after a prep write is received, the queue is
             * cleared.
             */
            time_diff = ble_att_svr_ticks_until_tmo(&conn->bhc_att_svr, now);
   17600:	4639      	mov	r1, r7
   17602:	f104 0044 	add.w	r0, r4, #68	; 0x44
   17606:	f005 fab8 	bl	1cb7a <ble_att_svr_ticks_until_tmo>
            if (time_diff <= 0) {
   1760a:	1e06      	subs	r6, r0, #0
   1760c:	dd14      	ble.n	17638 <ble_hs_conn_timer+0x54>
                conn_handle = conn->bhc_handle;
                break;
            }

            /* Determine if this connection is the soonest to time out. */
            if (time_diff < next_exp_in) {
   1760e:	42b5      	cmp	r5, r6
   17610:	dc00      	bgt.n	17614 <ble_hs_conn_timer+0x30>
   17612:	462e      	mov	r6, r5
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   17614:	6824      	ldr	r4, [r4, #0]
   17616:	b194      	cbz	r4, 1763e <ble_hs_conn_timer+0x5a>
        if (!(conn->bhc_flags & BLE_HS_CONN_F_TERMINATING)) {
   17618:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1761c:	f013 0f02 	tst.w	r3, #2
   17620:	d1f8      	bne.n	17614 <ble_hs_conn_timer+0x30>
            if (conn->bhc_rx_chan != NULL) {
   17622:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17624:	2b00      	cmp	r3, #0
   17626:	d0ea      	beq.n	175fe <ble_hs_conn_timer+0x1a>
                time_diff = conn->bhc_rx_timeout - now;
   17628:	6b65      	ldr	r5, [r4, #52]	; 0x34
   1762a:	1bed      	subs	r5, r5, r7
                if (time_diff <= 0) {
   1762c:	2d00      	cmp	r5, #0
   1762e:	dde4      	ble.n	175fa <ble_hs_conn_timer+0x16>
                if (time_diff < next_exp_in) {
   17630:	42ae      	cmp	r6, r5
   17632:	dce5      	bgt.n	17600 <ble_hs_conn_timer+0x1c>
   17634:	4635      	mov	r5, r6
   17636:	e7e3      	b.n	17600 <ble_hs_conn_timer+0x1c>
                conn_handle = conn->bhc_handle;
   17638:	88a4      	ldrh	r4, [r4, #4]
                break;
   1763a:	462e      	mov	r6, r5
   1763c:	e001      	b.n	17642 <ble_hs_conn_timer+0x5e>
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1763e:	f64f 74ff 	movw	r4, #65535	; 0xffff
            }
#endif
        }
    }

    ble_hs_unlock();
   17642:	f7ff f95f 	bl	16904 <ble_hs_unlock>
    /* If a connection has timed out, terminate it.  We need to recursively
     * call this function again to determine when the next timeout is.  This
     * is a tail-recursive call, so it should be optimized to execute in the
     * same stack frame.
     */
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   17646:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1764a:	429c      	cmp	r4, r3
   1764c:	d101      	bne.n	17652 <ble_hs_conn_timer+0x6e>
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
        return ble_hs_conn_timer();
    }

    return next_exp_in;
}
   1764e:	4630      	mov	r0, r6
   17650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   17652:	2113      	movs	r1, #19
   17654:	4620      	mov	r0, r4
   17656:	f7fc fa7d 	bl	13b54 <ble_gap_terminate>
        return ble_hs_conn_timer();
   1765a:	f7ff ffc3 	bl	175e4 <ble_hs_conn_timer>
   1765e:	4606      	mov	r6, r0
   17660:	e7f5      	b.n	1764e <ble_hs_conn_timer+0x6a>
   17662:	bf00      	nop
   17664:	2000289c 	.word	0x2000289c

00017668 <ble_hs_conn_init>:

int
ble_hs_conn_init(void)
{
   17668:	b500      	push	{lr}
   1766a:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_hs_conn_pool, MYNEWT_VAL(BLE_MAX_CONNECTIONS),
   1766c:	4b07      	ldr	r3, [pc, #28]	; (1768c <ble_hs_conn_init+0x24>)
   1766e:	9300      	str	r3, [sp, #0]
   17670:	4b07      	ldr	r3, [pc, #28]	; (17690 <ble_hs_conn_init+0x28>)
   17672:	2264      	movs	r2, #100	; 0x64
   17674:	2101      	movs	r1, #1
   17676:	4807      	ldr	r0, [pc, #28]	; (17694 <ble_hs_conn_init+0x2c>)
   17678:	f7fa f840 	bl	116fc <os_mempool_init>
                         sizeof (struct ble_hs_conn),
                         ble_hs_conn_elem_mem, "ble_hs_conn_pool");
    if (rc != 0) {
   1767c:	b920      	cbnz	r0, 17688 <ble_hs_conn_init+0x20>
        return BLE_HS_EOS;
    }

    SLIST_INIT(&ble_hs_conns);
   1767e:	4b06      	ldr	r3, [pc, #24]	; (17698 <ble_hs_conn_init+0x30>)
   17680:	6018      	str	r0, [r3, #0]

    return 0;
}
   17682:	b003      	add	sp, #12
   17684:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   17688:	200b      	movs	r0, #11
   1768a:	e7fa      	b.n	17682 <ble_hs_conn_init+0x1a>
   1768c:	0002c3e4 	.word	0x0002c3e4
   17690:	20002814 	.word	0x20002814
   17694:	20002880 	.word	0x20002880
   17698:	2000289c 	.word	0x2000289c

0001769c <ble_hs_flow_connection_broken>:
    MYNEWT_VAL(BLE_HS_FLOW_CTRL_TX_ON_DISCONNECT)
    ble_hs_lock();
    ble_hs_flow_tx_num_comp_pkts();
    ble_hs_unlock();
#endif
}
   1769c:	4770      	bx	lr

0001769e <ble_hs_flow_fill_acl_usrhdr>:
    conn_handle = OS_MBUF_USRHDR(om);

    hdr = (void *)om->om_data;
    *conn_handle = BLE_HCI_DATA_HANDLE(hdr->hdh_handle_pb_bc);
#endif
}
   1769e:	4770      	bx	lr

000176a0 <ble_hs_flow_startup>:
    ble_npl_callout_init(&ble_hs_flow_timer, ble_hs_evq_get(),
                         ble_hs_flow_event_cb, NULL);
#endif

    return 0;
}
   176a0:	2000      	movs	r0, #0
   176a2:	4770      	bx	lr

000176a4 <ble_hs_hci_max_acl_payload_sz>:
     * The LE_Read_Buffer_Size command is used to read the maximum size of the
     * data portion of HCI LE ACL Data Packets sent from the Host to the
     * Controller.
     */
    return ble_hs_hci_buf_sz;
}
   176a4:	4b01      	ldr	r3, [pc, #4]	; (176ac <ble_hs_hci_max_acl_payload_sz+0x8>)
   176a6:	8818      	ldrh	r0, [r3, #0]
   176a8:	4770      	bx	lr
   176aa:	bf00      	nop
   176ac:	200028a4 	.word	0x200028a4

000176b0 <ble_hs_hci_lock>:
{
   176b0:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   176b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   176b6:	4802      	ldr	r0, [pc, #8]	; (176c0 <ble_hs_hci_lock+0x10>)
   176b8:	f7fa f9ba 	bl	11a30 <os_mutex_pend>
}
   176bc:	bd08      	pop	{r3, pc}
   176be:	bf00      	nop
   176c0:	200029ec 	.word	0x200029ec

000176c4 <ble_hs_hci_wait_for_ack>:
{
   176c4:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_sem_pend(&sem->sem, timeout);
   176c6:	f44f 7180 	mov.w	r1, #256	; 0x100
   176ca:	4806      	ldr	r0, [pc, #24]	; (176e4 <ble_hs_hci_wait_for_ack+0x20>)
   176cc:	f7fa fc0e 	bl	11eec <os_sem_pend>
    rc = ble_npl_sem_pend(&ble_hs_hci_sem,
   176d0:	4603      	mov	r3, r0
    switch (rc) {
   176d2:	b110      	cbz	r0, 176da <ble_hs_hci_wait_for_ack+0x16>
   176d4:	2806      	cmp	r0, #6
   176d6:	d002      	beq.n	176de <ble_hs_hci_wait_for_ack+0x1a>
        rc = BLE_HS_EOS;
   176d8:	230b      	movs	r3, #11
}
   176da:	4618      	mov	r0, r3
   176dc:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ETIMEOUT_HCI;
   176de:	2313      	movs	r3, #19
    return rc;
   176e0:	e7fb      	b.n	176da <ble_hs_hci_wait_for_ack+0x16>
   176e2:	bf00      	nop
   176e4:	200029f8 	.word	0x200029f8

000176e8 <ble_hs_hci_rx_cmd_complete>:
    if (len < BLE_HCI_EVENT_CMD_COMPLETE_HDR_LEN) {
   176e8:	2a04      	cmp	r2, #4
   176ea:	dd26      	ble.n	1773a <ble_hs_hci_rx_cmd_complete+0x52>
{
   176ec:	b570      	push	{r4, r5, r6, lr}
   176ee:	461d      	mov	r5, r3
   176f0:	4614      	mov	r4, r2
   176f2:	460e      	mov	r6, r1
    opcode = get_le16(data + 3);
   176f4:	1cc8      	adds	r0, r1, #3
   176f6:	f007 fa35 	bl	1eb64 <get_le16>
    out_ack->bha_opcode = opcode;
   176fa:	81a8      	strh	r0, [r5, #12]
    params_len = len - BLE_HCI_EVENT_CMD_COMPLETE_HDR_LEN;
   176fc:	b2e2      	uxtb	r2, r4
   176fe:	3a05      	subs	r2, #5
    if (params_len > 0) {
   17700:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   17704:	d00e      	beq.n	17724 <ble_hs_hci_rx_cmd_complete+0x3c>
        out_ack->bha_status = BLE_HS_HCI_ERR(params[0]);
   17706:	7973      	ldrb	r3, [r6, #5]
   17708:	b153      	cbz	r3, 17720 <ble_hs_hci_rx_cmd_complete+0x38>
   1770a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1770e:	602b      	str	r3, [r5, #0]
    if (params_len > 1) {
   17710:	2a01      	cmp	r2, #1
   17712:	d90e      	bls.n	17732 <ble_hs_hci_rx_cmd_complete+0x4a>
        out_ack->bha_params = params + 1;
   17714:	3606      	adds	r6, #6
   17716:	606e      	str	r6, [r5, #4]
        out_ack->bha_params_len = params_len - 1;
   17718:	3a01      	subs	r2, #1
   1771a:	60aa      	str	r2, [r5, #8]
    return 0;
   1771c:	2000      	movs	r0, #0
}
   1771e:	bd70      	pop	{r4, r5, r6, pc}
        out_ack->bha_status = BLE_HS_HCI_ERR(params[0]);
   17720:	2300      	movs	r3, #0
   17722:	e7f4      	b.n	1770e <ble_hs_hci_rx_cmd_complete+0x26>
    } else if (opcode == BLE_HCI_OPCODE_NOP) {
   17724:	b910      	cbnz	r0, 1772c <ble_hs_hci_rx_cmd_complete+0x44>
        out_ack->bha_status = 0;
   17726:	2300      	movs	r3, #0
   17728:	602b      	str	r3, [r5, #0]
   1772a:	e7f1      	b.n	17710 <ble_hs_hci_rx_cmd_complete+0x28>
        out_ack->bha_status = BLE_HS_ECONTROLLER;
   1772c:	230c      	movs	r3, #12
   1772e:	602b      	str	r3, [r5, #0]
   17730:	e7ee      	b.n	17710 <ble_hs_hci_rx_cmd_complete+0x28>
        out_ack->bha_params = NULL;
   17732:	2000      	movs	r0, #0
   17734:	6068      	str	r0, [r5, #4]
        out_ack->bha_params_len = 0;
   17736:	60a8      	str	r0, [r5, #8]
   17738:	e7f1      	b.n	1771e <ble_hs_hci_rx_cmd_complete+0x36>
        return BLE_HS_ECONTROLLER;
   1773a:	200c      	movs	r0, #12
}
   1773c:	4770      	bx	lr

0001773e <ble_hs_hci_rx_cmd_status>:
    if (len < BLE_HCI_EVENT_CMD_STATUS_LEN) {
   1773e:	2a05      	cmp	r2, #5
   17740:	dd11      	ble.n	17766 <ble_hs_hci_rx_cmd_status+0x28>
{
   17742:	b538      	push	{r3, r4, r5, lr}
   17744:	461c      	mov	r4, r3
    status = data[2];
   17746:	788d      	ldrb	r5, [r1, #2]
    opcode = get_le16(data + 4);
   17748:	1d08      	adds	r0, r1, #4
   1774a:	f007 fa0b 	bl	1eb64 <get_le16>
    out_ack->bha_opcode = opcode;
   1774e:	81a0      	strh	r0, [r4, #12]
    out_ack->bha_params = NULL;
   17750:	2300      	movs	r3, #0
   17752:	6063      	str	r3, [r4, #4]
    out_ack->bha_params_len = 0;
   17754:	60a3      	str	r3, [r4, #8]
    out_ack->bha_status = BLE_HS_HCI_ERR(status);
   17756:	b125      	cbz	r5, 17762 <ble_hs_hci_rx_cmd_status+0x24>
   17758:	f505 7500 	add.w	r5, r5, #512	; 0x200
   1775c:	6025      	str	r5, [r4, #0]
    return 0;
   1775e:	2000      	movs	r0, #0
}
   17760:	bd38      	pop	{r3, r4, r5, pc}
    out_ack->bha_status = BLE_HS_HCI_ERR(status);
   17762:	2500      	movs	r5, #0
   17764:	e7fa      	b.n	1775c <ble_hs_hci_rx_cmd_status+0x1e>
        return BLE_HS_ECONTROLLER;
   17766:	200c      	movs	r0, #12
}
   17768:	4770      	bx	lr
	...

0001776c <ble_hs_hci_process_ack>:
{
   1776c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17770:	4607      	mov	r7, r0
   17772:	460d      	mov	r5, r1
   17774:	4616      	mov	r6, r2
   17776:	461c      	mov	r4, r3
    ble_hs_dbg_event_disp(ble_hs_hci_ack);
   17778:	f8df 8074 	ldr.w	r8, [pc, #116]	; 177f0 <ble_hs_hci_process_ack+0x84>
   1777c:	f8d8 0000 	ldr.w	r0, [r8]
   17780:	f005 fe9c 	bl	1d4bc <ble_hs_dbg_event_disp>
    event_code = ble_hs_hci_ack[0];
   17784:	f8d8 1000 	ldr.w	r1, [r8]
   17788:	7808      	ldrb	r0, [r1, #0]
    param_len = ble_hs_hci_ack[1];
   1778a:	784a      	ldrb	r2, [r1, #1]
    event_len = param_len + 2;
   1778c:	3202      	adds	r2, #2
   1778e:	b2d2      	uxtb	r2, r2
    memset(out_ack, 0, sizeof *out_ack);
   17790:	2300      	movs	r3, #0
   17792:	6023      	str	r3, [r4, #0]
   17794:	6063      	str	r3, [r4, #4]
   17796:	60a3      	str	r3, [r4, #8]
   17798:	60e3      	str	r3, [r4, #12]
    switch (event_code) {
   1779a:	280e      	cmp	r0, #14
   1779c:	d006      	beq.n	177ac <ble_hs_hci_process_ack+0x40>
   1779e:	280f      	cmp	r0, #15
   177a0:	d01e      	beq.n	177e0 <ble_hs_hci_process_ack+0x74>
        rc = BLE_HS_EUNKNOWN;
   177a2:	f04f 0811 	mov.w	r8, #17
}
   177a6:	4640      	mov	r0, r8
   177a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_hci_rx_cmd_complete(event_code, ble_hs_hci_ack,
   177ac:	4623      	mov	r3, r4
   177ae:	f7ff ff9b 	bl	176e8 <ble_hs_hci_rx_cmd_complete>
   177b2:	4680      	mov	r8, r0
    if (rc == 0) {
   177b4:	f1b8 0f00 	cmp.w	r8, #0
   177b8:	d1f5      	bne.n	177a6 <ble_hs_hci_process_ack+0x3a>
        if (params_buf == NULL) {
   177ba:	b1b5      	cbz	r5, 177ea <ble_hs_hci_process_ack+0x7e>
            if (out_ack->bha_params_len > params_buf_len) {
   177bc:	68a3      	ldr	r3, [r4, #8]
   177be:	42b3      	cmp	r3, r6
   177c0:	dd02      	ble.n	177c8 <ble_hs_hci_process_ack+0x5c>
                out_ack->bha_params_len = params_buf_len;
   177c2:	60a6      	str	r6, [r4, #8]
                rc = BLE_HS_ECONTROLLER;
   177c4:	f04f 080c 	mov.w	r8, #12
            memcpy(params_buf, out_ack->bha_params, out_ack->bha_params_len);
   177c8:	68a2      	ldr	r2, [r4, #8]
   177ca:	6861      	ldr	r1, [r4, #4]
   177cc:	4628      	mov	r0, r5
   177ce:	f7fa fe79 	bl	124c4 <memcpy>
        out_ack->bha_params = params_buf;
   177d2:	6065      	str	r5, [r4, #4]
        if (out_ack->bha_opcode != expected_opcode) {
   177d4:	89a3      	ldrh	r3, [r4, #12]
   177d6:	42bb      	cmp	r3, r7
   177d8:	d0e5      	beq.n	177a6 <ble_hs_hci_process_ack+0x3a>
            rc = BLE_HS_ECONTROLLER;
   177da:	f04f 080c 	mov.w	r8, #12
    return rc;
   177de:	e7e2      	b.n	177a6 <ble_hs_hci_process_ack+0x3a>
        rc = ble_hs_hci_rx_cmd_status(event_code, ble_hs_hci_ack,
   177e0:	4623      	mov	r3, r4
   177e2:	f7ff ffac 	bl	1773e <ble_hs_hci_rx_cmd_status>
   177e6:	4680      	mov	r8, r0
        break;
   177e8:	e7e4      	b.n	177b4 <ble_hs_hci_process_ack+0x48>
            out_ack->bha_params_len = 0;
   177ea:	2300      	movs	r3, #0
   177ec:	60a3      	str	r3, [r4, #8]
   177ee:	e7f0      	b.n	177d2 <ble_hs_hci_process_ack+0x66>
   177f0:	200028a0 	.word	0x200028a0

000177f4 <ble_hs_hci_unlock>:
{
   177f4:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   177f6:	4802      	ldr	r0, [pc, #8]	; (17800 <ble_hs_hci_unlock+0xc>)
   177f8:	f7fa f8be 	bl	11978 <os_mutex_release>
}
   177fc:	bd08      	pop	{r3, pc}
   177fe:	bf00      	nop
   17800:	200029ec 	.word	0x200029ec

00017804 <ble_hs_hci_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing ACL data fragment.
 */
static struct os_mbuf *
ble_hs_hci_frag_alloc(uint16_t frag_size, void *arg)
{
   17804:	b508      	push	{r3, lr}
    struct os_mbuf *om;

    /* Prefer the dedicated one-element fragment pool. */
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, 0);
   17806:	2100      	movs	r1, #0
   17808:	4806      	ldr	r0, [pc, #24]	; (17824 <ble_hs_hci_frag_alloc+0x20>)
   1780a:	f7f9 fb42 	bl	10e92 <os_mbuf_get_pkthdr>
    if (om != NULL) {
   1780e:	b128      	cbz	r0, 1781c <ble_hs_hci_frag_alloc+0x18>
   17810:	4603      	mov	r3, r0
        om->om_data += BLE_HCI_DATA_HDR_SZ;
   17812:	6802      	ldr	r2, [r0, #0]
   17814:	3204      	adds	r2, #4
   17816:	6002      	str	r2, [r0, #0]
    if (om != NULL) {
        return om;
    }

    return NULL;
}
   17818:	4618      	mov	r0, r3
   1781a:	bd08      	pop	{r3, pc}
    om = ble_hs_mbuf_acl_pkt();
   1781c:	f000 ffeb 	bl	187f6 <ble_hs_mbuf_acl_pkt>
   17820:	4603      	mov	r3, r0
   17822:	e7f9      	b.n	17818 <ble_hs_hci_frag_alloc+0x14>
   17824:	200029c4 	.word	0x200029c4

00017828 <ble_hs_hci_acl_hdr_prepend>:
}

static struct os_mbuf *
ble_hs_hci_acl_hdr_prepend(struct os_mbuf *om, uint16_t handle,
                           uint8_t pb_flag)
{
   17828:	b510      	push	{r4, lr}
   1782a:	b082      	sub	sp, #8
   1782c:	4604      	mov	r4, r0
   1782e:	4608      	mov	r0, r1
   17830:	4611      	mov	r1, r2
    struct hci_data_hdr hci_hdr;
    struct os_mbuf *om2;

    hci_hdr.hdh_handle_pb_bc =
        ble_hs_hci_util_handle_pb_bc_join(handle, pb_flag, 0);
   17832:	2200      	movs	r2, #0
   17834:	f000 fe96 	bl	18564 <ble_hs_hci_util_handle_pb_bc_join>
    hci_hdr.hdh_handle_pb_bc =
   17838:	f8ad 0004 	strh.w	r0, [sp, #4]
    put_le16(&hci_hdr.hdh_len, OS_MBUF_PKTHDR(om)->omp_len);
   1783c:	8a21      	ldrh	r1, [r4, #16]
   1783e:	f10d 0006 	add.w	r0, sp, #6
   17842:	f007 f96e 	bl	1eb22 <put_le16>

    om2 = os_mbuf_prepend(om, sizeof hci_hdr);
   17846:	2104      	movs	r1, #4
   17848:	4620      	mov	r0, r4
   1784a:	f7f9 fd6b 	bl	11324 <os_mbuf_prepend>
    if (om2 == NULL) {
   1784e:	4604      	mov	r4, r0
   17850:	b158      	cbz	r0, 1786a <ble_hs_hci_acl_hdr_prepend+0x42>
        return NULL;
    }

    om = om2;
    om = os_mbuf_pullup(om, sizeof hci_hdr);
   17852:	2104      	movs	r1, #4
   17854:	f7f9 fe5d 	bl	11512 <os_mbuf_pullup>
    if (om == NULL) {
   17858:	4604      	mov	r4, r0
   1785a:	b130      	cbz	r0, 1786a <ble_hs_hci_acl_hdr_prepend+0x42>
        return NULL;
    }

    memcpy(om->om_data, &hci_hdr, sizeof hci_hdr);
   1785c:	6803      	ldr	r3, [r0, #0]
   1785e:	9a01      	ldr	r2, [sp, #4]
   17860:	601a      	str	r2, [r3, #0]

#if !BLE_MONITOR
    BLE_HS_LOG(DEBUG, "host tx hci data; handle=%d length=%d\n", handle,
   17862:	f10d 0006 	add.w	r0, sp, #6
   17866:	f007 f97d 	bl	1eb64 <get_le16>
               get_le16(&hci_hdr.hdh_len));
#endif

    return om;
}
   1786a:	4620      	mov	r0, r4
   1786c:	b002      	add	sp, #8
   1786e:	bd10      	pop	{r4, pc}

00017870 <ble_hs_hci_set_buf_sz>:
    if (pktlen == 0 || max_pkts == 0) {
   17870:	b130      	cbz	r0, 17880 <ble_hs_hci_set_buf_sz+0x10>
   17872:	b139      	cbz	r1, 17884 <ble_hs_hci_set_buf_sz+0x14>
    ble_hs_hci_buf_sz = pktlen;
   17874:	4a04      	ldr	r2, [pc, #16]	; (17888 <ble_hs_hci_set_buf_sz+0x18>)
   17876:	8010      	strh	r0, [r2, #0]
    ble_hs_hci_avail_pkts = max_pkts;
   17878:	4b04      	ldr	r3, [pc, #16]	; (1788c <ble_hs_hci_set_buf_sz+0x1c>)
   1787a:	8019      	strh	r1, [r3, #0]
    return 0;
   1787c:	2000      	movs	r0, #0
   1787e:	4770      	bx	lr
        return BLE_HS_EINVAL;
   17880:	2003      	movs	r0, #3
   17882:	4770      	bx	lr
   17884:	2003      	movs	r0, #3
}
   17886:	4770      	bx	lr
   17888:	200028a4 	.word	0x200028a4
   1788c:	20003d72 	.word	0x20003d72

00017890 <ble_hs_hci_add_avail_pkts>:
{
   17890:	b508      	push	{r3, lr}
    if (ble_hs_hci_avail_pkts + delta > UINT16_MAX) {
   17892:	4b07      	ldr	r3, [pc, #28]	; (178b0 <ble_hs_hci_add_avail_pkts+0x20>)
   17894:	881b      	ldrh	r3, [r3, #0]
   17896:	181a      	adds	r2, r3, r0
   17898:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1789c:	da03      	bge.n	178a6 <ble_hs_hci_add_avail_pkts+0x16>
        ble_hs_hci_avail_pkts += delta;
   1789e:	4403      	add	r3, r0
   178a0:	4a03      	ldr	r2, [pc, #12]	; (178b0 <ble_hs_hci_add_avail_pkts+0x20>)
   178a2:	8013      	strh	r3, [r2, #0]
}
   178a4:	bd08      	pop	{r3, pc}
        ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   178a6:	200c      	movs	r0, #12
   178a8:	f7ff f92a 	bl	16b00 <ble_hs_sched_reset>
   178ac:	e7fa      	b.n	178a4 <ble_hs_hci_add_avail_pkts+0x14>
   178ae:	bf00      	nop
   178b0:	20003d72 	.word	0x20003d72

000178b4 <ble_hs_hci_cmd_tx>:
{
   178b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   178b6:	b085      	sub	sp, #20
   178b8:	4605      	mov	r5, r0
   178ba:	460c      	mov	r4, r1
   178bc:	4616      	mov	r6, r2
   178be:	461f      	mov	r7, r3
    ble_hs_hci_lock();
   178c0:	f7ff fef6 	bl	176b0 <ble_hs_hci_lock>
    rc = ble_hs_hci_cmd_send_buf(opcode, cmd, cmd_len);
   178c4:	4632      	mov	r2, r6
   178c6:	4621      	mov	r1, r4
   178c8:	4628      	mov	r0, r5
   178ca:	f000 fa89 	bl	17de0 <ble_hs_hci_cmd_send_buf>
    if (rc != 0) {
   178ce:	4604      	mov	r4, r0
   178d0:	b160      	cbz	r0, 178ec <ble_hs_hci_cmd_tx+0x38>
    if (ble_hs_hci_ack != NULL) {
   178d2:	4b13      	ldr	r3, [pc, #76]	; (17920 <ble_hs_hci_cmd_tx+0x6c>)
   178d4:	6818      	ldr	r0, [r3, #0]
   178d6:	b120      	cbz	r0, 178e2 <ble_hs_hci_cmd_tx+0x2e>
        ble_hci_trans_buf_free(ble_hs_hci_ack);
   178d8:	f005 ff58 	bl	1d78c <ble_hci_trans_buf_free>
        ble_hs_hci_ack = NULL;
   178dc:	4b10      	ldr	r3, [pc, #64]	; (17920 <ble_hs_hci_cmd_tx+0x6c>)
   178de:	2200      	movs	r2, #0
   178e0:	601a      	str	r2, [r3, #0]
    ble_hs_hci_unlock();
   178e2:	f7ff ff87 	bl	177f4 <ble_hs_hci_unlock>
}
   178e6:	4620      	mov	r0, r4
   178e8:	b005      	add	sp, #20
   178ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = ble_hs_hci_wait_for_ack();
   178ec:	f7ff feea 	bl	176c4 <ble_hs_hci_wait_for_ack>
    if (rc != 0) {
   178f0:	4604      	mov	r4, r0
   178f2:	b110      	cbz	r0, 178fa <ble_hs_hci_cmd_tx+0x46>
        ble_hs_sched_reset(rc);
   178f4:	f7ff f904 	bl	16b00 <ble_hs_sched_reset>
        goto done;
   178f8:	e7eb      	b.n	178d2 <ble_hs_hci_cmd_tx+0x1e>
    rc = ble_hs_hci_process_ack(opcode, evt_buf, evt_buf_len, &ack);
   178fa:	466b      	mov	r3, sp
   178fc:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
   17900:	4639      	mov	r1, r7
   17902:	4628      	mov	r0, r5
   17904:	f7ff ff32 	bl	1776c <ble_hs_hci_process_ack>
    if (rc != 0) {
   17908:	4604      	mov	r4, r0
   1790a:	b930      	cbnz	r0, 1791a <ble_hs_hci_cmd_tx+0x66>
    if (out_evt_buf_len != NULL) {
   1790c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1790e:	b113      	cbz	r3, 17916 <ble_hs_hci_cmd_tx+0x62>
        *out_evt_buf_len = ack.bha_params_len;
   17910:	9b02      	ldr	r3, [sp, #8]
   17912:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17914:	7013      	strb	r3, [r2, #0]
    rc = ack.bha_status;
   17916:	9c00      	ldr	r4, [sp, #0]
   17918:	e7db      	b.n	178d2 <ble_hs_hci_cmd_tx+0x1e>
        ble_hs_sched_reset(rc);
   1791a:	f7ff f8f1 	bl	16b00 <ble_hs_sched_reset>
        goto done;
   1791e:	e7d8      	b.n	178d2 <ble_hs_hci_cmd_tx+0x1e>
   17920:	200028a0 	.word	0x200028a0

00017924 <ble_hs_hci_cmd_tx_empty_ack>:
{
   17924:	b500      	push	{lr}
   17926:	b083      	sub	sp, #12
    rc = ble_hs_hci_cmd_tx(opcode, cmd, cmd_len, NULL, 0, NULL);
   17928:	2300      	movs	r3, #0
   1792a:	9301      	str	r3, [sp, #4]
   1792c:	9300      	str	r3, [sp, #0]
   1792e:	f7ff ffc1 	bl	178b4 <ble_hs_hci_cmd_tx>
}
   17932:	b003      	add	sp, #12
   17934:	f85d fb04 	ldr.w	pc, [sp], #4

00017938 <ble_hs_hci_rx_ack>:
{
   17938:	b508      	push	{r3, lr}
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
   1793a:	4b06      	ldr	r3, [pc, #24]	; (17954 <ble_hs_hci_rx_ack+0x1c>)
   1793c:	88db      	ldrh	r3, [r3, #6]
    if (ble_npl_sem_get_count(&ble_hs_hci_sem) > 0) {
   1793e:	b92b      	cbnz	r3, 1794c <ble_hs_hci_rx_ack+0x14>
    ble_hs_hci_ack = ack_ev;
   17940:	4b05      	ldr	r3, [pc, #20]	; (17958 <ble_hs_hci_rx_ack+0x20>)
   17942:	6018      	str	r0, [r3, #0]
    return (ble_npl_error_t)os_sem_release(&sem->sem);
   17944:	4803      	ldr	r0, [pc, #12]	; (17954 <ble_hs_hci_rx_ack+0x1c>)
   17946:	f7fa fa9f 	bl	11e88 <os_sem_release>
}
   1794a:	bd08      	pop	{r3, pc}
        ble_hci_trans_buf_free(ack_ev);
   1794c:	f005 ff1e 	bl	1d78c <ble_hci_trans_buf_free>
        return;
   17950:	e7fb      	b.n	1794a <ble_hs_hci_rx_ack+0x12>
   17952:	bf00      	nop
   17954:	200029f8 	.word	0x200029f8
   17958:	200028a0 	.word	0x200028a0

0001795c <ble_hs_hci_rx_evt>:
{
   1795c:	b508      	push	{r3, lr}
    switch (hci_ev[0]) {
   1795e:	7803      	ldrb	r3, [r0, #0]
   17960:	3b0e      	subs	r3, #14
   17962:	2b01      	cmp	r3, #1
   17964:	d803      	bhi.n	1796e <ble_hs_hci_rx_evt+0x12>
        if (hci_ev[3] == 0 && hci_ev[4] == 0) {
   17966:	78c3      	ldrb	r3, [r0, #3]
   17968:	b92b      	cbnz	r3, 17976 <ble_hs_hci_rx_evt+0x1a>
   1796a:	7903      	ldrb	r3, [r0, #4]
   1796c:	b91b      	cbnz	r3, 17976 <ble_hs_hci_rx_evt+0x1a>
        ble_hs_enqueue_hci_event(hci_ev);
   1796e:	f7ff f8a9 	bl	16ac4 <ble_hs_enqueue_hci_event>
}
   17972:	2000      	movs	r0, #0
   17974:	bd08      	pop	{r3, pc}
            ble_hs_hci_rx_ack(hci_ev);
   17976:	f7ff ffdf 	bl	17938 <ble_hs_hci_rx_ack>
   1797a:	e7fa      	b.n	17972 <ble_hs_hci_rx_evt+0x16>

0001797c <ble_hs_hci_acl_tx_now>:

int
ble_hs_hci_acl_tx_now(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   1797c:	b570      	push	{r4, r5, r6, lr}
   1797e:	b082      	sub	sp, #8
   17980:	4604      	mov	r4, r0
   17982:	460d      	mov	r5, r1
    uint8_t pb;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    txom = *om;
   17984:	680b      	ldr	r3, [r1, #0]
   17986:	9301      	str	r3, [sp, #4]
    *om = NULL;
   17988:	2300      	movs	r3, #0
   1798a:	600b      	str	r3, [r1, #0]

    if (!(conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG)) {
   1798c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   17990:	f013 0f04 	tst.w	r3, #4
   17994:	d02e      	beq.n	179f4 <ble_hs_hci_acl_tx_now+0x78>
         * After sending the first fragment, pb gets set appropriately for all
         * subsequent fragments in this packet.
         */
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
    } else {
        pb = BLE_HCI_PB_MIDDLE;
   17996:	2601      	movs	r6, #1
    }

    /* Send fragments until the entire packet has been sent. */
    while (txom != NULL && ble_hs_hci_avail_pkts > 0) {
   17998:	9b01      	ldr	r3, [sp, #4]
   1799a:	b36b      	cbz	r3, 179f8 <ble_hs_hci_acl_tx_now+0x7c>
   1799c:	4a23      	ldr	r2, [pc, #140]	; (17a2c <ble_hs_hci_acl_tx_now+0xb0>)
   1799e:	8812      	ldrh	r2, [r2, #0]
   179a0:	b352      	cbz	r2, 179f8 <ble_hs_hci_acl_tx_now+0x7c>
        frag = mem_split_frag(&txom, ble_hs_hci_max_acl_payload_sz(),
   179a2:	f7ff fe7f 	bl	176a4 <ble_hs_hci_max_acl_payload_sz>
   179a6:	2300      	movs	r3, #0
   179a8:	4a21      	ldr	r2, [pc, #132]	; (17a30 <ble_hs_hci_acl_tx_now+0xb4>)
   179aa:	4601      	mov	r1, r0
   179ac:	a801      	add	r0, sp, #4
   179ae:	f005 ffa1 	bl	1d8f4 <mem_split_frag>
                              ble_hs_hci_frag_alloc, NULL);
        if (frag == NULL) {
   179b2:	b1d8      	cbz	r0, 179ec <ble_hs_hci_acl_tx_now+0x70>
            *om = txom;
            return BLE_HS_EAGAIN;
        }

        frag = ble_hs_hci_acl_hdr_prepend(frag, conn->bhc_handle, pb);
   179b4:	4632      	mov	r2, r6
   179b6:	88a1      	ldrh	r1, [r4, #4]
   179b8:	f7ff ff36 	bl	17828 <ble_hs_hci_acl_hdr_prepend>
        if (frag == NULL) {
   179bc:	4606      	mov	r6, r0
   179be:	b338      	cbz	r0, 17a10 <ble_hs_hci_acl_tx_now+0x94>
            goto err;
        }

#if !BLE_MONITOR
        BLE_HS_LOG(DEBUG, "ble_hs_hci_acl_tx(): ");
        ble_hs_log_mbuf(frag);
   179c0:	f000 feec 	bl	1879c <ble_hs_log_mbuf>
        BLE_HS_LOG(DEBUG, "\n");
#endif

        rc = ble_hs_tx_data(frag);
   179c4:	4630      	mov	r0, r6
   179c6:	f7ff f8f8 	bl	16bba <ble_hs_tx_data>
        if (rc != 0) {
   179ca:	4606      	mov	r6, r0
   179cc:	bb08      	cbnz	r0, 17a12 <ble_hs_hci_acl_tx_now+0x96>
        }

        /* If any fragments remain, they should be marked as 'middle'
         * fragments.
         */
        conn->bhc_flags |= BLE_HS_CONN_F_TX_FRAG;
   179ce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   179d2:	f043 0304 	orr.w	r3, r3, #4
   179d6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pb = BLE_HCI_PB_MIDDLE;

        /* Account for the controller buf that will hold the txed fragment. */
        conn->bhc_outstanding_pkts++;
   179da:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   179dc:	3301      	adds	r3, #1
   179de:	8723      	strh	r3, [r4, #56]	; 0x38
        ble_hs_hci_avail_pkts--;
   179e0:	4a12      	ldr	r2, [pc, #72]	; (17a2c <ble_hs_hci_acl_tx_now+0xb0>)
   179e2:	8813      	ldrh	r3, [r2, #0]
   179e4:	3b01      	subs	r3, #1
   179e6:	8013      	strh	r3, [r2, #0]
        pb = BLE_HCI_PB_MIDDLE;
   179e8:	2601      	movs	r6, #1
   179ea:	e7d5      	b.n	17998 <ble_hs_hci_acl_tx_now+0x1c>
            *om = txom;
   179ec:	9b01      	ldr	r3, [sp, #4]
   179ee:	602b      	str	r3, [r5, #0]
            return BLE_HS_EAGAIN;
   179f0:	2601      	movs	r6, #1
   179f2:	e017      	b.n	17a24 <ble_hs_hci_acl_tx_now+0xa8>
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
   179f4:	2600      	movs	r6, #0
   179f6:	e7cf      	b.n	17998 <ble_hs_hci_acl_tx_now+0x1c>
    }

    if (txom != NULL) {
   179f8:	b113      	cbz	r3, 17a00 <ble_hs_hci_acl_tx_now+0x84>
        /* The controller couldn't accommodate some or all of the packet. */
        *om = txom;
   179fa:	602b      	str	r3, [r5, #0]
        return BLE_HS_EAGAIN;
   179fc:	2601      	movs	r6, #1
   179fe:	e011      	b.n	17a24 <ble_hs_hci_acl_tx_now+0xa8>
    }

    /* The entire packet was transmitted. */
    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   17a00:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   17a04:	f023 0304 	bic.w	r3, r3, #4
   17a08:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    return 0;
   17a0c:	2600      	movs	r6, #0
   17a0e:	e009      	b.n	17a24 <ble_hs_hci_acl_tx_now+0xa8>
            rc = BLE_HS_ENOMEM;
   17a10:	2606      	movs	r6, #6

err:
    BLE_HS_DBG_ASSERT(rc != 0);

    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   17a12:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   17a16:	f023 0304 	bic.w	r3, r3, #4
   17a1a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    os_mbuf_free_chain(txom);
   17a1e:	9801      	ldr	r0, [sp, #4]
   17a20:	f7f9 fa5c 	bl	10edc <os_mbuf_free_chain>
    return rc;
}
   17a24:	4630      	mov	r0, r6
   17a26:	b002      	add	sp, #8
   17a28:	bd70      	pop	{r4, r5, r6, pc}
   17a2a:	bf00      	nop
   17a2c:	20003d72 	.word	0x20003d72
   17a30:	00017805 	.word	0x00017805

00017a34 <ble_hs_hci_acl_tx>:
 *                                  error.
 *
 */
int
ble_hs_hci_acl_tx(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   17a34:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    /* If this conn is already backed up, don't even try to send. */
    if (STAILQ_FIRST(&conn->bhc_tx_q) != NULL) {
   17a36:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   17a38:	b10b      	cbz	r3, 17a3e <ble_hs_hci_acl_tx+0xa>
        return BLE_HS_EAGAIN;
   17a3a:	2001      	movs	r0, #1
    }

    return ble_hs_hci_acl_tx_now(conn, om);
}
   17a3c:	bd08      	pop	{r3, pc}
    return ble_hs_hci_acl_tx_now(conn, om);
   17a3e:	f7ff ff9d 	bl	1797c <ble_hs_hci_acl_tx_now>
   17a42:	e7fb      	b.n	17a3c <ble_hs_hci_acl_tx+0x8>

00017a44 <ble_hs_hci_set_le_supported_feat>:

void
ble_hs_hci_set_le_supported_feat(uint32_t feat)
{
    ble_hs_hci_sup_feat = feat;
   17a44:	4b01      	ldr	r3, [pc, #4]	; (17a4c <ble_hs_hci_set_le_supported_feat+0x8>)
   17a46:	6018      	str	r0, [r3, #0]
}
   17a48:	4770      	bx	lr
   17a4a:	bf00      	nop
   17a4c:	20002a00 	.word	0x20002a00

00017a50 <ble_hs_hci_set_hci_version>:
}

void
ble_hs_hci_set_hci_version(uint8_t hci_version)
{
    ble_hs_hci_version = hci_version;
   17a50:	4b01      	ldr	r3, [pc, #4]	; (17a58 <ble_hs_hci_set_hci_version+0x8>)
   17a52:	7018      	strb	r0, [r3, #0]
}
   17a54:	4770      	bx	lr
   17a56:	bf00      	nop
   17a58:	20002a04 	.word	0x20002a04

00017a5c <ble_hs_hci_get_hci_version>:

uint8_t
ble_hs_hci_get_hci_version(void)
{
    return ble_hs_hci_version;
}
   17a5c:	4b01      	ldr	r3, [pc, #4]	; (17a64 <ble_hs_hci_get_hci_version+0x8>)
   17a5e:	7818      	ldrb	r0, [r3, #0]
   17a60:	4770      	bx	lr
   17a62:	bf00      	nop
   17a64:	20002a04 	.word	0x20002a04

00017a68 <ble_hs_hci_init>:

void
ble_hs_hci_init(void)
{
   17a68:	b500      	push	{lr}
   17a6a:	b083      	sub	sp, #12
    return (ble_npl_error_t)os_sem_init(&sem->sem, tokens);
   17a6c:	2100      	movs	r1, #0
   17a6e:	480a      	ldr	r0, [pc, #40]	; (17a98 <ble_hs_hci_init+0x30>)
   17a70:	f7fa fa02 	bl	11e78 <os_sem_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   17a74:	4809      	ldr	r0, [pc, #36]	; (17a9c <ble_hs_hci_init+0x34>)
   17a76:	f7f9 ff75 	bl	11964 <os_mutex_init>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_hci_mutex);
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = mem_init_mbuf_pool(ble_hs_hci_frag_data,
   17a7a:	4b09      	ldr	r3, [pc, #36]	; (17aa0 <ble_hs_hci_init+0x38>)
   17a7c:	9301      	str	r3, [sp, #4]
   17a7e:	f44f 738e 	mov.w	r3, #284	; 0x11c
   17a82:	9300      	str	r3, [sp, #0]
   17a84:	2301      	movs	r3, #1
   17a86:	4a07      	ldr	r2, [pc, #28]	; (17aa4 <ble_hs_hci_init+0x3c>)
   17a88:	4907      	ldr	r1, [pc, #28]	; (17aa8 <ble_hs_hci_init+0x40>)
   17a8a:	4808      	ldr	r0, [pc, #32]	; (17aac <ble_hs_hci_init+0x44>)
   17a8c:	f005 ff1a 	bl	1d8c4 <mem_init_mbuf_pool>
                            &ble_hs_hci_frag_mbuf_pool,
                            1,
                            BLE_HS_HCI_FRAG_MEMBLOCK_SIZE,
                            "ble_hs_hci_frag");
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}
   17a90:	b003      	add	sp, #12
   17a92:	f85d fb04 	ldr.w	pc, [sp], #4
   17a96:	bf00      	nop
   17a98:	200029f8 	.word	0x200029f8
   17a9c:	200029ec 	.word	0x200029ec
   17aa0:	0002c3f8 	.word	0x0002c3f8
   17aa4:	200029c4 	.word	0x200029c4
   17aa8:	200029d0 	.word	0x200029d0
   17aac:	200028a8 	.word	0x200028a8

00017ab0 <ble_hs_hci_cmd_body_le_set_adv_enable>:
}

static void
ble_hs_hci_cmd_body_le_set_adv_enable(uint8_t enable, uint8_t *dst)
{
    dst[0] = enable;
   17ab0:	7008      	strb	r0, [r1, #0]
}
   17ab2:	4770      	bx	lr

00017ab4 <ble_hs_hci_cmd_body_le_set_scan_enable>:

static void
ble_hs_hci_cmd_body_le_set_scan_enable(uint8_t enable, uint8_t filter_dups,
                                       uint8_t *dst)
{
    dst[0] = enable;
   17ab4:	7010      	strb	r0, [r2, #0]
    dst[1] = filter_dups;
   17ab6:	7051      	strb	r1, [r2, #1]
}
   17ab8:	4770      	bx	lr

00017aba <ble_hs_hci_cmd_body_set_addr_res_en>:
}

static int
ble_hs_hci_cmd_body_set_addr_res_en(uint8_t enable, uint8_t *dst)
{
    if (enable > 1) {
   17aba:	2801      	cmp	r0, #1
   17abc:	d802      	bhi.n	17ac4 <ble_hs_hci_cmd_body_set_addr_res_en+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    dst[0] = enable;
   17abe:	7008      	strb	r0, [r1, #0]
    return 0;
   17ac0:	2000      	movs	r0, #0
   17ac2:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17ac4:	2012      	movs	r0, #18
}
   17ac6:	4770      	bx	lr

00017ac8 <ble_hs_hci_cmd_body_disconnect>:
{
   17ac8:	b538      	push	{r3, r4, r5, lr}
   17aca:	460d      	mov	r5, r1
   17acc:	4614      	mov	r4, r2
    put_le16(dst + 0, handle);
   17ace:	4601      	mov	r1, r0
   17ad0:	4610      	mov	r0, r2
   17ad2:	f007 f826 	bl	1eb22 <put_le16>
    dst[2] = reason;
   17ad6:	70a5      	strb	r5, [r4, #2]
}
   17ad8:	bd38      	pop	{r3, r4, r5, pc}

00017ada <ble_hs_hci_cmd_body_le_conn_update>:
{
   17ada:	b538      	push	{r3, r4, r5, lr}
   17adc:	4605      	mov	r5, r0
   17ade:	460c      	mov	r4, r1
    put_le16(dst + 0, hcu->handle);
   17ae0:	8801      	ldrh	r1, [r0, #0]
   17ae2:	4620      	mov	r0, r4
   17ae4:	f007 f81d 	bl	1eb22 <put_le16>
    put_le16(dst + 2, hcu->conn_itvl_min);
   17ae8:	8869      	ldrh	r1, [r5, #2]
   17aea:	1ca0      	adds	r0, r4, #2
   17aec:	f007 f819 	bl	1eb22 <put_le16>
    put_le16(dst + 4, hcu->conn_itvl_max);
   17af0:	88a9      	ldrh	r1, [r5, #4]
   17af2:	1d20      	adds	r0, r4, #4
   17af4:	f007 f815 	bl	1eb22 <put_le16>
    put_le16(dst + 6, hcu->conn_latency);
   17af8:	88e9      	ldrh	r1, [r5, #6]
   17afa:	1da0      	adds	r0, r4, #6
   17afc:	f007 f811 	bl	1eb22 <put_le16>
    put_le16(dst + 8, hcu->supervision_timeout);
   17b00:	8929      	ldrh	r1, [r5, #8]
   17b02:	f104 0008 	add.w	r0, r4, #8
   17b06:	f007 f80c 	bl	1eb22 <put_le16>
    put_le16(dst + 10, hcu->min_ce_len);
   17b0a:	8969      	ldrh	r1, [r5, #10]
   17b0c:	f104 000a 	add.w	r0, r4, #10
   17b10:	f007 f807 	bl	1eb22 <put_le16>
    put_le16(dst + 12, hcu->max_ce_len);
   17b14:	89a9      	ldrh	r1, [r5, #12]
   17b16:	f104 000c 	add.w	r0, r4, #12
   17b1a:	f007 f802 	bl	1eb22 <put_le16>
}
   17b1e:	2000      	movs	r0, #0
   17b20:	bd38      	pop	{r3, r4, r5, pc}

00017b22 <ble_hs_hci_cmd_body_le_conn_param_reply>:
{
   17b22:	b538      	push	{r3, r4, r5, lr}
   17b24:	4605      	mov	r5, r0
   17b26:	460c      	mov	r4, r1
    put_le16(dst + 0, hcr->handle);
   17b28:	8801      	ldrh	r1, [r0, #0]
   17b2a:	4620      	mov	r0, r4
   17b2c:	f006 fff9 	bl	1eb22 <put_le16>
    put_le16(dst + 2, hcr->conn_itvl_min);
   17b30:	8869      	ldrh	r1, [r5, #2]
   17b32:	1ca0      	adds	r0, r4, #2
   17b34:	f006 fff5 	bl	1eb22 <put_le16>
    put_le16(dst + 4, hcr->conn_itvl_max);
   17b38:	88a9      	ldrh	r1, [r5, #4]
   17b3a:	1d20      	adds	r0, r4, #4
   17b3c:	f006 fff1 	bl	1eb22 <put_le16>
    put_le16(dst + 6, hcr->conn_latency);
   17b40:	88e9      	ldrh	r1, [r5, #6]
   17b42:	1da0      	adds	r0, r4, #6
   17b44:	f006 ffed 	bl	1eb22 <put_le16>
    put_le16(dst + 8, hcr->supervision_timeout);
   17b48:	8929      	ldrh	r1, [r5, #8]
   17b4a:	f104 0008 	add.w	r0, r4, #8
   17b4e:	f006 ffe8 	bl	1eb22 <put_le16>
    put_le16(dst + 10, hcr->min_ce_len);
   17b52:	8969      	ldrh	r1, [r5, #10]
   17b54:	f104 000a 	add.w	r0, r4, #10
   17b58:	f006 ffe3 	bl	1eb22 <put_le16>
    put_le16(dst + 12, hcr->max_ce_len);
   17b5c:	89a9      	ldrh	r1, [r5, #12]
   17b5e:	f104 000c 	add.w	r0, r4, #12
   17b62:	f006 ffde 	bl	1eb22 <put_le16>
}
   17b66:	bd38      	pop	{r3, r4, r5, pc}

00017b68 <ble_hs_hci_cmd_body_le_conn_param_neg_reply>:
{
   17b68:	b538      	push	{r3, r4, r5, lr}
   17b6a:	4605      	mov	r5, r0
   17b6c:	460c      	mov	r4, r1
    put_le16(dst + 0, hcn->handle);
   17b6e:	8801      	ldrh	r1, [r0, #0]
   17b70:	4620      	mov	r0, r4
   17b72:	f006 ffd6 	bl	1eb22 <put_le16>
    dst[2] = hcn->reason;
   17b76:	78ab      	ldrb	r3, [r5, #2]
   17b78:	70a3      	strb	r3, [r4, #2]
}
   17b7a:	bd38      	pop	{r3, r4, r5, pc}

00017b7c <ble_hs_hci_cmd_body_set_resolv_priv_addr_timeout>:
}

static int
ble_hs_hci_cmd_body_set_resolv_priv_addr_timeout(uint16_t timeout,
                                                 uint8_t *dst)
{
   17b7c:	b508      	push	{r3, lr}
    if (timeout == 0 || timeout > 0xA1B8) {
   17b7e:	1e43      	subs	r3, r0, #1
   17b80:	b29b      	uxth	r3, r3
   17b82:	f24a 12b7 	movw	r2, #41399	; 0xa1b7
   17b86:	4293      	cmp	r3, r2
   17b88:	d806      	bhi.n	17b98 <ble_hs_hci_cmd_body_set_resolv_priv_addr_timeout+0x1c>
   17b8a:	460b      	mov	r3, r1
   17b8c:	4601      	mov	r1, r0
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    put_le16(dst, timeout);
   17b8e:	4618      	mov	r0, r3
   17b90:	f006 ffc7 	bl	1eb22 <put_le16>
    return 0;
   17b94:	2000      	movs	r0, #0
}
   17b96:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17b98:	2012      	movs	r0, #18
   17b9a:	e7fc      	b.n	17b96 <ble_hs_hci_cmd_body_set_resolv_priv_addr_timeout+0x1a>

00017b9c <ble_hs_hci_cmd_body_le_read_remote_feat>:
    return ble_hs_hci_cmd_body_set_random_addr(&r_addr, dst);
}

static void
ble_hs_hci_cmd_body_le_read_remote_feat(uint16_t handle, uint8_t *dst)
{
   17b9c:	b508      	push	{r3, lr}
   17b9e:	460b      	mov	r3, r1
    put_le16(dst, handle);
   17ba0:	4601      	mov	r1, r0
   17ba2:	4618      	mov	r0, r3
   17ba4:	f006 ffbd 	bl	1eb22 <put_le16>
}
   17ba8:	bd08      	pop	{r3, pc}

00017baa <ble_hs_hci_cmd_body_le_set_adv_params>:
{
   17baa:	b538      	push	{r3, r4, r5, lr}
    if ((adv->adv_itvl_min > adv->adv_itvl_max) ||
   17bac:	88c3      	ldrh	r3, [r0, #6]
   17bae:	8902      	ldrh	r2, [r0, #8]
   17bb0:	4293      	cmp	r3, r2
   17bb2:	d835      	bhi.n	17c20 <ble_hs_hci_cmd_body_le_set_adv_params+0x76>
        (adv->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   17bb4:	7882      	ldrb	r2, [r0, #2]
    if ((adv->adv_itvl_min > adv->adv_itvl_max) ||
   17bb6:	2a03      	cmp	r2, #3
   17bb8:	d835      	bhi.n	17c26 <ble_hs_hci_cmd_body_le_set_adv_params+0x7c>
        (adv->peer_addr_type > BLE_HCI_ADV_PEER_ADDR_MAX) ||
   17bba:	78c2      	ldrb	r2, [r0, #3]
        (adv->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   17bbc:	2a01      	cmp	r2, #1
   17bbe:	d835      	bhi.n	17c2c <ble_hs_hci_cmd_body_le_set_adv_params+0x82>
        (adv->adv_filter_policy > BLE_HCI_ADV_FILT_MAX) ||
   17bc0:	7902      	ldrb	r2, [r0, #4]
        (adv->peer_addr_type > BLE_HCI_ADV_PEER_ADDR_MAX) ||
   17bc2:	2a03      	cmp	r2, #3
   17bc4:	d835      	bhi.n	17c32 <ble_hs_hci_cmd_body_le_set_adv_params+0x88>
        (adv->adv_type > BLE_HCI_ADV_TYPE_MAX) ||
   17bc6:	7802      	ldrb	r2, [r0, #0]
        (adv->adv_filter_policy > BLE_HCI_ADV_FILT_MAX) ||
   17bc8:	2a04      	cmp	r2, #4
   17bca:	d835      	bhi.n	17c38 <ble_hs_hci_cmd_body_le_set_adv_params+0x8e>
        (adv->adv_channel_map == 0) ||
   17bcc:	7844      	ldrb	r4, [r0, #1]
        (adv->adv_type > BLE_HCI_ADV_TYPE_MAX) ||
   17bce:	b3b4      	cbz	r4, 17c3e <ble_hs_hci_cmd_body_le_set_adv_params+0x94>
        (adv->adv_channel_map == 0) ||
   17bd0:	f014 0ff8 	tst.w	r4, #248	; 0xf8
   17bd4:	d136      	bne.n	17c44 <ble_hs_hci_cmd_body_le_set_adv_params+0x9a>
    if (adv->adv_type != BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_HD) {
   17bd6:	2a01      	cmp	r2, #1
   17bd8:	d004      	beq.n	17be4 <ble_hs_hci_cmd_body_le_set_adv_params+0x3a>
        if ((adv->adv_itvl_min < itvl) ||
   17bda:	2b1f      	cmp	r3, #31
   17bdc:	d935      	bls.n	17c4a <ble_hs_hci_cmd_body_le_set_adv_params+0xa0>
   17bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   17be2:	d835      	bhi.n	17c50 <ble_hs_hci_cmd_body_le_set_adv_params+0xa6>
   17be4:	460d      	mov	r5, r1
   17be6:	4604      	mov	r4, r0
    put_le16(dst, adv->adv_itvl_min);
   17be8:	4619      	mov	r1, r3
   17bea:	4628      	mov	r0, r5
   17bec:	f006 ff99 	bl	1eb22 <put_le16>
    put_le16(dst + 2, adv->adv_itvl_max);
   17bf0:	8921      	ldrh	r1, [r4, #8]
   17bf2:	1ca8      	adds	r0, r5, #2
   17bf4:	f006 ff95 	bl	1eb22 <put_le16>
    dst[4] = adv->adv_type;
   17bf8:	7823      	ldrb	r3, [r4, #0]
   17bfa:	712b      	strb	r3, [r5, #4]
    dst[5] = adv->own_addr_type;
   17bfc:	78a3      	ldrb	r3, [r4, #2]
   17bfe:	716b      	strb	r3, [r5, #5]
    dst[6] = adv->peer_addr_type;
   17c00:	78e3      	ldrb	r3, [r4, #3]
   17c02:	71ab      	strb	r3, [r5, #6]
    memcpy(dst + 7, adv->peer_addr, BLE_DEV_ADDR_LEN);
   17c04:	4623      	mov	r3, r4
   17c06:	f853 2f0a 	ldr.w	r2, [r3, #10]!
   17c0a:	f8c5 2007 	str.w	r2, [r5, #7]
   17c0e:	889b      	ldrh	r3, [r3, #4]
   17c10:	f8a5 300b 	strh.w	r3, [r5, #11]
    dst[13] = adv->adv_channel_map;
   17c14:	7863      	ldrb	r3, [r4, #1]
   17c16:	736b      	strb	r3, [r5, #13]
    dst[14] = adv->adv_filter_policy;
   17c18:	7923      	ldrb	r3, [r4, #4]
   17c1a:	73ab      	strb	r3, [r5, #14]
    return 0;
   17c1c:	2000      	movs	r0, #0
}
   17c1e:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   17c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17c24:	e7fb      	b.n	17c1e <ble_hs_hci_cmd_body_le_set_adv_params+0x74>
   17c26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17c2a:	e7f8      	b.n	17c1e <ble_hs_hci_cmd_body_le_set_adv_params+0x74>
   17c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17c30:	e7f5      	b.n	17c1e <ble_hs_hci_cmd_body_le_set_adv_params+0x74>
   17c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17c36:	e7f2      	b.n	17c1e <ble_hs_hci_cmd_body_le_set_adv_params+0x74>
   17c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17c3c:	e7ef      	b.n	17c1e <ble_hs_hci_cmd_body_le_set_adv_params+0x74>
   17c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17c42:	e7ec      	b.n	17c1e <ble_hs_hci_cmd_body_le_set_adv_params+0x74>
   17c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17c48:	e7e9      	b.n	17c1e <ble_hs_hci_cmd_body_le_set_adv_params+0x74>
            return -1;
   17c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17c4e:	e7e6      	b.n	17c1e <ble_hs_hci_cmd_body_le_set_adv_params+0x74>
   17c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17c54:	e7e3      	b.n	17c1e <ble_hs_hci_cmd_body_le_set_adv_params+0x74>

00017c56 <ble_hs_hci_cmd_body_le_lt_key_req_reply>:
{
   17c56:	b570      	push	{r4, r5, r6, lr}
   17c58:	4604      	mov	r4, r0
   17c5a:	460d      	mov	r5, r1
    put_le16(dst + 0, hkr->conn_handle);
   17c5c:	8801      	ldrh	r1, [r0, #0]
   17c5e:	4628      	mov	r0, r5
   17c60:	f006 ff5f 	bl	1eb22 <put_le16>
    memcpy(dst + 2, hkr->long_term_key, sizeof hkr->long_term_key);
   17c64:	4620      	mov	r0, r4
   17c66:	f850 6f02 	ldr.w	r6, [r0, #2]!
   17c6a:	6844      	ldr	r4, [r0, #4]
   17c6c:	6881      	ldr	r1, [r0, #8]
   17c6e:	68c2      	ldr	r2, [r0, #12]
   17c70:	f8c5 6002 	str.w	r6, [r5, #2]
   17c74:	f8c5 4006 	str.w	r4, [r5, #6]
   17c78:	f8c5 100a 	str.w	r1, [r5, #10]
   17c7c:	f8c5 200e 	str.w	r2, [r5, #14]
}
   17c80:	bd70      	pop	{r4, r5, r6, pc}

00017c82 <ble_hs_hci_cmd_body_add_to_resolv_list>:
{
   17c82:	b470      	push	{r4, r5, r6}
   17c84:	9c03      	ldr	r4, [sp, #12]
    if (addr_type > BLE_ADDR_RANDOM) {
   17c86:	2801      	cmp	r0, #1
   17c88:	d902      	bls.n	17c90 <ble_hs_hci_cmd_body_add_to_resolv_list+0xe>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17c8a:	2012      	movs	r0, #18
}
   17c8c:	bc70      	pop	{r4, r5, r6}
   17c8e:	4770      	bx	lr
    dst[0] = addr_type;
   17c90:	4625      	mov	r5, r4
   17c92:	f805 0b01 	strb.w	r0, [r5], #1
    memcpy(dst + 1, addr, BLE_DEV_ADDR_LEN);
   17c96:	6808      	ldr	r0, [r1, #0]
   17c98:	f8c4 0001 	str.w	r0, [r4, #1]
   17c9c:	8889      	ldrh	r1, [r1, #4]
   17c9e:	80a9      	strh	r1, [r5, #4]
    memcpy(dst + 1 + 6, peer_irk , 16);
   17ca0:	6816      	ldr	r6, [r2, #0]
   17ca2:	6855      	ldr	r5, [r2, #4]
   17ca4:	6890      	ldr	r0, [r2, #8]
   17ca6:	68d2      	ldr	r2, [r2, #12]
   17ca8:	f8c4 6007 	str.w	r6, [r4, #7]
   17cac:	f8c4 500b 	str.w	r5, [r4, #11]
   17cb0:	f8c4 000f 	str.w	r0, [r4, #15]
   17cb4:	f8c4 2013 	str.w	r2, [r4, #19]
    memcpy(dst + 1 + 6 + 16, local_irk , 16);
   17cb8:	681d      	ldr	r5, [r3, #0]
   17cba:	6858      	ldr	r0, [r3, #4]
   17cbc:	6899      	ldr	r1, [r3, #8]
   17cbe:	68db      	ldr	r3, [r3, #12]
   17cc0:	f8c4 5017 	str.w	r5, [r4, #23]
   17cc4:	f8c4 001b 	str.w	r0, [r4, #27]
   17cc8:	f8c4 101f 	str.w	r1, [r4, #31]
   17ccc:	f8c4 3023 	str.w	r3, [r4, #35]	; 0x23
    return 0;
   17cd0:	2000      	movs	r0, #0
   17cd2:	e7db      	b.n	17c8c <ble_hs_hci_cmd_body_add_to_resolv_list+0xa>

00017cd4 <ble_hs_hci_cmd_body_le_set_priv_mode>:
    if (addr_type > BLE_ADDR_RANDOM) {
   17cd4:	2901      	cmp	r1, #1
   17cd6:	d901      	bls.n	17cdc <ble_hs_hci_cmd_body_le_set_priv_mode+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17cd8:	2012      	movs	r0, #18
}
   17cda:	4770      	bx	lr
{
   17cdc:	b410      	push	{r4}
    dst[0] = addr_type;
   17cde:	461c      	mov	r4, r3
   17ce0:	f804 1b01 	strb.w	r1, [r4], #1
    memcpy(dst + 1, addr, BLE_DEV_ADDR_LEN);
   17ce4:	6801      	ldr	r1, [r0, #0]
   17ce6:	f8c3 1001 	str.w	r1, [r3, #1]
   17cea:	8881      	ldrh	r1, [r0, #4]
   17cec:	80a1      	strh	r1, [r4, #4]
    dst[7] = priv_mode;
   17cee:	71da      	strb	r2, [r3, #7]
    return 0;
   17cf0:	2000      	movs	r0, #0
}
   17cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
   17cf6:	4770      	bx	lr

00017cf8 <ble_hs_hci_cmd_body_set_random_addr>:
    memcpy(dst, paddr->addr, BLE_DEV_ADDR_LEN);
   17cf8:	6803      	ldr	r3, [r0, #0]
   17cfa:	600b      	str	r3, [r1, #0]
   17cfc:	8883      	ldrh	r3, [r0, #4]
   17cfe:	808b      	strh	r3, [r1, #4]
}
   17d00:	2000      	movs	r0, #0
   17d02:	4770      	bx	lr

00017d04 <ble_hs_hci_cmd_transport>:
{
   17d04:	b508      	push	{r3, lr}
    rc = ble_hci_trans_hs_cmd_tx(cmdbuf);
   17d06:	f005 fccf 	bl	1d6a8 <ble_hci_trans_hs_cmd_tx>
    switch (rc) {
   17d0a:	4603      	mov	r3, r0
   17d0c:	b110      	cbz	r0, 17d14 <ble_hs_hci_cmd_transport+0x10>
   17d0e:	2807      	cmp	r0, #7
   17d10:	d002      	beq.n	17d18 <ble_hs_hci_cmd_transport+0x14>
        return BLE_HS_EUNKNOWN;
   17d12:	2311      	movs	r3, #17
}
   17d14:	4618      	mov	r0, r3
   17d16:	bd08      	pop	{r3, pc}
        return BLE_HS_ENOMEM_EVT;
   17d18:	2314      	movs	r3, #20
   17d1a:	e7fb      	b.n	17d14 <ble_hs_hci_cmd_transport+0x10>

00017d1c <ble_hs_hci_cmd_send>:
{
   17d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d1e:	4606      	mov	r6, r0
   17d20:	460d      	mov	r5, r1
   17d22:	4617      	mov	r7, r2
    buf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_CMD);
   17d24:	2003      	movs	r0, #3
   17d26:	f005 fd07 	bl	1d738 <ble_hci_trans_buf_alloc>
   17d2a:	4604      	mov	r4, r0
    put_le16(buf, opcode);
   17d2c:	4631      	mov	r1, r6
   17d2e:	f006 fef8 	bl	1eb22 <put_le16>
    buf[2] = len;
   17d32:	70a5      	strb	r5, [r4, #2]
    if (len != 0) {
   17d34:	b93d      	cbnz	r5, 17d46 <ble_hs_hci_cmd_send+0x2a>
    ble_hs_log_flat_buf(buf, len + BLE_HCI_CMD_HDR_LEN);
   17d36:	1ce9      	adds	r1, r5, #3
   17d38:	4620      	mov	r0, r4
   17d3a:	f000 fd41 	bl	187c0 <ble_hs_log_flat_buf>
    rc = ble_hs_hci_cmd_transport(buf);
   17d3e:	4620      	mov	r0, r4
   17d40:	f7ff ffe0 	bl	17d04 <ble_hs_hci_cmd_transport>
}
   17d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(buf + BLE_HCI_CMD_HDR_LEN, cmddata, len);
   17d46:	462a      	mov	r2, r5
   17d48:	4639      	mov	r1, r7
   17d4a:	1ce0      	adds	r0, r4, #3
   17d4c:	f7fa fbba 	bl	124c4 <memcpy>
   17d50:	e7f1      	b.n	17d36 <ble_hs_hci_cmd_send+0x1a>

00017d52 <ble_hs_hci_cmd_body_le_set_adv_data>:
{
   17d52:	b570      	push	{r4, r5, r6, lr}
    if (((data == NULL) && (len != 0)) || (len > BLE_HCI_MAX_ADV_DATA_LEN)) {
   17d54:	4606      	mov	r6, r0
   17d56:	b188      	cbz	r0, 17d7c <ble_hs_hci_cmd_body_le_set_adv_data+0x2a>
   17d58:	291f      	cmp	r1, #31
   17d5a:	d813      	bhi.n	17d84 <ble_hs_hci_cmd_body_le_set_adv_data+0x32>
   17d5c:	4614      	mov	r4, r2
   17d5e:	460d      	mov	r5, r1
    memset(dst, 0, BLE_HCI_SET_ADV_DATA_LEN);
   17d60:	2220      	movs	r2, #32
   17d62:	2100      	movs	r1, #0
   17d64:	4620      	mov	r0, r4
   17d66:	f7fa fbd6 	bl	12516 <memset>
    dst[0] = len;
   17d6a:	4620      	mov	r0, r4
   17d6c:	f800 5b01 	strb.w	r5, [r0], #1
    memcpy(dst + 1, data, len);
   17d70:	462a      	mov	r2, r5
   17d72:	4631      	mov	r1, r6
   17d74:	f7fa fba6 	bl	124c4 <memcpy>
    return 0;
   17d78:	2000      	movs	r0, #0
}
   17d7a:	bd70      	pop	{r4, r5, r6, pc}
    if (((data == NULL) && (len != 0)) || (len > BLE_HCI_MAX_ADV_DATA_LEN)) {
   17d7c:	2900      	cmp	r1, #0
   17d7e:	d0eb      	beq.n	17d58 <ble_hs_hci_cmd_body_le_set_adv_data+0x6>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17d80:	2012      	movs	r0, #18
   17d82:	e7fa      	b.n	17d7a <ble_hs_hci_cmd_body_le_set_adv_data+0x28>
   17d84:	2012      	movs	r0, #18
   17d86:	e7f8      	b.n	17d7a <ble_hs_hci_cmd_body_le_set_adv_data+0x28>

00017d88 <ble_hs_hci_cmd_body_set_event_mask>:
{
   17d88:	b510      	push	{r4, lr}
   17d8a:	4614      	mov	r4, r2
    put_le64(dst, event_mask);
   17d8c:	4602      	mov	r2, r0
   17d8e:	460b      	mov	r3, r1
   17d90:	4620      	mov	r0, r4
   17d92:	f006 fed4 	bl	1eb3e <put_le64>
}
   17d96:	bd10      	pop	{r4, pc}

00017d98 <ble_hs_hci_cmd_body_le_set_event_mask>:
{
   17d98:	b510      	push	{r4, lr}
   17d9a:	4614      	mov	r4, r2
    put_le64(dst, event_mask);
   17d9c:	4602      	mov	r2, r0
   17d9e:	460b      	mov	r3, r1
   17da0:	4620      	mov	r0, r4
   17da2:	f006 fecc 	bl	1eb3e <put_le64>
}
   17da6:	bd10      	pop	{r4, pc}

00017da8 <ble_hs_hci_cmd_body_le_start_encrypt>:
{
   17da8:	b570      	push	{r4, r5, r6, lr}
   17daa:	4604      	mov	r4, r0
   17dac:	460d      	mov	r5, r1
    put_le16(dst + 0, cmd->connection_handle);
   17dae:	8801      	ldrh	r1, [r0, #0]
   17db0:	4628      	mov	r0, r5
   17db2:	f006 feb6 	bl	1eb22 <put_le16>
    put_le64(dst + 2, cmd->random_number);
   17db6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   17dba:	1ca8      	adds	r0, r5, #2
   17dbc:	f006 febf 	bl	1eb3e <put_le64>
    put_le16(dst + 10, cmd->encrypted_diversifier);
   17dc0:	8861      	ldrh	r1, [r4, #2]
   17dc2:	f105 000a 	add.w	r0, r5, #10
   17dc6:	f006 feac 	bl	1eb22 <put_le16>
    memcpy(dst + 12, cmd->long_term_key, sizeof cmd->long_term_key);
   17dca:	4620      	mov	r0, r4
   17dcc:	f850 6f10 	ldr.w	r6, [r0, #16]!
   17dd0:	6844      	ldr	r4, [r0, #4]
   17dd2:	6881      	ldr	r1, [r0, #8]
   17dd4:	68c2      	ldr	r2, [r0, #12]
   17dd6:	60ee      	str	r6, [r5, #12]
   17dd8:	612c      	str	r4, [r5, #16]
   17dda:	6169      	str	r1, [r5, #20]
   17ddc:	61aa      	str	r2, [r5, #24]
}
   17dde:	bd70      	pop	{r4, r5, r6, pc}

00017de0 <ble_hs_hci_cmd_send_buf>:
{
   17de0:	b570      	push	{r4, r5, r6, lr}
   17de2:	4604      	mov	r4, r0
   17de4:	460e      	mov	r6, r1
   17de6:	4615      	mov	r5, r2
    switch (ble_hs_sync_state) {
   17de8:	4b0a      	ldr	r3, [pc, #40]	; (17e14 <ble_hs_hci_cmd_send_buf+0x34>)
   17dea:	781b      	ldrb	r3, [r3, #0]
   17dec:	2b01      	cmp	r3, #1
   17dee:	d006      	beq.n	17dfe <ble_hs_hci_cmd_send_buf+0x1e>
   17df0:	b11b      	cbz	r3, 17dfa <ble_hs_hci_cmd_send_buf+0x1a>
   17df2:	2b02      	cmp	r3, #2
   17df4:	d006      	beq.n	17e04 <ble_hs_hci_cmd_send_buf+0x24>
        return BLE_HS_EUNKNOWN;
   17df6:	2011      	movs	r0, #17
   17df8:	e009      	b.n	17e0e <ble_hs_hci_cmd_send_buf+0x2e>
        return BLE_HS_ENOTSYNCED;
   17dfa:	2016      	movs	r0, #22
   17dfc:	e007      	b.n	17e0e <ble_hs_hci_cmd_send_buf+0x2e>
        if (!ble_hs_is_parent_task()) {
   17dfe:	f7fe fd59 	bl	168b4 <ble_hs_is_parent_task>
   17e02:	b128      	cbz	r0, 17e10 <ble_hs_hci_cmd_send_buf+0x30>
    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
   17e04:	4632      	mov	r2, r6
   17e06:	4629      	mov	r1, r5
   17e08:	4620      	mov	r0, r4
   17e0a:	f7ff ff87 	bl	17d1c <ble_hs_hci_cmd_send>
}
   17e0e:	bd70      	pop	{r4, r5, r6, pc}
            return BLE_HS_ENOTSYNCED;
   17e10:	2016      	movs	r0, #22
   17e12:	e7fc      	b.n	17e0e <ble_hs_hci_cmd_send_buf+0x2e>
   17e14:	20003d68 	.word	0x20003d68

00017e18 <ble_hs_hci_cmd_build_le_set_adv_params>:
{
   17e18:	b508      	push	{r3, lr}
    return ble_hs_hci_cmd_body_le_set_adv_params(adv, dst);
   17e1a:	f7ff fec6 	bl	17baa <ble_hs_hci_cmd_body_le_set_adv_params>
}
   17e1e:	bd08      	pop	{r3, pc}

00017e20 <ble_hs_hci_cmd_build_le_set_adv_data>:
{
   17e20:	b508      	push	{r3, lr}
    return ble_hs_hci_cmd_body_le_set_adv_data(data, len, dst);
   17e22:	f7ff ff96 	bl	17d52 <ble_hs_hci_cmd_body_le_set_adv_data>
}
   17e26:	bd08      	pop	{r3, pc}

00017e28 <ble_hs_hci_cmd_build_set_event_mask>:
{
   17e28:	b508      	push	{r3, lr}
    ble_hs_hci_cmd_body_set_event_mask(event_mask, dst);
   17e2a:	f7ff ffad 	bl	17d88 <ble_hs_hci_cmd_body_set_event_mask>
}
   17e2e:	bd08      	pop	{r3, pc}

00017e30 <ble_hs_hci_cmd_build_set_event_mask2>:
{
   17e30:	b508      	push	{r3, lr}
    ble_hs_hci_cmd_body_set_event_mask(event_mask, dst);
   17e32:	f7ff ffa9 	bl	17d88 <ble_hs_hci_cmd_body_set_event_mask>
}
   17e36:	bd08      	pop	{r3, pc}

00017e38 <ble_hs_hci_cmd_build_disconnect>:
{
   17e38:	b508      	push	{r3, lr}
    ble_hs_hci_cmd_body_disconnect(handle, reason, dst);
   17e3a:	f7ff fe45 	bl	17ac8 <ble_hs_hci_cmd_body_disconnect>
}
   17e3e:	bd08      	pop	{r3, pc}

00017e40 <ble_hs_hci_cmd_build_le_set_event_mask>:
{
   17e40:	b508      	push	{r3, lr}
    ble_hs_hci_cmd_body_le_set_event_mask(event_mask, dst);
   17e42:	f7ff ffa9 	bl	17d98 <ble_hs_hci_cmd_body_le_set_event_mask>
}
   17e46:	bd08      	pop	{r3, pc}

00017e48 <ble_hs_hci_cmd_build_le_set_adv_enable>:
{
   17e48:	b508      	push	{r3, lr}
    ble_hs_hci_cmd_body_le_set_adv_enable(enable, dst);
   17e4a:	f7ff fe31 	bl	17ab0 <ble_hs_hci_cmd_body_le_set_adv_enable>
}
   17e4e:	bd08      	pop	{r3, pc}

00017e50 <ble_hs_hci_cmd_build_le_set_scan_enable>:
{
   17e50:	b508      	push	{r3, lr}
    ble_hs_hci_cmd_body_le_set_scan_enable(enable, filter_dups, dst);
   17e52:	f7ff fe2f 	bl	17ab4 <ble_hs_hci_cmd_body_le_set_scan_enable>
}
   17e56:	bd08      	pop	{r3, pc}

00017e58 <ble_hs_hci_cmd_build_le_conn_update>:
{
   17e58:	b508      	push	{r3, lr}
    return ble_hs_hci_cmd_body_le_conn_update(hcu, dst);
   17e5a:	f7ff fe3e 	bl	17ada <ble_hs_hci_cmd_body_le_conn_update>
}
   17e5e:	bd08      	pop	{r3, pc}

00017e60 <ble_hs_hci_cmd_build_le_lt_key_req_reply>:
{
   17e60:	b508      	push	{r3, lr}
    ble_hs_hci_cmd_body_le_lt_key_req_reply(hkr, dst);
   17e62:	f7ff fef8 	bl	17c56 <ble_hs_hci_cmd_body_le_lt_key_req_reply>
}
   17e66:	bd08      	pop	{r3, pc}

00017e68 <ble_hs_hci_cmd_build_le_lt_key_req_neg_reply>:
{
   17e68:	b508      	push	{r3, lr}
   17e6a:	460b      	mov	r3, r1
    put_le16(dst, conn_handle);
   17e6c:	4601      	mov	r1, r0
   17e6e:	4618      	mov	r0, r3
   17e70:	f006 fe57 	bl	1eb22 <put_le16>
}
   17e74:	bd08      	pop	{r3, pc}

00017e76 <ble_hs_hci_cmd_build_le_conn_param_reply>:
{
   17e76:	b508      	push	{r3, lr}
    ble_hs_hci_cmd_body_le_conn_param_reply(hcr, dst);
   17e78:	f7ff fe53 	bl	17b22 <ble_hs_hci_cmd_body_le_conn_param_reply>
}
   17e7c:	bd08      	pop	{r3, pc}

00017e7e <ble_hs_hci_cmd_build_le_conn_param_neg_reply>:
{
   17e7e:	b508      	push	{r3, lr}
    ble_hs_hci_cmd_body_le_conn_param_neg_reply(hcn, dst);
   17e80:	f7ff fe72 	bl	17b68 <ble_hs_hci_cmd_body_le_conn_param_neg_reply>
}
   17e84:	bd08      	pop	{r3, pc}

00017e86 <ble_hs_hci_cmd_build_le_start_encrypt>:
{
   17e86:	b508      	push	{r3, lr}
    ble_hs_hci_cmd_body_le_start_encrypt(cmd, dst);
   17e88:	f7ff ff8e 	bl	17da8 <ble_hs_hci_cmd_body_le_start_encrypt>
}
   17e8c:	bd08      	pop	{r3, pc}

00017e8e <ble_hs_hci_cmd_build_add_to_resolv_list>:
{
   17e8e:	b510      	push	{r4, lr}
   17e90:	b082      	sub	sp, #8
    return ble_hs_hci_cmd_body_add_to_resolv_list(
   17e92:	7804      	ldrb	r4, [r0, #0]
   17e94:	9100      	str	r1, [sp, #0]
   17e96:	1dc3      	adds	r3, r0, #7
   17e98:	f100 0217 	add.w	r2, r0, #23
   17e9c:	1c41      	adds	r1, r0, #1
   17e9e:	4620      	mov	r0, r4
   17ea0:	f7ff feef 	bl	17c82 <ble_hs_hci_cmd_body_add_to_resolv_list>
}
   17ea4:	b002      	add	sp, #8
   17ea6:	bd10      	pop	{r4, pc}

00017ea8 <ble_hs_hci_cmd_build_set_addr_res_en>:
{
   17ea8:	b508      	push	{r3, lr}
    return ble_hs_hci_cmd_body_set_addr_res_en(enable, dst);
   17eaa:	f7ff fe06 	bl	17aba <ble_hs_hci_cmd_body_set_addr_res_en>
}
   17eae:	bd08      	pop	{r3, pc}

00017eb0 <ble_hs_hci_cmd_build_set_resolv_priv_addr_timeout>:
{
   17eb0:	b508      	push	{r3, lr}
    return ble_hs_hci_cmd_body_set_resolv_priv_addr_timeout(timeout, dst);
   17eb2:	f7ff fe63 	bl	17b7c <ble_hs_hci_cmd_body_set_resolv_priv_addr_timeout>
}
   17eb6:	bd08      	pop	{r3, pc}

00017eb8 <ble_hs_hci_cmd_build_le_set_priv_mode>:
{
   17eb8:	b508      	push	{r3, lr}
    return ble_hs_hci_cmd_body_le_set_priv_mode(addr, addr_type, priv_mode, dst);
   17eba:	f7ff ff0b 	bl	17cd4 <ble_hs_hci_cmd_body_le_set_priv_mode>
}
   17ebe:	bd08      	pop	{r3, pc}

00017ec0 <ble_hs_hci_cmd_build_set_random_addr>:
{
   17ec0:	b500      	push	{lr}
   17ec2:	b083      	sub	sp, #12
   17ec4:	4603      	mov	r3, r0
    memcpy(r_addr.addr, addr, sizeof(r_addr.addr));
   17ec6:	6800      	ldr	r0, [r0, #0]
   17ec8:	9000      	str	r0, [sp, #0]
   17eca:	889b      	ldrh	r3, [r3, #4]
   17ecc:	f8ad 3004 	strh.w	r3, [sp, #4]
    return ble_hs_hci_cmd_body_set_random_addr(&r_addr, dst);
   17ed0:	4668      	mov	r0, sp
   17ed2:	f7ff ff11 	bl	17cf8 <ble_hs_hci_cmd_body_set_random_addr>
}
   17ed6:	b003      	add	sp, #12
   17ed8:	f85d fb04 	ldr.w	pc, [sp], #4

00017edc <ble_hs_hci_cmd_build_le_read_remote_feat>:

int
ble_hs_hci_cmd_build_le_read_remote_feat(uint16_t handle, uint8_t *dst,
                                                                 int dst_len)
{
   17edc:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(dst_len >= BLE_HCI_CONN_RD_REM_FEAT_LEN);

    ble_hs_hci_cmd_body_le_read_remote_feat(handle, dst);
   17ede:	f7ff fe5d 	bl	17b9c <ble_hs_hci_cmd_body_le_read_remote_feat>

    return 0;
}
   17ee2:	2000      	movs	r0, #0
   17ee4:	bd08      	pop	{r3, pc}
	...

00017ee8 <ble_hs_hci_evt_dispatch_find>:
ble_hs_hci_evt_dispatch_find(uint8_t event_code)
{
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   17ee8:	2300      	movs	r3, #0
   17eea:	2b05      	cmp	r3, #5
   17eec:	d808      	bhi.n	17f00 <ble_hs_hci_evt_dispatch_find+0x18>
        entry = ble_hs_hci_evt_dispatch + i;
   17eee:	4a06      	ldr	r2, [pc, #24]	; (17f08 <ble_hs_hci_evt_dispatch_find+0x20>)
   17ef0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
        if (entry->event_code == event_code) {
   17ef4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   17ef8:	4282      	cmp	r2, r0
   17efa:	d002      	beq.n	17f02 <ble_hs_hci_evt_dispatch_find+0x1a>
    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   17efc:	3301      	adds	r3, #1
   17efe:	e7f4      	b.n	17eea <ble_hs_hci_evt_dispatch_find+0x2>
            return entry;
        }
    }

    return NULL;
   17f00:	2100      	movs	r1, #0
}
   17f02:	4608      	mov	r0, r1
   17f04:	4770      	bx	lr
   17f06:	bf00      	nop
   17f08:	0002c408 	.word	0x0002c408

00017f0c <ble_hs_hci_evt_le_dispatch_find>:

static ble_hs_hci_evt_le_fn *
ble_hs_hci_evt_le_dispatch_find(uint8_t event_code)
{
    if (event_code >= BLE_HS_HCI_EVT_LE_DISPATCH_SZ) {
   17f0c:	2813      	cmp	r0, #19
   17f0e:	d803      	bhi.n	17f18 <ble_hs_hci_evt_le_dispatch_find+0xc>
        return NULL;
    }

    return ble_hs_hci_evt_le_dispatch[event_code];
   17f10:	4b02      	ldr	r3, [pc, #8]	; (17f1c <ble_hs_hci_evt_le_dispatch_find+0x10>)
   17f12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17f16:	4770      	bx	lr
        return NULL;
   17f18:	2000      	movs	r0, #0
}
   17f1a:	4770      	bx	lr
   17f1c:	0002c438 	.word	0x0002c438

00017f20 <ble_hs_hci_evt_le_meta>:
{
    ble_hs_hci_evt_le_fn *fn;
    uint8_t subevent;
    int rc;

    if (len < BLE_HCI_EVENT_HDR_LEN + BLE_HCI_LE_MIN_LEN) {
   17f20:	2a02      	cmp	r2, #2
   17f22:	dd0d      	ble.n	17f40 <ble_hs_hci_evt_le_meta+0x20>
{
   17f24:	b570      	push	{r4, r5, r6, lr}
   17f26:	4614      	mov	r4, r2
   17f28:	460d      	mov	r5, r1
        return BLE_HS_ECONTROLLER;
    }

    subevent = data[2];
   17f2a:	788e      	ldrb	r6, [r1, #2]
    fn = ble_hs_hci_evt_le_dispatch_find(subevent);
   17f2c:	4630      	mov	r0, r6
   17f2e:	f7ff ffed 	bl	17f0c <ble_hs_hci_evt_le_dispatch_find>
    if (fn) {
   17f32:	4603      	mov	r3, r0
   17f34:	b130      	cbz	r0, 17f44 <ble_hs_hci_evt_le_meta+0x24>
        rc = fn(subevent, data + BLE_HCI_EVENT_HDR_LEN,
   17f36:	1ea2      	subs	r2, r4, #2
   17f38:	1ca9      	adds	r1, r5, #2
   17f3a:	4630      	mov	r0, r6
   17f3c:	4798      	blx	r3
            return rc;
        }
    }

    return 0;
}
   17f3e:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   17f40:	200c      	movs	r0, #12
}
   17f42:	4770      	bx	lr
    return 0;
   17f44:	2000      	movs	r0, #0
   17f46:	e7fa      	b.n	17f3e <ble_hs_hci_evt_le_meta+0x1e>

00017f48 <ble_hs_hci_evt_le_adv_rpt_first_pass>:
{
    uint8_t num_reports;
    int off;
    int i;

    if (len < BLE_HCI_LE_ADV_RPT_MIN_LEN) {
   17f48:	290b      	cmp	r1, #11
   17f4a:	dd17      	ble.n	17f7c <ble_hs_hci_evt_le_adv_rpt_first_pass+0x34>
{
   17f4c:	b430      	push	{r4, r5}
        return BLE_HS_ECONTROLLER;
    }

    num_reports = data[1];
   17f4e:	7845      	ldrb	r5, [r0, #1]
    if (num_reports < BLE_HCI_LE_ADV_RPT_NUM_RPTS_MIN ||
   17f50:	1e6b      	subs	r3, r5, #1
   17f52:	b2db      	uxtb	r3, r3
   17f54:	2b18      	cmp	r3, #24
   17f56:	d813      	bhi.n	17f80 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x38>
        num_reports > BLE_HCI_LE_ADV_RPT_NUM_RPTS_MAX) {
        return BLE_HS_EBADDATA;
    }

    off = 2; /* Subevent code and num reports. */
    for (i = 0; i < num_reports; i++) {
   17f58:	2400      	movs	r4, #0
    off = 2; /* Subevent code and num reports. */
   17f5a:	2302      	movs	r3, #2
    for (i = 0; i < num_reports; i++) {
   17f5c:	42a5      	cmp	r5, r4
   17f5e:	dd07      	ble.n	17f70 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x28>
        /* Move past event type (1), address type (1) and address (6) */
        off += 8;
   17f60:	3308      	adds	r3, #8

        /* Add advertising data length (N), length (1) and rssi (1) */
        off += data[off];
   17f62:	5cc2      	ldrb	r2, [r0, r3]
   17f64:	4413      	add	r3, r2
        off += 2;
   17f66:	3302      	adds	r3, #2

        /* Make sure we are not past length */
        if (off > len) {
   17f68:	4299      	cmp	r1, r3
   17f6a:	db0b      	blt.n	17f84 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3c>
    for (i = 0; i < num_reports; i++) {
   17f6c:	3401      	adds	r4, #1
   17f6e:	e7f5      	b.n	17f5c <ble_hs_hci_evt_le_adv_rpt_first_pass+0x14>
            return BLE_HS_ECONTROLLER;
        }
    }

    /* Make sure length was correct */
    if (off != len) {
   17f70:	428b      	cmp	r3, r1
   17f72:	d101      	bne.n	17f78 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x30>
        return BLE_HS_ECONTROLLER;
    }

    return 0;
   17f74:	2000      	movs	r0, #0
   17f76:	e006      	b.n	17f86 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3e>
        return BLE_HS_ECONTROLLER;
   17f78:	200c      	movs	r0, #12
   17f7a:	e004      	b.n	17f86 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3e>
        return BLE_HS_ECONTROLLER;
   17f7c:	200c      	movs	r0, #12
}
   17f7e:	4770      	bx	lr
        return BLE_HS_EBADDATA;
   17f80:	200a      	movs	r0, #10
   17f82:	e000      	b.n	17f86 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3e>
            return BLE_HS_ECONTROLLER;
   17f84:	200c      	movs	r0, #12
}
   17f86:	bc30      	pop	{r4, r5}
   17f88:	4770      	bx	lr

00017f8a <ble_hs_hci_evt_le_ext_adv_rpt>:
        ble_gap_rx_ext_adv_report(&desc);
        params += 1;
    }
#endif
    return 0;
}
   17f8a:	2000      	movs	r0, #0
   17f8c:	4770      	bx	lr

00017f8e <ble_hs_hci_evt_le_periodic_adv_sync_estab>:

    ble_gap_rx_peroidic_adv_sync_estab(&evt);
#endif

    return 0;
}
   17f8e:	2000      	movs	r0, #0
   17f90:	4770      	bx	lr

00017f92 <ble_hs_hci_evt_le_periodic_adv_rpt>:
    evt = (struct hci_le_subev_periodic_adv_rpt *)(data + 1);
    ble_gap_rx_periodic_adv_rpt(evt);
#endif

return 0;
}
   17f92:	2000      	movs	r0, #0
   17f94:	4770      	bx	lr

00017f96 <ble_hs_hci_evt_le_periodic_adv_sync_lost>:

    ble_gap_rx_periodic_adv_sync_lost(&evt);

#endif
    return 0;
}
   17f96:	2000      	movs	r0, #0
   17f98:	4770      	bx	lr

00017f9a <ble_hs_hci_evt_le_scan_timeout>:
{
#if MYNEWT_VAL(BLE_EXT_ADV) && NIMBLE_BLE_SCAN
        ble_gap_rx_le_scan_timeout();
#endif
        return 0;
}
   17f9a:	2000      	movs	r0, #0
   17f9c:	4770      	bx	lr

00017f9e <ble_hs_hci_evt_le_adv_set_terminated>:
    }
    ble_gap_rx_adv_set_terminated(&evt);
#endif

    return 0;
}
   17f9e:	2000      	movs	r0, #0
   17fa0:	4770      	bx	lr

00017fa2 <ble_hs_hci_evt_le_scan_req_rcvd>:

    ble_gap_rx_scan_req_rcvd(&evt);
#endif

    return 0;
}
   17fa2:	2000      	movs	r0, #0
   17fa4:	4770      	bx	lr

00017fa6 <ble_hs_hci_evt_hw_error>:
    if (len < BLE_HCI_EVENT_HW_ERROR_LEN) {
   17fa6:	2a00      	cmp	r2, #0
   17fa8:	dd05      	ble.n	17fb6 <ble_hs_hci_evt_hw_error+0x10>
{
   17faa:	b508      	push	{r3, lr}
    ble_hs_hw_error(hw_code);
   17fac:	7808      	ldrb	r0, [r1, #0]
   17fae:	f7fe fdb7 	bl	16b20 <ble_hs_hw_error>
    return 0;
   17fb2:	2000      	movs	r0, #0
}
   17fb4:	bd08      	pop	{r3, pc}
        return BLE_HS_ECONTROLLER;
   17fb6:	200c      	movs	r0, #12
}
   17fb8:	4770      	bx	lr

00017fba <ble_hs_hci_evt_enc_key_refresh>:
    if (len < BLE_HCI_EVENT_ENC_KEY_REFRESH_LEN) {
   17fba:	2a02      	cmp	r2, #2
   17fbc:	dd10      	ble.n	17fe0 <ble_hs_hci_evt_enc_key_refresh+0x26>
{
   17fbe:	b500      	push	{lr}
   17fc0:	b083      	sub	sp, #12
    evt.status = data[2];
   17fc2:	788b      	ldrb	r3, [r1, #2]
   17fc4:	f88d 3004 	strb.w	r3, [sp, #4]
    evt.connection_handle = get_le16(data + 3);
   17fc8:	1cc8      	adds	r0, r1, #3
   17fca:	f006 fdcb 	bl	1eb64 <get_le16>
   17fce:	f8ad 0006 	strh.w	r0, [sp, #6]
    ble_sm_enc_key_refresh_rx(&evt);
   17fd2:	a801      	add	r0, sp, #4
   17fd4:	f002 fda7 	bl	1ab26 <ble_sm_enc_key_refresh_rx>
    return 0;
   17fd8:	2000      	movs	r0, #0
}
   17fda:	b003      	add	sp, #12
   17fdc:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_ECONTROLLER;
   17fe0:	200c      	movs	r0, #12
}
   17fe2:	4770      	bx	lr

00017fe4 <ble_hs_hci_evt_encrypt_change>:
    if (len < BLE_HCI_EVENT_ENCRYPT_CHG_LEN) {
   17fe4:	2a03      	cmp	r2, #3
   17fe6:	dd13      	ble.n	18010 <ble_hs_hci_evt_encrypt_change+0x2c>
{
   17fe8:	b510      	push	{r4, lr}
   17fea:	b082      	sub	sp, #8
   17fec:	460c      	mov	r4, r1
    evt.status = data[2];
   17fee:	788b      	ldrb	r3, [r1, #2]
   17ff0:	f88d 3004 	strb.w	r3, [sp, #4]
    evt.connection_handle = get_le16(data + 3);
   17ff4:	1cc8      	adds	r0, r1, #3
   17ff6:	f006 fdb5 	bl	1eb64 <get_le16>
   17ffa:	f8ad 0006 	strh.w	r0, [sp, #6]
    evt.encryption_enabled = data[5];
   17ffe:	7963      	ldrb	r3, [r4, #5]
   18000:	f88d 3005 	strb.w	r3, [sp, #5]
    ble_sm_enc_change_rx(&evt);
   18004:	a801      	add	r0, sp, #4
   18006:	f002 fd85 	bl	1ab14 <ble_sm_enc_change_rx>
    return 0;
   1800a:	2000      	movs	r0, #0
}
   1800c:	b002      	add	sp, #8
   1800e:	bd10      	pop	{r4, pc}
        return BLE_HS_ECONTROLLER;
   18010:	200c      	movs	r0, #12
}
   18012:	4770      	bx	lr

00018014 <ble_hs_hci_evt_disconn_complete>:
    if (len < BLE_HCI_EVENT_DISCONN_COMPLETE_LEN) {
   18014:	2a03      	cmp	r2, #3
   18016:	dd21      	ble.n	1805c <ble_hs_hci_evt_disconn_complete+0x48>
{
   18018:	b510      	push	{r4, lr}
   1801a:	b082      	sub	sp, #8
   1801c:	460c      	mov	r4, r1
    evt.status = data[2];
   1801e:	788b      	ldrb	r3, [r1, #2]
   18020:	f88d 3006 	strb.w	r3, [sp, #6]
    evt.connection_handle = get_le16(data + 3);
   18024:	1cc8      	adds	r0, r1, #3
   18026:	f006 fd9d 	bl	1eb64 <get_le16>
   1802a:	f8ad 0004 	strh.w	r0, [sp, #4]
    evt.reason = data[5];
   1802e:	7963      	ldrb	r3, [r4, #5]
   18030:	f88d 3007 	strb.w	r3, [sp, #7]
    ble_hs_lock();
   18034:	f7fe fc62 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(evt.connection_handle);
   18038:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1803c:	f7ff fa34 	bl	174a8 <ble_hs_conn_find>
    if (conn != NULL) {
   18040:	b110      	cbz	r0, 18048 <ble_hs_hci_evt_disconn_complete+0x34>
        ble_hs_hci_add_avail_pkts(conn->bhc_outstanding_pkts);
   18042:	8f00      	ldrh	r0, [r0, #56]	; 0x38
   18044:	f7ff fc24 	bl	17890 <ble_hs_hci_add_avail_pkts>
    ble_hs_unlock();
   18048:	f7fe fc5c 	bl	16904 <ble_hs_unlock>
    ble_gap_rx_disconn_complete(&evt);
   1804c:	a801      	add	r0, sp, #4
   1804e:	f7fb fe10 	bl	13c72 <ble_gap_rx_disconn_complete>
    ble_hs_wakeup_tx();
   18052:	f7fe fc6d 	bl	16930 <ble_hs_wakeup_tx>
    return 0;
   18056:	2000      	movs	r0, #0
}
   18058:	b002      	add	sp, #8
   1805a:	bd10      	pop	{r4, pc}
        return BLE_HS_ECONTROLLER;
   1805c:	200c      	movs	r0, #12
}
   1805e:	4770      	bx	lr

00018060 <ble_hs_hci_evt_num_completed_pkts>:
    if (len < BLE_HCI_EVENT_HDR_LEN + BLE_HCI_EVENT_NUM_COMP_PKTS_HDR_LEN) {
   18060:	2a02      	cmp	r2, #2
   18062:	dd34      	ble.n	180ce <ble_hs_hci_evt_num_completed_pkts+0x6e>
{
   18064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    num_handles = data[off];
   18068:	788f      	ldrb	r7, [r1, #2]
              num_handles * BLE_HCI_EVENT_NUM_COMP_PKTS_ENT_LEN) {
   1806a:	00bb      	lsls	r3, r7, #2
    if (len < BLE_HCI_EVENT_NUM_COMP_PKTS_HDR_LEN +
   1806c:	3301      	adds	r3, #1
   1806e:	4293      	cmp	r3, r2
   18070:	dc2f      	bgt.n	180d2 <ble_hs_hci_evt_num_completed_pkts+0x72>
   18072:	460e      	mov	r6, r1
    for (i = 0; i < num_handles; i++) {
   18074:	2500      	movs	r5, #0
    off++;
   18076:	2403      	movs	r4, #3
   18078:	e008      	b.n	1808c <ble_hs_hci_evt_num_completed_pkts+0x2c>
                    conn->bhc_outstanding_pkts -= num_pkts;
   1807a:	eba3 0308 	sub.w	r3, r3, r8
   1807e:	8703      	strh	r3, [r0, #56]	; 0x38
                ble_hs_hci_add_avail_pkts(num_pkts);
   18080:	4640      	mov	r0, r8
   18082:	f7ff fc05 	bl	17890 <ble_hs_hci_add_avail_pkts>
            ble_hs_unlock();
   18086:	f7fe fc3d 	bl	16904 <ble_hs_unlock>
    for (i = 0; i < num_handles; i++) {
   1808a:	3501      	adds	r5, #1
   1808c:	42af      	cmp	r7, r5
   1808e:	dd19      	ble.n	180c4 <ble_hs_hci_evt_num_completed_pkts+0x64>
        handle = get_le16(data + off);
   18090:	1930      	adds	r0, r6, r4
   18092:	f006 fd67 	bl	1eb64 <get_le16>
   18096:	4681      	mov	r9, r0
        num_pkts = get_le16(data + off + 2);
   18098:	1ca0      	adds	r0, r4, #2
   1809a:	4430      	add	r0, r6
   1809c:	f006 fd62 	bl	1eb64 <get_le16>
        off += (2 * sizeof(uint16_t));
   180a0:	3404      	adds	r4, #4
        if (num_pkts > 0) {
   180a2:	4680      	mov	r8, r0
   180a4:	2800      	cmp	r0, #0
   180a6:	d0f0      	beq.n	1808a <ble_hs_hci_evt_num_completed_pkts+0x2a>
            ble_hs_lock();
   180a8:	f7fe fc28 	bl	168fc <ble_hs_lock>
            conn = ble_hs_conn_find(handle);
   180ac:	4648      	mov	r0, r9
   180ae:	f7ff f9fb 	bl	174a8 <ble_hs_conn_find>
            if (conn != NULL) {
   180b2:	2800      	cmp	r0, #0
   180b4:	d0e7      	beq.n	18086 <ble_hs_hci_evt_num_completed_pkts+0x26>
                if (conn->bhc_outstanding_pkts < num_pkts) {
   180b6:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   180b8:	4543      	cmp	r3, r8
   180ba:	d2de      	bcs.n	1807a <ble_hs_hci_evt_num_completed_pkts+0x1a>
                    ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   180bc:	200c      	movs	r0, #12
   180be:	f7fe fd1f 	bl	16b00 <ble_hs_sched_reset>
   180c2:	e7dd      	b.n	18080 <ble_hs_hci_evt_num_completed_pkts+0x20>
    ble_hs_wakeup_tx();
   180c4:	f7fe fc34 	bl	16930 <ble_hs_wakeup_tx>
    return 0;
   180c8:	2000      	movs	r0, #0
}
   180ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return BLE_HS_ECONTROLLER;
   180ce:	200c      	movs	r0, #12
}
   180d0:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   180d2:	200c      	movs	r0, #12
   180d4:	e7f9      	b.n	180ca <ble_hs_hci_evt_num_completed_pkts+0x6a>

000180d6 <ble_hs_hci_evt_le_phy_update_complete>:
static int
ble_hs_hci_evt_le_phy_update_complete(uint8_t subevent, uint8_t *data, int len)
{
    struct hci_le_phy_upd_complete evt;

    if (len < BLE_HCI_LE_PHY_UPD_LEN) {
   180d6:	2a05      	cmp	r2, #5
   180d8:	dd19      	ble.n	1810e <ble_hs_hci_evt_le_phy_update_complete+0x38>
{
   180da:	b510      	push	{r4, lr}
   180dc:	b082      	sub	sp, #8
   180de:	460c      	mov	r4, r1
        return BLE_HS_ECONTROLLER;
    }

    evt.subevent_code = data[0];
   180e0:	780b      	ldrb	r3, [r1, #0]
   180e2:	f88d 3000 	strb.w	r3, [sp]
    evt.status = data[1];
   180e6:	784b      	ldrb	r3, [r1, #1]
   180e8:	f88d 3001 	strb.w	r3, [sp, #1]
    evt.connection_handle = get_le16(data + 2);
   180ec:	1c88      	adds	r0, r1, #2
   180ee:	f006 fd39 	bl	1eb64 <get_le16>
   180f2:	f8ad 0002 	strh.w	r0, [sp, #2]
    evt.tx_phy = data[4];
   180f6:	7923      	ldrb	r3, [r4, #4]
   180f8:	f88d 3004 	strb.w	r3, [sp, #4]
    evt.rx_phy = data[5];
   180fc:	7963      	ldrb	r3, [r4, #5]
   180fe:	f88d 3005 	strb.w	r3, [sp, #5]

    ble_gap_rx_phy_update_complete(&evt);
   18102:	4668      	mov	r0, sp
   18104:	f7fb fb4c 	bl	137a0 <ble_gap_rx_phy_update_complete>

    return 0;
   18108:	2000      	movs	r0, #0
}
   1810a:	b002      	add	sp, #8
   1810c:	bd10      	pop	{r4, pc}
        return BLE_HS_ECONTROLLER;
   1810e:	200c      	movs	r0, #12
}
   18110:	4770      	bx	lr

00018112 <ble_hs_hci_evt_le_dir_adv_rpt>:
{
   18112:	b570      	push	{r4, r5, r6, lr}
   18114:	b086      	sub	sp, #24
    struct ble_gap_disc_desc desc = {0};
   18116:	2300      	movs	r3, #0
   18118:	9300      	str	r3, [sp, #0]
   1811a:	9302      	str	r3, [sp, #8]
   1811c:	9303      	str	r3, [sp, #12]
   1811e:	9305      	str	r3, [sp, #20]
    if (len < BLE_HCI_LE_ADV_DIRECT_RPT_LEN) {
   18120:	2a11      	cmp	r2, #17
   18122:	dd3d      	ble.n	181a0 <ble_hs_hci_evt_le_dir_adv_rpt+0x8e>
    num_reports = data[1];
   18124:	784d      	ldrb	r5, [r1, #1]
    if (len != 2 + num_reports * BLE_HCI_LE_ADV_DIRECT_RPT_SUB_LEN) {
   18126:	012b      	lsls	r3, r5, #4
   18128:	3302      	adds	r3, #2
   1812a:	4293      	cmp	r3, r2
   1812c:	d13a      	bne.n	181a4 <ble_hs_hci_evt_le_dir_adv_rpt+0x92>
   1812e:	460e      	mov	r6, r1
    for (i = 0; i < num_reports; i++) {
   18130:	2400      	movs	r4, #0
   18132:	e030      	b.n	18196 <ble_hs_hci_evt_le_dir_adv_rpt+0x84>
        off = 2 + suboff * num_reports + i;
   18134:	1ca3      	adds	r3, r4, #2
        desc.event_type = data[off];
   18136:	5cf3      	ldrb	r3, [r6, r3]
   18138:	f88d 3000 	strb.w	r3, [sp]
        off = 2 + suboff * num_reports + i;
   1813c:	1cab      	adds	r3, r5, #2
   1813e:	4423      	add	r3, r4
        desc.addr.type = data[off];
   18140:	5cf3      	ldrb	r3, [r6, r3]
   18142:	f88d 3002 	strb.w	r3, [sp, #2]
        off = 2 + suboff * num_reports + i * 6;
   18146:	006a      	lsls	r2, r5, #1
   18148:	3202      	adds	r2, #2
   1814a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1814e:	004b      	lsls	r3, r1, #1
   18150:	441a      	add	r2, r3
        memcpy(desc.addr.val, data + off, 6);
   18152:	4432      	add	r2, r6
   18154:	6811      	ldr	r1, [r2, #0]
   18156:	f8cd 1003 	str.w	r1, [sp, #3]
   1815a:	8892      	ldrh	r2, [r2, #4]
   1815c:	f8ad 2007 	strh.w	r2, [sp, #7]
        off = 2 + suboff * num_reports + i;
   18160:	00ea      	lsls	r2, r5, #3
   18162:	1c91      	adds	r1, r2, #2
   18164:	4421      	add	r1, r4
        desc.direct_addr.type = data[off];
   18166:	5c71      	ldrb	r1, [r6, r1]
   18168:	f88d 1010 	strb.w	r1, [sp, #16]
        off = 2 + suboff * num_reports + i * 6;
   1816c:	442a      	add	r2, r5
   1816e:	3202      	adds	r2, #2
   18170:	4413      	add	r3, r2
        memcpy(desc.direct_addr.val, data + off, 6);
   18172:	4433      	add	r3, r6
   18174:	681a      	ldr	r2, [r3, #0]
   18176:	f8cd 2011 	str.w	r2, [sp, #17]
   1817a:	889b      	ldrh	r3, [r3, #4]
   1817c:	f8ad 3015 	strh.w	r3, [sp, #21]
        off = 2 + suboff * num_reports + i;
   18180:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
   18184:	3302      	adds	r3, #2
   18186:	4423      	add	r3, r4
        desc.rssi = data[off];
   18188:	56f3      	ldrsb	r3, [r6, r3]
   1818a:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   1818e:	4668      	mov	r0, sp
   18190:	f7fb fad2 	bl	13738 <ble_gap_rx_adv_report>
    for (i = 0; i < num_reports; i++) {
   18194:	3401      	adds	r4, #1
   18196:	42a5      	cmp	r5, r4
   18198:	dccc      	bgt.n	18134 <ble_hs_hci_evt_le_dir_adv_rpt+0x22>
    return 0;
   1819a:	2000      	movs	r0, #0
}
   1819c:	b006      	add	sp, #24
   1819e:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   181a0:	200c      	movs	r0, #12
   181a2:	e7fb      	b.n	1819c <ble_hs_hci_evt_le_dir_adv_rpt+0x8a>
        return BLE_HS_ECONTROLLER;
   181a4:	200c      	movs	r0, #12
   181a6:	e7f9      	b.n	1819c <ble_hs_hci_evt_le_dir_adv_rpt+0x8a>

000181a8 <ble_hs_hci_evt_le_adv_rpt>:
{
   181a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181ac:	b086      	sub	sp, #24
   181ae:	460d      	mov	r5, r1
    struct ble_gap_disc_desc desc = {0};
   181b0:	2300      	movs	r3, #0
   181b2:	9300      	str	r3, [sp, #0]
   181b4:	9301      	str	r3, [sp, #4]
   181b6:	9302      	str	r3, [sp, #8]
   181b8:	9303      	str	r3, [sp, #12]
   181ba:	9304      	str	r3, [sp, #16]
   181bc:	9305      	str	r3, [sp, #20]
    rc = ble_hs_hci_evt_le_adv_rpt_first_pass(data, len);
   181be:	4611      	mov	r1, r2
   181c0:	4628      	mov	r0, r5
   181c2:	f7ff fec1 	bl	17f48 <ble_hs_hci_evt_le_adv_rpt_first_pass>
    if (rc != 0) {
   181c6:	4680      	mov	r8, r0
   181c8:	bb48      	cbnz	r0, 1821e <ble_hs_hci_evt_le_adv_rpt+0x76>
    desc.direct_addr = *BLE_ADDR_ANY;
   181ca:	2300      	movs	r3, #0
   181cc:	9304      	str	r3, [sp, #16]
   181ce:	f8cd 3013 	str.w	r3, [sp, #19]
    num_reports = data[1];
   181d2:	786f      	ldrb	r7, [r5, #1]
    for (i = 0; i < num_reports; i++) {
   181d4:	4606      	mov	r6, r0
    off = 2; /* skip sub-event and num reports */
   181d6:	2402      	movs	r4, #2
    for (i = 0; i < num_reports; i++) {
   181d8:	e01f      	b.n	1821a <ble_hs_hci_evt_le_adv_rpt+0x72>
        desc.event_type = data[off];
   181da:	5d2b      	ldrb	r3, [r5, r4]
   181dc:	f88d 3000 	strb.w	r3, [sp]
        ++off;
   181e0:	1c63      	adds	r3, r4, #1
        desc.addr.type = data[off];
   181e2:	5ceb      	ldrb	r3, [r5, r3]
   181e4:	f88d 3002 	strb.w	r3, [sp, #2]
        ++off;
   181e8:	1ca3      	adds	r3, r4, #2
        memcpy(desc.addr.val, data + off, 6);
   181ea:	442b      	add	r3, r5
   181ec:	681a      	ldr	r2, [r3, #0]
   181ee:	f8cd 2003 	str.w	r2, [sp, #3]
   181f2:	889b      	ldrh	r3, [r3, #4]
   181f4:	f8ad 3007 	strh.w	r3, [sp, #7]
        off += 6;
   181f8:	f104 0308 	add.w	r3, r4, #8
        desc.length_data = data[off];
   181fc:	5ceb      	ldrb	r3, [r5, r3]
   181fe:	f88d 3001 	strb.w	r3, [sp, #1]
        ++off;
   18202:	3409      	adds	r4, #9
        desc.data = data + off;
   18204:	192a      	adds	r2, r5, r4
   18206:	9203      	str	r2, [sp, #12]
        off += desc.length_data;
   18208:	441c      	add	r4, r3
        desc.rssi = data[off];
   1820a:	572b      	ldrsb	r3, [r5, r4]
   1820c:	f88d 3009 	strb.w	r3, [sp, #9]
        ++off;
   18210:	3401      	adds	r4, #1
        ble_gap_rx_adv_report(&desc);
   18212:	4668      	mov	r0, sp
   18214:	f7fb fa90 	bl	13738 <ble_gap_rx_adv_report>
    for (i = 0; i < num_reports; i++) {
   18218:	3601      	adds	r6, #1
   1821a:	42b7      	cmp	r7, r6
   1821c:	dcdd      	bgt.n	181da <ble_hs_hci_evt_le_adv_rpt+0x32>
}
   1821e:	4640      	mov	r0, r8
   18220:	b006      	add	sp, #24
   18222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018226 <ble_hs_hci_evt_le_conn_parm_req>:
    if (len < BLE_HCI_LE_REM_CONN_PARM_REQ_LEN) {
   18226:	2a0a      	cmp	r2, #10
   18228:	dd3b      	ble.n	182a2 <ble_hs_hci_evt_le_conn_parm_req+0x7c>
{
   1822a:	b510      	push	{r4, lr}
   1822c:	b084      	sub	sp, #16
   1822e:	460c      	mov	r4, r1
    evt.subevent_code = data[0];
   18230:	4608      	mov	r0, r1
   18232:	f810 3b01 	ldrb.w	r3, [r0], #1
   18236:	f88d 3004 	strb.w	r3, [sp, #4]
    evt.connection_handle = get_le16(data + 1);
   1823a:	f006 fc93 	bl	1eb64 <get_le16>
   1823e:	f8ad 0006 	strh.w	r0, [sp, #6]
    evt.itvl_min = get_le16(data + 3);
   18242:	1ce0      	adds	r0, r4, #3
   18244:	f006 fc8e 	bl	1eb64 <get_le16>
   18248:	f8ad 0008 	strh.w	r0, [sp, #8]
    evt.itvl_max = get_le16(data + 5);
   1824c:	1d60      	adds	r0, r4, #5
   1824e:	f006 fc89 	bl	1eb64 <get_le16>
   18252:	f8ad 000a 	strh.w	r0, [sp, #10]
    evt.latency = get_le16(data + 7);
   18256:	1de0      	adds	r0, r4, #7
   18258:	f006 fc84 	bl	1eb64 <get_le16>
   1825c:	f8ad 000c 	strh.w	r0, [sp, #12]
    evt.timeout = get_le16(data + 9);
   18260:	f104 0009 	add.w	r0, r4, #9
   18264:	f006 fc7e 	bl	1eb64 <get_le16>
   18268:	f8ad 000e 	strh.w	r0, [sp, #14]
    if (evt.itvl_min < BLE_HCI_CONN_ITVL_MIN ||
   1826c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   18270:	2b05      	cmp	r3, #5
   18272:	d918      	bls.n	182a6 <ble_hs_hci_evt_le_conn_parm_req+0x80>
        evt.itvl_max > BLE_HCI_CONN_ITVL_MAX ||
   18274:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    if (evt.itvl_min < BLE_HCI_CONN_ITVL_MIN ||
   18278:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1827c:	d816      	bhi.n	182ac <ble_hs_hci_evt_le_conn_parm_req+0x86>
        evt.itvl_max > BLE_HCI_CONN_ITVL_MAX ||
   1827e:	4293      	cmp	r3, r2
   18280:	d816      	bhi.n	182b0 <ble_hs_hci_evt_le_conn_parm_req+0x8a>
        evt.latency > BLE_HCI_CONN_LATENCY_MAX) {
   18282:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    if (evt.latency < BLE_HCI_CONN_LATENCY_MIN ||
   18286:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1828a:	d213      	bcs.n	182b4 <ble_hs_hci_evt_le_conn_parm_req+0x8e>
    if (evt.timeout < BLE_HCI_CONN_SPVN_TIMEOUT_MIN ||
   1828c:	380a      	subs	r0, #10
   1828e:	b280      	uxth	r0, r0
   18290:	f640 4376 	movw	r3, #3190	; 0xc76
   18294:	4298      	cmp	r0, r3
   18296:	d80f      	bhi.n	182b8 <ble_hs_hci_evt_le_conn_parm_req+0x92>
    ble_gap_rx_param_req(&evt);
   18298:	a801      	add	r0, sp, #4
   1829a:	f7fb fdcd 	bl	13e38 <ble_gap_rx_param_req>
    return 0;
   1829e:	2000      	movs	r0, #0
   182a0:	e002      	b.n	182a8 <ble_hs_hci_evt_le_conn_parm_req+0x82>
        return BLE_HS_ECONTROLLER;
   182a2:	200c      	movs	r0, #12
}
   182a4:	4770      	bx	lr
        return BLE_HS_EBADDATA;
   182a6:	200a      	movs	r0, #10
}
   182a8:	b004      	add	sp, #16
   182aa:	bd10      	pop	{r4, pc}
        return BLE_HS_EBADDATA;
   182ac:	200a      	movs	r0, #10
   182ae:	e7fb      	b.n	182a8 <ble_hs_hci_evt_le_conn_parm_req+0x82>
   182b0:	200a      	movs	r0, #10
   182b2:	e7f9      	b.n	182a8 <ble_hs_hci_evt_le_conn_parm_req+0x82>
        return BLE_HS_EBADDATA;
   182b4:	200a      	movs	r0, #10
   182b6:	e7f7      	b.n	182a8 <ble_hs_hci_evt_le_conn_parm_req+0x82>
        return BLE_HS_EBADDATA;
   182b8:	200a      	movs	r0, #10
   182ba:	e7f5      	b.n	182a8 <ble_hs_hci_evt_le_conn_parm_req+0x82>

000182bc <ble_hs_hci_evt_le_lt_key_req>:
    if (len < BLE_HCI_LE_LT_KEY_REQ_LEN) {
   182bc:	2a0c      	cmp	r2, #12
   182be:	dd1c      	ble.n	182fa <ble_hs_hci_evt_le_lt_key_req+0x3e>
{
   182c0:	b510      	push	{r4, lr}
   182c2:	b084      	sub	sp, #16
   182c4:	460c      	mov	r4, r1
    evt.subevent_code = data[0];
   182c6:	4608      	mov	r0, r1
   182c8:	f810 3b01 	ldrb.w	r3, [r0], #1
   182cc:	f88d 300c 	strb.w	r3, [sp, #12]
    evt.connection_handle = get_le16(data + 1);
   182d0:	f006 fc48 	bl	1eb64 <get_le16>
   182d4:	f8ad 0008 	strh.w	r0, [sp, #8]
    evt.random_number = get_le64(data + 3);
   182d8:	1ce0      	adds	r0, r4, #3
   182da:	f006 fc53 	bl	1eb84 <get_le64>
   182de:	e9cd 0100 	strd	r0, r1, [sp]
    evt.encrypted_diversifier = get_le16(data + 11);
   182e2:	f104 000b 	add.w	r0, r4, #11
   182e6:	f006 fc3d 	bl	1eb64 <get_le16>
   182ea:	f8ad 000a 	strh.w	r0, [sp, #10]
    ble_sm_ltk_req_rx(&evt);
   182ee:	4668      	mov	r0, sp
   182f0:	f002 fc20 	bl	1ab34 <ble_sm_ltk_req_rx>
    return 0;
   182f4:	2000      	movs	r0, #0
}
   182f6:	b004      	add	sp, #16
   182f8:	bd10      	pop	{r4, pc}
        return BLE_HS_ECONTROLLER;
   182fa:	200c      	movs	r0, #12
}
   182fc:	4770      	bx	lr

000182fe <ble_hs_hci_evt_le_rd_rem_used_feat_complete>:
    if (len < BLE_HCI_LE_RD_REM_USED_FEAT_LEN) {
   182fe:	2a0b      	cmp	r2, #11
   18300:	dd18      	ble.n	18334 <ble_hs_hci_evt_le_rd_rem_used_feat_complete+0x36>
{
   18302:	b510      	push	{r4, lr}
   18304:	b084      	sub	sp, #16
   18306:	460c      	mov	r4, r1
    evt.subevent_code = data[0];
   18308:	780b      	ldrb	r3, [r1, #0]
   1830a:	f88d 3004 	strb.w	r3, [sp, #4]
    evt.status = data[1];
   1830e:	784b      	ldrb	r3, [r1, #1]
   18310:	f88d 3005 	strb.w	r3, [sp, #5]
    evt.connection_handle = get_le16(data + 2);
   18314:	1c88      	adds	r0, r1, #2
   18316:	f006 fc25 	bl	1eb64 <get_le16>
   1831a:	f8ad 0006 	strh.w	r0, [sp, #6]
    memcpy(evt.features, data + 4, 8);
   1831e:	ab02      	add	r3, sp, #8
   18320:	f854 0f04 	ldr.w	r0, [r4, #4]!
   18324:	6861      	ldr	r1, [r4, #4]
   18326:	c303      	stmia	r3!, {r0, r1}
    ble_gap_rx_rd_rem_sup_feat_complete(&evt);
   18328:	a801      	add	r0, sp, #4
   1832a:	f7fb fa11 	bl	13750 <ble_gap_rx_rd_rem_sup_feat_complete>
    return 0;
   1832e:	2000      	movs	r0, #0
}
   18330:	b004      	add	sp, #16
   18332:	bd10      	pop	{r4, pc}
        return BLE_HS_ECONTROLLER;
   18334:	200c      	movs	r0, #12
}
   18336:	4770      	bx	lr

00018338 <ble_hs_hci_evt_le_conn_upd_complete>:
    if (len < BLE_HCI_LE_CONN_UPD_LEN) {
   18338:	2a09      	cmp	r2, #9
   1833a:	dd39      	ble.n	183b0 <ble_hs_hci_evt_le_conn_upd_complete+0x78>
{
   1833c:	b510      	push	{r4, lr}
   1833e:	b084      	sub	sp, #16
   18340:	460c      	mov	r4, r1
    evt.subevent_code = data[0];
   18342:	780b      	ldrb	r3, [r1, #0]
   18344:	f88d 3004 	strb.w	r3, [sp, #4]
    evt.status = data[1];
   18348:	784b      	ldrb	r3, [r1, #1]
   1834a:	f88d 3005 	strb.w	r3, [sp, #5]
    evt.connection_handle = get_le16(data + 2);
   1834e:	1c88      	adds	r0, r1, #2
   18350:	f006 fc08 	bl	1eb64 <get_le16>
   18354:	f8ad 0006 	strh.w	r0, [sp, #6]
    evt.conn_itvl = get_le16(data + 4);
   18358:	1d20      	adds	r0, r4, #4
   1835a:	f006 fc03 	bl	1eb64 <get_le16>
   1835e:	f8ad 0008 	strh.w	r0, [sp, #8]
    evt.conn_latency = get_le16(data + 6);
   18362:	1da0      	adds	r0, r4, #6
   18364:	f006 fbfe 	bl	1eb64 <get_le16>
   18368:	f8ad 000a 	strh.w	r0, [sp, #10]
    evt.supervision_timeout = get_le16(data + 8);
   1836c:	f104 0008 	add.w	r0, r4, #8
   18370:	f006 fbf8 	bl	1eb64 <get_le16>
   18374:	f8ad 000c 	strh.w	r0, [sp, #12]
    if (evt.status == 0) {
   18378:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1837c:	b993      	cbnz	r3, 183a4 <ble_hs_hci_evt_le_conn_upd_complete+0x6c>
        if (evt.conn_itvl < BLE_HCI_CONN_ITVL_MIN ||
   1837e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   18382:	3b06      	subs	r3, #6
   18384:	b29b      	uxth	r3, r3
   18386:	f640 427a 	movw	r2, #3194	; 0xc7a
   1838a:	4293      	cmp	r3, r2
   1838c:	d812      	bhi.n	183b4 <ble_hs_hci_evt_le_conn_upd_complete+0x7c>
            evt.conn_latency > BLE_HCI_CONN_LATENCY_MAX) {
   1838e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        if (evt.conn_latency < BLE_HCI_CONN_LATENCY_MIN ||
   18392:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   18396:	d20f      	bcs.n	183b8 <ble_hs_hci_evt_le_conn_upd_complete+0x80>
        if (evt.supervision_timeout < BLE_HCI_CONN_SPVN_TIMEOUT_MIN ||
   18398:	380a      	subs	r0, #10
   1839a:	b280      	uxth	r0, r0
   1839c:	f640 4376 	movw	r3, #3190	; 0xc76
   183a0:	4298      	cmp	r0, r3
   183a2:	d80b      	bhi.n	183bc <ble_hs_hci_evt_le_conn_upd_complete+0x84>
    ble_gap_rx_update_complete(&evt);
   183a4:	a801      	add	r0, sp, #4
   183a6:	f7fb fc8f 	bl	13cc8 <ble_gap_rx_update_complete>
    return 0;
   183aa:	2000      	movs	r0, #0
}
   183ac:	b004      	add	sp, #16
   183ae:	bd10      	pop	{r4, pc}
        return BLE_HS_ECONTROLLER;
   183b0:	200c      	movs	r0, #12
}
   183b2:	4770      	bx	lr
            return BLE_HS_EBADDATA;
   183b4:	200a      	movs	r0, #10
   183b6:	e7f9      	b.n	183ac <ble_hs_hci_evt_le_conn_upd_complete+0x74>
            return BLE_HS_EBADDATA;
   183b8:	200a      	movs	r0, #10
   183ba:	e7f7      	b.n	183ac <ble_hs_hci_evt_le_conn_upd_complete+0x74>
            return BLE_HS_EBADDATA;
   183bc:	200a      	movs	r0, #10
   183be:	e7f5      	b.n	183ac <ble_hs_hci_evt_le_conn_upd_complete+0x74>

000183c0 <ble_hs_hci_evt_le_conn_complete>:
    if (len < BLE_HCI_LE_CONN_COMPLETE_LEN) {
   183c0:	2a12      	cmp	r2, #18
   183c2:	dd63      	ble.n	1848c <ble_hs_hci_evt_le_conn_complete+0xcc>
    if ((subevent == BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE) &&
   183c4:	280a      	cmp	r0, #10
   183c6:	d101      	bne.n	183cc <ble_hs_hci_evt_le_conn_complete+0xc>
   183c8:	2a1e      	cmp	r2, #30
   183ca:	dd61      	ble.n	18490 <ble_hs_hci_evt_le_conn_complete+0xd0>
{
   183cc:	b530      	push	{r4, r5, lr}
   183ce:	b089      	sub	sp, #36	; 0x24
   183d0:	460c      	mov	r4, r1
   183d2:	4605      	mov	r5, r0
    memset(&evt, 0, sizeof(evt));
   183d4:	2220      	movs	r2, #32
   183d6:	2100      	movs	r1, #0
   183d8:	4668      	mov	r0, sp
   183da:	f7fa f89c 	bl	12516 <memset>
    evt.subevent_code = data[0];
   183de:	7823      	ldrb	r3, [r4, #0]
   183e0:	f88d 3000 	strb.w	r3, [sp]
    evt.status = data[1];
   183e4:	7863      	ldrb	r3, [r4, #1]
   183e6:	f88d 3001 	strb.w	r3, [sp, #1]
    if (evt.status == BLE_ERR_SUCCESS) {
   183ea:	b12b      	cbz	r3, 183f8 <ble_hs_hci_evt_le_conn_complete+0x38>
    return ble_gap_rx_conn_complete(&evt, 0);
   183ec:	2100      	movs	r1, #0
   183ee:	4668      	mov	r0, sp
   183f0:	f7fb fa94 	bl	1391c <ble_gap_rx_conn_complete>
}
   183f4:	b009      	add	sp, #36	; 0x24
   183f6:	bd30      	pop	{r4, r5, pc}
        evt.connection_handle = get_le16(data + 2);
   183f8:	1ca0      	adds	r0, r4, #2
   183fa:	f006 fbb3 	bl	1eb64 <get_le16>
   183fe:	f8ad 0002 	strh.w	r0, [sp, #2]
        evt.role = data[4];
   18402:	7923      	ldrb	r3, [r4, #4]
   18404:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = data[5];
   18408:	7963      	ldrb	r3, [r4, #5]
   1840a:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, data + 6, BLE_DEV_ADDR_LEN);
   1840e:	4623      	mov	r3, r4
   18410:	f853 2f06 	ldr.w	r2, [r3, #6]!
   18414:	f8cd 2006 	str.w	r2, [sp, #6]
   18418:	889b      	ldrh	r3, [r3, #4]
   1841a:	f8ad 300a 	strh.w	r3, [sp, #10]
        if (subevent == BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE) {
   1841e:	2d0a      	cmp	r5, #10
   18420:	d12a      	bne.n	18478 <ble_hs_hci_evt_le_conn_complete+0xb8>
            memcpy(evt.local_rpa, data + 12, BLE_DEV_ADDR_LEN);
   18422:	4623      	mov	r3, r4
   18424:	f853 2f0c 	ldr.w	r2, [r3, #12]!
   18428:	f8cd 2013 	str.w	r2, [sp, #19]
   1842c:	889b      	ldrh	r3, [r3, #4]
   1842e:	f8ad 3017 	strh.w	r3, [sp, #23]
            memcpy(evt.peer_rpa, data + 18, BLE_DEV_ADDR_LEN);
   18432:	4623      	mov	r3, r4
   18434:	f853 2f12 	ldr.w	r2, [r3, #18]!
   18438:	f8cd 2019 	str.w	r2, [sp, #25]
   1843c:	889b      	ldrh	r3, [r3, #4]
   1843e:	f8ad 301d 	strh.w	r3, [sp, #29]
            extended_offset = 12;
   18442:	250c      	movs	r5, #12
        evt.conn_itvl = get_le16(data + 12 + extended_offset);
   18444:	f105 000c 	add.w	r0, r5, #12
   18448:	4420      	add	r0, r4
   1844a:	f006 fb8b 	bl	1eb64 <get_le16>
   1844e:	f8ad 000c 	strh.w	r0, [sp, #12]
        evt.conn_latency = get_le16(data + 14 + extended_offset);
   18452:	f105 000e 	add.w	r0, r5, #14
   18456:	4420      	add	r0, r4
   18458:	f006 fb84 	bl	1eb64 <get_le16>
   1845c:	f8ad 000e 	strh.w	r0, [sp, #14]
        evt.supervision_timeout = get_le16(data + 16 + extended_offset);
   18460:	f105 0010 	add.w	r0, r5, #16
   18464:	4420      	add	r0, r4
   18466:	f006 fb7d 	bl	1eb64 <get_le16>
   1846a:	f8ad 0010 	strh.w	r0, [sp, #16]
        evt.master_clk_acc = data[18 + extended_offset];
   1846e:	3512      	adds	r5, #18
   18470:	5d63      	ldrb	r3, [r4, r5]
   18472:	f88d 3012 	strb.w	r3, [sp, #18]
   18476:	e7b9      	b.n	183ec <ble_hs_hci_evt_le_conn_complete+0x2c>
            memset(evt.local_rpa, 0, BLE_DEV_ADDR_LEN);
   18478:	2500      	movs	r5, #0
   1847a:	f8cd 5013 	str.w	r5, [sp, #19]
   1847e:	f8ad 5017 	strh.w	r5, [sp, #23]
            memset(evt.peer_rpa, 0, BLE_DEV_ADDR_LEN);
   18482:	f8cd 5019 	str.w	r5, [sp, #25]
   18486:	f8ad 501d 	strh.w	r5, [sp, #29]
   1848a:	e7db      	b.n	18444 <ble_hs_hci_evt_le_conn_complete+0x84>
        return BLE_HS_ECONTROLLER;
   1848c:	200c      	movs	r0, #12
   1848e:	4770      	bx	lr
        return BLE_HS_ECONTROLLER;
   18490:	200c      	movs	r0, #12
}
   18492:	4770      	bx	lr

00018494 <ble_hs_hci_evt_process>:

int
ble_hs_hci_evt_process(uint8_t *data)
{
   18494:	b570      	push	{r4, r5, r6, lr}
   18496:	4604      	mov	r4, r0

    /* Count events received */
    STATS_INC(ble_hs_stats, hci_event);

    /* Display to console */
    ble_hs_dbg_event_disp(data);
   18498:	f005 f810 	bl	1d4bc <ble_hs_dbg_event_disp>

    /* Process the event */
    event_code = data[0];
   1849c:	7826      	ldrb	r6, [r4, #0]
    param_len = data[1];
   1849e:	7862      	ldrb	r2, [r4, #1]

    event_len = param_len + 2;
   184a0:	1c95      	adds	r5, r2, #2

    entry = ble_hs_hci_evt_dispatch_find(event_code);
   184a2:	4630      	mov	r0, r6
   184a4:	f7ff fd20 	bl	17ee8 <ble_hs_hci_evt_dispatch_find>
    if (entry == NULL) {
   184a8:	b150      	cbz	r0, 184c0 <ble_hs_hci_evt_process+0x2c>
        STATS_INC(ble_hs_stats, hci_unknown_event);
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = entry->cb(event_code, data, event_len);
   184aa:	6843      	ldr	r3, [r0, #4]
   184ac:	462a      	mov	r2, r5
   184ae:	4621      	mov	r1, r4
   184b0:	4630      	mov	r0, r6
   184b2:	4798      	blx	r3
   184b4:	4605      	mov	r5, r0
    }

    ble_hci_trans_buf_free(data);
   184b6:	4620      	mov	r0, r4
   184b8:	f005 f968 	bl	1d78c <ble_hci_trans_buf_free>

    return rc;
}
   184bc:	4628      	mov	r0, r5
   184be:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   184c0:	2508      	movs	r5, #8
   184c2:	e7f8      	b.n	184b6 <ble_hs_hci_evt_process+0x22>

000184c4 <ble_hs_hci_evt_acl_process>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_hci_evt_acl_process(struct os_mbuf *om)
{
   184c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   184c8:	b086      	sub	sp, #24
   184ca:	4604      	mov	r4, r0
    ble_l2cap_rx_fn *rx_cb;
    uint16_t conn_handle;
    int reject_cid;
    int rc;

    rc = ble_hs_hci_util_data_hdr_strip(om, &hci_hdr);
   184cc:	a905      	add	r1, sp, #20
   184ce:	f000 f89f 	bl	18610 <ble_hs_hci_util_data_hdr_strip>
    if (rc != 0) {
   184d2:	4605      	mov	r5, r0
   184d4:	b940      	cbnz	r0, 184e8 <ble_hs_hci_evt_acl_process+0x24>
    BLE_HS_LOG(DEBUG, "ble_hs_hci_evt_acl_process(): conn_handle=%u pb=%x "
                      "len=%u data=",
               BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc),
               BLE_HCI_DATA_PB(hci_hdr.hdh_handle_pb_bc),
               hci_hdr.hdh_len);
    ble_hs_log_mbuf(om);
   184d6:	4620      	mov	r0, r4
   184d8:	f000 f960 	bl	1879c <ble_hs_log_mbuf>
    BLE_HS_LOG(DEBUG, "\n");
#endif
#endif

    if (hci_hdr.hdh_len != OS_MBUF_PKTHDR(om)->omp_len) {
   184dc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   184e0:	8a23      	ldrh	r3, [r4, #16]
   184e2:	429a      	cmp	r2, r3
   184e4:	d007      	beq.n	184f6 <ble_hs_hci_evt_acl_process+0x32>
        rc = BLE_HS_EBADDATA;
   184e6:	250a      	movs	r5, #10
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   184e8:	4620      	mov	r0, r4
   184ea:	f7f8 fcf7 	bl	10edc <os_mbuf_free_chain>
    return rc;
}
   184ee:	4628      	mov	r0, r5
   184f0:	b006      	add	sp, #24
   184f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    conn_handle = BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc);
   184f6:	f8bd 6014 	ldrh.w	r6, [sp, #20]
   184fa:	f3c6 060b 	ubfx	r6, r6, #0, #12
    ble_hs_lock();
   184fe:	f7fe f9fd 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   18502:	4630      	mov	r0, r6
   18504:	f7fe ffd0 	bl	174a8 <ble_hs_conn_find>
    if (conn == NULL) {
   18508:	4680      	mov	r8, r0
   1850a:	b198      	cbz	r0, 18534 <ble_hs_hci_evt_acl_process+0x70>
        rc = ble_l2cap_rx(conn, &hci_hdr, om, &rx_cb, &reject_cid);
   1850c:	ab03      	add	r3, sp, #12
   1850e:	9300      	str	r3, [sp, #0]
   18510:	ab04      	add	r3, sp, #16
   18512:	4622      	mov	r2, r4
   18514:	a905      	add	r1, sp, #20
   18516:	f000 fdcc 	bl	190b2 <ble_l2cap_rx>
   1851a:	4607      	mov	r7, r0
        om = NULL;
   1851c:	2400      	movs	r4, #0
    ble_hs_unlock();
   1851e:	f7fe f9f1 	bl	16904 <ble_hs_unlock>
    switch (rc) {
   18522:	b167      	cbz	r7, 1853e <ble_hs_hci_evt_acl_process+0x7a>
   18524:	2f01      	cmp	r7, #1
   18526:	d0e2      	beq.n	184ee <ble_hs_hci_evt_acl_process+0x2a>
        if (reject_cid != -1) {
   18528:	9b03      	ldr	r3, [sp, #12]
   1852a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1852e:	d111      	bne.n	18554 <ble_hs_hci_evt_acl_process+0x90>
   18530:	463d      	mov	r5, r7
   18532:	e7d9      	b.n	184e8 <ble_hs_hci_evt_acl_process+0x24>
        reject_cid = -1;
   18534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18538:	9303      	str	r3, [sp, #12]
        rc = BLE_HS_ENOTCONN;
   1853a:	2707      	movs	r7, #7
   1853c:	e7ef      	b.n	1851e <ble_hs_hci_evt_acl_process+0x5a>
        rc = rx_cb(conn->bhc_rx_chan);
   1853e:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   18542:	9b04      	ldr	r3, [sp, #16]
   18544:	4798      	blx	r3
        ble_l2cap_remove_rx(conn, conn->bhc_rx_chan);
   18546:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
   1854a:	4640      	mov	r0, r8
   1854c:	f000 fd81 	bl	19052 <ble_l2cap_remove_rx>
    return 0;
   18550:	463d      	mov	r5, r7
        break;
   18552:	e7cc      	b.n	184ee <ble_hs_hci_evt_acl_process+0x2a>
            ble_l2cap_sig_reject_invalid_cid_tx(conn_handle, 0, 0, reject_cid);
   18554:	b29b      	uxth	r3, r3
   18556:	2200      	movs	r2, #0
   18558:	4611      	mov	r1, r2
   1855a:	4630      	mov	r0, r6
   1855c:	f001 f8cd 	bl	196fa <ble_l2cap_sig_reject_invalid_cid_tx>
   18560:	463d      	mov	r5, r7
   18562:	e7c1      	b.n	184e8 <ble_hs_hci_evt_acl_process+0x24>

00018564 <ble_hs_hci_util_handle_pb_bc_join>:
{
    BLE_HS_DBG_ASSERT(handle <= 0x0fff);
    BLE_HS_DBG_ASSERT(pb <= 0x03);
    BLE_HS_DBG_ASSERT(bc <= 0x03);

    return (handle  << 0)   |
   18564:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
   18568:	b200      	sxth	r0, r0
           (pb      << 12)  |
   1856a:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
           (bc      << 14);
}
   1856e:	b280      	uxth	r0, r0
   18570:	4770      	bx	lr

00018572 <ble_hs_hci_util_read_adv_tx_pwr>:

int
ble_hs_hci_util_read_adv_tx_pwr(int8_t *out_tx_pwr)
{
   18572:	b500      	push	{lr}
   18574:	b085      	sub	sp, #20
    uint8_t params_len;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   18576:	f10d 030f 	add.w	r3, sp, #15
   1857a:	9301      	str	r3, [sp, #4]
   1857c:	2301      	movs	r3, #1
   1857e:	9300      	str	r3, [sp, #0]
   18580:	4603      	mov	r3, r0
   18582:	2200      	movs	r2, #0
   18584:	4611      	mov	r1, r2
   18586:	f242 0007 	movw	r0, #8199	; 0x2007
   1858a:	f7ff f993 	bl	178b4 <ble_hs_hci_cmd_tx>
        *out_tx_pwr > BLE_HCI_ADV_CHAN_TXPWR_MAX) {
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
    }

    return 0;
}
   1858e:	b005      	add	sp, #20
   18590:	f85d fb04 	ldr.w	pc, [sp], #4

00018594 <ble_hs_hci_util_rand>:

int
ble_hs_hci_util_rand(void *dst, int len)
{
   18594:	b570      	push	{r4, r5, r6, lr}
   18596:	b086      	sub	sp, #24
   18598:	4606      	mov	r6, r0
   1859a:	460c      	mov	r4, r1
    uint8_t *u8ptr;
    int chunk_sz;
    int rc;

    u8ptr = dst;
    while (len > 0) {
   1859c:	2c00      	cmp	r4, #0
   1859e:	dd1d      	ble.n	185dc <ble_hs_hci_util_rand+0x48>
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_RAND),
   185a0:	f10d 030f 	add.w	r3, sp, #15
   185a4:	9301      	str	r3, [sp, #4]
   185a6:	2308      	movs	r3, #8
   185a8:	9300      	str	r3, [sp, #0]
   185aa:	ab04      	add	r3, sp, #16
   185ac:	2200      	movs	r2, #0
   185ae:	4611      	mov	r1, r2
   185b0:	f242 0018 	movw	r0, #8216	; 0x2018
   185b4:	f7ff f97e 	bl	178b4 <ble_hs_hci_cmd_tx>
                               NULL, 0, rsp_buf, sizeof rsp_buf, &params_len);
        if (rc != 0) {
   185b8:	4603      	mov	r3, r0
   185ba:	b980      	cbnz	r0, 185de <ble_hs_hci_util_rand+0x4a>
            return rc;
        }
        if (params_len != sizeof rsp_buf) {
   185bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   185c0:	2b08      	cmp	r3, #8
   185c2:	d10f      	bne.n	185e4 <ble_hs_hci_util_rand+0x50>
            return BLE_HS_ECONTROLLER;
        }

        chunk_sz = min(len, sizeof rsp_buf);
   185c4:	4625      	mov	r5, r4
   185c6:	2c08      	cmp	r4, #8
   185c8:	bf28      	it	cs
   185ca:	2508      	movcs	r5, #8
        memcpy(u8ptr, rsp_buf, chunk_sz);
   185cc:	462a      	mov	r2, r5
   185ce:	a904      	add	r1, sp, #16
   185d0:	4630      	mov	r0, r6
   185d2:	f7f9 ff77 	bl	124c4 <memcpy>

        len -= chunk_sz;
   185d6:	1b64      	subs	r4, r4, r5
        u8ptr += chunk_sz;
   185d8:	442e      	add	r6, r5
   185da:	e7df      	b.n	1859c <ble_hs_hci_util_rand+0x8>
    }

    return 0;
   185dc:	2300      	movs	r3, #0
}
   185de:	4618      	mov	r0, r3
   185e0:	b006      	add	sp, #24
   185e2:	bd70      	pop	{r4, r5, r6, pc}
            return BLE_HS_ECONTROLLER;
   185e4:	230c      	movs	r3, #12
   185e6:	e7fa      	b.n	185de <ble_hs_hci_util_rand+0x4a>

000185e8 <ble_hs_hci_util_set_random_addr>:
    return 0;
}

int
ble_hs_hci_util_set_random_addr(const uint8_t *addr)
{
   185e8:	b500      	push	{lr}
   185ea:	b083      	sub	sp, #12
    uint8_t buf[BLE_HCI_SET_RAND_ADDR_LEN];
    int rc;

    /* set the address in the controller */

    rc = ble_hs_hci_cmd_build_set_random_addr(addr, buf, sizeof(buf));
   185ec:	2206      	movs	r2, #6
   185ee:	4669      	mov	r1, sp
   185f0:	f7ff fc66 	bl	17ec0 <ble_hs_hci_cmd_build_set_random_addr>
    if (rc != 0) {
   185f4:	4603      	mov	r3, r0
   185f6:	b118      	cbz	r0, 18600 <ble_hs_hci_util_set_random_addr+0x18>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   185f8:	4618      	mov	r0, r3
   185fa:	b003      	add	sp, #12
   185fc:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_hs_hci_cmd_tx_empty_ack(BLE_HCI_OP(BLE_HCI_OGF_LE,
   18600:	2206      	movs	r2, #6
   18602:	4669      	mov	r1, sp
   18604:	f242 0005 	movw	r0, #8197	; 0x2005
   18608:	f7ff f98c 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
   1860c:	4603      	mov	r3, r0
   1860e:	e7f3      	b.n	185f8 <ble_hs_hci_util_set_random_addr+0x10>

00018610 <ble_hs_hci_util_data_hdr_strip>:
}

int
ble_hs_hci_util_data_hdr_strip(struct os_mbuf *om,
                               struct hci_data_hdr *out_hdr)
{
   18610:	b570      	push	{r4, r5, r6, lr}
   18612:	4606      	mov	r6, r0
   18614:	460c      	mov	r4, r1
    int rc;

    rc = os_mbuf_copydata(om, 0, BLE_HCI_DATA_HDR_SZ, out_hdr);
   18616:	460b      	mov	r3, r1
   18618:	2204      	movs	r2, #4
   1861a:	2100      	movs	r1, #0
   1861c:	f7f8 fd66 	bl	110ec <os_mbuf_copydata>
    if (rc != 0) {
   18620:	b980      	cbnz	r0, 18644 <ble_hs_hci_util_data_hdr_strip+0x34>
   18622:	4605      	mov	r5, r0
        return BLE_HS_ECONTROLLER;
    }

    /* Strip HCI ACL data header from the front of the packet. */
    os_mbuf_adj(om, BLE_HCI_DATA_HDR_SZ);
   18624:	2104      	movs	r1, #4
   18626:	4630      	mov	r0, r6
   18628:	f7f8 fd8d 	bl	11146 <os_mbuf_adj>

    out_hdr->hdh_handle_pb_bc = get_le16(&out_hdr->hdh_handle_pb_bc);
   1862c:	4620      	mov	r0, r4
   1862e:	f006 fa99 	bl	1eb64 <get_le16>
   18632:	4623      	mov	r3, r4
   18634:	f823 0b02 	strh.w	r0, [r3], #2
    out_hdr->hdh_len = get_le16(&out_hdr->hdh_len);
   18638:	4618      	mov	r0, r3
   1863a:	f006 fa93 	bl	1eb64 <get_le16>
   1863e:	8060      	strh	r0, [r4, #2]

    return 0;
}
   18640:	4628      	mov	r0, r5
   18642:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   18644:	250c      	movs	r5, #12
   18646:	e7fb      	b.n	18640 <ble_hs_hci_util_data_hdr_strip+0x30>

00018648 <ble_hs_id_set_pub>:
static uint8_t ble_hs_id_pub[6];
static uint8_t ble_hs_id_rnd[6];

void
ble_hs_id_set_pub(const uint8_t *pub_addr)
{
   18648:	b510      	push	{r4, lr}
   1864a:	4604      	mov	r4, r0
    ble_hs_lock();
   1864c:	f7fe f956 	bl	168fc <ble_hs_lock>
    memcpy(ble_hs_id_pub, pub_addr, 6);
   18650:	4b03      	ldr	r3, [pc, #12]	; (18660 <ble_hs_id_set_pub+0x18>)
   18652:	6820      	ldr	r0, [r4, #0]
   18654:	6018      	str	r0, [r3, #0]
   18656:	88a2      	ldrh	r2, [r4, #4]
   18658:	809a      	strh	r2, [r3, #4]
    ble_hs_unlock();
   1865a:	f7fe f953 	bl	16904 <ble_hs_unlock>
}
   1865e:	bd10      	pop	{r4, pc}
   18660:	20002a08 	.word	0x20002a08

00018664 <ble_hs_id_gen_rnd>:

int
ble_hs_id_gen_rnd(int nrpa, ble_addr_t *out_addr)
{
   18664:	b538      	push	{r3, r4, r5, lr}
   18666:	4605      	mov	r5, r0
   18668:	460c      	mov	r4, r1
    int rc;

    out_addr->type = BLE_ADDR_RANDOM;
   1866a:	4608      	mov	r0, r1
   1866c:	2301      	movs	r3, #1
   1866e:	f800 3b01 	strb.w	r3, [r0], #1

    rc = ble_hs_hci_util_rand(out_addr->val, 6);
   18672:	2106      	movs	r1, #6
   18674:	f7ff ff8e 	bl	18594 <ble_hs_hci_util_rand>
    if (rc != 0) {
   18678:	4603      	mov	r3, r0
   1867a:	b928      	cbnz	r0, 18688 <ble_hs_id_gen_rnd+0x24>
        return rc;
    }

    if (nrpa) {
   1867c:	b935      	cbnz	r5, 1868c <ble_hs_id_gen_rnd+0x28>
        out_addr->val[5] &= ~0xc0;
    } else {
        out_addr->val[5] |= 0xc0;
   1867e:	79a3      	ldrb	r3, [r4, #6]
   18680:	f063 033f 	orn	r3, r3, #63	; 0x3f
   18684:	71a3      	strb	r3, [r4, #6]
    }

    return 0;
   18686:	462b      	mov	r3, r5
}
   18688:	4618      	mov	r0, r3
   1868a:	bd38      	pop	{r3, r4, r5, pc}
        out_addr->val[5] &= ~0xc0;
   1868c:	79a2      	ldrb	r2, [r4, #6]
   1868e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   18692:	71a2      	strb	r2, [r4, #6]
   18694:	e7f8      	b.n	18688 <ble_hs_id_gen_rnd+0x24>
	...

00018698 <ble_hs_id_set_rnd>:

int
ble_hs_id_set_rnd(const uint8_t *rnd_addr)
{
   18698:	b538      	push	{r3, r4, r5, lr}
   1869a:	4604      	mov	r4, r0
    uint8_t addr_type_byte;
    int rc;

    ble_hs_lock();
   1869c:	f7fe f92e 	bl	168fc <ble_hs_lock>

    addr_type_byte = rnd_addr[5] & 0xc0;
   186a0:	7963      	ldrb	r3, [r4, #5]
    if (addr_type_byte != 0x00 && addr_type_byte != 0xc0) {
   186a2:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   186a6:	d001      	beq.n	186ac <ble_hs_id_set_rnd+0x14>
   186a8:	2bc0      	cmp	r3, #192	; 0xc0
   186aa:	d10d      	bne.n	186c8 <ble_hs_id_set_rnd+0x30>
        rc = BLE_HS_EINVAL;
        goto done;
    }

    rc = ble_hs_hci_util_set_random_addr(rnd_addr);
   186ac:	4620      	mov	r0, r4
   186ae:	f7ff ff9b 	bl	185e8 <ble_hs_hci_util_set_random_addr>
    if (rc != 0) {
   186b2:	4605      	mov	r5, r0
   186b4:	b920      	cbnz	r0, 186c0 <ble_hs_id_set_rnd+0x28>
        goto done;
    }

    memcpy(ble_hs_id_rnd, rnd_addr, 6);
   186b6:	4b05      	ldr	r3, [pc, #20]	; (186cc <ble_hs_id_set_rnd+0x34>)
   186b8:	6820      	ldr	r0, [r4, #0]
   186ba:	6018      	str	r0, [r3, #0]
   186bc:	88a2      	ldrh	r2, [r4, #4]
   186be:	809a      	strh	r2, [r3, #4]

    rc = 0;

done:
    ble_hs_unlock();
   186c0:	f7fe f920 	bl	16904 <ble_hs_unlock>
    return rc;
}
   186c4:	4628      	mov	r0, r5
   186c6:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_EINVAL;
   186c8:	2503      	movs	r5, #3
   186ca:	e7f9      	b.n	186c0 <ble_hs_id_set_rnd+0x28>
   186cc:	20002a10 	.word	0x20002a10

000186d0 <ble_hs_id_addr>:
 *                              Other BLE host core code on error.
 */
int
ble_hs_id_addr(uint8_t id_addr_type, const uint8_t **out_id_addr,
               int *out_is_nrpa)
{
   186d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const uint8_t *id_addr;
    int nrpa;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    switch (id_addr_type) {
   186d2:	b1b0      	cbz	r0, 18702 <ble_hs_id_addr+0x32>
   186d4:	2801      	cmp	r0, #1
   186d6:	d117      	bne.n	18708 <ble_hs_id_addr+0x38>
        nrpa = 0;
        break;

    case BLE_ADDR_RANDOM:
        id_addr = ble_hs_id_rnd;
        nrpa = (ble_hs_id_rnd[5] & 0xc0) == 0;
   186d8:	4e0e      	ldr	r6, [pc, #56]	; (18714 <ble_hs_id_addr+0x44>)
   186da:	7973      	ldrb	r3, [r6, #5]
   186dc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   186e0:	bf0c      	ite	eq
   186e2:	2701      	moveq	r7, #1
   186e4:	2700      	movne	r7, #0
   186e6:	4614      	mov	r4, r2
   186e8:	460d      	mov	r5, r1

    default:
        return BLE_HS_EINVAL;
    }

    if (memcmp(id_addr, ble_hs_misc_null_addr, 6) == 0) {
   186ea:	2206      	movs	r2, #6
   186ec:	490a      	ldr	r1, [pc, #40]	; (18718 <ble_hs_id_addr+0x48>)
   186ee:	4630      	mov	r0, r6
   186f0:	f7f9 fec4 	bl	1247c <memcmp>
   186f4:	b150      	cbz	r0, 1870c <ble_hs_id_addr+0x3c>
        return BLE_HS_ENOADDR;
    }

    if (out_id_addr != NULL) {
   186f6:	b105      	cbz	r5, 186fa <ble_hs_id_addr+0x2a>
        *out_id_addr = id_addr;
   186f8:	602e      	str	r6, [r5, #0]
    }
    if (out_is_nrpa != NULL) {
   186fa:	b14c      	cbz	r4, 18710 <ble_hs_id_addr+0x40>
        *out_is_nrpa = nrpa;
   186fc:	6027      	str	r7, [r4, #0]
    }

    return 0;
   186fe:	2000      	movs	r0, #0
}
   18700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrpa = 0;
   18702:	2700      	movs	r7, #0
        id_addr = ble_hs_id_pub;
   18704:	4e05      	ldr	r6, [pc, #20]	; (1871c <ble_hs_id_addr+0x4c>)
   18706:	e7ee      	b.n	186e6 <ble_hs_id_addr+0x16>
        return BLE_HS_EINVAL;
   18708:	2003      	movs	r0, #3
   1870a:	e7f9      	b.n	18700 <ble_hs_id_addr+0x30>
        return BLE_HS_ENOADDR;
   1870c:	2015      	movs	r0, #21
   1870e:	e7f7      	b.n	18700 <ble_hs_id_addr+0x30>
    return 0;
   18710:	2000      	movs	r0, #0
   18712:	e7f5      	b.n	18700 <ble_hs_id_addr+0x30>
   18714:	20002a10 	.word	0x20002a10
   18718:	20003d74 	.word	0x20003d74
   1871c:	20002a08 	.word	0x20002a08

00018720 <ble_hs_id_addr_type_usable>:
    return rc;
}

static int
ble_hs_id_addr_type_usable(uint8_t own_addr_type)
{
   18720:	b500      	push	{lr}
   18722:	b083      	sub	sp, #12
    uint8_t id_addr_type;
    int nrpa;
    int rc;

    switch (own_addr_type) {
   18724:	2803      	cmp	r0, #3
   18726:	d81a      	bhi.n	1875e <ble_hs_id_addr_type_usable+0x3e>
   18728:	e8df f000 	tbb	[pc, r0]
   1872c:	0b0b0202 	.word	0x0b0b0202
    case BLE_OWN_ADDR_PUBLIC:
    case BLE_OWN_ADDR_RANDOM:
        rc = ble_hs_id_addr(own_addr_type, NULL, NULL);
   18730:	2200      	movs	r2, #0
   18732:	4611      	mov	r1, r2
   18734:	f7ff ffcc 	bl	186d0 <ble_hs_id_addr>
   18738:	4603      	mov	r3, r0
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   1873a:	4618      	mov	r0, r3
   1873c:	b003      	add	sp, #12
   1873e:	f85d fb04 	ldr.w	pc, [sp], #4
        id_addr_type = ble_hs_misc_addr_type_to_id(own_addr_type);
   18742:	f000 f8c5 	bl	188d0 <ble_hs_misc_addr_type_to_id>
        rc = ble_hs_id_addr(id_addr_type, NULL, &nrpa);
   18746:	aa01      	add	r2, sp, #4
   18748:	2100      	movs	r1, #0
   1874a:	f7ff ffc1 	bl	186d0 <ble_hs_id_addr>
        if (rc != 0) {
   1874e:	4603      	mov	r3, r0
   18750:	2800      	cmp	r0, #0
   18752:	d1f2      	bne.n	1873a <ble_hs_id_addr_type_usable+0x1a>
        if (nrpa) {
   18754:	9b01      	ldr	r3, [sp, #4]
   18756:	2b00      	cmp	r3, #0
   18758:	d0ef      	beq.n	1873a <ble_hs_id_addr_type_usable+0x1a>
            return BLE_HS_ENOADDR;
   1875a:	2315      	movs	r3, #21
   1875c:	e7ed      	b.n	1873a <ble_hs_id_addr_type_usable+0x1a>
        return BLE_HS_EINVAL;
   1875e:	2303      	movs	r3, #3
   18760:	e7eb      	b.n	1873a <ble_hs_id_addr_type_usable+0x1a>

00018762 <ble_hs_id_use_addr>:

int
ble_hs_id_use_addr(uint8_t own_addr_type)
{
   18762:	b510      	push	{r4, lr}
   18764:	4604      	mov	r4, r0
    int rc;

    rc = ble_hs_id_addr_type_usable(own_addr_type);
   18766:	f7ff ffdb 	bl	18720 <ble_hs_id_addr_type_usable>
    if (rc != 0) {
   1876a:	4603      	mov	r3, r0
   1876c:	b918      	cbnz	r0, 18776 <ble_hs_id_use_addr+0x14>
        return rc;
    }

    /* If privacy is being used, make sure RPA rotation is in effect. */
    if (own_addr_type == BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT ||
   1876e:	3c02      	subs	r4, #2
   18770:	b2e4      	uxtb	r4, r4
   18772:	2c01      	cmp	r4, #1
   18774:	d901      	bls.n	1877a <ble_hs_id_use_addr+0x18>
            return rc;
        }
    }

    return 0;
}
   18776:	4618      	mov	r0, r3
   18778:	bd10      	pop	{r4, pc}
        rc = ble_hs_pvcy_ensure_started();
   1877a:	f000 f94f 	bl	18a1c <ble_hs_pvcy_ensure_started>
   1877e:	4603      	mov	r3, r0
   18780:	e7f9      	b.n	18776 <ble_hs_id_use_addr+0x14>
	...

00018784 <ble_hs_id_reset>:
 * when the controller loses its random address (e.g., on a stack reset).
 */
void
ble_hs_id_reset(void)
{
    memset(ble_hs_id_pub, 0, sizeof ble_hs_id_pub);
   18784:	4a03      	ldr	r2, [pc, #12]	; (18794 <ble_hs_id_reset+0x10>)
   18786:	2300      	movs	r3, #0
   18788:	6013      	str	r3, [r2, #0]
   1878a:	8093      	strh	r3, [r2, #4]
    memset(ble_hs_id_rnd, 0, sizeof ble_hs_id_pub);
   1878c:	4a02      	ldr	r2, [pc, #8]	; (18798 <ble_hs_id_reset+0x14>)
   1878e:	6013      	str	r3, [r2, #0]
   18790:	8093      	strh	r3, [r2, #4]
}
   18792:	4770      	bx	lr
   18794:	20002a08 	.word	0x20002a08
   18798:	20002a10 	.word	0x20002a10

0001879c <ble_hs_log_mbuf>:

struct log ble_hs_log;

void
ble_hs_log_mbuf(const struct os_mbuf *om)
{
   1879c:	b530      	push	{r4, r5, lr}
   1879e:	b083      	sub	sp, #12
   187a0:	4605      	mov	r5, r0
    uint8_t u8;
    int i;

    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   187a2:	2400      	movs	r4, #0
   187a4:	e007      	b.n	187b6 <ble_hs_log_mbuf+0x1a>
        os_mbuf_copydata(om, i, 1, &u8);
   187a6:	f10d 0307 	add.w	r3, sp, #7
   187aa:	2201      	movs	r2, #1
   187ac:	4621      	mov	r1, r4
   187ae:	4628      	mov	r0, r5
   187b0:	f7f8 fc9c 	bl	110ec <os_mbuf_copydata>
    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   187b4:	3401      	adds	r4, #1
   187b6:	8a2b      	ldrh	r3, [r5, #16]
   187b8:	42a3      	cmp	r3, r4
   187ba:	dcf4      	bgt.n	187a6 <ble_hs_log_mbuf+0xa>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8);
    }
}
   187bc:	b003      	add	sp, #12
   187be:	bd30      	pop	{r4, r5, pc}

000187c0 <ble_hs_log_flat_buf>:
{
    const uint8_t *u8ptr;
    int i;

    u8ptr = data;
    for (i = 0; i < len; i++) {
   187c0:	2300      	movs	r3, #0
   187c2:	e000      	b.n	187c6 <ble_hs_log_flat_buf+0x6>
   187c4:	3301      	adds	r3, #1
   187c6:	428b      	cmp	r3, r1
   187c8:	dbfc      	blt.n	187c4 <ble_hs_log_flat_buf+0x4>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8ptr[i]);
    }
}
   187ca:	4770      	bx	lr

000187cc <ble_hs_mbuf_gen_pkt>:
/**
 * Allocates an mbuf for use by the nimble host.
 */
static struct os_mbuf *
ble_hs_mbuf_gen_pkt(uint16_t leading_space)
{
   187cc:	b510      	push	{r4, lr}
   187ce:	4604      	mov	r4, r0
    struct os_mbuf *om;
    int rc;

    om = os_msys_get_pkthdr(0, 0);
   187d0:	2100      	movs	r1, #0
   187d2:	4608      	mov	r0, r1
   187d4:	f7f9 f897 	bl	11906 <os_msys_get_pkthdr>
    if (om == NULL) {
   187d8:	4603      	mov	r3, r0
   187da:	b130      	cbz	r0, 187ea <ble_hs_mbuf_gen_pkt+0x1e>
        return NULL;
    }

    if (om->om_omp->omp_databuf_len < leading_space) {
   187dc:	6882      	ldr	r2, [r0, #8]
   187de:	8812      	ldrh	r2, [r2, #0]
   187e0:	42a2      	cmp	r2, r4
   187e2:	d304      	bcc.n	187ee <ble_hs_mbuf_gen_pkt+0x22>
        rc = os_mbuf_free_chain(om);
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
        return NULL;
    }

    om->om_data += leading_space;
   187e4:	6800      	ldr	r0, [r0, #0]
   187e6:	4420      	add	r0, r4
   187e8:	6018      	str	r0, [r3, #0]

    return om;
}
   187ea:	4618      	mov	r0, r3
   187ec:	bd10      	pop	{r4, pc}
        rc = os_mbuf_free_chain(om);
   187ee:	f7f8 fb75 	bl	10edc <os_mbuf_free_chain>
        return NULL;
   187f2:	2300      	movs	r3, #0
   187f4:	e7f9      	b.n	187ea <ble_hs_mbuf_gen_pkt+0x1e>

000187f6 <ble_hs_mbuf_acl_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_acl_pkt(void)
{
   187f6:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ);
   187f8:	2004      	movs	r0, #4
   187fa:	f7ff ffe7 	bl	187cc <ble_hs_mbuf_gen_pkt>
}
   187fe:	bd08      	pop	{r3, pc}

00018800 <ble_hs_mbuf_l2cap_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_l2cap_pkt(void)
{
   18800:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ + BLE_L2CAP_HDR_SZ);
   18802:	2008      	movs	r0, #8
   18804:	f7ff ffe2 	bl	187cc <ble_hs_mbuf_gen_pkt>
}
   18808:	bd08      	pop	{r3, pc}

0001880a <ble_hs_mbuf_att_pkt>:

struct os_mbuf *
ble_hs_mbuf_att_pkt(void)
{
   1880a:	b508      	push	{r3, lr}
    /* Prepare write request and response are the larget ATT commands which
     * contain attribute data.
     */
     return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ +
   1880c:	200d      	movs	r0, #13
   1880e:	f7ff ffdd 	bl	187cc <ble_hs_mbuf_gen_pkt>
                                BLE_L2CAP_HDR_SZ +
                                BLE_ATT_PREP_WRITE_CMD_BASE_SZ);
}
   18812:	bd08      	pop	{r3, pc}

00018814 <ble_hs_mbuf_from_flat>:

struct os_mbuf *
ble_hs_mbuf_from_flat(const void *buf, uint16_t len)
{
   18814:	b570      	push	{r4, r5, r6, lr}
   18816:	4605      	mov	r5, r0
   18818:	460e      	mov	r6, r1
    struct os_mbuf *om;
    int rc;

    om = ble_hs_mbuf_att_pkt();
   1881a:	f7ff fff6 	bl	1880a <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   1881e:	4604      	mov	r4, r0
   18820:	b128      	cbz	r0, 1882e <ble_hs_mbuf_from_flat+0x1a>
        return NULL;
    }

    rc = os_mbuf_copyinto(om, 0, buf, len);
   18822:	4633      	mov	r3, r6
   18824:	462a      	mov	r2, r5
   18826:	2100      	movs	r1, #0
   18828:	f7f8 fddb 	bl	113e2 <os_mbuf_copyinto>
    if (rc != 0) {
   1882c:	b908      	cbnz	r0, 18832 <ble_hs_mbuf_from_flat+0x1e>
        os_mbuf_free_chain(om);
        return NULL;
    }

    return om;
}
   1882e:	4620      	mov	r0, r4
   18830:	bd70      	pop	{r4, r5, r6, pc}
        os_mbuf_free_chain(om);
   18832:	4620      	mov	r0, r4
   18834:	f7f8 fb52 	bl	10edc <os_mbuf_free_chain>
        return NULL;
   18838:	2400      	movs	r4, #0
   1883a:	e7f8      	b.n	1882e <ble_hs_mbuf_from_flat+0x1a>

0001883c <ble_hs_mbuf_pullup_base>:
}

int
ble_hs_mbuf_pullup_base(struct os_mbuf **om, int base_len)
{
    if (OS_MBUF_PKTLEN(*om) < base_len) {
   1883c:	6803      	ldr	r3, [r0, #0]
   1883e:	8a1a      	ldrh	r2, [r3, #16]
   18840:	428a      	cmp	r2, r1
   18842:	db0b      	blt.n	1885c <ble_hs_mbuf_pullup_base+0x20>
{
   18844:	b510      	push	{r4, lr}
   18846:	4604      	mov	r4, r0
        return BLE_HS_EBADDATA;
    }

    *om = os_mbuf_pullup(*om, base_len);
   18848:	b289      	uxth	r1, r1
   1884a:	4618      	mov	r0, r3
   1884c:	f7f8 fe61 	bl	11512 <os_mbuf_pullup>
   18850:	6020      	str	r0, [r4, #0]
    if (*om == NULL) {
   18852:	b108      	cbz	r0, 18858 <ble_hs_mbuf_pullup_base+0x1c>
        return BLE_HS_ENOMEM;
    }

    return 0;
   18854:	2000      	movs	r0, #0
}
   18856:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOMEM;
   18858:	2006      	movs	r0, #6
   1885a:	e7fc      	b.n	18856 <ble_hs_mbuf_pullup_base+0x1a>
        return BLE_HS_EBADDATA;
   1885c:	200a      	movs	r0, #10
}
   1885e:	4770      	bx	lr

00018860 <ble_hs_misc_restore_one_irk>:
}

static int
ble_hs_misc_restore_one_irk(int obj_type, union ble_store_value *val,
                            void *cookie)
{
   18860:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    sec = &val->sec;
    if (sec->irk_present) {
   18862:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   18866:	f013 0f01 	tst.w	r3, #1
   1886a:	d101      	bne.n	18870 <ble_hs_misc_restore_one_irk+0x10>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
        }
    }

    return 0;
}
   1886c:	2000      	movs	r0, #0
   1886e:	bd08      	pop	{r3, pc}
   18870:	4608      	mov	r0, r1
        rc = ble_hs_pvcy_add_entry(sec->peer_addr.val, sec->peer_addr.type,
   18872:	460a      	mov	r2, r1
   18874:	f812 1b29 	ldrb.w	r1, [r2], #41
   18878:	3001      	adds	r0, #1
   1887a:	f000 f94f 	bl	18b1c <ble_hs_pvcy_add_entry>
   1887e:	e7f5      	b.n	1886c <ble_hs_misc_restore_one_irk+0xc>

00018880 <ble_hs_misc_conn_chan_find>:
{
   18880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18882:	460f      	mov	r7, r1
   18884:	4615      	mov	r5, r2
   18886:	461c      	mov	r4, r3
    conn = ble_hs_conn_find(conn_handle);
   18888:	f7fe fe0e 	bl	174a8 <ble_hs_conn_find>
    if (conn == NULL) {
   1888c:	4606      	mov	r6, r0
   1888e:	b160      	cbz	r0, 188aa <ble_hs_misc_conn_chan_find+0x2a>
        chan = ble_hs_conn_chan_find_by_scid(conn, cid);
   18890:	4639      	mov	r1, r7
   18892:	f7fe fd5f 	bl	17354 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   18896:	4603      	mov	r3, r0
   18898:	b128      	cbz	r0, 188a6 <ble_hs_misc_conn_chan_find+0x26>
            rc = 0;
   1889a:	2000      	movs	r0, #0
    if (out_conn != NULL) {
   1889c:	b105      	cbz	r5, 188a0 <ble_hs_misc_conn_chan_find+0x20>
        *out_conn = conn;
   1889e:	602e      	str	r6, [r5, #0]
    if (out_chan != NULL) {
   188a0:	b104      	cbz	r4, 188a4 <ble_hs_misc_conn_chan_find+0x24>
        *out_chan = chan;
   188a2:	6023      	str	r3, [r4, #0]
}
   188a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = BLE_HS_ENOTCONN;
   188a6:	2007      	movs	r0, #7
   188a8:	e7f8      	b.n	1889c <ble_hs_misc_conn_chan_find+0x1c>
        rc = BLE_HS_ENOTCONN;
   188aa:	2007      	movs	r0, #7
        chan = NULL;
   188ac:	2300      	movs	r3, #0
   188ae:	e7f5      	b.n	1889c <ble_hs_misc_conn_chan_find+0x1c>

000188b0 <ble_hs_misc_conn_chan_find_reqd>:
{
   188b0:	b530      	push	{r4, r5, lr}
   188b2:	b083      	sub	sp, #12
   188b4:	4615      	mov	r5, r2
   188b6:	461c      	mov	r4, r3
    rc = ble_hs_misc_conn_chan_find(conn_handle, cid, &conn, &chan);
   188b8:	ab01      	add	r3, sp, #4
   188ba:	466a      	mov	r2, sp
   188bc:	f7ff ffe0 	bl	18880 <ble_hs_misc_conn_chan_find>
    if (out_conn != NULL) {
   188c0:	b10d      	cbz	r5, 188c6 <ble_hs_misc_conn_chan_find_reqd+0x16>
        *out_conn = conn;
   188c2:	9b00      	ldr	r3, [sp, #0]
   188c4:	602b      	str	r3, [r5, #0]
    if (out_chan != NULL) {
   188c6:	b10c      	cbz	r4, 188cc <ble_hs_misc_conn_chan_find_reqd+0x1c>
        *out_chan = chan;
   188c8:	9b01      	ldr	r3, [sp, #4]
   188ca:	6023      	str	r3, [r4, #0]
}
   188cc:	b003      	add	sp, #12
   188ce:	bd30      	pop	{r4, r5, pc}

000188d0 <ble_hs_misc_addr_type_to_id>:
    switch (own_addr_type) {
   188d0:	2801      	cmp	r0, #1
   188d2:	d003      	beq.n	188dc <ble_hs_misc_addr_type_to_id+0xc>
   188d4:	2803      	cmp	r0, #3
   188d6:	d001      	beq.n	188dc <ble_hs_misc_addr_type_to_id+0xc>
         return BLE_ADDR_PUBLIC;
   188d8:	2000      	movs	r0, #0
   188da:	4770      	bx	lr
         return BLE_ADDR_RANDOM;
   188dc:	2001      	movs	r0, #1
}
   188de:	4770      	bx	lr

000188e0 <ble_hs_misc_restore_irks>:

int
ble_hs_misc_restore_irks(void)
{
   188e0:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_PEER_SEC,
   188e2:	2200      	movs	r2, #0
   188e4:	4902      	ldr	r1, [pc, #8]	; (188f0 <ble_hs_misc_restore_irks+0x10>)
   188e6:	2002      	movs	r0, #2
   188e8:	f002 fddd 	bl	1b4a6 <ble_store_iterate>
                           ble_hs_misc_restore_one_irk,
                           NULL);
    return rc;
}
   188ec:	bd08      	pop	{r3, pc}
   188ee:	bf00      	nop
   188f0:	00018861 	.word	0x00018861

000188f4 <ble_mqueue_init>:

#include "ble_hs_priv.h"

int
ble_mqueue_init(struct ble_mqueue *mq, ble_npl_event_fn *ev_fn, void *ev_arg)
{
   188f4:	4603      	mov	r3, r0
    STAILQ_INIT(&mq->head);
   188f6:	2000      	movs	r0, #0
   188f8:	6018      	str	r0, [r3, #0]
   188fa:	605b      	str	r3, [r3, #4]
    memset(ev, 0, sizeof(*ev));
   188fc:	6098      	str	r0, [r3, #8]
   188fe:	6158      	str	r0, [r3, #20]
    ev->ev.ev_queued = 0;
   18900:	7218      	strb	r0, [r3, #8]
    ev->ev.ev_cb = (os_event_fn *)fn;
   18902:	60d9      	str	r1, [r3, #12]
    ev->ev.ev_arg = arg;
   18904:	611a      	str	r2, [r3, #16]

    ble_npl_event_init(&mq->ev, ev_fn, ev_arg);

    return (0);
}
   18906:	4770      	bx	lr

00018908 <ble_mqueue_get>:

struct os_mbuf *
ble_mqueue_get(struct ble_mqueue *mq)
{
   18908:	b538      	push	{r3, r4, r5, lr}
   1890a:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *om;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1890c:	f7f7 fd9c 	bl	10448 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->head);
   18910:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   18912:	b114      	cbz	r4, 1891a <ble_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   18914:	6863      	ldr	r3, [r4, #4]
   18916:	602b      	str	r3, [r5, #0]
   18918:	b12b      	cbz	r3, 18926 <ble_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1891a:	f7f7 fd9b 	bl	10454 <os_arch_restore_sr>

    if (mp) {
   1891e:	b124      	cbz	r4, 1892a <ble_mqueue_get+0x22>
        om = OS_MBUF_PKTHDR_TO_MBUF(mp);
   18920:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        om = NULL;
    }

    return (om);
}
   18924:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   18926:	606d      	str	r5, [r5, #4]
   18928:	e7f7      	b.n	1891a <ble_mqueue_get+0x12>
        om = NULL;
   1892a:	2000      	movs	r0, #0
    return (om);
   1892c:	e7fa      	b.n	18924 <ble_mqueue_get+0x1c>

0001892e <ble_mqueue_put>:

int
ble_mqueue_put(struct ble_mqueue *mq, struct ble_npl_eventq *evq, struct os_mbuf *om)
{
   1892e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(om)) {
   18930:	7953      	ldrb	r3, [r2, #5]
   18932:	2b07      	cmp	r3, #7
   18934:	d916      	bls.n	18964 <ble_mqueue_put+0x36>
   18936:	4614      	mov	r4, r2
   18938:	460e      	mov	r6, r1
   1893a:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(om);
   1893c:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   18940:	f7f7 fd82 	bl	10448 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->head, mp, omp_next);
   18944:	2300      	movs	r3, #0
   18946:	f844 3f14 	str.w	r3, [r4, #20]!
   1894a:	686b      	ldr	r3, [r5, #4]
   1894c:	601f      	str	r7, [r3, #0]
   1894e:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   18950:	f7f7 fd80 	bl	10454 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   18954:	b146      	cbz	r6, 18968 <ble_mqueue_put+0x3a>
    os_eventq_put(&evq->evq, &ev->ev);
   18956:	f105 0108 	add.w	r1, r5, #8
   1895a:	4630      	mov	r0, r6
   1895c:	f7f8 f99f 	bl	10c9e <os_eventq_put>
        ble_npl_eventq_put(evq, &mq->ev);
    }

    return (0);
   18960:	2000      	movs	r0, #0
   18962:	e000      	b.n	18966 <ble_mqueue_put+0x38>
err:
    return (rc);
   18964:	2002      	movs	r0, #2
}
   18966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   18968:	2000      	movs	r0, #0
   1896a:	e7fc      	b.n	18966 <ble_mqueue_put+0x38>

0001896c <ble_hs_periodic_sync_init>:
    return psync;
}

int
ble_hs_periodic_sync_init(void)
{
   1896c:	b500      	push	{lr}
   1896e:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_hs_periodic_sync_pool,
   18970:	4b07      	ldr	r3, [pc, #28]	; (18990 <ble_hs_periodic_sync_init+0x24>)
   18972:	9300      	str	r3, [sp, #0]
   18974:	4b07      	ldr	r3, [pc, #28]	; (18994 <ble_hs_periodic_sync_init+0x28>)
   18976:	2228      	movs	r2, #40	; 0x28
   18978:	2101      	movs	r1, #1
   1897a:	4807      	ldr	r0, [pc, #28]	; (18998 <ble_hs_periodic_sync_init+0x2c>)
   1897c:	f7f8 febe 	bl	116fc <os_mempool_init>
                         MYNEWT_VAL(BLE_MAX_PERIODIC_SYNCS),
                         sizeof (struct ble_hs_periodic_sync),
                         ble_hs_psync_elem_mem, "ble_hs_periodic_disc_pool");
    if (rc != 0) {
   18980:	b920      	cbnz	r0, 1898c <ble_hs_periodic_sync_init+0x20>
        return BLE_HS_EOS;
    }

    SLIST_INIT(&g_ble_hs_periodic_sync_handles);
   18982:	4b06      	ldr	r3, [pc, #24]	; (1899c <ble_hs_periodic_sync_init+0x30>)
   18984:	6018      	str	r0, [r3, #0]

    return 0;
}
   18986:	b003      	add	sp, #12
   18988:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   1898c:	200b      	movs	r0, #11
   1898e:	e7fa      	b.n	18986 <ble_hs_periodic_sync_init+0x1a>
   18990:	0002c488 	.word	0x0002c488
   18994:	20002a34 	.word	0x20002a34
   18998:	20002a18 	.word	0x20002a18
   1899c:	20002a5c 	.word	0x20002a5c

000189a0 <ble_hs_pvcy_clear_entries>:
    return 0;
}

static int
ble_hs_pvcy_clear_entries(void)
{
   189a0:	b500      	push	{lr}
   189a2:	b083      	sub	sp, #12
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   189a4:	2100      	movs	r1, #0
   189a6:	9101      	str	r1, [sp, #4]
   189a8:	9100      	str	r1, [sp, #0]
   189aa:	460b      	mov	r3, r1
   189ac:	460a      	mov	r2, r1
   189ae:	f242 0029 	movw	r0, #8233	; 0x2029
   189b2:	f7fe ff7f 	bl	178b4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   189b6:	b003      	add	sp, #12
   189b8:	f85d fb04 	ldr.w	pc, [sp], #4

000189bc <ble_hs_pvcy_set_addr_timeout>:
{
   189bc:	b500      	push	{lr}
   189be:	b085      	sub	sp, #20
    rc = ble_hs_hci_cmd_build_set_resolv_priv_addr_timeout(timeout, buf,
   189c0:	2202      	movs	r2, #2
   189c2:	a903      	add	r1, sp, #12
   189c4:	f7ff fa74 	bl	17eb0 <ble_hs_hci_cmd_build_set_resolv_priv_addr_timeout>
    if (rc != 0) {
   189c8:	4603      	mov	r3, r0
   189ca:	b118      	cbz	r0, 189d4 <ble_hs_pvcy_set_addr_timeout+0x18>
}
   189cc:	4618      	mov	r0, r3
   189ce:	b005      	add	sp, #20
   189d0:	f85d fb04 	ldr.w	pc, [sp], #4
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   189d4:	2300      	movs	r3, #0
   189d6:	9301      	str	r3, [sp, #4]
   189d8:	9300      	str	r3, [sp, #0]
   189da:	2202      	movs	r2, #2
   189dc:	a903      	add	r1, sp, #12
   189de:	f242 002e 	movw	r0, #8238	; 0x202e
   189e2:	f7fe ff67 	bl	178b4 <ble_hs_hci_cmd_tx>
   189e6:	4603      	mov	r3, r0
   189e8:	e7f0      	b.n	189cc <ble_hs_pvcy_set_addr_timeout+0x10>

000189ea <ble_hs_pvcy_set_resolve_enabled>:
{
   189ea:	b500      	push	{lr}
   189ec:	b085      	sub	sp, #20
    rc = ble_hs_hci_cmd_build_set_addr_res_en(enable, buf, sizeof(buf));
   189ee:	2201      	movs	r2, #1
   189f0:	a903      	add	r1, sp, #12
   189f2:	b2c0      	uxtb	r0, r0
   189f4:	f7ff fa58 	bl	17ea8 <ble_hs_hci_cmd_build_set_addr_res_en>
    if (rc != 0) {
   189f8:	4603      	mov	r3, r0
   189fa:	b118      	cbz	r0, 18a04 <ble_hs_pvcy_set_resolve_enabled+0x1a>
}
   189fc:	4618      	mov	r0, r3
   189fe:	b005      	add	sp, #20
   18a00:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   18a04:	2300      	movs	r3, #0
   18a06:	9301      	str	r3, [sp, #4]
   18a08:	9300      	str	r3, [sp, #0]
   18a0a:	2201      	movs	r2, #1
   18a0c:	a903      	add	r1, sp, #12
   18a0e:	f242 002d 	movw	r0, #8237	; 0x202d
   18a12:	f7fe ff4f 	bl	178b4 <ble_hs_hci_cmd_tx>
   18a16:	4603      	mov	r3, r0
   18a18:	e7f0      	b.n	189fc <ble_hs_pvcy_set_resolve_enabled+0x12>
	...

00018a1c <ble_hs_pvcy_ensure_started>:
    return rc;
}

int
ble_hs_pvcy_ensure_started(void)
{
   18a1c:	b508      	push	{r3, lr}
    int rc;

    if (ble_hs_pvcy_started) {
   18a1e:	4b08      	ldr	r3, [pc, #32]	; (18a40 <ble_hs_pvcy_ensure_started+0x24>)
   18a20:	781b      	ldrb	r3, [r3, #0]
   18a22:	b113      	cbz	r3, 18a2a <ble_hs_pvcy_ensure_started+0xe>
        return 0;
   18a24:	2300      	movs	r3, #0
    }

    ble_hs_pvcy_started = 1;

    return 0;
}
   18a26:	4618      	mov	r0, r3
   18a28:	bd08      	pop	{r3, pc}
    rc = ble_hs_pvcy_set_addr_timeout(MYNEWT_VAL(BLE_RPA_TIMEOUT));
   18a2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
   18a2e:	f7ff ffc5 	bl	189bc <ble_hs_pvcy_set_addr_timeout>
    if (rc != 0) {
   18a32:	4603      	mov	r3, r0
   18a34:	2800      	cmp	r0, #0
   18a36:	d1f6      	bne.n	18a26 <ble_hs_pvcy_ensure_started+0xa>
    ble_hs_pvcy_started = 1;
   18a38:	4a01      	ldr	r2, [pc, #4]	; (18a40 <ble_hs_pvcy_ensure_started+0x24>)
   18a3a:	2101      	movs	r1, #1
   18a3c:	7011      	strb	r1, [r2, #0]
    return 0;
   18a3e:	e7f2      	b.n	18a26 <ble_hs_pvcy_ensure_started+0xa>
   18a40:	20002a70 	.word	0x20002a70

00018a44 <ble_hs_pvcy_our_irk>:
int
ble_hs_pvcy_our_irk(const uint8_t **out_irk)
{
    /* XXX: Return error if privacy not supported. */

    *out_irk = ble_hs_pvcy_irk;
   18a44:	4b01      	ldr	r3, [pc, #4]	; (18a4c <ble_hs_pvcy_our_irk+0x8>)
   18a46:	6003      	str	r3, [r0, #0]
    return 0;
}
   18a48:	2000      	movs	r0, #0
   18a4a:	4770      	bx	lr
   18a4c:	20002a60 	.word	0x20002a60

00018a50 <ble_hs_pvcy_set_mode>:

int
ble_hs_pvcy_set_mode(const ble_addr_t *addr, uint8_t priv_mode)
{
   18a50:	b510      	push	{r4, lr}
   18a52:	b084      	sub	sp, #16
    uint8_t buf[BLE_HCI_LE_SET_PRIVACY_MODE_LEN];
    int rc;

    rc = ble_hs_hci_cmd_build_le_set_priv_mode(addr->val, addr->type, priv_mode,
   18a54:	7804      	ldrb	r4, [r0, #0]
   18a56:	2308      	movs	r3, #8
   18a58:	9300      	str	r3, [sp, #0]
   18a5a:	446b      	add	r3, sp
   18a5c:	460a      	mov	r2, r1
   18a5e:	4621      	mov	r1, r4
   18a60:	3001      	adds	r0, #1
   18a62:	f7ff fa29 	bl	17eb8 <ble_hs_hci_cmd_build_le_set_priv_mode>
                                           buf, sizeof(buf));
    if (rc != 0) {
   18a66:	4603      	mov	r3, r0
   18a68:	b110      	cbz	r0, 18a70 <ble_hs_pvcy_set_mode+0x20>
    }

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
                                        BLE_HCI_OCF_LE_SET_PRIVACY_MODE),
                             buf, sizeof(buf), NULL, 0, NULL);
}
   18a6a:	4618      	mov	r0, r3
   18a6c:	b004      	add	sp, #16
   18a6e:	bd10      	pop	{r4, pc}
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   18a70:	2300      	movs	r3, #0
   18a72:	9301      	str	r3, [sp, #4]
   18a74:	9300      	str	r3, [sp, #0]
   18a76:	2208      	movs	r2, #8
   18a78:	eb0d 0102 	add.w	r1, sp, r2
   18a7c:	f242 004e 	movw	r0, #8270	; 0x204e
   18a80:	f7fe ff18 	bl	178b4 <ble_hs_hci_cmd_tx>
   18a84:	4603      	mov	r3, r0
   18a86:	e7f0      	b.n	18a6a <ble_hs_pvcy_set_mode+0x1a>

00018a88 <ble_hs_pvcy_add_entry_hci>:
{
   18a88:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a8a:	b099      	sub	sp, #100	; 0x64
   18a8c:	4606      	mov	r6, r0
   18a8e:	460f      	mov	r7, r1
   18a90:	4615      	mov	r5, r2
    add.addr_type = addr_type;
   18a92:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    memcpy(add.addr, addr, 6);
   18a96:	6803      	ldr	r3, [r0, #0]
   18a98:	f8cd 3039 	str.w	r3, [sp, #57]	; 0x39
   18a9c:	8883      	ldrh	r3, [r0, #4]
   18a9e:	f8ad 303d 	strh.w	r3, [sp, #61]	; 0x3d
    memcpy(add.local_irk, ble_hs_pvcy_irk, 16);
   18aa2:	4c1d      	ldr	r4, [pc, #116]	; (18b18 <ble_hs_pvcy_add_entry_hci+0x90>)
   18aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   18aa6:	f8cd 003f 	str.w	r0, [sp, #63]	; 0x3f
   18aaa:	f8cd 1043 	str.w	r1, [sp, #67]	; 0x43
   18aae:	f8cd 2047 	str.w	r2, [sp, #71]	; 0x47
   18ab2:	f8cd 304b 	str.w	r3, [sp, #75]	; 0x4b
    memcpy(add.peer_irk, irk, 16);
   18ab6:	6828      	ldr	r0, [r5, #0]
   18ab8:	6869      	ldr	r1, [r5, #4]
   18aba:	68aa      	ldr	r2, [r5, #8]
   18abc:	68eb      	ldr	r3, [r5, #12]
   18abe:	f8cd 004f 	str.w	r0, [sp, #79]	; 0x4f
   18ac2:	f8cd 1053 	str.w	r1, [sp, #83]	; 0x53
   18ac6:	f8cd 2057 	str.w	r2, [sp, #87]	; 0x57
   18aca:	f8cd 305b 	str.w	r3, [sp, #91]	; 0x5b
    rc = ble_hs_hci_cmd_build_add_to_resolv_list(&add, buf, sizeof(buf));
   18ace:	2227      	movs	r2, #39	; 0x27
   18ad0:	a904      	add	r1, sp, #16
   18ad2:	a80e      	add	r0, sp, #56	; 0x38
   18ad4:	f7ff f9db 	bl	17e8e <ble_hs_hci_cmd_build_add_to_resolv_list>
    if (rc != 0) {
   18ad8:	4603      	mov	r3, r0
   18ada:	b110      	cbz	r0, 18ae2 <ble_hs_pvcy_add_entry_hci+0x5a>
}
   18adc:	4618      	mov	r0, r3
   18ade:	b019      	add	sp, #100	; 0x64
   18ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   18ae2:	2300      	movs	r3, #0
   18ae4:	9301      	str	r3, [sp, #4]
   18ae6:	9300      	str	r3, [sp, #0]
   18ae8:	2227      	movs	r2, #39	; 0x27
   18aea:	a904      	add	r1, sp, #16
   18aec:	f242 0027 	movw	r0, #8231	; 0x2027
   18af0:	f7fe fee0 	bl	178b4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   18af4:	4603      	mov	r3, r0
   18af6:	2800      	cmp	r0, #0
   18af8:	d1f0      	bne.n	18adc <ble_hs_pvcy_add_entry_hci+0x54>
    peer_addr.type = addr_type;
   18afa:	f88d 7008 	strb.w	r7, [sp, #8]
    memcpy(peer_addr.val, addr, sizeof peer_addr.val);
   18afe:	6833      	ldr	r3, [r6, #0]
   18b00:	f8cd 3009 	str.w	r3, [sp, #9]
   18b04:	88b3      	ldrh	r3, [r6, #4]
   18b06:	f8ad 300d 	strh.w	r3, [sp, #13]
    rc = ble_hs_pvcy_set_mode(&peer_addr, BLE_GAP_PRIVATE_MODE_DEVICE);
   18b0a:	2101      	movs	r1, #1
   18b0c:	a802      	add	r0, sp, #8
   18b0e:	f7ff ff9f 	bl	18a50 <ble_hs_pvcy_set_mode>
   18b12:	4603      	mov	r3, r0
   18b14:	e7e2      	b.n	18adc <ble_hs_pvcy_add_entry_hci+0x54>
   18b16:	bf00      	nop
   18b18:	20002a60 	.word	0x20002a60

00018b1c <ble_hs_pvcy_add_entry>:
{
   18b1c:	b570      	push	{r4, r5, r6, lr}
   18b1e:	4604      	mov	r4, r0
   18b20:	460d      	mov	r5, r1
   18b22:	4616      	mov	r6, r2
    ble_gap_preempt();
   18b24:	f7fb fb52 	bl	141cc <ble_gap_preempt>
    rc = ble_hs_pvcy_add_entry_hci(addr, addr_type, irk);
   18b28:	4632      	mov	r2, r6
   18b2a:	4629      	mov	r1, r5
   18b2c:	4620      	mov	r0, r4
   18b2e:	f7ff ffab 	bl	18a88 <ble_hs_pvcy_add_entry_hci>
   18b32:	4604      	mov	r4, r0
    ble_gap_preempt_done();
   18b34:	f7fb fb56 	bl	141e4 <ble_gap_preempt_done>
}
   18b38:	4620      	mov	r0, r4
   18b3a:	bd70      	pop	{r4, r5, r6, pc}

00018b3c <ble_hs_pvcy_set_our_irk>:
{
   18b3c:	b510      	push	{r4, lr}
   18b3e:	b086      	sub	sp, #24
    if (irk != NULL) {
   18b40:	b180      	cbz	r0, 18b64 <ble_hs_pvcy_set_our_irk+0x28>
   18b42:	4603      	mov	r3, r0
        memcpy(new_irk, irk, 16);
   18b44:	466c      	mov	r4, sp
   18b46:	6800      	ldr	r0, [r0, #0]
   18b48:	6859      	ldr	r1, [r3, #4]
   18b4a:	689a      	ldr	r2, [r3, #8]
   18b4c:	68db      	ldr	r3, [r3, #12]
   18b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if (memcmp(ble_hs_pvcy_irk, new_irk, 16) != 0) {
   18b50:	2210      	movs	r2, #16
   18b52:	4669      	mov	r1, sp
   18b54:	4818      	ldr	r0, [pc, #96]	; (18bb8 <ble_hs_pvcy_set_our_irk+0x7c>)
   18b56:	f7f9 fc91 	bl	1247c <memcmp>
   18b5a:	4603      	mov	r3, r0
   18b5c:	b940      	cbnz	r0, 18b70 <ble_hs_pvcy_set_our_irk+0x34>
}
   18b5e:	4618      	mov	r0, r3
   18b60:	b006      	add	sp, #24
   18b62:	bd10      	pop	{r4, pc}
        memcpy(new_irk, ble_hs_pvcy_default_irk, 16);
   18b64:	4b15      	ldr	r3, [pc, #84]	; (18bbc <ble_hs_pvcy_set_our_irk+0x80>)
   18b66:	466c      	mov	r4, sp
   18b68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   18b6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   18b6e:	e7ef      	b.n	18b50 <ble_hs_pvcy_set_our_irk+0x14>
        memcpy(ble_hs_pvcy_irk, new_irk, 16);
   18b70:	4c11      	ldr	r4, [pc, #68]	; (18bb8 <ble_hs_pvcy_set_our_irk+0x7c>)
   18b72:	466b      	mov	r3, sp
   18b74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   18b76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rc = ble_hs_pvcy_set_resolve_enabled(0);
   18b7a:	2000      	movs	r0, #0
   18b7c:	f7ff ff35 	bl	189ea <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   18b80:	4603      	mov	r3, r0
   18b82:	2800      	cmp	r0, #0
   18b84:	d1eb      	bne.n	18b5e <ble_hs_pvcy_set_our_irk+0x22>
        rc = ble_hs_pvcy_clear_entries();
   18b86:	f7ff ff0b 	bl	189a0 <ble_hs_pvcy_clear_entries>
        if (rc != 0) {
   18b8a:	4603      	mov	r3, r0
   18b8c:	2800      	cmp	r0, #0
   18b8e:	d1e6      	bne.n	18b5e <ble_hs_pvcy_set_our_irk+0x22>
        rc = ble_hs_pvcy_set_resolve_enabled(1);
   18b90:	2001      	movs	r0, #1
   18b92:	f7ff ff2a 	bl	189ea <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   18b96:	4603      	mov	r3, r0
   18b98:	2800      	cmp	r0, #0
   18b9a:	d1e0      	bne.n	18b5e <ble_hs_pvcy_set_our_irk+0x22>
        memset(tmp_addr, 0, 6);
   18b9c:	2100      	movs	r1, #0
   18b9e:	9104      	str	r1, [sp, #16]
   18ba0:	f8ad 1014 	strh.w	r1, [sp, #20]
        memset(new_irk, 0, 16);
   18ba4:	9100      	str	r1, [sp, #0]
   18ba6:	9101      	str	r1, [sp, #4]
   18ba8:	9102      	str	r1, [sp, #8]
   18baa:	9103      	str	r1, [sp, #12]
        rc = ble_hs_pvcy_add_entry(tmp_addr, 0, new_irk);
   18bac:	466a      	mov	r2, sp
   18bae:	a804      	add	r0, sp, #16
   18bb0:	f7ff ffb4 	bl	18b1c <ble_hs_pvcy_add_entry>
   18bb4:	4603      	mov	r3, r0
   18bb6:	e7d2      	b.n	18b5e <ble_hs_pvcy_set_our_irk+0x22>
   18bb8:	20002a60 	.word	0x20002a60
   18bbc:	0002c4a4 	.word	0x0002c4a4

00018bc0 <ble_hs_startup_reset_tx>:
    return 0;
}

static int
ble_hs_startup_reset_tx(void)
{
   18bc0:	b508      	push	{r3, lr}
    int rc;

    rc = ble_hs_hci_cmd_tx_empty_ack(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   18bc2:	2200      	movs	r2, #0
   18bc4:	4611      	mov	r1, r2
   18bc6:	f640 4003 	movw	r0, #3075	; 0xc03
   18bca:	f7fe feab 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   18bce:	bd08      	pop	{r3, pc}

00018bd0 <ble_hs_startup_read_local_ver_tx>:
{
   18bd0:	b510      	push	{r4, lr}
   18bd2:	b086      	sub	sp, #24
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   18bd4:	f10d 030f 	add.w	r3, sp, #15
   18bd8:	9301      	str	r3, [sp, #4]
   18bda:	2308      	movs	r3, #8
   18bdc:	9300      	str	r3, [sp, #0]
   18bde:	ab04      	add	r3, sp, #16
   18be0:	2200      	movs	r2, #0
   18be2:	4611      	mov	r1, r2
   18be4:	f241 0001 	movw	r0, #4097	; 0x1001
   18be8:	f7fe fe64 	bl	178b4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   18bec:	4604      	mov	r4, r0
   18bee:	b920      	cbnz	r0, 18bfa <ble_hs_startup_read_local_ver_tx+0x2a>
    if (ack_params_len != BLE_HCI_RD_LOC_VER_INFO_RSPLEN) {
   18bf0:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18bf4:	2b08      	cmp	r3, #8
   18bf6:	d003      	beq.n	18c00 <ble_hs_startup_read_local_ver_tx+0x30>
        return BLE_HS_ECONTROLLER;
   18bf8:	240c      	movs	r4, #12
}
   18bfa:	4620      	mov	r0, r4
   18bfc:	b006      	add	sp, #24
   18bfe:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_hci_version(hci_version);
   18c00:	f89d 0010 	ldrb.w	r0, [sp, #16]
   18c04:	f7fe ff24 	bl	17a50 <ble_hs_hci_set_hci_version>
    return 0;
   18c08:	e7f7      	b.n	18bfa <ble_hs_startup_read_local_ver_tx+0x2a>
   18c0a:	0000      	movs	r0, r0
   18c0c:	0000      	movs	r0, r0
	...

00018c10 <ble_hs_startup_set_evmask_tx>:
{
   18c10:	b510      	push	{r4, lr}
   18c12:	b082      	sub	sp, #8
    version = ble_hs_hci_get_hci_version();
   18c14:	f7fe ff22 	bl	17a5c <ble_hs_hci_get_hci_version>
   18c18:	4604      	mov	r4, r0
    ble_hs_hci_cmd_build_set_event_mask(0x2000800002008090, buf, sizeof buf);
   18c1a:	2308      	movs	r3, #8
   18c1c:	466a      	mov	r2, sp
   18c1e:	a110      	add	r1, pc, #64	; (adr r1, 18c60 <ble_hs_startup_set_evmask_tx+0x50>)
   18c20:	e9d1 0100 	ldrd	r0, r1, [r1]
   18c24:	f7ff f900 	bl	17e28 <ble_hs_hci_cmd_build_set_event_mask>
    rc = ble_hs_hci_cmd_tx_empty_ack(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   18c28:	2208      	movs	r2, #8
   18c2a:	4669      	mov	r1, sp
   18c2c:	f640 4001 	movw	r0, #3073	; 0xc01
   18c30:	f7fe fe78 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
    if (rc != 0) {
   18c34:	4603      	mov	r3, r0
   18c36:	b908      	cbnz	r0, 18c3c <ble_hs_startup_set_evmask_tx+0x2c>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   18c38:	2c06      	cmp	r4, #6
   18c3a:	d802      	bhi.n	18c42 <ble_hs_startup_set_evmask_tx+0x32>
}
   18c3c:	4618      	mov	r0, r3
   18c3e:	b002      	add	sp, #8
   18c40:	bd10      	pop	{r4, pc}
        ble_hs_hci_cmd_build_set_event_mask2(0x0000000000800000, buf, sizeof buf);
   18c42:	2308      	movs	r3, #8
   18c44:	466a      	mov	r2, sp
   18c46:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   18c4a:	2100      	movs	r1, #0
   18c4c:	f7ff f8f0 	bl	17e30 <ble_hs_hci_cmd_build_set_event_mask2>
        rc = ble_hs_hci_cmd_tx_empty_ack(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   18c50:	2208      	movs	r2, #8
   18c52:	4669      	mov	r1, sp
   18c54:	f640 4063 	movw	r0, #3171	; 0xc63
   18c58:	f7fe fe64 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
   18c5c:	4603      	mov	r3, r0
   18c5e:	e7ed      	b.n	18c3c <ble_hs_startup_set_evmask_tx+0x2c>
   18c60:	02008090 	.word	0x02008090
   18c64:	20008000 	.word	0x20008000

00018c68 <ble_hs_startup_le_set_evmask_tx>:
{
   18c68:	b500      	push	{lr}
   18c6a:	b083      	sub	sp, #12
    version = ble_hs_hci_get_hci_version();
   18c6c:	f7fe fef6 	bl	17a5c <ble_hs_hci_get_hci_version>
   18c70:	4603      	mov	r3, r0
    if (version >= BLE_HCI_VER_BCS_4_1) {
   18c72:	2806      	cmp	r0, #6
   18c74:	d818      	bhi.n	18ca8 <ble_hs_startup_le_set_evmask_tx+0x40>
    mask = 0x000000000000001f;
   18c76:	201f      	movs	r0, #31
   18c78:	2100      	movs	r1, #0
    if (version >= BLE_HCI_VER_BCS_4_2) {
   18c7a:	2b07      	cmp	r3, #7
   18c7c:	d901      	bls.n	18c82 <ble_hs_startup_le_set_evmask_tx+0x1a>
        mask |= 0x0000000000000640;
   18c7e:	f440 60c8 	orr.w	r0, r0, #1600	; 0x640
    if (version >= BLE_HCI_VER_BCS_5_0) {
   18c82:	2b08      	cmp	r3, #8
   18c84:	d903      	bls.n	18c8e <ble_hs_startup_le_set_evmask_tx+0x26>
        mask |= 0x00000000000ff800;
   18c86:	4a0a      	ldr	r2, [pc, #40]	; (18cb0 <ble_hs_startup_le_set_evmask_tx+0x48>)
   18c88:	2300      	movs	r3, #0
   18c8a:	4310      	orrs	r0, r2
   18c8c:	4319      	orrs	r1, r3
    ble_hs_hci_cmd_build_le_set_event_mask(mask, buf, sizeof buf);
   18c8e:	2308      	movs	r3, #8
   18c90:	466a      	mov	r2, sp
   18c92:	f7ff f8d5 	bl	17e40 <ble_hs_hci_cmd_build_le_set_event_mask>
    rc = ble_hs_hci_cmd_tx_empty_ack(BLE_HCI_OP(BLE_HCI_OGF_LE,
   18c96:	2208      	movs	r2, #8
   18c98:	4669      	mov	r1, sp
   18c9a:	f242 0001 	movw	r0, #8193	; 0x2001
   18c9e:	f7fe fe41 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
}
   18ca2:	b003      	add	sp, #12
   18ca4:	f85d fb04 	ldr.w	pc, [sp], #4
        mask |= 0x0000000000000020;
   18ca8:	203f      	movs	r0, #63	; 0x3f
   18caa:	2100      	movs	r1, #0
   18cac:	e7e5      	b.n	18c7a <ble_hs_startup_le_set_evmask_tx+0x12>
   18cae:	bf00      	nop
   18cb0:	000ff800 	.word	0x000ff800

00018cb4 <ble_hs_startup_le_read_buf_sz_tx>:
{
   18cb4:	b570      	push	{r4, r5, r6, lr}
   18cb6:	b084      	sub	sp, #16
   18cb8:	4606      	mov	r6, r0
   18cba:	460d      	mov	r5, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   18cbc:	f10d 030b 	add.w	r3, sp, #11
   18cc0:	9301      	str	r3, [sp, #4]
   18cc2:	2303      	movs	r3, #3
   18cc4:	9300      	str	r3, [sp, #0]
   18cc6:	ab03      	add	r3, sp, #12
   18cc8:	2200      	movs	r2, #0
   18cca:	4611      	mov	r1, r2
   18ccc:	f242 0002 	movw	r0, #8194	; 0x2002
   18cd0:	f7fe fdf0 	bl	178b4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   18cd4:	4604      	mov	r4, r0
   18cd6:	b920      	cbnz	r0, 18ce2 <ble_hs_startup_le_read_buf_sz_tx+0x2e>
    if (ack_params_len != BLE_HCI_RD_BUF_SIZE_RSPLEN) {
   18cd8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   18cdc:	2b03      	cmp	r3, #3
   18cde:	d003      	beq.n	18ce8 <ble_hs_startup_le_read_buf_sz_tx+0x34>
        return BLE_HS_ECONTROLLER;
   18ce0:	240c      	movs	r4, #12
}
   18ce2:	4620      	mov	r0, r4
   18ce4:	b004      	add	sp, #16
   18ce6:	bd70      	pop	{r4, r5, r6, pc}
    *out_pktlen = get_le16(ack_params + 0);
   18ce8:	a803      	add	r0, sp, #12
   18cea:	f005 ff3b 	bl	1eb64 <get_le16>
   18cee:	8030      	strh	r0, [r6, #0]
    *out_max_pkts = ack_params[2];
   18cf0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   18cf4:	702b      	strb	r3, [r5, #0]
    return 0;
   18cf6:	e7f4      	b.n	18ce2 <ble_hs_startup_le_read_buf_sz_tx+0x2e>

00018cf8 <ble_hs_startup_read_buf_sz_tx>:
{
   18cf8:	b570      	push	{r4, r5, r6, lr}
   18cfa:	b086      	sub	sp, #24
   18cfc:	4606      	mov	r6, r0
   18cfe:	460d      	mov	r5, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   18d00:	f10d 030f 	add.w	r3, sp, #15
   18d04:	9301      	str	r3, [sp, #4]
   18d06:	2307      	movs	r3, #7
   18d08:	9300      	str	r3, [sp, #0]
   18d0a:	ab04      	add	r3, sp, #16
   18d0c:	2200      	movs	r2, #0
   18d0e:	4611      	mov	r1, r2
   18d10:	f241 0005 	movw	r0, #4101	; 0x1005
   18d14:	f7fe fdce 	bl	178b4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   18d18:	4604      	mov	r4, r0
   18d1a:	b920      	cbnz	r0, 18d26 <ble_hs_startup_read_buf_sz_tx+0x2e>
    if (ack_params_len != BLE_HCI_IP_RD_BUF_SIZE_RSPLEN) {
   18d1c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18d20:	2b07      	cmp	r3, #7
   18d22:	d003      	beq.n	18d2c <ble_hs_startup_read_buf_sz_tx+0x34>
        return BLE_HS_ECONTROLLER;
   18d24:	240c      	movs	r4, #12
}
   18d26:	4620      	mov	r0, r4
   18d28:	b006      	add	sp, #24
   18d2a:	bd70      	pop	{r4, r5, r6, pc}
    *out_pktlen = get_le16(ack_params + 0);
   18d2c:	a804      	add	r0, sp, #16
   18d2e:	f005 ff19 	bl	1eb64 <get_le16>
   18d32:	8030      	strh	r0, [r6, #0]
    *out_max_pkts = get_le16(ack_params + 3);
   18d34:	f10d 0013 	add.w	r0, sp, #19
   18d38:	f005 ff14 	bl	1eb64 <get_le16>
   18d3c:	8028      	strh	r0, [r5, #0]
    return 0;
   18d3e:	e7f2      	b.n	18d26 <ble_hs_startup_read_buf_sz_tx+0x2e>

00018d40 <ble_hs_startup_read_buf_sz>:
{
   18d40:	b500      	push	{lr}
   18d42:	b083      	sub	sp, #12
    uint16_t le_pktlen = 0;
   18d44:	2300      	movs	r3, #0
   18d46:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t max_pkts = 0;
   18d4a:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t pktlen = 0;
   18d4e:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint8_t le_max_pkts = 0;
   18d52:	a902      	add	r1, sp, #8
   18d54:	f801 3d07 	strb.w	r3, [r1, #-7]!
    rc = ble_hs_startup_le_read_buf_sz_tx(&le_pktlen, &le_max_pkts);
   18d58:	f10d 0006 	add.w	r0, sp, #6
   18d5c:	f7ff ffaa 	bl	18cb4 <ble_hs_startup_le_read_buf_sz_tx>
    if (rc != 0) {
   18d60:	4603      	mov	r3, r0
   18d62:	b978      	cbnz	r0, 18d84 <ble_hs_startup_read_buf_sz+0x44>
    if (le_pktlen != 0) {
   18d64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18d68:	b183      	cbz	r3, 18d8c <ble_hs_startup_read_buf_sz+0x4c>
        pktlen = le_pktlen;
   18d6a:	f8ad 3002 	strh.w	r3, [sp, #2]
        max_pkts = le_max_pkts;
   18d6e:	f89d 3001 	ldrb.w	r3, [sp, #1]
   18d72:	f8ad 3004 	strh.w	r3, [sp, #4]
    rc = ble_hs_hci_set_buf_sz(pktlen, max_pkts);
   18d76:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   18d7a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   18d7e:	f7fe fd77 	bl	17870 <ble_hs_hci_set_buf_sz>
   18d82:	4603      	mov	r3, r0
}
   18d84:	4618      	mov	r0, r3
   18d86:	b003      	add	sp, #12
   18d88:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_hs_startup_read_buf_sz_tx(&pktlen, &max_pkts);
   18d8c:	a901      	add	r1, sp, #4
   18d8e:	f10d 0002 	add.w	r0, sp, #2
   18d92:	f7ff ffb1 	bl	18cf8 <ble_hs_startup_read_buf_sz_tx>
        if (rc != 0) {
   18d96:	4603      	mov	r3, r0
   18d98:	2800      	cmp	r0, #0
   18d9a:	d0ec      	beq.n	18d76 <ble_hs_startup_read_buf_sz+0x36>
   18d9c:	e7f2      	b.n	18d84 <ble_hs_startup_read_buf_sz+0x44>

00018d9e <ble_hs_startup_le_read_sup_f_tx>:
{
   18d9e:	b510      	push	{r4, lr}
   18da0:	b086      	sub	sp, #24
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   18da2:	f10d 030f 	add.w	r3, sp, #15
   18da6:	9301      	str	r3, [sp, #4]
   18da8:	2308      	movs	r3, #8
   18daa:	9300      	str	r3, [sp, #0]
   18dac:	ab04      	add	r3, sp, #16
   18dae:	2200      	movs	r2, #0
   18db0:	4611      	mov	r1, r2
   18db2:	f242 0003 	movw	r0, #8195	; 0x2003
   18db6:	f7fe fd7d 	bl	178b4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   18dba:	4604      	mov	r4, r0
   18dbc:	b920      	cbnz	r0, 18dc8 <ble_hs_startup_le_read_sup_f_tx+0x2a>
    if (ack_params_len != BLE_HCI_RD_LE_LOC_SUPP_FEAT_RSPLEN) {
   18dbe:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18dc2:	2b08      	cmp	r3, #8
   18dc4:	d003      	beq.n	18dce <ble_hs_startup_le_read_sup_f_tx+0x30>
        return BLE_HS_ECONTROLLER;
   18dc6:	240c      	movs	r4, #12
}
   18dc8:	4620      	mov	r0, r4
   18dca:	b006      	add	sp, #24
   18dcc:	bd10      	pop	{r4, pc}
    feat = get_le32(ack_params);
   18dce:	a804      	add	r0, sp, #16
   18dd0:	f005 fecd 	bl	1eb6e <get_le32>
    ble_hs_hci_set_le_supported_feat(feat);
   18dd4:	f7fe fe36 	bl	17a44 <ble_hs_hci_set_le_supported_feat>
    return 0;
   18dd8:	e7f6      	b.n	18dc8 <ble_hs_startup_le_read_sup_f_tx+0x2a>

00018dda <ble_hs_startup_read_bd_addr>:
{
   18dda:	b510      	push	{r4, lr}
   18ddc:	b086      	sub	sp, #24
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   18dde:	f10d 030f 	add.w	r3, sp, #15
   18de2:	9301      	str	r3, [sp, #4]
   18de4:	2306      	movs	r3, #6
   18de6:	9300      	str	r3, [sp, #0]
   18de8:	ab04      	add	r3, sp, #16
   18dea:	2200      	movs	r2, #0
   18dec:	4611      	mov	r1, r2
   18dee:	f241 0009 	movw	r0, #4105	; 0x1009
   18df2:	f7fe fd5f 	bl	178b4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   18df6:	4604      	mov	r4, r0
   18df8:	b920      	cbnz	r0, 18e04 <ble_hs_startup_read_bd_addr+0x2a>
    if (ack_params_len != sizeof ack_params) {
   18dfa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   18dfe:	2b06      	cmp	r3, #6
   18e00:	d003      	beq.n	18e0a <ble_hs_startup_read_bd_addr+0x30>
        return BLE_HS_ECONTROLLER;
   18e02:	240c      	movs	r4, #12
}
   18e04:	4620      	mov	r0, r4
   18e06:	b006      	add	sp, #24
   18e08:	bd10      	pop	{r4, pc}
    ble_hs_id_set_pub(ack_params);
   18e0a:	a804      	add	r0, sp, #16
   18e0c:	f7ff fc1c 	bl	18648 <ble_hs_id_set_pub>
    return 0;
   18e10:	e7f8      	b.n	18e04 <ble_hs_startup_read_bd_addr+0x2a>

00018e12 <ble_hs_startup_go>:

int
ble_hs_startup_go(void)
{
   18e12:	b510      	push	{r4, lr}
    int rc;

    rc = ble_hs_startup_reset_tx();
   18e14:	f7ff fed4 	bl	18bc0 <ble_hs_startup_reset_tx>
    if (rc != 0) {
   18e18:	4604      	mov	r4, r0
   18e1a:	b108      	cbz	r0, 18e20 <ble_hs_startup_go+0xe>

    /* If flow control is enabled, configure the controller to use it. */
    ble_hs_flow_startup();

    return 0;
}
   18e1c:	4620      	mov	r0, r4
   18e1e:	bd10      	pop	{r4, pc}
    rc = ble_hs_startup_read_local_ver_tx();
   18e20:	f7ff fed6 	bl	18bd0 <ble_hs_startup_read_local_ver_tx>
    if (rc != 0) {
   18e24:	4604      	mov	r4, r0
   18e26:	2800      	cmp	r0, #0
   18e28:	d1f8      	bne.n	18e1c <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_set_evmask_tx();
   18e2a:	f7ff fef1 	bl	18c10 <ble_hs_startup_set_evmask_tx>
    if (rc != 0) {
   18e2e:	4604      	mov	r4, r0
   18e30:	2800      	cmp	r0, #0
   18e32:	d1f3      	bne.n	18e1c <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_set_evmask_tx();
   18e34:	f7ff ff18 	bl	18c68 <ble_hs_startup_le_set_evmask_tx>
    if (rc != 0) {
   18e38:	4604      	mov	r4, r0
   18e3a:	2800      	cmp	r0, #0
   18e3c:	d1ee      	bne.n	18e1c <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_buf_sz();
   18e3e:	f7ff ff7f 	bl	18d40 <ble_hs_startup_read_buf_sz>
    if (rc != 0) {
   18e42:	4604      	mov	r4, r0
   18e44:	2800      	cmp	r0, #0
   18e46:	d1e9      	bne.n	18e1c <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_read_sup_f_tx();
   18e48:	f7ff ffa9 	bl	18d9e <ble_hs_startup_le_read_sup_f_tx>
    if (rc != 0) {
   18e4c:	4604      	mov	r4, r0
   18e4e:	2800      	cmp	r0, #0
   18e50:	d1e4      	bne.n	18e1c <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_bd_addr();
   18e52:	f7ff ffc2 	bl	18dda <ble_hs_startup_read_bd_addr>
    if (rc != 0) {
   18e56:	4604      	mov	r4, r0
   18e58:	2800      	cmp	r0, #0
   18e5a:	d1df      	bne.n	18e1c <ble_hs_startup_go+0xa>
    ble_hs_pvcy_set_our_irk(NULL);
   18e5c:	f7ff fe6e 	bl	18b3c <ble_hs_pvcy_set_our_irk>
    ble_hs_flow_startup();
   18e60:	f7fe fc1e 	bl	176a0 <ble_hs_flow_startup>
    return 0;
   18e64:	e7da      	b.n	18e1c <ble_hs_startup_go+0xa>
	...

00018e68 <ble_hs_stop_done>:
/**
 * Called when a stop procedure has completed.
 */
static void
ble_hs_stop_done(int status)
{
   18e68:	b538      	push	{r3, r4, r5, lr}
   18e6a:	4605      	mov	r5, r0
    struct ble_hs_stop_listener_slist slist;
    struct ble_hs_stop_listener *listener;

    ble_hs_lock();
   18e6c:	f7fd fd46 	bl	168fc <ble_hs_lock>

    ble_gap_event_listener_unregister(&ble_hs_stop_gap_listener);
   18e70:	4809      	ldr	r0, [pc, #36]	; (18e98 <ble_hs_stop_done+0x30>)
   18e72:	f7fb fa19 	bl	142a8 <ble_gap_event_listener_unregister>

    slist = ble_hs_stop_listeners;
   18e76:	4a09      	ldr	r2, [pc, #36]	; (18e9c <ble_hs_stop_done+0x34>)
   18e78:	6814      	ldr	r4, [r2, #0]
    SLIST_INIT(&ble_hs_stop_listeners);
   18e7a:	2300      	movs	r3, #0
   18e7c:	6013      	str	r3, [r2, #0]

    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   18e7e:	4a08      	ldr	r2, [pc, #32]	; (18ea0 <ble_hs_stop_done+0x38>)
   18e80:	7013      	strb	r3, [r2, #0]

    ble_hs_unlock();
   18e82:	f7fd fd3f 	bl	16904 <ble_hs_unlock>

    SLIST_FOREACH(listener, &slist, link) {
   18e86:	e004      	b.n	18e92 <ble_hs_stop_done+0x2a>
        listener->fn(status, listener->arg);
   18e88:	6823      	ldr	r3, [r4, #0]
   18e8a:	6861      	ldr	r1, [r4, #4]
   18e8c:	4628      	mov	r0, r5
   18e8e:	4798      	blx	r3
    SLIST_FOREACH(listener, &slist, link) {
   18e90:	68a4      	ldr	r4, [r4, #8]
   18e92:	2c00      	cmp	r4, #0
   18e94:	d1f8      	bne.n	18e88 <ble_hs_stop_done+0x20>
    }
}
   18e96:	bd38      	pop	{r3, r4, r5, pc}
   18e98:	20002a74 	.word	0x20002a74
   18e9c:	20002a80 	.word	0x20002a80
   18ea0:	20003d6e 	.word	0x20003d6e

00018ea4 <ble_hs_stop_terminate_next_conn>:
 * If there are no open connections, Check for any active periodic sync
 * handles.
 */
static void
ble_hs_stop_terminate_next_conn(void)
{
   18ea4:	b508      	push	{r3, lr}
    uint16_t handle;
    int rc;

    handle = ble_hs_atomic_first_conn_handle();
   18ea6:	f7fe fa2e 	bl	17306 <ble_hs_atomic_first_conn_handle>
    if (handle == BLE_HS_CONN_HANDLE_NONE) {
   18eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18eae:	4298      	cmp	r0, r3
   18eb0:	d004      	beq.n	18ebc <ble_hs_stop_terminate_next_conn+0x18>
        /* No open connections.  Signal completion of the stop procedure. */
        ble_hs_stop_done(0);
        return;
    }

    rc = ble_gap_terminate(handle, BLE_ERR_REM_USER_CONN_TERM);
   18eb2:	2113      	movs	r1, #19
   18eb4:	f7fa fe4e 	bl	13b54 <ble_gap_terminate>
    if (rc == 0) {
   18eb8:	b920      	cbnz	r0, 18ec4 <ble_hs_stop_terminate_next_conn+0x20>
    } else {
        BLE_HS_LOG(ERROR,
            "ble_hs_stop: failed to terminate connection; rc=%d\n", rc);
        ble_hs_stop_done(rc);
    }
}
   18eba:	bd08      	pop	{r3, pc}
        ble_hs_stop_done(0);
   18ebc:	2000      	movs	r0, #0
   18ebe:	f7ff ffd3 	bl	18e68 <ble_hs_stop_done>
        return;
   18ec2:	e7fa      	b.n	18eba <ble_hs_stop_terminate_next_conn+0x16>
        ble_hs_stop_done(rc);
   18ec4:	f7ff ffd0 	bl	18e68 <ble_hs_stop_done>
   18ec8:	e7f7      	b.n	18eba <ble_hs_stop_terminate_next_conn+0x16>

00018eca <ble_hs_stop_term_event_cb>:
 *
 * If there are no connections, signals completion of the stop procedure.
 */
static void
ble_hs_stop_term_event_cb(struct ble_npl_event *ev)
{
   18eca:	b508      	push	{r3, lr}
    ble_hs_stop_terminate_next_conn();
   18ecc:	f7ff ffea 	bl	18ea4 <ble_hs_stop_terminate_next_conn>
}
   18ed0:	bd08      	pop	{r3, pc}
	...

00018ed4 <ble_hs_stop_init>:
    memset(ev, 0, sizeof(*ev));
   18ed4:	4b03      	ldr	r3, [pc, #12]	; (18ee4 <ble_hs_stop_init+0x10>)
   18ed6:	2200      	movs	r2, #0
   18ed8:	601a      	str	r2, [r3, #0]
   18eda:	609a      	str	r2, [r3, #8]
   18edc:	60da      	str	r2, [r3, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   18ede:	4a02      	ldr	r2, [pc, #8]	; (18ee8 <ble_hs_stop_init+0x14>)
   18ee0:	605a      	str	r2, [r3, #4]

void
ble_hs_stop_init(void)
{
    ble_npl_event_init(&ble_hs_stop_term_ev, ble_hs_stop_term_event_cb, NULL);
}
   18ee2:	4770      	bx	lr
   18ee4:	20002a84 	.word	0x20002a84
   18ee8:	00018ecb 	.word	0x00018ecb

00018eec <ble_ibeacon_set_adv_data>:
 *                              Other nonzero on failure.
 */
int
ble_ibeacon_set_adv_data(void *uuid128, uint16_t major,
                         uint16_t minor, int8_t measured_power)
{
   18eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   18eee:	b0a1      	sub	sp, #132	; 0x84
   18ef0:	4605      	mov	r5, r0
   18ef2:	468c      	mov	ip, r1
   18ef4:	4617      	mov	r7, r2
   18ef6:	461e      	mov	r6, r3
    struct ble_hs_adv_fields fields;
    uint8_t buf[BLE_IBEACON_MFG_DATA_SIZE];
    int rc;

    /** Company identifier (Apple). */
    buf[0] = 0x4c;
   18ef8:	234c      	movs	r3, #76	; 0x4c
   18efa:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = 0x00;
   18efe:	2300      	movs	r3, #0
   18f00:	f88d 3005 	strb.w	r3, [sp, #5]

    /** iBeacon indicator. */
    buf[2] = 0x02;
   18f04:	2302      	movs	r3, #2
   18f06:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = 0x15;
   18f0a:	2315      	movs	r3, #21
   18f0c:	f88d 3007 	strb.w	r3, [sp, #7]

    /** UUID. */
    memcpy(buf + 4, uuid128, 16);
   18f10:	ac02      	add	r4, sp, #8
   18f12:	6800      	ldr	r0, [r0, #0]
   18f14:	6869      	ldr	r1, [r5, #4]
   18f16:	68aa      	ldr	r2, [r5, #8]
   18f18:	68eb      	ldr	r3, [r5, #12]
   18f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    /** Version number. */
    put_be16(buf + 20, major);
   18f1c:	4661      	mov	r1, ip
   18f1e:	a806      	add	r0, sp, #24
   18f20:	f005 fe6b 	bl	1ebfa <put_be16>
    put_be16(buf + 22, minor);
   18f24:	4639      	mov	r1, r7
   18f26:	f10d 001a 	add.w	r0, sp, #26
   18f2a:	f005 fe66 	bl	1ebfa <put_be16>

    /* Measured Power ranging data (Calibrated tx power at 1 meters). */
    if (measured_power < -126 || measured_power > 20) {
   18f2e:	b2f3      	uxtb	r3, r6
   18f30:	f103 027e 	add.w	r2, r3, #126	; 0x7e
   18f34:	b2d2      	uxtb	r2, r2
   18f36:	2a92      	cmp	r2, #146	; 0x92
   18f38:	d813      	bhi.n	18f62 <ble_ibeacon_set_adv_data+0x76>
        return BLE_HS_EINVAL;
    }
    buf[24] = measured_power;
   18f3a:	f88d 301c 	strb.w	r3, [sp, #28]

    memset(&fields, 0, sizeof fields);
   18f3e:	2260      	movs	r2, #96	; 0x60
   18f40:	2100      	movs	r1, #0
   18f42:	a808      	add	r0, sp, #32
   18f44:	f7f9 fae7 	bl	12516 <memset>
    fields.mfg_data = buf;
   18f48:	ab01      	add	r3, sp, #4
   18f4a:	931e      	str	r3, [sp, #120]	; 0x78
    fields.mfg_data_len = sizeof buf;
   18f4c:	2319      	movs	r3, #25
   18f4e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c

    /* Advertise two flags:
     *     o Discoverability in forthcoming advertisement (general)
     *     o BLE-only (BR/EDR unsupported).
     */
    fields.flags = BLE_HS_ADV_F_DISC_GEN |
   18f52:	2306      	movs	r3, #6
   18f54:	f88d 3020 	strb.w	r3, [sp, #32]
                   BLE_HS_ADV_F_BREDR_UNSUP;

    rc = ble_gap_adv_set_fields(&fields);
   18f58:	a808      	add	r0, sp, #32
   18f5a:	f7fa fcc4 	bl	138e6 <ble_gap_adv_set_fields>
    return rc;
}
   18f5e:	b021      	add	sp, #132	; 0x84
   18f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EINVAL;
   18f62:	2003      	movs	r0, #3
   18f64:	e7fb      	b.n	18f5e <ble_ibeacon_set_adv_data+0x72>

00018f66 <ble_l2cap_get_mtu>:
    return rc;
}

static uint16_t
ble_l2cap_get_mtu(struct ble_l2cap_chan *chan)
{
   18f66:	b508      	push	{r3, lr}
    if (chan->scid == BLE_L2CAP_CID_ATT) {
   18f68:	8903      	ldrh	r3, [r0, #8]
   18f6a:	2b04      	cmp	r3, #4
   18f6c:	d001      	beq.n	18f72 <ble_l2cap_get_mtu+0xc>
         * done
         */
        return ble_att_chan_mtu(chan);
    }

    return chan->my_mtu;
   18f6e:	8940      	ldrh	r0, [r0, #10]
}
   18f70:	bd08      	pop	{r3, pc}
        return ble_att_chan_mtu(chan);
   18f72:	f002 fc0f 	bl	1b794 <ble_att_chan_mtu>
   18f76:	e7fb      	b.n	18f70 <ble_l2cap_get_mtu+0xa>

00018f78 <ble_l2cap_append_rx>:
{
   18f78:	b538      	push	{r3, r4, r5, lr}
   18f7a:	4605      	mov	r5, r0
   18f7c:	460c      	mov	r4, r1
    rc = os_mbuf_appendfrom(chan->rx_buf, frag, 0, OS_MBUF_PKTLEN(frag));
   18f7e:	8a0b      	ldrh	r3, [r1, #16]
   18f80:	2200      	movs	r2, #0
   18f82:	6900      	ldr	r0, [r0, #16]
   18f84:	f7f8 f888 	bl	11098 <os_mbuf_appendfrom>
    if (rc == 0) {
   18f88:	b120      	cbz	r0, 18f94 <ble_l2cap_append_rx+0x1c>
    os_mbuf_concat(chan->rx_buf, frag);
   18f8a:	4621      	mov	r1, r4
   18f8c:	6928      	ldr	r0, [r5, #16]
   18f8e:	f7f8 fa6c 	bl	1146a <os_mbuf_concat>
}
   18f92:	bd38      	pop	{r3, r4, r5, pc}
        os_mbuf_free_chain(frag);
   18f94:	4620      	mov	r0, r4
   18f96:	f7f7 ffa1 	bl	10edc <os_mbuf_free_chain>
        return;
   18f9a:	e7fa      	b.n	18f92 <ble_l2cap_append_rx+0x1a>

00018f9c <ble_l2cap_chan_alloc>:
{
   18f9c:	b510      	push	{r4, lr}
   18f9e:	4604      	mov	r4, r0
    chan = os_memblock_get(&ble_l2cap_chan_pool);
   18fa0:	4807      	ldr	r0, [pc, #28]	; (18fc0 <ble_l2cap_chan_alloc+0x24>)
   18fa2:	f7f8 fbf0 	bl	11786 <os_memblock_get>
    if (chan == NULL) {
   18fa6:	4603      	mov	r3, r0
   18fa8:	b140      	cbz	r0, 18fbc <ble_l2cap_chan_alloc+0x20>
    memset(chan, 0, sizeof *chan);
   18faa:	2200      	movs	r2, #0
   18fac:	6002      	str	r2, [r0, #0]
   18fae:	6042      	str	r2, [r0, #4]
   18fb0:	6082      	str	r2, [r0, #8]
   18fb2:	60c2      	str	r2, [r0, #12]
   18fb4:	6102      	str	r2, [r0, #16]
   18fb6:	6142      	str	r2, [r0, #20]
   18fb8:	6182      	str	r2, [r0, #24]
    chan->conn_handle = conn_handle;
   18fba:	8084      	strh	r4, [r0, #4]
}
   18fbc:	4618      	mov	r0, r3
   18fbe:	bd10      	pop	{r4, pc}
   18fc0:	20003d7c 	.word	0x20003d7c

00018fc4 <ble_l2cap_chan_free>:
    if (chan == NULL) {
   18fc4:	b148      	cbz	r0, 18fda <ble_l2cap_chan_free+0x16>
{
   18fc6:	b510      	push	{r4, lr}
   18fc8:	4604      	mov	r4, r0
    os_mbuf_free_chain(chan->rx_buf);
   18fca:	6900      	ldr	r0, [r0, #16]
   18fcc:	f7f7 ff86 	bl	10edc <os_mbuf_free_chain>
    rc = os_memblock_put(&ble_l2cap_chan_pool, chan);
   18fd0:	4621      	mov	r1, r4
   18fd2:	4802      	ldr	r0, [pc, #8]	; (18fdc <ble_l2cap_chan_free+0x18>)
   18fd4:	f7f8 fbff 	bl	117d6 <os_memblock_put>
}
   18fd8:	bd10      	pop	{r4, pc}
   18fda:	4770      	bx	lr
   18fdc:	20003d7c 	.word	0x20003d7c

00018fe0 <ble_l2cap_is_mtu_req_sent>:
    return (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU);
   18fe0:	7b80      	ldrb	r0, [r0, #14]
}
   18fe2:	f000 0001 	and.w	r0, r0, #1
   18fe6:	4770      	bx	lr

00018fe8 <ble_l2cap_parse_hdr>:
{
   18fe8:	b538      	push	{r3, r4, r5, lr}
   18fea:	4614      	mov	r4, r2
    rc = os_mbuf_copydata(om, off, sizeof *l2cap_hdr, l2cap_hdr);
   18fec:	4613      	mov	r3, r2
   18fee:	2204      	movs	r2, #4
   18ff0:	f7f8 f87c 	bl	110ec <os_mbuf_copydata>
    if (rc != 0) {
   18ff4:	b960      	cbnz	r0, 19010 <ble_l2cap_parse_hdr+0x28>
   18ff6:	4605      	mov	r5, r0
    l2cap_hdr->len = get_le16(&l2cap_hdr->len);
   18ff8:	4620      	mov	r0, r4
   18ffa:	f005 fdb3 	bl	1eb64 <get_le16>
   18ffe:	4623      	mov	r3, r4
   19000:	f823 0b02 	strh.w	r0, [r3], #2
    l2cap_hdr->cid = get_le16(&l2cap_hdr->cid);
   19004:	4618      	mov	r0, r3
   19006:	f005 fdad 	bl	1eb64 <get_le16>
   1900a:	8060      	strh	r0, [r4, #2]
}
   1900c:	4628      	mov	r0, r5
   1900e:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   19010:	2504      	movs	r5, #4
   19012:	e7fb      	b.n	1900c <ble_l2cap_parse_hdr+0x24>

00019014 <ble_l2cap_prepend_hdr>:
{
   19014:	b530      	push	{r4, r5, lr}
   19016:	b083      	sub	sp, #12
   19018:	4604      	mov	r4, r0
   1901a:	460d      	mov	r5, r1
    put_le16(&hdr.len, len);
   1901c:	4611      	mov	r1, r2
   1901e:	a801      	add	r0, sp, #4
   19020:	f005 fd7f 	bl	1eb22 <put_le16>
    put_le16(&hdr.cid, cid);
   19024:	4629      	mov	r1, r5
   19026:	f10d 0006 	add.w	r0, sp, #6
   1902a:	f005 fd7a 	bl	1eb22 <put_le16>
    om = os_mbuf_prepend_pullup(om, sizeof hdr);
   1902e:	2104      	movs	r1, #4
   19030:	4620      	mov	r0, r4
   19032:	f7f8 faef 	bl	11614 <os_mbuf_prepend_pullup>
    if (om == NULL) {
   19036:	4603      	mov	r3, r0
   19038:	b110      	cbz	r0, 19040 <ble_l2cap_prepend_hdr+0x2c>
    memcpy(om->om_data, &hdr, sizeof hdr);
   1903a:	6802      	ldr	r2, [r0, #0]
   1903c:	9901      	ldr	r1, [sp, #4]
   1903e:	6011      	str	r1, [r2, #0]
}
   19040:	4618      	mov	r0, r3
   19042:	b003      	add	sp, #12
   19044:	bd30      	pop	{r4, r5, pc}

00019046 <ble_l2cap_get_conn_handle>:
    if (!chan) {
   19046:	b108      	cbz	r0, 1904c <ble_l2cap_get_conn_handle+0x6>
    return chan->conn_handle;
   19048:	8880      	ldrh	r0, [r0, #4]
   1904a:	4770      	bx	lr
        return BLE_HS_CONN_HANDLE_NONE;
   1904c:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   19050:	4770      	bx	lr

00019052 <ble_l2cap_remove_rx>:
{
   19052:	b538      	push	{r3, r4, r5, lr}
   19054:	460c      	mov	r4, r1
    conn->bhc_rx_chan = NULL;
   19056:	2500      	movs	r5, #0
   19058:	6305      	str	r5, [r0, #48]	; 0x30
    os_mbuf_free_chain(chan->rx_buf);
   1905a:	6908      	ldr	r0, [r1, #16]
   1905c:	f7f7 ff3e 	bl	10edc <os_mbuf_free_chain>
    chan->rx_buf = NULL;
   19060:	6125      	str	r5, [r4, #16]
    chan->rx_len = 0;
   19062:	82a5      	strh	r5, [r4, #20]
}
   19064:	bd38      	pop	{r3, r4, r5, pc}

00019066 <ble_l2cap_rx_payload>:
{
   19066:	b570      	push	{r4, r5, r6, lr}
   19068:	4605      	mov	r5, r0
   1906a:	460c      	mov	r4, r1
   1906c:	461e      	mov	r6, r3
    if (chan->rx_buf == NULL) {
   1906e:	690b      	ldr	r3, [r1, #16]
   19070:	b16b      	cbz	r3, 1908e <ble_l2cap_rx_payload+0x28>
        ble_l2cap_append_rx(chan, om);
   19072:	4611      	mov	r1, r2
   19074:	4620      	mov	r0, r4
   19076:	f7ff ff7f 	bl	18f78 <ble_l2cap_append_rx>
    len_diff = OS_MBUF_PKTLEN(chan->rx_buf) - chan->rx_len;
   1907a:	6923      	ldr	r3, [r4, #16]
   1907c:	8a18      	ldrh	r0, [r3, #16]
   1907e:	8aa3      	ldrh	r3, [r4, #20]
   19080:	1ac0      	subs	r0, r0, r3
    if (len_diff > 0) {
   19082:	2800      	cmp	r0, #0
   19084:	dc05      	bgt.n	19092 <ble_l2cap_rx_payload+0x2c>
    } else if (len_diff == 0) {
   19086:	b950      	cbnz	r0, 1909e <ble_l2cap_rx_payload+0x38>
        *out_rx_cb = chan->rx_fn;
   19088:	69a3      	ldr	r3, [r4, #24]
   1908a:	6033      	str	r3, [r6, #0]
}
   1908c:	bd70      	pop	{r4, r5, r6, pc}
        chan->rx_buf = om;
   1908e:	610a      	str	r2, [r1, #16]
   19090:	e7f3      	b.n	1907a <ble_l2cap_rx_payload+0x14>
        ble_l2cap_remove_rx(conn, chan);
   19092:	4621      	mov	r1, r4
   19094:	4628      	mov	r0, r5
   19096:	f7ff ffdc 	bl	19052 <ble_l2cap_remove_rx>
        rc = BLE_HS_EBADDATA;
   1909a:	200a      	movs	r0, #10
   1909c:	e7f6      	b.n	1908c <ble_l2cap_rx_payload+0x26>
    return os_time_get();
   1909e:	f7f9 f84d 	bl	1213c <os_time_get>
            ble_npl_time_get() + MYNEWT_VAL(BLE_L2CAP_RX_FRAG_TIMEOUT);
   190a2:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   190a6:	3030      	adds	r0, #48	; 0x30
        conn->bhc_rx_timeout =
   190a8:	6368      	str	r0, [r5, #52]	; 0x34
        ble_hs_timer_resched();
   190aa:	f7fd fd05 	bl	16ab8 <ble_hs_timer_resched>
        rc = BLE_HS_EAGAIN;
   190ae:	2001      	movs	r0, #1
    return rc;
   190b0:	e7ec      	b.n	1908c <ble_l2cap_rx_payload+0x26>

000190b2 <ble_l2cap_rx>:
ble_l2cap_rx(struct ble_hs_conn *conn,
             struct hci_data_hdr *hci_hdr,
             struct os_mbuf *om,
             ble_l2cap_rx_fn **out_rx_cb,
             int *out_reject_cid)
{
   190b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   190b6:	b082      	sub	sp, #8
   190b8:	4607      	mov	r7, r0
   190ba:	4614      	mov	r4, r2
   190bc:	4698      	mov	r8, r3
   190be:	9d08      	ldr	r5, [sp, #32]
    struct ble_l2cap_chan *chan;
    struct ble_l2cap_hdr l2cap_hdr;
    uint8_t pb;
    int rc;

    *out_reject_cid = -1;
   190c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   190c4:	602b      	str	r3, [r5, #0]

    pb = BLE_HCI_DATA_PB(hci_hdr->hdh_handle_pb_bc);
   190c6:	880b      	ldrh	r3, [r1, #0]
   190c8:	f3c3 3301 	ubfx	r3, r3, #12, #2
    switch (pb) {
   190cc:	2b01      	cmp	r3, #1
   190ce:	d02e      	beq.n	1912e <ble_l2cap_rx+0x7c>
   190d0:	2b02      	cmp	r3, #2
   190d2:	d13a      	bne.n	1914a <ble_l2cap_rx+0x98>
    case BLE_HCI_PB_FIRST_FLUSH:
        /* First fragment. */
        rc = ble_l2cap_parse_hdr(om, 0, &l2cap_hdr);
   190d4:	aa01      	add	r2, sp, #4
   190d6:	2100      	movs	r1, #0
   190d8:	4620      	mov	r0, r4
   190da:	f7ff ff85 	bl	18fe8 <ble_l2cap_parse_hdr>
        if (rc != 0) {
   190de:	4606      	mov	r6, r0
   190e0:	bba0      	cbnz	r0, 1914c <ble_l2cap_rx+0x9a>
            goto err;
        }

        /* Strip L2CAP header from the front of the mbuf. */
        os_mbuf_adj(om, BLE_L2CAP_HDR_SZ);
   190e2:	2104      	movs	r1, #4
   190e4:	4620      	mov	r0, r4
   190e6:	f7f8 f82e 	bl	11146 <os_mbuf_adj>

        chan = ble_hs_conn_chan_find_by_scid(conn, l2cap_hdr.cid);
   190ea:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   190ee:	4638      	mov	r0, r7
   190f0:	f7fe f930 	bl	17354 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   190f4:	4606      	mov	r6, r0
   190f6:	b188      	cbz	r0, 1911c <ble_l2cap_rx+0x6a>
                *out_reject_cid = l2cap_hdr.cid;
            }
            goto err;
        }

        if (chan->rx_buf != NULL) {
   190f8:	6903      	ldr	r3, [r0, #16]
   190fa:	b11b      	cbz	r3, 19104 <ble_l2cap_rx+0x52>
            /* Previous data packet never completed.  Discard old packet. */
            ble_l2cap_remove_rx(conn, chan);
   190fc:	4601      	mov	r1, r0
   190fe:	4638      	mov	r0, r7
   19100:	f7ff ffa7 	bl	19052 <ble_l2cap_remove_rx>
        }

        if (l2cap_hdr.len > ble_l2cap_get_mtu(chan)) {
   19104:	f8bd 5004 	ldrh.w	r5, [sp, #4]
   19108:	4630      	mov	r0, r6
   1910a:	f7ff ff2c 	bl	18f66 <ble_l2cap_get_mtu>
   1910e:	4285      	cmp	r5, r0
   19110:	d825      	bhi.n	1915e <ble_l2cap_rx+0xac>
            rc = BLE_HS_EBADDATA;
            goto err;
        }

        /* Remember channel and length of L2CAP data for reassembly. */
        conn->bhc_rx_chan = chan;
   19112:	633e      	str	r6, [r7, #48]	; 0x30
        chan->rx_len = l2cap_hdr.len;
   19114:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   19118:	82b3      	strh	r3, [r6, #20]
        break;
   1911a:	e00c      	b.n	19136 <ble_l2cap_rx+0x84>
            if (l2cap_hdr.cid != BLE_L2CAP_CID_BLACK_HOLE) {
   1911c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   19120:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19124:	4293      	cmp	r3, r2
   19126:	d018      	beq.n	1915a <ble_l2cap_rx+0xa8>
                *out_reject_cid = l2cap_hdr.cid;
   19128:	602b      	str	r3, [r5, #0]
            rc = BLE_HS_ENOENT;
   1912a:	2605      	movs	r6, #5
   1912c:	e00e      	b.n	1914c <ble_l2cap_rx+0x9a>

    case BLE_HCI_PB_MIDDLE:
        chan = conn->bhc_rx_chan;
   1912e:	6b06      	ldr	r6, [r0, #48]	; 0x30
        if (chan == NULL || chan->rx_buf == NULL) {
   19130:	b1be      	cbz	r6, 19162 <ble_l2cap_rx+0xb0>
   19132:	6933      	ldr	r3, [r6, #16]
   19134:	b1bb      	cbz	r3, 19166 <ble_l2cap_rx+0xb4>
    default:
        rc = BLE_HS_EBADDATA;
        goto err;
    }

    rc = ble_l2cap_rx_payload(conn, chan, om, out_rx_cb);
   19136:	4643      	mov	r3, r8
   19138:	4622      	mov	r2, r4
   1913a:	4631      	mov	r1, r6
   1913c:	4638      	mov	r0, r7
   1913e:	f7ff ff92 	bl	19066 <ble_l2cap_rx_payload>
    om = NULL;
    if (rc != 0) {
   19142:	4606      	mov	r6, r0
   19144:	b128      	cbz	r0, 19152 <ble_l2cap_rx+0xa0>
    om = NULL;
   19146:	2400      	movs	r4, #0
        goto err;
    }

    return 0;

err:
   19148:	e000      	b.n	1914c <ble_l2cap_rx+0x9a>
        rc = BLE_HS_EBADDATA;
   1914a:	260a      	movs	r6, #10
    os_mbuf_free_chain(om);
   1914c:	4620      	mov	r0, r4
   1914e:	f7f7 fec5 	bl	10edc <os_mbuf_free_chain>
    return rc;
}
   19152:	4630      	mov	r0, r6
   19154:	b002      	add	sp, #8
   19156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOENT;
   1915a:	2605      	movs	r6, #5
   1915c:	e7f6      	b.n	1914c <ble_l2cap_rx+0x9a>
            rc = BLE_HS_EBADDATA;
   1915e:	260a      	movs	r6, #10
   19160:	e7f4      	b.n	1914c <ble_l2cap_rx+0x9a>
            rc = BLE_HS_EBADDATA;
   19162:	260a      	movs	r6, #10
   19164:	e7f2      	b.n	1914c <ble_l2cap_rx+0x9a>
   19166:	260a      	movs	r6, #10
   19168:	e7f0      	b.n	1914c <ble_l2cap_rx+0x9a>

0001916a <ble_l2cap_tx>:
 * @return                      0 on success; nonzero on error.
 */
int
ble_l2cap_tx(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan,
             struct os_mbuf *txom)
{
   1916a:	b510      	push	{r4, lr}
   1916c:	b082      	sub	sp, #8
   1916e:	4604      	mov	r4, r0
   19170:	9201      	str	r2, [sp, #4]
    int rc;

    txom = ble_l2cap_prepend_hdr(txom, chan->dcid, OS_MBUF_PKTLEN(txom));
   19172:	4610      	mov	r0, r2
   19174:	8a12      	ldrh	r2, [r2, #16]
   19176:	88c9      	ldrh	r1, [r1, #6]
   19178:	f7ff ff4c 	bl	19014 <ble_l2cap_prepend_hdr>
   1917c:	9001      	str	r0, [sp, #4]
    if (txom == NULL) {
   1917e:	b188      	cbz	r0, 191a4 <ble_l2cap_tx+0x3a>
        return BLE_HS_ENOMEM;
    }

    rc = ble_hs_hci_acl_tx(conn, &txom);
   19180:	a901      	add	r1, sp, #4
   19182:	4620      	mov	r0, r4
   19184:	f7fe fc56 	bl	17a34 <ble_hs_hci_acl_tx>
    switch (rc) {
   19188:	2801      	cmp	r0, #1
   1918a:	d001      	beq.n	19190 <ble_l2cap_tx+0x26>

    default:
        /* Error. */
        return rc;
    }
}
   1918c:	b002      	add	sp, #8
   1918e:	bd10      	pop	{r4, pc}
        STAILQ_INSERT_TAIL(&conn->bhc_tx_q, OS_MBUF_PKTHDR(txom), omp_next);
   19190:	9b01      	ldr	r3, [sp, #4]
   19192:	2000      	movs	r0, #0
   19194:	6158      	str	r0, [r3, #20]
   19196:	6c22      	ldr	r2, [r4, #64]	; 0x40
   19198:	3310      	adds	r3, #16
   1919a:	6013      	str	r3, [r2, #0]
   1919c:	9b01      	ldr	r3, [sp, #4]
   1919e:	3314      	adds	r3, #20
   191a0:	6423      	str	r3, [r4, #64]	; 0x40
        return 0;
   191a2:	e7f3      	b.n	1918c <ble_l2cap_tx+0x22>
        return BLE_HS_ENOMEM;
   191a4:	2006      	movs	r0, #6
   191a6:	e7f1      	b.n	1918c <ble_l2cap_tx+0x22>

000191a8 <ble_l2cap_init>:

int
ble_l2cap_init(void)
{
   191a8:	b500      	push	{lr}
   191aa:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_l2cap_chan_pool,
   191ac:	4b0a      	ldr	r3, [pc, #40]	; (191d8 <ble_l2cap_init+0x30>)
   191ae:	9300      	str	r3, [sp, #0]
   191b0:	4b0a      	ldr	r3, [pc, #40]	; (191dc <ble_l2cap_init+0x34>)
   191b2:	221c      	movs	r2, #28
   191b4:	2103      	movs	r1, #3
   191b6:	480a      	ldr	r0, [pc, #40]	; (191e0 <ble_l2cap_init+0x38>)
   191b8:	f7f8 faa0 	bl	116fc <os_mempool_init>
                         MYNEWT_VAL(BLE_L2CAP_MAX_CHANS) +
                         MYNEWT_VAL(BLE_L2CAP_COC_MAX_NUM),
                         sizeof (struct ble_l2cap_chan),
                         ble_l2cap_chan_mem, "ble_l2cap_chan_pool");
    if (rc != 0) {
   191bc:	b938      	cbnz	r0, 191ce <ble_l2cap_init+0x26>
        return BLE_HS_EOS;
    }

    rc = ble_l2cap_sig_init();
   191be:	f000 fa29 	bl	19614 <ble_l2cap_sig_init>
    if (rc != 0) {
   191c2:	4603      	mov	r3, r0
   191c4:	b920      	cbnz	r0, 191d0 <ble_l2cap_init+0x28>
    rc = ble_l2cap_coc_init();
    if (rc != 0) {
        return rc;
    }

    rc = ble_sm_init();
   191c6:	f001 fef5 	bl	1afb4 <ble_sm_init>
   191ca:	4603      	mov	r3, r0
   191cc:	e000      	b.n	191d0 <ble_l2cap_init+0x28>
        return BLE_HS_EOS;
   191ce:	230b      	movs	r3, #11
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   191d0:	4618      	mov	r0, r3
   191d2:	b003      	add	sp, #12
   191d4:	f85d fb04 	ldr.w	pc, [sp], #4
   191d8:	0002c4b4 	.word	0x0002c4b4
   191dc:	20002a94 	.word	0x20002a94
   191e0:	20003d7c 	.word	0x20003d7c

000191e4 <ble_l2cap_sig_next_id>:
 *****************************************************************************/

static uint8_t
ble_l2cap_sig_next_id(void)
{
    ble_l2cap_sig_cur_id++;
   191e4:	4a05      	ldr	r2, [pc, #20]	; (191fc <ble_l2cap_sig_next_id+0x18>)
   191e6:	7813      	ldrb	r3, [r2, #0]
   191e8:	3301      	adds	r3, #1
   191ea:	b2db      	uxtb	r3, r3
   191ec:	7013      	strb	r3, [r2, #0]
    if (ble_l2cap_sig_cur_id == 0) {
   191ee:	b913      	cbnz	r3, 191f6 <ble_l2cap_sig_next_id+0x12>
        /* An ID of 0 is illegal. */
        ble_l2cap_sig_cur_id = 1;
   191f0:	4613      	mov	r3, r2
   191f2:	2201      	movs	r2, #1
   191f4:	701a      	strb	r2, [r3, #0]
    }

    return ble_l2cap_sig_cur_id;
}
   191f6:	4b01      	ldr	r3, [pc, #4]	; (191fc <ble_l2cap_sig_next_id+0x18>)
   191f8:	7818      	ldrb	r0, [r3, #0]
   191fa:	4770      	bx	lr
   191fc:	20002ae8 	.word	0x20002ae8

00019200 <ble_l2cap_sig_dispatch_get>:

static ble_l2cap_sig_rx_fn *
ble_l2cap_sig_dispatch_get(uint8_t op)
{
    if (op >= BLE_L2CAP_SIG_OP_MAX) {
   19200:	2816      	cmp	r0, #22
   19202:	d803      	bhi.n	1920c <ble_l2cap_sig_dispatch_get+0xc>
        return NULL;
    }

    return ble_l2cap_sig_dispatch[op];
   19204:	4b02      	ldr	r3, [pc, #8]	; (19210 <ble_l2cap_sig_dispatch_get+0x10>)
   19206:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1920a:	4770      	bx	lr
        return NULL;
   1920c:	2000      	movs	r0, #0
}
   1920e:	4770      	bx	lr
   19210:	0002c4c8 	.word	0x0002c4c8

00019214 <ble_l2cap_sig_proc_matches>:
 * @return                      1 if the proc matches; 0 otherwise.
 */
static int
ble_l2cap_sig_proc_matches(struct ble_l2cap_sig_proc *proc,
                           uint16_t conn_handle, uint8_t op, uint8_t id)
{
   19214:	b410      	push	{r4}
    if (conn_handle != proc->conn_handle) {
   19216:	8904      	ldrh	r4, [r0, #8]
   19218:	428c      	cmp	r4, r1
   1921a:	d003      	beq.n	19224 <ble_l2cap_sig_proc_matches+0x10>
        return 0;
   1921c:	2000      	movs	r0, #0
    if (id != 0 && id != proc->id) {
        return 0;
    }

    return 1;
}
   1921e:	f85d 4b04 	ldr.w	r4, [sp], #4
   19222:	4770      	bx	lr
    if (op != proc->op) {
   19224:	7a81      	ldrb	r1, [r0, #10]
   19226:	4291      	cmp	r1, r2
   19228:	d001      	beq.n	1922e <ble_l2cap_sig_proc_matches+0x1a>
        return 0;
   1922a:	2000      	movs	r0, #0
   1922c:	e7f7      	b.n	1921e <ble_l2cap_sig_proc_matches+0xa>
    if (id != 0 && id != proc->id) {
   1922e:	b133      	cbz	r3, 1923e <ble_l2cap_sig_proc_matches+0x2a>
   19230:	7ac2      	ldrb	r2, [r0, #11]
   19232:	429a      	cmp	r2, r3
   19234:	d001      	beq.n	1923a <ble_l2cap_sig_proc_matches+0x26>
        return 0;
   19236:	2000      	movs	r0, #0
   19238:	e7f1      	b.n	1921e <ble_l2cap_sig_proc_matches+0xa>
    return 1;
   1923a:	2001      	movs	r0, #1
   1923c:	e7ef      	b.n	1921e <ble_l2cap_sig_proc_matches+0xa>
   1923e:	2001      	movs	r0, #1
   19240:	e7ed      	b.n	1921e <ble_l2cap_sig_proc_matches+0xa>

00019242 <ble_l2cap_sig_rx_noop>:
ble_l2cap_sig_rx_noop(uint16_t conn_handle,
                      struct ble_l2cap_sig_hdr *hdr,
                      struct os_mbuf **om)
{
    return BLE_HS_ENOTSUP;
}
   19242:	2008      	movs	r0, #8
   19244:	4770      	bx	lr

00019246 <ble_l2cap_sig_update_call_cb>:
 * $update                                                                   *
 *****************************************************************************/

static void
ble_l2cap_sig_update_call_cb(struct ble_l2cap_sig_proc *proc, int status)
{
   19246:	b508      	push	{r3, lr}

    if (status != 0) {
        STATS_INC(ble_l2cap_stats, update_fail);
    }

    if (proc->update.cb != NULL) {
   19248:	68c3      	ldr	r3, [r0, #12]
   1924a:	b113      	cbz	r3, 19252 <ble_l2cap_sig_update_call_cb+0xc>
        proc->update.cb(proc->conn_handle, status, proc->update.cb_arg);
   1924c:	6902      	ldr	r2, [r0, #16]
   1924e:	8900      	ldrh	r0, [r0, #8]
   19250:	4798      	blx	r3
    }
}
   19252:	bd08      	pop	{r3, pc}

00019254 <ble_l2cap_sig_proc_insert>:
{
   19254:	b510      	push	{r4, lr}
   19256:	4604      	mov	r4, r0
    ble_hs_lock();
   19258:	f7fd fb50 	bl	168fc <ble_hs_lock>
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   1925c:	4b05      	ldr	r3, [pc, #20]	; (19274 <ble_l2cap_sig_proc_insert+0x20>)
   1925e:	681b      	ldr	r3, [r3, #0]
   19260:	6023      	str	r3, [r4, #0]
   19262:	b123      	cbz	r3, 1926e <ble_l2cap_sig_proc_insert+0x1a>
   19264:	4b03      	ldr	r3, [pc, #12]	; (19274 <ble_l2cap_sig_proc_insert+0x20>)
   19266:	601c      	str	r4, [r3, #0]
    ble_hs_unlock();
   19268:	f7fd fb4c 	bl	16904 <ble_hs_unlock>
}
   1926c:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   1926e:	4b01      	ldr	r3, [pc, #4]	; (19274 <ble_l2cap_sig_proc_insert+0x20>)
   19270:	605c      	str	r4, [r3, #4]
   19272:	e7f7      	b.n	19264 <ble_l2cap_sig_proc_insert+0x10>
   19274:	20002b1c 	.word	0x20002b1c

00019278 <ble_l2cap_sig_proc_extract>:
{
   19278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1927c:	4607      	mov	r7, r0
   1927e:	460e      	mov	r6, r1
   19280:	4615      	mov	r5, r2
    ble_hs_lock();
   19282:	f7fd fb3b 	bl	168fc <ble_hs_lock>
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   19286:	4b0d      	ldr	r3, [pc, #52]	; (192bc <ble_l2cap_sig_proc_extract+0x44>)
   19288:	f8d3 8000 	ldr.w	r8, [r3]
   1928c:	4644      	mov	r4, r8
   1928e:	b16c      	cbz	r4, 192ac <ble_l2cap_sig_proc_extract+0x34>
        if (ble_l2cap_sig_proc_matches(proc, conn_handle, op, identifier)) {
   19290:	462b      	mov	r3, r5
   19292:	4632      	mov	r2, r6
   19294:	4639      	mov	r1, r7
   19296:	4620      	mov	r0, r4
   19298:	f7ff ffbc 	bl	19214 <ble_l2cap_sig_proc_matches>
   1929c:	b908      	cbnz	r0, 192a2 <ble_l2cap_sig_proc_extract+0x2a>
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   1929e:	6824      	ldr	r4, [r4, #0]
   192a0:	e7f5      	b.n	1928e <ble_l2cap_sig_proc_extract+0x16>
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   192a2:	f8d8 3000 	ldr.w	r3, [r8]
   192a6:	4a05      	ldr	r2, [pc, #20]	; (192bc <ble_l2cap_sig_proc_extract+0x44>)
   192a8:	6013      	str	r3, [r2, #0]
   192aa:	b123      	cbz	r3, 192b6 <ble_l2cap_sig_proc_extract+0x3e>
    ble_hs_unlock();
   192ac:	f7fd fb2a 	bl	16904 <ble_hs_unlock>
}
   192b0:	4620      	mov	r0, r4
   192b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   192b6:	4613      	mov	r3, r2
   192b8:	605a      	str	r2, [r3, #4]
   192ba:	e7f7      	b.n	192ac <ble_l2cap_sig_proc_extract+0x34>
   192bc:	20002b1c 	.word	0x20002b1c

000192c0 <ble_l2cap_sig_proc_alloc>:
{
   192c0:	b508      	push	{r3, lr}
    proc = os_memblock_get(&ble_l2cap_sig_proc_pool);
   192c2:	4806      	ldr	r0, [pc, #24]	; (192dc <ble_l2cap_sig_proc_alloc+0x1c>)
   192c4:	f7f8 fa5f 	bl	11786 <os_memblock_get>
    if (proc != NULL) {
   192c8:	4603      	mov	r3, r0
   192ca:	b128      	cbz	r0, 192d8 <ble_l2cap_sig_proc_alloc+0x18>
        memset(proc, 0, sizeof *proc);
   192cc:	2200      	movs	r2, #0
   192ce:	6002      	str	r2, [r0, #0]
   192d0:	6042      	str	r2, [r0, #4]
   192d2:	6082      	str	r2, [r0, #8]
   192d4:	60c2      	str	r2, [r0, #12]
   192d6:	6102      	str	r2, [r0, #16]
}
   192d8:	4618      	mov	r0, r3
   192da:	bd08      	pop	{r3, pc}
   192dc:	20002b00 	.word	0x20002b00

000192e0 <ble_l2cap_sig_proc_set_timer>:
{
   192e0:	b510      	push	{r4, lr}
   192e2:	4604      	mov	r4, r0
   192e4:	f7f8 ff2a 	bl	1213c <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   192e8:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   192ec:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   192ee:	f7fd fbe3 	bl	16ab8 <ble_hs_timer_resched>
}
   192f2:	bd10      	pop	{r4, pc}

000192f4 <ble_l2cap_sig_extract_expired>:
 * @return                      The number of ticks until the next expiration
 *                                  occurs.
 */
static int32_t
ble_l2cap_sig_extract_expired(struct ble_l2cap_sig_proc_list *dst_list)
{
   192f4:	b570      	push	{r4, r5, r6, lr}
   192f6:	4604      	mov	r4, r0
   192f8:	f7f8 ff20 	bl	1213c <os_time_get>
   192fc:	4606      	mov	r6, r0
    ble_npl_time_t now;
    ble_npl_stime_t next_exp_in;
    ble_npl_stime_t time_diff;

    now = ble_npl_time_get();
    STAILQ_INIT(dst_list);
   192fe:	2300      	movs	r3, #0
   19300:	6023      	str	r3, [r4, #0]
   19302:	6064      	str	r4, [r4, #4]

    /* Assume each event is either expired or has infinite duration. */
    next_exp_in = BLE_HS_FOREVER;

    ble_hs_lock();
   19304:	f7fd fafa 	bl	168fc <ble_hs_lock>

    prev = NULL;
    proc = STAILQ_FIRST(&ble_l2cap_sig_procs);
   19308:	4b10      	ldr	r3, [pc, #64]	; (1934c <ble_l2cap_sig_extract_expired+0x58>)
   1930a:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   1930c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    while (proc != NULL) {
   19310:	e00a      	b.n	19328 <ble_l2cap_sig_extract_expired+0x34>

        time_diff = proc->exp_os_ticks - now;
        if (time_diff <= 0) {
            /* Procedure has expired; move it to the destination list. */
            if (prev == NULL) {
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   19312:	480e      	ldr	r0, [pc, #56]	; (1934c <ble_l2cap_sig_extract_expired+0x58>)
   19314:	6802      	ldr	r2, [r0, #0]
   19316:	6812      	ldr	r2, [r2, #0]
   19318:	6002      	str	r2, [r0, #0]
   1931a:	b17a      	cbz	r2, 1933c <ble_l2cap_sig_extract_expired+0x48>
            } else {
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
            }
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   1931c:	2200      	movs	r2, #0
   1931e:	601a      	str	r2, [r3, #0]
   19320:	6862      	ldr	r2, [r4, #4]
   19322:	6013      	str	r3, [r2, #0]
   19324:	6063      	str	r3, [r4, #4]
        } else {
            if (time_diff < next_exp_in) {
                next_exp_in = time_diff;
   19326:	460b      	mov	r3, r1
    while (proc != NULL) {
   19328:	b15b      	cbz	r3, 19342 <ble_l2cap_sig_extract_expired+0x4e>
        next = STAILQ_NEXT(proc, next);
   1932a:	6819      	ldr	r1, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   1932c:	685a      	ldr	r2, [r3, #4]
   1932e:	1b92      	subs	r2, r2, r6
        if (time_diff <= 0) {
   19330:	2a00      	cmp	r2, #0
   19332:	ddee      	ble.n	19312 <ble_l2cap_sig_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   19334:	4295      	cmp	r5, r2
   19336:	ddf6      	ble.n	19326 <ble_l2cap_sig_extract_expired+0x32>
                next_exp_in = time_diff;
   19338:	4615      	mov	r5, r2
   1933a:	e7f4      	b.n	19326 <ble_l2cap_sig_extract_expired+0x32>
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   1933c:	4602      	mov	r2, r0
   1933e:	6050      	str	r0, [r2, #4]
   19340:	e7ec      	b.n	1931c <ble_l2cap_sig_extract_expired+0x28>
        }

        proc = next;
    }

    ble_hs_unlock();
   19342:	f7fd fadf 	bl	16904 <ble_hs_unlock>

    return next_exp_in;
}
   19346:	4628      	mov	r0, r5
   19348:	bd70      	pop	{r4, r5, r6, pc}
   1934a:	bf00      	nop
   1934c:	20002b1c 	.word	0x20002b1c

00019350 <ble_l2cap_sig_proc_free>:
    if (proc != NULL) {
   19350:	b128      	cbz	r0, 1935e <ble_l2cap_sig_proc_free+0xe>
{
   19352:	b508      	push	{r3, lr}
   19354:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_l2cap_sig_proc_pool, proc);
   19356:	4802      	ldr	r0, [pc, #8]	; (19360 <ble_l2cap_sig_proc_free+0x10>)
   19358:	f7f8 fa3d 	bl	117d6 <os_memblock_put>
}
   1935c:	bd08      	pop	{r3, pc}
   1935e:	4770      	bx	lr
   19360:	20002b00 	.word	0x20002b00

00019364 <ble_l2cap_sig_process_status>:
{
   19364:	b510      	push	{r4, lr}
   19366:	4604      	mov	r4, r0
    if (status == 0) {
   19368:	b111      	cbz	r1, 19370 <ble_l2cap_sig_process_status+0xc>
        ble_l2cap_sig_proc_free(proc);
   1936a:	f7ff fff1 	bl	19350 <ble_l2cap_sig_proc_free>
}
   1936e:	bd10      	pop	{r4, pc}
        ble_l2cap_sig_proc_set_timer(proc);
   19370:	f7ff ffb6 	bl	192e0 <ble_l2cap_sig_proc_set_timer>
        ble_l2cap_sig_proc_insert(proc);
   19374:	4620      	mov	r0, r4
   19376:	f7ff ff6d 	bl	19254 <ble_l2cap_sig_proc_insert>
   1937a:	e7f8      	b.n	1936e <ble_l2cap_sig_process_status+0xa>

0001937c <ble_l2cap_sig_rx_reject>:
{
   1937c:	b508      	push	{r3, lr}
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   1937e:	784a      	ldrb	r2, [r1, #1]
   19380:	2101      	movs	r1, #1
   19382:	f7ff ff79 	bl	19278 <ble_l2cap_sig_proc_extract>
   if (!proc) {
   19386:	b108      	cbz	r0, 1938c <ble_l2cap_sig_rx_reject+0x10>
   ble_l2cap_sig_proc_free(proc);
   19388:	f7ff ffe2 	bl	19350 <ble_l2cap_sig_proc_free>
}
   1938c:	2000      	movs	r0, #0
   1938e:	bd08      	pop	{r3, pc}

00019390 <ble_l2cap_sig_update_rsp_rx>:
{
   19390:	b570      	push	{r4, r5, r6, lr}
   19392:	4616      	mov	r6, r2
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   19394:	784a      	ldrb	r2, [r1, #1]
   19396:	2100      	movs	r1, #0
   19398:	f7ff ff6e 	bl	19278 <ble_l2cap_sig_proc_extract>
    if (proc == NULL) {
   1939c:	b1d8      	cbz	r0, 193d6 <ble_l2cap_sig_update_rsp_rx+0x46>
   1939e:	4605      	mov	r5, r0
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_RSP_SZ);
   193a0:	2102      	movs	r1, #2
   193a2:	4630      	mov	r0, r6
   193a4:	f7ff fa4a 	bl	1883c <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   193a8:	4604      	mov	r4, r0
   193aa:	b948      	cbnz	r0, 193c0 <ble_l2cap_sig_update_rsp_rx+0x30>
    rsp = (struct ble_l2cap_sig_update_rsp *)(*om)->om_data;
   193ac:	6833      	ldr	r3, [r6, #0]
   193ae:	681b      	ldr	r3, [r3, #0]
    switch (le16toh(rsp->result)) {
   193b0:	881b      	ldrh	r3, [r3, #0]
   193b2:	b11b      	cbz	r3, 193bc <ble_l2cap_sig_update_rsp_rx+0x2c>
   193b4:	2b01      	cmp	r3, #1
   193b6:	d00c      	beq.n	193d2 <ble_l2cap_sig_update_rsp_rx+0x42>
        cb_status = BLE_HS_EBADDATA;
   193b8:	210a      	movs	r1, #10
        break;
   193ba:	e002      	b.n	193c2 <ble_l2cap_sig_update_rsp_rx+0x32>
        cb_status = 0;
   193bc:	4601      	mov	r1, r0
   193be:	e000      	b.n	193c2 <ble_l2cap_sig_update_rsp_rx+0x32>
        cb_status = rc;
   193c0:	4601      	mov	r1, r0
    ble_l2cap_sig_update_call_cb(proc, cb_status);
   193c2:	4628      	mov	r0, r5
   193c4:	f7ff ff3f 	bl	19246 <ble_l2cap_sig_update_call_cb>
    ble_l2cap_sig_proc_free(proc);
   193c8:	4628      	mov	r0, r5
   193ca:	f7ff ffc1 	bl	19350 <ble_l2cap_sig_proc_free>
}
   193ce:	4620      	mov	r0, r4
   193d0:	bd70      	pop	{r4, r5, r6, pc}
        cb_status = BLE_HS_EREJECT;
   193d2:	2110      	movs	r1, #16
   193d4:	e7f5      	b.n	193c2 <ble_l2cap_sig_update_rsp_rx+0x32>
        return 0;
   193d6:	2400      	movs	r4, #0
   193d8:	e7f9      	b.n	193ce <ble_l2cap_sig_update_rsp_rx+0x3e>

000193da <ble_l2cap_sig_rx>:
{
   193da:	b5f0      	push	{r4, r5, r6, r7, lr}
   193dc:	b085      	sub	sp, #20
   193de:	4604      	mov	r4, r0
    conn_handle = chan->conn_handle;
   193e0:	8887      	ldrh	r7, [r0, #4]
    om = &chan->rx_buf;
   193e2:	f100 0610 	add.w	r6, r0, #16
    ble_hs_log_mbuf(*om);
   193e6:	6900      	ldr	r0, [r0, #16]
   193e8:	f7ff f9d8 	bl	1879c <ble_hs_log_mbuf>
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_HDR_SZ);
   193ec:	2104      	movs	r1, #4
   193ee:	4630      	mov	r0, r6
   193f0:	f7ff fa24 	bl	1883c <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   193f4:	4605      	mov	r5, r0
   193f6:	b110      	cbz	r0, 193fe <ble_l2cap_sig_rx+0x24>
}
   193f8:	4628      	mov	r0, r5
   193fa:	b005      	add	sp, #20
   193fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_l2cap_sig_hdr_parse((*om)->om_data, (*om)->om_len, &hdr);
   193fe:	6923      	ldr	r3, [r4, #16]
   19400:	aa03      	add	r2, sp, #12
   19402:	88d9      	ldrh	r1, [r3, #6]
   19404:	6818      	ldr	r0, [r3, #0]
   19406:	f000 f936 	bl	19676 <ble_l2cap_sig_hdr_parse>
    os_mbuf_adj(*om, BLE_L2CAP_SIG_HDR_SZ);
   1940a:	2104      	movs	r1, #4
   1940c:	6920      	ldr	r0, [r4, #16]
   1940e:	f7f7 fe9a 	bl	11146 <os_mbuf_adj>
    if (OS_MBUF_PKTLEN(*om) != hdr.length) {
   19412:	6923      	ldr	r3, [r4, #16]
   19414:	8a1a      	ldrh	r2, [r3, #16]
   19416:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1941a:	429a      	cmp	r2, r3
   1941c:	d117      	bne.n	1944e <ble_l2cap_sig_rx+0x74>
    rx_cb = ble_l2cap_sig_dispatch_get(hdr.op);
   1941e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   19422:	f7ff feed 	bl	19200 <ble_l2cap_sig_dispatch_get>
    if (rx_cb == NULL) {
   19426:	4603      	mov	r3, r0
   19428:	b178      	cbz	r0, 1944a <ble_l2cap_sig_rx+0x70>
        rc = rx_cb(conn_handle, &hdr, om);
   1942a:	4632      	mov	r2, r6
   1942c:	a903      	add	r1, sp, #12
   1942e:	4638      	mov	r0, r7
   19430:	4798      	blx	r3
    if (rc) {
   19432:	4605      	mov	r5, r0
   19434:	2800      	cmp	r0, #0
   19436:	d0df      	beq.n	193f8 <ble_l2cap_sig_rx+0x1e>
        ble_l2cap_sig_reject_tx(conn_handle, hdr.identifier,
   19438:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1943c:	2200      	movs	r2, #0
   1943e:	9200      	str	r2, [sp, #0]
   19440:	4613      	mov	r3, r2
   19442:	4638      	mov	r0, r7
   19444:	f000 f93e 	bl	196c4 <ble_l2cap_sig_reject_tx>
   19448:	e7d6      	b.n	193f8 <ble_l2cap_sig_rx+0x1e>
        rc = BLE_HS_EREJECT;
   1944a:	2510      	movs	r5, #16
   1944c:	e7f4      	b.n	19438 <ble_l2cap_sig_rx+0x5e>
        return BLE_HS_EBADDATA;
   1944e:	250a      	movs	r5, #10
   19450:	e7d2      	b.n	193f8 <ble_l2cap_sig_rx+0x1e>

00019452 <ble_l2cap_sig_update_req_rx>:
{
   19452:	b5f0      	push	{r4, r5, r6, r7, lr}
   19454:	b087      	sub	sp, #28
   19456:	4606      	mov	r6, r0
   19458:	460f      	mov	r7, r1
   1945a:	4615      	mov	r5, r2
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_REQ_SZ);
   1945c:	2108      	movs	r1, #8
   1945e:	4610      	mov	r0, r2
   19460:	f7ff f9ec 	bl	1883c <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   19464:	4604      	mov	r4, r0
   19466:	b110      	cbz	r0, 1946e <ble_l2cap_sig_update_req_rx+0x1c>
}
   19468:	4620      	mov	r0, r4
   1946a:	b007      	add	sp, #28
   1946c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = ble_hs_atomic_conn_flags(conn_handle, &conn_flags);
   1946e:	f10d 0107 	add.w	r1, sp, #7
   19472:	4630      	mov	r0, r6
   19474:	f7fd ff31 	bl	172da <ble_hs_atomic_conn_flags>
    if (rc != 0) {
   19478:	4604      	mov	r4, r0
   1947a:	2800      	cmp	r0, #0
   1947c:	d1f4      	bne.n	19468 <ble_l2cap_sig_update_req_rx+0x16>
    sig_err = !(conn_flags & BLE_HS_CONN_F_MASTER);
   1947e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (sig_err) {
   19482:	f013 0f01 	tst.w	r3, #1
   19486:	d032      	beq.n	194ee <ble_l2cap_sig_update_req_rx+0x9c>
    req = (struct ble_l2cap_sig_update_req *)(*om)->om_data;
   19488:	682b      	ldr	r3, [r5, #0]
   1948a:	681b      	ldr	r3, [r3, #0]
    params.itvl_min = le16toh(req->itvl_min);
   1948c:	881a      	ldrh	r2, [r3, #0]
   1948e:	f8ad 2008 	strh.w	r2, [sp, #8]
    params.itvl_max = le16toh(req->itvl_max);
   19492:	885a      	ldrh	r2, [r3, #2]
   19494:	f8ad 200a 	strh.w	r2, [sp, #10]
    params.latency = le16toh(req->slave_latency);
   19498:	889a      	ldrh	r2, [r3, #4]
   1949a:	f8ad 200c 	strh.w	r2, [sp, #12]
    params.supervision_timeout = le16toh(req->timeout_multiplier);
   1949e:	88db      	ldrh	r3, [r3, #6]
   194a0:	f8ad 300e 	strh.w	r3, [sp, #14]
    params.min_ce_len = BLE_GAP_INITIAL_CONN_MIN_CE_LEN;
   194a4:	2310      	movs	r3, #16
   194a6:	f8ad 3010 	strh.w	r3, [sp, #16]
    params.max_ce_len = BLE_GAP_INITIAL_CONN_MAX_CE_LEN;
   194aa:	f44f 7340 	mov.w	r3, #768	; 0x300
   194ae:	f8ad 3012 	strh.w	r3, [sp, #18]
    rc = ble_gap_rx_l2cap_update_req(conn_handle, &params);
   194b2:	a902      	add	r1, sp, #8
   194b4:	4630      	mov	r0, r6
   194b6:	f7fa f95e 	bl	13776 <ble_gap_rx_l2cap_update_req>
    if (rc == 0) {
   194ba:	4603      	mov	r3, r0
   194bc:	b178      	cbz	r0, 194de <ble_l2cap_sig_update_req_rx+0x8c>
    if (rc == 0) {
   194be:	b9a3      	cbnz	r3, 194ea <ble_l2cap_sig_update_req_rx+0x98>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_ACCEPT;
   194c0:	2500      	movs	r5, #0
    rsp = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_RSP, hdr->identifier,
   194c2:	ab05      	add	r3, sp, #20
   194c4:	2202      	movs	r2, #2
   194c6:	7879      	ldrb	r1, [r7, #1]
   194c8:	2013      	movs	r0, #19
   194ca:	f000 f8db 	bl	19684 <ble_l2cap_sig_cmd_get>
    if (!rsp) {
   194ce:	2800      	cmp	r0, #0
   194d0:	d0ca      	beq.n	19468 <ble_l2cap_sig_update_req_rx+0x16>
    rsp->result = htole16(l2cap_result);
   194d2:	8005      	strh	r5, [r0, #0]
    ble_l2cap_sig_tx(conn_handle, txom);
   194d4:	9905      	ldr	r1, [sp, #20]
   194d6:	4630      	mov	r0, r6
   194d8:	f000 f8b6 	bl	19648 <ble_l2cap_sig_tx>
    return 0;
   194dc:	e7c4      	b.n	19468 <ble_l2cap_sig_update_req_rx+0x16>
        rc = ble_gap_update_params(conn_handle, &params);
   194de:	a902      	add	r1, sp, #8
   194e0:	4630      	mov	r0, r6
   194e2:	f7fa fcef 	bl	13ec4 <ble_gap_update_params>
   194e6:	4603      	mov	r3, r0
   194e8:	e7e9      	b.n	194be <ble_l2cap_sig_update_req_rx+0x6c>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_REJECT;
   194ea:	2501      	movs	r5, #1
   194ec:	e7e9      	b.n	194c2 <ble_l2cap_sig_update_req_rx+0x70>
        return BLE_HS_EREJECT;
   194ee:	2410      	movs	r4, #16
   194f0:	e7ba      	b.n	19468 <ble_l2cap_sig_update_req_rx+0x16>

000194f2 <ble_l2cap_sig_update>:
{
   194f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194f6:	b084      	sub	sp, #16
   194f8:	4605      	mov	r5, r0
   194fa:	460e      	mov	r6, r1
   194fc:	4690      	mov	r8, r2
   194fe:	461f      	mov	r7, r3
    ble_hs_lock();
   19500:	f7fd f9fc 	bl	168fc <ble_hs_lock>
    ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   19504:	ab02      	add	r3, sp, #8
   19506:	aa01      	add	r2, sp, #4
   19508:	2105      	movs	r1, #5
   1950a:	4628      	mov	r0, r5
   1950c:	f7ff f9d0 	bl	188b0 <ble_hs_misc_conn_chan_find_reqd>
    master = conn->bhc_flags & BLE_HS_CONN_F_MASTER;
   19510:	9b01      	ldr	r3, [sp, #4]
   19512:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    ble_hs_unlock();
   19516:	f7fd f9f5 	bl	16904 <ble_hs_unlock>
    if (master) {
   1951a:	f014 0f01 	tst.w	r4, #1
   1951e:	d121      	bne.n	19564 <ble_l2cap_sig_update+0x72>
    proc = ble_l2cap_sig_proc_alloc();
   19520:	f7ff fece 	bl	192c0 <ble_l2cap_sig_proc_alloc>
    if (proc == NULL) {
   19524:	4604      	mov	r4, r0
   19526:	b338      	cbz	r0, 19578 <ble_l2cap_sig_update+0x86>
    proc->op = BLE_L2CAP_SIG_PROC_OP_UPDATE;
   19528:	2300      	movs	r3, #0
   1952a:	7283      	strb	r3, [r0, #10]
    proc->id = ble_l2cap_sig_next_id();
   1952c:	f7ff fe5a 	bl	191e4 <ble_l2cap_sig_next_id>
   19530:	4601      	mov	r1, r0
   19532:	72e0      	strb	r0, [r4, #11]
    proc->conn_handle = conn_handle;
   19534:	8125      	strh	r5, [r4, #8]
    proc->update.cb = cb;
   19536:	f8c4 800c 	str.w	r8, [r4, #12]
    proc->update.cb_arg = cb_arg;
   1953a:	6127      	str	r7, [r4, #16]
    req = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_REQ, proc->id,
   1953c:	ab03      	add	r3, sp, #12
   1953e:	2208      	movs	r2, #8
   19540:	2012      	movs	r0, #18
   19542:	f000 f89f 	bl	19684 <ble_l2cap_sig_cmd_get>
    if (!req) {
   19546:	b1c8      	cbz	r0, 1957c <ble_l2cap_sig_update+0x8a>
    req->itvl_min = htole16(params->itvl_min);
   19548:	8832      	ldrh	r2, [r6, #0]
   1954a:	8002      	strh	r2, [r0, #0]
    req->itvl_max = htole16(params->itvl_max);
   1954c:	8872      	ldrh	r2, [r6, #2]
   1954e:	8042      	strh	r2, [r0, #2]
    req->slave_latency = htole16(params->slave_latency);
   19550:	88b2      	ldrh	r2, [r6, #4]
   19552:	8082      	strh	r2, [r0, #4]
    req->timeout_multiplier = htole16(params->timeout_multiplier);
   19554:	88f2      	ldrh	r2, [r6, #6]
   19556:	80c2      	strh	r2, [r0, #6]
    rc = ble_l2cap_sig_tx(conn_handle, txom);
   19558:	9903      	ldr	r1, [sp, #12]
   1955a:	4628      	mov	r0, r5
   1955c:	f000 f874 	bl	19648 <ble_l2cap_sig_tx>
   19560:	4605      	mov	r5, r0
   19562:	e001      	b.n	19568 <ble_l2cap_sig_update+0x76>
        rc = BLE_HS_EINVAL;
   19564:	2503      	movs	r5, #3
    proc = NULL;
   19566:	2400      	movs	r4, #0
    ble_l2cap_sig_process_status(proc, rc);
   19568:	4629      	mov	r1, r5
   1956a:	4620      	mov	r0, r4
   1956c:	f7ff fefa 	bl	19364 <ble_l2cap_sig_process_status>
}
   19570:	4628      	mov	r0, r5
   19572:	b004      	add	sp, #16
   19574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   19578:	2506      	movs	r5, #6
   1957a:	e7f5      	b.n	19568 <ble_l2cap_sig_update+0x76>
        rc = BLE_HS_ENOMEM;
   1957c:	2506      	movs	r5, #6
   1957e:	e7f3      	b.n	19568 <ble_l2cap_sig_update+0x76>

00019580 <ble_l2cap_sig_create_chan>:
{
   19580:	b508      	push	{r3, lr}
    chan = ble_l2cap_chan_alloc(conn_handle);
   19582:	f7ff fd0b 	bl	18f9c <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   19586:	4603      	mov	r3, r0
   19588:	b130      	cbz	r0, 19598 <ble_l2cap_sig_create_chan+0x18>
    chan->scid = BLE_L2CAP_CID_SIG;
   1958a:	2205      	movs	r2, #5
   1958c:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SIG;
   1958e:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_L2CAP_SIG_MTU;
   19590:	2264      	movs	r2, #100	; 0x64
   19592:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_l2cap_sig_rx;
   19594:	4a01      	ldr	r2, [pc, #4]	; (1959c <ble_l2cap_sig_create_chan+0x1c>)
   19596:	6182      	str	r2, [r0, #24]
}
   19598:	4618      	mov	r0, r3
   1959a:	bd08      	pop	{r3, pc}
   1959c:	000193db 	.word	0x000193db

000195a0 <ble_l2cap_sig_conn_broken>:

void
ble_l2cap_sig_conn_broken(uint16_t conn_handle, int reason)
{
   195a0:	b538      	push	{r3, r4, r5, lr}
   195a2:	460d      	mov	r5, r1
    struct ble_l2cap_sig_proc *proc;

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   195a4:	e007      	b.n	195b6 <ble_l2cap_sig_conn_broken+0x16>
                ble_l2cap_sig_coc_disconnect_cb(proc, reason);
            break;
#endif
            }

            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   195a6:	4a0b      	ldr	r2, [pc, #44]	; (195d4 <ble_l2cap_sig_conn_broken+0x34>)
   195a8:	6813      	ldr	r3, [r2, #0]
   195aa:	681b      	ldr	r3, [r3, #0]
   195ac:	6013      	str	r3, [r2, #0]
   195ae:	b16b      	cbz	r3, 195cc <ble_l2cap_sig_conn_broken+0x2c>
            ble_l2cap_sig_proc_free(proc);
   195b0:	4620      	mov	r0, r4
   195b2:	f7ff fecd 	bl	19350 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   195b6:	4b07      	ldr	r3, [pc, #28]	; (195d4 <ble_l2cap_sig_conn_broken+0x34>)
   195b8:	681c      	ldr	r4, [r3, #0]
   195ba:	b154      	cbz	r4, 195d2 <ble_l2cap_sig_conn_broken+0x32>
        switch(proc->op) {
   195bc:	7aa3      	ldrb	r3, [r4, #10]
   195be:	2b00      	cmp	r3, #0
   195c0:	d1f1      	bne.n	195a6 <ble_l2cap_sig_conn_broken+0x6>
                ble_l2cap_sig_update_call_cb(proc, reason);
   195c2:	4629      	mov	r1, r5
   195c4:	4620      	mov	r0, r4
   195c6:	f7ff fe3e 	bl	19246 <ble_l2cap_sig_update_call_cb>
                break;
   195ca:	e7ec      	b.n	195a6 <ble_l2cap_sig_conn_broken+0x6>
            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   195cc:	4613      	mov	r3, r2
   195ce:	605a      	str	r2, [r3, #4]
   195d0:	e7ee      	b.n	195b0 <ble_l2cap_sig_conn_broken+0x10>
    }

}
   195d2:	bd38      	pop	{r3, r4, r5, pc}
   195d4:	20002b1c 	.word	0x20002b1c

000195d8 <ble_l2cap_sig_timer>:
 * @return                      The number of ticks until this function should
 *                                  be called again.
 */
int32_t
ble_l2cap_sig_timer(void)
{
   195d8:	b530      	push	{r4, r5, lr}
   195da:	b083      	sub	sp, #12

    /* Remove timed-out procedures from the main list and insert them into a
     * temporary list.  This function also calculates the number of ticks until
     * the next expiration will occur.
     */
    ticks_until_exp = ble_l2cap_sig_extract_expired(&temp_list);
   195dc:	4668      	mov	r0, sp
   195de:	f7ff fe89 	bl	192f4 <ble_l2cap_sig_extract_expired>
   195e2:	4605      	mov	r5, r0

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   195e4:	e006      	b.n	195f4 <ble_l2cap_sig_timer+0x1c>
                ble_l2cap_sig_coc_disconnect_cb(proc, BLE_HS_ETIMEOUT);
            break;
#endif
        }

        STAILQ_REMOVE_HEAD(&temp_list, next);
   195e6:	9b00      	ldr	r3, [sp, #0]
   195e8:	681b      	ldr	r3, [r3, #0]
   195ea:	9300      	str	r3, [sp, #0]
   195ec:	b163      	cbz	r3, 19608 <ble_l2cap_sig_timer+0x30>
        ble_l2cap_sig_proc_free(proc);
   195ee:	4620      	mov	r0, r4
   195f0:	f7ff feae 	bl	19350 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   195f4:	9c00      	ldr	r4, [sp, #0]
   195f6:	b154      	cbz	r4, 1960e <ble_l2cap_sig_timer+0x36>
        switch(proc->op) {
   195f8:	7aa3      	ldrb	r3, [r4, #10]
   195fa:	2b00      	cmp	r3, #0
   195fc:	d1f3      	bne.n	195e6 <ble_l2cap_sig_timer+0xe>
                ble_l2cap_sig_update_call_cb(proc, BLE_HS_ETIMEOUT);
   195fe:	210d      	movs	r1, #13
   19600:	4620      	mov	r0, r4
   19602:	f7ff fe20 	bl	19246 <ble_l2cap_sig_update_call_cb>
                break;
   19606:	e7ee      	b.n	195e6 <ble_l2cap_sig_timer+0xe>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   19608:	f8cd d004 	str.w	sp, [sp, #4]
   1960c:	e7ef      	b.n	195ee <ble_l2cap_sig_timer+0x16>
    }

    return ticks_until_exp;
}
   1960e:	4628      	mov	r0, r5
   19610:	b003      	add	sp, #12
   19612:	bd30      	pop	{r4, r5, pc}

00019614 <ble_l2cap_sig_init>:

int
ble_l2cap_sig_init(void)
{
   19614:	b500      	push	{lr}
   19616:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_l2cap_sig_procs);
   19618:	4b07      	ldr	r3, [pc, #28]	; (19638 <ble_l2cap_sig_init+0x24>)
   1961a:	2200      	movs	r2, #0
   1961c:	601a      	str	r2, [r3, #0]
   1961e:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_l2cap_sig_proc_pool,
   19620:	4b06      	ldr	r3, [pc, #24]	; (1963c <ble_l2cap_sig_init+0x28>)
   19622:	9300      	str	r3, [sp, #0]
   19624:	4b06      	ldr	r3, [pc, #24]	; (19640 <ble_l2cap_sig_init+0x2c>)
   19626:	2214      	movs	r2, #20
   19628:	2101      	movs	r1, #1
   1962a:	4806      	ldr	r0, [pc, #24]	; (19644 <ble_l2cap_sig_init+0x30>)
   1962c:	f7f8 f866 	bl	116fc <os_mempool_init>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   19630:	b003      	add	sp, #12
   19632:	f85d fb04 	ldr.w	pc, [sp], #4
   19636:	bf00      	nop
   19638:	20002b1c 	.word	0x20002b1c
   1963c:	0002c524 	.word	0x0002c524
   19640:	20002aec 	.word	0x20002aec
   19644:	20002b00 	.word	0x20002b00

00019648 <ble_l2cap_sig_tx>:
#include <string.h>
#include "ble_hs_priv.h"

int
ble_l2cap_sig_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   19648:	b530      	push	{r4, r5, lr}
   1964a:	b083      	sub	sp, #12
   1964c:	4605      	mov	r5, r0
   1964e:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   19650:	f7fd f954 	bl	168fc <ble_hs_lock>
    ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   19654:	ab01      	add	r3, sp, #4
   19656:	466a      	mov	r2, sp
   19658:	2105      	movs	r1, #5
   1965a:	4628      	mov	r0, r5
   1965c:	f7ff f928 	bl	188b0 <ble_hs_misc_conn_chan_find_reqd>
                                    &conn, &chan);
    rc = ble_l2cap_tx(conn, chan, txom);
   19660:	4622      	mov	r2, r4
   19662:	9901      	ldr	r1, [sp, #4]
   19664:	9800      	ldr	r0, [sp, #0]
   19666:	f7ff fd80 	bl	1916a <ble_l2cap_tx>
   1966a:	4604      	mov	r4, r0
    ble_hs_unlock();
   1966c:	f7fd f94a 	bl	16904 <ble_hs_unlock>

    return rc;
}
   19670:	4620      	mov	r0, r4
   19672:	b003      	add	sp, #12
   19674:	bd30      	pop	{r4, r5, pc}

00019676 <ble_l2cap_sig_hdr_parse>:
{
    struct ble_l2cap_sig_hdr *src = payload;

    BLE_HS_DBG_ASSERT(len >= BLE_L2CAP_SIG_HDR_SZ);

    dst->op = src->op;
   19676:	7803      	ldrb	r3, [r0, #0]
   19678:	7013      	strb	r3, [r2, #0]
    dst->identifier = src->identifier;
   1967a:	7843      	ldrb	r3, [r0, #1]
   1967c:	7053      	strb	r3, [r2, #1]
    dst->length = le16toh(src->length);
   1967e:	8843      	ldrh	r3, [r0, #2]
   19680:	8053      	strh	r3, [r2, #2]
}
   19682:	4770      	bx	lr

00019684 <ble_l2cap_sig_cmd_get>:
}

void *
ble_l2cap_sig_cmd_get(uint8_t opcode, uint8_t id, uint16_t len,
                      struct os_mbuf **txom)
{
   19684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19688:	4680      	mov	r8, r0
   1968a:	460f      	mov	r7, r1
   1968c:	4616      	mov	r6, r2
   1968e:	461d      	mov	r5, r3
    struct ble_l2cap_sig_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   19690:	f7ff f8b6 	bl	18800 <ble_hs_mbuf_l2cap_pkt>
   19694:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   19696:	b198      	cbz	r0, 196c0 <ble_l2cap_sig_cmd_get+0x3c>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   19698:	1d31      	adds	r1, r6, #4
   1969a:	b289      	uxth	r1, r1
   1969c:	f7f7 ff08 	bl	114b0 <os_mbuf_extend>
   196a0:	4604      	mov	r4, r0
   196a2:	b148      	cbz	r0, 196b8 <ble_l2cap_sig_cmd_get+0x34>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_l2cap_sig_hdr *)(*txom)->om_data;
   196a4:	682b      	ldr	r3, [r5, #0]
   196a6:	681c      	ldr	r4, [r3, #0]

    hdr->op = opcode;
   196a8:	f884 8000 	strb.w	r8, [r4]
    hdr->identifier = id;
   196ac:	7067      	strb	r7, [r4, #1]
    hdr->length = htole16(len);
   196ae:	8066      	strh	r6, [r4, #2]

    return hdr->data;
   196b0:	3404      	adds	r4, #4
}
   196b2:	4620      	mov	r0, r4
   196b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free_chain(*txom);
   196b8:	6828      	ldr	r0, [r5, #0]
   196ba:	f7f7 fc0f 	bl	10edc <os_mbuf_free_chain>
        return NULL;
   196be:	e7f8      	b.n	196b2 <ble_l2cap_sig_cmd_get+0x2e>
        return NULL;
   196c0:	2400      	movs	r4, #0
   196c2:	e7f6      	b.n	196b2 <ble_l2cap_sig_cmd_get+0x2e>

000196c4 <ble_l2cap_sig_reject_tx>:
{
   196c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   196c6:	b083      	sub	sp, #12
   196c8:	4605      	mov	r5, r0
   196ca:	4617      	mov	r7, r2
   196cc:	461e      	mov	r6, r3
   196ce:	9c08      	ldr	r4, [sp, #32]
    cmd = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_REJECT, id,
   196d0:	1ca2      	adds	r2, r4, #2
   196d2:	ab01      	add	r3, sp, #4
   196d4:	b292      	uxth	r2, r2
   196d6:	2001      	movs	r0, #1
   196d8:	f7ff ffd4 	bl	19684 <ble_l2cap_sig_cmd_get>
    if (!cmd) {
   196dc:	b158      	cbz	r0, 196f6 <ble_l2cap_sig_reject_tx+0x32>
    cmd->reason = htole16(reason);
   196de:	f820 7b02 	strh.w	r7, [r0], #2
    memcpy(cmd->data, data, data_len);
   196e2:	4622      	mov	r2, r4
   196e4:	4631      	mov	r1, r6
   196e6:	f7f8 feed 	bl	124c4 <memcpy>
    return ble_l2cap_sig_tx(conn_handle, txom);
   196ea:	9901      	ldr	r1, [sp, #4]
   196ec:	4628      	mov	r0, r5
   196ee:	f7ff ffab 	bl	19648 <ble_l2cap_sig_tx>
}
   196f2:	b003      	add	sp, #12
   196f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   196f6:	2006      	movs	r0, #6
   196f8:	e7fb      	b.n	196f2 <ble_l2cap_sig_reject_tx+0x2e>

000196fa <ble_l2cap_sig_reject_invalid_cid_tx>:
{
   196fa:	b500      	push	{lr}
   196fc:	b085      	sub	sp, #20
    } data = {
   196fe:	f8ad 300c 	strh.w	r3, [sp, #12]
   19702:	f8ad 200e 	strh.w	r2, [sp, #14]
    return ble_l2cap_sig_reject_tx(conn_handle, id,
   19706:	2304      	movs	r3, #4
   19708:	9300      	str	r3, [sp, #0]
   1970a:	ab03      	add	r3, sp, #12
   1970c:	2202      	movs	r2, #2
   1970e:	f7ff ffd9 	bl	196c4 <ble_l2cap_sig_reject_tx>
}
   19712:	b005      	add	sp, #20
   19714:	f85d fb04 	ldr.w	pc, [sp], #4

00019718 <ble_sm_dispatch_get>:
}

static ble_sm_rx_fn *
ble_sm_dispatch_get(uint8_t op)
{
    if (op >= sizeof ble_sm_dispatch / sizeof ble_sm_dispatch[0]) {
   19718:	280e      	cmp	r0, #14
   1971a:	d803      	bhi.n	19724 <ble_sm_dispatch_get+0xc>
        return NULL;
    }

    return ble_sm_dispatch[op];
   1971c:	4b02      	ldr	r3, [pc, #8]	; (19728 <ble_sm_dispatch_get+0x10>)
   1971e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19722:	4770      	bx	lr
        return NULL;
   19724:	2000      	movs	r0, #0
}
   19726:	4770      	bx	lr
   19728:	0002c53c 	.word	0x0002c53c

0001972c <ble_sm_proc_remove>:

static void
ble_sm_proc_remove(struct ble_sm_proc *proc,
                         struct ble_sm_proc *prev)
{
    if (prev == NULL) {
   1972c:	b121      	cbz	r1, 19738 <ble_sm_proc_remove+0xc>
        BLE_HS_DBG_ASSERT(STAILQ_FIRST(&ble_sm_procs) == proc);
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
    } else {
        BLE_HS_DBG_ASSERT(STAILQ_NEXT(prev, next) == proc);
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   1972e:	680a      	ldr	r2, [r1, #0]
   19730:	6812      	ldr	r2, [r2, #0]
   19732:	600a      	str	r2, [r1, #0]
   19734:	b14a      	cbz	r2, 1974a <ble_sm_proc_remove+0x1e>
    }

    ble_sm_dbg_assert_no_cycles();
}
   19736:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   19738:	4a05      	ldr	r2, [pc, #20]	; (19750 <ble_sm_proc_remove+0x24>)
   1973a:	6813      	ldr	r3, [r2, #0]
   1973c:	681b      	ldr	r3, [r3, #0]
   1973e:	6013      	str	r3, [r2, #0]
   19740:	2b00      	cmp	r3, #0
   19742:	d1f8      	bne.n	19736 <ble_sm_proc_remove+0xa>
   19744:	4613      	mov	r3, r2
   19746:	605a      	str	r2, [r3, #4]
   19748:	4770      	bx	lr
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   1974a:	4a01      	ldr	r2, [pc, #4]	; (19750 <ble_sm_proc_remove+0x24>)
   1974c:	6051      	str	r1, [r2, #4]
}
   1974e:	e7f2      	b.n	19736 <ble_sm_proc_remove+0xa>
   19750:	20002c40 	.word	0x20002c40

00019754 <ble_sm_proc_matches>:
}

static int
ble_sm_proc_matches(struct ble_sm_proc *proc, uint16_t conn_handle,
                    uint8_t state, int is_initiator)
{
   19754:	b410      	push	{r4}
    int proc_is_initiator;

    if (conn_handle != proc->conn_handle) {
   19756:	8944      	ldrh	r4, [r0, #10]
   19758:	428c      	cmp	r4, r1
   1975a:	d003      	beq.n	19764 <ble_sm_proc_matches+0x10>
        return 0;
   1975c:	2000      	movs	r0, #0
    if (is_initiator != -1 && is_initiator != proc_is_initiator) {
        return 0;
    }

    return 1;
}
   1975e:	f85d 4b04 	ldr.w	r4, [sp], #4
   19762:	4770      	bx	lr
    if (state != BLE_SM_PROC_STATE_NONE && state != proc->state) {
   19764:	2aff      	cmp	r2, #255	; 0xff
   19766:	d004      	beq.n	19772 <ble_sm_proc_matches+0x1e>
   19768:	7b41      	ldrb	r1, [r0, #13]
   1976a:	4291      	cmp	r1, r2
   1976c:	d001      	beq.n	19772 <ble_sm_proc_matches+0x1e>
        return 0;
   1976e:	2000      	movs	r0, #0
   19770:	e7f5      	b.n	1975e <ble_sm_proc_matches+0xa>
    proc_is_initiator = !!(proc->flags & BLE_SM_PROC_F_INITIATOR);
   19772:	7a02      	ldrb	r2, [r0, #8]
   19774:	f002 0201 	and.w	r2, r2, #1
    if (is_initiator != -1 && is_initiator != proc_is_initiator) {
   19778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1977c:	d005      	beq.n	1978a <ble_sm_proc_matches+0x36>
   1977e:	429a      	cmp	r2, r3
   19780:	d001      	beq.n	19786 <ble_sm_proc_matches+0x32>
        return 0;
   19782:	2000      	movs	r0, #0
   19784:	e7eb      	b.n	1975e <ble_sm_proc_matches+0xa>
    return 1;
   19786:	2001      	movs	r0, #1
   19788:	e7e9      	b.n	1975e <ble_sm_proc_matches+0xa>
   1978a:	2001      	movs	r0, #1
   1978c:	e7e7      	b.n	1975e <ble_sm_proc_matches+0xa>
	...

00019790 <ble_sm_insert>:
    STAILQ_FOREACH(cur, &ble_sm_procs, next) {
        BLE_HS_DBG_ASSERT(cur != proc);
    }
#endif

    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   19790:	4b04      	ldr	r3, [pc, #16]	; (197a4 <ble_sm_insert+0x14>)
   19792:	681b      	ldr	r3, [r3, #0]
   19794:	6003      	str	r3, [r0, #0]
   19796:	b113      	cbz	r3, 1979e <ble_sm_insert+0xe>
   19798:	4b02      	ldr	r3, [pc, #8]	; (197a4 <ble_sm_insert+0x14>)
   1979a:	6018      	str	r0, [r3, #0]
}
   1979c:	4770      	bx	lr
    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   1979e:	4b01      	ldr	r3, [pc, #4]	; (197a4 <ble_sm_insert+0x14>)
   197a0:	6058      	str	r0, [r3, #4]
   197a2:	e7f9      	b.n	19798 <ble_sm_insert+0x8>
   197a4:	20002c40 	.word	0x20002c40

000197a8 <ble_sm_rx_noop>:

static void
ble_sm_rx_noop(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
    res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   197a8:	f240 4307 	movw	r3, #1031	; 0x407
   197ac:	6013      	str	r3, [r2, #0]
    res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   197ae:	2307      	movs	r3, #7
   197b0:	7113      	strb	r3, [r2, #4]
}
   197b2:	4770      	bx	lr

000197b4 <ble_sm_build_authreq>:

static uint8_t
ble_sm_build_authreq(void)
{
    return ble_hs_cfg.sm_bonding << 0  |
   197b4:	4b08      	ldr	r3, [pc, #32]	; (197d8 <ble_sm_build_authreq+0x24>)
   197b6:	7a5b      	ldrb	r3, [r3, #9]
   197b8:	f3c3 0040 	ubfx	r0, r3, #1, #1
           ble_hs_cfg.sm_mitm << 2     |
   197bc:	f3c3 0280 	ubfx	r2, r3, #2, #1
    return ble_hs_cfg.sm_bonding << 0  |
   197c0:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
           ble_hs_cfg.sm_sc << 3       |
   197c4:	f3c3 02c0 	ubfx	r2, r3, #3, #1
           ble_hs_cfg.sm_mitm << 2     |
   197c8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
           ble_hs_cfg.sm_keypress << 4;
   197cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
}
   197d0:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
   197d4:	4770      	bx	lr
   197d6:	bf00      	nop
   197d8:	200001dc 	.word	0x200001dc

000197dc <ble_sm_key_dist>:
{
    struct ble_sm_pair_cmd *pair_rsp;

    pair_rsp = (struct ble_sm_pair_cmd *) &proc->pair_rsp[1];

    *out_init_key_dist = pair_rsp->init_key_dist;
   197dc:	7f03      	ldrb	r3, [r0, #28]
   197de:	700b      	strb	r3, [r1, #0]
    *out_resp_key_dist = pair_rsp->resp_key_dist;
   197e0:	7f43      	ldrb	r3, [r0, #29]
   197e2:	7013      	strb	r3, [r2, #0]

    /* Encryption info and master ID are only sent in legacy pairing. */
    if (proc->flags & BLE_SM_PROC_F_SC) {
   197e4:	7a03      	ldrb	r3, [r0, #8]
   197e6:	f013 0f10 	tst.w	r3, #16
   197ea:	d007      	beq.n	197fc <ble_sm_key_dist+0x20>
        *out_init_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   197ec:	780b      	ldrb	r3, [r1, #0]
   197ee:	f023 0301 	bic.w	r3, r3, #1
   197f2:	700b      	strb	r3, [r1, #0]
        *out_resp_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   197f4:	7813      	ldrb	r3, [r2, #0]
   197f6:	f023 0301 	bic.w	r3, r3, #1
   197fa:	7013      	strb	r3, [r2, #0]
    }
}
   197fc:	4770      	bx	lr

000197fe <ble_sm_chk_store_overflow_by_type>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   197fe:	2000      	movs	r0, #0
   19800:	4770      	bx	lr

00019802 <ble_sm_chk_store_overflow>:

static int
ble_sm_chk_store_overflow(uint16_t conn_handle)
{
   19802:	b510      	push	{r4, lr}
   19804:	4604      	mov	r4, r0
    int rc;

    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_PEER_SEC,
   19806:	4601      	mov	r1, r0
   19808:	2002      	movs	r0, #2
   1980a:	f7ff fff8 	bl	197fe <ble_sm_chk_store_overflow_by_type>
                                           conn_handle);
    if (rc != 0) {
   1980e:	4603      	mov	r3, r0
   19810:	b920      	cbnz	r0, 1981c <ble_sm_chk_store_overflow+0x1a>
        return rc;
    }

    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_OUR_SEC,
   19812:	4621      	mov	r1, r4
   19814:	2001      	movs	r0, #1
   19816:	f7ff fff2 	bl	197fe <ble_sm_chk_store_overflow_by_type>
   1981a:	4603      	mov	r3, r0
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1981c:	4618      	mov	r0, r3
   1981e:	bd10      	pop	{r4, pc}

00019820 <ble_sm_state_after_pair>:
 *****************************************************************************/

static uint8_t
ble_sm_state_after_pair(struct ble_sm_proc *proc)
{
    if (proc->flags & BLE_SM_PROC_F_SC) {
   19820:	7a03      	ldrb	r3, [r0, #8]
   19822:	f013 0f10 	tst.w	r3, #16
   19826:	d101      	bne.n	1982c <ble_sm_state_after_pair+0xc>
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
    } else {
        return BLE_SM_PROC_STATE_CONFIRM;
   19828:	2001      	movs	r0, #1
    }
}
   1982a:	4770      	bx	lr
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
   1982c:	2009      	movs	r0, #9
   1982e:	4770      	bx	lr

00019830 <ble_sm_pair_base_fill>:
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}

static void
ble_sm_pair_base_fill(struct ble_sm_pair_cmd *cmd)
{
   19830:	b510      	push	{r4, lr}
   19832:	4604      	mov	r4, r0
    cmd->io_cap = ble_hs_cfg.sm_io_cap;
   19834:	4b06      	ldr	r3, [pc, #24]	; (19850 <ble_sm_pair_base_fill+0x20>)
   19836:	7a1a      	ldrb	r2, [r3, #8]
   19838:	7002      	strb	r2, [r0, #0]
    cmd->oob_data_flag = ble_hs_cfg.sm_oob_data_flag;
   1983a:	7a5b      	ldrb	r3, [r3, #9]
   1983c:	f3c3 0300 	ubfx	r3, r3, #0, #1
   19840:	7043      	strb	r3, [r0, #1]
    cmd->authreq = ble_sm_build_authreq();
   19842:	f7ff ffb7 	bl	197b4 <ble_sm_build_authreq>
   19846:	70a0      	strb	r0, [r4, #2]
    cmd->max_enc_key_size = BLE_SM_PAIR_KEY_SZ_MAX;
   19848:	2310      	movs	r3, #16
   1984a:	70e3      	strb	r3, [r4, #3]
}
   1984c:	bd10      	pop	{r4, pc}
   1984e:	bf00      	nop
   19850:	200001dc 	.word	0x200001dc

00019854 <ble_sm_pair_req_fill>:

static void
ble_sm_pair_req_fill(struct ble_sm_proc *proc)
{
   19854:	b510      	push	{r4, lr}
   19856:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *req;

    req = (void *)(proc->pair_req + 1);

    proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   19858:	2301      	movs	r3, #1
   1985a:	7403      	strb	r3, [r0, #16]
    ble_sm_pair_base_fill(req);
   1985c:	3011      	adds	r0, #17
   1985e:	f7ff ffe7 	bl	19830 <ble_sm_pair_base_fill>
    req->init_key_dist = ble_hs_cfg.sm_our_key_dist;
   19862:	4b03      	ldr	r3, [pc, #12]	; (19870 <ble_sm_pair_req_fill+0x1c>)
   19864:	7a9a      	ldrb	r2, [r3, #10]
   19866:	7562      	strb	r2, [r4, #21]
    req->resp_key_dist = ble_hs_cfg.sm_their_key_dist;
   19868:	7adb      	ldrb	r3, [r3, #11]
   1986a:	75a3      	strb	r3, [r4, #22]
}
   1986c:	bd10      	pop	{r4, pc}
   1986e:	bf00      	nop
   19870:	200001dc 	.word	0x200001dc

00019874 <ble_sm_pair_rsp_fill>:

static void
ble_sm_pair_rsp_fill(struct ble_sm_proc *proc)
{
   19874:	b510      	push	{r4, lr}
   19876:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *rsp;

    req = (void *)(proc->pair_req + 1);
    rsp = (void *)(proc->pair_rsp + 1);

    proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   19878:	2302      	movs	r3, #2
   1987a:	75c3      	strb	r3, [r0, #23]
    ble_sm_pair_base_fill(rsp);
   1987c:	3018      	adds	r0, #24
   1987e:	f7ff ffd7 	bl	19830 <ble_sm_pair_base_fill>

    /* The response's key distribution flags field is the intersection of
     * the peer's preferences and our capabilities.
     */
    rsp->init_key_dist = req->init_key_dist &
   19882:	7d63      	ldrb	r3, [r4, #21]
                         ble_hs_cfg.sm_their_key_dist;
   19884:	4a04      	ldr	r2, [pc, #16]	; (19898 <ble_sm_pair_rsp_fill+0x24>)
   19886:	7ad1      	ldrb	r1, [r2, #11]
    rsp->init_key_dist = req->init_key_dist &
   19888:	400b      	ands	r3, r1
   1988a:	7723      	strb	r3, [r4, #28]
    rsp->resp_key_dist = req->resp_key_dist &
   1988c:	7da3      	ldrb	r3, [r4, #22]
                         ble_hs_cfg.sm_our_key_dist;
   1988e:	7a92      	ldrb	r2, [r2, #10]
    rsp->resp_key_dist = req->resp_key_dist &
   19890:	4013      	ands	r3, r2
   19892:	7763      	strb	r3, [r4, #29]
}
   19894:	bd10      	pop	{r4, pc}
   19896:	bf00      	nop
   19898:	200001dc 	.word	0x200001dc

0001989c <ble_sm_verify_auth_requirements>:
        if (MYNEWT_VAL(BLE_SM_LEGACY) == 0) {
            return false;
        }
    }
    return true;
}
   1989c:	2001      	movs	r0, #1
   1989e:	4770      	bx	lr

000198a0 <ble_sm_gen_ediv>:
{
   198a0:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->ediv, sizeof master_id->ediv);
   198a2:	2102      	movs	r1, #2
   198a4:	f7fe fe76 	bl	18594 <ble_hs_hci_util_rand>
}
   198a8:	bd08      	pop	{r3, pc}

000198aa <ble_sm_gen_master_id_rand>:
{
   198aa:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->rand_val, sizeof master_id->rand_val);
   198ac:	2108      	movs	r1, #8
   198ae:	3002      	adds	r0, #2
   198b0:	f7fe fe70 	bl	18594 <ble_hs_hci_util_rand>
}
   198b4:	bd08      	pop	{r3, pc}

000198b6 <ble_sm_gen_csrk>:
{
   198b6:	b508      	push	{r3, lr}
   198b8:	4608      	mov	r0, r1
    rc = ble_hs_hci_util_rand(csrk, 16);
   198ba:	2110      	movs	r1, #16
   198bc:	f7fe fe6a 	bl	18594 <ble_hs_hci_util_rand>
}
   198c0:	bd08      	pop	{r3, pc}

000198c2 <ble_sm_io_action>:
{
   198c2:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   198c4:	7a03      	ldrb	r3, [r0, #8]
   198c6:	f013 0f10 	tst.w	r3, #16
   198ca:	d102      	bne.n	198d2 <ble_sm_io_action+0x10>
        return ble_sm_lgcy_io_action(proc, action);
   198cc:	f001 fbe4 	bl	1b098 <ble_sm_lgcy_io_action>
}
   198d0:	bd08      	pop	{r3, pc}
        return ble_sm_sc_io_action(proc, action);
   198d2:	2008      	movs	r0, #8
   198d4:	e7fc      	b.n	198d0 <ble_sm_io_action+0xe>

000198d6 <ble_sm_pair_cfg>:
{
   198d6:	b510      	push	{r4, lr}
   198d8:	b082      	sub	sp, #8
   198da:	4604      	mov	r4, r0
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   198dc:	7cc3      	ldrb	r3, [r0, #19]
   198de:	f013 0f08 	tst.w	r3, #8
   198e2:	d007      	beq.n	198f4 <ble_sm_pair_cfg+0x1e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_SC) {
   198e4:	7e83      	ldrb	r3, [r0, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   198e6:	f013 0f08 	tst.w	r3, #8
   198ea:	d003      	beq.n	198f4 <ble_sm_pair_cfg+0x1e>
        proc->flags |= BLE_SM_PROC_F_SC;
   198ec:	7a03      	ldrb	r3, [r0, #8]
   198ee:	f043 0310 	orr.w	r3, r3, #16
   198f2:	7203      	strb	r3, [r0, #8]
    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   198f4:	f10d 0206 	add.w	r2, sp, #6
   198f8:	f10d 0107 	add.w	r1, sp, #7
   198fc:	4620      	mov	r0, r4
   198fe:	f7ff ff6d 	bl	197dc <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   19902:	7a22      	ldrb	r2, [r4, #8]
   19904:	f012 0f01 	tst.w	r2, #1
   19908:	d03b      	beq.n	19982 <ble_sm_pair_cfg+0xac>
        rx_key_dist = resp_key_dist;
   1990a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   1990e:	7ce1      	ldrb	r1, [r4, #19]
   19910:	f011 0f01 	tst.w	r1, #1
   19914:	d006      	beq.n	19924 <ble_sm_pair_cfg+0x4e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   19916:	7ea1      	ldrb	r1, [r4, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   19918:	f011 0f01 	tst.w	r1, #1
   1991c:	d002      	beq.n	19924 <ble_sm_pair_cfg+0x4e>
        proc->flags |= BLE_SM_PROC_F_BONDING;
   1991e:	f042 0220 	orr.w	r2, r2, #32
   19922:	7222      	strb	r2, [r4, #8]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   19924:	7a22      	ldrb	r2, [r4, #8]
   19926:	f012 0f10 	tst.w	r2, #16
   1992a:	d108      	bne.n	1993e <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   1992c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   19930:	b929      	cbnz	r1, 1993e <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   19932:	f89d 1006 	ldrb.w	r1, [sp, #6]
   19936:	b911      	cbnz	r1, 1993e <ble_sm_pair_cfg+0x68>
        proc->flags &= ~BLE_SM_PROC_F_BONDING;
   19938:	f022 0220 	bic.w	r2, r2, #32
   1993c:	7222      	strb	r2, [r4, #8]
    proc->rx_key_flags = 0;
   1993e:	2200      	movs	r2, #0
   19940:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   19942:	f013 0f01 	tst.w	r3, #1
   19946:	d001      	beq.n	1994c <ble_sm_pair_cfg+0x76>
        proc->rx_key_flags |= BLE_SM_KE_F_ENC_INFO |
   19948:	2203      	movs	r2, #3
   1994a:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   1994c:	f013 0f02 	tst.w	r3, #2
   19950:	d003      	beq.n	1995a <ble_sm_pair_cfg+0x84>
        proc->rx_key_flags |= BLE_SM_KE_F_ID_INFO |
   19952:	7ba2      	ldrb	r2, [r4, #14]
   19954:	f042 020c 	orr.w	r2, r2, #12
   19958:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   1995a:	f013 0f04 	tst.w	r3, #4
   1995e:	d003      	beq.n	19968 <ble_sm_pair_cfg+0x92>
        proc->rx_key_flags |= BLE_SM_KE_F_SIGN_INFO;
   19960:	7ba3      	ldrb	r3, [r4, #14]
   19962:	f043 0310 	orr.w	r3, r3, #16
   19966:	73a3      	strb	r3, [r4, #14]
    proc->key_size = min(pair_req->max_enc_key_size,
   19968:	7ee3      	ldrb	r3, [r4, #27]
   1996a:	7d22      	ldrb	r2, [r4, #20]
   1996c:	4293      	cmp	r3, r2
   1996e:	bf28      	it	cs
   19970:	4613      	movcs	r3, r2
   19972:	73e3      	strb	r3, [r4, #15]
    rc = ble_sm_io_action(proc, &ioact);
   19974:	f10d 0105 	add.w	r1, sp, #5
   19978:	4620      	mov	r0, r4
   1997a:	f7ff ffa2 	bl	198c2 <ble_sm_io_action>
}
   1997e:	b002      	add	sp, #8
   19980:	bd10      	pop	{r4, pc}
        rx_key_dist = init_key_dist;
   19982:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19986:	e7c2      	b.n	1990e <ble_sm_pair_cfg+0x38>

00019988 <ble_sm_gen_ltk>:
{
   19988:	b570      	push	{r4, r5, r6, lr}
   1998a:	4605      	mov	r5, r0
   1998c:	460c      	mov	r4, r1
    rc = ble_hs_hci_util_rand(ltk, proc->key_size);
   1998e:	7bc1      	ldrb	r1, [r0, #15]
   19990:	4620      	mov	r0, r4
   19992:	f7fe fdff 	bl	18594 <ble_hs_hci_util_rand>
    if (rc != 0) {
   19996:	4606      	mov	r6, r0
   19998:	b108      	cbz	r0, 1999e <ble_sm_gen_ltk+0x16>
}
   1999a:	4630      	mov	r0, r6
   1999c:	bd70      	pop	{r4, r5, r6, pc}
    memset(ltk + proc->key_size, 0, sizeof proc->ltk - proc->key_size);
   1999e:	7be8      	ldrb	r0, [r5, #15]
   199a0:	f1c0 0210 	rsb	r2, r0, #16
   199a4:	2100      	movs	r1, #0
   199a6:	4420      	add	r0, r4
   199a8:	f7f8 fdb5 	bl	12516 <memset>
    return 0;
   199ac:	e7f5      	b.n	1999a <ble_sm_gen_ltk+0x12>
	...

000199b0 <ble_sm_exec>:
{
   199b0:	b570      	push	{r4, r5, r6, lr}
   199b2:	4605      	mov	r5, r0
   199b4:	460c      	mov	r4, r1
   199b6:	4616      	mov	r6, r2
    memset(res, 0, sizeof *res);
   199b8:	2300      	movs	r3, #0
   199ba:	600b      	str	r3, [r1, #0]
   199bc:	604b      	str	r3, [r1, #4]
   199be:	608b      	str	r3, [r1, #8]
   199c0:	60cb      	str	r3, [r1, #12]
   199c2:	610b      	str	r3, [r1, #16]
   199c4:	614b      	str	r3, [r1, #20]
    if (!ble_hs_conn_exists(proc->conn_handle)) {
   199c6:	8940      	ldrh	r0, [r0, #10]
   199c8:	f7fd fd98 	bl	174fc <ble_hs_conn_exists>
   199cc:	b140      	cbz	r0, 199e0 <ble_sm_exec+0x30>
        cb = ble_sm_state_dispatch[proc->state];
   199ce:	7b6a      	ldrb	r2, [r5, #13]
   199d0:	4b05      	ldr	r3, [pc, #20]	; (199e8 <ble_sm_exec+0x38>)
   199d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        cb(proc, res, arg);
   199d6:	4632      	mov	r2, r6
   199d8:	4621      	mov	r1, r4
   199da:	4628      	mov	r0, r5
   199dc:	4798      	blx	r3
}
   199de:	bd70      	pop	{r4, r5, r6, pc}
        res->app_status = BLE_HS_ENOTCONN;
   199e0:	2307      	movs	r3, #7
   199e2:	6023      	str	r3, [r4, #0]
   199e4:	e7fb      	b.n	199de <ble_sm_exec+0x2e>
   199e6:	bf00      	nop
   199e8:	0002c58c 	.word	0x0002c58c

000199ec <ble_sm_sec_req_exec>:
 *****************************************************************************/

static void
ble_sm_sec_req_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                    void *arg)
{
   199ec:	b570      	push	{r4, r5, r6, lr}
   199ee:	b082      	sub	sp, #8
   199f0:	4605      	mov	r5, r0
   199f2:	460c      	mov	r4, r1
    struct ble_sm_sec_req *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_SEC_REQ, sizeof(*cmd), &txom);
   199f4:	aa01      	add	r2, sp, #4
   199f6:	2101      	movs	r1, #1
   199f8:	200b      	movs	r0, #11
   199fa:	f001 fb05 	bl	1b008 <ble_sm_cmd_get>
    if (!cmd) {
   199fe:	b150      	cbz	r0, 19a16 <ble_sm_sec_req_exec+0x2a>
   19a00:	4606      	mov	r6, r0
        res->app_status = BLE_HS_ENOMEM;
        return;
    }

    cmd->authreq = ble_sm_build_authreq();
   19a02:	f7ff fed7 	bl	197b4 <ble_sm_build_authreq>
   19a06:	7030      	strb	r0, [r6, #0]
    rc = ble_sm_tx(proc->conn_handle, txom);
   19a08:	9901      	ldr	r1, [sp, #4]
   19a0a:	8968      	ldrh	r0, [r5, #10]
   19a0c:	f001 fb16 	bl	1b03c <ble_sm_tx>
    if (rc != 0) {
   19a10:	b118      	cbz	r0, 19a1a <ble_sm_sec_req_exec+0x2e>
        res->app_status = rc;
   19a12:	6020      	str	r0, [r4, #0]
        return;
   19a14:	e001      	b.n	19a1a <ble_sm_sec_req_exec+0x2e>
        res->app_status = BLE_HS_ENOMEM;
   19a16:	2306      	movs	r3, #6
   19a18:	6023      	str	r3, [r4, #0]
    }
}
   19a1a:	b002      	add	sp, #8
   19a1c:	bd70      	pop	{r4, r5, r6, pc}

00019a1e <ble_sm_pair_fail_tx>:
{
   19a1e:	b530      	push	{r4, r5, lr}
   19a20:	b083      	sub	sp, #12
   19a22:	4604      	mov	r4, r0
   19a24:	460d      	mov	r5, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_FAIL, sizeof(*cmd), &txom);
   19a26:	aa01      	add	r2, sp, #4
   19a28:	2101      	movs	r1, #1
   19a2a:	2005      	movs	r0, #5
   19a2c:	f001 faec 	bl	1b008 <ble_sm_cmd_get>
    if (cmd) {
   19a30:	b120      	cbz	r0, 19a3c <ble_sm_pair_fail_tx+0x1e>
        cmd->reason = reason;
   19a32:	7005      	strb	r5, [r0, #0]
        ble_sm_tx(conn_handle, txom);
   19a34:	9901      	ldr	r1, [sp, #4]
   19a36:	4620      	mov	r0, r4
   19a38:	f001 fb00 	bl	1b03c <ble_sm_tx>
}
   19a3c:	b003      	add	sp, #12
   19a3e:	bd30      	pop	{r4, r5, pc}

00019a40 <ble_sm_fill_store_value>:
{
   19a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a44:	4606      	mov	r6, r0
   19a46:	4688      	mov	r8, r1
   19a48:	4617      	mov	r7, r2
   19a4a:	461d      	mov	r5, r3
   19a4c:	9c06      	ldr	r4, [sp, #24]
    memset(value_sec, 0, sizeof *value_sec);
   19a4e:	2250      	movs	r2, #80	; 0x50
   19a50:	2100      	movs	r1, #0
   19a52:	4620      	mov	r0, r4
   19a54:	f7f8 fd5f 	bl	12516 <memset>
    value_sec->peer_addr = *peer_addr;
   19a58:	6830      	ldr	r0, [r6, #0]
   19a5a:	6020      	str	r0, [r4, #0]
   19a5c:	88b2      	ldrh	r2, [r6, #4]
   19a5e:	79b3      	ldrb	r3, [r6, #6]
   19a60:	80a2      	strh	r2, [r4, #4]
   19a62:	71a3      	strb	r3, [r4, #6]
    if (keys->ediv_rand_valid && keys->ltk_valid) {
   19a64:	782b      	ldrb	r3, [r5, #0]
   19a66:	f003 0303 	and.w	r3, r3, #3
   19a6a:	2b03      	cmp	r3, #3
   19a6c:	d009      	beq.n	19a82 <ble_sm_fill_store_value+0x42>
    if (keys->irk_valid) {
   19a6e:	782b      	ldrb	r3, [r5, #0]
   19a70:	f013 0f04 	tst.w	r3, #4
   19a74:	d12e      	bne.n	19ad4 <ble_sm_fill_store_value+0x94>
    if (keys->csrk_valid) {
   19a76:	782b      	ldrb	r3, [r5, #0]
   19a78:	f013 0f08 	tst.w	r3, #8
   19a7c:	d13f      	bne.n	19afe <ble_sm_fill_store_value+0xbe>
}
   19a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        value_sec->key_size = keys->key_size;
   19a82:	7c6b      	ldrb	r3, [r5, #17]
   19a84:	71e3      	strb	r3, [r4, #7]
        value_sec->ediv = keys->ediv;
   19a86:	886b      	ldrh	r3, [r5, #2]
   19a88:	8123      	strh	r3, [r4, #8]
        value_sec->rand_num = keys->rand_val;
   19a8a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   19a8e:	e9c4 2304 	strd	r2, r3, [r4, #16]
        memcpy(value_sec->ltk, keys->ltk, sizeof value_sec->ltk);
   19a92:	462b      	mov	r3, r5
   19a94:	f853 6f12 	ldr.w	r6, [r3, #18]!
   19a98:	6858      	ldr	r0, [r3, #4]
   19a9a:	6899      	ldr	r1, [r3, #8]
   19a9c:	68db      	ldr	r3, [r3, #12]
   19a9e:	61a6      	str	r6, [r4, #24]
   19aa0:	61e0      	str	r0, [r4, #28]
   19aa2:	6221      	str	r1, [r4, #32]
   19aa4:	6263      	str	r3, [r4, #36]	; 0x24
        value_sec->ltk_present = 1;
   19aa6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   19aaa:	f043 0301 	orr.w	r3, r3, #1
   19aae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        value_sec->authenticated = !!authenticated;
   19ab2:	f118 0800 	adds.w	r8, r8, #0
   19ab6:	bf18      	it	ne
   19ab8:	f04f 0801 	movne.w	r8, #1
   19abc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   19ac0:	f368 0341 	bfi	r3, r8, #1, #1
        value_sec->sc = !!sc;
   19ac4:	3700      	adds	r7, #0
   19ac6:	bf18      	it	ne
   19ac8:	2701      	movne	r7, #1
   19aca:	f367 0382 	bfi	r3, r7, #2, #1
   19ace:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   19ad2:	e7cc      	b.n	19a6e <ble_sm_fill_store_value+0x2e>
        memcpy(value_sec->irk, keys->irk, sizeof value_sec->irk);
   19ad4:	462b      	mov	r3, r5
   19ad6:	f853 6f22 	ldr.w	r6, [r3, #34]!
   19ada:	6858      	ldr	r0, [r3, #4]
   19adc:	6899      	ldr	r1, [r3, #8]
   19ade:	68db      	ldr	r3, [r3, #12]
   19ae0:	f8c4 6029 	str.w	r6, [r4, #41]	; 0x29
   19ae4:	f8c4 002d 	str.w	r0, [r4, #45]	; 0x2d
   19ae8:	f8c4 1031 	str.w	r1, [r4, #49]	; 0x31
   19aec:	f8c4 3035 	str.w	r3, [r4, #53]	; 0x35
        value_sec->irk_present = 1;
   19af0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   19af4:	f043 0301 	orr.w	r3, r3, #1
   19af8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   19afc:	e7bb      	b.n	19a76 <ble_sm_fill_store_value+0x36>
        memcpy(value_sec->csrk, keys->csrk, sizeof value_sec->csrk);
   19afe:	f855 6f32 	ldr.w	r6, [r5, #50]!
   19b02:	6868      	ldr	r0, [r5, #4]
   19b04:	68a9      	ldr	r1, [r5, #8]
   19b06:	68ea      	ldr	r2, [r5, #12]
   19b08:	f8c4 603a 	str.w	r6, [r4, #58]	; 0x3a
   19b0c:	f8c4 003e 	str.w	r0, [r4, #62]	; 0x3e
   19b10:	f8c4 1042 	str.w	r1, [r4, #66]	; 0x42
   19b14:	f8c4 2046 	str.w	r2, [r4, #70]	; 0x46
        value_sec->csrk_present = 1;
   19b18:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   19b1c:	f043 0301 	orr.w	r3, r3, #1
   19b20:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   19b24:	e7ab      	b.n	19a7e <ble_sm_fill_store_value+0x3e>

00019b26 <ble_sm_update_sec_state>:
{
   19b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19b28:	460f      	mov	r7, r1
   19b2a:	4616      	mov	r6, r2
   19b2c:	461d      	mov	r5, r3
   19b2e:	9c06      	ldr	r4, [sp, #24]
    conn = ble_hs_conn_find(conn_handle);
   19b30:	f7fd fcba 	bl	174a8 <ble_hs_conn_find>
    if (conn != NULL) {
   19b34:	b1d0      	cbz	r0, 19b6c <ble_sm_update_sec_state+0x46>
   19b36:	4603      	mov	r3, r0
        conn->bhc_sec_state.encrypted = encrypted;
   19b38:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   19b3c:	f367 0200 	bfi	r2, r7, #0, #1
   19b40:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
        if (authenticated) {
   19b44:	b126      	cbz	r6, 19b50 <ble_sm_update_sec_state+0x2a>
            conn->bhc_sec_state.authenticated = 1;
   19b46:	b2d2      	uxtb	r2, r2
   19b48:	f042 0202 	orr.w	r2, r2, #2
   19b4c:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
        if (bonded) {
   19b50:	b12d      	cbz	r5, 19b5e <ble_sm_update_sec_state+0x38>
            conn->bhc_sec_state.bonded = 1;
   19b52:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   19b56:	f042 0204 	orr.w	r2, r2, #4
   19b5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        if (key_size) {
   19b5e:	b12c      	cbz	r4, 19b6c <ble_sm_update_sec_state+0x46>
            conn->bhc_sec_state.key_size = key_size;
   19b60:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   19b64:	f364 02c7 	bfi	r2, r4, #3, #5
   19b68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
   19b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019b6e <ble_sm_key_exch_success>:
 * $key exchange                                                             *
 *****************************************************************************/

static void
ble_sm_key_exch_success(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   19b6e:	b530      	push	{r4, r5, lr}
   19b70:	b083      	sub	sp, #12
   19b72:	4605      	mov	r5, r0
   19b74:	460c      	mov	r4, r1
    /* The procedure is now complete.  Update connection bonded state and
     * terminate procedure.
     */
    ble_sm_update_sec_state(proc->conn_handle, 1, 0, 1, proc->key_size);
   19b76:	7bc3      	ldrb	r3, [r0, #15]
   19b78:	8940      	ldrh	r0, [r0, #10]
   19b7a:	9300      	str	r3, [sp, #0]
   19b7c:	2301      	movs	r3, #1
   19b7e:	2200      	movs	r2, #0
   19b80:	4619      	mov	r1, r3
   19b82:	f7ff ffd0 	bl	19b26 <ble_sm_update_sec_state>
    proc->state = BLE_SM_PROC_STATE_NONE;
   19b86:	23ff      	movs	r3, #255	; 0xff
   19b88:	736b      	strb	r3, [r5, #13]

    res->app_status = 0;
   19b8a:	2300      	movs	r3, #0
   19b8c:	6023      	str	r3, [r4, #0]
    res->enc_cb = 1;
   19b8e:	7d23      	ldrb	r3, [r4, #20]
   19b90:	f043 0302 	orr.w	r3, r3, #2
   19b94:	7523      	strb	r3, [r4, #20]
}
   19b96:	b003      	add	sp, #12
   19b98:	bd30      	pop	{r4, r5, pc}

00019b9a <ble_sm_key_exch_exec>:

static void
ble_sm_key_exch_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                     void *arg)
{
   19b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b9e:	b08a      	sub	sp, #40	; 0x28
   19ba0:	4604      	mov	r4, r0
   19ba2:	460d      	mov	r5, r1
    uint8_t our_key_dist;
    struct os_mbuf *txom;
    const uint8_t *irk;
    int rc;

    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   19ba4:	f10d 020a 	add.w	r2, sp, #10
   19ba8:	f10d 010b 	add.w	r1, sp, #11
   19bac:	f7ff fe16 	bl	197dc <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   19bb0:	7a23      	ldrb	r3, [r4, #8]
   19bb2:	f013 0f01 	tst.w	r3, #1
   19bb6:	d018      	beq.n	19bea <ble_sm_key_exch_exec+0x50>
        our_key_dist = init_key_dist;
   19bb8:	f89d 600b 	ldrb.w	r6, [sp, #11]
    } else {
        our_key_dist = resp_key_dist;
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   19bbc:	f016 0f01 	tst.w	r6, #1
   19bc0:	d116      	bne.n	19bf0 <ble_sm_key_exch_exec+0x56>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   19bc2:	f016 0f02 	tst.w	r6, #2
   19bc6:	d179      	bne.n	19cbc <ble_sm_key_exch_exec+0x122>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   19bc8:	f016 0f04 	tst.w	r6, #4
   19bcc:	f040 80e3 	bne.w	19d96 <ble_sm_key_exch_exec+0x1fc>
        if (rc != 0) {
            goto err;
        }
    }

    if (proc->flags & BLE_SM_PROC_F_INITIATOR || proc->rx_key_flags == 0) {
   19bd0:	7a23      	ldrb	r3, [r4, #8]
   19bd2:	f013 0f01 	tst.w	r3, #1
   19bd6:	d103      	bne.n	19be0 <ble_sm_key_exch_exec+0x46>
   19bd8:	7ba3      	ldrb	r3, [r4, #14]
   19bda:	2b00      	cmp	r3, #0
   19bdc:	f040 810f 	bne.w	19dfe <ble_sm_key_exch_exec+0x264>
        /* The procedure is now complete. */
        ble_sm_key_exch_success(proc, res);
   19be0:	4629      	mov	r1, r5
   19be2:	4620      	mov	r0, r4
   19be4:	f7ff ffc3 	bl	19b6e <ble_sm_key_exch_success>
   19be8:	e109      	b.n	19dfe <ble_sm_key_exch_exec+0x264>
        our_key_dist = resp_key_dist;
   19bea:	f89d 600a 	ldrb.w	r6, [sp, #10]
   19bee:	e7e5      	b.n	19bbc <ble_sm_key_exch_exec+0x22>
        enc_info = ble_sm_cmd_get(BLE_SM_OP_ENC_INFO, sizeof(*enc_info), &txom);
   19bf0:	aa01      	add	r2, sp, #4
   19bf2:	2110      	movs	r1, #16
   19bf4:	2006      	movs	r0, #6
   19bf6:	f001 fa07 	bl	1b008 <ble_sm_cmd_get>
        if (!enc_info) {
   19bfa:	4601      	mov	r1, r0
   19bfc:	2800      	cmp	r0, #0
   19bfe:	f000 80f6 	beq.w	19dee <ble_sm_key_exch_exec+0x254>
        rc = ble_sm_gen_ltk(proc, enc_info->ltk);
   19c02:	4680      	mov	r8, r0
   19c04:	4620      	mov	r0, r4
   19c06:	f7ff febf 	bl	19988 <ble_sm_gen_ltk>
        if (rc != 0) {
   19c0a:	4607      	mov	r7, r0
   19c0c:	b118      	cbz	r0, 19c16 <ble_sm_key_exch_exec+0x7c>
            os_mbuf_free_chain(txom);
   19c0e:	9801      	ldr	r0, [sp, #4]
   19c10:	f7f7 f964 	bl	10edc <os_mbuf_free_chain>
            goto err;
   19c14:	e0ec      	b.n	19df0 <ble_sm_key_exch_exec+0x256>
        memcpy(proc->our_keys.ltk, enc_info->ltk, 16);
   19c16:	f8d8 7000 	ldr.w	r7, [r8]
   19c1a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   19c1e:	f8d8 1008 	ldr.w	r1, [r8, #8]
   19c22:	f8d8 200c 	ldr.w	r2, [r8, #12]
   19c26:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
   19c2a:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
   19c2e:	f8c4 108a 	str.w	r1, [r4, #138]	; 0x8a
   19c32:	f8c4 208e 	str.w	r2, [r4, #142]	; 0x8e
        proc->our_keys.key_size = proc->key_size;
   19c36:	7be3      	ldrb	r3, [r4, #15]
   19c38:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        proc->our_keys.ltk_valid = 1;
   19c3c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   19c40:	f043 0301 	orr.w	r3, r3, #1
   19c44:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   19c48:	9901      	ldr	r1, [sp, #4]
   19c4a:	8960      	ldrh	r0, [r4, #10]
   19c4c:	f001 f9f6 	bl	1b03c <ble_sm_tx>
        if (rc != 0) {
   19c50:	4607      	mov	r7, r0
   19c52:	2800      	cmp	r0, #0
   19c54:	f040 80cc 	bne.w	19df0 <ble_sm_key_exch_exec+0x256>
        master_id = ble_sm_cmd_get(BLE_SM_OP_MASTER_ID, sizeof(*master_id),
   19c58:	aa01      	add	r2, sp, #4
   19c5a:	210a      	movs	r1, #10
   19c5c:	2007      	movs	r0, #7
   19c5e:	f001 f9d3 	bl	1b008 <ble_sm_cmd_get>
        if (!master_id) {
   19c62:	4680      	mov	r8, r0
   19c64:	2800      	cmp	r0, #0
   19c66:	f000 80cd 	beq.w	19e04 <ble_sm_key_exch_exec+0x26a>
        rc = ble_sm_gen_ediv(master_id);
   19c6a:	f7ff fe19 	bl	198a0 <ble_sm_gen_ediv>
        if (rc != 0) {
   19c6e:	4607      	mov	r7, r0
   19c70:	b118      	cbz	r0, 19c7a <ble_sm_key_exch_exec+0xe0>
            os_mbuf_free_chain(txom);
   19c72:	9801      	ldr	r0, [sp, #4]
   19c74:	f7f7 f932 	bl	10edc <os_mbuf_free_chain>
            goto err;
   19c78:	e0ba      	b.n	19df0 <ble_sm_key_exch_exec+0x256>
        rc = ble_sm_gen_master_id_rand(master_id);
   19c7a:	4640      	mov	r0, r8
   19c7c:	f7ff fe15 	bl	198aa <ble_sm_gen_master_id_rand>
        if (rc != 0) {
   19c80:	4607      	mov	r7, r0
   19c82:	b118      	cbz	r0, 19c8c <ble_sm_key_exch_exec+0xf2>
            os_mbuf_free_chain(txom);
   19c84:	9801      	ldr	r0, [sp, #4]
   19c86:	f7f7 f929 	bl	10edc <os_mbuf_free_chain>
            goto err;
   19c8a:	e0b1      	b.n	19df0 <ble_sm_key_exch_exec+0x256>
        proc->our_keys.ediv_rand_valid = 1;
   19c8c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   19c90:	f043 0302 	orr.w	r3, r3, #2
   19c94:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        proc->our_keys.rand_val = master_id->rand_val;
   19c98:	f8d8 2002 	ldr.w	r2, [r8, #2]
   19c9c:	f8d8 3006 	ldr.w	r3, [r8, #6]
   19ca0:	67a2      	str	r2, [r4, #120]	; 0x78
   19ca2:	67e3      	str	r3, [r4, #124]	; 0x7c
        proc->our_keys.ediv = master_id->ediv;
   19ca4:	f8b8 3000 	ldrh.w	r3, [r8]
   19ca8:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        rc = ble_sm_tx(proc->conn_handle, txom);
   19cac:	9901      	ldr	r1, [sp, #4]
   19cae:	8960      	ldrh	r0, [r4, #10]
   19cb0:	f001 f9c4 	bl	1b03c <ble_sm_tx>
        if (rc != 0) {
   19cb4:	4607      	mov	r7, r0
   19cb6:	2800      	cmp	r0, #0
   19cb8:	d083      	beq.n	19bc2 <ble_sm_key_exch_exec+0x28>
    }

    return;

err:
   19cba:	e099      	b.n	19df0 <ble_sm_key_exch_exec+0x256>
        id_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_INFO, sizeof(*id_info),
   19cbc:	aa01      	add	r2, sp, #4
   19cbe:	2110      	movs	r1, #16
   19cc0:	2008      	movs	r0, #8
   19cc2:	f001 f9a1 	bl	1b008 <ble_sm_cmd_get>
        if (!id_info) {
   19cc6:	4680      	mov	r8, r0
   19cc8:	2800      	cmp	r0, #0
   19cca:	f000 809d 	beq.w	19e08 <ble_sm_key_exch_exec+0x26e>
        rc = ble_hs_pvcy_our_irk(&irk);
   19cce:	4668      	mov	r0, sp
   19cd0:	f7fe feb8 	bl	18a44 <ble_hs_pvcy_our_irk>
        if (rc != 0) {
   19cd4:	4607      	mov	r7, r0
   19cd6:	b118      	cbz	r0, 19ce0 <ble_sm_key_exch_exec+0x146>
            os_mbuf_free_chain(txom);
   19cd8:	9801      	ldr	r0, [sp, #4]
   19cda:	f7f7 f8ff 	bl	10edc <os_mbuf_free_chain>
            goto err;
   19cde:	e087      	b.n	19df0 <ble_sm_key_exch_exec+0x256>
        memcpy(id_info->irk, irk, 16);
   19ce0:	9b00      	ldr	r3, [sp, #0]
   19ce2:	6818      	ldr	r0, [r3, #0]
   19ce4:	6859      	ldr	r1, [r3, #4]
   19ce6:	689a      	ldr	r2, [r3, #8]
   19ce8:	68db      	ldr	r3, [r3, #12]
   19cea:	f8c8 0000 	str.w	r0, [r8]
   19cee:	f8c8 1004 	str.w	r1, [r8, #4]
   19cf2:	f8c8 2008 	str.w	r2, [r8, #8]
   19cf6:	f8c8 300c 	str.w	r3, [r8, #12]
        proc->our_keys.irk_valid = 1;
   19cfa:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   19cfe:	f043 0304 	orr.w	r3, r3, #4
   19d02:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   19d06:	9901      	ldr	r1, [sp, #4]
   19d08:	8960      	ldrh	r0, [r4, #10]
   19d0a:	f001 f997 	bl	1b03c <ble_sm_tx>
        if (rc != 0) {
   19d0e:	4607      	mov	r7, r0
   19d10:	2800      	cmp	r0, #0
   19d12:	d16d      	bne.n	19df0 <ble_sm_key_exch_exec+0x256>
        addr_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_ADDR_INFO,
   19d14:	aa01      	add	r2, sp, #4
   19d16:	2107      	movs	r1, #7
   19d18:	2009      	movs	r0, #9
   19d1a:	f001 f975 	bl	1b008 <ble_sm_cmd_get>
        if (!addr_info) {
   19d1e:	4607      	mov	r7, r0
   19d20:	2800      	cmp	r0, #0
   19d22:	d073      	beq.n	19e0c <ble_sm_key_exch_exec+0x272>
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   19d24:	8960      	ldrh	r0, [r4, #10]
   19d26:	f7fd fbd7 	bl	174d8 <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   19d2a:	a903      	add	r1, sp, #12
   19d2c:	f7fd fbf4 	bl	17518 <ble_hs_conn_addrs>
        addr_info->addr_type = addrs.our_id_addr.type;
   19d30:	f89d 200c 	ldrb.w	r2, [sp, #12]
   19d34:	463b      	mov	r3, r7
   19d36:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(addr_info->bd_addr, addrs.our_id_addr.val, 6);
   19d3a:	aa0a      	add	r2, sp, #40	; 0x28
   19d3c:	f852 1d1b 	ldr.w	r1, [r2, #-27]!
   19d40:	f8c7 1001 	str.w	r1, [r7, #1]
   19d44:	8892      	ldrh	r2, [r2, #4]
   19d46:	809a      	strh	r2, [r3, #4]
        proc->our_keys.addr_valid = 1;
   19d48:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
   19d4c:	f042 0210 	orr.w	r2, r2, #16
   19d50:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
        memcpy(proc->our_keys.irk, irk, 16);
   19d54:	9900      	ldr	r1, [sp, #0]
   19d56:	f8d1 e000 	ldr.w	lr, [r1]
   19d5a:	f8d1 c004 	ldr.w	ip, [r1, #4]
   19d5e:	6888      	ldr	r0, [r1, #8]
   19d60:	68c9      	ldr	r1, [r1, #12]
   19d62:	f8c4 e092 	str.w	lr, [r4, #146]	; 0x92
   19d66:	f8c4 c096 	str.w	ip, [r4, #150]	; 0x96
   19d6a:	f8c4 009a 	str.w	r0, [r4, #154]	; 0x9a
   19d6e:	f8c4 109e 	str.w	r1, [r4, #158]	; 0x9e
        proc->our_keys.addr_type = addr_info->addr_type;
   19d72:	783a      	ldrb	r2, [r7, #0]
   19d74:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
        memcpy(proc->our_keys.addr, addr_info->bd_addr, 6);
   19d78:	681a      	ldr	r2, [r3, #0]
   19d7a:	f8c4 20b2 	str.w	r2, [r4, #178]	; 0xb2
   19d7e:	889b      	ldrh	r3, [r3, #4]
   19d80:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
        rc = ble_sm_tx(proc->conn_handle, txom);
   19d84:	9901      	ldr	r1, [sp, #4]
   19d86:	8960      	ldrh	r0, [r4, #10]
   19d88:	f001 f958 	bl	1b03c <ble_sm_tx>
        if (rc != 0) {
   19d8c:	4607      	mov	r7, r0
   19d8e:	2800      	cmp	r0, #0
   19d90:	f43f af1a 	beq.w	19bc8 <ble_sm_key_exch_exec+0x2e>
err:
   19d94:	e02c      	b.n	19df0 <ble_sm_key_exch_exec+0x256>
        sign_info = ble_sm_cmd_get(BLE_SM_OP_SIGN_INFO, sizeof(*sign_info),
   19d96:	aa01      	add	r2, sp, #4
   19d98:	2110      	movs	r1, #16
   19d9a:	200a      	movs	r0, #10
   19d9c:	f001 f934 	bl	1b008 <ble_sm_cmd_get>
        if (!sign_info) {
   19da0:	4601      	mov	r1, r0
   19da2:	b3a8      	cbz	r0, 19e10 <ble_sm_key_exch_exec+0x276>
        rc = ble_sm_gen_csrk(proc, sign_info->sig_key);
   19da4:	4606      	mov	r6, r0
   19da6:	4620      	mov	r0, r4
   19da8:	f7ff fd85 	bl	198b6 <ble_sm_gen_csrk>
        if (rc != 0) {
   19dac:	4607      	mov	r7, r0
   19dae:	b118      	cbz	r0, 19db8 <ble_sm_key_exch_exec+0x21e>
            os_mbuf_free_chain(txom);
   19db0:	9801      	ldr	r0, [sp, #4]
   19db2:	f7f7 f893 	bl	10edc <os_mbuf_free_chain>
            goto err;
   19db6:	e01b      	b.n	19df0 <ble_sm_key_exch_exec+0x256>
        proc->our_keys.csrk_valid = 1;
   19db8:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   19dbc:	f043 0308 	orr.w	r3, r3, #8
   19dc0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        memcpy(proc->our_keys.csrk, sign_info->sig_key, 16);
   19dc4:	6837      	ldr	r7, [r6, #0]
   19dc6:	6870      	ldr	r0, [r6, #4]
   19dc8:	68b1      	ldr	r1, [r6, #8]
   19dca:	68f2      	ldr	r2, [r6, #12]
   19dcc:	f8c4 70a2 	str.w	r7, [r4, #162]	; 0xa2
   19dd0:	f8c4 00a6 	str.w	r0, [r4, #166]	; 0xa6
   19dd4:	f8c4 10aa 	str.w	r1, [r4, #170]	; 0xaa
   19dd8:	f8c4 20ae 	str.w	r2, [r4, #174]	; 0xae
        rc = ble_sm_tx(proc->conn_handle, txom);
   19ddc:	9901      	ldr	r1, [sp, #4]
   19dde:	8960      	ldrh	r0, [r4, #10]
   19de0:	f001 f92c 	bl	1b03c <ble_sm_tx>
        if (rc != 0) {
   19de4:	4607      	mov	r7, r0
   19de6:	2800      	cmp	r0, #0
   19de8:	f43f aef2 	beq.w	19bd0 <ble_sm_key_exch_exec+0x36>
err:
   19dec:	e000      	b.n	19df0 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   19dee:	2706      	movs	r7, #6
    res->app_status = rc;
   19df0:	602f      	str	r7, [r5, #0]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   19df2:	2308      	movs	r3, #8
   19df4:	712b      	strb	r3, [r5, #4]
    res->enc_cb = 1;
   19df6:	7d2b      	ldrb	r3, [r5, #20]
   19df8:	f043 0302 	orr.w	r3, r3, #2
   19dfc:	752b      	strb	r3, [r5, #20]
}
   19dfe:	b00a      	add	sp, #40	; 0x28
   19e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   19e04:	2706      	movs	r7, #6
   19e06:	e7f3      	b.n	19df0 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   19e08:	2706      	movs	r7, #6
   19e0a:	e7f1      	b.n	19df0 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   19e0c:	2706      	movs	r7, #6
   19e0e:	e7ef      	b.n	19df0 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   19e10:	2706      	movs	r7, #6
   19e12:	e7ed      	b.n	19df0 <ble_sm_key_exch_exec+0x256>

00019e14 <ble_sm_key_rxed>:

static void
ble_sm_key_rxed(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   19e14:	b508      	push	{r3, lr}
    BLE_HS_LOG(DEBUG, "rx_key_flags=0x%02x\n", proc->rx_key_flags);

    if (proc->rx_key_flags == 0) {
   19e16:	7b83      	ldrb	r3, [r0, #14]
   19e18:	b93b      	cbnz	r3, 19e2a <ble_sm_key_rxed+0x16>
        /* The peer is done sending keys.  If we are the initiator, we need to
         * send ours.  If we are the responder, the procedure is complete.
         */
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   19e1a:	7a03      	ldrb	r3, [r0, #8]
   19e1c:	f013 0f01 	tst.w	r3, #1
   19e20:	d004      	beq.n	19e2c <ble_sm_key_rxed+0x18>
            res->execute = 1;
   19e22:	7d0b      	ldrb	r3, [r1, #20]
   19e24:	f043 0301 	orr.w	r3, r3, #1
   19e28:	750b      	strb	r3, [r1, #20]
        } else {
            ble_sm_key_exch_success(proc, res);
        }
    }
}
   19e2a:	bd08      	pop	{r3, pc}
            ble_sm_key_exch_success(proc, res);
   19e2c:	f7ff fe9f 	bl	19b6e <ble_sm_key_exch_success>
}
   19e30:	e7fb      	b.n	19e2a <ble_sm_key_rxed+0x16>

00019e32 <ble_sm_start_encrypt_tx>:
{
   19e32:	b500      	push	{lr}
   19e34:	b089      	sub	sp, #36	; 0x24
    ble_hs_hci_cmd_build_le_start_encrypt(cmd, buf, sizeof buf);
   19e36:	221c      	movs	r2, #28
   19e38:	a901      	add	r1, sp, #4
   19e3a:	f7fe f824 	bl	17e86 <ble_hs_hci_cmd_build_le_start_encrypt>
    rc = ble_hs_hci_cmd_tx_empty_ack(BLE_HCI_OP(BLE_HCI_OGF_LE,
   19e3e:	221c      	movs	r2, #28
   19e40:	a901      	add	r1, sp, #4
   19e42:	f242 0019 	movw	r0, #8217	; 0x2019
   19e46:	f7fd fd6d 	bl	17924 <ble_hs_hci_cmd_tx_empty_ack>
}
   19e4a:	b009      	add	sp, #36	; 0x24
   19e4c:	f85d fb04 	ldr.w	pc, [sp], #4

00019e50 <ble_sm_enc_restore_exec>:
{
   19e50:	b510      	push	{r4, lr}
   19e52:	460c      	mov	r4, r1
    res->app_status = ble_sm_start_encrypt_tx(cmd);
   19e54:	4610      	mov	r0, r2
   19e56:	f7ff ffec 	bl	19e32 <ble_sm_start_encrypt_tx>
   19e5a:	6020      	str	r0, [r4, #0]
}
   19e5c:	bd10      	pop	{r4, pc}

00019e5e <ble_sm_enc_start_exec>:
{
   19e5e:	b530      	push	{r4, r5, lr}
   19e60:	b089      	sub	sp, #36	; 0x24
   19e62:	460d      	mov	r5, r1
    cmd.connection_handle = proc->conn_handle;
   19e64:	8943      	ldrh	r3, [r0, #10]
   19e66:	f8ad 3000 	strh.w	r3, [sp]
    cmd.encrypted_diversifier = 0;
   19e6a:	2300      	movs	r3, #0
   19e6c:	f8ad 3002 	strh.w	r3, [sp, #2]
    cmd.random_number = 0;
   19e70:	2200      	movs	r2, #0
   19e72:	2300      	movs	r3, #0
   19e74:	e9cd 2302 	strd	r2, r3, [sp, #8]
    memcpy(cmd.long_term_key, proc->ltk, sizeof cmd.long_term_key);
   19e78:	ac04      	add	r4, sp, #16
   19e7a:	4603      	mov	r3, r0
   19e7c:	f853 0f5e 	ldr.w	r0, [r3, #94]!
   19e80:	6859      	ldr	r1, [r3, #4]
   19e82:	689a      	ldr	r2, [r3, #8]
   19e84:	68db      	ldr	r3, [r3, #12]
   19e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    rc = ble_sm_start_encrypt_tx(&cmd);
   19e88:	4668      	mov	r0, sp
   19e8a:	f7ff ffd2 	bl	19e32 <ble_sm_start_encrypt_tx>
    if (rc != 0) {
   19e8e:	b130      	cbz	r0, 19e9e <ble_sm_enc_start_exec+0x40>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   19e90:	2208      	movs	r2, #8
   19e92:	712a      	strb	r2, [r5, #4]
        res->app_status = rc;
   19e94:	6028      	str	r0, [r5, #0]
        res->enc_cb = 1;
   19e96:	7d2b      	ldrb	r3, [r5, #20]
   19e98:	f043 0302 	orr.w	r3, r3, #2
   19e9c:	752b      	strb	r3, [r5, #20]
}
   19e9e:	b009      	add	sp, #36	; 0x24
   19ea0:	bd30      	pop	{r4, r5, pc}

00019ea2 <ble_sm_ltk_req_reply_tx>:
{
   19ea2:	b530      	push	{r4, r5, lr}
   19ea4:	b08f      	sub	sp, #60	; 0x3c
   19ea6:	4604      	mov	r4, r0
    cmd.conn_handle = conn_handle;
   19ea8:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    memcpy(cmd.long_term_key, ltk, 16);
   19eac:	680d      	ldr	r5, [r1, #0]
   19eae:	6848      	ldr	r0, [r1, #4]
   19eb0:	688a      	ldr	r2, [r1, #8]
   19eb2:	68cb      	ldr	r3, [r1, #12]
   19eb4:	f8cd 5026 	str.w	r5, [sp, #38]	; 0x26
   19eb8:	f8cd 002a 	str.w	r0, [sp, #42]	; 0x2a
   19ebc:	f8cd 202e 	str.w	r2, [sp, #46]	; 0x2e
   19ec0:	f8cd 3032 	str.w	r3, [sp, #50]	; 0x32
    ble_hs_hci_cmd_build_le_lt_key_req_reply(&cmd, buf, sizeof buf);
   19ec4:	2212      	movs	r2, #18
   19ec6:	a904      	add	r1, sp, #16
   19ec8:	a809      	add	r0, sp, #36	; 0x24
   19eca:	f7fd ffc9 	bl	17e60 <ble_hs_hci_cmd_build_le_lt_key_req_reply>
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   19ece:	f10d 030f 	add.w	r3, sp, #15
   19ed2:	9301      	str	r3, [sp, #4]
   19ed4:	2302      	movs	r3, #2
   19ed6:	9300      	str	r3, [sp, #0]
   19ed8:	f10d 0322 	add.w	r3, sp, #34	; 0x22
   19edc:	2212      	movs	r2, #18
   19ede:	a904      	add	r1, sp, #16
   19ee0:	f242 001a 	movw	r0, #8218	; 0x201a
   19ee4:	f7fd fce6 	bl	178b4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   19ee8:	4603      	mov	r3, r0
   19eea:	b950      	cbnz	r0, 19f02 <ble_sm_ltk_req_reply_tx+0x60>
    if (ack_params_len != BLE_HCI_LT_KEY_REQ_REPLY_ACK_PARAM_LEN) {
   19eec:	f89d 200f 	ldrb.w	r2, [sp, #15]
   19ef0:	2a02      	cmp	r2, #2
   19ef2:	d105      	bne.n	19f00 <ble_sm_ltk_req_reply_tx+0x5e>
    if (le16toh(ack_conn_handle) != conn_handle) {
   19ef4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   19ef8:	42a2      	cmp	r2, r4
   19efa:	d002      	beq.n	19f02 <ble_sm_ltk_req_reply_tx+0x60>
        return BLE_HS_ECONTROLLER;
   19efc:	230c      	movs	r3, #12
   19efe:	e000      	b.n	19f02 <ble_sm_ltk_req_reply_tx+0x60>
        return BLE_HS_ECONTROLLER;
   19f00:	230c      	movs	r3, #12
}
   19f02:	4618      	mov	r0, r3
   19f04:	b00f      	add	sp, #60	; 0x3c
   19f06:	bd30      	pop	{r4, r5, pc}

00019f08 <ble_sm_ltk_start_exec>:
{
   19f08:	b538      	push	{r3, r4, r5, lr}
   19f0a:	4604      	mov	r4, r0
   19f0c:	460d      	mov	r5, r1
    res->app_status = ble_sm_ltk_req_reply_tx(proc->conn_handle, proc->ltk);
   19f0e:	f100 015e 	add.w	r1, r0, #94	; 0x5e
   19f12:	8940      	ldrh	r0, [r0, #10]
   19f14:	f7ff ffc5 	bl	19ea2 <ble_sm_ltk_req_reply_tx>
   19f18:	6028      	str	r0, [r5, #0]
    if (res->app_status == 0) {
   19f1a:	b120      	cbz	r0, 19f26 <ble_sm_ltk_start_exec+0x1e>
        res->enc_cb = 1;
   19f1c:	7d2b      	ldrb	r3, [r5, #20]
   19f1e:	f043 0302 	orr.w	r3, r3, #2
   19f22:	752b      	strb	r3, [r5, #20]
}
   19f24:	bd38      	pop	{r3, r4, r5, pc}
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   19f26:	2305      	movs	r3, #5
   19f28:	7363      	strb	r3, [r4, #13]
   19f2a:	e7fb      	b.n	19f24 <ble_sm_ltk_start_exec+0x1c>

00019f2c <ble_sm_ltk_req_neg_reply_tx>:
{
   19f2c:	b510      	push	{r4, lr}
   19f2e:	b084      	sub	sp, #16
   19f30:	4604      	mov	r4, r0
    ble_hs_hci_cmd_build_le_lt_key_req_neg_reply(conn_handle, buf, sizeof buf);
   19f32:	2202      	movs	r2, #2
   19f34:	a903      	add	r1, sp, #12
   19f36:	f7fd ff97 	bl	17e68 <ble_hs_hci_cmd_build_le_lt_key_req_neg_reply>
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   19f3a:	f10d 030b 	add.w	r3, sp, #11
   19f3e:	9301      	str	r3, [sp, #4]
   19f40:	2202      	movs	r2, #2
   19f42:	9200      	str	r2, [sp, #0]
   19f44:	f10d 030e 	add.w	r3, sp, #14
   19f48:	a903      	add	r1, sp, #12
   19f4a:	f242 001b 	movw	r0, #8219	; 0x201b
   19f4e:	f7fd fcb1 	bl	178b4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   19f52:	4603      	mov	r3, r0
   19f54:	b950      	cbnz	r0, 19f6c <ble_sm_ltk_req_neg_reply_tx+0x40>
    if (ack_params_len != BLE_HCI_LT_KEY_REQ_NEG_REPLY_ACK_PARAM_LEN) {
   19f56:	f89d 200b 	ldrb.w	r2, [sp, #11]
   19f5a:	2a02      	cmp	r2, #2
   19f5c:	d105      	bne.n	19f6a <ble_sm_ltk_req_neg_reply_tx+0x3e>
    if (le16toh(ack_conn_handle) != conn_handle) {
   19f5e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   19f62:	42a2      	cmp	r2, r4
   19f64:	d002      	beq.n	19f6c <ble_sm_ltk_req_neg_reply_tx+0x40>
        return BLE_HS_ECONTROLLER;
   19f66:	230c      	movs	r3, #12
   19f68:	e000      	b.n	19f6c <ble_sm_ltk_req_neg_reply_tx+0x40>
        return BLE_HS_ECONTROLLER;
   19f6a:	230c      	movs	r3, #12
}
   19f6c:	4618      	mov	r0, r3
   19f6e:	b004      	add	sp, #16
   19f70:	bd10      	pop	{r4, pc}

00019f72 <ble_sm_ltk_restore_exec>:
{
   19f72:	b570      	push	{r4, r5, r6, lr}
   19f74:	4605      	mov	r5, r0
   19f76:	460c      	mov	r4, r1
    if (value_sec != NULL) {
   19f78:	b1e2      	cbz	r2, 19fb4 <ble_sm_ltk_restore_exec+0x42>
   19f7a:	4616      	mov	r6, r2
        res->app_status = ble_sm_ltk_req_reply_tx(
   19f7c:	f102 0118 	add.w	r1, r2, #24
   19f80:	8940      	ldrh	r0, [r0, #10]
   19f82:	f7ff ff8e 	bl	19ea2 <ble_sm_ltk_req_reply_tx>
   19f86:	6020      	str	r0, [r4, #0]
        if (res->app_status == 0) {
   19f88:	b958      	cbnz	r0, 19fa2 <ble_sm_ltk_restore_exec+0x30>
            proc->key_size = value_sec->key_size;
   19f8a:	79f3      	ldrb	r3, [r6, #7]
   19f8c:	73eb      	strb	r3, [r5, #15]
            if (value_sec->authenticated) {
   19f8e:	f896 304a 	ldrb.w	r3, [r6, #74]	; 0x4a
   19f92:	f013 0f02 	tst.w	r3, #2
   19f96:	d008      	beq.n	19faa <ble_sm_ltk_restore_exec+0x38>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   19f98:	7a2b      	ldrb	r3, [r5, #8]
   19f9a:	f043 0308 	orr.w	r3, r3, #8
   19f9e:	722b      	strb	r3, [r5, #8]
   19fa0:	e003      	b.n	19faa <ble_sm_ltk_restore_exec+0x38>
            res->enc_cb = 1;
   19fa2:	7d23      	ldrb	r3, [r4, #20]
   19fa4:	f043 0302 	orr.w	r3, r3, #2
   19fa8:	7523      	strb	r3, [r4, #20]
    if (res->app_status == 0) {
   19faa:	6823      	ldr	r3, [r4, #0]
   19fac:	b90b      	cbnz	r3, 19fb2 <ble_sm_ltk_restore_exec+0x40>
        proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   19fae:	2306      	movs	r3, #6
   19fb0:	736b      	strb	r3, [r5, #13]
}
   19fb2:	bd70      	pop	{r4, r5, r6, pc}
        ble_sm_ltk_req_neg_reply_tx(proc->conn_handle);
   19fb4:	8940      	ldrh	r0, [r0, #10]
   19fb6:	f7ff ffb9 	bl	19f2c <ble_sm_ltk_req_neg_reply_tx>
        res->app_status = BLE_HS_ENOENT;
   19fba:	2305      	movs	r3, #5
   19fbc:	6023      	str	r3, [r4, #0]
   19fbe:	e7f4      	b.n	19faa <ble_sm_ltk_restore_exec+0x38>

00019fc0 <ble_sm_random_exec>:
{
   19fc0:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   19fc2:	7a03      	ldrb	r3, [r0, #8]
   19fc4:	f013 0f10 	tst.w	r3, #16
   19fc8:	d000      	beq.n	19fcc <ble_sm_random_exec+0xc>
}
   19fca:	bd08      	pop	{r3, pc}
        ble_sm_lgcy_random_exec(proc, res);
   19fcc:	f001 f904 	bl	1b1d8 <ble_sm_lgcy_random_exec>
}
   19fd0:	e7fb      	b.n	19fca <ble_sm_random_exec+0xa>

00019fd2 <ble_sm_confirm_exec>:
{
   19fd2:	b508      	push	{r3, lr}
    if (!(proc->flags & BLE_SM_PROC_F_SC)) {
   19fd4:	7a03      	ldrb	r3, [r0, #8]
   19fd6:	f013 0f10 	tst.w	r3, #16
   19fda:	d000      	beq.n	19fde <ble_sm_confirm_exec+0xc>
}
   19fdc:	bd08      	pop	{r3, pc}
        ble_sm_lgcy_confirm_exec(proc, res);
   19fde:	f001 f8ad 	bl	1b13c <ble_sm_lgcy_confirm_exec>
}
   19fe2:	e7fb      	b.n	19fdc <ble_sm_confirm_exec+0xa>

00019fe4 <ble_sm_proc_set_timer>:
{
   19fe4:	b510      	push	{r4, lr}
   19fe6:	4604      	mov	r4, r0
   19fe8:	f7f8 f8a8 	bl	1213c <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   19fec:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   19ff0:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   19ff2:	f7fc fd61 	bl	16ab8 <ble_hs_timer_resched>
}
   19ff6:	bd10      	pop	{r4, pc}

00019ff8 <ble_sm_extract_expired>:
{
   19ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ffa:	4605      	mov	r5, r0
   19ffc:	f7f8 f89e 	bl	1213c <os_time_get>
   1a000:	4607      	mov	r7, r0
    STAILQ_INIT(dst_list);
   1a002:	2400      	movs	r4, #0
   1a004:	602c      	str	r4, [r5, #0]
   1a006:	606d      	str	r5, [r5, #4]
    ble_hs_lock();
   1a008:	f7fc fc78 	bl	168fc <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_sm_procs);
   1a00c:	4b15      	ldr	r3, [pc, #84]	; (1a064 <ble_sm_extract_expired+0x6c>)
   1a00e:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   1a010:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    while (proc != NULL) {
   1a014:	e00a      	b.n	1a02c <ble_sm_extract_expired+0x34>
            if (prev == NULL) {
   1a016:	b19c      	cbz	r4, 1a040 <ble_sm_extract_expired+0x48>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   1a018:	6822      	ldr	r2, [r4, #0]
   1a01a:	6812      	ldr	r2, [r2, #0]
   1a01c:	6022      	str	r2, [r4, #0]
   1a01e:	b1c2      	cbz	r2, 1a052 <ble_sm_extract_expired+0x5a>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   1a020:	682a      	ldr	r2, [r5, #0]
   1a022:	601a      	str	r2, [r3, #0]
   1a024:	b1c2      	cbz	r2, 1a058 <ble_sm_extract_expired+0x60>
   1a026:	602b      	str	r3, [r5, #0]
                next_exp_in = time_diff;
   1a028:	461c      	mov	r4, r3
   1a02a:	4603      	mov	r3, r0
    while (proc != NULL) {
   1a02c:	b1b3      	cbz	r3, 1a05c <ble_sm_extract_expired+0x64>
        next = STAILQ_NEXT(proc, next);
   1a02e:	6818      	ldr	r0, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   1a030:	685a      	ldr	r2, [r3, #4]
   1a032:	1bd2      	subs	r2, r2, r7
        if (time_diff <= 0) {
   1a034:	2a00      	cmp	r2, #0
   1a036:	ddee      	ble.n	1a016 <ble_sm_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   1a038:	4296      	cmp	r6, r2
   1a03a:	ddf5      	ble.n	1a028 <ble_sm_extract_expired+0x30>
                next_exp_in = time_diff;
   1a03c:	4616      	mov	r6, r2
   1a03e:	e7f3      	b.n	1a028 <ble_sm_extract_expired+0x30>
                STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   1a040:	4908      	ldr	r1, [pc, #32]	; (1a064 <ble_sm_extract_expired+0x6c>)
   1a042:	680a      	ldr	r2, [r1, #0]
   1a044:	6812      	ldr	r2, [r2, #0]
   1a046:	600a      	str	r2, [r1, #0]
   1a048:	2a00      	cmp	r2, #0
   1a04a:	d1e9      	bne.n	1a020 <ble_sm_extract_expired+0x28>
   1a04c:	460a      	mov	r2, r1
   1a04e:	6051      	str	r1, [r2, #4]
   1a050:	e7e6      	b.n	1a020 <ble_sm_extract_expired+0x28>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   1a052:	4a04      	ldr	r2, [pc, #16]	; (1a064 <ble_sm_extract_expired+0x6c>)
   1a054:	6054      	str	r4, [r2, #4]
   1a056:	e7e3      	b.n	1a020 <ble_sm_extract_expired+0x28>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   1a058:	606b      	str	r3, [r5, #4]
   1a05a:	e7e4      	b.n	1a026 <ble_sm_extract_expired+0x2e>
    ble_hs_unlock();
   1a05c:	f7fc fc52 	bl	16904 <ble_hs_unlock>
}
   1a060:	4630      	mov	r0, r6
   1a062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a064:	20002c40 	.word	0x20002c40

0001a068 <ble_sm_persist_keys>:
{
   1a068:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a06a:	b09b      	sub	sp, #108	; 0x6c
   1a06c:	4604      	mov	r4, r0
    ble_hs_lock();
   1a06e:	f7fc fc45 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find(proc->conn_handle);
   1a072:	8960      	ldrh	r0, [r4, #10]
   1a074:	f7fd fa18 	bl	174a8 <ble_hs_conn_find>
   1a078:	4605      	mov	r5, r0
    if (proc->peer_keys.addr_valid) {
   1a07a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   1a07e:	f013 0f10 	tst.w	r3, #16
   1a082:	d052      	beq.n	1a12a <ble_sm_persist_keys+0xc2>
        peer_addr.type = proc->peer_keys.addr_type;
   1a084:	f894 60c8 	ldrb.w	r6, [r4, #200]	; 0xc8
   1a088:	f88d 6008 	strb.w	r6, [sp, #8]
        memcpy(peer_addr.val, proc->peer_keys.addr, sizeof peer_addr.val);
   1a08c:	4623      	mov	r3, r4
   1a08e:	f853 2ffa 	ldr.w	r2, [r3, #250]!
   1a092:	f8cd 2009 	str.w	r2, [sp, #9]
   1a096:	889b      	ldrh	r3, [r3, #4]
   1a098:	f8ad 300d 	strh.w	r3, [sp, #13]
        conn->bhc_peer_addr = peer_addr;
   1a09c:	9802      	ldr	r0, [sp, #8]
   1a09e:	f8c5 0007 	str.w	r0, [r5, #7]
   1a0a2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1a0a6:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1a0aa:	f8a5 100b 	strh.w	r1, [r5, #11]
   1a0ae:	736a      	strb	r2, [r5, #13]
        if (memcmp(BLE_ADDR_ANY->val, &conn->bhc_peer_rpa_addr.val, 6) != 0) {
   1a0b0:	2300      	movs	r3, #0
   1a0b2:	9318      	str	r3, [sp, #96]	; 0x60
   1a0b4:	f8cd 3063 	str.w	r3, [sp, #99]	; 0x63
   1a0b8:	2206      	movs	r2, #6
   1a0ba:	f105 0116 	add.w	r1, r5, #22
   1a0be:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   1a0c2:	f7f8 f9db 	bl	1247c <memcmp>
   1a0c6:	b128      	cbz	r0, 1a0d4 <ble_sm_persist_keys+0x6c>
            switch (peer_addr.type) {
   1a0c8:	2e03      	cmp	r6, #3
   1a0ca:	d808      	bhi.n	1a0de <ble_sm_persist_keys+0x76>
   1a0cc:	e8df f006 	tbb	[pc, r6]
   1a0d0:	2a052a05 	.word	0x2a052a05
    ble_hs_unlock();
   1a0d4:	f7fc fc16 	bl	16904 <ble_hs_unlock>
   1a0d8:	e006      	b.n	1a0e8 <ble_sm_persist_keys+0x80>
                conn->bhc_peer_addr.type = BLE_ADDR_PUBLIC_ID;
   1a0da:	2302      	movs	r3, #2
   1a0dc:	71eb      	strb	r3, [r5, #7]
    ble_hs_unlock();
   1a0de:	f7fc fc11 	bl	16904 <ble_hs_unlock>
        ble_gap_identity_event(proc->conn_handle);
   1a0e2:	8960      	ldrh	r0, [r4, #10]
   1a0e4:	f7f9 ff99 	bl	1401a <ble_gap_identity_event>
    authenticated = proc->flags & BLE_SM_PROC_F_AUTHENTICATED;
   1a0e8:	7a25      	ldrb	r5, [r4, #8]
   1a0ea:	f005 0708 	and.w	r7, r5, #8
    sc = proc->flags & BLE_SM_PROC_F_SC;
   1a0ee:	f005 0510 	and.w	r5, r5, #16
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->our_keys,
   1a0f2:	ae04      	add	r6, sp, #16
   1a0f4:	9600      	str	r6, [sp, #0]
   1a0f6:	f104 0370 	add.w	r3, r4, #112	; 0x70
   1a0fa:	462a      	mov	r2, r5
   1a0fc:	4639      	mov	r1, r7
   1a0fe:	a802      	add	r0, sp, #8
   1a100:	f7ff fc9e 	bl	19a40 <ble_sm_fill_store_value>
    ble_store_write_our_sec(&value_sec);
   1a104:	4630      	mov	r0, r6
   1a106:	f001 f962 	bl	1b3ce <ble_store_write_our_sec>
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->peer_keys,
   1a10a:	9600      	str	r6, [sp, #0]
   1a10c:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1a110:	462a      	mov	r2, r5
   1a112:	4639      	mov	r1, r7
   1a114:	a802      	add	r0, sp, #8
   1a116:	f7ff fc93 	bl	19a40 <ble_sm_fill_store_value>
    ble_store_write_peer_sec(&value_sec);
   1a11a:	4630      	mov	r0, r6
   1a11c:	f001 f964 	bl	1b3e8 <ble_store_write_peer_sec>
}
   1a120:	b01b      	add	sp, #108	; 0x6c
   1a122:	bdf0      	pop	{r4, r5, r6, r7, pc}
                conn->bhc_peer_addr.type = BLE_ADDR_RANDOM_ID;
   1a124:	2303      	movs	r3, #3
   1a126:	71eb      	strb	r3, [r5, #7]
                break;
   1a128:	e7d9      	b.n	1a0de <ble_sm_persist_keys+0x76>
        peer_addr = conn->bhc_peer_addr;
   1a12a:	4603      	mov	r3, r0
   1a12c:	f853 0f07 	ldr.w	r0, [r3, #7]!
   1a130:	9002      	str	r0, [sp, #8]
   1a132:	889a      	ldrh	r2, [r3, #4]
   1a134:	799b      	ldrb	r3, [r3, #6]
   1a136:	f8ad 200c 	strh.w	r2, [sp, #12]
   1a13a:	f88d 300e 	strb.w	r3, [sp, #14]
        peer_addr.type = ble_hs_misc_addr_type_to_id(conn->bhc_peer_addr.type);
   1a13e:	79e8      	ldrb	r0, [r5, #7]
   1a140:	f7fe fbc6 	bl	188d0 <ble_hs_misc_addr_type_to_id>
   1a144:	f88d 0008 	strb.w	r0, [sp, #8]
    ble_hs_unlock();
   1a148:	f7fc fbdc 	bl	16904 <ble_hs_unlock>
   1a14c:	e7cc      	b.n	1a0e8 <ble_sm_persist_keys+0x80>
	...

0001a150 <ble_sm_proc_free>:
    if (proc != NULL) {
   1a150:	b128      	cbz	r0, 1a15e <ble_sm_proc_free+0xe>
{
   1a152:	b508      	push	{r3, lr}
   1a154:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_sm_proc_pool, proc);
   1a156:	4802      	ldr	r0, [pc, #8]	; (1a160 <ble_sm_proc_free+0x10>)
   1a158:	f7f7 fb3d 	bl	117d6 <os_memblock_put>
}
   1a15c:	bd08      	pop	{r3, pc}
   1a15e:	4770      	bx	lr
   1a160:	20002c24 	.word	0x20002c24

0001a164 <ble_sm_proc_alloc>:
{
   1a164:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_sm_proc_pool);
   1a166:	4806      	ldr	r0, [pc, #24]	; (1a180 <ble_sm_proc_alloc+0x1c>)
   1a168:	f7f7 fb0d 	bl	11786 <os_memblock_get>
    if (proc != NULL) {
   1a16c:	4604      	mov	r4, r0
   1a16e:	b120      	cbz	r0, 1a17a <ble_sm_proc_alloc+0x16>
        memset(proc, 0, sizeof *proc);
   1a170:	f44f 7280 	mov.w	r2, #256	; 0x100
   1a174:	2100      	movs	r1, #0
   1a176:	f7f8 f9ce 	bl	12516 <memset>
}
   1a17a:	4620      	mov	r0, r4
   1a17c:	bd10      	pop	{r4, pc}
   1a17e:	bf00      	nop
   1a180:	20002c24 	.word	0x20002c24

0001a184 <ble_sm_retrieve_ltk>:
{
   1a184:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a186:	b089      	sub	sp, #36	; 0x24
   1a188:	4604      	mov	r4, r0
   1a18a:	460f      	mov	r7, r1
   1a18c:	4615      	mov	r5, r2
   1a18e:	461e      	mov	r6, r3
    memset(&key_sec, 0, sizeof key_sec);
   1a190:	2220      	movs	r2, #32
   1a192:	2100      	movs	r1, #0
   1a194:	4668      	mov	r0, sp
   1a196:	f7f8 f9be 	bl	12516 <memset>
    key_sec.peer_addr.type = peer_addr_type;
   1a19a:	f88d 7000 	strb.w	r7, [sp]
    memcpy(key_sec.peer_addr.val, peer_addr, 6);
   1a19e:	682b      	ldr	r3, [r5, #0]
   1a1a0:	f8cd 3001 	str.w	r3, [sp, #1]
   1a1a4:	88ab      	ldrh	r3, [r5, #4]
   1a1a6:	f8ad 3005 	strh.w	r3, [sp, #5]
    key_sec.ediv = evt->encrypted_diversifier;
   1a1aa:	8963      	ldrh	r3, [r4, #10]
   1a1ac:	f8ad 3008 	strh.w	r3, [sp, #8]
    key_sec.rand_num = evt->random_number;
   1a1b0:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a1b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    key_sec.ediv_rand_present = 1;
   1a1b8:	2301      	movs	r3, #1
   1a1ba:	f88d 3018 	strb.w	r3, [sp, #24]
    rc = ble_store_read_our_sec(&key_sec, value_sec);
   1a1be:	4631      	mov	r1, r6
   1a1c0:	4668      	mov	r0, sp
   1a1c2:	f001 f8fd 	bl	1b3c0 <ble_store_read_our_sec>
}
   1a1c6:	b009      	add	sp, #36	; 0x24
   1a1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a1ca <ble_sm_fail_rx>:
 *****************************************************************************/

static void
ble_sm_fail_rx(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
   1a1ca:	b538      	push	{r3, r4, r5, lr}
   1a1cc:	460d      	mov	r5, r1
   1a1ce:	4614      	mov	r4, r2
    struct ble_sm_pair_fail *cmd;

    res->enc_cb = 1;
   1a1d0:	7d13      	ldrb	r3, [r2, #20]
   1a1d2:	f043 0302 	orr.w	r3, r3, #2
   1a1d6:	7513      	strb	r3, [r2, #20]

    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   1a1d8:	2101      	movs	r1, #1
   1a1da:	4628      	mov	r0, r5
   1a1dc:	f7fe fb2e 	bl	1883c <ble_hs_mbuf_pullup_base>
   1a1e0:	6020      	str	r0, [r4, #0]
    if (res->app_status == 0) {
   1a1e2:	b930      	cbnz	r0, 1a1f2 <ble_sm_fail_rx+0x28>
        cmd = (struct ble_sm_pair_fail *)(*om)->om_data;
   1a1e4:	682b      	ldr	r3, [r5, #0]
   1a1e6:	681b      	ldr	r3, [r3, #0]
        BLE_SM_LOG_CMD(0, "fail", conn_handle, ble_sm_pair_fail_log, cmd);

        res->app_status = BLE_HS_SM_PEER_ERR(cmd->reason);
   1a1e8:	781b      	ldrb	r3, [r3, #0]
   1a1ea:	b10b      	cbz	r3, 1a1f0 <ble_sm_fail_rx+0x26>
   1a1ec:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
   1a1f0:	6020      	str	r0, [r4, #0]
    }
}
   1a1f2:	bd38      	pop	{r3, r4, r5, pc}

0001a1f4 <ble_sm_read_bond>:
{
   1a1f4:	b510      	push	{r4, lr}
   1a1f6:	b094      	sub	sp, #80	; 0x50
   1a1f8:	460c      	mov	r4, r1
    rc = ble_gap_conn_find(conn_handle, &desc);
   1a1fa:	a901      	add	r1, sp, #4
   1a1fc:	f7f9 fa7f 	bl	136fe <ble_gap_conn_find>
    if (rc != 0) {
   1a200:	4603      	mov	r3, r0
   1a202:	b110      	cbz	r0, 1a20a <ble_sm_read_bond+0x16>
}
   1a204:	4618      	mov	r0, r3
   1a206:	b014      	add	sp, #80	; 0x50
   1a208:	bd10      	pop	{r4, pc}
    memset(&key_sec, 0, sizeof key_sec);
   1a20a:	2300      	movs	r3, #0
   1a20c:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   1a210:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   1a214:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
   1a218:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
   1a21c:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
   1a220:	f8cd 304a 	str.w	r3, [sp, #74]	; 0x4a
   1a224:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    key_sec.peer_addr = desc.peer_id_addr;
   1a228:	ab14      	add	r3, sp, #80	; 0x50
   1a22a:	f853 0d41 	ldr.w	r0, [r3, #-65]!
   1a22e:	900c      	str	r0, [sp, #48]	; 0x30
   1a230:	889a      	ldrh	r2, [r3, #4]
   1a232:	799b      	ldrb	r3, [r3, #6]
   1a234:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   1a238:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    rc = ble_store_read_peer_sec(&key_sec, out_bond);
   1a23c:	4621      	mov	r1, r4
   1a23e:	a80c      	add	r0, sp, #48	; 0x30
   1a240:	f001 f8cb 	bl	1b3da <ble_store_read_peer_sec>
   1a244:	4603      	mov	r3, r0
    return rc;
   1a246:	e7dd      	b.n	1a204 <ble_sm_read_bond+0x10>

0001a248 <ble_sm_chk_repeat_pairing>:
{
   1a248:	b570      	push	{r4, r5, r6, lr}
   1a24a:	b096      	sub	sp, #88	; 0x58
   1a24c:	4604      	mov	r4, r0
   1a24e:	460d      	mov	r5, r1
   1a250:	4616      	mov	r6, r2
        rc = ble_sm_read_bond(conn_handle, &bond);
   1a252:	4669      	mov	r1, sp
   1a254:	4620      	mov	r0, r4
   1a256:	f7ff ffcd 	bl	1a1f4 <ble_sm_read_bond>
        switch (rc) {
   1a25a:	4603      	mov	r3, r0
   1a25c:	b128      	cbz	r0, 1a26a <ble_sm_chk_repeat_pairing+0x22>
   1a25e:	2805      	cmp	r0, #5
   1a260:	d100      	bne.n	1a264 <ble_sm_chk_repeat_pairing+0x1c>
            return 0;
   1a262:	2300      	movs	r3, #0
}
   1a264:	4618      	mov	r0, r3
   1a266:	b016      	add	sp, #88	; 0x58
   1a268:	bd70      	pop	{r4, r5, r6, pc}
        rp.conn_handle = conn_handle;
   1a26a:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
        rp.cur_key_size = bond.key_size;
   1a26e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a272:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
        rp.cur_authenticated = bond.authenticated;
   1a276:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   1a27a:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1a27e:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   1a282:	f361 0300 	bfi	r3, r1, #0, #1
        rp.cur_sc = bond.sc;
   1a286:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1a28a:	f362 0341 	bfi	r3, r2, #1, #1
   1a28e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        rp.new_key_size = key_size;
   1a292:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
        rp.new_authenticated = !!(proc_flags & BLE_SM_PROC_F_AUTHENTICATED);
   1a296:	f3c5 02c0 	ubfx	r2, r5, #3, #1
   1a29a:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
   1a29e:	f362 0300 	bfi	r3, r2, #0, #1
        rp.new_sc = !!(proc_flags & BLE_SM_PROC_F_SC);
   1a2a2:	f3c5 1200 	ubfx	r2, r5, #4, #1
   1a2a6:	f362 0341 	bfi	r3, r2, #1, #1
        rp.new_bonding = !!(proc_flags & BLE_SM_PROC_F_BONDING);
   1a2aa:	f3c5 1240 	ubfx	r2, r5, #5, #1
   1a2ae:	f362 0382 	bfi	r3, r2, #2, #1
   1a2b2:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
        rc = ble_gap_repeat_pairing_event(&rp);
   1a2b6:	a814      	add	r0, sp, #80	; 0x50
   1a2b8:	f7f9 fec2 	bl	14040 <ble_gap_repeat_pairing_event>
    } while (rc == BLE_GAP_REPEAT_PAIRING_RETRY);
   1a2bc:	2801      	cmp	r0, #1
   1a2be:	d0c8      	beq.n	1a252 <ble_sm_chk_repeat_pairing+0xa>
    return BLE_HS_EALREADY;
   1a2c0:	2302      	movs	r3, #2
   1a2c2:	e7cf      	b.n	1a264 <ble_sm_chk_repeat_pairing+0x1c>

0001a2c4 <ble_sm_gen_pair_rand>:
{
   1a2c4:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(pair_rand, 16);
   1a2c6:	2110      	movs	r1, #16
   1a2c8:	f7fe f964 	bl	18594 <ble_hs_hci_util_rand>
}
   1a2cc:	bd08      	pop	{r3, pc}

0001a2ce <ble_sm_ia_ra>:
{
   1a2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2d2:	b088      	sub	sp, #32
   1a2d4:	4606      	mov	r6, r0
   1a2d6:	4688      	mov	r8, r1
   1a2d8:	4615      	mov	r5, r2
   1a2da:	461f      	mov	r7, r3
   1a2dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    conn = ble_hs_conn_find_assert(proc->conn_handle);
   1a2de:	8940      	ldrh	r0, [r0, #10]
   1a2e0:	f7fd f8fa 	bl	174d8 <ble_hs_conn_find_assert>
    ble_hs_conn_addrs(conn, &addrs);
   1a2e4:	a901      	add	r1, sp, #4
   1a2e6:	f7fd f917 	bl	17518 <ble_hs_conn_addrs>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   1a2ea:	7a33      	ldrb	r3, [r6, #8]
   1a2ec:	f013 0f01 	tst.w	r3, #1
   1a2f0:	d115      	bne.n	1a31e <ble_sm_ia_ra+0x50>
        *out_iat = addrs.peer_ota_addr.type;
   1a2f2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1a2f6:	f888 3000 	strb.w	r3, [r8]
        memcpy(out_ia, addrs.peer_ota_addr.val, 6);
   1a2fa:	ab08      	add	r3, sp, #32
   1a2fc:	f853 2d06 	ldr.w	r2, [r3, #-6]!
   1a300:	602a      	str	r2, [r5, #0]
   1a302:	889b      	ldrh	r3, [r3, #4]
   1a304:	80ab      	strh	r3, [r5, #4]
        *out_rat = addrs.our_ota_addr.type;
   1a306:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1a30a:	703b      	strb	r3, [r7, #0]
        memcpy(out_ra, addrs.our_ota_addr.val, 6);
   1a30c:	ab08      	add	r3, sp, #32
   1a30e:	f853 2d0d 	ldr.w	r2, [r3, #-13]!
   1a312:	6022      	str	r2, [r4, #0]
   1a314:	889b      	ldrh	r3, [r3, #4]
   1a316:	80a3      	strh	r3, [r4, #4]
}
   1a318:	b008      	add	sp, #32
   1a31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_iat = addrs.our_ota_addr.type;
   1a31e:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1a322:	f888 3000 	strb.w	r3, [r8]
        memcpy(out_ia, addrs.our_ota_addr.val, 6);
   1a326:	ab08      	add	r3, sp, #32
   1a328:	f853 2d0d 	ldr.w	r2, [r3, #-13]!
   1a32c:	602a      	str	r2, [r5, #0]
   1a32e:	889b      	ldrh	r3, [r3, #4]
   1a330:	80ab      	strh	r3, [r5, #4]
        *out_rat = addrs.peer_ota_addr.type;
   1a332:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1a336:	703b      	strb	r3, [r7, #0]
        memcpy(out_ra, addrs.peer_ota_addr.val, 6);
   1a338:	ab08      	add	r3, sp, #32
   1a33a:	f853 2d06 	ldr.w	r2, [r3, #-6]!
   1a33e:	6022      	str	r2, [r4, #0]
   1a340:	889b      	ldrh	r3, [r3, #4]
   1a342:	80a3      	strh	r3, [r4, #4]
   1a344:	e7e8      	b.n	1a318 <ble_sm_ia_ra+0x4a>
	...

0001a348 <ble_sm_proc_find>:
{
   1a348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a34c:	4607      	mov	r7, r0
   1a34e:	460e      	mov	r6, r1
   1a350:	4615      	mov	r5, r2
   1a352:	4699      	mov	r9, r3
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   1a354:	4b0b      	ldr	r3, [pc, #44]	; (1a384 <ble_sm_proc_find+0x3c>)
   1a356:	681c      	ldr	r4, [r3, #0]
    prev = NULL;
   1a358:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   1a35c:	b174      	cbz	r4, 1a37c <ble_sm_proc_find+0x34>
        if (ble_sm_proc_matches(proc, conn_handle, state, is_initiator)) {
   1a35e:	462b      	mov	r3, r5
   1a360:	4632      	mov	r2, r6
   1a362:	4639      	mov	r1, r7
   1a364:	4620      	mov	r0, r4
   1a366:	f7ff f9f5 	bl	19754 <ble_sm_proc_matches>
   1a36a:	b910      	cbnz	r0, 1a372 <ble_sm_proc_find+0x2a>
        prev = proc;
   1a36c:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   1a36e:	6824      	ldr	r4, [r4, #0]
   1a370:	e7f4      	b.n	1a35c <ble_sm_proc_find+0x14>
            if (out_prev != NULL) {
   1a372:	f1b9 0f00 	cmp.w	r9, #0
   1a376:	d001      	beq.n	1a37c <ble_sm_proc_find+0x34>
                *out_prev = prev;
   1a378:	f8c9 8000 	str.w	r8, [r9]
}
   1a37c:	4620      	mov	r0, r4
   1a37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a382:	bf00      	nop
   1a384:	20002c40 	.word	0x20002c40

0001a388 <ble_sm_sign_info_rx>:
{
   1a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a38a:	4606      	mov	r6, r0
   1a38c:	460d      	mov	r5, r1
   1a38e:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   1a390:	2110      	movs	r1, #16
   1a392:	4628      	mov	r0, r5
   1a394:	f7fe fa52 	bl	1883c <ble_hs_mbuf_pullup_base>
   1a398:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   1a39a:	b130      	cbz	r0, 1a3aa <ble_sm_sign_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1a39c:	2308      	movs	r3, #8
   1a39e:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   1a3a0:	7d23      	ldrb	r3, [r4, #20]
   1a3a2:	f043 0302 	orr.w	r3, r3, #2
   1a3a6:	7523      	strb	r3, [r4, #20]
}
   1a3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_sign_info *)(*om)->om_data;
   1a3aa:	682b      	ldr	r3, [r5, #0]
   1a3ac:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   1a3ae:	f7fc faa5 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   1a3b2:	2300      	movs	r3, #0
   1a3b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a3b8:	2107      	movs	r1, #7
   1a3ba:	4630      	mov	r0, r6
   1a3bc:	f7ff ffc4 	bl	1a348 <ble_sm_proc_find>
    if (proc == NULL) {
   1a3c0:	4603      	mov	r3, r0
   1a3c2:	b1e0      	cbz	r0, 1a3fe <ble_sm_sign_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_SIGN_INFO;
   1a3c4:	7b82      	ldrb	r2, [r0, #14]
   1a3c6:	f022 0210 	bic.w	r2, r2, #16
   1a3ca:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.csrk, cmd->sig_key, 16);
   1a3cc:	682f      	ldr	r7, [r5, #0]
   1a3ce:	686e      	ldr	r6, [r5, #4]
   1a3d0:	68a8      	ldr	r0, [r5, #8]
   1a3d2:	68e9      	ldr	r1, [r5, #12]
   1a3d4:	f8c3 70ea 	str.w	r7, [r3, #234]	; 0xea
   1a3d8:	f8c3 60ee 	str.w	r6, [r3, #238]	; 0xee
   1a3dc:	f8c3 00f2 	str.w	r0, [r3, #242]	; 0xf2
   1a3e0:	f8c3 10f6 	str.w	r1, [r3, #246]	; 0xf6
        proc->peer_keys.csrk_valid = 1;
   1a3e4:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   1a3e8:	f042 0208 	orr.w	r2, r2, #8
   1a3ec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   1a3f0:	4621      	mov	r1, r4
   1a3f2:	4618      	mov	r0, r3
   1a3f4:	f7ff fd0e 	bl	19e14 <ble_sm_key_rxed>
    ble_hs_unlock();
   1a3f8:	f7fc fa84 	bl	16904 <ble_hs_unlock>
   1a3fc:	e7d4      	b.n	1a3a8 <ble_sm_sign_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   1a3fe:	2305      	movs	r3, #5
   1a400:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1a402:	2308      	movs	r3, #8
   1a404:	7123      	strb	r3, [r4, #4]
   1a406:	e7f7      	b.n	1a3f8 <ble_sm_sign_info_rx+0x70>

0001a408 <ble_sm_id_addr_info_rx>:
{
   1a408:	b570      	push	{r4, r5, r6, lr}
   1a40a:	4606      	mov	r6, r0
   1a40c:	460d      	mov	r5, r1
   1a40e:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   1a410:	2107      	movs	r1, #7
   1a412:	4628      	mov	r0, r5
   1a414:	f7fe fa12 	bl	1883c <ble_hs_mbuf_pullup_base>
   1a418:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   1a41a:	b130      	cbz	r0, 1a42a <ble_sm_id_addr_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1a41c:	2308      	movs	r3, #8
   1a41e:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   1a420:	7d23      	ldrb	r3, [r4, #20]
   1a422:	f043 0302 	orr.w	r3, r3, #2
   1a426:	7523      	strb	r3, [r4, #20]
}
   1a428:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_id_addr_info *)(*om)->om_data;
   1a42a:	682b      	ldr	r3, [r5, #0]
   1a42c:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   1a42e:	f7fc fa65 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   1a432:	2300      	movs	r3, #0
   1a434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a438:	2107      	movs	r1, #7
   1a43a:	4630      	mov	r0, r6
   1a43c:	f7ff ff84 	bl	1a348 <ble_sm_proc_find>
    if (proc == NULL) {
   1a440:	b1d0      	cbz	r0, 1a478 <ble_sm_id_addr_info_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ADDR_INFO;
   1a442:	7b82      	ldrb	r2, [r0, #14]
   1a444:	f022 0208 	bic.w	r2, r2, #8
   1a448:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.addr_valid = 1;
   1a44a:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   1a44e:	f042 0210 	orr.w	r2, r2, #16
   1a452:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.addr_type = cmd->addr_type;
   1a456:	782a      	ldrb	r2, [r5, #0]
   1a458:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
        memcpy(proc->peer_keys.addr, cmd->bd_addr, 6);
   1a45c:	462a      	mov	r2, r5
   1a45e:	f852 1f01 	ldr.w	r1, [r2, #1]!
   1a462:	f8c0 10fa 	str.w	r1, [r0, #250]	; 0xfa
   1a466:	8892      	ldrh	r2, [r2, #4]
   1a468:	f8a0 20fe 	strh.w	r2, [r0, #254]	; 0xfe
        ble_sm_key_rxed(proc, res);
   1a46c:	4621      	mov	r1, r4
   1a46e:	f7ff fcd1 	bl	19e14 <ble_sm_key_rxed>
    ble_hs_unlock();
   1a472:	f7fc fa47 	bl	16904 <ble_hs_unlock>
   1a476:	e7d7      	b.n	1a428 <ble_sm_id_addr_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   1a478:	2305      	movs	r3, #5
   1a47a:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1a47c:	2308      	movs	r3, #8
   1a47e:	7123      	strb	r3, [r4, #4]
   1a480:	e7f7      	b.n	1a472 <ble_sm_id_addr_info_rx+0x6a>

0001a482 <ble_sm_id_info_rx>:
{
   1a482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a484:	4606      	mov	r6, r0
   1a486:	460d      	mov	r5, r1
   1a488:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   1a48a:	2110      	movs	r1, #16
   1a48c:	4628      	mov	r0, r5
   1a48e:	f7fe f9d5 	bl	1883c <ble_hs_mbuf_pullup_base>
   1a492:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   1a494:	b130      	cbz	r0, 1a4a4 <ble_sm_id_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1a496:	2308      	movs	r3, #8
   1a498:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   1a49a:	7d23      	ldrb	r3, [r4, #20]
   1a49c:	f043 0302 	orr.w	r3, r3, #2
   1a4a0:	7523      	strb	r3, [r4, #20]
}
   1a4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_id_info *)(*om)->om_data;
   1a4a4:	682b      	ldr	r3, [r5, #0]
   1a4a6:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   1a4a8:	f7fc fa28 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   1a4ac:	2300      	movs	r3, #0
   1a4ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a4b2:	2107      	movs	r1, #7
   1a4b4:	4630      	mov	r0, r6
   1a4b6:	f7ff ff47 	bl	1a348 <ble_sm_proc_find>
    if (proc == NULL) {
   1a4ba:	4603      	mov	r3, r0
   1a4bc:	b1e0      	cbz	r0, 1a4f8 <ble_sm_id_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ID_INFO;
   1a4be:	7b82      	ldrb	r2, [r0, #14]
   1a4c0:	f022 0204 	bic.w	r2, r2, #4
   1a4c4:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.irk, cmd->irk, 16);
   1a4c6:	682f      	ldr	r7, [r5, #0]
   1a4c8:	686e      	ldr	r6, [r5, #4]
   1a4ca:	68a8      	ldr	r0, [r5, #8]
   1a4cc:	68e9      	ldr	r1, [r5, #12]
   1a4ce:	f8c3 70da 	str.w	r7, [r3, #218]	; 0xda
   1a4d2:	f8c3 60de 	str.w	r6, [r3, #222]	; 0xde
   1a4d6:	f8c3 00e2 	str.w	r0, [r3, #226]	; 0xe2
   1a4da:	f8c3 10e6 	str.w	r1, [r3, #230]	; 0xe6
        proc->peer_keys.irk_valid = 1;
   1a4de:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   1a4e2:	f042 0204 	orr.w	r2, r2, #4
   1a4e6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   1a4ea:	4621      	mov	r1, r4
   1a4ec:	4618      	mov	r0, r3
   1a4ee:	f7ff fc91 	bl	19e14 <ble_sm_key_rxed>
    ble_hs_unlock();
   1a4f2:	f7fc fa07 	bl	16904 <ble_hs_unlock>
   1a4f6:	e7d4      	b.n	1a4a2 <ble_sm_id_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   1a4f8:	2305      	movs	r3, #5
   1a4fa:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1a4fc:	2308      	movs	r3, #8
   1a4fe:	7123      	strb	r3, [r4, #4]
   1a500:	e7f7      	b.n	1a4f2 <ble_sm_id_info_rx+0x70>

0001a502 <ble_sm_master_id_rx>:
{
   1a502:	b570      	push	{r4, r5, r6, lr}
   1a504:	4606      	mov	r6, r0
   1a506:	460d      	mov	r5, r1
   1a508:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   1a50a:	210a      	movs	r1, #10
   1a50c:	4628      	mov	r0, r5
   1a50e:	f7fe f995 	bl	1883c <ble_hs_mbuf_pullup_base>
   1a512:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   1a514:	b130      	cbz	r0, 1a524 <ble_sm_master_id_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1a516:	2308      	movs	r3, #8
   1a518:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   1a51a:	7d23      	ldrb	r3, [r4, #20]
   1a51c:	f043 0302 	orr.w	r3, r3, #2
   1a520:	7523      	strb	r3, [r4, #20]
}
   1a522:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_master_id *)(*om)->om_data;
   1a524:	682b      	ldr	r3, [r5, #0]
   1a526:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   1a528:	f7fc f9e8 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   1a52c:	2300      	movs	r3, #0
   1a52e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a532:	2107      	movs	r1, #7
   1a534:	4630      	mov	r0, r6
   1a536:	f7ff ff07 	bl	1a348 <ble_sm_proc_find>
    if (proc == NULL) {
   1a53a:	b1d0      	cbz	r0, 1a572 <ble_sm_master_id_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_MASTER_ID;
   1a53c:	7b82      	ldrb	r2, [r0, #14]
   1a53e:	f022 0202 	bic.w	r2, r2, #2
   1a542:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ediv_rand_valid = 1;
   1a544:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   1a548:	f042 0202 	orr.w	r2, r2, #2
   1a54c:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.ediv = le16toh(cmd->ediv);
   1a550:	882a      	ldrh	r2, [r5, #0]
   1a552:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
        proc->peer_keys.rand_val = le64toh(cmd->rand_val);
   1a556:	f8d5 1002 	ldr.w	r1, [r5, #2]
   1a55a:	f8d5 2006 	ldr.w	r2, [r5, #6]
   1a55e:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
   1a562:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
        ble_sm_key_rxed(proc, res);
   1a566:	4621      	mov	r1, r4
   1a568:	f7ff fc54 	bl	19e14 <ble_sm_key_rxed>
    ble_hs_unlock();
   1a56c:	f7fc f9ca 	bl	16904 <ble_hs_unlock>
   1a570:	e7d7      	b.n	1a522 <ble_sm_master_id_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   1a572:	2305      	movs	r3, #5
   1a574:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1a576:	2308      	movs	r3, #8
   1a578:	7123      	strb	r3, [r4, #4]
   1a57a:	e7f7      	b.n	1a56c <ble_sm_master_id_rx+0x6a>

0001a57c <ble_sm_enc_info_rx>:
{
   1a57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a57e:	4606      	mov	r6, r0
   1a580:	460d      	mov	r5, r1
   1a582:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   1a584:	2110      	movs	r1, #16
   1a586:	4628      	mov	r0, r5
   1a588:	f7fe f958 	bl	1883c <ble_hs_mbuf_pullup_base>
   1a58c:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   1a58e:	b130      	cbz	r0, 1a59e <ble_sm_enc_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1a590:	2308      	movs	r3, #8
   1a592:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   1a594:	7d23      	ldrb	r3, [r4, #20]
   1a596:	f043 0302 	orr.w	r3, r3, #2
   1a59a:	7523      	strb	r3, [r4, #20]
}
   1a59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_enc_info *)(*om)->om_data;
   1a59e:	682b      	ldr	r3, [r5, #0]
   1a5a0:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   1a5a2:	f7fc f9ab 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   1a5a6:	2300      	movs	r3, #0
   1a5a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a5ac:	2107      	movs	r1, #7
   1a5ae:	4630      	mov	r0, r6
   1a5b0:	f7ff feca 	bl	1a348 <ble_sm_proc_find>
    if (proc == NULL) {
   1a5b4:	4603      	mov	r3, r0
   1a5b6:	b1f8      	cbz	r0, 1a5f8 <ble_sm_enc_info_rx+0x7c>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ENC_INFO;
   1a5b8:	7b82      	ldrb	r2, [r0, #14]
   1a5ba:	f022 0201 	bic.w	r2, r2, #1
   1a5be:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ltk_valid = 1;
   1a5c0:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   1a5c4:	f042 0201 	orr.w	r2, r2, #1
   1a5c8:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        memcpy(proc->peer_keys.ltk, cmd->ltk, 16);
   1a5cc:	682f      	ldr	r7, [r5, #0]
   1a5ce:	686e      	ldr	r6, [r5, #4]
   1a5d0:	68a8      	ldr	r0, [r5, #8]
   1a5d2:	68e9      	ldr	r1, [r5, #12]
   1a5d4:	f8c3 70ca 	str.w	r7, [r3, #202]	; 0xca
   1a5d8:	f8c3 60ce 	str.w	r6, [r3, #206]	; 0xce
   1a5dc:	f8c3 00d2 	str.w	r0, [r3, #210]	; 0xd2
   1a5e0:	f8c3 10d6 	str.w	r1, [r3, #214]	; 0xd6
        proc->peer_keys.key_size = proc->key_size;
   1a5e4:	7bda      	ldrb	r2, [r3, #15]
   1a5e6:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        ble_sm_key_rxed(proc, res);
   1a5ea:	4621      	mov	r1, r4
   1a5ec:	4618      	mov	r0, r3
   1a5ee:	f7ff fc11 	bl	19e14 <ble_sm_key_rxed>
    ble_hs_unlock();
   1a5f2:	f7fc f987 	bl	16904 <ble_hs_unlock>
   1a5f6:	e7d1      	b.n	1a59c <ble_sm_enc_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   1a5f8:	2305      	movs	r3, #5
   1a5fa:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1a5fc:	2308      	movs	r3, #8
   1a5fe:	7123      	strb	r3, [r4, #4]
   1a600:	e7f7      	b.n	1a5f2 <ble_sm_enc_info_rx+0x76>

0001a602 <ble_sm_pair_req_rx>:
{
   1a602:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a604:	b083      	sub	sp, #12
   1a606:	4606      	mov	r6, r0
   1a608:	460d      	mov	r5, r1
   1a60a:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*req));
   1a60c:	2106      	movs	r1, #6
   1a60e:	4628      	mov	r0, r5
   1a610:	f7fe f914 	bl	1883c <ble_hs_mbuf_pullup_base>
   1a614:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   1a616:	b108      	cbz	r0, 1a61c <ble_sm_pair_req_rx+0x1a>
}
   1a618:	b003      	add	sp, #12
   1a61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    req = (struct ble_sm_pair_cmd *)(*om)->om_data;
   1a61c:	682b      	ldr	r3, [r5, #0]
   1a61e:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   1a620:	f7fc f96c 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, &prev);
   1a624:	ab01      	add	r3, sp, #4
   1a626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a62a:	21ff      	movs	r1, #255	; 0xff
   1a62c:	4630      	mov	r0, r6
   1a62e:	f7ff fe8b 	bl	1a348 <ble_sm_proc_find>
    if (proc != NULL) {
   1a632:	4605      	mov	r5, r0
   1a634:	b128      	cbz	r0, 1a642 <ble_sm_pair_req_rx+0x40>
        ble_sm_proc_remove(proc, prev);
   1a636:	9901      	ldr	r1, [sp, #4]
   1a638:	f7ff f878 	bl	1972c <ble_sm_proc_remove>
        ble_sm_proc_free(proc);
   1a63c:	4628      	mov	r0, r5
   1a63e:	f7ff fd87 	bl	1a150 <ble_sm_proc_free>
    ble_hs_unlock();
   1a642:	f7fc f95f 	bl	16904 <ble_hs_unlock>
    rc = ble_sm_chk_store_overflow(conn_handle);
   1a646:	4630      	mov	r0, r6
   1a648:	f7ff f8db 	bl	19802 <ble_sm_chk_store_overflow>
    if (rc != 0) {
   1a64c:	b118      	cbz	r0, 1a656 <ble_sm_pair_req_rx+0x54>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1a64e:	2208      	movs	r2, #8
   1a650:	7122      	strb	r2, [r4, #4]
        res->app_status = rc;
   1a652:	6020      	str	r0, [r4, #0]
        return;
   1a654:	e7e0      	b.n	1a618 <ble_sm_pair_req_rx+0x16>
    ble_hs_lock();
   1a656:	f7fc f951 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_alloc();
   1a65a:	f7ff fd83 	bl	1a164 <ble_sm_proc_alloc>
    if (proc != NULL) {
   1a65e:	4605      	mov	r5, r0
   1a660:	2800      	cmp	r0, #0
   1a662:	d04a      	beq.n	1a6fa <ble_sm_pair_req_rx+0xf8>
        proc->conn_handle = conn_handle;
   1a664:	8146      	strh	r6, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   1a666:	2300      	movs	r3, #0
   1a668:	7343      	strb	r3, [r0, #13]
        ble_sm_insert(proc);
   1a66a:	f7ff f891 	bl	19790 <ble_sm_insert>
        proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   1a66e:	2301      	movs	r3, #1
   1a670:	742b      	strb	r3, [r5, #16]
        memcpy(proc->pair_req + 1, req, sizeof(*req));
   1a672:	683b      	ldr	r3, [r7, #0]
   1a674:	f8c5 3011 	str.w	r3, [r5, #17]
   1a678:	88bb      	ldrh	r3, [r7, #4]
   1a67a:	f8a5 3015 	strh.w	r3, [r5, #21]
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   1a67e:	8968      	ldrh	r0, [r5, #10]
   1a680:	f7fc ff2a 	bl	174d8 <ble_hs_conn_find_assert>
        if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   1a684:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   1a688:	f013 0f01 	tst.w	r3, #1
   1a68c:	d007      	beq.n	1a69e <ble_sm_pair_req_rx+0x9c>
            res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   1a68e:	2307      	movs	r3, #7
   1a690:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   1a692:	f240 4307 	movw	r3, #1031	; 0x407
   1a696:	6023      	str	r3, [r4, #0]
    key_size = 0;
   1a698:	2500      	movs	r5, #0
    proc_flags = 0;
   1a69a:	462f      	mov	r7, r5
   1a69c:	e02f      	b.n	1a6fe <ble_sm_pair_req_rx+0xfc>
        } else if (req->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   1a69e:	78fb      	ldrb	r3, [r7, #3]
   1a6a0:	2b06      	cmp	r3, #6
   1a6a2:	d807      	bhi.n	1a6b4 <ble_sm_pair_req_rx+0xb2>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   1a6a4:	2306      	movs	r3, #6
   1a6a6:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   1a6a8:	f240 4306 	movw	r3, #1030	; 0x406
   1a6ac:	6023      	str	r3, [r4, #0]
    key_size = 0;
   1a6ae:	2500      	movs	r5, #0
    proc_flags = 0;
   1a6b0:	462f      	mov	r7, r5
   1a6b2:	e024      	b.n	1a6fe <ble_sm_pair_req_rx+0xfc>
        } else if (req->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   1a6b4:	2b10      	cmp	r3, #16
   1a6b6:	d907      	bls.n	1a6c8 <ble_sm_pair_req_rx+0xc6>
            res->sm_err = BLE_SM_ERR_INVAL;
   1a6b8:	230a      	movs	r3, #10
   1a6ba:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   1a6bc:	f240 430a 	movw	r3, #1034	; 0x40a
   1a6c0:	6023      	str	r3, [r4, #0]
    key_size = 0;
   1a6c2:	2500      	movs	r5, #0
    proc_flags = 0;
   1a6c4:	462f      	mov	r7, r5
   1a6c6:	e01a      	b.n	1a6fe <ble_sm_pair_req_rx+0xfc>
        } else if (!ble_sm_verify_auth_requirements(req->authreq)) {
   1a6c8:	78b8      	ldrb	r0, [r7, #2]
   1a6ca:	f7ff f8e7 	bl	1989c <ble_sm_verify_auth_requirements>
   1a6ce:	b938      	cbnz	r0, 1a6e0 <ble_sm_pair_req_rx+0xde>
            res->sm_err = BLE_SM_ERR_AUTHREQ;
   1a6d0:	2303      	movs	r3, #3
   1a6d2:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   1a6d4:	f240 4303 	movw	r3, #1027	; 0x403
   1a6d8:	6023      	str	r3, [r4, #0]
    key_size = 0;
   1a6da:	2500      	movs	r5, #0
    proc_flags = 0;
   1a6dc:	462f      	mov	r7, r5
   1a6de:	e00e      	b.n	1a6fe <ble_sm_pair_req_rx+0xfc>
            ble_sm_pair_rsp_fill(proc);
   1a6e0:	4628      	mov	r0, r5
   1a6e2:	f7ff f8c7 	bl	19874 <ble_sm_pair_rsp_fill>
            ble_sm_pair_cfg(proc);
   1a6e6:	4628      	mov	r0, r5
   1a6e8:	f7ff f8f5 	bl	198d6 <ble_sm_pair_cfg>
            proc_flags = proc->flags;
   1a6ec:	7a2f      	ldrb	r7, [r5, #8]
            key_size = proc->key_size;
   1a6ee:	7bed      	ldrb	r5, [r5, #15]
            res->execute = 1;
   1a6f0:	7d23      	ldrb	r3, [r4, #20]
   1a6f2:	f043 0301 	orr.w	r3, r3, #1
   1a6f6:	7523      	strb	r3, [r4, #20]
   1a6f8:	e001      	b.n	1a6fe <ble_sm_pair_req_rx+0xfc>
    key_size = 0;
   1a6fa:	2500      	movs	r5, #0
    proc_flags = 0;
   1a6fc:	462f      	mov	r7, r5
    ble_hs_unlock();
   1a6fe:	f7fc f901 	bl	16904 <ble_hs_unlock>
    if (res->app_status == 0) {
   1a702:	6823      	ldr	r3, [r4, #0]
   1a704:	2b00      	cmp	r3, #0
   1a706:	d187      	bne.n	1a618 <ble_sm_pair_req_rx+0x16>
        rc = ble_sm_chk_repeat_pairing(conn_handle, proc_flags, key_size);
   1a708:	462a      	mov	r2, r5
   1a70a:	4639      	mov	r1, r7
   1a70c:	4630      	mov	r0, r6
   1a70e:	f7ff fd9b 	bl	1a248 <ble_sm_chk_repeat_pairing>
        if (rc != 0) {
   1a712:	2800      	cmp	r0, #0
   1a714:	d080      	beq.n	1a618 <ble_sm_pair_req_rx+0x16>
            res->app_status = rc;
   1a716:	6020      	str	r0, [r4, #0]
            res->execute = 0;
   1a718:	7d23      	ldrb	r3, [r4, #20]
   1a71a:	f36f 0300 	bfc	r3, #0, #1
   1a71e:	7523      	strb	r3, [r4, #20]
   1a720:	e77a      	b.n	1a618 <ble_sm_pair_req_rx+0x16>

0001a722 <ble_sm_ioact_state>:
    switch (action) {
   1a722:	b128      	cbz	r0, 1a730 <ble_sm_ioact_state+0xe>
   1a724:	2803      	cmp	r0, #3
   1a726:	d905      	bls.n	1a734 <ble_sm_ioact_state+0x12>
   1a728:	2804      	cmp	r0, #4
   1a72a:	d101      	bne.n	1a730 <ble_sm_ioact_state+0xe>
        return BLE_SM_PROC_STATE_DHKEY_CHECK;
   1a72c:	200a      	movs	r0, #10
}
   1a72e:	4770      	bx	lr
        return BLE_SM_PROC_STATE_NONE;
   1a730:	20ff      	movs	r0, #255	; 0xff
   1a732:	4770      	bx	lr
        return BLE_SM_PROC_STATE_CONFIRM;
   1a734:	2001      	movs	r0, #1
   1a736:	4770      	bx	lr

0001a738 <ble_sm_proc_can_advance>:
{
   1a738:	b510      	push	{r4, lr}
   1a73a:	b082      	sub	sp, #8
   1a73c:	4604      	mov	r4, r0
    rc = ble_sm_io_action(proc, &ioact);
   1a73e:	f10d 0107 	add.w	r1, sp, #7
   1a742:	f7ff f8be 	bl	198c2 <ble_sm_io_action>
    if (ble_sm_ioact_state(ioact) != proc->state) {
   1a746:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1a74a:	f7ff ffea 	bl	1a722 <ble_sm_ioact_state>
   1a74e:	7b63      	ldrb	r3, [r4, #13]
   1a750:	4298      	cmp	r0, r3
   1a752:	d002      	beq.n	1a75a <ble_sm_proc_can_advance+0x22>
        return 1;
   1a754:	2001      	movs	r0, #1
}
   1a756:	b002      	add	sp, #8
   1a758:	bd10      	pop	{r4, pc}
    if (proc->flags & BLE_SM_PROC_F_IO_INJECTED &&
   1a75a:	7a23      	ldrb	r3, [r4, #8]
   1a75c:	f003 0306 	and.w	r3, r3, #6
   1a760:	2b06      	cmp	r3, #6
   1a762:	d001      	beq.n	1a768 <ble_sm_proc_can_advance+0x30>
    return 0;
   1a764:	2000      	movs	r0, #0
   1a766:	e7f6      	b.n	1a756 <ble_sm_proc_can_advance+0x1e>
        return 1;
   1a768:	2001      	movs	r0, #1
   1a76a:	e7f4      	b.n	1a756 <ble_sm_proc_can_advance+0x1e>

0001a76c <ble_sm_confirm_rx>:
{
   1a76c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a76e:	b083      	sub	sp, #12
   1a770:	4606      	mov	r6, r0
   1a772:	460d      	mov	r5, r1
   1a774:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   1a776:	2110      	movs	r1, #16
   1a778:	4628      	mov	r0, r5
   1a77a:	f7fe f85f 	bl	1883c <ble_hs_mbuf_pullup_base>
   1a77e:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   1a780:	b138      	cbz	r0, 1a792 <ble_sm_confirm_rx+0x26>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1a782:	2308      	movs	r3, #8
   1a784:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   1a786:	7d23      	ldrb	r3, [r4, #20]
   1a788:	f043 0302 	orr.w	r3, r3, #2
   1a78c:	7523      	strb	r3, [r4, #20]
}
   1a78e:	b003      	add	sp, #12
   1a790:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_confirm *)(*om)->om_data;
   1a792:	682b      	ldr	r3, [r5, #0]
   1a794:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   1a796:	f7fc f8b1 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_CONFIRM, -1, NULL);
   1a79a:	2300      	movs	r3, #0
   1a79c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a7a0:	2101      	movs	r1, #1
   1a7a2:	4630      	mov	r0, r6
   1a7a4:	f7ff fdd0 	bl	1a348 <ble_sm_proc_find>
    if (proc == NULL) {
   1a7a8:	4605      	mov	r5, r0
   1a7aa:	b1b0      	cbz	r0, 1a7da <ble_sm_confirm_rx+0x6e>
        memcpy(proc->confirm_peer, cmd->value, 16);
   1a7ac:	683e      	ldr	r6, [r7, #0]
   1a7ae:	6878      	ldr	r0, [r7, #4]
   1a7b0:	68b9      	ldr	r1, [r7, #8]
   1a7b2:	68fa      	ldr	r2, [r7, #12]
   1a7b4:	f8c5 602e 	str.w	r6, [r5, #46]	; 0x2e
   1a7b8:	f8c5 0032 	str.w	r0, [r5, #50]	; 0x32
   1a7bc:	f8c5 1036 	str.w	r1, [r5, #54]	; 0x36
   1a7c0:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   1a7c4:	7a2b      	ldrb	r3, [r5, #8]
   1a7c6:	f013 0f01 	tst.w	r3, #1
   1a7ca:	d00b      	beq.n	1a7e4 <ble_sm_confirm_rx+0x78>
            proc->state = BLE_SM_PROC_STATE_RANDOM;
   1a7cc:	2302      	movs	r3, #2
   1a7ce:	736b      	strb	r3, [r5, #13]
            res->execute = 1;
   1a7d0:	7d23      	ldrb	r3, [r4, #20]
   1a7d2:	f043 0301 	orr.w	r3, r3, #1
   1a7d6:	7523      	strb	r3, [r4, #20]
   1a7d8:	e001      	b.n	1a7de <ble_sm_confirm_rx+0x72>
        res->app_status = BLE_HS_ENOENT;
   1a7da:	2305      	movs	r3, #5
   1a7dc:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   1a7de:	f7fc f891 	bl	16904 <ble_hs_unlock>
   1a7e2:	e7d4      	b.n	1a78e <ble_sm_confirm_rx+0x22>
            rc = ble_sm_io_action(proc, &ioact);
   1a7e4:	f10d 0107 	add.w	r1, sp, #7
   1a7e8:	4628      	mov	r0, r5
   1a7ea:	f7ff f86a 	bl	198c2 <ble_sm_io_action>
            if (ble_sm_ioact_state(ioact) == proc->state) {
   1a7ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1a7f2:	f7ff ff96 	bl	1a722 <ble_sm_ioact_state>
   1a7f6:	7b6b      	ldrb	r3, [r5, #13]
   1a7f8:	4298      	cmp	r0, r3
   1a7fa:	d009      	beq.n	1a810 <ble_sm_confirm_rx+0xa4>
            if (ble_sm_proc_can_advance(proc)) {
   1a7fc:	4628      	mov	r0, r5
   1a7fe:	f7ff ff9b 	bl	1a738 <ble_sm_proc_can_advance>
   1a802:	2800      	cmp	r0, #0
   1a804:	d0eb      	beq.n	1a7de <ble_sm_confirm_rx+0x72>
                res->execute = 1;
   1a806:	7d23      	ldrb	r3, [r4, #20]
   1a808:	f043 0301 	orr.w	r3, r3, #1
   1a80c:	7523      	strb	r3, [r4, #20]
   1a80e:	e7e6      	b.n	1a7de <ble_sm_confirm_rx+0x72>
                proc->flags |= BLE_SM_PROC_F_ADVANCE_ON_IO;
   1a810:	7a2b      	ldrb	r3, [r5, #8]
   1a812:	f043 0304 	orr.w	r3, r3, #4
   1a816:	722b      	strb	r3, [r5, #8]
   1a818:	e7f0      	b.n	1a7fc <ble_sm_confirm_rx+0x90>

0001a81a <ble_sm_pair_rsp_rx>:
{
   1a81a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a81c:	b083      	sub	sp, #12
   1a81e:	4606      	mov	r6, r0
   1a820:	460d      	mov	r5, r1
   1a822:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*rsp));
   1a824:	2106      	movs	r1, #6
   1a826:	4628      	mov	r0, r5
   1a828:	f7fe f808 	bl	1883c <ble_hs_mbuf_pullup_base>
   1a82c:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   1a82e:	b128      	cbz	r0, 1a83c <ble_sm_pair_rsp_rx+0x22>
        res->enc_cb = 1;
   1a830:	7d23      	ldrb	r3, [r4, #20]
   1a832:	f043 0302 	orr.w	r3, r3, #2
   1a836:	7523      	strb	r3, [r4, #20]
}
   1a838:	b003      	add	sp, #12
   1a83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_sm_pair_cmd *)(*om)->om_data;
   1a83c:	682b      	ldr	r3, [r5, #0]
   1a83e:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   1a840:	f7fc f85c 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_PAIR, 1, NULL);
   1a844:	2300      	movs	r3, #0
   1a846:	2201      	movs	r2, #1
   1a848:	4619      	mov	r1, r3
   1a84a:	4630      	mov	r0, r6
   1a84c:	f7ff fd7c 	bl	1a348 <ble_sm_proc_find>
    if (proc != NULL) {
   1a850:	4605      	mov	r5, r0
   1a852:	b168      	cbz	r0, 1a870 <ble_sm_pair_rsp_rx+0x56>
        proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   1a854:	2302      	movs	r3, #2
   1a856:	75c3      	strb	r3, [r0, #23]
        memcpy(proc->pair_rsp + 1, rsp, sizeof(*rsp));
   1a858:	683b      	ldr	r3, [r7, #0]
   1a85a:	6183      	str	r3, [r0, #24]
   1a85c:	88bb      	ldrh	r3, [r7, #4]
   1a85e:	8383      	strh	r3, [r0, #28]
        if (rsp->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   1a860:	78fb      	ldrb	r3, [r7, #3]
   1a862:	2b06      	cmp	r3, #6
   1a864:	d807      	bhi.n	1a876 <ble_sm_pair_rsp_rx+0x5c>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   1a866:	2306      	movs	r3, #6
   1a868:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   1a86a:	f240 4306 	movw	r3, #1030	; 0x406
   1a86e:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   1a870:	f7fc f848 	bl	16904 <ble_hs_unlock>
   1a874:	e7e0      	b.n	1a838 <ble_sm_pair_rsp_rx+0x1e>
        } else if (rsp->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   1a876:	2b10      	cmp	r3, #16
   1a878:	d905      	bls.n	1a886 <ble_sm_pair_rsp_rx+0x6c>
            res->sm_err = BLE_SM_ERR_INVAL;
   1a87a:	230a      	movs	r3, #10
   1a87c:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   1a87e:	f240 430a 	movw	r3, #1034	; 0x40a
   1a882:	6023      	str	r3, [r4, #0]
   1a884:	e7f4      	b.n	1a870 <ble_sm_pair_rsp_rx+0x56>
            ble_sm_pair_cfg(proc);
   1a886:	f7ff f826 	bl	198d6 <ble_sm_pair_cfg>
            rc = ble_sm_io_action(proc, &ioact);
   1a88a:	f10d 0107 	add.w	r1, sp, #7
   1a88e:	4628      	mov	r0, r5
   1a890:	f7ff f817 	bl	198c2 <ble_sm_io_action>
            if (rc != 0) {
   1a894:	b148      	cbz	r0, 1a8aa <ble_sm_pair_rsp_rx+0x90>
                res->sm_err = BLE_SM_ERR_AUTHREQ;
   1a896:	2303      	movs	r3, #3
   1a898:	7123      	strb	r3, [r4, #4]
                res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   1a89a:	f240 4303 	movw	r3, #1027	; 0x403
   1a89e:	6023      	str	r3, [r4, #0]
                res->enc_cb = 1;
   1a8a0:	7d23      	ldrb	r3, [r4, #20]
   1a8a2:	f043 0302 	orr.w	r3, r3, #2
   1a8a6:	7523      	strb	r3, [r4, #20]
   1a8a8:	e7e2      	b.n	1a870 <ble_sm_pair_rsp_rx+0x56>
                proc->state = ble_sm_state_after_pair(proc);
   1a8aa:	4628      	mov	r0, r5
   1a8ac:	f7fe ffb8 	bl	19820 <ble_sm_state_after_pair>
   1a8b0:	4606      	mov	r6, r0
   1a8b2:	7368      	strb	r0, [r5, #13]
                if (ble_sm_ioact_state(ioact) == proc->state) {
   1a8b4:	f89d 7007 	ldrb.w	r7, [sp, #7]
   1a8b8:	4638      	mov	r0, r7
   1a8ba:	f7ff ff32 	bl	1a722 <ble_sm_ioact_state>
   1a8be:	42b0      	cmp	r0, r6
   1a8c0:	d009      	beq.n	1a8d6 <ble_sm_pair_rsp_rx+0xbc>
                if (ble_sm_proc_can_advance(proc)) {
   1a8c2:	4628      	mov	r0, r5
   1a8c4:	f7ff ff38 	bl	1a738 <ble_sm_proc_can_advance>
   1a8c8:	2800      	cmp	r0, #0
   1a8ca:	d0d1      	beq.n	1a870 <ble_sm_pair_rsp_rx+0x56>
                    res->execute = 1;
   1a8cc:	7d23      	ldrb	r3, [r4, #20]
   1a8ce:	f043 0301 	orr.w	r3, r3, #1
   1a8d2:	7523      	strb	r3, [r4, #20]
   1a8d4:	e7cc      	b.n	1a870 <ble_sm_pair_rsp_rx+0x56>
                    res->passkey_params.action = ioact;
   1a8d6:	7227      	strb	r7, [r4, #8]
   1a8d8:	e7f3      	b.n	1a8c2 <ble_sm_pair_rsp_rx+0xa8>

0001a8da <ble_sm_process_result>:
{
   1a8da:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a8dc:	b083      	sub	sp, #12
   1a8de:	4607      	mov	r7, r0
   1a8e0:	460c      	mov	r4, r1
    rm = 0;
   1a8e2:	2600      	movs	r6, #0
   1a8e4:	e02c      	b.n	1a940 <ble_sm_process_result+0x66>
                ble_sm_exec(proc, res, res->state_arg);
   1a8e6:	6922      	ldr	r2, [r4, #16]
   1a8e8:	4621      	mov	r1, r4
   1a8ea:	f7ff f861 	bl	199b0 <ble_sm_exec>
   1a8ee:	e036      	b.n	1a95e <ble_sm_process_result+0x84>
                rm = 1;
   1a8f0:	2601      	movs	r6, #1
   1a8f2:	e03c      	b.n	1a96e <ble_sm_process_result+0x94>
                ble_sm_proc_set_timer(proc);
   1a8f4:	4628      	mov	r0, r5
   1a8f6:	f7ff fb75 	bl	19fe4 <ble_sm_proc_set_timer>
   1a8fa:	e03c      	b.n	1a976 <ble_sm_process_result+0x9c>
            ble_sm_pair_fail_tx(conn_handle, res->sm_err);
   1a8fc:	4638      	mov	r0, r7
   1a8fe:	f7ff f88e 	bl	19a1e <ble_sm_pair_fail_tx>
   1a902:	e03b      	b.n	1a97c <ble_sm_process_result+0xa2>
            ble_gap_enc_event(conn_handle, res->app_status, res->restore);
   1a904:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   1a908:	6821      	ldr	r1, [r4, #0]
   1a90a:	4638      	mov	r0, r7
   1a90c:	f7f9 fb63 	bl	13fd6 <ble_gap_enc_event>
   1a910:	e03b      	b.n	1a98a <ble_sm_process_result+0xb0>
            ble_gap_passkey_event(conn_handle, &res->passkey_params);
   1a912:	f104 0108 	add.w	r1, r4, #8
   1a916:	4638      	mov	r0, r7
   1a918:	f7f9 fb44 	bl	13fa4 <ble_gap_passkey_event>
   1a91c:	e03a      	b.n	1a994 <ble_sm_process_result+0xba>
        if (rm) {
   1a91e:	2e00      	cmp	r6, #0
   1a920:	d145      	bne.n	1a9ae <ble_sm_process_result+0xd4>
        if (!res->execute) {
   1a922:	7d23      	ldrb	r3, [r4, #20]
   1a924:	f013 0f01 	tst.w	r3, #1
   1a928:	d044      	beq.n	1a9b4 <ble_sm_process_result+0xda>
        memset(res, 0, sizeof *res);
   1a92a:	2300      	movs	r3, #0
   1a92c:	6023      	str	r3, [r4, #0]
   1a92e:	6063      	str	r3, [r4, #4]
   1a930:	60a3      	str	r3, [r4, #8]
   1a932:	60e3      	str	r3, [r4, #12]
   1a934:	6123      	str	r3, [r4, #16]
   1a936:	6163      	str	r3, [r4, #20]
        res->execute = 1;
   1a938:	7d23      	ldrb	r3, [r4, #20]
   1a93a:	f043 0301 	orr.w	r3, r3, #1
   1a93e:	7523      	strb	r3, [r4, #20]
        ble_hs_lock();
   1a940:	f7fb ffdc 	bl	168fc <ble_hs_lock>
        proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1,
   1a944:	ab01      	add	r3, sp, #4
   1a946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a94a:	21ff      	movs	r1, #255	; 0xff
   1a94c:	4638      	mov	r0, r7
   1a94e:	f7ff fcfb 	bl	1a348 <ble_sm_proc_find>
        if (proc != NULL) {
   1a952:	4605      	mov	r5, r0
   1a954:	b178      	cbz	r0, 1a976 <ble_sm_process_result+0x9c>
            if (res->execute) {
   1a956:	7d23      	ldrb	r3, [r4, #20]
   1a958:	f013 0f01 	tst.w	r3, #1
   1a95c:	d1c3      	bne.n	1a8e6 <ble_sm_process_result+0xc>
            if (res->app_status != 0) {
   1a95e:	6823      	ldr	r3, [r4, #0]
   1a960:	b103      	cbz	r3, 1a964 <ble_sm_process_result+0x8a>
                rm = 1;
   1a962:	2601      	movs	r6, #1
            if (proc->state == BLE_SM_PROC_STATE_NONE) {
   1a964:	7b6b      	ldrb	r3, [r5, #13]
   1a966:	2bff      	cmp	r3, #255	; 0xff
   1a968:	d0c2      	beq.n	1a8f0 <ble_sm_process_result+0x16>
            if (rm) {
   1a96a:	2e00      	cmp	r6, #0
   1a96c:	d0c2      	beq.n	1a8f4 <ble_sm_process_result+0x1a>
                ble_sm_proc_remove(proc, prev);
   1a96e:	9901      	ldr	r1, [sp, #4]
   1a970:	4628      	mov	r0, r5
   1a972:	f7fe fedb 	bl	1972c <ble_sm_proc_remove>
        if (res->sm_err != 0) {
   1a976:	7921      	ldrb	r1, [r4, #4]
   1a978:	2900      	cmp	r1, #0
   1a97a:	d1bf      	bne.n	1a8fc <ble_sm_process_result+0x22>
        ble_hs_unlock();
   1a97c:	f7fb ffc2 	bl	16904 <ble_hs_unlock>
        if (proc == NULL) {
   1a980:	b1c5      	cbz	r5, 1a9b4 <ble_sm_process_result+0xda>
        if (res->enc_cb) {
   1a982:	7d23      	ldrb	r3, [r4, #20]
   1a984:	f013 0f02 	tst.w	r3, #2
   1a988:	d1bc      	bne.n	1a904 <ble_sm_process_result+0x2a>
        if (res->app_status == 0 &&
   1a98a:	6823      	ldr	r3, [r4, #0]
   1a98c:	b913      	cbnz	r3, 1a994 <ble_sm_process_result+0xba>
            res->passkey_params.action != BLE_SM_IOACT_NONE) {
   1a98e:	7a23      	ldrb	r3, [r4, #8]
        if (res->app_status == 0 &&
   1a990:	2b00      	cmp	r3, #0
   1a992:	d1be      	bne.n	1a912 <ble_sm_process_result+0x38>
        if (res->app_status == 0    &&
   1a994:	6823      	ldr	r3, [r4, #0]
   1a996:	2b00      	cmp	r3, #0
   1a998:	d1c1      	bne.n	1a91e <ble_sm_process_result+0x44>
   1a99a:	2e00      	cmp	r6, #0
   1a99c:	d0bf      	beq.n	1a91e <ble_sm_process_result+0x44>
            proc->flags & BLE_SM_PROC_F_BONDING) {
   1a99e:	7a2b      	ldrb	r3, [r5, #8]
            rm                      &&
   1a9a0:	f013 0f20 	tst.w	r3, #32
   1a9a4:	d0bb      	beq.n	1a91e <ble_sm_process_result+0x44>
            ble_sm_persist_keys(proc);
   1a9a6:	4628      	mov	r0, r5
   1a9a8:	f7ff fb5e 	bl	1a068 <ble_sm_persist_keys>
   1a9ac:	e7b7      	b.n	1a91e <ble_sm_process_result+0x44>
            ble_sm_proc_free(proc);
   1a9ae:	4628      	mov	r0, r5
   1a9b0:	f7ff fbce 	bl	1a150 <ble_sm_proc_free>
}
   1a9b4:	b003      	add	sp, #12
   1a9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a9b8 <ble_sm_enc_event_rx>:
{
   1a9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a9ba:	b089      	sub	sp, #36	; 0x24
   1a9bc:	4606      	mov	r6, r0
   1a9be:	460d      	mov	r5, r1
   1a9c0:	4617      	mov	r7, r2
    memset(&res, 0, sizeof res);
   1a9c2:	2400      	movs	r4, #0
   1a9c4:	9402      	str	r4, [sp, #8]
   1a9c6:	9403      	str	r4, [sp, #12]
   1a9c8:	9404      	str	r4, [sp, #16]
   1a9ca:	9405      	str	r4, [sp, #20]
   1a9cc:	9406      	str	r4, [sp, #24]
   1a9ce:	9407      	str	r4, [sp, #28]
    ble_hs_lock();
   1a9d0:	f7fb ff94 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   1a9d4:	4623      	mov	r3, r4
   1a9d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a9da:	21ff      	movs	r1, #255	; 0xff
   1a9dc:	4630      	mov	r0, r6
   1a9de:	f7ff fcb3 	bl	1a348 <ble_sm_proc_find>
    if (proc != NULL) {
   1a9e2:	4604      	mov	r4, r0
   1a9e4:	2800      	cmp	r0, #0
   1a9e6:	d03a      	beq.n	1aa5e <ble_sm_enc_event_rx+0xa6>
        switch (proc->state) {
   1a9e8:	7b43      	ldrb	r3, [r0, #13]
   1a9ea:	2b05      	cmp	r3, #5
   1a9ec:	d00a      	beq.n	1aa04 <ble_sm_enc_event_rx+0x4c>
   1a9ee:	2b06      	cmp	r3, #6
   1a9f0:	d023      	beq.n	1aa3a <ble_sm_enc_event_rx+0x82>
            proc->state = BLE_SM_PROC_STATE_NONE;
   1a9f2:	23ff      	movs	r3, #255	; 0xff
   1a9f4:	7343      	strb	r3, [r0, #13]
            res.sm_err = BLE_SM_ERR_UNSPECIFIED;
   1a9f6:	2308      	movs	r3, #8
   1a9f8:	f88d 300c 	strb.w	r3, [sp, #12]
    key_size = 0;
   1a9fc:	2100      	movs	r1, #0
    bonded = 0;
   1a9fe:	460b      	mov	r3, r1
    authenticated = 0;
   1aa00:	460a      	mov	r2, r1
            break;
   1aa02:	e02f      	b.n	1aa64 <ble_sm_enc_event_rx+0xac>
            if (evt_status == 0) {
   1aa04:	b9ad      	cbnz	r5, 1aa32 <ble_sm_enc_event_rx+0x7a>
                proc->state = BLE_SM_PROC_STATE_KEY_EXCH;
   1aa06:	2307      	movs	r3, #7
   1aa08:	7343      	strb	r3, [r0, #13]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   1aa0a:	7a03      	ldrb	r3, [r0, #8]
   1aa0c:	f013 0f01 	tst.w	r3, #1
   1aa10:	d001      	beq.n	1aa16 <ble_sm_enc_event_rx+0x5e>
                    proc->rx_key_flags == 0) {
   1aa12:	7b83      	ldrb	r3, [r0, #14]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   1aa14:	b92b      	cbnz	r3, 1aa22 <ble_sm_enc_event_rx+0x6a>
                    res.execute = 1;
   1aa16:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1aa1a:	f043 0301 	orr.w	r3, r3, #1
   1aa1e:	f88d 301c 	strb.w	r3, [sp, #28]
                key_size = proc->key_size;
   1aa22:	7be1      	ldrb	r1, [r4, #15]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   1aa24:	7a23      	ldrb	r3, [r4, #8]
   1aa26:	f013 0f08 	tst.w	r3, #8
   1aa2a:	d132      	bne.n	1aa92 <ble_sm_enc_event_rx+0xda>
    bonded = 0;
   1aa2c:	2300      	movs	r3, #0
    authenticated = 0;
   1aa2e:	461a      	mov	r2, r3
   1aa30:	e018      	b.n	1aa64 <ble_sm_enc_event_rx+0xac>
                proc->state = BLE_SM_PROC_STATE_NONE;
   1aa32:	23ff      	movs	r3, #255	; 0xff
   1aa34:	7343      	strb	r3, [r0, #13]
    key_size = 0;
   1aa36:	2100      	movs	r1, #0
   1aa38:	e7f4      	b.n	1aa24 <ble_sm_enc_event_rx+0x6c>
            proc->state = BLE_SM_PROC_STATE_NONE;
   1aa3a:	23ff      	movs	r3, #255	; 0xff
   1aa3c:	7343      	strb	r3, [r0, #13]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   1aa3e:	7a03      	ldrb	r3, [r0, #8]
   1aa40:	f013 0f08 	tst.w	r3, #8
   1aa44:	d109      	bne.n	1aa5a <ble_sm_enc_event_rx+0xa2>
    authenticated = 0;
   1aa46:	2200      	movs	r2, #0
            res.restore = 1;
   1aa48:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1aa4c:	f043 0308 	orr.w	r3, r3, #8
   1aa50:	f88d 301c 	strb.w	r3, [sp, #28]
            key_size = proc->key_size;
   1aa54:	7be1      	ldrb	r1, [r4, #15]
            bonded = 1;
   1aa56:	2301      	movs	r3, #1
            break;
   1aa58:	e004      	b.n	1aa64 <ble_sm_enc_event_rx+0xac>
                authenticated = 1;
   1aa5a:	2201      	movs	r2, #1
   1aa5c:	e7f4      	b.n	1aa48 <ble_sm_enc_event_rx+0x90>
    key_size = 0;
   1aa5e:	2100      	movs	r1, #0
    bonded = 0;
   1aa60:	460b      	mov	r3, r1
    authenticated = 0;
   1aa62:	460a      	mov	r2, r1
    if (evt_status == 0) {
   1aa64:	b1c5      	cbz	r5, 1aa98 <ble_sm_enc_event_rx+0xe0>
    if (proc == NULL || proc->state == BLE_SM_PROC_STATE_NONE) {
   1aa66:	b114      	cbz	r4, 1aa6e <ble_sm_enc_event_rx+0xb6>
   1aa68:	7b63      	ldrb	r3, [r4, #13]
   1aa6a:	2bff      	cmp	r3, #255	; 0xff
   1aa6c:	d109      	bne.n	1aa82 <ble_sm_enc_event_rx+0xca>
        res.enc_cb = 1;
   1aa6e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1aa72:	f043 0302 	orr.w	r3, r3, #2
   1aa76:	f88d 301c 	strb.w	r3, [sp, #28]
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   1aa7a:	b19d      	cbz	r5, 1aaa4 <ble_sm_enc_event_rx+0xec>
   1aa7c:	f505 7500 	add.w	r5, r5, #512	; 0x200
   1aa80:	9502      	str	r5, [sp, #8]
    ble_hs_unlock();
   1aa82:	f7fb ff3f 	bl	16904 <ble_hs_unlock>
    ble_sm_process_result(conn_handle, &res);
   1aa86:	a902      	add	r1, sp, #8
   1aa88:	4630      	mov	r0, r6
   1aa8a:	f7ff ff26 	bl	1a8da <ble_sm_process_result>
}
   1aa8e:	b009      	add	sp, #36	; 0x24
   1aa90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bonded = 0;
   1aa92:	2300      	movs	r3, #0
                authenticated = 1;
   1aa94:	2201      	movs	r2, #1
   1aa96:	e7e5      	b.n	1aa64 <ble_sm_enc_event_rx+0xac>
        ble_sm_update_sec_state(conn_handle, encrypted, authenticated, bonded,
   1aa98:	9100      	str	r1, [sp, #0]
   1aa9a:	4639      	mov	r1, r7
   1aa9c:	4630      	mov	r0, r6
   1aa9e:	f7ff f842 	bl	19b26 <ble_sm_update_sec_state>
   1aaa2:	e7e0      	b.n	1aa66 <ble_sm_enc_event_rx+0xae>
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   1aaa4:	2500      	movs	r5, #0
   1aaa6:	e7eb      	b.n	1aa80 <ble_sm_enc_event_rx+0xc8>

0001aaa8 <ble_sm_rx>:
    return res.app_status;
}

static int
ble_sm_rx(struct ble_l2cap_chan *chan)
{
   1aaa8:	b570      	push	{r4, r5, r6, lr}
   1aaaa:	b088      	sub	sp, #32
   1aaac:	4604      	mov	r4, r0
    struct os_mbuf **om;
    int rc;

    STATS_INC(ble_l2cap_stats, sm_rx);

    conn_handle = ble_l2cap_get_conn_handle(chan);
   1aaae:	f7fe faca 	bl	19046 <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   1aab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1aab6:	4298      	cmp	r0, r3
   1aab8:	d025      	beq.n	1ab06 <ble_sm_rx+0x5e>
   1aaba:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   1aabc:	f104 0610 	add.w	r6, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   1aac0:	f10d 0307 	add.w	r3, sp, #7
   1aac4:	2201      	movs	r2, #1
   1aac6:	2100      	movs	r1, #0
   1aac8:	6920      	ldr	r0, [r4, #16]
   1aaca:	f7f6 fb0f 	bl	110ec <os_mbuf_copydata>
    if (rc != 0) {
   1aace:	b9e0      	cbnz	r0, 1ab0a <ble_sm_rx+0x62>
        return BLE_HS_EBADDATA;
    }

    /* Strip L2CAP SM header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   1aad0:	2101      	movs	r1, #1
   1aad2:	6920      	ldr	r0, [r4, #16]
   1aad4:	f7f6 fb37 	bl	11146 <os_mbuf_adj>

    rx_cb = ble_sm_dispatch_get(op);
   1aad8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1aadc:	f7fe fe1c 	bl	19718 <ble_sm_dispatch_get>
    if (rx_cb != NULL) {
   1aae0:	4604      	mov	r4, r0
   1aae2:	b1a8      	cbz	r0, 1ab10 <ble_sm_rx+0x68>
        memset(&res, 0, sizeof res);
   1aae4:	2300      	movs	r3, #0
   1aae6:	9302      	str	r3, [sp, #8]
   1aae8:	9303      	str	r3, [sp, #12]
   1aaea:	9304      	str	r3, [sp, #16]
   1aaec:	9305      	str	r3, [sp, #20]
   1aaee:	9306      	str	r3, [sp, #24]
   1aaf0:	9307      	str	r3, [sp, #28]

        rx_cb(conn_handle, om, &res);
   1aaf2:	aa02      	add	r2, sp, #8
   1aaf4:	4631      	mov	r1, r6
   1aaf6:	4628      	mov	r0, r5
   1aaf8:	47a0      	blx	r4
        ble_sm_process_result(conn_handle, &res);
   1aafa:	a902      	add	r1, sp, #8
   1aafc:	4628      	mov	r0, r5
   1aafe:	f7ff feec 	bl	1a8da <ble_sm_process_result>
        rc = res.app_status;
   1ab02:	9802      	ldr	r0, [sp, #8]
   1ab04:	e002      	b.n	1ab0c <ble_sm_rx+0x64>
        return BLE_HS_ENOTCONN;
   1ab06:	2007      	movs	r0, #7
   1ab08:	e000      	b.n	1ab0c <ble_sm_rx+0x64>
        return BLE_HS_EBADDATA;
   1ab0a:	200a      	movs	r0, #10
    } else {
        rc = BLE_HS_ENOTSUP;
    }

    return rc;
}
   1ab0c:	b008      	add	sp, #32
   1ab0e:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   1ab10:	2008      	movs	r0, #8
   1ab12:	e7fb      	b.n	1ab0c <ble_sm_rx+0x64>

0001ab14 <ble_sm_enc_change_rx>:
{
   1ab14:	b508      	push	{r3, lr}
                        evt->encryption_enabled & 0x01);
   1ab16:	7842      	ldrb	r2, [r0, #1]
    ble_sm_enc_event_rx(evt->connection_handle, evt->status,
   1ab18:	f002 0201 	and.w	r2, r2, #1
   1ab1c:	7801      	ldrb	r1, [r0, #0]
   1ab1e:	8840      	ldrh	r0, [r0, #2]
   1ab20:	f7ff ff4a 	bl	1a9b8 <ble_sm_enc_event_rx>
}
   1ab24:	bd08      	pop	{r3, pc}

0001ab26 <ble_sm_enc_key_refresh_rx>:
{
   1ab26:	b508      	push	{r3, lr}
    ble_sm_enc_event_rx(evt->connection_handle, evt->status, 1);
   1ab28:	2201      	movs	r2, #1
   1ab2a:	7801      	ldrb	r1, [r0, #0]
   1ab2c:	8840      	ldrh	r0, [r0, #2]
   1ab2e:	f7ff ff43 	bl	1a9b8 <ble_sm_enc_event_rx>
}
   1ab32:	bd08      	pop	{r3, pc}

0001ab34 <ble_sm_ltk_req_rx>:
{
   1ab34:	b570      	push	{r4, r5, r6, lr}
   1ab36:	b0a4      	sub	sp, #144	; 0x90
   1ab38:	4605      	mov	r5, r0
    memset(&res, 0, sizeof res);
   1ab3a:	2400      	movs	r4, #0
   1ab3c:	9403      	str	r4, [sp, #12]
   1ab3e:	9404      	str	r4, [sp, #16]
   1ab40:	9405      	str	r4, [sp, #20]
   1ab42:	9406      	str	r4, [sp, #24]
   1ab44:	9407      	str	r4, [sp, #28]
   1ab46:	9408      	str	r4, [sp, #32]
    ble_hs_lock();
   1ab48:	f7fb fed8 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_find(evt->connection_handle, BLE_SM_PROC_STATE_NONE,
   1ab4c:	4623      	mov	r3, r4
   1ab4e:	4622      	mov	r2, r4
   1ab50:	21ff      	movs	r1, #255	; 0xff
   1ab52:	8928      	ldrh	r0, [r5, #8]
   1ab54:	f7ff fbf8 	bl	1a348 <ble_sm_proc_find>
    if (proc == NULL) {
   1ab58:	b168      	cbz	r0, 1ab76 <ble_sm_ltk_req_rx+0x42>
   1ab5a:	4604      	mov	r4, r0
    } else if (proc->state == BLE_SM_PROC_STATE_SEC_REQ) {
   1ab5c:	7b43      	ldrb	r3, [r0, #13]
   1ab5e:	2b08      	cmp	r3, #8
   1ab60:	d01d      	beq.n	1ab9e <ble_sm_ltk_req_rx+0x6a>
    } else if (proc->state == BLE_SM_PROC_STATE_LTK_START) {
   1ab62:	2b03      	cmp	r3, #3
   1ab64:	d13d      	bne.n	1abe2 <ble_sm_ltk_req_rx+0xae>
        res.execute = 1;
   1ab66:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1ab6a:	f043 0301 	orr.w	r3, r3, #1
   1ab6e:	f88d 3020 	strb.w	r3, [sp, #32]
        restore = 0;
   1ab72:	2600      	movs	r6, #0
   1ab74:	e028      	b.n	1abc8 <ble_sm_ltk_req_rx+0x94>
        proc = ble_sm_proc_alloc();
   1ab76:	f7ff faf5 	bl	1a164 <ble_sm_proc_alloc>
        if (proc == NULL) {
   1ab7a:	4604      	mov	r4, r0
   1ab7c:	b160      	cbz	r0, 1ab98 <ble_sm_ltk_req_rx+0x64>
            proc->conn_handle = evt->connection_handle;
   1ab7e:	892b      	ldrh	r3, [r5, #8]
   1ab80:	8143      	strh	r3, [r0, #10]
            proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   1ab82:	2304      	movs	r3, #4
   1ab84:	7343      	strb	r3, [r0, #13]
            ble_sm_insert(proc);
   1ab86:	f7fe fe03 	bl	19790 <ble_sm_insert>
            res.execute = 1;
   1ab8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1ab8e:	f043 0301 	orr.w	r3, r3, #1
   1ab92:	f88d 3020 	strb.w	r3, [sp, #32]
   1ab96:	e00a      	b.n	1abae <ble_sm_ltk_req_rx+0x7a>
            res.app_status = BLE_HS_ENOMEM;
   1ab98:	2306      	movs	r3, #6
   1ab9a:	9303      	str	r3, [sp, #12]
   1ab9c:	e007      	b.n	1abae <ble_sm_ltk_req_rx+0x7a>
        proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   1ab9e:	2304      	movs	r3, #4
   1aba0:	7343      	strb	r3, [r0, #13]
        res.execute = 1;
   1aba2:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1aba6:	f043 0301 	orr.w	r3, r3, #1
   1abaa:	f88d 3020 	strb.w	r3, [sp, #32]
        conn = ble_hs_conn_find_assert(evt->connection_handle);
   1abae:	8928      	ldrh	r0, [r5, #8]
   1abb0:	f7fc fc92 	bl	174d8 <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   1abb4:	a909      	add	r1, sp, #36	; 0x24
   1abb6:	f7fc fcaf 	bl	17518 <ble_hs_conn_addrs>
        memcpy(peer_id_addr, addrs.peer_id_addr.val, 6);
   1abba:	ab0b      	add	r3, sp, #44	; 0x2c
   1abbc:	e893 0003 	ldmia.w	r3, {r0, r1}
   1abc0:	9001      	str	r0, [sp, #4]
   1abc2:	f8ad 1008 	strh.w	r1, [sp, #8]
   1abc6:	2601      	movs	r6, #1
    ble_hs_unlock();
   1abc8:	f7fb fe9c 	bl	16904 <ble_hs_unlock>
    if (proc == NULL) {
   1abcc:	b17c      	cbz	r4, 1abee <ble_sm_ltk_req_rx+0xba>
    if (res.app_status == 0) {
   1abce:	9b03      	ldr	r3, [sp, #12]
   1abd0:	b903      	cbnz	r3, 1abd4 <ble_sm_ltk_req_rx+0xa0>
        if (restore) {
   1abd2:	b976      	cbnz	r6, 1abf2 <ble_sm_ltk_req_rx+0xbe>
    ble_sm_process_result(evt->connection_handle, &res);
   1abd4:	a903      	add	r1, sp, #12
   1abd6:	8928      	ldrh	r0, [r5, #8]
   1abd8:	f7ff fe7f 	bl	1a8da <ble_sm_process_result>
    return 0;
   1abdc:	2000      	movs	r0, #0
}
   1abde:	b024      	add	sp, #144	; 0x90
   1abe0:	bd70      	pop	{r4, r5, r6, pc}
        ble_sm_ltk_req_neg_reply_tx(evt->connection_handle);
   1abe2:	8928      	ldrh	r0, [r5, #8]
   1abe4:	f7ff f9a2 	bl	19f2c <ble_sm_ltk_req_neg_reply_tx>
        restore = 0;
   1abe8:	2600      	movs	r6, #0
        proc = NULL;
   1abea:	4634      	mov	r4, r6
   1abec:	e7ec      	b.n	1abc8 <ble_sm_ltk_req_rx+0x94>
        return res.app_status;
   1abee:	9803      	ldr	r0, [sp, #12]
   1abf0:	e7f5      	b.n	1abde <ble_sm_ltk_req_rx+0xaa>
            store_rc = ble_sm_retrieve_ltk(evt, addrs.peer_id_addr.type,
   1abf2:	ab10      	add	r3, sp, #64	; 0x40
   1abf4:	aa01      	add	r2, sp, #4
   1abf6:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
   1abfa:	4628      	mov	r0, r5
   1abfc:	f7ff fac2 	bl	1a184 <ble_sm_retrieve_ltk>
            if (store_rc == 0) {
   1ac00:	b910      	cbnz	r0, 1ac08 <ble_sm_ltk_req_rx+0xd4>
                res.state_arg = &value_sec;
   1ac02:	ab10      	add	r3, sp, #64	; 0x40
   1ac04:	9307      	str	r3, [sp, #28]
   1ac06:	e7e5      	b.n	1abd4 <ble_sm_ltk_req_rx+0xa0>
                res.state_arg = NULL;
   1ac08:	2300      	movs	r3, #0
   1ac0a:	9307      	str	r3, [sp, #28]
   1ac0c:	e7e2      	b.n	1abd4 <ble_sm_ltk_req_rx+0xa0>

0001ac0e <ble_sm_our_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   1ac0e:	7a03      	ldrb	r3, [r0, #8]
   1ac10:	f013 0f01 	tst.w	r3, #1
   1ac14:	d101      	bne.n	1ac1a <ble_sm_our_pair_rand+0xc>
        return proc->rands;
   1ac16:	304e      	adds	r0, #78	; 0x4e
}
   1ac18:	4770      	bx	lr
        return proc->randm;
   1ac1a:	303e      	adds	r0, #62	; 0x3e
   1ac1c:	4770      	bx	lr

0001ac1e <ble_sm_pair_exec>:
{
   1ac1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac20:	b083      	sub	sp, #12
   1ac22:	4605      	mov	r5, r0
   1ac24:	460e      	mov	r6, r1
    is_req = proc->flags & BLE_SM_PROC_F_INITIATOR;
   1ac26:	7a03      	ldrb	r3, [r0, #8]
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   1ac28:	f013 0401 	ands.w	r4, r3, #1
   1ac2c:	d01d      	beq.n	1ac6a <ble_sm_pair_exec+0x4c>
   1ac2e:	2001      	movs	r0, #1
   1ac30:	aa01      	add	r2, sp, #4
   1ac32:	2106      	movs	r1, #6
   1ac34:	f000 f9e8 	bl	1b008 <ble_sm_cmd_get>
    if (cmd == NULL) {
   1ac38:	4607      	mov	r7, r0
   1ac3a:	2800      	cmp	r0, #0
   1ac3c:	d03f      	beq.n	1acbe <ble_sm_pair_exec+0xa0>
    if (is_req) {
   1ac3e:	b1b4      	cbz	r4, 1ac6e <ble_sm_pair_exec+0x50>
        ble_sm_pair_req_fill(proc);
   1ac40:	4628      	mov	r0, r5
   1ac42:	f7fe fe07 	bl	19854 <ble_sm_pair_req_fill>
        memcpy(cmd, proc->pair_req + 1, sizeof(*cmd));
   1ac46:	462b      	mov	r3, r5
   1ac48:	f853 2f11 	ldr.w	r2, [r3, #17]!
   1ac4c:	603a      	str	r2, [r7, #0]
   1ac4e:	889b      	ldrh	r3, [r3, #4]
   1ac50:	80bb      	strh	r3, [r7, #4]
    rc = ble_sm_tx(proc->conn_handle, txom);
   1ac52:	9901      	ldr	r1, [sp, #4]
   1ac54:	8968      	ldrh	r0, [r5, #10]
   1ac56:	f000 f9f1 	bl	1b03c <ble_sm_tx>
    if (rc != 0) {
   1ac5a:	4603      	mov	r3, r0
   1ac5c:	b300      	cbz	r0, 1aca0 <ble_sm_pair_exec+0x82>
    res->app_status = rc;
   1ac5e:	6033      	str	r3, [r6, #0]
    if (!is_req) {
   1ac60:	b90c      	cbnz	r4, 1ac66 <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1ac62:	2308      	movs	r3, #8
   1ac64:	7133      	strb	r3, [r6, #4]
}
   1ac66:	b003      	add	sp, #12
   1ac68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   1ac6a:	2002      	movs	r0, #2
   1ac6c:	e7e0      	b.n	1ac30 <ble_sm_pair_exec+0x12>
        memcpy(cmd, proc->pair_rsp + 1, sizeof(*cmd));
   1ac6e:	462b      	mov	r3, r5
   1ac70:	f853 2f18 	ldr.w	r2, [r3, #24]!
   1ac74:	6002      	str	r2, [r0, #0]
   1ac76:	889b      	ldrh	r3, [r3, #4]
   1ac78:	8083      	strh	r3, [r0, #4]
        proc->state = ble_sm_state_after_pair(proc);
   1ac7a:	4628      	mov	r0, r5
   1ac7c:	f7fe fdd0 	bl	19820 <ble_sm_state_after_pair>
   1ac80:	7368      	strb	r0, [r5, #13]
        rc = ble_sm_io_action(proc, &ioact);
   1ac82:	f10d 0103 	add.w	r1, sp, #3
   1ac86:	4628      	mov	r0, r5
   1ac88:	f7fe fe1b 	bl	198c2 <ble_sm_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state) {
   1ac8c:	f89d 7003 	ldrb.w	r7, [sp, #3]
   1ac90:	4638      	mov	r0, r7
   1ac92:	f7ff fd46 	bl	1a722 <ble_sm_ioact_state>
   1ac96:	7b6b      	ldrb	r3, [r5, #13]
   1ac98:	4298      	cmp	r0, r3
   1ac9a:	d1da      	bne.n	1ac52 <ble_sm_pair_exec+0x34>
            res->passkey_params.action = ioact;
   1ac9c:	7237      	strb	r7, [r6, #8]
   1ac9e:	e7d8      	b.n	1ac52 <ble_sm_pair_exec+0x34>
    res->app_status = ble_sm_gen_pair_rand(ble_sm_our_pair_rand(proc));
   1aca0:	4628      	mov	r0, r5
   1aca2:	f7ff ffb4 	bl	1ac0e <ble_sm_our_pair_rand>
   1aca6:	f7ff fb0d 	bl	1a2c4 <ble_sm_gen_pair_rand>
   1acaa:	6030      	str	r0, [r6, #0]
    if (res->app_status != 0) {
   1acac:	2800      	cmp	r0, #0
   1acae:	d0da      	beq.n	1ac66 <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1acb0:	2308      	movs	r3, #8
   1acb2:	7133      	strb	r3, [r6, #4]
        res->enc_cb = 1;
   1acb4:	7d33      	ldrb	r3, [r6, #20]
   1acb6:	f043 0302 	orr.w	r3, r3, #2
   1acba:	7533      	strb	r3, [r6, #20]
        return;
   1acbc:	e7d3      	b.n	1ac66 <ble_sm_pair_exec+0x48>
        rc = BLE_HS_ENOMEM;
   1acbe:	2306      	movs	r3, #6
   1acc0:	e7cd      	b.n	1ac5e <ble_sm_pair_exec+0x40>

0001acc2 <ble_sm_peer_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   1acc2:	7a03      	ldrb	r3, [r0, #8]
   1acc4:	f013 0f01 	tst.w	r3, #1
   1acc8:	d101      	bne.n	1acce <ble_sm_peer_pair_rand+0xc>
        return proc->randm;
   1acca:	303e      	adds	r0, #62	; 0x3e
}
   1accc:	4770      	bx	lr
        return proc->rands;
   1acce:	304e      	adds	r0, #78	; 0x4e
   1acd0:	4770      	bx	lr

0001acd2 <ble_sm_random_rx>:
{
   1acd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1acd4:	4606      	mov	r6, r0
   1acd6:	460d      	mov	r5, r1
   1acd8:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   1acda:	2110      	movs	r1, #16
   1acdc:	4628      	mov	r0, r5
   1acde:	f7fd fdad 	bl	1883c <ble_hs_mbuf_pullup_base>
   1ace2:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   1ace4:	b130      	cbz	r0, 1acf4 <ble_sm_random_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1ace6:	2308      	movs	r3, #8
   1ace8:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   1acea:	7d23      	ldrb	r3, [r4, #20]
   1acec:	f043 0302 	orr.w	r3, r3, #2
   1acf0:	7523      	strb	r3, [r4, #20]
}
   1acf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_random *)(*om)->om_data;
   1acf4:	682b      	ldr	r3, [r5, #0]
   1acf6:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   1acf8:	f7fb fe00 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_RANDOM, -1, NULL);
   1acfc:	2300      	movs	r3, #0
   1acfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ad02:	2102      	movs	r1, #2
   1ad04:	4630      	mov	r0, r6
   1ad06:	f7ff fb1f 	bl	1a348 <ble_sm_proc_find>
    if (proc == NULL) {
   1ad0a:	4606      	mov	r6, r0
   1ad0c:	b190      	cbz	r0, 1ad34 <ble_sm_random_rx+0x62>
        memcpy(ble_sm_peer_pair_rand(proc), cmd->value, 16);
   1ad0e:	f7ff ffd8 	bl	1acc2 <ble_sm_peer_pair_rand>
   1ad12:	682f      	ldr	r7, [r5, #0]
   1ad14:	6869      	ldr	r1, [r5, #4]
   1ad16:	68aa      	ldr	r2, [r5, #8]
   1ad18:	68eb      	ldr	r3, [r5, #12]
   1ad1a:	6007      	str	r7, [r0, #0]
   1ad1c:	6041      	str	r1, [r0, #4]
   1ad1e:	6082      	str	r2, [r0, #8]
   1ad20:	60c3      	str	r3, [r0, #12]
        if (proc->flags & BLE_SM_PROC_F_SC) {
   1ad22:	7a33      	ldrb	r3, [r6, #8]
   1ad24:	f013 0f10 	tst.w	r3, #16
   1ad28:	d106      	bne.n	1ad38 <ble_sm_random_rx+0x66>
            ble_sm_lgcy_random_rx(proc, res);
   1ad2a:	4621      	mov	r1, r4
   1ad2c:	4630      	mov	r0, r6
   1ad2e:	f000 fa87 	bl	1b240 <ble_sm_lgcy_random_rx>
   1ad32:	e001      	b.n	1ad38 <ble_sm_random_rx+0x66>
        res->app_status = BLE_HS_ENOENT;
   1ad34:	2305      	movs	r3, #5
   1ad36:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   1ad38:	f7fb fde4 	bl	16904 <ble_hs_unlock>
   1ad3c:	e7d9      	b.n	1acf2 <ble_sm_random_rx+0x20>

0001ad3e <ble_sm_timer>:
{
   1ad3e:	b530      	push	{r4, r5, lr}
   1ad40:	b083      	sub	sp, #12
    ticks_until_exp = ble_sm_extract_expired(&exp_list);
   1ad42:	4668      	mov	r0, sp
   1ad44:	f7ff f958 	bl	19ff8 <ble_sm_extract_expired>
   1ad48:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   1ad4a:	e002      	b.n	1ad52 <ble_sm_timer+0x14>
        ble_sm_proc_free(proc);
   1ad4c:	4620      	mov	r0, r4
   1ad4e:	f7ff f9ff 	bl	1a150 <ble_sm_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   1ad52:	9c00      	ldr	r4, [sp, #0]
   1ad54:	b164      	cbz	r4, 1ad70 <ble_sm_timer+0x32>
        ble_gap_enc_event(proc->conn_handle, BLE_HS_ETIMEOUT, 0);
   1ad56:	2200      	movs	r2, #0
   1ad58:	210d      	movs	r1, #13
   1ad5a:	8960      	ldrh	r0, [r4, #10]
   1ad5c:	f7f9 f93b 	bl	13fd6 <ble_gap_enc_event>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   1ad60:	9b00      	ldr	r3, [sp, #0]
   1ad62:	681b      	ldr	r3, [r3, #0]
   1ad64:	9300      	str	r3, [sp, #0]
   1ad66:	2b00      	cmp	r3, #0
   1ad68:	d1f0      	bne.n	1ad4c <ble_sm_timer+0xe>
   1ad6a:	f8cd d004 	str.w	sp, [sp, #4]
   1ad6e:	e7ed      	b.n	1ad4c <ble_sm_timer+0xe>
}
   1ad70:	4628      	mov	r0, r5
   1ad72:	b003      	add	sp, #12
   1ad74:	bd30      	pop	{r4, r5, pc}

0001ad76 <ble_sm_pair_initiate>:
{
   1ad76:	b530      	push	{r4, r5, lr}
   1ad78:	b087      	sub	sp, #28
   1ad7a:	4605      	mov	r5, r0
    memset(&res, 0, sizeof(res));
   1ad7c:	2400      	movs	r4, #0
   1ad7e:	9400      	str	r4, [sp, #0]
   1ad80:	9401      	str	r4, [sp, #4]
   1ad82:	9402      	str	r4, [sp, #8]
   1ad84:	9403      	str	r4, [sp, #12]
   1ad86:	9404      	str	r4, [sp, #16]
   1ad88:	9405      	str	r4, [sp, #20]
    ble_hs_lock();
   1ad8a:	f7fb fdb7 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   1ad8e:	4623      	mov	r3, r4
   1ad90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ad94:	21ff      	movs	r1, #255	; 0xff
   1ad96:	4628      	mov	r0, r5
   1ad98:	f7ff fad6 	bl	1a348 <ble_sm_proc_find>
   1ad9c:	4604      	mov	r4, r0
    ble_hs_unlock();
   1ad9e:	f7fb fdb1 	bl	16904 <ble_hs_unlock>
    if (proc != NULL) {
   1ada2:	b11c      	cbz	r4, 1adac <ble_sm_pair_initiate+0x36>
        return BLE_HS_EALREADY;
   1ada4:	2302      	movs	r3, #2
}
   1ada6:	4618      	mov	r0, r3
   1ada8:	b007      	add	sp, #28
   1adaa:	bd30      	pop	{r4, r5, pc}
    rc = ble_sm_chk_store_overflow(conn_handle);
   1adac:	4628      	mov	r0, r5
   1adae:	f7fe fd28 	bl	19802 <ble_sm_chk_store_overflow>
    if (rc != 0) {
   1adb2:	4603      	mov	r3, r0
   1adb4:	2800      	cmp	r0, #0
   1adb6:	d1f6      	bne.n	1ada6 <ble_sm_pair_initiate+0x30>
    proc = ble_sm_proc_alloc();
   1adb8:	f7ff f9d4 	bl	1a164 <ble_sm_proc_alloc>
    if (proc == NULL) {
   1adbc:	4604      	mov	r4, r0
   1adbe:	b1d0      	cbz	r0, 1adf6 <ble_sm_pair_initiate+0x80>
        proc->conn_handle = conn_handle;
   1adc0:	8145      	strh	r5, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   1adc2:	2300      	movs	r3, #0
   1adc4:	7343      	strb	r3, [r0, #13]
        proc->flags |= BLE_SM_PROC_F_INITIATOR;
   1adc6:	7a03      	ldrb	r3, [r0, #8]
   1adc8:	f043 0301 	orr.w	r3, r3, #1
   1adcc:	7203      	strb	r3, [r0, #8]
        ble_hs_lock();
   1adce:	f7fb fd95 	bl	168fc <ble_hs_lock>
        ble_sm_insert(proc);
   1add2:	4620      	mov	r0, r4
   1add4:	f7fe fcdc 	bl	19790 <ble_sm_insert>
        ble_hs_unlock();
   1add8:	f7fb fd94 	bl	16904 <ble_hs_unlock>
        res.execute = 1;
   1addc:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1ade0:	f043 0301 	orr.w	r3, r3, #1
   1ade4:	f88d 3014 	strb.w	r3, [sp, #20]
    if (proc != NULL) {
   1ade8:	b11c      	cbz	r4, 1adf2 <ble_sm_pair_initiate+0x7c>
        ble_sm_process_result(conn_handle, &res);
   1adea:	4669      	mov	r1, sp
   1adec:	4628      	mov	r0, r5
   1adee:	f7ff fd74 	bl	1a8da <ble_sm_process_result>
    return res.app_status;
   1adf2:	9b00      	ldr	r3, [sp, #0]
   1adf4:	e7d7      	b.n	1ada6 <ble_sm_pair_initiate+0x30>
        res.app_status = BLE_HS_ENOMEM;
   1adf6:	2306      	movs	r3, #6
   1adf8:	9300      	str	r3, [sp, #0]
   1adfa:	e7f5      	b.n	1ade8 <ble_sm_pair_initiate+0x72>

0001adfc <ble_sm_enc_initiate>:
{
   1adfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae00:	b08e      	sub	sp, #56	; 0x38
   1ae02:	4605      	mov	r5, r0
   1ae04:	4688      	mov	r8, r1
   1ae06:	4616      	mov	r6, r2
   1ae08:	461f      	mov	r7, r3
    memset(&res, 0, sizeof res);
   1ae0a:	2400      	movs	r4, #0
   1ae0c:	9408      	str	r4, [sp, #32]
   1ae0e:	9409      	str	r4, [sp, #36]	; 0x24
   1ae10:	940a      	str	r4, [sp, #40]	; 0x28
   1ae12:	940b      	str	r4, [sp, #44]	; 0x2c
   1ae14:	940c      	str	r4, [sp, #48]	; 0x30
   1ae16:	940d      	str	r4, [sp, #52]	; 0x34
    ble_hs_lock();
   1ae18:	f7fb fd70 	bl	168fc <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   1ae1c:	4623      	mov	r3, r4
   1ae1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ae22:	21ff      	movs	r1, #255	; 0xff
   1ae24:	4628      	mov	r0, r5
   1ae26:	f7ff fa8f 	bl	1a348 <ble_sm_proc_find>
    if (proc != NULL) {
   1ae2a:	b158      	cbz	r0, 1ae44 <ble_sm_enc_initiate+0x48>
        res.app_status = BLE_HS_EALREADY;
   1ae2c:	2302      	movs	r3, #2
   1ae2e:	9308      	str	r3, [sp, #32]
    ble_hs_unlock();
   1ae30:	f7fb fd68 	bl	16904 <ble_hs_unlock>
    ble_sm_process_result(conn_handle, &res);
   1ae34:	a908      	add	r1, sp, #32
   1ae36:	4628      	mov	r0, r5
   1ae38:	f7ff fd4f 	bl	1a8da <ble_sm_process_result>
}
   1ae3c:	9808      	ldr	r0, [sp, #32]
   1ae3e:	b00e      	add	sp, #56	; 0x38
   1ae40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        proc = ble_sm_proc_alloc();
   1ae44:	f7ff f98e 	bl	1a164 <ble_sm_proc_alloc>
        if (proc == NULL) {
   1ae48:	4603      	mov	r3, r0
   1ae4a:	b338      	cbz	r0, 1ae9c <ble_sm_enc_initiate+0xa0>
            proc->conn_handle = conn_handle;
   1ae4c:	8145      	strh	r5, [r0, #10]
            proc->key_size = key_size;
   1ae4e:	f880 800f 	strb.w	r8, [r0, #15]
            proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   1ae52:	2206      	movs	r2, #6
   1ae54:	7342      	strb	r2, [r0, #13]
            proc->flags |= BLE_SM_PROC_F_INITIATOR;
   1ae56:	7a02      	ldrb	r2, [r0, #8]
   1ae58:	f042 0201 	orr.w	r2, r2, #1
   1ae5c:	7202      	strb	r2, [r0, #8]
            if (auth) {
   1ae5e:	9916      	ldr	r1, [sp, #88]	; 0x58
   1ae60:	b111      	cbz	r1, 1ae68 <ble_sm_enc_initiate+0x6c>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   1ae62:	f042 0208 	orr.w	r2, r2, #8
   1ae66:	7202      	strb	r2, [r0, #8]
            ble_sm_insert(proc);
   1ae68:	4618      	mov	r0, r3
   1ae6a:	f7fe fc91 	bl	19790 <ble_sm_insert>
            cmd.connection_handle = conn_handle;
   1ae6e:	f8ad 5000 	strh.w	r5, [sp]
            cmd.encrypted_diversifier = ediv;
   1ae72:	f8ad 7002 	strh.w	r7, [sp, #2]
            cmd.random_number = rand_val;
   1ae76:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1ae7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
            memcpy(cmd.long_term_key, ltk, sizeof cmd.long_term_key);
   1ae7e:	ac04      	add	r4, sp, #16
   1ae80:	6830      	ldr	r0, [r6, #0]
   1ae82:	6871      	ldr	r1, [r6, #4]
   1ae84:	68b2      	ldr	r2, [r6, #8]
   1ae86:	68f3      	ldr	r3, [r6, #12]
   1ae88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            res.execute = 1;
   1ae8a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   1ae8e:	f043 0301 	orr.w	r3, r3, #1
   1ae92:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            res.state_arg = &cmd;
   1ae96:	f8cd d030 	str.w	sp, [sp, #48]	; 0x30
   1ae9a:	e7c9      	b.n	1ae30 <ble_sm_enc_initiate+0x34>
            res.app_status = BLE_HS_ENOMEM;
   1ae9c:	2306      	movs	r3, #6
   1ae9e:	9308      	str	r3, [sp, #32]
   1aea0:	e7c6      	b.n	1ae30 <ble_sm_enc_initiate+0x34>

0001aea2 <ble_sm_sec_req_rx>:
{
   1aea2:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1aea6:	b0a8      	sub	sp, #160	; 0xa0
   1aea8:	4606      	mov	r6, r0
   1aeaa:	460d      	mov	r5, r1
   1aeac:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   1aeae:	2101      	movs	r1, #1
   1aeb0:	4628      	mov	r0, r5
   1aeb2:	f7fd fcc3 	bl	1883c <ble_hs_mbuf_pullup_base>
   1aeb6:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   1aeb8:	b110      	cbz	r0, 1aec0 <ble_sm_sec_req_rx+0x1e>
}
   1aeba:	b028      	add	sp, #160	; 0xa0
   1aebc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    cmd = (struct ble_sm_sec_req *)(*om)->om_data;
   1aec0:	682b      	ldr	r3, [r5, #0]
   1aec2:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   1aec4:	f7fb fd1a 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   1aec8:	4630      	mov	r0, r6
   1aeca:	f7fc fb05 	bl	174d8 <ble_hs_conn_find_assert>
    if (!(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   1aece:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   1aed2:	f013 0f01 	tst.w	r3, #1
   1aed6:	d132      	bne.n	1af3e <ble_sm_sec_req_rx+0x9c>
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   1aed8:	f240 4307 	movw	r3, #1031	; 0x407
   1aedc:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   1aede:	2307      	movs	r3, #7
   1aee0:	7123      	strb	r3, [r4, #4]
    ble_hs_unlock();
   1aee2:	f7fb fd0f 	bl	16904 <ble_hs_unlock>
    if (res->app_status == 0) {
   1aee6:	6823      	ldr	r3, [r4, #0]
   1aee8:	2b00      	cmp	r3, #0
   1aeea:	d1e6      	bne.n	1aeba <ble_sm_sec_req_rx+0x18>
        if (cmd->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   1aeec:	782b      	ldrb	r3, [r5, #0]
   1aeee:	f013 0f01 	tst.w	r3, #1
   1aef2:	d141      	bne.n	1af78 <ble_sm_sec_req_rx+0xd6>
            res->app_status = BLE_HS_ENOENT;
   1aef4:	2305      	movs	r3, #5
   1aef6:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   1aef8:	6823      	ldr	r3, [r4, #0]
   1aefa:	b953      	cbnz	r3, 1af12 <ble_sm_sec_req_rx+0x70>
            authreq_mitm = cmd->authreq & BLE_SM_PAIR_AUTHREQ_MITM;
   1aefc:	782b      	ldrb	r3, [r5, #0]
            if (authreq_mitm && !value_sec.authenticated) {
   1aefe:	f013 0f04 	tst.w	r3, #4
   1af02:	d006      	beq.n	1af12 <ble_sm_sec_req_rx+0x70>
   1af04:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
   1af08:	f013 0f02 	tst.w	r3, #2
   1af0c:	d101      	bne.n	1af12 <ble_sm_sec_req_rx+0x70>
                res->app_status = BLE_HS_EREJECT;
   1af0e:	2310      	movs	r3, #16
   1af10:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   1af12:	6823      	ldr	r3, [r4, #0]
   1af14:	2b00      	cmp	r3, #0
   1af16:	d135      	bne.n	1af84 <ble_sm_sec_req_rx+0xe2>
                                                  value_sec.authenticated);
   1af18:	f89d 209a 	ldrb.w	r2, [sp, #154]	; 0x9a
   1af1c:	f3c2 0240 	ubfx	r2, r2, #1, #1
            res->app_status = ble_sm_enc_initiate(conn_handle,
   1af20:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   1af24:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
   1af28:	9202      	str	r2, [sp, #8]
   1af2a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   1af2e:	e9cd 8900 	strd	r8, r9, [sp]
   1af32:	aa1a      	add	r2, sp, #104	; 0x68
   1af34:	4630      	mov	r0, r6
   1af36:	f7ff ff61 	bl	1adfc <ble_sm_enc_initiate>
   1af3a:	6020      	str	r0, [r4, #0]
   1af3c:	e7bd      	b.n	1aeba <ble_sm_sec_req_rx+0x18>
        ble_hs_conn_addrs(conn, &addrs);
   1af3e:	a905      	add	r1, sp, #20
   1af40:	f7fc faea 	bl	17518 <ble_hs_conn_addrs>
        memset(&key_sec, 0, sizeof key_sec);
   1af44:	2300      	movs	r3, #0
   1af46:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   1af4a:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   1af4e:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
   1af52:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
   1af56:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
   1af5a:	f8cd 304a 	str.w	r3, [sp, #74]	; 0x4a
   1af5e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        key_sec.peer_addr = addrs.peer_id_addr;
   1af62:	ab28      	add	r3, sp, #160	; 0xa0
   1af64:	f853 0d85 	ldr.w	r0, [r3, #-133]!
   1af68:	900c      	str	r0, [sp, #48]	; 0x30
   1af6a:	889a      	ldrh	r2, [r3, #4]
   1af6c:	799b      	ldrb	r3, [r3, #6]
   1af6e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   1af72:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
   1af76:	e7b4      	b.n	1aee2 <ble_sm_sec_req_rx+0x40>
            res->app_status = ble_store_read_peer_sec(&key_sec, &value_sec);
   1af78:	a914      	add	r1, sp, #80	; 0x50
   1af7a:	a80c      	add	r0, sp, #48	; 0x30
   1af7c:	f000 fa2d 	bl	1b3da <ble_store_read_peer_sec>
   1af80:	6020      	str	r0, [r4, #0]
   1af82:	e7b9      	b.n	1aef8 <ble_sm_sec_req_rx+0x56>
            res->app_status = ble_sm_pair_initiate(conn_handle);
   1af84:	4630      	mov	r0, r6
   1af86:	f7ff fef6 	bl	1ad76 <ble_sm_pair_initiate>
   1af8a:	6020      	str	r0, [r4, #0]
   1af8c:	e795      	b.n	1aeba <ble_sm_sec_req_rx+0x18>

0001af8e <ble_sm_connection_broken>:
    return res.app_status;
}

void
ble_sm_connection_broken(uint16_t conn_handle)
{
   1af8e:	b500      	push	{lr}
   1af90:	b087      	sub	sp, #28
    struct ble_sm_result res;

    memset(&res, 0, sizeof res);
   1af92:	2300      	movs	r3, #0
   1af94:	9301      	str	r3, [sp, #4]
   1af96:	9302      	str	r3, [sp, #8]
   1af98:	9303      	str	r3, [sp, #12]
   1af9a:	9304      	str	r3, [sp, #16]
   1af9c:	9305      	str	r3, [sp, #20]
    res.app_status = BLE_HS_ENOTCONN;
   1af9e:	2307      	movs	r3, #7
   1afa0:	9300      	str	r3, [sp, #0]
    res.enc_cb = 1;
   1afa2:	2302      	movs	r3, #2
   1afa4:	f88d 3014 	strb.w	r3, [sp, #20]

    ble_sm_process_result(conn_handle, &res);
   1afa8:	4669      	mov	r1, sp
   1afaa:	f7ff fc96 	bl	1a8da <ble_sm_process_result>
}
   1afae:	b007      	add	sp, #28
   1afb0:	f85d fb04 	ldr.w	pc, [sp], #4

0001afb4 <ble_sm_init>:

int
ble_sm_init(void)
{
   1afb4:	b500      	push	{lr}
   1afb6:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_sm_procs);
   1afb8:	4b07      	ldr	r3, [pc, #28]	; (1afd8 <ble_sm_init+0x24>)
   1afba:	2200      	movs	r2, #0
   1afbc:	601a      	str	r2, [r3, #0]
   1afbe:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_sm_proc_pool,
   1afc0:	4b06      	ldr	r3, [pc, #24]	; (1afdc <ble_sm_init+0x28>)
   1afc2:	9300      	str	r3, [sp, #0]
   1afc4:	4b06      	ldr	r3, [pc, #24]	; (1afe0 <ble_sm_init+0x2c>)
   1afc6:	f44f 7280 	mov.w	r2, #256	; 0x100
   1afca:	2101      	movs	r1, #1
   1afcc:	4805      	ldr	r0, [pc, #20]	; (1afe4 <ble_sm_init+0x30>)
   1afce:	f7f6 fb95 	bl	116fc <os_mempool_init>
    }

    ble_sm_sc_init();

    return 0;
}
   1afd2:	b003      	add	sp, #12
   1afd4:	f85d fb04 	ldr.w	pc, [sp], #4
   1afd8:	20002c40 	.word	0x20002c40
   1afdc:	0002c578 	.word	0x0002c578
   1afe0:	20002b24 	.word	0x20002b24
   1afe4:	20002c24 	.word	0x20002c24

0001afe8 <ble_sm_create_chan>:
}
#endif

struct ble_l2cap_chan *
ble_sm_create_chan(uint16_t conn_handle)
{
   1afe8:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   1afea:	f7fd ffd7 	bl	18f9c <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   1afee:	4603      	mov	r3, r0
   1aff0:	b130      	cbz	r0, 1b000 <ble_sm_create_chan+0x18>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_SM;
   1aff2:	2206      	movs	r2, #6
   1aff4:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SM;
   1aff6:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_SM_MTU;
   1aff8:	2241      	movs	r2, #65	; 0x41
   1affa:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_sm_rx;
   1affc:	4a01      	ldr	r2, [pc, #4]	; (1b004 <ble_sm_create_chan+0x1c>)
   1affe:	6182      	str	r2, [r0, #24]

    return chan;
}
   1b000:	4618      	mov	r0, r3
   1b002:	bd08      	pop	{r3, pc}
   1b004:	0001aaa9 	.word	0x0001aaa9

0001b008 <ble_sm_cmd_get>:
#include "host/ble_sm.h"
#include "ble_hs_priv.h"

void *
ble_sm_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   1b008:	b570      	push	{r4, r5, r6, lr}
   1b00a:	4606      	mov	r6, r0
   1b00c:	460c      	mov	r4, r1
   1b00e:	4615      	mov	r5, r2
    struct ble_sm_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   1b010:	f7fd fbf6 	bl	18800 <ble_hs_mbuf_l2cap_pkt>
   1b014:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   1b016:	b178      	cbz	r0, 1b038 <ble_sm_cmd_get+0x30>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   1b018:	1c61      	adds	r1, r4, #1
   1b01a:	b289      	uxth	r1, r1
   1b01c:	f7f6 fa48 	bl	114b0 <os_mbuf_extend>
   1b020:	4604      	mov	r4, r0
   1b022:	b128      	cbz	r0, 1b030 <ble_sm_cmd_get+0x28>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_sm_hdr *)(*txom)->om_data;
   1b024:	682b      	ldr	r3, [r5, #0]

    hdr->opcode = opcode;
   1b026:	681c      	ldr	r4, [r3, #0]
   1b028:	f804 6b01 	strb.w	r6, [r4], #1

    return hdr->data;
}
   1b02c:	4620      	mov	r0, r4
   1b02e:	bd70      	pop	{r4, r5, r6, pc}
        os_mbuf_free_chain(*txom);
   1b030:	6828      	ldr	r0, [r5, #0]
   1b032:	f7f5 ff53 	bl	10edc <os_mbuf_free_chain>
        return NULL;
   1b036:	e7f9      	b.n	1b02c <ble_sm_cmd_get+0x24>
        return NULL;
   1b038:	2400      	movs	r4, #0
   1b03a:	e7f7      	b.n	1b02c <ble_sm_cmd_get+0x24>

0001b03c <ble_sm_tx>:

/* this function consumes tx os_mbuf */
int
ble_sm_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   1b03c:	b510      	push	{r4, lr}
   1b03e:	b082      	sub	sp, #8
   1b040:	460c      	mov	r4, r1

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    STATS_INC(ble_l2cap_stats, sm_tx);

    ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SM,
   1b042:	ab01      	add	r3, sp, #4
   1b044:	466a      	mov	r2, sp
   1b046:	2106      	movs	r1, #6
   1b048:	f7fd fc32 	bl	188b0 <ble_hs_misc_conn_chan_find_reqd>
                                    &conn, &chan);
    return ble_l2cap_tx(conn, chan, txom);
   1b04c:	4622      	mov	r2, r4
   1b04e:	9901      	ldr	r1, [sp, #4]
   1b050:	9800      	ldr	r0, [sp, #0]
   1b052:	f7fe f88a 	bl	1916a <ble_l2cap_tx>
}
   1b056:	b002      	add	sp, #8
   1b058:	bd10      	pop	{r4, pc}

0001b05a <ble_sm_gen_stk>:
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
}

static int
ble_sm_gen_stk(struct ble_sm_proc *proc)
{
   1b05a:	b570      	push	{r4, r5, r6, lr}
   1b05c:	b084      	sub	sp, #16
   1b05e:	4604      	mov	r4, r0
    uint8_t key[16];
    int rc;

    rc = ble_sm_alg_s1(proc->tk, proc->rands, proc->randm, key);
   1b060:	466b      	mov	r3, sp
   1b062:	f100 023e 	add.w	r2, r0, #62	; 0x3e
   1b066:	f100 014e 	add.w	r1, r0, #78	; 0x4e
   1b06a:	301e      	adds	r0, #30
   1b06c:	f002 fa59 	bl	1d522 <ble_sm_alg_s1>
    if (rc != 0) {
   1b070:	4605      	mov	r5, r0
   1b072:	b110      	cbz	r0, 1b07a <ble_sm_gen_stk+0x20>

    /* Ensure proper key size */
    memset(proc->ltk + proc->key_size, 0, sizeof key - proc->key_size);

    return 0;
}
   1b074:	4628      	mov	r0, r5
   1b076:	b004      	add	sp, #16
   1b078:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(proc->ltk, key, proc->key_size);
   1b07a:	f104 065e 	add.w	r6, r4, #94	; 0x5e
   1b07e:	7be4      	ldrb	r4, [r4, #15]
   1b080:	4622      	mov	r2, r4
   1b082:	4669      	mov	r1, sp
   1b084:	4630      	mov	r0, r6
   1b086:	f7f7 fa1d 	bl	124c4 <memcpy>
    memset(proc->ltk + proc->key_size, 0, sizeof key - proc->key_size);
   1b08a:	f1c4 0210 	rsb	r2, r4, #16
   1b08e:	2100      	movs	r1, #0
   1b090:	1930      	adds	r0, r6, r4
   1b092:	f7f7 fa40 	bl	12516 <memset>
    return 0;
   1b096:	e7ed      	b.n	1b074 <ble_sm_gen_stk+0x1a>

0001b098 <ble_sm_lgcy_io_action>:
{
   1b098:	b410      	push	{r4}
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES &&
   1b09a:	7c83      	ldrb	r3, [r0, #18]
   1b09c:	2b01      	cmp	r3, #1
   1b09e:	d00a      	beq.n	1b0b6 <ble_sm_lgcy_io_action+0x1e>
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   1b0a0:	7cc3      	ldrb	r3, [r0, #19]
   1b0a2:	f013 0f04 	tst.w	r3, #4
   1b0a6:	d10b      	bne.n	1b0c0 <ble_sm_lgcy_io_action+0x28>
               !(pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_MITM)) {
   1b0a8:	7e83      	ldrb	r3, [r0, #26]
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   1b0aa:	f013 0f04 	tst.w	r3, #4
   1b0ae:	d107      	bne.n	1b0c0 <ble_sm_lgcy_io_action+0x28>
        *action = BLE_SM_IOACT_NONE;
   1b0b0:	2300      	movs	r3, #0
   1b0b2:	700b      	strb	r3, [r1, #0]
   1b0b4:	e00c      	b.n	1b0d0 <ble_sm_lgcy_io_action+0x38>
        pair_rsp->oob_data_flag == BLE_SM_PAIR_OOB_YES) {
   1b0b6:	7e43      	ldrb	r3, [r0, #25]
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES &&
   1b0b8:	2b01      	cmp	r3, #1
   1b0ba:	d1f1      	bne.n	1b0a0 <ble_sm_lgcy_io_action+0x8>
        *action = BLE_SM_IOACT_OOB;
   1b0bc:	700b      	strb	r3, [r1, #0]
   1b0be:	e007      	b.n	1b0d0 <ble_sm_lgcy_io_action+0x38>
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   1b0c0:	7c43      	ldrb	r3, [r0, #17]
   1b0c2:	2b04      	cmp	r3, #4
   1b0c4:	d802      	bhi.n	1b0cc <ble_sm_lgcy_io_action+0x34>
               pair_rsp->io_cap >= BLE_SM_IO_CAP_RESERVED) {
   1b0c6:	7e02      	ldrb	r2, [r0, #24]
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   1b0c8:	2a04      	cmp	r2, #4
   1b0ca:	d908      	bls.n	1b0de <ble_sm_lgcy_io_action+0x46>
        *action = BLE_SM_IOACT_NONE;
   1b0cc:	2300      	movs	r3, #0
   1b0ce:	700b      	strb	r3, [r1, #0]
    switch (*action) {
   1b0d0:	780b      	ldrb	r3, [r1, #0]
   1b0d2:	2b03      	cmp	r3, #3
   1b0d4:	d82b      	bhi.n	1b12e <ble_sm_lgcy_io_action+0x96>
   1b0d6:	e8df f003 	tbb	[pc, r3]
   1b0da:	1a14      	.short	0x1a14
   1b0dc:	2222      	.short	0x2222
    } else if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   1b0de:	7a04      	ldrb	r4, [r0, #8]
   1b0e0:	f014 0f01 	tst.w	r4, #1
   1b0e4:	d006      	beq.n	1b0f4 <ble_sm_lgcy_io_action+0x5c>
        *action = ble_sm_lgcy_init_ioa[pair_rsp->io_cap][pair_req->io_cap];
   1b0e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1b0ea:	4c12      	ldr	r4, [pc, #72]	; (1b134 <ble_sm_lgcy_io_action+0x9c>)
   1b0ec:	4422      	add	r2, r4
   1b0ee:	5cd3      	ldrb	r3, [r2, r3]
   1b0f0:	700b      	strb	r3, [r1, #0]
   1b0f2:	e7ed      	b.n	1b0d0 <ble_sm_lgcy_io_action+0x38>
        *action = ble_sm_lgcy_resp_ioa[pair_rsp->io_cap][pair_req->io_cap];
   1b0f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1b0f8:	4c0f      	ldr	r4, [pc, #60]	; (1b138 <ble_sm_lgcy_io_action+0xa0>)
   1b0fa:	4422      	add	r2, r4
   1b0fc:	5cd3      	ldrb	r3, [r2, r3]
   1b0fe:	700b      	strb	r3, [r1, #0]
   1b100:	e7e6      	b.n	1b0d0 <ble_sm_lgcy_io_action+0x38>
        proc->pair_alg = BLE_SM_PAIR_ALG_JW;
   1b102:	2300      	movs	r3, #0
   1b104:	7303      	strb	r3, [r0, #12]
    return 0;
   1b106:	4618      	mov	r0, r3
}
   1b108:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b10c:	4770      	bx	lr
        proc->pair_alg = BLE_SM_PAIR_ALG_OOB;
   1b10e:	2302      	movs	r3, #2
   1b110:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   1b112:	7a03      	ldrb	r3, [r0, #8]
   1b114:	f043 0308 	orr.w	r3, r3, #8
   1b118:	7203      	strb	r3, [r0, #8]
    return 0;
   1b11a:	2000      	movs	r0, #0
        break;
   1b11c:	e7f4      	b.n	1b108 <ble_sm_lgcy_io_action+0x70>
        proc->pair_alg = BLE_SM_PAIR_ALG_PASSKEY;
   1b11e:	2301      	movs	r3, #1
   1b120:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   1b122:	7a03      	ldrb	r3, [r0, #8]
   1b124:	f043 0308 	orr.w	r3, r3, #8
   1b128:	7203      	strb	r3, [r0, #8]
    return 0;
   1b12a:	2000      	movs	r0, #0
        break;
   1b12c:	e7ec      	b.n	1b108 <ble_sm_lgcy_io_action+0x70>
        return BLE_HS_EINVAL;
   1b12e:	2003      	movs	r0, #3
   1b130:	e7ea      	b.n	1b108 <ble_sm_lgcy_io_action+0x70>
   1b132:	bf00      	nop
   1b134:	0002c5b8 	.word	0x0002c5b8
   1b138:	0002c5d4 	.word	0x0002c5d4

0001b13c <ble_sm_lgcy_confirm_exec>:
{
   1b13c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b140:	b08d      	sub	sp, #52	; 0x34
   1b142:	4605      	mov	r5, r0
   1b144:	460c      	mov	r4, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_CONFIRM, sizeof(*cmd), &txom);
   1b146:	aa0b      	add	r2, sp, #44	; 0x2c
   1b148:	2110      	movs	r1, #16
   1b14a:	2003      	movs	r0, #3
   1b14c:	f7ff ff5c 	bl	1b008 <ble_sm_cmd_get>
    if (cmd == NULL) {
   1b150:	b398      	cbz	r0, 1b1ba <ble_sm_lgcy_confirm_exec+0x7e>
   1b152:	4681      	mov	r9, r0
    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   1b154:	f10d 0824 	add.w	r8, sp, #36	; 0x24
   1b158:	af07      	add	r7, sp, #28
   1b15a:	9700      	str	r7, [sp, #0]
   1b15c:	f10d 031a 	add.w	r3, sp, #26
   1b160:	4642      	mov	r2, r8
   1b162:	f10d 011b 	add.w	r1, sp, #27
   1b166:	4628      	mov	r0, r5
   1b168:	f7ff f8b1 	bl	1a2ce <ble_sm_ia_ra>
    rc = ble_sm_alg_c1(proc->tk, ble_sm_our_pair_rand(proc), proc->pair_req,
   1b16c:	f105 061e 	add.w	r6, r5, #30
   1b170:	4628      	mov	r0, r5
   1b172:	f7ff fd4c 	bl	1ac0e <ble_sm_our_pair_rand>
   1b176:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1b17a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   1b17e:	f8cd 9010 	str.w	r9, [sp, #16]
   1b182:	9703      	str	r7, [sp, #12]
   1b184:	f8cd 8008 	str.w	r8, [sp, #8]
   1b188:	9201      	str	r2, [sp, #4]
   1b18a:	9300      	str	r3, [sp, #0]
   1b18c:	f105 0317 	add.w	r3, r5, #23
   1b190:	f105 0210 	add.w	r2, r5, #16
   1b194:	4601      	mov	r1, r0
   1b196:	4630      	mov	r0, r6
   1b198:	f002 f9eb 	bl	1d572 <ble_sm_alg_c1>
    if (rc != 0) {
   1b19c:	4606      	mov	r6, r0
   1b19e:	b968      	cbnz	r0, 1b1bc <ble_sm_lgcy_confirm_exec+0x80>
    rc = ble_sm_tx(proc->conn_handle, txom);
   1b1a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1b1a2:	8968      	ldrh	r0, [r5, #10]
   1b1a4:	f7ff ff4a 	bl	1b03c <ble_sm_tx>
    if (rc != 0) {
   1b1a8:	4606      	mov	r6, r0
   1b1aa:	b938      	cbnz	r0, 1b1bc <ble_sm_lgcy_confirm_exec+0x80>
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   1b1ac:	7a2b      	ldrb	r3, [r5, #8]
   1b1ae:	f013 0f01 	tst.w	r3, #1
   1b1b2:	d10e      	bne.n	1b1d2 <ble_sm_lgcy_confirm_exec+0x96>
        proc->state = BLE_SM_PROC_STATE_RANDOM;
   1b1b4:	2302      	movs	r3, #2
   1b1b6:	736b      	strb	r3, [r5, #13]
   1b1b8:	e00b      	b.n	1b1d2 <ble_sm_lgcy_confirm_exec+0x96>
        rc = BLE_HS_ENOMEM;
   1b1ba:	2606      	movs	r6, #6
    if (txom) {
   1b1bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1b1be:	b108      	cbz	r0, 1b1c4 <ble_sm_lgcy_confirm_exec+0x88>
        os_mbuf_free_chain(txom);
   1b1c0:	f7f5 fe8c 	bl	10edc <os_mbuf_free_chain>
    res->app_status = rc;
   1b1c4:	6026      	str	r6, [r4, #0]
    res->enc_cb = 1;
   1b1c6:	7d23      	ldrb	r3, [r4, #20]
   1b1c8:	f043 0302 	orr.w	r3, r3, #2
   1b1cc:	7523      	strb	r3, [r4, #20]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1b1ce:	2308      	movs	r3, #8
   1b1d0:	7123      	strb	r3, [r4, #4]
}
   1b1d2:	b00d      	add	sp, #52	; 0x34
   1b1d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001b1d8 <ble_sm_lgcy_random_exec>:

void
ble_sm_lgcy_random_exec(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   1b1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1da:	b083      	sub	sp, #12
   1b1dc:	4606      	mov	r6, r0
   1b1de:	460c      	mov	r4, r1
    struct ble_sm_pair_random *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_RANDOM, sizeof(*cmd), &txom);
   1b1e0:	aa01      	add	r2, sp, #4
   1b1e2:	2110      	movs	r1, #16
   1b1e4:	2004      	movs	r0, #4
   1b1e6:	f7ff ff0f 	bl	1b008 <ble_sm_cmd_get>
    if (cmd == NULL) {
   1b1ea:	b1c0      	cbz	r0, 1b21e <ble_sm_lgcy_random_exec+0x46>
   1b1ec:	4605      	mov	r5, r0
        res->enc_cb = 1;
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
        return;
    }

    memcpy(cmd->value, ble_sm_our_pair_rand(proc), 16);
   1b1ee:	4630      	mov	r0, r6
   1b1f0:	f7ff fd0d 	bl	1ac0e <ble_sm_our_pair_rand>
   1b1f4:	6807      	ldr	r7, [r0, #0]
   1b1f6:	6841      	ldr	r1, [r0, #4]
   1b1f8:	6882      	ldr	r2, [r0, #8]
   1b1fa:	68c3      	ldr	r3, [r0, #12]
   1b1fc:	602f      	str	r7, [r5, #0]
   1b1fe:	6069      	str	r1, [r5, #4]
   1b200:	60aa      	str	r2, [r5, #8]
   1b202:	60eb      	str	r3, [r5, #12]

    rc = ble_sm_tx(proc->conn_handle, txom);
   1b204:	9901      	ldr	r1, [sp, #4]
   1b206:	8970      	ldrh	r0, [r6, #10]
   1b208:	f7ff ff18 	bl	1b03c <ble_sm_tx>
    if (rc != 0) {
   1b20c:	b188      	cbz	r0, 1b232 <ble_sm_lgcy_random_exec+0x5a>
        res->app_status = rc;
   1b20e:	6020      	str	r0, [r4, #0]
        res->enc_cb = 1;
   1b210:	7d23      	ldrb	r3, [r4, #20]
   1b212:	f043 0302 	orr.w	r3, r3, #2
   1b216:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1b218:	2308      	movs	r3, #8
   1b21a:	7123      	strb	r3, [r4, #4]
        return;
   1b21c:	e007      	b.n	1b22e <ble_sm_lgcy_random_exec+0x56>
        res->app_status = BLE_HS_ENOMEM;
   1b21e:	2306      	movs	r3, #6
   1b220:	6023      	str	r3, [r4, #0]
        res->enc_cb = 1;
   1b222:	7d23      	ldrb	r3, [r4, #20]
   1b224:	f043 0302 	orr.w	r3, r3, #2
   1b228:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1b22a:	2308      	movs	r3, #8
   1b22c:	7123      	strb	r3, [r4, #4]
    }

    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
        proc->state = BLE_SM_PROC_STATE_LTK_START;
    }
}
   1b22e:	b003      	add	sp, #12
   1b230:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   1b232:	7a33      	ldrb	r3, [r6, #8]
   1b234:	f013 0f01 	tst.w	r3, #1
   1b238:	d1f9      	bne.n	1b22e <ble_sm_lgcy_random_exec+0x56>
        proc->state = BLE_SM_PROC_STATE_LTK_START;
   1b23a:	2303      	movs	r3, #3
   1b23c:	7373      	strb	r3, [r6, #13]
   1b23e:	e7f6      	b.n	1b22e <ble_sm_lgcy_random_exec+0x56>

0001b240 <ble_sm_lgcy_random_rx>:

void
ble_sm_lgcy_random_rx(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   1b240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b244:	b090      	sub	sp, #64	; 0x40
   1b246:	4604      	mov	r4, r0
   1b248:	460d      	mov	r5, r1
    uint8_t ra[6];
    uint8_t iat;
    uint8_t rat;
    int rc;

    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   1b24a:	ae0a      	add	r6, sp, #40	; 0x28
   1b24c:	af08      	add	r7, sp, #32
   1b24e:	9700      	str	r7, [sp, #0]
   1b250:	f10d 031e 	add.w	r3, sp, #30
   1b254:	4632      	mov	r2, r6
   1b256:	f10d 011f 	add.w	r1, sp, #31
   1b25a:	f7ff f838 	bl	1a2ce <ble_sm_ia_ra>

    rc = ble_sm_alg_c1(proc->tk, ble_sm_peer_pair_rand(proc), proc->pair_req,
   1b25e:	f104 081e 	add.w	r8, r4, #30
   1b262:	4620      	mov	r0, r4
   1b264:	f7ff fd2d 	bl	1acc2 <ble_sm_peer_pair_rand>
   1b268:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1b26c:	f89d 201e 	ldrb.w	r2, [sp, #30]
   1b270:	a90c      	add	r1, sp, #48	; 0x30
   1b272:	9104      	str	r1, [sp, #16]
   1b274:	9703      	str	r7, [sp, #12]
   1b276:	9602      	str	r6, [sp, #8]
   1b278:	9201      	str	r2, [sp, #4]
   1b27a:	9300      	str	r3, [sp, #0]
   1b27c:	f104 0317 	add.w	r3, r4, #23
   1b280:	f104 0210 	add.w	r2, r4, #16
   1b284:	4601      	mov	r1, r0
   1b286:	4640      	mov	r0, r8
   1b288:	f002 f973 	bl	1d572 <ble_sm_alg_c1>
                       proc->pair_rsp, iat, rat, ia, ra, confirm_val);
    if (rc != 0) {
   1b28c:	b148      	cbz	r0, 1b2a2 <ble_sm_lgcy_random_rx+0x62>
        res->app_status = rc;
   1b28e:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1b290:	2308      	movs	r3, #8
   1b292:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   1b294:	7d2b      	ldrb	r3, [r5, #20]
   1b296:	f043 0302 	orr.w	r3, r3, #2
   1b29a:	752b      	strb	r3, [r5, #20]
         */
        proc->state = BLE_SM_PROC_STATE_ENC_START;
    }

    res->execute = 1;
}
   1b29c:	b010      	add	sp, #64	; 0x40
   1b29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (memcmp(proc->confirm_peer, confirm_val, 16) != 0) {
   1b2a2:	2210      	movs	r2, #16
   1b2a4:	a90c      	add	r1, sp, #48	; 0x30
   1b2a6:	f104 002e 	add.w	r0, r4, #46	; 0x2e
   1b2aa:	f7f7 f8e7 	bl	1247c <memcmp>
   1b2ae:	b148      	cbz	r0, 1b2c4 <ble_sm_lgcy_random_rx+0x84>
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CONFIRM_MISMATCH);
   1b2b0:	f240 4304 	movw	r3, #1028	; 0x404
   1b2b4:	602b      	str	r3, [r5, #0]
        res->sm_err = BLE_SM_ERR_CONFIRM_MISMATCH;
   1b2b6:	2304      	movs	r3, #4
   1b2b8:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   1b2ba:	7d2b      	ldrb	r3, [r5, #20]
   1b2bc:	f043 0302 	orr.w	r3, r3, #2
   1b2c0:	752b      	strb	r3, [r5, #20]
        return;
   1b2c2:	e7eb      	b.n	1b29c <ble_sm_lgcy_random_rx+0x5c>
    rc = ble_sm_gen_stk(proc);
   1b2c4:	4620      	mov	r0, r4
   1b2c6:	f7ff fec8 	bl	1b05a <ble_sm_gen_stk>
    if (rc != 0) {
   1b2ca:	b138      	cbz	r0, 1b2dc <ble_sm_lgcy_random_rx+0x9c>
        res->app_status = rc;
   1b2cc:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1b2ce:	2308      	movs	r3, #8
   1b2d0:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   1b2d2:	7d2b      	ldrb	r3, [r5, #20]
   1b2d4:	f043 0302 	orr.w	r3, r3, #2
   1b2d8:	752b      	strb	r3, [r5, #20]
        return;
   1b2da:	e7df      	b.n	1b29c <ble_sm_lgcy_random_rx+0x5c>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   1b2dc:	7a23      	ldrb	r3, [r4, #8]
   1b2de:	f013 0f01 	tst.w	r3, #1
   1b2e2:	d001      	beq.n	1b2e8 <ble_sm_lgcy_random_rx+0xa8>
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   1b2e4:	2305      	movs	r3, #5
   1b2e6:	7363      	strb	r3, [r4, #13]
    res->execute = 1;
   1b2e8:	7d2b      	ldrb	r3, [r5, #20]
   1b2ea:	f043 0301 	orr.w	r3, r3, #1
   1b2ee:	752b      	strb	r3, [r5, #20]
   1b2f0:	e7d4      	b.n	1b29c <ble_sm_lgcy_random_rx+0x5c>
	...

0001b2f4 <ble_store_status>:
    return rc;
}

static int
ble_store_status(struct ble_store_status_event *event)
{
   1b2f4:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (ble_hs_cfg.store_status_cb == NULL) {
   1b2f6:	4b04      	ldr	r3, [pc, #16]	; (1b308 <ble_store_status+0x14>)
   1b2f8:	6a1b      	ldr	r3, [r3, #32]
   1b2fa:	b11b      	cbz	r3, 1b304 <ble_store_status+0x10>
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = ble_hs_cfg.store_status_cb(event, ble_hs_cfg.store_status_arg);
   1b2fc:	4a02      	ldr	r2, [pc, #8]	; (1b308 <ble_store_status+0x14>)
   1b2fe:	6a51      	ldr	r1, [r2, #36]	; 0x24
   1b300:	4798      	blx	r3
    }

    return rc;
}
   1b302:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ENOTSUP;
   1b304:	2008      	movs	r0, #8
    return rc;
   1b306:	e7fc      	b.n	1b302 <ble_store_status+0xe>
   1b308:	200001dc 	.word	0x200001dc

0001b30c <ble_store_read>:
{
   1b30c:	b570      	push	{r4, r5, r6, lr}
   1b30e:	4604      	mov	r4, r0
   1b310:	460d      	mov	r5, r1
   1b312:	4616      	mov	r6, r2
    ble_hs_lock();
   1b314:	f7fb faf2 	bl	168fc <ble_hs_lock>
    if (ble_hs_cfg.store_read_cb == NULL) {
   1b318:	4b06      	ldr	r3, [pc, #24]	; (1b334 <ble_store_read+0x28>)
   1b31a:	695b      	ldr	r3, [r3, #20]
   1b31c:	b143      	cbz	r3, 1b330 <ble_store_read+0x24>
        rc = ble_hs_cfg.store_read_cb(obj_type, key, val);
   1b31e:	4632      	mov	r2, r6
   1b320:	4629      	mov	r1, r5
   1b322:	4620      	mov	r0, r4
   1b324:	4798      	blx	r3
   1b326:	4604      	mov	r4, r0
    ble_hs_unlock();
   1b328:	f7fb faec 	bl	16904 <ble_hs_unlock>
}
   1b32c:	4620      	mov	r0, r4
   1b32e:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   1b330:	2408      	movs	r4, #8
   1b332:	e7f9      	b.n	1b328 <ble_store_read+0x1c>
   1b334:	200001dc 	.word	0x200001dc

0001b338 <ble_store_delete>:
{
   1b338:	b538      	push	{r3, r4, r5, lr}
   1b33a:	4604      	mov	r4, r0
   1b33c:	460d      	mov	r5, r1
    ble_hs_lock();
   1b33e:	f7fb fadd 	bl	168fc <ble_hs_lock>
    if (ble_hs_cfg.store_delete_cb == NULL) {
   1b342:	4b06      	ldr	r3, [pc, #24]	; (1b35c <ble_store_delete+0x24>)
   1b344:	69db      	ldr	r3, [r3, #28]
   1b346:	b13b      	cbz	r3, 1b358 <ble_store_delete+0x20>
        rc = ble_hs_cfg.store_delete_cb(obj_type, key);
   1b348:	4629      	mov	r1, r5
   1b34a:	4620      	mov	r0, r4
   1b34c:	4798      	blx	r3
   1b34e:	4604      	mov	r4, r0
    ble_hs_unlock();
   1b350:	f7fb fad8 	bl	16904 <ble_hs_unlock>
}
   1b354:	4620      	mov	r0, r4
   1b356:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTSUP;
   1b358:	2408      	movs	r4, #8
   1b35a:	e7f9      	b.n	1b350 <ble_store_delete+0x18>
   1b35c:	200001dc 	.word	0x200001dc

0001b360 <ble_store_overflow_event>:

int
ble_store_overflow_event(int obj_type, const union ble_store_value *value)
{
   1b360:	b500      	push	{lr}
   1b362:	b085      	sub	sp, #20
    struct ble_store_status_event event;

    event.event_code = BLE_STORE_EVENT_OVERFLOW;
   1b364:	2301      	movs	r3, #1
   1b366:	9301      	str	r3, [sp, #4]
    event.overflow.obj_type = obj_type;
   1b368:	9002      	str	r0, [sp, #8]
    event.overflow.value = value;
   1b36a:	9103      	str	r1, [sp, #12]

    return ble_store_status(&event);
   1b36c:	a801      	add	r0, sp, #4
   1b36e:	f7ff ffc1 	bl	1b2f4 <ble_store_status>
}
   1b372:	b005      	add	sp, #20
   1b374:	f85d fb04 	ldr.w	pc, [sp], #4

0001b378 <ble_store_write>:
{
   1b378:	b570      	push	{r4, r5, r6, lr}
   1b37a:	4606      	mov	r6, r0
   1b37c:	460d      	mov	r5, r1
    if (ble_hs_cfg.store_write_cb == NULL) {
   1b37e:	4b0d      	ldr	r3, [pc, #52]	; (1b3b4 <ble_store_write+0x3c>)
   1b380:	699b      	ldr	r3, [r3, #24]
   1b382:	b1ab      	cbz	r3, 1b3b0 <ble_store_write+0x38>
        ble_hs_lock();
   1b384:	f7fb faba 	bl	168fc <ble_hs_lock>
        rc = ble_hs_cfg.store_write_cb(obj_type, val);
   1b388:	4b0a      	ldr	r3, [pc, #40]	; (1b3b4 <ble_store_write+0x3c>)
   1b38a:	699b      	ldr	r3, [r3, #24]
   1b38c:	4629      	mov	r1, r5
   1b38e:	4630      	mov	r0, r6
   1b390:	4798      	blx	r3
   1b392:	4604      	mov	r4, r0
        ble_hs_unlock();
   1b394:	f7fb fab6 	bl	16904 <ble_hs_unlock>
        switch (rc) {
   1b398:	2c1b      	cmp	r4, #27
   1b39a:	d001      	beq.n	1b3a0 <ble_store_write+0x28>
}
   1b39c:	4620      	mov	r0, r4
   1b39e:	bd70      	pop	{r4, r5, r6, pc}
            rc = ble_store_overflow_event(obj_type, val);
   1b3a0:	4629      	mov	r1, r5
   1b3a2:	4630      	mov	r0, r6
   1b3a4:	f7ff ffdc 	bl	1b360 <ble_store_overflow_event>
            if (rc != 0) {
   1b3a8:	4604      	mov	r4, r0
   1b3aa:	2800      	cmp	r0, #0
   1b3ac:	d0ea      	beq.n	1b384 <ble_store_write+0xc>
   1b3ae:	e7f5      	b.n	1b39c <ble_store_write+0x24>
        return BLE_HS_ENOTSUP;
   1b3b0:	2408      	movs	r4, #8
   1b3b2:	e7f3      	b.n	1b39c <ble_store_write+0x24>
   1b3b4:	200001dc 	.word	0x200001dc

0001b3b8 <ble_store_persist_sec>:
}

static int
ble_store_persist_sec(int obj_type,
                      const struct ble_store_value_sec *value_sec)
{
   1b3b8:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(value_sec->ltk_present ||
                      value_sec->irk_present ||
                      value_sec->csrk_present);

    store_value = (void *)value_sec;
    rc = ble_store_write(obj_type, store_value);
   1b3ba:	f7ff ffdd 	bl	1b378 <ble_store_write>
    return rc;
}
   1b3be:	bd08      	pop	{r3, pc}

0001b3c0 <ble_store_read_our_sec>:
{
   1b3c0:	b508      	push	{r3, lr}
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_OUR_SEC, store_key, store_value);
   1b3c2:	460a      	mov	r2, r1
   1b3c4:	4601      	mov	r1, r0
   1b3c6:	2001      	movs	r0, #1
   1b3c8:	f7ff ffa0 	bl	1b30c <ble_store_read>
}
   1b3cc:	bd08      	pop	{r3, pc}

0001b3ce <ble_store_write_our_sec>:

int
ble_store_write_our_sec(const struct ble_store_value_sec *value_sec)
{
   1b3ce:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_OUR_SEC, value_sec);
   1b3d0:	4601      	mov	r1, r0
   1b3d2:	2001      	movs	r0, #1
   1b3d4:	f7ff fff0 	bl	1b3b8 <ble_store_persist_sec>
    return rc;
}
   1b3d8:	bd08      	pop	{r3, pc}

0001b3da <ble_store_read_peer_sec>:
}

int
ble_store_read_peer_sec(const struct ble_store_key_sec *key_sec,
                        struct ble_store_value_sec *value_sec)
{
   1b3da:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(key_sec->peer_addr.type == BLE_ADDR_PUBLIC ||
                      key_sec->peer_addr.type == BLE_ADDR_RANDOM);

    store_key = (void *)key_sec;
    store_value = (void *)value_sec;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_PEER_SEC, store_key, store_value);
   1b3dc:	460a      	mov	r2, r1
   1b3de:	4601      	mov	r1, r0
   1b3e0:	2002      	movs	r0, #2
   1b3e2:	f7ff ff93 	bl	1b30c <ble_store_read>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1b3e6:	bd08      	pop	{r3, pc}

0001b3e8 <ble_store_write_peer_sec>:

int
ble_store_write_peer_sec(const struct ble_store_value_sec *value_sec)
{
   1b3e8:	b570      	push	{r4, r5, r6, lr}
   1b3ea:	b082      	sub	sp, #8
   1b3ec:	4604      	mov	r4, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_PEER_SEC, value_sec);
   1b3ee:	4601      	mov	r1, r0
   1b3f0:	2002      	movs	r0, #2
   1b3f2:	f7ff ffe1 	bl	1b3b8 <ble_store_persist_sec>
    if (rc != 0) {
   1b3f6:	4605      	mov	r5, r0
   1b3f8:	b9d8      	cbnz	r0, 1b432 <ble_store_write_peer_sec+0x4a>
        return rc;
    }

    if (ble_addr_cmp(&value_sec->peer_addr, BLE_ADDR_ANY) &&
   1b3fa:	2300      	movs	r3, #0
   1b3fc:	9300      	str	r3, [sp, #0]
   1b3fe:	f8cd 3003 	str.w	r3, [sp, #3]

static inline int ble_addr_cmp(const ble_addr_t *a, const ble_addr_t *b)
{
    int type_diff;

    type_diff = a->type - b->type;
   1b402:	7826      	ldrb	r6, [r4, #0]
   1b404:	4630      	mov	r0, r6
    if (type_diff != 0) {
   1b406:	b92e      	cbnz	r6, 1b414 <ble_store_write_peer_sec+0x2c>
        return type_diff;
    }

    return memcmp(a->val, b->val, sizeof(a->val));
   1b408:	2206      	movs	r2, #6
   1b40a:	f10d 0101 	add.w	r1, sp, #1
   1b40e:	1c60      	adds	r0, r4, #1
   1b410:	f7f7 f834 	bl	1247c <memcmp>
   1b414:	b160      	cbz	r0, 1b430 <ble_store_write_peer_sec+0x48>
   1b416:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   1b41a:	f013 0f01 	tst.w	r3, #1
   1b41e:	d008      	beq.n	1b432 <ble_store_write_peer_sec+0x4a>
        value_sec->irk_present) {

        /* Write the peer IRK to the controller keycache
         * There is not much to do here if it fails */
        rc = ble_hs_pvcy_add_entry(value_sec->peer_addr.val,
   1b420:	f104 0229 	add.w	r2, r4, #41	; 0x29
   1b424:	4631      	mov	r1, r6
   1b426:	1c60      	adds	r0, r4, #1
   1b428:	f7fd fb78 	bl	18b1c <ble_hs_pvcy_add_entry>
   1b42c:	4605      	mov	r5, r0
   1b42e:	e000      	b.n	1b432 <ble_store_write_peer_sec+0x4a>
        if (rc != 0) {
            return rc;
        }
    }

    return 0;
   1b430:	4605      	mov	r5, r0
}
   1b432:	4628      	mov	r0, r5
   1b434:	b002      	add	sp, #8
   1b436:	bd70      	pop	{r4, r5, r6, pc}

0001b438 <ble_store_read_cccd>:

int
ble_store_read_cccd(const struct ble_store_key_cccd *key,
                    struct ble_store_value_cccd *out_value)
{
   1b438:	b508      	push	{r3, lr}
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    store_value = (void *)out_value;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_CCCD, store_key, store_value);
   1b43a:	460a      	mov	r2, r1
   1b43c:	4601      	mov	r1, r0
   1b43e:	2003      	movs	r0, #3
   1b440:	f7ff ff64 	bl	1b30c <ble_store_read>
    return rc;
}
   1b444:	bd08      	pop	{r3, pc}

0001b446 <ble_store_write_cccd>:

int
ble_store_write_cccd(const struct ble_store_value_cccd *value)
{
   1b446:	b508      	push	{r3, lr}
    union ble_store_value *store_value;
    int rc;

    store_value = (void *)value;
    rc = ble_store_write(BLE_STORE_OBJ_TYPE_CCCD, store_value);
   1b448:	4601      	mov	r1, r0
   1b44a:	2003      	movs	r0, #3
   1b44c:	f7ff ff94 	bl	1b378 <ble_store_write>
    return rc;
}
   1b450:	bd08      	pop	{r3, pc}

0001b452 <ble_store_delete_cccd>:

int
ble_store_delete_cccd(const struct ble_store_key_cccd *key)
{
   1b452:	b508      	push	{r3, lr}
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    rc = ble_store_delete(BLE_STORE_OBJ_TYPE_CCCD, store_key);
   1b454:	4601      	mov	r1, r0
   1b456:	2003      	movs	r0, #3
   1b458:	f7ff ff6e 	bl	1b338 <ble_store_delete>
    return rc;
}
   1b45c:	bd08      	pop	{r3, pc}

0001b45e <ble_store_key_from_value_cccd>:

void
ble_store_key_from_value_cccd(struct ble_store_key_cccd *out_key,
                              const struct ble_store_value_cccd *value)
{
   1b45e:	b410      	push	{r4}
   1b460:	4603      	mov	r3, r0
    out_key->peer_addr = value->peer_addr;
   1b462:	6808      	ldr	r0, [r1, #0]
   1b464:	6018      	str	r0, [r3, #0]
   1b466:	8888      	ldrh	r0, [r1, #4]
   1b468:	798a      	ldrb	r2, [r1, #6]
   1b46a:	8098      	strh	r0, [r3, #4]
   1b46c:	719a      	strb	r2, [r3, #6]
    out_key->chr_val_handle = value->chr_val_handle;
   1b46e:	890a      	ldrh	r2, [r1, #8]
   1b470:	811a      	strh	r2, [r3, #8]
    out_key->idx = 0;
   1b472:	2200      	movs	r2, #0
   1b474:	729a      	strb	r2, [r3, #10]
}
   1b476:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b47a:	4770      	bx	lr

0001b47c <ble_store_key_from_value_sec>:

void
ble_store_key_from_value_sec(struct ble_store_key_sec *out_key,
                             const struct ble_store_value_sec *value)
{
   1b47c:	4603      	mov	r3, r0
   1b47e:	460a      	mov	r2, r1
    out_key->peer_addr = value->peer_addr;
   1b480:	e9d1 0100 	ldrd	r0, r1, [r1]
   1b484:	6018      	str	r0, [r3, #0]
   1b486:	8099      	strh	r1, [r3, #4]
   1b488:	0c09      	lsrs	r1, r1, #16
   1b48a:	7199      	strb	r1, [r3, #6]

    out_key->ediv = value->ediv;
   1b48c:	8911      	ldrh	r1, [r2, #8]
   1b48e:	8119      	strh	r1, [r3, #8]
    out_key->rand_num = value->rand_num;
   1b490:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   1b494:	e9c3 0104 	strd	r0, r1, [r3, #16]
    out_key->ediv_rand_present = 1;
   1b498:	7e1a      	ldrb	r2, [r3, #24]
   1b49a:	f042 0201 	orr.w	r2, r2, #1
   1b49e:	761a      	strb	r2, [r3, #24]
    out_key->idx = 0;
   1b4a0:	2200      	movs	r2, #0
   1b4a2:	765a      	strb	r2, [r3, #25]
}
   1b4a4:	4770      	bx	lr

0001b4a6 <ble_store_iterate>:

int
ble_store_iterate(int obj_type,
                  ble_store_iterator_fn *callback,
                  void *cookie)
{
   1b4a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b4aa:	b09d      	sub	sp, #116	; 0x74
   1b4ac:	4604      	mov	r4, r0
   1b4ae:	4688      	mov	r8, r1
   1b4b0:	4691      	mov	r9, r2
    int idx = 0;
    uint8_t *pidx;
    int rc;

    /* a magic value to retrieve anything */
    memset(&key, 0, sizeof(key));
   1b4b2:	2220      	movs	r2, #32
   1b4b4:	2100      	movs	r1, #0
   1b4b6:	a814      	add	r0, sp, #80	; 0x50
   1b4b8:	f7f7 f82d 	bl	12516 <memset>
    switch(obj_type) {
   1b4bc:	2c01      	cmp	r4, #1
   1b4be:	db27      	blt.n	1b510 <ble_store_iterate+0x6a>
   1b4c0:	2c02      	cmp	r4, #2
   1b4c2:	dd08      	ble.n	1b4d6 <ble_store_iterate+0x30>
   1b4c4:	2c03      	cmp	r4, #3
   1b4c6:	d123      	bne.n	1b510 <ble_store_iterate+0x6a>
        case BLE_STORE_OBJ_TYPE_OUR_SEC:
            key.sec.peer_addr = *BLE_ADDR_ANY;
            pidx = &key.sec.idx;
            break;
        case BLE_STORE_OBJ_TYPE_CCCD:
            key.cccd.peer_addr = *BLE_ADDR_ANY;
   1b4c8:	2300      	movs	r3, #0
   1b4ca:	9314      	str	r3, [sp, #80]	; 0x50
   1b4cc:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.cccd.idx;
   1b4d0:	f10d 075a 	add.w	r7, sp, #90	; 0x5a
            break;
   1b4d4:	e005      	b.n	1b4e2 <ble_store_iterate+0x3c>
            key.sec.peer_addr = *BLE_ADDR_ANY;
   1b4d6:	2300      	movs	r3, #0
   1b4d8:	9314      	str	r3, [sp, #80]	; 0x50
   1b4da:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.sec.idx;
   1b4de:	f10d 0769 	add.w	r7, sp, #105	; 0x69
            pidx = &key.cccd.idx;
   1b4e2:	2600      	movs	r6, #0
            BLE_HS_DBG_ASSERT(0);
            return BLE_HS_EINVAL;
    }

    while (1) {
        *pidx = idx;
   1b4e4:	703e      	strb	r6, [r7, #0]
        rc = ble_store_read(obj_type, &key, &value);
   1b4e6:	466a      	mov	r2, sp
   1b4e8:	a914      	add	r1, sp, #80	; 0x50
   1b4ea:	4620      	mov	r0, r4
   1b4ec:	f7ff ff0e 	bl	1b30c <ble_store_read>
        switch (rc) {
   1b4f0:	4605      	mov	r5, r0
   1b4f2:	b118      	cbz	r0, 1b4fc <ble_store_iterate+0x56>
   1b4f4:	2805      	cmp	r0, #5
   1b4f6:	d10c      	bne.n	1b512 <ble_store_iterate+0x6c>
            }
            break;

        case BLE_HS_ENOENT:
            /* No more entries. */
            return 0;
   1b4f8:	2500      	movs	r5, #0
   1b4fa:	e00a      	b.n	1b512 <ble_store_iterate+0x6c>
            if (callback != NULL) {
   1b4fc:	f1b8 0f00 	cmp.w	r8, #0
   1b500:	d004      	beq.n	1b50c <ble_store_iterate+0x66>
                rc = callback(obj_type, &value, cookie);
   1b502:	464a      	mov	r2, r9
   1b504:	4669      	mov	r1, sp
   1b506:	4620      	mov	r0, r4
   1b508:	47c0      	blx	r8
                if (rc != 0) {
   1b50a:	b910      	cbnz	r0, 1b512 <ble_store_iterate+0x6c>
        default:
            /* Read error. */
            return rc;
        }

        idx++;
   1b50c:	3601      	adds	r6, #1
        *pidx = idx;
   1b50e:	e7e9      	b.n	1b4e4 <ble_store_iterate+0x3e>
            return BLE_HS_EINVAL;
   1b510:	2503      	movs	r5, #3
    }
}
   1b512:	4628      	mov	r0, r5
   1b514:	b01d      	add	sp, #116	; 0x74
   1b516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001b51a <ble_uuid_init_from_buf>:
#define VERIFY_UUID(uuid)
#endif

int
ble_uuid_init_from_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   1b51a:	b570      	push	{r4, r5, r6, lr}
   1b51c:	4604      	mov	r4, r0
    switch (len) {
   1b51e:	2a04      	cmp	r2, #4
   1b520:	d00d      	beq.n	1b53e <ble_uuid_init_from_buf+0x24>
   1b522:	2a10      	cmp	r2, #16
   1b524:	d013      	beq.n	1b54e <ble_uuid_init_from_buf+0x34>
   1b526:	2a02      	cmp	r2, #2
   1b528:	d001      	beq.n	1b52e <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
        return 0;
    }

    return BLE_HS_EINVAL;
   1b52a:	2003      	movs	r0, #3
   1b52c:	e006      	b.n	1b53c <ble_uuid_init_from_buf+0x22>
        uuid->u.type = BLE_UUID_TYPE_16;
   1b52e:	2310      	movs	r3, #16
   1b530:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   1b532:	4608      	mov	r0, r1
   1b534:	f003 fb16 	bl	1eb64 <get_le16>
   1b538:	8060      	strh	r0, [r4, #2]
        return 0;
   1b53a:	2000      	movs	r0, #0
}
   1b53c:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_32;
   1b53e:	2320      	movs	r3, #32
   1b540:	7003      	strb	r3, [r0, #0]
        uuid->u32.value = get_le32(buf);
   1b542:	4608      	mov	r0, r1
   1b544:	f003 fb13 	bl	1eb6e <get_le32>
   1b548:	6060      	str	r0, [r4, #4]
        return 0;
   1b54a:	2000      	movs	r0, #0
   1b54c:	e7f6      	b.n	1b53c <ble_uuid_init_from_buf+0x22>
        uuid->u.type = BLE_UUID_TYPE_128;
   1b54e:	4603      	mov	r3, r0
   1b550:	2280      	movs	r2, #128	; 0x80
   1b552:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   1b556:	680e      	ldr	r6, [r1, #0]
   1b558:	684d      	ldr	r5, [r1, #4]
   1b55a:	6888      	ldr	r0, [r1, #8]
   1b55c:	68ca      	ldr	r2, [r1, #12]
   1b55e:	f8c4 6001 	str.w	r6, [r4, #1]
   1b562:	605d      	str	r5, [r3, #4]
   1b564:	6098      	str	r0, [r3, #8]
   1b566:	60da      	str	r2, [r3, #12]
        return 0;
   1b568:	2000      	movs	r0, #0
   1b56a:	e7e7      	b.n	1b53c <ble_uuid_init_from_buf+0x22>

0001b56c <ble_uuid_cmp>:

int
ble_uuid_cmp(const ble_uuid_t *uuid1, const ble_uuid_t *uuid2)
{
   1b56c:	b508      	push	{r3, lr}
    VERIFY_UUID(uuid1);
    VERIFY_UUID(uuid2);

    if (uuid1->type != uuid2->type) {
   1b56e:	7803      	ldrb	r3, [r0, #0]
   1b570:	780a      	ldrb	r2, [r1, #0]
   1b572:	4293      	cmp	r3, r2
   1b574:	d001      	beq.n	1b57a <ble_uuid_cmp+0xe>
      return uuid1->type - uuid2->type;
   1b576:	1a98      	subs	r0, r3, r2
    }

    BLE_HS_DBG_ASSERT(0);

    return -1;
}
   1b578:	bd08      	pop	{r3, pc}
    switch (uuid1->type) {
   1b57a:	2b20      	cmp	r3, #32
   1b57c:	d00a      	beq.n	1b594 <ble_uuid_cmp+0x28>
   1b57e:	2b80      	cmp	r3, #128	; 0x80
   1b580:	d00c      	beq.n	1b59c <ble_uuid_cmp+0x30>
   1b582:	2b10      	cmp	r3, #16
   1b584:	d002      	beq.n	1b58c <ble_uuid_cmp+0x20>
    return -1;
   1b586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b58a:	e7f5      	b.n	1b578 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID16(uuid1)->value - (int) BLE_UUID16(uuid2)->value;
   1b58c:	8840      	ldrh	r0, [r0, #2]
   1b58e:	884b      	ldrh	r3, [r1, #2]
   1b590:	1ac0      	subs	r0, r0, r3
   1b592:	e7f1      	b.n	1b578 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID32(uuid1)->value - (int) BLE_UUID32(uuid2)->value;
   1b594:	6840      	ldr	r0, [r0, #4]
   1b596:	684b      	ldr	r3, [r1, #4]
   1b598:	1ac0      	subs	r0, r0, r3
   1b59a:	e7ed      	b.n	1b578 <ble_uuid_cmp+0xc>
        return memcmp(BLE_UUID128(uuid1)->value, BLE_UUID128(uuid2)->value, 16);
   1b59c:	2210      	movs	r2, #16
   1b59e:	3101      	adds	r1, #1
   1b5a0:	3001      	adds	r0, #1
   1b5a2:	f7f6 ff6b 	bl	1247c <memcmp>
   1b5a6:	e7e7      	b.n	1b578 <ble_uuid_cmp+0xc>

0001b5a8 <ble_uuid_u16>:
uint16_t
ble_uuid_u16(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   1b5a8:	7803      	ldrb	r3, [r0, #0]
   1b5aa:	2b10      	cmp	r3, #16
   1b5ac:	d001      	beq.n	1b5b2 <ble_uuid_u16+0xa>
   1b5ae:	2000      	movs	r0, #0
}
   1b5b0:	4770      	bx	lr
    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   1b5b2:	8840      	ldrh	r0, [r0, #2]
   1b5b4:	4770      	bx	lr

0001b5b6 <ble_uuid_init_from_att_buf>:
    return rc;
}

int
ble_uuid_init_from_att_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   1b5b6:	b570      	push	{r4, r5, r6, lr}
    int rc = 0;

    if (len == 2) {
   1b5b8:	2a02      	cmp	r2, #2
   1b5ba:	d003      	beq.n	1b5c4 <ble_uuid_init_from_att_buf+0xe>
        uuid->u.type = BLE_UUID_TYPE_16;
        uuid->u16.value = get_le16(buf);
    } else if (len == 16) {
   1b5bc:	2a10      	cmp	r2, #16
   1b5be:	d00a      	beq.n	1b5d6 <ble_uuid_init_from_att_buf+0x20>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
    } else {
        rc = BLE_HS_EINVAL;
   1b5c0:	2003      	movs	r0, #3
    }

    return rc;
}
   1b5c2:	bd70      	pop	{r4, r5, r6, pc}
   1b5c4:	4604      	mov	r4, r0
        uuid->u.type = BLE_UUID_TYPE_16;
   1b5c6:	2310      	movs	r3, #16
   1b5c8:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   1b5ca:	4608      	mov	r0, r1
   1b5cc:	f003 faca 	bl	1eb64 <get_le16>
   1b5d0:	8060      	strh	r0, [r4, #2]
    int rc = 0;
   1b5d2:	2000      	movs	r0, #0
   1b5d4:	e7f5      	b.n	1b5c2 <ble_uuid_init_from_att_buf+0xc>
        uuid->u.type = BLE_UUID_TYPE_128;
   1b5d6:	4603      	mov	r3, r0
   1b5d8:	2280      	movs	r2, #128	; 0x80
   1b5da:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   1b5de:	680e      	ldr	r6, [r1, #0]
   1b5e0:	684d      	ldr	r5, [r1, #4]
   1b5e2:	688c      	ldr	r4, [r1, #8]
   1b5e4:	68ca      	ldr	r2, [r1, #12]
   1b5e6:	f8c0 6001 	str.w	r6, [r0, #1]
   1b5ea:	605d      	str	r5, [r3, #4]
   1b5ec:	609c      	str	r4, [r3, #8]
   1b5ee:	60da      	str	r2, [r3, #12]
    int rc = 0;
   1b5f0:	2000      	movs	r0, #0
   1b5f2:	e7e6      	b.n	1b5c2 <ble_uuid_init_from_att_buf+0xc>

0001b5f4 <ble_uuid_init_from_att_mbuf>:
{
   1b5f4:	b530      	push	{r4, r5, lr}
   1b5f6:	b085      	sub	sp, #20
   1b5f8:	4605      	mov	r5, r0
   1b5fa:	4608      	mov	r0, r1
   1b5fc:	4611      	mov	r1, r2
   1b5fe:	461c      	mov	r4, r3
    rc = os_mbuf_copydata(om, off, len, val);
   1b600:	466b      	mov	r3, sp
   1b602:	4622      	mov	r2, r4
   1b604:	f7f5 fd72 	bl	110ec <os_mbuf_copydata>
    if (rc != 0) {
   1b608:	4603      	mov	r3, r0
   1b60a:	b110      	cbz	r0, 1b612 <ble_uuid_init_from_att_mbuf+0x1e>
}
   1b60c:	4618      	mov	r0, r3
   1b60e:	b005      	add	sp, #20
   1b610:	bd30      	pop	{r4, r5, pc}
    rc = ble_uuid_init_from_att_buf(uuid, val, len);
   1b612:	4622      	mov	r2, r4
   1b614:	4669      	mov	r1, sp
   1b616:	4628      	mov	r0, r5
   1b618:	f7ff ffcd 	bl	1b5b6 <ble_uuid_init_from_att_buf>
   1b61c:	4603      	mov	r3, r0
    return rc;
   1b61e:	e7f5      	b.n	1b60c <ble_uuid_init_from_att_mbuf+0x18>

0001b620 <ble_uuid_flat>:
    return 0;
}

int
ble_uuid_flat(const ble_uuid_t *uuid, void *dst)
{
   1b620:	b570      	push	{r4, r5, r6, lr}
   1b622:	4605      	mov	r5, r0
   1b624:	460c      	mov	r4, r1
    VERIFY_UUID(uuid);

    switch (uuid->type) {
   1b626:	7803      	ldrb	r3, [r0, #0]
   1b628:	2b20      	cmp	r3, #32
   1b62a:	d00b      	beq.n	1b644 <ble_uuid_flat+0x24>
   1b62c:	2b80      	cmp	r3, #128	; 0x80
   1b62e:	d016      	beq.n	1b65e <ble_uuid_flat+0x3e>
   1b630:	2b10      	cmp	r3, #16
   1b632:	d001      	beq.n	1b638 <ble_uuid_flat+0x18>
        break;
    case BLE_UUID_TYPE_128:
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
        break;
    default:
        return BLE_HS_EINVAL;
   1b634:	2003      	movs	r0, #3
   1b636:	e004      	b.n	1b642 <ble_uuid_flat+0x22>
        put_le16(dst, BLE_UUID16(uuid)->value);
   1b638:	8841      	ldrh	r1, [r0, #2]
   1b63a:	4620      	mov	r0, r4
   1b63c:	f003 fa71 	bl	1eb22 <put_le16>
    }

    return 0;
   1b640:	2000      	movs	r0, #0
}
   1b642:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(dst, ble_uuid_base, 16);
   1b644:	4e0b      	ldr	r6, [pc, #44]	; (1b674 <ble_uuid_flat+0x54>)
   1b646:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1b648:	6020      	str	r0, [r4, #0]
   1b64a:	6061      	str	r1, [r4, #4]
   1b64c:	60a2      	str	r2, [r4, #8]
   1b64e:	4620      	mov	r0, r4
   1b650:	f840 3f0c 	str.w	r3, [r0, #12]!
        put_le32(dst + 12, BLE_UUID32(uuid)->value);
   1b654:	6869      	ldr	r1, [r5, #4]
   1b656:	f003 fa68 	bl	1eb2a <put_le32>
    return 0;
   1b65a:	2000      	movs	r0, #0
        break;
   1b65c:	e7f1      	b.n	1b642 <ble_uuid_flat+0x22>
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
   1b65e:	f855 0f01 	ldr.w	r0, [r5, #1]!
   1b662:	6869      	ldr	r1, [r5, #4]
   1b664:	68aa      	ldr	r2, [r5, #8]
   1b666:	68eb      	ldr	r3, [r5, #12]
   1b668:	6020      	str	r0, [r4, #0]
   1b66a:	6061      	str	r1, [r4, #4]
   1b66c:	60a2      	str	r2, [r4, #8]
   1b66e:	60e3      	str	r3, [r4, #12]
    return 0;
   1b670:	2000      	movs	r0, #0
        break;
   1b672:	e7e6      	b.n	1b642 <ble_uuid_flat+0x22>
   1b674:	0002c5f0 	.word	0x0002c5f0

0001b678 <ble_uuid_length>:
int
ble_uuid_length(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type >> 3;
   1b678:	7800      	ldrb	r0, [r0, #0]
}
   1b67a:	08c0      	lsrs	r0, r0, #3
   1b67c:	4770      	bx	lr

0001b67e <ble_uuid_to_mbuf>:
{
   1b67e:	b538      	push	{r3, r4, r5, lr}
   1b680:	4605      	mov	r5, r0
   1b682:	460c      	mov	r4, r1
    len = ble_uuid_length(uuid);
   1b684:	f7ff fff8 	bl	1b678 <ble_uuid_length>
    buf = os_mbuf_extend(om, len);
   1b688:	b281      	uxth	r1, r0
   1b68a:	4620      	mov	r0, r4
   1b68c:	f7f5 ff10 	bl	114b0 <os_mbuf_extend>
    if (buf == NULL) {
   1b690:	b128      	cbz	r0, 1b69e <ble_uuid_to_mbuf+0x20>
   1b692:	4601      	mov	r1, r0
    ble_uuid_flat(uuid, buf);
   1b694:	4628      	mov	r0, r5
   1b696:	f7ff ffc3 	bl	1b620 <ble_uuid_flat>
    return 0;
   1b69a:	2000      	movs	r0, #0
}
   1b69c:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOMEM;
   1b69e:	2006      	movs	r0, #6
   1b6a0:	e7fc      	b.n	1b69c <ble_uuid_to_mbuf+0x1e>
	...

0001b6a4 <ble_att_rx_dispatch_entry_find>:
    STATS_NAME(ble_att_stats, write_cmd_tx)
STATS_NAME_END(ble_att_stats)

static const struct ble_att_rx_dispatch_entry *
ble_att_rx_dispatch_entry_find(uint8_t op)
{
   1b6a4:	4601      	mov	r1, r0
    const struct ble_att_rx_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   1b6a6:	2300      	movs	r3, #0
   1b6a8:	2b1a      	cmp	r3, #26
   1b6aa:	d809      	bhi.n	1b6c0 <ble_att_rx_dispatch_entry_find+0x1c>
        entry = ble_att_rx_dispatch + i;
   1b6ac:	4a06      	ldr	r2, [pc, #24]	; (1b6c8 <ble_att_rx_dispatch_entry_find+0x24>)
   1b6ae:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->bde_op == op) {
   1b6b2:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1b6b6:	428a      	cmp	r2, r1
   1b6b8:	d005      	beq.n	1b6c6 <ble_att_rx_dispatch_entry_find+0x22>
            return entry;
        }

        if (entry->bde_op > op) {
   1b6ba:	d803      	bhi.n	1b6c4 <ble_att_rx_dispatch_entry_find+0x20>
    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   1b6bc:	3301      	adds	r3, #1
   1b6be:	e7f3      	b.n	1b6a8 <ble_att_rx_dispatch_entry_find+0x4>
            break;
        }
    }

    return NULL;
   1b6c0:	2000      	movs	r0, #0
   1b6c2:	4770      	bx	lr
   1b6c4:	2000      	movs	r0, #0
}
   1b6c6:	4770      	bx	lr
   1b6c8:	0002c600 	.word	0x0002c600

0001b6cc <ble_att_rx_handle_unknown_request>:
static void
ble_att_rx_handle_unknown_request(uint8_t op, uint16_t conn_handle,
                                  struct os_mbuf **om)
{
    /* If this is command (bit6 is set to 1), do nothing */
    if (op & 0x40) {
   1b6cc:	f010 0f40 	tst.w	r0, #64	; 0x40
   1b6d0:	d000      	beq.n	1b6d4 <ble_att_rx_handle_unknown_request+0x8>
   1b6d2:	4770      	bx	lr
{
   1b6d4:	b570      	push	{r4, r5, r6, lr}
   1b6d6:	b082      	sub	sp, #8
   1b6d8:	4615      	mov	r5, r2
   1b6da:	460e      	mov	r6, r1
   1b6dc:	4604      	mov	r4, r0
        return;
    }

    os_mbuf_adj(*om, OS_MBUF_PKTLEN(*om));
   1b6de:	6810      	ldr	r0, [r2, #0]
   1b6e0:	8a01      	ldrh	r1, [r0, #16]
   1b6e2:	f7f5 fd30 	bl	11146 <os_mbuf_adj>
    ble_att_svr_tx_error_rsp(conn_handle, *om, op, 0,
   1b6e6:	2306      	movs	r3, #6
   1b6e8:	9300      	str	r3, [sp, #0]
   1b6ea:	2300      	movs	r3, #0
   1b6ec:	4622      	mov	r2, r4
   1b6ee:	6829      	ldr	r1, [r5, #0]
   1b6f0:	4630      	mov	r0, r6
   1b6f2:	f001 faba 	bl	1cc6a <ble_att_svr_tx_error_rsp>
                             BLE_ATT_ERR_REQ_NOT_SUPPORTED);

    *om = NULL;
   1b6f6:	2300      	movs	r3, #0
   1b6f8:	602b      	str	r3, [r5, #0]
}
   1b6fa:	b002      	add	sp, #8
   1b6fc:	bd70      	pop	{r4, r5, r6, pc}

0001b6fe <ble_att_rx>:

static int
ble_att_rx(struct ble_l2cap_chan *chan)
{
   1b6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b702:	b082      	sub	sp, #8
   1b704:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    conn_handle = ble_l2cap_get_conn_handle(chan);
   1b706:	f7fd fc9e 	bl	19046 <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   1b70a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b70e:	4298      	cmp	r0, r3
   1b710:	d02c      	beq.n	1b76c <ble_att_rx+0x6e>
   1b712:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   1b714:	f104 0610 	add.w	r6, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   1b718:	f10d 0307 	add.w	r3, sp, #7
   1b71c:	2201      	movs	r2, #1
   1b71e:	2100      	movs	r1, #0
   1b720:	6920      	ldr	r0, [r4, #16]
   1b722:	f7f5 fce3 	bl	110ec <os_mbuf_copydata>
    if (rc != 0) {
   1b726:	bb30      	cbnz	r0, 1b776 <ble_att_rx+0x78>
        return BLE_HS_EMSGSIZE;
    }

    entry = ble_att_rx_dispatch_entry_find(op);
   1b728:	f89d 7007 	ldrb.w	r7, [sp, #7]
   1b72c:	4638      	mov	r0, r7
   1b72e:	f7ff ffb9 	bl	1b6a4 <ble_att_rx_dispatch_entry_find>
    if (entry == NULL) {
   1b732:	4680      	mov	r8, r0
   1b734:	b198      	cbz	r0, 1b75e <ble_att_rx+0x60>
    }

    ble_att_inc_rx_stat(op);

    /* Strip L2CAP ATT header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   1b736:	2101      	movs	r1, #1
   1b738:	6920      	ldr	r0, [r4, #16]
   1b73a:	f7f5 fd04 	bl	11146 <os_mbuf_adj>

    rc = entry->bde_fn(conn_handle, om);
   1b73e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b742:	4631      	mov	r1, r6
   1b744:	4628      	mov	r0, r5
   1b746:	4798      	blx	r3
    if (rc != 0) {
   1b748:	4604      	mov	r4, r0
   1b74a:	b180      	cbz	r0, 1b76e <ble_att_rx+0x70>
        if (rc == BLE_HS_ENOTSUP) {
   1b74c:	2808      	cmp	r0, #8
   1b74e:	d10e      	bne.n	1b76e <ble_att_rx+0x70>
            ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1b750:	4632      	mov	r2, r6
   1b752:	4629      	mov	r1, r5
   1b754:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1b758:	f7ff ffb8 	bl	1b6cc <ble_att_rx_handle_unknown_request>
   1b75c:	e007      	b.n	1b76e <ble_att_rx+0x70>
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1b75e:	4632      	mov	r2, r6
   1b760:	4629      	mov	r1, r5
   1b762:	4638      	mov	r0, r7
   1b764:	f7ff ffb2 	bl	1b6cc <ble_att_rx_handle_unknown_request>
        return BLE_HS_ENOTSUP;
   1b768:	2408      	movs	r4, #8
   1b76a:	e000      	b.n	1b76e <ble_att_rx+0x70>
        return BLE_HS_ENOTCONN;
   1b76c:	2407      	movs	r4, #7
        }
        return rc;
    }

    return 0;
}
   1b76e:	4620      	mov	r0, r4
   1b770:	b002      	add	sp, #8
   1b772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EMSGSIZE;
   1b776:	2404      	movs	r4, #4
   1b778:	e7f9      	b.n	1b76e <ble_att_rx+0x70>

0001b77a <ble_att_conn_chan_find>:
{
   1b77a:	b508      	push	{r3, lr}
    return ble_hs_misc_conn_chan_find(conn_handle, BLE_L2CAP_CID_ATT,
   1b77c:	4613      	mov	r3, r2
   1b77e:	460a      	mov	r2, r1
   1b780:	2104      	movs	r1, #4
   1b782:	f7fd f87d 	bl	18880 <ble_hs_misc_conn_chan_find>
}
   1b786:	bd08      	pop	{r3, pc}

0001b788 <ble_att_inc_tx_stat>:
}
   1b788:	4770      	bx	lr

0001b78a <ble_att_set_peer_mtu>:
    if (peer_mtu < BLE_ATT_MTU_DFLT) {
   1b78a:	2916      	cmp	r1, #22
   1b78c:	d800      	bhi.n	1b790 <ble_att_set_peer_mtu+0x6>
        peer_mtu = BLE_ATT_MTU_DFLT;
   1b78e:	2117      	movs	r1, #23
    chan->peer_mtu = peer_mtu;
   1b790:	8181      	strh	r1, [r0, #12]
}
   1b792:	4770      	bx	lr

0001b794 <ble_att_chan_mtu>:
{
   1b794:	b510      	push	{r4, lr}
   1b796:	4604      	mov	r4, r0
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   1b798:	f7fd fc22 	bl	18fe0 <ble_l2cap_is_mtu_req_sent>
   1b79c:	b130      	cbz	r0, 1b7ac <ble_att_chan_mtu+0x18>
        chan->peer_mtu == 0) {
   1b79e:	89a0      	ldrh	r0, [r4, #12]
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   1b7a0:	b130      	cbz	r0, 1b7b0 <ble_att_chan_mtu+0x1c>
        mtu = min(chan->my_mtu, chan->peer_mtu);
   1b7a2:	8963      	ldrh	r3, [r4, #10]
   1b7a4:	4298      	cmp	r0, r3
   1b7a6:	bf28      	it	cs
   1b7a8:	4618      	movcs	r0, r3
}
   1b7aa:	bd10      	pop	{r4, pc}
        mtu = BLE_ATT_MTU_DFLT;
   1b7ac:	2017      	movs	r0, #23
   1b7ae:	e7fc      	b.n	1b7aa <ble_att_chan_mtu+0x16>
   1b7b0:	2017      	movs	r0, #23
   1b7b2:	e7fa      	b.n	1b7aa <ble_att_chan_mtu+0x16>

0001b7b4 <ble_att_truncate_to_mtu>:
{
   1b7b4:	b510      	push	{r4, lr}
   1b7b6:	460c      	mov	r4, r1
    mtu = ble_att_chan_mtu(att_chan);
   1b7b8:	f7ff ffec 	bl	1b794 <ble_att_chan_mtu>
    extra_len = OS_MBUF_PKTLEN(txom) - mtu;
   1b7bc:	8a21      	ldrh	r1, [r4, #16]
   1b7be:	1a09      	subs	r1, r1, r0
    if (extra_len > 0) {
   1b7c0:	2900      	cmp	r1, #0
   1b7c2:	dd03      	ble.n	1b7cc <ble_att_truncate_to_mtu+0x18>
        os_mbuf_adj(txom, -extra_len);
   1b7c4:	4249      	negs	r1, r1
   1b7c6:	4620      	mov	r0, r4
   1b7c8:	f7f5 fcbd 	bl	11146 <os_mbuf_adj>
}
   1b7cc:	bd10      	pop	{r4, pc}

0001b7ce <ble_att_mtu>:
{
   1b7ce:	b510      	push	{r4, lr}
   1b7d0:	b082      	sub	sp, #8
   1b7d2:	4604      	mov	r4, r0
    ble_hs_lock();
   1b7d4:	f7fb f892 	bl	168fc <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1b7d8:	aa01      	add	r2, sp, #4
   1b7da:	4669      	mov	r1, sp
   1b7dc:	4620      	mov	r0, r4
   1b7de:	f7ff ffcc 	bl	1b77a <ble_att_conn_chan_find>
    if (rc == 0) {
   1b7e2:	b128      	cbz	r0, 1b7f0 <ble_att_mtu+0x22>
        mtu = 0;
   1b7e4:	2400      	movs	r4, #0
    ble_hs_unlock();
   1b7e6:	f7fb f88d 	bl	16904 <ble_hs_unlock>
}
   1b7ea:	4620      	mov	r0, r4
   1b7ec:	b002      	add	sp, #8
   1b7ee:	bd10      	pop	{r4, pc}
        mtu = ble_att_chan_mtu(chan);
   1b7f0:	9801      	ldr	r0, [sp, #4]
   1b7f2:	f7ff ffcf 	bl	1b794 <ble_att_chan_mtu>
   1b7f6:	4604      	mov	r4, r0
   1b7f8:	e7f5      	b.n	1b7e6 <ble_att_mtu+0x18>
	...

0001b7fc <ble_att_create_chan>:
    return 0;
}

struct ble_l2cap_chan *
ble_att_create_chan(uint16_t conn_handle)
{
   1b7fc:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   1b7fe:	f7fd fbcd 	bl	18f9c <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   1b802:	4603      	mov	r3, r0
   1b804:	b138      	cbz	r0, 1b816 <ble_att_create_chan+0x1a>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_ATT;
   1b806:	2204      	movs	r2, #4
   1b808:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_ATT;
   1b80a:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = ble_att_preferred_mtu_val;
   1b80c:	4a03      	ldr	r2, [pc, #12]	; (1b81c <ble_att_create_chan+0x20>)
   1b80e:	8812      	ldrh	r2, [r2, #0]
   1b810:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_att_rx;
   1b812:	4a03      	ldr	r2, [pc, #12]	; (1b820 <ble_att_create_chan+0x24>)
   1b814:	6182      	str	r2, [r0, #24]

    return chan;
}
   1b816:	4618      	mov	r0, r3
   1b818:	bd08      	pop	{r3, pc}
   1b81a:	bf00      	nop
   1b81c:	20002c48 	.word	0x20002c48
   1b820:	0001b6ff 	.word	0x0001b6ff

0001b824 <ble_att_init>:
int
ble_att_init(void)
{
    int rc;

    ble_att_preferred_mtu_val = MYNEWT_VAL(BLE_ATT_PREFERRED_MTU);
   1b824:	4b02      	ldr	r3, [pc, #8]	; (1b830 <ble_att_init+0xc>)
   1b826:	f44f 7280 	mov.w	r2, #256	; 0x100
   1b82a:	801a      	strh	r2, [r3, #0]
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   1b82c:	2000      	movs	r0, #0
   1b82e:	4770      	bx	lr
   1b830:	20002c48 	.word	0x20002c48

0001b834 <ble_att_clt_parse_find_type_value_hinfo>:
}

static int
ble_att_clt_parse_find_type_value_hinfo(
    struct os_mbuf **om, struct ble_att_find_type_value_hinfo *dst)
{
   1b834:	b570      	push	{r4, r5, r6, lr}
   1b836:	4605      	mov	r5, r0
   1b838:	460e      	mov	r6, r1
    struct ble_att_handle_group *group;
    int rc;

    rc = ble_hs_mbuf_pullup_base(om, sizeof(*group));
   1b83a:	2104      	movs	r1, #4
   1b83c:	f7fc fffe 	bl	1883c <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1b840:	b960      	cbnz	r0, 1b85c <ble_att_clt_parse_find_type_value_hinfo+0x28>
   1b842:	4604      	mov	r4, r0
        return BLE_HS_EBADDATA;
    }

    group = (struct ble_att_handle_group *)(*om)->om_data;
   1b844:	682b      	ldr	r3, [r5, #0]
   1b846:	681b      	ldr	r3, [r3, #0]

    dst->attr_handle = le16toh(group->attr_handle);
   1b848:	881a      	ldrh	r2, [r3, #0]
   1b84a:	8032      	strh	r2, [r6, #0]
    dst->group_end_handle = le16toh(group->group_end_handle);
   1b84c:	885b      	ldrh	r3, [r3, #2]
   1b84e:	8073      	strh	r3, [r6, #2]

    os_mbuf_adj((*om), sizeof(*group));
   1b850:	2104      	movs	r1, #4
   1b852:	6828      	ldr	r0, [r5, #0]
   1b854:	f7f5 fc77 	bl	11146 <os_mbuf_adj>

    return 0;
}
   1b858:	4620      	mov	r0, r4
   1b85a:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EBADDATA;
   1b85c:	240a      	movs	r4, #10
   1b85e:	e7fb      	b.n	1b858 <ble_att_clt_parse_find_type_value_hinfo+0x24>

0001b860 <ble_att_clt_parse_read_group_type_adata>:

static int
ble_att_clt_parse_read_group_type_adata(
    struct os_mbuf **om, int data_len,
    struct ble_att_read_group_type_adata *adata)
{
   1b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;

    if (data_len < BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ + 1) {
   1b862:	2904      	cmp	r1, #4
   1b864:	dd18      	ble.n	1b898 <ble_att_clt_parse_read_group_type_adata+0x38>
   1b866:	4617      	mov	r7, r2
   1b868:	460c      	mov	r4, r1
   1b86a:	4605      	mov	r5, r0
        return BLE_HS_EMSGSIZE;
    }

    rc = ble_hs_mbuf_pullup_base(om, data_len);
   1b86c:	f7fc ffe6 	bl	1883c <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1b870:	4606      	mov	r6, r0
   1b872:	b990      	cbnz	r0, 1b89a <ble_att_clt_parse_read_group_type_adata+0x3a>
        return rc;
    }

    adata->att_handle = get_le16((*om)->om_data + 0);
   1b874:	682b      	ldr	r3, [r5, #0]
   1b876:	6818      	ldr	r0, [r3, #0]
   1b878:	f003 f974 	bl	1eb64 <get_le16>
   1b87c:	8038      	strh	r0, [r7, #0]
    adata->end_group_handle = get_le16((*om)->om_data + 2);
   1b87e:	682b      	ldr	r3, [r5, #0]
   1b880:	6818      	ldr	r0, [r3, #0]
   1b882:	3002      	adds	r0, #2
   1b884:	f003 f96e 	bl	1eb64 <get_le16>
   1b888:	8078      	strh	r0, [r7, #2]
    adata->value_len = data_len - BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ;
   1b88a:	3c04      	subs	r4, #4
   1b88c:	607c      	str	r4, [r7, #4]
    adata->value = (*om)->om_data + BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ;
   1b88e:	682b      	ldr	r3, [r5, #0]
   1b890:	681b      	ldr	r3, [r3, #0]
   1b892:	3304      	adds	r3, #4
   1b894:	60bb      	str	r3, [r7, #8]

    return 0;
   1b896:	e000      	b.n	1b89a <ble_att_clt_parse_read_group_type_adata+0x3a>
        return BLE_HS_EMSGSIZE;
   1b898:	2604      	movs	r6, #4
}
   1b89a:	4630      	mov	r0, r6
   1b89c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b89e <ble_att_clt_parse_find_info_entry>:
{
   1b89e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (rsp_format) {
   1b8a2:	2901      	cmp	r1, #1
   1b8a4:	d003      	beq.n	1b8ae <ble_att_clt_parse_find_info_entry+0x10>
   1b8a6:	2902      	cmp	r1, #2
   1b8a8:	d00e      	beq.n	1b8c8 <ble_att_clt_parse_find_info_entry+0x2a>
        return BLE_HS_EBADDATA;
   1b8aa:	270a      	movs	r7, #10
   1b8ac:	e009      	b.n	1b8c2 <ble_att_clt_parse_find_info_entry+0x24>
        entry_len = 2 + 2;
   1b8ae:	f04f 0804 	mov.w	r8, #4
   1b8b2:	4616      	mov	r6, r2
   1b8b4:	460c      	mov	r4, r1
   1b8b6:	4605      	mov	r5, r0
    rc = ble_hs_mbuf_pullup_base(rxom, entry_len);
   1b8b8:	4641      	mov	r1, r8
   1b8ba:	f7fc ffbf 	bl	1883c <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1b8be:	4607      	mov	r7, r0
   1b8c0:	b128      	cbz	r0, 1b8ce <ble_att_clt_parse_find_info_entry+0x30>
}
   1b8c2:	4638      	mov	r0, r7
   1b8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        entry_len = 2 + 16;
   1b8c8:	f04f 0812 	mov.w	r8, #18
   1b8cc:	e7f1      	b.n	1b8b2 <ble_att_clt_parse_find_info_entry+0x14>
    idata->attr_handle = get_le16((*rxom)->om_data);
   1b8ce:	682b      	ldr	r3, [r5, #0]
   1b8d0:	6818      	ldr	r0, [r3, #0]
   1b8d2:	f003 f947 	bl	1eb64 <get_le16>
   1b8d6:	8030      	strh	r0, [r6, #0]
    switch (rsp_format) {
   1b8d8:	2c01      	cmp	r4, #1
   1b8da:	d006      	beq.n	1b8ea <ble_att_clt_parse_find_info_entry+0x4c>
   1b8dc:	2c02      	cmp	r4, #2
   1b8de:	d00e      	beq.n	1b8fe <ble_att_clt_parse_find_info_entry+0x60>
    os_mbuf_adj(*rxom, entry_len);
   1b8e0:	4641      	mov	r1, r8
   1b8e2:	6828      	ldr	r0, [r5, #0]
   1b8e4:	f7f5 fc2f 	bl	11146 <os_mbuf_adj>
    return 0;
   1b8e8:	e7eb      	b.n	1b8c2 <ble_att_clt_parse_find_info_entry+0x24>
        rc = ble_uuid_init_from_att_mbuf(&idata->uuid, *rxom, 2, 2);
   1b8ea:	2302      	movs	r3, #2
   1b8ec:	461a      	mov	r2, r3
   1b8ee:	6829      	ldr	r1, [r5, #0]
   1b8f0:	1d30      	adds	r0, r6, #4
   1b8f2:	f7ff fe7f 	bl	1b5f4 <ble_uuid_init_from_att_mbuf>
        if (rc != 0) {
   1b8f6:	2800      	cmp	r0, #0
   1b8f8:	d0f2      	beq.n	1b8e0 <ble_att_clt_parse_find_info_entry+0x42>
            return BLE_HS_EBADDATA;
   1b8fa:	270a      	movs	r7, #10
   1b8fc:	e7e1      	b.n	1b8c2 <ble_att_clt_parse_find_info_entry+0x24>
        rc = ble_uuid_init_from_att_mbuf(&idata->uuid, *rxom, 2, 16);
   1b8fe:	2310      	movs	r3, #16
   1b900:	2202      	movs	r2, #2
   1b902:	6829      	ldr	r1, [r5, #0]
   1b904:	1d30      	adds	r0, r6, #4
   1b906:	f7ff fe75 	bl	1b5f4 <ble_uuid_init_from_att_mbuf>
        if (rc != 0) {
   1b90a:	2800      	cmp	r0, #0
   1b90c:	d0e8      	beq.n	1b8e0 <ble_att_clt_parse_find_info_entry+0x42>
            return BLE_HS_EBADDATA;
   1b90e:	270a      	movs	r7, #10
   1b910:	e7d7      	b.n	1b8c2 <ble_att_clt_parse_find_info_entry+0x24>

0001b912 <ble_att_clt_rx_error>:
{
   1b912:	b570      	push	{r4, r5, r6, lr}
   1b914:	4606      	mov	r6, r0
   1b916:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1b918:	2104      	movs	r1, #4
   1b91a:	4620      	mov	r0, r4
   1b91c:	f7fc ff8e 	bl	1883c <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1b920:	4605      	mov	r5, r0
   1b922:	b108      	cbz	r0, 1b928 <ble_att_clt_rx_error+0x16>
}
   1b924:	4628      	mov	r0, r5
   1b926:	bd70      	pop	{r4, r5, r6, pc}
    rsp = (struct ble_att_error_rsp *)(*rxom)->om_data;
   1b928:	6823      	ldr	r3, [r4, #0]
   1b92a:	681b      	ldr	r3, [r3, #0]
    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
   1b92c:	78da      	ldrb	r2, [r3, #3]
   1b92e:	f8b3 1001 	ldrh.w	r1, [r3, #1]
   1b932:	4630      	mov	r0, r6
   1b934:	f7f9 fec7 	bl	156c6 <ble_gattc_rx_err>
    return 0;
   1b938:	e7f4      	b.n	1b924 <ble_att_clt_rx_error+0x12>

0001b93a <ble_att_clt_rx_mtu>:
{
   1b93a:	b570      	push	{r4, r5, r6, lr}
   1b93c:	b082      	sub	sp, #8
   1b93e:	4605      	mov	r5, r0
   1b940:	460e      	mov	r6, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*cmd));
   1b942:	2102      	movs	r1, #2
   1b944:	4630      	mov	r0, r6
   1b946:	f7fc ff79 	bl	1883c <ble_hs_mbuf_pullup_base>
    if (rc == 0) {
   1b94a:	b148      	cbz	r0, 1b960 <ble_att_clt_rx_mtu+0x26>
   1b94c:	4604      	mov	r4, r0
    mtu = 0;
   1b94e:	2600      	movs	r6, #0
    ble_gattc_rx_mtu(conn_handle, rc, mtu);
   1b950:	4632      	mov	r2, r6
   1b952:	4621      	mov	r1, r4
   1b954:	4628      	mov	r0, r5
   1b956:	f7f9 fecc 	bl	156f2 <ble_gattc_rx_mtu>
}
   1b95a:	4620      	mov	r0, r4
   1b95c:	b002      	add	sp, #8
   1b95e:	bd70      	pop	{r4, r5, r6, pc}
        cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   1b960:	6833      	ldr	r3, [r6, #0]
   1b962:	681e      	ldr	r6, [r3, #0]
        ble_hs_lock();
   1b964:	f7fa ffca 	bl	168fc <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   1b968:	aa01      	add	r2, sp, #4
   1b96a:	2100      	movs	r1, #0
   1b96c:	4628      	mov	r0, r5
   1b96e:	f7ff ff04 	bl	1b77a <ble_att_conn_chan_find>
        if (rc == 0) {
   1b972:	4604      	mov	r4, r0
   1b974:	b150      	cbz	r0, 1b98c <ble_att_clt_rx_mtu+0x52>
    mtu = 0;
   1b976:	2600      	movs	r6, #0
        ble_hs_unlock();
   1b978:	f7fa ffc4 	bl	16904 <ble_hs_unlock>
        if (rc == 0) {
   1b97c:	2c00      	cmp	r4, #0
   1b97e:	d1e7      	bne.n	1b950 <ble_att_clt_rx_mtu+0x16>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   1b980:	4632      	mov	r2, r6
   1b982:	2104      	movs	r1, #4
   1b984:	4628      	mov	r0, r5
   1b986:	f7f8 fbec 	bl	14162 <ble_gap_mtu_event>
   1b98a:	e7e1      	b.n	1b950 <ble_att_clt_rx_mtu+0x16>
            ble_att_set_peer_mtu(chan, le16toh(cmd->bamc_mtu));
   1b98c:	8831      	ldrh	r1, [r6, #0]
   1b98e:	9801      	ldr	r0, [sp, #4]
   1b990:	f7ff fefb 	bl	1b78a <ble_att_set_peer_mtu>
            mtu = ble_att_chan_mtu(chan);
   1b994:	9801      	ldr	r0, [sp, #4]
   1b996:	f7ff fefd 	bl	1b794 <ble_att_chan_mtu>
   1b99a:	4606      	mov	r6, r0
   1b99c:	e7ec      	b.n	1b978 <ble_att_clt_rx_mtu+0x3e>

0001b99e <ble_att_clt_tx_find_info>:
    if (start_handle == 0 || start_handle > end_handle) {
   1b99e:	b199      	cbz	r1, 1b9c8 <ble_att_clt_tx_find_info+0x2a>
{
   1b9a0:	b570      	push	{r4, r5, r6, lr}
   1b9a2:	b082      	sub	sp, #8
   1b9a4:	460d      	mov	r5, r1
    if (start_handle == 0 || start_handle > end_handle) {
   1b9a6:	4291      	cmp	r1, r2
   1b9a8:	d810      	bhi.n	1b9cc <ble_att_clt_tx_find_info+0x2e>
   1b9aa:	4614      	mov	r4, r2
   1b9ac:	4606      	mov	r6, r0
    req = ble_att_cmd_get(BLE_ATT_OP_FIND_INFO_REQ, sizeof(*req), &txom);
   1b9ae:	aa01      	add	r2, sp, #4
   1b9b0:	2104      	movs	r1, #4
   1b9b2:	4608      	mov	r0, r1
   1b9b4:	f000 fa2f 	bl	1be16 <ble_att_cmd_get>
    if (req == NULL) {
   1b9b8:	b158      	cbz	r0, 1b9d2 <ble_att_clt_tx_find_info+0x34>
    req->bafq_start_handle = htole16(start_handle);
   1b9ba:	8005      	strh	r5, [r0, #0]
    req->bafq_end_handle = htole16(end_handle);
   1b9bc:	8044      	strh	r4, [r0, #2]
    return ble_att_tx(conn_handle, txom);
   1b9be:	9901      	ldr	r1, [sp, #4]
   1b9c0:	4630      	mov	r0, r6
   1b9c2:	f000 fa38 	bl	1be36 <ble_att_tx>
   1b9c6:	e002      	b.n	1b9ce <ble_att_clt_tx_find_info+0x30>
        return BLE_HS_EINVAL;
   1b9c8:	2003      	movs	r0, #3
}
   1b9ca:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1b9cc:	2003      	movs	r0, #3
}
   1b9ce:	b002      	add	sp, #8
   1b9d0:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOMEM;
   1b9d2:	2006      	movs	r0, #6
   1b9d4:	e7fb      	b.n	1b9ce <ble_att_clt_tx_find_info+0x30>

0001b9d6 <ble_att_clt_rx_find_info>:
{
   1b9d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b9d8:	b087      	sub	sp, #28
   1b9da:	4605      	mov	r5, r0
   1b9dc:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(om, sizeof(*rsp));
   1b9de:	2101      	movs	r1, #1
   1b9e0:	4620      	mov	r0, r4
   1b9e2:	f7fc ff2b 	bl	1883c <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1b9e6:	4606      	mov	r6, r0
   1b9e8:	b130      	cbz	r0, 1b9f8 <ble_att_clt_rx_find_info+0x22>
    ble_gattc_rx_find_info_complete(conn_handle, rc);
   1b9ea:	4631      	mov	r1, r6
   1b9ec:	4628      	mov	r0, r5
   1b9ee:	f7f9 fea1 	bl	15734 <ble_gattc_rx_find_info_complete>
}
   1b9f2:	4630      	mov	r0, r6
   1b9f4:	b007      	add	sp, #28
   1b9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_find_info_rsp *)(*om)->om_data;
   1b9f8:	6820      	ldr	r0, [r4, #0]
   1b9fa:	6807      	ldr	r7, [r0, #0]
    os_mbuf_adj((*om), sizeof(*rsp));
   1b9fc:	2101      	movs	r1, #1
   1b9fe:	f7f5 fba2 	bl	11146 <os_mbuf_adj>
    while (OS_MBUF_PKTLEN(*om) > 0) {
   1ba02:	6823      	ldr	r3, [r4, #0]
   1ba04:	8a1b      	ldrh	r3, [r3, #16]
   1ba06:	2b00      	cmp	r3, #0
   1ba08:	d0ef      	beq.n	1b9ea <ble_att_clt_rx_find_info+0x14>
        rc = ble_att_clt_parse_find_info_entry(om, rsp->bafp_format, &idata);
   1ba0a:	466a      	mov	r2, sp
   1ba0c:	7839      	ldrb	r1, [r7, #0]
   1ba0e:	4620      	mov	r0, r4
   1ba10:	f7ff ff45 	bl	1b89e <ble_att_clt_parse_find_info_entry>
        if (rc != 0) {
   1ba14:	b920      	cbnz	r0, 1ba20 <ble_att_clt_rx_find_info+0x4a>
        ble_gattc_rx_find_info_idata(conn_handle, &idata);
   1ba16:	4669      	mov	r1, sp
   1ba18:	4628      	mov	r0, r5
   1ba1a:	f7f9 fe7c 	bl	15716 <ble_gattc_rx_find_info_idata>
   1ba1e:	e7f0      	b.n	1ba02 <ble_att_clt_rx_find_info+0x2c>
        rc = ble_att_clt_parse_find_info_entry(om, rsp->bafp_format, &idata);
   1ba20:	4606      	mov	r6, r0
   1ba22:	e7e2      	b.n	1b9ea <ble_att_clt_rx_find_info+0x14>

0001ba24 <ble_att_clt_tx_find_type_value>:
    if (start_handle == 0 || start_handle > end_handle) {
   1ba24:	b1d9      	cbz	r1, 1ba5e <ble_att_clt_tx_find_type_value+0x3a>
{
   1ba26:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ba28:	b083      	sub	sp, #12
   1ba2a:	460d      	mov	r5, r1
    if (start_handle == 0 || start_handle > end_handle) {
   1ba2c:	4291      	cmp	r1, r2
   1ba2e:	d818      	bhi.n	1ba62 <ble_att_clt_tx_find_type_value+0x3e>
   1ba30:	461f      	mov	r7, r3
   1ba32:	4614      	mov	r4, r2
   1ba34:	4606      	mov	r6, r0
    req = ble_att_cmd_get(BLE_ATT_OP_FIND_TYPE_VALUE_REQ, sizeof(*req) + value_len,
   1ba36:	aa01      	add	r2, sp, #4
   1ba38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ba3a:	1d99      	adds	r1, r3, #6
   1ba3c:	2006      	movs	r0, #6
   1ba3e:	f000 f9ea 	bl	1be16 <ble_att_cmd_get>
    if (req == NULL) {
   1ba42:	b188      	cbz	r0, 1ba68 <ble_att_clt_tx_find_type_value+0x44>
    req->bavq_start_handle = htole16(start_handle);
   1ba44:	8005      	strh	r5, [r0, #0]
    req->bavq_end_handle = htole16(end_handle);
   1ba46:	8044      	strh	r4, [r0, #2]
    req->bavq_attr_type = htole16(attribute_type);
   1ba48:	8087      	strh	r7, [r0, #4]
    memcpy(req->bavq_value, attribute_value, value_len);
   1ba4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ba4c:	9908      	ldr	r1, [sp, #32]
   1ba4e:	3006      	adds	r0, #6
   1ba50:	f7f6 fd38 	bl	124c4 <memcpy>
    return ble_att_tx(conn_handle, txom);
   1ba54:	9901      	ldr	r1, [sp, #4]
   1ba56:	4630      	mov	r0, r6
   1ba58:	f000 f9ed 	bl	1be36 <ble_att_tx>
   1ba5c:	e002      	b.n	1ba64 <ble_att_clt_tx_find_type_value+0x40>
        return BLE_HS_EINVAL;
   1ba5e:	2003      	movs	r0, #3
}
   1ba60:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1ba62:	2003      	movs	r0, #3
}
   1ba64:	b003      	add	sp, #12
   1ba66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1ba68:	2006      	movs	r0, #6
   1ba6a:	e7fb      	b.n	1ba64 <ble_att_clt_tx_find_type_value+0x40>

0001ba6c <ble_att_clt_rx_find_type_value>:
{
   1ba6c:	b570      	push	{r4, r5, r6, lr}
   1ba6e:	b082      	sub	sp, #8
   1ba70:	4606      	mov	r6, r0
   1ba72:	460c      	mov	r4, r1
    rc = 0;
   1ba74:	2500      	movs	r5, #0
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   1ba76:	6823      	ldr	r3, [r4, #0]
   1ba78:	8a1b      	ldrh	r3, [r3, #16]
   1ba7a:	b153      	cbz	r3, 1ba92 <ble_att_clt_rx_find_type_value+0x26>
        rc = ble_att_clt_parse_find_type_value_hinfo(rxom, &hinfo);
   1ba7c:	a901      	add	r1, sp, #4
   1ba7e:	4620      	mov	r0, r4
   1ba80:	f7ff fed8 	bl	1b834 <ble_att_clt_parse_find_type_value_hinfo>
        if (rc != 0) {
   1ba84:	4605      	mov	r5, r0
   1ba86:	b920      	cbnz	r0, 1ba92 <ble_att_clt_rx_find_type_value+0x26>
        ble_gattc_rx_find_type_value_hinfo(conn_handle, &hinfo);
   1ba88:	a901      	add	r1, sp, #4
   1ba8a:	4630      	mov	r0, r6
   1ba8c:	f7f9 fe61 	bl	15752 <ble_gattc_rx_find_type_value_hinfo>
   1ba90:	e7f1      	b.n	1ba76 <ble_att_clt_rx_find_type_value+0xa>
    ble_gattc_rx_find_type_value_complete(conn_handle, rc);
   1ba92:	4629      	mov	r1, r5
   1ba94:	4630      	mov	r0, r6
   1ba96:	f7f9 fe6b 	bl	15770 <ble_gattc_rx_find_type_value_complete>
}
   1ba9a:	2000      	movs	r0, #0
   1ba9c:	b002      	add	sp, #8
   1ba9e:	bd70      	pop	{r4, r5, r6, pc}

0001baa0 <ble_att_clt_tx_read_type>:
    if (start_handle == 0 || start_handle > end_handle) {
   1baa0:	b1e1      	cbz	r1, 1badc <ble_att_clt_tx_read_type+0x3c>
{
   1baa2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1baa4:	b083      	sub	sp, #12
   1baa6:	460d      	mov	r5, r1
    if (start_handle == 0 || start_handle > end_handle) {
   1baa8:	4291      	cmp	r1, r2
   1baaa:	d819      	bhi.n	1bae0 <ble_att_clt_tx_read_type+0x40>
   1baac:	461e      	mov	r6, r3
   1baae:	4614      	mov	r4, r2
   1bab0:	4607      	mov	r7, r0
                          sizeof(*req) + ble_uuid_length(uuid), &txom);
   1bab2:	4618      	mov	r0, r3
   1bab4:	f7ff fde0 	bl	1b678 <ble_uuid_length>
    req = ble_att_cmd_get(BLE_ATT_OP_READ_TYPE_REQ,
   1bab8:	aa01      	add	r2, sp, #4
   1baba:	1d01      	adds	r1, r0, #4
   1babc:	2008      	movs	r0, #8
   1babe:	f000 f9aa 	bl	1be16 <ble_att_cmd_get>
    if (req == NULL) {
   1bac2:	4601      	mov	r1, r0
   1bac4:	b178      	cbz	r0, 1bae6 <ble_att_clt_tx_read_type+0x46>
    req->batq_start_handle = htole16(start_handle);
   1bac6:	8005      	strh	r5, [r0, #0]
    req->batq_end_handle = htole16(end_handle);
   1bac8:	8044      	strh	r4, [r0, #2]
    ble_uuid_flat(uuid, req->uuid);
   1baca:	3104      	adds	r1, #4
   1bacc:	4630      	mov	r0, r6
   1bace:	f7ff fda7 	bl	1b620 <ble_uuid_flat>
    return ble_att_tx(conn_handle, txom);
   1bad2:	9901      	ldr	r1, [sp, #4]
   1bad4:	4638      	mov	r0, r7
   1bad6:	f000 f9ae 	bl	1be36 <ble_att_tx>
   1bada:	e002      	b.n	1bae2 <ble_att_clt_tx_read_type+0x42>
        return BLE_HS_EINVAL;
   1badc:	2003      	movs	r0, #3
}
   1bade:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1bae0:	2003      	movs	r0, #3
}
   1bae2:	b003      	add	sp, #12
   1bae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1bae6:	2006      	movs	r0, #6
   1bae8:	e7fb      	b.n	1bae2 <ble_att_clt_tx_read_type+0x42>

0001baea <ble_att_clt_rx_read_type>:
{
   1baea:	b5f0      	push	{r4, r5, r6, r7, lr}
   1baec:	b085      	sub	sp, #20
   1baee:	4607      	mov	r7, r0
   1baf0:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1baf2:	2101      	movs	r1, #1
   1baf4:	4620      	mov	r0, r4
   1baf6:	f7fc fea1 	bl	1883c <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1bafa:	4606      	mov	r6, r0
   1bafc:	b130      	cbz	r0, 1bb0c <ble_att_clt_rx_read_type+0x22>
    ble_gattc_rx_read_type_complete(conn_handle, rc);
   1bafe:	4631      	mov	r1, r6
   1bb00:	4638      	mov	r0, r7
   1bb02:	f7f9 fe5b 	bl	157bc <ble_gattc_rx_read_type_complete>
}
   1bb06:	4630      	mov	r0, r6
   1bb08:	b005      	add	sp, #20
   1bb0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_read_type_rsp *)(*rxom)->om_data;
   1bb0c:	6820      	ldr	r0, [r4, #0]
   1bb0e:	6803      	ldr	r3, [r0, #0]
    data_len = rsp->batp_length;
   1bb10:	781d      	ldrb	r5, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   1bb12:	2101      	movs	r1, #1
   1bb14:	f7f5 fb17 	bl	11146 <os_mbuf_adj>
    if (data_len < sizeof(*data)) {
   1bb18:	2d01      	cmp	r5, #1
   1bb1a:	d91c      	bls.n	1bb56 <ble_att_clt_rx_read_type+0x6c>
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   1bb1c:	6823      	ldr	r3, [r4, #0]
   1bb1e:	8a1b      	ldrh	r3, [r3, #16]
   1bb20:	2b00      	cmp	r3, #0
   1bb22:	d0ec      	beq.n	1bafe <ble_att_clt_rx_read_type+0x14>
        rc = ble_hs_mbuf_pullup_base(rxom, data_len);
   1bb24:	4629      	mov	r1, r5
   1bb26:	4620      	mov	r0, r4
   1bb28:	f7fc fe88 	bl	1883c <ble_hs_mbuf_pullup_base>
        if (rc != 0) {
   1bb2c:	4606      	mov	r6, r0
   1bb2e:	2800      	cmp	r0, #0
   1bb30:	d1e5      	bne.n	1bafe <ble_att_clt_rx_read_type+0x14>
        data = (struct ble_att_attr_data_list *)(*rxom)->om_data;
   1bb32:	6823      	ldr	r3, [r4, #0]
        adata.att_handle = le16toh(data->handle);
   1bb34:	681b      	ldr	r3, [r3, #0]
   1bb36:	f833 2b02 	ldrh.w	r2, [r3], #2
   1bb3a:	f8ad 2004 	strh.w	r2, [sp, #4]
        adata.value_len = data_len - sizeof(*data);
   1bb3e:	1eaa      	subs	r2, r5, #2
   1bb40:	9202      	str	r2, [sp, #8]
        adata.value = data->value;
   1bb42:	9303      	str	r3, [sp, #12]
        ble_gattc_rx_read_type_adata(conn_handle, &adata);
   1bb44:	a901      	add	r1, sp, #4
   1bb46:	4638      	mov	r0, r7
   1bb48:	f7f9 fe22 	bl	15790 <ble_gattc_rx_read_type_adata>
        os_mbuf_adj(*rxom, data_len);
   1bb4c:	4629      	mov	r1, r5
   1bb4e:	6820      	ldr	r0, [r4, #0]
   1bb50:	f7f5 faf9 	bl	11146 <os_mbuf_adj>
   1bb54:	e7e2      	b.n	1bb1c <ble_att_clt_rx_read_type+0x32>
        rc = BLE_HS_EBADDATA;
   1bb56:	260a      	movs	r6, #10
   1bb58:	e7d1      	b.n	1bafe <ble_att_clt_rx_read_type+0x14>

0001bb5a <ble_att_clt_tx_read>:
    if (handle == 0) {
   1bb5a:	b181      	cbz	r1, 1bb7e <ble_att_clt_tx_read+0x24>
{
   1bb5c:	b530      	push	{r4, r5, lr}
   1bb5e:	b083      	sub	sp, #12
   1bb60:	460d      	mov	r5, r1
   1bb62:	4604      	mov	r4, r0
    req = ble_att_cmd_get(BLE_ATT_OP_READ_REQ, sizeof(*req), &txom);
   1bb64:	aa01      	add	r2, sp, #4
   1bb66:	2102      	movs	r1, #2
   1bb68:	200a      	movs	r0, #10
   1bb6a:	f000 f954 	bl	1be16 <ble_att_cmd_get>
    if (req == NULL) {
   1bb6e:	b140      	cbz	r0, 1bb82 <ble_att_clt_tx_read+0x28>
    req->barq_handle = htole16(handle);
   1bb70:	8005      	strh	r5, [r0, #0]
    rc = ble_att_tx(conn_handle, txom);
   1bb72:	9901      	ldr	r1, [sp, #4]
   1bb74:	4620      	mov	r0, r4
   1bb76:	f000 f95e 	bl	1be36 <ble_att_tx>
}
   1bb7a:	b003      	add	sp, #12
   1bb7c:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EINVAL;
   1bb7e:	2003      	movs	r0, #3
}
   1bb80:	4770      	bx	lr
        return BLE_HS_ENOMEM;
   1bb82:	2006      	movs	r0, #6
   1bb84:	e7f9      	b.n	1bb7a <ble_att_clt_tx_read+0x20>

0001bb86 <ble_att_clt_rx_read>:
{
   1bb86:	b508      	push	{r3, lr}
    ble_gattc_rx_read_rsp(conn_handle, 0, rxom);
   1bb88:	460a      	mov	r2, r1
   1bb8a:	2100      	movs	r1, #0
   1bb8c:	f7f9 fe4a 	bl	15824 <ble_gattc_rx_read_rsp>
}
   1bb90:	2000      	movs	r0, #0
   1bb92:	bd08      	pop	{r3, pc}

0001bb94 <ble_att_clt_tx_read_blob>:
    if (handle == 0) {
   1bb94:	b191      	cbz	r1, 1bbbc <ble_att_clt_tx_read_blob+0x28>
{
   1bb96:	b570      	push	{r4, r5, r6, lr}
   1bb98:	b082      	sub	sp, #8
   1bb9a:	460e      	mov	r6, r1
   1bb9c:	4615      	mov	r5, r2
   1bb9e:	4604      	mov	r4, r0
    req = ble_att_cmd_get(BLE_ATT_OP_READ_BLOB_REQ, sizeof(*req), &txom);
   1bba0:	aa01      	add	r2, sp, #4
   1bba2:	2104      	movs	r1, #4
   1bba4:	200c      	movs	r0, #12
   1bba6:	f000 f936 	bl	1be16 <ble_att_cmd_get>
    if (req == NULL) {
   1bbaa:	b148      	cbz	r0, 1bbc0 <ble_att_clt_tx_read_blob+0x2c>
    req->babq_handle = htole16(handle);
   1bbac:	8006      	strh	r6, [r0, #0]
    req->babq_offset = htole16(offset);
   1bbae:	8045      	strh	r5, [r0, #2]
    rc = ble_att_tx(conn_handle, txom);
   1bbb0:	9901      	ldr	r1, [sp, #4]
   1bbb2:	4620      	mov	r0, r4
   1bbb4:	f000 f93f 	bl	1be36 <ble_att_tx>
}
   1bbb8:	b002      	add	sp, #8
   1bbba:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   1bbbc:	2003      	movs	r0, #3
}
   1bbbe:	4770      	bx	lr
        return BLE_HS_ENOMEM;
   1bbc0:	2006      	movs	r0, #6
   1bbc2:	e7f9      	b.n	1bbb8 <ble_att_clt_tx_read_blob+0x24>

0001bbc4 <ble_att_clt_rx_read_blob>:
{
   1bbc4:	b508      	push	{r3, lr}
    ble_gattc_rx_read_blob_rsp(conn_handle, 0, rxom);
   1bbc6:	460a      	mov	r2, r1
   1bbc8:	2100      	movs	r1, #0
   1bbca:	f7f9 fe43 	bl	15854 <ble_gattc_rx_read_blob_rsp>
}
   1bbce:	2000      	movs	r0, #0
   1bbd0:	bd08      	pop	{r3, pc}

0001bbd2 <ble_att_clt_rx_read_mult>:
{
   1bbd2:	b508      	push	{r3, lr}
    ble_gattc_rx_read_mult_rsp(conn_handle, 0, rxom);
   1bbd4:	460a      	mov	r2, r1
   1bbd6:	2100      	movs	r1, #0
   1bbd8:	f7f9 fe4d 	bl	15876 <ble_gattc_rx_read_mult_rsp>
}
   1bbdc:	2000      	movs	r0, #0
   1bbde:	bd08      	pop	{r3, pc}

0001bbe0 <ble_att_clt_tx_read_group_type>:
    if (start_handle == 0 || start_handle > end_handle) {
   1bbe0:	b1e1      	cbz	r1, 1bc1c <ble_att_clt_tx_read_group_type+0x3c>
{
   1bbe2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bbe4:	b083      	sub	sp, #12
   1bbe6:	460d      	mov	r5, r1
    if (start_handle == 0 || start_handle > end_handle) {
   1bbe8:	4291      	cmp	r1, r2
   1bbea:	d819      	bhi.n	1bc20 <ble_att_clt_tx_read_group_type+0x40>
   1bbec:	461e      	mov	r6, r3
   1bbee:	4614      	mov	r4, r2
   1bbf0:	4607      	mov	r7, r0
                          sizeof(*req) + ble_uuid_length(uuid), &txom);
   1bbf2:	4618      	mov	r0, r3
   1bbf4:	f7ff fd40 	bl	1b678 <ble_uuid_length>
    req = ble_att_cmd_get(BLE_ATT_OP_READ_GROUP_TYPE_REQ,
   1bbf8:	aa01      	add	r2, sp, #4
   1bbfa:	1d01      	adds	r1, r0, #4
   1bbfc:	2010      	movs	r0, #16
   1bbfe:	f000 f90a 	bl	1be16 <ble_att_cmd_get>
    if (req == NULL) {
   1bc02:	4601      	mov	r1, r0
   1bc04:	b178      	cbz	r0, 1bc26 <ble_att_clt_tx_read_group_type+0x46>
    req->bagq_start_handle = htole16(start_handle);
   1bc06:	8005      	strh	r5, [r0, #0]
    req->bagq_end_handle = htole16(end_handle);
   1bc08:	8044      	strh	r4, [r0, #2]
    ble_uuid_flat(uuid, req->uuid);
   1bc0a:	3104      	adds	r1, #4
   1bc0c:	4630      	mov	r0, r6
   1bc0e:	f7ff fd07 	bl	1b620 <ble_uuid_flat>
    return ble_att_tx(conn_handle, txom);
   1bc12:	9901      	ldr	r1, [sp, #4]
   1bc14:	4638      	mov	r0, r7
   1bc16:	f000 f90e 	bl	1be36 <ble_att_tx>
   1bc1a:	e002      	b.n	1bc22 <ble_att_clt_tx_read_group_type+0x42>
        return BLE_HS_EINVAL;
   1bc1c:	2003      	movs	r0, #3
}
   1bc1e:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1bc20:	2003      	movs	r0, #3
}
   1bc22:	b003      	add	sp, #12
   1bc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1bc26:	2006      	movs	r0, #6
   1bc28:	e7fb      	b.n	1bc22 <ble_att_clt_tx_read_group_type+0x42>

0001bc2a <ble_att_clt_rx_read_group_type>:

int
ble_att_clt_rx_read_group_type(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1bc2a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc2c:	b085      	sub	sp, #20
   1bc2e:	4607      	mov	r7, r0
   1bc30:	460c      	mov	r4, r1
    struct ble_att_read_group_type_adata adata;
    struct ble_att_read_group_type_rsp *rsp;
    uint8_t len;
    int rc;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1bc32:	2101      	movs	r1, #1
   1bc34:	4620      	mov	r0, r4
   1bc36:	f7fc fe01 	bl	1883c <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1bc3a:	4605      	mov	r5, r0
   1bc3c:	b130      	cbz	r0, 1bc4c <ble_att_clt_rx_read_group_type+0x22>
        os_mbuf_adj(*rxom, len);
    }

done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_group_type_complete(conn_handle, rc);
   1bc3e:	4629      	mov	r1, r5
   1bc40:	4638      	mov	r0, r7
   1bc42:	f7f9 fde0 	bl	15806 <ble_gattc_rx_read_group_type_complete>
    return rc;
}
   1bc46:	4628      	mov	r0, r5
   1bc48:	b005      	add	sp, #20
   1bc4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_read_group_type_rsp *)(*rxom)->om_data;
   1bc4c:	6820      	ldr	r0, [r4, #0]
   1bc4e:	6803      	ldr	r3, [r0, #0]
    len = rsp->bagp_length;
   1bc50:	781e      	ldrb	r6, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   1bc52:	2101      	movs	r1, #1
   1bc54:	f7f5 fa77 	bl	11146 <os_mbuf_adj>
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   1bc58:	6823      	ldr	r3, [r4, #0]
   1bc5a:	8a1b      	ldrh	r3, [r3, #16]
   1bc5c:	2b00      	cmp	r3, #0
   1bc5e:	d0ee      	beq.n	1bc3e <ble_att_clt_rx_read_group_type+0x14>
        rc = ble_att_clt_parse_read_group_type_adata(rxom, len, &adata);
   1bc60:	aa01      	add	r2, sp, #4
   1bc62:	4631      	mov	r1, r6
   1bc64:	4620      	mov	r0, r4
   1bc66:	f7ff fdfb 	bl	1b860 <ble_att_clt_parse_read_group_type_adata>
        if (rc != 0) {
   1bc6a:	4605      	mov	r5, r0
   1bc6c:	2800      	cmp	r0, #0
   1bc6e:	d1e6      	bne.n	1bc3e <ble_att_clt_rx_read_group_type+0x14>
        ble_gattc_rx_read_group_type_adata(conn_handle, &adata);
   1bc70:	a901      	add	r1, sp, #4
   1bc72:	4638      	mov	r0, r7
   1bc74:	f7f9 fdb8 	bl	157e8 <ble_gattc_rx_read_group_type_adata>
        os_mbuf_adj(*rxom, len);
   1bc78:	4631      	mov	r1, r6
   1bc7a:	6820      	ldr	r0, [r4, #0]
   1bc7c:	f7f5 fa63 	bl	11146 <os_mbuf_adj>
   1bc80:	e7ea      	b.n	1bc58 <ble_att_clt_rx_read_group_type+0x2e>

0001bc82 <ble_att_clt_rx_write>:
    return ble_att_tx(conn_handle, txom2);
}

int
ble_att_clt_rx_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1bc82:	b508      	push	{r3, lr}
#endif

    BLE_ATT_LOG_EMPTY_CMD(0, "write rsp", conn_handle);

    /* No payload. */
    ble_gattc_rx_write_rsp(conn_handle);
   1bc84:	f7f9 fe09 	bl	1589a <ble_gattc_rx_write_rsp>
    return 0;
}
   1bc88:	2000      	movs	r0, #0
   1bc8a:	bd08      	pop	{r3, pc}

0001bc8c <ble_att_clt_tx_prep_write>:
 *****************************************************************************/

int
ble_att_clt_tx_prep_write(uint16_t conn_handle, uint16_t handle,
                          uint16_t offset, struct os_mbuf *txom)
{
   1bc8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc90:	b082      	sub	sp, #8
   1bc92:	461c      	mov	r4, r3

    struct ble_att_prep_write_cmd *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1bc94:	b359      	cbz	r1, 1bcee <ble_att_clt_tx_prep_write+0x62>
   1bc96:	4607      	mov	r7, r0
   1bc98:	4615      	mov	r5, r2
   1bc9a:	4688      	mov	r8, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    if (offset + OS_MBUF_PKTLEN(txom) > BLE_ATT_ATTR_MAX_LEN) {
   1bc9c:	8a1e      	ldrh	r6, [r3, #16]
   1bc9e:	1993      	adds	r3, r2, r6
   1bca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1bca4:	dd07      	ble.n	1bcb6 <ble_att_clt_tx_prep_write+0x2a>
        rc = BLE_HS_EINVAL;
   1bca6:	2503      	movs	r5, #3
                    ble_att_prep_write_cmd_log, req);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   1bca8:	4620      	mov	r0, r4
   1bcaa:	f7f5 f917 	bl	10edc <os_mbuf_free_chain>
    return rc;
}
   1bcae:	4628      	mov	r0, r5
   1bcb0:	b002      	add	sp, #8
   1bcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_att_mtu(conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ) {
   1bcb6:	f7ff fd8a 	bl	1b7ce <ble_att_mtu>
   1bcba:	3805      	subs	r0, #5
    if (OS_MBUF_PKTLEN(txom) >
   1bcbc:	4286      	cmp	r6, r0
   1bcbe:	dd01      	ble.n	1bcc4 <ble_att_clt_tx_prep_write+0x38>
        rc = BLE_HS_EINVAL;
   1bcc0:	2503      	movs	r5, #3
   1bcc2:	e7f1      	b.n	1bca8 <ble_att_clt_tx_prep_write+0x1c>
    req = ble_att_cmd_get(BLE_ATT_OP_PREP_WRITE_REQ, sizeof(*req), &txom2);
   1bcc4:	aa01      	add	r2, sp, #4
   1bcc6:	2104      	movs	r1, #4
   1bcc8:	2016      	movs	r0, #22
   1bcca:	f000 f8a4 	bl	1be16 <ble_att_cmd_get>
    if (req == NULL) {
   1bcce:	b908      	cbnz	r0, 1bcd4 <ble_att_clt_tx_prep_write+0x48>
        rc = BLE_HS_ENOMEM;
   1bcd0:	2506      	movs	r5, #6
   1bcd2:	e7e9      	b.n	1bca8 <ble_att_clt_tx_prep_write+0x1c>
    req->bapc_handle = htole16(handle);
   1bcd4:	f8a0 8000 	strh.w	r8, [r0]
    req->bapc_offset = htole16(offset);
   1bcd8:	8045      	strh	r5, [r0, #2]
    os_mbuf_concat(txom2, txom);
   1bcda:	4621      	mov	r1, r4
   1bcdc:	9801      	ldr	r0, [sp, #4]
   1bcde:	f7f5 fbc4 	bl	1146a <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   1bce2:	9901      	ldr	r1, [sp, #4]
   1bce4:	4638      	mov	r0, r7
   1bce6:	f000 f8a6 	bl	1be36 <ble_att_tx>
   1bcea:	4605      	mov	r5, r0
   1bcec:	e7df      	b.n	1bcae <ble_att_clt_tx_prep_write+0x22>
        rc = BLE_HS_EINVAL;
   1bcee:	2503      	movs	r5, #3
   1bcf0:	e7da      	b.n	1bca8 <ble_att_clt_tx_prep_write+0x1c>

0001bcf2 <ble_att_clt_rx_prep_write>:

int
ble_att_clt_rx_prep_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1bcf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bcf6:	b082      	sub	sp, #8
   1bcf8:	4607      	mov	r7, r0
   1bcfa:	460c      	mov	r4, r1

    /* Initialize some values in case of early error. */
    handle = 0;
    offset = 0;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1bcfc:	2104      	movs	r1, #4
   1bcfe:	4620      	mov	r0, r4
   1bd00:	f7fc fd9c 	bl	1883c <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1bd04:	4605      	mov	r5, r0
   1bd06:	b160      	cbz	r0, 1bd22 <ble_att_clt_rx_prep_write+0x30>
    offset = 0;
   1bd08:	2600      	movs	r6, #0
    handle = 0;
   1bd0a:	46b0      	mov	r8, r6
    /* Strip the base from the front of the response. */
    os_mbuf_adj(*rxom, sizeof(*rsp));

done:
    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_prep_write_rsp(conn_handle, rc, handle, offset, rxom);
   1bd0c:	9400      	str	r4, [sp, #0]
   1bd0e:	4633      	mov	r3, r6
   1bd10:	4642      	mov	r2, r8
   1bd12:	4629      	mov	r1, r5
   1bd14:	4638      	mov	r0, r7
   1bd16:	f7f9 fdcf 	bl	158b8 <ble_gattc_rx_prep_write_rsp>
    return rc;
}
   1bd1a:	4628      	mov	r0, r5
   1bd1c:	b002      	add	sp, #8
   1bd1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rsp = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   1bd22:	6820      	ldr	r0, [r4, #0]
   1bd24:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(rsp->bapc_handle);
   1bd26:	f8b3 8000 	ldrh.w	r8, [r3]
    offset = le16toh(rsp->bapc_offset);
   1bd2a:	885e      	ldrh	r6, [r3, #2]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   1bd2c:	2104      	movs	r1, #4
   1bd2e:	f7f5 fa0a 	bl	11146 <os_mbuf_adj>
   1bd32:	e7eb      	b.n	1bd0c <ble_att_clt_rx_prep_write+0x1a>

0001bd34 <ble_att_clt_tx_exec_write>:
 * $execute write request                                                    *
 *****************************************************************************/

int
ble_att_clt_tx_exec_write(uint16_t conn_handle, uint8_t flags)
{
   1bd34:	b530      	push	{r4, r5, lr}
   1bd36:	b083      	sub	sp, #12
   1bd38:	4604      	mov	r4, r0
   1bd3a:	460d      	mov	r5, r1

    struct ble_att_exec_write_req *req;
    struct os_mbuf *txom;
    int rc;

    req = ble_att_cmd_get(BLE_ATT_OP_EXEC_WRITE_REQ, sizeof(*req), &txom);
   1bd3c:	aa01      	add	r2, sp, #4
   1bd3e:	2101      	movs	r1, #1
   1bd40:	2018      	movs	r0, #24
   1bd42:	f000 f868 	bl	1be16 <ble_att_cmd_get>
    if (req == NULL) {
   1bd46:	b130      	cbz	r0, 1bd56 <ble_att_clt_tx_exec_write+0x22>
        return BLE_HS_ENOMEM;
    }

    req->baeq_flags = flags;
   1bd48:	7005      	strb	r5, [r0, #0]

    rc = ble_att_tx(conn_handle, txom);
   1bd4a:	9901      	ldr	r1, [sp, #4]
   1bd4c:	4620      	mov	r0, r4
   1bd4e:	f000 f872 	bl	1be36 <ble_att_tx>

    BLE_ATT_LOG_CMD(1, "exec write req", conn_handle,
                    ble_att_exec_write_req_log, req);

    return 0;
}
   1bd52:	b003      	add	sp, #12
   1bd54:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ENOMEM;
   1bd56:	2006      	movs	r0, #6
   1bd58:	e7fb      	b.n	1bd52 <ble_att_clt_tx_exec_write+0x1e>

0001bd5a <ble_att_clt_rx_exec_write>:

int
ble_att_clt_rx_exec_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1bd5a:	b508      	push	{r3, lr}
    return BLE_HS_ENOTSUP;
#endif

    BLE_ATT_LOG_EMPTY_CMD(0, "exec write rsp", conn_handle);

    ble_gattc_rx_exec_write_rsp(conn_handle, 0);
   1bd5c:	2100      	movs	r1, #0
   1bd5e:	f7f9 fdc9 	bl	158f4 <ble_gattc_rx_exec_write_rsp>
    return 0;
}
   1bd62:	2000      	movs	r0, #0
   1bd64:	bd08      	pop	{r3, pc}

0001bd66 <ble_att_clt_tx_notify>:
 *****************************************************************************/

int
ble_att_clt_tx_notify(uint16_t conn_handle, uint16_t handle,
                      struct os_mbuf *txom)
{
   1bd66:	b570      	push	{r4, r5, r6, lr}
   1bd68:	b082      	sub	sp, #8
   1bd6a:	4615      	mov	r5, r2

    struct ble_att_notify_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1bd6c:	b1a1      	cbz	r1, 1bd98 <ble_att_clt_tx_notify+0x32>
   1bd6e:	4604      	mov	r4, r0
   1bd70:	460e      	mov	r6, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    req = ble_att_cmd_get(BLE_ATT_OP_NOTIFY_REQ, sizeof(*req), &txom2);
   1bd72:	aa01      	add	r2, sp, #4
   1bd74:	2102      	movs	r1, #2
   1bd76:	201b      	movs	r0, #27
   1bd78:	f000 f84d 	bl	1be16 <ble_att_cmd_get>
    if (req == NULL) {
   1bd7c:	b908      	cbnz	r0, 1bd82 <ble_att_clt_tx_notify+0x1c>
        rc = BLE_HS_ENOMEM;
   1bd7e:	2406      	movs	r4, #6
   1bd80:	e00b      	b.n	1bd9a <ble_att_clt_tx_notify+0x34>
        goto err;
    }

    req->banq_handle = htole16(handle);
   1bd82:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1bd84:	4629      	mov	r1, r5
   1bd86:	9801      	ldr	r0, [sp, #4]
   1bd88:	f7f5 fb6f 	bl	1146a <os_mbuf_concat>

    BLE_ATT_LOG_CMD(1, "notify req", conn_handle, ble_att_notify_req_log, req);

    return ble_att_tx(conn_handle, txom2);
   1bd8c:	9901      	ldr	r1, [sp, #4]
   1bd8e:	4620      	mov	r0, r4
   1bd90:	f000 f851 	bl	1be36 <ble_att_tx>
   1bd94:	4604      	mov	r4, r0
   1bd96:	e003      	b.n	1bda0 <ble_att_clt_tx_notify+0x3a>
        rc = BLE_HS_EINVAL;
   1bd98:	2403      	movs	r4, #3

err:
    os_mbuf_free_chain(txom);
   1bd9a:	4628      	mov	r0, r5
   1bd9c:	f7f5 f89e 	bl	10edc <os_mbuf_free_chain>
    return rc;
}
   1bda0:	4620      	mov	r0, r4
   1bda2:	b002      	add	sp, #8
   1bda4:	bd70      	pop	{r4, r5, r6, pc}

0001bda6 <ble_att_clt_tx_indicate>:
 *****************************************************************************/

int
ble_att_clt_tx_indicate(uint16_t conn_handle, uint16_t handle,
                        struct os_mbuf *txom)
{
   1bda6:	b570      	push	{r4, r5, r6, lr}
   1bda8:	b082      	sub	sp, #8
   1bdaa:	4615      	mov	r5, r2

    struct ble_att_indicate_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1bdac:	b1a1      	cbz	r1, 1bdd8 <ble_att_clt_tx_indicate+0x32>
   1bdae:	4604      	mov	r4, r0
   1bdb0:	460e      	mov	r6, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    req = ble_att_cmd_get(BLE_ATT_OP_INDICATE_REQ, sizeof(*req), &txom2);
   1bdb2:	aa01      	add	r2, sp, #4
   1bdb4:	2102      	movs	r1, #2
   1bdb6:	201d      	movs	r0, #29
   1bdb8:	f000 f82d 	bl	1be16 <ble_att_cmd_get>
    if (req == NULL) {
   1bdbc:	b908      	cbnz	r0, 1bdc2 <ble_att_clt_tx_indicate+0x1c>
        rc = BLE_HS_ENOMEM;
   1bdbe:	2406      	movs	r4, #6
   1bdc0:	e00b      	b.n	1bdda <ble_att_clt_tx_indicate+0x34>
        goto err;
    }

    req->baiq_handle = htole16(handle);
   1bdc2:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1bdc4:	4629      	mov	r1, r5
   1bdc6:	9801      	ldr	r0, [sp, #4]
   1bdc8:	f7f5 fb4f 	bl	1146a <os_mbuf_concat>

    BLE_ATT_LOG_CMD(1, "indicate req", conn_handle, ble_att_indicate_req_log,
                    req);

    return ble_att_tx(conn_handle, txom2);
   1bdcc:	9901      	ldr	r1, [sp, #4]
   1bdce:	4620      	mov	r0, r4
   1bdd0:	f000 f831 	bl	1be36 <ble_att_tx>
   1bdd4:	4604      	mov	r4, r0
   1bdd6:	e003      	b.n	1bde0 <ble_att_clt_tx_indicate+0x3a>
        rc = BLE_HS_EINVAL;
   1bdd8:	2403      	movs	r4, #3

err:
    os_mbuf_free_chain(txom);
   1bdda:	4628      	mov	r0, r5
   1bddc:	f7f5 f87e 	bl	10edc <os_mbuf_free_chain>
    return rc;
}
   1bde0:	4620      	mov	r0, r4
   1bde2:	b002      	add	sp, #8
   1bde4:	bd70      	pop	{r4, r5, r6, pc}

0001bde6 <ble_att_clt_rx_indicate>:

int
ble_att_clt_rx_indicate(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1bde6:	b508      	push	{r3, lr}
#endif

    BLE_ATT_LOG_EMPTY_CMD(0, "indicate rsp", conn_handle);

    /* No payload. */
    ble_gattc_rx_indicate_rsp(conn_handle);
   1bde8:	f7f9 fd9a 	bl	15920 <ble_gattc_rx_indicate_rsp>
    return 0;
}
   1bdec:	2000      	movs	r0, #0
   1bdee:	bd08      	pop	{r3, pc}

0001bdf0 <ble_att_cmd_prepare>:
#include "host/ble_uuid.h"
#include "ble_hs_priv.h"

void *
ble_att_cmd_prepare(uint8_t opcode, size_t len, struct os_mbuf *txom)
{
   1bdf0:	b570      	push	{r4, r5, r6, lr}
   1bdf2:	4606      	mov	r6, r0
   1bdf4:	4615      	mov	r5, r2
    struct ble_att_hdr *hdr;

    if (os_mbuf_extend(txom, sizeof(*hdr) + len) == NULL) {
   1bdf6:	3101      	adds	r1, #1
   1bdf8:	b289      	uxth	r1, r1
   1bdfa:	4610      	mov	r0, r2
   1bdfc:	f7f5 fb58 	bl	114b0 <os_mbuf_extend>
   1be00:	b120      	cbz	r0, 1be0c <ble_att_cmd_prepare+0x1c>
        return NULL;
    }

    hdr = (struct ble_att_hdr *)(txom)->om_data;

    hdr->opcode = opcode;
   1be02:	682c      	ldr	r4, [r5, #0]
   1be04:	f804 6b01 	strb.w	r6, [r4], #1

    return hdr->data;
}
   1be08:	4620      	mov	r0, r4
   1be0a:	bd70      	pop	{r4, r5, r6, pc}
   1be0c:	4604      	mov	r4, r0
        os_mbuf_free_chain(txom);
   1be0e:	4628      	mov	r0, r5
   1be10:	f7f5 f864 	bl	10edc <os_mbuf_free_chain>
        return NULL;
   1be14:	e7f8      	b.n	1be08 <ble_att_cmd_prepare+0x18>

0001be16 <ble_att_cmd_get>:

void *
ble_att_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   1be16:	b570      	push	{r4, r5, r6, lr}
   1be18:	4605      	mov	r5, r0
   1be1a:	460e      	mov	r6, r1
   1be1c:	4614      	mov	r4, r2
    *txom = ble_hs_mbuf_l2cap_pkt();
   1be1e:	f7fc fcef 	bl	18800 <ble_hs_mbuf_l2cap_pkt>
   1be22:	6020      	str	r0, [r4, #0]
    if (*txom == NULL) {
   1be24:	b128      	cbz	r0, 1be32 <ble_att_cmd_get+0x1c>
        return NULL;
    }

    return ble_att_cmd_prepare(opcode, len, *txom);
   1be26:	4602      	mov	r2, r0
   1be28:	4631      	mov	r1, r6
   1be2a:	4628      	mov	r0, r5
   1be2c:	f7ff ffe0 	bl	1bdf0 <ble_att_cmd_prepare>
}
   1be30:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   1be32:	2000      	movs	r0, #0
   1be34:	e7fc      	b.n	1be30 <ble_att_cmd_get+0x1a>

0001be36 <ble_att_tx>:

int
ble_att_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   1be36:	b530      	push	{r4, r5, lr}
   1be38:	b083      	sub	sp, #12
   1be3a:	4605      	mov	r5, r0
   1be3c:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT_EVAL(txom->om_len >= 1);
    ble_att_inc_tx_stat(txom->om_data[0]);
   1be3e:	680b      	ldr	r3, [r1, #0]
   1be40:	7818      	ldrb	r0, [r3, #0]
   1be42:	f7ff fca1 	bl	1b788 <ble_att_inc_tx_stat>

    ble_hs_lock();
   1be46:	f7fa fd59 	bl	168fc <ble_hs_lock>

    ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_ATT, &conn,
   1be4a:	ab01      	add	r3, sp, #4
   1be4c:	466a      	mov	r2, sp
   1be4e:	2104      	movs	r1, #4
   1be50:	4628      	mov	r0, r5
   1be52:	f7fc fd2d 	bl	188b0 <ble_hs_misc_conn_chan_find_reqd>
                                    &chan);
    if (chan == NULL) {
   1be56:	9801      	ldr	r0, [sp, #4]
   1be58:	b168      	cbz	r0, 1be76 <ble_att_tx+0x40>
        os_mbuf_free_chain(txom);
        rc = BLE_HS_ENOTCONN;
    } else {
        ble_att_truncate_to_mtu(chan, txom);
   1be5a:	4621      	mov	r1, r4
   1be5c:	f7ff fcaa 	bl	1b7b4 <ble_att_truncate_to_mtu>
        rc = ble_l2cap_tx(conn, chan, txom);
   1be60:	4622      	mov	r2, r4
   1be62:	9901      	ldr	r1, [sp, #4]
   1be64:	9800      	ldr	r0, [sp, #0]
   1be66:	f7fd f980 	bl	1916a <ble_l2cap_tx>
   1be6a:	4604      	mov	r4, r0
    }

    ble_hs_unlock();
   1be6c:	f7fa fd4a 	bl	16904 <ble_hs_unlock>

    return rc;
}
   1be70:	4620      	mov	r0, r4
   1be72:	b003      	add	sp, #12
   1be74:	bd30      	pop	{r4, r5, pc}
        os_mbuf_free_chain(txom);
   1be76:	4620      	mov	r0, r4
   1be78:	f7f5 f830 	bl	10edc <os_mbuf_free_chain>
        rc = BLE_HS_ENOTCONN;
   1be7c:	2407      	movs	r4, #7
   1be7e:	e7f5      	b.n	1be6c <ble_att_tx+0x36>

0001be80 <ble_att_svr_next_id>:
static uint16_t
ble_att_svr_next_id(void)
{
    /* Rollover is fatal. */
    BLE_HS_DBG_ASSERT(ble_att_svr_id != UINT16_MAX);
    return ++ble_att_svr_id;
   1be80:	4b02      	ldr	r3, [pc, #8]	; (1be8c <ble_att_svr_next_id+0xc>)
   1be82:	8818      	ldrh	r0, [r3, #0]
   1be84:	3001      	adds	r0, #1
   1be86:	b280      	uxth	r0, r0
   1be88:	8018      	strh	r0, [r3, #0]
}
   1be8a:	4770      	bx	lr
   1be8c:	20002c74 	.word	0x20002c74

0001be90 <ble_att_svr_prep_find_prev>:
{
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;

    prev = NULL;
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1be90:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   1be92:	2000      	movs	r0, #0
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1be94:	b173      	cbz	r3, 1beb4 <ble_att_svr_prep_find_prev+0x24>
{
   1be96:	b410      	push	{r4}
   1be98:	e002      	b.n	1bea0 <ble_att_svr_prep_find_prev+0x10>

        if (entry->bape_handle == handle && entry->bape_offset > offset) {
            break;
        }

        prev = entry;
   1be9a:	4618      	mov	r0, r3
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1be9c:	681b      	ldr	r3, [r3, #0]
   1be9e:	b133      	cbz	r3, 1beae <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle > handle) {
   1bea0:	889c      	ldrh	r4, [r3, #4]
   1bea2:	428c      	cmp	r4, r1
   1bea4:	d803      	bhi.n	1beae <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle == handle && entry->bape_offset > offset) {
   1bea6:	d1f8      	bne.n	1be9a <ble_att_svr_prep_find_prev+0xa>
   1bea8:	88dc      	ldrh	r4, [r3, #6]
   1beaa:	4294      	cmp	r4, r2
   1beac:	d9f5      	bls.n	1be9a <ble_att_svr_prep_find_prev+0xa>
    }

    return prev;
}
   1beae:	f85d 4b04 	ldr.w	r4, [sp], #4
   1beb2:	4770      	bx	lr
   1beb4:	4770      	bx	lr

0001beb6 <ble_att_svr_prep_validate>:
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;
    int cur_len;

    prev = NULL;
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1beb6:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   1beb8:	2200      	movs	r2, #0
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1beba:	b34b      	cbz	r3, 1bf10 <ble_att_svr_prep_validate+0x5a>
{
   1bebc:	b410      	push	{r4}
   1bebe:	e00b      	b.n	1bed8 <ble_att_svr_prep_validate+0x22>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
            /* Ensure attribute write starts at offset 0. */
            if (entry->bape_offset != 0) {
   1bec0:	88da      	ldrh	r2, [r3, #6]
   1bec2:	b9ca      	cbnz	r2, 1bef8 <ble_att_svr_prep_validate+0x42>
                *err_handle = entry->bape_handle;
                return BLE_ATT_ERR_INVALID_OFFSET;
            }
        }

        cur_len = entry->bape_offset + OS_MBUF_PKTLEN(entry->bape_value);
   1bec4:	88da      	ldrh	r2, [r3, #6]
   1bec6:	6898      	ldr	r0, [r3, #8]
   1bec8:	8a00      	ldrh	r0, [r0, #16]
   1beca:	4402      	add	r2, r0
        if (cur_len > BLE_ATT_ATTR_MAX_LEN) {
   1becc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1bed0:	dc16      	bgt.n	1bf00 <ble_att_svr_prep_validate+0x4a>
            *err_handle = entry->bape_handle;
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
        }

        prev = entry;
   1bed2:	461a      	mov	r2, r3
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1bed4:	681b      	ldr	r3, [r3, #0]
   1bed6:	b1bb      	cbz	r3, 1bf08 <ble_att_svr_prep_validate+0x52>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
   1bed8:	2a00      	cmp	r2, #0
   1beda:	d0f1      	beq.n	1bec0 <ble_att_svr_prep_validate+0xa>
   1bedc:	8894      	ldrh	r4, [r2, #4]
   1bede:	8898      	ldrh	r0, [r3, #4]
   1bee0:	4284      	cmp	r4, r0
   1bee2:	d1ed      	bne.n	1bec0 <ble_att_svr_prep_validate+0xa>
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   1bee4:	88d4      	ldrh	r4, [r2, #6]
   1bee6:	6892      	ldr	r2, [r2, #8]
   1bee8:	8a12      	ldrh	r2, [r2, #16]
   1beea:	4422      	add	r2, r4
                entry->bape_offset) {
   1beec:	88dc      	ldrh	r4, [r3, #6]
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   1beee:	42a2      	cmp	r2, r4
   1bef0:	d0e8      	beq.n	1bec4 <ble_att_svr_prep_validate+0xe>
                *err_handle = entry->bape_handle;
   1bef2:	8008      	strh	r0, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   1bef4:	2007      	movs	r0, #7
   1bef6:	e008      	b.n	1bf0a <ble_att_svr_prep_validate+0x54>
                *err_handle = entry->bape_handle;
   1bef8:	889b      	ldrh	r3, [r3, #4]
   1befa:	800b      	strh	r3, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   1befc:	2007      	movs	r0, #7
   1befe:	e004      	b.n	1bf0a <ble_att_svr_prep_validate+0x54>
            *err_handle = entry->bape_handle;
   1bf00:	889b      	ldrh	r3, [r3, #4]
   1bf02:	800b      	strh	r3, [r1, #0]
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   1bf04:	200d      	movs	r0, #13
   1bf06:	e000      	b.n	1bf0a <ble_att_svr_prep_validate+0x54>
    }

    return 0;
   1bf08:	2000      	movs	r0, #0
}
   1bf0a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bf0e:	4770      	bx	lr
    return 0;
   1bf10:	2000      	movs	r0, #0
}
   1bf12:	4770      	bx	lr

0001bf14 <ble_att_svr_entry_alloc>:
{
   1bf14:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_att_svr_entry_pool);
   1bf16:	4806      	ldr	r0, [pc, #24]	; (1bf30 <ble_att_svr_entry_alloc+0x1c>)
   1bf18:	f7f5 fc35 	bl	11786 <os_memblock_get>
    if (entry != NULL) {
   1bf1c:	4603      	mov	r3, r0
   1bf1e:	b128      	cbz	r0, 1bf2c <ble_att_svr_entry_alloc+0x18>
        memset(entry, 0, sizeof *entry);
   1bf20:	2200      	movs	r2, #0
   1bf22:	6002      	str	r2, [r0, #0]
   1bf24:	6042      	str	r2, [r0, #4]
   1bf26:	6082      	str	r2, [r0, #8]
   1bf28:	60c2      	str	r2, [r0, #12]
   1bf2a:	6102      	str	r2, [r0, #16]
}
   1bf2c:	4618      	mov	r0, r3
   1bf2e:	bd08      	pop	{r3, pc}
   1bf30:	20002c50 	.word	0x20002c50

0001bf34 <ble_att_svr_get_sec_state>:
{
   1bf34:	b538      	push	{r3, r4, r5, lr}
   1bf36:	4605      	mov	r5, r0
   1bf38:	460c      	mov	r4, r1
    ble_hs_lock();
   1bf3a:	f7fa fcdf 	bl	168fc <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   1bf3e:	4628      	mov	r0, r5
   1bf40:	f7fb faca 	bl	174d8 <ble_hs_conn_find_assert>
    *out_sec_state = conn->bhc_sec_state;
   1bf44:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1bf46:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   1bf48:	f7fa fcdc 	bl	16904 <ble_hs_unlock>
}
   1bf4c:	bd38      	pop	{r3, r4, r5, pc}

0001bf4e <ble_att_svr_check_perms>:
{
   1bf4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf52:	b0a6      	sub	sp, #152	; 0x98
    if (is_read) {
   1bf54:	b371      	cbz	r1, 1bfb4 <ble_att_svr_check_perms+0x66>
        if (!(entry->ha_flags & BLE_ATT_F_READ)) {
   1bf56:	7a11      	ldrb	r1, [r2, #8]
   1bf58:	f011 0f01 	tst.w	r1, #1
   1bf5c:	d026      	beq.n	1bfac <ble_att_svr_check_perms+0x5e>
        enc = entry->ha_flags & BLE_ATT_F_READ_ENC;
   1bf5e:	f001 0504 	and.w	r5, r1, #4
        authen = entry->ha_flags & BLE_ATT_F_READ_AUTHEN;
   1bf62:	f001 0608 	and.w	r6, r1, #8
        author = entry->ha_flags & BLE_ATT_F_READ_AUTHOR;
   1bf66:	f001 0110 	and.w	r1, r1, #16
    if (!enc && !authen && !author) {
   1bf6a:	b90d      	cbnz	r5, 1bf70 <ble_att_svr_check_perms+0x22>
   1bf6c:	b906      	cbnz	r6, 1bf70 <ble_att_svr_check_perms+0x22>
   1bf6e:	b1c9      	cbz	r1, 1bfa4 <ble_att_svr_check_perms+0x56>
   1bf70:	4698      	mov	r8, r3
   1bf72:	4614      	mov	r4, r2
   1bf74:	4607      	mov	r7, r0
    ble_att_svr_get_sec_state(conn_handle, &sec_state);
   1bf76:	a925      	add	r1, sp, #148	; 0x94
   1bf78:	f7ff ffdc 	bl	1bf34 <ble_att_svr_get_sec_state>
    if ((enc || authen) && !sec_state.encrypted) {
   1bf7c:	b905      	cbnz	r5, 1bf80 <ble_att_svr_check_perms+0x32>
   1bf7e:	b126      	cbz	r6, 1bf8a <ble_att_svr_check_perms+0x3c>
   1bf80:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   1bf84:	f013 0f01 	tst.w	r3, #1
   1bf88:	d023      	beq.n	1bfd2 <ble_att_svr_check_perms+0x84>
    if (authen && !sec_state.authenticated) {
   1bf8a:	b126      	cbz	r6, 1bf96 <ble_att_svr_check_perms+0x48>
   1bf8c:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   1bf90:	f013 0f02 	tst.w	r3, #2
   1bf94:	d058      	beq.n	1c048 <ble_att_svr_check_perms+0xfa>
    if (entry->ha_min_key_size > sec_state.key_size) {
   1bf96:	7a63      	ldrb	r3, [r4, #9]
   1bf98:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
   1bf9c:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   1bfa0:	d858      	bhi.n	1c054 <ble_att_svr_check_perms+0x106>
    return 0;
   1bfa2:	2100      	movs	r1, #0
}
   1bfa4:	4608      	mov	r0, r1
   1bfa6:	b026      	add	sp, #152	; 0x98
   1bfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *out_att_err = BLE_ATT_ERR_READ_NOT_PERMITTED;
   1bfac:	2202      	movs	r2, #2
   1bfae:	701a      	strb	r2, [r3, #0]
            return BLE_HS_EREJECT;
   1bfb0:	2110      	movs	r1, #16
   1bfb2:	e7f7      	b.n	1bfa4 <ble_att_svr_check_perms+0x56>
        if (!(entry->ha_flags & BLE_ATT_F_WRITE)) {
   1bfb4:	7a11      	ldrb	r1, [r2, #8]
   1bfb6:	f011 0f02 	tst.w	r1, #2
   1bfba:	d006      	beq.n	1bfca <ble_att_svr_check_perms+0x7c>
        enc = entry->ha_flags & BLE_ATT_F_WRITE_ENC;
   1bfbc:	f001 0520 	and.w	r5, r1, #32
        authen = entry->ha_flags & BLE_ATT_F_WRITE_AUTHEN;
   1bfc0:	f001 0640 	and.w	r6, r1, #64	; 0x40
        author = entry->ha_flags & BLE_ATT_F_WRITE_AUTHOR;
   1bfc4:	f001 0180 	and.w	r1, r1, #128	; 0x80
   1bfc8:	e7cf      	b.n	1bf6a <ble_att_svr_check_perms+0x1c>
            *out_att_err = BLE_ATT_ERR_WRITE_NOT_PERMITTED;
   1bfca:	2203      	movs	r2, #3
   1bfcc:	701a      	strb	r2, [r3, #0]
            return BLE_HS_EREJECT;
   1bfce:	2110      	movs	r1, #16
   1bfd0:	e7e8      	b.n	1bfa4 <ble_att_svr_check_perms+0x56>
        ble_hs_lock();
   1bfd2:	f7fa fc93 	bl	168fc <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   1bfd6:	4638      	mov	r0, r7
   1bfd8:	f7fb fa66 	bl	174a8 <ble_hs_conn_find>
        if (conn != NULL) {
   1bfdc:	b1d8      	cbz	r0, 1c016 <ble_att_svr_check_perms+0xc8>
            ble_hs_conn_addrs(conn, &addrs);
   1bfde:	a901      	add	r1, sp, #4
   1bfe0:	f7fb fa9a 	bl	17518 <ble_hs_conn_addrs>
            memset(&key_sec, 0, sizeof key_sec);
   1bfe4:	2300      	movs	r3, #0
   1bfe6:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
   1bfea:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
   1bfee:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
   1bff2:	f8cd 3032 	str.w	r3, [sp, #50]	; 0x32
   1bff6:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   1bffa:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   1bffe:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            key_sec.peer_addr = addrs.peer_id_addr;
   1c002:	ab26      	add	r3, sp, #152	; 0x98
   1c004:	f853 0d8d 	ldr.w	r0, [r3, #-141]!
   1c008:	9008      	str	r0, [sp, #32]
   1c00a:	889a      	ldrh	r2, [r3, #4]
   1c00c:	799b      	ldrb	r3, [r3, #6]
   1c00e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   1c012:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        ble_hs_unlock();
   1c016:	f7fa fc75 	bl	16904 <ble_hs_unlock>
        rc = ble_store_read_peer_sec(&key_sec, &value_sec);
   1c01a:	a910      	add	r1, sp, #64	; 0x40
   1c01c:	a808      	add	r0, sp, #32
   1c01e:	f7ff f9dc 	bl	1b3da <ble_store_read_peer_sec>
        if (rc == 0 && value_sec.ltk_present) {
   1c022:	b940      	cbnz	r0, 1c036 <ble_att_svr_check_perms+0xe8>
   1c024:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   1c028:	f013 0f01 	tst.w	r3, #1
   1c02c:	d003      	beq.n	1c036 <ble_att_svr_check_perms+0xe8>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_ENC;
   1c02e:	230f      	movs	r3, #15
   1c030:	f888 3000 	strb.w	r3, [r8]
   1c034:	e002      	b.n	1c03c <ble_att_svr_check_perms+0xee>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   1c036:	2305      	movs	r3, #5
   1c038:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   1c03c:	f898 1000 	ldrb.w	r1, [r8]
   1c040:	b171      	cbz	r1, 1c060 <ble_att_svr_check_perms+0x112>
   1c042:	f501 7180 	add.w	r1, r1, #256	; 0x100
   1c046:	e7ad      	b.n	1bfa4 <ble_att_svr_check_perms+0x56>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   1c048:	2305      	movs	r3, #5
   1c04a:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   1c04e:	f240 1105 	movw	r1, #261	; 0x105
   1c052:	e7a7      	b.n	1bfa4 <ble_att_svr_check_perms+0x56>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_KEY_SZ;
   1c054:	230c      	movs	r3, #12
   1c056:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   1c05a:	f44f 7186 	mov.w	r1, #268	; 0x10c
   1c05e:	e7a1      	b.n	1bfa4 <ble_att_svr_check_perms+0x56>
        return BLE_HS_ATT_ERR(*out_att_err);
   1c060:	2100      	movs	r1, #0
   1c062:	e79f      	b.n	1bfa4 <ble_att_svr_check_perms+0x56>

0001c064 <ble_att_svr_read>:
{
   1c064:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c066:	b087      	sub	sp, #28
   1c068:	4605      	mov	r5, r0
   1c06a:	460c      	mov	r4, r1
   1c06c:	4616      	mov	r6, r2
   1c06e:	9303      	str	r3, [sp, #12]
    att_err = 0;    /* Silence gcc warning. */
   1c070:	2300      	movs	r3, #0
   1c072:	f88d 3017 	strb.w	r3, [sp, #23]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   1c076:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c07a:	4298      	cmp	r0, r3
   1c07c:	d117      	bne.n	1c0ae <ble_att_svr_read+0x4a>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   1c07e:	68e7      	ldr	r7, [r4, #12]
   1c080:	8961      	ldrh	r1, [r4, #10]
   1c082:	6923      	ldr	r3, [r4, #16]
   1c084:	9301      	str	r3, [sp, #4]
   1c086:	ab03      	add	r3, sp, #12
   1c088:	9300      	str	r3, [sp, #0]
   1c08a:	4633      	mov	r3, r6
   1c08c:	2201      	movs	r2, #1
   1c08e:	4628      	mov	r0, r5
   1c090:	47b8      	blx	r7
    if (rc != 0) {
   1c092:	4603      	mov	r3, r0
   1c094:	b140      	cbz	r0, 1c0a8 <ble_att_svr_read+0x44>
        att_err = rc;
   1c096:	f88d 0017 	strb.w	r0, [sp, #23]
        rc = BLE_HS_EAPP;
   1c09a:	2309      	movs	r3, #9
    if (out_att_err != NULL) {
   1c09c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1c09e:	b11a      	cbz	r2, 1c0a8 <ble_att_svr_read+0x44>
        *out_att_err = att_err;
   1c0a0:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1c0a4:	990c      	ldr	r1, [sp, #48]	; 0x30
   1c0a6:	700a      	strb	r2, [r1, #0]
}
   1c0a8:	4618      	mov	r0, r3
   1c0aa:	b007      	add	sp, #28
   1c0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = ble_att_svr_check_perms(conn_handle, 1, entry, &att_err);
   1c0ae:	f10d 0317 	add.w	r3, sp, #23
   1c0b2:	460a      	mov	r2, r1
   1c0b4:	2101      	movs	r1, #1
   1c0b6:	f7ff ff4a 	bl	1bf4e <ble_att_svr_check_perms>
        if (rc != 0) {
   1c0ba:	4603      	mov	r3, r0
   1c0bc:	2800      	cmp	r0, #0
   1c0be:	d1ed      	bne.n	1c09c <ble_att_svr_read+0x38>
   1c0c0:	e7dd      	b.n	1c07e <ble_att_svr_read+0x1a>

0001c0c2 <ble_att_svr_write>:
{
   1c0c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c0c6:	b085      	sub	sp, #20
   1c0c8:	4605      	mov	r5, r0
   1c0ca:	460c      	mov	r4, r1
   1c0cc:	4691      	mov	r9, r2
   1c0ce:	4698      	mov	r8, r3
   1c0d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    uint8_t att_err = 0;
   1c0d2:	2300      	movs	r3, #0
   1c0d4:	f88d 300f 	strb.w	r3, [sp, #15]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   1c0d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c0dc:	4298      	cmp	r0, r3
   1c0de:	d113      	bne.n	1c108 <ble_att_svr_write+0x46>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   1c0e0:	68e7      	ldr	r7, [r4, #12]
   1c0e2:	8961      	ldrh	r1, [r4, #10]
   1c0e4:	6923      	ldr	r3, [r4, #16]
   1c0e6:	9301      	str	r3, [sp, #4]
   1c0e8:	f8cd 8000 	str.w	r8, [sp]
   1c0ec:	464b      	mov	r3, r9
   1c0ee:	2202      	movs	r2, #2
   1c0f0:	4628      	mov	r0, r5
   1c0f2:	47b8      	blx	r7
    if (rc != 0) {
   1c0f4:	4603      	mov	r3, r0
   1c0f6:	b988      	cbnz	r0, 1c11c <ble_att_svr_write+0x5a>
    if (out_att_err != NULL) {
   1c0f8:	b116      	cbz	r6, 1c100 <ble_att_svr_write+0x3e>
        *out_att_err = att_err;
   1c0fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1c0fe:	7032      	strb	r2, [r6, #0]
}
   1c100:	4618      	mov	r0, r3
   1c102:	b005      	add	sp, #20
   1c104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = ble_att_svr_check_perms(conn_handle, 0, entry, &att_err);
   1c108:	f10d 030f 	add.w	r3, sp, #15
   1c10c:	460a      	mov	r2, r1
   1c10e:	2100      	movs	r1, #0
   1c110:	f7ff ff1d 	bl	1bf4e <ble_att_svr_check_perms>
        if (rc != 0) {
   1c114:	4603      	mov	r3, r0
   1c116:	2800      	cmp	r0, #0
   1c118:	d1ee      	bne.n	1c0f8 <ble_att_svr_write+0x36>
   1c11a:	e7e1      	b.n	1c0e0 <ble_att_svr_write+0x1e>
        att_err = rc;
   1c11c:	f88d 000f 	strb.w	r0, [sp, #15]
        rc = BLE_HS_EAPP;
   1c120:	2309      	movs	r3, #9
        goto done;
   1c122:	e7e9      	b.n	1c0f8 <ble_att_svr_write+0x36>

0001c124 <ble_att_svr_pullup_req_base>:
{
   1c124:	b510      	push	{r4, lr}
   1c126:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, base_len);
   1c128:	f7fc fb88 	bl	1883c <ble_hs_mbuf_pullup_base>
    if (rc == BLE_HS_ENOMEM) {
   1c12c:	2806      	cmp	r0, #6
   1c12e:	d003      	beq.n	1c138 <ble_att_svr_pullup_req_base+0x14>
        att_err = 0;
   1c130:	2300      	movs	r3, #0
    if (out_att_err != NULL) {
   1c132:	b104      	cbz	r4, 1c136 <ble_att_svr_pullup_req_base+0x12>
        *out_att_err = att_err;
   1c134:	7023      	strb	r3, [r4, #0]
}
   1c136:	bd10      	pop	{r4, pc}
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1c138:	2311      	movs	r3, #17
   1c13a:	e7fa      	b.n	1c132 <ble_att_svr_pullup_req_base+0xe>

0001c13c <ble_att_svr_build_mtu_rsp>:
{
   1c13c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c140:	b083      	sub	sp, #12
   1c142:	4605      	mov	r5, r0
   1c144:	4688      	mov	r8, r1
   1c146:	4617      	mov	r7, r2
   1c148:	461e      	mov	r6, r3
    *att_err = 0; /* Silence unnecessary warning. */
   1c14a:	2400      	movs	r4, #0
   1c14c:	701c      	strb	r4, [r3, #0]
    ble_hs_lock();
   1c14e:	f7fa fbd5 	bl	168fc <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   1c152:	aa01      	add	r2, sp, #4
   1c154:	4621      	mov	r1, r4
   1c156:	4628      	mov	r0, r5
   1c158:	f7ff fb0f 	bl	1b77a <ble_att_conn_chan_find>
    if (rc == 0) {
   1c15c:	4605      	mov	r5, r0
   1c15e:	b910      	cbnz	r0, 1c166 <ble_att_svr_build_mtu_rsp+0x2a>
        mtu = chan->my_mtu;
   1c160:	9b01      	ldr	r3, [sp, #4]
   1c162:	f8b3 900a 	ldrh.w	r9, [r3, #10]
    ble_hs_unlock();
   1c166:	f7fa fbcd 	bl	16904 <ble_hs_unlock>
    if (rc != 0) {
   1c16a:	b12d      	cbz	r5, 1c178 <ble_att_svr_build_mtu_rsp+0x3c>
    txom = NULL;
   1c16c:	2400      	movs	r4, #0
    *out_txom = txom;
   1c16e:	603c      	str	r4, [r7, #0]
}
   1c170:	4628      	mov	r0, r5
   1c172:	b003      	add	sp, #12
   1c174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    txom = *rxom;
   1c178:	f8d8 4000 	ldr.w	r4, [r8]
    *rxom = NULL;
   1c17c:	2300      	movs	r3, #0
   1c17e:	f8c8 3000 	str.w	r3, [r8]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1c182:	8a21      	ldrh	r1, [r4, #16]
   1c184:	4620      	mov	r0, r4
   1c186:	f7f4 ffde 	bl	11146 <os_mbuf_adj>
    cmd = ble_att_cmd_prepare(BLE_ATT_OP_MTU_RSP, sizeof(*cmd), txom);
   1c18a:	4622      	mov	r2, r4
   1c18c:	2102      	movs	r1, #2
   1c18e:	2003      	movs	r0, #3
   1c190:	f7ff fe2e 	bl	1bdf0 <ble_att_cmd_prepare>
    if (cmd == NULL) {
   1c194:	b110      	cbz	r0, 1c19c <ble_att_svr_build_mtu_rsp+0x60>
    cmd->bamc_mtu = htole16(mtu);
   1c196:	f8a0 9000 	strh.w	r9, [r0]
   1c19a:	e7e8      	b.n	1c16e <ble_att_svr_build_mtu_rsp+0x32>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1c19c:	2311      	movs	r3, #17
   1c19e:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   1c1a0:	2506      	movs	r5, #6
        goto done;
   1c1a2:	e7e4      	b.n	1c16e <ble_att_svr_build_mtu_rsp+0x32>

0001c1a4 <ble_att_svr_pkt>:
{
   1c1a4:	b570      	push	{r4, r5, r6, lr}
   1c1a6:	4605      	mov	r5, r0
   1c1a8:	460c      	mov	r4, r1
   1c1aa:	4616      	mov	r6, r2
    *out_txom = ble_hs_mbuf_l2cap_pkt();
   1c1ac:	f7fc fb28 	bl	18800 <ble_hs_mbuf_l2cap_pkt>
   1c1b0:	6020      	str	r0, [r4, #0]
    if (*out_txom != NULL) {
   1c1b2:	b108      	cbz	r0, 1c1b8 <ble_att_svr_pkt+0x14>
        return 0;
   1c1b4:	2000      	movs	r0, #0
}
   1c1b6:	bd70      	pop	{r4, r5, r6, pc}
    *out_txom = *rxom;
   1c1b8:	682b      	ldr	r3, [r5, #0]
   1c1ba:	6023      	str	r3, [r4, #0]
    *rxom = NULL;
   1c1bc:	2300      	movs	r3, #0
   1c1be:	602b      	str	r3, [r5, #0]
    *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1c1c0:	2311      	movs	r3, #17
   1c1c2:	7033      	strb	r3, [r6, #0]
    return BLE_HS_ENOMEM;
   1c1c4:	2006      	movs	r0, #6
   1c1c6:	e7f6      	b.n	1c1b6 <ble_att_svr_pkt+0x12>

0001c1c8 <ble_att_svr_build_write_rsp>:
{
   1c1c8:	b570      	push	{r4, r5, r6, lr}
   1c1ca:	b082      	sub	sp, #8
   1c1cc:	460d      	mov	r5, r1
   1c1ce:	4616      	mov	r6, r2
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   1c1d0:	a901      	add	r1, sp, #4
   1c1d2:	f7ff ffe7 	bl	1c1a4 <ble_att_svr_pkt>
    if (rc != 0) {
   1c1d6:	4604      	mov	r4, r0
   1c1d8:	b120      	cbz	r0, 1c1e4 <ble_att_svr_build_write_rsp+0x1c>
    *out_txom = txom;
   1c1da:	9b01      	ldr	r3, [sp, #4]
   1c1dc:	602b      	str	r3, [r5, #0]
}
   1c1de:	4620      	mov	r0, r4
   1c1e0:	b002      	add	sp, #8
   1c1e2:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_WRITE_RSP, 0, txom) == NULL) {
   1c1e4:	9a01      	ldr	r2, [sp, #4]
   1c1e6:	2100      	movs	r1, #0
   1c1e8:	2013      	movs	r0, #19
   1c1ea:	f7ff fe01 	bl	1bdf0 <ble_att_cmd_prepare>
   1c1ee:	2800      	cmp	r0, #0
   1c1f0:	d1f3      	bne.n	1c1da <ble_att_svr_build_write_rsp+0x12>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1c1f2:	2311      	movs	r3, #17
   1c1f4:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   1c1f6:	2406      	movs	r4, #6
        goto done;
   1c1f8:	e7ef      	b.n	1c1da <ble_att_svr_build_write_rsp+0x12>

0001c1fa <ble_att_svr_build_indicate_rsp>:
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_att_svr_build_indicate_rsp(struct os_mbuf **rxom,
                               struct os_mbuf **out_txom, uint8_t *out_att_err)
{
   1c1fa:	b570      	push	{r4, r5, r6, lr}
   1c1fc:	b082      	sub	sp, #8
   1c1fe:	460d      	mov	r5, r1
   1c200:	4616      	mov	r6, r2

    /* Allocate a new buffer for the response.  An indicate response never
     * reuses the request buffer.  See the note at the top of this file for
     * details.
     */
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   1c202:	a901      	add	r1, sp, #4
   1c204:	f7ff ffce 	bl	1c1a4 <ble_att_svr_pkt>
    if (rc != 0) {
   1c208:	4604      	mov	r4, r0
   1c20a:	b120      	cbz	r0, 1c216 <ble_att_svr_build_indicate_rsp+0x1c>
    }

    rc = 0;

done:
    *out_txom = txom;
   1c20c:	9b01      	ldr	r3, [sp, #4]
   1c20e:	602b      	str	r3, [r5, #0]
    return rc;
}
   1c210:	4620      	mov	r0, r4
   1c212:	b002      	add	sp, #8
   1c214:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_INDICATE_RSP, 0, txom) == NULL) {
   1c216:	9a01      	ldr	r2, [sp, #4]
   1c218:	2100      	movs	r1, #0
   1c21a:	201e      	movs	r0, #30
   1c21c:	f7ff fde8 	bl	1bdf0 <ble_att_cmd_prepare>
   1c220:	2800      	cmp	r0, #0
   1c222:	d1f3      	bne.n	1c20c <ble_att_svr_build_indicate_rsp+0x12>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1c224:	2311      	movs	r3, #17
   1c226:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   1c228:	2406      	movs	r4, #6
        goto done;
   1c22a:	e7ef      	b.n	1c20c <ble_att_svr_build_indicate_rsp+0x12>

0001c22c <ble_att_svr_fill_info>:
{
   1c22c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c230:	4607      	mov	r7, r0
   1c232:	460e      	mov	r6, r1
   1c234:	4690      	mov	r8, r2
   1c236:	469a      	mov	sl, r3
   1c238:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    *format = 0;
   1c23c:	2500      	movs	r5, #0
   1c23e:	f889 5000 	strb.w	r5, [r9]
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1c242:	4b25      	ldr	r3, [pc, #148]	; (1c2d8 <ble_att_svr_fill_info+0xac>)
   1c244:	681c      	ldr	r4, [r3, #0]
   1c246:	e022      	b.n	1c28e <ble_att_svr_fill_info+0x62>
                if (*format == 0) {
   1c248:	f899 3000 	ldrb.w	r3, [r9]
   1c24c:	b923      	cbnz	r3, 1c258 <ble_att_svr_fill_info+0x2c>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT;
   1c24e:	2301      	movs	r3, #1
   1c250:	f889 3000 	strb.w	r3, [r9]
                entry_sz = 4;
   1c254:	2104      	movs	r1, #4
   1c256:	e006      	b.n	1c266 <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT) {
   1c258:	2b01      	cmp	r3, #1
   1c25a:	d132      	bne.n	1c2c2 <ble_att_svr_fill_info+0x96>
                entry_sz = 4;
   1c25c:	2104      	movs	r1, #4
   1c25e:	e002      	b.n	1c266 <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT) {
   1c260:	2b02      	cmp	r3, #2
   1c262:	d130      	bne.n	1c2c6 <ble_att_svr_fill_info+0x9a>
                entry_sz = 18;
   1c264:	2112      	movs	r1, #18
            if (OS_MBUF_PKTLEN(om) + entry_sz > mtu) {
   1c266:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   1c26a:	440b      	add	r3, r1
   1c26c:	4553      	cmp	r3, sl
   1c26e:	dc2c      	bgt.n	1c2ca <ble_att_svr_fill_info+0x9e>
            buf = os_mbuf_extend(om, entry_sz);
   1c270:	4640      	mov	r0, r8
   1c272:	f7f5 f91d 	bl	114b0 <os_mbuf_extend>
            if (buf == NULL) {
   1c276:	4683      	mov	fp, r0
   1c278:	b348      	cbz	r0, 1c2ce <ble_att_svr_fill_info+0xa2>
            put_le16(buf + 0, ha->ha_handle_id);
   1c27a:	8961      	ldrh	r1, [r4, #10]
   1c27c:	f002 fc51 	bl	1eb22 <put_le16>
            ble_uuid_flat(ha->ha_uuid, buf + 2);
   1c280:	f10b 0102 	add.w	r1, fp, #2
   1c284:	6860      	ldr	r0, [r4, #4]
   1c286:	f7ff f9cb 	bl	1b620 <ble_uuid_flat>
            num_entries++;
   1c28a:	3501      	adds	r5, #1
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1c28c:	6824      	ldr	r4, [r4, #0]
   1c28e:	b18c      	cbz	r4, 1c2b4 <ble_att_svr_fill_info+0x88>
        if (ha->ha_handle_id > end_handle) {
   1c290:	8963      	ldrh	r3, [r4, #10]
   1c292:	42b3      	cmp	r3, r6
   1c294:	d813      	bhi.n	1c2be <ble_att_svr_fill_info+0x92>
        if (ha->ha_handle_id >= start_handle) {
   1c296:	42bb      	cmp	r3, r7
   1c298:	d3f8      	bcc.n	1c28c <ble_att_svr_fill_info+0x60>
            if (ha->ha_uuid->type == BLE_UUID_TYPE_16) {
   1c29a:	6863      	ldr	r3, [r4, #4]
   1c29c:	781b      	ldrb	r3, [r3, #0]
   1c29e:	2b10      	cmp	r3, #16
   1c2a0:	d0d2      	beq.n	1c248 <ble_att_svr_fill_info+0x1c>
                if (*format == 0) {
   1c2a2:	f899 3000 	ldrb.w	r3, [r9]
   1c2a6:	2b00      	cmp	r3, #0
   1c2a8:	d1da      	bne.n	1c260 <ble_att_svr_fill_info+0x34>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT;
   1c2aa:	2302      	movs	r3, #2
   1c2ac:	f889 3000 	strb.w	r3, [r9]
                entry_sz = 18;
   1c2b0:	2112      	movs	r1, #18
   1c2b2:	e7d8      	b.n	1c266 <ble_att_svr_fill_info+0x3a>
    rc = 0;
   1c2b4:	2000      	movs	r0, #0
    if (rc == 0 && num_entries == 0) {
   1c2b6:	b900      	cbnz	r0, 1c2ba <ble_att_svr_fill_info+0x8e>
   1c2b8:	b15d      	cbz	r5, 1c2d2 <ble_att_svr_fill_info+0xa6>
}
   1c2ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            rc = 0;
   1c2be:	2000      	movs	r0, #0
   1c2c0:	e7f9      	b.n	1c2b6 <ble_att_svr_fill_info+0x8a>
                    rc = 0;
   1c2c2:	2000      	movs	r0, #0
   1c2c4:	e7f7      	b.n	1c2b6 <ble_att_svr_fill_info+0x8a>
                    rc = 0;
   1c2c6:	2000      	movs	r0, #0
   1c2c8:	e7f5      	b.n	1c2b6 <ble_att_svr_fill_info+0x8a>
                rc = 0;
   1c2ca:	2000      	movs	r0, #0
   1c2cc:	e7f3      	b.n	1c2b6 <ble_att_svr_fill_info+0x8a>
                rc = BLE_HS_ENOMEM;
   1c2ce:	2006      	movs	r0, #6
   1c2d0:	e7f1      	b.n	1c2b6 <ble_att_svr_fill_info+0x8a>
        return BLE_HS_ENOENT;
   1c2d2:	2005      	movs	r0, #5
   1c2d4:	e7f1      	b.n	1c2ba <ble_att_svr_fill_info+0x8e>
   1c2d6:	bf00      	nop
   1c2d8:	20002c78 	.word	0x20002c78

0001c2dc <ble_att_svr_build_find_info_rsp>:
{
   1c2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c2e0:	b082      	sub	sp, #8
   1c2e2:	4680      	mov	r8, r0
   1c2e4:	460d      	mov	r5, r1
   1c2e6:	4616      	mov	r6, r2
    txom = *rxom;
   1c2e8:	681c      	ldr	r4, [r3, #0]
    *rxom = NULL;
   1c2ea:	2200      	movs	r2, #0
   1c2ec:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1c2ee:	8a21      	ldrh	r1, [r4, #16]
   1c2f0:	4620      	mov	r0, r4
   1c2f2:	f7f4 ff28 	bl	11146 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_FIND_INFO_RSP, sizeof(*rsp), txom);
   1c2f6:	4622      	mov	r2, r4
   1c2f8:	2101      	movs	r1, #1
   1c2fa:	2005      	movs	r0, #5
   1c2fc:	f7ff fd78 	bl	1bdf0 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1c300:	b190      	cbz	r0, 1c328 <ble_att_svr_build_find_info_rsp+0x4c>
   1c302:	4607      	mov	r7, r0
    mtu = ble_att_mtu(conn_handle);
   1c304:	4640      	mov	r0, r8
   1c306:	f7ff fa62 	bl	1b7ce <ble_att_mtu>
    rc = ble_att_svr_fill_info(start_handle, end_handle, txom, mtu,
   1c30a:	9700      	str	r7, [sp, #0]
   1c30c:	4603      	mov	r3, r0
   1c30e:	4622      	mov	r2, r4
   1c310:	4631      	mov	r1, r6
   1c312:	4628      	mov	r0, r5
   1c314:	f7ff ff8a 	bl	1c22c <ble_att_svr_fill_info>
    if (rc != 0) {
   1c318:	4603      	mov	r3, r0
   1c31a:	b950      	cbnz	r0, 1c332 <ble_att_svr_build_find_info_rsp+0x56>
    *out_txom = txom;
   1c31c:	9a08      	ldr	r2, [sp, #32]
   1c31e:	6014      	str	r4, [r2, #0]
}
   1c320:	4618      	mov	r0, r3
   1c322:	b002      	add	sp, #8
   1c324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1c328:	2311      	movs	r3, #17
   1c32a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c32c:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1c32e:	2306      	movs	r3, #6
        goto done;
   1c330:	e7f4      	b.n	1c31c <ble_att_svr_build_find_info_rsp+0x40>
        *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1c332:	230a      	movs	r3, #10
   1c334:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c336:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOENT;
   1c338:	2305      	movs	r3, #5
        goto done;
   1c33a:	e7ef      	b.n	1c31c <ble_att_svr_build_find_info_rsp+0x40>

0001c33c <ble_att_svr_read_group_type_entry_write>:
{
   1c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c33e:	9d06      	ldr	r5, [sp, #24]
    if (service_uuid->type == BLE_UUID_TYPE_16) {
   1c340:	782c      	ldrb	r4, [r5, #0]
   1c342:	2c10      	cmp	r4, #16
   1c344:	d018      	beq.n	1c378 <ble_att_svr_read_group_type_entry_write+0x3c>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   1c346:	2614      	movs	r6, #20
    if (OS_MBUF_PKTLEN(om) + len > mtu) {
   1c348:	8a04      	ldrh	r4, [r0, #16]
   1c34a:	4434      	add	r4, r6
   1c34c:	428c      	cmp	r4, r1
   1c34e:	dc15      	bgt.n	1c37c <ble_att_svr_read_group_type_entry_write+0x40>
   1c350:	461c      	mov	r4, r3
   1c352:	4617      	mov	r7, r2
    buf = os_mbuf_extend(om, len);
   1c354:	4631      	mov	r1, r6
   1c356:	f7f5 f8ab 	bl	114b0 <os_mbuf_extend>
    if (buf == NULL) {
   1c35a:	4606      	mov	r6, r0
   1c35c:	b180      	cbz	r0, 1c380 <ble_att_svr_read_group_type_entry_write+0x44>
    put_le16(buf + 0, start_group_handle);
   1c35e:	4639      	mov	r1, r7
   1c360:	f002 fbdf 	bl	1eb22 <put_le16>
    put_le16(buf + 2, end_group_handle);
   1c364:	4621      	mov	r1, r4
   1c366:	1cb0      	adds	r0, r6, #2
   1c368:	f002 fbdb 	bl	1eb22 <put_le16>
    ble_uuid_flat(service_uuid, buf + 4);
   1c36c:	1d31      	adds	r1, r6, #4
   1c36e:	4628      	mov	r0, r5
   1c370:	f7ff f956 	bl	1b620 <ble_uuid_flat>
    return 0;
   1c374:	2000      	movs	r0, #0
   1c376:	e002      	b.n	1c37e <ble_att_svr_read_group_type_entry_write+0x42>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   1c378:	2606      	movs	r6, #6
   1c37a:	e7e5      	b.n	1c348 <ble_att_svr_read_group_type_entry_write+0xc>
        return BLE_HS_EMSGSIZE;
   1c37c:	2004      	movs	r0, #4
}
   1c37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1c380:	2006      	movs	r0, #6
   1c382:	e7fc      	b.n	1c37e <ble_att_svr_read_group_type_entry_write+0x42>

0001c384 <ble_att_svr_is_valid_find_group_type>:
{
   1c384:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   1c386:	f7ff f90f 	bl	1b5a8 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1c38a:	f5a0 5320 	sub.w	r3, r0, #10240	; 0x2800
   1c38e:	b29b      	uxth	r3, r3
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   1c390:	2b01      	cmp	r3, #1
   1c392:	d907      	bls.n	1c3a4 <ble_att_svr_is_valid_find_group_type+0x20>
   1c394:	f642 0303 	movw	r3, #10243	; 0x2803
   1c398:	4298      	cmp	r0, r3
   1c39a:	d001      	beq.n	1c3a0 <ble_att_svr_is_valid_find_group_type+0x1c>
   1c39c:	2000      	movs	r0, #0
}
   1c39e:	bd08      	pop	{r3, pc}
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   1c3a0:	2001      	movs	r0, #1
   1c3a2:	e7fc      	b.n	1c39e <ble_att_svr_is_valid_find_group_type+0x1a>
   1c3a4:	2001      	movs	r0, #1
   1c3a6:	e7fa      	b.n	1c39e <ble_att_svr_is_valid_find_group_type+0x1a>

0001c3a8 <ble_att_svr_is_valid_group_end>:
    if (uuid_group->type != BLE_UUID_TYPE_16) {
   1c3a8:	7803      	ldrb	r3, [r0, #0]
   1c3aa:	2b10      	cmp	r3, #16
   1c3ac:	d001      	beq.n	1c3b2 <ble_att_svr_is_valid_group_end+0xa>
        return 1;
   1c3ae:	2001      	movs	r0, #1
   1c3b0:	4770      	bx	lr
    if (uuid->type != BLE_UUID_TYPE_16) {
   1c3b2:	780b      	ldrb	r3, [r1, #0]
   1c3b4:	2b10      	cmp	r3, #16
   1c3b6:	d001      	beq.n	1c3bc <ble_att_svr_is_valid_group_end+0x14>
        return 0;
   1c3b8:	2000      	movs	r0, #0
}
   1c3ba:	4770      	bx	lr
{
   1c3bc:	b510      	push	{r4, lr}
   1c3be:	460c      	mov	r4, r1
    switch (ble_uuid_u16(uuid_group)) {
   1c3c0:	f7ff f8f2 	bl	1b5a8 <ble_uuid_u16>
   1c3c4:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
   1c3c8:	d316      	bcc.n	1c3f8 <ble_att_svr_is_valid_group_end+0x50>
   1c3ca:	f642 0301 	movw	r3, #10241	; 0x2801
   1c3ce:	4298      	cmp	r0, r3
   1c3d0:	d907      	bls.n	1c3e2 <ble_att_svr_is_valid_group_end+0x3a>
   1c3d2:	f642 0303 	movw	r3, #10243	; 0x2803
   1c3d6:	4298      	cmp	r0, r3
   1c3d8:	d10e      	bne.n	1c3f8 <ble_att_svr_is_valid_group_end+0x50>
        return ble_att_svr_is_valid_find_group_type(uuid);
   1c3da:	4620      	mov	r0, r4
   1c3dc:	f7ff ffd2 	bl	1c384 <ble_att_svr_is_valid_find_group_type>
   1c3e0:	e009      	b.n	1c3f6 <ble_att_svr_is_valid_group_end+0x4e>
        uuid16 = ble_uuid_u16(uuid);
   1c3e2:	4620      	mov	r0, r4
   1c3e4:	f7ff f8e0 	bl	1b5a8 <ble_uuid_u16>
        return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1c3e8:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   1c3ec:	b280      	uxth	r0, r0
   1c3ee:	2801      	cmp	r0, #1
   1c3f0:	bf8c      	ite	hi
   1c3f2:	2000      	movhi	r0, #0
   1c3f4:	2001      	movls	r0, #1
}
   1c3f6:	bd10      	pop	{r4, pc}
        return 1;
   1c3f8:	2001      	movs	r0, #1
   1c3fa:	e7fc      	b.n	1c3f6 <ble_att_svr_is_valid_group_end+0x4e>

0001c3fc <ble_att_svr_is_valid_read_group_type>:
{
   1c3fc:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   1c3fe:	f7ff f8d3 	bl	1b5a8 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1c402:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   1c406:	b280      	uxth	r0, r0
}
   1c408:	2801      	cmp	r0, #1
   1c40a:	bf8c      	ite	hi
   1c40c:	2000      	movhi	r0, #0
   1c40e:	2001      	movls	r0, #1
   1c410:	bd08      	pop	{r3, pc}

0001c412 <ble_att_svr_read_flat>:
{
   1c412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c416:	b082      	sub	sp, #8
   1c418:	4605      	mov	r5, r0
   1c41a:	460e      	mov	r6, r1
   1c41c:	4617      	mov	r7, r2
   1c41e:	4698      	mov	r8, r3
    om = ble_hs_mbuf_l2cap_pkt();
   1c420:	f7fc f9ee 	bl	18800 <ble_hs_mbuf_l2cap_pkt>
    if (om == NULL) {
   1c424:	4604      	mov	r4, r0
   1c426:	b1d0      	cbz	r0, 1c45e <ble_att_svr_read_flat+0x4c>
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   1c428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c42a:	9300      	str	r3, [sp, #0]
   1c42c:	4603      	mov	r3, r0
   1c42e:	463a      	mov	r2, r7
   1c430:	4631      	mov	r1, r6
   1c432:	4628      	mov	r0, r5
   1c434:	f7ff fe16 	bl	1c064 <ble_att_svr_read>
    if (rc != 0) {
   1c438:	4605      	mov	r5, r0
   1c43a:	b988      	cbnz	r0, 1c460 <ble_att_svr_read_flat+0x4e>
    len = OS_MBUF_PKTLEN(om);
   1c43c:	8a26      	ldrh	r6, [r4, #16]
    if (len > max_len) {
   1c43e:	4546      	cmp	r6, r8
   1c440:	d808      	bhi.n	1c454 <ble_att_svr_read_flat+0x42>
    rc = os_mbuf_copydata(om, 0, len, dst);
   1c442:	9b08      	ldr	r3, [sp, #32]
   1c444:	4632      	mov	r2, r6
   1c446:	2100      	movs	r1, #0
   1c448:	4620      	mov	r0, r4
   1c44a:	f7f4 fe4f 	bl	110ec <os_mbuf_copydata>
    *out_len = len;
   1c44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c450:	801e      	strh	r6, [r3, #0]
   1c452:	e005      	b.n	1c460 <ble_att_svr_read_flat+0x4e>
        *out_att_err = BLE_ATT_ERR_UNLIKELY;
   1c454:	230e      	movs	r3, #14
   1c456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c458:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_EMSGSIZE;
   1c45a:	2504      	movs	r5, #4
        goto done;
   1c45c:	e000      	b.n	1c460 <ble_att_svr_read_flat+0x4e>
        rc = BLE_HS_ENOMEM;
   1c45e:	2506      	movs	r5, #6
    os_mbuf_free_chain(om);
   1c460:	4620      	mov	r0, r4
   1c462:	f7f4 fd3b 	bl	10edc <os_mbuf_free_chain>
}
   1c466:	4628      	mov	r0, r5
   1c468:	b002      	add	sp, #8
   1c46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c46e <ble_att_svr_fill_type_value_entry>:
{
   1c46e:	b530      	push	{r4, r5, lr}
   1c470:	b083      	sub	sp, #12
    rsp_sz = OS_MBUF_PKTHDR(om)->omp_len + 4;
   1c472:	8a04      	ldrh	r4, [r0, #16]
   1c474:	3404      	adds	r4, #4
    if (rsp_sz > mtu) {
   1c476:	429c      	cmp	r4, r3
   1c478:	dd02      	ble.n	1c480 <ble_att_svr_fill_type_value_entry+0x12>
        return 0;
   1c47a:	2000      	movs	r0, #0
}
   1c47c:	b003      	add	sp, #12
   1c47e:	bd30      	pop	{r4, r5, pc}
   1c480:	4615      	mov	r5, r2
   1c482:	4604      	mov	r4, r0
    put_le16(&u16, first);
   1c484:	f10d 0006 	add.w	r0, sp, #6
   1c488:	f002 fb4b 	bl	1eb22 <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   1c48c:	2202      	movs	r2, #2
   1c48e:	f10d 0106 	add.w	r1, sp, #6
   1c492:	4620      	mov	r0, r4
   1c494:	f7f4 fd3e 	bl	10f14 <os_mbuf_append>
    if (rc != 0) {
   1c498:	b968      	cbnz	r0, 1c4b6 <ble_att_svr_fill_type_value_entry+0x48>
    put_le16(&u16, last);
   1c49a:	4629      	mov	r1, r5
   1c49c:	f10d 0006 	add.w	r0, sp, #6
   1c4a0:	f002 fb3f 	bl	1eb22 <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   1c4a4:	2202      	movs	r2, #2
   1c4a6:	f10d 0106 	add.w	r1, sp, #6
   1c4aa:	4620      	mov	r0, r4
   1c4ac:	f7f4 fd32 	bl	10f14 <os_mbuf_append>
    if (rc != 0) {
   1c4b0:	b930      	cbnz	r0, 1c4c0 <ble_att_svr_fill_type_value_entry+0x52>
    return BLE_HS_EAGAIN;
   1c4b2:	2001      	movs	r0, #1
   1c4b4:	e7e2      	b.n	1c47c <ble_att_svr_fill_type_value_entry+0xe>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1c4b6:	2311      	movs	r3, #17
   1c4b8:	9a06      	ldr	r2, [sp, #24]
   1c4ba:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   1c4bc:	2006      	movs	r0, #6
   1c4be:	e7dd      	b.n	1c47c <ble_att_svr_fill_type_value_entry+0xe>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1c4c0:	2311      	movs	r3, #17
   1c4c2:	9a06      	ldr	r2, [sp, #24]
   1c4c4:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   1c4c6:	2006      	movs	r0, #6
   1c4c8:	e7d8      	b.n	1c47c <ble_att_svr_fill_type_value_entry+0xe>
	...

0001c4cc <ble_att_svr_fill_type_value>:
{
   1c4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4d0:	b08d      	sub	sp, #52	; 0x34
   1c4d2:	4683      	mov	fp, r0
   1c4d4:	460e      	mov	r6, r1
   1c4d6:	4690      	mov	r8, r2
   1c4d8:	9305      	str	r3, [sp, #20]
   1c4da:	f8bd a060 	ldrh.w	sl, [sp, #96]	; 0x60
   1c4de:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1c4e2:	4b33      	ldr	r3, [pc, #204]	; (1c5b0 <ble_att_svr_fill_type_value+0xe4>)
   1c4e4:	681c      	ldr	r4, [r3, #0]
    prev = 0;
   1c4e6:	2700      	movs	r7, #0
    first = 0;
   1c4e8:	463d      	mov	r5, r7
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1c4ea:	e015      	b.n	1c518 <ble_att_svr_fill_type_value+0x4c>
            rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   1c4ec:	f8cd 9000 	str.w	r9, [sp]
   1c4f0:	4653      	mov	r3, sl
   1c4f2:	463a      	mov	r2, r7
   1c4f4:	4629      	mov	r1, r5
   1c4f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1c4f8:	f7ff ffb9 	bl	1c46e <ble_att_svr_fill_type_value_entry>
   1c4fc:	4603      	mov	r3, r0
            if (rc != BLE_HS_EAGAIN) {
   1c4fe:	2801      	cmp	r0, #1
   1c500:	d13a      	bne.n	1c578 <ble_att_svr_fill_type_value+0xac>
            if (ha->ha_handle_id > end_handle) {
   1c502:	8963      	ldrh	r3, [r4, #10]
   1c504:	4543      	cmp	r3, r8
   1c506:	d833      	bhi.n	1c570 <ble_att_svr_fill_type_value+0xa4>
            prev = 0;
   1c508:	2700      	movs	r7, #0
            first = 0;
   1c50a:	463d      	mov	r5, r7
        if (ble_uuid_cmp(ha->ha_uuid, &attr_type.u) == 0) {
   1c50c:	a905      	add	r1, sp, #20
   1c50e:	6860      	ldr	r0, [r4, #4]
   1c510:	f7ff f82c 	bl	1b56c <ble_uuid_cmp>
   1c514:	b188      	cbz	r0, 1c53a <ble_att_svr_fill_type_value+0x6e>
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1c516:	6824      	ldr	r4, [r4, #0]
   1c518:	b364      	cbz	r4, 1c574 <ble_att_svr_fill_type_value+0xa8>
        if (ha->ha_handle_id < start_handle) {
   1c51a:	8963      	ldrh	r3, [r4, #10]
   1c51c:	42b3      	cmp	r3, r6
   1c51e:	d3fa      	bcc.n	1c516 <ble_att_svr_fill_type_value+0x4a>
        if (!first && ha->ha_handle_id > end_handle) {
   1c520:	b90d      	cbnz	r5, 1c526 <ble_att_svr_fill_type_value+0x5a>
   1c522:	4543      	cmp	r3, r8
   1c524:	d826      	bhi.n	1c574 <ble_att_svr_fill_type_value+0xa8>
        if (first) {
   1c526:	2d00      	cmp	r5, #0
   1c528:	d0f0      	beq.n	1c50c <ble_att_svr_fill_type_value+0x40>
            if (!ble_att_svr_is_valid_group_end(&attr_type.u, ha->ha_uuid)) {
   1c52a:	6861      	ldr	r1, [r4, #4]
   1c52c:	a805      	add	r0, sp, #20
   1c52e:	f7ff ff3b 	bl	1c3a8 <ble_att_svr_is_valid_group_end>
   1c532:	2800      	cmp	r0, #0
   1c534:	d1da      	bne.n	1c4ec <ble_att_svr_fill_type_value+0x20>
                prev = ha->ha_handle_id;
   1c536:	8967      	ldrh	r7, [r4, #10]
                continue;
   1c538:	e7ed      	b.n	1c516 <ble_att_svr_fill_type_value+0x4a>
            rc = ble_att_svr_read_flat(conn_handle, ha, 0, sizeof buf, buf,
   1c53a:	f8cd 9008 	str.w	r9, [sp, #8]
   1c53e:	f10d 031e 	add.w	r3, sp, #30
   1c542:	9301      	str	r3, [sp, #4]
   1c544:	ab08      	add	r3, sp, #32
   1c546:	9300      	str	r3, [sp, #0]
   1c548:	2310      	movs	r3, #16
   1c54a:	2200      	movs	r2, #0
   1c54c:	4621      	mov	r1, r4
   1c54e:	4658      	mov	r0, fp
   1c550:	f7ff ff5f 	bl	1c412 <ble_att_svr_read_flat>
            if (rc != 0) {
   1c554:	4603      	mov	r3, r0
   1c556:	b978      	cbnz	r0, 1c578 <ble_att_svr_fill_type_value+0xac>
            rc = os_mbuf_cmpf(rxom, sizeof(struct ble_att_find_type_value_req),
   1c558:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1c55c:	aa08      	add	r2, sp, #32
   1c55e:	2106      	movs	r1, #6
   1c560:	9816      	ldr	r0, [sp, #88]	; 0x58
   1c562:	f7f4 fe42 	bl	111ea <os_mbuf_cmpf>
            if (rc == 0) {
   1c566:	2800      	cmp	r0, #0
   1c568:	d1d5      	bne.n	1c516 <ble_att_svr_fill_type_value+0x4a>
                first = ha->ha_handle_id;
   1c56a:	8965      	ldrh	r5, [r4, #10]
                prev = ha->ha_handle_id;
   1c56c:	462f      	mov	r7, r5
   1c56e:	e7d2      	b.n	1c516 <ble_att_svr_fill_type_value+0x4a>
            prev = 0;
   1c570:	2700      	movs	r7, #0
            first = 0;
   1c572:	463d      	mov	r5, r7
    if (first) {
   1c574:	b94d      	cbnz	r5, 1c58a <ble_att_svr_fill_type_value+0xbe>
        rc = 0;
   1c576:	2300      	movs	r3, #0
    any_entries = OS_MBUF_PKTHDR(txom)->omp_len >
   1c578:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1c57a:	8a12      	ldrh	r2, [r2, #16]
    if (rc == 0 && !any_entries) {
   1c57c:	b90b      	cbnz	r3, 1c582 <ble_att_svr_fill_type_value+0xb6>
   1c57e:	2a01      	cmp	r2, #1
   1c580:	d910      	bls.n	1c5a4 <ble_att_svr_fill_type_value+0xd8>
}
   1c582:	4618      	mov	r0, r3
   1c584:	b00d      	add	sp, #52	; 0x34
   1c586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   1c58a:	f8cd 9000 	str.w	r9, [sp]
   1c58e:	4653      	mov	r3, sl
   1c590:	463a      	mov	r2, r7
   1c592:	4629      	mov	r1, r5
   1c594:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1c596:	f7ff ff6a 	bl	1c46e <ble_att_svr_fill_type_value_entry>
   1c59a:	4603      	mov	r3, r0
        if (rc == BLE_HS_EAGAIN) {
   1c59c:	2801      	cmp	r0, #1
   1c59e:	d1eb      	bne.n	1c578 <ble_att_svr_fill_type_value+0xac>
            rc = 0;
   1c5a0:	2300      	movs	r3, #0
   1c5a2:	e7e9      	b.n	1c578 <ble_att_svr_fill_type_value+0xac>
        *out_att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1c5a4:	230a      	movs	r3, #10
   1c5a6:	f889 3000 	strb.w	r3, [r9]
        return BLE_HS_ENOENT;
   1c5aa:	2305      	movs	r3, #5
   1c5ac:	e7e9      	b.n	1c582 <ble_att_svr_fill_type_value+0xb6>
   1c5ae:	bf00      	nop
   1c5b0:	20002c78 	.word	0x20002c78

0001c5b4 <ble_att_svr_build_find_type_value_rsp>:
{
   1c5b4:	b570      	push	{r4, r5, r6, lr}
   1c5b6:	b088      	sub	sp, #32
   1c5b8:	4604      	mov	r4, r0
   1c5ba:	460d      	mov	r5, r1
   1c5bc:	4616      	mov	r6, r2
   1c5be:	9305      	str	r3, [sp, #20]
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   1c5c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c5c2:	a907      	add	r1, sp, #28
   1c5c4:	980c      	ldr	r0, [sp, #48]	; 0x30
   1c5c6:	f7ff fded 	bl	1c1a4 <ble_att_svr_pkt>
    if (rc != 0) {
   1c5ca:	4603      	mov	r3, r0
   1c5cc:	b128      	cbz	r0, 1c5da <ble_att_svr_build_find_type_value_rsp+0x26>
    *out_txom = txom;
   1c5ce:	9907      	ldr	r1, [sp, #28]
   1c5d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1c5d2:	6011      	str	r1, [r2, #0]
}
   1c5d4:	4618      	mov	r0, r3
   1c5d6:	b008      	add	sp, #32
   1c5d8:	bd70      	pop	{r4, r5, r6, pc}
    buf = ble_att_cmd_prepare(BLE_ATT_OP_FIND_TYPE_VALUE_RSP, 0, txom);
   1c5da:	9a07      	ldr	r2, [sp, #28]
   1c5dc:	2100      	movs	r1, #0
   1c5de:	2007      	movs	r0, #7
   1c5e0:	f7ff fc06 	bl	1bdf0 <ble_att_cmd_prepare>
    if (buf == NULL) {
   1c5e4:	b190      	cbz	r0, 1c60c <ble_att_svr_build_find_type_value_rsp+0x58>
    mtu = ble_att_mtu(conn_handle);
   1c5e6:	4620      	mov	r0, r4
   1c5e8:	f7ff f8f1 	bl	1b7ce <ble_att_mtu>
    rc = ble_att_svr_fill_type_value(conn_handle, start_handle, end_handle,
   1c5ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c5ee:	681b      	ldr	r3, [r3, #0]
   1c5f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c5f2:	9203      	str	r2, [sp, #12]
   1c5f4:	9002      	str	r0, [sp, #8]
   1c5f6:	9a07      	ldr	r2, [sp, #28]
   1c5f8:	9201      	str	r2, [sp, #4]
   1c5fa:	9300      	str	r3, [sp, #0]
   1c5fc:	9b05      	ldr	r3, [sp, #20]
   1c5fe:	4632      	mov	r2, r6
   1c600:	4629      	mov	r1, r5
   1c602:	4620      	mov	r0, r4
   1c604:	f7ff ff62 	bl	1c4cc <ble_att_svr_fill_type_value>
   1c608:	4603      	mov	r3, r0
   1c60a:	e7e0      	b.n	1c5ce <ble_att_svr_build_find_type_value_rsp+0x1a>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1c60c:	2311      	movs	r3, #17
   1c60e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c610:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1c612:	2306      	movs	r3, #6
        goto done;
   1c614:	e7db      	b.n	1c5ce <ble_att_svr_build_find_type_value_rsp+0x1a>

0001c616 <ble_att_svr_service_uuid>:
{
   1c616:	b510      	push	{r4, lr}
   1c618:	b08a      	sub	sp, #40	; 0x28
   1c61a:	460c      	mov	r4, r1
    rc = ble_att_svr_read_flat(BLE_HS_CONN_HANDLE_NONE, entry, 0, sizeof(val), val,
   1c61c:	9202      	str	r2, [sp, #8]
   1c61e:	f10d 0316 	add.w	r3, sp, #22
   1c622:	9301      	str	r3, [sp, #4]
   1c624:	ab06      	add	r3, sp, #24
   1c626:	9300      	str	r3, [sp, #0]
   1c628:	2310      	movs	r3, #16
   1c62a:	2200      	movs	r2, #0
   1c62c:	4601      	mov	r1, r0
   1c62e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1c632:	f7ff feee 	bl	1c412 <ble_att_svr_read_flat>
    if (rc != 0) {
   1c636:	4603      	mov	r3, r0
   1c638:	b110      	cbz	r0, 1c640 <ble_att_svr_service_uuid+0x2a>
}
   1c63a:	4618      	mov	r0, r3
   1c63c:	b00a      	add	sp, #40	; 0x28
   1c63e:	bd10      	pop	{r4, pc}
    rc = ble_uuid_init_from_buf(uuid, val, attr_len);
   1c640:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1c644:	a906      	add	r1, sp, #24
   1c646:	4620      	mov	r0, r4
   1c648:	f7fe ff67 	bl	1b51a <ble_uuid_init_from_buf>
   1c64c:	4603      	mov	r3, r0
    return rc;
   1c64e:	e7f4      	b.n	1c63a <ble_att_svr_service_uuid+0x24>

0001c650 <ble_att_svr_build_read_group_type_rsp>:
{
   1c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c654:	b08b      	sub	sp, #44	; 0x2c
   1c656:	460e      	mov	r6, r1
   1c658:	4617      	mov	r7, r2
   1c65a:	9302      	str	r3, [sp, #8]
   1c65c:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   1c660:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    *att_err = 0;
   1c664:	f04f 0b00 	mov.w	fp, #0
   1c668:	f88a b000 	strb.w	fp, [sl]
    *err_handle = start_handle;
   1c66c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c66e:	8019      	strh	r1, [r3, #0]
    mtu = ble_att_mtu(conn_handle);
   1c670:	f7ff f8ad 	bl	1b7ce <ble_att_mtu>
   1c674:	9003      	str	r0, [sp, #12]
    txom = *rxom;
   1c676:	f8d9 8000 	ldr.w	r8, [r9]
    *rxom = NULL;
   1c67a:	f8c9 b000 	str.w	fp, [r9]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1c67e:	f8b8 1010 	ldrh.w	r1, [r8, #16]
   1c682:	4640      	mov	r0, r8
   1c684:	f7f4 fd5f 	bl	11146 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_GROUP_TYPE_RSP, sizeof(*rsp),
   1c688:	4642      	mov	r2, r8
   1c68a:	2101      	movs	r1, #1
   1c68c:	2011      	movs	r0, #17
   1c68e:	f7ff fbaf 	bl	1bdf0 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1c692:	b130      	cbz	r0, 1c6a2 <ble_att_svr_build_read_group_type_rsp+0x52>
   1c694:	4683      	mov	fp, r0
    rsp->bagp_length = 0;
   1c696:	2500      	movs	r5, #0
   1c698:	7005      	strb	r5, [r0, #0]
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1c69a:	4b4d      	ldr	r3, [pc, #308]	; (1c7d0 <ble_att_svr_build_read_group_type_rsp+0x180>)
   1c69c:	681c      	ldr	r4, [r3, #0]
    end_group_handle = 0;
   1c69e:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1c6a0:	e042      	b.n	1c728 <ble_att_svr_build_read_group_type_rsp+0xd8>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1c6a2:	2311      	movs	r3, #17
   1c6a4:	f88a 3000 	strb.w	r3, [sl]
        rc = BLE_HS_ENOMEM;
   1c6a8:	2306      	movs	r3, #6
    end_group_handle = 0;
   1c6aa:	f04f 0900 	mov.w	r9, #0
        goto done;
   1c6ae:	e05c      	b.n	1c76a <ble_att_svr_build_read_group_type_rsp+0x11a>
            if (!ble_att_svr_is_valid_read_group_type(entry->ha_uuid)) {
   1c6b0:	6860      	ldr	r0, [r4, #4]
   1c6b2:	f7ff fea3 	bl	1c3fc <ble_att_svr_is_valid_read_group_type>
   1c6b6:	b910      	cbnz	r0, 1c6be <ble_att_svr_build_read_group_type_rsp+0x6e>
                end_group_handle = entry->ha_handle_id;
   1c6b8:	f8b4 900a 	ldrh.w	r9, [r4, #10]
   1c6bc:	e03d      	b.n	1c73a <ble_att_svr_build_read_group_type_rsp+0xea>
                rc = ble_att_svr_read_group_type_entry_write(
   1c6be:	ab05      	add	r3, sp, #20
   1c6c0:	9300      	str	r3, [sp, #0]
   1c6c2:	464b      	mov	r3, r9
   1c6c4:	462a      	mov	r2, r5
   1c6c6:	9903      	ldr	r1, [sp, #12]
   1c6c8:	4640      	mov	r0, r8
   1c6ca:	f7ff fe37 	bl	1c33c <ble_att_svr_read_group_type_entry_write>
                if (rc != 0) {
   1c6ce:	4603      	mov	r3, r0
   1c6d0:	b918      	cbnz	r0, 1c6da <ble_att_svr_build_read_group_type_rsp+0x8a>
                end_group_handle = 0;
   1c6d2:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1c6d6:	464d      	mov	r5, r9
   1c6d8:	e031      	b.n	1c73e <ble_att_svr_build_read_group_type_rsp+0xee>
                    *err_handle = entry->ha_handle_id;
   1c6da:	8962      	ldrh	r2, [r4, #10]
   1c6dc:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1c6de:	800a      	strh	r2, [r1, #0]
                    if (rc == BLE_HS_ENOMEM) {
   1c6e0:	2806      	cmp	r0, #6
   1c6e2:	d003      	beq.n	1c6ec <ble_att_svr_build_read_group_type_rsp+0x9c>
                end_group_handle = 0;
   1c6e4:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1c6e8:	464d      	mov	r5, r9
   1c6ea:	e03e      	b.n	1c76a <ble_att_svr_build_read_group_type_rsp+0x11a>
                        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1c6ec:	2211      	movs	r2, #17
   1c6ee:	f88a 2000 	strb.w	r2, [sl]
                end_group_handle = 0;
   1c6f2:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1c6f6:	464d      	mov	r5, r9
   1c6f8:	e037      	b.n	1c76a <ble_att_svr_build_read_group_type_rsp+0x11a>
                    *err_handle = entry->ha_handle_id;
   1c6fa:	8962      	ldrh	r2, [r4, #10]
   1c6fc:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1c6fe:	800a      	strh	r2, [r1, #0]
                    goto done;
   1c700:	e033      	b.n	1c76a <ble_att_svr_build_read_group_type_rsp+0x11a>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   1c702:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1c706:	2b10      	cmp	r3, #16
   1c708:	d003      	beq.n	1c712 <ble_att_svr_build_read_group_type_rsp+0xc2>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   1c70a:	2314      	movs	r3, #20
   1c70c:	f88b 3000 	strb.w	r3, [fp]
   1c710:	e007      	b.n	1c722 <ble_att_svr_build_read_group_type_rsp+0xd2>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   1c712:	2306      	movs	r3, #6
   1c714:	f88b 3000 	strb.w	r3, [fp]
   1c718:	e003      	b.n	1c722 <ble_att_svr_build_read_group_type_rsp+0xd2>
                    if (service_uuid.u.type != BLE_UUID_TYPE_16) {
   1c71a:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1c71e:	2a10      	cmp	r2, #16
   1c720:	d123      	bne.n	1c76a <ble_att_svr_build_read_group_type_rsp+0x11a>
                start_group_handle = entry->ha_handle_id;
   1c722:	8965      	ldrh	r5, [r4, #10]
                end_group_handle = entry->ha_handle_id;
   1c724:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1c726:	6824      	ldr	r4, [r4, #0]
   1c728:	2c00      	cmp	r4, #0
   1c72a:	d03a      	beq.n	1c7a2 <ble_att_svr_build_read_group_type_rsp+0x152>
        if (entry->ha_handle_id < start_handle) {
   1c72c:	8963      	ldrh	r3, [r4, #10]
   1c72e:	42b3      	cmp	r3, r6
   1c730:	d3f9      	bcc.n	1c726 <ble_att_svr_build_read_group_type_rsp+0xd6>
        if (entry->ha_handle_id > end_handle) {
   1c732:	42bb      	cmp	r3, r7
   1c734:	d837      	bhi.n	1c7a6 <ble_att_svr_build_read_group_type_rsp+0x156>
        if (start_group_handle != 0) {
   1c736:	2d00      	cmp	r5, #0
   1c738:	d1ba      	bne.n	1c6b0 <ble_att_svr_build_read_group_type_rsp+0x60>
        if (start_group_handle == 0) {
   1c73a:	2d00      	cmp	r5, #0
   1c73c:	d1f3      	bne.n	1c726 <ble_att_svr_build_read_group_type_rsp+0xd6>
            if (ble_uuid_cmp(entry->ha_uuid, group_uuid) == 0) {
   1c73e:	9902      	ldr	r1, [sp, #8]
   1c740:	6860      	ldr	r0, [r4, #4]
   1c742:	f7fe ff13 	bl	1b56c <ble_uuid_cmp>
   1c746:	2800      	cmp	r0, #0
   1c748:	d1ed      	bne.n	1c726 <ble_att_svr_build_read_group_type_rsp+0xd6>
                rc = ble_att_svr_service_uuid(entry, &service_uuid, att_err);
   1c74a:	4652      	mov	r2, sl
   1c74c:	a905      	add	r1, sp, #20
   1c74e:	4620      	mov	r0, r4
   1c750:	f7ff ff61 	bl	1c616 <ble_att_svr_service_uuid>
                if (rc != 0) {
   1c754:	4603      	mov	r3, r0
   1c756:	2800      	cmp	r0, #0
   1c758:	d1cf      	bne.n	1c6fa <ble_att_svr_build_read_group_type_rsp+0xaa>
                switch (rsp->bagp_length) {
   1c75a:	f89b 2000 	ldrb.w	r2, [fp]
   1c75e:	2a06      	cmp	r2, #6
   1c760:	d0db      	beq.n	1c71a <ble_att_svr_build_read_group_type_rsp+0xca>
   1c762:	2a14      	cmp	r2, #20
   1c764:	d018      	beq.n	1c798 <ble_att_svr_build_read_group_type_rsp+0x148>
   1c766:	2a00      	cmp	r2, #0
   1c768:	d0cb      	beq.n	1c702 <ble_att_svr_build_read_group_type_rsp+0xb2>
    if (rc == 0) {
   1c76a:	bb2b      	cbnz	r3, 1c7b8 <ble_att_svr_build_read_group_type_rsp+0x168>
        if (start_group_handle != 0) {
   1c76c:	b15d      	cbz	r5, 1c786 <ble_att_svr_build_read_group_type_rsp+0x136>
            if (entry == NULL) {
   1c76e:	b1e4      	cbz	r4, 1c7aa <ble_att_svr_build_read_group_type_rsp+0x15a>
            rc = ble_att_svr_read_group_type_entry_write(txom, mtu,
   1c770:	ab05      	add	r3, sp, #20
   1c772:	9300      	str	r3, [sp, #0]
   1c774:	464b      	mov	r3, r9
   1c776:	462a      	mov	r2, r5
   1c778:	9903      	ldr	r1, [sp, #12]
   1c77a:	4640      	mov	r0, r8
   1c77c:	f7ff fdde 	bl	1c33c <ble_att_svr_read_group_type_entry_write>
   1c780:	4603      	mov	r3, r0
            if (rc == BLE_HS_ENOMEM) {
   1c782:	2806      	cmp	r0, #6
   1c784:	d014      	beq.n	1c7b0 <ble_att_svr_build_read_group_type_rsp+0x160>
        if (OS_MBUF_PKTLEN(txom) <= BLE_ATT_READ_GROUP_TYPE_RSP_BASE_SZ) {
   1c786:	f8b8 2010 	ldrh.w	r2, [r8, #16]
   1c78a:	2a02      	cmp	r2, #2
   1c78c:	d814      	bhi.n	1c7b8 <ble_att_svr_build_read_group_type_rsp+0x168>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1c78e:	230a      	movs	r3, #10
   1c790:	f88a 3000 	strb.w	r3, [sl]
            rc = BLE_HS_ENOENT;
   1c794:	2305      	movs	r3, #5
   1c796:	e010      	b.n	1c7ba <ble_att_svr_build_read_group_type_rsp+0x16a>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   1c798:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1c79c:	2a10      	cmp	r2, #16
   1c79e:	d1c0      	bne.n	1c722 <ble_att_svr_build_read_group_type_rsp+0xd2>
   1c7a0:	e7e3      	b.n	1c76a <ble_att_svr_build_read_group_type_rsp+0x11a>
    rc = 0;
   1c7a2:	2300      	movs	r3, #0
   1c7a4:	e7e1      	b.n	1c76a <ble_att_svr_build_read_group_type_rsp+0x11a>
            rc = 0;
   1c7a6:	2300      	movs	r3, #0
   1c7a8:	e7df      	b.n	1c76a <ble_att_svr_build_read_group_type_rsp+0x11a>
                end_group_handle = 0xffff;
   1c7aa:	f64f 79ff 	movw	r9, #65535	; 0xffff
   1c7ae:	e7df      	b.n	1c770 <ble_att_svr_build_read_group_type_rsp+0x120>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1c7b0:	2211      	movs	r2, #17
   1c7b2:	f88a 2000 	strb.w	r2, [sl]
   1c7b6:	e7e6      	b.n	1c786 <ble_att_svr_build_read_group_type_rsp+0x136>
    if (rc == 0 || rc == BLE_HS_EMSGSIZE) {
   1c7b8:	b10b      	cbz	r3, 1c7be <ble_att_svr_build_read_group_type_rsp+0x16e>
   1c7ba:	2b04      	cmp	r3, #4
   1c7bc:	d006      	beq.n	1c7cc <ble_att_svr_build_read_group_type_rsp+0x17c>
    *out_txom = txom;
   1c7be:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1c7c0:	f8c2 8000 	str.w	r8, [r2]
}
   1c7c4:	4618      	mov	r0, r3
   1c7c6:	b00b      	add	sp, #44	; 0x2c
   1c7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = 0;
   1c7cc:	2300      	movs	r3, #0
   1c7ce:	e7f6      	b.n	1c7be <ble_att_svr_build_read_group_type_rsp+0x16e>
   1c7d0:	20002c78 	.word	0x20002c78

0001c7d4 <ble_att_svr_prep_free>:
    if (entry != NULL) {
   1c7d4:	b148      	cbz	r0, 1c7ea <ble_att_svr_prep_free+0x16>
{
   1c7d6:	b510      	push	{r4, lr}
   1c7d8:	4604      	mov	r4, r0
        os_mbuf_free_chain(entry->bape_value);
   1c7da:	6880      	ldr	r0, [r0, #8]
   1c7dc:	f7f4 fb7e 	bl	10edc <os_mbuf_free_chain>
        os_memblock_put(&ble_att_svr_prep_entry_pool, entry);
   1c7e0:	4621      	mov	r1, r4
   1c7e2:	4802      	ldr	r0, [pc, #8]	; (1c7ec <ble_att_svr_prep_free+0x18>)
   1c7e4:	f7f4 fff7 	bl	117d6 <os_memblock_put>
}
   1c7e8:	bd10      	pop	{r4, pc}
   1c7ea:	4770      	bx	lr
   1c7ec:	20002f80 	.word	0x20002f80

0001c7f0 <ble_att_svr_prep_alloc>:
{
   1c7f0:	b538      	push	{r3, r4, r5, lr}
   1c7f2:	4605      	mov	r5, r0
    entry = os_memblock_get(&ble_att_svr_prep_entry_pool);
   1c7f4:	480c      	ldr	r0, [pc, #48]	; (1c828 <ble_att_svr_prep_alloc+0x38>)
   1c7f6:	f7f4 ffc6 	bl	11786 <os_memblock_get>
    if (entry == NULL) {
   1c7fa:	4604      	mov	r4, r0
   1c7fc:	b148      	cbz	r0, 1c812 <ble_att_svr_prep_alloc+0x22>
    memset(entry, 0, sizeof *entry);
   1c7fe:	2300      	movs	r3, #0
   1c800:	6003      	str	r3, [r0, #0]
   1c802:	6043      	str	r3, [r0, #4]
   1c804:	6083      	str	r3, [r0, #8]
    entry->bape_value = ble_hs_mbuf_l2cap_pkt();
   1c806:	f7fb fffb 	bl	18800 <ble_hs_mbuf_l2cap_pkt>
   1c80a:	60a0      	str	r0, [r4, #8]
    if (entry->bape_value == NULL) {
   1c80c:	b120      	cbz	r0, 1c818 <ble_att_svr_prep_alloc+0x28>
}
   1c80e:	4620      	mov	r0, r4
   1c810:	bd38      	pop	{r3, r4, r5, pc}
        *att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   1c812:	2309      	movs	r3, #9
   1c814:	702b      	strb	r3, [r5, #0]
        return NULL;
   1c816:	e7fa      	b.n	1c80e <ble_att_svr_prep_alloc+0x1e>
        ble_att_svr_prep_free(entry);
   1c818:	4620      	mov	r0, r4
   1c81a:	f7ff ffdb 	bl	1c7d4 <ble_att_svr_prep_free>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1c81e:	2311      	movs	r3, #17
   1c820:	702b      	strb	r3, [r5, #0]
        return NULL;
   1c822:	2400      	movs	r4, #0
   1c824:	e7f3      	b.n	1c80e <ble_att_svr_prep_alloc+0x1e>
   1c826:	bf00      	nop
   1c828:	20002f80 	.word	0x20002f80

0001c82c <ble_att_svr_insert_prep_entry>:
{
   1c82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c830:	460e      	mov	r6, r1
   1c832:	4617      	mov	r7, r2
   1c834:	461d      	mov	r5, r3
    conn = ble_hs_conn_find_assert(conn_handle);
   1c836:	f7fa fe4f 	bl	174d8 <ble_hs_conn_find_assert>
   1c83a:	4680      	mov	r8, r0
    prep_entry = ble_att_svr_prep_alloc(out_att_err);
   1c83c:	9806      	ldr	r0, [sp, #24]
   1c83e:	f7ff ffd7 	bl	1c7f0 <ble_att_svr_prep_alloc>
    if (prep_entry == NULL) {
   1c842:	b378      	cbz	r0, 1c8a4 <ble_att_svr_insert_prep_entry+0x78>
   1c844:	4604      	mov	r4, r0
    prep_entry->bape_handle = handle;
   1c846:	8086      	strh	r6, [r0, #4]
    prep_entry->bape_offset = offset;
   1c848:	80c7      	strh	r7, [r0, #6]
        OS_MBUF_PKTLEN(rxom) - sizeof(struct ble_att_prep_write_cmd));
   1c84a:	8a2b      	ldrh	r3, [r5, #16]
    rc = os_mbuf_appendfrom(
   1c84c:	3b04      	subs	r3, #4
   1c84e:	b29b      	uxth	r3, r3
   1c850:	2204      	movs	r2, #4
   1c852:	4629      	mov	r1, r5
   1c854:	6880      	ldr	r0, [r0, #8]
   1c856:	f7f4 fc1f 	bl	11098 <os_mbuf_appendfrom>
    if (rc != 0) {
   1c85a:	4605      	mov	r5, r0
   1c85c:	b9a8      	cbnz	r0, 1c88a <ble_att_svr_insert_prep_entry+0x5e>
    prep_prev = ble_att_svr_prep_find_prev(&conn->bhc_att_svr,
   1c85e:	463a      	mov	r2, r7
   1c860:	4631      	mov	r1, r6
   1c862:	f108 0044 	add.w	r0, r8, #68	; 0x44
   1c866:	f7ff fb13 	bl	1be90 <ble_att_svr_prep_find_prev>
    if (prep_prev == NULL) {
   1c86a:	b1a8      	cbz	r0, 1c898 <ble_att_svr_insert_prep_entry+0x6c>
        SLIST_INSERT_AFTER(prep_prev, prep_entry, bape_next);
   1c86c:	6802      	ldr	r2, [r0, #0]
   1c86e:	6022      	str	r2, [r4, #0]
   1c870:	6004      	str	r4, [r0, #0]
   1c872:	f7f5 fc63 	bl	1213c <os_time_get>
        ble_npl_time_get() + BLE_HS_ATT_SVR_QUEUED_WRITE_TMO;
   1c876:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   1c87a:	3030      	adds	r0, #48	; 0x30
    conn->bhc_att_svr.basc_prep_timeout_at =
   1c87c:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
    ble_hs_timer_resched();
   1c880:	f7fa f91a 	bl	16ab8 <ble_hs_timer_resched>
}
   1c884:	4628      	mov	r0, r5
   1c886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_att_svr_prep_free(prep_entry);
   1c88a:	4620      	mov	r0, r4
   1c88c:	f7ff ffa2 	bl	1c7d4 <ble_att_svr_prep_free>
        *out_att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   1c890:	2309      	movs	r3, #9
   1c892:	9a06      	ldr	r2, [sp, #24]
   1c894:	7013      	strb	r3, [r2, #0]
        return rc;
   1c896:	e7f5      	b.n	1c884 <ble_att_svr_insert_prep_entry+0x58>
        SLIST_INSERT_HEAD(&conn->bhc_att_svr.basc_prep_list, prep_entry,
   1c898:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   1c89c:	6023      	str	r3, [r4, #0]
   1c89e:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
   1c8a2:	e7e6      	b.n	1c872 <ble_att_svr_insert_prep_entry+0x46>
        return BLE_HS_ENOMEM;
   1c8a4:	2506      	movs	r5, #6
   1c8a6:	e7ed      	b.n	1c884 <ble_att_svr_insert_prep_entry+0x58>

0001c8a8 <ble_att_svr_prep_extract>:
{
   1c8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c8ac:	4605      	mov	r5, r0
   1c8ae:	4689      	mov	r9, r1
   1c8b0:	4690      	mov	r8, r2
    first = SLIST_FIRST(prep_list);
   1c8b2:	6803      	ldr	r3, [r0, #0]
    attr_handle = first->bape_handle;
   1c8b4:	889f      	ldrh	r7, [r3, #4]
    om = NULL;
   1c8b6:	2600      	movs	r6, #0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1c8b8:	e008      	b.n	1c8cc <ble_att_svr_prep_extract+0x24>
            om = entry->bape_value;
   1c8ba:	68a6      	ldr	r6, [r4, #8]
        entry->bape_value = NULL;
   1c8bc:	2300      	movs	r3, #0
   1c8be:	60a3      	str	r3, [r4, #8]
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   1c8c0:	682b      	ldr	r3, [r5, #0]
   1c8c2:	681b      	ldr	r3, [r3, #0]
   1c8c4:	602b      	str	r3, [r5, #0]
        ble_att_svr_prep_free(entry);
   1c8c6:	4620      	mov	r0, r4
   1c8c8:	f7ff ff84 	bl	1c7d4 <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1c8cc:	682c      	ldr	r4, [r5, #0]
   1c8ce:	b14c      	cbz	r4, 1c8e4 <ble_att_svr_prep_extract+0x3c>
        if (entry->bape_handle != attr_handle) {
   1c8d0:	88a3      	ldrh	r3, [r4, #4]
   1c8d2:	42bb      	cmp	r3, r7
   1c8d4:	d106      	bne.n	1c8e4 <ble_att_svr_prep_extract+0x3c>
        if (om == NULL) {
   1c8d6:	2e00      	cmp	r6, #0
   1c8d8:	d0ef      	beq.n	1c8ba <ble_att_svr_prep_extract+0x12>
            os_mbuf_concat(om, entry->bape_value);
   1c8da:	68a1      	ldr	r1, [r4, #8]
   1c8dc:	4630      	mov	r0, r6
   1c8de:	f7f4 fdc4 	bl	1146a <os_mbuf_concat>
   1c8e2:	e7eb      	b.n	1c8bc <ble_att_svr_prep_extract+0x14>
    *out_attr_handle = attr_handle;
   1c8e4:	f8a9 7000 	strh.w	r7, [r9]
    *out_om = om;
   1c8e8:	f8c8 6000 	str.w	r6, [r8]
}
   1c8ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c8f0 <ble_att_svr_free_start_mem>:
     */
}

static void
ble_att_svr_free_start_mem(void)
{
   1c8f0:	b510      	push	{r4, lr}
    free(ble_att_svr_entry_mem);
   1c8f2:	4c03      	ldr	r4, [pc, #12]	; (1c900 <ble_att_svr_free_start_mem+0x10>)
   1c8f4:	6820      	ldr	r0, [r4, #0]
   1c8f6:	f7f5 fdab 	bl	12450 <free>
    ble_att_svr_entry_mem = NULL;
   1c8fa:	2300      	movs	r3, #0
   1c8fc:	6023      	str	r3, [r4, #0]
}
   1c8fe:	bd10      	pop	{r4, pc}
   1c900:	20002c4c 	.word	0x20002c4c

0001c904 <ble_att_svr_register>:
{
   1c904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c908:	4680      	mov	r8, r0
   1c90a:	460f      	mov	r7, r1
   1c90c:	4616      	mov	r6, r2
   1c90e:	461d      	mov	r5, r3
    entry = ble_att_svr_entry_alloc();
   1c910:	f7ff fb00 	bl	1bf14 <ble_att_svr_entry_alloc>
    if (entry == NULL) {
   1c914:	b1b8      	cbz	r0, 1c946 <ble_att_svr_register+0x42>
   1c916:	4604      	mov	r4, r0
    entry->ha_uuid = uuid;
   1c918:	f8c0 8004 	str.w	r8, [r0, #4]
    entry->ha_flags = flags;
   1c91c:	7207      	strb	r7, [r0, #8]
    entry->ha_min_key_size = min_key_size;
   1c91e:	7246      	strb	r6, [r0, #9]
    entry->ha_handle_id = ble_att_svr_next_id();
   1c920:	f7ff faae 	bl	1be80 <ble_att_svr_next_id>
   1c924:	8160      	strh	r0, [r4, #10]
    entry->ha_cb = cb;
   1c926:	9b06      	ldr	r3, [sp, #24]
   1c928:	60e3      	str	r3, [r4, #12]
    entry->ha_cb_arg = cb_arg;
   1c92a:	9b07      	ldr	r3, [sp, #28]
   1c92c:	6123      	str	r3, [r4, #16]
    STAILQ_INSERT_TAIL(&ble_att_svr_list, entry, ha_next);
   1c92e:	2300      	movs	r3, #0
   1c930:	6023      	str	r3, [r4, #0]
   1c932:	4b07      	ldr	r3, [pc, #28]	; (1c950 <ble_att_svr_register+0x4c>)
   1c934:	685a      	ldr	r2, [r3, #4]
   1c936:	6014      	str	r4, [r2, #0]
   1c938:	605c      	str	r4, [r3, #4]
    if (handle_id != NULL) {
   1c93a:	b135      	cbz	r5, 1c94a <ble_att_svr_register+0x46>
        *handle_id = entry->ha_handle_id;
   1c93c:	8963      	ldrh	r3, [r4, #10]
   1c93e:	802b      	strh	r3, [r5, #0]
    return 0;
   1c940:	2000      	movs	r0, #0
}
   1c942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_ENOMEM;
   1c946:	2006      	movs	r0, #6
   1c948:	e7fb      	b.n	1c942 <ble_att_svr_register+0x3e>
    return 0;
   1c94a:	2000      	movs	r0, #0
   1c94c:	e7f9      	b.n	1c942 <ble_att_svr_register+0x3e>
   1c94e:	bf00      	nop
   1c950:	20002c78 	.word	0x20002c78

0001c954 <ble_att_svr_prev_handle>:
}
   1c954:	4b01      	ldr	r3, [pc, #4]	; (1c95c <ble_att_svr_prev_handle+0x8>)
   1c956:	8818      	ldrh	r0, [r3, #0]
   1c958:	4770      	bx	lr
   1c95a:	bf00      	nop
   1c95c:	20002c74 	.word	0x20002c74

0001c960 <ble_att_svr_find_by_handle>:
    for (entry = STAILQ_FIRST(&ble_att_svr_list);
   1c960:	4b04      	ldr	r3, [pc, #16]	; (1c974 <ble_att_svr_find_by_handle+0x14>)
   1c962:	681b      	ldr	r3, [r3, #0]
   1c964:	b123      	cbz	r3, 1c970 <ble_att_svr_find_by_handle+0x10>
        if (entry->ha_handle_id == handle_id) {
   1c966:	895a      	ldrh	r2, [r3, #10]
   1c968:	4282      	cmp	r2, r0
   1c96a:	d001      	beq.n	1c970 <ble_att_svr_find_by_handle+0x10>
         entry = STAILQ_NEXT(entry, ha_next)) {
   1c96c:	681b      	ldr	r3, [r3, #0]
   1c96e:	e7f9      	b.n	1c964 <ble_att_svr_find_by_handle+0x4>
}
   1c970:	4618      	mov	r0, r3
   1c972:	4770      	bx	lr
   1c974:	20002c78 	.word	0x20002c78

0001c978 <ble_att_svr_write_handle>:
{
   1c978:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c97a:	b083      	sub	sp, #12
   1c97c:	4605      	mov	r5, r0
   1c97e:	4616      	mov	r6, r2
   1c980:	461f      	mov	r7, r3
   1c982:	9c08      	ldr	r4, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   1c984:	4608      	mov	r0, r1
   1c986:	f7ff ffeb 	bl	1c960 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   1c98a:	b140      	cbz	r0, 1c99e <ble_att_svr_write_handle+0x26>
   1c98c:	4601      	mov	r1, r0
    rc = ble_att_svr_write(conn_handle, entry, offset, om, out_att_err);
   1c98e:	9400      	str	r4, [sp, #0]
   1c990:	463b      	mov	r3, r7
   1c992:	4632      	mov	r2, r6
   1c994:	4628      	mov	r0, r5
   1c996:	f7ff fb94 	bl	1c0c2 <ble_att_svr_write>
}
   1c99a:	b003      	add	sp, #12
   1c99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   1c99e:	b11c      	cbz	r4, 1c9a8 <ble_att_svr_write_handle+0x30>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1c9a0:	2301      	movs	r3, #1
   1c9a2:	7023      	strb	r3, [r4, #0]
        return BLE_HS_ENOENT;
   1c9a4:	2005      	movs	r0, #5
   1c9a6:	e7f8      	b.n	1c99a <ble_att_svr_write_handle+0x22>
   1c9a8:	2005      	movs	r0, #5
   1c9aa:	e7f6      	b.n	1c99a <ble_att_svr_write_handle+0x22>

0001c9ac <ble_att_svr_prep_write>:
{
   1c9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9b0:	b084      	sub	sp, #16
   1c9b2:	4606      	mov	r6, r0
   1c9b4:	460c      	mov	r4, r1
   1c9b6:	4617      	mov	r7, r2
    *err_handle = 0; /* Silence unnecessary warning. */
   1c9b8:	2300      	movs	r3, #0
   1c9ba:	8013      	strh	r3, [r2, #0]
    rc = ble_att_svr_prep_validate(prep_list, err_handle);
   1c9bc:	4611      	mov	r1, r2
   1c9be:	4620      	mov	r0, r4
   1c9c0:	f7ff fa79 	bl	1beb6 <ble_att_svr_prep_validate>
    if (rc != 0) {
   1c9c4:	4680      	mov	r8, r0
   1c9c6:	b9f8      	cbnz	r0, 1ca08 <ble_att_svr_prep_write+0x5c>
    while (!SLIST_EMPTY(prep_list)) {
   1c9c8:	6823      	ldr	r3, [r4, #0]
   1c9ca:	b1eb      	cbz	r3, 1ca08 <ble_att_svr_prep_write+0x5c>
        ble_att_svr_prep_extract(prep_list, &attr_handle, &om);
   1c9cc:	aa03      	add	r2, sp, #12
   1c9ce:	f10d 010a 	add.w	r1, sp, #10
   1c9d2:	4620      	mov	r0, r4
   1c9d4:	f7ff ff68 	bl	1c8a8 <ble_att_svr_prep_extract>
        attr = ble_att_svr_find_by_handle(attr_handle);
   1c9d8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1c9dc:	f7ff ffc0 	bl	1c960 <ble_att_svr_find_by_handle>
        rc = ble_att_svr_write(conn_handle, attr, 0, &om, &att_err);
   1c9e0:	f10d 0309 	add.w	r3, sp, #9
   1c9e4:	9300      	str	r3, [sp, #0]
   1c9e6:	ab03      	add	r3, sp, #12
   1c9e8:	2200      	movs	r2, #0
   1c9ea:	4601      	mov	r1, r0
   1c9ec:	4630      	mov	r0, r6
   1c9ee:	f7ff fb68 	bl	1c0c2 <ble_att_svr_write>
   1c9f2:	4605      	mov	r5, r0
        os_mbuf_free_chain(om);
   1c9f4:	9803      	ldr	r0, [sp, #12]
   1c9f6:	f7f4 fa71 	bl	10edc <os_mbuf_free_chain>
        if (rc != 0) {
   1c9fa:	2d00      	cmp	r5, #0
   1c9fc:	d0e4      	beq.n	1c9c8 <ble_att_svr_prep_write+0x1c>
            *err_handle = attr_handle;
   1c9fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1ca02:	803b      	strh	r3, [r7, #0]
            return att_err;
   1ca04:	f89d 8009 	ldrb.w	r8, [sp, #9]
}
   1ca08:	4640      	mov	r0, r8
   1ca0a:	b004      	add	sp, #16
   1ca0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ca10 <ble_att_svr_find_by_uuid>:
{
   1ca10:	b570      	push	{r4, r5, r6, lr}
   1ca12:	460d      	mov	r5, r1
   1ca14:	4616      	mov	r6, r2
    if (prev == NULL) {
   1ca16:	b160      	cbz	r0, 1ca32 <ble_att_svr_find_by_uuid+0x22>
        entry = STAILQ_NEXT(prev, ha_next);
   1ca18:	6804      	ldr	r4, [r0, #0]
    for (;
   1ca1a:	b174      	cbz	r4, 1ca3a <ble_att_svr_find_by_uuid+0x2a>
         entry != NULL && entry->ha_handle_id <= end_handle;
   1ca1c:	8963      	ldrh	r3, [r4, #10]
   1ca1e:	42b3      	cmp	r3, r6
   1ca20:	d80a      	bhi.n	1ca38 <ble_att_svr_find_by_uuid+0x28>
        if (uuid == NULL || ble_uuid_cmp(entry->ha_uuid, uuid) == 0) {
   1ca22:	b155      	cbz	r5, 1ca3a <ble_att_svr_find_by_uuid+0x2a>
   1ca24:	4629      	mov	r1, r5
   1ca26:	6860      	ldr	r0, [r4, #4]
   1ca28:	f7fe fda0 	bl	1b56c <ble_uuid_cmp>
   1ca2c:	b128      	cbz	r0, 1ca3a <ble_att_svr_find_by_uuid+0x2a>
         entry = STAILQ_NEXT(entry, ha_next)) {
   1ca2e:	6824      	ldr	r4, [r4, #0]
   1ca30:	e7f3      	b.n	1ca1a <ble_att_svr_find_by_uuid+0xa>
        entry = STAILQ_FIRST(&ble_att_svr_list);
   1ca32:	4b03      	ldr	r3, [pc, #12]	; (1ca40 <ble_att_svr_find_by_uuid+0x30>)
   1ca34:	681c      	ldr	r4, [r3, #0]
   1ca36:	e7f0      	b.n	1ca1a <ble_att_svr_find_by_uuid+0xa>
    return NULL;
   1ca38:	2400      	movs	r4, #0
}
   1ca3a:	4620      	mov	r0, r4
   1ca3c:	bd70      	pop	{r4, r5, r6, pc}
   1ca3e:	bf00      	nop
   1ca40:	20002c78 	.word	0x20002c78

0001ca44 <ble_att_svr_build_read_type_rsp>:
{
   1ca44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca48:	b08f      	sub	sp, #60	; 0x3c
   1ca4a:	9006      	str	r0, [sp, #24]
   1ca4c:	460d      	mov	r5, r1
   1ca4e:	4617      	mov	r7, r2
   1ca50:	9305      	str	r3, [sp, #20]
   1ca52:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1ca54:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
    *att_err = 0;    /* Silence unnecessary warning. */
   1ca58:	2200      	movs	r2, #0
   1ca5a:	f88a 2000 	strb.w	r2, [sl]
    *err_handle = start_handle;
   1ca5e:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1ca60:	800d      	strh	r5, [r1, #0]
    txom = *rxom;
   1ca62:	681e      	ldr	r6, [r3, #0]
    *rxom = NULL;
   1ca64:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1ca66:	8a31      	ldrh	r1, [r6, #16]
   1ca68:	4630      	mov	r0, r6
   1ca6a:	f7f4 fb6c 	bl	11146 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_TYPE_RSP, sizeof(*rsp), txom);
   1ca6e:	4632      	mov	r2, r6
   1ca70:	2101      	movs	r1, #1
   1ca72:	2009      	movs	r0, #9
   1ca74:	f7ff f9bc 	bl	1bdf0 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1ca78:	9007      	str	r0, [sp, #28]
   1ca7a:	b140      	cbz	r0, 1ca8e <ble_att_svr_build_read_type_rsp+0x4a>
    mtu = ble_att_mtu(conn_handle);
   1ca7c:	9806      	ldr	r0, [sp, #24]
   1ca7e:	f7fe fea6 	bl	1b7ce <ble_att_mtu>
   1ca82:	4681      	mov	r9, r0
    prev_attr_len = 0;
   1ca84:	f04f 0800 	mov.w	r8, #0
    entry_written = 0;
   1ca88:	46c3      	mov	fp, r8
    entry = NULL;
   1ca8a:	4644      	mov	r4, r8
   1ca8c:	e035      	b.n	1cafa <ble_att_svr_build_read_type_rsp+0xb6>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1ca8e:	2311      	movs	r3, #17
   1ca90:	f88a 3000 	strb.w	r3, [sl]
        *err_handle = 0;
   1ca94:	f04f 0b00 	mov.w	fp, #0
   1ca98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1ca9a:	f8a3 b000 	strh.w	fp, [r3]
        rc = BLE_HS_ENOMEM;
   1ca9e:	2206      	movs	r2, #6
    prev_attr_len = 0;
   1caa0:	46d8      	mov	r8, fp
    if (!entry_written) {
   1caa2:	f1bb 0f00 	cmp.w	fp, #0
   1caa6:	d15a      	bne.n	1cb5e <ble_att_svr_build_read_type_rsp+0x11a>
        if (*att_err == 0) {
   1caa8:	f89a 3000 	ldrb.w	r3, [sl]
   1caac:	b913      	cbnz	r3, 1cab4 <ble_att_svr_build_read_type_rsp+0x70>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1caae:	230a      	movs	r3, #10
   1cab0:	f88a 3000 	strb.w	r3, [sl]
        if (rc == 0) {
   1cab4:	2a00      	cmp	r2, #0
   1cab6:	d15a      	bne.n	1cb6e <ble_att_svr_build_read_type_rsp+0x12a>
            rc = BLE_HS_ENOENT;
   1cab8:	2205      	movs	r2, #5
   1caba:	e058      	b.n	1cb6e <ble_att_svr_build_read_type_rsp+0x12a>
                *err_handle = entry->ha_handle_id;
   1cabc:	8963      	ldrh	r3, [r4, #10]
   1cabe:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1cac0:	800b      	strh	r3, [r1, #0]
                goto done;
   1cac2:	e7ee      	b.n	1caa2 <ble_att_svr_build_read_type_rsp+0x5e>
            } else if (prev_attr_len != attr_len) {
   1cac4:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   1cac8:	4543      	cmp	r3, r8
   1caca:	d1ea      	bne.n	1caa2 <ble_att_svr_build_read_type_rsp+0x5e>
            txomlen = OS_MBUF_PKTHDR(txom)->omp_len + 2 + attr_len;
   1cacc:	8a33      	ldrh	r3, [r6, #16]
   1cace:	3302      	adds	r3, #2
   1cad0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   1cad4:	440b      	add	r3, r1
            if (txomlen > mtu) {
   1cad6:	4599      	cmp	r9, r3
   1cad8:	dbe3      	blt.n	1caa2 <ble_att_svr_build_read_type_rsp+0x5e>
            data = os_mbuf_extend(txom, 2 + attr_len);
   1cada:	3102      	adds	r1, #2
   1cadc:	b289      	uxth	r1, r1
   1cade:	4630      	mov	r0, r6
   1cae0:	f7f4 fce6 	bl	114b0 <os_mbuf_extend>
            if (data == NULL) {
   1cae4:	b388      	cbz	r0, 1cb4a <ble_att_svr_build_read_type_rsp+0x106>
            data->handle = htole16(entry->ha_handle_id);
   1cae6:	8962      	ldrh	r2, [r4, #10]
   1cae8:	f820 2b02 	strh.w	r2, [r0], #2
            memcpy(data->value, buf, attr_len);
   1caec:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   1caf0:	a908      	add	r1, sp, #32
   1caf2:	f7f5 fce7 	bl	124c4 <memcpy>
            entry_written = 1;
   1caf6:	f04f 0b01 	mov.w	fp, #1
        entry = ble_att_svr_find_by_uuid(entry, uuid, end_handle);
   1cafa:	463a      	mov	r2, r7
   1cafc:	9905      	ldr	r1, [sp, #20]
   1cafe:	4620      	mov	r0, r4
   1cb00:	f7ff ff86 	bl	1ca10 <ble_att_svr_find_by_uuid>
        if (entry == NULL) {
   1cb04:	4604      	mov	r4, r0
   1cb06:	b340      	cbz	r0, 1cb5a <ble_att_svr_build_read_type_rsp+0x116>
        if (entry->ha_handle_id >= start_handle) {
   1cb08:	8943      	ldrh	r3, [r0, #10]
   1cb0a:	42ab      	cmp	r3, r5
   1cb0c:	d3f5      	bcc.n	1cafa <ble_att_svr_build_read_type_rsp+0xb6>
            rc = ble_att_svr_read_flat(conn_handle, entry, 0, sizeof buf, buf,
   1cb0e:	f8cd a008 	str.w	sl, [sp, #8]
   1cb12:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1cb16:	9301      	str	r3, [sp, #4]
   1cb18:	ab08      	add	r3, sp, #32
   1cb1a:	9300      	str	r3, [sp, #0]
   1cb1c:	2313      	movs	r3, #19
   1cb1e:	2200      	movs	r2, #0
   1cb20:	4601      	mov	r1, r0
   1cb22:	9806      	ldr	r0, [sp, #24]
   1cb24:	f7ff fc75 	bl	1c412 <ble_att_svr_read_flat>
            if (rc != 0) {
   1cb28:	4602      	mov	r2, r0
   1cb2a:	2800      	cmp	r0, #0
   1cb2c:	d1c6      	bne.n	1cabc <ble_att_svr_build_read_type_rsp+0x78>
            if (attr_len > mtu - 4) {
   1cb2e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   1cb32:	f1a9 0304 	sub.w	r3, r9, #4
   1cb36:	4299      	cmp	r1, r3
   1cb38:	dd01      	ble.n	1cb3e <ble_att_svr_build_read_type_rsp+0xfa>
                attr_len = mtu - 4;
   1cb3a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if (prev_attr_len == 0) {
   1cb3e:	f1b8 0f00 	cmp.w	r8, #0
   1cb42:	d1bf      	bne.n	1cac4 <ble_att_svr_build_read_type_rsp+0x80>
                prev_attr_len = attr_len;
   1cb44:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
   1cb48:	e7c0      	b.n	1cacc <ble_att_svr_build_read_type_rsp+0x88>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1cb4a:	2311      	movs	r3, #17
   1cb4c:	f88a 3000 	strb.w	r3, [sl]
                *err_handle = entry->ha_handle_id;
   1cb50:	8963      	ldrh	r3, [r4, #10]
   1cb52:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1cb54:	8013      	strh	r3, [r2, #0]
                rc = BLE_HS_ENOMEM;
   1cb56:	2206      	movs	r2, #6
                goto done;
   1cb58:	e7a3      	b.n	1caa2 <ble_att_svr_build_read_type_rsp+0x5e>
            rc = BLE_HS_ENOENT;
   1cb5a:	2205      	movs	r2, #5
   1cb5c:	e7a1      	b.n	1caa2 <ble_att_svr_build_read_type_rsp+0x5e>
        *att_err = 0;
   1cb5e:	2200      	movs	r2, #0
   1cb60:	f88a 2000 	strb.w	r2, [sl]
        rsp->batp_length = htole16(sizeof(*data) + prev_attr_len);
   1cb64:	f108 0802 	add.w	r8, r8, #2
   1cb68:	9b07      	ldr	r3, [sp, #28]
   1cb6a:	f883 8000 	strb.w	r8, [r3]
    *out_txom = txom;
   1cb6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1cb70:	601e      	str	r6, [r3, #0]
}
   1cb72:	4610      	mov	r0, r2
   1cb74:	b00f      	add	sp, #60	; 0x3c
   1cb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001cb7a <ble_att_svr_ticks_until_tmo>:
    if (SLIST_EMPTY(&svr->basc_prep_list)) {
   1cb7a:	6803      	ldr	r3, [r0, #0]
   1cb7c:	b12b      	cbz	r3, 1cb8a <ble_att_svr_ticks_until_tmo+0x10>
    time_diff = svr->basc_prep_timeout_at - now;
   1cb7e:	6840      	ldr	r0, [r0, #4]
    if (time_diff < 0) {
   1cb80:	1a40      	subs	r0, r0, r1
   1cb82:	d400      	bmi.n	1cb86 <ble_att_svr_ticks_until_tmo+0xc>
}
   1cb84:	4770      	bx	lr
        return 0;
   1cb86:	2000      	movs	r0, #0
   1cb88:	4770      	bx	lr
        return BLE_HS_FOREVER;
   1cb8a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1cb8e:	e7f9      	b.n	1cb84 <ble_att_svr_ticks_until_tmo+0xa>

0001cb90 <ble_att_svr_read_handle>:
{
   1cb90:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb92:	b083      	sub	sp, #12
   1cb94:	4605      	mov	r5, r0
   1cb96:	4616      	mov	r6, r2
   1cb98:	461f      	mov	r7, r3
   1cb9a:	9c08      	ldr	r4, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   1cb9c:	4608      	mov	r0, r1
   1cb9e:	f7ff fedf 	bl	1c960 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   1cba2:	b140      	cbz	r0, 1cbb6 <ble_att_svr_read_handle+0x26>
   1cba4:	4601      	mov	r1, r0
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   1cba6:	9400      	str	r4, [sp, #0]
   1cba8:	463b      	mov	r3, r7
   1cbaa:	4632      	mov	r2, r6
   1cbac:	4628      	mov	r0, r5
   1cbae:	f7ff fa59 	bl	1c064 <ble_att_svr_read>
}
   1cbb2:	b003      	add	sp, #12
   1cbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   1cbb6:	b11c      	cbz	r4, 1cbc0 <ble_att_svr_read_handle+0x30>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1cbb8:	2301      	movs	r3, #1
   1cbba:	7023      	strb	r3, [r4, #0]
        return BLE_HS_ENOENT;
   1cbbc:	2005      	movs	r0, #5
   1cbbe:	e7f8      	b.n	1cbb2 <ble_att_svr_read_handle+0x22>
   1cbc0:	2005      	movs	r0, #5
   1cbc2:	e7f6      	b.n	1cbb2 <ble_att_svr_read_handle+0x22>

0001cbc4 <ble_att_svr_build_read_mult_rsp>:
{
   1cbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cbc8:	b084      	sub	sp, #16
   1cbca:	4607      	mov	r7, r0
   1cbcc:	460c      	mov	r4, r1
   1cbce:	4691      	mov	r9, r2
   1cbd0:	461d      	mov	r5, r3
    mtu = ble_att_mtu(conn_handle);
   1cbd2:	f7fe fdfc 	bl	1b7ce <ble_att_mtu>
   1cbd6:	4606      	mov	r6, r0
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   1cbd8:	462a      	mov	r2, r5
   1cbda:	a903      	add	r1, sp, #12
   1cbdc:	4620      	mov	r0, r4
   1cbde:	f7ff fae1 	bl	1c1a4 <ble_att_svr_pkt>
    if (rc != 0) {
   1cbe2:	4680      	mov	r8, r0
   1cbe4:	b148      	cbz	r0, 1cbfa <ble_att_svr_build_read_mult_rsp+0x36>
        *err_handle = 0;
   1cbe6:	2300      	movs	r3, #0
   1cbe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1cbea:	8013      	strh	r3, [r2, #0]
    *out_txom = txom;
   1cbec:	9b03      	ldr	r3, [sp, #12]
   1cbee:	f8c9 3000 	str.w	r3, [r9]
}
   1cbf2:	4640      	mov	r0, r8
   1cbf4:	b004      	add	sp, #16
   1cbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_MULT_RSP, 0, txom) == NULL) {
   1cbfa:	9a03      	ldr	r2, [sp, #12]
   1cbfc:	2100      	movs	r1, #0
   1cbfe:	200f      	movs	r0, #15
   1cc00:	f7ff f8f6 	bl	1bdf0 <ble_att_cmd_prepare>
   1cc04:	b320      	cbz	r0, 1cc50 <ble_att_svr_build_read_mult_rsp+0x8c>
    while (OS_MBUF_PKTLEN(*rxom) >= 2 && OS_MBUF_PKTLEN(txom) < mtu) {
   1cc06:	6823      	ldr	r3, [r4, #0]
   1cc08:	8a1b      	ldrh	r3, [r3, #16]
   1cc0a:	2b01      	cmp	r3, #1
   1cc0c:	d9ee      	bls.n	1cbec <ble_att_svr_build_read_mult_rsp+0x28>
   1cc0e:	9b03      	ldr	r3, [sp, #12]
   1cc10:	8a1b      	ldrh	r3, [r3, #16]
   1cc12:	42b3      	cmp	r3, r6
   1cc14:	d2ea      	bcs.n	1cbec <ble_att_svr_build_read_mult_rsp+0x28>
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   1cc16:	462a      	mov	r2, r5
   1cc18:	2102      	movs	r1, #2
   1cc1a:	4620      	mov	r0, r4
   1cc1c:	f7ff fa82 	bl	1c124 <ble_att_svr_pullup_req_base>
        if (rc != 0) {
   1cc20:	b9f0      	cbnz	r0, 1cc60 <ble_att_svr_build_read_mult_rsp+0x9c>
        handle = get_le16((*rxom)->om_data);
   1cc22:	6823      	ldr	r3, [r4, #0]
   1cc24:	6818      	ldr	r0, [r3, #0]
   1cc26:	f001 ff9d 	bl	1eb64 <get_le16>
   1cc2a:	4682      	mov	sl, r0
        os_mbuf_adj(*rxom, 2);
   1cc2c:	2102      	movs	r1, #2
   1cc2e:	6820      	ldr	r0, [r4, #0]
   1cc30:	f7f4 fa89 	bl	11146 <os_mbuf_adj>
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   1cc34:	9500      	str	r5, [sp, #0]
   1cc36:	9b03      	ldr	r3, [sp, #12]
   1cc38:	2200      	movs	r2, #0
   1cc3a:	4651      	mov	r1, sl
   1cc3c:	4638      	mov	r0, r7
   1cc3e:	f7ff ffa7 	bl	1cb90 <ble_att_svr_read_handle>
        if (rc != 0) {
   1cc42:	2800      	cmp	r0, #0
   1cc44:	d0df      	beq.n	1cc06 <ble_att_svr_build_read_mult_rsp+0x42>
            *err_handle = handle;
   1cc46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1cc48:	f8a2 a000 	strh.w	sl, [r2]
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   1cc4c:	4680      	mov	r8, r0
            goto done;
   1cc4e:	e7cd      	b.n	1cbec <ble_att_svr_build_read_mult_rsp+0x28>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1cc50:	2311      	movs	r3, #17
   1cc52:	702b      	strb	r3, [r5, #0]
        *err_handle = 0;
   1cc54:	2300      	movs	r3, #0
   1cc56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1cc58:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1cc5a:	f04f 0806 	mov.w	r8, #6
        goto done;
   1cc5e:	e7c5      	b.n	1cbec <ble_att_svr_build_read_mult_rsp+0x28>
            *err_handle = 0;
   1cc60:	2200      	movs	r2, #0
   1cc62:	990c      	ldr	r1, [sp, #48]	; 0x30
   1cc64:	800a      	strh	r2, [r1, #0]
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   1cc66:	4680      	mov	r8, r0
            goto done;
   1cc68:	e7c0      	b.n	1cbec <ble_att_svr_build_read_mult_rsp+0x28>

0001cc6a <ble_att_svr_tx_error_rsp>:
{
   1cc6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cc6c:	4605      	mov	r5, r0
   1cc6e:	460c      	mov	r4, r1
   1cc70:	4617      	mov	r7, r2
   1cc72:	461e      	mov	r6, r3
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_ERROR_RSP, sizeof(*rsp), txom);
   1cc74:	460a      	mov	r2, r1
   1cc76:	2104      	movs	r1, #4
   1cc78:	2001      	movs	r0, #1
   1cc7a:	f7ff f8b9 	bl	1bdf0 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1cc7e:	b150      	cbz	r0, 1cc96 <ble_att_svr_tx_error_rsp+0x2c>
    rsp->baep_req_op = req_op;
   1cc80:	7007      	strb	r7, [r0, #0]
    rsp->baep_handle = htole16(handle);
   1cc82:	f8a0 6001 	strh.w	r6, [r0, #1]
    rsp->baep_error_code = error_code;
   1cc86:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1cc8a:	70c2      	strb	r2, [r0, #3]
    return ble_att_tx(conn_handle, txom);
   1cc8c:	4621      	mov	r1, r4
   1cc8e:	4628      	mov	r0, r5
   1cc90:	f7ff f8d1 	bl	1be36 <ble_att_tx>
}
   1cc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1cc96:	2006      	movs	r0, #6
   1cc98:	e7fc      	b.n	1cc94 <ble_att_svr_tx_error_rsp+0x2a>

0001cc9a <ble_att_svr_tx_rsp>:
{
   1cc9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cc9e:	b085      	sub	sp, #20
   1cca0:	4607      	mov	r7, r0
   1cca2:	4614      	mov	r4, r2
   1cca4:	4699      	mov	r9, r3
   1cca6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    if (hs_status != 0 && err_status == 0) {
   1ccaa:	4688      	mov	r8, r1
   1ccac:	b109      	cbz	r1, 1ccb2 <ble_att_svr_tx_rsp+0x18>
   1ccae:	2e00      	cmp	r6, #0
   1ccb0:	d037      	beq.n	1cd22 <ble_att_svr_tx_rsp+0x88>
        ble_hs_lock();
   1ccb2:	f7f9 fe23 	bl	168fc <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1ccb6:	aa03      	add	r2, sp, #12
   1ccb8:	a902      	add	r1, sp, #8
   1ccba:	4638      	mov	r0, r7
   1ccbc:	f7fe fd5d 	bl	1b77a <ble_att_conn_chan_find>
        if (rc != 0) {
   1ccc0:	4605      	mov	r5, r0
   1ccc2:	b918      	cbnz	r0, 1cccc <ble_att_svr_tx_rsp+0x32>
            if (hs_status == 0) {
   1ccc4:	f1b8 0f00 	cmp.w	r8, #0
   1ccc8:	d013      	beq.n	1ccf2 <ble_att_svr_tx_rsp+0x58>
   1ccca:	4645      	mov	r5, r8
        ble_hs_unlock();
   1cccc:	f7f9 fe1a 	bl	16904 <ble_hs_unlock>
        if (hs_status != 0) {
   1ccd0:	b345      	cbz	r5, 1cd24 <ble_att_svr_tx_rsp+0x8a>
            if (om == NULL) {
   1ccd2:	b314      	cbz	r4, 1cd1a <ble_att_svr_tx_rsp+0x80>
                os_mbuf_adj(om, OS_MBUF_PKTLEN(om));
   1ccd4:	8a21      	ldrh	r1, [r4, #16]
   1ccd6:	4620      	mov	r0, r4
   1ccd8:	f7f4 fa35 	bl	11146 <os_mbuf_adj>
            if (om != NULL) {
   1ccdc:	b314      	cbz	r4, 1cd24 <ble_att_svr_tx_rsp+0x8a>
                ble_att_svr_tx_error_rsp(conn_handle, om, att_op,
   1ccde:	9600      	str	r6, [sp, #0]
   1cce0:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1cce4:	464a      	mov	r2, r9
   1cce6:	4621      	mov	r1, r4
   1cce8:	4638      	mov	r0, r7
   1ccea:	f7ff ffbe 	bl	1cc6a <ble_att_svr_tx_error_rsp>
                om = NULL;
   1ccee:	2400      	movs	r4, #0
   1ccf0:	e018      	b.n	1cd24 <ble_att_svr_tx_rsp+0x8a>
                ble_att_inc_tx_stat(om->om_data[0]);
   1ccf2:	6823      	ldr	r3, [r4, #0]
   1ccf4:	7818      	ldrb	r0, [r3, #0]
   1ccf6:	f7fe fd47 	bl	1b788 <ble_att_inc_tx_stat>
                ble_att_truncate_to_mtu(chan, om);
   1ccfa:	4621      	mov	r1, r4
   1ccfc:	9803      	ldr	r0, [sp, #12]
   1ccfe:	f7fe fd59 	bl	1b7b4 <ble_att_truncate_to_mtu>
                hs_status = ble_l2cap_tx(conn, chan, om);
   1cd02:	4622      	mov	r2, r4
   1cd04:	9903      	ldr	r1, [sp, #12]
   1cd06:	9802      	ldr	r0, [sp, #8]
   1cd08:	f7fc fa2f 	bl	1916a <ble_l2cap_tx>
                if (hs_status != 0) {
   1cd0c:	4605      	mov	r5, r0
   1cd0e:	b908      	cbnz	r0, 1cd14 <ble_att_svr_tx_rsp+0x7a>
                om = NULL;
   1cd10:	2400      	movs	r4, #0
   1cd12:	e7db      	b.n	1cccc <ble_att_svr_tx_rsp+0x32>
                    err_status = BLE_ATT_ERR_UNLIKELY;
   1cd14:	260e      	movs	r6, #14
                om = NULL;
   1cd16:	2400      	movs	r4, #0
   1cd18:	e7d8      	b.n	1cccc <ble_att_svr_tx_rsp+0x32>
                om = ble_hs_mbuf_l2cap_pkt();
   1cd1a:	f7fb fd71 	bl	18800 <ble_hs_mbuf_l2cap_pkt>
   1cd1e:	4604      	mov	r4, r0
   1cd20:	e7dc      	b.n	1ccdc <ble_att_svr_tx_rsp+0x42>
   1cd22:	460d      	mov	r5, r1
    os_mbuf_free_chain(om);
   1cd24:	4620      	mov	r0, r4
   1cd26:	f7f4 f8d9 	bl	10edc <os_mbuf_free_chain>
}
   1cd2a:	4628      	mov	r0, r5
   1cd2c:	b005      	add	sp, #20
   1cd2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001cd32 <ble_att_svr_rx_mtu>:
{
   1cd32:	b570      	push	{r4, r5, r6, lr}
   1cd34:	b086      	sub	sp, #24
   1cd36:	4604      	mov	r4, r0
   1cd38:	460d      	mov	r5, r1
    txom = NULL;
   1cd3a:	2300      	movs	r3, #0
   1cd3c:	9303      	str	r3, [sp, #12]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*cmd), &att_err);
   1cd3e:	f10d 020b 	add.w	r2, sp, #11
   1cd42:	2102      	movs	r1, #2
   1cd44:	4628      	mov	r0, r5
   1cd46:	f7ff f9ed 	bl	1c124 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1cd4a:	b180      	cbz	r0, 1cd6e <ble_att_svr_rx_mtu+0x3c>
   1cd4c:	4601      	mov	r1, r0
    mtu = 0;
   1cd4e:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_MTU_REQ,
   1cd50:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1cd54:	2200      	movs	r2, #0
   1cd56:	9201      	str	r2, [sp, #4]
   1cd58:	9300      	str	r3, [sp, #0]
   1cd5a:	2302      	movs	r3, #2
   1cd5c:	9a03      	ldr	r2, [sp, #12]
   1cd5e:	4620      	mov	r0, r4
   1cd60:	f7ff ff9b 	bl	1cc9a <ble_att_svr_tx_rsp>
    if (rc == 0) {
   1cd64:	4605      	mov	r5, r0
   1cd66:	b170      	cbz	r0, 1cd86 <ble_att_svr_rx_mtu+0x54>
}
   1cd68:	4628      	mov	r0, r5
   1cd6a:	b006      	add	sp, #24
   1cd6c:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   1cd6e:	682b      	ldr	r3, [r5, #0]
   1cd70:	681b      	ldr	r3, [r3, #0]
    mtu = le16toh(cmd->bamc_mtu);
   1cd72:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_mtu_rsp(conn_handle, rxom, &txom, &att_err);
   1cd74:	f10d 030b 	add.w	r3, sp, #11
   1cd78:	aa03      	add	r2, sp, #12
   1cd7a:	4629      	mov	r1, r5
   1cd7c:	4620      	mov	r0, r4
   1cd7e:	f7ff f9dd 	bl	1c13c <ble_att_svr_build_mtu_rsp>
   1cd82:	4601      	mov	r1, r0
   1cd84:	e7e4      	b.n	1cd50 <ble_att_svr_rx_mtu+0x1e>
        ble_hs_lock();
   1cd86:	f7f9 fdb9 	bl	168fc <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1cd8a:	aa05      	add	r2, sp, #20
   1cd8c:	a904      	add	r1, sp, #16
   1cd8e:	4620      	mov	r0, r4
   1cd90:	f7fe fcf3 	bl	1b77a <ble_att_conn_chan_find>
        if (rc == 0) {
   1cd94:	4605      	mov	r5, r0
   1cd96:	b148      	cbz	r0, 1cdac <ble_att_svr_rx_mtu+0x7a>
        ble_hs_unlock();
   1cd98:	f7f9 fdb4 	bl	16904 <ble_hs_unlock>
        if (rc == 0) {
   1cd9c:	2d00      	cmp	r5, #0
   1cd9e:	d1e3      	bne.n	1cd68 <ble_att_svr_rx_mtu+0x36>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   1cda0:	4632      	mov	r2, r6
   1cda2:	2104      	movs	r1, #4
   1cda4:	4620      	mov	r0, r4
   1cda6:	f7f7 f9dc 	bl	14162 <ble_gap_mtu_event>
    return rc;
   1cdaa:	e7dd      	b.n	1cd68 <ble_att_svr_rx_mtu+0x36>
            ble_att_set_peer_mtu(chan, mtu);
   1cdac:	4631      	mov	r1, r6
   1cdae:	9805      	ldr	r0, [sp, #20]
   1cdb0:	f7fe fceb 	bl	1b78a <ble_att_set_peer_mtu>
            chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   1cdb4:	9805      	ldr	r0, [sp, #20]
   1cdb6:	7b83      	ldrb	r3, [r0, #14]
   1cdb8:	f043 0301 	orr.w	r3, r3, #1
   1cdbc:	7383      	strb	r3, [r0, #14]
            mtu = ble_att_chan_mtu(chan);
   1cdbe:	f7fe fce9 	bl	1b794 <ble_att_chan_mtu>
   1cdc2:	4606      	mov	r6, r0
   1cdc4:	e7e8      	b.n	1cd98 <ble_att_svr_rx_mtu+0x66>

0001cdc6 <ble_att_svr_rx_find_info>:
{
   1cdc6:	b570      	push	{r4, r5, r6, lr}
   1cdc8:	b084      	sub	sp, #16
   1cdca:	4606      	mov	r6, r0
   1cdcc:	460d      	mov	r5, r1
    txom = NULL;
   1cdce:	2300      	movs	r3, #0
   1cdd0:	9303      	str	r3, [sp, #12]
    att_err = 0;
   1cdd2:	aa04      	add	r2, sp, #16
   1cdd4:	f802 3d05 	strb.w	r3, [r2, #-5]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1cdd8:	2104      	movs	r1, #4
   1cdda:	4628      	mov	r0, r5
   1cddc:	f7ff f9a2 	bl	1c124 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1cde0:	b9c8      	cbnz	r0, 1ce16 <ble_att_svr_rx_find_info+0x50>
    req = (struct ble_att_find_info_req *)(*rxom)->om_data;
   1cde2:	682b      	ldr	r3, [r5, #0]
   1cde4:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bafq_start_handle);
   1cde6:	881c      	ldrh	r4, [r3, #0]
    end_handle = le16toh(req->bafq_end_handle);
   1cde8:	885a      	ldrh	r2, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1cdea:	4294      	cmp	r4, r2
   1cdec:	d800      	bhi.n	1cdf0 <ble_att_svr_rx_find_info+0x2a>
   1cdee:	b924      	cbnz	r4, 1cdfa <ble_att_svr_rx_find_info+0x34>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1cdf0:	2301      	movs	r3, #1
   1cdf2:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = BLE_HS_EBADDATA;
   1cdf6:	210a      	movs	r1, #10
        goto done;
   1cdf8:	e00f      	b.n	1ce1a <ble_att_svr_rx_find_info+0x54>
    rc = ble_att_svr_build_find_info_rsp(conn_handle,
   1cdfa:	f10d 030b 	add.w	r3, sp, #11
   1cdfe:	9301      	str	r3, [sp, #4]
   1ce00:	ab03      	add	r3, sp, #12
   1ce02:	9300      	str	r3, [sp, #0]
   1ce04:	462b      	mov	r3, r5
   1ce06:	4621      	mov	r1, r4
   1ce08:	4630      	mov	r0, r6
   1ce0a:	f7ff fa67 	bl	1c2dc <ble_att_svr_build_find_info_rsp>
    if (rc != 0) {
   1ce0e:	4601      	mov	r1, r0
   1ce10:	b918      	cbnz	r0, 1ce1a <ble_att_svr_rx_find_info+0x54>
    err_handle = 0;
   1ce12:	2400      	movs	r4, #0
   1ce14:	e001      	b.n	1ce1a <ble_att_svr_rx_find_info+0x54>
   1ce16:	4601      	mov	r1, r0
        err_handle = 0;
   1ce18:	2400      	movs	r4, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_FIND_INFO_REQ,
   1ce1a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1ce1e:	9401      	str	r4, [sp, #4]
   1ce20:	9300      	str	r3, [sp, #0]
   1ce22:	2304      	movs	r3, #4
   1ce24:	9a03      	ldr	r2, [sp, #12]
   1ce26:	4630      	mov	r0, r6
   1ce28:	f7ff ff37 	bl	1cc9a <ble_att_svr_tx_rsp>
}
   1ce2c:	b004      	add	sp, #16
   1ce2e:	bd70      	pop	{r4, r5, r6, pc}

0001ce30 <ble_att_svr_rx_find_type_value>:
{
   1ce30:	b570      	push	{r4, r5, r6, lr}
   1ce32:	b088      	sub	sp, #32
   1ce34:	4606      	mov	r6, r0
   1ce36:	460d      	mov	r5, r1
    txom = NULL;
   1ce38:	2300      	movs	r3, #0
   1ce3a:	9306      	str	r3, [sp, #24]
    att_err = 0;
   1ce3c:	aa08      	add	r2, sp, #32
   1ce3e:	f802 3d09 	strb.w	r3, [r2, #-9]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1ce42:	2106      	movs	r1, #6
   1ce44:	4628      	mov	r0, r5
   1ce46:	f7ff f96d 	bl	1c124 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1ce4a:	bb00      	cbnz	r0, 1ce8e <ble_att_svr_rx_find_type_value+0x5e>
    req = (struct ble_att_find_type_value_req *)(*rxom)->om_data;
   1ce4c:	682b      	ldr	r3, [r5, #0]
   1ce4e:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bavq_start_handle);
   1ce50:	881c      	ldrh	r4, [r3, #0]
    end_handle = le16toh(req->bavq_end_handle);
   1ce52:	885a      	ldrh	r2, [r3, #2]
    attr_type = (ble_uuid16_t) BLE_UUID16_INIT(le16toh(req->bavq_attr_type));
   1ce54:	889b      	ldrh	r3, [r3, #4]
   1ce56:	2110      	movs	r1, #16
   1ce58:	f88d 101c 	strb.w	r1, [sp, #28]
   1ce5c:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (start_handle > end_handle || start_handle == 0) {
   1ce60:	4294      	cmp	r4, r2
   1ce62:	d800      	bhi.n	1ce66 <ble_att_svr_rx_find_type_value+0x36>
   1ce64:	b924      	cbnz	r4, 1ce70 <ble_att_svr_rx_find_type_value+0x40>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1ce66:	2301      	movs	r3, #1
   1ce68:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = BLE_HS_EBADDATA;
   1ce6c:	210a      	movs	r1, #10
        goto done;
   1ce6e:	e010      	b.n	1ce92 <ble_att_svr_rx_find_type_value+0x62>
    rc = ble_att_svr_build_find_type_value_rsp(conn_handle, start_handle,
   1ce70:	f10d 0317 	add.w	r3, sp, #23
   1ce74:	9302      	str	r3, [sp, #8]
   1ce76:	ab06      	add	r3, sp, #24
   1ce78:	9301      	str	r3, [sp, #4]
   1ce7a:	9500      	str	r5, [sp, #0]
   1ce7c:	9b07      	ldr	r3, [sp, #28]
   1ce7e:	4621      	mov	r1, r4
   1ce80:	4630      	mov	r0, r6
   1ce82:	f7ff fb97 	bl	1c5b4 <ble_att_svr_build_find_type_value_rsp>
    if (rc != 0) {
   1ce86:	4601      	mov	r1, r0
   1ce88:	b918      	cbnz	r0, 1ce92 <ble_att_svr_rx_find_type_value+0x62>
    err_handle = 0;
   1ce8a:	2400      	movs	r4, #0
   1ce8c:	e001      	b.n	1ce92 <ble_att_svr_rx_find_type_value+0x62>
   1ce8e:	4601      	mov	r1, r0
   1ce90:	2400      	movs	r4, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   1ce92:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1ce96:	9401      	str	r4, [sp, #4]
   1ce98:	9300      	str	r3, [sp, #0]
   1ce9a:	2306      	movs	r3, #6
   1ce9c:	9a06      	ldr	r2, [sp, #24]
   1ce9e:	4630      	mov	r0, r6
   1cea0:	f7ff fefb 	bl	1cc9a <ble_att_svr_tx_rsp>
}
   1cea4:	b008      	add	sp, #32
   1cea6:	bd70      	pop	{r4, r5, r6, pc}

0001cea8 <ble_att_svr_rx_read_type>:
{
   1cea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ceac:	b08c      	sub	sp, #48	; 0x30
   1ceae:	4606      	mov	r6, r0
   1ceb0:	460d      	mov	r5, r1
    txom = NULL;
   1ceb2:	2300      	movs	r3, #0
   1ceb4:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   1ceb6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    att_err = 0;
   1ceba:	f88d 3013 	strb.w	r3, [sp, #19]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   1cebe:	680b      	ldr	r3, [r1, #0]
   1cec0:	8a1c      	ldrh	r4, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   1cec2:	2c06      	cmp	r4, #6
   1cec4:	d010      	beq.n	1cee8 <ble_att_svr_rx_read_type+0x40>
   1cec6:	2c14      	cmp	r4, #20
   1cec8:	d00e      	beq.n	1cee8 <ble_att_svr_rx_read_type+0x40>
        rc = BLE_HS_EBADDATA;
   1ceca:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_TYPE_REQ,
   1cecc:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1ced0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   1ced4:	9201      	str	r2, [sp, #4]
   1ced6:	9300      	str	r3, [sp, #0]
   1ced8:	2308      	movs	r3, #8
   1ceda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1cedc:	4630      	mov	r0, r6
   1cede:	f7ff fedc 	bl	1cc9a <ble_att_svr_tx_rsp>
}
   1cee2:	b00c      	add	sp, #48	; 0x30
   1cee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   1cee8:	f10d 0213 	add.w	r2, sp, #19
   1ceec:	4621      	mov	r1, r4
   1ceee:	4628      	mov	r0, r5
   1cef0:	f7ff f918 	bl	1c124 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1cef4:	4601      	mov	r1, r0
   1cef6:	2800      	cmp	r0, #0
   1cef8:	d1e8      	bne.n	1cecc <ble_att_svr_rx_read_type+0x24>
    req = (struct ble_att_read_type_req *)(*rxom)->om_data;
   1cefa:	6829      	ldr	r1, [r5, #0]
   1cefc:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->batq_start_handle);
   1cefe:	881a      	ldrh	r2, [r3, #0]
   1cf00:	b297      	uxth	r7, r2
    end_handle = le16toh(req->batq_end_handle);
   1cf02:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1cf06:	4547      	cmp	r7, r8
   1cf08:	d800      	bhi.n	1cf0c <ble_att_svr_rx_read_type+0x64>
   1cf0a:	b937      	cbnz	r7, 1cf1a <ble_att_svr_rx_read_type+0x72>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1cf0c:	2301      	movs	r3, #1
   1cf0e:	f88d 3013 	strb.w	r3, [sp, #19]
        err_handle = start_handle;
   1cf12:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        rc = BLE_HS_EBADDATA;
   1cf16:	210a      	movs	r1, #10
        goto done;
   1cf18:	e7d8      	b.n	1cecc <ble_att_svr_rx_read_type+0x24>
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req),
   1cf1a:	1f23      	subs	r3, r4, #4
   1cf1c:	2204      	movs	r2, #4
   1cf1e:	a805      	add	r0, sp, #20
   1cf20:	f7fe fb68 	bl	1b5f4 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   1cf24:	b118      	cbz	r0, 1cf2e <ble_att_svr_rx_read_type+0x86>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   1cf26:	2104      	movs	r1, #4
   1cf28:	f88d 1013 	strb.w	r1, [sp, #19]
        goto done;
   1cf2c:	e7ce      	b.n	1cecc <ble_att_svr_rx_read_type+0x24>
    rc = ble_att_svr_build_read_type_rsp(conn_handle, start_handle, end_handle,
   1cf2e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   1cf32:	9303      	str	r3, [sp, #12]
   1cf34:	f10d 0313 	add.w	r3, sp, #19
   1cf38:	9302      	str	r3, [sp, #8]
   1cf3a:	ab0b      	add	r3, sp, #44	; 0x2c
   1cf3c:	9301      	str	r3, [sp, #4]
   1cf3e:	9500      	str	r5, [sp, #0]
   1cf40:	ab05      	add	r3, sp, #20
   1cf42:	4642      	mov	r2, r8
   1cf44:	4639      	mov	r1, r7
   1cf46:	4630      	mov	r0, r6
   1cf48:	f7ff fd7c 	bl	1ca44 <ble_att_svr_build_read_type_rsp>
   1cf4c:	4601      	mov	r1, r0
   1cf4e:	e7bd      	b.n	1cecc <ble_att_svr_rx_read_type+0x24>

0001cf50 <ble_att_svr_rx_read>:
{
   1cf50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf54:	b084      	sub	sp, #16
   1cf56:	4607      	mov	r7, r0
   1cf58:	460e      	mov	r6, r1
    att_err = 0;
   1cf5a:	aa04      	add	r2, sp, #16
   1cf5c:	2300      	movs	r3, #0
   1cf5e:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1cf62:	2102      	movs	r1, #2
   1cf64:	4630      	mov	r0, r6
   1cf66:	f7ff f8dd 	bl	1c124 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1cf6a:	b170      	cbz	r0, 1cf8a <ble_att_svr_rx_read+0x3a>
   1cf6c:	4601      	mov	r1, r0
    err_handle = 0;
   1cf6e:	2500      	movs	r5, #0
    txom = NULL;
   1cf70:	462c      	mov	r4, r5
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_REQ,
   1cf72:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1cf76:	9501      	str	r5, [sp, #4]
   1cf78:	9300      	str	r3, [sp, #0]
   1cf7a:	230a      	movs	r3, #10
   1cf7c:	4622      	mov	r2, r4
   1cf7e:	4638      	mov	r0, r7
   1cf80:	f7ff fe8b 	bl	1cc9a <ble_att_svr_tx_rsp>
}
   1cf84:	b004      	add	sp, #16
   1cf86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_read_req *)(*rxom)->om_data;
   1cf8a:	6834      	ldr	r4, [r6, #0]
   1cf8c:	6823      	ldr	r3, [r4, #0]
    err_handle = le16toh(req->barq_handle);
   1cf8e:	881d      	ldrh	r5, [r3, #0]
    *rxom = NULL;
   1cf90:	f04f 0800 	mov.w	r8, #0
   1cf94:	f8c6 8000 	str.w	r8, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1cf98:	8a21      	ldrh	r1, [r4, #16]
   1cf9a:	4620      	mov	r0, r4
   1cf9c:	f7f4 f8d3 	bl	11146 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_RSP, 0, txom) == NULL) {
   1cfa0:	4622      	mov	r2, r4
   1cfa2:	4641      	mov	r1, r8
   1cfa4:	200b      	movs	r0, #11
   1cfa6:	f7fe ff23 	bl	1bdf0 <ble_att_cmd_prepare>
   1cfaa:	b150      	cbz	r0, 1cfc2 <ble_att_svr_rx_read+0x72>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, 0, txom, &att_err);
   1cfac:	f10d 030f 	add.w	r3, sp, #15
   1cfb0:	9300      	str	r3, [sp, #0]
   1cfb2:	4623      	mov	r3, r4
   1cfb4:	2200      	movs	r2, #0
   1cfb6:	4629      	mov	r1, r5
   1cfb8:	4638      	mov	r0, r7
   1cfba:	f7ff fde9 	bl	1cb90 <ble_att_svr_read_handle>
   1cfbe:	4601      	mov	r1, r0
done:
   1cfc0:	e7d7      	b.n	1cf72 <ble_att_svr_rx_read+0x22>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1cfc2:	2311      	movs	r3, #17
   1cfc4:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   1cfc8:	2106      	movs	r1, #6
        goto done;
   1cfca:	e7d2      	b.n	1cf72 <ble_att_svr_rx_read+0x22>

0001cfcc <ble_att_svr_rx_read_blob>:
{
   1cfcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cfd0:	b085      	sub	sp, #20
   1cfd2:	4607      	mov	r7, r0
   1cfd4:	460e      	mov	r6, r1
    att_err = 0;
   1cfd6:	aa04      	add	r2, sp, #16
   1cfd8:	2300      	movs	r3, #0
   1cfda:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1cfde:	2104      	movs	r1, #4
   1cfe0:	4630      	mov	r0, r6
   1cfe2:	f7ff f89f 	bl	1c124 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1cfe6:	b170      	cbz	r0, 1d006 <ble_att_svr_rx_read_blob+0x3a>
   1cfe8:	4601      	mov	r1, r0
    err_handle = 0;
   1cfea:	2500      	movs	r5, #0
    txom = NULL;
   1cfec:	462c      	mov	r4, r5
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_BLOB_REQ,
   1cfee:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1cff2:	9501      	str	r5, [sp, #4]
   1cff4:	9300      	str	r3, [sp, #0]
   1cff6:	230c      	movs	r3, #12
   1cff8:	4622      	mov	r2, r4
   1cffa:	4638      	mov	r0, r7
   1cffc:	f7ff fe4d 	bl	1cc9a <ble_att_svr_tx_rsp>
}
   1d000:	b005      	add	sp, #20
   1d002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_read_blob_req *)(*rxom)->om_data;
   1d006:	6834      	ldr	r4, [r6, #0]
   1d008:	6823      	ldr	r3, [r4, #0]
    err_handle = le16toh(req->babq_handle);
   1d00a:	881d      	ldrh	r5, [r3, #0]
    offset = le16toh(req->babq_offset);
   1d00c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    *rxom = NULL;
   1d010:	f04f 0800 	mov.w	r8, #0
   1d014:	f8c6 8000 	str.w	r8, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1d018:	8a21      	ldrh	r1, [r4, #16]
   1d01a:	4620      	mov	r0, r4
   1d01c:	f7f4 f893 	bl	11146 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_BLOB_RSP, 0, txom) == NULL) {
   1d020:	4622      	mov	r2, r4
   1d022:	4641      	mov	r1, r8
   1d024:	200d      	movs	r0, #13
   1d026:	f7fe fee3 	bl	1bdf0 <ble_att_cmd_prepare>
   1d02a:	b150      	cbz	r0, 1d042 <ble_att_svr_rx_read_blob+0x76>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, offset,
   1d02c:	f10d 030f 	add.w	r3, sp, #15
   1d030:	9300      	str	r3, [sp, #0]
   1d032:	4623      	mov	r3, r4
   1d034:	464a      	mov	r2, r9
   1d036:	4629      	mov	r1, r5
   1d038:	4638      	mov	r0, r7
   1d03a:	f7ff fda9 	bl	1cb90 <ble_att_svr_read_handle>
   1d03e:	4601      	mov	r1, r0
   1d040:	e7d5      	b.n	1cfee <ble_att_svr_rx_read_blob+0x22>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d042:	2311      	movs	r3, #17
   1d044:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   1d048:	2106      	movs	r1, #6
        goto done;
   1d04a:	e7d0      	b.n	1cfee <ble_att_svr_rx_read_blob+0x22>

0001d04c <ble_att_svr_rx_read_mult>:
{
   1d04c:	b510      	push	{r4, lr}
   1d04e:	b084      	sub	sp, #16
   1d050:	4604      	mov	r4, r0
    txom = NULL;
   1d052:	2200      	movs	r2, #0
   1d054:	9203      	str	r2, [sp, #12]
    err_handle = 0;
   1d056:	f8ad 200a 	strh.w	r2, [sp, #10]
    att_err = 0;
   1d05a:	ab04      	add	r3, sp, #16
   1d05c:	f803 2d07 	strb.w	r2, [r3, #-7]!
    rc = ble_att_svr_build_read_mult_rsp(conn_handle, rxom, &txom, &att_err,
   1d060:	f10d 020a 	add.w	r2, sp, #10
   1d064:	9200      	str	r2, [sp, #0]
   1d066:	aa03      	add	r2, sp, #12
   1d068:	f7ff fdac 	bl	1cbc4 <ble_att_svr_build_read_mult_rsp>
    return ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_MULT_REQ,
   1d06c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1d070:	9301      	str	r3, [sp, #4]
   1d072:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1d076:	9300      	str	r3, [sp, #0]
   1d078:	230e      	movs	r3, #14
   1d07a:	9a03      	ldr	r2, [sp, #12]
   1d07c:	4601      	mov	r1, r0
   1d07e:	4620      	mov	r0, r4
   1d080:	f7ff fe0b 	bl	1cc9a <ble_att_svr_tx_rsp>
}
   1d084:	b004      	add	sp, #16
   1d086:	bd10      	pop	{r4, pc}

0001d088 <ble_att_svr_rx_read_group_type>:
{
   1d088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d08c:	b08c      	sub	sp, #48	; 0x30
   1d08e:	4605      	mov	r5, r0
   1d090:	460c      	mov	r4, r1
    txom = NULL;
   1d092:	2300      	movs	r3, #0
   1d094:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   1d096:	f8ad 3016 	strh.w	r3, [sp, #22]
    att_err = 0;
   1d09a:	f88d 3015 	strb.w	r3, [sp, #21]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   1d09e:	680b      	ldr	r3, [r1, #0]
   1d0a0:	8a19      	ldrh	r1, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   1d0a2:	2906      	cmp	r1, #6
   1d0a4:	d010      	beq.n	1d0c8 <ble_att_svr_rx_read_group_type+0x40>
   1d0a6:	2914      	cmp	r1, #20
   1d0a8:	d00e      	beq.n	1d0c8 <ble_att_svr_rx_read_group_type+0x40>
        rc = BLE_HS_EBADDATA;
   1d0aa:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   1d0ac:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1d0b0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1d0b4:	9201      	str	r2, [sp, #4]
   1d0b6:	9300      	str	r3, [sp, #0]
   1d0b8:	2310      	movs	r3, #16
   1d0ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d0bc:	4628      	mov	r0, r5
   1d0be:	f7ff fdec 	bl	1cc9a <ble_att_svr_tx_rsp>
}
   1d0c2:	b00c      	add	sp, #48	; 0x30
   1d0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   1d0c8:	f10d 0215 	add.w	r2, sp, #21
   1d0cc:	4620      	mov	r0, r4
   1d0ce:	f7ff f829 	bl	1c124 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1d0d2:	4601      	mov	r1, r0
   1d0d4:	2800      	cmp	r0, #0
   1d0d6:	d1e9      	bne.n	1d0ac <ble_att_svr_rx_read_group_type+0x24>
    req = (struct ble_att_read_group_type_req *)(*rxom)->om_data;
   1d0d8:	6821      	ldr	r1, [r4, #0]
   1d0da:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->bagq_start_handle);
   1d0dc:	881e      	ldrh	r6, [r3, #0]
   1d0de:	b2b7      	uxth	r7, r6
    end_handle = le16toh(req->bagq_end_handle);
   1d0e0:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1d0e4:	4547      	cmp	r7, r8
   1d0e6:	d800      	bhi.n	1d0ea <ble_att_svr_rx_read_group_type+0x62>
   1d0e8:	b937      	cbnz	r7, 1d0f8 <ble_att_svr_rx_read_group_type+0x70>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1d0ea:	2301      	movs	r3, #1
   1d0ec:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   1d0f0:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   1d0f4:	210a      	movs	r1, #10
        goto done;
   1d0f6:	e7d9      	b.n	1d0ac <ble_att_svr_rx_read_group_type+0x24>
    om_uuid_len = OS_MBUF_PKTHDR(*rxom)->omp_len - sizeof(*req);
   1d0f8:	8a0b      	ldrh	r3, [r1, #16]
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req), om_uuid_len);
   1d0fa:	3b04      	subs	r3, #4
   1d0fc:	2204      	movs	r2, #4
   1d0fe:	a806      	add	r0, sp, #24
   1d100:	f7fe fa78 	bl	1b5f4 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   1d104:	b130      	cbz	r0, 1d114 <ble_att_svr_rx_read_group_type+0x8c>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   1d106:	2304      	movs	r3, #4
   1d108:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   1d10c:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   1d110:	210a      	movs	r1, #10
        goto done;
   1d112:	e7cb      	b.n	1d0ac <ble_att_svr_rx_read_group_type+0x24>
    if (!ble_att_svr_is_valid_read_group_type(&uuid.u)) {
   1d114:	a806      	add	r0, sp, #24
   1d116:	f7ff f971 	bl	1c3fc <ble_att_svr_is_valid_read_group_type>
   1d11a:	b928      	cbnz	r0, 1d128 <ble_att_svr_rx_read_group_type+0xa0>
        att_err = BLE_ATT_ERR_UNSUPPORTED_GROUP;
   1d11c:	2110      	movs	r1, #16
   1d11e:	f88d 1015 	strb.w	r1, [sp, #21]
        err_handle = start_handle;
   1d122:	f8ad 6016 	strh.w	r6, [sp, #22]
        goto done;
   1d126:	e7c1      	b.n	1d0ac <ble_att_svr_rx_read_group_type+0x24>
    rc = ble_att_svr_build_read_group_type_rsp(conn_handle, start_handle,
   1d128:	f10d 0316 	add.w	r3, sp, #22
   1d12c:	9303      	str	r3, [sp, #12]
   1d12e:	f10d 0315 	add.w	r3, sp, #21
   1d132:	9302      	str	r3, [sp, #8]
   1d134:	ab0b      	add	r3, sp, #44	; 0x2c
   1d136:	9301      	str	r3, [sp, #4]
   1d138:	9400      	str	r4, [sp, #0]
   1d13a:	ab06      	add	r3, sp, #24
   1d13c:	4642      	mov	r2, r8
   1d13e:	4639      	mov	r1, r7
   1d140:	4628      	mov	r0, r5
   1d142:	f7ff fa85 	bl	1c650 <ble_att_svr_build_read_group_type_rsp>
   1d146:	4601      	mov	r1, r0
   1d148:	e7b0      	b.n	1d0ac <ble_att_svr_rx_read_group_type+0x24>

0001d14a <ble_att_svr_rx_write>:
{
   1d14a:	b570      	push	{r4, r5, r6, lr}
   1d14c:	b084      	sub	sp, #16
   1d14e:	4605      	mov	r5, r0
   1d150:	460c      	mov	r4, r1
    txom = NULL;
   1d152:	2300      	movs	r3, #0
   1d154:	9303      	str	r3, [sp, #12]
    att_err = 0;
   1d156:	aa04      	add	r2, sp, #16
   1d158:	f802 3d05 	strb.w	r3, [r2, #-5]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1d15c:	2102      	movs	r1, #2
   1d15e:	4620      	mov	r0, r4
   1d160:	f7fe ffe0 	bl	1c124 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1d164:	b160      	cbz	r0, 1d180 <ble_att_svr_rx_write+0x36>
   1d166:	4601      	mov	r1, r0
    handle = 0;
   1d168:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_WRITE_REQ,
   1d16a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1d16e:	9601      	str	r6, [sp, #4]
   1d170:	9300      	str	r3, [sp, #0]
   1d172:	2312      	movs	r3, #18
   1d174:	9a03      	ldr	r2, [sp, #12]
   1d176:	4628      	mov	r0, r5
   1d178:	f7ff fd8f 	bl	1cc9a <ble_att_svr_tx_rsp>
}
   1d17c:	b004      	add	sp, #16
   1d17e:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   1d180:	6823      	ldr	r3, [r4, #0]
   1d182:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->bawq_handle);
   1d184:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_write_rsp(rxom, &txom, &att_err);
   1d186:	f10d 020b 	add.w	r2, sp, #11
   1d18a:	a903      	add	r1, sp, #12
   1d18c:	4620      	mov	r0, r4
   1d18e:	f7ff f81b 	bl	1c1c8 <ble_att_svr_build_write_rsp>
    if (rc != 0) {
   1d192:	4601      	mov	r1, r0
   1d194:	2800      	cmp	r0, #0
   1d196:	d1e8      	bne.n	1d16a <ble_att_svr_rx_write+0x20>
    os_mbuf_adj(*rxom, sizeof(*req));
   1d198:	2102      	movs	r1, #2
   1d19a:	6820      	ldr	r0, [r4, #0]
   1d19c:	f7f3 ffd3 	bl	11146 <os_mbuf_adj>
    rc = ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   1d1a0:	f10d 030b 	add.w	r3, sp, #11
   1d1a4:	9300      	str	r3, [sp, #0]
   1d1a6:	4623      	mov	r3, r4
   1d1a8:	2200      	movs	r2, #0
   1d1aa:	4631      	mov	r1, r6
   1d1ac:	4628      	mov	r0, r5
   1d1ae:	f7ff fbe3 	bl	1c978 <ble_att_svr_write_handle>
   1d1b2:	4601      	mov	r1, r0
   1d1b4:	e7d9      	b.n	1d16a <ble_att_svr_rx_write+0x20>

0001d1b6 <ble_att_svr_rx_write_no_rsp>:
{
   1d1b6:	b570      	push	{r4, r5, r6, lr}
   1d1b8:	b084      	sub	sp, #16
   1d1ba:	4605      	mov	r5, r0
   1d1bc:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1d1be:	f10d 020f 	add.w	r2, sp, #15
   1d1c2:	2102      	movs	r1, #2
   1d1c4:	4620      	mov	r0, r4
   1d1c6:	f7fe ffad 	bl	1c124 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1d1ca:	4603      	mov	r3, r0
   1d1cc:	b110      	cbz	r0, 1d1d4 <ble_att_svr_rx_write_no_rsp+0x1e>
}
   1d1ce:	4618      	mov	r0, r3
   1d1d0:	b004      	add	sp, #16
   1d1d2:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   1d1d4:	6820      	ldr	r0, [r4, #0]
   1d1d6:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->bawq_handle);
   1d1d8:	881e      	ldrh	r6, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*req));
   1d1da:	2102      	movs	r1, #2
   1d1dc:	f7f3 ffb3 	bl	11146 <os_mbuf_adj>
    return ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   1d1e0:	f10d 030f 	add.w	r3, sp, #15
   1d1e4:	9300      	str	r3, [sp, #0]
   1d1e6:	4623      	mov	r3, r4
   1d1e8:	2200      	movs	r2, #0
   1d1ea:	4631      	mov	r1, r6
   1d1ec:	4628      	mov	r0, r5
   1d1ee:	f7ff fbc3 	bl	1c978 <ble_att_svr_write_handle>
   1d1f2:	4603      	mov	r3, r0
   1d1f4:	e7eb      	b.n	1d1ce <ble_att_svr_rx_write_no_rsp+0x18>

0001d1f6 <ble_att_svr_prep_clear>:
{
   1d1f6:	b510      	push	{r4, lr}
   1d1f8:	4604      	mov	r4, r0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1d1fa:	e003      	b.n	1d204 <ble_att_svr_prep_clear+0xe>
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   1d1fc:	6803      	ldr	r3, [r0, #0]
   1d1fe:	6023      	str	r3, [r4, #0]
        ble_att_svr_prep_free(entry);
   1d200:	f7ff fae8 	bl	1c7d4 <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1d204:	6820      	ldr	r0, [r4, #0]
   1d206:	2800      	cmp	r0, #0
   1d208:	d1f8      	bne.n	1d1fc <ble_att_svr_prep_clear+0x6>
}
   1d20a:	bd10      	pop	{r4, pc}

0001d20c <ble_att_svr_rx_prep_write>:
{
   1d20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d210:	b084      	sub	sp, #16
   1d212:	4607      	mov	r7, r0
   1d214:	460d      	mov	r5, r1
    att_err = 0;
   1d216:	aa04      	add	r2, sp, #16
   1d218:	2300      	movs	r3, #0
   1d21a:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1d21e:	2104      	movs	r1, #4
   1d220:	4628      	mov	r0, r5
   1d222:	f7fe ff7f 	bl	1c124 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1d226:	b178      	cbz	r0, 1d248 <ble_att_svr_rx_prep_write+0x3c>
   1d228:	4606      	mov	r6, r0
    err_handle = 0;
   1d22a:	2400      	movs	r4, #0
    txom = NULL;
   1d22c:	46a0      	mov	r8, r4
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_PREP_WRITE_REQ,
   1d22e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1d232:	9401      	str	r4, [sp, #4]
   1d234:	9300      	str	r3, [sp, #0]
   1d236:	2316      	movs	r3, #22
   1d238:	4642      	mov	r2, r8
   1d23a:	4631      	mov	r1, r6
   1d23c:	4638      	mov	r0, r7
   1d23e:	f7ff fd2c 	bl	1cc9a <ble_att_svr_tx_rsp>
}
   1d242:	b004      	add	sp, #16
   1d244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   1d248:	682b      	ldr	r3, [r5, #0]
   1d24a:	f8d3 8000 	ldr.w	r8, [r3]
    err_handle = le16toh(req->bapc_handle);
   1d24e:	f8b8 4000 	ldrh.w	r4, [r8]
    attr_entry = ble_att_svr_find_by_handle(le16toh(req->bapc_handle));
   1d252:	4620      	mov	r0, r4
   1d254:	f7ff fb84 	bl	1c960 <ble_att_svr_find_by_handle>
    if (attr_entry == NULL) {
   1d258:	4602      	mov	r2, r0
   1d25a:	b150      	cbz	r0, 1d272 <ble_att_svr_rx_prep_write+0x66>
    rc = ble_att_svr_check_perms(conn_handle, 0, attr_entry, &att_err);
   1d25c:	f10d 030f 	add.w	r3, sp, #15
   1d260:	2100      	movs	r1, #0
   1d262:	4638      	mov	r0, r7
   1d264:	f7fe fe73 	bl	1bf4e <ble_att_svr_check_perms>
    if (rc != 0) {
   1d268:	4606      	mov	r6, r0
   1d26a:	b148      	cbz	r0, 1d280 <ble_att_svr_rx_prep_write+0x74>
    txom = NULL;
   1d26c:	f04f 0800 	mov.w	r8, #0
   1d270:	e7dd      	b.n	1d22e <ble_att_svr_rx_prep_write+0x22>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1d272:	2301      	movs	r3, #1
   1d274:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOENT;
   1d278:	2605      	movs	r6, #5
    txom = NULL;
   1d27a:	f04f 0800 	mov.w	r8, #0
        goto done;
   1d27e:	e7d6      	b.n	1d22e <ble_att_svr_rx_prep_write+0x22>
    ble_hs_lock();
   1d280:	f7f9 fb3c 	bl	168fc <ble_hs_lock>
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   1d284:	f8b8 1000 	ldrh.w	r1, [r8]
                                       le16toh(req->bapc_offset), *rxom,
   1d288:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   1d28c:	f10d 030f 	add.w	r3, sp, #15
   1d290:	9300      	str	r3, [sp, #0]
   1d292:	682b      	ldr	r3, [r5, #0]
   1d294:	4638      	mov	r0, r7
   1d296:	f7ff fac9 	bl	1c82c <ble_att_svr_insert_prep_entry>
   1d29a:	4606      	mov	r6, r0
    ble_hs_unlock();
   1d29c:	f7f9 fb32 	bl	16904 <ble_hs_unlock>
    txom = *rxom;
   1d2a0:	f8d5 8000 	ldr.w	r8, [r5]
    *rxom = NULL;
   1d2a4:	2300      	movs	r3, #0
   1d2a6:	602b      	str	r3, [r5, #0]
    if (rc != 0) {
   1d2a8:	2e00      	cmp	r6, #0
   1d2aa:	d1c0      	bne.n	1d22e <ble_att_svr_rx_prep_write+0x22>
    os_mbuf_prepend(txom, 1);
   1d2ac:	2101      	movs	r1, #1
   1d2ae:	4640      	mov	r0, r8
   1d2b0:	f7f4 f838 	bl	11324 <os_mbuf_prepend>
    txom->om_data[0] = BLE_ATT_OP_PREP_WRITE_RSP;
   1d2b4:	f8d8 3000 	ldr.w	r3, [r8]
   1d2b8:	2217      	movs	r2, #23
   1d2ba:	701a      	strb	r2, [r3, #0]
   1d2bc:	e7b7      	b.n	1d22e <ble_att_svr_rx_prep_write+0x22>

0001d2be <ble_att_svr_rx_exec_write>:
{
   1d2be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d2c2:	b085      	sub	sp, #20
   1d2c4:	4607      	mov	r7, r0
   1d2c6:	460e      	mov	r6, r1
    err_handle = 0;
   1d2c8:	2300      	movs	r3, #0
   1d2ca:	f8ad 300a 	strh.w	r3, [sp, #10]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1d2ce:	f10d 0209 	add.w	r2, sp, #9
   1d2d2:	2101      	movs	r1, #1
   1d2d4:	4630      	mov	r0, r6
   1d2d6:	f7fe ff25 	bl	1c124 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1d2da:	4605      	mov	r5, r0
   1d2dc:	b190      	cbz	r0, 1d304 <ble_att_svr_rx_exec_write+0x46>
        flags = 0;
   1d2de:	f04f 0800 	mov.w	r8, #0
    txom = NULL;
   1d2e2:	4644      	mov	r4, r8
    if (rc == 0) {
   1d2e4:	b335      	cbz	r5, 1d334 <ble_att_svr_rx_exec_write+0x76>
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_EXEC_WRITE_REQ,
   1d2e6:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1d2ea:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1d2ee:	9201      	str	r2, [sp, #4]
   1d2f0:	9300      	str	r3, [sp, #0]
   1d2f2:	2318      	movs	r3, #24
   1d2f4:	4622      	mov	r2, r4
   1d2f6:	4629      	mov	r1, r5
   1d2f8:	4638      	mov	r0, r7
   1d2fa:	f7ff fcce 	bl	1cc9a <ble_att_svr_tx_rsp>
}
   1d2fe:	b005      	add	sp, #20
   1d300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_exec_write_req *)(*rxom)->om_data;
   1d304:	6834      	ldr	r4, [r6, #0]
   1d306:	6823      	ldr	r3, [r4, #0]
    flags = req->baeq_flags;
   1d308:	f893 8000 	ldrb.w	r8, [r3]
    *rxom = NULL;
   1d30c:	f04f 0900 	mov.w	r9, #0
   1d310:	f8c6 9000 	str.w	r9, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1d314:	8a21      	ldrh	r1, [r4, #16]
   1d316:	4620      	mov	r0, r4
   1d318:	f7f3 ff15 	bl	11146 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_EXEC_WRITE_RSP, 0, txom) == NULL) {
   1d31c:	4622      	mov	r2, r4
   1d31e:	4649      	mov	r1, r9
   1d320:	2019      	movs	r0, #25
   1d322:	f7fe fd65 	bl	1bdf0 <ble_att_cmd_prepare>
   1d326:	2800      	cmp	r0, #0
   1d328:	d1dc      	bne.n	1d2e4 <ble_att_svr_rx_exec_write+0x26>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1d32a:	2311      	movs	r3, #17
   1d32c:	f88d 3009 	strb.w	r3, [sp, #9]
        rc = BLE_HS_ENOMEM;
   1d330:	2506      	movs	r5, #6
        goto done;
   1d332:	e7d7      	b.n	1d2e4 <ble_att_svr_rx_exec_write+0x26>
        ble_hs_lock();
   1d334:	f7f9 fae2 	bl	168fc <ble_hs_lock>
        conn = ble_hs_conn_find_assert(conn_handle);
   1d338:	4638      	mov	r0, r7
   1d33a:	f7fa f8cd 	bl	174d8 <ble_hs_conn_find_assert>
        prep_list = conn->bhc_att_svr.basc_prep_list;
   1d33e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1d340:	9303      	str	r3, [sp, #12]
        SLIST_INIT(&conn->bhc_att_svr.basc_prep_list);
   1d342:	2300      	movs	r3, #0
   1d344:	6443      	str	r3, [r0, #68]	; 0x44
        ble_hs_unlock();
   1d346:	f7f9 fadd 	bl	16904 <ble_hs_unlock>
        if (flags) {
   1d34a:	f1b8 0f00 	cmp.w	r8, #0
   1d34e:	d103      	bne.n	1d358 <ble_att_svr_rx_exec_write+0x9a>
        ble_att_svr_prep_clear(&prep_list);
   1d350:	a803      	add	r0, sp, #12
   1d352:	f7ff ff50 	bl	1d1f6 <ble_att_svr_prep_clear>
   1d356:	e7c6      	b.n	1d2e6 <ble_att_svr_rx_exec_write+0x28>
            att_err = ble_att_svr_prep_write(conn_handle, &prep_list,
   1d358:	f10d 020a 	add.w	r2, sp, #10
   1d35c:	a903      	add	r1, sp, #12
   1d35e:	4638      	mov	r0, r7
   1d360:	f7ff fb24 	bl	1c9ac <ble_att_svr_prep_write>
   1d364:	b2c0      	uxtb	r0, r0
   1d366:	f88d 0009 	strb.w	r0, [sp, #9]
            if (att_err != 0) {
   1d36a:	2800      	cmp	r0, #0
   1d36c:	d0f0      	beq.n	1d350 <ble_att_svr_rx_exec_write+0x92>
                rc = BLE_HS_EAPP;
   1d36e:	2509      	movs	r5, #9
   1d370:	e7ee      	b.n	1d350 <ble_att_svr_rx_exec_write+0x92>

0001d372 <ble_att_svr_rx_notify>:
{
   1d372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d374:	4607      	mov	r7, r0
   1d376:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   1d378:	2200      	movs	r2, #0
   1d37a:	2102      	movs	r1, #2
   1d37c:	4620      	mov	r0, r4
   1d37e:	f7fe fed1 	bl	1c124 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1d382:	b988      	cbnz	r0, 1d3a8 <ble_att_svr_rx_notify+0x36>
   1d384:	4605      	mov	r5, r0
    req = (struct ble_att_notify_req *)(*rxom)->om_data;
   1d386:	6820      	ldr	r0, [r4, #0]
   1d388:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->banq_handle);
   1d38a:	881e      	ldrh	r6, [r3, #0]
    if (handle == 0) {
   1d38c:	b176      	cbz	r6, 1d3ac <ble_att_svr_rx_notify+0x3a>
    os_mbuf_adj(*rxom, sizeof(*req));
   1d38e:	2102      	movs	r1, #2
   1d390:	f7f3 fed9 	bl	11146 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 0);
   1d394:	2300      	movs	r3, #0
   1d396:	6822      	ldr	r2, [r4, #0]
   1d398:	4631      	mov	r1, r6
   1d39a:	4638      	mov	r0, r7
   1d39c:	f7f6 fe66 	bl	1406c <ble_gap_notify_rx_event>
    *rxom = NULL;
   1d3a0:	2300      	movs	r3, #0
   1d3a2:	6023      	str	r3, [r4, #0]
}
   1d3a4:	4628      	mov	r0, r5
   1d3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1d3a8:	2506      	movs	r5, #6
   1d3aa:	e7fb      	b.n	1d3a4 <ble_att_svr_rx_notify+0x32>
        return BLE_HS_EBADDATA;
   1d3ac:	250a      	movs	r5, #10
   1d3ae:	e7f9      	b.n	1d3a4 <ble_att_svr_rx_notify+0x32>

0001d3b0 <ble_att_svr_rx_indicate>:
{
   1d3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d3b2:	b085      	sub	sp, #20
   1d3b4:	4607      	mov	r7, r0
   1d3b6:	460c      	mov	r4, r1
    txom = NULL;
   1d3b8:	2200      	movs	r2, #0
   1d3ba:	9203      	str	r2, [sp, #12]
    att_err = 0;
   1d3bc:	f88d 200b 	strb.w	r2, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   1d3c0:	2102      	movs	r1, #2
   1d3c2:	4620      	mov	r0, r4
   1d3c4:	f7fe feae 	bl	1c124 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1d3c8:	b9d0      	cbnz	r0, 1d400 <ble_att_svr_rx_indicate+0x50>
    req = (struct ble_att_indicate_req *)(*rxom)->om_data;
   1d3ca:	6823      	ldr	r3, [r4, #0]
   1d3cc:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->baiq_handle);
   1d3ce:	881d      	ldrh	r5, [r3, #0]
    if (handle == 0) {
   1d3d0:	b90d      	cbnz	r5, 1d3d6 <ble_att_svr_rx_indicate+0x26>
        rc = BLE_HS_EBADDATA;
   1d3d2:	260a      	movs	r6, #10
   1d3d4:	e016      	b.n	1d404 <ble_att_svr_rx_indicate+0x54>
    rc = ble_att_svr_build_indicate_rsp(rxom, &txom, &att_err);
   1d3d6:	f10d 020b 	add.w	r2, sp, #11
   1d3da:	a903      	add	r1, sp, #12
   1d3dc:	4620      	mov	r0, r4
   1d3de:	f7fe ff0c 	bl	1c1fa <ble_att_svr_build_indicate_rsp>
    if (rc != 0) {
   1d3e2:	4606      	mov	r6, r0
   1d3e4:	b970      	cbnz	r0, 1d404 <ble_att_svr_rx_indicate+0x54>
    os_mbuf_adj(*rxom, sizeof(*req));
   1d3e6:	2102      	movs	r1, #2
   1d3e8:	6820      	ldr	r0, [r4, #0]
   1d3ea:	f7f3 feac 	bl	11146 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 1);
   1d3ee:	2301      	movs	r3, #1
   1d3f0:	6822      	ldr	r2, [r4, #0]
   1d3f2:	4629      	mov	r1, r5
   1d3f4:	4638      	mov	r0, r7
   1d3f6:	f7f6 fe39 	bl	1406c <ble_gap_notify_rx_event>
    *rxom = NULL;
   1d3fa:	2300      	movs	r3, #0
   1d3fc:	6023      	str	r3, [r4, #0]
   1d3fe:	e001      	b.n	1d404 <ble_att_svr_rx_indicate+0x54>
   1d400:	4606      	mov	r6, r0
    handle = 0;
   1d402:	2500      	movs	r5, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_INDICATE_REQ,
   1d404:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1d408:	9501      	str	r5, [sp, #4]
   1d40a:	9300      	str	r3, [sp, #0]
   1d40c:	231d      	movs	r3, #29
   1d40e:	9a03      	ldr	r2, [sp, #12]
   1d410:	4631      	mov	r1, r6
   1d412:	4638      	mov	r0, r7
   1d414:	f7ff fc41 	bl	1cc9a <ble_att_svr_tx_rsp>
}
   1d418:	b005      	add	sp, #20
   1d41a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d41c <ble_att_svr_start>:

int
ble_att_svr_start(void)
{
   1d41c:	b510      	push	{r4, lr}
   1d41e:	b082      	sub	sp, #8
    int rc;

    ble_att_svr_free_start_mem();
   1d420:	f7ff fa66 	bl	1c8f0 <ble_att_svr_free_start_mem>

    if (ble_hs_max_attrs > 0) {
   1d424:	4b0f      	ldr	r3, [pc, #60]	; (1d464 <ble_att_svr_start+0x48>)
   1d426:	881c      	ldrh	r4, [r3, #0]
   1d428:	b91c      	cbnz	r4, 1d432 <ble_att_svr_start+0x16>
            rc = BLE_HS_EOS;
            goto err;
        }
    }

    return 0;
   1d42a:	2400      	movs	r4, #0

err:
    ble_att_svr_free_start_mem();
    return rc;
}
   1d42c:	4620      	mov	r0, r4
   1d42e:	b002      	add	sp, #8
   1d430:	bd10      	pop	{r4, pc}
        ble_att_svr_entry_mem = malloc(
   1d432:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d436:	0098      	lsls	r0, r3, #2
   1d438:	f7f4 ffd4 	bl	123e4 <malloc>
   1d43c:	4b0a      	ldr	r3, [pc, #40]	; (1d468 <ble_att_svr_start+0x4c>)
   1d43e:	6018      	str	r0, [r3, #0]
        if (ble_att_svr_entry_mem == NULL) {
   1d440:	b160      	cbz	r0, 1d45c <ble_att_svr_start+0x40>
        rc = os_mempool_init(&ble_att_svr_entry_pool, ble_hs_max_attrs,
   1d442:	4b0a      	ldr	r3, [pc, #40]	; (1d46c <ble_att_svr_start+0x50>)
   1d444:	9300      	str	r3, [sp, #0]
   1d446:	4603      	mov	r3, r0
   1d448:	2214      	movs	r2, #20
   1d44a:	4621      	mov	r1, r4
   1d44c:	4808      	ldr	r0, [pc, #32]	; (1d470 <ble_att_svr_start+0x54>)
   1d44e:	f7f4 f955 	bl	116fc <os_mempool_init>
        if (rc != 0) {
   1d452:	b128      	cbz	r0, 1d460 <ble_att_svr_start+0x44>
            rc = BLE_HS_EOS;
   1d454:	240b      	movs	r4, #11
    ble_att_svr_free_start_mem();
   1d456:	f7ff fa4b 	bl	1c8f0 <ble_att_svr_free_start_mem>
    return rc;
   1d45a:	e7e7      	b.n	1d42c <ble_att_svr_start+0x10>
            rc = BLE_HS_ENOMEM;
   1d45c:	2406      	movs	r4, #6
   1d45e:	e7fa      	b.n	1d456 <ble_att_svr_start+0x3a>
    return 0;
   1d460:	2400      	movs	r4, #0
   1d462:	e7e3      	b.n	1d42c <ble_att_svr_start+0x10>
   1d464:	20003d6c 	.word	0x20003d6c
   1d468:	20002c4c 	.word	0x20002c4c
   1d46c:	0002c6f4 	.word	0x0002c6f4
   1d470:	20002c50 	.word	0x20002c50

0001d474 <ble_att_svr_init>:

int
ble_att_svr_init(void)
{
   1d474:	b500      	push	{lr}
   1d476:	b083      	sub	sp, #12
    int rc;

    if (MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES) > 0) {
        rc = os_mempool_init(&ble_att_svr_prep_entry_pool,
   1d478:	4b0a      	ldr	r3, [pc, #40]	; (1d4a4 <ble_att_svr_init+0x30>)
   1d47a:	9300      	str	r3, [sp, #0]
   1d47c:	4b0a      	ldr	r3, [pc, #40]	; (1d4a8 <ble_att_svr_init+0x34>)
   1d47e:	220c      	movs	r2, #12
   1d480:	2140      	movs	r1, #64	; 0x40
   1d482:	480a      	ldr	r0, [pc, #40]	; (1d4ac <ble_att_svr_init+0x38>)
   1d484:	f7f4 f93a 	bl	116fc <os_mempool_init>
                             MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES),
                             sizeof (struct ble_att_prep_entry),
                             ble_att_svr_prep_entry_mem,
                             "ble_att_svr_prep_entry_pool");
        if (rc != 0) {
   1d488:	b950      	cbnz	r0, 1d4a0 <ble_att_svr_init+0x2c>
            return BLE_HS_EOS;
        }
    }

    STAILQ_INIT(&ble_att_svr_list);
   1d48a:	4b09      	ldr	r3, [pc, #36]	; (1d4b0 <ble_att_svr_init+0x3c>)
   1d48c:	6018      	str	r0, [r3, #0]
   1d48e:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&ble_att_svr_hidden_list);
   1d490:	4b08      	ldr	r3, [pc, #32]	; (1d4b4 <ble_att_svr_init+0x40>)
   1d492:	6018      	str	r0, [r3, #0]
   1d494:	605b      	str	r3, [r3, #4]

    ble_att_svr_id = 0;
   1d496:	4b08      	ldr	r3, [pc, #32]	; (1d4b8 <ble_att_svr_init+0x44>)
   1d498:	8018      	strh	r0, [r3, #0]

    return 0;
}
   1d49a:	b003      	add	sp, #12
   1d49c:	f85d fb04 	ldr.w	pc, [sp], #4
            return BLE_HS_EOS;
   1d4a0:	200b      	movs	r0, #11
   1d4a2:	e7fa      	b.n	1d49a <ble_att_svr_init+0x26>
   1d4a4:	0002c6d8 	.word	0x0002c6d8
   1d4a8:	20002c80 	.word	0x20002c80
   1d4ac:	20002f80 	.word	0x20002f80
   1d4b0:	20002c78 	.word	0x20002c78
   1d4b4:	20002c6c 	.word	0x20002c6c
   1d4b8:	20002c74 	.word	0x20002c74

0001d4bc <ble_hs_dbg_event_disp>:
        break;
    default:
        BLE_HS_LOG(DEBUG, "Unknown event 0x%x len=%u\n", evcode, len);
        break;
    }
}
   1d4bc:	4770      	bx	lr

0001d4be <ble_sm_alg_xor_128>:
static void
ble_sm_alg_xor_128(uint8_t *p, uint8_t *q, uint8_t *r)
{
    int i;

    for (i = 0; i < 16; i++) {
   1d4be:	2300      	movs	r3, #0
   1d4c0:	2b0f      	cmp	r3, #15
   1d4c2:	dc09      	bgt.n	1d4d8 <ble_sm_alg_xor_128+0x1a>
{
   1d4c4:	b430      	push	{r4, r5}
        r[i] = p[i] ^ q[i];
   1d4c6:	5cc4      	ldrb	r4, [r0, r3]
   1d4c8:	5ccd      	ldrb	r5, [r1, r3]
   1d4ca:	406c      	eors	r4, r5
   1d4cc:	54d4      	strb	r4, [r2, r3]
    for (i = 0; i < 16; i++) {
   1d4ce:	3301      	adds	r3, #1
   1d4d0:	2b0f      	cmp	r3, #15
   1d4d2:	ddf8      	ble.n	1d4c6 <ble_sm_alg_xor_128+0x8>
    }
}
   1d4d4:	bc30      	pop	{r4, r5}
   1d4d6:	4770      	bx	lr
   1d4d8:	4770      	bx	lr

0001d4da <ble_sm_alg_encrypt>:

static int
ble_sm_alg_encrypt(uint8_t *key, uint8_t *plaintext, uint8_t *enc_data)
{
   1d4da:	b530      	push	{r4, r5, lr}
   1d4dc:	b0b1      	sub	sp, #196	; 0xc4
   1d4de:	460d      	mov	r5, r1
   1d4e0:	4614      	mov	r4, r2
    struct tc_aes_key_sched_struct s;
    uint8_t tmp[16];

    swap_buf(tmp, key, 16);
   1d4e2:	2210      	movs	r2, #16
   1d4e4:	4601      	mov	r1, r0
   1d4e6:	4668      	mov	r0, sp
   1d4e8:	f001 fb9c 	bl	1ec24 <swap_buf>

    if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   1d4ec:	4669      	mov	r1, sp
   1d4ee:	a804      	add	r0, sp, #16
   1d4f0:	f000 fa52 	bl	1d998 <tc_aes128_set_encrypt_key>
   1d4f4:	b180      	cbz	r0, 1d518 <ble_sm_alg_encrypt+0x3e>
        return BLE_HS_EUNKNOWN;
    }

    swap_buf(tmp, plaintext, 16);
   1d4f6:	2210      	movs	r2, #16
   1d4f8:	4629      	mov	r1, r5
   1d4fa:	4668      	mov	r0, sp
   1d4fc:	f001 fb92 	bl	1ec24 <swap_buf>



    if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   1d500:	aa04      	add	r2, sp, #16
   1d502:	4669      	mov	r1, sp
   1d504:	4620      	mov	r0, r4
   1d506:	f000 faa5 	bl	1da54 <tc_aes_encrypt>
   1d50a:	b140      	cbz	r0, 1d51e <ble_sm_alg_encrypt+0x44>
        return BLE_HS_EUNKNOWN;
    }

    swap_in_place(enc_data, 16);
   1d50c:	2110      	movs	r1, #16
   1d50e:	4620      	mov	r0, r4
   1d510:	f001 fb77 	bl	1ec02 <swap_in_place>

    return 0;
   1d514:	2000      	movs	r0, #0
   1d516:	e000      	b.n	1d51a <ble_sm_alg_encrypt+0x40>
        return BLE_HS_EUNKNOWN;
   1d518:	2011      	movs	r0, #17
}
   1d51a:	b031      	add	sp, #196	; 0xc4
   1d51c:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EUNKNOWN;
   1d51e:	2011      	movs	r0, #17
   1d520:	e7fb      	b.n	1d51a <ble_sm_alg_encrypt+0x40>

0001d522 <ble_sm_alg_s1>:

int
ble_sm_alg_s1(uint8_t *k, uint8_t *r1, uint8_t *r2, uint8_t *out)
{
   1d522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d526:	4680      	mov	r8, r0
   1d528:	460e      	mov	r6, r1
   1d52a:	4615      	mov	r5, r2
   1d52c:	461c      	mov	r4, r3
     * r1' is concatenated with r2' to generate r' which is used as
     * the 128-bit input parameter plaintextData to security function e:
     *
     *    r' = r1' || r2'
     */
    memcpy(out, r2, 8);
   1d52e:	6812      	ldr	r2, [r2, #0]
   1d530:	686b      	ldr	r3, [r5, #4]
   1d532:	6022      	str	r2, [r4, #0]
   1d534:	6063      	str	r3, [r4, #4]
    memcpy(out + 8, r1, 8);
   1d536:	680a      	ldr	r2, [r1, #0]
   1d538:	684b      	ldr	r3, [r1, #4]
   1d53a:	60a2      	str	r2, [r4, #8]
   1d53c:	60e3      	str	r3, [r4, #12]

    /* s1(k, r1 , r2) = e(k, r') */
    rc = ble_sm_alg_encrypt(k, out, out);
   1d53e:	4622      	mov	r2, r4
   1d540:	4621      	mov	r1, r4
   1d542:	f7ff ffca 	bl	1d4da <ble_sm_alg_encrypt>
    if (rc != 0) {
   1d546:	4607      	mov	r7, r0
   1d548:	b110      	cbz	r0, 1d550 <ble_sm_alg_s1+0x2e>
    BLE_HS_LOG(DEBUG, "\n    out=");
    ble_hs_log_flat_buf(out, 16);
    BLE_HS_LOG(DEBUG, "\n");

    return 0;
}
   1d54a:	4638      	mov	r0, r7
   1d54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_log_flat_buf(k, 16);
   1d550:	2110      	movs	r1, #16
   1d552:	4640      	mov	r0, r8
   1d554:	f7fb f934 	bl	187c0 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(r1, 16);
   1d558:	2110      	movs	r1, #16
   1d55a:	4630      	mov	r0, r6
   1d55c:	f7fb f930 	bl	187c0 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(r2, 16);
   1d560:	2110      	movs	r1, #16
   1d562:	4628      	mov	r0, r5
   1d564:	f7fb f92c 	bl	187c0 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(out, 16);
   1d568:	2110      	movs	r1, #16
   1d56a:	4620      	mov	r0, r4
   1d56c:	f7fb f928 	bl	187c0 <ble_hs_log_flat_buf>
    return 0;
   1d570:	e7eb      	b.n	1d54a <ble_sm_alg_s1+0x28>

0001d572 <ble_sm_alg_c1>:
ble_sm_alg_c1(uint8_t *k, uint8_t *r,
              uint8_t *preq, uint8_t *pres,
              uint8_t iat, uint8_t rat,
              uint8_t *ia, uint8_t *ra,
              uint8_t *out_enc_data)
{
   1d572:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d576:	b089      	sub	sp, #36	; 0x24
   1d578:	4681      	mov	r9, r0
   1d57a:	4688      	mov	r8, r1
   1d57c:	4615      	mov	r5, r2
   1d57e:	461c      	mov	r4, r3
   1d580:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1d582:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    uint8_t p1[16], p2[16];
    int rc;

    BLE_HS_LOG(DEBUG, "ble_sm_alg_c1()\n    k=");
    ble_hs_log_flat_buf(k, 16);
   1d584:	2110      	movs	r1, #16
   1d586:	f7fb f91b 	bl	187c0 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    r=");
    ble_hs_log_flat_buf(r, 16);
   1d58a:	2110      	movs	r1, #16
   1d58c:	4640      	mov	r0, r8
   1d58e:	f7fb f917 	bl	187c0 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    iat=%d rat=%d", iat, rat);
    BLE_HS_LOG(DEBUG, "\n    ia=");
    ble_hs_log_flat_buf(ia, 6);
   1d592:	2106      	movs	r1, #6
   1d594:	4630      	mov	r0, r6
   1d596:	f7fb f913 	bl	187c0 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    ra=");
    ble_hs_log_flat_buf(ra, 6);
   1d59a:	2106      	movs	r1, #6
   1d59c:	4638      	mov	r0, r7
   1d59e:	f7fb f90f 	bl	187c0 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    preq=");
    ble_hs_log_flat_buf(preq, 7);
   1d5a2:	2107      	movs	r1, #7
   1d5a4:	4628      	mov	r0, r5
   1d5a6:	f7fb f90b 	bl	187c0 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    pres=");
    ble_hs_log_flat_buf(pres, 7);
   1d5aa:	2107      	movs	r1, #7
   1d5ac:	4620      	mov	r0, r4
   1d5ae:	f7fb f907 	bl	187c0 <ble_hs_log_flat_buf>

    /* pres, preq, rat and iat are concatenated to generate p1 */
    p1[0] = iat;
   1d5b2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1d5b6:	f88d 3010 	strb.w	r3, [sp, #16]
    p1[1] = rat;
   1d5ba:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   1d5be:	f88d 3011 	strb.w	r3, [sp, #17]
    memcpy(p1 + 2, preq, 7);
   1d5c2:	682b      	ldr	r3, [r5, #0]
   1d5c4:	f8cd 3012 	str.w	r3, [sp, #18]
   1d5c8:	88aa      	ldrh	r2, [r5, #4]
   1d5ca:	79ab      	ldrb	r3, [r5, #6]
   1d5cc:	f8ad 2016 	strh.w	r2, [sp, #22]
   1d5d0:	f88d 3018 	strb.w	r3, [sp, #24]
    memcpy(p1 + 9, pres, 7);
   1d5d4:	6823      	ldr	r3, [r4, #0]
   1d5d6:	f8cd 3019 	str.w	r3, [sp, #25]
   1d5da:	88a2      	ldrh	r2, [r4, #4]
   1d5dc:	79a3      	ldrb	r3, [r4, #6]
   1d5de:	f8ad 201d 	strh.w	r2, [sp, #29]
   1d5e2:	f88d 301f 	strb.w	r3, [sp, #31]

    BLE_HS_LOG(DEBUG, "\n    p1=");
    ble_hs_log_flat_buf(p1, sizeof p1);
   1d5e6:	2110      	movs	r1, #16
   1d5e8:	eb0d 0001 	add.w	r0, sp, r1
   1d5ec:	f7fb f8e8 	bl	187c0 <ble_hs_log_flat_buf>

    /* c1 = e(k, e(k, r XOR p1) XOR p2) */

    /* Using out_enc_data as temporary output buffer */
    ble_sm_alg_xor_128(r, p1, out_enc_data);
   1d5f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d5f2:	a904      	add	r1, sp, #16
   1d5f4:	4640      	mov	r0, r8
   1d5f6:	f7ff ff62 	bl	1d4be <ble_sm_alg_xor_128>

    rc = ble_sm_alg_encrypt(k, out_enc_data, out_enc_data);
   1d5fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d5fc:	4611      	mov	r1, r2
   1d5fe:	4648      	mov	r0, r9
   1d600:	f7ff ff6b 	bl	1d4da <ble_sm_alg_encrypt>
    if (rc != 0) {
   1d604:	bb08      	cbnz	r0, 1d64a <ble_sm_alg_c1+0xd8>
        rc = BLE_HS_EUNKNOWN;
        goto done;
    }

    /* ra is concatenated with ia and padding to generate p2 */
    memcpy(p2, ra, 6);
   1d606:	6838      	ldr	r0, [r7, #0]
   1d608:	9000      	str	r0, [sp, #0]
   1d60a:	88bb      	ldrh	r3, [r7, #4]
   1d60c:	f8ad 3004 	strh.w	r3, [sp, #4]
    memcpy(p2 + 6, ia, 6);
   1d610:	6833      	ldr	r3, [r6, #0]
   1d612:	f8cd 3006 	str.w	r3, [sp, #6]
   1d616:	88b3      	ldrh	r3, [r6, #4]
   1d618:	f8ad 300a 	strh.w	r3, [sp, #10]
    memset(p2 + 12, 0, 4);
   1d61c:	2300      	movs	r3, #0
   1d61e:	9303      	str	r3, [sp, #12]

    BLE_HS_LOG(DEBUG, "\n    p2=");
    ble_hs_log_flat_buf(p2, sizeof p2);
   1d620:	2110      	movs	r1, #16
   1d622:	4668      	mov	r0, sp
   1d624:	f7fb f8cc 	bl	187c0 <ble_hs_log_flat_buf>

    ble_sm_alg_xor_128(out_enc_data, p2, out_enc_data);
   1d628:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d62a:	4669      	mov	r1, sp
   1d62c:	4610      	mov	r0, r2
   1d62e:	f7ff ff46 	bl	1d4be <ble_sm_alg_xor_128>

    rc = ble_sm_alg_encrypt(k, out_enc_data, out_enc_data);
   1d632:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1d634:	4611      	mov	r1, r2
   1d636:	4648      	mov	r0, r9
   1d638:	f7ff ff4f 	bl	1d4da <ble_sm_alg_encrypt>
    if (rc != 0) {
   1d63c:	4604      	mov	r4, r0
   1d63e:	b948      	cbnz	r0, 1d654 <ble_sm_alg_c1+0xe2>
        rc = BLE_HS_EUNKNOWN;
        goto done;
    }

    BLE_HS_LOG(DEBUG, "\n    out_enc_data=");
    ble_hs_log_flat_buf(out_enc_data, 16);
   1d640:	2110      	movs	r1, #16
   1d642:	9814      	ldr	r0, [sp, #80]	; 0x50
   1d644:	f7fb f8bc 	bl	187c0 <ble_hs_log_flat_buf>
   1d648:	e000      	b.n	1d64c <ble_sm_alg_c1+0xda>
        rc = BLE_HS_EUNKNOWN;
   1d64a:	2411      	movs	r4, #17
    rc = 0;

done:
    BLE_HS_LOG(DEBUG, "\n    rc=%d\n", rc);
    return rc;
}
   1d64c:	4620      	mov	r0, r4
   1d64e:	b009      	add	sp, #36	; 0x24
   1d650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = BLE_HS_EUNKNOWN;
   1d654:	2411      	movs	r4, #17
    return rc;
   1d656:	e7f9      	b.n	1d64c <ble_sm_alg_c1+0xda>

0001d658 <ble_hci_trans_cfg_hs>:
void
ble_hci_trans_cfg_hs(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   1d658:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_hs_cb = cmd_cb;
   1d65a:	4c05      	ldr	r4, [pc, #20]	; (1d670 <ble_hci_trans_cfg_hs+0x18>)
   1d65c:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_hs_arg = cmd_arg;
   1d65e:	4805      	ldr	r0, [pc, #20]	; (1d674 <ble_hci_trans_cfg_hs+0x1c>)
   1d660:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_hs_cb = acl_cb;
   1d662:	4905      	ldr	r1, [pc, #20]	; (1d678 <ble_hci_trans_cfg_hs+0x20>)
   1d664:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_hs_arg = acl_arg;
   1d666:	4a05      	ldr	r2, [pc, #20]	; (1d67c <ble_hci_trans_cfg_hs+0x24>)
   1d668:	6013      	str	r3, [r2, #0]
}
   1d66a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d66e:	4770      	bx	lr
   1d670:	200033d8 	.word	0x200033d8
   1d674:	200033d4 	.word	0x200033d4
   1d678:	200033c8 	.word	0x200033c8
   1d67c:	200033c4 	.word	0x200033c4

0001d680 <ble_hci_trans_cfg_ll>:
void
ble_hci_trans_cfg_ll(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   1d680:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_ll_cb = cmd_cb;
   1d682:	4c05      	ldr	r4, [pc, #20]	; (1d698 <ble_hci_trans_cfg_ll+0x18>)
   1d684:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_ll_arg = cmd_arg;
   1d686:	4805      	ldr	r0, [pc, #20]	; (1d69c <ble_hci_trans_cfg_ll+0x1c>)
   1d688:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_ll_cb = acl_cb;
   1d68a:	4905      	ldr	r1, [pc, #20]	; (1d6a0 <ble_hci_trans_cfg_ll+0x20>)
   1d68c:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_ll_arg = acl_arg;
   1d68e:	4a05      	ldr	r2, [pc, #20]	; (1d6a4 <ble_hci_trans_cfg_ll+0x24>)
   1d690:	6013      	str	r3, [r2, #0]
}
   1d692:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d696:	4770      	bx	lr
   1d698:	200033e0 	.word	0x200033e0
   1d69c:	200033dc 	.word	0x200033dc
   1d6a0:	200033d0 	.word	0x200033d0
   1d6a4:	200033cc 	.word	0x200033cc

0001d6a8 <ble_hci_trans_hs_cmd_tx>:

int
ble_hci_trans_hs_cmd_tx(uint8_t *cmd)
{
   1d6a8:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   1d6aa:	4b06      	ldr	r3, [pc, #24]	; (1d6c4 <ble_hci_trans_hs_cmd_tx+0x1c>)
   1d6ac:	681b      	ldr	r3, [r3, #0]
   1d6ae:	b11b      	cbz	r3, 1d6b8 <ble_hci_trans_hs_cmd_tx+0x10>

    rc = ble_hci_ram_rx_cmd_ll_cb(cmd, ble_hci_ram_rx_cmd_ll_arg);
   1d6b0:	4a05      	ldr	r2, [pc, #20]	; (1d6c8 <ble_hci_trans_hs_cmd_tx+0x20>)
   1d6b2:	6811      	ldr	r1, [r2, #0]
   1d6b4:	4798      	blx	r3
    return rc;
}
   1d6b6:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   1d6b8:	461a      	mov	r2, r3
   1d6ba:	4619      	mov	r1, r3
   1d6bc:	4618      	mov	r0, r3
   1d6be:	f7f2 ff8d 	bl	105dc <__assert_func>
   1d6c2:	bf00      	nop
   1d6c4:	200033e0 	.word	0x200033e0
   1d6c8:	200033dc 	.word	0x200033dc

0001d6cc <ble_hci_trans_ll_evt_tx>:

int
ble_hci_trans_ll_evt_tx(uint8_t *hci_ev)
{
   1d6cc:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   1d6ce:	4b06      	ldr	r3, [pc, #24]	; (1d6e8 <ble_hci_trans_ll_evt_tx+0x1c>)
   1d6d0:	681b      	ldr	r3, [r3, #0]
   1d6d2:	b11b      	cbz	r3, 1d6dc <ble_hci_trans_ll_evt_tx+0x10>

    rc = ble_hci_ram_rx_cmd_hs_cb(hci_ev, ble_hci_ram_rx_cmd_hs_arg);
   1d6d4:	4a05      	ldr	r2, [pc, #20]	; (1d6ec <ble_hci_trans_ll_evt_tx+0x20>)
   1d6d6:	6811      	ldr	r1, [r2, #0]
   1d6d8:	4798      	blx	r3
    return rc;
}
   1d6da:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   1d6dc:	461a      	mov	r2, r3
   1d6de:	4619      	mov	r1, r3
   1d6e0:	4618      	mov	r0, r3
   1d6e2:	f7f2 ff7b 	bl	105dc <__assert_func>
   1d6e6:	bf00      	nop
   1d6e8:	200033d8 	.word	0x200033d8
   1d6ec:	200033d4 	.word	0x200033d4

0001d6f0 <ble_hci_trans_hs_acl_tx>:

int
ble_hci_trans_hs_acl_tx(struct os_mbuf *om)
{
   1d6f0:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   1d6f2:	4b06      	ldr	r3, [pc, #24]	; (1d70c <ble_hci_trans_hs_acl_tx+0x1c>)
   1d6f4:	681b      	ldr	r3, [r3, #0]
   1d6f6:	b11b      	cbz	r3, 1d700 <ble_hci_trans_hs_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_ll_cb(om, ble_hci_ram_rx_acl_ll_arg);
   1d6f8:	4a05      	ldr	r2, [pc, #20]	; (1d710 <ble_hci_trans_hs_acl_tx+0x20>)
   1d6fa:	6811      	ldr	r1, [r2, #0]
   1d6fc:	4798      	blx	r3
    return rc;
}
   1d6fe:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   1d700:	461a      	mov	r2, r3
   1d702:	4619      	mov	r1, r3
   1d704:	4618      	mov	r0, r3
   1d706:	f7f2 ff69 	bl	105dc <__assert_func>
   1d70a:	bf00      	nop
   1d70c:	200033d0 	.word	0x200033d0
   1d710:	200033cc 	.word	0x200033cc

0001d714 <ble_hci_trans_ll_acl_tx>:

int
ble_hci_trans_ll_acl_tx(struct os_mbuf *om)
{
   1d714:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   1d716:	4b06      	ldr	r3, [pc, #24]	; (1d730 <ble_hci_trans_ll_acl_tx+0x1c>)
   1d718:	681b      	ldr	r3, [r3, #0]
   1d71a:	b11b      	cbz	r3, 1d724 <ble_hci_trans_ll_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_hs_cb(om, ble_hci_ram_rx_acl_hs_arg);
   1d71c:	4a05      	ldr	r2, [pc, #20]	; (1d734 <ble_hci_trans_ll_acl_tx+0x20>)
   1d71e:	6811      	ldr	r1, [r2, #0]
   1d720:	4798      	blx	r3
    return rc;
}
   1d722:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   1d724:	461a      	mov	r2, r3
   1d726:	4619      	mov	r1, r3
   1d728:	4618      	mov	r0, r3
   1d72a:	f7f2 ff57 	bl	105dc <__assert_func>
   1d72e:	bf00      	nop
   1d730:	200033c8 	.word	0x200033c8
   1d734:	200033c4 	.word	0x200033c4

0001d738 <ble_hci_trans_buf_alloc>:

uint8_t *
ble_hci_trans_buf_alloc(int type)
{
   1d738:	b508      	push	{r3, lr}
    uint8_t *buf;

    switch (type) {
   1d73a:	2802      	cmp	r0, #2
   1d73c:	d00f      	beq.n	1d75e <ble_hci_trans_buf_alloc+0x26>
   1d73e:	2803      	cmp	r0, #3
   1d740:	d007      	beq.n	1d752 <ble_hci_trans_buf_alloc+0x1a>
   1d742:	2801      	cmp	r0, #1
   1d744:	d016      	beq.n	1d774 <ble_hci_trans_buf_alloc+0x3c>
    case BLE_HCI_TRANS_BUF_EVT_LO:
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
        break;

    default:
        assert(0);
   1d746:	2300      	movs	r3, #0
   1d748:	461a      	mov	r2, r3
   1d74a:	4619      	mov	r1, r3
   1d74c:	4618      	mov	r0, r3
   1d74e:	f7f2 ff45 	bl	105dc <__assert_func>
        buf = os_memblock_get(&ble_hci_ram_cmd_pool);
   1d752:	480b      	ldr	r0, [pc, #44]	; (1d780 <ble_hci_trans_buf_alloc+0x48>)
   1d754:	f7f4 f817 	bl	11786 <os_memblock_get>
   1d758:	4603      	mov	r3, r0
        buf = NULL;
    }

    return buf;
}
   1d75a:	4618      	mov	r0, r3
   1d75c:	bd08      	pop	{r3, pc}
        buf = os_memblock_get(&ble_hci_ram_evt_hi_pool);
   1d75e:	4809      	ldr	r0, [pc, #36]	; (1d784 <ble_hci_trans_buf_alloc+0x4c>)
   1d760:	f7f4 f811 	bl	11786 <os_memblock_get>
        if (buf == NULL) {
   1d764:	4603      	mov	r3, r0
   1d766:	2800      	cmp	r0, #0
   1d768:	d1f7      	bne.n	1d75a <ble_hci_trans_buf_alloc+0x22>
            buf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   1d76a:	2001      	movs	r0, #1
   1d76c:	f7ff ffe4 	bl	1d738 <ble_hci_trans_buf_alloc>
   1d770:	4603      	mov	r3, r0
   1d772:	e7f2      	b.n	1d75a <ble_hci_trans_buf_alloc+0x22>
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
   1d774:	4804      	ldr	r0, [pc, #16]	; (1d788 <ble_hci_trans_buf_alloc+0x50>)
   1d776:	f7f4 f806 	bl	11786 <os_memblock_get>
   1d77a:	4603      	mov	r3, r0
        break;
   1d77c:	e7ed      	b.n	1d75a <ble_hci_trans_buf_alloc+0x22>
   1d77e:	bf00      	nop
   1d780:	200030a0 	.word	0x200030a0
   1d784:	2000314c 	.word	0x2000314c
   1d788:	200033a8 	.word	0x200033a8

0001d78c <ble_hci_trans_buf_free>:

void
ble_hci_trans_buf_free(uint8_t *buf)
{
   1d78c:	b510      	push	{r4, lr}
   1d78e:	4604      	mov	r4, r0
    * response to the command. This was done to insure that the controller
    * could always send back one of these events when a command was received.
    * Thus, we check to see which pool the buffer came from so we can free
    * it to the appropriate pool
    */
    if (os_memblock_from(&ble_hci_ram_evt_hi_pool, buf)) {
   1d790:	4601      	mov	r1, r0
   1d792:	481c      	ldr	r0, [pc, #112]	; (1d804 <ble_hci_trans_buf_free+0x78>)
   1d794:	f7f3 ffd7 	bl	11746 <os_memblock_from>
   1d798:	b158      	cbz	r0, 1d7b2 <ble_hci_trans_buf_free+0x26>
        rc = os_memblock_put(&ble_hci_ram_evt_hi_pool, buf);
   1d79a:	4621      	mov	r1, r4
   1d79c:	4819      	ldr	r0, [pc, #100]	; (1d804 <ble_hci_trans_buf_free+0x78>)
   1d79e:	f7f4 f81a 	bl	117d6 <os_memblock_put>
        assert(rc == 0);
   1d7a2:	b900      	cbnz	r0, 1d7a6 <ble_hci_trans_buf_free+0x1a>
    } else {
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
        assert(rc == 0);
    }
}
   1d7a4:	bd10      	pop	{r4, pc}
        assert(rc == 0);
   1d7a6:	2300      	movs	r3, #0
   1d7a8:	461a      	mov	r2, r3
   1d7aa:	4619      	mov	r1, r3
   1d7ac:	4618      	mov	r0, r3
   1d7ae:	f7f2 ff15 	bl	105dc <__assert_func>
    } else if (os_memblock_from(&ble_hci_ram_evt_lo_pool, buf)) {
   1d7b2:	4621      	mov	r1, r4
   1d7b4:	4814      	ldr	r0, [pc, #80]	; (1d808 <ble_hci_trans_buf_free+0x7c>)
   1d7b6:	f7f3 ffc6 	bl	11746 <os_memblock_from>
   1d7ba:	b158      	cbz	r0, 1d7d4 <ble_hci_trans_buf_free+0x48>
        rc = os_memblock_put(&ble_hci_ram_evt_lo_pool, buf);
   1d7bc:	4621      	mov	r1, r4
   1d7be:	4812      	ldr	r0, [pc, #72]	; (1d808 <ble_hci_trans_buf_free+0x7c>)
   1d7c0:	f7f4 f809 	bl	117d6 <os_memblock_put>
        assert(rc == 0);
   1d7c4:	2800      	cmp	r0, #0
   1d7c6:	d0ed      	beq.n	1d7a4 <ble_hci_trans_buf_free+0x18>
   1d7c8:	2300      	movs	r3, #0
   1d7ca:	461a      	mov	r2, r3
   1d7cc:	4619      	mov	r1, r3
   1d7ce:	4618      	mov	r0, r3
   1d7d0:	f7f2 ff04 	bl	105dc <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   1d7d4:	4621      	mov	r1, r4
   1d7d6:	480d      	ldr	r0, [pc, #52]	; (1d80c <ble_hci_trans_buf_free+0x80>)
   1d7d8:	f7f3 ffb5 	bl	11746 <os_memblock_from>
   1d7dc:	b158      	cbz	r0, 1d7f6 <ble_hci_trans_buf_free+0x6a>
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
   1d7de:	4621      	mov	r1, r4
   1d7e0:	480a      	ldr	r0, [pc, #40]	; (1d80c <ble_hci_trans_buf_free+0x80>)
   1d7e2:	f7f3 fff8 	bl	117d6 <os_memblock_put>
        assert(rc == 0);
   1d7e6:	2800      	cmp	r0, #0
   1d7e8:	d0dc      	beq.n	1d7a4 <ble_hci_trans_buf_free+0x18>
   1d7ea:	2300      	movs	r3, #0
   1d7ec:	461a      	mov	r2, r3
   1d7ee:	4619      	mov	r1, r3
   1d7f0:	4618      	mov	r0, r3
   1d7f2:	f7f2 fef3 	bl	105dc <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   1d7f6:	2300      	movs	r3, #0
   1d7f8:	461a      	mov	r2, r3
   1d7fa:	4619      	mov	r1, r3
   1d7fc:	4618      	mov	r0, r3
   1d7fe:	f7f2 feed 	bl	105dc <__assert_func>
   1d802:	bf00      	nop
   1d804:	2000314c 	.word	0x2000314c
   1d808:	200033a8 	.word	0x200033a8
   1d80c:	200030a0 	.word	0x200030a0

0001d810 <ble_hci_trans_reset>:
{
    /* No work to do.  All allocated buffers are owned by the host or
     * controller, and they will get freed by their owners.
     */
    return 0;
}
   1d810:	2000      	movs	r0, #0
   1d812:	4770      	bx	lr

0001d814 <ble_hci_ram_init>:

void
ble_hci_ram_init(void)
{
   1d814:	b510      	push	{r4, lr}
   1d816:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1d818:	4b1f      	ldr	r3, [pc, #124]	; (1d898 <ble_hci_ram_init+0x84>)
   1d81a:	781b      	ldrb	r3, [r3, #0]
   1d81c:	2b00      	cmp	r3, #0
   1d81e:	d035      	beq.n	1d88c <ble_hci_ram_init+0x78>
     * Create memory pool of HCI command buffers. NOTE: we currently dont
     * allow this to be configured. The controller will only allow one
     * outstanding command. We decided to keep this a pool in case we allow
     * allow the controller to handle more than one outstanding command.
     */
    rc = os_mempool_init(&ble_hci_ram_cmd_pool,
   1d820:	4b1e      	ldr	r3, [pc, #120]	; (1d89c <ble_hci_ram_init+0x88>)
   1d822:	9300      	str	r3, [sp, #0]
   1d824:	4b1e      	ldr	r3, [pc, #120]	; (1d8a0 <ble_hci_ram_init+0x8c>)
   1d826:	f44f 7282 	mov.w	r2, #260	; 0x104
   1d82a:	2101      	movs	r1, #1
   1d82c:	481d      	ldr	r0, [pc, #116]	; (1d8a4 <ble_hci_ram_init+0x90>)
   1d82e:	f7f3 ff65 	bl	116fc <os_mempool_init>
                         1,
                         BLE_HCI_TRANS_CMD_SZ,
                         ble_hci_ram_cmd_buf,
                         "ble_hci_ram_cmd_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1d832:	b138      	cbz	r0, 1d844 <ble_hci_ram_init+0x30>
   1d834:	2000      	movs	r0, #0
   1d836:	9000      	str	r0, [sp, #0]
   1d838:	4b1b      	ldr	r3, [pc, #108]	; (1d8a8 <ble_hci_ram_init+0x94>)
   1d83a:	681c      	ldr	r4, [r3, #0]
   1d83c:	4603      	mov	r3, r0
   1d83e:	4602      	mov	r2, r0
   1d840:	4601      	mov	r1, r0
   1d842:	47a0      	blx	r4

    rc = os_mempool_init(&ble_hci_ram_evt_hi_pool,
   1d844:	4b19      	ldr	r3, [pc, #100]	; (1d8ac <ble_hci_ram_init+0x98>)
   1d846:	9300      	str	r3, [sp, #0]
   1d848:	4b19      	ldr	r3, [pc, #100]	; (1d8b0 <ble_hci_ram_init+0x9c>)
   1d84a:	2246      	movs	r2, #70	; 0x46
   1d84c:	2102      	movs	r1, #2
   1d84e:	4819      	ldr	r0, [pc, #100]	; (1d8b4 <ble_hci_ram_init+0xa0>)
   1d850:	f7f3 ff54 	bl	116fc <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_HI_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_hi_buf,
                         "ble_hci_ram_evt_hi_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1d854:	b138      	cbz	r0, 1d866 <ble_hci_ram_init+0x52>
   1d856:	2000      	movs	r0, #0
   1d858:	9000      	str	r0, [sp, #0]
   1d85a:	4b13      	ldr	r3, [pc, #76]	; (1d8a8 <ble_hci_ram_init+0x94>)
   1d85c:	681c      	ldr	r4, [r3, #0]
   1d85e:	4603      	mov	r3, r0
   1d860:	4602      	mov	r2, r0
   1d862:	4601      	mov	r1, r0
   1d864:	47a0      	blx	r4

    rc = os_mempool_init(&ble_hci_ram_evt_lo_pool,
   1d866:	4b14      	ldr	r3, [pc, #80]	; (1d8b8 <ble_hci_ram_init+0xa4>)
   1d868:	9300      	str	r3, [sp, #0]
   1d86a:	4b14      	ldr	r3, [pc, #80]	; (1d8bc <ble_hci_ram_init+0xa8>)
   1d86c:	2246      	movs	r2, #70	; 0x46
   1d86e:	2108      	movs	r1, #8
   1d870:	4813      	ldr	r0, [pc, #76]	; (1d8c0 <ble_hci_ram_init+0xac>)
   1d872:	f7f3 ff43 	bl	116fc <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_LO_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_lo_buf,
                         "ble_hci_ram_evt_lo_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1d876:	b138      	cbz	r0, 1d888 <ble_hci_ram_init+0x74>
   1d878:	2000      	movs	r0, #0
   1d87a:	9000      	str	r0, [sp, #0]
   1d87c:	4b0a      	ldr	r3, [pc, #40]	; (1d8a8 <ble_hci_ram_init+0x94>)
   1d87e:	681c      	ldr	r4, [r3, #0]
   1d880:	4603      	mov	r3, r0
   1d882:	4602      	mov	r2, r0
   1d884:	4601      	mov	r1, r0
   1d886:	47a0      	blx	r4
}
   1d888:	b002      	add	sp, #8
   1d88a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d88c:	461a      	mov	r2, r3
   1d88e:	4619      	mov	r1, r3
   1d890:	4618      	mov	r0, r3
   1d892:	f7f2 fea3 	bl	105dc <__assert_func>
   1d896:	bf00      	nop
   1d898:	20003bf0 	.word	0x20003bf0
   1d89c:	0002c70c 	.word	0x0002c70c
   1d8a0:	20002f9c 	.word	0x20002f9c
   1d8a4:	200030a0 	.word	0x200030a0
   1d8a8:	20000180 	.word	0x20000180
   1d8ac:	0002c724 	.word	0x0002c724
   1d8b0:	200030bc 	.word	0x200030bc
   1d8b4:	2000314c 	.word	0x2000314c
   1d8b8:	0002c73c 	.word	0x0002c73c
   1d8bc:	20003168 	.word	0x20003168
   1d8c0:	200033a8 	.word	0x200033a8

0001d8c4 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1d8c4:	b570      	push	{r4, r5, r6, lr}
   1d8c6:	b082      	sub	sp, #8
   1d8c8:	460c      	mov	r4, r1
   1d8ca:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1d8cc:	b29d      	uxth	r5, r3
   1d8ce:	9b07      	ldr	r3, [sp, #28]
   1d8d0:	9300      	str	r3, [sp, #0]
   1d8d2:	4603      	mov	r3, r0
   1d8d4:	9a06      	ldr	r2, [sp, #24]
   1d8d6:	4629      	mov	r1, r5
   1d8d8:	4620      	mov	r0, r4
   1d8da:	f7f3 ff0f 	bl	116fc <os_mempool_init>
    if (rc != 0) {
   1d8de:	b108      	cbz	r0, 1d8e4 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1d8e0:	b002      	add	sp, #8
   1d8e2:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1d8e4:	462b      	mov	r3, r5
   1d8e6:	9a06      	ldr	r2, [sp, #24]
   1d8e8:	b292      	uxth	r2, r2
   1d8ea:	4621      	mov	r1, r4
   1d8ec:	4630      	mov	r0, r6
   1d8ee:	f7f3 fab2 	bl	10e56 <os_mbuf_pool_init>
   1d8f2:	e7f5      	b.n	1d8e0 <mem_init_mbuf_pool+0x1c>

0001d8f4 <mem_split_frag>:
 *                              NULL on failure.
 */
struct os_mbuf *
mem_split_frag(struct os_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   1d8f4:	b570      	push	{r4, r5, r6, lr}
   1d8f6:	460d      	mov	r5, r1
    struct os_mbuf *frag;
    int rc;

    if (OS_MBUF_PKTLEN(*om) <= max_frag_sz) {
   1d8f8:	6806      	ldr	r6, [r0, #0]
   1d8fa:	8a31      	ldrh	r1, [r6, #16]
   1d8fc:	42a9      	cmp	r1, r5
   1d8fe:	d915      	bls.n	1d92c <mem_split_frag+0x38>
   1d900:	4619      	mov	r1, r3
   1d902:	4604      	mov	r4, r0
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   1d904:	4628      	mov	r0, r5
   1d906:	4790      	blx	r2
    if (frag == NULL) {
   1d908:	4606      	mov	r6, r0
   1d90a:	b190      	cbz	r0, 1d932 <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = os_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   1d90c:	462b      	mov	r3, r5
   1d90e:	2200      	movs	r2, #0
   1d910:	6821      	ldr	r1, [r4, #0]
   1d912:	f7f3 fbc1 	bl	11098 <os_mbuf_appendfrom>
    if (rc != 0) {
   1d916:	b960      	cbnz	r0, 1d932 <mem_split_frag+0x3e>
        goto err;
    }
    os_mbuf_adj(*om, max_frag_sz);
   1d918:	4629      	mov	r1, r5
   1d91a:	6820      	ldr	r0, [r4, #0]
   1d91c:	f7f3 fc13 	bl	11146 <os_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = os_mbuf_trim_front(*om);
   1d920:	6820      	ldr	r0, [r4, #0]
   1d922:	f7f3 fe83 	bl	1162c <os_mbuf_trim_front>
   1d926:	6020      	str	r0, [r4, #0]
    return frag;

err:
    os_mbuf_free_chain(frag);
    return NULL;
}
   1d928:	4630      	mov	r0, r6
   1d92a:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   1d92c:	2300      	movs	r3, #0
   1d92e:	6003      	str	r3, [r0, #0]
        return frag;
   1d930:	e7fa      	b.n	1d928 <mem_split_frag+0x34>
    os_mbuf_free_chain(frag);
   1d932:	4630      	mov	r0, r6
   1d934:	f7f3 fad2 	bl	10edc <os_mbuf_free_chain>
    return NULL;
   1d938:	2600      	movs	r6, #0
   1d93a:	e7f5      	b.n	1d928 <mem_split_frag+0x34>

0001d93c <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1d93c:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1d93e:	f7f2 ffab 	bl	10898 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1d942:	f00b fce1 	bl	29308 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1d946:	f7f0 ff09 	bl	e75c <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
   1d94a:	f00b fbbd 	bl	290c8 <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: ble_hci_ram_init (nimble/transport/ram) */
    ble_hci_ram_init();
   1d94e:	f7ff ff61 	bl	1d814 <ble_hci_ram_init>
    /* 100.1: mfg_init (sys/mfg) */
    mfg_init();
   1d952:	f00b fe1f 	bl	29594 <mfg_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   1d956:	f00b fd0f 	bl	29378 <modlog_init>

    /*** Stage 200 */
    /* 200.0: ble_hs_init (nimble/host) */
    ble_hs_init();
   1d95a:	f7f9 f933 	bl	16bc4 <ble_hs_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
   1d95e:	f00b fbc1 	bl	290e4 <config_pkg_init_stage2>

    /*** Stage 250 */
    /* 250.0: ble_ll_init (nimble/controller) */
    ble_ll_init();
   1d962:	f001 fdd1 	bl	1f508 <ble_ll_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1d966:	f7f1 ffdd 	bl	f924 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1d96a:	f001 fa8f 	bl	1ee8c <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1d96e:	f001 fa8e 	bl	1ee8e <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1d972:	f001 fa8d 	bl	1ee90 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1d976:	f001 fa8c 	bl	1ee92 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1d97a:	f001 fa8b 	bl	1ee94 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: ble_store_config_init (nimble/host/store/config) */
    ble_store_config_init();
   1d97e:	f00b f9c5 	bl	28d0c <ble_store_config_init>
    /* 500.1: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1d982:	f001 f8cd 	bl	1eb20 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1d986:	f7f2 fbdf 	bl	10148 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1d98a:	f001 f981 	bl	1ec90 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1d98e:	f7f1 faff 	bl	ef90 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1d992:	f7f0 ffc5 	bl	e920 <init_sensor_coap>
}
   1d996:	bd08      	pop	{r3, pc}

0001d998 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   1d998:	b4f0      	push	{r4, r5, r6, r7}
   1d99a:	b08c      	sub	sp, #48	; 0x30
   1d99c:	4604      	mov	r4, r0
   1d99e:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
   1d9a0:	ad01      	add	r5, sp, #4
   1d9a2:	4e2a      	ldr	r6, [pc, #168]	; (1da4c <tc_aes128_set_encrypt_key+0xb4>)
   1d9a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1d9a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d9a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1d9aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d9ac:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1d9b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   1d9b4:	2c00      	cmp	r4, #0
   1d9b6:	d044      	beq.n	1da42 <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1d9b8:	2f00      	cmp	r7, #0
   1d9ba:	d044      	beq.n	1da46 <tc_aes128_set_encrypt_key+0xae>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   1d9bc:	2300      	movs	r3, #0
   1d9be:	e00f      	b.n	1d9e0 <tc_aes128_set_encrypt_key+0x48>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1d9c0:	f817 0023 	ldrb.w	r0, [r7, r3, lsl #2]
   1d9c4:	eb07 0183 	add.w	r1, r7, r3, lsl #2
   1d9c8:	784a      	ldrb	r2, [r1, #1]
   1d9ca:	0412      	lsls	r2, r2, #16
   1d9cc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1d9d0:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1d9d2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1d9d6:	78c9      	ldrb	r1, [r1, #3]
   1d9d8:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1d9da:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   1d9de:	3301      	adds	r3, #1
   1d9e0:	2b03      	cmp	r3, #3
   1d9e2:	d9ed      	bls.n	1d9c0 <tc_aes128_set_encrypt_key+0x28>
   1d9e4:	e006      	b.n	1d9f4 <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   1d9e6:	1f19      	subs	r1, r3, #4
   1d9e8:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
   1d9ec:	404a      	eors	r2, r1
   1d9ee:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   1d9f2:	3301      	adds	r3, #1
   1d9f4:	2b2b      	cmp	r3, #43	; 0x2b
   1d9f6:	d820      	bhi.n	1da3a <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
   1d9f8:	1e5a      	subs	r2, r3, #1
   1d9fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
		if ((i % Nk) == 0) {
   1d9fe:	f013 0f03 	tst.w	r3, #3
   1da02:	d1f0      	bne.n	1d9e6 <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
   1da04:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1da08:	0e11      	lsrs	r1, r2, #24
   1da0a:	4811      	ldr	r0, [pc, #68]	; (1da50 <tc_aes128_set_encrypt_key+0xb8>)
   1da0c:	5c45      	ldrb	r5, [r0, r1]
   1da0e:	f3c2 4107 	ubfx	r1, r2, #16, #8
   1da12:	5c41      	ldrb	r1, [r0, r1]
   1da14:	0409      	lsls	r1, r1, #16
   1da16:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   1da1a:	f3c2 2507 	ubfx	r5, r2, #8, #8
   1da1e:	5d45      	ldrb	r5, [r0, r5]
   1da20:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   1da24:	b2d2      	uxtb	r2, r2
   1da26:	5c82      	ldrb	r2, [r0, r2]
   1da28:	4311      	orrs	r1, r2
   1da2a:	f023 0203 	bic.w	r2, r3, #3
   1da2e:	a80c      	add	r0, sp, #48	; 0x30
   1da30:	4402      	add	r2, r0
   1da32:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   1da36:	404a      	eors	r2, r1
   1da38:	e7d5      	b.n	1d9e6 <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
   1da3a:	2001      	movs	r0, #1
}
   1da3c:	b00c      	add	sp, #48	; 0x30
   1da3e:	bcf0      	pop	{r4, r5, r6, r7}
   1da40:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   1da42:	2000      	movs	r0, #0
   1da44:	e7fa      	b.n	1da3c <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
   1da46:	2000      	movs	r0, #0
   1da48:	e7f8      	b.n	1da3c <tc_aes128_set_encrypt_key+0xa4>
   1da4a:	bf00      	nop
   1da4c:	0002c754 	.word	0x0002c754
   1da50:	0002c780 	.word	0x0002c780

0001da54 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1da54:	2800      	cmp	r0, #0
   1da56:	f000 8367 	beq.w	1e128 <tc_aes_encrypt+0x6d4>
{
   1da5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da5e:	b088      	sub	sp, #32
   1da60:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1da62:	2900      	cmp	r1, #0
   1da64:	f000 8362 	beq.w	1e12c <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1da68:	2a00      	cmp	r2, #0
   1da6a:	f000 8361 	beq.w	1e130 <tc_aes_encrypt+0x6dc>
   1da6e:	4617      	mov	r7, r2
   1da70:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1da72:	2310      	movs	r3, #16
   1da74:	4619      	mov	r1, r3
   1da76:	eb0d 0003 	add.w	r0, sp, r3
   1da7a:	f000 fb5d 	bl	1e138 <_copy>
	add_round_key(state, s->words);
   1da7e:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1da80:	683b      	ldr	r3, [r7, #0]
   1da82:	f89d 2010 	ldrb.w	r2, [sp, #16]
   1da86:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1da8a:	f88d 2010 	strb.w	r2, [sp, #16]
   1da8e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1da92:	f89d 1011 	ldrb.w	r1, [sp, #17]
   1da96:	404a      	eors	r2, r1
   1da98:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1da9c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1daa0:	f89d 1012 	ldrb.w	r1, [sp, #18]
   1daa4:	404a      	eors	r2, r1
   1daa6:	f88d 2012 	strb.w	r2, [sp, #18]
   1daaa:	b2db      	uxtb	r3, r3
   1daac:	f89d 2013 	ldrb.w	r2, [sp, #19]
   1dab0:	4053      	eors	r3, r2
   1dab2:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1dab6:	687b      	ldr	r3, [r7, #4]
   1dab8:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1dabc:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1dac0:	f88d 2014 	strb.w	r2, [sp, #20]
   1dac4:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1dac8:	f89d 1015 	ldrb.w	r1, [sp, #21]
   1dacc:	404a      	eors	r2, r1
   1dace:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1dad2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1dad6:	f89d 1016 	ldrb.w	r1, [sp, #22]
   1dada:	404a      	eors	r2, r1
   1dadc:	f88d 2016 	strb.w	r2, [sp, #22]
   1dae0:	b2db      	uxtb	r3, r3
   1dae2:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1dae6:	4053      	eors	r3, r2
   1dae8:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1daec:	68bb      	ldr	r3, [r7, #8]
   1daee:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1daf2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1daf6:	f88d 2018 	strb.w	r2, [sp, #24]
   1dafa:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1dafe:	f89d 1019 	ldrb.w	r1, [sp, #25]
   1db02:	404a      	eors	r2, r1
   1db04:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1db08:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1db0c:	f89d 101a 	ldrb.w	r1, [sp, #26]
   1db10:	404a      	eors	r2, r1
   1db12:	f88d 201a 	strb.w	r2, [sp, #26]
   1db16:	b2db      	uxtb	r3, r3
   1db18:	f89d 201b 	ldrb.w	r2, [sp, #27]
   1db1c:	4053      	eors	r3, r2
   1db1e:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1db22:	68fb      	ldr	r3, [r7, #12]
   1db24:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1db28:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1db2c:	f88d 201c 	strb.w	r2, [sp, #28]
   1db30:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1db34:	f89d 101d 	ldrb.w	r1, [sp, #29]
   1db38:	404a      	eors	r2, r1
   1db3a:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1db3e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1db42:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1db46:	404a      	eors	r2, r1
   1db48:	f88d 201e 	strb.w	r2, [sp, #30]
   1db4c:	b2db      	uxtb	r3, r3
   1db4e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1db52:	4053      	eors	r3, r2
   1db54:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   1db58:	2500      	movs	r5, #0
   1db5a:	e210      	b.n	1df7e <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
   1db5c:	a904      	add	r1, sp, #16
   1db5e:	5ccc      	ldrb	r4, [r1, r3]
   1db60:	4a02      	ldr	r2, [pc, #8]	; (1db6c <tc_aes_encrypt+0x118>)
   1db62:	5d14      	ldrb	r4, [r2, r4]
   1db64:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   1db66:	3301      	adds	r3, #1
   1db68:	e002      	b.n	1db70 <tc_aes_encrypt+0x11c>
   1db6a:	bf00      	nop
   1db6c:	0002c780 	.word	0x0002c780
   1db70:	2b0f      	cmp	r3, #15
   1db72:	d9f3      	bls.n	1db5c <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1db74:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1db78:	f88d 3000 	strb.w	r3, [sp]
   1db7c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1db80:	f88d 3001 	strb.w	r3, [sp, #1]
   1db84:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1db88:	f88d 3002 	strb.w	r3, [sp, #2]
   1db8c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1db90:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1db94:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1db98:	f88d 3004 	strb.w	r3, [sp, #4]
   1db9c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1dba0:	f88d 3005 	strb.w	r3, [sp, #5]
   1dba4:	f89d 301e 	ldrb.w	r3, [sp, #30]
   1dba8:	f88d 3006 	strb.w	r3, [sp, #6]
   1dbac:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1dbb0:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1dbb4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1dbb8:	f88d 3008 	strb.w	r3, [sp, #8]
   1dbbc:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1dbc0:	f88d 3009 	strb.w	r3, [sp, #9]
   1dbc4:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1dbc8:	f88d 300a 	strb.w	r3, [sp, #10]
   1dbcc:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1dbd0:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1dbd4:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1dbd8:	f88d 300c 	strb.w	r3, [sp, #12]
   1dbdc:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1dbe0:	f88d 300d 	strb.w	r3, [sp, #13]
   1dbe4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1dbe8:	f88d 300e 	strb.w	r3, [sp, #14]
   1dbec:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1dbf0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1dbf4:	2310      	movs	r3, #16
   1dbf6:	466a      	mov	r2, sp
   1dbf8:	4619      	mov	r1, r3
   1dbfa:	eb0d 0003 	add.w	r0, sp, r3
   1dbfe:	f000 fa9b 	bl	1e138 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1dc02:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1dc06:	f000 faa7 	bl	1e158 <_double_byte>
   1dc0a:	4604      	mov	r4, r0
   1dc0c:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1dc10:	f000 faa2 	bl	1e158 <_double_byte>
   1dc14:	f89d 1011 	ldrb.w	r1, [sp, #17]
   1dc18:	f89d 2012 	ldrb.w	r2, [sp, #18]
   1dc1c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1dc20:	4048      	eors	r0, r1
   1dc22:	4044      	eors	r4, r0
   1dc24:	4062      	eors	r2, r4
   1dc26:	4053      	eors	r3, r2
   1dc28:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1dc2c:	f89d 4010 	ldrb.w	r4, [sp, #16]
   1dc30:	4608      	mov	r0, r1
   1dc32:	f000 fa91 	bl	1e158 <_double_byte>
   1dc36:	4044      	eors	r4, r0
   1dc38:	b2e4      	uxtb	r4, r4
   1dc3a:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1dc3e:	f000 fa8b 	bl	1e158 <_double_byte>
   1dc42:	f89d 2012 	ldrb.w	r2, [sp, #18]
   1dc46:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1dc4a:	4050      	eors	r0, r2
   1dc4c:	4044      	eors	r4, r0
   1dc4e:	405c      	eors	r4, r3
   1dc50:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1dc54:	f89d 4010 	ldrb.w	r4, [sp, #16]
   1dc58:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1dc5c:	4044      	eors	r4, r0
   1dc5e:	4610      	mov	r0, r2
   1dc60:	f000 fa7a 	bl	1e158 <_double_byte>
   1dc64:	4044      	eors	r4, r0
   1dc66:	b2e4      	uxtb	r4, r4
   1dc68:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1dc6c:	f000 fa74 	bl	1e158 <_double_byte>
   1dc70:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1dc74:	4058      	eors	r0, r3
   1dc76:	4044      	eors	r4, r0
   1dc78:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1dc7c:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1dc80:	f000 fa6a 	bl	1e158 <_double_byte>
   1dc84:	f89d 2010 	ldrb.w	r2, [sp, #16]
   1dc88:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1dc8c:	f89d 4012 	ldrb.w	r4, [sp, #18]
   1dc90:	4050      	eors	r0, r2
   1dc92:	4043      	eors	r3, r0
   1dc94:	405c      	eors	r4, r3
   1dc96:	b2e4      	uxtb	r4, r4
   1dc98:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1dc9c:	f000 fa5c 	bl	1e158 <_double_byte>
   1dca0:	4060      	eors	r0, r4
   1dca2:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1dca6:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1dcaa:	f000 fa55 	bl	1e158 <_double_byte>
   1dcae:	4604      	mov	r4, r0
   1dcb0:	f89d 0015 	ldrb.w	r0, [sp, #21]
   1dcb4:	f000 fa50 	bl	1e158 <_double_byte>
   1dcb8:	f89d 1015 	ldrb.w	r1, [sp, #21]
   1dcbc:	f89d 2016 	ldrb.w	r2, [sp, #22]
   1dcc0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1dcc4:	4048      	eors	r0, r1
   1dcc6:	4044      	eors	r4, r0
   1dcc8:	4062      	eors	r2, r4
   1dcca:	4053      	eors	r3, r2
   1dccc:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1dcd0:	f89d 4014 	ldrb.w	r4, [sp, #20]
   1dcd4:	4608      	mov	r0, r1
   1dcd6:	f000 fa3f 	bl	1e158 <_double_byte>
   1dcda:	4044      	eors	r4, r0
   1dcdc:	b2e4      	uxtb	r4, r4
   1dcde:	f89d 0016 	ldrb.w	r0, [sp, #22]
   1dce2:	f000 fa39 	bl	1e158 <_double_byte>
   1dce6:	f89d 2016 	ldrb.w	r2, [sp, #22]
   1dcea:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1dcee:	4050      	eors	r0, r2
   1dcf0:	4044      	eors	r4, r0
   1dcf2:	405c      	eors	r4, r3
   1dcf4:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1dcf8:	f89d 4014 	ldrb.w	r4, [sp, #20]
   1dcfc:	f89d 0015 	ldrb.w	r0, [sp, #21]
   1dd00:	4044      	eors	r4, r0
   1dd02:	4610      	mov	r0, r2
   1dd04:	f000 fa28 	bl	1e158 <_double_byte>
   1dd08:	4044      	eors	r4, r0
   1dd0a:	b2e4      	uxtb	r4, r4
   1dd0c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1dd10:	f000 fa22 	bl	1e158 <_double_byte>
   1dd14:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1dd18:	4058      	eors	r0, r3
   1dd1a:	4044      	eors	r4, r0
   1dd1c:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1dd20:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1dd24:	f000 fa18 	bl	1e158 <_double_byte>
   1dd28:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1dd2c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1dd30:	f89d 4016 	ldrb.w	r4, [sp, #22]
   1dd34:	4050      	eors	r0, r2
   1dd36:	4043      	eors	r3, r0
   1dd38:	405c      	eors	r4, r3
   1dd3a:	b2e4      	uxtb	r4, r4
   1dd3c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1dd40:	f000 fa0a 	bl	1e158 <_double_byte>
   1dd44:	4060      	eors	r0, r4
   1dd46:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1dd4a:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1dd4e:	f000 fa03 	bl	1e158 <_double_byte>
   1dd52:	4604      	mov	r4, r0
   1dd54:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1dd58:	f000 f9fe 	bl	1e158 <_double_byte>
   1dd5c:	f89d 1019 	ldrb.w	r1, [sp, #25]
   1dd60:	f89d 201a 	ldrb.w	r2, [sp, #26]
   1dd64:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1dd68:	4048      	eors	r0, r1
   1dd6a:	4044      	eors	r4, r0
   1dd6c:	4062      	eors	r2, r4
   1dd6e:	4053      	eors	r3, r2
   1dd70:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1dd74:	f89d 4018 	ldrb.w	r4, [sp, #24]
   1dd78:	4608      	mov	r0, r1
   1dd7a:	f000 f9ed 	bl	1e158 <_double_byte>
   1dd7e:	4044      	eors	r4, r0
   1dd80:	b2e4      	uxtb	r4, r4
   1dd82:	f89d 001a 	ldrb.w	r0, [sp, #26]
   1dd86:	f000 f9e7 	bl	1e158 <_double_byte>
   1dd8a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   1dd8e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1dd92:	4050      	eors	r0, r2
   1dd94:	4044      	eors	r4, r0
   1dd96:	405c      	eors	r4, r3
   1dd98:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1dd9c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   1dda0:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1dda4:	4044      	eors	r4, r0
   1dda6:	4610      	mov	r0, r2
   1dda8:	f000 f9d6 	bl	1e158 <_double_byte>
   1ddac:	4044      	eors	r4, r0
   1ddae:	b2e4      	uxtb	r4, r4
   1ddb0:	f89d 001b 	ldrb.w	r0, [sp, #27]
   1ddb4:	f000 f9d0 	bl	1e158 <_double_byte>
   1ddb8:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1ddbc:	4058      	eors	r0, r3
   1ddbe:	4044      	eors	r4, r0
   1ddc0:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1ddc4:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1ddc8:	f000 f9c6 	bl	1e158 <_double_byte>
   1ddcc:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1ddd0:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1ddd4:	f89d 401a 	ldrb.w	r4, [sp, #26]
   1ddd8:	4050      	eors	r0, r2
   1ddda:	4043      	eors	r3, r0
   1dddc:	405c      	eors	r4, r3
   1ddde:	b2e4      	uxtb	r4, r4
   1dde0:	f89d 001b 	ldrb.w	r0, [sp, #27]
   1dde4:	f000 f9b8 	bl	1e158 <_double_byte>
   1dde8:	4060      	eors	r0, r4
   1ddea:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1ddee:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1ddf2:	f000 f9b1 	bl	1e158 <_double_byte>
   1ddf6:	4604      	mov	r4, r0
   1ddf8:	f89d 001d 	ldrb.w	r0, [sp, #29]
   1ddfc:	f000 f9ac 	bl	1e158 <_double_byte>
   1de00:	f89d 101d 	ldrb.w	r1, [sp, #29]
   1de04:	f89d 201e 	ldrb.w	r2, [sp, #30]
   1de08:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1de0c:	4048      	eors	r0, r1
   1de0e:	4044      	eors	r4, r0
   1de10:	4062      	eors	r2, r4
   1de12:	4053      	eors	r3, r2
   1de14:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1de18:	f89d 401c 	ldrb.w	r4, [sp, #28]
   1de1c:	4608      	mov	r0, r1
   1de1e:	f000 f99b 	bl	1e158 <_double_byte>
   1de22:	4044      	eors	r4, r0
   1de24:	b2e4      	uxtb	r4, r4
   1de26:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1de2a:	f000 f995 	bl	1e158 <_double_byte>
   1de2e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   1de32:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1de36:	4050      	eors	r0, r2
   1de38:	4044      	eors	r4, r0
   1de3a:	405c      	eors	r4, r3
   1de3c:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1de40:	f89d 401c 	ldrb.w	r4, [sp, #28]
   1de44:	f89d 001d 	ldrb.w	r0, [sp, #29]
   1de48:	4044      	eors	r4, r0
   1de4a:	4610      	mov	r0, r2
   1de4c:	f000 f984 	bl	1e158 <_double_byte>
   1de50:	4044      	eors	r4, r0
   1de52:	b2e4      	uxtb	r4, r4
   1de54:	f89d 001f 	ldrb.w	r0, [sp, #31]
   1de58:	f000 f97e 	bl	1e158 <_double_byte>
   1de5c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1de60:	4058      	eors	r0, r3
   1de62:	4044      	eors	r4, r0
   1de64:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1de68:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1de6c:	f000 f974 	bl	1e158 <_double_byte>
   1de70:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1de74:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1de78:	f89d 401e 	ldrb.w	r4, [sp, #30]
   1de7c:	4050      	eors	r0, r2
   1de7e:	4043      	eors	r3, r0
   1de80:	405c      	eors	r4, r3
   1de82:	b2e4      	uxtb	r4, r4
   1de84:	f89d 001f 	ldrb.w	r0, [sp, #31]
   1de88:	f000 f966 	bl	1e158 <_double_byte>
   1de8c:	4060      	eors	r0, r4
   1de8e:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1de92:	2310      	movs	r3, #16
   1de94:	466a      	mov	r2, sp
   1de96:	4619      	mov	r1, r3
   1de98:	eb0d 0003 	add.w	r0, sp, r3
   1de9c:	f000 f94c 	bl	1e138 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1dea0:	3501      	adds	r5, #1
   1dea2:	012b      	lsls	r3, r5, #4
   1dea4:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1dea6:	58f3      	ldr	r3, [r6, r3]
   1dea8:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1deac:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   1deb0:	f88d 1010 	strb.w	r1, [sp, #16]
   1deb4:	f3c3 4107 	ubfx	r1, r3, #16, #8
   1deb8:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1debc:	4041      	eors	r1, r0
   1debe:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1dec2:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1dec6:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1deca:	4041      	eors	r1, r0
   1decc:	f88d 1012 	strb.w	r1, [sp, #18]
   1ded0:	b2db      	uxtb	r3, r3
   1ded2:	f89d 1013 	ldrb.w	r1, [sp, #19]
   1ded6:	404b      	eors	r3, r1
   1ded8:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1dedc:	6853      	ldr	r3, [r2, #4]
   1dede:	f89d 1014 	ldrb.w	r1, [sp, #20]
   1dee2:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   1dee6:	f88d 1014 	strb.w	r1, [sp, #20]
   1deea:	f3c3 4107 	ubfx	r1, r3, #16, #8
   1deee:	f89d 0015 	ldrb.w	r0, [sp, #21]
   1def2:	4041      	eors	r1, r0
   1def4:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1def8:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1defc:	f89d 0016 	ldrb.w	r0, [sp, #22]
   1df00:	4041      	eors	r1, r0
   1df02:	f88d 1016 	strb.w	r1, [sp, #22]
   1df06:	b2db      	uxtb	r3, r3
   1df08:	f89d 1017 	ldrb.w	r1, [sp, #23]
   1df0c:	404b      	eors	r3, r1
   1df0e:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1df12:	6893      	ldr	r3, [r2, #8]
   1df14:	f89d 1018 	ldrb.w	r1, [sp, #24]
   1df18:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   1df1c:	f88d 1018 	strb.w	r1, [sp, #24]
   1df20:	f3c3 4107 	ubfx	r1, r3, #16, #8
   1df24:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1df28:	4041      	eors	r1, r0
   1df2a:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1df2e:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1df32:	f89d 001a 	ldrb.w	r0, [sp, #26]
   1df36:	4041      	eors	r1, r0
   1df38:	f88d 101a 	strb.w	r1, [sp, #26]
   1df3c:	b2db      	uxtb	r3, r3
   1df3e:	f89d 101b 	ldrb.w	r1, [sp, #27]
   1df42:	404b      	eors	r3, r1
   1df44:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1df48:	68d3      	ldr	r3, [r2, #12]
   1df4a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1df4e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1df52:	f88d 201c 	strb.w	r2, [sp, #28]
   1df56:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1df5a:	f89d 101d 	ldrb.w	r1, [sp, #29]
   1df5e:	404a      	eors	r2, r1
   1df60:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1df64:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1df68:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1df6c:	404a      	eors	r2, r1
   1df6e:	f88d 201e 	strb.w	r2, [sp, #30]
   1df72:	b2db      	uxtb	r3, r3
   1df74:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1df78:	4053      	eors	r3, r2
   1df7a:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   1df7e:	2d08      	cmp	r5, #8
   1df80:	d801      	bhi.n	1df86 <tc_aes_encrypt+0x532>
	for (i = 0; i < (Nb * Nk); ++i) {
   1df82:	2300      	movs	r3, #0
   1df84:	e5f4      	b.n	1db70 <tc_aes_encrypt+0x11c>
   1df86:	2300      	movs	r3, #0
   1df88:	e005      	b.n	1df96 <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
   1df8a:	aa04      	add	r2, sp, #16
   1df8c:	5cd1      	ldrb	r1, [r2, r3]
   1df8e:	4869      	ldr	r0, [pc, #420]	; (1e134 <tc_aes_encrypt+0x6e0>)
   1df90:	5c41      	ldrb	r1, [r0, r1]
   1df92:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   1df94:	3301      	adds	r3, #1
   1df96:	2b0f      	cmp	r3, #15
   1df98:	d9f7      	bls.n	1df8a <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1df9a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1df9e:	f88d 3000 	strb.w	r3, [sp]
   1dfa2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1dfa6:	f88d 3001 	strb.w	r3, [sp, #1]
   1dfaa:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1dfae:	f88d 3002 	strb.w	r3, [sp, #2]
   1dfb2:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1dfb6:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1dfba:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1dfbe:	f88d 3004 	strb.w	r3, [sp, #4]
   1dfc2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1dfc6:	f88d 3005 	strb.w	r3, [sp, #5]
   1dfca:	f89d 301e 	ldrb.w	r3, [sp, #30]
   1dfce:	f88d 3006 	strb.w	r3, [sp, #6]
   1dfd2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1dfd6:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1dfda:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1dfde:	f88d 3008 	strb.w	r3, [sp, #8]
   1dfe2:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1dfe6:	f88d 3009 	strb.w	r3, [sp, #9]
   1dfea:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1dfee:	f88d 300a 	strb.w	r3, [sp, #10]
   1dff2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1dff6:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1dffa:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1dffe:	f88d 300c 	strb.w	r3, [sp, #12]
   1e002:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1e006:	f88d 300d 	strb.w	r3, [sp, #13]
   1e00a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1e00e:	f88d 300e 	strb.w	r3, [sp, #14]
   1e012:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1e016:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1e01a:	2310      	movs	r3, #16
   1e01c:	466a      	mov	r2, sp
   1e01e:	4619      	mov	r1, r3
   1e020:	eb0d 0003 	add.w	r0, sp, r3
   1e024:	f000 f888 	bl	1e138 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   1e028:	1c6b      	adds	r3, r5, #1
   1e02a:	011b      	lsls	r3, r3, #4
   1e02c:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1e02e:	58fb      	ldr	r3, [r7, r3]
   1e030:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1e034:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   1e038:	f88d 1010 	strb.w	r1, [sp, #16]
   1e03c:	f3c3 4107 	ubfx	r1, r3, #16, #8
   1e040:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1e044:	4041      	eors	r1, r0
   1e046:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1e04a:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1e04e:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1e052:	4041      	eors	r1, r0
   1e054:	f88d 1012 	strb.w	r1, [sp, #18]
   1e058:	b2db      	uxtb	r3, r3
   1e05a:	f89d 1013 	ldrb.w	r1, [sp, #19]
   1e05e:	404b      	eors	r3, r1
   1e060:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1e064:	6853      	ldr	r3, [r2, #4]
   1e066:	f89d 1014 	ldrb.w	r1, [sp, #20]
   1e06a:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   1e06e:	f88d 1014 	strb.w	r1, [sp, #20]
   1e072:	f3c3 4107 	ubfx	r1, r3, #16, #8
   1e076:	f89d 0015 	ldrb.w	r0, [sp, #21]
   1e07a:	4041      	eors	r1, r0
   1e07c:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1e080:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1e084:	f89d 0016 	ldrb.w	r0, [sp, #22]
   1e088:	4041      	eors	r1, r0
   1e08a:	f88d 1016 	strb.w	r1, [sp, #22]
   1e08e:	b2db      	uxtb	r3, r3
   1e090:	f89d 1017 	ldrb.w	r1, [sp, #23]
   1e094:	404b      	eors	r3, r1
   1e096:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1e09a:	6893      	ldr	r3, [r2, #8]
   1e09c:	f89d 1018 	ldrb.w	r1, [sp, #24]
   1e0a0:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   1e0a4:	f88d 1018 	strb.w	r1, [sp, #24]
   1e0a8:	f3c3 4107 	ubfx	r1, r3, #16, #8
   1e0ac:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1e0b0:	4041      	eors	r1, r0
   1e0b2:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1e0b6:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1e0ba:	f89d 001a 	ldrb.w	r0, [sp, #26]
   1e0be:	4041      	eors	r1, r0
   1e0c0:	f88d 101a 	strb.w	r1, [sp, #26]
   1e0c4:	b2db      	uxtb	r3, r3
   1e0c6:	f89d 101b 	ldrb.w	r1, [sp, #27]
   1e0ca:	404b      	eors	r3, r1
   1e0cc:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1e0d0:	68d3      	ldr	r3, [r2, #12]
   1e0d2:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1e0d6:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1e0da:	f88d 201c 	strb.w	r2, [sp, #28]
   1e0de:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1e0e2:	f89d 101d 	ldrb.w	r1, [sp, #29]
   1e0e6:	404a      	eors	r2, r1
   1e0e8:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1e0ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1e0f0:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1e0f4:	404a      	eors	r2, r1
   1e0f6:	f88d 201e 	strb.w	r2, [sp, #30]
   1e0fa:	b2db      	uxtb	r3, r3
   1e0fc:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1e100:	4053      	eors	r3, r2
   1e102:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1e106:	2310      	movs	r3, #16
   1e108:	eb0d 0203 	add.w	r2, sp, r3
   1e10c:	4619      	mov	r1, r3
   1e10e:	4640      	mov	r0, r8
   1e110:	f000 f812 	bl	1e138 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1e114:	2210      	movs	r2, #16
   1e116:	2100      	movs	r1, #0
   1e118:	eb0d 0002 	add.w	r0, sp, r2
   1e11c:	f000 f818 	bl	1e150 <_set>

	return TC_CRYPTO_SUCCESS;
   1e120:	2001      	movs	r0, #1
}
   1e122:	b008      	add	sp, #32
   1e124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   1e128:	2000      	movs	r0, #0
}
   1e12a:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   1e12c:	2000      	movs	r0, #0
   1e12e:	e7f8      	b.n	1e122 <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
   1e130:	2000      	movs	r0, #0
   1e132:	e7f6      	b.n	1e122 <tc_aes_encrypt+0x6ce>
   1e134:	0002c780 	.word	0x0002c780

0001e138 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   1e138:	428b      	cmp	r3, r1
   1e13a:	d901      	bls.n	1e140 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   1e13c:	2000      	movs	r0, #0
	}
}
   1e13e:	4770      	bx	lr
{
   1e140:	b510      	push	{r4, lr}
   1e142:	461c      	mov	r4, r3
   1e144:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
   1e146:	461a      	mov	r2, r3
   1e148:	f7f4 f9bc 	bl	124c4 <memcpy>
		return from_len;
   1e14c:	4620      	mov	r0, r4
}
   1e14e:	bd10      	pop	{r4, pc}

0001e150 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   1e150:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   1e152:	f7f4 f9e0 	bl	12516 <memset>
}
   1e156:	bd08      	pop	{r3, pc}

0001e158 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1e158:	09c3      	lsrs	r3, r0, #7
   1e15a:	005a      	lsls	r2, r3, #1
   1e15c:	4413      	add	r3, r2
   1e15e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1e162:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1e166:	b2c0      	uxtb	r0, r0
   1e168:	4770      	bx	lr
	...

0001e16c <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1e16c:	b908      	cbnz	r0, 1e172 <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1e16e:	4802      	ldr	r0, [pc, #8]	; (1e178 <hal_bsp_flash_dev+0xc>)
   1e170:	4770      	bx	lr
    }

    return NULL;
   1e172:	2000      	movs	r0, #0
}
   1e174:	4770      	bx	lr
   1e176:	bf00      	nop
   1e178:	0002c880 	.word	0x0002c880

0001e17c <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1e17c:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1e17e:	f7ea f83d 	bl	81fc <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1e182:	f000 fcc9 	bl	1eb18 <nrf52_periph_create>
}
   1e186:	bd08      	pop	{r3, pc}

0001e188 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1e188:	2300      	movs	r3, #0
   1e18a:	4a07      	ldr	r2, [pc, #28]	; (1e1a8 <nrf52k_flash_wait_ready+0x20>)
   1e18c:	4293      	cmp	r3, r2
   1e18e:	dc06      	bgt.n	1e19e <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1e190:	4a06      	ldr	r2, [pc, #24]	; (1e1ac <nrf52k_flash_wait_ready+0x24>)
   1e192:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1e196:	2a01      	cmp	r2, #1
   1e198:	d004      	beq.n	1e1a4 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1e19a:	3301      	adds	r3, #1
   1e19c:	e7f5      	b.n	1e18a <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1e19e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e1a2:	4770      	bx	lr
            return 0;
   1e1a4:	2000      	movs	r0, #0
}
   1e1a6:	4770      	bx	lr
   1e1a8:	0001869f 	.word	0x0001869f
   1e1ac:	4001e000 	.word	0x4001e000

0001e1b0 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1e1b0:	b538      	push	{r3, r4, r5, lr}
   1e1b2:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1e1b4:	f7ff ffe8 	bl	1e188 <nrf52k_flash_wait_ready>
   1e1b8:	b9f0      	cbnz	r0, 1e1f8 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e1ba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e1be:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1e1c0:	4b0f      	ldr	r3, [pc, #60]	; (1e200 <nrf52k_flash_erase_sector+0x50>)
   1e1c2:	2202      	movs	r2, #2
   1e1c4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1e1c8:	f7ff ffde 	bl	1e188 <nrf52k_flash_wait_ready>
   1e1cc:	b148      	cbz	r0, 1e1e2 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1e1ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1e1d2:	4a0b      	ldr	r2, [pc, #44]	; (1e200 <nrf52k_flash_erase_sector+0x50>)
   1e1d4:	2100      	movs	r1, #0
   1e1d6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1e1da:	b904      	cbnz	r4, 1e1de <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1e1dc:	b662      	cpsie	i
    return rc;
}
   1e1de:	4618      	mov	r0, r3
   1e1e0:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1e1e2:	4b07      	ldr	r3, [pc, #28]	; (1e200 <nrf52k_flash_erase_sector+0x50>)
   1e1e4:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1e1e8:	f7ff ffce 	bl	1e188 <nrf52k_flash_wait_ready>
   1e1ec:	4603      	mov	r3, r0
   1e1ee:	2800      	cmp	r0, #0
   1e1f0:	d0ef      	beq.n	1e1d2 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1e1f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e1f6:	e7ec      	b.n	1e1d2 <nrf52k_flash_erase_sector+0x22>
        return -1;
   1e1f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e1fc:	e7ef      	b.n	1e1de <nrf52k_flash_erase_sector+0x2e>
   1e1fe:	bf00      	nop
   1e200:	4001e000 	.word	0x4001e000

0001e204 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1e204:	2000      	movs	r0, #0
   1e206:	4770      	bx	lr

0001e208 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1e208:	297f      	cmp	r1, #127	; 0x7f
   1e20a:	dc06      	bgt.n	1e21a <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1e20c:	0309      	lsls	r1, r1, #12
   1e20e:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1e210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1e214:	601a      	str	r2, [r3, #0]
}
   1e216:	2000      	movs	r0, #0
   1e218:	4770      	bx	lr
{
   1e21a:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1e21c:	2300      	movs	r3, #0
   1e21e:	461a      	mov	r2, r3
   1e220:	4619      	mov	r1, r3
   1e222:	4618      	mov	r0, r3
   1e224:	f7f2 f9da 	bl	105dc <__assert_func>

0001e228 <nrf52k_flash_write>:
{
   1e228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e22c:	b082      	sub	sp, #8
   1e22e:	460d      	mov	r5, r1
   1e230:	4616      	mov	r6, r2
   1e232:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1e234:	f7ff ffa8 	bl	1e188 <nrf52k_flash_wait_ready>
   1e238:	2800      	cmp	r0, #0
   1e23a:	d158      	bne.n	1e2ee <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e23c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e240:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1e242:	4b2c      	ldr	r3, [pc, #176]	; (1e2f4 <nrf52k_flash_write+0xcc>)
   1e244:	2201      	movs	r2, #1
   1e246:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1e24a:	f015 0803 	ands.w	r8, r5, #3
   1e24e:	d10b      	bne.n	1e268 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1e250:	2c03      	cmp	r4, #3
   1e252:	d925      	bls.n	1e2a0 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1e254:	f7ff ff98 	bl	1e188 <nrf52k_flash_wait_ready>
   1e258:	2800      	cmp	r0, #0
   1e25a:	d139      	bne.n	1e2d0 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1e25c:	f856 3b04 	ldr.w	r3, [r6], #4
   1e260:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1e264:	3c04      	subs	r4, #4
   1e266:	e7f3      	b.n	1e250 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1e268:	f7ff ff8e 	bl	1e188 <nrf52k_flash_wait_ready>
   1e26c:	bb68      	cbnz	r0, 1e2ca <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1e26e:	f025 0a03 	bic.w	sl, r5, #3
   1e272:	f8da 3000 	ldr.w	r3, [sl]
   1e276:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1e278:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1e27c:	45a1      	cmp	r9, r4
   1e27e:	d900      	bls.n	1e282 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1e280:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1e282:	464a      	mov	r2, r9
   1e284:	4631      	mov	r1, r6
   1e286:	ab01      	add	r3, sp, #4
   1e288:	eb03 0008 	add.w	r0, r3, r8
   1e28c:	f7f4 f91a 	bl	124c4 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1e290:	9b01      	ldr	r3, [sp, #4]
   1e292:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1e296:	444d      	add	r5, r9
        num_bytes -= cnt;
   1e298:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1e29c:	444e      	add	r6, r9
   1e29e:	e7d7      	b.n	1e250 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1e2a0:	b164      	cbz	r4, 1e2bc <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1e2a2:	682b      	ldr	r3, [r5, #0]
   1e2a4:	a802      	add	r0, sp, #8
   1e2a6:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1e2aa:	4622      	mov	r2, r4
   1e2ac:	4631      	mov	r1, r6
   1e2ae:	f7f4 f909 	bl	124c4 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1e2b2:	f7ff ff69 	bl	1e188 <nrf52k_flash_wait_ready>
   1e2b6:	b9b8      	cbnz	r0, 1e2e8 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1e2b8:	9b01      	ldr	r3, [sp, #4]
   1e2ba:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1e2bc:	f7ff ff64 	bl	1e188 <nrf52k_flash_wait_ready>
   1e2c0:	4603      	mov	r3, r0
   1e2c2:	b138      	cbz	r0, 1e2d4 <nrf52k_flash_write+0xac>
        rc = -1;
   1e2c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e2c8:	e004      	b.n	1e2d4 <nrf52k_flash_write+0xac>
    int rc = -1;
   1e2ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e2ce:	e001      	b.n	1e2d4 <nrf52k_flash_write+0xac>
   1e2d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1e2d4:	4a07      	ldr	r2, [pc, #28]	; (1e2f4 <nrf52k_flash_write+0xcc>)
   1e2d6:	2100      	movs	r1, #0
   1e2d8:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1e2dc:	b907      	cbnz	r7, 1e2e0 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1e2de:	b662      	cpsie	i
}
   1e2e0:	4618      	mov	r0, r3
   1e2e2:	b002      	add	sp, #8
   1e2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1e2e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e2ec:	e7f2      	b.n	1e2d4 <nrf52k_flash_write+0xac>
        return -1;
   1e2ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e2f2:	e7f5      	b.n	1e2e0 <nrf52k_flash_write+0xb8>
   1e2f4:	4001e000 	.word	0x4001e000

0001e2f8 <nrf52k_flash_read>:
{
   1e2f8:	b508      	push	{r3, lr}
   1e2fa:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1e2fc:	461a      	mov	r2, r3
   1e2fe:	f7f4 f8e1 	bl	124c4 <memcpy>
}
   1e302:	2000      	movs	r0, #0
   1e304:	bd08      	pop	{r3, pc}
	...

0001e308 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1e308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1e30a:	f7f2 f89d 	bl	10448 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1e30e:	4b31      	ldr	r3, [pc, #196]	; (1e3d4 <nrf52_timer_handler+0xcc>)
   1e310:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1e314:	4b30      	ldr	r3, [pc, #192]	; (1e3d8 <nrf52_timer_handler+0xd0>)
   1e316:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1e318:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1e31c:	d225      	bcs.n	1e36a <nrf52_timer_handler+0x62>
   1e31e:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1e320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1e324:	d227      	bcs.n	1e376 <nrf52_timer_handler+0x6e>
    result = x - y;
   1e326:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1e328:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1e32c:	d129      	bne.n	1e382 <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1e32e:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1e332:	4f29      	ldr	r7, [pc, #164]	; (1e3d8 <nrf52_timer_handler+0xd0>)
   1e334:	683c      	ldr	r4, [r7, #0]
   1e336:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1e33a:	4628      	mov	r0, r5
   1e33c:	f7f3 ff04 	bl	12148 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1e340:	4b24      	ldr	r3, [pc, #144]	; (1e3d4 <nrf52_timer_handler+0xcc>)
   1e342:	2200      	movs	r2, #0
   1e344:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1e348:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1e34a:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1e34c:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1e350:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1e354:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1e356:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1e358:	f7f2 f87f 	bl	1045a <os_arch_in_critical>
   1e35c:	bb28      	cbnz	r0, 1e3aa <nrf52_timer_handler+0xa2>
   1e35e:	2300      	movs	r3, #0
   1e360:	461a      	mov	r2, r3
   1e362:	4619      	mov	r1, r3
   1e364:	4618      	mov	r0, r3
   1e366:	f7f2 f939 	bl	105dc <__assert_func>
    assert(x <= 0xffffff);
   1e36a:	2300      	movs	r3, #0
   1e36c:	461a      	mov	r2, r3
   1e36e:	4619      	mov	r1, r3
   1e370:	4618      	mov	r0, r3
   1e372:	f7f2 f933 	bl	105dc <__assert_func>
    assert(y <= 0xffffff);
   1e376:	2300      	movs	r3, #0
   1e378:	461a      	mov	r2, r3
   1e37a:	4619      	mov	r1, r3
   1e37c:	4618      	mov	r0, r3
   1e37e:	f7f2 f92d 	bl	105dc <__assert_func>
        return (result | 0xff800000);
   1e382:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1e386:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1e38a:	e7d2      	b.n	1e332 <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1e38c:	2300      	movs	r3, #0
   1e38e:	461a      	mov	r2, r3
   1e390:	4619      	mov	r1, r3
   1e392:	4618      	mov	r0, r3
   1e394:	f7f2 f922 	bl	105dc <__assert_func>
        return (result | 0xff800000);
   1e398:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1e39c:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1e3a0:	2a02      	cmp	r2, #2
   1e3a2:	dc13      	bgt.n	1e3cc <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1e3a4:	4a0c      	ldr	r2, [pc, #48]	; (1e3d8 <nrf52_timer_handler+0xd0>)
   1e3a6:	6814      	ldr	r4, [r2, #0]
   1e3a8:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1e3aa:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1e3ae:	4a09      	ldr	r2, [pc, #36]	; (1e3d4 <nrf52_timer_handler+0xcc>)
   1e3b0:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1e3b4:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1e3b8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1e3bc:	d2e6      	bcs.n	1e38c <nrf52_timer_handler+0x84>
    result = x - y;
   1e3be:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1e3c0:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1e3c4:	d1e8      	bne.n	1e398 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1e3c6:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1e3ca:	e7e9      	b.n	1e3a0 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1e3cc:	4630      	mov	r0, r6
   1e3ce:	f7f2 f841 	bl	10454 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1e3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e3d4:	40011000 	.word	0x40011000
   1e3d8:	20003d98 	.word	0x20003d98

0001e3dc <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1e3dc:	b538      	push	{r3, r4, r5, lr}
   1e3de:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1e3e0:	f7f2 f83b 	bl	1045a <os_arch_in_critical>
   1e3e4:	b1a0      	cbz	r0, 1e410 <os_tick_idle+0x34>

    if (ticks > 0) {
   1e3e6:	2d00      	cmp	r5, #0
   1e3e8:	d038      	beq.n	1e45c <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1e3ea:	4b20      	ldr	r3, [pc, #128]	; (1e46c <os_tick_idle+0x90>)
   1e3ec:	685b      	ldr	r3, [r3, #4]
   1e3ee:	42ab      	cmp	r3, r5
   1e3f0:	d200      	bcs.n	1e3f4 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1e3f2:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1e3f4:	4b1d      	ldr	r3, [pc, #116]	; (1e46c <os_tick_idle+0x90>)
   1e3f6:	689c      	ldr	r4, [r3, #8]
   1e3f8:	681a      	ldr	r2, [r3, #0]
   1e3fa:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1e3fe:	f7f2 f82c 	bl	1045a <os_arch_in_critical>
   1e402:	b9d0      	cbnz	r0, 1e43a <os_tick_idle+0x5e>
   1e404:	2300      	movs	r3, #0
   1e406:	461a      	mov	r2, r3
   1e408:	4619      	mov	r1, r3
   1e40a:	4618      	mov	r0, r3
   1e40c:	f7f2 f8e6 	bl	105dc <__assert_func>
    OS_ASSERT_CRITICAL();
   1e410:	2300      	movs	r3, #0
   1e412:	461a      	mov	r2, r3
   1e414:	4619      	mov	r1, r3
   1e416:	4618      	mov	r0, r3
   1e418:	f7f2 f8e0 	bl	105dc <__assert_func>
    assert(y <= 0xffffff);
   1e41c:	2300      	movs	r3, #0
   1e41e:	461a      	mov	r2, r3
   1e420:	4619      	mov	r1, r3
   1e422:	4618      	mov	r0, r3
   1e424:	f7f2 f8da 	bl	105dc <__assert_func>
        return (result | 0xff800000);
   1e428:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1e42c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1e430:	2b02      	cmp	r3, #2
   1e432:	dc13      	bgt.n	1e45c <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1e434:	4b0d      	ldr	r3, [pc, #52]	; (1e46c <os_tick_idle+0x90>)
   1e436:	681c      	ldr	r4, [r3, #0]
   1e438:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1e43a:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1e43e:	4b0c      	ldr	r3, [pc, #48]	; (1e470 <os_tick_idle+0x94>)
   1e440:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1e444:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1e448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1e44c:	d2e6      	bcs.n	1e41c <os_tick_idle+0x40>
    result = x - y;
   1e44e:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1e450:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1e454:	d1e8      	bne.n	1e428 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1e456:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1e45a:	e7e9      	b.n	1e430 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1e45c:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1e460:	bf30      	wfi

    if (ticks > 0) {
   1e462:	b905      	cbnz	r5, 1e466 <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1e464:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1e466:	f7ff ff4f 	bl	1e308 <nrf52_timer_handler>
}
   1e46a:	e7fb      	b.n	1e464 <os_tick_idle+0x88>
   1e46c:	20003d98 	.word	0x20003d98
   1e470:	40011000 	.word	0x40011000

0001e474 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1e474:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1e476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1e47a:	fbb3 f3f0 	udiv	r3, r3, r0
   1e47e:	fb00 f303 	mul.w	r3, r0, r3
   1e482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e486:	d136      	bne.n	1e4f6 <os_tick_init+0x82>
   1e488:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1e48a:	4d1e      	ldr	r5, [pc, #120]	; (1e504 <os_tick_init+0x90>)
   1e48c:	2600      	movs	r6, #0
   1e48e:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1e490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1e494:	fbb3 f0f0 	udiv	r0, r3, r0
   1e498:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1e49a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1e49e:	fbb3 f0f0 	udiv	r0, r3, r0
   1e4a2:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1e4a4:	f7f1 ffd0 	bl	10448 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e4a8:	0164      	lsls	r4, r4, #5
   1e4aa:	b2e4      	uxtb	r4, r4
   1e4ac:	4b16      	ldr	r3, [pc, #88]	; (1e508 <os_tick_init+0x94>)
   1e4ae:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1e4b2:	4a16      	ldr	r2, [pc, #88]	; (1e50c <os_tick_init+0x98>)
   1e4b4:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1e4b6:	4916      	ldr	r1, [pc, #88]	; (1e510 <os_tick_init+0x9c>)
   1e4b8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e4bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1e4c0:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1e4c2:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1e4c6:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1e4ca:	2201      	movs	r2, #1
   1e4cc:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1e4ce:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1e4d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e4d4:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1e4d8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1e4dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1e4e0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1e4e4:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1e4e8:	6829      	ldr	r1, [r5, #0]
   1e4ea:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1e4ee:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1e4f0:	f7f1 ffb0 	bl	10454 <os_arch_restore_sr>
}
   1e4f4:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1e4f6:	2300      	movs	r3, #0
   1e4f8:	461a      	mov	r2, r3
   1e4fa:	4619      	mov	r1, r3
   1e4fc:	4618      	mov	r0, r3
   1e4fe:	f7f2 f86d 	bl	105dc <__assert_func>
   1e502:	bf00      	nop
   1e504:	20003d98 	.word	0x20003d98
   1e508:	e000e100 	.word	0xe000e100
   1e50c:	e000ed00 	.word	0xe000ed00
   1e510:	0001e309 	.word	0x0001e309

0001e514 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1e514:	2301      	movs	r3, #1
   1e516:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1e518:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1e51c:	4770      	bx	lr
	...

0001e520 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1e520:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1e522:	7883      	ldrb	r3, [r0, #2]
   1e524:	b393      	cbz	r3, 1e58c <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1e526:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1e528:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1e52c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1e530:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1e532:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1e536:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1e53a:	b11d      	cbz	r5, 1e544 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1e53c:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1e540:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1e544:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1e546:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1e548:	2b02      	cmp	r3, #2
   1e54a:	dc0e      	bgt.n	1e56a <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1e54c:	7842      	ldrb	r2, [r0, #1]
   1e54e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1e550:	2b00      	cmp	r3, #0
   1e552:	db15      	blt.n	1e580 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e554:	f002 021f 	and.w	r2, r2, #31
   1e558:	095b      	lsrs	r3, r3, #5
   1e55a:	2101      	movs	r1, #1
   1e55c:	fa01 f202 	lsl.w	r2, r1, r2
   1e560:	3340      	adds	r3, #64	; 0x40
   1e562:	491b      	ldr	r1, [pc, #108]	; (1e5d0 <nrf_timer_set_ocmp+0xb0>)
   1e564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1e568:	e00a      	b.n	1e580 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1e56a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1e56e:	d208      	bcs.n	1e582 <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1e570:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1e574:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1e578:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1e57c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1e580:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1e582:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1e586:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1e58a:	e7f5      	b.n	1e578 <nrf_timer_set_ocmp+0x58>
   1e58c:	460d      	mov	r5, r1
   1e58e:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1e590:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1e592:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1e596:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1e59a:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1e59e:	2200      	movs	r2, #0
   1e5a0:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1e5a4:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1e5a8:	f7ff ffb4 	bl	1e514 <nrf_read_timer_cntr>
   1e5ac:	1b40      	subs	r0, r0, r5
   1e5ae:	2800      	cmp	r0, #0
   1e5b0:	dbe6      	blt.n	1e580 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1e5b2:	7862      	ldrb	r2, [r4, #1]
   1e5b4:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1e5b6:	2b00      	cmp	r3, #0
   1e5b8:	dbe2      	blt.n	1e580 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e5ba:	f002 021f 	and.w	r2, r2, #31
   1e5be:	095b      	lsrs	r3, r3, #5
   1e5c0:	2101      	movs	r1, #1
   1e5c2:	fa01 f202 	lsl.w	r2, r1, r2
   1e5c6:	3340      	adds	r3, #64	; 0x40
   1e5c8:	4901      	ldr	r1, [pc, #4]	; (1e5d0 <nrf_timer_set_ocmp+0xb0>)
   1e5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1e5ce:	e7d7      	b.n	1e580 <nrf_timer_set_ocmp+0x60>
   1e5d0:	e000e100 	.word	0xe000e100

0001e5d4 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1e5d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1e5d8:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1e5dc:	4770      	bx	lr

0001e5de <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1e5de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1e5e2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1e5e6:	4770      	bx	lr

0001e5e8 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1e5e8:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1e5ea:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e5ec:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e5f0:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1e5f2:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1e5f4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1e5f8:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1e5fc:	b1ad      	cbz	r5, 1e62a <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1e5fe:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1e602:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1e604:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1e608:	2500      	movs	r5, #0
   1e60a:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1e60e:	7840      	ldrb	r0, [r0, #1]
   1e610:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1e612:	42aa      	cmp	r2, r5
   1e614:	db09      	blt.n	1e62a <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e616:	f000 001f 	and.w	r0, r0, #31
   1e61a:	0952      	lsrs	r2, r2, #5
   1e61c:	2501      	movs	r5, #1
   1e61e:	fa05 f000 	lsl.w	r0, r5, r0
   1e622:	3240      	adds	r2, #64	; 0x40
   1e624:	4d04      	ldr	r5, [pc, #16]	; (1e638 <hal_timer_read_bsptimer+0x50>)
   1e626:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1e62a:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1e62e:	b904      	cbnz	r4, 1e632 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1e630:	b662      	cpsie	i

    return tcntr;
}
   1e632:	bc30      	pop	{r4, r5}
   1e634:	4770      	bx	lr
   1e636:	bf00      	nop
   1e638:	e000e100 	.word	0xe000e100

0001e63c <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1e63c:	b570      	push	{r4, r5, r6, lr}
   1e63e:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e640:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e644:	b672      	cpsid	i
   1e646:	e013      	b.n	1e670 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1e648:	6928      	ldr	r0, [r5, #16]
   1e64a:	f7ff ff63 	bl	1e514 <nrf_read_timer_cntr>
            delta = 0;
   1e64e:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1e650:	68e3      	ldr	r3, [r4, #12]
   1e652:	1ac0      	subs	r0, r0, r3
   1e654:	4290      	cmp	r0, r2
   1e656:	db19      	blt.n	1e68c <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1e658:	6923      	ldr	r3, [r4, #16]
   1e65a:	b1a3      	cbz	r3, 1e686 <hal_timer_chk_queue+0x4a>
   1e65c:	6962      	ldr	r2, [r4, #20]
   1e65e:	615a      	str	r2, [r3, #20]
   1e660:	6963      	ldr	r3, [r4, #20]
   1e662:	6922      	ldr	r2, [r4, #16]
   1e664:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1e666:	2300      	movs	r3, #0
   1e668:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1e66a:	6863      	ldr	r3, [r4, #4]
   1e66c:	68a0      	ldr	r0, [r4, #8]
   1e66e:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1e670:	696c      	ldr	r4, [r5, #20]
   1e672:	b15c      	cbz	r4, 1e68c <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1e674:	78ab      	ldrb	r3, [r5, #2]
   1e676:	2b00      	cmp	r3, #0
   1e678:	d0e6      	beq.n	1e648 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1e67a:	4628      	mov	r0, r5
   1e67c:	f7ff ffb4 	bl	1e5e8 <hal_timer_read_bsptimer>
            delta = -3;
   1e680:	f06f 0202 	mvn.w	r2, #2
   1e684:	e7e4      	b.n	1e650 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1e686:	6963      	ldr	r3, [r4, #20]
   1e688:	61ab      	str	r3, [r5, #24]
   1e68a:	e7e9      	b.n	1e660 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1e68c:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1e68e:	b133      	cbz	r3, 1e69e <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1e690:	68d9      	ldr	r1, [r3, #12]
   1e692:	4628      	mov	r0, r5
   1e694:	f7ff ff44 	bl	1e520 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1e698:	b906      	cbnz	r6, 1e69c <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1e69a:	b662      	cpsie	i
}
   1e69c:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1e69e:	78ab      	ldrb	r3, [r5, #2]
   1e6a0:	b11b      	cbz	r3, 1e6aa <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1e6a2:	6928      	ldr	r0, [r5, #16]
   1e6a4:	f7ff ff9b 	bl	1e5de <nrf_rtc_disable_ocmp>
   1e6a8:	e7f6      	b.n	1e698 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1e6aa:	6928      	ldr	r0, [r5, #16]
   1e6ac:	f7ff ff92 	bl	1e5d4 <nrf_timer_disable_ocmp>
   1e6b0:	e7f2      	b.n	1e698 <hal_timer_chk_queue+0x5c>

0001e6b2 <hal_rtc_timer_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_5)
static void
hal_rtc_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1e6b2:	b510      	push	{r4, lr}
    NRF_RTC_Type *rtctimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1e6b4:	6904      	ldr	r4, [r0, #16]
    compare = rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT];
   1e6b6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (compare) {
   1e6ba:	b113      	cbz	r3, 1e6c2 <hal_rtc_timer_irq_handler+0x10>
       rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT] = 0;
   1e6bc:	2300      	movs	r3, #0
   1e6be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    }

    overflow = rtctimer->EVENTS_OVRFLW;
   1e6c2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (overflow) {
   1e6c6:	b133      	cbz	r3, 1e6d6 <hal_rtc_timer_irq_handler+0x24>
        rtctimer->EVENTS_OVRFLW = 0;
   1e6c8:	2300      	movs	r3, #0
   1e6ca:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        bsptimer->tmr_cntr += (1UL << 24);
   1e6ce:	6843      	ldr	r3, [r0, #4]
   1e6d0:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   1e6d4:	6043      	str	r3, [r0, #4]
    }

    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1e6d6:	6883      	ldr	r3, [r0, #8]
   1e6d8:	3301      	adds	r3, #1
   1e6da:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    hal_timer_chk_queue(bsptimer);
   1e6dc:	f7ff ffae 	bl	1e63c <hal_timer_chk_queue>

    /* Recommended by nordic to make sure interrupts are cleared */
    compare = rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT];
   1e6e0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148

    os_trace_isr_exit();
}
   1e6e4:	bd10      	pop	{r4, pc}
	...

0001e6e8 <nrf52_timer5_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_5)
void
nrf52_timer5_irq_handler(void)
{
   1e6e8:	b508      	push	{r3, lr}
    hal_rtc_timer_irq_handler(&nrf52_hal_timer5);
   1e6ea:	4802      	ldr	r0, [pc, #8]	; (1e6f4 <nrf52_timer5_irq_handler+0xc>)
   1e6ec:	f7ff ffe1 	bl	1e6b2 <hal_rtc_timer_irq_handler>
}
   1e6f0:	bd08      	pop	{r3, pc}
   1e6f2:	bf00      	nop
   1e6f4:	20003da4 	.word	0x20003da4

0001e6f8 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e6f8:	2805      	cmp	r0, #5
   1e6fa:	dc20      	bgt.n	1e73e <hal_timer_init+0x46>
   1e6fc:	4b14      	ldr	r3, [pc, #80]	; (1e750 <hal_timer_init+0x58>)
   1e6fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1e702:	b1f3      	cbz	r3, 1e742 <hal_timer_init+0x4a>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1e704:	781a      	ldrb	r2, [r3, #0]
   1e706:	b9f2      	cbnz	r2, 1e746 <hal_timer_init+0x4e>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1e708:	2805      	cmp	r0, #5
   1e70a:	d11e      	bne.n	1e74a <hal_timer_init+0x52>
#if MYNEWT_VAL(TIMER_5)
    case 5:
        irq_num = RTC0_IRQn;
        hwtimer = NRF_RTC0;
        irq_isr = nrf52_timer5_irq_handler;
        bsptimer->tmr_rtc = 1;
   1e70c:	2201      	movs	r2, #1
   1e70e:	709a      	strb	r2, [r3, #2]
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1e710:	4a10      	ldr	r2, [pc, #64]	; (1e754 <hal_timer_init+0x5c>)
   1e712:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1e714:	220b      	movs	r2, #11
   1e716:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e718:	4b0f      	ldr	r3, [pc, #60]	; (1e758 <hal_timer_init+0x60>)
   1e71a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1e71e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1e722:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e726:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1e72a:	22e0      	movs	r2, #224	; 0xe0
   1e72c:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1e730:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1e734:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1e736:	4a09      	ldr	r2, [pc, #36]	; (1e75c <hal_timer_init+0x64>)
   1e738:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1e73a:	2000      	movs	r0, #0
   1e73c:	4770      	bx	lr

err:
    return rc;
   1e73e:	2016      	movs	r0, #22
   1e740:	4770      	bx	lr
   1e742:	2016      	movs	r0, #22
   1e744:	4770      	bx	lr
   1e746:	2016      	movs	r0, #22
   1e748:	4770      	bx	lr
   1e74a:	2016      	movs	r0, #22
}
   1e74c:	4770      	bx	lr
   1e74e:	bf00      	nop
   1e750:	0002c8b4 	.word	0x0002c8b4
   1e754:	4000b000 	.word	0x4000b000
   1e758:	e000e100 	.word	0xe000e100
   1e75c:	0001e6e9 	.word	0x0001e6e9

0001e760 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e760:	2805      	cmp	r0, #5
   1e762:	f300 8097 	bgt.w	1e894 <hal_timer_config+0x134>
{
   1e766:	b430      	push	{r4, r5}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e768:	4b56      	ldr	r3, [pc, #344]	; (1e8c4 <hal_timer_config+0x164>)
   1e76a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1e76e:	2c00      	cmp	r4, #0
   1e770:	f000 8092 	beq.w	1e898 <hal_timer_config+0x138>

#if MYNEWT_VAL(TIMER_5)
    if (timer_num == 5) {
   1e774:	2805      	cmp	r0, #5
   1e776:	d01d      	beq.n	1e7b4 <hal_timer_config+0x54>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1e778:	4b53      	ldr	r3, [pc, #332]	; (1e8c8 <hal_timer_config+0x168>)
   1e77a:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1e77e:	7823      	ldrb	r3, [r4, #0]
   1e780:	2b00      	cmp	r3, #0
   1e782:	f040 8093 	bne.w	1e8ac <hal_timer_config+0x14c>
   1e786:	2900      	cmp	r1, #0
   1e788:	f000 8093 	beq.w	1e8b2 <hal_timer_config+0x152>
   1e78c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1e790:	f200 8091 	bhi.w	1e8b6 <hal_timer_config+0x156>
        (bsptimer->tmr_reg == NULL)) {
   1e794:	6922      	ldr	r2, [r4, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1e796:	2a00      	cmp	r2, #0
   1e798:	f000 808f 	beq.w	1e8ba <hal_timer_config+0x15a>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1e79c:	2901      	cmp	r1, #1
   1e79e:	d03f      	beq.n	1e820 <hal_timer_config+0xc0>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1e7a0:	2301      	movs	r3, #1
   1e7a2:	2b09      	cmp	r3, #9
   1e7a4:	d83c      	bhi.n	1e820 <hal_timer_config+0xc0>
            if (div <= (1 << prescaler)) {
   1e7a6:	2201      	movs	r2, #1
   1e7a8:	409a      	lsls	r2, r3
   1e7aa:	428a      	cmp	r2, r1
   1e7ac:	d22e      	bcs.n	1e80c <hal_timer_config+0xac>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1e7ae:	3301      	adds	r3, #1
   1e7b0:	b2db      	uxtb	r3, r3
   1e7b2:	e7f6      	b.n	1e7a2 <hal_timer_config+0x42>
        if (bsptimer->tmr_enabled || (freq_hz != 32768) ||
   1e7b4:	7823      	ldrb	r3, [r4, #0]
   1e7b6:	2b00      	cmp	r3, #0
   1e7b8:	d170      	bne.n	1e89c <hal_timer_config+0x13c>
   1e7ba:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   1e7be:	d16f      	bne.n	1e8a0 <hal_timer_config+0x140>
            (bsptimer->tmr_reg == NULL)) {
   1e7c0:	6923      	ldr	r3, [r4, #16]
        if (bsptimer->tmr_enabled || (freq_hz != 32768) ||
   1e7c2:	2b00      	cmp	r3, #0
   1e7c4:	d06e      	beq.n	1e8a4 <hal_timer_config+0x144>
        bsptimer->tmr_freq = freq_hz;
   1e7c6:	60e1      	str	r1, [r4, #12]
        bsptimer->tmr_enabled = 1;
   1e7c8:	2201      	movs	r2, #1
   1e7ca:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e7cc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e7d0:	b672      	cpsid	i
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1e7d2:	6923      	ldr	r3, [r4, #16]
        rtctimer->TASKS_STOP = 1;
   1e7d4:	605a      	str	r2, [r3, #4]
        rtctimer->TASKS_CLEAR = 1;
   1e7d6:	609a      	str	r2, [r3, #8]
        rtctimer->PRESCALER = 0;
   1e7d8:	2100      	movs	r1, #0
   1e7da:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
        rtctimer->EVENTS_OVRFLW = 0;
   1e7de:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        rtctimer->INTENSET = RTC_INTENSET_OVRFLW_Msk;
   1e7e2:	2102      	movs	r1, #2
   1e7e4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
        rtctimer->TASKS_START = 1;
   1e7e8:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1e7ea:	7862      	ldrb	r2, [r4, #1]
   1e7ec:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1e7ee:	2b00      	cmp	r3, #0
   1e7f0:	db08      	blt.n	1e804 <hal_timer_config+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e7f2:	f002 021f 	and.w	r2, r2, #31
   1e7f6:	095b      	lsrs	r3, r3, #5
   1e7f8:	2101      	movs	r1, #1
   1e7fa:	fa01 f202 	lsl.w	r2, r1, r2
   1e7fe:	4933      	ldr	r1, [pc, #204]	; (1e8cc <hal_timer_config+0x16c>)
   1e800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        __HAL_ENABLE_INTERRUPTS(ctx);
   1e804:	2800      	cmp	r0, #0
   1e806:	d14f      	bne.n	1e8a8 <hal_timer_config+0x148>
  __ASM volatile ("cpsie i" : : : "memory");
   1e808:	b662      	cpsie	i
   1e80a:	e050      	b.n	1e8ae <hal_timer_config+0x14e>
                min_delta = div - (1 << (prescaler - 1));
   1e80c:	1e58      	subs	r0, r3, #1
   1e80e:	2501      	movs	r5, #1
   1e810:	fa05 f000 	lsl.w	r0, r5, r0
   1e814:	1a08      	subs	r0, r1, r0
                max_delta = (1 << prescaler) - div;
   1e816:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1e818:	4288      	cmp	r0, r1
   1e81a:	d201      	bcs.n	1e820 <hal_timer_config+0xc0>
                    prescaler -= 1;
   1e81c:	3b01      	subs	r3, #1
   1e81e:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1e820:	4a29      	ldr	r2, [pc, #164]	; (1e8c8 <hal_timer_config+0x168>)
   1e822:	411a      	asrs	r2, r3
   1e824:	60e2      	str	r2, [r4, #12]
    bsptimer->tmr_enabled = 1;
   1e826:	2201      	movs	r2, #1
   1e828:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e82a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e82e:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1e830:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e834:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1e838:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1e83c:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1e840:	d00c      	beq.n	1e85c <hal_timer_config+0xfc>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1e842:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e846:	2100      	movs	r1, #0
   1e848:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1e84c:	2101      	movs	r1, #1
   1e84e:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1e850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1e854:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1e858:	2a00      	cmp	r2, #0
   1e85a:	d0f9      	beq.n	1e850 <hal_timer_config+0xf0>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1e85c:	6922      	ldr	r2, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1e85e:	2101      	movs	r1, #1
   1e860:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1e862:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1e864:	2500      	movs	r5, #0
   1e866:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1e86a:	2503      	movs	r5, #3
   1e86c:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1e870:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1e874:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1e876:	7862      	ldrb	r2, [r4, #1]
   1e878:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1e87a:	2b00      	cmp	r3, #0
   1e87c:	db07      	blt.n	1e88e <hal_timer_config+0x12e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e87e:	f002 021f 	and.w	r2, r2, #31
   1e882:	095b      	lsrs	r3, r3, #5
   1e884:	fa01 f202 	lsl.w	r2, r1, r2
   1e888:	4910      	ldr	r1, [pc, #64]	; (1e8cc <hal_timer_config+0x16c>)
   1e88a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1e88e:	b9b0      	cbnz	r0, 1e8be <hal_timer_config+0x15e>
  __ASM volatile ("cpsie i" : : : "memory");
   1e890:	b662      	cpsie	i
   1e892:	e00c      	b.n	1e8ae <hal_timer_config+0x14e>

    return 0;

err:
    return rc;
   1e894:	2016      	movs	r0, #22
}
   1e896:	4770      	bx	lr
    return rc;
   1e898:	2016      	movs	r0, #22
   1e89a:	e008      	b.n	1e8ae <hal_timer_config+0x14e>
   1e89c:	2016      	movs	r0, #22
   1e89e:	e006      	b.n	1e8ae <hal_timer_config+0x14e>
   1e8a0:	2016      	movs	r0, #22
   1e8a2:	e004      	b.n	1e8ae <hal_timer_config+0x14e>
   1e8a4:	2016      	movs	r0, #22
   1e8a6:	e002      	b.n	1e8ae <hal_timer_config+0x14e>
        return 0;
   1e8a8:	2000      	movs	r0, #0
   1e8aa:	e000      	b.n	1e8ae <hal_timer_config+0x14e>
    return rc;
   1e8ac:	2016      	movs	r0, #22
}
   1e8ae:	bc30      	pop	{r4, r5}
   1e8b0:	4770      	bx	lr
    return rc;
   1e8b2:	2016      	movs	r0, #22
   1e8b4:	e7fb      	b.n	1e8ae <hal_timer_config+0x14e>
   1e8b6:	2016      	movs	r0, #22
   1e8b8:	e7f9      	b.n	1e8ae <hal_timer_config+0x14e>
   1e8ba:	2016      	movs	r0, #22
   1e8bc:	e7f7      	b.n	1e8ae <hal_timer_config+0x14e>
    return 0;
   1e8be:	2000      	movs	r0, #0
   1e8c0:	e7f5      	b.n	1e8ae <hal_timer_config+0x14e>
   1e8c2:	bf00      	nop
   1e8c4:	0002c8b4 	.word	0x0002c8b4
   1e8c8:	00f42400 	.word	0x00f42400
   1e8cc:	e000e100 	.word	0xe000e100

0001e8d0 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1e8d0:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e8d2:	2805      	cmp	r0, #5
   1e8d4:	dc0c      	bgt.n	1e8f0 <hal_timer_read+0x20>
   1e8d6:	4b09      	ldr	r3, [pc, #36]	; (1e8fc <hal_timer_read+0x2c>)
   1e8d8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1e8dc:	b140      	cbz	r0, 1e8f0 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1e8de:	7883      	ldrb	r3, [r0, #2]
   1e8e0:	b91b      	cbnz	r3, 1e8ea <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1e8e2:	6900      	ldr	r0, [r0, #16]
   1e8e4:	f7ff fe16 	bl	1e514 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1e8e8:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1e8ea:	f7ff fe7d 	bl	1e5e8 <hal_timer_read_bsptimer>
   1e8ee:	e7fb      	b.n	1e8e8 <hal_timer_read+0x18>
    assert(0);
   1e8f0:	2300      	movs	r3, #0
   1e8f2:	461a      	mov	r2, r3
   1e8f4:	4619      	mov	r1, r3
   1e8f6:	4618      	mov	r0, r3
   1e8f8:	f7f1 fe70 	bl	105dc <__assert_func>
   1e8fc:	0002c8b4 	.word	0x0002c8b4

0001e900 <hal_timer_set_cb>:
                 void *arg)
{
    int rc;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e900:	2805      	cmp	r0, #5
   1e902:	dc0c      	bgt.n	1e91e <hal_timer_set_cb+0x1e>
{
   1e904:	b410      	push	{r4}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e906:	4c08      	ldr	r4, [pc, #32]	; (1e928 <hal_timer_set_cb+0x28>)
   1e908:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   1e90c:	b14c      	cbz	r4, 1e922 <hal_timer_set_cb+0x22>

    timer->cb_func = cb_func;
   1e90e:	604a      	str	r2, [r1, #4]
    timer->cb_arg = arg;
   1e910:	608b      	str	r3, [r1, #8]
    timer->link.tqe_prev = NULL;
   1e912:	2000      	movs	r0, #0
   1e914:	6148      	str	r0, [r1, #20]
    timer->bsp_timer = bsptimer;
   1e916:	600c      	str	r4, [r1, #0]

    rc = 0;

err:
    return rc;
}
   1e918:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e91c:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e91e:	2016      	movs	r0, #22
}
   1e920:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1e922:	2016      	movs	r0, #22
    return rc;
   1e924:	e7f8      	b.n	1e918 <hal_timer_set_cb+0x18>
   1e926:	bf00      	nop
   1e928:	0002c8b4 	.word	0x0002c8b4

0001e92c <hal_timer_start_at>:
{
    uint32_t ctx;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1e92c:	2800      	cmp	r0, #0
   1e92e:	d03d      	beq.n	1e9ac <hal_timer_start_at+0x80>
{
   1e930:	b538      	push	{r3, r4, r5, lr}
   1e932:	4604      	mov	r4, r0
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1e934:	6943      	ldr	r3, [r0, #20]
   1e936:	b10b      	cbz	r3, 1e93c <hal_timer_start_at+0x10>
        (timer->cb_func == NULL)) {
        return EINVAL;
   1e938:	2016      	movs	r0, #22
    }

    __HAL_ENABLE_INTERRUPTS(ctx);

    return 0;
}
   1e93a:	bd38      	pop	{r3, r4, r5, pc}
        (timer->cb_func == NULL)) {
   1e93c:	6843      	ldr	r3, [r0, #4]
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1e93e:	2b00      	cmp	r3, #0
   1e940:	d036      	beq.n	1e9b0 <hal_timer_start_at+0x84>
    bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1e942:	6800      	ldr	r0, [r0, #0]
    timer->expiry = tick;
   1e944:	60e1      	str	r1, [r4, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e946:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e94a:	b672      	cpsid	i
    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   1e94c:	6943      	ldr	r3, [r0, #20]
   1e94e:	b13b      	cbz	r3, 1e960 <hal_timer_start_at+0x34>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   1e950:	b1bb      	cbz	r3, 1e982 <hal_timer_start_at+0x56>
            if ((int32_t)(timer->expiry - entry->expiry) < 0) {
   1e952:	68e2      	ldr	r2, [r4, #12]
   1e954:	68d9      	ldr	r1, [r3, #12]
   1e956:	1a52      	subs	r2, r2, r1
   1e958:	2a00      	cmp	r2, #0
   1e95a:	db0a      	blt.n	1e972 <hal_timer_start_at+0x46>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   1e95c:	691b      	ldr	r3, [r3, #16]
   1e95e:	e7f7      	b.n	1e950 <hal_timer_start_at+0x24>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   1e960:	4622      	mov	r2, r4
   1e962:	f842 3f10 	str.w	r3, [r2, #16]!
   1e966:	6182      	str	r2, [r0, #24]
   1e968:	4603      	mov	r3, r0
   1e96a:	f843 4f14 	str.w	r4, [r3, #20]!
   1e96e:	6163      	str	r3, [r4, #20]
   1e970:	e008      	b.n	1e984 <hal_timer_start_at+0x58>
                TAILQ_INSERT_BEFORE(entry, timer, link);
   1e972:	695a      	ldr	r2, [r3, #20]
   1e974:	6162      	str	r2, [r4, #20]
   1e976:	6123      	str	r3, [r4, #16]
   1e978:	695a      	ldr	r2, [r3, #20]
   1e97a:	6014      	str	r4, [r2, #0]
   1e97c:	f104 0210 	add.w	r2, r4, #16
   1e980:	615a      	str	r2, [r3, #20]
        if (!entry) {
   1e982:	b133      	cbz	r3, 1e992 <hal_timer_start_at+0x66>
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1e984:	6943      	ldr	r3, [r0, #20]
   1e986:	42a3      	cmp	r3, r4
   1e988:	d00c      	beq.n	1e9a4 <hal_timer_start_at+0x78>
    __HAL_ENABLE_INTERRUPTS(ctx);
   1e98a:	b99d      	cbnz	r5, 1e9b4 <hal_timer_start_at+0x88>
  __ASM volatile ("cpsie i" : : : "memory");
   1e98c:	b662      	cpsie	i
    return 0;
   1e98e:	2000      	movs	r0, #0
   1e990:	e7d3      	b.n	1e93a <hal_timer_start_at+0xe>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
   1e992:	6123      	str	r3, [r4, #16]
   1e994:	6983      	ldr	r3, [r0, #24]
   1e996:	6163      	str	r3, [r4, #20]
   1e998:	6983      	ldr	r3, [r0, #24]
   1e99a:	601c      	str	r4, [r3, #0]
   1e99c:	f104 0310 	add.w	r3, r4, #16
   1e9a0:	6183      	str	r3, [r0, #24]
   1e9a2:	e7ef      	b.n	1e984 <hal_timer_start_at+0x58>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1e9a4:	68e1      	ldr	r1, [r4, #12]
   1e9a6:	f7ff fdbb 	bl	1e520 <nrf_timer_set_ocmp>
   1e9aa:	e7ee      	b.n	1e98a <hal_timer_start_at+0x5e>
        return EINVAL;
   1e9ac:	2016      	movs	r0, #22
}
   1e9ae:	4770      	bx	lr
        return EINVAL;
   1e9b0:	2016      	movs	r0, #22
   1e9b2:	e7c2      	b.n	1e93a <hal_timer_start_at+0xe>
    return 0;
   1e9b4:	2000      	movs	r0, #0
   1e9b6:	e7c0      	b.n	1e93a <hal_timer_start_at+0xe>

0001e9b8 <hal_timer_stop>:
    uint32_t ctx;
    int reset_ocmp;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if (timer == NULL) {
   1e9b8:	b360      	cbz	r0, 1ea14 <hal_timer_stop+0x5c>
{
   1e9ba:	b570      	push	{r4, r5, r6, lr}
   1e9bc:	4603      	mov	r3, r0
        return EINVAL;
    }

   bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1e9be:	6801      	ldr	r1, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1e9c0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1e9c4:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (timer->link.tqe_prev != NULL) {
   1e9c6:	6942      	ldr	r2, [r0, #20]
   1e9c8:	b18a      	cbz	r2, 1e9ee <hal_timer_stop+0x36>
        reset_ocmp = 0;
        if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1e9ca:	6948      	ldr	r0, [r1, #20]
   1e9cc:	4298      	cmp	r0, r3
   1e9ce:	d012      	beq.n	1e9f6 <hal_timer_stop+0x3e>
        reset_ocmp = 0;
   1e9d0:	2500      	movs	r5, #0
            /* If first on queue, we will need to reset OCMP */
            entry = TAILQ_NEXT(timer, link);
            reset_ocmp = 1;
        }
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1e9d2:	6918      	ldr	r0, [r3, #16]
   1e9d4:	b190      	cbz	r0, 1e9fc <hal_timer_stop+0x44>
   1e9d6:	6142      	str	r2, [r0, #20]
   1e9d8:	695a      	ldr	r2, [r3, #20]
   1e9da:	6918      	ldr	r0, [r3, #16]
   1e9dc:	6010      	str	r0, [r2, #0]
        timer->link.tqe_prev = NULL;
   1e9de:	2200      	movs	r2, #0
   1e9e0:	615a      	str	r2, [r3, #20]
        if (reset_ocmp) {
   1e9e2:	b125      	cbz	r5, 1e9ee <hal_timer_stop+0x36>
            if (entry) {
   1e9e4:	b166      	cbz	r6, 1ea00 <hal_timer_stop+0x48>
                nrf_timer_set_ocmp((struct nrf52_hal_timer *)entry->bsp_timer,
   1e9e6:	68f1      	ldr	r1, [r6, #12]
   1e9e8:	6830      	ldr	r0, [r6, #0]
   1e9ea:	f7ff fd99 	bl	1e520 <nrf_timer_set_ocmp>
                }
            }
        }
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   1e9ee:	b99c      	cbnz	r4, 1ea18 <hal_timer_stop+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1e9f0:	b662      	cpsie	i

    return 0;
   1e9f2:	2000      	movs	r0, #0
}
   1e9f4:	bd70      	pop	{r4, r5, r6, pc}
            entry = TAILQ_NEXT(timer, link);
   1e9f6:	691e      	ldr	r6, [r3, #16]
            reset_ocmp = 1;
   1e9f8:	2501      	movs	r5, #1
   1e9fa:	e7ea      	b.n	1e9d2 <hal_timer_stop+0x1a>
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1e9fc:	618a      	str	r2, [r1, #24]
   1e9fe:	e7eb      	b.n	1e9d8 <hal_timer_stop+0x20>
                if (bsptimer->tmr_rtc) {
   1ea00:	788b      	ldrb	r3, [r1, #2]
   1ea02:	b11b      	cbz	r3, 1ea0c <hal_timer_stop+0x54>
                    nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1ea04:	6908      	ldr	r0, [r1, #16]
   1ea06:	f7ff fdea 	bl	1e5de <nrf_rtc_disable_ocmp>
   1ea0a:	e7f0      	b.n	1e9ee <hal_timer_stop+0x36>
                    nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1ea0c:	6908      	ldr	r0, [r1, #16]
   1ea0e:	f7ff fde1 	bl	1e5d4 <nrf_timer_disable_ocmp>
   1ea12:	e7ec      	b.n	1e9ee <hal_timer_stop+0x36>
        return EINVAL;
   1ea14:	2016      	movs	r0, #22
}
   1ea16:	4770      	bx	lr
    return 0;
   1ea18:	2000      	movs	r0, #0
   1ea1a:	e7eb      	b.n	1e9f4 <hal_timer_stop+0x3c>

0001ea1c <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   1ea1c:	b508      	push	{r3, lr}
    assert(0);
   1ea1e:	2300      	movs	r3, #0
   1ea20:	461a      	mov	r2, r3
   1ea22:	4619      	mov	r1, r3
   1ea24:	4618      	mov	r0, r3
   1ea26:	f7f1 fdd9 	bl	105dc <__assert_func>
	...

0001ea2c <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   1ea2c:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1ea2e:	4b06      	ldr	r3, [pc, #24]	; (1ea48 <nrf52_wdt_irq_handler+0x1c>)
   1ea30:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   1ea34:	f013 0f01 	tst.w	r3, #1
   1ea38:	d100      	bne.n	1ea3c <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1ea3a:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   1ea3c:	4b02      	ldr	r3, [pc, #8]	; (1ea48 <nrf52_wdt_irq_handler+0x1c>)
   1ea3e:	2200      	movs	r2, #0
   1ea40:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   1ea44:	f7ff ffea 	bl	1ea1c <nrf52_hal_wdt_default_handler>
   1ea48:	40010000 	.word	0x40010000

0001ea4c <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   1ea4c:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1ea4e:	4b17      	ldr	r3, [pc, #92]	; (1eaac <hal_watchdog_init+0x60>)
   1ea50:	2201      	movs	r2, #1
   1ea52:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1ea56:	4b16      	ldr	r3, [pc, #88]	; (1eab0 <hal_watchdog_init+0x64>)
   1ea58:	4298      	cmp	r0, r3
   1ea5a:	d821      	bhi.n	1eaa0 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   1ea5c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1ea60:	0153      	lsls	r3, r2, #5
   1ea62:	4a14      	ldr	r2, [pc, #80]	; (1eab4 <hal_watchdog_init+0x68>)
   1ea64:	fba2 2303 	umull	r2, r3, r2, r3
   1ea68:	08db      	lsrs	r3, r3, #3
   1ea6a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1ea6e:	4b0f      	ldr	r3, [pc, #60]	; (1eaac <hal_watchdog_init+0x60>)
   1ea70:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ea74:	4a10      	ldr	r2, [pc, #64]	; (1eab8 <hal_watchdog_init+0x6c>)
   1ea76:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ea78:	4910      	ldr	r1, [pc, #64]	; (1eabc <hal_watchdog_init+0x70>)
   1ea7a:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ea7e:	4a10      	ldr	r2, [pc, #64]	; (1eac0 <hal_watchdog_init+0x74>)
   1ea80:	21e0      	movs	r1, #224	; 0xe0
   1ea82:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ea86:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1ea8a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ea8e:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1ea90:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   1ea94:	f042 0201 	orr.w	r2, r2, #1
   1ea98:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   1ea9c:	2000      	movs	r0, #0
   1ea9e:	bd08      	pop	{r3, pc}
        assert(0);
   1eaa0:	2300      	movs	r3, #0
   1eaa2:	461a      	mov	r2, r3
   1eaa4:	4619      	mov	r1, r3
   1eaa6:	4618      	mov	r0, r3
   1eaa8:	f7f1 fd98 	bl	105dc <__assert_func>
   1eaac:	40010000 	.word	0x40010000
   1eab0:	02aaaaaa 	.word	0x02aaaaaa
   1eab4:	10624dd3 	.word	0x10624dd3
   1eab8:	e000ed00 	.word	0xe000ed00
   1eabc:	0001ea2d 	.word	0x0001ea2d
   1eac0:	e000e100 	.word	0xe000e100

0001eac4 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   1eac4:	4b02      	ldr	r3, [pc, #8]	; (1ead0 <hal_watchdog_enable+0xc>)
   1eac6:	2201      	movs	r2, #1
   1eac8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   1eacc:	601a      	str	r2, [r3, #0]
}
   1eace:	4770      	bx	lr
   1ead0:	40010000 	.word	0x40010000

0001ead4 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   1ead4:	4b02      	ldr	r3, [pc, #8]	; (1eae0 <hal_watchdog_tickle+0xc>)
   1ead6:	4a03      	ldr	r2, [pc, #12]	; (1eae4 <hal_watchdog_tickle+0x10>)
   1ead8:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   1eadc:	4770      	bx	lr
   1eade:	bf00      	nop
   1eae0:	40010000 	.word	0x40010000
   1eae4:	6e524635 	.word	0x6e524635

0001eae8 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1eae8:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TIMER_4)
    rc = hal_timer_init(4, NULL);
    assert(rc == 0);
#endif
#if MYNEWT_VAL(TIMER_5)
    rc = hal_timer_init(5, NULL);
   1eaea:	2100      	movs	r1, #0
   1eaec:	2005      	movs	r0, #5
   1eaee:	f7ff fe03 	bl	1e6f8 <hal_timer_init>
    assert(rc == 0);
   1eaf2:	b928      	cbnz	r0, 1eb00 <nrf52_periph_create_timers+0x18>
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1eaf4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1eaf8:	f7f1 ff9a 	bl	10a30 <os_cputime_init>
    assert(rc == 0);
   1eafc:	b930      	cbnz	r0, 1eb0c <nrf52_periph_create_timers+0x24>
#endif
}
   1eafe:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1eb00:	2300      	movs	r3, #0
   1eb02:	461a      	mov	r2, r3
   1eb04:	4619      	mov	r1, r3
   1eb06:	4618      	mov	r0, r3
   1eb08:	f7f1 fd68 	bl	105dc <__assert_func>
    assert(rc == 0);
   1eb0c:	2300      	movs	r3, #0
   1eb0e:	461a      	mov	r2, r3
   1eb10:	4619      	mov	r1, r3
   1eb12:	4618      	mov	r0, r3
   1eb14:	f7f1 fd62 	bl	105dc <__assert_func>

0001eb18 <nrf52_periph_create>:
#endif
}

void
nrf52_periph_create(void)
{
   1eb18:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1eb1a:	f7ff ffe5 	bl	1eae8 <nrf52_periph_create_timers>
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
}
   1eb1e:	bd08      	pop	{r3, pc}

0001eb20 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1eb20:	4770      	bx	lr

0001eb22 <put_le16>:
put_le16(void *buf, uint16_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   1eb22:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   1eb24:	0a09      	lsrs	r1, r1, #8
   1eb26:	7041      	strb	r1, [r0, #1]
}
   1eb28:	4770      	bx	lr

0001eb2a <put_le32>:
put_le32(void *buf, uint32_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   1eb2a:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   1eb2c:	f3c1 2307 	ubfx	r3, r1, #8, #8
   1eb30:	7043      	strb	r3, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   1eb32:	f3c1 4307 	ubfx	r3, r1, #16, #8
   1eb36:	7083      	strb	r3, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   1eb38:	0e09      	lsrs	r1, r1, #24
   1eb3a:	70c1      	strb	r1, [r0, #3]
}
   1eb3c:	4770      	bx	lr

0001eb3e <put_le64>:
put_le64(void *buf, uint64_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   1eb3e:	7002      	strb	r2, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   1eb40:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1eb44:	7041      	strb	r1, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   1eb46:	f3c2 4107 	ubfx	r1, r2, #16, #8
   1eb4a:	7081      	strb	r1, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   1eb4c:	0e12      	lsrs	r2, r2, #24
   1eb4e:	70c2      	strb	r2, [r0, #3]
    u8ptr[4] = (uint8_t)(x >> 32);
   1eb50:	7103      	strb	r3, [r0, #4]
    u8ptr[5] = (uint8_t)(x >> 40);
   1eb52:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1eb56:	7142      	strb	r2, [r0, #5]
    u8ptr[6] = (uint8_t)(x >> 48);
   1eb58:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1eb5c:	7182      	strb	r2, [r0, #6]
    u8ptr[7] = (uint8_t)(x >> 56);
   1eb5e:	0e1b      	lsrs	r3, r3, #24
   1eb60:	71c3      	strb	r3, [r0, #7]
}
   1eb62:	4770      	bx	lr

0001eb64 <get_le16>:
{
    const uint8_t *u8ptr;
    uint16_t x;

    u8ptr = buf;
    x = u8ptr[0];
   1eb64:	7803      	ldrb	r3, [r0, #0]
    x |= (uint16_t)u8ptr[1] << 8;
   1eb66:	7840      	ldrb	r0, [r0, #1]

    return x;
}
   1eb68:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1eb6c:	4770      	bx	lr

0001eb6e <get_le32>:
{
    const uint8_t *u8ptr;
    uint32_t x;

    u8ptr = buf;
    x = u8ptr[0];
   1eb6e:	7803      	ldrb	r3, [r0, #0]
    x |= (uint32_t)u8ptr[1] << 8;
   1eb70:	7842      	ldrb	r2, [r0, #1]
   1eb72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    x |= (uint32_t)u8ptr[2] << 16;
   1eb76:	7882      	ldrb	r2, [r0, #2]
   1eb78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    x |= (uint32_t)u8ptr[3] << 24;
   1eb7c:	78c0      	ldrb	r0, [r0, #3]

    return x;
}
   1eb7e:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   1eb82:	4770      	bx	lr

0001eb84 <get_le64>:

uint64_t
get_le64(const void *buf)
{
   1eb84:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
    const uint8_t *u8ptr;
    uint64_t x;

    u8ptr = buf;
    x = u8ptr[0];
   1eb88:	7804      	ldrb	r4, [r0, #0]
   1eb8a:	2500      	movs	r5, #0
    x |= (uint64_t)u8ptr[1] << 8;
   1eb8c:	7846      	ldrb	r6, [r0, #1]
   1eb8e:	2300      	movs	r3, #0
   1eb90:	0232      	lsls	r2, r6, #8
   1eb92:	ea44 0802 	orr.w	r8, r4, r2
   1eb96:	ea45 0903 	orr.w	r9, r5, r3
    x |= (uint64_t)u8ptr[2] << 16;
   1eb9a:	7886      	ldrb	r6, [r0, #2]
   1eb9c:	2300      	movs	r3, #0
   1eb9e:	0432      	lsls	r2, r6, #16
   1eba0:	ea48 0402 	orr.w	r4, r8, r2
   1eba4:	ea49 0503 	orr.w	r5, r9, r3
    x |= (uint64_t)u8ptr[3] << 24;
   1eba8:	78c6      	ldrb	r6, [r0, #3]
   1ebaa:	ea4f 2916 	mov.w	r9, r6, lsr #8
   1ebae:	ea4f 6806 	mov.w	r8, r6, lsl #24
   1ebb2:	ea48 0204 	orr.w	r2, r8, r4
   1ebb6:	ea49 0305 	orr.w	r3, r9, r5
    x |= (uint64_t)u8ptr[4] << 32;
   1ebba:	2400      	movs	r4, #0
   1ebbc:	7905      	ldrb	r5, [r0, #4]
   1ebbe:	ea42 0b04 	orr.w	fp, r2, r4
   1ebc2:	ea43 0c05 	orr.w	ip, r3, r5
    x |= (uint64_t)u8ptr[5] << 40;
   1ebc6:	f890 8005 	ldrb.w	r8, [r0, #5]
   1ebca:	ea4f 2708 	mov.w	r7, r8, lsl #8
   1ebce:	ea4b 0204 	orr.w	r2, fp, r4
   1ebd2:	ea4c 0307 	orr.w	r3, ip, r7
    x |= (uint64_t)u8ptr[6] << 48;
   1ebd6:	f890 8006 	ldrb.w	r8, [r0, #6]
   1ebda:	ea4f 4c08 	mov.w	ip, r8, lsl #16
   1ebde:	ea44 0602 	orr.w	r6, r4, r2
   1ebe2:	ea4c 0703 	orr.w	r7, ip, r3
    x |= (uint64_t)u8ptr[7] << 56;
   1ebe6:	79c2      	ldrb	r2, [r0, #7]
   1ebe8:	ea4f 6902 	mov.w	r9, r2, lsl #24

    return x;
}
   1ebec:	ea44 0006 	orr.w	r0, r4, r6
   1ebf0:	ea49 0107 	orr.w	r1, r9, r7
   1ebf4:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
   1ebf8:	4770      	bx	lr

0001ebfa <put_be16>:
put_be16(void *buf, uint16_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)(x >> 8);
   1ebfa:	0a0b      	lsrs	r3, r1, #8
   1ebfc:	7003      	strb	r3, [r0, #0]
    u8ptr[1] = (uint8_t)x;
   1ebfe:	7041      	strb	r1, [r0, #1]
}
   1ec00:	4770      	bx	lr

0001ec02 <swap_in_place>:
    int i;
    int j;

    u8ptr = buf;

    for (i = 0, j = len - 1; i < j; i++, j--) {
   1ec02:	3901      	subs	r1, #1
   1ec04:	2300      	movs	r3, #0
   1ec06:	428b      	cmp	r3, r1
   1ec08:	da0b      	bge.n	1ec22 <swap_in_place+0x20>
{
   1ec0a:	b410      	push	{r4}
        tmp = u8ptr[i];
   1ec0c:	5cc2      	ldrb	r2, [r0, r3]

        u8ptr[i] = u8ptr[j];
   1ec0e:	5c44      	ldrb	r4, [r0, r1]
   1ec10:	54c4      	strb	r4, [r0, r3]
        u8ptr[j] = tmp;
   1ec12:	5442      	strb	r2, [r0, r1]
    for (i = 0, j = len - 1; i < j; i++, j--) {
   1ec14:	3301      	adds	r3, #1
   1ec16:	3901      	subs	r1, #1
   1ec18:	428b      	cmp	r3, r1
   1ec1a:	dbf7      	blt.n	1ec0c <swap_in_place+0xa>
    }
}
   1ec1c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ec20:	4770      	bx	lr
   1ec22:	4770      	bx	lr

0001ec24 <swap_buf>:
void
swap_buf(uint8_t *dst, const uint8_t *src, int len)
{
    int i;

    for (i = 0; i < len; i++) {
   1ec24:	2300      	movs	r3, #0
   1ec26:	4293      	cmp	r3, r2
   1ec28:	da09      	bge.n	1ec3e <swap_buf+0x1a>
{
   1ec2a:	b430      	push	{r4, r5}
        dst[len - 1 - i] = src[i];
   1ec2c:	1e54      	subs	r4, r2, #1
   1ec2e:	1ae4      	subs	r4, r4, r3
   1ec30:	5ccd      	ldrb	r5, [r1, r3]
   1ec32:	5505      	strb	r5, [r0, r4]
    for (i = 0; i < len; i++) {
   1ec34:	3301      	adds	r3, #1
   1ec36:	4293      	cmp	r3, r2
   1ec38:	dbf8      	blt.n	1ec2c <swap_buf+0x8>
    }
}
   1ec3a:	bc30      	pop	{r4, r5}
   1ec3c:	4770      	bx	lr
   1ec3e:	4770      	bx	lr

0001ec40 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1ec40:	b530      	push	{r4, r5, lr}
   1ec42:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1ec44:	2200      	movs	r2, #0
   1ec46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ec4a:	4810      	ldr	r0, [pc, #64]	; (1ec8c <config_device+0x4c>)
   1ec4c:	f7f1 ffd4 	bl	10bf8 <os_dev_open>
    assert(dev != NULL);
   1ec50:	b178      	cbz	r0, 1ec72 <config_device+0x32>
   1ec52:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1ec54:	4668      	mov	r0, sp
   1ec56:	f000 f86c 	bl	1ed32 <temp_stub_default_cfg>
    assert(rc == 0);
   1ec5a:	b980      	cbnz	r0, 1ec7e <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1ec5c:	4669      	mov	r1, sp
   1ec5e:	4620      	mov	r0, r4
   1ec60:	f000 f900 	bl	1ee64 <temp_stub_config>
   1ec64:	4605      	mov	r5, r0
    os_dev_close(dev);
   1ec66:	4620      	mov	r0, r4
   1ec68:	f7f1 ffe8 	bl	10c3c <os_dev_close>
    return rc;
}
   1ec6c:	4628      	mov	r0, r5
   1ec6e:	b003      	add	sp, #12
   1ec70:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1ec72:	2300      	movs	r3, #0
   1ec74:	461a      	mov	r2, r3
   1ec76:	4619      	mov	r1, r3
   1ec78:	4618      	mov	r0, r3
   1ec7a:	f7f1 fcaf 	bl	105dc <__assert_func>
    assert(rc == 0);
   1ec7e:	2300      	movs	r3, #0
   1ec80:	461a      	mov	r2, r3
   1ec82:	4619      	mov	r1, r3
   1ec84:	4618      	mov	r0, r3
   1ec86:	f7f1 fca9 	bl	105dc <__assert_func>
   1ec8a:	bf00      	nop
   1ec8c:	0002c8cc 	.word	0x0002c8cc

0001ec90 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1ec90:	b510      	push	{r4, lr}
   1ec92:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1ec94:	4c10      	ldr	r4, [pc, #64]	; (1ecd8 <temp_stub_create+0x48>)
   1ec96:	4621      	mov	r1, r4
   1ec98:	4810      	ldr	r0, [pc, #64]	; (1ecdc <temp_stub_create+0x4c>)
   1ec9a:	f7ef fd85 	bl	e7a8 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1ec9e:	4b10      	ldr	r3, [pc, #64]	; (1ece0 <temp_stub_create+0x50>)
   1eca0:	9301      	str	r3, [sp, #4]
   1eca2:	4b10      	ldr	r3, [pc, #64]	; (1ece4 <temp_stub_create+0x54>)
   1eca4:	9300      	str	r3, [sp, #0]
   1eca6:	2300      	movs	r3, #0
   1eca8:	2201      	movs	r2, #1
   1ecaa:	4621      	mov	r1, r4
   1ecac:	480e      	ldr	r0, [pc, #56]	; (1ece8 <temp_stub_create+0x58>)
   1ecae:	f7f1 ff5d 	bl	10b6c <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1ecb2:	b920      	cbnz	r0, 1ecbe <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1ecb4:	f7ff ffc4 	bl	1ec40 <config_device>
    assert(rc == 0);
   1ecb8:	b938      	cbnz	r0, 1ecca <temp_stub_create+0x3a>
}
   1ecba:	b002      	add	sp, #8
   1ecbc:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1ecbe:	2300      	movs	r3, #0
   1ecc0:	461a      	mov	r2, r3
   1ecc2:	4619      	mov	r1, r3
   1ecc4:	4618      	mov	r0, r3
   1ecc6:	f7f1 fc89 	bl	105dc <__assert_func>
    assert(rc == 0);
   1ecca:	2300      	movs	r3, #0
   1eccc:	461a      	mov	r2, r3
   1ecce:	4619      	mov	r1, r3
   1ecd0:	4618      	mov	r0, r3
   1ecd2:	f7f1 fc83 	bl	105dc <__assert_func>
   1ecd6:	bf00      	nop
   1ecd8:	0002c8cc 	.word	0x0002c8cc
   1ecdc:	0002c8d8 	.word	0x0002c8d8
   1ece0:	200033e4 	.word	0x200033e4
   1ece4:	0001ed41 	.word	0x0001ed41
   1ece8:	200033f8 	.word	0x200033f8

0001ecec <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1ecec:	2000      	movs	r0, #0
   1ecee:	4770      	bx	lr

0001ecf0 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1ecf0:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1ecf4:	2100      	movs	r1, #0
   1ecf6:	ea50 0301 	orrs.w	r3, r0, r1
   1ecfa:	d004      	beq.n	1ed06 <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1ecfc:	9b00      	ldr	r3, [sp, #0]
   1ecfe:	2201      	movs	r2, #1
   1ed00:	701a      	strb	r2, [r3, #0]
    return (0);
   1ed02:	2000      	movs	r0, #0
   1ed04:	4770      	bx	lr
err:
    return (rc);
   1ed06:	f06f 0001 	mvn.w	r0, #1
}
   1ed0a:	4770      	bx	lr

0001ed0c <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1ed0c:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1ed0e:	b120      	cbz	r0, 1ed1a <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1ed10:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1ed14:	d007      	beq.n	1ed26 <temp_stub_open+0x1a>
}
   1ed16:	2000      	movs	r0, #0
   1ed18:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1ed1a:	2300      	movs	r3, #0
   1ed1c:	461a      	mov	r2, r3
   1ed1e:	4619      	mov	r1, r3
   1ed20:	4618      	mov	r0, r3
   1ed22:	f7f1 fc5b 	bl	105dc <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1ed26:	2300      	movs	r3, #0
   1ed28:	461a      	mov	r2, r3
   1ed2a:	4619      	mov	r1, r3
   1ed2c:	4618      	mov	r0, r3
   1ed2e:	f7f1 fc55 	bl	105dc <__assert_func>

0001ed32 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1ed32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ed36:	2300      	movs	r3, #0
   1ed38:	e9c0 2300 	strd	r2, r3, [r0]
}
   1ed3c:	2000      	movs	r0, #0
   1ed3e:	4770      	bx	lr

0001ed40 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1ed40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1ed42:	b379      	cbz	r1, 1eda4 <temp_stub_init+0x64>
   1ed44:	460d      	mov	r5, r1
   1ed46:	b380      	cbz	r0, 1edaa <temp_stub_init+0x6a>
   1ed48:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1ed4a:	30b0      	adds	r0, #176	; 0xb0
   1ed4c:	f7ff fff1 	bl	1ed32 <temp_stub_default_cfg>
    if (rc) { goto err; }
   1ed50:	4603      	mov	r3, r0
   1ed52:	b108      	cbz	r0, 1ed58 <temp_stub_init+0x18>
}
   1ed54:	4618      	mov	r0, r3
   1ed56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1ed58:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1ed5c:	4621      	mov	r1, r4
   1ed5e:	4630      	mov	r0, r6
   1ed60:	f7f1 fa95 	bl	1028e <sensor_init>
    if (rc != 0) { goto err; }
   1ed64:	4603      	mov	r3, r0
   1ed66:	2800      	cmp	r0, #0
   1ed68:	d1f4      	bne.n	1ed54 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1ed6a:	4b11      	ldr	r3, [pc, #68]	; (1edb0 <temp_stub_init+0x70>)
   1ed6c:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1ed6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1ed72:	2300      	movs	r3, #0
   1ed74:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1ed78:	682a      	ldr	r2, [r5, #0]
   1ed7a:	686f      	ldr	r7, [r5, #4]
   1ed7c:	68a8      	ldr	r0, [r5, #8]
   1ed7e:	68e9      	ldr	r1, [r5, #12]
   1ed80:	6722      	str	r2, [r4, #112]	; 0x70
   1ed82:	6767      	str	r7, [r4, #116]	; 0x74
   1ed84:	67a0      	str	r0, [r4, #120]	; 0x78
   1ed86:	67e1      	str	r1, [r4, #124]	; 0x7c
   1ed88:	692a      	ldr	r2, [r5, #16]
   1ed8a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1ed8e:	4630      	mov	r0, r6
   1ed90:	f7f1 fa66 	bl	10260 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1ed94:	4603      	mov	r3, r0
   1ed96:	2800      	cmp	r0, #0
   1ed98:	d1dc      	bne.n	1ed54 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1ed9a:	4a06      	ldr	r2, [pc, #24]	; (1edb4 <temp_stub_init+0x74>)
   1ed9c:	6022      	str	r2, [r4, #0]
   1ed9e:	4a06      	ldr	r2, [pc, #24]	; (1edb8 <temp_stub_init+0x78>)
   1eda0:	60e2      	str	r2, [r4, #12]
    return (0);
   1eda2:	e7d7      	b.n	1ed54 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1eda4:	f06f 0308 	mvn.w	r3, #8
   1eda8:	e7d4      	b.n	1ed54 <temp_stub_init+0x14>
   1edaa:	f06f 0308 	mvn.w	r3, #8
   1edae:	e7d1      	b.n	1ed54 <temp_stub_init+0x14>
   1edb0:	0002c8e8 	.word	0x0002c8e8
   1edb4:	0001ed0d 	.word	0x0001ed0d
   1edb8:	0001eced 	.word	0x0001eced

0001edbc <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1edbc:	b538      	push	{r3, r4, r5, lr}
   1edbe:	460d      	mov	r5, r1
   1edc0:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1edc2:	4808      	ldr	r0, [pc, #32]	; (1ede4 <temp_stub_get_raw_temperature+0x28>)
   1edc4:	f7ef fcf0 	bl	e7a8 <console_printf>
    assert(temp_sum);
   1edc8:	b134      	cbz	r4, 1edd8 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1edca:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1edce:	fb01 f105 	mul.w	r1, r1, r5
   1edd2:	6021      	str	r1, [r4, #0]
}
   1edd4:	2000      	movs	r0, #0
   1edd6:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1edd8:	2300      	movs	r3, #0
   1edda:	461a      	mov	r2, r3
   1eddc:	4619      	mov	r1, r3
   1edde:	4618      	mov	r0, r3
   1ede0:	f7f1 fbfc 	bl	105dc <__assert_func>
   1ede4:	0002c910 	.word	0x0002c910

0001ede8 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1ede8:	b530      	push	{r4, r5, lr}
   1edea:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1edec:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1edf0:	2500      	movs	r5, #0
   1edf2:	ea54 0305 	orrs.w	r3, r4, r5
   1edf6:	d032      	beq.n	1ee5e <temp_stub_sensor_read+0x76>
   1edf8:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1edfa:	6805      	ldr	r5, [r0, #0]
   1edfc:	b165      	cbz	r5, 1ee18 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1edfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ee02:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1ee04:	2200      	movs	r2, #0
   1ee06:	4611      	mov	r1, r2
   1ee08:	4628      	mov	r0, r5
   1ee0a:	f7ff ff7f 	bl	1ed0c <temp_stub_open>
        if (rc) { goto err; }
   1ee0e:	4603      	mov	r3, r0
   1ee10:	b140      	cbz	r0, 1ee24 <temp_stub_sensor_read+0x3c>
}
   1ee12:	4618      	mov	r0, r3
   1ee14:	b007      	add	sp, #28
   1ee16:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1ee18:	2300      	movs	r3, #0
   1ee1a:	461a      	mov	r2, r3
   1ee1c:	4619      	mov	r1, r3
   1ee1e:	4618      	mov	r0, r3
   1ee20:	f7f1 fbdc 	bl	105dc <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1ee24:	2300      	movs	r3, #0
   1ee26:	aa03      	add	r2, sp, #12
   1ee28:	2101      	movs	r1, #1
   1ee2a:	4628      	mov	r0, r5
   1ee2c:	f7ff ffc6 	bl	1edbc <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1ee30:	4603      	mov	r3, r0
   1ee32:	2800      	cmp	r0, #0
   1ee34:	d1ed      	bne.n	1ee12 <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1ee36:	9a03      	ldr	r2, [sp, #12]
   1ee38:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1ee3a:	2201      	movs	r2, #1
   1ee3c:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1ee40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ee42:	2a00      	cmp	r2, #0
   1ee44:	d0e5      	beq.n	1ee12 <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1ee46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1ee4a:	2300      	movs	r3, #0
   1ee4c:	e9cd 2300 	strd	r2, r3, [sp]
   1ee50:	aa04      	add	r2, sp, #16
   1ee52:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ee54:	4620      	mov	r0, r4
   1ee56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ee58:	4798      	blx	r3
   1ee5a:	4603      	mov	r3, r0
   1ee5c:	e7d9      	b.n	1ee12 <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1ee5e:	f06f 0301 	mvn.w	r3, #1
   1ee62:	e7d6      	b.n	1ee12 <temp_stub_sensor_read+0x2a>

0001ee64 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1ee64:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1ee66:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1ee6a:	d009      	beq.n	1ee80 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1ee6c:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1ee70:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1ee74:	e9d1 2300 	ldrd	r2, r3, [r1]
   1ee78:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1ee7c:	2000      	movs	r0, #0
   1ee7e:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1ee80:	2300      	movs	r3, #0
   1ee82:	461a      	mov	r2, r3
   1ee84:	4619      	mov	r1, r3
   1ee86:	4618      	mov	r0, r3
   1ee88:	f7f1 fba8 	bl	105dc <__assert_func>

0001ee8c <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1ee8c:	4770      	bx	lr

0001ee8e <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1ee8e:	4770      	bx	lr

0001ee90 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1ee90:	4770      	bx	lr

0001ee92 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1ee92:	4770      	bx	lr

0001ee94 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1ee94:	4770      	bx	lr

0001ee96 <ble_ll_flush_pkt_queue>:
 *
 * @param pktq
 */
static void
ble_ll_flush_pkt_queue(struct ble_ll_pkt_q *pktq)
{
   1ee96:	b510      	push	{r4, lr}
   1ee98:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *pkthdr;
    struct os_mbuf *om;

    /* FLush all packets from Link layer queues */
    while (STAILQ_FIRST(pktq)) {
   1ee9a:	e001      	b.n	1eea0 <ble_ll_flush_pkt_queue+0xa>
        pkthdr = STAILQ_FIRST(pktq);
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);

        /* Remove from queue and free the mbuf */
        STAILQ_REMOVE_HEAD(pktq, omp_next);
        os_mbuf_free_chain(om);
   1ee9c:	f7f2 f81e 	bl	10edc <os_mbuf_free_chain>
    while (STAILQ_FIRST(pktq)) {
   1eea0:	6823      	ldr	r3, [r4, #0]
   1eea2:	b13b      	cbz	r3, 1eeb4 <ble_ll_flush_pkt_queue+0x1e>
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   1eea4:	f1a3 0010 	sub.w	r0, r3, #16
        STAILQ_REMOVE_HEAD(pktq, omp_next);
   1eea8:	685b      	ldr	r3, [r3, #4]
   1eeaa:	6023      	str	r3, [r4, #0]
   1eeac:	2b00      	cmp	r3, #0
   1eeae:	d1f5      	bne.n	1ee9c <ble_ll_flush_pkt_queue+0x6>
   1eeb0:	6064      	str	r4, [r4, #4]
   1eeb2:	e7f3      	b.n	1ee9c <ble_ll_flush_pkt_queue+0x6>
    }
}
   1eeb4:	bd10      	pop	{r4, pc}
	...

0001eeb8 <ble_ll_task>:
{
   1eeb8:	b508      	push	{r3, lr}
    ble_phy_init();
   1eeba:	f009 f8cb 	bl	28054 <ble_phy_init>
    ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   1eebe:	2000      	movs	r0, #0
   1eec0:	f009 f9d6 	bl	28270 <ble_phy_txpwr_set>
    ble_ll_hci_send_noop();
   1eec4:	f005 ff57 	bl	24d76 <ble_ll_hci_send_noop>
    ble_ll_rand_start();
   1eec8:	f006 f9cc 	bl	25264 <ble_ll_rand_start>
        ev = os_eventq_get(&evq->evq);
   1eecc:	4806      	ldr	r0, [pc, #24]	; (1eee8 <ble_ll_task+0x30>)
   1eece:	f7f1 ff1a 	bl	10d06 <os_eventq_get>
        assert(ev);
   1eed2:	b110      	cbz	r0, 1eeda <ble_ll_task+0x22>
    ev->ev.ev_cb(&ev->ev);
   1eed4:	6842      	ldr	r2, [r0, #4]
   1eed6:	4790      	blx	r2
   1eed8:	e7f8      	b.n	1eecc <ble_ll_task+0x14>
   1eeda:	2300      	movs	r3, #0
   1eedc:	461a      	mov	r2, r3
   1eede:	4619      	mov	r1, r3
   1eee0:	4618      	mov	r0, r3
   1eee2:	f7f1 fb7b 	bl	105dc <__assert_func>
   1eee6:	bf00      	nop
   1eee8:	20003e4c 	.word	0x20003e4c

0001eeec <ble_ll_hw_err_timer_cb>:
{
   1eeec:	b508      	push	{r3, lr}
    if (ble_ll_hci_ev_hw_err(BLE_HW_ERR_HCI_SYNC_LOSS)) {
   1eeee:	2001      	movs	r0, #1
   1eef0:	f006 f910 	bl	25114 <ble_ll_hci_ev_hw_err>
   1eef4:	b900      	cbnz	r0, 1eef8 <ble_ll_hw_err_timer_cb+0xc>
}
   1eef6:	bd08      	pop	{r3, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1eef8:	2106      	movs	r1, #6
   1eefa:	4802      	ldr	r0, [pc, #8]	; (1ef04 <ble_ll_hw_err_timer_cb+0x18>)
   1eefc:	f7f1 fd14 	bl	10928 <os_callout_reset>
   1ef00:	e7f9      	b.n	1eef6 <ble_ll_hw_err_timer_cb+0xa>
   1ef02:	bf00      	nop
   1ef04:	20003ec4 	.word	0x20003ec4

0001ef08 <ble_ll_event_comp_pkts>:
{
   1ef08:	b508      	push	{r3, lr}
    ble_ll_conn_num_comp_pkts_event_send(NULL);
   1ef0a:	2000      	movs	r0, #0
   1ef0c:	f003 fd2e 	bl	2296c <ble_ll_conn_num_comp_pkts_event_send>
}
   1ef10:	bd08      	pop	{r3, pc}

0001ef12 <ble_ll_event_dbuf_overflow>:
{
   1ef12:	b508      	push	{r3, lr}
    ble_ll_hci_ev_databuf_overflow();
   1ef14:	f006 f916 	bl	25144 <ble_ll_hci_ev_databuf_overflow>
}
   1ef18:	bd08      	pop	{r3, pc}
	...

0001ef1c <ble_ll_tx_pkt_in>:
{
   1ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   1ef1e:	e007      	b.n	1ef30 <ble_ll_tx_pkt_in+0x14>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   1ef20:	4613      	mov	r3, r2
   1ef22:	327c      	adds	r2, #124	; 0x7c
   1ef24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   1ef28:	e00c      	b.n	1ef44 <ble_ll_tx_pkt_in+0x28>
            os_mbuf_free_chain(om);
   1ef2a:	4628      	mov	r0, r5
   1ef2c:	f7f1 ffd6 	bl	10edc <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   1ef30:	4b14      	ldr	r3, [pc, #80]	; (1ef84 <ble_ll_tx_pkt_in+0x68>)
   1ef32:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
   1ef34:	b32c      	cbz	r4, 1ef82 <ble_ll_tx_pkt_in+0x66>
        om = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   1ef36:	f1a4 0510 	sub.w	r5, r4, #16
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   1ef3a:	6863      	ldr	r3, [r4, #4]
   1ef3c:	4a11      	ldr	r2, [pc, #68]	; (1ef84 <ble_ll_tx_pkt_in+0x68>)
   1ef3e:	67d3      	str	r3, [r2, #124]	; 0x7c
   1ef40:	2b00      	cmp	r3, #0
   1ef42:	d0ed      	beq.n	1ef20 <ble_ll_tx_pkt_in+0x4>
        handle = get_le16(om->om_data);
   1ef44:	f854 0c10 	ldr.w	r0, [r4, #-16]
   1ef48:	f7ff fe0c 	bl	1eb64 <get_le16>
   1ef4c:	4607      	mov	r7, r0
        length = get_le16(om->om_data + 2);
   1ef4e:	f854 0c10 	ldr.w	r0, [r4, #-16]
   1ef52:	3002      	adds	r0, #2
   1ef54:	f7ff fe06 	bl	1eb64 <get_le16>
   1ef58:	4606      	mov	r6, r0
        os_mbuf_adj(om, sizeof(struct hci_data_hdr));
   1ef5a:	2104      	movs	r1, #4
   1ef5c:	4628      	mov	r0, r5
   1ef5e:	f7f2 f8f2 	bl	11146 <os_mbuf_adj>
        pb = handle & 0x3000;
   1ef62:	f407 5240 	and.w	r2, r7, #12288	; 0x3000
        if ((pkthdr->omp_len != length) || (pb > 0x1000) || (length == 0)) {
   1ef66:	8823      	ldrh	r3, [r4, #0]
   1ef68:	42b3      	cmp	r3, r6
   1ef6a:	d1de      	bne.n	1ef2a <ble_ll_tx_pkt_in+0xe>
   1ef6c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   1ef70:	d8db      	bhi.n	1ef2a <ble_ll_tx_pkt_in+0xe>
   1ef72:	2e00      	cmp	r6, #0
   1ef74:	d0d9      	beq.n	1ef2a <ble_ll_tx_pkt_in+0xe>
        ble_ll_conn_tx_pkt_in(om, handle, length);
   1ef76:	4632      	mov	r2, r6
   1ef78:	4639      	mov	r1, r7
   1ef7a:	4628      	mov	r0, r5
   1ef7c:	f003 fa0b 	bl	22396 <ble_ll_conn_tx_pkt_in>
   1ef80:	e7d6      	b.n	1ef30 <ble_ll_tx_pkt_in+0x14>
}
   1ef82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ef84:	20003e20 	.word	0x20003e20

0001ef88 <ble_ll_event_tx_pkt>:
{
   1ef88:	b508      	push	{r3, lr}
    ble_ll_tx_pkt_in();
   1ef8a:	f7ff ffc7 	bl	1ef1c <ble_ll_tx_pkt_in>
}
   1ef8e:	bd08      	pop	{r3, pc}

0001ef90 <ble_ll_rx_pkt_in>:
{
   1ef90:	b538      	push	{r3, r4, r5, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   1ef92:	e00e      	b.n	1efb2 <ble_ll_rx_pkt_in+0x22>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   1ef94:	4613      	mov	r3, r2
   1ef96:	3264      	adds	r2, #100	; 0x64
   1ef98:	669a      	str	r2, [r3, #104]	; 0x68
   1ef9a:	e017      	b.n	1efcc <ble_ll_rx_pkt_in+0x3c>
            ble_ll_conn_rx_data_pdu(m, ble_hdr);
   1ef9c:	4611      	mov	r1, r2
   1ef9e:	4628      	mov	r0, r5
   1efa0:	f002 fff4 	bl	21f8c <ble_ll_conn_rx_data_pdu>
   1efa4:	e005      	b.n	1efb2 <ble_ll_rx_pkt_in+0x22>
            ble_ll_adv_rx_pkt_in(pdu_type, rxbuf, ble_hdr);
   1efa6:	f001 fb09 	bl	205bc <ble_ll_adv_rx_pkt_in>
        if (m) {
   1efaa:	b115      	cbz	r5, 1efb2 <ble_ll_rx_pkt_in+0x22>
            os_mbuf_free_chain(m);
   1efac:	4628      	mov	r0, r5
   1efae:	f7f1 ff95 	bl	10edc <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   1efb2:	4b17      	ldr	r3, [pc, #92]	; (1f010 <ble_ll_rx_pkt_in+0x80>)
   1efb4:	6e5c      	ldr	r4, [r3, #100]	; 0x64
   1efb6:	b354      	cbz	r4, 1f00e <ble_ll_rx_pkt_in+0x7e>
        m = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   1efb8:	f1a4 0510 	sub.w	r5, r4, #16
        OS_ENTER_CRITICAL(sr);
   1efbc:	f7f1 fa44 	bl	10448 <os_arch_save_sr>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   1efc0:	4a13      	ldr	r2, [pc, #76]	; (1f010 <ble_ll_rx_pkt_in+0x80>)
   1efc2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1efc4:	685b      	ldr	r3, [r3, #4]
   1efc6:	6653      	str	r3, [r2, #100]	; 0x64
   1efc8:	2b00      	cmp	r3, #0
   1efca:	d0e3      	beq.n	1ef94 <ble_ll_rx_pkt_in+0x4>
        OS_EXIT_CRITICAL(sr);
   1efcc:	f7f1 fa42 	bl	10454 <os_arch_restore_sr>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   1efd0:	f104 0208 	add.w	r2, r4, #8
        rxbuf = m->om_data;
   1efd4:	f854 1c10 	ldr.w	r1, [r4, #-16]
        pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1efd8:	7808      	ldrb	r0, [r1, #0]
   1efda:	f000 000f 	and.w	r0, r0, #15
        switch (BLE_MBUF_HDR_RX_STATE(ble_hdr)) {
   1efde:	7a23      	ldrb	r3, [r4, #8]
   1efe0:	f003 0307 	and.w	r3, r3, #7
   1efe4:	3b01      	subs	r3, #1
   1efe6:	2b03      	cmp	r3, #3
   1efe8:	d8df      	bhi.n	1efaa <ble_ll_rx_pkt_in+0x1a>
   1efea:	a401      	add	r4, pc, #4	; (adr r4, 1eff0 <ble_ll_rx_pkt_in+0x60>)
   1efec:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
   1eff0:	0001efa7 	.word	0x0001efa7
   1eff4:	0001f001 	.word	0x0001f001
   1eff8:	0001f009 	.word	0x0001f009
   1effc:	0001ef9d 	.word	0x0001ef9d
            ble_ll_scan_rx_pkt_in(pdu_type, m, ble_hdr);
   1f000:	4629      	mov	r1, r5
   1f002:	f007 fbb1 	bl	26768 <ble_ll_scan_rx_pkt_in>
            break;
   1f006:	e7d0      	b.n	1efaa <ble_ll_rx_pkt_in+0x1a>
            ble_ll_init_rx_pkt_in(pdu_type, rxbuf, ble_hdr);
   1f008:	f002 fd62 	bl	21ad0 <ble_ll_init_rx_pkt_in>
            break;
   1f00c:	e7cd      	b.n	1efaa <ble_ll_rx_pkt_in+0x1a>
}
   1f00e:	bd38      	pop	{r3, r4, r5, pc}
   1f010:	20003e20 	.word	0x20003e20

0001f014 <ble_ll_event_rx_pkt>:
{
   1f014:	b508      	push	{r3, lr}
    ble_ll_rx_pkt_in();
   1f016:	f7ff ffbb 	bl	1ef90 <ble_ll_rx_pkt_in>
}
   1f01a:	bd08      	pop	{r3, pc}

0001f01c <ble_ll_seed_prng>:
    return rc;
}

static void
ble_ll_seed_prng(void)
{
   1f01c:	b508      	push	{r3, lr}

    /* Seed random number generator with least significant bytes of device
     * address.
     */
    seed = 0;
    for (i = 0; i < 4; ++i) {
   1f01e:	2300      	movs	r3, #0
    seed = 0;
   1f020:	4618      	mov	r0, r3
    for (i = 0; i < 4; ++i) {
   1f022:	e004      	b.n	1f02e <ble_ll_seed_prng+0x12>
        seed |= g_dev_addr[i];
   1f024:	4a04      	ldr	r2, [pc, #16]	; (1f038 <ble_ll_seed_prng+0x1c>)
   1f026:	5cd2      	ldrb	r2, [r2, r3]
   1f028:	4310      	orrs	r0, r2
        seed <<= 8;
   1f02a:	0200      	lsls	r0, r0, #8
    for (i = 0; i < 4; ++i) {
   1f02c:	3301      	adds	r3, #1
   1f02e:	2b03      	cmp	r3, #3
   1f030:	ddf8      	ble.n	1f024 <ble_ll_seed_prng+0x8>
}
__extern_inline void srand(unsigned int __s)
{
	srand48(__s);
   1f032:	f7f3 fa9d 	bl	12570 <srand48>
    }
    srand(seed);
}
   1f036:	bd08      	pop	{r3, pc}
   1f038:	20003dc8 	.word	0x20003dc8

0001f03c <ble_ll_rxpdu_alloc>:
{
   1f03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f040:	4604      	mov	r4, r0
    om_ret = os_msys_get_pkthdr(len, sizeof(struct ble_mbuf_hdr));
   1f042:	2110      	movs	r1, #16
   1f044:	f7f2 fc5f 	bl	11906 <os_msys_get_pkthdr>
    if (!om_ret) {
   1f048:	4607      	mov	r7, r0
   1f04a:	b1f8      	cbz	r0, 1f08c <ble_ll_rxpdu_alloc+0x50>
    pkthdr->omp_len = len;
   1f04c:	8204      	strh	r4, [r0, #16]
    databuf_len = om_ret->om_omp->omp_databuf_len & ~3;
   1f04e:	6883      	ldr	r3, [r0, #8]
   1f050:	881b      	ldrh	r3, [r3, #0]
   1f052:	f023 0303 	bic.w	r3, r3, #3
   1f056:	b29b      	uxth	r3, r3
    om_ret->om_data += 4;
   1f058:	6802      	ldr	r2, [r0, #0]
   1f05a:	3204      	adds	r2, #4
   1f05c:	6002      	str	r2, [r0, #0]
    rem_len -= databuf_len - om_ret->om_pkthdr_len - 4;
   1f05e:	4698      	mov	r8, r3
   1f060:	7942      	ldrb	r2, [r0, #5]
   1f062:	1a9b      	subs	r3, r3, r2
   1f064:	3b04      	subs	r3, #4
   1f066:	1ae4      	subs	r4, r4, r3
    om = om_ret;
   1f068:	4606      	mov	r6, r0
    while (rem_len > 0) {
   1f06a:	2c00      	cmp	r4, #0
   1f06c:	dd0e      	ble.n	1f08c <ble_ll_rxpdu_alloc+0x50>
        om_next = os_msys_get(rem_len, 0);
   1f06e:	2100      	movs	r1, #0
   1f070:	b2a0      	uxth	r0, r4
   1f072:	f7f2 fc39 	bl	118e8 <os_msys_get>
        if (!om_next) {
   1f076:	4605      	mov	r5, r0
   1f078:	b120      	cbz	r0, 1f084 <ble_ll_rxpdu_alloc+0x48>
        SLIST_NEXT(om, om_next) = om_next;
   1f07a:	60f0      	str	r0, [r6, #12]
        rem_len -= databuf_len;
   1f07c:	eba4 0408 	sub.w	r4, r4, r8
        om = om_next;
   1f080:	4606      	mov	r6, r0
   1f082:	e7f2      	b.n	1f06a <ble_ll_rxpdu_alloc+0x2e>
            os_mbuf_free_chain(om_ret);
   1f084:	4638      	mov	r0, r7
   1f086:	f7f1 ff29 	bl	10edc <os_mbuf_free_chain>
    return NULL;
   1f08a:	462f      	mov	r7, r5
}
   1f08c:	4638      	mov	r0, r7
   1f08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f092 <ble_ll_chk_txrx_octets>:
    if ((octets < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   1f092:	381b      	subs	r0, #27
   1f094:	b280      	uxth	r0, r0
   1f096:	28e0      	cmp	r0, #224	; 0xe0
   1f098:	d801      	bhi.n	1f09e <ble_ll_chk_txrx_octets+0xc>
        rc = 1;
   1f09a:	2001      	movs	r0, #1
}
   1f09c:	4770      	bx	lr
        rc = 0;
   1f09e:	2000      	movs	r0, #0
   1f0a0:	4770      	bx	lr

0001f0a2 <ble_ll_chk_txrx_time>:
    if ((time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   1f0a2:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
   1f0a6:	b280      	uxth	r0, r0
   1f0a8:	f244 1348 	movw	r3, #16712	; 0x4148
   1f0ac:	4298      	cmp	r0, r3
   1f0ae:	d801      	bhi.n	1f0b4 <ble_ll_chk_txrx_time+0x12>
        rc = 1;
   1f0b0:	2001      	movs	r0, #1
}
   1f0b2:	4770      	bx	lr
        rc = 0;
   1f0b4:	2000      	movs	r0, #0
   1f0b6:	4770      	bx	lr

0001f0b8 <ble_ll_is_rpa>:
    if (addr_type && ((addr[5] & 0xc0) == 0x40)) {
   1f0b8:	b131      	cbz	r1, 1f0c8 <ble_ll_is_rpa+0x10>
   1f0ba:	7943      	ldrb	r3, [r0, #5]
   1f0bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f0c0:	2b40      	cmp	r3, #64	; 0x40
   1f0c2:	d003      	beq.n	1f0cc <ble_ll_is_rpa+0x14>
        rc = 0;
   1f0c4:	2000      	movs	r0, #0
   1f0c6:	4770      	bx	lr
   1f0c8:	2000      	movs	r0, #0
   1f0ca:	4770      	bx	lr
        rc = 1;
   1f0cc:	2001      	movs	r0, #1
}
   1f0ce:	4770      	bx	lr

0001f0d0 <ble_ll_addr_is_id>:
    return !addr_type || ((addr[5] & 0xc0) == 0xc0);
   1f0d0:	b141      	cbz	r1, 1f0e4 <ble_ll_addr_is_id+0x14>
   1f0d2:	7943      	ldrb	r3, [r0, #5]
   1f0d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f0d8:	2bc0      	cmp	r3, #192	; 0xc0
   1f0da:	d001      	beq.n	1f0e0 <ble_ll_addr_is_id+0x10>
   1f0dc:	2000      	movs	r0, #0
}
   1f0de:	4770      	bx	lr
    return !addr_type || ((addr[5] & 0xc0) == 0xc0);
   1f0e0:	2001      	movs	r0, #1
   1f0e2:	4770      	bx	lr
   1f0e4:	2001      	movs	r0, #1
   1f0e6:	4770      	bx	lr

0001f0e8 <ble_ll_is_valid_random_addr>:
{
   1f0e8:	b510      	push	{r4, lr}
    sum = 0;
   1f0ea:	2300      	movs	r3, #0
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   1f0ec:	461a      	mov	r2, r3
   1f0ee:	e003      	b.n	1f0f8 <ble_ll_is_valid_random_addr+0x10>
        sum += addr[i];
   1f0f0:	5c84      	ldrb	r4, [r0, r2]
   1f0f2:	4423      	add	r3, r4
   1f0f4:	b29b      	uxth	r3, r3
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   1f0f6:	3201      	adds	r2, #1
   1f0f8:	2a04      	cmp	r2, #4
   1f0fa:	ddf9      	ble.n	1f0f0 <ble_ll_is_valid_random_addr+0x8>
    sum += addr[5] & 0x3f;
   1f0fc:	7942      	ldrb	r2, [r0, #5]
   1f0fe:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   1f102:	440b      	add	r3, r1
   1f104:	b29b      	uxth	r3, r3
    if ((sum == 0) || (sum == ((5*255) + 0x3f))) {
   1f106:	b1f3      	cbz	r3, 1f146 <ble_ll_is_valid_random_addr+0x5e>
   1f108:	f240 543a 	movw	r4, #1338	; 0x53a
   1f10c:	42a3      	cmp	r3, r4
   1f10e:	d01d      	beq.n	1f14c <ble_ll_is_valid_random_addr+0x64>
    addr_type = addr[5] & 0xc0;
   1f110:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    if (addr_type == 0xc0) {
   1f114:	2ac0      	cmp	r2, #192	; 0xc0
   1f116:	d01b      	beq.n	1f150 <ble_ll_is_valid_random_addr+0x68>
    } else if (addr_type == 0x40) {
   1f118:	2a40      	cmp	r2, #64	; 0x40
   1f11a:	d009      	beq.n	1f130 <ble_ll_is_valid_random_addr+0x48>
    } else if (addr_type == 0) {
   1f11c:	b9f2      	cbnz	r2, 1f15c <ble_ll_is_valid_random_addr+0x74>
   1f11e:	4601      	mov	r1, r0
        if (!memcmp(g_dev_addr, addr, BLE_DEV_ADDR_LEN)) {
   1f120:	2206      	movs	r2, #6
   1f122:	480f      	ldr	r0, [pc, #60]	; (1f160 <ble_ll_is_valid_random_addr+0x78>)
   1f124:	f7f3 f9aa 	bl	1247c <memcmp>
   1f128:	4603      	mov	r3, r0
   1f12a:	b168      	cbz	r0, 1f148 <ble_ll_is_valid_random_addr+0x60>
    rc = 1;
   1f12c:	2301      	movs	r3, #1
   1f12e:	e00b      	b.n	1f148 <ble_ll_is_valid_random_addr+0x60>
        sum = addr[3] + addr[4] + (addr[5] & 0x3f);
   1f130:	78c3      	ldrb	r3, [r0, #3]
   1f132:	7902      	ldrb	r2, [r0, #4]
   1f134:	4413      	add	r3, r2
        if ((sum == 0) || (sum == (255 + 255 + 0x3f))) {
   1f136:	18c9      	adds	r1, r1, r3
   1f138:	d00c      	beq.n	1f154 <ble_ll_is_valid_random_addr+0x6c>
   1f13a:	f240 233d 	movw	r3, #573	; 0x23d
   1f13e:	4299      	cmp	r1, r3
   1f140:	d00a      	beq.n	1f158 <ble_ll_is_valid_random_addr+0x70>
    rc = 1;
   1f142:	2301      	movs	r3, #1
   1f144:	e000      	b.n	1f148 <ble_ll_is_valid_random_addr+0x60>
        return 0;
   1f146:	2300      	movs	r3, #0
}
   1f148:	4618      	mov	r0, r3
   1f14a:	bd10      	pop	{r4, pc}
        return 0;
   1f14c:	2300      	movs	r3, #0
   1f14e:	e7fb      	b.n	1f148 <ble_ll_is_valid_random_addr+0x60>
    rc = 1;
   1f150:	2301      	movs	r3, #1
   1f152:	e7f9      	b.n	1f148 <ble_ll_is_valid_random_addr+0x60>
            rc = 0;
   1f154:	2300      	movs	r3, #0
   1f156:	e7f7      	b.n	1f148 <ble_ll_is_valid_random_addr+0x60>
   1f158:	2300      	movs	r3, #0
   1f15a:	e7f5      	b.n	1f148 <ble_ll_is_valid_random_addr+0x60>
        rc = 0;
   1f15c:	2300      	movs	r3, #0
   1f15e:	e7f3      	b.n	1f148 <ble_ll_is_valid_random_addr+0x60>
   1f160:	20003dc8 	.word	0x20003dc8

0001f164 <ble_ll_set_random_addr>:
{
   1f164:	b570      	push	{r4, r5, r6, lr}
    if (g_ble_ll_conn_create_sm || ble_ll_scan_enabled() ||
   1f166:	4b10      	ldr	r3, [pc, #64]	; (1f1a8 <ble_ll_set_random_addr+0x44>)
   1f168:	681b      	ldr	r3, [r3, #0]
   1f16a:	b113      	cbz	r3, 1f172 <ble_ll_set_random_addr+0xe>
        return BLE_ERR_CMD_DISALLOWED;
   1f16c:	240c      	movs	r4, #12
}
   1f16e:	4620      	mov	r0, r4
   1f170:	bd70      	pop	{r4, r5, r6, pc}
   1f172:	460e      	mov	r6, r1
   1f174:	4605      	mov	r5, r0
    if (g_ble_ll_conn_create_sm || ble_ll_scan_enabled() ||
   1f176:	f007 fcd1 	bl	26b1c <ble_ll_scan_enabled>
   1f17a:	4604      	mov	r4, r0
   1f17c:	b980      	cbnz	r0, 1f1a0 <ble_ll_set_random_addr+0x3c>
   1f17e:	b14e      	cbz	r6, 1f194 <ble_ll_set_random_addr+0x30>
    if (!ble_ll_is_valid_random_addr(addr)) {
   1f180:	4628      	mov	r0, r5
   1f182:	f7ff ffb1 	bl	1f0e8 <ble_ll_is_valid_random_addr>
   1f186:	b168      	cbz	r0, 1f1a4 <ble_ll_set_random_addr+0x40>
    memcpy(g_random_addr, addr, BLE_DEV_ADDR_LEN);
   1f188:	4b08      	ldr	r3, [pc, #32]	; (1f1ac <ble_ll_set_random_addr+0x48>)
   1f18a:	682a      	ldr	r2, [r5, #0]
   1f18c:	601a      	str	r2, [r3, #0]
   1f18e:	88aa      	ldrh	r2, [r5, #4]
   1f190:	809a      	strh	r2, [r3, #4]
    return BLE_ERR_SUCCESS;
   1f192:	e7ec      	b.n	1f16e <ble_ll_set_random_addr+0xa>
                                (!hci_adv_ext && ble_ll_adv_enabled())) {
   1f194:	f001 fab2 	bl	206fc <ble_ll_adv_enabled>
   1f198:	2800      	cmp	r0, #0
   1f19a:	d0f1      	beq.n	1f180 <ble_ll_set_random_addr+0x1c>
        return BLE_ERR_CMD_DISALLOWED;
   1f19c:	240c      	movs	r4, #12
   1f19e:	e7e6      	b.n	1f16e <ble_ll_set_random_addr+0xa>
   1f1a0:	240c      	movs	r4, #12
   1f1a2:	e7e4      	b.n	1f16e <ble_ll_set_random_addr+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1f1a4:	2412      	movs	r4, #18
   1f1a6:	e7e2      	b.n	1f16e <ble_ll_set_random_addr+0xa>
   1f1a8:	20003f90 	.word	0x20003f90
   1f1ac:	20003dc0 	.word	0x20003dc0

0001f1b0 <ble_ll_is_our_devaddr>:
{
   1f1b0:	b508      	push	{r3, lr}
    if (addr_type) {
   1f1b2:	b141      	cbz	r1, 1f1c6 <ble_ll_is_our_devaddr+0x16>
        our_addr = g_random_addr;
   1f1b4:	4b06      	ldr	r3, [pc, #24]	; (1f1d0 <ble_ll_is_our_devaddr+0x20>)
    if (!memcmp(our_addr, addr, BLE_DEV_ADDR_LEN)) {
   1f1b6:	2206      	movs	r2, #6
   1f1b8:	4601      	mov	r1, r0
   1f1ba:	4618      	mov	r0, r3
   1f1bc:	f7f3 f95e 	bl	1247c <memcmp>
   1f1c0:	b918      	cbnz	r0, 1f1ca <ble_ll_is_our_devaddr+0x1a>
        rc = 1;
   1f1c2:	2001      	movs	r0, #1
}
   1f1c4:	bd08      	pop	{r3, pc}
        our_addr = g_dev_addr;
   1f1c6:	4b03      	ldr	r3, [pc, #12]	; (1f1d4 <ble_ll_is_our_devaddr+0x24>)
   1f1c8:	e7f5      	b.n	1f1b6 <ble_ll_is_our_devaddr+0x6>
    rc = 0;
   1f1ca:	2000      	movs	r0, #0
   1f1cc:	e7fa      	b.n	1f1c4 <ble_ll_is_our_devaddr+0x14>
   1f1ce:	bf00      	nop
   1f1d0:	20003dc0 	.word	0x20003dc0
   1f1d4:	20003dc8 	.word	0x20003dc8

0001f1d8 <ble_ll_get_our_devaddr>:
    if (addr_type) {
   1f1d8:	b908      	cbnz	r0, 1f1de <ble_ll_get_our_devaddr+0x6>
    return g_dev_addr;
   1f1da:	4802      	ldr	r0, [pc, #8]	; (1f1e4 <ble_ll_get_our_devaddr+0xc>)
}
   1f1dc:	4770      	bx	lr
        return g_random_addr;
   1f1de:	4802      	ldr	r0, [pc, #8]	; (1f1e8 <ble_ll_get_our_devaddr+0x10>)
   1f1e0:	4770      	bx	lr
   1f1e2:	bf00      	nop
   1f1e4:	20003dc8 	.word	0x20003dc8
   1f1e8:	20003dc0 	.word	0x20003dc0

0001f1ec <ble_ll_wfr_timer_exp>:
{
   1f1ec:	b538      	push	{r3, r4, r5, lr}
    rx_start = ble_phy_rx_started();
   1f1ee:	f009 fb23 	bl	28838 <ble_phy_rx_started>
   1f1f2:	4605      	mov	r5, r0
    lls = g_ble_ll_data.ll_state;
   1f1f4:	4b0b      	ldr	r3, [pc, #44]	; (1f224 <ble_ll_wfr_timer_exp+0x38>)
   1f1f6:	791c      	ldrb	r4, [r3, #4]
    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_WFR_EXP, lls, ble_phy_xcvr_state_get(),
   1f1f8:	f009 fb24 	bl	28844 <ble_phy_xcvr_state_get>
    if (!rx_start) {
   1f1fc:	b945      	cbnz	r5, 1f210 <ble_ll_wfr_timer_exp+0x24>
        switch (lls) {
   1f1fe:	1e63      	subs	r3, r4, #1
   1f200:	2b03      	cmp	r3, #3
   1f202:	d805      	bhi.n	1f210 <ble_ll_wfr_timer_exp+0x24>
   1f204:	e8df f003 	tbb	[pc, r3]
   1f208:	050b0802 	.word	0x050b0802
            ble_ll_adv_wfr_timer_exp();
   1f20c:	f001 fa54 	bl	206b8 <ble_ll_adv_wfr_timer_exp>
}
   1f210:	bd38      	pop	{r3, r4, r5, pc}
            ble_ll_conn_wfr_timer_exp();
   1f212:	f002 fa11 	bl	21638 <ble_ll_conn_wfr_timer_exp>
            break;
   1f216:	e7fb      	b.n	1f210 <ble_ll_wfr_timer_exp+0x24>
            ble_ll_scan_wfr_timer_exp();
   1f218:	f007 fa6a 	bl	266f0 <ble_ll_scan_wfr_timer_exp>
            break;
   1f21c:	e7f8      	b.n	1f210 <ble_ll_wfr_timer_exp+0x24>
            ble_ll_conn_init_wfr_timer_exp();
   1f21e:	f002 fa14 	bl	2164a <ble_ll_conn_init_wfr_timer_exp>
}
   1f222:	e7f5      	b.n	1f210 <ble_ll_wfr_timer_exp+0x24>
   1f224:	20003e20 	.word	0x20003e20

0001f228 <ble_ll_wfr_disable>:
}
   1f228:	4770      	bx	lr
	...

0001f22c <ble_ll_rx_pdu_in>:
{
   1f22c:	b508      	push	{r3, lr}
    pkthdr = OS_MBUF_PKTHDR(rxpdu);
   1f22e:	f100 0110 	add.w	r1, r0, #16
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_rx_pkt_q, pkthdr, omp_next);
   1f232:	2300      	movs	r3, #0
   1f234:	f840 3f14 	str.w	r3, [r0, #20]!
   1f238:	4b05      	ldr	r3, [pc, #20]	; (1f250 <ble_ll_rx_pdu_in+0x24>)
   1f23a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1f23c:	6011      	str	r1, [r2, #0]
   1f23e:	6698      	str	r0, [r3, #104]	; 0x68
    os_eventq_put(&evq->evq, &ev->ev);
   1f240:	f103 0154 	add.w	r1, r3, #84	; 0x54
   1f244:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   1f248:	f7f1 fd29 	bl	10c9e <os_eventq_put>
}
   1f24c:	bd08      	pop	{r3, pc}
   1f24e:	bf00      	nop
   1f250:	20003e20 	.word	0x20003e20

0001f254 <ble_ll_acl_data_in>:
{
   1f254:	b538      	push	{r3, r4, r5, lr}
   1f256:	4604      	mov	r4, r0
    pkthdr = OS_MBUF_PKTHDR(txpkt);
   1f258:	f100 0510 	add.w	r5, r0, #16
    OS_ENTER_CRITICAL(sr);
   1f25c:	f7f1 f8f4 	bl	10448 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_tx_pkt_q, pkthdr, omp_next);
   1f260:	4623      	mov	r3, r4
   1f262:	2200      	movs	r2, #0
   1f264:	f843 2f14 	str.w	r2, [r3, #20]!
   1f268:	4c07      	ldr	r4, [pc, #28]	; (1f288 <ble_ll_acl_data_in+0x34>)
   1f26a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
   1f26e:	6015      	str	r5, [r2, #0]
   1f270:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    OS_EXIT_CRITICAL(sr);
   1f274:	f7f1 f8ee 	bl	10454 <os_arch_restore_sr>
   1f278:	f104 016c 	add.w	r1, r4, #108	; 0x6c
   1f27c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1f280:	f7f1 fd0d 	bl	10c9e <os_eventq_put>
}
   1f284:	bd38      	pop	{r3, r4, r5, pc}
   1f286:	bf00      	nop
   1f288:	20003e20 	.word	0x20003e20

0001f28c <ble_ll_rx_start>:
{
   1f28c:	b510      	push	{r4, lr}
   1f28e:	4614      	mov	r4, r2
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1f290:	7800      	ldrb	r0, [r0, #0]
   1f292:	f000 000f 	and.w	r0, r0, #15
    ble_ll_trace_u32x2(BLE_LL_TRACE_ID_RX_START, g_ble_ll_data.ll_state,
   1f296:	4b0f      	ldr	r3, [pc, #60]	; (1f2d4 <ble_ll_rx_start+0x48>)
   1f298:	791b      	ldrb	r3, [r3, #4]
    switch (g_ble_ll_data.ll_state) {
   1f29a:	3b01      	subs	r3, #1
   1f29c:	2b03      	cmp	r3, #3
   1f29e:	d815      	bhi.n	1f2cc <ble_ll_rx_start+0x40>
   1f2a0:	e8df f003 	tbb	[pc, r3]
   1f2a4:	020c1009 	.word	0x020c1009
        rc = ble_ll_conn_rx_isr_start(rxhdr, ble_phy_access_addr_get());
   1f2a8:	f009 fac0 	bl	2882c <ble_phy_access_addr_get>
   1f2ac:	4601      	mov	r1, r0
   1f2ae:	4620      	mov	r0, r4
   1f2b0:	f002 fe36 	bl	21f20 <ble_ll_conn_rx_isr_start>
}
   1f2b4:	bd10      	pop	{r4, pc}
        rc = ble_ll_adv_rx_isr_start(pdu_type);
   1f2b6:	f001 f9a3 	bl	20600 <ble_ll_adv_rx_isr_start>
        break;
   1f2ba:	e7fb      	b.n	1f2b4 <ble_ll_rx_start+0x28>
        rc = ble_ll_init_rx_isr_start(pdu_type, rxhdr);
   1f2bc:	4621      	mov	r1, r4
   1f2be:	f002 fc7f 	bl	21bc0 <ble_ll_init_rx_isr_start>
        break;
   1f2c2:	e7f7      	b.n	1f2b4 <ble_ll_rx_start+0x28>
        rc = ble_ll_scan_rx_isr_start(pdu_type, &rxhdr->rxinfo.flags);
   1f2c4:	4621      	mov	r1, r4
   1f2c6:	f007 f823 	bl	26310 <ble_ll_scan_rx_isr_start>
        break;
   1f2ca:	e7f3      	b.n	1f2b4 <ble_ll_rx_start+0x28>
        rc = -1;
   1f2cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   1f2d0:	e7f0      	b.n	1f2b4 <ble_ll_rx_start+0x28>
   1f2d2:	bf00      	nop
   1f2d4:	20003e20 	.word	0x20003e20

0001f2d8 <ble_ll_rx_end>:
{
   1f2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f2da:	4605      	mov	r5, r0
    crcok = BLE_MBUF_HDR_CRC_OK(rxhdr);
   1f2dc:	880b      	ldrh	r3, [r1, #0]
   1f2de:	f003 0280 	and.w	r2, r3, #128	; 0x80
   1f2e2:	f3c3 16c0 	ubfx	r6, r3, #7, #1
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1f2e6:	7804      	ldrb	r4, [r0, #0]
    len = rxbuf[1];
   1f2e8:	7840      	ldrb	r0, [r0, #1]
   1f2ea:	f003 0307 	and.w	r3, r3, #7
    if (BLE_MBUF_HDR_RX_STATE(rxhdr) == BLE_LL_STATE_CONNECTION) {
   1f2ee:	2b04      	cmp	r3, #4
   1f2f0:	d00b      	beq.n	1f30a <ble_ll_rx_end+0x32>
   1f2f2:	f004 040f 	and.w	r4, r4, #15
    if (crcok) {
   1f2f6:	b30a      	cbz	r2, 1f33c <ble_ll_rx_end+0x64>
        switch (pdu_type) {
   1f2f8:	2c08      	cmp	r4, #8
   1f2fa:	d829      	bhi.n	1f350 <ble_ll_rx_end+0x78>
   1f2fc:	e8df f004 	tbb	[pc, r4]
   1f300:	0c120c12 	.word	0x0c120c12
   1f304:	0a121812 	.word	0x0a121812
   1f308:	0a          	.byte	0x0a
   1f309:	00          	.byte	0x00
        rc = ble_ll_conn_rx_isr_end(rxbuf, rxhdr);
   1f30a:	4628      	mov	r0, r5
   1f30c:	f002 fed4 	bl	220b8 <ble_ll_conn_rx_isr_end>
   1f310:	4604      	mov	r4, r0
        return rc;
   1f312:	e02d      	b.n	1f370 <ble_ll_rx_end+0x98>
    badpkt = 0;
   1f314:	2200      	movs	r2, #0
   1f316:	e012      	b.n	1f33e <ble_ll_rx_end+0x66>
            if (len != BLE_SCAN_REQ_LEN) {
   1f318:	280c      	cmp	r0, #12
   1f31a:	d001      	beq.n	1f320 <ble_ll_rx_end+0x48>
                badpkt = 1;
   1f31c:	2201      	movs	r2, #1
   1f31e:	e00e      	b.n	1f33e <ble_ll_rx_end+0x66>
    badpkt = 0;
   1f320:	2200      	movs	r2, #0
   1f322:	e00c      	b.n	1f33e <ble_ll_rx_end+0x66>
            if ((len < BLE_DEV_ADDR_LEN) || (len > BLE_ADV_SCAN_IND_MAX_LEN)) {
   1f324:	1f82      	subs	r2, r0, #6
   1f326:	b2d2      	uxtb	r2, r2
   1f328:	2a1f      	cmp	r2, #31
   1f32a:	d813      	bhi.n	1f354 <ble_ll_rx_end+0x7c>
    badpkt = 0;
   1f32c:	2200      	movs	r2, #0
   1f32e:	e006      	b.n	1f33e <ble_ll_rx_end+0x66>
            if (len != BLE_CONNECT_REQ_LEN) {
   1f330:	2822      	cmp	r0, #34	; 0x22
   1f332:	d001      	beq.n	1f338 <ble_ll_rx_end+0x60>
                badpkt = 1;
   1f334:	2201      	movs	r2, #1
   1f336:	e002      	b.n	1f33e <ble_ll_rx_end+0x66>
    badpkt = 0;
   1f338:	2200      	movs	r2, #0
   1f33a:	e000      	b.n	1f33e <ble_ll_rx_end+0x66>
   1f33c:	2200      	movs	r2, #0
    switch (BLE_MBUF_HDR_RX_STATE(rxhdr)) {
   1f33e:	2b02      	cmp	r3, #2
   1f340:	d023      	beq.n	1f38a <ble_ll_rx_end+0xb2>
   1f342:	2b03      	cmp	r3, #3
   1f344:	d034      	beq.n	1f3b0 <ble_ll_rx_end+0xd8>
   1f346:	2b01      	cmp	r3, #1
   1f348:	d006      	beq.n	1f358 <ble_ll_rx_end+0x80>
        rc = -1;
   1f34a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1f34e:	e00f      	b.n	1f370 <ble_ll_rx_end+0x98>
            badpkt = 1;
   1f350:	2201      	movs	r2, #1
   1f352:	e7f4      	b.n	1f33e <ble_ll_rx_end+0x66>
                badpkt = 1;
   1f354:	2201      	movs	r2, #1
   1f356:	e7f2      	b.n	1f33e <ble_ll_rx_end+0x66>
        if (!badpkt) {
   1f358:	b162      	cbz	r2, 1f374 <ble_ll_rx_end+0x9c>
    rxpdu = NULL;
   1f35a:	2700      	movs	r7, #0
        rc = ble_ll_adv_rx_isr_end(pdu_type, rxpdu, crcok);
   1f35c:	4632      	mov	r2, r6
   1f35e:	4639      	mov	r1, r7
   1f360:	4620      	mov	r0, r4
   1f362:	f001 f905 	bl	20570 <ble_ll_adv_rx_isr_end>
   1f366:	4604      	mov	r4, r0
    if (rxpdu) {
   1f368:	b117      	cbz	r7, 1f370 <ble_ll_rx_end+0x98>
        ble_ll_rx_pdu_in(rxpdu);
   1f36a:	4638      	mov	r0, r7
   1f36c:	f7ff ff5e 	bl	1f22c <ble_ll_rx_pdu_in>
}
   1f370:	4620      	mov	r0, r4
   1f372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rxpdu = ble_ll_rxpdu_alloc(len + BLE_LL_PDU_HDR_LEN);
   1f374:	3002      	adds	r0, #2
   1f376:	f7ff fe61 	bl	1f03c <ble_ll_rxpdu_alloc>
            if (rxpdu) {
   1f37a:	4607      	mov	r7, r0
   1f37c:	2800      	cmp	r0, #0
   1f37e:	d0ed      	beq.n	1f35c <ble_ll_rx_end+0x84>
                ble_phy_rxpdu_copy(rxbuf, rxpdu);
   1f380:	4601      	mov	r1, r0
   1f382:	4628      	mov	r0, r5
   1f384:	f008 fd7c 	bl	27e80 <ble_phy_rxpdu_copy>
   1f388:	e7e8      	b.n	1f35c <ble_ll_rx_end+0x84>
        if (!badpkt) {
   1f38a:	b132      	cbz	r2, 1f39a <ble_ll_rx_end+0xc2>
    rxpdu = NULL;
   1f38c:	2700      	movs	r7, #0
        rc = ble_ll_scan_rx_isr_end(rxpdu, crcok);
   1f38e:	4631      	mov	r1, r6
   1f390:	4638      	mov	r0, r7
   1f392:	f007 f863 	bl	2645c <ble_ll_scan_rx_isr_end>
   1f396:	4604      	mov	r4, r0
        break;
   1f398:	e7e6      	b.n	1f368 <ble_ll_rx_end+0x90>
            rxpdu = ble_ll_rxpdu_alloc(len + BLE_LL_PDU_HDR_LEN);
   1f39a:	3002      	adds	r0, #2
   1f39c:	f7ff fe4e 	bl	1f03c <ble_ll_rxpdu_alloc>
            if (rxpdu) {
   1f3a0:	4607      	mov	r7, r0
   1f3a2:	2800      	cmp	r0, #0
   1f3a4:	d0f3      	beq.n	1f38e <ble_ll_rx_end+0xb6>
                ble_phy_rxpdu_copy(rxbuf, rxpdu);
   1f3a6:	4601      	mov	r1, r0
   1f3a8:	4628      	mov	r0, r5
   1f3aa:	f008 fd69 	bl	27e80 <ble_phy_rxpdu_copy>
   1f3ae:	e7ee      	b.n	1f38e <ble_ll_rx_end+0xb6>
        rc = ble_ll_init_rx_isr_end(rxbuf, crcok, rxhdr);
   1f3b0:	460a      	mov	r2, r1
   1f3b2:	4631      	mov	r1, r6
   1f3b4:	4628      	mov	r0, r5
   1f3b6:	f002 fc17 	bl	21be8 <ble_ll_init_rx_isr_end>
   1f3ba:	4604      	mov	r4, r0
   1f3bc:	e7d8      	b.n	1f370 <ble_ll_rx_end+0x98>

0001f3be <ble_ll_tx_mbuf_pducb>:
{
   1f3be:	b538      	push	{r3, r4, r5, lr}
    BLE_LL_ASSERT(txpdu);
   1f3c0:	b159      	cbz	r1, 1f3da <ble_ll_tx_mbuf_pducb+0x1c>
   1f3c2:	4615      	mov	r5, r2
   1f3c4:	460c      	mov	r4, r1
    os_mbuf_copydata(txpdu, ble_hdr->txinfo.offset, ble_hdr->txinfo.pyld_len,
   1f3c6:	4603      	mov	r3, r0
   1f3c8:	7e8a      	ldrb	r2, [r1, #26]
   1f3ca:	7e49      	ldrb	r1, [r1, #25]
   1f3cc:	4620      	mov	r0, r4
   1f3ce:	f7f1 fe8d 	bl	110ec <os_mbuf_copydata>
    *hdr_byte = ble_hdr->txinfo.hdr_byte;
   1f3d2:	7ee3      	ldrb	r3, [r4, #27]
   1f3d4:	702b      	strb	r3, [r5, #0]
}
   1f3d6:	7ea0      	ldrb	r0, [r4, #26]
   1f3d8:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(txpdu);
   1f3da:	2300      	movs	r3, #0
   1f3dc:	461a      	mov	r2, r3
   1f3de:	4619      	mov	r1, r3
   1f3e0:	4618      	mov	r0, r3
   1f3e2:	f7f1 f8fb 	bl	105dc <__assert_func>
	...

0001f3e8 <ble_ll_state_set>:
    g_ble_ll_data.ll_state = ll_state;
   1f3e8:	4b01      	ldr	r3, [pc, #4]	; (1f3f0 <ble_ll_state_set+0x8>)
   1f3ea:	7118      	strb	r0, [r3, #4]
}
   1f3ec:	4770      	bx	lr
   1f3ee:	bf00      	nop
   1f3f0:	20003e20 	.word	0x20003e20

0001f3f4 <ble_ll_state_get>:
}
   1f3f4:	4b01      	ldr	r3, [pc, #4]	; (1f3fc <ble_ll_state_get+0x8>)
   1f3f6:	7918      	ldrb	r0, [r3, #4]
   1f3f8:	4770      	bx	lr
   1f3fa:	bf00      	nop
   1f3fc:	20003e20 	.word	0x20003e20

0001f400 <ble_ll_event_send>:
{
   1f400:	b508      	push	{r3, lr}
   1f402:	4601      	mov	r1, r0
   1f404:	4801      	ldr	r0, [pc, #4]	; (1f40c <ble_ll_event_send+0xc>)
   1f406:	f7f1 fc4a 	bl	10c9e <os_eventq_put>
}
   1f40a:	bd08      	pop	{r3, pc}
   1f40c:	20003e4c 	.word	0x20003e4c

0001f410 <ble_ll_read_supp_states>:
}
   1f410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f414:	f240 31ff 	movw	r1, #1023	; 0x3ff
   1f418:	4770      	bx	lr
	...

0001f41c <ble_ll_read_supp_features>:
}
   1f41c:	4b01      	ldr	r3, [pc, #4]	; (1f424 <ble_ll_read_supp_features+0x8>)
   1f41e:	6818      	ldr	r0, [r3, #0]
   1f420:	4770      	bx	lr
   1f422:	bf00      	nop
   1f424:	20003e20 	.word	0x20003e20

0001f428 <ble_ll_reset>:
{
   1f428:	b538      	push	{r3, r4, r5, lr}
    ble_phy_disable();
   1f42a:	f008 ff9b 	bl	28364 <ble_phy_disable>
    OS_ENTER_CRITICAL(sr);
   1f42e:	f7f1 f80b 	bl	10448 <os_arch_save_sr>
   1f432:	4604      	mov	r4, r0
    ble_ll_sched_stop();
   1f434:	f008 f850 	bl	274d8 <ble_ll_sched_stop>
    OS_EXIT_CRITICAL(sr);
   1f438:	4620      	mov	r0, r4
   1f43a:	f7f1 f80b 	bl	10454 <os_arch_restore_sr>
    ble_ll_scan_reset();
   1f43e:	f007 fb97 	bl	26b70 <ble_ll_scan_reset>
    ble_ll_adv_reset();
   1f442:	f001 f943 	bl	206cc <ble_ll_adv_reset>
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_tx_pkt_q);
   1f446:	4c14      	ldr	r4, [pc, #80]	; (1f498 <ble_ll_reset+0x70>)
   1f448:	4620      	mov	r0, r4
   1f44a:	f7ff fd24 	bl	1ee96 <ble_ll_flush_pkt_queue>
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_rx_pkt_q);
   1f44e:	f1a4 0018 	sub.w	r0, r4, #24
   1f452:	f7ff fd20 	bl	1ee96 <ble_ll_flush_pkt_queue>
    g_ble_ll_data.ll_pref_tx_phys = 0;
   1f456:	2500      	movs	r5, #0
   1f458:	f804 5c74 	strb.w	r5, [r4, #-116]
    g_ble_ll_data.ll_pref_rx_phys = 0;
   1f45c:	f804 5c73 	strb.w	r5, [r4, #-115]
    ble_ll_conn_module_reset();
   1f460:	f003 f8be 	bl	225e0 <ble_ll_conn_module_reset>
    ble_ll_hci_init();
   1f464:	f005 fcee 	bl	24e44 <ble_ll_hci_init>
    ble_ll_sched_init();
   1f468:	f008 f83e 	bl	274e8 <ble_ll_sched_init>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1f46c:	4628      	mov	r0, r5
   1f46e:	f7ff ffbb 	bl	1f3e8 <ble_ll_state_set>
    OS_ENTER_CRITICAL(sr);
   1f472:	f7f0 ffe9 	bl	10448 <os_arch_save_sr>
   1f476:	4604      	mov	r4, r0
    ble_ll_xcvr_rfclk_stop();
   1f478:	f008 f9ec 	bl	27854 <ble_ll_xcvr_rfclk_stop>
    OS_EXIT_CRITICAL(sr);
   1f47c:	4620      	mov	r0, r4
   1f47e:	f7f0 ffe9 	bl	10454 <os_arch_restore_sr>
    memset(g_random_addr, 0, BLE_DEV_ADDR_LEN);
   1f482:	4b06      	ldr	r3, [pc, #24]	; (1f49c <ble_ll_reset+0x74>)
   1f484:	601d      	str	r5, [r3, #0]
   1f486:	809d      	strh	r5, [r3, #4]
    ble_ll_whitelist_clear();
   1f488:	f008 f928 	bl	276dc <ble_ll_whitelist_clear>
    ble_ll_resolv_list_reset();
   1f48c:	f006 f9de 	bl	2584c <ble_ll_resolv_list_reset>
    rc = ble_phy_init();
   1f490:	f008 fde0 	bl	28054 <ble_phy_init>
}
   1f494:	bd38      	pop	{r3, r4, r5, pc}
   1f496:	bf00      	nop
   1f498:	20003e9c 	.word	0x20003e9c
   1f49c:	20003dc0 	.word	0x20003dc0

0001f4a0 <ble_ll_pdu_tx_time_get>:
    }

    usecs += g_ble_ll_pdu_header_tx_time[phy_mode];
#else
    usecs = (((payload_len) + BLE_LL_PDU_HDR_LEN + BLE_LL_ACC_ADDR_LEN
            + BLE_LL_PREAMBLE_LEN + BLE_LL_CRC_LEN) << 3);
   1f4a0:	300a      	adds	r0, #10
#endif

    return usecs;
}
   1f4a2:	00c0      	lsls	r0, r0, #3
   1f4a4:	4770      	bx	lr
	...

0001f4a8 <ble_ll_pdu_max_tx_octets_get>:

uint16_t
ble_ll_pdu_max_tx_octets_get(uint32_t usecs, int phy_mode)
{
   1f4a8:	b508      	push	{r3, lr}
    uint32_t header_tx_time;
    uint16_t octets;

    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   1f4aa:	2903      	cmp	r1, #3
   1f4ac:	dc0d      	bgt.n	1f4ca <ble_ll_pdu_max_tx_octets_get+0x22>

    header_tx_time = g_ble_ll_pdu_header_tx_time[phy_mode];
   1f4ae:	4b15      	ldr	r3, [pc, #84]	; (1f504 <ble_ll_pdu_max_tx_octets_get+0x5c>)
   1f4b0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
     * Reference:
     * Core v5.0, Vol 6, Part B, section 4.5.10
     * see connEffectiveMaxTxTime and connEffectiveMaxRxTime definitions
     */

    if (usecs < header_tx_time) {
   1f4b4:	4283      	cmp	r3, r0
   1f4b6:	d822      	bhi.n	1f4fe <ble_ll_pdu_max_tx_octets_get+0x56>
        return 27;
    }

    usecs -= header_tx_time;
   1f4b8:	1ac0      	subs	r0, r0, r3

    if (phy_mode == BLE_PHY_MODE_1M) {
   1f4ba:	2901      	cmp	r1, #1
   1f4bc:	d00b      	beq.n	1f4d6 <ble_ll_pdu_max_tx_octets_get+0x2e>
        /* 8 usecs per byte */
        octets = usecs >> 3;
    } else if (phy_mode == BLE_PHY_MODE_2M) {
   1f4be:	2902      	cmp	r1, #2
   1f4c0:	d00f      	beq.n	1f4e2 <ble_ll_pdu_max_tx_octets_get+0x3a>
        /* 4 usecs per byte */
        octets = usecs >> 2;
    } else if (phy_mode == BLE_PHY_MODE_CODED_125KBPS) {
   1f4c2:	b989      	cbnz	r1, 1f4e8 <ble_ll_pdu_max_tx_octets_get+0x40>
        /* S=8 => 8 * 8 = 64 usecs per byte */
        octets = usecs >> 6;
   1f4c4:	f3c0 108f 	ubfx	r0, r0, #6, #16
   1f4c8:	e007      	b.n	1f4da <ble_ll_pdu_max_tx_octets_get+0x32>
    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   1f4ca:	2300      	movs	r3, #0
   1f4cc:	461a      	mov	r2, r3
   1f4ce:	4619      	mov	r1, r3
   1f4d0:	4618      	mov	r0, r3
   1f4d2:	f7f1 f883 	bl	105dc <__assert_func>
        octets = usecs >> 3;
   1f4d6:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    } else {
        BLE_LL_ASSERT(0);
    }

    /* see comment at the beginning */
    return max(27, octets);
   1f4da:	281b      	cmp	r0, #27
   1f4dc:	bf38      	it	cc
   1f4de:	201b      	movcc	r0, #27
}
   1f4e0:	bd08      	pop	{r3, pc}
        octets = usecs >> 2;
   1f4e2:	f3c0 008f 	ubfx	r0, r0, #2, #16
   1f4e6:	e7f8      	b.n	1f4da <ble_ll_pdu_max_tx_octets_get+0x32>
    } else if (phy_mode == BLE_PHY_MODE_CODED_500KBPS) {
   1f4e8:	2903      	cmp	r1, #3
   1f4ea:	d102      	bne.n	1f4f2 <ble_ll_pdu_max_tx_octets_get+0x4a>
        octets = usecs >> 4;
   1f4ec:	f3c0 100f 	ubfx	r0, r0, #4, #16
   1f4f0:	e7f3      	b.n	1f4da <ble_ll_pdu_max_tx_octets_get+0x32>
        BLE_LL_ASSERT(0);
   1f4f2:	2300      	movs	r3, #0
   1f4f4:	461a      	mov	r2, r3
   1f4f6:	4619      	mov	r1, r3
   1f4f8:	4618      	mov	r0, r3
   1f4fa:	f7f1 f86f 	bl	105dc <__assert_func>
        return 27;
   1f4fe:	201b      	movs	r0, #27
   1f500:	e7ee      	b.n	1f4e0 <ble_ll_pdu_max_tx_octets_get+0x38>
   1f502:	bf00      	nop
   1f504:	0002c930 	.word	0x0002c930

0001f508 <ble_ll_init>:
 *
 * @return int
 */
void
ble_ll_init(void)
{
   1f508:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f50a:	b08d      	sub	sp, #52	; 0x34
#endif
    ble_addr_t addr;
    struct ble_ll_obj *lldata;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1f50c:	4b4d      	ldr	r3, [pc, #308]	; (1f644 <ble_ll_init+0x13c>)
   1f50e:	781b      	ldrb	r3, [r3, #0]
   1f510:	2b00      	cmp	r3, #0
   1f512:	f000 8085 	beq.w	1f620 <ble_ll_init+0x118>
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   1f516:	2300      	movs	r3, #0
   1f518:	9308      	str	r3, [sp, #32]
   1f51a:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
   1f51e:	2206      	movs	r2, #6
   1f520:	a908      	add	r1, sp, #32
   1f522:	4849      	ldr	r0, [pc, #292]	; (1f648 <ble_ll_init+0x140>)
   1f524:	f7f2 ffaa 	bl	1247c <memcmp>

    ble_ll_trace_init();
    ble_phy_trace_init();

    /* Set public device address if not already set */
    if (ble_ll_is_addr_empty(g_dev_addr)) {
   1f528:	b988      	cbnz	r0, 1f54e <ble_ll_init+0x46>
        /* Use sycfg address if configured, otherwise try to read from HW */
        if (!ble_ll_is_addr_empty(MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR))) {
   1f52a:	2300      	movs	r3, #0
   1f52c:	9306      	str	r3, [sp, #24]
   1f52e:	f8ad 301c 	strh.w	r3, [sp, #28]
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   1f532:	930a      	str	r3, [sp, #40]	; 0x28
   1f534:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
   1f538:	2206      	movs	r2, #6
   1f53a:	a90a      	add	r1, sp, #40	; 0x28
   1f53c:	a806      	add	r0, sp, #24
   1f53e:	f7f2 ff9d 	bl	1247c <memcmp>
        if (!ble_ll_is_addr_empty(MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR))) {
   1f542:	2800      	cmp	r0, #0
   1f544:	d071      	beq.n	1f62a <ble_ll_init+0x122>
            memcpy(g_dev_addr, MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR), BLE_DEV_ADDR_LEN);
   1f546:	4b40      	ldr	r3, [pc, #256]	; (1f648 <ble_ll_init+0x140>)
   1f548:	2200      	movs	r2, #0
   1f54a:	601a      	str	r2, [r3, #0]
   1f54c:	809a      	strh	r2, [r3, #4]

#ifdef BLE_XCVR_RFCLK
    /* Settling time of crystal, in ticks */
    xtal_ticks = MYNEWT_VAL(BLE_XTAL_SETTLE_TIME);
    BLE_LL_ASSERT(xtal_ticks != 0);
    g_ble_ll_data.ll_xtal_ticks = os_cputime_usecs_to_ticks(xtal_ticks);
   1f54e:	f240 50dc 	movw	r0, #1500	; 0x5dc
   1f552:	f7f1 fa97 	bl	10a84 <os_cputime_usecs_to_ticks>
   1f556:	4c3d      	ldr	r4, [pc, #244]	; (1f64c <ble_ll_init+0x144>)
   1f558:	81a0      	strh	r0, [r4, #12]

    /* Initialize rf clock timer */
    os_cputime_timer_init(&g_ble_ll_data.ll_rfclk_timer,
   1f55a:	2200      	movs	r2, #0
   1f55c:	493c      	ldr	r1, [pc, #240]	; (1f650 <ble_ll_init+0x148>)
   1f55e:	f104 0014 	add.w	r0, r4, #20
   1f562:	f7f1 fa6b 	bl	10a3c <os_cputime_timer_init>

    /* Get pointer to global data object */
    lldata = &g_ble_ll_data;

    /* Set acl pkt size and number */
    lldata->ll_num_acl_pkts = MYNEWT_VAL(BLE_ACL_BUF_COUNT);
   1f566:	2304      	movs	r3, #4
   1f568:	7163      	strb	r3, [r4, #5]
    lldata->ll_acl_pkt_size = MYNEWT_VAL(BLE_ACL_BUF_SIZE);
   1f56a:	26ff      	movs	r6, #255	; 0xff
   1f56c:	80e6      	strh	r6, [r4, #6]
    os_eventq_init(&evq->evq);
   1f56e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
   1f572:	4638      	mov	r0, r7
   1f574:	f7f1 fb86 	bl	10c84 <os_eventq_init>

    /* Initialize eventq */
    ble_npl_eventq_init(&lldata->ll_evq);

    /* Initialize the transmit (from host) and receive (from phy) queues */
    STAILQ_INIT(&lldata->ll_tx_pkt_q);
   1f578:	2500      	movs	r5, #0
   1f57a:	4623      	mov	r3, r4
   1f57c:	f843 5f7c 	str.w	r5, [r3, #124]!
   1f580:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    STAILQ_INIT(&lldata->ll_rx_pkt_q);
   1f584:	4623      	mov	r3, r4
   1f586:	f843 5f64 	str.w	r5, [r3, #100]!
   1f58a:	66a3      	str	r3, [r4, #104]	; 0x68
    memset(ev, 0, sizeof(*ev));
   1f58c:	6565      	str	r5, [r4, #84]	; 0x54
   1f58e:	65e5      	str	r5, [r4, #92]	; 0x5c
   1f590:	6625      	str	r5, [r4, #96]	; 0x60
    ev->ev.ev_cb = (os_event_fn *)fn;
   1f592:	4b30      	ldr	r3, [pc, #192]	; (1f654 <ble_ll_init+0x14c>)
   1f594:	65a3      	str	r3, [r4, #88]	; 0x58
    memset(ev, 0, sizeof(*ev));
   1f596:	66e5      	str	r5, [r4, #108]	; 0x6c
   1f598:	6765      	str	r5, [r4, #116]	; 0x74
   1f59a:	67a5      	str	r5, [r4, #120]	; 0x78
    ev->ev.ev_cb = (os_event_fn *)fn;
   1f59c:	4b2e      	ldr	r3, [pc, #184]	; (1f658 <ble_ll_init+0x150>)
   1f59e:	6723      	str	r3, [r4, #112]	; 0x70
    memset(ev, 0, sizeof(*ev));
   1f5a0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
   1f5a4:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
   1f5a8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    ev->ev.ev_cb = (os_event_fn *)fn;
   1f5ac:	4b2b      	ldr	r3, [pc, #172]	; (1f65c <ble_ll_init+0x154>)
   1f5ae:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    memset(ev, 0, sizeof(*ev));
   1f5b2:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
   1f5b6:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
   1f5ba:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
    ev->ev.ev_cb = (os_event_fn *)fn;
   1f5be:	4b28      	ldr	r3, [pc, #160]	; (1f660 <ble_ll_init+0x158>)
   1f5c0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   1f5c4:	462b      	mov	r3, r5
   1f5c6:	4a27      	ldr	r2, [pc, #156]	; (1f664 <ble_ll_init+0x15c>)
   1f5c8:	4639      	mov	r1, r7
   1f5ca:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   1f5ce:	f7f1 f97f 	bl	108d0 <os_callout_init>
                         &g_ble_ll_data.ll_evq,
                         ble_ll_hw_err_timer_cb,
                         NULL);

    /* Initialize LL HCI */
    ble_ll_hci_init();
   1f5d2:	f005 fc37 	bl	24e44 <ble_ll_hci_init>

    /* Init the scheduler */
    ble_ll_sched_init();
   1f5d6:	f007 ff87 	bl	274e8 <ble_ll_sched_init>

    /* Initialize advertiser */
    ble_ll_adv_init();
   1f5da:	f001 f89f 	bl	2071c <ble_ll_adv_init>

    /* Initialize a scanner */
    ble_ll_scan_init();
   1f5de:	f007 faeb 	bl	26bb8 <ble_ll_scan_init>

    /* Initialize the connection module */
    ble_ll_conn_module_init();
   1f5e2:	f003 f859 	bl	22698 <ble_ll_conn_module_init>
    features |= BLE_LL_FEAT_LE_ENCRYPTION;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    features |= (BLE_LL_FEAT_LL_PRIVACY | BLE_LL_FEAT_EXT_SCAN_FILT);
    ble_ll_resolv_init();
   1f5e6:	f006 f917 	bl	25818 <ble_ll_resolv_init>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PERIODIC_ADV)
    features |= BLE_LL_FEAT_PERIODIC_ADV;
#endif

    /* Initialize random number generation */
    ble_ll_rand_init();
   1f5ea:	f005 fe49 	bl	25280 <ble_ll_rand_init>

    /* XXX: This really doesn't belong here, as the address probably has not
     * been set yet.
     */
    ble_ll_seed_prng();
   1f5ee:	f7ff fd15 	bl	1f01c <ble_ll_seed_prng>

    lldata->ll_supp_features = features;
   1f5f2:	6026      	str	r6, [r4, #0]

#if MYNEWT
    /* Initialize the LL task */
    os_task_init(&g_ble_ll_task, "ble_ll", ble_ll_task, NULL,
   1f5f4:	235a      	movs	r3, #90	; 0x5a
   1f5f6:	9303      	str	r3, [sp, #12]
   1f5f8:	4b1b      	ldr	r3, [pc, #108]	; (1f668 <ble_ll_init+0x160>)
   1f5fa:	9302      	str	r3, [sp, #8]
   1f5fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f600:	9301      	str	r3, [sp, #4]
   1f602:	9500      	str	r5, [sp, #0]
   1f604:	462b      	mov	r3, r5
   1f606:	4a19      	ldr	r2, [pc, #100]	; (1f66c <ble_ll_init+0x164>)
   1f608:	4919      	ldr	r1, [pc, #100]	; (1f670 <ble_ll_init+0x168>)
   1f60a:	481a      	ldr	r0, [pc, #104]	; (1f674 <ble_ll_init+0x16c>)
   1f60c:	f7f2 fcd6 	bl	11fbc <os_task_init>
                            STATS_SIZE_INIT_PARMS(ble_ll_stats, STATS_SIZE_32),
                            STATS_NAME_INIT_PARMS(ble_ll_stats),
                            "ble_ll");
    SYSINIT_PANIC_ASSERT(rc == 0);

    ble_hci_trans_cfg_ll(ble_ll_hci_cmd_rx, NULL, ble_ll_hci_acl_rx, NULL);
   1f610:	462b      	mov	r3, r5
   1f612:	4a19      	ldr	r2, [pc, #100]	; (1f678 <ble_ll_init+0x170>)
   1f614:	4629      	mov	r1, r5
   1f616:	4819      	ldr	r0, [pc, #100]	; (1f67c <ble_ll_init+0x174>)
   1f618:	f7fe f832 	bl	1d680 <ble_hci_trans_cfg_ll>

#if MYNEWT_VAL(BLE_LL_DIRECT_TEST_MODE)
    ble_ll_dtm_init();
#endif
}
   1f61c:	b00d      	add	sp, #52	; 0x34
   1f61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SYSINIT_ASSERT_ACTIVE();
   1f620:	461a      	mov	r2, r3
   1f622:	4619      	mov	r1, r3
   1f624:	4618      	mov	r0, r3
   1f626:	f7f0 ffd9 	bl	105dc <__assert_func>
            rc = ble_hw_get_public_addr(&addr);
   1f62a:	a804      	add	r0, sp, #16
   1f62c:	f008 f990 	bl	27950 <ble_hw_get_public_addr>
            if (!rc) {
   1f630:	2800      	cmp	r0, #0
   1f632:	d18c      	bne.n	1f54e <ble_ll_init+0x46>
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
   1f634:	4a04      	ldr	r2, [pc, #16]	; (1f648 <ble_ll_init+0x140>)
   1f636:	ab0c      	add	r3, sp, #48	; 0x30
   1f638:	f853 1d1f 	ldr.w	r1, [r3, #-31]!
   1f63c:	6011      	str	r1, [r2, #0]
   1f63e:	889b      	ldrh	r3, [r3, #4]
   1f640:	8093      	strh	r3, [r2, #4]
   1f642:	e784      	b.n	1f54e <ble_ll_init+0x46>
   1f644:	20003bf0 	.word	0x20003bf0
   1f648:	20003dc8 	.word	0x20003dc8
   1f64c:	20003e20 	.word	0x20003e20
   1f650:	000278b9 	.word	0x000278b9
   1f654:	0001f015 	.word	0x0001f015
   1f658:	0001ef89 	.word	0x0001ef89
   1f65c:	0001ef13 	.word	0x0001ef13
   1f660:	0001ef09 	.word	0x0001ef09
   1f664:	0001eeed 	.word	0x0001eeed
   1f668:	200034b8 	.word	0x200034b8
   1f66c:	0001eeb9 	.word	0x0001eeb9
   1f670:	0002c928 	.word	0x0002c928
   1f674:	20003dd0 	.word	0x20003dd0
   1f678:	00024e39 	.word	0x00024e39
   1f67c:	00024e15 	.word	0x00024e15

0001f680 <ble_ll_adv_first_chan>:
ble_ll_adv_first_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    /* Set first advertising channel */
    if (advsm->adv_chanmask & 0x01) {
   1f680:	7883      	ldrb	r3, [r0, #2]
   1f682:	f013 0f01 	tst.w	r3, #1
   1f686:	d106      	bne.n	1f696 <ble_ll_adv_first_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START;
    } else if (advsm->adv_chanmask & 0x02) {
   1f688:	f013 0f02 	tst.w	r3, #2
   1f68c:	d101      	bne.n	1f692 <ble_ll_adv_first_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   1f68e:	2027      	movs	r0, #39	; 0x27
    }

    return adv_chan;
}
   1f690:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   1f692:	2026      	movs	r0, #38	; 0x26
   1f694:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START;
   1f696:	2025      	movs	r0, #37	; 0x25
   1f698:	4770      	bx	lr

0001f69a <ble_ll_adv_final_chan>:
static uint8_t
ble_ll_adv_final_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    if (advsm->adv_chanmask & 0x04) {
   1f69a:	7883      	ldrb	r3, [r0, #2]
   1f69c:	f013 0f04 	tst.w	r3, #4
   1f6a0:	d106      	bne.n	1f6b0 <ble_ll_adv_final_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
    } else if (advsm->adv_chanmask & 0x02) {
   1f6a2:	f013 0f02 	tst.w	r3, #2
   1f6a6:	d101      	bne.n	1f6ac <ble_ll_adv_final_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START;
   1f6a8:	2025      	movs	r0, #37	; 0x25
    }

    return adv_chan;
}
   1f6aa:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   1f6ac:	2026      	movs	r0, #38	; 0x26
   1f6ae:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   1f6b0:	2027      	movs	r0, #39	; 0x27
   1f6b2:	4770      	bx	lr

0001f6b4 <instance_configured>:
    }
#endif

    /* legacy HCI instance is always configured */
    return true;
}
   1f6b4:	2001      	movs	r0, #1
   1f6b6:	4770      	bx	lr

0001f6b8 <ble_ll_adv_rpa_update>:
{
   1f6b8:	b538      	push	{r3, r4, r5, lr}
   1f6ba:	4604      	mov	r4, r0
    if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   1f6bc:	f100 0534 	add.w	r5, r0, #52	; 0x34
   1f6c0:	2301      	movs	r3, #1
   1f6c2:	f100 0228 	add.w	r2, r0, #40	; 0x28
   1f6c6:	7941      	ldrb	r1, [r0, #5]
   1f6c8:	4628      	mov	r0, r5
   1f6ca:	f006 f829 	bl	25720 <ble_ll_resolv_gen_rpa>
   1f6ce:	b980      	cbnz	r0, 1f6f2 <ble_ll_adv_rpa_update+0x3a>
        if (advsm->own_addr_type & 1) {
   1f6d0:	7923      	ldrb	r3, [r4, #4]
   1f6d2:	f013 0f01 	tst.w	r3, #1
   1f6d6:	d015      	beq.n	1f704 <ble_ll_adv_rpa_update+0x4c>
    OS_ENTER_CRITICAL(sr);
   1f6d8:	f7f0 feb6 	bl	10448 <os_arch_save_sr>
    advsm->flags |= flags;
   1f6dc:	8963      	ldrh	r3, [r4, #10]
   1f6de:	f043 0301 	orr.w	r3, r3, #1
   1f6e2:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1f6e4:	f7f0 feb6 	bl	10454 <os_arch_restore_sr>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1f6e8:	89a3      	ldrh	r3, [r4, #12]
   1f6ea:	f013 0f04 	tst.w	r3, #4
   1f6ee:	d112      	bne.n	1f716 <ble_ll_adv_rpa_update+0x5e>
}
   1f6f0:	bd38      	pop	{r3, r4, r5, pc}
    OS_ENTER_CRITICAL(sr);
   1f6f2:	f7f0 fea9 	bl	10448 <os_arch_save_sr>
    advsm->flags |= flags;
   1f6f6:	8963      	ldrh	r3, [r4, #10]
   1f6f8:	f043 0301 	orr.w	r3, r3, #1
   1f6fc:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1f6fe:	f7f0 fea9 	bl	10454 <os_arch_restore_sr>
   1f702:	e7f1      	b.n	1f6e8 <ble_ll_adv_rpa_update+0x30>
    OS_ENTER_CRITICAL(sr);
   1f704:	f7f0 fea0 	bl	10448 <os_arch_save_sr>
    advsm->flags &= ~flags;
   1f708:	8963      	ldrh	r3, [r4, #10]
   1f70a:	f023 0301 	bic.w	r3, r3, #1
   1f70e:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1f710:	f7f0 fea0 	bl	10454 <os_arch_restore_sr>
   1f714:	e7e8      	b.n	1f6e8 <ble_ll_adv_rpa_update+0x30>
        if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   1f716:	2300      	movs	r3, #0
   1f718:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   1f71c:	7961      	ldrb	r1, [r4, #5]
   1f71e:	4628      	mov	r0, r5
   1f720:	f005 fffe 	bl	25720 <ble_ll_resolv_gen_rpa>
   1f724:	b960      	cbnz	r0, 1f740 <ble_ll_adv_rpa_update+0x88>
            if (advsm->peer_addr_type & 1) {
   1f726:	7963      	ldrb	r3, [r4, #5]
   1f728:	f013 0f01 	tst.w	r3, #1
   1f72c:	d111      	bne.n	1f752 <ble_ll_adv_rpa_update+0x9a>
    OS_ENTER_CRITICAL(sr);
   1f72e:	f7f0 fe8b 	bl	10448 <os_arch_save_sr>
    advsm->flags &= ~flags;
   1f732:	8963      	ldrh	r3, [r4, #10]
   1f734:	f023 0302 	bic.w	r3, r3, #2
   1f738:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1f73a:	f7f0 fe8b 	bl	10454 <os_arch_restore_sr>
}
   1f73e:	e7d7      	b.n	1f6f0 <ble_ll_adv_rpa_update+0x38>
    OS_ENTER_CRITICAL(sr);
   1f740:	f7f0 fe82 	bl	10448 <os_arch_save_sr>
    advsm->flags |= flags;
   1f744:	8963      	ldrh	r3, [r4, #10]
   1f746:	f043 0302 	orr.w	r3, r3, #2
   1f74a:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1f74c:	f7f0 fe82 	bl	10454 <os_arch_restore_sr>
   1f750:	e7ce      	b.n	1f6f0 <ble_ll_adv_rpa_update+0x38>
    OS_ENTER_CRITICAL(sr);
   1f752:	f7f0 fe79 	bl	10448 <os_arch_save_sr>
    advsm->flags |= flags;
   1f756:	8963      	ldrh	r3, [r4, #10]
   1f758:	f043 0302 	orr.w	r3, r3, #2
   1f75c:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1f75e:	f7f0 fe79 	bl	10454 <os_arch_restore_sr>
   1f762:	e7c5      	b.n	1f6f0 <ble_ll_adv_rpa_update+0x38>

0001f764 <ble_ll_adv_scheduled>:
{
   1f764:	b538      	push	{r3, r4, r5, lr}
    advsm->adv_event_start_time = sch_start + g_ble_ll_sched_offset_ticks;
   1f766:	4b08      	ldr	r3, [pc, #32]	; (1f788 <ble_ll_adv_scheduled+0x24>)
   1f768:	781c      	ldrb	r4, [r3, #0]
   1f76a:	440c      	add	r4, r1
   1f76c:	6184      	str	r4, [r0, #24]
    advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1f76e:	61c4      	str	r4, [r0, #28]
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1f770:	8983      	ldrh	r3, [r0, #12]
   1f772:	f013 0f08 	tst.w	r3, #8
   1f776:	d100      	bne.n	1f77a <ble_ll_adv_scheduled+0x16>
}
   1f778:	bd38      	pop	{r3, r4, r5, pc}
   1f77a:	4605      	mov	r5, r0
                     os_cputime_usecs_to_ticks(BLE_LL_ADV_STATE_HD_MAX * 1000);
   1f77c:	4803      	ldr	r0, [pc, #12]	; (1f78c <ble_ll_adv_scheduled+0x28>)
   1f77e:	f7f1 f981 	bl	10a84 <os_cputime_usecs_to_ticks>
        advsm->adv_end_time = advsm->adv_event_start_time +
   1f782:	4404      	add	r4, r0
   1f784:	622c      	str	r4, [r5, #32]
}
   1f786:	e7f7      	b.n	1f778 <ble_ll_adv_scheduled+0x14>
   1f788:	200042ac 	.word	0x200042ac
   1f78c:	00138800 	.word	0x00138800

0001f790 <ble_ll_adv_set_sched>:
{
   1f790:	b538      	push	{r3, r4, r5, lr}
   1f792:	4604      	mov	r4, r0
    sch->cb_arg = advsm;
   1f794:	6700      	str	r0, [r0, #112]	; 0x70
    sch->sched_cb = ble_ll_adv_tx_start_cb;
   1f796:	4b11      	ldr	r3, [pc, #68]	; (1f7dc <ble_ll_adv_set_sched+0x4c>)
   1f798:	6743      	str	r3, [r0, #116]	; 0x74
    sch->sched_type = BLE_LL_SCHED_TYPE_ADV;
   1f79a:	2101      	movs	r1, #1
   1f79c:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
    max_usecs = ble_ll_pdu_tx_time_get(advsm->adv_pdu_len, BLE_PHY_MODE_1M);
   1f7a0:	79c0      	ldrb	r0, [r0, #7]
   1f7a2:	f7ff fe7d 	bl	1f4a0 <ble_ll_pdu_tx_time_get>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1f7a6:	89a3      	ldrh	r3, [r4, #12]
   1f7a8:	f013 0f04 	tst.w	r3, #4
   1f7ac:	d105      	bne.n	1f7ba <ble_ll_adv_set_sched+0x2a>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1f7ae:	f013 0f01 	tst.w	r3, #1
   1f7b2:	d004      	beq.n	1f7be <ble_ll_adv_set_sched+0x2e>
        max_usecs += BLE_LL_SCHED_ADV_MAX_USECS;
   1f7b4:	f500 7055 	add.w	r0, r0, #852	; 0x354
   1f7b8:	e001      	b.n	1f7be <ble_ll_adv_set_sched+0x2e>
        max_usecs += BLE_LL_SCHED_DIRECT_ADV_MAX_USECS;
   1f7ba:	f500 70fb 	add.w	r0, r0, #502	; 0x1f6
    sch->start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   1f7be:	69e5      	ldr	r5, [r4, #28]
   1f7c0:	4b07      	ldr	r3, [pc, #28]	; (1f7e0 <ble_ll_adv_set_sched+0x50>)
   1f7c2:	781b      	ldrb	r3, [r3, #0]
   1f7c4:	1aeb      	subs	r3, r5, r3
   1f7c6:	66a3      	str	r3, [r4, #104]	; 0x68
    sch->remainder = 0;
   1f7c8:	2300      	movs	r3, #0
   1f7ca:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66

/* Convert usecs to ticks and round up to nearest tick */
static inline uint32_t
ble_ll_usecs_to_ticks_round_up(uint32_t usecs)
{
    return os_cputime_usecs_to_ticks(usecs + 30);
   1f7ce:	301e      	adds	r0, #30
   1f7d0:	f7f1 f958 	bl	10a84 <os_cputime_usecs_to_ticks>
    sch->end_time = advsm->adv_pdu_start_time +
   1f7d4:	4428      	add	r0, r5
   1f7d6:	66e0      	str	r0, [r4, #108]	; 0x6c
}
   1f7d8:	bd38      	pop	{r3, r4, r5, pc}
   1f7da:	bf00      	nop
   1f7dc:	0001f929 	.word	0x0001f929
   1f7e0:	200042ac 	.word	0x200042ac

0001f7e4 <ble_ll_adv_sm_start>:
{
   1f7e4:	b538      	push	{r3, r4, r5, lr}
   1f7e6:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1f7e8:	f7f0 fe2e 	bl	10448 <os_arch_save_sr>
    advsm->flags &= ~flags;
   1f7ec:	8963      	ldrh	r3, [r4, #10]
   1f7ee:	f023 030b 	bic.w	r3, r3, #11
   1f7f2:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1f7f4:	f7f0 fe2e 	bl	10454 <os_arch_restore_sr>
    if (advsm->own_addr_type == BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1f7f8:	7923      	ldrb	r3, [r4, #4]
   1f7fa:	2b01      	cmp	r3, #1
   1f7fc:	d00f      	beq.n	1f81e <ble_ll_adv_sm_start+0x3a>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1f7fe:	89a3      	ldrh	r3, [r4, #12]
   1f800:	f013 0f01 	tst.w	r3, #1
   1f804:	d001      	beq.n	1f80a <ble_ll_adv_sm_start+0x26>
        if (advsm->conn_comp_ev == NULL) {
   1f806:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1f808:	b183      	cbz	r3, 1f82c <ble_ll_adv_sm_start+0x48>
    if ((advsm->own_addr_type & 1) == 0) {
   1f80a:	7923      	ldrb	r3, [r4, #4]
   1f80c:	f013 0f01 	tst.w	r3, #1
   1f810:	d013      	beq.n	1f83a <ble_ll_adv_sm_start+0x56>
        advsm->flags |= BLE_LL_ADV_SM_FLAG_TX_ADD;
   1f812:	8962      	ldrh	r2, [r4, #10]
   1f814:	f042 0201 	orr.w	r2, r2, #1
   1f818:	8162      	strh	r2, [r4, #10]
        addr = g_random_addr;
   1f81a:	4a2c      	ldr	r2, [pc, #176]	; (1f8cc <ble_ll_adv_sm_start+0xe8>)
   1f81c:	e00e      	b.n	1f83c <ble_ll_adv_sm_start+0x58>
        if (!ble_ll_is_valid_random_addr(g_random_addr)) {
   1f81e:	482b      	ldr	r0, [pc, #172]	; (1f8cc <ble_ll_adv_sm_start+0xe8>)
   1f820:	f7ff fc62 	bl	1f0e8 <ble_ll_is_valid_random_addr>
   1f824:	2800      	cmp	r0, #0
   1f826:	d1ea      	bne.n	1f7fe <ble_ll_adv_sm_start+0x1a>
            return BLE_ERR_CMD_DISALLOWED;
   1f828:	200c      	movs	r0, #12
   1f82a:	e031      	b.n	1f890 <ble_ll_adv_sm_start+0xac>
            evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1f82c:	2002      	movs	r0, #2
   1f82e:	f7fd ff83 	bl	1d738 <ble_hci_trans_buf_alloc>
            if (!evbuf) {
   1f832:	2800      	cmp	r0, #0
   1f834:	d048      	beq.n	1f8c8 <ble_ll_adv_sm_start+0xe4>
            advsm->conn_comp_ev = evbuf;
   1f836:	6520      	str	r0, [r4, #80]	; 0x50
   1f838:	e7e7      	b.n	1f80a <ble_ll_adv_sm_start+0x26>
        addr = g_dev_addr;
   1f83a:	4a25      	ldr	r2, [pc, #148]	; (1f8d0 <ble_ll_adv_sm_start+0xec>)
    memcpy(advsm->adva, addr, BLE_DEV_ADDR_LEN);
   1f83c:	6811      	ldr	r1, [r2, #0]
   1f83e:	62a1      	str	r1, [r4, #40]	; 0x28
   1f840:	8892      	ldrh	r2, [r2, #4]
   1f842:	85a2      	strh	r2, [r4, #44]	; 0x2c
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1f844:	89a2      	ldrh	r2, [r4, #12]
   1f846:	f012 0f04 	tst.w	r2, #4
   1f84a:	d122      	bne.n	1f892 <ble_ll_adv_sm_start+0xae>
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1f84c:	2b01      	cmp	r3, #1
   1f84e:	d830      	bhi.n	1f8b2 <ble_ll_adv_sm_start+0xce>
    advsm->adv_enabled = 1;
   1f850:	2301      	movs	r3, #1
   1f852:	7023      	strb	r3, [r4, #0]
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1f854:	89a3      	ldrh	r3, [r4, #12]
   1f856:	f013 0f08 	tst.w	r3, #8
   1f85a:	d02e      	beq.n	1f8ba <ble_ll_adv_sm_start+0xd6>
        advsm->adv_itvl_usecs = BLE_LL_ADV_PDU_ITVL_HD_MS_MAX;
   1f85c:	f640 63a6 	movw	r3, #3750	; 0xea6
   1f860:	6163      	str	r3, [r4, #20]
    adv_chan = ble_ll_adv_first_chan(advsm);
   1f862:	4620      	mov	r0, r4
   1f864:	f7ff ff0c 	bl	1f680 <ble_ll_adv_first_chan>
    advsm->adv_chan = adv_chan;
   1f868:	71a0      	strb	r0, [r4, #6]
    advsm->adv_pdu_start_time = os_cputime_get32() +
   1f86a:	f7f1 f905 	bl	10a78 <os_cputime_get32>
   1f86e:	4605      	mov	r5, r0
                                os_cputime_usecs_to_ticks(5000);
   1f870:	f241 3088 	movw	r0, #5000	; 0x1388
   1f874:	f7f1 f906 	bl	10a84 <os_cputime_usecs_to_ticks>
    advsm->adv_pdu_start_time = os_cputime_get32() +
   1f878:	4428      	add	r0, r5
   1f87a:	61e0      	str	r0, [r4, #28]
    ble_ll_adv_set_sched(advsm);
   1f87c:	4620      	mov	r0, r4
   1f87e:	f7ff ff87 	bl	1f790 <ble_ll_adv_set_sched>
    ble_ll_sched_adv_new(&advsm->adv_sch, ble_ll_adv_scheduled, NULL);
   1f882:	2200      	movs	r2, #0
   1f884:	4913      	ldr	r1, [pc, #76]	; (1f8d4 <ble_ll_adv_sm_start+0xf0>)
   1f886:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1f88a:	f007 fc63 	bl	27154 <ble_ll_sched_adv_new>
    return BLE_ERR_SUCCESS;
   1f88e:	2000      	movs	r0, #0
}
   1f890:	bd38      	pop	{r3, r4, r5, pc}
        memcpy(advsm->initiator_addr, advsm->peer_addr, BLE_DEV_ADDR_LEN);
   1f892:	4622      	mov	r2, r4
   1f894:	f852 1f34 	ldr.w	r1, [r2, #52]!
   1f898:	f8c4 103a 	str.w	r1, [r4, #58]	; 0x3a
   1f89c:	8892      	ldrh	r2, [r2, #4]
   1f89e:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if (advsm->peer_addr_type & 1) {
   1f8a0:	7962      	ldrb	r2, [r4, #5]
   1f8a2:	f012 0f01 	tst.w	r2, #1
   1f8a6:	d0d1      	beq.n	1f84c <ble_ll_adv_sm_start+0x68>
            advsm->flags |= BLE_LL_ADV_SM_FLAG_RX_ADD;
   1f8a8:	8962      	ldrh	r2, [r4, #10]
   1f8aa:	f042 0202 	orr.w	r2, r2, #2
   1f8ae:	8162      	strh	r2, [r4, #10]
   1f8b0:	e7cc      	b.n	1f84c <ble_ll_adv_sm_start+0x68>
        ble_ll_adv_rpa_update(advsm);
   1f8b2:	4620      	mov	r0, r4
   1f8b4:	f7ff ff00 	bl	1f6b8 <ble_ll_adv_rpa_update>
   1f8b8:	e7ca      	b.n	1f850 <ble_ll_adv_sm_start+0x6c>
        advsm->adv_itvl_usecs = (uint32_t)advsm->adv_itvl_max;
   1f8ba:	8a22      	ldrh	r2, [r4, #16]
        advsm->adv_itvl_usecs *= BLE_LL_ADV_ITVL;
   1f8bc:	f240 2371 	movw	r3, #625	; 0x271
   1f8c0:	fb03 f302 	mul.w	r3, r3, r2
   1f8c4:	6163      	str	r3, [r4, #20]
   1f8c6:	e7cc      	b.n	1f862 <ble_ll_adv_sm_start+0x7e>
                return BLE_ERR_MEM_CAPACITY;
   1f8c8:	2007      	movs	r0, #7
   1f8ca:	e7e1      	b.n	1f890 <ble_ll_adv_sm_start+0xac>
   1f8cc:	20003dc0 	.word	0x20003dc0
   1f8d0:	20003dc8 	.word	0x20003dc8
   1f8d4:	0001f765 	.word	0x0001f765

0001f8d8 <ble_ll_adv_tx_done>:
{
   1f8d8:	b510      	push	{r4, lr}
   1f8da:	4604      	mov	r4, r0
    ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   1f8dc:	2000      	movs	r0, #0
   1f8de:	f008 fcc7 	bl	28270 <ble_phy_txpwr_set>
                       advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK);
   1f8e2:	8963      	ldrh	r3, [r4, #10]
    assert(ble_ll_adv_active_chanset_is_pri(advsm));
   1f8e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
   1f8e8:	2b10      	cmp	r3, #16
   1f8ea:	d113      	bne.n	1f914 <ble_ll_adv_tx_done+0x3c>
    os_eventq_put(&evq->evq, &ev->ev);
   1f8ec:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1f8f0:	480b      	ldr	r0, [pc, #44]	; (1f920 <ble_ll_adv_tx_done+0x48>)
   1f8f2:	f7f1 f9d4 	bl	10c9e <os_eventq_put>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1f8f6:	2000      	movs	r0, #0
   1f8f8:	f7ff fd76 	bl	1f3e8 <ble_ll_state_set>
    OS_ENTER_CRITICAL(sr);
   1f8fc:	f7f0 fda4 	bl	10448 <os_arch_save_sr>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   1f900:	8963      	ldrh	r3, [r4, #10]
   1f902:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1f906:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1f908:	f7f0 fda4 	bl	10454 <os_arch_restore_sr>
    g_ble_ll_cur_adv_sm = NULL;
   1f90c:	4b05      	ldr	r3, [pc, #20]	; (1f924 <ble_ll_adv_tx_done+0x4c>)
   1f90e:	2200      	movs	r2, #0
   1f910:	601a      	str	r2, [r3, #0]
}
   1f912:	bd10      	pop	{r4, pc}
    assert(ble_ll_adv_active_chanset_is_pri(advsm));
   1f914:	2300      	movs	r3, #0
   1f916:	461a      	mov	r2, r3
   1f918:	4619      	mov	r1, r3
   1f91a:	4618      	mov	r0, r3
   1f91c:	f7f0 fe5e 	bl	105dc <__assert_func>
   1f920:	20003e4c 	.word	0x20003e4c
   1f924:	20003ee4 	.word	0x20003ee4

0001f928 <ble_ll_adv_tx_start_cb>:
{
   1f928:	b538      	push	{r3, r4, r5, lr}
   1f92a:	4605      	mov	r5, r0
    advsm = (struct ble_ll_adv_sm *)sch->cb_arg;
   1f92c:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_cur_adv_sm = advsm;
   1f92e:	4b33      	ldr	r3, [pc, #204]	; (1f9fc <ble_ll_adv_tx_start_cb+0xd4>)
   1f930:	601c      	str	r4, [r3, #0]
    OS_ENTER_CRITICAL(sr);
   1f932:	f7f0 fd89 	bl	10448 <os_arch_save_sr>
    assert((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   1f936:	8963      	ldrh	r3, [r4, #10]
   1f938:	f013 0f30 	tst.w	r3, #48	; 0x30
   1f93c:	d122      	bne.n	1f984 <ble_ll_adv_tx_start_cb+0x5c>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   1f93e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    advsm->flags |= 0x10;
   1f942:	f043 0310 	orr.w	r3, r3, #16
   1f946:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1f948:	f7f0 fd84 	bl	10454 <os_arch_restore_sr>
    if ((advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) ||
   1f94c:	8963      	ldrh	r3, [r4, #10]
   1f94e:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   1f952:	d111      	bne.n	1f978 <ble_ll_adv_tx_start_cb+0x50>
    ble_phy_txpwr_set(advsm->adv_txpwr);
   1f954:	f994 0009 	ldrsb.w	r0, [r4, #9]
   1f958:	f008 fc8a 	bl	28270 <ble_phy_txpwr_set>
    rc = ble_phy_setchan(advsm->adv_chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   1f95c:	4a28      	ldr	r2, [pc, #160]	; (1fa00 <ble_ll_adv_tx_start_cb+0xd8>)
   1f95e:	4929      	ldr	r1, [pc, #164]	; (1fa04 <ble_ll_adv_tx_start_cb+0xdc>)
   1f960:	79a0      	ldrb	r0, [r4, #6]
   1f962:	f008 fcb1 	bl	282c8 <ble_phy_setchan>
    assert(rc == 0);
   1f966:	b998      	cbnz	r0, 1f990 <ble_ll_adv_tx_start_cb+0x68>
    txstart = sch->start_time + g_ble_ll_sched_offset_ticks;
   1f968:	6868      	ldr	r0, [r5, #4]
   1f96a:	4b27      	ldr	r3, [pc, #156]	; (1fa08 <ble_ll_adv_tx_start_cb+0xe0>)
   1f96c:	781b      	ldrb	r3, [r3, #0]
    rc = ble_phy_tx_set_start_time(txstart, sch->remainder);
   1f96e:	78a9      	ldrb	r1, [r5, #2]
   1f970:	4418      	add	r0, r3
   1f972:	f008 fec3 	bl	286fc <ble_phy_tx_set_start_time>
    if (rc) {
   1f976:	b188      	cbz	r0, 1f99c <ble_ll_adv_tx_start_cb+0x74>
    ble_ll_adv_tx_done(advsm);
   1f978:	4620      	mov	r0, r4
   1f97a:	f7ff ffad 	bl	1f8d8 <ble_ll_adv_tx_done>
    return BLE_LL_SCHED_STATE_DONE;
   1f97e:	2501      	movs	r5, #1
}
   1f980:	4628      	mov	r0, r5
   1f982:	bd38      	pop	{r3, r4, r5, pc}
    assert((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   1f984:	2300      	movs	r3, #0
   1f986:	461a      	mov	r2, r3
   1f988:	4619      	mov	r1, r3
   1f98a:	4618      	mov	r0, r3
   1f98c:	f7f0 fe26 	bl	105dc <__assert_func>
    assert(rc == 0);
   1f990:	2300      	movs	r3, #0
   1f992:	461a      	mov	r2, r3
   1f994:	4619      	mov	r1, r3
   1f996:	4618      	mov	r0, r3
   1f998:	f7f0 fe20 	bl	105dc <__assert_func>
    ble_phy_encrypt_disable();
   1f99c:	f008 fc24 	bl	281e8 <ble_phy_encrypt_disable>
    advsm->adv_rpa_index = -1;
   1f9a0:	23ff      	movs	r3, #255	; 0xff
   1f9a2:	7223      	strb	r3, [r4, #8]
    if (ble_ll_resolv_enabled()) {
   1f9a4:	f005 ff0a 	bl	257bc <ble_ll_resolv_enabled>
   1f9a8:	b1e0      	cbz	r0, 1f9e4 <ble_ll_adv_tx_start_cb+0xbc>
        ble_phy_resolv_list_enable();
   1f9aa:	f008 ff55 	bl	28858 <ble_phy_resolv_list_enable>
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
   1f9ae:	89a3      	ldrh	r3, [r4, #12]
   1f9b0:	f013 0f10 	tst.w	r3, #16
   1f9b4:	d002      	beq.n	1f9bc <ble_ll_adv_tx_start_cb+0x94>
   1f9b6:	f013 0f03 	tst.w	r3, #3
   1f9ba:	d116      	bne.n	1f9ea <ble_ll_adv_tx_start_cb+0xc2>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   1f9bc:	4621      	mov	r1, r4
   1f9be:	4813      	ldr	r0, [pc, #76]	; (1fa0c <ble_ll_adv_tx_start_cb+0xe4>)
   1f9c0:	f008 fc28 	bl	28214 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_NONE;
   1f9c4:	2200      	movs	r2, #0
    rc = ble_phy_tx(ble_ll_adv_legacy_pdu_make, advsm, end_trans);
   1f9c6:	4621      	mov	r1, r4
   1f9c8:	4811      	ldr	r0, [pc, #68]	; (1fa10 <ble_ll_adv_tx_start_cb+0xe8>)
   1f9ca:	f008 feaf 	bl	2872c <ble_phy_tx>
    if (rc) {
   1f9ce:	4605      	mov	r5, r0
   1f9d0:	2800      	cmp	r0, #0
   1f9d2:	d1d1      	bne.n	1f978 <ble_ll_adv_tx_start_cb+0x50>
    if (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE) {
   1f9d4:	78e3      	ldrb	r3, [r4, #3]
   1f9d6:	b173      	cbz	r3, 1f9f6 <ble_ll_adv_tx_start_cb+0xce>
        ble_ll_whitelist_enable();
   1f9d8:	f007 feea 	bl	277b0 <ble_ll_whitelist_enable>
    ble_ll_state_set(BLE_LL_STATE_ADV);
   1f9dc:	2001      	movs	r0, #1
   1f9de:	f7ff fd03 	bl	1f3e8 <ble_ll_state_set>
    return BLE_LL_SCHED_STATE_RUNNING;
   1f9e2:	e7cd      	b.n	1f980 <ble_ll_adv_tx_start_cb+0x58>
        ble_phy_resolv_list_disable();
   1f9e4:	f008 ff48 	bl	28878 <ble_phy_resolv_list_disable>
   1f9e8:	e7e1      	b.n	1f9ae <ble_ll_adv_tx_start_cb+0x86>
        ble_phy_set_txend_cb(NULL, NULL);
   1f9ea:	2100      	movs	r1, #0
   1f9ec:	4608      	mov	r0, r1
   1f9ee:	f008 fc11 	bl	28214 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_TX_RX;
   1f9f2:	2202      	movs	r2, #2
        ble_phy_set_txend_cb(NULL, NULL);
   1f9f4:	e7e7      	b.n	1f9c6 <ble_ll_adv_tx_start_cb+0x9e>
        ble_ll_whitelist_disable();
   1f9f6:	f007 fedf 	bl	277b8 <ble_ll_whitelist_disable>
   1f9fa:	e7ef      	b.n	1f9dc <ble_ll_adv_tx_start_cb+0xb4>
   1f9fc:	20003ee4 	.word	0x20003ee4
   1fa00:	00555555 	.word	0x00555555
   1fa04:	8e89bed6 	.word	0x8e89bed6
   1fa08:	200042ac 	.word	0x200042ac
   1fa0c:	0001f8d9 	.word	0x0001f8d9
   1fa10:	0001fa15 	.word	0x0001fa15

0001fa14 <ble_ll_adv_legacy_pdu_make>:
{
   1fa14:	b570      	push	{r4, r5, r6, lr}
   1fa16:	460c      	mov	r4, r1
    adv_data_len = ADV_DATA_LEN(advsm);
   1fa18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1fa1a:	b333      	cbz	r3, 1fa6a <ble_ll_adv_legacy_pdu_make+0x56>
   1fa1c:	7c19      	ldrb	r1, [r3, #16]
    pdulen = BLE_DEV_ADDR_LEN + adv_data_len;
   1fa1e:	1d8d      	adds	r5, r1, #6
   1fa20:	b2ed      	uxtb	r5, r5
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1fa22:	89a3      	ldrh	r3, [r4, #12]
   1fa24:	f013 0f04 	tst.w	r3, #4
   1fa28:	d021      	beq.n	1fa6e <ble_ll_adv_legacy_pdu_make+0x5a>
        if (advsm->flags & BLE_LL_ADV_SM_FLAG_RX_ADD) {
   1fa2a:	8963      	ldrh	r3, [r4, #10]
   1fa2c:	f013 0f02 	tst.w	r3, #2
   1fa30:	d125      	bne.n	1fa7e <ble_ll_adv_legacy_pdu_make+0x6a>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_DIRECT_IND;
   1fa32:	2301      	movs	r3, #1
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   1fa34:	250c      	movs	r5, #12
        adv_data_len = 0;
   1fa36:	2100      	movs	r1, #0
    assert(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   1fa38:	291f      	cmp	r1, #31
   1fa3a:	d828      	bhi.n	1fa8e <ble_ll_adv_legacy_pdu_make+0x7a>
    advsm->adv_pdu_len = pdulen + BLE_LL_PDU_HDR_LEN;
   1fa3c:	1cae      	adds	r6, r5, #2
   1fa3e:	71e6      	strb	r6, [r4, #7]
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   1fa40:	8966      	ldrh	r6, [r4, #10]
   1fa42:	f016 0f01 	tst.w	r6, #1
   1fa46:	d001      	beq.n	1fa4c <ble_ll_adv_legacy_pdu_make+0x38>
        pdu_type |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1fa48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    *hdr_byte = pdu_type;
   1fa4c:	7013      	strb	r3, [r2, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   1fa4e:	4623      	mov	r3, r4
   1fa50:	f853 2f28 	ldr.w	r2, [r3, #40]!
   1fa54:	6002      	str	r2, [r0, #0]
   1fa56:	889b      	ldrh	r3, [r3, #4]
   1fa58:	8083      	strh	r3, [r0, #4]
    dptr += BLE_DEV_ADDR_LEN;
   1fa5a:	1d83      	adds	r3, r0, #6
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1fa5c:	89a2      	ldrh	r2, [r4, #12]
   1fa5e:	f012 0f04 	tst.w	r2, #4
   1fa62:	d11a      	bne.n	1fa9a <ble_ll_adv_legacy_pdu_make+0x86>
    if (adv_data_len != 0) {
   1fa64:	bb09      	cbnz	r1, 1faaa <ble_ll_adv_legacy_pdu_make+0x96>
}
   1fa66:	4628      	mov	r0, r5
   1fa68:	bd70      	pop	{r4, r5, r6, pc}
    adv_data_len = ADV_DATA_LEN(advsm);
   1fa6a:	2100      	movs	r1, #0
   1fa6c:	e7d7      	b.n	1fa1e <ble_ll_adv_legacy_pdu_make+0xa>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1fa6e:	f013 0f01 	tst.w	r3, #1
   1fa72:	d108      	bne.n	1fa86 <ble_ll_adv_legacy_pdu_make+0x72>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   1fa74:	f013 0f02 	tst.w	r3, #2
   1fa78:	d007      	beq.n	1fa8a <ble_ll_adv_legacy_pdu_make+0x76>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_SCAN_IND;
   1fa7a:	2306      	movs	r3, #6
   1fa7c:	e7dc      	b.n	1fa38 <ble_ll_adv_legacy_pdu_make+0x24>
            pdu_type |= BLE_ADV_PDU_HDR_RXADD_RAND;
   1fa7e:	2381      	movs	r3, #129	; 0x81
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   1fa80:	250c      	movs	r5, #12
        adv_data_len = 0;
   1fa82:	2100      	movs	r1, #0
   1fa84:	e7d8      	b.n	1fa38 <ble_ll_adv_legacy_pdu_make+0x24>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_IND;
   1fa86:	2300      	movs	r3, #0
   1fa88:	e7d6      	b.n	1fa38 <ble_ll_adv_legacy_pdu_make+0x24>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_NONCONN_IND;
   1fa8a:	2302      	movs	r3, #2
   1fa8c:	e7d4      	b.n	1fa38 <ble_ll_adv_legacy_pdu_make+0x24>
    assert(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   1fa8e:	2300      	movs	r3, #0
   1fa90:	461a      	mov	r2, r3
   1fa92:	4619      	mov	r1, r3
   1fa94:	4618      	mov	r0, r3
   1fa96:	f7f0 fda1 	bl	105dc <__assert_func>
        memcpy(dptr, advsm->initiator_addr, BLE_DEV_ADDR_LEN);
   1fa9a:	4622      	mov	r2, r4
   1fa9c:	f852 6f3a 	ldr.w	r6, [r2, #58]!
   1faa0:	f8c0 6006 	str.w	r6, [r0, #6]
   1faa4:	8892      	ldrh	r2, [r2, #4]
   1faa6:	809a      	strh	r2, [r3, #4]
   1faa8:	e7dc      	b.n	1fa64 <ble_ll_adv_legacy_pdu_make+0x50>
        os_mbuf_copydata(advsm->adv_data, 0, adv_data_len, dptr);
   1faaa:	460a      	mov	r2, r1
   1faac:	2100      	movs	r1, #0
   1faae:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1fab0:	f7f1 fb1c 	bl	110ec <os_mbuf_copydata>
   1fab4:	e7d7      	b.n	1fa66 <ble_ll_adv_legacy_pdu_make+0x52>

0001fab6 <ble_ll_adv_scan_rsp_legacy_pdu_make>:
{
   1fab6:	b538      	push	{r3, r4, r5, lr}
   1fab8:	460c      	mov	r4, r1
    scan_rsp_len = SCAN_RSP_DATA_LEN(advsm);
   1faba:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1fabc:	b1cb      	cbz	r3, 1faf2 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x3c>
   1fabe:	7c19      	ldrb	r1, [r3, #16]
    assert(scan_rsp_len <= BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN);
   1fac0:	291f      	cmp	r1, #31
   1fac2:	d810      	bhi.n	1fae6 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x30>
    pdulen = BLE_DEV_ADDR_LEN + scan_rsp_len;
   1fac4:	1d8d      	adds	r5, r1, #6
   1fac6:	b2ed      	uxtb	r5, r5
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   1fac8:	8963      	ldrh	r3, [r4, #10]
   1faca:	f013 0f01 	tst.w	r3, #1
   1face:	d112      	bne.n	1faf6 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x40>
    hdr = BLE_ADV_PDU_TYPE_SCAN_RSP;
   1fad0:	2304      	movs	r3, #4
    *hdr_byte = hdr;
   1fad2:	7013      	strb	r3, [r2, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   1fad4:	4622      	mov	r2, r4
   1fad6:	f852 3f28 	ldr.w	r3, [r2, #40]!
   1fada:	6003      	str	r3, [r0, #0]
   1fadc:	8893      	ldrh	r3, [r2, #4]
   1fade:	8083      	strh	r3, [r0, #4]
    if (scan_rsp_len != 0) {
   1fae0:	b959      	cbnz	r1, 1fafa <ble_ll_adv_scan_rsp_legacy_pdu_make+0x44>
}
   1fae2:	4628      	mov	r0, r5
   1fae4:	bd38      	pop	{r3, r4, r5, pc}
    assert(scan_rsp_len <= BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN);
   1fae6:	2300      	movs	r3, #0
   1fae8:	461a      	mov	r2, r3
   1faea:	4619      	mov	r1, r3
   1faec:	4618      	mov	r0, r3
   1faee:	f7f0 fd75 	bl	105dc <__assert_func>
    scan_rsp_len = SCAN_RSP_DATA_LEN(advsm);
   1faf2:	2100      	movs	r1, #0
   1faf4:	e7e6      	b.n	1fac4 <ble_ll_adv_scan_rsp_legacy_pdu_make+0xe>
        hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1faf6:	2344      	movs	r3, #68	; 0x44
   1faf8:	e7eb      	b.n	1fad2 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x1c>
        os_mbuf_copydata(advsm->scan_rsp_data, 0, scan_rsp_len,
   1fafa:	1d83      	adds	r3, r0, #6
   1fafc:	460a      	mov	r2, r1
   1fafe:	2100      	movs	r1, #0
   1fb00:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1fb02:	f7f1 faf3 	bl	110ec <os_mbuf_copydata>
   1fb06:	e7ec      	b.n	1fae2 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x2c>

0001fb08 <ble_ll_adv_drop_event>:
    return rc;
}

static void
ble_ll_adv_drop_event(struct ble_ll_adv_sm *advsm)
{
   1fb08:	b510      	push	{r4, lr}
   1fb0a:	4604      	mov	r4, r0
    STATS_INC(ble_ll_stats, adv_drop_event);

    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1fb0c:	3064      	adds	r0, #100	; 0x64
   1fb0e:	f007 fc6f 	bl	273f0 <ble_ll_sched_rmv_elem>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &advsm->adv_sec_txdone_ev);
    advsm->aux_active = 0;
#endif

    advsm->adv_chan = ble_ll_adv_final_chan(advsm);
   1fb12:	4620      	mov	r0, r4
   1fb14:	f7ff fdc1 	bl	1f69a <ble_ll_adv_final_chan>
   1fb18:	71a0      	strb	r0, [r4, #6]
   1fb1a:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1fb1e:	4802      	ldr	r0, [pc, #8]	; (1fb28 <ble_ll_adv_drop_event+0x20>)
   1fb20:	f7f1 f8bd 	bl	10c9e <os_eventq_put>
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &advsm->adv_txdone_ev);
}
   1fb24:	bd10      	pop	{r4, pc}
   1fb26:	bf00      	nop
   1fb28:	20003e4c 	.word	0x20003e4c

0001fb2c <ble_ll_adv_update_adv_scan_rsp_data>:
    if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) &&
   1fb2c:	8943      	ldrh	r3, [r0, #10]
   1fb2e:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   1fb32:	d029      	beq.n	1fb88 <ble_ll_adv_update_adv_scan_rsp_data+0x5c>
{
   1fb34:	b510      	push	{r4, lr}
   1fb36:	4604      	mov	r4, r0
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) {
   1fb38:	f413 7f00 	tst.w	r3, #512	; 0x200
   1fb3c:	d011      	beq.n	1fb62 <ble_ll_adv_update_adv_scan_rsp_data+0x36>
        if (advsm->new_adv_data) {
   1fb3e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1fb40:	b133      	cbz	r3, 1fb50 <ble_ll_adv_update_adv_scan_rsp_data+0x24>
            os_mbuf_free_chain(advsm->adv_data);
   1fb42:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1fb44:	f7f1 f9ca 	bl	10edc <os_mbuf_free_chain>
            advsm->adv_data = advsm->new_adv_data;
   1fb48:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1fb4a:	6423      	str	r3, [r4, #64]	; 0x40
            advsm->new_adv_data = NULL;
   1fb4c:	2300      	movs	r3, #0
   1fb4e:	6463      	str	r3, [r4, #68]	; 0x44
    OS_ENTER_CRITICAL(sr);
   1fb50:	f7f0 fc7a 	bl	10448 <os_arch_save_sr>
    advsm->flags &= ~flags;
   1fb54:	8963      	ldrh	r3, [r4, #10]
   1fb56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1fb5a:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1fb5c:	f7f0 fc7a 	bl	10454 <os_arch_restore_sr>
}
   1fb60:	bd10      	pop	{r4, pc}
    } else if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA) {
   1fb62:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1fb66:	d0fb      	beq.n	1fb60 <ble_ll_adv_update_adv_scan_rsp_data+0x34>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   1fb68:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1fb6a:	f7f1 f9b7 	bl	10edc <os_mbuf_free_chain>
        advsm->scan_rsp_data = advsm->new_scan_rsp_data;
   1fb6e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1fb70:	64a3      	str	r3, [r4, #72]	; 0x48
        advsm->new_scan_rsp_data = NULL;
   1fb72:	2300      	movs	r3, #0
   1fb74:	64e3      	str	r3, [r4, #76]	; 0x4c
    OS_ENTER_CRITICAL(sr);
   1fb76:	f7f0 fc67 	bl	10448 <os_arch_save_sr>
    advsm->flags &= ~flags;
   1fb7a:	8963      	ldrh	r3, [r4, #10]
   1fb7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   1fb80:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1fb82:	f7f0 fc67 	bl	10454 <os_arch_restore_sr>
   1fb86:	e7eb      	b.n	1fb60 <ble_ll_adv_update_adv_scan_rsp_data+0x34>
   1fb88:	4770      	bx	lr
	...

0001fb8c <ble_ll_adv_sm_stop>:
{
   1fb8c:	b538      	push	{r3, r4, r5, lr}
    if (advsm->adv_enabled) {
   1fb8e:	7803      	ldrb	r3, [r0, #0]
   1fb90:	b903      	cbnz	r3, 1fb94 <ble_ll_adv_sm_stop+0x8>
}
   1fb92:	bd38      	pop	{r3, r4, r5, pc}
   1fb94:	4604      	mov	r4, r0
        ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1fb96:	3064      	adds	r0, #100	; 0x64
   1fb98:	f007 fc2a 	bl	273f0 <ble_ll_sched_rmv_elem>
        OS_ENTER_CRITICAL(sr);
   1fb9c:	f7f0 fc54 	bl	10448 <os_arch_save_sr>
   1fba0:	4605      	mov	r5, r0
        if (ble_ll_state_get() == BLE_LL_STATE_ADV) {
   1fba2:	f7ff fc27 	bl	1f3f4 <ble_ll_state_get>
   1fba6:	2801      	cmp	r0, #1
   1fba8:	d01d      	beq.n	1fbe6 <ble_ll_adv_sm_stop+0x5a>
        ble_ll_sched_rfclk_chk_restart();
   1fbaa:	f007 fc6d 	bl	27488 <ble_ll_sched_rfclk_chk_restart>
        OS_EXIT_CRITICAL(sr);
   1fbae:	4628      	mov	r0, r5
   1fbb0:	f7f0 fc50 	bl	10454 <os_arch_restore_sr>
    os_eventq_remove(&evq->evq, &ev->ev);
   1fbb4:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1fbb8:	4811      	ldr	r0, [pc, #68]	; (1fc00 <ble_ll_adv_sm_stop+0x74>)
   1fbba:	f7f1 f8ed 	bl	10d98 <os_eventq_remove>
        if (advsm->conn_comp_ev) {
   1fbbe:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1fbc0:	b118      	cbz	r0, 1fbca <ble_ll_adv_sm_stop+0x3e>
            ble_hci_trans_buf_free(advsm->conn_comp_ev);
   1fbc2:	f7fd fde3 	bl	1d78c <ble_hci_trans_buf_free>
            advsm->conn_comp_ev = NULL;
   1fbc6:	2300      	movs	r3, #0
   1fbc8:	6523      	str	r3, [r4, #80]	; 0x50
    OS_ENTER_CRITICAL(sr);
   1fbca:	f7f0 fc3d 	bl	10448 <os_arch_save_sr>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   1fbce:	8963      	ldrh	r3, [r4, #10]
   1fbd0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1fbd4:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1fbd6:	f7f0 fc3d 	bl	10454 <os_arch_restore_sr>
        advsm->adv_enabled = 0;
   1fbda:	2300      	movs	r3, #0
   1fbdc:	7023      	strb	r3, [r4, #0]
        ble_ll_adv_update_adv_scan_rsp_data(advsm);
   1fbde:	4620      	mov	r0, r4
   1fbe0:	f7ff ffa4 	bl	1fb2c <ble_ll_adv_update_adv_scan_rsp_data>
}
   1fbe4:	e7d5      	b.n	1fb92 <ble_ll_adv_sm_stop+0x6>
            ble_phy_disable();
   1fbe6:	f008 fbbd 	bl	28364 <ble_phy_disable>
            ble_ll_wfr_disable();
   1fbea:	f7ff fb1d 	bl	1f228 <ble_ll_wfr_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1fbee:	2000      	movs	r0, #0
   1fbf0:	f7ff fbfa 	bl	1f3e8 <ble_ll_state_set>
            g_ble_ll_cur_adv_sm = NULL;
   1fbf4:	4b03      	ldr	r3, [pc, #12]	; (1fc04 <ble_ll_adv_sm_stop+0x78>)
   1fbf6:	2200      	movs	r2, #0
   1fbf8:	601a      	str	r2, [r3, #0]
            ble_ll_scan_chk_resume();
   1fbfa:	f006 fbe9 	bl	263d0 <ble_ll_scan_chk_resume>
   1fbfe:	e7d4      	b.n	1fbaa <ble_ll_adv_sm_stop+0x1e>
   1fc00:	20003e4c 	.word	0x20003e4c
   1fc04:	20003ee4 	.word	0x20003ee4

0001fc08 <ble_ll_adv_update_data_mbuf>:
{
   1fc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc0c:	4605      	mov	r5, r0
   1fc0e:	4617      	mov	r7, r2
   1fc10:	4698      	mov	r8, r3
   1fc12:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    om = *omp;
   1fc16:	6804      	ldr	r4, [r0, #0]
    if (new_data) {
   1fc18:	b149      	cbz	r1, 1fc2e <ble_ll_adv_update_data_mbuf+0x26>
        if (om) {
   1fc1a:	b114      	cbz	r4, 1fc22 <ble_ll_adv_update_data_mbuf+0x1a>
            os_mbuf_free_chain(om);
   1fc1c:	4620      	mov	r0, r4
   1fc1e:	f7f1 f95d 	bl	10edc <os_mbuf_free_chain>
        om = os_msys_get_pkthdr(datalen, 0);
   1fc22:	2100      	movs	r1, #0
   1fc24:	4630      	mov	r0, r6
   1fc26:	f7f1 fe6e 	bl	11906 <os_msys_get_pkthdr>
        if (!om) {
   1fc2a:	4604      	mov	r4, r0
   1fc2c:	b1c8      	cbz	r0, 1fc62 <ble_ll_adv_update_data_mbuf+0x5a>
    assert(om);
   1fc2e:	b174      	cbz	r4, 1fc4e <ble_ll_adv_update_data_mbuf+0x46>
    if (OS_MBUF_PKTLEN(om) + datalen > maxlen) {
   1fc30:	8a23      	ldrh	r3, [r4, #16]
   1fc32:	4433      	add	r3, r6
   1fc34:	42bb      	cmp	r3, r7
   1fc36:	dc10      	bgt.n	1fc5a <ble_ll_adv_update_data_mbuf+0x52>
    ret = os_mbuf_append(om, data, datalen);
   1fc38:	4632      	mov	r2, r6
   1fc3a:	4641      	mov	r1, r8
   1fc3c:	4620      	mov	r0, r4
   1fc3e:	f7f1 f969 	bl	10f14 <os_mbuf_append>
    if (ret) {
   1fc42:	b170      	cbz	r0, 1fc62 <ble_ll_adv_update_data_mbuf+0x5a>
        os_mbuf_free_chain(om);
   1fc44:	4620      	mov	r0, r4
   1fc46:	f7f1 f949 	bl	10edc <os_mbuf_free_chain>
        om = NULL;
   1fc4a:	2400      	movs	r4, #0
   1fc4c:	e009      	b.n	1fc62 <ble_ll_adv_update_data_mbuf+0x5a>
    assert(om);
   1fc4e:	2300      	movs	r3, #0
   1fc50:	461a      	mov	r2, r3
   1fc52:	4619      	mov	r1, r3
   1fc54:	4618      	mov	r0, r3
   1fc56:	f7f0 fcc1 	bl	105dc <__assert_func>
        os_mbuf_free_chain(om);
   1fc5a:	4620      	mov	r0, r4
   1fc5c:	f7f1 f93e 	bl	10edc <os_mbuf_free_chain>
        om = NULL;
   1fc60:	2400      	movs	r4, #0
    *omp = om;
   1fc62:	602c      	str	r4, [r5, #0]
}
   1fc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fc68 <ble_ll_adv_already_connected>:
{
   1fc68:	b570      	push	{r4, r5, r6, lr}
   1fc6a:	4605      	mov	r5, r0
   1fc6c:	460e      	mov	r6, r1
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   1fc6e:	4b10      	ldr	r3, [pc, #64]	; (1fcb0 <ble_ll_adv_already_connected+0x48>)
   1fc70:	681c      	ldr	r4, [r3, #0]
   1fc72:	e006      	b.n	1fc82 <ble_ll_adv_already_connected+0x1a>
                if (connsm->peer_addr_type & 1) {
   1fc74:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
   1fc78:	f013 0f01 	tst.w	r3, #1
   1fc7c:	d115      	bne.n	1fcaa <ble_ll_adv_already_connected+0x42>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   1fc7e:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   1fc82:	b184      	cbz	r4, 1fca6 <ble_ll_adv_already_connected+0x3e>
        if (!memcmp(&connsm->peer_addr, addr, BLE_DEV_ADDR_LEN)) {
   1fc84:	2206      	movs	r2, #6
   1fc86:	4629      	mov	r1, r5
   1fc88:	f104 0093 	add.w	r0, r4, #147	; 0x93
   1fc8c:	f7f2 fbf6 	bl	1247c <memcmp>
   1fc90:	2800      	cmp	r0, #0
   1fc92:	d1f4      	bne.n	1fc7e <ble_ll_adv_already_connected+0x16>
            if (addr_type == BLE_ADDR_RANDOM) {
   1fc94:	2e01      	cmp	r6, #1
   1fc96:	d0ed      	beq.n	1fc74 <ble_ll_adv_already_connected+0xc>
                if ((connsm->peer_addr_type & 1) == 0) {
   1fc98:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
   1fc9c:	f013 0f01 	tst.w	r3, #1
   1fca0:	d1ed      	bne.n	1fc7e <ble_ll_adv_already_connected+0x16>
                    return 1;
   1fca2:	2001      	movs	r0, #1
   1fca4:	e000      	b.n	1fca8 <ble_ll_adv_already_connected+0x40>
    return 0;
   1fca6:	2000      	movs	r0, #0
}
   1fca8:	bd70      	pop	{r4, r5, r6, pc}
                    return 1;
   1fcaa:	2001      	movs	r0, #1
   1fcac:	e7fc      	b.n	1fca8 <ble_ll_adv_already_connected+0x40>
   1fcae:	bf00      	nop
   1fcb0:	20004130 	.word	0x20004130

0001fcb4 <ble_ll_adv_rx_req>:
{
   1fcb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fcb8:	4607      	mov	r7, r0
   1fcba:	460e      	mov	r6, r1
    advsm = g_ble_ll_cur_adv_sm;
   1fcbc:	4b4d      	ldr	r3, [pc, #308]	; (1fdf4 <ble_ll_adv_rx_req+0x140>)
   1fcbe:	f8d3 8000 	ldr.w	r8, [r3]
    rxbuf = rxpdu->om_data;
   1fcc2:	680d      	ldr	r5, [r1, #0]
    if (memcmp(advsm->adva, adva, BLE_DEV_ADDR_LEN)) {
   1fcc4:	2206      	movs	r2, #6
   1fcc6:	f105 0108 	add.w	r1, r5, #8
   1fcca:	f108 0028 	add.w	r0, r8, #40	; 0x28
   1fcce:	f7f2 fbd5 	bl	1247c <memcmp>
   1fcd2:	2800      	cmp	r0, #0
   1fcd4:	f040 8084 	bne.w	1fde0 <ble_ll_adv_rx_req+0x12c>
   1fcd8:	4682      	mov	sl, r0
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   1fcda:	2f03      	cmp	r7, #3
   1fcdc:	d022      	beq.n	1fd24 <ble_ll_adv_rx_req+0x70>
        chk_wl = advsm->adv_filter_policy & 2;
   1fcde:	f898 4003 	ldrb.w	r4, [r8, #3]
   1fce2:	f004 0402 	and.w	r4, r4, #2
    if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   1fce6:	782b      	ldrb	r3, [r5, #0]
   1fce8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1fcec:	d01f      	beq.n	1fd2e <ble_ll_adv_rx_req+0x7a>
        txadd = BLE_ADDR_RANDOM;
   1fcee:	f04f 0901 	mov.w	r9, #1
    peer = rxbuf + BLE_LL_PDU_HDR_LEN;
   1fcf2:	3502      	adds	r5, #2
    if (ble_ll_resolv_enabled()) {
   1fcf4:	f005 fd62 	bl	257bc <ble_ll_resolv_enabled>
   1fcf8:	b9e0      	cbnz	r0, 1fd34 <ble_ll_adv_rx_req+0x80>
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   1fcfa:	2c00      	cmp	r4, #0
   1fcfc:	d155      	bne.n	1fdaa <ble_ll_adv_rx_req+0xf6>
    ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_DEVMATCH;
   1fcfe:	8b33      	ldrh	r3, [r6, #24]
   1fd00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1fd04:	8333      	strh	r3, [r6, #24]
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   1fd06:	2f03      	cmp	r7, #3
   1fd08:	d059      	beq.n	1fdbe <ble_ll_adv_rx_req+0x10a>
    } else if (pdu_type == BLE_ADV_PDU_TYPE_AUX_CONNECT_REQ) {
   1fd0a:	2f05      	cmp	r7, #5
   1fd0c:	d16b      	bne.n	1fde6 <ble_ll_adv_rx_req+0x132>
        if (ble_ll_adv_already_connected(peer, peer_addr_type)) {
   1fd0e:	4649      	mov	r1, r9
   1fd10:	4628      	mov	r0, r5
   1fd12:	f7ff ffa9 	bl	1fc68 <ble_ll_adv_already_connected>
   1fd16:	2800      	cmp	r0, #0
   1fd18:	d168      	bne.n	1fdec <ble_ll_adv_rx_req+0x138>
    rc = -1;
   1fd1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1fd1e:	4618      	mov	r0, r3
   1fd20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chk_wl = advsm->adv_filter_policy & 1;
   1fd24:	f898 4003 	ldrb.w	r4, [r8, #3]
   1fd28:	f004 0401 	and.w	r4, r4, #1
   1fd2c:	e7db      	b.n	1fce6 <ble_ll_adv_rx_req+0x32>
        txadd = BLE_ADDR_PUBLIC;
   1fd2e:	f04f 0900 	mov.w	r9, #0
   1fd32:	e7de      	b.n	1fcf2 <ble_ll_adv_rx_req+0x3e>
        if (ble_ll_is_rpa(peer, txadd)) {
   1fd34:	4649      	mov	r1, r9
   1fd36:	4628      	mov	r0, r5
   1fd38:	f7ff f9be 	bl	1f0b8 <ble_ll_is_rpa>
   1fd3c:	4683      	mov	fp, r0
   1fd3e:	b300      	cbz	r0, 1fd82 <ble_ll_adv_rx_req+0xce>
            advsm->adv_rpa_index = ble_hw_resolv_list_match();
   1fd40:	f007 ff68 	bl	27c14 <ble_hw_resolv_list_match>
   1fd44:	b240      	sxtb	r0, r0
   1fd46:	f888 0008 	strb.w	r0, [r8, #8]
            if (advsm->adv_rpa_index >= 0) {
   1fd4a:	2800      	cmp	r0, #0
   1fd4c:	db14      	blt.n	1fd78 <ble_ll_adv_rx_req+0xc4>
                ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_RESOLVED;
   1fd4e:	8b33      	ldrh	r3, [r6, #24]
   1fd50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1fd54:	8333      	strh	r3, [r6, #24]
                rl = &g_ble_ll_resolv_list[advsm->adv_rpa_index];
   1fd56:	f998 2008 	ldrsb.w	r2, [r8, #8]
                if (chk_wl) {
   1fd5a:	2c00      	cmp	r4, #0
   1fd5c:	d0cd      	beq.n	1fcfa <ble_ll_adv_rx_req+0x46>
                    peer = rl->rl_identity_addr;
   1fd5e:	2335      	movs	r3, #53	; 0x35
   1fd60:	fb03 f302 	mul.w	r3, r3, r2
   1fd64:	f103 0520 	add.w	r5, r3, #32
   1fd68:	4a23      	ldr	r2, [pc, #140]	; (1fdf8 <ble_ll_adv_rx_req+0x144>)
   1fd6a:	4415      	add	r5, r2
   1fd6c:	3503      	adds	r5, #3
                    peer_addr_type = rl->rl_addr_type;
   1fd6e:	f812 9003 	ldrb.w	r9, [r2, r3]
                    resolved = 1;
   1fd72:	f04f 0a01 	mov.w	sl, #1
   1fd76:	e7c0      	b.n	1fcfa <ble_ll_adv_rx_req+0x46>
                if (chk_wl) {
   1fd78:	2c00      	cmp	r4, #0
   1fd7a:	d0be      	beq.n	1fcfa <ble_ll_adv_rx_req+0x46>
                    return -1;
   1fd7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fd80:	e7cd      	b.n	1fd1e <ble_ll_adv_rx_req+0x6a>
            rl = ble_ll_resolv_list_find(peer, peer_addr_type);
   1fd82:	4649      	mov	r1, r9
   1fd84:	4628      	mov	r0, r5
   1fd86:	f005 fb5b 	bl	25440 <ble_ll_resolv_list_find>
            if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1fd8a:	b160      	cbz	r0, 1fda6 <ble_ll_adv_rx_req+0xf2>
   1fd8c:	7882      	ldrb	r2, [r0, #2]
   1fd8e:	b10a      	cbz	r2, 1fd94 <ble_ll_adv_rx_req+0xe0>
    resolved = 0;
   1fd90:	46da      	mov	sl, fp
   1fd92:	e7b2      	b.n	1fcfa <ble_ll_adv_rx_req+0x46>
                                ble_ll_resolv_irk_nonzero(rl->rl_peer_irk)) {
   1fd94:	3013      	adds	r0, #19
   1fd96:	f005 fb2d 	bl	253f4 <ble_ll_resolv_irk_nonzero>
            if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1fd9a:	4682      	mov	sl, r0
   1fd9c:	2800      	cmp	r0, #0
   1fd9e:	d0ac      	beq.n	1fcfa <ble_ll_adv_rx_req+0x46>
                return -1;
   1fda0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fda4:	e7bb      	b.n	1fd1e <ble_ll_adv_rx_req+0x6a>
    resolved = 0;
   1fda6:	46da      	mov	sl, fp
   1fda8:	e7a7      	b.n	1fcfa <ble_ll_adv_rx_req+0x46>
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   1fdaa:	4652      	mov	r2, sl
   1fdac:	4649      	mov	r1, r9
   1fdae:	4628      	mov	r0, r5
   1fdb0:	f007 fcb0 	bl	27714 <ble_ll_whitelist_match>
   1fdb4:	2800      	cmp	r0, #0
   1fdb6:	d1a2      	bne.n	1fcfe <ble_ll_adv_rx_req+0x4a>
        return -1;
   1fdb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fdbc:	e7af      	b.n	1fd1e <ble_ll_adv_rx_req+0x6a>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   1fdbe:	4641      	mov	r1, r8
   1fdc0:	480e      	ldr	r0, [pc, #56]	; (1fdfc <ble_ll_adv_rx_req+0x148>)
   1fdc2:	f008 fa27 	bl	28214 <ble_phy_set_txend_cb>
        rc = ble_phy_tx(ble_ll_adv_scan_rsp_legacy_pdu_make, advsm,
   1fdc6:	2200      	movs	r2, #0
   1fdc8:	4641      	mov	r1, r8
   1fdca:	480d      	ldr	r0, [pc, #52]	; (1fe00 <ble_ll_adv_rx_req+0x14c>)
   1fdcc:	f008 fcae 	bl	2872c <ble_phy_tx>
        if (!rc) {
   1fdd0:	4603      	mov	r3, r0
   1fdd2:	2800      	cmp	r0, #0
   1fdd4:	d1a3      	bne.n	1fd1e <ble_ll_adv_rx_req+0x6a>
            ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_SCAN_RSP_TXD;
   1fdd6:	8b32      	ldrh	r2, [r6, #24]
   1fdd8:	f042 0210 	orr.w	r2, r2, #16
   1fddc:	8332      	strh	r2, [r6, #24]
   1fdde:	e79e      	b.n	1fd1e <ble_ll_adv_rx_req+0x6a>
        return -1;
   1fde0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fde4:	e79b      	b.n	1fd1e <ble_ll_adv_rx_req+0x6a>
    rc = -1;
   1fde6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fdea:	e798      	b.n	1fd1e <ble_ll_adv_rx_req+0x6a>
            return -1;
   1fdec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fdf0:	e795      	b.n	1fd1e <ble_ll_adv_rx_req+0x6a>
   1fdf2:	bf00      	nop
   1fdf4:	20003ee4 	.word	0x20003ee4
   1fdf8:	20004160 	.word	0x20004160
   1fdfc:	0001f8d9 	.word	0x0001f8d9
   1fe00:	0001fab7 	.word	0x0001fab7

0001fe04 <ble_ll_adv_conn_req_rxd>:
{
   1fe04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   1fe08:	8993      	ldrh	r3, [r2, #12]
   1fe0a:	f013 0f10 	tst.w	r3, #16
   1fe0e:	d103      	bne.n	1fe18 <ble_ll_adv_conn_req_rxd+0x14>
        if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   1fe10:	8954      	ldrh	r4, [r2, #10]
   1fe12:	f014 0f08 	tst.w	r4, #8
   1fe16:	d069      	beq.n	1feec <ble_ll_adv_conn_req_rxd+0xe8>
    resolved = BLE_MBUF_HDR_RESOLVED(hdr);
   1fe18:	880c      	ldrh	r4, [r1, #0]
   1fe1a:	f404 6680 	and.w	r6, r4, #1024	; 0x400
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   1fe1e:	1c87      	adds	r7, r0, #2
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_DEVMATCH) {
   1fe20:	f014 0f40 	tst.w	r4, #64	; 0x40
   1fe24:	d064      	beq.n	1fef0 <ble_ll_adv_conn_req_rxd+0xec>
        if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   1fe26:	7804      	ldrb	r4, [r0, #0]
   1fe28:	f014 0f40 	tst.w	r4, #64	; 0x40
   1fe2c:	d019      	beq.n	1fe62 <ble_ll_adv_conn_req_rxd+0x5e>
            addr_type = BLE_ADDR_RANDOM;
   1fe2e:	f04f 0801 	mov.w	r8, #1
   1fe32:	4614      	mov	r4, r2
   1fe34:	4689      	mov	r9, r1
   1fe36:	4605      	mov	r5, r0
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1fe38:	f013 0f04 	tst.w	r3, #4
   1fe3c:	d01d      	beq.n	1fe7a <ble_ll_adv_conn_req_rxd+0x76>
            if (resolved) {
   1fe3e:	b19e      	cbz	r6, 1fe68 <ble_ll_adv_conn_req_rxd+0x64>
                ident_addr = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr;
   1fe40:	f992 2008 	ldrsb.w	r2, [r2, #8]
   1fe44:	2335      	movs	r3, #53	; 0x35
   1fe46:	fb03 f302 	mul.w	r3, r3, r2
   1fe4a:	f103 0120 	add.w	r1, r3, #32
   1fe4e:	4a2b      	ldr	r2, [pc, #172]	; (1fefc <ble_ll_adv_conn_req_rxd+0xf8>)
   1fe50:	4411      	add	r1, r2
   1fe52:	3103      	adds	r1, #3
                addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   1fe54:	f812 8003 	ldrb.w	r8, [r2, r3]
            if ((addr_type != advsm->peer_addr_type) ||
   1fe58:	7963      	ldrb	r3, [r4, #5]
   1fe5a:	4543      	cmp	r3, r8
   1fe5c:	d006      	beq.n	1fe6c <ble_ll_adv_conn_req_rxd+0x68>
   1fe5e:	2500      	movs	r5, #0
   1fe60:	e047      	b.n	1fef2 <ble_ll_adv_conn_req_rxd+0xee>
            addr_type = BLE_ADDR_PUBLIC;
   1fe62:	f04f 0800 	mov.w	r8, #0
   1fe66:	e7e4      	b.n	1fe32 <ble_ll_adv_conn_req_rxd+0x2e>
            ident_addr = inita;
   1fe68:	4639      	mov	r1, r7
   1fe6a:	e7f5      	b.n	1fe58 <ble_ll_adv_conn_req_rxd+0x54>
                memcmp(advsm->peer_addr, ident_addr, BLE_DEV_ADDR_LEN)) {
   1fe6c:	2206      	movs	r2, #6
   1fe6e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1fe72:	f7f2 fb03 	bl	1247c <memcmp>
            if ((addr_type != advsm->peer_addr_type) ||
   1fe76:	2800      	cmp	r0, #0
   1fe78:	d13e      	bne.n	1fef8 <ble_ll_adv_conn_req_rxd+0xf4>
        if (resolved) {
   1fe7a:	b9a6      	cbnz	r6, 1fea6 <ble_ll_adv_conn_req_rxd+0xa2>
                          !(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY));
   1fe7c:	89a3      	ldrh	r3, [r4, #12]
        valid = ble_ll_conn_slave_start(rxbuf, addr_type, hdr,
   1fe7e:	091b      	lsrs	r3, r3, #4
   1fe80:	f083 0301 	eor.w	r3, r3, #1
   1fe84:	f003 0301 	and.w	r3, r3, #1
   1fe88:	464a      	mov	r2, r9
   1fe8a:	4641      	mov	r1, r8
   1fe8c:	4628      	mov	r0, r5
   1fe8e:	f002 fabf 	bl	22410 <ble_ll_conn_slave_start>
        if (valid) {
   1fe92:	4605      	mov	r5, r0
   1fe94:	b368      	cbz	r0, 1fef2 <ble_ll_adv_conn_req_rxd+0xee>
            if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   1fe96:	8963      	ldrh	r3, [r4, #10]
   1fe98:	f013 0f08 	tst.w	r3, #8
   1fe9c:	d129      	bne.n	1fef2 <ble_ll_adv_conn_req_rxd+0xee>
                ble_ll_adv_sm_stop(advsm);
   1fe9e:	4620      	mov	r0, r4
   1fea0:	f7ff fe74 	bl	1fb8c <ble_ll_adv_sm_stop>
   1fea4:	e025      	b.n	1fef2 <ble_ll_adv_conn_req_rxd+0xee>
            memcpy(advsm->adv_rpa, inita, BLE_DEV_ADDR_LEN);
   1fea6:	683b      	ldr	r3, [r7, #0]
   1fea8:	f8c4 302e 	str.w	r3, [r4, #46]	; 0x2e
   1feac:	88bb      	ldrh	r3, [r7, #4]
   1feae:	8663      	strh	r3, [r4, #50]	; 0x32
            ble_ll_resolv_set_peer_rpa(advsm->adv_rpa_index, inita);
   1feb0:	4639      	mov	r1, r7
   1feb2:	f994 0008 	ldrsb.w	r0, [r4, #8]
   1feb6:	f005 fc07 	bl	256c8 <ble_ll_resolv_set_peer_rpa>
                   g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr,
   1feba:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1febe:	2235      	movs	r2, #53	; 0x35
   1fec0:	fb02 f303 	mul.w	r3, r2, r3
   1fec4:	3320      	adds	r3, #32
   1fec6:	490d      	ldr	r1, [pc, #52]	; (1fefc <ble_ll_adv_conn_req_rxd+0xf8>)
   1fec8:	440b      	add	r3, r1
            memcpy(inita,
   1feca:	f853 0f03 	ldr.w	r0, [r3, #3]!
   1fece:	f8c5 0002 	str.w	r0, [r5, #2]
   1fed2:	889b      	ldrh	r3, [r3, #4]
   1fed4:	80bb      	strh	r3, [r7, #4]
            addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   1fed6:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1feda:	fb02 f203 	mul.w	r2, r2, r3
   1fede:	f811 8002 	ldrb.w	r8, [r1, r2]
            addr_type += 2;
   1fee2:	f108 0802 	add.w	r8, r8, #2
   1fee6:	fa5f f888 	uxtb.w	r8, r8
   1feea:	e7c7      	b.n	1fe7c <ble_ll_adv_conn_req_rxd+0x78>
            return 0;
   1feec:	2500      	movs	r5, #0
   1feee:	e000      	b.n	1fef2 <ble_ll_adv_conn_req_rxd+0xee>
    valid = 0;
   1fef0:	2500      	movs	r5, #0
}
   1fef2:	4628      	mov	r0, r5
   1fef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1fef8:	2500      	movs	r5, #0
   1fefa:	e7fa      	b.n	1fef2 <ble_ll_adv_conn_req_rxd+0xee>
   1fefc:	20004160 	.word	0x20004160

0001ff00 <ble_ll_adv_sm_stop_timeout>:
{
   1ff00:	b510      	push	{r4, lr}
   1ff02:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1ff04:	8983      	ldrh	r3, [r0, #12]
   1ff06:	f013 0f08 	tst.w	r3, #8
   1ff0a:	d103      	bne.n	1ff14 <ble_ll_adv_sm_stop_timeout+0x14>
    ble_ll_adv_sm_stop(advsm);
   1ff0c:	4620      	mov	r0, r4
   1ff0e:	f7ff fe3d 	bl	1fb8c <ble_ll_adv_sm_stop>
}
   1ff12:	bd10      	pop	{r4, pc}
        ble_ll_conn_comp_event_send(NULL, BLE_ERR_DIR_ADV_TMO,
   1ff14:	4603      	mov	r3, r0
   1ff16:	6d02      	ldr	r2, [r0, #80]	; 0x50
   1ff18:	213c      	movs	r1, #60	; 0x3c
   1ff1a:	2000      	movs	r0, #0
   1ff1c:	f002 fc7b 	bl	22816 <ble_ll_conn_comp_event_send>
        advsm->conn_comp_ev = NULL;
   1ff20:	2300      	movs	r3, #0
   1ff22:	6523      	str	r3, [r4, #80]	; 0x50
   1ff24:	e7f2      	b.n	1ff0c <ble_ll_adv_sm_stop_timeout+0xc>
	...

0001ff28 <ble_ll_adv_reschedule_event>:

static void
ble_ll_adv_reschedule_event(struct ble_ll_adv_sm *advsm)
{
   1ff28:	b510      	push	{r4, lr}
   1ff2a:	b082      	sub	sp, #8
    int rc;
    uint32_t start_time;
    uint32_t max_delay_ticks;

    assert(advsm->adv_enabled);
   1ff2c:	7803      	ldrb	r3, [r0, #0]
   1ff2e:	b1b3      	cbz	r3, 1ff5e <ble_ll_adv_reschedule_event+0x36>
   1ff30:	4604      	mov	r4, r0

    if (!advsm->adv_sch.enqueued) {
   1ff32:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
   1ff36:	b983      	cbnz	r3, 1ff5a <ble_ll_adv_reschedule_event+0x32>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1ff38:	8983      	ldrh	r3, [r0, #12]
   1ff3a:	f013 0f08 	tst.w	r3, #8
   1ff3e:	d013      	beq.n	1ff68 <ble_ll_adv_reschedule_event+0x40>
            max_delay_ticks = 0;
   1ff40:	2200      	movs	r2, #0
        } else {
            max_delay_ticks =
                    os_cputime_usecs_to_ticks(BLE_LL_ADV_DELAY_MS_MAX * 1000);
        }

        rc = ble_ll_sched_adv_reschedule(&advsm->adv_sch, &start_time,
   1ff42:	a901      	add	r1, sp, #4
   1ff44:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1ff48:	f007 f966 	bl	27218 <ble_ll_sched_adv_reschedule>
                                         max_delay_ticks);
        if (rc) {
   1ff4c:	b990      	cbnz	r0, 1ff74 <ble_ll_adv_reschedule_event+0x4c>
            ble_ll_adv_drop_event(advsm);
            return;
        }

        start_time += g_ble_ll_sched_offset_ticks;
   1ff4e:	4b0b      	ldr	r3, [pc, #44]	; (1ff7c <ble_ll_adv_reschedule_event+0x54>)
   1ff50:	781b      	ldrb	r3, [r3, #0]
   1ff52:	9a01      	ldr	r2, [sp, #4]
   1ff54:	4413      	add	r3, r2
        advsm->adv_event_start_time = start_time;
   1ff56:	61a3      	str	r3, [r4, #24]
        advsm->adv_pdu_start_time = start_time;
   1ff58:	61e3      	str	r3, [r4, #28]
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
                                                        !advsm->aux_active) {
        ble_ll_adv_aux_schedule(advsm);
    }
#endif
}
   1ff5a:	b002      	add	sp, #8
   1ff5c:	bd10      	pop	{r4, pc}
    assert(advsm->adv_enabled);
   1ff5e:	461a      	mov	r2, r3
   1ff60:	4619      	mov	r1, r3
   1ff62:	4618      	mov	r0, r3
   1ff64:	f7f0 fb3a 	bl	105dc <__assert_func>
            max_delay_ticks =
   1ff68:	f242 7010 	movw	r0, #10000	; 0x2710
   1ff6c:	f7f0 fd8a 	bl	10a84 <os_cputime_usecs_to_ticks>
   1ff70:	4602      	mov	r2, r0
   1ff72:	e7e6      	b.n	1ff42 <ble_ll_adv_reschedule_event+0x1a>
            ble_ll_adv_drop_event(advsm);
   1ff74:	4620      	mov	r0, r4
   1ff76:	f7ff fdc7 	bl	1fb08 <ble_ll_adv_drop_event>
   1ff7a:	e7ee      	b.n	1ff5a <ble_ll_adv_reschedule_event+0x32>
   1ff7c:	200042ac 	.word	0x200042ac

0001ff80 <ble_ll_adv_sm_init>:
    return 0;
}

static void
ble_ll_adv_sm_init(struct ble_ll_adv_sm *advsm)
{
   1ff80:	b538      	push	{r3, r4, r5, lr}
   1ff82:	4604      	mov	r4, r0
    uint8_t i = advsm->adv_instance;
   1ff84:	7845      	ldrb	r5, [r0, #1]

    memset(advsm, 0, sizeof(struct ble_ll_adv_sm));
   1ff86:	2280      	movs	r2, #128	; 0x80
   1ff88:	2100      	movs	r1, #0
   1ff8a:	f7f2 fac4 	bl	12516 <memset>

    advsm->adv_instance = i;
   1ff8e:	7065      	strb	r5, [r4, #1]
    advsm->adv_itvl_min = BLE_HCI_ADV_ITVL_DEF;
   1ff90:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1ff94:	81e3      	strh	r3, [r4, #14]
    advsm->adv_itvl_max = BLE_HCI_ADV_ITVL_DEF;
   1ff96:	8223      	strh	r3, [r4, #16]
    advsm->adv_chanmask = BLE_HCI_ADV_CHANMASK_DEF;
   1ff98:	2307      	movs	r3, #7
   1ff9a:	70a3      	strb	r3, [r4, #2]
    memset(ev, 0, sizeof(*ev));
   1ff9c:	2300      	movs	r3, #0
   1ff9e:	6563      	str	r3, [r4, #84]	; 0x54
   1ffa0:	6623      	str	r3, [r4, #96]	; 0x60
    ev->ev.ev_queued = 0;
   1ffa2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    ev->ev.ev_cb = (os_event_fn *)fn;
   1ffa6:	4b03      	ldr	r3, [pc, #12]	; (1ffb4 <ble_ll_adv_sm_init+0x34>)
   1ffa8:	65a3      	str	r3, [r4, #88]	; 0x58
    ev->ev.ev_arg = arg;
   1ffaa:	65e4      	str	r4, [r4, #92]	; 0x5c
#endif
#endif

    /* Configure instances to be legacy on start */
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE;
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY;
   1ffac:	2312      	movs	r3, #18
   1ffae:	81a3      	strh	r3, [r4, #12]
}
   1ffb0:	bd38      	pop	{r3, r4, r5, pc}
   1ffb2:	bf00      	nop
   1ffb4:	0002010b 	.word	0x0002010b

0001ffb8 <ble_ll_adv_chk_rpa_timeout>:
    if (advsm->own_addr_type < BLE_HCI_ADV_OWN_ADDR_PRIV_PUB) {
   1ffb8:	7903      	ldrb	r3, [r0, #4]
   1ffba:	2b01      	cmp	r3, #1
   1ffbc:	d903      	bls.n	1ffc6 <ble_ll_adv_chk_rpa_timeout+0xe>
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO) {
   1ffbe:	8943      	ldrh	r3, [r0, #10]
   1ffc0:	f413 7f80 	tst.w	r3, #256	; 0x100
   1ffc4:	d100      	bne.n	1ffc8 <ble_ll_adv_chk_rpa_timeout+0x10>
   1ffc6:	4770      	bx	lr
{
   1ffc8:	b510      	push	{r4, lr}
   1ffca:	4604      	mov	r4, r0
        ble_ll_adv_rpa_update(advsm);
   1ffcc:	f7ff fb74 	bl	1f6b8 <ble_ll_adv_rpa_update>
    OS_ENTER_CRITICAL(sr);
   1ffd0:	f7f0 fa3a 	bl	10448 <os_arch_save_sr>
    advsm->flags &= ~flags;
   1ffd4:	8963      	ldrh	r3, [r4, #10]
   1ffd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1ffda:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1ffdc:	f7f0 fa3a 	bl	10454 <os_arch_restore_sr>
}
   1ffe0:	bd10      	pop	{r4, pc}
	...

0001ffe4 <ble_ll_adv_done>:
{
   1ffe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(advsm->adv_enabled);
   1ffe8:	7803      	ldrb	r3, [r0, #0]
   1ffea:	2b00      	cmp	r3, #0
   1ffec:	d03e      	beq.n	2006c <ble_ll_adv_done+0x88>
   1ffee:	4604      	mov	r4, r0
    ble_ll_adv_update_adv_scan_rsp_data(advsm);
   1fff0:	f7ff fd9c 	bl	1fb2c <ble_ll_adv_update_adv_scan_rsp_data>
    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1fff4:	f104 0564 	add.w	r5, r4, #100	; 0x64
   1fff8:	4628      	mov	r0, r5
   1fffa:	f007 f9f9 	bl	273f0 <ble_ll_sched_rmv_elem>
    os_eventq_remove(&evq->evq, &ev->ev);
   1fffe:	f104 0654 	add.w	r6, r4, #84	; 0x54
   20002:	4631      	mov	r1, r6
   20004:	4832      	ldr	r0, [pc, #200]	; (200d0 <ble_ll_adv_done+0xec>)
   20006:	f7f0 fec7 	bl	10d98 <os_eventq_remove>
    final_adv_chan = ble_ll_adv_final_chan(advsm);
   2000a:	4620      	mov	r0, r4
   2000c:	f7ff fb45 	bl	1f69a <ble_ll_adv_final_chan>
    if (advsm->adv_chan == final_adv_chan) {
   20010:	79a3      	ldrb	r3, [r4, #6]
   20012:	4283      	cmp	r3, r0
   20014:	d02f      	beq.n	20076 <ble_ll_adv_done+0x92>
        ++advsm->adv_chan;
   20016:	3301      	adds	r3, #1
   20018:	b2db      	uxtb	r3, r3
   2001a:	71a3      	strb	r3, [r4, #6]
        mask = 1 << (advsm->adv_chan - BLE_PHY_ADV_CHAN_START);
   2001c:	f1a3 0125 	sub.w	r1, r3, #37	; 0x25
   20020:	2201      	movs	r2, #1
   20022:	408a      	lsls	r2, r1
        if ((mask & advsm->adv_chanmask) == 0) {
   20024:	78a1      	ldrb	r1, [r4, #2]
   20026:	420a      	tst	r2, r1
   20028:	d101      	bne.n	2002e <ble_ll_adv_done+0x4a>
            ++advsm->adv_chan;
   2002a:	3301      	adds	r3, #1
   2002c:	71a3      	strb	r3, [r4, #6]
        advsm->adv_pdu_start_time = os_cputime_get32() +
   2002e:	f7f0 fd23 	bl	10a78 <os_cputime_get32>
   20032:	4b28      	ldr	r3, [pc, #160]	; (200d4 <ble_ll_adv_done+0xf0>)
   20034:	781b      	ldrb	r3, [r3, #0]
   20036:	4418      	add	r0, r3
   20038:	61e0      	str	r0, [r4, #28]
        resched_pdu = 1;
   2003a:	2701      	movs	r7, #1
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   2003c:	89a3      	ldrh	r3, [r4, #12]
   2003e:	f013 0f08 	tst.w	r3, #8
   20042:	d003      	beq.n	2004c <ble_ll_adv_done+0x68>
            (advsm->adv_pdu_start_time >= advsm->adv_end_time)) {
   20044:	69e2      	ldr	r2, [r4, #28]
   20046:	6a23      	ldr	r3, [r4, #32]
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   20048:	429a      	cmp	r2, r3
   2004a:	d237      	bcs.n	200bc <ble_ll_adv_done+0xd8>
    ble_ll_adv_chk_rpa_timeout(advsm);
   2004c:	4620      	mov	r0, r4
   2004e:	f7ff ffb3 	bl	1ffb8 <ble_ll_adv_chk_rpa_timeout>
    ble_ll_adv_set_sched(advsm);
   20052:	4620      	mov	r0, r4
   20054:	f7ff fb9c 	bl	1f790 <ble_ll_adv_set_sched>
    if (!resched_pdu) {
   20058:	b3a7      	cbz	r7, 200c4 <ble_ll_adv_done+0xe0>
    rc = ble_ll_sched_adv_resched_pdu(&advsm->adv_sch);
   2005a:	4628      	mov	r0, r5
   2005c:	f007 f992 	bl	27384 <ble_ll_sched_adv_resched_pdu>
    if (rc) {
   20060:	b398      	cbz	r0, 200ca <ble_ll_adv_done+0xe6>
    os_eventq_put(&evq->evq, &ev->ev);
   20062:	4631      	mov	r1, r6
   20064:	481a      	ldr	r0, [pc, #104]	; (200d0 <ble_ll_adv_done+0xec>)
   20066:	f7f0 fe1a 	bl	10c9e <os_eventq_put>
   2006a:	e02e      	b.n	200ca <ble_ll_adv_done+0xe6>
    assert(advsm->adv_enabled);
   2006c:	461a      	mov	r2, r3
   2006e:	4619      	mov	r1, r3
   20070:	4618      	mov	r0, r3
   20072:	f7f0 fab3 	bl	105dc <__assert_func>
        ble_ll_scan_chk_resume();
   20076:	f006 f9ab 	bl	263d0 <ble_ll_scan_chk_resume>
        ble_ll_sched_rfclk_chk_restart();
   2007a:	f007 fa05 	bl	27488 <ble_ll_sched_rfclk_chk_restart>
        advsm->adv_chan = ble_ll_adv_first_chan(advsm);
   2007e:	4620      	mov	r0, r4
   20080:	f7ff fafe 	bl	1f680 <ble_ll_adv_first_chan>
   20084:	71a0      	strb	r0, [r4, #6]
        tick_itvl = os_cputime_usecs_to_ticks(itvl);
   20086:	6960      	ldr	r0, [r4, #20]
   20088:	f7f0 fcfc 	bl	10a84 <os_cputime_usecs_to_ticks>
   2008c:	4680      	mov	r8, r0
        advsm->adv_event_start_time += tick_itvl;
   2008e:	69a0      	ldr	r0, [r4, #24]
   20090:	4440      	add	r0, r8
   20092:	61a0      	str	r0, [r4, #24]
        advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   20094:	61e0      	str	r0, [r4, #28]
        start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   20096:	4b0f      	ldr	r3, [pc, #60]	; (200d4 <ble_ll_adv_done+0xf0>)
   20098:	781f      	ldrb	r7, [r3, #0]
   2009a:	1bc7      	subs	r7, r0, r7
        delta_t = (int32_t)(start_time - os_cputime_get32());
   2009c:	f7f0 fcec 	bl	10a78 <os_cputime_get32>
        if (delta_t < 0) {
   200a0:	1a38      	subs	r0, r7, r0
   200a2:	d401      	bmi.n	200a8 <ble_ll_adv_done+0xc4>
        resched_pdu = 0;
   200a4:	2700      	movs	r7, #0
   200a6:	e7c9      	b.n	2003c <ble_ll_adv_done+0x58>
            while (delta_t < 0) {
   200a8:	2800      	cmp	r0, #0
   200aa:	da05      	bge.n	200b8 <ble_ll_adv_done+0xd4>
                advsm->adv_event_start_time += tick_itvl;
   200ac:	69a3      	ldr	r3, [r4, #24]
   200ae:	4443      	add	r3, r8
   200b0:	61a3      	str	r3, [r4, #24]
                advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   200b2:	61e3      	str	r3, [r4, #28]
                delta_t += (int32_t)tick_itvl;
   200b4:	4440      	add	r0, r8
   200b6:	e7f7      	b.n	200a8 <ble_ll_adv_done+0xc4>
        resched_pdu = 0;
   200b8:	2700      	movs	r7, #0
   200ba:	e7bf      	b.n	2003c <ble_ll_adv_done+0x58>
        ble_ll_adv_sm_stop_timeout(advsm);
   200bc:	4620      	mov	r0, r4
   200be:	f7ff ff1f 	bl	1ff00 <ble_ll_adv_sm_stop_timeout>
        return;
   200c2:	e002      	b.n	200ca <ble_ll_adv_done+0xe6>
        ble_ll_adv_reschedule_event(advsm);
   200c4:	4620      	mov	r0, r4
   200c6:	f7ff ff2f 	bl	1ff28 <ble_ll_adv_reschedule_event>
}
   200ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   200ce:	bf00      	nop
   200d0:	20003e4c 	.word	0x20003e4c
   200d4:	200042ac 	.word	0x200042ac

000200d8 <ble_ll_adv_make_done>:
{
   200d8:	b510      	push	{r4, lr}
    return (advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0x10;
   200da:	8943      	ldrh	r3, [r0, #10]
    assert(ble_ll_adv_active_chanset_is_pri(advsm));
   200dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
   200e0:	2b10      	cmp	r3, #16
   200e2:	d10c      	bne.n	200fe <ble_ll_adv_make_done+0x26>
   200e4:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   200e6:	f7f0 f9af 	bl	10448 <os_arch_save_sr>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   200ea:	8963      	ldrh	r3, [r4, #10]
   200ec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   200f0:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   200f2:	f7f0 f9af 	bl	10454 <os_arch_restore_sr>
    ble_ll_adv_done(advsm);
   200f6:	4620      	mov	r0, r4
   200f8:	f7ff ff74 	bl	1ffe4 <ble_ll_adv_done>
}
   200fc:	bd10      	pop	{r4, pc}
    assert(ble_ll_adv_active_chanset_is_pri(advsm));
   200fe:	2300      	movs	r3, #0
   20100:	461a      	mov	r2, r3
   20102:	4619      	mov	r1, r3
   20104:	4618      	mov	r0, r3
   20106:	f7f0 fa69 	bl	105dc <__assert_func>

0002010a <ble_ll_adv_event_done>:
{
   2010a:	b508      	push	{r3, lr}
    ble_ll_adv_done(ble_npl_event_get_arg(ev));
   2010c:	6880      	ldr	r0, [r0, #8]
   2010e:	f7ff ff69 	bl	1ffe4 <ble_ll_adv_done>
}
   20112:	bd08      	pop	{r3, pc}

00020114 <ble_ll_adv_rpa_timeout>:
{
   20114:	b510      	push	{r4, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   20116:	2400      	movs	r4, #0
   20118:	2c00      	cmp	r4, #0
   2011a:	dd00      	ble.n	2011e <ble_ll_adv_rpa_timeout+0xa>
}
   2011c:	bd10      	pop	{r4, pc}
        if (advsm->adv_enabled &&
   2011e:	01e3      	lsls	r3, r4, #7
   20120:	4a0a      	ldr	r2, [pc, #40]	; (2014c <ble_ll_adv_rpa_timeout+0x38>)
   20122:	5cd3      	ldrb	r3, [r2, r3]
   20124:	b123      	cbz	r3, 20130 <ble_ll_adv_rpa_timeout+0x1c>
                advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   20126:	eb02 13c4 	add.w	r3, r2, r4, lsl #7
   2012a:	791b      	ldrb	r3, [r3, #4]
        if (advsm->adv_enabled &&
   2012c:	2b01      	cmp	r3, #1
   2012e:	d801      	bhi.n	20134 <ble_ll_adv_rpa_timeout+0x20>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   20130:	3401      	adds	r4, #1
   20132:	e7f1      	b.n	20118 <ble_ll_adv_rpa_timeout+0x4>
    OS_ENTER_CRITICAL(sr);
   20134:	f7f0 f988 	bl	10448 <os_arch_save_sr>
    advsm->flags |= flags;
   20138:	4b04      	ldr	r3, [pc, #16]	; (2014c <ble_ll_adv_rpa_timeout+0x38>)
   2013a:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
   2013e:	895a      	ldrh	r2, [r3, #10]
   20140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   20144:	815a      	strh	r2, [r3, #10]
    OS_EXIT_CRITICAL(sr);
   20146:	f7f0 f985 	bl	10454 <os_arch_restore_sr>
   2014a:	e7f1      	b.n	20130 <ble_ll_adv_rpa_timeout+0x1c>
   2014c:	20003ee8 	.word	0x20003ee8

00020150 <ble_ll_adv_event_rmvd_from_sched>:
{
   20150:	b510      	push	{r4, lr}
   20152:	4604      	mov	r4, r0
    advsm->adv_chan = ble_ll_adv_final_chan(advsm);
   20154:	f7ff faa1 	bl	1f69a <ble_ll_adv_final_chan>
   20158:	71a0      	strb	r0, [r4, #6]
   2015a:	f104 0154 	add.w	r1, r4, #84	; 0x54
   2015e:	4802      	ldr	r0, [pc, #8]	; (20168 <ble_ll_adv_event_rmvd_from_sched+0x18>)
   20160:	f7f0 fd9d 	bl	10c9e <os_eventq_put>
}
   20164:	bd10      	pop	{r4, pc}
   20166:	bf00      	nop
   20168:	20003e4c 	.word	0x20003e4c

0002016c <ble_ll_adv_halt>:
{
   2016c:	b538      	push	{r3, r4, r5, lr}
    if (g_ble_ll_cur_adv_sm != NULL) {
   2016e:	4b0d      	ldr	r3, [pc, #52]	; (201a4 <ble_ll_adv_halt+0x38>)
   20170:	681c      	ldr	r4, [r3, #0]
   20172:	b1b4      	cbz	r4, 201a2 <ble_ll_adv_halt+0x36>
        ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   20174:	2000      	movs	r0, #0
   20176:	f008 f87b 	bl	28270 <ble_phy_txpwr_set>
   2017a:	f104 0154 	add.w	r1, r4, #84	; 0x54
   2017e:	480a      	ldr	r0, [pc, #40]	; (201a8 <ble_ll_adv_halt+0x3c>)
   20180:	f7f0 fd8d 	bl	10c9e <os_eventq_put>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   20184:	2000      	movs	r0, #0
   20186:	f7ff f92f 	bl	1f3e8 <ble_ll_state_set>
        ble_ll_adv_active_chanset_clear(g_ble_ll_cur_adv_sm);
   2018a:	4c06      	ldr	r4, [pc, #24]	; (201a4 <ble_ll_adv_halt+0x38>)
   2018c:	6825      	ldr	r5, [r4, #0]
    OS_ENTER_CRITICAL(sr);
   2018e:	f7f0 f95b 	bl	10448 <os_arch_save_sr>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   20192:	896b      	ldrh	r3, [r5, #10]
   20194:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   20198:	816b      	strh	r3, [r5, #10]
    OS_EXIT_CRITICAL(sr);
   2019a:	f7f0 f95b 	bl	10454 <os_arch_restore_sr>
        g_ble_ll_cur_adv_sm = NULL;
   2019e:	2300      	movs	r3, #0
   201a0:	6023      	str	r3, [r4, #0]
}
   201a2:	bd38      	pop	{r3, r4, r5, pc}
   201a4:	20003ee4 	.word	0x20003ee4
   201a8:	20003e4c 	.word	0x20003e4c

000201ac <ble_ll_adv_set_adv_params>:
{
   201ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (advsm->adv_enabled) {
   201ae:	4b40      	ldr	r3, [pc, #256]	; (202b0 <ble_ll_adv_set_adv_params+0x104>)
   201b0:	781d      	ldrb	r5, [r3, #0]
   201b2:	2d00      	cmp	r5, #0
   201b4:	d164      	bne.n	20280 <ble_ll_adv_set_adv_params+0xd4>
   201b6:	4604      	mov	r4, r0
    adv_itvl_min = get_le16(cmd);
   201b8:	f7fe fcd4 	bl	1eb64 <get_le16>
   201bc:	4606      	mov	r6, r0
    adv_itvl_max = get_le16(cmd + 2);
   201be:	1ca0      	adds	r0, r4, #2
   201c0:	f7fe fcd0 	bl	1eb64 <get_le16>
   201c4:	4602      	mov	r2, r0
    adv_type = cmd[4];
   201c6:	7923      	ldrb	r3, [r4, #4]
    adv_filter_policy = cmd[14];
   201c8:	7ba1      	ldrb	r1, [r4, #14]
    switch (adv_type) {
   201ca:	2b04      	cmp	r3, #4
   201cc:	d85a      	bhi.n	20284 <ble_ll_adv_set_adv_params+0xd8>
   201ce:	e8df f003 	tbb	[pc, r3]
   201d2:	0503      	.short	0x0503
   201d4:	1d1b      	.short	0x1d1b
   201d6:	11          	.byte	0x11
   201d7:	00          	.byte	0x00
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_IND;
   201d8:	2313      	movs	r3, #19
   201da:	e018      	b.n	2020e <ble_ll_adv_set_adv_params+0x62>
        memcpy(advsm->peer_addr, cmd + 7, BLE_DEV_ADDR_LEN);
   201dc:	4623      	mov	r3, r4
   201de:	4a35      	ldr	r2, [pc, #212]	; (202b4 <ble_ll_adv_set_adv_params+0x108>)
   201e0:	f853 0f07 	ldr.w	r0, [r3, #7]!
   201e4:	6010      	str	r0, [r2, #0]
   201e6:	889b      	ldrh	r3, [r3, #4]
   201e8:	8093      	strh	r3, [r2, #4]
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   201ea:	4629      	mov	r1, r5
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_HD_DIR ;
   201ec:	231d      	movs	r3, #29
        adv_itvl_max = 0;
   201ee:	2200      	movs	r2, #0
        adv_itvl_min = 0;
   201f0:	4616      	mov	r6, r2
        break;
   201f2:	e00c      	b.n	2020e <ble_ll_adv_set_adv_params+0x62>
        memcpy(advsm->peer_addr, cmd + 7, BLE_DEV_ADDR_LEN);
   201f4:	4623      	mov	r3, r4
   201f6:	492f      	ldr	r1, [pc, #188]	; (202b4 <ble_ll_adv_set_adv_params+0x108>)
   201f8:	f853 0f07 	ldr.w	r0, [r3, #7]!
   201fc:	6008      	str	r0, [r1, #0]
   201fe:	889b      	ldrh	r3, [r3, #4]
   20200:	808b      	strh	r3, [r1, #4]
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   20202:	4629      	mov	r1, r5
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_LD_DIR ;
   20204:	2315      	movs	r3, #21
        break;
   20206:	e002      	b.n	2020e <ble_ll_adv_set_adv_params+0x62>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_SCAN;
   20208:	2312      	movs	r3, #18
        break;
   2020a:	e000      	b.n	2020e <ble_ll_adv_set_adv_params+0x62>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_NONCONN;
   2020c:	2310      	movs	r3, #16
    if (!(props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED)) {
   2020e:	f013 0f08 	tst.w	r3, #8
   20212:	d10b      	bne.n	2022c <ble_ll_adv_set_adv_params+0x80>
        if ((adv_itvl_min > adv_itvl_max) ||
   20214:	4296      	cmp	r6, r2
   20216:	d837      	bhi.n	20288 <ble_ll_adv_set_adv_params+0xdc>
   20218:	2e1f      	cmp	r6, #31
   2021a:	d937      	bls.n	2028c <ble_ll_adv_set_adv_params+0xe0>
                (adv_itvl_min < BLE_HCI_ADV_ITVL_MIN) ||
   2021c:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
   20220:	d836      	bhi.n	20290 <ble_ll_adv_set_adv_params+0xe4>
                (adv_itvl_min > BLE_HCI_ADV_ITVL_MAX) ||
   20222:	2a1f      	cmp	r2, #31
   20224:	d936      	bls.n	20294 <ble_ll_adv_set_adv_params+0xe8>
                (adv_itvl_max < BLE_HCI_ADV_ITVL_MIN) ||
   20226:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   2022a:	d835      	bhi.n	20298 <ble_ll_adv_set_adv_params+0xec>
    own_addr_type =  cmd[5];
   2022c:	7965      	ldrb	r5, [r4, #5]
    peer_addr_type = cmd[6];
   2022e:	79a7      	ldrb	r7, [r4, #6]
    if ((own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   20230:	2d03      	cmp	r5, #3
   20232:	d833      	bhi.n	2029c <ble_ll_adv_set_adv_params+0xf0>
   20234:	2f01      	cmp	r7, #1
   20236:	d833      	bhi.n	202a0 <ble_ll_adv_set_adv_params+0xf4>
    advsm->adv_txpwr = MYNEWT_VAL(BLE_LL_TX_PWR_DBM);
   20238:	481d      	ldr	r0, [pc, #116]	; (202b0 <ble_ll_adv_set_adv_params+0x104>)
   2023a:	f04f 0c00 	mov.w	ip, #0
   2023e:	f880 c009 	strb.w	ip, [r0, #9]
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   20242:	2d01      	cmp	r5, #1
   20244:	d810      	bhi.n	20268 <ble_ll_adv_set_adv_params+0xbc>
    adv_chanmask = cmd[13];
   20246:	7b60      	ldrb	r0, [r4, #13]
    if (((adv_chanmask & 0xF8) != 0) || (adv_chanmask == 0)) {
   20248:	f010 0ff8 	tst.w	r0, #248	; 0xf8
   2024c:	d12a      	bne.n	202a4 <ble_ll_adv_set_adv_params+0xf8>
   2024e:	b358      	cbz	r0, 202a8 <ble_ll_adv_set_adv_params+0xfc>
    if (adv_filter_policy > BLE_HCI_ADV_FILT_MAX) {
   20250:	2903      	cmp	r1, #3
   20252:	d82b      	bhi.n	202ac <ble_ll_adv_set_adv_params+0x100>
    advsm->own_addr_type = own_addr_type;
   20254:	4c16      	ldr	r4, [pc, #88]	; (202b0 <ble_ll_adv_set_adv_params+0x104>)
   20256:	7125      	strb	r5, [r4, #4]
    advsm->peer_addr_type = peer_addr_type;
   20258:	7167      	strb	r7, [r4, #5]
    advsm->adv_filter_policy = adv_filter_policy;
   2025a:	70e1      	strb	r1, [r4, #3]
    advsm->adv_chanmask = adv_chanmask;
   2025c:	70a0      	strb	r0, [r4, #2]
    advsm->adv_itvl_min = adv_itvl_min;
   2025e:	81e6      	strh	r6, [r4, #14]
    advsm->adv_itvl_max = adv_itvl_max;
   20260:	8222      	strh	r2, [r4, #16]
    advsm->props = props;
   20262:	81a3      	strh	r3, [r4, #12]
    return 0;
   20264:	2000      	movs	r0, #0
   20266:	e00c      	b.n	20282 <ble_ll_adv_set_adv_params+0xd6>
        memcpy(advsm->peer_addr, cmd + 7, BLE_DEV_ADDR_LEN);
   20268:	46a4      	mov	ip, r4
   2026a:	f100 0e34 	add.w	lr, r0, #52	; 0x34
   2026e:	f85c 0f07 	ldr.w	r0, [ip, #7]!
   20272:	f8ce 0000 	str.w	r0, [lr]
   20276:	f8bc 0004 	ldrh.w	r0, [ip, #4]
   2027a:	f8ae 0004 	strh.w	r0, [lr, #4]
   2027e:	e7e2      	b.n	20246 <ble_ll_adv_set_adv_params+0x9a>
        return BLE_ERR_CMD_DISALLOWED;
   20280:	200c      	movs	r0, #12
}
   20282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20284:	2012      	movs	r0, #18
   20286:	e7fc      	b.n	20282 <ble_ll_adv_set_adv_params+0xd6>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   20288:	2012      	movs	r0, #18
   2028a:	e7fa      	b.n	20282 <ble_ll_adv_set_adv_params+0xd6>
   2028c:	2012      	movs	r0, #18
   2028e:	e7f8      	b.n	20282 <ble_ll_adv_set_adv_params+0xd6>
   20290:	2012      	movs	r0, #18
   20292:	e7f6      	b.n	20282 <ble_ll_adv_set_adv_params+0xd6>
   20294:	2012      	movs	r0, #18
   20296:	e7f4      	b.n	20282 <ble_ll_adv_set_adv_params+0xd6>
   20298:	2012      	movs	r0, #18
   2029a:	e7f2      	b.n	20282 <ble_ll_adv_set_adv_params+0xd6>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2029c:	2012      	movs	r0, #18
   2029e:	e7f0      	b.n	20282 <ble_ll_adv_set_adv_params+0xd6>
   202a0:	2012      	movs	r0, #18
   202a2:	e7ee      	b.n	20282 <ble_ll_adv_set_adv_params+0xd6>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   202a4:	2012      	movs	r0, #18
   202a6:	e7ec      	b.n	20282 <ble_ll_adv_set_adv_params+0xd6>
   202a8:	2012      	movs	r0, #18
   202aa:	e7ea      	b.n	20282 <ble_ll_adv_set_adv_params+0xd6>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   202ac:	2012      	movs	r0, #18
   202ae:	e7e8      	b.n	20282 <ble_ll_adv_set_adv_params+0xd6>
   202b0:	20003ee8 	.word	0x20003ee8
   202b4:	20003f1c 	.word	0x20003f1c

000202b8 <ble_ll_adv_read_txpwr>:
    rspbuf[0] = MYNEWT_VAL(BLE_LL_TX_PWR_DBM);
   202b8:	2300      	movs	r3, #0
   202ba:	7003      	strb	r3, [r0, #0]
    *rsplen = 1;
   202bc:	2201      	movs	r2, #1
   202be:	700a      	strb	r2, [r1, #0]
}
   202c0:	4618      	mov	r0, r3
   202c2:	4770      	bx	lr

000202c4 <ble_ll_adv_set_enable>:
    if (instance >= BLE_ADV_INSTANCES) {
   202c4:	b9a0      	cbnz	r0, 202f0 <ble_ll_adv_set_enable+0x2c>
{
   202c6:	b508      	push	{r3, lr}
   202c8:	4603      	mov	r3, r0
    advsm = &g_ble_ll_adv_sm[instance];
   202ca:	480b      	ldr	r0, [pc, #44]	; (202f8 <ble_ll_adv_set_enable+0x34>)
   202cc:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
    if (enable == 1) {
   202d0:	2901      	cmp	r1, #1
   202d2:	d004      	beq.n	202de <ble_ll_adv_set_enable+0x1a>
    } else if (enable == 0) {
   202d4:	b971      	cbnz	r1, 202f4 <ble_ll_adv_set_enable+0x30>
        ble_ll_adv_sm_stop(advsm);
   202d6:	f7ff fc59 	bl	1fb8c <ble_ll_adv_sm_stop>
    rc = BLE_ERR_SUCCESS;
   202da:	2000      	movs	r0, #0
}
   202dc:	bd08      	pop	{r3, pc}
        if (!advsm->adv_enabled) {
   202de:	01db      	lsls	r3, r3, #7
   202e0:	4a05      	ldr	r2, [pc, #20]	; (202f8 <ble_ll_adv_set_enable+0x34>)
   202e2:	5cd3      	ldrb	r3, [r2, r3]
   202e4:	b10b      	cbz	r3, 202ea <ble_ll_adv_set_enable+0x26>
    rc = BLE_ERR_SUCCESS;
   202e6:	2000      	movs	r0, #0
   202e8:	e7f8      	b.n	202dc <ble_ll_adv_set_enable+0x18>
            rc = ble_ll_adv_sm_start(advsm);
   202ea:	f7ff fa7b 	bl	1f7e4 <ble_ll_adv_sm_start>
   202ee:	e7f5      	b.n	202dc <ble_ll_adv_set_enable+0x18>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   202f0:	2012      	movs	r0, #18
}
   202f2:	4770      	bx	lr
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   202f4:	2012      	movs	r0, #18
   202f6:	e7f1      	b.n	202dc <ble_ll_adv_set_enable+0x18>
   202f8:	20003ee8 	.word	0x20003ee8

000202fc <ble_ll_adv_set_scan_rsp_data>:
    if (instance >= BLE_ADV_INSTANCES) {
   202fc:	2a00      	cmp	r2, #0
   202fe:	d178      	bne.n	203f2 <ble_ll_adv_set_scan_rsp_data+0xf6>
{
   20300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20304:	b083      	sub	sp, #12
   20306:	4615      	mov	r5, r2
    advsm = &g_ble_ll_adv_sm[instance];
   20308:	4a43      	ldr	r2, [pc, #268]	; (20418 <ble_ll_adv_set_scan_rsp_data+0x11c>)
   2030a:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
    datalen = cmd[0];
   2030e:	7806      	ldrb	r6, [r0, #0]
    if (datalen > 251 || datalen > cmd_len - 1) {
   20310:	2efb      	cmp	r6, #251	; 0xfb
   20312:	d870      	bhi.n	203f6 <ble_ll_adv_set_scan_rsp_data+0xfa>
   20314:	3901      	subs	r1, #1
   20316:	428e      	cmp	r6, r1
   20318:	dc71      	bgt.n	203fe <ble_ll_adv_set_scan_rsp_data+0x102>
   2031a:	461f      	mov	r7, r3
   2031c:	4604      	mov	r4, r0
    if (!instance_configured(advsm)) {
   2031e:	4610      	mov	r0, r2
   20320:	f7ff f9c8 	bl	1f6b4 <instance_configured>
   20324:	2800      	cmp	r0, #0
   20326:	d06c      	beq.n	20402 <ble_ll_adv_set_scan_rsp_data+0x106>
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE)) {
   20328:	4b3b      	ldr	r3, [pc, #236]	; (20418 <ble_ll_adv_set_scan_rsp_data+0x11c>)
   2032a:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   2032e:	899b      	ldrh	r3, [r3, #12]
   20330:	f013 0f02 	tst.w	r3, #2
   20334:	d102      	bne.n	2033c <ble_ll_adv_set_scan_rsp_data+0x40>
        if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   20336:	f013 0f10 	tst.w	r3, #16
   2033a:	d064      	beq.n	20406 <ble_ll_adv_set_scan_rsp_data+0x10a>
    switch (operation) {
   2033c:	2f03      	cmp	r7, #3
   2033e:	d164      	bne.n	2040a <ble_ll_adv_set_scan_rsp_data+0x10e>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   20340:	f013 0f10 	tst.w	r3, #16
   20344:	d001      	beq.n	2034a <ble_ll_adv_set_scan_rsp_data+0x4e>
            if (datalen > BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN) {
   20346:	2e1f      	cmp	r6, #31
   20348:	d861      	bhi.n	2040e <ble_ll_adv_set_scan_rsp_data+0x112>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   2034a:	2f03      	cmp	r7, #3
   2034c:	d03c      	beq.n	203c8 <ble_ll_adv_set_scan_rsp_data+0xcc>
   2034e:	2f01      	cmp	r7, #1
   20350:	d000      	beq.n	20354 <ble_ll_adv_set_scan_rsp_data+0x58>
   20352:	2700      	movs	r7, #0
    if (advsm->adv_enabled) {
   20354:	01eb      	lsls	r3, r5, #7
   20356:	4a30      	ldr	r2, [pc, #192]	; (20418 <ble_ll_adv_set_scan_rsp_data+0x11c>)
   20358:	5cd3      	ldrb	r3, [r2, r3]
   2035a:	b3bb      	cbz	r3, 203cc <ble_ll_adv_set_scan_rsp_data+0xd0>
        if (advsm->new_scan_rsp_data) {
   2035c:	eb02 13c5 	add.w	r3, r2, r5, lsl #7
   20360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   20362:	b19b      	cbz	r3, 2038c <ble_ll_adv_set_scan_rsp_data+0x90>
    OS_ENTER_CRITICAL(sr);
   20364:	f7f0 f870 	bl	10448 <os_arch_save_sr>
    advsm->flags &= ~flags;
   20368:	4b2b      	ldr	r3, [pc, #172]	; (20418 <ble_ll_adv_set_scan_rsp_data+0x11c>)
   2036a:	eb03 18c5 	add.w	r8, r3, r5, lsl #7
   2036e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   20372:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   20376:	f8a8 300a 	strh.w	r3, [r8, #10]
    OS_EXIT_CRITICAL(sr);
   2037a:	f7f0 f86b 	bl	10454 <os_arch_restore_sr>
            os_mbuf_free_chain(advsm->new_scan_rsp_data);
   2037e:	f8d8 004c 	ldr.w	r0, [r8, #76]	; 0x4c
   20382:	f7f0 fdab 	bl	10edc <os_mbuf_free_chain>
            advsm->new_scan_rsp_data = NULL;
   20386:	2300      	movs	r3, #0
   20388:	f8c8 304c 	str.w	r3, [r8, #76]	; 0x4c
        ble_ll_adv_update_data_mbuf(&advsm->new_scan_rsp_data, new_data,
   2038c:	ea4f 19c5 	mov.w	r9, r5, lsl #7
   20390:	f109 0048 	add.w	r0, r9, #72	; 0x48
   20394:	f8df 8080 	ldr.w	r8, [pc, #128]	; 20418 <ble_ll_adv_set_scan_rsp_data+0x11c>
   20398:	4440      	add	r0, r8
   2039a:	9600      	str	r6, [sp, #0]
   2039c:	1c63      	adds	r3, r4, #1
   2039e:	221f      	movs	r2, #31
   203a0:	4639      	mov	r1, r7
   203a2:	3004      	adds	r0, #4
   203a4:	f7ff fc30 	bl	1fc08 <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_scan_rsp_data) {
   203a8:	44c8      	add	r8, r9
   203aa:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   203ae:	b383      	cbz	r3, 20412 <ble_ll_adv_set_scan_rsp_data+0x116>
    OS_ENTER_CRITICAL(sr);
   203b0:	f7f0 f84a 	bl	10448 <os_arch_save_sr>
    advsm->flags |= flags;
   203b4:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   203b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   203bc:	f8a8 300a 	strh.w	r3, [r8, #10]
    OS_EXIT_CRITICAL(sr);
   203c0:	f7f0 f848 	bl	10454 <os_arch_restore_sr>
    return BLE_ERR_SUCCESS;
   203c4:	2000      	movs	r0, #0
   203c6:	e017      	b.n	203f8 <ble_ll_adv_set_scan_rsp_data+0xfc>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   203c8:	2701      	movs	r7, #1
   203ca:	e7c3      	b.n	20354 <ble_ll_adv_set_scan_rsp_data+0x58>
        ble_ll_adv_update_data_mbuf(&advsm->scan_rsp_data, new_data,
   203cc:	01ed      	lsls	r5, r5, #7
   203ce:	f105 0048 	add.w	r0, r5, #72	; 0x48
   203d2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 20418 <ble_ll_adv_set_scan_rsp_data+0x11c>
   203d6:	9600      	str	r6, [sp, #0]
   203d8:	1c63      	adds	r3, r4, #1
   203da:	221f      	movs	r2, #31
   203dc:	4639      	mov	r1, r7
   203de:	4440      	add	r0, r8
   203e0:	f7ff fc12 	bl	1fc08 <ble_ll_adv_update_data_mbuf>
        if (!advsm->scan_rsp_data) {
   203e4:	4445      	add	r5, r8
   203e6:	6cab      	ldr	r3, [r5, #72]	; 0x48
   203e8:	b10b      	cbz	r3, 203ee <ble_ll_adv_set_scan_rsp_data+0xf2>
    return BLE_ERR_SUCCESS;
   203ea:	2000      	movs	r0, #0
   203ec:	e004      	b.n	203f8 <ble_ll_adv_set_scan_rsp_data+0xfc>
            return BLE_ERR_MEM_CAPACITY;
   203ee:	2007      	movs	r0, #7
   203f0:	e002      	b.n	203f8 <ble_ll_adv_set_scan_rsp_data+0xfc>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   203f2:	2012      	movs	r0, #18
}
   203f4:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   203f6:	2012      	movs	r0, #18
}
   203f8:	b003      	add	sp, #12
   203fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   203fe:	2012      	movs	r0, #18
   20400:	e7fa      	b.n	203f8 <ble_ll_adv_set_scan_rsp_data+0xfc>
        return BLE_ERR_UNK_ADV_INDENT;
   20402:	2042      	movs	r0, #66	; 0x42
   20404:	e7f8      	b.n	203f8 <ble_ll_adv_set_scan_rsp_data+0xfc>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   20406:	2012      	movs	r0, #18
   20408:	e7f6      	b.n	203f8 <ble_ll_adv_set_scan_rsp_data+0xfc>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2040a:	2012      	movs	r0, #18
   2040c:	e7f4      	b.n	203f8 <ble_ll_adv_set_scan_rsp_data+0xfc>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   2040e:	2012      	movs	r0, #18
   20410:	e7f2      	b.n	203f8 <ble_ll_adv_set_scan_rsp_data+0xfc>
            return BLE_ERR_MEM_CAPACITY;
   20412:	2007      	movs	r0, #7
   20414:	e7f0      	b.n	203f8 <ble_ll_adv_set_scan_rsp_data+0xfc>
   20416:	bf00      	nop
   20418:	20003ee8 	.word	0x20003ee8

0002041c <ble_ll_adv_set_adv_data>:
    if (instance >= BLE_ADV_INSTANCES) {
   2041c:	2a00      	cmp	r2, #0
   2041e:	f040 8093 	bne.w	20548 <ble_ll_adv_set_adv_data+0x12c>
{
   20422:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20426:	b083      	sub	sp, #12
   20428:	4615      	mov	r5, r2
    advsm = &g_ble_ll_adv_sm[instance];
   2042a:	4a50      	ldr	r2, [pc, #320]	; (2056c <ble_ll_adv_set_adv_data+0x150>)
   2042c:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
    datalen = cmd[0];
   20430:	7806      	ldrb	r6, [r0, #0]
    if (datalen > 251 || datalen > cmd_len - 1) {
   20432:	2efb      	cmp	r6, #251	; 0xfb
   20434:	f200 808a 	bhi.w	2054c <ble_ll_adv_set_adv_data+0x130>
   20438:	3901      	subs	r1, #1
   2043a:	428e      	cmp	r6, r1
   2043c:	f300 808a 	bgt.w	20554 <ble_ll_adv_set_adv_data+0x138>
   20440:	461f      	mov	r7, r3
   20442:	4604      	mov	r4, r0
    if (!instance_configured(advsm)) {
   20444:	4610      	mov	r0, r2
   20446:	f7ff f935 	bl	1f6b4 <instance_configured>
   2044a:	2800      	cmp	r0, #0
   2044c:	f000 8084 	beq.w	20558 <ble_ll_adv_set_adv_data+0x13c>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   20450:	4b46      	ldr	r3, [pc, #280]	; (2056c <ble_ll_adv_set_adv_data+0x150>)
   20452:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   20456:	899b      	ldrh	r3, [r3, #12]
   20458:	f013 0f10 	tst.w	r3, #16
   2045c:	d007      	beq.n	2046e <ble_ll_adv_set_adv_data+0x52>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   2045e:	f013 0f04 	tst.w	r3, #4
   20462:	d007      	beq.n	20474 <ble_ll_adv_set_adv_data+0x58>
            if (ble_ll_hci_adv_mode_ext()) {
   20464:	f004 fc06 	bl	24c74 <ble_ll_hci_adv_mode_ext>
   20468:	b120      	cbz	r0, 20474 <ble_ll_adv_set_adv_data+0x58>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   2046a:	2012      	movs	r0, #18
   2046c:	e06f      	b.n	2054e <ble_ll_adv_set_adv_data+0x132>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   2046e:	f013 0f02 	tst.w	r3, #2
   20472:	d173      	bne.n	2055c <ble_ll_adv_set_adv_data+0x140>
    switch (operation) {
   20474:	2f03      	cmp	r7, #3
   20476:	d173      	bne.n	20560 <ble_ll_adv_set_adv_data+0x144>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   20478:	4b3c      	ldr	r3, [pc, #240]	; (2056c <ble_ll_adv_set_adv_data+0x150>)
   2047a:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   2047e:	899b      	ldrh	r3, [r3, #12]
   20480:	f013 0f10 	tst.w	r3, #16
   20484:	d001      	beq.n	2048a <ble_ll_adv_set_adv_data+0x6e>
            if (datalen > BLE_ADV_LEGACY_DATA_MAX_LEN) {
   20486:	2e1f      	cmp	r6, #31
   20488:	d86c      	bhi.n	20564 <ble_ll_adv_set_adv_data+0x148>
    OS_ENTER_CRITICAL(sr);
   2048a:	f7ef ffdd 	bl	10448 <os_arch_save_sr>
    advsm->flags &= ~flags;
   2048e:	4b37      	ldr	r3, [pc, #220]	; (2056c <ble_ll_adv_set_adv_data+0x150>)
   20490:	eb03 13c5 	add.w	r3, r3, r5, lsl #7
   20494:	895a      	ldrh	r2, [r3, #10]
   20496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   2049a:	815a      	strh	r2, [r3, #10]
    OS_EXIT_CRITICAL(sr);
   2049c:	f7ef ffda 	bl	10454 <os_arch_restore_sr>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   204a0:	2f03      	cmp	r7, #3
   204a2:	d03c      	beq.n	2051e <ble_ll_adv_set_adv_data+0x102>
   204a4:	2f01      	cmp	r7, #1
   204a6:	d000      	beq.n	204aa <ble_ll_adv_set_adv_data+0x8e>
   204a8:	2700      	movs	r7, #0
    if (advsm->adv_enabled) {
   204aa:	01eb      	lsls	r3, r5, #7
   204ac:	4a2f      	ldr	r2, [pc, #188]	; (2056c <ble_ll_adv_set_adv_data+0x150>)
   204ae:	5cd3      	ldrb	r3, [r2, r3]
   204b0:	b3bb      	cbz	r3, 20522 <ble_ll_adv_set_adv_data+0x106>
        if (advsm->new_adv_data) {
   204b2:	eb02 13c5 	add.w	r3, r2, r5, lsl #7
   204b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   204b8:	b19b      	cbz	r3, 204e2 <ble_ll_adv_set_adv_data+0xc6>
    OS_ENTER_CRITICAL(sr);
   204ba:	f7ef ffc5 	bl	10448 <os_arch_save_sr>
    advsm->flags &= ~flags;
   204be:	4b2b      	ldr	r3, [pc, #172]	; (2056c <ble_ll_adv_set_adv_data+0x150>)
   204c0:	eb03 18c5 	add.w	r8, r3, r5, lsl #7
   204c4:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   204c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   204cc:	f8a8 300a 	strh.w	r3, [r8, #10]
    OS_EXIT_CRITICAL(sr);
   204d0:	f7ef ffc0 	bl	10454 <os_arch_restore_sr>
            os_mbuf_free_chain(advsm->new_adv_data);
   204d4:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
   204d8:	f7f0 fd00 	bl	10edc <os_mbuf_free_chain>
            advsm->new_adv_data = NULL;
   204dc:	2300      	movs	r3, #0
   204de:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        ble_ll_adv_update_data_mbuf(&advsm->new_adv_data, new_data,
   204e2:	ea4f 19c5 	mov.w	r9, r5, lsl #7
   204e6:	f109 0040 	add.w	r0, r9, #64	; 0x40
   204ea:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2056c <ble_ll_adv_set_adv_data+0x150>
   204ee:	4440      	add	r0, r8
   204f0:	9600      	str	r6, [sp, #0]
   204f2:	1c63      	adds	r3, r4, #1
   204f4:	221f      	movs	r2, #31
   204f6:	4639      	mov	r1, r7
   204f8:	3004      	adds	r0, #4
   204fa:	f7ff fb85 	bl	1fc08 <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_adv_data) {
   204fe:	44c8      	add	r8, r9
   20500:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   20504:	b383      	cbz	r3, 20568 <ble_ll_adv_set_adv_data+0x14c>
    OS_ENTER_CRITICAL(sr);
   20506:	f7ef ff9f 	bl	10448 <os_arch_save_sr>
    advsm->flags |= flags;
   2050a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   2050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   20512:	f8a8 300a 	strh.w	r3, [r8, #10]
    OS_EXIT_CRITICAL(sr);
   20516:	f7ef ff9d 	bl	10454 <os_arch_restore_sr>
    return BLE_ERR_SUCCESS;
   2051a:	2000      	movs	r0, #0
   2051c:	e017      	b.n	2054e <ble_ll_adv_set_adv_data+0x132>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   2051e:	2701      	movs	r7, #1
   20520:	e7c3      	b.n	204aa <ble_ll_adv_set_adv_data+0x8e>
        ble_ll_adv_update_data_mbuf(&advsm->adv_data, new_data,
   20522:	01ed      	lsls	r5, r5, #7
   20524:	f105 0040 	add.w	r0, r5, #64	; 0x40
   20528:	f8df 8040 	ldr.w	r8, [pc, #64]	; 2056c <ble_ll_adv_set_adv_data+0x150>
   2052c:	9600      	str	r6, [sp, #0]
   2052e:	1c63      	adds	r3, r4, #1
   20530:	221f      	movs	r2, #31
   20532:	4639      	mov	r1, r7
   20534:	4440      	add	r0, r8
   20536:	f7ff fb67 	bl	1fc08 <ble_ll_adv_update_data_mbuf>
        if (!advsm->adv_data) {
   2053a:	4445      	add	r5, r8
   2053c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   2053e:	b10b      	cbz	r3, 20544 <ble_ll_adv_set_adv_data+0x128>
    return BLE_ERR_SUCCESS;
   20540:	2000      	movs	r0, #0
   20542:	e004      	b.n	2054e <ble_ll_adv_set_adv_data+0x132>
            return BLE_ERR_MEM_CAPACITY;
   20544:	2007      	movs	r0, #7
   20546:	e002      	b.n	2054e <ble_ll_adv_set_adv_data+0x132>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20548:	2012      	movs	r0, #18
}
   2054a:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2054c:	2012      	movs	r0, #18
}
   2054e:	b003      	add	sp, #12
   20550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20554:	2012      	movs	r0, #18
   20556:	e7fa      	b.n	2054e <ble_ll_adv_set_adv_data+0x132>
        return BLE_ERR_UNK_ADV_INDENT;
   20558:	2042      	movs	r0, #66	; 0x42
   2055a:	e7f8      	b.n	2054e <ble_ll_adv_set_adv_data+0x132>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   2055c:	2012      	movs	r0, #18
   2055e:	e7f6      	b.n	2054e <ble_ll_adv_set_adv_data+0x132>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20560:	2012      	movs	r0, #18
   20562:	e7f4      	b.n	2054e <ble_ll_adv_set_adv_data+0x132>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   20564:	2012      	movs	r0, #18
   20566:	e7f2      	b.n	2054e <ble_ll_adv_set_adv_data+0x132>
            return BLE_ERR_MEM_CAPACITY;
   20568:	2007      	movs	r0, #7
   2056a:	e7f0      	b.n	2054e <ble_ll_adv_set_adv_data+0x132>
   2056c:	20003ee8 	.word	0x20003ee8

00020570 <ble_ll_adv_rx_isr_end>:
{
   20570:	b510      	push	{r4, lr}
    if (rxpdu == NULL) {
   20572:	b141      	cbz	r1, 20586 <ble_ll_adv_rx_isr_end+0x16>
   20574:	460b      	mov	r3, r1
        if (crcok) {
   20576:	b19a      	cbz	r2, 205a0 <ble_ll_adv_rx_isr_end+0x30>
            if ((pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) ||
   20578:	2803      	cmp	r0, #3
   2057a:	d00b      	beq.n	20594 <ble_ll_adv_rx_isr_end+0x24>
   2057c:	2805      	cmp	r0, #5
   2057e:	d009      	beq.n	20594 <ble_ll_adv_rx_isr_end+0x24>
    rc = -1;
   20580:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20584:	e00e      	b.n	205a4 <ble_ll_adv_rx_isr_end+0x34>
        ble_ll_adv_tx_done(g_ble_ll_cur_adv_sm);
   20586:	4b0c      	ldr	r3, [pc, #48]	; (205b8 <ble_ll_adv_rx_isr_end+0x48>)
   20588:	6818      	ldr	r0, [r3, #0]
   2058a:	f7ff f9a5 	bl	1f8d8 <ble_ll_adv_tx_done>
    rc = -1;
   2058e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   20592:	e00b      	b.n	205ac <ble_ll_adv_rx_isr_end+0x3c>
                rc = ble_ll_adv_rx_req(pdu_type, rxpdu);
   20594:	4619      	mov	r1, r3
   20596:	f7ff fb8d 	bl	1fcb4 <ble_ll_adv_rx_req>
        if (rc) {
   2059a:	4604      	mov	r4, r0
   2059c:	b128      	cbz	r0, 205aa <ble_ll_adv_rx_isr_end+0x3a>
   2059e:	e001      	b.n	205a4 <ble_ll_adv_rx_isr_end+0x34>
    rc = -1;
   205a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            g_ble_ll_cur_adv_sm = NULL;
   205a4:	4b04      	ldr	r3, [pc, #16]	; (205b8 <ble_ll_adv_rx_isr_end+0x48>)
   205a6:	2200      	movs	r2, #0
   205a8:	601a      	str	r2, [r3, #0]
    if (rc) {
   205aa:	b114      	cbz	r4, 205b2 <ble_ll_adv_rx_isr_end+0x42>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   205ac:	2000      	movs	r0, #0
   205ae:	f7fe ff1b 	bl	1f3e8 <ble_ll_state_set>
}
   205b2:	4620      	mov	r0, r4
   205b4:	bd10      	pop	{r4, pc}
   205b6:	bf00      	nop
   205b8:	20003ee4 	.word	0x20003ee4

000205bc <ble_ll_adv_rx_pkt_in>:
    if (!advsm->adv_enabled) {
   205bc:	4b0f      	ldr	r3, [pc, #60]	; (205fc <ble_ll_adv_rx_pkt_in+0x40>)
   205be:	781b      	ldrb	r3, [r3, #0]
   205c0:	b1db      	cbz	r3, 205fa <ble_ll_adv_rx_pkt_in+0x3e>
{
   205c2:	b510      	push	{r4, lr}
   205c4:	4614      	mov	r4, r2
   205c6:	460b      	mov	r3, r1
    if (BLE_MBUF_HDR_CRC_OK(hdr)) {
   205c8:	8812      	ldrh	r2, [r2, #0]
   205ca:	f012 0f80 	tst.w	r2, #128	; 0x80
   205ce:	d003      	beq.n	205d8 <ble_ll_adv_rx_pkt_in+0x1c>
        if (ptype == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   205d0:	2805      	cmp	r0, #5
   205d2:	d006      	beq.n	205e2 <ble_ll_adv_rx_pkt_in+0x26>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   205d4:	2803      	cmp	r0, #3
   205d6:	d00c      	beq.n	205f2 <ble_ll_adv_rx_pkt_in+0x36>
        ble_ll_adv_make_done(advsm, hdr);
   205d8:	4621      	mov	r1, r4
   205da:	4808      	ldr	r0, [pc, #32]	; (205fc <ble_ll_adv_rx_pkt_in+0x40>)
   205dc:	f7ff fd7c 	bl	200d8 <ble_ll_adv_make_done>
}
   205e0:	bd10      	pop	{r4, pc}
            if (ble_ll_adv_conn_req_rxd(rxbuf, hdr, advsm)) {
   205e2:	4a06      	ldr	r2, [pc, #24]	; (205fc <ble_ll_adv_rx_pkt_in+0x40>)
   205e4:	4621      	mov	r1, r4
   205e6:	4618      	mov	r0, r3
   205e8:	f7ff fc0c 	bl	1fe04 <ble_ll_adv_conn_req_rxd>
   205ec:	2800      	cmp	r0, #0
   205ee:	d0f3      	beq.n	205d8 <ble_ll_adv_rx_pkt_in+0x1c>
   205f0:	e7f6      	b.n	205e0 <ble_ll_adv_rx_pkt_in+0x24>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   205f2:	f012 0f10 	tst.w	r2, #16
   205f6:	d0ef      	beq.n	205d8 <ble_ll_adv_rx_pkt_in+0x1c>
   205f8:	e7f2      	b.n	205e0 <ble_ll_adv_rx_pkt_in+0x24>
   205fa:	4770      	bx	lr
   205fc:	20003ee8 	.word	0x20003ee8

00020600 <ble_ll_adv_rx_isr_start>:
{
   20600:	b508      	push	{r3, lr}
    advsm = g_ble_ll_cur_adv_sm;
   20602:	4b0c      	ldr	r3, [pc, #48]	; (20634 <ble_ll_adv_rx_isr_start+0x34>)
   20604:	681b      	ldr	r3, [r3, #0]
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   20606:	2803      	cmp	r0, #3
   20608:	d007      	beq.n	2061a <ble_ll_adv_rx_isr_start+0x1a>
        if (pdu_type == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   2060a:	2805      	cmp	r0, #5
   2060c:	d10b      	bne.n	20626 <ble_ll_adv_rx_isr_start+0x26>
            if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   2060e:	899a      	ldrh	r2, [r3, #12]
   20610:	f012 0f01 	tst.w	r2, #1
   20614:	d007      	beq.n	20626 <ble_ll_adv_rx_isr_start+0x26>
                rc = 0;
   20616:	2000      	movs	r0, #0
}
   20618:	bd08      	pop	{r3, pc}
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   2061a:	899a      	ldrh	r2, [r3, #12]
   2061c:	f012 0f02 	tst.w	r2, #2
   20620:	d001      	beq.n	20626 <ble_ll_adv_rx_isr_start+0x26>
            rc = 1;
   20622:	2001      	movs	r0, #1
   20624:	e7f8      	b.n	20618 <ble_ll_adv_rx_isr_start+0x18>
        ble_ll_adv_tx_done(advsm);
   20626:	4618      	mov	r0, r3
   20628:	f7ff f956 	bl	1f8d8 <ble_ll_adv_tx_done>
   2062c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20630:	e7f2      	b.n	20618 <ble_ll_adv_rx_isr_start+0x18>
   20632:	bf00      	nop
   20634:	20003ee4 	.word	0x20003ee4

00020638 <ble_ll_adv_can_chg_whitelist>:
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   20638:	2300      	movs	r3, #0
   2063a:	2b00      	cmp	r3, #0
   2063c:	dd01      	ble.n	20642 <ble_ll_adv_can_chg_whitelist+0xa>
    rc = 1;
   2063e:	2001      	movs	r0, #1
   20640:	4770      	bx	lr
        if (advsm->adv_enabled &&
   20642:	01da      	lsls	r2, r3, #7
   20644:	4905      	ldr	r1, [pc, #20]	; (2065c <ble_ll_adv_can_chg_whitelist+0x24>)
   20646:	5c8a      	ldrb	r2, [r1, r2]
   20648:	b11a      	cbz	r2, 20652 <ble_ll_adv_can_chg_whitelist+0x1a>
            (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE)) {
   2064a:	eb01 12c3 	add.w	r2, r1, r3, lsl #7
   2064e:	78d2      	ldrb	r2, [r2, #3]
        if (advsm->adv_enabled &&
   20650:	b90a      	cbnz	r2, 20656 <ble_ll_adv_can_chg_whitelist+0x1e>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   20652:	3301      	adds	r3, #1
   20654:	e7f1      	b.n	2063a <ble_ll_adv_can_chg_whitelist+0x2>
            rc = 0;
   20656:	2000      	movs	r0, #0
}
   20658:	4770      	bx	lr
   2065a:	bf00      	nop
   2065c:	20003ee8 	.word	0x20003ee8

00020660 <ble_ll_adv_send_conn_comp_ev>:
{
   20660:	b508      	push	{r3, lr}
    evbuf = advsm->conn_comp_ev;
   20662:	4b07      	ldr	r3, [pc, #28]	; (20680 <ble_ll_adv_send_conn_comp_ev+0x20>)
   20664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    assert(evbuf != NULL);
   20666:	b12a      	cbz	r2, 20674 <ble_ll_adv_send_conn_comp_ev+0x14>
    advsm->conn_comp_ev = NULL;
   20668:	4b05      	ldr	r3, [pc, #20]	; (20680 <ble_ll_adv_send_conn_comp_ev+0x20>)
   2066a:	2100      	movs	r1, #0
   2066c:	6519      	str	r1, [r3, #80]	; 0x50
    ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, evbuf, advsm);
   2066e:	f002 f8d2 	bl	22816 <ble_ll_conn_comp_event_send>
}
   20672:	bd08      	pop	{r3, pc}
    assert(evbuf != NULL);
   20674:	2300      	movs	r3, #0
   20676:	461a      	mov	r2, r3
   20678:	4619      	mov	r1, r3
   2067a:	4618      	mov	r0, r3
   2067c:	f7ef ffae 	bl	105dc <__assert_func>
   20680:	20003ee8 	.word	0x20003ee8

00020684 <ble_ll_adv_get_local_rpa>:
{
   20684:	b510      	push	{r4, lr}
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   20686:	7903      	ldrb	r3, [r0, #4]
   20688:	2b01      	cmp	r3, #1
   2068a:	d90e      	bls.n	206aa <ble_ll_adv_get_local_rpa+0x26>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   2068c:	8943      	ldrh	r3, [r0, #10]
   2068e:	f013 0f01 	tst.w	r3, #1
   20692:	d00c      	beq.n	206ae <ble_ll_adv_get_local_rpa+0x2a>
                                    ble_ll_is_rpa(advsm->adva, 1)) {
   20694:	f100 0428 	add.w	r4, r0, #40	; 0x28
   20698:	2101      	movs	r1, #1
   2069a:	4620      	mov	r0, r4
   2069c:	f7fe fd0c 	bl	1f0b8 <ble_ll_is_rpa>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   206a0:	b108      	cbz	r0, 206a6 <ble_ll_adv_get_local_rpa+0x22>
}
   206a2:	4620      	mov	r0, r4
   206a4:	bd10      	pop	{r4, pc}
    uint8_t *rpa = NULL;
   206a6:	2400      	movs	r4, #0
   206a8:	e7fb      	b.n	206a2 <ble_ll_adv_get_local_rpa+0x1e>
   206aa:	2400      	movs	r4, #0
   206ac:	e7f9      	b.n	206a2 <ble_ll_adv_get_local_rpa+0x1e>
   206ae:	2400      	movs	r4, #0
    return rpa;
   206b0:	e7f7      	b.n	206a2 <ble_ll_adv_get_local_rpa+0x1e>

000206b2 <ble_ll_adv_get_peer_rpa>:
}
   206b2:	302e      	adds	r0, #46	; 0x2e
   206b4:	4770      	bx	lr
	...

000206b8 <ble_ll_adv_wfr_timer_exp>:
{
   206b8:	b508      	push	{r3, lr}
    ble_phy_disable();
   206ba:	f007 fe53 	bl	28364 <ble_phy_disable>
    ble_ll_adv_tx_done(g_ble_ll_cur_adv_sm);
   206be:	4b02      	ldr	r3, [pc, #8]	; (206c8 <ble_ll_adv_wfr_timer_exp+0x10>)
   206c0:	6818      	ldr	r0, [r3, #0]
   206c2:	f7ff f909 	bl	1f8d8 <ble_ll_adv_tx_done>
}
   206c6:	bd08      	pop	{r3, pc}
   206c8:	20003ee4 	.word	0x20003ee4

000206cc <ble_ll_adv_reset>:
{
   206cc:	b538      	push	{r3, r4, r5, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   206ce:	2500      	movs	r5, #0
   206d0:	2d00      	cmp	r5, #0
   206d2:	dd00      	ble.n	206d6 <ble_ll_adv_reset+0xa>
}
   206d4:	bd38      	pop	{r3, r4, r5, pc}
        advsm = &g_ble_ll_adv_sm[i];
   206d6:	4c08      	ldr	r4, [pc, #32]	; (206f8 <ble_ll_adv_reset+0x2c>)
   206d8:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
        ble_ll_adv_sm_stop(advsm);
   206dc:	4620      	mov	r0, r4
   206de:	f7ff fa55 	bl	1fb8c <ble_ll_adv_sm_stop>
        os_mbuf_free_chain(advsm->adv_data);
   206e2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   206e4:	f7f0 fbfa 	bl	10edc <os_mbuf_free_chain>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   206e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   206ea:	f7f0 fbf7 	bl	10edc <os_mbuf_free_chain>
        ble_ll_adv_sm_init(advsm);
   206ee:	4620      	mov	r0, r4
   206f0:	f7ff fc46 	bl	1ff80 <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   206f4:	3501      	adds	r5, #1
   206f6:	e7eb      	b.n	206d0 <ble_ll_adv_reset+0x4>
   206f8:	20003ee8 	.word	0x20003ee8

000206fc <ble_ll_adv_enabled>:
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   206fc:	2300      	movs	r3, #0
   206fe:	2b00      	cmp	r3, #0
   20700:	dd01      	ble.n	20706 <ble_ll_adv_enabled+0xa>
    return 0;
   20702:	2000      	movs	r0, #0
   20704:	4770      	bx	lr
        if (g_ble_ll_adv_sm[i].adv_enabled) {
   20706:	01da      	lsls	r2, r3, #7
   20708:	4903      	ldr	r1, [pc, #12]	; (20718 <ble_ll_adv_enabled+0x1c>)
   2070a:	5c8a      	ldrb	r2, [r1, r2]
   2070c:	b90a      	cbnz	r2, 20712 <ble_ll_adv_enabled+0x16>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   2070e:	3301      	adds	r3, #1
   20710:	e7f5      	b.n	206fe <ble_ll_adv_enabled+0x2>
            return 1;
   20712:	2001      	movs	r0, #1
}
   20714:	4770      	bx	lr
   20716:	bf00      	nop
   20718:	20003ee8 	.word	0x20003ee8

0002071c <ble_ll_adv_init>:
 * Initialize the advertising functionality of a BLE device. This should
 * be called once on initialization
 */
void
ble_ll_adv_init(void)
{
   2071c:	b510      	push	{r4, lr}
    int i;

    /* Set default advertising parameters */
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   2071e:	2400      	movs	r4, #0
   20720:	2c00      	cmp	r4, #0
   20722:	dd00      	ble.n	20726 <ble_ll_adv_init+0xa>
        g_ble_ll_adv_sm[i].adv_instance = i;
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
    }
}
   20724:	bd10      	pop	{r4, pc}
        g_ble_ll_adv_sm[i].adv_instance = i;
   20726:	4804      	ldr	r0, [pc, #16]	; (20738 <ble_ll_adv_init+0x1c>)
   20728:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
   2072c:	7044      	strb	r4, [r0, #1]
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
   2072e:	f7ff fc27 	bl	1ff80 <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   20732:	3401      	adds	r4, #1
   20734:	e7f4      	b.n	20720 <ble_ll_adv_init+0x4>
   20736:	bf00      	nop
   20738:	20003ee8 	.word	0x20003ee8

0002073c <ble_ll_conn_is_empty_pdu>:
ble_ll_conn_is_empty_pdu(uint8_t *rxbuf)
{
    int rc;
    uint8_t llid;

    llid = rxbuf[0] & BLE_LL_DATA_HDR_LLID_MASK;
   2073c:	7803      	ldrb	r3, [r0, #0]
   2073e:	f003 0303 	and.w	r3, r3, #3
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (rxbuf[1] == 0)) {
   20742:	2b01      	cmp	r3, #1
   20744:	d001      	beq.n	2074a <ble_ll_conn_is_empty_pdu+0xe>
        rc = 1;
    } else {
        rc = 0;
   20746:	2000      	movs	r0, #0
   20748:	4770      	bx	lr
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (rxbuf[1] == 0)) {
   2074a:	7843      	ldrb	r3, [r0, #1]
   2074c:	b10b      	cbz	r3, 20752 <ble_ll_conn_is_empty_pdu+0x16>
        rc = 0;
   2074e:	2000      	movs	r0, #0
   20750:	4770      	bx	lr
        rc = 1;
   20752:	2001      	movs	r0, #1
    }
    return rc;
}
   20754:	4770      	bx	lr

00020756 <ble_ll_conn_calc_dci_csa1>:
    return connsm;
}

static uint8_t
ble_ll_conn_calc_dci_csa1(struct ble_ll_conn_sm *conn)
{
   20756:	b508      	push	{r3, lr}
   20758:	4601      	mov	r1, r0
    uint8_t curchan;
    uint8_t remap_index;
    uint8_t bitpos;

    /* Get next unmapped channel */
    curchan = conn->last_unmapped_chan + conn->hop_inc;
   2075a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   2075e:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   20762:	4403      	add	r3, r0
   20764:	b2d8      	uxtb	r0, r3
    if (curchan > BLE_PHY_NUM_DATA_CHANS) {
   20766:	2825      	cmp	r0, #37	; 0x25
   20768:	d902      	bls.n	20770 <ble_ll_conn_calc_dci_csa1+0x1a>
        curchan -= BLE_PHY_NUM_DATA_CHANS;
   2076a:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   2076e:	b2d8      	uxtb	r0, r3
    }

    /* Save unmapped channel */
    conn->last_unmapped_chan = curchan;
   20770:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30

    /* Is this a valid channel? */
    bitpos = 1 << (curchan & 0x07);
   20774:	f000 0207 	and.w	r2, r0, #7
   20778:	2301      	movs	r3, #1
   2077a:	4093      	lsls	r3, r2
    if (conn->chanmap[curchan >> 3] & bitpos) {
   2077c:	f3c0 02c7 	ubfx	r2, r0, #3, #8
   20780:	440a      	add	r2, r1
   20782:	f892 2020 	ldrb.w	r2, [r2, #32]
   20786:	4213      	tst	r3, r2
   20788:	d000      	beq.n	2078c <ble_ll_conn_calc_dci_csa1+0x36>

    /* Calculate remap index */
    remap_index = curchan % conn->num_used_chans;

    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
}
   2078a:	bd08      	pop	{r3, pc}
    remap_index = curchan % conn->num_used_chans;
   2078c:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
   20790:	fbb0 f3f2 	udiv	r3, r0, r2
   20794:	fb02 0013 	mls	r0, r2, r3, r0
    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
   20798:	3120      	adds	r1, #32
   2079a:	b2c0      	uxtb	r0, r0
   2079c:	f006 ff12 	bl	275c4 <ble_ll_utils_remapped_channel>
   207a0:	e7f3      	b.n	2078a <ble_ll_conn_calc_dci_csa1+0x34>

000207a2 <ble_ll_conn_connect_ind_txend_to_init>:
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
}

static void
ble_ll_conn_connect_ind_txend_to_init(void *arg)
{
   207a2:	b508      	push	{r3, lr}
    ble_ll_state_set(BLE_LL_STATE_INITIATING);
   207a4:	2003      	movs	r0, #3
   207a6:	f7fe fe1f 	bl	1f3e8 <ble_ll_state_set>
}
   207aa:	bd08      	pop	{r3, pc}

000207ac <ble_ll_conn_connect_ind_txend_to_standby>:
{
   207ac:	b508      	push	{r3, lr}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   207ae:	2000      	movs	r0, #0
   207b0:	f7fe fe1a 	bl	1f3e8 <ble_ll_state_set>
}
   207b4:	bd08      	pop	{r3, pc}
	...

000207b8 <ble_ll_conn_current_sm_over>:
{
   207b8:	b510      	push	{r4, lr}
   207ba:	4604      	mov	r4, r0
    ble_phy_disable();
   207bc:	f007 fdd2 	bl	28364 <ble_phy_disable>
    ble_ll_wfr_disable();
   207c0:	f7fe fd32 	bl	1f228 <ble_ll_wfr_disable>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   207c4:	2000      	movs	r0, #0
   207c6:	f7fe fe0f 	bl	1f3e8 <ble_ll_state_set>
    g_ble_ll_conn_cur_sm = NULL;
   207ca:	4b04      	ldr	r3, [pc, #16]	; (207dc <ble_ll_conn_current_sm_over+0x24>)
   207cc:	2200      	movs	r2, #0
   207ce:	601a      	str	r2, [r3, #0]
    if (connsm) {
   207d0:	b11c      	cbz	r4, 207da <ble_ll_conn_current_sm_over+0x22>
        ble_ll_event_send(&connsm->conn_ev_end);
   207d2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   207d6:	f7fe fe13 	bl	1f400 <ble_ll_event_send>
}
   207da:	bd10      	pop	{r4, pc}
   207dc:	20003f80 	.word	0x20003f80

000207e0 <ble_ll_conn_rxend_unencrypt>:
{
   207e0:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 0;
   207e2:	7882      	ldrb	r2, [r0, #2]
   207e4:	f36f 0241 	bfc	r2, #1, #1
   207e8:	7082      	strb	r2, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   207ea:	f7ff ffe5 	bl	207b8 <ble_ll_conn_current_sm_over>
}
   207ee:	bd08      	pop	{r3, pc}

000207f0 <ble_ll_conn_txend_encrypt>:
{
   207f0:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 1;
   207f2:	7883      	ldrb	r3, [r0, #2]
   207f4:	f043 0302 	orr.w	r3, r3, #2
   207f8:	7083      	strb	r3, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   207fa:	f7ff ffdd 	bl	207b8 <ble_ll_conn_current_sm_over>
}
   207fe:	bd08      	pop	{r3, pc}

00020800 <ble_ll_conn_wait_txend>:
{
   20800:	b508      	push	{r3, lr}
    ble_ll_conn_current_sm_over(connsm);
   20802:	f7ff ffd9 	bl	207b8 <ble_ll_conn_current_sm_over>
}
   20806:	bd08      	pop	{r3, pc}

00020808 <ble_ll_init_get_conn_comp_ev>:
{
   20808:	b508      	push	{r3, lr}
    evbuf = g_ble_ll_conn_comp_ev;
   2080a:	4b06      	ldr	r3, [pc, #24]	; (20824 <ble_ll_init_get_conn_comp_ev+0x1c>)
   2080c:	6818      	ldr	r0, [r3, #0]
    BLE_LL_ASSERT(evbuf != NULL);
   2080e:	b118      	cbz	r0, 20818 <ble_ll_init_get_conn_comp_ev+0x10>
    g_ble_ll_conn_comp_ev = NULL;
   20810:	4b04      	ldr	r3, [pc, #16]	; (20824 <ble_ll_init_get_conn_comp_ev+0x1c>)
   20812:	2200      	movs	r2, #0
   20814:	601a      	str	r2, [r3, #0]
}
   20816:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(evbuf != NULL);
   20818:	2300      	movs	r3, #0
   2081a:	461a      	mov	r2, r3
   2081c:	4619      	mov	r1, r3
   2081e:	4618      	mov	r0, r3
   20820:	f7ef fedc 	bl	105dc <__assert_func>
   20824:	20003f84 	.word	0x20003f84

00020828 <ble_ll_conn_start_rx_encrypt>:
{
   20828:	b500      	push	{lr}
   2082a:	b083      	sub	sp, #12
   2082c:	4602      	mov	r2, r0
    CONN_F_ENCRYPTED(connsm) = 1;
   2082e:	7883      	ldrb	r3, [r0, #2]
   20830:	f043 0302 	orr.w	r3, r3, #2
   20834:	7083      	strb	r3, [r0, #2]
                           !CONN_IS_MASTER(connsm));
   20836:	79c3      	ldrb	r3, [r0, #7]
    ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   20838:	f8b2 011e 	ldrh.w	r0, [r2, #286]	; 0x11e
   2083c:	2100      	movs	r1, #0
   2083e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   20842:	bf18      	it	ne
   20844:	2301      	movne	r3, #1
   20846:	9300      	str	r3, [sp, #0]
   20848:	f502 73a8 	add.w	r3, r2, #336	; 0x150
   2084c:	f502 7294 	add.w	r2, r2, #296	; 0x128
   20850:	f007 fc9a 	bl	28188 <ble_phy_encrypt_enable>
}
   20854:	b003      	add	sp, #12
   20856:	f85d fb04 	ldr.w	pc, [sp], #4

0002085a <ble_ll_conn_start_rx_unencrypt>:
{
   2085a:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 0;
   2085c:	7883      	ldrb	r3, [r0, #2]
   2085e:	f36f 0341 	bfc	r3, #1, #1
   20862:	7083      	strb	r3, [r0, #2]
    ble_phy_encrypt_disable();
   20864:	f007 fcc0 	bl	281e8 <ble_phy_encrypt_disable>
}
   20868:	bd08      	pop	{r3, pc}

0002086a <ble_ll_conn_continue_rx_encrypt>:
{
   2086a:	b508      	push	{r3, lr}
                                 !CONN_IS_MASTER(connsm));
   2086c:	79c2      	ldrb	r2, [r0, #7]
    ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.rx_pkt_cntr,
   2086e:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   20872:	bf18      	it	ne
   20874:	2201      	movne	r2, #1
   20876:	f8b0 011e 	ldrh.w	r0, [r0, #286]	; 0x11e
   2087a:	2100      	movs	r1, #0
   2087c:	f007 fcac 	bl	281d8 <ble_phy_encrypt_set_pkt_cntr>
}
   20880:	bd08      	pop	{r3, pc}

00020882 <ble_ll_conn_adjust_pyld_len>:
{
   20882:	b538      	push	{r3, r4, r5, lr}
   20884:	4604      	mov	r4, r0
   20886:	460d      	mov	r5, r1
    phy_max_tx_octets = ble_ll_pdu_max_tx_octets_get(connsm->eff_max_tx_time,
   20888:	2101      	movs	r1, #1
   2088a:	8b00      	ldrh	r0, [r0, #24]
   2088c:	f7fe fe0c 	bl	1f4a8 <ble_ll_pdu_max_tx_octets_get>
    if (ret > connsm->eff_max_tx_octets) {
   20890:	7ba3      	ldrb	r3, [r4, #14]
   20892:	42ab      	cmp	r3, r5
   20894:	d300      	bcc.n	20898 <ble_ll_conn_adjust_pyld_len+0x16>
    ret = pyld_len;
   20896:	462b      	mov	r3, r5
    if (ret > phy_max_tx_octets) {
   20898:	4283      	cmp	r3, r0
   2089a:	d900      	bls.n	2089e <ble_ll_conn_adjust_pyld_len+0x1c>
}
   2089c:	bd38      	pop	{r3, r4, r5, pc}
    if (ret > phy_max_tx_octets) {
   2089e:	4618      	mov	r0, r3
   208a0:	e7fc      	b.n	2089c <ble_ll_conn_adjust_pyld_len+0x1a>

000208a2 <ble_ll_update_max_tx_octets_phy_mode>:
{
   208a2:	b538      	push	{r3, r4, r5, lr}
   208a4:	4604      	mov	r4, r0
    usecs = connsm->eff_max_tx_time;
   208a6:	8b05      	ldrh	r5, [r0, #24]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_1M);
   208a8:	2101      	movs	r1, #1
   208aa:	4628      	mov	r0, r5
   208ac:	f7fe fdfc 	bl	1f4a8 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_1M] =
   208b0:	7760      	strb	r0, [r4, #29]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_2M);
   208b2:	2102      	movs	r1, #2
   208b4:	4628      	mov	r0, r5
   208b6:	f7fe fdf7 	bl	1f4a8 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_2M] =
   208ba:	77a0      	strb	r0, [r4, #30]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_CODED_125KBPS);
   208bc:	2100      	movs	r1, #0
   208be:	4628      	mov	r0, r5
   208c0:	f7fe fdf2 	bl	1f4a8 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_CODED_125KBPS] =
   208c4:	7720      	strb	r0, [r4, #28]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_CODED_500KBPS);
   208c6:	2103      	movs	r1, #3
   208c8:	4628      	mov	r0, r5
   208ca:	f7fe fded 	bl	1f4a8 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_CODED_500KBPS] =
   208ce:	77e0      	strb	r0, [r4, #31]
}
   208d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000208d4 <ble_ll_conn_get_next_sched_time>:
{
   208d4:	b510      	push	{r4, lr}
   208d6:	b082      	sub	sp, #8
    ce_end = connsm->anchor_point + connsm->conn_itvl_ticks -
   208d8:	6f44      	ldr	r4, [r0, #116]	; 0x74
   208da:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   208dc:	441c      	add	r4, r3
   208de:	4b0c      	ldr	r3, [pc, #48]	; (20910 <ble_ll_conn_get_next_sched_time+0x3c>)
   208e0:	781b      	ldrb	r3, [r3, #0]
   208e2:	1ae4      	subs	r4, r4, r3
    if ((connsm->anchor_point_usecs + connsm->conn_itvl_usecs) >= 31) {
   208e4:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   208e8:	f890 2079 	ldrb.w	r2, [r0, #121]	; 0x79
   208ec:	4413      	add	r3, r2
   208ee:	2b1e      	cmp	r3, #30
   208f0:	dd00      	ble.n	208f4 <ble_ll_conn_get_next_sched_time+0x20>
        ++ce_end;
   208f2:	3401      	adds	r4, #1
    if (ble_ll_sched_next_time(&next_sched_time)) {
   208f4:	a801      	add	r0, sp, #4
   208f6:	f006 fdb5 	bl	27464 <ble_ll_sched_next_time>
   208fa:	b118      	cbz	r0, 20904 <ble_ll_conn_get_next_sched_time+0x30>
        if (CPUTIME_LT(next_sched_time, ce_end)) {
   208fc:	9b01      	ldr	r3, [sp, #4]
   208fe:	1b1a      	subs	r2, r3, r4
   20900:	2a00      	cmp	r2, #0
   20902:	db02      	blt.n	2090a <ble_ll_conn_get_next_sched_time+0x36>
}
   20904:	4620      	mov	r0, r4
   20906:	b002      	add	sp, #8
   20908:	bd10      	pop	{r4, pc}
            ce_end = next_sched_time;
   2090a:	461c      	mov	r4, r3
    return ce_end;
   2090c:	e7fa      	b.n	20904 <ble_ll_conn_get_next_sched_time+0x30>
   2090e:	bf00      	nop
   20910:	200042ac 	.word	0x200042ac

00020914 <ble_ll_conn_tx_data_pdu>:
{
   20914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20918:	b08f      	sub	sp, #60	; 0x3c
   2091a:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   2091c:	7803      	ldrb	r3, [r0, #0]
   2091e:	f013 0f04 	tst.w	r3, #4
   20922:	d035      	beq.n	20990 <ble_ll_conn_tx_data_pdu+0x7c>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   20924:	7843      	ldrb	r3, [r0, #1]
   20926:	f043 0320 	orr.w	r3, r3, #32
   2092a:	7043      	strb	r3, [r0, #1]
    ble_hdr = NULL;
   2092c:	2700      	movs	r7, #0
    m = NULL;
   2092e:	463d      	mov	r5, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   20930:	2601      	movs	r6, #1
    md = 0;
   20932:	46b9      	mov	r9, r7
    if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   20934:	7863      	ldrb	r3, [r4, #1]
   20936:	f013 0f20 	tst.w	r3, #32
   2093a:	d00a      	beq.n	20952 <ble_ll_conn_tx_data_pdu+0x3e>
        m->om_data += BLE_MBUF_MEMBLOCK_OVERHEAD;
   2093c:	ab0e      	add	r3, sp, #56	; 0x38
   2093e:	9304      	str	r3, [sp, #16]
        ble_hdr->txinfo.flags = 0;
   20940:	2300      	movs	r3, #0
   20942:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        ble_hdr->txinfo.offset = 0;
   20946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        ble_hdr->txinfo.pyld_len = 0;
   2094a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        ble_hdr = &empty_pdu.ble_hdr;
   2094e:	af0a      	add	r7, sp, #40	; 0x28
        m = (struct os_mbuf *)&empty_pdu;
   20950:	ad04      	add	r5, sp, #16
    if (connsm->tx_seqnum) {
   20952:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   20956:	b10b      	cbz	r3, 2095c <ble_ll_conn_tx_data_pdu+0x48>
        hdr_byte |= BLE_LL_DATA_HDR_SN_MASK;
   20958:	f046 0608 	orr.w	r6, r6, #8
    if (md) {
   2095c:	f1b9 0f00 	cmp.w	r9, #0
   20960:	d001      	beq.n	20966 <ble_ll_conn_tx_data_pdu+0x52>
        hdr_byte |= BLE_LL_DATA_HDR_MD_MASK;
   20962:	f046 0610 	orr.w	r6, r6, #16
    if (connsm->next_exp_seqnum) {
   20966:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   2096a:	b10b      	cbz	r3, 20970 <ble_ll_conn_tx_data_pdu+0x5c>
        hdr_byte |= BLE_LL_DATA_HDR_NESN_MASK;
   2096c:	f046 0604 	orr.w	r6, r6, #4
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   20970:	70fe      	strb	r6, [r7, #3]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   20972:	7823      	ldrb	r3, [r4, #0]
   20974:	f013 0f04 	tst.w	r3, #4
   20978:	f040 8122 	bne.w	20bc0 <ble_ll_conn_tx_data_pdu+0x2ac>
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   2097c:	f894 8007 	ldrb.w	r8, [r4, #7]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   20980:	f1b8 0f02 	cmp.w	r8, #2
   20984:	f000 8105 	beq.w	20b92 <ble_ll_conn_tx_data_pdu+0x27e>
        txend_func = NULL;
   20988:	2600      	movs	r6, #0
        end_transition = BLE_PHY_TRANSITION_TX_RX;
   2098a:	f04f 0802 	mov.w	r8, #2
   2098e:	e11a      	b.n	20bc6 <ble_ll_conn_tx_data_pdu+0x2b2>
    pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   20990:	f8d0 80b0 	ldr.w	r8, [r0, #176]	; 0xb0
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   20994:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
   20998:	b335      	cbz	r5, 209e8 <ble_ll_conn_tx_data_pdu+0xd4>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   2099a:	b39d      	cbz	r5, 20a04 <ble_ll_conn_tx_data_pdu+0xf0>
        if (connsm->cur_tx_pdu) {
   2099c:	2d00      	cmp	r5, #0
   2099e:	f000 8088 	beq.w	20ab2 <ble_ll_conn_tx_data_pdu+0x19e>
            ble_hdr = BLE_MBUF_HDR_PTR(m);
   209a2:	f105 0718 	add.w	r7, r5, #24
            pktlen = OS_MBUF_PKTLEN(m);
   209a6:	f8b5 9010 	ldrh.w	r9, [r5, #16]
            cur_txlen = ble_hdr->txinfo.pyld_len;
   209aa:	f895 b01a 	ldrb.w	fp, [r5, #26]
            cur_offset = ble_hdr->txinfo.offset;
   209ae:	f895 a019 	ldrb.w	sl, [r5, #25]
            if (cur_offset == 0) {
   209b2:	f1ba 0f00 	cmp.w	sl, #0
   209b6:	d172      	bne.n	20a9e <ble_ll_conn_tx_data_pdu+0x18a>
                hdr_byte = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   209b8:	7eee      	ldrb	r6, [r5, #27]
   209ba:	f006 0603 	and.w	r6, r6, #3
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   209be:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   209c2:	2b02      	cmp	r3, #2
   209c4:	f240 808b 	bls.w	20ade <ble_ll_conn_tx_data_pdu+0x1ca>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   209c8:	f1b8 0f00 	cmp.w	r8, #0
   209cc:	f000 8087 	beq.w	20ade <ble_ll_conn_tx_data_pdu+0x1ca>
   209d0:	4640      	mov	r0, r8
   209d2:	f002 ffa8 	bl	23926 <ble_ll_ctrl_enc_allowed_pdu_tx>
   209d6:	2800      	cmp	r0, #0
   209d8:	f040 8081 	bne.w	20ade <ble_ll_conn_tx_data_pdu+0x1ca>
                    && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   209dc:	79e3      	ldrb	r3, [r4, #7]
   209de:	2b01      	cmp	r3, #1
   209e0:	d15f      	bne.n	20aa2 <ble_ll_conn_tx_data_pdu+0x18e>
                    nextpkthdr = NULL;
   209e2:	f04f 0800 	mov.w	r8, #0
   209e6:	e07a      	b.n	20ade <ble_ll_conn_tx_data_pdu+0x1ca>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   209e8:	7843      	ldrb	r3, [r0, #1]
   209ea:	f013 0f20 	tst.w	r3, #32
   209ee:	d1d4      	bne.n	2099a <ble_ll_conn_tx_data_pdu+0x86>
   209f0:	f1b8 0f00 	cmp.w	r8, #0
   209f4:	d1d1      	bne.n	2099a <ble_ll_conn_tx_data_pdu+0x86>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   209f6:	f043 0320 	orr.w	r3, r3, #32
   209fa:	7043      	strb	r3, [r0, #1]
    ble_hdr = NULL;
   209fc:	2700      	movs	r7, #0
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   209fe:	2601      	movs	r6, #1
    md = 0;
   20a00:	46b9      	mov	r9, r7
        goto conn_tx_pdu;
   20a02:	e797      	b.n	20934 <ble_ll_conn_tx_data_pdu+0x20>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   20a04:	7863      	ldrb	r3, [r4, #1]
   20a06:	f013 0f20 	tst.w	r3, #32
   20a0a:	d1c7      	bne.n	2099c <ble_ll_conn_tx_data_pdu+0x88>
        m = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   20a0c:	f1a8 0510 	sub.w	r5, r8, #16
        nextpkthdr = STAILQ_NEXT(pkthdr, omp_next);
   20a10:	f8d8 a004 	ldr.w	sl, [r8, #4]
        if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   20a14:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   20a18:	2b02      	cmp	r3, #2
   20a1a:	d819      	bhi.n	20a50 <ble_ll_conn_tx_data_pdu+0x13c>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   20a1c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   20a20:	685b      	ldr	r3, [r3, #4]
   20a22:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   20a26:	b3ab      	cbz	r3, 20a94 <ble_ll_conn_tx_data_pdu+0x180>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   20a28:	f108 0708 	add.w	r7, r8, #8
        pktlen = pkthdr->omp_len;
   20a2c:	f8b8 9000 	ldrh.w	r9, [r8]
        cur_txlen = ble_ll_conn_adjust_pyld_len(connsm, pktlen);
   20a30:	4649      	mov	r1, r9
   20a32:	4620      	mov	r0, r4
   20a34:	f7ff ff25 	bl	20882 <ble_ll_conn_adjust_pyld_len>
   20a38:	fa5f fb80 	uxtb.w	fp, r0
        ble_hdr->txinfo.pyld_len = cur_txlen;
   20a3c:	f888 b00a 	strb.w	fp, [r8, #10]
        hdr_byte = ble_hdr->txinfo.hdr_byte;
   20a40:	f898 600b 	ldrb.w	r6, [r8, #11]
        connsm->cur_tx_pdu = m;
   20a44:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
   20a48:	46d0      	mov	r8, sl
    cur_offset = 0;
   20a4a:	f04f 0a00 	mov.w	sl, #0
        connsm->cur_tx_pdu = m;
   20a4e:	e046      	b.n	20ade <ble_ll_conn_tx_data_pdu+0x1ca>
            if (!ble_ll_ctrl_enc_allowed_pdu_tx(pkthdr)) {
   20a50:	4640      	mov	r0, r8
   20a52:	f002 ff68 	bl	23926 <ble_ll_ctrl_enc_allowed_pdu_tx>
   20a56:	b938      	cbnz	r0, 20a68 <ble_ll_conn_tx_data_pdu+0x154>
                CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   20a58:	7863      	ldrb	r3, [r4, #1]
   20a5a:	f043 0320 	orr.w	r3, r3, #32
   20a5e:	7063      	strb	r3, [r4, #1]
    ble_hdr = NULL;
   20a60:	2700      	movs	r7, #0
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   20a62:	2601      	movs	r6, #1
    md = 0;
   20a64:	46b9      	mov	r9, r7
                goto conn_tx_pdu;
   20a66:	e765      	b.n	20934 <ble_ll_conn_tx_data_pdu+0x20>
            if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   20a68:	f1ba 0f00 	cmp.w	sl, #0
   20a6c:	d0d6      	beq.n	20a1c <ble_ll_conn_tx_data_pdu+0x108>
   20a6e:	4650      	mov	r0, sl
   20a70:	f002 ff59 	bl	23926 <ble_ll_ctrl_enc_allowed_pdu_tx>
   20a74:	2800      	cmp	r0, #0
   20a76:	d1d1      	bne.n	20a1c <ble_ll_conn_tx_data_pdu+0x108>
                && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   20a78:	79e3      	ldrb	r3, [r4, #7]
   20a7a:	2b01      	cmp	r3, #1
   20a7c:	d007      	beq.n	20a8e <ble_ll_conn_tx_data_pdu+0x17a>
                    !ble_ll_ctrl_is_start_enc_rsp(m))) {
   20a7e:	4628      	mov	r0, r5
   20a80:	f002 ff61 	bl	23946 <ble_ll_ctrl_is_start_enc_rsp>
                && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   20a84:	2800      	cmp	r0, #0
   20a86:	d1c9      	bne.n	20a1c <ble_ll_conn_tx_data_pdu+0x108>
                nextpkthdr = NULL;
   20a88:	f04f 0a00 	mov.w	sl, #0
   20a8c:	e7c6      	b.n	20a1c <ble_ll_conn_tx_data_pdu+0x108>
   20a8e:	f04f 0a00 	mov.w	sl, #0
   20a92:	e7c3      	b.n	20a1c <ble_ll_conn_tx_data_pdu+0x108>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   20a94:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   20a98:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   20a9c:	e7c4      	b.n	20a28 <ble_ll_conn_tx_data_pdu+0x114>
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   20a9e:	2601      	movs	r6, #1
   20aa0:	e78d      	b.n	209be <ble_ll_conn_tx_data_pdu+0xaa>
                        !ble_ll_ctrl_is_start_enc_rsp(connsm->cur_tx_pdu))) {
   20aa2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   20aa6:	f002 ff4e 	bl	23946 <ble_ll_ctrl_is_start_enc_rsp>
                    && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   20aaa:	b9c0      	cbnz	r0, 20ade <ble_ll_conn_tx_data_pdu+0x1ca>
                    nextpkthdr = NULL;
   20aac:	f04f 0800 	mov.w	r8, #0
   20ab0:	e015      	b.n	20ade <ble_ll_conn_tx_data_pdu+0x1ca>
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   20ab2:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   20ab6:	2b02      	cmp	r3, #2
   20ab8:	d90c      	bls.n	20ad4 <ble_ll_conn_tx_data_pdu+0x1c0>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)) {
   20aba:	f1b8 0f00 	cmp.w	r8, #0
   20abe:	d018      	beq.n	20af2 <ble_ll_conn_tx_data_pdu+0x1de>
   20ac0:	4640      	mov	r0, r8
   20ac2:	f002 ff30 	bl	23926 <ble_ll_ctrl_enc_allowed_pdu_tx>
   20ac6:	b1d0      	cbz	r0, 20afe <ble_ll_conn_tx_data_pdu+0x1ea>
    ble_hdr = NULL;
   20ac8:	2700      	movs	r7, #0
            pktlen = 0;
   20aca:	46b9      	mov	r9, r7
    cur_offset = 0;
   20acc:	46ba      	mov	sl, r7
            cur_txlen = 0;
   20ace:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   20ad0:	2601      	movs	r6, #1
   20ad2:	e004      	b.n	20ade <ble_ll_conn_tx_data_pdu+0x1ca>
    ble_hdr = NULL;
   20ad4:	2700      	movs	r7, #0
            pktlen = 0;
   20ad6:	46b9      	mov	r9, r7
    cur_offset = 0;
   20ad8:	46ba      	mov	sl, r7
            cur_txlen = 0;
   20ada:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   20adc:	2601      	movs	r6, #1
    if ((nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) &&
   20ade:	f1b8 0f00 	cmp.w	r8, #0
   20ae2:	d014      	beq.n	20b0e <ble_ll_conn_tx_data_pdu+0x1fa>
         !connsm->csmflags.cfbit.terminate_ind_rxd) {
   20ae4:	7823      	ldrb	r3, [r4, #0]
    if ((nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) &&
   20ae6:	f013 0f04 	tst.w	r3, #4
   20aea:	d017      	beq.n	20b1c <ble_ll_conn_tx_data_pdu+0x208>
    md = 0;
   20aec:	f04f 0900 	mov.w	r9, #0
   20af0:	e720      	b.n	20934 <ble_ll_conn_tx_data_pdu+0x20>
    ble_hdr = NULL;
   20af2:	2700      	movs	r7, #0
            pktlen = 0;
   20af4:	46b9      	mov	r9, r7
    cur_offset = 0;
   20af6:	46ba      	mov	sl, r7
            cur_txlen = 0;
   20af8:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   20afa:	2601      	movs	r6, #1
   20afc:	e7ef      	b.n	20ade <ble_ll_conn_tx_data_pdu+0x1ca>
                    nextpkthdr = NULL;
   20afe:	f04f 0800 	mov.w	r8, #0
    ble_hdr = NULL;
   20b02:	4647      	mov	r7, r8
            pktlen = 0;
   20b04:	46c1      	mov	r9, r8
    cur_offset = 0;
   20b06:	46c2      	mov	sl, r8
            cur_txlen = 0;
   20b08:	46c3      	mov	fp, r8
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   20b0a:	2601      	movs	r6, #1
   20b0c:	e7e7      	b.n	20ade <ble_ll_conn_tx_data_pdu+0x1ca>
    if ((nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) &&
   20b0e:	eb0a 030b 	add.w	r3, sl, fp
   20b12:	454b      	cmp	r3, r9
   20b14:	dbe6      	blt.n	20ae4 <ble_ll_conn_tx_data_pdu+0x1d0>
    md = 0;
   20b16:	f04f 0900 	mov.w	r9, #0
   20b1a:	e70b      	b.n	20934 <ble_ll_conn_tx_data_pdu+0x20>
        next_event_time = ble_ll_conn_get_next_sched_time(connsm);
   20b1c:	4620      	mov	r0, r4
   20b1e:	f7ff fed9 	bl	208d4 <ble_ll_conn_get_next_sched_time>
   20b22:	9003      	str	r0, [sp, #12]
        if ((cur_offset + cur_txlen) < pktlen) {
   20b24:	eb0a 030b 	add.w	r3, sl, fp
   20b28:	454b      	cmp	r3, r9
   20b2a:	da23      	bge.n	20b74 <ble_ll_conn_tx_data_pdu+0x260>
            next_txlen = pktlen - (cur_offset + cur_txlen);
   20b2c:	fa5f f089 	uxtb.w	r0, r9
   20b30:	fa5f f983 	uxtb.w	r9, r3
   20b34:	eba0 0009 	sub.w	r0, r0, r9
   20b38:	b2c0      	uxtb	r0, r0
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   20b3a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   20b3e:	2101      	movs	r1, #1
   20b40:	f7fe fcae 	bl	1f4a0 <ble_ll_pdu_tx_time_get>
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   20b44:	4480      	add	r8, r0
            ble_ll_pdu_tx_time_get(cur_txlen, tx_phy_mode);
   20b46:	2101      	movs	r1, #1
   20b48:	4658      	mov	r0, fp
   20b4a:	f7fe fca9 	bl	1f4a0 <ble_ll_pdu_tx_time_get>
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   20b4e:	4440      	add	r0, r8
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   20b50:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   20b54:	79e3      	ldrb	r3, [r4, #7]
   20b56:	2b01      	cmp	r3, #1
   20b58:	d014      	beq.n	20b84 <ble_ll_conn_tx_data_pdu+0x270>
        ticks = os_cputime_usecs_to_ticks(ticks);
   20b5a:	f7ef ff93 	bl	10a84 <os_cputime_usecs_to_ticks>
   20b5e:	4680      	mov	r8, r0
        if ((int32_t)((os_cputime_get32() + ticks) - next_event_time) < 0) {
   20b60:	f7ef ff8a 	bl	10a78 <os_cputime_get32>
   20b64:	4440      	add	r0, r8
   20b66:	9b03      	ldr	r3, [sp, #12]
   20b68:	1ac0      	subs	r0, r0, r3
   20b6a:	2800      	cmp	r0, #0
   20b6c:	db0e      	blt.n	20b8c <ble_ll_conn_tx_data_pdu+0x278>
    md = 0;
   20b6e:	f04f 0900 	mov.w	r9, #0
   20b72:	e6df      	b.n	20934 <ble_ll_conn_tx_data_pdu+0x20>
            if (nextpkthdr->omp_len > connsm->eff_max_tx_octets) {
   20b74:	f8b8 3000 	ldrh.w	r3, [r8]
   20b78:	7ba0      	ldrb	r0, [r4, #14]
   20b7a:	b282      	uxth	r2, r0
   20b7c:	4293      	cmp	r3, r2
   20b7e:	d8dc      	bhi.n	20b3a <ble_ll_conn_tx_data_pdu+0x226>
                next_txlen = nextpkthdr->omp_len;
   20b80:	b2d8      	uxtb	r0, r3
   20b82:	e7da      	b.n	20b3a <ble_ll_conn_tx_data_pdu+0x226>
            ticks += (BLE_LL_IFS + connsm->eff_max_rx_time);
   20b84:	8b63      	ldrh	r3, [r4, #26]
   20b86:	4418      	add	r0, r3
   20b88:	3096      	adds	r0, #150	; 0x96
   20b8a:	e7e6      	b.n	20b5a <ble_ll_conn_tx_data_pdu+0x246>
            md = 1;
   20b8c:	f04f 0901 	mov.w	r9, #1
   20b90:	e6d0      	b.n	20934 <ble_ll_conn_tx_data_pdu+0x20>
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   20b92:	f1b9 0f00 	cmp.w	r9, #0
   20b96:	d144      	bne.n	20c22 <ble_ll_conn_tx_data_pdu+0x30e>
         (connsm->cons_rxd_bad_crc == 0) &&
   20b98:	f894 a034 	ldrb.w	sl, [r4, #52]	; 0x34
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   20b9c:	f1ba 0f00 	cmp.w	sl, #0
   20ba0:	d141      	bne.n	20c26 <ble_ll_conn_tx_data_pdu+0x312>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   20ba2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
         (connsm->cons_rxd_bad_crc == 0) &&
   20ba6:	f013 0f10 	tst.w	r3, #16
   20baa:	d001      	beq.n	20bb0 <ble_ll_conn_tx_data_pdu+0x29c>
        txend_func = NULL;
   20bac:	2600      	movs	r6, #0
   20bae:	e00a      	b.n	20bc6 <ble_ll_conn_tx_data_pdu+0x2b2>
         !ble_ll_ctrl_is_terminate_ind(hdr_byte, m->om_data[0]))) {
   20bb0:	682b      	ldr	r3, [r5, #0]
   20bb2:	7819      	ldrb	r1, [r3, #0]
   20bb4:	4630      	mov	r0, r6
   20bb6:	f002 ffd0 	bl	23b5a <ble_ll_ctrl_is_terminate_ind>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   20bba:	b3b0      	cbz	r0, 20c2a <ble_ll_conn_tx_data_pdu+0x316>
        txend_func = NULL;
   20bbc:	2600      	movs	r6, #0
   20bbe:	e002      	b.n	20bc6 <ble_ll_conn_tx_data_pdu+0x2b2>
        txend_func = ble_ll_conn_wait_txend;
   20bc0:	4e50      	ldr	r6, [pc, #320]	; (20d04 <ble_ll_conn_tx_data_pdu+0x3f0>)
        end_transition = BLE_PHY_TRANSITION_NONE;
   20bc2:	f04f 0800 	mov.w	r8, #0
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   20bc6:	78fb      	ldrb	r3, [r7, #3]
   20bc8:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   20bcc:	2b03      	cmp	r3, #3
   20bce:	d02f      	beq.n	20c30 <ble_ll_conn_tx_data_pdu+0x31c>
        opcode = 0;
   20bd0:	2300      	movs	r3, #0
        is_ctrl = 0;
   20bd2:	461a      	mov	r2, r3
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_REQ)) {
   20bd4:	b10a      	cbz	r2, 20bda <ble_ll_conn_tx_data_pdu+0x2c6>
   20bd6:	2b05      	cmp	r3, #5
   20bd8:	d047      	beq.n	20c6a <ble_ll_conn_tx_data_pdu+0x356>
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_PAUSE_ENC_RSP)) {
   20bda:	b10a      	cbz	r2, 20be0 <ble_ll_conn_tx_data_pdu+0x2cc>
   20bdc:	2b0b      	cmp	r3, #11
   20bde:	d055      	beq.n	20c8c <ble_ll_conn_tx_data_pdu+0x378>
        if (CONN_F_ENCRYPTED(connsm)) {
   20be0:	78a3      	ldrb	r3, [r4, #2]
   20be2:	f013 0f02 	tst.w	r3, #2
   20be6:	d17b      	bne.n	20ce0 <ble_ll_conn_tx_data_pdu+0x3cc>
    ble_phy_set_txend_cb(txend_func, connsm);
   20be8:	4621      	mov	r1, r4
   20bea:	4630      	mov	r0, r6
   20bec:	f007 fb12 	bl	28214 <ble_phy_set_txend_cb>
    rc = ble_phy_tx(ble_ll_tx_mbuf_pducb, m, end_transition);
   20bf0:	4642      	mov	r2, r8
   20bf2:	4629      	mov	r1, r5
   20bf4:	4844      	ldr	r0, [pc, #272]	; (20d08 <ble_ll_conn_tx_data_pdu+0x3f4>)
   20bf6:	f007 fd99 	bl	2872c <ble_phy_tx>
    if (!rc) {
   20bfa:	4602      	mov	r2, r0
   20bfc:	b968      	cbnz	r0, 20c1a <ble_ll_conn_tx_data_pdu+0x306>
        CONN_F_LAST_TXD_MD(connsm) = md;
   20bfe:	7863      	ldrb	r3, [r4, #1]
   20c00:	f369 1386 	bfi	r3, r9, #6, #1
   20c04:	7063      	strb	r3, [r4, #1]
        if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   20c06:	f013 0f20 	tst.w	r3, #32
   20c0a:	d006      	beq.n	20c1a <ble_ll_conn_tx_data_pdu+0x306>
            if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   20c0c:	7823      	ldrb	r3, [r4, #0]
   20c0e:	f013 0f04 	tst.w	r3, #4
   20c12:	d002      	beq.n	20c1a <ble_ll_conn_tx_data_pdu+0x306>
                connsm->csmflags.cfbit.terminate_ind_rxd_acked = 1;
   20c14:	f043 0308 	orr.w	r3, r3, #8
   20c18:	7023      	strb	r3, [r4, #0]
}
   20c1a:	4610      	mov	r0, r2
   20c1c:	b00f      	add	sp, #60	; 0x3c
   20c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txend_func = NULL;
   20c22:	2600      	movs	r6, #0
   20c24:	e7cf      	b.n	20bc6 <ble_ll_conn_tx_data_pdu+0x2b2>
   20c26:	2600      	movs	r6, #0
   20c28:	e7cd      	b.n	20bc6 <ble_ll_conn_tx_data_pdu+0x2b2>
        end_transition = BLE_PHY_TRANSITION_NONE;
   20c2a:	46d0      	mov	r8, sl
        txend_func = ble_ll_conn_wait_txend;
   20c2c:	4e35      	ldr	r6, [pc, #212]	; (20d04 <ble_ll_conn_tx_data_pdu+0x3f0>)
   20c2e:	e7ca      	b.n	20bc6 <ble_ll_conn_tx_data_pdu+0x2b2>
        opcode = m->om_data[0];
   20c30:	682b      	ldr	r3, [r5, #0]
   20c32:	781b      	ldrb	r3, [r3, #0]
    if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_RSP)) {
   20c34:	2b06      	cmp	r3, #6
   20c36:	d001      	beq.n	20c3c <ble_ll_conn_tx_data_pdu+0x328>
        is_ctrl = 1;
   20c38:	2201      	movs	r2, #1
   20c3a:	e7cb      	b.n	20bd4 <ble_ll_conn_tx_data_pdu+0x2c0>
        CONN_F_ENCRYPTED(connsm) = 1;
   20c3c:	78a3      	ldrb	r3, [r4, #2]
   20c3e:	f043 0302 	orr.w	r3, r3, #2
   20c42:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.tx_encrypted = 1;
   20c44:	2301      	movs	r3, #1
   20c46:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
                               CONN_IS_MASTER(connsm));
   20c4a:	79e3      	ldrb	r3, [r4, #7]
        ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   20c4c:	f8b4 011c 	ldrh.w	r0, [r4, #284]	; 0x11c
   20c50:	2100      	movs	r1, #0
   20c52:	2b01      	cmp	r3, #1
   20c54:	bf14      	ite	ne
   20c56:	2300      	movne	r3, #0
   20c58:	2301      	moveq	r3, #1
   20c5a:	9300      	str	r3, [sp, #0]
   20c5c:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   20c60:	f504 7294 	add.w	r2, r4, #296	; 0x128
   20c64:	f007 fa90 	bl	28188 <ble_phy_encrypt_enable>
   20c68:	e7be      	b.n	20be8 <ble_ll_conn_tx_data_pdu+0x2d4>
        CONN_F_ENCRYPTED(connsm) = 0;
   20c6a:	78a3      	ldrb	r3, [r4, #2]
   20c6c:	f36f 0341 	bfc	r3, #1, #1
   20c70:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
   20c72:	2307      	movs	r3, #7
   20c74:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        connsm->enc_data.tx_encrypted = 0;
   20c78:	2300      	movs	r3, #0
   20c7a:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
        ble_phy_encrypt_disable();
   20c7e:	f007 fab3 	bl	281e8 <ble_phy_encrypt_disable>
        if (txend_func == NULL) {
   20c82:	b10e      	cbz	r6, 20c88 <ble_ll_conn_tx_data_pdu+0x374>
            txend_func = ble_ll_conn_txend_encrypt;
   20c84:	4e21      	ldr	r6, [pc, #132]	; (20d0c <ble_ll_conn_tx_data_pdu+0x3f8>)
   20c86:	e7af      	b.n	20be8 <ble_ll_conn_tx_data_pdu+0x2d4>
            txend_func = ble_ll_conn_start_rx_encrypt;
   20c88:	4e21      	ldr	r6, [pc, #132]	; (20d10 <ble_ll_conn_tx_data_pdu+0x3fc>)
   20c8a:	e7ad      	b.n	20be8 <ble_ll_conn_tx_data_pdu+0x2d4>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   20c8c:	79e3      	ldrb	r3, [r4, #7]
   20c8e:	2b02      	cmp	r3, #2
   20c90:	d00c      	beq.n	20cac <ble_ll_conn_tx_data_pdu+0x398>
            CONN_F_ENCRYPTED(connsm) = 0;
   20c92:	78a3      	ldrb	r3, [r4, #2]
   20c94:	f36f 0341 	bfc	r3, #1, #1
   20c98:	70a3      	strb	r3, [r4, #2]
            connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   20c9a:	2305      	movs	r3, #5
   20c9c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            connsm->enc_data.tx_encrypted = 0;
   20ca0:	2300      	movs	r3, #0
   20ca2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
            ble_phy_encrypt_disable();
   20ca6:	f007 fa9f 	bl	281e8 <ble_phy_encrypt_disable>
   20caa:	e79d      	b.n	20be8 <ble_ll_conn_tx_data_pdu+0x2d4>
            CONN_F_ENCRYPTED(connsm) = 1;
   20cac:	78a2      	ldrb	r2, [r4, #2]
   20cae:	f042 0202 	orr.w	r2, r2, #2
   20cb2:	70a2      	strb	r2, [r4, #2]
            connsm->enc_data.tx_encrypted = 1;
   20cb4:	2201      	movs	r2, #1
   20cb6:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
            ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   20cba:	f8b4 011c 	ldrh.w	r0, [r4, #284]	; 0x11c
   20cbe:	2100      	movs	r1, #0
   20cc0:	4293      	cmp	r3, r2
   20cc2:	bf14      	ite	ne
   20cc4:	2300      	movne	r3, #0
   20cc6:	2301      	moveq	r3, #1
   20cc8:	9300      	str	r3, [sp, #0]
   20cca:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   20cce:	f504 7294 	add.w	r2, r4, #296	; 0x128
   20cd2:	f007 fa59 	bl	28188 <ble_phy_encrypt_enable>
            if (txend_func == NULL) {
   20cd6:	b10e      	cbz	r6, 20cdc <ble_ll_conn_tx_data_pdu+0x3c8>
                txend_func = ble_ll_conn_rxend_unencrypt;
   20cd8:	4e0e      	ldr	r6, [pc, #56]	; (20d14 <ble_ll_conn_tx_data_pdu+0x400>)
   20cda:	e785      	b.n	20be8 <ble_ll_conn_tx_data_pdu+0x2d4>
                txend_func = ble_ll_conn_start_rx_unencrypt;
   20cdc:	4e0e      	ldr	r6, [pc, #56]	; (20d18 <ble_ll_conn_tx_data_pdu+0x404>)
   20cde:	e783      	b.n	20be8 <ble_ll_conn_tx_data_pdu+0x2d4>
            connsm->enc_data.tx_encrypted = 1;
   20ce0:	2301      	movs	r3, #1
   20ce2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
                                         CONN_IS_MASTER(connsm));
   20ce6:	79e2      	ldrb	r2, [r4, #7]
            ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.tx_pkt_cntr,
   20ce8:	429a      	cmp	r2, r3
   20cea:	bf14      	ite	ne
   20cec:	2200      	movne	r2, #0
   20cee:	2201      	moveq	r2, #1
   20cf0:	f8b4 011c 	ldrh.w	r0, [r4, #284]	; 0x11c
   20cf4:	2100      	movs	r1, #0
   20cf6:	f007 fa6f 	bl	281d8 <ble_phy_encrypt_set_pkt_cntr>
            if (txend_func == NULL) {
   20cfa:	2e00      	cmp	r6, #0
   20cfc:	f47f af74 	bne.w	20be8 <ble_ll_conn_tx_data_pdu+0x2d4>
                txend_func = ble_ll_conn_continue_rx_encrypt;
   20d00:	4e06      	ldr	r6, [pc, #24]	; (20d1c <ble_ll_conn_tx_data_pdu+0x408>)
   20d02:	e771      	b.n	20be8 <ble_ll_conn_tx_data_pdu+0x2d4>
   20d04:	00020801 	.word	0x00020801
   20d08:	0001f3bf 	.word	0x0001f3bf
   20d0c:	000207f1 	.word	0x000207f1
   20d10:	00020829 	.word	0x00020829
   20d14:	000207e1 	.word	0x000207e1
   20d18:	0002085b 	.word	0x0002085b
   20d1c:	0002086b 	.word	0x0002086b

00020d20 <ble_ll_conn_event_start_cb>:
{
   20d20:	b530      	push	{r4, r5, lr}
   20d22:	b083      	sub	sp, #12
    connsm = (struct ble_ll_conn_sm *)sch->cb_arg;
   20d24:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_conn_cur_sm = connsm;
   20d26:	4b42      	ldr	r3, [pc, #264]	; (20e30 <ble_ll_conn_event_start_cb+0x110>)
   20d28:	601c      	str	r4, [r3, #0]
    BLE_LL_ASSERT(connsm);
   20d2a:	2c00      	cmp	r4, #0
   20d2c:	d03f      	beq.n	20dae <ble_ll_conn_event_start_cb+0x8e>
   20d2e:	4605      	mov	r5, r0
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   20d30:	79a3      	ldrb	r3, [r4, #6]
   20d32:	2b00      	cmp	r3, #0
   20d34:	d041      	beq.n	20dba <ble_ll_conn_event_start_cb+0x9a>
    ble_ll_whitelist_disable();
   20d36:	f006 fd3f 	bl	277b8 <ble_ll_whitelist_disable>
    ble_ll_state_set(BLE_LL_STATE_CONNECTION);
   20d3a:	2004      	movs	r0, #4
   20d3c:	f7fe fb54 	bl	1f3e8 <ble_ll_state_set>
    ble_phy_setchan(connsm->data_chan_index, connsm->access_addr,
   20d40:	6da2      	ldr	r2, [r4, #88]	; 0x58
   20d42:	6d61      	ldr	r1, [r4, #84]	; 0x54
   20d44:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   20d48:	f007 fabe 	bl	282c8 <ble_phy_setchan>
    ble_phy_resolv_list_disable();
   20d4c:	f007 fd94 	bl	28878 <ble_phy_resolv_list_disable>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   20d50:	79e3      	ldrb	r3, [r4, #7]
   20d52:	2b01      	cmp	r3, #1
   20d54:	d036      	beq.n	20dc4 <ble_ll_conn_event_start_cb+0xa4>
        if (CONN_F_ENCRYPTED(connsm)) {
   20d56:	78a3      	ldrb	r3, [r4, #2]
   20d58:	f013 0f02 	tst.w	r3, #2
   20d5c:	d054      	beq.n	20e08 <ble_ll_conn_event_start_cb+0xe8>
            ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   20d5e:	f8b4 011e 	ldrh.w	r0, [r4, #286]	; 0x11e
   20d62:	2100      	movs	r1, #0
   20d64:	2301      	movs	r3, #1
   20d66:	9300      	str	r3, [sp, #0]
   20d68:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   20d6c:	f504 7294 	add.w	r2, r4, #296	; 0x128
   20d70:	f007 fa0a 	bl	28188 <ble_phy_encrypt_enable>
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   20d74:	6868      	ldr	r0, [r5, #4]
   20d76:	4b2f      	ldr	r3, [pc, #188]	; (20e34 <ble_ll_conn_event_start_cb+0x114>)
   20d78:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_rx_set_start_time(start, sch->remainder);
   20d7a:	78a9      	ldrb	r1, [r5, #2]
   20d7c:	4418      	add	r0, r3
   20d7e:	f007 fc8d 	bl	2869c <ble_phy_rx_set_start_time>
        if (rc) {
   20d82:	4605      	mov	r5, r0
   20d84:	2800      	cmp	r0, #0
   20d86:	d042      	beq.n	20e0e <ble_ll_conn_event_start_cb+0xee>
        ble_ll_event_send(&connsm->conn_ev_end);
   20d88:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   20d8c:	f7fe fb38 	bl	1f400 <ble_ll_event_send>
        ble_phy_disable();
   20d90:	f007 fae8 	bl	28364 <ble_phy_disable>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   20d94:	2000      	movs	r0, #0
   20d96:	f7fe fb27 	bl	1f3e8 <ble_ll_state_set>
        g_ble_ll_conn_cur_sm = NULL;
   20d9a:	4b25      	ldr	r3, [pc, #148]	; (20e30 <ble_ll_conn_event_start_cb+0x110>)
   20d9c:	2200      	movs	r2, #0
   20d9e:	601a      	str	r2, [r3, #0]
   20da0:	2501      	movs	r5, #1
    connsm->last_scheduled = os_cputime_get32();
   20da2:	f7ef fe69 	bl	10a78 <os_cputime_get32>
   20da6:	6660      	str	r0, [r4, #100]	; 0x64
}
   20da8:	4628      	mov	r0, r5
   20daa:	b003      	add	sp, #12
   20dac:	bd30      	pop	{r4, r5, pc}
    BLE_LL_ASSERT(connsm);
   20dae:	2300      	movs	r3, #0
   20db0:	461a      	mov	r2, r3
   20db2:	4619      	mov	r1, r3
   20db4:	4618      	mov	r0, r3
   20db6:	f7ef fc11 	bl	105dc <__assert_func>
        BLE_LL_ASSERT(0);
   20dba:	461a      	mov	r2, r3
   20dbc:	4619      	mov	r1, r3
   20dbe:	4618      	mov	r0, r3
   20dc0:	f7ef fc0c 	bl	105dc <__assert_func>
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   20dc4:	6868      	ldr	r0, [r5, #4]
   20dc6:	4b1b      	ldr	r3, [pc, #108]	; (20e34 <ble_ll_conn_event_start_cb+0x114>)
   20dc8:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_tx_set_start_time(start, sch->remainder);
   20dca:	78a9      	ldrb	r1, [r5, #2]
   20dcc:	4418      	add	r0, r3
   20dce:	f007 fc95 	bl	286fc <ble_phy_tx_set_start_time>
        if (!rc) {
   20dd2:	2800      	cmp	r0, #0
   20dd4:	d1d8      	bne.n	20d88 <ble_ll_conn_event_start_cb+0x68>
            if (CONN_F_ENCRYPTED(connsm)) {
   20dd6:	78a3      	ldrb	r3, [r4, #2]
   20dd8:	f013 0f02 	tst.w	r3, #2
   20ddc:	d011      	beq.n	20e02 <ble_ll_conn_event_start_cb+0xe2>
                ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   20dde:	f8b4 011c 	ldrh.w	r0, [r4, #284]	; 0x11c
   20de2:	2100      	movs	r1, #0
   20de4:	2301      	movs	r3, #1
   20de6:	9300      	str	r3, [sp, #0]
   20de8:	f504 73a8 	add.w	r3, r4, #336	; 0x150
   20dec:	f504 7294 	add.w	r2, r4, #296	; 0x128
   20df0:	f007 f9ca 	bl	28188 <ble_phy_encrypt_enable>
            rc = ble_ll_conn_tx_data_pdu(connsm);
   20df4:	4620      	mov	r0, r4
   20df6:	f7ff fd8d 	bl	20914 <ble_ll_conn_tx_data_pdu>
            if (!rc) {
   20dfa:	4605      	mov	r5, r0
   20dfc:	2800      	cmp	r0, #0
   20dfe:	d1c3      	bne.n	20d88 <ble_ll_conn_event_start_cb+0x68>
   20e00:	e7cf      	b.n	20da2 <ble_ll_conn_event_start_cb+0x82>
                ble_phy_encrypt_disable();
   20e02:	f007 f9f1 	bl	281e8 <ble_phy_encrypt_disable>
   20e06:	e7f5      	b.n	20df4 <ble_ll_conn_event_start_cb+0xd4>
            ble_phy_encrypt_disable();
   20e08:	f007 f9ee 	bl	281e8 <ble_phy_encrypt_disable>
   20e0c:	e7b2      	b.n	20d74 <ble_ll_conn_event_start_cb+0x54>
            connsm->csmflags.cfbit.slave_set_last_anchor = 1;
   20e0e:	7823      	ldrb	r3, [r4, #0]
   20e10:	f043 0320 	orr.w	r3, r3, #32
   20e14:	7023      	strb	r3, [r4, #0]
            usecs = connsm->slave_cur_tx_win_usecs + 61 +
   20e16:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
                (2 * connsm->slave_cur_window_widening);
   20e1a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
            usecs = connsm->slave_cur_tx_win_usecs + 61 +
   20e1e:	eb02 0243 	add.w	r2, r2, r3, lsl #1
            ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_RX, 0, usecs);
   20e22:	323d      	adds	r2, #61	; 0x3d
   20e24:	2100      	movs	r1, #0
   20e26:	4608      	mov	r0, r1
   20e28:	f007 f86c 	bl	27f04 <ble_phy_wfr_enable>
   20e2c:	e7b9      	b.n	20da2 <ble_ll_conn_event_start_cb+0x82>
   20e2e:	bf00      	nop
   20e30:	20003f80 	.word	0x20003f80
   20e34:	200042ac 	.word	0x200042ac

00020e38 <ble_ll_conn_master_common_init>:
{
   20e38:	b510      	push	{r4, lr}
   20e3a:	4604      	mov	r4, r0
    connsm->conn_role = BLE_LL_CONN_ROLE_MASTER;
   20e3c:	2301      	movs	r3, #1
   20e3e:	71c3      	strb	r3, [r0, #7]
    connsm->tx_win_size = BLE_LL_CONN_TX_WIN_MIN + 1;
   20e40:	2302      	movs	r3, #2
   20e42:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    connsm->tx_win_off = 0;
   20e46:	2300      	movs	r3, #0
   20e48:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
    connsm->master_sca = MYNEWT_VAL(BLE_LL_MASTER_SCA);
   20e4c:	2305      	movs	r3, #5
   20e4e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	return (int)lrand48();
   20e52:	f7f1 fa3b 	bl	122cc <lrand48>
    connsm->hop_inc = (rand() % 12) + 5;
   20e56:	4a11      	ldr	r2, [pc, #68]	; (20e9c <ble_ll_conn_master_common_init+0x64>)
   20e58:	fb82 3200 	smull	r3, r2, r2, r0
   20e5c:	17c3      	asrs	r3, r0, #31
   20e5e:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   20e62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   20e66:	009a      	lsls	r2, r3, #2
   20e68:	1a83      	subs	r3, r0, r2
   20e6a:	3305      	adds	r3, #5
   20e6c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    connsm->num_used_chans = g_ble_ll_conn_params.num_used_chans;
   20e70:	4b0b      	ldr	r3, [pc, #44]	; (20ea0 <ble_ll_conn_master_common_init+0x68>)
   20e72:	795a      	ldrb	r2, [r3, #5]
   20e74:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
    memcpy(connsm->chanmap, g_ble_ll_conn_params.master_chan_map,
   20e78:	681a      	ldr	r2, [r3, #0]
   20e7a:	6222      	str	r2, [r4, #32]
   20e7c:	791b      	ldrb	r3, [r3, #4]
   20e7e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    connsm->access_addr = ble_ll_utils_calc_access_addr();
   20e82:	f006 fb45 	bl	27510 <ble_ll_utils_calc_access_addr>
   20e86:	6560      	str	r0, [r4, #84]	; 0x54
   20e88:	f7f1 fa20 	bl	122cc <lrand48>
    connsm->crcinit = rand() & 0xffffff;
   20e8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   20e90:	65a0      	str	r0, [r4, #88]	; 0x58
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   20e92:	4b04      	ldr	r3, [pc, #16]	; (20ea4 <ble_ll_conn_master_common_init+0x6c>)
   20e94:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   20e98:	bd10      	pop	{r4, pc}
   20e9a:	bf00      	nop
   20e9c:	2aaaaaab 	.word	0x2aaaaaab
   20ea0:	20003f68 	.word	0x20003f68
   20ea4:	00020d21 	.word	0x00020d21

00020ea8 <ble_ll_conn_calc_itvl_ticks>:
{
   20ea8:	b570      	push	{r4, r5, r6, lr}
   20eaa:	4605      	mov	r5, r0
    usecs = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   20eac:	f8b0 0068 	ldrh.w	r0, [r0, #104]	; 0x68
   20eb0:	f240 44e2 	movw	r4, #1250	; 0x4e2
   20eb4:	fb04 f400 	mul.w	r4, r4, r0
    ticks = os_cputime_usecs_to_ticks(usecs);
   20eb8:	4620      	mov	r0, r4
   20eba:	f7ef fde3 	bl	10a84 <os_cputime_usecs_to_ticks>
   20ebe:	4606      	mov	r6, r0
                                        os_cputime_ticks_to_usecs(ticks));
   20ec0:	f7ef fde8 	bl	10a94 <os_cputime_ticks_to_usecs>
    connsm->conn_itvl_usecs = (uint8_t)(usecs -
   20ec4:	1a20      	subs	r0, r4, r0
   20ec6:	b2c0      	uxtb	r0, r0
   20ec8:	f885 0079 	strb.w	r0, [r5, #121]	; 0x79
    if (connsm->conn_itvl_usecs == 31) {
   20ecc:	281f      	cmp	r0, #31
   20ece:	d001      	beq.n	20ed4 <ble_ll_conn_calc_itvl_ticks+0x2c>
    connsm->conn_itvl_ticks = ticks;
   20ed0:	67ee      	str	r6, [r5, #124]	; 0x7c
}
   20ed2:	bd70      	pop	{r4, r5, r6, pc}
        connsm->conn_itvl_usecs = 0;
   20ed4:	2300      	movs	r3, #0
   20ed6:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
        ++ticks;
   20eda:	3601      	adds	r6, #1
   20edc:	e7f8      	b.n	20ed0 <ble_ll_conn_calc_itvl_ticks+0x28>

00020ede <ble_ll_conn_can_send_next_pdu>:
{
   20ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   20ee0:	79c3      	ldrb	r3, [r0, #7]
   20ee2:	2b01      	cmp	r3, #1
   20ee4:	d001      	beq.n	20eea <ble_ll_conn_can_send_next_pdu+0xc>
    rc = 1;
   20ee6:	2001      	movs	r0, #1
}
   20ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20eea:	4616      	mov	r6, r2
   20eec:	460d      	mov	r5, r1
   20eee:	4604      	mov	r4, r0
        next_sched_time = ble_ll_conn_get_next_sched_time(connsm);
   20ef0:	f7ff fcf0 	bl	208d4 <ble_ll_conn_get_next_sched_time>
   20ef4:	4607      	mov	r7, r0
        txpdu = connsm->cur_tx_pdu;
   20ef6:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
        if (!txpdu) {
   20efa:	b1ca      	cbz	r2, 20f30 <ble_ll_conn_can_send_next_pdu+0x52>
            pkthdr = OS_MBUF_PKTHDR(txpdu);
   20efc:	f102 0310 	add.w	r3, r2, #16
        if (txpdu) {
   20f00:	b1ea      	cbz	r2, 20f3e <ble_ll_conn_can_send_next_pdu+0x60>
            rem_bytes = pkthdr->omp_len - txhdr->txinfo.offset;
   20f02:	781b      	ldrb	r3, [r3, #0]
   20f04:	7e52      	ldrb	r2, [r2, #25]
   20f06:	1a9b      	subs	r3, r3, r2
   20f08:	b2db      	uxtb	r3, r3
            if (rem_bytes > connsm->eff_max_tx_octets) {
   20f0a:	7ba0      	ldrb	r0, [r4, #14]
   20f0c:	4298      	cmp	r0, r3
   20f0e:	d300      	bcc.n	20f12 <ble_ll_conn_can_send_next_pdu+0x34>
            rem_bytes = pkthdr->omp_len - txhdr->txinfo.offset;
   20f10:	4618      	mov	r0, r3
            usecs = ble_ll_pdu_tx_time_get(rem_bytes, tx_phy_mode);
   20f12:	2101      	movs	r1, #1
   20f14:	f7fe fac4 	bl	1f4a0 <ble_ll_pdu_tx_time_get>
        usecs += (BLE_LL_IFS * 2) + connsm->eff_max_rx_time;
   20f18:	8b64      	ldrh	r4, [r4, #26]
   20f1a:	4420      	add	r0, r4
   20f1c:	f500 7496 	add.w	r4, r0, #300	; 0x12c
        allowed_usecs = os_cputime_ticks_to_usecs(ticks);
   20f20:	1b78      	subs	r0, r7, r5
   20f22:	f7ef fdb7 	bl	10a94 <os_cputime_ticks_to_usecs>
        if ((usecs + add_usecs) >= allowed_usecs) {
   20f26:	4434      	add	r4, r6
   20f28:	4284      	cmp	r4, r0
   20f2a:	d30d      	bcc.n	20f48 <ble_ll_conn_can_send_next_pdu+0x6a>
            rc = 0;
   20f2c:	2000      	movs	r0, #0
    return rc;
   20f2e:	e7db      	b.n	20ee8 <ble_ll_conn_can_send_next_pdu+0xa>
            pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   20f30:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
            if (pkthdr) {
   20f34:	2b00      	cmp	r3, #0
   20f36:	d0e3      	beq.n	20f00 <ble_ll_conn_can_send_next_pdu+0x22>
                txpdu = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   20f38:	f1a3 0210 	sub.w	r2, r3, #16
   20f3c:	e7e0      	b.n	20f00 <ble_ll_conn_can_send_next_pdu+0x22>
            usecs = ble_ll_pdu_tx_time_get(0, tx_phy_mode);
   20f3e:	2101      	movs	r1, #1
   20f40:	2000      	movs	r0, #0
   20f42:	f7fe faad 	bl	1f4a0 <ble_ll_pdu_tx_time_get>
   20f46:	e7e7      	b.n	20f18 <ble_ll_conn_can_send_next_pdu+0x3a>
    rc = 1;
   20f48:	2001      	movs	r0, #1
   20f4a:	e7cd      	b.n	20ee8 <ble_ll_conn_can_send_next_pdu+0xa>

00020f4c <ble_ll_conn_chk_csm_flags>:
{
   20f4c:	b510      	push	{r4, lr}
   20f4e:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.send_ltk_req) {
   20f50:	7883      	ldrb	r3, [r0, #2]
   20f52:	f013 0f01 	tst.w	r3, #1
   20f56:	d114      	bne.n	20f82 <ble_ll_conn_chk_csm_flags+0x36>
    if (connsm->csmflags.cfbit.host_expects_upd_event) {
   20f58:	7863      	ldrb	r3, [r4, #1]
   20f5a:	f013 0f02 	tst.w	r3, #2
   20f5e:	d00f      	beq.n	20f80 <ble_ll_conn_chk_csm_flags+0x34>
        if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE)) {
   20f60:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   20f64:	f013 0f01 	tst.w	r3, #1
   20f68:	d119      	bne.n	20f9e <ble_ll_conn_chk_csm_flags+0x52>
            if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   20f6a:	f013 0f40 	tst.w	r3, #64	; 0x40
   20f6e:	d11c      	bne.n	20faa <ble_ll_conn_chk_csm_flags+0x5e>
        update_status = BLE_ERR_SUCCESS;
   20f70:	2100      	movs	r1, #0
        ble_ll_hci_ev_conn_update(connsm, update_status);
   20f72:	4620      	mov	r0, r4
   20f74:	f003 ffe9 	bl	24f4a <ble_ll_hci_ev_conn_update>
        connsm->csmflags.cfbit.host_expects_upd_event = 0;
   20f78:	7863      	ldrb	r3, [r4, #1]
   20f7a:	f36f 0341 	bfc	r3, #1, #1
   20f7e:	7063      	strb	r3, [r4, #1]
}
   20f80:	bd10      	pop	{r4, pc}
        if (ble_ll_hci_ev_ltk_req(connsm)) {
   20f82:	f004 f844 	bl	2500e <ble_ll_hci_ev_ltk_req>
   20f86:	b920      	cbnz	r0, 20f92 <ble_ll_conn_chk_csm_flags+0x46>
        connsm->csmflags.cfbit.send_ltk_req = 0;
   20f88:	78a3      	ldrb	r3, [r4, #2]
   20f8a:	f36f 0300 	bfc	r3, #0, #1
   20f8e:	70a3      	strb	r3, [r4, #2]
   20f90:	e7e2      	b.n	20f58 <ble_ll_conn_chk_csm_flags+0xc>
            ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   20f92:	2206      	movs	r2, #6
   20f94:	2103      	movs	r1, #3
   20f96:	4620      	mov	r0, r4
   20f98:	f003 f9c0 	bl	2431c <ble_ll_ctrl_reject_ind_send>
   20f9c:	e7f4      	b.n	20f88 <ble_ll_conn_chk_csm_flags+0x3c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE);
   20f9e:	2100      	movs	r1, #0
   20fa0:	4620      	mov	r0, r4
   20fa2:	f002 fe7a 	bl	23c9a <ble_ll_ctrl_proc_stop>
        update_status = BLE_ERR_SUCCESS;
   20fa6:	2100      	movs	r1, #0
   20fa8:	e7e3      	b.n	20f72 <ble_ll_conn_chk_csm_flags+0x26>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   20faa:	2106      	movs	r1, #6
   20fac:	4620      	mov	r0, r4
   20fae:	f002 fe74 	bl	23c9a <ble_ll_ctrl_proc_stop>
                update_status = connsm->reject_reason;
   20fb2:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
   20fb6:	e7dc      	b.n	20f72 <ble_ll_conn_chk_csm_flags+0x26>

00020fb8 <ble_ll_conn_connect_ind_tx_pducb>:

static uint8_t
ble_ll_conn_connect_ind_tx_pducb(uint8_t *dptr, void *pducb_arg, uint8_t *hdr_byte)
{
   20fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20fba:	4604      	mov	r4, r0
   20fbc:	460d      	mov	r5, r1
   20fbe:	4617      	mov	r7, r2
    connsm = pducb_arg;
    /*
     * pdu_data was prepared just before starting TX and is expected to be
     * still valid here
     */
    pdu_data = ble_ll_scan_get_pdu_data();
   20fc0:	f005 fdc4 	bl	26b4c <ble_ll_scan_get_pdu_data>
   20fc4:	4606      	mov	r6, r0

    memcpy(dptr, pdu_data->inita, BLE_DEV_ADDR_LEN);
   20fc6:	4603      	mov	r3, r0
   20fc8:	f853 2f01 	ldr.w	r2, [r3, #1]!
   20fcc:	6022      	str	r2, [r4, #0]
   20fce:	889b      	ldrh	r3, [r3, #4]
   20fd0:	80a3      	strh	r3, [r4, #4]
    memcpy(dptr + BLE_DEV_ADDR_LEN, pdu_data->adva, BLE_DEV_ADDR_LEN);
   20fd2:	4603      	mov	r3, r0
   20fd4:	f853 2f07 	ldr.w	r2, [r3, #7]!
   20fd8:	f8c4 2006 	str.w	r2, [r4, #6]
   20fdc:	889b      	ldrh	r3, [r3, #4]
   20fde:	8163      	strh	r3, [r4, #10]

    dptr += 2 * BLE_DEV_ADDR_LEN;

    put_le32(dptr, connsm->access_addr);
   20fe0:	6d69      	ldr	r1, [r5, #84]	; 0x54
   20fe2:	f104 000c 	add.w	r0, r4, #12
   20fe6:	f7fd fda0 	bl	1eb2a <put_le32>
    dptr[4] = (uint8_t)connsm->crcinit;
   20fea:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
   20fee:	7423      	strb	r3, [r4, #16]
    dptr[5] = (uint8_t)(connsm->crcinit >> 8);
   20ff0:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
   20ff4:	7463      	strb	r3, [r4, #17]
    dptr[6] = (uint8_t)(connsm->crcinit >> 16);
   20ff6:	f895 305a 	ldrb.w	r3, [r5, #90]	; 0x5a
   20ffa:	74a3      	strb	r3, [r4, #18]
    dptr[7] = connsm->tx_win_size;
   20ffc:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   21000:	74e3      	strb	r3, [r4, #19]
    put_le16(dptr + 8, connsm->tx_win_off);
   21002:	f8b5 1072 	ldrh.w	r1, [r5, #114]	; 0x72
   21006:	f104 0014 	add.w	r0, r4, #20
   2100a:	f7fd fd8a 	bl	1eb22 <put_le16>
    put_le16(dptr + 10, connsm->conn_itvl);
   2100e:	f8b5 1068 	ldrh.w	r1, [r5, #104]	; 0x68
   21012:	f104 0016 	add.w	r0, r4, #22
   21016:	f7fd fd84 	bl	1eb22 <put_le16>
    put_le16(dptr + 12, connsm->slave_latency);
   2101a:	f8b5 106a 	ldrh.w	r1, [r5, #106]	; 0x6a
   2101e:	f104 0018 	add.w	r0, r4, #24
   21022:	f7fd fd7e 	bl	1eb22 <put_le16>
    put_le16(dptr + 14, connsm->supervision_tmo);
   21026:	f8b5 106c 	ldrh.w	r1, [r5, #108]	; 0x6c
   2102a:	f104 001a 	add.w	r0, r4, #26
   2102e:	f7fd fd78 	bl	1eb22 <put_le16>
    memcpy(dptr + 16, &connsm->chanmap, BLE_LL_CONN_CHMAP_LEN);
   21032:	462b      	mov	r3, r5
   21034:	f853 2f20 	ldr.w	r2, [r3, #32]!
   21038:	61e2      	str	r2, [r4, #28]
   2103a:	791b      	ldrb	r3, [r3, #4]
   2103c:	f884 3020 	strb.w	r3, [r4, #32]
    dptr[21] = connsm->hop_inc | (connsm->master_sca << 5);
   21040:	f995 302e 	ldrsb.w	r3, [r5, #46]	; 0x2e
   21044:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   21048:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   2104c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    *hdr_byte = pdu_data->hdr_byte;
   21050:	7833      	ldrb	r3, [r6, #0]
   21052:	703b      	strb	r3, [r7, #0]

    return 34;
}
   21054:	2022      	movs	r0, #34	; 0x22
   21056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021058 <ble_ll_conn_is_peer_adv>:
{
   21058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    connsm = g_ble_ll_conn_create_sm;
   2105a:	4b40      	ldr	r3, [pc, #256]	; (2115c <ble_ll_conn_is_peer_adv+0x104>)
   2105c:	681d      	ldr	r5, [r3, #0]
    if (!connsm) {
   2105e:	2d00      	cmp	r5, #0
   21060:	d06f      	beq.n	21142 <ble_ll_conn_is_peer_adv+0xea>
   21062:	4614      	mov	r4, r2
   21064:	460f      	mov	r7, r1
   21066:	4606      	mov	r6, r0
    switch (connsm->peer_addr_type) {
   21068:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   2106c:	2b03      	cmp	r3, #3
   2106e:	d86a      	bhi.n	21146 <ble_ll_conn_is_peer_adv+0xee>
   21070:	e8df f003 	tbb	[pc, r3]
   21074:	53440202 	.word	0x53440202
        if (ble_ll_addr_is_id(adva, addr_type)) {
   21078:	4601      	mov	r1, r0
   2107a:	4638      	mov	r0, r7
   2107c:	f7fe f828 	bl	1f0d0 <ble_ll_addr_is_id>
   21080:	b9d0      	cbnz	r0, 210b8 <ble_ll_conn_is_peer_adv+0x60>
        if ((index >= 0) &&
   21082:	2c00      	cmp	r4, #0
   21084:	db34      	blt.n	210f0 <ble_ll_conn_is_peer_adv+0x98>
                (g_ble_ll_resolv_list[index].rl_addr_type == connsm->peer_addr_type)) {
   21086:	2335      	movs	r3, #53	; 0x35
   21088:	fb03 f304 	mul.w	r3, r3, r4
   2108c:	4a34      	ldr	r2, [pc, #208]	; (21160 <ble_ll_conn_is_peer_adv+0x108>)
   2108e:	5cd2      	ldrb	r2, [r2, r3]
   21090:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
        if ((index >= 0) &&
   21094:	429a      	cmp	r2, r3
   21096:	d023      	beq.n	210e0 <ble_ll_conn_is_peer_adv+0x88>
    uint8_t *peer_addr = NULL;
   21098:	2000      	movs	r0, #0
        if ((connsm->peer_addr_type == addr_type) && !peer_addr) {
   2109a:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   2109e:	42b3      	cmp	r3, r6
   210a0:	d028      	beq.n	210f4 <ble_ll_conn_is_peer_adv+0x9c>
    if (peer_addr) {
   210a2:	2800      	cmp	r0, #0
   210a4:	d057      	beq.n	21156 <ble_ll_conn_is_peer_adv+0xfe>
        if (!memcmp(peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN)) {
   210a6:	2206      	movs	r2, #6
   210a8:	f105 0193 	add.w	r1, r5, #147	; 0x93
   210ac:	f7f1 f9e6 	bl	1247c <memcmp>
   210b0:	2800      	cmp	r0, #0
   210b2:	d144      	bne.n	2113e <ble_ll_conn_is_peer_adv+0xe6>
            rc = 1;
   210b4:	2001      	movs	r0, #1
   210b6:	e045      	b.n	21144 <ble_ll_conn_is_peer_adv+0xec>
            if (ble_ll_resolv_enabled()) {
   210b8:	f004 fb80 	bl	257bc <ble_ll_resolv_enabled>
   210bc:	2800      	cmp	r0, #0
   210be:	d0e0      	beq.n	21082 <ble_ll_conn_is_peer_adv+0x2a>
                rl = ble_ll_resolv_list_find(adva, addr_type);
   210c0:	4631      	mov	r1, r6
   210c2:	4638      	mov	r0, r7
   210c4:	f004 f9bc 	bl	25440 <ble_ll_resolv_list_find>
                if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   210c8:	2800      	cmp	r0, #0
   210ca:	d0da      	beq.n	21082 <ble_ll_conn_is_peer_adv+0x2a>
   210cc:	7882      	ldrb	r2, [r0, #2]
   210ce:	2a00      	cmp	r2, #0
   210d0:	d1d7      	bne.n	21082 <ble_ll_conn_is_peer_adv+0x2a>
                        ble_ll_resolv_irk_nonzero(rl->rl_peer_irk)) {
   210d2:	3013      	adds	r0, #19
   210d4:	f004 f98e 	bl	253f4 <ble_ll_resolv_irk_nonzero>
                if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   210d8:	2800      	cmp	r0, #0
   210da:	d0d2      	beq.n	21082 <ble_ll_conn_is_peer_adv+0x2a>
                    return 0;
   210dc:	2000      	movs	r0, #0
   210de:	e031      	b.n	21144 <ble_ll_conn_is_peer_adv+0xec>
            peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   210e0:	2035      	movs	r0, #53	; 0x35
   210e2:	fb00 f004 	mul.w	r0, r0, r4
   210e6:	3020      	adds	r0, #32
   210e8:	4b1d      	ldr	r3, [pc, #116]	; (21160 <ble_ll_conn_is_peer_adv+0x108>)
   210ea:	4418      	add	r0, r3
   210ec:	3003      	adds	r0, #3
   210ee:	e7d4      	b.n	2109a <ble_ll_conn_is_peer_adv+0x42>
    uint8_t *peer_addr = NULL;
   210f0:	2000      	movs	r0, #0
   210f2:	e7d2      	b.n	2109a <ble_ll_conn_is_peer_adv+0x42>
        if ((connsm->peer_addr_type == addr_type) && !peer_addr) {
   210f4:	2800      	cmp	r0, #0
   210f6:	d1d4      	bne.n	210a2 <ble_ll_conn_is_peer_adv+0x4a>
            peer_addr = adva;
   210f8:	4638      	mov	r0, r7
   210fa:	e7d2      	b.n	210a2 <ble_ll_conn_is_peer_adv+0x4a>
        if ((index < 0) ||
   210fc:	2c00      	cmp	r4, #0
   210fe:	db24      	blt.n	2114a <ble_ll_conn_is_peer_adv+0xf2>
            (g_ble_ll_resolv_list[index].rl_addr_type != 0)) {
   21100:	2335      	movs	r3, #53	; 0x35
   21102:	fb03 f304 	mul.w	r3, r3, r4
   21106:	4a16      	ldr	r2, [pc, #88]	; (21160 <ble_ll_conn_is_peer_adv+0x108>)
   21108:	5cd3      	ldrb	r3, [r2, r3]
        if ((index < 0) ||
   2110a:	bb03      	cbnz	r3, 2114e <ble_ll_conn_is_peer_adv+0xf6>
        peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   2110c:	2035      	movs	r0, #53	; 0x35
   2110e:	fb00 f004 	mul.w	r0, r0, r4
   21112:	3020      	adds	r0, #32
   21114:	4410      	add	r0, r2
   21116:	3003      	adds	r0, #3
        break;
   21118:	e7c3      	b.n	210a2 <ble_ll_conn_is_peer_adv+0x4a>
        if ((index < 0) ||
   2111a:	2c00      	cmp	r4, #0
   2111c:	db19      	blt.n	21152 <ble_ll_conn_is_peer_adv+0xfa>
            (g_ble_ll_resolv_list[index].rl_addr_type != 1)) {
   2111e:	2335      	movs	r3, #53	; 0x35
   21120:	fb03 f304 	mul.w	r3, r3, r4
   21124:	4a0e      	ldr	r2, [pc, #56]	; (21160 <ble_ll_conn_is_peer_adv+0x108>)
   21126:	5cd3      	ldrb	r3, [r2, r3]
        if ((index < 0) ||
   21128:	2b01      	cmp	r3, #1
   2112a:	d001      	beq.n	21130 <ble_ll_conn_is_peer_adv+0xd8>
            return 0;
   2112c:	2000      	movs	r0, #0
   2112e:	e009      	b.n	21144 <ble_ll_conn_is_peer_adv+0xec>
        peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   21130:	2035      	movs	r0, #53	; 0x35
   21132:	fb00 f004 	mul.w	r0, r0, r4
   21136:	3020      	adds	r0, #32
   21138:	4410      	add	r0, r2
   2113a:	3003      	adds	r0, #3
        break;
   2113c:	e7b1      	b.n	210a2 <ble_ll_conn_is_peer_adv+0x4a>
    rc = 0;
   2113e:	2000      	movs	r0, #0
   21140:	e000      	b.n	21144 <ble_ll_conn_is_peer_adv+0xec>
        return 0;
   21142:	2000      	movs	r0, #0
}
   21144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rc = 0;
   21146:	2000      	movs	r0, #0
   21148:	e7fc      	b.n	21144 <ble_ll_conn_is_peer_adv+0xec>
            return 0;
   2114a:	2000      	movs	r0, #0
   2114c:	e7fa      	b.n	21144 <ble_ll_conn_is_peer_adv+0xec>
   2114e:	2000      	movs	r0, #0
   21150:	e7f8      	b.n	21144 <ble_ll_conn_is_peer_adv+0xec>
            return 0;
   21152:	2000      	movs	r0, #0
   21154:	e7f6      	b.n	21144 <ble_ll_conn_is_peer_adv+0xec>
    rc = 0;
   21156:	2000      	movs	r0, #0
   21158:	e7f4      	b.n	21144 <ble_ll_conn_is_peer_adv+0xec>
   2115a:	bf00      	nop
   2115c:	20003f90 	.word	0x20003f90
   21160:	20004160 	.word	0x20004160

00021164 <ble_ll_conn_connect_ind_prepare>:
{
   21164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21168:	460c      	mov	r4, r1
   2116a:	461d      	mov	r5, r3
   2116c:	f89d 1020 	ldrb.w	r1, [sp, #32]
   21170:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if (adva_type) {
   21172:	4690      	mov	r8, r2
   21174:	b99a      	cbnz	r2, 2119e <ble_ll_conn_connect_ind_prepare+0x3a>
    hdr = BLE_ADV_PDU_TYPE_CONNECT_IND;
   21176:	2605      	movs	r6, #5
    if (inita) {
   21178:	b19b      	cbz	r3, 211a2 <ble_ll_conn_connect_ind_prepare+0x3e>
        memcpy(pdu_data->inita, inita, BLE_DEV_ADDR_LEN);
   2117a:	681a      	ldr	r2, [r3, #0]
   2117c:	f8c4 2001 	str.w	r2, [r4, #1]
   21180:	889b      	ldrh	r3, [r3, #4]
   21182:	f8a4 3005 	strh.w	r3, [r4, #5]
        if (inita_type) {
   21186:	b109      	cbz	r1, 2118c <ble_ll_conn_connect_ind_prepare+0x28>
            hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   21188:	f046 0640 	orr.w	r6, r6, #64	; 0x40
    memcpy(pdu_data->adva, adva, BLE_DEV_ADDR_LEN);
   2118c:	682b      	ldr	r3, [r5, #0]
   2118e:	f8c4 3007 	str.w	r3, [r4, #7]
   21192:	88ab      	ldrh	r3, [r5, #4]
   21194:	f8a4 300b 	strh.w	r3, [r4, #11]
    pdu_data->hdr_byte = hdr;
   21198:	7026      	strb	r6, [r4, #0]
}
   2119a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hdr |= BLE_ADV_PDU_HDR_RXADD_MASK;
   2119e:	2685      	movs	r6, #133	; 0x85
   211a0:	e7ea      	b.n	21178 <ble_ll_conn_connect_ind_prepare+0x14>
        connsm = g_ble_ll_conn_create_sm;
   211a2:	4b1d      	ldr	r3, [pc, #116]	; (21218 <ble_ll_conn_connect_ind_prepare+0xb4>)
   211a4:	f8d3 9000 	ldr.w	r9, [r3]
        if ((connsm->own_addr_type & 1) == 0) {
   211a8:	f899 3091 	ldrb.w	r3, [r9, #145]	; 0x91
   211ac:	f013 0f01 	tst.w	r3, #1
   211b0:	d010      	beq.n	211d4 <ble_ll_conn_connect_ind_prepare+0x70>
            hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   211b2:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            addr = g_random_addr;
   211b6:	4f19      	ldr	r7, [pc, #100]	; (2121c <ble_ll_conn_connect_ind_prepare+0xb8>)
        if (connsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   211b8:	2b01      	cmp	r3, #1
   211ba:	d80d      	bhi.n	211d8 <ble_ll_conn_connect_ind_prepare+0x74>
        if (addr) {
   211bc:	2f00      	cmp	r7, #0
   211be:	d0e5      	beq.n	2118c <ble_ll_conn_connect_ind_prepare+0x28>
            memcpy(pdu_data->inita, addr, BLE_DEV_ADDR_LEN);
   211c0:	683b      	ldr	r3, [r7, #0]
   211c2:	f8c4 3001 	str.w	r3, [r4, #1]
   211c6:	88bb      	ldrh	r3, [r7, #4]
   211c8:	f8a4 3005 	strh.w	r3, [r4, #5]
            connsm->inita_identity_used = 1;
   211cc:	2301      	movs	r3, #1
   211ce:	f889 3090 	strb.w	r3, [r9, #144]	; 0x90
   211d2:	e7db      	b.n	2118c <ble_ll_conn_connect_ind_prepare+0x28>
            addr = g_dev_addr;
   211d4:	4f12      	ldr	r7, [pc, #72]	; (21220 <ble_ll_conn_connect_ind_prepare+0xbc>)
   211d6:	e7ef      	b.n	211b8 <ble_ll_conn_connect_ind_prepare+0x54>
            is_rpa = ble_ll_is_rpa(adva, adva_type);
   211d8:	4641      	mov	r1, r8
   211da:	4628      	mov	r0, r5
   211dc:	f7fd ff6c 	bl	1f0b8 <ble_ll_is_rpa>
            if (is_rpa) {
   211e0:	b180      	cbz	r0, 21204 <ble_ll_conn_connect_ind_prepare+0xa0>
                if (rpa_index >= 0) {
   211e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   211e4:	2b00      	cmp	r3, #0
   211e6:	dbe9      	blt.n	211bc <ble_ll_conn_connect_ind_prepare+0x58>
                    rl = &g_ble_ll_resolv_list[rpa_index];
   211e8:	2335      	movs	r3, #53	; 0x35
   211ea:	480e      	ldr	r0, [pc, #56]	; (21224 <ble_ll_conn_connect_ind_prepare+0xc0>)
   211ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   211ee:	fb03 0002 	mla	r0, r3, r2, r0
            if (rl) {
   211f2:	2800      	cmp	r0, #0
   211f4:	d0e2      	beq.n	211bc <ble_ll_conn_connect_ind_prepare+0x58>
                hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   211f6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
                ble_ll_resolv_get_priv_addr(rl, 1, pdu_data->inita);
   211fa:	1c62      	adds	r2, r4, #1
   211fc:	2101      	movs	r1, #1
   211fe:	f004 fa3d 	bl	2567c <ble_ll_resolv_get_priv_addr>
   21202:	e7c3      	b.n	2118c <ble_ll_conn_connect_ind_prepare+0x28>
                if (ble_ll_resolv_enabled()) {
   21204:	f004 fada 	bl	257bc <ble_ll_resolv_enabled>
   21208:	2800      	cmp	r0, #0
   2120a:	d0d7      	beq.n	211bc <ble_ll_conn_connect_ind_prepare+0x58>
                    rl = ble_ll_resolv_list_find(adva, adva_type);
   2120c:	4641      	mov	r1, r8
   2120e:	4628      	mov	r0, r5
   21210:	f004 f916 	bl	25440 <ble_ll_resolv_list_find>
   21214:	e7ed      	b.n	211f2 <ble_ll_conn_connect_ind_prepare+0x8e>
   21216:	bf00      	nop
   21218:	20003f90 	.word	0x20003f90
   2121c:	20003dc0 	.word	0x20003dc0
   21220:	20003dc8 	.word	0x20003dc8
   21224:	20004160 	.word	0x20004160

00021228 <ble_ll_conn_is_lru>:
    if ((int32_t)(s1->last_scheduled - s2->last_scheduled) < 0) {
   21228:	6e43      	ldr	r3, [r0, #100]	; 0x64
   2122a:	6e4a      	ldr	r2, [r1, #100]	; 0x64
   2122c:	1a9b      	subs	r3, r3, r2
   2122e:	2b00      	cmp	r3, #0
   21230:	db01      	blt.n	21236 <ble_ll_conn_is_lru+0xe>
        rc = 0;
   21232:	2000      	movs	r0, #0
}
   21234:	4770      	bx	lr
        rc = 1;
   21236:	2001      	movs	r0, #1
   21238:	4770      	bx	lr
	...

0002123c <ble_ll_conn_get_ce_end_time>:
{
   2123c:	b508      	push	{r3, lr}
    if (g_ble_ll_conn_cur_sm) {
   2123e:	4b04      	ldr	r3, [pc, #16]	; (21250 <ble_ll_conn_get_ce_end_time+0x14>)
   21240:	681b      	ldr	r3, [r3, #0]
   21242:	b10b      	cbz	r3, 21248 <ble_ll_conn_get_ce_end_time+0xc>
        ce_end_time = g_ble_ll_conn_cur_sm->ce_end_time;
   21244:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
}
   21246:	bd08      	pop	{r3, pc}
        ce_end_time = os_cputime_get32();
   21248:	f7ef fc16 	bl	10a78 <os_cputime_get32>
    return ce_end_time;
   2124c:	e7fb      	b.n	21246 <ble_ll_conn_get_ce_end_time+0xa>
   2124e:	bf00      	nop
   21250:	20003f80 	.word	0x20003f80

00021254 <ble_ll_conn_find_active_conn>:
    if ((handle != 0) && (handle <= MYNEWT_VAL(BLE_MAX_CONNECTIONS))) {
   21254:	2801      	cmp	r0, #1
   21256:	d108      	bne.n	2126a <ble_ll_conn_find_active_conn+0x16>
        connsm = &g_ble_ll_conn_sm[handle - 1];
   21258:	3801      	subs	r0, #1
   2125a:	f44f 72cc 	mov.w	r2, #408	; 0x198
   2125e:	4b05      	ldr	r3, [pc, #20]	; (21274 <ble_ll_conn_find_active_conn+0x20>)
   21260:	fb02 3000 	mla	r0, r2, r0, r3
        if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   21264:	7983      	ldrb	r3, [r0, #6]
   21266:	b113      	cbz	r3, 2126e <ble_ll_conn_find_active_conn+0x1a>
}
   21268:	4770      	bx	lr
    connsm = NULL;
   2126a:	2000      	movs	r0, #0
   2126c:	4770      	bx	lr
            connsm = NULL;
   2126e:	2000      	movs	r0, #0
    return connsm;
   21270:	e7fa      	b.n	21268 <ble_ll_conn_find_active_conn+0x14>
   21272:	bf00      	nop
   21274:	20003f98 	.word	0x20003f98

00021278 <ble_ll_conn_sm_get>:
    connsm = STAILQ_FIRST(&g_ble_ll_conn_free_list);
   21278:	4b05      	ldr	r3, [pc, #20]	; (21290 <ble_ll_conn_sm_get+0x18>)
   2127a:	6818      	ldr	r0, [r3, #0]
    if (connsm) {
   2127c:	b120      	cbz	r0, 21288 <ble_ll_conn_sm_get+0x10>
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   2127e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   21282:	4a03      	ldr	r2, [pc, #12]	; (21290 <ble_ll_conn_sm_get+0x18>)
   21284:	6013      	str	r3, [r2, #0]
   21286:	b103      	cbz	r3, 2128a <ble_ll_conn_sm_get+0x12>
}
   21288:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   2128a:	4613      	mov	r3, r2
   2128c:	605a      	str	r2, [r3, #4]
    return connsm;
   2128e:	e7fb      	b.n	21288 <ble_ll_conn_sm_get+0x10>
   21290:	20003f88 	.word	0x20003f88

00021294 <ble_ll_conn_calc_dci>:
{
   21294:	b538      	push	{r3, r4, r5, lr}
   21296:	4605      	mov	r5, r0
   21298:	460c      	mov	r4, r1
    index = conn->data_chan_index;
   2129a:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
    while (latency > 0) {
   2129e:	e004      	b.n	212aa <ble_ll_conn_calc_dci+0x16>
        index = ble_ll_conn_calc_dci_csa1(conn);
   212a0:	4628      	mov	r0, r5
   212a2:	f7ff fa58 	bl	20756 <ble_ll_conn_calc_dci_csa1>
        latency--;
   212a6:	3c01      	subs	r4, #1
   212a8:	b2a4      	uxth	r4, r4
    while (latency > 0) {
   212aa:	2c00      	cmp	r4, #0
   212ac:	d1f8      	bne.n	212a0 <ble_ll_conn_calc_dci+0xc>
}
   212ae:	bd38      	pop	{r3, r4, r5, pc}

000212b0 <ble_ll_conn_next_event>:
{
   212b0:	b570      	push	{r4, r5, r6, lr}
   212b2:	4604      	mov	r4, r0
    ble_ll_conn_chk_csm_flags(connsm);
   212b4:	f7ff fe4a 	bl	20f4c <ble_ll_conn_chk_csm_flags>
    if (connsm->disconnect_reason && !CONN_F_TERMINATE_STARTED(connsm)) {
   212b8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   212bc:	b11b      	cbz	r3, 212c6 <ble_ll_conn_next_event+0x16>
   212be:	f994 3000 	ldrsb.w	r3, [r4]
   212c2:	2b00      	cmp	r3, #0
   212c4:	da59      	bge.n	2137a <ble_ll_conn_next_event+0xca>
    if (CONN_F_TERMINATE_STARTED(connsm) && (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE)) {
   212c6:	7822      	ldrb	r2, [r4, #0]
   212c8:	f012 0f80 	tst.w	r2, #128	; 0x80
   212cc:	d159      	bne.n	21382 <ble_ll_conn_next_event+0xd2>
    itvl = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   212ce:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
   212d2:	f240 45e2 	movw	r5, #1250	; 0x4e2
   212d6:	fb05 f500 	mul.w	r5, r5, r0
        !CONN_F_PHY_UPDATE_SCHED(connsm)                &&
   212da:	6821      	ldr	r1, [r4, #0]
   212dc:	4b8c      	ldr	r3, [pc, #560]	; (21510 <ble_ll_conn_next_event+0x260>)
   212de:	400b      	ands	r3, r1
    if (connsm->csmflags.cfbit.allow_slave_latency      &&
   212e0:	2b10      	cmp	r3, #16
   212e2:	d055      	beq.n	21390 <ble_ll_conn_next_event+0xe0>
    latency = 1;
   212e4:	2601      	movs	r6, #1
    connsm->event_cntr += latency;
   212e6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   212ea:	4433      	add	r3, r6
   212ec:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if (latency == 1) {
   212f0:	2e01      	cmp	r6, #1
   212f2:	d159      	bne.n	213a8 <ble_ll_conn_next_event+0xf8>
        connsm->anchor_point += connsm->conn_itvl_ticks;
   212f4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   212f6:	6f63      	ldr	r3, [r4, #116]	; 0x74
   212f8:	4413      	add	r3, r2
   212fa:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs += connsm->conn_itvl_usecs;
   212fc:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
   21300:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   21304:	4413      	add	r3, r2
   21306:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    if (connsm->anchor_point_usecs >= 31) {
   2130a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   2130e:	2b1e      	cmp	r3, #30
   21310:	d905      	bls.n	2131e <ble_ll_conn_next_event+0x6e>
        ++connsm->anchor_point;
   21312:	6f62      	ldr	r2, [r4, #116]	; 0x74
   21314:	3201      	adds	r2, #1
   21316:	6762      	str	r2, [r4, #116]	; 0x74
        connsm->anchor_point_usecs -= 31;
   21318:	3b1f      	subs	r3, #31
   2131a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    if (connsm->csmflags.cfbit.conn_update_sched &&
   2131e:	7863      	ldrb	r3, [r4, #1]
   21320:	f013 0f01 	tst.w	r3, #1
   21324:	d005      	beq.n	21332 <ble_ll_conn_next_event+0x82>
        (connsm->event_cntr == connsm->conn_update_req.instant)) {
   21326:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
   2132a:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
    if (connsm->csmflags.cfbit.conn_update_sched &&
   2132e:	429a      	cmp	r2, r3
   21330:	d049      	beq.n	213c6 <ble_ll_conn_next_event+0x116>
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   21332:	7863      	ldrb	r3, [r4, #1]
   21334:	f013 0f10 	tst.w	r3, #16
   21338:	d007      	beq.n	2134a <ble_ll_conn_next_event+0x9a>
        ((int16_t)(connsm->chanmap_instant - connsm->event_cntr) <= 0)) {
   2133a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   2133c:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
   21340:	1a9b      	subs	r3, r3, r2
   21342:	b21b      	sxth	r3, r3
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   21344:	2b00      	cmp	r3, #0
   21346:	f340 80a4 	ble.w	21492 <ble_ll_conn_next_event+0x1e2>
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, latency);
   2134a:	4631      	mov	r1, r6
   2134c:	4620      	mov	r0, r4
   2134e:	f7ff ffa1 	bl	21294 <ble_ll_conn_calc_dci>
   21352:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    if (CONN_F_TERMINATE_STARTED(connsm)) {
   21356:	f994 3000 	ldrsb.w	r3, [r4]
   2135a:	2b00      	cmp	r3, #0
   2135c:	f2c0 80b0 	blt.w	214c0 <ble_ll_conn_next_event+0x210>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   21360:	79e3      	ldrb	r3, [r4, #7]
   21362:	2b02      	cmp	r3, #2
   21364:	f000 80b5 	beq.w	214d2 <ble_ll_conn_next_event+0x222>
    itvl = MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) * BLE_LL_SCHED_32KHZ_TICKS_PER_SLOT;
   21368:	23a4      	movs	r3, #164	; 0xa4
    itvl -= g_ble_ll_sched_offset_ticks;
   2136a:	4a6a      	ldr	r2, [pc, #424]	; (21514 <ble_ll_conn_next_event+0x264>)
   2136c:	7810      	ldrb	r0, [r2, #0]
   2136e:	1a18      	subs	r0, r3, r0
    connsm->ce_end_time = connsm->anchor_point + itvl;
   21370:	6f63      	ldr	r3, [r4, #116]	; 0x74
   21372:	4403      	add	r3, r0
   21374:	65e3      	str	r3, [r4, #92]	; 0x5c
    return 0;
   21376:	2000      	movs	r0, #0
}
   21378:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_ctrl_terminate_start(connsm);
   2137a:	4620      	mov	r0, r4
   2137c:	f002 fbf9 	bl	23b72 <ble_ll_ctrl_terminate_start>
   21380:	e7a1      	b.n	212c6 <ble_ll_conn_next_event+0x16>
    if (CONN_F_TERMINATE_STARTED(connsm) && (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE)) {
   21382:	79e3      	ldrb	r3, [r4, #7]
   21384:	2b02      	cmp	r3, #2
   21386:	d1a2      	bne.n	212ce <ble_ll_conn_next_event+0x1e>
        connsm->slave_latency = 0;
   21388:	2300      	movs	r3, #0
   2138a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
   2138e:	e79e      	b.n	212ce <ble_ll_conn_next_event+0x1e>
        if (connsm->csmflags.cfbit.pkt_rxd) {
   21390:	f012 0f01 	tst.w	r2, #1
   21394:	d006      	beq.n	213a4 <ble_ll_conn_next_event+0xf4>
            latency += connsm->slave_latency;
   21396:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
   2139a:	3601      	adds	r6, #1
   2139c:	b2b6      	uxth	r6, r6
            itvl = itvl * latency;
   2139e:	fb06 f505 	mul.w	r5, r6, r5
   213a2:	e7a0      	b.n	212e6 <ble_ll_conn_next_event+0x36>
    latency = 1;
   213a4:	2601      	movs	r6, #1
   213a6:	e79e      	b.n	212e6 <ble_ll_conn_next_event+0x36>
        ticks = os_cputime_usecs_to_ticks(itvl);
   213a8:	4628      	mov	r0, r5
   213aa:	f7ef fb6b 	bl	10a84 <os_cputime_usecs_to_ticks>
        connsm->anchor_point += ticks;
   213ae:	6f63      	ldr	r3, [r4, #116]	; 0x74
   213b0:	4403      	add	r3, r0
   213b2:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs += (itvl - os_cputime_ticks_to_usecs(ticks));
   213b4:	f7ef fb6e 	bl	10a94 <os_cputime_ticks_to_usecs>
   213b8:	1a28      	subs	r0, r5, r0
   213ba:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   213be:	4428      	add	r0, r5
   213c0:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
   213c4:	e7a1      	b.n	2130a <ble_ll_conn_next_event+0x5a>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER)  ||
   213c6:	79e3      	ldrb	r3, [r4, #7]
   213c8:	2b01      	cmp	r3, #1
   213ca:	d007      	beq.n	213dc <ble_ll_conn_next_event+0x12c>
   213cc:	2b02      	cmp	r3, #2
   213ce:	d031      	beq.n	21434 <ble_ll_conn_next_event+0x184>
            (connsm->conn_itvl != upd->interval)            ||
   213d0:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   213d4:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   213d8:	429a      	cmp	r2, r3
   213da:	d031      	beq.n	21440 <ble_ll_conn_next_event+0x190>
            connsm->csmflags.cfbit.host_expects_upd_event = 1;
   213dc:	7863      	ldrb	r3, [r4, #1]
   213de:	f043 0302 	orr.w	r3, r3, #2
   213e2:	7063      	strb	r3, [r4, #1]
        connsm->supervision_tmo = upd->timeout;
   213e4:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
   213e8:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
        connsm->slave_latency = upd->latency;
   213ec:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
   213f0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        connsm->tx_win_size = upd->winsize;
   213f4:	f894 216e 	ldrb.w	r2, [r4, #366]	; 0x16e
   213f8:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   213fc:	f240 43e2 	movw	r3, #1250	; 0x4e2
   21400:	fb03 f302 	mul.w	r3, r3, r2
        connsm->slave_cur_tx_win_usecs =
   21404:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        connsm->tx_win_off = upd->winoffset;
   21408:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
   2140c:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        connsm->conn_itvl = upd->interval;
   21410:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   21414:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
        ble_ll_conn_calc_itvl_ticks(connsm);
   21418:	4620      	mov	r0, r4
   2141a:	f7ff fd45 	bl	20ea8 <ble_ll_conn_calc_itvl_ticks>
        if (upd->winoffset != 0) {
   2141e:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
   21422:	b9d3      	cbnz	r3, 2145a <ble_ll_conn_next_event+0x1aa>
        connsm->last_rxd_pdu_cputime = connsm->anchor_point;
   21424:	6f63      	ldr	r3, [r4, #116]	; 0x74
   21426:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        connsm->csmflags.cfbit.conn_update_sched = 0;
   2142a:	7863      	ldrb	r3, [r4, #1]
   2142c:	f36f 0300 	bfc	r3, #0, #1
   21430:	7063      	strb	r3, [r4, #1]
   21432:	e77e      	b.n	21332 <ble_ll_conn_next_event+0x82>
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   21434:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   21438:	f013 0f40 	tst.w	r3, #64	; 0x40
   2143c:	d1ce      	bne.n	213dc <ble_ll_conn_next_event+0x12c>
   2143e:	e7c7      	b.n	213d0 <ble_ll_conn_next_event+0x120>
            (connsm->slave_latency != upd->latency)         ||
   21440:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   21444:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
            (connsm->conn_itvl != upd->interval)            ||
   21448:	429a      	cmp	r2, r3
   2144a:	d1c7      	bne.n	213dc <ble_ll_conn_next_event+0x12c>
            (connsm->supervision_tmo != upd->timeout)) {
   2144c:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   21450:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
            (connsm->slave_latency != upd->latency)         ||
   21454:	429a      	cmp	r2, r3
   21456:	d1c1      	bne.n	213dc <ble_ll_conn_next_event+0x12c>
   21458:	e7c4      	b.n	213e4 <ble_ll_conn_next_event+0x134>
            usecs = upd->winoffset * BLE_LL_CONN_ITVL_USECS;
   2145a:	f240 45e2 	movw	r5, #1250	; 0x4e2
   2145e:	fb05 f503 	mul.w	r5, r5, r3
            ticks = os_cputime_usecs_to_ticks(usecs);
   21462:	4628      	mov	r0, r5
   21464:	f7ef fb0e 	bl	10a84 <os_cputime_usecs_to_ticks>
            connsm->anchor_point += ticks;
   21468:	6f63      	ldr	r3, [r4, #116]	; 0x74
   2146a:	4403      	add	r3, r0
   2146c:	6763      	str	r3, [r4, #116]	; 0x74
            usecs = usecs - os_cputime_ticks_to_usecs(ticks);
   2146e:	f7ef fb11 	bl	10a94 <os_cputime_ticks_to_usecs>
   21472:	1a28      	subs	r0, r5, r0
            connsm->anchor_point_usecs += usecs;
   21474:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   21478:	4403      	add	r3, r0
   2147a:	b2db      	uxtb	r3, r3
   2147c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
            if (connsm->anchor_point_usecs >= 31) {
   21480:	2b1e      	cmp	r3, #30
   21482:	d9cf      	bls.n	21424 <ble_ll_conn_next_event+0x174>
                ++connsm->anchor_point;
   21484:	6f62      	ldr	r2, [r4, #116]	; 0x74
   21486:	3201      	adds	r2, #1
   21488:	6762      	str	r2, [r4, #116]	; 0x74
                connsm->anchor_point_usecs -= 31;
   2148a:	3b1f      	subs	r3, #31
   2148c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   21490:	e7c8      	b.n	21424 <ble_ll_conn_next_event+0x174>
            ble_ll_utils_calc_num_used_chans(connsm->req_chanmap);
   21492:	f104 0525 	add.w	r5, r4, #37	; 0x25
   21496:	4628      	mov	r0, r5
   21498:	f006 f8b9 	bl	2760e <ble_ll_utils_calc_num_used_chans>
        connsm->num_used_chans =
   2149c:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
        memcpy(connsm->chanmap, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   214a0:	f8d4 3025 	ldr.w	r3, [r4, #37]	; 0x25
   214a4:	6223      	str	r3, [r4, #32]
   214a6:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   214aa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        connsm->csmflags.cfbit.chanmap_update_scheduled = 0;
   214ae:	7863      	ldrb	r3, [r4, #1]
   214b0:	f36f 1304 	bfc	r3, #4, #1
   214b4:	7063      	strb	r3, [r4, #1]
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   214b6:	2101      	movs	r1, #1
   214b8:	4620      	mov	r0, r4
   214ba:	f002 fbee 	bl	23c9a <ble_ll_ctrl_proc_stop>
   214be:	e744      	b.n	2134a <ble_ll_conn_next_event+0x9a>
        if ((int32_t)(connsm->terminate_timeout - connsm->anchor_point) <= 0) {
   214c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   214c2:	6f62      	ldr	r2, [r4, #116]	; 0x74
   214c4:	1a9b      	subs	r3, r3, r2
   214c6:	2b00      	cmp	r3, #0
   214c8:	f73f af4a 	bgt.w	21360 <ble_ll_conn_next_event+0xb0>
            return -1;
   214cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   214d0:	e752      	b.n	21378 <ble_ll_conn_next_event+0xc8>
        cur_ww = ble_ll_utils_calc_window_widening(connsm->anchor_point,
   214d2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   214d6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   214da:	6f60      	ldr	r0, [r4, #116]	; 0x74
   214dc:	f006 f8b6 	bl	2764c <ble_ll_utils_calc_window_widening>
        max_ww = (connsm->conn_itvl * (BLE_LL_CONN_ITVL_USECS/2)) - BLE_LL_IFS;
   214e0:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   214e4:	f240 2371 	movw	r3, #625	; 0x271
   214e8:	fb03 f302 	mul.w	r3, r3, r2
   214ec:	3b96      	subs	r3, #150	; 0x96
        if (cur_ww >= max_ww) {
   214ee:	4298      	cmp	r0, r3
   214f0:	d20a      	bcs.n	21508 <ble_ll_conn_next_event+0x258>
        cur_ww += BLE_LL_JITTER_USECS;
   214f2:	3010      	adds	r0, #16
        connsm->slave_cur_window_widening = cur_ww;
   214f4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        itvl += os_cputime_usecs_to_ticks(cur_ww + connsm->slave_cur_tx_win_usecs);
   214f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   214fc:	4418      	add	r0, r3
   214fe:	f7ef fac1 	bl	10a84 <os_cputime_usecs_to_ticks>
   21502:	f100 03a4 	add.w	r3, r0, #164	; 0xa4
   21506:	e730      	b.n	2136a <ble_ll_conn_next_event+0xba>
            return -1;
   21508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2150c:	e734      	b.n	21378 <ble_ll_conn_next_event+0xc8>
   2150e:	bf00      	nop
   21510:	00401110 	.word	0x00401110
   21514:	200042ac 	.word	0x200042ac

00021518 <ble_ll_conn_created>:
{
   21518:	b570      	push	{r4, r5, r6, lr}
   2151a:	4604      	mov	r4, r0
   2151c:	460d      	mov	r5, r1
    connsm->conn_state = BLE_LL_CONN_STATE_CREATED;
   2151e:	2301      	movs	r3, #1
   21520:	7183      	strb	r3, [r0, #6]
    connsm->csmflags.cfbit.pkt_rxd = 0;
   21522:	7803      	ldrb	r3, [r0, #0]
   21524:	f36f 0300 	bfc	r3, #0, #1
   21528:	7003      	strb	r3, [r0, #0]
    connsm->last_scheduled = os_cputime_get32();
   2152a:	f7ef faa5 	bl	10a78 <os_cputime_get32>
   2152e:	6660      	str	r0, [r4, #100]	; 0x64
    connsm->last_rxd_pdu_cputime = connsm->last_scheduled;
   21530:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   21534:	79e3      	ldrb	r3, [r4, #7]
   21536:	2b02      	cmp	r3, #2
   21538:	d011      	beq.n	2155e <ble_ll_conn_created+0x46>
    rc = 1;
   2153a:	2601      	movs	r6, #1
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   2153c:	79e3      	ldrb	r3, [r4, #7]
   2153e:	2b02      	cmp	r3, #2
   21540:	d069      	beq.n	21616 <ble_ll_conn_created+0xfe>
            evbuf = ble_ll_init_get_conn_comp_ev();
   21542:	f7ff f961 	bl	20808 <ble_ll_init_get_conn_comp_ev>
            ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, evbuf, NULL);
   21546:	2300      	movs	r3, #0
   21548:	4602      	mov	r2, r0
   2154a:	4619      	mov	r1, r3
   2154c:	4620      	mov	r0, r4
   2154e:	f001 f962 	bl	22816 <ble_ll_conn_comp_event_send>
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   21552:	2103      	movs	r1, #3
   21554:	4620      	mov	r0, r4
   21556:	f002 fb2d 	bl	23bb4 <ble_ll_ctrl_proc_start>
}
   2155a:	4630      	mov	r0, r6
   2155c:	bd70      	pop	{r4, r5, r6, pc}
        connsm->last_anchor_point = rxhdr->beg_cputime;
   2155e:	68ab      	ldr	r3, [r5, #8]
   21560:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        usecs = rxhdr->rem_usecs + 1250 +
   21564:	68ee      	ldr	r6, [r5, #12]
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   21566:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
        usecs = rxhdr->rem_usecs + 1250 +
   2156a:	f240 43e2 	movw	r3, #1250	; 0x4e2
   2156e:	fb03 6600 	mla	r6, r3, r0, r6
                ble_ll_pdu_tx_time_get(BLE_CONNECT_REQ_LEN,
   21572:	79a9      	ldrb	r1, [r5, #6]
   21574:	2022      	movs	r0, #34	; 0x22
   21576:	f7fd ff93 	bl	1f4a0 <ble_ll_pdu_tx_time_get>
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   2157a:	4430      	add	r0, r6
        usecs = rxhdr->rem_usecs + 1250 +
   2157c:	f200 46e2 	addw	r6, r0, #1250	; 0x4e2
        if (rxhdr->rxinfo.channel < BLE_PHY_NUM_DATA_CHANS) {
   21580:	78ab      	ldrb	r3, [r5, #2]
   21582:	2b24      	cmp	r3, #36	; 0x24
   21584:	d80c      	bhi.n	215a0 <ble_ll_conn_created+0x88>
            switch (rxhdr->rxinfo.phy) {
   21586:	f995 3005 	ldrsb.w	r3, [r5, #5]
   2158a:	2b01      	cmp	r3, #1
   2158c:	db32      	blt.n	215f4 <ble_ll_conn_created+0xdc>
   2158e:	2b02      	cmp	r3, #2
   21590:	dd04      	ble.n	2159c <ble_ll_conn_created+0x84>
   21592:	2b03      	cmp	r3, #3
   21594:	d12e      	bne.n	215f4 <ble_ll_conn_created+0xdc>
                usecs += 2500;
   21596:	f600 66a6 	addw	r6, r0, #3750	; 0xea6
                break;
   2159a:	e001      	b.n	215a0 <ble_ll_conn_created+0x88>
                usecs += 1250;
   2159c:	f600 16c4 	addw	r6, r0, #2500	; 0x9c4
        endtime = os_cputime_usecs_to_ticks(usecs);
   215a0:	4630      	mov	r0, r6
   215a2:	f7ef fa6f 	bl	10a84 <os_cputime_usecs_to_ticks>
        connsm->anchor_point = rxhdr->beg_cputime + endtime;
   215a6:	68ab      	ldr	r3, [r5, #8]
   215a8:	4403      	add	r3, r0
   215aa:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs = usecs - os_cputime_ticks_to_usecs(endtime);
   215ac:	f7ef fa72 	bl	10a94 <os_cputime_ticks_to_usecs>
   215b0:	1a30      	subs	r0, r6, r0
   215b2:	b2c0      	uxtb	r0, r0
   215b4:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
        if (connsm->anchor_point_usecs == 31) {
   215b8:	281f      	cmp	r0, #31
   215ba:	d021      	beq.n	21600 <ble_ll_conn_created+0xe8>
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   215bc:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   215c0:	f240 40e2 	movw	r0, #1250	; 0x4e2
   215c4:	fb00 f003 	mul.w	r0, r0, r3
        connsm->slave_cur_tx_win_usecs =
   215c8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
        connsm->ce_end_time = connsm->anchor_point +
   215cc:	6f66      	ldr	r6, [r4, #116]	; 0x74
            + os_cputime_usecs_to_ticks(connsm->slave_cur_tx_win_usecs) + 1;
   215ce:	f7ef fa59 	bl	10a84 <os_cputime_usecs_to_ticks>
   215d2:	4430      	add	r0, r6
   215d4:	30a5      	adds	r0, #165	; 0xa5
        connsm->ce_end_time = connsm->anchor_point +
   215d6:	65e0      	str	r0, [r4, #92]	; 0x5c
        connsm->slave_cur_window_widening = BLE_LL_JITTER_USECS;
   215d8:	2310      	movs	r3, #16
   215da:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        while (ble_ll_sched_slave_new(connsm)) {
   215de:	4620      	mov	r0, r4
   215e0:	f005 fd38 	bl	27054 <ble_ll_sched_slave_new>
   215e4:	b198      	cbz	r0, 2160e <ble_ll_conn_created+0xf6>
            if (ble_ll_conn_next_event(connsm)) {
   215e6:	4620      	mov	r0, r4
   215e8:	f7ff fe62 	bl	212b0 <ble_ll_conn_next_event>
   215ec:	2800      	cmp	r0, #0
   215ee:	d0f6      	beq.n	215de <ble_ll_conn_created+0xc6>
                rc = 0;
   215f0:	2600      	movs	r6, #0
   215f2:	e00d      	b.n	21610 <ble_ll_conn_created+0xf8>
                BLE_LL_ASSERT(0);
   215f4:	2300      	movs	r3, #0
   215f6:	461a      	mov	r2, r3
   215f8:	4619      	mov	r1, r3
   215fa:	4618      	mov	r0, r3
   215fc:	f7ee ffee 	bl	105dc <__assert_func>
            ++connsm->anchor_point;
   21600:	6f63      	ldr	r3, [r4, #116]	; 0x74
   21602:	3301      	adds	r3, #1
   21604:	6763      	str	r3, [r4, #116]	; 0x74
            connsm->anchor_point_usecs = 0;
   21606:	2300      	movs	r3, #0
   21608:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   2160c:	e7d6      	b.n	215bc <ble_ll_conn_created+0xa4>
    rc = 1;
   2160e:	2601      	movs	r6, #1
    if (rc) {
   21610:	2e00      	cmp	r6, #0
   21612:	d193      	bne.n	2153c <ble_ll_conn_created+0x24>
   21614:	e7a1      	b.n	2155a <ble_ll_conn_created+0x42>
            ble_ll_adv_send_conn_comp_ev(connsm, rxhdr);
   21616:	4629      	mov	r1, r5
   21618:	4620      	mov	r0, r4
   2161a:	f7ff f821 	bl	20660 <ble_ll_adv_send_conn_comp_ev>
   2161e:	e79c      	b.n	2155a <ble_ll_conn_created+0x42>

00021620 <ble_ll_conn_set_csa>:
{
   21620:	b510      	push	{r4, lr}
   21622:	4604      	mov	r4, r0
    connsm->last_unmapped_chan = 0;
   21624:	2300      	movs	r3, #0
   21626:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, 1);
   2162a:	2101      	movs	r1, #1
   2162c:	f7ff fe32 	bl	21294 <ble_ll_conn_calc_dci>
   21630:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
}
   21634:	bd10      	pop	{r4, pc}
	...

00021638 <ble_ll_conn_wfr_timer_exp>:
{
   21638:	b508      	push	{r3, lr}
    ble_ll_conn_current_sm_over(connsm);
   2163a:	4b02      	ldr	r3, [pc, #8]	; (21644 <ble_ll_conn_wfr_timer_exp+0xc>)
   2163c:	6818      	ldr	r0, [r3, #0]
   2163e:	f7ff f8bb 	bl	207b8 <ble_ll_conn_current_sm_over>
}
   21642:	bd08      	pop	{r3, pc}
   21644:	20003f80 	.word	0x20003f80

00021648 <ble_ll_conn_reset_pending_aux_conn_rsp>:
}
   21648:	4770      	bx	lr

0002164a <ble_ll_conn_init_wfr_timer_exp>:
}
   2164a:	4770      	bx	lr

0002164c <ble_ll_conn_auth_pyld_timer_start>:
{
   2164c:	b510      	push	{r4, lr}
   2164e:	4604      	mov	r4, r0
    tmo = (int32_t)BLE_LL_CONN_AUTH_PYLD_OS_TMO(connsm->auth_pyld_tmo);
   21650:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   21654:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   21658:	0058      	lsls	r0, r3, #1
os_time_ms_to_ticks32(uint32_t ms)
{
#if OS_TICKS_PER_SEC == 1000
    return ms;
#else
    return ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   2165a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2165e:	2300      	movs	r3, #0
   21660:	01c0      	lsls	r0, r0, #7
   21662:	2100      	movs	r1, #0
   21664:	f008 f9a6 	bl	299b4 <__aeabi_uldivmod>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   21668:	4601      	mov	r1, r0
   2166a:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   2166e:	f7ef f95b 	bl	10928 <os_callout_reset>
}
   21672:	bd10      	pop	{r4, pc}

00021674 <ble_ll_conn_auth_pyld_timer_cb>:
{
   21674:	b510      	push	{r4, lr}
    return ev->ev.ev_arg;
   21676:	6884      	ldr	r4, [r0, #8]
    ble_ll_auth_pyld_tmo_event_send(connsm);
   21678:	4620      	mov	r0, r4
   2167a:	f001 f9f9 	bl	22a70 <ble_ll_auth_pyld_tmo_event_send>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_LE_PING);
   2167e:	2107      	movs	r1, #7
   21680:	4620      	mov	r0, r4
   21682:	f002 fa97 	bl	23bb4 <ble_ll_ctrl_proc_start>
    ble_ll_conn_auth_pyld_timer_start(connsm);
   21686:	4620      	mov	r0, r4
   21688:	f7ff ffe0 	bl	2164c <ble_ll_conn_auth_pyld_timer_start>
}
   2168c:	bd10      	pop	{r4, pc}

0002168e <ble_ll_conn_master_init>:
{
   2168e:	b538      	push	{r3, r4, r5, lr}
   21690:	4605      	mov	r5, r0
   21692:	460c      	mov	r4, r1
    ble_ll_conn_master_common_init(connsm);
   21694:	f7ff fbd0 	bl	20e38 <ble_ll_conn_master_common_init>
    connsm->slave_latency = hcc->conn_latency;
   21698:	8a63      	ldrh	r3, [r4, #18]
   2169a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
    connsm->supervision_tmo = hcc->supervision_timeout;
   2169e:	8aa3      	ldrh	r3, [r4, #20]
   216a0:	f8a5 306c 	strh.w	r3, [r5, #108]	; 0x6c
    connsm->own_addr_type = hcc->own_addr_type;
   216a4:	7b23      	ldrb	r3, [r4, #12]
   216a6:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
    if (hcc->filter_policy == 0) {
   216aa:	7923      	ldrb	r3, [r4, #4]
   216ac:	b173      	cbz	r3, 216cc <ble_ll_conn_master_init+0x3e>
    connsm->conn_itvl = hcc->conn_itvl_max;
   216ae:	8a23      	ldrh	r3, [r4, #16]
   216b0:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    if (hcc->min_ce_len > (connsm->conn_itvl * 2)) {
   216b4:	8ae1      	ldrh	r1, [r4, #22]
   216b6:	005a      	lsls	r2, r3, #1
   216b8:	4291      	cmp	r1, r2
   216ba:	dd13      	ble.n	216e4 <ble_ll_conn_master_init+0x56>
        connsm->min_ce_len = connsm->conn_itvl * 2;
   216bc:	f8a5 206e 	strh.w	r2, [r5, #110]	; 0x6e
    if (hcc->max_ce_len > (connsm->conn_itvl * 2)) {
   216c0:	8b21      	ldrh	r1, [r4, #24]
   216c2:	428a      	cmp	r2, r1
   216c4:	db11      	blt.n	216ea <ble_ll_conn_master_init+0x5c>
        connsm->max_ce_len = hcc->max_ce_len;
   216c6:	f8a5 1070 	strh.w	r1, [r5, #112]	; 0x70
}
   216ca:	bd38      	pop	{r3, r4, r5, pc}
        memcpy(&connsm->peer_addr, &hcc->peer_addr, BLE_DEV_ADDR_LEN);
   216cc:	4623      	mov	r3, r4
   216ce:	f853 2f06 	ldr.w	r2, [r3, #6]!
   216d2:	f8c5 2093 	str.w	r2, [r5, #147]	; 0x93
   216d6:	889b      	ldrh	r3, [r3, #4]
   216d8:	f8a5 3097 	strh.w	r3, [r5, #151]	; 0x97
        connsm->peer_addr_type = hcc->peer_addr_type;
   216dc:	7963      	ldrb	r3, [r4, #5]
   216de:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
   216e2:	e7e4      	b.n	216ae <ble_ll_conn_master_init+0x20>
        connsm->min_ce_len = hcc->min_ce_len;
   216e4:	f8a5 106e 	strh.w	r1, [r5, #110]	; 0x6e
   216e8:	e7ea      	b.n	216c0 <ble_ll_conn_master_init+0x32>
        connsm->max_ce_len = connsm->conn_itvl * 2;
   216ea:	005b      	lsls	r3, r3, #1
   216ec:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
   216f0:	e7eb      	b.n	216ca <ble_ll_conn_master_init+0x3c>
	...

000216f4 <ble_ll_conn_sm_new>:
{
   216f4:	b570      	push	{r4, r5, r6, lr}
   216f6:	4604      	mov	r4, r0
    connsm->csmflags.conn_flags = 0;
   216f8:	2500      	movs	r5, #0
   216fa:	6005      	str	r5, [r0, #0]
    connsm->event_cntr = 0;
   216fc:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   21700:	7185      	strb	r5, [r0, #6]
    connsm->disconnect_reason = 0;
   21702:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    connsm->conn_features = BLE_LL_CONN_INITIAL_FEATURES;
   21706:	2322      	movs	r3, #34	; 0x22
   21708:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    memset(connsm->remote_features, 0, sizeof(connsm->remote_features));
   2170c:	6405      	str	r5, [r0, #64]	; 0x40
   2170e:	f8c0 5043 	str.w	r5, [r0, #67]	; 0x43
    connsm->vers_nr = 0;
   21712:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
    connsm->comp_id = 0;
   21716:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
    connsm->sub_vers_nr = 0;
   2171a:	f8a0 5050 	strh.w	r5, [r0, #80]	; 0x50
    connsm->reject_reason = BLE_ERR_SUCCESS;
   2171e:	f880 5037 	strb.w	r5, [r0, #55]	; 0x37
    connsm->conn_rssi = BLE_LL_CONN_UNKNOWN_RSSI;
   21722:	237f      	movs	r3, #127	; 0x7f
   21724:	7203      	strb	r3, [r0, #8]
    connsm->rpa_index = -1;
   21726:	23ff      	movs	r3, #255	; 0xff
   21728:	7243      	strb	r3, [r0, #9]
    connsm->inita_identity_used = 0;
   2172a:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
    connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   2172e:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
    connsm->pending_ctrl_procs = 0;
   21732:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
    connsm->conn_param_req.handle = 0;
   21736:	f8a0 5160 	strh.w	r5, [r0, #352]	; 0x160
    memset(ev, 0, sizeof(*ev));
   2173a:	f8c0 509c 	str.w	r5, [r0, #156]	; 0x9c
   2173e:	f8c0 50a8 	str.w	r5, [r0, #168]	; 0xa8
    ev->ev.ev_queued = 0;
   21742:	f880 509c 	strb.w	r5, [r0, #156]	; 0x9c
    ev->ev.ev_cb = (os_event_fn *)fn;
   21746:	4b26      	ldr	r3, [pc, #152]	; (217e0 <ble_ll_conn_sm_new+0xec>)
   21748:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    ev->ev.ev_arg = arg;
   2174c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    STAILQ_INIT(&connsm->conn_txq);
   21750:	4603      	mov	r3, r0
   21752:	f843 5fb0 	str.w	r5, [r3, #176]!
   21756:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    connsm->cur_tx_pdu = NULL;
   2175a:	f8c0 50ac 	str.w	r5, [r0, #172]	; 0xac
    connsm->tx_seqnum = 0;
   2175e:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
    connsm->next_exp_seqnum = 0;
   21762:	f880 5033 	strb.w	r5, [r0, #51]	; 0x33
    connsm->cons_rxd_bad_crc = 0;
   21766:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    connsm->last_rxd_sn = 1;
   2176a:	2601      	movs	r6, #1
   2176c:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
    connsm->completed_pkts = 0;
   21770:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
    connsm->max_tx_octets = conn_params->conn_init_max_tx_octets;
   21774:	4b1b      	ldr	r3, [pc, #108]	; (217e4 <ble_ll_conn_sm_new+0xf0>)
   21776:	7a1a      	ldrb	r2, [r3, #8]
   21778:	7282      	strb	r2, [r0, #10]
    connsm->max_rx_octets = conn_params->supp_max_rx_octets;
   2177a:	79da      	ldrb	r2, [r3, #7]
   2177c:	72c2      	strb	r2, [r0, #11]
    connsm->max_tx_time = conn_params->conn_init_max_tx_time;
   2177e:	899a      	ldrh	r2, [r3, #12]
   21780:	8202      	strh	r2, [r0, #16]
    connsm->max_rx_time = conn_params->supp_max_rx_time;
   21782:	8a9b      	ldrh	r3, [r3, #20]
   21784:	8243      	strh	r3, [r0, #18]
    connsm->rem_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   21786:	f44f 73a4 	mov.w	r3, #328	; 0x148
   2178a:	8283      	strh	r3, [r0, #20]
    connsm->rem_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   2178c:	82c3      	strh	r3, [r0, #22]
    connsm->eff_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   2178e:	8303      	strh	r3, [r0, #24]
    connsm->eff_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   21790:	8343      	strh	r3, [r0, #26]
    connsm->rem_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   21792:	231b      	movs	r3, #27
   21794:	7303      	strb	r3, [r0, #12]
    connsm->rem_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   21796:	7343      	strb	r3, [r0, #13]
    connsm->eff_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   21798:	7383      	strb	r3, [r0, #14]
    connsm->eff_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   2179a:	73c3      	strb	r3, [r0, #15]
    ble_ll_update_max_tx_octets_phy_mode(connsm);
   2179c:	f7ff f881 	bl	208a2 <ble_ll_update_max_tx_octets_phy_mode>
    memset(&connsm->enc_data, 0, sizeof(struct ble_ll_conn_enc_data));
   217a0:	2248      	movs	r2, #72	; 0x48
   217a2:	4629      	mov	r1, r5
   217a4:	f504 708c 	add.w	r0, r4, #280	; 0x118
   217a8:	f7f0 feb5 	bl	12516 <memset>
    connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   217ac:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    connsm->auth_pyld_tmo = BLE_LL_CONN_DEF_AUTH_PYLD_TMO;
   217b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
   217b4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    CONN_F_LE_PING_SUPP(connsm) = 1;
   217b8:	78a3      	ldrb	r3, [r4, #2]
   217ba:	f043 0308 	orr.w	r3, r3, #8
   217be:	70a3      	strb	r3, [r4, #2]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   217c0:	4623      	mov	r3, r4
   217c2:	4a09      	ldr	r2, [pc, #36]	; (217e8 <ble_ll_conn_sm_new+0xf4>)
   217c4:	4909      	ldr	r1, [pc, #36]	; (217ec <ble_ll_conn_sm_new+0xf8>)
   217c6:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   217ca:	f7ef f881 	bl	108d0 <os_callout_init>
    ble_ll_conn_calc_itvl_ticks(connsm);
   217ce:	4620      	mov	r0, r4
   217d0:	f7ff fb6a 	bl	20ea8 <ble_ll_conn_calc_itvl_ticks>
    SLIST_INSERT_HEAD(&g_ble_ll_conn_active_list, connsm, act_sle);
   217d4:	4b06      	ldr	r3, [pc, #24]	; (217f0 <ble_ll_conn_sm_new+0xfc>)
   217d6:	681a      	ldr	r2, [r3, #0]
   217d8:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   217dc:	601c      	str	r4, [r3, #0]
}
   217de:	bd70      	pop	{r4, r5, r6, pc}
   217e0:	0002195d 	.word	0x0002195d
   217e4:	20003f68 	.word	0x20003f68
   217e8:	00021675 	.word	0x00021675
   217ec:	20003e4c 	.word	0x20003e4c
   217f0:	20004130 	.word	0x20004130

000217f4 <ble_ll_conn_datalen_update>:
{
   217f4:	b510      	push	{r4, lr}
   217f6:	4604      	mov	r4, r0
    connsm->rem_max_rx_time = req->max_rx_time;
   217f8:	884a      	ldrh	r2, [r1, #2]
   217fa:	82c2      	strh	r2, [r0, #22]
    connsm->rem_max_tx_time = req->max_tx_time;
   217fc:	88cb      	ldrh	r3, [r1, #6]
   217fe:	8283      	strh	r3, [r0, #20]
    connsm->rem_max_rx_octets = req->max_rx_bytes;
   21800:	8808      	ldrh	r0, [r1, #0]
   21802:	7360      	strb	r0, [r4, #13]
    connsm->rem_max_tx_octets = req->max_tx_bytes;
   21804:	8889      	ldrh	r1, [r1, #4]
   21806:	7321      	strb	r1, [r4, #12]
    eff_time = min(connsm->rem_max_tx_time, connsm->max_rx_time);
   21808:	8a61      	ldrh	r1, [r4, #18]
   2180a:	428b      	cmp	r3, r1
   2180c:	bf28      	it	cs
   2180e:	460b      	movcs	r3, r1
    if (eff_time != connsm->eff_max_rx_time) {
   21810:	8b61      	ldrh	r1, [r4, #26]
   21812:	4299      	cmp	r1, r3
   21814:	d01f      	beq.n	21856 <ble_ll_conn_datalen_update+0x62>
        connsm->eff_max_rx_time = eff_time;
   21816:	8363      	strh	r3, [r4, #26]
        send_event = 1;
   21818:	2101      	movs	r1, #1
    eff_time = min(connsm->rem_max_rx_time, connsm->max_tx_time);
   2181a:	8a23      	ldrh	r3, [r4, #16]
   2181c:	429a      	cmp	r2, r3
   2181e:	bf28      	it	cs
   21820:	461a      	movcs	r2, r3
    if (eff_time != connsm->eff_max_tx_time) {
   21822:	8b23      	ldrh	r3, [r4, #24]
   21824:	4293      	cmp	r3, r2
   21826:	d118      	bne.n	2185a <ble_ll_conn_datalen_update+0x66>
    eff_bytes = min(connsm->rem_max_tx_octets, connsm->max_rx_octets);
   21828:	7b22      	ldrb	r2, [r4, #12]
   2182a:	7ae3      	ldrb	r3, [r4, #11]
   2182c:	429a      	cmp	r2, r3
   2182e:	d21a      	bcs.n	21866 <ble_ll_conn_datalen_update+0x72>
   21830:	b293      	uxth	r3, r2
    if (eff_bytes != connsm->eff_max_rx_octets) {
   21832:	7be2      	ldrb	r2, [r4, #15]
   21834:	429a      	cmp	r2, r3
   21836:	d001      	beq.n	2183c <ble_ll_conn_datalen_update+0x48>
        connsm->eff_max_rx_octets = eff_bytes;
   21838:	73e3      	strb	r3, [r4, #15]
        send_event = 1;
   2183a:	2101      	movs	r1, #1
    eff_bytes = min(connsm->rem_max_rx_octets, connsm->max_tx_octets);
   2183c:	7b62      	ldrb	r2, [r4, #13]
   2183e:	7aa3      	ldrb	r3, [r4, #10]
   21840:	429a      	cmp	r2, r3
   21842:	d212      	bcs.n	2186a <ble_ll_conn_datalen_update+0x76>
   21844:	b293      	uxth	r3, r2
    if (eff_bytes != connsm->eff_max_tx_octets) {
   21846:	7ba2      	ldrb	r2, [r4, #14]
   21848:	429a      	cmp	r2, r3
   2184a:	d010      	beq.n	2186e <ble_ll_conn_datalen_update+0x7a>
        connsm->eff_max_tx_octets = eff_bytes;
   2184c:	73a3      	strb	r3, [r4, #14]
        ble_ll_hci_ev_datalen_chg(connsm);
   2184e:	4620      	mov	r0, r4
   21850:	f003 fb20 	bl	24e94 <ble_ll_hci_ev_datalen_chg>
}
   21854:	bd10      	pop	{r4, pc}
    send_event = 0;
   21856:	2100      	movs	r1, #0
   21858:	e7df      	b.n	2181a <ble_ll_conn_datalen_update+0x26>
        connsm->eff_max_tx_time = eff_time;
   2185a:	8322      	strh	r2, [r4, #24]
        ble_ll_update_max_tx_octets_phy_mode(connsm);
   2185c:	4620      	mov	r0, r4
   2185e:	f7ff f820 	bl	208a2 <ble_ll_update_max_tx_octets_phy_mode>
        send_event = 1;
   21862:	2101      	movs	r1, #1
   21864:	e7e0      	b.n	21828 <ble_ll_conn_datalen_update+0x34>
    eff_bytes = min(connsm->rem_max_tx_octets, connsm->max_rx_octets);
   21866:	b29b      	uxth	r3, r3
   21868:	e7e3      	b.n	21832 <ble_ll_conn_datalen_update+0x3e>
    eff_bytes = min(connsm->rem_max_rx_octets, connsm->max_tx_octets);
   2186a:	b29b      	uxth	r3, r3
   2186c:	e7eb      	b.n	21846 <ble_ll_conn_datalen_update+0x52>
    if (send_event) {
   2186e:	2900      	cmp	r1, #0
   21870:	d1ed      	bne.n	2184e <ble_ll_conn_datalen_update+0x5a>
   21872:	e7ef      	b.n	21854 <ble_ll_conn_datalen_update+0x60>

00021874 <ble_ll_conn_end>:
{
   21874:	b538      	push	{r3, r4, r5, lr}
   21876:	4604      	mov	r4, r0
   21878:	460d      	mov	r5, r1
    ble_ll_sched_rmv_elem(&connsm->conn_sch);
   2187a:	30dc      	adds	r0, #220	; 0xdc
   2187c:	f005 fdb8 	bl	273f0 <ble_ll_sched_rmv_elem>
    os_callout_stop(&co->co);
   21880:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   21884:	f7ef f832 	bl	108ec <os_callout_stop>
   21888:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   2188c:	f7ef f82e 	bl	108ec <os_callout_stop>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   21890:	4b2f      	ldr	r3, [pc, #188]	; (21950 <ble_ll_conn_end+0xdc>)
   21892:	681a      	ldr	r2, [r3, #0]
   21894:	42a2      	cmp	r2, r4
   21896:	d104      	bne.n	218a2 <ble_ll_conn_end+0x2e>
   21898:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   2189c:	601a      	str	r2, [r3, #0]
   2189e:	e008      	b.n	218b2 <ble_ll_conn_end+0x3e>
   218a0:	461a      	mov	r2, r3
   218a2:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   218a6:	42a3      	cmp	r3, r4
   218a8:	d1fa      	bne.n	218a0 <ble_ll_conn_end+0x2c>
   218aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   218ae:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    if (connsm->cur_tx_pdu) {
   218b2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   218b6:	b140      	cbz	r0, 218ca <ble_ll_conn_end+0x56>
        os_mbuf_free_chain(connsm->cur_tx_pdu);
   218b8:	f7ef fb10 	bl	10edc <os_mbuf_free_chain>
        connsm->cur_tx_pdu = NULL;
   218bc:	2300      	movs	r3, #0
   218be:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   218c2:	e002      	b.n	218ca <ble_ll_conn_end+0x56>
        os_mbuf_free_chain(m);
   218c4:	3810      	subs	r0, #16
   218c6:	f7ef fb09 	bl	10edc <os_mbuf_free_chain>
        pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   218ca:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
        if (!pkthdr) {
   218ce:	b148      	cbz	r0, 218e4 <ble_ll_conn_end+0x70>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   218d0:	6843      	ldr	r3, [r0, #4]
   218d2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   218d6:	2b00      	cmp	r3, #0
   218d8:	d1f4      	bne.n	218c4 <ble_ll_conn_end+0x50>
   218da:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   218de:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   218e2:	e7ef      	b.n	218c4 <ble_ll_conn_end+0x50>
    os_eventq_remove(&evq->evq, &ev->ev);
   218e4:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   218e8:	481a      	ldr	r0, [pc, #104]	; (21954 <ble_ll_conn_end+0xe0>)
   218ea:	f7ef fa55 	bl	10d98 <os_eventq_remove>
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   218ee:	2300      	movs	r3, #0
   218f0:	71a3      	strb	r3, [r4, #6]
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   218f2:	78e3      	ldrb	r3, [r4, #3]
   218f4:	f003 0318 	and.w	r3, r3, #24
   218f8:	2b18      	cmp	r3, #24
   218fa:	d017      	beq.n	2192c <ble_ll_conn_end+0xb8>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   218fc:	78e3      	ldrb	r3, [r4, #3]
   218fe:	f013 0f10 	tst.w	r3, #16
   21902:	d11c      	bne.n	2193e <ble_ll_conn_end+0xca>
    if (ble_err && (ble_err != BLE_ERR_UNK_CONN_ID ||
   21904:	b14d      	cbz	r5, 2191a <ble_ll_conn_end+0xa6>
   21906:	2d02      	cmp	r5, #2
   21908:	d103      	bne.n	21912 <ble_ll_conn_end+0x9e>
   2190a:	7823      	ldrb	r3, [r4, #0]
   2190c:	f013 0f04 	tst.w	r3, #4
   21910:	d003      	beq.n	2191a <ble_ll_conn_end+0xa6>
        ble_ll_disconn_comp_event_send(connsm, ble_err);
   21912:	4629      	mov	r1, r5
   21914:	4620      	mov	r0, r4
   21916:	f001 f8c4 	bl	22aa2 <ble_ll_disconn_comp_event_send>
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   2191a:	2300      	movs	r3, #0
   2191c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
   21920:	4b0d      	ldr	r3, [pc, #52]	; (21958 <ble_ll_conn_end+0xe4>)
   21922:	685a      	ldr	r2, [r3, #4]
   21924:	6014      	str	r4, [r2, #0]
   21926:	34b8      	adds	r4, #184	; 0xb8
   21928:	605c      	str	r4, [r3, #4]
}
   2192a:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   2192c:	2100      	movs	r1, #0
   2192e:	4620      	mov	r0, r4
   21930:	f003 fb99 	bl	25066 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   21934:	78e3      	ldrb	r3, [r4, #3]
   21936:	f36f 1304 	bfc	r3, #4, #1
   2193a:	70e3      	strb	r3, [r4, #3]
   2193c:	e7de      	b.n	218fc <ble_ll_conn_end+0x88>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, ble_err);
   2193e:	4629      	mov	r1, r5
   21940:	4620      	mov	r0, r4
   21942:	f003 fb90 	bl	25066 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   21946:	78e3      	ldrb	r3, [r4, #3]
   21948:	f36f 1304 	bfc	r3, #4, #1
   2194c:	70e3      	strb	r3, [r4, #3]
   2194e:	e7d9      	b.n	21904 <ble_ll_conn_end+0x90>
   21950:	20004130 	.word	0x20004130
   21954:	20003e4c 	.word	0x20003e4c
   21958:	20003f88 	.word	0x20003f88

0002195c <ble_ll_conn_event_end>:
{
   2195c:	b538      	push	{r3, r4, r5, lr}
    return ev->ev.ev_arg;
   2195e:	6884      	ldr	r4, [r0, #8]
    BLE_LL_ASSERT(connsm);
   21960:	b19c      	cbz	r4, 2198a <ble_ll_conn_event_end+0x2e>
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   21962:	79a3      	ldrb	r3, [r4, #6]
   21964:	b1bb      	cbz	r3, 21996 <ble_ll_conn_event_end+0x3a>
    ble_ll_scan_chk_resume();
   21966:	f004 fd33 	bl	263d0 <ble_ll_scan_chk_resume>
    ble_ll_sched_rfclk_chk_restart();
   2196a:	f005 fd8d 	bl	27488 <ble_ll_sched_rfclk_chk_restart>
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   2196e:	7823      	ldrb	r3, [r4, #0]
   21970:	f013 0202 	ands.w	r2, r3, #2
   21974:	d103      	bne.n	2197e <ble_ll_conn_event_end+0x22>
                    (connsm->csmflags.cfbit.terminate_ind_rxd &&
   21976:	f003 030c 	and.w	r3, r3, #12
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   2197a:	2b0c      	cmp	r3, #12
   2197c:	d115      	bne.n	219aa <ble_ll_conn_event_end+0x4e>
        if (connsm->csmflags.cfbit.terminate_ind_txd) {
   2197e:	b97a      	cbnz	r2, 219a0 <ble_ll_conn_event_end+0x44>
            ble_err = connsm->rxd_disconnect_reason;
   21980:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
            if (ble_err == 0) {
   21984:	b969      	cbnz	r1, 219a2 <ble_ll_conn_event_end+0x46>
                ble_err = BLE_ERR_REM_USER_CONN_TERM;
   21986:	2113      	movs	r1, #19
   21988:	e00b      	b.n	219a2 <ble_ll_conn_event_end+0x46>
    BLE_LL_ASSERT(connsm);
   2198a:	2300      	movs	r3, #0
   2198c:	461a      	mov	r2, r3
   2198e:	4619      	mov	r1, r3
   21990:	4618      	mov	r0, r3
   21992:	f7ee fe23 	bl	105dc <__assert_func>
        BLE_LL_ASSERT(0);
   21996:	461a      	mov	r2, r3
   21998:	4619      	mov	r1, r3
   2199a:	4618      	mov	r0, r3
   2199c:	f7ee fe1e 	bl	105dc <__assert_func>
            ble_err = BLE_ERR_CONN_TERM_LOCAL;
   219a0:	2116      	movs	r1, #22
        ble_ll_conn_end(connsm, ble_err);
   219a2:	4620      	mov	r0, r4
   219a4:	f7ff ff66 	bl	21874 <ble_ll_conn_end>
}
   219a8:	bd38      	pop	{r3, r4, r5, pc}
    os_eventq_remove(&evq->evq, &ev->ev);
   219aa:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   219ae:	482f      	ldr	r0, [pc, #188]	; (21a6c <ble_ll_conn_event_end+0x110>)
   219b0:	f7ef f9f2 	bl	10d98 <os_eventq_remove>
    if (connsm->csmflags.cfbit.pkt_rxd) {
   219b4:	7823      	ldrb	r3, [r4, #0]
   219b6:	f013 0f01 	tst.w	r3, #1
   219ba:	d002      	beq.n	219c2 <ble_ll_conn_event_end+0x66>
        connsm->slave_cur_tx_win_usecs = 0;
   219bc:	2300      	movs	r3, #0
   219be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (ble_ll_conn_next_event(connsm)) {
   219c2:	4620      	mov	r0, r4
   219c4:	f7ff fc74 	bl	212b0 <ble_ll_conn_next_event>
   219c8:	b9d0      	cbnz	r0, 21a00 <ble_ll_conn_event_end+0xa4>
    connsm->cons_rxd_bad_crc = 0;
   219ca:	2200      	movs	r2, #0
   219cc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    connsm->csmflags.cfbit.pkt_rxd = 0;
   219d0:	7823      	ldrb	r3, [r4, #0]
   219d2:	f362 0300 	bfi	r3, r2, #0, #1
   219d6:	7023      	strb	r3, [r4, #0]
    ble_ll_ctrl_chk_proc_start(connsm);
   219d8:	4620      	mov	r0, r4
   219da:	f002 f926 	bl	23c2a <ble_ll_ctrl_chk_proc_start>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   219de:	4b24      	ldr	r3, [pc, #144]	; (21a70 <ble_ll_conn_event_end+0x114>)
   219e0:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    while (ble_ll_sched_conn_reschedule(connsm)) {
   219e4:	4620      	mov	r0, r4
   219e6:	f005 f9b9 	bl	26d5c <ble_ll_sched_conn_reschedule>
   219ea:	b170      	cbz	r0, 21a0a <ble_ll_conn_event_end+0xae>
        if (ble_ll_conn_next_event(connsm)) {
   219ec:	4620      	mov	r0, r4
   219ee:	f7ff fc5f 	bl	212b0 <ble_ll_conn_next_event>
   219f2:	2800      	cmp	r0, #0
   219f4:	d0f6      	beq.n	219e4 <ble_ll_conn_event_end+0x88>
            ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   219f6:	2116      	movs	r1, #22
   219f8:	4620      	mov	r0, r4
   219fa:	f7ff ff3b 	bl	21874 <ble_ll_conn_end>
            return;
   219fe:	e7d3      	b.n	219a8 <ble_ll_conn_event_end+0x4c>
        ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   21a00:	2116      	movs	r1, #22
   21a02:	4620      	mov	r0, r4
   21a04:	f7ff ff36 	bl	21874 <ble_ll_conn_end>
        return;
   21a08:	e7ce      	b.n	219a8 <ble_ll_conn_event_end+0x4c>
    if (connsm->conn_state == BLE_LL_CONN_STATE_CREATED) {
   21a0a:	79a3      	ldrb	r3, [r4, #6]
   21a0c:	2b01      	cmp	r3, #1
   21a0e:	d01f      	beq.n	21a50 <ble_ll_conn_event_end+0xf4>
        tmo = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000UL;
   21a10:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   21a14:	f242 7010 	movw	r0, #10000	; 0x2710
   21a18:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_SPVN_TMO;
   21a1c:	2508      	movs	r5, #8
    tmo = os_cputime_usecs_to_ticks(tmo);
   21a1e:	f7ef f831 	bl	10a84 <os_cputime_usecs_to_ticks>
    if ((int32_t)(connsm->anchor_point - connsm->last_rxd_pdu_cputime) >= tmo) {
   21a22:	6f63      	ldr	r3, [r4, #116]	; 0x74
   21a24:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   21a28:	1a9b      	subs	r3, r3, r2
   21a2a:	4283      	cmp	r3, r0
   21a2c:	d218      	bcs.n	21a60 <ble_ll_conn_event_end+0x104>
    ble_ll_conn_num_comp_pkts_event_send(connsm);
   21a2e:	4620      	mov	r0, r4
   21a30:	f000 ff9c 	bl	2296c <ble_ll_conn_num_comp_pkts_event_send>
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   21a34:	78e3      	ldrb	r3, [r4, #3]
   21a36:	f003 0318 	and.w	r3, r3, #24
   21a3a:	2b18      	cmp	r3, #24
   21a3c:	d1b4      	bne.n	219a8 <ble_ll_conn_event_end+0x4c>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   21a3e:	2100      	movs	r1, #0
   21a40:	4620      	mov	r0, r4
   21a42:	f003 fb10 	bl	25066 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   21a46:	78e3      	ldrb	r3, [r4, #3]
   21a48:	f36f 1304 	bfc	r3, #4, #1
   21a4c:	70e3      	strb	r3, [r4, #3]
   21a4e:	e7ab      	b.n	219a8 <ble_ll_conn_event_end+0x4c>
        tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS * 6UL;
   21a50:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   21a54:	f641 504c 	movw	r0, #7500	; 0x1d4c
   21a58:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_ESTABLISHMENT;
   21a5c:	253e      	movs	r5, #62	; 0x3e
   21a5e:	e7de      	b.n	21a1e <ble_ll_conn_event_end+0xc2>
        ble_ll_conn_end(connsm, ble_err);
   21a60:	4629      	mov	r1, r5
   21a62:	4620      	mov	r0, r4
   21a64:	f7ff ff06 	bl	21874 <ble_ll_conn_end>
        return;
   21a68:	e79e      	b.n	219a8 <ble_ll_conn_event_end+0x4c>
   21a6a:	bf00      	nop
   21a6c:	20003e4c 	.word	0x20003e4c
   21a70:	00020d21 	.word	0x00020d21

00021a74 <ble_ll_conn_connect_ind_send>:
 * @param addr_type Address type of advertiser
 * @param adva Address of advertiser
 */
int
ble_ll_conn_connect_ind_send(struct ble_ll_conn_sm *connsm, uint8_t end_trans)
{
   21a74:	b538      	push	{r3, r4, r5, lr}
   21a76:	4604      	mov	r4, r0
    int rc;

    if (end_trans == BLE_PHY_TRANSITION_NONE) {
   21a78:	460d      	mov	r5, r1
   21a7a:	b149      	cbz	r1, 21a90 <ble_ll_conn_connect_ind_send+0x1c>
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_standby, NULL);
    } else {
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_init, NULL);
   21a7c:	2100      	movs	r1, #0
   21a7e:	4806      	ldr	r0, [pc, #24]	; (21a98 <ble_ll_conn_connect_ind_send+0x24>)
   21a80:	f006 fbc8 	bl	28214 <ble_phy_set_txend_cb>
    }

    rc = ble_phy_tx(ble_ll_conn_connect_ind_tx_pducb, connsm, end_trans);
   21a84:	462a      	mov	r2, r5
   21a86:	4621      	mov	r1, r4
   21a88:	4804      	ldr	r0, [pc, #16]	; (21a9c <ble_ll_conn_connect_ind_send+0x28>)
   21a8a:	f006 fe4f 	bl	2872c <ble_phy_tx>

    return rc;
}
   21a8e:	bd38      	pop	{r3, r4, r5, pc}
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_standby, NULL);
   21a90:	4803      	ldr	r0, [pc, #12]	; (21aa0 <ble_ll_conn_connect_ind_send+0x2c>)
   21a92:	f006 fbbf 	bl	28214 <ble_phy_set_txend_cb>
   21a96:	e7f5      	b.n	21a84 <ble_ll_conn_connect_ind_send+0x10>
   21a98:	000207a3 	.word	0x000207a3
   21a9c:	00020fb9 	.word	0x00020fb9
   21aa0:	000207ad 	.word	0x000207ad

00021aa4 <ble_ll_conn_event_halt>:
 * NOTE: the phy has been disabled as well as the wfr timer before this is
 * called.
 */
void
ble_ll_conn_event_halt(void)
{
   21aa4:	b510      	push	{r4, lr}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   21aa6:	2000      	movs	r0, #0
   21aa8:	f7fd fc9e 	bl	1f3e8 <ble_ll_state_set>
    if (g_ble_ll_conn_cur_sm) {
   21aac:	4b07      	ldr	r3, [pc, #28]	; (21acc <ble_ll_conn_event_halt+0x28>)
   21aae:	681b      	ldr	r3, [r3, #0]
   21ab0:	b153      	cbz	r3, 21ac8 <ble_ll_conn_event_halt+0x24>
        g_ble_ll_conn_cur_sm->csmflags.cfbit.pkt_rxd = 0;
   21ab2:	781a      	ldrb	r2, [r3, #0]
   21ab4:	f36f 0200 	bfc	r2, #0, #1
   21ab8:	701a      	strb	r2, [r3, #0]
        ble_ll_event_send(&g_ble_ll_conn_cur_sm->conn_ev_end);
   21aba:	4c04      	ldr	r4, [pc, #16]	; (21acc <ble_ll_conn_event_halt+0x28>)
   21abc:	6820      	ldr	r0, [r4, #0]
   21abe:	309c      	adds	r0, #156	; 0x9c
   21ac0:	f7fd fc9e 	bl	1f400 <ble_ll_event_send>
        g_ble_ll_conn_cur_sm = NULL;
   21ac4:	2300      	movs	r3, #0
   21ac6:	6023      	str	r3, [r4, #0]
    }
}
   21ac8:	bd10      	pop	{r4, pc}
   21aca:	bf00      	nop
   21acc:	20003f80 	.word	0x20003f80

00021ad0 <ble_ll_init_rx_pkt_in>:
 * @param ble_hdr
 */
void
ble_ll_init_rx_pkt_in(uint8_t pdu_type, uint8_t *rxbuf,
                      struct ble_mbuf_hdr *ble_hdr)
{
   21ad0:	b570      	push	{r4, r5, r6, lr}
   21ad2:	b08a      	sub	sp, #40	; 0x28
    uint8_t *addr;
    uint8_t *adv_addr;
    uint8_t *inita;
    uint8_t inita_type;
    struct ble_ll_conn_sm *connsm;
    int ext_adv_mode = -1;
   21ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21ad8:	9305      	str	r3, [sp, #20]
         aux_data = ble_hdr->rxinfo.user_data;
     }
#endif

    /* Get the connection state machine we are trying to create */
    connsm = g_ble_ll_conn_create_sm;
   21ada:	4b37      	ldr	r3, [pc, #220]	; (21bb8 <ble_ll_init_rx_pkt_in+0xe8>)
   21adc:	681e      	ldr	r6, [r3, #0]
    if (!connsm) {
   21ade:	b15e      	cbz	r6, 21af8 <ble_ll_init_rx_pkt_in+0x28>
   21ae0:	4615      	mov	r5, r2
   21ae2:	460c      	mov	r4, r1
        }
#endif
        return;
    }

    if (!BLE_MBUF_HDR_CRC_OK(ble_hdr)) {
   21ae4:	8813      	ldrh	r3, [r2, #0]
   21ae6:	f013 0f80 	tst.w	r3, #128	; 0x80
   21aea:	d003      	beq.n	21af4 <ble_ll_init_rx_pkt_in+0x24>
        }
    }
#endif

    /* If we have sent a connect request, we need to enter CONNECTION state */
    if (connsm && CONN_F_CONN_REQ_TXD(connsm)) {
   21aec:	f996 3001 	ldrsb.w	r3, [r6, #1]
   21af0:	2b00      	cmp	r3, #0
   21af2:	db03      	blt.n	21afc <ble_ll_init_rx_pkt_in+0x2c>
    if (aux_data) {
        ble_ll_scan_aux_data_unref(ble_hdr->rxinfo.user_data);
        ble_hdr->rxinfo.user_data = NULL;
    }
#endif
    ble_ll_scan_chk_resume();
   21af4:	f004 fc6c 	bl	263d0 <ble_ll_scan_chk_resume>
}
   21af8:	b00a      	add	sp, #40	; 0x28
   21afa:	bd70      	pop	{r4, r5, r6, pc}
        if (ble_ll_scan_adv_decode_addr(pdu_type, rxbuf, ble_hdr,
   21afc:	ab05      	add	r3, sp, #20
   21afe:	9303      	str	r3, [sp, #12]
   21b00:	f10d 031b 	add.w	r3, sp, #27
   21b04:	9302      	str	r3, [sp, #8]
   21b06:	ab07      	add	r3, sp, #28
   21b08:	9301      	str	r3, [sp, #4]
   21b0a:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   21b0e:	9300      	str	r3, [sp, #0]
   21b10:	ab08      	add	r3, sp, #32
   21b12:	f004 fc2f 	bl	26374 <ble_ll_scan_adv_decode_addr>
   21b16:	2800      	cmp	r0, #0
   21b18:	d1ec      	bne.n	21af4 <ble_ll_init_rx_pkt_in+0x24>
        if (ble_ll_scan_whitelist_enabled()) {
   21b1a:	f005 f81b 	bl	26b54 <ble_ll_scan_whitelist_enabled>
   21b1e:	b1c0      	cbz	r0, 21b52 <ble_ll_init_rx_pkt_in+0x82>
            rpa_index = connsm->rpa_index;
   21b20:	f996 2009 	ldrsb.w	r2, [r6, #9]
            if (rpa_index >= 0) {
   21b24:	2a00      	cmp	r2, #0
   21b26:	db29      	blt.n	21b7c <ble_ll_init_rx_pkt_in+0xac>
                addr_type = g_ble_ll_resolv_list[rpa_index].rl_addr_type + 2;
   21b28:	4924      	ldr	r1, [pc, #144]	; (21bbc <ble_ll_init_rx_pkt_in+0xec>)
   21b2a:	2335      	movs	r3, #53	; 0x35
   21b2c:	fb03 f302 	mul.w	r3, r3, r2
   21b30:	5cca      	ldrb	r2, [r1, r3]
   21b32:	3202      	adds	r2, #2
   21b34:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
                addr = g_ble_ll_resolv_list[rpa_index].rl_identity_addr;
   21b38:	3320      	adds	r3, #32
   21b3a:	440b      	add	r3, r1
   21b3c:	3303      	adds	r3, #3
            connsm->peer_addr_type = addr_type;
   21b3e:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   21b42:	f886 2092 	strb.w	r2, [r6, #146]	; 0x92
            memcpy(connsm->peer_addr, addr, BLE_DEV_ADDR_LEN);
   21b46:	681a      	ldr	r2, [r3, #0]
   21b48:	f8c6 2093 	str.w	r2, [r6, #147]	; 0x93
   21b4c:	889b      	ldrh	r3, [r3, #4]
   21b4e:	f8a6 3097 	strh.w	r3, [r6, #151]	; 0x97
        if (connsm->rpa_index >= 0) {
   21b52:	f996 3009 	ldrsb.w	r3, [r6, #9]
   21b56:	2b00      	cmp	r3, #0
   21b58:	da12      	bge.n	21b80 <ble_ll_init_rx_pkt_in+0xb0>
        g_ble_ll_conn_create_sm = NULL;
   21b5a:	2000      	movs	r0, #0
   21b5c:	4b16      	ldr	r3, [pc, #88]	; (21bb8 <ble_ll_init_rx_pkt_in+0xe8>)
   21b5e:	6018      	str	r0, [r3, #0]
        ble_ll_scan_sm_stop(0);
   21b60:	f004 fbac 	bl	262bc <ble_ll_scan_sm_stop>
        if (ble_hdr->rxinfo.channel < BLE_PHY_NUM_DATA_CHANS) {
   21b64:	78ab      	ldrb	r3, [r5, #2]
   21b66:	2b24      	cmp	r3, #36	; 0x24
   21b68:	d81f      	bhi.n	21baa <ble_ll_init_rx_pkt_in+0xda>
            ble_ll_conn_set_csa(connsm, 1);
   21b6a:	2101      	movs	r1, #1
   21b6c:	4630      	mov	r0, r6
   21b6e:	f7ff fd57 	bl	21620 <ble_ll_conn_set_csa>
        ble_ll_conn_created(connsm, NULL);
   21b72:	2100      	movs	r1, #0
   21b74:	4630      	mov	r0, r6
   21b76:	f7ff fccf 	bl	21518 <ble_ll_conn_created>
        return;
   21b7a:	e7bd      	b.n	21af8 <ble_ll_init_rx_pkt_in+0x28>
                addr = adv_addr;
   21b7c:	9b08      	ldr	r3, [sp, #32]
   21b7e:	e7de      	b.n	21b3e <ble_ll_init_rx_pkt_in+0x6e>
            ble_ll_scan_set_peer_rpa(adv_addr);
   21b80:	9808      	ldr	r0, [sp, #32]
   21b82:	f004 ffd9 	bl	26b38 <ble_ll_scan_set_peer_rpa>
            ble_ll_resolv_set_peer_rpa(connsm->rpa_index, rxbuf + BLE_LL_PDU_HDR_LEN);
   21b86:	1ca1      	adds	r1, r4, #2
   21b88:	f996 0009 	ldrsb.w	r0, [r6, #9]
   21b8c:	f003 fd9c 	bl	256c8 <ble_ll_resolv_set_peer_rpa>
            if (ble_ll_is_rpa(inita, inita_type)) {
   21b90:	f89d 101b 	ldrb.w	r1, [sp, #27]
   21b94:	9807      	ldr	r0, [sp, #28]
   21b96:	f7fd fa8f 	bl	1f0b8 <ble_ll_is_rpa>
   21b9a:	2800      	cmp	r0, #0
   21b9c:	d0dd      	beq.n	21b5a <ble_ll_init_rx_pkt_in+0x8a>
                ble_ll_resolv_set_local_rpa(connsm->rpa_index, inita);
   21b9e:	9907      	ldr	r1, [sp, #28]
   21ba0:	f996 0009 	ldrsb.w	r0, [r6, #9]
   21ba4:	f003 fda6 	bl	256f4 <ble_ll_resolv_set_local_rpa>
   21ba8:	e7d7      	b.n	21b5a <ble_ll_init_rx_pkt_in+0x8a>
            ble_ll_conn_set_csa(connsm, rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK);
   21baa:	7821      	ldrb	r1, [r4, #0]
   21bac:	f3c1 1140 	ubfx	r1, r1, #5, #1
   21bb0:	4630      	mov	r0, r6
   21bb2:	f7ff fd35 	bl	21620 <ble_ll_conn_set_csa>
   21bb6:	e7dc      	b.n	21b72 <ble_ll_init_rx_pkt_in+0xa2>
   21bb8:	20003f90 	.word	0x20003f90
   21bbc:	20004160 	.word	0x20004160

00021bc0 <ble_ll_init_rx_isr_start>:
int
ble_ll_init_rx_isr_start(uint8_t pdu_type, struct ble_mbuf_hdr *ble_hdr)
{
    struct ble_ll_conn_sm *connsm;

    connsm = g_ble_ll_conn_create_sm;
   21bc0:	4b08      	ldr	r3, [pc, #32]	; (21be4 <ble_ll_init_rx_isr_start+0x24>)
   21bc2:	681b      	ldr	r3, [r3, #0]
    if (!connsm) {
   21bc4:	b143      	cbz	r3, 21bd8 <ble_ll_init_rx_isr_start+0x18>
        return 0;
    }

    if ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   21bc6:	b148      	cbz	r0, 21bdc <ble_ll_init_rx_isr_start+0x1c>
   21bc8:	2801      	cmp	r0, #1
   21bca:	d009      	beq.n	21be0 <ble_ll_init_rx_isr_start+0x20>
        (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND ||
   21bcc:	2808      	cmp	r0, #8
   21bce:	d001      	beq.n	21bd4 <ble_ll_init_rx_isr_start+0x14>
        ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_EXT_ADV;
        return 1;
    }
#endif

    return 0;
   21bd0:	2000      	movs	r0, #0
}
   21bd2:	4770      	bx	lr
        return 1;
   21bd4:	2001      	movs	r0, #1
   21bd6:	4770      	bx	lr
        return 0;
   21bd8:	2000      	movs	r0, #0
   21bda:	4770      	bx	lr
        return 1;
   21bdc:	2001      	movs	r0, #1
   21bde:	4770      	bx	lr
   21be0:	2001      	movs	r0, #1
   21be2:	4770      	bx	lr
   21be4:	20003f90 	.word	0x20003f90

00021be8 <ble_ll_init_rx_isr_end>:
 *       > 0: Do not disable PHY as that has already been done.
 */
int
ble_ll_init_rx_isr_end(uint8_t *rxbuf, uint8_t crcok,
                       struct ble_mbuf_hdr *ble_hdr)
{
   21be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21bec:	b08d      	sub	sp, #52	; 0x34
   21bee:	4604      	mov	r4, r0
    int chk_wl;
    int index;
    uint8_t pdu_type;
    uint8_t adv_addr_type;
    uint8_t peer_addr_type;
    uint8_t *adv_addr = NULL;
   21bf0:	2300      	movs	r3, #0
   21bf2:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t *peer;
    uint8_t *init_addr = NULL;
   21bf4:	9309      	str	r3, [sp, #36]	; 0x24
#endif
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    struct ble_ll_scan_sm *scansm;
    uint8_t phy;
#endif
    int ext_adv_mode = -1;
   21bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21bfa:	9307      	str	r3, [sp, #28]

    /* Get connection state machine to use if connection to be established */
    connsm = g_ble_ll_conn_create_sm;
   21bfc:	4baa      	ldr	r3, [pc, #680]	; (21ea8 <ble_ll_init_rx_isr_end+0x2c0>)
   21bfe:	681e      	ldr	r6, [r3, #0]

    rc = -1;
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   21c00:	7805      	ldrb	r5, [r0, #0]
    pyld_len = rxbuf[1];
   21c02:	7847      	ldrb	r7, [r0, #1]

    if (!connsm) {
   21c04:	2e00      	cmp	r6, #0
   21c06:	f000 8136 	beq.w	21e76 <ble_ll_init_rx_isr_end+0x28e>
   21c0a:	4690      	mov	r8, r2
   21c0c:	f005 050f 	and.w	r5, r5, #15
        ble_hdr->rxinfo.user_data = scansm->cur_aux_data;
        scansm->cur_aux_data = NULL;
    }
#endif

    if (!crcok) {
   21c10:	b9b9      	cbnz	r1, 21c42 <ble_ll_init_rx_isr_end+0x5a>
    rc = -1;
   21c12:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff

    /*
     * We have to restart receive if we cant hand up pdu. We return 0 so that
     * the phy does not get disabled.
     */
    rxpdu = ble_ll_rxpdu_alloc(pyld_len + BLE_LL_PDU_HDR_LEN);
   21c16:	1cb8      	adds	r0, r7, #2
   21c18:	f7fd fa10 	bl	1f03c <ble_ll_rxpdu_alloc>
    if (rxpdu == NULL) {
   21c1c:	4605      	mov	r5, r0
   21c1e:	2800      	cmp	r0, #0
   21c20:	f000 8146 	beq.w	21eb0 <ble_ll_init_rx_isr_end+0x2c8>
            ble_ll_sched_rmv_elem(&connsm->conn_sch);
        }
        ble_phy_restart_rx();
        rc = 0;
    } else {
        ble_phy_rxpdu_copy(rxbuf, rxpdu);
   21c24:	4601      	mov	r1, r0
   21c26:	4620      	mov	r0, r4
   21c28:	f006 f92a 	bl	27e80 <ble_phy_rxpdu_copy>
        ble_ll_rx_pdu_in(rxpdu);
   21c2c:	4628      	mov	r0, r5
   21c2e:	f7fd fafd 	bl	1f22c <ble_ll_rx_pdu_in>
    }

    if (rc) {
   21c32:	f1b8 0f00 	cmp.w	r8, #0
   21c36:	f000 8143 	beq.w	21ec0 <ble_ll_init_rx_isr_end+0x2d8>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   21c3a:	2000      	movs	r0, #0
   21c3c:	f7fd fbd4 	bl	1f3e8 <ble_ll_state_set>
    }

    return rc;
   21c40:	e13e      	b.n	21ec0 <ble_ll_init_rx_isr_end+0x2d8>
    if (ble_ll_scan_adv_decode_addr(pdu_type, rxbuf, ble_hdr,
   21c42:	ab07      	add	r3, sp, #28
   21c44:	9303      	str	r3, [sp, #12]
   21c46:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   21c4a:	9302      	str	r3, [sp, #8]
   21c4c:	ab09      	add	r3, sp, #36	; 0x24
   21c4e:	9301      	str	r3, [sp, #4]
   21c50:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   21c54:	9300      	str	r3, [sp, #0]
   21c56:	ab0a      	add	r3, sp, #40	; 0x28
   21c58:	4601      	mov	r1, r0
   21c5a:	4628      	mov	r0, r5
   21c5c:	f004 fb8a 	bl	26374 <ble_ll_scan_adv_decode_addr>
   21c60:	9004      	str	r0, [sp, #16]
   21c62:	2800      	cmp	r0, #0
   21c64:	f040 810a 	bne.w	21e7c <ble_ll_init_rx_isr_end+0x294>
    switch (pdu_type) {
   21c68:	b14d      	cbz	r5, 21c7e <ble_ll_init_rx_isr_end+0x96>
   21c6a:	2d01      	cmp	r5, #1
   21c6c:	f040 8109 	bne.w	21e82 <ble_ll_init_rx_isr_end+0x29a>
        inita_is_rpa = (uint8_t)ble_ll_is_rpa(init_addr, init_addr_type);
   21c70:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   21c74:	9809      	ldr	r0, [sp, #36]	; 0x24
   21c76:	f7fd fa1f 	bl	1f0b8 <ble_ll_is_rpa>
   21c7a:	b2c5      	uxtb	r5, r0
        if (!inita_is_rpa) {
   21c7c:	b395      	cbz	r5, 21ce4 <ble_ll_init_rx_isr_end+0xfc>
    peer = adv_addr;
   21c7e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    peer_addr_type = adv_addr_type;
   21c82:	f89d a02f 	ldrb.w	sl, [sp, #47]	; 0x2f
    chk_wl = ble_ll_scan_whitelist_enabled();
   21c86:	f004 ff65 	bl	26b54 <ble_ll_scan_whitelist_enabled>
   21c8a:	9005      	str	r0, [sp, #20]
    if (ble_ll_is_rpa(adv_addr, adv_addr_type) && ble_ll_resolv_enabled()) {
   21c8c:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   21c90:	980a      	ldr	r0, [sp, #40]	; 0x28
   21c92:	f7fd fa11 	bl	1f0b8 <ble_ll_is_rpa>
   21c96:	bb78      	cbnz	r0, 21cf8 <ble_ll_init_rx_isr_end+0x110>
    } else if (init_addr) {
   21c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21c9a:	2b00      	cmp	r3, #0
   21c9c:	f000 809a 	beq.w	21dd4 <ble_ll_init_rx_isr_end+0x1ec>
        if (inita_is_rpa && !ble_ll_resolv_enabled()) {
   21ca0:	b125      	cbz	r5, 21cac <ble_ll_init_rx_isr_end+0xc4>
   21ca2:	f003 fd8b 	bl	257bc <ble_ll_resolv_enabled>
   21ca6:	2800      	cmp	r0, #0
   21ca8:	f000 80f4 	beq.w	21e94 <ble_ll_init_rx_isr_end+0x2ac>
        rl = ble_ll_resolv_list_find(adv_addr, adv_addr_type);
   21cac:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   21cb0:	980a      	ldr	r0, [sp, #40]	; 0x28
   21cb2:	f003 fbc5 	bl	25440 <ble_ll_resolv_list_find>
        if (rl && !inita_is_rpa &&
   21cb6:	4683      	mov	fp, r0
   21cb8:	b118      	cbz	r0, 21cc2 <ble_ll_init_rx_isr_end+0xda>
   21cba:	b915      	cbnz	r5, 21cc2 <ble_ll_init_rx_isr_end+0xda>
           (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   21cbc:	7883      	ldrb	r3, [r0, #2]
        if (rl && !inita_is_rpa &&
   21cbe:	2b00      	cmp	r3, #0
   21cc0:	d070      	beq.n	21da4 <ble_ll_init_rx_isr_end+0x1bc>
        if (inita_is_rpa) {
   21cc2:	2d00      	cmp	r5, #0
   21cc4:	f000 80a0 	beq.w	21e08 <ble_ll_init_rx_isr_end+0x220>
            if (!rl || !ble_ll_resolv_rpa(init_addr, rl->rl_local_irk)) {
   21cc8:	f1bb 0f00 	cmp.w	fp, #0
   21ccc:	f000 80e5 	beq.w	21e9a <ble_ll_init_rx_isr_end+0x2b2>
   21cd0:	f10b 0103 	add.w	r1, fp, #3
   21cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
   21cd6:	f003 fd3d 	bl	25754 <ble_ll_resolv_rpa>
   21cda:	2800      	cmp	r0, #0
   21cdc:	d16a      	bne.n	21db4 <ble_ll_init_rx_isr_end+0x1cc>
    rc = -1;
   21cde:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21ce2:	e798      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
            if (!ble_ll_is_our_devaddr(init_addr, init_addr_type)) {
   21ce4:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   21ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
   21cea:	f7fd fa61 	bl	1f1b0 <ble_ll_is_our_devaddr>
   21cee:	2800      	cmp	r0, #0
   21cf0:	d1c5      	bne.n	21c7e <ble_ll_init_rx_isr_end+0x96>
    rc = -1;
   21cf2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21cf6:	e78e      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
    if (ble_ll_is_rpa(adv_addr, adv_addr_type) && ble_ll_resolv_enabled()) {
   21cf8:	f003 fd60 	bl	257bc <ble_ll_resolv_enabled>
   21cfc:	2800      	cmp	r0, #0
   21cfe:	d0cb      	beq.n	21c98 <ble_ll_init_rx_isr_end+0xb0>
        index = ble_hw_resolv_list_match();
   21d00:	f005 ff88 	bl	27c14 <ble_hw_resolv_list_match>
        if (index >= 0) {
   21d04:	f1b0 0b00 	subs.w	fp, r0, #0
   21d08:	db43      	blt.n	21d92 <ble_ll_init_rx_isr_end+0x1aa>
            ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_RESOLVED;
   21d0a:	f8b8 3000 	ldrh.w	r3, [r8]
   21d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   21d12:	f8a8 3000 	strh.w	r3, [r8]
            connsm->rpa_index = index;
   21d16:	f886 b009 	strb.w	fp, [r6, #9]
            peer = rl->rl_identity_addr;
   21d1a:	2335      	movs	r3, #53	; 0x35
   21d1c:	fb03 f30b 	mul.w	r3, r3, fp
   21d20:	f103 0920 	add.w	r9, r3, #32
   21d24:	4a61      	ldr	r2, [pc, #388]	; (21eac <ble_ll_init_rx_isr_end+0x2c4>)
   21d26:	4491      	add	r9, r2
   21d28:	f109 0903 	add.w	r9, r9, #3
            peer_addr_type = rl->rl_addr_type;
   21d2c:	18d1      	adds	r1, r2, r3
   21d2e:	f812 a003 	ldrb.w	sl, [r2, r3]
            if ((rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   21d32:	788b      	ldrb	r3, [r1, #2]
   21d34:	b913      	cbnz	r3, 21d3c <ble_ll_init_rx_isr_end+0x154>
   21d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21d38:	b103      	cbz	r3, 21d3c <ble_ll_init_rx_isr_end+0x154>
                                        init_addr && !inita_is_rpa &&
   21d3a:	b135      	cbz	r5, 21d4a <ble_ll_init_rx_isr_end+0x162>
            if (init_addr && inita_is_rpa) {
   21d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
   21d3e:	2800      	cmp	r0, #0
   21d40:	d042      	beq.n	21dc8 <ble_ll_init_rx_isr_end+0x1e0>
   21d42:	b95d      	cbnz	r5, 21d5c <ble_ll_init_rx_isr_end+0x174>
            resolved = 1;
   21d44:	2301      	movs	r3, #1
   21d46:	9304      	str	r3, [sp, #16]
   21d48:	e046      	b.n	21dd8 <ble_ll_init_rx_isr_end+0x1f0>
                                        ble_ll_resolv_irk_nonzero(rl->rl_local_irk)) {
   21d4a:	4608      	mov	r0, r1
   21d4c:	3003      	adds	r0, #3
   21d4e:	f003 fb51 	bl	253f4 <ble_ll_resolv_irk_nonzero>
                                        init_addr && !inita_is_rpa &&
   21d52:	2800      	cmp	r0, #0
   21d54:	d0f2      	beq.n	21d3c <ble_ll_init_rx_isr_end+0x154>
    rc = -1;
   21d56:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21d5a:	e75c      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
                                       g_ble_ll_resolv_list[index].rl_local_irk)) {
   21d5c:	2135      	movs	r1, #53	; 0x35
   21d5e:	4b53      	ldr	r3, [pc, #332]	; (21eac <ble_ll_init_rx_isr_end+0x2c4>)
   21d60:	fb01 310b 	mla	r1, r1, fp, r3
                if (!ble_ll_resolv_rpa(init_addr,
   21d64:	3103      	adds	r1, #3
   21d66:	f003 fcf5 	bl	25754 <ble_ll_resolv_rpa>
   21d6a:	b910      	cbnz	r0, 21d72 <ble_ll_init_rx_isr_end+0x18a>
    rc = -1;
   21d6c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21d70:	e751      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
                memcpy(init_addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   21d72:	2335      	movs	r3, #53	; 0x35
   21d74:	fb03 f30b 	mul.w	r3, r3, fp
   21d78:	f103 0228 	add.w	r2, r3, #40	; 0x28
   21d7c:	4b4b      	ldr	r3, [pc, #300]	; (21eac <ble_ll_init_rx_isr_end+0x2c4>)
   21d7e:	4413      	add	r3, r2
   21d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21d82:	f853 1f01 	ldr.w	r1, [r3, #1]!
   21d86:	6011      	str	r1, [r2, #0]
   21d88:	889b      	ldrh	r3, [r3, #4]
   21d8a:	8093      	strh	r3, [r2, #4]
            resolved = 1;
   21d8c:	2301      	movs	r3, #1
   21d8e:	9304      	str	r3, [sp, #16]
   21d90:	e022      	b.n	21dd8 <ble_ll_init_rx_isr_end+0x1f0>
            if (chk_wl) {
   21d92:	9a05      	ldr	r2, [sp, #20]
   21d94:	2a00      	cmp	r2, #0
   21d96:	d177      	bne.n	21e88 <ble_ll_init_rx_isr_end+0x2a0>
            if (init_addr && inita_is_rpa) {
   21d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21d9a:	b1c3      	cbz	r3, 21dce <ble_ll_init_rx_isr_end+0x1e6>
   21d9c:	2d00      	cmp	r5, #0
   21d9e:	d176      	bne.n	21e8e <ble_ll_init_rx_isr_end+0x2a6>
    resolved = 0;
   21da0:	9204      	str	r2, [sp, #16]
   21da2:	e019      	b.n	21dd8 <ble_ll_init_rx_isr_end+0x1f0>
            ble_ll_resolv_irk_nonzero(rl->rl_local_irk)) {
   21da4:	3003      	adds	r0, #3
   21da6:	f003 fb25 	bl	253f4 <ble_ll_resolv_irk_nonzero>
           (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   21daa:	2800      	cmp	r0, #0
   21dac:	d089      	beq.n	21cc2 <ble_ll_init_rx_isr_end+0xda>
    rc = -1;
   21dae:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21db2:	e730      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
            memcpy(init_addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   21db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21db6:	f85b 2f29 	ldr.w	r2, [fp, #41]!
   21dba:	601a      	str	r2, [r3, #0]
   21dbc:	f8bb 2004 	ldrh.w	r2, [fp, #4]
   21dc0:	809a      	strh	r2, [r3, #4]
    index = -1;
   21dc2:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   21dc6:	e007      	b.n	21dd8 <ble_ll_init_rx_isr_end+0x1f0>
            resolved = 1;
   21dc8:	2301      	movs	r3, #1
   21dca:	9304      	str	r3, [sp, #16]
   21dcc:	e004      	b.n	21dd8 <ble_ll_init_rx_isr_end+0x1f0>
    resolved = 0;
   21dce:	9b05      	ldr	r3, [sp, #20]
   21dd0:	9304      	str	r3, [sp, #16]
   21dd2:	e001      	b.n	21dd8 <ble_ll_init_rx_isr_end+0x1f0>
    index = -1;
   21dd4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    if (chk_wl) {
   21dd8:	9b05      	ldr	r3, [sp, #20]
   21dda:	b1c3      	cbz	r3, 21e0e <ble_ll_init_rx_isr_end+0x226>
        if (!ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   21ddc:	9a04      	ldr	r2, [sp, #16]
   21dde:	4651      	mov	r1, sl
   21de0:	4648      	mov	r0, r9
   21de2:	f005 fc97 	bl	27714 <ble_ll_whitelist_match>
   21de6:	2800      	cmp	r0, #0
   21de8:	d05a      	beq.n	21ea0 <ble_ll_init_rx_isr_end+0x2b8>
    ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_DEVMATCH;
   21dea:	f8b8 3000 	ldrh.w	r3, [r8]
   21dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21df2:	f8a8 3000 	strh.w	r3, [r8]
    if (ble_ll_sched_master_new(connsm, ble_hdr, pyld_len)) {
   21df6:	463a      	mov	r2, r7
   21df8:	4641      	mov	r1, r8
   21dfa:	4630      	mov	r0, r6
   21dfc:	f005 f87a 	bl	26ef4 <ble_ll_sched_master_new>
   21e00:	b180      	cbz	r0, 21e24 <ble_ll_init_rx_isr_end+0x23c>
    rc = -1;
   21e02:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21e06:	e706      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
    index = -1;
   21e08:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   21e0c:	e7e4      	b.n	21dd8 <ble_ll_init_rx_isr_end+0x1f0>
        if (!ble_ll_conn_is_peer_adv(adv_addr_type, adv_addr, index)) {
   21e0e:	465a      	mov	r2, fp
   21e10:	990a      	ldr	r1, [sp, #40]	; 0x28
   21e12:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   21e16:	f7ff f91f 	bl	21058 <ble_ll_conn_is_peer_adv>
   21e1a:	2800      	cmp	r0, #0
   21e1c:	d1e5      	bne.n	21dea <ble_ll_init_rx_isr_end+0x202>
    rc = -1;
   21e1e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21e22:	e6f8      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
    ble_ll_conn_connect_ind_prepare(connsm,
   21e24:	f004 fe92 	bl	26b4c <ble_ll_scan_get_pdu_data>
   21e28:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   21e2c:	f898 3002 	ldrb.w	r3, [r8, #2]
   21e30:	9303      	str	r3, [sp, #12]
   21e32:	f8cd b008 	str.w	fp, [sp, #8]
   21e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21e38:	9301      	str	r3, [sp, #4]
   21e3a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   21e3e:	9300      	str	r3, [sp, #0]
   21e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21e42:	4601      	mov	r1, r0
   21e44:	4630      	mov	r0, r6
   21e46:	f7ff f98d 	bl	21164 <ble_ll_conn_connect_ind_prepare>
    rc = ble_ll_conn_connect_ind_send(connsm, conn_req_end_trans);
   21e4a:	2100      	movs	r1, #0
   21e4c:	4630      	mov	r0, r6
   21e4e:	f7ff fe11 	bl	21a74 <ble_ll_conn_connect_ind_send>
    if (rc) {
   21e52:	4680      	mov	r8, r0
   21e54:	b950      	cbnz	r0, 21e6c <ble_ll_init_rx_isr_end+0x284>
    if (init_addr && !inita_is_rpa) {
   21e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21e58:	b11b      	cbz	r3, 21e62 <ble_ll_init_rx_isr_end+0x27a>
   21e5a:	b915      	cbnz	r5, 21e62 <ble_ll_init_rx_isr_end+0x27a>
        connsm->inita_identity_used = 1;
   21e5c:	2301      	movs	r3, #1
   21e5e:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
    CONN_F_CONN_REQ_TXD(connsm) = 1;
   21e62:	7873      	ldrb	r3, [r6, #1]
   21e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21e68:	7073      	strb	r3, [r6, #1]
   21e6a:	e6d4      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
        ble_ll_sched_rmv_elem(&connsm->conn_sch);
   21e6c:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
   21e70:	f005 fabe 	bl	273f0 <ble_ll_sched_rmv_elem>
        goto init_rx_isr_exit;
   21e74:	e6cf      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
    rc = -1;
   21e76:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21e7a:	e6cc      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
   21e7c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21e80:	e6c9      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
   21e82:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21e86:	e6c6      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
   21e88:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21e8c:	e6c3      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
   21e8e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21e92:	e6c0      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
   21e94:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21e98:	e6bd      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
   21e9a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21e9e:	e6ba      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
   21ea0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21ea4:	e6b7      	b.n	21c16 <ble_ll_init_rx_isr_end+0x2e>
   21ea6:	bf00      	nop
   21ea8:	20003f90 	.word	0x20003f90
   21eac:	20004160 	.word	0x20004160
        if (CONN_F_CONN_REQ_TXD(connsm) == 1) {
   21eb0:	f996 3001 	ldrsb.w	r3, [r6, #1]
   21eb4:	2b00      	cmp	r3, #0
   21eb6:	db07      	blt.n	21ec8 <ble_ll_init_rx_isr_end+0x2e0>
        ble_phy_restart_rx();
   21eb8:	f006 fc10 	bl	286dc <ble_phy_restart_rx>
        rc = 0;
   21ebc:	f04f 0800 	mov.w	r8, #0
}
   21ec0:	4640      	mov	r0, r8
   21ec2:	b00d      	add	sp, #52	; 0x34
   21ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            CONN_F_CONN_REQ_TXD(connsm) = 0;
   21ec8:	7873      	ldrb	r3, [r6, #1]
   21eca:	f36f 13c7 	bfc	r3, #7, #1
   21ece:	7073      	strb	r3, [r6, #1]
            CONN_F_AUX_CONN_REQ(connsm) = 0;
   21ed0:	78f3      	ldrb	r3, [r6, #3]
   21ed2:	f36f 0382 	bfc	r3, #2, #1
   21ed6:	70f3      	strb	r3, [r6, #3]
            ble_ll_sched_rmv_elem(&connsm->conn_sch);
   21ed8:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
   21edc:	f005 fa88 	bl	273f0 <ble_ll_sched_rmv_elem>
   21ee0:	e7ea      	b.n	21eb8 <ble_ll_init_rx_isr_end+0x2d0>
   21ee2:	bf00      	nop

00021ee4 <ble_ll_conn_timeout>:
 * @param connsm
 * @param ble_err
 */
void
ble_ll_conn_timeout(struct ble_ll_conn_sm *connsm, uint8_t ble_err)
{
   21ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ee6:	4604      	mov	r4, r0
   21ee8:	460d      	mov	r5, r1
    int was_current;
    os_sr_t sr;

    was_current = 0;
    OS_ENTER_CRITICAL(sr);
   21eea:	f7ee faad 	bl	10448 <os_arch_save_sr>
   21eee:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   21ef0:	4b0a      	ldr	r3, [pc, #40]	; (21f1c <ble_ll_conn_timeout+0x38>)
   21ef2:	681b      	ldr	r3, [r3, #0]
   21ef4:	42a3      	cmp	r3, r4
   21ef6:	d009      	beq.n	21f0c <ble_ll_conn_timeout+0x28>
    was_current = 0;
   21ef8:	2700      	movs	r7, #0
        ble_ll_conn_current_sm_over(NULL);
        was_current = 1;
    }
    OS_EXIT_CRITICAL(sr);
   21efa:	4630      	mov	r0, r6
   21efc:	f7ee faaa 	bl	10454 <os_arch_restore_sr>

    /* Check if we need to resume scanning */
    if (was_current) {
   21f00:	b94f      	cbnz	r7, 21f16 <ble_ll_conn_timeout+0x32>
        ble_ll_scan_chk_resume();
    }

    ble_ll_conn_end(connsm, ble_err);
   21f02:	4629      	mov	r1, r5
   21f04:	4620      	mov	r0, r4
   21f06:	f7ff fcb5 	bl	21874 <ble_ll_conn_end>
}
   21f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ble_ll_conn_current_sm_over(NULL);
   21f0c:	2000      	movs	r0, #0
   21f0e:	f7fe fc53 	bl	207b8 <ble_ll_conn_current_sm_over>
        was_current = 1;
   21f12:	2701      	movs	r7, #1
   21f14:	e7f1      	b.n	21efa <ble_ll_conn_timeout+0x16>
        ble_ll_scan_chk_resume();
   21f16:	f004 fa5b 	bl	263d0 <ble_ll_scan_chk_resume>
   21f1a:	e7f2      	b.n	21f02 <ble_ll_conn_timeout+0x1e>
   21f1c:	20003f80 	.word	0x20003f80

00021f20 <ble_ll_conn_rx_isr_start>:
 *
 * @param rxhdr
 */
int
ble_ll_conn_rx_isr_start(struct ble_mbuf_hdr *rxhdr, uint32_t aa)
{
   21f20:	b570      	push	{r4, r5, r6, lr}
   21f22:	4605      	mov	r5, r0
   21f24:	460e      	mov	r6, r1
     * Disable wait for response timer since we receive a response. We dont
     * care if this is the response we were waiting for or not; the code
     * called at receive end will deal with ending the connection event
     * if needed
     */
    ble_ll_wfr_disable();
   21f26:	f7fd f97f 	bl	1f228 <ble_ll_wfr_disable>
    connsm = g_ble_ll_conn_cur_sm;
   21f2a:	4b17      	ldr	r3, [pc, #92]	; (21f88 <ble_ll_conn_rx_isr_start+0x68>)
   21f2c:	681c      	ldr	r4, [r3, #0]
    if (connsm) {
   21f2e:	b33c      	cbz	r4, 21f80 <ble_ll_conn_rx_isr_start+0x60>
        /* Double check access address. Better match connection state machine */
        if (aa != connsm->access_addr) {
   21f30:	6d63      	ldr	r3, [r4, #84]	; 0x54
   21f32:	42b3      	cmp	r3, r6
   21f34:	d117      	bne.n	21f66 <ble_ll_conn_rx_isr_start+0x46>
            g_ble_ll_conn_cur_sm = NULL;
            return -1;
        }

        /* Set connection handle in mbuf header */
        rxhdr->rxinfo.handle = connsm->conn_handle;
   21f36:	88a3      	ldrh	r3, [r4, #4]
   21f38:	70eb      	strb	r3, [r5, #3]

        /* Set flag denoting we have received a packet in connection event */
        connsm->csmflags.cfbit.pkt_rxd = 1;
   21f3a:	7823      	ldrb	r3, [r4, #0]
   21f3c:	f043 0301 	orr.w	r3, r3, #1
   21f40:	7023      	strb	r3, [r4, #0]

        /* Connection is established */
        connsm->conn_state = BLE_LL_CONN_STATE_ESTABLISHED;
   21f42:	2202      	movs	r2, #2
   21f44:	71a2      	strb	r2, [r4, #6]

        /* Set anchor point (and last) if 1st rxd frame in connection event */
        if (connsm->csmflags.cfbit.slave_set_last_anchor) {
   21f46:	f013 0f20 	tst.w	r3, #32
   21f4a:	d01b      	beq.n	21f84 <ble_ll_conn_rx_isr_start+0x64>
            connsm->csmflags.cfbit.slave_set_last_anchor = 0;
   21f4c:	b2db      	uxtb	r3, r3
   21f4e:	f36f 1345 	bfc	r3, #5, #1
   21f52:	7023      	strb	r3, [r4, #0]
            connsm->last_anchor_point = rxhdr->beg_cputime;
   21f54:	68ab      	ldr	r3, [r5, #8]
   21f56:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            connsm->anchor_point = connsm->last_anchor_point;
   21f5a:	6763      	str	r3, [r4, #116]	; 0x74
            connsm->anchor_point_usecs = rxhdr->rem_usecs;
   21f5c:	68eb      	ldr	r3, [r5, #12]
   21f5e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
        }
    }
    return 1;
   21f62:	2001      	movs	r0, #1
}
   21f64:	bd70      	pop	{r4, r5, r6, pc}
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   21f66:	2000      	movs	r0, #0
   21f68:	f7fd fa3e 	bl	1f3e8 <ble_ll_state_set>
            ble_ll_event_send(&connsm->conn_ev_end);
   21f6c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   21f70:	f7fd fa46 	bl	1f400 <ble_ll_event_send>
            g_ble_ll_conn_cur_sm = NULL;
   21f74:	4b04      	ldr	r3, [pc, #16]	; (21f88 <ble_ll_conn_rx_isr_start+0x68>)
   21f76:	2200      	movs	r2, #0
   21f78:	601a      	str	r2, [r3, #0]
            return -1;
   21f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21f7e:	e7f1      	b.n	21f64 <ble_ll_conn_rx_isr_start+0x44>
    return 1;
   21f80:	2001      	movs	r0, #1
   21f82:	e7ef      	b.n	21f64 <ble_ll_conn_rx_isr_start+0x44>
   21f84:	2001      	movs	r0, #1
   21f86:	e7ed      	b.n	21f64 <ble_ll_conn_rx_isr_start+0x44>
   21f88:	20003f80 	.word	0x20003f80

00021f8c <ble_ll_conn_rx_data_pdu>:
 * @param rxpdu Pointer to received pdu
 * @param rxpdu Pointer to ble mbuf header of received pdu
 */
void
ble_ll_conn_rx_data_pdu(struct os_mbuf *rxpdu, struct ble_mbuf_hdr *hdr)
{
   21f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21f90:	4605      	mov	r5, r0
    uint8_t llid;
    uint16_t acl_len;
    uint16_t acl_hdr;
    struct ble_ll_conn_sm *connsm;

    if (BLE_MBUF_HDR_CRC_OK(hdr)) {
   21f92:	880b      	ldrh	r3, [r1, #0]
   21f94:	f013 0f80 	tst.w	r3, #128	; 0x80
   21f98:	d014      	beq.n	21fc4 <ble_ll_conn_rx_data_pdu+0x38>
   21f9a:	460c      	mov	r4, r1
        /* XXX: there is a chance that the connection was thrown away and
           re-used before processing packets here. Fix this. */
        /* We better have a connection state machine */
        connsm = ble_ll_conn_find_active_conn(hdr->rxinfo.handle);
   21f9c:	78c8      	ldrb	r0, [r1, #3]
   21f9e:	f7ff f959 	bl	21254 <ble_ll_conn_find_active_conn>
        if (connsm) {
   21fa2:	4606      	mov	r6, r0
   21fa4:	b170      	cbz	r0, 21fc4 <ble_ll_conn_rx_data_pdu+0x38>
            /* Check state machine */
            ble_ll_conn_chk_csm_flags(connsm);
   21fa6:	f7fe ffd1 	bl	20f4c <ble_ll_conn_chk_csm_flags>

            /* Validate rx data pdu */
            rxbuf = rxpdu->om_data;
   21faa:	682b      	ldr	r3, [r5, #0]
            hdr_byte = rxbuf[0];
   21fac:	781f      	ldrb	r7, [r3, #0]
            acl_len = rxbuf[1];
   21fae:	f893 8001 	ldrb.w	r8, [r3, #1]

            /*
             * Check that the LLID and payload length are reasonable.
             * Empty payload is only allowed for LLID == 01b.
             *  */
            if ((llid == 0) ||
   21fb2:	f017 0903 	ands.w	r9, r7, #3
   21fb6:	d005      	beq.n	21fc4 <ble_ll_conn_rx_data_pdu+0x38>
   21fb8:	f1b8 0f00 	cmp.w	r8, #0
   21fbc:	d107      	bne.n	21fce <ble_ll_conn_rx_data_pdu+0x42>
                ((acl_len == 0) && (llid != BLE_LL_LLID_DATA_FRAG))) {
   21fbe:	f1b9 0f01 	cmp.w	r9, #1
   21fc2:	d004      	beq.n	21fce <ble_ll_conn_rx_data_pdu+0x42>
        }
    }

    /* Free buffer */
conn_rx_data_pdu_end:
    os_mbuf_free_chain(rxpdu);
   21fc4:	4628      	mov	r0, r5
   21fc6:	f7ee ff89 	bl	10edc <os_mbuf_free_chain>
}
   21fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT) &&
   21fce:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   21fd2:	2b04      	cmp	r3, #4
   21fd4:	d820      	bhi.n	22018 <ble_ll_conn_rx_data_pdu+0x8c>
            if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   21fd6:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   21fda:	2b02      	cmp	r3, #2
   21fdc:	d026      	beq.n	2202c <ble_ll_conn_rx_data_pdu+0xa0>
            connsm->conn_rssi = hdr->rxinfo.rssi;
   21fde:	f994 3004 	ldrsb.w	r3, [r4, #4]
   21fe2:	7233      	strb	r3, [r6, #8]
            if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   21fe4:	79f3      	ldrb	r3, [r6, #7]
   21fe6:	2b02      	cmp	r3, #2
   21fe8:	d02b      	beq.n	22042 <ble_ll_conn_rx_data_pdu+0xb6>
            rxd_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   21fea:	f007 0708 	and.w	r7, r7, #8
            if (rxd_sn != connsm->last_rxd_sn) {
   21fee:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   21ff2:	42bb      	cmp	r3, r7
   21ff4:	d0e6      	beq.n	21fc4 <ble_ll_conn_rx_data_pdu+0x38>
                connsm->last_rxd_sn = rxd_sn;
   21ff6:	f886 7035 	strb.w	r7, [r6, #53]	; 0x35
                if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   21ffa:	f1b9 0f01 	cmp.w	r9, #1
   21ffe:	d028      	beq.n	22052 <ble_ll_conn_rx_data_pdu+0xc6>
                if (BLE_MBUF_HDR_MIC_FAILURE(hdr)) {
   22000:	8823      	ldrh	r3, [r4, #0]
   22002:	f013 0f20 	tst.w	r3, #32
   22006:	d128      	bne.n	2205a <ble_ll_conn_rx_data_pdu+0xce>
                if (llid == BLE_LL_LLID_CTRL) {
   22008:	f1b9 0f03 	cmp.w	r9, #3
   2200c:	d02a      	beq.n	22064 <ble_ll_conn_rx_data_pdu+0xd8>
    if (OS_MBUF_IS_PKTHDR(om)) {
   2200e:	796a      	ldrb	r2, [r5, #5]
   22010:	2a07      	cmp	r2, #7
   22012:	d92c      	bls.n	2206e <ble_ll_conn_rx_data_pdu+0xe2>
        startoff = om->om_pkthdr_len;
   22014:	b291      	uxth	r1, r2
   22016:	e02b      	b.n	22070 <ble_ll_conn_rx_data_pdu+0xe4>
                    !ble_ll_ctrl_enc_allowed_pdu_rx(rxpdu)) {
   22018:	4628      	mov	r0, r5
   2201a:	f001 fc76 	bl	2390a <ble_ll_ctrl_enc_allowed_pdu_rx>
            if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT) &&
   2201e:	2800      	cmp	r0, #0
   22020:	d1d9      	bne.n	21fd6 <ble_ll_conn_rx_data_pdu+0x4a>
                ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   22022:	213d      	movs	r1, #61	; 0x3d
   22024:	4630      	mov	r0, r6
   22026:	f7ff ff5d 	bl	21ee4 <ble_ll_conn_timeout>
                goto conn_rx_data_pdu_end;
   2202a:	e7cb      	b.n	21fc4 <ble_ll_conn_rx_data_pdu+0x38>
            if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   2202c:	78b3      	ldrb	r3, [r6, #2]
   2202e:	f013 0f08 	tst.w	r3, #8
   22032:	d0d4      	beq.n	21fde <ble_ll_conn_rx_data_pdu+0x52>
                CONN_F_LE_PING_SUPP(connsm) && (acl_len != 0)) {
   22034:	f1b8 0f00 	cmp.w	r8, #0
   22038:	d0d1      	beq.n	21fde <ble_ll_conn_rx_data_pdu+0x52>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   2203a:	4630      	mov	r0, r6
   2203c:	f7ff fb06 	bl	2164c <ble_ll_conn_auth_pyld_timer_start>
   22040:	e7cd      	b.n	21fde <ble_ll_conn_rx_data_pdu+0x52>
                if (hdr_byte & BLE_LL_DATA_HDR_NESN_MASK) {
   22042:	f017 0f04 	tst.w	r7, #4
   22046:	d0d0      	beq.n	21fea <ble_ll_conn_rx_data_pdu+0x5e>
                    connsm->csmflags.cfbit.allow_slave_latency = 1;
   22048:	7833      	ldrb	r3, [r6, #0]
   2204a:	f043 0310 	orr.w	r3, r3, #16
   2204e:	7033      	strb	r3, [r6, #0]
   22050:	e7cb      	b.n	21fea <ble_ll_conn_rx_data_pdu+0x5e>
                if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   22052:	f1b8 0f00 	cmp.w	r8, #0
   22056:	d0b5      	beq.n	21fc4 <ble_ll_conn_rx_data_pdu+0x38>
   22058:	e7d2      	b.n	22000 <ble_ll_conn_rx_data_pdu+0x74>
                    ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   2205a:	213d      	movs	r1, #61	; 0x3d
   2205c:	4630      	mov	r0, r6
   2205e:	f7ff ff41 	bl	21ee4 <ble_ll_conn_timeout>
                    goto conn_rx_data_pdu_end;
   22062:	e7af      	b.n	21fc4 <ble_ll_conn_rx_data_pdu+0x38>
                    if (ble_ll_ctrl_rx_pdu(connsm, rxpdu)) {
   22064:	4629      	mov	r1, r5
   22066:	4630      	mov	r0, r6
   22068:	f001 ff96 	bl	23f98 <ble_ll_ctrl_rx_pdu>
   2206c:	e7ad      	b.n	21fca <ble_ll_conn_rx_data_pdu+0x3e>
    startoff = 0;
   2206e:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   22070:	462a      	mov	r2, r5
   22072:	f852 3b10 	ldr.w	r3, [r2], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   22076:	440a      	add	r2, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   22078:	1a9b      	subs	r3, r3, r2
   2207a:	b29b      	uxth	r3, r3
                    BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   2207c:	2b01      	cmp	r3, #1
   2207e:	d914      	bls.n	220aa <ble_ll_conn_rx_data_pdu+0x11e>
                    os_mbuf_prepend(rxpdu, 2);
   22080:	2102      	movs	r1, #2
   22082:	4628      	mov	r0, r5
   22084:	f7ef f94e 	bl	11324 <os_mbuf_prepend>
                    rxbuf = rxpdu->om_data;
   22088:	682c      	ldr	r4, [r5, #0]
                    acl_hdr = (llid << 12) | connsm->conn_handle;
   2208a:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   2208e:	ea41 3109 	orr.w	r1, r1, r9, lsl #12
                    put_le16(rxbuf, acl_hdr);
   22092:	b289      	uxth	r1, r1
   22094:	4620      	mov	r0, r4
   22096:	f7fc fd44 	bl	1eb22 <put_le16>
                    put_le16(rxbuf + 2, acl_len);
   2209a:	4641      	mov	r1, r8
   2209c:	1ca0      	adds	r0, r4, #2
   2209e:	f7fc fd40 	bl	1eb22 <put_le16>
                    ble_hci_trans_ll_acl_tx(rxpdu);
   220a2:	4628      	mov	r0, r5
   220a4:	f7fb fb36 	bl	1d714 <ble_hci_trans_ll_acl_tx>
   220a8:	e78f      	b.n	21fca <ble_ll_conn_rx_data_pdu+0x3e>
                    BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   220aa:	2300      	movs	r3, #0
   220ac:	461a      	mov	r2, r3
   220ae:	4619      	mov	r1, r3
   220b0:	4618      	mov	r0, r3
   220b2:	f7ee fa93 	bl	105dc <__assert_func>
	...

000220b8 <ble_ll_conn_rx_isr_end>:
 *      == 0: Success. Do not disable the PHY.
 *       > 0: Do not disable PHY as that has already been done.
 */
int
ble_ll_conn_rx_isr_end(uint8_t *rxbuf, struct ble_mbuf_hdr *rxhdr)
{
   220b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220bc:	b083      	sub	sp, #12
   220be:	4607      	mov	r7, r0
   220c0:	460e      	mov	r6, r1
    struct os_mbuf *rxpdu;
    struct ble_mbuf_hdr *txhdr;
    int rx_phy_mode;

    /* Retrieve the header and payload length */
    hdr_byte = rxbuf[0];
   220c2:	f890 a000 	ldrb.w	sl, [r0]
    rx_pyld_len = rxbuf[1];
   220c6:	7843      	ldrb	r3, [r0, #1]
   220c8:	9300      	str	r3, [sp, #0]
     * now is that we should not ack the packet if we have no receive
     * buffers available. We want to free up our transmit PDU if it was
     * acked, but we should not ack the received frame if we cant hand it up.
     * NOTE: we hand up empty pdu's to the LL task!
     */
    rxpdu = ble_ll_rxpdu_alloc(rx_pyld_len + BLE_LL_PDU_HDR_LEN);
   220ca:	fa1f f983 	uxth.w	r9, r3
   220ce:	f109 0002 	add.w	r0, r9, #2
   220d2:	f7fc ffb3 	bl	1f03c <ble_ll_rxpdu_alloc>
   220d6:	4680      	mov	r8, r0
    /*
     * We should have a current connection state machine. If we dont, we just
     * hand the packet to the higher layer to count it.
     */
    rc = -1;
    connsm = g_ble_ll_conn_cur_sm;
   220d8:	4b83      	ldr	r3, [pc, #524]	; (222e8 <ble_ll_conn_rx_isr_end+0x230>)
   220da:	681c      	ldr	r4, [r3, #0]
    if (!connsm) {
   220dc:	2c00      	cmp	r4, #0
   220de:	f000 80f3 	beq.w	222c8 <ble_ll_conn_rx_isr_end+0x210>
    /*
     * Calculate the end time of the received PDU. NOTE: this looks strange
     * but for the 32768 crystal we add the time it takes to send the packet
     * to the 'additional usecs' field to save some calculations.
     */
    begtime = rxhdr->beg_cputime;
   220e2:	f8d6 b008 	ldr.w	fp, [r6, #8]
#if BLE_LL_BT5_PHY_SUPPORTED
    rx_phy_mode = connsm->phy_data.rx_phy_mode;
#else
    rx_phy_mode = BLE_PHY_MODE_1M;
#endif
    add_usecs = rxhdr->rem_usecs +
   220e6:	68f5      	ldr	r5, [r6, #12]
            ble_ll_pdu_tx_time_get(rx_pyld_len, rx_phy_mode);
   220e8:	2101      	movs	r1, #1
   220ea:	4648      	mov	r0, r9
   220ec:	f7fd f9d8 	bl	1f4a0 <ble_ll_pdu_tx_time_get>
    add_usecs = rxhdr->rem_usecs +
   220f0:	4405      	add	r5, r0
    /*
     * Check the packet CRC. A connection event can continue even if the
     * received PDU does not pass the CRC check. If we receive two consecutive
     * CRC errors we end the conection event.
     */
    if (!BLE_MBUF_HDR_CRC_OK(rxhdr)) {
   220f2:	8833      	ldrh	r3, [r6, #0]
   220f4:	f013 0f80 	tst.w	r3, #128	; 0x80
   220f8:	d131      	bne.n	2215e <ble_ll_conn_rx_isr_end+0xa6>
        /*
         * Increment # of consecutively received CRC errors. If more than
         * one we will end the connection event.
         */
        ++connsm->cons_rxd_bad_crc;
   220fa:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   220fe:	3301      	adds	r3, #1
   22100:	b2db      	uxtb	r3, r3
   22102:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if (connsm->cons_rxd_bad_crc >= 2) {
   22106:	2b01      	cmp	r3, #1
   22108:	d920      	bls.n	2214c <ble_ll_conn_rx_isr_end+0x94>
            reply = 0;
   2210a:	2300      	movs	r3, #0
    /* If reply flag set, send data pdu and continue connection event */
    rc = -1;
    if (rx_pyld_len && CONN_F_ENCRYPTED(connsm)) {
        rx_pyld_len += BLE_LL_DATA_MIC_LEN;
    }
    if (reply && ble_ll_conn_can_send_next_pdu(connsm, begtime, add_usecs)) {
   2210c:	2b00      	cmp	r3, #0
   2210e:	f000 80e1 	beq.w	222d4 <ble_ll_conn_rx_isr_end+0x21c>
   22112:	462a      	mov	r2, r5
   22114:	4659      	mov	r1, fp
   22116:	4620      	mov	r0, r4
   22118:	f7fe fee1 	bl	20ede <ble_ll_conn_can_send_next_pdu>
   2211c:	2800      	cmp	r0, #0
   2211e:	f000 80dc 	beq.w	222da <ble_ll_conn_rx_isr_end+0x222>
        rc = ble_ll_conn_tx_data_pdu(connsm);
   22122:	4620      	mov	r0, r4
   22124:	f7fe fbf6 	bl	20914 <ble_ll_conn_tx_data_pdu>
   22128:	4606      	mov	r6, r0
    }

conn_exit:
    /* Copy the received pdu and hand it up */
    if (rxpdu) {
   2212a:	f1b8 0f00 	cmp.w	r8, #0
   2212e:	d006      	beq.n	2213e <ble_ll_conn_rx_isr_end+0x86>
        ble_phy_rxpdu_copy(rxbuf, rxpdu);
   22130:	4641      	mov	r1, r8
   22132:	4638      	mov	r0, r7
   22134:	f005 fea4 	bl	27e80 <ble_phy_rxpdu_copy>
        ble_ll_rx_pdu_in(rxpdu);
   22138:	4640      	mov	r0, r8
   2213a:	f7fd f877 	bl	1f22c <ble_ll_rx_pdu_in>
    }

    /* Send link layer a connection end event if over */
    if (rc) {
   2213e:	2e00      	cmp	r6, #0
   22140:	f040 80ce 	bne.w	222e0 <ble_ll_conn_rx_isr_end+0x228>
        ble_ll_conn_current_sm_over(connsm);
    }

    return rc;
}
   22144:	4630      	mov	r0, r6
   22146:	b003      	add	sp, #12
   22148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   2214c:	79e3      	ldrb	r3, [r4, #7]
   2214e:	2b01      	cmp	r3, #1
   22150:	d001      	beq.n	22156 <ble_ll_conn_rx_isr_end+0x9e>
                reply = 1;
   22152:	2301      	movs	r3, #1
   22154:	e7da      	b.n	2210c <ble_ll_conn_rx_isr_end+0x54>
                reply = CONN_F_LAST_TXD_MD(connsm);
   22156:	7863      	ldrb	r3, [r4, #1]
   22158:	f3c3 1380 	ubfx	r3, r3, #6, #1
   2215c:	e7d6      	b.n	2210c <ble_ll_conn_rx_isr_end+0x54>
        connsm->cons_rxd_bad_crc = 0;
   2215e:	2300      	movs	r3, #0
   22160:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                                        os_cputime_usecs_to_ticks(add_usecs);
   22164:	4628      	mov	r0, r5
   22166:	f7ee fc8d 	bl	10a84 <os_cputime_usecs_to_ticks>
        connsm->last_rxd_pdu_cputime = begtime +
   2216a:	4458      	add	r0, fp
   2216c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
        if ((hdr_byte & BLE_LL_DATA_HDR_LLID_MASK) == 0) {
   22170:	f01a 0303 	ands.w	r3, sl, #3
   22174:	f000 80ab 	beq.w	222ce <ble_ll_conn_rx_isr_end+0x216>
        connsm->last_rxd_hdr_byte = hdr_byte;
   22178:	f884 a036 	strb.w	sl, [r4, #54]	; 0x36
        if ((hdr_byte & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   2217c:	2b03      	cmp	r3, #3
   2217e:	d041      	beq.n	22204 <ble_ll_conn_rx_isr_end+0x14c>
    uint8_t opcode = 0;
   22180:	f04f 0900 	mov.w	r9, #0
        is_ctrl = 0;
   22184:	f8cd 9004 	str.w	r9, [sp, #4]
        hdr_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   22188:	f00a 0208 	and.w	r2, sl, #8
        conn_nesn = connsm->next_exp_seqnum;
   2218c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        if (rxpdu && ((hdr_sn && conn_nesn) || (!hdr_sn && !conn_nesn))) {
   22190:	f1b8 0f00 	cmp.w	r8, #0
   22194:	d014      	beq.n	221c0 <ble_ll_conn_rx_isr_end+0x108>
   22196:	b102      	cbz	r2, 2219a <ble_ll_conn_rx_isr_end+0xe2>
   22198:	b90b      	cbnz	r3, 2219e <ble_ll_conn_rx_isr_end+0xe6>
   2219a:	b98a      	cbnz	r2, 221c0 <ble_ll_conn_rx_isr_end+0x108>
   2219c:	b983      	cbnz	r3, 221c0 <ble_ll_conn_rx_isr_end+0x108>
            connsm->next_exp_seqnum ^= 1;
   2219e:	f083 0301 	eor.w	r3, r3, #1
   221a2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
            if (CONN_F_ENCRYPTED(connsm) && !ble_ll_conn_is_empty_pdu(rxbuf)) {
   221a6:	78a3      	ldrb	r3, [r4, #2]
   221a8:	f013 0f02 	tst.w	r3, #2
   221ac:	d008      	beq.n	221c0 <ble_ll_conn_rx_isr_end+0x108>
   221ae:	4638      	mov	r0, r7
   221b0:	f7fe fac4 	bl	2073c <ble_ll_conn_is_empty_pdu>
   221b4:	b920      	cbnz	r0, 221c0 <ble_ll_conn_rx_isr_end+0x108>
                ++connsm->enc_data.rx_pkt_cntr;
   221b6:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
   221ba:	3301      	adds	r3, #1
   221bc:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
        ble_ll_trace_u32x2(BLE_LL_TRACE_ID_CONN_RX, connsm->tx_seqnum,
   221c0:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   221c4:	f00a 0104 	and.w	r1, sl, #4
        if (CONN_F_EMPTY_PDU_TXD(connsm) || connsm->cur_tx_pdu) {
   221c8:	7863      	ldrb	r3, [r4, #1]
   221ca:	f013 0320 	ands.w	r3, r3, #32
   221ce:	d102      	bne.n	221d6 <ble_ll_conn_rx_isr_end+0x11e>
   221d0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   221d4:	b160      	cbz	r0, 221f0 <ble_ll_conn_rx_isr_end+0x138>
            if ((hdr_nesn && conn_sn) || (!hdr_nesn && !conn_sn)) {
   221d6:	b101      	cbz	r1, 221da <ble_ll_conn_rx_isr_end+0x122>
   221d8:	b952      	cbnz	r2, 221f0 <ble_ll_conn_rx_isr_end+0x138>
   221da:	b901      	cbnz	r1, 221de <ble_ll_conn_rx_isr_end+0x126>
   221dc:	b142      	cbz	r2, 221f0 <ble_ll_conn_rx_isr_end+0x138>
                connsm->tx_seqnum ^= 1;
   221de:	f082 0201 	eor.w	r2, r2, #1
   221e2:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
                if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   221e6:	b193      	cbz	r3, 2220e <ble_ll_conn_rx_isr_end+0x156>
                    CONN_F_EMPTY_PDU_TXD(connsm) = 0;
   221e8:	7863      	ldrb	r3, [r4, #1]
   221ea:	f36f 1345 	bfc	r3, #5, #1
   221ee:	7063      	strb	r3, [r4, #1]
        if (is_ctrl && (opcode == BLE_LL_CTRL_TERMINATE_IND)
   221f0:	9b01      	ldr	r3, [sp, #4]
   221f2:	b113      	cbz	r3, 221fa <ble_ll_conn_rx_isr_end+0x142>
   221f4:	f1b9 0f02 	cmp.w	r9, #2
   221f8:	d04d      	beq.n	22296 <ble_ll_conn_rx_isr_end+0x1de>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   221fa:	79e3      	ldrb	r3, [r4, #7]
   221fc:	2b01      	cmp	r3, #1
   221fe:	d055      	beq.n	222ac <ble_ll_conn_rx_isr_end+0x1f4>
            reply = 1;
   22200:	2301      	movs	r3, #1
   22202:	e783      	b.n	2210c <ble_ll_conn_rx_isr_end+0x54>
            opcode = rxbuf[2];
   22204:	f897 9002 	ldrb.w	r9, [r7, #2]
            is_ctrl = 1;
   22208:	2301      	movs	r3, #1
   2220a:	9301      	str	r3, [sp, #4]
   2220c:	e7bc      	b.n	22188 <ble_ll_conn_rx_isr_end+0xd0>
                txpdu = connsm->cur_tx_pdu;
   2220e:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
                if (txpdu) {
   22212:	2e00      	cmp	r6, #0
   22214:	d0ec      	beq.n	221f0 <ble_ll_conn_rx_isr_end+0x138>
                    if (connsm->enc_data.tx_encrypted) {
   22216:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   2221a:	b123      	cbz	r3, 22226 <ble_ll_conn_rx_isr_end+0x16e>
                        ++connsm->enc_data.tx_pkt_cntr;
   2221c:	f8b4 311c 	ldrh.w	r3, [r4, #284]	; 0x11c
   22220:	3301      	adds	r3, #1
   22222:	f8a4 311c 	strh.w	r3, [r4, #284]	; 0x11c
                    if ((txhdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK)
   22226:	7ef3      	ldrb	r3, [r6, #27]
   22228:	f003 0303 	and.w	r3, r3, #3
   2222c:	2b03      	cmp	r3, #3
   2222e:	d018      	beq.n	22262 <ble_ll_conn_rx_isr_end+0x1aa>
                    txhdr->txinfo.offset += txhdr->txinfo.pyld_len;
   22230:	7eb1      	ldrb	r1, [r6, #26]
   22232:	7e73      	ldrb	r3, [r6, #25]
   22234:	440b      	add	r3, r1
   22236:	b2db      	uxtb	r3, r3
   22238:	7673      	strb	r3, [r6, #25]
                    if (txhdr->txinfo.offset >= OS_MBUF_PKTLEN(txpdu)) {
   2223a:	b298      	uxth	r0, r3
   2223c:	8a32      	ldrh	r2, [r6, #16]
   2223e:	4290      	cmp	r0, r2
   22240:	d321      	bcc.n	22286 <ble_ll_conn_rx_isr_end+0x1ce>
                        if (txhdr->txinfo.pyld_len != 0) {
   22242:	b139      	cbz	r1, 22254 <ble_ll_conn_rx_isr_end+0x19c>
                            ++connsm->completed_pkts;
   22244:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   22248:	3301      	adds	r3, #1
   2224a:	b29b      	uxth	r3, r3
   2224c:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
                            if (connsm->completed_pkts > 2) {
   22250:	2b02      	cmp	r3, #2
   22252:	d812      	bhi.n	2227a <ble_ll_conn_rx_isr_end+0x1c2>
                        os_mbuf_free_chain(txpdu);
   22254:	4630      	mov	r0, r6
   22256:	f7ee fe41 	bl	10edc <os_mbuf_free_chain>
                        connsm->cur_tx_pdu = NULL;
   2225a:	2300      	movs	r3, #0
   2225c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   22260:	e7c6      	b.n	221f0 <ble_ll_conn_rx_isr_end+0x138>
                        connsm->cur_tx_pdu = NULL;
   22262:	2300      	movs	r3, #0
   22264:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
                        rc = ble_ll_ctrl_tx_done(txpdu, connsm);
   22268:	4621      	mov	r1, r4
   2226a:	4630      	mov	r0, r6
   2226c:	f002 f87d 	bl	2436a <ble_ll_ctrl_tx_done>
                        if (rc) {
   22270:	4606      	mov	r6, r0
   22272:	2800      	cmp	r0, #0
   22274:	f47f af59 	bne.w	2212a <ble_ll_conn_rx_isr_end+0x72>
   22278:	e7ba      	b.n	221f0 <ble_ll_conn_rx_isr_end+0x138>
    os_eventq_put(&evq->evq, &ev->ev);
   2227a:	481c      	ldr	r0, [pc, #112]	; (222ec <ble_ll_conn_rx_isr_end+0x234>)
   2227c:	4601      	mov	r1, r0
   2227e:	3868      	subs	r0, #104	; 0x68
   22280:	f7ee fd0d 	bl	10c9e <os_eventq_put>
   22284:	e7e6      	b.n	22254 <ble_ll_conn_rx_isr_end+0x19c>
                        rem_bytes = OS_MBUF_PKTLEN(txpdu) - txhdr->txinfo.offset;
   22286:	b2d2      	uxtb	r2, r2
   22288:	1ad3      	subs	r3, r2, r3
                        rem_bytes = ble_ll_conn_adjust_pyld_len(connsm, rem_bytes);
   2228a:	b2d9      	uxtb	r1, r3
   2228c:	4620      	mov	r0, r4
   2228e:	f7fe faf8 	bl	20882 <ble_ll_conn_adjust_pyld_len>
                        txhdr->txinfo.pyld_len = rem_bytes;
   22292:	76b0      	strb	r0, [r6, #26]
   22294:	e7ac      	b.n	221f0 <ble_ll_conn_rx_isr_end+0x138>
                    && (rx_pyld_len == (1 + BLE_LL_CTRL_TERMINATE_IND_LEN))) {
   22296:	9b00      	ldr	r3, [sp, #0]
   22298:	2b02      	cmp	r3, #2
   2229a:	d1ae      	bne.n	221fa <ble_ll_conn_rx_isr_end+0x142>
            connsm->csmflags.cfbit.terminate_ind_rxd = 1;
   2229c:	7823      	ldrb	r3, [r4, #0]
   2229e:	f043 0304 	orr.w	r3, r3, #4
   222a2:	7023      	strb	r3, [r4, #0]
            connsm->rxd_disconnect_reason = rxbuf[3];
   222a4:	78fb      	ldrb	r3, [r7, #3]
   222a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   222aa:	e7a6      	b.n	221fa <ble_ll_conn_rx_isr_end+0x142>
            reply = CONN_F_LAST_TXD_MD(connsm) || (hdr_byte & BLE_LL_DATA_HDR_MD_MASK);
   222ac:	7863      	ldrb	r3, [r4, #1]
   222ae:	f013 0f40 	tst.w	r3, #64	; 0x40
   222b2:	d104      	bne.n	222be <ble_ll_conn_rx_isr_end+0x206>
   222b4:	f01a 0f10 	tst.w	sl, #16
   222b8:	d004      	beq.n	222c4 <ble_ll_conn_rx_isr_end+0x20c>
   222ba:	2301      	movs	r3, #1
   222bc:	e000      	b.n	222c0 <ble_ll_conn_rx_isr_end+0x208>
   222be:	2301      	movs	r3, #1
   222c0:	b2db      	uxtb	r3, r3
   222c2:	e723      	b.n	2210c <ble_ll_conn_rx_isr_end+0x54>
   222c4:	2300      	movs	r3, #0
   222c6:	e7fb      	b.n	222c0 <ble_ll_conn_rx_isr_end+0x208>
    rc = -1;
   222c8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   222cc:	e72d      	b.n	2212a <ble_ll_conn_rx_isr_end+0x72>
   222ce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   222d2:	e72a      	b.n	2212a <ble_ll_conn_rx_isr_end+0x72>
    rc = -1;
   222d4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   222d8:	e727      	b.n	2212a <ble_ll_conn_rx_isr_end+0x72>
   222da:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   222de:	e724      	b.n	2212a <ble_ll_conn_rx_isr_end+0x72>
        ble_ll_conn_current_sm_over(connsm);
   222e0:	4620      	mov	r0, r4
   222e2:	f7fe fa69 	bl	207b8 <ble_ll_conn_current_sm_over>
    return rc;
   222e6:	e72d      	b.n	22144 <ble_ll_conn_rx_isr_end+0x8c>
   222e8:	20003f80 	.word	0x20003f80
   222ec:	20003eb4 	.word	0x20003eb4

000222f0 <ble_ll_conn_enqueue_pkt>:
 * @param om
 */
void
ble_ll_conn_enqueue_pkt(struct ble_ll_conn_sm *connsm, struct os_mbuf *om,
                        uint8_t hdr_byte, uint8_t length)
{
   222f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222f2:	4605      	mov	r5, r0
   222f4:	460c      	mov	r4, r1
    struct os_mbuf_pkthdr *pkthdr;
    struct ble_mbuf_hdr *ble_hdr;
    int lifo;

    /* Set mbuf length and packet length if a control PDU */
    if (hdr_byte == BLE_LL_LLID_CTRL) {
   222f6:	2a03      	cmp	r2, #3
   222f8:	d00d      	beq.n	22316 <ble_ll_conn_enqueue_pkt+0x26>
        OS_MBUF_PKTHDR(om)->omp_len = length;
    }

    /* Set BLE transmit header */
    ble_hdr = BLE_MBUF_HDR_PTR(om);
    ble_hdr->txinfo.flags = 0;
   222fa:	2300      	movs	r3, #0
   222fc:	7623      	strb	r3, [r4, #24]
    ble_hdr->txinfo.offset = 0;
   222fe:	7663      	strb	r3, [r4, #25]
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   22300:	76e2      	strb	r2, [r4, #27]
     * need to do this now.
     */

    lifo = 0;
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   22302:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   22306:	2b02      	cmp	r3, #2
   22308:	d923      	bls.n	22352 <ble_ll_conn_enqueue_pkt+0x62>

        /*
         * If this is one of the following types we need to insert it at
         * head of queue.
         */
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   2230a:	f002 0203 	and.w	r2, r2, #3
        if (llid == BLE_LL_LLID_CTRL) {
   2230e:	2a03      	cmp	r2, #3
   22310:	d005      	beq.n	2231e <ble_ll_conn_enqueue_pkt+0x2e>
    lifo = 0;
   22312:	2600      	movs	r6, #0
   22314:	e01e      	b.n	22354 <ble_ll_conn_enqueue_pkt+0x64>
        om->om_len = length;
   22316:	b29b      	uxth	r3, r3
   22318:	80cb      	strh	r3, [r1, #6]
        OS_MBUF_PKTHDR(om)->omp_len = length;
   2231a:	820b      	strh	r3, [r1, #16]
   2231c:	e7ed      	b.n	222fa <ble_ll_conn_enqueue_pkt+0xa>
            switch (om->om_data[0]) {
   2231e:	6822      	ldr	r2, [r4, #0]
   22320:	7812      	ldrb	r2, [r2, #0]
   22322:	3a02      	subs	r2, #2
   22324:	2a0f      	cmp	r2, #15
   22326:	d809      	bhi.n	2233c <ble_ll_conn_enqueue_pkt+0x4c>
   22328:	e8df f002 	tbb	[pc, r2]
   2232c:	220f0f22 	.word	0x220f0f22
   22330:	08080822 	.word	0x08080822
   22334:	22080a08 	.word	0x22080a08
   22338:	22080808 	.word	0x22080808
    lifo = 0;
   2233c:	2600      	movs	r6, #0
   2233e:	e009      	b.n	22354 <ble_ll_conn_enqueue_pkt+0x64>
            case BLE_LL_CTRL_START_ENC_REQ:
            case BLE_LL_CTRL_START_ENC_RSP:
                lifo = 1;
                break;
            case BLE_LL_CTRL_PAUSE_ENC_RSP:
                if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   22340:	79eb      	ldrb	r3, [r5, #7]
   22342:	2b01      	cmp	r3, #1
   22344:	d016      	beq.n	22374 <ble_ll_conn_enqueue_pkt+0x84>
    lifo = 0;
   22346:	2600      	movs	r6, #0
   22348:	e004      	b.n	22354 <ble_ll_conn_enqueue_pkt+0x64>
            case BLE_LL_CTRL_ENC_REQ:
            case BLE_LL_CTRL_ENC_RSP:
                /* If encryption has been paused, we don't want to send any packets from the
                 * TX queue, as they would go unencrypted.
                 */
                if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSED) {
   2234a:	2b05      	cmp	r3, #5
   2234c:	d014      	beq.n	22378 <ble_ll_conn_enqueue_pkt+0x88>
    lifo = 0;
   2234e:	2600      	movs	r6, #0
   22350:	e000      	b.n	22354 <ble_ll_conn_enqueue_pkt+0x64>
   22352:	2600      	movs	r6, #0
        }
    }
#endif

    /* Add to transmit queue for the connection */
    pkthdr = OS_MBUF_PKTHDR(om);
   22354:	f104 0710 	add.w	r7, r4, #16
    OS_ENTER_CRITICAL(sr);
   22358:	f7ee f876 	bl	10448 <os_arch_save_sr>
    if (lifo) {
   2235c:	b196      	cbz	r6, 22384 <ble_ll_conn_enqueue_pkt+0x94>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   2235e:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
   22362:	6163      	str	r3, [r4, #20]
   22364:	b153      	cbz	r3, 2237c <ble_ll_conn_enqueue_pkt+0x8c>
   22366:	f8c5 70b0 	str.w	r7, [r5, #176]	; 0xb0
    } else {
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
    }
    OS_EXIT_CRITICAL(sr);
   2236a:	f7ee f873 	bl	10454 <os_arch_restore_sr>
}
   2236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lifo = 1;
   22370:	2601      	movs	r6, #1
   22372:	e7ef      	b.n	22354 <ble_ll_conn_enqueue_pkt+0x64>
                    lifo = 1;
   22374:	2601      	movs	r6, #1
   22376:	e7ed      	b.n	22354 <ble_ll_conn_enqueue_pkt+0x64>
                    lifo = 1;
   22378:	2601      	movs	r6, #1
   2237a:	e7eb      	b.n	22354 <ble_ll_conn_enqueue_pkt+0x64>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   2237c:	3414      	adds	r4, #20
   2237e:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
   22382:	e7f0      	b.n	22366 <ble_ll_conn_enqueue_pkt+0x76>
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
   22384:	2300      	movs	r3, #0
   22386:	f844 3f14 	str.w	r3, [r4, #20]!
   2238a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2238e:	601f      	str	r7, [r3, #0]
   22390:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
   22394:	e7e9      	b.n	2236a <ble_ll_conn_enqueue_pkt+0x7a>

00022396 <ble_ll_conn_tx_pkt_in>:
 *
 * @return int
 */
void
ble_ll_conn_tx_pkt_in(struct os_mbuf *om, uint16_t handle, uint16_t length)
{
   22396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22398:	4605      	mov	r5, r0
   2239a:	460c      	mov	r4, r1
   2239c:	4617      	mov	r7, r2
    uint16_t pb;
    struct ble_ll_conn_sm *connsm;

    /* See if we have an active matching connection handle */
    conn_handle = handle & 0x0FFF;
    connsm = ble_ll_conn_find_active_conn(conn_handle);
   2239e:	f3c1 000b 	ubfx	r0, r1, #0, #12
   223a2:	f7fe ff57 	bl	21254 <ble_ll_conn_find_active_conn>
    if (connsm) {
   223a6:	b160      	cbz	r0, 223c2 <ble_ll_conn_tx_pkt_in+0x2c>
   223a8:	4606      	mov	r6, r0
        /* Construct LL header in buffer (NOTE: pb already checked) */
        pb = handle & 0x3000;
        if (pb == 0) {
   223aa:	f414 5f40 	tst.w	r4, #12288	; 0x3000
   223ae:	d006      	beq.n	223be <ble_ll_conn_tx_pkt_in+0x28>
            hdr_byte = BLE_LL_LLID_DATA_START;
        } else {
            hdr_byte = BLE_LL_LLID_DATA_FRAG;
   223b0:	2201      	movs	r2, #1

        /* Add to total l2cap pdus enqueue */
        STATS_INC(ble_ll_conn_stats, l2cap_enqueued);

        /* Clear flags field in BLE header */
        ble_ll_conn_enqueue_pkt(connsm, om, hdr_byte, length);
   223b2:	b2fb      	uxtb	r3, r7
   223b4:	4629      	mov	r1, r5
   223b6:	4630      	mov	r0, r6
   223b8:	f7ff ff9a 	bl	222f0 <ble_ll_conn_enqueue_pkt>
    } else {
        /* No connection found! */
        STATS_INC(ble_ll_conn_stats, handle_not_found);
        os_mbuf_free_chain(om);
    }
}
   223bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            hdr_byte = BLE_LL_LLID_DATA_START;
   223be:	2202      	movs	r2, #2
   223c0:	e7f7      	b.n	223b2 <ble_ll_conn_tx_pkt_in+0x1c>
        os_mbuf_free_chain(om);
   223c2:	4628      	mov	r0, r5
   223c4:	f7ee fd8a 	bl	10edc <os_mbuf_free_chain>
}
   223c8:	e7f8      	b.n	223bc <ble_ll_conn_tx_pkt_in+0x26>
	...

000223cc <ble_ll_conn_set_global_chanmap>:
 * @param num_used_chans
 * @param chanmap
 */
void
ble_ll_conn_set_global_chanmap(uint8_t num_used_chans, uint8_t *chanmap)
{
   223cc:	b538      	push	{r3, r4, r5, lr}
   223ce:	4605      	mov	r5, r0
   223d0:	460c      	mov	r4, r1
    struct ble_ll_conn_sm *connsm;
    struct ble_ll_conn_global_params *conn_params;

    /* Do nothing if same channel map */
    conn_params = &g_ble_ll_conn_params;
    if (!memcmp(conn_params->master_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN)) {
   223d2:	2205      	movs	r2, #5
   223d4:	480c      	ldr	r0, [pc, #48]	; (22408 <ble_ll_conn_set_global_chanmap+0x3c>)
   223d6:	f7f0 f851 	bl	1247c <memcmp>
   223da:	b900      	cbnz	r0, 223de <ble_ll_conn_set_global_chanmap+0x12>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
        }
    }
}
   223dc:	bd38      	pop	{r3, r4, r5, pc}
    conn_params->num_used_chans = num_used_chans;
   223de:	4b0a      	ldr	r3, [pc, #40]	; (22408 <ble_ll_conn_set_global_chanmap+0x3c>)
   223e0:	715d      	strb	r5, [r3, #5]
    memcpy(conn_params->master_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN);
   223e2:	6822      	ldr	r2, [r4, #0]
   223e4:	601a      	str	r2, [r3, #0]
   223e6:	7922      	ldrb	r2, [r4, #4]
   223e8:	711a      	strb	r2, [r3, #4]
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   223ea:	4b08      	ldr	r3, [pc, #32]	; (2240c <ble_ll_conn_set_global_chanmap+0x40>)
   223ec:	681c      	ldr	r4, [r3, #0]
   223ee:	e001      	b.n	223f4 <ble_ll_conn_set_global_chanmap+0x28>
   223f0:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   223f4:	2c00      	cmp	r4, #0
   223f6:	d0f1      	beq.n	223dc <ble_ll_conn_set_global_chanmap+0x10>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   223f8:	79e3      	ldrb	r3, [r4, #7]
   223fa:	2b01      	cmp	r3, #1
   223fc:	d1f8      	bne.n	223f0 <ble_ll_conn_set_global_chanmap+0x24>
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   223fe:	2101      	movs	r1, #1
   22400:	4620      	mov	r0, r4
   22402:	f001 fbd7 	bl	23bb4 <ble_ll_ctrl_proc_start>
   22406:	e7f3      	b.n	223f0 <ble_ll_conn_set_global_chanmap+0x24>
   22408:	20003f68 	.word	0x20003f68
   2240c:	20004130 	.word	0x20004130

00022410 <ble_ll_conn_slave_start>:
 * @return 0: connection not started; 1 connecton started
 */
int
ble_ll_conn_slave_start(uint8_t *rxbuf, uint8_t pat, struct ble_mbuf_hdr *rxhdr,
                        bool force_csa2)
{
   22410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22414:	4606      	mov	r6, r0
   22416:	4689      	mov	r9, r1
   22418:	4617      	mov	r7, r2
   2241a:	4698      	mov	r8, r3
    uint8_t *inita;
    uint8_t *dptr;
    struct ble_ll_conn_sm *connsm;

    /* Ignore the connection request if we are already connected*/
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   2241c:	1c85      	adds	r5, r0, #2
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   2241e:	4b6d      	ldr	r3, [pc, #436]	; (225d4 <ble_ll_conn_slave_start+0x1c4>)
   22420:	681c      	ldr	r4, [r3, #0]
   22422:	e007      	b.n	22434 <ble_ll_conn_slave_start+0x24>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
                if (connsm->peer_addr_type & 1) {
                    return 0;
                }
            } else {
                if ((connsm->peer_addr_type & 1) == 0) {
   22424:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
   22428:	f012 0f01 	tst.w	r2, #1
   2242c:	f000 8084 	beq.w	22538 <ble_ll_conn_slave_start+0x128>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   22430:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   22434:	b194      	cbz	r4, 2245c <ble_ll_conn_slave_start+0x4c>
        if (!memcmp(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN)) {
   22436:	2206      	movs	r2, #6
   22438:	4629      	mov	r1, r5
   2243a:	f104 0093 	add.w	r0, r4, #147	; 0x93
   2243e:	f7f0 f81d 	bl	1247c <memcmp>
   22442:	4603      	mov	r3, r0
   22444:	2800      	cmp	r0, #0
   22446:	d1f3      	bne.n	22430 <ble_ll_conn_slave_start+0x20>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   22448:	7832      	ldrb	r2, [r6, #0]
   2244a:	f012 0f40 	tst.w	r2, #64	; 0x40
   2244e:	d0e9      	beq.n	22424 <ble_ll_conn_slave_start+0x14>
                if (connsm->peer_addr_type & 1) {
   22450:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
   22454:	f012 0f01 	tst.w	r2, #1
   22458:	d0ea      	beq.n	22430 <ble_ll_conn_slave_start+0x20>
   2245a:	e06d      	b.n	22538 <ble_ll_conn_slave_start+0x128>
            }
        }
    }

    /* Allocate a connection. If none available, dont do anything */
    connsm = ble_ll_conn_sm_get();
   2245c:	f7fe ff0c 	bl	21278 <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   22460:	4604      	mov	r4, r0
   22462:	2800      	cmp	r0, #0
   22464:	f000 80b3 	beq.w	225ce <ble_ll_conn_slave_start+0x1be>

    /* Set the pointer at the start of the connection data */
    dptr = rxbuf + BLE_LL_CONN_REQ_ADVA_OFF + BLE_DEV_ADDR_LEN;

    /* Set connection state machine information */
    connsm->access_addr = get_le32(dptr);
   22468:	f106 000e 	add.w	r0, r6, #14
   2246c:	f7fc fb7f 	bl	1eb6e <get_le32>
   22470:	6560      	str	r0, [r4, #84]	; 0x54
    crcinit = dptr[6];
   22472:	7d32      	ldrb	r2, [r6, #20]
    crcinit = (crcinit << 8) | dptr[5];
   22474:	7cf3      	ldrb	r3, [r6, #19]
   22476:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    crcinit = (crcinit << 8) | dptr[4];
   2247a:	7cb3      	ldrb	r3, [r6, #18]
   2247c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    connsm->crcinit = crcinit;
   22480:	65a3      	str	r3, [r4, #88]	; 0x58
    connsm->tx_win_size = dptr[7];
   22482:	7d73      	ldrb	r3, [r6, #21]
   22484:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    connsm->tx_win_off = get_le16(dptr + 8);
   22488:	f106 0016 	add.w	r0, r6, #22
   2248c:	f7fc fb6a 	bl	1eb64 <get_le16>
   22490:	f8a4 0072 	strh.w	r0, [r4, #114]	; 0x72
    connsm->conn_itvl = get_le16(dptr + 10);
   22494:	f106 0018 	add.w	r0, r6, #24
   22498:	f7fc fb64 	bl	1eb64 <get_le16>
   2249c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    connsm->slave_latency = get_le16(dptr + 12);
   224a0:	f106 001a 	add.w	r0, r6, #26
   224a4:	f7fc fb5e 	bl	1eb64 <get_le16>
   224a8:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    connsm->supervision_tmo = get_le16(dptr + 14);
   224ac:	f106 001c 	add.w	r0, r6, #28
   224b0:	f7fc fb58 	bl	1eb64 <get_le16>
   224b4:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    memcpy(&connsm->chanmap, dptr + 16, BLE_LL_CONN_CHMAP_LEN);
   224b8:	f104 0220 	add.w	r2, r4, #32
   224bc:	4633      	mov	r3, r6
   224be:	f853 1f1e 	ldr.w	r1, [r3, #30]!
   224c2:	6221      	str	r1, [r4, #32]
   224c4:	791b      	ldrb	r3, [r3, #4]
   224c6:	7113      	strb	r3, [r2, #4]
    connsm->hop_inc = dptr[21] & 0x1F;
   224c8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   224cc:	f003 031f 	and.w	r3, r3, #31
   224d0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    connsm->master_sca = dptr[21] >> 5;
   224d4:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   224d8:	095b      	lsrs	r3, r3, #5
   224da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

    /* Error check parameters */
    if ((connsm->tx_win_off > connsm->conn_itvl) ||
   224de:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   224e2:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   224e6:	4299      	cmp	r1, r3
   224e8:	d81e      	bhi.n	22528 <ble_ll_conn_slave_start+0x118>
   224ea:	2b05      	cmp	r3, #5
   224ec:	d91c      	bls.n	22528 <ble_ll_conn_slave_start+0x118>
        (connsm->conn_itvl < BLE_HCI_CONN_ITVL_MIN) ||
   224ee:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   224f2:	d819      	bhi.n	22528 <ble_ll_conn_slave_start+0x118>
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   224f4:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
   224f8:	b1b1      	cbz	r1, 22528 <ble_ll_conn_slave_start+0x118>
        (connsm->slave_latency > BLE_LL_CONN_SLAVE_LATENCY_MAX)) {
   224fa:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   224fe:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
   22502:	d211      	bcs.n	22528 <ble_ll_conn_slave_start+0x118>
        goto err_slave_start;
    }

    /* Slave latency cannot cause a supervision timeout */
    temp = (connsm->slave_latency + 1) * (connsm->conn_itvl * 2) *
   22504:	f640 1cc4 	movw	ip, #2500	; 0x9c4
   22508:	fb0c fc03 	mul.w	ip, ip, r3
   2250c:	fb0e cc0c 	mla	ip, lr, ip, ip
            BLE_LL_CONN_ITVL_USECS;
    if ((connsm->supervision_tmo * 10000) <= temp ) {
   22510:	f242 7e10 	movw	lr, #10000	; 0x2710
   22514:	fb0e f000 	mul.w	r0, lr, r0
   22518:	4560      	cmp	r0, ip
   2251a:	d905      	bls.n	22528 <ble_ll_conn_slave_start+0x118>

    /*
     * The transmit window must be less than or equal to the lesser of 10
     * msecs or the connection interval minus 1.25 msecs.
     */
    temp = connsm->conn_itvl - 1;
   2251c:	3b01      	subs	r3, #1
    if (temp > 8) {
   2251e:	2b08      	cmp	r3, #8
   22520:	d900      	bls.n	22524 <ble_ll_conn_slave_start+0x114>
        temp = 8;
   22522:	2308      	movs	r3, #8
    }
    if (connsm->tx_win_size > temp) {
   22524:	4299      	cmp	r1, r3
   22526:	d90a      	bls.n	2253e <ble_ll_conn_slave_start+0x12e>
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
    }
    return rc;

err_slave_start:
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   22528:	2300      	movs	r3, #0
   2252a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
   2252e:	4a2a      	ldr	r2, [pc, #168]	; (225d8 <ble_ll_conn_slave_start+0x1c8>)
   22530:	6851      	ldr	r1, [r2, #4]
   22532:	600c      	str	r4, [r1, #0]
   22534:	34b8      	adds	r4, #184	; 0xb8
   22536:	6054      	str	r4, [r2, #4]
    STATS_INC(ble_ll_conn_stats, slave_rxd_bad_conn_req_params);
    return 0;
}
   22538:	4618      	mov	r0, r3
   2253a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN);
   2253e:	682b      	ldr	r3, [r5, #0]
   22540:	f8c4 3093 	str.w	r3, [r4, #147]	; 0x93
   22544:	88ab      	ldrh	r3, [r5, #4]
   22546:	f8a4 3097 	strh.w	r3, [r4, #151]	; 0x97
    connsm->peer_addr_type = pat;
   2254a:	f884 9092 	strb.w	r9, [r4, #146]	; 0x92
    connsm->num_used_chans = ble_ll_utils_calc_num_used_chans(connsm->chanmap);
   2254e:	4610      	mov	r0, r2
   22550:	f005 f85d 	bl	2760e <ble_ll_utils_calc_num_used_chans>
   22554:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    if (connsm->num_used_chans < 2) {
   22558:	2801      	cmp	r0, #1
   2255a:	d9e5      	bls.n	22528 <ble_ll_conn_slave_start+0x118>
    connsm->conn_role = BLE_LL_CONN_ROLE_SLAVE;
   2255c:	2302      	movs	r3, #2
   2255e:	71e3      	strb	r3, [r4, #7]
    ble_ll_conn_sm_new(connsm);
   22560:	4620      	mov	r0, r4
   22562:	f7ff f8c7 	bl	216f4 <ble_ll_conn_sm_new>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   22566:	f1b8 0f00 	cmp.w	r8, #0
   2256a:	d105      	bne.n	22578 <ble_ll_conn_slave_start+0x168>
   2256c:	7833      	ldrb	r3, [r6, #0]
   2256e:	f013 0f20 	tst.w	r3, #32
   22572:	d020      	beq.n	225b6 <ble_ll_conn_slave_start+0x1a6>
   22574:	2101      	movs	r1, #1
   22576:	e000      	b.n	2257a <ble_ll_conn_slave_start+0x16a>
   22578:	2101      	movs	r1, #1
    ble_ll_conn_set_csa(connsm,
   2257a:	4620      	mov	r0, r4
   2257c:	f7ff f850 	bl	21620 <ble_ll_conn_set_csa>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   22580:	4b16      	ldr	r3, [pc, #88]	; (225dc <ble_ll_conn_slave_start+0x1cc>)
   22582:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    rc = ble_ll_conn_created(connsm, rxhdr);
   22586:	4639      	mov	r1, r7
   22588:	4620      	mov	r0, r4
   2258a:	f7fe ffc5 	bl	21518 <ble_ll_conn_created>
    if (!rc) {
   2258e:	4603      	mov	r3, r0
   22590:	2800      	cmp	r0, #0
   22592:	d1d1      	bne.n	22538 <ble_ll_conn_slave_start+0x128>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   22594:	4a0f      	ldr	r2, [pc, #60]	; (225d4 <ble_ll_conn_slave_start+0x1c4>)
   22596:	6812      	ldr	r2, [r2, #0]
   22598:	42a2      	cmp	r2, r4
   2259a:	d10f      	bne.n	225bc <ble_ll_conn_slave_start+0x1ac>
   2259c:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   225a0:	4a0c      	ldr	r2, [pc, #48]	; (225d4 <ble_ll_conn_slave_start+0x1c4>)
   225a2:	6011      	str	r1, [r2, #0]
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   225a4:	2200      	movs	r2, #0
   225a6:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   225aa:	4a0b      	ldr	r2, [pc, #44]	; (225d8 <ble_ll_conn_slave_start+0x1c8>)
   225ac:	6851      	ldr	r1, [r2, #4]
   225ae:	600c      	str	r4, [r1, #0]
   225b0:	34b8      	adds	r4, #184	; 0xb8
   225b2:	6054      	str	r4, [r2, #4]
   225b4:	e7c0      	b.n	22538 <ble_ll_conn_slave_start+0x128>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   225b6:	2100      	movs	r1, #0
   225b8:	e7df      	b.n	2257a <ble_ll_conn_slave_start+0x16a>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   225ba:	460a      	mov	r2, r1
   225bc:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   225c0:	42a1      	cmp	r1, r4
   225c2:	d1fa      	bne.n	225ba <ble_ll_conn_slave_start+0x1aa>
   225c4:	f8d1 10b8 	ldr.w	r1, [r1, #184]	; 0xb8
   225c8:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
   225cc:	e7ea      	b.n	225a4 <ble_ll_conn_slave_start+0x194>
        return 0;
   225ce:	2300      	movs	r3, #0
   225d0:	e7b2      	b.n	22538 <ble_ll_conn_slave_start+0x128>
   225d2:	bf00      	nop
   225d4:	20004130 	.word	0x20004130
   225d8:	20003f88 	.word	0x20003f88
   225dc:	00020d21 	.word	0x00020d21

000225e0 <ble_ll_conn_module_reset>:
 *
 * Context: Link Layer task
 */
void
ble_ll_conn_module_reset(void)
{
   225e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t maxbytes;
    struct ble_ll_conn_sm *connsm;
    struct ble_ll_conn_global_params *conn_params;

    /* Kill the current one first (if one is running) */
    if (g_ble_ll_conn_cur_sm) {
   225e2:	4b28      	ldr	r3, [pc, #160]	; (22684 <ble_ll_conn_module_reset+0xa4>)
   225e4:	6818      	ldr	r0, [r3, #0]
   225e6:	b118      	cbz	r0, 225f0 <ble_ll_conn_module_reset+0x10>
        connsm = g_ble_ll_conn_cur_sm;
        g_ble_ll_conn_cur_sm = NULL;
   225e8:	2100      	movs	r1, #0
   225ea:	6019      	str	r1, [r3, #0]
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   225ec:	f7ff f942 	bl	21874 <ble_ll_conn_end>
    }

    /* Free the global connection complete event if there is one */
    if (g_ble_ll_conn_comp_ev) {
   225f0:	4b25      	ldr	r3, [pc, #148]	; (22688 <ble_ll_conn_module_reset+0xa8>)
   225f2:	6818      	ldr	r0, [r3, #0]
   225f4:	b120      	cbz	r0, 22600 <ble_ll_conn_module_reset+0x20>
        ble_hci_trans_buf_free(g_ble_ll_conn_comp_ev);
   225f6:	f7fb f8c9 	bl	1d78c <ble_hci_trans_buf_free>
        g_ble_ll_conn_comp_ev = NULL;
   225fa:	4b23      	ldr	r3, [pc, #140]	; (22688 <ble_ll_conn_module_reset+0xa8>)
   225fc:	2200      	movs	r2, #0
   225fe:	601a      	str	r2, [r3, #0]
    }

    /* Reset connection we are attempting to create */
    g_ble_ll_conn_create_sm = NULL;
   22600:	4b22      	ldr	r3, [pc, #136]	; (2268c <ble_ll_conn_module_reset+0xac>)
   22602:	2200      	movs	r2, #0
   22604:	601a      	str	r2, [r3, #0]

    /* Now go through and end all the connections */
    while (1) {
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   22606:	4b22      	ldr	r3, [pc, #136]	; (22690 <ble_ll_conn_module_reset+0xb0>)
   22608:	6818      	ldr	r0, [r3, #0]
        if (!connsm) {
   2260a:	b118      	cbz	r0, 22614 <ble_ll_conn_module_reset+0x34>
            break;
        }
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   2260c:	2100      	movs	r1, #0
   2260e:	f7ff f931 	bl	21874 <ble_ll_conn_end>
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   22612:	e7f8      	b.n	22606 <ble_ll_conn_module_reset+0x26>
    }

    /* Get the maximum supported PHY PDU size from the PHY */
    max_phy_pyld = ble_phy_max_data_pdu_pyld();
   22614:	f006 f91e 	bl	28854 <ble_phy_max_data_pdu_pyld>
   22618:	4605      	mov	r5, r0

    /* Configure the global LL parameters */
    conn_params = &g_ble_ll_conn_params;

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_RX_BYTES), max_phy_pyld);
   2261a:	4606      	mov	r6, r0
   2261c:	28fb      	cmp	r0, #251	; 0xfb
   2261e:	bf28      	it	cs
   22620:	26fb      	movcs	r6, #251	; 0xfb
   22622:	b2f6      	uxtb	r6, r6
    conn_params->supp_max_rx_octets = maxbytes;
   22624:	4c1b      	ldr	r4, [pc, #108]	; (22694 <ble_ll_conn_module_reset+0xb4>)
   22626:	71e6      	strb	r6, [r4, #7]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_rx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_rx_time = MAX_TIME_UNCODED(maxbytes);
   22628:	1d37      	adds	r7, r6, #4
   2262a:	2101      	movs	r1, #1
   2262c:	4638      	mov	r0, r7
   2262e:	f7fc ff37 	bl	1f4a0 <ble_ll_pdu_tx_time_get>
   22632:	82a0      	strh	r0, [r4, #20]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_TX_BYTES), max_phy_pyld);
    conn_params->supp_max_tx_octets = maxbytes;
   22634:	71a6      	strb	r6, [r4, #6]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_tx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   22636:	2101      	movs	r1, #1
   22638:	4638      	mov	r0, r7
   2263a:	f7fc ff31 	bl	1f4a0 <ble_ll_pdu_tx_time_get>
   2263e:	8260      	strh	r0, [r4, #18]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_CONN_INIT_MAX_TX_BYTES), max_phy_pyld);
   22640:	2d1b      	cmp	r5, #27
   22642:	bf28      	it	cs
   22644:	251b      	movcs	r5, #27
   22646:	b2ed      	uxtb	r5, r5
    conn_params->conn_init_max_tx_octets = maxbytes;
   22648:	7225      	strb	r5, [r4, #8]
    conn_params->conn_init_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   2264a:	3504      	adds	r5, #4
   2264c:	2101      	movs	r1, #1
   2264e:	4628      	mov	r0, r5
   22650:	f7fc ff26 	bl	1f4a0 <ble_ll_pdu_tx_time_get>
   22654:	81a0      	strh	r0, [r4, #12]
    conn_params->conn_init_max_tx_time_uncoded = MAX_TIME_UNCODED(maxbytes);
   22656:	2101      	movs	r1, #1
   22658:	4628      	mov	r0, r5
   2265a:	f7fc ff21 	bl	1f4a0 <ble_ll_pdu_tx_time_get>
   2265e:	81e0      	strh	r0, [r4, #14]
    conn_params->conn_init_max_tx_time_coded = MAX_TIME_CODED(maxbytes);
   22660:	2100      	movs	r1, #0
   22662:	4628      	mov	r0, r5
   22664:	f7fc ff1c 	bl	1f4a0 <ble_ll_pdu_tx_time_get>
   22668:	8220      	strh	r0, [r4, #16]

    conn_params->sugg_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   2266a:	231b      	movs	r3, #27
   2266c:	7263      	strb	r3, [r4, #9]
    conn_params->sugg_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   2266e:	f44f 73a4 	mov.w	r3, #328	; 0x148
   22672:	8163      	strh	r3, [r4, #10]

    /* Mask in all channels by default */
    conn_params->num_used_chans = BLE_PHY_NUM_DATA_CHANS;
   22674:	2325      	movs	r3, #37	; 0x25
   22676:	7163      	strb	r3, [r4, #5]
    memset(conn_params->master_chan_map, 0xff, BLE_LL_CONN_CHMAP_LEN - 1);
   22678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2267c:	6023      	str	r3, [r4, #0]
    conn_params->master_chan_map[4] = 0x1f;
   2267e:	231f      	movs	r3, #31
   22680:	7123      	strb	r3, [r4, #4]

    /* Reset statistics */
    STATS_RESET(ble_ll_conn_stats);
}
   22682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22684:	20003f80 	.word	0x20003f80
   22688:	20003f84 	.word	0x20003f84
   2268c:	20003f90 	.word	0x20003f90
   22690:	20004130 	.word	0x20004130
   22694:	20003f68 	.word	0x20003f68

00022698 <ble_ll_conn_module_init>:

/* Initialize the connection module */
void
ble_ll_conn_module_init(void)
{
   22698:	b538      	push	{r3, r4, r5, lr}
    int rc;
    uint16_t i;
    struct ble_ll_conn_sm *connsm;

    /* Initialize list of active conections */
    SLIST_INIT(&g_ble_ll_conn_active_list);
   2269a:	2400      	movs	r4, #0
   2269c:	4b10      	ldr	r3, [pc, #64]	; (226e0 <ble_ll_conn_module_init+0x48>)
   2269e:	601c      	str	r4, [r3, #0]
    STAILQ_INIT(&g_ble_ll_conn_free_list);
   226a0:	4b10      	ldr	r3, [pc, #64]	; (226e4 <ble_ll_conn_module_init+0x4c>)
   226a2:	601c      	str	r4, [r3, #0]
   226a4:	605b      	str	r3, [r3, #4]
    /*
     * Take all the connections off the free memory pool and add them to
     * the free connection list, assigning handles in linear order. Note:
     * the specification allows a handle of zero; we just avoid using it.
     */
    connsm = &g_ble_ll_conn_sm[0];
   226a6:	4d10      	ldr	r5, [pc, #64]	; (226e8 <ble_ll_conn_module_init+0x50>)
    for (i = 0; i < MYNEWT_VAL(BLE_MAX_CONNECTIONS); ++i) {
   226a8:	b114      	cbz	r4, 226b0 <ble_ll_conn_module_init+0x18>
                            STATS_NAME_INIT_PARMS(ble_ll_conn_stats),
                            "ble_ll_conn");
    BLE_LL_ASSERT(rc == 0);

    /* Call reset to finish reset of initialization */
    ble_ll_conn_module_reset();
   226aa:	f7ff ff99 	bl	225e0 <ble_ll_conn_module_reset>
}
   226ae:	bd38      	pop	{r3, r4, r5, pc}
        memset(connsm, 0, sizeof(struct ble_ll_conn_sm));
   226b0:	f44f 72cc 	mov.w	r2, #408	; 0x198
   226b4:	2100      	movs	r1, #0
   226b6:	4628      	mov	r0, r5
   226b8:	f7ef ff2d 	bl	12516 <memset>
        connsm->conn_handle = i + 1;
   226bc:	3401      	adds	r4, #1
   226be:	b2a4      	uxth	r4, r4
   226c0:	80ac      	strh	r4, [r5, #4]
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   226c2:	4b08      	ldr	r3, [pc, #32]	; (226e4 <ble_ll_conn_module_init+0x4c>)
   226c4:	685a      	ldr	r2, [r3, #4]
   226c6:	6015      	str	r5, [r2, #0]
   226c8:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
   226cc:	605a      	str	r2, [r3, #4]
        connsm->conn_sch.sched_type = BLE_LL_SCHED_TYPE_CONN;
   226ce:	2303      	movs	r3, #3
   226d0:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
        connsm->conn_sch.cb_arg = connsm;
   226d4:	f8c5 50e8 	str.w	r5, [r5, #232]	; 0xe8
        ++connsm;
   226d8:	f505 75cc 	add.w	r5, r5, #408	; 0x198
   226dc:	e7e4      	b.n	226a8 <ble_ll_conn_module_init+0x10>
   226de:	bf00      	nop
   226e0:	20004130 	.word	0x20004130
   226e4:	20003f88 	.word	0x20003f88
   226e8:	20003f98 	.word	0x20003f98

000226ec <ble_ll_conn_hci_chk_scan_params>:

static int
ble_ll_conn_hci_chk_scan_params(uint16_t itvl, uint16_t window)
{
    /* Check interval and window */
    if ((itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   226ec:	1f03      	subs	r3, r0, #4
   226ee:	b29b      	uxth	r3, r3
   226f0:	f643 72fc 	movw	r2, #16380	; 0x3ffc
   226f4:	4293      	cmp	r3, r2
   226f6:	d80a      	bhi.n	2270e <ble_ll_conn_hci_chk_scan_params+0x22>
        (itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   226f8:	2903      	cmp	r1, #3
   226fa:	d90a      	bls.n	22712 <ble_ll_conn_hci_chk_scan_params+0x26>
        (window < BLE_HCI_SCAN_WINDOW_MIN) ||
   226fc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   22700:	d809      	bhi.n	22716 <ble_ll_conn_hci_chk_scan_params+0x2a>
        (window > BLE_HCI_SCAN_WINDOW_MAX) ||
   22702:	4288      	cmp	r0, r1
   22704:	d301      	bcc.n	2270a <ble_ll_conn_hci_chk_scan_params+0x1e>
        (itvl < window)) {
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    return 0;
   22706:	2000      	movs	r0, #0
}
   22708:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2270a:	2012      	movs	r0, #18
   2270c:	4770      	bx	lr
   2270e:	2012      	movs	r0, #18
   22710:	4770      	bx	lr
   22712:	2012      	movs	r0, #18
   22714:	4770      	bx	lr
   22716:	2012      	movs	r0, #18
   22718:	4770      	bx	lr
	...

0002271c <ble_ll_init_alloc_conn_comp_ev>:
{
   2271c:	b508      	push	{r3, lr}
    evbuf = g_ble_ll_conn_comp_ev;
   2271e:	4b08      	ldr	r3, [pc, #32]	; (22740 <ble_ll_init_alloc_conn_comp_ev+0x24>)
   22720:	681b      	ldr	r3, [r3, #0]
    if (evbuf == NULL) {
   22722:	b10b      	cbz	r3, 22728 <ble_ll_init_alloc_conn_comp_ev+0xc>
    rc = 0;
   22724:	2000      	movs	r0, #0
}
   22726:	bd08      	pop	{r3, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22728:	2002      	movs	r0, #2
   2272a:	f7fb f805 	bl	1d738 <ble_hci_trans_buf_alloc>
        if (!evbuf) {
   2272e:	b118      	cbz	r0, 22738 <ble_ll_init_alloc_conn_comp_ev+0x1c>
            g_ble_ll_conn_comp_ev = evbuf;
   22730:	4a03      	ldr	r2, [pc, #12]	; (22740 <ble_ll_init_alloc_conn_comp_ev+0x24>)
   22732:	6010      	str	r0, [r2, #0]
    rc = 0;
   22734:	2000      	movs	r0, #0
   22736:	e7f6      	b.n	22726 <ble_ll_init_alloc_conn_comp_ev+0xa>
            rc = -1;
   22738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   2273c:	e7f3      	b.n	22726 <ble_ll_init_alloc_conn_comp_ev+0xa>
   2273e:	bf00      	nop
   22740:	20003f84 	.word	0x20003f84

00022744 <ble_ll_conn_hci_chk_conn_params>:
    if ((itvl_min > itvl_max) ||
   22744:	4288      	cmp	r0, r1
   22746:	d81c      	bhi.n	22782 <ble_ll_conn_hci_chk_conn_params+0x3e>
   22748:	2805      	cmp	r0, #5
   2274a:	d91c      	bls.n	22786 <ble_ll_conn_hci_chk_conn_params+0x42>
        (itvl_min < BLE_HCI_CONN_ITVL_MIN) ||
   2274c:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   22750:	d81b      	bhi.n	2278a <ble_ll_conn_hci_chk_conn_params+0x46>
        (itvl_max > BLE_HCI_CONN_ITVL_MAX) ||
   22752:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   22756:	d21a      	bcs.n	2278e <ble_ll_conn_hci_chk_conn_params+0x4a>
        (latency > BLE_HCI_CONN_LATENCY_MAX) ||
   22758:	2b09      	cmp	r3, #9
   2275a:	d91a      	bls.n	22792 <ble_ll_conn_hci_chk_conn_params+0x4e>
        (spvn_tmo < BLE_HCI_CONN_SPVN_TIMEOUT_MIN) ||
   2275c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   22760:	d819      	bhi.n	22796 <ble_ll_conn_hci_chk_conn_params+0x52>
    spvn_tmo_usecs *= (BLE_HCI_CONN_SPVN_TMO_UNITS * 1000);
   22762:	f242 7010 	movw	r0, #10000	; 0x2710
   22766:	fb00 f303 	mul.w	r3, r0, r3
    min_spvn_tmo_usecs = (uint32_t)itvl_max * 2 * BLE_LL_CONN_ITVL_USECS;
   2276a:	f640 10c4 	movw	r0, #2500	; 0x9c4
   2276e:	fb00 f101 	mul.w	r1, r0, r1
    min_spvn_tmo_usecs *= (1 + latency);
   22772:	fb02 1101 	mla	r1, r2, r1, r1
    if (spvn_tmo_usecs <= min_spvn_tmo_usecs) {
   22776:	428b      	cmp	r3, r1
   22778:	d901      	bls.n	2277e <ble_ll_conn_hci_chk_conn_params+0x3a>
    return BLE_ERR_SUCCESS;
   2277a:	2000      	movs	r0, #0
}
   2277c:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2277e:	2012      	movs	r0, #18
   22780:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22782:	2012      	movs	r0, #18
   22784:	4770      	bx	lr
   22786:	2012      	movs	r0, #18
   22788:	4770      	bx	lr
   2278a:	2012      	movs	r0, #18
   2278c:	4770      	bx	lr
   2278e:	2012      	movs	r0, #18
   22790:	4770      	bx	lr
   22792:	2012      	movs	r0, #18
   22794:	4770      	bx	lr
   22796:	2012      	movs	r0, #18
   22798:	4770      	bx	lr

0002279a <ble_ll_conn_process_conn_params>:
}
#endif

static int
ble_ll_conn_process_conn_params(uint8_t *cmdbuf, struct ble_ll_conn_sm *connsm)
{
   2279a:	b538      	push	{r3, r4, r5, lr}
   2279c:	4605      	mov	r5, r0
   2279e:	460c      	mov	r4, r1
    int rc;
    struct hci_conn_update *hcu;

    /* Retrieve command data */
    hcu = &connsm->conn_param_req;
    hcu->handle = connsm->conn_handle;
   227a0:	888b      	ldrh	r3, [r1, #4]
   227a2:	f8a1 3160 	strh.w	r3, [r1, #352]	; 0x160
    hcu->conn_itvl_min = get_le16(cmdbuf + 2);
   227a6:	3002      	adds	r0, #2
   227a8:	f7fc f9dc 	bl	1eb64 <get_le16>
   227ac:	f8a4 0162 	strh.w	r0, [r4, #354]	; 0x162
    hcu->conn_itvl_max = get_le16(cmdbuf + 4);
   227b0:	1d28      	adds	r0, r5, #4
   227b2:	f7fc f9d7 	bl	1eb64 <get_le16>
   227b6:	f8a4 0164 	strh.w	r0, [r4, #356]	; 0x164
    hcu->conn_latency = get_le16(cmdbuf + 6);
   227ba:	1da8      	adds	r0, r5, #6
   227bc:	f7fc f9d2 	bl	1eb64 <get_le16>
   227c0:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
    hcu->supervision_timeout = get_le16(cmdbuf + 8);
   227c4:	f105 0008 	add.w	r0, r5, #8
   227c8:	f7fc f9cc 	bl	1eb64 <get_le16>
   227cc:	f8a4 0168 	strh.w	r0, [r4, #360]	; 0x168
    hcu->min_ce_len = get_le16(cmdbuf + 10);
   227d0:	f105 000a 	add.w	r0, r5, #10
   227d4:	f7fc f9c6 	bl	1eb64 <get_le16>
   227d8:	f8a4 016a 	strh.w	r0, [r4, #362]	; 0x16a
    hcu->max_ce_len = get_le16(cmdbuf + 12);
   227dc:	f105 000c 	add.w	r0, r5, #12
   227e0:	f7fc f9c0 	bl	1eb64 <get_le16>
   227e4:	4605      	mov	r5, r0
   227e6:	f8a4 016c 	strh.w	r0, [r4, #364]	; 0x16c

    /* Check that parameter values are in range */
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   227ea:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
   227ee:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
   227f2:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
   227f6:	f8b4 0162 	ldrh.w	r0, [r4, #354]	; 0x162
   227fa:	f7ff ffa3 	bl	22744 <ble_ll_conn_hci_chk_conn_params>
                                         hcu->conn_itvl_max,
                                         hcu->conn_latency,
                                         hcu->supervision_timeout);

    /* Check valid min/max ce length */
    if (rc || (hcu->min_ce_len > hcu->max_ce_len)) {
   227fe:	b920      	cbnz	r0, 2280a <ble_ll_conn_process_conn_params+0x70>
   22800:	4603      	mov	r3, r0
   22802:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
   22806:	4295      	cmp	r5, r2
   22808:	d203      	bcs.n	22812 <ble_ll_conn_process_conn_params+0x78>
        hcu->handle = 0;
   2280a:	2300      	movs	r3, #0
   2280c:	f8a4 3160 	strh.w	r3, [r4, #352]	; 0x160
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22810:	2312      	movs	r3, #18
    }
    return rc;
}
   22812:	4618      	mov	r0, r3
   22814:	bd38      	pop	{r3, r4, r5, pc}

00022816 <ble_ll_conn_comp_event_send>:
{
   22816:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2281a:	4605      	mov	r5, r0
   2281c:	4688      	mov	r8, r1
   2281e:	4614      	mov	r4, r2
   22820:	4699      	mov	r9, r3
    enabled = ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_COMPLETE);
   22822:	2001      	movs	r0, #1
   22824:	f002 fac0 	bl	24da8 <ble_ll_hci_is_le_event_enabled>
   22828:	4606      	mov	r6, r0
    enh_enabled = ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE);
   2282a:	200a      	movs	r0, #10
   2282c:	f002 fabc 	bl	24da8 <ble_ll_hci_is_le_event_enabled>
   22830:	4607      	mov	r7, r0
    if (enabled || enh_enabled) {
   22832:	b906      	cbnz	r6, 22836 <ble_ll_conn_comp_event_send+0x20>
   22834:	b3d0      	cbz	r0, 228ac <ble_ll_conn_comp_event_send+0x96>
        evbuf[0] = BLE_HCI_EVCODE_LE_META;
   22836:	233e      	movs	r3, #62	; 0x3e
   22838:	7023      	strb	r3, [r4, #0]
        if (enh_enabled) {
   2283a:	b3cf      	cbz	r7, 228b0 <ble_ll_conn_comp_event_send+0x9a>
            evbuf[1] = BLE_HCI_LE_ENH_CONN_COMPLETE_LEN;
   2283c:	231f      	movs	r3, #31
   2283e:	7063      	strb	r3, [r4, #1]
            evbuf[2] = BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE;
   22840:	230a      	movs	r3, #10
   22842:	70a3      	strb	r3, [r4, #2]
        evbuf[3] = status;
   22844:	f884 8003 	strb.w	r8, [r4, #3]
        if (connsm) {
   22848:	2d00      	cmp	r5, #0
   2284a:	d071      	beq.n	22930 <ble_ll_conn_comp_event_send+0x11a>
            put_le16(evbuf + 4, connsm->conn_handle);
   2284c:	88a9      	ldrh	r1, [r5, #4]
   2284e:	1d20      	adds	r0, r4, #4
   22850:	f7fc f967 	bl	1eb22 <put_le16>
            evbuf[6] = connsm->conn_role - 1;
   22854:	79eb      	ldrb	r3, [r5, #7]
   22856:	3b01      	subs	r3, #1
   22858:	71a3      	strb	r3, [r4, #6]
            peer_addr_type = connsm->peer_addr_type;
   2285a:	f895 8092 	ldrb.w	r8, [r5, #146]	; 0x92
            evdata = evbuf + 14;
   2285e:	f104 060e 	add.w	r6, r4, #14
            if (enh_enabled) {
   22862:	bb57      	cbnz	r7, 228ba <ble_ll_conn_comp_event_send+0xa4>
                if (peer_addr_type > BLE_HCI_CONN_PEER_ADDR_RANDOM) {
   22864:	f1b8 0f01 	cmp.w	r8, #1
   22868:	d903      	bls.n	22872 <ble_ll_conn_comp_event_send+0x5c>
                    peer_addr_type -= 2;
   2286a:	f1a8 0802 	sub.w	r8, r8, #2
   2286e:	fa5f f888 	uxtb.w	r8, r8
            evbuf[7] = peer_addr_type;
   22872:	f884 8007 	strb.w	r8, [r4, #7]
            memcpy(evbuf + 8, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   22876:	462b      	mov	r3, r5
   22878:	f853 2f93 	ldr.w	r2, [r3, #147]!
   2287c:	60a2      	str	r2, [r4, #8]
   2287e:	889b      	ldrh	r3, [r3, #4]
   22880:	81a3      	strh	r3, [r4, #12]
            put_le16(evdata, connsm->conn_itvl);
   22882:	f8b5 1068 	ldrh.w	r1, [r5, #104]	; 0x68
   22886:	4630      	mov	r0, r6
   22888:	f7fc f94b 	bl	1eb22 <put_le16>
            put_le16(evdata + 2, connsm->slave_latency);
   2288c:	f8b5 106a 	ldrh.w	r1, [r5, #106]	; 0x6a
   22890:	1cb0      	adds	r0, r6, #2
   22892:	f7fc f946 	bl	1eb22 <put_le16>
            put_le16(evdata + 4, connsm->supervision_tmo);
   22896:	f8b5 106c 	ldrh.w	r1, [r5, #108]	; 0x6c
   2289a:	1d30      	adds	r0, r6, #4
   2289c:	f7fc f941 	bl	1eb22 <put_le16>
            evdata[6] = connsm->master_sca;
   228a0:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   228a4:	71b3      	strb	r3, [r6, #6]
        ble_ll_hci_event_send(evbuf);
   228a6:	4620      	mov	r0, r4
   228a8:	f002 f9e6 	bl	24c78 <ble_ll_hci_event_send>
}
   228ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            evbuf[1] = BLE_HCI_LE_CONN_COMPLETE_LEN;
   228b0:	2313      	movs	r3, #19
   228b2:	7063      	strb	r3, [r4, #1]
            evbuf[2] = BLE_HCI_LE_SUBEV_CONN_COMPLETE;
   228b4:	2301      	movs	r3, #1
   228b6:	70a3      	strb	r3, [r4, #2]
   228b8:	e7c4      	b.n	22844 <ble_ll_conn_comp_event_send+0x2e>
                memset(evdata, 0, 2 * BLE_DEV_ADDR_LEN);
   228ba:	2300      	movs	r3, #0
   228bc:	f8c4 300e 	str.w	r3, [r4, #14]
   228c0:	6073      	str	r3, [r6, #4]
   228c2:	60b3      	str	r3, [r6, #8]
                if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   228c4:	79eb      	ldrb	r3, [r5, #7]
   228c6:	2b01      	cmp	r3, #1
   228c8:	d109      	bne.n	228de <ble_ll_conn_comp_event_send+0xc8>
                    if (connsm->inita_identity_used) {
   228ca:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   228ce:	b97b      	cbnz	r3, 228f0 <ble_ll_conn_comp_event_send+0xda>
                    } else  if (connsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   228d0:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
   228d4:	2b01      	cmp	r3, #1
   228d6:	d90b      	bls.n	228f0 <ble_ll_conn_comp_event_send+0xda>
                        rpa = ble_ll_scan_get_local_rpa();
   228d8:	f004 f92a 	bl	26b30 <ble_ll_scan_get_local_rpa>
   228dc:	e002      	b.n	228e4 <ble_ll_conn_comp_event_send+0xce>
                    rpa = ble_ll_adv_get_local_rpa(advsm);
   228de:	4648      	mov	r0, r9
   228e0:	f7fd fed0 	bl	20684 <ble_ll_adv_get_local_rpa>
                if (rpa) {
   228e4:	b120      	cbz	r0, 228f0 <ble_ll_conn_comp_event_send+0xda>
                    memcpy(evdata, rpa, BLE_DEV_ADDR_LEN);
   228e6:	6803      	ldr	r3, [r0, #0]
   228e8:	f8c4 300e 	str.w	r3, [r4, #14]
   228ec:	8883      	ldrh	r3, [r0, #4]
   228ee:	80b3      	strh	r3, [r6, #4]
                 if (connsm->peer_addr_type < BLE_HCI_CONN_PEER_ADDR_PUBLIC_IDENT
   228f0:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   228f4:	2b01      	cmp	r3, #1
   228f6:	d90f      	bls.n	22918 <ble_ll_conn_comp_event_send+0x102>
                if (peer_addr_type > BLE_HCI_CONN_PEER_ADDR_RANDOM) {
   228f8:	f1b8 0f01 	cmp.w	r8, #1
   228fc:	d909      	bls.n	22912 <ble_ll_conn_comp_event_send+0xfc>
                    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   228fe:	79eb      	ldrb	r3, [r5, #7]
   22900:	2b01      	cmp	r3, #1
   22902:	d012      	beq.n	2292a <ble_ll_conn_comp_event_send+0x114>
                        rpa = ble_ll_adv_get_peer_rpa(advsm);
   22904:	4648      	mov	r0, r9
   22906:	f7fd fed4 	bl	206b2 <ble_ll_adv_get_peer_rpa>
                    memcpy(evdata + 6, rpa, BLE_DEV_ADDR_LEN);
   2290a:	6803      	ldr	r3, [r0, #0]
   2290c:	6163      	str	r3, [r4, #20]
   2290e:	8883      	ldrh	r3, [r0, #4]
   22910:	8323      	strh	r3, [r4, #24]
                evdata += 12;
   22912:	f104 061a 	add.w	r6, r4, #26
   22916:	e7ac      	b.n	22872 <ble_ll_conn_comp_event_send+0x5c>
                         && (connsm->rpa_index > -1)) {
   22918:	f995 3009 	ldrsb.w	r3, [r5, #9]
   2291c:	2b00      	cmp	r3, #0
   2291e:	dbeb      	blt.n	228f8 <ble_ll_conn_comp_event_send+0xe2>
                     peer_addr_type += 2;
   22920:	f108 0802 	add.w	r8, r8, #2
   22924:	fa5f f888 	uxtb.w	r8, r8
   22928:	e7e6      	b.n	228f8 <ble_ll_conn_comp_event_send+0xe2>
                        rpa = ble_ll_scan_get_peer_rpa();
   2292a:	f004 f8fd 	bl	26b28 <ble_ll_scan_get_peer_rpa>
   2292e:	e7ec      	b.n	2290a <ble_ll_conn_comp_event_send+0xf4>
            memset(&evbuf[4], 0, evbuf[1] - 2);
   22930:	7862      	ldrb	r2, [r4, #1]
   22932:	3a02      	subs	r2, #2
   22934:	2100      	movs	r1, #0
   22936:	1d20      	adds	r0, r4, #4
   22938:	f7ef fded 	bl	12516 <memset>
   2293c:	e7b3      	b.n	228a6 <ble_ll_conn_comp_event_send+0x90>
	...

00022940 <ble_ll_conn_hci_cancel_conn_complete_event>:
/* this is called from same context after cmd complete is send so it is
 * safe to use g_ble_ll_conn_comp_ev
 */
static void
ble_ll_conn_hci_cancel_conn_complete_event(void)
{
   22940:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(g_ble_ll_conn_comp_ev);
   22942:	4b09      	ldr	r3, [pc, #36]	; (22968 <ble_ll_conn_hci_cancel_conn_complete_event+0x28>)
   22944:	681a      	ldr	r2, [r3, #0]
   22946:	b142      	cbz	r2, 2295a <ble_ll_conn_hci_cancel_conn_complete_event+0x1a>

    ble_ll_conn_comp_event_send(NULL, BLE_ERR_UNK_CONN_ID,
   22948:	2300      	movs	r3, #0
   2294a:	2102      	movs	r1, #2
   2294c:	4618      	mov	r0, r3
   2294e:	f7ff ff62 	bl	22816 <ble_ll_conn_comp_event_send>
                                g_ble_ll_conn_comp_ev, NULL);
    g_ble_ll_conn_comp_ev = NULL;
   22952:	4b05      	ldr	r3, [pc, #20]	; (22968 <ble_ll_conn_hci_cancel_conn_complete_event+0x28>)
   22954:	2200      	movs	r2, #0
   22956:	601a      	str	r2, [r3, #0]
}
   22958:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(g_ble_ll_conn_comp_ev);
   2295a:	2300      	movs	r3, #0
   2295c:	461a      	mov	r2, r3
   2295e:	4619      	mov	r1, r3
   22960:	4618      	mov	r0, r3
   22962:	f7ed fe3b 	bl	105dc <__assert_func>
   22966:	bf00      	nop
   22968:	20003f84 	.word	0x20003f84

0002296c <ble_ll_conn_num_comp_pkts_event_send>:
{
   2296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (connsm == NULL) {
   22970:	b338      	cbz	r0, 229c2 <ble_ll_conn_num_comp_pkts_event_send+0x56>
   22972:	4604      	mov	r4, r0
    return os_time_get();
   22974:	f7ef fbe2 	bl	1213c <os_time_get>
    if ((ble_npl_stime_t)(ble_npl_time_get() - g_ble_ll_last_num_comp_pkt_evt) <
   22978:	4b3b      	ldr	r3, [pc, #236]	; (22a68 <ble_ll_conn_num_comp_pkts_event_send+0xfc>)
   2297a:	681b      	ldr	r3, [r3, #0]
   2297c:	1ac0      	subs	r0, r0, r3
   2297e:	28ff      	cmp	r0, #255	; 0xff
   22980:	dc1f      	bgt.n	229c2 <ble_ll_conn_num_comp_pkts_event_send+0x56>
        if (connsm->completed_pkts) {
   22982:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   22986:	2b00      	cmp	r3, #0
   22988:	d067      	beq.n	22a5a <ble_ll_conn_num_comp_pkts_event_send+0xee>
            evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   2298a:	2002      	movs	r0, #2
   2298c:	f7fa fed4 	bl	1d738 <ble_hci_trans_buf_alloc>
            if (evbuf) {
   22990:	4605      	mov	r5, r0
   22992:	2800      	cmp	r0, #0
   22994:	d061      	beq.n	22a5a <ble_ll_conn_num_comp_pkts_event_send+0xee>
                evbuf[0] = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   22996:	2313      	movs	r3, #19
   22998:	7003      	strb	r3, [r0, #0]
                evbuf[1] = (2 * sizeof(uint16_t)) + 1;
   2299a:	2305      	movs	r3, #5
   2299c:	7043      	strb	r3, [r0, #1]
                evbuf[2] = 1;
   2299e:	2301      	movs	r3, #1
   229a0:	7083      	strb	r3, [r0, #2]
                put_le16(evbuf + 3, connsm->conn_handle);
   229a2:	88a1      	ldrh	r1, [r4, #4]
   229a4:	3003      	adds	r0, #3
   229a6:	f7fc f8bc 	bl	1eb22 <put_le16>
                put_le16(evbuf + 5, connsm->completed_pkts);
   229aa:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   229ae:	1d68      	adds	r0, r5, #5
   229b0:	f7fc f8b7 	bl	1eb22 <put_le16>
                ble_ll_hci_event_send(evbuf);
   229b4:	4628      	mov	r0, r5
   229b6:	f002 f95f 	bl	24c78 <ble_ll_hci_event_send>
                connsm->completed_pkts = 0;
   229ba:	2300      	movs	r3, #0
   229bc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
   229c0:	e04b      	b.n	22a5a <ble_ll_conn_num_comp_pkts_event_send+0xee>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   229c2:	4b2a      	ldr	r3, [pc, #168]	; (22a6c <ble_ll_conn_num_comp_pkts_event_send+0x100>)
   229c4:	681c      	ldr	r4, [r3, #0]
    handles = 0;
   229c6:	2500      	movs	r5, #0
    handle_ptr = NULL;
   229c8:	462e      	mov	r6, r5
    evbuf = NULL;
   229ca:	462f      	mov	r7, r5
    event_sent = 0;
   229cc:	46a8      	mov	r8, r5
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   229ce:	e013      	b.n	229f8 <ble_ll_conn_num_comp_pkts_event_send+0x8c>
            if (!evbuf) {
   229d0:	b1ff      	cbz	r7, 22a12 <ble_ll_conn_num_comp_pkts_event_send+0xa6>
            put_le16(handle_ptr, connsm->conn_handle);
   229d2:	88a1      	ldrh	r1, [r4, #4]
   229d4:	4630      	mov	r0, r6
   229d6:	f7fc f8a4 	bl	1eb22 <put_le16>
            put_le16(handle_ptr + 2, connsm->completed_pkts);
   229da:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   229de:	1cb0      	adds	r0, r6, #2
   229e0:	f7fc f89f 	bl	1eb22 <put_le16>
            connsm->completed_pkts = 0;
   229e4:	2300      	movs	r3, #0
   229e6:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
            handle_ptr += (2 * sizeof(uint16_t));
   229ea:	3604      	adds	r6, #4
            ++handles;
   229ec:	3501      	adds	r5, #1
   229ee:	b2ed      	uxtb	r5, r5
            if (handles == max_handles) {
   229f0:	2d10      	cmp	r5, #16
   229f2:	d016      	beq.n	22a22 <ble_ll_conn_num_comp_pkts_event_send+0xb6>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   229f4:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   229f8:	b30c      	cbz	r4, 22a3e <ble_ll_conn_num_comp_pkts_event_send+0xd2>
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   229fa:	79a3      	ldrb	r3, [r4, #6]
   229fc:	2b00      	cmp	r3, #0
   229fe:	d0f9      	beq.n	229f4 <ble_ll_conn_num_comp_pkts_event_send+0x88>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   22a00:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   22a04:	2b00      	cmp	r3, #0
   22a06:	d1e3      	bne.n	229d0 <ble_ll_conn_num_comp_pkts_event_send+0x64>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   22a08:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   22a0c:	2b00      	cmp	r3, #0
   22a0e:	d1df      	bne.n	229d0 <ble_ll_conn_num_comp_pkts_event_send+0x64>
   22a10:	e7f0      	b.n	229f4 <ble_ll_conn_num_comp_pkts_event_send+0x88>
                evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22a12:	2002      	movs	r0, #2
   22a14:	f7fa fe90 	bl	1d738 <ble_hci_trans_buf_alloc>
                if (!evbuf) {
   22a18:	4607      	mov	r7, r0
   22a1a:	b180      	cbz	r0, 22a3e <ble_ll_conn_num_comp_pkts_event_send+0xd2>
                handle_ptr = evbuf + 3;
   22a1c:	1cc6      	adds	r6, r0, #3
                handles = 0;
   22a1e:	2500      	movs	r5, #0
   22a20:	e7d7      	b.n	229d2 <ble_ll_conn_num_comp_pkts_event_send+0x66>
                evbuf[0] = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   22a22:	2313      	movs	r3, #19
   22a24:	703b      	strb	r3, [r7, #0]
                evbuf[1] = (handles * 2 * sizeof(uint16_t)) + 1;
   22a26:	00ab      	lsls	r3, r5, #2
   22a28:	3301      	adds	r3, #1
   22a2a:	707b      	strb	r3, [r7, #1]
                evbuf[2] = handles;
   22a2c:	70bd      	strb	r5, [r7, #2]
                ble_ll_hci_event_send(evbuf);
   22a2e:	4638      	mov	r0, r7
   22a30:	f002 f922 	bl	24c78 <ble_ll_hci_event_send>
                handles = 0;
   22a34:	2500      	movs	r5, #0
                evbuf = NULL;
   22a36:	462f      	mov	r7, r5
                event_sent = 1;
   22a38:	f04f 0801 	mov.w	r8, #1
   22a3c:	e7da      	b.n	229f4 <ble_ll_conn_num_comp_pkts_event_send+0x88>
    if (evbuf) {
   22a3e:	b177      	cbz	r7, 22a5e <ble_ll_conn_num_comp_pkts_event_send+0xf2>
        evbuf[0] = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   22a40:	2313      	movs	r3, #19
   22a42:	703b      	strb	r3, [r7, #0]
        evbuf[1] = (handles * 2 * sizeof(uint16_t)) + 1;
   22a44:	00ab      	lsls	r3, r5, #2
   22a46:	3301      	adds	r3, #1
   22a48:	707b      	strb	r3, [r7, #1]
        evbuf[2] = handles;
   22a4a:	70bd      	strb	r5, [r7, #2]
        ble_ll_hci_event_send(evbuf);
   22a4c:	4638      	mov	r0, r7
   22a4e:	f002 f913 	bl	24c78 <ble_ll_hci_event_send>
   22a52:	f7ef fb73 	bl	1213c <os_time_get>
        g_ble_ll_last_num_comp_pkt_evt = ble_npl_time_get();
   22a56:	4b04      	ldr	r3, [pc, #16]	; (22a68 <ble_ll_conn_num_comp_pkts_event_send+0xfc>)
   22a58:	6018      	str	r0, [r3, #0]
}
   22a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (event_sent) {
   22a5e:	f1b8 0f00 	cmp.w	r8, #0
   22a62:	d1f6      	bne.n	22a52 <ble_ll_conn_num_comp_pkts_event_send+0xe6>
   22a64:	e7f9      	b.n	22a5a <ble_ll_conn_num_comp_pkts_event_send+0xee>
   22a66:	bf00      	nop
   22a68:	20003638 	.word	0x20003638
   22a6c:	20004130 	.word	0x20004130

00022a70 <ble_ll_auth_pyld_tmo_event_send>:
{
   22a70:	b538      	push	{r3, r4, r5, lr}
   22a72:	4604      	mov	r4, r0
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_AUTH_PYLD_TMO)) {
   22a74:	2057      	movs	r0, #87	; 0x57
   22a76:	f002 f9b3 	bl	24de0 <ble_ll_hci_is_event_enabled>
   22a7a:	b900      	cbnz	r0, 22a7e <ble_ll_auth_pyld_tmo_event_send+0xe>
}
   22a7c:	bd38      	pop	{r3, r4, r5, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22a7e:	2002      	movs	r0, #2
   22a80:	f7fa fe5a 	bl	1d738 <ble_hci_trans_buf_alloc>
        if (evbuf) {
   22a84:	4605      	mov	r5, r0
   22a86:	2800      	cmp	r0, #0
   22a88:	d0f8      	beq.n	22a7c <ble_ll_auth_pyld_tmo_event_send+0xc>
            evbuf[0] = BLE_HCI_EVCODE_AUTH_PYLD_TMO;
   22a8a:	2357      	movs	r3, #87	; 0x57
   22a8c:	7003      	strb	r3, [r0, #0]
            evbuf[1] = sizeof(uint16_t);
   22a8e:	2302      	movs	r3, #2
   22a90:	7043      	strb	r3, [r0, #1]
            put_le16(evbuf + 2, connsm->conn_handle);
   22a92:	88a1      	ldrh	r1, [r4, #4]
   22a94:	4418      	add	r0, r3
   22a96:	f7fc f844 	bl	1eb22 <put_le16>
            ble_ll_hci_event_send(evbuf);
   22a9a:	4628      	mov	r0, r5
   22a9c:	f002 f8ec 	bl	24c78 <ble_ll_hci_event_send>
}
   22aa0:	e7ec      	b.n	22a7c <ble_ll_auth_pyld_tmo_event_send+0xc>

00022aa2 <ble_ll_disconn_comp_event_send>:
{
   22aa2:	b570      	push	{r4, r5, r6, lr}
   22aa4:	4606      	mov	r6, r0
   22aa6:	460d      	mov	r5, r1
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DISCONN_CMP)) {
   22aa8:	2005      	movs	r0, #5
   22aaa:	f002 f999 	bl	24de0 <ble_ll_hci_is_event_enabled>
   22aae:	b900      	cbnz	r0, 22ab2 <ble_ll_disconn_comp_event_send+0x10>
}
   22ab0:	bd70      	pop	{r4, r5, r6, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22ab2:	2002      	movs	r0, #2
   22ab4:	f7fa fe40 	bl	1d738 <ble_hci_trans_buf_alloc>
        if (evbuf) {
   22ab8:	4604      	mov	r4, r0
   22aba:	2800      	cmp	r0, #0
   22abc:	d0f8      	beq.n	22ab0 <ble_ll_disconn_comp_event_send+0xe>
            evbuf[0] = BLE_HCI_EVCODE_DISCONN_CMP;
   22abe:	2305      	movs	r3, #5
   22ac0:	7003      	strb	r3, [r0, #0]
            evbuf[1] = BLE_HCI_EVENT_DISCONN_COMPLETE_LEN;
   22ac2:	2304      	movs	r3, #4
   22ac4:	7043      	strb	r3, [r0, #1]
            evbuf[2] = BLE_ERR_SUCCESS;
   22ac6:	2300      	movs	r3, #0
   22ac8:	7083      	strb	r3, [r0, #2]
            put_le16(evbuf + 3, connsm->conn_handle);
   22aca:	88b1      	ldrh	r1, [r6, #4]
   22acc:	3003      	adds	r0, #3
   22ace:	f7fc f828 	bl	1eb22 <put_le16>
            evbuf[5] = reason;
   22ad2:	7165      	strb	r5, [r4, #5]
            ble_ll_hci_event_send(evbuf);
   22ad4:	4620      	mov	r0, r4
   22ad6:	f002 f8cf 	bl	24c78 <ble_ll_hci_event_send>
}
   22ada:	e7e9      	b.n	22ab0 <ble_ll_disconn_comp_event_send+0xe>

00022adc <ble_ll_conn_create>:
    if (g_ble_ll_conn_create_sm) {
   22adc:	4b58      	ldr	r3, [pc, #352]	; (22c40 <ble_ll_conn_create+0x164>)
   22ade:	681b      	ldr	r3, [r3, #0]
   22ae0:	b113      	cbz	r3, 22ae8 <ble_ll_conn_create+0xc>
        return BLE_ERR_CMD_DISALLOWED;
   22ae2:	230c      	movs	r3, #12
}
   22ae4:	4618      	mov	r0, r3
   22ae6:	4770      	bx	lr
{
   22ae8:	b510      	push	{r4, lr}
   22aea:	b088      	sub	sp, #32
   22aec:	4604      	mov	r4, r0
    if (ble_ll_scan_enabled()) {
   22aee:	f004 f815 	bl	26b1c <ble_ll_scan_enabled>
   22af2:	2800      	cmp	r0, #0
   22af4:	f040 8091 	bne.w	22c1a <ble_ll_conn_create+0x13e>
    hcc->scan_itvl = get_le16(cmdbuf);
   22af8:	4620      	mov	r0, r4
   22afa:	f7fc f833 	bl	1eb64 <get_le16>
   22afe:	f8ad 0004 	strh.w	r0, [sp, #4]
    hcc->scan_window = get_le16(cmdbuf + 2);
   22b02:	1ca0      	adds	r0, r4, #2
   22b04:	f7fc f82e 	bl	1eb64 <get_le16>
   22b08:	4601      	mov	r1, r0
   22b0a:	f8ad 0006 	strh.w	r0, [sp, #6]
    rc = ble_ll_conn_hci_chk_scan_params(hcc->scan_itvl, hcc->scan_window);
   22b0e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   22b12:	f7ff fdeb 	bl	226ec <ble_ll_conn_hci_chk_scan_params>
    if (rc) {
   22b16:	2800      	cmp	r0, #0
   22b18:	f040 8083 	bne.w	22c22 <ble_ll_conn_create+0x146>
    hcc->filter_policy = cmdbuf[4];
   22b1c:	7923      	ldrb	r3, [r4, #4]
   22b1e:	f88d 3008 	strb.w	r3, [sp, #8]
    if (hcc->filter_policy > BLE_HCI_INITIATOR_FILT_POLICY_MAX) {
   22b22:	2b01      	cmp	r3, #1
   22b24:	d87f      	bhi.n	22c26 <ble_ll_conn_create+0x14a>
    if (hcc->filter_policy == 0) {
   22b26:	b963      	cbnz	r3, 22b42 <ble_ll_conn_create+0x66>
        hcc->peer_addr_type = cmdbuf[5];
   22b28:	7963      	ldrb	r3, [r4, #5]
   22b2a:	f88d 3009 	strb.w	r3, [sp, #9]
        if (hcc->peer_addr_type > BLE_HCI_CONN_PEER_ADDR_MAX) {
   22b2e:	2b03      	cmp	r3, #3
   22b30:	d87b      	bhi.n	22c2a <ble_ll_conn_create+0x14e>
        memcpy(&hcc->peer_addr, cmdbuf + 6, BLE_DEV_ADDR_LEN);
   22b32:	4623      	mov	r3, r4
   22b34:	f853 2f06 	ldr.w	r2, [r3, #6]!
   22b38:	f8cd 200a 	str.w	r2, [sp, #10]
   22b3c:	889b      	ldrh	r3, [r3, #4]
   22b3e:	f8ad 300e 	strh.w	r3, [sp, #14]
    hcc->own_addr_type = cmdbuf[12];
   22b42:	7b23      	ldrb	r3, [r4, #12]
   22b44:	f88d 3010 	strb.w	r3, [sp, #16]
    if (hcc->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   22b48:	2b03      	cmp	r3, #3
   22b4a:	d870      	bhi.n	22c2e <ble_ll_conn_create+0x152>
    hcc->conn_itvl_min = get_le16(cmdbuf + 13);
   22b4c:	f104 000d 	add.w	r0, r4, #13
   22b50:	f7fc f808 	bl	1eb64 <get_le16>
   22b54:	f8ad 0012 	strh.w	r0, [sp, #18]
    hcc->conn_itvl_max = get_le16(cmdbuf + 15);
   22b58:	f104 000f 	add.w	r0, r4, #15
   22b5c:	f7fc f802 	bl	1eb64 <get_le16>
   22b60:	f8ad 0014 	strh.w	r0, [sp, #20]
    hcc->conn_latency = get_le16(cmdbuf + 17);
   22b64:	f104 0011 	add.w	r0, r4, #17
   22b68:	f7fb fffc 	bl	1eb64 <get_le16>
   22b6c:	f8ad 0016 	strh.w	r0, [sp, #22]
    hcc->supervision_timeout = get_le16(cmdbuf + 19);
   22b70:	f104 0013 	add.w	r0, r4, #19
   22b74:	f7fb fff6 	bl	1eb64 <get_le16>
   22b78:	4603      	mov	r3, r0
   22b7a:	f8ad 0018 	strh.w	r0, [sp, #24]
    rc = ble_ll_conn_hci_chk_conn_params(hcc->conn_itvl_min,
   22b7e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   22b82:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   22b86:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   22b8a:	f7ff fddb 	bl	22744 <ble_ll_conn_hci_chk_conn_params>
    if (rc) {
   22b8e:	4603      	mov	r3, r0
   22b90:	2800      	cmp	r0, #0
   22b92:	d143      	bne.n	22c1c <ble_ll_conn_create+0x140>
    hcc->min_ce_len = get_le16(cmdbuf + 21);
   22b94:	f104 0015 	add.w	r0, r4, #21
   22b98:	f7fb ffe4 	bl	1eb64 <get_le16>
   22b9c:	f8ad 001a 	strh.w	r0, [sp, #26]
    hcc->max_ce_len = get_le16(cmdbuf + 23);
   22ba0:	f104 0017 	add.w	r0, r4, #23
   22ba4:	f7fb ffde 	bl	1eb64 <get_le16>
   22ba8:	f8ad 001c 	strh.w	r0, [sp, #28]
    if (hcc->min_ce_len > hcc->max_ce_len) {
   22bac:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   22bb0:	4298      	cmp	r0, r3
   22bb2:	d33e      	bcc.n	22c32 <ble_ll_conn_create+0x156>
    if (ble_ll_init_alloc_conn_comp_ev()) {
   22bb4:	f7ff fdb2 	bl	2271c <ble_ll_init_alloc_conn_comp_ev>
   22bb8:	2800      	cmp	r0, #0
   22bba:	d13c      	bne.n	22c36 <ble_ll_conn_create+0x15a>
    connsm = ble_ll_conn_sm_get();
   22bbc:	f7fe fb5c 	bl	21278 <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   22bc0:	4604      	mov	r4, r0
   22bc2:	2800      	cmp	r0, #0
   22bc4:	d039      	beq.n	22c3a <ble_ll_conn_create+0x15e>
    ble_ll_conn_master_init(connsm, hcc);
   22bc6:	a901      	add	r1, sp, #4
   22bc8:	f7fe fd61 	bl	2168e <ble_ll_conn_master_init>
    ble_ll_conn_sm_new(connsm);
   22bcc:	4620      	mov	r0, r4
   22bce:	f7fe fd91 	bl	216f4 <ble_ll_conn_sm_new>
    rc = ble_ll_scan_initiator_start(hcc, &connsm->scansm);
   22bd2:	f504 71ca 	add.w	r1, r4, #404	; 0x194
   22bd6:	a801      	add	r0, sp, #4
   22bd8:	f003 ff7c 	bl	26ad4 <ble_ll_scan_initiator_start>
    if (rc) {
   22bdc:	4603      	mov	r3, r0
   22bde:	b1c8      	cbz	r0, 22c14 <ble_ll_conn_create+0x138>
        SLIST_REMOVE(&g_ble_ll_conn_active_list,connsm,ble_ll_conn_sm,act_sle);
   22be0:	4a18      	ldr	r2, [pc, #96]	; (22c44 <ble_ll_conn_create+0x168>)
   22be2:	6811      	ldr	r1, [r2, #0]
   22be4:	42a1      	cmp	r1, r4
   22be6:	d104      	bne.n	22bf2 <ble_ll_conn_create+0x116>
   22be8:	f8d1 10b8 	ldr.w	r1, [r1, #184]	; 0xb8
   22bec:	6011      	str	r1, [r2, #0]
   22bee:	e008      	b.n	22c02 <ble_ll_conn_create+0x126>
   22bf0:	4611      	mov	r1, r2
   22bf2:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
   22bf6:	42a2      	cmp	r2, r4
   22bf8:	d1fa      	bne.n	22bf0 <ble_ll_conn_create+0x114>
   22bfa:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   22bfe:	f8c1 20b8 	str.w	r2, [r1, #184]	; 0xb8
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   22c02:	2200      	movs	r2, #0
   22c04:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   22c08:	4a0f      	ldr	r2, [pc, #60]	; (22c48 <ble_ll_conn_create+0x16c>)
   22c0a:	6851      	ldr	r1, [r2, #4]
   22c0c:	600c      	str	r4, [r1, #0]
   22c0e:	34b8      	adds	r4, #184	; 0xb8
   22c10:	6054      	str	r4, [r2, #4]
   22c12:	e003      	b.n	22c1c <ble_ll_conn_create+0x140>
        g_ble_ll_conn_create_sm = connsm;
   22c14:	4a0a      	ldr	r2, [pc, #40]	; (22c40 <ble_ll_conn_create+0x164>)
   22c16:	6014      	str	r4, [r2, #0]
   22c18:	e000      	b.n	22c1c <ble_ll_conn_create+0x140>
        return BLE_ERR_CMD_DISALLOWED;
   22c1a:	230c      	movs	r3, #12
}
   22c1c:	4618      	mov	r0, r3
   22c1e:	b008      	add	sp, #32
   22c20:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22c22:	2312      	movs	r3, #18
   22c24:	e7fa      	b.n	22c1c <ble_ll_conn_create+0x140>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22c26:	2312      	movs	r3, #18
   22c28:	e7f8      	b.n	22c1c <ble_ll_conn_create+0x140>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   22c2a:	2312      	movs	r3, #18
   22c2c:	e7f6      	b.n	22c1c <ble_ll_conn_create+0x140>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22c2e:	2312      	movs	r3, #18
   22c30:	e7f4      	b.n	22c1c <ble_ll_conn_create+0x140>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22c32:	2312      	movs	r3, #18
   22c34:	e7f2      	b.n	22c1c <ble_ll_conn_create+0x140>
        return BLE_ERR_MEM_CAPACITY;
   22c36:	2307      	movs	r3, #7
   22c38:	e7f0      	b.n	22c1c <ble_ll_conn_create+0x140>
        return BLE_ERR_CONN_LIMIT;
   22c3a:	2309      	movs	r3, #9
   22c3c:	e7ee      	b.n	22c1c <ble_ll_conn_create+0x140>
   22c3e:	bf00      	nop
   22c40:	20003f90 	.word	0x20003f90
   22c44:	20004130 	.word	0x20004130
   22c48:	20003f88 	.word	0x20003f88

00022c4c <ble_ll_conn_hci_read_rem_features>:
{
   22c4c:	b510      	push	{r4, lr}
    handle = get_le16(cmdbuf);
   22c4e:	f7fb ff89 	bl	1eb64 <get_le16>
    connsm = ble_ll_conn_find_active_conn(handle);
   22c52:	f7fe faff 	bl	21254 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   22c56:	b300      	cbz	r0, 22c9a <ble_ll_conn_hci_read_rem_features+0x4e>
   22c58:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   22c5a:	78c3      	ldrb	r3, [r0, #3]
   22c5c:	f013 0f10 	tst.w	r3, #16
   22c60:	d11d      	bne.n	22c9e <ble_ll_conn_hci_read_rem_features+0x52>
    if (!connsm->csmflags.cfbit.rxd_features &&
   22c62:	f013 0f08 	tst.w	r3, #8
   22c66:	d10b      	bne.n	22c80 <ble_ll_conn_hci_read_rem_features+0x34>
                !IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   22c68:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    if (!connsm->csmflags.cfbit.rxd_features &&
   22c6c:	f013 0f08 	tst.w	r3, #8
   22c70:	d106      	bne.n	22c80 <ble_ll_conn_hci_read_rem_features+0x34>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   22c72:	79c3      	ldrb	r3, [r0, #7]
   22c74:	2b02      	cmp	r3, #2
   22c76:	d009      	beq.n	22c8c <ble_ll_conn_hci_read_rem_features+0x40>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   22c78:	2103      	movs	r1, #3
   22c7a:	4620      	mov	r0, r4
   22c7c:	f000 ff9a 	bl	23bb4 <ble_ll_ctrl_proc_start>
    connsm->csmflags.cfbit.pending_hci_rd_features = 1;
   22c80:	78e3      	ldrb	r3, [r4, #3]
   22c82:	f043 0310 	orr.w	r3, r3, #16
   22c86:	70e3      	strb	r3, [r4, #3]
    return BLE_ERR_SUCCESS;
   22c88:	2000      	movs	r0, #0
}
   22c8a:	bd10      	pop	{r4, pc}
            !(ble_ll_read_supp_features() & BLE_LL_FEAT_SLAVE_INIT)) {
   22c8c:	f7fc fbc6 	bl	1f41c <ble_ll_read_supp_features>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   22c90:	f010 0f08 	tst.w	r0, #8
   22c94:	d1f0      	bne.n	22c78 <ble_ll_conn_hci_read_rem_features+0x2c>
                return BLE_ERR_CMD_DISALLOWED;
   22c96:	200c      	movs	r0, #12
   22c98:	e7f7      	b.n	22c8a <ble_ll_conn_hci_read_rem_features+0x3e>
        return BLE_ERR_UNK_CONN_ID;
   22c9a:	2002      	movs	r0, #2
   22c9c:	e7f5      	b.n	22c8a <ble_ll_conn_hci_read_rem_features+0x3e>
        return BLE_ERR_CMD_DISALLOWED;
   22c9e:	200c      	movs	r0, #12
   22ca0:	e7f3      	b.n	22c8a <ble_ll_conn_hci_read_rem_features+0x3e>

00022ca2 <ble_ll_conn_hci_update>:
{
   22ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22ca4:	4605      	mov	r5, r0
    handle = get_le16(cmdbuf);
   22ca6:	f7fb ff5d 	bl	1eb64 <get_le16>
   22caa:	4606      	mov	r6, r0
    connsm = ble_ll_conn_find_active_conn(handle);
   22cac:	f7fe fad2 	bl	21254 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   22cb0:	2800      	cmp	r0, #0
   22cb2:	d060      	beq.n	22d76 <ble_ll_conn_hci_update+0xd4>
   22cb4:	4604      	mov	r4, r0
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ) ||
   22cb6:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   22cba:	f013 0f41 	tst.w	r3, #65	; 0x41
   22cbe:	d15c      	bne.n	22d7a <ble_ll_conn_hci_update+0xd8>
    if ((connsm->conn_features & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   22cc0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   22cc4:	f013 0f02 	tst.w	r3, #2
   22cc8:	d104      	bne.n	22cd4 <ble_ll_conn_hci_update+0x32>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   22cca:	79c3      	ldrb	r3, [r0, #7]
   22ccc:	2b02      	cmp	r3, #2
   22cce:	d057      	beq.n	22d80 <ble_ll_conn_hci_update+0xde>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_UPDATE;
   22cd0:	2700      	movs	r7, #0
   22cd2:	e000      	b.n	22cd6 <ble_ll_conn_hci_update+0x34>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   22cd4:	2706      	movs	r7, #6
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   22cd6:	7823      	ldrb	r3, [r4, #0]
   22cd8:	f013 0f40 	tst.w	r3, #64	; 0x40
   22cdc:	d00c      	beq.n	22cf8 <ble_ll_conn_hci_update+0x56>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   22cde:	79e3      	ldrb	r3, [r4, #7]
   22ce0:	2b02      	cmp	r3, #2
   22ce2:	d04f      	beq.n	22d84 <ble_ll_conn_hci_update+0xe2>
            connsm->csmflags.cfbit.awaiting_host_reply = 0;
   22ce4:	7823      	ldrb	r3, [r4, #0]
   22ce6:	f36f 1386 	bfc	r3, #6, #1
   22cea:	7023      	strb	r3, [r4, #0]
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   22cec:	2223      	movs	r2, #35	; 0x23
   22cee:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   22cf2:	4620      	mov	r0, r4
   22cf4:	f001 fb12 	bl	2431c <ble_ll_ctrl_reject_ind_send>
    if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   22cf8:	7863      	ldrb	r3, [r4, #1]
   22cfa:	f013 0f10 	tst.w	r3, #16
   22cfe:	d002      	beq.n	22d06 <ble_ll_conn_hci_update+0x64>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   22d00:	79e3      	ldrb	r3, [r4, #7]
   22d02:	2b02      	cmp	r3, #2
   22d04:	d040      	beq.n	22d88 <ble_ll_conn_hci_update+0xe6>
    hcu->handle = handle;
   22d06:	f8a4 6160 	strh.w	r6, [r4, #352]	; 0x160
    hcu->conn_itvl_min = get_le16(cmdbuf + 2);
   22d0a:	1ca8      	adds	r0, r5, #2
   22d0c:	f7fb ff2a 	bl	1eb64 <get_le16>
   22d10:	f8a4 0162 	strh.w	r0, [r4, #354]	; 0x162
    hcu->conn_itvl_max = get_le16(cmdbuf + 4);
   22d14:	1d28      	adds	r0, r5, #4
   22d16:	f7fb ff25 	bl	1eb64 <get_le16>
   22d1a:	f8a4 0164 	strh.w	r0, [r4, #356]	; 0x164
    hcu->conn_latency = get_le16(cmdbuf + 6);
   22d1e:	1da8      	adds	r0, r5, #6
   22d20:	f7fb ff20 	bl	1eb64 <get_le16>
   22d24:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
    hcu->supervision_timeout = get_le16(cmdbuf + 8);
   22d28:	f105 0008 	add.w	r0, r5, #8
   22d2c:	f7fb ff1a 	bl	1eb64 <get_le16>
   22d30:	f8a4 0168 	strh.w	r0, [r4, #360]	; 0x168
    hcu->min_ce_len = get_le16(cmdbuf + 10);
   22d34:	f105 000a 	add.w	r0, r5, #10
   22d38:	f7fb ff14 	bl	1eb64 <get_le16>
   22d3c:	f8a4 016a 	strh.w	r0, [r4, #362]	; 0x16a
    hcu->max_ce_len = get_le16(cmdbuf + 12);
   22d40:	f105 000c 	add.w	r0, r5, #12
   22d44:	f7fb ff0e 	bl	1eb64 <get_le16>
   22d48:	f8a4 016c 	strh.w	r0, [r4, #364]	; 0x16c
    if (hcu->min_ce_len > hcu->max_ce_len) {
   22d4c:	f8b4 316a 	ldrh.w	r3, [r4, #362]	; 0x16a
   22d50:	4298      	cmp	r0, r3
   22d52:	d31b      	bcc.n	22d8c <ble_ll_conn_hci_update+0xea>
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   22d54:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
   22d58:	f8b4 2166 	ldrh.w	r2, [r4, #358]	; 0x166
   22d5c:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
   22d60:	f8b4 0162 	ldrh.w	r0, [r4, #354]	; 0x162
   22d64:	f7ff fcee 	bl	22744 <ble_ll_conn_hci_chk_conn_params>
    if (!rc) {
   22d68:	4605      	mov	r5, r0
   22d6a:	b938      	cbnz	r0, 22d7c <ble_ll_conn_hci_update+0xda>
        ble_ll_ctrl_proc_start(connsm, ctrl_proc);
   22d6c:	4639      	mov	r1, r7
   22d6e:	4620      	mov	r0, r4
   22d70:	f000 ff20 	bl	23bb4 <ble_ll_ctrl_proc_start>
   22d74:	e002      	b.n	22d7c <ble_ll_conn_hci_update+0xda>
        return BLE_ERR_UNK_CONN_ID;
   22d76:	2502      	movs	r5, #2
   22d78:	e000      	b.n	22d7c <ble_ll_conn_hci_update+0xda>
        return BLE_ERR_CMD_DISALLOWED;
   22d7a:	250c      	movs	r5, #12
}
   22d7c:	4628      	mov	r0, r5
   22d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return BLE_ERR_UNSUPP_REM_FEATURE;
   22d80:	251a      	movs	r5, #26
   22d82:	e7fb      	b.n	22d7c <ble_ll_conn_hci_update+0xda>
            return BLE_ERR_LMP_COLLISION;
   22d84:	2523      	movs	r5, #35	; 0x23
   22d86:	e7f9      	b.n	22d7c <ble_ll_conn_hci_update+0xda>
            return BLE_ERR_DIFF_TRANS_COLL;
   22d88:	252a      	movs	r5, #42	; 0x2a
   22d8a:	e7f7      	b.n	22d7c <ble_ll_conn_hci_update+0xda>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22d8c:	2512      	movs	r5, #18
   22d8e:	e7f5      	b.n	22d7c <ble_ll_conn_hci_update+0xda>

00022d90 <ble_ll_conn_hci_param_reply>:
{
   22d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22d94:	4605      	mov	r5, r0
   22d96:	4688      	mov	r8, r1
   22d98:	4617      	mov	r7, r2
   22d9a:	461e      	mov	r6, r3
    handle = get_le16(cmdbuf);
   22d9c:	f7fb fee2 	bl	1eb64 <get_le16>
   22da0:	4604      	mov	r4, r0
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   22da2:	f7fc fb3b 	bl	1f41c <ble_ll_read_supp_features>
   22da6:	f010 0f02 	tst.w	r0, #2
   22daa:	d109      	bne.n	22dc0 <ble_ll_conn_hci_param_reply+0x30>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   22dac:	2501      	movs	r5, #1
    put_le16(rspbuf, handle);
   22dae:	4621      	mov	r1, r4
   22db0:	4638      	mov	r0, r7
   22db2:	f7fb feb6 	bl	1eb22 <put_le16>
    *rsplen = sizeof(uint16_t);
   22db6:	2302      	movs	r3, #2
   22db8:	7033      	strb	r3, [r6, #0]
}
   22dba:	4628      	mov	r0, r5
   22dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    connsm = ble_ll_conn_find_active_conn(handle);
   22dc0:	4620      	mov	r0, r4
   22dc2:	f7fe fa47 	bl	21254 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   22dc6:	4681      	mov	r9, r0
   22dc8:	2800      	cmp	r0, #0
   22dca:	d040      	beq.n	22e4e <ble_ll_conn_hci_param_reply+0xbe>
    ble_err = cmdbuf[2];
   22dcc:	f895 a002 	ldrb.w	sl, [r5, #2]
    if (positive_reply) {
   22dd0:	f1b8 0f00 	cmp.w	r8, #0
   22dd4:	d116      	bne.n	22e04 <ble_ll_conn_hci_param_reply+0x74>
    rc = BLE_ERR_SUCCESS;
   22dd6:	4645      	mov	r5, r8
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   22dd8:	f899 3000 	ldrb.w	r3, [r9]
   22ddc:	f013 0f40 	tst.w	r3, #64	; 0x40
   22de0:	d0e5      	beq.n	22dae <ble_ll_conn_hci_param_reply+0x1e>
        if (positive_reply && (rc == BLE_ERR_SUCCESS)) {
   22de2:	f1b8 0f00 	cmp.w	r8, #0
   22de6:	d000      	beq.n	22dea <ble_ll_conn_hci_param_reply+0x5a>
   22de8:	b1b5      	cbz	r5, 22e18 <ble_ll_conn_hci_param_reply+0x88>
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   22dea:	4652      	mov	r2, sl
   22dec:	f899 1038 	ldrb.w	r1, [r9, #56]	; 0x38
   22df0:	4648      	mov	r0, r9
   22df2:	f001 fa93 	bl	2431c <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   22df6:	f899 3000 	ldrb.w	r3, [r9]
   22dfa:	f36f 1386 	bfc	r3, #6, #1
   22dfe:	f889 3000 	strb.w	r3, [r9]
   22e02:	e7d4      	b.n	22dae <ble_ll_conn_hci_param_reply+0x1e>
        rc = ble_ll_conn_process_conn_params(cmdbuf, connsm);
   22e04:	4601      	mov	r1, r0
   22e06:	4628      	mov	r0, r5
   22e08:	f7ff fcc7 	bl	2279a <ble_ll_conn_process_conn_params>
        if (rc) {
   22e0c:	4605      	mov	r5, r0
   22e0e:	2800      	cmp	r0, #0
   22e10:	d0e2      	beq.n	22dd8 <ble_ll_conn_hci_param_reply+0x48>
            ble_err = BLE_ERR_CONN_PARMS;
   22e12:	f04f 0a3b 	mov.w	sl, #59	; 0x3b
   22e16:	e7df      	b.n	22dd8 <ble_ll_conn_hci_param_reply+0x48>
            om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PAYLOAD + 1,
   22e18:	2110      	movs	r1, #16
   22e1a:	201b      	movs	r0, #27
   22e1c:	f7ee fd73 	bl	11906 <os_msys_get_pkthdr>
            if (om) {
   22e20:	4680      	mov	r8, r0
   22e22:	2800      	cmp	r0, #0
   22e24:	d0e7      	beq.n	22df6 <ble_ll_conn_hci_param_reply+0x66>
                dptr = om->om_data;
   22e26:	f8d0 a000 	ldr.w	sl, [r0]
                rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, dptr,
   22e2a:	f509 72bd 	add.w	r2, r9, #378	; 0x17a
   22e2e:	4651      	mov	r1, sl
   22e30:	4648      	mov	r0, r9
   22e32:	f000 fdb8 	bl	239a6 <ble_ll_ctrl_conn_param_reply>
                dptr[0] = rsp_opcode;
   22e36:	f88a 0000 	strb.w	r0, [sl]
                len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   22e3a:	4b06      	ldr	r3, [pc, #24]	; (22e54 <ble_ll_conn_hci_param_reply+0xc4>)
   22e3c:	5c1b      	ldrb	r3, [r3, r0]
   22e3e:	3301      	adds	r3, #1
                ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   22e40:	b2db      	uxtb	r3, r3
   22e42:	2203      	movs	r2, #3
   22e44:	4641      	mov	r1, r8
   22e46:	4648      	mov	r0, r9
   22e48:	f7ff fa52 	bl	222f0 <ble_ll_conn_enqueue_pkt>
   22e4c:	e7d3      	b.n	22df6 <ble_ll_conn_hci_param_reply+0x66>
        rc = BLE_ERR_UNK_CONN_ID;
   22e4e:	2502      	movs	r5, #2
   22e50:	e7ad      	b.n	22dae <ble_ll_conn_hci_param_reply+0x1e>
   22e52:	bf00      	nop
   22e54:	0002c938 	.word	0x0002c938

00022e58 <ble_ll_conn_create_cancel>:
 *
 * @return int
 */
int
ble_ll_conn_create_cancel(ble_ll_hci_post_cmd_complete_cb *post_cmd_cb)
{
   22e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e5a:	4607      	mov	r7, r0
     * If we receive this command and we have not got a connection
     * create command, we have to return disallowed. The spec does not say
     * what happens if the connection has already been established. We
     * return disallowed as well
     */
    OS_ENTER_CRITICAL(sr);
   22e5c:	f7ed faf4 	bl	10448 <os_arch_save_sr>
   22e60:	4606      	mov	r6, r0
    connsm = g_ble_ll_conn_create_sm;
   22e62:	4b0d      	ldr	r3, [pc, #52]	; (22e98 <ble_ll_conn_create_cancel+0x40>)
   22e64:	681d      	ldr	r5, [r3, #0]
    if (connsm && (connsm->conn_state == BLE_LL_CONN_STATE_IDLE)) {
   22e66:	b195      	cbz	r5, 22e8e <ble_ll_conn_create_cancel+0x36>
   22e68:	79ab      	ldrb	r3, [r5, #6]
   22e6a:	b993      	cbnz	r3, 22e92 <ble_ll_conn_create_cancel+0x3a>
        /* stop scanning and end the connection event */
        g_ble_ll_conn_create_sm = NULL;
   22e6c:	2400      	movs	r4, #0
   22e6e:	4b0a      	ldr	r3, [pc, #40]	; (22e98 <ble_ll_conn_create_cancel+0x40>)
   22e70:	601c      	str	r4, [r3, #0]
        ble_ll_scan_sm_stop(1);
   22e72:	2001      	movs	r0, #1
   22e74:	f003 fa22 	bl	262bc <ble_ll_scan_sm_stop>
        ble_ll_conn_end(connsm, BLE_ERR_UNK_CONN_ID);
   22e78:	2102      	movs	r1, #2
   22e7a:	4628      	mov	r0, r5
   22e7c:	f7fe fcfa 	bl	21874 <ble_ll_conn_end>

        *post_cmd_cb = ble_ll_conn_hci_cancel_conn_complete_event;
   22e80:	4b06      	ldr	r3, [pc, #24]	; (22e9c <ble_ll_conn_create_cancel+0x44>)
   22e82:	603b      	str	r3, [r7, #0]
        rc = BLE_ERR_SUCCESS;
    } else {
        /* If we are not attempting to create a connection*/
        rc = BLE_ERR_CMD_DISALLOWED;
    }
    OS_EXIT_CRITICAL(sr);
   22e84:	4630      	mov	r0, r6
   22e86:	f7ed fae5 	bl	10454 <os_arch_restore_sr>

    return rc;
}
   22e8a:	4620      	mov	r0, r4
   22e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_ERR_CMD_DISALLOWED;
   22e8e:	240c      	movs	r4, #12
   22e90:	e7f8      	b.n	22e84 <ble_ll_conn_create_cancel+0x2c>
   22e92:	240c      	movs	r4, #12
   22e94:	e7f6      	b.n	22e84 <ble_ll_conn_create_cancel+0x2c>
   22e96:	bf00      	nop
   22e98:	20003f90 	.word	0x20003f90
   22e9c:	00022941 	.word	0x00022941

00022ea0 <ble_ll_conn_hci_disconnect_cmd>:
 *
 * @return int
 */
int
ble_ll_conn_hci_disconnect_cmd(uint8_t *cmdbuf)
{
   22ea0:	b510      	push	{r4, lr}
   22ea2:	4604      	mov	r4, r0
    uint8_t reason;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;

    /* Check for valid parameters */
    handle = get_le16(cmdbuf);
   22ea4:	f7fb fe5e 	bl	1eb64 <get_le16>
    reason = cmdbuf[2];
   22ea8:	78a4      	ldrb	r4, [r4, #2]

    rc = BLE_ERR_INV_HCI_CMD_PARMS;
    if (handle <= BLE_LL_CONN_MAX_CONN_HANDLE) {
   22eaa:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
   22eae:	d236      	bcs.n	22f1e <ble_ll_conn_hci_disconnect_cmd+0x7e>
        /* Make sure reason is valid */
        switch (reason) {
   22eb0:	1f63      	subs	r3, r4, #5
   22eb2:	2b36      	cmp	r3, #54	; 0x36
   22eb4:	d835      	bhi.n	22f22 <ble_ll_conn_hci_disconnect_cmd+0x82>
   22eb6:	e8df f003 	tbb	[pc, r3]
   22eba:	341c      	.short	0x341c
   22ebc:	34343434 	.word	0x34343434
   22ec0:	34343434 	.word	0x34343434
   22ec4:	34343434 	.word	0x34343434
   22ec8:	341c1c1c 	.word	0x341c1c1c
   22ecc:	1c343434 	.word	0x1c343434
   22ed0:	34343434 	.word	0x34343434
   22ed4:	34343434 	.word	0x34343434
   22ed8:	34343434 	.word	0x34343434
   22edc:	341c3434 	.word	0x341c3434
   22ee0:	34343434 	.word	0x34343434
   22ee4:	34343434 	.word	0x34343434
   22ee8:	34343434 	.word	0x34343434
   22eec:	34343434 	.word	0x34343434
   22ef0:	1c          	.byte	0x1c
   22ef1:	00          	.byte	0x00
        case BLE_ERR_RD_CONN_TERM_RESRCS:
        case BLE_ERR_RD_CONN_TERM_PWROFF:
        case BLE_ERR_UNSUPP_REM_FEATURE:
        case BLE_ERR_UNIT_KEY_PAIRING:
        case BLE_ERR_CONN_PARMS:
            connsm = ble_ll_conn_find_active_conn(handle);
   22ef2:	f7fe f9af 	bl	21254 <ble_ll_conn_find_active_conn>
            if (connsm) {
   22ef6:	b1b0      	cbz	r0, 22f26 <ble_ll_conn_hci_disconnect_cmd+0x86>
                /* Do not allow command if we are in process of disconnecting */
                if (connsm->disconnect_reason) {
   22ef8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
   22efc:	b9aa      	cbnz	r2, 22f2a <ble_ll_conn_hci_disconnect_cmd+0x8a>
                    rc = BLE_ERR_CMD_DISALLOWED;
                } else {
                    /* This control procedure better not be pending! */
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   22efe:	f990 2000 	ldrsb.w	r2, [r0]
   22f02:	2a00      	cmp	r2, #0
   22f04:	db05      	blt.n	22f12 <ble_ll_conn_hci_disconnect_cmd+0x72>

                    /* Record the disconnect reason */
                    connsm->disconnect_reason = reason;
   22f06:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c

                    /* Start this control procedure */
                    ble_ll_ctrl_terminate_start(connsm);
   22f0a:	f000 fe32 	bl	23b72 <ble_ll_ctrl_terminate_start>

                    rc = BLE_ERR_SUCCESS;
   22f0e:	2000      	movs	r0, #0
   22f10:	e006      	b.n	22f20 <ble_ll_conn_hci_disconnect_cmd+0x80>
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   22f12:	2300      	movs	r3, #0
   22f14:	461a      	mov	r2, r3
   22f16:	4619      	mov	r1, r3
   22f18:	4618      	mov	r0, r3
   22f1a:	f7ed fb5f 	bl	105dc <__assert_func>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22f1e:	2012      	movs	r0, #18
            break;
        }
    }

    return rc;
}
   22f20:	bd10      	pop	{r4, pc}
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22f22:	2012      	movs	r0, #18
   22f24:	e7fc      	b.n	22f20 <ble_ll_conn_hci_disconnect_cmd+0x80>
                rc = BLE_ERR_UNK_CONN_ID;
   22f26:	2002      	movs	r0, #2
   22f28:	e7fa      	b.n	22f20 <ble_ll_conn_hci_disconnect_cmd+0x80>
                    rc = BLE_ERR_CMD_DISALLOWED;
   22f2a:	200c      	movs	r0, #12
    return rc;
   22f2c:	e7f8      	b.n	22f20 <ble_ll_conn_hci_disconnect_cmd+0x80>

00022f2e <ble_ll_conn_hci_rd_rem_ver_cmd>:
 *
 * @return int
 */
int
ble_ll_conn_hci_rd_rem_ver_cmd(uint8_t *cmdbuf)
{
   22f2e:	b508      	push	{r3, lr}
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;

    /* Check for valid parameters */
    handle = get_le16(cmdbuf);
   22f30:	f7fb fe18 	bl	1eb64 <get_le16>
    connsm = ble_ll_conn_find_active_conn(handle);
   22f34:	f7fe f98e 	bl	21254 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   22f38:	b198      	cbz	r0, 22f62 <ble_ll_conn_hci_rd_rem_ver_cmd+0x34>
        return BLE_ERR_UNK_CONN_ID;
    }

    /* Return error if in progress */
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   22f3a:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
   22f3e:	f012 0f10 	tst.w	r2, #16
   22f42:	d110      	bne.n	22f66 <ble_ll_conn_hci_rd_rem_ver_cmd+0x38>
     * procedure we set the pending bit so that the host gets an event because
     * it is obviously expecting one (or would not have sent the command).
     * NOTE: we cant just send the event here. That would cause the event to
     * be queued before the command status.
     */
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   22f44:	7841      	ldrb	r1, [r0, #1]
   22f46:	f011 0f04 	tst.w	r1, #4
   22f4a:	d005      	beq.n	22f58 <ble_ll_conn_hci_rd_rem_ver_cmd+0x2a>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
    } else {
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
   22f4c:	f042 0210 	orr.w	r2, r2, #16
   22f50:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    }

    return BLE_ERR_SUCCESS;
   22f54:	2000      	movs	r0, #0
}
   22f56:	bd08      	pop	{r3, pc}
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   22f58:	2104      	movs	r1, #4
   22f5a:	f000 fe2b 	bl	23bb4 <ble_ll_ctrl_proc_start>
    return BLE_ERR_SUCCESS;
   22f5e:	2000      	movs	r0, #0
   22f60:	e7f9      	b.n	22f56 <ble_ll_conn_hci_rd_rem_ver_cmd+0x28>
        return BLE_ERR_UNK_CONN_ID;
   22f62:	2002      	movs	r0, #2
   22f64:	e7f7      	b.n	22f56 <ble_ll_conn_hci_rd_rem_ver_cmd+0x28>
        return BLE_ERR_CMD_DISALLOWED;
   22f66:	200c      	movs	r0, #12
   22f68:	e7f5      	b.n	22f56 <ble_ll_conn_hci_rd_rem_ver_cmd+0x28>

00022f6a <ble_ll_conn_hci_rd_rssi>:
 *
 * @return int
 */
int
ble_ll_conn_hci_rd_rssi(uint8_t *cmdbuf, uint8_t *rspbuf, uint8_t *rsplen)
{
   22f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f6e:	460c      	mov	r4, r1
   22f70:	4615      	mov	r5, r2
    int rc;
    int8_t rssi;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;

    handle = get_le16(cmdbuf);
   22f72:	f7fb fdf7 	bl	1eb64 <get_le16>
   22f76:	4606      	mov	r6, r0
    connsm = ble_ll_conn_find_active_conn(handle);
   22f78:	f7fe f96c 	bl	21254 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   22f7c:	b168      	cbz	r0, 22f9a <ble_ll_conn_hci_rd_rssi+0x30>
        rssi = 127;
        rc = BLE_ERR_UNK_CONN_ID;
    } else {
        rssi = connsm->conn_rssi;
   22f7e:	f990 8008 	ldrsb.w	r8, [r0, #8]
        rc = BLE_ERR_SUCCESS;
   22f82:	2700      	movs	r7, #0
    }

    put_le16(rspbuf, handle);
   22f84:	4631      	mov	r1, r6
   22f86:	4620      	mov	r0, r4
   22f88:	f7fb fdcb 	bl	1eb22 <put_le16>
    rspbuf[2] = (uint8_t)rssi;
   22f8c:	f884 8002 	strb.w	r8, [r4, #2]
    *rsplen = 3;
   22f90:	2303      	movs	r3, #3
   22f92:	702b      	strb	r3, [r5, #0]

    /* Place the RSSI of the connection into the response buffer */
    return rc;
}
   22f94:	4638      	mov	r0, r7
   22f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rssi = 127;
   22f9a:	f04f 087f 	mov.w	r8, #127	; 0x7f
        rc = BLE_ERR_UNK_CONN_ID;
   22f9e:	2702      	movs	r7, #2
   22fa0:	e7f0      	b.n	22f84 <ble_ll_conn_hci_rd_rssi+0x1a>

00022fa2 <ble_ll_conn_hci_rd_chan_map>:
 *
 * @return int
 */
int
ble_ll_conn_hci_rd_chan_map(uint8_t *cmdbuf, uint8_t *rspbuf, uint8_t *rsplen)
{
   22fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22fa4:	460c      	mov	r4, r1
   22fa6:	4615      	mov	r5, r2
    int rc;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;

    handle = get_le16(cmdbuf);
   22fa8:	f7fb fddc 	bl	1eb64 <get_le16>
   22fac:	4606      	mov	r6, r0
    connsm = ble_ll_conn_find_active_conn(handle);
   22fae:	f7fe f951 	bl	21254 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   22fb2:	b1d8      	cbz	r0, 22fec <ble_ll_conn_hci_rd_chan_map+0x4a>
   22fb4:	4603      	mov	r3, r0
        rc = BLE_ERR_UNK_CONN_ID;
    } else {
        if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   22fb6:	7842      	ldrb	r2, [r0, #1]
   22fb8:	f012 0f10 	tst.w	r2, #16
   22fbc:	d10e      	bne.n	22fdc <ble_ll_conn_hci_rd_chan_map+0x3a>
            memcpy(rspbuf + 2, &connsm->req_chanmap[0], BLE_LL_CONN_CHMAP_LEN);
        } else {
            memcpy(rspbuf + 2, &connsm->chanmap[0], BLE_LL_CONN_CHMAP_LEN);
   22fbe:	f853 2f20 	ldr.w	r2, [r3, #32]!
   22fc2:	f8c4 2002 	str.w	r2, [r4, #2]
   22fc6:	791b      	ldrb	r3, [r3, #4]
   22fc8:	71a3      	strb	r3, [r4, #6]
        }
        rc = BLE_ERR_SUCCESS;
   22fca:	2700      	movs	r7, #0
    }

    put_le16(rspbuf, handle);
   22fcc:	4631      	mov	r1, r6
   22fce:	4620      	mov	r0, r4
   22fd0:	f7fb fda7 	bl	1eb22 <put_le16>
    *rsplen = sizeof(uint16_t) + BLE_LL_CONN_CHMAP_LEN;
   22fd4:	2307      	movs	r3, #7
   22fd6:	702b      	strb	r3, [r5, #0]
    return rc;
}
   22fd8:	4638      	mov	r0, r7
   22fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            memcpy(rspbuf + 2, &connsm->req_chanmap[0], BLE_LL_CONN_CHMAP_LEN);
   22fdc:	f853 2f25 	ldr.w	r2, [r3, #37]!
   22fe0:	f8c4 2002 	str.w	r2, [r4, #2]
   22fe4:	791b      	ldrb	r3, [r3, #4]
   22fe6:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   22fe8:	2700      	movs	r7, #0
   22fea:	e7ef      	b.n	22fcc <ble_ll_conn_hci_rd_chan_map+0x2a>
        rc = BLE_ERR_UNK_CONN_ID;
   22fec:	2702      	movs	r7, #2
   22fee:	e7ed      	b.n	22fcc <ble_ll_conn_hci_rd_chan_map+0x2a>

00022ff0 <ble_ll_conn_hci_set_chan_class>:
 *
 * @return int
 */
int
ble_ll_conn_hci_set_chan_class(uint8_t *cmdbuf)
{
   22ff0:	b538      	push	{r3, r4, r5, lr}
   22ff2:	4604      	mov	r4, r0
     * The HCI command states that the host is allowed to mask in just one
     * channel but the Link Layer needs minimum two channels to operate. So
     * I will not allow this command if there are less than 2 channels masked.
     */
    rc = BLE_ERR_SUCCESS;
    num_used_chans = ble_ll_utils_calc_num_used_chans(cmdbuf);
   22ff4:	f004 fb0b 	bl	2760e <ble_ll_utils_calc_num_used_chans>
    if ((num_used_chans < 2) || ((cmdbuf[4] & 0xe0) != 0)) {
   22ff8:	2801      	cmp	r0, #1
   22ffa:	d909      	bls.n	23010 <ble_ll_conn_hci_set_chan_class+0x20>
   22ffc:	7923      	ldrb	r3, [r4, #4]
   22ffe:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   23002:	d107      	bne.n	23014 <ble_ll_conn_hci_set_chan_class+0x24>
    rc = BLE_ERR_SUCCESS;
   23004:	2500      	movs	r5, #0
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
    }

    /* Set the host channel mask */
    ble_ll_conn_set_global_chanmap(num_used_chans, cmdbuf);
   23006:	4621      	mov	r1, r4
   23008:	f7ff f9e0 	bl	223cc <ble_ll_conn_set_global_chanmap>
    return rc;
}
   2300c:	4628      	mov	r0, r5
   2300e:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23010:	2512      	movs	r5, #18
   23012:	e7f8      	b.n	23006 <ble_ll_conn_hci_set_chan_class+0x16>
   23014:	2512      	movs	r5, #18
   23016:	e7f6      	b.n	23006 <ble_ll_conn_hci_set_chan_class+0x16>

00023018 <ble_ll_conn_hci_set_data_len>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_DATA_LEN_EXT)
int
ble_ll_conn_hci_set_data_len(uint8_t *cmdbuf, uint8_t *rspbuf, uint8_t *rsplen)
{
   23018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2301c:	4604      	mov	r4, r0
   2301e:	460f      	mov	r7, r1
   23020:	4616      	mov	r6, r2
    uint16_t txoctets;
    uint16_t txtime;
    struct ble_ll_conn_sm *connsm;

    /* Find connection */
    handle = get_le16(cmdbuf);
   23022:	f7fb fd9f 	bl	1eb64 <get_le16>
   23026:	4680      	mov	r8, r0
    connsm = ble_ll_conn_find_active_conn(handle);
   23028:	f7fe f914 	bl	21254 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   2302c:	b1f0      	cbz	r0, 2306c <ble_ll_conn_hci_set_data_len+0x54>
   2302e:	4605      	mov	r5, r0
        rc = BLE_ERR_UNK_CONN_ID;
        goto done;
    }

    txoctets = get_le16(cmdbuf + 2);
   23030:	1ca0      	adds	r0, r4, #2
   23032:	f7fb fd97 	bl	1eb64 <get_le16>
   23036:	4681      	mov	r9, r0
    txtime = get_le16(cmdbuf + 4);
   23038:	1d20      	adds	r0, r4, #4
   2303a:	f7fb fd93 	bl	1eb64 <get_le16>
   2303e:	4604      	mov	r4, r0

    /* Make sure it is valid */
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   23040:	4648      	mov	r0, r9
   23042:	f7fc f826 	bl	1f092 <ble_ll_chk_txrx_octets>
   23046:	b198      	cbz	r0, 23070 <ble_ll_conn_hci_set_data_len+0x58>
        !ble_ll_chk_txrx_time(txtime)) {
   23048:	4620      	mov	r0, r4
   2304a:	f7fc f82a 	bl	1f0a2 <ble_ll_chk_txrx_time>
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   2304e:	b1c8      	cbz	r0, 23084 <ble_ll_conn_hci_set_data_len+0x6c>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
        goto done;
    }

    rc = BLE_ERR_SUCCESS;
    if (connsm->max_tx_time != txtime ||
   23050:	8a2b      	ldrh	r3, [r5, #16]
   23052:	42a3      	cmp	r3, r4
   23054:	d102      	bne.n	2305c <ble_ll_conn_hci_set_data_len+0x44>
        connsm->max_tx_octets != txoctets) {
   23056:	7aab      	ldrb	r3, [r5, #10]
    if (connsm->max_tx_time != txtime ||
   23058:	454b      	cmp	r3, r9
   2305a:	d015      	beq.n	23088 <ble_ll_conn_hci_set_data_len+0x70>

        connsm->max_tx_time = txtime;
   2305c:	822c      	strh	r4, [r5, #16]
        connsm->max_tx_octets = txoctets;
   2305e:	f885 900a 	strb.w	r9, [r5, #10]

        ble_ll_ctrl_initiate_dle(connsm);
   23062:	4628      	mov	r0, r5
   23064:	f000 fdc9 	bl	23bfa <ble_ll_ctrl_initiate_dle>
    rc = BLE_ERR_SUCCESS;
   23068:	2400      	movs	r4, #0
   2306a:	e002      	b.n	23072 <ble_ll_conn_hci_set_data_len+0x5a>
        rc = BLE_ERR_UNK_CONN_ID;
   2306c:	2402      	movs	r4, #2
   2306e:	e000      	b.n	23072 <ble_ll_conn_hci_set_data_len+0x5a>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23070:	2412      	movs	r4, #18
    }

done:
    put_le16(rspbuf, handle);
   23072:	4641      	mov	r1, r8
   23074:	4638      	mov	r0, r7
   23076:	f7fb fd54 	bl	1eb22 <put_le16>
    *rsplen = sizeof(uint16_t);
   2307a:	2302      	movs	r3, #2
   2307c:	7033      	strb	r3, [r6, #0]
    return rc;
}
   2307e:	4620      	mov	r0, r4
   23080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23084:	2412      	movs	r4, #18
   23086:	e7f4      	b.n	23072 <ble_ll_conn_hci_set_data_len+0x5a>
    rc = BLE_ERR_SUCCESS;
   23088:	2400      	movs	r4, #0
   2308a:	e7f2      	b.n	23072 <ble_ll_conn_hci_set_data_len+0x5a>

0002308c <ble_ll_conn_hci_le_start_encrypt>:
 *
 * @return int
 */
int
ble_ll_conn_hci_le_start_encrypt(uint8_t *cmdbuf)
{
   2308c:	b538      	push	{r3, r4, r5, lr}
   2308e:	4605      	mov	r5, r0
    int rc;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;

    handle = get_le16(cmdbuf);
   23090:	f7fb fd68 	bl	1eb64 <get_le16>
    connsm = ble_ll_conn_find_active_conn(handle);
   23094:	f7fe f8de 	bl	21254 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   23098:	b308      	cbz	r0, 230de <ble_ll_conn_hci_le_start_encrypt+0x52>
   2309a:	4604      	mov	r4, r0
        rc = BLE_ERR_UNK_CONN_ID;
    } else if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   2309c:	79c3      	ldrb	r3, [r0, #7]
   2309e:	2b02      	cmp	r3, #2
   230a0:	d01f      	beq.n	230e2 <ble_ll_conn_hci_le_start_encrypt+0x56>
        rc = BLE_ERR_UNSPECIFIED;
    } else if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   230a2:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   230a6:	2b02      	cmp	r3, #2
   230a8:	d01d      	beq.n	230e6 <ble_ll_conn_hci_le_start_encrypt+0x5a>
         * of honoring a previous start encrypt.
         */
        rc = BLE_ERR_CMD_DISALLOWED;
    } else {
        /* Start the control procedure */
        connsm->enc_data.host_rand_num = get_le64(cmdbuf + 2);
   230aa:	1ca8      	adds	r0, r5, #2
   230ac:	f7fb fd6a 	bl	1eb84 <get_le64>
   230b0:	f504 7390 	add.w	r3, r4, #288	; 0x120
   230b4:	e9c3 0100 	strd	r0, r1, [r3]
        connsm->enc_data.enc_div = get_le16(cmdbuf + 10);
   230b8:	f105 000a 	add.w	r0, r5, #10
   230bc:	f7fb fd52 	bl	1eb64 <get_le16>
   230c0:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
        swap_buf(connsm->enc_data.enc_block.key, cmdbuf + 12, 16);
   230c4:	2210      	movs	r2, #16
   230c6:	f105 010c 	add.w	r1, r5, #12
   230ca:	f504 7098 	add.w	r0, r4, #304	; 0x130
   230ce:	f7fb fda9 	bl	1ec24 <swap_buf>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   230d2:	2102      	movs	r1, #2
   230d4:	4620      	mov	r0, r4
   230d6:	f000 fd6d 	bl	23bb4 <ble_ll_ctrl_proc_start>
        rc = BLE_ERR_SUCCESS;
   230da:	2000      	movs	r0, #0
    }

    return rc;
}
   230dc:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_ERR_UNK_CONN_ID;
   230de:	2002      	movs	r0, #2
   230e0:	e7fc      	b.n	230dc <ble_ll_conn_hci_le_start_encrypt+0x50>
        rc = BLE_ERR_UNSPECIFIED;
   230e2:	201f      	movs	r0, #31
   230e4:	e7fa      	b.n	230dc <ble_ll_conn_hci_le_start_encrypt+0x50>
        rc = BLE_ERR_CMD_DISALLOWED;
   230e6:	200c      	movs	r0, #12
    return rc;
   230e8:	e7f8      	b.n	230dc <ble_ll_conn_hci_le_start_encrypt+0x50>

000230ea <ble_ll_conn_hci_le_ltk_reply>:
 *
 * @return int
 */
int
ble_ll_conn_hci_le_ltk_reply(uint8_t *cmdbuf, uint8_t *rspbuf, uint8_t *rsplen)
{
   230ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   230ee:	4680      	mov	r8, r0
   230f0:	460e      	mov	r6, r1
   230f2:	4615      	mov	r5, r2
    int rc;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;

    /* Find connection handle */
    handle = get_le16(cmdbuf);
   230f4:	f7fb fd36 	bl	1eb64 <get_le16>
   230f8:	4607      	mov	r7, r0
    connsm = ble_ll_conn_find_active_conn(handle);
   230fa:	f7fe f8ab 	bl	21254 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   230fe:	b300      	cbz	r0, 23142 <ble_ll_conn_hci_le_ltk_reply+0x58>
   23100:	4604      	mov	r4, r0
        rc = BLE_ERR_UNK_CONN_ID;
        goto ltk_key_cmd_complete;
    }

    /* Should never get this if we are a master! */
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   23102:	79c3      	ldrb	r3, [r0, #7]
   23104:	2b01      	cmp	r3, #1
   23106:	d01e      	beq.n	23146 <ble_ll_conn_hci_le_ltk_reply+0x5c>
        rc = BLE_ERR_UNSPECIFIED;
        goto ltk_key_cmd_complete;
    }

    /* The connection should be awaiting a reply. If not, just discard */
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   23108:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   2310c:	2b08      	cmp	r3, #8
   2310e:	d009      	beq.n	23124 <ble_ll_conn_hci_le_ltk_reply+0x3a>
        rc = BLE_ERR_CMD_DISALLOWED;
   23110:	240c      	movs	r4, #12
    ble_ll_calc_session_key(connsm);
    ble_ll_ctrl_start_enc_send(connsm);
    rc = BLE_ERR_SUCCESS;

ltk_key_cmd_complete:
    put_le16(rspbuf, handle);
   23112:	4639      	mov	r1, r7
   23114:	4630      	mov	r0, r6
   23116:	f7fb fd04 	bl	1eb22 <put_le16>
    *rsplen = sizeof(uint16_t);
   2311a:	2302      	movs	r3, #2
   2311c:	702b      	strb	r3, [r5, #0]
    return rc;
}
   2311e:	4620      	mov	r0, r4
   23120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    swap_buf(connsm->enc_data.enc_block.key, cmdbuf + 2, 16);
   23124:	2210      	movs	r2, #16
   23126:	f108 0102 	add.w	r1, r8, #2
   2312a:	f500 7098 	add.w	r0, r0, #304	; 0x130
   2312e:	f7fb fd79 	bl	1ec24 <swap_buf>
    ble_ll_calc_session_key(connsm);
   23132:	4620      	mov	r0, r4
   23134:	f000 fbc2 	bl	238bc <ble_ll_calc_session_key>
    ble_ll_ctrl_start_enc_send(connsm);
   23138:	4620      	mov	r0, r4
   2313a:	f000 fc13 	bl	23964 <ble_ll_ctrl_start_enc_send>
    rc = BLE_ERR_SUCCESS;
   2313e:	2400      	movs	r4, #0
   23140:	e7e7      	b.n	23112 <ble_ll_conn_hci_le_ltk_reply+0x28>
        rc = BLE_ERR_UNK_CONN_ID;
   23142:	2402      	movs	r4, #2
   23144:	e7e5      	b.n	23112 <ble_ll_conn_hci_le_ltk_reply+0x28>
        rc = BLE_ERR_UNSPECIFIED;
   23146:	241f      	movs	r4, #31
   23148:	e7e3      	b.n	23112 <ble_ll_conn_hci_le_ltk_reply+0x28>

0002314a <ble_ll_conn_hci_le_ltk_neg_reply>:
 * @return int
 */
int
ble_ll_conn_hci_le_ltk_neg_reply(uint8_t *cmdbuf, uint8_t *rspbuf,
                                 uint8_t *rsplen)
{
   2314a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2314c:	460e      	mov	r6, r1
   2314e:	4615      	mov	r5, r2
    int rc;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;

    /* Find connection handle */
    handle = get_le16(cmdbuf);
   23150:	f7fb fd08 	bl	1eb64 <get_le16>
   23154:	4607      	mov	r7, r0
    connsm = ble_ll_conn_find_active_conn(handle);
   23156:	f7fe f87d 	bl	21254 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   2315a:	b1c8      	cbz	r0, 23190 <ble_ll_conn_hci_le_ltk_neg_reply+0x46>
   2315c:	4604      	mov	r4, r0
        rc = BLE_ERR_UNK_CONN_ID;
        goto ltk_key_cmd_complete;
    }

    /* Should never get this if we are a master! */
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   2315e:	79c3      	ldrb	r3, [r0, #7]
   23160:	2b01      	cmp	r3, #1
   23162:	d017      	beq.n	23194 <ble_ll_conn_hci_le_ltk_neg_reply+0x4a>
        rc = BLE_ERR_UNSPECIFIED;
        goto ltk_key_cmd_complete;
    }

    /* The connection should be awaiting a reply. If not, just discard */
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   23164:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   23168:	2b08      	cmp	r3, #8
   2316a:	d008      	beq.n	2317e <ble_ll_conn_hci_le_ltk_neg_reply+0x34>
        rc = BLE_ERR_CMD_DISALLOWED;
   2316c:	240c      	movs	r4, #12
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_NEG_REPLY;

    rc = BLE_ERR_SUCCESS;

ltk_key_cmd_complete:
    put_le16(rspbuf, handle);
   2316e:	4639      	mov	r1, r7
   23170:	4630      	mov	r0, r6
   23172:	f7fb fcd6 	bl	1eb22 <put_le16>
    *rsplen = sizeof(uint16_t);
   23176:	2302      	movs	r3, #2
   23178:	702b      	strb	r3, [r5, #0]
    return rc;
}
   2317a:	4620      	mov	r0, r4
   2317c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   2317e:	2206      	movs	r2, #6
   23180:	2103      	movs	r1, #3
   23182:	f001 f8cb 	bl	2431c <ble_ll_ctrl_reject_ind_send>
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_NEG_REPLY;
   23186:	2309      	movs	r3, #9
   23188:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    rc = BLE_ERR_SUCCESS;
   2318c:	2400      	movs	r4, #0
   2318e:	e7ee      	b.n	2316e <ble_ll_conn_hci_le_ltk_neg_reply+0x24>
        rc = BLE_ERR_UNK_CONN_ID;
   23190:	2402      	movs	r4, #2
   23192:	e7ec      	b.n	2316e <ble_ll_conn_hci_le_ltk_neg_reply+0x24>
        rc = BLE_ERR_UNSPECIFIED;
   23194:	241f      	movs	r4, #31
   23196:	e7ea      	b.n	2316e <ble_ll_conn_hci_le_ltk_neg_reply+0x24>

00023198 <ble_ll_conn_hci_rd_auth_pyld_tmo>:
 *
 * @return int
 */
int
ble_ll_conn_hci_rd_auth_pyld_tmo(uint8_t *cmdbuf, uint8_t *rsp, uint8_t *rsplen)
{
   23198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2319a:	460c      	mov	r4, r1
   2319c:	4615      	mov	r5, r2
    int rc;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;

    handle = get_le16(cmdbuf);
   2319e:	f7fb fce1 	bl	1eb64 <get_le16>
   231a2:	4606      	mov	r6, r0
    connsm = ble_ll_conn_find_active_conn(handle);
   231a4:	f7fe f856 	bl	21254 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   231a8:	b168      	cbz	r0, 231c6 <ble_ll_conn_hci_rd_auth_pyld_tmo+0x2e>
        rc = BLE_ERR_UNK_CONN_ID;
    } else {
        put_le16(rsp + 2, connsm->auth_pyld_tmo);
   231aa:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
   231ae:	1ca0      	adds	r0, r4, #2
   231b0:	f7fb fcb7 	bl	1eb22 <put_le16>
        rc = BLE_ERR_SUCCESS;
   231b4:	2700      	movs	r7, #0
    }

    put_le16(rsp, handle);
   231b6:	4631      	mov	r1, r6
   231b8:	4620      	mov	r0, r4
   231ba:	f7fb fcb2 	bl	1eb22 <put_le16>
    *rsplen = BLE_HCI_RD_AUTH_PYLD_TMO_LEN;
   231be:	2304      	movs	r3, #4
   231c0:	702b      	strb	r3, [r5, #0]
    return rc;
}
   231c2:	4638      	mov	r0, r7
   231c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_ERR_UNK_CONN_ID;
   231c6:	2702      	movs	r7, #2
   231c8:	e7f5      	b.n	231b6 <ble_ll_conn_hci_rd_auth_pyld_tmo+0x1e>
	...

000231cc <ble_ll_conn_hci_wr_auth_pyld_tmo>:
 *
 * @return int
 */
int
ble_ll_conn_hci_wr_auth_pyld_tmo(uint8_t *cmdbuf, uint8_t *rsp, uint8_t *rsplen)
{
   231cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   231d0:	4680      	mov	r8, r0
   231d2:	460e      	mov	r6, r1
   231d4:	4615      	mov	r5, r2
    uint32_t min_tmo;
    struct ble_ll_conn_sm *connsm;

    rc = BLE_ERR_SUCCESS;

    handle = get_le16(cmdbuf);
   231d6:	f7fb fcc5 	bl	1eb64 <get_le16>
   231da:	4607      	mov	r7, r0
    connsm = ble_ll_conn_find_active_conn(handle);
   231dc:	f7fe f83a 	bl	21254 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   231e0:	b330      	cbz	r0, 23230 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x64>
   231e2:	4604      	mov	r4, r0

    /*
     * The timeout is in units of 10 msecs. We need to make sure that the
     * timeout is greater than or equal to connItvl * (1 + slaveLatency)
     */
    tmo = get_le16(cmdbuf + 2);
   231e4:	f108 0002 	add.w	r0, r8, #2
   231e8:	f7fb fcbc 	bl	1eb64 <get_le16>
    min_tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   231ec:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   231f0:	f240 43e2 	movw	r3, #1250	; 0x4e2
   231f4:	fb03 f302 	mul.w	r3, r3, r2
    min_tmo *= (connsm->slave_latency + 1);
   231f8:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   231fc:	fb02 3303 	mla	r3, r2, r3, r3
    min_tmo /= 10000;
   23200:	4a0e      	ldr	r2, [pc, #56]	; (2323c <ble_ll_conn_hci_wr_auth_pyld_tmo+0x70>)
   23202:	fba2 2303 	umull	r2, r3, r2, r3

    if (tmo < min_tmo) {
   23206:	ebb0 3f53 	cmp.w	r0, r3, lsr #13
   2320a:	d313      	bcc.n	23234 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x68>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
    } else {
        connsm->auth_pyld_tmo = tmo;
   2320c:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   23210:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
        if (ble_npl_callout_is_active(&connsm->auth_pyld_timer)) {
   23214:	b183      	cbz	r3, 23238 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x6c>
            ble_ll_conn_auth_pyld_timer_start(connsm);
   23216:	4620      	mov	r0, r4
   23218:	f7fe fa18 	bl	2164c <ble_ll_conn_auth_pyld_timer_start>
    rc = BLE_ERR_SUCCESS;
   2321c:	2400      	movs	r4, #0
        }
    }

wr_auth_exit:
    put_le16(rsp, handle);
   2321e:	4639      	mov	r1, r7
   23220:	4630      	mov	r0, r6
   23222:	f7fb fc7e 	bl	1eb22 <put_le16>
    *rsplen = BLE_HCI_WR_AUTH_PYLD_TMO_LEN;
   23226:	2302      	movs	r3, #2
   23228:	702b      	strb	r3, [r5, #0]
    return rc;
}
   2322a:	4620      	mov	r0, r4
   2322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_ERR_UNK_CONN_ID;
   23230:	2402      	movs	r4, #2
   23232:	e7f4      	b.n	2321e <ble_ll_conn_hci_wr_auth_pyld_tmo+0x52>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   23234:	2412      	movs	r4, #18
   23236:	e7f2      	b.n	2321e <ble_ll_conn_hci_wr_auth_pyld_tmo+0x52>
    rc = BLE_ERR_SUCCESS;
   23238:	2400      	movs	r4, #0
   2323a:	e7f0      	b.n	2321e <ble_ll_conn_hci_wr_auth_pyld_tmo+0x52>
   2323c:	d1b71759 	.word	0xd1b71759

00023240 <ble_ll_ctrl_enc_allowed_pdu>:
{
    int allowed;

    allowed = 0;

    switch (llid) {
   23240:	2801      	cmp	r0, #1
   23242:	d010      	beq.n	23266 <ble_ll_ctrl_enc_allowed_pdu+0x26>
   23244:	2803      	cmp	r0, #3
   23246:	d113      	bne.n	23270 <ble_ll_ctrl_enc_allowed_pdu+0x30>
    case BLE_LL_LLID_CTRL:
        switch (opcode) {
   23248:	3a02      	subs	r2, #2
   2324a:	2a0f      	cmp	r2, #15
   2324c:	d809      	bhi.n	23262 <ble_ll_ctrl_enc_allowed_pdu+0x22>
   2324e:	e8df f002 	tbb	[pc, r2]
   23252:	1111      	.short	0x1111
   23254:	08111111 	.word	0x08111111
   23258:	11110808 	.word	0x11110808
   2325c:	08081108 	.word	0x08081108
   23260:	1108      	.short	0x1108
    allowed = 0;
   23262:	2000      	movs	r0, #0
   23264:	4770      	bx	lr
            allowed = 1;
            break;
        }
        break;
    case BLE_LL_LLID_DATA_FRAG:
        if (len == 0) {
   23266:	b909      	cbnz	r1, 2326c <ble_ll_ctrl_enc_allowed_pdu+0x2c>
            /* Empty PDUs are allowed */
            allowed = 1;
   23268:	2001      	movs	r0, #1
        }
        break;
    }

    return allowed;
}
   2326a:	4770      	bx	lr
    allowed = 0;
   2326c:	2000      	movs	r0, #0
   2326e:	4770      	bx	lr
   23270:	2000      	movs	r0, #0
   23272:	4770      	bx	lr
            allowed = 1;
   23274:	2001      	movs	r0, #1
   23276:	4770      	bx	lr

00023278 <ble_ll_ctrl_rx_start_enc_req>:
{
    int rc;

    /* Only master should receive start enc request */
    rc = BLE_ERR_MAX;
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   23278:	79c3      	ldrb	r3, [r0, #7]
   2327a:	2b01      	cmp	r3, #1
   2327c:	d001      	beq.n	23282 <ble_ll_ctrl_rx_start_enc_req+0xa>
        if (connsm->enc_data.enc_state == CONN_ENC_S_START_ENC_REQ_WAIT) {
            connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
            rc = BLE_LL_CTRL_START_ENC_RSP;
        }
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   2327e:	2007      	movs	r0, #7
   23280:	4770      	bx	lr
        if (connsm->enc_data.enc_state == CONN_ENC_S_START_ENC_REQ_WAIT) {
   23282:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   23286:	2b06      	cmp	r3, #6
   23288:	d001      	beq.n	2328e <ble_ll_ctrl_rx_start_enc_req+0x16>
    rc = BLE_ERR_MAX;
   2328a:	20ff      	movs	r0, #255	; 0xff
    }
    return rc;
}
   2328c:	4770      	bx	lr
            connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
   2328e:	2307      	movs	r3, #7
   23290:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
            rc = BLE_LL_CTRL_START_ENC_RSP;
   23294:	2006      	movs	r0, #6
   23296:	4770      	bx	lr

00023298 <ble_ll_ctrl_rx_pause_enc_req>:
     * The spec does not say what to do here, but if we receive a pause
     * encryption request and we are not encrypted, what do we do? We
     * ignore it...
     */
    rc = BLE_ERR_MAX;
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   23298:	79c3      	ldrb	r3, [r0, #7]
   2329a:	2b02      	cmp	r3, #2
   2329c:	d001      	beq.n	232a2 <ble_ll_ctrl_rx_pause_enc_req+0xa>
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   2329e:	2007      	movs	r0, #7
   232a0:	4770      	bx	lr
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
   232a2:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   232a6:	2b02      	cmp	r3, #2
   232a8:	d001      	beq.n	232ae <ble_ll_ctrl_rx_pause_enc_req+0x16>
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   232aa:	2007      	movs	r0, #7
   232ac:	4770      	bx	lr
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
   232ae:	200b      	movs	r0, #11
    }

    return rc;
}
   232b0:	4770      	bx	lr

000232b2 <ble_ll_ctrl_rx_pause_enc_rsp>:
static uint8_t
ble_ll_ctrl_rx_pause_enc_rsp(struct ble_ll_conn_sm *connsm)
{
    int rc;

    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   232b2:	79c3      	ldrb	r3, [r0, #7]
   232b4:	2b01      	cmp	r3, #1
   232b6:	d00a      	beq.n	232ce <ble_ll_ctrl_rx_pause_enc_rsp+0x1c>
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
    } else if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSE_ENC_RSP_WAIT) {
   232b8:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   232bc:	2b04      	cmp	r3, #4
   232be:	d001      	beq.n	232c4 <ble_ll_ctrl_rx_pause_enc_rsp+0x12>
         * From this moment encryption is paused.
         */
        rc = BLE_ERR_MAX;
        connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   232c0:	2007      	movs	r0, #7
    }

    return rc;
}
   232c2:	4770      	bx	lr
        connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   232c4:	2305      	movs	r3, #5
   232c6:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
        rc = BLE_ERR_MAX;
   232ca:	20ff      	movs	r0, #255	; 0xff
   232cc:	4770      	bx	lr
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
   232ce:	200b      	movs	r0, #11
   232d0:	4770      	bx	lr

000232d2 <ble_ll_ctrl_proc_rsp_timer_cb>:
{
   232d2:	b508      	push	{r3, lr}
    ble_ll_conn_timeout((struct ble_ll_conn_sm *)ble_npl_event_get_arg(ev),
   232d4:	2122      	movs	r1, #34	; 0x22
   232d6:	6880      	ldr	r0, [r0, #8]
   232d8:	f7fe fe04 	bl	21ee4 <ble_ll_conn_timeout>
}
   232dc:	bd08      	pop	{r3, pc}
	...

000232e0 <ble_ll_ctrl_start_rsp_timer>:
{
   232e0:	b510      	push	{r4, lr}
   232e2:	4603      	mov	r3, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   232e4:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
   232e8:	4a05      	ldr	r2, [pc, #20]	; (23300 <ble_ll_ctrl_start_rsp_timer+0x20>)
   232ea:	4906      	ldr	r1, [pc, #24]	; (23304 <ble_ll_ctrl_start_rsp_timer+0x24>)
   232ec:	4620      	mov	r0, r4
   232ee:	f7ed faef 	bl	108d0 <os_callout_init>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   232f2:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
   232f6:	4620      	mov	r0, r4
   232f8:	f7ed fb16 	bl	10928 <os_callout_reset>
}
   232fc:	bd10      	pop	{r4, pc}
   232fe:	bf00      	nop
   23300:	000232d3 	.word	0x000232d3
   23304:	20003e4c 	.word	0x20003e4c

00023308 <ble_ll_ctrl_conn_upd_make>:
{
   23308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2330a:	4604      	mov	r4, r0
   2330c:	460e      	mov	r6, r1
    instant = connsm->event_cntr + connsm->slave_latency + 6 + 1;
   2330e:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
   23312:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
   23316:	441d      	add	r5, r3
   23318:	b2ad      	uxth	r5, r5
   2331a:	3507      	adds	r5, #7
   2331c:	b2ad      	uxth	r5, r5
    if (cp) {
   2331e:	2a00      	cmp	r2, #0
   23320:	d066      	beq.n	233f0 <ble_ll_ctrl_conn_upd_make+0xe8>
   23322:	4611      	mov	r1, r2
        if (cp->offset0 != 0xFFFF) {
   23324:	8997      	ldrh	r7, [r2, #12]
   23326:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2332a:	429f      	cmp	r7, r3
   2332c:	d05c      	beq.n	233e8 <ble_ll_ctrl_conn_upd_make+0xe0>
            new_itvl_usecs = cp->interval_max * BLE_LL_CONN_ITVL_USECS;
   2332e:	8853      	ldrh	r3, [r2, #2]
   23330:	f240 42e2 	movw	r2, #1250	; 0x4e2
   23334:	fb02 f303 	mul.w	r3, r2, r3
            old_itvl_usecs = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   23338:	f8b0 0068 	ldrh.w	r0, [r0, #104]	; 0x68
   2333c:	fb02 f200 	mul.w	r2, r2, r0
            if ((int16_t)(cp->ref_conn_event_cnt - instant) >= 0) {
   23340:	8948      	ldrh	r0, [r1, #10]
   23342:	eba0 0c05 	sub.w	ip, r0, r5
   23346:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   2334a:	d140      	bne.n	233ce <ble_ll_ctrl_conn_upd_make+0xc6>
                num_old_ce = cp->ref_conn_event_cnt - instant;
   2334c:	4660      	mov	r0, ip
                dt += (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   2334e:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   23352:	fb0c f707 	mul.w	r7, ip, r7
   23356:	fb00 7202 	mla	r2, r0, r2, r7
                dt = dt % new_itvl_usecs;
   2335a:	fbb2 f0f3 	udiv	r0, r2, r3
   2335e:	fb03 2310 	mls	r3, r3, r0, r2
            req->winoffset = dt / BLE_LL_CONN_TX_WIN_USECS;
   23362:	4a2d      	ldr	r2, [pc, #180]	; (23418 <ble_ll_ctrl_conn_upd_make+0x110>)
   23364:	fba2 2303 	umull	r2, r3, r2, r3
   23368:	0a9b      	lsrs	r3, r3, #10
   2336a:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
        req->interval = cp->interval_max;
   2336e:	884b      	ldrh	r3, [r1, #2]
   23370:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
        req->timeout = cp->timeout;
   23374:	88cb      	ldrh	r3, [r1, #6]
   23376:	f8a4 3176 	strh.w	r3, [r4, #374]	; 0x176
        req->latency = cp->latency;
   2337a:	888b      	ldrh	r3, [r1, #4]
   2337c:	f8a4 3174 	strh.w	r3, [r4, #372]	; 0x174
        req->winsize = 1;
   23380:	2301      	movs	r3, #1
   23382:	f884 316e 	strb.w	r3, [r4, #366]	; 0x16e
    req->instant = instant;
   23386:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
    pyld[0] = req->winsize;
   2338a:	f894 316e 	ldrb.w	r3, [r4, #366]	; 0x16e
   2338e:	4630      	mov	r0, r6
   23390:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, req->winoffset);
   23394:	f8b4 1170 	ldrh.w	r1, [r4, #368]	; 0x170
   23398:	f7fb fbc3 	bl	1eb22 <put_le16>
    put_le16(pyld + 3, req->interval);
   2339c:	f8b4 1172 	ldrh.w	r1, [r4, #370]	; 0x172
   233a0:	1cf0      	adds	r0, r6, #3
   233a2:	f7fb fbbe 	bl	1eb22 <put_le16>
    put_le16(pyld + 5, req->latency);
   233a6:	f8b4 1174 	ldrh.w	r1, [r4, #372]	; 0x174
   233aa:	1d70      	adds	r0, r6, #5
   233ac:	f7fb fbb9 	bl	1eb22 <put_le16>
    put_le16(pyld + 7, req->timeout);
   233b0:	f8b4 1176 	ldrh.w	r1, [r4, #374]	; 0x176
   233b4:	1df0      	adds	r0, r6, #7
   233b6:	f7fb fbb4 	bl	1eb22 <put_le16>
    put_le16(pyld + 9, instant);
   233ba:	4629      	mov	r1, r5
   233bc:	f106 0009 	add.w	r0, r6, #9
   233c0:	f7fb fbaf 	bl	1eb22 <put_le16>
    connsm->csmflags.cfbit.conn_update_sched = 1;
   233c4:	7863      	ldrb	r3, [r4, #1]
   233c6:	f043 0301 	orr.w	r3, r3, #1
   233ca:	7063      	strb	r3, [r4, #1]
}
   233cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                num_old_ce = instant - cp->ref_conn_event_cnt;
   233ce:	1a28      	subs	r0, r5, r0
                dt = old_itvl_usecs * num_old_ce;
   233d0:	fb00 f202 	mul.w	r2, r0, r2
                dt -= (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   233d4:	f240 40e2 	movw	r0, #1250	; 0x4e2
   233d8:	fb00 2217 	mls	r2, r0, r7, r2
                dt = dt % new_itvl_usecs;
   233dc:	fbb2 f7f3 	udiv	r7, r2, r3
   233e0:	fb03 2217 	mls	r2, r3, r7, r2
                dt = new_itvl_usecs - dt;
   233e4:	1a9b      	subs	r3, r3, r2
   233e6:	e7bc      	b.n	23362 <ble_ll_ctrl_conn_upd_make+0x5a>
            req->winoffset = 0;
   233e8:	2300      	movs	r3, #0
   233ea:	f8a0 3170 	strh.w	r3, [r0, #368]	; 0x170
   233ee:	e7be      	b.n	2336e <ble_ll_ctrl_conn_upd_make+0x66>
        req->interval = hcu->conn_itvl_max;
   233f0:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
   233f4:	f8a0 3172 	strh.w	r3, [r0, #370]	; 0x172
        req->timeout = hcu->supervision_timeout;
   233f8:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
   233fc:	f8a0 3176 	strh.w	r3, [r0, #374]	; 0x176
        req->latency = hcu->conn_latency;
   23400:	f8b0 3166 	ldrh.w	r3, [r0, #358]	; 0x166
   23404:	f8a0 3174 	strh.w	r3, [r0, #372]	; 0x174
        req->winoffset = 0;
   23408:	2300      	movs	r3, #0
   2340a:	f8a0 3170 	strh.w	r3, [r0, #368]	; 0x170
        req->winsize = connsm->tx_win_size;
   2340e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   23412:	f880 316e 	strb.w	r3, [r0, #366]	; 0x16e
   23416:	e7b6      	b.n	23386 <ble_ll_ctrl_conn_upd_make+0x7e>
   23418:	d1b71759 	.word	0xd1b71759

0002341c <ble_ll_ctrl_version_ind_make>:
    put_le16(dptr + 21, offset);
}

static void
ble_ll_ctrl_version_ind_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   2341c:	b510      	push	{r4, lr}
   2341e:	460c      	mov	r4, r1
    /* Set flag to denote we have sent/received this */
    connsm->csmflags.cfbit.version_ind_sent = 1;
   23420:	7843      	ldrb	r3, [r0, #1]
   23422:	f043 0304 	orr.w	r3, r3, #4
   23426:	7043      	strb	r3, [r0, #1]

    /* Fill out response */
    pyld[0] = BLE_HCI_VER_BCS_5_0;
   23428:	4608      	mov	r0, r1
   2342a:	2309      	movs	r3, #9
   2342c:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, MYNEWT_VAL(BLE_LL_MFRG_ID));
   23430:	f64f 71ff 	movw	r1, #65535	; 0xffff
   23434:	f7fb fb75 	bl	1eb22 <put_le16>
    put_le16(pyld + 3, BLE_LL_SUB_VERS_NR);
   23438:	2100      	movs	r1, #0
   2343a:	1ce0      	adds	r0, r4, #3
   2343c:	f7fb fb71 	bl	1eb22 <put_le16>
}
   23440:	bd10      	pop	{r4, pc}

00023442 <ble_ll_ctrl_datalen_upd_make>:
{
   23442:	b538      	push	{r3, r4, r5, lr}
   23444:	4605      	mov	r5, r0
   23446:	460c      	mov	r4, r1
    put_le16(dptr + 1, connsm->max_rx_octets);
   23448:	7ac1      	ldrb	r1, [r0, #11]
   2344a:	1c60      	adds	r0, r4, #1
   2344c:	f7fb fb69 	bl	1eb22 <put_le16>
    put_le16(dptr + 3, connsm->max_rx_time);
   23450:	8a69      	ldrh	r1, [r5, #18]
   23452:	1ce0      	adds	r0, r4, #3
   23454:	f7fb fb65 	bl	1eb22 <put_le16>
    put_le16(dptr + 5, connsm->max_tx_octets);
   23458:	7aa9      	ldrb	r1, [r5, #10]
   2345a:	1d60      	adds	r0, r4, #5
   2345c:	f7fb fb61 	bl	1eb22 <put_le16>
    put_le16(dptr + 7, connsm->max_tx_time);
   23460:	8a29      	ldrh	r1, [r5, #16]
   23462:	1de0      	adds	r0, r4, #7
   23464:	f7fb fb5d 	bl	1eb22 <put_le16>
}
   23468:	bd38      	pop	{r3, r4, r5, pc}

0002346a <ble_ll_ctrl_conn_param_pdu_make>:
{
   2346a:	b570      	push	{r4, r5, r6, lr}
   2346c:	4605      	mov	r5, r0
   2346e:	460c      	mov	r4, r1
    if (req) {
   23470:	2a00      	cmp	r2, #0
   23472:	d144      	bne.n	234fe <ble_ll_ctrl_conn_param_pdu_make+0x94>
        BLE_LL_ASSERT(hcu->handle != 0);
   23474:	f8b0 3160 	ldrh.w	r3, [r0, #352]	; 0x160
   23478:	2b00      	cmp	r3, #0
   2347a:	d052      	beq.n	23522 <ble_ll_ctrl_conn_param_pdu_make+0xb8>
        put_le16(dptr, hcu->conn_itvl_min);
   2347c:	f8b0 1162 	ldrh.w	r1, [r0, #354]	; 0x162
   23480:	4620      	mov	r0, r4
   23482:	f7fb fb4e 	bl	1eb22 <put_le16>
        put_le16(dptr + 2, hcu->conn_itvl_max);
   23486:	f8b5 1164 	ldrh.w	r1, [r5, #356]	; 0x164
   2348a:	1ca0      	adds	r0, r4, #2
   2348c:	f7fb fb49 	bl	1eb22 <put_le16>
        put_le16(dptr + 4, hcu->conn_latency);
   23490:	f8b5 1166 	ldrh.w	r1, [r5, #358]	; 0x166
   23494:	1d20      	adds	r0, r4, #4
   23496:	f7fb fb44 	bl	1eb22 <put_le16>
        put_le16(dptr + 6, hcu->supervision_timeout);
   2349a:	f8b5 1168 	ldrh.w	r1, [r5, #360]	; 0x168
   2349e:	1da0      	adds	r0, r4, #6
   234a0:	f7fb fb3f 	bl	1eb22 <put_le16>
    dptr[8] = 0;
   234a4:	2300      	movs	r3, #0
   234a6:	7223      	strb	r3, [r4, #8]
    put_le16(dptr + 9, connsm->event_cntr);
   234a8:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
   234ac:	f104 0009 	add.w	r0, r4, #9
   234b0:	f7fb fb37 	bl	1eb22 <put_le16>
    put_le16(dptr + 11, offset);
   234b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   234b8:	f104 000b 	add.w	r0, r4, #11
   234bc:	f7fb fb31 	bl	1eb22 <put_le16>
    put_le16(dptr + 13, offset);
   234c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   234c4:	f104 000d 	add.w	r0, r4, #13
   234c8:	f7fb fb2b 	bl	1eb22 <put_le16>
    put_le16(dptr + 15, offset);
   234cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   234d0:	f104 000f 	add.w	r0, r4, #15
   234d4:	f7fb fb25 	bl	1eb22 <put_le16>
    put_le16(dptr + 17, offset);
   234d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   234dc:	f104 0011 	add.w	r0, r4, #17
   234e0:	f7fb fb1f 	bl	1eb22 <put_le16>
    put_le16(dptr + 19, offset);
   234e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   234e8:	f104 0013 	add.w	r0, r4, #19
   234ec:	f7fb fb19 	bl	1eb22 <put_le16>
    put_le16(dptr + 21, offset);
   234f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   234f4:	f104 0015 	add.w	r0, r4, #21
   234f8:	f7fb fb13 	bl	1eb22 <put_le16>
}
   234fc:	bd70      	pop	{r4, r5, r6, pc}
   234fe:	4616      	mov	r6, r2
        put_le16(dptr, req->interval_min);
   23500:	8811      	ldrh	r1, [r2, #0]
   23502:	4620      	mov	r0, r4
   23504:	f7fb fb0d 	bl	1eb22 <put_le16>
        put_le16(dptr + 2, req->interval_max);
   23508:	8871      	ldrh	r1, [r6, #2]
   2350a:	1ca0      	adds	r0, r4, #2
   2350c:	f7fb fb09 	bl	1eb22 <put_le16>
        put_le16(dptr + 4, req->latency);
   23510:	88b1      	ldrh	r1, [r6, #4]
   23512:	1d20      	adds	r0, r4, #4
   23514:	f7fb fb05 	bl	1eb22 <put_le16>
        put_le16(dptr + 6, req->timeout);
   23518:	88f1      	ldrh	r1, [r6, #6]
   2351a:	1da0      	adds	r0, r4, #6
   2351c:	f7fb fb01 	bl	1eb22 <put_le16>
   23520:	e7c0      	b.n	234a4 <ble_ll_ctrl_conn_param_pdu_make+0x3a>
        BLE_LL_ASSERT(hcu->handle != 0);
   23522:	461a      	mov	r2, r3
   23524:	4619      	mov	r1, r3
   23526:	4618      	mov	r0, r3
   23528:	f7ed f858 	bl	105dc <__assert_func>

0002352c <ble_ll_ctrl_rx_feature_req>:

    /*
     * Only accept slave feature requests if we are a master and feature
     * requests if we are a slave.
     */
    if (opcode ==  BLE_LL_CTRL_SLAVE_FEATURE_REQ) {
   2352c:	2b0e      	cmp	r3, #14
   2352e:	d004      	beq.n	2353a <ble_ll_ctrl_rx_feature_req+0xe>
        if (connsm->conn_role != BLE_LL_CONN_ROLE_MASTER) {
            return BLE_LL_CTRL_UNKNOWN_RSP;
        }
    } else {
        /* XXX: not sure this is correct but do it anyway */
        if (connsm->conn_role != BLE_LL_CONN_ROLE_SLAVE) {
   23530:	79c3      	ldrb	r3, [r0, #7]
   23532:	2b02      	cmp	r3, #2
   23534:	d006      	beq.n	23544 <ble_ll_ctrl_rx_feature_req+0x18>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   23536:	2007      	movs	r0, #7
        *new_features = 1;
        connsm->csmflags.cfbit.rxd_features = 1;
    }

    return rsp_opcode;
}
   23538:	4770      	bx	lr
        if (connsm->conn_role != BLE_LL_CONN_ROLE_MASTER) {
   2353a:	79c3      	ldrb	r3, [r0, #7]
   2353c:	2b01      	cmp	r3, #1
   2353e:	d001      	beq.n	23544 <ble_ll_ctrl_rx_feature_req+0x18>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   23540:	2007      	movs	r0, #7
   23542:	4770      	bx	lr
{
   23544:	b570      	push	{r4, r5, r6, lr}
   23546:	4615      	mov	r5, r2
   23548:	460e      	mov	r6, r1
   2354a:	4604      	mov	r4, r0
    our_feat = ble_ll_read_supp_features();
   2354c:	f7fb ff66 	bl	1f41c <ble_ll_read_supp_features>
   23550:	4601      	mov	r1, r0
    connsm->conn_features = dptr[0] & our_feat;
   23552:	7833      	ldrb	r3, [r6, #0]
   23554:	4003      	ands	r3, r0
   23556:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    memset(rspbuf + 1, 0, 8);
   2355a:	1c68      	adds	r0, r5, #1
   2355c:	2200      	movs	r2, #0
   2355e:	f8c5 2001 	str.w	r2, [r5, #1]
   23562:	6042      	str	r2, [r0, #4]
    put_le32(rspbuf + 1, our_feat);
   23564:	f7fb fae1 	bl	1eb2a <put_le32>
    rspbuf[1] = connsm->conn_features;
   23568:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   2356c:	706b      	strb	r3, [r5, #1]
    if (!connsm->csmflags.cfbit.rxd_features) {
   2356e:	78e3      	ldrb	r3, [r4, #3]
   23570:	f013 0f08 	tst.w	r3, #8
   23574:	d108      	bne.n	23588 <ble_ll_ctrl_rx_feature_req+0x5c>
        *new_features = 1;
   23576:	9b04      	ldr	r3, [sp, #16]
   23578:	2201      	movs	r2, #1
   2357a:	701a      	strb	r2, [r3, #0]
        connsm->csmflags.cfbit.rxd_features = 1;
   2357c:	78e3      	ldrb	r3, [r4, #3]
   2357e:	f043 0308 	orr.w	r3, r3, #8
   23582:	70e3      	strb	r3, [r4, #3]
    return rsp_opcode;
   23584:	2009      	movs	r0, #9
}
   23586:	bd70      	pop	{r4, r5, r6, pc}
    return rsp_opcode;
   23588:	2009      	movs	r0, #9
   2358a:	e7fc      	b.n	23586 <ble_ll_ctrl_rx_feature_req+0x5a>

0002358c <ble_ll_ctrl_chanmap_req_make>:
{
   2358c:	b510      	push	{r4, lr}
   2358e:	4604      	mov	r4, r0
   23590:	4608      	mov	r0, r1
    memcpy(pyld, g_ble_ll_conn_params.master_chan_map, BLE_LL_CONN_CHMAP_LEN);
   23592:	4b0e      	ldr	r3, [pc, #56]	; (235cc <ble_ll_ctrl_chanmap_req_make+0x40>)
   23594:	681a      	ldr	r2, [r3, #0]
   23596:	600a      	str	r2, [r1, #0]
   23598:	791b      	ldrb	r3, [r3, #4]
   2359a:	710b      	strb	r3, [r1, #4]
    memcpy(connsm->req_chanmap, pyld, BLE_LL_CONN_CHMAP_LEN);
   2359c:	680b      	ldr	r3, [r1, #0]
   2359e:	f8c4 3025 	str.w	r3, [r4, #37]	; 0x25
   235a2:	790b      	ldrb	r3, [r1, #4]
   235a4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    connsm->chanmap_instant = connsm->event_cntr + connsm->slave_latency + 6 + 1;
   235a8:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
   235ac:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   235b0:	4419      	add	r1, r3
   235b2:	b289      	uxth	r1, r1
   235b4:	3107      	adds	r1, #7
   235b6:	b289      	uxth	r1, r1
   235b8:	8561      	strh	r1, [r4, #42]	; 0x2a
    put_le16(pyld + BLE_LL_CONN_CHMAP_LEN, connsm->chanmap_instant);
   235ba:	3005      	adds	r0, #5
   235bc:	f7fb fab1 	bl	1eb22 <put_le16>
    connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   235c0:	7863      	ldrb	r3, [r4, #1]
   235c2:	f043 0310 	orr.w	r3, r3, #16
   235c6:	7063      	strb	r3, [r4, #1]
}
   235c8:	bd10      	pop	{r4, pc}
   235ca:	bf00      	nop
   235cc:	20003f68 	.word	0x20003f68

000235d0 <ble_ll_ctrl_enc_req_make>:
{
   235d0:	b570      	push	{r4, r5, r6, lr}
   235d2:	4604      	mov	r4, r0
   235d4:	460d      	mov	r5, r1
    put_le64(dptr, connsm->enc_data.host_rand_num);
   235d6:	f500 7390 	add.w	r3, r0, #288	; 0x120
   235da:	e9d3 2300 	ldrd	r2, r3, [r3]
   235de:	4608      	mov	r0, r1
   235e0:	f7fb faad 	bl	1eb3e <put_le64>
    put_le16(dptr + 8, connsm->enc_data.enc_div);
   235e4:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
   235e8:	f105 0008 	add.w	r0, r5, #8
   235ec:	f7fb fa99 	bl	1eb22 <put_le16>
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text + 8, 8);
   235f0:	f504 76a4 	add.w	r6, r4, #328	; 0x148
   235f4:	2108      	movs	r1, #8
   235f6:	4630      	mov	r0, r6
   235f8:	f001 fde0 	bl	251bc <ble_ll_rand_data_get>
    swap_buf(dptr + 10, connsm->enc_data.enc_block.plain_text + 8, 8);
   235fc:	2208      	movs	r2, #8
   235fe:	4631      	mov	r1, r6
   23600:	f105 000a 	add.w	r0, r5, #10
   23604:	f7fb fb0e 	bl	1ec24 <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv, 4);
   23608:	2104      	movs	r1, #4
   2360a:	f504 7094 	add.w	r0, r4, #296	; 0x128
   2360e:	f001 fdd5 	bl	251bc <ble_ll_rand_data_get>
    memcpy(dptr + 18, connsm->enc_data.iv, 4);
   23612:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   23616:	f8c5 3012 	str.w	r3, [r5, #18]
}
   2361a:	bd70      	pop	{r4, r5, r6, pc}

0002361c <ble_ll_ctrl_proc_init>:
 * @param connsm
 * @param ctrl_proc
 */
static struct os_mbuf *
ble_ll_ctrl_proc_init(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   2361c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23620:	4607      	mov	r7, r0
   23622:	460d      	mov	r5, r1
    uint8_t *dptr;
    uint8_t *ctrdata;
    struct os_mbuf *om;

    /* Get an mbuf for the control pdu */
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN, sizeof(struct ble_mbuf_hdr));
   23624:	2110      	movs	r1, #16
   23626:	201b      	movs	r0, #27
   23628:	f7ee f96d 	bl	11906 <os_msys_get_pkthdr>

    if (om) {
   2362c:	4604      	mov	r4, r0
   2362e:	b1d8      	cbz	r0, 23668 <ble_ll_ctrl_proc_init+0x4c>
        /* The control data starts after the opcode (1 byte) */
        dptr = om->om_data;
   23630:	6806      	ldr	r6, [r0, #0]
        ctrdata = dptr + 1;
   23632:	f106 0801 	add.w	r8, r6, #1

        switch (ctrl_proc) {
   23636:	2d08      	cmp	r5, #8
   23638:	d855      	bhi.n	236e6 <ble_ll_ctrl_proc_init+0xca>
   2363a:	e8df f005 	tbb	[pc, r5]
   2363e:	1805      	.short	0x1805
   23640:	36301e48 	.word	0x36301e48
   23644:	5a3b      	.short	0x5a3b
   23646:	42          	.byte	0x42
   23647:	00          	.byte	0x00
        case BLE_LL_CTRL_PROC_CONN_UPDATE:
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
            ble_ll_ctrl_conn_upd_make(connsm, ctrdata, NULL);
   23648:	2200      	movs	r2, #0
   2364a:	4641      	mov	r1, r8
   2364c:	4638      	mov	r0, r7
   2364e:	f7ff fe5b 	bl	23308 <ble_ll_ctrl_conn_upd_make>
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   23652:	2500      	movs	r5, #0
            BLE_LL_ASSERT(0);
            break;
        }

        /* Set llid, length and opcode */
        dptr[0] = opcode;
   23654:	7035      	strb	r5, [r6, #0]
        len = g_ble_ll_ctrl_pkt_lengths[opcode] + 1;
   23656:	4b28      	ldr	r3, [pc, #160]	; (236f8 <ble_ll_ctrl_proc_init+0xdc>)
   23658:	5d5b      	ldrb	r3, [r3, r5]
   2365a:	3301      	adds	r3, #1

        /* Add packet to transmit queue of connection */
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   2365c:	b2db      	uxtb	r3, r3
   2365e:	2203      	movs	r2, #3
   23660:	4621      	mov	r1, r4
   23662:	4638      	mov	r0, r7
   23664:	f7fe fe44 	bl	222f0 <ble_ll_conn_enqueue_pkt>
    }

    return om;
}
   23668:	4620      	mov	r0, r4
   2366a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ble_ll_ctrl_chanmap_req_make(connsm, ctrdata);
   2366e:	4641      	mov	r1, r8
   23670:	4638      	mov	r0, r7
   23672:	f7ff ff8b 	bl	2358c <ble_ll_ctrl_chanmap_req_make>
            opcode = BLE_LL_CTRL_CHANNEL_MAP_REQ;
   23676:	2501      	movs	r5, #1
            break;
   23678:	e7ec      	b.n	23654 <ble_ll_ctrl_proc_init+0x38>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   2367a:	79fb      	ldrb	r3, [r7, #7]
   2367c:	2b01      	cmp	r3, #1
   2367e:	d00c      	beq.n	2369a <ble_ll_ctrl_proc_init+0x7e>
                opcode = BLE_LL_CTRL_SLAVE_FEATURE_REQ;
   23680:	250e      	movs	r5, #14
            memset(ctrdata, 0, BLE_LL_CTRL_FEATURE_LEN);
   23682:	2300      	movs	r3, #0
   23684:	f8c6 3001 	str.w	r3, [r6, #1]
   23688:	f8c8 3004 	str.w	r3, [r8, #4]
            put_le32(ctrdata, ble_ll_read_supp_features());
   2368c:	f7fb fec6 	bl	1f41c <ble_ll_read_supp_features>
   23690:	4601      	mov	r1, r0
   23692:	4640      	mov	r0, r8
   23694:	f7fb fa49 	bl	1eb2a <put_le32>
            break;
   23698:	e7dc      	b.n	23654 <ble_ll_ctrl_proc_init+0x38>
                opcode = BLE_LL_CTRL_FEATURE_REQ;
   2369a:	2508      	movs	r5, #8
   2369c:	e7f1      	b.n	23682 <ble_ll_ctrl_proc_init+0x66>
            ble_ll_ctrl_version_ind_make(connsm, ctrdata);
   2369e:	4641      	mov	r1, r8
   236a0:	4638      	mov	r0, r7
   236a2:	f7ff febb 	bl	2341c <ble_ll_ctrl_version_ind_make>
            opcode = BLE_LL_CTRL_VERSION_IND;
   236a6:	250c      	movs	r5, #12
            break;
   236a8:	e7d4      	b.n	23654 <ble_ll_ctrl_proc_init+0x38>
            ctrdata[0] = connsm->disconnect_reason;
   236aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   236ae:	7073      	strb	r3, [r6, #1]
            opcode = BLE_LL_CTRL_TERMINATE_IND;
   236b0:	2502      	movs	r5, #2
            break;
   236b2:	e7cf      	b.n	23654 <ble_ll_ctrl_proc_init+0x38>
            ble_ll_ctrl_conn_param_pdu_make(connsm, ctrdata, NULL);
   236b4:	2200      	movs	r2, #0
   236b6:	4641      	mov	r1, r8
   236b8:	4638      	mov	r0, r7
   236ba:	f7ff fed6 	bl	2346a <ble_ll_ctrl_conn_param_pdu_make>
            opcode = BLE_LL_CTRL_CONN_PARM_REQ;
   236be:	250f      	movs	r5, #15
            break;
   236c0:	e7c8      	b.n	23654 <ble_ll_ctrl_proc_init+0x38>
            ble_ll_ctrl_datalen_upd_make(connsm, dptr);
   236c2:	4631      	mov	r1, r6
   236c4:	4638      	mov	r0, r7
   236c6:	f7ff febc 	bl	23442 <ble_ll_ctrl_datalen_upd_make>
            opcode = BLE_LL_CTRL_LENGTH_REQ;
   236ca:	2514      	movs	r5, #20
            break;
   236cc:	e7c2      	b.n	23654 <ble_ll_ctrl_proc_init+0x38>
            if (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) {
   236ce:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
   236d2:	2b02      	cmp	r3, #2
   236d4:	d101      	bne.n	236da <ble_ll_ctrl_proc_init+0xbe>
                opcode = BLE_LL_CTRL_PAUSE_ENC_REQ;
   236d6:	250a      	movs	r5, #10
   236d8:	e7bc      	b.n	23654 <ble_ll_ctrl_proc_init+0x38>
                ble_ll_ctrl_enc_req_make(connsm, ctrdata);
   236da:	4641      	mov	r1, r8
   236dc:	4638      	mov	r0, r7
   236de:	f7ff ff77 	bl	235d0 <ble_ll_ctrl_enc_req_make>
                opcode = BLE_LL_CTRL_ENC_REQ;
   236e2:	2503      	movs	r5, #3
   236e4:	e7b6      	b.n	23654 <ble_ll_ctrl_proc_init+0x38>
            BLE_LL_ASSERT(0);
   236e6:	2300      	movs	r3, #0
   236e8:	461a      	mov	r2, r3
   236ea:	4619      	mov	r1, r3
   236ec:	4618      	mov	r0, r3
   236ee:	f7ec ff75 	bl	105dc <__assert_func>
            opcode = BLE_LL_CTRL_PING_REQ;
   236f2:	2512      	movs	r5, #18
   236f4:	e7ae      	b.n	23654 <ble_ll_ctrl_proc_init+0x38>
   236f6:	bf00      	nop
   236f8:	0002c938 	.word	0x0002c938

000236fc <ble_ll_ctrl_rx_conn_update>:
{
   236fc:	b538      	push	{r3, r4, r5, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   236fe:	79c3      	ldrb	r3, [r0, #7]
   23700:	2b01      	cmp	r3, #1
   23702:	d03b      	beq.n	2377c <ble_ll_ctrl_rx_conn_update+0x80>
   23704:	460d      	mov	r5, r1
   23706:	4604      	mov	r4, r0
    reqdata->winsize = dptr[0];
   23708:	4608      	mov	r0, r1
   2370a:	f810 3b01 	ldrb.w	r3, [r0], #1
   2370e:	f884 316e 	strb.w	r3, [r4, #366]	; 0x16e
    reqdata->winoffset = get_le16(dptr + 1);
   23712:	f7fb fa27 	bl	1eb64 <get_le16>
   23716:	f8a4 0170 	strh.w	r0, [r4, #368]	; 0x170
    reqdata->interval = get_le16(dptr + 3);
   2371a:	1ce8      	adds	r0, r5, #3
   2371c:	f7fb fa22 	bl	1eb64 <get_le16>
   23720:	f8a4 0172 	strh.w	r0, [r4, #370]	; 0x172
    reqdata->latency = get_le16(dptr + 5);
   23724:	1d68      	adds	r0, r5, #5
   23726:	f7fb fa1d 	bl	1eb64 <get_le16>
   2372a:	f8a4 0174 	strh.w	r0, [r4, #372]	; 0x174
    reqdata->timeout = get_le16(dptr + 7);
   2372e:	1de8      	adds	r0, r5, #7
   23730:	f7fb fa18 	bl	1eb64 <get_le16>
   23734:	f8a4 0176 	strh.w	r0, [r4, #374]	; 0x176
    reqdata->instant = get_le16(dptr + 9);
   23738:	f105 0009 	add.w	r0, r5, #9
   2373c:	f7fb fa12 	bl	1eb64 <get_le16>
   23740:	f8a4 0178 	strh.w	r0, [r4, #376]	; 0x178
    conn_events = (reqdata->instant - connsm->event_cntr) & 0xFFFF;
   23744:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   23748:	1ac3      	subs	r3, r0, r3
   2374a:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   2374c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   23750:	4293      	cmp	r3, r2
   23752:	d80d      	bhi.n	23770 <ble_ll_ctrl_rx_conn_update+0x74>
        connsm->csmflags.cfbit.conn_update_sched = 1;
   23754:	7862      	ldrb	r2, [r4, #1]
   23756:	f042 0201 	orr.w	r2, r2, #1
   2375a:	7062      	strb	r2, [r4, #1]
        if (conn_events == 0) {
   2375c:	b983      	cbnz	r3, 23780 <ble_ll_ctrl_rx_conn_update+0x84>
            reqdata->winoffset = 0;
   2375e:	f8a4 3170 	strh.w	r3, [r4, #368]	; 0x170
            reqdata->winsize = 0;
   23762:	f884 316e 	strb.w	r3, [r4, #366]	; 0x16e
            reqdata->instant += 1;
   23766:	3001      	adds	r0, #1
   23768:	f8a4 0178 	strh.w	r0, [r4, #376]	; 0x178
    return rsp_opcode;
   2376c:	20ff      	movs	r0, #255	; 0xff
   2376e:	e006      	b.n	2377e <ble_ll_ctrl_rx_conn_update+0x82>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   23770:	2128      	movs	r1, #40	; 0x28
   23772:	4620      	mov	r0, r4
   23774:	f7fe fbb6 	bl	21ee4 <ble_ll_conn_timeout>
    return rsp_opcode;
   23778:	20ff      	movs	r0, #255	; 0xff
   2377a:	e000      	b.n	2377e <ble_ll_ctrl_rx_conn_update+0x82>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   2377c:	2007      	movs	r0, #7
}
   2377e:	bd38      	pop	{r3, r4, r5, pc}
    return rsp_opcode;
   23780:	20ff      	movs	r0, #255	; 0xff
   23782:	e7fc      	b.n	2377e <ble_ll_ctrl_rx_conn_update+0x82>

00023784 <ble_ll_ctrl_rx_chanmap_req>:
{
   23784:	b538      	push	{r3, r4, r5, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   23786:	79c3      	ldrb	r3, [r0, #7]
   23788:	2b01      	cmp	r3, #1
   2378a:	d01f      	beq.n	237cc <ble_ll_ctrl_rx_chanmap_req+0x48>
   2378c:	460d      	mov	r5, r1
   2378e:	4604      	mov	r4, r0
    instant = get_le16(dptr + BLE_LL_CONN_CHMAP_LEN);
   23790:	1d48      	adds	r0, r1, #5
   23792:	f7fb f9e7 	bl	1eb64 <get_le16>
    conn_events = (instant - connsm->event_cntr) & 0xFFFF;
   23796:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   2379a:	1ac3      	subs	r3, r0, r3
   2379c:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   2379e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   237a2:	4293      	cmp	r3, r2
   237a4:	d80c      	bhi.n	237c0 <ble_ll_ctrl_rx_chanmap_req+0x3c>
        connsm->chanmap_instant = instant;
   237a6:	8560      	strh	r0, [r4, #42]	; 0x2a
        memcpy(connsm->req_chanmap, dptr, BLE_LL_CONN_CHMAP_LEN);
   237a8:	682b      	ldr	r3, [r5, #0]
   237aa:	f8c4 3025 	str.w	r3, [r4, #37]	; 0x25
   237ae:	792b      	ldrb	r3, [r5, #4]
   237b0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
        connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   237b4:	7863      	ldrb	r3, [r4, #1]
   237b6:	f043 0310 	orr.w	r3, r3, #16
   237ba:	7063      	strb	r3, [r4, #1]
    return BLE_ERR_MAX;
   237bc:	20ff      	movs	r0, #255	; 0xff
   237be:	e006      	b.n	237ce <ble_ll_ctrl_rx_chanmap_req+0x4a>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   237c0:	2128      	movs	r1, #40	; 0x28
   237c2:	4620      	mov	r0, r4
   237c4:	f7fe fb8e 	bl	21ee4 <ble_ll_conn_timeout>
    return BLE_ERR_MAX;
   237c8:	20ff      	movs	r0, #255	; 0xff
   237ca:	e000      	b.n	237ce <ble_ll_ctrl_rx_chanmap_req+0x4a>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   237cc:	2007      	movs	r0, #7
}
   237ce:	bd38      	pop	{r3, r4, r5, pc}

000237d0 <ble_ll_ctrl_len_proc>:
{
   237d0:	b530      	push	{r4, r5, lr}
   237d2:	b083      	sub	sp, #12
   237d4:	4605      	mov	r5, r0
   237d6:	460c      	mov	r4, r1
    ctrl_req.max_rx_bytes = get_le16(dptr);
   237d8:	4608      	mov	r0, r1
   237da:	f7fb f9c3 	bl	1eb64 <get_le16>
   237de:	f8ad 0000 	strh.w	r0, [sp]
    ctrl_req.max_rx_time = get_le16(dptr + 2);
   237e2:	1ca0      	adds	r0, r4, #2
   237e4:	f7fb f9be 	bl	1eb64 <get_le16>
   237e8:	f8ad 0002 	strh.w	r0, [sp, #2]
    ctrl_req.max_tx_bytes = get_le16(dptr + 4);
   237ec:	1d20      	adds	r0, r4, #4
   237ee:	f7fb f9b9 	bl	1eb64 <get_le16>
   237f2:	f8ad 0004 	strh.w	r0, [sp, #4]
    ctrl_req.max_tx_time = get_le16(dptr + 6);
   237f6:	1da0      	adds	r0, r4, #6
   237f8:	f7fb f9b4 	bl	1eb64 <get_le16>
   237fc:	f8ad 0006 	strh.w	r0, [sp, #6]
    if ((ctrl_req.max_rx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   23800:	f8bd 3000 	ldrh.w	r3, [sp]
   23804:	2b1a      	cmp	r3, #26
   23806:	d913      	bls.n	23830 <ble_ll_ctrl_len_proc+0x60>
        (ctrl_req.max_rx_time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   23808:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    if ((ctrl_req.max_rx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   2380c:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   23810:	d311      	bcc.n	23836 <ble_ll_ctrl_len_proc+0x66>
        (ctrl_req.max_tx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   23812:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        (ctrl_req.max_rx_time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   23816:	2b1a      	cmp	r3, #26
   23818:	d90f      	bls.n	2383a <ble_ll_ctrl_len_proc+0x6a>
        (ctrl_req.max_tx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   2381a:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   2381e:	d201      	bcs.n	23824 <ble_ll_ctrl_len_proc+0x54>
        rc = 1;
   23820:	2001      	movs	r0, #1
    return rc;
   23822:	e006      	b.n	23832 <ble_ll_ctrl_len_proc+0x62>
        ble_ll_conn_datalen_update(connsm, &ctrl_req);
   23824:	4669      	mov	r1, sp
   23826:	4628      	mov	r0, r5
   23828:	f7fd ffe4 	bl	217f4 <ble_ll_conn_datalen_update>
        rc = 0;
   2382c:	2000      	movs	r0, #0
   2382e:	e000      	b.n	23832 <ble_ll_ctrl_len_proc+0x62>
        rc = 1;
   23830:	2001      	movs	r0, #1
}
   23832:	b003      	add	sp, #12
   23834:	bd30      	pop	{r4, r5, pc}
        rc = 1;
   23836:	2001      	movs	r0, #1
   23838:	e7fb      	b.n	23832 <ble_ll_ctrl_len_proc+0x62>
   2383a:	2001      	movs	r0, #1
   2383c:	e7f9      	b.n	23832 <ble_ll_ctrl_len_proc+0x62>

0002383e <ble_ll_ctrl_rx_enc_req>:
{
   2383e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (connsm->conn_role != BLE_LL_CONN_ROLE_SLAVE) {
   23840:	79c3      	ldrb	r3, [r0, #7]
   23842:	2b02      	cmp	r3, #2
   23844:	d001      	beq.n	2384a <ble_ll_ctrl_rx_enc_req+0xc>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   23846:	2007      	movs	r0, #7
}
   23848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2384a:	4616      	mov	r6, r2
   2384c:	460d      	mov	r5, r1
   2384e:	4604      	mov	r4, r0
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_REQ_WAIT;
   23850:	2708      	movs	r7, #8
   23852:	f880 7118 	strb.w	r7, [r0, #280]	; 0x118
    connsm->enc_data.rx_pkt_cntr = 0;
   23856:	2300      	movs	r3, #0
   23858:	f8a0 311e 	strh.w	r3, [r0, #286]	; 0x11e
    connsm->enc_data.tx_pkt_cntr = 0;
   2385c:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
    connsm->enc_data.tx_encrypted = 0;
   23860:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
    connsm->enc_data.host_rand_num = get_le64(dptr);
   23864:	4608      	mov	r0, r1
   23866:	f7fb f98d 	bl	1eb84 <get_le64>
   2386a:	f504 7390 	add.w	r3, r4, #288	; 0x120
   2386e:	e9c3 0100 	strd	r0, r1, [r3]
    connsm->enc_data.enc_div = get_le16(dptr + 8);
   23872:	19e8      	adds	r0, r5, r7
   23874:	f7fb f976 	bl	1eb64 <get_le16>
   23878:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    swap_buf(connsm->enc_data.enc_block.plain_text + 8, dptr + 10, 8);
   2387c:	463a      	mov	r2, r7
   2387e:	f105 010a 	add.w	r1, r5, #10
   23882:	f504 70a4 	add.w	r0, r4, #328	; 0x148
   23886:	f7fb f9cd 	bl	1ec24 <swap_buf>
    memcpy(connsm->enc_data.iv, dptr + 18, 4);
   2388a:	f8d5 3012 	ldr.w	r3, [r5, #18]
   2388e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text, 8);
   23892:	f504 75a0 	add.w	r5, r4, #320	; 0x140
   23896:	4639      	mov	r1, r7
   23898:	4628      	mov	r0, r5
   2389a:	f001 fc8f 	bl	251bc <ble_ll_rand_data_get>
    swap_buf(rspdata, connsm->enc_data.enc_block.plain_text, 8);
   2389e:	463a      	mov	r2, r7
   238a0:	4629      	mov	r1, r5
   238a2:	4630      	mov	r0, r6
   238a4:	f7fb f9be 	bl	1ec24 <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv + 4, 4);
   238a8:	2104      	movs	r1, #4
   238aa:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   238ae:	f001 fc85 	bl	251bc <ble_ll_rand_data_get>
    memcpy(rspdata + 8, connsm->enc_data.iv + 4, 4);
   238b2:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   238b6:	60b3      	str	r3, [r6, #8]
    return BLE_LL_CTRL_ENC_RSP;
   238b8:	2004      	movs	r0, #4
   238ba:	e7c5      	b.n	23848 <ble_ll_ctrl_rx_enc_req+0xa>

000238bc <ble_ll_calc_session_key>:
{
   238bc:	b510      	push	{r4, lr}
   238be:	4604      	mov	r4, r0
        if (!ble_hw_encrypt_block(&connsm->enc_data.enc_block)) {
   238c0:	f504 7098 	add.w	r0, r4, #304	; 0x130
   238c4:	f004 f8fa 	bl	27abc <ble_hw_encrypt_block>
   238c8:	2800      	cmp	r0, #0
   238ca:	d1f9      	bne.n	238c0 <ble_ll_calc_session_key+0x4>
}
   238cc:	bd10      	pop	{r4, pc}

000238ce <ble_ll_ctrl_rx_enc_rsp>:
{
   238ce:	b538      	push	{r3, r4, r5, lr}
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   238d0:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   238d4:	2b02      	cmp	r3, #2
   238d6:	d000      	beq.n	238da <ble_ll_ctrl_rx_enc_rsp+0xc>
}
   238d8:	bd38      	pop	{r3, r4, r5, pc}
   238da:	460d      	mov	r5, r1
   238dc:	4604      	mov	r4, r0
        connsm->enc_data.rx_pkt_cntr = 0;
   238de:	2300      	movs	r3, #0
   238e0:	f8a0 311e 	strh.w	r3, [r0, #286]	; 0x11e
        connsm->enc_data.tx_pkt_cntr = 0;
   238e4:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
        connsm->enc_data.tx_encrypted = 0;
   238e8:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
        swap_buf(connsm->enc_data.enc_block.plain_text, dptr, 8);
   238ec:	2208      	movs	r2, #8
   238ee:	f500 70a0 	add.w	r0, r0, #320	; 0x140
   238f2:	f7fb f997 	bl	1ec24 <swap_buf>
        memcpy(connsm->enc_data.iv + 4, dptr + 8, 4);
   238f6:	68ab      	ldr	r3, [r5, #8]
   238f8:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
        ble_ll_calc_session_key(connsm);
   238fc:	4620      	mov	r0, r4
   238fe:	f7ff ffdd 	bl	238bc <ble_ll_calc_session_key>
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_REQ_WAIT;
   23902:	2306      	movs	r3, #6
   23904:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
}
   23908:	e7e6      	b.n	238d8 <ble_ll_ctrl_rx_enc_rsp+0xa>

0002390a <ble_ll_ctrl_enc_allowed_pdu_rx>:
{
   2390a:	b508      	push	{r3, lr}
    llid = rxpdu->om_data[0] & BLE_LL_DATA_HDR_LLID_MASK;
   2390c:	6803      	ldr	r3, [r0, #0]
   2390e:	7818      	ldrb	r0, [r3, #0]
   23910:	f000 0003 	and.w	r0, r0, #3
    len = rxpdu->om_data[1];
   23914:	7859      	ldrb	r1, [r3, #1]
    if (llid == BLE_LL_LLID_CTRL) {
   23916:	2803      	cmp	r0, #3
   23918:	d003      	beq.n	23922 <ble_ll_ctrl_enc_allowed_pdu_rx+0x18>
        opcode = 0;
   2391a:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   2391c:	f7ff fc90 	bl	23240 <ble_ll_ctrl_enc_allowed_pdu>
}
   23920:	bd08      	pop	{r3, pc}
        opcode = rxpdu->om_data[2];
   23922:	789a      	ldrb	r2, [r3, #2]
   23924:	e7fa      	b.n	2391c <ble_ll_ctrl_enc_allowed_pdu_rx+0x12>

00023926 <ble_ll_ctrl_enc_allowed_pdu_tx>:
{
   23926:	b508      	push	{r3, lr}
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   23928:	7ac3      	ldrb	r3, [r0, #11]
   2392a:	f003 0303 	and.w	r3, r3, #3
    len = ble_hdr->txinfo.pyld_len;
   2392e:	7a81      	ldrb	r1, [r0, #10]
    if (llid == BLE_LL_LLID_CTRL) {
   23930:	2b03      	cmp	r3, #3
   23932:	d004      	beq.n	2393e <ble_ll_ctrl_enc_allowed_pdu_tx+0x18>
        opcode = 0;
   23934:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   23936:	4618      	mov	r0, r3
   23938:	f7ff fc82 	bl	23240 <ble_ll_ctrl_enc_allowed_pdu>
}
   2393c:	bd08      	pop	{r3, pc}
        opcode = m->om_data[0];
   2393e:	f850 2c10 	ldr.w	r2, [r0, #-16]
   23942:	7812      	ldrb	r2, [r2, #0]
   23944:	e7f7      	b.n	23936 <ble_ll_ctrl_enc_allowed_pdu_tx+0x10>

00023946 <ble_ll_ctrl_is_start_enc_rsp>:
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   23946:	7ec3      	ldrb	r3, [r0, #27]
   23948:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   2394c:	2b03      	cmp	r3, #3
   2394e:	d001      	beq.n	23954 <ble_ll_ctrl_is_start_enc_rsp+0xe>
    is_start_enc_rsp = 0;
   23950:	2000      	movs	r0, #0
   23952:	4770      	bx	lr
        opcode = txpdu->om_data[0];
   23954:	6803      	ldr	r3, [r0, #0]
   23956:	781b      	ldrb	r3, [r3, #0]
        if (opcode == BLE_LL_CTRL_START_ENC_RSP) {
   23958:	2b06      	cmp	r3, #6
   2395a:	d001      	beq.n	23960 <ble_ll_ctrl_is_start_enc_rsp+0x1a>
    is_start_enc_rsp = 0;
   2395c:	2000      	movs	r0, #0
   2395e:	4770      	bx	lr
            is_start_enc_rsp = 1;
   23960:	2001      	movs	r0, #1
}
   23962:	4770      	bx	lr

00023964 <ble_ll_ctrl_start_enc_send>:
{
   23964:	b510      	push	{r4, lr}
   23966:	4604      	mov	r4, r0
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   23968:	2110      	movs	r1, #16
   2396a:	201b      	movs	r0, #27
   2396c:	f7ed ffcb 	bl	11906 <os_msys_get_pkthdr>
    if (om) {
   23970:	b1b0      	cbz	r0, 239a0 <ble_ll_ctrl_start_enc_send+0x3c>
   23972:	4601      	mov	r1, r0
        om->om_data[0] = BLE_LL_CTRL_START_ENC_REQ;
   23974:	6803      	ldr	r3, [r0, #0]
   23976:	2205      	movs	r2, #5
   23978:	701a      	strb	r2, [r3, #0]
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, 1);
   2397a:	2301      	movs	r3, #1
   2397c:	2203      	movs	r2, #3
   2397e:	4620      	mov	r0, r4
   23980:	f7fe fcb6 	bl	222f0 <ble_ll_conn_enqueue_pkt>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   23984:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   23988:	2bff      	cmp	r3, #255	; 0xff
   2398a:	d001      	beq.n	23990 <ble_ll_ctrl_start_enc_send+0x2c>
        rc = 0;
   2398c:	2000      	movs	r0, #0
}
   2398e:	bd10      	pop	{r4, pc}
            connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_ENCRYPT;
   23990:	2302      	movs	r3, #2
   23992:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            ble_ll_ctrl_start_rsp_timer(connsm);
   23996:	4620      	mov	r0, r4
   23998:	f7ff fca2 	bl	232e0 <ble_ll_ctrl_start_rsp_timer>
        rc = 0;
   2399c:	2000      	movs	r0, #0
   2399e:	e7f6      	b.n	2398e <ble_ll_ctrl_start_enc_send+0x2a>
        rc = -1;
   239a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   239a4:	e7f3      	b.n	2398e <ble_ll_ctrl_start_enc_send+0x2a>

000239a6 <ble_ll_ctrl_conn_param_reply>:
{
   239a6:	b508      	push	{r3, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   239a8:	79c3      	ldrb	r3, [r0, #7]
   239aa:	2b02      	cmp	r3, #2
   239ac:	d004      	beq.n	239b8 <ble_ll_ctrl_conn_param_reply+0x12>
        ble_ll_ctrl_conn_upd_make(connsm, rsp + 1, req);
   239ae:	3101      	adds	r1, #1
   239b0:	f7ff fcaa 	bl	23308 <ble_ll_ctrl_conn_upd_make>
        rsp_opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   239b4:	2000      	movs	r0, #0
}
   239b6:	bd08      	pop	{r3, pc}
        ble_ll_ctrl_conn_param_pdu_make(connsm, rsp + 1, req);
   239b8:	3101      	adds	r1, #1
   239ba:	f7ff fd56 	bl	2346a <ble_ll_ctrl_conn_param_pdu_make>
        rsp_opcode = BLE_LL_CTRL_CONN_PARM_RSP;
   239be:	2010      	movs	r0, #16
   239c0:	e7f9      	b.n	239b6 <ble_ll_ctrl_conn_param_reply+0x10>

000239c2 <ble_ll_ctrl_conn_param_pdu_proc>:
{
   239c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   239c6:	4604      	mov	r4, r0
   239c8:	460d      	mov	r5, r1
   239ca:	4617      	mov	r7, r2
   239cc:	461e      	mov	r6, r3
    req = &connsm->conn_cp;
   239ce:	f500 78bd 	add.w	r8, r0, #378	; 0x17a
    req->interval_min = get_le16(dptr);
   239d2:	4608      	mov	r0, r1
   239d4:	f7fb f8c6 	bl	1eb64 <get_le16>
   239d8:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
    req->interval_max = get_le16(dptr + 2);
   239dc:	1ca8      	adds	r0, r5, #2
   239de:	f7fb f8c1 	bl	1eb64 <get_le16>
   239e2:	f8a4 017c 	strh.w	r0, [r4, #380]	; 0x17c
    req->latency = get_le16(dptr + 4);
   239e6:	1d28      	adds	r0, r5, #4
   239e8:	f7fb f8bc 	bl	1eb64 <get_le16>
   239ec:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    req->timeout = get_le16(dptr + 6);
   239f0:	1da8      	adds	r0, r5, #6
   239f2:	f7fb f8b7 	bl	1eb64 <get_le16>
   239f6:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
    req->pref_periodicity = dptr[8];
   239fa:	7a2b      	ldrb	r3, [r5, #8]
   239fc:	f884 3182 	strb.w	r3, [r4, #386]	; 0x182
    req->ref_conn_event_cnt  = get_le16(dptr + 9);
   23a00:	f105 0009 	add.w	r0, r5, #9
   23a04:	f7fb f8ae 	bl	1eb64 <get_le16>
   23a08:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
    req->offset0 = get_le16(dptr + 11);
   23a0c:	f105 000b 	add.w	r0, r5, #11
   23a10:	f7fb f8a8 	bl	1eb64 <get_le16>
   23a14:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
    req->offset1 = get_le16(dptr + 13);
   23a18:	f105 000d 	add.w	r0, r5, #13
   23a1c:	f7fb f8a2 	bl	1eb64 <get_le16>
   23a20:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
    req->offset2 = get_le16(dptr + 15);
   23a24:	f105 000f 	add.w	r0, r5, #15
   23a28:	f7fb f89c 	bl	1eb64 <get_le16>
   23a2c:	f8a4 018a 	strh.w	r0, [r4, #394]	; 0x18a
    req->offset3 = get_le16(dptr + 17);
   23a30:	f105 0011 	add.w	r0, r5, #17
   23a34:	f7fb f896 	bl	1eb64 <get_le16>
   23a38:	f8a4 018c 	strh.w	r0, [r4, #396]	; 0x18c
    req->offset4 = get_le16(dptr + 19);
   23a3c:	f105 0013 	add.w	r0, r5, #19
   23a40:	f7fb f890 	bl	1eb64 <get_le16>
   23a44:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
    req->offset5 = get_le16(dptr + 21);
   23a48:	f105 0015 	add.w	r0, r5, #21
   23a4c:	f7fb f88a 	bl	1eb64 <get_le16>
   23a50:	f8a4 0190 	strh.w	r0, [r4, #400]	; 0x190
    rc = ble_ll_conn_hci_chk_conn_params(req->interval_min,
   23a54:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
   23a58:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
   23a5c:	f8b4 117c 	ldrh.w	r1, [r4, #380]	; 0x17c
   23a60:	f8b4 017a 	ldrh.w	r0, [r4, #378]	; 0x17a
   23a64:	f7fe fe6e 	bl	22744 <ble_ll_conn_hci_chk_conn_params>
    if (rc) {
   23a68:	2800      	cmp	r0, #0
   23a6a:	d156      	bne.n	23b1a <ble_ll_ctrl_conn_param_pdu_proc+0x158>
    if (opcode == BLE_LL_CTRL_CONN_PARM_REQ) {
   23a6c:	2e0f      	cmp	r6, #15
   23a6e:	d00b      	beq.n	23a88 <ble_ll_ctrl_conn_param_pdu_proc+0xc6>
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) ||
   23a70:	79e3      	ldrb	r3, [r4, #7]
   23a72:	2b02      	cmp	r3, #2
   23a74:	d024      	beq.n	23ac0 <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
   23a76:	2e10      	cmp	r6, #16
   23a78:	d022      	beq.n	23ac0 <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
        if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)){
   23a7a:	2006      	movs	r0, #6
   23a7c:	f001 f994 	bl	24da8 <ble_ll_hci_is_le_event_enabled>
   23a80:	2800      	cmp	r0, #0
   23a82:	d13e      	bne.n	23b02 <ble_ll_ctrl_conn_param_pdu_proc+0x140>
            ble_err = BLE_ERR_UNSUPP_REM_FEATURE;
   23a84:	231a      	movs	r3, #26
   23a86:	e049      	b.n	23b1c <ble_ll_ctrl_conn_param_pdu_proc+0x15a>
        if ((connsm->conn_itvl >= req->interval_min) &&
   23a88:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   23a8c:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
   23a90:	4293      	cmp	r3, r2
   23a92:	d3ed      	bcc.n	23a70 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->conn_itvl <= req->interval_max) &&
   23a94:	f8b4 217c 	ldrh.w	r2, [r4, #380]	; 0x17c
        if ((connsm->conn_itvl >= req->interval_min) &&
   23a98:	4293      	cmp	r3, r2
   23a9a:	d8e9      	bhi.n	23a70 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->supervision_tmo == req->timeout) &&
   23a9c:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   23aa0:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
            (connsm->conn_itvl <= req->interval_max) &&
   23aa4:	429a      	cmp	r2, r3
   23aa6:	d1e3      	bne.n	23a70 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->slave_latency == req->latency)) {
   23aa8:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   23aac:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
            (connsm->supervision_tmo == req->timeout) &&
   23ab0:	429a      	cmp	r2, r3
   23ab2:	d1dd      	bne.n	23a70 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
        rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, rspbuf, req);
   23ab4:	4642      	mov	r2, r8
   23ab6:	4639      	mov	r1, r7
   23ab8:	4620      	mov	r0, r4
   23aba:	f7ff ff74 	bl	239a6 <ble_ll_ctrl_conn_param_reply>
   23abe:	e030      	b.n	23b22 <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        if (hcu->handle != 0) {
   23ac0:	f8b4 3160 	ldrh.w	r3, [r4, #352]	; 0x160
   23ac4:	2b00      	cmp	r3, #0
   23ac6:	d0d8      	beq.n	23a7a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   23ac8:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   23acc:	f8b4 2162 	ldrh.w	r2, [r4, #354]	; 0x162
   23ad0:	4293      	cmp	r3, r2
   23ad2:	d3d2      	bcc.n	23a7a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_min > hcu->conn_itvl_max) ||
   23ad4:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   23ad8:	428b      	cmp	r3, r1
   23ada:	d8ce      	bhi.n	23a7a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   23adc:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
                  (req->interval_min > hcu->conn_itvl_max) ||
   23ae0:	429a      	cmp	r2, r3
   23ae2:	d8ca      	bhi.n	23a7a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   23ae4:	4299      	cmp	r1, r3
   23ae6:	d3c8      	bcc.n	23a7a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->latency != hcu->conn_latency) ||
   23ae8:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
   23aec:	f8b4 3166 	ldrh.w	r3, [r4, #358]	; 0x166
                  (req->interval_max > hcu->conn_itvl_max) ||
   23af0:	429a      	cmp	r2, r3
   23af2:	d1c2      	bne.n	23a7a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->timeout != hcu->supervision_timeout))) {
   23af4:	f8b4 2180 	ldrh.w	r2, [r4, #384]	; 0x180
   23af8:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   23afc:	429a      	cmp	r2, r3
   23afe:	d1bc      	bne.n	23a7a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
   23b00:	e7d8      	b.n	23ab4 <ble_ll_ctrl_conn_param_pdu_proc+0xf2>
        ble_ll_hci_ev_rem_conn_parm_req(connsm, req);
   23b02:	4641      	mov	r1, r8
   23b04:	4620      	mov	r0, r4
   23b06:	f001 f9f2 	bl	24eee <ble_ll_hci_ev_rem_conn_parm_req>
        connsm->host_reply_opcode = opcode;
   23b0a:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
        connsm->csmflags.cfbit.awaiting_host_reply = 1;
   23b0e:	7823      	ldrb	r3, [r4, #0]
   23b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23b14:	7023      	strb	r3, [r4, #0]
        rsp_opcode = 255;
   23b16:	20ff      	movs	r0, #255	; 0xff
   23b18:	e003      	b.n	23b22 <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        ble_err = BLE_ERR_INV_LMP_LL_PARM;
   23b1a:	231e      	movs	r3, #30
        rspbuf[1] = opcode;
   23b1c:	707e      	strb	r6, [r7, #1]
        rspbuf[2] = ble_err;
   23b1e:	70bb      	strb	r3, [r7, #2]
        rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   23b20:	2011      	movs	r0, #17
}
   23b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023b26 <ble_ll_ctrl_rx_conn_param_rsp>:
{
   23b26:	b508      	push	{r3, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   23b28:	79c3      	ldrb	r3, [r0, #7]
   23b2a:	2b02      	cmp	r3, #2
   23b2c:	d011      	beq.n	23b52 <ble_ll_ctrl_rx_conn_param_rsp+0x2c>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   23b2e:	7803      	ldrb	r3, [r0, #0]
   23b30:	f013 0f40 	tst.w	r3, #64	; 0x40
   23b34:	d003      	beq.n	23b3e <ble_ll_ctrl_rx_conn_param_rsp+0x18>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   23b36:	7803      	ldrb	r3, [r0, #0]
   23b38:	f36f 1386 	bfc	r3, #6, #1
   23b3c:	7003      	strb	r3, [r0, #0]
    if (!IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   23b3e:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   23b42:	f013 0f40 	tst.w	r3, #64	; 0x40
   23b46:	d006      	beq.n	23b56 <ble_ll_ctrl_rx_conn_param_rsp+0x30>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   23b48:	2310      	movs	r3, #16
   23b4a:	f7ff ff3a 	bl	239c2 <ble_ll_ctrl_conn_param_pdu_proc>
   23b4e:	b2c0      	uxtb	r0, r0
}
   23b50:	bd08      	pop	{r3, pc}
        return BLE_LL_CTRL_UNKNOWN_RSP;
   23b52:	2007      	movs	r0, #7
   23b54:	e7fc      	b.n	23b50 <ble_ll_ctrl_rx_conn_param_rsp+0x2a>
        return BLE_ERR_MAX;
   23b56:	20ff      	movs	r0, #255	; 0xff
   23b58:	e7fa      	b.n	23b50 <ble_ll_ctrl_rx_conn_param_rsp+0x2a>

00023b5a <ble_ll_ctrl_is_terminate_ind>:
ble_ll_ctrl_is_terminate_ind(uint8_t hdr, uint8_t opcode)
{
    int rc;

    rc = 0;
    if ((hdr & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   23b5a:	f000 0003 	and.w	r0, r0, #3
   23b5e:	2803      	cmp	r0, #3
   23b60:	d001      	beq.n	23b66 <ble_ll_ctrl_is_terminate_ind+0xc>
    rc = 0;
   23b62:	2000      	movs	r0, #0
   23b64:	4770      	bx	lr
        if (opcode == BLE_LL_CTRL_TERMINATE_IND) {
   23b66:	2902      	cmp	r1, #2
   23b68:	d001      	beq.n	23b6e <ble_ll_ctrl_is_terminate_ind+0x14>
    rc = 0;
   23b6a:	2000      	movs	r0, #0
   23b6c:	4770      	bx	lr
            rc = 1;
   23b6e:	2001      	movs	r0, #1
        }
    }
    return rc;
}
   23b70:	4770      	bx	lr

00023b72 <ble_ll_ctrl_terminate_start>:
 *
 * @param connsm
 */
void
ble_ll_ctrl_terminate_start(struct ble_ll_conn_sm *connsm)
{
   23b72:	b570      	push	{r4, r5, r6, lr}
    int ctrl_proc;
    uint32_t usecs;
    struct os_mbuf *om;

    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   23b74:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   23b78:	b1bb      	cbz	r3, 23baa <ble_ll_ctrl_terminate_start+0x38>
   23b7a:	4604      	mov	r4, r0

    ctrl_proc = BLE_LL_CTRL_PROC_TERMINATE;
    om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   23b7c:	2105      	movs	r1, #5
   23b7e:	f7ff fd4d 	bl	2361c <ble_ll_ctrl_proc_init>
    if (om) {
   23b82:	b188      	cbz	r0, 23ba8 <ble_ll_ctrl_terminate_start+0x36>
        CONN_F_TERMINATE_STARTED(connsm) = 1;
   23b84:	7823      	ldrb	r3, [r4, #0]
   23b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23b8a:	7023      	strb	r3, [r4, #0]

        /* Set terminate "timeout" */
        usecs = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000;
   23b8c:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   23b90:	f242 7610 	movw	r6, #10000	; 0x2710
   23b94:	fb06 f603 	mul.w	r6, r6, r3
        connsm->terminate_timeout = os_cputime_get32() +
   23b98:	f7ec ff6e 	bl	10a78 <os_cputime_get32>
   23b9c:	4605      	mov	r5, r0
            os_cputime_usecs_to_ticks(usecs);
   23b9e:	4630      	mov	r0, r6
   23ba0:	f7ec ff70 	bl	10a84 <os_cputime_usecs_to_ticks>
        connsm->terminate_timeout = os_cputime_get32() +
   23ba4:	4428      	add	r0, r5
   23ba6:	6620      	str	r0, [r4, #96]	; 0x60
    }
}
   23ba8:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   23baa:	461a      	mov	r2, r3
   23bac:	4619      	mov	r1, r3
   23bae:	4618      	mov	r0, r3
   23bb0:	f7ec fd14 	bl	105dc <__assert_func>

00023bb4 <ble_ll_ctrl_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_proc_start(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   23bb4:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   23bb6:	2905      	cmp	r1, #5
   23bb8:	d00d      	beq.n	23bd6 <ble_ll_ctrl_proc_start+0x22>
   23bba:	4604      	mov	r4, r0
   23bbc:	460d      	mov	r5, r1

    om = NULL;
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   23bbe:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   23bc2:	2bff      	cmp	r3, #255	; 0xff
   23bc4:	d00d      	beq.n	23be2 <ble_ll_ctrl_proc_start+0x2e>
            }
        }
    }

    /* Set bitmask denoting control procedure is pending */
    connsm->pending_ctrl_procs |= (1 << ctrl_proc);
   23bc6:	2101      	movs	r1, #1
   23bc8:	40a9      	lsls	r1, r5
   23bca:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   23bce:	4319      	orrs	r1, r3
   23bd0:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
}
   23bd4:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   23bd6:	2300      	movs	r3, #0
   23bd8:	461a      	mov	r2, r3
   23bda:	4619      	mov	r1, r3
   23bdc:	4618      	mov	r0, r3
   23bde:	f7ec fcfd 	bl	105dc <__assert_func>
        om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   23be2:	f7ff fd1b 	bl	2361c <ble_ll_ctrl_proc_init>
        if (om) {
   23be6:	2800      	cmp	r0, #0
   23be8:	d0ed      	beq.n	23bc6 <ble_ll_ctrl_proc_start+0x12>
            connsm->cur_ctrl_proc = ctrl_proc;
   23bea:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
            if (ctrl_proc != BLE_LL_CTRL_PROC_CHAN_MAP_UPD) {
   23bee:	2d01      	cmp	r5, #1
   23bf0:	d0e9      	beq.n	23bc6 <ble_ll_ctrl_proc_start+0x12>
                ble_ll_ctrl_start_rsp_timer(connsm);
   23bf2:	4620      	mov	r0, r4
   23bf4:	f7ff fb74 	bl	232e0 <ble_ll_ctrl_start_rsp_timer>
   23bf8:	e7e5      	b.n	23bc6 <ble_ll_ctrl_proc_start+0x12>

00023bfa <ble_ll_ctrl_initiate_dle>:
{
   23bfa:	b508      	push	{r3, lr}
    if (!(connsm->conn_features & BLE_LL_FEAT_DATA_LEN_EXT)) {
   23bfc:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   23c00:	f013 0f20 	tst.w	r3, #32
   23c04:	d010      	beq.n	23c28 <ble_ll_ctrl_initiate_dle+0x2e>
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   23c06:	7a83      	ldrb	r3, [r0, #10]
   23c08:	2b1b      	cmp	r3, #27
   23c0a:	d80a      	bhi.n	23c22 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   23c0c:	7ac3      	ldrb	r3, [r0, #11]
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   23c0e:	2b1b      	cmp	r3, #27
   23c10:	d807      	bhi.n	23c22 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   23c12:	8a03      	ldrh	r3, [r0, #16]
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   23c14:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   23c18:	d803      	bhi.n	23c22 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_time <= BLE_LL_CONN_SUPP_TIME_MIN)) {
   23c1a:	8a43      	ldrh	r3, [r0, #18]
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   23c1c:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   23c20:	d902      	bls.n	23c28 <ble_ll_ctrl_initiate_dle+0x2e>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   23c22:	2108      	movs	r1, #8
   23c24:	f7ff ffc6 	bl	23bb4 <ble_ll_ctrl_proc_start>
}
   23c28:	bd08      	pop	{r3, pc}

00023c2a <ble_ll_ctrl_chk_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_chk_proc_start(struct ble_ll_conn_sm *connsm)
{
   23c2a:	b538      	push	{r3, r4, r5, lr}
   23c2c:	4604      	mov	r4, r0

    /*
     * If we are terminating, dont start any new procedures but start
     * terminate if needed
     */
    if (connsm->disconnect_reason) {
   23c2e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   23c32:	b133      	cbz	r3, 23c42 <ble_ll_ctrl_chk_proc_start+0x18>
        if (!CONN_F_TERMINATE_STARTED(connsm)) {
   23c34:	f990 3000 	ldrsb.w	r3, [r0]
   23c38:	2b00      	cmp	r3, #0
   23c3a:	db06      	blt.n	23c4a <ble_ll_ctrl_chk_proc_start+0x20>
            /*
             * If the terminate procedure has not started it means we were not
             * able to start it right away (no control pdu was available).
             * Start it now. No need to start any other procedures.
             */
            ble_ll_ctrl_terminate_start(connsm);
   23c3c:	f7ff ff99 	bl	23b72 <ble_ll_ctrl_terminate_start>
   23c40:	e003      	b.n	23c4a <ble_ll_ctrl_chk_proc_start+0x20>
        }
        return;
    }

    /* If there is a running procedure or no pending, do nothing */
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   23c42:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   23c46:	2bff      	cmp	r3, #255	; 0xff
   23c48:	d000      	beq.n	23c4c <ble_ll_ctrl_chk_proc_start+0x22>
                    break;
                }
            }
        }
    }
}
   23c4a:	bd38      	pop	{r3, r4, r5, pc}
        (connsm->pending_ctrl_procs != 0)) {
   23c4c:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   23c50:	2b00      	cmp	r3, #0
   23c52:	d0fa      	beq.n	23c4a <ble_ll_ctrl_chk_proc_start+0x20>
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   23c54:	2500      	movs	r5, #0
   23c56:	2d09      	cmp	r5, #9
   23c58:	dcf7      	bgt.n	23c4a <ble_ll_ctrl_chk_proc_start+0x20>
            if (IS_PENDING_CTRL_PROC(connsm, i)) {
   23c5a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   23c5e:	412b      	asrs	r3, r5
   23c60:	f013 0f01 	tst.w	r3, #1
   23c64:	d017      	beq.n	23c96 <ble_ll_ctrl_chk_proc_start+0x6c>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   23c66:	2d04      	cmp	r5, #4
   23c68:	d004      	beq.n	23c74 <ble_ll_ctrl_chk_proc_start+0x4a>
                    ble_ll_ctrl_proc_start(connsm, i);
   23c6a:	4629      	mov	r1, r5
   23c6c:	4620      	mov	r0, r4
   23c6e:	f7ff ffa1 	bl	23bb4 <ble_ll_ctrl_proc_start>
                    break;
   23c72:	e7ea      	b.n	23c4a <ble_ll_ctrl_chk_proc_start+0x20>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   23c74:	7863      	ldrb	r3, [r4, #1]
   23c76:	f013 0f08 	tst.w	r3, #8
   23c7a:	d0f6      	beq.n	23c6a <ble_ll_ctrl_chk_proc_start+0x40>
                    ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   23c7c:	2100      	movs	r1, #0
   23c7e:	4620      	mov	r0, r4
   23c80:	f001 fa1f 	bl	250c2 <ble_ll_hci_ev_rd_rem_ver>
                    CLR_PENDING_CTRL_PROC(connsm, i);
   23c84:	2301      	movs	r3, #1
   23c86:	fa03 f205 	lsl.w	r2, r3, r5
   23c8a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   23c8e:	ea23 0302 	bic.w	r3, r3, r2
   23c92:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   23c96:	3501      	adds	r5, #1
   23c98:	e7dd      	b.n	23c56 <ble_ll_ctrl_chk_proc_start+0x2c>

00023c9a <ble_ll_ctrl_proc_stop>:
{
   23c9a:	b538      	push	{r3, r4, r5, lr}
   23c9c:	4604      	mov	r4, r0
   23c9e:	460d      	mov	r5, r1
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   23ca0:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   23ca4:	428b      	cmp	r3, r1
   23ca6:	d00c      	beq.n	23cc2 <ble_ll_ctrl_proc_stop+0x28>
    CLR_PENDING_CTRL_PROC(connsm, ctrl_proc);
   23ca8:	2101      	movs	r1, #1
   23caa:	fa01 f305 	lsl.w	r3, r1, r5
   23cae:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   23cb2:	ea21 0103 	bic.w	r1, r1, r3
   23cb6:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
    ble_ll_ctrl_chk_proc_start(connsm);
   23cba:	4620      	mov	r0, r4
   23cbc:	f7ff ffb5 	bl	23c2a <ble_ll_ctrl_chk_proc_start>
}
   23cc0:	bd38      	pop	{r3, r4, r5, pc}
    os_callout_stop(&co->co);
   23cc2:	30bc      	adds	r0, #188	; 0xbc
   23cc4:	f7ec fe12 	bl	108ec <os_callout_stop>
        connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   23cc8:	23ff      	movs	r3, #255	; 0xff
   23cca:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   23cce:	e7eb      	b.n	23ca8 <ble_ll_ctrl_proc_stop+0xe>

00023cd0 <ble_ll_ctrl_proc_unk_rsp>:
{
   23cd0:	b538      	push	{r3, r4, r5, lr}
   23cd2:	4605      	mov	r5, r0
   23cd4:	4613      	mov	r3, r2
    opcode = dptr[0];
   23cd6:	780c      	ldrb	r4, [r1, #0]
    switch (opcode) {
   23cd8:	2c14      	cmp	r4, #20
   23cda:	d837      	bhi.n	23d4c <ble_ll_ctrl_proc_unk_rsp+0x7c>
   23cdc:	e8df f004 	tbb	[pc, r4]
   23ce0:	36363639 	.word	0x36363639
   23ce4:	36363636 	.word	0x36363636
   23ce8:	36363636 	.word	0x36363636
   23cec:	1b133636 	.word	0x1b133636
   23cf0:	362e3638 	.word	0x362e3638
   23cf4:	0b          	.byte	0x0b
   23cf5:	00          	.byte	0x00
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_DATA_LEN_EXT);
   23cf6:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   23cfa:	f023 0320 	bic.w	r3, r3, #32
   23cfe:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_DATA_LEN_UPD;
   23d02:	2408      	movs	r4, #8
        break;
   23d04:	e025      	b.n	23d52 <ble_ll_ctrl_proc_unk_rsp+0x82>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_SLAVE_INIT);
   23d06:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   23d0a:	f023 0308 	bic.w	r3, r3, #8
   23d0e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_FEATURE_XCHG;
   23d12:	2403      	movs	r4, #3
        break;
   23d14:	e01d      	b.n	23d52 <ble_ll_ctrl_proc_unk_rsp+0x82>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_CONN_PARM_REQ);
   23d16:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   23d1a:	f022 0202 	bic.w	r2, r2, #2
   23d1e:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   23d22:	79c2      	ldrb	r2, [r0, #7]
   23d24:	2a01      	cmp	r2, #1
   23d26:	d001      	beq.n	23d2c <ble_ll_ctrl_proc_unk_rsp+0x5c>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   23d28:	2406      	movs	r4, #6
   23d2a:	e012      	b.n	23d52 <ble_ll_ctrl_proc_unk_rsp+0x82>
            ble_ll_ctrl_conn_upd_make(connsm, rspdata, NULL);
   23d2c:	2200      	movs	r2, #0
   23d2e:	4619      	mov	r1, r3
   23d30:	f7ff faea 	bl	23308 <ble_ll_ctrl_conn_upd_make>
            connsm->reject_reason = BLE_ERR_SUCCESS;
   23d34:	2000      	movs	r0, #0
   23d36:	f885 0037 	strb.w	r0, [r5, #55]	; 0x37
            return BLE_LL_CTRL_CONN_UPDATE_IND;
   23d3a:	e00f      	b.n	23d5c <ble_ll_ctrl_proc_unk_rsp+0x8c>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_LE_PING);
   23d3c:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   23d40:	f023 0310 	bic.w	r3, r3, #16
   23d44:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_LE_PING;
   23d48:	2407      	movs	r4, #7
        break;
   23d4a:	e002      	b.n	23d52 <ble_ll_ctrl_proc_unk_rsp+0x82>
        ctrl_proc = BLE_LL_CTRL_PROC_NUM;
   23d4c:	240a      	movs	r4, #10
        break;
   23d4e:	e000      	b.n	23d52 <ble_ll_ctrl_proc_unk_rsp+0x82>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   23d50:	2406      	movs	r4, #6
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   23d52:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   23d56:	42a3      	cmp	r3, r4
   23d58:	d001      	beq.n	23d5e <ble_ll_ctrl_proc_unk_rsp+0x8e>
    return BLE_ERR_MAX;
   23d5a:	20ff      	movs	r0, #255	; 0xff
}
   23d5c:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, ctrl_proc);
   23d5e:	4621      	mov	r1, r4
   23d60:	4628      	mov	r0, r5
   23d62:	f7ff ff9a 	bl	23c9a <ble_ll_ctrl_proc_stop>
        if (ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   23d66:	2c06      	cmp	r4, #6
   23d68:	d003      	beq.n	23d72 <ble_ll_ctrl_proc_unk_rsp+0xa2>
        } else if (ctrl_proc == BLE_LL_CTRL_PROC_FEATURE_XCHG) {
   23d6a:	2c03      	cmp	r4, #3
   23d6c:	d007      	beq.n	23d7e <ble_ll_ctrl_proc_unk_rsp+0xae>
    return BLE_ERR_MAX;
   23d6e:	20ff      	movs	r0, #255	; 0xff
   23d70:	e7f4      	b.n	23d5c <ble_ll_ctrl_proc_unk_rsp+0x8c>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_UNSUPP_REM_FEATURE);
   23d72:	211a      	movs	r1, #26
   23d74:	4628      	mov	r0, r5
   23d76:	f001 f8e8 	bl	24f4a <ble_ll_hci_ev_conn_update>
    return BLE_ERR_MAX;
   23d7a:	20ff      	movs	r0, #255	; 0xff
   23d7c:	e7ee      	b.n	23d5c <ble_ll_ctrl_proc_unk_rsp+0x8c>
            if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   23d7e:	78eb      	ldrb	r3, [r5, #3]
   23d80:	f013 0f10 	tst.w	r3, #16
   23d84:	d105      	bne.n	23d92 <ble_ll_ctrl_proc_unk_rsp+0xc2>
            connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   23d86:	78eb      	ldrb	r3, [r5, #3]
   23d88:	f36f 1304 	bfc	r3, #4, #1
   23d8c:	70eb      	strb	r3, [r5, #3]
    return BLE_ERR_MAX;
   23d8e:	20ff      	movs	r0, #255	; 0xff
   23d90:	e7e4      	b.n	23d5c <ble_ll_ctrl_proc_unk_rsp+0x8c>
                ble_ll_hci_ev_rd_rem_used_feat(connsm,
   23d92:	211a      	movs	r1, #26
   23d94:	4628      	mov	r0, r5
   23d96:	f001 f966 	bl	25066 <ble_ll_hci_ev_rd_rem_used_feat>
   23d9a:	e7f4      	b.n	23d86 <ble_ll_ctrl_proc_unk_rsp+0xb6>

00023d9c <ble_ll_ctrl_rx_feature_rsp>:
{
   23d9c:	b538      	push	{r3, r4, r5, lr}
   23d9e:	4604      	mov	r4, r0
    connsm->conn_features = dptr[0];
   23da0:	780b      	ldrb	r3, [r1, #0]
   23da2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    memcpy(connsm->remote_features, dptr + 1, 7);
   23da6:	f851 0f01 	ldr.w	r0, [r1, #1]!
   23daa:	6420      	str	r0, [r4, #64]	; 0x40
   23dac:	8888      	ldrh	r0, [r1, #4]
   23dae:	7989      	ldrb	r1, [r1, #6]
   23db0:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
   23db4:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
    if (!connsm->csmflags.cfbit.rxd_features) {
   23db8:	78e3      	ldrb	r3, [r4, #3]
   23dba:	f013 0f08 	tst.w	r3, #8
   23dbe:	d105      	bne.n	23dcc <ble_ll_ctrl_rx_feature_rsp+0x30>
        *new_features = 1;
   23dc0:	2301      	movs	r3, #1
   23dc2:	7013      	strb	r3, [r2, #0]
        connsm->csmflags.cfbit.rxd_features = 1;
   23dc4:	78e3      	ldrb	r3, [r4, #3]
   23dc6:	f043 0308 	orr.w	r3, r3, #8
   23dca:	70e3      	strb	r3, [r4, #3]
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   23dcc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   23dd0:	f013 0f08 	tst.w	r3, #8
   23dd4:	d104      	bne.n	23de0 <ble_ll_ctrl_rx_feature_rsp+0x44>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   23dd6:	78e3      	ldrb	r3, [r4, #3]
   23dd8:	f013 0f10 	tst.w	r3, #16
   23ddc:	d105      	bne.n	23dea <ble_ll_ctrl_rx_feature_rsp+0x4e>
}
   23dde:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   23de0:	2103      	movs	r1, #3
   23de2:	4620      	mov	r0, r4
   23de4:	f7ff ff59 	bl	23c9a <ble_ll_ctrl_proc_stop>
   23de8:	e7f5      	b.n	23dd6 <ble_ll_ctrl_rx_feature_rsp+0x3a>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   23dea:	2100      	movs	r1, #0
   23dec:	4620      	mov	r0, r4
   23dee:	f001 f93a 	bl	25066 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   23df2:	78e3      	ldrb	r3, [r4, #3]
   23df4:	f36f 1304 	bfc	r3, #4, #1
   23df8:	70e3      	strb	r3, [r4, #3]
}
   23dfa:	e7f0      	b.n	23dde <ble_ll_ctrl_rx_feature_rsp+0x42>

00023dfc <ble_ll_ctrl_rx_version_ind>:
{
   23dfc:	b570      	push	{r4, r5, r6, lr}
   23dfe:	4604      	mov	r4, r0
   23e00:	460d      	mov	r5, r1
   23e02:	4616      	mov	r6, r2
    connsm->vers_nr = dptr[0];
   23e04:	4608      	mov	r0, r1
   23e06:	f810 3b01 	ldrb.w	r3, [r0], #1
   23e0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    connsm->comp_id = get_le16(dptr + 1);
   23e0e:	f7fa fea9 	bl	1eb64 <get_le16>
   23e12:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
    connsm->sub_vers_nr = get_le16(dptr + 3);
   23e16:	1ce8      	adds	r0, r5, #3
   23e18:	f7fa fea4 	bl	1eb64 <get_le16>
   23e1c:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
    connsm->csmflags.cfbit.rxd_version_ind = 1;
   23e20:	7863      	ldrb	r3, [r4, #1]
   23e22:	f043 0308 	orr.w	r3, r3, #8
   23e26:	7063      	strb	r3, [r4, #1]
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   23e28:	f013 0f04 	tst.w	r3, #4
   23e2c:	d007      	beq.n	23e3e <ble_ll_ctrl_rx_version_ind+0x42>
    rsp_opcode = BLE_ERR_MAX;
   23e2e:	25ff      	movs	r5, #255	; 0xff
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   23e30:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   23e34:	f013 0f10 	tst.w	r3, #16
   23e38:	d107      	bne.n	23e4a <ble_ll_ctrl_rx_version_ind+0x4e>
}
   23e3a:	4628      	mov	r0, r5
   23e3c:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_ctrl_version_ind_make(connsm, rspbuf);
   23e3e:	4631      	mov	r1, r6
   23e40:	4620      	mov	r0, r4
   23e42:	f7ff faeb 	bl	2341c <ble_ll_ctrl_version_ind_make>
        rsp_opcode = BLE_LL_CTRL_VERSION_IND;
   23e46:	250c      	movs	r5, #12
   23e48:	e7f2      	b.n	23e30 <ble_ll_ctrl_rx_version_ind+0x34>
        ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   23e4a:	2100      	movs	r1, #0
   23e4c:	4620      	mov	r0, r4
   23e4e:	f001 f938 	bl	250c2 <ble_ll_hci_ev_rd_rem_ver>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   23e52:	2104      	movs	r1, #4
   23e54:	4620      	mov	r0, r4
   23e56:	f7ff ff20 	bl	23c9a <ble_ll_ctrl_proc_stop>
   23e5a:	e7ee      	b.n	23e3a <ble_ll_ctrl_rx_version_ind+0x3e>

00023e5c <ble_ll_ctrl_rx_start_enc_rsp>:
{
   23e5c:	b538      	push	{r3, r4, r5, lr}
    if (connsm->enc_data.enc_state != CONN_ENC_S_START_ENC_RSP_WAIT) {
   23e5e:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   23e62:	2b07      	cmp	r3, #7
   23e64:	d11e      	bne.n	23ea4 <ble_ll_ctrl_rx_start_enc_rsp+0x48>
   23e66:	4604      	mov	r4, r0
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   23e68:	79c3      	ldrb	r3, [r0, #7]
   23e6a:	2b01      	cmp	r3, #1
   23e6c:	d00a      	beq.n	23e84 <ble_ll_ctrl_rx_start_enc_rsp+0x28>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   23e6e:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   23e72:	2b02      	cmp	r3, #2
   23e74:	d011      	beq.n	23e9a <ble_ll_ctrl_rx_start_enc_rsp+0x3e>
        rc = BLE_LL_CTRL_START_ENC_RSP;
   23e76:	2506      	movs	r5, #6
    ble_ll_hci_ev_encrypt_chg(connsm, BLE_ERR_SUCCESS);
   23e78:	2100      	movs	r1, #0
   23e7a:	4620      	mov	r0, r4
   23e7c:	f001 f893 	bl	24fa6 <ble_ll_hci_ev_encrypt_chg>
    return rc;
   23e80:	b2e8      	uxtb	r0, r5
}
   23e82:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   23e84:	2102      	movs	r1, #2
   23e86:	f7ff ff08 	bl	23c9a <ble_ll_ctrl_proc_stop>
        connsm->enc_data.enc_state = CONN_ENC_S_ENCRYPTED;
   23e8a:	2302      	movs	r3, #2
   23e8c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        ble_ll_conn_auth_pyld_timer_start(connsm);
   23e90:	4620      	mov	r0, r4
   23e92:	f7fd fbdb 	bl	2164c <ble_ll_conn_auth_pyld_timer_start>
        rc = BLE_ERR_MAX;
   23e96:	25ff      	movs	r5, #255	; 0xff
   23e98:	e7ee      	b.n	23e78 <ble_ll_ctrl_rx_start_enc_rsp+0x1c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   23e9a:	2102      	movs	r1, #2
   23e9c:	f7ff fefd 	bl	23c9a <ble_ll_ctrl_proc_stop>
        rc = BLE_LL_CTRL_START_ENC_RSP;
   23ea0:	2506      	movs	r5, #6
   23ea2:	e7e9      	b.n	23e78 <ble_ll_ctrl_rx_start_enc_rsp+0x1c>
        return BLE_ERR_MAX;
   23ea4:	20ff      	movs	r0, #255	; 0xff
   23ea6:	e7ec      	b.n	23e82 <ble_ll_ctrl_rx_start_enc_rsp+0x26>

00023ea8 <ble_ll_ctrl_rx_ping_rsp>:
{
   23ea8:	b508      	push	{r3, lr}
    ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_LE_PING);
   23eaa:	2107      	movs	r1, #7
   23eac:	f7ff fef5 	bl	23c9a <ble_ll_ctrl_proc_stop>
}
   23eb0:	bd08      	pop	{r3, pc}

00023eb2 <ble_ll_ctrl_rx_conn_param_req>:
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   23eb2:	7803      	ldrb	r3, [r0, #0]
   23eb4:	f013 0f40 	tst.w	r3, #64	; 0x40
   23eb8:	d12d      	bne.n	23f16 <ble_ll_ctrl_rx_conn_param_req+0x64>
{
   23eba:	b570      	push	{r4, r5, r6, lr}
   23ebc:	4616      	mov	r6, r2
   23ebe:	460d      	mov	r5, r1
   23ec0:	4604      	mov	r4, r0
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   23ec2:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   23ec6:	f013 0f40 	tst.w	r3, #64	; 0x40
   23eca:	d00f      	beq.n	23eec <ble_ll_ctrl_rx_conn_param_req+0x3a>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   23ecc:	79c3      	ldrb	r3, [r0, #7]
   23ece:	2b02      	cmp	r3, #2
   23ed0:	d005      	beq.n	23ede <ble_ll_ctrl_rx_conn_param_req+0x2c>
            rspbuf[1] = BLE_LL_CTRL_CONN_PARM_REQ;
   23ed2:	230f      	movs	r3, #15
   23ed4:	7053      	strb	r3, [r2, #1]
            rspbuf[2] = BLE_ERR_LMP_COLLISION;
   23ed6:	2323      	movs	r3, #35	; 0x23
   23ed8:	7093      	strb	r3, [r2, #2]
            return rsp_opcode;
   23eda:	2011      	movs	r0, #17
   23edc:	e014      	b.n	23f08 <ble_ll_ctrl_rx_conn_param_req+0x56>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   23ede:	2106      	movs	r1, #6
   23ee0:	f7ff fedb 	bl	23c9a <ble_ll_ctrl_proc_stop>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_LMP_COLLISION);
   23ee4:	2123      	movs	r1, #35	; 0x23
   23ee6:	4620      	mov	r0, r4
   23ee8:	f001 f82f 	bl	24f4a <ble_ll_hci_ev_conn_update>
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) &&
   23eec:	79e3      	ldrb	r3, [r4, #7]
   23eee:	2b01      	cmp	r3, #1
   23ef0:	d103      	bne.n	23efa <ble_ll_ctrl_rx_conn_param_req+0x48>
   23ef2:	7863      	ldrb	r3, [r4, #1]
   23ef4:	f013 0f10 	tst.w	r3, #16
   23ef8:	d107      	bne.n	23f0a <ble_ll_ctrl_rx_conn_param_req+0x58>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   23efa:	230f      	movs	r3, #15
   23efc:	4632      	mov	r2, r6
   23efe:	4629      	mov	r1, r5
   23f00:	4620      	mov	r0, r4
   23f02:	f7ff fd5e 	bl	239c2 <ble_ll_ctrl_conn_param_pdu_proc>
   23f06:	b2c0      	uxtb	r0, r0
}
   23f08:	bd70      	pop	{r4, r5, r6, pc}
        rspbuf[1] = BLE_LL_CTRL_CONN_PARM_REQ;
   23f0a:	230f      	movs	r3, #15
   23f0c:	7073      	strb	r3, [r6, #1]
        rspbuf[2] = BLE_ERR_DIFF_TRANS_COLL;
   23f0e:	232a      	movs	r3, #42	; 0x2a
   23f10:	70b3      	strb	r3, [r6, #2]
        return rsp_opcode;
   23f12:	2011      	movs	r0, #17
   23f14:	e7f8      	b.n	23f08 <ble_ll_ctrl_rx_conn_param_req+0x56>
        return BLE_ERR_MAX;
   23f16:	20ff      	movs	r0, #255	; 0xff
}
   23f18:	4770      	bx	lr

00023f1a <ble_ll_ctrl_rx_reject_ind>:
{
   23f1a:	b538      	push	{r3, r4, r5, lr}
   23f1c:	4604      	mov	r4, r0
    if (opcode == BLE_LL_CTRL_REJECT_IND) {
   23f1e:	2a0d      	cmp	r2, #13
   23f20:	d00a      	beq.n	23f38 <ble_ll_ctrl_rx_reject_ind+0x1e>
        ble_error = dptr[1];
   23f22:	784d      	ldrb	r5, [r1, #1]
    switch (connsm->cur_ctrl_proc) {
   23f24:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
   23f28:	2806      	cmp	r0, #6
   23f2a:	d007      	beq.n	23f3c <ble_ll_ctrl_rx_reject_ind+0x22>
   23f2c:	2808      	cmp	r0, #8
   23f2e:	d02c      	beq.n	23f8a <ble_ll_ctrl_rx_reject_ind+0x70>
   23f30:	2802      	cmp	r0, #2
   23f32:	d01d      	beq.n	23f70 <ble_ll_ctrl_rx_reject_ind+0x56>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   23f34:	20ff      	movs	r0, #255	; 0xff
   23f36:	e027      	b.n	23f88 <ble_ll_ctrl_rx_reject_ind+0x6e>
        ble_error = dptr[0];
   23f38:	780d      	ldrb	r5, [r1, #0]
   23f3a:	e7f3      	b.n	23f24 <ble_ll_ctrl_rx_reject_ind+0xa>
        if (opcode == BLE_LL_CTRL_REJECT_IND_EXT) {
   23f3c:	2a11      	cmp	r2, #17
   23f3e:	d001      	beq.n	23f44 <ble_ll_ctrl_rx_reject_ind+0x2a>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   23f40:	20ff      	movs	r0, #255	; 0xff
   23f42:	e021      	b.n	23f88 <ble_ll_ctrl_rx_reject_ind+0x6e>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   23f44:	79e2      	ldrb	r2, [r4, #7]
   23f46:	2a01      	cmp	r2, #1
   23f48:	d009      	beq.n	23f5e <ble_ll_ctrl_rx_reject_ind+0x44>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   23f4a:	2106      	movs	r1, #6
   23f4c:	4620      	mov	r0, r4
   23f4e:	f7ff fea4 	bl	23c9a <ble_ll_ctrl_proc_stop>
                ble_ll_hci_ev_conn_update(connsm, ble_error);
   23f52:	4629      	mov	r1, r5
   23f54:	4620      	mov	r0, r4
   23f56:	f000 fff8 	bl	24f4a <ble_ll_hci_ev_conn_update>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   23f5a:	20ff      	movs	r0, #255	; 0xff
   23f5c:	e014      	b.n	23f88 <ble_ll_ctrl_rx_reject_ind+0x6e>
                ble_ll_ctrl_conn_upd_make(connsm, rspdata, NULL);
   23f5e:	2200      	movs	r2, #0
   23f60:	4619      	mov	r1, r3
   23f62:	4620      	mov	r0, r4
   23f64:	f7ff f9d0 	bl	23308 <ble_ll_ctrl_conn_upd_make>
                connsm->reject_reason = BLE_ERR_SUCCESS;
   23f68:	2000      	movs	r0, #0
   23f6a:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   23f6e:	e00b      	b.n	23f88 <ble_ll_ctrl_rx_reject_ind+0x6e>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   23f70:	2102      	movs	r1, #2
   23f72:	4620      	mov	r0, r4
   23f74:	f7ff fe91 	bl	23c9a <ble_ll_ctrl_proc_stop>
        ble_ll_hci_ev_encrypt_chg(connsm, ble_error);
   23f78:	4629      	mov	r1, r5
   23f7a:	4620      	mov	r0, r4
   23f7c:	f001 f813 	bl	24fa6 <ble_ll_hci_ev_encrypt_chg>
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   23f80:	2301      	movs	r3, #1
   23f82:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    uint8_t rsp_opcode = BLE_ERR_MAX;
   23f86:	20ff      	movs	r0, #255	; 0xff
}
   23f88:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   23f8a:	2108      	movs	r1, #8
   23f8c:	4620      	mov	r0, r4
   23f8e:	f7ff fe84 	bl	23c9a <ble_ll_ctrl_proc_stop>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   23f92:	20ff      	movs	r0, #255	; 0xff
        break;
   23f94:	e7f8      	b.n	23f88 <ble_ll_ctrl_rx_reject_ind+0x6e>
	...

00023f98 <ble_ll_ctrl_rx_pdu>:
 * @param om
 * @param connsm
 */
int
ble_ll_ctrl_rx_pdu(struct ble_ll_conn_sm *connsm, struct os_mbuf *om)
{
   23f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23f9c:	b084      	sub	sp, #16
   23f9e:	4606      	mov	r6, r0
   23fa0:	460f      	mov	r7, r1
    uint8_t *rspbuf;
    uint8_t *rspdata;
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    int restart_encryption;
#endif
    uint8_t new_features = 0;
   23fa2:	2300      	movs	r3, #0
   23fa4:	f88d 300f 	strb.w	r3, [sp, #15]
    /*
     * dptr points to om_data pointer. The first byte of om_data is the
     * first byte of the Data Channel PDU header. Get length from header and
     * opcode from LL control PDU.
     */
    dptr = om->om_data;
   23fa8:	680c      	ldr	r4, [r1, #0]
    len = dptr[1];
   23faa:	7863      	ldrb	r3, [r4, #1]
    opcode = dptr[2];
   23fac:	78a5      	ldrb	r5, [r4, #2]
#endif

    /* If opcode comes from reserved value or CtrlData fields is invalid
     * we shall respond with LL_UNKNOWN_RSP
     */
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   23fae:	2d19      	cmp	r5, #25
   23fb0:	f200 8183 	bhi.w	242ba <ble_ll_ctrl_rx_pdu+0x322>
   23fb4:	f104 0901 	add.w	r9, r4, #1
   23fb8:	f104 0803 	add.w	r8, r4, #3
   23fbc:	3b01      	subs	r3, #1
   23fbe:	b2db      	uxtb	r3, r3
        (len != g_ble_ll_ctrl_pkt_lengths[opcode])) {
   23fc0:	4ac1      	ldr	r2, [pc, #772]	; (242c8 <ble_ll_ctrl_rx_pdu+0x330>)
   23fc2:	5d52      	ldrb	r2, [r2, r5]
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   23fc4:	429a      	cmp	r2, r3
   23fc6:	f040 8181 	bne.w	242cc <ble_ll_ctrl_rx_pdu+0x334>
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
        goto ll_ctrl_send_rsp;
    }

    /* Check if the feature is supported. */
    switch (opcode) {
   23fca:	1eeb      	subs	r3, r5, #3
   23fcc:	2b16      	cmp	r3, #22
   23fce:	d864      	bhi.n	2409a <ble_ll_ctrl_rx_pdu+0x102>
   23fd0:	e8df f003 	tbb	[pc, r3]
   23fd4:	63156315 	.word	0x63156315
   23fd8:	15636363 	.word	0x15636363
   23fdc:	1b636363 	.word	0x1b636363
   23fe0:	12631818 	.word	0x12631818
   23fe4:	0f630c63 	.word	0x0f630c63
   23fe8:	6363      	.short	0x6363
   23fea:	1e          	.byte	0x1e
   23feb:	00          	.byte	0x00
    case BLE_LL_CTRL_LENGTH_REQ:
        feature = BLE_LL_FEAT_DATA_LEN_EXT;
   23fec:	f04f 0a20 	mov.w	sl, #32
   23ff0:	e010      	b.n	24014 <ble_ll_ctrl_rx_pdu+0x7c>
        break;
    case BLE_LL_CTRL_PING_REQ:
        feature = BLE_LL_FEAT_LE_PING;
        break;
    case BLE_LL_CTRL_PHY_REQ:
        feature = BLE_LL_FEAT_LE_2M_PHY | BLE_LL_FEAT_LE_CODED_PHY;
   23ff2:	f44f 6a10 	mov.w	sl, #2304	; 0x900
   23ff6:	e00d      	b.n	24014 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_PING;
   23ff8:	f04f 0a10 	mov.w	sl, #16
   23ffc:	e00a      	b.n	24014 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_ENCRYPTION;
   23ffe:	f04f 0a01 	mov.w	sl, #1
   24002:	e007      	b.n	24014 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_CONN_PARM_REQ;
   24004:	f04f 0a02 	mov.w	sl, #2
   24008:	e004      	b.n	24014 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_SLAVE_INIT;
   2400a:	f04f 0a08 	mov.w	sl, #8
   2400e:	e001      	b.n	24014 <ble_ll_ctrl_rx_pdu+0x7c>
        break;
    case BLE_LL_CTRL_MIN_USED_CHAN_IND:
        feature = BLE_LL_FEAT_MIN_USED_CHAN;
   24010:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
        feature = 0;
        break;
    }

    if (feature) {
        features = ble_ll_read_supp_features();
   24014:	f7fb fa02 	bl	1f41c <ble_ll_read_supp_features>
        if ((features & feature) == 0) {
   24018:	ea1a 0f00 	tst.w	sl, r0
   2401c:	d13d      	bne.n	2409a <ble_ll_ctrl_rx_pdu+0x102>
            if (opcode == BLE_LL_CTRL_ENC_REQ) {
   2401e:	2d03      	cmp	r5, #3
   24020:	d025      	beq.n	2406e <ble_ll_ctrl_rx_pdu+0xd6>
    int rc = 0;
   24022:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   24026:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND;
                    rspbuf[1] = BLE_ERR_UNSUPP_REM_FEATURE;
                }
            } else {
                /* Construct unknown rsp pdu */
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   24028:	f04f 0807 	mov.w	r8, #7
        break;
    }

    /* Free mbuf or send response */
ll_ctrl_send_rsp:
    if (rsp_opcode == BLE_ERR_MAX) {
   2402c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   24030:	f000 8165 	beq.w	242fe <ble_ll_ctrl_rx_pdu+0x366>
    } else {
        /*
         * Write the response opcode into the buffer. If this is an unknown
         * response, put opcode of unknown pdu into buffer.
         */
        rspbuf[0] = rsp_opcode;
   24034:	f884 8000 	strb.w	r8, [r4]
        if (rsp_opcode == BLE_LL_CTRL_UNKNOWN_RSP) {
   24038:	f1b8 0f07 	cmp.w	r8, #7
   2403c:	f000 8163 	beq.w	24306 <ble_ll_ctrl_rx_pdu+0x36e>
            rspbuf[1] = opcode;
        }
        len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   24040:	4ba1      	ldr	r3, [pc, #644]	; (242c8 <ble_ll_ctrl_rx_pdu+0x330>)
   24042:	f813 3008 	ldrb.w	r3, [r3, r8]
   24046:	3301      	adds	r3, #1
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   24048:	b2db      	uxtb	r3, r3
   2404a:	2203      	movs	r2, #3
   2404c:	4639      	mov	r1, r7
   2404e:	4630      	mov	r0, r6
   24050:	f7fe f94e 	bl	222f0 <ble_ll_conn_enqueue_pkt>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        if (restart_encryption) {
   24054:	f1ba 0f00 	cmp.w	sl, #0
   24058:	f040 8157 	bne.w	2430a <ble_ll_ctrl_rx_pdu+0x372>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
        }
#endif
    }

    if (new_features) {
   2405c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   24060:	2b00      	cmp	r3, #0
   24062:	f040 8157 	bne.w	24314 <ble_ll_ctrl_rx_pdu+0x37c>
        ble_ll_ctrl_initiate_dle(connsm);
    }

    return rc;
}
   24066:	4648      	mov	r0, r9
   24068:	b004      	add	sp, #16
   2406a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) {
   2406e:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
   24072:	f013 0f04 	tst.w	r3, #4
   24076:	d008      	beq.n	2408a <ble_ll_ctrl_rx_pdu+0xf2>
                    rspbuf[1] = opcode;
   24078:	7065      	strb	r5, [r4, #1]
                    rspbuf[2] = BLE_ERR_UNSUPP_REM_FEATURE;
   2407a:	231a      	movs	r3, #26
   2407c:	70a3      	strb	r3, [r4, #2]
    int rc = 0;
   2407e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   24082:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   24084:	f04f 0811 	mov.w	r8, #17
   24088:	e7d0      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
                    rspbuf[1] = BLE_ERR_UNSUPP_REM_FEATURE;
   2408a:	231a      	movs	r3, #26
   2408c:	7063      	strb	r3, [r4, #1]
    int rc = 0;
   2408e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   24092:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND;
   24094:	f04f 080d 	mov.w	r8, #13
   24098:	e7c8      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
    switch (opcode) {
   2409a:	2d15      	cmp	r5, #21
   2409c:	d817      	bhi.n	240ce <ble_ll_ctrl_rx_pdu+0x136>
   2409e:	e8df f015 	tbh	[pc, r5, lsl #1]
   240a2:	001c      	.short	0x001c
   240a4:	00160026 	.word	0x00160026
   240a8:	00b500ab 	.word	0x00b500ab
   240ac:	00c700bf 	.word	0x00c700bf
   240b0:	0076006b 	.word	0x0076006b
   240b4:	00cf0085 	.word	0x00cf0085
   240b8:	009100d7 	.word	0x009100d7
   240bc:	009c0100 	.word	0x009c0100
   240c0:	00f500ea 	.word	0x00f500ea
   240c4:	011c0100 	.word	0x011c0100
   240c8:	003000e1 	.word	0x003000e1
   240cc:	004d      	.short	0x004d
    int rc = 0;
   240ce:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   240d2:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   240d4:	f04f 08ff 	mov.w	r8, #255	; 0xff
   240d8:	e7a8      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_update(connsm, dptr);
   240da:	4641      	mov	r1, r8
   240dc:	4630      	mov	r0, r6
   240de:	f7ff fb0d 	bl	236fc <ble_ll_ctrl_rx_conn_update>
   240e2:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   240e6:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   240ea:	46ca      	mov	sl, r9
        break;
   240ec:	e79e      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_chanmap_req(connsm, dptr);
   240ee:	4641      	mov	r1, r8
   240f0:	4630      	mov	r0, r6
   240f2:	f7ff fb47 	bl	23784 <ble_ll_ctrl_rx_chanmap_req>
   240f6:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   240fa:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   240fe:	46ca      	mov	sl, r9
        break;
   24100:	e794      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   24102:	4641      	mov	r1, r8
   24104:	4630      	mov	r0, r6
   24106:	f7ff fb63 	bl	237d0 <ble_ll_ctrl_len_proc>
   2410a:	4682      	mov	sl, r0
   2410c:	2800      	cmp	r0, #0
   2410e:	f040 80ea 	bne.w	242e6 <ble_ll_ctrl_rx_pdu+0x34e>
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   24112:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
   24116:	2b08      	cmp	r3, #8
   24118:	d008      	beq.n	2412c <ble_ll_ctrl_rx_pdu+0x194>
            IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD)) {
   2411a:	f8b6 3048 	ldrh.w	r3, [r6, #72]	; 0x48
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   2411e:	f413 7f80 	tst.w	r3, #256	; 0x100
   24122:	d003      	beq.n	2412c <ble_ll_ctrl_rx_pdu+0x194>
            CLR_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   24124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   24128:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
        ble_ll_ctrl_datalen_upd_make(connsm, rspbuf);
   2412c:	4621      	mov	r1, r4
   2412e:	4630      	mov	r0, r6
   24130:	f7ff f987 	bl	23442 <ble_ll_ctrl_datalen_upd_make>
    int rc = 0;
   24134:	46d1      	mov	r9, sl
        rsp_opcode = BLE_LL_CTRL_LENGTH_RSP;
   24136:	f04f 0815 	mov.w	r8, #21
        break;
   2413a:	e777      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_DATA_LEN_UPD) {
   2413c:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
   24140:	2b08      	cmp	r3, #8
   24142:	d005      	beq.n	24150 <ble_ll_ctrl_rx_pdu+0x1b8>
    int rc = 0;
   24144:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   24148:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   2414a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   2414e:	e76d      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
            if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   24150:	4641      	mov	r1, r8
   24152:	4630      	mov	r0, r6
   24154:	f7ff fb3c 	bl	237d0 <ble_ll_ctrl_len_proc>
   24158:	4681      	mov	r9, r0
   2415a:	b940      	cbnz	r0, 2416e <ble_ll_ctrl_rx_pdu+0x1d6>
    rsp_opcode = BLE_ERR_MAX;
   2415c:	f04f 08ff 	mov.w	r8, #255	; 0xff
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   24160:	2108      	movs	r1, #8
   24162:	4630      	mov	r0, r6
   24164:	f7ff fd99 	bl	23c9a <ble_ll_ctrl_proc_stop>
    restart_encryption = 0;
   24168:	f04f 0a00 	mov.w	sl, #0
   2416c:	e75e      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
                rc = -1;
   2416e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   24172:	f04f 0807 	mov.w	r8, #7
   24176:	e7f3      	b.n	24160 <ble_ll_ctrl_rx_pdu+0x1c8>
        rsp_opcode = ble_ll_ctrl_proc_unk_rsp(connsm, dptr, rspdata);
   24178:	464a      	mov	r2, r9
   2417a:	4641      	mov	r1, r8
   2417c:	4630      	mov	r0, r6
   2417e:	f7ff fda7 	bl	23cd0 <ble_ll_ctrl_proc_unk_rsp>
   24182:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   24186:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2418a:	46ca      	mov	sl, r9
        break;
   2418c:	e74e      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode, &new_features);
   2418e:	f10d 030f 	add.w	r3, sp, #15
   24192:	9300      	str	r3, [sp, #0]
   24194:	462b      	mov	r3, r5
   24196:	4622      	mov	r2, r4
   24198:	4641      	mov	r1, r8
   2419a:	4630      	mov	r0, r6
   2419c:	f7ff f9c6 	bl	2352c <ble_ll_ctrl_rx_feature_req>
   241a0:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   241a4:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   241a8:	46ca      	mov	sl, r9
        break;
   241aa:	e73f      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        ble_ll_ctrl_rx_feature_rsp(connsm, dptr, &new_features);
   241ac:	f10d 020f 	add.w	r2, sp, #15
   241b0:	4641      	mov	r1, r8
   241b2:	4630      	mov	r0, r6
   241b4:	f7ff fdf2 	bl	23d9c <ble_ll_ctrl_rx_feature_rsp>
    int rc = 0;
   241b8:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   241bc:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   241be:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   241c2:	e733      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_version_ind(connsm, dptr, rspdata);
   241c4:	464a      	mov	r2, r9
   241c6:	4641      	mov	r1, r8
   241c8:	4630      	mov	r0, r6
   241ca:	f7ff fe17 	bl	23dfc <ble_ll_ctrl_rx_version_ind>
   241ce:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   241d2:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   241d6:	46ca      	mov	sl, r9
        break;
   241d8:	e728      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode, &new_features);
   241da:	f10d 030f 	add.w	r3, sp, #15
   241de:	9300      	str	r3, [sp, #0]
   241e0:	462b      	mov	r3, r5
   241e2:	4622      	mov	r2, r4
   241e4:	4641      	mov	r1, r8
   241e6:	4630      	mov	r0, r6
   241e8:	f7ff f9a0 	bl	2352c <ble_ll_ctrl_rx_feature_req>
   241ec:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   241f0:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   241f4:	46ca      	mov	sl, r9
        break;
   241f6:	e719      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_enc_req(connsm, dptr, rspdata);
   241f8:	464a      	mov	r2, r9
   241fa:	4641      	mov	r1, r8
   241fc:	4630      	mov	r0, r6
   241fe:	f7ff fb1e 	bl	2383e <ble_ll_ctrl_rx_enc_req>
   24202:	4680      	mov	r8, r0
    int rc = 0;
   24204:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   24208:	46ca      	mov	sl, r9
        break;
   2420a:	e70f      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        ble_ll_ctrl_rx_enc_rsp(connsm, dptr);
   2420c:	4641      	mov	r1, r8
   2420e:	4630      	mov	r0, r6
   24210:	f7ff fb5d 	bl	238ce <ble_ll_ctrl_rx_enc_rsp>
    int rc = 0;
   24214:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   24218:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   2421a:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   2421e:	e705      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_req(connsm);
   24220:	4630      	mov	r0, r6
   24222:	f7ff f829 	bl	23278 <ble_ll_ctrl_rx_start_enc_req>
   24226:	4680      	mov	r8, r0
    int rc = 0;
   24228:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2422c:	46ca      	mov	sl, r9
        break;
   2422e:	e6fd      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_rsp(connsm);
   24230:	4630      	mov	r0, r6
   24232:	f7ff fe13 	bl	23e5c <ble_ll_ctrl_rx_start_enc_rsp>
   24236:	4680      	mov	r8, r0
    int rc = 0;
   24238:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2423c:	46ca      	mov	sl, r9
        break;
   2423e:	e6f5      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_req(connsm);
   24240:	4630      	mov	r0, r6
   24242:	f7ff f829 	bl	23298 <ble_ll_ctrl_rx_pause_enc_req>
   24246:	4680      	mov	r8, r0
    int rc = 0;
   24248:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2424c:	46ca      	mov	sl, r9
        break;
   2424e:	e6ed      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_rsp(connsm);
   24250:	4630      	mov	r0, r6
   24252:	f7ff f82e 	bl	232b2 <ble_ll_ctrl_rx_pause_enc_rsp>
   24256:	4680      	mov	r8, r0
        if (rsp_opcode == BLE_LL_CTRL_PAUSE_ENC_RSP) {
   24258:	280b      	cmp	r0, #11
   2425a:	d04b      	beq.n	242f4 <ble_ll_ctrl_rx_pdu+0x35c>
    int rc = 0;
   2425c:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   24260:	46ca      	mov	sl, r9
   24262:	e6e3      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        ble_ll_ctrl_rx_ping_rsp(connsm);
   24264:	4630      	mov	r0, r6
   24266:	f7ff fe1f 	bl	23ea8 <ble_ll_ctrl_rx_ping_rsp>
    int rc = 0;
   2426a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2426e:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   24270:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   24274:	e6da      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_param_req(connsm, dptr, rspbuf);
   24276:	4622      	mov	r2, r4
   24278:	4641      	mov	r1, r8
   2427a:	4630      	mov	r0, r6
   2427c:	f7ff fe19 	bl	23eb2 <ble_ll_ctrl_rx_conn_param_req>
   24280:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   24284:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   24288:	46ca      	mov	sl, r9
        break;
   2428a:	e6cf      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_param_rsp(connsm, dptr, rspbuf);
   2428c:	4622      	mov	r2, r4
   2428e:	4641      	mov	r1, r8
   24290:	4630      	mov	r0, r6
   24292:	f7ff fc48 	bl	23b26 <ble_ll_ctrl_rx_conn_param_rsp>
   24296:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   2429a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2429e:	46ca      	mov	sl, r9
        break;
   242a0:	e6c4      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_reject_ind(connsm, dptr, opcode, rspdata);
   242a2:	464b      	mov	r3, r9
   242a4:	462a      	mov	r2, r5
   242a6:	4641      	mov	r1, r8
   242a8:	4630      	mov	r0, r6
   242aa:	f7ff fe36 	bl	23f1a <ble_ll_ctrl_rx_reject_ind>
   242ae:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   242b2:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   242b6:	46ca      	mov	sl, r9
        break;
   242b8:	e6b8      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        rc = -1;
   242ba:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   242be:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   242c2:	f04f 0807 	mov.w	r8, #7
   242c6:	e6b1      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
   242c8:	0002c938 	.word	0x0002c938
        rc = -1;
   242cc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   242d0:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   242d4:	f04f 0807 	mov.w	r8, #7
   242d8:	e6a8      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
    int rc = 0;
   242da:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   242de:	46ca      	mov	sl, r9
        rsp_opcode = BLE_LL_CTRL_PING_RSP;
   242e0:	f04f 0813 	mov.w	r8, #19
   242e4:	e6a2      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
            rc  = -1;
   242e6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   242ea:	f04f 0a00 	mov.w	sl, #0
            rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   242ee:	f04f 0807 	mov.w	r8, #7
   242f2:	e69b      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
    int rc = 0;
   242f4:	f04f 0900 	mov.w	r9, #0
            restart_encryption = 1;
   242f8:	f04f 0a01 	mov.w	sl, #1
   242fc:	e696      	b.n	2402c <ble_ll_ctrl_rx_pdu+0x94>
        os_mbuf_free_chain(om);
   242fe:	4638      	mov	r0, r7
   24300:	f7ec fdec 	bl	10edc <os_mbuf_free_chain>
   24304:	e6aa      	b.n	2405c <ble_ll_ctrl_rx_pdu+0xc4>
            rspbuf[1] = opcode;
   24306:	7065      	strb	r5, [r4, #1]
   24308:	e69a      	b.n	24040 <ble_ll_ctrl_rx_pdu+0xa8>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   2430a:	2102      	movs	r1, #2
   2430c:	4630      	mov	r0, r6
   2430e:	f7ff f985 	bl	2361c <ble_ll_ctrl_proc_init>
   24312:	e6a3      	b.n	2405c <ble_ll_ctrl_rx_pdu+0xc4>
        ble_ll_ctrl_initiate_dle(connsm);
   24314:	4630      	mov	r0, r6
   24316:	f7ff fc70 	bl	23bfa <ble_ll_ctrl_initiate_dle>
    return rc;
   2431a:	e6a4      	b.n	24066 <ble_ll_ctrl_rx_pdu+0xce>

0002431c <ble_ll_ctrl_reject_ind_send>:
 * @return int
 */
int
ble_ll_ctrl_reject_ind_send(struct ble_ll_conn_sm *connsm, uint8_t rej_opcode,
                            uint8_t err)
{
   2431c:	b570      	push	{r4, r5, r6, lr}
   2431e:	4605      	mov	r5, r0
   24320:	460c      	mov	r4, r1
   24322:	4616      	mov	r6, r2
    uint8_t len;
    uint8_t opcode;
    uint8_t *rspbuf;
    struct os_mbuf *om;

    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   24324:	2110      	movs	r1, #16
   24326:	201b      	movs	r0, #27
   24328:	f7ed faed 	bl	11906 <os_msys_get_pkthdr>
                            sizeof(struct ble_mbuf_hdr));
    if (om) {
   2432c:	b1d8      	cbz	r0, 24366 <ble_ll_ctrl_reject_ind_send+0x4a>
   2432e:	4601      	mov	r1, r0
        rspbuf = om->om_data;
   24330:	6803      	ldr	r3, [r0, #0]
        opcode = BLE_LL_CTRL_REJECT_IND_EXT;
        if (rej_opcode == BLE_LL_CTRL_ENC_REQ) {
   24332:	2c03      	cmp	r4, #3
   24334:	d00a      	beq.n	2434c <ble_ll_ctrl_reject_ind_send+0x30>
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
                opcode = BLE_LL_CTRL_REJECT_IND;
            }
        }
        rspbuf[0] = opcode;
   24336:	2211      	movs	r2, #17
   24338:	701a      	strb	r2, [r3, #0]
        if (opcode == BLE_LL_CTRL_REJECT_IND) {
            rspbuf[1] = err;
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
        } else {
            rspbuf[1] = rej_opcode;
   2433a:	705c      	strb	r4, [r3, #1]
            rspbuf[2] = err;
   2433c:	709e      	strb	r6, [r3, #2]
            len = BLE_LL_CTRL_REJECT_IND_EXT_LEN + 1;
   2433e:	2303      	movs	r3, #3
        }
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   24340:	2203      	movs	r2, #3
   24342:	4628      	mov	r0, r5
   24344:	f7fd ffd4 	bl	222f0 <ble_ll_conn_enqueue_pkt>
        rc = 0;
   24348:	2000      	movs	r0, #0
    } else {
        rc = 1;
    }
    return rc;
}
   2434a:	bd70      	pop	{r4, r5, r6, pc}
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
   2434c:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
   24350:	f012 0f04 	tst.w	r2, #4
   24354:	d104      	bne.n	24360 <ble_ll_ctrl_reject_ind_send+0x44>
        rspbuf[0] = opcode;
   24356:	220d      	movs	r2, #13
   24358:	701a      	strb	r2, [r3, #0]
            rspbuf[1] = err;
   2435a:	705e      	strb	r6, [r3, #1]
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
   2435c:	2302      	movs	r3, #2
   2435e:	e7ef      	b.n	24340 <ble_ll_ctrl_reject_ind_send+0x24>
        rspbuf[0] = opcode;
   24360:	2211      	movs	r2, #17
   24362:	701a      	strb	r2, [r3, #0]
   24364:	e7e9      	b.n	2433a <ble_ll_ctrl_reject_ind_send+0x1e>
        rc = 1;
   24366:	2001      	movs	r0, #1
    return rc;
   24368:	e7ef      	b.n	2434a <ble_ll_ctrl_reject_ind_send+0x2e>

0002436a <ble_ll_ctrl_tx_done>:
 *
 * @return int
 */
int
ble_ll_ctrl_tx_done(struct os_mbuf *txpdu, struct ble_ll_conn_sm *connsm)
{
   2436a:	b538      	push	{r3, r4, r5, lr}
   2436c:	4604      	mov	r4, r0
    int rc;
    uint8_t opcode;

    rc = 0;
    opcode = txpdu->om_data[0];
   2436e:	6802      	ldr	r2, [r0, #0]
   24370:	7813      	ldrb	r3, [r2, #0]
    switch (opcode) {
   24372:	3b02      	subs	r3, #2
   24374:	2b0f      	cmp	r3, #15
   24376:	d85a      	bhi.n	2442e <ble_ll_ctrl_tx_done+0xc4>
   24378:	e8df f003 	tbb	[pc, r3]
   2437c:	59373208 	.word	0x59373208
   24380:	5959593d 	.word	0x5959593d
   24384:	2d594f32 	.word	0x2d594f32
   24388:	13595959 	.word	0x13595959
    case BLE_LL_CTRL_TERMINATE_IND:
        connsm->csmflags.cfbit.terminate_ind_txd = 1;
   2438c:	780b      	ldrb	r3, [r1, #0]
   2438e:	f043 0302 	orr.w	r3, r3, #2
   24392:	700b      	strb	r3, [r1, #0]
        rc = -1;
   24394:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
#endif
    default:
        break;
    }

    os_mbuf_free_chain(txpdu);
   24398:	4620      	mov	r0, r4
   2439a:	f7ec fd9f 	bl	10edc <os_mbuf_free_chain>
    return rc;
}
   2439e:	4628      	mov	r0, r5
   243a0:	bd38      	pop	{r3, r4, r5, pc}
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   243a2:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
   243a6:	2b06      	cmp	r3, #6
   243a8:	d008      	beq.n	243bc <ble_ll_ctrl_tx_done+0x52>
        if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   243aa:	f891 3118 	ldrb.w	r3, [r1, #280]	; 0x118
   243ae:	2b02      	cmp	r3, #2
   243b0:	d93f      	bls.n	24432 <ble_ll_ctrl_tx_done+0xc8>
            connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   243b2:	2301      	movs	r3, #1
   243b4:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   243b8:	2500      	movs	r5, #0
   243ba:	e7ed      	b.n	24398 <ble_ll_ctrl_tx_done+0x2e>
            if (txpdu->om_data[1] == BLE_LL_CTRL_CONN_PARM_REQ &&
   243bc:	7853      	ldrb	r3, [r2, #1]
   243be:	2b0f      	cmp	r3, #15
   243c0:	d1f3      	bne.n	243aa <ble_ll_ctrl_tx_done+0x40>
                            txpdu->om_data[2] != BLE_ERR_LMP_COLLISION) {
   243c2:	7893      	ldrb	r3, [r2, #2]
            if (txpdu->om_data[1] == BLE_LL_CTRL_CONN_PARM_REQ &&
   243c4:	2b23      	cmp	r3, #35	; 0x23
   243c6:	d0f0      	beq.n	243aa <ble_ll_ctrl_tx_done+0x40>
                connsm->reject_reason = txpdu->om_data[2];
   243c8:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
                connsm->csmflags.cfbit.host_expects_upd_event = 1;
   243cc:	784b      	ldrb	r3, [r1, #1]
   243ce:	f043 0302 	orr.w	r3, r3, #2
   243d2:	704b      	strb	r3, [r1, #1]
   243d4:	e7e9      	b.n	243aa <ble_ll_ctrl_tx_done+0x40>
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   243d6:	2301      	movs	r3, #1
   243d8:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   243dc:	2500      	movs	r5, #0
        break;
   243de:	e7db      	b.n	24398 <ble_ll_ctrl_tx_done+0x2e>
        connsm->enc_data.enc_state = CONN_ENC_S_ENC_RSP_WAIT;
   243e0:	2303      	movs	r3, #3
   243e2:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   243e6:	2500      	movs	r5, #0
        break;
   243e8:	e7d6      	b.n	24398 <ble_ll_ctrl_tx_done+0x2e>
        connsm->csmflags.cfbit.send_ltk_req = 1;
   243ea:	788b      	ldrb	r3, [r1, #2]
   243ec:	f043 0301 	orr.w	r3, r3, #1
   243f0:	708b      	strb	r3, [r1, #2]
    rc = 0;
   243f2:	2500      	movs	r5, #0
        break;
   243f4:	e7d0      	b.n	24398 <ble_ll_ctrl_tx_done+0x2e>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   243f6:	79cb      	ldrb	r3, [r1, #7]
   243f8:	2b02      	cmp	r3, #2
   243fa:	d001      	beq.n	24400 <ble_ll_ctrl_tx_done+0x96>
    rc = 0;
   243fc:	2500      	movs	r5, #0
   243fe:	e7cb      	b.n	24398 <ble_ll_ctrl_tx_done+0x2e>
            connsm->enc_data.enc_state = CONN_ENC_S_ENCRYPTED;
   24400:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
            if (CONN_F_LE_PING_SUPP(connsm)) {
   24404:	788b      	ldrb	r3, [r1, #2]
   24406:	f013 0f08 	tst.w	r3, #8
   2440a:	d101      	bne.n	24410 <ble_ll_ctrl_tx_done+0xa6>
    rc = 0;
   2440c:	2500      	movs	r5, #0
   2440e:	e7c3      	b.n	24398 <ble_ll_ctrl_tx_done+0x2e>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   24410:	4608      	mov	r0, r1
   24412:	f7fd f91b 	bl	2164c <ble_ll_conn_auth_pyld_timer_start>
    rc = 0;
   24416:	2500      	movs	r5, #0
   24418:	e7be      	b.n	24398 <ble_ll_ctrl_tx_done+0x2e>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   2441a:	79cb      	ldrb	r3, [r1, #7]
   2441c:	2b02      	cmp	r3, #2
   2441e:	d001      	beq.n	24424 <ble_ll_ctrl_tx_done+0xba>
    rc = 0;
   24420:	2500      	movs	r5, #0
   24422:	e7b9      	b.n	24398 <ble_ll_ctrl_tx_done+0x2e>
            connsm->enc_data.enc_state = CONN_ENC_S_PAUSE_ENC_RSP_WAIT;
   24424:	2304      	movs	r3, #4
   24426:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   2442a:	2500      	movs	r5, #0
   2442c:	e7b4      	b.n	24398 <ble_ll_ctrl_tx_done+0x2e>
   2442e:	2500      	movs	r5, #0
   24430:	e7b2      	b.n	24398 <ble_ll_ctrl_tx_done+0x2e>
   24432:	2500      	movs	r5, #0
   24434:	e7b0      	b.n	24398 <ble_ll_ctrl_tx_done+0x2e>

00024436 <ble_ll_hci_get_num_cmd_pkts>:
 */
static uint8_t
ble_ll_hci_get_num_cmd_pkts(void)
{
    return BLE_LL_CFG_NUM_HCI_CMD_PKTS;
}
   24436:	2001      	movs	r0, #1
   24438:	4770      	bx	lr
	...

0002443c <ble_ll_hci_rd_bd_addr>:
{
    /*
     * XXX: for now, assume we always have a public device address. If we
     * dont, we should set this to zero
     */
    memcpy(rspbuf, g_dev_addr, BLE_DEV_ADDR_LEN);
   2443c:	4b04      	ldr	r3, [pc, #16]	; (24450 <ble_ll_hci_rd_bd_addr+0x14>)
   2443e:	681a      	ldr	r2, [r3, #0]
   24440:	6002      	str	r2, [r0, #0]
   24442:	889b      	ldrh	r3, [r3, #4]
   24444:	8083      	strh	r3, [r0, #4]
    *rsplen = BLE_DEV_ADDR_LEN;
   24446:	2306      	movs	r3, #6
   24448:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   2444a:	2000      	movs	r0, #0
   2444c:	4770      	bx	lr
   2444e:	bf00      	nop
   24450:	20003dc8 	.word	0x20003dc8

00024454 <ble_ll_hci_set_le_event_mask>:
 *
 * @return int BLE_ERR_SUCCESS. Does not return any errors.
 */
static int
ble_ll_hci_set_le_event_mask(uint8_t *cmdbuf)
{
   24454:	4602      	mov	r2, r0
    /* Copy the data into the event mask */
    memcpy(g_ble_ll_hci_le_event_mask, cmdbuf, BLE_HCI_SET_LE_EVENT_MASK_LEN);
   24456:	4b03      	ldr	r3, [pc, #12]	; (24464 <ble_ll_hci_set_le_event_mask+0x10>)
   24458:	6800      	ldr	r0, [r0, #0]
   2445a:	6851      	ldr	r1, [r2, #4]
   2445c:	c303      	stmia	r3!, {r0, r1}
    return BLE_ERR_SUCCESS;
}
   2445e:	2000      	movs	r0, #0
   24460:	4770      	bx	lr
   24462:	bf00      	nop
   24464:	2000365c 	.word	0x2000365c

00024468 <ble_ll_hci_le_cmd_send_cmd_status>:
static int
ble_ll_hci_le_cmd_send_cmd_status(uint16_t ocf)
{
    int rc;

    switch (ocf) {
   24468:	380d      	subs	r0, #13
   2446a:	2837      	cmp	r0, #55	; 0x37
   2446c:	d81f      	bhi.n	244ae <ble_ll_hci_le_cmd_send_cmd_status+0x46>
   2446e:	e8df f000 	tbb	[pc, r0]
   24472:	1e1c      	.short	0x1e1c
   24474:	1e1e1e1e 	.word	0x1e1e1e1e
   24478:	1c1e1e1c 	.word	0x1c1e1e1c
   2447c:	1e1c1e1e 	.word	0x1e1c1e1e
   24480:	1e1e1e1e 	.word	0x1e1e1e1e
   24484:	1e1e1e1e 	.word	0x1e1e1e1e
   24488:	1c1c1e1e 	.word	0x1c1c1e1e
   2448c:	1e1e1e1e 	.word	0x1e1e1e1e
   24490:	1e1e1e1e 	.word	0x1e1e1e1e
   24494:	1c1e1e1e 	.word	0x1c1e1e1e
   24498:	1e1e1e1e 	.word	0x1e1e1e1e
   2449c:	1e1e1e1e 	.word	0x1e1e1e1e
   244a0:	1e1e1e1e 	.word	0x1e1e1e1e
   244a4:	1e1e1e1e 	.word	0x1e1e1e1e
   244a8:	1c1c      	.short	0x1c1c
    case BLE_HCI_OCF_LE_START_ENCRYPT:
    case BLE_HCI_OCF_LE_RD_P256_PUBKEY:
    case BLE_HCI_OCF_LE_GEN_DHKEY:
    case BLE_HCI_OCF_LE_SET_PHY:
    case BLE_HCI_OCF_LE_PERIODIC_ADV_CREATE_SYNC:
        rc = 1;
   244aa:	2001      	movs	r0, #1
   244ac:	4770      	bx	lr
        break;
    default:
        rc = 0;
   244ae:	2000      	movs	r0, #0
        break;
    }
    return rc;
}
   244b0:	4770      	bx	lr

000244b2 <ble_ll_hci_rd_local_version>:
{
   244b2:	b570      	push	{r4, r5, r6, lr}
   244b4:	4604      	mov	r4, r0
   244b6:	460e      	mov	r6, r1
    rspbuf[0] = BLE_HCI_VER_BCS_5_0;
   244b8:	2509      	movs	r5, #9
   244ba:	f800 5b01 	strb.w	r5, [r0], #1
    put_le16(rspbuf + 1, hci_rev);
   244be:	2100      	movs	r1, #0
   244c0:	f7fa fb2f 	bl	1eb22 <put_le16>
    rspbuf[3] = BLE_LMP_VER_BCS_5_0;
   244c4:	70e5      	strb	r5, [r4, #3]
    put_le16(rspbuf + 4, mfrg);
   244c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   244ca:	1d20      	adds	r0, r4, #4
   244cc:	f7fa fb29 	bl	1eb22 <put_le16>
    put_le16(rspbuf + 6, lmp_subver);
   244d0:	2100      	movs	r1, #0
   244d2:	1da0      	adds	r0, r4, #6
   244d4:	f7fa fb25 	bl	1eb22 <put_le16>
    *rsplen = BLE_HCI_RD_LOC_VER_INFO_RSPLEN;
   244d8:	2308      	movs	r3, #8
   244da:	7033      	strb	r3, [r6, #0]
}
   244dc:	2000      	movs	r0, #0
   244de:	bd70      	pop	{r4, r5, r6, pc}

000244e0 <ble_ll_hci_le_read_bufsize>:
{
   244e0:	b570      	push	{r4, r5, r6, lr}
   244e2:	4606      	mov	r6, r0
   244e4:	460d      	mov	r5, r1
    put_le16(rspbuf, g_ble_ll_data.ll_acl_pkt_size);
   244e6:	4c05      	ldr	r4, [pc, #20]	; (244fc <ble_ll_hci_le_read_bufsize+0x1c>)
   244e8:	88e1      	ldrh	r1, [r4, #6]
   244ea:	f7fa fb1a 	bl	1eb22 <put_le16>
    rspbuf[2] = g_ble_ll_data.ll_num_acl_pkts;
   244ee:	7963      	ldrb	r3, [r4, #5]
   244f0:	70b3      	strb	r3, [r6, #2]
    *rsplen = BLE_HCI_RD_BUF_SIZE_RSPLEN;
   244f2:	2303      	movs	r3, #3
   244f4:	702b      	strb	r3, [r5, #0]
}
   244f6:	2000      	movs	r0, #0
   244f8:	bd70      	pop	{r4, r5, r6, pc}
   244fa:	bf00      	nop
   244fc:	20003e20 	.word	0x20003e20

00024500 <ble_ll_hci_le_rd_sugg_data_len>:
{
   24500:	b570      	push	{r4, r5, r6, lr}
   24502:	4606      	mov	r6, r0
   24504:	460d      	mov	r5, r1
    put_le16(rspbuf, g_ble_ll_conn_params.sugg_tx_octets);
   24506:	4c06      	ldr	r4, [pc, #24]	; (24520 <ble_ll_hci_le_rd_sugg_data_len+0x20>)
   24508:	7a61      	ldrb	r1, [r4, #9]
   2450a:	f7fa fb0a 	bl	1eb22 <put_le16>
    put_le16(rspbuf + 2, g_ble_ll_conn_params.sugg_tx_time);
   2450e:	8961      	ldrh	r1, [r4, #10]
   24510:	1cb0      	adds	r0, r6, #2
   24512:	f7fa fb06 	bl	1eb22 <put_le16>
    *rsplen = BLE_HCI_RD_SUGG_DATALEN_RSPLEN;
   24516:	2304      	movs	r3, #4
   24518:	702b      	strb	r3, [r5, #0]
}
   2451a:	2000      	movs	r0, #0
   2451c:	bd70      	pop	{r4, r5, r6, pc}
   2451e:	bf00      	nop
   24520:	20003f68 	.word	0x20003f68

00024524 <ble_ll_hci_le_rd_max_data_len>:
{
   24524:	b570      	push	{r4, r5, r6, lr}
   24526:	4605      	mov	r5, r0
   24528:	460e      	mov	r6, r1
    put_le16(rspbuf, g_ble_ll_conn_params.supp_max_tx_octets);
   2452a:	4c0a      	ldr	r4, [pc, #40]	; (24554 <ble_ll_hci_le_rd_max_data_len+0x30>)
   2452c:	79a1      	ldrb	r1, [r4, #6]
   2452e:	f7fa faf8 	bl	1eb22 <put_le16>
    put_le16(rspbuf + 2, g_ble_ll_conn_params.supp_max_tx_time);
   24532:	8a61      	ldrh	r1, [r4, #18]
   24534:	1ca8      	adds	r0, r5, #2
   24536:	f7fa faf4 	bl	1eb22 <put_le16>
    put_le16(rspbuf + 4, g_ble_ll_conn_params.supp_max_rx_octets);
   2453a:	79e1      	ldrb	r1, [r4, #7]
   2453c:	1d28      	adds	r0, r5, #4
   2453e:	f7fa faf0 	bl	1eb22 <put_le16>
    put_le16(rspbuf + 6, g_ble_ll_conn_params.supp_max_rx_time);
   24542:	8aa1      	ldrh	r1, [r4, #20]
   24544:	1da8      	adds	r0, r5, #6
   24546:	f7fa faec 	bl	1eb22 <put_le16>
    *rsplen = BLE_HCI_RD_MAX_DATALEN_RSPLEN;
   2454a:	2308      	movs	r3, #8
   2454c:	7033      	strb	r3, [r6, #0]
}
   2454e:	2000      	movs	r0, #0
   24550:	bd70      	pop	{r4, r5, r6, pc}
   24552:	bf00      	nop
   24554:	20003f68 	.word	0x20003f68

00024558 <ble_ll_read_rf_path_compensation>:
    return BLE_ERR_SUCCESS;
}

static int
ble_ll_read_rf_path_compensation(uint8_t *rspbuf, uint8_t *rsplen)
{
   24558:	b538      	push	{r3, r4, r5, lr}
   2455a:	4605      	mov	r5, r0
   2455c:	460c      	mov	r4, r1
    put_le16(rspbuf, tx_path_pwr_compensation);
   2455e:	4b08      	ldr	r3, [pc, #32]	; (24580 <ble_ll_read_rf_path_compensation+0x28>)
   24560:	8819      	ldrh	r1, [r3, #0]
   24562:	f7fa fade 	bl	1eb22 <put_le16>
    *rsplen = sizeof(int16_t);
   24566:	2302      	movs	r3, #2
   24568:	7023      	strb	r3, [r4, #0]

    put_le16(rspbuf + 2, rx_path_pwr_compensation);
   2456a:	4b06      	ldr	r3, [pc, #24]	; (24584 <ble_ll_read_rf_path_compensation+0x2c>)
   2456c:	8819      	ldrh	r1, [r3, #0]
   2456e:	1ca8      	adds	r0, r5, #2
   24570:	f7fa fad7 	bl	1eb22 <put_le16>
    *rsplen += sizeof(int16_t);
   24574:	7823      	ldrb	r3, [r4, #0]
   24576:	3302      	adds	r3, #2
   24578:	7023      	strb	r3, [r4, #0]

    return BLE_ERR_SUCCESS;
}
   2457a:	2000      	movs	r0, #0
   2457c:	bd38      	pop	{r3, r4, r5, pc}
   2457e:	bf00      	nop
   24580:	20003666 	.word	0x20003666
   24584:	20003664 	.word	0x20003664

00024588 <ble_ll_hci_rd_local_supp_cmd>:
{
   24588:	b4f0      	push	{r4, r5, r6, r7}
    memset(rspbuf, 0, BLE_HCI_RD_LOC_SUPP_CMD_RSPLEN);
   2458a:	2300      	movs	r3, #0
   2458c:	6283      	str	r3, [r0, #40]	; 0x28
   2458e:	62c3      	str	r3, [r0, #44]	; 0x2c
   24590:	6303      	str	r3, [r0, #48]	; 0x30
   24592:	6343      	str	r3, [r0, #52]	; 0x34
   24594:	6383      	str	r3, [r0, #56]	; 0x38
   24596:	63c3      	str	r3, [r0, #60]	; 0x3c
    memcpy(rspbuf, g_ble_ll_supp_cmds, sizeof(g_ble_ll_supp_cmds));
   24598:	4b0b      	ldr	r3, [pc, #44]	; (245c8 <ble_ll_hci_rd_local_supp_cmd+0x40>)
   2459a:	f103 0220 	add.w	r2, r3, #32
   2459e:	681f      	ldr	r7, [r3, #0]
   245a0:	685e      	ldr	r6, [r3, #4]
   245a2:	689d      	ldr	r5, [r3, #8]
   245a4:	68dc      	ldr	r4, [r3, #12]
   245a6:	6007      	str	r7, [r0, #0]
   245a8:	6046      	str	r6, [r0, #4]
   245aa:	6085      	str	r5, [r0, #8]
   245ac:	60c4      	str	r4, [r0, #12]
   245ae:	3310      	adds	r3, #16
   245b0:	3010      	adds	r0, #16
   245b2:	4293      	cmp	r3, r2
   245b4:	d1f3      	bne.n	2459e <ble_ll_hci_rd_local_supp_cmd+0x16>
   245b6:	681a      	ldr	r2, [r3, #0]
   245b8:	685b      	ldr	r3, [r3, #4]
   245ba:	6002      	str	r2, [r0, #0]
   245bc:	6043      	str	r3, [r0, #4]
    *rsplen = BLE_HCI_RD_LOC_SUPP_CMD_RSPLEN;
   245be:	2340      	movs	r3, #64	; 0x40
   245c0:	700b      	strb	r3, [r1, #0]
}
   245c2:	2000      	movs	r0, #0
   245c4:	bcf0      	pop	{r4, r5, r6, r7}
   245c6:	4770      	bx	lr
   245c8:	0002c96c 	.word	0x0002c96c

000245cc <ble_ll_hci_rd_local_supp_feat>:
    memset(rspbuf, 0, BLE_HCI_RD_LOC_SUPP_FEAT_RSPLEN);
   245cc:	2300      	movs	r3, #0
   245ce:	6003      	str	r3, [r0, #0]
   245d0:	6043      	str	r3, [r0, #4]
    rspbuf[4] = 0x60;
   245d2:	2260      	movs	r2, #96	; 0x60
   245d4:	7102      	strb	r2, [r0, #4]
    *rsplen = BLE_HCI_RD_LOC_SUPP_FEAT_RSPLEN;
   245d6:	2208      	movs	r2, #8
   245d8:	700a      	strb	r2, [r1, #0]
}
   245da:	4618      	mov	r0, r3
   245dc:	4770      	bx	lr

000245de <ble_ll_hci_info_params_cmd_proc>:
    return rc;
}

static int
ble_ll_hci_info_params_cmd_proc(uint8_t *cmdbuf, uint16_t ocf, uint8_t *rsplen)
{
   245de:	b508      	push	{r3, lr}

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    /* Get length from command */
    len = cmdbuf[sizeof(uint16_t)];
   245e0:	7883      	ldrb	r3, [r0, #2]
    /*
     * The command response pointer points into the same buffer as the
     * command data itself. That is fine, as each command reads all the data
     * before crafting a response.
     */
    rspbuf = cmdbuf + BLE_HCI_EVENT_CMD_COMPLETE_MIN_LEN;
   245e2:	3006      	adds	r0, #6

    /* Move past HCI command header */
    cmdbuf += BLE_HCI_CMD_HDR_LEN;

    switch (ocf) {
   245e4:	3901      	subs	r1, #1
   245e6:	2908      	cmp	r1, #8
   245e8:	d81a      	bhi.n	24620 <ble_ll_hci_info_params_cmd_proc+0x42>
   245ea:	e8df f001 	tbb	[pc, r1]
   245ee:	0a05      	.short	0x0a05
   245f0:	1919190f 	.word	0x1919190f
   245f4:	1919      	.short	0x1919
   245f6:	14          	.byte	0x14
   245f7:	00          	.byte	0x00
    case BLE_HCI_OCF_IP_RD_LOCAL_VER:
        if (len == 0) {
   245f8:	b9a3      	cbnz	r3, 24624 <ble_ll_hci_info_params_cmd_proc+0x46>
            rc = ble_ll_hci_rd_local_version(rspbuf, rsplen);
   245fa:	4611      	mov	r1, r2
   245fc:	f7ff ff59 	bl	244b2 <ble_ll_hci_rd_local_version>
   24600:	e00f      	b.n	24622 <ble_ll_hci_info_params_cmd_proc+0x44>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_CMD:
        if (len == 0) {
   24602:	b98b      	cbnz	r3, 24628 <ble_ll_hci_info_params_cmd_proc+0x4a>
            rc = ble_ll_hci_rd_local_supp_cmd(rspbuf, rsplen);
   24604:	4611      	mov	r1, r2
   24606:	f7ff ffbf 	bl	24588 <ble_ll_hci_rd_local_supp_cmd>
   2460a:	e00a      	b.n	24622 <ble_ll_hci_info_params_cmd_proc+0x44>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_FEAT:
        if (len == 0) {
   2460c:	b973      	cbnz	r3, 2462c <ble_ll_hci_info_params_cmd_proc+0x4e>
            rc = ble_ll_hci_rd_local_supp_feat(rspbuf, rsplen);
   2460e:	4611      	mov	r1, r2
   24610:	f7ff ffdc 	bl	245cc <ble_ll_hci_rd_local_supp_feat>
   24614:	e005      	b.n	24622 <ble_ll_hci_info_params_cmd_proc+0x44>
        }
        break;
    case BLE_HCI_OCF_IP_RD_BD_ADDR:
        if (len == 0) {
   24616:	b95b      	cbnz	r3, 24630 <ble_ll_hci_info_params_cmd_proc+0x52>
            rc = ble_ll_hci_rd_bd_addr(rspbuf, rsplen);
   24618:	4611      	mov	r1, r2
   2461a:	f7ff ff0f 	bl	2443c <ble_ll_hci_rd_bd_addr>
   2461e:	e000      	b.n	24622 <ble_ll_hci_info_params_cmd_proc+0x44>
        }
        break;
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   24620:	2001      	movs	r0, #1
        break;
    }

    return rc;
}
   24622:	bd08      	pop	{r3, pc}
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24624:	2012      	movs	r0, #18
   24626:	e7fc      	b.n	24622 <ble_ll_hci_info_params_cmd_proc+0x44>
   24628:	2012      	movs	r0, #18
   2462a:	e7fa      	b.n	24622 <ble_ll_hci_info_params_cmd_proc+0x44>
   2462c:	2012      	movs	r0, #18
   2462e:	e7f8      	b.n	24622 <ble_ll_hci_info_params_cmd_proc+0x44>
   24630:	2012      	movs	r0, #18
    return rc;
   24632:	e7f6      	b.n	24622 <ble_ll_hci_info_params_cmd_proc+0x44>

00024634 <ble_ll_hci_link_ctrl_cmd_proc>:
{
   24634:	b508      	push	{r3, lr}
    len = cmdbuf[sizeof(uint16_t)];
   24636:	7883      	ldrb	r3, [r0, #2]
    cmdbuf += BLE_HCI_CMD_HDR_LEN;
   24638:	3003      	adds	r0, #3
    switch (ocf) {
   2463a:	2906      	cmp	r1, #6
   2463c:	d003      	beq.n	24646 <ble_ll_hci_link_ctrl_cmd_proc+0x12>
   2463e:	291d      	cmp	r1, #29
   24640:	d00a      	beq.n	24658 <ble_ll_hci_link_ctrl_cmd_proc+0x24>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   24642:	2001      	movs	r0, #1
    return rc;
   24644:	e004      	b.n	24650 <ble_ll_hci_link_ctrl_cmd_proc+0x1c>
        if (len == BLE_HCI_DISCONNECT_CMD_LEN) {
   24646:	2b03      	cmp	r3, #3
   24648:	d003      	beq.n	24652 <ble_ll_hci_link_ctrl_cmd_proc+0x1e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2464a:	2012      	movs	r0, #18
        rc += (BLE_ERR_MAX + 1);
   2464c:	f500 7080 	add.w	r0, r0, #256	; 0x100
}
   24650:	bd08      	pop	{r3, pc}
            rc = ble_ll_conn_hci_disconnect_cmd(cmdbuf);
   24652:	f7fe fc25 	bl	22ea0 <ble_ll_conn_hci_disconnect_cmd>
   24656:	e7f9      	b.n	2464c <ble_ll_hci_link_ctrl_cmd_proc+0x18>
        if (len == sizeof(uint16_t)) {
   24658:	2b02      	cmp	r3, #2
   2465a:	d003      	beq.n	24664 <ble_ll_hci_link_ctrl_cmd_proc+0x30>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2465c:	2012      	movs	r0, #18
        rc += (BLE_ERR_MAX + 1);
   2465e:	f500 7080 	add.w	r0, r0, #256	; 0x100
        break;
   24662:	e7f5      	b.n	24650 <ble_ll_hci_link_ctrl_cmd_proc+0x1c>
            rc = ble_ll_conn_hci_rd_rem_ver_cmd(cmdbuf);
   24664:	f7fe fc63 	bl	22f2e <ble_ll_conn_hci_rd_rem_ver_cmd>
   24668:	e7f9      	b.n	2465e <ble_ll_hci_link_ctrl_cmd_proc+0x2a>
	...

0002466c <ble_ll_hci_ctlr_bb_cmd_proc>:
{
   2466c:	b538      	push	{r3, r4, r5, lr}
    len = cmdbuf[sizeof(uint16_t)];
   2466e:	7884      	ldrb	r4, [r0, #2]
    cmdbuf += BLE_HCI_CMD_HDR_LEN;
   24670:	1cc5      	adds	r5, r0, #3
    switch (ocf) {
   24672:	2963      	cmp	r1, #99	; 0x63
   24674:	d01e      	beq.n	246b4 <ble_ll_hci_ctlr_bb_cmd_proc+0x48>
   24676:	f100 0009 	add.w	r0, r0, #9
   2467a:	d807      	bhi.n	2468c <ble_ll_hci_ctlr_bb_cmd_proc+0x20>
   2467c:	2901      	cmp	r1, #1
   2467e:	d00e      	beq.n	2469e <ble_ll_hci_ctlr_bb_cmd_proc+0x32>
   24680:	2903      	cmp	r1, #3
   24682:	d127      	bne.n	246d4 <ble_ll_hci_ctlr_bb_cmd_proc+0x68>
        if (len == 0) {
   24684:	bb44      	cbnz	r4, 246d8 <ble_ll_hci_ctlr_bb_cmd_proc+0x6c>
            rc = ble_ll_reset();
   24686:	f7fa fecf 	bl	1f428 <ble_ll_reset>
   2468a:	e022      	b.n	246d2 <ble_ll_hci_ctlr_bb_cmd_proc+0x66>
    switch (ocf) {
   2468c:	297b      	cmp	r1, #123	; 0x7b
   2468e:	d01c      	beq.n	246ca <ble_ll_hci_ctlr_bb_cmd_proc+0x5e>
   24690:	297c      	cmp	r1, #124	; 0x7c
   24692:	d11f      	bne.n	246d4 <ble_ll_hci_ctlr_bb_cmd_proc+0x68>
        rc = ble_ll_conn_hci_wr_auth_pyld_tmo(cmdbuf, rspbuf, rsplen);
   24694:	4601      	mov	r1, r0
   24696:	4628      	mov	r0, r5
   24698:	f7fe fd98 	bl	231cc <ble_ll_conn_hci_wr_auth_pyld_tmo>
        break;
   2469c:	e019      	b.n	246d2 <ble_ll_hci_ctlr_bb_cmd_proc+0x66>
        if (len == BLE_HCI_SET_EVENT_MASK_LEN) {
   2469e:	2c08      	cmp	r4, #8
   246a0:	d001      	beq.n	246a6 <ble_ll_hci_ctlr_bb_cmd_proc+0x3a>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   246a2:	2012      	movs	r0, #18
   246a4:	e015      	b.n	246d2 <ble_ll_hci_ctlr_bb_cmd_proc+0x66>
            memcpy(g_ble_ll_hci_event_mask, cmdbuf, len);
   246a6:	4622      	mov	r2, r4
   246a8:	4629      	mov	r1, r5
   246aa:	480c      	ldr	r0, [pc, #48]	; (246dc <ble_ll_hci_ctlr_bb_cmd_proc+0x70>)
   246ac:	f7ed ff0a 	bl	124c4 <memcpy>
            rc = BLE_ERR_SUCCESS;
   246b0:	2000      	movs	r0, #0
   246b2:	e00e      	b.n	246d2 <ble_ll_hci_ctlr_bb_cmd_proc+0x66>
        if (len == BLE_HCI_SET_EVENT_MASK_LEN) {
   246b4:	2c08      	cmp	r4, #8
   246b6:	d001      	beq.n	246bc <ble_ll_hci_ctlr_bb_cmd_proc+0x50>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   246b8:	2012      	movs	r0, #18
    return rc;
   246ba:	e00a      	b.n	246d2 <ble_ll_hci_ctlr_bb_cmd_proc+0x66>
            memcpy(g_ble_ll_hci_event_mask2, cmdbuf, len);
   246bc:	4622      	mov	r2, r4
   246be:	4629      	mov	r1, r5
   246c0:	4807      	ldr	r0, [pc, #28]	; (246e0 <ble_ll_hci_ctlr_bb_cmd_proc+0x74>)
   246c2:	f7ed feff 	bl	124c4 <memcpy>
            rc = BLE_ERR_SUCCESS;
   246c6:	2000      	movs	r0, #0
   246c8:	e003      	b.n	246d2 <ble_ll_hci_ctlr_bb_cmd_proc+0x66>
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, rspbuf, rsplen);
   246ca:	4601      	mov	r1, r0
   246cc:	4628      	mov	r0, r5
   246ce:	f7fe fd63 	bl	23198 <ble_ll_conn_hci_rd_auth_pyld_tmo>
}
   246d2:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   246d4:	2001      	movs	r0, #1
   246d6:	e7fc      	b.n	246d2 <ble_ll_hci_ctlr_bb_cmd_proc+0x66>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   246d8:	2012      	movs	r0, #18
   246da:	e7fa      	b.n	246d2 <ble_ll_hci_ctlr_bb_cmd_proc+0x66>
   246dc:	2000364c 	.word	0x2000364c
   246e0:	20003654 	.word	0x20003654

000246e4 <ble_ll_hci_status_params_cmd_proc>:

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    /* Get length from command */
    len = cmdbuf[sizeof(uint16_t)];
   246e4:	7883      	ldrb	r3, [r0, #2]
    rspbuf = cmdbuf + BLE_HCI_EVENT_CMD_COMPLETE_MIN_LEN;

    /* Move past HCI command header */
    cmdbuf += BLE_HCI_CMD_HDR_LEN;

    switch (ocf) {
   246e6:	2905      	cmp	r1, #5
   246e8:	d10a      	bne.n	24700 <ble_ll_hci_status_params_cmd_proc+0x1c>
{
   246ea:	b510      	push	{r4, lr}
   246ec:	1d84      	adds	r4, r0, #6
   246ee:	3003      	adds	r0, #3
    case BLE_HCI_OCF_RD_RSSI:
        if (len == sizeof(uint16_t)) {
   246f0:	2b02      	cmp	r3, #2
   246f2:	d001      	beq.n	246f8 <ble_ll_hci_status_params_cmd_proc+0x14>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   246f4:	2012      	movs	r0, #18
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    return rc;
}
   246f6:	bd10      	pop	{r4, pc}
            rc = ble_ll_conn_hci_rd_rssi(cmdbuf, rspbuf, rsplen);
   246f8:	4621      	mov	r1, r4
   246fa:	f7fe fc36 	bl	22f6a <ble_ll_conn_hci_rd_rssi>
   246fe:	e7fa      	b.n	246f6 <ble_ll_hci_status_params_cmd_proc+0x12>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   24700:	2001      	movs	r0, #1
}
   24702:	4770      	bx	lr

00024704 <ble_ll_hci_le_read_local_features>:
{
   24704:	b570      	push	{r4, r5, r6, lr}
   24706:	4605      	mov	r5, r0
   24708:	460e      	mov	r6, r1
    memset(rspbuf, 0, BLE_HCI_RD_LOC_SUPP_FEAT_RSPLEN);
   2470a:	2400      	movs	r4, #0
   2470c:	6004      	str	r4, [r0, #0]
   2470e:	6044      	str	r4, [r0, #4]
    put_le32(rspbuf, ble_ll_read_supp_features());
   24710:	f7fa fe84 	bl	1f41c <ble_ll_read_supp_features>
   24714:	4601      	mov	r1, r0
   24716:	4628      	mov	r0, r5
   24718:	f7fa fa07 	bl	1eb2a <put_le32>
    *rsplen = BLE_HCI_RD_LOC_SUPP_FEAT_RSPLEN;
   2471c:	2308      	movs	r3, #8
   2471e:	7033      	strb	r3, [r6, #0]
}
   24720:	4620      	mov	r0, r4
   24722:	bd70      	pop	{r4, r5, r6, pc}

00024724 <ble_ll_hci_le_encrypt>:
{
   24724:	b570      	push	{r4, r5, r6, lr}
   24726:	b08c      	sub	sp, #48	; 0x30
   24728:	4604      	mov	r4, r0
   2472a:	460e      	mov	r6, r1
   2472c:	4615      	mov	r5, r2
    swap_buf(ecb.key, cmdbuf, BLE_ENC_BLOCK_SIZE);
   2472e:	2210      	movs	r2, #16
   24730:	4601      	mov	r1, r0
   24732:	4668      	mov	r0, sp
   24734:	f7fa fa76 	bl	1ec24 <swap_buf>
    swap_buf(ecb.plain_text, cmdbuf + BLE_ENC_BLOCK_SIZE, BLE_ENC_BLOCK_SIZE);
   24738:	2210      	movs	r2, #16
   2473a:	18a1      	adds	r1, r4, r2
   2473c:	eb0d 0002 	add.w	r0, sp, r2
   24740:	f7fa fa70 	bl	1ec24 <swap_buf>
    rc = ble_hw_encrypt_block(&ecb);
   24744:	4668      	mov	r0, sp
   24746:	f003 f9b9 	bl	27abc <ble_hw_encrypt_block>
    if (!rc) {
   2474a:	b950      	cbnz	r0, 24762 <ble_ll_hci_le_encrypt+0x3e>
   2474c:	4604      	mov	r4, r0
        swap_buf(rspbuf, ecb.cipher_text, BLE_ENC_BLOCK_SIZE);
   2474e:	2210      	movs	r2, #16
   24750:	a908      	add	r1, sp, #32
   24752:	4630      	mov	r0, r6
   24754:	f7fa fa66 	bl	1ec24 <swap_buf>
        *rsplen = BLE_ENC_BLOCK_SIZE;
   24758:	2310      	movs	r3, #16
   2475a:	702b      	strb	r3, [r5, #0]
}
   2475c:	4620      	mov	r0, r4
   2475e:	b00c      	add	sp, #48	; 0x30
   24760:	bd70      	pop	{r4, r5, r6, pc}
        *rsplen = 0;
   24762:	2300      	movs	r3, #0
   24764:	702b      	strb	r3, [r5, #0]
        rc = BLE_ERR_CTLR_BUSY;
   24766:	243a      	movs	r4, #58	; 0x3a
    return rc;
   24768:	e7f8      	b.n	2475c <ble_ll_hci_le_encrypt+0x38>

0002476a <ble_ll_hci_le_rand>:
{
   2476a:	b510      	push	{r4, lr}
   2476c:	460c      	mov	r4, r1
    rc = ble_ll_rand_data_get(rspbuf, BLE_HCI_LE_RAND_LEN);
   2476e:	2108      	movs	r1, #8
   24770:	f000 fd24 	bl	251bc <ble_ll_rand_data_get>
    *rsplen = BLE_HCI_LE_RAND_LEN;
   24774:	2308      	movs	r3, #8
   24776:	7023      	strb	r3, [r4, #0]
}
   24778:	bd10      	pop	{r4, pc}

0002477a <ble_ll_hci_le_read_supp_states>:
{
   2477a:	b538      	push	{r3, r4, r5, lr}
   2477c:	4605      	mov	r5, r0
   2477e:	460c      	mov	r4, r1
    supp_states = ble_ll_read_supp_states();
   24780:	f7fa fe46 	bl	1f410 <ble_ll_read_supp_states>
    put_le64(rspbuf, supp_states);
   24784:	4602      	mov	r2, r0
   24786:	460b      	mov	r3, r1
   24788:	4628      	mov	r0, r5
   2478a:	f7fa f9d8 	bl	1eb3e <put_le64>
    *rsplen = BLE_HCI_RD_SUPP_STATES_RSPLEN;
   2478e:	2308      	movs	r3, #8
   24790:	7023      	strb	r3, [r4, #0]
}
   24792:	2000      	movs	r0, #0
   24794:	bd38      	pop	{r3, r4, r5, pc}
	...

00024798 <ble_ll_hci_le_wr_sugg_data_len>:
{
   24798:	b538      	push	{r3, r4, r5, lr}
   2479a:	4605      	mov	r5, r0
    tx_oct = get_le16(cmdbuf);
   2479c:	f7fa f9e2 	bl	1eb64 <get_le16>
   247a0:	4604      	mov	r4, r0
    tx_time = get_le16(cmdbuf + 2);
   247a2:	1ca8      	adds	r0, r5, #2
   247a4:	f7fa f9de 	bl	1eb64 <get_le16>
   247a8:	4605      	mov	r5, r0
    if (ble_ll_chk_txrx_octets(tx_oct) && ble_ll_chk_txrx_time(tx_time)) {
   247aa:	4620      	mov	r0, r4
   247ac:	f7fa fc71 	bl	1f092 <ble_ll_chk_txrx_octets>
   247b0:	b190      	cbz	r0, 247d8 <ble_ll_hci_le_wr_sugg_data_len+0x40>
   247b2:	4628      	mov	r0, r5
   247b4:	f7fa fc75 	bl	1f0a2 <ble_ll_chk_txrx_time>
   247b8:	b180      	cbz	r0, 247dc <ble_ll_hci_le_wr_sugg_data_len+0x44>
        g_ble_ll_conn_params.sugg_tx_octets = (uint8_t)tx_oct;
   247ba:	4b09      	ldr	r3, [pc, #36]	; (247e0 <ble_ll_hci_le_wr_sugg_data_len+0x48>)
   247bc:	725c      	strb	r4, [r3, #9]
        g_ble_ll_conn_params.sugg_tx_time = tx_time;
   247be:	815d      	strh	r5, [r3, #10]
                        min(tx_oct, g_ble_ll_conn_params.supp_max_tx_octets);
   247c0:	799a      	ldrb	r2, [r3, #6]
   247c2:	4294      	cmp	r4, r2
   247c4:	bf28      	it	cs
   247c6:	4614      	movcs	r4, r2
        g_ble_ll_conn_params.conn_init_max_tx_octets =
   247c8:	721c      	strb	r4, [r3, #8]
                        min(tx_time, g_ble_ll_conn_params.supp_max_tx_time);
   247ca:	8a5a      	ldrh	r2, [r3, #18]
        g_ble_ll_conn_params.conn_init_max_tx_time =
   247cc:	4295      	cmp	r5, r2
   247ce:	bf28      	it	cs
   247d0:	4615      	movcs	r5, r2
   247d2:	819d      	strh	r5, [r3, #12]
        rc = BLE_ERR_SUCCESS;
   247d4:	2000      	movs	r0, #0
   247d6:	e000      	b.n	247da <ble_ll_hci_le_wr_sugg_data_len+0x42>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   247d8:	2012      	movs	r0, #18
}
   247da:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   247dc:	2012      	movs	r0, #18
    return rc;
   247de:	e7fc      	b.n	247da <ble_ll_hci_le_wr_sugg_data_len+0x42>
   247e0:	20003f68 	.word	0x20003f68

000247e4 <ble_ll_read_tx_power>:
{
   247e4:	b570      	push	{r4, r5, r6, lr}
   247e6:	4604      	mov	r4, r0
   247e8:	460d      	mov	r5, r1
    min = ble_phy_txpower_round(-127);
   247ea:	f06f 007e 	mvn.w	r0, #126	; 0x7e
   247ee:	f003 fd17 	bl	28220 <ble_phy_txpower_round>
   247f2:	4606      	mov	r6, r0
    max = ble_phy_txpower_round(126);
   247f4:	207e      	movs	r0, #126	; 0x7e
   247f6:	f003 fd13 	bl	28220 <ble_phy_txpower_round>
    rspbuf[0] = min;
   247fa:	7026      	strb	r6, [r4, #0]
    rspbuf[1] = max;
   247fc:	7060      	strb	r0, [r4, #1]
    *rsplen = 2;
   247fe:	2302      	movs	r3, #2
   24800:	702b      	strb	r3, [r5, #0]
}
   24802:	2000      	movs	r0, #0
   24804:	bd70      	pop	{r4, r5, r6, pc}
	...

00024808 <ble_ll_write_rf_path_compensation>:
{
   24808:	b570      	push	{r4, r5, r6, lr}
   2480a:	4605      	mov	r5, r0
    tx = get_le16(cmdbuf);
   2480c:	f7fa f9aa 	bl	1eb64 <get_le16>
   24810:	4604      	mov	r4, r0
   24812:	b206      	sxth	r6, r0
    rx = get_le16(cmdbuf + 2);
   24814:	1ca8      	adds	r0, r5, #2
   24816:	f7fa f9a5 	bl	1eb64 <get_le16>
    if ((tx < -1280) || (tx > 1280) || (rx < -1280) || (rx > 1280)) {
   2481a:	f504 64a0 	add.w	r4, r4, #1280	; 0x500
   2481e:	b2a4      	uxth	r4, r4
   24820:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
   24824:	d815      	bhi.n	24852 <ble_ll_write_rf_path_compensation+0x4a>
   24826:	b200      	sxth	r0, r0
   24828:	f510 6fa0 	cmn.w	r0, #1280	; 0x500
   2482c:	db13      	blt.n	24856 <ble_ll_write_rf_path_compensation+0x4e>
   2482e:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   24832:	dc12      	bgt.n	2485a <ble_ll_write_rf_path_compensation+0x52>
    tx_path_pwr_compensation = tx;
   24834:	4b0a      	ldr	r3, [pc, #40]	; (24860 <ble_ll_write_rf_path_compensation+0x58>)
   24836:	801e      	strh	r6, [r3, #0]
    rx_path_pwr_compensation = rx;
   24838:	4b0a      	ldr	r3, [pc, #40]	; (24864 <ble_ll_write_rf_path_compensation+0x5c>)
   2483a:	8018      	strh	r0, [r3, #0]
    ble_phy_set_rx_pwr_compensation(rx_path_pwr_compensation / 10);
   2483c:	4b0a      	ldr	r3, [pc, #40]	; (24868 <ble_ll_write_rf_path_compensation+0x60>)
   2483e:	fb83 2300 	smull	r2, r3, r3, r0
   24842:	17c0      	asrs	r0, r0, #31
   24844:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
   24848:	b240      	sxtb	r0, r0
   2484a:	f003 fd37 	bl	282bc <ble_phy_set_rx_pwr_compensation>
    return BLE_ERR_SUCCESS;
   2484e:	2000      	movs	r0, #0
   24850:	e000      	b.n	24854 <ble_ll_write_rf_path_compensation+0x4c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   24852:	2012      	movs	r0, #18
}
   24854:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   24856:	2012      	movs	r0, #18
   24858:	e7fc      	b.n	24854 <ble_ll_write_rf_path_compensation+0x4c>
   2485a:	2012      	movs	r0, #18
   2485c:	e7fa      	b.n	24854 <ble_ll_write_rf_path_compensation+0x4c>
   2485e:	bf00      	nop
   24860:	20003666 	.word	0x20003666
   24864:	20003664 	.word	0x20003664
   24868:	66666667 	.word	0x66666667

0002486c <ble_ll_hci_le_cmd_proc>:
{
   2486c:	b5b0      	push	{r4, r5, r7, lr}
   2486e:	460d      	mov	r5, r1
    len = cmdbuf[sizeof(uint16_t)];
   24870:	7881      	ldrb	r1, [r0, #2]
    rspbuf = cmdbuf + BLE_HCI_EVENT_CMD_COMPLETE_MIN_LEN;
   24872:	1d87      	adds	r7, r0, #6
    cmdbuf += BLE_HCI_CMD_HDR_LEN;
   24874:	f100 0c03 	add.w	ip, r0, #3
    switch (ocf) {
   24878:	1e6c      	subs	r4, r5, #1
   2487a:	2c4d      	cmp	r4, #77	; 0x4d
   2487c:	f200 81f8 	bhi.w	24c70 <ble_ll_hci_le_cmd_proc+0x404>
   24880:	e8df f014 	tbh	[pc, r4, lsl #1]
   24884:	0057004e 	.word	0x0057004e
   24888:	01f60060 	.word	0x01f60060
   2488c:	00730069 	.word	0x00730069
   24890:	0085007c 	.word	0x0085007c
   24894:	009b0090 	.word	0x009b0090
   24898:	00b100a8 	.word	0x00b100a8
   2489c:	00c400bb 	.word	0x00c400bb
   248a0:	00d500cc 	.word	0x00d500cc
   248a4:	00e600dc 	.word	0x00e600dc
   248a8:	00f900f0 	.word	0x00f900f0
   248ac:	01110107 	.word	0x01110107
   248b0:	0124011a 	.word	0x0124011a
   248b4:	0136012d 	.word	0x0136012d
   248b8:	014a0140 	.word	0x014a0140
   248bc:	01f601f6 	.word	0x01f601f6
   248c0:	015301f6 	.word	0x015301f6
   248c4:	016b015f 	.word	0x016b015f
   248c8:	017e0175 	.word	0x017e0175
   248cc:	01f601f6 	.word	0x01f601f6
   248d0:	01900187 	.word	0x01900187
   248d4:	01a00199 	.word	0x01a00199
   248d8:	01b301a9 	.word	0x01b301a9
   248dc:	01c601bd 	.word	0x01c601bd
   248e0:	01f601cf 	.word	0x01f601cf
   248e4:	01f601f6 	.word	0x01f601f6
   248e8:	01f601f6 	.word	0x01f601f6
   248ec:	01f601f6 	.word	0x01f601f6
   248f0:	01f601f6 	.word	0x01f601f6
   248f4:	01f601f6 	.word	0x01f601f6
   248f8:	01f601f6 	.word	0x01f601f6
   248fc:	01f601f6 	.word	0x01f601f6
   24900:	01f601f6 	.word	0x01f601f6
   24904:	01f601f6 	.word	0x01f601f6
   24908:	01f601f6 	.word	0x01f601f6
   2490c:	01f601f6 	.word	0x01f601f6
   24910:	01f601f6 	.word	0x01f601f6
   24914:	01f601f6 	.word	0x01f601f6
   24918:	01de01d8 	.word	0x01de01d8
   2491c:	01ed01e4 	.word	0x01ed01e4
        if (len == BLE_HCI_SET_LE_EVENT_MASK_LEN) {
   24920:	2908      	cmp	r1, #8
   24922:	d001      	beq.n	24928 <ble_ll_hci_le_cmd_proc+0xbc>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24924:	2412      	movs	r4, #18
   24926:	e0aa      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_hci_set_le_event_mask(cmdbuf);
   24928:	4660      	mov	r0, ip
   2492a:	f7ff fd93 	bl	24454 <ble_ll_hci_set_le_event_mask>
   2492e:	4604      	mov	r4, r0
   24930:	e0a5      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_RD_BUF_SIZE_LEN) {
   24932:	b109      	cbz	r1, 24938 <ble_ll_hci_le_cmd_proc+0xcc>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24934:	2412      	movs	r4, #18
   24936:	e0a2      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_hci_le_read_bufsize(rspbuf, rsplen);
   24938:	4611      	mov	r1, r2
   2493a:	4638      	mov	r0, r7
   2493c:	f7ff fdd0 	bl	244e0 <ble_ll_hci_le_read_bufsize>
   24940:	4604      	mov	r4, r0
   24942:	e09c      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == 0) {
   24944:	b109      	cbz	r1, 2494a <ble_ll_hci_le_cmd_proc+0xde>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24946:	2412      	movs	r4, #18
   24948:	e099      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_hci_le_read_local_features(rspbuf, rsplen);
   2494a:	4611      	mov	r1, r2
   2494c:	4638      	mov	r0, r7
   2494e:	f7ff fed9 	bl	24704 <ble_ll_hci_le_read_local_features>
   24952:	4604      	mov	r4, r0
   24954:	e093      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_SET_RAND_ADDR_LEN) {
   24956:	2906      	cmp	r1, #6
   24958:	d001      	beq.n	2495e <ble_ll_hci_le_cmd_proc+0xf2>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2495a:	2412      	movs	r4, #18
   2495c:	e08f      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_set_random_addr(cmdbuf, false);
   2495e:	2100      	movs	r1, #0
   24960:	4660      	mov	r0, ip
   24962:	f7fa fbff 	bl	1f164 <ble_ll_set_random_addr>
   24966:	4604      	mov	r4, r0
   24968:	e089      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_SET_ADV_PARAM_LEN) {
   2496a:	290f      	cmp	r1, #15
   2496c:	d001      	beq.n	24972 <ble_ll_hci_le_cmd_proc+0x106>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2496e:	2412      	movs	r4, #18
   24970:	e085      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_adv_set_adv_params(cmdbuf);
   24972:	4660      	mov	r0, ip
   24974:	f7fb fc1a 	bl	201ac <ble_ll_adv_set_adv_params>
   24978:	4604      	mov	r4, r0
   2497a:	e080      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == 0) {
   2497c:	b109      	cbz	r1, 24982 <ble_ll_hci_le_cmd_proc+0x116>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2497e:	2412      	movs	r4, #18
   24980:	e07d      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_adv_read_txpwr(rspbuf, rsplen);
   24982:	4611      	mov	r1, r2
   24984:	4638      	mov	r0, r7
   24986:	f7fb fc97 	bl	202b8 <ble_ll_adv_read_txpwr>
   2498a:	4604      	mov	r4, r0
   2498c:	e077      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_SET_ADV_DATA_LEN) {
   2498e:	2920      	cmp	r1, #32
   24990:	d001      	beq.n	24996 <ble_ll_hci_le_cmd_proc+0x12a>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24992:	2412      	movs	r4, #18
   24994:	e073      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_adv_set_adv_data(cmdbuf, len, 0,
   24996:	2303      	movs	r3, #3
   24998:	2200      	movs	r2, #0
   2499a:	4660      	mov	r0, ip
   2499c:	f7fb fd3e 	bl	2041c <ble_ll_adv_set_adv_data>
   249a0:	4604      	mov	r4, r0
   249a2:	e06c      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_SET_SCAN_RSP_DATA_LEN) {
   249a4:	2920      	cmp	r1, #32
   249a6:	d001      	beq.n	249ac <ble_ll_hci_le_cmd_proc+0x140>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   249a8:	2412      	movs	r4, #18
   249aa:	e068      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_adv_set_scan_rsp_data(cmdbuf, len, 0,
   249ac:	2303      	movs	r3, #3
   249ae:	2200      	movs	r2, #0
   249b0:	4660      	mov	r0, ip
   249b2:	f7fb fca3 	bl	202fc <ble_ll_adv_set_scan_rsp_data>
   249b6:	4604      	mov	r4, r0
   249b8:	e061      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_SET_ADV_ENABLE_LEN) {
   249ba:	2901      	cmp	r1, #1
   249bc:	d001      	beq.n	249c2 <ble_ll_hci_le_cmd_proc+0x156>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   249be:	2412      	movs	r4, #18
   249c0:	e05d      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_adv_set_enable(0, cmdbuf[0], -1, 0);
   249c2:	2300      	movs	r3, #0
   249c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   249c8:	78c1      	ldrb	r1, [r0, #3]
   249ca:	4618      	mov	r0, r3
   249cc:	f7fb fc7a 	bl	202c4 <ble_ll_adv_set_enable>
   249d0:	4604      	mov	r4, r0
   249d2:	e054      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_SET_SCAN_PARAM_LEN) {
   249d4:	2907      	cmp	r1, #7
   249d6:	d001      	beq.n	249dc <ble_ll_hci_le_cmd_proc+0x170>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   249d8:	2412      	movs	r4, #18
   249da:	e050      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_scan_set_scan_params(cmdbuf);
   249dc:	4660      	mov	r0, ip
   249de:	f001 ffaf 	bl	26940 <ble_ll_scan_set_scan_params>
   249e2:	4604      	mov	r4, r0
   249e4:	e04b      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_SET_SCAN_ENABLE_LEN) {
   249e6:	2902      	cmp	r1, #2
   249e8:	d001      	beq.n	249ee <ble_ll_hci_le_cmd_proc+0x182>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   249ea:	2412      	movs	r4, #18
   249ec:	e047      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_scan_set_enable(cmdbuf, 0);
   249ee:	2100      	movs	r1, #0
   249f0:	4660      	mov	r0, ip
   249f2:	f001 ffe5 	bl	269c0 <ble_ll_scan_set_enable>
   249f6:	4604      	mov	r4, r0
   249f8:	e041      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_CREATE_CONN_LEN) {
   249fa:	2919      	cmp	r1, #25
   249fc:	d001      	beq.n	24a02 <ble_ll_hci_le_cmd_proc+0x196>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   249fe:	2412      	movs	r4, #18
   24a00:	e03d      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_conn_create(cmdbuf);
   24a02:	4660      	mov	r0, ip
   24a04:	f7fe f86a 	bl	22adc <ble_ll_conn_create>
   24a08:	4604      	mov	r4, r0
   24a0a:	e038      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == 0) {
   24a0c:	b109      	cbz	r1, 24a12 <ble_ll_hci_le_cmd_proc+0x1a6>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24a0e:	2412      	movs	r4, #18
   24a10:	e035      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_conn_create_cancel(cb);
   24a12:	4618      	mov	r0, r3
   24a14:	f7fe fa20 	bl	22e58 <ble_ll_conn_create_cancel>
   24a18:	4604      	mov	r4, r0
   24a1a:	e030      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == 0) {
   24a1c:	b109      	cbz	r1, 24a22 <ble_ll_hci_le_cmd_proc+0x1b6>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24a1e:	2412      	movs	r4, #18
   24a20:	e02d      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_whitelist_read_size(rspbuf, rsplen);
   24a22:	4611      	mov	r1, r2
   24a24:	4638      	mov	r0, r7
   24a26:	f002 fe6f 	bl	27708 <ble_ll_whitelist_read_size>
   24a2a:	4604      	mov	r4, r0
   24a2c:	e027      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == 0) {
   24a2e:	b109      	cbz	r1, 24a34 <ble_ll_hci_le_cmd_proc+0x1c8>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24a30:	2412      	movs	r4, #18
   24a32:	e024      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_whitelist_clear();
   24a34:	f002 fe52 	bl	276dc <ble_ll_whitelist_clear>
   24a38:	4604      	mov	r4, r0
   24a3a:	e020      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_ADD_WHITE_LIST_LEN) {
   24a3c:	2907      	cmp	r1, #7
   24a3e:	d001      	beq.n	24a44 <ble_ll_hci_le_cmd_proc+0x1d8>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24a40:	2412      	movs	r4, #18
   24a42:	e01c      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_whitelist_add(cmdbuf + 1, cmdbuf[0]);
   24a44:	78c1      	ldrb	r1, [r0, #3]
   24a46:	3004      	adds	r0, #4
   24a48:	f002 fe6c 	bl	27724 <ble_ll_whitelist_add>
   24a4c:	4604      	mov	r4, r0
   24a4e:	e016      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_RMV_WHITE_LIST_LEN) {
   24a50:	2907      	cmp	r1, #7
   24a52:	d001      	beq.n	24a58 <ble_ll_hci_le_cmd_proc+0x1ec>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24a54:	2412      	movs	r4, #18
   24a56:	e012      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_whitelist_rmv(cmdbuf + 1, cmdbuf[0]);
   24a58:	78c1      	ldrb	r1, [r0, #3]
   24a5a:	3004      	adds	r0, #4
   24a5c:	f002 fe8e 	bl	2777c <ble_ll_whitelist_rmv>
   24a60:	4604      	mov	r4, r0
   24a62:	e00c      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_CONN_UPDATE_LEN) {
   24a64:	290e      	cmp	r1, #14
   24a66:	d001      	beq.n	24a6c <ble_ll_hci_le_cmd_proc+0x200>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24a68:	2412      	movs	r4, #18
   24a6a:	e008      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_conn_hci_update(cmdbuf);
   24a6c:	4660      	mov	r0, ip
   24a6e:	f7fe f918 	bl	22ca2 <ble_ll_conn_hci_update>
   24a72:	4604      	mov	r4, r0
   24a74:	e003      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_conn_hci_set_chan_class(cmdbuf);
   24a76:	4660      	mov	r0, ip
   24a78:	f7fe faba 	bl	22ff0 <ble_ll_conn_hci_set_chan_class>
   24a7c:	4604      	mov	r4, r0
    if (ble_ll_hci_le_cmd_send_cmd_status(ocf) || rc == BLE_ERR_UNKNOWN_HCI_CMD) {
   24a7e:	4628      	mov	r0, r5
   24a80:	f7ff fcf2 	bl	24468 <ble_ll_hci_le_cmd_send_cmd_status>
   24a84:	b908      	cbnz	r0, 24a8a <ble_ll_hci_le_cmd_proc+0x21e>
   24a86:	2c01      	cmp	r4, #1
   24a88:	d101      	bne.n	24a8e <ble_ll_hci_le_cmd_proc+0x222>
        rc += (BLE_ERR_MAX + 1);
   24a8a:	f504 7480 	add.w	r4, r4, #256	; 0x100
}
   24a8e:	4620      	mov	r0, r4
   24a90:	bdb0      	pop	{r4, r5, r7, pc}
        if (len == BLE_HCI_RD_CHANMAP_LEN) {
   24a92:	2902      	cmp	r1, #2
   24a94:	d001      	beq.n	24a9a <ble_ll_hci_le_cmd_proc+0x22e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24a96:	2412      	movs	r4, #18
   24a98:	e7f1      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_conn_hci_rd_chan_map(cmdbuf, rspbuf, rsplen);
   24a9a:	4639      	mov	r1, r7
   24a9c:	4660      	mov	r0, ip
   24a9e:	f7fe fa80 	bl	22fa2 <ble_ll_conn_hci_rd_chan_map>
   24aa2:	4604      	mov	r4, r0
   24aa4:	e7eb      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_CONN_RD_REM_FEAT_LEN) {
   24aa6:	2902      	cmp	r1, #2
   24aa8:	d001      	beq.n	24aae <ble_ll_hci_le_cmd_proc+0x242>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24aaa:	2412      	movs	r4, #18
   24aac:	e7e7      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_conn_hci_read_rem_features(cmdbuf);
   24aae:	4660      	mov	r0, ip
   24ab0:	f7fe f8cc 	bl	22c4c <ble_ll_conn_hci_read_rem_features>
   24ab4:	4604      	mov	r4, r0
   24ab6:	e7e2      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_LE_ENCRYPT_LEN) {
   24ab8:	2920      	cmp	r1, #32
   24aba:	d001      	beq.n	24ac0 <ble_ll_hci_le_cmd_proc+0x254>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24abc:	2412      	movs	r4, #18
   24abe:	e7de      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_hci_le_encrypt(cmdbuf, rspbuf, rsplen);
   24ac0:	4639      	mov	r1, r7
   24ac2:	4660      	mov	r0, ip
   24ac4:	f7ff fe2e 	bl	24724 <ble_ll_hci_le_encrypt>
   24ac8:	4604      	mov	r4, r0
   24aca:	e7d8      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == 0) {
   24acc:	b109      	cbz	r1, 24ad2 <ble_ll_hci_le_cmd_proc+0x266>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24ace:	2412      	movs	r4, #18
   24ad0:	e7d5      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_hci_le_rand(rspbuf, rsplen);
   24ad2:	4611      	mov	r1, r2
   24ad4:	4638      	mov	r0, r7
   24ad6:	f7ff fe48 	bl	2476a <ble_ll_hci_le_rand>
   24ada:	4604      	mov	r4, r0
   24adc:	e7cf      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_LE_START_ENCRYPT_LEN) {
   24ade:	291c      	cmp	r1, #28
   24ae0:	d001      	beq.n	24ae6 <ble_ll_hci_le_cmd_proc+0x27a>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24ae2:	2412      	movs	r4, #18
   24ae4:	e7cb      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_conn_hci_le_start_encrypt(cmdbuf);
   24ae6:	4660      	mov	r0, ip
   24ae8:	f7fe fad0 	bl	2308c <ble_ll_conn_hci_le_start_encrypt>
   24aec:	4604      	mov	r4, r0
   24aee:	e7c6      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_LT_KEY_REQ_REPLY_LEN) {
   24af0:	2912      	cmp	r1, #18
   24af2:	d001      	beq.n	24af8 <ble_ll_hci_le_cmd_proc+0x28c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24af4:	2412      	movs	r4, #18
   24af6:	e7c2      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_conn_hci_le_ltk_reply(cmdbuf, rspbuf, rsplen);
   24af8:	4639      	mov	r1, r7
   24afa:	4660      	mov	r0, ip
   24afc:	f7fe faf5 	bl	230ea <ble_ll_conn_hci_le_ltk_reply>
   24b00:	4604      	mov	r4, r0
   24b02:	e7bc      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_LT_KEY_REQ_NEG_REPLY_LEN) {
   24b04:	2902      	cmp	r1, #2
   24b06:	d001      	beq.n	24b0c <ble_ll_hci_le_cmd_proc+0x2a0>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24b08:	2412      	movs	r4, #18
   24b0a:	e7b8      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_conn_hci_le_ltk_neg_reply(cmdbuf, rspbuf, rsplen);
   24b0c:	4639      	mov	r1, r7
   24b0e:	4660      	mov	r0, ip
   24b10:	f7fe fb1b 	bl	2314a <ble_ll_conn_hci_le_ltk_neg_reply>
   24b14:	4604      	mov	r4, r0
   24b16:	e7b2      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == 0) {
   24b18:	b109      	cbz	r1, 24b1e <ble_ll_hci_le_cmd_proc+0x2b2>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24b1a:	2412      	movs	r4, #18
   24b1c:	e7af      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_hci_le_read_supp_states(rspbuf, rsplen);
   24b1e:	4611      	mov	r1, r2
   24b20:	4638      	mov	r0, r7
   24b22:	f7ff fe2a 	bl	2477a <ble_ll_hci_le_read_supp_states>
   24b26:	4604      	mov	r4, r0
   24b28:	e7a9      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_CONN_PARAM_REPLY_LEN) {
   24b2a:	290e      	cmp	r1, #14
   24b2c:	d001      	beq.n	24b32 <ble_ll_hci_le_cmd_proc+0x2c6>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24b2e:	2412      	movs	r4, #18
   24b30:	e7a5      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_conn_hci_param_reply(cmdbuf, 1, rspbuf, rsplen);
   24b32:	4613      	mov	r3, r2
   24b34:	463a      	mov	r2, r7
   24b36:	2101      	movs	r1, #1
   24b38:	4660      	mov	r0, ip
   24b3a:	f7fe f929 	bl	22d90 <ble_ll_conn_hci_param_reply>
   24b3e:	4604      	mov	r4, r0
   24b40:	e79d      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_CONN_PARAM_NEG_REPLY_LEN) {
   24b42:	2903      	cmp	r1, #3
   24b44:	d001      	beq.n	24b4a <ble_ll_hci_le_cmd_proc+0x2de>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24b46:	2412      	movs	r4, #18
   24b48:	e799      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_conn_hci_param_reply(cmdbuf, 0, rspbuf, rsplen);
   24b4a:	4613      	mov	r3, r2
   24b4c:	463a      	mov	r2, r7
   24b4e:	2100      	movs	r1, #0
   24b50:	4660      	mov	r0, ip
   24b52:	f7fe f91d 	bl	22d90 <ble_ll_conn_hci_param_reply>
   24b56:	4604      	mov	r4, r0
   24b58:	e791      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_SET_DATALEN_LEN) {
   24b5a:	2906      	cmp	r1, #6
   24b5c:	d001      	beq.n	24b62 <ble_ll_hci_le_cmd_proc+0x2f6>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24b5e:	2412      	movs	r4, #18
   24b60:	e78d      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_conn_hci_set_data_len(cmdbuf, rspbuf, rsplen);
   24b62:	4639      	mov	r1, r7
   24b64:	4660      	mov	r0, ip
   24b66:	f7fe fa57 	bl	23018 <ble_ll_conn_hci_set_data_len>
   24b6a:	4604      	mov	r4, r0
   24b6c:	e787      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == 0) {
   24b6e:	b109      	cbz	r1, 24b74 <ble_ll_hci_le_cmd_proc+0x308>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24b70:	2412      	movs	r4, #18
   24b72:	e784      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_hci_le_rd_sugg_data_len(rspbuf, rsplen);
   24b74:	4611      	mov	r1, r2
   24b76:	4638      	mov	r0, r7
   24b78:	f7ff fcc2 	bl	24500 <ble_ll_hci_le_rd_sugg_data_len>
   24b7c:	4604      	mov	r4, r0
   24b7e:	e77e      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_WR_SUGG_DATALEN_LEN) {
   24b80:	2904      	cmp	r1, #4
   24b82:	d001      	beq.n	24b88 <ble_ll_hci_le_cmd_proc+0x31c>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24b84:	2412      	movs	r4, #18
   24b86:	e77a      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_hci_le_wr_sugg_data_len(cmdbuf);
   24b88:	4660      	mov	r0, ip
   24b8a:	f7ff fe05 	bl	24798 <ble_ll_hci_le_wr_sugg_data_len>
   24b8e:	4604      	mov	r4, r0
   24b90:	e775      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_ADD_TO_RESOLV_LIST_LEN) {
   24b92:	2927      	cmp	r1, #39	; 0x27
   24b94:	d001      	beq.n	24b9a <ble_ll_hci_le_cmd_proc+0x32e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24b96:	2412      	movs	r4, #18
   24b98:	e771      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_resolv_list_add(cmdbuf);
   24b9a:	4660      	mov	r0, ip
   24b9c:	f000 fc70 	bl	25480 <ble_ll_resolv_list_add>
   24ba0:	4604      	mov	r4, r0
   24ba2:	e76c      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_RMV_FROM_RESOLV_LIST_LEN) {
   24ba4:	2907      	cmp	r1, #7
   24ba6:	d001      	beq.n	24bac <ble_ll_hci_le_cmd_proc+0x340>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24ba8:	2412      	movs	r4, #18
   24baa:	e768      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_resolv_list_rmv(cmdbuf);
   24bac:	4660      	mov	r0, ip
   24bae:	f000 fcc7 	bl	25540 <ble_ll_resolv_list_rmv>
   24bb2:	4604      	mov	r4, r0
   24bb4:	e763      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == 0) {
   24bb6:	b109      	cbz	r1, 24bbc <ble_ll_hci_le_cmd_proc+0x350>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24bb8:	2412      	movs	r4, #18
   24bba:	e760      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_resolv_list_clr();
   24bbc:	f000 fc26 	bl	2540c <ble_ll_resolv_list_clr>
   24bc0:	4604      	mov	r4, r0
   24bc2:	e75c      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == 0) {
   24bc4:	b109      	cbz	r1, 24bca <ble_ll_hci_le_cmd_proc+0x35e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24bc6:	2412      	movs	r4, #18
   24bc8:	e759      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_resolv_list_read_size(rspbuf, rsplen);
   24bca:	4611      	mov	r1, r2
   24bcc:	4638      	mov	r0, r7
   24bce:	f000 fc2d 	bl	2542c <ble_ll_resolv_list_read_size>
   24bd2:	4604      	mov	r4, r0
   24bd4:	e753      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_RD_PEER_RESOLV_ADDR_LEN) {
   24bd6:	2907      	cmp	r1, #7
   24bd8:	d001      	beq.n	24bde <ble_ll_hci_le_cmd_proc+0x372>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24bda:	2412      	movs	r4, #18
   24bdc:	e74f      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_resolv_peer_addr_rd(cmdbuf, rspbuf, rsplen);
   24bde:	4639      	mov	r1, r7
   24be0:	4660      	mov	r0, ip
   24be2:	f000 fd01 	bl	255e8 <ble_ll_resolv_peer_addr_rd>
   24be6:	4604      	mov	r4, r0
   24be8:	e749      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if(len == BLE_HCI_RD_LOC_RESOLV_ADDR_LEN) {
   24bea:	2907      	cmp	r1, #7
   24bec:	d001      	beq.n	24bf2 <ble_ll_hci_le_cmd_proc+0x386>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24bee:	2412      	movs	r4, #18
   24bf0:	e745      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_resolv_local_addr_rd(cmdbuf, rspbuf, rsplen);
   24bf2:	4639      	mov	r1, r7
   24bf4:	4660      	mov	r0, ip
   24bf6:	f000 fd0d 	bl	25614 <ble_ll_resolv_local_addr_rd>
   24bfa:	4604      	mov	r4, r0
   24bfc:	e73f      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_SET_ADDR_RESOL_ENA_LEN) {
   24bfe:	2901      	cmp	r1, #1
   24c00:	d001      	beq.n	24c06 <ble_ll_hci_le_cmd_proc+0x39a>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24c02:	2412      	movs	r4, #18
   24c04:	e73b      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_resolv_enable_cmd(cmdbuf);
   24c06:	4660      	mov	r0, ip
   24c08:	f000 fcca 	bl	255a0 <ble_ll_resolv_enable_cmd>
   24c0c:	4604      	mov	r4, r0
   24c0e:	e736      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_SET_RESOLV_PRIV_ADDR_TO_LEN) {
   24c10:	2902      	cmp	r1, #2
   24c12:	d001      	beq.n	24c18 <ble_ll_hci_le_cmd_proc+0x3ac>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24c14:	2412      	movs	r4, #18
   24c16:	e732      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_resolv_set_rpa_tmo(cmdbuf);
   24c18:	4660      	mov	r0, ip
   24c1a:	f000 fdd5 	bl	257c8 <ble_ll_resolv_set_rpa_tmo>
   24c1e:	4604      	mov	r4, r0
   24c20:	e72d      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == 0) {
   24c22:	b109      	cbz	r1, 24c28 <ble_ll_hci_le_cmd_proc+0x3bc>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24c24:	2412      	movs	r4, #18
   24c26:	e72a      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_hci_le_rd_max_data_len(rspbuf, rsplen);
   24c28:	4611      	mov	r1, r2
   24c2a:	4638      	mov	r0, r7
   24c2c:	f7ff fc7a 	bl	24524 <ble_ll_hci_le_rd_max_data_len>
   24c30:	4604      	mov	r4, r0
   24c32:	e724      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        rc = ble_ll_read_tx_power(rspbuf, rsplen);
   24c34:	4611      	mov	r1, r2
   24c36:	4638      	mov	r0, r7
   24c38:	f7ff fdd4 	bl	247e4 <ble_ll_read_tx_power>
   24c3c:	4604      	mov	r4, r0
        break;
   24c3e:	e71e      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        rc = ble_ll_read_rf_path_compensation(rspbuf, rsplen);
   24c40:	4611      	mov	r1, r2
   24c42:	4638      	mov	r0, r7
   24c44:	f7ff fc88 	bl	24558 <ble_ll_read_rf_path_compensation>
   24c48:	4604      	mov	r4, r0
        break;
   24c4a:	e718      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_LE_WR_RF_PATH_COMPENSATION_LEN) {
   24c4c:	2904      	cmp	r1, #4
   24c4e:	d001      	beq.n	24c54 <ble_ll_hci_le_cmd_proc+0x3e8>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24c50:	2412      	movs	r4, #18
   24c52:	e714      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_write_rf_path_compensation(cmdbuf);
   24c54:	4660      	mov	r0, ip
   24c56:	f7ff fdd7 	bl	24808 <ble_ll_write_rf_path_compensation>
   24c5a:	4604      	mov	r4, r0
   24c5c:	e70f      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        if (len == BLE_HCI_LE_SET_PRIVACY_MODE_LEN) {
   24c5e:	2908      	cmp	r1, #8
   24c60:	d001      	beq.n	24c66 <ble_ll_hci_le_cmd_proc+0x3fa>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   24c62:	2412      	movs	r4, #18
   24c64:	e70b      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
            rc = ble_ll_resolve_set_priv_mode(cmdbuf);
   24c66:	4660      	mov	r0, ip
   24c68:	f000 fcea 	bl	25640 <ble_ll_resolve_set_priv_mode>
   24c6c:	4604      	mov	r4, r0
   24c6e:	e706      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   24c70:	2401      	movs	r4, #1
   24c72:	e704      	b.n	24a7e <ble_ll_hci_le_cmd_proc+0x212>

00024c74 <ble_ll_hci_adv_mode_ext>:
}
   24c74:	2000      	movs	r0, #0
   24c76:	4770      	bx	lr

00024c78 <ble_ll_hci_event_send>:
{
   24c78:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(BLE_HCI_EVENT_HDR_LEN + evbuf[1] <= BLE_LL_MAX_EVT_LEN);
   24c7a:	7843      	ldrb	r3, [r0, #1]
   24c7c:	3302      	adds	r3, #2
   24c7e:	2b46      	cmp	r3, #70	; 0x46
   24c80:	dc02      	bgt.n	24c88 <ble_ll_hci_event_send+0x10>
    rc = ble_hci_trans_ll_evt_tx(evbuf);
   24c82:	f7f8 fd23 	bl	1d6cc <ble_hci_trans_ll_evt_tx>
}
   24c86:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(BLE_HCI_EVENT_HDR_LEN + evbuf[1] <= BLE_LL_MAX_EVT_LEN);
   24c88:	2300      	movs	r3, #0
   24c8a:	461a      	mov	r2, r3
   24c8c:	4619      	mov	r1, r3
   24c8e:	4618      	mov	r0, r3
   24c90:	f7eb fca4 	bl	105dc <__assert_func>

00024c94 <ble_ll_hci_cmd_proc>:
 *
 * @param ev Pointer to os event containing a pointer to command buffer
 */
static void
ble_ll_hci_cmd_proc(struct ble_npl_event *ev)
{
   24c94:	b570      	push	{r4, r5, r6, lr}
   24c96:	b082      	sub	sp, #8
    uint8_t ogf;
    uint8_t rsplen;
    uint8_t *cmdbuf;
    uint16_t opcode;
    uint16_t ocf;
    ble_ll_hci_post_cmd_complete_cb post_cb = NULL;
   24c98:	2300      	movs	r3, #0
   24c9a:	9300      	str	r3, [sp, #0]
    return ev->ev.ev_arg;
   24c9c:	6884      	ldr	r4, [r0, #8]
    hal_gpio_write(MYNEWT_VAL(BLE_LL_DBG_HCI_CMD_PIN), 1);
#endif

    /* The command buffer is the event argument */
    cmdbuf = (uint8_t *)ble_npl_event_get_arg(ev);
    BLE_LL_ASSERT(cmdbuf != NULL);
   24c9e:	b19c      	cbz	r4, 24cc8 <ble_ll_hci_cmd_proc+0x34>

    /* Get the opcode from the command buffer */
    opcode = get_le16(cmdbuf);
   24ca0:	4620      	mov	r0, r4
   24ca2:	f7f9 ff5f 	bl	1eb64 <get_le16>
   24ca6:	4605      	mov	r5, r0
    ocf = BLE_HCI_OCF(opcode);
   24ca8:	f3c0 0109 	ubfx	r1, r0, #0, #10
    ogf = BLE_HCI_OGF(opcode);
   24cac:	f3c0 2385 	ubfx	r3, r0, #10, #6

    /* Assume response length is zero */
    rsplen = 0;
   24cb0:	2200      	movs	r2, #0
   24cb2:	f88d 2007 	strb.w	r2, [sp, #7]

    switch (ogf) {
   24cb6:	3b01      	subs	r3, #1
   24cb8:	2b07      	cmp	r3, #7
   24cba:	d84d      	bhi.n	24d58 <ble_ll_hci_cmd_proc+0xc4>
   24cbc:	e8df f003 	tbb	[pc, r3]
   24cc0:	30294c09 	.word	0x30294c09
   24cc4:	3e4c4c37 	.word	0x3e4c4c37
    BLE_LL_ASSERT(cmdbuf != NULL);
   24cc8:	461a      	mov	r2, r3
   24cca:	4619      	mov	r1, r3
   24ccc:	4618      	mov	r0, r3
   24cce:	f7eb fc85 	bl	105dc <__assert_func>
    case BLE_HCI_OGF_LINK_CTRL:
        rc = ble_ll_hci_link_ctrl_cmd_proc(cmdbuf, ocf, &rsplen);
   24cd2:	f10d 0207 	add.w	r2, sp, #7
   24cd6:	4620      	mov	r0, r4
   24cd8:	f7ff fcac 	bl	24634 <ble_ll_hci_link_ctrl_cmd_proc>
   24cdc:	4606      	mov	r6, r0
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    /* If no response is generated, we free the buffers */
    BLE_LL_ASSERT(rc >= 0);
   24cde:	2e00      	cmp	r6, #0
   24ce0:	db34      	blt.n	24d4c <ble_ll_hci_cmd_proc+0xb8>
    if (rc <= BLE_ERR_MAX) {
   24ce2:	2eff      	cmp	r6, #255	; 0xff
   24ce4:	dc3a      	bgt.n	24d5c <ble_ll_hci_cmd_proc+0xc8>
        /* Create a command complete event with status from command */
        cmdbuf[0] = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   24ce6:	230e      	movs	r3, #14
   24ce8:	7023      	strb	r3, [r4, #0]
        cmdbuf[1] = 4 + rsplen;
   24cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24cee:	3304      	adds	r3, #4
   24cf0:	7063      	strb	r3, [r4, #1]
        cmdbuf[2] = ble_ll_hci_get_num_cmd_pkts();
   24cf2:	f7ff fba0 	bl	24436 <ble_ll_hci_get_num_cmd_pkts>
   24cf6:	70a0      	strb	r0, [r4, #2]
        put_le16(cmdbuf + 3, opcode);
   24cf8:	4629      	mov	r1, r5
   24cfa:	1ce0      	adds	r0, r4, #3
   24cfc:	f7f9 ff11 	bl	1eb22 <put_le16>
        cmdbuf[5] = (uint8_t)rc;
   24d00:	7166      	strb	r6, [r4, #5]
    } else {
        STATS_INC(ble_ll_stats, hci_cmds);
    }

    /* Send the event (events cannot be masked) */
    ble_ll_hci_event_send(cmdbuf);
   24d02:	4620      	mov	r0, r4
   24d04:	f7ff ffb8 	bl	24c78 <ble_ll_hci_event_send>

    /* Call post callback if set by command handler */
    if (post_cb) {
   24d08:	9b00      	ldr	r3, [sp, #0]
   24d0a:	b103      	cbz	r3, 24d0e <ble_ll_hci_cmd_proc+0x7a>
        post_cb();
   24d0c:	4798      	blx	r3
    }

#if MYNEWT_VAL(BLE_LL_DBG_HCI_CMD_PIN) >= 0
    hal_gpio_write(MYNEWT_VAL(BLE_LL_DBG_HCI_CMD_PIN), 0);
#endif
}
   24d0e:	b002      	add	sp, #8
   24d10:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_ll_hci_ctlr_bb_cmd_proc(cmdbuf, ocf, &rsplen);
   24d12:	f10d 0207 	add.w	r2, sp, #7
   24d16:	4620      	mov	r0, r4
   24d18:	f7ff fca8 	bl	2466c <ble_ll_hci_ctlr_bb_cmd_proc>
   24d1c:	4606      	mov	r6, r0
        break;
   24d1e:	e7de      	b.n	24cde <ble_ll_hci_cmd_proc+0x4a>
        rc = ble_ll_hci_info_params_cmd_proc(cmdbuf, ocf, &rsplen);
   24d20:	f10d 0207 	add.w	r2, sp, #7
   24d24:	4620      	mov	r0, r4
   24d26:	f7ff fc5a 	bl	245de <ble_ll_hci_info_params_cmd_proc>
   24d2a:	4606      	mov	r6, r0
        break;
   24d2c:	e7d7      	b.n	24cde <ble_ll_hci_cmd_proc+0x4a>
        rc = ble_ll_hci_status_params_cmd_proc(cmdbuf, ocf, &rsplen);
   24d2e:	f10d 0207 	add.w	r2, sp, #7
   24d32:	4620      	mov	r0, r4
   24d34:	f7ff fcd6 	bl	246e4 <ble_ll_hci_status_params_cmd_proc>
   24d38:	4606      	mov	r6, r0
        break;
   24d3a:	e7d0      	b.n	24cde <ble_ll_hci_cmd_proc+0x4a>
        rc = ble_ll_hci_le_cmd_proc(cmdbuf, ocf, &rsplen, &post_cb);
   24d3c:	466b      	mov	r3, sp
   24d3e:	f10d 0207 	add.w	r2, sp, #7
   24d42:	4620      	mov	r0, r4
   24d44:	f7ff fd92 	bl	2486c <ble_ll_hci_le_cmd_proc>
   24d48:	4606      	mov	r6, r0
        break;
   24d4a:	e7c8      	b.n	24cde <ble_ll_hci_cmd_proc+0x4a>
    BLE_LL_ASSERT(rc >= 0);
   24d4c:	2300      	movs	r3, #0
   24d4e:	461a      	mov	r2, r3
   24d50:	4619      	mov	r1, r3
   24d52:	4618      	mov	r0, r3
   24d54:	f7eb fc42 	bl	105dc <__assert_func>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   24d58:	2601      	movs	r6, #1
   24d5a:	e7c2      	b.n	24ce2 <ble_ll_hci_cmd_proc+0x4e>
        cmdbuf[0] = BLE_HCI_EVCODE_COMMAND_STATUS;
   24d5c:	230f      	movs	r3, #15
   24d5e:	7023      	strb	r3, [r4, #0]
        cmdbuf[1] = 4;
   24d60:	2304      	movs	r3, #4
   24d62:	7063      	strb	r3, [r4, #1]
        cmdbuf[2] = (uint8_t)rc;
   24d64:	70a6      	strb	r6, [r4, #2]
        cmdbuf[3] = ble_ll_hci_get_num_cmd_pkts();
   24d66:	f7ff fb66 	bl	24436 <ble_ll_hci_get_num_cmd_pkts>
   24d6a:	70e0      	strb	r0, [r4, #3]
        put_le16(cmdbuf + 4, opcode);
   24d6c:	4629      	mov	r1, r5
   24d6e:	1d20      	adds	r0, r4, #4
   24d70:	f7f9 fed7 	bl	1eb22 <put_le16>
   24d74:	e7c5      	b.n	24d02 <ble_ll_hci_cmd_proc+0x6e>

00024d76 <ble_ll_hci_send_noop>:
{
   24d76:	b510      	push	{r4, lr}
    evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   24d78:	2002      	movs	r0, #2
   24d7a:	f7f8 fcdd 	bl	1d738 <ble_hci_trans_buf_alloc>
    if (evbuf) {
   24d7e:	b180      	cbz	r0, 24da2 <ble_ll_hci_send_noop+0x2c>
   24d80:	4604      	mov	r4, r0
        evbuf[0] = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   24d82:	230e      	movs	r3, #14
   24d84:	7003      	strb	r3, [r0, #0]
        evbuf[1] = 3;
   24d86:	2303      	movs	r3, #3
   24d88:	7043      	strb	r3, [r0, #1]
        evbuf[2] = ble_ll_hci_get_num_cmd_pkts();
   24d8a:	f7ff fb54 	bl	24436 <ble_ll_hci_get_num_cmd_pkts>
   24d8e:	70a0      	strb	r0, [r4, #2]
        put_le16(evbuf + 3, opcode);
   24d90:	2100      	movs	r1, #0
   24d92:	1ce0      	adds	r0, r4, #3
   24d94:	f7f9 fec5 	bl	1eb22 <put_le16>
        ble_ll_hci_event_send(evbuf);
   24d98:	4620      	mov	r0, r4
   24d9a:	f7ff ff6d 	bl	24c78 <ble_ll_hci_event_send>
        rc = BLE_ERR_SUCCESS;
   24d9e:	2000      	movs	r0, #0
}
   24da0:	bd10      	pop	{r4, pc}
        rc = BLE_ERR_MEM_CAPACITY;
   24da2:	2007      	movs	r0, #7
    return rc;
   24da4:	e7fc      	b.n	24da0 <ble_ll_hci_send_noop+0x2a>
	...

00024da8 <ble_ll_hci_is_le_event_enabled>:
    bitpos = subev - 1;
   24da8:	3801      	subs	r0, #1
    if (g_ble_ll_hci_event_mask[7] & 0x20) {
   24daa:	4b0b      	ldr	r3, [pc, #44]	; (24dd8 <ble_ll_hci_is_le_event_enabled+0x30>)
   24dac:	79db      	ldrb	r3, [r3, #7]
   24dae:	f013 0f20 	tst.w	r3, #32
   24db2:	d00e      	beq.n	24dd2 <ble_ll_hci_is_le_event_enabled+0x2a>
        bytenum = bitpos / 8;
   24db4:	4602      	mov	r2, r0
   24db6:	2800      	cmp	r0, #0
   24db8:	db09      	blt.n	24dce <ble_ll_hci_is_le_event_enabled+0x26>
        bitmask = 1 << (bitpos & 0x7);
   24dba:	f000 0307 	and.w	r3, r0, #7
   24dbe:	2001      	movs	r0, #1
   24dc0:	4098      	lsls	r0, r3
        enabled = g_ble_ll_hci_le_event_mask[bytenum] & bitmask;
   24dc2:	f3c2 02c7 	ubfx	r2, r2, #3, #8
   24dc6:	4b05      	ldr	r3, [pc, #20]	; (24ddc <ble_ll_hci_is_le_event_enabled+0x34>)
   24dc8:	5c9b      	ldrb	r3, [r3, r2]
   24dca:	4018      	ands	r0, r3
   24dcc:	4770      	bx	lr
        bytenum = bitpos / 8;
   24dce:	1dc2      	adds	r2, r0, #7
   24dd0:	e7f3      	b.n	24dba <ble_ll_hci_is_le_event_enabled+0x12>
    enabled = 0;
   24dd2:	2000      	movs	r0, #0
}
   24dd4:	4770      	bx	lr
   24dd6:	bf00      	nop
   24dd8:	2000364c 	.word	0x2000364c
   24ddc:	2000365c 	.word	0x2000365c

00024de0 <ble_ll_hci_is_event_enabled>:
    if (evcode >= 64) {
   24de0:	283f      	cmp	r0, #63	; 0x3f
   24de2:	dc0e      	bgt.n	24e02 <ble_ll_hci_is_event_enabled+0x22>
        bitpos = evcode - 1;
   24de4:	3801      	subs	r0, #1
        evptr = &g_ble_ll_hci_event_mask[0];
   24de6:	4909      	ldr	r1, [pc, #36]	; (24e0c <ble_ll_hci_is_event_enabled+0x2c>)
    bytenum = bitpos / 8;
   24de8:	4603      	mov	r3, r0
   24dea:	2800      	cmp	r0, #0
   24dec:	db0c      	blt.n	24e08 <ble_ll_hci_is_event_enabled+0x28>
    bitmask = 1 << (bitpos & 0x7);
   24dee:	f000 0007 	and.w	r0, r0, #7
   24df2:	2201      	movs	r2, #1
   24df4:	fa02 f000 	lsl.w	r0, r2, r0
    enabled = evptr[bytenum] & bitmask;
   24df8:	f3c3 03c7 	ubfx	r3, r3, #3, #8
   24dfc:	5ccb      	ldrb	r3, [r1, r3]
}
   24dfe:	4018      	ands	r0, r3
   24e00:	4770      	bx	lr
        bitpos = evcode - 64;
   24e02:	3840      	subs	r0, #64	; 0x40
        evptr = &g_ble_ll_hci_event_mask2[0];
   24e04:	4902      	ldr	r1, [pc, #8]	; (24e10 <ble_ll_hci_is_event_enabled+0x30>)
   24e06:	e7ef      	b.n	24de8 <ble_ll_hci_is_event_enabled+0x8>
    bytenum = bitpos / 8;
   24e08:	1dc3      	adds	r3, r0, #7
   24e0a:	e7f0      	b.n	24dee <ble_ll_hci_is_event_enabled+0xe>
   24e0c:	2000364c 	.word	0x2000364c
   24e10:	20003654 	.word	0x20003654

00024e14 <ble_ll_hci_cmd_rx>:
 * @return                      0 on success;
 *                              BLE_ERR_MEM_CAPACITY on HCI buffer exhaustion.
 */
int
ble_ll_hci_cmd_rx(uint8_t *cmd, void *arg)
{
   24e14:	b508      	push	{r3, lr}
    return ev->ev.ev_queued;
   24e16:	4b06      	ldr	r3, [pc, #24]	; (24e30 <ble_ll_hci_cmd_rx+0x1c>)
   24e18:	781b      	ldrb	r3, [r3, #0]
    struct ble_npl_event *ev;

    /* Get an event structure off the queue */
    ev = &g_ble_ll_hci_cmd_ev;
    if (ble_npl_event_is_queued(ev)) {
   24e1a:	b933      	cbnz	r3, 24e2a <ble_ll_hci_cmd_rx+0x16>
    ev->ev.ev_arg = arg;
   24e1c:	4904      	ldr	r1, [pc, #16]	; (24e30 <ble_ll_hci_cmd_rx+0x1c>)
   24e1e:	6088      	str	r0, [r1, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   24e20:	4804      	ldr	r0, [pc, #16]	; (24e34 <ble_ll_hci_cmd_rx+0x20>)
   24e22:	f7eb ff3c 	bl	10c9e <os_eventq_put>

    /* Fill out the event and post to Link Layer */
    ble_npl_event_set_arg(ev, cmd);
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, ev);

    return 0;
   24e26:	2000      	movs	r0, #0
}
   24e28:	bd08      	pop	{r3, pc}
        return BLE_ERR_MEM_CAPACITY;
   24e2a:	2007      	movs	r0, #7
   24e2c:	e7fc      	b.n	24e28 <ble_ll_hci_cmd_rx+0x14>
   24e2e:	bf00      	nop
   24e30:	2000363c 	.word	0x2000363c
   24e34:	20003e4c 	.word	0x20003e4c

00024e38 <ble_ll_hci_acl_rx>:

/* Send ACL data from host to contoller */
int
ble_ll_hci_acl_rx(struct os_mbuf *om, void *arg)
{
   24e38:	b508      	push	{r3, lr}
    ble_ll_acl_data_in(om);
   24e3a:	f7fa fa0b 	bl	1f254 <ble_ll_acl_data_in>
    return 0;
}
   24e3e:	2000      	movs	r0, #0
   24e40:	bd08      	pop	{r3, pc}
	...

00024e44 <ble_ll_hci_init>:
    memset(ev, 0, sizeof(*ev));
   24e44:	4a0c      	ldr	r2, [pc, #48]	; (24e78 <ble_ll_hci_init+0x34>)
   24e46:	2300      	movs	r3, #0
   24e48:	6013      	str	r3, [r2, #0]
   24e4a:	6093      	str	r3, [r2, #8]
   24e4c:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   24e4e:	490b      	ldr	r1, [pc, #44]	; (24e7c <ble_ll_hci_init+0x38>)
   24e50:	6051      	str	r1, [r2, #4]

    /* Set event callback for command processing */
    ble_npl_event_init(&g_ble_ll_hci_cmd_ev, ble_ll_hci_cmd_proc, NULL);

    /* Set defaults for LE events: Vol 2 Part E 7.8.1 */
    g_ble_ll_hci_le_event_mask[0] = 0x1f;
   24e52:	201f      	movs	r0, #31
   24e54:	4a0a      	ldr	r2, [pc, #40]	; (24e80 <ble_ll_hci_init+0x3c>)
   24e56:	7010      	strb	r0, [r2, #0]

    /* Set defaults for controller/baseband events: Vol 2 Part E 7.3.1 */
    g_ble_ll_hci_event_mask[0] = 0xff;
   24e58:	4a0a      	ldr	r2, [pc, #40]	; (24e84 <ble_ll_hci_init+0x40>)
   24e5a:	21ff      	movs	r1, #255	; 0xff
   24e5c:	7011      	strb	r1, [r2, #0]
    g_ble_ll_hci_event_mask[1] = 0xff;
   24e5e:	7051      	strb	r1, [r2, #1]
    g_ble_ll_hci_event_mask[2] = 0xff;
   24e60:	7091      	strb	r1, [r2, #2]
    g_ble_ll_hci_event_mask[3] = 0xff;
   24e62:	70d1      	strb	r1, [r2, #3]
    g_ble_ll_hci_event_mask[4] = 0xff;
   24e64:	7111      	strb	r1, [r2, #4]
    g_ble_ll_hci_event_mask[5] = 0x1f;
   24e66:	7150      	strb	r0, [r2, #5]

    /* Set page 2 to 0 */
    memset(g_ble_ll_hci_event_mask2, 0, BLE_HCI_SET_EVENT_MASK_LEN);
   24e68:	4a07      	ldr	r2, [pc, #28]	; (24e88 <ble_ll_hci_init+0x44>)
   24e6a:	6013      	str	r3, [r2, #0]
   24e6c:	6053      	str	r3, [r2, #4]

    /* reset RF path compensation values */
    rx_path_pwr_compensation = 0;
   24e6e:	4a07      	ldr	r2, [pc, #28]	; (24e8c <ble_ll_hci_init+0x48>)
   24e70:	8013      	strh	r3, [r2, #0]
    tx_path_pwr_compensation = 0;
   24e72:	4a07      	ldr	r2, [pc, #28]	; (24e90 <ble_ll_hci_init+0x4c>)
   24e74:	8013      	strh	r3, [r2, #0]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    /* after reset both legacy and extended advertising commands are allowed */
    hci_adv_mode = ADV_MODE_ANY;
#endif
}
   24e76:	4770      	bx	lr
   24e78:	2000363c 	.word	0x2000363c
   24e7c:	00024c95 	.word	0x00024c95
   24e80:	2000365c 	.word	0x2000365c
   24e84:	2000364c 	.word	0x2000364c
   24e88:	20003654 	.word	0x20003654
   24e8c:	20003664 	.word	0x20003664
   24e90:	20003666 	.word	0x20003666

00024e94 <ble_ll_hci_ev_datalen_chg>:
 *
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_datalen_chg(struct ble_ll_conn_sm *connsm)
{
   24e94:	b538      	push	{r3, r4, r5, lr}
   24e96:	4605      	mov	r5, r0
    uint8_t *evbuf;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_DATA_LEN_CHG)) {
   24e98:	2007      	movs	r0, #7
   24e9a:	f7ff ff85 	bl	24da8 <ble_ll_hci_is_le_event_enabled>
   24e9e:	b900      	cbnz	r0, 24ea2 <ble_ll_hci_ev_datalen_chg+0xe>
            put_le16(evbuf + 9, connsm->eff_max_rx_octets);
            put_le16(evbuf + 11, connsm->eff_max_rx_time);
            ble_ll_hci_event_send(evbuf);
        }
    }
}
   24ea0:	bd38      	pop	{r3, r4, r5, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   24ea2:	2002      	movs	r0, #2
   24ea4:	f7f8 fc48 	bl	1d738 <ble_hci_trans_buf_alloc>
        if (evbuf) {
   24ea8:	4604      	mov	r4, r0
   24eaa:	2800      	cmp	r0, #0
   24eac:	d0f8      	beq.n	24ea0 <ble_ll_hci_ev_datalen_chg+0xc>
            evbuf[0] = BLE_HCI_EVCODE_LE_META;
   24eae:	233e      	movs	r3, #62	; 0x3e
   24eb0:	7003      	strb	r3, [r0, #0]
            evbuf[1] = BLE_HCI_LE_DATA_LEN_CHG_LEN;
   24eb2:	230b      	movs	r3, #11
   24eb4:	7043      	strb	r3, [r0, #1]
            evbuf[2] = BLE_HCI_LE_SUBEV_DATA_LEN_CHG;
   24eb6:	2307      	movs	r3, #7
   24eb8:	7083      	strb	r3, [r0, #2]
            put_le16(evbuf + 3, connsm->conn_handle);
   24eba:	88a9      	ldrh	r1, [r5, #4]
   24ebc:	3003      	adds	r0, #3
   24ebe:	f7f9 fe30 	bl	1eb22 <put_le16>
            put_le16(evbuf + 5, connsm->eff_max_tx_octets);
   24ec2:	7ba9      	ldrb	r1, [r5, #14]
   24ec4:	1d60      	adds	r0, r4, #5
   24ec6:	f7f9 fe2c 	bl	1eb22 <put_le16>
            put_le16(evbuf + 7, connsm->eff_max_tx_time);
   24eca:	8b29      	ldrh	r1, [r5, #24]
   24ecc:	1de0      	adds	r0, r4, #7
   24ece:	f7f9 fe28 	bl	1eb22 <put_le16>
            put_le16(evbuf + 9, connsm->eff_max_rx_octets);
   24ed2:	7be9      	ldrb	r1, [r5, #15]
   24ed4:	f104 0009 	add.w	r0, r4, #9
   24ed8:	f7f9 fe23 	bl	1eb22 <put_le16>
            put_le16(evbuf + 11, connsm->eff_max_rx_time);
   24edc:	8b69      	ldrh	r1, [r5, #26]
   24ede:	f104 000b 	add.w	r0, r4, #11
   24ee2:	f7f9 fe1e 	bl	1eb22 <put_le16>
            ble_ll_hci_event_send(evbuf);
   24ee6:	4620      	mov	r0, r4
   24ee8:	f7ff fec6 	bl	24c78 <ble_ll_hci_event_send>
}
   24eec:	e7d8      	b.n	24ea0 <ble_ll_hci_ev_datalen_chg+0xc>

00024eee <ble_ll_hci_ev_rem_conn_parm_req>:
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_rem_conn_parm_req(struct ble_ll_conn_sm *connsm,
                                struct ble_ll_conn_params *cp)
{
   24eee:	b570      	push	{r4, r5, r6, lr}
   24ef0:	4606      	mov	r6, r0
   24ef2:	460d      	mov	r5, r1
    uint8_t *evbuf;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)) {
   24ef4:	2006      	movs	r0, #6
   24ef6:	f7ff ff57 	bl	24da8 <ble_ll_hci_is_le_event_enabled>
   24efa:	b900      	cbnz	r0, 24efe <ble_ll_hci_ev_rem_conn_parm_req+0x10>
            put_le16(evbuf + 9, cp->latency);
            put_le16(evbuf + 11, cp->timeout);
            ble_ll_hci_event_send(evbuf);
        }
    }
}
   24efc:	bd70      	pop	{r4, r5, r6, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   24efe:	2002      	movs	r0, #2
   24f00:	f7f8 fc1a 	bl	1d738 <ble_hci_trans_buf_alloc>
        if (evbuf) {
   24f04:	4604      	mov	r4, r0
   24f06:	2800      	cmp	r0, #0
   24f08:	d0f8      	beq.n	24efc <ble_ll_hci_ev_rem_conn_parm_req+0xe>
            evbuf[0] = BLE_HCI_EVCODE_LE_META;
   24f0a:	233e      	movs	r3, #62	; 0x3e
   24f0c:	7003      	strb	r3, [r0, #0]
            evbuf[1] = BLE_HCI_LE_REM_CONN_PARM_REQ_LEN;
   24f0e:	230b      	movs	r3, #11
   24f10:	7043      	strb	r3, [r0, #1]
            evbuf[2] = BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ;
   24f12:	2306      	movs	r3, #6
   24f14:	7083      	strb	r3, [r0, #2]
            put_le16(evbuf + 3, connsm->conn_handle);
   24f16:	88b1      	ldrh	r1, [r6, #4]
   24f18:	3003      	adds	r0, #3
   24f1a:	f7f9 fe02 	bl	1eb22 <put_le16>
            put_le16(evbuf + 5, cp->interval_min);
   24f1e:	8829      	ldrh	r1, [r5, #0]
   24f20:	1d60      	adds	r0, r4, #5
   24f22:	f7f9 fdfe 	bl	1eb22 <put_le16>
            put_le16(evbuf + 7, cp->interval_max);
   24f26:	8869      	ldrh	r1, [r5, #2]
   24f28:	1de0      	adds	r0, r4, #7
   24f2a:	f7f9 fdfa 	bl	1eb22 <put_le16>
            put_le16(evbuf + 9, cp->latency);
   24f2e:	88a9      	ldrh	r1, [r5, #4]
   24f30:	f104 0009 	add.w	r0, r4, #9
   24f34:	f7f9 fdf5 	bl	1eb22 <put_le16>
            put_le16(evbuf + 11, cp->timeout);
   24f38:	88e9      	ldrh	r1, [r5, #6]
   24f3a:	f104 000b 	add.w	r0, r4, #11
   24f3e:	f7f9 fdf0 	bl	1eb22 <put_le16>
            ble_ll_hci_event_send(evbuf);
   24f42:	4620      	mov	r0, r4
   24f44:	f7ff fe98 	bl	24c78 <ble_ll_hci_event_send>
}
   24f48:	e7d8      	b.n	24efc <ble_ll_hci_ev_rem_conn_parm_req+0xe>

00024f4a <ble_ll_hci_ev_conn_update>:
 * @param connsm Pointer to connection state machine
 * @param status The error code.
 */
void
ble_ll_hci_ev_conn_update(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   24f4a:	b570      	push	{r4, r5, r6, lr}
   24f4c:	4605      	mov	r5, r0
   24f4e:	460e      	mov	r6, r1
    uint8_t *evbuf;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE)) {
   24f50:	2003      	movs	r0, #3
   24f52:	f7ff ff29 	bl	24da8 <ble_ll_hci_is_le_event_enabled>
   24f56:	b900      	cbnz	r0, 24f5a <ble_ll_hci_ev_conn_update+0x10>
            put_le16(evbuf + 8, connsm->slave_latency);
            put_le16(evbuf + 10, connsm->supervision_tmo);
            ble_ll_hci_event_send(evbuf);
        }
    }
}
   24f58:	bd70      	pop	{r4, r5, r6, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   24f5a:	2002      	movs	r0, #2
   24f5c:	f7f8 fbec 	bl	1d738 <ble_hci_trans_buf_alloc>
        if (evbuf) {
   24f60:	4604      	mov	r4, r0
   24f62:	2800      	cmp	r0, #0
   24f64:	d0f8      	beq.n	24f58 <ble_ll_hci_ev_conn_update+0xe>
            evbuf[0] = BLE_HCI_EVCODE_LE_META;
   24f66:	233e      	movs	r3, #62	; 0x3e
   24f68:	7003      	strb	r3, [r0, #0]
            evbuf[1] = BLE_HCI_LE_CONN_UPD_LEN;
   24f6a:	230a      	movs	r3, #10
   24f6c:	7043      	strb	r3, [r0, #1]
            evbuf[2] = BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE;
   24f6e:	2303      	movs	r3, #3
   24f70:	7083      	strb	r3, [r0, #2]
            evbuf[3] = status;
   24f72:	70c6      	strb	r6, [r0, #3]
            put_le16(evbuf + 4, connsm->conn_handle);
   24f74:	88a9      	ldrh	r1, [r5, #4]
   24f76:	3004      	adds	r0, #4
   24f78:	f7f9 fdd3 	bl	1eb22 <put_le16>
            put_le16(evbuf + 6, connsm->conn_itvl);
   24f7c:	f8b5 1068 	ldrh.w	r1, [r5, #104]	; 0x68
   24f80:	1da0      	adds	r0, r4, #6
   24f82:	f7f9 fdce 	bl	1eb22 <put_le16>
            put_le16(evbuf + 8, connsm->slave_latency);
   24f86:	f8b5 106a 	ldrh.w	r1, [r5, #106]	; 0x6a
   24f8a:	f104 0008 	add.w	r0, r4, #8
   24f8e:	f7f9 fdc8 	bl	1eb22 <put_le16>
            put_le16(evbuf + 10, connsm->supervision_tmo);
   24f92:	f8b5 106c 	ldrh.w	r1, [r5, #108]	; 0x6c
   24f96:	f104 000a 	add.w	r0, r4, #10
   24f9a:	f7f9 fdc2 	bl	1eb22 <put_le16>
            ble_ll_hci_event_send(evbuf);
   24f9e:	4620      	mov	r0, r4
   24fa0:	f7ff fe6a 	bl	24c78 <ble_ll_hci_event_send>
}
   24fa4:	e7d8      	b.n	24f58 <ble_ll_hci_ev_conn_update+0xe>

00024fa6 <ble_ll_hci_ev_encrypt_chg>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
void
ble_ll_hci_ev_encrypt_chg(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   24fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24faa:	4604      	mov	r4, r0
   24fac:	460f      	mov	r7, r1
    uint8_t evcode;
    uint8_t *evbuf;
    uint8_t evlen;

    if (CONN_F_ENC_CHANGE_SENT(connsm) == 0) {
   24fae:	7883      	ldrb	r3, [r0, #2]
   24fb0:	f013 0f04 	tst.w	r3, #4
   24fb4:	d10c      	bne.n	24fd0 <ble_ll_hci_ev_encrypt_chg+0x2a>
        evcode = BLE_HCI_EVCODE_ENCRYPT_CHG;
        evlen = BLE_HCI_EVENT_ENCRYPT_CHG_LEN;
   24fb6:	f04f 0804 	mov.w	r8, #4
        evcode = BLE_HCI_EVCODE_ENCRYPT_CHG;
   24fba:	2508      	movs	r5, #8
    } else {
        evcode = BLE_HCI_EVCODE_ENC_KEY_REFRESH;
        evlen = BLE_HCI_EVENT_ENC_KEY_REFRESH_LEN;
    }

    if (ble_ll_hci_is_event_enabled(evcode)) {
   24fbc:	4628      	mov	r0, r5
   24fbe:	f7ff ff0f 	bl	24de0 <ble_ll_hci_is_event_enabled>
   24fc2:	b948      	cbnz	r0, 24fd8 <ble_ll_hci_ev_encrypt_chg+0x32>
                }
            }
            ble_ll_hci_event_send(evbuf);
        }
    }
    CONN_F_ENC_CHANGE_SENT(connsm) = 1;
   24fc4:	78a3      	ldrb	r3, [r4, #2]
   24fc6:	f043 0304 	orr.w	r3, r3, #4
   24fca:	70a3      	strb	r3, [r4, #2]
}
   24fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        evlen = BLE_HCI_EVENT_ENC_KEY_REFRESH_LEN;
   24fd0:	f04f 0803 	mov.w	r8, #3
        evcode = BLE_HCI_EVCODE_ENC_KEY_REFRESH;
   24fd4:	2530      	movs	r5, #48	; 0x30
   24fd6:	e7f1      	b.n	24fbc <ble_ll_hci_ev_encrypt_chg+0x16>
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   24fd8:	2002      	movs	r0, #2
   24fda:	f7f8 fbad 	bl	1d738 <ble_hci_trans_buf_alloc>
        if (evbuf) {
   24fde:	4606      	mov	r6, r0
   24fe0:	2800      	cmp	r0, #0
   24fe2:	d0ef      	beq.n	24fc4 <ble_ll_hci_ev_encrypt_chg+0x1e>
            evbuf[0] = evcode;
   24fe4:	7005      	strb	r5, [r0, #0]
            evbuf[1] = evlen;
   24fe6:	f880 8001 	strb.w	r8, [r0, #1]
            evbuf[2] = status;
   24fea:	7087      	strb	r7, [r0, #2]
            put_le16(evbuf + 3, connsm->conn_handle);
   24fec:	88a1      	ldrh	r1, [r4, #4]
   24fee:	3003      	adds	r0, #3
   24ff0:	f7f9 fd97 	bl	1eb22 <put_le16>
            if (evcode == BLE_HCI_EVCODE_ENCRYPT_CHG) {
   24ff4:	2d08      	cmp	r5, #8
   24ff6:	d003      	beq.n	25000 <ble_ll_hci_ev_encrypt_chg+0x5a>
            ble_ll_hci_event_send(evbuf);
   24ff8:	4630      	mov	r0, r6
   24ffa:	f7ff fe3d 	bl	24c78 <ble_ll_hci_event_send>
   24ffe:	e7e1      	b.n	24fc4 <ble_ll_hci_ev_encrypt_chg+0x1e>
                if (status == BLE_ERR_SUCCESS) {
   25000:	b917      	cbnz	r7, 25008 <ble_ll_hci_ev_encrypt_chg+0x62>
                    evbuf[5] = 0x01;
   25002:	2301      	movs	r3, #1
   25004:	7173      	strb	r3, [r6, #5]
   25006:	e7f7      	b.n	24ff8 <ble_ll_hci_ev_encrypt_chg+0x52>
                    evbuf[5] = 0;
   25008:	2300      	movs	r3, #0
   2500a:	7173      	strb	r3, [r6, #5]
   2500c:	e7f4      	b.n	24ff8 <ble_ll_hci_ev_encrypt_chg+0x52>

0002500e <ble_ll_hci_ev_ltk_req>:
 *
 * @param connsm Pointer to connection state machine
 */
int
ble_ll_hci_ev_ltk_req(struct ble_ll_conn_sm *connsm)
{
   2500e:	b538      	push	{r3, r4, r5, lr}
   25010:	4605      	mov	r5, r0
    int rc;
    uint8_t *evbuf;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_LT_KEY_REQ)) {
   25012:	2005      	movs	r0, #5
   25014:	f7ff fec8 	bl	24da8 <ble_ll_hci_is_le_event_enabled>
   25018:	b300      	cbz	r0, 2505c <ble_ll_hci_ev_ltk_req+0x4e>
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   2501a:	2002      	movs	r0, #2
   2501c:	f7f8 fb8c 	bl	1d738 <ble_hci_trans_buf_alloc>
        if (evbuf) {
   25020:	4604      	mov	r4, r0
   25022:	b1f0      	cbz	r0, 25062 <ble_ll_hci_ev_ltk_req+0x54>
            evbuf[0] = BLE_HCI_EVCODE_LE_META;
   25024:	233e      	movs	r3, #62	; 0x3e
   25026:	7003      	strb	r3, [r0, #0]
            evbuf[1] = BLE_HCI_LE_LT_KEY_REQ_LEN;
   25028:	230d      	movs	r3, #13
   2502a:	7043      	strb	r3, [r0, #1]
            evbuf[2] = BLE_HCI_LE_SUBEV_LT_KEY_REQ;
   2502c:	2305      	movs	r3, #5
   2502e:	7083      	strb	r3, [r0, #2]
            put_le16(evbuf + 3, connsm->conn_handle);
   25030:	88a9      	ldrh	r1, [r5, #4]
   25032:	3003      	adds	r0, #3
   25034:	f7f9 fd75 	bl	1eb22 <put_le16>
            put_le64(evbuf + 5, connsm->enc_data.host_rand_num);
   25038:	f505 7390 	add.w	r3, r5, #288	; 0x120
   2503c:	e9d3 2300 	ldrd	r2, r3, [r3]
   25040:	1d60      	adds	r0, r4, #5
   25042:	f7f9 fd7c 	bl	1eb3e <put_le64>
            put_le16(evbuf + 13, connsm->enc_data.enc_div);
   25046:	f8b5 111a 	ldrh.w	r1, [r5, #282]	; 0x11a
   2504a:	f104 000d 	add.w	r0, r4, #13
   2504e:	f7f9 fd68 	bl	1eb22 <put_le16>
            ble_ll_hci_event_send(evbuf);
   25052:	4620      	mov	r0, r4
   25054:	f7ff fe10 	bl	24c78 <ble_ll_hci_event_send>
        }
        rc = 0;
   25058:	2000      	movs	r0, #0
    if (rc == 0) {
        bletest_ltk_req_reply(connsm->conn_handle);
    }
#endif
    return rc;
}
   2505a:	bd38      	pop	{r3, r4, r5, pc}
        rc = -1;
   2505c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25060:	e7fb      	b.n	2505a <ble_ll_hci_ev_ltk_req+0x4c>
        rc = 0;
   25062:	2000      	movs	r0, #0
    return rc;
   25064:	e7f9      	b.n	2505a <ble_ll_hci_ev_ltk_req+0x4c>

00025066 <ble_ll_hci_ev_rd_rem_used_feat>:
#endif

void
ble_ll_hci_ev_rd_rem_used_feat(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   25066:	b570      	push	{r4, r5, r6, lr}
   25068:	4604      	mov	r4, r0
   2506a:	460e      	mov	r6, r1
    uint8_t *evbuf;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT)) {
   2506c:	2004      	movs	r0, #4
   2506e:	f7ff fe9b 	bl	24da8 <ble_ll_hci_is_le_event_enabled>
   25072:	b900      	cbnz	r0, 25076 <ble_ll_hci_ev_rd_rem_used_feat+0x10>
            evbuf[6] = connsm->conn_features;
            memcpy(evbuf + 7, connsm->remote_features, 7);
            ble_ll_hci_event_send(evbuf);
        }
    }
}
   25074:	bd70      	pop	{r4, r5, r6, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   25076:	2002      	movs	r0, #2
   25078:	f7f8 fb5e 	bl	1d738 <ble_hci_trans_buf_alloc>
        if (evbuf) {
   2507c:	4605      	mov	r5, r0
   2507e:	2800      	cmp	r0, #0
   25080:	d0f8      	beq.n	25074 <ble_ll_hci_ev_rd_rem_used_feat+0xe>
            evbuf[0] = BLE_HCI_EVCODE_LE_META;
   25082:	233e      	movs	r3, #62	; 0x3e
   25084:	7003      	strb	r3, [r0, #0]
            evbuf[1] = BLE_HCI_LE_RD_REM_USED_FEAT_LEN;
   25086:	230c      	movs	r3, #12
   25088:	7043      	strb	r3, [r0, #1]
            evbuf[2] = BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT;
   2508a:	2304      	movs	r3, #4
   2508c:	7083      	strb	r3, [r0, #2]
            evbuf[3] = status;
   2508e:	70c6      	strb	r6, [r0, #3]
            put_le16(evbuf + 4, connsm->conn_handle);
   25090:	88a1      	ldrh	r1, [r4, #4]
   25092:	4418      	add	r0, r3
   25094:	f7f9 fd45 	bl	1eb22 <put_le16>
            memset(evbuf + 6, 0, BLE_HCI_RD_LOC_SUPP_FEAT_RSPLEN);
   25098:	2300      	movs	r3, #0
   2509a:	f8c5 3006 	str.w	r3, [r5, #6]
   2509e:	f8c5 300a 	str.w	r3, [r5, #10]
            evbuf[6] = connsm->conn_features;
   250a2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   250a6:	71ab      	strb	r3, [r5, #6]
            memcpy(evbuf + 7, connsm->remote_features, 7);
   250a8:	f854 2f40 	ldr.w	r2, [r4, #64]!
   250ac:	f8c5 2007 	str.w	r2, [r5, #7]
   250b0:	88a1      	ldrh	r1, [r4, #4]
   250b2:	79a2      	ldrb	r2, [r4, #6]
   250b4:	f8a5 100b 	strh.w	r1, [r5, #11]
   250b8:	736a      	strb	r2, [r5, #13]
            ble_ll_hci_event_send(evbuf);
   250ba:	4628      	mov	r0, r5
   250bc:	f7ff fddc 	bl	24c78 <ble_ll_hci_event_send>
}
   250c0:	e7d8      	b.n	25074 <ble_ll_hci_ev_rd_rem_used_feat+0xe>

000250c2 <ble_ll_hci_ev_rd_rem_ver>:

void
ble_ll_hci_ev_rd_rem_ver(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   250c2:	b570      	push	{r4, r5, r6, lr}
   250c4:	4605      	mov	r5, r0
   250c6:	460e      	mov	r6, r1
    uint8_t *evbuf;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP)) {
   250c8:	200c      	movs	r0, #12
   250ca:	f7ff fe89 	bl	24de0 <ble_ll_hci_is_event_enabled>
   250ce:	b900      	cbnz	r0, 250d2 <ble_ll_hci_ev_rd_rem_ver+0x10>
            put_le16(evbuf + 6, connsm->comp_id);
            put_le16(evbuf + 8, connsm->sub_vers_nr);
            ble_ll_hci_event_send(evbuf);
        }
    }
}
   250d0:	bd70      	pop	{r4, r5, r6, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   250d2:	2002      	movs	r0, #2
   250d4:	f7f8 fb30 	bl	1d738 <ble_hci_trans_buf_alloc>
        if (evbuf) {
   250d8:	4604      	mov	r4, r0
   250da:	2800      	cmp	r0, #0
   250dc:	d0f8      	beq.n	250d0 <ble_ll_hci_ev_rd_rem_ver+0xe>
            evbuf[0] = BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP;
   250de:	230c      	movs	r3, #12
   250e0:	7003      	strb	r3, [r0, #0]
            evbuf[1] = BLE_HCI_EVENT_RD_RM_VER_LEN;
   250e2:	2308      	movs	r3, #8
   250e4:	7043      	strb	r3, [r0, #1]
            evbuf[2] = status;
   250e6:	7086      	strb	r6, [r0, #2]
            put_le16(evbuf + 3, connsm->conn_handle);
   250e8:	88a9      	ldrh	r1, [r5, #4]
   250ea:	3003      	adds	r0, #3
   250ec:	f7f9 fd19 	bl	1eb22 <put_le16>
            evbuf[5] = connsm->vers_nr;
   250f0:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
   250f4:	7163      	strb	r3, [r4, #5]
            put_le16(evbuf + 6, connsm->comp_id);
   250f6:	f8b5 104e 	ldrh.w	r1, [r5, #78]	; 0x4e
   250fa:	1da0      	adds	r0, r4, #6
   250fc:	f7f9 fd11 	bl	1eb22 <put_le16>
            put_le16(evbuf + 8, connsm->sub_vers_nr);
   25100:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
   25104:	f104 0008 	add.w	r0, r4, #8
   25108:	f7f9 fd0b 	bl	1eb22 <put_le16>
            ble_ll_hci_event_send(evbuf);
   2510c:	4620      	mov	r0, r4
   2510e:	f7ff fdb3 	bl	24c78 <ble_ll_hci_event_send>
}
   25112:	e7dd      	b.n	250d0 <ble_ll_hci_ev_rd_rem_ver+0xe>

00025114 <ble_ll_hci_ev_hw_err>:
 *
 * @return int 0: event masked or event sent, -1 otherwise
 */
int
ble_ll_hci_ev_hw_err(uint8_t hw_err)
{
   25114:	b510      	push	{r4, lr}
   25116:	4604      	mov	r4, r0
    int rc;
    uint8_t *evbuf;

    rc = 0;
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_HW_ERROR)) {
   25118:	2010      	movs	r0, #16
   2511a:	f7ff fe61 	bl	24de0 <ble_ll_hci_is_event_enabled>
   2511e:	b908      	cbnz	r0, 25124 <ble_ll_hci_ev_hw_err+0x10>
    rc = 0;
   25120:	2000      	movs	r0, #0
        } else {
            rc = -1;
        }
    }
    return rc;
}
   25122:	bd10      	pop	{r4, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   25124:	2002      	movs	r0, #2
   25126:	f7f8 fb07 	bl	1d738 <ble_hci_trans_buf_alloc>
        if (evbuf) {
   2512a:	b140      	cbz	r0, 2513e <ble_ll_hci_ev_hw_err+0x2a>
            evbuf[0] = BLE_HCI_EVCODE_HW_ERROR;
   2512c:	2210      	movs	r2, #16
   2512e:	7002      	strb	r2, [r0, #0]
            evbuf[1] = BLE_HCI_EVENT_HW_ERROR_LEN;
   25130:	2201      	movs	r2, #1
   25132:	7042      	strb	r2, [r0, #1]
            evbuf[2] = hw_err;
   25134:	7084      	strb	r4, [r0, #2]
            ble_ll_hci_event_send(evbuf);
   25136:	f7ff fd9f 	bl	24c78 <ble_ll_hci_event_send>
    rc = 0;
   2513a:	2000      	movs	r0, #0
   2513c:	e7f1      	b.n	25122 <ble_ll_hci_ev_hw_err+0xe>
            rc = -1;
   2513e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   25142:	e7ee      	b.n	25122 <ble_ll_hci_ev_hw_err+0xe>

00025144 <ble_ll_hci_ev_databuf_overflow>:

void
ble_ll_hci_ev_databuf_overflow(void)
{
   25144:	b508      	push	{r3, lr}
    uint8_t *evbuf;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DATA_BUF_OVERFLOW)) {
   25146:	201a      	movs	r0, #26
   25148:	f7ff fe4a 	bl	24de0 <ble_ll_hci_is_event_enabled>
   2514c:	b900      	cbnz	r0, 25150 <ble_ll_hci_ev_databuf_overflow+0xc>
            evbuf[1] = BLE_HCI_EVENT_DATABUF_OVERFLOW_LEN;
            evbuf[2] = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;
            ble_ll_hci_event_send(evbuf);
        }
    }
}
   2514e:	bd08      	pop	{r3, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   25150:	2002      	movs	r0, #2
   25152:	f7f8 faf1 	bl	1d738 <ble_hci_trans_buf_alloc>
        if (evbuf) {
   25156:	2800      	cmp	r0, #0
   25158:	d0f9      	beq.n	2514e <ble_ll_hci_ev_databuf_overflow+0xa>
            evbuf[0] = BLE_HCI_EVCODE_DATA_BUF_OVERFLOW;
   2515a:	221a      	movs	r2, #26
   2515c:	7002      	strb	r2, [r0, #0]
            evbuf[1] = BLE_HCI_EVENT_DATABUF_OVERFLOW_LEN;
   2515e:	2201      	movs	r2, #1
   25160:	7042      	strb	r2, [r0, #1]
            evbuf[2] = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;
   25162:	7082      	strb	r2, [r0, #2]
            ble_ll_hci_event_send(evbuf);
   25164:	f7ff fd88 	bl	24c78 <ble_ll_hci_event_send>
}
   25168:	e7f1      	b.n	2514e <ble_ll_hci_ev_databuf_overflow+0xa>
	...

0002516c <ble_ll_rand_sample>:
#define IS_RNUM_BUF_END(x)  \
    (x == &g_ble_ll_rnum_buf[MYNEWT_VAL(BLE_LL_RNG_BUFSIZE) - 1])

void
ble_ll_rand_sample(uint8_t rnum)
{
   2516c:	b538      	push	{r3, r4, r5, lr}
   2516e:	4605      	mov	r5, r0
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   25170:	f7eb f96a 	bl	10448 <os_arch_save_sr>
   25174:	4604      	mov	r4, r0
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   25176:	4b0f      	ldr	r3, [pc, #60]	; (251b4 <ble_ll_rand_sample+0x48>)
   25178:	7a1b      	ldrb	r3, [r3, #8]
   2517a:	b2db      	uxtb	r3, r3
   2517c:	2b1f      	cmp	r3, #31
   2517e:	d815      	bhi.n	251ac <ble_ll_rand_sample+0x40>
        ++g_ble_ll_rnum_data.rnd_size;
   25180:	4a0c      	ldr	r2, [pc, #48]	; (251b4 <ble_ll_rand_sample+0x48>)
   25182:	7a13      	ldrb	r3, [r2, #8]
   25184:	3301      	adds	r3, #1
   25186:	b2db      	uxtb	r3, r3
   25188:	7213      	strb	r3, [r2, #8]
        g_ble_ll_rnum_data.rnd_in[0] = rnum;
   2518a:	6813      	ldr	r3, [r2, #0]
   2518c:	701d      	strb	r5, [r3, #0]
        if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_in)) {
   2518e:	6813      	ldr	r3, [r2, #0]
   25190:	4a09      	ldr	r2, [pc, #36]	; (251b8 <ble_ll_rand_sample+0x4c>)
   25192:	4293      	cmp	r3, r2
   25194:	d006      	beq.n	251a4 <ble_ll_rand_sample+0x38>
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
        } else {
            ++g_ble_ll_rnum_data.rnd_in;
   25196:	3301      	adds	r3, #1
   25198:	4a06      	ldr	r2, [pc, #24]	; (251b4 <ble_ll_rand_sample+0x48>)
   2519a:	6013      	str	r3, [r2, #0]
        }
    } else {
        /* Stop generating random numbers as we are full */
        ble_hw_rng_stop();
    }
    OS_EXIT_CRITICAL(sr);
   2519c:	4620      	mov	r0, r4
   2519e:	f7eb f959 	bl	10454 <os_arch_restore_sr>
}
   251a2:	bd38      	pop	{r3, r4, r5, pc}
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   251a4:	4b03      	ldr	r3, [pc, #12]	; (251b4 <ble_ll_rand_sample+0x48>)
   251a6:	3a1f      	subs	r2, #31
   251a8:	601a      	str	r2, [r3, #0]
   251aa:	e7f7      	b.n	2519c <ble_ll_rand_sample+0x30>
        ble_hw_rng_stop();
   251ac:	f002 fce0 	bl	27b70 <ble_hw_rng_stop>
   251b0:	e7f4      	b.n	2519c <ble_ll_rand_sample+0x30>
   251b2:	bf00      	nop
   251b4:	20004134 	.word	0x20004134
   251b8:	2000415f 	.word	0x2000415f

000251bc <ble_ll_rand_data_get>:
#endif

/* Get 'len' bytes of random data */
int
ble_ll_rand_data_get(uint8_t *buf, uint8_t len)
{
   251bc:	b538      	push	{r3, r4, r5, lr}
   251be:	4604      	mov	r4, r0
   251c0:	460d      	mov	r5, r1
    }
#else
    uint8_t rnums;
    os_sr_t sr;

    while (len != 0) {
   251c2:	e017      	b.n	251f4 <ble_ll_rand_data_get+0x38>
        len -= rnums;
        g_ble_ll_rnum_data.rnd_size -= rnums;
        while (rnums) {
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
                g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   251c4:	4a1a      	ldr	r2, [pc, #104]	; (25230 <ble_ll_rand_data_get+0x74>)
   251c6:	391f      	subs	r1, #31
   251c8:	6051      	str	r1, [r2, #4]
            } else {
                ++g_ble_ll_rnum_data.rnd_out;
            }
            ++buf;
   251ca:	3401      	adds	r4, #1
            --rnums;
   251cc:	3b01      	subs	r3, #1
   251ce:	b2db      	uxtb	r3, r3
        while (rnums) {
   251d0:	b15b      	cbz	r3, 251ea <ble_ll_rand_data_get+0x2e>
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
   251d2:	4a17      	ldr	r2, [pc, #92]	; (25230 <ble_ll_rand_data_get+0x74>)
   251d4:	6851      	ldr	r1, [r2, #4]
   251d6:	7809      	ldrb	r1, [r1, #0]
   251d8:	7021      	strb	r1, [r4, #0]
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
   251da:	6852      	ldr	r2, [r2, #4]
   251dc:	4915      	ldr	r1, [pc, #84]	; (25234 <ble_ll_rand_data_get+0x78>)
   251de:	428a      	cmp	r2, r1
   251e0:	d0f0      	beq.n	251c4 <ble_ll_rand_data_get+0x8>
                ++g_ble_ll_rnum_data.rnd_out;
   251e2:	3201      	adds	r2, #1
   251e4:	4912      	ldr	r1, [pc, #72]	; (25230 <ble_ll_rand_data_get+0x74>)
   251e6:	604a      	str	r2, [r1, #4]
   251e8:	e7ef      	b.n	251ca <ble_ll_rand_data_get+0xe>
        }
        OS_EXIT_CRITICAL(sr);
   251ea:	f7eb f933 	bl	10454 <os_arch_restore_sr>

        /* Make sure rng is started! */
        ble_hw_rng_start();
   251ee:	f002 fca5 	bl	27b3c <ble_hw_rng_start>

        /* Wait till bytes are in buffer. */
        if (len) {
   251f2:	b985      	cbnz	r5, 25216 <ble_ll_rand_data_get+0x5a>
    while (len != 0) {
   251f4:	b1d5      	cbz	r5, 2522c <ble_ll_rand_data_get+0x70>
        OS_ENTER_CRITICAL(sr);
   251f6:	f7eb f927 	bl	10448 <os_arch_save_sr>
        rnums = g_ble_ll_rnum_data.rnd_size;
   251fa:	4b0d      	ldr	r3, [pc, #52]	; (25230 <ble_ll_rand_data_get+0x74>)
   251fc:	7a1b      	ldrb	r3, [r3, #8]
   251fe:	b2db      	uxtb	r3, r3
        if (rnums > len) {
   25200:	429d      	cmp	r5, r3
   25202:	d200      	bcs.n	25206 <ble_ll_rand_data_get+0x4a>
            rnums = len;
   25204:	462b      	mov	r3, r5
        len -= rnums;
   25206:	1aed      	subs	r5, r5, r3
   25208:	b2ed      	uxtb	r5, r5
        g_ble_ll_rnum_data.rnd_size -= rnums;
   2520a:	4909      	ldr	r1, [pc, #36]	; (25230 <ble_ll_rand_data_get+0x74>)
   2520c:	7a0a      	ldrb	r2, [r1, #8]
   2520e:	1ad2      	subs	r2, r2, r3
   25210:	b2d2      	uxtb	r2, r2
   25212:	720a      	strb	r2, [r1, #8]
        while (rnums) {
   25214:	e7dc      	b.n	251d0 <ble_ll_rand_data_get+0x14>
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   25216:	4b06      	ldr	r3, [pc, #24]	; (25230 <ble_ll_rand_data_get+0x74>)
   25218:	7a1b      	ldrb	r3, [r3, #8]
   2521a:	b2db      	uxtb	r3, r3
   2521c:	42ab      	cmp	r3, r5
   2521e:	d2e9      	bcs.n	251f4 <ble_ll_rand_data_get+0x38>
                   (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE))) {
   25220:	4b03      	ldr	r3, [pc, #12]	; (25230 <ble_ll_rand_data_get+0x74>)
   25222:	7a1b      	ldrb	r3, [r3, #8]
   25224:	b2db      	uxtb	r3, r3
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   25226:	2b1f      	cmp	r3, #31
   25228:	d9f5      	bls.n	25216 <ble_ll_rand_data_get+0x5a>
   2522a:	e7e3      	b.n	251f4 <ble_ll_rand_data_get+0x38>
            }
        }
    }
#endif
    return BLE_ERR_SUCCESS;
}
   2522c:	2000      	movs	r0, #0
   2522e:	bd38      	pop	{r3, r4, r5, pc}
   25230:	20004134 	.word	0x20004134
   25234:	2000415f 	.word	0x2000415f

00025238 <ble_ll_rand_prand_get>:
 *
 * @param prand
 */
void
ble_ll_rand_prand_get(uint8_t *prand)
{
   25238:	b510      	push	{r4, lr}
   2523a:	4604      	mov	r4, r0
    uint16_t sum;

    while (1) {
        /* Get 24 bits of random data */
        ble_ll_rand_data_get(prand, 3);
   2523c:	2103      	movs	r1, #3
   2523e:	4620      	mov	r0, r4
   25240:	f7ff ffbc 	bl	251bc <ble_ll_rand_data_get>

        /* Prand cannot be all zeros or 1's. */
        sum = prand[0] + prand[1] + prand[2];
   25244:	7823      	ldrb	r3, [r4, #0]
   25246:	7862      	ldrb	r2, [r4, #1]
   25248:	4413      	add	r3, r2
   2524a:	78a2      	ldrb	r2, [r4, #2]
        if ((sum != 0) && (sum != (3 * 0xff))) {
   2524c:	18d3      	adds	r3, r2, r3
   2524e:	d0f5      	beq.n	2523c <ble_ll_rand_prand_get+0x4>
   25250:	f240 21fd 	movw	r1, #765	; 0x2fd
   25254:	428b      	cmp	r3, r1
   25256:	d0f1      	beq.n	2523c <ble_ll_rand_prand_get+0x4>
            break;
        }
    }

    /* Upper two bits must be 01 */
    prand[2] &= ~0xc0;
   25258:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    prand[2] |= 0x40;
   2525c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   25260:	70a2      	strb	r2, [r4, #2]
}
   25262:	bd10      	pop	{r4, pc}

00025264 <ble_ll_rand_start>:
 *
 * @return int
 */
int
ble_ll_rand_start(void)
{
   25264:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    /* Nothing to do - this is handled by driver */
#else
    /* Start the generation of numbers if we are not full */
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   25266:	4b05      	ldr	r3, [pc, #20]	; (2527c <ble_ll_rand_start+0x18>)
   25268:	7a1b      	ldrb	r3, [r3, #8]
   2526a:	b2db      	uxtb	r3, r3
   2526c:	2b1f      	cmp	r3, #31
   2526e:	d901      	bls.n	25274 <ble_ll_rand_start+0x10>
        ble_hw_rng_start();
    }
#endif
    return 0;
}
   25270:	2000      	movs	r0, #0
   25272:	bd08      	pop	{r3, pc}
        ble_hw_rng_start();
   25274:	f002 fc62 	bl	27b3c <ble_hw_rng_start>
   25278:	e7fa      	b.n	25270 <ble_ll_rand_start+0xc>
   2527a:	bf00      	nop
   2527c:	20004134 	.word	0x20004134

00025280 <ble_ll_rand_init>:
 *
 * @return int
 */
int
ble_ll_rand_init(void)
{
   25280:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    g_trng = (struct trng_dev *) os_dev_open("trng", OS_TIMEOUT_NEVER, NULL);
#else
    g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   25282:	4b05      	ldr	r3, [pc, #20]	; (25298 <ble_ll_rand_init+0x18>)
   25284:	4a05      	ldr	r2, [pc, #20]	; (2529c <ble_ll_rand_init+0x1c>)
   25286:	601a      	str	r2, [r3, #0]
    g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   25288:	605a      	str	r2, [r3, #4]
    ble_hw_rng_init(ble_ll_rand_sample, 1);
   2528a:	2101      	movs	r1, #1
   2528c:	4804      	ldr	r0, [pc, #16]	; (252a0 <ble_ll_rand_init+0x20>)
   2528e:	f002 fc31 	bl	27af4 <ble_hw_rng_init>
#endif
    return 0;
}
   25292:	2000      	movs	r0, #0
   25294:	bd08      	pop	{r3, pc}
   25296:	bf00      	nop
   25298:	20004134 	.word	0x20004134
   2529c:	20004140 	.word	0x20004140
   252a0:	0002516d 	.word	0x0002516d

000252a4 <ble_ll_is_controller_busy>:

struct ble_ll_resolv_entry g_ble_ll_resolv_list[MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE)];

static int
ble_ll_is_controller_busy(void)
{
   252a4:	b508      	push	{r3, lr}
    return ble_ll_adv_enabled() || ble_ll_scan_enabled() ||
   252a6:	f7fb fa29 	bl	206fc <ble_ll_adv_enabled>
   252aa:	b110      	cbz	r0, 252b2 <ble_ll_is_controller_busy+0xe>
   252ac:	2301      	movs	r3, #1
           g_ble_ll_conn_create_sm;
}
   252ae:	4618      	mov	r0, r3
   252b0:	bd08      	pop	{r3, pc}
    return ble_ll_adv_enabled() || ble_ll_scan_enabled() ||
   252b2:	f001 fc33 	bl	26b1c <ble_ll_scan_enabled>
   252b6:	4603      	mov	r3, r0
   252b8:	b928      	cbnz	r0, 252c6 <ble_ll_is_controller_busy+0x22>
   252ba:	4a04      	ldr	r2, [pc, #16]	; (252cc <ble_ll_is_controller_busy+0x28>)
   252bc:	6812      	ldr	r2, [r2, #0]
   252be:	2a00      	cmp	r2, #0
   252c0:	d0f5      	beq.n	252ae <ble_ll_is_controller_busy+0xa>
   252c2:	2301      	movs	r3, #1
   252c4:	e7f3      	b.n	252ae <ble_ll_is_controller_busy+0xa>
   252c6:	2301      	movs	r3, #1
   252c8:	e7f1      	b.n	252ae <ble_ll_is_controller_busy+0xa>
   252ca:	bf00      	nop
   252cc:	20003f90 	.word	0x20003f90

000252d0 <ble_ll_resolv_list_chg_allowed>:
 *
 * @return int 0: not allowed. 1: allowed.
 */
static int
ble_ll_resolv_list_chg_allowed(void)
{
   252d0:	b508      	push	{r3, lr}
    int rc;

    if (g_ble_ll_resolv_data.addr_res_enabled &&
   252d2:	4b06      	ldr	r3, [pc, #24]	; (252ec <ble_ll_resolv_list_chg_allowed+0x1c>)
   252d4:	781b      	ldrb	r3, [r3, #0]
   252d6:	b90b      	cbnz	r3, 252dc <ble_ll_resolv_list_chg_allowed+0xc>
       ble_ll_is_controller_busy()) {
        rc = 0;
    } else {
        rc = 1;
   252d8:	2001      	movs	r0, #1
    }
    return rc;
}
   252da:	bd08      	pop	{r3, pc}
       ble_ll_is_controller_busy()) {
   252dc:	f7ff ffe2 	bl	252a4 <ble_ll_is_controller_busy>
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   252e0:	b908      	cbnz	r0, 252e6 <ble_ll_resolv_list_chg_allowed+0x16>
        rc = 1;
   252e2:	2001      	movs	r0, #1
    return rc;
   252e4:	e7f9      	b.n	252da <ble_ll_resolv_list_chg_allowed+0xa>
        rc = 0;
   252e6:	2000      	movs	r0, #0
   252e8:	e7f7      	b.n	252da <ble_ll_resolv_list_chg_allowed+0xa>
   252ea:	bf00      	nop
   252ec:	20004234 	.word	0x20004234

000252f0 <ble_ll_is_on_resolv_list>:
 * is the 'position' of the device in the resolving list (the index of the
 * element plus 1).
 */
static int
ble_ll_is_on_resolv_list(uint8_t *addr, uint8_t addr_type)
{
   252f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   252f2:	4607      	mov	r7, r0
   252f4:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   252f6:	4c0c      	ldr	r4, [pc, #48]	; (25328 <ble_ll_is_on_resolv_list+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   252f8:	2500      	movs	r5, #0
   252fa:	e001      	b.n	25300 <ble_ll_is_on_resolv_list+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++rl;
   252fc:	3435      	adds	r4, #53	; 0x35
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   252fe:	3501      	adds	r5, #1
   25300:	4b0a      	ldr	r3, [pc, #40]	; (2532c <ble_ll_is_on_resolv_list+0x3c>)
   25302:	789b      	ldrb	r3, [r3, #2]
   25304:	42ab      	cmp	r3, r5
   25306:	dd0c      	ble.n	25322 <ble_ll_is_on_resolv_list+0x32>
        if ((rl->rl_addr_type == addr_type) &&
   25308:	7823      	ldrb	r3, [r4, #0]
   2530a:	42b3      	cmp	r3, r6
   2530c:	d1f6      	bne.n	252fc <ble_ll_is_on_resolv_list+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   2530e:	2206      	movs	r2, #6
   25310:	4639      	mov	r1, r7
   25312:	f104 0023 	add.w	r0, r4, #35	; 0x23
   25316:	f7ed f8b1 	bl	1247c <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   2531a:	2800      	cmp	r0, #0
   2531c:	d1ee      	bne.n	252fc <ble_ll_is_on_resolv_list+0xc>
            return i + 1;
   2531e:	1c68      	adds	r0, r5, #1
   25320:	e000      	b.n	25324 <ble_ll_is_on_resolv_list+0x34>
    }

    return 0;
   25322:	2000      	movs	r0, #0
}
   25324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25326:	bf00      	nop
   25328:	20004160 	.word	0x20004160
   2532c:	20004234 	.word	0x20004234

00025330 <ble_ll_resolv_gen_priv_addr>:
{
   25330:	b570      	push	{r4, r5, r6, lr}
   25332:	b08c      	sub	sp, #48	; 0x30
    BLE_LL_ASSERT(rl != NULL);
   25334:	b350      	cbz	r0, 2538c <ble_ll_resolv_gen_priv_addr+0x5c>
   25336:	4605      	mov	r5, r0
    if (local) {
   25338:	bb71      	cbnz	r1, 25398 <ble_ll_resolv_gen_priv_addr+0x68>
        addr = rl->rl_peer_rpa;
   2533a:	f100 042f 	add.w	r4, r0, #47	; 0x2f
        irk = rl->rl_peer_irk;
   2533e:	3513      	adds	r5, #19
    ble_ll_rand_prand_get(prand);
   25340:	1ce0      	adds	r0, r4, #3
   25342:	f7ff ff79 	bl	25238 <ble_ll_rand_prand_get>
    memcpy(ecb.key, irk, 16);
   25346:	466e      	mov	r6, sp
   25348:	6828      	ldr	r0, [r5, #0]
   2534a:	6869      	ldr	r1, [r5, #4]
   2534c:	68aa      	ldr	r2, [r5, #8]
   2534e:	68eb      	ldr	r3, [r5, #12]
   25350:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    memset(ecb.plain_text, 0, 13);
   25352:	2300      	movs	r3, #0
   25354:	9304      	str	r3, [sp, #16]
   25356:	9305      	str	r3, [sp, #20]
   25358:	9306      	str	r3, [sp, #24]
   2535a:	f88d 301c 	strb.w	r3, [sp, #28]
    ecb.plain_text[13] = prand[2];
   2535e:	7963      	ldrb	r3, [r4, #5]
   25360:	f88d 301d 	strb.w	r3, [sp, #29]
    ecb.plain_text[14] = prand[1];
   25364:	7923      	ldrb	r3, [r4, #4]
   25366:	f88d 301e 	strb.w	r3, [sp, #30]
    ecb.plain_text[15] = prand[0];
   2536a:	78e3      	ldrb	r3, [r4, #3]
   2536c:	f88d 301f 	strb.w	r3, [sp, #31]
    ble_hw_encrypt_block(&ecb);
   25370:	4668      	mov	r0, sp
   25372:	f002 fba3 	bl	27abc <ble_hw_encrypt_block>
    addr[0] = ecb.cipher_text[15];
   25376:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   2537a:	7023      	strb	r3, [r4, #0]
    addr[1] = ecb.cipher_text[14];
   2537c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   25380:	7063      	strb	r3, [r4, #1]
    addr[2] = ecb.cipher_text[13];
   25382:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   25386:	70a3      	strb	r3, [r4, #2]
}
   25388:	b00c      	add	sp, #48	; 0x30
   2538a:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   2538c:	2300      	movs	r3, #0
   2538e:	461a      	mov	r2, r3
   25390:	4619      	mov	r1, r3
   25392:	4618      	mov	r0, r3
   25394:	f7eb f922 	bl	105dc <__assert_func>
        addr = rl->rl_local_rpa;
   25398:	f100 0429 	add.w	r4, r0, #41	; 0x29
        irk = rl->rl_local_irk;
   2539c:	3503      	adds	r5, #3
   2539e:	e7cf      	b.n	25340 <ble_ll_resolv_gen_priv_addr+0x10>

000253a0 <ble_ll_resolv_rpa_timer_cb>:
{
   253a0:	b570      	push	{r4, r5, r6, lr}
    rl = &g_ble_ll_resolv_list[0];
   253a2:	4c12      	ldr	r4, [pc, #72]	; (253ec <ble_ll_resolv_rpa_timer_cb+0x4c>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   253a4:	2500      	movs	r5, #0
   253a6:	e015      	b.n	253d4 <ble_ll_resolv_rpa_timer_cb+0x34>
        OS_ENTER_CRITICAL(sr);
   253a8:	f7eb f84e 	bl	10448 <os_arch_save_sr>
   253ac:	4606      	mov	r6, r0
        ble_ll_resolv_gen_priv_addr(rl, 1);
   253ae:	2101      	movs	r1, #1
   253b0:	4620      	mov	r0, r4
   253b2:	f7ff ffbd 	bl	25330 <ble_ll_resolv_gen_priv_addr>
        OS_EXIT_CRITICAL(sr);
   253b6:	4630      	mov	r0, r6
   253b8:	f7eb f84c 	bl	10454 <os_arch_restore_sr>
        OS_ENTER_CRITICAL(sr);
   253bc:	f7eb f844 	bl	10448 <os_arch_save_sr>
   253c0:	4606      	mov	r6, r0
        ble_ll_resolv_gen_priv_addr(rl, 0);
   253c2:	2100      	movs	r1, #0
   253c4:	4620      	mov	r0, r4
   253c6:	f7ff ffb3 	bl	25330 <ble_ll_resolv_gen_priv_addr>
        OS_EXIT_CRITICAL(sr);
   253ca:	4630      	mov	r0, r6
   253cc:	f7eb f842 	bl	10454 <os_arch_restore_sr>
        ++rl;
   253d0:	3435      	adds	r4, #53	; 0x35
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   253d2:	3501      	adds	r5, #1
   253d4:	4b06      	ldr	r3, [pc, #24]	; (253f0 <ble_ll_resolv_rpa_timer_cb+0x50>)
   253d6:	789b      	ldrb	r3, [r3, #2]
   253d8:	42ab      	cmp	r3, r5
   253da:	dce5      	bgt.n	253a8 <ble_ll_resolv_rpa_timer_cb+0x8>
                     (int32_t)g_ble_ll_resolv_data.rpa_tmo);
   253dc:	4804      	ldr	r0, [pc, #16]	; (253f0 <ble_ll_resolv_rpa_timer_cb+0x50>)
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   253de:	6841      	ldr	r1, [r0, #4]
   253e0:	3008      	adds	r0, #8
   253e2:	f7eb faa1 	bl	10928 <os_callout_reset>
    ble_ll_adv_rpa_timeout();
   253e6:	f7fa fe95 	bl	20114 <ble_ll_adv_rpa_timeout>
}
   253ea:	bd70      	pop	{r4, r5, r6, pc}
   253ec:	20004160 	.word	0x20004160
   253f0:	20004234 	.word	0x20004234

000253f4 <ble_ll_resolv_irk_nonzero>:
    for (i = 0; i < 16; ++i) {
   253f4:	2300      	movs	r3, #0
   253f6:	2b0f      	cmp	r3, #15
   253f8:	dc04      	bgt.n	25404 <ble_ll_resolv_irk_nonzero+0x10>
        if (*irk != 0) {
   253fa:	7802      	ldrb	r2, [r0, #0]
   253fc:	b922      	cbnz	r2, 25408 <ble_ll_resolv_irk_nonzero+0x14>
        ++irk;
   253fe:	3001      	adds	r0, #1
    for (i = 0; i < 16; ++i) {
   25400:	3301      	adds	r3, #1
   25402:	e7f8      	b.n	253f6 <ble_ll_resolv_irk_nonzero+0x2>
    rc = 0;
   25404:	2000      	movs	r0, #0
   25406:	4770      	bx	lr
            rc = 1;
   25408:	2001      	movs	r0, #1
}
   2540a:	4770      	bx	lr

0002540c <ble_ll_resolv_list_clr>:
{
   2540c:	b510      	push	{r4, lr}
    if (!ble_ll_resolv_list_chg_allowed()) {
   2540e:	f7ff ff5f 	bl	252d0 <ble_ll_resolv_list_chg_allowed>
   25412:	b130      	cbz	r0, 25422 <ble_ll_resolv_list_clr+0x16>
    g_ble_ll_resolv_data.rl_cnt = 0;
   25414:	2400      	movs	r4, #0
   25416:	4b04      	ldr	r3, [pc, #16]	; (25428 <ble_ll_resolv_list_clr+0x1c>)
   25418:	709c      	strb	r4, [r3, #2]
    ble_hw_resolv_list_clear();
   2541a:	f002 fbbb 	bl	27b94 <ble_hw_resolv_list_clear>
    return BLE_ERR_SUCCESS;
   2541e:	4620      	mov	r0, r4
}
   25420:	bd10      	pop	{r4, pc}
        return BLE_ERR_CMD_DISALLOWED;
   25422:	200c      	movs	r0, #12
   25424:	e7fc      	b.n	25420 <ble_ll_resolv_list_clr+0x14>
   25426:	bf00      	nop
   25428:	20004234 	.word	0x20004234

0002542c <ble_ll_resolv_list_read_size>:
    rspbuf[0] = g_ble_ll_resolv_data.rl_size;
   2542c:	4b03      	ldr	r3, [pc, #12]	; (2543c <ble_ll_resolv_list_read_size+0x10>)
   2542e:	785b      	ldrb	r3, [r3, #1]
   25430:	7003      	strb	r3, [r0, #0]
    *rsplen = 1;
   25432:	2301      	movs	r3, #1
   25434:	700b      	strb	r3, [r1, #0]
}
   25436:	2000      	movs	r0, #0
   25438:	4770      	bx	lr
   2543a:	bf00      	nop
   2543c:	20004234 	.word	0x20004234

00025440 <ble_ll_resolv_list_find>:
 *
 * @return Pointer to resolving list entry or NULL if no entry found.
 */
struct ble_ll_resolv_entry *
ble_ll_resolv_list_find(uint8_t *addr, uint8_t addr_type)
{
   25440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25442:	4607      	mov	r7, r0
   25444:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   25446:	4c0c      	ldr	r4, [pc, #48]	; (25478 <ble_ll_resolv_list_find+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   25448:	2500      	movs	r5, #0
   2544a:	e001      	b.n	25450 <ble_ll_resolv_list_find+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return rl;
        }
        ++rl;
   2544c:	3435      	adds	r4, #53	; 0x35
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   2544e:	3501      	adds	r5, #1
   25450:	4b0a      	ldr	r3, [pc, #40]	; (2547c <ble_ll_resolv_list_find+0x3c>)
   25452:	789b      	ldrb	r3, [r3, #2]
   25454:	42ab      	cmp	r3, r5
   25456:	dd0b      	ble.n	25470 <ble_ll_resolv_list_find+0x30>
        if ((rl->rl_addr_type == addr_type) &&
   25458:	7823      	ldrb	r3, [r4, #0]
   2545a:	42b3      	cmp	r3, r6
   2545c:	d1f6      	bne.n	2544c <ble_ll_resolv_list_find+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   2545e:	2206      	movs	r2, #6
   25460:	4639      	mov	r1, r7
   25462:	f104 0023 	add.w	r0, r4, #35	; 0x23
   25466:	f7ed f809 	bl	1247c <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   2546a:	2800      	cmp	r0, #0
   2546c:	d1ee      	bne.n	2544c <ble_ll_resolv_list_find+0xc>
   2546e:	e000      	b.n	25472 <ble_ll_resolv_list_find+0x32>
    }

    return NULL;
   25470:	2400      	movs	r4, #0
}
   25472:	4620      	mov	r0, r4
   25474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25476:	bf00      	nop
   25478:	20004160 	.word	0x20004160
   2547c:	20004234 	.word	0x20004234

00025480 <ble_ll_resolv_list_add>:
 *
 * @return int
 */
int
ble_ll_resolv_list_add(uint8_t *cmdbuf)
{
   25480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25484:	4606      	mov	r6, r0
    uint8_t addr_type;
    uint8_t *ident_addr;
    struct ble_ll_resolv_entry *rl;

    /* Must be in proper state */
    if (!ble_ll_resolv_list_chg_allowed()) {
   25486:	f7ff ff23 	bl	252d0 <ble_ll_resolv_list_chg_allowed>
   2548a:	2800      	cmp	r0, #0
   2548c:	d04b      	beq.n	25526 <ble_ll_resolv_list_add+0xa6>
        return BLE_ERR_CMD_DISALLOWED;
    }

    /* Check if we have any open entries */
    if (g_ble_ll_resolv_data.rl_cnt >= g_ble_ll_resolv_data.rl_size) {
   2548e:	4b2a      	ldr	r3, [pc, #168]	; (25538 <ble_ll_resolv_list_add+0xb8>)
   25490:	789c      	ldrb	r4, [r3, #2]
   25492:	785b      	ldrb	r3, [r3, #1]
   25494:	429c      	cmp	r4, r3
   25496:	d248      	bcs.n	2552a <ble_ll_resolv_list_add+0xaa>
        return BLE_ERR_MEM_CAPACITY;
    }

    addr_type = cmdbuf[0];
   25498:	4635      	mov	r5, r6
   2549a:	f815 9b01 	ldrb.w	r9, [r5], #1
    ident_addr = cmdbuf + 1;

    /* spec is not clear on how to handle this but make sure host is aware
     * that new keys are not used in that case
     */
    if (ble_ll_is_on_resolv_list(ident_addr, addr_type)) {
   2549e:	4649      	mov	r1, r9
   254a0:	4628      	mov	r0, r5
   254a2:	f7ff ff25 	bl	252f0 <ble_ll_is_on_resolv_list>
   254a6:	2800      	cmp	r0, #0
   254a8:	d143      	bne.n	25532 <ble_ll_resolv_list_add+0xb2>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl = &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt];
   254aa:	2235      	movs	r2, #53	; 0x35
   254ac:	fb02 f404 	mul.w	r4, r2, r4
   254b0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 2553c <ble_ll_resolv_list_add+0xbc>
   254b4:	eb04 0708 	add.w	r7, r4, r8
    memset (rl, 0, sizeof(*rl));
   254b8:	2100      	movs	r1, #0
   254ba:	4638      	mov	r0, r7
   254bc:	f7ed f82b 	bl	12516 <memset>

    rl->rl_addr_type = addr_type;
   254c0:	f804 9008 	strb.w	r9, [r4, r8]
    memcpy(&rl->rl_identity_addr[0], ident_addr, BLE_DEV_ADDR_LEN);
   254c4:	f104 0320 	add.w	r3, r4, #32
   254c8:	4443      	add	r3, r8
   254ca:	682a      	ldr	r2, [r5, #0]
   254cc:	f8c3 2003 	str.w	r2, [r3, #3]
   254d0:	88aa      	ldrh	r2, [r5, #4]
   254d2:	f8a3 2007 	strh.w	r2, [r3, #7]
    swap_buf(rl->rl_peer_irk, cmdbuf + 7, 16);
   254d6:	3410      	adds	r4, #16
   254d8:	4444      	add	r4, r8
   254da:	3403      	adds	r4, #3
   254dc:	2210      	movs	r2, #16
   254de:	1df1      	adds	r1, r6, #7
   254e0:	4620      	mov	r0, r4
   254e2:	f7f9 fb9f 	bl	1ec24 <swap_buf>
    swap_buf(rl->rl_local_irk, cmdbuf + 23, 16);
   254e6:	2210      	movs	r2, #16
   254e8:	f106 0117 	add.w	r1, r6, #23
   254ec:	1cf8      	adds	r0, r7, #3
   254ee:	f7f9 fb99 	bl	1ec24 <swap_buf>

    /* By default use privacy network mode */
    rl->rl_priv_mode = BLE_HCI_PRIVACY_NETWORK;
   254f2:	2300      	movs	r3, #0
   254f4:	70bb      	strb	r3, [r7, #2]

    /* Add peer IRK to HW resolving list. Should always succeed since we
     * already checked if there is room for it.
     */
    rc = ble_hw_resolv_list_add(rl->rl_peer_irk);
   254f6:	4620      	mov	r0, r4
   254f8:	f002 fb52 	bl	27ba0 <ble_hw_resolv_list_add>
    BLE_LL_ASSERT (rc == BLE_ERR_SUCCESS);
   254fc:	4604      	mov	r4, r0
   254fe:	b960      	cbnz	r0, 2551a <ble_ll_resolv_list_add+0x9a>

    /* generate a local and peer RPAs now, those will be updated by timer
     * when resolution is enabled
     */
    ble_ll_resolv_gen_priv_addr(rl, 1);
   25500:	2101      	movs	r1, #1
   25502:	4638      	mov	r0, r7
   25504:	f7ff ff14 	bl	25330 <ble_ll_resolv_gen_priv_addr>
    ble_ll_resolv_gen_priv_addr(rl, 0);
   25508:	2100      	movs	r1, #0
   2550a:	4638      	mov	r0, r7
   2550c:	f7ff ff10 	bl	25330 <ble_ll_resolv_gen_priv_addr>
    ++g_ble_ll_resolv_data.rl_cnt;
   25510:	4a09      	ldr	r2, [pc, #36]	; (25538 <ble_ll_resolv_list_add+0xb8>)
   25512:	7893      	ldrb	r3, [r2, #2]
   25514:	3301      	adds	r3, #1
   25516:	7093      	strb	r3, [r2, #2]

    return rc;
   25518:	e008      	b.n	2552c <ble_ll_resolv_list_add+0xac>
    BLE_LL_ASSERT (rc == BLE_ERR_SUCCESS);
   2551a:	2300      	movs	r3, #0
   2551c:	461a      	mov	r2, r3
   2551e:	4619      	mov	r1, r3
   25520:	4618      	mov	r0, r3
   25522:	f7eb f85b 	bl	105dc <__assert_func>
        return BLE_ERR_CMD_DISALLOWED;
   25526:	240c      	movs	r4, #12
   25528:	e000      	b.n	2552c <ble_ll_resolv_list_add+0xac>
        return BLE_ERR_MEM_CAPACITY;
   2552a:	2407      	movs	r4, #7
}
   2552c:	4620      	mov	r0, r4
   2552e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   25532:	2412      	movs	r4, #18
   25534:	e7fa      	b.n	2552c <ble_ll_resolv_list_add+0xac>
   25536:	bf00      	nop
   25538:	20004234 	.word	0x20004234
   2553c:	20004160 	.word	0x20004160

00025540 <ble_ll_resolv_list_rmv>:
 *
 * @return int 0: success, BLE error code otherwise
 */
int
ble_ll_resolv_list_rmv(uint8_t *cmdbuf)
{
   25540:	b538      	push	{r3, r4, r5, lr}
   25542:	4604      	mov	r4, r0
    int position;
    uint8_t addr_type;
    uint8_t *ident_addr;

    /* Must be in proper state */
    if (!ble_ll_resolv_list_chg_allowed()) {
   25544:	f7ff fec4 	bl	252d0 <ble_ll_resolv_list_chg_allowed>
   25548:	b310      	cbz	r0, 25590 <ble_ll_resolv_list_rmv+0x50>
        return BLE_ERR_CMD_DISALLOWED;
    }

    addr_type = cmdbuf[0];
   2554a:	4620      	mov	r0, r4
    ident_addr = cmdbuf + 1;

    /* Remove from IRK records */
    position = ble_ll_is_on_resolv_list(ident_addr, addr_type);
   2554c:	f810 1b01 	ldrb.w	r1, [r0], #1
   25550:	f7ff fece 	bl	252f0 <ble_ll_is_on_resolv_list>
    if (position) {
   25554:	4601      	mov	r1, r0
   25556:	b1e8      	cbz	r0, 25594 <ble_ll_resolv_list_rmv+0x54>
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   25558:	4b0f      	ldr	r3, [pc, #60]	; (25598 <ble_ll_resolv_list_rmv+0x58>)
   2555a:	789c      	ldrb	r4, [r3, #2]
   2555c:	4284      	cmp	r4, r0
   2555e:	db11      	blt.n	25584 <ble_ll_resolv_list_rmv+0x44>

        memmove(&g_ble_ll_resolv_list[position - 1],
   25560:	1e45      	subs	r5, r0, #1
   25562:	2035      	movs	r0, #53	; 0x35
   25564:	4b0d      	ldr	r3, [pc, #52]	; (2559c <ble_ll_resolv_list_rmv+0x5c>)
   25566:	1a62      	subs	r2, r4, r1
   25568:	fb00 3101 	mla	r1, r0, r1, r3
   2556c:	fb00 3005 	mla	r0, r0, r5, r3
   25570:	f7ec ffb5 	bl	124de <memmove>
                &g_ble_ll_resolv_list[position],
                g_ble_ll_resolv_data.rl_cnt - position);
        --g_ble_ll_resolv_data.rl_cnt;
   25574:	3c01      	subs	r4, #1
   25576:	4b08      	ldr	r3, [pc, #32]	; (25598 <ble_ll_resolv_list_rmv+0x58>)
   25578:	709c      	strb	r4, [r3, #2]

        /* Remove from HW list */
        ble_hw_resolv_list_rmv(position - 1);
   2557a:	4628      	mov	r0, r5
   2557c:	f002 fb2c 	bl	27bd8 <ble_hw_resolv_list_rmv>
        return BLE_ERR_SUCCESS;
   25580:	2000      	movs	r0, #0
   25582:	e006      	b.n	25592 <ble_ll_resolv_list_rmv+0x52>
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   25584:	2300      	movs	r3, #0
   25586:	461a      	mov	r2, r3
   25588:	4619      	mov	r1, r3
   2558a:	4618      	mov	r0, r3
   2558c:	f7eb f826 	bl	105dc <__assert_func>
        return BLE_ERR_CMD_DISALLOWED;
   25590:	200c      	movs	r0, #12
    }

    return BLE_ERR_UNK_CONN_ID;
}
   25592:	bd38      	pop	{r3, r4, r5, pc}
    return BLE_ERR_UNK_CONN_ID;
   25594:	2002      	movs	r0, #2
   25596:	e7fc      	b.n	25592 <ble_ll_resolv_list_rmv+0x52>
   25598:	20004234 	.word	0x20004234
   2559c:	20004160 	.word	0x20004160

000255a0 <ble_ll_resolv_enable_cmd>:
 *
 * @return int
 */
int
ble_ll_resolv_enable_cmd(uint8_t *cmdbuf)
{
   255a0:	b538      	push	{r3, r4, r5, lr}
   255a2:	4605      	mov	r5, r0
    int rc;
    int32_t tmo;
    uint8_t enabled;

    if (ble_ll_is_controller_busy()) {
   255a4:	f7ff fe7e 	bl	252a4 <ble_ll_is_controller_busy>
   255a8:	b9a0      	cbnz	r0, 255d4 <ble_ll_resolv_enable_cmd+0x34>
   255aa:	4604      	mov	r4, r0
        rc = BLE_ERR_CMD_DISALLOWED;
    } else {
        enabled = cmdbuf[0];
   255ac:	782d      	ldrb	r5, [r5, #0]
        if (enabled <= 1) {
   255ae:	2d01      	cmp	r5, #1
   255b0:	d813      	bhi.n	255da <ble_ll_resolv_enable_cmd+0x3a>
            /* If we change state, we need to disable/enable the RPA timer */
            if ((enabled ^ g_ble_ll_resolv_data.addr_res_enabled) != 0) {
   255b2:	4b0b      	ldr	r3, [pc, #44]	; (255e0 <ble_ll_resolv_enable_cmd+0x40>)
   255b4:	781b      	ldrb	r3, [r3, #0]
   255b6:	42ab      	cmp	r3, r5
   255b8:	d00d      	beq.n	255d6 <ble_ll_resolv_enable_cmd+0x36>
                if (enabled) {
   255ba:	b13d      	cbz	r5, 255cc <ble_ll_resolv_enable_cmd+0x2c>
                    tmo = (int32_t)g_ble_ll_resolv_data.rpa_tmo;
   255bc:	4808      	ldr	r0, [pc, #32]	; (255e0 <ble_ll_resolv_enable_cmd+0x40>)
   255be:	6841      	ldr	r1, [r0, #4]
   255c0:	3008      	adds	r0, #8
   255c2:	f7eb f9b1 	bl	10928 <os_callout_reset>
                    ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer, tmo);
                } else {
                    ble_npl_callout_stop(&g_ble_ll_resolv_data.rpa_timer);
                }
                g_ble_ll_resolv_data.addr_res_enabled = enabled;
   255c6:	4b06      	ldr	r3, [pc, #24]	; (255e0 <ble_ll_resolv_enable_cmd+0x40>)
   255c8:	701d      	strb	r5, [r3, #0]
   255ca:	e004      	b.n	255d6 <ble_ll_resolv_enable_cmd+0x36>
    os_callout_stop(&co->co);
   255cc:	4805      	ldr	r0, [pc, #20]	; (255e4 <ble_ll_resolv_enable_cmd+0x44>)
   255ce:	f7eb f98d 	bl	108ec <os_callout_stop>
   255d2:	e7f8      	b.n	255c6 <ble_ll_resolv_enable_cmd+0x26>
        rc = BLE_ERR_CMD_DISALLOWED;
   255d4:	240c      	movs	r4, #12
            rc = BLE_ERR_INV_HCI_CMD_PARMS;
        }
    }

    return rc;
}
   255d6:	4620      	mov	r0, r4
   255d8:	bd38      	pop	{r3, r4, r5, pc}
            rc = BLE_ERR_INV_HCI_CMD_PARMS;
   255da:	2412      	movs	r4, #18
    return rc;
   255dc:	e7fb      	b.n	255d6 <ble_ll_resolv_enable_cmd+0x36>
   255de:	bf00      	nop
   255e0:	20004234 	.word	0x20004234
   255e4:	2000423c 	.word	0x2000423c

000255e8 <ble_ll_resolv_peer_addr_rd>:

int
ble_ll_resolv_peer_addr_rd(uint8_t *cmdbuf, uint8_t *rspbuf, uint8_t *rsplen)
{
   255e8:	b538      	push	{r3, r4, r5, lr}
   255ea:	460c      	mov	r4, r1
   255ec:	4615      	mov	r5, r2
    int rc;

    addr_type = cmdbuf[0];
    ident_addr = cmdbuf + 1;

    rl = ble_ll_resolv_list_find(ident_addr, addr_type);
   255ee:	f810 1b01 	ldrb.w	r1, [r0], #1
   255f2:	f7ff ff25 	bl	25440 <ble_ll_resolv_list_find>
    if (rl) {
   255f6:	b140      	cbz	r0, 2560a <ble_ll_resolv_peer_addr_rd+0x22>
        memcpy(rspbuf, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   255f8:	f850 3f2f 	ldr.w	r3, [r0, #47]!
   255fc:	6023      	str	r3, [r4, #0]
   255fe:	8883      	ldrh	r3, [r0, #4]
   25600:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   25602:	2000      	movs	r0, #0
    } else {
        memset(rspbuf, 0, BLE_DEV_ADDR_LEN);
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = BLE_DEV_ADDR_LEN;
   25604:	2306      	movs	r3, #6
   25606:	702b      	strb	r3, [r5, #0]
    return rc;
}
   25608:	bd38      	pop	{r3, r4, r5, pc}
        memset(rspbuf, 0, BLE_DEV_ADDR_LEN);
   2560a:	2300      	movs	r3, #0
   2560c:	6023      	str	r3, [r4, #0]
   2560e:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   25610:	2002      	movs	r0, #2
   25612:	e7f7      	b.n	25604 <ble_ll_resolv_peer_addr_rd+0x1c>

00025614 <ble_ll_resolv_local_addr_rd>:

int
ble_ll_resolv_local_addr_rd(uint8_t *cmdbuf, uint8_t *rspbuf, uint8_t *rsplen)
{
   25614:	b538      	push	{r3, r4, r5, lr}
   25616:	460c      	mov	r4, r1
   25618:	4615      	mov	r5, r2
    int rc;

    addr_type = cmdbuf[0];
    ident_addr = cmdbuf + 1;

    rl = ble_ll_resolv_list_find(ident_addr, addr_type);
   2561a:	f810 1b01 	ldrb.w	r1, [r0], #1
   2561e:	f7ff ff0f 	bl	25440 <ble_ll_resolv_list_find>
    if (rl) {
   25622:	b140      	cbz	r0, 25636 <ble_ll_resolv_local_addr_rd+0x22>
        memcpy(rspbuf, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   25624:	f850 3f29 	ldr.w	r3, [r0, #41]!
   25628:	6023      	str	r3, [r4, #0]
   2562a:	8883      	ldrh	r3, [r0, #4]
   2562c:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   2562e:	2000      	movs	r0, #0
    } else {
        memset(rspbuf, 0, BLE_DEV_ADDR_LEN);
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = BLE_DEV_ADDR_LEN;
   25630:	2306      	movs	r3, #6
   25632:	702b      	strb	r3, [r5, #0]
    return rc;
}
   25634:	bd38      	pop	{r3, r4, r5, pc}
        memset(rspbuf, 0, BLE_DEV_ADDR_LEN);
   25636:	2300      	movs	r3, #0
   25638:	6023      	str	r3, [r4, #0]
   2563a:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   2563c:	2002      	movs	r0, #2
   2563e:	e7f7      	b.n	25630 <ble_ll_resolv_local_addr_rd+0x1c>

00025640 <ble_ll_resolve_set_priv_mode>:
    return BLE_ERR_SUCCESS;
}

int
ble_ll_resolve_set_priv_mode(uint8_t *cmdbuf)
{
   25640:	b538      	push	{r3, r4, r5, lr}
   25642:	4605      	mov	r5, r0
    struct ble_ll_resolv_entry *rl;

    if (ble_ll_is_controller_busy()) {
   25644:	f7ff fe2e 	bl	252a4 <ble_ll_is_controller_busy>
   25648:	b950      	cbnz	r0, 25660 <ble_ll_resolve_set_priv_mode+0x20>
   2564a:	4604      	mov	r4, r0
        return BLE_ERR_CMD_DISALLOWED;
    }

    /* cmdbuf = addr_type(0) | addr(6) | priv_mode(1) */
    rl = ble_ll_resolv_list_find(&cmdbuf[1], cmdbuf[0]);
   2564c:	7829      	ldrb	r1, [r5, #0]
   2564e:	1c68      	adds	r0, r5, #1
   25650:	f7ff fef6 	bl	25440 <ble_ll_resolv_list_find>
    if (!rl) {
   25654:	b138      	cbz	r0, 25666 <ble_ll_resolve_set_priv_mode+0x26>
        return BLE_ERR_UNK_CONN_ID;
    }

    if (cmdbuf[7] > BLE_HCI_PRIVACY_DEVICE) {
   25656:	79eb      	ldrb	r3, [r5, #7]
   25658:	2b01      	cmp	r3, #1
   2565a:	d806      	bhi.n	2566a <ble_ll_resolve_set_priv_mode+0x2a>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    rl->rl_priv_mode = cmdbuf[7];
   2565c:	7083      	strb	r3, [r0, #2]
    return 0;
   2565e:	e000      	b.n	25662 <ble_ll_resolve_set_priv_mode+0x22>
        return BLE_ERR_CMD_DISALLOWED;
   25660:	240c      	movs	r4, #12
}
   25662:	4620      	mov	r0, r4
   25664:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_UNK_CONN_ID;
   25666:	2402      	movs	r4, #2
   25668:	e7fb      	b.n	25662 <ble_ll_resolve_set_priv_mode+0x22>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2566a:	2412      	movs	r4, #18
   2566c:	e7f9      	b.n	25662 <ble_ll_resolve_set_priv_mode+0x22>
	...

00025670 <ble_ll_resolv_get_rpa_tmo>:
 */
uint32_t
ble_ll_resolv_get_rpa_tmo(void)
{
    return g_ble_ll_resolv_data.rpa_tmo;
}
   25670:	4b01      	ldr	r3, [pc, #4]	; (25678 <ble_ll_resolv_get_rpa_tmo+0x8>)
   25672:	6858      	ldr	r0, [r3, #4]
   25674:	4770      	bx	lr
   25676:	bf00      	nop
   25678:	20004234 	.word	0x20004234

0002567c <ble_ll_resolv_get_priv_addr>:

void
ble_ll_resolv_get_priv_addr(struct ble_ll_resolv_entry *rl, int local,
                            uint8_t *addr)
{
   2567c:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;

    BLE_LL_ASSERT(rl != NULL);
   2567e:	b178      	cbz	r0, 256a0 <ble_ll_resolv_get_priv_addr+0x24>
   25680:	460e      	mov	r6, r1
   25682:	4615      	mov	r5, r2
   25684:	4604      	mov	r4, r0
    BLE_LL_ASSERT(addr != NULL);
   25686:	b18a      	cbz	r2, 256ac <ble_ll_resolv_get_priv_addr+0x30>

    OS_ENTER_CRITICAL(sr);
   25688:	f7ea fede 	bl	10448 <os_arch_save_sr>
    if (local) {
   2568c:	b9a6      	cbnz	r6, 256b8 <ble_ll_resolv_get_priv_addr+0x3c>
        memcpy(addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
    } else {
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   2568e:	4623      	mov	r3, r4
   25690:	f853 2f2f 	ldr.w	r2, [r3, #47]!
   25694:	602a      	str	r2, [r5, #0]
   25696:	889b      	ldrh	r3, [r3, #4]
   25698:	80ab      	strh	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   2569a:	f7ea fedb 	bl	10454 <os_arch_restore_sr>
}
   2569e:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   256a0:	2300      	movs	r3, #0
   256a2:	461a      	mov	r2, r3
   256a4:	4619      	mov	r1, r3
   256a6:	4618      	mov	r0, r3
   256a8:	f7ea ff98 	bl	105dc <__assert_func>
    BLE_LL_ASSERT(addr != NULL);
   256ac:	2300      	movs	r3, #0
   256ae:	461a      	mov	r2, r3
   256b0:	4619      	mov	r1, r3
   256b2:	4618      	mov	r0, r3
   256b4:	f7ea ff92 	bl	105dc <__assert_func>
        memcpy(addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   256b8:	4623      	mov	r3, r4
   256ba:	f853 2f29 	ldr.w	r2, [r3, #41]!
   256be:	602a      	str	r2, [r5, #0]
   256c0:	889b      	ldrh	r3, [r3, #4]
   256c2:	80ab      	strh	r3, [r5, #4]
   256c4:	e7e9      	b.n	2569a <ble_ll_resolv_get_priv_addr+0x1e>
	...

000256c8 <ble_ll_resolv_set_peer_rpa>:

void
ble_ll_resolv_set_peer_rpa(int index, uint8_t *rpa)
{
   256c8:	b538      	push	{r3, r4, r5, lr}
   256ca:	4605      	mov	r5, r0
   256cc:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   256ce:	f7ea febb 	bl	10448 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   256d2:	2335      	movs	r3, #53	; 0x35
   256d4:	fb03 f305 	mul.w	r3, r3, r5
   256d8:	3328      	adds	r3, #40	; 0x28
   256da:	4a05      	ldr	r2, [pc, #20]	; (256f0 <ble_ll_resolv_set_peer_rpa+0x28>)
   256dc:	4413      	add	r3, r2
   256de:	6822      	ldr	r2, [r4, #0]
   256e0:	f8c3 2007 	str.w	r2, [r3, #7]
   256e4:	88a2      	ldrh	r2, [r4, #4]
   256e6:	f8a3 200b 	strh.w	r2, [r3, #11]
    OS_EXIT_CRITICAL(sr);
   256ea:	f7ea feb3 	bl	10454 <os_arch_restore_sr>
}
   256ee:	bd38      	pop	{r3, r4, r5, pc}
   256f0:	20004160 	.word	0x20004160

000256f4 <ble_ll_resolv_set_local_rpa>:

void
ble_ll_resolv_set_local_rpa(int index, uint8_t *rpa)
{
   256f4:	b538      	push	{r3, r4, r5, lr}
   256f6:	4605      	mov	r5, r0
   256f8:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   256fa:	f7ea fea5 	bl	10448 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_local_rpa, rpa, BLE_DEV_ADDR_LEN);
   256fe:	2335      	movs	r3, #53	; 0x35
   25700:	fb03 f305 	mul.w	r3, r3, r5
   25704:	3328      	adds	r3, #40	; 0x28
   25706:	4a05      	ldr	r2, [pc, #20]	; (2571c <ble_ll_resolv_set_local_rpa+0x28>)
   25708:	4413      	add	r3, r2
   2570a:	6822      	ldr	r2, [r4, #0]
   2570c:	f8c3 2001 	str.w	r2, [r3, #1]
   25710:	88a2      	ldrh	r2, [r4, #4]
   25712:	f8a3 2005 	strh.w	r2, [r3, #5]
    OS_EXIT_CRITICAL(sr);
   25716:	f7ea fe9d 	bl	10454 <os_arch_restore_sr>
}
   2571a:	bd38      	pop	{r3, r4, r5, pc}
   2571c:	20004160 	.word	0x20004160

00025720 <ble_ll_resolv_gen_rpa>:
 *
 * @return int
 */
int
ble_ll_resolv_gen_rpa(uint8_t *addr, uint8_t addr_type, uint8_t *rpa, int local)
{
   25720:	b570      	push	{r4, r5, r6, lr}
   25722:	4616      	mov	r6, r2
   25724:	461d      	mov	r5, r3
    int rc;
    uint8_t *irk;
    struct ble_ll_resolv_entry *rl;

    rc = 0;
    rl = ble_ll_resolv_list_find(addr, addr_type);
   25726:	f7ff fe8b 	bl	25440 <ble_ll_resolv_list_find>
    if (rl) {
   2572a:	b188      	cbz	r0, 25750 <ble_ll_resolv_gen_rpa+0x30>
   2572c:	4604      	mov	r4, r0
        if (local) {
   2572e:	b135      	cbz	r5, 2573e <ble_ll_resolv_gen_rpa+0x1e>
            irk = rl->rl_local_irk;
   25730:	3003      	adds	r0, #3
        } else {
            irk = rl->rl_peer_irk;
        }
        if (ble_ll_resolv_irk_nonzero(irk)) {
   25732:	f7ff fe5f 	bl	253f4 <ble_ll_resolv_irk_nonzero>
   25736:	4603      	mov	r3, r0
   25738:	b918      	cbnz	r0, 25742 <ble_ll_resolv_gen_rpa+0x22>
            rc = 1;
        }
    }

    return rc;
}
   2573a:	4618      	mov	r0, r3
   2573c:	bd70      	pop	{r4, r5, r6, pc}
            irk = rl->rl_peer_irk;
   2573e:	3013      	adds	r0, #19
   25740:	e7f7      	b.n	25732 <ble_ll_resolv_gen_rpa+0x12>
            ble_ll_resolv_get_priv_addr(rl, local, rpa);
   25742:	4632      	mov	r2, r6
   25744:	4629      	mov	r1, r5
   25746:	4620      	mov	r0, r4
   25748:	f7ff ff98 	bl	2567c <ble_ll_resolv_get_priv_addr>
            rc = 1;
   2574c:	2301      	movs	r3, #1
   2574e:	e7f4      	b.n	2573a <ble_ll_resolv_gen_rpa+0x1a>
    rc = 0;
   25750:	2300      	movs	r3, #0
    return rc;
   25752:	e7f2      	b.n	2573a <ble_ll_resolv_gen_rpa+0x1a>

00025754 <ble_ll_resolv_rpa>:
 *
 * @return int
 */
int
ble_ll_resolv_rpa(uint8_t *rpa, uint8_t *irk)
{
   25754:	b510      	push	{r4, lr}
   25756:	b08c      	sub	sp, #48	; 0x30
   25758:	4604      	mov	r4, r0
    struct ble_encryption_block ecb;

    irk32 = (uint32_t *)irk;
    key32 = (uint32_t *)&ecb.key[0];

    key32[0] = irk32[0];
   2575a:	680b      	ldr	r3, [r1, #0]
   2575c:	9300      	str	r3, [sp, #0]
    key32[1] = irk32[1];
   2575e:	684b      	ldr	r3, [r1, #4]
   25760:	9301      	str	r3, [sp, #4]
    key32[2] = irk32[2];
   25762:	688b      	ldr	r3, [r1, #8]
   25764:	9302      	str	r3, [sp, #8]
    key32[3] = irk32[3];
   25766:	68cb      	ldr	r3, [r1, #12]
   25768:	9303      	str	r3, [sp, #12]

    pt32 = (uint32_t *)&ecb.plain_text[0];
    pt32[0] = 0;
   2576a:	2300      	movs	r3, #0
   2576c:	9304      	str	r3, [sp, #16]
    pt32[1] = 0;
   2576e:	9305      	str	r3, [sp, #20]
    pt32[2] = 0;
   25770:	9306      	str	r3, [sp, #24]
    pt32[3] = 0;
   25772:	9307      	str	r3, [sp, #28]

    ecb.plain_text[15] = rpa[3];
   25774:	78c3      	ldrb	r3, [r0, #3]
   25776:	f88d 301f 	strb.w	r3, [sp, #31]
    ecb.plain_text[14] = rpa[4];
   2577a:	7903      	ldrb	r3, [r0, #4]
   2577c:	f88d 301e 	strb.w	r3, [sp, #30]
    ecb.plain_text[13] = rpa[5];
   25780:	7943      	ldrb	r3, [r0, #5]
   25782:	f88d 301d 	strb.w	r3, [sp, #29]

    ble_hw_encrypt_block(&ecb);
   25786:	4668      	mov	r0, sp
   25788:	f002 f998 	bl	27abc <ble_hw_encrypt_block>
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   2578c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   25790:	7823      	ldrb	r3, [r4, #0]
   25792:	429a      	cmp	r2, r3
   25794:	d002      	beq.n	2579c <ble_ll_resolv_rpa+0x48>
        (ecb.cipher_text[13] == rpa[2])) {
        rc = 1;
    } else {
        rc = 0;
   25796:	2000      	movs	r0, #0
    }

    return rc;
}
   25798:	b00c      	add	sp, #48	; 0x30
   2579a:	bd10      	pop	{r4, pc}
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   2579c:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
   257a0:	7863      	ldrb	r3, [r4, #1]
   257a2:	429a      	cmp	r2, r3
   257a4:	d001      	beq.n	257aa <ble_ll_resolv_rpa+0x56>
        rc = 0;
   257a6:	2000      	movs	r0, #0
   257a8:	e7f6      	b.n	25798 <ble_ll_resolv_rpa+0x44>
        (ecb.cipher_text[13] == rpa[2])) {
   257aa:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
   257ae:	78a3      	ldrb	r3, [r4, #2]
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   257b0:	429a      	cmp	r2, r3
   257b2:	d001      	beq.n	257b8 <ble_ll_resolv_rpa+0x64>
        rc = 0;
   257b4:	2000      	movs	r0, #0
   257b6:	e7ef      	b.n	25798 <ble_ll_resolv_rpa+0x44>
        rc = 1;
   257b8:	2001      	movs	r0, #1
    return rc;
   257ba:	e7ed      	b.n	25798 <ble_ll_resolv_rpa+0x44>

000257bc <ble_ll_resolv_enabled>:
 */
uint8_t
ble_ll_resolv_enabled(void)
{
    return g_ble_ll_resolv_data.addr_res_enabled;
}
   257bc:	4b01      	ldr	r3, [pc, #4]	; (257c4 <ble_ll_resolv_enabled+0x8>)
   257be:	7818      	ldrb	r0, [r3, #0]
   257c0:	4770      	bx	lr
   257c2:	bf00      	nop
   257c4:	20004234 	.word	0x20004234

000257c8 <ble_ll_resolv_set_rpa_tmo>:
{
   257c8:	b510      	push	{r4, lr}
    tmo_secs = get_le16(cmdbuf);
   257ca:	f7f9 f9cb 	bl	1eb64 <get_le16>
    if (!((tmo_secs > 0) && (tmo_secs <= 0xA1B8))) {
   257ce:	1e43      	subs	r3, r0, #1
   257d0:	b29b      	uxth	r3, r3
   257d2:	f24a 12b7 	movw	r2, #41399	; 0xa1b7
   257d6:	4293      	cmp	r3, r2
   257d8:	d818      	bhi.n	2580c <ble_ll_resolv_set_rpa_tmo+0x44>
    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(tmo_secs * 1000);
   257da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   257de:	fb01 f100 	mul.w	r1, r1, r0
   257e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   257e6:	2300      	movs	r3, #0
   257e8:	01c8      	lsls	r0, r1, #7
   257ea:	0e49      	lsrs	r1, r1, #25
   257ec:	f004 f8e2 	bl	299b4 <__aeabi_uldivmod>
   257f0:	4604      	mov	r4, r0
   257f2:	4b07      	ldr	r3, [pc, #28]	; (25810 <ble_ll_resolv_set_rpa_tmo+0x48>)
   257f4:	6058      	str	r0, [r3, #4]
    if (!ble_ll_resolv_enabled()) {
   257f6:	f7ff ffe1 	bl	257bc <ble_ll_resolv_enabled>
   257fa:	b908      	cbnz	r0, 25800 <ble_ll_resolv_set_rpa_tmo+0x38>
        return BLE_ERR_SUCCESS;
   257fc:	2000      	movs	r0, #0
}
   257fe:	bd10      	pop	{r4, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   25800:	4621      	mov	r1, r4
   25802:	4804      	ldr	r0, [pc, #16]	; (25814 <ble_ll_resolv_set_rpa_tmo+0x4c>)
   25804:	f7eb f890 	bl	10928 <os_callout_reset>
    return BLE_ERR_SUCCESS;
   25808:	2000      	movs	r0, #0
   2580a:	e7f8      	b.n	257fe <ble_ll_resolv_set_rpa_tmo+0x36>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2580c:	2012      	movs	r0, #18
   2580e:	e7f6      	b.n	257fe <ble_ll_resolv_set_rpa_tmo+0x36>
   25810:	20004234 	.word	0x20004234
   25814:	2000423c 	.word	0x2000423c

00025818 <ble_ll_resolv_init>:
    ble_ll_resolv_init();
}

void
ble_ll_resolv_init(void)
{
   25818:	b510      	push	{r4, lr}
    uint8_t hw_size;

    /* Default is 15 minutes */
    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(15 * 60 * 1000);
   2581a:	4b09      	ldr	r3, [pc, #36]	; (25840 <ble_ll_resolv_init+0x28>)
   2581c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   25820:	605a      	str	r2, [r3, #4]

    hw_size = ble_hw_resolv_list_size();
   25822:	f002 f9f5 	bl	27c10 <ble_hw_resolv_list_size>
    if (hw_size > MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE)) {
   25826:	2804      	cmp	r0, #4
   25828:	d900      	bls.n	2582c <ble_ll_resolv_init+0x14>
        hw_size = MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE);
   2582a:	2004      	movs	r0, #4
    }
    g_ble_ll_resolv_data.rl_size = hw_size;
   2582c:	4c04      	ldr	r4, [pc, #16]	; (25840 <ble_ll_resolv_init+0x28>)
   2582e:	7060      	strb	r0, [r4, #1]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   25830:	2300      	movs	r3, #0
   25832:	4a04      	ldr	r2, [pc, #16]	; (25844 <ble_ll_resolv_init+0x2c>)
   25834:	4904      	ldr	r1, [pc, #16]	; (25848 <ble_ll_resolv_init+0x30>)
   25836:	f104 0008 	add.w	r0, r4, #8
   2583a:	f7eb f849 	bl	108d0 <os_callout_init>

    ble_npl_callout_init(&g_ble_ll_resolv_data.rpa_timer,
                         &g_ble_ll_data.ll_evq,
                         ble_ll_resolv_rpa_timer_cb,
                         NULL);
}
   2583e:	bd10      	pop	{r4, pc}
   25840:	20004234 	.word	0x20004234
   25844:	000253a1 	.word	0x000253a1
   25848:	20003e4c 	.word	0x20003e4c

0002584c <ble_ll_resolv_list_reset>:
{
   2584c:	b508      	push	{r3, lr}
    g_ble_ll_resolv_data.addr_res_enabled = 0;
   2584e:	4805      	ldr	r0, [pc, #20]	; (25864 <ble_ll_resolv_list_reset+0x18>)
   25850:	2300      	movs	r3, #0
   25852:	f800 3b08 	strb.w	r3, [r0], #8
    os_callout_stop(&co->co);
   25856:	f7eb f849 	bl	108ec <os_callout_stop>
    ble_ll_resolv_list_clr();
   2585a:	f7ff fdd7 	bl	2540c <ble_ll_resolv_list_clr>
    ble_ll_resolv_init();
   2585e:	f7ff ffdb 	bl	25818 <ble_ll_resolv_init>
}
   25862:	bd08      	pop	{r3, pc}
   25864:	20004234 	.word	0x20004234

00025868 <ble_ll_get_chan_to_scan>:
}

static void
ble_ll_get_chan_to_scan(struct ble_ll_scan_sm *scansm, uint8_t *chan,
                        int *phy)
{
   25868:	b470      	push	{r4, r5, r6}
    struct ble_ll_scan_params *scanphy = &scansm->phy_data[scansm->cur_phy];
   2586a:	f890 5068 	ldrb.w	r5, [r0, #104]	; 0x68
    }

    *chan = aux_data->chan;
    *phy = aux_data->aux_phy;
#else
    *chan = scanphy->scan_chan;
   2586e:	00ab      	lsls	r3, r5, #2
   25870:	195e      	adds	r6, r3, r5
   25872:	00b4      	lsls	r4, r6, #2
   25874:	4626      	mov	r6, r4
   25876:	4404      	add	r4, r0
   25878:	f894 4075 	ldrb.w	r4, [r4, #117]	; 0x75
   2587c:	700c      	strb	r4, [r1, #0]
    *phy = scanphy->phy;
   2587e:	4430      	add	r0, r6
   25880:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
   25884:	6013      	str	r3, [r2, #0]
#endif
}
   25886:	bc70      	pop	{r4, r5, r6}
   25888:	4770      	bx	lr

0002588a <ble_ll_scan_get_next_adv_prim_chan>:
#endif

static uint8_t
ble_ll_scan_get_next_adv_prim_chan(uint8_t chan)
{
    ++chan;
   2588a:	3001      	adds	r0, #1
   2588c:	b2c0      	uxtb	r0, r0
    if (chan == BLE_PHY_NUM_CHANS) {
   2588e:	2828      	cmp	r0, #40	; 0x28
   25890:	d000      	beq.n	25894 <ble_ll_scan_get_next_adv_prim_chan+0xa>
        chan = BLE_PHY_ADV_CHAN_START;
    }

    return chan;
}
   25892:	4770      	bx	lr
        chan = BLE_PHY_ADV_CHAN_START;
   25894:	2025      	movs	r0, #37	; 0x25
   25896:	e7fc      	b.n	25892 <ble_ll_scan_get_next_adv_prim_chan+0x8>

00025898 <ble_ll_scan_rfclk_chk_stop>:
{
   25898:	b530      	push	{r4, r5, lr}
   2589a:	b083      	sub	sp, #12
    OS_ENTER_CRITICAL(sr);
   2589c:	f7ea fdd4 	bl	10448 <os_arch_save_sr>
   258a0:	4604      	mov	r4, r0
    if (ble_ll_sched_next_time(&next_time)) {
   258a2:	a801      	add	r0, sp, #4
   258a4:	f001 fdde 	bl	27464 <ble_ll_sched_next_time>
   258a8:	b138      	cbz	r0, 258ba <ble_ll_scan_rfclk_chk_stop+0x22>
        time_till_next = (int32_t)(next_time - os_cputime_get32());
   258aa:	9d01      	ldr	r5, [sp, #4]
   258ac:	f7eb f8e4 	bl	10a78 <os_cputime_get32>
   258b0:	1a28      	subs	r0, r5, r0
        if (time_till_next > g_ble_ll_data.ll_xtal_ticks) {
   258b2:	4b05      	ldr	r3, [pc, #20]	; (258c8 <ble_ll_scan_rfclk_chk_stop+0x30>)
   258b4:	899b      	ldrh	r3, [r3, #12]
   258b6:	4283      	cmp	r3, r0
   258b8:	da01      	bge.n	258be <ble_ll_scan_rfclk_chk_stop+0x26>
        ble_ll_xcvr_rfclk_disable();
   258ba:	f001 ffb5 	bl	27828 <ble_ll_xcvr_rfclk_disable>
    OS_EXIT_CRITICAL(sr);
   258be:	4620      	mov	r0, r4
   258c0:	f7ea fdc8 	bl	10454 <os_arch_restore_sr>
}
   258c4:	b003      	add	sp, #12
   258c6:	bd30      	pop	{r4, r5, pc}
   258c8:	20003e20 	.word	0x20003e20

000258cc <ble_ll_scan_req_backoff>:
{
   258cc:	b510      	push	{r4, lr}
   258ce:	4604      	mov	r4, r0
    scansm->scan_rsp_pending = 0;
   258d0:	2300      	movs	r3, #0
   258d2:	70c3      	strb	r3, [r0, #3]
    if (success) {
   258d4:	b1e1      	cbz	r1, 25910 <ble_ll_scan_req_backoff+0x44>
        scansm->scan_rsp_cons_fails = 0;
   258d6:	7103      	strb	r3, [r0, #4]
        ++scansm->scan_rsp_cons_ok;
   258d8:	7943      	ldrb	r3, [r0, #5]
   258da:	3301      	adds	r3, #1
   258dc:	b2db      	uxtb	r3, r3
   258de:	7143      	strb	r3, [r0, #5]
        if (scansm->scan_rsp_cons_ok == 2) {
   258e0:	2b02      	cmp	r3, #2
   258e2:	d00d      	beq.n	25900 <ble_ll_scan_req_backoff+0x34>
   258e4:	f7ec fcf2 	bl	122cc <lrand48>
    scansm->backoff_count = rand() & (scansm->upper_limit - 1);
   258e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   258ea:	3b01      	subs	r3, #1
   258ec:	b21b      	sxth	r3, r3
   258ee:	4018      	ands	r0, r3
   258f0:	b280      	uxth	r0, r0
    ++scansm->backoff_count;
   258f2:	3001      	adds	r0, #1
   258f4:	b280      	uxth	r0, r0
   258f6:	8560      	strh	r0, [r4, #42]	; 0x2a
    BLE_LL_ASSERT(scansm->backoff_count <= 256);
   258f8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   258fc:	d818      	bhi.n	25930 <ble_ll_scan_req_backoff+0x64>
}
   258fe:	bd10      	pop	{r4, pc}
            scansm->scan_rsp_cons_ok = 0;
   25900:	2300      	movs	r3, #0
   25902:	7143      	strb	r3, [r0, #5]
            if (scansm->upper_limit > 1) {
   25904:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   25906:	2b01      	cmp	r3, #1
   25908:	d9ec      	bls.n	258e4 <ble_ll_scan_req_backoff+0x18>
                scansm->upper_limit >>= 1;
   2590a:	085b      	lsrs	r3, r3, #1
   2590c:	8503      	strh	r3, [r0, #40]	; 0x28
   2590e:	e7e9      	b.n	258e4 <ble_ll_scan_req_backoff+0x18>
        scansm->scan_rsp_cons_ok = 0;
   25910:	2300      	movs	r3, #0
   25912:	7143      	strb	r3, [r0, #5]
        ++scansm->scan_rsp_cons_fails;
   25914:	7903      	ldrb	r3, [r0, #4]
   25916:	3301      	adds	r3, #1
   25918:	b2db      	uxtb	r3, r3
   2591a:	7103      	strb	r3, [r0, #4]
        if (scansm->scan_rsp_cons_fails == 2) {
   2591c:	2b02      	cmp	r3, #2
   2591e:	d1e1      	bne.n	258e4 <ble_ll_scan_req_backoff+0x18>
            scansm->scan_rsp_cons_fails = 0;
   25920:	2300      	movs	r3, #0
   25922:	7103      	strb	r3, [r0, #4]
            if (scansm->upper_limit < 256) {
   25924:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   25926:	2bff      	cmp	r3, #255	; 0xff
   25928:	d8dc      	bhi.n	258e4 <ble_ll_scan_req_backoff+0x18>
                scansm->upper_limit <<= 1;
   2592a:	005b      	lsls	r3, r3, #1
   2592c:	8503      	strh	r3, [r0, #40]	; 0x28
   2592e:	e7d9      	b.n	258e4 <ble_ll_scan_req_backoff+0x18>
    BLE_LL_ASSERT(scansm->backoff_count <= 256);
   25930:	2300      	movs	r3, #0
   25932:	461a      	mov	r2, r3
   25934:	4619      	mov	r1, r3
   25936:	4618      	mov	r0, r3
   25938:	f7ea fe50 	bl	105dc <__assert_func>

0002593c <ble_ll_scan_req_tx_pducb>:
{
   2593c:	b410      	push	{r4}
    memcpy(dptr, pdu_data->scana, BLE_DEV_ADDR_LEN);
   2593e:	460b      	mov	r3, r1
   25940:	f853 4f1b 	ldr.w	r4, [r3, #27]!
   25944:	6004      	str	r4, [r0, #0]
   25946:	889b      	ldrh	r3, [r3, #4]
   25948:	8083      	strh	r3, [r0, #4]
    memcpy(dptr + BLE_DEV_ADDR_LEN, pdu_data->adva, BLE_DEV_ADDR_LEN);
   2594a:	460b      	mov	r3, r1
   2594c:	f853 4f21 	ldr.w	r4, [r3, #33]!
   25950:	f8c0 4006 	str.w	r4, [r0, #6]
   25954:	889b      	ldrh	r3, [r3, #4]
   25956:	8143      	strh	r3, [r0, #10]
    *hdr_byte = pdu_data->hdr_byte;
   25958:	7e8b      	ldrb	r3, [r1, #26]
   2595a:	7013      	strb	r3, [r2, #0]
}
   2595c:	200c      	movs	r0, #12
   2595e:	f85d 4b04 	ldr.w	r4, [sp], #4
   25962:	4770      	bx	lr

00025964 <ble_ll_scan_have_rxd_scan_rsp>:
{
   25964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25968:	4606      	mov	r6, r0
   2596a:	460f      	mov	r7, r1
   2596c:	4690      	mov	r8, r2
   2596e:	4699      	mov	r9, r3
    num_advs = g_ble_ll_scan_num_rsp_advs;
   25970:	4b17      	ldr	r3, [pc, #92]	; (259d0 <ble_ll_scan_have_rxd_scan_rsp+0x6c>)
   25972:	781c      	ldrb	r4, [r3, #0]
    adv = &g_ble_ll_scan_rsp_advs[0];
   25974:	4d17      	ldr	r5, [pc, #92]	; (259d4 <ble_ll_scan_have_rxd_scan_rsp+0x70>)
    while (num_advs) {
   25976:	e00c      	b.n	25992 <ble_ll_scan_have_rxd_scan_rsp+0x2e>
                if ((adv->sc_adv_flags & BLE_LL_SC_ADV_F_RANDOM_ADDR) == 0) {
   25978:	882b      	ldrh	r3, [r5, #0]
   2597a:	f013 0f01 	tst.w	r3, #1
   2597e:	d105      	bne.n	2598c <ble_ll_scan_have_rxd_scan_rsp+0x28>
                    if (ext_adv) {
   25980:	f1b8 0f00 	cmp.w	r8, #0
   25984:	d020      	beq.n	259c8 <ble_ll_scan_have_rxd_scan_rsp+0x64>
                        if (adi == adv->adi) {
   25986:	886b      	ldrh	r3, [r5, #2]
   25988:	454b      	cmp	r3, r9
   2598a:	d01f      	beq.n	259cc <ble_ll_scan_have_rxd_scan_rsp+0x68>
        ++adv;
   2598c:	350a      	adds	r5, #10
        --num_advs;
   2598e:	3c01      	subs	r4, #1
   25990:	b2e4      	uxtb	r4, r4
    while (num_advs) {
   25992:	b1a4      	cbz	r4, 259be <ble_ll_scan_have_rxd_scan_rsp+0x5a>
        if (!memcmp(&adv->adv_addr, addr, BLE_DEV_ADDR_LEN)) {
   25994:	2206      	movs	r2, #6
   25996:	4631      	mov	r1, r6
   25998:	1d28      	adds	r0, r5, #4
   2599a:	f7ec fd6f 	bl	1247c <memcmp>
   2599e:	2800      	cmp	r0, #0
   259a0:	d1f4      	bne.n	2598c <ble_ll_scan_have_rxd_scan_rsp+0x28>
            if (txadd) {
   259a2:	2f00      	cmp	r7, #0
   259a4:	d0e8      	beq.n	25978 <ble_ll_scan_have_rxd_scan_rsp+0x14>
                if (adv->sc_adv_flags & BLE_LL_SC_ADV_F_RANDOM_ADDR) {
   259a6:	882b      	ldrh	r3, [r5, #0]
   259a8:	f013 0f01 	tst.w	r3, #1
   259ac:	d0ee      	beq.n	2598c <ble_ll_scan_have_rxd_scan_rsp+0x28>
                    if (ext_adv) {
   259ae:	f1b8 0f00 	cmp.w	r8, #0
   259b2:	d007      	beq.n	259c4 <ble_ll_scan_have_rxd_scan_rsp+0x60>
                        if (adi == adv->adi) {
   259b4:	886b      	ldrh	r3, [r5, #2]
   259b6:	454b      	cmp	r3, r9
   259b8:	d1e8      	bne.n	2598c <ble_ll_scan_have_rxd_scan_rsp+0x28>
                            return 1;
   259ba:	2001      	movs	r0, #1
   259bc:	e000      	b.n	259c0 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
    return 0;
   259be:	2000      	movs	r0, #0
}
   259c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    return 1;
   259c4:	2001      	movs	r0, #1
   259c6:	e7fb      	b.n	259c0 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
                    return 1;
   259c8:	2001      	movs	r0, #1
   259ca:	e7f9      	b.n	259c0 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
                            return 1;
   259cc:	2001      	movs	r0, #1
   259ce:	e7f7      	b.n	259c0 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
   259d0:	20003668 	.word	0x20003668
   259d4:	2000425c 	.word	0x2000425c

000259d8 <ble_ll_scan_add_scan_rsp_adv>:
{
   259d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    num_advs = g_ble_ll_scan_num_rsp_advs;
   259da:	4c12      	ldr	r4, [pc, #72]	; (25a24 <ble_ll_scan_add_scan_rsp_adv+0x4c>)
   259dc:	7824      	ldrb	r4, [r4, #0]
    if (num_advs == MYNEWT_VAL(BLE_LL_NUM_SCAN_RSP_ADVS)) {
   259de:	2c08      	cmp	r4, #8
   259e0:	d01e      	beq.n	25a20 <ble_ll_scan_add_scan_rsp_adv+0x48>
   259e2:	461e      	mov	r6, r3
   259e4:	460f      	mov	r7, r1
   259e6:	4605      	mov	r5, r0
    if (ble_ll_scan_have_rxd_scan_rsp(addr, txadd, ext_adv, adi)) {
   259e8:	f7ff ffbc 	bl	25964 <ble_ll_scan_have_rxd_scan_rsp>
   259ec:	b9c0      	cbnz	r0, 25a20 <ble_ll_scan_add_scan_rsp_adv+0x48>
    memcpy(&adv->adv_addr, addr, BLE_DEV_ADDR_LEN);
   259ee:	230a      	movs	r3, #10
   259f0:	fb03 f304 	mul.w	r3, r3, r4
   259f4:	4a0c      	ldr	r2, [pc, #48]	; (25a28 <ble_ll_scan_add_scan_rsp_adv+0x50>)
   259f6:	1899      	adds	r1, r3, r2
   259f8:	6828      	ldr	r0, [r5, #0]
   259fa:	6048      	str	r0, [r1, #4]
   259fc:	88a8      	ldrh	r0, [r5, #4]
   259fe:	8108      	strh	r0, [r1, #8]
    adv->sc_adv_flags = BLE_LL_SC_ADV_F_SCAN_RSP_RXD;
   25a00:	2102      	movs	r1, #2
   25a02:	5299      	strh	r1, [r3, r2]
    if (txadd) {
   25a04:	b127      	cbz	r7, 25a10 <ble_ll_scan_add_scan_rsp_adv+0x38>
        adv->sc_adv_flags |= BLE_LL_SC_ADV_F_RANDOM_ADDR;
   25a06:	230a      	movs	r3, #10
   25a08:	fb03 f304 	mul.w	r3, r3, r4
   25a0c:	2103      	movs	r1, #3
   25a0e:	52d1      	strh	r1, [r2, r3]
    adv->adi = adi;
   25a10:	4a05      	ldr	r2, [pc, #20]	; (25a28 <ble_ll_scan_add_scan_rsp_adv+0x50>)
   25a12:	230a      	movs	r3, #10
   25a14:	fb03 2304 	mla	r3, r3, r4, r2
   25a18:	805e      	strh	r6, [r3, #2]
    ++g_ble_ll_scan_num_rsp_advs;
   25a1a:	3401      	adds	r4, #1
   25a1c:	4b01      	ldr	r3, [pc, #4]	; (25a24 <ble_ll_scan_add_scan_rsp_adv+0x4c>)
   25a1e:	701c      	strb	r4, [r3, #0]
}
   25a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25a22:	bf00      	nop
   25a24:	20003668 	.word	0x20003668
   25a28:	2000425c 	.word	0x2000425c

00025a2c <ble_ll_scan_dup_update_legacy>:
}

static int
ble_ll_scan_dup_update_legacy(uint8_t addr_type, uint8_t *addr, uint8_t subev,
                              uint8_t evtype)
{
   25a2c:	b570      	push	{r4, r5, r6, lr}
   25a2e:	461e      	mov	r6, r3
    /*
     * We assume ble_ll_scan_dup_check() was called before which either matched
     * some entry or allocated new one and placed in on the top of queue.
     */

    e = TAILQ_FIRST(&g_scan_dup_list);
   25a30:	4b13      	ldr	r3, [pc, #76]	; (25a80 <ble_ll_scan_dup_update_legacy+0x54>)
   25a32:	681c      	ldr	r4, [r3, #0]
    BLE_LL_ASSERT(e && e->type == type && !memcmp(e->addr, addr, 6));
   25a34:	b1a4      	cbz	r4, 25a60 <ble_ll_scan_dup_update_legacy+0x34>
   25a36:	4615      	mov	r5, r2
   25a38:	f000 0001 	and.w	r0, r0, #1
   25a3c:	7823      	ldrb	r3, [r4, #0]
   25a3e:	4283      	cmp	r3, r0
   25a40:	d10e      	bne.n	25a60 <ble_ll_scan_dup_update_legacy+0x34>
   25a42:	2206      	movs	r2, #6
   25a44:	1c60      	adds	r0, r4, #1
   25a46:	f7ec fd19 	bl	1247c <memcmp>
   25a4a:	b948      	cbnz	r0, 25a60 <ble_ll_scan_dup_update_legacy+0x34>

    if (subev == BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT) {
   25a4c:	2d0b      	cmp	r5, #11
   25a4e:	d00d      	beq.n	25a6c <ble_ll_scan_dup_update_legacy+0x40>
        e->flags |= BLE_LL_SCAN_DUP_F_DIR_ADV_REPORT_SENT;
    } else {
        if (evtype == BLE_HCI_ADV_RPT_EVTYPE_SCAN_RSP) {
   25a50:	2e04      	cmp	r6, #4
   25a52:	d010      	beq.n	25a76 <ble_ll_scan_dup_update_legacy+0x4a>
            e->flags |= BLE_LL_SCAN_DUP_F_SCAN_RSP_SENT;
        } else {
            e->flags |= BLE_LL_SCAN_DUP_F_ADV_REPORT_SENT;
   25a54:	79e3      	ldrb	r3, [r4, #7]
   25a56:	f043 0301 	orr.w	r3, r3, #1
   25a5a:	71e3      	strb	r3, [r4, #7]
        }
    }

    return 0;
}
   25a5c:	2000      	movs	r0, #0
   25a5e:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(e && e->type == type && !memcmp(e->addr, addr, 6));
   25a60:	2300      	movs	r3, #0
   25a62:	461a      	mov	r2, r3
   25a64:	4619      	mov	r1, r3
   25a66:	4618      	mov	r0, r3
   25a68:	f7ea fdb8 	bl	105dc <__assert_func>
        e->flags |= BLE_LL_SCAN_DUP_F_DIR_ADV_REPORT_SENT;
   25a6c:	79e3      	ldrb	r3, [r4, #7]
   25a6e:	f043 0302 	orr.w	r3, r3, #2
   25a72:	71e3      	strb	r3, [r4, #7]
   25a74:	e7f2      	b.n	25a5c <ble_ll_scan_dup_update_legacy+0x30>
            e->flags |= BLE_LL_SCAN_DUP_F_SCAN_RSP_SENT;
   25a76:	79e3      	ldrb	r3, [r4, #7]
   25a78:	f043 0304 	orr.w	r3, r3, #4
   25a7c:	71e3      	strb	r3, [r4, #7]
   25a7e:	e7ed      	b.n	25a5c <ble_ll_scan_dup_update_legacy+0x30>
   25a80:	20003704 	.word	0x20003704

00025a84 <ble_ll_scan_refresh_nrpa>:
{
   25a84:	b538      	push	{r3, r4, r5, lr}
   25a86:	4604      	mov	r4, r0
    return os_time_get();
   25a88:	f7ec fb58 	bl	1213c <os_time_get>
    if ((ble_npl_stime_t)(now - scansm->scan_nrpa_timer) >= 0) {
   25a8c:	6923      	ldr	r3, [r4, #16]
   25a8e:	1ac3      	subs	r3, r0, r3
   25a90:	2b00      	cmp	r3, #0
   25a92:	db0d      	blt.n	25ab0 <ble_ll_scan_refresh_nrpa+0x2c>
   25a94:	4605      	mov	r5, r0
        ble_ll_rand_data_get(scansm->scan_nrpa, BLE_DEV_ADDR_LEN);
   25a96:	2106      	movs	r1, #6
   25a98:	f104 0014 	add.w	r0, r4, #20
   25a9c:	f7ff fb8e 	bl	251bc <ble_ll_rand_data_get>
        scansm->scan_nrpa[5] &= ~0xc0;
   25aa0:	7e63      	ldrb	r3, [r4, #25]
   25aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   25aa6:	7663      	strb	r3, [r4, #25]
        scansm->scan_nrpa_timer = now + ble_ll_resolv_get_rpa_tmo();
   25aa8:	f7ff fde2 	bl	25670 <ble_ll_resolv_get_rpa_tmo>
   25aac:	4428      	add	r0, r5
   25aae:	6120      	str	r0, [r4, #16]
}
   25ab0:	bd38      	pop	{r3, r4, r5, pc}
	...

00025ab4 <ble_ll_scan_req_pdu_prepare>:
{
   25ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ab6:	b083      	sub	sp, #12
   25ab8:	4604      	mov	r4, r0
   25aba:	460e      	mov	r6, r1
    if (adv_addr_type) {
   25abc:	4617      	mov	r7, r2
   25abe:	b9ea      	cbnz	r2, 25afc <ble_ll_scan_req_pdu_prepare+0x48>
    hdr_byte = BLE_ADV_PDU_TYPE_SCAN_REQ;
   25ac0:	2503      	movs	r5, #3
    if ((scansm->own_addr_type & 1) == 0) {
   25ac2:	7862      	ldrb	r2, [r4, #1]
   25ac4:	f012 0f01 	tst.w	r2, #1
   25ac8:	d01a      	beq.n	25b00 <ble_ll_scan_req_pdu_prepare+0x4c>
        hdr_byte |= BLE_ADV_PDU_HDR_TXADD_RAND;
   25aca:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        scana = g_random_addr;
   25ace:	4b1c      	ldr	r3, [pc, #112]	; (25b40 <ble_ll_scan_req_pdu_prepare+0x8c>)
    if (scansm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   25ad0:	2a01      	cmp	r2, #1
   25ad2:	d921      	bls.n	25b18 <ble_ll_scan_req_pdu_prepare+0x64>
        if (ble_ll_is_rpa(adv_addr, adv_addr_type)) {
   25ad4:	4639      	mov	r1, r7
   25ad6:	4630      	mov	r0, r6
   25ad8:	f7f9 faee 	bl	1f0b8 <ble_ll_is_rpa>
   25adc:	b190      	cbz	r0, 25b04 <ble_ll_scan_req_pdu_prepare+0x50>
            if (scansm->scan_rpa_index >= 0) {
   25ade:	f994 3006 	ldrsb.w	r3, [r4, #6]
   25ae2:	2b00      	cmp	r3, #0
   25ae4:	db11      	blt.n	25b0a <ble_ll_scan_req_pdu_prepare+0x56>
                rl = &g_ble_ll_resolv_list[scansm->scan_rpa_index];
   25ae6:	2235      	movs	r2, #53	; 0x35
   25ae8:	4816      	ldr	r0, [pc, #88]	; (25b44 <ble_ll_scan_req_pdu_prepare+0x90>)
   25aea:	fb02 0003 	mla	r0, r2, r3, r0
        if (rl) {
   25aee:	b160      	cbz	r0, 25b0a <ble_ll_scan_req_pdu_prepare+0x56>
            ble_ll_resolv_get_priv_addr(rl, 1, rpa);
   25af0:	466a      	mov	r2, sp
   25af2:	2101      	movs	r1, #1
   25af4:	f7ff fdc2 	bl	2567c <ble_ll_resolv_get_priv_addr>
            scana = rpa;
   25af8:	466b      	mov	r3, sp
   25afa:	e00b      	b.n	25b14 <ble_ll_scan_req_pdu_prepare+0x60>
        hdr_byte |= BLE_ADV_PDU_HDR_RXADD_RAND;
   25afc:	2583      	movs	r5, #131	; 0x83
   25afe:	e7e0      	b.n	25ac2 <ble_ll_scan_req_pdu_prepare+0xe>
        scana = g_dev_addr;
   25b00:	4b11      	ldr	r3, [pc, #68]	; (25b48 <ble_ll_scan_req_pdu_prepare+0x94>)
   25b02:	e7e5      	b.n	25ad0 <ble_ll_scan_req_pdu_prepare+0x1c>
            if (ble_ll_resolv_enabled()) {
   25b04:	f7ff fe5a 	bl	257bc <ble_ll_resolv_enabled>
   25b08:	b9a8      	cbnz	r0, 25b36 <ble_ll_scan_req_pdu_prepare+0x82>
            ble_ll_scan_refresh_nrpa(scansm);
   25b0a:	4620      	mov	r0, r4
   25b0c:	f7ff ffba 	bl	25a84 <ble_ll_scan_refresh_nrpa>
            scana = scansm->scan_nrpa;
   25b10:	f104 0314 	add.w	r3, r4, #20
        hdr_byte |= BLE_ADV_PDU_HDR_TXADD_RAND;
   25b14:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    pdu_data->hdr_byte = hdr_byte;
   25b18:	76a5      	strb	r5, [r4, #26]
    memcpy(pdu_data->scana, scana, BLE_DEV_ADDR_LEN);
   25b1a:	681a      	ldr	r2, [r3, #0]
   25b1c:	f8c4 201b 	str.w	r2, [r4, #27]
   25b20:	889b      	ldrh	r3, [r3, #4]
   25b22:	f8a4 301f 	strh.w	r3, [r4, #31]
    memcpy(pdu_data->adva, adv_addr, BLE_DEV_ADDR_LEN);
   25b26:	6833      	ldr	r3, [r6, #0]
   25b28:	f8c4 3021 	str.w	r3, [r4, #33]	; 0x21
   25b2c:	88b3      	ldrh	r3, [r6, #4]
   25b2e:	f8a4 3025 	strh.w	r3, [r4, #37]	; 0x25
}
   25b32:	b003      	add	sp, #12
   25b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
                rl = ble_ll_resolv_list_find(adv_addr, adv_addr_type);
   25b36:	4639      	mov	r1, r7
   25b38:	4630      	mov	r0, r6
   25b3a:	f7ff fc81 	bl	25440 <ble_ll_resolv_list_find>
   25b3e:	e7d6      	b.n	25aee <ble_ll_scan_req_pdu_prepare+0x3a>
   25b40:	20003dc0 	.word	0x20003dc0
   25b44:	20004160 	.word	0x20004160
   25b48:	20003dc8 	.word	0x20003dc8

00025b4c <ble_ll_scan_timer_cb>:
{
   25b4c:	b508      	push	{r3, lr}
    ble_ll_event_send(&scansm->scan_sched_ev);
   25b4e:	3030      	adds	r0, #48	; 0x30
   25b50:	f7f9 fc56 	bl	1f400 <ble_ll_event_send>
}
   25b54:	bd08      	pop	{r3, pc}

00025b56 <ble_ll_scan_get_current_scan_win>:
{
   25b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b5a:	4606      	mov	r6, r0
   25b5c:	4688      	mov	r8, r1
    struct ble_ll_scan_params *scanphy = &scansm->phy_data[scansm->cur_phy];
   25b5e:	f890 5068 	ldrb.w	r5, [r0, #104]	; 0x68
    itvl = os_cputime_usecs_to_ticks(scanphy->scan_itvl * BLE_HCI_SCAN_ITVL);
   25b62:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   25b66:	0093      	lsls	r3, r2, #2
   25b68:	4403      	add	r3, r0
   25b6a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
   25b6e:	f240 2071 	movw	r0, #625	; 0x271
   25b72:	fb00 f003 	mul.w	r0, r0, r3
   25b76:	f7ea ff85 	bl	10a84 <os_cputime_usecs_to_ticks>
   25b7a:	4607      	mov	r7, r0
    while ((int32_t)(cputime - scanphy->scan_win_start_time) >= itvl) {
   25b7c:	e00b      	b.n	25b96 <ble_ll_scan_get_current_scan_win+0x40>
        scanphy->scan_win_start_time += itvl;
   25b7e:	00ab      	lsls	r3, r5, #2
   25b80:	442b      	add	r3, r5
   25b82:	009c      	lsls	r4, r3, #2
   25b84:	4434      	add	r4, r6
   25b86:	4438      	add	r0, r7
   25b88:	67e0      	str	r0, [r4, #124]	; 0x7c
                ble_ll_scan_get_next_adv_prim_chan(scanphy->scan_chan);
   25b8a:	f894 0075 	ldrb.w	r0, [r4, #117]	; 0x75
   25b8e:	f7ff fe7c 	bl	2588a <ble_ll_scan_get_next_adv_prim_chan>
        scanphy->scan_chan =
   25b92:	f884 0075 	strb.w	r0, [r4, #117]	; 0x75
    while ((int32_t)(cputime - scanphy->scan_win_start_time) >= itvl) {
   25b96:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   25b9a:	0093      	lsls	r3, r2, #2
   25b9c:	4433      	add	r3, r6
   25b9e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   25ba0:	eba8 0300 	sub.w	r3, r8, r0
   25ba4:	42bb      	cmp	r3, r7
   25ba6:	d2ea      	bcs.n	25b7e <ble_ll_scan_get_current_scan_win+0x28>
}
   25ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025bac <ble_ll_scan_window_chk>:
{
   25bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25bae:	4605      	mov	r5, r0
   25bb0:	460e      	mov	r6, r1
    struct ble_ll_scan_params *scanphy = &scansm->phy_data[scansm->cur_phy];
   25bb2:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
    win_start = ble_ll_scan_get_current_scan_win(scansm, cputime);
   25bb6:	f7ff ffce 	bl	25b56 <ble_ll_scan_get_current_scan_win>
    if (scanphy->scan_window != scanphy->scan_itvl) {
   25bba:	00a2      	lsls	r2, r4, #2
   25bbc:	4422      	add	r2, r4
   25bbe:	0093      	lsls	r3, r2, #2
   25bc0:	442b      	add	r3, r5
   25bc2:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
   25bc6:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
   25bca:	429a      	cmp	r2, r3
   25bcc:	d01a      	beq.n	25c04 <ble_ll_scan_window_chk+0x58>
   25bce:	4607      	mov	r7, r0
        win = os_cputime_usecs_to_ticks(scanphy->scan_window * BLE_HCI_SCAN_ITVL);
   25bd0:	f240 2071 	movw	r0, #625	; 0x271
   25bd4:	fb00 f002 	mul.w	r0, r0, r2
   25bd8:	f7ea ff54 	bl	10a84 <os_cputime_usecs_to_ticks>
        dt = cputime - win_start;
   25bdc:	1bf6      	subs	r6, r6, r7
        if (dt >= win) {
   25bde:	42b0      	cmp	r0, r6
   25be0:	d812      	bhi.n	25c08 <ble_ll_scan_window_chk+0x5c>
            if (dt < (scanphy->scan_itvl - g_ble_ll_data.ll_xtal_ticks)) {
   25be2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   25be6:	00a3      	lsls	r3, r4, #2
   25be8:	441d      	add	r5, r3
   25bea:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   25bee:	4a07      	ldr	r2, [pc, #28]	; (25c0c <ble_ll_scan_window_chk+0x60>)
   25bf0:	8992      	ldrh	r2, [r2, #12]
   25bf2:	1a9b      	subs	r3, r3, r2
   25bf4:	42b3      	cmp	r3, r6
   25bf6:	d801      	bhi.n	25bfc <ble_ll_scan_window_chk+0x50>
            return 1;
   25bf8:	2001      	movs	r0, #1
   25bfa:	e004      	b.n	25c06 <ble_ll_scan_window_chk+0x5a>
                ble_ll_scan_rfclk_chk_stop();
   25bfc:	f7ff fe4c 	bl	25898 <ble_ll_scan_rfclk_chk_stop>
            return 1;
   25c00:	2001      	movs	r0, #1
   25c02:	e000      	b.n	25c06 <ble_ll_scan_window_chk+0x5a>
    return 0;
   25c04:	2000      	movs	r0, #0
}
   25c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
   25c08:	2000      	movs	r0, #0
   25c0a:	e7fc      	b.n	25c06 <ble_ll_scan_window_chk+0x5a>
   25c0c:	20003e20 	.word	0x20003e20

00025c10 <ble_ll_scan_start>:
{
   25c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   25c12:	b083      	sub	sp, #12
   25c14:	4606      	mov	r6, r0
   25c16:	460d      	mov	r5, r1
    struct ble_ll_scan_params *scanphy = &scansm->phy_data[scansm->cur_phy];
   25c18:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
    ble_ll_get_chan_to_scan(scansm, &scan_chan, &phy);
   25c1c:	466a      	mov	r2, sp
   25c1e:	f10d 0107 	add.w	r1, sp, #7
   25c22:	f7ff fe21 	bl	25868 <ble_ll_get_chan_to_scan>
    BLE_LL_ASSERT(!sch || scan_chan < BLE_PHY_ADV_CHAN_START);
   25c26:	b11d      	cbz	r5, 25c30 <ble_ll_scan_start+0x20>
   25c28:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25c2c:	2b24      	cmp	r3, #36	; 0x24
   25c2e:	d820      	bhi.n	25c72 <ble_ll_scan_start+0x62>
    BLE_LL_ASSERT(sch || scan_chan >= BLE_PHY_ADV_CHAN_START);
   25c30:	b32d      	cbz	r5, 25c7e <ble_ll_scan_start+0x6e>
    rc = ble_phy_setchan(scan_chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   25c32:	4a34      	ldr	r2, [pc, #208]	; (25d04 <ble_ll_scan_start+0xf4>)
   25c34:	4934      	ldr	r1, [pc, #208]	; (25d08 <ble_ll_scan_start+0xf8>)
   25c36:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25c3a:	f002 fb45 	bl	282c8 <ble_phy_setchan>
    BLE_LL_ASSERT(rc == 0);
   25c3e:	4607      	mov	r7, r0
   25c40:	bb38      	cbnz	r0, 25c92 <ble_ll_scan_start+0x82>
    ble_phy_set_txend_cb(NULL, NULL);
   25c42:	2100      	movs	r1, #0
   25c44:	4608      	mov	r0, r1
   25c46:	f002 fae5 	bl	28214 <ble_phy_set_txend_cb>
    ble_phy_encrypt_disable();
   25c4a:	f002 facd 	bl	281e8 <ble_phy_encrypt_disable>
    if (ble_ll_resolv_enabled()) {
   25c4e:	f7ff fdb5 	bl	257bc <ble_ll_resolv_enabled>
   25c52:	b320      	cbz	r0, 25c9e <ble_ll_scan_start+0x8e>
        ble_phy_resolv_list_enable();
   25c54:	f002 fe00 	bl	28858 <ble_phy_resolv_list_enable>
    if (sch) {
   25c58:	b325      	cbz	r5, 25ca4 <ble_ll_scan_start+0x94>
        rc = ble_phy_rx_set_start_time(sch->start_time +
   25c5a:	686b      	ldr	r3, [r5, #4]
   25c5c:	4a2b      	ldr	r2, [pc, #172]	; (25d0c <ble_ll_scan_start+0xfc>)
   25c5e:	7810      	ldrb	r0, [r2, #0]
   25c60:	78a9      	ldrb	r1, [r5, #2]
   25c62:	4418      	add	r0, r3
   25c64:	f002 fd1a 	bl	2869c <ble_phy_rx_set_start_time>
    if (!rc || rc == BLE_PHY_ERR_RX_LATE) {
   25c68:	b328      	cbz	r0, 25cb6 <ble_ll_scan_start+0xa6>
   25c6a:	2806      	cmp	r0, #6
   25c6c:	d023      	beq.n	25cb6 <ble_ll_scan_start+0xa6>
   25c6e:	4607      	mov	r7, r0
   25c70:	e037      	b.n	25ce2 <ble_ll_scan_start+0xd2>
    BLE_LL_ASSERT(!sch || scan_chan < BLE_PHY_ADV_CHAN_START);
   25c72:	2300      	movs	r3, #0
   25c74:	461a      	mov	r2, r3
   25c76:	4619      	mov	r1, r3
   25c78:	4618      	mov	r0, r3
   25c7a:	f7ea fcaf 	bl	105dc <__assert_func>
    BLE_LL_ASSERT(sch || scan_chan >= BLE_PHY_ADV_CHAN_START);
   25c7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25c82:	2b24      	cmp	r3, #36	; 0x24
   25c84:	d8d5      	bhi.n	25c32 <ble_ll_scan_start+0x22>
   25c86:	2300      	movs	r3, #0
   25c88:	461a      	mov	r2, r3
   25c8a:	4619      	mov	r1, r3
   25c8c:	4618      	mov	r0, r3
   25c8e:	f7ea fca5 	bl	105dc <__assert_func>
    BLE_LL_ASSERT(rc == 0);
   25c92:	2300      	movs	r3, #0
   25c94:	461a      	mov	r2, r3
   25c96:	4619      	mov	r1, r3
   25c98:	4618      	mov	r0, r3
   25c9a:	f7ea fc9f 	bl	105dc <__assert_func>
        ble_phy_resolv_list_disable();
   25c9e:	f002 fdeb 	bl	28878 <ble_phy_resolv_list_disable>
   25ca2:	e7d9      	b.n	25c58 <ble_ll_scan_start+0x48>
        rc = ble_phy_rx_set_start_time(os_cputime_get32() +
   25ca4:	f7ea fee8 	bl	10a78 <os_cputime_get32>
   25ca8:	4b18      	ldr	r3, [pc, #96]	; (25d0c <ble_ll_scan_start+0xfc>)
   25caa:	781b      	ldrb	r3, [r3, #0]
   25cac:	2100      	movs	r1, #0
   25cae:	4418      	add	r0, r3
   25cb0:	f002 fcf4 	bl	2869c <ble_phy_rx_set_start_time>
   25cb4:	e7d8      	b.n	25c68 <ble_ll_scan_start+0x58>
        if (scanphy->scan_filt_policy & 1) {
   25cb6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   25cba:	0093      	lsls	r3, r2, #2
   25cbc:	4433      	add	r3, r6
   25cbe:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
   25cc2:	f013 0f01 	tst.w	r3, #1
   25cc6:	d011      	beq.n	25cec <ble_ll_scan_start+0xdc>
            ble_ll_whitelist_enable();
   25cc8:	f001 fd72 	bl	277b0 <ble_ll_whitelist_enable>
        if (scanphy->scan_type == BLE_SCAN_TYPE_INITIATE) {
   25ccc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   25cd0:	00a3      	lsls	r3, r4, #2
   25cd2:	4433      	add	r3, r6
   25cd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   25cd8:	2b02      	cmp	r3, #2
   25cda:	d00a      	beq.n	25cf2 <ble_ll_scan_start+0xe2>
            ble_ll_state_set(BLE_LL_STATE_SCANNING);
   25cdc:	2002      	movs	r0, #2
   25cde:	f7f9 fb83 	bl	1f3e8 <ble_ll_state_set>
    if (scansm->scan_rsp_pending) {
   25ce2:	78f3      	ldrb	r3, [r6, #3]
   25ce4:	b94b      	cbnz	r3, 25cfa <ble_ll_scan_start+0xea>
}
   25ce6:	4638      	mov	r0, r7
   25ce8:	b003      	add	sp, #12
   25cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ble_ll_whitelist_disable();
   25cec:	f001 fd64 	bl	277b8 <ble_ll_whitelist_disable>
   25cf0:	e7ec      	b.n	25ccc <ble_ll_scan_start+0xbc>
            ble_ll_state_set(BLE_LL_STATE_INITIATING);
   25cf2:	2003      	movs	r0, #3
   25cf4:	f7f9 fb78 	bl	1f3e8 <ble_ll_state_set>
   25cf8:	e7f3      	b.n	25ce2 <ble_ll_scan_start+0xd2>
        ble_ll_scan_req_backoff(scansm, 0);
   25cfa:	2100      	movs	r1, #0
   25cfc:	4630      	mov	r0, r6
   25cfe:	f7ff fde5 	bl	258cc <ble_ll_scan_req_backoff>
    return rc;
   25d02:	e7f0      	b.n	25ce6 <ble_ll_scan_start+0xd6>
   25d04:	00555555 	.word	0x00555555
   25d08:	8e89bed6 	.word	0x8e89bed6
   25d0c:	200042ac 	.word	0x200042ac

00025d10 <ble_ll_scan_chk_filter_policy>:
{
   25d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25d12:	460d      	mov	r5, r1
   25d14:	4616      	mov	r6, r2
   25d16:	f89d 701c 	ldrb.w	r7, [sp, #28]
                        &g_ble_ll_scan_sm.phy_data[g_ble_ll_scan_sm.cur_phy];
   25d1a:	491b      	ldr	r1, [pc, #108]	; (25d88 <ble_ll_scan_chk_filter_policy+0x78>)
   25d1c:	f891 2068 	ldrb.w	r2, [r1, #104]	; 0x68
    switch (params->scan_filt_policy) {
   25d20:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   25d24:	0094      	lsls	r4, r2, #2
   25d26:	4421      	add	r1, r4
   25d28:	f891 2072 	ldrb.w	r2, [r1, #114]	; 0x72
   25d2c:	2a03      	cmp	r2, #3
   25d2e:	d815      	bhi.n	25d5c <ble_ll_scan_chk_filter_policy+0x4c>
   25d30:	e8df f002 	tbb	[pc, r2]
   25d34:	021c1a08 	.word	0x021c1a08
        chk_inita = 1;
   25d38:	2401      	movs	r4, #1
    if (use_whitelist && (pdu_type != BLE_ADV_PDU_TYPE_SCAN_RSP)) {
   25d3a:	2804      	cmp	r0, #4
   25d3c:	d003      	beq.n	25d46 <ble_ll_scan_chk_filter_policy+0x36>
        if (!devmatch) {
   25d3e:	b917      	cbnz	r7, 25d46 <ble_ll_scan_chk_filter_policy+0x36>
            return 1;
   25d40:	2401      	movs	r4, #1
   25d42:	e01d      	b.n	25d80 <ble_ll_scan_chk_filter_policy+0x70>
    chk_inita = 0;
   25d44:	2400      	movs	r4, #0
    if (init_addr) {
   25d46:	b1d3      	cbz	r3, 25d7e <ble_ll_scan_chk_filter_policy+0x6e>
        if (!ble_ll_is_our_devaddr(init_addr, init_addr_type)) {
   25d48:	f89d 1018 	ldrb.w	r1, [sp, #24]
   25d4c:	4618      	mov	r0, r3
   25d4e:	f7f9 fa2f 	bl	1f1b0 <ble_ll_is_our_devaddr>
   25d52:	4607      	mov	r7, r0
   25d54:	b9b0      	cbnz	r0, 25d84 <ble_ll_scan_chk_filter_policy+0x74>
            if (!chk_inita || !ble_ll_is_rpa(adv_addr, adv_addr_type)) {
   25d56:	b95c      	cbnz	r4, 25d70 <ble_ll_scan_chk_filter_policy+0x60>
                return 1;
   25d58:	2401      	movs	r4, #1
   25d5a:	e011      	b.n	25d80 <ble_ll_scan_chk_filter_policy+0x70>
        BLE_LL_ASSERT(0);
   25d5c:	2300      	movs	r3, #0
   25d5e:	461a      	mov	r2, r3
   25d60:	4619      	mov	r1, r3
   25d62:	4618      	mov	r0, r3
   25d64:	f7ea fc3a 	bl	105dc <__assert_func>
    chk_inita = 0;
   25d68:	2400      	movs	r4, #0
   25d6a:	e7e6      	b.n	25d3a <ble_ll_scan_chk_filter_policy+0x2a>
        chk_inita = 1;
   25d6c:	2401      	movs	r4, #1
   25d6e:	e7ea      	b.n	25d46 <ble_ll_scan_chk_filter_policy+0x36>
            if (!chk_inita || !ble_ll_is_rpa(adv_addr, adv_addr_type)) {
   25d70:	4631      	mov	r1, r6
   25d72:	4628      	mov	r0, r5
   25d74:	f7f9 f9a0 	bl	1f0b8 <ble_ll_is_rpa>
   25d78:	b110      	cbz	r0, 25d80 <ble_ll_scan_chk_filter_policy+0x70>
    return 0;
   25d7a:	463c      	mov	r4, r7
   25d7c:	e000      	b.n	25d80 <ble_ll_scan_chk_filter_policy+0x70>
   25d7e:	2400      	movs	r4, #0
}
   25d80:	4620      	mov	r0, r4
   25d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
   25d84:	2400      	movs	r4, #0
   25d86:	e7fb      	b.n	25d80 <ble_ll_scan_chk_filter_policy+0x70>
   25d88:	20003680 	.word	0x20003680

00025d8c <ble_ll_scan_dup_check_legacy>:
{
   25d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25d8e:	460e      	mov	r6, r1
   25d90:	4617      	mov	r7, r2
    type = BLE_LL_SCAN_ENTRY_TYPE_LEGACY(addr_type);
   25d92:	f000 0501 	and.w	r5, r0, #1
    TAILQ_FOREACH(e, &g_scan_dup_list, link) {
   25d96:	4b39      	ldr	r3, [pc, #228]	; (25e7c <ble_ll_scan_dup_check_legacy+0xf0>)
   25d98:	681c      	ldr	r4, [r3, #0]
   25d9a:	e000      	b.n	25d9e <ble_ll_scan_dup_check_legacy+0x12>
   25d9c:	68a4      	ldr	r4, [r4, #8]
   25d9e:	b14c      	cbz	r4, 25db4 <ble_ll_scan_dup_check_legacy+0x28>
        if ((e->type == type) && !memcmp(e->addr, addr, 6)) {
   25da0:	7823      	ldrb	r3, [r4, #0]
   25da2:	42ab      	cmp	r3, r5
   25da4:	d1fa      	bne.n	25d9c <ble_ll_scan_dup_check_legacy+0x10>
   25da6:	2206      	movs	r2, #6
   25da8:	4631      	mov	r1, r6
   25daa:	1c60      	adds	r0, r4, #1
   25dac:	f7ec fb66 	bl	1247c <memcmp>
   25db0:	2800      	cmp	r0, #0
   25db2:	d1f3      	bne.n	25d9c <ble_ll_scan_dup_check_legacy+0x10>
    if (e) {
   25db4:	2c00      	cmp	r4, #0
   25db6:	d02d      	beq.n	25e14 <ble_ll_scan_dup_check_legacy+0x88>
        if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   25db8:	2f01      	cmp	r7, #1
   25dba:	d01a      	beq.n	25df2 <ble_ll_scan_dup_check_legacy+0x66>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   25dbc:	2f04      	cmp	r7, #4
   25dbe:	d01c      	beq.n	25dfa <ble_ll_scan_dup_check_legacy+0x6e>
            rc = e->flags & BLE_LL_SCAN_DUP_F_ADV_REPORT_SENT;
   25dc0:	79e0      	ldrb	r0, [r4, #7]
   25dc2:	f000 0001 	and.w	r0, r0, #1
    if (e != TAILQ_FIRST(&g_scan_dup_list)) {
   25dc6:	4b2d      	ldr	r3, [pc, #180]	; (25e7c <ble_ll_scan_dup_check_legacy+0xf0>)
   25dc8:	681b      	ldr	r3, [r3, #0]
   25dca:	429c      	cmp	r4, r3
   25dcc:	d010      	beq.n	25df0 <ble_ll_scan_dup_check_legacy+0x64>
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   25dce:	68a3      	ldr	r3, [r4, #8]
   25dd0:	b1bb      	cbz	r3, 25e02 <ble_ll_scan_dup_check_legacy+0x76>
   25dd2:	68e2      	ldr	r2, [r4, #12]
   25dd4:	60da      	str	r2, [r3, #12]
   25dd6:	68e3      	ldr	r3, [r4, #12]
   25dd8:	68a2      	ldr	r2, [r4, #8]
   25dda:	601a      	str	r2, [r3, #0]
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   25ddc:	4b27      	ldr	r3, [pc, #156]	; (25e7c <ble_ll_scan_dup_check_legacy+0xf0>)
   25dde:	681b      	ldr	r3, [r3, #0]
   25de0:	60a3      	str	r3, [r4, #8]
   25de2:	b193      	cbz	r3, 25e0a <ble_ll_scan_dup_check_legacy+0x7e>
   25de4:	f104 0208 	add.w	r2, r4, #8
   25de8:	60da      	str	r2, [r3, #12]
   25dea:	4b24      	ldr	r3, [pc, #144]	; (25e7c <ble_ll_scan_dup_check_legacy+0xf0>)
   25dec:	601c      	str	r4, [r3, #0]
   25dee:	60e3      	str	r3, [r4, #12]
}
   25df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = e->flags & BLE_LL_SCAN_DUP_F_DIR_ADV_REPORT_SENT;
   25df2:	79e0      	ldrb	r0, [r4, #7]
   25df4:	f000 0002 	and.w	r0, r0, #2
   25df8:	e7e5      	b.n	25dc6 <ble_ll_scan_dup_check_legacy+0x3a>
            rc = e->flags & BLE_LL_SCAN_DUP_F_SCAN_RSP_SENT;
   25dfa:	79e0      	ldrb	r0, [r4, #7]
   25dfc:	f000 0004 	and.w	r0, r0, #4
   25e00:	e7e1      	b.n	25dc6 <ble_ll_scan_dup_check_legacy+0x3a>
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   25e02:	68e2      	ldr	r2, [r4, #12]
   25e04:	4b1d      	ldr	r3, [pc, #116]	; (25e7c <ble_ll_scan_dup_check_legacy+0xf0>)
   25e06:	605a      	str	r2, [r3, #4]
   25e08:	e7e5      	b.n	25dd6 <ble_ll_scan_dup_check_legacy+0x4a>
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   25e0a:	f104 0308 	add.w	r3, r4, #8
   25e0e:	4a1b      	ldr	r2, [pc, #108]	; (25e7c <ble_ll_scan_dup_check_legacy+0xf0>)
   25e10:	6053      	str	r3, [r2, #4]
   25e12:	e7ea      	b.n	25dea <ble_ll_scan_dup_check_legacy+0x5e>
    e = os_memblock_get(&g_scan_dup_pool);
   25e14:	481a      	ldr	r0, [pc, #104]	; (25e80 <ble_ll_scan_dup_check_legacy+0xf4>)
   25e16:	f7eb fcb6 	bl	11786 <os_memblock_get>
    if (!e) {
   25e1a:	4603      	mov	r3, r0
   25e1c:	b1c8      	cbz	r0, 25e52 <ble_ll_scan_dup_check_legacy+0xc6>
    memset(e, 0, sizeof(*e));
   25e1e:	2200      	movs	r2, #0
   25e20:	601a      	str	r2, [r3, #0]
   25e22:	605a      	str	r2, [r3, #4]
   25e24:	609a      	str	r2, [r3, #8]
   25e26:	60da      	str	r2, [r3, #12]
        e->flags = 0;
   25e28:	71da      	strb	r2, [r3, #7]
        e->type = type;
   25e2a:	461a      	mov	r2, r3
   25e2c:	f802 5b01 	strb.w	r5, [r2], #1
        memcpy(e->addr, addr, 6);
   25e30:	6831      	ldr	r1, [r6, #0]
   25e32:	f8c3 1001 	str.w	r1, [r3, #1]
   25e36:	88b1      	ldrh	r1, [r6, #4]
   25e38:	8091      	strh	r1, [r2, #4]
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   25e3a:	4a10      	ldr	r2, [pc, #64]	; (25e7c <ble_ll_scan_dup_check_legacy+0xf0>)
   25e3c:	6812      	ldr	r2, [r2, #0]
   25e3e:	609a      	str	r2, [r3, #8]
   25e40:	b1ba      	cbz	r2, 25e72 <ble_ll_scan_dup_check_legacy+0xe6>
   25e42:	f103 0108 	add.w	r1, r3, #8
   25e46:	60d1      	str	r1, [r2, #12]
   25e48:	4a0c      	ldr	r2, [pc, #48]	; (25e7c <ble_ll_scan_dup_check_legacy+0xf0>)
   25e4a:	6013      	str	r3, [r2, #0]
   25e4c:	60da      	str	r2, [r3, #12]
        rc = 0;
   25e4e:	2000      	movs	r0, #0
    return rc;
   25e50:	e7ce      	b.n	25df0 <ble_ll_scan_dup_check_legacy+0x64>
        e = TAILQ_LAST(&g_scan_dup_list, ble_ll_scan_dup_list);
   25e52:	4b0a      	ldr	r3, [pc, #40]	; (25e7c <ble_ll_scan_dup_check_legacy+0xf0>)
   25e54:	685b      	ldr	r3, [r3, #4]
   25e56:	685b      	ldr	r3, [r3, #4]
   25e58:	681b      	ldr	r3, [r3, #0]
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   25e5a:	689a      	ldr	r2, [r3, #8]
   25e5c:	b12a      	cbz	r2, 25e6a <ble_ll_scan_dup_check_legacy+0xde>
   25e5e:	68d9      	ldr	r1, [r3, #12]
   25e60:	60d1      	str	r1, [r2, #12]
   25e62:	68da      	ldr	r2, [r3, #12]
   25e64:	6899      	ldr	r1, [r3, #8]
   25e66:	6011      	str	r1, [r2, #0]
   25e68:	e7d9      	b.n	25e1e <ble_ll_scan_dup_check_legacy+0x92>
   25e6a:	68d9      	ldr	r1, [r3, #12]
   25e6c:	4a03      	ldr	r2, [pc, #12]	; (25e7c <ble_ll_scan_dup_check_legacy+0xf0>)
   25e6e:	6051      	str	r1, [r2, #4]
   25e70:	e7f7      	b.n	25e62 <ble_ll_scan_dup_check_legacy+0xd6>
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   25e72:	f103 0208 	add.w	r2, r3, #8
   25e76:	4901      	ldr	r1, [pc, #4]	; (25e7c <ble_ll_scan_dup_check_legacy+0xf0>)
   25e78:	604a      	str	r2, [r1, #4]
   25e7a:	e7e5      	b.n	25e48 <ble_ll_scan_dup_check_legacy+0xbc>
   25e7c:	20003704 	.word	0x20003704
   25e80:	2000378c 	.word	0x2000378c

00025e84 <ble_ll_hci_send_adv_report>:
{
   25e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25e88:	4606      	mov	r6, r0
   25e8a:	468a      	mov	sl, r1
   25e8c:	4617      	mov	r7, r2
   25e8e:	4699      	mov	r9, r3
   25e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
   25e94:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    if (!ble_ll_hci_is_le_event_enabled(subev)) {
   25e98:	f7fe ff86 	bl	24da8 <ble_ll_hci_is_le_event_enabled>
   25e9c:	2800      	cmp	r0, #0
   25e9e:	d04a      	beq.n	25f36 <ble_ll_hci_send_adv_report+0xb2>
    if (event_len + 1 > MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE)) {
   25ea0:	1c7b      	adds	r3, r7, #1
   25ea2:	2b46      	cmp	r3, #70	; 0x46
   25ea4:	dc4a      	bgt.n	25f3c <ble_ll_hci_send_adv_report+0xb8>
    evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   25ea6:	2001      	movs	r0, #1
   25ea8:	f7f7 fc46 	bl	1d738 <ble_hci_trans_buf_alloc>
    if (!evbuf) {
   25eac:	4604      	mov	r4, r0
   25eae:	2800      	cmp	r0, #0
   25eb0:	d047      	beq.n	25f42 <ble_ll_hci_send_adv_report+0xbe>
    evbuf[0] = BLE_HCI_EVCODE_LE_META;
   25eb2:	233e      	movs	r3, #62	; 0x3e
   25eb4:	7003      	strb	r3, [r0, #0]
    evbuf[1] = event_len;
   25eb6:	7047      	strb	r7, [r0, #1]
    evbuf[2] = subev;
   25eb8:	7086      	strb	r6, [r0, #2]
    evbuf[3] = 1;       /* number of reports */
   25eba:	2301      	movs	r3, #1
   25ebc:	70c3      	strb	r3, [r0, #3]
    evbuf[4] = evtype;
   25ebe:	f880 a004 	strb.w	sl, [r0, #4]
    evbuf[5] = addr_type;
   25ec2:	f880 9005 	strb.w	r9, [r0, #5]
    memcpy(&evbuf[6], addr, BLE_DEV_ADDR_LEN);
   25ec6:	f8d8 3000 	ldr.w	r3, [r8]
   25eca:	f8c0 3006 	str.w	r3, [r0, #6]
   25ece:	f8b8 3004 	ldrh.w	r3, [r8, #4]
   25ed2:	8143      	strh	r3, [r0, #10]
    if (subev == BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT) {
   25ed4:	2e0b      	cmp	r6, #11
   25ed6:	d013      	beq.n	25f00 <ble_ll_hci_send_adv_report+0x7c>
    } else if (subev == BLE_HCI_LE_SUBEV_ADV_RPT) {
   25ed8:	2e02      	cmp	r6, #2
   25eda:	d126      	bne.n	25f2a <ble_ll_hci_send_adv_report+0xa6>
        tmp[0] = adv_data_len;
   25edc:	7305      	strb	r5, [r0, #12]
        os_mbuf_copydata(adv_data, 0, adv_data_len, tmp + 1);
   25ede:	f100 030d 	add.w	r3, r0, #13
   25ee2:	462a      	mov	r2, r5
   25ee4:	2100      	movs	r1, #0
   25ee6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   25ee8:	f7eb f900 	bl	110ec <os_mbuf_copydata>
        tmp += adv_data_len + 1;
   25eec:	350d      	adds	r5, #13
   25eee:	4425      	add	r5, r4
    tmp[0] = rssi;
   25ef0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   25ef4:	702b      	strb	r3, [r5, #0]
    return ble_ll_hci_event_send(evbuf);
   25ef6:	4620      	mov	r0, r4
   25ef8:	f7fe febe 	bl	24c78 <ble_ll_hci_event_send>
}
   25efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        BLE_LL_ASSERT(inita);
   25f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25f02:	b16b      	cbz	r3, 25f20 <ble_ll_hci_send_adv_report+0x9c>
        tmp[0] = inita_type;
   25f04:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   25f08:	7303      	strb	r3, [r0, #12]
        memcpy(tmp + 1, inita, BLE_DEV_ADDR_LEN);
   25f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25f0c:	681b      	ldr	r3, [r3, #0]
   25f0e:	f8c0 300d 	str.w	r3, [r0, #13]
   25f12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25f14:	889b      	ldrh	r3, [r3, #4]
   25f16:	f8a0 3011 	strh.w	r3, [r0, #17]
        tmp += BLE_DEV_ADDR_LEN + 1;
   25f1a:	f100 0513 	add.w	r5, r0, #19
   25f1e:	e7e7      	b.n	25ef0 <ble_ll_hci_send_adv_report+0x6c>
        BLE_LL_ASSERT(inita);
   25f20:	461a      	mov	r2, r3
   25f22:	4619      	mov	r1, r3
   25f24:	4618      	mov	r0, r3
   25f26:	f7ea fb59 	bl	105dc <__assert_func>
        BLE_LL_ASSERT(0);
   25f2a:	2300      	movs	r3, #0
   25f2c:	461a      	mov	r2, r3
   25f2e:	4619      	mov	r1, r3
   25f30:	4618      	mov	r0, r3
   25f32:	f7ea fb53 	bl	105dc <__assert_func>
        return -1;
   25f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25f3a:	e7df      	b.n	25efc <ble_ll_hci_send_adv_report+0x78>
        return -1;
   25f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25f40:	e7dc      	b.n	25efc <ble_ll_hci_send_adv_report+0x78>
        return -1;
   25f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25f46:	e7d9      	b.n	25efc <ble_ll_hci_send_adv_report+0x78>

00025f48 <ble_ll_scan_send_adv_report>:
{
   25f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f4c:	b089      	sub	sp, #36	; 0x24
   25f4e:	4604      	mov	r4, r0
   25f50:	468b      	mov	fp, r1
   25f52:	4616      	mov	r6, r2
   25f54:	469a      	mov	sl, r3
   25f56:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
   25f5a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    uint8_t *rxbuf = om->om_data;
   25f5c:	683b      	ldr	r3, [r7, #0]
    if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   25f5e:	2801      	cmp	r0, #1
   25f60:	d039      	beq.n	25fd6 <ble_ll_scan_send_adv_report+0x8e>
        if (pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) {
   25f62:	b120      	cbz	r0, 25f6e <ble_ll_scan_send_adv_report+0x26>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_ADV_SCAN_IND) {
   25f64:	2806      	cmp	r0, #6
   25f66:	d044      	beq.n	25ff2 <ble_ll_scan_send_adv_report+0xaa>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_ADV_NONCONN_IND) {
   25f68:	2802      	cmp	r0, #2
   25f6a:	d040      	beq.n	25fee <ble_ll_scan_send_adv_report+0xa6>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_SCAN_RSP;
   25f6c:	2404      	movs	r4, #4
        adv_data_len = rxbuf[1];
   25f6e:	785b      	ldrb	r3, [r3, #1]
        adv_data_len -= BLE_DEV_ADDR_LEN;
   25f70:	f1a3 0806 	sub.w	r8, r3, #6
   25f74:	fa5f f888 	uxtb.w	r8, r8
        event_len = BLE_HCI_LE_ADV_RPT_MIN_LEN + adv_data_len;
   25f78:	3306      	adds	r3, #6
   25f7a:	fa5f f983 	uxtb.w	r9, r3
        os_mbuf_adj(om, BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN);
   25f7e:	2108      	movs	r1, #8
   25f80:	4638      	mov	r0, r7
   25f82:	f7eb f8e0 	bl	11146 <os_mbuf_adj>
        subev = BLE_HCI_LE_SUBEV_ADV_RPT;
   25f86:	2302      	movs	r3, #2
   25f88:	9307      	str	r3, [sp, #28]
    if (BLE_MBUF_HDR_RESOLVED(hdr)) {
   25f8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   25f8c:	881b      	ldrh	r3, [r3, #0]
   25f8e:	f413 6f80 	tst.w	r3, #1024	; 0x400
   25f92:	d001      	beq.n	25f98 <ble_ll_scan_send_adv_report+0x50>
        adva_type += 2;
   25f94:	3602      	adds	r6, #2
   25f96:	b2f6      	uxtb	r6, r6
    if (BLE_MBUF_HDR_INITA_RESOLVED(hdr)) {
   25f98:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   25f9c:	d001      	beq.n	25fa2 <ble_ll_scan_send_adv_report+0x5a>
        inita_type += 2;
   25f9e:	3502      	adds	r5, #2
   25fa0:	b2ed      	uxtb	r5, r5
                                    hdr->rxinfo.rssi,
   25fa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   25fa4:	f993 3004 	ldrsb.w	r3, [r3, #4]
    rc = ble_ll_hci_send_adv_report(subev, evtype, event_len,
   25fa8:	b2db      	uxtb	r3, r3
   25faa:	9505      	str	r5, [sp, #20]
   25fac:	f8cd a010 	str.w	sl, [sp, #16]
   25fb0:	9703      	str	r7, [sp, #12]
   25fb2:	f8cd 8008 	str.w	r8, [sp, #8]
   25fb6:	9301      	str	r3, [sp, #4]
   25fb8:	f8cd b000 	str.w	fp, [sp]
   25fbc:	4633      	mov	r3, r6
   25fbe:	464a      	mov	r2, r9
   25fc0:	4621      	mov	r1, r4
   25fc2:	9807      	ldr	r0, [sp, #28]
   25fc4:	f7ff ff5e 	bl	25e84 <ble_ll_hci_send_adv_report>
    if (!rc && scansm->scan_filt_dups) {
   25fc8:	b910      	cbnz	r0, 25fd0 <ble_ll_scan_send_adv_report+0x88>
   25fca:	9b15      	ldr	r3, [sp, #84]	; 0x54
   25fcc:	789b      	ldrb	r3, [r3, #2]
   25fce:	b9cb      	cbnz	r3, 26004 <ble_ll_scan_send_adv_report+0xbc>
}
   25fd0:	b009      	add	sp, #36	; 0x24
   25fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ble_ll_is_rpa(inita, inita_type)) {
   25fd6:	4629      	mov	r1, r5
   25fd8:	4650      	mov	r0, sl
   25fda:	f7f9 f86d 	bl	1f0b8 <ble_ll_is_rpa>
   25fde:	b150      	cbz	r0, 25ff6 <ble_ll_scan_send_adv_report+0xae>
            event_len = BLE_HCI_LE_ADV_DIRECT_RPT_LEN;
   25fe0:	f04f 0912 	mov.w	r9, #18
        adv_data_len = 0;
   25fe4:	f04f 0800 	mov.w	r8, #0
            subev = BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT;
   25fe8:	230b      	movs	r3, #11
   25fea:	9307      	str	r3, [sp, #28]
   25fec:	e7cd      	b.n	25f8a <ble_ll_scan_send_adv_report+0x42>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_NONCONN_IND;
   25fee:	2403      	movs	r4, #3
   25ff0:	e7bd      	b.n	25f6e <ble_ll_scan_send_adv_report+0x26>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_SCAN_IND;
   25ff2:	2402      	movs	r4, #2
   25ff4:	e7bb      	b.n	25f6e <ble_ll_scan_send_adv_report+0x26>
            event_len = BLE_HCI_LE_ADV_RPT_MIN_LEN;
   25ff6:	f04f 090c 	mov.w	r9, #12
        adv_data_len = 0;
   25ffa:	f04f 0800 	mov.w	r8, #0
            subev = BLE_HCI_LE_SUBEV_ADV_RPT;
   25ffe:	2302      	movs	r3, #2
   26000:	9307      	str	r3, [sp, #28]
   26002:	e7c2      	b.n	25f8a <ble_ll_scan_send_adv_report+0x42>
        ble_ll_scan_dup_update_legacy(adva_type, adva, subev, evtype);
   26004:	4623      	mov	r3, r4
   26006:	9a07      	ldr	r2, [sp, #28]
   26008:	4659      	mov	r1, fp
   2600a:	4630      	mov	r0, r6
   2600c:	f7ff fd0e 	bl	25a2c <ble_ll_scan_dup_update_legacy>
}
   26010:	e7de      	b.n	25fd0 <ble_ll_scan_send_adv_report+0x88>
	...

00026014 <ble_ll_scan_sm_start>:
{
   26014:	b570      	push	{r4, r5, r6, lr}
   26016:	4604      	mov	r4, r0
    if (scansm->own_addr_type == BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   26018:	7843      	ldrb	r3, [r0, #1]
   2601a:	2b01      	cmp	r3, #1
   2601c:	d034      	beq.n	26088 <ble_ll_scan_sm_start+0x74>
    scansm->scan_enabled = 1;
   2601e:	2301      	movs	r3, #1
   26020:	7023      	strb	r3, [r4, #0]
    BLE_LL_ASSERT(scansm->cur_phy != PHY_NOT_CONFIGURED);
   26022:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
   26026:	2aff      	cmp	r2, #255	; 0xff
   26028:	d035      	beq.n	26096 <ble_ll_scan_sm_start+0x82>
    scansm->phy_data[scansm->cur_phy].scan_chan = BLE_PHY_ADV_CHAN_START;
   2602a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   2602e:	008b      	lsls	r3, r1, #2
   26030:	4423      	add	r3, r4
   26032:	2125      	movs	r1, #37	; 0x25
   26034:	f883 1075 	strb.w	r1, [r3, #117]	; 0x75
    if (scansm->next_phy != PHY_NOT_CONFIGURED &&
   26038:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
   2603c:	2bff      	cmp	r3, #255	; 0xff
   2603e:	d007      	beq.n	26050 <ble_ll_scan_sm_start+0x3c>
   26040:	429a      	cmp	r2, r3
   26042:	d005      	beq.n	26050 <ble_ll_scan_sm_start+0x3c>
        scansm->phy_data[scansm->next_phy].scan_chan = BLE_PHY_ADV_CHAN_START;
   26044:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   26048:	009a      	lsls	r2, r3, #2
   2604a:	4422      	add	r2, r4
   2604c:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
    scansm->upper_limit = 1;
   26050:	2301      	movs	r3, #1
   26052:	8523      	strh	r3, [r4, #40]	; 0x28
    scansm->backoff_count = 1;
   26054:	8563      	strh	r3, [r4, #42]	; 0x2a
    scansm->scan_rsp_pending = 0;
   26056:	2500      	movs	r5, #0
   26058:	70e5      	strb	r5, [r4, #3]
    g_ble_ll_scan_num_rsp_advs = 0;
   2605a:	4b12      	ldr	r3, [pc, #72]	; (260a4 <ble_ll_scan_sm_start+0x90>)
   2605c:	701d      	strb	r5, [r3, #0]
    os_mempool_clear(&g_scan_dup_pool);
   2605e:	4812      	ldr	r0, [pc, #72]	; (260a8 <ble_ll_scan_sm_start+0x94>)
   26060:	f7eb fb56 	bl	11710 <os_mempool_clear>
    TAILQ_INIT(&g_scan_dup_list);
   26064:	4b11      	ldr	r3, [pc, #68]	; (260ac <ble_ll_scan_sm_start+0x98>)
   26066:	601d      	str	r5, [r3, #0]
   26068:	605b      	str	r3, [r3, #4]
    scansm->phy_data[scansm->cur_phy].scan_win_start_time = os_cputime_get32();
   2606a:	f894 6068 	ldrb.w	r6, [r4, #104]	; 0x68
   2606e:	f7ea fd03 	bl	10a78 <os_cputime_get32>
   26072:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   26076:	00b3      	lsls	r3, r6, #2
   26078:	4423      	add	r3, r4
   2607a:	67d8      	str	r0, [r3, #124]	; 0x7c
    ble_ll_event_send(&scansm->scan_sched_ev);
   2607c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26080:	f7f9 f9be 	bl	1f400 <ble_ll_event_send>
    return BLE_ERR_SUCCESS;
   26084:	4628      	mov	r0, r5
}
   26086:	bd70      	pop	{r4, r5, r6, pc}
        if (!ble_ll_is_valid_random_addr(g_random_addr)) {
   26088:	4809      	ldr	r0, [pc, #36]	; (260b0 <ble_ll_scan_sm_start+0x9c>)
   2608a:	f7f9 f82d 	bl	1f0e8 <ble_ll_is_valid_random_addr>
   2608e:	2800      	cmp	r0, #0
   26090:	d1c5      	bne.n	2601e <ble_ll_scan_sm_start+0xa>
            return BLE_ERR_CMD_DISALLOWED;
   26092:	200c      	movs	r0, #12
   26094:	e7f7      	b.n	26086 <ble_ll_scan_sm_start+0x72>
    BLE_LL_ASSERT(scansm->cur_phy != PHY_NOT_CONFIGURED);
   26096:	2300      	movs	r3, #0
   26098:	461a      	mov	r2, r3
   2609a:	4619      	mov	r1, r3
   2609c:	4618      	mov	r0, r3
   2609e:	f7ea fa9d 	bl	105dc <__assert_func>
   260a2:	bf00      	nop
   260a4:	20003668 	.word	0x20003668
   260a8:	2000378c 	.word	0x2000378c
   260ac:	20003704 	.word	0x20003704
   260b0:	20003dc0 	.word	0x20003dc0

000260b4 <ble_ll_scan_common_init>:
    return params->scan_filt_policy & 1;
}

static void
ble_ll_scan_common_init(void)
{
   260b4:	b510      	push	{r4, lr}
    struct ble_ll_scan_params *scanp;
    int i;

    /* Clear state machine in case re-initialized */
    scansm = &g_ble_ll_scan_sm;
    memset(scansm, 0, sizeof(struct ble_ll_scan_sm));
   260b6:	4c18      	ldr	r4, [pc, #96]	; (26118 <ble_ll_scan_common_init+0x64>)
   260b8:	2284      	movs	r2, #132	; 0x84
   260ba:	2100      	movs	r1, #0
   260bc:	4620      	mov	r0, r4
   260be:	f7ec fa2a 	bl	12516 <memset>

    /* Clear scan parameters in case re-initialized */
    memset(g_ble_ll_scan_params, 0, sizeof(g_ble_ll_scan_params));
   260c2:	4a16      	ldr	r2, [pc, #88]	; (2611c <ble_ll_scan_common_init+0x68>)
   260c4:	2300      	movs	r3, #0
   260c6:	6013      	str	r3, [r2, #0]
   260c8:	6053      	str	r3, [r2, #4]
   260ca:	6093      	str	r3, [r2, #8]
   260cc:	60d3      	str	r3, [r2, #12]
   260ce:	6113      	str	r3, [r2, #16]
    ev->ev.ev_cb = (os_event_fn *)fn;
   260d0:	4a13      	ldr	r2, [pc, #76]	; (26120 <ble_ll_scan_common_init+0x6c>)
   260d2:	6362      	str	r2, [r4, #52]	; 0x34
    ev->ev.ev_arg = arg;
   260d4:	63a4      	str	r4, [r4, #56]	; 0x38

    /* Initialize scanning window end event */
    ble_npl_event_init(&scansm->scan_sched_ev, ble_ll_scan_event_proc, scansm);

    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   260d6:	2b00      	cmp	r3, #0
   260d8:	dd13      	ble.n	26102 <ble_ll_scan_common_init+0x4e>
        scanp = &g_ble_ll_scan_params[i];
        scanp->scan_itvl = BLE_HCI_SCAN_ITVL_DEF;
        scanp->scan_window = BLE_HCI_SCAN_WINDOW_DEF;
    }

    scansm->phy_data[PHY_UNCODED].phy = BLE_PHY_1M;
   260da:	4c0f      	ldr	r4, [pc, #60]	; (26118 <ble_ll_scan_common_init+0x64>)
   260dc:	2301      	movs	r3, #1
   260de:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    return os_time_get();
   260e2:	f7ec f82b 	bl	1213c <os_time_get>
    scansm->phy_data[PHY_CODED].phy = BLE_PHY_CODED;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* Make sure we'll generate new NRPA if necessary */
    scansm->scan_nrpa_timer = ble_npl_time_get();
   260e6:	6120      	str	r0, [r4, #16]
#endif

    /* Initialize scanning timer */
    os_cputime_timer_init(&scansm->scan_timer, ble_ll_scan_timer_cb, scansm);
   260e8:	4622      	mov	r2, r4
   260ea:	490e      	ldr	r1, [pc, #56]	; (26124 <ble_ll_scan_common_init+0x70>)
   260ec:	f104 0040 	add.w	r0, r4, #64	; 0x40
   260f0:	f7ea fca4 	bl	10a3c <os_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
   260f4:	2300      	movs	r3, #0
   260f6:	65a3      	str	r3, [r4, #88]	; 0x58
   260f8:	6623      	str	r3, [r4, #96]	; 0x60
   260fa:	6663      	str	r3, [r4, #100]	; 0x64
    ev->ev.ev_cb = (os_event_fn *)fn;
   260fc:	4b0a      	ldr	r3, [pc, #40]	; (26128 <ble_ll_scan_common_init+0x74>)
   260fe:	65e3      	str	r3, [r4, #92]	; 0x5c
    os_cputime_timer_init(&scansm->period_timer, ble_ll_scan_period_timer_cb,
                                                                        scansm);
#endif

    ble_npl_event_init(&scansm->scan_interrupted_ev, ble_ll_scan_interrupted_event_cb, NULL);
}
   26100:	bd10      	pop	{r4, pc}
        scanp->scan_itvl = BLE_HCI_SCAN_ITVL_DEF;
   26102:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   26106:	4a05      	ldr	r2, [pc, #20]	; (2611c <ble_ll_scan_common_init+0x68>)
   26108:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   2610c:	2110      	movs	r1, #16
   2610e:	80d1      	strh	r1, [r2, #6]
        scanp->scan_window = BLE_HCI_SCAN_WINDOW_DEF;
   26110:	8111      	strh	r1, [r2, #8]
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   26112:	3301      	adds	r3, #1
   26114:	e7df      	b.n	260d6 <ble_ll_scan_common_init+0x22>
   26116:	bf00      	nop
   26118:	20003680 	.word	0x20003680
   2611c:	2000366c 	.word	0x2000366c
   26120:	0002612d 	.word	0x0002612d
   26124:	00025b4d 	.word	0x00025b4d
   26128:	0002642d 	.word	0x0002642d

0002612c <ble_ll_scan_event_proc>:
{
   2612c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return ev->ev.ev_arg;
   26130:	6884      	ldr	r4, [r0, #8]
    scanphy = &scansm->phy_data[scansm->cur_phy];
   26132:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
    OS_ENTER_CRITICAL(sr);
   26136:	f7ea f987 	bl	10448 <os_arch_save_sr>
   2613a:	4606      	mov	r6, r0
    if (!scansm->scan_enabled) {
   2613c:	7823      	ldrb	r3, [r4, #0]
   2613e:	b143      	cbz	r3, 26152 <ble_ll_scan_event_proc+0x26>
    if (scansm->cur_aux_data) {
   26140:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   26142:	b173      	cbz	r3, 26162 <ble_ll_scan_event_proc+0x36>
        scansm->restart_timer_needed = 1;
   26144:	2301      	movs	r3, #1
   26146:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        OS_EXIT_CRITICAL(sr);
   2614a:	f7ea f983 	bl	10454 <os_arch_restore_sr>
}
   2614e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        os_cputime_timer_stop(&scansm->scan_timer);
   26152:	f104 0040 	add.w	r0, r4, #64	; 0x40
   26156:	f7ea fc8b 	bl	10a70 <os_cputime_timer_stop>
        OS_EXIT_CRITICAL(sr);
   2615a:	4630      	mov	r0, r6
   2615c:	f7ea f97a 	bl	10454 <os_arch_restore_sr>
        return;
   26160:	e7f5      	b.n	2614e <ble_ll_scan_event_proc+0x22>
    now = os_cputime_get32();
   26162:	f7ea fc89 	bl	10a78 <os_cputime_get32>
   26166:	4681      	mov	r9, r0
    win_start = ble_ll_scan_get_current_scan_win(scansm, now);
   26168:	4601      	mov	r1, r0
   2616a:	4620      	mov	r0, r4
   2616c:	f7ff fcf3 	bl	25b56 <ble_ll_scan_get_current_scan_win>
   26170:	4607      	mov	r7, r0
    dt = now - win_start;
   26172:	eba9 0b00 	sub.w	fp, r9, r0
    if (scanphy->scan_window != scanphy->scan_itvl) {
   26176:	00aa      	lsls	r2, r5, #2
   26178:	442a      	add	r2, r5
   2617a:	0093      	lsls	r3, r2, #2
   2617c:	4423      	add	r3, r4
   2617e:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
   26182:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
   26186:	429a      	cmp	r2, r3
   26188:	d118      	bne.n	261bc <ble_ll_scan_event_proc+0x90>
        win = 0;
   2618a:	f04f 0a00 	mov.w	sl, #0
        inside_window = 1;
   2618e:	f04f 0801 	mov.w	r8, #1
    scan_itvl = os_cputime_usecs_to_ticks(scanphy->scan_itvl *
   26192:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   26196:	00ab      	lsls	r3, r5, #2
   26198:	4423      	add	r3, r4
   2619a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
   2619e:	f240 2071 	movw	r0, #625	; 0x271
   261a2:	fb00 f003 	mul.w	r0, r0, r3
   261a6:	f7ea fc6d 	bl	10a84 <os_cputime_usecs_to_ticks>
   261aa:	4605      	mov	r5, r0
    if (win != 0 && inside_window) {
   261ac:	f1ba 0f00 	cmp.w	sl, #0
   261b0:	d012      	beq.n	261d8 <ble_ll_scan_event_proc+0xac>
   261b2:	f1b8 0f00 	cmp.w	r8, #0
   261b6:	d00f      	beq.n	261d8 <ble_ll_scan_event_proc+0xac>
        next_event_time = win_start + win;
   261b8:	4457      	add	r7, sl
   261ba:	e00e      	b.n	261da <ble_ll_scan_event_proc+0xae>
        win = os_cputime_usecs_to_ticks(scanphy->scan_window * BLE_HCI_SCAN_ITVL);
   261bc:	f240 2071 	movw	r0, #625	; 0x271
   261c0:	fb00 f002 	mul.w	r0, r0, r2
   261c4:	f7ea fc5e 	bl	10a84 <os_cputime_usecs_to_ticks>
   261c8:	4682      	mov	sl, r0
        inside_window = dt < win ? 1 : 0;
   261ca:	4583      	cmp	fp, r0
   261cc:	bf2c      	ite	cs
   261ce:	f04f 0800 	movcs.w	r8, #0
   261d2:	f04f 0801 	movcc.w	r8, #1
   261d6:	e7dc      	b.n	26192 <ble_ll_scan_event_proc+0x66>
        next_event_time = win_start + scan_itvl;
   261d8:	442f      	add	r7, r5
    switch (ble_ll_state_get()) {
   261da:	f7f9 f90b 	bl	1f3f4 <ble_ll_state_get>
   261de:	2806      	cmp	r0, #6
   261e0:	d830      	bhi.n	26244 <ble_ll_scan_event_proc+0x118>
   261e2:	e8df f000 	tbb	[pc, r0]
   261e6:	5e0b      	.short	0x5e0b
   261e8:	2f5e0426 	.word	0x2f5e0426
   261ec:	5e          	.byte	0x5e
   261ed:	00          	.byte	0x00
        ble_phy_disable();
   261ee:	f002 f8b9 	bl	28364 <ble_phy_disable>
        if (!inside_window) {
   261f2:	f1b8 0f00 	cmp.w	r8, #0
   261f6:	d018      	beq.n	2622a <ble_ll_scan_event_proc+0xfe>
        ble_ll_conn_reset_pending_aux_conn_rsp();
   261f8:	f7fb fa26 	bl	21648 <ble_ll_conn_reset_pending_aux_conn_rsp>
    if (start_scan && inside_window) {
   261fc:	f1b8 0f00 	cmp.w	r8, #0
   26200:	d126      	bne.n	26250 <ble_ll_scan_event_proc+0x124>
   26202:	2301      	movs	r3, #1
    if (inside_window == 0) {
   26204:	f1b8 0f00 	cmp.w	r8, #0
   26208:	d135      	bne.n	26276 <ble_ll_scan_event_proc+0x14a>
        if (dt >= (scan_itvl - g_ble_ll_data.ll_xtal_ticks)) {
   2620a:	4a2a      	ldr	r2, [pc, #168]	; (262b4 <ble_ll_scan_event_proc+0x188>)
   2620c:	8992      	ldrh	r2, [r2, #12]
   2620e:	1aad      	subs	r5, r5, r2
   26210:	455d      	cmp	r5, fp
   26212:	d848      	bhi.n	262a6 <ble_ll_scan_event_proc+0x17a>
            if (start_scan) {
   26214:	b37b      	cbz	r3, 26276 <ble_ll_scan_event_proc+0x14a>
                if (ble_ll_xcvr_rfclk_state() == BLE_RFCLK_STATE_OFF) {
   26216:	f001 fad3 	bl	277c0 <ble_ll_xcvr_rfclk_state>
   2621a:	bb60      	cbnz	r0, 26276 <ble_ll_scan_event_proc+0x14a>
                    ble_ll_xcvr_rfclk_start_now(now);
   2621c:	4648      	mov	r0, r9
   2621e:	f001 fb41 	bl	278a4 <ble_ll_xcvr_rfclk_start_now>
                    next_event_time = now + g_ble_ll_data.ll_xtal_ticks;
   26222:	4b24      	ldr	r3, [pc, #144]	; (262b4 <ble_ll_scan_event_proc+0x188>)
   26224:	899f      	ldrh	r7, [r3, #12]
   26226:	444f      	add	r7, r9
   26228:	e025      	b.n	26276 <ble_ll_scan_event_proc+0x14a>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   2622a:	2000      	movs	r0, #0
   2622c:	f7f9 f8dc 	bl	1f3e8 <ble_ll_state_set>
   26230:	e7e2      	b.n	261f8 <ble_ll_scan_event_proc+0xcc>
        ble_phy_disable();
   26232:	f002 f897 	bl	28364 <ble_phy_disable>
        if (!inside_window) {
   26236:	f1b8 0f00 	cmp.w	r8, #0
   2623a:	d1df      	bne.n	261fc <ble_ll_scan_event_proc+0xd0>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   2623c:	2000      	movs	r0, #0
   2623e:	f7f9 f8d3 	bl	1f3e8 <ble_ll_state_set>
   26242:	e7db      	b.n	261fc <ble_ll_scan_event_proc+0xd0>
        BLE_LL_ASSERT(0);
   26244:	2300      	movs	r3, #0
   26246:	461a      	mov	r2, r3
   26248:	4619      	mov	r1, r3
   2624a:	4618      	mov	r0, r3
   2624c:	f7ea f9c6 	bl	105dc <__assert_func>
            xtal_state = ble_ll_xcvr_rfclk_state();
   26250:	f001 fab6 	bl	277c0 <ble_ll_xcvr_rfclk_state>
   26254:	4605      	mov	r5, r0
        if (xtal_state != BLE_RFCLK_STATE_SETTLED) {
   26256:	2802      	cmp	r0, #2
   26258:	d01e      	beq.n	26298 <ble_ll_scan_event_proc+0x16c>
            if (xtal_state == BLE_RFCLK_STATE_OFF) {
   2625a:	b9a8      	cbnz	r0, 26288 <ble_ll_scan_event_proc+0x15c>
                xtal_ticks = g_ble_ll_data.ll_xtal_ticks;
   2625c:	4b15      	ldr	r3, [pc, #84]	; (262b4 <ble_ll_scan_event_proc+0x188>)
   2625e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
            if (win != 0) {
   26262:	f1ba 0f00 	cmp.w	sl, #0
   26266:	d003      	beq.n	26270 <ble_ll_scan_event_proc+0x144>
                if ((win - dt) <= xtal_ticks)  {
   26268:	ebaa 0a0b 	sub.w	sl, sl, fp
   2626c:	45c2      	cmp	sl, r8
   2626e:	d902      	bls.n	26276 <ble_ll_scan_event_proc+0x14a>
            if (xtal_state == BLE_RFCLK_STATE_OFF) {
   26270:	b175      	cbz	r5, 26290 <ble_ll_scan_event_proc+0x164>
            next_event_time = now + xtal_ticks;
   26272:	eb08 0709 	add.w	r7, r8, r9
    OS_EXIT_CRITICAL(sr);
   26276:	4630      	mov	r0, r6
   26278:	f7ea f8ec 	bl	10454 <os_arch_restore_sr>
    os_cputime_timer_start(&scansm->scan_timer, next_event_time);
   2627c:	4639      	mov	r1, r7
   2627e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   26282:	f7ea fbf1 	bl	10a68 <os_cputime_timer_start>
   26286:	e762      	b.n	2614e <ble_ll_scan_event_proc+0x22>
                xtal_ticks = ble_ll_xcvr_rfclk_time_till_settled();
   26288:	f001 faee 	bl	27868 <ble_ll_xcvr_rfclk_time_till_settled>
   2628c:	4680      	mov	r8, r0
   2628e:	e7e8      	b.n	26262 <ble_ll_scan_event_proc+0x136>
                ble_ll_xcvr_rfclk_start_now(now);
   26290:	4648      	mov	r0, r9
   26292:	f001 fb07 	bl	278a4 <ble_ll_xcvr_rfclk_start_now>
   26296:	e7ec      	b.n	26272 <ble_ll_scan_event_proc+0x146>
        ble_ll_scan_start(scansm, NULL);
   26298:	2100      	movs	r1, #0
   2629a:	4620      	mov	r0, r4
   2629c:	f7ff fcb8 	bl	25c10 <ble_ll_scan_start>
        goto done;
   262a0:	e7e9      	b.n	26276 <ble_ll_scan_event_proc+0x14a>
         start_scan = 0;
   262a2:	2300      	movs	r3, #0
   262a4:	e7ae      	b.n	26204 <ble_ll_scan_event_proc+0xd8>
            next_event_time -= g_ble_ll_data.ll_xtal_ticks;
   262a6:	1abf      	subs	r7, r7, r2
            if (start_scan) {
   262a8:	2b00      	cmp	r3, #0
   262aa:	d0e4      	beq.n	26276 <ble_ll_scan_event_proc+0x14a>
                ble_ll_scan_rfclk_chk_stop();
   262ac:	f7ff faf4 	bl	25898 <ble_ll_scan_rfclk_chk_stop>
   262b0:	e7e1      	b.n	26276 <ble_ll_scan_event_proc+0x14a>
   262b2:	bf00      	nop
   262b4:	20003e20 	.word	0x20003e20

000262b8 <ble_ll_scan_clean_cur_aux_data>:
}
   262b8:	4770      	bx	lr
	...

000262bc <ble_ll_scan_sm_stop>:
{
   262bc:	b538      	push	{r3, r4, r5, lr}
   262be:	4605      	mov	r5, r0
    os_cputime_timer_stop(&scansm->scan_timer);
   262c0:	4c12      	ldr	r4, [pc, #72]	; (2630c <ble_ll_scan_sm_stop+0x50>)
   262c2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   262c6:	f7ea fbd3 	bl	10a70 <os_cputime_timer_stop>
    OS_ENTER_CRITICAL(sr);
   262ca:	f7ea f8bd 	bl	10448 <os_arch_save_sr>
    scansm->scan_enabled = 0;
   262ce:	2300      	movs	r3, #0
   262d0:	7023      	strb	r3, [r4, #0]
    scansm->restart_timer_needed = 0;
   262d2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    OS_EXIT_CRITICAL(sr);
   262d6:	f7ea f8bd 	bl	10454 <os_arch_restore_sr>
    if (chk_disable) {
   262da:	b905      	cbnz	r5, 262de <ble_ll_scan_sm_stop+0x22>
}
   262dc:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   262de:	f7ea f8b3 	bl	10448 <os_arch_save_sr>
   262e2:	4604      	mov	r4, r0
        lls = ble_ll_state_get();
   262e4:	f7f9 f886 	bl	1f3f4 <ble_ll_state_get>
        if ((lls == BLE_LL_STATE_SCANNING) ||
   262e8:	2802      	cmp	r0, #2
   262ea:	d007      	beq.n	262fc <ble_ll_scan_sm_stop+0x40>
   262ec:	2803      	cmp	r0, #3
   262ee:	d003      	beq.n	262f8 <ble_ll_scan_sm_stop+0x3c>
        OS_EXIT_CRITICAL(sr);
   262f0:	4620      	mov	r0, r4
   262f2:	f7ea f8af 	bl	10454 <os_arch_restore_sr>
}
   262f6:	e7f1      	b.n	262dc <ble_ll_scan_sm_stop+0x20>
                        (lls == BLE_LL_STATE_INITIATING && chk_disable == 1)) {
   262f8:	2d01      	cmp	r5, #1
   262fa:	d1f9      	bne.n	262f0 <ble_ll_scan_sm_stop+0x34>
            ble_phy_disable();
   262fc:	f002 f832 	bl	28364 <ble_phy_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   26300:	2000      	movs	r0, #0
   26302:	f7f9 f871 	bl	1f3e8 <ble_ll_state_set>
            ble_ll_scan_rfclk_chk_stop();
   26306:	f7ff fac7 	bl	25898 <ble_ll_scan_rfclk_chk_stop>
   2630a:	e7f1      	b.n	262f0 <ble_ll_scan_sm_stop+0x34>
   2630c:	20003680 	.word	0x20003680

00026310 <ble_ll_scan_rx_isr_start>:
{
   26310:	b510      	push	{r4, lr}
    scanphy = &scansm->phy_data[scansm->cur_phy];
   26312:	4a17      	ldr	r2, [pc, #92]	; (26370 <ble_ll_scan_rx_isr_start+0x60>)
   26314:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
    switch (scanphy->scan_type) {
   26318:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   2631c:	009c      	lsls	r4, r3, #2
   2631e:	4422      	add	r2, r4
   26320:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   26324:	2b01      	cmp	r3, #1
   26326:	d120      	bne.n	2636a <ble_ll_scan_rx_isr_start+0x5a>
        if ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   26328:	b118      	cbz	r0, 26332 <ble_ll_scan_rx_isr_start+0x22>
   2632a:	2806      	cmp	r0, #6
   2632c:	d00e      	beq.n	2634c <ble_ll_scan_rx_isr_start+0x3c>
    rc = 0;
   2632e:	2400      	movs	r4, #0
   26330:	e000      	b.n	26334 <ble_ll_scan_rx_isr_start+0x24>
            rc = 1;
   26332:	2401      	movs	r4, #1
        if (scansm->scan_rsp_pending) {
   26334:	4b0e      	ldr	r3, [pc, #56]	; (26370 <ble_ll_scan_rx_isr_start+0x60>)
   26336:	78db      	ldrb	r3, [r3, #3]
   26338:	b173      	cbz	r3, 26358 <ble_ll_scan_rx_isr_start+0x48>
            if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   2633a:	2804      	cmp	r0, #4
   2633c:	d008      	beq.n	26350 <ble_ll_scan_rx_isr_start+0x40>
            } else if (pdu_type == BLE_ADV_PDU_TYPE_AUX_SCAN_RSP) {
   2633e:	2807      	cmp	r0, #7
   26340:	d10e      	bne.n	26360 <ble_ll_scan_rx_isr_start+0x50>
                *rxflags |= BLE_MBUF_HDR_F_SCAN_RSP_CHK;
   26342:	880b      	ldrh	r3, [r1, #0]
   26344:	f043 0308 	orr.w	r3, r3, #8
   26348:	800b      	strh	r3, [r1, #0]
   2634a:	e005      	b.n	26358 <ble_ll_scan_rx_isr_start+0x48>
            rc = 1;
   2634c:	2401      	movs	r4, #1
   2634e:	e7f1      	b.n	26334 <ble_ll_scan_rx_isr_start+0x24>
                *rxflags |= BLE_MBUF_HDR_F_SCAN_RSP_CHK;
   26350:	880b      	ldrh	r3, [r1, #0]
   26352:	f043 0308 	orr.w	r3, r3, #8
   26356:	800b      	strh	r3, [r1, #0]
        ble_ll_wfr_disable();
   26358:	f7f8 ff66 	bl	1f228 <ble_ll_wfr_disable>
}
   2635c:	4620      	mov	r0, r4
   2635e:	bd10      	pop	{r4, pc}
                ble_ll_scan_req_backoff(scansm, 0);
   26360:	2100      	movs	r1, #0
   26362:	4803      	ldr	r0, [pc, #12]	; (26370 <ble_ll_scan_rx_isr_start+0x60>)
   26364:	f7ff fab2 	bl	258cc <ble_ll_scan_req_backoff>
   26368:	e7f6      	b.n	26358 <ble_ll_scan_rx_isr_start+0x48>
    rc = 0;
   2636a:	2400      	movs	r4, #0
    return rc;
   2636c:	e7f6      	b.n	2635c <ble_ll_scan_rx_isr_start+0x4c>
   2636e:	bf00      	nop
   26370:	20003680 	.word	0x20003680

00026374 <ble_ll_scan_adv_decode_addr>:
{
   26374:	b430      	push	{r4, r5}
   26376:	9c03      	ldr	r4, [sp, #12]
    if (pdu_type != BLE_ADV_PDU_TYPE_ADV_EXT_IND &&
   26378:	1fc2      	subs	r2, r0, #7
   2637a:	b2d2      	uxtb	r2, r2
   2637c:	2a01      	cmp	r2, #1
   2637e:	d921      	bls.n	263c4 <ble_ll_scan_adv_decode_addr+0x50>
        *addr_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK);
   26380:	780a      	ldrb	r2, [r1, #0]
    if (txrxflag) {
   26382:	f012 0f40 	tst.w	r2, #64	; 0x40
   26386:	d00d      	beq.n	263a4 <ble_ll_scan_adv_decode_addr+0x30>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   26388:	2501      	movs	r5, #1
   2638a:	9a02      	ldr	r2, [sp, #8]
   2638c:	7015      	strb	r5, [r2, #0]
        *addr = rxbuf + BLE_LL_PDU_HDR_LEN;
   2638e:	1c8a      	adds	r2, r1, #2
   26390:	601a      	str	r2, [r3, #0]
        if (!inita) {
   26392:	b1d4      	cbz	r4, 263ca <ble_ll_scan_adv_decode_addr+0x56>
        if (pdu_type != BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   26394:	2801      	cmp	r0, #1
   26396:	d007      	beq.n	263a8 <ble_ll_scan_adv_decode_addr+0x34>
            *inita = NULL;
   26398:	2000      	movs	r0, #0
   2639a:	6020      	str	r0, [r4, #0]
            *inita_type = 0;
   2639c:	9b04      	ldr	r3, [sp, #16]
   2639e:	7018      	strb	r0, [r3, #0]
}
   263a0:	bc30      	pop	{r4, r5}
   263a2:	4770      	bx	lr
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   263a4:	2500      	movs	r5, #0
   263a6:	e7f0      	b.n	2638a <ble_ll_scan_adv_decode_addr+0x16>
        *inita = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
   263a8:	f101 0308 	add.w	r3, r1, #8
   263ac:	6023      	str	r3, [r4, #0]
    if (txrxflag) {
   263ae:	f991 3000 	ldrsb.w	r3, [r1]
   263b2:	2b00      	cmp	r3, #0
   263b4:	db04      	blt.n	263c0 <ble_ll_scan_adv_decode_addr+0x4c>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   263b6:	2300      	movs	r3, #0
        *inita_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
   263b8:	9a04      	ldr	r2, [sp, #16]
   263ba:	7013      	strb	r3, [r2, #0]
        return 0;
   263bc:	2000      	movs	r0, #0
   263be:	e7ef      	b.n	263a0 <ble_ll_scan_adv_decode_addr+0x2c>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   263c0:	2301      	movs	r3, #1
   263c2:	e7f9      	b.n	263b8 <ble_ll_scan_adv_decode_addr+0x44>
    return -1;
   263c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   263c8:	e7ea      	b.n	263a0 <ble_ll_scan_adv_decode_addr+0x2c>
            return 0;
   263ca:	2000      	movs	r0, #0
   263cc:	e7e8      	b.n	263a0 <ble_ll_scan_adv_decode_addr+0x2c>
	...

000263d0 <ble_ll_scan_chk_resume>:
    if (scansm->scan_enabled) {
   263d0:	4b15      	ldr	r3, [pc, #84]	; (26428 <ble_ll_scan_chk_resume+0x58>)
   263d2:	781b      	ldrb	r3, [r3, #0]
   263d4:	b903      	cbnz	r3, 263d8 <ble_ll_scan_chk_resume+0x8>
   263d6:	4770      	bx	lr
{
   263d8:	b510      	push	{r4, lr}
        OS_ENTER_CRITICAL(sr);
   263da:	f7ea f835 	bl	10448 <os_arch_save_sr>
   263de:	4604      	mov	r4, r0
        if (scansm->restart_timer_needed) {
   263e0:	4b11      	ldr	r3, [pc, #68]	; (26428 <ble_ll_scan_chk_resume+0x58>)
   263e2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
   263e6:	b933      	cbnz	r3, 263f6 <ble_ll_scan_chk_resume+0x26>
        if (ble_ll_state_get() == BLE_LL_STATE_STANDBY &&
   263e8:	f7f9 f804 	bl	1f3f4 <ble_ll_state_get>
   263ec:	b170      	cbz	r0, 2640c <ble_ll_scan_chk_resume+0x3c>
        OS_EXIT_CRITICAL(sr);
   263ee:	4620      	mov	r0, r4
   263f0:	f7ea f830 	bl	10454 <os_arch_restore_sr>
}
   263f4:	bd10      	pop	{r4, pc}
            scansm->restart_timer_needed = 0;
   263f6:	480c      	ldr	r0, [pc, #48]	; (26428 <ble_ll_scan_chk_resume+0x58>)
   263f8:	2300      	movs	r3, #0
   263fa:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
            ble_ll_event_send(&scansm->scan_sched_ev);
   263fe:	3030      	adds	r0, #48	; 0x30
   26400:	f7f8 fffe 	bl	1f400 <ble_ll_event_send>
            OS_EXIT_CRITICAL(sr);
   26404:	4620      	mov	r0, r4
   26406:	f7ea f825 	bl	10454 <os_arch_restore_sr>
            return;
   2640a:	e7f3      	b.n	263f4 <ble_ll_scan_chk_resume+0x24>
                    ble_ll_scan_window_chk(scansm, os_cputime_get32()) == 0) {
   2640c:	f7ea fb34 	bl	10a78 <os_cputime_get32>
   26410:	4601      	mov	r1, r0
   26412:	4805      	ldr	r0, [pc, #20]	; (26428 <ble_ll_scan_chk_resume+0x58>)
   26414:	f7ff fbca 	bl	25bac <ble_ll_scan_window_chk>
        if (ble_ll_state_get() == BLE_LL_STATE_STANDBY &&
   26418:	2800      	cmp	r0, #0
   2641a:	d1e8      	bne.n	263ee <ble_ll_scan_chk_resume+0x1e>
            ble_ll_scan_start(scansm, NULL);
   2641c:	2100      	movs	r1, #0
   2641e:	4802      	ldr	r0, [pc, #8]	; (26428 <ble_ll_scan_chk_resume+0x58>)
   26420:	f7ff fbf6 	bl	25c10 <ble_ll_scan_start>
   26424:	e7e3      	b.n	263ee <ble_ll_scan_chk_resume+0x1e>
   26426:	bf00      	nop
   26428:	20003680 	.word	0x20003680

0002642c <ble_ll_scan_interrupted_event_cb>:
{
   2642c:	b508      	push	{r3, lr}
    if (!scansm->scan_enabled) {
   2642e:	4b07      	ldr	r3, [pc, #28]	; (2644c <ble_ll_scan_interrupted_event_cb+0x20>)
   26430:	781b      	ldrb	r3, [r3, #0]
   26432:	b123      	cbz	r3, 2643e <ble_ll_scan_interrupted_event_cb+0x12>
    if (scansm->scan_rsp_pending) {
   26434:	4b05      	ldr	r3, [pc, #20]	; (2644c <ble_ll_scan_interrupted_event_cb+0x20>)
   26436:	78db      	ldrb	r3, [r3, #3]
   26438:	b913      	cbnz	r3, 26440 <ble_ll_scan_interrupted_event_cb+0x14>
    ble_ll_scan_chk_resume();
   2643a:	f7ff ffc9 	bl	263d0 <ble_ll_scan_chk_resume>
}
   2643e:	bd08      	pop	{r3, pc}
        ble_ll_scan_req_backoff(scansm, 0);
   26440:	2100      	movs	r1, #0
   26442:	4802      	ldr	r0, [pc, #8]	; (2644c <ble_ll_scan_interrupted_event_cb+0x20>)
   26444:	f7ff fa42 	bl	258cc <ble_ll_scan_req_backoff>
   26448:	e7f7      	b.n	2643a <ble_ll_scan_interrupted_event_cb+0xe>
   2644a:	bf00      	nop
   2644c:	20003680 	.word	0x20003680

00026450 <ble_ll_scan_interrupted>:
{
   26450:	b508      	push	{r3, lr}
    ble_ll_event_send(&scansm->scan_interrupted_ev);
   26452:	3058      	adds	r0, #88	; 0x58
   26454:	f7f8 ffd4 	bl	1f400 <ble_ll_event_send>
}
   26458:	bd08      	pop	{r3, pc}
	...

0002645c <ble_ll_scan_rx_isr_end>:
{
   2645c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26460:	b08a      	sub	sp, #40	; 0x28
    uint8_t peer_addr_type = 0;
   26462:	2300      	movs	r3, #0
   26464:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    uint8_t *peer = NULL;
   26468:	9308      	str	r3, [sp, #32]
    uint8_t *inita = NULL;
   2646a:	9307      	str	r3, [sp, #28]
    uint8_t inita_type = 0;
   2646c:	f88d 301b 	strb.w	r3, [sp, #27]
    int ext_adv_mode = -1;
   26470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26474:	9305      	str	r3, [sp, #20]
    scanphy = &scansm->phy_data[scansm->cur_phy];
   26476:	4b9b      	ldr	r3, [pc, #620]	; (266e4 <ble_ll_scan_rx_isr_end+0x288>)
   26478:	f893 7068 	ldrb.w	r7, [r3, #104]	; 0x68
    if (rxpdu == NULL) {
   2647c:	b320      	cbz	r0, 264c8 <ble_ll_scan_rx_isr_end+0x6c>
   2647e:	4606      	mov	r6, r0
    ble_hdr = BLE_MBUF_HDR_PTR(rxpdu);
   26480:	f100 0218 	add.w	r2, r0, #24
    rxbuf = rxpdu->om_data;
   26484:	6804      	ldr	r4, [r0, #0]
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   26486:	7820      	ldrb	r0, [r4, #0]
   26488:	f000 050f 	and.w	r5, r0, #15
    if (!crcok) {
   2648c:	2900      	cmp	r1, #0
   2648e:	f000 810a 	beq.w	266a6 <ble_ll_scan_rx_isr_end+0x24a>
    if (ble_ll_scan_adv_decode_addr(pdu_type, rxbuf, ble_hdr,
   26492:	ab05      	add	r3, sp, #20
   26494:	9303      	str	r3, [sp, #12]
   26496:	f10d 031b 	add.w	r3, sp, #27
   2649a:	9302      	str	r3, [sp, #8]
   2649c:	ab07      	add	r3, sp, #28
   2649e:	9301      	str	r3, [sp, #4]
   264a0:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   264a4:	9300      	str	r3, [sp, #0]
   264a6:	ab08      	add	r3, sp, #32
   264a8:	4621      	mov	r1, r4
   264aa:	4628      	mov	r0, r5
   264ac:	f7ff ff62 	bl	26374 <ble_ll_scan_adv_decode_addr>
   264b0:	4604      	mov	r4, r0
   264b2:	2800      	cmp	r0, #0
   264b4:	f040 8100 	bne.w	266b8 <ble_ll_scan_rx_isr_end+0x25c>
    switch (pdu_type) {
   264b8:	2d06      	cmp	r5, #6
   264ba:	d854      	bhi.n	26566 <ble_ll_scan_rx_isr_end+0x10a>
   264bc:	e8df f005 	tbb	[pc, r5]
   264c0:	53090947 	.word	0x53090947
   264c4:	5353      	.short	0x5353
   264c6:	47          	.byte	0x47
   264c7:	00          	.byte	0x00
        ble_ll_scan_interrupted(scansm);
   264c8:	4618      	mov	r0, r3
   264ca:	f7ff ffc1 	bl	26450 <ble_ll_scan_interrupted>
        return 0;
   264ce:	2400      	movs	r4, #0
   264d0:	e0ee      	b.n	266b0 <ble_ll_scan_rx_isr_end+0x254>
    chk_send_req = 0;
   264d2:	4680      	mov	r8, r0
        chk_wl = 1;
   264d4:	2501      	movs	r5, #1
    adv_addr = peer;
   264d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
    addr_type = peer_addr_type;
   264da:	f89d a027 	ldrb.w	sl, [sp, #39]	; 0x27
    if ((scanphy->scan_filt_policy & 1) == 0) {
   264de:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   264e2:	009a      	lsls	r2, r3, #2
   264e4:	4b7f      	ldr	r3, [pc, #508]	; (266e4 <ble_ll_scan_rx_isr_end+0x288>)
   264e6:	4413      	add	r3, r2
   264e8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
   264ec:	f013 0f01 	tst.w	r3, #1
   264f0:	d100      	bne.n	264f4 <ble_ll_scan_rx_isr_end+0x98>
        chk_wl = 0;
   264f2:	4625      	mov	r5, r4
    if (ble_ll_resolv_enabled()) {
   264f4:	f7ff f962 	bl	257bc <ble_ll_resolv_enabled>
   264f8:	2800      	cmp	r0, #0
   264fa:	d13a      	bne.n	26572 <ble_ll_scan_rx_isr_end+0x116>
    index = -1;
   264fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    scansm->scan_rpa_index = index;
   26500:	4b78      	ldr	r3, [pc, #480]	; (266e4 <ble_ll_scan_rx_isr_end+0x288>)
   26502:	719f      	strb	r7, [r3, #6]
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   26504:	2d00      	cmp	r5, #0
   26506:	f040 80aa 	bne.w	2665e <ble_ll_scan_rx_isr_end+0x202>
    ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_DEVMATCH;
   2650a:	8b33      	ldrh	r3, [r6, #24]
   2650c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26510:	8333      	strh	r3, [r6, #24]
    if (chk_send_req) {
   26512:	f1b8 0f00 	cmp.w	r8, #0
   26516:	f000 80de 	beq.w	266d6 <ble_ll_scan_rx_isr_end+0x27a>
        if (ble_ll_scan_have_rxd_scan_rsp(peer, peer_addr_type, 0, 0)) {
   2651a:	2300      	movs	r3, #0
   2651c:	461a      	mov	r2, r3
   2651e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
   26522:	9808      	ldr	r0, [sp, #32]
   26524:	f7ff fa1e 	bl	25964 <ble_ll_scan_have_rxd_scan_rsp>
   26528:	2800      	cmp	r0, #0
   2652a:	f040 80d7 	bne.w	266dc <ble_ll_scan_rx_isr_end+0x280>
        BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   2652e:	4b6d      	ldr	r3, [pc, #436]	; (266e4 <ble_ll_scan_rx_isr_end+0x288>)
   26530:	78db      	ldrb	r3, [r3, #3]
   26532:	2b00      	cmp	r3, #0
   26534:	f040 809f 	bne.w	26676 <ble_ll_scan_rx_isr_end+0x21a>
        --scansm->backoff_count;
   26538:	4a6a      	ldr	r2, [pc, #424]	; (266e4 <ble_ll_scan_rx_isr_end+0x288>)
   2653a:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
   2653c:	3b01      	subs	r3, #1
   2653e:	b29b      	uxth	r3, r3
   26540:	8553      	strh	r3, [r2, #42]	; 0x2a
        if (scansm->backoff_count == 0) {
   26542:	2b00      	cmp	r3, #0
   26544:	f000 809d 	beq.w	26682 <ble_ll_scan_rx_isr_end+0x226>
    rc = -1;
   26548:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2654c:	e0ad      	b.n	266aa <ble_ll_scan_rx_isr_end+0x24e>
        if (scanphy->scan_type == BLE_SCAN_TYPE_ACTIVE) {
   2654e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   26552:	009a      	lsls	r2, r3, #2
   26554:	4b63      	ldr	r3, [pc, #396]	; (266e4 <ble_ll_scan_rx_isr_end+0x288>)
   26556:	4413      	add	r3, r2
   26558:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   2655c:	2b01      	cmp	r3, #1
   2655e:	d005      	beq.n	2656c <ble_ll_scan_rx_isr_end+0x110>
    chk_send_req = 0;
   26560:	4680      	mov	r8, r0
        chk_wl = 1;
   26562:	2501      	movs	r5, #1
   26564:	e7b7      	b.n	264d6 <ble_ll_scan_rx_isr_end+0x7a>
        chk_wl = 0;
   26566:	4605      	mov	r5, r0
    chk_send_req = 0;
   26568:	4680      	mov	r8, r0
   2656a:	e7b4      	b.n	264d6 <ble_ll_scan_rx_isr_end+0x7a>
        chk_wl = 1;
   2656c:	2501      	movs	r5, #1
            chk_send_req = 1;
   2656e:	46a8      	mov	r8, r5
   26570:	e7b1      	b.n	264d6 <ble_ll_scan_rx_isr_end+0x7a>
        if (ble_ll_is_rpa(peer, peer_addr_type)) {
   26572:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
   26576:	9808      	ldr	r0, [sp, #32]
   26578:	f7f8 fd9e 	bl	1f0b8 <ble_ll_is_rpa>
   2657c:	4604      	mov	r4, r0
   2657e:	b978      	cbnz	r0, 265a0 <ble_ll_scan_rx_isr_end+0x144>
        } else if (chk_send_req && inita && ble_ll_is_rpa(inita, inita_type)) {
   26580:	f1b8 0f00 	cmp.w	r8, #0
   26584:	d064      	beq.n	26650 <ble_ll_scan_rx_isr_end+0x1f4>
   26586:	9807      	ldr	r0, [sp, #28]
   26588:	2800      	cmp	r0, #0
   2658a:	d065      	beq.n	26658 <ble_ll_scan_rx_isr_end+0x1fc>
   2658c:	f89d 101b 	ldrb.w	r1, [sp, #27]
   26590:	f7f8 fd92 	bl	1f0b8 <ble_ll_is_rpa>
   26594:	2800      	cmp	r0, #0
   26596:	d142      	bne.n	2661e <ble_ll_scan_rx_isr_end+0x1c2>
    resolved = 0;
   26598:	4604      	mov	r4, r0
    index = -1;
   2659a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2659e:	e7af      	b.n	26500 <ble_ll_scan_rx_isr_end+0xa4>
            index = ble_hw_resolv_list_match();
   265a0:	f001 fb38 	bl	27c14 <ble_hw_resolv_list_match>
            if (index >= 0) {
   265a4:	1e07      	subs	r7, r0, #0
   265a6:	da12      	bge.n	265ce <ble_ll_scan_rx_isr_end+0x172>
                if (chk_wl) {
   265a8:	2d00      	cmp	r5, #0
   265aa:	f040 808b 	bne.w	266c4 <ble_ll_scan_rx_isr_end+0x268>
                if (chk_send_req && inita && ble_ll_is_rpa(inita, inita_type)) {
   265ae:	f1b8 0f00 	cmp.w	r8, #0
   265b2:	d049      	beq.n	26648 <ble_ll_scan_rx_isr_end+0x1ec>
   265b4:	9807      	ldr	r0, [sp, #28]
   265b6:	2800      	cmp	r0, #0
   265b8:	d048      	beq.n	2664c <ble_ll_scan_rx_isr_end+0x1f0>
   265ba:	f89d 101b 	ldrb.w	r1, [sp, #27]
   265be:	f7f8 fd7b 	bl	1f0b8 <ble_ll_is_rpa>
   265c2:	4604      	mov	r4, r0
   265c4:	2800      	cmp	r0, #0
   265c6:	d09b      	beq.n	26500 <ble_ll_scan_rx_isr_end+0xa4>
    rc = -1;
   265c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   265cc:	e06d      	b.n	266aa <ble_ll_scan_rx_isr_end+0x24e>
                ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_RESOLVED;
   265ce:	8b33      	ldrh	r3, [r6, #24]
   265d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   265d4:	8333      	strh	r3, [r6, #24]
                peer = g_ble_ll_resolv_list[index].rl_identity_addr;
   265d6:	2235      	movs	r2, #53	; 0x35
   265d8:	fb02 f207 	mul.w	r2, r2, r7
   265dc:	f102 0320 	add.w	r3, r2, #32
   265e0:	4941      	ldr	r1, [pc, #260]	; (266e8 <ble_ll_scan_rx_isr_end+0x28c>)
   265e2:	440b      	add	r3, r1
   265e4:	3303      	adds	r3, #3
   265e6:	9308      	str	r3, [sp, #32]
                peer_addr_type = g_ble_ll_resolv_list[index].rl_addr_type;
   265e8:	5c8b      	ldrb	r3, [r1, r2]
   265ea:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
                if (ble_ll_is_rpa(inita, inita_type)) {
   265ee:	f89d 101b 	ldrb.w	r1, [sp, #27]
   265f2:	9807      	ldr	r0, [sp, #28]
   265f4:	f7f8 fd60 	bl	1f0b8 <ble_ll_is_rpa>
   265f8:	b908      	cbnz	r0, 265fe <ble_ll_scan_rx_isr_end+0x1a2>
                resolved = 1;
   265fa:	2401      	movs	r4, #1
   265fc:	e780      	b.n	26500 <ble_ll_scan_rx_isr_end+0xa4>
                    if (!ble_ll_resolv_rpa(inita, g_ble_ll_resolv_list[index].rl_local_irk)) {
   265fe:	2135      	movs	r1, #53	; 0x35
   26600:	4b39      	ldr	r3, [pc, #228]	; (266e8 <ble_ll_scan_rx_isr_end+0x28c>)
   26602:	fb01 3107 	mla	r1, r1, r7, r3
   26606:	3103      	adds	r1, #3
   26608:	9807      	ldr	r0, [sp, #28]
   2660a:	f7ff f8a3 	bl	25754 <ble_ll_resolv_rpa>
   2660e:	2800      	cmp	r0, #0
   26610:	d055      	beq.n	266be <ble_ll_scan_rx_isr_end+0x262>
                    ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_INITA_RESOLVED;
   26612:	8b33      	ldrh	r3, [r6, #24]
   26614:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   26618:	8333      	strh	r3, [r6, #24]
                resolved = 1;
   2661a:	2401      	movs	r4, #1
   2661c:	e770      	b.n	26500 <ble_ll_scan_rx_isr_end+0xa4>
            rl = ble_ll_resolv_list_find(peer, peer_addr_type);
   2661e:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
   26622:	9808      	ldr	r0, [sp, #32]
   26624:	f7fe ff0c 	bl	25440 <ble_ll_resolv_list_find>
            if (!rl) {
   26628:	4601      	mov	r1, r0
   2662a:	2800      	cmp	r0, #0
   2662c:	d04d      	beq.n	266ca <ble_ll_scan_rx_isr_end+0x26e>
            if (!ble_ll_resolv_rpa(inita, rl->rl_local_irk)) {
   2662e:	3103      	adds	r1, #3
   26630:	9807      	ldr	r0, [sp, #28]
   26632:	f7ff f88f 	bl	25754 <ble_ll_resolv_rpa>
   26636:	2800      	cmp	r0, #0
   26638:	d04a      	beq.n	266d0 <ble_ll_scan_rx_isr_end+0x274>
            ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_INITA_RESOLVED;
   2663a:	8b33      	ldrh	r3, [r6, #24]
   2663c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   26640:	8333      	strh	r3, [r6, #24]
    index = -1;
   26642:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   26646:	e75b      	b.n	26500 <ble_ll_scan_rx_isr_end+0xa4>
    resolved = 0;
   26648:	4644      	mov	r4, r8
   2664a:	e759      	b.n	26500 <ble_ll_scan_rx_isr_end+0xa4>
   2664c:	462c      	mov	r4, r5
   2664e:	e757      	b.n	26500 <ble_ll_scan_rx_isr_end+0xa4>
   26650:	4644      	mov	r4, r8
    index = -1;
   26652:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   26656:	e753      	b.n	26500 <ble_ll_scan_rx_isr_end+0xa4>
   26658:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2665c:	e750      	b.n	26500 <ble_ll_scan_rx_isr_end+0xa4>
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   2665e:	4622      	mov	r2, r4
   26660:	f89d 1027 	ldrb.w	r1, [sp, #39]	; 0x27
   26664:	9808      	ldr	r0, [sp, #32]
   26666:	f001 f855 	bl	27714 <ble_ll_whitelist_match>
   2666a:	2800      	cmp	r0, #0
   2666c:	f47f af4d 	bne.w	2650a <ble_ll_scan_rx_isr_end+0xae>
    rc = -1;
   26670:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   26674:	e019      	b.n	266aa <ble_ll_scan_rx_isr_end+0x24e>
        BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   26676:	2300      	movs	r3, #0
   26678:	461a      	mov	r2, r3
   2667a:	4619      	mov	r1, r3
   2667c:	4618      	mov	r0, r3
   2667e:	f7e9 ffad 	bl	105dc <__assert_func>
            ble_ll_scan_req_pdu_prepare(scansm, adv_addr, addr_type);
   26682:	4614      	mov	r4, r2
   26684:	4652      	mov	r2, sl
   26686:	4649      	mov	r1, r9
   26688:	4620      	mov	r0, r4
   2668a:	f7ff fa13 	bl	25ab4 <ble_ll_scan_req_pdu_prepare>
            rc = ble_phy_tx(ble_ll_scan_req_tx_pducb, scansm,
   2668e:	2202      	movs	r2, #2
   26690:	4621      	mov	r1, r4
   26692:	4816      	ldr	r0, [pc, #88]	; (266ec <ble_ll_scan_rx_isr_end+0x290>)
   26694:	f002 f84a 	bl	2872c <ble_phy_tx>
            if (rc == 0) {
   26698:	4604      	mov	r4, r0
   2669a:	b910      	cbnz	r0, 266a2 <ble_ll_scan_rx_isr_end+0x246>
                scansm->scan_rsp_pending = 1;
   2669c:	4b11      	ldr	r3, [pc, #68]	; (266e4 <ble_ll_scan_rx_isr_end+0x288>)
   2669e:	2201      	movs	r2, #1
   266a0:	70da      	strb	r2, [r3, #3]
    if (rc) {
   266a2:	b914      	cbnz	r4, 266aa <ble_ll_scan_rx_isr_end+0x24e>
   266a4:	e004      	b.n	266b0 <ble_ll_scan_rx_isr_end+0x254>
    rc = -1;
   266a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   266aa:	2000      	movs	r0, #0
   266ac:	f7f8 fe9c 	bl	1f3e8 <ble_ll_state_set>
}
   266b0:	4620      	mov	r0, r4
   266b2:	b00a      	add	sp, #40	; 0x28
   266b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rc = -1;
   266b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   266bc:	e7f5      	b.n	266aa <ble_ll_scan_rx_isr_end+0x24e>
   266be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   266c2:	e7f2      	b.n	266aa <ble_ll_scan_rx_isr_end+0x24e>
   266c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   266c8:	e7ef      	b.n	266aa <ble_ll_scan_rx_isr_end+0x24e>
   266ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   266ce:	e7ec      	b.n	266aa <ble_ll_scan_rx_isr_end+0x24e>
   266d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   266d4:	e7e9      	b.n	266aa <ble_ll_scan_rx_isr_end+0x24e>
   266d6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   266da:	e7e6      	b.n	266aa <ble_ll_scan_rx_isr_end+0x24e>
   266dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   266e0:	e7e3      	b.n	266aa <ble_ll_scan_rx_isr_end+0x24e>
   266e2:	bf00      	nop
   266e4:	20003680 	.word	0x20003680
   266e8:	20004160 	.word	0x20004160
   266ec:	0002593d 	.word	0x0002593d

000266f0 <ble_ll_scan_wfr_timer_exp>:
{
   266f0:	b510      	push	{r4, lr}
   266f2:	b082      	sub	sp, #8
    if (scansm->cur_aux_data) {
   266f4:	4b19      	ldr	r3, [pc, #100]	; (2675c <ble_ll_scan_wfr_timer_exp+0x6c>)
   266f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   266f8:	b1d3      	cbz	r3, 26730 <ble_ll_scan_wfr_timer_exp+0x40>
        ble_ll_scan_interrupted(scansm);
   266fa:	4c18      	ldr	r4, [pc, #96]	; (2675c <ble_ll_scan_wfr_timer_exp+0x6c>)
   266fc:	4620      	mov	r0, r4
   266fe:	f7ff fea7 	bl	26450 <ble_ll_scan_interrupted>
        ble_phy_disable();
   26702:	f001 fe2f 	bl	28364 <ble_phy_disable>
        if (ble_ll_scan_window_chk(scansm, os_cputime_get32()) == 1) {
   26706:	f7ea f9b7 	bl	10a78 <os_cputime_get32>
   2670a:	4601      	mov	r1, r0
   2670c:	4620      	mov	r0, r4
   2670e:	f7ff fa4d 	bl	25bac <ble_ll_scan_window_chk>
   26712:	2801      	cmp	r0, #1
   26714:	d013      	beq.n	2673e <ble_ll_scan_wfr_timer_exp+0x4e>
        ble_ll_get_chan_to_scan(scansm, &chan, &phy);
   26716:	466a      	mov	r2, sp
   26718:	f10d 0107 	add.w	r1, sp, #7
   2671c:	480f      	ldr	r0, [pc, #60]	; (2675c <ble_ll_scan_wfr_timer_exp+0x6c>)
   2671e:	f7ff f8a3 	bl	25868 <ble_ll_get_chan_to_scan>
        rc = ble_phy_setchan(chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   26722:	4a0f      	ldr	r2, [pc, #60]	; (26760 <ble_ll_scan_wfr_timer_exp+0x70>)
   26724:	490f      	ldr	r1, [pc, #60]	; (26764 <ble_ll_scan_wfr_timer_exp+0x74>)
   26726:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2672a:	f001 fdcd 	bl	282c8 <ble_phy_setchan>
        BLE_LL_ASSERT(rc == 0);
   2672e:	b950      	cbnz	r0, 26746 <ble_ll_scan_wfr_timer_exp+0x56>
    if (scansm->scan_rsp_pending) {
   26730:	4b0a      	ldr	r3, [pc, #40]	; (2675c <ble_ll_scan_wfr_timer_exp+0x6c>)
   26732:	78db      	ldrb	r3, [r3, #3]
   26734:	b96b      	cbnz	r3, 26752 <ble_ll_scan_wfr_timer_exp+0x62>
    ble_phy_restart_rx();
   26736:	f001 ffd1 	bl	286dc <ble_phy_restart_rx>
}
   2673a:	b002      	add	sp, #8
   2673c:	bd10      	pop	{r4, pc}
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   2673e:	2000      	movs	r0, #0
   26740:	f7f8 fe52 	bl	1f3e8 <ble_ll_state_set>
   26744:	e7f9      	b.n	2673a <ble_ll_scan_wfr_timer_exp+0x4a>
        BLE_LL_ASSERT(rc == 0);
   26746:	2300      	movs	r3, #0
   26748:	461a      	mov	r2, r3
   2674a:	4619      	mov	r1, r3
   2674c:	4618      	mov	r0, r3
   2674e:	f7e9 ff45 	bl	105dc <__assert_func>
        ble_ll_scan_req_backoff(scansm, 0);
   26752:	2100      	movs	r1, #0
   26754:	4801      	ldr	r0, [pc, #4]	; (2675c <ble_ll_scan_wfr_timer_exp+0x6c>)
   26756:	f7ff f8b9 	bl	258cc <ble_ll_scan_req_backoff>
   2675a:	e7ec      	b.n	26736 <ble_ll_scan_wfr_timer_exp+0x46>
   2675c:	20003680 	.word	0x20003680
   26760:	00555555 	.word	0x00555555
   26764:	8e89bed6 	.word	0x8e89bed6

00026768 <ble_ll_scan_rx_pkt_in>:
{
   26768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2676c:	b088      	sub	sp, #32
   2676e:	460e      	mov	r6, r1
    uint8_t *rxbuf = om->om_data;
   26770:	6809      	ldr	r1, [r1, #0]
    uint8_t *adv_addr = NULL;
   26772:	2300      	movs	r3, #0
   26774:	9307      	str	r3, [sp, #28]
    uint8_t *init_addr = NULL;
   26776:	9306      	str	r3, [sp, #24]
    uint8_t init_addr_type = 0;
   26778:	f88d 3017 	strb.w	r3, [sp, #23]
    uint8_t txadd = 0;
   2677c:	f88d 3016 	strb.w	r3, [sp, #22]
    int ext_adv_mode = -1;
   26780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26784:	9304      	str	r3, [sp, #16]
    scan_rsp_chk = BLE_MBUF_HDR_SCAN_RSP_RCV(hdr);
   26786:	8813      	ldrh	r3, [r2, #0]
   26788:	f003 0708 	and.w	r7, r3, #8
    if (!BLE_MBUF_HDR_CRC_OK(hdr)) {
   2678c:	f013 0f80 	tst.w	r3, #128	; 0x80
   26790:	d005      	beq.n	2679e <ble_ll_scan_rx_pkt_in+0x36>
   26792:	4605      	mov	r5, r0
   26794:	4614      	mov	r4, r2
    if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) || (ptype == BLE_ADV_PDU_TYPE_CONNECT_IND)) {
   26796:	2803      	cmp	r0, #3
   26798:	d001      	beq.n	2679e <ble_ll_scan_rx_pkt_in+0x36>
   2679a:	2805      	cmp	r0, #5
   2679c:	d10a      	bne.n	267b4 <ble_ll_scan_rx_pkt_in+0x4c>
    if (scansm->scan_rsp_pending && scan_rsp_chk) {
   2679e:	4b65      	ldr	r3, [pc, #404]	; (26934 <ble_ll_scan_rx_pkt_in+0x1cc>)
   267a0:	78db      	ldrb	r3, [r3, #3]
   267a2:	b113      	cbz	r3, 267aa <ble_ll_scan_rx_pkt_in+0x42>
   267a4:	2f00      	cmp	r7, #0
   267a6:	f040 80bf 	bne.w	26928 <ble_ll_scan_rx_pkt_in+0x1c0>
    ble_ll_scan_chk_resume();
   267aa:	f7ff fe11 	bl	263d0 <ble_ll_scan_chk_resume>
}
   267ae:	b008      	add	sp, #32
   267b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ble_ll_scan_adv_decode_addr(ptype, rxbuf, hdr,
   267b4:	ab04      	add	r3, sp, #16
   267b6:	9303      	str	r3, [sp, #12]
   267b8:	f10d 0317 	add.w	r3, sp, #23
   267bc:	9302      	str	r3, [sp, #8]
   267be:	ab06      	add	r3, sp, #24
   267c0:	9301      	str	r3, [sp, #4]
   267c2:	f10d 0316 	add.w	r3, sp, #22
   267c6:	9300      	str	r3, [sp, #0]
   267c8:	ab07      	add	r3, sp, #28
   267ca:	f7ff fdd3 	bl	26374 <ble_ll_scan_adv_decode_addr>
   267ce:	2800      	cmp	r0, #0
   267d0:	d1e5      	bne.n	2679e <ble_ll_scan_rx_pkt_in+0x36>
    ident_addr = adv_addr;
   267d2:	f8dd 801c 	ldr.w	r8, [sp, #28]
    ident_addr_type = txadd;
   267d6:	f89d 9016 	ldrb.w	r9, [sp, #22]
    index = scansm->scan_rpa_index;
   267da:	4b56      	ldr	r3, [pc, #344]	; (26934 <ble_ll_scan_rx_pkt_in+0x1cc>)
   267dc:	f993 a006 	ldrsb.w	sl, [r3, #6]
    if (index >= 0) {
   267e0:	f1ba 0f00 	cmp.w	sl, #0
   267e4:	da25      	bge.n	26832 <ble_ll_scan_rx_pkt_in+0xca>
    } else if (init_addr && ble_ll_resolv_enabled() && ble_ll_is_rpa(init_addr, init_addr_type)) {
   267e6:	9b06      	ldr	r3, [sp, #24]
   267e8:	b3a3      	cbz	r3, 26854 <ble_ll_scan_rx_pkt_in+0xec>
   267ea:	f7fe ffe7 	bl	257bc <ble_ll_resolv_enabled>
   267ee:	b388      	cbz	r0, 26854 <ble_ll_scan_rx_pkt_in+0xec>
   267f0:	f89d 1017 	ldrb.w	r1, [sp, #23]
   267f4:	9806      	ldr	r0, [sp, #24]
   267f6:	f7f8 fc5f 	bl	1f0b8 <ble_ll_is_rpa>
   267fa:	b358      	cbz	r0, 26854 <ble_ll_scan_rx_pkt_in+0xec>
        rl = ble_ll_resolv_list_find(ident_addr, ident_addr_type);
   267fc:	4649      	mov	r1, r9
   267fe:	4640      	mov	r0, r8
   26800:	f7fe fe1e 	bl	25440 <ble_ll_resolv_list_find>
        if (rl && ble_ll_resolv_rpa(init_addr, rl->rl_local_irk)) {
   26804:	4601      	mov	r1, r0
   26806:	b328      	cbz	r0, 26854 <ble_ll_scan_rx_pkt_in+0xec>
   26808:	3103      	adds	r1, #3
   2680a:	9806      	ldr	r0, [sp, #24]
   2680c:	f7fe ffa2 	bl	25754 <ble_ll_resolv_rpa>
   26810:	b300      	cbz	r0, 26854 <ble_ll_scan_rx_pkt_in+0xec>
            init_addr = ble_ll_get_our_devaddr(scansm->own_addr_type & 1);
   26812:	f8df a120 	ldr.w	sl, [pc, #288]	; 26934 <ble_ll_scan_rx_pkt_in+0x1cc>
   26816:	f89a 0001 	ldrb.w	r0, [sl, #1]
   2681a:	f000 0001 	and.w	r0, r0, #1
   2681e:	f7f8 fcdb 	bl	1f1d8 <ble_ll_get_our_devaddr>
   26822:	9006      	str	r0, [sp, #24]
            init_addr_type = scansm->own_addr_type & 1;
   26824:	f89a 3001 	ldrb.w	r3, [sl, #1]
   26828:	f003 0301 	and.w	r3, r3, #1
   2682c:	f88d 3017 	strb.w	r3, [sp, #23]
   26830:	e010      	b.n	26854 <ble_ll_scan_rx_pkt_in+0xec>
        ident_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   26832:	2335      	movs	r3, #53	; 0x35
   26834:	fb03 f30a 	mul.w	r3, r3, sl
   26838:	f103 0820 	add.w	r8, r3, #32
   2683c:	4a3e      	ldr	r2, [pc, #248]	; (26938 <ble_ll_scan_rx_pkt_in+0x1d0>)
   2683e:	4490      	add	r8, r2
   26840:	f108 0803 	add.w	r8, r8, #3
        ident_addr_type = g_ble_ll_resolv_list[index].rl_addr_type;
   26844:	f812 9003 	ldrb.w	r9, [r2, r3]
        if (ble_ll_is_rpa(init_addr, init_addr_type)) {
   26848:	f89d 1017 	ldrb.w	r1, [sp, #23]
   2684c:	9806      	ldr	r0, [sp, #24]
   2684e:	f7f8 fc33 	bl	1f0b8 <ble_ll_is_rpa>
   26852:	bb48      	cbnz	r0, 268a8 <ble_ll_scan_rx_pkt_in+0x140>
                                      BLE_MBUF_HDR_DEVMATCH(hdr))) {
   26854:	8823      	ldrh	r3, [r4, #0]
    if (ble_ll_scan_chk_filter_policy(ptype, adv_addr, txadd, init_addr,
   26856:	f89d 2016 	ldrb.w	r2, [sp, #22]
   2685a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   2685e:	9301      	str	r3, [sp, #4]
   26860:	f89d 3017 	ldrb.w	r3, [sp, #23]
   26864:	9300      	str	r3, [sp, #0]
   26866:	9b06      	ldr	r3, [sp, #24]
   26868:	9907      	ldr	r1, [sp, #28]
   2686a:	4628      	mov	r0, r5
   2686c:	f7ff fa50 	bl	25d10 <ble_ll_scan_chk_filter_policy>
   26870:	2800      	cmp	r0, #0
   26872:	d194      	bne.n	2679e <ble_ll_scan_rx_pkt_in+0x36>
    if (ptype == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   26874:	2d04      	cmp	r5, #4
   26876:	d031      	beq.n	268dc <ble_ll_scan_rx_pkt_in+0x174>
    if (!scansm->scan_filt_dups ||
   26878:	4b2e      	ldr	r3, [pc, #184]	; (26934 <ble_ll_scan_rx_pkt_in+0x1cc>)
   2687a:	789b      	ldrb	r3, [r3, #2]
   2687c:	b133      	cbz	r3, 2688c <ble_ll_scan_rx_pkt_in+0x124>
        !ble_ll_scan_dup_check_legacy(ident_addr_type, ident_addr, ptype)) {
   2687e:	462a      	mov	r2, r5
   26880:	4641      	mov	r1, r8
   26882:	4648      	mov	r0, r9
   26884:	f7ff fa82 	bl	25d8c <ble_ll_scan_dup_check_legacy>
    if (!scansm->scan_filt_dups ||
   26888:	2800      	cmp	r0, #0
   2688a:	d188      	bne.n	2679e <ble_ll_scan_rx_pkt_in+0x36>
        ble_ll_scan_send_adv_report(ptype, ident_addr, ident_addr_type,
   2688c:	4b29      	ldr	r3, [pc, #164]	; (26934 <ble_ll_scan_rx_pkt_in+0x1cc>)
   2688e:	9303      	str	r3, [sp, #12]
   26890:	9402      	str	r4, [sp, #8]
   26892:	9601      	str	r6, [sp, #4]
   26894:	f89d 3017 	ldrb.w	r3, [sp, #23]
   26898:	9300      	str	r3, [sp, #0]
   2689a:	9b06      	ldr	r3, [sp, #24]
   2689c:	464a      	mov	r2, r9
   2689e:	4641      	mov	r1, r8
   268a0:	4628      	mov	r0, r5
   268a2:	f7ff fb51 	bl	25f48 <ble_ll_scan_send_adv_report>
   268a6:	e77a      	b.n	2679e <ble_ll_scan_rx_pkt_in+0x36>
           if (ble_ll_resolv_rpa(init_addr, g_ble_ll_resolv_list[index].rl_local_irk)) {
   268a8:	2335      	movs	r3, #53	; 0x35
   268aa:	4923      	ldr	r1, [pc, #140]	; (26938 <ble_ll_scan_rx_pkt_in+0x1d0>)
   268ac:	fb03 110a 	mla	r1, r3, sl, r1
   268b0:	3103      	adds	r1, #3
   268b2:	9806      	ldr	r0, [sp, #24]
   268b4:	f7fe ff4e 	bl	25754 <ble_ll_resolv_rpa>
   268b8:	2800      	cmp	r0, #0
   268ba:	d0cb      	beq.n	26854 <ble_ll_scan_rx_pkt_in+0xec>
               init_addr = ble_ll_get_our_devaddr(scansm->own_addr_type & 1);
   268bc:	f8df a074 	ldr.w	sl, [pc, #116]	; 26934 <ble_ll_scan_rx_pkt_in+0x1cc>
   268c0:	f89a 0001 	ldrb.w	r0, [sl, #1]
   268c4:	f000 0001 	and.w	r0, r0, #1
   268c8:	f7f8 fc86 	bl	1f1d8 <ble_ll_get_our_devaddr>
   268cc:	9006      	str	r0, [sp, #24]
               init_addr_type = scansm->own_addr_type & 1;
   268ce:	f89a 3001 	ldrb.w	r3, [sl, #1]
   268d2:	f003 0301 	and.w	r3, r3, #1
   268d6:	f88d 3017 	strb.w	r3, [sp, #23]
   268da:	e7bb      	b.n	26854 <ble_ll_scan_rx_pkt_in+0xec>
        if (scansm->scan_rsp_pending && scan_rsp_chk) {
   268dc:	4b15      	ldr	r3, [pc, #84]	; (26934 <ble_ll_scan_rx_pkt_in+0x1cc>)
   268de:	78db      	ldrb	r3, [r3, #3]
   268e0:	2b00      	cmp	r3, #0
   268e2:	f43f af5c 	beq.w	2679e <ble_ll_scan_rx_pkt_in+0x36>
   268e6:	2f00      	cmp	r7, #0
   268e8:	f43f af59 	beq.w	2679e <ble_ll_scan_rx_pkt_in+0x36>
            rxadd = scansm->pdu_data.hdr_byte & BLE_ADV_PDU_HDR_RXADD_MASK;
   268ec:	4b11      	ldr	r3, [pc, #68]	; (26934 <ble_ll_scan_rx_pkt_in+0x1cc>)
   268ee:	7e9a      	ldrb	r2, [r3, #26]
   268f0:	f002 0180 	and.w	r1, r2, #128	; 0x80
            if (((txadd && rxadd) || ((txadd + rxadd) == 0)) &&
   268f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
   268f8:	b113      	cbz	r3, 26900 <ble_ll_scan_rx_pkt_in+0x198>
   268fa:	f012 0f80 	tst.w	r2, #128	; 0x80
   268fe:	d101      	bne.n	26904 <ble_ll_scan_rx_pkt_in+0x19c>
   26900:	42cb      	cmn	r3, r1
   26902:	d1b9      	bne.n	26878 <ble_ll_scan_rx_pkt_in+0x110>
                !memcmp(adv_addr, adva, BLE_DEV_ADDR_LEN)) {
   26904:	2206      	movs	r2, #6
   26906:	490d      	ldr	r1, [pc, #52]	; (2693c <ble_ll_scan_rx_pkt_in+0x1d4>)
   26908:	9807      	ldr	r0, [sp, #28]
   2690a:	f7eb fdb7 	bl	1247c <memcmp>
            if (((txadd && rxadd) || ((txadd + rxadd) == 0)) &&
   2690e:	2800      	cmp	r0, #0
   26910:	d1b2      	bne.n	26878 <ble_ll_scan_rx_pkt_in+0x110>
                ble_ll_scan_add_scan_rsp_adv(ident_addr, ident_addr_type, 0, 0);
   26912:	2300      	movs	r3, #0
   26914:	461a      	mov	r2, r3
   26916:	4649      	mov	r1, r9
   26918:	4640      	mov	r0, r8
   2691a:	f7ff f85d 	bl	259d8 <ble_ll_scan_add_scan_rsp_adv>
                ble_ll_scan_req_backoff(scansm, 1);
   2691e:	2101      	movs	r1, #1
   26920:	4804      	ldr	r0, [pc, #16]	; (26934 <ble_ll_scan_rx_pkt_in+0x1cc>)
   26922:	f7fe ffd3 	bl	258cc <ble_ll_scan_req_backoff>
   26926:	e7a7      	b.n	26878 <ble_ll_scan_rx_pkt_in+0x110>
        ble_ll_scan_req_backoff(scansm, 0);
   26928:	2100      	movs	r1, #0
   2692a:	4802      	ldr	r0, [pc, #8]	; (26934 <ble_ll_scan_rx_pkt_in+0x1cc>)
   2692c:	f7fe ffce 	bl	258cc <ble_ll_scan_req_backoff>
   26930:	e73b      	b.n	267aa <ble_ll_scan_rx_pkt_in+0x42>
   26932:	bf00      	nop
   26934:	20003680 	.word	0x20003680
   26938:	20004160 	.word	0x20004160
   2693c:	200036a1 	.word	0x200036a1

00026940 <ble_ll_scan_set_scan_params>:
    if (scansm->scan_enabled) {
   26940:	4b1d      	ldr	r3, [pc, #116]	; (269b8 <ble_ll_scan_set_scan_params+0x78>)
   26942:	781b      	ldrb	r3, [r3, #0]
   26944:	bb43      	cbnz	r3, 26998 <ble_ll_scan_set_scan_params+0x58>
{
   26946:	b570      	push	{r4, r5, r6, lr}
   26948:	4604      	mov	r4, r0
    scan_type = cmd[0];
   2694a:	f810 5b01 	ldrb.w	r5, [r0], #1
    scan_itvl  = get_le16(cmd + 1);
   2694e:	f7f8 f909 	bl	1eb64 <get_le16>
   26952:	4606      	mov	r6, r0
    scan_window = get_le16(cmd + 3);
   26954:	1ce0      	adds	r0, r4, #3
   26956:	f7f8 f905 	bl	1eb64 <get_le16>
    own_addr_type = cmd[5];
   2695a:	7962      	ldrb	r2, [r4, #5]
    filter_policy = cmd[6];
   2695c:	79a1      	ldrb	r1, [r4, #6]
    if ((scan_type != BLE_HCI_SCAN_TYPE_PASSIVE) &&
   2695e:	2d01      	cmp	r5, #1
   26960:	d81c      	bhi.n	2699c <ble_ll_scan_set_scan_params+0x5c>
    if ((scan_itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   26962:	1f33      	subs	r3, r6, #4
   26964:	b29b      	uxth	r3, r3
   26966:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   2696a:	42a3      	cmp	r3, r4
   2696c:	d818      	bhi.n	269a0 <ble_ll_scan_set_scan_params+0x60>
        (scan_itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   2696e:	2803      	cmp	r0, #3
   26970:	d918      	bls.n	269a4 <ble_ll_scan_set_scan_params+0x64>
        (scan_window < BLE_HCI_SCAN_WINDOW_MIN) ||
   26972:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   26976:	d817      	bhi.n	269a8 <ble_ll_scan_set_scan_params+0x68>
        (scan_window > BLE_HCI_SCAN_WINDOW_MAX) ||
   26978:	4286      	cmp	r6, r0
   2697a:	d317      	bcc.n	269ac <ble_ll_scan_set_scan_params+0x6c>
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   2697c:	2a03      	cmp	r2, #3
   2697e:	d817      	bhi.n	269b0 <ble_ll_scan_set_scan_params+0x70>
    if (filter_policy > BLE_HCI_SCAN_FILT_MAX) {
   26980:	2903      	cmp	r1, #3
   26982:	d817      	bhi.n	269b4 <ble_ll_scan_set_scan_params+0x74>
    scanp->configured = 1;
   26984:	4b0d      	ldr	r3, [pc, #52]	; (269bc <ble_ll_scan_set_scan_params+0x7c>)
   26986:	2401      	movs	r4, #1
   26988:	70dc      	strb	r4, [r3, #3]
    scanp->scan_type = scan_type;
   2698a:	711d      	strb	r5, [r3, #4]
    scanp->scan_itvl = scan_itvl;
   2698c:	80de      	strh	r6, [r3, #6]
    scanp->scan_window = scan_window;
   2698e:	8118      	strh	r0, [r3, #8]
    scanp->scan_filt_policy = filter_policy;
   26990:	7099      	strb	r1, [r3, #2]
    scanp->own_addr_type = own_addr_type;
   26992:	705a      	strb	r2, [r3, #1]
    return 0;
   26994:	2000      	movs	r0, #0
   26996:	e002      	b.n	2699e <ble_ll_scan_set_scan_params+0x5e>
        return BLE_ERR_CMD_DISALLOWED;
   26998:	200c      	movs	r0, #12
}
   2699a:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2699c:	2012      	movs	r0, #18
}
   2699e:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   269a0:	2012      	movs	r0, #18
   269a2:	e7fc      	b.n	2699e <ble_ll_scan_set_scan_params+0x5e>
   269a4:	2012      	movs	r0, #18
   269a6:	e7fa      	b.n	2699e <ble_ll_scan_set_scan_params+0x5e>
   269a8:	2012      	movs	r0, #18
   269aa:	e7f8      	b.n	2699e <ble_ll_scan_set_scan_params+0x5e>
   269ac:	2012      	movs	r0, #18
   269ae:	e7f6      	b.n	2699e <ble_ll_scan_set_scan_params+0x5e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   269b0:	2012      	movs	r0, #18
   269b2:	e7f4      	b.n	2699e <ble_ll_scan_set_scan_params+0x5e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   269b4:	2012      	movs	r0, #18
   269b6:	e7f2      	b.n	2699e <ble_ll_scan_set_scan_params+0x5e>
   269b8:	20003680 	.word	0x20003680
   269bc:	2000366c 	.word	0x2000366c

000269c0 <ble_ll_scan_set_enable>:
{
   269c0:	b538      	push	{r3, r4, r5, lr}
    enable = cmd[0];
   269c2:	7802      	ldrb	r2, [r0, #0]
    filter_dups = cmd[1];
   269c4:	7843      	ldrb	r3, [r0, #1]
    if ((filter_dups > 1) || (enable > 1)) {
   269c6:	2b01      	cmp	r3, #1
   269c8:	d861      	bhi.n	26a8e <ble_ll_scan_set_enable+0xce>
   269ca:	2a01      	cmp	r2, #1
   269cc:	d861      	bhi.n	26a92 <ble_ll_scan_set_enable+0xd2>
    if (!enable) {
   269ce:	b94a      	cbnz	r2, 269e4 <ble_ll_scan_set_enable+0x24>
        if (scansm->scan_enabled) {
   269d0:	4b32      	ldr	r3, [pc, #200]	; (26a9c <ble_ll_scan_set_enable+0xdc>)
   269d2:	781b      	ldrb	r3, [r3, #0]
   269d4:	b90b      	cbnz	r3, 269da <ble_ll_scan_set_enable+0x1a>
        return BLE_ERR_SUCCESS;
   269d6:	2000      	movs	r0, #0
   269d8:	e05a      	b.n	26a90 <ble_ll_scan_set_enable+0xd0>
            ble_ll_scan_sm_stop(1);
   269da:	2001      	movs	r0, #1
   269dc:	f7ff fc6e 	bl	262bc <ble_ll_scan_sm_stop>
        return BLE_ERR_SUCCESS;
   269e0:	2000      	movs	r0, #0
   269e2:	e055      	b.n	26a90 <ble_ll_scan_set_enable+0xd0>
    if (scansm->scan_enabled) {
   269e4:	4a2d      	ldr	r2, [pc, #180]	; (26a9c <ble_ll_scan_set_enable+0xdc>)
   269e6:	7812      	ldrb	r2, [r2, #0]
   269e8:	b9ea      	cbnz	r2, 26a26 <ble_ll_scan_set_enable+0x66>
    scansm->scan_filt_dups = filter_dups;
   269ea:	4a2c      	ldr	r2, [pc, #176]	; (26a9c <ble_ll_scan_set_enable+0xdc>)
   269ec:	7093      	strb	r3, [r2, #2]
    scansm->cur_phy = PHY_NOT_CONFIGURED;
   269ee:	23ff      	movs	r3, #255	; 0xff
   269f0:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
    scansm->next_phy = PHY_NOT_CONFIGURED;
   269f4:	f882 3069 	strb.w	r3, [r2, #105]	; 0x69
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   269f8:	2300      	movs	r3, #0
   269fa:	2b00      	cmp	r3, #0
   269fc:	dd1a      	ble.n	26a34 <ble_ll_scan_set_enable+0x74>
    rc = ble_ll_scan_sm_start(scansm);
   269fe:	4827      	ldr	r0, [pc, #156]	; (26a9c <ble_ll_scan_set_enable+0xdc>)
   26a00:	f7ff fb08 	bl	26014 <ble_ll_scan_sm_start>
    return rc;
   26a04:	e044      	b.n	26a90 <ble_ll_scan_set_enable+0xd0>
            if (scanphy->configured &&
   26a06:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   26a0a:	0088      	lsls	r0, r1, #2
   26a0c:	4923      	ldr	r1, [pc, #140]	; (26a9c <ble_ll_scan_set_enable+0xdc>)
   26a0e:	4401      	add	r1, r0
   26a10:	f891 1073 	ldrb.w	r1, [r1, #115]	; 0x73
   26a14:	b129      	cbz	r1, 26a22 <ble_ll_scan_set_enable+0x62>
                                scanphy->scan_type == BLE_SCAN_TYPE_INITIATE) {
   26a16:	4921      	ldr	r1, [pc, #132]	; (26a9c <ble_ll_scan_set_enable+0xdc>)
   26a18:	4401      	add	r1, r0
   26a1a:	f891 1074 	ldrb.w	r1, [r1, #116]	; 0x74
            if (scanphy->configured &&
   26a1e:	2902      	cmp	r1, #2
   26a20:	d039      	beq.n	26a96 <ble_ll_scan_set_enable+0xd6>
        for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   26a22:	3201      	adds	r2, #1
   26a24:	e000      	b.n	26a28 <ble_ll_scan_set_enable+0x68>
   26a26:	2200      	movs	r2, #0
   26a28:	2a00      	cmp	r2, #0
   26a2a:	ddec      	ble.n	26a06 <ble_ll_scan_set_enable+0x46>
        scansm->scan_filt_dups = filter_dups;
   26a2c:	4a1b      	ldr	r2, [pc, #108]	; (26a9c <ble_ll_scan_set_enable+0xdc>)
   26a2e:	7093      	strb	r3, [r2, #2]
        return BLE_ERR_SUCCESS;
   26a30:	2000      	movs	r0, #0
   26a32:	e02d      	b.n	26a90 <ble_ll_scan_set_enable+0xd0>
        if (!scanp->configured) {
   26a34:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   26a38:	0091      	lsls	r1, r2, #2
   26a3a:	4a19      	ldr	r2, [pc, #100]	; (26aa0 <ble_ll_scan_set_enable+0xe0>)
   26a3c:	440a      	add	r2, r1
   26a3e:	78d1      	ldrb	r1, [r2, #3]
   26a40:	b1f9      	cbz	r1, 26a82 <ble_ll_scan_set_enable+0xc2>
        scanphy->configured = scanp->configured;
   26a42:	4c16      	ldr	r4, [pc, #88]	; (26a9c <ble_ll_scan_set_enable+0xdc>)
   26a44:	0098      	lsls	r0, r3, #2
   26a46:	18c5      	adds	r5, r0, r3
   26a48:	00aa      	lsls	r2, r5, #2
   26a4a:	4615      	mov	r5, r2
   26a4c:	4422      	add	r2, r4
   26a4e:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
        scanphy->scan_type = scanp->scan_type;
   26a52:	4913      	ldr	r1, [pc, #76]	; (26aa0 <ble_ll_scan_set_enable+0xe0>)
   26a54:	4429      	add	r1, r5
   26a56:	7908      	ldrb	r0, [r1, #4]
   26a58:	f882 0074 	strb.w	r0, [r2, #116]	; 0x74
        scanphy->scan_itvl = scanp->scan_itvl;
   26a5c:	88c8      	ldrh	r0, [r1, #6]
   26a5e:	f8a2 0076 	strh.w	r0, [r2, #118]	; 0x76
        scanphy->scan_window = scanp->scan_window;
   26a62:	8908      	ldrh	r0, [r1, #8]
   26a64:	f8a2 0078 	strh.w	r0, [r2, #120]	; 0x78
        scanphy->scan_filt_policy = scanp->scan_filt_policy;
   26a68:	7888      	ldrb	r0, [r1, #2]
   26a6a:	f882 0072 	strb.w	r0, [r2, #114]	; 0x72
        scanphy->own_addr_type = scanp->own_addr_type;
   26a6e:	7849      	ldrb	r1, [r1, #1]
   26a70:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
        if (scansm->cur_phy == PHY_NOT_CONFIGURED) {
   26a74:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
   26a78:	2aff      	cmp	r2, #255	; 0xff
   26a7a:	d004      	beq.n	26a86 <ble_ll_scan_set_enable+0xc6>
            scansm->next_phy = i;
   26a7c:	4a07      	ldr	r2, [pc, #28]	; (26a9c <ble_ll_scan_set_enable+0xdc>)
   26a7e:	f882 3069 	strb.w	r3, [r2, #105]	; 0x69
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   26a82:	3301      	adds	r3, #1
   26a84:	e7b9      	b.n	269fa <ble_ll_scan_set_enable+0x3a>
            scansm->cur_phy = i;
   26a86:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
            scansm->own_addr_type = scanphy->own_addr_type;
   26a8a:	7061      	strb	r1, [r4, #1]
   26a8c:	e7f9      	b.n	26a82 <ble_ll_scan_set_enable+0xc2>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   26a8e:	2012      	movs	r0, #18
}
   26a90:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   26a92:	2012      	movs	r0, #18
   26a94:	e7fc      	b.n	26a90 <ble_ll_scan_set_enable+0xd0>
                return BLE_ERR_CMD_DISALLOWED;
   26a96:	200c      	movs	r0, #12
   26a98:	e7fa      	b.n	26a90 <ble_ll_scan_set_enable+0xd0>
   26a9a:	bf00      	nop
   26a9c:	20003680 	.word	0x20003680
   26aa0:	2000366c 	.word	0x2000366c

00026aa4 <ble_ll_scan_can_chg_whitelist>:
    params = &scansm->phy_data[scansm->cur_phy];
   26aa4:	4a0a      	ldr	r2, [pc, #40]	; (26ad0 <ble_ll_scan_can_chg_whitelist+0x2c>)
   26aa6:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
    if (scansm->scan_enabled && (params->scan_filt_policy & 1)) {
   26aaa:	7812      	ldrb	r2, [r2, #0]
   26aac:	b15a      	cbz	r2, 26ac6 <ble_ll_scan_can_chg_whitelist+0x22>
   26aae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   26ab2:	009a      	lsls	r2, r3, #2
   26ab4:	4b06      	ldr	r3, [pc, #24]	; (26ad0 <ble_ll_scan_can_chg_whitelist+0x2c>)
   26ab6:	4413      	add	r3, r2
   26ab8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
   26abc:	f013 0f01 	tst.w	r3, #1
   26ac0:	d103      	bne.n	26aca <ble_ll_scan_can_chg_whitelist+0x26>
        rc = 1;
   26ac2:	2001      	movs	r0, #1
   26ac4:	4770      	bx	lr
   26ac6:	2001      	movs	r0, #1
   26ac8:	4770      	bx	lr
        rc = 0;
   26aca:	2000      	movs	r0, #0
}
   26acc:	4770      	bx	lr
   26ace:	bf00      	nop
   26ad0:	20003680 	.word	0x20003680

00026ad4 <ble_ll_scan_initiator_start>:
{
   26ad4:	b510      	push	{r4, lr}
   26ad6:	460c      	mov	r4, r1
    scansm->own_addr_type = hcc->own_addr_type;
   26ad8:	7b02      	ldrb	r2, [r0, #12]
   26ada:	4b0f      	ldr	r3, [pc, #60]	; (26b18 <ble_ll_scan_initiator_start+0x44>)
   26adc:	705a      	strb	r2, [r3, #1]
    scansm->cur_phy = PHY_UNCODED;
   26ade:	2200      	movs	r2, #0
   26ae0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    scansm->next_phy = PHY_NOT_CONFIGURED;
   26ae4:	22ff      	movs	r2, #255	; 0xff
   26ae6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    scanphy->scan_filt_policy = hcc->filter_policy;
   26aea:	7902      	ldrb	r2, [r0, #4]
   26aec:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
    scanphy->scan_itvl = hcc->scan_itvl;
   26af0:	8802      	ldrh	r2, [r0, #0]
   26af2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
    scanphy->scan_window = hcc->scan_window;
   26af6:	8842      	ldrh	r2, [r0, #2]
   26af8:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
    scanphy->scan_type = BLE_SCAN_TYPE_INITIATE;
   26afc:	2202      	movs	r2, #2
   26afe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    rc = ble_ll_scan_sm_start(scansm);
   26b02:	4618      	mov	r0, r3
   26b04:	f7ff fa86 	bl	26014 <ble_ll_scan_sm_start>
    if (sm == NULL) {
   26b08:	b114      	cbz	r4, 26b10 <ble_ll_scan_initiator_start+0x3c>
    if (rc == BLE_ERR_SUCCESS) {
   26b0a:	b110      	cbz	r0, 26b12 <ble_ll_scan_initiator_start+0x3e>
        *sm = NULL;
   26b0c:	2300      	movs	r3, #0
   26b0e:	6023      	str	r3, [r4, #0]
}
   26b10:	bd10      	pop	{r4, pc}
        *sm = scansm;
   26b12:	4b01      	ldr	r3, [pc, #4]	; (26b18 <ble_ll_scan_initiator_start+0x44>)
   26b14:	6023      	str	r3, [r4, #0]
   26b16:	e7fb      	b.n	26b10 <ble_ll_scan_initiator_start+0x3c>
   26b18:	20003680 	.word	0x20003680

00026b1c <ble_ll_scan_enabled>:
}
   26b1c:	4b01      	ldr	r3, [pc, #4]	; (26b24 <ble_ll_scan_enabled+0x8>)
   26b1e:	7818      	ldrb	r0, [r3, #0]
   26b20:	4770      	bx	lr
   26b22:	bf00      	nop
   26b24:	20003680 	.word	0x20003680

00026b28 <ble_ll_scan_get_peer_rpa>:
}
   26b28:	4800      	ldr	r0, [pc, #0]	; (26b2c <ble_ll_scan_get_peer_rpa+0x4>)
   26b2a:	4770      	bx	lr
   26b2c:	20003687 	.word	0x20003687

00026b30 <ble_ll_scan_get_local_rpa>:
}
   26b30:	4800      	ldr	r0, [pc, #0]	; (26b34 <ble_ll_scan_get_local_rpa+0x4>)
   26b32:	4770      	bx	lr
   26b34:	2000369b 	.word	0x2000369b

00026b38 <ble_ll_scan_set_peer_rpa>:
    memcpy(scansm->scan_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   26b38:	4b03      	ldr	r3, [pc, #12]	; (26b48 <ble_ll_scan_set_peer_rpa+0x10>)
   26b3a:	6802      	ldr	r2, [r0, #0]
   26b3c:	f8c3 2007 	str.w	r2, [r3, #7]
   26b40:	8882      	ldrh	r2, [r0, #4]
   26b42:	f8a3 200b 	strh.w	r2, [r3, #11]
}
   26b46:	4770      	bx	lr
   26b48:	20003680 	.word	0x20003680

00026b4c <ble_ll_scan_get_pdu_data>:
}
   26b4c:	4800      	ldr	r0, [pc, #0]	; (26b50 <ble_ll_scan_get_pdu_data+0x4>)
   26b4e:	4770      	bx	lr
   26b50:	2000369a 	.word	0x2000369a

00026b54 <ble_ll_scan_whitelist_enabled>:
    params = &g_ble_ll_scan_sm.phy_data[g_ble_ll_scan_sm.cur_phy];
   26b54:	4a05      	ldr	r2, [pc, #20]	; (26b6c <ble_ll_scan_whitelist_enabled+0x18>)
   26b56:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
    return params->scan_filt_policy & 1;
   26b5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   26b5e:	0099      	lsls	r1, r3, #2
   26b60:	440a      	add	r2, r1
   26b62:	f892 0072 	ldrb.w	r0, [r2, #114]	; 0x72
}
   26b66:	f000 0001 	and.w	r0, r0, #1
   26b6a:	4770      	bx	lr
   26b6c:	20003680 	.word	0x20003680

00026b70 <ble_ll_scan_reset>:
 *
 * @return int
 */
void
ble_ll_scan_reset(void)
{
   26b70:	b510      	push	{r4, lr}
    struct ble_ll_scan_sm *scansm;

    scansm = &g_ble_ll_scan_sm;

    /* If enabled, stop it. */
    if (scansm->scan_enabled) {
   26b72:	4b0c      	ldr	r3, [pc, #48]	; (26ba4 <ble_ll_scan_reset+0x34>)
   26b74:	781b      	ldrb	r3, [r3, #0]
   26b76:	b983      	cbnz	r3, 26b9a <ble_ll_scan_reset+0x2a>
    os_cputime_timer_stop(&scansm->duration_timer);
    os_cputime_timer_stop(&scansm->period_timer);
#endif

    /* Reset duplicate advertisers and those from which we rxd a response */
    g_ble_ll_scan_num_rsp_advs = 0;
   26b78:	2400      	movs	r4, #0
   26b7a:	4b0b      	ldr	r3, [pc, #44]	; (26ba8 <ble_ll_scan_reset+0x38>)
   26b7c:	701c      	strb	r4, [r3, #0]
    memset(&g_ble_ll_scan_rsp_advs[0], 0, sizeof(g_ble_ll_scan_rsp_advs));
   26b7e:	2250      	movs	r2, #80	; 0x50
   26b80:	4621      	mov	r1, r4
   26b82:	480a      	ldr	r0, [pc, #40]	; (26bac <ble_ll_scan_reset+0x3c>)
   26b84:	f7eb fcc7 	bl	12516 <memset>

    os_mempool_clear(&g_scan_dup_pool);
   26b88:	4809      	ldr	r0, [pc, #36]	; (26bb0 <ble_ll_scan_reset+0x40>)
   26b8a:	f7ea fdc1 	bl	11710 <os_mempool_clear>
    TAILQ_INIT(&g_scan_dup_list);
   26b8e:	4b09      	ldr	r3, [pc, #36]	; (26bb4 <ble_ll_scan_reset+0x44>)
   26b90:	601c      	str	r4, [r3, #0]
   26b92:	605b      	str	r3, [r3, #4]
    /* clear memory pool for AUX scan results */
    os_mempool_clear(&ext_adv_pool);
#endif

    /* Call the common init function again */
    ble_ll_scan_common_init();
   26b94:	f7ff fa8e 	bl	260b4 <ble_ll_scan_common_init>
}
   26b98:	bd10      	pop	{r4, pc}
        ble_ll_scan_sm_stop(0);
   26b9a:	2000      	movs	r0, #0
   26b9c:	f7ff fb8e 	bl	262bc <ble_ll_scan_sm_stop>
   26ba0:	e7ea      	b.n	26b78 <ble_ll_scan_reset+0x8>
   26ba2:	bf00      	nop
   26ba4:	20003680 	.word	0x20003680
   26ba8:	20003668 	.word	0x20003668
   26bac:	2000425c 	.word	0x2000425c
   26bb0:	2000378c 	.word	0x2000378c
   26bb4:	20003704 	.word	0x20003704

00026bb8 <ble_ll_scan_init>:
 * Initialize a scanner. Must be called before scanning can be started.
 * Expected to be called with a un-initialized scanning state machine.
 */
void
ble_ll_scan_init(void)
{
   26bb8:	b500      	push	{lr}
   26bba:	b083      	sub	sp, #12
                          ext_adv_mem,
                          "ble_ll_aux_scan_pool");
    BLE_LL_ASSERT(err == 0);
#endif

    err = os_mempool_init(&g_scan_dup_pool,
   26bbc:	4b0b      	ldr	r3, [pc, #44]	; (26bec <ble_ll_scan_init+0x34>)
   26bbe:	9300      	str	r3, [sp, #0]
   26bc0:	4b0b      	ldr	r3, [pc, #44]	; (26bf0 <ble_ll_scan_init+0x38>)
   26bc2:	2210      	movs	r2, #16
   26bc4:	2108      	movs	r1, #8
   26bc6:	480b      	ldr	r0, [pc, #44]	; (26bf4 <ble_ll_scan_init+0x3c>)
   26bc8:	f7ea fd98 	bl	116fc <os_mempool_init>
                          MYNEWT_VAL(BLE_LL_NUM_SCAN_DUP_ADVS),
                          sizeof(struct ble_ll_scan_dup_entry),
                          g_scan_dup_mem,
                          "ble_ll_scan_dup_pool");
    BLE_LL_ASSERT(err == 0);
   26bcc:	b940      	cbnz	r0, 26be0 <ble_ll_scan_init+0x28>

    TAILQ_INIT(&g_scan_dup_list);
   26bce:	4b0a      	ldr	r3, [pc, #40]	; (26bf8 <ble_ll_scan_init+0x40>)
   26bd0:	2200      	movs	r2, #0
   26bd2:	601a      	str	r2, [r3, #0]
   26bd4:	605b      	str	r3, [r3, #4]

    ble_ll_scan_common_init();
   26bd6:	f7ff fa6d 	bl	260b4 <ble_ll_scan_common_init>
}
   26bda:	b003      	add	sp, #12
   26bdc:	f85d fb04 	ldr.w	pc, [sp], #4
    BLE_LL_ASSERT(err == 0);
   26be0:	2300      	movs	r3, #0
   26be2:	461a      	mov	r2, r3
   26be4:	4619      	mov	r1, r3
   26be6:	4618      	mov	r0, r3
   26be8:	f7e9 fcf8 	bl	105dc <__assert_func>
   26bec:	0002c954 	.word	0x0002c954
   26bf0:	2000370c 	.word	0x2000370c
   26bf4:	2000378c 	.word	0x2000378c
   26bf8:	20003704 	.word	0x20003704

00026bfc <ble_ll_sched_is_overlap>:
 * @return int 0: dont overlap 1:overlap
 */
static int
ble_ll_sched_is_overlap(struct ble_ll_sched_item *s1,
                        struct ble_ll_sched_item *s2)
{
   26bfc:	b410      	push	{r4}
    int rc;

    rc = 1;
    if ((int32_t)(s1->start_time - s2->start_time) < 0) {
   26bfe:	6843      	ldr	r3, [r0, #4]
   26c00:	684a      	ldr	r2, [r1, #4]
   26c02:	1a9c      	subs	r4, r3, r2
   26c04:	2c00      	cmp	r4, #0
   26c06:	db07      	blt.n	26c18 <ble_ll_sched_is_overlap+0x1c>
        if ((int32_t)(s1->end_time - s2->start_time) <= 0) {
            rc = 0;
        }
    } else {
        /* Check for overlap */
        if ((int32_t)(s1->start_time - s2->end_time) >= 0) {
   26c08:	688a      	ldr	r2, [r1, #8]
   26c0a:	1a9b      	subs	r3, r3, r2
   26c0c:	2b00      	cmp	r3, #0
   26c0e:	db09      	blt.n	26c24 <ble_ll_sched_is_overlap+0x28>
            rc = 0;
   26c10:	2000      	movs	r0, #0
        }
    }

    return rc;
}
   26c12:	f85d 4b04 	ldr.w	r4, [sp], #4
   26c16:	4770      	bx	lr
        if ((int32_t)(s1->end_time - s2->start_time) <= 0) {
   26c18:	6883      	ldr	r3, [r0, #8]
   26c1a:	1a9a      	subs	r2, r3, r2
   26c1c:	2a00      	cmp	r2, #0
   26c1e:	dd03      	ble.n	26c28 <ble_ll_sched_is_overlap+0x2c>
    rc = 1;
   26c20:	2001      	movs	r0, #1
   26c22:	e7f6      	b.n	26c12 <ble_ll_sched_is_overlap+0x16>
   26c24:	2001      	movs	r0, #1
   26c26:	e7f4      	b.n	26c12 <ble_ll_sched_is_overlap+0x16>
            rc = 0;
   26c28:	2000      	movs	r0, #0
   26c2a:	e7f2      	b.n	26c12 <ble_ll_sched_is_overlap+0x16>

00026c2c <ble_ll_sched_insert_if_empty>:
static struct ble_ll_sched_item *
ble_ll_sched_insert_if_empty(struct ble_ll_sched_item *sch)
{
    struct ble_ll_sched_item *entry;

    entry = TAILQ_FIRST(&g_ble_ll_sched_q);
   26c2c:	4b07      	ldr	r3, [pc, #28]	; (26c4c <ble_ll_sched_insert_if_empty+0x20>)
   26c2e:	681b      	ldr	r3, [r3, #0]
    if (!entry) {
   26c30:	b10b      	cbz	r3, 26c36 <ble_ll_sched_insert_if_empty+0xa>
        TAILQ_INSERT_HEAD(&g_ble_ll_sched_q, sch, link);
        sch->enqueued = 1;
    }
    return entry;
}
   26c32:	4618      	mov	r0, r3
   26c34:	4770      	bx	lr
        TAILQ_INSERT_HEAD(&g_ble_ll_sched_q, sch, link);
   26c36:	4601      	mov	r1, r0
   26c38:	f841 3f14 	str.w	r3, [r1, #20]!
   26c3c:	4a03      	ldr	r2, [pc, #12]	; (26c4c <ble_ll_sched_insert_if_empty+0x20>)
   26c3e:	6051      	str	r1, [r2, #4]
   26c40:	6010      	str	r0, [r2, #0]
   26c42:	6182      	str	r2, [r0, #24]
        sch->enqueued = 1;
   26c44:	2201      	movs	r2, #1
   26c46:	7042      	strb	r2, [r0, #1]
    return entry;
   26c48:	e7f3      	b.n	26c32 <ble_ll_sched_insert_if_empty+0x6>
   26c4a:	bf00      	nop
   26c4c:	200042c8 	.word	0x200042c8

00026c50 <ble_ll_sched_conn_overlap>:
{
   26c50:	b508      	push	{r3, lr}
    if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN) {
   26c52:	7803      	ldrb	r3, [r0, #0]
   26c54:	2b03      	cmp	r3, #3
   26c56:	d113      	bne.n	26c80 <ble_ll_sched_conn_overlap+0x30>
        connsm = (struct ble_ll_conn_sm *)entry->cb_arg;
   26c58:	68c2      	ldr	r2, [r0, #12]
        entry->enqueued = 0;
   26c5a:	2300      	movs	r3, #0
   26c5c:	7043      	strb	r3, [r0, #1]
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   26c5e:	6943      	ldr	r3, [r0, #20]
   26c60:	b153      	cbz	r3, 26c78 <ble_ll_sched_conn_overlap+0x28>
   26c62:	6981      	ldr	r1, [r0, #24]
   26c64:	6199      	str	r1, [r3, #24]
   26c66:	6983      	ldr	r3, [r0, #24]
   26c68:	6941      	ldr	r1, [r0, #20]
   26c6a:	6019      	str	r1, [r3, #0]
        ble_ll_event_send(&connsm->conn_ev_end);
   26c6c:	f102 009c 	add.w	r0, r2, #156	; 0x9c
   26c70:	f7f8 fbc6 	bl	1f400 <ble_ll_event_send>
        rc = 0;
   26c74:	2000      	movs	r0, #0
}
   26c76:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   26c78:	6981      	ldr	r1, [r0, #24]
   26c7a:	4b03      	ldr	r3, [pc, #12]	; (26c88 <ble_ll_sched_conn_overlap+0x38>)
   26c7c:	6059      	str	r1, [r3, #4]
   26c7e:	e7f2      	b.n	26c66 <ble_ll_sched_conn_overlap+0x16>
        rc = -1;
   26c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   26c84:	e7f7      	b.n	26c76 <ble_ll_sched_conn_overlap+0x26>
   26c86:	bf00      	nop
   26c88:	200042c8 	.word	0x200042c8

00026c8c <ble_ll_sched_overlaps_current>:
{
   26c8c:	b510      	push	{r4, lr}
   26c8e:	4604      	mov	r4, r0
    if (ble_ll_state_get() == BLE_LL_STATE_CONNECTION) {
   26c90:	f7f8 fbb0 	bl	1f3f4 <ble_ll_state_get>
   26c94:	2804      	cmp	r0, #4
   26c96:	d001      	beq.n	26c9c <ble_ll_sched_overlaps_current+0x10>
    rc = 0;
   26c98:	2000      	movs	r0, #0
}
   26c9a:	bd10      	pop	{r4, pc}
        ce_end_time = ble_ll_conn_get_ce_end_time();
   26c9c:	f7fa face 	bl	2123c <ble_ll_conn_get_ce_end_time>
        if ((int32_t)(ce_end_time - sch->start_time) > 0) {
   26ca0:	6863      	ldr	r3, [r4, #4]
   26ca2:	1ac0      	subs	r0, r0, r3
   26ca4:	2800      	cmp	r0, #0
   26ca6:	dd01      	ble.n	26cac <ble_ll_sched_overlaps_current+0x20>
            rc = 1;
   26ca8:	2001      	movs	r0, #1
    return rc;
   26caa:	e7f6      	b.n	26c9a <ble_ll_sched_overlaps_current+0xe>
    rc = 0;
   26cac:	2000      	movs	r0, #0
   26cae:	e7f4      	b.n	26c9a <ble_ll_sched_overlaps_current+0xe>

00026cb0 <ble_ll_sched_execute_item>:
 *
 * @return int 0: schedule item is not over; otherwise schedule item is done.
 */
static int
ble_ll_sched_execute_item(struct ble_ll_sched_item *sch)
{
   26cb0:	b538      	push	{r3, r4, r5, lr}
   26cb2:	4604      	mov	r4, r0
    int rc;
    uint8_t lls;

    lls = ble_ll_state_get();
   26cb4:	f7f8 fb9e 	bl	1f3f4 <ble_ll_state_get>
   26cb8:	4605      	mov	r5, r0

    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_SCHED, lls, os_cputime_get32(),
   26cba:	f7e9 fedd 	bl	10a78 <os_cputime_get32>
                       sch->start_time);

    if (lls == BLE_LL_STATE_STANDBY) {
   26cbe:	b195      	cbz	r5, 26ce6 <ble_ll_sched_execute_item+0x36>
     * BLE_LL_STATE_INITIATING
     * BLE_LL_STATE_STANDBY
     *
     * Let scanner to decide to disable phy or not.
     */
    if (sch->sched_type == BLE_LL_SCHED_TYPE_AUX_SCAN) {
   26cc0:	7823      	ldrb	r3, [r4, #0]
   26cc2:	2b04      	cmp	r3, #4
   26cc4:	d103      	bne.n	26cce <ble_ll_sched_execute_item+0x1e>
        if (lls == BLE_LL_STATE_INITIATING || lls == BLE_LL_STATE_SCANNING) {
   26cc6:	1eab      	subs	r3, r5, #2
   26cc8:	b2db      	uxtb	r3, r3
   26cca:	2b01      	cmp	r3, #1
   26ccc:	d90b      	bls.n	26ce6 <ble_ll_sched_execute_item+0x36>
     * This is either an advertising event or connection event start. If
     * we are scanning or initiating just stop it.
     */

    /* We have to disable the PHY no matter what */
    ble_phy_disable();
   26cce:	f001 fb49 	bl	28364 <ble_phy_disable>
    ble_ll_wfr_disable();
   26cd2:	f7f8 faa9 	bl	1f228 <ble_ll_wfr_disable>

    if (lls == BLE_LL_STATE_SCANNING) {
   26cd6:	2d02      	cmp	r5, #2
   26cd8:	d00a      	beq.n	26cf0 <ble_ll_sched_execute_item+0x40>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        ble_ll_scan_clean_cur_aux_data();
    } else if (lls == BLE_LL_STATE_INITIATING) {
   26cda:	2d03      	cmp	r5, #3
   26cdc:	d00e      	beq.n	26cfc <ble_ll_sched_execute_item+0x4c>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        ble_ll_scan_clean_cur_aux_data();
        /* PHY is disabled - make sure we do not wait for AUX_CONNECT_RSP */
        ble_ll_conn_reset_pending_aux_conn_rsp();
    } else if (lls == BLE_LL_STATE_ADV) {
   26cde:	2d01      	cmp	r5, #1
   26ce0:	d014      	beq.n	26d0c <ble_ll_sched_execute_item+0x5c>
        STATS_INC(ble_ll_stats, sched_state_sync_errs);
        ble_ll_sync_halt();
#endif
    } else {
        STATS_INC(ble_ll_stats, sched_state_conn_errs);
        ble_ll_conn_event_halt();
   26ce2:	f7fa fedf 	bl	21aa4 <ble_ll_conn_event_halt>
    }

sched:
    BLE_LL_ASSERT(sch->sched_cb);
   26ce6:	6923      	ldr	r3, [r4, #16]
   26ce8:	b19b      	cbz	r3, 26d12 <ble_ll_sched_execute_item+0x62>
    rc = sch->sched_cb(sch);
   26cea:	4620      	mov	r0, r4
   26cec:	4798      	blx	r3
    return rc;
}
   26cee:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   26cf0:	2000      	movs	r0, #0
   26cf2:	f7f8 fb79 	bl	1f3e8 <ble_ll_state_set>
        ble_ll_scan_clean_cur_aux_data();
   26cf6:	f7ff fadf 	bl	262b8 <ble_ll_scan_clean_cur_aux_data>
   26cfa:	e7f4      	b.n	26ce6 <ble_ll_sched_execute_item+0x36>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   26cfc:	2000      	movs	r0, #0
   26cfe:	f7f8 fb73 	bl	1f3e8 <ble_ll_state_set>
        ble_ll_scan_clean_cur_aux_data();
   26d02:	f7ff fad9 	bl	262b8 <ble_ll_scan_clean_cur_aux_data>
        ble_ll_conn_reset_pending_aux_conn_rsp();
   26d06:	f7fa fc9f 	bl	21648 <ble_ll_conn_reset_pending_aux_conn_rsp>
   26d0a:	e7ec      	b.n	26ce6 <ble_ll_sched_execute_item+0x36>
        ble_ll_adv_halt();
   26d0c:	f7f9 fa2e 	bl	2016c <ble_ll_adv_halt>
   26d10:	e7e9      	b.n	26ce6 <ble_ll_sched_execute_item+0x36>
    BLE_LL_ASSERT(sch->sched_cb);
   26d12:	461a      	mov	r2, r3
   26d14:	4619      	mov	r1, r3
   26d16:	4618      	mov	r0, r3
   26d18:	f7e9 fc60 	bl	105dc <__assert_func>

00026d1c <ble_ll_sched_run>:
 *
 * @return int
 */
static void
ble_ll_sched_run(void *arg)
{
   26d1c:	b508      	push	{r3, lr}
    struct ble_ll_sched_item *sch;

    /* Look through schedule queue */
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   26d1e:	4b0d      	ldr	r3, [pc, #52]	; (26d54 <ble_ll_sched_run+0x38>)
   26d20:	6818      	ldr	r0, [r3, #0]
    if (sch) {
   26d22:	b188      	cbz	r0, 26d48 <ble_ll_sched_run+0x2c>
            g_ble_ll_sched_max_early = dt;
        }
#endif

        /* Remove schedule item and execute the callback */
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   26d24:	6943      	ldr	r3, [r0, #20]
   26d26:	b183      	cbz	r3, 26d4a <ble_ll_sched_run+0x2e>
   26d28:	6982      	ldr	r2, [r0, #24]
   26d2a:	619a      	str	r2, [r3, #24]
   26d2c:	6983      	ldr	r3, [r0, #24]
   26d2e:	6942      	ldr	r2, [r0, #20]
   26d30:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   26d32:	2300      	movs	r3, #0
   26d34:	7043      	strb	r3, [r0, #1]
        ble_ll_sched_execute_item(sch);
   26d36:	f7ff ffbb 	bl	26cb0 <ble_ll_sched_execute_item>

        /* Restart if there is an item on the schedule */
        sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   26d3a:	4b06      	ldr	r3, [pc, #24]	; (26d54 <ble_ll_sched_run+0x38>)
   26d3c:	681b      	ldr	r3, [r3, #0]
        if (sch) {
   26d3e:	b11b      	cbz	r3, 26d48 <ble_ll_sched_run+0x2c>
            os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   26d40:	6859      	ldr	r1, [r3, #4]
   26d42:	4805      	ldr	r0, [pc, #20]	; (26d58 <ble_ll_sched_run+0x3c>)
   26d44:	f7e9 fe90 	bl	10a68 <os_cputime_timer_start>
        }
    }
}
   26d48:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   26d4a:	6982      	ldr	r2, [r0, #24]
   26d4c:	4b01      	ldr	r3, [pc, #4]	; (26d54 <ble_ll_sched_run+0x38>)
   26d4e:	605a      	str	r2, [r3, #4]
   26d50:	e7ec      	b.n	26d2c <ble_ll_sched_run+0x10>
   26d52:	bf00      	nop
   26d54:	200042c8 	.word	0x200042c8
   26d58:	200042b0 	.word	0x200042b0

00026d5c <ble_ll_sched_conn_reschedule>:
{
   26d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26d60:	4606      	mov	r6, r0
    sch = &connsm->conn_sch;
   26d62:	f100 08dc 	add.w	r8, r0, #220	; 0xdc
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks;
   26d66:	6f43      	ldr	r3, [r0, #116]	; 0x74
   26d68:	4a5f      	ldr	r2, [pc, #380]	; (26ee8 <ble_ll_sched_conn_reschedule+0x18c>)
   26d6a:	7812      	ldrb	r2, [r2, #0]
   26d6c:	1a9b      	subs	r3, r3, r2
   26d6e:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   26d72:	79c3      	ldrb	r3, [r0, #7]
   26d74:	2b02      	cmp	r3, #2
   26d76:	d01e      	beq.n	26db6 <ble_ll_sched_conn_reschedule+0x5a>
        sch->remainder = connsm->anchor_point_usecs;
   26d78:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   26d7c:	f880 30de 	strb.w	r3, [r0, #222]	; 0xde
    sch->end_time = connsm->ce_end_time;
   26d80:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   26d82:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
    if ((int32_t)(sch->start_time - os_cputime_get32()) < 0) {
   26d86:	f8d6 40e0 	ldr.w	r4, [r6, #224]	; 0xe0
   26d8a:	f7e9 fe75 	bl	10a78 <os_cputime_get32>
   26d8e:	1a20      	subs	r0, r4, r0
   26d90:	2800      	cmp	r0, #0
   26d92:	f2c0 80a6 	blt.w	26ee2 <ble_ll_sched_conn_reschedule+0x186>
    OS_ENTER_CRITICAL(sr);
   26d96:	f7e9 fb57 	bl	10448 <os_arch_save_sr>
   26d9a:	4682      	mov	sl, r0
    if (ble_ll_sched_overlaps_current(sch)) {
   26d9c:	4640      	mov	r0, r8
   26d9e:	f7ff ff75 	bl	26c8c <ble_ll_sched_overlaps_current>
   26da2:	4681      	mov	r9, r0
   26da4:	b9a8      	cbnz	r0, 26dd2 <ble_ll_sched_conn_reschedule+0x76>
    os_cputime_timer_stop(&g_ble_ll_sched_timer);
   26da6:	4851      	ldr	r0, [pc, #324]	; (26eec <ble_ll_sched_conn_reschedule+0x190>)
   26da8:	f7e9 fe62 	bl	10a70 <os_cputime_timer_stop>
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   26dac:	4b50      	ldr	r3, [pc, #320]	; (26ef0 <ble_ll_sched_conn_reschedule+0x194>)
   26dae:	681d      	ldr	r5, [r3, #0]
    end_overlap = NULL;
   26db0:	2700      	movs	r7, #0
    start_overlap = NULL;
   26db2:	463c      	mov	r4, r7
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   26db4:	e02b      	b.n	26e0e <ble_ll_sched_conn_reschedule+0xb2>
        sch->start_time -= (os_cputime_usecs_to_ticks(usecs) + 1);
   26db6:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   26dba:	f7e9 fe63 	bl	10a84 <os_cputime_usecs_to_ticks>
   26dbe:	3001      	adds	r0, #1
   26dc0:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
   26dc4:	1a1b      	subs	r3, r3, r0
   26dc6:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
        sch->remainder = 0;
   26dca:	2300      	movs	r3, #0
   26dcc:	f886 30de 	strb.w	r3, [r6, #222]	; 0xde
   26dd0:	e7d6      	b.n	26d80 <ble_ll_sched_conn_reschedule+0x24>
        OS_EXIT_CRITICAL(sr);
   26dd2:	4650      	mov	r0, sl
   26dd4:	f7e9 fb3e 	bl	10454 <os_arch_restore_sr>
        return -1;
   26dd8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   26ddc:	e072      	b.n	26ec4 <ble_ll_sched_conn_reschedule+0x168>
                            !ble_ll_conn_is_lru((struct ble_ll_conn_sm *)sch->cb_arg,
   26dde:	68e9      	ldr	r1, [r5, #12]
   26de0:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
   26de4:	f7fa fa20 	bl	21228 <ble_ll_conn_is_lru>
           if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN &&
   26de8:	b9e0      	cbnz	r0, 26e24 <ble_ll_sched_conn_reschedule+0xc8>
                start_overlap = NULL;
   26dea:	2400      	movs	r4, #0
                rc = -1;
   26dec:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    if (!rc) {
   26df0:	f1b9 0f00 	cmp.w	r9, #0
   26df4:	d145      	bne.n	26e82 <ble_ll_sched_conn_reschedule+0x126>
        if (!entry) {
   26df6:	b33d      	cbz	r5, 26e48 <ble_ll_sched_conn_reschedule+0xec>
        sch->enqueued = 1;
   26df8:	2301      	movs	r3, #1
   26dfa:	f886 30dd 	strb.w	r3, [r6, #221]	; 0xdd
    while (entry) {
   26dfe:	e040      	b.n	26e82 <ble_ll_sched_conn_reschedule+0x126>
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   26e00:	f8d6 30e4 	ldr.w	r3, [r6, #228]	; 0xe4
   26e04:	6869      	ldr	r1, [r5, #4]
   26e06:	1a5b      	subs	r3, r3, r1
   26e08:	2b00      	cmp	r3, #0
   26e0a:	dd0e      	ble.n	26e2a <ble_ll_sched_conn_reschedule+0xce>
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   26e0c:	696d      	ldr	r5, [r5, #20]
   26e0e:	2d00      	cmp	r5, #0
   26e10:	d0ee      	beq.n	26df0 <ble_ll_sched_conn_reschedule+0x94>
        if (ble_ll_sched_is_overlap(sch, entry)) {
   26e12:	4629      	mov	r1, r5
   26e14:	4640      	mov	r0, r8
   26e16:	f7ff fef1 	bl	26bfc <ble_ll_sched_is_overlap>
   26e1a:	2800      	cmp	r0, #0
   26e1c:	d0f0      	beq.n	26e00 <ble_ll_sched_conn_reschedule+0xa4>
           if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN &&
   26e1e:	782b      	ldrb	r3, [r5, #0]
   26e20:	2b03      	cmp	r3, #3
   26e22:	d0dc      	beq.n	26dde <ble_ll_sched_conn_reschedule+0x82>
            if (start_overlap == NULL) {
   26e24:	b16c      	cbz	r4, 26e42 <ble_ll_sched_conn_reschedule+0xe6>
                end_overlap = entry;
   26e26:	462f      	mov	r7, r5
   26e28:	e7f0      	b.n	26e0c <ble_ll_sched_conn_reschedule+0xb0>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   26e2a:	69ab      	ldr	r3, [r5, #24]
   26e2c:	f8c6 30f4 	str.w	r3, [r6, #244]	; 0xf4
   26e30:	4633      	mov	r3, r6
   26e32:	f843 5ff0 	str.w	r5, [r3, #240]!
   26e36:	69a9      	ldr	r1, [r5, #24]
   26e38:	f8c1 8000 	str.w	r8, [r1]
   26e3c:	61ab      	str	r3, [r5, #24]
                rc = 0;
   26e3e:	4681      	mov	r9, r0
   26e40:	e7d9      	b.n	26df6 <ble_ll_sched_conn_reschedule+0x9a>
                end_overlap = entry;
   26e42:	462f      	mov	r7, r5
                start_overlap = entry;
   26e44:	462c      	mov	r4, r5
   26e46:	e7e1      	b.n	26e0c <ble_ll_sched_conn_reschedule+0xb0>
            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   26e48:	2300      	movs	r3, #0
   26e4a:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
   26e4e:	4b28      	ldr	r3, [pc, #160]	; (26ef0 <ble_ll_sched_conn_reschedule+0x194>)
   26e50:	685a      	ldr	r2, [r3, #4]
   26e52:	f8c6 20f4 	str.w	r2, [r6, #244]	; 0xf4
   26e56:	f8c2 8000 	str.w	r8, [r2]
   26e5a:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
   26e5e:	605a      	str	r2, [r3, #4]
   26e60:	e7ca      	b.n	26df8 <ble_ll_sched_conn_reschedule+0x9c>
            tmp = (struct ble_ll_conn_sm *)entry->cb_arg;
   26e62:	68e0      	ldr	r0, [r4, #12]
            ble_ll_event_send(&tmp->conn_ev_end);
   26e64:	309c      	adds	r0, #156	; 0x9c
   26e66:	f7f8 facb 	bl	1f400 <ble_ll_event_send>
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   26e6a:	6963      	ldr	r3, [r4, #20]
   26e6c:	b1d3      	cbz	r3, 26ea4 <ble_ll_sched_conn_reschedule+0x148>
   26e6e:	69a2      	ldr	r2, [r4, #24]
   26e70:	619a      	str	r2, [r3, #24]
   26e72:	69a3      	ldr	r3, [r4, #24]
   26e74:	6962      	ldr	r2, [r4, #20]
   26e76:	601a      	str	r2, [r3, #0]
        entry->enqueued = 0;
   26e78:	2300      	movs	r3, #0
   26e7a:	7063      	strb	r3, [r4, #1]
        if (entry == end_overlap) {
   26e7c:	42a7      	cmp	r7, r4
   26e7e:	d015      	beq.n	26eac <ble_ll_sched_conn_reschedule+0x150>
        entry = start_overlap;
   26e80:	462c      	mov	r4, r5
    while (entry) {
   26e82:	b19c      	cbz	r4, 26eac <ble_ll_sched_conn_reschedule+0x150>
        start_overlap = TAILQ_NEXT(entry,link);
   26e84:	6965      	ldr	r5, [r4, #20]
        switch (entry->sched_type) {
   26e86:	7823      	ldrb	r3, [r4, #0]
   26e88:	2b01      	cmp	r3, #1
   26e8a:	d007      	beq.n	26e9c <ble_ll_sched_conn_reschedule+0x140>
   26e8c:	2b03      	cmp	r3, #3
   26e8e:	d0e8      	beq.n	26e62 <ble_ll_sched_conn_reschedule+0x106>
            BLE_LL_ASSERT(0);
   26e90:	2300      	movs	r3, #0
   26e92:	461a      	mov	r2, r3
   26e94:	4619      	mov	r1, r3
   26e96:	4618      	mov	r0, r3
   26e98:	f7e9 fba0 	bl	105dc <__assert_func>
            ble_ll_adv_event_rmvd_from_sched((struct ble_ll_adv_sm *)entry->cb_arg);
   26e9c:	68e0      	ldr	r0, [r4, #12]
   26e9e:	f7f9 f957 	bl	20150 <ble_ll_adv_event_rmvd_from_sched>
            break;
   26ea2:	e7e2      	b.n	26e6a <ble_ll_sched_conn_reschedule+0x10e>
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   26ea4:	69a2      	ldr	r2, [r4, #24]
   26ea6:	4b12      	ldr	r3, [pc, #72]	; (26ef0 <ble_ll_sched_conn_reschedule+0x194>)
   26ea8:	605a      	str	r2, [r3, #4]
   26eaa:	e7e2      	b.n	26e72 <ble_ll_sched_conn_reschedule+0x116>
    entry = TAILQ_FIRST(&g_ble_ll_sched_q);
   26eac:	4b10      	ldr	r3, [pc, #64]	; (26ef0 <ble_ll_sched_conn_reschedule+0x194>)
   26eae:	681c      	ldr	r4, [r3, #0]
    if (entry == sch) {
   26eb0:	45a0      	cmp	r8, r4
   26eb2:	d00a      	beq.n	26eca <ble_ll_sched_conn_reschedule+0x16e>
    OS_EXIT_CRITICAL(sr);
   26eb4:	4650      	mov	r0, sl
   26eb6:	f7e9 facd 	bl	10454 <os_arch_restore_sr>
    BLE_LL_ASSERT(sch != NULL);
   26eba:	b164      	cbz	r4, 26ed6 <ble_ll_sched_conn_reschedule+0x17a>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   26ebc:	6861      	ldr	r1, [r4, #4]
   26ebe:	480b      	ldr	r0, [pc, #44]	; (26eec <ble_ll_sched_conn_reschedule+0x190>)
   26ec0:	f7e9 fdd2 	bl	10a68 <os_cputime_timer_start>
}
   26ec4:	4648      	mov	r0, r9
   26ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ble_ll_xcvr_rfclk_timer_start(sch->start_time);
   26eca:	f8d6 00e0 	ldr.w	r0, [r6, #224]	; 0xe0
   26ece:	f000 fcff 	bl	278d0 <ble_ll_xcvr_rfclk_timer_start>
    sch = &connsm->conn_sch;
   26ed2:	4644      	mov	r4, r8
   26ed4:	e7ee      	b.n	26eb4 <ble_ll_sched_conn_reschedule+0x158>
    BLE_LL_ASSERT(sch != NULL);
   26ed6:	2300      	movs	r3, #0
   26ed8:	461a      	mov	r2, r3
   26eda:	4619      	mov	r1, r3
   26edc:	4618      	mov	r0, r3
   26ede:	f7e9 fb7d 	bl	105dc <__assert_func>
        return -1;
   26ee2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   26ee6:	e7ed      	b.n	26ec4 <ble_ll_sched_conn_reschedule+0x168>
   26ee8:	200042ac 	.word	0x200042ac
   26eec:	200042b0 	.word	0x200042b0
   26ef0:	200042c8 	.word	0x200042c8

00026ef4 <ble_ll_sched_master_new>:
{
   26ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ef8:	b083      	sub	sp, #12
   26efa:	4605      	mov	r5, r0
   26efc:	460c      	mov	r4, r1
    sch = &connsm->conn_sch;
   26efe:	f100 09dc 	add.w	r9, r0, #220	; 0xdc
    adv_rxend = os_cputime_get32();
   26f02:	f7e9 fdb9 	bl	10a78 <os_cputime_get32>
    if (ble_hdr->rxinfo.channel >= BLE_PHY_NUM_DATA_CHANS) {
   26f06:	78a3      	ldrb	r3, [r4, #2]
   26f08:	2b24      	cmp	r3, #36	; 0x24
   26f0a:	d915      	bls.n	26f38 <ble_ll_sched_master_new+0x44>
        earliest_start = adv_rxend + 57;
   26f0c:	f100 0839 	add.w	r8, r0, #57	; 0x39
    earliest_end = earliest_start + dur;
   26f10:	f108 06a4 	add.w	r6, r8, #164	; 0xa4
    itvl_t = connsm->conn_itvl_ticks;
   26f14:	f8d5 b07c 	ldr.w	fp, [r5, #124]	; 0x7c
    OS_ENTER_CRITICAL(sr);
   26f18:	f7e9 fa96 	bl	10448 <os_arch_save_sr>
   26f1c:	9001      	str	r0, [sp, #4]
    sch->start_time = earliest_start;
   26f1e:	f8c5 80e0 	str.w	r8, [r5, #224]	; 0xe0
    if (!ble_ll_sched_insert_if_empty(sch)) {
   26f22:	4648      	mov	r0, r9
   26f24:	f7ff fe82 	bl	26c2c <ble_ll_sched_insert_if_empty>
   26f28:	b1e8      	cbz	r0, 26f66 <ble_ll_sched_master_new+0x72>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   26f2a:	4846      	ldr	r0, [pc, #280]	; (27044 <ble_ll_sched_master_new+0x150>)
   26f2c:	f7e9 fda0 	bl	10a70 <os_cputime_timer_stop>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   26f30:	4b45      	ldr	r3, [pc, #276]	; (27048 <ble_ll_sched_master_new+0x154>)
   26f32:	681c      	ldr	r4, [r3, #0]
    earliest_start += MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET) *
   26f34:	4647      	mov	r7, r8
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   26f36:	e049      	b.n	26fcc <ble_ll_sched_master_new+0xd8>
        if (ble_hdr->rxinfo.phy == BLE_PHY_1M) {
   26f38:	f994 3005 	ldrsb.w	r3, [r4, #5]
   26f3c:	2b01      	cmp	r3, #1
   26f3e:	d006      	beq.n	26f4e <ble_ll_sched_master_new+0x5a>
        } else if (ble_hdr->rxinfo.phy == BLE_PHY_2M) {
   26f40:	2b02      	cmp	r3, #2
   26f42:	d007      	beq.n	26f54 <ble_ll_sched_master_new+0x60>
        } else if (ble_hdr->rxinfo.phy == BLE_PHY_CODED) {
   26f44:	2b03      	cmp	r3, #3
   26f46:	d108      	bne.n	26f5a <ble_ll_sched_master_new+0x66>
            earliest_start = adv_rxend + 223;
   26f48:	f100 08df 	add.w	r8, r0, #223	; 0xdf
   26f4c:	e7e0      	b.n	26f10 <ble_ll_sched_master_new+0x1c>
            earliest_start = adv_rxend + 98;
   26f4e:	f100 0862 	add.w	r8, r0, #98	; 0x62
   26f52:	e7dd      	b.n	26f10 <ble_ll_sched_master_new+0x1c>
            earliest_start = adv_rxend + 93;
   26f54:	f100 085d 	add.w	r8, r0, #93	; 0x5d
   26f58:	e7da      	b.n	26f10 <ble_ll_sched_master_new+0x1c>
            BLE_LL_ASSERT(0);
   26f5a:	2300      	movs	r3, #0
   26f5c:	461a      	mov	r2, r3
   26f5e:	4619      	mov	r1, r3
   26f60:	4618      	mov	r0, r3
   26f62:	f7e9 fb3b 	bl	105dc <__assert_func>
        connsm->tx_win_off = MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET);
   26f66:	f04f 0a00 	mov.w	sl, #0
   26f6a:	f8a5 a072 	strh.w	sl, [r5, #114]	; 0x72
    earliest_start += MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET) *
   26f6e:	4647      	mov	r7, r8
    if (!rc) {
   26f70:	f1ba 0f00 	cmp.w	sl, #0
   26f74:	d10b      	bne.n	26f8e <ble_ll_sched_master_new+0x9a>
        sch->start_time = earliest_start;
   26f76:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
        sch->end_time = earliest_end;
   26f7a:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
        connsm->anchor_point = earliest_start + g_ble_ll_sched_offset_ticks;
   26f7e:	4b33      	ldr	r3, [pc, #204]	; (2704c <ble_ll_sched_master_new+0x158>)
   26f80:	781b      	ldrb	r3, [r3, #0]
   26f82:	441f      	add	r7, r3
   26f84:	676f      	str	r7, [r5, #116]	; 0x74
        connsm->anchor_point_usecs = 0;
   26f86:	2300      	movs	r3, #0
   26f88:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
        connsm->ce_end_time = earliest_end;
   26f8c:	65ee      	str	r6, [r5, #92]	; 0x5c
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   26f8e:	4b2e      	ldr	r3, [pc, #184]	; (27048 <ble_ll_sched_master_new+0x154>)
   26f90:	681c      	ldr	r4, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   26f92:	9801      	ldr	r0, [sp, #4]
   26f94:	f7e9 fa5e 	bl	10454 <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   26f98:	6861      	ldr	r1, [r4, #4]
   26f9a:	482a      	ldr	r0, [pc, #168]	; (27044 <ble_ll_sched_master_new+0x150>)
   26f9c:	f7e9 fd64 	bl	10a68 <os_cputime_timer_start>
}
   26fa0:	4650      	mov	r0, sl
   26fa2:	b003      	add	sp, #12
   26fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if ((earliest_start - initial_start) <= itvl_t) {
   26fa8:	eba7 0308 	sub.w	r3, r7, r8
   26fac:	455b      	cmp	r3, fp
   26fae:	d834      	bhi.n	2701a <ble_ll_sched_master_new+0x126>
                    TAILQ_INSERT_BEFORE(entry, sch, link);
   26fb0:	69a3      	ldr	r3, [r4, #24]
   26fb2:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
   26fb6:	462b      	mov	r3, r5
   26fb8:	f843 4ff0 	str.w	r4, [r3, #240]!
   26fbc:	69a2      	ldr	r2, [r4, #24]
   26fbe:	f8c2 9000 	str.w	r9, [r2]
   26fc2:	61a3      	str	r3, [r4, #24]
                    rc = 0;
   26fc4:	f04f 0a00 	mov.w	sl, #0
   26fc8:	e015      	b.n	26ff6 <ble_ll_sched_master_new+0x102>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   26fca:	6964      	ldr	r4, [r4, #20]
   26fcc:	b18c      	cbz	r4, 26ff2 <ble_ll_sched_master_new+0xfe>
            sch->start_time = earliest_start;
   26fce:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
            sch->end_time = earliest_end;
   26fd2:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   26fd6:	6863      	ldr	r3, [r4, #4]
   26fd8:	1af3      	subs	r3, r6, r3
   26fda:	2b00      	cmp	r3, #0
   26fdc:	dde4      	ble.n	26fa8 <ble_ll_sched_master_new+0xb4>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   26fde:	4621      	mov	r1, r4
   26fe0:	4648      	mov	r0, r9
   26fe2:	f7ff fe0b 	bl	26bfc <ble_ll_sched_is_overlap>
   26fe6:	2800      	cmp	r0, #0
   26fe8:	d0ef      	beq.n	26fca <ble_ll_sched_master_new+0xd6>
                earliest_start = entry->end_time;
   26fea:	68a7      	ldr	r7, [r4, #8]
                earliest_end = earliest_start + dur;
   26fec:	f107 06a4 	add.w	r6, r7, #164	; 0xa4
   26ff0:	e7eb      	b.n	26fca <ble_ll_sched_master_new+0xd6>
    rc = -1;
   26ff2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
        if (!entry) {
   26ff6:	b19c      	cbz	r4, 27020 <ble_ll_sched_master_new+0x12c>
        if (!rc) {
   26ff8:	f1ba 0f00 	cmp.w	sl, #0
   26ffc:	d1b8      	bne.n	26f70 <ble_ll_sched_master_new+0x7c>
            sch->enqueued = 1;
   26ffe:	2301      	movs	r3, #1
   27000:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
            dur = os_cputime_ticks_to_usecs(earliest_start - initial_start);
   27004:	eba7 0008 	sub.w	r0, r7, r8
   27008:	f7e9 fd44 	bl	10a94 <os_cputime_ticks_to_usecs>
            connsm->tx_win_off = dur / BLE_LL_CONN_TX_OFF_USECS;
   2700c:	4b10      	ldr	r3, [pc, #64]	; (27050 <ble_ll_sched_master_new+0x15c>)
   2700e:	fba3 3000 	umull	r3, r0, r3, r0
   27012:	0a80      	lsrs	r0, r0, #10
   27014:	f8a5 0072 	strh.w	r0, [r5, #114]	; 0x72
   27018:	e7aa      	b.n	26f70 <ble_ll_sched_master_new+0x7c>
    rc = -1;
   2701a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   2701e:	e7ea      	b.n	26ff6 <ble_ll_sched_master_new+0x102>
            if ((earliest_start - initial_start) <= itvl_t) {
   27020:	eba7 0308 	sub.w	r3, r7, r8
   27024:	455b      	cmp	r3, fp
   27026:	d8e7      	bhi.n	26ff8 <ble_ll_sched_master_new+0x104>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   27028:	2300      	movs	r3, #0
   2702a:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
   2702e:	4a06      	ldr	r2, [pc, #24]	; (27048 <ble_ll_sched_master_new+0x154>)
   27030:	6851      	ldr	r1, [r2, #4]
   27032:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
   27036:	f8c1 9000 	str.w	r9, [r1]
   2703a:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   2703e:	6051      	str	r1, [r2, #4]
                rc = 0;
   27040:	469a      	mov	sl, r3
   27042:	e7dc      	b.n	26ffe <ble_ll_sched_master_new+0x10a>
   27044:	200042b0 	.word	0x200042b0
   27048:	200042c8 	.word	0x200042c8
   2704c:	200042ac 	.word	0x200042ac
   27050:	d1b71759 	.word	0xd1b71759

00027054 <ble_ll_sched_slave_new>:
{
   27054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27058:	4605      	mov	r5, r0
    sch = &connsm->conn_sch;
   2705a:	f100 07dc 	add.w	r7, r0, #220	; 0xdc
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   2705e:	6f44      	ldr	r4, [r0, #116]	; 0x74
   27060:	4b39      	ldr	r3, [pc, #228]	; (27148 <ble_ll_sched_slave_new+0xf4>)
   27062:	7818      	ldrb	r0, [r3, #0]
   27064:	1a24      	subs	r4, r4, r0
        os_cputime_usecs_to_ticks(connsm->slave_cur_window_widening) - 1;
   27066:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   2706a:	f7e9 fd0b 	bl	10a84 <os_cputime_usecs_to_ticks>
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   2706e:	1a20      	subs	r0, r4, r0
        os_cputime_usecs_to_ticks(connsm->slave_cur_window_widening) - 1;
   27070:	3801      	subs	r0, #1
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   27072:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
    sch->end_time = connsm->ce_end_time;
   27076:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   27078:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
    sch->remainder = 0;
   2707c:	2300      	movs	r3, #0
   2707e:	f885 30de 	strb.w	r3, [r5, #222]	; 0xde
    OS_ENTER_CRITICAL(sr);
   27082:	f7e9 f9e1 	bl	10448 <os_arch_save_sr>
   27086:	4681      	mov	r9, r0
    if (ble_ll_sched_overlaps_current(sch)) {
   27088:	4638      	mov	r0, r7
   2708a:	f7ff fdff 	bl	26c8c <ble_ll_sched_overlaps_current>
   2708e:	b950      	cbnz	r0, 270a6 <ble_ll_sched_slave_new+0x52>
   27090:	4680      	mov	r8, r0
    entry = ble_ll_sched_insert_if_empty(sch);
   27092:	4638      	mov	r0, r7
   27094:	f7ff fdca 	bl	26c2c <ble_ll_sched_insert_if_empty>
    if (!entry) {
   27098:	4604      	mov	r4, r0
   2709a:	2800      	cmp	r0, #0
   2709c:	d044      	beq.n	27128 <ble_ll_sched_slave_new+0xd4>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   2709e:	482b      	ldr	r0, [pc, #172]	; (2714c <ble_ll_sched_slave_new+0xf8>)
   270a0:	f7e9 fce6 	bl	10a70 <os_cputime_timer_stop>
   270a4:	e01c      	b.n	270e0 <ble_ll_sched_slave_new+0x8c>
        OS_EXIT_CRITICAL(sr);
   270a6:	4648      	mov	r0, r9
   270a8:	f7e9 f9d4 	bl	10454 <os_arch_restore_sr>
        return rc;
   270ac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   270b0:	e043      	b.n	2713a <ble_ll_sched_slave_new+0xe6>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   270b2:	69a3      	ldr	r3, [r4, #24]
   270b4:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
   270b8:	462b      	mov	r3, r5
   270ba:	f843 4ff0 	str.w	r4, [r3, #240]!
   270be:	69a2      	ldr	r2, [r4, #24]
   270c0:	6017      	str	r7, [r2, #0]
   270c2:	61a3      	str	r3, [r4, #24]
            sch->enqueued = 1;
   270c4:	2301      	movs	r3, #1
   270c6:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
   270ca:	4641      	mov	r1, r8
        next_sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   270cc:	4b20      	ldr	r3, [pc, #128]	; (27150 <ble_ll_sched_slave_new+0xfc>)
   270ce:	681a      	ldr	r2, [r3, #0]
        if (next_sch == sch) {
   270d0:	4297      	cmp	r7, r2
   270d2:	d026      	beq.n	27122 <ble_ll_sched_slave_new+0xce>
    first = 0;
   270d4:	4643      	mov	r3, r8
            sch = next_sch;
   270d6:	4617      	mov	r7, r2
   270d8:	4688      	mov	r8, r1
   270da:	e026      	b.n	2712a <ble_ll_sched_slave_new+0xd6>
            entry = next_sch;
   270dc:	4634      	mov	r4, r6
            if (!entry) {
   270de:	b1a6      	cbz	r6, 2710a <ble_ll_sched_slave_new+0xb6>
            next_sch = entry->link.tqe_next;
   270e0:	6966      	ldr	r6, [r4, #20]
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   270e2:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   270e6:	6862      	ldr	r2, [r4, #4]
   270e8:	1a9b      	subs	r3, r3, r2
   270ea:	2b00      	cmp	r3, #0
   270ec:	dde1      	ble.n	270b2 <ble_ll_sched_slave_new+0x5e>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   270ee:	4621      	mov	r1, r4
   270f0:	4638      	mov	r0, r7
   270f2:	f7ff fd83 	bl	26bfc <ble_ll_sched_is_overlap>
   270f6:	2800      	cmp	r0, #0
   270f8:	d0f0      	beq.n	270dc <ble_ll_sched_slave_new+0x88>
                if (ble_ll_sched_conn_overlap(entry)) {
   270fa:	4620      	mov	r0, r4
   270fc:	f7ff fda8 	bl	26c50 <ble_ll_sched_conn_overlap>
   27100:	2800      	cmp	r0, #0
   27102:	d0eb      	beq.n	270dc <ble_ll_sched_slave_new+0x88>
    rc = -1;
   27104:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   27108:	e7e0      	b.n	270cc <ble_ll_sched_slave_new+0x78>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   2710a:	2300      	movs	r3, #0
   2710c:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
   27110:	4b0f      	ldr	r3, [pc, #60]	; (27150 <ble_ll_sched_slave_new+0xfc>)
   27112:	685a      	ldr	r2, [r3, #4]
   27114:	f8c5 20f4 	str.w	r2, [r5, #244]	; 0xf4
   27118:	6017      	str	r7, [r2, #0]
   2711a:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
   2711e:	605a      	str	r2, [r3, #4]
   27120:	e7d0      	b.n	270c4 <ble_ll_sched_slave_new+0x70>
        if (next_sch == sch) {
   27122:	4688      	mov	r8, r1
            first = 1;
   27124:	2301      	movs	r3, #1
   27126:	e000      	b.n	2712a <ble_ll_sched_slave_new+0xd6>
        first = 1;
   27128:	2301      	movs	r3, #1
    if (first) {
   2712a:	b94b      	cbnz	r3, 27140 <ble_ll_sched_slave_new+0xec>
    OS_EXIT_CRITICAL(sr);
   2712c:	4648      	mov	r0, r9
   2712e:	f7e9 f991 	bl	10454 <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   27132:	6879      	ldr	r1, [r7, #4]
   27134:	4805      	ldr	r0, [pc, #20]	; (2714c <ble_ll_sched_slave_new+0xf8>)
   27136:	f7e9 fc97 	bl	10a68 <os_cputime_timer_start>
}
   2713a:	4640      	mov	r0, r8
   2713c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ble_ll_xcvr_rfclk_timer_start(sch->start_time);
   27140:	6878      	ldr	r0, [r7, #4]
   27142:	f000 fbc5 	bl	278d0 <ble_ll_xcvr_rfclk_timer_start>
   27146:	e7f1      	b.n	2712c <ble_ll_sched_slave_new+0xd8>
   27148:	200042ac 	.word	0x200042ac
   2714c:	200042b0 	.word	0x200042b0
   27150:	200042c8 	.word	0x200042c8

00027154 <ble_ll_sched_adv_new>:
{
   27154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27158:	4605      	mov	r5, r0
   2715a:	460f      	mov	r7, r1
   2715c:	4691      	mov	r9, r2
    duration = sch->end_time - sch->start_time;
   2715e:	6886      	ldr	r6, [r0, #8]
   27160:	6843      	ldr	r3, [r0, #4]
   27162:	1af6      	subs	r6, r6, r3
    OS_ENTER_CRITICAL(sr);
   27164:	f7e9 f970 	bl	10448 <os_arch_save_sr>
   27168:	4680      	mov	r8, r0
    entry = ble_ll_sched_insert_if_empty(sch);
   2716a:	4628      	mov	r0, r5
   2716c:	f7ff fd5e 	bl	26c2c <ble_ll_sched_insert_if_empty>
    if (!entry) {
   27170:	b128      	cbz	r0, 2717e <ble_ll_sched_adv_new+0x2a>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   27172:	4827      	ldr	r0, [pc, #156]	; (27210 <ble_ll_sched_adv_new+0xbc>)
   27174:	f7e9 fc7c 	bl	10a70 <os_cputime_timer_stop>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   27178:	4b26      	ldr	r3, [pc, #152]	; (27214 <ble_ll_sched_adv_new+0xc0>)
   2717a:	681c      	ldr	r4, [r3, #0]
   2717c:	e022      	b.n	271c4 <ble_ll_sched_adv_new+0x70>
        adv_start = sch->start_time;
   2717e:	6869      	ldr	r1, [r5, #4]
   27180:	462c      	mov	r4, r5
   27182:	e00d      	b.n	271a0 <ble_ll_sched_adv_new+0x4c>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   27184:	69a3      	ldr	r3, [r4, #24]
   27186:	61ab      	str	r3, [r5, #24]
   27188:	616c      	str	r4, [r5, #20]
   2718a:	69a3      	ldr	r3, [r4, #24]
   2718c:	601d      	str	r5, [r3, #0]
   2718e:	f105 0314 	add.w	r3, r5, #20
   27192:	61a3      	str	r3, [r4, #24]
        if (!entry) {
   27194:	b344      	cbz	r4, 271e8 <ble_ll_sched_adv_new+0x94>
        adv_start = sch->start_time;
   27196:	6869      	ldr	r1, [r5, #4]
        sch->enqueued = 1;
   27198:	2301      	movs	r3, #1
   2719a:	706b      	strb	r3, [r5, #1]
        sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   2719c:	4b1d      	ldr	r3, [pc, #116]	; (27214 <ble_ll_sched_adv_new+0xc0>)
   2719e:	681c      	ldr	r4, [r3, #0]
    if (cb) {
   271a0:	b117      	cbz	r7, 271a8 <ble_ll_sched_adv_new+0x54>
        cb((struct ble_ll_adv_sm *)orig->cb_arg, adv_start, arg);
   271a2:	464a      	mov	r2, r9
   271a4:	68e8      	ldr	r0, [r5, #12]
   271a6:	47b8      	blx	r7
    if (orig == sch) {
   271a8:	42ac      	cmp	r4, r5
   271aa:	d027      	beq.n	271fc <ble_ll_sched_adv_new+0xa8>
    OS_EXIT_CRITICAL(sr);
   271ac:	4640      	mov	r0, r8
   271ae:	f7e9 f951 	bl	10454 <os_arch_restore_sr>
    BLE_LL_ASSERT(sch != NULL);
   271b2:	b33c      	cbz	r4, 27204 <ble_ll_sched_adv_new+0xb0>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   271b4:	6861      	ldr	r1, [r4, #4]
   271b6:	4816      	ldr	r0, [pc, #88]	; (27210 <ble_ll_sched_adv_new+0xbc>)
   271b8:	f7e9 fc56 	bl	10a68 <os_cputime_timer_start>
}
   271bc:	2000      	movs	r0, #0
   271be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   271c2:	6964      	ldr	r4, [r4, #20]
   271c4:	2c00      	cmp	r4, #0
   271c6:	d0e5      	beq.n	27194 <ble_ll_sched_adv_new+0x40>
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   271c8:	68ab      	ldr	r3, [r5, #8]
   271ca:	6862      	ldr	r2, [r4, #4]
   271cc:	1a9b      	subs	r3, r3, r2
   271ce:	2b00      	cmp	r3, #0
   271d0:	ddd8      	ble.n	27184 <ble_ll_sched_adv_new+0x30>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   271d2:	4621      	mov	r1, r4
   271d4:	4628      	mov	r0, r5
   271d6:	f7ff fd11 	bl	26bfc <ble_ll_sched_is_overlap>
   271da:	2800      	cmp	r0, #0
   271dc:	d0f1      	beq.n	271c2 <ble_ll_sched_adv_new+0x6e>
                sch->start_time = entry->end_time;
   271de:	68a3      	ldr	r3, [r4, #8]
   271e0:	606b      	str	r3, [r5, #4]
                sch->end_time = sch->start_time + duration;
   271e2:	4433      	add	r3, r6
   271e4:	60ab      	str	r3, [r5, #8]
   271e6:	e7ec      	b.n	271c2 <ble_ll_sched_adv_new+0x6e>
            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   271e8:	2300      	movs	r3, #0
   271ea:	616b      	str	r3, [r5, #20]
   271ec:	4b09      	ldr	r3, [pc, #36]	; (27214 <ble_ll_sched_adv_new+0xc0>)
   271ee:	685a      	ldr	r2, [r3, #4]
   271f0:	61aa      	str	r2, [r5, #24]
   271f2:	6015      	str	r5, [r2, #0]
   271f4:	f105 0214 	add.w	r2, r5, #20
   271f8:	605a      	str	r2, [r3, #4]
   271fa:	e7cc      	b.n	27196 <ble_ll_sched_adv_new+0x42>
        ble_ll_xcvr_rfclk_timer_start(sch->start_time);
   271fc:	6860      	ldr	r0, [r4, #4]
   271fe:	f000 fb67 	bl	278d0 <ble_ll_xcvr_rfclk_timer_start>
   27202:	e7d3      	b.n	271ac <ble_ll_sched_adv_new+0x58>
    BLE_LL_ASSERT(sch != NULL);
   27204:	2300      	movs	r3, #0
   27206:	461a      	mov	r2, r3
   27208:	4619      	mov	r1, r3
   2720a:	4618      	mov	r0, r3
   2720c:	f7e9 f9e6 	bl	105dc <__assert_func>
   27210:	200042b0 	.word	0x200042b0
   27214:	200042c8 	.word	0x200042c8

00027218 <ble_ll_sched_adv_reschedule>:
{
   27218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2721c:	b083      	sub	sp, #12
   2721e:	4604      	mov	r4, r0
   27220:	468b      	mov	fp, r1
   27222:	4692      	mov	sl, r2
    duration = sch->end_time - sch->start_time;
   27224:	6883      	ldr	r3, [r0, #8]
   27226:	6842      	ldr	r2, [r0, #4]
   27228:	eba3 0802 	sub.w	r8, r3, r2
    sch->end_time += max_delay_ticks;
   2722c:	4453      	add	r3, sl
   2722e:	6083      	str	r3, [r0, #8]
    OS_ENTER_CRITICAL(sr);
   27230:	f7e9 f90a 	bl	10448 <os_arch_save_sr>
   27234:	9001      	str	r0, [sp, #4]
    entry = ble_ll_sched_insert_if_empty(sch);
   27236:	4620      	mov	r0, r4
   27238:	f7ff fcf8 	bl	26c2c <ble_ll_sched_insert_if_empty>
    if (entry) {
   2723c:	2800      	cmp	r0, #0
   2723e:	d054      	beq.n	272ea <ble_ll_sched_adv_reschedule+0xd2>
   27240:	4606      	mov	r6, r0
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   27242:	484e      	ldr	r0, [pc, #312]	; (2737c <ble_ll_sched_adv_reschedule+0x164>)
   27244:	f7e9 fc14 	bl	10a70 <os_cputime_timer_stop>
    end_overlap = NULL;
   27248:	f04f 0900 	mov.w	r9, #0
    start_overlap = NULL;
   2724c:	464d      	mov	r5, r9
   2724e:	e006      	b.n	2725e <ble_ll_sched_adv_reschedule+0x46>
                if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   27250:	68a3      	ldr	r3, [r4, #8]
   27252:	6872      	ldr	r2, [r6, #4]
   27254:	1a9b      	subs	r3, r3, r2
   27256:	2b00      	cmp	r3, #0
   27258:	dd0e      	ble.n	27278 <ble_ll_sched_adv_reschedule+0x60>
            entry = next_sch;
   2725a:	463e      	mov	r6, r7
            if (entry == NULL) {
   2725c:	b16f      	cbz	r7, 2727a <ble_ll_sched_adv_reschedule+0x62>
            next_sch = entry->link.tqe_next;
   2725e:	6977      	ldr	r7, [r6, #20]
            if (ble_ll_sched_is_overlap(sch, entry)) {
   27260:	4631      	mov	r1, r6
   27262:	4620      	mov	r0, r4
   27264:	f7ff fcca 	bl	26bfc <ble_ll_sched_is_overlap>
   27268:	2800      	cmp	r0, #0
   2726a:	d0f1      	beq.n	27250 <ble_ll_sched_adv_reschedule+0x38>
                if (start_overlap == NULL) {
   2726c:	b10d      	cbz	r5, 27272 <ble_ll_sched_adv_reschedule+0x5a>
                    end_overlap = entry;
   2726e:	46b1      	mov	r9, r6
   27270:	e7f3      	b.n	2725a <ble_ll_sched_adv_reschedule+0x42>
                    end_overlap = entry;
   27272:	46b1      	mov	r9, r6
                    start_overlap = entry;
   27274:	4635      	mov	r5, r6
   27276:	e7f0      	b.n	2725a <ble_ll_sched_adv_reschedule+0x42>
                    before = entry;
   27278:	4637      	mov	r7, r6
        if (start_overlap == NULL) {
   2727a:	b1c5      	cbz	r5, 272ae <ble_ll_sched_adv_reschedule+0x96>
            orig_start = sch->start_time;
   2727c:	6866      	ldr	r6, [r4, #4]
            sch->end_time = sch->start_time + duration;
   2727e:	eb08 0306 	add.w	r3, r8, r6
   27282:	60a3      	str	r3, [r4, #8]
                next_sch = entry->link.tqe_next;
   27284:	696b      	ldr	r3, [r5, #20]
                if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   27286:	68a2      	ldr	r2, [r4, #8]
   27288:	6869      	ldr	r1, [r5, #4]
   2728a:	1a50      	subs	r0, r2, r1
   2728c:	2800      	cmp	r0, #0
   2728e:	dd22      	ble.n	272d6 <ble_ll_sched_adv_reschedule+0xbe>
                    sch->start_time = entry->end_time;
   27290:	68aa      	ldr	r2, [r5, #8]
   27292:	6062      	str	r2, [r4, #4]
                    sch->end_time = sch->start_time + duration;
   27294:	eb02 0108 	add.w	r1, r2, r8
   27298:	60a1      	str	r1, [r4, #8]
                if (entry == end_overlap) {
   2729a:	454d      	cmp	r5, r9
   2729c:	d042      	beq.n	27324 <ble_ll_sched_adv_reschedule+0x10c>
                entry = next_sch;
   2729e:	461d      	mov	r5, r3
                BLE_LL_ASSERT(entry != NULL);
   272a0:	2b00      	cmp	r3, #0
   272a2:	d1ef      	bne.n	27284 <ble_ll_sched_adv_reschedule+0x6c>
   272a4:	461a      	mov	r2, r3
   272a6:	4619      	mov	r1, r3
   272a8:	4618      	mov	r0, r3
   272aa:	f7e9 f997 	bl	105dc <__assert_func>
            if (before) {
   272ae:	b147      	cbz	r7, 272c2 <ble_ll_sched_adv_reschedule+0xaa>
                TAILQ_INSERT_BEFORE(before, sch, link);
   272b0:	69bb      	ldr	r3, [r7, #24]
   272b2:	61a3      	str	r3, [r4, #24]
   272b4:	6167      	str	r7, [r4, #20]
   272b6:	69bb      	ldr	r3, [r7, #24]
   272b8:	601c      	str	r4, [r3, #0]
   272ba:	f104 0314 	add.w	r3, r4, #20
   272be:	61bb      	str	r3, [r7, #24]
   272c0:	e013      	b.n	272ea <ble_ll_sched_adv_reschedule+0xd2>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   272c2:	2300      	movs	r3, #0
   272c4:	6163      	str	r3, [r4, #20]
   272c6:	4b2e      	ldr	r3, [pc, #184]	; (27380 <ble_ll_sched_adv_reschedule+0x168>)
   272c8:	685a      	ldr	r2, [r3, #4]
   272ca:	61a2      	str	r2, [r4, #24]
   272cc:	6014      	str	r4, [r2, #0]
   272ce:	f104 0214 	add.w	r2, r4, #20
   272d2:	605a      	str	r2, [r3, #4]
   272d4:	e009      	b.n	272ea <ble_ll_sched_adv_reschedule+0xd2>
                    rand_ticks = entry->start_time - sch->end_time;
   272d6:	eba1 0a02 	sub.w	sl, r1, r2
                    TAILQ_INSERT_BEFORE(before, sch, link);
   272da:	69ab      	ldr	r3, [r5, #24]
   272dc:	61a3      	str	r3, [r4, #24]
   272de:	6165      	str	r5, [r4, #20]
   272e0:	69ab      	ldr	r3, [r5, #24]
   272e2:	601c      	str	r4, [r3, #0]
   272e4:	f104 0314 	add.w	r3, r4, #20
   272e8:	61ab      	str	r3, [r5, #24]
        sch->enqueued = 1;
   272ea:	2301      	movs	r3, #1
   272ec:	7063      	strb	r3, [r4, #1]
        if (rand_ticks) {
   272ee:	f1ba 0f00 	cmp.w	sl, #0
   272f2:	d130      	bne.n	27356 <ble_ll_sched_adv_reschedule+0x13e>
        sch->end_time = sch->start_time + duration;
   272f4:	6862      	ldr	r2, [r4, #4]
   272f6:	eb02 0308 	add.w	r3, r2, r8
   272fa:	60a3      	str	r3, [r4, #8]
        *start = sch->start_time;
   272fc:	f8cb 2000 	str.w	r2, [fp]
        if (sch == TAILQ_FIRST(&g_ble_ll_sched_q)) {
   27300:	4b1f      	ldr	r3, [pc, #124]	; (27380 <ble_ll_sched_adv_reschedule+0x168>)
   27302:	681b      	ldr	r3, [r3, #0]
   27304:	42a3      	cmp	r3, r4
   27306:	d030      	beq.n	2736a <ble_ll_sched_adv_reschedule+0x152>
   27308:	2400      	movs	r4, #0
    OS_EXIT_CRITICAL(sr);
   2730a:	9801      	ldr	r0, [sp, #4]
   2730c:	f7e9 f8a2 	bl	10454 <os_arch_restore_sr>
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   27310:	4b1b      	ldr	r3, [pc, #108]	; (27380 <ble_ll_sched_adv_reschedule+0x168>)
   27312:	681b      	ldr	r3, [r3, #0]
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   27314:	6859      	ldr	r1, [r3, #4]
   27316:	4819      	ldr	r0, [pc, #100]	; (2737c <ble_ll_sched_adv_reschedule+0x164>)
   27318:	f7e9 fba6 	bl	10a68 <os_cputime_timer_start>
}
   2731c:	4620      	mov	r0, r4
   2731e:	b003      	add	sp, #12
   27320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   27324:	4456      	add	r6, sl
   27326:	1ab2      	subs	r2, r6, r2
                    if (rand_ticks > max_delay_ticks) {
   27328:	4592      	cmp	sl, r2
   2732a:	d323      	bcc.n	27374 <ble_ll_sched_adv_reschedule+0x15c>
                        if (next_sch == NULL) {
   2732c:	b14b      	cbz	r3, 27342 <ble_ll_sched_adv_reschedule+0x12a>
                            TAILQ_INSERT_BEFORE(next_sch, sch, link);
   2732e:	6999      	ldr	r1, [r3, #24]
   27330:	61a1      	str	r1, [r4, #24]
   27332:	6163      	str	r3, [r4, #20]
   27334:	6999      	ldr	r1, [r3, #24]
   27336:	600c      	str	r4, [r1, #0]
   27338:	f104 0114 	add.w	r1, r4, #20
   2733c:	6199      	str	r1, [r3, #24]
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   2733e:	4692      	mov	sl, r2
   27340:	e7d3      	b.n	272ea <ble_ll_sched_adv_reschedule+0xd2>
                            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   27342:	6163      	str	r3, [r4, #20]
   27344:	4b0e      	ldr	r3, [pc, #56]	; (27380 <ble_ll_sched_adv_reschedule+0x168>)
   27346:	6859      	ldr	r1, [r3, #4]
   27348:	61a1      	str	r1, [r4, #24]
   2734a:	600c      	str	r4, [r1, #0]
   2734c:	f104 0114 	add.w	r1, r4, #20
   27350:	6059      	str	r1, [r3, #4]
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   27352:	4692      	mov	sl, r2
   27354:	e7c9      	b.n	272ea <ble_ll_sched_adv_reschedule+0xd2>
   27356:	f7ea ffb9 	bl	122cc <lrand48>
            sch->start_time += rand() % rand_ticks;
   2735a:	fbb0 f3fa 	udiv	r3, r0, sl
   2735e:	fb0a 0a13 	mls	sl, sl, r3, r0
   27362:	6863      	ldr	r3, [r4, #4]
   27364:	4453      	add	r3, sl
   27366:	6063      	str	r3, [r4, #4]
   27368:	e7c4      	b.n	272f4 <ble_ll_sched_adv_reschedule+0xdc>
            ble_ll_xcvr_rfclk_timer_start(sch->start_time);
   2736a:	6860      	ldr	r0, [r4, #4]
   2736c:	f000 fab0 	bl	278d0 <ble_ll_xcvr_rfclk_timer_start>
   27370:	2400      	movs	r4, #0
   27372:	e7ca      	b.n	2730a <ble_ll_sched_adv_reschedule+0xf2>
                        rc = -1;
   27374:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27378:	e7c7      	b.n	2730a <ble_ll_sched_adv_reschedule+0xf2>
   2737a:	bf00      	nop
   2737c:	200042b0 	.word	0x200042b0
   27380:	200042c8 	.word	0x200042c8

00027384 <ble_ll_sched_adv_resched_pdu>:
{
   27384:	b570      	push	{r4, r5, r6, lr}
   27386:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   27388:	f7e9 f85e 	bl	10448 <os_arch_save_sr>
   2738c:	4606      	mov	r6, r0
    lls = ble_ll_state_get();
   2738e:	f7f8 f831 	bl	1f3f4 <ble_ll_state_get>
    if ((lls == BLE_LL_STATE_ADV) || (lls == BLE_LL_STATE_CONNECTION) ||
   27392:	2801      	cmp	r0, #1
   27394:	d023      	beq.n	273de <ble_ll_sched_adv_resched_pdu+0x5a>
   27396:	2804      	cmp	r0, #4
   27398:	d021      	beq.n	273de <ble_ll_sched_adv_resched_pdu+0x5a>
   2739a:	2806      	cmp	r0, #6
   2739c:	d01f      	beq.n	273de <ble_ll_sched_adv_resched_pdu+0x5a>
    entry = ble_ll_sched_insert_if_empty(sch);
   2739e:	4620      	mov	r0, r4
   273a0:	f7ff fc44 	bl	26c2c <ble_ll_sched_insert_if_empty>
    if (entry) {
   273a4:	4605      	mov	r5, r0
   273a6:	b188      	cbz	r0, 273cc <ble_ll_sched_adv_resched_pdu+0x48>
        if (ble_ll_sched_is_overlap(sch, entry)) {
   273a8:	4601      	mov	r1, r0
   273aa:	4620      	mov	r0, r4
   273ac:	f7ff fc26 	bl	26bfc <ble_ll_sched_is_overlap>
   273b0:	b9a8      	cbnz	r0, 273de <ble_ll_sched_adv_resched_pdu+0x5a>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   273b2:	480e      	ldr	r0, [pc, #56]	; (273ec <ble_ll_sched_adv_resched_pdu+0x68>)
   273b4:	f7e9 fb5c 	bl	10a70 <os_cputime_timer_stop>
        TAILQ_INSERT_BEFORE(entry, sch, link);
   273b8:	69ab      	ldr	r3, [r5, #24]
   273ba:	61a3      	str	r3, [r4, #24]
   273bc:	6165      	str	r5, [r4, #20]
   273be:	69ab      	ldr	r3, [r5, #24]
   273c0:	601c      	str	r4, [r3, #0]
   273c2:	f104 0314 	add.w	r3, r4, #20
   273c6:	61ab      	str	r3, [r5, #24]
        sch->enqueued = 1;
   273c8:	2301      	movs	r3, #1
   273ca:	7063      	strb	r3, [r4, #1]
    OS_EXIT_CRITICAL(sr);
   273cc:	4630      	mov	r0, r6
   273ce:	f7e9 f841 	bl	10454 <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   273d2:	6861      	ldr	r1, [r4, #4]
   273d4:	4805      	ldr	r0, [pc, #20]	; (273ec <ble_ll_sched_adv_resched_pdu+0x68>)
   273d6:	f7e9 fb47 	bl	10a68 <os_cputime_timer_start>
    return 0;
   273da:	2000      	movs	r0, #0
}
   273dc:	bd70      	pop	{r4, r5, r6, pc}
    OS_EXIT_CRITICAL(sr);
   273de:	4630      	mov	r0, r6
   273e0:	f7e9 f838 	bl	10454 <os_arch_restore_sr>
    return -1;
   273e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   273e8:	e7f8      	b.n	273dc <ble_ll_sched_adv_resched_pdu+0x58>
   273ea:	bf00      	nop
   273ec:	200042b0 	.word	0x200042b0

000273f0 <ble_ll_sched_rmv_elem>:
{
   273f0:	b570      	push	{r4, r5, r6, lr}
    if (!sch) {
   273f2:	2800      	cmp	r0, #0
   273f4:	d02f      	beq.n	27456 <ble_ll_sched_rmv_elem+0x66>
   273f6:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   273f8:	f7e9 f826 	bl	10448 <os_arch_save_sr>
   273fc:	4605      	mov	r5, r0
    if (sch->enqueued) {
   273fe:	7863      	ldrb	r3, [r4, #1]
   27400:	b30b      	cbz	r3, 27446 <ble_ll_sched_rmv_elem+0x56>
        first = TAILQ_FIRST(&g_ble_ll_sched_q);
   27402:	4b16      	ldr	r3, [pc, #88]	; (2745c <ble_ll_sched_rmv_elem+0x6c>)
   27404:	681e      	ldr	r6, [r3, #0]
        if (first == sch) {
   27406:	42b4      	cmp	r4, r6
   27408:	d00c      	beq.n	27424 <ble_ll_sched_rmv_elem+0x34>
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   2740a:	6963      	ldr	r3, [r4, #20]
   2740c:	b173      	cbz	r3, 2742c <ble_ll_sched_rmv_elem+0x3c>
   2740e:	69a2      	ldr	r2, [r4, #24]
   27410:	619a      	str	r2, [r3, #24]
   27412:	69a3      	ldr	r3, [r4, #24]
   27414:	6962      	ldr	r2, [r4, #20]
   27416:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   27418:	2300      	movs	r3, #0
   2741a:	7063      	strb	r3, [r4, #1]
        if (first == sch) {
   2741c:	42b4      	cmp	r4, r6
   2741e:	d009      	beq.n	27434 <ble_ll_sched_rmv_elem+0x44>
        rc = 0;
   27420:	2400      	movs	r4, #0
   27422:	e011      	b.n	27448 <ble_ll_sched_rmv_elem+0x58>
            os_cputime_timer_stop(&g_ble_ll_sched_timer);
   27424:	480e      	ldr	r0, [pc, #56]	; (27460 <ble_ll_sched_rmv_elem+0x70>)
   27426:	f7e9 fb23 	bl	10a70 <os_cputime_timer_stop>
   2742a:	e7ee      	b.n	2740a <ble_ll_sched_rmv_elem+0x1a>
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   2742c:	69a2      	ldr	r2, [r4, #24]
   2742e:	4b0b      	ldr	r3, [pc, #44]	; (2745c <ble_ll_sched_rmv_elem+0x6c>)
   27430:	605a      	str	r2, [r3, #4]
   27432:	e7ee      	b.n	27412 <ble_ll_sched_rmv_elem+0x22>
            first = TAILQ_FIRST(&g_ble_ll_sched_q);
   27434:	4b09      	ldr	r3, [pc, #36]	; (2745c <ble_ll_sched_rmv_elem+0x6c>)
   27436:	681b      	ldr	r3, [r3, #0]
            if (first) {
   27438:	b15b      	cbz	r3, 27452 <ble_ll_sched_rmv_elem+0x62>
                os_cputime_timer_start(&g_ble_ll_sched_timer, first->start_time);
   2743a:	6859      	ldr	r1, [r3, #4]
   2743c:	4808      	ldr	r0, [pc, #32]	; (27460 <ble_ll_sched_rmv_elem+0x70>)
   2743e:	f7e9 fb13 	bl	10a68 <os_cputime_timer_start>
        rc = 0;
   27442:	2400      	movs	r4, #0
   27444:	e000      	b.n	27448 <ble_ll_sched_rmv_elem+0x58>
    int rc = 1;
   27446:	2401      	movs	r4, #1
    OS_EXIT_CRITICAL(sr);
   27448:	4628      	mov	r0, r5
   2744a:	f7e9 f803 	bl	10454 <os_arch_restore_sr>
}
   2744e:	4620      	mov	r0, r4
   27450:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   27452:	2400      	movs	r4, #0
   27454:	e7f8      	b.n	27448 <ble_ll_sched_rmv_elem+0x58>
        return rc;
   27456:	2401      	movs	r4, #1
   27458:	e7f9      	b.n	2744e <ble_ll_sched_rmv_elem+0x5e>
   2745a:	bf00      	nop
   2745c:	200042c8 	.word	0x200042c8
   27460:	200042b0 	.word	0x200042b0

00027464 <ble_ll_sched_next_time>:
 *
 * @return int 0: No events are scheduled 1: there is an upcoming event
 */
int
ble_ll_sched_next_time(uint32_t *next_event_time)
{
   27464:	b510      	push	{r4, lr}
   27466:	4604      	mov	r4, r0
    int rc;
    os_sr_t sr;
    struct ble_ll_sched_item *first;

    rc = 0;
    OS_ENTER_CRITICAL(sr);
   27468:	f7e8 ffee 	bl	10448 <os_arch_save_sr>
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   2746c:	4b05      	ldr	r3, [pc, #20]	; (27484 <ble_ll_sched_next_time+0x20>)
   2746e:	681b      	ldr	r3, [r3, #0]
    if (first) {
   27470:	b133      	cbz	r3, 27480 <ble_ll_sched_next_time+0x1c>
        *next_event_time = first->start_time;
   27472:	685b      	ldr	r3, [r3, #4]
   27474:	6023      	str	r3, [r4, #0]
        rc = 1;
   27476:	2401      	movs	r4, #1
    }
    OS_EXIT_CRITICAL(sr);
   27478:	f7e8 ffec 	bl	10454 <os_arch_restore_sr>

    return rc;
}
   2747c:	4620      	mov	r0, r4
   2747e:	bd10      	pop	{r4, pc}
    rc = 0;
   27480:	2400      	movs	r4, #0
   27482:	e7f9      	b.n	27478 <ble_ll_sched_next_time+0x14>
   27484:	200042c8 	.word	0x200042c8

00027488 <ble_ll_sched_rfclk_chk_restart>:
 * Context: Link-Layer task.
 *
 */
void
ble_ll_sched_rfclk_chk_restart(void)
{
   27488:	b570      	push	{r4, r5, r6, lr}
   2748a:	b082      	sub	sp, #8
    os_sr_t sr;
    uint8_t ll_state;
    int32_t time_till_next;
    uint32_t next_time;

    OS_ENTER_CRITICAL(sr);
   2748c:	f7e8 ffdc 	bl	10448 <os_arch_save_sr>
   27490:	4604      	mov	r4, r0
    ll_state = ble_ll_state_get();
   27492:	f7f7 ffaf 	bl	1f3f4 <ble_ll_state_get>
   27496:	4605      	mov	r5, r0
    if (ble_ll_sched_next_time(&next_time)) {
   27498:	a801      	add	r0, sp, #4
   2749a:	f7ff ffe3 	bl	27464 <ble_ll_sched_next_time>
   2749e:	b928      	cbnz	r0, 274ac <ble_ll_sched_rfclk_chk_restart+0x24>
    } else {
        /*
         * Only stop the timer and rfclk if doing nothing currently. If
         * in some other state, that state will handle the timer and rfclk
         */
        if (ll_state == BLE_LL_STATE_STANDBY) {
   274a0:	b1a5      	cbz	r5, 274cc <ble_ll_sched_rfclk_chk_restart+0x44>
            ble_ll_xcvr_rfclk_stop();
        }
    }
    OS_EXIT_CRITICAL(sr);
   274a2:	4620      	mov	r0, r4
   274a4:	f7e8 ffd6 	bl	10454 <os_arch_restore_sr>
}
   274a8:	b002      	add	sp, #8
   274aa:	bd70      	pop	{r4, r5, r6, pc}
        time_till_next = (int32_t)(next_time - os_cputime_get32());
   274ac:	9e01      	ldr	r6, [sp, #4]
   274ae:	f7e9 fae3 	bl	10a78 <os_cputime_get32>
   274b2:	1a30      	subs	r0, r6, r0
        if (time_till_next > g_ble_ll_data.ll_xtal_ticks) {
   274b4:	4b07      	ldr	r3, [pc, #28]	; (274d4 <ble_ll_sched_rfclk_chk_restart+0x4c>)
   274b6:	899b      	ldrh	r3, [r3, #12]
   274b8:	4283      	cmp	r3, r0
   274ba:	daf2      	bge.n	274a2 <ble_ll_sched_rfclk_chk_restart+0x1a>
            ble_ll_xcvr_rfclk_timer_start(next_time);
   274bc:	9801      	ldr	r0, [sp, #4]
   274be:	f000 fa07 	bl	278d0 <ble_ll_xcvr_rfclk_timer_start>
            if (ll_state == BLE_LL_STATE_STANDBY) {
   274c2:	2d00      	cmp	r5, #0
   274c4:	d1ed      	bne.n	274a2 <ble_ll_sched_rfclk_chk_restart+0x1a>
                ble_ll_xcvr_rfclk_disable();
   274c6:	f000 f9af 	bl	27828 <ble_ll_xcvr_rfclk_disable>
   274ca:	e7ea      	b.n	274a2 <ble_ll_sched_rfclk_chk_restart+0x1a>
            ble_ll_xcvr_rfclk_stop();
   274cc:	f000 f9c2 	bl	27854 <ble_ll_xcvr_rfclk_stop>
   274d0:	e7e7      	b.n	274a2 <ble_ll_sched_rfclk_chk_restart+0x1a>
   274d2:	bf00      	nop
   274d4:	20003e20 	.word	0x20003e20

000274d8 <ble_ll_sched_stop>:
 *
 * Context: Link Layer task
 */
void
ble_ll_sched_stop(void)
{
   274d8:	b508      	push	{r3, lr}
    os_cputime_timer_stop(&g_ble_ll_sched_timer);
   274da:	4802      	ldr	r0, [pc, #8]	; (274e4 <ble_ll_sched_stop+0xc>)
   274dc:	f7e9 fac8 	bl	10a70 <os_cputime_timer_stop>
}
   274e0:	bd08      	pop	{r3, pc}
   274e2:	bf00      	nop
   274e4:	200042b0 	.word	0x200042b0

000274e8 <ble_ll_sched_init>:
 *
 * @return int
 */
int
ble_ll_sched_init(void)
{
   274e8:	b508      	push	{r3, lr}
    /*
     * This is the offset from the start of the scheduled item until the actual
     * tx/rx should occur, in ticks. We also "round up" to the nearest tick.
     */
    g_ble_ll_sched_offset_ticks =
        (uint8_t) os_cputime_usecs_to_ticks(XCVR_TX_SCHED_DELAY_USECS + 30);
   274ea:	20df      	movs	r0, #223	; 0xdf
   274ec:	f7e9 faca 	bl	10a84 <os_cputime_usecs_to_ticks>
    g_ble_ll_sched_offset_ticks =
   274f0:	4b04      	ldr	r3, [pc, #16]	; (27504 <ble_ll_sched_init+0x1c>)
   274f2:	7018      	strb	r0, [r3, #0]

    /* Initialize cputimer for the scheduler */
    os_cputime_timer_init(&g_ble_ll_sched_timer, ble_ll_sched_run, NULL);
   274f4:	2200      	movs	r2, #0
   274f6:	4904      	ldr	r1, [pc, #16]	; (27508 <ble_ll_sched_init+0x20>)
   274f8:	4804      	ldr	r0, [pc, #16]	; (2750c <ble_ll_sched_init+0x24>)
   274fa:	f7e9 fa9f 	bl	10a3c <os_cputime_timer_init>
    g_ble_ll_sched_data.sch_ticks_per_epoch = BLE_LL_SCHED_PERIODS *
        g_ble_ll_sched_data.sch_ticks_per_period;
#endif

    return 0;
}
   274fe:	2000      	movs	r0, #0
   27500:	bd08      	pop	{r3, pc}
   27502:	bf00      	nop
   27504:	200042ac 	.word	0x200042ac
   27508:	00026d1d 	.word	0x00026d1d
   2750c:	200042b0 	.word	0x200042b0

00027510 <ble_ll_utils_calc_access_addr>:
    500, 250, 150, 100, 75, 50, 30, 20
};

uint32_t
ble_ll_utils_calc_access_addr(void)
{
   27510:	b570      	push	{r4, r5, r6, lr}
   27512:	f7ea fedb 	bl	122cc <lrand48>

    /* Calculate a random access address */
    aa = 0;
    while (1) {
        /* Get two, 16-bit random numbers */
        aa_low = rand() & 0xFFFF;
   27516:	b286      	uxth	r6, r0
   27518:	f7ea fed8 	bl	122cc <lrand48>
        aa_high = rand() & 0xFFFF;
   2751c:	b283      	uxth	r3, r0

        /* All four bytes cannot be equal */
        if (aa_low == aa_high) {
   2751e:	429e      	cmp	r6, r3
   27520:	d0f7      	beq.n	27512 <ble_ll_utils_calc_access_addr+0x2>
   27522:	4605      	mov	r5, r0
            continue;
        }

        /* Upper 6 bits must have 2 transitions */
        tmp = (int16_t)aa_high >> 10;
   27524:	f340 2085 	sbfx	r0, r0, #10, #6
        if (__builtin_popcount(tmp ^ (tmp >> 1)) < 2) {
   27528:	ea80 0060 	eor.w	r0, r0, r0, asr #1
   2752c:	f002 fa5a 	bl	299e4 <__popcountsi2>
   27530:	2801      	cmp	r0, #1
   27532:	ddee      	ble.n	27512 <ble_ll_utils_calc_access_addr+0x2>
            continue;
        }

        /* Cannot be access address or be 1 bit different */
        aa = aa_high;
        aa = (aa << 16) | aa_low;
   27534:	ea46 4005 	orr.w	r0, r6, r5, lsl #16
        bits_diff = 0;
        temp = aa ^ BLE_ACCESS_ADDR_ADV;
   27538:	4921      	ldr	r1, [pc, #132]	; (275c0 <ble_ll_utils_calc_access_addr+0xb0>)
   2753a:	4041      	eors	r1, r0
        bits_diff = 0;
   2753c:	2200      	movs	r2, #0
        for (mask = 0x00000001; mask != 0; mask <<= 1) {
   2753e:	2301      	movs	r3, #1
   27540:	e000      	b.n	27544 <ble_ll_utils_calc_access_addr+0x34>
   27542:	005b      	lsls	r3, r3, #1
   27544:	b12b      	cbz	r3, 27552 <ble_ll_utils_calc_access_addr+0x42>
            if (mask & temp) {
   27546:	420b      	tst	r3, r1
   27548:	d0fb      	beq.n	27542 <ble_ll_utils_calc_access_addr+0x32>
                ++bits_diff;
   2754a:	3201      	adds	r2, #1
   2754c:	b2d2      	uxtb	r2, r2
                if (bits_diff > 1) {
   2754e:	2a01      	cmp	r2, #1
   27550:	d9f7      	bls.n	27542 <ble_ll_utils_calc_access_addr+0x32>
                    break;
                }
            }
        }
        if (bits_diff <= 1) {
   27552:	2a01      	cmp	r2, #1
   27554:	d9dd      	bls.n	27512 <ble_ll_utils_calc_access_addr+0x2>
        }

        /* Cannot have more than 24 transitions */
        transitions = 0;
        consecutive = 1;
        ones = 0;
   27556:	2400      	movs	r4, #0
        transitions = 0;
   27558:	4625      	mov	r5, r4
        consecutive = 1;
   2755a:	2201      	movs	r2, #1
        mask = 0x00000001;
   2755c:	4613      	mov	r3, r2
   2755e:	e00c      	b.n	2757a <ble_ll_utils_calc_access_addr+0x6a>
            if (mask & aa) {
                if (prev_bit == 0) {
                    ++transitions;
                    consecutive = 1;
                } else {
                    ++consecutive;
   27560:	3201      	adds	r2, #1
   27562:	b2d2      	uxtb	r2, r2
                    ++transitions;
                    consecutive = 1;
                }
            }

            if (prev_bit) {
   27564:	b109      	cbz	r1, 2756a <ble_ll_utils_calc_access_addr+0x5a>
                ones++;
   27566:	3401      	adds	r4, #1
   27568:	b2e4      	uxtb	r4, r4
            }

            /* 8 lsb should have at least three 1 */
            if (mask == 0x00000100 && ones < 3) {
   2756a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   2756e:	d019      	beq.n	275a4 <ble_ll_utils_calc_access_addr+0x94>
                break;
            }

            /* 16 lsb should have no more than 11 transitions */
            if (mask == 0x00010000 && transitions > 11) {
   27570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   27574:	d019      	beq.n	275aa <ble_ll_utils_calc_access_addr+0x9a>
                break;
            }

            /* This is invalid! */
            if (consecutive > 6) {
   27576:	2a06      	cmp	r2, #6
   27578:	d81a      	bhi.n	275b0 <ble_ll_utils_calc_access_addr+0xa0>
        while (mask < 0x80000000) {
   2757a:	2b00      	cmp	r3, #0
   2757c:	db19      	blt.n	275b2 <ble_ll_utils_calc_access_addr+0xa2>
            prev_bit = aa & mask;
   2757e:	ea03 0100 	and.w	r1, r3, r0
            mask <<= 1;
   27582:	005b      	lsls	r3, r3, #1
            if (mask & aa) {
   27584:	4218      	tst	r0, r3
   27586:	d005      	beq.n	27594 <ble_ll_utils_calc_access_addr+0x84>
                if (prev_bit == 0) {
   27588:	2900      	cmp	r1, #0
   2758a:	d1e9      	bne.n	27560 <ble_ll_utils_calc_access_addr+0x50>
                    ++transitions;
   2758c:	3501      	adds	r5, #1
   2758e:	b2ed      	uxtb	r5, r5
                    consecutive = 1;
   27590:	2201      	movs	r2, #1
   27592:	e7e7      	b.n	27564 <ble_ll_utils_calc_access_addr+0x54>
                if (prev_bit == 0) {
   27594:	b911      	cbnz	r1, 2759c <ble_ll_utils_calc_access_addr+0x8c>
                    ++consecutive;
   27596:	3201      	adds	r2, #1
   27598:	b2d2      	uxtb	r2, r2
   2759a:	e7e3      	b.n	27564 <ble_ll_utils_calc_access_addr+0x54>
                    ++transitions;
   2759c:	3501      	adds	r5, #1
   2759e:	b2ed      	uxtb	r5, r5
                    consecutive = 1;
   275a0:	2201      	movs	r2, #1
   275a2:	e7df      	b.n	27564 <ble_ll_utils_calc_access_addr+0x54>
            if (mask == 0x00000100 && ones < 3) {
   275a4:	2c02      	cmp	r4, #2
   275a6:	d8e3      	bhi.n	27570 <ble_ll_utils_calc_access_addr+0x60>
   275a8:	e003      	b.n	275b2 <ble_ll_utils_calc_access_addr+0xa2>
            if (mask == 0x00010000 && transitions > 11) {
   275aa:	2d0b      	cmp	r5, #11
   275ac:	d9e3      	bls.n	27576 <ble_ll_utils_calc_access_addr+0x66>
   275ae:	e000      	b.n	275b2 <ble_ll_utils_calc_access_addr+0xa2>
                /* Make sure we always detect invalid sequence below */
                mask = 0;
   275b0:	2300      	movs	r3, #0
                break;
            }
        }

        /* Invalid sequence found */
        if (mask != 0x80000000) {
   275b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   275b6:	d1ac      	bne.n	27512 <ble_ll_utils_calc_access_addr+0x2>
            continue;
        }

        /* Cannot be more than 24 transitions */
        if (transitions > 24) {
   275b8:	2d18      	cmp	r5, #24
   275ba:	d8aa      	bhi.n	27512 <ble_ll_utils_calc_access_addr+0x2>

        /* We have a valid access address */
        break;
    }
    return aa;
}
   275bc:	bd70      	pop	{r4, r5, r6, pc}
   275be:	bf00      	nop
   275c0:	8e89bed6 	.word	0x8e89bed6

000275c4 <ble_ll_utils_remapped_channel>:

uint8_t
ble_ll_utils_remapped_channel(uint8_t remap_index, const uint8_t *chanmap)
{
   275c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     * we just calculate
     * Iterate through channel map to find this channel
     */
    chan = 0;
    cntr = 0;
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   275c6:	2500      	movs	r5, #0
    chan = 0;
   275c8:	462e      	mov	r6, r5
    cntr = 0;
   275ca:	462c      	mov	r4, r5
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   275cc:	e00e      	b.n	275ec <ble_ll_utils_remapped_channel+0x28>
                    if (cntr == remap_index) {
                        return (chan + j);
                    }
                    ++cntr;
                }
                mask <<= 1;
   275ce:	005b      	lsls	r3, r3, #1
   275d0:	b2db      	uxtb	r3, r3
            for (j = 0; j < 8; j++) {
   275d2:	3201      	adds	r2, #1
   275d4:	2a07      	cmp	r2, #7
   275d6:	dc06      	bgt.n	275e6 <ble_ll_utils_remapped_channel+0x22>
                if (usable_chans & mask) {
   275d8:	423b      	tst	r3, r7
   275da:	d0f8      	beq.n	275ce <ble_ll_utils_remapped_channel+0xa>
                    if (cntr == remap_index) {
   275dc:	4284      	cmp	r4, r0
   275de:	d013      	beq.n	27608 <ble_ll_utils_remapped_channel+0x44>
                    ++cntr;
   275e0:	3401      	adds	r4, #1
   275e2:	b2e4      	uxtb	r4, r4
   275e4:	e7f3      	b.n	275ce <ble_ll_utils_remapped_channel+0xa>
            }
        }
        chan += 8;
   275e6:	3608      	adds	r6, #8
   275e8:	b2f6      	uxtb	r6, r6
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   275ea:	3501      	adds	r5, #1
   275ec:	2d04      	cmp	r5, #4
   275ee:	dc05      	bgt.n	275fc <ble_ll_utils_remapped_channel+0x38>
        usable_chans = chanmap[i];
   275f0:	5d4f      	ldrb	r7, [r1, r5]
        if (usable_chans != 0) {
   275f2:	2f00      	cmp	r7, #0
   275f4:	d0f7      	beq.n	275e6 <ble_ll_utils_remapped_channel+0x22>
            for (j = 0; j < 8; j++) {
   275f6:	2200      	movs	r2, #0
            mask = 0x01;
   275f8:	2301      	movs	r3, #1
   275fa:	e7eb      	b.n	275d4 <ble_ll_utils_remapped_channel+0x10>
    }

    /* we should never reach here */
    BLE_LL_ASSERT(0);
   275fc:	2300      	movs	r3, #0
   275fe:	461a      	mov	r2, r3
   27600:	4619      	mov	r1, r3
   27602:	4618      	mov	r0, r3
   27604:	f7e8 ffea 	bl	105dc <__assert_func>
                        return (chan + j);
   27608:	4432      	add	r2, r6
   2760a:	b2d0      	uxtb	r0, r2
    return 0;
}
   2760c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002760e <ble_ll_utils_calc_num_used_chans>:

uint8_t
ble_ll_utils_calc_num_used_chans(const uint8_t *chmap)
{
   2760e:	b430      	push	{r4, r5}
    int j;
    uint8_t mask;
    uint8_t chanbyte;
    uint8_t used_channels;

    used_channels = 0;
   27610:	2100      	movs	r1, #0
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   27612:	460d      	mov	r5, r1
   27614:	e00d      	b.n	27632 <ble_ll_utils_calc_num_used_chans+0x24>
                mask = 0x01;
                for (j = 0; j < 8; ++j) {
                    if (chanbyte & mask) {
                        ++used_channels;
                    }
                    mask <<= 1;
   27616:	005b      	lsls	r3, r3, #1
   27618:	b2db      	uxtb	r3, r3
                for (j = 0; j < 8; ++j) {
   2761a:	3201      	adds	r2, #1
   2761c:	2a07      	cmp	r2, #7
   2761e:	dc07      	bgt.n	27630 <ble_ll_utils_calc_num_used_chans+0x22>
                    if (chanbyte & mask) {
   27620:	4223      	tst	r3, r4
   27622:	d0f8      	beq.n	27616 <ble_ll_utils_calc_num_used_chans+0x8>
                        ++used_channels;
   27624:	3101      	adds	r1, #1
   27626:	b2c9      	uxtb	r1, r1
   27628:	e7f5      	b.n	27616 <ble_ll_utils_calc_num_used_chans+0x8>
                mask = 0x01;
   2762a:	2301      	movs	r3, #1
                for (j = 0; j < 8; ++j) {
   2762c:	2200      	movs	r2, #0
   2762e:	e7f5      	b.n	2761c <ble_ll_utils_calc_num_used_chans+0xe>
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   27630:	3501      	adds	r5, #1
   27632:	2d04      	cmp	r5, #4
   27634:	dc07      	bgt.n	27646 <ble_ll_utils_calc_num_used_chans+0x38>
        chanbyte = chmap[i];
   27636:	5d44      	ldrb	r4, [r0, r5]
        if (chanbyte) {
   27638:	2c00      	cmp	r4, #0
   2763a:	d0f9      	beq.n	27630 <ble_ll_utils_calc_num_used_chans+0x22>
            if (chanbyte == 0xff) {
   2763c:	2cff      	cmp	r4, #255	; 0xff
   2763e:	d1f4      	bne.n	2762a <ble_ll_utils_calc_num_used_chans+0x1c>
                used_channels += 8;
   27640:	3108      	adds	r1, #8
   27642:	b2c9      	uxtb	r1, r1
   27644:	e7f4      	b.n	27630 <ble_ll_utils_calc_num_used_chans+0x22>
                }
            }
        }
    }
    return used_channels;
}
   27646:	4608      	mov	r0, r1
   27648:	bc30      	pop	{r4, r5}
   2764a:	4770      	bx	lr

0002764c <ble_ll_utils_calc_window_widening>:
    int32_t time_since_last_anchor;
    uint32_t delta_msec;

    window_widening = 0;

    time_since_last_anchor = (int32_t)(anchor_point - last_anchor_point);
   2764c:	1a40      	subs	r0, r0, r1
    if (time_since_last_anchor > 0) {
   2764e:	2800      	cmp	r0, #0
   27650:	dd11      	ble.n	27676 <ble_ll_utils_calc_window_widening+0x2a>
{
   27652:	b510      	push	{r4, lr}
   27654:	4614      	mov	r4, r2
        delta_msec = os_cputime_ticks_to_usecs(time_since_last_anchor) / 1000;
   27656:	f7e9 fa1d 	bl	10a94 <os_cputime_ticks_to_usecs>
   2765a:	4a08      	ldr	r2, [pc, #32]	; (2767c <ble_ll_utils_calc_window_widening+0x30>)
   2765c:	fba2 3000 	umull	r3, r0, r2, r0
   27660:	0983      	lsrs	r3, r0, #6
        total_sca_ppm = g_ble_sca_ppm_tbl[master_sca] +
   27662:	4907      	ldr	r1, [pc, #28]	; (27680 <ble_ll_utils_calc_window_widening+0x34>)
   27664:	f831 0014 	ldrh.w	r0, [r1, r4, lsl #1]
   27668:	303c      	adds	r0, #60	; 0x3c
                                          MYNEWT_VAL(BLE_LL_OUR_SCA);
        window_widening = (total_sca_ppm * delta_msec) / 1000;
   2766a:	fb00 f003 	mul.w	r0, r0, r3
   2766e:	fba2 3000 	umull	r3, r0, r2, r0
   27672:	0980      	lsrs	r0, r0, #6
    }

    return window_widening;
}
   27674:	bd10      	pop	{r4, pc}
    window_widening = 0;
   27676:	2000      	movs	r0, #0
}
   27678:	4770      	bx	lr
   2767a:	bf00      	nop
   2767c:	10624dd3 	.word	0x10624dd3
   27680:	0002c994 	.word	0x0002c994

00027684 <ble_ll_whitelist_chg_allowed>:

struct ble_ll_whitelist_entry g_ble_ll_whitelist[BLE_LL_WHITELIST_SIZE];

static int
ble_ll_whitelist_chg_allowed(void)
{
   27684:	b508      	push	{r3, lr}
     *  -> scanning uses the whitelist and is enabled.
     *  -> initiating uses whitelist and a LE create connection command is in
     *     progress
     */
    rc = 1;
    if (!ble_ll_adv_can_chg_whitelist() || !ble_ll_scan_can_chg_whitelist()) {
   27686:	f7f8 ffd7 	bl	20638 <ble_ll_adv_can_chg_whitelist>
   2768a:	4603      	mov	r3, r0
   2768c:	b908      	cbnz	r0, 27692 <ble_ll_whitelist_chg_allowed+0xe>
        rc = 0;
    }
    return rc;
}
   2768e:	4618      	mov	r0, r3
   27690:	bd08      	pop	{r3, pc}
    if (!ble_ll_adv_can_chg_whitelist() || !ble_ll_scan_can_chg_whitelist()) {
   27692:	f7ff fa07 	bl	26aa4 <ble_ll_scan_can_chg_whitelist>
   27696:	4603      	mov	r3, r0
   27698:	2800      	cmp	r0, #0
   2769a:	d0f8      	beq.n	2768e <ble_ll_whitelist_chg_allowed+0xa>
    rc = 1;
   2769c:	2301      	movs	r3, #1
    return rc;
   2769e:	e7f6      	b.n	2768e <ble_ll_whitelist_chg_allowed+0xa>

000276a0 <ble_ll_whitelist_search>:
 * is the 'position' of the device in the whitelist (the index of the element
 * plus 1).
 */
static int
ble_ll_whitelist_search(uint8_t *addr, uint8_t addr_type)
{
   276a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   276a2:	4607      	mov	r7, r0
   276a4:	460e      	mov	r6, r1
    int i;
    struct ble_ll_whitelist_entry *wl;

    wl = &g_ble_ll_whitelist[0];
   276a6:	4c0c      	ldr	r4, [pc, #48]	; (276d8 <ble_ll_whitelist_search+0x38>)
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   276a8:	2500      	movs	r5, #0
   276aa:	e001      	b.n	276b0 <ble_ll_whitelist_search+0x10>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
            (!memcmp(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++wl;
   276ac:	3408      	adds	r4, #8
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   276ae:	3501      	adds	r5, #1
   276b0:	2d07      	cmp	r5, #7
   276b2:	dc0e      	bgt.n	276d2 <ble_ll_whitelist_search+0x32>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
   276b4:	7823      	ldrb	r3, [r4, #0]
   276b6:	2b00      	cmp	r3, #0
   276b8:	d0f8      	beq.n	276ac <ble_ll_whitelist_search+0xc>
   276ba:	7863      	ldrb	r3, [r4, #1]
   276bc:	42b3      	cmp	r3, r6
   276be:	d1f5      	bne.n	276ac <ble_ll_whitelist_search+0xc>
            (!memcmp(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   276c0:	2206      	movs	r2, #6
   276c2:	4639      	mov	r1, r7
   276c4:	1ca0      	adds	r0, r4, #2
   276c6:	f7ea fed9 	bl	1247c <memcmp>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
   276ca:	2800      	cmp	r0, #0
   276cc:	d1ee      	bne.n	276ac <ble_ll_whitelist_search+0xc>
            return i + 1;
   276ce:	1c68      	adds	r0, r5, #1
   276d0:	e000      	b.n	276d4 <ble_ll_whitelist_search+0x34>
    }

    return 0;
   276d2:	2000      	movs	r0, #0
}
   276d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   276d6:	bf00      	nop
   276d8:	200042d0 	.word	0x200042d0

000276dc <ble_ll_whitelist_clear>:
{
   276dc:	b508      	push	{r3, lr}
    if (!ble_ll_whitelist_chg_allowed()) {
   276de:	f7ff ffd1 	bl	27684 <ble_ll_whitelist_chg_allowed>
   276e2:	b160      	cbz	r0, 276fe <ble_ll_whitelist_clear+0x22>
    wl = &g_ble_ll_whitelist[0];
   276e4:	4a07      	ldr	r2, [pc, #28]	; (27704 <ble_ll_whitelist_clear+0x28>)
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   276e6:	2300      	movs	r3, #0
   276e8:	e003      	b.n	276f2 <ble_ll_whitelist_clear+0x16>
        wl->wl_valid = 0;
   276ea:	2100      	movs	r1, #0
   276ec:	f802 1b08 	strb.w	r1, [r2], #8
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   276f0:	3301      	adds	r3, #1
   276f2:	2b07      	cmp	r3, #7
   276f4:	ddf9      	ble.n	276ea <ble_ll_whitelist_clear+0xe>
    ble_hw_whitelist_clear();
   276f6:	f000 f943 	bl	27980 <ble_hw_whitelist_clear>
    return BLE_ERR_SUCCESS;
   276fa:	2000      	movs	r0, #0
}
   276fc:	bd08      	pop	{r3, pc}
        return BLE_ERR_CMD_DISALLOWED;
   276fe:	200c      	movs	r0, #12
   27700:	e7fc      	b.n	276fc <ble_ll_whitelist_clear+0x20>
   27702:	bf00      	nop
   27704:	200042d0 	.word	0x200042d0

00027708 <ble_ll_whitelist_read_size>:
    rspbuf[0] = BLE_LL_WHITELIST_SIZE;
   27708:	2308      	movs	r3, #8
   2770a:	7003      	strb	r3, [r0, #0]
    *rsplen = 1;
   2770c:	2301      	movs	r3, #1
   2770e:	700b      	strb	r3, [r1, #0]
}
   27710:	2000      	movs	r0, #0
   27712:	4770      	bx	lr

00027714 <ble_ll_whitelist_match>:
 *
 * @return int
 */
int
ble_ll_whitelist_match(uint8_t *addr, uint8_t addr_type, int is_ident)
{
   27714:	b508      	push	{r3, lr}
    /*
     * XXX: This should be changed. This is HW specific: some HW may be able
     * to both resolve a private address and perform a whitelist check. The
     * current BLE hw cannot support this.
     */
    if (is_ident) {
   27716:	b112      	cbz	r2, 2771e <ble_ll_whitelist_match+0xa>
        rc = ble_ll_whitelist_search(addr, addr_type);
   27718:	f7ff ffc2 	bl	276a0 <ble_ll_whitelist_search>
    }
#else
    rc = ble_ll_whitelist_search(addr, addr_type);
#endif
    return rc;
}
   2771c:	bd08      	pop	{r3, pc}
        rc = ble_hw_whitelist_match();
   2771e:	f000 f9c7 	bl	27ab0 <ble_hw_whitelist_match>
    return rc;
   27722:	e7fb      	b.n	2771c <ble_ll_whitelist_match+0x8>

00027724 <ble_ll_whitelist_add>:
 *
 * @return int
 */
int
ble_ll_whitelist_add(uint8_t *addr, uint8_t addr_type)
{
   27724:	b538      	push	{r3, r4, r5, lr}
   27726:	4604      	mov	r4, r0
   27728:	460d      	mov	r5, r1
    int i;
    int rc;
    struct ble_ll_whitelist_entry *wl;

    /* Must be in proper state */
    if (!ble_ll_whitelist_chg_allowed()) {
   2772a:	f7ff ffab 	bl	27684 <ble_ll_whitelist_chg_allowed>
   2772e:	b1f0      	cbz	r0, 2776e <ble_ll_whitelist_add+0x4a>
        return BLE_ERR_CMD_DISALLOWED;
    }

    /* Check if we have any open entries */
    rc = BLE_ERR_SUCCESS;
    if (!ble_ll_whitelist_search(addr, addr_type)) {
   27730:	4629      	mov	r1, r5
   27732:	4620      	mov	r0, r4
   27734:	f7ff ffb4 	bl	276a0 <ble_ll_whitelist_search>
   27738:	4603      	mov	r3, r0
   2773a:	b938      	cbnz	r0, 2774c <ble_ll_whitelist_add+0x28>
        wl = &g_ble_ll_whitelist[0];
   2773c:	4a0e      	ldr	r2, [pc, #56]	; (27778 <ble_ll_whitelist_add+0x54>)
        for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   2773e:	2b07      	cmp	r3, #7
   27740:	dc0e      	bgt.n	27760 <ble_ll_whitelist_add+0x3c>
            if (wl->wl_valid == 0) {
   27742:	7811      	ldrb	r1, [r2, #0]
   27744:	b121      	cbz	r1, 27750 <ble_ll_whitelist_add+0x2c>
                memcpy(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN);
                wl->wl_addr_type = addr_type;
                wl->wl_valid = 1;
                break;
            }
            ++wl;
   27746:	3208      	adds	r2, #8
        for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   27748:	3301      	adds	r3, #1
   2774a:	e7f8      	b.n	2773e <ble_ll_whitelist_add+0x1a>
    rc = BLE_ERR_SUCCESS;
   2774c:	2000      	movs	r0, #0
#endif
        }
    }

    return rc;
}
   2774e:	bd38      	pop	{r3, r4, r5, pc}
                memcpy(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN);
   27750:	6821      	ldr	r1, [r4, #0]
   27752:	f8c2 1002 	str.w	r1, [r2, #2]
   27756:	88a1      	ldrh	r1, [r4, #4]
   27758:	80d1      	strh	r1, [r2, #6]
                wl->wl_addr_type = addr_type;
   2775a:	7055      	strb	r5, [r2, #1]
                wl->wl_valid = 1;
   2775c:	2101      	movs	r1, #1
   2775e:	7011      	strb	r1, [r2, #0]
        if (i == BLE_LL_WHITELIST_SIZE) {
   27760:	2b08      	cmp	r3, #8
   27762:	d006      	beq.n	27772 <ble_ll_whitelist_add+0x4e>
            rc = ble_hw_whitelist_add(addr, addr_type);
   27764:	4629      	mov	r1, r5
   27766:	4620      	mov	r0, r4
   27768:	f000 f916 	bl	27998 <ble_hw_whitelist_add>
   2776c:	e7ef      	b.n	2774e <ble_ll_whitelist_add+0x2a>
        return BLE_ERR_CMD_DISALLOWED;
   2776e:	200c      	movs	r0, #12
   27770:	e7ed      	b.n	2774e <ble_ll_whitelist_add+0x2a>
            rc = BLE_ERR_MEM_CAPACITY;
   27772:	2007      	movs	r0, #7
   27774:	e7eb      	b.n	2774e <ble_ll_whitelist_add+0x2a>
   27776:	bf00      	nop
   27778:	200042d0 	.word	0x200042d0

0002777c <ble_ll_whitelist_rmv>:
 *
 * @return int 0: success, BLE error code otherwise
 */
int
ble_ll_whitelist_rmv(uint8_t *addr, uint8_t addr_type)
{
   2777c:	b538      	push	{r3, r4, r5, lr}
   2777e:	4604      	mov	r4, r0
   27780:	460d      	mov	r5, r1
    int position;

    /* Must be in proper state */
    if (!ble_ll_whitelist_chg_allowed()) {
   27782:	f7ff ff7f 	bl	27684 <ble_ll_whitelist_chg_allowed>
   27786:	b178      	cbz	r0, 277a8 <ble_ll_whitelist_rmv+0x2c>
        return BLE_ERR_CMD_DISALLOWED;
    }

    position = ble_ll_whitelist_search(addr, addr_type);
   27788:	4629      	mov	r1, r5
   2778a:	4620      	mov	r0, r4
   2778c:	f7ff ff88 	bl	276a0 <ble_ll_whitelist_search>
    if (position) {
   27790:	b120      	cbz	r0, 2779c <ble_ll_whitelist_rmv+0x20>
        g_ble_ll_whitelist[position - 1].wl_valid = 0;
   27792:	1e43      	subs	r3, r0, #1
   27794:	4a05      	ldr	r2, [pc, #20]	; (277ac <ble_ll_whitelist_rmv+0x30>)
   27796:	2100      	movs	r1, #0
   27798:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    }

#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_rmv(addr, addr_type);
   2779c:	4629      	mov	r1, r5
   2779e:	4620      	mov	r0, r4
   277a0:	f000 f92e 	bl	27a00 <ble_hw_whitelist_rmv>
#endif

    return BLE_ERR_SUCCESS;
   277a4:	2000      	movs	r0, #0
}
   277a6:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   277a8:	200c      	movs	r0, #12
   277aa:	e7fc      	b.n	277a6 <ble_ll_whitelist_rmv+0x2a>
   277ac:	200042d0 	.word	0x200042d0

000277b0 <ble_ll_whitelist_enable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_enable(void)
{
   277b0:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_enable();
   277b2:	f000 f965 	bl	27a80 <ble_hw_whitelist_enable>
#endif
}
   277b6:	bd08      	pop	{r3, pc}

000277b8 <ble_ll_whitelist_disable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_disable(void)
{
   277b8:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_disable();
   277ba:	f000 f96f 	bl	27a9c <ble_hw_whitelist_disable>
#endif
}
   277be:	bd08      	pop	{r3, pc}

000277c0 <ble_ll_xcvr_rfclk_state>:
#include "controller/ble_ll_xcvr.h"

#ifdef BLE_XCVR_RFCLK
int
ble_ll_xcvr_rfclk_state(void)
{
   277c0:	b538      	push	{r3, r4, r5, lr}
    uint32_t expiry;

    OS_ASSERT_CRITICAL();
   277c2:	f7e8 fe4a 	bl	1045a <os_arch_in_critical>
   277c6:	b130      	cbz	r0, 277d6 <ble_ll_xcvr_rfclk_state+0x16>
    if (g_ble_ll_data.ll_rfclk_state == BLE_RFCLK_STATE_ON) {
   277c8:	4b0b      	ldr	r3, [pc, #44]	; (277f8 <ble_ll_xcvr_rfclk_state+0x38>)
   277ca:	7a9b      	ldrb	r3, [r3, #10]
   277cc:	2b01      	cmp	r3, #1
   277ce:	d008      	beq.n	277e2 <ble_ll_xcvr_rfclk_state+0x22>
                g_ble_ll_data.ll_xtal_ticks) {
            g_ble_ll_data.ll_rfclk_state = BLE_RFCLK_STATE_SETTLED;
        }
    }
    return g_ble_ll_data.ll_rfclk_state;
}
   277d0:	4b09      	ldr	r3, [pc, #36]	; (277f8 <ble_ll_xcvr_rfclk_state+0x38>)
   277d2:	7a98      	ldrb	r0, [r3, #10]
   277d4:	bd38      	pop	{r3, r4, r5, pc}
    OS_ASSERT_CRITICAL();
   277d6:	2300      	movs	r3, #0
   277d8:	461a      	mov	r2, r3
   277da:	4619      	mov	r1, r3
   277dc:	4618      	mov	r0, r3
   277de:	f7e8 fefd 	bl	105dc <__assert_func>
        expiry = g_ble_ll_data.ll_rfclk_start_time;
   277e2:	4d05      	ldr	r5, [pc, #20]	; (277f8 <ble_ll_xcvr_rfclk_state+0x38>)
   277e4:	692c      	ldr	r4, [r5, #16]
        if ((int32_t)(os_cputime_get32() - expiry) >
   277e6:	f7e9 f947 	bl	10a78 <os_cputime_get32>
   277ea:	1b00      	subs	r0, r0, r4
                g_ble_ll_data.ll_xtal_ticks) {
   277ec:	89ab      	ldrh	r3, [r5, #12]
        if ((int32_t)(os_cputime_get32() - expiry) >
   277ee:	4298      	cmp	r0, r3
   277f0:	ddee      	ble.n	277d0 <ble_ll_xcvr_rfclk_state+0x10>
            g_ble_ll_data.ll_rfclk_state = BLE_RFCLK_STATE_SETTLED;
   277f2:	2202      	movs	r2, #2
   277f4:	72aa      	strb	r2, [r5, #10]
   277f6:	e7eb      	b.n	277d0 <ble_ll_xcvr_rfclk_state+0x10>
   277f8:	20003e20 	.word	0x20003e20

000277fc <ble_ll_xcvr_rfclk_enable>:

void
ble_ll_xcvr_rfclk_enable(void)
{
   277fc:	b508      	push	{r3, lr}
    OS_ASSERT_CRITICAL();
   277fe:	f7e8 fe2c 	bl	1045a <os_arch_in_critical>
   27802:	b118      	cbz	r0, 2780c <ble_ll_xcvr_rfclk_enable+0x10>
    if (g_ble_ll_data.ll_rfclk_state == BLE_RFCLK_STATE_OFF) {
   27804:	4b07      	ldr	r3, [pc, #28]	; (27824 <ble_ll_xcvr_rfclk_enable+0x28>)
   27806:	7a9b      	ldrb	r3, [r3, #10]
   27808:	b133      	cbz	r3, 27818 <ble_ll_xcvr_rfclk_enable+0x1c>
        g_ble_ll_data.ll_rfclk_state = BLE_RFCLK_STATE_ON;
        ble_phy_rfclk_enable();
    }
}
   2780a:	bd08      	pop	{r3, pc}
    OS_ASSERT_CRITICAL();
   2780c:	2300      	movs	r3, #0
   2780e:	461a      	mov	r2, r3
   27810:	4619      	mov	r1, r3
   27812:	4618      	mov	r0, r3
   27814:	f7e8 fee2 	bl	105dc <__assert_func>
        g_ble_ll_data.ll_rfclk_state = BLE_RFCLK_STATE_ON;
   27818:	4b02      	ldr	r3, [pc, #8]	; (27824 <ble_ll_xcvr_rfclk_enable+0x28>)
   2781a:	2201      	movs	r2, #1
   2781c:	729a      	strb	r2, [r3, #10]
        ble_phy_rfclk_enable();
   2781e:	f001 f831 	bl	28884 <ble_phy_rfclk_enable>
}
   27822:	e7f2      	b.n	2780a <ble_ll_xcvr_rfclk_enable+0xe>
   27824:	20003e20 	.word	0x20003e20

00027828 <ble_ll_xcvr_rfclk_disable>:

void
ble_ll_xcvr_rfclk_disable(void)
{
   27828:	b508      	push	{r3, lr}
    OS_ASSERT_CRITICAL();
   2782a:	f7e8 fe16 	bl	1045a <os_arch_in_critical>
   2782e:	b118      	cbz	r0, 27838 <ble_ll_xcvr_rfclk_disable+0x10>
    if (g_ble_ll_data.ll_rfclk_state != BLE_RFCLK_STATE_OFF) {
   27830:	4b07      	ldr	r3, [pc, #28]	; (27850 <ble_ll_xcvr_rfclk_disable+0x28>)
   27832:	7a9b      	ldrb	r3, [r3, #10]
   27834:	b933      	cbnz	r3, 27844 <ble_ll_xcvr_rfclk_disable+0x1c>
        ble_phy_rfclk_disable();
        g_ble_ll_data.ll_rfclk_state = BLE_RFCLK_STATE_OFF;
    }
}
   27836:	bd08      	pop	{r3, pc}
    OS_ASSERT_CRITICAL();
   27838:	2300      	movs	r3, #0
   2783a:	461a      	mov	r2, r3
   2783c:	4619      	mov	r1, r3
   2783e:	4618      	mov	r0, r3
   27840:	f7e8 fecc 	bl	105dc <__assert_func>
        ble_phy_rfclk_disable();
   27844:	f001 f822 	bl	2888c <ble_phy_rfclk_disable>
        g_ble_ll_data.ll_rfclk_state = BLE_RFCLK_STATE_OFF;
   27848:	4b01      	ldr	r3, [pc, #4]	; (27850 <ble_ll_xcvr_rfclk_disable+0x28>)
   2784a:	2200      	movs	r2, #0
   2784c:	729a      	strb	r2, [r3, #10]
}
   2784e:	e7f2      	b.n	27836 <ble_ll_xcvr_rfclk_disable+0xe>
   27850:	20003e20 	.word	0x20003e20

00027854 <ble_ll_xcvr_rfclk_stop>:

void
ble_ll_xcvr_rfclk_stop(void)
{
   27854:	b508      	push	{r3, lr}
    os_cputime_timer_stop(&g_ble_ll_data.ll_rfclk_timer);
   27856:	4803      	ldr	r0, [pc, #12]	; (27864 <ble_ll_xcvr_rfclk_stop+0x10>)
   27858:	f7e9 f90a 	bl	10a70 <os_cputime_timer_stop>
    ble_ll_xcvr_rfclk_disable();
   2785c:	f7ff ffe4 	bl	27828 <ble_ll_xcvr_rfclk_disable>
}
   27860:	bd08      	pop	{r3, pc}
   27862:	bf00      	nop
   27864:	20003e34 	.word	0x20003e34

00027868 <ble_ll_xcvr_rfclk_time_till_settled>:

uint32_t
ble_ll_xcvr_rfclk_time_till_settled(void)
{
   27868:	b508      	push	{r3, lr}
    int32_t dt;
    uint32_t rc;

    rc = 0;
    if (g_ble_ll_data.ll_rfclk_state == BLE_RFCLK_STATE_ON) {
   2786a:	4b0d      	ldr	r3, [pc, #52]	; (278a0 <ble_ll_xcvr_rfclk_time_till_settled+0x38>)
   2786c:	7a9b      	ldrb	r3, [r3, #10]
   2786e:	2b01      	cmp	r3, #1
   27870:	d001      	beq.n	27876 <ble_ll_xcvr_rfclk_time_till_settled+0xe>
    rc = 0;
   27872:	2000      	movs	r0, #0
            rc = g_ble_ll_data.ll_xtal_ticks - (uint32_t)dt;
        }
    }

    return rc;
}
   27874:	bd08      	pop	{r3, pc}
        dt = (int32_t)(os_cputime_get32() - g_ble_ll_data.ll_rfclk_start_time);
   27876:	f7e9 f8ff 	bl	10a78 <os_cputime_get32>
   2787a:	4b09      	ldr	r3, [pc, #36]	; (278a0 <ble_ll_xcvr_rfclk_time_till_settled+0x38>)
   2787c:	691b      	ldr	r3, [r3, #16]
        BLE_LL_ASSERT(dt >= 0);
   2787e:	1ac0      	subs	r0, r0, r3
   27880:	d405      	bmi.n	2788e <ble_ll_xcvr_rfclk_time_till_settled+0x26>
        if (dt < g_ble_ll_data.ll_xtal_ticks) {
   27882:	4b07      	ldr	r3, [pc, #28]	; (278a0 <ble_ll_xcvr_rfclk_time_till_settled+0x38>)
   27884:	899b      	ldrh	r3, [r3, #12]
   27886:	4283      	cmp	r3, r0
   27888:	dd07      	ble.n	2789a <ble_ll_xcvr_rfclk_time_till_settled+0x32>
            rc = g_ble_ll_data.ll_xtal_ticks - (uint32_t)dt;
   2788a:	1a18      	subs	r0, r3, r0
   2788c:	e7f2      	b.n	27874 <ble_ll_xcvr_rfclk_time_till_settled+0xc>
        BLE_LL_ASSERT(dt >= 0);
   2788e:	2300      	movs	r3, #0
   27890:	461a      	mov	r2, r3
   27892:	4619      	mov	r1, r3
   27894:	4618      	mov	r0, r3
   27896:	f7e8 fea1 	bl	105dc <__assert_func>
    rc = 0;
   2789a:	2000      	movs	r0, #0
    return rc;
   2789c:	e7ea      	b.n	27874 <ble_ll_xcvr_rfclk_time_till_settled+0xc>
   2789e:	bf00      	nop
   278a0:	20003e20 	.word	0x20003e20

000278a4 <ble_ll_xcvr_rfclk_start_now>:
 *
 * @param now
 */
void
ble_ll_xcvr_rfclk_start_now(uint32_t now)
{
   278a4:	b510      	push	{r4, lr}
   278a6:	4604      	mov	r4, r0
    ble_ll_xcvr_rfclk_enable();
   278a8:	f7ff ffa8 	bl	277fc <ble_ll_xcvr_rfclk_enable>
    g_ble_ll_data.ll_rfclk_start_time = now;
   278ac:	4b01      	ldr	r3, [pc, #4]	; (278b4 <ble_ll_xcvr_rfclk_start_now+0x10>)
   278ae:	611c      	str	r4, [r3, #16]
}
   278b0:	bd10      	pop	{r4, pc}
   278b2:	bf00      	nop
   278b4:	20003e20 	.word	0x20003e20

000278b8 <ble_ll_xcvr_rfclk_timer_exp>:
{
   278b8:	b508      	push	{r3, lr}
    if (g_ble_ll_data.ll_rfclk_state == BLE_RFCLK_STATE_OFF) {
   278ba:	4b04      	ldr	r3, [pc, #16]	; (278cc <ble_ll_xcvr_rfclk_timer_exp+0x14>)
   278bc:	7a9b      	ldrb	r3, [r3, #10]
   278be:	b103      	cbz	r3, 278c2 <ble_ll_xcvr_rfclk_timer_exp+0xa>
}
   278c0:	bd08      	pop	{r3, pc}
        ble_ll_xcvr_rfclk_start_now(os_cputime_get32());
   278c2:	f7e9 f8d9 	bl	10a78 <os_cputime_get32>
   278c6:	f7ff ffed 	bl	278a4 <ble_ll_xcvr_rfclk_start_now>
}
   278ca:	e7f9      	b.n	278c0 <ble_ll_xcvr_rfclk_timer_exp+0x8>
   278cc:	20003e20 	.word	0x20003e20

000278d0 <ble_ll_xcvr_rfclk_timer_start>:
{
    /*
     * If we are currently in an advertising event or a connection event,
     * no need to start the cputime timer
     */
    if ((g_ble_ll_data.ll_state == BLE_LL_STATE_ADV) ||
   278d0:	4b0d      	ldr	r3, [pc, #52]	; (27908 <ble_ll_xcvr_rfclk_timer_start+0x38>)
   278d2:	791b      	ldrb	r3, [r3, #4]
   278d4:	2b01      	cmp	r3, #1
   278d6:	d015      	beq.n	27904 <ble_ll_xcvr_rfclk_timer_start+0x34>
   278d8:	2b04      	cmp	r3, #4
   278da:	d013      	beq.n	27904 <ble_ll_xcvr_rfclk_timer_start+0x34>
{
   278dc:	b510      	push	{r4, lr}
        (g_ble_ll_data.ll_state == BLE_LL_STATE_CONNECTION)) {
        return;
    }

    /* Account for the settling time */
    cputime -= g_ble_ll_data.ll_xtal_ticks;
   278de:	4b0a      	ldr	r3, [pc, #40]	; (27908 <ble_ll_xcvr_rfclk_timer_start+0x38>)
   278e0:	899c      	ldrh	r4, [r3, #12]
   278e2:	1b04      	subs	r4, r0, r4
    /*
     * If the timer is on the list, we need to see if its expiry is before
     * 'cputime'. If the expiry is before, no need to do anything. If it
     * is after, we need to stop the timer and start at new time.
     */
    if (g_ble_ll_data.ll_rfclk_timer.link.tqe_prev != NULL) {
   278e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278e6:	b143      	cbz	r3, 278fa <ble_ll_xcvr_rfclk_timer_start+0x2a>
        if ((int32_t)(cputime - g_ble_ll_data.ll_rfclk_timer.expiry) >= 0) {
   278e8:	4b07      	ldr	r3, [pc, #28]	; (27908 <ble_ll_xcvr_rfclk_timer_start+0x38>)
   278ea:	6a1b      	ldr	r3, [r3, #32]
   278ec:	1ae3      	subs	r3, r4, r3
   278ee:	2b00      	cmp	r3, #0
   278f0:	db00      	blt.n	278f4 <ble_ll_xcvr_rfclk_timer_start+0x24>
            return;
        }
        os_cputime_timer_stop(&g_ble_ll_data.ll_rfclk_timer);
    }
    os_cputime_timer_start(&g_ble_ll_data.ll_rfclk_timer, cputime);
}
   278f2:	bd10      	pop	{r4, pc}
        os_cputime_timer_stop(&g_ble_ll_data.ll_rfclk_timer);
   278f4:	4805      	ldr	r0, [pc, #20]	; (2790c <ble_ll_xcvr_rfclk_timer_start+0x3c>)
   278f6:	f7e9 f8bb 	bl	10a70 <os_cputime_timer_stop>
    os_cputime_timer_start(&g_ble_ll_data.ll_rfclk_timer, cputime);
   278fa:	4621      	mov	r1, r4
   278fc:	4803      	ldr	r0, [pc, #12]	; (2790c <ble_ll_xcvr_rfclk_timer_start+0x3c>)
   278fe:	f7e9 f8b3 	bl	10a68 <os_cputime_timer_start>
   27902:	e7f6      	b.n	278f2 <ble_ll_xcvr_rfclk_timer_start+0x22>
   27904:	4770      	bx	lr
   27906:	bf00      	nop
   27908:	20003e20 	.word	0x20003e20
   2790c:	20003e34 	.word	0x20003e34

00027910 <ble_rng_isr>:
/**
 * Random number generator ISR.
 */
static void
ble_rng_isr(void)
{
   27910:	b508      	push	{r3, lr}
    uint8_t rnum;

    os_trace_isr_enter();

    /* No callback? Clear and disable interrupts */
    if (g_ble_rng_isr_cb == NULL) {
   27912:	4b0d      	ldr	r3, [pc, #52]	; (27948 <ble_rng_isr+0x38>)
   27914:	681b      	ldr	r3, [r3, #0]
   27916:	b163      	cbz	r3, 27932 <ble_rng_isr+0x22>
        os_trace_isr_exit();
        return;
    }

    /* If there is a value ready grab it */
    if (NRF_RNG->EVENTS_VALRDY) {
   27918:	4a0c      	ldr	r2, [pc, #48]	; (2794c <ble_rng_isr+0x3c>)
   2791a:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   2791e:	b13a      	cbz	r2, 27930 <ble_rng_isr+0x20>
        NRF_RNG->EVENTS_VALRDY = 0;
   27920:	4a0a      	ldr	r2, [pc, #40]	; (2794c <ble_rng_isr+0x3c>)
   27922:	2100      	movs	r1, #0
   27924:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        rnum = (uint8_t)NRF_RNG->VALUE;
   27928:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
        (*g_ble_rng_isr_cb)(rnum);
   2792c:	b2c0      	uxtb	r0, r0
   2792e:	4798      	blx	r3
    }

    os_trace_isr_exit();
}
   27930:	bd08      	pop	{r3, pc}
        NRF_RNG->INTENCLR = 1;
   27932:	4b06      	ldr	r3, [pc, #24]	; (2794c <ble_rng_isr+0x3c>)
   27934:	2201      	movs	r2, #1
   27936:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        NRF_RNG->EVENTS_VALRDY = 0;
   2793a:	2200      	movs	r2, #0
   2793c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        (void)NRF_RNG->SHORTS;
   27940:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   27944:	e7f4      	b.n	27930 <ble_rng_isr+0x20>
   27946:	bf00      	nop
   27948:	20004354 	.word	0x20004354
   2794c:	4000d000 	.word	0x4000d000

00027950 <ble_hw_get_public_addr>:
    if ((NRF_FICR->DEVICEADDRTYPE & 1) != 0) {
   27950:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27954:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   27958:	f013 0f01 	tst.w	r3, #1
   2795c:	d10d      	bne.n	2797a <ble_hw_get_public_addr+0x2a>
    addr_low = NRF_FICR->DEVICEADDR[0];
   2795e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   27962:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    addr_high = NRF_FICR->DEVICEADDR[1];
   27966:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    memcpy(addr->val, &addr_low, 4);
   2796a:	f8c0 2001 	str.w	r2, [r0, #1]
    memcpy(&addr->val[4], &addr_high, 2);
   2796e:	f8a0 3005 	strh.w	r3, [r0, #5]
    addr->type = BLE_ADDR_PUBLIC;
   27972:	2300      	movs	r3, #0
   27974:	7003      	strb	r3, [r0, #0]
    return 0;
   27976:	4618      	mov	r0, r3
   27978:	4770      	bx	lr
        return -1;
   2797a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2797e:	4770      	bx	lr

00027980 <ble_hw_whitelist_clear>:
    NRF_RADIO->DACNF = 0;
   27980:	2300      	movs	r3, #0
   27982:	4a03      	ldr	r2, [pc, #12]	; (27990 <ble_hw_whitelist_clear+0x10>)
   27984:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    g_ble_hw_whitelist_mask = 0;
   27988:	4a02      	ldr	r2, [pc, #8]	; (27994 <ble_hw_whitelist_clear+0x14>)
   2798a:	7013      	strb	r3, [r2, #0]
}
   2798c:	4770      	bx	lr
   2798e:	bf00      	nop
   27990:	40001000 	.word	0x40001000
   27994:	200037a8 	.word	0x200037a8

00027998 <ble_hw_whitelist_add>:
{
   27998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mask = 0x01;
   2799c:	2501      	movs	r5, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   2799e:	2400      	movs	r4, #0
   279a0:	2c07      	cmp	r4, #7
   279a2:	dc26      	bgt.n	279f2 <ble_hw_whitelist_add+0x5a>
        if ((mask & g_ble_hw_whitelist_mask) == 0) {
   279a4:	4b14      	ldr	r3, [pc, #80]	; (279f8 <ble_hw_whitelist_add+0x60>)
   279a6:	781b      	ldrb	r3, [r3, #0]
   279a8:	422b      	tst	r3, r5
   279aa:	d002      	beq.n	279b2 <ble_hw_whitelist_add+0x1a>
        mask <<= 1;
   279ac:	006d      	lsls	r5, r5, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   279ae:	3401      	adds	r4, #1
   279b0:	e7f6      	b.n	279a0 <ble_hw_whitelist_add+0x8>
   279b2:	460f      	mov	r7, r1
   279b4:	4606      	mov	r6, r0
            NRF_RADIO->DAB[i] = get_le32(addr);
   279b6:	f7f7 f8da 	bl	1eb6e <get_le32>
   279ba:	f8df 8040 	ldr.w	r8, [pc, #64]	; 279fc <ble_hw_whitelist_add+0x64>
   279be:	f504 73c0 	add.w	r3, r4, #384	; 0x180
   279c2:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
            NRF_RADIO->DAP[i] = get_le16(addr + 4);
   279c6:	1d30      	adds	r0, r6, #4
   279c8:	f7f7 f8cc 	bl	1eb64 <get_le16>
   279cc:	f504 74c4 	add.w	r4, r4, #392	; 0x188
   279d0:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
            if (addr_type == BLE_ADDR_RANDOM) {
   279d4:	2f01      	cmp	r7, #1
   279d6:	d005      	beq.n	279e4 <ble_hw_whitelist_add+0x4c>
            g_ble_hw_whitelist_mask |= mask;
   279d8:	4a07      	ldr	r2, [pc, #28]	; (279f8 <ble_hw_whitelist_add+0x60>)
   279da:	7813      	ldrb	r3, [r2, #0]
   279dc:	431d      	orrs	r5, r3
   279de:	7015      	strb	r5, [r2, #0]
            return BLE_ERR_SUCCESS;
   279e0:	2000      	movs	r0, #0
   279e2:	e007      	b.n	279f4 <ble_hw_whitelist_add+0x5c>
                NRF_RADIO->DACNF |= (mask << 8);
   279e4:	f8d8 3640 	ldr.w	r3, [r8, #1600]	; 0x640
   279e8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   279ec:	f8c8 3640 	str.w	r3, [r8, #1600]	; 0x640
   279f0:	e7f2      	b.n	279d8 <ble_hw_whitelist_add+0x40>
    return BLE_ERR_MEM_CAPACITY;
   279f2:	2007      	movs	r0, #7
}
   279f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   279f8:	200037a8 	.word	0x200037a8
   279fc:	40001000 	.word	0x40001000

00027a00 <ble_hw_whitelist_rmv>:
{
   27a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27a02:	4606      	mov	r6, r0
   27a04:	460d      	mov	r5, r1
    dab = get_le32(addr);
   27a06:	f7f7 f8b2 	bl	1eb6e <get_le32>
   27a0a:	4604      	mov	r4, r0
    dap = get_le16(addr + 4);
   27a0c:	1d30      	adds	r0, r6, #4
   27a0e:	f7f7 f8a9 	bl	1eb64 <get_le16>
    txadd = NRF_RADIO->DACNF >> 8;
   27a12:	4b19      	ldr	r3, [pc, #100]	; (27a78 <ble_hw_whitelist_rmv+0x78>)
   27a14:	f8d3 7640 	ldr.w	r7, [r3, #1600]	; 0x640
   27a18:	0a3f      	lsrs	r7, r7, #8
    mask = 0x01;
   27a1a:	2201      	movs	r2, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   27a1c:	2300      	movs	r3, #0
   27a1e:	e002      	b.n	27a26 <ble_hw_whitelist_rmv+0x26>
                    if (cfg_addr != 0) {
   27a20:	b9d1      	cbnz	r1, 27a58 <ble_hw_whitelist_rmv+0x58>
        mask <<= 1;
   27a22:	0052      	lsls	r2, r2, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   27a24:	3301      	adds	r3, #1
   27a26:	2b07      	cmp	r3, #7
   27a28:	dc16      	bgt.n	27a58 <ble_hw_whitelist_rmv+0x58>
        if (mask & g_ble_hw_whitelist_mask) {
   27a2a:	4914      	ldr	r1, [pc, #80]	; (27a7c <ble_hw_whitelist_rmv+0x7c>)
   27a2c:	7809      	ldrb	r1, [r1, #0]
   27a2e:	4211      	tst	r1, r2
   27a30:	d0f7      	beq.n	27a22 <ble_hw_whitelist_rmv+0x22>
            if ((dab == NRF_RADIO->DAB[i]) && (dap == NRF_RADIO->DAP[i])) {
   27a32:	f503 71c0 	add.w	r1, r3, #384	; 0x180
   27a36:	4e10      	ldr	r6, [pc, #64]	; (27a78 <ble_hw_whitelist_rmv+0x78>)
   27a38:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   27a3c:	42a1      	cmp	r1, r4
   27a3e:	d1f0      	bne.n	27a22 <ble_hw_whitelist_rmv+0x22>
   27a40:	f503 71c4 	add.w	r1, r3, #392	; 0x188
   27a44:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   27a48:	4288      	cmp	r0, r1
   27a4a:	d1ea      	bne.n	27a22 <ble_hw_whitelist_rmv+0x22>
                cfg_addr = txadd & mask;
   27a4c:	b2d1      	uxtb	r1, r2
   27a4e:	4039      	ands	r1, r7
                if (addr_type == BLE_ADDR_RANDOM) {
   27a50:	2d01      	cmp	r5, #1
   27a52:	d0e5      	beq.n	27a20 <ble_hw_whitelist_rmv+0x20>
                    if (cfg_addr == 0) {
   27a54:	2900      	cmp	r1, #0
   27a56:	d1e4      	bne.n	27a22 <ble_hw_whitelist_rmv+0x22>
    if (i < BLE_HW_WHITE_LIST_SIZE) {
   27a58:	2b07      	cmp	r3, #7
   27a5a:	dc0b      	bgt.n	27a74 <ble_hw_whitelist_rmv+0x74>
        g_ble_hw_whitelist_mask &= ~mask;
   27a5c:	4907      	ldr	r1, [pc, #28]	; (27a7c <ble_hw_whitelist_rmv+0x7c>)
   27a5e:	780b      	ldrb	r3, [r1, #0]
   27a60:	ea23 0302 	bic.w	r3, r3, r2
   27a64:	700b      	strb	r3, [r1, #0]
        NRF_RADIO->DACNF &= ~mask;
   27a66:	4904      	ldr	r1, [pc, #16]	; (27a78 <ble_hw_whitelist_rmv+0x78>)
   27a68:	f8d1 3640 	ldr.w	r3, [r1, #1600]	; 0x640
   27a6c:	ea23 0202 	bic.w	r2, r3, r2
   27a70:	f8c1 2640 	str.w	r2, [r1, #1600]	; 0x640
}
   27a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27a76:	bf00      	nop
   27a78:	40001000 	.word	0x40001000
   27a7c:	200037a8 	.word	0x200037a8

00027a80 <ble_hw_whitelist_enable>:
    NRF_RADIO->DACNF |= g_ble_hw_whitelist_mask;
   27a80:	4a04      	ldr	r2, [pc, #16]	; (27a94 <ble_hw_whitelist_enable+0x14>)
   27a82:	f8d2 1640 	ldr.w	r1, [r2, #1600]	; 0x640
   27a86:	4b04      	ldr	r3, [pc, #16]	; (27a98 <ble_hw_whitelist_enable+0x18>)
   27a88:	781b      	ldrb	r3, [r3, #0]
   27a8a:	430b      	orrs	r3, r1
   27a8c:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   27a90:	4770      	bx	lr
   27a92:	bf00      	nop
   27a94:	40001000 	.word	0x40001000
   27a98:	200037a8 	.word	0x200037a8

00027a9c <ble_hw_whitelist_disable>:
    NRF_RADIO->DACNF &= 0x0000ff00;
   27a9c:	4a03      	ldr	r2, [pc, #12]	; (27aac <ble_hw_whitelist_disable+0x10>)
   27a9e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   27aa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   27aa6:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   27aaa:	4770      	bx	lr
   27aac:	40001000 	.word	0x40001000

00027ab0 <ble_hw_whitelist_match>:
    return (int)NRF_RADIO->EVENTS_DEVMATCH;
   27ab0:	4b01      	ldr	r3, [pc, #4]	; (27ab8 <ble_hw_whitelist_match+0x8>)
   27ab2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   27ab6:	4770      	bx	lr
   27ab8:	40001000 	.word	0x40001000

00027abc <ble_hw_encrypt_block>:
    NRF_ECB->TASKS_STOPECB = 1;
   27abc:	4b0c      	ldr	r3, [pc, #48]	; (27af0 <ble_hw_encrypt_block+0x34>)
   27abe:	2201      	movs	r2, #1
   27ac0:	605a      	str	r2, [r3, #4]
    NRF_ECB->EVENTS_ENDECB = 0;
   27ac2:	2100      	movs	r1, #0
   27ac4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    NRF_ECB->EVENTS_ERRORECB = 0;
   27ac8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   27acc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    NRF_ECB->TASKS_STARTECB = 1;
   27ad0:	601a      	str	r2, [r3, #0]
        end = NRF_ECB->EVENTS_ENDECB;
   27ad2:	4b07      	ldr	r3, [pc, #28]	; (27af0 <ble_hw_encrypt_block+0x34>)
   27ad4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
        err = NRF_ECB->EVENTS_ERRORECB;
   27ad8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        if (end || err) {
   27adc:	b90a      	cbnz	r2, 27ae2 <ble_hw_encrypt_block+0x26>
   27ade:	2b00      	cmp	r3, #0
   27ae0:	d0f7      	beq.n	27ad2 <ble_hw_encrypt_block+0x16>
            if (err) {
   27ae2:	b90b      	cbnz	r3, 27ae8 <ble_hw_encrypt_block+0x2c>
    rc = 0;
   27ae4:	2000      	movs	r0, #0
   27ae6:	4770      	bx	lr
                rc = -1;
   27ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   27aec:	4770      	bx	lr
   27aee:	bf00      	nop
   27af0:	4000e000 	.word	0x4000e000

00027af4 <ble_hw_rng_init>:
 */
int
ble_hw_rng_init(ble_rng_isr_cb_t cb, int bias)
{
    /* Set bias */
    if (bias) {
   27af4:	b199      	cbz	r1, 27b1e <ble_hw_rng_init+0x2a>
        NRF_RNG->CONFIG = 1;
   27af6:	4b0c      	ldr	r3, [pc, #48]	; (27b28 <ble_hw_rng_init+0x34>)
   27af8:	2201      	movs	r2, #1
   27afa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    } else {
        NRF_RNG->CONFIG = 0;
    }

    /* If we were passed a function pointer we need to enable the interrupt */
    if (cb != NULL) {
   27afe:	b160      	cbz	r0, 27b1a <ble_hw_rng_init+0x26>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27b00:	4b0a      	ldr	r3, [pc, #40]	; (27b2c <ble_hw_rng_init+0x38>)
   27b02:	22e0      	movs	r2, #224	; 0xe0
   27b04:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  uint32_t vectors = (uint32_t )SCB->VTOR;
   27b08:	4a09      	ldr	r2, [pc, #36]	; (27b30 <ble_hw_rng_init+0x3c>)
   27b0a:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   27b0c:	4909      	ldr	r1, [pc, #36]	; (27b34 <ble_hw_rng_init+0x40>)
   27b0e:	6751      	str	r1, [r2, #116]	; 0x74
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   27b10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   27b14:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(RNG_IRQn, (uint32_t)ble_rng_isr);
#else
        ble_npl_hw_set_isr(RNG_IRQn, ble_rng_isr);
#endif
        NVIC_EnableIRQ(RNG_IRQn);
        g_ble_rng_isr_cb = cb;
   27b16:	4b08      	ldr	r3, [pc, #32]	; (27b38 <ble_hw_rng_init+0x44>)
   27b18:	6018      	str	r0, [r3, #0]
    }

    return 0;
}
   27b1a:	2000      	movs	r0, #0
   27b1c:	4770      	bx	lr
        NRF_RNG->CONFIG = 0;
   27b1e:	4b02      	ldr	r3, [pc, #8]	; (27b28 <ble_hw_rng_init+0x34>)
   27b20:	2200      	movs	r2, #0
   27b22:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   27b26:	e7ea      	b.n	27afe <ble_hw_rng_init+0xa>
   27b28:	4000d000 	.word	0x4000d000
   27b2c:	e000e100 	.word	0xe000e100
   27b30:	e000ed00 	.word	0xe000ed00
   27b34:	00027911 	.word	0x00027911
   27b38:	20004354 	.word	0x20004354

00027b3c <ble_hw_rng_start>:
 *
 * @return int
 */
int
ble_hw_rng_start(void)
{
   27b3c:	b508      	push	{r3, lr}
    os_sr_t sr;

    /* No need for interrupt if there is no callback */
    OS_ENTER_CRITICAL(sr);
   27b3e:	f7e8 fc83 	bl	10448 <os_arch_save_sr>
    NRF_RNG->EVENTS_VALRDY = 0;
   27b42:	4b09      	ldr	r3, [pc, #36]	; (27b68 <ble_hw_rng_start+0x2c>)
   27b44:	2200      	movs	r2, #0
   27b46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (g_ble_rng_isr_cb) {
   27b4a:	4b08      	ldr	r3, [pc, #32]	; (27b6c <ble_hw_rng_start+0x30>)
   27b4c:	681b      	ldr	r3, [r3, #0]
   27b4e:	b11b      	cbz	r3, 27b58 <ble_hw_rng_start+0x1c>
        NRF_RNG->INTENSET = 1;
   27b50:	4b05      	ldr	r3, [pc, #20]	; (27b68 <ble_hw_rng_start+0x2c>)
   27b52:	2201      	movs	r2, #1
   27b54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    }
    NRF_RNG->TASKS_START = 1;
   27b58:	4b03      	ldr	r3, [pc, #12]	; (27b68 <ble_hw_rng_start+0x2c>)
   27b5a:	2201      	movs	r2, #1
   27b5c:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   27b5e:	f7e8 fc79 	bl	10454 <os_arch_restore_sr>

    return 0;
}
   27b62:	2000      	movs	r0, #0
   27b64:	bd08      	pop	{r3, pc}
   27b66:	bf00      	nop
   27b68:	4000d000 	.word	0x4000d000
   27b6c:	20004354 	.word	0x20004354

00027b70 <ble_hw_rng_stop>:
 *
 * @return int
 */
int
ble_hw_rng_stop(void)
{
   27b70:	b510      	push	{r4, lr}
    os_sr_t sr;

    /* No need for interrupt if there is no callback */
    OS_ENTER_CRITICAL(sr);
   27b72:	f7e8 fc69 	bl	10448 <os_arch_save_sr>
    NRF_RNG->INTENCLR = 1;
   27b76:	4b06      	ldr	r3, [pc, #24]	; (27b90 <ble_hw_rng_stop+0x20>)
   27b78:	2201      	movs	r2, #1
   27b7a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RNG->TASKS_STOP = 1;
   27b7e:	605a      	str	r2, [r3, #4]
    NRF_RNG->EVENTS_VALRDY = 0;
   27b80:	2400      	movs	r4, #0
   27b82:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    OS_EXIT_CRITICAL(sr);
   27b86:	f7e8 fc65 	bl	10454 <os_arch_restore_sr>

    return 0;
}
   27b8a:	4620      	mov	r0, r4
   27b8c:	bd10      	pop	{r4, pc}
   27b8e:	bf00      	nop
   27b90:	4000d000 	.word	0x4000d000

00027b94 <ble_hw_resolv_list_clear>:
 * @return int
 */
void
ble_hw_resolv_list_clear(void)
{
    g_nrf_num_irks = 0;
   27b94:	4b01      	ldr	r3, [pc, #4]	; (27b9c <ble_hw_resolv_list_clear+0x8>)
   27b96:	2200      	movs	r2, #0
   27b98:	701a      	strb	r2, [r3, #0]
}
   27b9a:	4770      	bx	lr
   27b9c:	20004310 	.word	0x20004310

00027ba0 <ble_hw_resolv_list_add>:
ble_hw_resolv_list_add(uint8_t *irk)
{
    uint32_t *nrf_entry;

    /* Find first ununsed device address match element */
    if (g_nrf_num_irks == NRF_IRK_LIST_ENTRIES) {
   27ba0:	4b0b      	ldr	r3, [pc, #44]	; (27bd0 <ble_hw_resolv_list_add+0x30>)
   27ba2:	781b      	ldrb	r3, [r3, #0]
   27ba4:	2b04      	cmp	r3, #4
   27ba6:	d011      	beq.n	27bcc <ble_hw_resolv_list_add+0x2c>
{
   27ba8:	b4f0      	push	{r4, r5, r6, r7}
        return BLE_ERR_MEM_CAPACITY;
    }

    /* Copy into irk list */
    nrf_entry = &g_nrf_irk_list[4 * g_nrf_num_irks];
   27baa:	011c      	lsls	r4, r3, #4
   27bac:	4909      	ldr	r1, [pc, #36]	; (27bd4 <ble_hw_resolv_list_add+0x34>)
   27bae:	1862      	adds	r2, r4, r1
    memcpy(nrf_entry, irk, 16);
   27bb0:	6807      	ldr	r7, [r0, #0]
   27bb2:	6846      	ldr	r6, [r0, #4]
   27bb4:	6885      	ldr	r5, [r0, #8]
   27bb6:	68c0      	ldr	r0, [r0, #12]
   27bb8:	5067      	str	r7, [r4, r1]
   27bba:	6056      	str	r6, [r2, #4]
   27bbc:	6095      	str	r5, [r2, #8]
   27bbe:	60d0      	str	r0, [r2, #12]

    /* Add to total */
    ++g_nrf_num_irks;
   27bc0:	3301      	adds	r3, #1
   27bc2:	4a03      	ldr	r2, [pc, #12]	; (27bd0 <ble_hw_resolv_list_add+0x30>)
   27bc4:	7013      	strb	r3, [r2, #0]
    return BLE_ERR_SUCCESS;
   27bc6:	2000      	movs	r0, #0
}
   27bc8:	bcf0      	pop	{r4, r5, r6, r7}
   27bca:	4770      	bx	lr
        return BLE_ERR_MEM_CAPACITY;
   27bcc:	2007      	movs	r0, #7
}
   27bce:	4770      	bx	lr
   27bd0:	20004310 	.word	0x20004310
   27bd4:	20004314 	.word	0x20004314

00027bd8 <ble_hw_resolv_list_rmv>:
void
ble_hw_resolv_list_rmv(int index)
{
    uint32_t *irk_entry;

    if (index < g_nrf_num_irks) {
   27bd8:	4b0b      	ldr	r3, [pc, #44]	; (27c08 <ble_hw_resolv_list_rmv+0x30>)
   27bda:	781b      	ldrb	r3, [r3, #0]
   27bdc:	4283      	cmp	r3, r0
   27bde:	dd11      	ble.n	27c04 <ble_hw_resolv_list_rmv+0x2c>
{
   27be0:	b510      	push	{r4, lr}
        --g_nrf_num_irks;
   27be2:	3b01      	subs	r3, #1
   27be4:	b2db      	uxtb	r3, r3
   27be6:	4a08      	ldr	r2, [pc, #32]	; (27c08 <ble_hw_resolv_list_rmv+0x30>)
   27be8:	7013      	strb	r3, [r2, #0]
        irk_entry = &g_nrf_irk_list[index];
   27bea:	4c08      	ldr	r4, [pc, #32]	; (27c0c <ble_hw_resolv_list_rmv+0x34>)
   27bec:	eb04 0480 	add.w	r4, r4, r0, lsl #2
        if (g_nrf_num_irks > index) {
   27bf0:	4283      	cmp	r3, r0
   27bf2:	dc00      	bgt.n	27bf6 <ble_hw_resolv_list_rmv+0x1e>
            memmove(irk_entry, irk_entry + 4, g_nrf_num_irks - index);
        }
    }
}
   27bf4:	bd10      	pop	{r4, pc}
            memmove(irk_entry, irk_entry + 4, g_nrf_num_irks - index);
   27bf6:	1a1a      	subs	r2, r3, r0
   27bf8:	f104 0110 	add.w	r1, r4, #16
   27bfc:	4620      	mov	r0, r4
   27bfe:	f7ea fc6e 	bl	124de <memmove>
}
   27c02:	e7f7      	b.n	27bf4 <ble_hw_resolv_list_rmv+0x1c>
   27c04:	4770      	bx	lr
   27c06:	bf00      	nop
   27c08:	20004310 	.word	0x20004310
   27c0c:	20004314 	.word	0x20004314

00027c10 <ble_hw_resolv_list_size>:
 */
uint8_t
ble_hw_resolv_list_size(void)
{
    return BLE_HW_RESOLV_LIST_SIZE;
}
   27c10:	2010      	movs	r0, #16
   27c12:	4770      	bx	lr

00027c14 <ble_hw_resolv_list_match>:
int
ble_hw_resolv_list_match(void)
{
    uint32_t index;

    if (NRF_AAR->EVENTS_END) {
   27c14:	4b08      	ldr	r3, [pc, #32]	; (27c38 <ble_hw_resolv_list_match+0x24>)
   27c16:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   27c1a:	b13b      	cbz	r3, 27c2c <ble_hw_resolv_list_match+0x18>
        if (NRF_AAR->EVENTS_RESOLVED) {
   27c1c:	4b06      	ldr	r3, [pc, #24]	; (27c38 <ble_hw_resolv_list_match+0x24>)
   27c1e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   27c22:	b133      	cbz	r3, 27c32 <ble_hw_resolv_list_match+0x1e>
            index = NRF_AAR->STATUS;
   27c24:	4b04      	ldr	r3, [pc, #16]	; (27c38 <ble_hw_resolv_list_match+0x24>)
   27c26:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
            return (int)index;
   27c2a:	4770      	bx	lr
        }
    }

    return -1;
   27c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27c30:	4770      	bx	lr
   27c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   27c36:	4770      	bx	lr
   27c38:	4000f000 	.word	0x4000f000

00027c3c <ble_phy_apply_errata_102_106_107>:
{
    /* [102] RADIO: PAYLOAD/END events delayed or not triggered after ADDRESS
     * [106] RADIO: Higher CRC error rates for some access addresses
     * [107] RADIO: Immediate address match for access addresses containing MSBs 0x00
     */
    *(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   27c3c:	4a04      	ldr	r2, [pc, #16]	; (27c50 <ble_phy_apply_errata_102_106_107+0x14>)
   27c3e:	6813      	ldr	r3, [r2, #0]
                         0xfffffffe) | 0x01000000;
   27c40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   27c44:	f023 0301 	bic.w	r3, r3, #1
   27c48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    *(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   27c4c:	6013      	str	r3, [r2, #0]
}
   27c4e:	4770      	bx	lr
   27c50:	40001774 	.word	0x40001774

00027c54 <nrf_wait_disabled>:
static void
nrf_wait_disabled(void)
{
    uint32_t state;

    state = NRF_RADIO->STATE;
   27c54:	4b06      	ldr	r3, [pc, #24]	; (27c70 <nrf_wait_disabled+0x1c>)
   27c56:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    if (state != RADIO_STATE_STATE_Disabled) {
   27c5a:	b143      	cbz	r3, 27c6e <nrf_wait_disabled+0x1a>
        if ((state == RADIO_STATE_STATE_RxDisable) ||
   27c5c:	2b04      	cmp	r3, #4
   27c5e:	d001      	beq.n	27c64 <nrf_wait_disabled+0x10>
   27c60:	2b0c      	cmp	r3, #12
   27c62:	d104      	bne.n	27c6e <nrf_wait_disabled+0x1a>
            (state == RADIO_STATE_STATE_TxDisable)) {
            /* This will end within a short time (6 usecs). Just poll */
            while (NRF_RADIO->STATE == state) {
   27c64:	4a02      	ldr	r2, [pc, #8]	; (27c70 <nrf_wait_disabled+0x1c>)
   27c66:	f8d2 2550 	ldr.w	r2, [r2, #1360]	; 0x550
   27c6a:	429a      	cmp	r2, r3
   27c6c:	d0fa      	beq.n	27c64 <nrf_wait_disabled+0x10>
                /* If this fails, something is really wrong. Should last
                 * no more than 6 usecs */
            }
        }
    }
}
   27c6e:	4770      	bx	lr
   27c70:	40001000 	.word	0x40001000

00027c74 <ble_phy_set_start_time>:
 *
 *
 */
static int
ble_phy_set_start_time(uint32_t cputime, uint8_t rem_usecs, bool tx)
{
   27c74:	b430      	push	{r4, r5}
     * Radio ramp-up time is 40 usecs and TX delay is 3 or 5 usecs depending on
     * phy, thus we'll offset RTC by 2 full ticks (61 usecs) and then compensate
     * using TIMER0 with 1 usec precision.
     */

    cputime -= 2;
   27c76:	1e84      	subs	r4, r0, #2
    rem_usecs += 61;
    if (tx) {
   27c78:	2a00      	cmp	r2, #0
   27c7a:	d03d      	beq.n	27cf8 <ble_phy_set_start_time+0x84>
        rem_usecs -= BLE_PHY_T_TXENFAST;
   27c7c:	3115      	adds	r1, #21
   27c7e:	b2c9      	uxtb	r1, r1
        rem_usecs -= g_ble_phy_t_txdelay[g_ble_phy_data.phy_cur_phy_mode];
   27c80:	4b23      	ldr	r3, [pc, #140]	; (27d10 <ble_phy_set_start_time+0x9c>)
   27c82:	7adb      	ldrb	r3, [r3, #11]
   27c84:	4a23      	ldr	r2, [pc, #140]	; (27d14 <ble_phy_set_start_time+0xa0>)
   27c86:	5cd3      	ldrb	r3, [r2, r3]
   27c88:	1ac9      	subs	r1, r1, r3
   27c8a:	b2c9      	uxtb	r1, r1
     * tick then we should better count one more low-power tick rather than
     * 30 high-power usecs. Also make sure we don't set TIMER0 CC to 0 as the
     * compare won't occur.
     */

    if (rem_usecs > 30) {
   27c8c:	291e      	cmp	r1, #30
   27c8e:	d902      	bls.n	27c96 <ble_phy_set_start_time+0x22>
        cputime++;
   27c90:	1e44      	subs	r4, r0, #1
        rem_usecs -= 30;
   27c92:	391e      	subs	r1, #30
   27c94:	b2c9      	uxtb	r1, r1
     *      counter.
     *
     * NOTE: since the counter can tick 1 while we do these calculations we
     * need to account for it.
     */
    next_cc = cputime & 0xffffff;
   27c96:	f024 457f 	bic.w	r5, r4, #4278190080	; 0xff000000
    cur_cc = NRF_RTC0->CC[0];
   27c9a:	4a1f      	ldr	r2, [pc, #124]	; (27d18 <ble_phy_set_start_time+0xa4>)
   27c9c:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    cntr = NRF_RTC0->COUNTER;
   27ca0:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504

    delta = (cur_cc - cntr) & 0xffffff;
   27ca4:	1a9b      	subs	r3, r3, r2
   27ca6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((delta <= 3) && (delta != 0)) {
   27caa:	3b01      	subs	r3, #1
   27cac:	2b02      	cmp	r3, #2
   27cae:	d926      	bls.n	27cfe <ble_phy_set_start_time+0x8a>
        return -1;
    }
    delta = (next_cc - cntr) & 0xffffff;
   27cb0:	1aaa      	subs	r2, r5, r2
   27cb2:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
    if ((delta & 0x800000) || (delta < 3)) {
   27cb6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   27cba:	d123      	bne.n	27d04 <ble_phy_set_start_time+0x90>
   27cbc:	2b02      	cmp	r3, #2
   27cbe:	d924      	bls.n	27d0a <ble_phy_set_start_time+0x96>
        return -1;
    }

    /* Clear and set TIMER0 to fire off at proper time */
    NRF_TIMER0->TASKS_CLEAR = 1;
   27cc0:	4b16      	ldr	r3, [pc, #88]	; (27d1c <ble_phy_set_start_time+0xa8>)
   27cc2:	2201      	movs	r2, #1
   27cc4:	60da      	str	r2, [r3, #12]
    NRF_TIMER0->CC[0] = rem_usecs;
   27cc6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   27cca:	2000      	movs	r0, #0
   27ccc:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

    /* Set RTC compare to start TIMER0 */
    NRF_RTC0->EVENTS_COMPARE[0] = 0;
   27cd0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
   27cd4:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
    NRF_RTC0->CC[0] = next_cc;
   27cd8:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
    NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
   27cdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   27ce0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

    /* Enable PPI */
    NRF_PPI->CHENSET = PPI_CHEN_CH31_Msk;
   27ce4:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   27ce8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   27cec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

    /* Store the cputime at which we set the RTC */
    g_ble_phy_data.phy_start_cputime = cputime;
   27cf0:	4b07      	ldr	r3, [pc, #28]	; (27d10 <ble_phy_set_start_time+0x9c>)
   27cf2:	631c      	str	r4, [r3, #48]	; 0x30

    return 0;
}
   27cf4:	bc30      	pop	{r4, r5}
   27cf6:	4770      	bx	lr
        rem_usecs -= BLE_PHY_T_RXENFAST;
   27cf8:	3115      	adds	r1, #21
   27cfa:	b2c9      	uxtb	r1, r1
   27cfc:	e7c6      	b.n	27c8c <ble_phy_set_start_time+0x18>
        return -1;
   27cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27d02:	e7f7      	b.n	27cf4 <ble_phy_set_start_time+0x80>
        return -1;
   27d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27d08:	e7f4      	b.n	27cf4 <ble_phy_set_start_time+0x80>
   27d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27d0e:	e7f1      	b.n	27cf4 <ble_phy_set_start_time+0x80>
   27d10:	20004358 	.word	0x20004358
   27d14:	0002c9d4 	.word	0x0002c9d4
   27d18:	4000b000 	.word	0x4000b000
   27d1c:	40008000 	.word	0x40008000

00027d20 <ble_phy_get_ccm_datarate>:
    assert(0);
    return 0;
#else
    return CCM_MODE_DATARATE_1Mbit << CCM_MODE_DATARATE_Pos;
#endif
}
   27d20:	2000      	movs	r0, #0
   27d22:	4770      	bx	lr

00027d24 <ble_phy_rx_xcvr_setup>:
/**
 * Setup transceiver for receive.
 */
static void
ble_phy_rx_xcvr_setup(void)
{
   27d24:	b510      	push	{r4, lr}

    dptr = (uint8_t *)&g_ble_phy_rx_buf[0];
    dptr += 3;

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (g_ble_phy_data.phy_encrypted) {
   27d26:	4b35      	ldr	r3, [pc, #212]	; (27dfc <ble_phy_rx_xcvr_setup+0xd8>)
   27d28:	79db      	ldrb	r3, [r3, #7]
   27d2a:	b383      	cbz	r3, 27d8e <ble_phy_rx_xcvr_setup+0x6a>
        NRF_RADIO->PACKETPTR = (uint32_t)&g_ble_phy_enc_buf[0];
   27d2c:	4b34      	ldr	r3, [pc, #208]	; (27e00 <ble_phy_rx_xcvr_setup+0xdc>)
   27d2e:	4a35      	ldr	r2, [pc, #212]	; (27e04 <ble_phy_rx_xcvr_setup+0xe0>)
   27d30:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
        NRF_CCM->INPTR = (uint32_t)&g_ble_phy_enc_buf[0];
   27d34:	4c34      	ldr	r4, [pc, #208]	; (27e08 <ble_phy_rx_xcvr_setup+0xe4>)
   27d36:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
        NRF_CCM->OUTPTR = (uint32_t)dptr;
   27d3a:	4b34      	ldr	r3, [pc, #208]	; (27e0c <ble_phy_rx_xcvr_setup+0xe8>)
   27d3c:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        NRF_CCM->SCRATCHPTR = (uint32_t)&g_nrf_encrypt_scratchpad[0];
   27d40:	4b33      	ldr	r3, [pc, #204]	; (27e10 <ble_phy_rx_xcvr_setup+0xec>)
   27d42:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | CCM_MODE_MODE_Decryption |
                                                    ble_phy_get_ccm_datarate();
   27d46:	f7ff ffeb 	bl	27d20 <ble_phy_get_ccm_datarate>
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | CCM_MODE_MODE_Decryption |
   27d4a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   27d4e:	f040 0001 	orr.w	r0, r0, #1
   27d52:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
        NRF_CCM->CNFPTR = (uint32_t)&g_nrf_ccm_data;
   27d56:	4b2f      	ldr	r3, [pc, #188]	; (27e14 <ble_phy_rx_xcvr_setup+0xf0>)
   27d58:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
        NRF_CCM->SHORTS = 0;
   27d5c:	2300      	movs	r3, #0
   27d5e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        NRF_CCM->EVENTS_ERROR = 0;
   27d62:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        NRF_CCM->EVENTS_ENDCRYPT = 0;
   27d66:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        NRF_CCM->TASKS_KSGEN = 1;
   27d6a:	2301      	movs	r3, #1
   27d6c:	6023      	str	r3, [r4, #0]
        NRF_PPI->CHENSET = PPI_CHEN_CH25_Msk;
   27d6e:	4b2a      	ldr	r3, [pc, #168]	; (27e18 <ble_phy_rx_xcvr_setup+0xf4>)
   27d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   27d74:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#else
    NRF_RADIO->PACKETPTR = (uint32_t)dptr;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    if (g_ble_phy_data.phy_privacy) {
   27d78:	4b20      	ldr	r3, [pc, #128]	; (27dfc <ble_phy_rx_xcvr_setup+0xd8>)
   27d7a:	7a1b      	ldrb	r3, [r3, #8]
   27d7c:	b963      	cbnz	r3, 27d98 <ble_phy_rx_xcvr_setup+0x74>
        NRF_AAR->SCRATCHPTR = (uint32_t)&g_ble_phy_data.phy_aar_scratch;
        NRF_AAR->EVENTS_END = 0;
        NRF_AAR->EVENTS_RESOLVED = 0;
        NRF_AAR->EVENTS_NOTRESOLVED = 0;
    } else {
        if (g_ble_phy_data.phy_encrypted == 0) {
   27d7e:	4b1f      	ldr	r3, [pc, #124]	; (27dfc <ble_phy_rx_xcvr_setup+0xd8>)
   27d80:	79db      	ldrb	r3, [r3, #7]
   27d82:	b9d3      	cbnz	r3, 27dba <ble_phy_rx_xcvr_setup+0x96>
            NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Disabled;
   27d84:	4b20      	ldr	r3, [pc, #128]	; (27e08 <ble_phy_rx_xcvr_setup+0xe4>)
   27d86:	2200      	movs	r2, #0
   27d88:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   27d8c:	e015      	b.n	27dba <ble_phy_rx_xcvr_setup+0x96>
        NRF_RADIO->PACKETPTR = (uint32_t)dptr;
   27d8e:	4a1f      	ldr	r2, [pc, #124]	; (27e0c <ble_phy_rx_xcvr_setup+0xe8>)
   27d90:	4b1c      	ldr	r3, [pc, #112]	; (27e04 <ble_phy_rx_xcvr_setup+0xe0>)
   27d92:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   27d96:	e7ef      	b.n	27d78 <ble_phy_rx_xcvr_setup+0x54>
        NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Enabled;
   27d98:	4b1b      	ldr	r3, [pc, #108]	; (27e08 <ble_phy_rx_xcvr_setup+0xe4>)
   27d9a:	2203      	movs	r2, #3
   27d9c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   27da0:	4a1e      	ldr	r2, [pc, #120]	; (27e1c <ble_phy_rx_xcvr_setup+0xf8>)
   27da2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        NRF_AAR->SCRATCHPTR = (uint32_t)&g_ble_phy_data.phy_aar_scratch;
   27da6:	4a1e      	ldr	r2, [pc, #120]	; (27e20 <ble_phy_rx_xcvr_setup+0xfc>)
   27da8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
        NRF_AAR->EVENTS_END = 0;
   27dac:	2200      	movs	r2, #0
   27dae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        NRF_AAR->EVENTS_RESOLVED = 0;
   27db2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        NRF_AAR->EVENTS_NOTRESOLVED = 0;
   27db6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        }
    }
#endif

    /* Turn off trigger TXEN on output compare match and AAR on bcmatch */
    NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk | PPI_CHEN_CH23_Msk;
   27dba:	4b17      	ldr	r3, [pc, #92]	; (27e18 <ble_phy_rx_xcvr_setup+0xf4>)
   27dbc:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
   27dc0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    /* Reset the rx started flag. Used for the wait for response */
    g_ble_phy_data.phy_rx_started = 0;
   27dc4:	4b0d      	ldr	r3, [pc, #52]	; (27dfc <ble_phy_rx_xcvr_setup+0xd8>)
   27dc6:	2200      	movs	r2, #0
   27dc8:	719a      	strb	r2, [r3, #6]
    g_ble_phy_data.phy_state = BLE_PHY_STATE_RX;
   27dca:	2101      	movs	r1, #1
   27dcc:	70d9      	strb	r1, [r3, #3]
        g_ble_phy_data.phy_bcc_offset = 5;
    } else {
        g_ble_phy_data.phy_bcc_offset = 0;
    }
#else
    g_ble_phy_data.phy_bcc_offset = 0;
   27dce:	731a      	strb	r2, [r3, #12]
#endif

    /* I want to know when 1st byte received (after address) */
    NRF_RADIO->BCC = 8 + g_ble_phy_data.phy_bcc_offset; /* in bits */
   27dd0:	4b0c      	ldr	r3, [pc, #48]	; (27e04 <ble_phy_rx_xcvr_setup+0xe0>)
   27dd2:	2108      	movs	r1, #8
   27dd4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
    NRF_RADIO->EVENTS_ADDRESS = 0;
   27dd8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_RADIO->EVENTS_DEVMATCH = 0;
   27ddc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    NRF_RADIO->EVENTS_BCMATCH = 0;
   27de0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    NRF_RADIO->EVENTS_RSSIEND = 0;
   27de4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    NRF_RADIO->EVENTS_CRCOK = 0;
   27de8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    NRF_RADIO->SHORTS = RADIO_SHORTS_END_DISABLE_Msk |
   27dec:	f240 1253 	movw	r2, #339	; 0x153
   27df0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                        RADIO_SHORTS_READY_START_Msk |
                        RADIO_SHORTS_ADDRESS_BCSTART_Msk |
                        RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
                        RADIO_SHORTS_DISABLED_RSSISTOP_Msk;

    NRF_RADIO->INTENSET = RADIO_INTENSET_ADDRESS_Msk;
   27df4:	2202      	movs	r2, #2
   27df6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   27dfa:	bd10      	pop	{r4, pc}
   27dfc:	20004358 	.word	0x20004358
   27e00:	200037ac 	.word	0x200037ac
   27e04:	40001000 	.word	0x40001000
   27e08:	4000f000 	.word	0x4000f000
   27e0c:	200038b3 	.word	0x200038b3
   27e10:	2000438c 	.word	0x2000438c
   27e14:	20004498 	.word	0x20004498
   27e18:	4001f000 	.word	0x4001f000
   27e1c:	20004314 	.word	0x20004314
   27e20:	20004368 	.word	0x20004368

00027e24 <ble_phy_set_start_now>:
{
   27e24:	b538      	push	{r3, r4, r5, lr}
    OS_ENTER_CRITICAL(sr);
   27e26:	f7e8 fb0f 	bl	10448 <os_arch_save_sr>
   27e2a:	4605      	mov	r5, r0
    NRF_TIMER0->TASKS_CLEAR = 1;
   27e2c:	4b10      	ldr	r3, [pc, #64]	; (27e70 <ble_phy_set_start_now+0x4c>)
   27e2e:	2201      	movs	r2, #1
   27e30:	60da      	str	r2, [r3, #12]
    NRF_TIMER0->CC[0] = 1;
   27e32:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   27e36:	2400      	movs	r4, #0
   27e38:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
    now = os_cputime_get32();
   27e3c:	f7e8 fe1c 	bl	10a78 <os_cputime_get32>
    NRF_RTC0->EVENTS_COMPARE[0] = 0;
   27e40:	4b0c      	ldr	r3, [pc, #48]	; (27e74 <ble_phy_set_start_now+0x50>)
   27e42:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
    NRF_RTC0->CC[0] = now + 3;
   27e46:	3003      	adds	r0, #3
   27e48:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
   27e4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   27e50:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    NRF_PPI->CHENSET = PPI_CHEN_CH31_Msk;
   27e54:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   27e58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   27e5c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    g_ble_phy_data.phy_start_cputime = now + 3;
   27e60:	4b05      	ldr	r3, [pc, #20]	; (27e78 <ble_phy_set_start_now+0x54>)
   27e62:	6318      	str	r0, [r3, #48]	; 0x30
    OS_EXIT_CRITICAL(sr);
   27e64:	4628      	mov	r0, r5
   27e66:	f7e8 faf5 	bl	10454 <os_arch_restore_sr>
}
   27e6a:	4620      	mov	r0, r4
   27e6c:	bd38      	pop	{r3, r4, r5, pc}
   27e6e:	bf00      	nop
   27e70:	40008000 	.word	0x40008000
   27e74:	4000b000 	.word	0x4000b000
   27e78:	20004358 	.word	0x20004358

00027e7c <ble_phy_get_cur_phy>:
}
   27e7c:	2001      	movs	r0, #1
   27e7e:	4770      	bx	lr

00027e80 <ble_phy_rxpdu_copy>:
{
   27e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(((uint32_t)dptr & 3) == 0);
   27e82:	f010 0f03 	tst.w	r0, #3
   27e86:	d10b      	bne.n	27ea0 <ble_phy_rxpdu_copy+0x20>
   27e88:	460e      	mov	r6, r1
    block_len = rxpdu->om_omp->omp_databuf_len;
   27e8a:	688b      	ldr	r3, [r1, #8]
   27e8c:	f8b3 c000 	ldrh.w	ip, [r3]
    rem_len = OS_MBUF_PKTHDR(rxpdu)->omp_len;
   27e90:	8a0f      	ldrh	r7, [r1, #16]
    copy_len = block_len - rxpdu->om_pkthdr_len - 4;
   27e92:	794b      	ldrb	r3, [r1, #5]
   27e94:	ebac 0303 	sub.w	r3, ip, r3
   27e98:	3b04      	subs	r3, #4
    dst = om->om_data;
   27e9a:	6809      	ldr	r1, [r1, #0]
    om = rxpdu;
   27e9c:	4635      	mov	r5, r6
    while (om) {
   27e9e:	e007      	b.n	27eb0 <ble_phy_rxpdu_copy+0x30>
    assert(((uint32_t)dptr & 3) == 0);
   27ea0:	2300      	movs	r3, #0
   27ea2:	461a      	mov	r2, r3
   27ea4:	4619      	mov	r1, r3
   27ea6:	4618      	mov	r0, r3
   27ea8:	f7e8 fb98 	bl	105dc <__assert_func>
        om = SLIST_NEXT(om, om_next);
   27eac:	68ed      	ldr	r5, [r5, #12]
        copy_len = block_len;
   27eae:	4663      	mov	r3, ip
    while (om) {
   27eb0:	b1b5      	cbz	r5, 27ee0 <ble_phy_rxpdu_copy+0x60>
        copy_len = min(copy_len, rem_len);
   27eb2:	463a      	mov	r2, r7
   27eb4:	429f      	cmp	r7, r3
   27eb6:	bf28      	it	cs
   27eb8:	461a      	movcs	r2, r3
        copy_len &= ~3;
   27eba:	f022 0203 	bic.w	r2, r2, #3
        dst = om->om_data;
   27ebe:	6829      	ldr	r1, [r5, #0]
        om->om_len = copy_len;
   27ec0:	80ea      	strh	r2, [r5, #6]
        rem_len -= copy_len;
   27ec2:	1abf      	subs	r7, r7, r2
        block_rem_len -= copy_len;
   27ec4:	eba3 0e02 	sub.w	lr, r3, r2
        __asm__ volatile (".syntax unified              \n"
   27ec8:	4614      	mov	r4, r2
   27eca:	e001      	b.n	27ed0 <ble_phy_rxpdu_copy+0x50>
   27ecc:	5883      	ldr	r3, [r0, r2]
   27ece:	508b      	str	r3, [r1, r2]
   27ed0:	3a04      	subs	r2, #4
   27ed2:	d5fb      	bpl.n	27ecc <ble_phy_rxpdu_copy+0x4c>
   27ed4:	1900      	adds	r0, r0, r4
   27ed6:	1909      	adds	r1, r1, r4
        if ((rem_len < 4) && (block_rem_len >= rem_len)) {
   27ed8:	2f03      	cmp	r7, #3
   27eda:	d8e7      	bhi.n	27eac <ble_phy_rxpdu_copy+0x2c>
   27edc:	4577      	cmp	r7, lr
   27ede:	d8e5      	bhi.n	27eac <ble_phy_rxpdu_copy+0x2c>
    om->om_len += rem_len;
   27ee0:	88eb      	ldrh	r3, [r5, #6]
   27ee2:	443b      	add	r3, r7
   27ee4:	80eb      	strh	r3, [r5, #6]
    __asm__ volatile (".syntax unified              \n"
   27ee6:	e001      	b.n	27eec <ble_phy_rxpdu_copy+0x6c>
   27ee8:	5dc3      	ldrb	r3, [r0, r7]
   27eea:	55cb      	strb	r3, [r1, r7]
   27eec:	3f01      	subs	r7, #1
   27eee:	d5fb      	bpl.n	27ee8 <ble_phy_rxpdu_copy+0x68>
    memcpy(BLE_MBUF_HDR_PTR(rxpdu), &g_ble_phy_data.rxhdr,
   27ef0:	4c03      	ldr	r4, [pc, #12]	; (27f00 <ble_phy_rxpdu_copy+0x80>)
   27ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   27ef4:	61b0      	str	r0, [r6, #24]
   27ef6:	61f1      	str	r1, [r6, #28]
   27ef8:	6232      	str	r2, [r6, #32]
   27efa:	6273      	str	r3, [r6, #36]	; 0x24
}
   27efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27efe:	bf00      	nop
   27f00:	20004370 	.word	0x20004370

00027f04 <ble_phy_wfr_enable>:
{
   27f04:	b410      	push	{r4}
    phy = g_ble_phy_data.phy_cur_phy_mode;
   27f06:	4b1c      	ldr	r3, [pc, #112]	; (27f78 <ble_phy_wfr_enable+0x74>)
   27f08:	7adc      	ldrb	r4, [r3, #11]
    if (txrx == BLE_PHY_WFR_ENABLE_TXRX) {
   27f0a:	2801      	cmp	r0, #1
   27f0c:	d02a      	beq.n	27f64 <ble_phy_wfr_enable+0x60>
        end_time = NRF_TIMER0->CC[0] + BLE_PHY_T_RXENFAST + wfr_usecs;
   27f0e:	4b1b      	ldr	r3, [pc, #108]	; (27f7c <ble_phy_wfr_enable+0x78>)
   27f10:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
   27f14:	441a      	add	r2, r3
   27f16:	3228      	adds	r2, #40	; 0x28
    end_time += ble_phy_mode_pdu_start_off(phy);
   27f18:	3228      	adds	r2, #40	; 0x28
    end_time += g_ble_phy_t_rxaddrdelay[phy];
   27f1a:	4b19      	ldr	r3, [pc, #100]	; (27f80 <ble_phy_wfr_enable+0x7c>)
   27f1c:	5d1b      	ldrb	r3, [r3, r4]
   27f1e:	441a      	add	r2, r3
    NRF_TIMER0->CC[3] = end_time;
   27f20:	4b16      	ldr	r3, [pc, #88]	; (27f7c <ble_phy_wfr_enable+0x78>)
   27f22:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    NRF_TIMER0->EVENTS_COMPARE[3] = 0;
   27f26:	2200      	movs	r2, #0
   27f28:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
   27f2c:	4a15      	ldr	r2, [pc, #84]	; (27f84 <ble_phy_wfr_enable+0x80>)
   27f2e:	2130      	movs	r1, #48	; 0x30
   27f30:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
   27f34:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   27f38:	2110      	movs	r1, #16
   27f3a:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    NRF_TIMER0->TASKS_CAPTURE[1] = 1;
   27f3e:	2201      	movs	r2, #1
   27f40:	645a      	str	r2, [r3, #68]	; 0x44
    if (NRF_TIMER0->CC[1] > NRF_TIMER0->CC[3]) {
   27f42:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
   27f46:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
   27f4a:	429a      	cmp	r2, r3
   27f4c:	d907      	bls.n	27f5e <ble_phy_wfr_enable+0x5a>
        NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk;
   27f4e:	4b0d      	ldr	r3, [pc, #52]	; (27f84 <ble_phy_wfr_enable+0x80>)
   27f50:	2230      	movs	r2, #48	; 0x30
   27f52:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        NRF_RADIO->TASKS_DISABLE = 1;
   27f56:	f5a3 33f0 	sub.w	r3, r3, #122880	; 0x1e000
   27f5a:	2201      	movs	r2, #1
   27f5c:	611a      	str	r2, [r3, #16]
}
   27f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
   27f62:	4770      	bx	lr
        end_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   27f64:	4b05      	ldr	r3, [pc, #20]	; (27f7c <ble_phy_wfr_enable+0x78>)
   27f66:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
   27f6a:	3396      	adds	r3, #150	; 0x96
        end_time += g_ble_phy_t_txenddelay[tx_phy_mode];
   27f6c:	4a06      	ldr	r2, [pc, #24]	; (27f88 <ble_phy_wfr_enable+0x84>)
   27f6e:	5c52      	ldrb	r2, [r2, r1]
   27f70:	441a      	add	r2, r3
        end_time += 1;
   27f72:	3203      	adds	r2, #3
   27f74:	e7d0      	b.n	27f18 <ble_phy_wfr_enable+0x14>
   27f76:	bf00      	nop
   27f78:	20004358 	.word	0x20004358
   27f7c:	40008000 	.word	0x40008000
   27f80:	0002c9cc 	.word	0x0002c9cc
   27f84:	4001f000 	.word	0x4001f000
   27f88:	0002c9d8 	.word	0x0002c9d8

00027f8c <ble_phy_tx_end_isr>:
 * Called from interrupt context when the transmit ends
 *
 */
static void
ble_phy_tx_end_isr(void)
{
   27f8c:	b510      	push	{r4, lr}
    uint8_t transition;
    uint32_t rx_time;
    uint32_t wfr_time;

    /* Store PHY on which we've just transmitted smth */
    tx_phy_mode = g_ble_phy_data.phy_cur_phy_mode;
   27f8e:	4b2a      	ldr	r3, [pc, #168]	; (28038 <ble_phy_tx_end_isr+0xac>)
   27f90:	7adc      	ldrb	r4, [r3, #11]

    /* If this transmission was encrypted we need to remember it */
    was_encrypted = g_ble_phy_data.phy_encrypted;
   27f92:	79d9      	ldrb	r1, [r3, #7]
    (void)was_encrypted;

    /* Better be in TX state! */
    assert(g_ble_phy_data.phy_state == BLE_PHY_STATE_TX);
   27f94:	78db      	ldrb	r3, [r3, #3]
   27f96:	2b02      	cmp	r3, #2
   27f98:	d127      	bne.n	27fea <ble_phy_tx_end_isr+0x5e>

    /* Clear events and clear interrupt on disabled event */
    NRF_RADIO->EVENTS_DISABLED = 0;
   27f9a:	4b28      	ldr	r3, [pc, #160]	; (2803c <ble_phy_tx_end_isr+0xb0>)
   27f9c:	2200      	movs	r2, #0
   27f9e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_DISABLED_Msk;
   27fa2:	2010      	movs	r0, #16
   27fa4:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    NRF_RADIO->EVENTS_END = 0;
   27fa8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    wfr_time = NRF_RADIO->SHORTS;
   27fac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    /*
     * XXX: not sure what to do. We had a HW error during transmission.
     * For now I just count a stat but continue on like all is good.
     */
    if (was_encrypted) {
   27fb0:	b131      	cbz	r1, 27fc0 <ble_phy_tx_end_isr+0x34>
        if (NRF_CCM->EVENTS_ERROR) {
   27fb2:	4b23      	ldr	r3, [pc, #140]	; (28040 <ble_phy_tx_end_isr+0xb4>)
   27fb4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   27fb8:	b113      	cbz	r3, 27fc0 <ble_phy_tx_end_isr+0x34>
            STATS_INC(ble_phy_stats, tx_hw_err);
            NRF_CCM->EVENTS_ERROR = 0;
   27fba:	4b21      	ldr	r3, [pc, #132]	; (28040 <ble_phy_tx_end_isr+0xb4>)
   27fbc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        }
    }
#endif

    /* Call transmit end callback */
    if (g_ble_phy_data.txend_cb) {
   27fc0:	4b1d      	ldr	r3, [pc, #116]	; (28038 <ble_phy_tx_end_isr+0xac>)
   27fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27fc4:	b113      	cbz	r3, 27fcc <ble_phy_tx_end_isr+0x40>
        g_ble_phy_data.txend_cb(g_ble_phy_data.txend_arg);
   27fc6:	4a1c      	ldr	r2, [pc, #112]	; (28038 <ble_phy_tx_end_isr+0xac>)
   27fc8:	6a90      	ldr	r0, [r2, #40]	; 0x28
   27fca:	4798      	blx	r3
    }

    transition = g_ble_phy_data.phy_transition;
   27fcc:	4b1a      	ldr	r3, [pc, #104]	; (28038 <ble_phy_tx_end_isr+0xac>)
   27fce:	791b      	ldrb	r3, [r3, #4]
    if (transition == BLE_PHY_TRANSITION_TX_RX) {
   27fd0:	2b02      	cmp	r3, #2
   27fd2:	d010      	beq.n	27ff6 <ble_phy_tx_end_isr+0x6a>
    } else {
        /*
         * XXX: not sure we need to stop the timer here all the time. Or that
         * it should be stopped here.
         */
        NRF_TIMER0->TASKS_STOP = 1;
   27fd4:	4a1b      	ldr	r2, [pc, #108]	; (28044 <ble_phy_tx_end_isr+0xb8>)
   27fd6:	2101      	movs	r1, #1
   27fd8:	6051      	str	r1, [r2, #4]
        NRF_TIMER0->TASKS_SHUTDOWN = 1;
   27fda:	6111      	str	r1, [r2, #16]
        NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk |
   27fdc:	f502 32b8 	add.w	r2, r2, #94208	; 0x17000
   27fe0:	4919      	ldr	r1, [pc, #100]	; (28048 <ble_phy_tx_end_isr+0xbc>)
   27fe2:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
                           PPI_CHEN_CH20_Msk | PPI_CHEN_CH31_Msk;
        assert(transition == BLE_PHY_TRANSITION_NONE);
   27fe6:	bb03      	cbnz	r3, 2802a <ble_phy_tx_end_isr+0x9e>
    }
}
   27fe8:	bd10      	pop	{r4, pc}
    assert(g_ble_phy_data.phy_state == BLE_PHY_STATE_TX);
   27fea:	2300      	movs	r3, #0
   27fec:	461a      	mov	r2, r3
   27fee:	4619      	mov	r1, r3
   27ff0:	4618      	mov	r0, r3
   27ff2:	f7e8 faf3 	bl	105dc <__assert_func>
        ble_phy_rx_xcvr_setup();
   27ff6:	f7ff fe95 	bl	27d24 <ble_phy_rx_xcvr_setup>
        ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_TXRX, tx_phy_mode, 0);
   27ffa:	2200      	movs	r2, #0
   27ffc:	4621      	mov	r1, r4
   27ffe:	2001      	movs	r0, #1
   28000:	f7ff ff80 	bl	27f04 <ble_phy_wfr_enable>
        rx_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   28004:	4a0f      	ldr	r2, [pc, #60]	; (28044 <ble_phy_tx_end_isr+0xb8>)
   28006:	f8d2 1548 	ldr.w	r1, [r2, #1352]	; 0x548
   2800a:	3196      	adds	r1, #150	; 0x96
        rx_time += g_ble_phy_t_txenddelay[tx_phy_mode];
   2800c:	4b0f      	ldr	r3, [pc, #60]	; (2804c <ble_phy_tx_end_isr+0xc0>)
   2800e:	5d1b      	ldrb	r3, [r3, r4]
   28010:	440b      	add	r3, r1
        rx_time -= 2;
   28012:	3b2a      	subs	r3, #42	; 0x2a
        NRF_TIMER0->CC[0] = rx_time;
   28014:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
        NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   28018:	2300      	movs	r3, #0
   2801a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   2801e:	4b0c      	ldr	r3, [pc, #48]	; (28050 <ble_phy_tx_end_isr+0xc4>)
   28020:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   28024:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   28028:	e7de      	b.n	27fe8 <ble_phy_tx_end_isr+0x5c>
        assert(transition == BLE_PHY_TRANSITION_NONE);
   2802a:	2300      	movs	r3, #0
   2802c:	461a      	mov	r2, r3
   2802e:	4619      	mov	r1, r3
   28030:	4618      	mov	r0, r3
   28032:	f7e8 fad3 	bl	105dc <__assert_func>
   28036:	bf00      	nop
   28038:	20004358 	.word	0x20004358
   2803c:	40001000 	.word	0x40001000
   28040:	4000f000 	.word	0x4000f000
   28044:	40008000 	.word	0x40008000
   28048:	80100030 	.word	0x80100030
   2804c:	0002c9d8 	.word	0x0002c9d8
   28050:	4001f000 	.word	0x4001f000

00028054 <ble_phy_init>:
 *
 * @return int 0: success; PHY error code otherwise
 */
int
ble_phy_init(void)
{
   28054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int rc;

    /* Default phy to use is 1M */
    g_ble_phy_data.phy_cur_phy_mode = BLE_PHY_MODE_1M;
   28058:	4f3f      	ldr	r7, [pc, #252]	; (28158 <ble_phy_init+0x104>)
   2805a:	2601      	movs	r6, #1
   2805c:	72fe      	strb	r6, [r7, #11]
    g_ble_phy_data.phy_txtorx_phy_mode = BLE_PHY_MODE_1M;
   2805e:	72be      	strb	r6, [r7, #10]

    g_ble_phy_data.rx_pwr_compensation = 0;
   28060:	2400      	movs	r4, #0
   28062:	737c      	strb	r4, [r7, #13]
     * and it will only degrade performance. Might want to wait here though.
     */
#endif

    /* Set phy channel to an invalid channel so first set channel works */
    g_ble_phy_data.phy_chan = BLE_PHY_NUM_CHANS;
   28064:	2328      	movs	r3, #40	; 0x28
   28066:	70bb      	strb	r3, [r7, #2]

    /* Toggle peripheral power to reset (just in case) */
    NRF_RADIO->POWER = 0;
   28068:	4b3c      	ldr	r3, [pc, #240]	; (2815c <ble_phy_init+0x108>)
   2806a:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
    NRF_RADIO->POWER = 1;
   2806e:	f8c3 6ffc 	str.w	r6, [r3, #4092]	; 0xffc

    /* Disable all interrupts */
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   28072:	f243 42ff 	movw	r2, #13567	; 0x34ff
   28076:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308

    /* Set configuration registers */
    NRF_RADIO->MODE = RADIO_MODE_MODE_Ble_1Mbit;
   2807a:	f04f 0903 	mov.w	r9, #3
   2807e:	f8c3 9510 	str.w	r9, [r3, #1296]	; 0x510
    NRF_RADIO->PCNF0 = NRF_PCNF0;
   28082:	4a37      	ldr	r2, [pc, #220]	; (28160 <ble_phy_init+0x10c>)
   28084:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    /* XXX: should maxlen be 251 for encryption? */
    NRF_RADIO->PCNF1 = NRF_MAXLEN |
   28088:	4a36      	ldr	r2, [pc, #216]	; (28164 <ble_phy_init+0x110>)
   2808a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                       (RADIO_PCNF1_ENDIAN_Little <<  RADIO_PCNF1_ENDIAN_Pos) |
                       (NRF_BALEN << RADIO_PCNF1_BALEN_Pos) |
                       RADIO_PCNF1_WHITEEN_Msk;

    /* Enable radio fast ramp-up */
    NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast << RADIO_MODECNF0_RU_Pos) &
   2808e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   28092:	4332      	orrs	r2, r6
   28094:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
                            RADIO_MODECNF0_RU_Msk;

    /* Set logical address 1 for TX and RX */
    NRF_RADIO->TXADDRESS  = 0;
   28098:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    NRF_RADIO->RXADDRESSES  = (1 << 0);
   2809c:	f8c3 6530 	str.w	r6, [r3, #1328]	; 0x530

    /* Configure the CRC registers */
    NRF_RADIO->CRCCNF = (RADIO_CRCCNF_SKIPADDR_Skip << RADIO_CRCCNF_SKIPADDR_Pos) | RADIO_CRCCNF_LEN_Three;
   280a0:	f240 1203 	movw	r2, #259	; 0x103
   280a4:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534

    /* Configure BLE poly */
    NRF_RADIO->CRCPOLY = 0x0000065B;
   280a8:	f240 625b 	movw	r2, #1627	; 0x65b
   280ac:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538

    /* Configure IFS */
    NRF_RADIO->TIFS = BLE_LL_IFS;
   280b0:	2296      	movs	r2, #150	; 0x96
   280b2:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544

    /* Captures tx/rx start in timer0 cc 1 and tx/rx end in timer0 cc 2 */
    NRF_PPI->CHENSET = PPI_CHEN_CH26_Msk | PPI_CHEN_CH27_Msk;
   280b6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 28184 <ble_phy_init+0x130>
   280ba:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
   280be:	f8c8 3504 	str.w	r3, [r8, #1284]	; 0x504

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    NRF_CCM->INTENCLR = 0xffffffff;
   280c2:	4d29      	ldr	r5, [pc, #164]	; (28168 <ble_phy_init+0x114>)
   280c4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   280c8:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   280cc:	f8c5 6200 	str.w	r6, [r5, #512]	; 0x200
    NRF_CCM->EVENTS_ERROR = 0;
   280d0:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    memset(g_nrf_encrypt_scratchpad, 0, sizeof(g_nrf_encrypt_scratchpad));
   280d4:	f44f 7286 	mov.w	r2, #268	; 0x10c
   280d8:	4621      	mov	r1, r4
   280da:	4824      	ldr	r0, [pc, #144]	; (2816c <ble_phy_init+0x118>)
   280dc:	f7ea fa1b 	bl	12516 <memset>
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    g_ble_phy_data.phy_aar_scratch = 0;
   280e0:	613c      	str	r4, [r7, #16]
    NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   280e2:	4b23      	ldr	r3, [pc, #140]	; (28170 <ble_phy_init+0x11c>)
   280e4:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    NRF_AAR->INTENCLR = 0xffffffff;
   280e8:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    NRF_AAR->EVENTS_END = 0;
   280ec:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    NRF_AAR->EVENTS_RESOLVED = 0;
   280f0:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    NRF_AAR->EVENTS_NOTRESOLVED = 0;
   280f4:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    NRF_AAR->NIRK = 0;
   280f8:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
#endif

    /* TIMER0 setup for PHY when using RTC */
    NRF_TIMER0->TASKS_STOP = 1;
   280fc:	4b1d      	ldr	r3, [pc, #116]	; (28174 <ble_phy_init+0x120>)
   280fe:	605e      	str	r6, [r3, #4]
    NRF_TIMER0->TASKS_SHUTDOWN = 1;
   28100:	611e      	str	r6, [r3, #16]
    NRF_TIMER0->BITMODE = 3;    /* 32-bit timer */
   28102:	f8c3 9508 	str.w	r9, [r3, #1288]	; 0x508
    NRF_TIMER0->MODE = 0;       /* Timer mode */
   28106:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    NRF_TIMER0->PRESCALER = 4;  /* gives us 1 MHz */
   2810a:	2204      	movs	r2, #4
   2810c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
     * Channel 4: Captures TIMER0 in CC[3] when EVENTS_ADDRESS occurs. Used
     *            to cancel the wait for response timer.
     * Channel 5: TIMER0 CC[3] to TASKS_DISABLE on radio. This is the wait
     *            for response timer.
     */
    NRF_PPI->CH[4].EEP = (uint32_t)&(NRF_RADIO->EVENTS_ADDRESS);
   28110:	f5a3 43dd 	sub.w	r3, r3, #28288	; 0x6e80
   28114:	3b7c      	subs	r3, #124	; 0x7c
   28116:	f8c8 3530 	str.w	r3, [r8, #1328]	; 0x530
    NRF_PPI->CH[4].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[3]);
   2811a:	f503 43de 	add.w	r3, r3, #28416	; 0x6f00
   2811e:	3348      	adds	r3, #72	; 0x48
   28120:	f8c8 3534 	str.w	r3, [r8, #1332]	; 0x534
    NRF_PPI->CH[5].EEP = (uint32_t)&(NRF_TIMER0->EVENTS_COMPARE[3]);
   28124:	f503 7380 	add.w	r3, r3, #256	; 0x100
   28128:	f8c8 3538 	str.w	r3, [r8, #1336]	; 0x538
    NRF_PPI->CH[5].TEP = (uint32_t)&(NRF_RADIO->TASKS_DISABLE);
   2812c:	f5a3 43e2 	sub.w	r3, r3, #28928	; 0x7100
   28130:	3b3c      	subs	r3, #60	; 0x3c
   28132:	f8c8 353c 	str.w	r3, [r8, #1340]	; 0x53c
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   28136:	4b10      	ldr	r3, [pc, #64]	; (28178 <ble_phy_init+0x124>)
   28138:	f883 4301 	strb.w	r4, [r3, #769]	; 0x301
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2813c:	4a0f      	ldr	r2, [pc, #60]	; (2817c <ble_phy_init+0x128>)
   2813e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   28140:	490f      	ldr	r1, [pc, #60]	; (28180 <ble_phy_init+0x12c>)
   28142:	6451      	str	r1, [r2, #68]	; 0x44
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   28144:	2202      	movs	r2, #2
   28146:	601a      	str	r2, [r3, #0]
    ble_npl_hw_set_isr(RADIO_IRQn, ble_phy_isr);
#endif
    NVIC_EnableIRQ(RADIO_IRQn);

    /* Register phy statistics */
    if (!g_ble_phy_data.phy_stats_initialized) {
   28148:	783b      	ldrb	r3, [r7, #0]
   2814a:	b90b      	cbnz	r3, 28150 <ble_phy_init+0xfc>
                                                      STATS_SIZE_32),
                                STATS_NAME_INIT_PARMS(ble_phy_stats),
                                "ble_phy");
        assert(rc == 0);

        g_ble_phy_data.phy_stats_initialized  = 1;
   2814c:	463b      	mov	r3, r7
   2814e:	701e      	strb	r6, [r3, #0]
    }

    ble_phy_dbg_time_setup();

    return 0;
}
   28150:	2000      	movs	r0, #0
   28152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28156:	bf00      	nop
   28158:	20004358 	.word	0x20004358
   2815c:	40001000 	.word	0x40001000
   28160:	00100108 	.word	0x00100108
   28164:	020300ff 	.word	0x020300ff
   28168:	4000f000 	.word	0x4000f000
   2816c:	2000438c 	.word	0x2000438c
   28170:	20004314 	.word	0x20004314
   28174:	40008000 	.word	0x40008000
   28178:	e000e100 	.word	0xe000e100
   2817c:	e000ed00 	.word	0xe000ed00
   28180:	000285bd 	.word	0x000285bd
   28184:	4001f000 	.word	0x4001f000

00028188 <ble_phy_encrypt_enable>:
 * @param is_master
 */
void
ble_phy_encrypt_enable(uint64_t pkt_counter, uint8_t *iv, uint8_t *key,
                       uint8_t is_master)
{
   28188:	b4f0      	push	{r4, r5, r6, r7}
    memcpy(g_nrf_ccm_data.key, key, 16);
   2818a:	4c10      	ldr	r4, [pc, #64]	; (281cc <ble_phy_encrypt_enable+0x44>)
   2818c:	681f      	ldr	r7, [r3, #0]
   2818e:	685e      	ldr	r6, [r3, #4]
   28190:	689d      	ldr	r5, [r3, #8]
   28192:	68db      	ldr	r3, [r3, #12]
   28194:	6027      	str	r7, [r4, #0]
   28196:	6066      	str	r6, [r4, #4]
   28198:	60a5      	str	r5, [r4, #8]
   2819a:	60e3      	str	r3, [r4, #12]
    g_nrf_ccm_data.pkt_counter = pkt_counter;
   2819c:	6120      	str	r0, [r4, #16]
   2819e:	6161      	str	r1, [r4, #20]
    memcpy(g_nrf_ccm_data.iv, iv, 8);
   281a0:	6811      	ldr	r1, [r2, #0]
   281a2:	6853      	ldr	r3, [r2, #4]
   281a4:	f8c4 1019 	str.w	r1, [r4, #25]
   281a8:	f8c4 301d 	str.w	r3, [r4, #29]
    g_nrf_ccm_data.dir_bit = is_master;
   281ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
   281b0:	7623      	strb	r3, [r4, #24]
    g_ble_phy_data.phy_encrypted = 1;
   281b2:	4b07      	ldr	r3, [pc, #28]	; (281d0 <ble_phy_encrypt_enable+0x48>)
   281b4:	2201      	movs	r2, #1
   281b6:	71da      	strb	r2, [r3, #7]
    /* Enable the module (AAR cannot be on while CCM on) */
    NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Disabled;
   281b8:	4b06      	ldr	r3, [pc, #24]	; (281d4 <ble_phy_encrypt_enable+0x4c>)
   281ba:	2200      	movs	r2, #0
   281bc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   281c0:	2202      	movs	r2, #2
   281c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   281c6:	bcf0      	pop	{r4, r5, r6, r7}
   281c8:	4770      	bx	lr
   281ca:	bf00      	nop
   281cc:	20004498 	.word	0x20004498
   281d0:	20004358 	.word	0x20004358
   281d4:	4000f000 	.word	0x4000f000

000281d8 <ble_phy_encrypt_set_pkt_cntr>:

void
ble_phy_encrypt_set_pkt_cntr(uint64_t pkt_counter, int dir)
{
    g_nrf_ccm_data.pkt_counter = pkt_counter;
   281d8:	4b02      	ldr	r3, [pc, #8]	; (281e4 <ble_phy_encrypt_set_pkt_cntr+0xc>)
   281da:	6118      	str	r0, [r3, #16]
   281dc:	6159      	str	r1, [r3, #20]
    g_nrf_ccm_data.dir_bit = dir;
   281de:	761a      	strb	r2, [r3, #24]
}
   281e0:	4770      	bx	lr
   281e2:	bf00      	nop
   281e4:	20004498 	.word	0x20004498

000281e8 <ble_phy_encrypt_disable>:

void
ble_phy_encrypt_disable(void)
{
    NRF_PPI->CHENCLR = PPI_CHEN_CH25_Msk;
   281e8:	4b07      	ldr	r3, [pc, #28]	; (28208 <ble_phy_encrypt_disable+0x20>)
   281ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   281ee:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_CCM->TASKS_STOP = 1;
   281f2:	4a06      	ldr	r2, [pc, #24]	; (2820c <ble_phy_encrypt_disable+0x24>)
   281f4:	2301      	movs	r3, #1
   281f6:	6093      	str	r3, [r2, #8]
    NRF_CCM->EVENTS_ERROR = 0;
   281f8:	2300      	movs	r3, #0
   281fa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   281fe:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

    g_ble_phy_data.phy_encrypted = 0;
   28202:	4a03      	ldr	r2, [pc, #12]	; (28210 <ble_phy_encrypt_disable+0x28>)
   28204:	71d3      	strb	r3, [r2, #7]
}
   28206:	4770      	bx	lr
   28208:	4001f000 	.word	0x4001f000
   2820c:	4000f000 	.word	0x4000f000
   28210:	20004358 	.word	0x20004358

00028214 <ble_phy_set_txend_cb>:

void
ble_phy_set_txend_cb(ble_phy_tx_end_func txend_cb, void *arg)
{
    /* Set transmit end callback and arg */
    g_ble_phy_data.txend_cb = txend_cb;
   28214:	4b01      	ldr	r3, [pc, #4]	; (2821c <ble_phy_set_txend_cb+0x8>)
   28216:	62d8      	str	r0, [r3, #44]	; 0x2c
    g_ble_phy_data.txend_arg = arg;
   28218:	6299      	str	r1, [r3, #40]	; 0x28
}
   2821a:	4770      	bx	lr
   2821c:	20004358 	.word	0x20004358

00028220 <ble_phy_txpower_round>:
int ble_phy_txpower_round(int dbm)
{
    /* TODO this should be per nRF52XXX */

    /* "Rail" power level if outside supported range */
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm) {
   28220:	2803      	cmp	r0, #3
   28222:	dc14      	bgt.n	2824e <ble_phy_txpower_round+0x2e>
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm;
    }

    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm) {
   28224:	2802      	cmp	r0, #2
   28226:	dc14      	bgt.n	28252 <ble_phy_txpower_round+0x32>
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm;
    }

    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_0dBm) {
   28228:	2800      	cmp	r0, #0
   2822a:	db01      	blt.n	28230 <ble_phy_txpower_round+0x10>
        return (int8_t)RADIO_TXPOWER_TXPOWER_0dBm;
   2822c:	2000      	movs	r0, #0
   2822e:	4770      	bx	lr
    }

    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm) {
   28230:	f110 0f04 	cmn.w	r0, #4
   28234:	da0f      	bge.n	28256 <ble_phy_txpower_round+0x36>
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm;
    }

    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm) {
   28236:	f110 0f08 	cmn.w	r0, #8
   2823a:	da0f      	bge.n	2825c <ble_phy_txpower_round+0x3c>
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm;
    }

    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm) {
   2823c:	f110 0f0c 	cmn.w	r0, #12
   28240:	da0f      	bge.n	28262 <ble_phy_txpower_round+0x42>
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm;
    }

    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg20dBm) {
   28242:	f110 0f14 	cmn.w	r0, #20
   28246:	db0f      	blt.n	28268 <ble_phy_txpower_round+0x48>
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg20dBm;
   28248:	f06f 0013 	mvn.w	r0, #19
   2824c:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm;
   2824e:	2004      	movs	r0, #4
   28250:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm;
   28252:	2003      	movs	r0, #3
   28254:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm;
   28256:	f06f 0003 	mvn.w	r0, #3
   2825a:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm;
   2825c:	f06f 0007 	mvn.w	r0, #7
   28260:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm;
   28262:	f06f 000b 	mvn.w	r0, #11
   28266:	4770      	bx	lr
    }

    return (int8_t)RADIO_TXPOWER_TXPOWER_Neg40dBm;
   28268:	f06f 0027 	mvn.w	r0, #39	; 0x27
}
   2826c:	4770      	bx	lr
	...

00028270 <ble_phy_txpwr_set>:
{
   28270:	b508      	push	{r3, lr}
    dbm = ble_phy_txpower_round(dbm);
   28272:	f7ff ffd5 	bl	28220 <ble_phy_txpower_round>
    NRF_RADIO->TXPOWER = dbm;
   28276:	4b03      	ldr	r3, [pc, #12]	; (28284 <ble_phy_txpwr_set+0x14>)
   28278:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    g_ble_phy_data.phy_txpwr_dbm = dbm;
   2827c:	4b02      	ldr	r3, [pc, #8]	; (28288 <ble_phy_txpwr_set+0x18>)
   2827e:	7058      	strb	r0, [r3, #1]
}
   28280:	2000      	movs	r0, #0
   28282:	bd08      	pop	{r3, pc}
   28284:	40001000 	.word	0x40001000
   28288:	20004358 	.word	0x20004358

0002828c <ble_phy_set_access_addr>:
 *
 * @return int 0: success; PHY error code otherwise
 */
int
ble_phy_set_access_addr(uint32_t access_addr)
{
   2828c:	b508      	push	{r3, lr}
    NRF_RADIO->BASE0 = (access_addr << 8);
   2828e:	0203      	lsls	r3, r0, #8
   28290:	4a08      	ldr	r2, [pc, #32]	; (282b4 <ble_phy_set_access_addr+0x28>)
   28292:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    NRF_RADIO->PREFIX0 = (NRF_RADIO->PREFIX0 & 0xFFFFFF00) | (access_addr >> 24);
   28296:	f8d2 3524 	ldr.w	r3, [r2, #1316]	; 0x524
   2829a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2829e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   282a2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524

    g_ble_phy_data.phy_access_address = access_addr;
   282a6:	4b04      	ldr	r3, [pc, #16]	; (282b8 <ble_phy_set_access_addr+0x2c>)
   282a8:	6158      	str	r0, [r3, #20]

    ble_phy_apply_errata_102_106_107();
   282aa:	f7ff fcc7 	bl	27c3c <ble_phy_apply_errata_102_106_107>

    return 0;
}
   282ae:	2000      	movs	r0, #0
   282b0:	bd08      	pop	{r3, pc}
   282b2:	bf00      	nop
   282b4:	40001000 	.word	0x40001000
   282b8:	20004358 	.word	0x20004358

000282bc <ble_phy_set_rx_pwr_compensation>:
}

void
ble_phy_set_rx_pwr_compensation(int8_t compensation)
{
    g_ble_phy_data.rx_pwr_compensation = compensation;
   282bc:	4b01      	ldr	r3, [pc, #4]	; (282c4 <ble_phy_set_rx_pwr_compensation+0x8>)
   282be:	7358      	strb	r0, [r3, #13]
}
   282c0:	4770      	bx	lr
   282c2:	bf00      	nop
   282c4:	20004358 	.word	0x20004358

000282c8 <ble_phy_setchan>:
 *
 * @return int 0: success; PHY error code otherwise
 */
int
ble_phy_setchan(uint8_t chan, uint32_t access_addr, uint32_t crcinit)
{
   282c8:	b538      	push	{r3, r4, r5, lr}
    assert(chan < BLE_PHY_NUM_CHANS);
   282ca:	2827      	cmp	r0, #39	; 0x27
   282cc:	d811      	bhi.n	282f2 <ble_phy_setchan+0x2a>
   282ce:	4604      	mov	r4, r0
   282d0:	4615      	mov	r5, r2
    if (chan >= BLE_PHY_NUM_CHANS) {
        return BLE_PHY_ERR_INV_PARAM;
    }

    /* Set current access address */
    ble_phy_set_access_addr(access_addr);
   282d2:	4608      	mov	r0, r1
   282d4:	f7ff ffda 	bl	2828c <ble_phy_set_access_addr>

    /* Configure crcinit */
    NRF_RADIO->CRCINIT = crcinit;
   282d8:	4b09      	ldr	r3, [pc, #36]	; (28300 <ble_phy_setchan+0x38>)
   282da:	f8c3 553c 	str.w	r5, [r3, #1340]	; 0x53c

    /* Set the frequency and the data whitening initial value */
    g_ble_phy_data.phy_chan = chan;
   282de:	4a09      	ldr	r2, [pc, #36]	; (28304 <ble_phy_setchan+0x3c>)
   282e0:	7094      	strb	r4, [r2, #2]
    NRF_RADIO->FREQUENCY = g_ble_phy_chan_freq[chan];
   282e2:	4a09      	ldr	r2, [pc, #36]	; (28308 <ble_phy_setchan+0x40>)
   282e4:	5d12      	ldrb	r2, [r2, r4]
   282e6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_RADIO->DATAWHITEIV = chan;
   282ea:	f8c3 4554 	str.w	r4, [r3, #1364]	; 0x554

    return 0;
}
   282ee:	2000      	movs	r0, #0
   282f0:	bd38      	pop	{r3, r4, r5, pc}
    assert(chan < BLE_PHY_NUM_CHANS);
   282f2:	2300      	movs	r3, #0
   282f4:	461a      	mov	r2, r3
   282f6:	4619      	mov	r1, r3
   282f8:	4618      	mov	r0, r3
   282fa:	f7e8 f96f 	bl	105dc <__assert_func>
   282fe:	bf00      	nop
   28300:	40001000 	.word	0x40001000
   28304:	20004358 	.word	0x20004358
   28308:	0002c9a4 	.word	0x0002c9a4

0002830c <ble_phy_stop_usec_timer>:
 * Stop the timer used to count microseconds when using RTC for cputime
 */
void
ble_phy_stop_usec_timer(void)
{
    NRF_TIMER0->TASKS_STOP = 1;
   2830c:	4b05      	ldr	r3, [pc, #20]	; (28324 <ble_phy_stop_usec_timer+0x18>)
   2830e:	2201      	movs	r2, #1
   28310:	605a      	str	r2, [r3, #4]
    NRF_TIMER0->TASKS_SHUTDOWN = 1;
   28312:	611a      	str	r2, [r3, #16]
    NRF_RTC0->EVTENCLR = RTC_EVTENSET_COMPARE0_Msk;
   28314:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
   28318:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2831c:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
}
   28320:	4770      	bx	lr
   28322:	bf00      	nop
   28324:	40008000 	.word	0x40008000

00028328 <ble_phy_disable_irq_and_ppi>:
 * the phy.
 */
void
ble_phy_disable_irq_and_ppi(void)
{
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   28328:	4b0a      	ldr	r3, [pc, #40]	; (28354 <ble_phy_disable_irq_and_ppi+0x2c>)
   2832a:	f243 42ff 	movw	r2, #13567	; 0x34ff
   2832e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->SHORTS = 0;
   28332:	2200      	movs	r2, #0
   28334:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_RADIO->TASKS_DISABLE = 1;
   28338:	2101      	movs	r1, #1
   2833a:	6119      	str	r1, [r3, #16]
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk | PPI_CHEN_CH20_Msk |
   2833c:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   28340:	4905      	ldr	r1, [pc, #20]	; (28358 <ble_phy_disable_irq_and_ppi+0x30>)
   28342:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   28346:	4b05      	ldr	r3, [pc, #20]	; (2835c <ble_phy_disable_irq_and_ppi+0x34>)
   28348:	2102      	movs	r1, #2
   2834a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
          PPI_CHEN_CH21_Msk | PPI_CHEN_CH23_Msk |
          PPI_CHEN_CH25_Msk | PPI_CHEN_CH31_Msk;
    NVIC_ClearPendingIRQ(RADIO_IRQn);
    g_ble_phy_data.phy_state = BLE_PHY_STATE_IDLE;
   2834e:	4b04      	ldr	r3, [pc, #16]	; (28360 <ble_phy_disable_irq_and_ppi+0x38>)
   28350:	70da      	strb	r2, [r3, #3]
}
   28352:	4770      	bx	lr
   28354:	40001000 	.word	0x40001000
   28358:	82b00030 	.word	0x82b00030
   2835c:	e000e100 	.word	0xe000e100
   28360:	20004358 	.word	0x20004358

00028364 <ble_phy_disable>:
 * the usec timer (if used), disables interrupts, disables the RADIO, disables
 * PPI and sets state to idle.
 */
void
ble_phy_disable(void)
{
   28364:	b508      	push	{r3, lr}
    ble_phy_trace_void(BLE_PHY_TRACE_ID_DISABLE);

    ble_phy_stop_usec_timer();
   28366:	f7ff ffd1 	bl	2830c <ble_phy_stop_usec_timer>
    ble_phy_disable_irq_and_ppi();
   2836a:	f7ff ffdd 	bl	28328 <ble_phy_disable_irq_and_ppi>
}
   2836e:	bd08      	pop	{r3, pc}

00028370 <ble_phy_rx_start_isr>:
{
   28370:	b538      	push	{r3, r4, r5, lr}
    NRF_RADIO->EVENTS_ADDRESS = 0;
   28372:	4b44      	ldr	r3, [pc, #272]	; (28484 <ble_phy_rx_start_isr+0x114>)
   28374:	2500      	movs	r5, #0
   28376:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_DISABLED_Msk | RADIO_INTENCLR_ADDRESS_Msk;
   2837a:	2212      	movs	r2, #18
   2837c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk;
   28380:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   28384:	2230      	movs	r2, #48	; 0x30
   28386:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    ble_hdr->rxinfo.flags = ble_ll_state_get();
   2838a:	f7f7 f833 	bl	1f3f4 <ble_ll_state_get>
   2838e:	4c3e      	ldr	r4, [pc, #248]	; (28488 <ble_phy_rx_start_isr+0x118>)
   28390:	8320      	strh	r0, [r4, #24]
    ble_hdr->rxinfo.channel = g_ble_phy_data.phy_chan;
   28392:	78a3      	ldrb	r3, [r4, #2]
   28394:	76a3      	strb	r3, [r4, #26]
    ble_hdr->rxinfo.handle = 0;
   28396:	76e5      	strb	r5, [r4, #27]
    ble_hdr->rxinfo.phy = ble_phy_get_cur_phy();
   28398:	f7ff fd70 	bl	27e7c <ble_phy_get_cur_phy>
   2839c:	7760      	strb	r0, [r4, #29]
    phy = g_ble_phy_data.phy_cur_phy_mode;
   2839e:	7ae2      	ldrb	r2, [r4, #11]
    ble_hdr->rxinfo.phy_mode = ble_phy_get_cur_rx_phy_mode();
   283a0:	77a2      	strb	r2, [r4, #30]
    ble_hdr->beg_cputime = g_ble_phy_data.phy_start_cputime;
   283a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   283a4:	6223      	str	r3, [r4, #32]
    usecs = NRF_TIMER0->CC[1];
   283a6:	4939      	ldr	r1, [pc, #228]	; (2848c <ble_phy_rx_start_isr+0x11c>)
   283a8:	f8d1 0544 	ldr.w	r0, [r1, #1348]	; 0x544
                g_ble_phy_t_rxaddrdelay[ble_hdr->rxinfo.phy_mode];
   283ac:	4938      	ldr	r1, [pc, #224]	; (28490 <ble_phy_rx_start_isr+0x120>)
   283ae:	5c8c      	ldrb	r4, [r1, r2]
    pdu_usecs = ble_phy_mode_pdu_start_off(ble_hdr->rxinfo.phy_mode) +
   283b0:	3428      	adds	r4, #40	; 0x28
    if (usecs < pdu_usecs) {
   283b2:	42a0      	cmp	r0, r4
   283b4:	d203      	bcs.n	283be <ble_phy_rx_start_isr+0x4e>
        g_ble_phy_data.phy_start_cputime--;
   283b6:	3b01      	subs	r3, #1
   283b8:	4a33      	ldr	r2, [pc, #204]	; (28488 <ble_phy_rx_start_isr+0x118>)
   283ba:	6313      	str	r3, [r2, #48]	; 0x30
        usecs += 30;
   283bc:	301e      	adds	r0, #30
    usecs -= pdu_usecs;
   283be:	1b04      	subs	r4, r0, r4
    ticks = os_cputime_usecs_to_ticks(usecs);
   283c0:	4620      	mov	r0, r4
   283c2:	f7e8 fb5f 	bl	10a84 <os_cputime_usecs_to_ticks>
   283c6:	4605      	mov	r5, r0
    usecs -= os_cputime_ticks_to_usecs(ticks);
   283c8:	f7e8 fb64 	bl	10a94 <os_cputime_ticks_to_usecs>
   283cc:	1a20      	subs	r0, r4, r0
    if (usecs == 31) {
   283ce:	281f      	cmp	r0, #31
   283d0:	d015      	beq.n	283fe <ble_phy_rx_start_isr+0x8e>
    ble_hdr->beg_cputime += ticks;
   283d2:	4b2d      	ldr	r3, [pc, #180]	; (28488 <ble_phy_rx_start_isr+0x118>)
   283d4:	6a1a      	ldr	r2, [r3, #32]
   283d6:	442a      	add	r2, r5
   283d8:	621a      	str	r2, [r3, #32]
    ble_hdr->rem_usecs = usecs;
   283da:	6258      	str	r0, [r3, #36]	; 0x24
        state = NRF_RADIO->STATE;
   283dc:	4b29      	ldr	r3, [pc, #164]	; (28484 <ble_phy_rx_start_isr+0x114>)
   283de:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
        if (NRF_RADIO->EVENTS_BCMATCH != 0) {
   283e2:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   283e6:	b96b      	cbnz	r3, 28404 <ble_phy_rx_start_isr+0x94>
        if (state == RADIO_STATE_STATE_Disabled) {
   283e8:	2a00      	cmp	r2, #0
   283ea:	d1f7      	bne.n	283dc <ble_phy_rx_start_isr+0x6c>
            NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   283ec:	4b25      	ldr	r3, [pc, #148]	; (28484 <ble_phy_rx_start_isr+0x114>)
   283ee:	f243 42ff 	movw	r2, #13567	; 0x34ff
   283f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            NRF_RADIO->SHORTS = 0;
   283f6:	2000      	movs	r0, #0
   283f8:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
}
   283fc:	bd38      	pop	{r3, r4, r5, pc}
        ++ticks;
   283fe:	3501      	adds	r5, #1
        usecs = 0;
   28400:	2000      	movs	r0, #0
   28402:	e7e6      	b.n	283d2 <ble_phy_rx_start_isr+0x62>
    rc = ble_ll_rx_start(dptr + 3,
   28404:	4b20      	ldr	r3, [pc, #128]	; (28488 <ble_phy_rx_start_isr+0x118>)
   28406:	f103 0218 	add.w	r2, r3, #24
   2840a:	7899      	ldrb	r1, [r3, #2]
   2840c:	4821      	ldr	r0, [pc, #132]	; (28494 <ble_phy_rx_start_isr+0x124>)
   2840e:	f7f6 ff3d 	bl	1f28c <ble_ll_rx_start>
    if (rc >= 0) {
   28412:	2800      	cmp	r0, #0
   28414:	db2f      	blt.n	28476 <ble_phy_rx_start_isr+0x106>
        g_ble_phy_data.phy_rx_started = 1;
   28416:	4b1c      	ldr	r3, [pc, #112]	; (28488 <ble_phy_rx_start_isr+0x118>)
   28418:	2201      	movs	r2, #1
   2841a:	719a      	strb	r2, [r3, #6]
        NRF_RADIO->INTENSET = RADIO_INTENSET_END_Msk;
   2841c:	4a19      	ldr	r2, [pc, #100]	; (28484 <ble_phy_rx_start_isr+0x114>)
   2841e:	2108      	movs	r1, #8
   28420:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
        if (g_ble_phy_data.phy_privacy) {
   28424:	7a1b      	ldrb	r3, [r3, #8]
   28426:	b353      	cbz	r3, 2847e <ble_phy_rx_start_isr+0x10e>
            NRF_RADIO->EVENTS_BCMATCH = 0;
   28428:	4613      	mov	r3, r2
   2842a:	2200      	movs	r2, #0
   2842c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
            NRF_PPI->CHENSET = PPI_CHEN_CH23_Msk;
   28430:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   28434:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   28438:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            if (BLE_MBUF_HDR_EXT_ADV(&g_ble_phy_data.rxhdr)) {
   2843c:	4b12      	ldr	r3, [pc, #72]	; (28488 <ble_phy_rx_start_isr+0x118>)
   2843e:	8b1b      	ldrh	r3, [r3, #24]
   28440:	f413 6f00 	tst.w	r3, #2048	; 0x800
   28444:	d00b      	beq.n	2845e <ble_phy_rx_start_isr+0xee>
                NRF_AAR->ADDRPTR = (uint32_t)(dptr + 5);
   28446:	4a14      	ldr	r2, [pc, #80]	; (28498 <ble_phy_rx_start_isr+0x128>)
   28448:	4b14      	ldr	r3, [pc, #80]	; (2849c <ble_phy_rx_start_isr+0x12c>)
   2844a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
                                 g_ble_phy_data.phy_bcc_offset;
   2844e:	4b0e      	ldr	r3, [pc, #56]	; (28488 <ble_phy_rx_start_isr+0x118>)
   28450:	7b1b      	ldrb	r3, [r3, #12]
                NRF_RADIO->BCC = (BLE_DEV_ADDR_LEN + BLE_LL_PDU_HDR_LEN + 2) * 8 +
   28452:	3350      	adds	r3, #80	; 0x50
   28454:	4a0b      	ldr	r2, [pc, #44]	; (28484 <ble_phy_rx_start_isr+0x114>)
   28456:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
    return true;
   2845a:	2001      	movs	r0, #1
   2845c:	e7ce      	b.n	283fc <ble_phy_rx_start_isr+0x8c>
                NRF_AAR->ADDRPTR = (uint32_t)(dptr + 3);
   2845e:	4a0d      	ldr	r2, [pc, #52]	; (28494 <ble_phy_rx_start_isr+0x124>)
   28460:	4b0e      	ldr	r3, [pc, #56]	; (2849c <ble_phy_rx_start_isr+0x12c>)
   28462:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
                                 g_ble_phy_data.phy_bcc_offset;
   28466:	4b08      	ldr	r3, [pc, #32]	; (28488 <ble_phy_rx_start_isr+0x118>)
   28468:	7b1b      	ldrb	r3, [r3, #12]
                NRF_RADIO->BCC = (BLE_DEV_ADDR_LEN + BLE_LL_PDU_HDR_LEN) * 8 +
   2846a:	3340      	adds	r3, #64	; 0x40
   2846c:	4a05      	ldr	r2, [pc, #20]	; (28484 <ble_phy_rx_start_isr+0x114>)
   2846e:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
    return true;
   28472:	2001      	movs	r0, #1
   28474:	e7c2      	b.n	283fc <ble_phy_rx_start_isr+0x8c>
        ble_phy_disable();
   28476:	f7ff ff75 	bl	28364 <ble_phy_disable>
    return true;
   2847a:	2001      	movs	r0, #1
   2847c:	e7be      	b.n	283fc <ble_phy_rx_start_isr+0x8c>
   2847e:	2001      	movs	r0, #1
   28480:	e7bc      	b.n	283fc <ble_phy_rx_start_isr+0x8c>
   28482:	bf00      	nop
   28484:	40001000 	.word	0x40001000
   28488:	20004358 	.word	0x20004358
   2848c:	40008000 	.word	0x40008000
   28490:	0002c9cc 	.word	0x0002c9cc
   28494:	200038b3 	.word	0x200038b3
   28498:	200038b5 	.word	0x200038b5
   2849c:	4000f000 	.word	0x4000f000

000284a0 <ble_phy_rx_end_isr>:
{
   284a0:	b510      	push	{r4, lr}
    NRF_RADIO->EVENTS_END = 0;
   284a2:	4b3d      	ldr	r3, [pc, #244]	; (28598 <ble_phy_rx_end_isr+0xf8>)
   284a4:	2200      	movs	r2, #0
   284a6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_END_Msk;
   284aa:	2208      	movs	r2, #8
   284ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_PPI->CHENCLR = PPI_CHEN_CH21_Msk;
   284b0:	4a3a      	ldr	r2, [pc, #232]	; (2859c <ble_phy_rx_end_isr+0xfc>)
   284b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   284b6:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    assert(NRF_RADIO->EVENTS_RSSIEND != 0);
   284ba:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   284be:	2b00      	cmp	r3, #0
   284c0:	d061      	beq.n	28586 <ble_phy_rx_end_isr+0xe6>
                           g_ble_phy_data.rx_pwr_compensation;
   284c2:	4937      	ldr	r1, [pc, #220]	; (285a0 <ble_phy_rx_end_isr+0x100>)
   284c4:	7b4b      	ldrb	r3, [r1, #13]
    ble_hdr->rxinfo.rssi = (-1 * NRF_RADIO->RSSISAMPLE) +
   284c6:	4a34      	ldr	r2, [pc, #208]	; (28598 <ble_phy_rx_end_isr+0xf8>)
   284c8:	f8d2 0548 	ldr.w	r0, [r2, #1352]	; 0x548
   284cc:	1a1b      	subs	r3, r3, r0
   284ce:	770b      	strb	r3, [r1, #28]
    crcok = NRF_RADIO->EVENTS_CRCOK;
   284d0:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
    if (!crcok) {
   284d4:	f013 0fff 	tst.w	r3, #255	; 0xff
   284d8:	d021      	beq.n	2851e <ble_phy_rx_end_isr+0x7e>
        ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_CRC_OK;
   284da:	8b0b      	ldrh	r3, [r1, #24]
   284dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   284e0:	830b      	strh	r3, [r1, #24]
        if (g_ble_phy_data.phy_encrypted) {
   284e2:	79ca      	ldrb	r2, [r1, #7]
   284e4:	b1da      	cbz	r2, 2851e <ble_phy_rx_end_isr+0x7e>
            if ((dptr[1] != 0) && (NRF_CCM->MICSTATUS == 0)) {
   284e6:	4a2f      	ldr	r2, [pc, #188]	; (285a4 <ble_phy_rx_end_isr+0x104>)
   284e8:	7912      	ldrb	r2, [r2, #4]
   284ea:	b132      	cbz	r2, 284fa <ble_phy_rx_end_isr+0x5a>
   284ec:	4a2e      	ldr	r2, [pc, #184]	; (285a8 <ble_phy_rx_end_isr+0x108>)
   284ee:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   284f2:	b912      	cbnz	r2, 284fa <ble_phy_rx_end_isr+0x5a>
                ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_MIC_FAILURE;
   284f4:	f043 0320 	orr.w	r3, r3, #32
   284f8:	830b      	strh	r3, [r1, #24]
            if (NRF_CCM->EVENTS_ERROR) {
   284fa:	4b2b      	ldr	r3, [pc, #172]	; (285a8 <ble_phy_rx_end_isr+0x108>)
   284fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   28500:	b123      	cbz	r3, 2850c <ble_phy_rx_end_isr+0x6c>
                ble_hdr->rxinfo.flags &= ~BLE_MBUF_HDR_F_CRC_OK;
   28502:	4a27      	ldr	r2, [pc, #156]	; (285a0 <ble_phy_rx_end_isr+0x100>)
   28504:	8b13      	ldrh	r3, [r2, #24]
   28506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2850a:	8313      	strh	r3, [r2, #24]
            if (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   2850c:	4b26      	ldr	r3, [pc, #152]	; (285a8 <ble_phy_rx_end_isr+0x108>)
   2850e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   28512:	b923      	cbnz	r3, 2851e <ble_phy_rx_end_isr+0x7e>
                ble_hdr->rxinfo.flags &= ~BLE_MBUF_HDR_F_CRC_OK;
   28514:	4a22      	ldr	r2, [pc, #136]	; (285a0 <ble_phy_rx_end_isr+0x100>)
   28516:	8b13      	ldrh	r3, [r2, #24]
   28518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2851c:	8313      	strh	r3, [r2, #24]
    tx_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   2851e:	4a23      	ldr	r2, [pc, #140]	; (285ac <ble_phy_rx_end_isr+0x10c>)
   28520:	f8d2 3548 	ldr.w	r3, [r2, #1352]	; 0x548
   28524:	3396      	adds	r3, #150	; 0x96
    tx_time -= g_ble_phy_t_rxenddelay[ble_hdr->rxinfo.phy_mode];
   28526:	491e      	ldr	r1, [pc, #120]	; (285a0 <ble_phy_rx_end_isr+0x100>)
   28528:	7f88      	ldrb	r0, [r1, #30]
   2852a:	4c21      	ldr	r4, [pc, #132]	; (285b0 <ble_phy_rx_end_isr+0x110>)
   2852c:	5c20      	ldrb	r0, [r4, r0]
   2852e:	1a1b      	subs	r3, r3, r0
    tx_time -= BLE_PHY_T_TXENFAST;
   28530:	3b28      	subs	r3, #40	; 0x28
    tx_time -= g_ble_phy_t_txdelay[g_ble_phy_data.phy_cur_phy_mode];
   28532:	7ac9      	ldrb	r1, [r1, #11]
   28534:	481f      	ldr	r0, [pc, #124]	; (285b4 <ble_phy_rx_end_isr+0x114>)
   28536:	5c41      	ldrb	r1, [r0, r1]
   28538:	1a5b      	subs	r3, r3, r1
    NRF_TIMER0->CC[0] = tx_time;
   2853a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   2853e:	2300      	movs	r3, #0
   28540:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    NRF_PPI->CHENSET = PPI_CHEN_CH20_Msk;
   28544:	4b15      	ldr	r3, [pc, #84]	; (2859c <ble_phy_rx_end_isr+0xfc>)
   28546:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   2854a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    NRF_TIMER0->TASKS_CAPTURE[3] = 1;
   2854e:	2301      	movs	r3, #1
   28550:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (NRF_TIMER0->CC[3] > NRF_TIMER0->CC[0]) {
   28552:	f8d2 154c 	ldr.w	r1, [r2, #1356]	; 0x54c
   28556:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
   2855a:	4299      	cmp	r1, r3
   2855c:	d907      	bls.n	2856e <ble_phy_rx_end_isr+0xce>
        NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk;
   2855e:	4b0f      	ldr	r3, [pc, #60]	; (2859c <ble_phy_rx_end_isr+0xfc>)
   28560:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   28564:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        g_ble_phy_data.phy_transition_late = 1;
   28568:	4b0d      	ldr	r3, [pc, #52]	; (285a0 <ble_phy_rx_end_isr+0x100>)
   2856a:	2201      	movs	r2, #1
   2856c:	715a      	strb	r2, [r3, #5]
    dptr[2] = dptr[1];
   2856e:	480d      	ldr	r0, [pc, #52]	; (285a4 <ble_phy_rx_end_isr+0x104>)
   28570:	7903      	ldrb	r3, [r0, #4]
   28572:	7143      	strb	r3, [r0, #5]
    dptr[1] = dptr[0];
   28574:	78c3      	ldrb	r3, [r0, #3]
   28576:	f800 3f04 	strb.w	r3, [r0, #4]!
    rc = ble_ll_rx_end(dptr + 1, ble_hdr);
   2857a:	490f      	ldr	r1, [pc, #60]	; (285b8 <ble_phy_rx_end_isr+0x118>)
   2857c:	f7f6 feac 	bl	1f2d8 <ble_ll_rx_end>
    if (rc < 0) {
   28580:	2800      	cmp	r0, #0
   28582:	db05      	blt.n	28590 <ble_phy_rx_end_isr+0xf0>
}
   28584:	bd10      	pop	{r4, pc}
    assert(NRF_RADIO->EVENTS_RSSIEND != 0);
   28586:	461a      	mov	r2, r3
   28588:	4619      	mov	r1, r3
   2858a:	4618      	mov	r0, r3
   2858c:	f7e8 f826 	bl	105dc <__assert_func>
        ble_phy_disable();
   28590:	f7ff fee8 	bl	28364 <ble_phy_disable>
}
   28594:	e7f6      	b.n	28584 <ble_phy_rx_end_isr+0xe4>
   28596:	bf00      	nop
   28598:	40001000 	.word	0x40001000
   2859c:	4001f000 	.word	0x4001f000
   285a0:	20004358 	.word	0x20004358
   285a4:	200038b0 	.word	0x200038b0
   285a8:	4000f000 	.word	0x4000f000
   285ac:	40008000 	.word	0x40008000
   285b0:	0002c9d0 	.word	0x0002c9d0
   285b4:	0002c9d4 	.word	0x0002c9d4
   285b8:	20004370 	.word	0x20004370

000285bc <ble_phy_isr>:
{
   285bc:	b510      	push	{r4, lr}
    irq_en = NRF_RADIO->INTENCLR;
   285be:	4b1d      	ldr	r3, [pc, #116]	; (28634 <ble_phy_isr+0x78>)
   285c0:	f8d3 4308 	ldr.w	r4, [r3, #776]	; 0x308
    if ((irq_en & RADIO_INTENCLR_ADDRESS_Msk) && NRF_RADIO->EVENTS_ADDRESS) {
   285c4:	f014 0f02 	tst.w	r4, #2
   285c8:	d002      	beq.n	285d0 <ble_phy_isr+0x14>
   285ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   285ce:	b9db      	cbnz	r3, 28608 <ble_phy_isr+0x4c>
    if ((irq_en & RADIO_INTENCLR_DISABLED_Msk) && NRF_RADIO->EVENTS_DISABLED) {
   285d0:	f014 0f10 	tst.w	r4, #16
   285d4:	d00a      	beq.n	285ec <ble_phy_isr+0x30>
   285d6:	4b17      	ldr	r3, [pc, #92]	; (28634 <ble_phy_isr+0x78>)
   285d8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   285dc:	b133      	cbz	r3, 285ec <ble_phy_isr+0x30>
        if (g_ble_phy_data.phy_state == BLE_PHY_STATE_RX) {
   285de:	4b16      	ldr	r3, [pc, #88]	; (28638 <ble_phy_isr+0x7c>)
   285e0:	78db      	ldrb	r3, [r3, #3]
   285e2:	2b01      	cmp	r3, #1
   285e4:	d017      	beq.n	28616 <ble_phy_isr+0x5a>
        } else if (g_ble_phy_data.phy_state == BLE_PHY_STATE_IDLE) {
   285e6:	b1eb      	cbz	r3, 28624 <ble_phy_isr+0x68>
            ble_phy_tx_end_isr();
   285e8:	f7ff fcd0 	bl	27f8c <ble_phy_tx_end_isr>
    if ((irq_en & RADIO_INTENCLR_END_Msk) && NRF_RADIO->EVENTS_END) {
   285ec:	f014 0f08 	tst.w	r4, #8
   285f0:	d003      	beq.n	285fa <ble_phy_isr+0x3e>
   285f2:	4b10      	ldr	r3, [pc, #64]	; (28634 <ble_phy_isr+0x78>)
   285f4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   285f8:	b9cb      	cbnz	r3, 2862e <ble_phy_isr+0x72>
    g_ble_phy_data.phy_transition_late = 0;
   285fa:	4b0f      	ldr	r3, [pc, #60]	; (28638 <ble_phy_isr+0x7c>)
   285fc:	2200      	movs	r2, #0
   285fe:	715a      	strb	r2, [r3, #5]
    irq_en = NRF_RADIO->SHORTS;
   28600:	4b0c      	ldr	r3, [pc, #48]	; (28634 <ble_phy_isr+0x78>)
   28602:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
}
   28606:	bd10      	pop	{r4, pc}
        if (ble_phy_rx_start_isr()) {
   28608:	f7ff feb2 	bl	28370 <ble_phy_rx_start_isr>
   2860c:	2800      	cmp	r0, #0
   2860e:	d0df      	beq.n	285d0 <ble_phy_isr+0x14>
            irq_en &= ~RADIO_INTENCLR_DISABLED_Msk;
   28610:	f024 0410 	bic.w	r4, r4, #16
   28614:	e7dc      	b.n	285d0 <ble_phy_isr+0x14>
            NRF_RADIO->EVENTS_DISABLED = 0;
   28616:	2000      	movs	r0, #0
   28618:	4b06      	ldr	r3, [pc, #24]	; (28634 <ble_phy_isr+0x78>)
   2861a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
            ble_ll_wfr_timer_exp(NULL);
   2861e:	f7f6 fde5 	bl	1f1ec <ble_ll_wfr_timer_exp>
   28622:	e7e3      	b.n	285ec <ble_phy_isr+0x30>
            assert(0);
   28624:	461a      	mov	r2, r3
   28626:	4619      	mov	r1, r3
   28628:	4618      	mov	r0, r3
   2862a:	f7e7 ffd7 	bl	105dc <__assert_func>
        ble_phy_rx_end_isr();
   2862e:	f7ff ff37 	bl	284a0 <ble_phy_rx_end_isr>
   28632:	e7e2      	b.n	285fa <ble_phy_isr+0x3e>
   28634:	40001000 	.word	0x40001000
   28638:	20004358 	.word	0x20004358

0002863c <ble_phy_rx>:
{
   2863c:	b508      	push	{r3, lr}
    nrf_wait_disabled();
   2863e:	f7ff fb09 	bl	27c54 <nrf_wait_disabled>
    if ((NRF_RADIO->STATE != RADIO_STATE_STATE_Disabled) &&
   28642:	4b14      	ldr	r3, [pc, #80]	; (28694 <ble_phy_rx+0x58>)
   28644:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
   28648:	b133      	cbz	r3, 28658 <ble_phy_rx+0x1c>
            ((NRF_RADIO->STATE & 0x07) != RADIO_STATE_STATE_RxIdle)) {
   2864a:	4b12      	ldr	r3, [pc, #72]	; (28694 <ble_phy_rx+0x58>)
   2864c:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
   28650:	f003 0307 	and.w	r3, r3, #7
    if ((NRF_RADIO->STATE != RADIO_STATE_STATE_Disabled) &&
   28654:	2b02      	cmp	r3, #2
   28656:	d113      	bne.n	28680 <ble_phy_rx+0x44>
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   28658:	4b0e      	ldr	r3, [pc, #56]	; (28694 <ble_phy_rx+0x58>)
   2865a:	f243 42ff 	movw	r2, #13567	; 0x34ff
   2865e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->EVENTS_END = 0;
   28662:	2200      	movs	r2, #0
   28664:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->EVENTS_DISABLED = 0;
   28668:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ble_phy_rx_xcvr_setup();
   2866c:	f7ff fb5a 	bl	27d24 <ble_phy_rx_xcvr_setup>
    assert(NRF_PPI->CHEN & PPI_CHEN_CH21_Msk);
   28670:	4b09      	ldr	r3, [pc, #36]	; (28698 <ble_phy_rx+0x5c>)
   28672:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   28676:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
   2867a:	d005      	beq.n	28688 <ble_phy_rx+0x4c>
    return 0;
   2867c:	2000      	movs	r0, #0
}
   2867e:	bd08      	pop	{r3, pc}
        ble_phy_disable();
   28680:	f7ff fe70 	bl	28364 <ble_phy_disable>
        return BLE_PHY_ERR_RADIO_STATE;
   28684:	2001      	movs	r0, #1
   28686:	e7fa      	b.n	2867e <ble_phy_rx+0x42>
    assert(NRF_PPI->CHEN & PPI_CHEN_CH21_Msk);
   28688:	2300      	movs	r3, #0
   2868a:	461a      	mov	r2, r3
   2868c:	4619      	mov	r1, r3
   2868e:	4618      	mov	r0, r3
   28690:	f7e7 ffa4 	bl	105dc <__assert_func>
   28694:	40001000 	.word	0x40001000
   28698:	4001f000 	.word	0x4001f000

0002869c <ble_phy_rx_set_start_time>:
{
   2869c:	b510      	push	{r4, lr}
    NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk;
   2869e:	4b0e      	ldr	r3, [pc, #56]	; (286d8 <ble_phy_rx_set_start_time+0x3c>)
   286a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   286a4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (ble_phy_set_start_time(cputime, rem_usecs, false) != 0) {
   286a8:	2200      	movs	r2, #0
   286aa:	f7ff fae3 	bl	27c74 <ble_phy_set_start_time>
   286ae:	b960      	cbnz	r0, 286ca <ble_phy_rx_set_start_time+0x2e>
    bool late = false;
   286b0:	2400      	movs	r4, #0
    NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   286b2:	4b09      	ldr	r3, [pc, #36]	; (286d8 <ble_phy_rx_set_start_time+0x3c>)
   286b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   286b8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    rc = ble_phy_rx();
   286bc:	f7ff ffbe 	bl	2863c <ble_phy_rx>
    if (!rc && late) {
   286c0:	4603      	mov	r3, r0
   286c2:	b900      	cbnz	r0, 286c6 <ble_phy_rx_set_start_time+0x2a>
   286c4:	b92c      	cbnz	r4, 286d2 <ble_phy_rx_set_start_time+0x36>
}
   286c6:	4618      	mov	r0, r3
   286c8:	bd10      	pop	{r4, pc}
        ble_phy_set_start_now();
   286ca:	f7ff fbab 	bl	27e24 <ble_phy_set_start_now>
        late = true;
   286ce:	2401      	movs	r4, #1
   286d0:	e7ef      	b.n	286b2 <ble_phy_rx_set_start_time+0x16>
        rc = BLE_PHY_ERR_RX_LATE;
   286d2:	2306      	movs	r3, #6
    return rc;
   286d4:	e7f7      	b.n	286c6 <ble_phy_rx_set_start_time+0x2a>
   286d6:	bf00      	nop
   286d8:	4001f000 	.word	0x4001f000

000286dc <ble_phy_restart_rx>:
{
   286dc:	b508      	push	{r3, lr}
    ble_phy_disable_irq_and_ppi();
   286de:	f7ff fe23 	bl	28328 <ble_phy_disable_irq_and_ppi>
    ble_phy_set_start_now();
   286e2:	f7ff fb9f 	bl	27e24 <ble_phy_set_start_now>
    NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   286e6:	4b04      	ldr	r3, [pc, #16]	; (286f8 <ble_phy_restart_rx+0x1c>)
   286e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   286ec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ble_phy_rx();
   286f0:	f7ff ffa4 	bl	2863c <ble_phy_rx>
}
   286f4:	bd08      	pop	{r3, pc}
   286f6:	bf00      	nop
   286f8:	4001f000 	.word	0x4001f000

000286fc <ble_phy_tx_set_start_time>:
{
   286fc:	b508      	push	{r3, lr}
    NRF_PPI->CHENCLR = PPI_CHEN_CH21_Msk;
   286fe:	4b0a      	ldr	r3, [pc, #40]	; (28728 <ble_phy_tx_set_start_time+0x2c>)
   28700:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   28704:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (ble_phy_set_start_time(cputime, rem_usecs, true) != 0) {
   28708:	2201      	movs	r2, #1
   2870a:	f7ff fab3 	bl	27c74 <ble_phy_set_start_time>
   2870e:	b938      	cbnz	r0, 28720 <ble_phy_tx_set_start_time+0x24>
   28710:	4603      	mov	r3, r0
        NRF_PPI->CHENSET = PPI_CHEN_CH20_Msk;
   28712:	4a05      	ldr	r2, [pc, #20]	; (28728 <ble_phy_tx_set_start_time+0x2c>)
   28714:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   28718:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   2871c:	4618      	mov	r0, r3
   2871e:	bd08      	pop	{r3, pc}
        ble_phy_disable();
   28720:	f7ff fe20 	bl	28364 <ble_phy_disable>
        rc = BLE_PHY_ERR_TX_LATE;
   28724:	2305      	movs	r3, #5
   28726:	e7f9      	b.n	2871c <ble_phy_tx_set_start_time+0x20>
   28728:	4001f000 	.word	0x4001f000

0002872c <ble_phy_tx>:
{
   2872c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28730:	b082      	sub	sp, #8
    if (g_ble_phy_data.phy_transition_late) {
   28732:	4b34      	ldr	r3, [pc, #208]	; (28804 <ble_phy_tx+0xd8>)
   28734:	795b      	ldrb	r3, [r3, #5]
   28736:	2b00      	cmp	r3, #0
   28738:	d155      	bne.n	287e6 <ble_phy_tx+0xba>
   2873a:	4607      	mov	r7, r0
   2873c:	4688      	mov	r8, r1
   2873e:	4616      	mov	r6, r2
    nrf_wait_disabled();
   28740:	f7ff fa88 	bl	27c54 <nrf_wait_disabled>
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk | PPI_CHEN_CH23_Msk |
   28744:	4b30      	ldr	r3, [pc, #192]	; (28808 <ble_phy_tx+0xdc>)
   28746:	4a31      	ldr	r2, [pc, #196]	; (2880c <ble_phy_tx+0xe0>)
   28748:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (g_ble_phy_data.phy_encrypted) {
   2874c:	4b2d      	ldr	r3, [pc, #180]	; (28804 <ble_phy_tx+0xd8>)
   2874e:	79db      	ldrb	r3, [r3, #7]
   28750:	2b00      	cmp	r3, #0
   28752:	d04c      	beq.n	287ee <ble_phy_tx+0xc2>
        NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   28754:	4d2e      	ldr	r5, [pc, #184]	; (28810 <ble_phy_tx+0xe4>)
   28756:	2301      	movs	r3, #1
   28758:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
        NRF_CCM->INPTR = (uint32_t)dptr;
   2875c:	4c2d      	ldr	r4, [pc, #180]	; (28814 <ble_phy_tx+0xe8>)
   2875e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
        NRF_CCM->OUTPTR = (uint32_t)pktptr;
   28762:	4b2d      	ldr	r3, [pc, #180]	; (28818 <ble_phy_tx+0xec>)
   28764:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
        NRF_CCM->SCRATCHPTR = (uint32_t)&g_nrf_encrypt_scratchpad[0];
   28768:	4b2c      	ldr	r3, [pc, #176]	; (2881c <ble_phy_tx+0xf0>)
   2876a:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
        NRF_CCM->EVENTS_ERROR = 0;
   2876e:	2300      	movs	r3, #0
   28770:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | ble_phy_get_ccm_datarate();
   28774:	f7ff fad4 	bl	27d20 <ble_phy_get_ccm_datarate>
   28778:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   2877c:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
        NRF_CCM->CNFPTR = (uint32_t)&g_nrf_ccm_data;
   28780:	4b27      	ldr	r3, [pc, #156]	; (28820 <ble_phy_tx+0xf4>)
   28782:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    payload_len = pducb(&dptr[3], pducb_arg, &hdr_byte);
   28786:	f10d 0207 	add.w	r2, sp, #7
   2878a:	4641      	mov	r1, r8
   2878c:	1ce0      	adds	r0, r4, #3
   2878e:	47b8      	blx	r7
    dptr[0] = hdr_byte;
   28790:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28794:	7023      	strb	r3, [r4, #0]
    dptr[1] = payload_len;
   28796:	7060      	strb	r0, [r4, #1]
    dptr[2] = 0;
   28798:	2300      	movs	r3, #0
   2879a:	70a3      	strb	r3, [r4, #2]
    if (g_ble_phy_data.phy_encrypted) {
   2879c:	4b19      	ldr	r3, [pc, #100]	; (28804 <ble_phy_tx+0xd8>)
   2879e:	79db      	ldrb	r3, [r3, #7]
   287a0:	b113      	cbz	r3, 287a8 <ble_phy_tx+0x7c>
        NRF_CCM->TASKS_KSGEN = 1;
   287a2:	4b1b      	ldr	r3, [pc, #108]	; (28810 <ble_phy_tx+0xe4>)
   287a4:	2201      	movs	r2, #1
   287a6:	601a      	str	r2, [r3, #0]
    NRF_RADIO->PACKETPTR = (uint32_t)pktptr;
   287a8:	4b1e      	ldr	r3, [pc, #120]	; (28824 <ble_phy_tx+0xf8>)
   287aa:	4a1b      	ldr	r2, [pc, #108]	; (28818 <ble_phy_tx+0xec>)
   287ac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRF_RADIO->EVENTS_READY = 0;
   287b0:	2200      	movs	r2, #0
   287b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    NRF_RADIO->EVENTS_END = 0;
   287b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->EVENTS_DISABLED = 0;
   287ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    NRF_RADIO->SHORTS = shortcuts;
   287be:	2203      	movs	r2, #3
   287c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
   287c4:	2210      	movs	r2, #16
   287c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    g_ble_phy_data.phy_transition = end_trans;
   287ca:	4a0e      	ldr	r2, [pc, #56]	; (28804 <ble_phy_tx+0xd8>)
   287cc:	7116      	strb	r6, [r2, #4]
    g_ble_phy_data.phy_tx_pyld_len = payload_len;
   287ce:	7250      	strb	r0, [r2, #9]
    state = NRF_RADIO->STATE;
   287d0:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    if (state != RADIO_STATE_STATE_Tx) {
   287d4:	2b0b      	cmp	r3, #11
   287d6:	d010      	beq.n	287fa <ble_phy_tx+0xce>
        g_ble_phy_data.phy_state = BLE_PHY_STATE_TX;
   287d8:	4613      	mov	r3, r2
   287da:	2202      	movs	r2, #2
   287dc:	70da      	strb	r2, [r3, #3]
        rc = BLE_ERR_SUCCESS;
   287de:	2000      	movs	r0, #0
}
   287e0:	b002      	add	sp, #8
   287e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_phy_disable();
   287e6:	f7ff fdbd 	bl	28364 <ble_phy_disable>
        return BLE_PHY_ERR_TX_LATE;
   287ea:	2005      	movs	r0, #5
   287ec:	e7f8      	b.n	287e0 <ble_phy_tx+0xb4>
        NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   287ee:	4a0e      	ldr	r2, [pc, #56]	; (28828 <ble_phy_tx+0xfc>)
   287f0:	4b07      	ldr	r3, [pc, #28]	; (28810 <ble_phy_tx+0xe4>)
   287f2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        dptr = (uint8_t *)&g_ble_phy_tx_buf[0];
   287f6:	4c08      	ldr	r4, [pc, #32]	; (28818 <ble_phy_tx+0xec>)
   287f8:	e7c5      	b.n	28786 <ble_phy_tx+0x5a>
        ble_phy_disable();
   287fa:	f7ff fdb3 	bl	28364 <ble_phy_disable>
        rc = BLE_PHY_ERR_RADIO_STATE;
   287fe:	2001      	movs	r0, #1
   28800:	e7ee      	b.n	287e0 <ble_phy_tx+0xb4>
   28802:	bf00      	nop
   28804:	20004358 	.word	0x20004358
   28808:	4001f000 	.word	0x4001f000
   2880c:	02800030 	.word	0x02800030
   28810:	4000f000 	.word	0x4000f000
   28814:	200037ac 	.word	0x200037ac
   28818:	200039b4 	.word	0x200039b4
   2881c:	2000438c 	.word	0x2000438c
   28820:	20004498 	.word	0x20004498
   28824:	40001000 	.word	0x40001000
   28828:	20004314 	.word	0x20004314

0002882c <ble_phy_access_addr_get>:

/* Gets the current access address */
uint32_t ble_phy_access_addr_get(void)
{
    return g_ble_phy_data.phy_access_address;
}
   2882c:	4b01      	ldr	r3, [pc, #4]	; (28834 <ble_phy_access_addr_get+0x8>)
   2882e:	6958      	ldr	r0, [r3, #20]
   28830:	4770      	bx	lr
   28832:	bf00      	nop
   28834:	20004358 	.word	0x20004358

00028838 <ble_phy_rx_started>:
 */
int
ble_phy_rx_started(void)
{
    return g_ble_phy_data.phy_rx_started;
}
   28838:	4b01      	ldr	r3, [pc, #4]	; (28840 <ble_phy_rx_started+0x8>)
   2883a:	7998      	ldrb	r0, [r3, #6]
   2883c:	4770      	bx	lr
   2883e:	bf00      	nop
   28840:	20004358 	.word	0x20004358

00028844 <ble_phy_xcvr_state_get>:
 */
uint8_t
ble_phy_xcvr_state_get(void)
{
    uint32_t state;
    state = NRF_RADIO->STATE;
   28844:	4b02      	ldr	r3, [pc, #8]	; (28850 <ble_phy_xcvr_state_get+0xc>)
   28846:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
    return (uint8_t)state;
}
   2884a:	b2c0      	uxtb	r0, r0
   2884c:	4770      	bx	lr
   2884e:	bf00      	nop
   28850:	40001000 	.word	0x40001000

00028854 <ble_phy_max_data_pdu_pyld>:
 */
uint8_t
ble_phy_max_data_pdu_pyld(void)
{
    return BLE_LL_DATA_PDU_MAX_PYLD;
}
   28854:	20fb      	movs	r0, #251	; 0xfb
   28856:	4770      	bx	lr

00028858 <ble_phy_resolv_list_enable>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
void
ble_phy_resolv_list_enable(void)
{
    NRF_AAR->NIRK = (uint32_t)g_nrf_num_irks;
   28858:	4b04      	ldr	r3, [pc, #16]	; (2886c <ble_phy_resolv_list_enable+0x14>)
   2885a:	781a      	ldrb	r2, [r3, #0]
   2885c:	4b04      	ldr	r3, [pc, #16]	; (28870 <ble_phy_resolv_list_enable+0x18>)
   2885e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    g_ble_phy_data.phy_privacy = 1;
   28862:	4b04      	ldr	r3, [pc, #16]	; (28874 <ble_phy_resolv_list_enable+0x1c>)
   28864:	2201      	movs	r2, #1
   28866:	721a      	strb	r2, [r3, #8]
}
   28868:	4770      	bx	lr
   2886a:	bf00      	nop
   2886c:	20004310 	.word	0x20004310
   28870:	4000f000 	.word	0x4000f000
   28874:	20004358 	.word	0x20004358

00028878 <ble_phy_resolv_list_disable>:

void
ble_phy_resolv_list_disable(void)
{
    g_ble_phy_data.phy_privacy = 0;
   28878:	4b01      	ldr	r3, [pc, #4]	; (28880 <ble_phy_resolv_list_disable+0x8>)
   2887a:	2200      	movs	r2, #0
   2887c:	721a      	strb	r2, [r3, #8]
}
   2887e:	4770      	bx	lr
   28880:	20004358 	.word	0x20004358

00028884 <ble_phy_rfclk_enable>:
}
#endif

void
ble_phy_rfclk_enable(void)
{
   28884:	b508      	push	{r3, lr}
#if MYNEWT
    nrf52_clock_hfxo_request();
   28886:	f000 ffc7 	bl	29818 <nrf52_clock_hfxo_request>
#else
    NRF_CLOCK->TASKS_HFCLKSTART = 1;
#endif
}
   2888a:	bd08      	pop	{r3, pc}

0002888c <ble_phy_rfclk_disable>:

void
ble_phy_rfclk_disable(void)
{
   2888c:	b508      	push	{r3, lr}
#if MYNEWT
    nrf52_clock_hfxo_release();
   2888e:	f000 ffe1 	bl	29854 <nrf52_clock_hfxo_release>
#else
    NRF_CLOCK->TASKS_HFCLKSTOP = 1;
#endif
}
   28892:	bd08      	pop	{r3, pc}

00028894 <ble_store_config_find_sec>:

static int
ble_store_config_find_sec(const struct ble_store_key_sec *key_sec,
                          const struct ble_store_value_sec *value_secs,
                          int num_value_secs)
{
   28894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28898:	b083      	sub	sp, #12
   2889a:	4605      	mov	r5, r0
   2889c:	4688      	mov	r8, r1
   2889e:	4692      	mov	sl, r2
    int skipped;
    int i;

    skipped = 0;

    for (i = 0; i < num_value_secs; i++) {
   288a0:	2400      	movs	r4, #0
    skipped = 0;
   288a2:	46a3      	mov	fp, r4
    for (i = 0; i < num_value_secs; i++) {
   288a4:	e004      	b.n	288b0 <ble_store_config_find_sec+0x1c>
        return type_diff;
   288a6:	4638      	mov	r0, r7
   288a8:	e016      	b.n	288d8 <ble_store_config_find_sec+0x44>
                continue;
            }
        }

        if (key_sec->idx > skipped) {
            skipped++;
   288aa:	f10b 0b01 	add.w	fp, fp, #1
    for (i = 0; i < num_value_secs; i++) {
   288ae:	3401      	adds	r4, #1
   288b0:	4554      	cmp	r4, sl
   288b2:	da36      	bge.n	28922 <ble_store_config_find_sec+0x8e>
        cur = value_secs + i;
   288b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   288b8:	011e      	lsls	r6, r3, #4
   288ba:	eb08 0906 	add.w	r9, r8, r6
        if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   288be:	2300      	movs	r3, #0
   288c0:	9300      	str	r3, [sp, #0]
   288c2:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   288c6:	782f      	ldrb	r7, [r5, #0]
    if (type_diff != 0) {
   288c8:	2f00      	cmp	r7, #0
   288ca:	d1ec      	bne.n	288a6 <ble_store_config_find_sec+0x12>
    return memcmp(a->val, b->val, sizeof(a->val));
   288cc:	2206      	movs	r2, #6
   288ce:	f10d 0101 	add.w	r1, sp, #1
   288d2:	1c68      	adds	r0, r5, #1
   288d4:	f7e9 fdd2 	bl	1247c <memcmp>
   288d8:	b158      	cbz	r0, 288f2 <ble_store_config_find_sec+0x5e>
    type_diff = a->type - b->type;
   288da:	f818 0006 	ldrb.w	r0, [r8, r6]
    if (type_diff != 0) {
   288de:	1bc0      	subs	r0, r0, r7
   288e0:	d105      	bne.n	288ee <ble_store_config_find_sec+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   288e2:	2206      	movs	r2, #6
   288e4:	1c69      	adds	r1, r5, #1
   288e6:	f109 0001 	add.w	r0, r9, #1
   288ea:	f7e9 fdc7 	bl	1247c <memcmp>
            if (ble_addr_cmp(&cur->peer_addr, &key_sec->peer_addr)) {
   288ee:	2800      	cmp	r0, #0
   288f0:	d1dd      	bne.n	288ae <ble_store_config_find_sec+0x1a>
        if (key_sec->ediv_rand_present) {
   288f2:	7e2b      	ldrb	r3, [r5, #24]
   288f4:	f013 0f01 	tst.w	r3, #1
   288f8:	d00c      	beq.n	28914 <ble_store_config_find_sec+0x80>
            if (cur->ediv != key_sec->ediv) {
   288fa:	f8b9 2008 	ldrh.w	r2, [r9, #8]
   288fe:	892b      	ldrh	r3, [r5, #8]
   28900:	429a      	cmp	r2, r3
   28902:	d1d4      	bne.n	288ae <ble_store_config_find_sec+0x1a>
            if (cur->rand_num != key_sec->rand_num) {
   28904:	e9d9 0104 	ldrd	r0, r1, [r9, #16]
   28908:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   2890c:	4299      	cmp	r1, r3
   2890e:	bf08      	it	eq
   28910:	4290      	cmpeq	r0, r2
   28912:	d1cc      	bne.n	288ae <ble_store_config_find_sec+0x1a>
        if (key_sec->idx > skipped) {
   28914:	7e6b      	ldrb	r3, [r5, #25]
   28916:	455b      	cmp	r3, fp
   28918:	dcc7      	bgt.n	288aa <ble_store_config_find_sec+0x16>

        return i;
    }

    return -1;
}
   2891a:	4620      	mov	r0, r4
   2891c:	b003      	add	sp, #12
   2891e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
   28922:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   28926:	e7f8      	b.n	2891a <ble_store_config_find_sec+0x86>

00028928 <ble_store_config_read_peer_sec>:
}

static int
ble_store_config_read_peer_sec(const struct ble_store_key_sec *key_sec,
                               struct ble_store_value_sec *value_sec)
{
   28928:	b510      	push	{r4, lr}
   2892a:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_sec(key_sec, ble_store_config_peer_secs,
   2892c:	4b0a      	ldr	r3, [pc, #40]	; (28958 <ble_store_config_read_peer_sec+0x30>)
   2892e:	681a      	ldr	r2, [r3, #0]
   28930:	490a      	ldr	r1, [pc, #40]	; (2895c <ble_store_config_read_peer_sec+0x34>)
   28932:	f7ff ffaf 	bl	28894 <ble_store_config_find_sec>
                             ble_store_config_num_peer_secs);
    if (idx == -1) {
   28936:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2893a:	d00a      	beq.n	28952 <ble_store_config_read_peer_sec+0x2a>
        return BLE_HS_ENOENT;
    }

    *value_sec = ble_store_config_peer_secs[idx];
   2893c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   28940:	0103      	lsls	r3, r0, #4
   28942:	2250      	movs	r2, #80	; 0x50
   28944:	4905      	ldr	r1, [pc, #20]	; (2895c <ble_store_config_read_peer_sec+0x34>)
   28946:	4419      	add	r1, r3
   28948:	4620      	mov	r0, r4
   2894a:	f7e9 fdbb 	bl	124c4 <memcpy>
    return 0;
   2894e:	2000      	movs	r0, #0
}
   28950:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   28952:	2005      	movs	r0, #5
   28954:	e7fc      	b.n	28950 <ble_store_config_read_peer_sec+0x28>
   28956:	bf00      	nop
   28958:	200045b0 	.word	0x200045b0
   2895c:	200044c0 	.word	0x200044c0

00028960 <ble_store_config_read_our_sec>:
{
   28960:	b510      	push	{r4, lr}
   28962:	460c      	mov	r4, r1
    idx = ble_store_config_find_sec(key_sec, ble_store_config_our_secs,
   28964:	4b0a      	ldr	r3, [pc, #40]	; (28990 <ble_store_config_read_our_sec+0x30>)
   28966:	681a      	ldr	r2, [r3, #0]
   28968:	490a      	ldr	r1, [pc, #40]	; (28994 <ble_store_config_read_our_sec+0x34>)
   2896a:	f7ff ff93 	bl	28894 <ble_store_config_find_sec>
    if (idx == -1) {
   2896e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   28972:	d00a      	beq.n	2898a <ble_store_config_read_our_sec+0x2a>
    *value_sec = ble_store_config_our_secs[idx];
   28974:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   28978:	0103      	lsls	r3, r0, #4
   2897a:	2250      	movs	r2, #80	; 0x50
   2897c:	4905      	ldr	r1, [pc, #20]	; (28994 <ble_store_config_read_our_sec+0x34>)
   2897e:	4419      	add	r1, r3
   28980:	4620      	mov	r0, r4
   28982:	f7e9 fd9f 	bl	124c4 <memcpy>
    return 0;
   28986:	2000      	movs	r0, #0
}
   28988:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   2898a:	2005      	movs	r0, #5
   2898c:	e7fc      	b.n	28988 <ble_store_config_read_our_sec+0x28>
   2898e:	bf00      	nop
   28990:	20004634 	.word	0x20004634
   28994:	20004640 	.word	0x20004640

00028998 <ble_store_config_find_cccd>:
 * $cccd                                                                     *
 *****************************************************************************/

static int
ble_store_config_find_cccd(const struct ble_store_key_cccd *key)
{
   28998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2899c:	b082      	sub	sp, #8
   2899e:	4605      	mov	r5, r0
    struct ble_store_value_cccd *cccd;
    int skipped;
    int i;

    skipped = 0;
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   289a0:	2400      	movs	r4, #0
    skipped = 0;
   289a2:	46a0      	mov	r8, r4
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   289a4:	e004      	b.n	289b0 <ble_store_config_find_cccd+0x18>
        return type_diff;
   289a6:	4630      	mov	r0, r6
   289a8:	e019      	b.n	289de <ble_store_config_find_cccd+0x46>
                continue;
            }
        }

        if (key->idx > skipped) {
            skipped++;
   289aa:	f108 0801 	add.w	r8, r8, #1
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   289ae:	3401      	adds	r4, #1
   289b0:	4b18      	ldr	r3, [pc, #96]	; (28a14 <ble_store_config_find_cccd+0x7c>)
   289b2:	681b      	ldr	r3, [r3, #0]
   289b4:	42a3      	cmp	r3, r4
   289b6:	dd2a      	ble.n	28a0e <ble_store_config_find_cccd+0x76>
        cccd = ble_store_config_cccds + i;
   289b8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   289bc:	f8df 9058 	ldr.w	r9, [pc, #88]	; 28a18 <ble_store_config_find_cccd+0x80>
   289c0:	eb0a 0709 	add.w	r7, sl, r9
        if (ble_addr_cmp(&key->peer_addr, BLE_ADDR_ANY)) {
   289c4:	2300      	movs	r3, #0
   289c6:	9300      	str	r3, [sp, #0]
   289c8:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   289cc:	782e      	ldrb	r6, [r5, #0]
    if (type_diff != 0) {
   289ce:	2e00      	cmp	r6, #0
   289d0:	d1e9      	bne.n	289a6 <ble_store_config_find_cccd+0xe>
    return memcmp(a->val, b->val, sizeof(a->val));
   289d2:	2206      	movs	r2, #6
   289d4:	f10d 0101 	add.w	r1, sp, #1
   289d8:	1c68      	adds	r0, r5, #1
   289da:	f7e9 fd4f 	bl	1247c <memcmp>
   289de:	b150      	cbz	r0, 289f6 <ble_store_config_find_cccd+0x5e>
    type_diff = a->type - b->type;
   289e0:	f81a 0009 	ldrb.w	r0, [sl, r9]
    if (type_diff != 0) {
   289e4:	1b80      	subs	r0, r0, r6
   289e6:	d104      	bne.n	289f2 <ble_store_config_find_cccd+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   289e8:	2206      	movs	r2, #6
   289ea:	1c69      	adds	r1, r5, #1
   289ec:	1c78      	adds	r0, r7, #1
   289ee:	f7e9 fd45 	bl	1247c <memcmp>
            if (ble_addr_cmp(&cccd->peer_addr, &key->peer_addr)) {
   289f2:	2800      	cmp	r0, #0
   289f4:	d1db      	bne.n	289ae <ble_store_config_find_cccd+0x16>
        if (key->chr_val_handle != 0) {
   289f6:	892b      	ldrh	r3, [r5, #8]
   289f8:	b113      	cbz	r3, 28a00 <ble_store_config_find_cccd+0x68>
            if (cccd->chr_val_handle != key->chr_val_handle) {
   289fa:	893a      	ldrh	r2, [r7, #8]
   289fc:	4293      	cmp	r3, r2
   289fe:	d1d6      	bne.n	289ae <ble_store_config_find_cccd+0x16>
        if (key->idx > skipped) {
   28a00:	7aab      	ldrb	r3, [r5, #10]
   28a02:	4543      	cmp	r3, r8
   28a04:	dcd1      	bgt.n	289aa <ble_store_config_find_cccd+0x12>

        return i;
    }

    return -1;
}
   28a06:	4620      	mov	r0, r4
   28a08:	b002      	add	sp, #8
   28a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return -1;
   28a0e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   28a12:	e7f8      	b.n	28a06 <ble_store_config_find_cccd+0x6e>
   28a14:	20004638 	.word	0x20004638
   28a18:	200045b4 	.word	0x200045b4

00028a1c <ble_store_config_read_cccd>:
}

static int
ble_store_config_read_cccd(const struct ble_store_key_cccd *key_cccd,
                           struct ble_store_value_cccd *value_cccd)
{
   28a1c:	b510      	push	{r4, lr}
   28a1e:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_cccd(key_cccd);
   28a20:	f7ff ffba 	bl	28998 <ble_store_config_find_cccd>
    if (idx == -1) {
   28a24:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   28a28:	d007      	beq.n	28a3a <ble_store_config_read_cccd+0x1e>
        return BLE_HS_ENOENT;
    }

    *value_cccd = ble_store_config_cccds[idx];
   28a2a:	4b05      	ldr	r3, [pc, #20]	; (28a40 <ble_store_config_read_cccd+0x24>)
   28a2c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   28a30:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   28a32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return 0;
   28a36:	2000      	movs	r0, #0
}
   28a38:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   28a3a:	2005      	movs	r0, #5
   28a3c:	e7fc      	b.n	28a38 <ble_store_config_read_cccd+0x1c>
   28a3e:	bf00      	nop
   28a40:	200045b4 	.word	0x200045b4

00028a44 <ble_store_config_print_key_sec>:
{
   28a44:	b510      	push	{r4, lr}
   28a46:	b082      	sub	sp, #8
   28a48:	4604      	mov	r4, r0
    if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   28a4a:	2300      	movs	r3, #0
   28a4c:	9300      	str	r3, [sp, #0]
   28a4e:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   28a52:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   28a54:	b928      	cbnz	r0, 28a62 <ble_store_config_print_key_sec+0x1e>
    return memcmp(a->val, b->val, sizeof(a->val));
   28a56:	2206      	movs	r2, #6
   28a58:	f10d 0101 	add.w	r1, sp, #1
   28a5c:	1c60      	adds	r0, r4, #1
   28a5e:	f7e9 fd0d 	bl	1247c <memcmp>
   28a62:	b908      	cbnz	r0, 28a68 <ble_store_config_print_key_sec+0x24>
}
   28a64:	b002      	add	sp, #8
   28a66:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(key_sec->peer_addr.val, 6);
   28a68:	2106      	movs	r1, #6
   28a6a:	1c60      	adds	r0, r4, #1
   28a6c:	f7ef fea8 	bl	187c0 <ble_hs_log_flat_buf>
}
   28a70:	e7f8      	b.n	28a64 <ble_store_config_print_key_sec+0x20>

00028a72 <ble_store_config_read>:
 * @return                      0 if a key was found; else BLE_HS_ENOENT.
 */
int
ble_store_config_read(int obj_type, const union ble_store_key *key,
                      union ble_store_value *value)
{
   28a72:	b538      	push	{r3, r4, r5, lr}
   28a74:	460c      	mov	r4, r1
   28a76:	4615      	mov	r5, r2
    int rc;

    switch (obj_type) {
   28a78:	2802      	cmp	r0, #2
   28a7a:	d005      	beq.n	28a88 <ble_store_config_read+0x16>
   28a7c:	2803      	cmp	r0, #3
   28a7e:	d013      	beq.n	28aa8 <ble_store_config_read+0x36>
   28a80:	2801      	cmp	r0, #1
   28a82:	d009      	beq.n	28a98 <ble_store_config_read+0x26>
    case BLE_STORE_OBJ_TYPE_CCCD:
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
        return rc;

    default:
        return BLE_HS_ENOTSUP;
   28a84:	2008      	movs	r0, #8
   28a86:	e006      	b.n	28a96 <ble_store_config_read+0x24>
        ble_store_config_print_key_sec(&key->sec);
   28a88:	4608      	mov	r0, r1
   28a8a:	f7ff ffdb 	bl	28a44 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_peer_sec(&key->sec, &value->sec);
   28a8e:	4629      	mov	r1, r5
   28a90:	4620      	mov	r0, r4
   28a92:	f7ff ff49 	bl	28928 <ble_store_config_read_peer_sec>
    }
}
   28a96:	bd38      	pop	{r3, r4, r5, pc}
        ble_store_config_print_key_sec(&key->sec);
   28a98:	4608      	mov	r0, r1
   28a9a:	f7ff ffd3 	bl	28a44 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_our_sec(&key->sec, &value->sec);
   28a9e:	4629      	mov	r1, r5
   28aa0:	4620      	mov	r0, r4
   28aa2:	f7ff ff5d 	bl	28960 <ble_store_config_read_our_sec>
        return rc;
   28aa6:	e7f6      	b.n	28a96 <ble_store_config_read+0x24>
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
   28aa8:	4611      	mov	r1, r2
   28aaa:	4620      	mov	r0, r4
   28aac:	f7ff ffb6 	bl	28a1c <ble_store_config_read_cccd>
        return rc;
   28ab0:	e7f1      	b.n	28a96 <ble_store_config_read+0x24>

00028ab2 <ble_store_config_print_value_sec>:
{
   28ab2:	b510      	push	{r4, lr}
   28ab4:	4604      	mov	r4, r0
    if (sec->ltk_present) {
   28ab6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   28aba:	f013 0f01 	tst.w	r3, #1
   28abe:	d10a      	bne.n	28ad6 <ble_store_config_print_value_sec+0x24>
    if (sec->irk_present) {
   28ac0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   28ac4:	f013 0f01 	tst.w	r3, #1
   28ac8:	d10a      	bne.n	28ae0 <ble_store_config_print_value_sec+0x2e>
    if (sec->csrk_present) {
   28aca:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   28ace:	f013 0f01 	tst.w	r3, #1
   28ad2:	d10b      	bne.n	28aec <ble_store_config_print_value_sec+0x3a>
}
   28ad4:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(sec->ltk, 16);
   28ad6:	2110      	movs	r1, #16
   28ad8:	3018      	adds	r0, #24
   28ada:	f7ef fe71 	bl	187c0 <ble_hs_log_flat_buf>
   28ade:	e7ef      	b.n	28ac0 <ble_store_config_print_value_sec+0xe>
        ble_hs_log_flat_buf(sec->irk, 16);
   28ae0:	2110      	movs	r1, #16
   28ae2:	f104 0029 	add.w	r0, r4, #41	; 0x29
   28ae6:	f7ef fe6b 	bl	187c0 <ble_hs_log_flat_buf>
   28aea:	e7ee      	b.n	28aca <ble_store_config_print_value_sec+0x18>
        ble_hs_log_flat_buf(sec->csrk, 16);
   28aec:	2110      	movs	r1, #16
   28aee:	f104 003a 	add.w	r0, r4, #58	; 0x3a
   28af2:	f7ef fe65 	bl	187c0 <ble_hs_log_flat_buf>
}
   28af6:	e7ed      	b.n	28ad4 <ble_store_config_print_value_sec+0x22>

00028af8 <ble_store_config_write_peer_sec>:
{
   28af8:	b530      	push	{r4, r5, lr}
   28afa:	b089      	sub	sp, #36	; 0x24
   28afc:	4605      	mov	r5, r0
    ble_store_config_print_value_sec(value_sec);
   28afe:	f7ff ffd8 	bl	28ab2 <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   28b02:	4629      	mov	r1, r5
   28b04:	4668      	mov	r0, sp
   28b06:	f7f2 fcb9 	bl	1b47c <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_peer_secs,
   28b0a:	4b0f      	ldr	r3, [pc, #60]	; (28b48 <ble_store_config_write_peer_sec+0x50>)
   28b0c:	681c      	ldr	r4, [r3, #0]
   28b0e:	4622      	mov	r2, r4
   28b10:	490e      	ldr	r1, [pc, #56]	; (28b4c <ble_store_config_write_peer_sec+0x54>)
   28b12:	4668      	mov	r0, sp
   28b14:	f7ff febe 	bl	28894 <ble_store_config_find_sec>
    if (idx == -1) {
   28b18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   28b1c:	d105      	bne.n	28b2a <ble_store_config_write_peer_sec+0x32>
        if (ble_store_config_num_peer_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   28b1e:	2c02      	cmp	r4, #2
   28b20:	dc10      	bgt.n	28b44 <ble_store_config_write_peer_sec+0x4c>
        ble_store_config_num_peer_secs++;
   28b22:	1c62      	adds	r2, r4, #1
   28b24:	4b08      	ldr	r3, [pc, #32]	; (28b48 <ble_store_config_write_peer_sec+0x50>)
   28b26:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_peer_secs;
   28b28:	4620      	mov	r0, r4
    ble_store_config_peer_secs[idx] = *value_sec;
   28b2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   28b2e:	0103      	lsls	r3, r0, #4
   28b30:	2250      	movs	r2, #80	; 0x50
   28b32:	4629      	mov	r1, r5
   28b34:	4805      	ldr	r0, [pc, #20]	; (28b4c <ble_store_config_write_peer_sec+0x54>)
   28b36:	4418      	add	r0, r3
   28b38:	f7e9 fcc4 	bl	124c4 <memcpy>
    rc = ble_store_config_persist_peer_secs();
   28b3c:	f000 f9d0 	bl	28ee0 <ble_store_config_persist_peer_secs>
}
   28b40:	b009      	add	sp, #36	; 0x24
   28b42:	bd30      	pop	{r4, r5, pc}
            return BLE_HS_ESTORE_CAP;
   28b44:	201b      	movs	r0, #27
   28b46:	e7fb      	b.n	28b40 <ble_store_config_write_peer_sec+0x48>
   28b48:	200045b0 	.word	0x200045b0
   28b4c:	200044c0 	.word	0x200044c0

00028b50 <ble_store_config_write_our_sec>:
{
   28b50:	b530      	push	{r4, r5, lr}
   28b52:	b089      	sub	sp, #36	; 0x24
   28b54:	4605      	mov	r5, r0
    ble_store_config_print_value_sec(value_sec);
   28b56:	f7ff ffac 	bl	28ab2 <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   28b5a:	4629      	mov	r1, r5
   28b5c:	4668      	mov	r0, sp
   28b5e:	f7f2 fc8d 	bl	1b47c <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_our_secs,
   28b62:	4b0f      	ldr	r3, [pc, #60]	; (28ba0 <ble_store_config_write_our_sec+0x50>)
   28b64:	681c      	ldr	r4, [r3, #0]
   28b66:	4622      	mov	r2, r4
   28b68:	490e      	ldr	r1, [pc, #56]	; (28ba4 <ble_store_config_write_our_sec+0x54>)
   28b6a:	4668      	mov	r0, sp
   28b6c:	f7ff fe92 	bl	28894 <ble_store_config_find_sec>
    if (idx == -1) {
   28b70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   28b74:	d105      	bne.n	28b82 <ble_store_config_write_our_sec+0x32>
        if (ble_store_config_num_our_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   28b76:	2c02      	cmp	r4, #2
   28b78:	dc10      	bgt.n	28b9c <ble_store_config_write_our_sec+0x4c>
        ble_store_config_num_our_secs++;
   28b7a:	1c62      	adds	r2, r4, #1
   28b7c:	4b08      	ldr	r3, [pc, #32]	; (28ba0 <ble_store_config_write_our_sec+0x50>)
   28b7e:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_our_secs;
   28b80:	4620      	mov	r0, r4
    ble_store_config_our_secs[idx] = *value_sec;
   28b82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   28b86:	0103      	lsls	r3, r0, #4
   28b88:	2250      	movs	r2, #80	; 0x50
   28b8a:	4629      	mov	r1, r5
   28b8c:	4805      	ldr	r0, [pc, #20]	; (28ba4 <ble_store_config_write_our_sec+0x54>)
   28b8e:	4418      	add	r0, r3
   28b90:	f7e9 fc98 	bl	124c4 <memcpy>
    rc = ble_store_config_persist_our_secs();
   28b94:	f000 f996 	bl	28ec4 <ble_store_config_persist_our_secs>
}
   28b98:	b009      	add	sp, #36	; 0x24
   28b9a:	bd30      	pop	{r4, r5, pc}
            return BLE_HS_ESTORE_CAP;
   28b9c:	201b      	movs	r0, #27
   28b9e:	e7fb      	b.n	28b98 <ble_store_config_write_our_sec+0x48>
   28ba0:	20004634 	.word	0x20004634
   28ba4:	20004640 	.word	0x20004640

00028ba8 <ble_store_config_write_cccd>:
{
   28ba8:	b530      	push	{r4, r5, lr}
   28baa:	b085      	sub	sp, #20
   28bac:	4605      	mov	r5, r0
    ble_store_key_from_value_cccd(&key_cccd, value_cccd);
   28bae:	4601      	mov	r1, r0
   28bb0:	a801      	add	r0, sp, #4
   28bb2:	f7f2 fc54 	bl	1b45e <ble_store_key_from_value_cccd>
    idx = ble_store_config_find_cccd(&key_cccd);
   28bb6:	a801      	add	r0, sp, #4
   28bb8:	f7ff feee 	bl	28998 <ble_store_config_find_cccd>
    if (idx == -1) {
   28bbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   28bc0:	d106      	bne.n	28bd0 <ble_store_config_write_cccd+0x28>
        if (ble_store_config_num_cccds >= MYNEWT_VAL(BLE_STORE_MAX_CCCDS)) {
   28bc2:	4b0a      	ldr	r3, [pc, #40]	; (28bec <ble_store_config_write_cccd+0x44>)
   28bc4:	6818      	ldr	r0, [r3, #0]
   28bc6:	2807      	cmp	r0, #7
   28bc8:	dc0d      	bgt.n	28be6 <ble_store_config_write_cccd+0x3e>
        ble_store_config_num_cccds++;
   28bca:	1c43      	adds	r3, r0, #1
   28bcc:	4a07      	ldr	r2, [pc, #28]	; (28bec <ble_store_config_write_cccd+0x44>)
   28bce:	6013      	str	r3, [r2, #0]
    ble_store_config_cccds[idx] = *value_cccd;
   28bd0:	4c07      	ldr	r4, [pc, #28]	; (28bf0 <ble_store_config_write_cccd+0x48>)
   28bd2:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   28bd6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   28bda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rc = ble_store_config_persist_cccds();
   28bde:	f000 f98d 	bl	28efc <ble_store_config_persist_cccds>
}
   28be2:	b005      	add	sp, #20
   28be4:	bd30      	pop	{r4, r5, pc}
            return BLE_HS_ESTORE_CAP;
   28be6:	201b      	movs	r0, #27
   28be8:	e7fb      	b.n	28be2 <ble_store_config_write_cccd+0x3a>
   28bea:	bf00      	nop
   28bec:	20004638 	.word	0x20004638
   28bf0:	200045b4 	.word	0x200045b4

00028bf4 <ble_store_config_write>:
 * @return                      0 on success;
 *                              BLE_HS_ESTORE_CAP if the database is full.
 */
int
ble_store_config_write(int obj_type, const union ble_store_value *val)
{
   28bf4:	b508      	push	{r3, lr}
    int rc;

    switch (obj_type) {
   28bf6:	2802      	cmp	r0, #2
   28bf8:	d005      	beq.n	28c06 <ble_store_config_write+0x12>
   28bfa:	2803      	cmp	r0, #3
   28bfc:	d00b      	beq.n	28c16 <ble_store_config_write+0x22>
   28bfe:	2801      	cmp	r0, #1
   28c00:	d005      	beq.n	28c0e <ble_store_config_write+0x1a>
    case BLE_STORE_OBJ_TYPE_CCCD:
        rc = ble_store_config_write_cccd(&val->cccd);
        return rc;

    default:
        return BLE_HS_ENOTSUP;
   28c02:	2008      	movs	r0, #8
   28c04:	e002      	b.n	28c0c <ble_store_config_write+0x18>
        rc = ble_store_config_write_peer_sec(&val->sec);
   28c06:	4608      	mov	r0, r1
   28c08:	f7ff ff76 	bl	28af8 <ble_store_config_write_peer_sec>
    }
}
   28c0c:	bd08      	pop	{r3, pc}
        rc = ble_store_config_write_our_sec(&val->sec);
   28c0e:	4608      	mov	r0, r1
   28c10:	f7ff ff9e 	bl	28b50 <ble_store_config_write_our_sec>
        return rc;
   28c14:	e7fa      	b.n	28c0c <ble_store_config_write+0x18>
        rc = ble_store_config_write_cccd(&val->cccd);
   28c16:	4608      	mov	r0, r1
   28c18:	f7ff ffc6 	bl	28ba8 <ble_store_config_write_cccd>
        return rc;
   28c1c:	e7f6      	b.n	28c0c <ble_store_config_write+0x18>

00028c1e <ble_store_config_delete_obj>:
{
   28c1e:	b510      	push	{r4, lr}
    (*num_values)--;
   28c20:	681c      	ldr	r4, [r3, #0]
   28c22:	3c01      	subs	r4, #1
   28c24:	601c      	str	r4, [r3, #0]
    if (idx < *num_values) {
   28c26:	4294      	cmp	r4, r2
   28c28:	dc01      	bgt.n	28c2e <ble_store_config_delete_obj+0x10>
}
   28c2a:	2000      	movs	r0, #0
   28c2c:	bd10      	pop	{r4, pc}
        dst += idx * value_size;
   28c2e:	fb01 0002 	mla	r0, r1, r2, r0
        move_count = *num_values - idx;
   28c32:	1aa2      	subs	r2, r4, r2
        memmove(dst, src, move_count * value_size);
   28c34:	fb02 f201 	mul.w	r2, r2, r1
   28c38:	4401      	add	r1, r0
   28c3a:	f7e9 fc50 	bl	124de <memmove>
   28c3e:	e7f4      	b.n	28c2a <ble_store_config_delete_obj+0xc>

00028c40 <ble_store_config_delete_sec>:
{
   28c40:	b538      	push	{r3, r4, r5, lr}
   28c42:	460d      	mov	r5, r1
   28c44:	4614      	mov	r4, r2
    idx = ble_store_config_find_sec(key_sec, value_secs, *num_value_secs);
   28c46:	6812      	ldr	r2, [r2, #0]
   28c48:	f7ff fe24 	bl	28894 <ble_store_config_find_sec>
    if (idx == -1) {
   28c4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   28c50:	d006      	beq.n	28c60 <ble_store_config_delete_sec+0x20>
    rc = ble_store_config_delete_obj(value_secs, sizeof *value_secs, idx,
   28c52:	4623      	mov	r3, r4
   28c54:	4602      	mov	r2, r0
   28c56:	2150      	movs	r1, #80	; 0x50
   28c58:	4628      	mov	r0, r5
   28c5a:	f7ff ffe0 	bl	28c1e <ble_store_config_delete_obj>
}
   28c5e:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOENT;
   28c60:	2005      	movs	r0, #5
   28c62:	e7fc      	b.n	28c5e <ble_store_config_delete_sec+0x1e>

00028c64 <ble_store_config_delete_peer_sec>:
{
   28c64:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_peer_secs,
   28c66:	4a06      	ldr	r2, [pc, #24]	; (28c80 <ble_store_config_delete_peer_sec+0x1c>)
   28c68:	4906      	ldr	r1, [pc, #24]	; (28c84 <ble_store_config_delete_peer_sec+0x20>)
   28c6a:	f7ff ffe9 	bl	28c40 <ble_store_config_delete_sec>
    if (rc != 0) {
   28c6e:	4603      	mov	r3, r0
   28c70:	b108      	cbz	r0, 28c76 <ble_store_config_delete_peer_sec+0x12>
}
   28c72:	4618      	mov	r0, r3
   28c74:	bd08      	pop	{r3, pc}
    rc = ble_store_config_persist_peer_secs();
   28c76:	f000 f933 	bl	28ee0 <ble_store_config_persist_peer_secs>
   28c7a:	4603      	mov	r3, r0
   28c7c:	e7f9      	b.n	28c72 <ble_store_config_delete_peer_sec+0xe>
   28c7e:	bf00      	nop
   28c80:	200045b0 	.word	0x200045b0
   28c84:	200044c0 	.word	0x200044c0

00028c88 <ble_store_config_delete_our_sec>:
{
   28c88:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_our_secs,
   28c8a:	4a06      	ldr	r2, [pc, #24]	; (28ca4 <ble_store_config_delete_our_sec+0x1c>)
   28c8c:	4906      	ldr	r1, [pc, #24]	; (28ca8 <ble_store_config_delete_our_sec+0x20>)
   28c8e:	f7ff ffd7 	bl	28c40 <ble_store_config_delete_sec>
    if (rc != 0) {
   28c92:	4603      	mov	r3, r0
   28c94:	b108      	cbz	r0, 28c9a <ble_store_config_delete_our_sec+0x12>
}
   28c96:	4618      	mov	r0, r3
   28c98:	bd08      	pop	{r3, pc}
    rc = ble_store_config_persist_our_secs();
   28c9a:	f000 f913 	bl	28ec4 <ble_store_config_persist_our_secs>
   28c9e:	4603      	mov	r3, r0
   28ca0:	e7f9      	b.n	28c96 <ble_store_config_delete_our_sec+0xe>
   28ca2:	bf00      	nop
   28ca4:	20004634 	.word	0x20004634
   28ca8:	20004640 	.word	0x20004640

00028cac <ble_store_config_delete_cccd>:
{
   28cac:	b508      	push	{r3, lr}
    idx = ble_store_config_find_cccd(key_cccd);
   28cae:	f7ff fe73 	bl	28998 <ble_store_config_find_cccd>
    if (idx == -1) {
   28cb2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   28cb6:	d00d      	beq.n	28cd4 <ble_store_config_delete_cccd+0x28>
    rc = ble_store_config_delete_obj(ble_store_config_cccds,
   28cb8:	4b07      	ldr	r3, [pc, #28]	; (28cd8 <ble_store_config_delete_cccd+0x2c>)
   28cba:	4602      	mov	r2, r0
   28cbc:	2110      	movs	r1, #16
   28cbe:	4807      	ldr	r0, [pc, #28]	; (28cdc <ble_store_config_delete_cccd+0x30>)
   28cc0:	f7ff ffad 	bl	28c1e <ble_store_config_delete_obj>
    if (rc != 0) {
   28cc4:	4603      	mov	r3, r0
   28cc6:	b108      	cbz	r0, 28ccc <ble_store_config_delete_cccd+0x20>
}
   28cc8:	4618      	mov	r0, r3
   28cca:	bd08      	pop	{r3, pc}
    rc = ble_store_config_persist_cccds();
   28ccc:	f000 f916 	bl	28efc <ble_store_config_persist_cccds>
   28cd0:	4603      	mov	r3, r0
   28cd2:	e7f9      	b.n	28cc8 <ble_store_config_delete_cccd+0x1c>
        return BLE_HS_ENOENT;
   28cd4:	2305      	movs	r3, #5
   28cd6:	e7f7      	b.n	28cc8 <ble_store_config_delete_cccd+0x1c>
   28cd8:	20004638 	.word	0x20004638
   28cdc:	200045b4 	.word	0x200045b4

00028ce0 <ble_store_config_delete>:

int
ble_store_config_delete(int obj_type, const union ble_store_key *key)
{
   28ce0:	b508      	push	{r3, lr}
    int rc;

    switch (obj_type) {
   28ce2:	2802      	cmp	r0, #2
   28ce4:	d005      	beq.n	28cf2 <ble_store_config_delete+0x12>
   28ce6:	2803      	cmp	r0, #3
   28ce8:	d00b      	beq.n	28d02 <ble_store_config_delete+0x22>
   28cea:	2801      	cmp	r0, #1
   28cec:	d005      	beq.n	28cfa <ble_store_config_delete+0x1a>
    case BLE_STORE_OBJ_TYPE_CCCD:
        rc = ble_store_config_delete_cccd(&key->cccd);
        return rc;

    default:
        return BLE_HS_ENOTSUP;
   28cee:	2008      	movs	r0, #8
   28cf0:	e002      	b.n	28cf8 <ble_store_config_delete+0x18>
        rc = ble_store_config_delete_peer_sec(&key->sec);
   28cf2:	4608      	mov	r0, r1
   28cf4:	f7ff ffb6 	bl	28c64 <ble_store_config_delete_peer_sec>
    }
}
   28cf8:	bd08      	pop	{r3, pc}
        rc = ble_store_config_delete_our_sec(&key->sec);
   28cfa:	4608      	mov	r0, r1
   28cfc:	f7ff ffc4 	bl	28c88 <ble_store_config_delete_our_sec>
        return rc;
   28d00:	e7fa      	b.n	28cf8 <ble_store_config_delete+0x18>
        rc = ble_store_config_delete_cccd(&key->cccd);
   28d02:	4608      	mov	r0, r1
   28d04:	f7ff ffd2 	bl	28cac <ble_store_config_delete_cccd>
        return rc;
   28d08:	e7f6      	b.n	28cf8 <ble_store_config_delete+0x18>
	...

00028d0c <ble_store_config_init>:

void
ble_store_config_init(void)
{
   28d0c:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   28d0e:	4b0c      	ldr	r3, [pc, #48]	; (28d40 <ble_store_config_init+0x34>)
   28d10:	781b      	ldrb	r3, [r3, #0]
   28d12:	b183      	cbz	r3, 28d36 <ble_store_config_init+0x2a>

    ble_hs_cfg.store_read_cb = ble_store_config_read;
   28d14:	4b0b      	ldr	r3, [pc, #44]	; (28d44 <ble_store_config_init+0x38>)
   28d16:	4a0c      	ldr	r2, [pc, #48]	; (28d48 <ble_store_config_init+0x3c>)
   28d18:	615a      	str	r2, [r3, #20]
    ble_hs_cfg.store_write_cb = ble_store_config_write;
   28d1a:	4a0c      	ldr	r2, [pc, #48]	; (28d4c <ble_store_config_init+0x40>)
   28d1c:	619a      	str	r2, [r3, #24]
    ble_hs_cfg.store_delete_cb = ble_store_config_delete;
   28d1e:	4a0c      	ldr	r2, [pc, #48]	; (28d50 <ble_store_config_init+0x44>)
   28d20:	61da      	str	r2, [r3, #28]

    /* Re-initialize BSS values in case of unit tests. */
    ble_store_config_num_our_secs = 0;
   28d22:	2300      	movs	r3, #0
   28d24:	4a0b      	ldr	r2, [pc, #44]	; (28d54 <ble_store_config_init+0x48>)
   28d26:	6013      	str	r3, [r2, #0]
    ble_store_config_num_peer_secs = 0;
   28d28:	4a0b      	ldr	r2, [pc, #44]	; (28d58 <ble_store_config_init+0x4c>)
   28d2a:	6013      	str	r3, [r2, #0]
    ble_store_config_num_cccds = 0;
   28d2c:	4a0b      	ldr	r2, [pc, #44]	; (28d5c <ble_store_config_init+0x50>)
   28d2e:	6013      	str	r3, [r2, #0]

    ble_store_config_conf_init();
   28d30:	f000 f902 	bl	28f38 <ble_store_config_conf_init>
}
   28d34:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   28d36:	461a      	mov	r2, r3
   28d38:	4619      	mov	r1, r3
   28d3a:	4618      	mov	r0, r3
   28d3c:	f7e7 fc4e 	bl	105dc <__assert_func>
   28d40:	20003bf0 	.word	0x20003bf0
   28d44:	200001dc 	.word	0x200001dc
   28d48:	00028a73 	.word	0x00028a73
   28d4c:	00028bf5 	.word	0x00028bf5
   28d50:	00028ce1 	.word	0x00028ce1
   28d54:	20004634 	.word	0x20004634
   28d58:	200045b0 	.word	0x200045b0
   28d5c:	20004638 	.word	0x20004638

00028d60 <ble_store_config_serialize_arr>:
    (MYNEWT_VAL(BLE_STORE_MAX_CCCDS) * BLE_STORE_CONFIG_CCCD_ENCODE_SZ + 1)

static void
ble_store_config_serialize_arr(const void *arr, int obj_sz, int num_objs,
                               char *out_buf, int buf_sz)
{
   28d60:	b510      	push	{r4, lr}
   28d62:	461c      	mov	r4, r3
    int arr_size;

    arr_size = obj_sz * num_objs;
   28d64:	fb02 f101 	mul.w	r1, r2, r1
    assert(arr_size <= buf_sz);
   28d68:	9b02      	ldr	r3, [sp, #8]
   28d6a:	4299      	cmp	r1, r3
   28d6c:	dc04      	bgt.n	28d78 <ble_store_config_serialize_arr+0x18>

    base64_encode(arr, arr_size, out_buf, 1);
   28d6e:	2301      	movs	r3, #1
   28d70:	4622      	mov	r2, r4
   28d72:	f000 fc91 	bl	29698 <base64_encode>
}
   28d76:	bd10      	pop	{r4, pc}
    assert(arr_size <= buf_sz);
   28d78:	2300      	movs	r3, #0
   28d7a:	461a      	mov	r2, r3
   28d7c:	4619      	mov	r1, r3
   28d7e:	4618      	mov	r0, r3
   28d80:	f7e7 fc2c 	bl	105dc <__assert_func>

00028d84 <ble_store_config_persist_sec_set>:

static int
ble_store_config_persist_sec_set(const char *setting_name,
                                 const struct ble_store_value_sec *secs,
                                 int num_secs)
{
   28d84:	b510      	push	{r4, lr}
   28d86:	b0d4      	sub	sp, #336	; 0x150
   28d88:	4604      	mov	r4, r0
   28d8a:	4608      	mov	r0, r1
    char buf[BLE_STORE_CONFIG_SEC_SET_ENCODE_SZ];
    int rc;

    ble_store_config_serialize_arr(secs, sizeof *secs, num_secs,
   28d8c:	f240 1345 	movw	r3, #325	; 0x145
   28d90:	9300      	str	r3, [sp, #0]
   28d92:	ab02      	add	r3, sp, #8
   28d94:	2150      	movs	r1, #80	; 0x50
   28d96:	f7ff ffe3 	bl	28d60 <ble_store_config_serialize_arr>
                                   buf, sizeof buf);
    rc = conf_save_one(setting_name, buf);
   28d9a:	a902      	add	r1, sp, #8
   28d9c:	4620      	mov	r0, r4
   28d9e:	f000 fa05 	bl	291ac <conf_save_one>
    if (rc != 0) {
   28da2:	4603      	mov	r3, r0
   28da4:	b910      	cbnz	r0, 28dac <ble_store_config_persist_sec_set+0x28>
        return BLE_HS_ESTORE_FAIL;
    }

    return 0;
}
   28da6:	4618      	mov	r0, r3
   28da8:	b054      	add	sp, #336	; 0x150
   28daa:	bd10      	pop	{r4, pc}
        return BLE_HS_ESTORE_FAIL;
   28dac:	231c      	movs	r3, #28
   28dae:	e7fa      	b.n	28da6 <ble_store_config_persist_sec_set+0x22>

00028db0 <ble_store_config_conf_export>:
{
   28db0:	b530      	push	{r4, r5, lr}
   28db2:	b0d5      	sub	sp, #340	; 0x154
   28db4:	4604      	mov	r4, r0
    ble_store_config_serialize_arr(ble_store_config_our_secs,
   28db6:	4b13      	ldr	r3, [pc, #76]	; (28e04 <ble_store_config_conf_export+0x54>)
   28db8:	681a      	ldr	r2, [r3, #0]
   28dba:	f240 1545 	movw	r5, #325	; 0x145
   28dbe:	9500      	str	r5, [sp, #0]
   28dc0:	ab02      	add	r3, sp, #8
   28dc2:	2150      	movs	r1, #80	; 0x50
   28dc4:	4810      	ldr	r0, [pc, #64]	; (28e08 <ble_store_config_conf_export+0x58>)
   28dc6:	f7ff ffcb 	bl	28d60 <ble_store_config_serialize_arr>
    func("ble_hs/our_sec", buf.sec);
   28dca:	a902      	add	r1, sp, #8
   28dcc:	480f      	ldr	r0, [pc, #60]	; (28e0c <ble_store_config_conf_export+0x5c>)
   28dce:	47a0      	blx	r4
    ble_store_config_serialize_arr(ble_store_config_peer_secs,
   28dd0:	4b0f      	ldr	r3, [pc, #60]	; (28e10 <ble_store_config_conf_export+0x60>)
   28dd2:	681a      	ldr	r2, [r3, #0]
   28dd4:	9500      	str	r5, [sp, #0]
   28dd6:	ab02      	add	r3, sp, #8
   28dd8:	2150      	movs	r1, #80	; 0x50
   28dda:	480e      	ldr	r0, [pc, #56]	; (28e14 <ble_store_config_conf_export+0x64>)
   28ddc:	f7ff ffc0 	bl	28d60 <ble_store_config_serialize_arr>
    func("ble_hs/peer_sec", buf.sec);
   28de0:	a902      	add	r1, sp, #8
   28de2:	480d      	ldr	r0, [pc, #52]	; (28e18 <ble_store_config_conf_export+0x68>)
   28de4:	47a0      	blx	r4
    ble_store_config_serialize_arr(ble_store_config_cccds,
   28de6:	4b0d      	ldr	r3, [pc, #52]	; (28e1c <ble_store_config_conf_export+0x6c>)
   28de8:	681a      	ldr	r2, [r3, #0]
   28dea:	23c1      	movs	r3, #193	; 0xc1
   28dec:	9300      	str	r3, [sp, #0]
   28dee:	ab02      	add	r3, sp, #8
   28df0:	2110      	movs	r1, #16
   28df2:	480b      	ldr	r0, [pc, #44]	; (28e20 <ble_store_config_conf_export+0x70>)
   28df4:	f7ff ffb4 	bl	28d60 <ble_store_config_serialize_arr>
    func("ble_hs/cccd", buf.cccd);
   28df8:	a902      	add	r1, sp, #8
   28dfa:	480a      	ldr	r0, [pc, #40]	; (28e24 <ble_store_config_conf_export+0x74>)
   28dfc:	47a0      	blx	r4
}
   28dfe:	2000      	movs	r0, #0
   28e00:	b055      	add	sp, #340	; 0x154
   28e02:	bd30      	pop	{r4, r5, pc}
   28e04:	20004634 	.word	0x20004634
   28e08:	20004640 	.word	0x20004640
   28e0c:	0002c9dc 	.word	0x0002c9dc
   28e10:	200045b0 	.word	0x200045b0
   28e14:	200044c0 	.word	0x200044c0
   28e18:	0002c9ec 	.word	0x0002c9ec
   28e1c:	20004638 	.word	0x20004638
   28e20:	200045b4 	.word	0x200045b4
   28e24:	0002c9fc 	.word	0x0002c9fc

00028e28 <ble_store_config_deserialize_arr>:
{
   28e28:	b538      	push	{r3, r4, r5, lr}
   28e2a:	4615      	mov	r5, r2
   28e2c:	461c      	mov	r4, r3
    len = base64_decode(enc, out_arr);
   28e2e:	f000 fc79 	bl	29724 <base64_decode>
    if (len < 0) {
   28e32:	2800      	cmp	r0, #0
   28e34:	db04      	blt.n	28e40 <ble_store_config_deserialize_arr+0x18>
    *out_num_objs = len / obj_sz;
   28e36:	fb90 f0f5 	sdiv	r0, r0, r5
   28e3a:	6020      	str	r0, [r4, #0]
    return 0;
   28e3c:	2000      	movs	r0, #0
}
   28e3e:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   28e40:	2002      	movs	r0, #2
   28e42:	e7fc      	b.n	28e3e <ble_store_config_deserialize_arr+0x16>

00028e44 <ble_store_config_conf_set>:
    if (argc == 1) {
   28e44:	2801      	cmp	r0, #1
   28e46:	d126      	bne.n	28e96 <ble_store_config_conf_set+0x52>
{
   28e48:	b538      	push	{r3, r4, r5, lr}
   28e4a:	4614      	mov	r4, r2
        if (strcmp(argv[0], "our_sec") == 0) {
   28e4c:	680d      	ldr	r5, [r1, #0]
   28e4e:	4914      	ldr	r1, [pc, #80]	; (28ea0 <ble_store_config_conf_set+0x5c>)
   28e50:	4628      	mov	r0, r5
   28e52:	f7e9 fb97 	bl	12584 <strcmp>
   28e56:	b180      	cbz	r0, 28e7a <ble_store_config_conf_set+0x36>
        } else if (strcmp(argv[0], "peer_sec") == 0) {
   28e58:	4912      	ldr	r1, [pc, #72]	; (28ea4 <ble_store_config_conf_set+0x60>)
   28e5a:	4628      	mov	r0, r5
   28e5c:	f7e9 fb92 	bl	12584 <strcmp>
   28e60:	b190      	cbz	r0, 28e88 <ble_store_config_conf_set+0x44>
        } else if (strcmp(argv[0], "cccd") == 0) {
   28e62:	4911      	ldr	r1, [pc, #68]	; (28ea8 <ble_store_config_conf_set+0x64>)
   28e64:	4628      	mov	r0, r5
   28e66:	f7e9 fb8d 	bl	12584 <strcmp>
   28e6a:	b9b0      	cbnz	r0, 28e9a <ble_store_config_conf_set+0x56>
            rc = ble_store_config_deserialize_arr(
   28e6c:	4b0f      	ldr	r3, [pc, #60]	; (28eac <ble_store_config_conf_set+0x68>)
   28e6e:	2210      	movs	r2, #16
   28e70:	490f      	ldr	r1, [pc, #60]	; (28eb0 <ble_store_config_conf_set+0x6c>)
   28e72:	4620      	mov	r0, r4
   28e74:	f7ff ffd8 	bl	28e28 <ble_store_config_deserialize_arr>
            return rc;
   28e78:	e005      	b.n	28e86 <ble_store_config_conf_set+0x42>
            rc = ble_store_config_deserialize_arr(
   28e7a:	4b0e      	ldr	r3, [pc, #56]	; (28eb4 <ble_store_config_conf_set+0x70>)
   28e7c:	2250      	movs	r2, #80	; 0x50
   28e7e:	490e      	ldr	r1, [pc, #56]	; (28eb8 <ble_store_config_conf_set+0x74>)
   28e80:	4620      	mov	r0, r4
   28e82:	f7ff ffd1 	bl	28e28 <ble_store_config_deserialize_arr>
}
   28e86:	bd38      	pop	{r3, r4, r5, pc}
            rc = ble_store_config_deserialize_arr(
   28e88:	4b0c      	ldr	r3, [pc, #48]	; (28ebc <ble_store_config_conf_set+0x78>)
   28e8a:	2250      	movs	r2, #80	; 0x50
   28e8c:	490c      	ldr	r1, [pc, #48]	; (28ec0 <ble_store_config_conf_set+0x7c>)
   28e8e:	4620      	mov	r0, r4
   28e90:	f7ff ffca 	bl	28e28 <ble_store_config_deserialize_arr>
            return rc;
   28e94:	e7f7      	b.n	28e86 <ble_store_config_conf_set+0x42>
    return OS_ENOENT;
   28e96:	200a      	movs	r0, #10
}
   28e98:	4770      	bx	lr
    return OS_ENOENT;
   28e9a:	200a      	movs	r0, #10
   28e9c:	e7f3      	b.n	28e86 <ble_store_config_conf_set+0x42>
   28e9e:	bf00      	nop
   28ea0:	0002ca08 	.word	0x0002ca08
   28ea4:	0002ca10 	.word	0x0002ca10
   28ea8:	0002ca1c 	.word	0x0002ca1c
   28eac:	20004638 	.word	0x20004638
   28eb0:	200045b4 	.word	0x200045b4
   28eb4:	20004634 	.word	0x20004634
   28eb8:	20004640 	.word	0x20004640
   28ebc:	200045b0 	.word	0x200045b0
   28ec0:	200044c0 	.word	0x200044c0

00028ec4 <ble_store_config_persist_our_secs>:

int
ble_store_config_persist_our_secs(void)
{
   28ec4:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_config_persist_sec_set("ble_hs/our_sec",
   28ec6:	4b03      	ldr	r3, [pc, #12]	; (28ed4 <ble_store_config_persist_our_secs+0x10>)
   28ec8:	681a      	ldr	r2, [r3, #0]
   28eca:	4903      	ldr	r1, [pc, #12]	; (28ed8 <ble_store_config_persist_our_secs+0x14>)
   28ecc:	4803      	ldr	r0, [pc, #12]	; (28edc <ble_store_config_persist_our_secs+0x18>)
   28ece:	f7ff ff59 	bl	28d84 <ble_store_config_persist_sec_set>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   28ed2:	bd08      	pop	{r3, pc}
   28ed4:	20004634 	.word	0x20004634
   28ed8:	20004640 	.word	0x20004640
   28edc:	0002c9dc 	.word	0x0002c9dc

00028ee0 <ble_store_config_persist_peer_secs>:

int
ble_store_config_persist_peer_secs(void)
{
   28ee0:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_config_persist_sec_set("ble_hs/peer_sec",
   28ee2:	4b03      	ldr	r3, [pc, #12]	; (28ef0 <ble_store_config_persist_peer_secs+0x10>)
   28ee4:	681a      	ldr	r2, [r3, #0]
   28ee6:	4903      	ldr	r1, [pc, #12]	; (28ef4 <ble_store_config_persist_peer_secs+0x14>)
   28ee8:	4803      	ldr	r0, [pc, #12]	; (28ef8 <ble_store_config_persist_peer_secs+0x18>)
   28eea:	f7ff ff4b 	bl	28d84 <ble_store_config_persist_sec_set>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   28eee:	bd08      	pop	{r3, pc}
   28ef0:	200045b0 	.word	0x200045b0
   28ef4:	200044c0 	.word	0x200044c0
   28ef8:	0002c9ec 	.word	0x0002c9ec

00028efc <ble_store_config_persist_cccds>:

int
ble_store_config_persist_cccds(void)
{
   28efc:	b500      	push	{lr}
   28efe:	b0b5      	sub	sp, #212	; 0xd4
    char buf[BLE_STORE_CONFIG_CCCD_SET_ENCODE_SZ];
    int rc;

    ble_store_config_serialize_arr(ble_store_config_cccds,
   28f00:	4b0a      	ldr	r3, [pc, #40]	; (28f2c <ble_store_config_persist_cccds+0x30>)
   28f02:	681a      	ldr	r2, [r3, #0]
   28f04:	23c1      	movs	r3, #193	; 0xc1
   28f06:	9300      	str	r3, [sp, #0]
   28f08:	ab03      	add	r3, sp, #12
   28f0a:	2110      	movs	r1, #16
   28f0c:	4808      	ldr	r0, [pc, #32]	; (28f30 <ble_store_config_persist_cccds+0x34>)
   28f0e:	f7ff ff27 	bl	28d60 <ble_store_config_serialize_arr>
                                   sizeof *ble_store_config_cccds,
                                   ble_store_config_num_cccds,
                                   buf,
                                   sizeof buf);
    rc = conf_save_one("ble_hs/cccd", buf);
   28f12:	a903      	add	r1, sp, #12
   28f14:	4807      	ldr	r0, [pc, #28]	; (28f34 <ble_store_config_persist_cccds+0x38>)
   28f16:	f000 f949 	bl	291ac <conf_save_one>
    if (rc != 0) {
   28f1a:	4603      	mov	r3, r0
   28f1c:	b918      	cbnz	r0, 28f26 <ble_store_config_persist_cccds+0x2a>
        return BLE_HS_ESTORE_FAIL;
    }

    return 0;
}
   28f1e:	4618      	mov	r0, r3
   28f20:	b035      	add	sp, #212	; 0xd4
   28f22:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_ESTORE_FAIL;
   28f26:	231c      	movs	r3, #28
   28f28:	e7f9      	b.n	28f1e <ble_store_config_persist_cccds+0x22>
   28f2a:	bf00      	nop
   28f2c:	20004638 	.word	0x20004638
   28f30:	200045b4 	.word	0x200045b4
   28f34:	0002c9fc 	.word	0x0002c9fc

00028f38 <ble_store_config_conf_init>:

void
ble_store_config_conf_init(void)
{
   28f38:	b510      	push	{r4, lr}
   28f3a:	b082      	sub	sp, #8
    int rc;

    rc = conf_register(&ble_store_config_conf_handler);
   28f3c:	4806      	ldr	r0, [pc, #24]	; (28f58 <ble_store_config_conf_init+0x20>)
   28f3e:	f000 f83b 	bl	28fb8 <conf_register>
    SYSINIT_PANIC_ASSERT_MSG(rc == 0,
   28f42:	b138      	cbz	r0, 28f54 <ble_store_config_conf_init+0x1c>
   28f44:	2000      	movs	r0, #0
   28f46:	9000      	str	r0, [sp, #0]
   28f48:	4b04      	ldr	r3, [pc, #16]	; (28f5c <ble_store_config_conf_init+0x24>)
   28f4a:	681c      	ldr	r4, [r3, #0]
   28f4c:	4603      	mov	r3, r0
   28f4e:	4602      	mov	r2, r0
   28f50:	4601      	mov	r1, r0
   28f52:	47a0      	blx	r4
                             "Failed to register ble_store_config conf");
}
   28f54:	b002      	add	sp, #8
   28f56:	bd10      	pop	{r4, pc}
   28f58:	20000204 	.word	0x20000204
   28f5c:	20000180 	.word	0x20000180

00028f60 <conf_ev_fn_load>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
conf_ev_fn_load(struct os_event *ev)
{
   28f60:	b508      	push	{r3, lr}
    conf_ensure_loaded();
   28f62:	f000 f917 	bl	29194 <conf_ensure_loaded>
}
   28f66:	bd08      	pop	{r3, pc}

00028f68 <conf_init>:
{
   28f68:	b508      	push	{r3, lr}
    os_mutex_init(&conf_mtx);
   28f6a:	4807      	ldr	r0, [pc, #28]	; (28f88 <conf_init+0x20>)
   28f6c:	f7e8 fcfa 	bl	11964 <os_mutex_init>
    SLIST_INIT(&conf_handlers);
   28f70:	4b06      	ldr	r3, [pc, #24]	; (28f8c <conf_init+0x24>)
   28f72:	2200      	movs	r2, #0
   28f74:	601a      	str	r2, [r3, #0]
    conf_store_init();
   28f76:	f000 f94d 	bl	29214 <conf_store_init>
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
   28f7a:	f7e7 ff2d 	bl	10dd8 <os_eventq_dflt_get>
   28f7e:	4904      	ldr	r1, [pc, #16]	; (28f90 <conf_init+0x28>)
   28f80:	f7e7 fe8d 	bl	10c9e <os_eventq_put>
}
   28f84:	bd08      	pop	{r3, pc}
   28f86:	bf00      	nop
   28f88:	20003ab8 	.word	0x20003ab8
   28f8c:	20004730 	.word	0x20004730
   28f90:	2000021c 	.word	0x2000021c

00028f94 <conf_lock>:
{
   28f94:	b508      	push	{r3, lr}
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
   28f96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28f9a:	4802      	ldr	r0, [pc, #8]	; (28fa4 <conf_lock+0x10>)
   28f9c:	f7e8 fd48 	bl	11a30 <os_mutex_pend>
}
   28fa0:	bd08      	pop	{r3, pc}
   28fa2:	bf00      	nop
   28fa4:	20003ab8 	.word	0x20003ab8

00028fa8 <conf_unlock>:
{
   28fa8:	b508      	push	{r3, lr}
    os_mutex_release(&conf_mtx);
   28faa:	4802      	ldr	r0, [pc, #8]	; (28fb4 <conf_unlock+0xc>)
   28fac:	f7e8 fce4 	bl	11978 <os_mutex_release>
}
   28fb0:	bd08      	pop	{r3, pc}
   28fb2:	bf00      	nop
   28fb4:	20003ab8 	.word	0x20003ab8

00028fb8 <conf_register>:
{
   28fb8:	b510      	push	{r4, lr}
   28fba:	4604      	mov	r4, r0
    conf_lock();
   28fbc:	f7ff ffea 	bl	28f94 <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
   28fc0:	4b03      	ldr	r3, [pc, #12]	; (28fd0 <conf_register+0x18>)
   28fc2:	681a      	ldr	r2, [r3, #0]
   28fc4:	6022      	str	r2, [r4, #0]
   28fc6:	601c      	str	r4, [r3, #0]
    conf_unlock();
   28fc8:	f7ff ffee 	bl	28fa8 <conf_unlock>
}
   28fcc:	2000      	movs	r0, #0
   28fce:	bd10      	pop	{r4, pc}
   28fd0:	20004730 	.word	0x20004730

00028fd4 <conf_handler_lookup>:
/*
 * Find conf_handler based on name.
 */
struct conf_handler *
conf_handler_lookup(char *name)
{
   28fd4:	b538      	push	{r3, r4, r5, lr}
   28fd6:	4605      	mov	r5, r0
    struct conf_handler *ch;

    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   28fd8:	4b05      	ldr	r3, [pc, #20]	; (28ff0 <conf_handler_lookup+0x1c>)
   28fda:	681c      	ldr	r4, [r3, #0]
   28fdc:	b134      	cbz	r4, 28fec <conf_handler_lookup+0x18>
        if (!strcmp(name, ch->ch_name)) {
   28fde:	6861      	ldr	r1, [r4, #4]
   28fe0:	4628      	mov	r0, r5
   28fe2:	f7e9 facf 	bl	12584 <strcmp>
   28fe6:	b108      	cbz	r0, 28fec <conf_handler_lookup+0x18>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   28fe8:	6824      	ldr	r4, [r4, #0]
   28fea:	e7f7      	b.n	28fdc <conf_handler_lookup+0x8>
            return ch;
        }
    }
    return NULL;
}
   28fec:	4620      	mov	r0, r4
   28fee:	bd38      	pop	{r3, r4, r5, pc}
   28ff0:	20004730 	.word	0x20004730

00028ff4 <conf_parse_name>:
/*
 * Separate string into argv array.
 */
int
conf_parse_name(char *name, int *name_argc, char *name_argv[])
{
   28ff4:	b570      	push	{r4, r5, r6, lr}
   28ff6:	b082      	sub	sp, #8
   28ff8:	460e      	mov	r6, r1
   28ffa:	4615      	mov	r5, r2
    char *tok;
    char *tok_ptr;
    char *sep = CONF_NAME_SEPARATOR;
    int i;

    tok = strtok_r(name, sep, &tok_ptr);
   28ffc:	aa01      	add	r2, sp, #4
   28ffe:	4909      	ldr	r1, [pc, #36]	; (29024 <conf_parse_name+0x30>)
   29000:	f000 fc4e 	bl	298a0 <strtok_r>

    i = 0;
   29004:	2300      	movs	r3, #0
    while (tok) {
   29006:	e008      	b.n	2901a <conf_parse_name+0x26>
        name_argv[i++] = tok;
   29008:	1c5c      	adds	r4, r3, #1
   2900a:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
   2900e:	aa01      	add	r2, sp, #4
   29010:	4904      	ldr	r1, [pc, #16]	; (29024 <conf_parse_name+0x30>)
   29012:	2000      	movs	r0, #0
   29014:	f000 fc44 	bl	298a0 <strtok_r>
        name_argv[i++] = tok;
   29018:	4623      	mov	r3, r4
    while (tok) {
   2901a:	2800      	cmp	r0, #0
   2901c:	d1f4      	bne.n	29008 <conf_parse_name+0x14>
    }
    *name_argc = i;
   2901e:	6033      	str	r3, [r6, #0]

    return 0;
}
   29020:	b002      	add	sp, #8
   29022:	bd70      	pop	{r4, r5, r6, pc}
   29024:	0002ca2c 	.word	0x0002ca2c

00029028 <conf_parse_and_lookup>:

struct conf_handler *
conf_parse_and_lookup(char *name, int *name_argc, char *name_argv[])
{
   29028:	b510      	push	{r4, lr}
   2902a:	4614      	mov	r4, r2
    int rc;

    rc = conf_parse_name(name, name_argc, name_argv);
   2902c:	f7ff ffe2 	bl	28ff4 <conf_parse_name>
    if (rc) {
   29030:	b918      	cbnz	r0, 2903a <conf_parse_and_lookup+0x12>
        return NULL;
    }
    return conf_handler_lookup(name_argv[0]);
   29032:	6820      	ldr	r0, [r4, #0]
   29034:	f7ff ffce 	bl	28fd4 <conf_handler_lookup>
}
   29038:	bd10      	pop	{r4, pc}
        return NULL;
   2903a:	2000      	movs	r0, #0
   2903c:	e7fc      	b.n	29038 <conf_parse_and_lookup+0x10>

0002903e <conf_set_value>:
    return buf;
}

int
conf_set_value(char *name, char *val_str)
{
   2903e:	b530      	push	{r4, r5, lr}
   29040:	b08b      	sub	sp, #44	; 0x2c
   29042:	4604      	mov	r4, r0
   29044:	460d      	mov	r5, r1
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
   29046:	f7ff ffa5 	bl	28f94 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   2904a:	aa01      	add	r2, sp, #4
   2904c:	a909      	add	r1, sp, #36	; 0x24
   2904e:	4620      	mov	r0, r4
   29050:	f7ff ffea 	bl	29028 <conf_parse_and_lookup>
    if (!ch) {
   29054:	b158      	cbz	r0, 2906e <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }
    rc = ch->ch_set(name_argc - 1, &name_argv[1], val_str);
   29056:	68c3      	ldr	r3, [r0, #12]
   29058:	462a      	mov	r2, r5
   2905a:	a902      	add	r1, sp, #8
   2905c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2905e:	3801      	subs	r0, #1
   29060:	4798      	blx	r3
   29062:	4604      	mov	r4, r0
out:
    conf_unlock();
   29064:	f7ff ffa0 	bl	28fa8 <conf_unlock>
    return rc;
}
   29068:	4620      	mov	r0, r4
   2906a:	b00b      	add	sp, #44	; 0x2c
   2906c:	bd30      	pop	{r4, r5, pc}
        rc = OS_INVALID_PARM;
   2906e:	2403      	movs	r4, #3
   29070:	e7f8      	b.n	29064 <conf_set_value+0x26>
	...

00029074 <conf_commit>:
    return rval;
}

int
conf_commit(char *name)
{
   29074:	b530      	push	{r4, r5, lr}
   29076:	b08b      	sub	sp, #44	; 0x2c
   29078:	4604      	mov	r4, r0
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   2907a:	f7ff ff8b 	bl	28f94 <conf_lock>
    if (name) {
   2907e:	b174      	cbz	r4, 2909e <conf_commit+0x2a>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   29080:	aa01      	add	r2, sp, #4
   29082:	a909      	add	r1, sp, #36	; 0x24
   29084:	4620      	mov	r0, r4
   29086:	f7ff ffcf 	bl	29028 <conf_parse_and_lookup>
        if (!ch) {
   2908a:	b1b8      	cbz	r0, 290bc <conf_commit+0x48>
            rc = OS_INVALID_PARM;
            goto out;
        }
        if (ch->ch_commit) {
   2908c:	6903      	ldr	r3, [r0, #16]
   2908e:	b1bb      	cbz	r3, 290c0 <conf_commit+0x4c>
            rc = ch->ch_commit();
   29090:	4798      	blx	r3
   29092:	4605      	mov	r5, r0
                }
            }
        }
    }
out:
    conf_unlock();
   29094:	f7ff ff88 	bl	28fa8 <conf_unlock>
    return rc;
}
   29098:	4628      	mov	r0, r5
   2909a:	b00b      	add	sp, #44	; 0x2c
   2909c:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   2909e:	4b09      	ldr	r3, [pc, #36]	; (290c4 <conf_commit+0x50>)
   290a0:	681c      	ldr	r4, [r3, #0]
        rc = 0;
   290a2:	2500      	movs	r5, #0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   290a4:	e000      	b.n	290a8 <conf_commit+0x34>
   290a6:	6824      	ldr	r4, [r4, #0]
   290a8:	2c00      	cmp	r4, #0
   290aa:	d0f3      	beq.n	29094 <conf_commit+0x20>
            if (ch->ch_commit) {
   290ac:	6923      	ldr	r3, [r4, #16]
   290ae:	2b00      	cmp	r3, #0
   290b0:	d0f9      	beq.n	290a6 <conf_commit+0x32>
                rc2 = ch->ch_commit();
   290b2:	4798      	blx	r3
                if (!rc) {
   290b4:	2d00      	cmp	r5, #0
   290b6:	d1f6      	bne.n	290a6 <conf_commit+0x32>
                    rc = rc2;
   290b8:	4605      	mov	r5, r0
   290ba:	e7f4      	b.n	290a6 <conf_commit+0x32>
            rc = OS_INVALID_PARM;
   290bc:	2503      	movs	r5, #3
   290be:	e7e9      	b.n	29094 <conf_commit+0x20>
            rc = 0;
   290c0:	2500      	movs	r5, #0
   290c2:	e7e7      	b.n	29094 <conf_commit+0x20>
   290c4:	20004730 	.word	0x20004730

000290c8 <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
   290c8:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   290ca:	4b05      	ldr	r3, [pc, #20]	; (290e0 <config_pkg_init+0x18>)
   290cc:	781b      	ldrb	r3, [r3, #0]
   290ce:	b113      	cbz	r3, 290d6 <config_pkg_init+0xe>

    conf_init();
   290d0:	f7ff ff4a 	bl	28f68 <conf_init>
    config_init_fs();
#elif MYNEWT_VAL(CONFIG_FCB)
    config_init_fcb();
#endif
#endif
}
   290d4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   290d6:	461a      	mov	r2, r3
   290d8:	4619      	mov	r1, r3
   290da:	4618      	mov	r0, r3
   290dc:	f7e7 fa7e 	bl	105dc <__assert_func>
   290e0:	20003bf0 	.word	0x20003bf0

000290e4 <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
   290e4:	4770      	bx	lr

000290e6 <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
   290e6:	b538      	push	{r3, r4, r5, lr}
   290e8:	460d      	mov	r5, r1
   290ea:	4614      	mov	r4, r2
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
   290ec:	6811      	ldr	r1, [r2, #0]
   290ee:	f7e9 fa49 	bl	12584 <strcmp>
   290f2:	b940      	cbnz	r0, 29106 <conf_dup_check_cb+0x20>
        return;
    }
    if (!val) {
   290f4:	b145      	cbz	r5, 29108 <conf_dup_check_cb+0x22>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    } else {
        if (cdca->val && !strcmp(val, cdca->val)) {
   290f6:	6861      	ldr	r1, [r4, #4]
   290f8:	b119      	cbz	r1, 29102 <conf_dup_check_cb+0x1c>
   290fa:	4628      	mov	r0, r5
   290fc:	f7e9 fa42 	bl	12584 <strcmp>
   29100:	b160      	cbz	r0, 2911c <conf_dup_check_cb+0x36>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
   29102:	2300      	movs	r3, #0
   29104:	60a3      	str	r3, [r4, #8]
        }
    }
}
   29106:	bd38      	pop	{r3, r4, r5, pc}
        if (!cdca->val || cdca->val[0] == '\0') {
   29108:	6863      	ldr	r3, [r4, #4]
   2910a:	b10b      	cbz	r3, 29110 <conf_dup_check_cb+0x2a>
   2910c:	781b      	ldrb	r3, [r3, #0]
   2910e:	b913      	cbnz	r3, 29116 <conf_dup_check_cb+0x30>
            cdca->is_dup = 1;
   29110:	2301      	movs	r3, #1
   29112:	60a3      	str	r3, [r4, #8]
   29114:	e7f7      	b.n	29106 <conf_dup_check_cb+0x20>
            cdca->is_dup = 0;
   29116:	2300      	movs	r3, #0
   29118:	60a3      	str	r3, [r4, #8]
   2911a:	e7f4      	b.n	29106 <conf_dup_check_cb+0x20>
            cdca->is_dup = 1;
   2911c:	2301      	movs	r3, #1
   2911e:	60a3      	str	r3, [r4, #8]
   29120:	e7f1      	b.n	29106 <conf_dup_check_cb+0x20>

00029122 <conf_load_cb>:
{
   29122:	b538      	push	{r3, r4, r5, lr}
   29124:	4604      	mov	r4, r0
   29126:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
   29128:	b122      	cbz	r2, 29134 <conf_load_cb+0x12>
   2912a:	4610      	mov	r0, r2
   2912c:	4621      	mov	r1, r4
   2912e:	f7e9 fa29 	bl	12584 <strcmp>
   29132:	b918      	cbnz	r0, 2913c <conf_load_cb+0x1a>
        conf_set_value(name, val);
   29134:	4629      	mov	r1, r5
   29136:	4620      	mov	r0, r4
   29138:	f7ff ff81 	bl	2903e <conf_set_value>
}
   2913c:	bd38      	pop	{r3, r4, r5, pc}
	...

00029140 <conf_load>:
{
   29140:	b510      	push	{r4, lr}
    conf_lock();
   29142:	f7ff ff27 	bl	28f94 <conf_lock>
    conf_loaded = true;
   29146:	2301      	movs	r3, #1
   29148:	4a0e      	ldr	r2, [pc, #56]	; (29184 <conf_load+0x44>)
   2914a:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
   2914c:	4a0e      	ldr	r2, [pc, #56]	; (29188 <conf_load+0x48>)
   2914e:	7013      	strb	r3, [r2, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   29150:	4b0e      	ldr	r3, [pc, #56]	; (2918c <conf_load+0x4c>)
   29152:	681c      	ldr	r4, [r3, #0]
   29154:	e000      	b.n	29158 <conf_load+0x18>
   29156:	6824      	ldr	r4, [r4, #0]
   29158:	b164      	cbz	r4, 29174 <conf_load+0x34>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
   2915a:	6863      	ldr	r3, [r4, #4]
   2915c:	681b      	ldr	r3, [r3, #0]
   2915e:	2200      	movs	r2, #0
   29160:	490b      	ldr	r1, [pc, #44]	; (29190 <conf_load+0x50>)
   29162:	4620      	mov	r0, r4
   29164:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
   29166:	6823      	ldr	r3, [r4, #0]
   29168:	2b00      	cmp	r3, #0
   2916a:	d0f4      	beq.n	29156 <conf_load+0x16>
            conf_commit(NULL);
   2916c:	2000      	movs	r0, #0
   2916e:	f7ff ff81 	bl	29074 <conf_commit>
   29172:	e7f0      	b.n	29156 <conf_load+0x16>
    conf_loading = false;
   29174:	4b04      	ldr	r3, [pc, #16]	; (29188 <conf_load+0x48>)
   29176:	701c      	strb	r4, [r3, #0]
    conf_unlock();
   29178:	f7ff ff16 	bl	28fa8 <conf_unlock>
    return conf_commit(NULL);
   2917c:	4620      	mov	r0, r4
   2917e:	f7ff ff79 	bl	29074 <conf_commit>
}
   29182:	bd10      	pop	{r4, pc}
   29184:	20003ac4 	.word	0x20003ac4
   29188:	20003ac5 	.word	0x20003ac5
   2918c:	20004734 	.word	0x20004734
   29190:	00029123 	.word	0x00029123

00029194 <conf_ensure_loaded>:
{
   29194:	b508      	push	{r3, lr}
    if (conf_loaded) {
   29196:	4b04      	ldr	r3, [pc, #16]	; (291a8 <conf_ensure_loaded+0x14>)
   29198:	781b      	ldrb	r3, [r3, #0]
   2919a:	b10b      	cbz	r3, 291a0 <conf_ensure_loaded+0xc>
        return 0;
   2919c:	2000      	movs	r0, #0
}
   2919e:	bd08      	pop	{r3, pc}
    return conf_load();
   291a0:	f7ff ffce 	bl	29140 <conf_load>
   291a4:	e7fb      	b.n	2919e <conf_ensure_loaded+0xa>
   291a6:	bf00      	nop
   291a8:	20003ac4 	.word	0x20003ac4

000291ac <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
   291ac:	b570      	push	{r4, r5, r6, lr}
   291ae:	b084      	sub	sp, #16
   291b0:	4605      	mov	r5, r0
   291b2:	460e      	mov	r6, r1
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
   291b4:	f7ff feee 	bl	28f94 <conf_lock>
    if (!conf_save_dst) {
   291b8:	4b13      	ldr	r3, [pc, #76]	; (29208 <conf_save_one+0x5c>)
   291ba:	681b      	ldr	r3, [r3, #0]
   291bc:	b1fb      	cbz	r3, 291fe <conf_save_one+0x52>
    }

    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
   291be:	9501      	str	r5, [sp, #4]
    cdca.val = value;
   291c0:	9602      	str	r6, [sp, #8]
    cdca.is_dup = 0;
   291c2:	2300      	movs	r3, #0
   291c4:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   291c6:	4b11      	ldr	r3, [pc, #68]	; (2920c <conf_save_one+0x60>)
   291c8:	681c      	ldr	r4, [r3, #0]
   291ca:	e006      	b.n	291da <conf_save_one+0x2e>
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
   291cc:	6863      	ldr	r3, [r4, #4]
   291ce:	681b      	ldr	r3, [r3, #0]
   291d0:	aa01      	add	r2, sp, #4
   291d2:	490f      	ldr	r1, [pc, #60]	; (29210 <conf_save_one+0x64>)
   291d4:	4620      	mov	r0, r4
   291d6:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   291d8:	6824      	ldr	r4, [r4, #0]
   291da:	2c00      	cmp	r4, #0
   291dc:	d1f6      	bne.n	291cc <conf_save_one+0x20>
    }
    if (cdca.is_dup == 1) {
   291de:	9b03      	ldr	r3, [sp, #12]
   291e0:	2b01      	cmp	r3, #1
   291e2:	d00e      	beq.n	29202 <conf_save_one+0x56>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
   291e4:	4b08      	ldr	r3, [pc, #32]	; (29208 <conf_save_one+0x5c>)
   291e6:	6818      	ldr	r0, [r3, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
   291e8:	6843      	ldr	r3, [r0, #4]
   291ea:	689b      	ldr	r3, [r3, #8]
   291ec:	4632      	mov	r2, r6
   291ee:	4629      	mov	r1, r5
   291f0:	4798      	blx	r3
   291f2:	4604      	mov	r4, r0
out:
    conf_unlock();
   291f4:	f7ff fed8 	bl	28fa8 <conf_unlock>
    return rc;
}
   291f8:	4620      	mov	r0, r4
   291fa:	b004      	add	sp, #16
   291fc:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
   291fe:	240a      	movs	r4, #10
   29200:	e7f8      	b.n	291f4 <conf_save_one+0x48>
        rc = 0;
   29202:	2400      	movs	r4, #0
   29204:	e7f6      	b.n	291f4 <conf_save_one+0x48>
   29206:	bf00      	nop
   29208:	20004738 	.word	0x20004738
   2920c:	20004734 	.word	0x20004734
   29210:	000290e7 	.word	0x000290e7

00029214 <conf_store_init>:
}

void
conf_store_init(void)
{
    conf_loaded = false;
   29214:	2300      	movs	r3, #0
   29216:	4a02      	ldr	r2, [pc, #8]	; (29220 <conf_store_init+0xc>)
   29218:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
   2921a:	4a02      	ldr	r2, [pc, #8]	; (29224 <conf_store_init+0x10>)
   2921c:	6013      	str	r3, [r2, #0]
}
   2921e:	4770      	bx	lr
   29220:	20003ac4 	.word	0x20003ac4
   29224:	20004734 	.word	0x20004734

00029228 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   29228:	b570      	push	{r4, r5, r6, lr}
   2922a:	b086      	sub	sp, #24
   2922c:	4605      	mov	r5, r0
   2922e:	460e      	mov	r6, r1
   29230:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   29232:	2300      	movs	r3, #0
   29234:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   29236:	f000 f9ad 	bl	29594 <mfg_init>

    mfg_open(&reader);
   2923a:	a801      	add	r0, sp, #4
   2923c:	f000 f9c6 	bl	295cc <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   29240:	6823      	ldr	r3, [r4, #0]
   29242:	42ab      	cmp	r3, r5
   29244:	da29      	bge.n	2929a <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   29246:	2102      	movs	r1, #2
   29248:	a801      	add	r0, sp, #4
   2924a:	f000 f98c 	bl	29566 <mfg_seek_next_with_type>
   2924e:	4603      	mov	r3, r0
        switch (rc) {
   29250:	f110 0f0f 	cmn.w	r0, #15
   29254:	d003      	beq.n	2925e <flash_map_read_mfg+0x36>
   29256:	b120      	cbz	r0, 29262 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   29258:	4618      	mov	r0, r3
   2925a:	b006      	add	sp, #24
   2925c:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   2925e:	2300      	movs	r3, #0
   29260:	e7fa      	b.n	29258 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   29262:	a903      	add	r1, sp, #12
   29264:	a801      	add	r0, sp, #4
   29266:	f000 f98b 	bl	29580 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   2926a:	4603      	mov	r3, r0
   2926c:	2800      	cmp	r0, #0
   2926e:	d1f3      	bne.n	29258 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   29270:	6823      	ldr	r3, [r4, #0]
   29272:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   29276:	009a      	lsls	r2, r3, #2
   29278:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   2927a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   2927e:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   29280:	f89d 200d 	ldrb.w	r2, [sp, #13]
   29284:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   29286:	f8dd 200e 	ldr.w	r2, [sp, #14]
   2928a:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   2928c:	f8dd 2012 	ldr.w	r2, [sp, #18]
   29290:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   29292:	6823      	ldr	r3, [r4, #0]
   29294:	3301      	adds	r3, #1
   29296:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   29298:	e7d2      	b.n	29240 <flash_map_read_mfg+0x18>
            return -1;
   2929a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2929e:	e7db      	b.n	29258 <flash_map_read_mfg+0x30>

000292a0 <flash_area_open>:
{
   292a0:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   292a2:	4b0d      	ldr	r3, [pc, #52]	; (292d8 <flash_area_open+0x38>)
   292a4:	681d      	ldr	r5, [r3, #0]
   292a6:	b1a5      	cbz	r5, 292d2 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   292a8:	2300      	movs	r3, #0
   292aa:	4a0c      	ldr	r2, [pc, #48]	; (292dc <flash_area_open+0x3c>)
   292ac:	6812      	ldr	r2, [r2, #0]
   292ae:	429a      	cmp	r2, r3
   292b0:	dd0b      	ble.n	292ca <flash_area_open+0x2a>
        area = flash_map + i;
   292b2:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   292b6:	00a2      	lsls	r2, r4, #2
   292b8:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   292ba:	5caa      	ldrb	r2, [r5, r2]
   292bc:	4282      	cmp	r2, r0
   292be:	d001      	beq.n	292c4 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   292c0:	3301      	adds	r3, #1
   292c2:	e7f2      	b.n	292aa <flash_area_open+0xa>
            *fap = area;
   292c4:	600c      	str	r4, [r1, #0]
            return 0;
   292c6:	2000      	movs	r0, #0
   292c8:	e001      	b.n	292ce <flash_area_open+0x2e>
    return SYS_ENOENT;
   292ca:	f06f 0003 	mvn.w	r0, #3
}
   292ce:	bc30      	pop	{r4, r5}
   292d0:	4770      	bx	lr
        return SYS_EACCES;
   292d2:	f06f 0006 	mvn.w	r0, #6
   292d6:	e7fa      	b.n	292ce <flash_area_open+0x2e>
   292d8:	2000473c 	.word	0x2000473c
   292dc:	20004740 	.word	0x20004740

000292e0 <flash_area_read>:
{
   292e0:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   292e2:	6884      	ldr	r4, [r0, #8]
   292e4:	428c      	cmp	r4, r1
   292e6:	d308      	bcc.n	292fa <flash_area_read+0x1a>
   292e8:	18cd      	adds	r5, r1, r3
   292ea:	42ac      	cmp	r4, r5
   292ec:	d308      	bcc.n	29300 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   292ee:	6844      	ldr	r4, [r0, #4]
   292f0:	4421      	add	r1, r4
   292f2:	7840      	ldrb	r0, [r0, #1]
   292f4:	f000 fa65 	bl	297c2 <hal_flash_read>
}
   292f8:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   292fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   292fe:	e7fb      	b.n	292f8 <flash_area_read+0x18>
   29300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29304:	e7f8      	b.n	292f8 <flash_area_read+0x18>
	...

00029308 <flash_map_init>:

void
flash_map_init(void)
{
   29308:	b510      	push	{r4, lr}
   2930a:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2930c:	4b14      	ldr	r3, [pc, #80]	; (29360 <flash_map_init+0x58>)
   2930e:	781b      	ldrb	r3, [r3, #0]
   29310:	b303      	cbz	r3, 29354 <flash_map_init+0x4c>

    rc = hal_flash_init();
   29312:	f000 fa42 	bl	2979a <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   29316:	b138      	cbz	r0, 29328 <flash_map_init+0x20>
   29318:	2000      	movs	r0, #0
   2931a:	9000      	str	r0, [sp, #0]
   2931c:	4b11      	ldr	r3, [pc, #68]	; (29364 <flash_map_init+0x5c>)
   2931e:	681c      	ldr	r4, [r3, #0]
   29320:	4603      	mov	r3, r0
   29322:	4602      	mov	r2, r0
   29324:	4601      	mov	r1, r0
   29326:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   29328:	4b0f      	ldr	r3, [pc, #60]	; (29368 <flash_map_init+0x60>)
   2932a:	4a10      	ldr	r2, [pc, #64]	; (2936c <flash_map_init+0x64>)
   2932c:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   2932e:	4b10      	ldr	r3, [pc, #64]	; (29370 <flash_map_init+0x68>)
   29330:	2206      	movs	r2, #6
   29332:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   29334:	aa03      	add	r2, sp, #12
   29336:	490f      	ldr	r1, [pc, #60]	; (29374 <flash_map_init+0x6c>)
   29338:	200a      	movs	r0, #10
   2933a:	f7ff ff75 	bl	29228 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   2933e:	b938      	cbnz	r0, 29350 <flash_map_init+0x48>
   29340:	9b03      	ldr	r3, [sp, #12]
   29342:	2b00      	cmp	r3, #0
   29344:	dd04      	ble.n	29350 <flash_map_init+0x48>
        flash_map = mfg_areas;
   29346:	4a08      	ldr	r2, [pc, #32]	; (29368 <flash_map_init+0x60>)
   29348:	490a      	ldr	r1, [pc, #40]	; (29374 <flash_map_init+0x6c>)
   2934a:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   2934c:	4a08      	ldr	r2, [pc, #32]	; (29370 <flash_map_init+0x68>)
   2934e:	6013      	str	r3, [r2, #0]
    }
}
   29350:	b004      	add	sp, #16
   29352:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   29354:	461a      	mov	r2, r3
   29356:	4619      	mov	r1, r3
   29358:	4618      	mov	r0, r3
   2935a:	f7e7 f93f 	bl	105dc <__assert_func>
   2935e:	bf00      	nop
   29360:	20003bf0 	.word	0x20003bf0
   29364:	20000180 	.word	0x20000180
   29368:	2000473c 	.word	0x2000473c
   2936c:	0002ca30 	.word	0x0002ca30
   29370:	20004740 	.word	0x20004740
   29374:	20003ac8 	.word	0x20003ac8

00029378 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   29378:	4770      	bx	lr
	...

0002937c <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   2937c:	b530      	push	{r4, r5, lr}
   2937e:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   29380:	7885      	ldrb	r5, [r0, #2]
   29382:	4b21      	ldr	r3, [pc, #132]	; (29408 <mfg_seek_next_aux+0x8c>)
   29384:	681b      	ldr	r3, [r3, #0]
   29386:	429d      	cmp	r5, r3
   29388:	da32      	bge.n	293f0 <mfg_seek_next_aux+0x74>
   2938a:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   2938c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   29390:	0093      	lsls	r3, r2, #2
   29392:	a901      	add	r1, sp, #4
   29394:	4a1d      	ldr	r2, [pc, #116]	; (2940c <mfg_seek_next_aux+0x90>)
   29396:	5cd0      	ldrb	r0, [r2, r3]
   29398:	f7ff ff82 	bl	292a0 <flash_area_open>
    if (rc != 0) {
   2939c:	bb58      	cbnz	r0, 293f6 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   2939e:	6862      	ldr	r2, [r4, #4]
   293a0:	b9c2      	cbnz	r2, 293d4 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   293a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   293a6:	00aa      	lsls	r2, r5, #2
   293a8:	4b18      	ldr	r3, [pc, #96]	; (2940c <mfg_seek_next_aux+0x90>)
   293aa:	4413      	add	r3, r2
   293ac:	685b      	ldr	r3, [r3, #4]
   293ae:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   293b0:	6861      	ldr	r1, [r4, #4]
   293b2:	9801      	ldr	r0, [sp, #4]
   293b4:	6883      	ldr	r3, [r0, #8]
   293b6:	3b08      	subs	r3, #8
   293b8:	4299      	cmp	r1, r3
   293ba:	d310      	bcc.n	293de <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   293bc:	78a3      	ldrb	r3, [r4, #2]
   293be:	1c59      	adds	r1, r3, #1
   293c0:	4a11      	ldr	r2, [pc, #68]	; (29408 <mfg_seek_next_aux+0x8c>)
   293c2:	6812      	ldr	r2, [r2, #0]
   293c4:	4291      	cmp	r1, r2
   293c6:	da19      	bge.n	293fc <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   293c8:	2200      	movs	r2, #0
   293ca:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   293cc:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   293ce:	f06f 0305 	mvn.w	r3, #5
   293d2:	e015      	b.n	29400 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   293d4:	7863      	ldrb	r3, [r4, #1]
   293d6:	4413      	add	r3, r2
   293d8:	3302      	adds	r3, #2
   293da:	6063      	str	r3, [r4, #4]
   293dc:	e7e8      	b.n	293b0 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   293de:	2302      	movs	r3, #2
   293e0:	4622      	mov	r2, r4
   293e2:	f7ff ff7d 	bl	292e0 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   293e6:	4603      	mov	r3, r0
   293e8:	b150      	cbz	r0, 29400 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   293ea:	f06f 0304 	mvn.w	r3, #4
   293ee:	e007      	b.n	29400 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   293f0:	f06f 0301 	mvn.w	r3, #1
   293f4:	e004      	b.n	29400 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   293f6:	f06f 0304 	mvn.w	r3, #4
   293fa:	e001      	b.n	29400 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   293fc:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   29400:	4618      	mov	r0, r3
   29402:	b003      	add	sp, #12
   29404:	bd30      	pop	{r4, r5, pc}
   29406:	bf00      	nop
   29408:	20003b5c 	.word	0x20003b5c
   2940c:	20003b44 	.word	0x20003b44

00029410 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   29410:	b530      	push	{r4, r5, lr}
   29412:	b085      	sub	sp, #20
   29414:	4605      	mov	r5, r0
   29416:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   29418:	a903      	add	r1, sp, #12
   2941a:	f7ff ff41 	bl	292a0 <flash_area_open>
    if (rc != 0) {
   2941e:	b9e8      	cbnz	r0, 2945c <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   29420:	9803      	ldr	r0, [sp, #12]
   29422:	6881      	ldr	r1, [r0, #8]
   29424:	2308      	movs	r3, #8
   29426:	aa01      	add	r2, sp, #4
   29428:	3908      	subs	r1, #8
   2942a:	f7ff ff59 	bl	292e0 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   2942e:	4601      	mov	r1, r0
   29430:	b9b8      	cbnz	r0, 29462 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   29432:	9a02      	ldr	r2, [sp, #8]
   29434:	4b11      	ldr	r3, [pc, #68]	; (2947c <mfg_read_mmr+0x6c>)
   29436:	429a      	cmp	r2, r3
   29438:	d116      	bne.n	29468 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   2943a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2943e:	2b02      	cmp	r3, #2
   29440:	d115      	bne.n	2946e <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   29442:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   29446:	9b03      	ldr	r3, [sp, #12]
   29448:	689b      	ldr	r3, [r3, #8]
   2944a:	429a      	cmp	r2, r3
   2944c:	d812      	bhi.n	29474 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   2944e:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   29450:	7025      	strb	r5, [r4, #0]
   29452:	6063      	str	r3, [r4, #4]
   29454:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   29456:	4608      	mov	r0, r1
   29458:	b005      	add	sp, #20
   2945a:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   2945c:	f06f 0104 	mvn.w	r1, #4
   29460:	e7f9      	b.n	29456 <mfg_read_mmr+0x46>
        return SYS_EIO;
   29462:	f06f 0104 	mvn.w	r1, #4
   29466:	e7f6      	b.n	29456 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   29468:	f06f 0108 	mvn.w	r1, #8
   2946c:	e7f3      	b.n	29456 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   2946e:	f06f 010b 	mvn.w	r1, #11
   29472:	e7f0      	b.n	29456 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   29474:	f06f 0108 	mvn.w	r1, #8
   29478:	e7ed      	b.n	29456 <mfg_read_mmr+0x46>
   2947a:	bf00      	nop
   2947c:	3bb2a269 	.word	0x3bb2a269

00029480 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   29480:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   29482:	2300      	movs	r3, #0
   29484:	4a11      	ldr	r2, [pc, #68]	; (294cc <mfg_read_next_mmr+0x4c>)
   29486:	6812      	ldr	r2, [r2, #0]
   29488:	429a      	cmp	r2, r3
   2948a:	dd08      	ble.n	2949e <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   2948c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   29490:	008a      	lsls	r2, r1, #2
   29492:	490f      	ldr	r1, [pc, #60]	; (294d0 <mfg_read_next_mmr+0x50>)
   29494:	5c8a      	ldrb	r2, [r1, r2]
   29496:	4282      	cmp	r2, r0
   29498:	d011      	beq.n	294be <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   2949a:	3301      	adds	r3, #1
   2949c:	e7f2      	b.n	29484 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   2949e:	2a01      	cmp	r2, #1
   294a0:	dc11      	bgt.n	294c6 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   294a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   294a6:	0093      	lsls	r3, r2, #2
   294a8:	4909      	ldr	r1, [pc, #36]	; (294d0 <mfg_read_next_mmr+0x50>)
   294aa:	4419      	add	r1, r3
   294ac:	f7ff ffb0 	bl	29410 <mfg_read_mmr>
    if (rc != 0) {
   294b0:	4603      	mov	r3, r0
   294b2:	b930      	cbnz	r0, 294c2 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   294b4:	4905      	ldr	r1, [pc, #20]	; (294cc <mfg_read_next_mmr+0x4c>)
   294b6:	680a      	ldr	r2, [r1, #0]
   294b8:	3201      	adds	r2, #1
   294ba:	600a      	str	r2, [r1, #0]
    return 0;
   294bc:	e001      	b.n	294c2 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   294be:	f06f 030a 	mvn.w	r3, #10
}
   294c2:	4618      	mov	r0, r3
   294c4:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   294c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   294ca:	e7fa      	b.n	294c2 <mfg_read_next_mmr+0x42>
   294cc:	20003b5c 	.word	0x20003b5c
   294d0:	20003b44 	.word	0x20003b44

000294d4 <mfg_open_flash_area>:
{
   294d4:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   294d6:	7883      	ldrb	r3, [r0, #2]
   294d8:	4a0b      	ldr	r2, [pc, #44]	; (29508 <mfg_open_flash_area+0x34>)
   294da:	6812      	ldr	r2, [r2, #0]
   294dc:	4293      	cmp	r3, r2
   294de:	da0a      	bge.n	294f6 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   294e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   294e4:	009a      	lsls	r2, r3, #2
   294e6:	4b09      	ldr	r3, [pc, #36]	; (2950c <mfg_open_flash_area+0x38>)
   294e8:	5c98      	ldrb	r0, [r3, r2]
   294ea:	f7ff fed9 	bl	292a0 <flash_area_open>
    if (rc != 0) {
   294ee:	4603      	mov	r3, r0
   294f0:	b938      	cbnz	r0, 29502 <mfg_open_flash_area+0x2e>
}
   294f2:	4618      	mov	r0, r3
   294f4:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   294f6:	2300      	movs	r3, #0
   294f8:	461a      	mov	r2, r3
   294fa:	4619      	mov	r1, r3
   294fc:	4618      	mov	r0, r3
   294fe:	f7e7 f86d 	bl	105dc <__assert_func>
        return SYS_EIO;
   29502:	f06f 0304 	mvn.w	r3, #4
   29506:	e7f4      	b.n	294f2 <mfg_open_flash_area+0x1e>
   29508:	20003b5c 	.word	0x20003b5c
   2950c:	20003b44 	.word	0x20003b44

00029510 <mfg_read_tlv_body>:
{
   29510:	b570      	push	{r4, r5, r6, lr}
   29512:	b082      	sub	sp, #8
   29514:	4606      	mov	r6, r0
   29516:	460c      	mov	r4, r1
   29518:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   2951a:	a901      	add	r1, sp, #4
   2951c:	f7ff ffda 	bl	294d4 <mfg_open_flash_area>
    if (rc != 0) {
   29520:	4603      	mov	r3, r0
   29522:	b110      	cbz	r0, 2952a <mfg_read_tlv_body+0x1a>
}
   29524:	4618      	mov	r0, r3
   29526:	b002      	add	sp, #8
   29528:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   2952a:	462a      	mov	r2, r5
   2952c:	2100      	movs	r1, #0
   2952e:	4620      	mov	r0, r4
   29530:	f7e8 fff1 	bl	12516 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   29534:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   29536:	6871      	ldr	r1, [r6, #4]
   29538:	42ab      	cmp	r3, r5
   2953a:	bfa8      	it	ge
   2953c:	462b      	movge	r3, r5
   2953e:	4622      	mov	r2, r4
   29540:	3102      	adds	r1, #2
   29542:	9801      	ldr	r0, [sp, #4]
   29544:	f7ff fecc 	bl	292e0 <flash_area_read>
    if (rc != 0) {
   29548:	4603      	mov	r3, r0
   2954a:	2800      	cmp	r0, #0
   2954c:	d0ea      	beq.n	29524 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   2954e:	f06f 0304 	mvn.w	r3, #4
   29552:	e7e7      	b.n	29524 <mfg_read_tlv_body+0x14>

00029554 <mfg_seek_next>:
{
   29554:	b510      	push	{r4, lr}
   29556:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   29558:	4620      	mov	r0, r4
   2955a:	f7ff ff0f 	bl	2937c <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   2955e:	f110 0f06 	cmn.w	r0, #6
   29562:	d0f9      	beq.n	29558 <mfg_seek_next+0x4>
}
   29564:	bd10      	pop	{r4, pc}

00029566 <mfg_seek_next_with_type>:
{
   29566:	b538      	push	{r3, r4, r5, lr}
   29568:	4604      	mov	r4, r0
   2956a:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   2956c:	4620      	mov	r0, r4
   2956e:	f7ff fff1 	bl	29554 <mfg_seek_next>
        if (rc != 0) {
   29572:	4602      	mov	r2, r0
   29574:	b910      	cbnz	r0, 2957c <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   29576:	7823      	ldrb	r3, [r4, #0]
   29578:	42ab      	cmp	r3, r5
   2957a:	d1f7      	bne.n	2956c <mfg_seek_next_with_type+0x6>
}
   2957c:	4610      	mov	r0, r2
   2957e:	bd38      	pop	{r3, r4, r5, pc}

00029580 <mfg_read_tlv_flash_area>:
{
   29580:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   29582:	220a      	movs	r2, #10
   29584:	f7ff ffc4 	bl	29510 <mfg_read_tlv_body>
}
   29588:	bd08      	pop	{r3, pc}

0002958a <mfg_read_tlv_mmr_ref>:
{
   2958a:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   2958c:	2201      	movs	r2, #1
   2958e:	f7ff ffbf 	bl	29510 <mfg_read_tlv_body>
}
   29592:	bd08      	pop	{r3, pc}

00029594 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   29594:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   29596:	4b0b      	ldr	r3, [pc, #44]	; (295c4 <mfg_init+0x30>)
   29598:	781b      	ldrb	r3, [r3, #0]
   2959a:	b94b      	cbnz	r3, 295b0 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   2959c:	4b09      	ldr	r3, [pc, #36]	; (295c4 <mfg_init+0x30>)
   2959e:	2201      	movs	r2, #1
   295a0:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   295a2:	4b09      	ldr	r3, [pc, #36]	; (295c8 <mfg_init+0x34>)
   295a4:	781b      	ldrb	r3, [r3, #0]
   295a6:	b123      	cbz	r3, 295b2 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   295a8:	2000      	movs	r0, #0
   295aa:	f7ff ff69 	bl	29480 <mfg_read_next_mmr>
    if (rc != 0) {
   295ae:	b128      	cbz	r0, 295bc <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   295b0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   295b2:	461a      	mov	r2, r3
   295b4:	4619      	mov	r1, r3
   295b6:	4618      	mov	r0, r3
   295b8:	f7e7 f810 	bl	105dc <__assert_func>
    rc = mfg_read_mmr_refs();
   295bc:	f000 f80e 	bl	295dc <mfg_read_mmr_refs>
err:
   295c0:	e7f6      	b.n	295b0 <mfg_init+0x1c>
   295c2:	bf00      	nop
   295c4:	20003b40 	.word	0x20003b40
   295c8:	20003bf0 	.word	0x20003bf0

000295cc <mfg_open>:
{
   295cc:	b510      	push	{r4, lr}
   295ce:	4604      	mov	r4, r0
    mfg_init();
   295d0:	f7ff ffe0 	bl	29594 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   295d4:	2300      	movs	r3, #0
   295d6:	6023      	str	r3, [r4, #0]
   295d8:	6063      	str	r3, [r4, #4]
}
   295da:	bd10      	pop	{r4, pc}

000295dc <mfg_read_mmr_refs>:
{
   295dc:	b500      	push	{lr}
   295de:	b085      	sub	sp, #20
    mfg_open(&reader);
   295e0:	a801      	add	r0, sp, #4
   295e2:	f7ff fff3 	bl	295cc <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   295e6:	2104      	movs	r1, #4
   295e8:	eb0d 0001 	add.w	r0, sp, r1
   295ec:	f7ff ffbb 	bl	29566 <mfg_seek_next_with_type>
   295f0:	4603      	mov	r3, r0
        switch (rc) {
   295f2:	f110 0f0f 	cmn.w	r0, #15
   295f6:	d004      	beq.n	29602 <mfg_read_mmr_refs+0x26>
   295f8:	b128      	cbz	r0, 29606 <mfg_read_mmr_refs+0x2a>
}
   295fa:	4618      	mov	r0, r3
   295fc:	b005      	add	sp, #20
   295fe:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   29602:	2300      	movs	r3, #0
   29604:	e7f9      	b.n	295fa <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   29606:	a903      	add	r1, sp, #12
   29608:	a801      	add	r0, sp, #4
   2960a:	f7ff ffbe 	bl	2958a <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   2960e:	4603      	mov	r3, r0
   29610:	2800      	cmp	r0, #0
   29612:	d1f2      	bne.n	295fa <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   29614:	f89d 000c 	ldrb.w	r0, [sp, #12]
   29618:	f7ff ff32 	bl	29480 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   2961c:	4603      	mov	r3, r0
   2961e:	2800      	cmp	r0, #0
   29620:	d0e1      	beq.n	295e6 <mfg_read_mmr_refs+0xa>
   29622:	f110 0f0b 	cmn.w	r0, #11
   29626:	d0de      	beq.n	295e6 <mfg_read_mmr_refs+0xa>
   29628:	e7e7      	b.n	295fa <mfg_read_mmr_refs+0x1e>
	...

0002962c <pos>:

static int
pos(char c)
{
    const char *p;
    for (p = base64_chars; *p; p++)
   2962c:	4b06      	ldr	r3, [pc, #24]	; (29648 <pos+0x1c>)
   2962e:	781a      	ldrb	r2, [r3, #0]
   29630:	b132      	cbz	r2, 29640 <pos+0x14>
        if (*p == c)
   29632:	4282      	cmp	r2, r0
   29634:	d001      	beq.n	2963a <pos+0xe>
    for (p = base64_chars; *p; p++)
   29636:	3301      	adds	r3, #1
   29638:	e7f9      	b.n	2962e <pos+0x2>
            return p - base64_chars;
   2963a:	4803      	ldr	r0, [pc, #12]	; (29648 <pos+0x1c>)
   2963c:	1a18      	subs	r0, r3, r0
   2963e:	4770      	bx	lr
    return -1;
   29640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   29644:	4770      	bx	lr
   29646:	bf00      	nop
   29648:	0002ca78 	.word	0x0002ca78

0002964c <token_decode>:

#define DECODE_ERROR -1

static unsigned int
token_decode(const char *token)
{
   2964c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2964e:	4607      	mov	r7, r0
    int i;
    unsigned int val = 0;
    int marker = 0;
    if (strlen(token) < 4)
   29650:	f7e8 ffa6 	bl	125a0 <strlen>
   29654:	2803      	cmp	r0, #3
   29656:	d916      	bls.n	29686 <token_decode+0x3a>
    int marker = 0;
   29658:	2600      	movs	r6, #0
    unsigned int val = 0;
   2965a:	4634      	mov	r4, r6
        return DECODE_ERROR;
    for (i = 0; i < 4; i++) {
   2965c:	4635      	mov	r5, r6
   2965e:	e001      	b.n	29664 <token_decode+0x18>
        val *= 64;
        if (token[i] == '=')
            marker++;
   29660:	3601      	adds	r6, #1
    for (i = 0; i < 4; i++) {
   29662:	3501      	adds	r5, #1
   29664:	2d03      	cmp	r5, #3
   29666:	dc09      	bgt.n	2967c <token_decode+0x30>
        val *= 64;
   29668:	01a4      	lsls	r4, r4, #6
        if (token[i] == '=')
   2966a:	5d78      	ldrb	r0, [r7, r5]
   2966c:	283d      	cmp	r0, #61	; 0x3d
   2966e:	d0f7      	beq.n	29660 <token_decode+0x14>
        else if (marker > 0)
   29670:	2e00      	cmp	r6, #0
   29672:	dc0b      	bgt.n	2968c <token_decode+0x40>
            return DECODE_ERROR;
        else
            val += pos(token[i]);
   29674:	f7ff ffda 	bl	2962c <pos>
   29678:	4404      	add	r4, r0
   2967a:	e7f2      	b.n	29662 <token_decode+0x16>
    }
    if (marker > 2)
   2967c:	2e02      	cmp	r6, #2
   2967e:	dc08      	bgt.n	29692 <token_decode+0x46>
        return DECODE_ERROR;
    return (marker << 24) | val;
   29680:	ea44 6006 	orr.w	r0, r4, r6, lsl #24
}
   29684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DECODE_ERROR;
   29686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2968a:	e7fb      	b.n	29684 <token_decode+0x38>
            return DECODE_ERROR;
   2968c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29690:	e7f8      	b.n	29684 <token_decode+0x38>
        return DECODE_ERROR;
   29692:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29696:	e7f5      	b.n	29684 <token_decode+0x38>

00029698 <base64_encode>:
{
   29698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2969a:	4616      	mov	r6, r2
    p = s;
   2969c:	4615      	mov	r5, r2
    last = NULL;
   2969e:	2400      	movs	r4, #0
    i = 0;
   296a0:	4622      	mov	r2, r4
    while (i < size) {
   296a2:	e019      	b.n	296d8 <base64_encode+0x40>
        i++;
   296a4:	3203      	adds	r2, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   296a6:	f3c4 4c85 	ubfx	ip, r4, #18, #6
   296aa:	4f1d      	ldr	r7, [pc, #116]	; (29720 <base64_encode+0x88>)
   296ac:	f817 c00c 	ldrb.w	ip, [r7, ip]
   296b0:	f885 c000 	strb.w	ip, [r5]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   296b4:	f3c4 3c05 	ubfx	ip, r4, #12, #6
   296b8:	f817 c00c 	ldrb.w	ip, [r7, ip]
   296bc:	f885 c001 	strb.w	ip, [r5, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   296c0:	f3c4 1c85 	ubfx	ip, r4, #6, #6
   296c4:	f817 c00c 	ldrb.w	ip, [r7, ip]
   296c8:	f885 c002 	strb.w	ip, [r5, #2]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   296cc:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   296d0:	5d3c      	ldrb	r4, [r7, r4]
   296d2:	70ec      	strb	r4, [r5, #3]
        last = p;
   296d4:	462c      	mov	r4, r5
        p += 4;
   296d6:	3504      	adds	r5, #4
    while (i < size) {
   296d8:	428a      	cmp	r2, r1
   296da:	da0d      	bge.n	296f8 <base64_encode+0x60>
        c = q[i++];
   296dc:	1c57      	adds	r7, r2, #1
   296de:	5c84      	ldrb	r4, [r0, r2]
        c *= 256;
   296e0:	0224      	lsls	r4, r4, #8
        if (i < size)
   296e2:	42b9      	cmp	r1, r7
   296e4:	dd01      	ble.n	296ea <base64_encode+0x52>
            c += q[i];
   296e6:	5dc7      	ldrb	r7, [r0, r7]
   296e8:	443c      	add	r4, r7
        i++;
   296ea:	1c97      	adds	r7, r2, #2
        c *= 256;
   296ec:	0224      	lsls	r4, r4, #8
        if (i < size)
   296ee:	42b9      	cmp	r1, r7
   296f0:	ddd8      	ble.n	296a4 <base64_encode+0xc>
            c += q[i];
   296f2:	5dc7      	ldrb	r7, [r0, r7]
   296f4:	443c      	add	r4, r7
   296f6:	e7d5      	b.n	296a4 <base64_encode+0xc>
    if (last) {
   296f8:	b134      	cbz	r4, 29708 <base64_encode+0x70>
        diff = i - size;
   296fa:	1a52      	subs	r2, r2, r1
        if (diff > 0) {
   296fc:	2a00      	cmp	r2, #0
   296fe:	dd03      	ble.n	29708 <base64_encode+0x70>
            if (should_pad) {
   29700:	b933      	cbnz	r3, 29710 <base64_encode+0x78>
                p = last + (4 - diff);
   29702:	f1c2 0204 	rsb	r2, r2, #4
   29706:	18a5      	adds	r5, r4, r2
    *p = 0;
   29708:	2300      	movs	r3, #0
   2970a:	702b      	strb	r3, [r5, #0]
}
   2970c:	1ba8      	subs	r0, r5, r6
   2970e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                memset(last + (4 - diff), '=', diff);
   29710:	f1c2 0004 	rsb	r0, r2, #4
   29714:	213d      	movs	r1, #61	; 0x3d
   29716:	4420      	add	r0, r4
   29718:	f7e8 fefd 	bl	12516 <memset>
   2971c:	e7f4      	b.n	29708 <base64_encode+0x70>
   2971e:	bf00      	nop
   29720:	0002ca78 	.word	0x0002ca78

00029724 <base64_decode>:

int
base64_decode(const char *str, void *data)
{
   29724:	b570      	push	{r4, r5, r6, lr}
   29726:	4604      	mov	r4, r0
   29728:	460e      	mov	r6, r1
    const char *p;
    unsigned char *q;

    q = data;
   2972a:	460d      	mov	r5, r1
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   2972c:	e005      	b.n	2973a <base64_decode+0x16>
        unsigned int marker = (val >> 24) & 0xff;
        if (val == DECODE_ERROR)
            return -1;
        *q++ = (val >> 16) & 0xff;
        if (marker < 2)
            *q++ = (val >> 8) & 0xff;
   2972e:	0a03      	lsrs	r3, r0, #8
   29730:	1caa      	adds	r2, r5, #2
   29732:	706b      	strb	r3, [r5, #1]
   29734:	e015      	b.n	29762 <base64_decode+0x3e>
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   29736:	3404      	adds	r4, #4
   29738:	4615      	mov	r5, r2
   2973a:	7821      	ldrb	r1, [r4, #0]
   2973c:	b1b1      	cbz	r1, 2976c <base64_decode+0x48>
   2973e:	293d      	cmp	r1, #61	; 0x3d
   29740:	d003      	beq.n	2974a <base64_decode+0x26>
   29742:	480d      	ldr	r0, [pc, #52]	; (29778 <base64_decode+0x54>)
   29744:	f000 f8a2 	bl	2988c <strchr>
   29748:	b180      	cbz	r0, 2976c <base64_decode+0x48>
        unsigned int val = token_decode(p);
   2974a:	4620      	mov	r0, r4
   2974c:	f7ff ff7e 	bl	2964c <token_decode>
        unsigned int marker = (val >> 24) & 0xff;
   29750:	0e01      	lsrs	r1, r0, #24
        if (val == DECODE_ERROR)
   29752:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   29756:	d00b      	beq.n	29770 <base64_decode+0x4c>
        *q++ = (val >> 16) & 0xff;
   29758:	0c03      	lsrs	r3, r0, #16
   2975a:	1c6a      	adds	r2, r5, #1
   2975c:	702b      	strb	r3, [r5, #0]
        if (marker < 2)
   2975e:	2901      	cmp	r1, #1
   29760:	d9e5      	bls.n	2972e <base64_decode+0xa>
        if (marker < 1)
   29762:	2900      	cmp	r1, #0
   29764:	d1e7      	bne.n	29736 <base64_decode+0x12>
            *q++ = val & 0xff;
   29766:	7010      	strb	r0, [r2, #0]
   29768:	3201      	adds	r2, #1
   2976a:	e7e4      	b.n	29736 <base64_decode+0x12>
    }
    return q - (unsigned char *) data;
   2976c:	1ba8      	subs	r0, r5, r6
}
   2976e:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
   29770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29774:	e7fb      	b.n	2976e <base64_decode+0x4a>
   29776:	bf00      	nop
   29778:	0002ca78 	.word	0x0002ca78

0002977c <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   2977c:	6843      	ldr	r3, [r0, #4]
   2977e:	428b      	cmp	r3, r1
   29780:	d808      	bhi.n	29794 <hal_flash_check_addr+0x18>
   29782:	6882      	ldr	r2, [r0, #8]
   29784:	4413      	add	r3, r2
   29786:	428b      	cmp	r3, r1
   29788:	d301      	bcc.n	2978e <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   2978a:	2000      	movs	r0, #0
}
   2978c:	4770      	bx	lr
        return SYS_EINVAL;
   2978e:	f06f 0001 	mvn.w	r0, #1
   29792:	4770      	bx	lr
   29794:	f06f 0001 	mvn.w	r0, #1
   29798:	4770      	bx	lr

0002979a <hal_flash_init>:
{
   2979a:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   2979c:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   2979e:	462c      	mov	r4, r5
   297a0:	e001      	b.n	297a6 <hal_flash_init+0xc>
   297a2:	3401      	adds	r4, #1
   297a4:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   297a6:	4620      	mov	r0, r4
   297a8:	f7f4 fce0 	bl	1e16c <hal_bsp_flash_dev>
        if (!hf) {
   297ac:	b138      	cbz	r0, 297be <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   297ae:	6802      	ldr	r2, [r0, #0]
   297b0:	6952      	ldr	r2, [r2, #20]
   297b2:	4790      	blx	r2
   297b4:	2800      	cmp	r0, #0
   297b6:	d0f4      	beq.n	297a2 <hal_flash_init+0x8>
            rc = SYS_EIO;
   297b8:	f06f 0504 	mvn.w	r5, #4
   297bc:	e7f1      	b.n	297a2 <hal_flash_init+0x8>
}
   297be:	4628      	mov	r0, r5
   297c0:	bd38      	pop	{r3, r4, r5, pc}

000297c2 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   297c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   297c6:	460d      	mov	r5, r1
   297c8:	4690      	mov	r8, r2
   297ca:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   297cc:	f7f4 fcce 	bl	1e16c <hal_bsp_flash_dev>
    if (!hf) {
   297d0:	b1c0      	cbz	r0, 29804 <hal_flash_read+0x42>
   297d2:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   297d4:	4629      	mov	r1, r5
   297d6:	f7ff ffd1 	bl	2977c <hal_flash_check_addr>
   297da:	b9b0      	cbnz	r0, 2980a <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   297dc:	19a9      	adds	r1, r5, r6
   297de:	4620      	mov	r0, r4
   297e0:	f7ff ffcc 	bl	2977c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   297e4:	b9a0      	cbnz	r0, 29810 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   297e6:	6823      	ldr	r3, [r4, #0]
   297e8:	681f      	ldr	r7, [r3, #0]
   297ea:	4633      	mov	r3, r6
   297ec:	4642      	mov	r2, r8
   297ee:	4629      	mov	r1, r5
   297f0:	4620      	mov	r0, r4
   297f2:	47b8      	blx	r7
    if (rc != 0) {
   297f4:	4603      	mov	r3, r0
   297f6:	b910      	cbnz	r0, 297fe <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   297f8:	4618      	mov	r0, r3
   297fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   297fe:	f06f 0304 	mvn.w	r3, #4
   29802:	e7f9      	b.n	297f8 <hal_flash_read+0x36>
        return SYS_EINVAL;
   29804:	f06f 0301 	mvn.w	r3, #1
   29808:	e7f6      	b.n	297f8 <hal_flash_read+0x36>
        return SYS_EINVAL;
   2980a:	f06f 0301 	mvn.w	r3, #1
   2980e:	e7f3      	b.n	297f8 <hal_flash_read+0x36>
   29810:	f06f 0301 	mvn.w	r3, #1
   29814:	e7f0      	b.n	297f8 <hal_flash_read+0x36>
	...

00029818 <nrf52_clock_hfxo_request>:
 *
 * @return int 0: hfxo was already on. 1: hfxo was turned on.
 */
int
nrf52_clock_hfxo_request(void)
{
   29818:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2981a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2981e:	b672      	cpsid	i
    int started;
    uint32_t ctx;

    started = 0;
    __HAL_DISABLE_INTERRUPTS(ctx);
    assert(nrf52_clock_hfxo_refcnt < 0xff);
   29820:	4b0b      	ldr	r3, [pc, #44]	; (29850 <nrf52_clock_hfxo_request+0x38>)
   29822:	781b      	ldrb	r3, [r3, #0]
   29824:	2bff      	cmp	r3, #255	; 0xff
   29826:	d00b      	beq.n	29840 <nrf52_clock_hfxo_request+0x28>
    if (nrf52_clock_hfxo_refcnt == 0) {
   29828:	b983      	cbnz	r3, 2984c <nrf52_clock_hfxo_request+0x34>
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   2982a:	2001      	movs	r0, #1
   2982c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29830:	6018      	str	r0, [r3, #0]
        started = 1;
    }
    ++nrf52_clock_hfxo_refcnt;
   29832:	4a07      	ldr	r2, [pc, #28]	; (29850 <nrf52_clock_hfxo_request+0x38>)
   29834:	7813      	ldrb	r3, [r2, #0]
   29836:	3301      	adds	r3, #1
   29838:	7013      	strb	r3, [r2, #0]
    __HAL_ENABLE_INTERRUPTS(ctx);
   2983a:	b901      	cbnz	r1, 2983e <nrf52_clock_hfxo_request+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
   2983c:	b662      	cpsie	i

    return started;
}
   2983e:	bd08      	pop	{r3, pc}
    assert(nrf52_clock_hfxo_refcnt < 0xff);
   29840:	2300      	movs	r3, #0
   29842:	461a      	mov	r2, r3
   29844:	4619      	mov	r1, r3
   29846:	4618      	mov	r0, r3
   29848:	f7e6 fec8 	bl	105dc <__assert_func>
    started = 0;
   2984c:	2000      	movs	r0, #0
   2984e:	e7f0      	b.n	29832 <nrf52_clock_hfxo_request+0x1a>
   29850:	20003b60 	.word	0x20003b60

00029854 <nrf52_clock_hfxo_release>:
 * @return int 0: HFXO not stopped by this call (others using it) 1: HFXO
 *         stopped.
 */
int
nrf52_clock_hfxo_release(void)
{
   29854:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   29856:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2985a:	b672      	cpsid	i
    int stopped;
    uint32_t ctx;

    stopped = 0;
    __HAL_DISABLE_INTERRUPTS(ctx);
    assert(nrf52_clock_hfxo_refcnt != 0);
   2985c:	4b0a      	ldr	r3, [pc, #40]	; (29888 <nrf52_clock_hfxo_release+0x34>)
   2985e:	781b      	ldrb	r3, [r3, #0]
   29860:	b15b      	cbz	r3, 2987a <nrf52_clock_hfxo_release+0x26>
    --nrf52_clock_hfxo_refcnt;
   29862:	3b01      	subs	r3, #1
   29864:	b2db      	uxtb	r3, r3
   29866:	4908      	ldr	r1, [pc, #32]	; (29888 <nrf52_clock_hfxo_release+0x34>)
   29868:	700b      	strb	r3, [r1, #0]
    if (nrf52_clock_hfxo_refcnt == 0) {
   2986a:	b95b      	cbnz	r3, 29884 <nrf52_clock_hfxo_release+0x30>
        NRF_CLOCK->TASKS_HFCLKSTOP = 1;
   2986c:	2001      	movs	r0, #1
   2986e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29872:	6058      	str	r0, [r3, #4]
        stopped = 1;
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   29874:	b902      	cbnz	r2, 29878 <nrf52_clock_hfxo_release+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
   29876:	b662      	cpsie	i

    return stopped;
}
   29878:	bd08      	pop	{r3, pc}
    assert(nrf52_clock_hfxo_refcnt != 0);
   2987a:	461a      	mov	r2, r3
   2987c:	4619      	mov	r1, r3
   2987e:	4618      	mov	r0, r3
   29880:	f7e6 feac 	bl	105dc <__assert_func>
    stopped = 0;
   29884:	2000      	movs	r0, #0
   29886:	e7f5      	b.n	29874 <nrf52_clock_hfxo_release+0x20>
   29888:	20003b60 	.word	0x20003b60

0002988c <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   2988c:	7803      	ldrb	r3, [r0, #0]
   2988e:	b2ca      	uxtb	r2, r1
   29890:	4293      	cmp	r3, r2
   29892:	d002      	beq.n	2989a <strchr+0xe>
		if (!*s)
   29894:	b113      	cbz	r3, 2989c <strchr+0x10>
			return NULL;
		s++;
   29896:	3001      	adds	r0, #1
   29898:	e7f8      	b.n	2988c <strchr>
   2989a:	4770      	bx	lr
			return NULL;
   2989c:	2000      	movs	r0, #0
	}

	return (char *)s;
}
   2989e:	4770      	bx	lr

000298a0 <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   298a0:	b538      	push	{r3, r4, r5, lr}
   298a2:	460d      	mov	r5, r1
   298a4:	4614      	mov	r4, r2
	if (s)
   298a6:	b100      	cbz	r0, 298aa <strtok_r+0xa>
		*holder = s;
   298a8:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   298aa:	4629      	mov	r1, r5
   298ac:	4620      	mov	r0, r4
   298ae:	f000 f807 	bl	298c0 <strsep>
	} while (s && !*s);
   298b2:	4603      	mov	r3, r0
   298b4:	b110      	cbz	r0, 298bc <strtok_r+0x1c>
   298b6:	7802      	ldrb	r2, [r0, #0]
   298b8:	2a00      	cmp	r2, #0
   298ba:	d0f6      	beq.n	298aa <strtok_r+0xa>

	return s;
}
   298bc:	4618      	mov	r0, r3
   298be:	bd38      	pop	{r3, r4, r5, pc}

000298c0 <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   298c0:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   298c2:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   298c4:	b145      	cbz	r5, 298d8 <strsep+0x18>
   298c6:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   298c8:	4628      	mov	r0, r5
   298ca:	f000 f809 	bl	298e0 <strpbrk>
	if (e)
   298ce:	b128      	cbz	r0, 298dc <strsep+0x1c>
		*e++ = '\0';
   298d0:	1c42      	adds	r2, r0, #1
   298d2:	2100      	movs	r1, #0
   298d4:	7001      	strb	r1, [r0, #0]

	*stringp = e;
   298d6:	6022      	str	r2, [r4, #0]
	return s;
}
   298d8:	4628      	mov	r0, r5
   298da:	bd38      	pop	{r3, r4, r5, pc}
	e = strpbrk(s, delim);
   298dc:	4602      	mov	r2, r0
   298de:	e7fa      	b.n	298d6 <strsep+0x16>

000298e0 <strpbrk>:
#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
  const char *c = s2;
  if (!*s1)
   298e0:	7803      	ldrb	r3, [r0, #0]
   298e2:	b19b      	cbz	r3, 2990c <strpbrk+0x2c>
{
   298e4:	b410      	push	{r4}
  const char *c = s2;
   298e6:	460a      	mov	r2, r1
   298e8:	e001      	b.n	298ee <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   298ea:	b953      	cbnz	r3, 29902 <strpbrk+0x22>
	break;
      s1++;
   298ec:	3001      	adds	r0, #1
  while (*s1)
   298ee:	7804      	ldrb	r4, [r0, #0]
   298f0:	b13c      	cbz	r4, 29902 <strpbrk+0x22>
      for (c = s2; *c; c++)
   298f2:	460a      	mov	r2, r1
   298f4:	7813      	ldrb	r3, [r2, #0]
   298f6:	2b00      	cmp	r3, #0
   298f8:	d0f7      	beq.n	298ea <strpbrk+0xa>
	  if (*s1 == *c)
   298fa:	42a3      	cmp	r3, r4
   298fc:	d0f5      	beq.n	298ea <strpbrk+0xa>
      for (c = s2; *c; c++)
   298fe:	3201      	adds	r2, #1
   29900:	e7f8      	b.n	298f4 <strpbrk+0x14>
    }

  if (*c == '\0')
   29902:	7813      	ldrb	r3, [r2, #0]
   29904:	b123      	cbz	r3, 29910 <strpbrk+0x30>
    s1 = NULL;

  return (char *) s1;
}
   29906:	f85d 4b04 	ldr.w	r4, [sp], #4
   2990a:	4770      	bx	lr
    return (char *) NULL;
   2990c:	2000      	movs	r0, #0
}
   2990e:	4770      	bx	lr
    s1 = NULL;
   29910:	2000      	movs	r0, #0
   29912:	e7f8      	b.n	29906 <strpbrk+0x26>

00029914 <__aeabi_d2f>:
   29914:	ea4f 0241 	mov.w	r2, r1, lsl #1
   29918:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   2991c:	bf24      	itt	cs
   2991e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   29922:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   29926:	d90d      	bls.n	29944 <__aeabi_d2f+0x30>
   29928:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   2992c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   29930:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   29934:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   29938:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   2993c:	bf08      	it	eq
   2993e:	f020 0001 	biceq.w	r0, r0, #1
   29942:	4770      	bx	lr
   29944:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   29948:	d121      	bne.n	2998e <__aeabi_d2f+0x7a>
   2994a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   2994e:	bfbc      	itt	lt
   29950:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   29954:	4770      	bxlt	lr
   29956:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   2995a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   2995e:	f1c2 0218 	rsb	r2, r2, #24
   29962:	f1c2 0c20 	rsb	ip, r2, #32
   29966:	fa10 f30c 	lsls.w	r3, r0, ip
   2996a:	fa20 f002 	lsr.w	r0, r0, r2
   2996e:	bf18      	it	ne
   29970:	f040 0001 	orrne.w	r0, r0, #1
   29974:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   29978:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   2997c:	fa03 fc0c 	lsl.w	ip, r3, ip
   29980:	ea40 000c 	orr.w	r0, r0, ip
   29984:	fa23 f302 	lsr.w	r3, r3, r2
   29988:	ea4f 0343 	mov.w	r3, r3, lsl #1
   2998c:	e7cc      	b.n	29928 <__aeabi_d2f+0x14>
   2998e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   29992:	d107      	bne.n	299a4 <__aeabi_d2f+0x90>
   29994:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   29998:	bf1e      	ittt	ne
   2999a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   2999e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   299a2:	4770      	bxne	lr
   299a4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   299a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   299ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   299b0:	4770      	bx	lr
   299b2:	bf00      	nop

000299b4 <__aeabi_uldivmod>:
   299b4:	b953      	cbnz	r3, 299cc <__aeabi_uldivmod+0x18>
   299b6:	b94a      	cbnz	r2, 299cc <__aeabi_uldivmod+0x18>
   299b8:	2900      	cmp	r1, #0
   299ba:	bf08      	it	eq
   299bc:	2800      	cmpeq	r0, #0
   299be:	bf1c      	itt	ne
   299c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   299c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   299c8:	f000 b986 	b.w	29cd8 <__aeabi_idiv0>
   299cc:	f1ad 0c08 	sub.w	ip, sp, #8
   299d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   299d4:	f000 f81a 	bl	29a0c <__udivmoddi4>
   299d8:	f8dd e004 	ldr.w	lr, [sp, #4]
   299dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   299e0:	b004      	add	sp, #16
   299e2:	4770      	bx	lr

000299e4 <__popcountsi2>:
   299e4:	0843      	lsrs	r3, r0, #1
   299e6:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
   299ea:	1ac0      	subs	r0, r0, r3
   299ec:	0883      	lsrs	r3, r0, #2
   299ee:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
   299f2:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
   299f6:	4418      	add	r0, r3
   299f8:	eb00 1010 	add.w	r0, r0, r0, lsr #4
   299fc:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   29a00:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   29a04:	eb00 4000 	add.w	r0, r0, r0, lsl #16
   29a08:	0e00      	lsrs	r0, r0, #24
   29a0a:	4770      	bx	lr

00029a0c <__udivmoddi4>:
   29a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29a10:	9e08      	ldr	r6, [sp, #32]
   29a12:	4604      	mov	r4, r0
   29a14:	4688      	mov	r8, r1
   29a16:	2b00      	cmp	r3, #0
   29a18:	d14b      	bne.n	29ab2 <__udivmoddi4+0xa6>
   29a1a:	428a      	cmp	r2, r1
   29a1c:	4615      	mov	r5, r2
   29a1e:	d967      	bls.n	29af0 <__udivmoddi4+0xe4>
   29a20:	fab2 f282 	clz	r2, r2
   29a24:	b14a      	cbz	r2, 29a3a <__udivmoddi4+0x2e>
   29a26:	f1c2 0720 	rsb	r7, r2, #32
   29a2a:	fa01 f302 	lsl.w	r3, r1, r2
   29a2e:	fa20 f707 	lsr.w	r7, r0, r7
   29a32:	4095      	lsls	r5, r2
   29a34:	ea47 0803 	orr.w	r8, r7, r3
   29a38:	4094      	lsls	r4, r2
   29a3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   29a3e:	0c23      	lsrs	r3, r4, #16
   29a40:	fbb8 f7fe 	udiv	r7, r8, lr
   29a44:	fa1f fc85 	uxth.w	ip, r5
   29a48:	fb0e 8817 	mls	r8, lr, r7, r8
   29a4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   29a50:	fb07 f10c 	mul.w	r1, r7, ip
   29a54:	4299      	cmp	r1, r3
   29a56:	d909      	bls.n	29a6c <__udivmoddi4+0x60>
   29a58:	18eb      	adds	r3, r5, r3
   29a5a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   29a5e:	f080 811b 	bcs.w	29c98 <__udivmoddi4+0x28c>
   29a62:	4299      	cmp	r1, r3
   29a64:	f240 8118 	bls.w	29c98 <__udivmoddi4+0x28c>
   29a68:	3f02      	subs	r7, #2
   29a6a:	442b      	add	r3, r5
   29a6c:	1a5b      	subs	r3, r3, r1
   29a6e:	b2a4      	uxth	r4, r4
   29a70:	fbb3 f0fe 	udiv	r0, r3, lr
   29a74:	fb0e 3310 	mls	r3, lr, r0, r3
   29a78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   29a7c:	fb00 fc0c 	mul.w	ip, r0, ip
   29a80:	45a4      	cmp	ip, r4
   29a82:	d909      	bls.n	29a98 <__udivmoddi4+0x8c>
   29a84:	192c      	adds	r4, r5, r4
   29a86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   29a8a:	f080 8107 	bcs.w	29c9c <__udivmoddi4+0x290>
   29a8e:	45a4      	cmp	ip, r4
   29a90:	f240 8104 	bls.w	29c9c <__udivmoddi4+0x290>
   29a94:	3802      	subs	r0, #2
   29a96:	442c      	add	r4, r5
   29a98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   29a9c:	eba4 040c 	sub.w	r4, r4, ip
   29aa0:	2700      	movs	r7, #0
   29aa2:	b11e      	cbz	r6, 29aac <__udivmoddi4+0xa0>
   29aa4:	40d4      	lsrs	r4, r2
   29aa6:	2300      	movs	r3, #0
   29aa8:	e9c6 4300 	strd	r4, r3, [r6]
   29aac:	4639      	mov	r1, r7
   29aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29ab2:	428b      	cmp	r3, r1
   29ab4:	d909      	bls.n	29aca <__udivmoddi4+0xbe>
   29ab6:	2e00      	cmp	r6, #0
   29ab8:	f000 80eb 	beq.w	29c92 <__udivmoddi4+0x286>
   29abc:	2700      	movs	r7, #0
   29abe:	e9c6 0100 	strd	r0, r1, [r6]
   29ac2:	4638      	mov	r0, r7
   29ac4:	4639      	mov	r1, r7
   29ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29aca:	fab3 f783 	clz	r7, r3
   29ace:	2f00      	cmp	r7, #0
   29ad0:	d147      	bne.n	29b62 <__udivmoddi4+0x156>
   29ad2:	428b      	cmp	r3, r1
   29ad4:	d302      	bcc.n	29adc <__udivmoddi4+0xd0>
   29ad6:	4282      	cmp	r2, r0
   29ad8:	f200 80fa 	bhi.w	29cd0 <__udivmoddi4+0x2c4>
   29adc:	1a84      	subs	r4, r0, r2
   29ade:	eb61 0303 	sbc.w	r3, r1, r3
   29ae2:	2001      	movs	r0, #1
   29ae4:	4698      	mov	r8, r3
   29ae6:	2e00      	cmp	r6, #0
   29ae8:	d0e0      	beq.n	29aac <__udivmoddi4+0xa0>
   29aea:	e9c6 4800 	strd	r4, r8, [r6]
   29aee:	e7dd      	b.n	29aac <__udivmoddi4+0xa0>
   29af0:	b902      	cbnz	r2, 29af4 <__udivmoddi4+0xe8>
   29af2:	deff      	udf	#255	; 0xff
   29af4:	fab2 f282 	clz	r2, r2
   29af8:	2a00      	cmp	r2, #0
   29afa:	f040 808f 	bne.w	29c1c <__udivmoddi4+0x210>
   29afe:	1b49      	subs	r1, r1, r5
   29b00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   29b04:	fa1f f885 	uxth.w	r8, r5
   29b08:	2701      	movs	r7, #1
   29b0a:	fbb1 fcfe 	udiv	ip, r1, lr
   29b0e:	0c23      	lsrs	r3, r4, #16
   29b10:	fb0e 111c 	mls	r1, lr, ip, r1
   29b14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   29b18:	fb08 f10c 	mul.w	r1, r8, ip
   29b1c:	4299      	cmp	r1, r3
   29b1e:	d907      	bls.n	29b30 <__udivmoddi4+0x124>
   29b20:	18eb      	adds	r3, r5, r3
   29b22:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   29b26:	d202      	bcs.n	29b2e <__udivmoddi4+0x122>
   29b28:	4299      	cmp	r1, r3
   29b2a:	f200 80cd 	bhi.w	29cc8 <__udivmoddi4+0x2bc>
   29b2e:	4684      	mov	ip, r0
   29b30:	1a59      	subs	r1, r3, r1
   29b32:	b2a3      	uxth	r3, r4
   29b34:	fbb1 f0fe 	udiv	r0, r1, lr
   29b38:	fb0e 1410 	mls	r4, lr, r0, r1
   29b3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   29b40:	fb08 f800 	mul.w	r8, r8, r0
   29b44:	45a0      	cmp	r8, r4
   29b46:	d907      	bls.n	29b58 <__udivmoddi4+0x14c>
   29b48:	192c      	adds	r4, r5, r4
   29b4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   29b4e:	d202      	bcs.n	29b56 <__udivmoddi4+0x14a>
   29b50:	45a0      	cmp	r8, r4
   29b52:	f200 80b6 	bhi.w	29cc2 <__udivmoddi4+0x2b6>
   29b56:	4618      	mov	r0, r3
   29b58:	eba4 0408 	sub.w	r4, r4, r8
   29b5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   29b60:	e79f      	b.n	29aa2 <__udivmoddi4+0x96>
   29b62:	f1c7 0c20 	rsb	ip, r7, #32
   29b66:	40bb      	lsls	r3, r7
   29b68:	fa22 fe0c 	lsr.w	lr, r2, ip
   29b6c:	ea4e 0e03 	orr.w	lr, lr, r3
   29b70:	fa01 f407 	lsl.w	r4, r1, r7
   29b74:	fa20 f50c 	lsr.w	r5, r0, ip
   29b78:	fa21 f30c 	lsr.w	r3, r1, ip
   29b7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
   29b80:	4325      	orrs	r5, r4
   29b82:	fbb3 f9f8 	udiv	r9, r3, r8
   29b86:	0c2c      	lsrs	r4, r5, #16
   29b88:	fb08 3319 	mls	r3, r8, r9, r3
   29b8c:	fa1f fa8e 	uxth.w	sl, lr
   29b90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   29b94:	fb09 f40a 	mul.w	r4, r9, sl
   29b98:	429c      	cmp	r4, r3
   29b9a:	fa02 f207 	lsl.w	r2, r2, r7
   29b9e:	fa00 f107 	lsl.w	r1, r0, r7
   29ba2:	d90b      	bls.n	29bbc <__udivmoddi4+0x1b0>
   29ba4:	eb1e 0303 	adds.w	r3, lr, r3
   29ba8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   29bac:	f080 8087 	bcs.w	29cbe <__udivmoddi4+0x2b2>
   29bb0:	429c      	cmp	r4, r3
   29bb2:	f240 8084 	bls.w	29cbe <__udivmoddi4+0x2b2>
   29bb6:	f1a9 0902 	sub.w	r9, r9, #2
   29bba:	4473      	add	r3, lr
   29bbc:	1b1b      	subs	r3, r3, r4
   29bbe:	b2ad      	uxth	r5, r5
   29bc0:	fbb3 f0f8 	udiv	r0, r3, r8
   29bc4:	fb08 3310 	mls	r3, r8, r0, r3
   29bc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   29bcc:	fb00 fa0a 	mul.w	sl, r0, sl
   29bd0:	45a2      	cmp	sl, r4
   29bd2:	d908      	bls.n	29be6 <__udivmoddi4+0x1da>
   29bd4:	eb1e 0404 	adds.w	r4, lr, r4
   29bd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   29bdc:	d26b      	bcs.n	29cb6 <__udivmoddi4+0x2aa>
   29bde:	45a2      	cmp	sl, r4
   29be0:	d969      	bls.n	29cb6 <__udivmoddi4+0x2aa>
   29be2:	3802      	subs	r0, #2
   29be4:	4474      	add	r4, lr
   29be6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   29bea:	fba0 8902 	umull	r8, r9, r0, r2
   29bee:	eba4 040a 	sub.w	r4, r4, sl
   29bf2:	454c      	cmp	r4, r9
   29bf4:	46c2      	mov	sl, r8
   29bf6:	464b      	mov	r3, r9
   29bf8:	d354      	bcc.n	29ca4 <__udivmoddi4+0x298>
   29bfa:	d051      	beq.n	29ca0 <__udivmoddi4+0x294>
   29bfc:	2e00      	cmp	r6, #0
   29bfe:	d069      	beq.n	29cd4 <__udivmoddi4+0x2c8>
   29c00:	ebb1 050a 	subs.w	r5, r1, sl
   29c04:	eb64 0403 	sbc.w	r4, r4, r3
   29c08:	fa04 fc0c 	lsl.w	ip, r4, ip
   29c0c:	40fd      	lsrs	r5, r7
   29c0e:	40fc      	lsrs	r4, r7
   29c10:	ea4c 0505 	orr.w	r5, ip, r5
   29c14:	e9c6 5400 	strd	r5, r4, [r6]
   29c18:	2700      	movs	r7, #0
   29c1a:	e747      	b.n	29aac <__udivmoddi4+0xa0>
   29c1c:	f1c2 0320 	rsb	r3, r2, #32
   29c20:	fa20 f703 	lsr.w	r7, r0, r3
   29c24:	4095      	lsls	r5, r2
   29c26:	fa01 f002 	lsl.w	r0, r1, r2
   29c2a:	fa21 f303 	lsr.w	r3, r1, r3
   29c2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   29c32:	4338      	orrs	r0, r7
   29c34:	0c01      	lsrs	r1, r0, #16
   29c36:	fbb3 f7fe 	udiv	r7, r3, lr
   29c3a:	fa1f f885 	uxth.w	r8, r5
   29c3e:	fb0e 3317 	mls	r3, lr, r7, r3
   29c42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   29c46:	fb07 f308 	mul.w	r3, r7, r8
   29c4a:	428b      	cmp	r3, r1
   29c4c:	fa04 f402 	lsl.w	r4, r4, r2
   29c50:	d907      	bls.n	29c62 <__udivmoddi4+0x256>
   29c52:	1869      	adds	r1, r5, r1
   29c54:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   29c58:	d22f      	bcs.n	29cba <__udivmoddi4+0x2ae>
   29c5a:	428b      	cmp	r3, r1
   29c5c:	d92d      	bls.n	29cba <__udivmoddi4+0x2ae>
   29c5e:	3f02      	subs	r7, #2
   29c60:	4429      	add	r1, r5
   29c62:	1acb      	subs	r3, r1, r3
   29c64:	b281      	uxth	r1, r0
   29c66:	fbb3 f0fe 	udiv	r0, r3, lr
   29c6a:	fb0e 3310 	mls	r3, lr, r0, r3
   29c6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   29c72:	fb00 f308 	mul.w	r3, r0, r8
   29c76:	428b      	cmp	r3, r1
   29c78:	d907      	bls.n	29c8a <__udivmoddi4+0x27e>
   29c7a:	1869      	adds	r1, r5, r1
   29c7c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   29c80:	d217      	bcs.n	29cb2 <__udivmoddi4+0x2a6>
   29c82:	428b      	cmp	r3, r1
   29c84:	d915      	bls.n	29cb2 <__udivmoddi4+0x2a6>
   29c86:	3802      	subs	r0, #2
   29c88:	4429      	add	r1, r5
   29c8a:	1ac9      	subs	r1, r1, r3
   29c8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   29c90:	e73b      	b.n	29b0a <__udivmoddi4+0xfe>
   29c92:	4637      	mov	r7, r6
   29c94:	4630      	mov	r0, r6
   29c96:	e709      	b.n	29aac <__udivmoddi4+0xa0>
   29c98:	4607      	mov	r7, r0
   29c9a:	e6e7      	b.n	29a6c <__udivmoddi4+0x60>
   29c9c:	4618      	mov	r0, r3
   29c9e:	e6fb      	b.n	29a98 <__udivmoddi4+0x8c>
   29ca0:	4541      	cmp	r1, r8
   29ca2:	d2ab      	bcs.n	29bfc <__udivmoddi4+0x1f0>
   29ca4:	ebb8 0a02 	subs.w	sl, r8, r2
   29ca8:	eb69 020e 	sbc.w	r2, r9, lr
   29cac:	3801      	subs	r0, #1
   29cae:	4613      	mov	r3, r2
   29cb0:	e7a4      	b.n	29bfc <__udivmoddi4+0x1f0>
   29cb2:	4660      	mov	r0, ip
   29cb4:	e7e9      	b.n	29c8a <__udivmoddi4+0x27e>
   29cb6:	4618      	mov	r0, r3
   29cb8:	e795      	b.n	29be6 <__udivmoddi4+0x1da>
   29cba:	4667      	mov	r7, ip
   29cbc:	e7d1      	b.n	29c62 <__udivmoddi4+0x256>
   29cbe:	4681      	mov	r9, r0
   29cc0:	e77c      	b.n	29bbc <__udivmoddi4+0x1b0>
   29cc2:	3802      	subs	r0, #2
   29cc4:	442c      	add	r4, r5
   29cc6:	e747      	b.n	29b58 <__udivmoddi4+0x14c>
   29cc8:	f1ac 0c02 	sub.w	ip, ip, #2
   29ccc:	442b      	add	r3, r5
   29cce:	e72f      	b.n	29b30 <__udivmoddi4+0x124>
   29cd0:	4638      	mov	r0, r7
   29cd2:	e708      	b.n	29ae6 <__udivmoddi4+0xda>
   29cd4:	4637      	mov	r7, r6
   29cd6:	e6e9      	b.n	29aac <__udivmoddi4+0xa0>

00029cd8 <__aeabi_idiv0>:
   29cd8:	4770      	bx	lr
   29cda:	bf00      	nop

00029cdc <__aeabi_memcpy>:
   29cdc:	f7e8 bbf2 	b.w	124c4 <memcpy>
   29ce0:	20504d54 	.word	0x20504d54
   29ce4:	6c696166 	.word	0x6c696166
   29ce8:	20454c42 	.word	0x20454c42
   29cec:	6c696166 	.word	0x6c696166
   29cf0:	20544547 	.word	0x20544547
   29cf4:	6c696166 	.word	0x6c696166
   29cf8:	204e5552 	.word	0x204e5552
   29cfc:	6c696166 	.word	0x6c696166
   29d00:	74737572 	.word	0x74737572
   29d04:	7070612f 	.word	0x7070612f
   29d08:	6372732f 	.word	0x6372732f
   29d0c:	62696c2f 	.word	0x62696c2f
   29d10:	0073722e 	.word	0x0073722e
   29d14:	00029ce8 	.word	0x00029ce8
   29d18:	00000008 	.word	0x00000008
   29d1c:	00029d00 	.word	0x00029d00
   29d20:	00000013 	.word	0x00000013
   29d24:	00000048 	.word	0x00000048
   29d28:	00000005 	.word	0x00000005
   29d2c:	696e6170 	.word	0x696e6170
   29d30:	2063      	.short	0x2063
   29d32:	6f6e      	.short	0x6f6e
   29d34:	636f6c20 	.word	0x636f6c20
   29d38:	0a          	.byte	0x0a
   29d39:	61          	.byte	0x61
   29d3a:	2074      	.short	0x2074
   29d3c:	6e696c20 	.word	0x6e696c20
   29d40:	2065      	.short	0x2065
   29d42:	0a          	.byte	0x0a
   29d43:	3a          	.byte	0x3a
   29d44:	00000020 	.word	0x00000020
   29d48:	00029d43 	.word	0x00029d43
   29d4c:	00000000 	.word	0x00000000
   29d50:	00029d43 	.word	0x00029d43
   29d54:	00000002 	.word	0x00000002
   29d58:	2f637273 	.word	0x2f637273
   29d5c:	6362696c 	.word	0x6362696c
   29d60:	2f65726f 	.word	0x2f65726f
   29d64:	75736572 	.word	0x75736572
   29d68:	722e746c 	.word	0x722e746c
   29d6c:	00000073 	.word	0x00000073
   29d70:	00029d58 	.word	0x00029d58
   29d74:	00000015 	.word	0x00000015
   29d78:	000003e7 	.word	0x000003e7
   29d7c:	00000005 	.word	0x00000005
   29d80:	5f535953 	.word	0x5f535953
   29d84:	52455045 	.word	0x52455045
   29d88:	52455355 	.word	0x52455355
   29d8c:	5f535953 	.word	0x5f535953
   29d90:	4e4f4445 	.word	0x4e4f4445
   29d94:	45          	.byte	0x45
   29d95:	53          	.byte	0x53
   29d96:	5359      	.short	0x5359
   29d98:	4552455f 	.word	0x4552455f
   29d9c:	45544f4d 	.word	0x45544f4d
   29da0:	4f49      	.short	0x4f49
   29da2:	5953      	.short	0x5953
   29da4:	55455f53 	.word	0x55455f53
   29da8:	4f4e4b4e 	.word	0x4f4e4b4e
   29dac:	4e57      	.short	0x4e57
   29dae:	5953      	.short	0x5953
   29db0:	4e455f53 	.word	0x4e455f53
   29db4:	5553544f 	.word	0x5553544f
   29db8:	50          	.byte	0x50
   29db9:	53          	.byte	0x53
   29dba:	5359      	.short	0x5359
   29dbc:	4c41455f 	.word	0x4c41455f
   29dc0:	44414552 	.word	0x44414552
   29dc4:	59          	.byte	0x59
   29dc5:	53          	.byte	0x53
   29dc6:	5359      	.short	0x5359
   29dc8:	4152455f 	.word	0x4152455f
   29dcc:	474e      	.short	0x474e
   29dce:	45          	.byte	0x45
   29dcf:	53          	.byte	0x53
   29dd0:	455f5359 	.word	0x455f5359
   29dd4:	45444f4e 	.word	0x45444f4e
   29dd8:	56          	.byte	0x56
   29dd9:	53          	.byte	0x53
   29dda:	5359      	.short	0x5359
   29ddc:	5542455f 	.word	0x5542455f
   29de0:	5953      	.short	0x5953
   29de2:	5953      	.short	0x5953
   29de4:	41455f53 	.word	0x41455f53
   29de8:	53454343 	.word	0x53454343
   29dec:	5f535953 	.word	0x5f535953
   29df0:	41474145 	.word	0x41474145
   29df4:	4e49      	.short	0x4e49
   29df6:	5953      	.short	0x5953
   29df8:	49455f53 	.word	0x49455f53
   29dfc:	4f          	.byte	0x4f
   29dfd:	53          	.byte	0x53
   29dfe:	5359      	.short	0x5359
   29e00:	4f4e455f 	.word	0x4f4e455f
   29e04:	4e45      	.short	0x4e45
   29e06:	54          	.byte	0x54
   29e07:	53          	.byte	0x53
   29e08:	455f5359 	.word	0x455f5359
   29e0c:	454d4954 	.word	0x454d4954
   29e10:	554f      	.short	0x554f
   29e12:	54          	.byte	0x54
   29e13:	53          	.byte	0x53
   29e14:	455f5359 	.word	0x455f5359
   29e18:	41564e49 	.word	0x41564e49
   29e1c:	4c          	.byte	0x4c
   29e1d:	53          	.byte	0x53
   29e1e:	5359      	.short	0x5359
   29e20:	4f4e455f 	.word	0x4f4e455f
   29e24:	454d      	.short	0x454d
   29e26:	4d          	.byte	0x4d
   29e27:	53          	.byte	0x53
   29e28:	455f5359 	.word	0x455f5359
   29e2c:	4b4f      	.short	0x4b4f
   29e2e:	7473      	.short	0x7473
   29e30:	62206e72 	.word	0x62206e72
   29e34:	73657479 	.word	0x73657479
   29e38:	74737572 	.word	0x74737572
   29e3c:	6e796d2f 	.word	0x6e796d2f
   29e40:	2f747765 	.word	0x2f747765
   29e44:	2f637273 	.word	0x2f637273
   29e48:	6f636e65 	.word	0x6f636e65
   29e4c:	676e6964 	.word	0x676e6964
   29e50:	616f632f 	.word	0x616f632f
   29e54:	6f635f70 	.word	0x6f635f70
   29e58:	7865746e 	.word	0x7865746e
   29e5c:	73722e74 	.word	0x73722e74
   29e60:	00029e2e 	.word	0x00029e2e
   29e64:	0000000a 	.word	0x0000000a
   29e68:	00029e38 	.word	0x00029e38
   29e6c:	00000028 	.word	0x00000028
   29e70:	000000ef 	.word	0x000000ef
   29e74:	00000028 	.word	0x00000028
   29e78:	00000000 	.word	0x00000000
   29e7c:	00029e78 	.word	0x00029e78
   29e80:	65737361 	.word	0x65737361
   29e84:	6f697472 	.word	0x6f697472
   29e88:	6166206e 	.word	0x6166206e
   29e8c:	64656c69 	.word	0x64656c69
   29e90:	2860203a 	.word	0x2860203a
   29e94:	7466656c 	.word	0x7466656c
   29e98:	203d3d20 	.word	0x203d3d20
   29e9c:	68676972 	.word	0x68676972
   29ea0:	0a602974 	.word	0x0a602974
   29ea4:	656c2020 	.word	0x656c2020
   29ea8:	203a7466 	.word	0x203a7466
   29eac:	60          	.byte	0x60
   29ead:	60          	.byte	0x60
   29eae:	0a2c      	.short	0x0a2c
   29eb0:	67697220 	.word	0x67697220
   29eb4:	203a7468 	.word	0x203a7468
   29eb8:	60          	.byte	0x60
   29eb9:	60          	.byte	0x60
   29eba:	203a      	.short	0x203a
   29ebc:	00029e80 	.word	0x00029e80
   29ec0:	0000002d 	.word	0x0000002d
   29ec4:	00029ead 	.word	0x00029ead
   29ec8:	0000000c 	.word	0x0000000c
   29ecc:	00029eb9 	.word	0x00029eb9
   29ed0:	00000003 	.word	0x00000003
   29ed4:	6e206f6e 	.word	0x6e206f6e
   29ed8:	006c6c75 	.word	0x006c6c75
   29edc:	00029ed4 	.word	0x00029ed4
   29ee0:	00000007 	.word	0x00000007
   29ee4:	74737572 	.word	0x74737572
   29ee8:	6e796d2f 	.word	0x6e796d2f
   29eec:	2f747765 	.word	0x2f747765
   29ef0:	2f637273 	.word	0x2f637273
   29ef4:	2e62696c 	.word	0x2e62696c
   29ef8:	00007372 	.word	0x00007372
   29efc:	00029ee4 	.word	0x00029ee4
   29f00:	00000016 	.word	0x00000016
   29f04:	0000007a 	.word	0x0000007a
   29f08:	00000009 	.word	0x00000009
   29f0c:	00000000 	.word	0x00000000

00029f10 <str.0>:
   29f10:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   29f20:	2e62696c 00007372 00000000 00000000     lib.rs..........

00029f30 <str.1>:
   29f30:	65747461 2074706d 61206f74 77206464     attempt to add w
   29f40:	20687469 7265766f 776f6c66 00029f30     ith overflow0...
   29f50:	0000001c 00029f10 00000016 0000009a     ................
   29f60:	0000002b 20676962 6e727473 00029f64     +...big strnd...
   29f70:	00000008 00029ee4 00000016 0000009d     ................
   29f80:	00000011 00029ee4 00000016 00000093     ................
   29f90:	00000011 00000000 00000000 00000000     ................

00029fa0 <str.2>:
   29fa0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   29fb0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   29fc0:	00000077 00029fa0 00000021 00029f10     w.......!.......
   29fd0:	00000016 00000094 00000011 00029ee4     ................
   29fe0:	00000016 000000c7 00000011 00000000     ................

00029ff0 <str.0>:
   29ff0:	7375722f 352f6374 64306130 35646665     /rustc/50a0defd5
   2a000:	35333961 36303332 32666537 33393933     a93523067ef23993
   2a010:	32636336 35373065 30323235 2f343039     6cc2e0755220904/
   2a020:	2f637273 6362696c 2f65726f 63696c73     src/libcore/slic
   2a030:	6f6d2f65 73722e64 00000000 00000000     e/mod.rs........

0002a040 <str.1>:
   2a040:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   2a050:	6574616c 65687420 6d657220 646e6961     late the remaind
   2a060:	77207265 20687469 69642061 6f736976     er with a diviso
   2a070:	666f2072 72657a20 0000006f 0002a040     r of zero...@...
   2a080:	00000039 00029ff0 00000048 0000140e     9.......H.......
   2a090:	00000013 65747461 2074706d 63206f74     ....attempt to c
   2a0a0:	74616572 6e752065 67696c61 2064656e     reate unaligned 
   2a0b0:	63696c73 63727365 62696c2f 65726f63     slicesrc/libcore
   2a0c0:	696c732f 6d2f6563 722e646f 00000073     /slice/mod.rs...
   2a0d0:	0002a094 00000021 0002a0b5 00000018     ....!...........
   2a0e0:	0000140e 00000005 65747461 2074706d     ........attempt 
   2a0f0:	63206f74 74616572 6c732065 20656369     to create slice 
   2a100:	65766f63 676e6972 6c616820 68742066     covering half th
   2a110:	64612065 73657264 70732073 00656361     e address space.
   2a120:	0002a0e8 00000037 0002a0b5 00000018     ....7...........
   2a130:	0000140f 00000005 65737361 6f697472     ........assertio
   2a140:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   2a150:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   2a160:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   2a170:	203a6060 0002a138 0000002d 0002a165     ``: 8...-...e...
   2a180:	0000000c 0002a171 00000003 74736564     ....q.......dest
   2a190:	74616e69 206e6f69 20646e61 72756f73     ination and sour
   2a1a0:	73206563 6563696c 61682073 64206576     ce slices have d
   2a1b0:	65666669 746e6572 6e656c20 73687467     ifferent lengths
   2a1c0:	0002a18c 00000034 0002a0b5 00000018     ....4...........
   2a1d0:	0000084b 00000009 706d6574 7574735f     K.......temp_stu
   2a1e0:	00305f62                                b_0.

0002a1e4 <_ZN3app10app_sensor13SENSOR_DEVICE17hefbfbc9c9146f744E>:
   2a1e4:	00000000 0002a1d8 0000000c 74737552     ............Rust
   2a1f4:	504d5420 6c6f7020 6f6e0a6c 504d5420      TMP poll.no TMP
   2a204:	00000074 00000000 0002a204 00000002     t...............
   2a214:	74737552 6e657320 65735f64 726f736e     Rust send_sensor
   2a224:	7461645f 3d203a61 6176000a 7365756c     _data: =..values
   2a234:	414f4300 4f435f50 5845544e 656b0054     .COAP_CONTEXT.ke
   2a244:	6c617679 65676575 616c006f 656b0074     yvaluegeo.lat.ke
   2a254:	6f6c0079 6400676e 63697665 61760065     y.long.device.va
   2a264:	0065756c 2054454e 77656976 756f7920     lue.NET view you
   2a274:	65732072 726f736e 20746120 7474680a     r sensor at .htt
   2a284:	2f3a7370 756c622f 69702d65 672d6c6c     ps://blue-pill-g
   2a294:	6f6c6f65 65746163 7070612e 746f7073     eolocate.appspot
   2a2a4:	6d6f632e 7665643f 3d656369 656d6f53     .com?device=Some
   2a2b4:	656e6f4e 0000c28f 00000004 00000004     None............
   2a2c4:	0000b419 65737361 6f697472 6166206e     ....assertion fa
   2a2d4:	64656c69 6372203a 203d3d20 73757230     iled: rc == 0rus
   2a2e4:	796d2f74 7477656e 6372732f 636e652f     t/mynewt/src/enc
   2a2f4:	6e69646f 6f632f67 635f7061 65746e6f     oding/coap_conte
   2a304:	722e7478 00000073 0002a2c8 00000019     xt.rs...........
   2a314:	0002a2e1 00000028 00000032 0000000d     ....(...2.......
   2a324:	0002a2c8 00000019 0002a2e1 00000028     ............(...
   2a334:	00000036 0000000d 0002a2c8 00000019     6...............
   2a344:	0002a2e1 00000028 00000040 0000000d     ....(...@.......
   2a354:	00000000 0002a354 20676962 0079656b     ....T...big key.
   2a364:	0002a35c 00000007 0002a2e1 00000028     \...........(...
   2a374:	00000070 00000009 00000000              p...........

0002a380 <str.0>:
   2a380:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   2a390:	6f636e65 676e6964 616f632f 6f635f70     encoding/coap_co
   2a3a0:	7865746e 73722e74 0002a380 00000028     ntext.rs....(...
   2a3b0:	00000072 00000009 20676962 756c6176     r.......big valu
   2a3c0:	00000065 0002a3b8 00000009 0002a2e1     e...............
   2a3d0:	00000028 0000007d 00000009 0002a380     (...}...........
   2a3e0:	00000028 0000007f 00000009 65737361     (...........asse
   2a3f0:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   2a400:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   2a410:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   2a420:	203a7468 203a6060 0002a3ec 0000002d     ht: ``: ....-...
   2a430:	0002a419 0000000c 0002a425 00000003     ........%.......
   2a440:	20636e65 6c696166 0002a440 00000008     enc fail@.......
   2a450:	0002a2e1 00000028 000000b0 00000009     ....(...........
   2a460:	554c4156 4f4e5f45 49555f54 4b4f544e     VALUE_NOT_UINTOK
   2a470:	736e6573 7420726f 72657079 2f747375     sensor typerust/
   2a480:	656e796d 732f7477 682f6372 65732f77     mynewt/src/hw/se
   2a490:	726f736e 0073722e 0002a470 0000000b     nsor.rs.p.......
   2a4a0:	0002a47b 0000001c 0000003c 00000014     {.......<.......
   2a4b0:	00000000 65737361 6f697472 6166206e     ....assertion fa
   2a4c0:	64656c69 2860203a 7466656c 203d3d20     iled: `(left == 
   2a4d0:	68676972 0a602974 656c2020 203a7466     right)`.  left: 
   2a4e0:	0a2c6060 67697220 203a7468 203a6060     ``,. right: ``: 
   2a4f0:	0002a4b4 0000002d 0002a4e1 0000000c     ....-...........
   2a500:	0002a4ed 00000003 646f6567 20617461     ........geodata 
   2a510:	6c696166 0002a508 0000000c 0002a47b     fail........{...
   2a520:	0000001c 0000002e 00000011 74776172     ............rawt
   2a530:	6620706d 006c6961 0002a52c 0000000b     mp fail.,.......
   2a540:	0002a47b 0000001c 00000024 00000011     {.......$.......
   2a550:	73736100 69747265 66206e6f 656c6961     .assertion faile
   2a560:	60203a64 66656c28 3d212074 67697220     d: `(left != rig
   2a570:	60297468 6c20200a 3a746665 00006020     ht)`.  left: `..
   2a580:	0002a551 0000002d 0002a4e1 0000000c     Q...-...........
   2a590:	0002a4ed 00000003 20646162 74776172     ........bad rawt
   2a5a0:	0000706d 0002a598 0000000a 0002a47b     mp..........{...
   2a5b0:	0000001c 00000026 00000011 00000000     ....&...........

0002a5c0 <str.0>:
   2a5c0:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   2a5d0:	732f7768 6f736e65 73722e72 00000000     hw/sensor.rs....

0002a5e0 <str.1>:
   2a5e0:	65747461 2074706d 61206f74 77206464     attempt to add w
   2a5f0:	20687469 7265766f 776f6c66 0002a5e0     ith overflow....
   2a600:	0000001c 0002a5c0 0000001c 0000004b     ............K...
   2a610:	00000013 0002a5c0 0000001c 0000004e     ............N...
   2a620:	0000001d 0002a5c0 0000001c 00000059     ............Y...
   2a630:	00000038 00000000 00000000 00000000     8...............
   2a640:	20676572 0073696c 0002a640 00000007     reg lis.@.......
   2a650:	0002a47b 0000001c 0000005d 00000012     {.......].......
   2a660:	7373696d 20676e69 736e6573 6b20726f     missing sensor k
   2a670:	00007965 0002a660 00000012 0002a47b     ey..`.......{...
   2a680:	0000001c 0000006f 00000005 0002a5e0     ....o...........
   2a690:	0000001c 0002a5c0 0000001c 00000071     ............q...
   2a6a0:	00000013 0002a5c0 0000001c 00000073     ............s...
   2a6b0:	0000001d 72636e69 65736165 58414d20     ....increase MAX
   2a6c0:	4e45535f 5f524f53 5453494c 52454e45     _SENSOR_LISTENER
   2a6d0:	00000053 0002a6b4 0000001d 0002a47b     S...........{...
   2a6e0:	0000001c 00000079 00000005 0002a5c0     ....y...........
   2a6f0:	0000001c 00000082 0000000e 20646162     ............bad 
   2a700:	736e6573 6120726f 00006772 0002a6fc     sensor arg......
   2a710:	0000000e 0002a47b 0000001c 00000095     ....{...........
   2a720:	00000005 0002a5c0 0000001c 00000096     ................
   2a730:	00000019 0002a660 00000012 0002a47b     ....`.......{...
   2a740:	0000001c 00000097 00000005 6c6c756e     ............null
   2a750:	6e657320 00726f73 0002a74c 0000000b      sensor.L.......
   2a760:	0002a47b 0000001c 0000009b 00000005     {...............
   2a770:	646e6966 6e657320 60726f73 00000000     find sensor`....
   2a780:	2f637273 6362696c 2f65726f 2f6d756e     src/libcore/num/
   2a790:	32636564 2f746c66 66776172 73722e70     dec2flt/rawfp.rs
   2a7a0:	65646e69 756f2078 666f2074 756f6220     index out of bou
   2a7b0:	3a73646e 65687420 6e656c20 20736920     nds: the len is 
   2a7c0:	00003e00 00000001 00000000 00000000     .>..............
   2a7d0:	00000020 00000000 0000c000 00000300      ...............
   2a7e0:	00002e2e 0002a7e0 00000002 00000000     ................
   2a7f0:	65726c61 20796461 72726f62 6465776f     already borrowed
   2a800:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   2a810:	ffffffff 00000000 00000000 80000000     ................
   2a820:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   2a830:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error
   2a840:	0000c7db 00000000 00000001 0000c82b     ............+...
   2a850:	74756220 65687420 646e6920 69207865      but the index i
   2a860:	00002073 0002a7a0 00000020 0002a850     s ...... ...P...
   2a870:	00000012 72657469 72657449 203d3c20     ....iterIter <= 
   2a880:	20202020 65757274 61746164 746e616d         truedatamant
   2a890:	73756c70 6f72655a 79706f43 646e696b     plusZeroCopykind
   2a8a0:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   2a8b0:	72616843 656c6966 656e696c 6b636142     CharfilelineBack
   2a8c0:	68746f42 6d657449 6c696174 7466654c     BothItemtailLeft
   2a8d0:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   2a8e0:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   2a8f0:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   2a900:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   2a910:	656e6f4e 61762060 7365756c 6c2f6372     None` valuesrc/l
   2a920:	6f636269 6f2f6572 6f697470 73722e6e     ibcore/option.rs
   2a930:	0002a8f0 0000002b 0002a91b 00000015     ....+...........
   2a940:	0000015b 00000015 0002a77c 00000000     [.......|.......
   2a950:	0002a91b 00000015 0000040c 00000005     ................
   2a960:	2f637273 6362696c 2f65726f 63696c73     src/libcore/slic
   2a970:	6f6d2f65 73722e64 65646e69 6f202078     e/mod.rsindex  o
   2a980:	6f207475 61722066 2065676e 20726f66     ut of range for 
   2a990:	63696c73 666f2065 6e656c20 20687467     slice of length 
   2a9a0:	0002a978 00000006 0002a97e 00000022     x.......~..."...
   2a9b0:	0002a960 00000018 00000a09 00000005     `...............
   2a9c0:	63696c73 6e692065 20786564 72617473     slice index star
   2a9d0:	61207374 62202074 65207475 2073646e     ts at  but ends 
   2a9e0:	00207461 0002a9c0 00000016 0002a9d6     at .............
   2a9f0:	0000000d 0002a960 00000018 00000a0f     ....`...........
   2aa00:	00000005 696e6966 64656873 73796168     ....finishedhays
   2aa10:	6b636174 79622820 20736574 69666e49     tack (bytes Infi
   2aa20:	6574696e 756e694d 77615273 6167654e     niteMinusRawNega
   2aa30:	65766974 69736f50 65766974 65746e69     tivePositiveinte
   2aa40:	6c617267 7265764f 776f6c66 61636f6c     gralOverflowloca
   2aa50:	6e6f6974 61636f4c 6e6f6974 6b636162     tionLocationback
   2aa60:	72657469 6f746e49 72657449 72616573     iterIntoItersear
   2aa70:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   2aa80:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   2aa90:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   2aaa0:	745f3478 61706e55 64656b63 2f637273     x4_tUnpackedsrc/
   2aab0:	6362696c 2f65726f 2f727473 2e646f6d     libcore/str/mod.
   2aac0:	2e5b7372 625d2e2e 20657479 65646e69     rs[...]byte inde
   2aad0:	69202078 756f2073 666f2074 756f6220     x  is out of bou
   2aae0:	2073646e 6020666f 0002aac7 0000000b     nds of `........
   2aaf0:	0002aad2 00000016 0002a77b 00000001     ........{.......
   2ab00:	0002aaac 00000016 000007eb 00000009     ................
   2ab10:	69676562 3d3c206e 646e6520 00002820     begin <= end (..
   2ab20:	0002ab10 0000000e 0002a87c 00000004     ........|.......
   2ab30:	0002a800 00000010 0002a77b 00000001     ........{.......
   2ab40:	0002aaac 00000016 000007ef 00000005     ................
   2ab50:	20736920 20746f6e 68632061 62207261      is not a char b
   2ab60:	646e756f 3b797261 20746920 69207369     oundary; it is i
   2ab70:	6469736e 20292065 6020666f 0002aac7     nside ) of `....
   2ab80:	0000000b 0002ab50 00000026 0002aa14     ....P...&.......
   2ab90:	00000008 0002ab76 00000006 0002a77b     ....v.......{...
   2aba0:	00000001 0002aaac 00000016 000007fc     ................
   2abb0:	00000005 30307830 32303130 34303330     ....0x0001020304
   2abc0:	36303530 38303730 30313930 32313131     0506070809101112
   2abd0:	34313331 36313531 38313731 30323931     1314151617181920
   2abe0:	32323132 34323332 36323532 38323732     2122232425262728
   2abf0:	30333932 32333133 34333333 36333533     2930313233343536
   2ac00:	38333733 30343933 32343134 34343334     3738394041424344
   2ac10:	36343534 38343734 30353934 32353135     4546474849505152
   2ac20:	34353335 36353535 38353735 30363935     5354555657585960
   2ac30:	32363136 34363336 36363536 38363736     6162636465666768
   2ac40:	30373936 32373137 34373337 36373537     6970717273747576
   2ac50:	38373737 30383937 32383138 34383338     7778798081828384
   2ac60:	36383538 38383738 30393938 32393139     8586878889909192
   2ac70:	34393339 36393539 38393739 00003939     93949596979899..
   2ac80:	0000c7d9 0000000c 00000004 0000cebd     ................
   2ac90:	0000d14d 0000d1e3 202c0a2c 2c280a28     M.......,., (.(,
   2aca0:	00000029 0000c7d7 00000004 00000004     )...............
   2acb0:	0000d207 0000d20d 0000d213 00000000     ................

0002acc0 <str.h>:
   2acc0:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   2acd0:	2e646f6d 00007372 0002acc0 00000016     mod.rs..........
   2ace0:	00000448 00000028 0002acc0 00000016     H...(...........
   2acf0:	00000454 00000011 00000000 00000000     T...............

0002ad00 <str.j>:
   2ad00:	2f637273 6362696c 2f65726f 63696e75     src/libcore/unic
   2ad10:	2f65646f 6c6f6f62 6972745f 73722e65     ode/bool_trie.rs
   2ad20:	0002ad00 00000020 00000027 00000019     .... ...'.......
   2ad30:	0002ad00 00000020 00000028 00000020     .... ...(... ...
   2ad40:	0002ad00 00000020 0000002a 00000019     .... ...*.......
   2ad50:	0002ad00 00000020 0000002b 00000018     .... ...+.......
   2ad60:	0002ad00 00000020 0000002c 00000020     .... ...,... ...
   2ad70:	05030100 03060605 08080607 1c0a1109     ................
   2ad80:	140c190b 160e120d 0310040f 09131212     ................
   2ad90:	05170116 03190218 021c071a 161f011d     ................
   2ada0:	062b0320 0b2d022c 0330012e 02320231      .+.,.-...0.1.2.
   2adb0:	04aa02a9 02fa08ab 04fd05fb 09ff03fe     ................
   2adc0:	8b7978ad 5730a28d 908c8b58 0edd1d1c     .xy...0WX.......
   2add0:	fb4c4b0f 3f2f2efc b55f5d5c 8e8d84e2     .KL.../?\]_.....
   2ade0:	b1a99291 c6c5bbba e4decac9 0400ffe5     ................
   2adf0:	31291211 3b3a3734 5d4a493d a9928e84     ..)147:;=IJ]....
   2ae00:	bbbab4b1 cfcecac6 0400e5e4 12110e0d     ................
   2ae10:	3a343129 4946453b 65645e4a 9d9b9184     )14:;EFIJ^de....
   2ae20:	0dcfcec9 49452911 8d656457 bab4a991     .....)EIWde.....
   2ae30:	dfc9c5bb 04f0e5e4 4945110d 81806564     ..........EIde..
   2ae40:	bebcb284 f0d7d5bf 868583f1 988c8b89     ................
   2ae50:	a8a6a4a0 bebaaca9 cec7c5bf 48dbdacf     ...............H
   2ae60:	c6cdbd98 4e49cfce 5e59574f 8f8e895f     ......INOWY^_...
   2ae70:	bfb7b6b1 d7c7c6c1 5b171611 fef7f65c     ...........[\...
   2ae80:	6d0d80ff 0edfde71 6f6e1f0f 7d5f1d1c     ...mq.....no.._}
   2ae90:	bbafae7e 1716fabc 47461f1e 5a584f4e     ~.........FGNOXZ
   2aea0:	7f7e5e5c d5d4c5b5 f5f1f0dc 748f7372     \^~.........rs.t
   2aeb0:	c9979675 265f2fff afa72f2e cfc7bfb7     u..../_&./......
   2aec0:	409adfd7 8f309897 ffceff1f 5b5a4f4e     ...@..0.....NOZ[
   2aed0:	100f0807 efee2f27 3d376f6e 9045423f     ....'/..no7=?BE.
   2aee0:	53fffe91 c9c87567 d9d8d1d0 00fffee7     ...Sgu..........
   2aef0:	82225f20 448204df 06041b08 0eac8111      _"....D........
   2af00:	1e35ab80 03e08015 04010819 0434042f     ..5........./.4.
   2af10:	07010307 0a110706 07120f50 04020855     ........P...U...
   2af20:	03090a1c 03070308 03030302 0305040c     ................
   2af30:	0e01060b 033a0515 05060711 07560810     ......:.......V.
   2af40:	0d150702 03430450 0401032d 0c0f0611     ....P.C.-.......
   2af50:	251d043a 204c060d 256a046d 8205c880     :..%..L m.j%....
   2af60:	061a03b0 5903fd82 170b1507 140c1409     .......Y........
   2af70:	0a066a0c 59061a06 46052b07 0c042c0a     .j.....Y.+.F.,..
   2af80:	31030104 1a042c0b 80030b06 060a06ac     ...1.,..........
   2af90:	044c411f 0874032d 030f033c 0838073c     .AL.-.t.<...<.8.
   2afa0:	ff82062a 2f081811 20032d11 800f2110     *....../.-. .!..
   2afb0:	9782048c 88150b19 052f0594 0e02073b     ........../.;...
   2afc0:	af800918 800c7431 050c1ad6 8005ff80     ....1t..........
   2afd0:	0c2405b6 d20ac69b 8d841030 81093703     ..$.....0....7..
   2afe0:	b880145c 3dba8008 060a0435 08460838     \......=5...8.F.
   2aff0:	0b74060c 045a031e 83800959 160a1c18     ..t...Z.Y.......
   2b000:	800a4609 a4ab068a 3104170c da8104a1     .F.........1....
   2b010:	050c0726 11a58005 78106d81 4c062a28     &........m.x(*.L
   2b020:	048d8004 1b03be80 000d0f03 03010106     ................
   2b030:	08020401 0a020908 10020b05 12041101     ................
   2b040:	14111305 17021502 1c021a02 24081d05     ...............$
   2b050:	6b036a01 d102bc02 d50cd402 d702d609     .j.k............
   2b060:	e001da02 ee02e805 f904f020 3b270c04     ........ .....';
   2b070:	8f4f4e3e 069f9e9e 3d360907 d0f3563e     >NO.......6=>V..
   2b080:	181404d1 57563736 cfce35bd 898712e0     ....67VW.5......
   2b090:	0d049e8e 2912110e 453a3431 4e4a4946     .......)14:EFIJN
   2b0a0:	5a65644f 1bb7b65c 0985841c a8919037     OdeZ\.......7...
   2b0b0:	3e3b0a07 928f6966 efee5f6f 9b9a625a     ..;>fi..o_..Zb..
   2b0c0:	9d552827 a4a3a1a0 baada8a7 0b06c4bc     '(U.............
   2b0d0:	3a1d150c a651453f a0cdcca7 221a1907     ...:?EQ........"
   2b0e0:	04c6c525 26252320 3a383328 504c4a48     %... #%&(38:HJLP
   2b0f0:	58565553 605e5c5a 6b666563 7f7d7873     SUVXZ\^`cefksx}.
   2b100:	afaaa48a 3fd0c0b0 5e7b7271 03057b22     .......?qr{^"{..
   2b110:	65032d04 2e2f0104 031d8280 041c0f31     .-.e../.....1...
   2b120:	051e0924 0444052b aa802a0e 24042406     $...+.D..*...$.$
   2b130:	34082804 9080010b 16093781 9880080a     .(.4.....7......
   2b140:	08630339 05163009 051b0321 04384001     9.c..0..!....@8.
   2b150:	042f054b 0709070a 04272040 0336090c     K./.....@ '...6.
   2b160:	071a053a 50070c04 0d333749 082e0733     :......PI73.3...
   2b170:	1f26810a 08288180 4ea6802a 430f1e04     ..&...(.*..N...C
   2b180:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   2b190:	51060a05 10050106 8b800503 0848215f     ...Q........_!H.
   2b1a0:	5ea6800a 0a0b4522 38130d06 2c360a08     ...^"E.....8..6,
   2b1b0:	c0801004 0c53643c 48008101 391d5308     ....<dS....H.S.9
   2b1c0:	0a460781 4947031d 080e0337 0739060a     ..F...GI7.....9.
   2b1d0:	1936810a 9a830781 800b7566 84bc8ac4     ..6.....fu......
   2b1e0:	82d18f2f 82b9a147 042a0739 0a266002     /...G...9.*..`&.
   2b1f0:	05280a46 5bb08213 2f0b4565 02401110     F.(....[eE./..@.
   2b200:	0ef2971e 0da5f382 81511f81 6b04898c     ..........Q....k
   2b210:	09030d05 60931007 730af680 46176e08     .......`...s.n.F
   2b220:	0c149a80 80190957 03478187 150f4285     ....W.....G..B..
   2b230:	872b5085 29d780d5 040a054b 44118302     .P+....)K......D
   2b240:	063c4b81 05550401 8102341b 64042c0e     .K<...U..4...,.d
   2b250:	0d0a560c 3d045c03 2c0d1d39 02070904     .V...\.=9..,....
   2b260:	9a80060e 0d0bd583 74060a03 0c27590c     ...........t.Y'.
   2b270:	0a083804 1e082806 67040c52 0a0d2903     .8...(..R..g.)..
   2b280:	300d0306 92850e60 fbc00000 00003eef     ...0`........>..
   2b290:	0e000000 00000000 00000000 00000000     ................
   2b2a0:	fff80000 fffffffb 00000007 14000000     ................
   2b2b0:	00fe21fe 0000000c 00000002 50000000     .!.............P
   2b2c0:	0080201e 4000000c 00000006 10000000     . .....@........
   2b2d0:	00023986 00230000 000021be fc00000c     .9....#..!......
   2b2e0:	00000002 d0000000 00c0201e 0000000c     ......... ......
   2b2f0:	00000004 40000000 00802001 00000000     .......@. ......
   2b300:	00000011 c0000000 00603dc1 0000000c     .........=`.....
   2b310:	00000002 90000000 00603044 0000000c     ........D0`.....
   2b320:	00000003 58000000 0080201e 0000000c     .......X. ......
   2b330:	805c8400 00000000 00000000 07f20000     ..\.............
   2b340:	00007f80 00000000 00000000 1bf20000     ................
   2b350:	00003f00 00000000 03000000 02a00000     .?..............
   2b360:	00000000 7ffe0000 feffe0df 1fffffff     ................
   2b370:	00000040 00000000 00000000 66fde000     @..............f
   2b380:	c3000000 001e0001 20002064 00000000     ........d . ....
   2b390:	e0000000 00000000 001c0000 001c0000     ................
   2b3a0:	000c0000 000c0000 00000000 3fb00000     ...............?
   2b3b0:	200ffe40 00000000 00003800 00000000     @.. .....8......
   2b3c0:	00000060 00000200 00000000 0e040187     `...............
   2b3d0:	09800000 00000000 7f400000 9ff81fe5     ..........@.....
   2b3e0:	00000000 7fff0000 0000000f 17d00000     ................
   2b3f0:	00000004 000ff800 00000003 00003b3c     ............<;..
   2b400:	00000000 0003a340 00000000 00cff000     ....@...........
   2b410:	fff70000 031021fd ffffffff fbffffff     .....!..........
   2b420:	00001000 00000000 ffff0000 0001ffff     ................
   2b430:	00000000 00038000 00000000 80000000     ................
   2b440:	00000000 ffffffff 00000000 0000fc00     ................
   2b450:	06000000 00000000 00000000 3ff78000     ...............?
   2b460:	c0000000 00000000 00000000 00030000     ................
   2b470:	00000844 00000060 00000030 8003ffff     D...`...0.......
   2b480:	00000000 00003fc0 0003ff80 00000000     .....?..........
   2b490:	00000007 13c80000 00000000 00000020     ............ ...
   2b4a0:	00000000 00667e00 00001008 10000000     .....~f.........
   2b4b0:	00000000 c19d0000 00000002 00403000     .............0@.
   2b4c0:	00000000 00002120 40000000 00000000     .... !.....@....
   2b4d0:	0000ffff 0000ffff 00000000 01000000     ................
   2b4e0:	02000000 00000300 00000000 00000000     ................
	...
   2b500:	05000004 00000000 00000000 00000006     ................
   2b510:	00000000 00000700 000a0908 0e0d0c0b     ................
   2b520:	1000000f 00001211 16151413 18170000     ................
   2b530:	001b1a19 0000001c 0000001d 00000000     ................
   2b540:	00201f1e 00000000 00220021 00252423     .. .....!.".#$%.
   2b550:	26000000 00000000 00000000 00000000     ...&............
	...
   2b5c0:	27000000 00000028 00000000 00000000     ...'(...........
   2b5d0:	00000000 00290000 00000000 00000000     ......).........
	...
   2b608:	002a0000 00000000 00000000 00000000     ..*.............
   2b618:	00000000 002c2b00 00002d00 00000000     .....+,..-......
	...
   2b640:	00302f2e 00000000 00000000 00000000     ./0.............
	...
   2b658:	00000031 00000000 00000000 00000000     1...............
	...
   2b678:	32000000 00003300 00000000 00000000     ...2.3..........
	...
   2b698:	00003534 36353535 00000000 00000000     45..5556........
	...
   2b6e4:	20000000 00000000 00000001 00000000     ... ............
   2b6f4:	07c00000 0000f06e 87000000 00000000     ....n...........
   2b704:	00000060 00000000 000000f0 0001ffc0     `...............
   2b714:	00000000 00000002 ff000000 0000007f     ................
   2b724:	80000000 00000003 06780000 00000007     ..........x.....
   2b734:	001fef80 00000000 00080000 00000003     ................
   2b744:	7fc00000 00001e00 00000000 00000000     ................
   2b754:	40d38000 80000000 000007f8 00000003     ...@............
   2b764:	58000000 00800001 001f1fc0 00000000     ...X............
   2b774:	ff000000 4000005c 00000000 00000000     ....\..@........
   2b784:	a5f90000 0000000d 00000000 00000000     ................
   2b794:	b03c8000 30000001 00000000 00000000     ..<....0........
   2b7a4:	a7f80000 00000001 00000000 00000000     ................
   2b7b4:	00bf2800 e0000000 00000fbc 00000000     .(..............
   2b7c4:	06ff8000 000007fe 79f80000 0e7e0080     ...........y..~.
   2b7d4:	00000000 037ffc00 00000000 00000000     ................
   2b7e4:	bf7f0000 fffc0000 006dfcff 00000000     ..........m.....
   2b7f4:	b47e0000 000000bf 00000000 00a30000     ..~.............
	...
   2b80c:	00180000 00000000 001f0000 00000000     ................
   2b81c:	007f0000 00078000 00000000 60000000     ...............`
	...
   2b834:	f807c3a0 00000fe7 00003c00 0000001c     .........<......
   2b844:	00000000 ffffffff f87fffff ffffffff     ................
   2b854:	00201fff f8000010 0000fffe f9ffff7f     .. .............
   2b864:	000007db 007f0000 00000000 000007f0     ................
	...
   2b87c:	ffffffff ffffffff ffffffff ffffffff     ................
   2b88c:	0000ffff 00000000 00000000 00000000     ................
	...
   2b8f0:	ffffffff ffffffff ffffffff 0000ffff     ................
	...
   2b920:	000003f8 00000000 00000000 00000000     ................
	...
   2b940:	fffe0000 bfffffff 000000b6 00000000     ................
   2b950:	07ff0000 00000000 fffff800 00010000     ................
	...
   2b968:	9fc00000 00003d9f 00020000 ffff0000     .....=..........
   2b978:	000007ff 00000000 00000000 0001ffc0     ................
   2b988:	00000000 200ff800 0002b288 0000004a     ....... ....J...
   2b998:	0002b4d8 00000200 0002b6d8 00000037     ............7...
   2b9a8:	03020100 07060504 0a080908 0e0d0c0b     ................
   2b9b8:	1211100f 15021413 19181716 1d1c1b1a     ................
   2b9c8:	02201f1e 02020202 02020202 02022102     .. ..........!..
   2b9d8:	02020202 02020202 02020202 25242322     ............"#$%
   2b9e8:	02270226 02020228 022b2a29 2f2e2d2c     &.'.(...)*+.,-./
   2b9f8:	31020230 32020202 02020202 02020202     0..1...2........
   2ba08:	34020233 02020202 02020202 02020202     3..4............
   2ba18:	02020202 02020202 02020202 02020202     ................
   2ba28:	02020202 02020202 02020202 02020202     ................
   2ba38:	35020202 37023602 02020202 02020202     ...5.6.7........
   2ba48:	02390238 02020202 02020202 02020202     8.9.............
   2ba58:	02020202 02020202 02020202 02020202     ................
   2ba68:	02020202 02020202 02020202 02020202     ................
   2ba78:	02020202 02020202 02020202 02020202     ................
   2ba88:	02020202 02020202 02020202 02020202     ................
   2ba98:	02020202 02020202 02020202 02020202     ................
   2baa8:	02020202 02020202 02020202 02020202     ................
   2bab8:	02020202 02020202 02020202 02020202     ................
   2bac8:	02020202 02020202 02020202 02020202     ................
   2bad8:	02020202 02020202 02020202 02020202     ................
   2bae8:	02020202 02020202 02020202 02020202     ................
   2baf8:	02020202 02020202 02020202 02020202     ................
   2bb08:	02020202 02020202 02020202 02020202     ................
   2bb18:	02020202 02020202 02020202 02020202     ................
   2bb28:	02020202 02020202 02020202 02020202     ................
   2bb38:	02020202 02020202 02020202 02020202     ................
   2bb48:	02020202 02020202 02020202 02020202     ................
   2bb58:	02020202 02020202 02020202 02020202     ................
   2bb68:	02020202 02020202 02020202 02020202     ................
   2bb78:	02020202 02020202 02020202 02020202     ................
   2bb88:	02020202 02020202 02020202 02020202     ................
   2bb98:	02020202 02020202 02020202 02020202     ................
   2bba8:	02020202 02020202 02020202 02020202     ................
   2bbb8:	02020202 02020202 02020202 02020202     ................
   2bbc8:	02020202 02020202 02020202 02020202     ................
   2bbd8:	02020202 02020202 02020202 02020202     ................
   2bbe8:	02020202 02020202 02020202 02020202     ................
   2bbf8:	02020202 02020202 02020202 02020202     ................
   2bc08:	02020202 02020202 02020202 02020202     ................
   2bc18:	02020202 02020202 3c3b3a02 02020202     .........:;<....
   2bc28:	3e02023d 4241403f 46454443 47020202     =..>?@ABCDEF...G
   2bc38:	02020202 02020202 02020202 02020202     ................
   2bc48:	02020202 02020202 02020202 02020202     ................
   2bc58:	02020202 02020202 02020202 02020202     ................
   2bc68:	02020202 02020202 02020202 02020202     ................
   2bc78:	02020202 02020202 02020202 02020202     ................
   2bc88:	02020202 02020202 02020202 02020202     ................
   2bc98:	02020202 02020202 02020202 02020202     ................
   2bca8:	02020202 02020202 02020202 02020202     ................
   2bcb8:	02020202 02020202 02020202 02020202     ................
   2bcc8:	02020202 02020202 02020202 02020202     ................
   2bcd8:	02020202 02020202 02020202 02020202     ................
   2bce8:	02020202 02020202 02020202 02020202     ................
   2bcf8:	02020202 02020202 02020202 02020202     ................
   2bd08:	02020202 02020202 02020202 02020202     ................
   2bd18:	02020202 02020202 02020202 02020202     ................
   2bd28:	02020202 02020202 02020202 02020202     ................
   2bd38:	02020202 02020202 02020202 02020202     ................
   2bd48:	02020202 02020202 02020202 02020202     ................
   2bd58:	02020202 02020202 02020202 02020202     ................
   2bd68:	02020202 02020202 02020202 02020248     ............H...
   2bd78:	02020202 02020202 02020249 023b0202     ........I.....;.
   2bd88:	02020100 02030202 04020202 02060502     ................
   2bd98:	02020202 02020202 02020202 02020202     ................
   2bda8:	02020202 02020202 02020202 02020202     ................
   2bdb8:	02020202 02020202 02020202 02020202     ................
   2bdc8:	02020202 02020202 02020202 02020202     ................
   2bdd8:	02020202 02020202 02020202 02020202     ................
   2bde8:	02020202 02020202 02020202 02020202     ................
   2bdf8:	02020202 02020202 02020202 02020202     ................
   2be08:	02020202 02020202 02020202 02020202     ................
   2be18:	02020202 02020202 02020202 02020202     ................
   2be28:	02020202 02020202 02020202 02020202     ................
   2be38:	02020202 02020202 02020202 02020202     ................
   2be48:	02020202 02020202 02020202 02020202     ................
   2be58:	02020207 02020202 02020202 02020202     ................
   2be68:	02020202 02020202 02020202 02020202     ................
   2be78:	02020202 02020202 02020202 02020202     ................
   2be88:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..
   2be98:	646e6168 635f656c 0a70616f 00000000     handle_coap.....
   2bea8:	0000002c 00000022 00203a22 0000002d     ,..."...": .-...
   2beb8:	64257325 3630252e 00000064 2054454e     %s%d.%06d...NET 
   2bec8:	6c796170 2064616f 657a6973 0a642520     payload size %d.
   2bed8:	00000000                                ....

0002bedc <COAP_URI>:
   2bedc:	742f3276 676e6968 56492f73 43426952     v2/things/IVRiBC
   2beec:	48365263 435f7050 46495a63 465a4f66     cR6HPp_CcZIFfOZF
   2befc:	695f7a78 35696e7a 4b5f6378 676b2d4f     xz_izni5xc_KO-kg
   2bf0c:	59324153 00000038                       SA2Y8...

0002bf14 <COLLECTOR_NODE_HW_ID>:
   2bf14:	066aff57 50547878 67242949              W.j.xxTPI)$g

0002bf20 <SENSOR_NODE_HW_IDS>:
   2bf20:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   2bf30:	08070605 020b0a09 04030201 08070605     ................
   2bf40:	030b0a09 04030201 08070605 040b0a09     ................
   2bf50:	04030201 08070605 050b0a09 78323025     ............%02x
   2bf60:	00000000 3566726e 00000032 61727325     ....nrf52...%sra
   2bf70:	6d6f646e 76656420 20656369 25206469     ndom device id %
   2bf80:	00000a73 77687325 00206469              s...%shwid .

0002bf8c <sensor_network_encoding>:
   2bf8c:	00000032 0000003c 30313025 00786c6c     2...<...%010llx.
   2bf9c:	646f6e20 00002065 65737325 726f736e      node ..%ssensor
   2bfac:	25237325 00000a64 6f637325 63656c6c     %s#%d...%scollec
   2bfbc:	25726f74 00000a73 74737325 61646e61     tor%s...%sstanda
   2bfcc:	656e6f6c 000a7325 2054454e 7774656e     lone%s..NET netw
   2bfdc:	206b726f 20746f6e 64616572 00000a79     ork not ready...
   2bfec:	2054454e 00000000 73257325 0a732520     NET ....%s%s %s.
   2bffc:	00000000                                ....

0002c000 <sensor_node_addresses>:
   2c000:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   2c010:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   2c020:	b4b5b605 000000b3 725f636f 6f5f7065     ........oc_rep_o
   2c030:	00000000 635f636f 62635f6c 00000073     ....oc_cl_cbs...
   2c040:	000000ff 70616f63 6365725f 65766965     ....coap_receive
   2c050:	544f4e20 504d4920 454d454c 4445544e      NOT IMPLEMENTED
   2c060:	0000000a 0000007b 65757274 00000000     ....{...true....
   2c070:	736c6166 00000065 00007325 756c6c25     false...%s..%llu
   2c080:	00000000 646c6c25 00000000 0000005c     ....%lld....\...
   2c090:	0000745c 0000725c 00006e5c 0000665c     \t..\r..\n..\f..
   2c0a0:	0000625c 0000005b 0000005d 0000007d     \b..[...]...}...
   2c0b0:	736e6573 6e5f726f 6669746f 7476655f     sensor_notif_evt
   2c0c0:	00000073 65737341 40207472 25783020     s...Assert @ 0x%
   2c0d0:	00000a78 65737341 40207472 25783020     x...Assert @ 0x%
   2c0e0:	202d2078 253a7325 00000a64 61686e55     x - %s:%d...Unha
   2c0f0:	656c646e 6e692064 72726574 20747075     ndled interrupt 
   2c100:	646c2528 65202c29 70656378 6e6f6974     (%ld), exception
   2c110:	20707320 30257830 0a786c38 00000000      sp 0x%08lx.....
   2c120:	3a307220 30257830 20786c38 3a317220      r0:0x%08lx  r1:
   2c130:	30257830 20786c38 3a327220 30257830     0x%08lx  r2:0x%0
   2c140:	20786c38 3a337220 30257830 0a786c38     8lx  r3:0x%08lx.
   2c150:	00000000 3a347220 30257830 20786c38     .... r4:0x%08lx 
   2c160:	3a357220 30257830 20786c38 3a367220      r5:0x%08lx  r6:
   2c170:	30257830 20786c38 3a377220 30257830     0x%08lx  r7:0x%0
   2c180:	0a786c38 00000000 3a387220 30257830     8lx..... r8:0x%0
   2c190:	20786c38 3a397220 30257830 20786c38     8lx  r9:0x%08lx 
   2c1a0:	3a303172 30257830 20786c38 3a313172     r10:0x%08lx r11:
   2c1b0:	30257830 0a786c38 00000000 3a323172     0x%08lx.....r12:
   2c1c0:	30257830 20786c38 3a726c20 30257830     0x%08lx  lr:0x%0
   2c1d0:	20786c38 3a637020 30257830 20786c38     8lx  pc:0x%08lx 
   2c1e0:	3a727370 30257830 0a786c38 00000000     psr:0x%08lx.....
   2c1f0:	52534349 2578303a 786c3830 53464820     ICSR:0x%08lx HFS
   2c200:	78303a52 6c383025 46432078 303a5253     R:0x%08lx CFSR:0
   2c210:	38302578 000a786c 52414642 2578303a     x%08lx..BFAR:0x%
   2c220:	786c3830 464d4d20 303a5241 38302578     08lx MMFAR:0x%08
   2c230:	000a786c 6e69616d 00000000 656c6469     lx..main....idle
   2c240:	00000000 7379736d 0000315f              ....msys_1..

0002c24c <MemFile_methods>:
   2c24c:	00012bd1 00000000                       .+......

0002c254 <stdout>:
   2c254:	200001bc 5f656c62 5f706167 61647075     ... ble_gap_upda
   2c264:	00006574 28030010 28020010 28000010     te.....(...(...(

0002c274 <ble_gattc_err_dispatch>:
   2c274:	0001446b 000144af 000144ff 00014599     kD...D...D...E..
   2c284:	000145eb 00014639 0001468f 00014723     .E..9F...F..#G..
   2c294:	0001478d 000147ed 00014847 00014af5     .G...G..GH...J..
   2c2a4:	00014b9f 00014b7f 000151a1 5f656c62     .K...K...Q..ble_
   2c2b4:	74746167 72705f63 705f636f 006c6f6f     gattc_proc_pool.

0002c2c4 <ble_gattc_resume_dispatch>:
   2c2c4:	00000000 00015079 00014ff1 00014f59     ....yP...O..YO..
   2c2d4:	00014ecd 00014e49 00014dc3 00000000     .N..IN...M......
   2c2e4:	00000000 00014d1d 00000000 00000000     .....M..........
   2c2f4:	00014cdf 00014c4d 00000000              .L..ML......

0002c300 <ble_gattc_rx_exec_entries>:
   2c300:	0000000c 00014883 0000000d 000148d9     .....H.......H..

0002c310 <ble_gattc_rx_prep_entries>:
   2c310:	0000000c 000154ef 0000000d 0001545f     .....T......_T..

0002c320 <ble_gattc_rx_read_rsp_entries>:
   2c320:	00000007 0001472d 00000009 00014d43     ....-G......CM..
   2c330:	00000003 000153ed                       .....S..

0002c338 <ble_gattc_rx_read_type_complete_entries>:
   2c338:	00000003 00014f7f 00000004 00014ef3     .....O.......N..
   2c348:	00000005 00014e6f 00000008 00014797     ....oN.......G..

0002c358 <ble_gattc_rx_read_type_elem_entries>:
   2c358:	00000003 000152c5 00000004 00015249     .....R......IR..
   2c368:	00000005 00015353 00000008 0001515d     ....SS......]Q..

0002c378 <ble_gattc_tmo_dispatch>:
   2c378:	0001445d 000144a1 000144f1 0001458b     ]D...D...D...E..
   2c388:	000145dd 0001462b 00014681 00014715     .E..+F...F...G..
   2c398:	0001477f 000147df 00014839 00014ae9     .G...G..9H...J..
   2c3a8:	00014877 000148cd 00014aa1 28030010     wH...H...J.....(
   2c3b8:	5f656c62 74746167 6c635f73 66635f74     ble_gatts_clt_cf
   2c3c8:	6f705f67 00006c6f 5f656c62 685f7368     g_pool..ble_hs_h
   2c3d8:	655f6963 6f705f76 00006c6f 5f656c62     ci_ev_pool..ble_
   2c3e8:	635f7368 5f6e6e6f 6c6f6f70 00000000     hs_conn_pool....
   2c3f8:	5f656c62 685f7368 665f6963 00676172     ble_hs_hci_frag.

0002c408 <ble_hs_hci_evt_dispatch>:
   2c408:	0000003e 00017f21 00000013 00018061     >...!.......a...
   2c418:	00000005 00018015 00000008 00017fe5     ................
   2c428:	00000030 00017fbb 00000010 00017fa7     0...............

0002c438 <ble_hs_hci_evt_le_dispatch>:
   2c438:	00000000 000183c1 000181a9 00018339     ............9...
   2c448:	000182ff 000182bd 00018227 00000000     ........'.......
	...
   2c460:	000183c1 00018113 000180d7 00017f8b     ................
   2c470:	00017f8f 00017f93 00017f97 00017f9b     ................
   2c480:	00017f9f 00017fa3 5f656c62 705f7368     ........ble_hs_p
   2c490:	6f697265 5f636964 63736964 6f6f705f     eriodic_disc_poo
   2c4a0:	0000006c                                l...

0002c4a4 <ble_hs_pvcy_default_irk>:
   2c4a4:	16e28def 0d43ec4f 34dd5bbf b81e53c0     ....O.C..[.4.S..
   2c4b4:	5f656c62 6163326c 68635f70 705f6e61     ble_l2cap_chan_p
   2c4c4:	006c6f6f                                ool.

0002c4c8 <ble_l2cap_sig_dispatch>:
   2c4c8:	00000000 0001937d 00000000 00019243     ....}.......C...
   2c4d8:	00000000 00019243 00019243 00019243     ....C...C...C...
   2c4e8:	00000000 00019243 00000000 00019243     ....C.......C...
   2c4f8:	00000000 00019243 00000000 00019243     ....C.......C...
   2c508:	00000000 00019243 00019453 00019391     ....C...S.......
   2c518:	00019243 00019243 00019243 5f656c62     C...C...C...ble_
   2c528:	6163326c 69735f70 72705f67 705f636f     l2cap_sig_proc_p
   2c538:	006c6f6f                                ool.

0002c53c <ble_sm_dispatch>:
   2c53c:	00000000 0001a603 0001a81b 0001a76d     ............m...
   2c54c:	0001acd3 0001a1cb 0001a57d 0001a503     ........}.......
   2c55c:	0001a483 0001a409 0001a389 0001aea3     ................
   2c56c:	000197a9 000197a9 000197a9 5f656c62     ............ble_
   2c57c:	705f6d73 5f636f72 6c6f6f70 00000000     sm_proc_pool....

0002c58c <ble_sm_state_dispatch>:
   2c58c:	0001ac1f 00019fd3 00019fc1 00019f09     ................
   2c59c:	00019f73 00019e5f 00019e51 00019b9b     s..._...Q.......
   2c5ac:	000199ed 00000000 00000000              ............

0002c5b8 <ble_sm_lgcy_init_ioa>:
   2c5b8:	00020000 02000002 03030200 00030002     ................
   2c5c8:	00000000 00020303 00000003              ............

0002c5d4 <ble_sm_lgcy_resp_ioa>:
   2c5d4:	00030000 03000003 02020300 00020002     ................
   2c5e4:	00000000 00030202 00000002              ............

0002c5f0 <ble_uuid_base>:
   2c5f0:	5f9b34fb 80000080 00001000 00000000     .4._............

0002c600 <ble_att_rx_dispatch>:
   2c600:	00000001 0001b913 00000002 0001cd33     ............3...
   2c610:	00000003 0001b93b 00000004 0001cdc7     ....;...........
   2c620:	00000005 0001b9d7 00000006 0001ce31     ............1...
   2c630:	00000007 0001ba6d 00000008 0001cea9     ....m...........
   2c640:	00000009 0001baeb 0000000a 0001cf51     ............Q...
   2c650:	0000000b 0001bb87 0000000c 0001cfcd     ................
   2c660:	0000000d 0001bbc5 0000000e 0001d04d     ............M...
   2c670:	0000000f 0001bbd3 00000010 0001d089     ................
   2c680:	00000011 0001bc2b 00000012 0001d14b     ....+.......K...
   2c690:	00000013 0001bc83 00000016 0001d20d     ................
   2c6a0:	00000017 0001bcf3 00000018 0001d2bf     ................
   2c6b0:	00000019 0001bd5b 0000001b 0001d373     ....[.......s...
   2c6c0:	0000001d 0001d3b1 0000001e 0001bde7     ................
   2c6d0:	00000052 0001d1b7 5f656c62 5f747461     R.......ble_att_
   2c6e0:	5f727673 70657270 746e655f 705f7972     svr_prep_entry_p
   2c6f0:	006c6f6f 5f656c62 5f747461 5f727673     ool.ble_att_svr_
   2c700:	72746e65 6f705f79 00006c6f 5f656c62     entry_pool..ble_
   2c710:	5f696368 5f6d6172 5f646d63 6c6f6f70     hci_ram_cmd_pool
   2c720:	00000000 5f656c62 5f696368 5f6d6172     ....ble_hci_ram_
   2c730:	5f747665 705f6968 006c6f6f 5f656c62     evt_hi_pool.ble_
   2c740:	5f696368 5f6d6172 5f747665 705f6f6c     hci_ram_evt_lo_p
   2c750:	006c6f6f 00000000 01000000 02000000     ool.............
   2c760:	04000000 08000000 10000000 20000000     ............... 
   2c770:	40000000 80000000 1b000000 36000000     ...@...........6

0002c780 <sbox>:
   2c780:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
   2c790:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
   2c7a0:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
   2c7b0:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
   2c7c0:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
   2c7d0:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
   2c7e0:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
   2c7f0:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
   2c800:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
   2c810:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
   2c820:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
   2c830:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
   2c840:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
   2c850:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
   2c860:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
   2c870:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

0002c880 <nrf52k_flash_dev>:
   2c880:	0002c898 00000000 00080000 00000080     ................
   2c890:	00000001 000000ff                       ........

0002c898 <nrf52k_flash_funcs>:
   2c898:	0001e2f9 0001e229 0001e1b1 0001e209     ....)...........
   2c8a8:	00000000 0001e205 00000000              ............

0002c8b4 <nrf52_hal_timers>:
	...
   2c8c8:	20003da4 706d6574 7574735f 00305f62     .=. temp_stub_0.
   2c8d8:	20504d54 61657263 25206574 00000a73     TMP create %s...

0002c8e8 <g_temp_stub_sensor_driver>:
   2c8e8:	0001ede9 0001ecf1 00000000 00000000     ................
	...
   2c910:	20425453 64616572 6d657420 65732070     STB read temp se
   2c920:	726f736e 0000000a 5f656c62 00006c6c     nsor....ble_ll..

0002c930 <g_ble_ll_pdu_header_tx_time>:
   2c930:	005002d0 01ce002c                       ..P.,...

0002c938 <g_ble_ll_ctrl_pkt_lengths>:
   2c938:	1601070b 0100000c 00000808 17080105     ................
   2c948:	00000217 02020808 00000204 5f656c62     ............ble_
   2c958:	735f6c6c 5f6e6163 5f707564 6c6f6f70     ll_scan_dup_pool
   2c968:	00000000                                ....

0002c96c <g_ble_ll_supp_cmds>:
   2c96c:	00000020 00004000 00000000 22280000      ....@........("
	...
   2c984:	fffff700 0000000f 0ff9f000 07800000     ................

0002c994 <g_ble_sca_ppm_tbl>:
   2c994:	00fa01f4 00640096 0032004b 0014001e     ......d.K.2.....

0002c9a4 <g_ble_phy_chan_freq>:
   2c9a4:	0a080604 12100e0c 1c181614 2422201e     ............. "$
   2c9b4:	2c2a2826 3432302e 3c3a3836 4442403e     &(*,.02468:<>@BD
   2c9c4:	4c4a4846 501a024e                       FHJLN..P

0002c9cc <g_ble_phy_t_rxaddrdelay>:
   2c9cc:	11020611                                ....

0002c9d0 <g_ble_phy_t_rxenddelay>:
   2c9d0:	1602061b                                ....

0002c9d4 <g_ble_phy_t_txdelay>:
   2c9d4:	05030405                                ....

0002c9d8 <g_ble_phy_t_txenddelay>:
   2c9d8:	03030409 5f656c62 6f2f7368 735f7275     ....ble_hs/our_s
   2c9e8:	00006365 5f656c62 702f7368 5f726565     ec..ble_hs/peer_
   2c9f8:	00636573 5f656c62 632f7368 00646363     sec.ble_hs/cccd.
   2ca08:	5f72756f 00636573 72656570 6365735f     our_sec.peer_sec
   2ca18:	00000000 64636363 00000000 5f656c62     ....cccd....ble_
   2ca28:	00007368 0000002f                       hs../...

0002ca30 <sysflash_map_dflt>:
	...
   2ca38:	00004000 00000001 00008000 0003a000     .@..............
   2ca48:	00000002 00042000 0003a000 00000003     ..... ..........
   2ca58:	0007c000 00001000 00000010 00004000     .............@..
   2ca68:	00004000 00000011 0007d000 00003000     .@...........0..

0002ca78 <base64_chars>:
   2ca78:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   2ca88:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   2ca98:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   2caa8:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   2cab8:	00000000                                ....

/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 150196	    340	  17936	 168472	  29218	/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
