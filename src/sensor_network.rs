/* automatically generated by rust-bindgen */

pub const SENSOR_NETWORK_SIZE: u32 = 5;
pub type __uint8_t = ::cty::c_uchar;
pub type __uint16_t = ::cty::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_network_interface {
    pub iface_type: u8,
    pub network_device: *const ::cty::c_char,
    pub server_endpoint_size: u8,
    pub register_transport_func: ::core::option::Option<
        unsafe extern "C" fn(
            network_device: *const ::cty::c_char,
            server_endpoint: *mut ::cty::c_void,
            host: *const ::cty::c_char,
            port: u16,
            server_endpoint_size: u8,
        ) -> ::cty::c_int,
    >,
    pub transport_registered: u8,
}
#[test]
fn bindgen_test_layout_sensor_network_interface() {
    assert_eq!(
        ::core::mem::size_of::<sensor_network_interface>(),
        40usize,
        concat!("Size of: ", stringify!(sensor_network_interface))
    );
    assert_eq!(
        ::core::mem::align_of::<sensor_network_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(sensor_network_interface))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sensor_network_interface>())).iface_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_network_interface),
            "::",
            stringify!(iface_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sensor_network_interface>())).network_device as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_network_interface),
            "::",
            stringify!(network_device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sensor_network_interface>())).server_endpoint_size as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_network_interface),
            "::",
            stringify!(server_endpoint_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sensor_network_interface>())).register_transport_func
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_network_interface),
            "::",
            stringify!(register_transport_func)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sensor_network_interface>())).transport_registered as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_network_interface),
            "::",
            stringify!(transport_registered)
        )
    );
}
extern "C" {
    pub fn sensor_network_register_transport(iface_type: u8) -> ::cty::c_int;
}
extern "C" {
    pub fn sensor_network_init_post(iface_type: u8, uri: *const ::cty::c_char) -> bool;
}
extern "C" {
    pub fn sensor_network_do_post(iface_type: u8) -> bool;
}
extern "C" {
    pub fn sensor_network_init();
}
extern "C" {
    pub fn sensor_network_register_interface(
        iface: *const sensor_network_interface,
    ) -> ::cty::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sensor_network_endpoint {
    pub endpoint: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_sensor_network_endpoint() {
    assert_eq!(
        ::core::mem::size_of::<sensor_network_endpoint>(),
        16usize,
        concat!("Size of: ", stringify!(sensor_network_endpoint))
    );
    assert_eq!(
        ::core::mem::align_of::<sensor_network_endpoint>(),
        1usize,
        concat!("Alignment of ", stringify!(sensor_network_endpoint))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<sensor_network_endpoint>())).endpoint as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sensor_network_endpoint),
            "::",
            stringify!(endpoint)
        )
    );
}
extern "C" {
    pub static mut sensor_network_interfaces: [sensor_network_interface; 2usize];
}
extern "C" {
    pub static mut sensor_network_endpoints: [sensor_network_endpoint; 2usize];
}
extern "C" {
    pub static mut sensor_network_encoding: [::cty::c_int; 2usize];
}
extern "C" {
    pub static mut sensor_network_shortname: [*const ::cty::c_char; 2usize];
}
