{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            //  Combined install command to install VSCode Extensions and Mynewt.  Both are run concurrently.
            "label": "0Ô∏è‚É£ Install Apache Mynewt",
            "dependsOn": [
                "Install Extensions", 
                "Install Mynewt"
            ],
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Build the Bootloader.
            "label": "1Ô∏è‚É£ Build bluepill_boot",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " newt\\newt.exe build -v bluepill_boot && newt\\newt.exe size -v bluepill_boot && echo ‚úÖ ‚óæ Ô∏èDone! "
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " newt build -v bluepill_boot && newt size -v bluepill_boot && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " newt build -v bluepill_boot && newt size -v bluepill_boot && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "problemMatcher": [ "$gcc" ],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Build the Application.
            "label": "2Ô∏è‚É£ Build bluepill_my_sensor",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " scripts\\build-app.cmd && echo ‚úÖ ‚óæ Ô∏èDone! "
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/build-app.sh && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/build-app.sh && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [ 
                "$gcc",
                {
                    //  Problem matcher for GNU Linker, e.g. /Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/apps/my_sensor_app/src/ATParser.h:82: undefined reference to `operator delete[](void*)'
                    "fileLocation": [ "absolute" ],
                    "pattern": {
                        "regexp": "^(/.*):(\\d+):\\s+(.*)$",
                        "file": 1,
                        "line": 2,
                        "message": 3,
                        // "code": 3,
                        // "severity": 4,
                    }                    
                }
            ],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Create the Application ROM Image.
            "label": "3Ô∏è‚É£ Image bluepill_my_sensor",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " newt\\newt.exe create-image -v bluepill_my_sensor 1.0.0 && newt\\newt.exe size -v bluepill_my_sensor && echo ‚úÖ ‚óæ Ô∏èDone! "
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " newt create-image -v bluepill_my_sensor 1.0.0 && newt size -v bluepill_my_sensor && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " newt create-image -v bluepill_my_sensor 1.0.0 && newt size -v bluepill_my_sensor && echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Flash the Bootloader to Blue Pill.  We use custom scripts instead of "newt load" because "newt" runs in Ubuntu while the ST Link driver runs under Windows.
            "label": "4Ô∏è‚É£ Load bluepill_boot",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " openocd\\bin\\openocd -f scripts/flash-init.ocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/flash-boot.ocd "
                ]
            },
            "osx": {
                // Previously: " newt load -v bluepill_boot && echo '**** Done!' "
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " openocd/bin/openocd -f scripts/flash-init.ocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/flash-boot.ocd "
                ],
            },
            "linux": {
                // Previously: " newt load -v bluepill_boot && echo '**** Done!' "
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " openocd/bin/openocd -f scripts/flash-init.ocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/flash-boot.ocd "
                ],
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Flash the Application to Blue Pill.  We use custom scripts instead of "newt load" because "newt" runs in Ubuntu while the ST Link driver runs under Windows.
            "label": "5Ô∏è‚É£ Load bluepill_my_sensor",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " openocd\\bin\\openocd -f scripts/flash-init.ocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/flash-app.ocd "
                ]
            },
            "osx": {
                // Previously: " newt load -v bluepill_my_sensor && echo '**** Done!' "
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " openocd/bin/openocd -f scripts/flash-init.ocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/flash-app.ocd "
                ],
            },
            "linux": {
                // Previously: " newt load -v bluepill_my_sensor && echo '**** Done!' "
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " openocd/bin/openocd -f scripts/flash-init.ocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/flash-app.ocd "
                ],
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Generate Rust bindings for C libraries.
            "label": "‚õì Generate Rust bindings",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c", "-l",
                " set -e -x ; ./scripts/gen-bindings.sh ; echo ‚úÖ ‚óæ Ô∏èDone! "
            ],
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Build Rust library with macros expanded, output to logs/libmylib-expanded.rs.
            "label": "üëì Expand Rust macros",
            "type": "shell",
            "command": "bash",
            "args": [
                "-c", "-l",
                " set -e -x ; ./scripts/build-rustlib.sh ; echo ‚úÖ ‚óæ Ô∏èDone! "
            ],
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Generate documentation.
            "label": "üìñ Generate Doc",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " cargo doc --document-private-items && echo ‚úÖ ‚óæ Ô∏èDone! target/thumbv7m-none-eabi/doc "
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " set -e -x ; cargo doc --document-private-items ; echo ‚úÖ ‚óæ Ô∏èDone! target/thumbv7m-none-eabi/doc "
                ]
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " set -e -x ; cargo doc --document-private-items ; echo ‚úÖ ‚óæ Ô∏èDone! target/thumbv7m-none-eabi/doc "
                ]
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Remove all compiled files.
            "label": "üóë Clean",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " newt\\newt.exe clean -v all && rd /q /s target && echo ‚úÖ ‚óæ Ô∏èDone!"
                ]
            },
            "osx": {
                // Previously: " newt load -v bluepill_my_sensor && echo '**** Done!' "
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " newt clean -v all && rm -r target ; echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "linux": {
                // Previously: " newt load -v bluepill_my_sensor && echo '**** Done!' "
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " newt clean -v all && rm -r target ; echo ‚úÖ ‚óæ Ô∏èDone! "
                ],
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Install VSCode Extensions. They will be activated upon restarting VSCode.
            "label": "Install Extensions",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " code --force --install-extension sanaajani.taskrunnercode --install-extension marus25.cortex-debug --install-extension ms-vscode.cpptools --install-extension rust-lang.rust --install-extension bungcip.better-toml && echo Done! Please restart Visual Studio Code to activate the extensions"
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " code --force --install-extension sanaajani.taskrunnercode --install-extension marus25.cortex-debug --install-extension ms-vscode.cpptools --install-extension rust-lang.rust --install-extension bungcip.better-toml "
                ]
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " code --force --install-extension sanaajani.taskrunnercode --install-extension marus25.cortex-debug --install-extension ms-vscode.cpptools --install-extension rust-lang.rust --install-extension bungcip.better-toml "
                ]
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Install Mynewt source, build tools, sample.
            "label": "Install Mynewt",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " echo Done! Please restart Visual Studio Code to activate the extensions"
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/install-mac.sh "
                ]
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " scripts/install-linux.sh "
                ]
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        {
            //  Prompt the user to restart.
            "label": "Prompt Restart",
            "type": "shell",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    " echo Done! Please restart Visual Studio Code to activate the extensions "
                ]
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " echo Done! Please restart Visual Studio Code to activate the extensions "
                ]
            },
            "linux": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " echo Done! Please restart Visual Studio Code to activate the extensions "
                ]
            },
            "problemMatcher": [],
            "presentation": {
                "clear": true
            }
        },
        /*  For debug we now use the Cortex Debug Extension.
        {
            "label": "üí£ Debug bluepill_my_sensor",
            "type": "shell",
            "windows": {
                "command": "bash",
                "args": [
                    "-c", "-l",
                    " newt debug -v bluepill_my_sensor ",
                    //  "-n",
                ]
            },
            "osx": {
                "command": 
                " newt debug -v bluepill_my_sensor "
            },
            "linux": {
                "command": 
                " newt debug -v bluepill_my_sensor "
            },
            "problemMatcher": [
            ]
        },
        */
    ]
}
