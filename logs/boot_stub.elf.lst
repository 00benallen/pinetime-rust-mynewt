
c:/stm32bluepill-mynewt-sensor/bin/targets/stm32l4_boot/app/apps/boot_stub/boot_stub.elf:     file format elf32-littlearm
c:/stm32bluepill-mynewt-sensor/bin/targets/stm32l4_boot/app/apps/boot_stub/boot_stub.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000189

Program Header:
0x70000001 off    0x00010b10 vaddr 0x08000b10 paddr 0x08000b10 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00000b28 memsz 0x00000b28 flags r-x
    LOAD off    0x00020188 vaddr 0x20000188 paddr 0x08000b28 align 2**16
         filesz 0x00000010 memsz 0x00000030 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000188 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              00000b10  08000000  08000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx         00000018  08000b10  08000b10  00010b10  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .vector_relocation 00000188  20000000  20000000  00030000  2**0  ALLOC
  3 .coredata          00000000  20000188  20000188  00020198  2**0  CONTENTS
  4 .data              00000010  20000188  08000b28  00020188  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .corebss           00000000  20000198  20000198  00020198  2**0  CONTENTS
  6 .bss               00000020  20000198  08000b38  00020198  2**2  ALLOC
  7 .ARM.attributes    0000002f  00000000  00000000  00020198  2**0  CONTENTS, READONLY
  8 .comment           0000007f  00000000  00000000  000201c7  2**0  CONTENTS, READONLY
  9 .svc_table         00000004  00000000  00000000  00020246  2**0  CONTENTS, READONLY
 10 .debug_line        00006df6  00000000  00000000  0002024a  2**0  CONTENTS, READONLY, DEBUGGING
 11 .debug_info        0000e11e  00000000  00000000  00027040  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev      00002396  00000000  00000000  0003515e  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges     000008b0  00000000  00000000  000374f8  2**3  CONTENTS, READONLY, DEBUGGING
 14 .debug_str         000037b0  00000000  00000000  00037da8  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges      000007a8  00000000  00000000  0003b558  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc         00005d85  00000000  00000000  0003bd00  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame       00001550  00000000  00000000  00041a88  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .text	00000000 .text
08000b10 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
20000188 l    d  .coredata	00000000 .coredata
20000188 l    d  .data	00000000 .data
20000198 l    d  .corebss	00000000 .corebss
20000198 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup_stm32l476xx.o
f1e0f85f l       *ABS*	00000000 BootRAM
08000198 l       .text	00000000 LoopCopyDataInit
08000190 l       .text	00000000 CopyDataInit
080001ac l       .text	00000000 LoopFillZerobss
080001a6 l       .text	00000000 FillZerobss
080001bc l       .text	00000000 LoopFillZeroCoreBss
080001b6 l       .text	00000000 FillZeroCoreBss
080001ec l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 system_stm32l4xx.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 boot.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 hal_timer.c
08000308 l     F .text	00000050 stm32_tmr_reg_irq
08000358 l     F .text	0000002e hal_timer_cnt
08000388 l     F .text	00000168 stm32_hw_setup
08000580 l     F .text	00000010 stm32_tmr0_irq
080004f0 l     F .text	0000005a stm32_tmr_cbs
0800054a l     F .text	00000036 stm32_tmr_irq
08000abc l     O .text	0000000c stm32_tmr_devs
00000000 l    df *ABS*	00000000 stm32l4xx_hal_tim.c
00000000 l    df *ABS*	00000000 hal_timer_freq.c
00000000 l    df *ABS*	00000000 stm32l4xx_hal_rcc.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
08000a28 l       .text	00000000 SVC_User
08000a46 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 stm32l4_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
080001ec  w    F .text	00000002 RTC_Alarm_IRQHandler
080001ec  w    F .text	00000002 EXTI2_IRQHandler
080001ec  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08000ab4 g     O .text	00000008 APBPrescTable
080001ec  w    F .text	00000002 TIM8_CC_IRQHandler
200001b8 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
080001ec  w    F .text	00000002 DebugMon_Handler
20000188 g       .data	00000000 __data_start__
080008f8 g     F .text	00000024 HAL_RCC_GetPCLK1Freq
080001ec  w    F .text	00000002 TIM1_CC_IRQHandler
0800091c g     F .text	00000024 HAL_RCC_GetPCLK2Freq
080001ec  w    F .text	00000002 TSC_IRQHandler
080001ec  w    F .text	00000002 HardFault_Handler
08000590 g     F .text	00000134 hal_timer_init
080002ec g     F .text	0000001c hal_system_start
08000a76 g     F .text	0000000c SysTick_Handler
20000188 g       .coredata	00000000 __coredata_end__
080001ec  w    F .text	00000002 TAMP_STAMP_IRQHandler
08000b28 g       *ABS*	00000000 _sidata
080008ec g     F .text	0000000c HAL_RCC_GetHCLKFreq
08000a4c g     F .text	0000002a PendSV_Handler
080001ec  w    F .text	00000002 NMI_Handler
08000b28 g       .ARM.exidx	00000000 __exidx_end
08000000 g       .text	00000000 __isr_vector_start
080001ec  w    F .text	00000002 EXTI3_IRQHandler
080002c0 g     F .text	0000002c hal_system_reset
20000194 g       .data	00000000 __aeabi_unwind_cpp_pr0
08000b28 g       .ARM.exidx	00000000 __etext
20000198 g       .corebss	00000000 __corebss_start__
080001ec  w    F .text	00000002 LPTIM2_IRQHandler
080001ec  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
20000198 g       .bss	00000000 _sbss
080001ec  w    F .text	00000002 I2C3_ER_IRQHandler
080001ec  w    F .text	00000002 DFSDM1_FLT2_IRQHandler
080009d4 g     F .text	0000000a timer_handler
080009b8 g     F .text	0000000c os_cputime_init
080001ec  w    F .text	00000002 EXTI0_IRQHandler
080001ec  w    F .text	00000002 I2C2_EV_IRQHandler
00000000 g       *ABS*	00000000 _imghdr_size
080001ec  w    F .text	00000002 CAN1_RX0_IRQHandler
080001ec  w    F .text	00000002 FPU_IRQHandler
20000188 g     O .data	00000004 SystemCoreClock
080001ec  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800097c g     F .text	00000024 __assert_func
080001ec  w    F .text	00000002 UsageFault_Handler
080001ec  w    F .text	00000002 ADC1_2_IRQHandler
20018000 g       .bss	00000000 __HeapLimit
20000198 g       .bss	00000000 __bss_start__
080002b0 g     F .text	00000010 hal_debugger_connected
08000870 g     F .text	0000007c stm32_hal_timer_get_freq
20000188 g       .data	00000000 _sdata
080001ec  w    F .text	00000002 SPI1_IRQHandler
080001ec  w    F .text	00000002 TIM6_DAC_IRQHandler
200001b0 g     O .bss	00000004 g_current_task
080009de g     F .text	0000000c os_arch_save_sr
080001ec  w    F .text	00000002 TIM8_UP_IRQHandler
08000b10 g       .text	00000000 __exidx_start
080009ec g     F .text	00000014 os_set_env
080001ec  w    F .text	00000002 DMA2_Channel2_IRQHandler
080001ec  w    F .text	00000002 DMA1_Channel4_IRQHandler
080001ec  w    F .text	00000002 SAI2_IRQHandler
080001ec  w    F .text	00000002 DFSDM1_FLT3_IRQHandler
20000198 g       .corebss	00000000 __corebss_end__
0800026a g     F .text	00000002 _init
080001ec  w    F .text	00000002 USART3_IRQHandler
200001b8 g       .bss	00000000 _ebss
080001ec  w    F .text	00000002 DMA1_Channel7_IRQHandler
08000188  w    F .text	00000042 Reset_Handler
08000788 g     F .text	000000c8 TIM_Base_SetConfig
080001ec  w    F .text	00000002 CAN1_RX1_IRQHandler
080001ec  w    F .text	00000002 LCD_IRQHandler
080001ec  w    F .text	00000002 UART5_IRQHandler
080001ec  w    F .text	00000002 ADC3_IRQHandler
08000a82 g     F .text	0000001e os_default_irq_asm
080001ec  w    F .text	00000002 TIM4_IRQHandler
080001ec  w    F .text	00000002 DMA2_Channel1_IRQHandler
20000000 g       .bss	00000000 _ram_start
080001ec  w    F .text	00000002 QUADSPI_IRQHandler
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
080001ec  w    F .text	00000002 I2C1_EV_IRQHandler
20000198 g       .data	00000000 __data_end__
080001ec  w    F .text	00000002 DMA1_Channel6_IRQHandler
200001ac g     O .bss	00000004 g_os_time
080001ec  w    F .text	00000002 UART4_IRQHandler
080001ec  w    F .text	00000002 DMA2_Channel4_IRQHandler
200001b8 g       .bss	00000000 __bss_end__
080001ec  w    F .text	00000002 TIM3_IRQHandler
080001ec  w    F .text	00000002 RCC_IRQHandler
080001ec  w    F .text	00000002 DMA1_Channel1_IRQHandler
080001ec g       .text	00000002 Default_Handler
0800025c g     F .text	0000000e _start
080001ec  w    F .text	00000002 DMA2_Channel7_IRQHandler
08000a00 g     F .text	00000006 os_arch_init_task_stack
080001ec  w    F .text	00000002 EXTI15_10_IRQHandler
080009a0 g     F .text	00000018 os_default_irq
080001ec  w    F .text	00000002 TIM7_IRQHandler
080001ec  w    F .text	00000002 SDMMC1_IRQHandler
200001b4 g     O .bss	00000004 g_os_last_ctx_sw_time
080001ec  w    F .text	00000002 TIM5_IRQHandler
20000188 g       .coredata	00000000 __coredata_start__
080001ec  w    F .text	00000002 I2C3_EV_IRQHandler
20000198 g       .corebss	00000000 __ecorebss
080001ec  w    F .text	00000002 EXTI9_5_IRQHandler
080006c4 g     F .text	000000c4 hal_timer_config
080001ec  w    F .text	00000002 RTC_WKUP_IRQHandler
080001ec  w    F .text	00000002 PVD_PVM_IRQHandler
080001ec  w    F .text	00000002 SPI2_IRQHandler
080001ec  w    F .text	00000002 MemManage_Handler
08000000 g       .text	00000000 __isr_vector
0800026c g     F .text	00000014 main
080001ec  w    F .text	00000002 CAN1_TX_IRQHandler
08000a06 g     F .text	00000046 SVC_Handler
080001ec  w    F .text	00000002 DMA2_Channel5_IRQHandler
08000940 g     F .text	0000003c HAL_RCC_GetClockConfig
080001ec  w    F .text	00000002 DMA1_Channel5_IRQHandler
080001ec  w    F .text	00000002 EXTI4_IRQHandler
080001f0 g     F .text	00000038 SystemInit
080001ec  w    F .text	00000002 RNG_IRQHandler
080001ec  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
080001ec  w    F .text	00000002 DMA1_Channel3_IRQHandler
080001ec  w    F .text	00000002 COMP_IRQHandler
2000019c g     O .bss	00000010 stm32_tmr0
20018000 g       .bss	00000000 __StackTop
080001ec  w    F .text	00000002 WWDG_IRQHandler
080001ec  w    F .text	00000002 LPUART1_IRQHandler
080001ec  w    F .text	00000002 DMA2_Channel6_IRQHandler
08000ac8 g     O .text	00000048 sysflash_map_dflt
080001ec  w    F .text	00000002 TIM2_IRQHandler
08000188 g       .text	00000000 __isr_vector_end
20018000 g     O .text	00000004 _estack
080001ec  w    F .text	00000002 EXTI1_IRQHandler
2000018c g     O .data	00000008 g_os_run_list
20000198 g       .data	00000000 _edata
08000228 g     F .text	00000034 NVIC_Relocate
20000198 g     O .bss	00000004 os_flags
20018000 g       *ABS*	00000000 __StackLimit
080001ec  w    F .text	00000002 USART2_IRQHandler
080001ec  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
08000000 g     O .text	00000000 g_pfnVectors
080001ec  w    F .text	00000002 I2C2_ER_IRQHandler
080001ec  w    F .text	00000002 DMA1_Channel2_IRQHandler
080001ec  w    F .text	00000002 TIM8_BRK_IRQHandler
08000850 g     F .text	00000020 TIM_CCxChannelCmd
080001ec  w    F .text	00000002 CAN1_SCE_IRQHandler
080001ec  w    F .text	00000002 FLASH_IRQHandler
080002a8 g     F .text	00000006 _exit
080001ec  w    F .text	00000002 BusFault_Handler
080001ec  w    F .text	00000002 USART1_IRQHandler
080001ec  w    F .text	00000002 OTG_FS_IRQHandler
080001ec  w    F .text	00000002 SPI3_IRQHandler
080009c4 g     F .text	00000010 os_time_advance
080001ec  w    F .text	00000002 I2C1_ER_IRQHandler
080001ec  w    F .text	00000002 FMC_IRQHandler
080001ec  w    F .text	00000002 SWPMI1_IRQHandler
080001ec  w    F .text	00000002 LPTIM1_IRQHandler
08000280 g     F .text	00000028 hal_bsp_init
08000b28 g       *ABS*	00000000 __ecoredata
080001ec  w    F .text	00000002 SAI1_IRQHandler
080001ec  w    F .text	00000002 DMA2_Channel3_IRQHandler
080001ec  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler



Disassembly of section .text:

08000000 <__isr_vector>:
 8000000:	20018000 	.word	0x20018000
 8000004:	08000189 	.word	0x08000189
 8000008:	080001ed 	.word	0x080001ed
 800000c:	080001ed 	.word	0x080001ed
 8000010:	080001ed 	.word	0x080001ed
 8000014:	080001ed 	.word	0x080001ed
 8000018:	080001ed 	.word	0x080001ed
	...
 800002c:	08000a07 	.word	0x08000a07
 8000030:	080001ed 	.word	0x080001ed
 8000034:	00000000 	.word	0x00000000
 8000038:	08000a4d 	.word	0x08000a4d
 800003c:	08000a77 	.word	0x08000a77
 8000040:	080001ed 	.word	0x080001ed
 8000044:	080001ed 	.word	0x080001ed
 8000048:	080001ed 	.word	0x080001ed
 800004c:	080001ed 	.word	0x080001ed
 8000050:	080001ed 	.word	0x080001ed
 8000054:	080001ed 	.word	0x080001ed
 8000058:	080001ed 	.word	0x080001ed
 800005c:	080001ed 	.word	0x080001ed
 8000060:	080001ed 	.word	0x080001ed
 8000064:	080001ed 	.word	0x080001ed
 8000068:	080001ed 	.word	0x080001ed
 800006c:	080001ed 	.word	0x080001ed
 8000070:	080001ed 	.word	0x080001ed
 8000074:	080001ed 	.word	0x080001ed
 8000078:	080001ed 	.word	0x080001ed
 800007c:	080001ed 	.word	0x080001ed
 8000080:	080001ed 	.word	0x080001ed
 8000084:	080001ed 	.word	0x080001ed
 8000088:	080001ed 	.word	0x080001ed
 800008c:	080001ed 	.word	0x080001ed
 8000090:	080001ed 	.word	0x080001ed
 8000094:	080001ed 	.word	0x080001ed
 8000098:	080001ed 	.word	0x080001ed
 800009c:	080001ed 	.word	0x080001ed
 80000a0:	080001ed 	.word	0x080001ed
 80000a4:	080001ed 	.word	0x080001ed
 80000a8:	080001ed 	.word	0x080001ed
 80000ac:	080001ed 	.word	0x080001ed
 80000b0:	080001ed 	.word	0x080001ed
 80000b4:	080001ed 	.word	0x080001ed
 80000b8:	080001ed 	.word	0x080001ed
 80000bc:	080001ed 	.word	0x080001ed
 80000c0:	080001ed 	.word	0x080001ed
 80000c4:	080001ed 	.word	0x080001ed
 80000c8:	080001ed 	.word	0x080001ed
 80000cc:	080001ed 	.word	0x080001ed
 80000d0:	080001ed 	.word	0x080001ed
 80000d4:	080001ed 	.word	0x080001ed
 80000d8:	080001ed 	.word	0x080001ed
 80000dc:	080001ed 	.word	0x080001ed
 80000e0:	080001ed 	.word	0x080001ed
 80000e4:	080001ed 	.word	0x080001ed
 80000e8:	080001ed 	.word	0x080001ed
 80000ec:	080001ed 	.word	0x080001ed
 80000f0:	080001ed 	.word	0x080001ed
 80000f4:	080001ed 	.word	0x080001ed
 80000f8:	080001ed 	.word	0x080001ed
 80000fc:	080001ed 	.word	0x080001ed
 8000100:	080001ed 	.word	0x080001ed
 8000104:	080001ed 	.word	0x080001ed
 8000108:	080001ed 	.word	0x080001ed
 800010c:	080001ed 	.word	0x080001ed
 8000110:	080001ed 	.word	0x080001ed
 8000114:	080001ed 	.word	0x080001ed
 8000118:	080001ed 	.word	0x080001ed
 800011c:	080001ed 	.word	0x080001ed
 8000120:	080001ed 	.word	0x080001ed
 8000124:	080001ed 	.word	0x080001ed
 8000128:	080001ed 	.word	0x080001ed
 800012c:	080001ed 	.word	0x080001ed
 8000130:	080001ed 	.word	0x080001ed
 8000134:	080001ed 	.word	0x080001ed
 8000138:	080001ed 	.word	0x080001ed
 800013c:	080001ed 	.word	0x080001ed
 8000140:	080001ed 	.word	0x080001ed
 8000144:	080001ed 	.word	0x080001ed
 8000148:	080001ed 	.word	0x080001ed
 800014c:	080001ed 	.word	0x080001ed
 8000150:	080001ed 	.word	0x080001ed
 8000154:	080001ed 	.word	0x080001ed
 8000158:	080001ed 	.word	0x080001ed
 800015c:	080001ed 	.word	0x080001ed
 8000160:	080001ed 	.word	0x080001ed
 8000164:	080001ed 	.word	0x080001ed
 8000168:	080001ed 	.word	0x080001ed
 800016c:	080001ed 	.word	0x080001ed
 8000170:	080001ed 	.word	0x080001ed
 8000174:	080001ed 	.word	0x080001ed
 8000178:	080001ed 	.word	0x080001ed
 800017c:	00000000 	.word	0x00000000
 8000180:	080001ed 	.word	0x080001ed
 8000184:	080001ed 	.word	0x080001ed

08000188 <Reset_Handler>:

  .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000188:	f8df d040 	ldr.w	sp, [pc, #64]	; 80001cc <LoopFillZeroCoreBss+0x10>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800018c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800018e:	e003      	b.n	8000198 <LoopCopyDataInit>

08000190 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000190:	4b0f      	ldr	r3, [pc, #60]	; (80001d0 <LoopFillZeroCoreBss+0x14>)
  ldr  r3, [r3, r1]
 8000192:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000194:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000196:	3104      	adds	r1, #4

08000198 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000198:	480e      	ldr	r0, [pc, #56]	; (80001d4 <LoopFillZeroCoreBss+0x18>)
  ldr  r3, =_edata
 800019a:	4b0f      	ldr	r3, [pc, #60]	; (80001d8 <LoopFillZeroCoreBss+0x1c>)
  adds  r2, r0, r1
 800019c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800019e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80001a0:	d3f6      	bcc.n	8000190 <CopyDataInit>

  ldr  r2, =_sbss
 80001a2:	4a0e      	ldr	r2, [pc, #56]	; (80001dc <LoopFillZeroCoreBss+0x20>)
  b  LoopFillZerobss
 80001a4:	e002      	b.n	80001ac <LoopFillZerobss>

080001a6 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80001a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80001a8:	f842 3b04 	str.w	r3, [r2], #4

080001ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80001ac:	4b0c      	ldr	r3, [pc, #48]	; (80001e0 <LoopFillZeroCoreBss+0x24>)
  cmp  r2, r3
 80001ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80001b0:	d3f9      	bcc.n	80001a6 <FillZerobss>

/*
 * mynewt specific corebss clearing.
 */
  ldr   r2, =__corebss_start__
 80001b2:	4a0c      	ldr	r2, [pc, #48]	; (80001e4 <LoopFillZeroCoreBss+0x28>)
  b     LoopFillZeroCoreBss
 80001b4:	e002      	b.n	80001bc <LoopFillZeroCoreBss>

080001b6 <FillZeroCoreBss>:

/* Zero fill the bss segment. */
FillZeroCoreBss:
  movs  r3, #0
 80001b6:	2300      	movs	r3, #0
  str   r3, [r2], #4
 80001b8:	f842 3b04 	str.w	r3, [r2], #4

080001bc <LoopFillZeroCoreBss>:

LoopFillZeroCoreBss:
  ldr   r3, =__corebss_end__
 80001bc:	4b0a      	ldr	r3, [pc, #40]	; (80001e8 <LoopFillZeroCoreBss+0x2c>)
  cmp   r2, r3
 80001be:	429a      	cmp	r2, r3
  bcc   FillZeroCoreBss
 80001c0:	d3f9      	bcc.n	80001b6 <FillZeroCoreBss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80001c2:	f000 f815 	bl	80001f0 <SystemInit>
/* Call the libc entry point.*/
  bl  _start
 80001c6:	f000 f849 	bl	800025c <_start>
 80001ca:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001cc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80001d0:	08000b28 	.word	0x08000b28
  ldr  r0, =_sdata
 80001d4:	20000188 	.word	0x20000188
  ldr  r3, =_edata
 80001d8:	20000198 	.word	0x20000198
  ldr  r2, =_sbss
 80001dc:	20000198 	.word	0x20000198
  ldr  r3, = _ebss
 80001e0:	200001b8 	.word	0x200001b8
  ldr   r2, =__corebss_start__
 80001e4:	20000198 	.word	0x20000198
  ldr   r3, =__corebss_end__
 80001e8:	20000198 	.word	0x20000198

080001ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80001ec:	e7fe      	b.n	80001ec <ADC1_2_IRQHandler>
	...

080001f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80001f0:	b508      	push	{r3, lr}
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80001f2:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <SystemInit+0x34>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	f042 0201 	orr.w	r2, r2, #1
 80001fa:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001fc:	2100      	movs	r1, #0
 80001fe:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8000206:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800020a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800020c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000210:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000218:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800021a:	6199      	str	r1, [r3, #24]

  /* Relocate the vector table */
  NVIC_Relocate();
 800021c:	f000 f804 	bl	8000228 <NVIC_Relocate>
}
 8000220:	bd08      	pop	{r3, pc}
 8000222:	bf00      	nop
 8000224:	40021000 	.word	0x40021000

08000228 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
 8000228:	4a09      	ldr	r2, [pc, #36]	; (8000250 <NVIC_Relocate+0x28>)
 800022a:	4b0a      	ldr	r3, [pc, #40]	; (8000254 <NVIC_Relocate+0x2c>)
 800022c:	429a      	cmp	r2, r3
 800022e:	d00a      	beq.n	8000246 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
 8000230:	2300      	movs	r3, #0
 8000232:	e006      	b.n	8000242 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
 8000234:	4a07      	ldr	r2, [pc, #28]	; (8000254 <NVIC_Relocate+0x2c>)
 8000236:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800023a:	4a05      	ldr	r2, [pc, #20]	; (8000250 <NVIC_Relocate+0x28>)
 800023c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
 8000240:	3301      	adds	r3, #1
 8000242:	2b61      	cmp	r3, #97	; 0x61
 8000244:	ddf6      	ble.n	8000234 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
 8000246:	4a02      	ldr	r2, [pc, #8]	; (8000250 <NVIC_Relocate+0x28>)
 8000248:	4b03      	ldr	r3, [pc, #12]	; (8000258 <NVIC_Relocate+0x30>)
 800024a:	609a      	str	r2, [r3, #8]
#endif
}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	20000000 	.word	0x20000000
 8000254:	08000000 	.word	0x08000000
 8000258:	e000ed00 	.word	0xe000ed00

0800025c <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
 800025c:	b508      	push	{r3, lr}
#if !MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    rc = main(0, NULL);
 800025e:	2100      	movs	r1, #0
 8000260:	4608      	mov	r0, r1
 8000262:	f000 f803 	bl	800026c <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
 8000266:	f000 f81f 	bl	80002a8 <_exit>

0800026a <_init>:
}

void
_init(void)
{
}
 800026a:	4770      	bx	lr

0800026c <main>:
void *_estack;  //  End of stack, defined in Linker Script.
extern const struct flash_area sysflash_map_dflt[];  //  Contains addresses of flash sections. Defined in bin/targets/bluepill_boot/generated/src/bluepill_boot-sysflash.c

int
main(void)
{
 800026c:	b508      	push	{r3, lr}
    //  This is a stub bootloader for Blue Pill.  We jump straight into the application.
    //  This simple bootloader allows the application to take up more ROM space.
    hal_bsp_init();
 800026e:	f000 f807 	bl	8000280 <hal_bsp_init>

    //  img_start points to the STM32 Vector Table for the app...
    //  First word contains initial MSP value (estack = end of RAM)
    //  Second word contains address of entry point (Reset_Handler = 0x0800112d)
    void *img_start = (void *) (
        sysflash_map_dflt[1].fa_off  //  Offset of FLASH_AREA_IMAGE_0 (application image): 0x08001000
 8000272:	4b02      	ldr	r3, [pc, #8]	; (800027c <main+0x10>)
 8000274:	6918      	ldr	r0, [r3, #16]
        + 0x20                       //  Size of Mynewt image header
    );  //  Equals 0x08001020 (__isr_vector)

    //  Jump to Reset_Handler of the application. Uses first word and second word of img_start.
    hal_system_start(img_start);
 8000276:	3020      	adds	r0, #32
 8000278:	f000 f838 	bl	80002ec <hal_system_start>
 800027c:	08000ac8 	.word	0x08000ac8

08000280 <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
 8000280:	b508      	push	{r3, lr}
      OS_DEV_INIT_PRIMARY, 0, uart_hal_init, (void *)&uart2_cfg);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(TIMER_0)
    hal_timer_init(0, TIM2);
 8000282:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000286:	2000      	movs	r0, #0
 8000288:	f000 f982 	bl	8000590 <hal_timer_init>
    rc = hal_spi_init(0, &spi0_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif

#if (MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0)
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
 800028c:	4805      	ldr	r0, [pc, #20]	; (80002a4 <hal_bsp_init+0x24>)
 800028e:	f000 fb93 	bl	80009b8 <os_cputime_init>
    assert(rc == 0);
 8000292:	b900      	cbnz	r0, 8000296 <hal_bsp_init+0x16>

#if MYNEWT_VAL(I2C_2)
    rc = hal_i2c_init(2, &i2c_cfg2);
    assert(rc == 0);
#endif
}
 8000294:	bd08      	pop	{r3, pc}
    assert(rc == 0);
 8000296:	2300      	movs	r3, #0
 8000298:	461a      	mov	r2, r3
 800029a:	4619      	mov	r1, r3
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fb6d 	bl	800097c <__assert_func>
 80002a2:	bf00      	nop
 80002a4:	000f4240 	.word	0x000f4240

080002a8 <_exit>:

void _exit(int status);

void
_exit(int status)
{
 80002a8:	b508      	push	{r3, lr}
    hal_system_reset();
 80002aa:	f000 f809 	bl	80002c0 <hal_system_reset>
	...

080002b0 <hal_debugger_connected>:
hal_debugger_connected(void)
{
#if (__CORTEX_M == 0)
    return 0;
#else
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
 80002b0:	4b02      	ldr	r3, [pc, #8]	; (80002bc <hal_debugger_connected+0xc>)
 80002b2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80002b4:	f000 0001 	and.w	r0, r0, #1
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	e000edf0 	.word	0xe000edf0

080002c0 <hal_system_reset>:
{
 80002c0:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
 80002c2:	f7ff fff5 	bl	80002b0 <hal_debugger_connected>
 80002c6:	b100      	cbz	r0, 80002ca <hal_system_reset+0xa>
            asm("bkpt");
 80002c8:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002ca:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80002ce:	4905      	ldr	r1, [pc, #20]	; (80002e4 <hal_system_reset+0x24>)
 80002d0:	68ca      	ldr	r2, [r1, #12]
 80002d2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80002d6:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <hal_system_reset+0x28>)
 80002d8:	4313      	orrs	r3, r2
 80002da:	60cb      	str	r3, [r1, #12]
 80002dc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80002e0:	bf00      	nop
 80002e2:	e7fd      	b.n	80002e0 <hal_system_reset+0x20>
 80002e4:	e000ed00 	.word	0xe000ed00
 80002e8:	05fa0004 	.word	0x05fa0004

080002ec <hal_system_start>:
 *
 * @param hdr                   The header for the image to boot.
 */
void
hal_system_start(void *img_start)
{
 80002ec:	b508      	push	{r3, lr}
    uint32_t base0entry;
    uint32_t jump_addr;
    __attribute__((noreturn)) void (*fn)(void);

    /* First word contains initial MSP value. */
    __set_MSP(*(uint32_t *)img_start);
 80002ee:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80002f0:	f383 8808 	msr	MSP, r3

    /* Second word contains address of entry point (Reset_Handler). */
    base0entry = *(uint32_t *)(img_start + 4);
 80002f4:	6843      	ldr	r3, [r0, #4]
    jump_addr = base0entry;
    fn = (void *)jump_addr;

    STM32_HAL_FLASH_REMAP();
 80002f6:	4a03      	ldr	r2, [pc, #12]	; (8000304 <hal_system_start+0x18>)
 80002f8:	2100      	movs	r1, #0
 80002fa:	6011      	str	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80002fc:	f3bf 8f4f 	dsb	sy

    /* Jump to image. */
    fn();
 8000300:	4798      	blx	r3
 8000302:	bf00      	nop
 8000304:	40010000 	.word	0x40010000

08000308 <stm32_tmr_reg_irq>:
  if ((int32_t)(IRQn) >= 0)
 8000308:	2800      	cmp	r0, #0
 800030a:	db17      	blt.n	800033c <stm32_tmr_reg_irq+0x34>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 8000310:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000314:	22f0      	movs	r2, #240	; 0xf0
 8000316:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  uint32_t vectors = (uint32_t )SCB->VTOR;
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <stm32_tmr_reg_irq+0x44>)
 800031c:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
 800031e:	f100 0210 	add.w	r2, r0, #16
 8000322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  if ((int32_t)(IRQn) >= 0)
 8000326:	2800      	cmp	r0, #0
 8000328:	db07      	blt.n	800033a <stm32_tmr_reg_irq+0x32>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800032a:	f000 021f 	and.w	r2, r0, #31
 800032e:	0940      	lsrs	r0, r0, #5
 8000330:	2301      	movs	r3, #1
 8000332:	4093      	lsls	r3, r2
 8000334:	4a06      	ldr	r2, [pc, #24]	; (8000350 <stm32_tmr_reg_irq+0x48>)
 8000336:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
stm32_tmr_reg_irq(IRQn_Type irqn, uint32_t func)
{
    NVIC_SetPriority(irqn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irqn, func);
    NVIC_EnableIRQ(irqn);
}
 800033a:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033c:	f000 020f 	and.w	r2, r0, #15
 8000340:	4b04      	ldr	r3, [pc, #16]	; (8000354 <stm32_tmr_reg_irq+0x4c>)
 8000342:	4413      	add	r3, r2
 8000344:	22f0      	movs	r2, #240	; 0xf0
 8000346:	761a      	strb	r2, [r3, #24]
 8000348:	e7e7      	b.n	800031a <stm32_tmr_reg_irq+0x12>
 800034a:	bf00      	nop
 800034c:	e000ed00 	.word	0xe000ed00
 8000350:	e000e100 	.word	0xe000e100
 8000354:	e000ecfc 	.word	0xe000ecfc

08000358 <hal_timer_cnt>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000358:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800035c:	b672      	cpsid	i
{
    uint32_t cnt;
    int sr;

    __HAL_DISABLE_INTERRUPTS(sr);
    if (tmr->sht_regs->SR & TIM_SR_UIF) {
 800035e:	6803      	ldr	r3, [r0, #0]
 8000360:	6919      	ldr	r1, [r3, #16]
 8000362:	f011 0f01 	tst.w	r1, #1
 8000366:	d007      	beq.n	8000378 <hal_timer_cnt+0x20>
        /*
         * Just overflowed
         */
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 8000368:	6841      	ldr	r1, [r0, #4]
 800036a:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 800036e:	6041      	str	r1, [r0, #4]
        tmr->sht_regs->SR &= ~TIM_SR_UIF;
 8000370:	6919      	ldr	r1, [r3, #16]
 8000372:	f021 0101 	bic.w	r1, r1, #1
 8000376:	6119      	str	r1, [r3, #16]
    }
    cnt = tmr->sht_oflow + tmr->sht_regs->CNT;
 8000378:	6843      	ldr	r3, [r0, #4]
 800037a:	6801      	ldr	r1, [r0, #0]
 800037c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800037e:	4418      	add	r0, r3
    __HAL_ENABLE_INTERRUPTS(sr);
 8000380:	b902      	cbnz	r2, 8000384 <hal_timer_cnt+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000382:	b662      	cpsie	i

    return cnt;
}
 8000384:	4770      	bx	lr
	...

08000388 <stm32_hw_setup>:
{
 8000388:	b530      	push	{r4, r5, lr}
 800038a:	b089      	sub	sp, #36	; 0x24
    switch (num) {
 800038c:	b9d8      	cbnz	r0, 80003c6 <stm32_hw_setup+0x3e>
 800038e:	460c      	mov	r4, r1
        func = (uint32_t)stm32_tmr0_irq;
 8000390:	4d4e      	ldr	r5, [pc, #312]	; (80004cc <stm32_hw_setup+0x144>)
    if (regs == TIM1) {
 8000392:	4b4f      	ldr	r3, [pc, #316]	; (80004d0 <stm32_hw_setup+0x148>)
 8000394:	4299      	cmp	r1, r3
 8000396:	d01c      	beq.n	80003d2 <stm32_hw_setup+0x4a>
    if (regs == TIM2) {
 8000398:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800039c:	d028      	beq.n	80003f0 <stm32_hw_setup+0x68>
    if (regs == TIM3) {
 800039e:	4b4d      	ldr	r3, [pc, #308]	; (80004d4 <stm32_hw_setup+0x14c>)
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d034      	beq.n	800040e <stm32_hw_setup+0x86>
    if (regs == TIM4) {
 80003a4:	4b4c      	ldr	r3, [pc, #304]	; (80004d8 <stm32_hw_setup+0x150>)
 80003a6:	429c      	cmp	r4, r3
 80003a8:	d040      	beq.n	800042c <stm32_hw_setup+0xa4>
    if (regs == TIM8) {
 80003aa:	4b4c      	ldr	r3, [pc, #304]	; (80004dc <stm32_hw_setup+0x154>)
 80003ac:	429c      	cmp	r4, r3
 80003ae:	d04c      	beq.n	800044a <stm32_hw_setup+0xc2>
    if (regs == TIM15) {
 80003b0:	4b4b      	ldr	r3, [pc, #300]	; (80004e0 <stm32_hw_setup+0x158>)
 80003b2:	429c      	cmp	r4, r3
 80003b4:	d05c      	beq.n	8000470 <stm32_hw_setup+0xe8>
    if (regs == TIM16) {
 80003b6:	4b4b      	ldr	r3, [pc, #300]	; (80004e4 <stm32_hw_setup+0x15c>)
 80003b8:	429c      	cmp	r4, r3
 80003ba:	d068      	beq.n	800048e <stm32_hw_setup+0x106>
    if (regs == TIM17) {
 80003bc:	4b4a      	ldr	r3, [pc, #296]	; (80004e8 <stm32_hw_setup+0x160>)
 80003be:	429c      	cmp	r4, r3
 80003c0:	d074      	beq.n	80004ac <stm32_hw_setup+0x124>
}
 80003c2:	b009      	add	sp, #36	; 0x24
 80003c4:	bd30      	pop	{r4, r5, pc}
        assert(0);
 80003c6:	2300      	movs	r3, #0
 80003c8:	461a      	mov	r2, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	4618      	mov	r0, r3
 80003ce:	f000 fad5 	bl	800097c <__assert_func>
        stm32_tmr_reg_irq(TIM1_UP_TIM16_IRQn, func);
 80003d2:	4629      	mov	r1, r5
 80003d4:	2019      	movs	r0, #25
 80003d6:	f7ff ff97 	bl	8000308 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM1_CLK_ENABLE();
 80003da:	4b44      	ldr	r3, [pc, #272]	; (80004ec <stm32_hw_setup+0x164>)
 80003dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80003e2:	661a      	str	r2, [r3, #96]	; 0x60
 80003e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	9b00      	ldr	r3, [sp, #0]
 80003ee:	e7d3      	b.n	8000398 <stm32_hw_setup+0x10>
        stm32_tmr_reg_irq(TIM2_IRQn, func);
 80003f0:	4629      	mov	r1, r5
 80003f2:	201c      	movs	r0, #28
 80003f4:	f7ff ff88 	bl	8000308 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM2_CLK_ENABLE();
 80003f8:	4b3c      	ldr	r3, [pc, #240]	; (80004ec <stm32_hw_setup+0x164>)
 80003fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003fc:	f042 0201 	orr.w	r2, r2, #1
 8000400:	659a      	str	r2, [r3, #88]	; 0x58
 8000402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	9301      	str	r3, [sp, #4]
 800040a:	9b01      	ldr	r3, [sp, #4]
 800040c:	e7c7      	b.n	800039e <stm32_hw_setup+0x16>
        stm32_tmr_reg_irq(TIM3_IRQn, func);
 800040e:	4629      	mov	r1, r5
 8000410:	201d      	movs	r0, #29
 8000412:	f7ff ff79 	bl	8000308 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM3_CLK_ENABLE();
 8000416:	4b35      	ldr	r3, [pc, #212]	; (80004ec <stm32_hw_setup+0x164>)
 8000418:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800041a:	f042 0202 	orr.w	r2, r2, #2
 800041e:	659a      	str	r2, [r3, #88]	; 0x58
 8000420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000422:	f003 0302 	and.w	r3, r3, #2
 8000426:	9302      	str	r3, [sp, #8]
 8000428:	9b02      	ldr	r3, [sp, #8]
 800042a:	e7bb      	b.n	80003a4 <stm32_hw_setup+0x1c>
        stm32_tmr_reg_irq(TIM4_IRQn, func);
 800042c:	4629      	mov	r1, r5
 800042e:	201e      	movs	r0, #30
 8000430:	f7ff ff6a 	bl	8000308 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM4_CLK_ENABLE();
 8000434:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <stm32_hw_setup+0x164>)
 8000436:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000438:	f042 0204 	orr.w	r2, r2, #4
 800043c:	659a      	str	r2, [r3, #88]	; 0x58
 800043e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	9303      	str	r3, [sp, #12]
 8000446:	9b03      	ldr	r3, [sp, #12]
 8000448:	e7af      	b.n	80003aa <stm32_hw_setup+0x22>
        stm32_tmr_reg_irq(TIM8_CC_IRQn, func);
 800044a:	4629      	mov	r1, r5
 800044c:	202e      	movs	r0, #46	; 0x2e
 800044e:	f7ff ff5b 	bl	8000308 <stm32_tmr_reg_irq>
        stm32_tmr_reg_irq(TIM8_UP_IRQn, func);
 8000452:	4629      	mov	r1, r5
 8000454:	202c      	movs	r0, #44	; 0x2c
 8000456:	f7ff ff57 	bl	8000308 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM8_CLK_ENABLE();
 800045a:	4b24      	ldr	r3, [pc, #144]	; (80004ec <stm32_hw_setup+0x164>)
 800045c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800045e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000462:	661a      	str	r2, [r3, #96]	; 0x60
 8000464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800046a:	9304      	str	r3, [sp, #16]
 800046c:	9b04      	ldr	r3, [sp, #16]
 800046e:	e79f      	b.n	80003b0 <stm32_hw_setup+0x28>
        stm32_tmr_reg_irq(TIM1_BRK_TIM15_IRQn, func);
 8000470:	4629      	mov	r1, r5
 8000472:	2018      	movs	r0, #24
 8000474:	f7ff ff48 	bl	8000308 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM15_CLK_ENABLE();
 8000478:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <stm32_hw_setup+0x164>)
 800047a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800047c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000480:	661a      	str	r2, [r3, #96]	; 0x60
 8000482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000488:	9305      	str	r3, [sp, #20]
 800048a:	9b05      	ldr	r3, [sp, #20]
 800048c:	e793      	b.n	80003b6 <stm32_hw_setup+0x2e>
        stm32_tmr_reg_irq(TIM1_UP_TIM16_IRQn, func);
 800048e:	4629      	mov	r1, r5
 8000490:	2019      	movs	r0, #25
 8000492:	f7ff ff39 	bl	8000308 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM16_CLK_ENABLE();
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <stm32_hw_setup+0x164>)
 8000498:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800049a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800049e:	661a      	str	r2, [r3, #96]	; 0x60
 80004a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004a6:	9306      	str	r3, [sp, #24]
 80004a8:	9b06      	ldr	r3, [sp, #24]
 80004aa:	e787      	b.n	80003bc <stm32_hw_setup+0x34>
        stm32_tmr_reg_irq(TIM1_TRG_COM_TIM17_IRQn, func);
 80004ac:	4629      	mov	r1, r5
 80004ae:	201a      	movs	r0, #26
 80004b0:	f7ff ff2a 	bl	8000308 <stm32_tmr_reg_irq>
        __HAL_RCC_TIM17_CLK_ENABLE();
 80004b4:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <stm32_hw_setup+0x164>)
 80004b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80004b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80004bc:	661a      	str	r2, [r3, #96]	; 0x60
 80004be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004c4:	9307      	str	r3, [sp, #28]
 80004c6:	9b07      	ldr	r3, [sp, #28]
}
 80004c8:	e77b      	b.n	80003c2 <stm32_hw_setup+0x3a>
 80004ca:	bf00      	nop
 80004cc:	08000581 	.word	0x08000581
 80004d0:	40012c00 	.word	0x40012c00
 80004d4:	40000400 	.word	0x40000400
 80004d8:	40000800 	.word	0x40000800
 80004dc:	40013400 	.word	0x40013400
 80004e0:	40014000 	.word	0x40014000
 80004e4:	40014400 	.word	0x40014400
 80004e8:	40014800 	.word	0x40014800
 80004ec:	40021000 	.word	0x40021000

080004f0 <stm32_tmr_cbs>:
{
 80004f0:	b538      	push	{r3, r4, r5, lr}
 80004f2:	4605      	mov	r5, r0
    while ((ht = TAILQ_FIRST(&tmr->sht_timers)) != NULL) {
 80004f4:	e009      	b.n	800050a <stm32_tmr_cbs+0x1a>
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 80004f6:	6963      	ldr	r3, [r4, #20]
 80004f8:	60eb      	str	r3, [r5, #12]
 80004fa:	6963      	ldr	r3, [r4, #20]
 80004fc:	6922      	ldr	r2, [r4, #16]
 80004fe:	601a      	str	r2, [r3, #0]
            ht->link.tqe_prev = NULL;
 8000500:	2300      	movs	r3, #0
 8000502:	6163      	str	r3, [r4, #20]
            ht->cb_func(ht->cb_arg);
 8000504:	6863      	ldr	r3, [r4, #4]
 8000506:	68a0      	ldr	r0, [r4, #8]
 8000508:	4798      	blx	r3
    while ((ht = TAILQ_FIRST(&tmr->sht_timers)) != NULL) {
 800050a:	68ac      	ldr	r4, [r5, #8]
 800050c:	b164      	cbz	r4, 8000528 <stm32_tmr_cbs+0x38>
        cnt = hal_timer_cnt(tmr);
 800050e:	4628      	mov	r0, r5
 8000510:	f7ff ff22 	bl	8000358 <hal_timer_cnt>
        if (((int32_t)(cnt - ht->expiry)) >= 0) {
 8000514:	68e3      	ldr	r3, [r4, #12]
 8000516:	1ac0      	subs	r0, r0, r3
 8000518:	2800      	cmp	r0, #0
 800051a:	db05      	blt.n	8000528 <stm32_tmr_cbs+0x38>
            TAILQ_REMOVE(&tmr->sht_timers, ht, link);
 800051c:	6923      	ldr	r3, [r4, #16]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d0e9      	beq.n	80004f6 <stm32_tmr_cbs+0x6>
 8000522:	6962      	ldr	r2, [r4, #20]
 8000524:	615a      	str	r2, [r3, #20]
 8000526:	e7e8      	b.n	80004fa <stm32_tmr_cbs+0xa>
    ht = TAILQ_FIRST(&tmr->sht_timers);
 8000528:	68ab      	ldr	r3, [r5, #8]
    if (ht) {
 800052a:	b11b      	cbz	r3, 8000534 <stm32_tmr_cbs+0x44>
        tmr->sht_regs->CCR1 = ht->expiry;
 800052c:	682a      	ldr	r2, [r5, #0]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000532:	bd38      	pop	{r3, r4, r5, pc}
        TIM_CCxChannelCmd(tmr->sht_regs, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8000534:	2200      	movs	r2, #0
 8000536:	4611      	mov	r1, r2
 8000538:	6828      	ldr	r0, [r5, #0]
 800053a:	f000 f989 	bl	8000850 <TIM_CCxChannelCmd>
        tmr->sht_regs->DIER &= ~TIM_DIER_CC1IE;
 800053e:	682a      	ldr	r2, [r5, #0]
 8000540:	68d3      	ldr	r3, [r2, #12]
 8000542:	f023 0302 	bic.w	r3, r3, #2
 8000546:	60d3      	str	r3, [r2, #12]
}
 8000548:	e7f3      	b.n	8000532 <stm32_tmr_cbs+0x42>

0800054a <stm32_tmr_irq>:
{
 800054a:	b538      	push	{r3, r4, r5, lr}
 800054c:	4605      	mov	r5, r0
    sr = tmr->sht_regs->SR;
 800054e:	6803      	ldr	r3, [r0, #0]
 8000550:	691b      	ldr	r3, [r3, #16]
    if (sr & TIM_SR_UIF) {
 8000552:	f013 0f01 	tst.w	r3, #1
 8000556:	d00b      	beq.n	8000570 <stm32_tmr_irq+0x26>
        tmr->sht_oflow += STM32_OFLOW_VALUE;
 8000558:	6842      	ldr	r2, [r0, #4]
 800055a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800055e:	6042      	str	r2, [r0, #4]
        clr |= TIM_SR_UIF;
 8000560:	2401      	movs	r4, #1
    if (sr & TIM_SR_CC1IF) {
 8000562:	f013 0f02 	tst.w	r3, #2
 8000566:	d105      	bne.n	8000574 <stm32_tmr_irq+0x2a>
    tmr->sht_regs->SR = ~clr;
 8000568:	682b      	ldr	r3, [r5, #0]
 800056a:	43e4      	mvns	r4, r4
 800056c:	611c      	str	r4, [r3, #16]
}
 800056e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t clr = 0;
 8000570:	2400      	movs	r4, #0
 8000572:	e7f6      	b.n	8000562 <stm32_tmr_irq+0x18>
        clr |= TIM_SR_CC1IF;
 8000574:	f044 0402 	orr.w	r4, r4, #2
        stm32_tmr_cbs(tmr);
 8000578:	4628      	mov	r0, r5
 800057a:	f7ff ffb9 	bl	80004f0 <stm32_tmr_cbs>
 800057e:	e7f3      	b.n	8000568 <stm32_tmr_irq+0x1e>

08000580 <stm32_tmr0_irq>:
{
 8000580:	b508      	push	{r3, lr}
    stm32_tmr_irq(&stm32_tmr0);
 8000582:	4802      	ldr	r0, [pc, #8]	; (800058c <stm32_tmr0_irq+0xc>)
 8000584:	f7ff ffe1 	bl	800054a <stm32_tmr_irq>
}
 8000588:	bd08      	pop	{r3, pc}
 800058a:	bf00      	nop
 800058c:	2000019c 	.word	0x2000019c

08000590 <hal_timer_init>:
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num]) ||
 8000590:	2802      	cmp	r0, #2
 8000592:	dc78      	bgt.n	8000686 <hal_timer_init+0xf6>
 8000594:	4b42      	ldr	r3, [pc, #264]	; (80006a0 <hal_timer_init+0x110>)
 8000596:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d076      	beq.n	800068c <hal_timer_init+0xfc>
 800059e:	2900      	cmp	r1, #0
 80005a0:	d077      	beq.n	8000692 <hal_timer_init+0x102>
    regs = tmr->sht_regs = (TIM_TypeDef *)cfg;
 80005a2:	6019      	str	r1, [r3, #0]
    if (!IS_TIM_CC1_INSTANCE(regs)) {
 80005a4:	4b3f      	ldr	r3, [pc, #252]	; (80006a4 <hal_timer_init+0x114>)
 80005a6:	4299      	cmp	r1, r3
 80005a8:	d01e      	beq.n	80005e8 <hal_timer_init+0x58>
 80005aa:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80005ae:	d01b      	beq.n	80005e8 <hal_timer_init+0x58>
 80005b0:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 80005b4:	4299      	cmp	r1, r3
 80005b6:	d017      	beq.n	80005e8 <hal_timer_init+0x58>
 80005b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80005bc:	4299      	cmp	r1, r3
 80005be:	d013      	beq.n	80005e8 <hal_timer_init+0x58>
 80005c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d00f      	beq.n	80005e8 <hal_timer_init+0x58>
 80005c8:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80005cc:	4299      	cmp	r1, r3
 80005ce:	d00b      	beq.n	80005e8 <hal_timer_init+0x58>
 80005d0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80005d4:	4299      	cmp	r1, r3
 80005d6:	d007      	beq.n	80005e8 <hal_timer_init+0x58>
 80005d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80005dc:	4299      	cmp	r1, r3
 80005de:	d003      	beq.n	80005e8 <hal_timer_init+0x58>
 80005e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80005e4:	4299      	cmp	r1, r3
 80005e6:	d157      	bne.n	8000698 <hal_timer_init+0x108>
{
 80005e8:	b510      	push	{r4, lr}
 80005ea:	460c      	mov	r4, r1
    stm32_hw_setup(num, regs);
 80005ec:	f7ff fecc 	bl	8000388 <stm32_hw_setup>
    if (regs == TIM1) {
 80005f0:	4b2c      	ldr	r3, [pc, #176]	; (80006a4 <hal_timer_init+0x114>)
 80005f2:	429c      	cmp	r4, r3
 80005f4:	d016      	beq.n	8000624 <hal_timer_init+0x94>
    if (regs == TIM2) {
 80005f6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80005fa:	d019      	beq.n	8000630 <hal_timer_init+0xa0>
    if (regs == TIM3) {
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <hal_timer_init+0x118>)
 80005fe:	429c      	cmp	r4, r3
 8000600:	d01c      	beq.n	800063c <hal_timer_init+0xac>
    if (regs == TIM4) {
 8000602:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <hal_timer_init+0x11c>)
 8000604:	429c      	cmp	r4, r3
 8000606:	d01f      	beq.n	8000648 <hal_timer_init+0xb8>
    if (regs == TIM8) {
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <hal_timer_init+0x120>)
 800060a:	429c      	cmp	r4, r3
 800060c:	d022      	beq.n	8000654 <hal_timer_init+0xc4>
    if (regs == TIM15) {
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <hal_timer_init+0x124>)
 8000610:	429c      	cmp	r4, r3
 8000612:	d025      	beq.n	8000660 <hal_timer_init+0xd0>
    if (regs == TIM16) {
 8000614:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <hal_timer_init+0x128>)
 8000616:	429c      	cmp	r4, r3
 8000618:	d028      	beq.n	800066c <hal_timer_init+0xdc>
    if (regs == TIM17) {
 800061a:	4b28      	ldr	r3, [pc, #160]	; (80006bc <hal_timer_init+0x12c>)
 800061c:	429c      	cmp	r4, r3
 800061e:	d02b      	beq.n	8000678 <hal_timer_init+0xe8>
    return 0;
 8000620:	2000      	movs	r0, #0
}
 8000622:	bd10      	pop	{r4, pc}
        __HAL_DBGMCU_FREEZE_TIM1();
 8000624:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <hal_timer_init+0x130>)
 8000626:	6913      	ldr	r3, [r2, #16]
 8000628:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800062c:	6113      	str	r3, [r2, #16]
 800062e:	e7e2      	b.n	80005f6 <hal_timer_init+0x66>
        __HAL_DBGMCU_FREEZE_TIM2();
 8000630:	4a23      	ldr	r2, [pc, #140]	; (80006c0 <hal_timer_init+0x130>)
 8000632:	6893      	ldr	r3, [r2, #8]
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6093      	str	r3, [r2, #8]
 800063a:	e7df      	b.n	80005fc <hal_timer_init+0x6c>
        __HAL_DBGMCU_FREEZE_TIM3();
 800063c:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <hal_timer_init+0x130>)
 800063e:	6893      	ldr	r3, [r2, #8]
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6093      	str	r3, [r2, #8]
 8000646:	e7dc      	b.n	8000602 <hal_timer_init+0x72>
        __HAL_DBGMCU_FREEZE_TIM4();
 8000648:	4a1d      	ldr	r2, [pc, #116]	; (80006c0 <hal_timer_init+0x130>)
 800064a:	6893      	ldr	r3, [r2, #8]
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	6093      	str	r3, [r2, #8]
 8000652:	e7d9      	b.n	8000608 <hal_timer_init+0x78>
        __HAL_DBGMCU_FREEZE_TIM8();
 8000654:	4a1a      	ldr	r2, [pc, #104]	; (80006c0 <hal_timer_init+0x130>)
 8000656:	6913      	ldr	r3, [r2, #16]
 8000658:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800065c:	6113      	str	r3, [r2, #16]
 800065e:	e7d6      	b.n	800060e <hal_timer_init+0x7e>
        __HAL_DBGMCU_FREEZE_TIM15();
 8000660:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <hal_timer_init+0x130>)
 8000662:	6913      	ldr	r3, [r2, #16]
 8000664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000668:	6113      	str	r3, [r2, #16]
 800066a:	e7d3      	b.n	8000614 <hal_timer_init+0x84>
        __HAL_DBGMCU_FREEZE_TIM16();
 800066c:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <hal_timer_init+0x130>)
 800066e:	6913      	ldr	r3, [r2, #16]
 8000670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000674:	6113      	str	r3, [r2, #16]
 8000676:	e7d0      	b.n	800061a <hal_timer_init+0x8a>
        __HAL_DBGMCU_FREEZE_TIM17();
 8000678:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <hal_timer_init+0x130>)
 800067a:	6913      	ldr	r3, [r2, #16]
 800067c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000680:	6113      	str	r3, [r2, #16]
    return 0;
 8000682:	2000      	movs	r0, #0
 8000684:	e7cd      	b.n	8000622 <hal_timer_init+0x92>
        return -1;
 8000686:	f04f 30ff 	mov.w	r0, #4294967295
 800068a:	4770      	bx	lr
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	4770      	bx	lr
 8000692:	f04f 30ff 	mov.w	r0, #4294967295
 8000696:	4770      	bx	lr
        return -1;
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	08000abc 	.word	0x08000abc
 80006a4:	40012c00 	.word	0x40012c00
 80006a8:	40000400 	.word	0x40000400
 80006ac:	40000800 	.word	0x40000800
 80006b0:	40013400 	.word	0x40013400
 80006b4:	40014000 	.word	0x40014000
 80006b8:	40014400 	.word	0x40014400
 80006bc:	40014800 	.word	0x40014800
 80006c0:	e0042000 	.word	0xe0042000

080006c4 <hal_timer_config>:
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 80006c4:	2802      	cmp	r0, #2
 80006c6:	dc4e      	bgt.n	8000766 <hal_timer_config+0xa2>
{
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	b087      	sub	sp, #28
    if (num >= STM32_HAL_TIMER_MAX || !(tmr = stm32_tmr_devs[num])) {
 80006cc:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <hal_timer_config+0xbc>)
 80006ce:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80006d2:	2d00      	cmp	r5, #0
 80006d4:	d04a      	beq.n	800076c <hal_timer_config+0xa8>
    if (!IS_TIM_CC1_INSTANCE(tmr->sht_regs)) {
 80006d6:	6828      	ldr	r0, [r5, #0]
 80006d8:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <hal_timer_config+0xc0>)
 80006da:	4298      	cmp	r0, r3
 80006dc:	d01e      	beq.n	800071c <hal_timer_config+0x58>
 80006de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80006e2:	d01b      	beq.n	800071c <hal_timer_config+0x58>
 80006e4:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 80006e8:	4298      	cmp	r0, r3
 80006ea:	d017      	beq.n	800071c <hal_timer_config+0x58>
 80006ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006f0:	4298      	cmp	r0, r3
 80006f2:	d013      	beq.n	800071c <hal_timer_config+0x58>
 80006f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006f8:	4298      	cmp	r0, r3
 80006fa:	d00f      	beq.n	800071c <hal_timer_config+0x58>
 80006fc:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8000700:	4298      	cmp	r0, r3
 8000702:	d00b      	beq.n	800071c <hal_timer_config+0x58>
 8000704:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000708:	4298      	cmp	r0, r3
 800070a:	d007      	beq.n	800071c <hal_timer_config+0x58>
 800070c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000710:	4298      	cmp	r0, r3
 8000712:	d003      	beq.n	800071c <hal_timer_config+0x58>
 8000714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000718:	4298      	cmp	r0, r3
 800071a:	d12a      	bne.n	8000772 <hal_timer_config+0xae>
 800071c:	460c      	mov	r4, r1
    prescaler = stm32_hal_timer_get_freq(tmr->sht_regs) / freq_hz;
 800071e:	f000 f8a7 	bl	8000870 <stm32_hal_timer_get_freq>
 8000722:	fbb0 f0f4 	udiv	r0, r0, r4
    if (prescaler > 0xffff) {
 8000726:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800072a:	d225      	bcs.n	8000778 <hal_timer_config+0xb4>
    memset(&init, 0, sizeof(init));
 800072c:	2400      	movs	r4, #0
 800072e:	9401      	str	r4, [sp, #4]
 8000730:	9403      	str	r4, [sp, #12]
 8000732:	9404      	str	r4, [sp, #16]
 8000734:	9405      	str	r4, [sp, #20]
    init.Period = 0xffff;
 8000736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073a:	9302      	str	r3, [sp, #8]
    init.Prescaler = prescaler;
 800073c:	9000      	str	r0, [sp, #0]
    tmr->sht_regs->CR1 = TIM_CR1_URS;
 800073e:	682b      	ldr	r3, [r5, #0]
 8000740:	2204      	movs	r2, #4
 8000742:	601a      	str	r2, [r3, #0]
    tmr->sht_regs->DIER = TIM_DIER_UIE;
 8000744:	682b      	ldr	r3, [r5, #0]
 8000746:	2201      	movs	r2, #1
 8000748:	60da      	str	r2, [r3, #12]
    TIM_Base_SetConfig(tmr->sht_regs, &init);
 800074a:	4669      	mov	r1, sp
 800074c:	6828      	ldr	r0, [r5, #0]
 800074e:	f000 f81b 	bl	8000788 <TIM_Base_SetConfig>
    tmr->sht_regs->SR = 0;
 8000752:	682b      	ldr	r3, [r5, #0]
 8000754:	611c      	str	r4, [r3, #16]
    tmr->sht_regs->CR1 |= TIM_CR1_CEN;
 8000756:	682a      	ldr	r2, [r5, #0]
 8000758:	6813      	ldr	r3, [r2, #0]
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	6013      	str	r3, [r2, #0]
    return 0;
 8000760:	4620      	mov	r0, r4
}
 8000762:	b007      	add	sp, #28
 8000764:	bd30      	pop	{r4, r5, pc}
        return -1;
 8000766:	f04f 30ff 	mov.w	r0, #4294967295
}
 800076a:	4770      	bx	lr
        return -1;
 800076c:	f04f 30ff 	mov.w	r0, #4294967295
 8000770:	e7f7      	b.n	8000762 <hal_timer_config+0x9e>
        return -1;
 8000772:	f04f 30ff 	mov.w	r0, #4294967295
 8000776:	e7f4      	b.n	8000762 <hal_timer_config+0x9e>
        return -1;
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	e7f1      	b.n	8000762 <hal_timer_config+0x9e>
 800077e:	bf00      	nop
 8000780:	08000abc 	.word	0x08000abc
 8000784:	40012c00 	.word	0x40012c00

08000788 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8000788:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800078a:	4a30      	ldr	r2, [pc, #192]	; (800084c <TIM_Base_SetConfig+0xc4>)
 800078c:	4290      	cmp	r0, r2
 800078e:	d012      	beq.n	80007b6 <TIM_Base_SetConfig+0x2e>
 8000790:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000794:	d00f      	beq.n	80007b6 <TIM_Base_SetConfig+0x2e>
 8000796:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800079a:	4290      	cmp	r0, r2
 800079c:	d00b      	beq.n	80007b6 <TIM_Base_SetConfig+0x2e>
 800079e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007a2:	4290      	cmp	r0, r2
 80007a4:	d007      	beq.n	80007b6 <TIM_Base_SetConfig+0x2e>
 80007a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007aa:	4290      	cmp	r0, r2
 80007ac:	d003      	beq.n	80007b6 <TIM_Base_SetConfig+0x2e>
 80007ae:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80007b2:	4290      	cmp	r0, r2
 80007b4:	d103      	bne.n	80007be <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80007b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80007ba:	684a      	ldr	r2, [r1, #4]
 80007bc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80007be:	4a23      	ldr	r2, [pc, #140]	; (800084c <TIM_Base_SetConfig+0xc4>)
 80007c0:	4290      	cmp	r0, r2
 80007c2:	d01e      	beq.n	8000802 <TIM_Base_SetConfig+0x7a>
 80007c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80007c8:	d01b      	beq.n	8000802 <TIM_Base_SetConfig+0x7a>
 80007ca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80007ce:	4290      	cmp	r0, r2
 80007d0:	d017      	beq.n	8000802 <TIM_Base_SetConfig+0x7a>
 80007d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007d6:	4290      	cmp	r0, r2
 80007d8:	d013      	beq.n	8000802 <TIM_Base_SetConfig+0x7a>
 80007da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007de:	4290      	cmp	r0, r2
 80007e0:	d00f      	beq.n	8000802 <TIM_Base_SetConfig+0x7a>
 80007e2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80007e6:	4290      	cmp	r0, r2
 80007e8:	d00b      	beq.n	8000802 <TIM_Base_SetConfig+0x7a>
 80007ea:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80007ee:	4290      	cmp	r0, r2
 80007f0:	d007      	beq.n	8000802 <TIM_Base_SetConfig+0x7a>
 80007f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007f6:	4290      	cmp	r0, r2
 80007f8:	d003      	beq.n	8000802 <TIM_Base_SetConfig+0x7a>
 80007fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007fe:	4290      	cmp	r0, r2
 8000800:	d103      	bne.n	800080a <TIM_Base_SetConfig+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000806:	68ca      	ldr	r2, [r1, #12]
 8000808:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800080a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800080e:	694a      	ldr	r2, [r1, #20]
 8000810:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000812:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000814:	688b      	ldr	r3, [r1, #8]
 8000816:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000818:	680b      	ldr	r3, [r1, #0]
 800081a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <TIM_Base_SetConfig+0xc4>)
 800081e:	4298      	cmp	r0, r3
 8000820:	d00f      	beq.n	8000842 <TIM_Base_SetConfig+0xba>
 8000822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000826:	4298      	cmp	r0, r3
 8000828:	d00b      	beq.n	8000842 <TIM_Base_SetConfig+0xba>
 800082a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800082e:	4298      	cmp	r0, r3
 8000830:	d007      	beq.n	8000842 <TIM_Base_SetConfig+0xba>
 8000832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000836:	4298      	cmp	r0, r3
 8000838:	d003      	beq.n	8000842 <TIM_Base_SetConfig+0xba>
 800083a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800083e:	4298      	cmp	r0, r3
 8000840:	d101      	bne.n	8000846 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000842:	690b      	ldr	r3, [r1, #16]
 8000844:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000846:	2301      	movs	r3, #1
 8000848:	6143      	str	r3, [r0, #20]
}
 800084a:	4770      	bx	lr
 800084c:	40012c00 	.word	0x40012c00

08000850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8000850:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8000852:	f001 011f 	and.w	r1, r1, #31
 8000856:	2301      	movs	r3, #1
 8000858:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800085c:	6a03      	ldr	r3, [r0, #32]
 800085e:	ea23 0304 	bic.w	r3, r3, r4
 8000862:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8000864:	6a03      	ldr	r3, [r0, #32]
 8000866:	408a      	lsls	r2, r1
 8000868:	4313      	orrs	r3, r2
 800086a:	6203      	str	r3, [r0, #32]
}
 800086c:	bc10      	pop	{r4}
 800086e:	4770      	bx	lr

08000870 <stm32_hal_timer_get_freq>:
 * of a timer.
 */

uint32_t
stm32_hal_timer_get_freq(void *regs)
{
 8000870:	b510      	push	{r4, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	4604      	mov	r4, r0
    RCC_ClkInitTypeDef clocks;
    uint32_t fl;
    uint32_t freq;

    HAL_RCC_GetClockConfig(&clocks, &fl);
 8000876:	4669      	mov	r1, sp
 8000878:	a801      	add	r0, sp, #4
 800087a:	f000 f861 	bl	8000940 <HAL_RCC_GetClockConfig>

    /*
     * Assuming RCC_DCKCFGR->TIMPRE is 0.
     * There's just APB2 timers here.
     */
    switch ((uintptr_t)regs) {
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <stm32_hal_timer_get_freq+0x70>)
 8000880:	429c      	cmp	r4, r3
 8000882:	d01e      	beq.n	80008c2 <stm32_hal_timer_get_freq+0x52>
 8000884:	d80d      	bhi.n	80008a2 <stm32_hal_timer_get_freq+0x32>
 8000886:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800088a:	429c      	cmp	r4, r3
 800088c:	d020      	beq.n	80008d0 <stm32_hal_timer_get_freq+0x60>
 800088e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000892:	429c      	cmp	r4, r3
 8000894:	d01c      	beq.n	80008d0 <stm32_hal_timer_get_freq+0x60>
 8000896:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800089a:	d019      	beq.n	80008d0 <stm32_hal_timer_get_freq+0x60>
        if (clocks.APB1CLKDivider) {
            freq *= 2;
        }
        break;
    default:
        return 0;
 800089c:	2000      	movs	r0, #0
    }
    return freq;
}
 800089e:	b006      	add	sp, #24
 80008a0:	bd10      	pop	{r4, pc}
    switch ((uintptr_t)regs) {
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <stm32_hal_timer_get_freq+0x74>)
 80008a4:	429c      	cmp	r4, r3
 80008a6:	d00c      	beq.n	80008c2 <stm32_hal_timer_get_freq+0x52>
 80008a8:	d907      	bls.n	80008ba <stm32_hal_timer_get_freq+0x4a>
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <stm32_hal_timer_get_freq+0x78>)
 80008ac:	429c      	cmp	r4, r3
 80008ae:	d008      	beq.n	80008c2 <stm32_hal_timer_get_freq+0x52>
 80008b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80008b4:	429c      	cmp	r4, r3
 80008b6:	d1f1      	bne.n	800089c <stm32_hal_timer_get_freq+0x2c>
 80008b8:	e003      	b.n	80008c2 <stm32_hal_timer_get_freq+0x52>
 80008ba:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80008be:	429c      	cmp	r4, r3
 80008c0:	d1ec      	bne.n	800089c <stm32_hal_timer_get_freq+0x2c>
        freq = HAL_RCC_GetPCLK2Freq();
 80008c2:	f000 f82b 	bl	800091c <HAL_RCC_GetPCLK2Freq>
        if (clocks.APB2CLKDivider) {
 80008c6:	9b05      	ldr	r3, [sp, #20]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d0e8      	beq.n	800089e <stm32_hal_timer_get_freq+0x2e>
            freq *= 2;
 80008cc:	0040      	lsls	r0, r0, #1
 80008ce:	e7e6      	b.n	800089e <stm32_hal_timer_get_freq+0x2e>
        freq = HAL_RCC_GetPCLK1Freq();
 80008d0:	f000 f812 	bl	80008f8 <HAL_RCC_GetPCLK1Freq>
        if (clocks.APB1CLKDivider) {
 80008d4:	9b04      	ldr	r3, [sp, #16]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0e1      	beq.n	800089e <stm32_hal_timer_get_freq+0x2e>
            freq *= 2;
 80008da:	0040      	lsls	r0, r0, #1
 80008dc:	e7df      	b.n	800089e <stm32_hal_timer_get_freq+0x2e>
 80008de:	bf00      	nop
 80008e0:	40012c00 	.word	0x40012c00
 80008e4:	40014000 	.word	0x40014000
 80008e8:	40014400 	.word	0x40014400

080008ec <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80008ec:	4b01      	ldr	r3, [pc, #4]	; (80008f4 <HAL_RCC_GetHCLKFreq+0x8>)
 80008ee:	6818      	ldr	r0, [r3, #0]
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000188 	.word	0x20000188

080008f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80008f8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80008fa:	f7ff fff7 	bl	80008ec <HAL_RCC_GetHCLKFreq>
 80008fe:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000906:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000908:	5cd3      	ldrb	r3, [r2, r3]
 800090a:	f003 031f 	and.w	r3, r3, #31
}
 800090e:	40d8      	lsrs	r0, r3
 8000910:	bd08      	pop	{r3, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	08000ab4 	.word	0x08000ab4

0800091c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800091c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800091e:	f7ff ffe5 	bl	80008ec <HAL_RCC_GetHCLKFreq>
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800092a:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_RCC_GetPCLK2Freq+0x20>)
 800092c:	5cd3      	ldrb	r3, [r2, r3]
 800092e:	f003 031f 	and.w	r3, r3, #31
}
 8000932:	40d8      	lsrs	r0, r3
 8000934:	bd08      	pop	{r3, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000
 800093c:	08000ab4 	.word	0x08000ab4

08000940 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000940:	230f      	movs	r3, #15
 8000942:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <HAL_RCC_GetClockConfig+0x34>)
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	f002 0203 	and.w	r2, r2, #3
 800094c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800094e:	689a      	ldr	r2, [r3, #8]
 8000950:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000954:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800095c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	08db      	lsrs	r3, r3, #3
 8000962:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000966:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <HAL_RCC_GetClockConfig+0x38>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 0307 	and.w	r3, r3, #7
 8000970:	600b      	str	r3, [r1, #0]
}
 8000972:	4770      	bx	lr
 8000974:	40021000 	.word	0x40021000
 8000978:	40022000 	.word	0x40022000

0800097c <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
 800097c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
 800097e:	f000 f82e 	bl	80009de <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
 8000982:	f7ff fc95 	bl	80002b0 <hal_debugger_connected>
 8000986:	b100      	cbz	r0, 800098a <__assert_func+0xe>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
 8000988:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <__assert_func+0x20>)
 800098c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000990:	605a      	str	r2, [r3, #4]
    asm("isb");
 8000992:	f3bf 8f6f 	isb	sy
    hal_system_reset();
 8000996:	f7ff fc93 	bl	80002c0 <hal_system_reset>
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
 80009a0:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <os_default_irq+0x14>)
 80009a4:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
 80009a6:	685a      	ldr	r2, [r3, #4]
 80009a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
 80009ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
 80009b0:	f7ff fc86 	bl	80002c0 <hal_system_reset>
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
 80009b8:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
 80009ba:	4601      	mov	r1, r0
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff fe81 	bl	80006c4 <hal_timer_config>
    return rc;
}
 80009c2:	bd08      	pop	{r3, pc}

080009c4 <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
 80009c4:	4a02      	ldr	r2, [pc, #8]	; (80009d0 <os_time_advance+0xc>)
 80009c6:	6813      	ldr	r3, [r2, #0]
 80009c8:	4418      	add	r0, r3
 80009ca:	6010      	str	r0, [r2, #0]
}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	200001ac 	.word	0x200001ac

080009d4 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
 80009d4:	b508      	push	{r3, lr}
    os_time_advance(1);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f7ff fff4 	bl	80009c4 <os_time_advance>
}
 80009dc:	bd08      	pop	{r3, pc}

080009de <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80009de:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80009e2:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
 80009e4:	f000 0001 	and.w	r0, r0, #1
 80009e8:	4770      	bx	lr
	...

080009ec <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
 80009ec:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
 80009f0:	482b      	ldr	r0, [pc, #172]	; (8000aa0 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
 80009f2:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
 80009f4:	3002      	adds	r0, #2
        MSR     CONTROL,R0
 80009f6:	f380 8814 	msr	CONTROL, r0
        ISB
 80009fa:	f3bf 8f6f 	isb	sy
        BX      LR
 80009fe:	4770      	bx	lr

08000a00 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
 8000a00:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
 8000a04:	4770      	bx	lr

08000a06 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
 8000a06:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
 8000a0a:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
 8000a0c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
 8000a10:	b951      	cbnz	r1, 8000a28 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 8000a12:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8000a16:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
 8000a18:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 8000a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
 8000a1e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
 8000a22:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
 8000a26:	4770      	bx	lr

08000a28 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8000a28:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
 8000a2c:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
 8000a2e:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
 8000a30:	d809      	bhi.n	8000a46 <SVC_Done>

        LDR     R4,=SVC_Table-4
 8000a32:	4c1d      	ldr	r4, [pc, #116]	; (8000aa8 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
 8000a34:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
 8000a38:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
 8000a3c:	47a0      	blx	r4

        MRS     R12,PSP
 8000a3e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
 8000a42:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

08000a46 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 8000a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
 8000a4a:	4770      	bx	lr

08000a4c <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
 8000a4e:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
 8000a52:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
 8000a54:	4291      	cmp	r1, r2
        IT      EQ
 8000a56:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
 8000a58:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
 8000a5a:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
 8000a5e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
 8000a62:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
 8000a66:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
 8000a68:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
 8000a6c:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
 8000a70:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
 8000a74:	4770      	bx	lr

08000a76 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
 8000a76:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
 8000a78:	f7ff ffac 	bl	80009d4 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
 8000a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
 8000a80:	4770      	bx	lr

08000a82 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
 8000a82:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
 8000a86:	bf0c      	ite	eq
        MRSEQ   R3,MSP
 8000a88:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
 8000a8c:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
 8000a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
 8000a94:	4668      	mov	r0, sp
        BL      os_default_irq
 8000a96:	f7ff ff83 	bl	80009a0 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
 8000a9a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
 8000a9e:	4770      	bx	lr
        LDR     R0,=os_flags
 8000aa0:	20000198 	.word	0x20000198
        LDR     R2,=SVC_Count
 8000aa4:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
 8000aa8:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
 8000aac:	2000018c 	.word	0x2000018c
        LDR     R3,=g_current_task      /* Get current task */
 8000ab0:	200001b0 	.word	0x200001b0

08000ab4 <APBPrescTable>:
 8000ab4:	00000000 04030201                       ........

08000abc <stm32_tmr_devs>:
 8000abc:	2000019c 00000000 00000000              ... ........

08000ac8 <sysflash_map_dflt>:
 8000ac8:	00000000 08000000 00004000 00000001     .........@......
 8000ad8:	08004000 00020000 00000002 08030000     .@..............
 8000ae8:	00000000 00000003 08030010 00000000     ................
 8000af8:	00000010 08024000 00008000 00000011     .....@..........
 8000b08:	0802c000 00004000                       .....@..

c:/stm32bluepill-mynewt-sensor/bin/targets/stm32l4_boot/app/apps/boot_stub/boot_stub.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
   2856	     16	    424	   3296	    ce0	c:/stm32bluepill-mynewt-sensor/bin/targets/stm32l4_boot/app/apps/boot_stub/boot_stub.elf
