//! Mynewt API for Rust. Contains Rust bindings for Mynewt API for C, generated by `bindgen`.
//! Also includes safe versions of Mynewt APIs created specially for Rust.

#[macro_use]            //  Allow macros from Rust module `macros`
pub mod macros;         //  Export `macros.rs` as Rust module `macros`. Contains Mynewt macros.

/// `encoding`: Mynewt Encoding API
pub mod encoding;   //  Export folder `encoding` as Rust module `mynewt::encoding`

/// `kernel`: Mynewt Kernel API
pub mod kernel;     //  Export folder `kernel` as Rust module `mynewt::kernel`

/// `hw`: Mynewt Hardware API
pub mod hw;         //  Export folder `hw` as Rust module `mynewt::hw`

/// `libs`: Mynewt Custom API
pub mod libs;       //  Export folder `libs` as Rust module `mynewt::libs`

/// TODO: Defined in repos/apache-mynewt-core/net/oic/src/api/oc_rep.c
#[link(name = "net_oic")]
extern {
    pub static mut g_encoder: encoding::tinycbor::CborEncoder;
    pub static mut root_map:  encoding::tinycbor::CborEncoder;
}

/// Common return type for Mynewt API.  If no error, returns `Ok(val)` where val has type T.
/// Upon error, returns `Err(err)` where err is the MynewtError error code.
pub type MynewtResult<T> = ::core::result::Result<T, MynewtError>;

use self::kernel::os;

/// Error codes for Mynewt API
#[repr(i32)]
#[derive(Debug)]
pub enum MynewtError {
    SYS_EOK         = os::SYS_EOK as i32,
    SYS_ENOMEM      = os::SYS_ENOMEM,
    SYS_EINVAL      = os::SYS_EINVAL,
    SYS_ETIMEOUT    = os::SYS_ETIMEOUT,
    SYS_ENOENT      = os::SYS_ENOENT,
    SYS_EIO         = os::SYS_EIO,
    SYS_EAGAIN      = os::SYS_EAGAIN,
    SYS_EACCES      = os::SYS_EACCES,
    SYS_EBUSY       = os::SYS_EBUSY,
    SYS_ENODEV      = os::SYS_ENODEV,
    SYS_ERANGE      = os::SYS_ERANGE,
    SYS_EALREADY    = os::SYS_EALREADY,
    SYS_ENOTSUP     = os::SYS_ENOTSUP,
    SYS_EUNKNOWN    = os::SYS_EUNKNOWN,
    SYS_EREMOTEIO   = os::SYS_EREMOTEIO,
    SYS_EDONE       = os::SYS_EDONE,
    SYS_EPERUSER    = os::SYS_EPERUSER,
}