
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/gd32vf103c-start_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littleriscv
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/gd32vf103c-start_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800117c

Program Header:
    LOAD off    0x00001000 vaddr 0x08001000 paddr 0x08001000 align 2**12
         filesz 0x0000c900 memsz 0x0000c900 flags rwx
    LOAD off    0x0000e000 vaddr 0x20000000 paddr 0x0800d900 align 2**12
         filesz 0x0000055c memsz 0x0000055c flags rw-
    LOAD off    0x0000e560 vaddr 0x20000560 paddr 0x0800de5c align 2**12
         filesz 0x00000000 memsz 0x000027cc flags rw-
    LOAD off    0x0000e800 vaddr 0x20004800 paddr 0x20004800 align 2**12
         filesz 0x00000000 memsz 0x00000800 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rw-

Sections:
Idx Name                            Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr                         00000020  08001000  08001000  00001000  2**0  ALLOC
  1 .init                           00000214  08001020  08001020  00001020  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text                           0000a4ae  08001234  08001234  00001234  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata                         000021fc  0800b6f0  0800b6f0  0000b6f0  2**4  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .sdata2.stdout                  00000004  0800d8ec  0800d8ec  0000d8ec  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .sdata2.sensor_network_encoding 00000008  0800d8f0  0800d8f0  0000d8f0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .sdata2.MemFile_methods         00000008  0800d8f8  0800d8f8  0000d8f8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign                         00000000  0800d900  0800d900  0000e55c  2**0  CONTENTS
  8 .dalign                         00000000  20000000  20000000  0000e55c  2**0  CONTENTS
  9 .data                           00000520  20000000  0800d900  0000e000  2**3  CONTENTS, ALLOC, LOAD, DATA
 10 .sdata                          0000003c  20000520  0800de20  0000e520  2**2  CONTENTS, ALLOC, LOAD, DATA
 11 .bss                            000027cc  20000560  0800de5c  0000e560  2**3  ALLOC
 12 .stack                          00000800  20004800  20004800  0000e800  2**0  ALLOC
 13 .debug_line                     0004d7af  00000000  00000000  0000e55c  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info                     0005ff08  00000000  00000000  0005bd0b  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev                   0000a8f0  00000000  00000000  000bbc13  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges                  00002098  00000000  00000000  000c6508  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str                      000186a4  00000000  00000000  000c85a0  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc                      0001a0f2  00000000  00000000  000e0c44  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges                   0000cd00  00000000  00000000  000fad36  2**0  CONTENTS, READONLY, DEBUGGING
 20 .comment                        00000033  00000000  00000000  00107a36  2**0  CONTENTS, READONLY
 21 .debug_frame                    00006060  00000000  00000000  00107a6c  2**2  CONTENTS, READONLY, DEBUGGING
 22 .debug_macinfo                  00000003  00000000  00000000  0010dacc  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubnames                 00001093  00000000  00000000  0010dacf  2**0  CONTENTS, READONLY, DEBUGGING
 24 .debug_pubtypes                 00005dcc  00000000  00000000  0010eb62  2**0  CONTENTS, READONLY, DEBUGGING
 25 .stab                           0000003c  00000000  00000000  00114930  2**2  CONTENTS, READONLY, DEBUGGING
 26 .stabstr                        00000076  00000000  00000000  0011496c  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08001000 l    d  .imghdr	00000000 .imghdr
08001020 l    d  .init	00000000 .init
08001234 l    d  .text	00000000 .text
0800b6f0 l    d  .rodata	00000000 .rodata
0800d8ec l    d  .sdata2.stdout	00000000 .sdata2.stdout
0800d8f0 l    d  .sdata2.sensor_network_encoding	00000000 .sdata2.sensor_network_encoding
0800d8f8 l    d  .sdata2.MemFile_methods	00000000 .sdata2.MemFile_methods
0800d900 l    d  .lalign	00000000 .lalign
20000000 l    d  .dalign	00000000 .dalign
20000000 l    d  .data	00000000 .data
20000520 l    d  .sdata	00000000 .sdata
20000560 l    d  .bss	00000000 .bss
20004800 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 start.o
08001020 l       .init	00000000 vector_base
080011a2 l       .init	00000000 _reset_handler_0800
00000000 l    df *ABS*	00000000 system_gd32vf103.c
08001234 l     F .text	000000e2 system_clock_108m_hxtal
08001316 l     F .text	0000000c system_clock_config
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 entry.o
080013b4 l       .text	00000000 service_loop
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 mynewt.c
08001414 l     F .text	00000004 stdin_read
08001418 l     F .text	0000001a stdout_write
20000524 l     O .sdata	00000004 _stdin
20000528 l     O .sdata	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 app.9uhxv32r-cgu.0
00000248 l       .debug_ranges	00000000 
080014b6 l       .text	00000000 
080014b6 l       .text	00000000 
080014b8 l       .text	00000000 
080014bc l       .text	00000000 
080014c4 l       .text	00000000 
00008dc6 l       .debug_str	00000000 
000008e6 l       .debug_str	00000000 
0001271a l       .debug_str	00000000 
00000540 l       .debug_str	00000000 
00003375 l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00003387 l       .debug_str	00000000 
00003379 l       .debug_str	00000000 
00003391 l       .debug_str	00000000 
00000a66 l       .debug_loc	00000000 
00000a79 l       .debug_loc	00000000 
00000a97 l       .debug_loc	00000000 
00000aaa l       .debug_loc	00000000 
00000ad3 l       .debug_loc	00000000 
00000af1 l       .debug_loc	00000000 
00000b04 l       .debug_loc	00000000 
00000b17 l       .debug_loc	00000000 
00000b40 l       .debug_loc	00000000 
00000b75 l       .debug_loc	00000000 
00000b93 l       .debug_loc	00000000 
00000ba6 l       .debug_loc	00000000 
00000bb9 l       .debug_loc	00000000 
00000bcc l       .debug_loc	00000000 
00000bdf l       .debug_loc	00000000 
00000c08 l       .debug_loc	00000000 
00000c31 l       .debug_loc	00000000 
00000c44 l       .debug_loc	00000000 
00000c6d l       .debug_loc	00000000 
00000c80 l       .debug_loc	00000000 
00000c93 l       .debug_loc	00000000 
00000ca6 l       .debug_loc	00000000 
00000ccf l       .debug_loc	00000000 
00000ce2 l       .debug_loc	00000000 
00000cfa l       .debug_loc	00000000 
00001ba6 l       .debug_info	00000000 
00000260 l       .debug_ranges	00000000 
000001b0 l       .debug_ranges	00000000 
000001d0 l       .debug_ranges	00000000 
000001e8 l       .debug_ranges	00000000 
00000200 l       .debug_ranges	00000000 
00000218 l       .debug_ranges	00000000 
00000230 l       .debug_ranges	00000000 
080014c4 l       .text	00000000 
080014c4 l       .text	00000000 
080014ea l       .text	00000000 
080014ee l       .text	00000000 
080014f8 l       .text	00000000 
08001500 l       .text	00000000 
08001506 l       .text	00000000 
0800151c l       .text	00000000 
0800151c l       .text	00000000 
0800151c l       .text	00000000 
08001566 l       .text	00000000 
0800156e l       .text	00000000 
08001572 l       .text	00000000 
08001582 l       .text	00000000 
080015b8 l       .text	00000000 
080015d0 l       .text	00000000 
080015f6 l       .text	00000000 
0800161c l       .text	00000000 
08001632 l       .text	00000000 
08001656 l       .text	00000000 
08001662 l       .text	00000000 
08001664 l       .text	00000000 
0800166a l       .text	00000000 
0800167e l       .text	00000000 
08001918 l       .text	00000000 
0800196c l       .text	00000000 
0800196c l       .text	00000000 
0800196c l       .text	00000000 
0800197e l       .text	00000000 
080019b2 l       .text	00000000 
080019b6 l       .text	00000000 
080019ba l       .text	00000000 
080019be l       .text	00000000 
080019c8 l       .text	00000000 
080019ce l       .text	00000000 
080019ee l       .text	00000000 
08001a0c l       .text	00000000 
08001a0e l       .text	00000000 
08001a14 l       .text	00000000 
08001a54 l       .text	00000000 
08001a56 l       .text	00000000 
08001a60 l       .text	00000000 
08001a68 l       .text	00000000 
08001a70 l       .text	00000000 
08001a74 l       .text	00000000 
08001a76 l       .text	00000000 
08001a7e l       .text	00000000 
08001a86 l       .text	00000000 
08001a8e l       .text	00000000 
08001a90 l       .text	00000000 
08001a98 l       .text	00000000 
08001aa0 l       .text	00000000 
08001aa8 l       .text	00000000 
08001aaa l       .text	00000000 
08001ab2 l       .text	00000000 
08001aba l       .text	00000000 
08001ac2 l       .text	00000000 
08001ac6 l       .text	00000000 
08001aca l       .text	00000000 
08001ad4 l       .text	00000000 
08001adc l       .text	00000000 
08001adc l       .text	00000000 
08001adc l       .text	00000000 
08001adc l       .text	00000000 
08001ae8 l       .text	00000000 
08001afc l       .text	00000000 
08001b04 l       .text	00000000 
08001b06 l       .text	00000000 
08001b12 l       .text	00000000 
08001b14 l       .text	00000000 
08001b20 l       .text	00000000 
08001b2c l       .text	00000000 
08001b70 l       .text	00000000 
08001b80 l       .text	00000000 
08001b98 l       .text	00000000 
00000853 l       .debug_str	00000000 
00000894 l       .debug_str	00000000 
00000036 l       .debug_str	00000000 
0001540c l       .debug_str	00000000 
000008a8 l       .debug_str	00000000 
000008b4 l       .debug_str	00000000 
000008c8 l       .debug_str	00000000 
000151e0 l       .debug_str	00000000 
0000005f l       .debug_str	00000000 
000082fd l       .debug_str	00000000 
000008cf l       .debug_str	00000000 
000008d4 l       .debug_str	00000000 
000008d9 l       .debug_str	00000000 
000008dd l       .debug_str	00000000 
0000980f l       .debug_str	00000000 
000008e3 l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
00004e83 l       .debug_str	00000000 
00004778 l       .debug_str	00000000 
00004786 l       .debug_str	00000000 
000008ef l       .debug_str	00000000 
000008ff l       .debug_str	00000000 
0000093d l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000112ea l       .debug_str	00000000 
0000096e l       .debug_str	00000000 
00000956 l       .debug_str	00000000 
0000095e l       .debug_str	00000000 
00000967 l       .debug_str	00000000 
00010621 l       .debug_str	00000000 
00005b2d l       .debug_str	00000000 
00005f39 l       .debug_str	00000000 
000082b7 l       .debug_str	00000000 
00000971 l       .debug_str	00000000 
00000e38 l       .debug_str	00000000 
00000979 l       .debug_str	00000000 
000009b0 l       .debug_str	00000000 
000009bb l       .debug_str	00000000 
000009c6 l       .debug_str	00000000 
000082a6 l       .debug_str	00000000 
0000783e l       .debug_str	00000000 
000009fa l       .debug_str	00000000 
000009fd l       .debug_str	00000000 
00000a01 l       .debug_str	00000000 
0000e35d l       .debug_str	00000000 
00015710 l       .debug_str	00000000 
00000de0 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000a0d l       .debug_str	00000000 
00000a13 l       .debug_str	00000000 
00000a1a l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
000011e9 l       .debug_str	00000000 
00000a2c l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
00000a4a l       .debug_str	00000000 
00000a57 l       .debug_str	00000000 
00000a62 l       .debug_str	00000000 
00000a6a l       .debug_str	00000000 
00000a75 l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00000a8a l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000aa0 l       .debug_str	00000000 
00000aad l       .debug_str	00000000 
00000ab9 l       .debug_str	00000000 
00000ac6 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
00000ade l       .debug_str	00000000 
00008177 l       .debug_str	00000000 
00000aeb l       .debug_str	00000000 
00000aef l       .debug_str	00000000 
00000afa l       .debug_str	00000000 
000010d8 l       .debug_str	00000000 
00000b05 l       .debug_str	00000000 
00000b0e l       .debug_str	00000000 
00000b1c l       .debug_str	00000000 
00000b15 l       .debug_str	00000000 
00000b21 l       .debug_str	00000000 
0000fadd l       .debug_str	00000000 
00000b29 l       .debug_str	00000000 
00000b32 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3a l       .debug_str	00000000 
00015235 l       .debug_str	00000000 
00000b43 l       .debug_str	00000000 
00000124 l       .debug_str	00000000 
00018386 l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000b48 l       .debug_str	00000000 
00000b52 l       .debug_str	00000000 
00000b59 l       .debug_str	00000000 
00000b55 l       .debug_str	00000000 
00000b5f l       .debug_str	00000000 
00000b67 l       .debug_str	00000000 
0000a3fb l       .debug_str	00000000 
00000b6d l       .debug_str	00000000 
00000b92 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b9b l       .debug_str	00000000 
00010127 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00012728 l       .debug_str	00000000 
0001252e l       .debug_str	00000000 
00000be6 l       .debug_str	00000000 
00009769 l       .debug_str	00000000 
00000bec l       .debug_str	00000000 
00000c9e l       .debug_str	00000000 
00000bfb l       .debug_str	00000000 
00000bff l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00004af1 l       .debug_str	00000000 
00000c10 l       .debug_str	00000000 
00000c17 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c37 l       .debug_str	00000000 
00000c43 l       .debug_str	00000000 
00000c68 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
000125ed l       .debug_str	00000000 
00000c85 l       .debug_str	00000000 
00000c90 l       .debug_str	00000000 
00000c97 l       .debug_str	00000000 
00000963 l       .debug_str	00000000 
0001826a l       .debug_str	00000000 
00000c9d l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cbc l       .debug_str	00000000 
00000ce0 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d16 l       .debug_str	00000000 
00000d86 l       .debug_str	00000000 
00000d74 l       .debug_str	00000000 
00000d91 l       .debug_str	00000000 
000090d3 l       .debug_str	00000000 
00000daa l       .debug_str	00000000 
00000ddc l       .debug_str	00000000 
00000de3 l       .debug_str	00000000 
00000e1e l       .debug_str	00000000 
00003a3a l       .debug_str	00000000 
0000341f l       .debug_str	00000000 
00018290 l       .debug_str	00000000 
0000822a l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000e56 l       .debug_str	00000000 
00000e41 l       .debug_str	00000000 
00000846 l       .debug_str	00000000 
000139d6 l       .debug_str	00000000 
000004e4 l       .debug_str	00000000 
00004ec0 l       .debug_str	00000000 
00016b85 l       .debug_str	00000000 
00000e62 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e82 l       .debug_str	00000000 
00004e41 l       .debug_str	00000000 
00000e96 l       .debug_str	00000000 
00000e9f l       .debug_str	00000000 
00011e6d l       .debug_str	00000000 
00000eaa l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f50 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
00000f87 l       .debug_str	00000000 
00000ff7 l       .debug_str	00000000 
00001025 l       .debug_str	00000000 
0000104f l       .debug_str	00000000 
0000108e l       .debug_str	00000000 
000010a4 l       .debug_str	00000000 
00001410 l       .debug_str	00000000 
000010ad l       .debug_str	00000000 
000091b5 l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010c0 l       .debug_str	00000000 
000010c8 l       .debug_str	00000000 
000010df l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
000011a6 l       .debug_str	00000000 
000011ed l       .debug_str	00000000 
0000123c l       .debug_str	00000000 
00001246 l       .debug_str	00000000 
00001283 l       .debug_str	00000000 
000012c8 l       .debug_str	00000000 
000012d1 l       .debug_str	00000000 
000012e1 l       .debug_str	00000000 
000012e9 l       .debug_str	00000000 
0000133e l       .debug_str	00000000 
0000139b l       .debug_str	00000000 
000013a7 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
000013c8 l       .debug_str	00000000 
000013d1 l       .debug_str	00000000 
000013d9 l       .debug_str	00000000 
000006b3 l       .debug_str	00000000 
000013e1 l       .debug_str	00000000 
0000140f l       .debug_str	00000000 
000013f6 l       .debug_str	00000000 
00001416 l       .debug_str	00000000 
0000141d l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
000004f6 l       .debug_str	00000000 
0000142f l       .debug_str	00000000 
000006bd l       .debug_str	00000000 
00000589 l       .debug_str	00000000 
00008c21 l       .debug_str	00000000 
0000070c l       .debug_str	00000000 
00000715 l       .debug_str	00000000 
00000688 l       .debug_str	00000000 
0000fe7c l       .debug_str	00000000 
000006ed l       .debug_str	00000000 
00000706 l       .debug_str	00000000 
000154b5 l       .debug_str	00000000 
0000f2e6 l       .debug_str	00000000 
00001438 l       .debug_str	00000000 
00001465 l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
000116f2 l       .debug_str	00000000 
000006a4 l       .debug_str	00000000 
00000738 l       .debug_str	00000000 
000004ca l       .debug_str	00000000 
00000600 l       .debug_str	00000000 
0000149a l       .debug_str	00000000 
000014c3 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
000005f9 l       .debug_str	00000000 
00000757 l       .debug_str	00000000 
00000510 l       .debug_str	00000000 
00001587 l       .debug_str	00000000 
000014b3 l       .debug_str	00000000 
000004bc l       .debug_str	00000000 
00000649 l       .debug_str	00000000 
00000654 l       .debug_str	00000000 
00000748 l       .debug_str	00000000 
000015a5 l       .debug_str	00000000 
0000059e l       .debug_str	00000000 
000006b4 l       .debug_str	00000000 
00000595 l       .debug_str	00000000 
000015bb l       .debug_str	00000000 
000015e1 l       .debug_str	00000000 
00000496 l       .debug_str	00000000 
000015f7 l       .debug_str	00000000 
000082d5 l       .debug_str	00000000 
000015c0 l       .debug_str	00000000 
0000160d l       .debug_str	00000000 
0000b22c l       .debug_str	00000000 
00001624 l       .debug_str	00000000 
0000162c l       .debug_str	00000000 
00001635 l       .debug_str	00000000 
00002a50 l       .debug_str	00000000 
0000163e l       .debug_str	00000000 
00004dfb l       .debug_str	00000000 
00017d21 l       .debug_str	00000000 
00001646 l       .debug_str	00000000 
00001652 l       .debug_str	00000000 
0000165d l       .debug_str	00000000 
00001665 l       .debug_str	00000000 
00004469 l       .debug_str	00000000 
000043c3 l       .debug_str	00000000 
0000166d l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
0000186d l       .debug_str	00000000 
0000187b l       .debug_str	00000000 
00001886 l       .debug_str	00000000 
000018b3 l       .debug_str	00000000 
00001890 l       .debug_str	00000000 
000018be l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
000019bc l       .debug_str	00000000 
000019ca l       .debug_str	00000000 
00001a29 l       .debug_str	00000000 
00001a90 l       .debug_str	00000000 
00001aa6 l       .debug_str	00000000 
00001ab6 l       .debug_str	00000000 
00012740 l       .debug_str	00000000 
00001ac5 l       .debug_str	00000000 
00001acb l       .debug_str	00000000 
00001ad1 l       .debug_str	00000000 
00001ad7 l       .debug_str	00000000 
00001ae3 l       .debug_str	00000000 
00001aeb l       .debug_str	00000000 
00001af3 l       .debug_str	00000000 
00001af9 l       .debug_str	00000000 
00001b3f l       .debug_str	00000000 
00001b1c l       .debug_str	00000000 
00001b4f l       .debug_str	00000000 
00001b8f l       .debug_str	00000000 
00012ef9 l       .debug_str	00000000 
00001bd7 l       .debug_str	00000000 
00001bdd l       .debug_str	00000000 
00001be3 l       .debug_str	00000000 
00001c0c l       .debug_str	00000000 
00001be9 l       .debug_str	00000000 
00001c1e l       .debug_str	00000000 
00001c60 l       .debug_str	00000000 
000131b6 l       .debug_str	00000000 
00001caa l       .debug_str	00000000 
00001cb0 l       .debug_str	00000000 
00001cb6 l       .debug_str	00000000 
00001cdf l       .debug_str	00000000 
00001cbc l       .debug_str	00000000 
00001cf1 l       .debug_str	00000000 
00001d33 l       .debug_str	00000000 
00013a06 l       .debug_str	00000000 
00001d7d l       .debug_str	00000000 
00001d83 l       .debug_str	00000000 
00001d89 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001db8 l       .debug_str	00000000 
00001d95 l       .debug_str	00000000 
00001dc9 l       .debug_str	00000000 
00001e0a l       .debug_str	00000000 
00001e53 l       .debug_str	00000000 
00001e58 l       .debug_str	00000000 
000132c6 l       .debug_str	00000000 
00001e5d l       .debug_str	00000000 
00001e63 l       .debug_str	00000000 
00001e69 l       .debug_str	00000000 
00001e92 l       .debug_str	00000000 
00001e6f l       .debug_str	00000000 
00001ea3 l       .debug_str	00000000 
00001ee4 l       .debug_str	00000000 
00012689 l       .debug_str	00000000 
00001f2d l       .debug_str	00000000 
00001f59 l       .debug_str	00000000 
00001f36 l       .debug_str	00000000 
00001f6a l       .debug_str	00000000 
00001fab l       .debug_str	00000000 
00001ff4 l       .debug_str	00000000 
0001263b l       .debug_str	00000000 
00001ff9 l       .debug_str	00000000 
00002002 l       .debug_str	00000000 
00002009 l       .debug_str	00000000 
00002034 l       .debug_str	00000000 
00002011 l       .debug_str	00000000 
00002046 l       .debug_str	00000000 
00002088 l       .debug_str	00000000 
00013066 l       .debug_str	00000000 
000020d2 l       .debug_str	00000000 
000020d8 l       .debug_str	00000000 
000020de l       .debug_str	00000000 
000020e4 l       .debug_str	00000000 
000020ea l       .debug_str	00000000 
000020f2 l       .debug_str	00000000 
00002100 l       .debug_str	00000000 
0000210f l       .debug_str	00000000 
00002120 l       .debug_str	00000000 
0000212b l       .debug_str	00000000 
00002136 l       .debug_str	00000000 
00002141 l       .debug_str	00000000 
00002148 l       .debug_str	00000000 
0000218e l       .debug_str	00000000 
0000216b l       .debug_str	00000000 
000021a0 l       .debug_str	00000000 
000021e2 l       .debug_str	00000000 
0001395b l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002259 l       .debug_str	00000000 
00002236 l       .debug_str	00000000 
0000226b l       .debug_str	00000000 
000022ad l       .debug_str	00000000 
000022f7 l       .debug_str	00000000 
000022fc l       .debug_str	00000000 
00002329 l       .debug_str	00000000 
00002306 l       .debug_str	00000000 
0000233b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000023c7 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
000023db l       .debug_str	00000000 
000023eb l       .debug_str	00000000 
000023f4 l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
0000240e l       .debug_str	00000000 
00002423 l       .debug_str	00000000 
00002454 l       .debug_str	00000000 
000024f1 l       .debug_str	00000000 
00002596 l       .debug_str	00000000 
000025a1 l       .debug_str	00000000 
000025aa l       .debug_str	00000000 
000025ee l       .debug_str	00000000 
000025cb l       .debug_str	00000000 
00002601 l       .debug_str	00000000 
00002684 l       .debug_str	00000000 
0000270f l       .debug_str	00000000 
0000272b l       .debug_str	00000000 
00002777 l       .debug_str	00000000 
000027cb l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
000027fc l       .debug_str	00000000 
00002848 l       .debug_str	00000000 
0000289c l       .debug_str	00000000 
000028b2 l       .debug_str	00000000 
000028c6 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
0000295c l       .debug_str	00000000 
00002988 l       .debug_str	00000000 
00002965 l       .debug_str	00000000 
00002996 l       .debug_str	00000000 
0000299c l       .debug_str	00000000 
000029a4 l       .debug_str	00000000 
000029ab l       .debug_str	00000000 
000029b3 l       .debug_str	00000000 
000029be l       .debug_str	00000000 
000029c6 l       .debug_str	00000000 
00008bd3 l       .debug_str	00000000 
000029d5 l       .debug_str	00000000 
000029e0 l       .debug_str	00000000 
000029ec l       .debug_str	00000000 
000029f7 l       .debug_str	00000000 
00002a08 l       .debug_str	00000000 
00002a0e l       .debug_str	00000000 
00002a16 l       .debug_str	00000000 
00002a1d l       .debug_str	00000000 
00002a27 l       .debug_str	00000000 
00002a2f l       .debug_str	00000000 
00002a37 l       .debug_str	00000000 
00002a59 l       .debug_str	00000000 
00002a64 l       .debug_str	00000000 
00002a70 l       .debug_str	00000000 
00002a78 l       .debug_str	00000000 
00002a81 l       .debug_str	00000000 
000005e3 l       .debug_str	00000000 
00002a8c l       .debug_str	00000000 
00002a97 l       .debug_str	00000000 
00002aa2 l       .debug_str	00000000 
00002ab2 l       .debug_str	00000000 
00012633 l       .debug_str	00000000 
000030d3 l       .debug_str	00000000 
00002abc l       .debug_str	00000000 
00002af4 l       .debug_str	00000000 
00002b34 l       .debug_str	00000000 
00002b3b l       .debug_str	00000000 
00002b43 l       .debug_str	00000000 
000030ec l       .debug_str	00000000 
00002b5a l       .debug_str	00000000 
00002b6a l       .debug_str	00000000 
00002b79 l       .debug_str	00000000 
00002b81 l       .debug_str	00000000 
00002b88 l       .debug_str	00000000 
000081d1 l       .debug_str	00000000 
00002bb3 l       .debug_str	00000000 
00002b90 l       .debug_str	00000000 
00002bc3 l       .debug_str	00000000 
00002bd8 l       .debug_str	00000000 
00002be1 l       .debug_str	00000000 
00002c3e l       .debug_str	00000000 
00002ca3 l       .debug_str	00000000 
00002cad l       .debug_str	00000000 
00002cbd l       .debug_str	00000000 
00002cd2 l       .debug_str	00000000 
00002cda l       .debug_str	00000000 
00002d3e l       .debug_str	00000000 
00002daa l       .debug_str	00000000 
00002db1 l       .debug_str	00000000 
00002db9 l       .debug_str	00000000 
00002dfa l       .debug_str	00000000 
00002dd7 l       .debug_str	00000000 
00002e0a l       .debug_str	00000000 
00002e1f l       .debug_str	00000000 
00002e32 l       .debug_str	00000000 
00002e47 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00002e63 l       .debug_str	00000000 
00014d44 l       .debug_str	00000000 
00002e8d l       .debug_str	00000000 
00002ebf l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00002f2d l       .debug_str	00000000 
00002f31 l       .debug_str	00000000 
00002fa1 l       .debug_str	00000000 
00002ff8 l       .debug_str	00000000 
0000304b l       .debug_str	00000000 
0000308b l       .debug_str	00000000 
00000b38 l       .debug_str	00000000 
00010b81 l       .debug_str	00000000 
000030b2 l       .debug_str	00000000 
000030bc l       .debug_str	00000000 
000030c5 l       .debug_str	00000000 
00000608 l       .debug_str	00000000 
0000069a l       .debug_str	00000000 
000030ce l       .debug_str	00000000 
000030f5 l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
0000310d l       .debug_str	00000000 
00003130 l       .debug_str	00000000 
00003178 l       .debug_str	00000000 
000031b8 l       .debug_str	00000000 
000031ff l       .debug_str	00000000 
00003208 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00003236 l       .debug_str	00000000 
0000980b l       .debug_str	00000000 
0000323b l       .debug_str	00000000 
00003285 l       .debug_str	00000000 
0000328e l       .debug_str	00000000 
000032c1 l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
000032ee l       .debug_str	00000000 
0000332e l       .debug_str	00000000 
0001435a l       .debug_str	00000000 
00003344 l       .debug_str	00000000 
00003356 l       .debug_str	00000000 
0000335c l       .debug_str	00000000 
000157ba l       .debug_str	00000000 
0000f2a9 l       .debug_str	00000000 
000080e2 l       .debug_str	00000000 
00003362 l       .debug_str	00000000 
00014d81 l       .debug_str	00000000 
00011e6e l       .debug_str	00000000 
00003371 l       .debug_str	00000000 
00008db2 l       .debug_str	00000000 
00010444 l       .debug_str	00000000 
000090c7 l       .debug_str	00000000 
0800b858 l     O .rodata	0000000c _ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E
200005c8 l     O .bss	00000020 _ZN3app11app_network19CURRENT_GEOLOCATION17h3b985aea7df51bf5E
0800151c l     F .text	00000450 _ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE
080014b6 l     F .text	0000000e _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17had15619c85373ca3E
080014c4 l     F .text	00000058 _ZN4core6result13unwrap_failed17h3314c9605742429cE
00000000 l    df *ABS*	00000000 mynewt.csmpmsyq-cgu.0
00000c00 l       .debug_ranges	00000000 
08001b98 l       .text	00000000 
08001b98 l       .text	00000000 
08001ba0 l       .text	00000000 
08001ba2 l       .text	00000000 
08001ba6 l       .text	00000000 
08001ba8 l       .text	00000000 
08001be6 l       .text	00000000 
08001bea l       .text	00000000 
08001bf0 l       .text	00000000 
00004041 l       .debug_loc	00000000 
00004067 l       .debug_loc	00000000 
000040a1 l       .debug_loc	00000000 
000040ca l       .debug_loc	00000000 
000040dd l       .debug_loc	00000000 
000040f0 l       .debug_loc	00000000 
00004103 l       .debug_loc	00000000 
00004116 l       .debug_loc	00000000 
00004129 l       .debug_loc	00000000 
0000415e l       .debug_loc	00000000 
00004183 l       .debug_loc	00000000 
00004196 l       .debug_loc	00000000 
000041a9 l       .debug_loc	00000000 
000041cf l       .debug_loc	00000000 
00004209 l       .debug_loc	00000000 
00004232 l       .debug_loc	00000000 
00004250 l       .debug_loc	00000000 
00004263 l       .debug_loc	00000000 
00004276 l       .debug_loc	00000000 
00004382 l       .debug_info	00000000 
00000c30 l       .debug_ranges	00000000 
00000b10 l       .debug_ranges	00000000 
00000b58 l       .debug_ranges	00000000 
00000b28 l       .debug_ranges	00000000 
00000b40 l       .debug_ranges	00000000 
00000b70 l       .debug_ranges	00000000 
00000bb8 l       .debug_ranges	00000000 
00000b88 l       .debug_ranges	00000000 
00000ba0 l       .debug_ranges	00000000 
000003a0 l       .debug_ranges	00000000 
00000350 l       .debug_ranges	00000000 
00000330 l       .debug_ranges	00000000 
00000308 l       .debug_ranges	00000000 
000002c0 l       .debug_ranges	00000000 
00000290 l       .debug_ranges	00000000 
000002a8 l       .debug_ranges	00000000 
00000370 l       .debug_ranges	00000000 
00000388 l       .debug_ranges	00000000 
000003b8 l       .debug_ranges	00000000 
000004f0 l       .debug_ranges	00000000 
000004d8 l       .debug_ranges	00000000 
000003d0 l       .debug_ranges	00000000 
00000460 l       .debug_ranges	00000000 
00000448 l       .debug_ranges	00000000 
000003e8 l       .debug_ranges	00000000 
00000400 l       .debug_ranges	00000000 
00000418 l       .debug_ranges	00000000 
00000430 l       .debug_ranges	00000000 
000004c0 l       .debug_ranges	00000000 
000004a8 l       .debug_ranges	00000000 
00000478 l       .debug_ranges	00000000 
00000490 l       .debug_ranges	00000000 
00000508 l       .debug_ranges	00000000 
00000528 l       .debug_ranges	00000000 
00000570 l       .debug_ranges	00000000 
00000540 l       .debug_ranges	00000000 
00000558 l       .debug_ranges	00000000 
00000588 l       .debug_ranges	00000000 
000008b0 l       .debug_ranges	00000000 
000008c8 l       .debug_ranges	00000000 
00000958 l       .debug_ranges	00000000 
00000910 l       .debug_ranges	00000000 
000008e0 l       .debug_ranges	00000000 
000008f8 l       .debug_ranges	00000000 
00000928 l       .debug_ranges	00000000 
00000940 l       .debug_ranges	00000000 
000009b8 l       .debug_ranges	00000000 
00000988 l       .debug_ranges	00000000 
000009a0 l       .debug_ranges	00000000 
00000a10 l       .debug_ranges	00000000 
000009e0 l       .debug_ranges	00000000 
000009f8 l       .debug_ranges	00000000 
00000a60 l       .debug_ranges	00000000 
00000a30 l       .debug_ranges	00000000 
00000a48 l       .debug_ranges	00000000 
00000a80 l       .debug_ranges	00000000 
00000a98 l       .debug_ranges	00000000 
00000ab0 l       .debug_ranges	00000000 
00000af8 l       .debug_ranges	00000000 
00000ac8 l       .debug_ranges	00000000 
00000ae0 l       .debug_ranges	00000000 
000006a8 l       .debug_ranges	00000000 
00000690 l       .debug_ranges	00000000 
00000678 l       .debug_ranges	00000000 
000005a0 l       .debug_ranges	00000000 
00000660 l       .debug_ranges	00000000 
00000648 l       .debug_ranges	00000000 
00000630 l       .debug_ranges	00000000 
000005b8 l       .debug_ranges	00000000 
00000618 l       .debug_ranges	00000000 
000005d0 l       .debug_ranges	00000000 
00000600 l       .debug_ranges	00000000 
000005e8 l       .debug_ranges	00000000 
000006c0 l       .debug_ranges	00000000 
000006f8 l       .debug_ranges	00000000 
000006e0 l       .debug_ranges	00000000 
00000770 l       .debug_ranges	00000000 
00000718 l       .debug_ranges	00000000 
00000750 l       .debug_ranges	00000000 
00000738 l       .debug_ranges	00000000 
00000790 l       .debug_ranges	00000000 
000007a8 l       .debug_ranges	00000000 
000007c0 l       .debug_ranges	00000000 
000007d8 l       .debug_ranges	00000000 
000007f0 l       .debug_ranges	00000000 
00000808 l       .debug_ranges	00000000 
00000820 l       .debug_ranges	00000000 
00000838 l       .debug_ranges	00000000 
00000850 l       .debug_ranges	00000000 
00000868 l       .debug_ranges	00000000 
00000880 l       .debug_ranges	00000000 
00000898 l       .debug_ranges	00000000 
00000bd0 l       .debug_ranges	00000000 
00000c18 l       .debug_ranges	00000000 
00000be8 l       .debug_ranges	00000000 
08001bf0 l       .text	00000000 
08001bf0 l       .text	00000000 
08001bf8 l       .text	00000000 
08001bfa l       .text	00000000 
08001bfe l       .text	00000000 
08001c00 l       .text	00000000 
08001c3e l       .text	00000000 
08001c42 l       .text	00000000 
08001c48 l       .text	00000000 
08001c48 l       .text	00000000 
08001c48 l       .text	00000000 
08001c4e l       .text	00000000 
08001c50 l       .text	00000000 
08001c54 l       .text	00000000 
08001c7e l       .text	00000000 
08001c90 l       .text	00000000 
08001c90 l       .text	00000000 
08001c90 l       .text	00000000 
08001c98 l       .text	00000000 
08001c9a l       .text	00000000 
08001c9c l       .text	00000000 
08001c9e l       .text	00000000 
08001cb4 l       .text	00000000 
08001cce l       .text	00000000 
08001cd8 l       .text	00000000 
08001ce4 l       .text	00000000 
08001cf8 l       .text	00000000 
08001cf8 l       .text	00000000 
08001cf8 l       .text	00000000 
08001d00 l       .text	00000000 
08001d02 l       .text	00000000 
08001d06 l       .text	00000000 
08001d08 l       .text	00000000 
08001d46 l       .text	00000000 
08001d4a l       .text	00000000 
08001d50 l       .text	00000000 
08001d50 l       .text	00000000 
08001d50 l       .text	00000000 
08001d58 l       .text	00000000 
08001d5a l       .text	00000000 
08001d5c l       .text	00000000 
08001d60 l       .text	00000000 
08001d62 l       .text	00000000 
08001da0 l       .text	00000000 
08001da4 l       .text	00000000 
08001daa l       .text	00000000 
08001daa l       .text	00000000 
08001daa l       .text	00000000 
08001dac l       .text	00000000 
08001dac l       .text	00000000 
08001dac l       .text	00000000 
08001dc4 l       .text	00000000 
08001dd0 l       .text	00000000 
08001dd6 l       .text	00000000 
08001dd8 l       .text	00000000 
08001de4 l       .text	00000000 
08001df2 l       .text	00000000 
08001dfa l       .text	00000000 
08001e00 l       .text	00000000 
08001e08 l       .text	00000000 
08001e0a l       .text	00000000 
08001e0e l       .text	00000000 
08001e10 l       .text	00000000 
08001e18 l       .text	00000000 
08001e1a l       .text	00000000 
08001e28 l       .text	00000000 
08001e2e l       .text	00000000 
08001e32 l       .text	00000000 
08001e36 l       .text	00000000 
08001e38 l       .text	00000000 
08001e3e l       .text	00000000 
08001e4a l       .text	00000000 
08001e54 l       .text	00000000 
08001e56 l       .text	00000000 
08001e5a l       .text	00000000 
08001e5c l       .text	00000000 
08001e60 l       .text	00000000 
08001e62 l       .text	00000000 
08001e7c l       .text	00000000 
08001e82 l       .text	00000000 
08001e8c l       .text	00000000 
08001eb6 l       .text	00000000 
08001ec2 l       .text	00000000 
08001ec4 l       .text	00000000 
08001eca l       .text	00000000 
08001ed0 l       .text	00000000 
08001ed6 l       .text	00000000 
08001ede l       .text	00000000 
08001ee2 l       .text	00000000 
08001ee4 l       .text	00000000 
08001eec l       .text	00000000 
08001eee l       .text	00000000 
08001ef2 l       .text	00000000 
08001f12 l       .text	00000000 
08001f14 l       .text	00000000 
08001f16 l       .text	00000000 
08001f18 l       .text	00000000 
08001f20 l       .text	00000000 
08001f28 l       .text	00000000 
08001f2a l       .text	00000000 
08001f2e l       .text	00000000 
08001f32 l       .text	00000000 
08001f44 l       .text	00000000 
08001f44 l       .text	00000000 
08001f44 l       .text	00000000 
08001f44 l       .text	00000000 
08001f58 l       .text	00000000 
08001f62 l       .text	00000000 
08001f6e l       .text	00000000 
08001f7a l       .text	00000000 
08001f80 l       .text	00000000 
08001f82 l       .text	00000000 
08001f8a l       .text	00000000 
08001f90 l       .text	00000000 
08001f98 l       .text	00000000 
08001fb4 l       .text	00000000 
08001fd4 l       .text	00000000 
08001fdc l       .text	00000000 
08001fde l       .text	00000000 
08001fe2 l       .text	00000000 
08001fea l       .text	00000000 
08002002 l       .text	00000000 
0800201a l       .text	00000000 
0800201a l       .text	00000000 
0800201a l       .text	00000000 
0800202c l       .text	00000000 
08002030 l       .text	00000000 
08002036 l       .text	00000000 
08002038 l       .text	00000000 
0800203a l       .text	00000000 
08002046 l       .text	00000000 
08002054 l       .text	00000000 
08002062 l       .text	00000000 
08002070 l       .text	00000000 
08002092 l       .text	00000000 
0800209e l       .text	00000000 
080020a6 l       .text	00000000 
080020ae l       .text	00000000 
080020b0 l       .text	00000000 
080020c6 l       .text	00000000 
080020d2 l       .text	00000000 
080020da l       .text	00000000 
080020e8 l       .text	00000000 
080020fa l       .text	00000000 
080020fc l       .text	00000000 
0800212c l       .text	00000000 
08002134 l       .text	00000000 
0800213a l       .text	00000000 
0800213c l       .text	00000000 
08002142 l       .text	00000000 
08002144 l       .text	00000000 
08002152 l       .text	00000000 
08002162 l       .text	00000000 
0800216a l       .text	00000000 
0800219a l       .text	00000000 
080021b2 l       .text	00000000 
080021b4 l       .text	00000000 
080021c0 l       .text	00000000 
080021c8 l       .text	00000000 
080021cc l       .text	00000000 
080021ce l       .text	00000000 
080021d6 l       .text	00000000 
080021d8 l       .text	00000000 
080021dc l       .text	00000000 
080021fc l       .text	00000000 
080021fe l       .text	00000000 
08002200 l       .text	00000000 
08002202 l       .text	00000000 
0800220a l       .text	00000000 
08002212 l       .text	00000000 
08002214 l       .text	00000000 
08002218 l       .text	00000000 
0800223c l       .text	00000000 
08002244 l       .text	00000000 
08002248 l       .text	00000000 
0800224a l       .text	00000000 
08002252 l       .text	00000000 
08002254 l       .text	00000000 
08002258 l       .text	00000000 
08002278 l       .text	00000000 
0800227a l       .text	00000000 
0800227c l       .text	00000000 
0800227e l       .text	00000000 
08002286 l       .text	00000000 
0800228e l       .text	00000000 
08002290 l       .text	00000000 
08002294 l       .text	00000000 
080022aa l       .text	00000000 
080022ac l       .text	00000000 
080022b8 l       .text	00000000 
080022c0 l       .text	00000000 
080022c4 l       .text	00000000 
080022c6 l       .text	00000000 
080022ce l       .text	00000000 
080022d0 l       .text	00000000 
080022d4 l       .text	00000000 
080022f4 l       .text	00000000 
080022f6 l       .text	00000000 
080022f8 l       .text	00000000 
080022fa l       .text	00000000 
08002302 l       .text	00000000 
0800230a l       .text	00000000 
0800230c l       .text	00000000 
08002310 l       .text	00000000 
08002326 l       .text	00000000 
08002326 l       .text	00000000 
08002326 l       .text	00000000 
08002326 l       .text	00000000 
0800232a l       .text	00000000 
0800232a l       .text	00000000 
0800232a l       .text	00000000 
0800232c l       .text	00000000 
0800232e l       .text	00000000 
0800232e l       .text	00000000 
0800232e l       .text	00000000 
08002338 l       .text	00000000 
08002340 l       .text	00000000 
08002340 l       .text	00000000 
08002340 l       .text	00000000 
08002348 l       .text	00000000 
0800234a l       .text	00000000 
0800234c l       .text	00000000 
0800234e l       .text	00000000 
0800235a l       .text	00000000 
08002366 l       .text	00000000 
08002370 l       .text	00000000 
08002378 l       .text	00000000 
0800237a l       .text	00000000 
0800237c l       .text	00000000 
08002380 l       .text	00000000 
08002382 l       .text	00000000 
08002388 l       .text	00000000 
0800238e l       .text	00000000 
0800239e l       .text	00000000 
080023a6 l       .text	00000000 
080023aa l       .text	00000000 
080023b2 l       .text	00000000 
080023b4 l       .text	00000000 
080023b8 l       .text	00000000 
080023d8 l       .text	00000000 
080023da l       .text	00000000 
080023dc l       .text	00000000 
080023de l       .text	00000000 
080023e6 l       .text	00000000 
080023ee l       .text	00000000 
080023f0 l       .text	00000000 
080023f4 l       .text	00000000 
080023f8 l       .text	00000000 
08002402 l       .text	00000000 
0800240a l       .text	00000000 
0800240a l       .text	00000000 
0800240a l       .text	00000000 
0800240a l       .text	00000000 
08002412 l       .text	00000000 
08002412 l       .text	00000000 
08002412 l       .text	00000000 
08002418 l       .text	00000000 
08002422 l       .text	00000000 
08002434 l       .text	00000000 
08002434 l       .text	00000000 
08002434 l       .text	00000000 
0800243c l       .text	00000000 
0800243c l       .text	00000000 
0800243c l       .text	00000000 
08002444 l       .text	00000000 
08002444 l       .text	00000000 
08002444 l       .text	00000000 
0800245e l       .text	00000000 
08002460 l       .text	00000000 
08002462 l       .text	00000000 
08002464 l       .text	00000000 
0800246c l       .text	00000000 
0800246e l       .text	00000000 
0800247e l       .text	00000000 
08002488 l       .text	00000000 
0800248c l       .text	00000000 
0800248e l       .text	00000000 
08002490 l       .text	00000000 
08002494 l       .text	00000000 
08002498 l       .text	00000000 
0800249c l       .text	00000000 
0800249e l       .text	00000000 
080024a6 l       .text	00000000 
080024ae l       .text	00000000 
080024ba l       .text	00000000 
080024c4 l       .text	00000000 
080024cc l       .text	00000000 
080024d6 l       .text	00000000 
080024dc l       .text	00000000 
080024e4 l       .text	00000000 
080024e8 l       .text	00000000 
080024ec l       .text	00000000 
080024f0 l       .text	00000000 
080024f6 l       .text	00000000 
080024fa l       .text	00000000 
080024fe l       .text	00000000 
08002502 l       .text	00000000 
08002506 l       .text	00000000 
0800250c l       .text	00000000 
08002514 l       .text	00000000 
0800251c l       .text	00000000 
08002534 l       .text	00000000 
0800254e l       .text	00000000 
08002556 l       .text	00000000 
0800255c l       .text	00000000 
08002560 l       .text	00000000 
08002564 l       .text	00000000 
08002568 l       .text	00000000 
0800256c l       .text	00000000 
08002572 l       .text	00000000 
0800257a l       .text	00000000 
08002582 l       .text	00000000 
0800259a l       .text	00000000 
080025be l       .text	00000000 
080025c0 l       .text	00000000 
080025c6 l       .text	00000000 
080025c8 l       .text	00000000 
080025dc l       .text	00000000 
080025f4 l       .text	00000000 
080025f8 l       .text	00000000 
0800260c l       .text	00000000 
08002610 l       .text	00000000 
08002624 l       .text	00000000 
08002628 l       .text	00000000 
0800263c l       .text	00000000 
0800263c l       .text	00000000 
0800263c l       .text	00000000 
0800263c l       .text	00000000 
0800264a l       .text	00000000 
0800264c l       .text	00000000 
0800264e l       .text	00000000 
08002658 l       .text	00000000 
0800265c l       .text	00000000 
08002666 l       .text	00000000 
0800266a l       .text	00000000 
0800266c l       .text	00000000 
08002670 l       .text	00000000 
08002674 l       .text	00000000 
08002678 l       .text	00000000 
0800267a l       .text	00000000 
08002682 l       .text	00000000 
0800268a l       .text	00000000 
080026a0 l       .text	00000000 
080026a2 l       .text	00000000 
080026aa l       .text	00000000 
080026b0 l       .text	00000000 
080026b4 l       .text	00000000 
080026b8 l       .text	00000000 
080026bc l       .text	00000000 
080026c0 l       .text	00000000 
080026c6 l       .text	00000000 
080026ce l       .text	00000000 
080026d6 l       .text	00000000 
080026da l       .text	00000000 
080026e0 l       .text	00000000 
080026f0 l       .text	00000000 
080026f2 l       .text	00000000 
080026fc l       .text	00000000 
080026fe l       .text	00000000 
0800270c l       .text	00000000 
08002724 l       .text	00000000 
08002734 l       .text	00000000 
0800273c l       .text	00000000 
0800273c l       .text	00000000 
0800273c l       .text	00000000 
0800273c l       .text	00000000 
08002744 l       .text	00000000 
08002746 l       .text	00000000 
08002748 l       .text	00000000 
0800274c l       .text	00000000 
08002750 l       .text	00000000 
08002756 l       .text	00000000 
0800275e l       .text	00000000 
08002766 l       .text	00000000 
08002772 l       .text	00000000 
0800277c l       .text	00000000 
08002780 l       .text	00000000 
08002788 l       .text	00000000 
08002798 l       .text	00000000 
080027a0 l       .text	00000000 
080027a0 l       .text	00000000 
080027a0 l       .text	00000000 
080027a8 l       .text	00000000 
080027aa l       .text	00000000 
080027ac l       .text	00000000 
080027b0 l       .text	00000000 
080027b6 l       .text	00000000 
080027be l       .text	00000000 
080027c6 l       .text	00000000 
080027ca l       .text	00000000 
080027cc l       .text	00000000 
080027d6 l       .text	00000000 
080027e0 l       .text	00000000 
080027ec l       .text	00000000 
080027f0 l       .text	00000000 
080027fc l       .text	00000000 
08002804 l       .text	00000000 
08002804 l       .text	00000000 
08002804 l       .text	00000000 
08002818 l       .text	00000000 
08002824 l       .text	00000000 
0800282c l       .text	00000000 
08002830 l       .text	00000000 
08002832 l       .text	00000000 
0800283a l       .text	00000000 
0800283c l       .text	00000000 
08002840 l       .text	00000000 
08002860 l       .text	00000000 
08002862 l       .text	00000000 
08002864 l       .text	00000000 
08002866 l       .text	00000000 
0800286e l       .text	00000000 
08002876 l       .text	00000000 
08002878 l       .text	00000000 
0800287c l       .text	00000000 
08002892 l       .text	00000000 
08002892 l       .text	00000000 
08002892 l       .text	00000000 
08002894 l       .text	00000000 
08002894 l       .text	00000000 
08002894 l       .text	00000000 
08002896 l       .text	00000000 
08002896 l       .text	00000000 
08002896 l       .text	00000000 
080028a6 l       .text	00000000 
080028a8 l       .text	00000000 
080028aa l       .text	00000000 
080028b0 l       .text	00000000 
080028b4 l       .text	00000000 
080028c8 l       .text	00000000 
080028c8 l       .text	00000000 
080028c8 l       .text	00000000 
080028d4 l       .text	00000000 
080028e0 l       .text	00000000 
080028e0 l       .text	00000000 
080028e0 l       .text	00000000 
080028e4 l       .text	00000000 
080028f0 l       .text	00000000 
08002918 l       .text	00000000 
08002920 l       .text	00000000 
08002924 l       .text	00000000 
08002926 l       .text	00000000 
0800292e l       .text	00000000 
08002930 l       .text	00000000 
08002934 l       .text	00000000 
08002954 l       .text	00000000 
08002956 l       .text	00000000 
08002958 l       .text	00000000 
0800295a l       .text	00000000 
08002962 l       .text	00000000 
0800296a l       .text	00000000 
0800296c l       .text	00000000 
08002970 l       .text	00000000 
0800297e l       .text	00000000 
08002986 l       .text	00000000 
08002986 l       .text	00000000 
08002986 l       .text	00000000 
0800298c l       .text	00000000 
08002996 l       .text	00000000 
08002998 l       .text	00000000 
080029a0 l       .text	00000000 
080029a4 l       .text	00000000 
080029a8 l       .text	00000000 
080029aa l       .text	00000000 
080029ae l       .text	00000000 
080029b0 l       .text	00000000 
080029ba l       .text	00000000 
080029bc l       .text	00000000 
080029c4 l       .text	00000000 
080029c8 l       .text	00000000 
080029ca l       .text	00000000 
080029cc l       .text	00000000 
080029d4 l       .text	00000000 
080029da l       .text	00000000 
080029dc l       .text	00000000 
080029e2 l       .text	00000000 
080029e6 l       .text	00000000 
080029fa l       .text	00000000 
080029fc l       .text	00000000 
08002a0a l       .text	00000000 
08002a12 l       .text	00000000 
08002a16 l       .text	00000000 
08002a1e l       .text	00000000 
08002a20 l       .text	00000000 
08002a24 l       .text	00000000 
08002a44 l       .text	00000000 
08002a46 l       .text	00000000 
08002a48 l       .text	00000000 
08002a4a l       .text	00000000 
08002a52 l       .text	00000000 
08002a5a l       .text	00000000 
08002a5c l       .text	00000000 
08002a60 l       .text	00000000 
08002a76 l       .text	00000000 
08002a76 l       .text	00000000 
08002a76 l       .text	00000000 
08002a76 l       .text	00000000 
08002a82 l       .text	00000000 
08002a8a l       .text	00000000 
08002a8a l       .text	00000000 
08002a8a l       .text	00000000 
08002a9a l       .text	00000000 
08002aa8 l       .text	00000000 
08002aa8 l       .text	00000000 
08002aa8 l       .text	00000000 
08002aae l       .text	00000000 
08002ab0 l       .text	00000000 
08002ab2 l       .text	00000000 
08002abe l       .text	00000000 
08002ac2 l       .text	00000000 
08002aca l       .text	00000000 
08002ad4 l       .text	00000000 
08002adc l       .text	00000000 
08002ae0 l       .text	00000000 
08002aea l       .text	00000000 
08002afa l       .text	00000000 
08002b02 l       .text	00000000 
08002b06 l       .text	00000000 
08002b0e l       .text	00000000 
08002b10 l       .text	00000000 
08002b14 l       .text	00000000 
08002b34 l       .text	00000000 
08002b36 l       .text	00000000 
08002b38 l       .text	00000000 
08002b3a l       .text	00000000 
08002b42 l       .text	00000000 
08002b4a l       .text	00000000 
08002b4c l       .text	00000000 
08002b50 l       .text	00000000 
08002b54 l       .text	00000000 
08002b5e l       .text	00000000 
08002b66 l       .text	00000000 
08002b66 l       .text	00000000 
08002b66 l       .text	00000000 
08002b66 l       .text	00000000 
08002b6c l       .text	00000000 
08002b70 l       .text	00000000 
08002b7c l       .text	00000000 
08002b80 l       .text	00000000 
08002b88 l       .text	00000000 
08002b92 l       .text	00000000 
08002b9a l       .text	00000000 
08002baa l       .text	00000000 
08002bba l       .text	00000000 
08002bc2 l       .text	00000000 
08002bc6 l       .text	00000000 
08002bce l       .text	00000000 
08002bd0 l       .text	00000000 
08002bd4 l       .text	00000000 
08002bf4 l       .text	00000000 
08002bf6 l       .text	00000000 
08002bf8 l       .text	00000000 
08002bfa l       .text	00000000 
08002c02 l       .text	00000000 
08002c0a l       .text	00000000 
08002c0c l       .text	00000000 
08002c10 l       .text	00000000 
08002c1e l       .text	00000000 
08002c26 l       .text	00000000 
08002c26 l       .text	00000000 
08002c26 l       .text	00000000 
08002c26 l       .text	00000000 
08002c30 l       .text	00000000 
08002c38 l       .text	00000000 
08002c48 l       .text	00000000 
08002c48 l       .text	00000000 
08002c48 l       .text	00000000 
08002c58 l       .text	00000000 
08002c68 l       .text	00000000 
08002c68 l       .text	00000000 
08002c68 l       .text	00000000 
08002c78 l       .text	00000000 
08002c7c l       .text	00000000 
08002c8c l       .text	00000000 
08002c8c l       .text	00000000 
08002c8c l       .text	00000000 
08002c94 l       .text	00000000 
08002ddc l       .text	00000000 
08002dee l       .text	00000000 
00000853 l       .debug_str	00000000 
000033a8 l       .debug_str	00000000 
00000036 l       .debug_str	00000000 
00000c10 l       .debug_str	00000000 
0000096e l       .debug_str	00000000 
000080d6 l       .debug_str	00000000 
000080d5 l       .debug_str	00000000 
000008c8 l       .debug_str	00000000 
000151e0 l       .debug_str	00000000 
0000005f l       .debug_str	00000000 
000033bf l       .debug_str	00000000 
000033d0 l       .debug_str	00000000 
000112ea l       .debug_str	00000000 
00000956 l       .debug_str	00000000 
000008d9 l       .debug_str	00000000 
0000095e l       .debug_str	00000000 
00000967 l       .debug_str	00000000 
00010621 l       .debug_str	00000000 
00005b2d l       .debug_str	00000000 
00005f39 l       .debug_str	00000000 
000082b7 l       .debug_str	00000000 
00000971 l       .debug_str	00000000 
00000e38 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00002b6d l       .debug_str	00000000 
00004dfb l       .debug_str	00000000 
000033db l       .debug_str	00000000 
000082a6 l       .debug_str	00000000 
0000783e l       .debug_str	00000000 
000082fd l       .debug_str	00000000 
000009fa l       .debug_str	00000000 
00009769 l       .debug_str	00000000 
00010127 l       .debug_str	00000000 
000011e9 l       .debug_str	00000000 
00000a2c l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000a3f l       .debug_str	00000000 
00000a4a l       .debug_str	00000000 
00000a57 l       .debug_str	00000000 
00000a62 l       .debug_str	00000000 
00000a6a l       .debug_str	00000000 
00000a75 l       .debug_str	00000000 
00000a80 l       .debug_str	00000000 
00000a8a l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
00000aa0 l       .debug_str	00000000 
00000aad l       .debug_str	00000000 
00000ab9 l       .debug_str	00000000 
00000ac6 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
00000ade l       .debug_str	00000000 
00008177 l       .debug_str	00000000 
00003a3a l       .debug_str	00000000 
000009fd l       .debug_str	00000000 
0000341f l       .debug_str	00000000 
0000822a l       .debug_str	00000000 
0001252e l       .debug_str	00000000 
000008cf l       .debug_str	00000000 
000008d4 l       .debug_str	00000000 
000008dd l       .debug_str	00000000 
0000980f l       .debug_str	00000000 
000008e3 l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
00004e83 l       .debug_str	00000000 
00004778 l       .debug_str	00000000 
00004786 l       .debug_str	00000000 
000008ef l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000e56 l       .debug_str	00000000 
00000e41 l       .debug_str	00000000 
000033e9 l       .debug_str	00000000 
00014d44 l       .debug_str	00000000 
000010a4 l       .debug_str	00000000 
00002b6a l       .debug_str	00000000 
00002b79 l       .debug_str	00000000 
0000fadd l       .debug_str	00000000 
00001410 l       .debug_str	00000000 
000010ad l       .debug_str	00000000 
000091b5 l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010c0 l       .debug_str	00000000 
00000aeb l       .debug_str	00000000 
00000aef l       .debug_str	00000000 
00000afa l       .debug_str	00000000 
000010d8 l       .debug_str	00000000 
000010c8 l       .debug_str	00000000 
000010df l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
000011a6 l       .debug_str	00000000 
000011ed l       .debug_str	00000000 
0000123c l       .debug_str	00000000 
00001246 l       .debug_str	00000000 
00001283 l       .debug_str	00000000 
000012c8 l       .debug_str	00000000 
000012d1 l       .debug_str	00000000 
000012e1 l       .debug_str	00000000 
000012e9 l       .debug_str	00000000 
0000133e l       .debug_str	00000000 
0000139b l       .debug_str	00000000 
000013a7 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
000013c8 l       .debug_str	00000000 
000013d1 l       .debug_str	00000000 
000013d9 l       .debug_str	00000000 
000006b3 l       .debug_str	00000000 
000013e1 l       .debug_str	00000000 
0000140f l       .debug_str	00000000 
000013f6 l       .debug_str	00000000 
00001416 l       .debug_str	00000000 
0000141d l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
000004f6 l       .debug_str	00000000 
0000142f l       .debug_str	00000000 
000006bd l       .debug_str	00000000 
00000589 l       .debug_str	00000000 
00008c21 l       .debug_str	00000000 
0000070c l       .debug_str	00000000 
00000715 l       .debug_str	00000000 
00000688 l       .debug_str	00000000 
0000fe7c l       .debug_str	00000000 
000006ed l       .debug_str	00000000 
00000706 l       .debug_str	00000000 
000154b5 l       .debug_str	00000000 
0000f2e6 l       .debug_str	00000000 
00001438 l       .debug_str	00000000 
00001465 l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
000116f2 l       .debug_str	00000000 
000006a4 l       .debug_str	00000000 
00000738 l       .debug_str	00000000 
000004ca l       .debug_str	00000000 
00000600 l       .debug_str	00000000 
0000149a l       .debug_str	00000000 
000014c3 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
000005f9 l       .debug_str	00000000 
00000757 l       .debug_str	00000000 
00000510 l       .debug_str	00000000 
00001587 l       .debug_str	00000000 
000014b3 l       .debug_str	00000000 
000004bc l       .debug_str	00000000 
00000649 l       .debug_str	00000000 
00000654 l       .debug_str	00000000 
00000748 l       .debug_str	00000000 
000015a5 l       .debug_str	00000000 
0000059e l       .debug_str	00000000 
000006b4 l       .debug_str	00000000 
00000595 l       .debug_str	00000000 
000015bb l       .debug_str	00000000 
000015e1 l       .debug_str	00000000 
00000496 l       .debug_str	00000000 
000015f7 l       .debug_str	00000000 
000082d5 l       .debug_str	00000000 
000015c0 l       .debug_str	00000000 
0000160d l       .debug_str	00000000 
0000b22c l       .debug_str	00000000 
00001624 l       .debug_str	00000000 
0000162c l       .debug_str	00000000 
00001635 l       .debug_str	00000000 
00002a50 l       .debug_str	00000000 
0000163e l       .debug_str	00000000 
00017d21 l       .debug_str	00000000 
00001646 l       .debug_str	00000000 
00001652 l       .debug_str	00000000 
0000165d l       .debug_str	00000000 
00001665 l       .debug_str	00000000 
0000166d l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
0000186d l       .debug_str	00000000 
0000187b l       .debug_str	00000000 
00001886 l       .debug_str	00000000 
00000c17 l       .debug_str	00000000 
000018b3 l       .debug_str	00000000 
00001890 l       .debug_str	00000000 
000018be l       .debug_str	00000000 
00001939 l       .debug_str	00000000 
000019bc l       .debug_str	00000000 
000019ca l       .debug_str	00000000 
00001a29 l       .debug_str	00000000 
00001a90 l       .debug_str	00000000 
00001aa6 l       .debug_str	00000000 
00001ab6 l       .debug_str	00000000 
00012740 l       .debug_str	00000000 
00000c9e l       .debug_str	00000000 
00001ac5 l       .debug_str	00000000 
00001acb l       .debug_str	00000000 
00001ad1 l       .debug_str	00000000 
00001ad7 l       .debug_str	00000000 
00001ae3 l       .debug_str	00000000 
00018386 l       .debug_str	00000000 
00001aeb l       .debug_str	00000000 
00001af3 l       .debug_str	00000000 
00001af9 l       .debug_str	00000000 
00001b3f l       .debug_str	00000000 
00001b1c l       .debug_str	00000000 
00001b4f l       .debug_str	00000000 
00001b8f l       .debug_str	00000000 
00012ef9 l       .debug_str	00000000 
00001bd7 l       .debug_str	00000000 
00001bdd l       .debug_str	00000000 
00001be3 l       .debug_str	00000000 
00001c0c l       .debug_str	00000000 
00001be9 l       .debug_str	00000000 
00001c1e l       .debug_str	00000000 
00001c60 l       .debug_str	00000000 
000131b6 l       .debug_str	00000000 
00001caa l       .debug_str	00000000 
00001cb0 l       .debug_str	00000000 
00001cb6 l       .debug_str	00000000 
00001cdf l       .debug_str	00000000 
00001cbc l       .debug_str	00000000 
00001cf1 l       .debug_str	00000000 
00001d33 l       .debug_str	00000000 
00013a06 l       .debug_str	00000000 
00001d7d l       .debug_str	00000000 
00001d83 l       .debug_str	00000000 
00001d89 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001db8 l       .debug_str	00000000 
00001d95 l       .debug_str	00000000 
00001dc9 l       .debug_str	00000000 
00001e0a l       .debug_str	00000000 
00001e53 l       .debug_str	00000000 
00001e58 l       .debug_str	00000000 
000132c6 l       .debug_str	00000000 
00001e5d l       .debug_str	00000000 
00001e63 l       .debug_str	00000000 
00001e69 l       .debug_str	00000000 
00001e92 l       .debug_str	00000000 
00001e6f l       .debug_str	00000000 
00001ea3 l       .debug_str	00000000 
00001ee4 l       .debug_str	00000000 
00012689 l       .debug_str	00000000 
00001f2d l       .debug_str	00000000 
00001f59 l       .debug_str	00000000 
00001f36 l       .debug_str	00000000 
00001f6a l       .debug_str	00000000 
00001fab l       .debug_str	00000000 
00001ff4 l       .debug_str	00000000 
0001263b l       .debug_str	00000000 
00001ff9 l       .debug_str	00000000 
00002002 l       .debug_str	00000000 
00002009 l       .debug_str	00000000 
00002034 l       .debug_str	00000000 
00002011 l       .debug_str	00000000 
00002046 l       .debug_str	00000000 
00002088 l       .debug_str	00000000 
00013066 l       .debug_str	00000000 
000020d2 l       .debug_str	00000000 
000020d8 l       .debug_str	00000000 
000020de l       .debug_str	00000000 
000020e4 l       .debug_str	00000000 
000020ea l       .debug_str	00000000 
000020f2 l       .debug_str	00000000 
00002100 l       .debug_str	00000000 
0000210f l       .debug_str	00000000 
00002120 l       .debug_str	00000000 
0000212b l       .debug_str	00000000 
00002136 l       .debug_str	00000000 
00002141 l       .debug_str	00000000 
00002148 l       .debug_str	00000000 
0000218e l       .debug_str	00000000 
0000216b l       .debug_str	00000000 
000021a0 l       .debug_str	00000000 
000021e2 l       .debug_str	00000000 
0001395b l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002259 l       .debug_str	00000000 
00002236 l       .debug_str	00000000 
0000226b l       .debug_str	00000000 
000022ad l       .debug_str	00000000 
000022f7 l       .debug_str	00000000 
000022fc l       .debug_str	00000000 
00002329 l       .debug_str	00000000 
00002306 l       .debug_str	00000000 
0000233b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000023c7 l       .debug_str	00000000 
00004e41 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
000023db l       .debug_str	00000000 
000023eb l       .debug_str	00000000 
000023f4 l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
0000240e l       .debug_str	00000000 
00002423 l       .debug_str	00000000 
00002454 l       .debug_str	00000000 
000024f1 l       .debug_str	00000000 
00002596 l       .debug_str	00000000 
000025a1 l       .debug_str	00000000 
000025aa l       .debug_str	00000000 
000025ee l       .debug_str	00000000 
000025cb l       .debug_str	00000000 
00002601 l       .debug_str	00000000 
00002684 l       .debug_str	00000000 
0000270f l       .debug_str	00000000 
0000272b l       .debug_str	00000000 
00002777 l       .debug_str	00000000 
000027cb l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
000027fc l       .debug_str	00000000 
00002848 l       .debug_str	00000000 
0000289c l       .debug_str	00000000 
000028b2 l       .debug_str	00000000 
000028c6 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
0000295c l       .debug_str	00000000 
00002988 l       .debug_str	00000000 
00002965 l       .debug_str	00000000 
00002996 l       .debug_str	00000000 
0000299c l       .debug_str	00000000 
000029a4 l       .debug_str	00000000 
000029ab l       .debug_str	00000000 
000029b3 l       .debug_str	00000000 
000029be l       .debug_str	00000000 
000029c6 l       .debug_str	00000000 
00008bd3 l       .debug_str	00000000 
000029d5 l       .debug_str	00000000 
000029e0 l       .debug_str	00000000 
000029ec l       .debug_str	00000000 
000029f7 l       .debug_str	00000000 
00002a08 l       .debug_str	00000000 
00002a0e l       .debug_str	00000000 
00002a16 l       .debug_str	00000000 
00002a1d l       .debug_str	00000000 
00002a27 l       .debug_str	00000000 
00002a2f l       .debug_str	00000000 
00002a37 l       .debug_str	00000000 
00002a59 l       .debug_str	00000000 
00002a64 l       .debug_str	00000000 
00002a70 l       .debug_str	00000000 
00002a78 l       .debug_str	00000000 
00002a81 l       .debug_str	00000000 
000005e3 l       .debug_str	00000000 
00002a8c l       .debug_str	00000000 
00002a97 l       .debug_str	00000000 
00002aa2 l       .debug_str	00000000 
00002ab2 l       .debug_str	00000000 
00012633 l       .debug_str	00000000 
000030d3 l       .debug_str	00000000 
00002abc l       .debug_str	00000000 
00002af4 l       .debug_str	00000000 
00002b34 l       .debug_str	00000000 
00002b3b l       .debug_str	00000000 
00002b43 l       .debug_str	00000000 
000030ec l       .debug_str	00000000 
00002b5a l       .debug_str	00000000 
00002b90 l       .debug_str	00000000 
00002bc3 l       .debug_str	00000000 
00002bd8 l       .debug_str	00000000 
00002be1 l       .debug_str	00000000 
00002c3e l       .debug_str	00000000 
00002ca3 l       .debug_str	00000000 
00002cad l       .debug_str	00000000 
00002cbd l       .debug_str	00000000 
00002cd2 l       .debug_str	00000000 
00002cda l       .debug_str	00000000 
00002d3e l       .debug_str	00000000 
00002daa l       .debug_str	00000000 
00002db1 l       .debug_str	00000000 
00002db9 l       .debug_str	00000000 
00002dfa l       .debug_str	00000000 
00002dd7 l       .debug_str	00000000 
00002e0a l       .debug_str	00000000 
00002e1f l       .debug_str	00000000 
00002e32 l       .debug_str	00000000 
00002e47 l       .debug_str	00000000 
00002e4e l       .debug_str	00000000 
00002e63 l       .debug_str	00000000 
00004469 l       .debug_str	00000000 
000043c3 l       .debug_str	00000000 
00002b81 l       .debug_str	00000000 
00002b88 l       .debug_str	00000000 
000081d1 l       .debug_str	00000000 
00002bb3 l       .debug_str	00000000 
00003447 l       .debug_str	00000000 
0000345c l       .debug_str	00000000 
00003497 l       .debug_str	00000000 
000034a9 l       .debug_str	00000000 
00010b3e l       .debug_str	00000000 
000034e5 l       .debug_str	00000000 
000034f2 l       .debug_str	00000000 
000034ff l       .debug_str	00000000 
0000350a l       .debug_str	00000000 
00005819 l       .debug_str	00000000 
00003517 l       .debug_str	00000000 
0000355b l       .debug_str	00000000 
00003569 l       .debug_str	00000000 
00011103 l       .debug_str	00000000 
000182e1 l       .debug_str	00000000 
00003572 l       .debug_str	00000000 
000035d4 l       .debug_str	00000000 
0000363e l       .debug_str	00000000 
0000366d l       .debug_str	00000000 
0000364c l       .debug_str	00000000 
00003681 l       .debug_str	00000000 
0000368c l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00007734 l       .debug_str	00000000 
00003692 l       .debug_str	00000000 
000036d7 l       .debug_str	00000000 
000036e5 l       .debug_str	00000000 
00000a01 l       .debug_str	00000000 
0000e35d l       .debug_str	00000000 
00015710 l       .debug_str	00000000 
00000de0 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000a0d l       .debug_str	00000000 
00000a13 l       .debug_str	00000000 
00000a1a l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
00000a31 l       .debug_str	00000000 
0000372a l       .debug_str	00000000 
000080ba l       .debug_str	00000000 
0000fc2a l       .debug_str	00000000 
00000b05 l       .debug_str	00000000 
00003739 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
000157ba l       .debug_str	00000000 
00000b43 l       .debug_str	00000000 
00000124 l       .debug_str	00000000 
0000a3fb l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000b48 l       .debug_str	00000000 
000125ed l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00004af1 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c85 l       .debug_str	00000000 
00000c90 l       .debug_str	00000000 
00000c97 l       .debug_str	00000000 
00000963 l       .debug_str	00000000 
00000be6 l       .debug_str	00000000 
00000bec l       .debug_str	00000000 
00000bfb l       .debug_str	00000000 
00000bff l       .debug_str	00000000 
00000c37 l       .debug_str	00000000 
00000c43 l       .debug_str	00000000 
00000c68 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000d16 l       .debug_str	00000000 
00000d86 l       .debug_str	00000000 
00000d74 l       .debug_str	00000000 
0001826a l       .debug_str	00000000 
00000c9d l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cbc l       .debug_str	00000000 
00000ce0 l       .debug_str	00000000 
00012728 l       .debug_str	00000000 
00000d91 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00003795 l       .debug_str	00000000 
00008093 l       .debug_str	00000000 
000037f2 l       .debug_str	00000000 
00008099 l       .debug_str	00000000 
0000385e l       .debug_str	00000000 
00003872 l       .debug_str	00000000 
0000387b l       .debug_str	00000000 
00003882 l       .debug_str	00000000 
00004ec0 l       .debug_str	00000000 
0000388d l       .debug_str	00000000 
00003898 l       .debug_str	00000000 
000038f8 l       .debug_str	00000000 
000048ee l       .debug_str	00000000 
000048df l       .debug_str	00000000 
00003901 l       .debug_str	00000000 
0000390a l       .debug_str	00000000 
00004758 l       .debug_str	00000000 
00003967 l       .debug_str	00000000 
000080c5 l       .debug_str	00000000 
000039c4 l       .debug_str	00000000 
00003a0c l       .debug_str	00000000 
0001509b l       .debug_str	00000000 
00003a14 l       .debug_str	00000000 
00003a3c l       .debug_str	00000000 
00003a61 l       .debug_str	00000000 
00011fac l       .debug_str	00000000 
000030b2 l       .debug_str	00000000 
000030bc l       .debug_str	00000000 
000030c5 l       .debug_str	00000000 
00000608 l       .debug_str	00000000 
0000069a l       .debug_str	00000000 
000030ce l       .debug_str	00000000 
000030f5 l       .debug_str	00000000 
00003126 l       .debug_str	00000000 
0000310d l       .debug_str	00000000 
00003a66 l       .debug_str	00000000 
00000758 l       .debug_str	00000000 
00003a73 l       .debug_str	00000000 
00003a6e l       .debug_str	00000000 
00003a97 l       .debug_str	00000000 
00003a8c l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
00003ad8 l       .debug_str	00000000 
00003aff l       .debug_str	00000000 
00003b09 l       .debug_str	00000000 
00003b11 l       .debug_str	00000000 
00003b18 l       .debug_str	00000000 
00003b1f l       .debug_str	00000000 
00003b29 l       .debug_str	00000000 
00003b24 l       .debug_str	00000000 
00003b4c l       .debug_str	00000000 
00003b42 l       .debug_str	00000000 
00003b64 l       .debug_str	00000000 
00003b8c l       .debug_str	00000000 
00003bb2 l       .debug_str	00000000 
00003bda l       .debug_str	00000000 
00003bfd l       .debug_str	00000000 
00003c05 l       .debug_str	00000000 
00003c0e l       .debug_str	00000000 
00003c1c l       .debug_str	00000000 
00003c23 l       .debug_str	00000000 
00003c2a l       .debug_str	00000000 
00003c3a l       .debug_str	00000000 
00003c43 l       .debug_str	00000000 
00003c51 l       .debug_str	00000000 
00003c5f l       .debug_str	00000000 
00003c6b l       .debug_str	00000000 
0000faf3 l       .debug_str	00000000 
00003c77 l       .debug_str	00000000 
00003c86 l       .debug_str	00000000 
00003c8e l       .debug_str	00000000 
00003ca7 l       .debug_str	00000000 
00003cb8 l       .debug_str	00000000 
00003cc0 l       .debug_str	00000000 
00003cf3 l       .debug_str	00000000 
00003cda l       .debug_str	00000000 
00003cff l       .debug_str	00000000 
000013d4 l       .debug_str	00000000 
00003d31 l       .debug_str	00000000 
00003d18 l       .debug_str	00000000 
00003d3c l       .debug_str	00000000 
00003d45 l       .debug_str	00000000 
00003d79 l       .debug_str	00000000 
00003d60 l       .debug_str	00000000 
00003d86 l       .debug_str	00000000 
00003d8e l       .debug_str	00000000 
00003daf l       .debug_str	00000000 
00003dc5 l       .debug_str	00000000 
00003dd0 l       .debug_str	00000000 
00003de0 l       .debug_str	00000000 
00003de4 l       .debug_str	00000000 
00003da7 l       .debug_str	00000000 
00003dff l       .debug_str	00000000 
00003e27 l       .debug_str	00000000 
00003e4b l       .debug_str	00000000 
00003e73 l       .debug_str	00000000 
00003e9a l       .debug_str	00000000 
00003ec2 l       .debug_str	00000000 
00003eee l       .debug_str	00000000 
00003f16 l       .debug_str	00000000 
00003f3a l       .debug_str	00000000 
00003f43 l       .debug_str	00000000 
00003f58 l       .debug_str	00000000 
00003f63 l       .debug_str	00000000 
00003f6a l       .debug_str	00000000 
00003f92 l       .debug_str	00000000 
00003fb5 l       .debug_str	00000000 
00003fdd l       .debug_str	00000000 
00004011 l       .debug_str	00000000 
00004039 l       .debug_str	00000000 
0000406f l       .debug_str	00000000 
00004097 l       .debug_str	00000000 
000040d0 l       .debug_str	00000000 
000040f8 l       .debug_str	00000000 
00004129 l       .debug_str	00000000 
00004151 l       .debug_str	00000000 
0001310a l       .debug_str	00000000 
0000417e l       .debug_str	00000000 
00004191 l       .debug_str	00000000 
0000419c l       .debug_str	00000000 
00004b56 l       .debug_str	00000000 
00004b64 l       .debug_str	00000000 
000041ac l       .debug_str	00000000 
000041d4 l       .debug_str	00000000 
000086a6 l       .debug_str	00000000 
000181d7 l       .debug_str	00000000 
00015e9e l       .debug_str	00000000 
00004208 l       .debug_str	00000000 
0000429d l       .debug_str	00000000 
0001570d l       .debug_str	00000000 
000042a9 l       .debug_str	00000000 
000042c4 l       .debug_str	00000000 
000042ad l       .debug_str	00000000 
000161e5 l       .debug_str	00000000 
000042d1 l       .debug_str	00000000 
00004334 l       .debug_str	00000000 
000043b4 l       .debug_str	00000000 
00004447 l       .debug_str	00000000 
0000444d l       .debug_str	00000000 
00004457 l       .debug_str	00000000 
0000445d l       .debug_str	00000000 
00004468 l       .debug_str	00000000 
000044e5 l       .debug_str	00000000 
000044ef l       .debug_str	00000000 
000168a5 l       .debug_str	00000000 
00015c6a l       .debug_str	00000000 
0000f700 l       .debug_str	00000000 
000044f3 l       .debug_str	00000000 
000045ab l       .debug_str	00000000 
00000b0e l       .debug_str	00000000 
00000b1c l       .debug_str	00000000 
00000b15 l       .debug_str	00000000 
00000b21 l       .debug_str	00000000 
00000b29 l       .debug_str	00000000 
00000b32 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3a l       .debug_str	00000000 
00015235 l       .debug_str	00000000 
00000b52 l       .debug_str	00000000 
00000b59 l       .debug_str	00000000 
00000b55 l       .debug_str	00000000 
00000b5f l       .debug_str	00000000 
00000b67 l       .debug_str	00000000 
00000b6d l       .debug_str	00000000 
00000b92 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b9b l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
000090d3 l       .debug_str	00000000 
00000daa l       .debug_str	00000000 
00000ddc l       .debug_str	00000000 
0000460f l       .debug_str	00000000 
00018210 l       .debug_str	00000000 
00013913 l       .debug_str	00000000 
0000463c l       .debug_str	00000000 
00004642 l       .debug_str	00000000 
00008c2a l       .debug_str	00000000 
00005b2c l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
000046e5 l       .debug_str	00000000 
00000e23 l       .debug_str	00000000 
000046f9 l       .debug_str	00000000 
00004705 l       .debug_str	00000000 
00004713 l       .debug_str	00000000 
0000472a l       .debug_str	00000000 
00016b85 l       .debug_str	00000000 
0000473f l       .debug_str	00000000 
00004748 l       .debug_str	00000000 
00004752 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000475d l       .debug_str	00000000 
00004762 l       .debug_str	00000000 
000090c7 l       .debug_str	00000000 
000075e2 l       .debug_str	00000000 
00004767 l       .debug_str	00000000 
00004774 l       .debug_str	00000000 
00004782 l       .debug_str	00000000 
0000478f l       .debug_str	00000000 
000047a5 l       .debug_str	00000000 
000047bc l       .debug_str	00000000 
000047d2 l       .debug_str	00000000 
000047ea l       .debug_str	00000000 
000047f5 l       .debug_str	00000000 
00012d2e l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00006f8e l       .debug_str	00000000 
0000488f l       .debug_str	00000000 
0000489b l       .debug_str	00000000 
000048a8 l       .debug_str	00000000 
000048d5 l       .debug_str	00000000 
0000f534 l       .debug_str	00000000 
000048de l       .debug_str	00000000 
0000826e l       .debug_str	00000000 
000048fa l       .debug_str	00000000 
00004945 l       .debug_str	00000000 
00004955 l       .debug_str	00000000 
00004963 l       .debug_str	00000000 
0001521e l       .debug_str	00000000 
000020e2 l       .debug_str	00000000 
00004967 l       .debug_str	00000000 
000049ae l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
00004a01 l       .debug_str	00000000 
00004a0a l       .debug_str	00000000 
000139d6 l       .debug_str	00000000 
00004a13 l       .debug_str	00000000 
00018290 l       .debug_str	00000000 
00016d54 l       .debug_str	00000000 
0000052a l       .debug_str	00000000 
00004a1d l       .debug_str	00000000 
00004a48 l       .debug_str	00000000 
0000826f l       .debug_str	00000000 
00004a4f l       .debug_str	00000000 
000149b1 l       .debug_str	00000000 
00004a54 l       .debug_str	00000000 
00004a65 l       .debug_str	00000000 
00004a7e l       .debug_str	00000000 
00004a81 l       .debug_str	00000000 
00004a92 l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
00004aab l       .debug_str	00000000 
00004ac0 l       .debug_str	00000000 
00004add l       .debug_str	00000000 
00004ae7 l       .debug_str	00000000 
00004aec l       .debug_str	00000000 
00004af9 l       .debug_str	00000000 
00004b00 l       .debug_str	00000000 
00004b08 l       .debug_str	00000000 
00004b10 l       .debug_str	00000000 
00004b17 l       .debug_str	00000000 
00004b40 l       .debug_str	00000000 
00004b23 l       .debug_str	00000000 
00004b1e l       .debug_str	00000000 
00004b4b l       .debug_str	00000000 
00004b72 l       .debug_str	00000000 
00004bbe l       .debug_str	00000000 
00004c12 l       .debug_str	00000000 
00004c2b l       .debug_str	00000000 
00004c53 l       .debug_str	00000000 
00004c8c l       .debug_str	00000000 
00004cb4 l       .debug_str	00000000 
00004cdf l       .debug_str	00000000 
00004ce8 l       .debug_str	00000000 
00004d2a l       .debug_str	00000000 
00004d74 l       .debug_str	00000000 
00004d7b l       .debug_str	00000000 
0000825c l       .debug_str	00000000 
00004d89 l       .debug_str	00000000 
00004db1 l       .debug_str	00000000 
00004dde l       .debug_str	00000000 
00004de6 l       .debug_str	00000000 
00004df0 l       .debug_str	00000000 
000181c5 l       .debug_str	00000000 
000112a4 l       .debug_str	00000000 
00004df6 l       .debug_str	00000000 
00004dff l       .debug_str	00000000 
00004e15 l       .debug_str	00000000 
00004e33 l       .debug_str	00000000 
00004e3c l       .debug_str	00000000 
00004e45 l       .debug_str	00000000 
00004e5b l       .debug_str	00000000 
00004e79 l       .debug_str	00000000 
00004e7e l       .debug_str	00000000 
00004e87 l       .debug_str	00000000 
00004e9d l       .debug_str	00000000 
000112c2 l       .debug_str	00000000 
00011592 l       .debug_str	00000000 
00004ebb l       .debug_str	00000000 
00004ec5 l       .debug_str	00000000 
00004edc l       .debug_str	00000000 
00004efb l       .debug_str	00000000 
00010f89 l       .debug_str	00000000 
00004f05 l       .debug_str	00000000 
00011478 l       .debug_str	00000000 
00010ec7 l       .debug_str	00000000 
00004f12 l       .debug_str	00000000 
00004f60 l       .debug_str	00000000 
0001210a l       .debug_str	00000000 
00004fb6 l       .debug_str	00000000 
00004fbb l       .debug_str	00000000 
00004fc1 l       .debug_str	00000000 
00004fca l       .debug_str	00000000 
00004ff3 l       .debug_str	00000000 
00005041 l       .debug_str	00000000 
00005165 l       .debug_str	00000000 
00005097 l       .debug_str	00000000 
000050c0 l       .debug_str	00000000 
0000510e l       .debug_str	00000000 
00005164 l       .debug_str	00000000 
0000516e l       .debug_str	00000000 
00005197 l       .debug_str	00000000 
000051e5 l       .debug_str	00000000 
0000523b l       .debug_str	00000000 
00005241 l       .debug_str	00000000 
0000526a l       .debug_str	00000000 
000052b8 l       .debug_str	00000000 
0000530e l       .debug_str	00000000 
00005317 l       .debug_str	00000000 
00005340 l       .debug_str	00000000 
0000538e l       .debug_str	00000000 
000053e4 l       .debug_str	00000000 
00013245 l       .debug_str	00000000 
000053ff l       .debug_str	00000000 
00005408 l       .debug_str	00000000 
0000540f l       .debug_str	00000000 
0000541c l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
000100c7 l       .debug_str	00000000 
00005488 l       .debug_str	00000000 
0000549b l       .debug_str	00000000 
000054b6 l       .debug_str	00000000 
0000062d l       .debug_str	00000000 
000054d0 l       .debug_str	00000000 
000054e1 l       .debug_str	00000000 
000054fa l       .debug_str	00000000 
0000550b l       .debug_str	00000000 
00005524 l       .debug_str	00000000 
00005536 l       .debug_str	00000000 
00005550 l       .debug_str	00000000 
0000e351 l       .debug_str	00000000 
00005568 l       .debug_str	00000000 
00011bf1 l       .debug_str	00000000 
0000e670 l       .debug_str	00000000 
000055a1 l       .debug_str	00000000 
00005582 l       .debug_str	00000000 
000055ad l       .debug_str	00000000 
000055d6 l       .debug_str	00000000 
000055b7 l       .debug_str	00000000 
00013418 l       .debug_str	00000000 
000055e2 l       .debug_str	00000000 
000055e9 l       .debug_str	00000000 
00005612 l       .debug_str	00000000 
0000563a l       .debug_str	00000000 
00005683 l       .debug_str	00000000 
000056ab l       .debug_str	00000000 
000056d8 l       .debug_str	00000000 
00005700 l       .debug_str	00000000 
0000573a l       .debug_str	00000000 
00005762 l       .debug_str	00000000 
0000578e l       .debug_str	00000000 
000057e3 l       .debug_str	00000000 
000057f4 l       .debug_str	00000000 
00005825 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005881 l       .debug_str	00000000 
0000a2e2 l       .debug_str	00000000 
000058cc l       .debug_str	00000000 
00005914 l       .debug_str	00000000 
0000591c l       .debug_str	00000000 
00005989 l       .debug_str	00000000 
0000599b l       .debug_str	00000000 
000059fd l       .debug_str	00000000 
00015c50 l       .debug_str	00000000 
00005a05 l       .debug_str	00000000 
00005a4b l       .debug_str	00000000 
0000fcc2 l       .debug_str	00000000 
00005a59 l       .debug_str	00000000 
00005a64 l       .debug_str	00000000 
00005aa2 l       .debug_str	00000000 
00016b84 l       .debug_str	00000000 
0001396e l       .debug_str	00000000 
00005aba l       .debug_str	00000000 
00005b0d l       .debug_str	00000000 
00005b21 l       .debug_str	00000000 
00005b2b l       .debug_str	00000000 
00005b33 l       .debug_str	00000000 
00005b8a l       .debug_str	00000000 
00005b9d l       .debug_str	00000000 
00005bef l       .debug_str	00000000 
00005bfd l       .debug_str	00000000 
00005c4b l       .debug_str	00000000 
00005c5a l       .debug_str	00000000 
000089dd l       .debug_str	00000000 
00005cbb l       .debug_str	00000000 
00005d2c l       .debug_str	00000000 
00005d36 l       .debug_str	00000000 
00005d99 l       .debug_str	00000000 
00005da1 l       .debug_str	00000000 
0000039d l       .debug_str	00000000 
00002f2d l       .debug_str	00000000 
00005dd2 l       .debug_str	00000000 
00005e36 l       .debug_str	00000000 
00009805 l       .debug_str	00000000 
00005e40 l       .debug_str	00000000 
00005eb9 l       .debug_str	00000000 
00005f2a l       .debug_str	00000000 
00005f38 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
00005f3f l       .debug_str	00000000 
0000980b l       .debug_str	00000000 
00005fa2 l       .debug_str	00000000 
00006013 l       .debug_str	00000000 
0000335c l       .debug_str	00000000 
0000b9b5 l       .debug_str	00000000 
0000601f l       .debug_str	00000000 
0000608c l       .debug_str	00000000 
0000609b l       .debug_str	00000000 
0000609a l       .debug_str	00000000 
000060a8 l       .debug_str	00000000 
0000f4c1 l       .debug_str	00000000 
000060d9 l       .debug_str	00000000 
0000616e l       .debug_str	00000000 
00006178 l       .debug_str	00000000 
0000619b l       .debug_str	00000000 
00006184 l       .debug_str	00000000 
000061a6 l       .debug_str	00000000 
000061ef l       .debug_str	00000000 
000061ff l       .debug_str	00000000 
0000620b l       .debug_str	00000000 
00006250 l       .debug_str	00000000 
0000625c l       .debug_str	00000000 
000062af l       .debug_str	00000000 
000062b9 l       .debug_str	00000000 
000062c0 l       .debug_str	00000000 
000062c5 l       .debug_str	00000000 
000062d4 l       .debug_str	00000000 
0000631c l       .debug_str	00000000 
00006325 l       .debug_str	00000000 
0000636d l       .debug_str	00000000 
0000639c l       .debug_str	00000000 
000063e4 l       .debug_str	00000000 
00006403 l       .debug_str	00000000 
0000644b l       .debug_str	00000000 
00006454 l       .debug_str	00000000 
0000649c l       .debug_str	00000000 
000064a5 l       .debug_str	00000000 
000064ed l       .debug_str	00000000 
00006522 l       .debug_str	00000000 
0000653b l       .debug_str	00000000 
0000d322 l       .debug_str	00000000 
000065a4 l       .debug_str	00000000 
0000660f l       .debug_str	00000000 
00006679 l       .debug_str	00000000 
000066e0 l       .debug_str	00000000 
00006748 l       .debug_str	00000000 
000067b3 l       .debug_str	00000000 
00006823 l       .debug_str	00000000 
0000688b l       .debug_str	00000000 
000068f2 l       .debug_str	00000000 
0000696a l       .debug_str	00000000 
000069e4 l       .debug_str	00000000 
00006a61 l       .debug_str	00000000 
00006ad6 l       .debug_str	00000000 
00006b47 l       .debug_str	00000000 
00006bce l       .debug_str	00000000 
00006c46 l       .debug_str	00000000 
00013947 l       .debug_str	00000000 
00006c82 l       .debug_str	00000000 
00006cc0 l       .debug_str	00000000 
00002ff8 l       .debug_str	00000000 
00006cd4 l       .debug_str	00000000 
00006d13 l       .debug_str	00000000 
00006d28 l       .debug_str	00000000 
00006d68 l       .debug_str	00000000 
00006d7e l       .debug_str	00000000 
00006dbf l       .debug_str	00000000 
00006dd6 l       .debug_str	00000000 
00006e0b l       .debug_str	00000000 
00006e16 l       .debug_str	00000000 
00006ea5 l       .debug_str	00000000 
00006eab l       .debug_str	00000000 
00006f49 l       .debug_str	00000000 
00006f87 l       .debug_str	00000000 
00006f96 l       .debug_str	00000000 
0000820c l       .debug_str	00000000 
00006f9f l       .debug_str	00000000 
000080dc l       .debug_str	00000000 
00002e8d l       .debug_str	00000000 
00007021 l       .debug_str	00000000 
00007058 l       .debug_str	00000000 
00007063 l       .debug_str	00000000 
0000f528 l       .debug_str	00000000 
00007097 l       .debug_str	00000000 
0000f4e2 l       .debug_str	00000000 
000070cb l       .debug_str	00000000 
0000f4cf l       .debug_str	00000000 
00007102 l       .debug_str	00000000 
0000f54e l       .debug_str	00000000 
0000713a l       .debug_str	00000000 
000071c6 l       .debug_str	00000000 
00007243 l       .debug_str	00000000 
000072b2 l       .debug_str	00000000 
00007323 l       .debug_str	00000000 
00007393 l       .debug_str	00000000 
00007421 l       .debug_str	00000000 
00007492 l       .debug_str	00000000 
00007510 l       .debug_str	00000000 
00007580 l       .debug_str	00000000 
000075d9 l       .debug_str	00000000 
000075ee l       .debug_str	00000000 
00007647 l       .debug_str	00000000 
0000765c l       .debug_str	00000000 
000076a8 l       .debug_str	00000000 
000076b1 l       .debug_str	00000000 
00007704 l       .debug_str	00000000 
00007713 l       .debug_str	00000000 
00007740 l       .debug_str	00000000 
00007790 l       .debug_str	00000000 
0000779c l       .debug_str	00000000 
00010412 l       .debug_str	00000000 
000077e7 l       .debug_str	00000000 
00007838 l       .debug_str	00000000 
00007845 l       .debug_str	00000000 
0000e3e3 l       .debug_str	00000000 
0000788d l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
000078e9 l       .debug_str	00000000 
0000796e l       .debug_str	00000000 
00007984 l       .debug_str	00000000 
00007a00 l       .debug_str	00000000 
00007a80 l       .debug_str	00000000 
00007b08 l       .debug_str	00000000 
00007b8d l       .debug_str	00000000 
00015415 l       .debug_str	00000000 
00007bb4 l       .debug_str	00000000 
0001473d l       .debug_str	00000000 
00007c39 l       .debug_str	00000000 
0000b2fd l       .debug_str	00000000 
00007c61 l       .debug_str	00000000 
00007c8f l       .debug_str	00000000 
00007c99 l       .debug_str	00000000 
00007cc1 l       .debug_str	00000000 
00007ced l       .debug_str	00000000 
00007cf5 l       .debug_str	00000000 
00007d25 l       .debug_str	00000000 
00007d30 l       .debug_str	00000000 
00007d66 l       .debug_str	00000000 
00007d77 l       .debug_str	00000000 
00014362 l       .debug_str	00000000 
00007dac l       .debug_str	00000000 
00010b86 l       .debug_str	00000000 
00003130 l       .debug_str	00000000 
00007de6 l       .debug_str	00000000 
00013d19 l       .debug_str	00000000 
00007e19 l       .debug_str	00000000 
0001819e l       .debug_str	00000000 
00007e50 l       .debug_str	00000000 
000134c3 l       .debug_str	00000000 
00007e94 l       .debug_str	00000000 
00007ee0 l       .debug_str	00000000 
00007ef7 l       .debug_str	00000000 
00007f3d l       .debug_str	00000000 
00001025 l       .debug_str	00000000 
00007f4e l       .debug_str	00000000 
00010971 l       .debug_str	00000000 
00007f90 l       .debug_str	00000000 
00007fd4 l       .debug_str	00000000 
00007fe3 l       .debug_str	00000000 
00008026 l       .debug_str	00000000 
00000f50 l       .debug_str	00000000 
00008034 l       .debug_str	00000000 
00008092 l       .debug_str	00000000 
00008098 l       .debug_str	00000000 
000080c4 l       .debug_str	00000000 
000080ca l       .debug_str	00000000 
000080d0 l       .debug_str	00000000 
00000846 l       .debug_str	00000000 
000080da l       .debug_str	00000000 
00017d80 l       .debug_str	00000000 
00014d81 l       .debug_str	00000000 
000080e2 l       .debug_str	00000000 
0000fd20 l       .debug_str	00000000 
00012bce l       .debug_str	00000000 
00017d7f l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00002b6c l       .debug_str	00000000 
000080e1 l       .debug_str	00000000 
00006e10 l       .debug_str	00000000 
000080ef l       .debug_str	00000000 
00008183 l       .debug_str	00000000 
000081b2 l       .debug_str	00000000 
000081ef l       .debug_str	00000000 
00003a64 l       .debug_str	00000000 
0000821d l       .debug_str	00000000 
00008225 l       .debug_str	00000000 
0000822e l       .debug_str	00000000 
00008236 l       .debug_str	00000000 
0000823f l       .debug_str	00000000 
00008269 l       .debug_str	00000000 
00008274 l       .debug_str	00000000 
0000a3d2 l       .debug_str	00000000 
000082a1 l       .debug_str	00000000 
0000bd41 l       .debug_str	00000000 
000082ab l       .debug_str	00000000 
00011fae l       .debug_str	00000000 
000082bc l       .debug_str	00000000 
000082dd l       .debug_str	00000000 
000082e2 l       .debug_str	00000000 
000082e7 l       .debug_str	00000000 
000082ec l       .debug_str	00000000 
000082f1 l       .debug_str	00000000 
000082f6 l       .debug_str	00000000 
00008301 l       .debug_str	00000000 
0000830c l       .debug_str	00000000 
0001249e l       .debug_str	00000000 
00000205 l       .debug_str	00000000 
00012be4 l       .debug_str	00000000 
00010cea l       .debug_str	00000000 
00008311 l       .debug_str	00000000 
00000d0d l       .debug_loc	00000000 
00000d20 l       .debug_loc	00000000 
00000d3e l       .debug_loc	00000000 
00000d5c l       .debug_loc	00000000 
00000d6f l       .debug_loc	00000000 
00000d82 l       .debug_loc	00000000 
00000da0 l       .debug_loc	00000000 
00000dbe l       .debug_loc	00000000 
00000dd1 l       .debug_loc	00000000 
00000de4 l       .debug_loc	00000000 
00000df7 l       .debug_loc	00000000 
00000e0a l       .debug_loc	00000000 
00000e1d l       .debug_loc	00000000 
00000e30 l       .debug_loc	00000000 
00000e4e l       .debug_loc	00000000 
00000e6c l       .debug_loc	00000000 
00000e7f l       .debug_loc	00000000 
00000e92 l       .debug_loc	00000000 
00000ea5 l       .debug_loc	00000000 
00000ec3 l       .debug_loc	00000000 
00000ee1 l       .debug_loc	00000000 
00000ef4 l       .debug_loc	00000000 
00000f07 l       .debug_loc	00000000 
00000f25 l       .debug_loc	00000000 
00000f43 l       .debug_loc	00000000 
00000f56 l       .debug_loc	00000000 
00000f69 l       .debug_loc	00000000 
00000f87 l       .debug_loc	00000000 
00000fa5 l       .debug_loc	00000000 
00000fc3 l       .debug_loc	00000000 
00000fd6 l       .debug_loc	00000000 
00000fe9 l       .debug_loc	00000000 
00001007 l       .debug_loc	00000000 
00001033 l       .debug_loc	00000000 
00001053 l       .debug_loc	00000000 
00001073 l       .debug_loc	00000000 
00001095 l       .debug_loc	00000000 
000010bb l       .debug_loc	00000000 
000010f5 l       .debug_loc	00000000 
0000111e l       .debug_loc	00000000 
00001147 l       .debug_loc	00000000 
00001170 l       .debug_loc	00000000 
0000118e l       .debug_loc	00000000 
000011b6 l       .debug_loc	00000000 
00001217 l       .debug_loc	00000000 
0000122a l       .debug_loc	00000000 
00001241 l       .debug_loc	00000000 
00001255 l       .debug_loc	00000000 
00001294 l       .debug_loc	00000000 
000012b2 l       .debug_loc	00000000 
000012e6 l       .debug_loc	00000000 
00001304 l       .debug_loc	00000000 
00001322 l       .debug_loc	00000000 
0000134a l       .debug_loc	00000000 
00001371 l       .debug_loc	00000000 
0000139d l       .debug_loc	00000000 
000013b0 l       .debug_loc	00000000 
000013c3 l       .debug_loc	00000000 
000013e1 l       .debug_loc	00000000 
000013ff l       .debug_loc	00000000 
00001412 l       .debug_loc	00000000 
00001438 l       .debug_loc	00000000 
00001472 l       .debug_loc	00000000 
0000149b l       .debug_loc	00000000 
000014c1 l       .debug_loc	00000000 
000014fb l       .debug_loc	00000000 
00001524 l       .debug_loc	00000000 
0000154a l       .debug_loc	00000000 
00001584 l       .debug_loc	00000000 
000015ad l       .debug_loc	00000000 
000015c0 l       .debug_loc	00000000 
000015d3 l       .debug_loc	00000000 
000015e6 l       .debug_loc	00000000 
000015f9 l       .debug_loc	00000000 
00001622 l       .debug_loc	00000000 
0000164b l       .debug_loc	00000000 
0000167f l       .debug_loc	00000000 
000016b4 l       .debug_loc	00000000 
000016d9 l       .debug_loc	00000000 
000016f7 l       .debug_loc	00000000 
0000170a l       .debug_loc	00000000 
0000171d l       .debug_loc	00000000 
00001730 l       .debug_loc	00000000 
00001756 l       .debug_loc	00000000 
00001790 l       .debug_loc	00000000 
000017b9 l       .debug_loc	00000000 
000017d1 l       .debug_loc	00000000 
000017e4 l       .debug_loc	00000000 
000017f7 l       .debug_loc	00000000 
00001820 l       .debug_loc	00000000 
0000183e l       .debug_loc	00000000 
00001867 l       .debug_loc	00000000 
00001890 l       .debug_loc	00000000 
000018a4 l       .debug_loc	00000000 
000018c2 l       .debug_loc	00000000 
000018eb l       .debug_loc	00000000 
00001909 l       .debug_loc	00000000 
00001927 l       .debug_loc	00000000 
00001959 l       .debug_loc	00000000 
00001977 l       .debug_loc	00000000 
00001995 l       .debug_loc	00000000 
000019b3 l       .debug_loc	00000000 
000019d1 l       .debug_loc	00000000 
00001a03 l       .debug_loc	00000000 
00001a21 l       .debug_loc	00000000 
00001a3f l       .debug_loc	00000000 
00001a5d l       .debug_loc	00000000 
00001a7b l       .debug_loc	00000000 
00001aad l       .debug_loc	00000000 
00001acb l       .debug_loc	00000000 
00001af0 l       .debug_loc	00000000 
00001b15 l       .debug_loc	00000000 
00001b3a l       .debug_loc	00000000 
00001b4d l       .debug_loc	00000000 
00001b60 l       .debug_loc	00000000 
00001b78 l       .debug_loc	00000000 
00001b90 l       .debug_loc	00000000 
00001ba8 l       .debug_loc	00000000 
00001bbb l       .debug_loc	00000000 
00001bce l       .debug_loc	00000000 
00001be1 l       .debug_loc	00000000 
00001bf4 l       .debug_loc	00000000 
00001c07 l       .debug_loc	00000000 
00001c1a l       .debug_loc	00000000 
00001c38 l       .debug_loc	00000000 
00001c56 l       .debug_loc	00000000 
00001c74 l       .debug_loc	00000000 
00001c99 l       .debug_loc	00000000 
00001cbe l       .debug_loc	00000000 
00001ce3 l       .debug_loc	00000000 
00001cf6 l       .debug_loc	00000000 
00001d09 l       .debug_loc	00000000 
00001d21 l       .debug_loc	00000000 
00001d39 l       .debug_loc	00000000 
00001d51 l       .debug_loc	00000000 
00001d64 l       .debug_loc	00000000 
00001d77 l       .debug_loc	00000000 
00001d8a l       .debug_loc	00000000 
00001d9d l       .debug_loc	00000000 
00001db0 l       .debug_loc	00000000 
00001dce l       .debug_loc	00000000 
00001df3 l       .debug_loc	00000000 
00001e18 l       .debug_loc	00000000 
00001e3d l       .debug_loc	00000000 
00001e50 l       .debug_loc	00000000 
00001e63 l       .debug_loc	00000000 
00001e7b l       .debug_loc	00000000 
00001e93 l       .debug_loc	00000000 
00001eab l       .debug_loc	00000000 
00001ebe l       .debug_loc	00000000 
00001ed1 l       .debug_loc	00000000 
00001ee4 l       .debug_loc	00000000 
00001ef7 l       .debug_loc	00000000 
00001f0a l       .debug_loc	00000000 
00001f28 l       .debug_loc	00000000 
00001f46 l       .debug_loc	00000000 
00001f6f l       .debug_loc	00000000 
00001f82 l       .debug_loc	00000000 
00001fab l       .debug_loc	00000000 
00001fd4 l       .debug_loc	00000000 
00001ffd l       .debug_loc	00000000 
00002010 l       .debug_loc	00000000 
00002044 l       .debug_loc	00000000 
00002083 l       .debug_loc	00000000 
000020ac l       .debug_loc	00000000 
000020ca l       .debug_loc	00000000 
000020e8 l       .debug_loc	00000000 
00002106 l       .debug_loc	00000000 
0000213e l       .debug_loc	00000000 
00002164 l       .debug_loc	00000000 
0000218d l       .debug_loc	00000000 
000021b2 l       .debug_loc	00000000 
000021d7 l       .debug_loc	00000000 
000021fc l       .debug_loc	00000000 
0000220f l       .debug_loc	00000000 
00002222 l       .debug_loc	00000000 
0000223a l       .debug_loc	00000000 
00002262 l       .debug_loc	00000000 
0000228a l       .debug_loc	00000000 
0000229d l       .debug_loc	00000000 
000022b0 l       .debug_loc	00000000 
000022c3 l       .debug_loc	00000000 
000022d6 l       .debug_loc	00000000 
000022e9 l       .debug_loc	00000000 
0000230e l       .debug_loc	00000000 
00002333 l       .debug_loc	00000000 
00002358 l       .debug_loc	00000000 
0000236b l       .debug_loc	00000000 
0000237e l       .debug_loc	00000000 
00002396 l       .debug_loc	00000000 
000023be l       .debug_loc	00000000 
000023e6 l       .debug_loc	00000000 
000023f9 l       .debug_loc	00000000 
0000240c l       .debug_loc	00000000 
0000241f l       .debug_loc	00000000 
00002432 l       .debug_loc	00000000 
00002445 l       .debug_loc	00000000 
00002458 l       .debug_loc	00000000 
00002481 l       .debug_loc	00000000 
000024b9 l       .debug_loc	00000000 
000024e1 l       .debug_loc	00000000 
000024ff l       .debug_loc	00000000 
0000251d l       .debug_loc	00000000 
00002545 l       .debug_loc	00000000 
0000256d l       .debug_loc	00000000 
00002595 l       .debug_loc	00000000 
000025cd l       .debug_loc	00000000 
000025eb l       .debug_loc	00000000 
000025fe l       .debug_loc	00000000 
00002611 l       .debug_loc	00000000 
00002624 l       .debug_loc	00000000 
00002637 l       .debug_loc	00000000 
0000264a l       .debug_loc	00000000 
00002668 l       .debug_loc	00000000 
000026a0 l       .debug_loc	00000000 
000026c8 l       .debug_loc	00000000 
000026e6 l       .debug_loc	00000000 
00002704 l       .debug_loc	00000000 
0000272c l       .debug_loc	00000000 
00002754 l       .debug_loc	00000000 
0000277c l       .debug_loc	00000000 
000027a8 l       .debug_loc	00000000 
000027bf l       .debug_loc	00000000 
000027dd l       .debug_loc	00000000 
000027f0 l       .debug_loc	00000000 
00002803 l       .debug_loc	00000000 
00002816 l       .debug_loc	00000000 
00002829 l       .debug_loc	00000000 
0000283c l       .debug_loc	00000000 
0000284f l       .debug_loc	00000000 
00002867 l       .debug_loc	00000000 
0000287f l       .debug_loc	00000000 
00002897 l       .debug_loc	00000000 
000028af l       .debug_loc	00000000 
000028c2 l       .debug_loc	00000000 
000028d5 l       .debug_loc	00000000 
000028e8 l       .debug_loc	00000000 
000028fb l       .debug_loc	00000000 
00002933 l       .debug_loc	00000000 
0000296b l       .debug_loc	00000000 
00002993 l       .debug_loc	00000000 
000029bb l       .debug_loc	00000000 
000029e3 l       .debug_loc	00000000 
00002a0b l       .debug_loc	00000000 
00002a33 l       .debug_loc	00000000 
00002a6b l       .debug_loc	00000000 
00002aa3 l       .debug_loc	00000000 
00002adb l       .debug_loc	00000000 
00002b13 l       .debug_loc	00000000 
00002b4b l       .debug_loc	00000000 
00002b83 l       .debug_loc	00000000 
00002ba1 l       .debug_loc	00000000 
00002bca l       .debug_loc	00000000 
00002bf3 l       .debug_loc	00000000 
00002c1c l       .debug_loc	00000000 
00002c45 l       .debug_loc	00000000 
00002c6e l       .debug_loc	00000000 
00002c97 l       .debug_loc	00000000 
00002cd1 l       .debug_loc	00000000 
00002d0b l       .debug_loc	00000000 
00002d45 l       .debug_loc	00000000 
00002d58 l       .debug_loc	00000000 
00002d90 l       .debug_loc	00000000 
00002dc8 l       .debug_loc	00000000 
00002df0 l       .debug_loc	00000000 
00002e18 l       .debug_loc	00000000 
00002e40 l       .debug_loc	00000000 
00002e68 l       .debug_loc	00000000 
00002e90 l       .debug_loc	00000000 
00002ec8 l       .debug_loc	00000000 
00002f00 l       .debug_loc	00000000 
00002f38 l       .debug_loc	00000000 
00002f70 l       .debug_loc	00000000 
00002fa8 l       .debug_loc	00000000 
00002fe0 l       .debug_loc	00000000 
00003018 l       .debug_loc	00000000 
00003050 l       .debug_loc	00000000 
00003088 l       .debug_loc	00000000 
000030a0 l       .debug_loc	00000000 
000030b8 l       .debug_loc	00000000 
000030d0 l       .debug_loc	00000000 
000030f9 l       .debug_loc	00000000 
00003122 l       .debug_loc	00000000 
0000314b l       .debug_loc	00000000 
00003196 l       .debug_loc	00000000 
000031e1 l       .debug_loc	00000000 
0000322c l       .debug_loc	00000000 
0000323f l       .debug_loc	00000000 
00003252 l       .debug_loc	00000000 
00003278 l       .debug_loc	00000000 
000032b2 l       .debug_loc	00000000 
000032db l       .debug_loc	00000000 
000032ee l       .debug_loc	00000000 
00003314 l       .debug_loc	00000000 
0000334e l       .debug_loc	00000000 
00003377 l       .debug_loc	00000000 
0000338f l       .debug_loc	00000000 
000033a7 l       .debug_loc	00000000 
000033bf l       .debug_loc	00000000 
000033dd l       .debug_loc	00000000 
00003402 l       .debug_loc	00000000 
0000341a l       .debug_loc	00000000 
00003432 l       .debug_loc	00000000 
00003445 l       .debug_loc	00000000 
00003458 l       .debug_loc	00000000 
0000347e l       .debug_loc	00000000 
000034b8 l       .debug_loc	00000000 
000034e1 l       .debug_loc	00000000 
000034f4 l       .debug_loc	00000000 
00003507 l       .debug_loc	00000000 
00003546 l       .debug_loc	00000000 
00003564 l       .debug_loc	00000000 
00003577 l       .debug_loc	00000000 
0000358a l       .debug_loc	00000000 
0000359d l       .debug_loc	00000000 
000035b0 l       .debug_loc	00000000 
000035c3 l       .debug_loc	00000000 
000035fa l       .debug_loc	00000000 
00003621 l       .debug_loc	00000000 
00003634 l       .debug_loc	00000000 
00003647 l       .debug_loc	00000000 
0000366d l       .debug_loc	00000000 
000036a7 l       .debug_loc	00000000 
000036d0 l       .debug_loc	00000000 
000036e3 l       .debug_loc	00000000 
0000370c l       .debug_loc	00000000 
00003743 l       .debug_loc	00000000 
0000376a l       .debug_loc	00000000 
0000377d l       .debug_loc	00000000 
00003790 l       .debug_loc	00000000 
000037b6 l       .debug_loc	00000000 
000037f0 l       .debug_loc	00000000 
00003819 l       .debug_loc	00000000 
00003842 l       .debug_loc	00000000 
00003879 l       .debug_loc	00000000 
000038a0 l       .debug_loc	00000000 
000038b3 l       .debug_loc	00000000 
000038c6 l       .debug_loc	00000000 
000038ec l       .debug_loc	00000000 
00003926 l       .debug_loc	00000000 
0000394f l       .debug_loc	00000000 
0000396d l       .debug_loc	00000000 
000039a4 l       .debug_loc	00000000 
000039cb l       .debug_loc	00000000 
000039de l       .debug_loc	00000000 
000039f1 l       .debug_loc	00000000 
00003a17 l       .debug_loc	00000000 
00003a51 l       .debug_loc	00000000 
00003a7a l       .debug_loc	00000000 
00003a92 l       .debug_loc	00000000 
00003aaa l       .debug_loc	00000000 
00003abd l       .debug_loc	00000000 
00003ad0 l       .debug_loc	00000000 
00003af6 l       .debug_loc	00000000 
00003b30 l       .debug_loc	00000000 
00003b59 l       .debug_loc	00000000 
00003b6c l       .debug_loc	00000000 
00003b8a l       .debug_loc	00000000 
00003ba8 l       .debug_loc	00000000 
00003bc6 l       .debug_loc	00000000 
00003be4 l       .debug_loc	00000000 
00003c02 l       .debug_loc	00000000 
00003c20 l       .debug_loc	00000000 
00003c48 l       .debug_loc	00000000 
00003c66 l       .debug_loc	00000000 
00003c9b l       .debug_loc	00000000 
00003cc0 l       .debug_loc	00000000 
00003cd3 l       .debug_loc	00000000 
00003ce6 l       .debug_loc	00000000 
00003cf9 l       .debug_loc	00000000 
00003d0c l       .debug_loc	00000000 
00003d32 l       .debug_loc	00000000 
00003d6c l       .debug_loc	00000000 
00003d95 l       .debug_loc	00000000 
00003da8 l       .debug_loc	00000000 
00003dbb l       .debug_loc	00000000 
00003dce l       .debug_loc	00000000 
00003de1 l       .debug_loc	00000000 
00003df4 l       .debug_loc	00000000 
00003e07 l       .debug_loc	00000000 
00003e25 l       .debug_loc	00000000 
00003e38 l       .debug_loc	00000000 
00003e6d l       .debug_loc	00000000 
00003e92 l       .debug_loc	00000000 
00003ea5 l       .debug_loc	00000000 
00003eb8 l       .debug_loc	00000000 
00003ecb l       .debug_loc	00000000 
00003ef1 l       .debug_loc	00000000 
00003f2b l       .debug_loc	00000000 
00003f54 l       .debug_loc	00000000 
00003f72 l       .debug_loc	00000000 
00003f90 l       .debug_loc	00000000 
00003fae l       .debug_loc	00000000 
00003fe3 l       .debug_loc	00000000 
00004008 l       .debug_loc	00000000 
0000401b l       .debug_loc	00000000 
0000402e l       .debug_loc	00000000 
08001b98 l     F .text	00000058 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1e150a86bad7eaceE
08001bf0 l     F .text	00000058 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h50bf92a7c561a912E
08001c48 l     F .text	00000048 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93b1ac6bb7dc1d44E
08001c90 l     F .text	00000068 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93bb0409688bd347E
08001cf8 l     F .text	00000058 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17had1dca1d29cad1bdE
08001d50 l     F .text	0000005a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he878d9596b11562bE
08001daa l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17hb1022bd6f8649e59E
20000018 l     O .data	00000050 _ZN6mynewt2hw6sensor16SENSOR_LISTENERS17h3c8c0b2bfc384623E
20000068 l     O .data	00000018 _ZN6mynewt2hw6sensor17LISTENER_INTERNAL17h60706dd8781b8b6dE
0800201a l     F .text	0000030c _ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE
08002326 l     F .text	00000004 _ZN6mynewt2hw6sensor21null_sensor_data_func17h91935ae756f7e7bbE
0800232a l     F .text	00000004 _ZN6mynewt2hw6sensor22null_sensor_value_func17h905c06386558011eE
00000000 l    df *ABS*	00000000 core.4aq1nyye-cgu.0
08002dee l       .text	00000000 
08002dee l       .text	00000000 
08002df0 l       .text	00000000 
08002df0 l       .text	00000000 
08002df0 l       .text	00000000 
08002df2 l       .text	00000000 
08002df2 l       .text	00000000 
08002df2 l       .text	00000000 
08002df4 l       .text	00000000 
08002df4 l       .text	00000000 
08002df4 l       .text	00000000 
08002e0a l       .text	00000000 
08002e58 l       .text	00000000 
08002e58 l       .text	00000000 
08002e58 l       .text	00000000 
08002e6a l       .text	00000000 
08002e6a l       .text	00000000 
08002e6a l       .text	00000000 
08002e6e l       .text	00000000 
08002e6e l       .text	00000000 
08002e6e l       .text	00000000 
08002e76 l       .text	00000000 
08002e76 l       .text	00000000 
08002e76 l       .text	00000000 
08002e7a l       .text	00000000 
08002e7a l       .text	00000000 
08002e7a l       .text	00000000 
08002e8e l       .text	00000000 
08002ec0 l       .text	00000000 
08002ec0 l       .text	00000000 
08002ec0 l       .text	00000000 
08002ee0 l       .text	00000000 
08002f08 l       .text	00000000 
08002f08 l       .text	00000000 
08002f08 l       .text	00000000 
08002f14 l       .text	00000000 
08002f44 l       .text	00000000 
08002f44 l       .text	00000000 
08002f44 l       .text	00000000 
08002f5c l       .text	00000000 
08002f8a l       .text	00000000 
08002f8a l       .text	00000000 
08002f8a l       .text	00000000 
08002f90 l       .text	00000000 
08002fa0 l       .text	00000000 
08002fa8 l       .text	00000000 
08002fb6 l       .text	00000000 
08002fb8 l       .text	00000000 
08002fc0 l       .text	00000000 
08002fd2 l       .text	00000000 
08002fe4 l       .text	00000000 
08002ff6 l       .text	00000000 
0800301c l       .text	00000000 
0800302c l       .text	00000000 
0800303c l       .text	00000000 
08003074 l       .text	00000000 
08003078 l       .text	00000000 
0800307c l       .text	00000000 
08003080 l       .text	00000000 
08003086 l       .text	00000000 
0800308a l       .text	00000000 
0800308e l       .text	00000000 
08003094 l       .text	00000000 
080030a0 l       .text	00000000 
080030a4 l       .text	00000000 
080030a8 l       .text	00000000 
080030ac l       .text	00000000 
080030b0 l       .text	00000000 
080030b2 l       .text	00000000 
080030ba l       .text	00000000 
080030cc l       .text	00000000 
080030de l       .text	00000000 
080030f0 l       .text	00000000 
08003100 l       .text	00000000 
0800310e l       .text	00000000 
08003112 l       .text	00000000 
08003116 l       .text	00000000 
0800311c l       .text	00000000 
08003124 l       .text	00000000 
0800312e l       .text	00000000 
08003130 l       .text	00000000 
08003142 l       .text	00000000 
08003154 l       .text	00000000 
08003154 l       .text	00000000 
08003154 l       .text	00000000 
08003154 l       .text	00000000 
08003172 l       .text	00000000 
080031a0 l       .text	00000000 
080031a0 l       .text	00000000 
080031a0 l       .text	00000000 
080031be l       .text	00000000 
080031ec l       .text	00000000 
080031ec l       .text	00000000 
080031ec l       .text	00000000 
080031f8 l       .text	00000000 
08003200 l       .text	00000000 
08003206 l       .text	00000000 
08003222 l       .text	00000000 
0800322a l       .text	00000000 
08003238 l       .text	00000000 
0800324c l       .text	00000000 
08003250 l       .text	00000000 
08003278 l       .text	00000000 
08003282 l       .text	00000000 
08003296 l       .text	00000000 
0800329c l       .text	00000000 
080032b4 l       .text	00000000 
080032bc l       .text	00000000 
080032c6 l       .text	00000000 
080032c8 l       .text	00000000 
080032cc l       .text	00000000 
080032e4 l       .text	00000000 
080032e8 l       .text	00000000 
080032f4 l       .text	00000000 
08003302 l       .text	00000000 
08003306 l       .text	00000000 
08003314 l       .text	00000000 
08003318 l       .text	00000000 
0800332c l       .text	00000000 
08003340 l       .text	00000000 
08003344 l       .text	00000000 
0800334c l       .text	00000000 
0800335c l       .text	00000000 
0800336e l       .text	00000000 
08003380 l       .text	00000000 
0800338c l       .text	00000000 
08003390 l       .text	00000000 
08003398 l       .text	00000000 
080033f8 l       .text	00000000 
08003452 l       .text	00000000 
0800349a l       .text	00000000 
080034b8 l       .text	00000000 
080034b8 l       .text	00000000 
080034b8 l       .text	00000000 
0800350c l       .text	00000000 
0800351a l       .text	00000000 
08003530 l       .text	00000000 
0800356a l       .text	00000000 
08003570 l       .text	00000000 
08003578 l       .text	00000000 
0800359a l       .text	00000000 
080035a0 l       .text	00000000 
080035b0 l       .text	00000000 
080035b8 l       .text	00000000 
080035c0 l       .text	00000000 
080035c8 l       .text	00000000 
080035d0 l       .text	00000000 
080035da l       .text	00000000 
080035e2 l       .text	00000000 
080035f2 l       .text	00000000 
080035f8 l       .text	00000000 
0800362a l       .text	00000000 
0800363c l       .text	00000000 
08003654 l       .text	00000000 
0800366c l       .text	00000000 
0800366c l       .text	00000000 
0800366c l       .text	00000000 
0800366c l       .text	00000000 
08003680 l       .text	00000000 
08003686 l       .text	00000000 
08003688 l       .text	00000000 
0800368a l       .text	00000000 
080036a0 l       .text	00000000 
080036b6 l       .text	00000000 
080036bc l       .text	00000000 
080036d4 l       .text	00000000 
08003718 l       .text	00000000 
0800373c l       .text	00000000 
0800376c l       .text	00000000 
0800376c l       .text	00000000 
0800376c l       .text	00000000 
0800377e l       .text	00000000 
08003786 l       .text	00000000 
08003790 l       .text	00000000 
08003794 l       .text	00000000 
0800379c l       .text	00000000 
080037b4 l       .text	00000000 
080037da l       .text	00000000 
080037da l       .text	00000000 
080037da l       .text	00000000 
080037e4 l       .text	00000000 
0800388e l       .text	00000000 
0800388e l       .text	00000000 
0800388e l       .text	00000000 
080038c6 l       .text	00000000 
080038c6 l       .text	00000000 
080038c6 l       .text	00000000 
080038d0 l       .text	00000000 
080038d0 l       .text	00000000 
080038d0 l       .text	00000000 
080038da l       .text	00000000 
080038da l       .text	00000000 
080038da l       .text	00000000 
080038e2 l       .text	00000000 
08003914 l       .text	00000000 
08003914 l       .text	00000000 
08003914 l       .text	00000000 
08003916 l       .text	00000000 
08003922 l       .text	00000000 
08003922 l       .text	00000000 
08003922 l       .text	00000000 
08003956 l       .text	00000000 
08003956 l       .text	00000000 
08003956 l       .text	00000000 
08003986 l       .text	00000000 
080039a6 l       .text	00000000 
080039b2 l       .text	00000000 
080039b6 l       .text	00000000 
080039de l       .text	00000000 
080039f2 l       .text	00000000 
08003a04 l       .text	00000000 
08003a0c l       .text	00000000 
08003a24 l       .text	00000000 
08003a28 l       .text	00000000 
08003a2a l       .text	00000000 
08003a2c l       .text	00000000 
08003a3c l       .text	00000000 
08003a4e l       .text	00000000 
08003a56 l       .text	00000000 
08003a6e l       .text	00000000 
08003a72 l       .text	00000000 
08003a74 l       .text	00000000 
08003a76 l       .text	00000000 
08003aa2 l       .text	00000000 
08003aaa l       .text	00000000 
08003abc l       .text	00000000 
08003abe l       .text	00000000 
08003ac2 l       .text	00000000 
08003ae2 l       .text	00000000 
08003aee l       .text	00000000 
08003af2 l       .text	00000000 
08003b02 l       .text	00000000 
08003b0e l       .text	00000000 
08003b1a l       .text	00000000 
08003b1e l       .text	00000000 
08003b74 l       .text	00000000 
08003ba4 l       .text	00000000 
08003bbc l       .text	00000000 
08003bbc l       .text	00000000 
08003bbc l       .text	00000000 
08003bbc l       .text	00000000 
08003be0 l       .text	00000000 
08003bf4 l       .text	00000000 
08003bf8 l       .text	00000000 
08003bfc l       .text	00000000 
08003c00 l       .text	00000000 
08003c02 l       .text	00000000 
08003c06 l       .text	00000000 
08003c14 l       .text	00000000 
08003c20 l       .text	00000000 
08003c28 l       .text	00000000 
08003c30 l       .text	00000000 
08003c34 l       .text	00000000 
08003c3a l       .text	00000000 
08003c40 l       .text	00000000 
08003c56 l       .text	00000000 
08003c5a l       .text	00000000 
08003c64 l       .text	00000000 
08003c6a l       .text	00000000 
08003c7a l       .text	00000000 
08003cda l       .text	00000000 
08003ce4 l       .text	00000000 
08003cea l       .text	00000000 
08003cfa l       .text	00000000 
08003d12 l       .text	00000000 
08003d30 l       .text	00000000 
08003d5e l       .text	00000000 
08003d72 l       .text	00000000 
08003d8a l       .text	00000000 
08003da8 l       .text	00000000 
08003dc6 l       .text	00000000 
08003dde l       .text	00000000 
08003dde l       .text	00000000 
08003dde l       .text	00000000 
08003e24 l       .text	00000000 
08003e24 l       .text	00000000 
08003e24 l       .text	00000000 
08003e3e l       .text	00000000 
08003e50 l       .text	00000000 
08003e54 l       .text	00000000 
08003e5c l       .text	00000000 
08003e70 l       .text	00000000 
08003e76 l       .text	00000000 
08003e7a l       .text	00000000 
08003e86 l       .text	00000000 
08003e8a l       .text	00000000 
08003e8e l       .text	00000000 
08003ea0 l       .text	00000000 
08003ea4 l       .text	00000000 
08003ea8 l       .text	00000000 
08003ece l       .text	00000000 
08003ed8 l       .text	00000000 
08003edc l       .text	00000000 
08003ee0 l       .text	00000000 
08003eea l       .text	00000000 
08003efe l       .text	00000000 
08003f06 l       .text	00000000 
08003f10 l       .text	00000000 
08003f14 l       .text	00000000 
08003f18 l       .text	00000000 
08003f22 l       .text	00000000 
08003f28 l       .text	00000000 
08003f3c l       .text	00000000 
08003f40 l       .text	00000000 
08003f4c l       .text	00000000 
08003f62 l       .text	00000000 
08003f66 l       .text	00000000 
08003f74 l       .text	00000000 
08003f80 l       .text	00000000 
08003f88 l       .text	00000000 
08003f96 l       .text	00000000 
08003faa l       .text	00000000 
08003fb0 l       .text	00000000 
08003fdc l       .text	00000000 
08003fde l       .text	00000000 
08003fec l       .text	00000000 
08003ff4 l       .text	00000000 
0800401a l       .text	00000000 
08004038 l       .text	00000000 
08004054 l       .text	00000000 
0800406c l       .text	00000000 
0800406e l       .text	00000000 
08004072 l       .text	00000000 
08004072 l       .text	00000000 
08004072 l       .text	00000000 
08004072 l       .text	00000000 
0800407c l       .text	00000000 
0800407c l       .text	00000000 
0800407c l       .text	00000000 
08004088 l       .text	00000000 
08004088 l       .text	00000000 
08004088 l       .text	00000000 
08004098 l       .text	00000000 
080040ac l       .text	00000000 
080040c4 l       .text	00000000 
080040c4 l       .text	00000000 
080040c4 l       .text	00000000 
080040d4 l       .text	00000000 
080040d4 l       .text	00000000 
080040d4 l       .text	00000000 
080040f2 l       .text	00000000 
08004110 l       .text	00000000 
08004140 l       .text	00000000 
08004156 l       .text	00000000 
08004184 l       .text	00000000 
08004190 l       .text	00000000 
080041a0 l       .text	00000000 
080041ac l       .text	00000000 
080041cc l       .text	00000000 
080041d6 l       .text	00000000 
080041e6 l       .text	00000000 
080041fc l       .text	00000000 
0800424c l       .text	00000000 
0800427c l       .text	00000000 
080042b0 l       .text	00000000 
080043a2 l       .text	00000000 
080043a6 l       .text	00000000 
080043a6 l       .text	00000000 
080043a6 l       .text	00000000 
080044ac l       .text	00000000 
080044ac l       .text	00000000 
080044ac l       .text	00000000 
080044b2 l       .text	00000000 
080044b4 l       .text	00000000 
080044d2 l       .text	00000000 
080044d6 l       .text	00000000 
080044de l       .text	00000000 
080044e6 l       .text	00000000 
080044ea l       .text	00000000 
080044ec l       .text	00000000 
080044ee l       .text	00000000 
080044f2 l       .text	00000000 
0800450a l       .text	00000000 
0800450e l       .text	00000000 
0800451e l       .text	00000000 
08004522 l       .text	00000000 
0800452c l       .text	00000000 
0800453a l       .text	00000000 
0800453e l       .text	00000000 
08004544 l       .text	00000000 
08004548 l       .text	00000000 
0800454c l       .text	00000000 
0800454e l       .text	00000000 
0800456c l       .text	00000000 
08004584 l       .text	00000000 
080045ac l       .text	00000000 
080045ac l       .text	00000000 
080045ac l       .text	00000000 
080045ac l       .text	00000000 
080045b2 l       .text	00000000 
080045bc l       .text	00000000 
080045c4 l       .text	00000000 
080045d0 l       .text	00000000 
080045d6 l       .text	00000000 
080045d8 l       .text	00000000 
080045dc l       .text	00000000 
080045ea l       .text	00000000 
080045ee l       .text	00000000 
080045f4 l       .text	00000000 
080045f6 l       .text	00000000 
080045fe l       .text	00000000 
08004600 l       .text	00000000 
08004604 l       .text	00000000 
08004612 l       .text	00000000 
08004616 l       .text	00000000 
0800461c l       .text	00000000 
0800461e l       .text	00000000 
08004668 l       .text	00000000 
08004668 l       .text	00000000 
08004668 l       .text	00000000 
08004676 l       .text	00000000 
08004678 l       .text	00000000 
0800467c l       .text	00000000 
0800468a l       .text	00000000 
0800468e l       .text	00000000 
08004694 l       .text	00000000 
08004696 l       .text	00000000 
0800469a l       .text	00000000 
080046a6 l       .text	00000000 
080046aa l       .text	00000000 
080046c8 l       .text	00000000 
080046d2 l       .text	00000000 
080046e2 l       .text	00000000 
080046e2 l       .text	00000000 
080046e2 l       .text	00000000 
080046e2 l       .text	00000000 
080046f0 l       .text	00000000 
080046f2 l       .text	00000000 
080046f6 l       .text	00000000 
08004704 l       .text	00000000 
08004708 l       .text	00000000 
0800470e l       .text	00000000 
08004710 l       .text	00000000 
08004714 l       .text	00000000 
08004720 l       .text	00000000 
08004724 l       .text	00000000 
08004742 l       .text	00000000 
0800474c l       .text	00000000 
0800475c l       .text	00000000 
0800475c l       .text	00000000 
0800475c l       .text	00000000 
0800475c l       .text	00000000 
08004768 l       .text	00000000 
0800476a l       .text	00000000 
0800476e l       .text	00000000 
0800477c l       .text	00000000 
08004780 l       .text	00000000 
08004786 l       .text	00000000 
08004788 l       .text	00000000 
0800478a l       .text	00000000 
08004796 l       .text	00000000 
0800479a l       .text	00000000 
080047b8 l       .text	00000000 
080047c2 l       .text	00000000 
080047d2 l       .text	00000000 
080047d2 l       .text	00000000 
080047d2 l       .text	00000000 
080047d2 l       .text	00000000 
080047de l       .text	00000000 
080047e0 l       .text	00000000 
080047e4 l       .text	00000000 
080047f2 l       .text	00000000 
080047f6 l       .text	00000000 
080047fc l       .text	00000000 
080047fe l       .text	00000000 
08004800 l       .text	00000000 
0800480c l       .text	00000000 
08004810 l       .text	00000000 
0800482e l       .text	00000000 
08004838 l       .text	00000000 
08004848 l       .text	00000000 
08004848 l       .text	00000000 
08004848 l       .text	00000000 
08004848 l       .text	00000000 
0800485e l       .text	00000000 
08004862 l       .text	00000000 
08004866 l       .text	00000000 
08004874 l       .text	00000000 
08004878 l       .text	00000000 
0800487c l       .text	00000000 
08004888 l       .text	00000000 
0800488a l       .text	00000000 
0800488c l       .text	00000000 
0800489a l       .text	00000000 
0800489e l       .text	00000000 
080048aa l       .text	00000000 
080048c0 l       .text	00000000 
080048ca l       .text	00000000 
080048da l       .text	00000000 
080048da l       .text	00000000 
080048da l       .text	00000000 
080048da l       .text	00000000 
080048f0 l       .text	00000000 
080048f4 l       .text	00000000 
080048f8 l       .text	00000000 
08004906 l       .text	00000000 
0800490a l       .text	00000000 
0800490e l       .text	00000000 
0800491a l       .text	00000000 
0800491c l       .text	00000000 
0800491e l       .text	00000000 
0800492c l       .text	00000000 
08004930 l       .text	00000000 
0800493c l       .text	00000000 
08004952 l       .text	00000000 
0800495c l       .text	00000000 
0800496c l       .text	00000000 
0800496c l       .text	00000000 
0800496c l       .text	00000000 
0800496c l       .text	00000000 
080049d0 l       .text	00000000 
080049d2 l       .text	00000000 
080049d4 l       .text	00000000 
080049e8 l       .text	00000000 
08004a12 l       .text	00000000 
08004a1a l       .text	00000000 
08004a1c l       .text	00000000 
08004a1e l       .text	00000000 
08004a26 l       .text	00000000 
08004a28 l       .text	00000000 
08004a68 l       .text	00000000 
08004a78 l       .text	00000000 
08004a7a l       .text	00000000 
08004a98 l       .text	00000000 
08004aa6 l       .text	00000000 
08004ace l       .text	00000000 
08004ace l       .text	00000000 
08004ace l       .text	00000000 
08004ad0 l       .text	00000000 
08004ade l       .text	00000000 
08004ade l       .text	00000000 
08004ade l       .text	00000000 
08004af8 l       .text	00000000 
08004af8 l       .text	00000000 
08004af8 l       .text	00000000 
08004afa l       .text	00000000 
08004b06 l       .text	00000000 
08004b06 l       .text	00000000 
08004b06 l       .text	00000000 
08004b46 l       .text	00000000 
08004b4e l       .text	00000000 
08004b50 l       .text	00000000 
08004b52 l       .text	00000000 
08004b58 l       .text	00000000 
08004b5a l       .text	00000000 
08004bd6 l       .text	00000000 
08004bd8 l       .text	00000000 
08004bda l       .text	00000000 
08004bee l       .text	00000000 
08004c40 l       .text	00000000 
08004c50 l       .text	00000000 
08004c52 l       .text	00000000 
08004c6e l       .text	00000000 
08004c7c l       .text	00000000 
08004cba l       .text	00000000 
08004cba l       .text	00000000 
08004cba l       .text	00000000 
08004ce6 l       .text	00000000 
08004ce6 l       .text	00000000 
08004ce6 l       .text	00000000 
08004cec l       .text	00000000 
08004cf6 l       .text	00000000 
00000853 l       .debug_str	00000000 
0000832e l       .debug_str	00000000 
00008341 l       .debug_str	00000000 
000082a6 l       .debug_str	00000000 
0000fc2a l       .debug_str	00000000 
00008372 l       .debug_str	00000000 
0000837a l       .debug_str	00000000 
00008383 l       .debug_str	00000000 
000083cc l       .debug_str	00000000 
000082fd l       .debug_str	00000000 
00000c17 l       .debug_str	00000000 
0000838a l       .debug_str	00000000 
000083c9 l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
00008414 l       .debug_str	00000000 
0000841e l       .debug_str	00000000 
00008461 l       .debug_str	00000000 
0000846b l       .debug_str	00000000 
000084ae l       .debug_str	00000000 
000084b8 l       .debug_str	00000000 
000084fb l       .debug_str	00000000 
00008506 l       .debug_str	00000000 
0000854b l       .debug_str	00000000 
00008556 l       .debug_str	00000000 
0000859b l       .debug_str	00000000 
000085a1 l       .debug_str	00000000 
000008d9 l       .debug_str	00000000 
00004e41 l       .debug_str	00000000 
00003de0 l       .debug_str	00000000 
00008bd3 l       .debug_str	00000000 
000085ae l       .debug_str	00000000 
000085b2 l       .debug_str	00000000 
000085c2 l       .debug_str	00000000 
00000c10 l       .debug_str	00000000 
00003356 l       .debug_str	00000000 
00000b05 l       .debug_str	00000000 
00008608 l       .debug_str	00000000 
0000861d l       .debug_str	00000000 
000086a6 l       .debug_str	00000000 
00008627 l       .debug_str	00000000 
00008630 l       .debug_str	00000000 
00000b1d l       .debug_str	00000000 
00000c97 l       .debug_str	00000000 
00000963 l       .debug_str	00000000 
0000096e l       .debug_str	00000000 
00000967 l       .debug_str	00000000 
0001826a l       .debug_str	00000000 
00000c9d l       .debug_str	00000000 
00000c9e l       .debug_str	00000000 
000080d6 l       .debug_str	00000000 
00010127 l       .debug_str	00000000 
00008638 l       .debug_str	00000000 
000090a4 l       .debug_str	00000000 
00009278 l       .debug_str	00000000 
000157ba l       .debug_str	00000000 
00008649 l       .debug_str	00000000 
00015c50 l       .debug_str	00000000 
00015e03 l       .debug_str	00000000 
00008f80 l       .debug_str	00000000 
00008661 l       .debug_str	00000000 
0000fadd l       .debug_str	00000000 
000008cf l       .debug_str	00000000 
00000124 l       .debug_str	00000000 
0001319a l       .debug_str	00000000 
0000866b l       .debug_str	00000000 
00008670 l       .debug_str	00000000 
00008675 l       .debug_str	00000000 
00008d63 l       .debug_str	00000000 
000000ce l       .debug_str	00000000 
0000867f l       .debug_str	00000000 
00011178 l       .debug_str	00000000 
0000868a l       .debug_str	00000000 
000114e6 l       .debug_str	00000000 
00008d1d l       .debug_str	00000000 
00008694 l       .debug_str	00000000 
00005b2d l       .debug_str	00000000 
00008d5d l       .debug_str	00000000 
00008d3d l       .debug_str	00000000 
00008d78 l       .debug_str	00000000 
000090ba l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
00008fc9 l       .debug_str	00000000 
000086a2 l       .debug_str	00000000 
00015af5 l       .debug_str	00000000 
000086ab l       .debug_str	00000000 
00008723 l       .debug_str	00000000 
00008f04 l       .debug_str	00000000 
00008f47 l       .debug_str	00000000 
00008735 l       .debug_str	00000000 
000087a9 l       .debug_str	00000000 
00009000 l       .debug_str	00000000 
00009043 l       .debug_str	00000000 
000087bb l       .debug_str	00000000 
0000bd41 l       .debug_str	00000000 
00011d13 l       .debug_str	00000000 
00015e9e l       .debug_str	00000000 
000090ec l       .debug_str	00000000 
00009074 l       .debug_str	00000000 
0000882f l       .debug_str	00000000 
0001570d l       .debug_str	00000000 
00008887 l       .debug_str	00000000 
0000888f l       .debug_str	00000000 
00008897 l       .debug_str	00000000 
0000095e l       .debug_str	00000000 
00010621 l       .debug_str	00000000 
00000b1c l       .debug_str	00000000 
000088a0 l       .debug_str	00000000 
000088a7 l       .debug_str	00000000 
000088b3 l       .debug_str	00000000 
000088ba l       .debug_str	00000000 
000088c4 l       .debug_str	00000000 
000088d1 l       .debug_str	00000000 
000088de l       .debug_str	00000000 
00004ec0 l       .debug_str	00000000 
000088f3 l       .debug_str	00000000 
00012b68 l       .debug_str	00000000 
000088fc l       .debug_str	00000000 
00008910 l       .debug_str	00000000 
00003a64 l       .debug_str	00000000 
00005f39 l       .debug_str	00000000 
00008926 l       .debug_str	00000000 
0000892b l       .debug_str	00000000 
0000893d l       .debug_str	00000000 
00008965 l       .debug_str	00000000 
0000896f l       .debug_str	00000000 
0000897f l       .debug_str	00000000 
000089d8 l       .debug_str	00000000 
000089e0 l       .debug_str	00000000 
000089ed l       .debug_str	00000000 
000089fa l       .debug_str	00000000 
00009152 l       .debug_str	00000000 
00015c6a l       .debug_str	00000000 
00008a07 l       .debug_str	00000000 
00008a34 l       .debug_str	00000000 
00008a63 l       .debug_str	00000000 
00008a8a l       .debug_str	00000000 
00008aa9 l       .debug_str	00000000 
00008ab9 l       .debug_str	00000000 
0000e35d l       .debug_str	00000000 
00008aeb l       .debug_str	00000000 
00008afa l       .debug_str	00000000 
00008b05 l       .debug_str	00000000 
00003872 l       .debug_str	00000000 
000125ed l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00004af1 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c85 l       .debug_str	00000000 
00008b3a l       .debug_str	00000000 
00008b65 l       .debug_str	00000000 
00008b45 l       .debug_str	00000000 
00008b4b l       .debug_str	00000000 
00013a0f l       .debug_str	00000000 
00008b70 l       .debug_str	00000000 
00008b75 l       .debug_str	00000000 
00014850 l       .debug_str	00000000 
00009769 l       .debug_str	00000000 
00009762 l       .debug_str	00000000 
00006ea5 l       .debug_str	00000000 
00009790 l       .debug_str	00000000 
000097c4 l       .debug_str	00000000 
00008b7b l       .debug_str	00000000 
00008b87 l       .debug_str	00000000 
00008bbe l       .debug_str	00000000 
0000976d l       .debug_str	00000000 
000097ba l       .debug_str	00000000 
00008b9f l       .debug_str	00000000 
00008b8c l       .debug_str	00000000 
00008ba5 l       .debug_str	00000000 
00008bcd l       .debug_str	00000000 
00008bd2 l       .debug_str	00000000 
00008bd7 l       .debug_str	00000000 
00008bdd l       .debug_str	00000000 
00008be5 l       .debug_str	00000000 
00008bea l       .debug_str	00000000 
0000b218 l       .debug_str	00000000 
00016813 l       .debug_str	00000000 
00008bf0 l       .debug_str	00000000 
00008c18 l       .debug_str	00000000 
00008bfa l       .debug_str	00000000 
00005f38 l       .debug_str	00000000 
00008c21 l       .debug_str	00000000 
00008c20 l       .debug_str	00000000 
00005b2c l       .debug_str	00000000 
00004dfb l       .debug_str	00000000 
00008093 l       .debug_str	00000000 
00008c25 l       .debug_str	00000000 
00008c2d l       .debug_str	00000000 
0000e62d l       .debug_str	00000000 
00008c33 l       .debug_str	00000000 
00008c5a l       .debug_str	00000000 
00008c3e l       .debug_str	00000000 
00008979 l       .debug_str	00000000 
00008c62 l       .debug_str	00000000 
00008c7f l       .debug_str	00000000 
00008c6a l       .debug_str	00000000 
00008c8e l       .debug_str	00000000 
00008c92 l       .debug_str	00000000 
00008c9f l       .debug_str	00000000 
00008ca8 l       .debug_str	00000000 
0000f45f l       .debug_str	00000000 
00008cbe l       .debug_str	00000000 
00008cb2 l       .debug_str	00000000 
00008ccb l       .debug_str	00000000 
00008cd3 l       .debug_str	00000000 
00008cdf l       .debug_str	00000000 
00008d02 l       .debug_str	00000000 
00008cec l       .debug_str	00000000 
00008d10 l       .debug_str	00000000 
00008d30 l       .debug_str	00000000 
00008d50 l       .debug_str	00000000 
00008d6b l       .debug_str	00000000 
00008d86 l       .debug_str	00000000 
00008d8c l       .debug_str	00000000 
00008d90 l       .debug_str	00000000 
00008da1 l       .debug_str	00000000 
00008d94 l       .debug_str	00000000 
00003371 l       .debug_str	00000000 
00008db2 l       .debug_str	00000000 
00008db1 l       .debug_str	00000000 
00000b0e l       .debug_str	00000000 
00000b15 l       .debug_str	00000000 
00000b21 l       .debug_str	00000000 
00015710 l       .debug_str	00000000 
00000de0 l       .debug_str	00000000 
00000b29 l       .debug_str	00000000 
00000b32 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000b3a l       .debug_str	00000000 
00015235 l       .debug_str	00000000 
00000b43 l       .debug_str	00000000 
00018386 l       .debug_str	00000000 
00000a08 l       .debug_str	00000000 
00000a0d l       .debug_str	00000000 
00000a13 l       .debug_str	00000000 
00000a1a l       .debug_str	00000000 
00000a22 l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000b48 l       .debug_str	00000000 
00000b52 l       .debug_str	00000000 
00000b59 l       .debug_str	00000000 
00000b55 l       .debug_str	00000000 
00000b5f l       .debug_str	00000000 
00000b67 l       .debug_str	00000000 
0000a3fb l       .debug_str	00000000 
00000b6d l       .debug_str	00000000 
00000b92 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b9b l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00012728 l       .debug_str	00000000 
0001252e l       .debug_str	00000000 
00000be6 l       .debug_str	00000000 
00000bec l       .debug_str	00000000 
00000bfb l       .debug_str	00000000 
00000bff l       .debug_str	00000000 
00000c37 l       .debug_str	00000000 
00000c43 l       .debug_str	00000000 
00000c68 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0000783e l       .debug_str	00000000 
000009fa l       .debug_str	00000000 
000009fd l       .debug_str	00000000 
00000a01 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c90 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cbc l       .debug_str	00000000 
00000ce0 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000cfc l       .debug_str	00000000 
00000d16 l       .debug_str	00000000 
00000d86 l       .debug_str	00000000 
00000d74 l       .debug_str	00000000 
00000d91 l       .debug_str	00000000 
000090d3 l       .debug_str	00000000 
000090c7 l       .debug_str	00000000 
00008dc6 l       .debug_str	00000000 
00008db7 l       .debug_str	00000000 
0001271a l       .debug_str	00000000 
00000540 l       .debug_str	00000000 
00003375 l       .debug_str	00000000 
0000339f l       .debug_str	00000000 
00003391 l       .debug_str	00000000 
0000335c l       .debug_str	00000000 
000080c5 l       .debug_str	00000000 
00008e04 l       .debug_str	00000000 
00008de4 l       .debug_str	00000000 
00008e5d l       .debug_str	00000000 
00008e3d l       .debug_str	00000000 
0000f451 l       .debug_str	00000000 
00008eb4 l       .debug_str	00000000 
00008eb9 l       .debug_str	00000000 
00008ebf l       .debug_str	00000000 
00008ee2 l       .debug_str	00000000 
00008ec4 l       .debug_str	00000000 
00008eed l       .debug_str	00000000 
00008f38 l       .debug_str	00000000 
00008f69 l       .debug_str	00000000 
00008fba l       .debug_str	00000000 
00008fe9 l       .debug_str	00000000 
00009034 l       .debug_str	00000000 
00009065 l       .debug_str	00000000 
00009096 l       .debug_str	00000000 
000090ad l       .debug_str	00000000 
000090c6 l       .debug_str	00000000 
000090dd l       .debug_str	00000000 
0000911d l       .debug_str	00000000 
0000910b l       .debug_str	00000000 
0000910a l       .debug_str	00000000 
00009128 l       .debug_str	00000000 
00009131 l       .debug_str	00000000 
0000913e l       .debug_str	00000000 
0000913d l       .debug_str	00000000 
00009146 l       .debug_str	00000000 
00009173 l       .debug_str	00000000 
0000915e l       .debug_str	00000000 
00009190 l       .debug_str	00000000 
0000919c l       .debug_str	00000000 
00009246 l       .debug_str	00000000 
000091a8 l       .debug_str	00000000 
000091af l       .debug_str	00000000 
000091b8 l       .debug_str	00000000 
000091c6 l       .debug_str	00000000 
000091cd l       .debug_str	00000000 
000091d5 l       .debug_str	00000000 
000091dc l       .debug_str	00000000 
00009222 l       .debug_str	00000000 
000091fd l       .debug_str	00000000 
000091e8 l       .debug_str	00000000 
0000920d l       .debug_str	00000000 
00009231 l       .debug_str	00000000 
00009261 l       .debug_str	00000000 
00009252 l       .debug_str	00000000 
0000926c l       .debug_str	00000000 
00012dab l       .debug_str	00000000 
00009295 l       .debug_str	00000000 
0000927e l       .debug_str	00000000 
000092b3 l       .debug_str	00000000 
000092d6 l       .debug_str	00000000 
000092bf l       .debug_str	00000000 
00009320 l       .debug_str	00000000 
00009314 l       .debug_str	00000000 
00008974 l       .debug_str	00000000 
0000933d l       .debug_str	00000000 
00009326 l       .debug_str	00000000 
00009386 l       .debug_str	00000000 
000093ae l       .debug_str	00000000 
00009397 l       .debug_str	00000000 
0001521e l       .debug_str	00000000 
000020e2 l       .debug_str	00000000 
000168a5 l       .debug_str	00000000 
0000945d l       .debug_str	00000000 
0000943f l       .debug_str	00000000 
00009553 l       .debug_str	00000000 
00009533 l       .debug_str	00000000 
000095c6 l       .debug_str	00000000 
000095a6 l       .debug_str	00000000 
000184ff l       .debug_str	00000000 
00009619 l       .debug_str	00000000 
0000961d l       .debug_str	00000000 
00011e53 l       .debug_str	00000000 
000000e8 l       .debug_str	00000000 
00009620 l       .debug_str	00000000 
00009623 l       .debug_str	00000000 
000096e9 l       .debug_str	00000000 
00009627 l       .debug_str	00000000 
00009626 l       .debug_str	00000000 
0000962c l       .debug_str	00000000 
00009737 l       .debug_str	00000000 
000109fe l       .debug_str	00000000 
0000964a l       .debug_str	00000000 
00009638 l       .debug_str	00000000 
0000966f l       .debug_str	00000000 
000096fe l       .debug_str	00000000 
0000968d l       .debug_str	00000000 
0000967b l       .debug_str	00000000 
000096b2 l       .debug_str	00000000 
000096cb l       .debug_str	00000000 
000096b9 l       .debug_str	00000000 
000096d7 l       .debug_str	00000000 
000096ef l       .debug_str	00000000 
00009728 l       .debug_str	00000000 
00009761 l       .debug_str	00000000 
0000976c l       .debug_str	00000000 
0000978f l       .debug_str	00000000 
000097c3 l       .debug_str	00000000 
000097e5 l       .debug_str	00000000 
000097d9 l       .debug_str	00000000 
000097fd l       .debug_str	00000000 
000097f1 l       .debug_str	00000000 
0000980b l       .debug_str	00000000 
0000980a l       .debug_str	00000000 
000011e9 l       .debug_str	00000000 
00004758 l       .debug_str	00000000 
0000980f l       .debug_str	00000000 
0000980e l       .debug_str	00000000 
00004e83 l       .debug_str	00000000 
00009813 l       .debug_str	00000000 
00009818 l       .debug_str	00000000 
00009826 l       .debug_str	00000000 
00009830 l       .debug_str	00000000 
0000983f l       .debug_str	00000000 
0000616e l       .debug_str	00000000 
0000986f l       .debug_str	00000000 
0000987f l       .debug_str	00000000 
0000988d l       .debug_str	00000000 
0000989c l       .debug_str	00000000 
000098a5 l       .debug_str	00000000 
000098b1 l       .debug_str	00000000 
000061ef l       .debug_str	00000000 
00006250 l       .debug_str	00000000 
00004945 l       .debug_str	00000000 
000049ae l       .debug_str	00000000 
000098c5 l       .debug_str	00000000 
000098ce l       .debug_str	00000000 
000098e6 l       .debug_str	00000000 
00006258 l       .debug_str	00000000 
000098f1 l       .debug_str	00000000 
000098fc l       .debug_str	00000000 
00009933 l       .debug_str	00000000 
00013913 l       .debug_str	00000000 
0000993c l       .debug_str	00000000 
000099e1 l       .debug_str	00000000 
000099f0 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00009a51 l       .debug_str	00000000 
00009a62 l       .debug_str	00000000 
00009a78 l       .debug_str	00000000 
00009a84 l       .debug_str	00000000 
00009ab0 l       .debug_str	00000000 
00009abc l       .debug_str	00000000 
00009af8 l       .debug_str	00000000 
00009b08 l       .debug_str	00000000 
00009b13 l       .debug_str	00000000 
000049b6 l       .debug_str	00000000 
00009b3f l       .debug_str	00000000 
00009b4a l       .debug_str	00000000 
00009b58 l       .debug_str	00000000 
00009b78 l       .debug_str	00000000 
0000429d l       .debug_str	00000000 
0000e6ff l       .debug_str	00000000 
00009b85 l       .debug_str	00000000 
00009b8d l       .debug_str	00000000 
00009892 l       .debug_str	00000000 
00009b96 l       .debug_str	00000000 
00009bcd l       .debug_str	00000000 
00009c18 l       .debug_str	00000000 
00009c3c l       .debug_str	00000000 
00009c49 l       .debug_str	00000000 
00009c55 l       .debug_str	00000000 
00009c81 l       .debug_str	00000000 
00009ccb l       .debug_str	00000000 
00009cd9 l       .debug_str	00000000 
00009d06 l       .debug_str	00000000 
0000a2e2 l       .debug_str	00000000 
00005914 l       .debug_str	00000000 
00009d0f l       .debug_str	00000000 
00009d25 l       .debug_str	00000000 
00009d38 l       .debug_str	00000000 
00009d42 l       .debug_str	00000000 
00009d4f l       .debug_str	00000000 
0000a16a l       .debug_str	00000000 
00009d5c l       .debug_str	00000000 
00009d73 l       .debug_str	00000000 
00009d82 l       .debug_str	00000000 
00009db1 l       .debug_str	00000000 
00009dc0 l       .debug_str	00000000 
00009dca l       .debug_str	00000000 
00009df5 l       .debug_str	00000000 
00009e34 l       .debug_str	00000000 
00009e4a l       .debug_str	00000000 
00009e62 l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00011bf1 l       .debug_str	00000000 
00005aa2 l       .debug_str	00000000 
00005b0d l       .debug_str	00000000 
00009e7b l       .debug_str	00000000 
00009e89 l       .debug_str	00000000 
00009ea8 l       .debug_str	00000000 
00009eb8 l       .debug_str	00000000 
00009ed7 l       .debug_str	00000000 
00009ef8 l       .debug_str	00000000 
00009f21 l       .debug_str	00000000 
00005989 l       .debug_str	00000000 
00009f52 l       .debug_str	00000000 
00009f7f l       .debug_str	00000000 
00009f9f l       .debug_str	00000000 
00009fe0 l       .debug_str	00000000 
00009feb l       .debug_str	00000000 
00009ff8 l       .debug_str	00000000 
00009ff3 l       .debug_str	00000000 
0000a001 l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
0000a02e l       .debug_str	00000000 
0000a060 l       .debug_str	00000000 
0000a071 l       .debug_str	00000000 
0000a096 l       .debug_str	00000000 
0000a09e l       .debug_str	00000000 
0000a0ad l       .debug_str	00000000 
0000a0bc l       .debug_str	00000000 
0000a0c5 l       .debug_str	00000000 
0000a0db l       .debug_str	00000000 
000089dd l       .debug_str	00000000 
00005d2c l       .debug_str	00000000 
00005d99 l       .debug_str	00000000 
0000a0e6 l       .debug_str	00000000 
0000a100 l       .debug_str	00000000 
0000a10e l       .debug_str	00000000 
00016764 l       .debug_str	00000000 
0000fcc2 l       .debug_str	00000000 
0000a11f l       .debug_str	00000000 
00000ddc l       .debug_str	00000000 
0000a149 l       .debug_str	00000000 
0000a152 l       .debug_str	00000000 
0000a162 l       .debug_str	00000000 
0000a16e l       .debug_str	00000000 
0000a178 l       .debug_str	00000000 
00008c2a l       .debug_str	00000000 
0000a17f l       .debug_str	00000000 
0000a18c l       .debug_str	00000000 
0000a1ab l       .debug_str	00000000 
0000a1b7 l       .debug_str	00000000 
0000a1cd l       .debug_str	00000000 
0000a1db l       .debug_str	00000000 
0000a1ec l       .debug_str	00000000 
00017725 l       .debug_str	00000000 
0000a1fc l       .debug_str	00000000 
0000a206 l       .debug_str	00000000 
0000a217 l       .debug_str	00000000 
000080dc l       .debug_str	00000000 
0000a224 l       .debug_str	00000000 
0000a22f l       .debug_str	00000000 
0000a23a l       .debug_str	00000000 
0000a259 l       .debug_str	00000000 
0000069f l       .debug_str	00000000 
0000a279 l       .debug_str	00000000 
0000a283 l       .debug_str	00000000 
0000a28c l       .debug_str	00000000 
0000f867 l       .debug_str	00000000 
0000a29f l       .debug_str	00000000 
0000a2c8 l       .debug_str	00000000 
0000a2d2 l       .debug_str	00000000 
0000a2dc l       .debug_str	00000000 
0000a2ed l       .debug_str	00000000 
00009e35 l       .debug_str	00000000 
0000a32b l       .debug_str	00000000 
0000a337 l       .debug_str	00000000 
0000a34a l       .debug_str	00000000 
0000a366 l       .debug_str	00000000 
0000a3ca l       .debug_str	00000000 
0000b2fd l       .debug_str	00000000 
0000a375 l       .debug_str	00000000 
00005e36 l       .debug_str	00000000 
00005f2a l       .debug_str	00000000 
0000a39e l       .debug_str	00000000 
0000a3b3 l       .debug_str	00000000 
0000a3c2 l       .debug_str	00000000 
0000a3d9 l       .debug_str	00000000 
0000a3f1 l       .debug_str	00000000 
000059fd l       .debug_str	00000000 
00005a4b l       .debug_str	00000000 
0000a401 l       .debug_str	00000000 
0000a40a l       .debug_str	00000000 
0000a419 l       .debug_str	00000000 
0000a440 l       .debug_str	00000000 
0000a44e l       .debug_str	00000000 
0000a45b l       .debug_str	00000000 
0000a46c l       .debug_str	00000000 
0000a479 l       .debug_str	00000000 
0000a485 l       .debug_str	00000000 
0000a498 l       .debug_str	00000000 
0000a4a8 l       .debug_str	00000000 
0000a4bd l       .debug_str	00000000 
0000a4e3 l       .debug_str	00000000 
0000a4ec l       .debug_str	00000000 
0000a509 l       .debug_str	00000000 
0000a52e l       .debug_str	00000000 
0000a554 l       .debug_str	00000000 
0000a57e l       .debug_str	00000000 
0000a5a6 l       .debug_str	00000000 
0000a5c0 l       .debug_str	00000000 
0000f5c8 l       .debug_str	00000000 
0000a5cd l       .debug_str	00000000 
0000a5e4 l       .debug_str	00000000 
0000a5fa l       .debug_str	00000000 
0000a608 l       .debug_str	00000000 
0000a646 l       .debug_str	00000000 
0000a65b l       .debug_str	00000000 
0000a7af l       .debug_str	00000000 
00011f54 l       .debug_str	00000000 
0000e6b7 l       .debug_str	00000000 
0000a669 l       .debug_str	00000000 
0000a679 l       .debug_str	00000000 
0000a6a8 l       .debug_str	00000000 
0000a6b2 l       .debug_str	00000000 
0000a6c5 l       .debug_str	00000000 
0000a708 l       .debug_str	00000000 
0000a722 l       .debug_str	00000000 
0000a734 l       .debug_str	00000000 
0000a754 l       .debug_str	00000000 
0000a75c l       .debug_str	00000000 
0000a78a l       .debug_str	00000000 
0000a7a6 l       .debug_str	00000000 
0000a7c0 l       .debug_str	00000000 
0000a7d5 l       .debug_str	00000000 
0000a7e8 l       .debug_str	00000000 
0000a7fb l       .debug_str	00000000 
0000a810 l       .debug_str	00000000 
0000a823 l       .debug_str	00000000 
0000a836 l       .debug_str	00000000 
0000a860 l       .debug_str	00000000 
0000a933 l       .debug_str	00000000 
0000aa08 l       .debug_str	00000000 
0000aa14 l       .debug_str	00000000 
0000aa76 l       .debug_str	00000000 
0000aa7f l       .debug_str	00000000 
0000aa8e l       .debug_str	00000000 
0000aaa3 l       .debug_str	00000000 
0000aab0 l       .debug_str	00000000 
0000ab3c l       .debug_str	00000000 
0000ab4e l       .debug_str	00000000 
0000ab5a l       .debug_str	00000000 
0000abbc l       .debug_str	00000000 
0000ac16 l       .debug_str	00000000 
0000ac26 l       .debug_str	00000000 
0000aca8 l       .debug_str	00000000 
0000ad02 l       .debug_str	00000000 
0000ad62 l       .debug_str	00000000 
0000adc2 l       .debug_str	00000000 
0000ae20 l       .debug_str	00000000 
0000ae7e l       .debug_str	00000000 
0000ae8c l       .debug_str	00000000 
0000ae97 l       .debug_str	00000000 
0000aea2 l       .debug_str	00000000 
0000aec9 l       .debug_str	00000000 
0000aef1 l       .debug_str	00000000 
0000af03 l       .debug_str	00000000 
0000af08 l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
0000af31 l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
0000af63 l       .debug_str	00000000 
0000af6e l       .debug_str	00000000 
0000af8c l       .debug_str	00000000 
0000afa7 l       .debug_str	00000000 
0000afc3 l       .debug_str	00000000 
0000b00f l       .debug_str	00000000 
0000b05b l       .debug_str	00000000 
00014369 l       .debug_str	00000000 
0000b0a8 l       .debug_str	00000000 
0000b0b1 l       .debug_str	00000000 
0000b0cd l       .debug_str	00000000 
0000b0f3 l       .debug_str	00000000 
0000b0fc l       .debug_str	00000000 
0000b142 l       .debug_str	00000000 
0000b188 l       .debug_str	00000000 
0000b1cf l       .debug_str	00000000 
0000b1f4 l       .debug_str	00000000 
0000b213 l       .debug_str	00000000 
00013245 l       .debug_str	00000000 
0000b21d l       .debug_str	00000000 
0000b231 l       .debug_str	00000000 
000182e1 l       .debug_str	00000000 
0000b239 l       .debug_str	00000000 
0000b248 l       .debug_str	00000000 
0000b265 l       .debug_str	00000000 
0000b281 l       .debug_str	00000000 
0000b2a7 l       .debug_str	00000000 
0000b2b7 l       .debug_str	00000000 
0000b2c3 l       .debug_str	00000000 
0000b2e5 l       .debug_str	00000000 
0000b2f1 l       .debug_str	00000000 
00018210 l       .debug_str	00000000 
0000b301 l       .debug_str	00000000 
0000b310 l       .debug_str	00000000 
0000b31e l       .debug_str	00000000 
0000b32c l       .debug_str	00000000 
0000b349 l       .debug_str	00000000 
0000b371 l       .debug_str	00000000 
0000a229 l       .debug_str	00000000 
000166c6 l       .debug_str	00000000 
0000b377 l       .debug_str	00000000 
0000b381 l       .debug_str	00000000 
0000b3a3 l       .debug_str	00000000 
0000b3e8 l       .debug_str	00000000 
0000b3fb l       .debug_str	00000000 
0000b403 l       .debug_str	00000000 
0000b429 l       .debug_str	00000000 
0000b446 l       .debug_str	00000000 
0000b460 l       .debug_str	00000000 
0000b46c l       .debug_str	00000000 
0000b47d l       .debug_str	00000000 
0000b48c l       .debug_str	00000000 
0000b49d l       .debug_str	00000000 
0000b4b6 l       .debug_str	00000000 
0000b4d5 l       .debug_str	00000000 
0000b4e5 l       .debug_str	00000000 
0000b4f9 l       .debug_str	00000000 
0000b504 l       .debug_str	00000000 
0000b50f l       .debug_str	00000000 
0000b53b l       .debug_str	00000000 
0000b54e l       .debug_str	00000000 
0000b561 l       .debug_str	00000000 
0000b575 l       .debug_str	00000000 
0000b5ab l       .debug_str	00000000 
0000b5bf l       .debug_str	00000000 
0000b5fa l       .debug_str	00000000 
0000b630 l       .debug_str	00000000 
0000b644 l       .debug_str	00000000 
0000b67f l       .debug_str	00000000 
0000b6b5 l       .debug_str	00000000 
0000b6ca l       .debug_str	00000000 
0000b706 l       .debug_str	00000000 
0000b73d l       .debug_str	00000000 
0000b772 l       .debug_str	00000000 
0000b7ac l       .debug_str	00000000 
0000b7e2 l       .debug_str	00000000 
0000b81d l       .debug_str	00000000 
0000b831 l       .debug_str	00000000 
0000b86c l       .debug_str	00000000 
0000b8a2 l       .debug_str	00000000 
0000b8b6 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0000b927 l       .debug_str	00000000 
0000b93c l       .debug_str	00000000 
0000b978 l       .debug_str	00000000 
0000b9af l       .debug_str	00000000 
0000b9bb l       .debug_str	00000000 
0000ba15 l       .debug_str	00000000 
0000ba81 l       .debug_str	00000000 
0000baf2 l       .debug_str	00000000 
0000bb62 l       .debug_str	00000000 
0000bbc5 l       .debug_str	00000000 
0000bbd6 l       .debug_str	00000000 
0000bc4a l       .debug_str	00000000 
0000bcb3 l       .debug_str	00000000 
0000bd2a l       .debug_str	00000000 
0000bd3d l       .debug_str	00000000 
0000bd47 l       .debug_str	00000000 
0000bd64 l       .debug_str	00000000 
0000bd88 l       .debug_str	00000000 
0000bda8 l       .debug_str	00000000 
0000bdb5 l       .debug_str	00000000 
0000bdc0 l       .debug_str	00000000 
0000bdcc l       .debug_str	00000000 
0000be02 l       .debug_str	00000000 
0000be4c l       .debug_str	00000000 
0000be6f l       .debug_str	00000000 
0000be9a l       .debug_str	00000000 
0000bee3 l       .debug_str	00000000 
0000bf3c l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
0000c017 l       .debug_str	00000000 
0000c086 l       .debug_str	00000000 
0000c0e8 l       .debug_str	00000000 
0000c15b l       .debug_str	00000000 
0000c1c3 l       .debug_str	00000000 
0000c239 l       .debug_str	00000000 
0000c26e l       .debug_str	00000000 
0000c28a l       .debug_str	00000000 
0000c2ad l       .debug_str	00000000 
0000c2cb l       .debug_str	00000000 
0000c311 l       .debug_str	00000000 
0000c335 l       .debug_str	00000000 
0000c36f l       .debug_str	00000000 
0000c412 l       .debug_str	00000000 
0000c41d l       .debug_str	00000000 
0000c43d l       .debug_str	00000000 
0000c44d l       .debug_str	00000000 
0000c45d l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
00009b81 l       .debug_str	00000000 
0000c492 l       .debug_str	00000000 
0000c4b7 l       .debug_str	00000000 
0000c4c8 l       .debug_str	00000000 
0000c4ee l       .debug_str	00000000 
0000c514 l       .debug_str	00000000 
0000c525 l       .debug_str	00000000 
0000c536 l       .debug_str	00000000 
0000c55c l       .debug_str	00000000 
0000c582 l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c5a6 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5e1 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000c64f l       .debug_str	00000000 
0000c724 l       .debug_str	00000000 
0000c72e l       .debug_str	00000000 
0000c769 l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
0000c82b l       .debug_str	00000000 
0000c8b8 l       .debug_str	00000000 
0000c9c6 l       .debug_str	00000000 
0000ca06 l       .debug_str	00000000 
0000ca5e l       .debug_str	00000000 
0000cac0 l       .debug_str	00000000 
0000cb17 l       .debug_str	00000000 
0000cb34 l       .debug_str	00000000 
0000cb56 l       .debug_str	00000000 
0000cbe6 l       .debug_str	00000000 
0000cc56 l       .debug_str	00000000 
0000cd03 l       .debug_str	00000000 
0000cd94 l       .debug_str	00000000 
0000cde5 l       .debug_str	00000000 
0000ce71 l       .debug_str	00000000 
0000ce76 l       .debug_str	00000000 
0000ce7f l       .debug_str	00000000 
0000cf0e l       .debug_str	00000000 
0000cfbe l       .debug_str	00000000 
0000cfcd l       .debug_str	00000000 
0000d002 l       .debug_str	00000000 
0000d06d l       .debug_str	00000000 
0000d0bc l       .debug_str	00000000 
0000d0dd l       .debug_str	00000000 
0000d181 l       .debug_str	00000000 
0000d209 l       .debug_str	00000000 
0000d263 l       .debug_str	00000000 
0000d2c2 l       .debug_str	00000000 
0000d31b l       .debug_str	00000000 
0000d32a l       .debug_str	00000000 
0000d3b5 l       .debug_str	00000000 
0000d43d l       .debug_str	00000000 
0000d4e4 l       .debug_str	00000000 
0000d519 l       .debug_str	00000000 
0000d584 l       .debug_str	00000000 
0000d5d3 l       .debug_str	00000000 
0000d5f4 l       .debug_str	00000000 
0000d698 l       .debug_str	00000000 
0000d720 l       .debug_str	00000000 
0000d77a l       .debug_str	00000000 
0000d7d9 l       .debug_str	00000000 
0000d832 l       .debug_str	00000000 
0000d8ba l       .debug_str	00000000 
0000d945 l       .debug_str	00000000 
0000d9ec l       .debug_str	00000000 
0000da09 l       .debug_str	00000000 
0000da2a l       .debug_str	00000000 
0000da47 l       .debug_str	00000000 
0000da68 l       .debug_str	00000000 
0000da8b l       .debug_str	00000000 
0000daad l       .debug_str	00000000 
0000dad1 l       .debug_str	00000000 
0000daf4 l       .debug_str	00000000 
0000db18 l       .debug_str	00000000 
0000db3b l       .debug_str	00000000 
0000db61 l       .debug_str	00000000 
0000db98 l       .debug_str	00000000 
0000dbbc l       .debug_str	00000000 
0000dbdf l       .debug_str	00000000 
0000dbff l       .debug_str	00000000 
0000dc29 l       .debug_str	00000000 
0000dc4c l       .debug_str	00000000 
0000dc72 l       .debug_str	00000000 
0000dc98 l       .debug_str	00000000 
0000dcbd l       .debug_str	00000000 
0000dce1 l       .debug_str	00000000 
0000dd08 l       .debug_str	00000000 
0000dd2f l       .debug_str	00000000 
0000dd36 l       .debug_str	00000000 
0000dd3e l       .debug_str	00000000 
0000dd7b l       .debug_str	00000000 
0000dd9d l       .debug_str	00000000 
0000ddea l       .debug_str	00000000 
0000debd l       .debug_str	00000000 
0000def0 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000df28 l       .debug_str	00000000 
0000df42 l       .debug_str	00000000 
0000df4b l       .debug_str	00000000 
0000df6a l       .debug_str	00000000 
00003a0c l       .debug_str	00000000 
0000df75 l       .debug_str	00000000 
00012265 l       .debug_str	00000000 
0000df7f l       .debug_str	00000000 
0000dfa2 l       .debug_str	00000000 
0000dfe7 l       .debug_str	00000000 
0000e002 l       .debug_str	00000000 
0000e014 l       .debug_str	00000000 
0000e0a4 l       .debug_str	00000000 
0000e0c6 l       .debug_str	00000000 
0000e0e5 l       .debug_str	00000000 
0000e136 l       .debug_str	00000000 
00003285 l       .debug_str	00000000 
0000e183 l       .debug_str	00000000 
0000e18f l       .debug_str	00000000 
0000e199 l       .debug_str	00000000 
0000e1a4 l       .debug_str	00000000 
0000e1cb l       .debug_str	00000000 
0000e1d8 l       .debug_str	00000000 
0000e1ed l       .debug_str	00000000 
0000e1fc l       .debug_str	00000000 
0000e209 l       .debug_str	00000000 
0000e216 l       .debug_str	00000000 
0000e263 l       .debug_str	00000000 
0000e26d l       .debug_str	00000000 
0000e281 l       .debug_str	00000000 
0000e292 l       .debug_str	00000000 
0000e29b l       .debug_str	00000000 
0000e2ad l       .debug_str	00000000 
0000e2b8 l       .debug_str	00000000 
0000e2c6 l       .debug_str	00000000 
0000e2cd l       .debug_str	00000000 
0000e2d7 l       .debug_str	00000000 
0000e2e5 l       .debug_str	00000000 
0000e2ef l       .debug_str	00000000 
0000e2fc l       .debug_str	00000000 
0000e310 l       .debug_str	00000000 
0000e326 l       .debug_str	00000000 
0000e339 l       .debug_str	00000000 
000178c3 l       .debug_str	00000000 
0000e344 l       .debug_str	00000000 
0000e357 l       .debug_str	00000000 
0000e361 l       .debug_str	00000000 
0000e3b6 l       .debug_str	00000000 
0000e3c4 l       .debug_str	00000000 
0000e3cb l       .debug_str	00000000 
0000e3d3 l       .debug_str	00000000 
0000e3e8 l       .debug_str	00000000 
0000e3ff l       .debug_str	00000000 
0000e424 l       .debug_str	00000000 
0000e433 l       .debug_str	00000000 
0000e450 l       .debug_str	00000000 
0000e45a l       .debug_str	00000000 
0000e468 l       .debug_str	00000000 
0000e47c l       .debug_str	00000000 
0000e48d l       .debug_str	00000000 
0000e49a l       .debug_str	00000000 
0000e49f l       .debug_str	00000000 
0000e4aa l       .debug_str	00000000 
0000e4b3 l       .debug_str	00000000 
0000e4d6 l       .debug_str	00000000 
0000e4f9 l       .debug_str	00000000 
0000e51f l       .debug_str	00000000 
0000e545 l       .debug_str	00000000 
0000e56c l       .debug_str	00000000 
0000e593 l       .debug_str	00000000 
0000e5bd l       .debug_str	00000000 
000023d5 l       .debug_str	00000000 
0000e5e7 l       .debug_str	00000000 
0000e613 l       .debug_str	00000000 
0000e61e l       .debug_str	00000000 
0000e629 l       .debug_str	00000000 
0000b22d l       .debug_str	00000000 
0000e636 l       .debug_str	00000000 
0000e64a l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
0000e66a l       .debug_str	00000000 
0000e674 l       .debug_str	00000000 
0000e67f l       .debug_str	00000000 
0000e68a l       .debug_str	00000000 
0000e695 l       .debug_str	00000000 
0000e6a0 l       .debug_str	00000000 
0000e351 l       .debug_str	00000000 
0000e6ac l       .debug_str	00000000 
0000e6af l       .debug_str	00000000 
0000e6c3 l       .debug_str	00000000 
0000e6cc l       .debug_str	00000000 
0000e6d5 l       .debug_str	00000000 
0000e6de l       .debug_str	00000000 
0000e6e9 l       .debug_str	00000000 
0000e6f2 l       .debug_str	00000000 
0000e6fb l       .debug_str	00000000 
00009b7d l       .debug_str	00000000 
0000e706 l       .debug_str	00000000 
0000e721 l       .debug_str	00000000 
0000e78a l       .debug_str	00000000 
0000e7f7 l       .debug_str	00000000 
0000e860 l       .debug_str	00000000 
0000e868 l       .debug_str	00000000 
0000e870 l       .debug_str	00000000 
0000e879 l       .debug_str	00000000 
0000e8d2 l       .debug_str	00000000 
0000e90f l       .debug_str	00000000 
0000e96c l       .debug_str	00000000 
0000ea64 l       .debug_str	00000000 
0000eab3 l       .debug_str	00000000 
0000eaec l       .debug_str	00000000 
0000eb21 l       .debug_str	00000000 
0000eb2a l       .debug_str	00000000 
0000649c l       .debug_str	00000000 
0000eb57 l       .debug_str	00000000 
0000eb5f l       .debug_str	00000000 
0000eb7c l       .debug_str	00000000 
0000eba4 l       .debug_str	00000000 
0000ebc1 l       .debug_str	00000000 
0000ebcb l       .debug_str	00000000 
0000ec00 l       .debug_str	00000000 
0000ec0d l       .debug_str	00000000 
0000ec40 l       .debug_str	00000000 
0000631c l       .debug_str	00000000 
0000eca4 l       .debug_str	00000000 
0000ecad l       .debug_str	00000000 
0000ecde l       .debug_str	00000000 
0000ecf8 l       .debug_str	00000000 
0000ed16 l       .debug_str	00000000 
0000edc2 l       .debug_str	00000000 
0000edfd l       .debug_str	00000000 
0000ee06 l       .debug_str	00000000 
0000644b l       .debug_str	00000000 
0000ee3b l       .debug_str	00000000 
0000eeb6 l       .debug_str	00000000 
0000ef2d l       .debug_str	00000000 
0000ef43 l       .debug_str	00000000 
0000ef7e l       .debug_str	00000000 
0000ef88 l       .debug_str	00000000 
0000ef97 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd1 l       .debug_str	00000000 
0000eff3 l       .debug_str	00000000 
0000f01a l       .debug_str	00000000 
0000f024 l       .debug_str	00000000 
0000f046 l       .debug_str	00000000 
0000f07c l       .debug_str	00000000 
0000f085 l       .debug_str	00000000 
0000f0ad l       .debug_str	00000000 
0000f0b8 l       .debug_str	00000000 
00009ba8 l       .debug_ranges	00000000 
00000f08 l       .debug_ranges	00000000 
00000f20 l       .debug_ranges	00000000 
00000f38 l       .debug_ranges	00000000 
00000f50 l       .debug_ranges	00000000 
00000f68 l       .debug_ranges	00000000 
00000f80 l       .debug_ranges	00000000 
00000f98 l       .debug_ranges	00000000 
00000fb8 l       .debug_ranges	00000000 
00000fd8 l       .debug_ranges	00000000 
00000ff0 l       .debug_ranges	00000000 
00001008 l       .debug_ranges	00000000 
00001020 l       .debug_ranges	00000000 
00001038 l       .debug_ranges	00000000 
00001050 l       .debug_ranges	00000000 
00001068 l       .debug_ranges	00000000 
00001080 l       .debug_ranges	00000000 
00001098 l       .debug_ranges	00000000 
000010b0 l       .debug_ranges	00000000 
000010d0 l       .debug_ranges	00000000 
000010e8 l       .debug_ranges	00000000 
00001108 l       .debug_ranges	00000000 
00001120 l       .debug_ranges	00000000 
00001138 l       .debug_ranges	00000000 
00001150 l       .debug_ranges	00000000 
00001168 l       .debug_ranges	00000000 
00001198 l       .debug_ranges	00000000 
000011b8 l       .debug_ranges	00000000 
000011d0 l       .debug_ranges	00000000 
000011e8 l       .debug_ranges	00000000 
00001200 l       .debug_ranges	00000000 
00001218 l       .debug_ranges	00000000 
00001230 l       .debug_ranges	00000000 
00001248 l       .debug_ranges	00000000 
00001260 l       .debug_ranges	00000000 
00001278 l       .debug_ranges	00000000 
00001290 l       .debug_ranges	00000000 
000012a8 l       .debug_ranges	00000000 
000012c0 l       .debug_ranges	00000000 
000012d8 l       .debug_ranges	00000000 
000012f0 l       .debug_ranges	00000000 
00001308 l       .debug_ranges	00000000 
00001320 l       .debug_ranges	00000000 
00001338 l       .debug_ranges	00000000 
00001358 l       .debug_ranges	00000000 
00001370 l       .debug_ranges	00000000 
00001388 l       .debug_ranges	00000000 
000013a0 l       .debug_ranges	00000000 
000013b8 l       .debug_ranges	00000000 
000013d0 l       .debug_ranges	00000000 
000013e8 l       .debug_ranges	00000000 
00001400 l       .debug_ranges	00000000 
00001418 l       .debug_ranges	00000000 
00001430 l       .debug_ranges	00000000 
00001448 l       .debug_ranges	00000000 
00001460 l       .debug_ranges	00000000 
00001480 l       .debug_ranges	00000000 
00001498 l       .debug_ranges	00000000 
000014b0 l       .debug_ranges	00000000 
000014c8 l       .debug_ranges	00000000 
000014e0 l       .debug_ranges	00000000 
000014f8 l       .debug_ranges	00000000 
00001510 l       .debug_ranges	00000000 
00001528 l       .debug_ranges	00000000 
00001540 l       .debug_ranges	00000000 
00001558 l       .debug_ranges	00000000 
00001570 l       .debug_ranges	00000000 
00001588 l       .debug_ranges	00000000 
000015a0 l       .debug_ranges	00000000 
000015b8 l       .debug_ranges	00000000 
000015d0 l       .debug_ranges	00000000 
000015e8 l       .debug_ranges	00000000 
00001600 l       .debug_ranges	00000000 
00001618 l       .debug_ranges	00000000 
00001630 l       .debug_ranges	00000000 
00001648 l       .debug_ranges	00000000 
00001660 l       .debug_ranges	00000000 
00001678 l       .debug_ranges	00000000 
00001690 l       .debug_ranges	00000000 
000016a8 l       .debug_ranges	00000000 
000016c0 l       .debug_ranges	00000000 
000016d8 l       .debug_ranges	00000000 
000016f8 l       .debug_ranges	00000000 
00001718 l       .debug_ranges	00000000 
00001730 l       .debug_ranges	00000000 
00001748 l       .debug_ranges	00000000 
00001760 l       .debug_ranges	00000000 
00001778 l       .debug_ranges	00000000 
00001790 l       .debug_ranges	00000000 
000017a8 l       .debug_ranges	00000000 
000017c0 l       .debug_ranges	00000000 
000017d8 l       .debug_ranges	00000000 
000017f8 l       .debug_ranges	00000000 
00001810 l       .debug_ranges	00000000 
00001828 l       .debug_ranges	00000000 
00001840 l       .debug_ranges	00000000 
00001858 l       .debug_ranges	00000000 
00001870 l       .debug_ranges	00000000 
00001888 l       .debug_ranges	00000000 
000018a8 l       .debug_ranges	00000000 
000018c8 l       .debug_ranges	00000000 
000018e0 l       .debug_ranges	00000000 
000018f8 l       .debug_ranges	00000000 
00001910 l       .debug_ranges	00000000 
00001928 l       .debug_ranges	00000000 
00001948 l       .debug_ranges	00000000 
00001960 l       .debug_ranges	00000000 
00001988 l       .debug_ranges	00000000 
000019a8 l       .debug_ranges	00000000 
000019c8 l       .debug_ranges	00000000 
000019e8 l       .debug_ranges	00000000 
00001a00 l       .debug_ranges	00000000 
00001a28 l       .debug_ranges	00000000 
00001a48 l       .debug_ranges	00000000 
00001a68 l       .debug_ranges	00000000 
00001a88 l       .debug_ranges	00000000 
00001aa0 l       .debug_ranges	00000000 
00001ab8 l       .debug_ranges	00000000 
00001ad0 l       .debug_ranges	00000000 
00001ae8 l       .debug_ranges	00000000 
00001b00 l       .debug_ranges	00000000 
00001b18 l       .debug_ranges	00000000 
00001b30 l       .debug_ranges	00000000 
00001b50 l       .debug_ranges	00000000 
00001b68 l       .debug_ranges	00000000 
00001b80 l       .debug_ranges	00000000 
00001b98 l       .debug_ranges	00000000 
00001bb0 l       .debug_ranges	00000000 
00001bc8 l       .debug_ranges	00000000 
00001be0 l       .debug_ranges	00000000 
00001bf8 l       .debug_ranges	00000000 
00001c10 l       .debug_ranges	00000000 
00001c28 l       .debug_ranges	00000000 
00001c40 l       .debug_ranges	00000000 
00001c58 l       .debug_ranges	00000000 
00001c70 l       .debug_ranges	00000000 
00001c88 l       .debug_ranges	00000000 
00001ca0 l       .debug_ranges	00000000 
00001cb8 l       .debug_ranges	00000000 
00001cd0 l       .debug_ranges	00000000 
00001ce8 l       .debug_ranges	00000000 
00001d08 l       .debug_ranges	00000000 
00001d28 l       .debug_ranges	00000000 
00001d40 l       .debug_ranges	00000000 
00001d58 l       .debug_ranges	00000000 
00001d70 l       .debug_ranges	00000000 
00001d88 l       .debug_ranges	00000000 
00001da8 l       .debug_ranges	00000000 
00001dd0 l       .debug_ranges	00000000 
00001de8 l       .debug_ranges	00000000 
00001e00 l       .debug_ranges	00000000 
00001e18 l       .debug_ranges	00000000 
00001e30 l       .debug_ranges	00000000 
00001e48 l       .debug_ranges	00000000 
00001e60 l       .debug_ranges	00000000 
00001e78 l       .debug_ranges	00000000 
00001e90 l       .debug_ranges	00000000 
00001ea8 l       .debug_ranges	00000000 
00001ec0 l       .debug_ranges	00000000 
00001ee0 l       .debug_ranges	00000000 
00001ef8 l       .debug_ranges	00000000 
00001f10 l       .debug_ranges	00000000 
00001f28 l       .debug_ranges	00000000 
00001f40 l       .debug_ranges	00000000 
00001f58 l       .debug_ranges	00000000 
00001f70 l       .debug_ranges	00000000 
00001f88 l       .debug_ranges	00000000 
00001fa0 l       .debug_ranges	00000000 
00001fb8 l       .debug_ranges	00000000 
00001fd0 l       .debug_ranges	00000000 
00001ff0 l       .debug_ranges	00000000 
00002008 l       .debug_ranges	00000000 
00002020 l       .debug_ranges	00000000 
00002038 l       .debug_ranges	00000000 
00002050 l       .debug_ranges	00000000 
00002068 l       .debug_ranges	00000000 
00002080 l       .debug_ranges	00000000 
00002098 l       .debug_ranges	00000000 
000020b0 l       .debug_ranges	00000000 
000020c8 l       .debug_ranges	00000000 
000020e0 l       .debug_ranges	00000000 
000020f8 l       .debug_ranges	00000000 
00002118 l       .debug_ranges	00000000 
00002130 l       .debug_ranges	00000000 
00002148 l       .debug_ranges	00000000 
00002160 l       .debug_ranges	00000000 
00002178 l       .debug_ranges	00000000 
00002190 l       .debug_ranges	00000000 
000021a8 l       .debug_ranges	00000000 
000021c0 l       .debug_ranges	00000000 
000021d8 l       .debug_ranges	00000000 
000021f0 l       .debug_ranges	00000000 
00002208 l       .debug_ranges	00000000 
00002220 l       .debug_ranges	00000000 
00002238 l       .debug_ranges	00000000 
00002250 l       .debug_ranges	00000000 
00002268 l       .debug_ranges	00000000 
00002280 l       .debug_ranges	00000000 
00002298 l       .debug_ranges	00000000 
000022b0 l       .debug_ranges	00000000 
000022c8 l       .debug_ranges	00000000 
000022e0 l       .debug_ranges	00000000 
000022f8 l       .debug_ranges	00000000 
00002310 l       .debug_ranges	00000000 
00002328 l       .debug_ranges	00000000 
00002340 l       .debug_ranges	00000000 
00002358 l       .debug_ranges	00000000 
00002378 l       .debug_ranges	00000000 
00002390 l       .debug_ranges	00000000 
000023b0 l       .debug_ranges	00000000 
000023d0 l       .debug_ranges	00000000 
000023e8 l       .debug_ranges	00000000 
00002408 l       .debug_ranges	00000000 
00002428 l       .debug_ranges	00000000 
00002458 l       .debug_ranges	00000000 
00002478 l       .debug_ranges	00000000 
000024b8 l       .debug_ranges	00000000 
000024d0 l       .debug_ranges	00000000 
000024e8 l       .debug_ranges	00000000 
00002500 l       .debug_ranges	00000000 
00002540 l       .debug_ranges	00000000 
00002558 l       .debug_ranges	00000000 
00002570 l       .debug_ranges	00000000 
00002588 l       .debug_ranges	00000000 
000025b8 l       .debug_ranges	00000000 
000025e0 l       .debug_ranges	00000000 
000025f8 l       .debug_ranges	00000000 
00002640 l       .debug_ranges	00000000 
00002680 l       .debug_ranges	00000000 
000026c0 l       .debug_ranges	00000000 
000026d8 l       .debug_ranges	00000000 
000026f0 l       .debug_ranges	00000000 
00002708 l       .debug_ranges	00000000 
00002738 l       .debug_ranges	00000000 
00002768 l       .debug_ranges	00000000 
00002780 l       .debug_ranges	00000000 
00002798 l       .debug_ranges	00000000 
000027b0 l       .debug_ranges	00000000 
000027c8 l       .debug_ranges	00000000 
000027e0 l       .debug_ranges	00000000 
000027f8 l       .debug_ranges	00000000 
00002828 l       .debug_ranges	00000000 
00002840 l       .debug_ranges	00000000 
00002858 l       .debug_ranges	00000000 
00002870 l       .debug_ranges	00000000 
00002888 l       .debug_ranges	00000000 
000028a0 l       .debug_ranges	00000000 
000028b8 l       .debug_ranges	00000000 
000028d0 l       .debug_ranges	00000000 
000028e8 l       .debug_ranges	00000000 
00002900 l       .debug_ranges	00000000 
00002918 l       .debug_ranges	00000000 
00002930 l       .debug_ranges	00000000 
00002948 l       .debug_ranges	00000000 
00002960 l       .debug_ranges	00000000 
00002978 l       .debug_ranges	00000000 
00002990 l       .debug_ranges	00000000 
000029a8 l       .debug_ranges	00000000 
000029c0 l       .debug_ranges	00000000 
000029d8 l       .debug_ranges	00000000 
000029f0 l       .debug_ranges	00000000 
00002a08 l       .debug_ranges	00000000 
00002a30 l       .debug_ranges	00000000 
00002a58 l       .debug_ranges	00000000 
00002a70 l       .debug_ranges	00000000 
00002a88 l       .debug_ranges	00000000 
00002aa0 l       .debug_ranges	00000000 
00002ab8 l       .debug_ranges	00000000 
00002ad0 l       .debug_ranges	00000000 
00002ae8 l       .debug_ranges	00000000 
00002b00 l       .debug_ranges	00000000 
00002b18 l       .debug_ranges	00000000 
00002b30 l       .debug_ranges	00000000 
00002b48 l       .debug_ranges	00000000 
00002b68 l       .debug_ranges	00000000 
00002b80 l       .debug_ranges	00000000 
00002b98 l       .debug_ranges	00000000 
00002bb0 l       .debug_ranges	00000000 
00002bc8 l       .debug_ranges	00000000 
00002be0 l       .debug_ranges	00000000 
00002bf8 l       .debug_ranges	00000000 
00002c10 l       .debug_ranges	00000000 
00002c28 l       .debug_ranges	00000000 
00002c40 l       .debug_ranges	00000000 
00002c58 l       .debug_ranges	00000000 
00002c70 l       .debug_ranges	00000000 
00002c88 l       .debug_ranges	00000000 
00002ca0 l       .debug_ranges	00000000 
00002cb8 l       .debug_ranges	00000000 
00002cd8 l       .debug_ranges	00000000 
00002cf0 l       .debug_ranges	00000000 
00002d08 l       .debug_ranges	00000000 
00002d20 l       .debug_ranges	00000000 
00002d38 l       .debug_ranges	00000000 
00002d50 l       .debug_ranges	00000000 
00002d68 l       .debug_ranges	00000000 
00002d80 l       .debug_ranges	00000000 
00002d98 l       .debug_ranges	00000000 
00002db0 l       .debug_ranges	00000000 
00002dc8 l       .debug_ranges	00000000 
00002de0 l       .debug_ranges	00000000 
00002df8 l       .debug_ranges	00000000 
00002e10 l       .debug_ranges	00000000 
00002e28 l       .debug_ranges	00000000 
00002e40 l       .debug_ranges	00000000 
00002e58 l       .debug_ranges	00000000 
00002e70 l       .debug_ranges	00000000 
00002e88 l       .debug_ranges	00000000 
00002ea0 l       .debug_ranges	00000000 
00002eb8 l       .debug_ranges	00000000 
00002ed0 l       .debug_ranges	00000000 
00002ee8 l       .debug_ranges	00000000 
00002f00 l       .debug_ranges	00000000 
00002f18 l       .debug_ranges	00000000 
00002f30 l       .debug_ranges	00000000 
00002f48 l       .debug_ranges	00000000 
00002f60 l       .debug_ranges	00000000 
00002f78 l       .debug_ranges	00000000 
00002f90 l       .debug_ranges	00000000 
00002fa8 l       .debug_ranges	00000000 
00002fc0 l       .debug_ranges	00000000 
00002fd8 l       .debug_ranges	00000000 
00002ff0 l       .debug_ranges	00000000 
00003008 l       .debug_ranges	00000000 
00003020 l       .debug_ranges	00000000 
00003038 l       .debug_ranges	00000000 
00003050 l       .debug_ranges	00000000 
00003068 l       .debug_ranges	00000000 
00003080 l       .debug_ranges	00000000 
00003098 l       .debug_ranges	00000000 
000030b0 l       .debug_ranges	00000000 
000030c8 l       .debug_ranges	00000000 
000030e0 l       .debug_ranges	00000000 
000030f8 l       .debug_ranges	00000000 
00003110 l       .debug_ranges	00000000 
00003128 l       .debug_ranges	00000000 
00003140 l       .debug_ranges	00000000 
00003158 l       .debug_ranges	00000000 
00003170 l       .debug_ranges	00000000 
00003188 l       .debug_ranges	00000000 
000031c0 l       .debug_ranges	00000000 
000031f8 l       .debug_ranges	00000000 
00003230 l       .debug_ranges	00000000 
00003248 l       .debug_ranges	00000000 
00003260 l       .debug_ranges	00000000 
00003278 l       .debug_ranges	00000000 
00003290 l       .debug_ranges	00000000 
000032a8 l       .debug_ranges	00000000 
000032c0 l       .debug_ranges	00000000 
000032d8 l       .debug_ranges	00000000 
000032f8 l       .debug_ranges	00000000 
00003318 l       .debug_ranges	00000000 
00003338 l       .debug_ranges	00000000 
00003350 l       .debug_ranges	00000000 
00003368 l       .debug_ranges	00000000 
00003380 l       .debug_ranges	00000000 
00003398 l       .debug_ranges	00000000 
000033b0 l       .debug_ranges	00000000 
000033c8 l       .debug_ranges	00000000 
000033e0 l       .debug_ranges	00000000 
000033f8 l       .debug_ranges	00000000 
00003420 l       .debug_ranges	00000000 
00003438 l       .debug_ranges	00000000 
00003450 l       .debug_ranges	00000000 
00003468 l       .debug_ranges	00000000 
00003480 l       .debug_ranges	00000000 
00003498 l       .debug_ranges	00000000 
000034b0 l       .debug_ranges	00000000 
000034c8 l       .debug_ranges	00000000 
000034e0 l       .debug_ranges	00000000 
000034f8 l       .debug_ranges	00000000 
00003510 l       .debug_ranges	00000000 
00003528 l       .debug_ranges	00000000 
00003540 l       .debug_ranges	00000000 
00003558 l       .debug_ranges	00000000 
00003570 l       .debug_ranges	00000000 
00003588 l       .debug_ranges	00000000 
000035a0 l       .debug_ranges	00000000 
000035b8 l       .debug_ranges	00000000 
000035d0 l       .debug_ranges	00000000 
000035e8 l       .debug_ranges	00000000 
00003600 l       .debug_ranges	00000000 
00003628 l       .debug_ranges	00000000 
00003640 l       .debug_ranges	00000000 
00003658 l       .debug_ranges	00000000 
00003670 l       .debug_ranges	00000000 
00003688 l       .debug_ranges	00000000 
000036a0 l       .debug_ranges	00000000 
000036b8 l       .debug_ranges	00000000 
000036d0 l       .debug_ranges	00000000 
000036e8 l       .debug_ranges	00000000 
00003700 l       .debug_ranges	00000000 
00003718 l       .debug_ranges	00000000 
00003730 l       .debug_ranges	00000000 
00003748 l       .debug_ranges	00000000 
00003760 l       .debug_ranges	00000000 
00003778 l       .debug_ranges	00000000 
00003790 l       .debug_ranges	00000000 
000037a8 l       .debug_ranges	00000000 
000037c0 l       .debug_ranges	00000000 
000037d8 l       .debug_ranges	00000000 
00003800 l       .debug_ranges	00000000 
00003828 l       .debug_ranges	00000000 
00003850 l       .debug_ranges	00000000 
00003878 l       .debug_ranges	00000000 
00003890 l       .debug_ranges	00000000 
000038b0 l       .debug_ranges	00000000 
000038d0 l       .debug_ranges	00000000 
000038e8 l       .debug_ranges	00000000 
00003900 l       .debug_ranges	00000000 
00003918 l       .debug_ranges	00000000 
00003930 l       .debug_ranges	00000000 
00003948 l       .debug_ranges	00000000 
00003960 l       .debug_ranges	00000000 
00003978 l       .debug_ranges	00000000 
00003990 l       .debug_ranges	00000000 
000039a8 l       .debug_ranges	00000000 
000039c0 l       .debug_ranges	00000000 
000039d8 l       .debug_ranges	00000000 
000039f8 l       .debug_ranges	00000000 
00003a10 l       .debug_ranges	00000000 
00003a28 l       .debug_ranges	00000000 
00003a50 l       .debug_ranges	00000000 
00003a78 l       .debug_ranges	00000000 
00003a90 l       .debug_ranges	00000000 
00003aa8 l       .debug_ranges	00000000 
00003ac0 l       .debug_ranges	00000000 
00003ad8 l       .debug_ranges	00000000 
00003af0 l       .debug_ranges	00000000 
00003b08 l       .debug_ranges	00000000 
00003b28 l       .debug_ranges	00000000 
00003b50 l       .debug_ranges	00000000 
00003b78 l       .debug_ranges	00000000 
00003ba0 l       .debug_ranges	00000000 
00003bb8 l       .debug_ranges	00000000 
00003bd0 l       .debug_ranges	00000000 
00003be8 l       .debug_ranges	00000000 
00003c00 l       .debug_ranges	00000000 
00003c18 l       .debug_ranges	00000000 
00003c30 l       .debug_ranges	00000000 
00003c50 l       .debug_ranges	00000000 
00003c68 l       .debug_ranges	00000000 
00003c80 l       .debug_ranges	00000000 
00003c98 l       .debug_ranges	00000000 
00003cc0 l       .debug_ranges	00000000 
00003ce8 l       .debug_ranges	00000000 
00003d10 l       .debug_ranges	00000000 
00003d30 l       .debug_ranges	00000000 
00003d48 l       .debug_ranges	00000000 
00003d60 l       .debug_ranges	00000000 
00003d78 l       .debug_ranges	00000000 
00003d90 l       .debug_ranges	00000000 
00003da8 l       .debug_ranges	00000000 
00003dc8 l       .debug_ranges	00000000 
00003de0 l       .debug_ranges	00000000 
00003e00 l       .debug_ranges	00000000 
00003e20 l       .debug_ranges	00000000 
00003e40 l       .debug_ranges	00000000 
00003e68 l       .debug_ranges	00000000 
00003e90 l       .debug_ranges	00000000 
00003eb8 l       .debug_ranges	00000000 
00003ed8 l       .debug_ranges	00000000 
00003ef8 l       .debug_ranges	00000000 
00003f18 l       .debug_ranges	00000000 
00003f38 l       .debug_ranges	00000000 
00003f50 l       .debug_ranges	00000000 
00003f68 l       .debug_ranges	00000000 
00003f80 l       .debug_ranges	00000000 
00003f98 l       .debug_ranges	00000000 
00003fb8 l       .debug_ranges	00000000 
00003fd0 l       .debug_ranges	00000000 
00003ff0 l       .debug_ranges	00000000 
00004010 l       .debug_ranges	00000000 
00004030 l       .debug_ranges	00000000 
00004058 l       .debug_ranges	00000000 
00004080 l       .debug_ranges	00000000 
000040a8 l       .debug_ranges	00000000 
000040c8 l       .debug_ranges	00000000 
000040e8 l       .debug_ranges	00000000 
00004108 l       .debug_ranges	00000000 
00004128 l       .debug_ranges	00000000 
00004140 l       .debug_ranges	00000000 
00004158 l       .debug_ranges	00000000 
00004170 l       .debug_ranges	00000000 
00004188 l       .debug_ranges	00000000 
000041a8 l       .debug_ranges	00000000 
000041c0 l       .debug_ranges	00000000 
000041d8 l       .debug_ranges	00000000 
000041f8 l       .debug_ranges	00000000 
00004218 l       .debug_ranges	00000000 
00004230 l       .debug_ranges	00000000 
00004248 l       .debug_ranges	00000000 
00004288 l       .debug_ranges	00000000 
000042a0 l       .debug_ranges	00000000 
000042b8 l       .debug_ranges	00000000 
000042d0 l       .debug_ranges	00000000 
000042e8 l       .debug_ranges	00000000 
00004300 l       .debug_ranges	00000000 
00004318 l       .debug_ranges	00000000 
00004338 l       .debug_ranges	00000000 
00004350 l       .debug_ranges	00000000 
00004368 l       .debug_ranges	00000000 
00004380 l       .debug_ranges	00000000 
00004398 l       .debug_ranges	00000000 
000043b8 l       .debug_ranges	00000000 
000043d0 l       .debug_ranges	00000000 
000043f0 l       .debug_ranges	00000000 
00004410 l       .debug_ranges	00000000 
00004430 l       .debug_ranges	00000000 
00004470 l       .debug_ranges	00000000 
00004488 l       .debug_ranges	00000000 
000044a0 l       .debug_ranges	00000000 
000044b8 l       .debug_ranges	00000000 
000044d0 l       .debug_ranges	00000000 
000044e8 l       .debug_ranges	00000000 
00004500 l       .debug_ranges	00000000 
00004520 l       .debug_ranges	00000000 
00004538 l       .debug_ranges	00000000 
00004550 l       .debug_ranges	00000000 
00004568 l       .debug_ranges	00000000 
00004580 l       .debug_ranges	00000000 
000045a0 l       .debug_ranges	00000000 
000045b8 l       .debug_ranges	00000000 
000045d8 l       .debug_ranges	00000000 
000045f8 l       .debug_ranges	00000000 
00004618 l       .debug_ranges	00000000 
00004658 l       .debug_ranges	00000000 
00004670 l       .debug_ranges	00000000 
00004688 l       .debug_ranges	00000000 
000046a0 l       .debug_ranges	00000000 
000046b8 l       .debug_ranges	00000000 
000046d0 l       .debug_ranges	00000000 
000046e8 l       .debug_ranges	00000000 
00004700 l       .debug_ranges	00000000 
00004718 l       .debug_ranges	00000000 
00004730 l       .debug_ranges	00000000 
00004748 l       .debug_ranges	00000000 
00004760 l       .debug_ranges	00000000 
000047a0 l       .debug_ranges	00000000 
000047b8 l       .debug_ranges	00000000 
000047d0 l       .debug_ranges	00000000 
000047e8 l       .debug_ranges	00000000 
00004800 l       .debug_ranges	00000000 
00004818 l       .debug_ranges	00000000 
00004830 l       .debug_ranges	00000000 
00004848 l       .debug_ranges	00000000 
00004860 l       .debug_ranges	00000000 
00004878 l       .debug_ranges	00000000 
00004890 l       .debug_ranges	00000000 
000048b8 l       .debug_ranges	00000000 
000048d0 l       .debug_ranges	00000000 
000048f0 l       .debug_ranges	00000000 
00004910 l       .debug_ranges	00000000 
00004930 l       .debug_ranges	00000000 
00004970 l       .debug_ranges	00000000 
00004988 l       .debug_ranges	00000000 
000049a0 l       .debug_ranges	00000000 
000049b8 l       .debug_ranges	00000000 
000049d0 l       .debug_ranges	00000000 
000049e8 l       .debug_ranges	00000000 
00004a00 l       .debug_ranges	00000000 
00004a18 l       .debug_ranges	00000000 
00004a30 l       .debug_ranges	00000000 
00004a48 l       .debug_ranges	00000000 
00004a68 l       .debug_ranges	00000000 
00004aa8 l       .debug_ranges	00000000 
00004ac0 l       .debug_ranges	00000000 
00004ad8 l       .debug_ranges	00000000 
00004af0 l       .debug_ranges	00000000 
00004b08 l       .debug_ranges	00000000 
00004b20 l       .debug_ranges	00000000 
00004b38 l       .debug_ranges	00000000 
00004b50 l       .debug_ranges	00000000 
00004b68 l       .debug_ranges	00000000 
00004b80 l       .debug_ranges	00000000 
00004b98 l       .debug_ranges	00000000 
00004bd8 l       .debug_ranges	00000000 
00004bf0 l       .debug_ranges	00000000 
00004c08 l       .debug_ranges	00000000 
00004c20 l       .debug_ranges	00000000 
00004c38 l       .debug_ranges	00000000 
00004c50 l       .debug_ranges	00000000 
00004c70 l       .debug_ranges	00000000 
00004c88 l       .debug_ranges	00000000 
00004ca8 l       .debug_ranges	00000000 
00004cc8 l       .debug_ranges	00000000 
00004ce8 l       .debug_ranges	00000000 
00004d28 l       .debug_ranges	00000000 
00004d40 l       .debug_ranges	00000000 
00004d58 l       .debug_ranges	00000000 
00004d70 l       .debug_ranges	00000000 
00004d88 l       .debug_ranges	00000000 
00004da0 l       .debug_ranges	00000000 
00004db8 l       .debug_ranges	00000000 
00004dd0 l       .debug_ranges	00000000 
00004de8 l       .debug_ranges	00000000 
00004e00 l       .debug_ranges	00000000 
00004e20 l       .debug_ranges	00000000 
00004e40 l       .debug_ranges	00000000 
00004e58 l       .debug_ranges	00000000 
00004e70 l       .debug_ranges	00000000 
00004e88 l       .debug_ranges	00000000 
00004ea0 l       .debug_ranges	00000000 
00004eb8 l       .debug_ranges	00000000 
00004ed0 l       .debug_ranges	00000000 
00004ee8 l       .debug_ranges	00000000 
00004f00 l       .debug_ranges	00000000 
00004f18 l       .debug_ranges	00000000 
00004f30 l       .debug_ranges	00000000 
00004f48 l       .debug_ranges	00000000 
00004f60 l       .debug_ranges	00000000 
00004f80 l       .debug_ranges	00000000 
00004fa0 l       .debug_ranges	00000000 
00004fc0 l       .debug_ranges	00000000 
00004fd8 l       .debug_ranges	00000000 
00004ff0 l       .debug_ranges	00000000 
00005010 l       .debug_ranges	00000000 
00005030 l       .debug_ranges	00000000 
00005050 l       .debug_ranges	00000000 
00005080 l       .debug_ranges	00000000 
000050b0 l       .debug_ranges	00000000 
000050e0 l       .debug_ranges	00000000 
00005110 l       .debug_ranges	00000000 
00005138 l       .debug_ranges	00000000 
00005150 l       .debug_ranges	00000000 
00005168 l       .debug_ranges	00000000 
00005180 l       .debug_ranges	00000000 
00005198 l       .debug_ranges	00000000 
000051b0 l       .debug_ranges	00000000 
000051c8 l       .debug_ranges	00000000 
000051e0 l       .debug_ranges	00000000 
000051f8 l       .debug_ranges	00000000 
00005210 l       .debug_ranges	00000000 
00005248 l       .debug_ranges	00000000 
00005270 l       .debug_ranges	00000000 
00005288 l       .debug_ranges	00000000 
000052a0 l       .debug_ranges	00000000 
000052c0 l       .debug_ranges	00000000 
000052d8 l       .debug_ranges	00000000 
000052f0 l       .debug_ranges	00000000 
00005308 l       .debug_ranges	00000000 
00005320 l       .debug_ranges	00000000 
00005338 l       .debug_ranges	00000000 
00005350 l       .debug_ranges	00000000 
00005368 l       .debug_ranges	00000000 
00005388 l       .debug_ranges	00000000 
000053a8 l       .debug_ranges	00000000 
000053c8 l       .debug_ranges	00000000 
000053e8 l       .debug_ranges	00000000 
00005400 l       .debug_ranges	00000000 
00005420 l       .debug_ranges	00000000 
00005440 l       .debug_ranges	00000000 
00005458 l       .debug_ranges	00000000 
00005470 l       .debug_ranges	00000000 
00005488 l       .debug_ranges	00000000 
000054a0 l       .debug_ranges	00000000 
000054b8 l       .debug_ranges	00000000 
000054d0 l       .debug_ranges	00000000 
000054e8 l       .debug_ranges	00000000 
00005500 l       .debug_ranges	00000000 
00005518 l       .debug_ranges	00000000 
00005530 l       .debug_ranges	00000000 
00005548 l       .debug_ranges	00000000 
00005560 l       .debug_ranges	00000000 
00005578 l       .debug_ranges	00000000 
00005590 l       .debug_ranges	00000000 
000055a8 l       .debug_ranges	00000000 
000055c0 l       .debug_ranges	00000000 
000055e0 l       .debug_ranges	00000000 
000055f8 l       .debug_ranges	00000000 
00005610 l       .debug_ranges	00000000 
00005628 l       .debug_ranges	00000000 
00005640 l       .debug_ranges	00000000 
00005658 l       .debug_ranges	00000000 
00005670 l       .debug_ranges	00000000 
00005688 l       .debug_ranges	00000000 
000056a0 l       .debug_ranges	00000000 
000056b8 l       .debug_ranges	00000000 
000056d0 l       .debug_ranges	00000000 
000056e8 l       .debug_ranges	00000000 
00005700 l       .debug_ranges	00000000 
00005718 l       .debug_ranges	00000000 
00005740 l       .debug_ranges	00000000 
00005760 l       .debug_ranges	00000000 
00005778 l       .debug_ranges	00000000 
00005790 l       .debug_ranges	00000000 
000057a8 l       .debug_ranges	00000000 
000057d8 l       .debug_ranges	00000000 
00005800 l       .debug_ranges	00000000 
00005818 l       .debug_ranges	00000000 
00005830 l       .debug_ranges	00000000 
00005848 l       .debug_ranges	00000000 
00005860 l       .debug_ranges	00000000 
00005878 l       .debug_ranges	00000000 
000058a0 l       .debug_ranges	00000000 
000058c0 l       .debug_ranges	00000000 
000058d8 l       .debug_ranges	00000000 
000058f0 l       .debug_ranges	00000000 
00005908 l       .debug_ranges	00000000 
00005920 l       .debug_ranges	00000000 
00005950 l       .debug_ranges	00000000 
00005978 l       .debug_ranges	00000000 
00005990 l       .debug_ranges	00000000 
000059a8 l       .debug_ranges	00000000 
000059c0 l       .debug_ranges	00000000 
000059d8 l       .debug_ranges	00000000 
000059f0 l       .debug_ranges	00000000 
00005a08 l       .debug_ranges	00000000 
00005a20 l       .debug_ranges	00000000 
00005a38 l       .debug_ranges	00000000 
00005a50 l       .debug_ranges	00000000 
00005a68 l       .debug_ranges	00000000 
00005a80 l       .debug_ranges	00000000 
00005aa0 l       .debug_ranges	00000000 
00005ab8 l       .debug_ranges	00000000 
00005ad0 l       .debug_ranges	00000000 
00005ae8 l       .debug_ranges	00000000 
00005b00 l       .debug_ranges	00000000 
00005b18 l       .debug_ranges	00000000 
00005b30 l       .debug_ranges	00000000 
00005b48 l       .debug_ranges	00000000 
00005b68 l       .debug_ranges	00000000 
00005b80 l       .debug_ranges	00000000 
00005b98 l       .debug_ranges	00000000 
00005bb0 l       .debug_ranges	00000000 
00005bd0 l       .debug_ranges	00000000 
00005be8 l       .debug_ranges	00000000 
00005c00 l       .debug_ranges	00000000 
00005c18 l       .debug_ranges	00000000 
00005c38 l       .debug_ranges	00000000 
00005c98 l       .debug_ranges	00000000 
00005cf8 l       .debug_ranges	00000000 
00005d10 l       .debug_ranges	00000000 
00005d28 l       .debug_ranges	00000000 
00005d40 l       .debug_ranges	00000000 
00005d58 l       .debug_ranges	00000000 
00005d78 l       .debug_ranges	00000000 
00005d90 l       .debug_ranges	00000000 
00005da8 l       .debug_ranges	00000000 
00005dc0 l       .debug_ranges	00000000 
00005dd8 l       .debug_ranges	00000000 
00005df8 l       .debug_ranges	00000000 
00005e10 l       .debug_ranges	00000000 
00005e28 l       .debug_ranges	00000000 
00005e40 l       .debug_ranges	00000000 
00005e58 l       .debug_ranges	00000000 
00005e70 l       .debug_ranges	00000000 
00005e88 l       .debug_ranges	00000000 
00005ea0 l       .debug_ranges	00000000 
00005eb8 l       .debug_ranges	00000000 
00005ed0 l       .debug_ranges	00000000 
00005ee8 l       .debug_ranges	00000000 
00005f00 l       .debug_ranges	00000000 
00005f18 l       .debug_ranges	00000000 
00005f30 l       .debug_ranges	00000000 
00005f48 l       .debug_ranges	00000000 
00005f60 l       .debug_ranges	00000000 
00005f78 l       .debug_ranges	00000000 
00005f90 l       .debug_ranges	00000000 
00005fa8 l       .debug_ranges	00000000 
00005fc0 l       .debug_ranges	00000000 
00005fd8 l       .debug_ranges	00000000 
00005ff0 l       .debug_ranges	00000000 
00006008 l       .debug_ranges	00000000 
00006020 l       .debug_ranges	00000000 
00006040 l       .debug_ranges	00000000 
00006058 l       .debug_ranges	00000000 
00006070 l       .debug_ranges	00000000 
00006088 l       .debug_ranges	00000000 
000060a0 l       .debug_ranges	00000000 
000060b8 l       .debug_ranges	00000000 
000060d0 l       .debug_ranges	00000000 
000060e8 l       .debug_ranges	00000000 
00006100 l       .debug_ranges	00000000 
00006118 l       .debug_ranges	00000000 
00006130 l       .debug_ranges	00000000 
00006148 l       .debug_ranges	00000000 
00006160 l       .debug_ranges	00000000 
00006178 l       .debug_ranges	00000000 
000061a0 l       .debug_ranges	00000000 
000061c8 l       .debug_ranges	00000000 
000061f0 l       .debug_ranges	00000000 
00006218 l       .debug_ranges	00000000 
00006240 l       .debug_ranges	00000000 
00006258 l       .debug_ranges	00000000 
00006280 l       .debug_ranges	00000000 
000062a8 l       .debug_ranges	00000000 
000062d0 l       .debug_ranges	00000000 
000062f0 l       .debug_ranges	00000000 
00006308 l       .debug_ranges	00000000 
00006320 l       .debug_ranges	00000000 
00006338 l       .debug_ranges	00000000 
00006350 l       .debug_ranges	00000000 
00006368 l       .debug_ranges	00000000 
00006380 l       .debug_ranges	00000000 
00006398 l       .debug_ranges	00000000 
000063b0 l       .debug_ranges	00000000 
000063c8 l       .debug_ranges	00000000 
000063e0 l       .debug_ranges	00000000 
000063f8 l       .debug_ranges	00000000 
00006410 l       .debug_ranges	00000000 
00006428 l       .debug_ranges	00000000 
00006440 l       .debug_ranges	00000000 
00006458 l       .debug_ranges	00000000 
00006470 l       .debug_ranges	00000000 
00006488 l       .debug_ranges	00000000 
000064a0 l       .debug_ranges	00000000 
000064b8 l       .debug_ranges	00000000 
000064d8 l       .debug_ranges	00000000 
000064f8 l       .debug_ranges	00000000 
00006510 l       .debug_ranges	00000000 
00006528 l       .debug_ranges	00000000 
00006540 l       .debug_ranges	00000000 
00006558 l       .debug_ranges	00000000 
00006570 l       .debug_ranges	00000000 
00006588 l       .debug_ranges	00000000 
000065a0 l       .debug_ranges	00000000 
000065b8 l       .debug_ranges	00000000 
000065d0 l       .debug_ranges	00000000 
000065e8 l       .debug_ranges	00000000 
00006600 l       .debug_ranges	00000000 
00006618 l       .debug_ranges	00000000 
00006630 l       .debug_ranges	00000000 
00006648 l       .debug_ranges	00000000 
00006660 l       .debug_ranges	00000000 
00006678 l       .debug_ranges	00000000 
00006690 l       .debug_ranges	00000000 
000066a8 l       .debug_ranges	00000000 
000066c0 l       .debug_ranges	00000000 
000066d8 l       .debug_ranges	00000000 
000066f0 l       .debug_ranges	00000000 
00006708 l       .debug_ranges	00000000 
00006720 l       .debug_ranges	00000000 
00006738 l       .debug_ranges	00000000 
00006750 l       .debug_ranges	00000000 
00006770 l       .debug_ranges	00000000 
00006788 l       .debug_ranges	00000000 
000067a0 l       .debug_ranges	00000000 
000067b8 l       .debug_ranges	00000000 
000067d0 l       .debug_ranges	00000000 
000067e8 l       .debug_ranges	00000000 
00006800 l       .debug_ranges	00000000 
00006818 l       .debug_ranges	00000000 
00006830 l       .debug_ranges	00000000 
00006848 l       .debug_ranges	00000000 
00006878 l       .debug_ranges	00000000 
000068a8 l       .debug_ranges	00000000 
000068c0 l       .debug_ranges	00000000 
000068e8 l       .debug_ranges	00000000 
00006910 l       .debug_ranges	00000000 
00006930 l       .debug_ranges	00000000 
00006950 l       .debug_ranges	00000000 
00006968 l       .debug_ranges	00000000 
00006980 l       .debug_ranges	00000000 
00006998 l       .debug_ranges	00000000 
000069b0 l       .debug_ranges	00000000 
000069c8 l       .debug_ranges	00000000 
000069e0 l       .debug_ranges	00000000 
000069f8 l       .debug_ranges	00000000 
00006a10 l       .debug_ranges	00000000 
00006a28 l       .debug_ranges	00000000 
00006a40 l       .debug_ranges	00000000 
00006a60 l       .debug_ranges	00000000 
00006a80 l       .debug_ranges	00000000 
00006aa8 l       .debug_ranges	00000000 
00006ac0 l       .debug_ranges	00000000 
00006ad8 l       .debug_ranges	00000000 
00006af0 l       .debug_ranges	00000000 
00006b08 l       .debug_ranges	00000000 
00006b20 l       .debug_ranges	00000000 
00006b40 l       .debug_ranges	00000000 
00006b60 l       .debug_ranges	00000000 
00006b78 l       .debug_ranges	00000000 
00006b90 l       .debug_ranges	00000000 
00006ba8 l       .debug_ranges	00000000 
00006bc0 l       .debug_ranges	00000000 
00006bd8 l       .debug_ranges	00000000 
00006bf0 l       .debug_ranges	00000000 
00006c08 l       .debug_ranges	00000000 
00006c20 l       .debug_ranges	00000000 
00006c38 l       .debug_ranges	00000000 
00006c50 l       .debug_ranges	00000000 
00006c68 l       .debug_ranges	00000000 
00006c80 l       .debug_ranges	00000000 
00006c98 l       .debug_ranges	00000000 
00006cb0 l       .debug_ranges	00000000 
00006cc8 l       .debug_ranges	00000000 
00006ce0 l       .debug_ranges	00000000 
00006cf8 l       .debug_ranges	00000000 
00006d10 l       .debug_ranges	00000000 
00006d28 l       .debug_ranges	00000000 
00006d48 l       .debug_ranges	00000000 
00006d60 l       .debug_ranges	00000000 
00006d78 l       .debug_ranges	00000000 
00006d90 l       .debug_ranges	00000000 
00006db0 l       .debug_ranges	00000000 
00006dd0 l       .debug_ranges	00000000 
00006de8 l       .debug_ranges	00000000 
00006e00 l       .debug_ranges	00000000 
00006e18 l       .debug_ranges	00000000 
00006e30 l       .debug_ranges	00000000 
00006e48 l       .debug_ranges	00000000 
00006e60 l       .debug_ranges	00000000 
00006e80 l       .debug_ranges	00000000 
00006ea0 l       .debug_ranges	00000000 
00006eb8 l       .debug_ranges	00000000 
00006ed0 l       .debug_ranges	00000000 
00006ee8 l       .debug_ranges	00000000 
00006f00 l       .debug_ranges	00000000 
00006f18 l       .debug_ranges	00000000 
00006f30 l       .debug_ranges	00000000 
00006f48 l       .debug_ranges	00000000 
00006f60 l       .debug_ranges	00000000 
00006f78 l       .debug_ranges	00000000 
00006f90 l       .debug_ranges	00000000 
00006fa8 l       .debug_ranges	00000000 
00006fc0 l       .debug_ranges	00000000 
00006fd8 l       .debug_ranges	00000000 
00006ff0 l       .debug_ranges	00000000 
00007008 l       .debug_ranges	00000000 
00007020 l       .debug_ranges	00000000 
00007038 l       .debug_ranges	00000000 
00007050 l       .debug_ranges	00000000 
00007068 l       .debug_ranges	00000000 
00007080 l       .debug_ranges	00000000 
00007098 l       .debug_ranges	00000000 
000070b0 l       .debug_ranges	00000000 
000070c8 l       .debug_ranges	00000000 
000070e0 l       .debug_ranges	00000000 
000070f8 l       .debug_ranges	00000000 
00007110 l       .debug_ranges	00000000 
00007128 l       .debug_ranges	00000000 
00007148 l       .debug_ranges	00000000 
00007160 l       .debug_ranges	00000000 
00007178 l       .debug_ranges	00000000 
00007190 l       .debug_ranges	00000000 
000071a8 l       .debug_ranges	00000000 
000071c0 l       .debug_ranges	00000000 
000071d8 l       .debug_ranges	00000000 
000071f0 l       .debug_ranges	00000000 
00007208 l       .debug_ranges	00000000 
00007238 l       .debug_ranges	00000000 
00007268 l       .debug_ranges	00000000 
00007280 l       .debug_ranges	00000000 
00007298 l       .debug_ranges	00000000 
000072b0 l       .debug_ranges	00000000 
000072c8 l       .debug_ranges	00000000 
000072e0 l       .debug_ranges	00000000 
000072f8 l       .debug_ranges	00000000 
00007310 l       .debug_ranges	00000000 
00007328 l       .debug_ranges	00000000 
00007340 l       .debug_ranges	00000000 
00007358 l       .debug_ranges	00000000 
00007378 l       .debug_ranges	00000000 
00007398 l       .debug_ranges	00000000 
000073c8 l       .debug_ranges	00000000 
000073e0 l       .debug_ranges	00000000 
000073f8 l       .debug_ranges	00000000 
00007410 l       .debug_ranges	00000000 
00007430 l       .debug_ranges	00000000 
00007450 l       .debug_ranges	00000000 
00007468 l       .debug_ranges	00000000 
00007480 l       .debug_ranges	00000000 
00007498 l       .debug_ranges	00000000 
000074b0 l       .debug_ranges	00000000 
000074c8 l       .debug_ranges	00000000 
000074e0 l       .debug_ranges	00000000 
000074f8 l       .debug_ranges	00000000 
00007510 l       .debug_ranges	00000000 
00007528 l       .debug_ranges	00000000 
00007540 l       .debug_ranges	00000000 
00007568 l       .debug_ranges	00000000 
00007580 l       .debug_ranges	00000000 
00007598 l       .debug_ranges	00000000 
000075b0 l       .debug_ranges	00000000 
000075c8 l       .debug_ranges	00000000 
000075e0 l       .debug_ranges	00000000 
000075f8 l       .debug_ranges	00000000 
00007610 l       .debug_ranges	00000000 
00007628 l       .debug_ranges	00000000 
00007658 l       .debug_ranges	00000000 
00007688 l       .debug_ranges	00000000 
000076a0 l       .debug_ranges	00000000 
000076b8 l       .debug_ranges	00000000 
000076d0 l       .debug_ranges	00000000 
000076e8 l       .debug_ranges	00000000 
00007700 l       .debug_ranges	00000000 
00007718 l       .debug_ranges	00000000 
00007730 l       .debug_ranges	00000000 
00007748 l       .debug_ranges	00000000 
00007768 l       .debug_ranges	00000000 
00007788 l       .debug_ranges	00000000 
000077a8 l       .debug_ranges	00000000 
000077c8 l       .debug_ranges	00000000 
000077e8 l       .debug_ranges	00000000 
00007800 l       .debug_ranges	00000000 
00007818 l       .debug_ranges	00000000 
00007830 l       .debug_ranges	00000000 
00007850 l       .debug_ranges	00000000 
00007868 l       .debug_ranges	00000000 
00007880 l       .debug_ranges	00000000 
00007898 l       .debug_ranges	00000000 
000078b0 l       .debug_ranges	00000000 
000078c8 l       .debug_ranges	00000000 
000078e0 l       .debug_ranges	00000000 
000078f8 l       .debug_ranges	00000000 
00007910 l       .debug_ranges	00000000 
00007928 l       .debug_ranges	00000000 
00007940 l       .debug_ranges	00000000 
00007958 l       .debug_ranges	00000000 
00007970 l       .debug_ranges	00000000 
00007988 l       .debug_ranges	00000000 
000079a0 l       .debug_ranges	00000000 
000079b8 l       .debug_ranges	00000000 
000079d0 l       .debug_ranges	00000000 
000079e8 l       .debug_ranges	00000000 
00007a00 l       .debug_ranges	00000000 
00007a18 l       .debug_ranges	00000000 
00007a30 l       .debug_ranges	00000000 
00007a48 l       .debug_ranges	00000000 
00007a60 l       .debug_ranges	00000000 
00007a78 l       .debug_ranges	00000000 
00007a90 l       .debug_ranges	00000000 
00007aa8 l       .debug_ranges	00000000 
00007ac0 l       .debug_ranges	00000000 
00007ad8 l       .debug_ranges	00000000 
00007af0 l       .debug_ranges	00000000 
00007b08 l       .debug_ranges	00000000 
00007b20 l       .debug_ranges	00000000 
00007b38 l       .debug_ranges	00000000 
00007b50 l       .debug_ranges	00000000 
00007b68 l       .debug_ranges	00000000 
00007b80 l       .debug_ranges	00000000 
00007b98 l       .debug_ranges	00000000 
00007bb0 l       .debug_ranges	00000000 
00007bc8 l       .debug_ranges	00000000 
00007be0 l       .debug_ranges	00000000 
00007bf8 l       .debug_ranges	00000000 
00007c10 l       .debug_ranges	00000000 
00007c28 l       .debug_ranges	00000000 
00007c48 l       .debug_ranges	00000000 
00007c68 l       .debug_ranges	00000000 
00007c88 l       .debug_ranges	00000000 
00007ca0 l       .debug_ranges	00000000 
00007cb8 l       .debug_ranges	00000000 
00007cd8 l       .debug_ranges	00000000 
00007cf8 l       .debug_ranges	00000000 
00007d18 l       .debug_ranges	00000000 
00007d30 l       .debug_ranges	00000000 
00007d48 l       .debug_ranges	00000000 
00007d68 l       .debug_ranges	00000000 
00007d88 l       .debug_ranges	00000000 
00007da8 l       .debug_ranges	00000000 
00007dc0 l       .debug_ranges	00000000 
00007dd8 l       .debug_ranges	00000000 
00007df8 l       .debug_ranges	00000000 
00007e18 l       .debug_ranges	00000000 
00007e38 l       .debug_ranges	00000000 
00007e50 l       .debug_ranges	00000000 
00007e68 l       .debug_ranges	00000000 
00007e88 l       .debug_ranges	00000000 
00007ea8 l       .debug_ranges	00000000 
00007ec8 l       .debug_ranges	00000000 
00007ee0 l       .debug_ranges	00000000 
00007ef8 l       .debug_ranges	00000000 
00007f10 l       .debug_ranges	00000000 
00007f28 l       .debug_ranges	00000000 
00007f40 l       .debug_ranges	00000000 
00007f58 l       .debug_ranges	00000000 
00007f70 l       .debug_ranges	00000000 
00007f88 l       .debug_ranges	00000000 
00007fa0 l       .debug_ranges	00000000 
00007fb8 l       .debug_ranges	00000000 
00007fd0 l       .debug_ranges	00000000 
00007fe8 l       .debug_ranges	00000000 
00008000 l       .debug_ranges	00000000 
00008018 l       .debug_ranges	00000000 
00008030 l       .debug_ranges	00000000 
00008048 l       .debug_ranges	00000000 
00008060 l       .debug_ranges	00000000 
00008078 l       .debug_ranges	00000000 
00008090 l       .debug_ranges	00000000 
000080b0 l       .debug_ranges	00000000 
000080d0 l       .debug_ranges	00000000 
000080f0 l       .debug_ranges	00000000 
00008108 l       .debug_ranges	00000000 
00008120 l       .debug_ranges	00000000 
00008138 l       .debug_ranges	00000000 
00008158 l       .debug_ranges	00000000 
00008178 l       .debug_ranges	00000000 
00008190 l       .debug_ranges	00000000 
000081a8 l       .debug_ranges	00000000 
000081c0 l       .debug_ranges	00000000 
000081d8 l       .debug_ranges	00000000 
000081f8 l       .debug_ranges	00000000 
00008218 l       .debug_ranges	00000000 
00008238 l       .debug_ranges	00000000 
00008258 l       .debug_ranges	00000000 
00008278 l       .debug_ranges	00000000 
00008290 l       .debug_ranges	00000000 
000082a8 l       .debug_ranges	00000000 
000082c8 l       .debug_ranges	00000000 
000082f0 l       .debug_ranges	00000000 
00008318 l       .debug_ranges	00000000 
00008330 l       .debug_ranges	00000000 
00008348 l       .debug_ranges	00000000 
00008368 l       .debug_ranges	00000000 
00008388 l       .debug_ranges	00000000 
000083a8 l       .debug_ranges	00000000 
000083c8 l       .debug_ranges	00000000 
000083e0 l       .debug_ranges	00000000 
000083f8 l       .debug_ranges	00000000 
00008418 l       .debug_ranges	00000000 
00008438 l       .debug_ranges	00000000 
00008458 l       .debug_ranges	00000000 
00008478 l       .debug_ranges	00000000 
00008490 l       .debug_ranges	00000000 
000084a8 l       .debug_ranges	00000000 
000084c8 l       .debug_ranges	00000000 
000084e0 l       .debug_ranges	00000000 
000084f8 l       .debug_ranges	00000000 
00008510 l       .debug_ranges	00000000 
00008528 l       .debug_ranges	00000000 
00008540 l       .debug_ranges	00000000 
00008558 l       .debug_ranges	00000000 
00008570 l       .debug_ranges	00000000 
00008588 l       .debug_ranges	00000000 
000085a0 l       .debug_ranges	00000000 
000085b8 l       .debug_ranges	00000000 
000085d0 l       .debug_ranges	00000000 
00008618 l       .debug_ranges	00000000 
00008660 l       .debug_ranges	00000000 
000086a8 l       .debug_ranges	00000000 
000086f0 l       .debug_ranges	00000000 
00008718 l       .debug_ranges	00000000 
00008738 l       .debug_ranges	00000000 
00008750 l       .debug_ranges	00000000 
00008768 l       .debug_ranges	00000000 
00008790 l       .debug_ranges	00000000 
000087b0 l       .debug_ranges	00000000 
000087d8 l       .debug_ranges	00000000 
000087f8 l       .debug_ranges	00000000 
00008820 l       .debug_ranges	00000000 
00008840 l       .debug_ranges	00000000 
00008858 l       .debug_ranges	00000000 
00008870 l       .debug_ranges	00000000 
00008888 l       .debug_ranges	00000000 
000088a0 l       .debug_ranges	00000000 
000088b8 l       .debug_ranges	00000000 
000088d0 l       .debug_ranges	00000000 
000088e8 l       .debug_ranges	00000000 
00008900 l       .debug_ranges	00000000 
00008918 l       .debug_ranges	00000000 
00008930 l       .debug_ranges	00000000 
00008948 l       .debug_ranges	00000000 
00008960 l       .debug_ranges	00000000 
00008978 l       .debug_ranges	00000000 
00008990 l       .debug_ranges	00000000 
000089a8 l       .debug_ranges	00000000 
000089c0 l       .debug_ranges	00000000 
000089e0 l       .debug_ranges	00000000 
000089f8 l       .debug_ranges	00000000 
00008a10 l       .debug_ranges	00000000 
00008a28 l       .debug_ranges	00000000 
00008a40 l       .debug_ranges	00000000 
00008a60 l       .debug_ranges	00000000 
00008a78 l       .debug_ranges	00000000 
00008a90 l       .debug_ranges	00000000 
00008aa8 l       .debug_ranges	00000000 
00008ac0 l       .debug_ranges	00000000 
00008ad8 l       .debug_ranges	00000000 
00008af0 l       .debug_ranges	00000000 
00008b08 l       .debug_ranges	00000000 
00008b20 l       .debug_ranges	00000000 
00008b38 l       .debug_ranges	00000000 
00008b50 l       .debug_ranges	00000000 
00008b68 l       .debug_ranges	00000000 
00008b80 l       .debug_ranges	00000000 
00008b98 l       .debug_ranges	00000000 
00008bb0 l       .debug_ranges	00000000 
00008bc8 l       .debug_ranges	00000000 
00008be0 l       .debug_ranges	00000000 
00008bf8 l       .debug_ranges	00000000 
00008c10 l       .debug_ranges	00000000 
00008c28 l       .debug_ranges	00000000 
00008c40 l       .debug_ranges	00000000 
00008c58 l       .debug_ranges	00000000 
00008c70 l       .debug_ranges	00000000 
00008c88 l       .debug_ranges	00000000 
00008ca0 l       .debug_ranges	00000000 
00008cb8 l       .debug_ranges	00000000 
00008cd0 l       .debug_ranges	00000000 
00008ce8 l       .debug_ranges	00000000 
00008d00 l       .debug_ranges	00000000 
00008d18 l       .debug_ranges	00000000 
00008d30 l       .debug_ranges	00000000 
00008d48 l       .debug_ranges	00000000 
00008d60 l       .debug_ranges	00000000 
00008d78 l       .debug_ranges	00000000 
00008d90 l       .debug_ranges	00000000 
00008da8 l       .debug_ranges	00000000 
00008dc0 l       .debug_ranges	00000000 
00008dd8 l       .debug_ranges	00000000 
00008df0 l       .debug_ranges	00000000 
00008e08 l       .debug_ranges	00000000 
00008e20 l       .debug_ranges	00000000 
00008e38 l       .debug_ranges	00000000 
00008e50 l       .debug_ranges	00000000 
00008e68 l       .debug_ranges	00000000 
00008e80 l       .debug_ranges	00000000 
00008ea0 l       .debug_ranges	00000000 
00008eb8 l       .debug_ranges	00000000 
00008ed0 l       .debug_ranges	00000000 
00008ee8 l       .debug_ranges	00000000 
00008f00 l       .debug_ranges	00000000 
00008f20 l       .debug_ranges	00000000 
00008f38 l       .debug_ranges	00000000 
00008f50 l       .debug_ranges	00000000 
00008f68 l       .debug_ranges	00000000 
00008f80 l       .debug_ranges	00000000 
00008fa0 l       .debug_ranges	00000000 
00008fb8 l       .debug_ranges	00000000 
00008fd0 l       .debug_ranges	00000000 
00008fe8 l       .debug_ranges	00000000 
00009000 l       .debug_ranges	00000000 
00009020 l       .debug_ranges	00000000 
00009038 l       .debug_ranges	00000000 
00009050 l       .debug_ranges	00000000 
00009068 l       .debug_ranges	00000000 
00009080 l       .debug_ranges	00000000 
00009098 l       .debug_ranges	00000000 
000090b0 l       .debug_ranges	00000000 
000090c8 l       .debug_ranges	00000000 
000090e0 l       .debug_ranges	00000000 
000090f8 l       .debug_ranges	00000000 
00009110 l       .debug_ranges	00000000 
00009128 l       .debug_ranges	00000000 
00009140 l       .debug_ranges	00000000 
00009158 l       .debug_ranges	00000000 
00009170 l       .debug_ranges	00000000 
00009188 l       .debug_ranges	00000000 
000091a0 l       .debug_ranges	00000000 
000091b8 l       .debug_ranges	00000000 
000091d0 l       .debug_ranges	00000000 
000091e8 l       .debug_ranges	00000000 
00009200 l       .debug_ranges	00000000 
00009218 l       .debug_ranges	00000000 
00009230 l       .debug_ranges	00000000 
00009248 l       .debug_ranges	00000000 
00009260 l       .debug_ranges	00000000 
00009278 l       .debug_ranges	00000000 
00009290 l       .debug_ranges	00000000 
000092a8 l       .debug_ranges	00000000 
000092c0 l       .debug_ranges	00000000 
000092e0 l       .debug_ranges	00000000 
00009300 l       .debug_ranges	00000000 
00009318 l       .debug_ranges	00000000 
00009330 l       .debug_ranges	00000000 
00009348 l       .debug_ranges	00000000 
00009360 l       .debug_ranges	00000000 
00009378 l       .debug_ranges	00000000 
00009390 l       .debug_ranges	00000000 
000093a8 l       .debug_ranges	00000000 
000093c0 l       .debug_ranges	00000000 
000093e0 l       .debug_ranges	00000000 
00009400 l       .debug_ranges	00000000 
00009418 l       .debug_ranges	00000000 
00009430 l       .debug_ranges	00000000 
00009448 l       .debug_ranges	00000000 
00009460 l       .debug_ranges	00000000 
00009480 l       .debug_ranges	00000000 
000094a0 l       .debug_ranges	00000000 
000094b8 l       .debug_ranges	00000000 
000094d0 l       .debug_ranges	00000000 
000094e8 l       .debug_ranges	00000000 
00009500 l       .debug_ranges	00000000 
00009530 l       .debug_ranges	00000000 
00009550 l       .debug_ranges	00000000 
00009570 l       .debug_ranges	00000000 
00009590 l       .debug_ranges	00000000 
000095a8 l       .debug_ranges	00000000 
000095c0 l       .debug_ranges	00000000 
000095d8 l       .debug_ranges	00000000 
000095f8 l       .debug_ranges	00000000 
00009618 l       .debug_ranges	00000000 
00009630 l       .debug_ranges	00000000 
00009648 l       .debug_ranges	00000000 
00009660 l       .debug_ranges	00000000 
00009678 l       .debug_ranges	00000000 
00009698 l       .debug_ranges	00000000 
000096b8 l       .debug_ranges	00000000 
000096d0 l       .debug_ranges	00000000 
000096e8 l       .debug_ranges	00000000 
00009700 l       .debug_ranges	00000000 
00009718 l       .debug_ranges	00000000 
00009730 l       .debug_ranges	00000000 
00009748 l       .debug_ranges	00000000 
00009760 l       .debug_ranges	00000000 
00009778 l       .debug_ranges	00000000 
00009790 l       .debug_ranges	00000000 
000097a8 l       .debug_ranges	00000000 
000097c0 l       .debug_ranges	00000000 
000097d8 l       .debug_ranges	00000000 
000097f0 l       .debug_ranges	00000000 
00009808 l       .debug_ranges	00000000 
00009820 l       .debug_ranges	00000000 
00009838 l       .debug_ranges	00000000 
00009850 l       .debug_ranges	00000000 
00009868 l       .debug_ranges	00000000 
00009880 l       .debug_ranges	00000000 
00009898 l       .debug_ranges	00000000 
000098b8 l       .debug_ranges	00000000 
000098d8 l       .debug_ranges	00000000 
000098f0 l       .debug_ranges	00000000 
00009908 l       .debug_ranges	00000000 
00009920 l       .debug_ranges	00000000 
00009938 l       .debug_ranges	00000000 
00009950 l       .debug_ranges	00000000 
00009968 l       .debug_ranges	00000000 
00009980 l       .debug_ranges	00000000 
00009998 l       .debug_ranges	00000000 
000099b0 l       .debug_ranges	00000000 
000099c8 l       .debug_ranges	00000000 
000099e0 l       .debug_ranges	00000000 
000099f8 l       .debug_ranges	00000000 
00009a10 l       .debug_ranges	00000000 
00009a28 l       .debug_ranges	00000000 
00009a40 l       .debug_ranges	00000000 
00009a58 l       .debug_ranges	00000000 
00009a70 l       .debug_ranges	00000000 
00009a88 l       .debug_ranges	00000000 
00009aa0 l       .debug_ranges	00000000 
00009ab8 l       .debug_ranges	00000000 
00009ad0 l       .debug_ranges	00000000 
00009ae8 l       .debug_ranges	00000000 
00009b00 l       .debug_ranges	00000000 
00009b18 l       .debug_ranges	00000000 
00009b30 l       .debug_ranges	00000000 
00009b48 l       .debug_ranges	00000000 
00009b60 l       .debug_ranges	00000000 
00009b78 l       .debug_ranges	00000000 
00009b90 l       .debug_ranges	00000000 
08002e58 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h589f04726b9846deE
08004ce6 l     F .text	00000010 _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h133134731e47c3ddE
08003914 l     F .text	0000000e _ZN4core3fmt10ArgumentV110show_usize17h3c2fac3bad94a947E
0800496c l     F .text	00000162 _ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE
08004b06 l     F .text	000001b4 _ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE
080045ac l     F .text	000000bc _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E
080037da l     F .text	000000b4 _ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E
0800388e l     F .text	00000038 _ZN4core3fmt5Write9write_fmt17hd5d67e64151488d3E
08003dde l     F .text	00000046 _ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE
08002dee l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h034ec8dd70295f85E
08002df0 l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h0ef71ded6c57bedcE
08002df2 l     F .text	00000002 _ZN4core3ptr18real_drop_in_place17h921869e295dffcdcE
080043a6 l     F .text	00000106 _ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E
080044ac l     F .text	00000100 _ZN4core7unicode9printable5check17ha9e204e73497ee46E
080038d0 l     F .text	0000000a _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h44c662229c53045aE
080038da l     F .text	0000003a _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h44a86feaf2f21d35E
080038c6 l     F .text	0000000a _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hc9f594331d92d7bbE
08002df4 l     F .text	00000064 _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bd32f961ec2bdfaE
0800c2b0 l     O .rodata	00000016 str.h
0800c2f0 l     O .rodata	00000020 str.j
00000000 l    df *ABS*	00000000 console.c
20000628 l     O .bss	00000010 avail_queue
20000638 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 semihosting_console.c
20000560 l     O .bss	00000004 semihost_mbuf
20000530 l     O .sdata	00000001 log_enabled
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20000564 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sensor_coap.c
08004e8a l     F .text	00000072 split_float
08004efc l     F .text	00000014 handle_coap_response
08004f5e l     F .text	00000086 json_encode_value_ext
080050a2 l     F .text	00000102 prepare_coap_request
08005276 l     F .text	000000a6 dispatch_coap_request
20000644 l     O .bss	00000070 oc_c_request
20000568 l     O .bss	00000004 coap_json_mbuf
2000056c l     O .bss	00000004 oc_c_message
20000570 l     O .bss	00000004 oc_c_rsp
20000578 l     O .bss	00000008 oc_sem
20000580 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
200006b4 l     O .bss	00000021 device_id_text
200006d8 l     O .bss	0000000c hw_id
200006e4 l     O .bss	00000020 sensor_network_endpoints
20000704 l     O .bss	00000028 sensor_network_interfaces
2000072c l     O .bss	00000037 sensor_node_names_buf
20000080 l     O .data	00000014 sensor_node_names
0800d4cc l     O .rodata	00000036 COAP_URI
0800d504 l     O .rodata	0000000c COLLECTOR_NODE_HW_ID
0800d510 l     O .rodata	0000003c SENSOR_NODE_HW_IDS
0800d5e0 l     O .rodata	00000028 sensor_node_addresses
20000584 l     O .bss	00000004 current_uri
20000588 l     O .bss	00000004 hw_id_len
20000590 l     O .bss	00000008 sensor_node_address
20000531 l     O .sdata	00000001 current_iface_type
0800d8f0 l     O .sdata2.sensor_network_encoding	00000008 sensor_network_encoding
00000000 l    df *ABS*	00000000 oc_buffer.c
080057fe l     F .text	0000002e oc_buffer_tx
0800582c l     F .text	00000026 oc_buffer_rx
20000764 l     O .bss	00000018 oc_inq
2000077c l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_rep.c
20000794 l     O .bss	0000001c oc_rep_objects
200007b0 l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 oc_ri.c
0800592c l     F .text	00000044 free_client_cb
08005970 l     F .text	0000000e oc_ri_remove_cb
200007e0 l     O .bss	000000d0 oc_client_cb_area
200008b0 l     O .bss	0000001c oc_client_cb_pool
20000598 l     O .bss	00000004 oc_client_cbs
00000000 l    df *ABS*	00000000 coap.c
08005a88 l     F .text	00000016 coap_log_2
08005a9e l     F .text	0000001c coap_option_nibble
08005aba l     F .text	000000aa coap_append_opt_hdr
08005b64 l     F .text	000000a0 coap_append_array_opt
08005c04 l     F .text	000000ba coap_append_int_opt
2000059c l     O .bss	00000002 current_mid
00000000 l    df *ABS*	00000000 adaptor.c
200005a0 l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 random.c
00000000 l    df *ABS*	00000000 oc_helpers.c
00000000 l    df *ABS*	00000000 sysinit.c
0800635a l     F .text	00000008 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 json_encode.c
080064d6 l     F .text	0000025e json_encode_value
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_hw_id.c
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 sensor.c
08006806 l     F .text	00000032 sensor_mgr_remove
08006838 l     F .text	00000060 sensor_mgr_insert
08006898 l     F .text	00000008 sensor_type_traits_empty
080068a0 l     F .text	0000000c sensor_mgr_evq_set
080068c8 l     F .text	00000076 sensor_read_data_func
0800693e l     F .text	0000001a sensor_mgr_match_bydevname
08006958 l     F .text	00000068 sensor_base_ts_update_event
080069c0 l     F .text	0000005a sensor_up_timestamp
08006a64 l     F .text	000000b0 sensor_mgr_init
08006e70 l     F .text	00000082 sensor_mgr_wakeup_event
08006bb4 l     F .text	0000001e sensor_update_poll_rate
08006bd2 l     F .text	00000038 sensor_update_nextrun
08006c0a l     F .text	00000030 sensor_calc_nextrun_delta
08006c3a l     F .text	00000034 sensor_find_min_nextrun_sensor
08006dea l     F .text	0000004e sensor_mgr_poll_bytype
08006e38 l     F .text	00000038 sensor_poll_per_type_trait
200008cc l     O .bss	00000078 sensor_notify_evt_area
20000944 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 os_arch_rv32imac.c
08006ef2 l     F .text	00000004 os_in_isr
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
08007098 l     F .text	00000016 os_main
20000a60 l     O .bss	00001000 g_os_main_stack
20000960 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
08007404 l     F .text	00000060 os_dev_add
08007464 l     F .text	00000030 os_dev_initialize
08007494 l     F .text	0000002a os_dev_init
200005a4 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20001a60 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
08007d5c l     F .text	00000074 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
08007e96 l     F .text	00000010 os_msys_find_biggest_pool
08007ea6 l     F .text	0000002a os_msys_find_pool
08007f1c l     F .text	0000003e os_msys_init_once
20001a70 l     O .bss	00000db0 os_msys_1_data
20002820 l     O .bss	0000000c os_msys_1_mbuf_pool
2000282c l     O .bss	0000001c os_msys_1_mempool
20000538 l     O .sdata	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
080081e0 l     F .text	00000024 os_sanity_check_list_lock
08008204 l     F .text	00000022 os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0800870a l     F .text	0000001c _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
08008836 l     F .text	00000050 os_deltatime
08008886 l     F .text	00000080 os_time_tick
20002848 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 malloc.c
080089e2 l     F .text	00000004 malloc_lock_nop
080089e6 l     F .text	00000002 malloc_unlock_nop
080089e8 l     F .text	00000044 __malloc_from_block
08008a2c l     F .text	0000006a __free_block
20000094 l     O .data	00000018 __malloc_head
20000550 l     O .sdata	00000004 malloc_lock
20000554 l     O .sdata	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 tinyprintf.c
08008c2c l     F .text	00000104 ui2a
08008d30 l     F .text	00000030 i2a
08008d60 l     F .text	00000040 a2d
08008da0 l     F .text	00000054 a2i
08008df4 l     F .text	00000028 putf
08008e1c l     F .text	00000154 putchw
08008f70 l     F .text	0000006e intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 json_helper.c
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 sensor_helper.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 gd32vf103c-start_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 sbrk.c
200000ac l     O .data	00000004 sbrkBase
200000b0 l     O .data	00000004 sbrkLimit
200000b4 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 gd32vf103_periph.c
08009676 l     F .text	00000036 gd32vf103_periph_create_timers
00000000 l    df *ABS*	00000000 hal_os_tick.c
200005b0 l     O .bss	00000008 last_tick_time
200005b8 l     O .bss	00000004 ticks_per_ostick
00000000 l    df *ABS*	00000000 hal_timer.c
0800978a l     F .text	0000001e hal_timer_cnt
0800d6fc l     O .rodata	0000000c gd32vf103_tmr_devs
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000000 l    df *ABS*	00000000 os_arch_rv32imac_patch.c
00000000 l    df *ABS*	00000000 plic.c
00000000 l    df *ABS*	00000000 gd32vf103_eclic.c
00000000 l    df *ABS*	00000000 gd32vf103_rcu.c
00000000 l    df *ABS*	00000000 gd32vf103_timer.c
00000000 l    df *ABS*	00000000 n200_func.c
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 ctx.o
00000000 l       *ABS*	00000000 sp_offset
00000000 l       *ABS*	00000000 ra_offset
00000004 l       *ABS*	00000000 gp_offset
00000008 l       *ABS*	00000000 tp_offset
0000000c l       *ABS*	00000000 t0_offset
00000010 l       *ABS*	00000000 t1_offset
00000014 l       *ABS*	00000000 t2_offset
00000018 l       *ABS*	00000000 t3_offset
0000001c l       *ABS*	00000000 t4_offset
00000020 l       *ABS*	00000000 t5_offset
00000024 l       *ABS*	00000000 t6_offset
00000028 l       *ABS*	00000000 a0_offset
0000002c l       *ABS*	00000000 a1_offset
00000030 l       *ABS*	00000000 a2_offset
00000034 l       *ABS*	00000000 a3_offset
00000038 l       *ABS*	00000000 a4_offset
0000003c l       *ABS*	00000000 a5_offset
00000040 l       *ABS*	00000000 a6_offset
00000044 l       *ABS*	00000000 a7_offset
00000048 l       *ABS*	00000000 caller_saved_size
00000000 l       *ABS*	00000000 mepc_offset
00000004 l       *ABS*	00000000 s0_offset
00000008 l       *ABS*	00000000 s1_offset
0000000c l       *ABS*	00000000 s2_offset
00000010 l       *ABS*	00000000 s3_offset
00000014 l       *ABS*	00000000 s4_offset
00000018 l       *ABS*	00000000 s5_offset
0000001c l       *ABS*	00000000 s6_offset
00000020 l       *ABS*	00000000 s7_offset
00000024 l       *ABS*	00000000 s8_offset
00000028 l       *ABS*	00000000 s9_offset
0000002c l       *ABS*	00000000 s10_offset
00000030 l       *ABS*	00000000 s11_offset
00000034 l       *ABS*	00000000 callee_saved_size
0800a13a l       .text	00000000 async_interrupt
0800a0fe l       .text	00000000 save_callee_responsible_registers
0800a11c l       .text	00000000 restore_callee_responsible_registers
0800a0be l       .text	00000000 fast_finish_context_switch
0800a0d2 l       .text	00000000 context_switch
00000000 l    df *ABS*	00000000 creator.c
0800a1aa l     F .text	00000054 config_device
20002878 l     O .bss	00000014 adc_1_itf_temp_stub
20002890 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0800a264 l     F .text	00000004 temp_stub_close
0800a268 l     F .text	00000016 temp_stub_sensor_get_config
0800a27e l     F .text	00000028 temp_stub_open
0800a36a l     F .text	0000007a temp_stub_sensor_read
0800d724 l     O .rodata	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 flash_map.c
0800a418 l     F .text	00000090 flash_map_read_mfg
20002950 l     O .bss	00000078 mfg_areas.3100
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0800a590 l     F .text	000000aa mfg_seek_next_aux
0800a63a l     F .text	00000070 mfg_read_mmr
0800a6aa l     F .text	00000066 mfg_read_next_mmr
0800a710 l     F .text	00000044 mfg_open_flash_area
0800a754 l     F .text	0000004c mfg_read_tlv_body
0800a858 l     F .text	0000003e mfg_read_mmr_refs
200029c8 l     O .bss	00000018 mfg_mmrs
200005bc l     O .bss	00000001 mfg_initialized
200005c0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 hal_flash.c
0800a896 l     F .text	0000001a hal_flash_check_addr
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 gd32vf103c-start_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 impure.c
200000f8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 reent.c
080062ea g     F .text	00000012 oc_random_rand
08004d96 g     F .text	00000002 console_buffer
08006f6e g     F .text	0000004e os_arch_start
20002bb4 g     O .bss	00000008 g_os_task_list
0800700a g     F .text	0000008e os_idle_task
0800a940 g     F .text	0000002c .hidden __ashldi3
0800b6c2 g     F .text	00000010 _getpid
200029e0 g     O .bss	00000006 __rand48_seed
08009378 g     F .text	00000014 fmemopen_w
20002b98 g     O .bss	00000008 g_os_mempool_list
0800722c g     F .text	00000036 os_callout_init
08007262 g     F .text	00000048 os_callout_stop
08008a96 g     F .text	00000058 add_malloc_block
08007628 g     F .text	00000082 os_eventq_put
080093ba g     F .text	00000022 json_helper_close_array
0800b684 g     F .text	0000003c _kill_r
080092b6 g     F .text	0000002a printf
20000d20 g       .sdata	00000000 __global_pointer$
08006d6c g     F .text	0000007e sensor_read
0800d8ec g     O .sdata2.stdout	00000004 stdout
08002896 g     F .text	00000032 _ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17hae64e8766a77e514E
08004f10 g     F .text	0000004e json_write_mbuf
080098ce g     F .text	00000070 os_arch_os_init
080097a8 g     F .text	00000024 hal_timer_init
0800a7bc g     F .text	00000026 mfg_seek_next_with_type
080031ec g     F .text	000002cc _ZN4core3str16slice_error_fail17heb8f3fc076617590E
08006fbc g     F .text	00000016 os_arch_os_start
200005e8 g     O .bss	00000040 _ZN6mynewt8encoding12coap_context12COAP_CONTEXT17hd1d9c5815270d297E
0800475c g     F .text	00000076 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE
080062fc g     F .text	00000044 oc_new_string
08006378 g     F .text	00000018 __wrap_coap_receive
080062b2 g     F .text	0000002a oc_init
08006b5e g     F .text	00000018 sensor_mgr_find_next_bydevname
08007e5a g     F .text	0000002c os_memblock_put
08007f66 g     F .text	00000038 os_msys_get_pkthdr
20002d20 g     O .bss	00000004 flash_map
08009f60 g     F .text	0000000a eclic_get_cliccfg
0800b3ae g     F .text	00000062 .hidden __fixsfsi
08009346 g     F .text	00000032 memfile_write
08006ef6 g     F .text	00000028 os_arch_ctx_sw
080096ba g     F .text	0000000e set_mtimecmp
080067fa g     F .text	0000000c hal_system_reset
08009f98 g     F .text	00000012 eclic_get_nlbits
080070b8 g     F .text	0000006e os_init_idle_task
0800837c g     F .text	0000000a os_sched_set_current_task
080047d2 g     F .text	00000076 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb07848a2f9c4477cE
08004088 g     F .text	0000003c _ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E
08004848 g     F .text	00000092 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u64$GT$3fmt17hd9c17bd8ef0ff383E
08007ff0 g     F .text	000000e6 os_mutex_release
0800823a g     F .text	00000026 os_sanity_check_register
20002d28 g     O .bss	00000004 errno
200029f0 g     O .bss	0000004c coap_json_encoder
08009f46 g     F .text	00000010 eclic_get_intctrl
00000800 g       *ABS*	00000000 __stack_size
0800273c g     F .text	00000064 _ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE
0800a7e2 g     F .text	00000010 mfg_read_tlv_flash_area
08004e84 g     F .text	00000006 console_get_ticks
08009ba6 g     F .text	00000216 timer_channel_output_config
20000d20 g       .sdata	00000000 _gp
08009554 g     F .text	00000032 get_geolocation_data
08002a76 g     F .text	00000014 _ZN6mynewt6kernel2os10eventq_run17h6ac9d8384aa82ab0E
08005370 g     F .text	000000b2 json_encode_object_entry_ext
08007c0c g     F .text	00000106 os_mbuf_prepend
0800a064 g     F .text	00000002 sensor_dev_create
08007e86 g     F .text	00000010 os_mempool_module_init
08009458 g     F .text	00000036 json_helper_set_float
08006f2e g     F .text	0000000c os_arch_in_critical
080055b8 g     F .text	0000007e get_hardware_id
0800a2b2 g     F .text	0000007c temp_stub_init
08002e6e g     F .text	00000008 _ZN4core5panic8Location4file17h94cc6af18de736c4E
20002bc4 g     O .bss	0000015c plic_interrupts
0800366c g     F .text	00000100 _ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E
0800751e g     F .text	0000002a os_dev_lookup
08002804 g     F .text	0000008e _ZN6mynewt8encoding12coap_context11CoapContext4fail17h18b2574d199d0ab3E
0800263c g     F .text	00000100 _ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E
08008386 g     F .text	000000a6 os_sched_sleep
0800534c g     F .text	00000024 json_rep_end_root_object
08004e28 g     F .text	00000004 semihosting_console_init
080051a4 g     F .text	00000076 prepare_sensor_post
08008bb8 g     F .text	0000001a memcpy
08009e4c g     F .text	00000064 timer_channel_output_shadow_config
080098c6 g     F .text	00000004 hal_watchdog_init
08002e76 g     F .text	00000004 _ZN4core5panic8Location4line17h3ffc63f14d0a6636E
20002a40 g     O .bss	00000010 coap_json_value
080040d4 g     F .text	000002d2 _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE
200000cc g     O .data	00000014 gd32vf103_tmr1
080073e2 g     F .text	00000012 os_cputime_init
0800679c g     F .text	00000028 json_encode_array_finish
00000020 g       *ABS*	00000000 _imghdr_size
08008344 g     F .text	0000002e os_sched_ctx_sw_hook
200029e8 g     O .bss	00000004 console_is_midline
08009b7e g     F .text	0000000a timer_enable
0800791e g     F .text	00000018 os_mbuf_free
08002c48 g     F .text	00000020 _ZN6mynewt4libs14sensor_network14do_server_post17h26084f25b670f291E
20000520 g     O .sdata	00000004 SystemCoreClock
08004668 g     F .text	0000007a _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE
20002a78 g     O .bss	00000034 sensor_mgr
0800a412 g     F .text	00000002 oc_register_ip6
08006f3a g     F .text	00000028 os_arch_task_stack_init
08002c8c g     F .text	00000162 _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E
08008aee g     F .text	00000076 malloc
080062dc g     F .text	0000000e oc_clock_time
08006186 g     F .text	0000003c coap_set_header_uri_path
08004ade g     F .text	0000001a _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h33b3bbdbc74b88baE
0800a4e6 g     F .text	0000002a flash_area_read
0800b5fe g     F .text	0000007a _raise_r
080099ae g     F .text	0000001c rcu_periph_reset_disable
080061fe g     F .text	00000012 coap_set_header_observe
08006fd2 g     F .text	0000002e __assert_func
080084f8 g     F .text	00000042 os_sched_wakeup_ticks
08004d2a g     F .text	00000044 console_pkg_init
08007000 g     F .text	00000008 handle_trap
080092e0 g     F .text	0000004c vsnprintf
080093fe g     F .text	00000022 json_helper_object_array_end_item
0800b092 g     F .text	0000008c .hidden __lesf2
08005658 g     F .text	00000020 is_standalone_node
20002b90 g     O .bss	00000008 g_callout_list
080058ae g     F .text	0000002e oc_send_message
08006172 g     F .text	00000014 coap_set_header_accept
0800b6c0 g     F .text	00000002 _getpid_r
08008fde g     F .text	000002ca tfp_format
08005cd2 g     F .text	00000038 coap_init_message
08001384  w      .text	00000000 irq_entry
080067f6 g     F .text	00000004 hal_debugger_connected
08001dac g     F .text	00000198 _ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE
0800376c g     F .text	0000006e _ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE
080054ee g     F .text	00000010 init_server_post
08009f36 g     F .text	00000010 eclic_set_intctrl
200000b8 g     O .data	00000014 gd32vf103_tmr0
080056f6 g     F .text	00000108 sensor_network_init
0800521a g     F .text	0000005c json_rep_finalize
20002bac g     O .bss	00000004 g_current_task
08008260 g     F .text	00000068 os_sanity_run
08006210 g     F .text	00000006 oc_evq_get
08006f1e g     F .text	00000008 os_arch_save_sr
08007dd0 g     F .text	00000010 os_mempool_init
08008960 g     F .text	0000005c os_gettimeofday
20002bbc g     O .bss	00000001 g_task_id
080031a0 g     F .text	0000004c _ZN4core5slice22slice_index_order_fail17h604ca25004a88762E
08009b88 g     F .text	00000004 timer_counter_read
200029ec g     O .bss	00000001 g_console_input_ignore
080027a0 g     F .text	00000064 _ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h6c075bbdd12e1839E
0800ad04 g     F .text	0000038e .hidden __umoddi3
08005422 g     F .text	000000cc sensor_network_init_post
080082c8 g     F .text	00000016 os_sanity_init
08007960 g     F .text	000000e4 os_mbuf_append
0800a7f2 g     F .text	00000010 mfg_read_tlv_mmr_ref
0800961a g     F .text	00000004 hal_bsp_flash_dev
0800d8f8 g     O .sdata2.MemFile_methods	00000008 MemFile_methods
20002ba0 g     O .bss	0000000c g_os_sanity_check_mu
080048da g     F .text	00000092 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE
0800a96c g     F .text	00000398 .hidden __udivdi3
08006c6e g     F .text	00000066 sensor_set_poll_rate_ms
08006d36 g     F .text	00000036 sensor_register_listener
0800b5f0 g     F .text	0000000e abort
0800232e g     F .text	00000012 _ZN6mynewt2hw10sensor_mgr14find_bydevname17h3b1f6b8f255d15acE
0800962a g     F .text	0000004c _sbrk
0800974a g     F .text	00000040 os_tick_idle
08004e2c g     F .text	00000058 console_printf
08002f44 g     F .text	00000046 _ZN4core6option13expect_failed17h3eeb96a257d935a1E
08004dc4 g     F .text	00000034 console_dump
08005636 g     F .text	00000022 is_collector_node
08009f56 g     F .text	0000000a eclic_set_cliccfg
08004ade g     F .text	0000001a _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hb41e1f6693cd74c4E
0800144c g     F .text	00000002 _init
080096c8 g     F .text	0000003c os_tick_init
08006a1a g     F .text	00000028 sensor_mgr_lock
08006340 g     F .text	0000001a oc_free_string
08007126 g     F .text	000000ac os_init
08005328 g     F .text	00000024 json_rep_start_root_object
08006216 g     F .text	00000006 oc_evq_set
20002a70 g     O .bss	00000001 sysinit_active
08009aaa g     F .text	0000001c timer_struct_para_init
08007884 g     F .text	0000000c os_mbuf_pool_init
08009ac6 g     F .text	000000b8 timer_init
0800853a g     F .text	00000006 os_sched_next_task
080082de g     F .text	00000066 os_sched_insert
08009508 g     F .text	0000004c get_temp_raw_data
080072aa g     F .text	00000092 os_callout_reset
0800a802 g     F .text	0000003a mfg_init
080059a6 g     F .text	00000024 oc_ri_remove_client_cb_by_mid
080075e8 g     F .text	0000000c os_dev_reset
080067ca g     F .text	00000004 hal_bsp_hw_id_len
0800615e g     F .text	00000014 coap_set_header_content_format
08002aa8 g     F .text	000000be _ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h94e658dc8a8affe2E
08009dbc g     F .text	00000064 timer_channel_output_mode_config
08007fd6 g     F .text	0000001a os_mutex_init
08003154 g     F .text	0000004c _ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E
08009faa g     F .text	00000052 eclic_set_irq_lvl_abs
08009f14 g     F .text	00000012 eclic_enable_interrupt
0800a510 g     F .text	0000007e flash_map_init
0800932c g     F .text	0000001a vprintf
080070ae g     F .text	0000000a os_started
20000000 g       .stack	00000000 _ram_start
080084b0 g     F .text	00000048 os_sched_os_timer_exp
080055a2 g     F .text	00000016 is_sensor_node
08005cbe g     F .text	00000014 coap_get_mid
0800475c g     F .text	00000076 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17h318eab348e5a5d7eE
0800b57a g     F .text	00000076 .hidden __clzsi2
20002bc0 g     O .bss	00000004 g_os_time
08002444 g     F .text	000001f8 _ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE
080098cc g     F .text	00000002 hal_watchdog_tickle
0800117c g     F .init	00000000 _reset_handler
080058dc g     F .text	0000002e oc_buffer_init
08007890 g     F .text	00000042 os_mbuf_get
080040c4 g     F .text	00000010 _ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h3a34938e29ce59dcE
08009f26 g     F .text	00000010 eclic_disable_interrupt
08009420 g     F .text	00000038 json_helper_set_int
20005000 g       .stack	00000000 _sp
08006120 g     F .text	00000016 coap_send_message
0800948e g     F .text	00000066 json_helper_set_text_string
080048da g     F .text	00000092 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u64$GT$3fmt17h054eedd71fc90a11E
08001adc g     F .text	000000bc rust_begin_unwind
08002986 g     F .text	000000f0 _ZN6mynewt4Strn3len17h964375c316a460f8E
08007f5a g     F .text	0000000c os_msys_reset
08001432 g     F .text	0000001a _start
0800997e g     F .text	00000018 rcu_periph_clock_enable
08004d98 g     F .text	00000016 console_printhex
08007a44 g     F .text	000000f4 os_mbuf_dup
08007744 g     F .text	00000020 os_eventq_run
08009704 g     F .text	00000046 timer_interrupt_handler
0800938c g     F .text	0000002e json_helper_set_array
0800993e g     F .text	00000010 external_interrupt_handler
0800122c g       .init	00000000 enable_mcycle_minstret
0800a32e g     F .text	0000003c temp_stub_get_raw_temperature
08003956 g     F .text	00000266 _ZN4core3fmt5write17h51826aee11d21b9bE
080059ca g     F .text	000000be oc_ri_alloc_client_cb
08002c68 g     F .text	00000024 _ZN6mynewt4libs14sensor_network13get_device_id17hea5bbcf5456b66c0E
20002ae8 g     O .bss	00000050 g_idle_task
080099ca g     F .text	000000e0 timer_deinit
20000534 g     O .sdata	00000004 sysinit_panic_cb
08002ec0 g     F .text	00000048 _ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E
08002894 g     F .text	00000002 _ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h172354ca0391548fE
200005ac g     O .bss	00000004 g_os_sanity_check_list
08006b76 g     F .text	0000000c sensor_pkg_init
08007de0 g     F .text	0000004a os_memblock_get
0800842c g     F .text	00000084 os_sched_wakeup
08003922 g     F .text	00000034 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE
080077f2 g     F .text	00000034 os_mqueue_get
080085a2 g     F .text	00000012 os_sem_init
08009ec8 g     F .text	0000002a get_timer_value
08009eb0 g     F .text	00000008 timer_interrupt_enable
08009586 g     F .text	0000004a mem_init_mbuf_pool
08004af8 g     F .text	0000000e _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17h7160b6abac7a3a12E
20002bb0 g     O .bss	00000004 g_os_last_ctx_sw_time
080085b4 g     F .text	00000084 os_sem_release
08008b90 g     F .text	00000028 memcmp
08006f62 g     F .text	0000000c os_arch_init
08002434 g     F .text	00000008 _ZN6mynewt3sys7console8printint17h7c7d7028aeda8dd2E
08006362 g     F .text	0000000c sysinit_start
080097cc g     F .text	000000cc hal_timer_config
08007548 g     F .text	0000005e os_dev_open
0800407c g     F .text	0000000c _ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E
08007008 g     F .text	00000002 plic_default_isr
080096ac g     F .text	0000000e gd32vf103_periph_create
080054fe g     F .text	00000060 sensor_network_prepare_post
08004af8 g     F .text	0000000e _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE
08008638 g     F .text	000000d2 os_sem_pend
080098ca g     F .text	00000002 hal_watchdog_enable
08006136 g     F .text	00000028 coap_set_token
08005678 g     F .text	0000007e get_device_id
08005852 g     F .text	0000005c oc_allocate_mbuf
080034b8 g     F .text	000001b4 _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E
08009ffc g     F .text	00000056 eclic_set_irq_priority
08007826 g     F .text	0000005e os_mqueue_put
08004fe4 g     F .text	00000028 init_sensor_coap
08007ed0 g     F .text	0000004c os_msys_register
20002b38 g     O .bss	00000004 g_os_idle_ctr
0800a4a8 g     F .text	0000003e flash_area_open
0800504e g     F .text	00000030 json_rep_reset
08002e7a g     F .text	00000046 _ZN4core9panicking5panic17h53ca63c6ac6312f8E
2000055c g       .bss	00000000 __bss_start
08008bd2 g     F .text	00000014 memset
0800475c g     F .text	00000076 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h562f60f4fbcc2e1dE
080047d2 g     F .text	00000076 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17hc1bd8b99f165c287E
0800196c g     F .text	00000170 main
08002f08 g     F .text	0000003c _ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E
0800a068 g       .text	00000000 trap_entry
08004df8 g     F .text	00000030 console_out_nolock
0800240a g     F .text	00000008 _ZN6mynewt3sys7console5print17hd4cb89499f7dc1b1E
08006770 g     F .text	0000002c json_encode_array_start
08004ace g     F .text	00000010 _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E
0800b092 g     F .text	0000008c .hidden __ltsf2
08001226 g       .init	00000000 disable_mcycle_minstret
080094f4 g     F .text	00000014 rust_sysinit
0800621c g     F .text	0000002a oc_send_buffer
0800636e g     F .text	0000000a sysinit_end
0800a58e g     F .text	00000002 modlog_init
08007620 g     F .text	00000008 os_eventq_inited
0800b410 g     F .text	0000016a .hidden __truncdfsf2
20002a50 g     O .bss	00000020 oc_transports
08009ec0 g     F .text	00000008 mtime_hi
0800a8e4 g     F .text	0000005c hal_flash_read
080077b4 g     F .text	0000000a os_eventq_dflt_get
08009898 g     F .text	0000002e hal_timer_read
0800a052 g     F .text	00000012 eclic_mode_enable
0800a40e g     F .text	00000002 oc_register_gatt
080076aa g     F .text	0000009a os_eventq_get
08002f8a g     F .text	000001ca _ZN4core5slice6memchr6memchr17h94d07a4704a27026E
080089bc g     F .text	00000026 os_time_ms_to_ticks
200029ed g     O .bss	00000001 g_silence_console
080073a8 g     F .text	0000003a os_callout_wakeup_ticks
08006b82 g     F .text	00000022 sensor_lock
20002d24 g     O .bss	00000004 flash_map_entries
08007b38 g     F .text	000000d4 os_mbuf_adj
08004848 g     F .text	00000092 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E
0800b11e g     F .text	00000290 .hidden __mulsf3
08001020 g       .imghdr	00000000 __text
08009f74 g     F .text	00000024 eclic_set_nlbits
08004072 g     F .text	0000000a _ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E
0800a7a0 g     F .text	0000001c mfg_seek_next
08008c0c g     F .text	00000020 strcmp
08006b14 g     F .text	0000004a sensor_mgr_find_next
08008372 g     F .text	0000000a os_sched_get_current_task
08004cf6 g     F .text	00000034 console_write
08002c26 g     F .text	00000022 _ZN6mynewt4libs14sensor_network12prepare_post17hd02b64e4d7b637f9E
080013fe g     F .text	00000016 lrand48
080067ce g     F .text	00000028 hal_bsp_hw_id
08001322 g     F .text	0000005e SystemInit
080073f4 g     F .text	00000010 os_cputime_get32
080028c8 g     F .text	00000018 _ZN6mynewt7sysinit17h46656f63b85c8fe0E
08007764 g     F .text	00000050 os_eventq_remove
08006762 g     F .text	0000000e json_encode_array_name
08001380 g     F .text	00000002 _fini
0800555e g     F .text	0000002a sensor_network_do_post
08006a58 g     F .text	0000000c sensor_mgr_evq_get
08008be6 g     F .text	00000026 sprintf
0800d7ec g     O .rodata	00000100 .hidden __clz_tab
08008540 g     F .text	00000030 os_sched
08006246 g     F .text	0000006c oc_send_multicast_message
080080d6 g     F .text	0000010a os_mutex_pend
080061c2 g     F .text	0000003c coap_set_header_uri_query
08006390 g     F .text	0000004e json_encode_object_start
08005d0a g     F .text	00000416 coap_serialize_message
08003e24 g     F .text	0000024e _ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE
08002412 g     F .text	00000022 _ZN6mynewt3sys7console10print_strn17h04bd7e2a27ff349cE
08006ba4 g     F .text	00000010 sensor_unlock
20000558 g     O .sdata	00000004 _impure_ptr
080077be g     F .text	00000034 os_mqueue_init
08009996 g     F .text	00000018 rcu_periph_reset_enable
080046e2 g     F .text	0000007a _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h1d24bfddebe6efa8E
08004d6e g     F .text	00000028 console_flush
20000574 g     O .bss	00000004 oc_content_format
080047d2 g     F .text	00000076 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E
20000000 g       .dalign	00000000 _data
20002aac g     O .bss	00000020 st_up_osco
0800733c g     F .text	0000006c os_callout_tick
0800d764 g     O .rodata	00000048 sysflash_map_dflt
080028e0 g     F .text	000000a6 _ZN6mynewt4Strn3new17h505d7b5ee6564253E
080046e2 g     F .text	0000007a _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E
08005588 g     F .text	0000001a do_server_post
080071d2 g     F .text	00000020 os_start
08004668 g     F .text	0000007a _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17he275dc913fe9b8e5E
08006cd4 g     F .text	00000036 sensor_mgr_register
08009954 g     F .text	0000002a eclic_irq_enable
0800531c g     F .text	0000000c do_sensor_post
08001f44 g     F .text	000000d6 _ZN6mynewt2hw6sensor19new_sensor_listener17h28f0369dc17b732dE
080093dc g     F .text	00000022 json_helper_object_array_start_item
08007d12 g     F .text	0000004a os_mbuf_concat
0800a1fe g     F .text	00000066 temp_stub_create
0800a83c g     F .text	0000001c mfg_open
20000540 g     O .sdata	00000008 g_os_run_list
2000055c g       .bss	00000000 _edata
0800a410 g     F .text	00000002 oc_register_ip4
080095d0 g     F .text	0000004a sysinit_app
20002d30 g       .bss	00000000 _end
200000e0 g     O .data	00000014 gd32vf103_tmr2
08006a42 g     F .text	00000016 sensor_mgr_unlock
08009f6a g     F .text	0000000a eclic_set_mth
080063de g     F .text	00000070 json_encode_object_key
0800597e g     F .text	00000028 oc_ri_mem_init
08006f26 g     F .text	00000008 os_arch_restore_sr
0800994e g     F .text	00000006 eclic_global_interrupt_enable
0800d900 g       .lalign	00000000 _data_lma
0800644e g     F .text	00000088 json_encode_object_entry
20002b3c g     O .bss	00000004 g_os_started
08002b66 g     F .text	000000c0 _ZN6mynewt4libs14sensor_network16init_server_post17h8ae86e6b88fcde3eE
080075a6 g     F .text	00000042 os_dev_close
08009eb8 g     F .text	00000008 mtime_lo
080047d2 g     F .text	00000076 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17h27565ff90d14f5eeE
0800590a g     F .text	00000022 oc_rep_init
08002e6a g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5226165d8771f8a2E
080013f6 g     F .text	00000008 exit
08009b8c g     F .text	0000001a timer_channel_output_struct_para_init
08003bbc g     F .text	00000222 _ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E
08006734 g     F .text	0000002e json_encode_object_finish
08007936 g     F .text	0000002a os_mbuf_free_chain
0800a2a6 g     F .text	0000000c temp_stub_default_cfg
08007f9e g     F .text	00000038 os_msys_init
0800b6d2 g     F .text	00000010 _kill
08008906 g     F .text	0000000a os_time_get
08009ef2 g     F .text	00000022 eclic_init
0800240a g     F .text	00000008 _ZN6mynewt3sys7console6buffer17hcf0a88e6843405bdE
08009e20 g     F .text	0000002c timer_channel_output_pulse_value_config
08004dae g     F .text	00000016 console_printint
20002ad0 g     O .bss	00000018 sensor_base_ts
080068ac g     F .text	0000001c sensor_mgr_match_bytype
0800507e g     F .text	00000024 json_rep_new
080078d2 g     F .text	0000004c os_mbuf_get_pkthdr
080067c4 g     F .text	00000006 _exit
0800500c g     F .text	00000042 init_sensor_post
08008726 g     F .text	00000110 os_task_init
0800475c g     F .text	00000076 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17hc8816b6e2fbd78aaE
08002340 g     F .text	000000ca _ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2413b8f055cbd3f6E
0800144e g     F .text	00000012 strlen
080074be g     F .text	00000030 os_dev_create
08007e2a g     F .text	00000030 os_memblock_put_from_cb
080075f4 g     F .text	0000002c os_eventq_init
08008910 g     F .text	00000050 os_time_advance
08008570 g     F .text	00000032 os_sched_resort
0800a8b0 g     F .text	00000034 hal_flash_init
08002a8a g     F .text	0000001e _ZN6mynewt6kernel2os15eventq_dflt_get17ha91431cf3cedfcd0E
08002892 g     F .text	00000002 _ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17he7e29acd0362609bE
08006d0a g     F .text	0000002c sensor_init
080074ee g     F .text	00000030 os_dev_initialize_all
0800243c g     F .text	00000008 _ZN6mynewt3sys7console5flush17hbf393adbbaededb9E
08004cba g     F .text	0000002c _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17h97d3cc39ae689800E
20000548 g     O .sdata	00000008 g_os_sleep_list
08001460 g     F .text	00000056 jrand48
0800961e g     F .text	0000000c hal_bsp_init
080071f2 g     F .text	0000003a os_pkg_init
08008226 g     F .text	00000014 os_sanity_check_init
080092a8 g     F .text	0000000e vfprintf
0800a416 g     F .text	00000002 oc_register_serial
0800b678 g     F .text	0000000c raise
20002b40 g     O .bss	00000050 g_os_main_task
08008b64 g     F .text	0000002c free
0800a414 g     F .text	00000002 oc_register_lora
0800a3e4 g     F .text	0000002a temp_stub_config



Disassembly of section .init:

08001020 <vector_base>:
    .weak  CAN1_EWMC_IRQHandler
    .weak  USBFS_IRQHandler

vector_base:
    /* Insert vector table at the start of ROM address 0x800 0000, similar to Arm */
    j _reset_handler
 8001020:	aab1                	j	800117c <_reset_handler>
 8001022:	0001                	nop
	...

0800117c <_reset_handler>:

_reset_handler:
    /* Called upon startup */

    /* Disable Local/Timer/External interrupts */
	csrc CSR_MSTATUS, MSTATUS_MIE
 800117c:	30047073          	csrci	mstatus,8

	/* Upon restart, program starts running at address 0x0, which is aliased to ROM address 0x800 0000. 
    We jump to the right ROM address 0x800 0000 so that RAM addressing works correctly. */
    la		a0,	_reset_handler
 8001180:	00000517          	auipc	a0,0x0
 8001184:	ffc50513          	addi	a0,a0,-4 # 800117c <_reset_handler>
    li		a1,	1
 8001188:	4585                	li	a1,1
	slli	a1,	a1, 29
 800118a:	05f6                	slli	a1,a1,0x1d
    bleu	a1, a0, _reset_handler_0800
 800118c:	00b57b63          	bgeu	a0,a1,80011a2 <_reset_handler_0800>
    srli	a1,	a1, 2
 8001190:	8189                	srli	a1,a1,0x2
    bleu	a1, a0, _reset_handler_0800
 8001192:	00b57863          	bgeu	a0,a1,80011a2 <_reset_handler_0800>
    la		a0,	_reset_handler_0800
 8001196:	00000517          	auipc	a0,0x0
 800119a:	00c50513          	addi	a0,a0,12 # 80011a2 <_reset_handler_0800>
    add		a0, a0, a1
 800119e:	952e                	add	a0,a0,a1
	jr      a0
 80011a0:	8502                	jr	a0

080011a2 <_reset_handler_0800>:

_reset_handler_0800:
    /* We are now running at the right ROM address 0x800 0000 */

    /* Set the the NMI base to share with mtvec by setting CSR_MMISC_CTL */
    li t0, 0x200
 80011a2:	20000293          	li	t0,512
    csrs CSR_MMISC_CTL, t0
 80011a6:	7d02a073          	csrs	0x7d0,t0

	/* Intialise the mtvt */
    la t0, vector_base
 80011aa:	00000297          	auipc	t0,0x0
 80011ae:	e7628293          	addi	t0,t0,-394 # 8001020 <vector_base>
    csrw CSR_MTVT, t0
 80011b2:	30729073          	csrw	mtvt,t0

	/* Intialise the mtvt2 and enable it */
    la t0, irq_entry
 80011b6:	00000297          	auipc	t0,0x0
 80011ba:	1ce28293          	addi	t0,t0,462 # 8001384 <irq_entry>
    csrw CSR_MTVT2, t0
 80011be:	7ec29073          	csrw	0x7ec,t0
    csrs CSR_MTVT2, 0x1
 80011c2:	7ec0e073          	csrsi	0x7ec,1
	csrw fcsr, x0
#endif

.option push
.option norelax
	la gp, __global_pointer$
 80011c6:	18000197          	auipc	gp,0x18000
 80011ca:	b5a18193          	addi	gp,gp,-1190 # 20000d20 <__global_pointer$>
.option pop
	la sp, _sp
 80011ce:	18004117          	auipc	sp,0x18004
 80011d2:	e3210113          	addi	sp,sp,-462 # 20005000 <_sp>

	/* Load data section */
	la a0, _data_lma
 80011d6:	0000c517          	auipc	a0,0xc
 80011da:	72a50513          	addi	a0,a0,1834 # 800d900 <_data_lma>
	la a1, _data
 80011de:	17fff597          	auipc	a1,0x17fff
 80011e2:	e2258593          	addi	a1,a1,-478 # 20000000 <_data>
	la a2, _edata
 80011e6:	83c18613          	addi	a2,gp,-1988 # 2000055c <__bss_start>
	bgeu a1, a2, 2f
 80011ea:	00c5fa63          	bgeu	a1,a2,80011fe <_reset_handler_0800+0x5c>
1:
	lw t0, (a0)
 80011ee:	00052283          	lw	t0,0(a0)
	sw t0, (a1)
 80011f2:	0055a023          	sw	t0,0(a1)
	addi a0, a0, 4
 80011f6:	0511                	addi	a0,a0,4
	addi a1, a1, 4
 80011f8:	0591                	addi	a1,a1,4
	bltu a1, a2, 1b
 80011fa:	fec5eae3          	bltu	a1,a2,80011ee <_reset_handler_0800+0x4c>
2:
	/* Clear bss section */
	la a0, __bss_start
 80011fe:	83c18513          	addi	a0,gp,-1988 # 2000055c <__bss_start>
	la a1, _end
 8001202:	18002597          	auipc	a1,0x18002
 8001206:	b2e58593          	addi	a1,a1,-1234 # 20002d30 <_end>
	bgeu a0, a1, 2f
 800120a:	00b57763          	bgeu	a0,a1,8001218 <_reset_handler_0800+0x76>
1:
	sw zero, (a0)
 800120e:	00052023          	sw	zero,0(a0)
	addi a0, a0, 4
 8001212:	0511                	addi	a0,a0,4
	bltu a0, a1, 1b
 8001214:	feb56de3          	bltu	a0,a1,800120e <_reset_handler_0800+0x6c>
2:
	/*enable mcycle_minstret*/
    csrci CSR_MCOUNTINHIBIT, 0x5
 8001218:	3202f073          	csrci	mucounteren,5
	/* NOTUSED: Call global constructors
	la a0, __libc_fini_array
	call atexit
	call __libc_init_array */

    call SystemInit
 800121c:	2219                	jal	8001322 <SystemInit>
    call _start
 800121e:	2c11                	jal	8001432 <_start>
    call _fini
 8001220:	2285                	jal	8001380 <_fini>
    tail exit
 8001222:	aad1                	j	80013f6 <exit>
1:
	j 1b
 8001224:	a001                	j	8001224 <_reset_handler_0800+0x82>

08001226 <disable_mcycle_minstret>:
	
	.global disable_mcycle_minstret
disable_mcycle_minstret:
    csrsi CSR_MCOUNTINHIBIT, 0x5
 8001226:	3202e073          	csrsi	mucounteren,5
	ret
 800122a:	8082                	ret

0800122c <enable_mcycle_minstret>:

	.global enable_mcycle_minstret
enable_mcycle_minstret:
    csrci CSR_MCOUNTINHIBIT, 0x5
 800122c:	3202f073          	csrci	mucounteren,5
	ret
 8001230:	8082                	ret
	...

Disassembly of section .text:

08001234 <system_clock_108m_hxtal>:
{
    uint32_t timeout   = 0U;
    uint32_t stab_flag = 0U;

    /* enable HXTAL */
    RCU_CTL |= RCU_CTL_HXTALEN;
 8001234:	40021737          	lui	a4,0x40021
 8001238:	431c                	lw	a5,0(a4)
 800123a:	66c1                	lui	a3,0x10
 800123c:	8fd5                	or	a5,a5,a3
 800123e:	c31c                	sw	a5,0(a4)
    uint32_t timeout   = 0U;
 8001240:	4781                	li	a5,0

    /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
    do{
        timeout++;
 8001242:	0785                	addi	a5,a5,1
        stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
 8001244:	40021737          	lui	a4,0x40021
 8001248:	4318                	lw	a4,0(a4)
    }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
 800124a:	00e71693          	slli	a3,a4,0xe
 800124e:	0006c663          	bltz	a3,800125a <system_clock_108m_hxtal+0x26>
 8001252:	6741                	lui	a4,0x10
 8001254:	177d                	addi	a4,a4,-1
 8001256:	fee796e3          	bne	a5,a4,8001242 <system_clock_108m_hxtal+0xe>

    /* if fail */
    if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
 800125a:	400217b7          	lui	a5,0x40021
 800125e:	439c                	lw	a5,0(a5)
 8001260:	00e79713          	slli	a4,a5,0xe
 8001264:	00074363          	bltz	a4,800126a <system_clock_108m_hxtal+0x36>
        while(1){
        }
 8001268:	a001                	j	8001268 <system_clock_108m_hxtal+0x34>
    }

    /* HXTAL is stable */
    /* AHB = SYSCLK */
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 800126a:	400217b7          	lui	a5,0x40021
 800126e:	43d8                	lw	a4,4(a5)
 8001270:	c3d8                	sw	a4,4(a5)
    /* APB2 = AHB/1 */
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV1;
 8001272:	43d8                	lw	a4,4(a5)
 8001274:	c3d8                	sw	a4,4(a5)
    /* APB1 = AHB/2 */
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
 8001276:	43d8                	lw	a4,4(a5)
 8001278:	40076713          	ori	a4,a4,1024
 800127c:	c3d8                	sw	a4,4(a5)

    /* CK_PLL = (CK_PREDIV0) * 27 = 108 MHz */ 
    RCU_CFG0 &= ~(RCU_CFG0_PLLMF | RCU_CFG0_PLLMF_4);
 800127e:	43d8                	lw	a4,4(a5)
 8001280:	dfc406b7          	lui	a3,0xdfc40
 8001284:	16fd                	addi	a3,a3,-1
 8001286:	8f75                	and	a4,a4,a3
 8001288:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= (RCU_PLLSRC_HXTAL | RCU_PLL_MUL27);
 800128a:	43d8                	lw	a4,4(a5)
 800128c:	202906b7          	lui	a3,0x20290
 8001290:	8f55                	or	a4,a4,a3
 8001292:	c3d8                	sw	a4,4(a5)
		RCU_CTL |= RCU_CTL_PLL2EN;
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL2STB)){
		}
    }else if(HXTAL_VALUE==8000000){
		RCU_CFG1 &= ~(RCU_CFG1_PREDV0SEL | RCU_CFG1_PREDV1 | RCU_CFG1_PLL1MF | RCU_CFG1_PREDV0);
 8001294:	57d8                	lw	a4,44(a5)
 8001296:	76bd                	lui	a3,0xfffef
 8001298:	8f75                	and	a4,a4,a3
 800129a:	d7d8                	sw	a4,44(a5)
		RCU_CFG1 |= (RCU_PREDV0SRC_HXTAL | RCU_PREDV0_DIV2 | RCU_PREDV1_DIV2 | RCU_PLL1_MUL20 | RCU_PLL2_MUL20);
 800129c:	57d8                	lw	a4,44(a5)
 800129e:	66c1                	lui	a3,0x10
 80012a0:	f1168693          	addi	a3,a3,-239 # ff11 <__stack_size+0xf711>
 80012a4:	8f55                	or	a4,a4,a3
 80012a6:	d7d8                	sw	a4,44(a5)

		/* enable PLL1 */
		RCU_CTL |= RCU_CTL_PLL1EN;
 80012a8:	4398                	lw	a4,0(a5)
 80012aa:	040006b7          	lui	a3,0x4000
 80012ae:	8f55                	or	a4,a4,a3
 80012b0:	c398                	sw	a4,0(a5)
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL1STB)){
 80012b2:	400217b7          	lui	a5,0x40021
 80012b6:	439c                	lw	a5,0(a5)
 80012b8:	00479713          	slli	a4,a5,0x4
 80012bc:	fe075be3          	bgez	a4,80012b2 <system_clock_108m_hxtal+0x7e>
		}

		/* enable PLL2 */
		RCU_CTL |= RCU_CTL_PLL2EN;
 80012c0:	40021737          	lui	a4,0x40021
 80012c4:	431c                	lw	a5,0(a4)
 80012c6:	100006b7          	lui	a3,0x10000
 80012ca:	8fd5                	or	a5,a5,a3
 80012cc:	c31c                	sw	a5,0(a4)
		/* wait till PLL1 is ready */
		while(0U == (RCU_CTL & RCU_CTL_PLL2STB)){
 80012ce:	400217b7          	lui	a5,0x40021
 80012d2:	439c                	lw	a5,0(a5)
 80012d4:	00279713          	slli	a4,a5,0x2
 80012d8:	fe075be3          	bgez	a4,80012ce <system_clock_108m_hxtal+0x9a>
		}

    }
    /* enable PLL */
    RCU_CTL |= RCU_CTL_PLLEN;
 80012dc:	40021737          	lui	a4,0x40021
 80012e0:	431c                	lw	a5,0(a4)
 80012e2:	010006b7          	lui	a3,0x1000
 80012e6:	8fd5                	or	a5,a5,a3
 80012e8:	c31c                	sw	a5,0(a4)

    /* wait until PLL is stable */
    while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
 80012ea:	400217b7          	lui	a5,0x40021
 80012ee:	439c                	lw	a5,0(a5)
 80012f0:	00679713          	slli	a4,a5,0x6
 80012f4:	fe075be3          	bgez	a4,80012ea <system_clock_108m_hxtal+0xb6>
    }

    /* select PLL as system clock */
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 80012f8:	400217b7          	lui	a5,0x40021
 80012fc:	43d8                	lw	a4,4(a5)
 80012fe:	9b71                	andi	a4,a4,-4
 8001300:	c3d8                	sw	a4,4(a5)
    RCU_CFG0 |= RCU_CKSYSSRC_PLL;
 8001302:	43d8                	lw	a4,4(a5)
 8001304:	00276713          	ori	a4,a4,2
 8001308:	c3d8                	sw	a4,4(a5)

    /* wait until PLL is selected as system clock */
    while(0U == (RCU_CFG0 & RCU_SCSS_PLL)){
 800130a:	400217b7          	lui	a5,0x40021
 800130e:	43dc                	lw	a5,4(a5)
 8001310:	8ba1                	andi	a5,a5,8
 8001312:	dfe5                	beqz	a5,800130a <system_clock_108m_hxtal+0xd6>
    }
}
 8001314:	8082                	ret

08001316 <system_clock_config>:
{
 8001316:	1141                	addi	sp,sp,-16
 8001318:	c606                	sw	ra,12(sp)
    system_clock_108m_hxtal();
 800131a:	3f29                	jal	8001234 <system_clock_108m_hxtal>
}
 800131c:	40b2                	lw	ra,12(sp)
 800131e:	0141                	addi	sp,sp,16
 8001320:	8082                	ret

08001322 <SystemInit>:
{
 8001322:	1141                	addi	sp,sp,-16
 8001324:	c606                	sw	ra,12(sp)
    RCU_CTL |= RCU_CTL_IRC8MEN;
 8001326:	400217b7          	lui	a5,0x40021
 800132a:	4398                	lw	a4,0(a5)
 800132c:	00176713          	ori	a4,a4,1
 8001330:	c398                	sw	a4,0(a5)
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 8001332:	43d8                	lw	a4,4(a5)
 8001334:	e0ff06b7          	lui	a3,0xe0ff0
 8001338:	06b1                	addi	a3,a3,12
 800133a:	8f75                	and	a4,a4,a3
 800133c:	c3d8                	sw	a4,4(a5)
    RCU_CTL &= ~(RCU_CTL_HXTALEN | RCU_CTL_CKMEN | RCU_CTL_PLLEN);
 800133e:	4398                	lw	a4,0(a5)
 8001340:	fef706b7          	lui	a3,0xfef70
 8001344:	16fd                	addi	a3,a3,-1
 8001346:	8f75                	and	a4,a4,a3
 8001348:	c398                	sw	a4,0(a5)
    RCU_CTL &= ~(RCU_CTL_HXTALBPS);
 800134a:	4398                	lw	a4,0(a5)
 800134c:	fffc06b7          	lui	a3,0xfffc0
 8001350:	16fd                	addi	a3,a3,-1
 8001352:	8f75                	and	a4,a4,a3
 8001354:	c398                	sw	a4,0(a5)
    RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PREDV0_LSB | RCU_CFG0_PLLMF |
 8001356:	43d8                	lw	a4,4(a5)
 8001358:	df0106b7          	lui	a3,0xdf010
 800135c:	16fd                	addi	a3,a3,-1
 800135e:	8f75                	and	a4,a4,a3
 8001360:	c3d8                	sw	a4,4(a5)
    RCU_CFG1 = 0x00000000U;
 8001362:	0207a623          	sw	zero,44(a5) # 4002102c <_sp+0x2001c02c>
    RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_PLL1EN | RCU_CTL_PLL2EN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
 8001366:	4398                	lw	a4,0(a5)
 8001368:	eaf706b7          	lui	a3,0xeaf70
 800136c:	16fd                	addi	a3,a3,-1
 800136e:	8f75                	and	a4,a4,a3
 8001370:	c398                	sw	a4,0(a5)
    RCU_INT = 0x00FF0000U;
 8001372:	00ff0737          	lui	a4,0xff0
 8001376:	c798                	sw	a4,8(a5)
    system_clock_config();
 8001378:	3f79                	jal	8001316 <system_clock_config>
}
 800137a:	40b2                	lw	ra,12(sp)
 800137c:	0141                	addi	sp,sp,16
 800137e:	8082                	ret

08001380 <_fini>:
//  Function called after main() finishes */
void _fini() {
    //  Do nothing
 8001380:	8082                	ret
	...

08001384 <irq_entry>:
.weak irq_entry
irq_entry: // -------------> This label will be set to MTVT2 register
  // Allocate the stack space
  

  SAVE_CONTEXT// Save 16 regs
 8001384:	715d                	addi	sp,sp,-80
 8001386:	c006                	sw	ra,0(sp)
 8001388:	c212                	sw	tp,4(sp)
 800138a:	c416                	sw	t0,8(sp)
 800138c:	c61a                	sw	t1,12(sp)
 800138e:	c81e                	sw	t2,16(sp)
 8001390:	ca2a                	sw	a0,20(sp)
 8001392:	cc2e                	sw	a1,24(sp)
 8001394:	ce32                	sw	a2,28(sp)
 8001396:	d036                	sw	a3,32(sp)
 8001398:	d23a                	sw	a4,36(sp)
 800139a:	d43e                	sw	a5,40(sp)
 800139c:	d642                	sw	a6,44(sp)
 800139e:	d846                	sw	a7,48(sp)
 80013a0:	da72                	sw	t3,52(sp)
 80013a2:	dc76                	sw	t4,56(sp)
 80013a4:	de7a                	sw	t5,60(sp)
 80013a6:	c0fe                	sw	t6,64(sp)

  //------This special CSR read operation, which is actually use mcause as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMCAUSE, 17
 80013a8:	7ee8d073          	csrwi	0x7ee,17
  //------This special CSR read operation, which is actually use mepc as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMEPC, 18
 80013ac:	7ef95073          	csrwi	0x7ef,18
  //------This special CSR read operation, which is actually use Msubm as operand to directly store it to memory
  csrrwi  x0, CSR_PUSHMSUBM, 19
 80013b0:	7eb9d073          	csrwi	0x7eb,19

080013b4 <service_loop>:
 
service_loop:
  //------This special CSR read/write operation, which is actually Claim the CLIC to find its pending highest
  // ID, if the ID is not 0, then automatically enable the mstatus.MIE, and jump to its vector-entry-label, and
  // update the link register 
  csrrw ra, CSR_JALMNXTI, ra 
 80013b4:	7ed090f3          	csrrw	ra,0x7ed,ra
  
  //RESTORE_CONTEXT_EXCPT_X5

  #---- Critical section with interrupts disabled -----------------------
  DISABLE_MIE # Disable interrupts 
 80013b8:	30047073          	csrci	mstatus,8

  LOAD x5,  19*REGBYTES(sp)
 80013bc:	42b6                	lw	t0,76(sp)
  csrw CSR_MSUBM, x5  
 80013be:	7c429073          	csrw	0x7c4,t0
  LOAD x5,  18*REGBYTES(sp)
 80013c2:	42a6                	lw	t0,72(sp)
  csrw CSR_MEPC, x5  
 80013c4:	34129073          	csrw	mepc,t0
  LOAD x5,  17*REGBYTES(sp)
 80013c8:	4296                	lw	t0,68(sp)
  csrw CSR_MCAUSE, x5  
 80013ca:	34229073          	csrw	mcause,t0


  RESTORE_CONTEXT
 80013ce:	4082                	lw	ra,0(sp)
 80013d0:	4212                	lw	tp,4(sp)
 80013d2:	42a2                	lw	t0,8(sp)
 80013d4:	4332                	lw	t1,12(sp)
 80013d6:	43c2                	lw	t2,16(sp)
 80013d8:	4552                	lw	a0,20(sp)
 80013da:	45e2                	lw	a1,24(sp)
 80013dc:	4672                	lw	a2,28(sp)
 80013de:	5682                	lw	a3,32(sp)
 80013e0:	5712                	lw	a4,36(sp)
 80013e2:	57a2                	lw	a5,40(sp)
 80013e4:	5832                	lw	a6,44(sp)
 80013e6:	58c2                	lw	a7,48(sp)
 80013e8:	5e52                	lw	t3,52(sp)
 80013ea:	5ee2                	lw	t4,56(sp)
 80013ec:	5f72                	lw	t5,60(sp)
 80013ee:	4f86                	lw	t6,64(sp)
 80013f0:	6161                	addi	sp,sp,80

  
  // Return to regular code
  mret
 80013f2:	30200073          	mret

080013f6 <exit>:

#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
 80013f6:	1141                	addi	sp,sp,-16
 80013f8:	c606                	sw	ra,12(sp)
	_exit(err);
 80013fa:	3ca050ef          	jal	ra,80067c4 <_exit>

080013fe <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
 80013fe:	1141                	addi	sp,sp,-16
 8001400:	c606                	sw	ra,12(sp)
	return (uint32_t) jrand48(__rand48_seed) >> 1;
 8001402:	20003537          	lui	a0,0x20003
 8001406:	9e050513          	addi	a0,a0,-1568 # 200029e0 <__rand48_seed>
 800140a:	2899                	jal	8001460 <jrand48>
}
 800140c:	8105                	srli	a0,a0,0x1
 800140e:	40b2                	lw	ra,12(sp)
 8001410:	0141                	addi	sp,sp,16
 8001412:	8082                	ret

08001414 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
 8001414:	4501                	li	a0,0
 8001416:	8082                	ret

08001418 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
 8001418:	1141                	addi	sp,sp,-16
 800141a:	c606                	sw	ra,12(sp)
 800141c:	c422                	sw	s0,8(sp)
 800141e:	852e                	mv	a0,a1
 8001420:	8432                	mv	s0,a2
    console_write(bp, n);
 8001422:	85b2                	mv	a1,a2
 8001424:	0d3030ef          	jal	ra,8004cf6 <console_write>
    return n;
}
 8001428:	8522                	mv	a0,s0
 800142a:	40b2                	lw	ra,12(sp)
 800142c:	4422                	lw	s0,8(sp)
 800142e:	0141                	addi	sp,sp,16
 8001430:	8082                	ret

08001432 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
 8001432:	1141                	addi	sp,sp,-16
 8001434:	c606                	sw	ra,12(sp)
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
 8001436:	08002537          	lui	a0,0x8002
 800143a:	96c50513          	addi	a0,a0,-1684 # 800196c <main>
 800143e:	4e9050ef          	jal	ra,8007126 <os_init>
    os_start();
 8001442:	591050ef          	jal	ra,80071d2 <os_start>
#endif
}
 8001446:	40b2                	lw	ra,12(sp)
 8001448:	0141                	addi	sp,sp,16
 800144a:	8082                	ret

0800144c <_init>:

void
_init(void)
{
}
 800144c:	8082                	ret

0800144e <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
 800144e:	87aa                	mv	a5,a0
	while (*ss)
 8001450:	0007c703          	lbu	a4,0(a5)
 8001454:	c319                	beqz	a4,800145a <strlen+0xc>
		ss++;
 8001456:	0785                	addi	a5,a5,1
 8001458:	bfe5                	j	8001450 <strlen+0x2>
	return ss - s;
}
 800145a:	40a78533          	sub	a0,a5,a0
 800145e:	8082                	ret

08001460 <jrand48>:
long jrand48(unsigned short xsubi[3])
{
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
 8001460:	00055783          	lhu	a5,0(a0)
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
 8001464:	00255703          	lhu	a4,2(a0)
 8001468:	0742                	slli	a4,a4,0x10
	x = (uint64_t) (uint16_t) xsubi[0] +
 800146a:	973e                	add	a4,a4,a5
 800146c:	00f737b3          	sltu	a5,a4,a5
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
 8001470:	00455683          	lhu	a3,4(a0)
	x = (uint64_t) (uint16_t) xsubi[0] +
 8001474:	97b6                	add	a5,a5,a3

	x = (0x5deece66dULL * x) + 0xb;
 8001476:	deece637          	lui	a2,0xdeece
 800147a:	66d60613          	addi	a2,a2,1645 # deece66d <_sp+0xbeec966d>
 800147e:	02c787b3          	mul	a5,a5,a2
 8001482:	4695                	li	a3,5
 8001484:	02e686b3          	mul	a3,a3,a4
 8001488:	97b6                	add	a5,a5,a3
 800148a:	02c706b3          	mul	a3,a4,a2
 800148e:	02c73733          	mulhu	a4,a4,a2
 8001492:	97ba                	add	a5,a5,a4
 8001494:	00b68713          	addi	a4,a3,11 # eaf7000b <_sp+0xcaf6b00b>
 8001498:	00d736b3          	sltu	a3,a4,a3
 800149c:	97b6                	add	a5,a5,a3

	xsubi[0] = (unsigned short)(uint16_t) x;
 800149e:	00e51023          	sh	a4,0(a0)
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
 80014a2:	01079693          	slli	a3,a5,0x10
 80014a6:	8341                	srli	a4,a4,0x10
 80014a8:	8f55                	or	a4,a4,a3
 80014aa:	00e51123          	sh	a4,2(a0)
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
 80014ae:	00f51223          	sh	a5,4(a0)

	return (long)(int32_t) (x >> 16);
}
 80014b2:	853a                	mv	a0,a4
 80014b4:	8082                	ret

080014b6 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17had15619c85373ca3E>:
 80014b6:	862e                	mv	a2,a1
 80014b8:	414c                	lw	a1,4(a0)
 80014ba:	4108                	lw	a0,0(a0)
 80014bc:	00003317          	auipc	t1,0x3
 80014c0:	c0830067          	jr	-1016(t1) # 80040c4 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h3a34938e29ce59dcE>

080014c4 <_ZN4core6result13unwrap_failed17h3314c9605742429cE>:
 80014c4:	7139                	addi	sp,sp,-64
 80014c6:	de06                	sw	ra,60(sp)
 80014c8:	4621                	li	a2,8
 80014ca:	c232                	sw	a2,4(sp)
 80014cc:	c02a                	sw	a0,0(sp)
 80014ce:	c62e                	sw	a1,12(sp)
 80014d0:	08003537          	lui	a0,0x8003
 80014d4:	c8c50513          	addi	a0,a0,-884 # 8002c8c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E>
 80014d8:	da2a                	sw	a0,52(sp)
 80014da:	0068                	addi	a0,sp,12
 80014dc:	d82a                	sw	a0,48(sp)
 80014de:	08001537          	lui	a0,0x8001
 80014e2:	4b650513          	addi	a0,a0,1206 # 80014b6 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17had15619c85373ca3E>
 80014e6:	d62a                	sw	a0,44(sp)
 80014e8:	850a                	mv	a0,sp
 80014ea:	d42a                	sw	a0,40(sp)
 80014ec:	1028                	addi	a0,sp,40
 80014ee:	d02a                	sw	a0,32(sp)
 80014f0:	cc02                	sw	zero,24(sp)
 80014f2:	4509                	li	a0,2
 80014f4:	d22a                	sw	a0,36(sp)
 80014f6:	ca2a                	sw	a0,20(sp)
 80014f8:	0800b537          	lui	a0,0x800b
 80014fc:	6f450513          	addi	a0,a0,1780 # 800b6f4 <_kill+0x22>
 8001500:	c82a                	sw	a0,16(sp)
 8001502:	0800b537          	lui	a0,0x800b
 8001506:	71c50593          	addi	a1,a0,1820 # 800b71c <_kill+0x4a>
 800150a:	0808                	addi	a0,sp,16
 800150c:	00002097          	auipc	ra,0x2
 8001510:	9fc080e7          	jalr	-1540(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001514:	0000a097          	auipc	ra,0xa
 8001518:	0dc080e7          	jalr	220(ra) # 800b5f0 <abort>

0800151c <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE>:
};
use mynewt_macros::strn;        //  Import Mynewt procedural macros

///  Aggregate the sensor value with other sensor data before transmitting to server.
///  If the sensor value is a GPS geolocation, we remember it and attach it to other sensor data for transmission.
pub fn aggregate_sensor_data(sensor_value: &SensorValue) -> MynewtResult<()>  {  //  Returns an error code upon error.
 800151c:	7151                	addi	sp,sp,-240
/*
 800151e:	d786                	sw	ra,236(sp)
 8001520:	d5a6                	sw	s1,232(sp)
 8001522:	d3ca                	sw	s2,228(sp)
 8001524:	d1ce                	sw	s3,224(sp)
 8001526:	cfd2                	sw	s4,220(sp)
 8001528:	cdd6                	sw	s5,216(sp)
 800152a:	cbda                	sw	s6,212(sp)
 800152c:	c9de                	sw	s7,208(sp)
 800152e:	c7e2                	sw	s8,204(sp)
 8001530:	c5e6                	sw	s9,200(sp)
 8001532:	c3ea                	sw	s10,196(sp)
 8001534:	c1ee                	sw	s11,192(sp)
    if let SensorValueType::Geolocation {..} = sensor_value.value {
 8001536:	00052c03          	lw	s8,0(a0)
 800153a:	458d                	li	a1,3
 800153c:	02bc1963          	bne	s8,a1,800156e <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0x52>
 8001540:	200005b7          	lui	a1,0x20000
 8001544:	5c858613          	addi	a2,a1,1480 # 200005c8 <_ZN3app11app_network19CURRENT_GEOLOCATION17h3b985aea7df51bf5E>
        //  If this is a geolocation, save the geolocation for later transmission.
        unsafe { CURRENT_GEOLOCATION = sensor_value.value };  //  Current geolocation is unsafe because it's a mutable static
 8001548:	4d54                	lw	a3,28(a0)
 800154a:	ce54                	sw	a3,28(a2)
 800154c:	4d14                	lw	a3,24(a0)
 800154e:	ce14                	sw	a3,24(a2)
 8001550:	4954                	lw	a3,20(a0)
 8001552:	ca54                	sw	a3,20(a2)
 8001554:	4914                	lw	a3,16(a0)
 8001556:	ca14                	sw	a3,16(a2)
 8001558:	4554                	lw	a3,12(a0)
 800155a:	c654                	sw	a3,12(a2)
 800155c:	4514                	lw	a3,8(a0)
 800155e:	c614                	sw	a3,8(a2)
 8001560:	4154                	lw	a3,4(a0)
 8001562:	c254                	sw	a3,4(a2)
 8001564:	4108                	lw	a0,0(a0)
 8001566:	5ca5a423          	sw	a0,1480(a1)
 800156a:	4c85                	li	s9,1
 800156c:	a6cd                	j	800194e <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0x432>
        Ok(())
    } else {
        //  If this is temperature sensor data, attach the current geolocation to the sensor data for transmission.
        let transmit_value = SensorValue {
 800156e:	00452a83          	lw	s5,4(a0)
 8001572:	04052b03          	lw	s6,64(a0)
 8001576:	450c                	lw	a1,8(a0)
 8001578:	4910                	lw	a2,16(a0)
 800157a:	4d14                	lw	a3,24(a0)
 800157c:	4558                	lw	a4,12(a0)
 800157e:	495c                	lw	a5,20(a0)
 8001580:	4d48                	lw	a0,28(a0)
 8001582:	20000837          	lui	a6,0x20000
 8001586:	5c882483          	lw	s1,1480(a6) # 200005c8 <_ZN3app11app_network19CURRENT_GEOLOCATION17h3b985aea7df51bf5E>
 800158a:	d026                	sw	s1,32(sp)
 800158c:	ce2a                	sw	a0,28(sp)
 800158e:	ca3e                	sw	a5,20(sp)
 8001590:	c63a                	sw	a4,12(sp)
 8001592:	cc36                	sw	a3,24(sp)
 8001594:	c832                	sw	a2,16(sp)
 8001596:	c42e                	sw	a1,8(sp)
 8001598:	5c880513          	addi	a0,a6,1480
 800159c:	414c                	lw	a1,4(a0)
 800159e:	d22e                	sw	a1,36(sp)
 80015a0:	450c                	lw	a1,8(a0)
 80015a2:	d42e                	sw	a1,40(sp)
 80015a4:	454c                	lw	a1,12(a0)
 80015a6:	d62e                	sw	a1,44(sp)
 80015a8:	490c                	lw	a1,16(a0)
 80015aa:	d82e                	sw	a1,48(sp)
 80015ac:	494c                	lw	a1,20(a0)
 80015ae:	da2e                	sw	a1,52(sp)
 80015b0:	4d0c                	lw	a1,24(a0)
 80015b2:	dc2e                	sw	a1,56(sp)
 80015b4:	4d48                	lw	a0,28(a0)
 80015b6:	de2a                	sw	a0,60(sp)
///   {"key":"t",      "value":1715, "geo": { "lat": ..., "long": ... }},
///   {"key":"device", "value":"0102030405060708090a0b0c0d0e0f10"}
/// ]}
/// ```
fn send_sensor_data(val: &SensorValue) -> MynewtResult<()>  {  //  Returns an error code upon error.
    console::print("Rust send_sensor_data: ");
 80015b8:	0800b537          	lui	a0,0x800b
 80015bc:	7b050513          	addi	a0,a0,1968 # 800b7b0 <_kill+0xde>
 80015c0:	45dd                	li	a1,23
 80015c2:	00001097          	auipc	ra,0x1
 80015c6:	e48080e7          	jalr	-440(ra) # 800240a <_ZN6mynewt3sys7console5print17hd4cb89499f7dc1b1E>
 80015ca:	4c85                	li	s9,1
    if let SensorValueType::Uint(i) = val.value {
 80015cc:	039c1563          	bne	s8,s9,80015f6 <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0xda>
        console::print_strn(val.key);
 80015d0:	855a                	mv	a0,s6
 80015d2:	00001097          	auipc	ra,0x1
 80015d6:	e40080e7          	jalr	-448(ra) # 8002412 <_ZN6mynewt3sys7console10print_strn17h04bd7e2a27ff349cE>
        console::print("=");
 80015da:	0800b537          	lui	a0,0x800b
 80015de:	7c750513          	addi	a0,a0,1991 # 800b7c7 <_kill+0xf5>
 80015e2:	4585                	li	a1,1
 80015e4:	00001097          	auipc	ra,0x1
 80015e8:	e26080e7          	jalr	-474(ra) # 800240a <_ZN6mynewt3sys7console5print17hd4cb89499f7dc1b1E>
        console::printint(i as i32);
 80015ec:	8556                	mv	a0,s5
 80015ee:	00001097          	auipc	ra,0x1
 80015f2:	e46080e7          	jalr	-442(ra) # 8002434 <_ZN6mynewt3sys7console8printint17h7c7d7028aeda8dd2E>
    }
    console::print("\n");
 80015f6:	0800b537          	lui	a0,0x800b
 80015fa:	7c850913          	addi	s2,a0,1992 # 800b7c8 <_kill+0xf6>
 80015fe:	854a                	mv	a0,s2
 8001600:	85e6                	mv	a1,s9
 8001602:	00001097          	auipc	ra,0x1
 8001606:	e08080e7          	jalr	-504(ra) # 800240a <_ZN6mynewt3sys7console5print17hd4cb89499f7dc1b1E>
    console::flush(); ////
 800160a:	00001097          	auipc	ra,0x1
 800160e:	e32080e7          	jalr	-462(ra) # 800243c <_ZN6mynewt3sys7console5flush17hbf393adbbaededb9E>
 8001612:	1108                	addi	a0,sp,160

    //  Get a randomly-generated device ID that changes each time we restart the device.
    let device_id = sensor_network::get_device_id() ? ;
 8001614:	00001097          	auipc	ra,0x1
 8001618:	654080e7          	jalr	1620(ra) # 8002c68 <_ZN6mynewt4libs14sensor_network13get_device_id17hea5bbcf5456b66c0E>
 800161c:	551a                	lw	a0,164(sp)
 800161e:	558a                	lw	a1,160(sp)
 8001620:	01959463          	bne	a1,s9,8001628 <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0x10c>
 8001624:	8caa                	mv	s9,a0
 8001626:	a625                	j	800194e <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0x432>
 8001628:	55ba                	lw	a1,172(sp)
 800162a:	562a                	lw	a2,168(sp)
 800162c:	c2b2                	sw	a2,68(sp)
 800162e:	c0aa                	sw	a0,64(sp)
 8001630:	c4ae                	sw	a1,72(sp)

    //  Start composing the CoAP Server message with the sensor data in the payload.  This will 
    //  block other tasks from composing and posting CoAP messages (through a semaphore).
    //  We only have 1 memory buffer for composing CoAP messages so it needs to be locked.
    let rc = sensor_network::init_server_post( strn!(()) ) ? ;  //  `strn!(())` means use default CoAP URI in `syscfg.yml`
 8001632:	0800b537          	lui	a0,0x800b
 8001636:	7c950593          	addi	a1,a0,1993 # 800b7c9 <_kill+0xf7>
 800163a:	0a010993          	addi	s3,sp,160
 800163e:	854e                	mv	a0,s3
 8001640:	8666                	mv	a2,s9
 8001642:	00001097          	auipc	ra,0x1
 8001646:	29e080e7          	jalr	670(ra) # 80028e0 <_ZN6mynewt4Strn3new17h505d7b5ee6564253E>
 800164a:	0888                	addi	a0,sp,80
 800164c:	85ce                	mv	a1,s3
 800164e:	00001097          	auipc	ra,0x1
 8001652:	518080e7          	jalr	1304(ra) # 8002b66 <_ZN6mynewt4libs14sensor_network16init_server_post17h8ae86e6b88fcde3eE>
 8001656:	4546                	lw	a0,80(sp)
 8001658:	0ff57593          	andi	a1,a0,255
 800165c:	01959463          	bne	a1,s9,8001664 <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0x148>
 8001660:	4cd6                	lw	s9,84(sp)
 8001662:	a4f5                	j	800194e <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0x432>
 8001664:	65c1                	lui	a1,0x10
 8001666:	f0058593          	addi	a1,a1,-256 # ff00 <__stack_size+0xf700>
 800166a:	8d6d                	and	a0,a0,a1

    //  If network transport not ready, tell caller (Sensor Listener) to try again later.
    if !rc { return Err(MynewtError::SYS_EAGAIN); }
 800166c:	1c050663          	beqz	a0,8001838 <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0x31c>
 8001670:	1108                	addi	a0,sp,160
 8001672:	03200593          	li	a1,50

    //  Compose the CoAP Payload using the coap!() macro.
    //  Select @json or @cbor To encode CoAP Payload in JSON or CBOR format.
    let _payload = coap!( @json {        
 8001676:	00001097          	auipc	ra,0x1
 800167a:	5b0080e7          	jalr	1456(ra) # 8002c26 <_ZN6mynewt4libs14sensor_network12prepare_post17hd02b64e4d7b637f9E>
 800167e:	0a014503          	lbu	a0,160(sp)
 8001682:	29950f63          	beq	a0,s9,8001920 <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0x404>
 8001686:	1004                	addi	s1,sp,32
 8001688:	00004097          	auipc	ra,0x4
 800168c:	ca0080e7          	jalr	-864(ra) # 8005328 <json_rep_start_root_object>
 8001690:	20000537          	lui	a0,0x20000
 8001694:	5e850993          	addi	s3,a0,1512 # 200005e8 <_ZN6mynewt8encoding12coap_context12COAP_CONTEXT17hd1d9c5815270d297E>
 8001698:	854e                	mv	a0,s3
 800169a:	00001097          	auipc	ra,0x1
 800169e:	1f8080e7          	jalr	504(ra) # 8002892 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17he7e29acd0362609bE>
 80016a2:	8baa                	mv	s7,a0
 80016a4:	0800b537          	lui	a0,0x800b
 80016a8:	7ca50a13          	addi	s4,a0,1994 # 800b7ca <_kill+0xf8>
 80016ac:	461d                	li	a2,7
 80016ae:	854e                	mv	a0,s3
 80016b0:	85d2                	mv	a1,s4
 80016b2:	00001097          	auipc	ra,0x1
 80016b6:	08a080e7          	jalr	138(ra) # 800273c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE>
 80016ba:	85aa                	mv	a1,a0
 80016bc:	855e                	mv	a0,s7
 80016be:	00008097          	auipc	ra,0x8
 80016c2:	cce080e7          	jalr	-818(ra) # 800938c <json_helper_set_array>
 80016c6:	4cc8                	lw	a0,28(s1)
 80016c8:	d6aa                	sw	a0,108(sp)
 80016ca:	4c88                	lw	a0,24(s1)
 80016cc:	d4aa                	sw	a0,104(sp)
 80016ce:	48c8                	lw	a0,20(s1)
 80016d0:	d2aa                	sw	a0,100(sp)
 80016d2:	4888                	lw	a0,16(s1)
 80016d4:	d0aa                	sw	a0,96(sp)
 80016d6:	44c8                	lw	a0,12(s1)
 80016d8:	ceaa                	sw	a0,92(sp)
 80016da:	4488                	lw	a0,8(s1)
 80016dc:	ccaa                	sw	a0,88(sp)
 80016de:	40c8                	lw	a0,4(s1)
 80016e0:	caaa                	sw	a0,84(sp)
 80016e2:	4088                	lw	a0,0(s1)
 80016e4:	c8aa                	sw	a0,80(sp)
 80016e6:	159c1b63          	bne	s8,s9,800183c <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0x320>
 80016ea:	0800b537          	lui	a0,0x800b
 80016ee:	7d150b93          	addi	s7,a0,2001 # 800b7d1 <_kill+0xff>
 80016f2:	4635                	li	a2,13
 80016f4:	854e                	mv	a0,s3
 80016f6:	85de                	mv	a1,s7
 80016f8:	00001097          	auipc	ra,0x1
 80016fc:	044080e7          	jalr	68(ra) # 800273c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE>
 8001700:	00008097          	auipc	ra,0x8
 8001704:	cdc080e7          	jalr	-804(ra) # 80093dc <json_helper_object_array_start_item>
 8001708:	0800b537          	lui	a0,0x800b
 800170c:	7de50513          	addi	a0,a0,2014 # 800b7de <_kill+0x10c>
 8001710:	458d                	li	a1,3
 8001712:	00001097          	auipc	ra,0x1
 8001716:	182080e7          	jalr	386(ra) # 8002894 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h172354ca0391548fE>
 800171a:	84aa                	mv	s1,a0
 800171c:	8d2e                	mv	s10,a1
 800171e:	855a                	mv	a0,s6
 8001720:	00001097          	auipc	ra,0x1
 8001724:	176080e7          	jalr	374(ra) # 8002896 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17hae64e8766a77e514E>
 8001728:	8b2a                	mv	s6,a0
 800172a:	8dae                	mv	s11,a1
 800172c:	854e                	mv	a0,s3
 800172e:	00001097          	auipc	ra,0x1
 8001732:	164080e7          	jalr	356(ra) # 8002892 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17he7e29acd0362609bE>
 8001736:	8c2a                	mv	s8,a0
 8001738:	854e                	mv	a0,s3
 800173a:	85a6                	mv	a1,s1
 800173c:	866a                	mv	a2,s10
 800173e:	00001097          	auipc	ra,0x1
 8001742:	ffe080e7          	jalr	-2(ra) # 800273c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE>
 8001746:	84aa                	mv	s1,a0
 8001748:	854e                	mv	a0,s3
 800174a:	85da                	mv	a1,s6
 800174c:	866e                	mv	a2,s11
 800174e:	00001097          	auipc	ra,0x1
 8001752:	052080e7          	jalr	82(ra) # 80027a0 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h6c075bbdd12e1839E>
 8001756:	862a                	mv	a2,a0
 8001758:	8562                	mv	a0,s8
 800175a:	85a6                	mv	a1,s1
 800175c:	00008097          	auipc	ra,0x8
 8001760:	d32080e7          	jalr	-718(ra) # 800948e <json_helper_set_text_string>
 8001764:	0800b537          	lui	a0,0x800b
 8001768:	7e150513          	addi	a0,a0,2017 # 800b7e1 <_kill+0x10f>
 800176c:	4b15                	li	s6,5
 800176e:	85da                	mv	a1,s6
 8001770:	00001097          	auipc	ra,0x1
 8001774:	124080e7          	jalr	292(ra) # 8002894 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h172354ca0391548fE>
 8001778:	84aa                	mv	s1,a0
 800177a:	8c2e                	mv	s8,a1
 800177c:	854e                	mv	a0,s3
 800177e:	00001097          	auipc	ra,0x1
 8001782:	114080e7          	jalr	276(ra) # 8002892 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17he7e29acd0362609bE>
 8001786:	8d2a                	mv	s10,a0
 8001788:	854e                	mv	a0,s3
 800178a:	85a6                	mv	a1,s1
 800178c:	8662                	mv	a2,s8
 800178e:	00001097          	auipc	ra,0x1
 8001792:	fae080e7          	jalr	-82(ra) # 800273c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE>
 8001796:	85aa                	mv	a1,a0
 8001798:	856a                	mv	a0,s10
 800179a:	8656                	mv	a2,s5
 800179c:	4681                	li	a3,0
 800179e:	00008097          	auipc	ra,0x8
 80017a2:	c82080e7          	jalr	-894(ra) # 8009420 <json_helper_set_int>
 80017a6:	0800b537          	lui	a0,0x800b
 80017aa:	7e650593          	addi	a1,a0,2022 # 800b7e6 <_kill+0x114>
 80017ae:	07010a93          	addi	s5,sp,112
 80017b2:	4491                	li	s1,4
 80017b4:	8556                	mv	a0,s5
 80017b6:	8626                	mv	a2,s1
 80017b8:	00001097          	auipc	ra,0x1
 80017bc:	128080e7          	jalr	296(ra) # 80028e0 <_ZN6mynewt4Strn3new17h505d7b5ee6564253E>
 80017c0:	0800b537          	lui	a0,0x800b
 80017c4:	7ea50593          	addi	a1,a0,2026 # 800b7ea <_kill+0x118>
 80017c8:	08010c13          	addi	s8,sp,128
 80017cc:	8562                	mv	a0,s8
 80017ce:	8626                	mv	a2,s1
 80017d0:	00001097          	auipc	ra,0x1
 80017d4:	110080e7          	jalr	272(ra) # 80028e0 <_ZN6mynewt4Strn3new17h505d7b5ee6564253E>
 80017d8:	0800b537          	lui	a0,0x800b
 80017dc:	7f250593          	addi	a1,a0,2034 # 800b7f2 <_kill+0x120>
 80017e0:	0904                	addi	s1,sp,144
 80017e2:	8526                	mv	a0,s1
 80017e4:	865a                	mv	a2,s6
 80017e6:	00001097          	auipc	ra,0x1
 80017ea:	0fa080e7          	jalr	250(ra) # 80028e0 <_ZN6mynewt4Strn3new17h505d7b5ee6564253E>
 80017ee:	5536                	lw	a0,108(sp)
 80017f0:	df2a                	sw	a0,188(sp)
 80017f2:	5526                	lw	a0,104(sp)
 80017f4:	dd2a                	sw	a0,184(sp)
 80017f6:	5516                	lw	a0,100(sp)
 80017f8:	db2a                	sw	a0,180(sp)
 80017fa:	5506                	lw	a0,96(sp)
 80017fc:	d92a                	sw	a0,176(sp)
 80017fe:	4576                	lw	a0,92(sp)
 8001800:	d72a                	sw	a0,172(sp)
 8001802:	4566                	lw	a0,88(sp)
 8001804:	d52a                	sw	a0,168(sp)
 8001806:	4556                	lw	a0,84(sp)
 8001808:	d32a                	sw	a0,164(sp)
 800180a:	4546                	lw	a0,80(sp)
 800180c:	d12a                	sw	a0,160(sp)
 800180e:	1118                	addi	a4,sp,160
 8001810:	854e                	mv	a0,s3
 8001812:	85d6                	mv	a1,s5
 8001814:	8662                	mv	a2,s8
 8001816:	86a6                	mv	a3,s1
 8001818:	00001097          	auipc	ra,0x1
 800181c:	c2c080e7          	jalr	-980(ra) # 8002444 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE>
 8001820:	854e                	mv	a0,s3
 8001822:	85de                	mv	a1,s7
 8001824:	4635                	li	a2,13
 8001826:	00001097          	auipc	ra,0x1
 800182a:	f16080e7          	jalr	-234(ra) # 800273c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE>
 800182e:	00008097          	auipc	ra,0x8
 8001832:	bd0080e7          	jalr	-1072(ra) # 80093fe <json_helper_object_array_end_item>
 8001836:	a809                	j	8001848 <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0x32c>
 8001838:	5ce9                	li	s9,-6
 800183a:	aa11                	j	800194e <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0x432>
 800183c:	4585                	li	a1,1
 800183e:	854e                	mv	a0,s3
 8001840:	00001097          	auipc	ra,0x1
 8001844:	fc4080e7          	jalr	-60(ra) # 8002804 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h18b2574d199d0ab3E>
 8001848:	0800b537          	lui	a0,0x800b
 800184c:	7d150b93          	addi	s7,a0,2001 # 800b7d1 <_kill+0xff>
 8001850:	4ab5                	li	s5,13
 8001852:	854e                	mv	a0,s3
 8001854:	85de                	mv	a1,s7
 8001856:	8656                	mv	a2,s5
 8001858:	00001097          	auipc	ra,0x1
 800185c:	ee4080e7          	jalr	-284(ra) # 800273c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE>
 8001860:	00008097          	auipc	ra,0x8
 8001864:	b7c080e7          	jalr	-1156(ra) # 80093dc <json_helper_object_array_start_item>
 8001868:	0800b537          	lui	a0,0x800b
 800186c:	7ee50593          	addi	a1,a0,2030 # 800b7ee <_kill+0x11c>
 8001870:	05010b13          	addi	s6,sp,80
 8001874:	4611                	li	a2,4
 8001876:	855a                	mv	a0,s6
 8001878:	00001097          	auipc	ra,0x1
 800187c:	068080e7          	jalr	104(ra) # 80028e0 <_ZN6mynewt4Strn3new17h505d7b5ee6564253E>
 8001880:	0800b537          	lui	a0,0x800b
 8001884:	7f750593          	addi	a1,a0,2039 # 800b7f7 <_kill+0x125>
 8001888:	1104                	addi	s1,sp,160
 800188a:	4c1d                	li	s8,7
 800188c:	8526                	mv	a0,s1
 800188e:	8662                	mv	a2,s8
 8001890:	00001097          	auipc	ra,0x1
 8001894:	050080e7          	jalr	80(ra) # 80028e0 <_ZN6mynewt4Strn3new17h505d7b5ee6564253E>
 8001898:	854e                	mv	a0,s3
 800189a:	85da                	mv	a1,s6
 800189c:	8626                	mv	a2,s1
 800189e:	00001097          	auipc	ra,0x1
 80018a2:	d9e080e7          	jalr	-610(ra) # 800263c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E>
 80018a6:	0800b537          	lui	a0,0x800b
 80018aa:	7fe50593          	addi	a1,a0,2046 # 800b7fe <_kill+0x12c>
 80018ae:	1104                	addi	s1,sp,160
 80018b0:	4619                	li	a2,6
 80018b2:	8526                	mv	a0,s1
 80018b4:	00001097          	auipc	ra,0x1
 80018b8:	02c080e7          	jalr	44(ra) # 80028e0 <_ZN6mynewt4Strn3new17h505d7b5ee6564253E>
 80018bc:	0090                	addi	a2,sp,64
 80018be:	854e                	mv	a0,s3
 80018c0:	85a6                	mv	a1,s1
 80018c2:	00001097          	auipc	ra,0x1
 80018c6:	d7a080e7          	jalr	-646(ra) # 800263c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E>
 80018ca:	854e                	mv	a0,s3
 80018cc:	85de                	mv	a1,s7
 80018ce:	8656                	mv	a2,s5
 80018d0:	00001097          	auipc	ra,0x1
 80018d4:	e6c080e7          	jalr	-404(ra) # 800273c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE>
 80018d8:	00008097          	auipc	ra,0x8
 80018dc:	b26080e7          	jalr	-1242(ra) # 80093fe <json_helper_object_array_end_item>
 80018e0:	854e                	mv	a0,s3
 80018e2:	00001097          	auipc	ra,0x1
 80018e6:	fb0080e7          	jalr	-80(ra) # 8002892 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17he7e29acd0362609bE>
 80018ea:	84aa                	mv	s1,a0
 80018ec:	854e                	mv	a0,s3
 80018ee:	85d2                	mv	a1,s4
 80018f0:	8662                	mv	a2,s8
 80018f2:	00001097          	auipc	ra,0x1
 80018f6:	e4a080e7          	jalr	-438(ra) # 800273c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE>
 80018fa:	85aa                	mv	a1,a0
 80018fc:	8526                	mv	a0,s1
 80018fe:	00008097          	auipc	ra,0x8
 8001902:	abc080e7          	jalr	-1348(ra) # 80093ba <json_helper_close_array>
 8001906:	00004097          	auipc	ra,0x4
 800190a:	a46080e7          	jalr	-1466(ra) # 800534c <json_rep_end_root_object>
 800190e:	1108                	addi	a0,sp,160
    });

    //  Post the CoAP Server message to the CoAP Background Task for transmission.  After posting the
    //  message to the background task, we release a semaphore that unblocks other requests
    //  to compose and post CoAP messages.
    sensor_network::do_server_post() ? ;
 8001910:	00001097          	auipc	ra,0x1
 8001914:	338080e7          	jalr	824(ra) # 8002c48 <_ZN6mynewt4libs14sensor_network14do_server_post17h26084f25b670f291E>
 8001918:	0a014503          	lbu	a0,160(sp)
 800191c:	01951463          	bne	a0,s9,8001924 <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0x408>
 8001920:	5c9a                	lw	s9,164(sp)
 8001922:	a035                	j	800194e <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE+0x432>

    //  Display the URL with the random device ID for viewing the sensor data.
    console::print("NET view your sensor at \nhttps://blue-pill-geolocate.appspot.com?device=");
 8001924:	0800c537          	lui	a0,0x800c
 8001928:	80450513          	addi	a0,a0,-2044 # 800b804 <_kill+0x132>
 800192c:	04800593          	li	a1,72
 8001930:	00001097          	auipc	ra,0x1
 8001934:	ada080e7          	jalr	-1318(ra) # 800240a <_ZN6mynewt3sys7console5print17hd4cb89499f7dc1b1E>
 8001938:	0088                	addi	a0,sp,64
    console::print_strn(&device_id); console::print("\n");
 800193a:	00001097          	auipc	ra,0x1
 800193e:	ad8080e7          	jalr	-1320(ra) # 8002412 <_ZN6mynewt3sys7console10print_strn17h04bd7e2a27ff349cE>
 8001942:	854a                	mv	a0,s2
 8001944:	85e6                	mv	a1,s9
 8001946:	00001097          	auipc	ra,0x1
 800194a:	ac4080e7          	jalr	-1340(ra) # 800240a <_ZN6mynewt3sys7console5print17hd4cb89499f7dc1b1E>
}
 800194e:	8566                	mv	a0,s9
 8001950:	4d8e                	lw	s11,192(sp)
 8001952:	4d1e                	lw	s10,196(sp)
 8001954:	4cae                	lw	s9,200(sp)
 8001956:	4c3e                	lw	s8,204(sp)
 8001958:	4bce                	lw	s7,208(sp)
 800195a:	4b5e                	lw	s6,212(sp)
 800195c:	4aee                	lw	s5,216(sp)
 800195e:	4a7e                	lw	s4,220(sp)
 8001960:	598e                	lw	s3,224(sp)
 8001962:	591e                	lw	s2,228(sp)
 8001964:	54ae                	lw	s1,232(sp)
 8001966:	50be                	lw	ra,236(sp)
 8001968:	616d                	addi	sp,sp,240
 800196a:	8082                	ret

0800196c <main>:
};

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
 800196c:	711d                	addi	sp,sp,-96
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
 800196e:	ce86                	sw	ra,92(sp)
 8001970:	cca6                	sw	s1,88(sp)
 8001972:	caca                	sw	s2,84(sp)
 8001974:	c8ce                	sw	s3,80(sp)
 8001976:	00001097          	auipc	ra,0x1
 800197a:	f52080e7          	jalr	-174(ra) # 80028c8 <_ZN6mynewt7sysinit17h46656f63b85c8fe0E>
const TEMP_SENSOR_TYPE: sensor_type_t = sensor::SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW;

///  Ask Mynewt to poll or read the temperature sensor and call `aggregate_sensor_data()`
///  Return `Ok()` if successful, else return `Err()` with `MynewtError` error code inside.
pub fn start_sensor_listener() -> MynewtResult<()>  {  //  Returns an error code upon error.
    console::print("Rust TMP poll\n");
 800197e:	0800c537          	lui	a0,0x800c
 8001982:	86450513          	addi	a0,a0,-1948 # 800b864 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xc>
 8001986:	45b9                	li	a1,14
 8001988:	00001097          	auipc	ra,0x1
 800198c:	a82080e7          	jalr	-1406(ra) # 800240a <_ZN6mynewt3sys7console5print17hd4cb89499f7dc1b1E>

    //  Fetch the sensor by name.
    let sensor = sensor_mgr::find_bydevname(&SENSOR_DEVICE)
 8001990:	0800c537          	lui	a0,0x800c
 8001994:	85850493          	addi	s1,a0,-1960 # 800b858 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E>
 8001998:	03010913          	addi	s2,sp,48
 800199c:	854a                	mv	a0,s2
 800199e:	85a6                	mv	a1,s1
 80019a0:	00001097          	auipc	ra,0x1
 80019a4:	98e080e7          	jalr	-1650(ra) # 800232e <_ZN6mynewt2hw10sensor_mgr14find_bydevname17h3b1f6b8f255d15acE>
 80019a8:	854a                	mv	a0,s2
 80019aa:	00001097          	auipc	ra,0x1
 80019ae:	996080e7          	jalr	-1642(ra) # 8002340 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2413b8f055cbd3f6E>
 80019b2:	10050863          	beqz	a0,8001ac2 <main+0x156>
 80019b6:	892e                	mv	s2,a1
 80019b8:	6509                	lui	a0,0x2
 80019ba:	71050593          	addi	a1,a0,1808 # 2710 <__stack_size+0x1f10>
        .next()             //  Fetch the first sensor that matches
        .expect("no TMP");  //  Stop if no sensor found

    //  At power on, we ask Mynewt to poll our temperature sensor every 10 seconds.
    sensor::set_poll_rate_ms(&SENSOR_DEVICE, SENSOR_POLL_TIME) ? ;
 80019be:	8526                	mv	a0,s1
 80019c0:	00001097          	auipc	ra,0x1
 80019c4:	0e8080e7          	jalr	232(ra) # 8002aa8 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h94e658dc8a8affe2E>
 80019c8:	4985                	li	s3,1
 80019ca:	0d351f63          	bne	a0,s3,8001aa8 <main+0x13c>

    // Create a sensor listener that will call function `aggregate_sensor_data` after polling the sensor data
    let listener = sensor::new_sensor_listener(
 80019ce:	0800c537          	lui	a0,0x800c
 80019d2:	87c50593          	addi	a1,a0,-1924 # 800b87c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x24>
 80019d6:	08001537          	lui	a0,0x8001
 80019da:	51c50713          	addi	a4,a0,1308 # 800151c <_ZN3app11app_network21aggregate_sensor_data17h16bb200023b7761eE>
 80019de:	1808                	addi	a0,sp,48
 80019e0:	04000637          	lui	a2,0x4000
 80019e4:	4681                	li	a3,0
 80019e6:	00000097          	auipc	ra,0x0
 80019ea:	55e080e7          	jalr	1374(ra) # 8001f44 <_ZN6mynewt2hw6sensor19new_sensor_listener17h28f0369dc17b732dE>
 80019ee:	5562                	lw	a0,56(sp)
 80019f0:	cc2a                	sw	a0,24(sp)
 80019f2:	5572                	lw	a0,60(sp)
 80019f4:	ce2a                	sw	a0,28(sp)
 80019f6:	4506                	lw	a0,64(sp)
 80019f8:	d02a                	sw	a0,32(sp)
 80019fa:	4516                	lw	a0,68(sp)
 80019fc:	d22a                	sw	a0,36(sp)
 80019fe:	4526                	lw	a0,72(sp)
 8001a00:	d42a                	sw	a0,40(sp)
 8001a02:	4536                	lw	a0,76(sp)
 8001a04:	d62a                	sw	a0,44(sp)
 8001a06:	5542                	lw	a0,48(sp)
        &TEMP_SENSOR_KEY,   //  Transmit as field: `t`
        TEMP_SENSOR_TYPE,   //  Type of sensor data: Raw temperature (integer from 0 to 4095)
        app_network::aggregate_sensor_data  //  Call this function with the polled data: `aggregate_sensor_data`
    ) ? ;
 8001a08:	01351663          	bne	a0,s3,8001a14 <main+0xa8>
 8001a0c:	55d2                	lw	a1,52(sp)
 8001a0e:	05358363          	beq	a1,s3,8001a54 <main+0xe8>
 8001a12:	a861                	j	8001aaa <main+0x13e>
    let listener = sensor::new_sensor_listener(
 8001a14:	5532                	lw	a0,44(sp)
 8001a16:	ca2a                	sw	a0,20(sp)
 8001a18:	5522                	lw	a0,40(sp)
 8001a1a:	c82a                	sw	a0,16(sp)
 8001a1c:	5512                	lw	a0,36(sp)
 8001a1e:	c62a                	sw	a0,12(sp)
 8001a20:	5502                	lw	a0,32(sp)
 8001a22:	c42a                	sw	a0,8(sp)
 8001a24:	4572                	lw	a0,28(sp)
 8001a26:	c22a                	sw	a0,4(sp)
 8001a28:	4562                	lw	a0,24(sp)
 8001a2a:	c02a                	sw	a0,0(sp)

    //  Register the Listener Function to be called with the polled sensor data.
    sensor::register_listener(sensor, listener) ? ;  //  `?` means in case of error, return error now.
 8001a2c:	4552                	lw	a0,20(sp)
 8001a2e:	c2aa                	sw	a0,68(sp)
 8001a30:	4542                	lw	a0,16(sp)
 8001a32:	c0aa                	sw	a0,64(sp)
 8001a34:	4532                	lw	a0,12(sp)
 8001a36:	de2a                	sw	a0,60(sp)
 8001a38:	4522                	lw	a0,8(sp)
 8001a3a:	dc2a                	sw	a0,56(sp)
 8001a3c:	4512                	lw	a0,4(sp)
 8001a3e:	da2a                	sw	a0,52(sp)
 8001a40:	4502                	lw	a0,0(sp)
 8001a42:	d82a                	sw	a0,48(sp)
 8001a44:	180c                	addi	a1,sp,48
 8001a46:	854a                	mv	a0,s2
 8001a48:	00000097          	auipc	ra,0x0
 8001a4c:	364080e7          	jalr	868(ra) # 8001dac <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE>
 8001a50:	05351c63          	bne	a0,s3,8001aa8 <main+0x13c>
 8001a54:	1804                	addi	s1,sp,48
    //  assert!(rc == 0, "BLE fail");

    //  Main event loop
    loop {                            //  Loop forever...
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
 8001a56:	8526                	mv	a0,s1
 8001a58:	00001097          	auipc	ra,0x1
 8001a5c:	032080e7          	jalr	50(ra) # 8002a8a <_ZN6mynewt6kernel2os15eventq_dflt_get17ha91431cf3cedfcd0E>
 8001a60:	5542                	lw	a0,48(sp)
 8001a62:	03350663          	beq	a0,s3,8001a8e <main+0x122>
 8001a66:	5552                	lw	a0,52(sp)
        os::eventq_run(               //  Processing events...
 8001a68:	00001097          	auipc	ra,0x1
 8001a6c:	00e080e7          	jalr	14(ra) # 8002a76 <_ZN6mynewt6kernel2os10eventq_run17h6ac9d8384aa82ab0E>
 8001a70:	ff3503e3          	beq	a0,s3,8001a56 <main+0xea>
 8001a74:	85aa                	mv	a1,a0
 8001a76:	0800c537          	lui	a0,0x800c
 8001a7a:	89850513          	addi	a0,a0,-1896 # 800b898 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x40>
 8001a7e:	00000097          	auipc	ra,0x0
 8001a82:	a46080e7          	jalr	-1466(ra) # 80014c4 <_ZN4core6result13unwrap_failed17h3314c9605742429cE>
 8001a86:	0000a097          	auipc	ra,0xa
 8001a8a:	b6a080e7          	jalr	-1174(ra) # 800b5f0 <abort>
 8001a8e:	55d2                	lw	a1,52(sp)
 8001a90:	0800c537          	lui	a0,0x800c
 8001a94:	89050513          	addi	a0,a0,-1904 # 800b890 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x38>
 8001a98:	00000097          	auipc	ra,0x0
 8001a9c:	a2c080e7          	jalr	-1492(ra) # 80014c4 <_ZN4core6result13unwrap_failed17h3314c9605742429cE>
 8001aa0:	0000a097          	auipc	ra,0xa
 8001aa4:	b50080e7          	jalr	-1200(ra) # 800b5f0 <abort>
 8001aa8:	85aa                	mv	a1,a0
 8001aaa:	0800c537          	lui	a0,0x800c
 8001aae:	88850513          	addi	a0,a0,-1912 # 800b888 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x30>
 8001ab2:	00000097          	auipc	ra,0x0
 8001ab6:	a12080e7          	jalr	-1518(ra) # 80014c4 <_ZN4core6result13unwrap_failed17h3314c9605742429cE>
 8001aba:	0000a097          	auipc	ra,0xa
 8001abe:	b36080e7          	jalr	-1226(ra) # 800b5f0 <abort>
 8001ac2:	0800c537          	lui	a0,0x800c
 8001ac6:	87250513          	addi	a0,a0,-1934 # 800b872 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x1a>
 8001aca:	4599                	li	a1,6
 8001acc:	00001097          	auipc	ra,0x1
 8001ad0:	478080e7          	jalr	1144(ra) # 8002f44 <_ZN4core6option13expect_failed17h3eeb96a257d935a1E>
 8001ad4:	0000a097          	auipc	ra,0xa
 8001ad8:	b1c080e7          	jalr	-1252(ra) # 800b5f0 <abort>

08001adc <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
 8001adc:	1141                	addi	sp,sp,-16
/*
 8001ade:	c606                	sw	ra,12(sp)
 8001ae0:	c426                	sw	s1,8(sp)
 8001ae2:	c24a                	sw	s2,4(sp)
 8001ae4:	c04e                	sw	s3,0(sp)
 8001ae6:	84aa                	mv	s1,a0
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
 8001ae8:	0800c537          	lui	a0,0x800c
 8001aec:	8a050513          	addi	a0,a0,-1888 # 800b8a0 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x48>
 8001af0:	4599                	li	a1,6
 8001af2:	00001097          	auipc	ra,0x1
 8001af6:	918080e7          	jalr	-1768(ra) # 800240a <_ZN6mynewt3sys7console5print17hd4cb89499f7dc1b1E>
    if let Some(location) = info.location() {
 8001afa:	8526                	mv	a0,s1
 8001afc:	00001097          	auipc	ra,0x1
 8001b00:	36e080e7          	jalr	878(ra) # 8002e6a <_ZN4core5panic9PanicInfo8location17h5226165d8771f8a2E>
 8001b04:	e519                	bnez	a0,8001b12 <rust_begin_unwind+0x36>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
 8001b06:	0800c537          	lui	a0,0x800c
 8001b0a:	8a650513          	addi	a0,a0,-1882 # 800b8a6 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x4e>
 8001b0e:	459d                	li	a1,7
 8001b10:	a085                	j	8001b70 <rust_begin_unwind+0x94>
 8001b12:	84aa                	mv	s1,a0
        let file = location.file();
 8001b14:	00001097          	auipc	ra,0x1
 8001b18:	35a080e7          	jalr	858(ra) # 8002e6e <_ZN4core5panic8Location4file17h94cc6af18de736c4E>
 8001b1c:	892a                	mv	s2,a0
 8001b1e:	89ae                	mv	s3,a1
        let line = location.line();
 8001b20:	8526                	mv	a0,s1
 8001b22:	00001097          	auipc	ra,0x1
 8001b26:	354080e7          	jalr	852(ra) # 8002e76 <_ZN4core5panic8Location4line17h3ffc63f14d0a6636E>
 8001b2a:	84aa                	mv	s1,a0
        console::print("at ");       console::buffer(&file);
 8001b2c:	0800c537          	lui	a0,0x800c
 8001b30:	8ad50513          	addi	a0,a0,-1875 # 800b8ad <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x55>
 8001b34:	458d                	li	a1,3
 8001b36:	00001097          	auipc	ra,0x1
 8001b3a:	8d4080e7          	jalr	-1836(ra) # 800240a <_ZN6mynewt3sys7console5print17hd4cb89499f7dc1b1E>
 8001b3e:	854a                	mv	a0,s2
 8001b40:	85ce                	mv	a1,s3
 8001b42:	00001097          	auipc	ra,0x1
 8001b46:	8c8080e7          	jalr	-1848(ra) # 800240a <_ZN6mynewt3sys7console5print17hd4cb89499f7dc1b1E>
        console::print(" line ");    console::printint(line as i32);
 8001b4a:	0800c537          	lui	a0,0x800c
 8001b4e:	8b050513          	addi	a0,a0,-1872 # 800b8b0 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x58>
 8001b52:	4599                	li	a1,6
 8001b54:	00001097          	auipc	ra,0x1
 8001b58:	8b6080e7          	jalr	-1866(ra) # 800240a <_ZN6mynewt3sys7console5print17hd4cb89499f7dc1b1E>
 8001b5c:	8526                	mv	a0,s1
 8001b5e:	00001097          	auipc	ra,0x1
 8001b62:	8d6080e7          	jalr	-1834(ra) # 8002434 <_ZN6mynewt3sys7console8printint17h7c7d7028aeda8dd2E>
        console::print("\n");        console::flush();
 8001b66:	0800b537          	lui	a0,0x800b
 8001b6a:	7c850513          	addi	a0,a0,1992 # 800b7c8 <_kill+0xf6>
 8001b6e:	4585                	li	a1,1
 8001b70:	00001097          	auipc	ra,0x1
 8001b74:	89a080e7          	jalr	-1894(ra) # 800240a <_ZN6mynewt3sys7console5print17hd4cb89499f7dc1b1E>
 8001b78:	00001097          	auipc	ra,0x1
 8001b7c:	8c4080e7          	jalr	-1852(ra) # 800243c <_ZN6mynewt3sys7console5flush17hbf393adbbaededb9E>
 8001b80:	0800b537          	lui	a0,0x800b
 8001b84:	79850513          	addi	a0,a0,1944 # 800b798 <_kill+0xc6>
 8001b88:	00001097          	auipc	ra,0x1
 8001b8c:	2f2080e7          	jalr	754(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8001b90:	0000a097          	auipc	ra,0xa
 8001b94:	a60080e7          	jalr	-1440(ra) # 800b5f0 <abort>

08001b98 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1e150a86bad7eaceE>:
 8001b98:	1141                	addi	sp,sp,-16
 8001b9a:	c606                	sw	ra,12(sp)
 8001b9c:	c426                	sw	s1,8(sp)
 8001b9e:	c24a                	sw	s2,4(sp)
 8001ba0:	84ae                	mv	s1,a1
 8001ba2:	00052903          	lw	s2,0(a0)
 8001ba6:	852e                	mv	a0,a1
 8001ba8:	00002097          	auipc	ra,0x2
 8001bac:	4ca080e7          	jalr	1226(ra) # 8004072 <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
 8001bb0:	c901                	beqz	a0,8001bc0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1e150a86bad7eaceE+0x28>
 8001bb2:	854a                	mv	a0,s2
 8001bb4:	85a6                	mv	a1,s1
 8001bb6:	00003097          	auipc	ra,0x3
 8001bba:	ab2080e7          	jalr	-1358(ra) # 8004668 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE>
 8001bbe:	a025                	j	8001be6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1e150a86bad7eaceE+0x4e>
 8001bc0:	8526                	mv	a0,s1
 8001bc2:	00002097          	auipc	ra,0x2
 8001bc6:	4ba080e7          	jalr	1210(ra) # 800407c <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
 8001bca:	c901                	beqz	a0,8001bda <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1e150a86bad7eaceE+0x42>
 8001bcc:	854a                	mv	a0,s2
 8001bce:	85a6                	mv	a1,s1
 8001bd0:	00003097          	auipc	ra,0x3
 8001bd4:	b12080e7          	jalr	-1262(ra) # 80046e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E>
 8001bd8:	a039                	j	8001be6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1e150a86bad7eaceE+0x4e>
 8001bda:	854a                	mv	a0,s2
 8001bdc:	85a6                	mv	a1,s1
 8001bde:	00003097          	auipc	ra,0x3
 8001be2:	ef0080e7          	jalr	-272(ra) # 8004ace <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E>
 8001be6:	4912                	lw	s2,4(sp)
 8001be8:	44a2                	lw	s1,8(sp)
 8001bea:	40b2                	lw	ra,12(sp)
 8001bec:	0141                	addi	sp,sp,16
 8001bee:	8082                	ret

08001bf0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h50bf92a7c561a912E>:
 8001bf0:	1141                	addi	sp,sp,-16
 8001bf2:	c606                	sw	ra,12(sp)
 8001bf4:	c426                	sw	s1,8(sp)
 8001bf6:	c24a                	sw	s2,4(sp)
 8001bf8:	84ae                	mv	s1,a1
 8001bfa:	00052903          	lw	s2,0(a0)
 8001bfe:	852e                	mv	a0,a1
 8001c00:	00002097          	auipc	ra,0x2
 8001c04:	472080e7          	jalr	1138(ra) # 8004072 <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
 8001c08:	c901                	beqz	a0,8001c18 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h50bf92a7c561a912E+0x28>
 8001c0a:	854a                	mv	a0,s2
 8001c0c:	85a6                	mv	a1,s1
 8001c0e:	00003097          	auipc	ra,0x3
 8001c12:	c3a080e7          	jalr	-966(ra) # 8004848 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E>
 8001c16:	a025                	j	8001c3e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h50bf92a7c561a912E+0x4e>
 8001c18:	8526                	mv	a0,s1
 8001c1a:	00002097          	auipc	ra,0x2
 8001c1e:	462080e7          	jalr	1122(ra) # 800407c <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
 8001c22:	c901                	beqz	a0,8001c32 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h50bf92a7c561a912E+0x42>
 8001c24:	854a                	mv	a0,s2
 8001c26:	85a6                	mv	a1,s1
 8001c28:	00003097          	auipc	ra,0x3
 8001c2c:	cb2080e7          	jalr	-846(ra) # 80048da <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE>
 8001c30:	a039                	j	8001c3e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h50bf92a7c561a912E+0x4e>
 8001c32:	854a                	mv	a0,s2
 8001c34:	85a6                	mv	a1,s1
 8001c36:	00003097          	auipc	ra,0x3
 8001c3a:	084080e7          	jalr	132(ra) # 8004cba <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17h97d3cc39ae689800E>
 8001c3e:	4912                	lw	s2,4(sp)
 8001c40:	44a2                	lw	s1,8(sp)
 8001c42:	40b2                	lw	ra,12(sp)
 8001c44:	0141                	addi	sp,sp,16
 8001c46:	8082                	ret

08001c48 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93b1ac6bb7dc1d44E>:
 8001c48:	1101                	addi	sp,sp,-32
 8001c4a:	ce06                	sw	ra,28(sp)
 8001c4c:	cc26                	sw	s1,24(sp)
 8001c4e:	4108                	lw	a0,0(a0)
        ptr as *mut c_void
    }
}

/// Error codes for COAP encoding failure
#[derive(Debug, PartialEq)]
 8001c50:	00054503          	lbu	a0,0(a0)
 8001c54:	4605                	li	a2,1
 8001c56:	00c51963          	bne	a0,a2,8001c68 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93b1ac6bb7dc1d44E+0x20>
 8001c5a:	0800c537          	lui	a0,0x800c
 8001c5e:	ca850613          	addi	a2,a0,-856 # 800bca8 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x450>
 8001c62:	0024                	addi	s1,sp,8
 8001c64:	46b9                	li	a3,14
 8001c66:	a039                	j	8001c74 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93b1ac6bb7dc1d44E+0x2c>
 8001c68:	0800c537          	lui	a0,0x800c
 8001c6c:	cb650613          	addi	a2,a0,-842 # 800bcb6 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x45e>
 8001c70:	0024                	addi	s1,sp,8
 8001c72:	4689                	li	a3,2
 8001c74:	8526                	mv	a0,s1
 8001c76:	00002097          	auipc	ra,0x2
 8001c7a:	412080e7          	jalr	1042(ra) # 8004088 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
 8001c7e:	8526                	mv	a0,s1
 8001c80:	00002097          	auipc	ra,0x2
 8001c84:	aec080e7          	jalr	-1300(ra) # 800376c <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
 8001c88:	44e2                	lw	s1,24(sp)
 8001c8a:	40f2                	lw	ra,28(sp)
 8001c8c:	6105                	addi	sp,sp,32
 8001c8e:	8082                	ret

08001c90 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93bb0409688bd347E>:
 8001c90:	1101                	addi	sp,sp,-32
 8001c92:	ce06                	sw	ra,28(sp)
 8001c94:	cc26                	sw	s1,24(sp)
 8001c96:	ca4a                	sw	s2,20(sp)
 8001c98:	4104                	lw	s1,0(a0)
 8001c9a:	4088                	lw	a0,0(s1)
 8001c9c:	c90d                	beqz	a0,8001cce <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93bb0409688bd347E+0x3e>
 8001c9e:	0800c537          	lui	a0,0x800c
 8001ca2:	90c50613          	addi	a2,a0,-1780 # 800b90c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xb4>
 8001ca6:	890a                	mv	s2,sp
 8001ca8:	4691                	li	a3,4
 8001caa:	854a                	mv	a0,s2
 8001cac:	00002097          	auipc	ra,0x2
 8001cb0:	3dc080e7          	jalr	988(ra) # 8004088 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
 8001cb4:	c826                	sw	s1,16(sp)
 8001cb6:	0800c537          	lui	a0,0x800c
 8001cba:	92050613          	addi	a2,a0,-1760 # 800b920 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xc8>
 8001cbe:	080c                	addi	a1,sp,16
 8001cc0:	854a                	mv	a0,s2
 8001cc2:	00002097          	auipc	ra,0x2
 8001cc6:	9aa080e7          	jalr	-1622(ra) # 800366c <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E>
 8001cca:	854a                	mv	a0,s2
 8001ccc:	a829                	j	8001ce6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93bb0409688bd347E+0x56>
 8001cce:	0800c537          	lui	a0,0x800c
 8001cd2:	91050613          	addi	a2,a0,-1776 # 800b910 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xb8>
 8001cd6:	848a                	mv	s1,sp
 8001cd8:	4691                	li	a3,4
 8001cda:	8526                	mv	a0,s1
 8001cdc:	00002097          	auipc	ra,0x2
 8001ce0:	3ac080e7          	jalr	940(ra) # 8004088 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
 8001ce4:	8526                	mv	a0,s1
 8001ce6:	00002097          	auipc	ra,0x2
 8001cea:	a86080e7          	jalr	-1402(ra) # 800376c <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
 8001cee:	4952                	lw	s2,20(sp)
 8001cf0:	44e2                	lw	s1,24(sp)
 8001cf2:	40f2                	lw	ra,28(sp)
 8001cf4:	6105                	addi	sp,sp,32
 8001cf6:	8082                	ret

08001cf8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17had1dca1d29cad1bdE>:
 8001cf8:	1141                	addi	sp,sp,-16
 8001cfa:	c606                	sw	ra,12(sp)
 8001cfc:	c426                	sw	s1,8(sp)
 8001cfe:	c24a                	sw	s2,4(sp)
 8001d00:	84ae                	mv	s1,a1
 8001d02:	00052903          	lw	s2,0(a0)
 8001d06:	852e                	mv	a0,a1
 8001d08:	00002097          	auipc	ra,0x2
 8001d0c:	36a080e7          	jalr	874(ra) # 8004072 <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
 8001d10:	c901                	beqz	a0,8001d20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17had1dca1d29cad1bdE+0x28>
 8001d12:	854a                	mv	a0,s2
 8001d14:	85a6                	mv	a1,s1
 8001d16:	00003097          	auipc	ra,0x3
 8001d1a:	a46080e7          	jalr	-1466(ra) # 800475c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE>
 8001d1e:	a025                	j	8001d46 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17had1dca1d29cad1bdE+0x4e>
 8001d20:	8526                	mv	a0,s1
 8001d22:	00002097          	auipc	ra,0x2
 8001d26:	35a080e7          	jalr	858(ra) # 800407c <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
 8001d2a:	c901                	beqz	a0,8001d3a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17had1dca1d29cad1bdE+0x42>
 8001d2c:	854a                	mv	a0,s2
 8001d2e:	85a6                	mv	a1,s1
 8001d30:	00003097          	auipc	ra,0x3
 8001d34:	aa2080e7          	jalr	-1374(ra) # 80047d2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E>
 8001d38:	a039                	j	8001d46 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17had1dca1d29cad1bdE+0x4e>
 8001d3a:	854a                	mv	a0,s2
 8001d3c:	85a6                	mv	a1,s1
 8001d3e:	00003097          	auipc	ra,0x3
 8001d42:	da0080e7          	jalr	-608(ra) # 8004ade <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h33b3bbdbc74b88baE>
 8001d46:	4912                	lw	s2,4(sp)
 8001d48:	44a2                	lw	s1,8(sp)
 8001d4a:	40b2                	lw	ra,12(sp)
 8001d4c:	0141                	addi	sp,sp,16
 8001d4e:	8082                	ret

08001d50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he878d9596b11562bE>:
 8001d50:	1141                	addi	sp,sp,-16
 8001d52:	c606                	sw	ra,12(sp)
 8001d54:	c426                	sw	s1,8(sp)
 8001d56:	c24a                	sw	s2,4(sp)
 8001d58:	84ae                	mv	s1,a1
 8001d5a:	4108                	lw	a0,0(a0)
 8001d5c:	00052903          	lw	s2,0(a0)
 8001d60:	852e                	mv	a0,a1
 8001d62:	00002097          	auipc	ra,0x2
 8001d66:	310080e7          	jalr	784(ra) # 8004072 <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>
 8001d6a:	c901                	beqz	a0,8001d7a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he878d9596b11562bE+0x2a>
 8001d6c:	854a                	mv	a0,s2
 8001d6e:	85a6                	mv	a1,s1
 8001d70:	00003097          	auipc	ra,0x3
 8001d74:	8f8080e7          	jalr	-1800(ra) # 8004668 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE>
 8001d78:	a025                	j	8001da0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he878d9596b11562bE+0x50>
 8001d7a:	8526                	mv	a0,s1
 8001d7c:	00002097          	auipc	ra,0x2
 8001d80:	300080e7          	jalr	768(ra) # 800407c <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>
 8001d84:	c901                	beqz	a0,8001d94 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he878d9596b11562bE+0x44>
 8001d86:	854a                	mv	a0,s2
 8001d88:	85a6                	mv	a1,s1
 8001d8a:	00003097          	auipc	ra,0x3
 8001d8e:	958080e7          	jalr	-1704(ra) # 80046e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E>
 8001d92:	a039                	j	8001da0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17he878d9596b11562bE+0x50>
 8001d94:	854a                	mv	a0,s2
 8001d96:	85a6                	mv	a1,s1
 8001d98:	00003097          	auipc	ra,0x3
 8001d9c:	d36080e7          	jalr	-714(ra) # 8004ace <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E>
 8001da0:	4912                	lw	s2,4(sp)
 8001da2:	44a2                	lw	s1,8(sp)
 8001da4:	40b2                	lw	ra,12(sp)
 8001da6:	0141                	addi	sp,sp,16
 8001da8:	8082                	ret

08001daa <_ZN4core3ptr18real_drop_in_place17hb1022bd6f8649e59E>:
 8001daa:	8082                	ret

08001dac <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE>:
///  For more information on the type of callbacks available, see the documentation
///  for the sensor listener structure.
///  `sensor`: The sensor to register a listener on.
///  `listener`: The listener to register onto the sensor.
///  Returns `Ok()` on success, `Err()` containing `MynewtError` error code on failure.
pub fn register_listener(sensor: *mut sensor, listener: sensor_listener) -> MynewtResult<()> {  //  Returns an error code upon error. 
 8001dac:	711d                	addi	sp,sp,-96
//! Contains the Mynewt Sensor API for Rust, including the safe version of the API.
 8001dae:	ce86                	sw	ra,92(sp)
 8001db0:	0045a383          	lw	t2,4(a1)
 8001db4:	0005a303          	lw	t1,0(a1)
 8001db8:	00c5a803          	lw	a6,12(a1)
 8001dbc:	20000637          	lui	a2,0x20000
 8001dc0:	01860613          	addi	a2,a2,24 # 20000018 <_ZN6mynewt2hw6sensor16SENSOR_LISTENERS17h3c8c0b2bfc384623E>
    //  If this is a Wrapped Sensor Listener, register the associated Sensor Listener with Mynewt.
    let mut arg = MAX_SENSOR_LISTENERS + 1;
    //  Find a matching `sensor_listener_info`
    for i in 0 .. MAX_SENSOR_LISTENERS {
        let info = unsafe { SENSOR_LISTENERS[i] };        
 8001dc4:	4654                	lw	a3,12(a2)
 8001dc6:	461c                	lw	a5,8(a2)
 8001dc8:	01462883          	lw	a7,20(a2)
 8001dcc:	01062e03          	lw	t3,16(a2)
 8001dd0:	4598                	lw	a4,8(a1)
 8001dd2:	00e032b3          	snez	t0,a4
 8001dd6:	c725                	beqz	a4,8001e3e <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0x92>
        if  listener.sl_sensor_type == info.listener.sl_sensor_type &&
 8001dd8:	00f347b3          	xor	a5,t1,a5
 8001ddc:	00d3c6b3          	xor	a3,t2,a3
 8001de0:	8edd                	or	a3,a3,a5
 8001de2:	e29d                	bnez	a3,8001e08 <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0x5c>
 8001de4:	001e3693          	seqz	a3,t3
 8001de8:	0056c7b3          	xor	a5,a3,t0
 8001dec:	4e85                	li	t4,1
 8001dee:	01d79d63          	bne	a5,t4,8001e08 <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0x5c>
 8001df2:	01c747b3          	xor	a5,a4,t3
 8001df6:	0017b793          	seqz	a5,a5
 8001dfa:	8edd                	or	a3,a3,a5
 8001dfc:	01d69663          	bne	a3,t4,8001e08 <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0x5c>
 8001e00:	01181463          	bne	a6,a7,8001e08 <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0x5c>
 8001e04:	4781                	li	a5,0
 8001e06:	a8a5                	j	8001e7e <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0xd2>
        let info = unsafe { SENSOR_LISTENERS[i] };        
 8001e08:	5a54                	lw	a3,52(a2)
        if  listener.sl_sensor_type == info.listener.sl_sensor_type &&
 8001e0a:	00d3c6b3          	xor	a3,t2,a3
        let info = unsafe { SENSOR_LISTENERS[i] };        
 8001e0e:	5a1c                	lw	a5,48(a2)
        if  listener.sl_sensor_type == info.listener.sl_sensor_type &&
 8001e10:	00f347b3          	xor	a5,t1,a5
 8001e14:	8edd                	or	a3,a3,a5
 8001e16:	eabd                	bnez	a3,8001e8c <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0xe0>
 8001e18:	5e14                	lw	a3,56(a2)
 8001e1a:	0016b893          	seqz	a7,a3
 8001e1e:	0058c2b3          	xor	t0,a7,t0
 8001e22:	4785                	li	a5,1
 8001e24:	06f29463          	bne	t0,a5,8001e8c <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0xe0>
 8001e28:	8eb9                	xor	a3,a3,a4
 8001e2a:	0016b693          	seqz	a3,a3
 8001e2e:	0116e6b3          	or	a3,a3,a7
 8001e32:	04f69d63          	bne	a3,a5,8001e8c <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0xe0>
 8001e36:	5e54                	lw	a3,60(a2)
 8001e38:	04d80363          	beq	a6,a3,8001e7e <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0xd2>
 8001e3c:	a881                	j	8001e8c <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0xe0>
 8001e3e:	00f34733          	xor	a4,t1,a5
 8001e42:	00d3c6b3          	xor	a3,t2,a3
 8001e46:	8ed9                	or	a3,a3,a4
 8001e48:	ea89                	bnez	a3,8001e5a <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0xae>
 8001e4a:	001e3693          	seqz	a3,t3
 8001e4e:	0056c6b3          	xor	a3,a3,t0
 8001e52:	c681                	beqz	a3,8001e5a <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0xae>
 8001e54:	4781                	li	a5,0
 8001e56:	03180463          	beq	a6,a7,8001e7e <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0xd2>
        let info = unsafe { SENSOR_LISTENERS[i] };        
 8001e5a:	5a54                	lw	a3,52(a2)
        if  listener.sl_sensor_type == info.listener.sl_sensor_type &&
 8001e5c:	00d3c6b3          	xor	a3,t2,a3
        let info = unsafe { SENSOR_LISTENERS[i] };        
 8001e60:	5a18                	lw	a4,48(a2)
        if  listener.sl_sensor_type == info.listener.sl_sensor_type &&
 8001e62:	00e34733          	xor	a4,t1,a4
 8001e66:	8ed9                	or	a3,a3,a4
 8001e68:	e295                	bnez	a3,8001e8c <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0xe0>
 8001e6a:	5e14                	lw	a3,56(a2)
 8001e6c:	0016b693          	seqz	a3,a3
 8001e70:	0056c6b3          	xor	a3,a3,t0
 8001e74:	ce81                	beqz	a3,8001e8c <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0xe0>
 8001e76:	5e54                	lw	a3,60(a2)
 8001e78:	00d81a63          	bne	a6,a3,8001e8c <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0xe0>
 8001e7c:	4785                	li	a5,1
 8001e7e:	02800593          	li	a1,40
        }
    }
    if arg < MAX_SENSOR_LISTENERS {
        //  Found the Wrapped Sensor Listener. Register the associated Sensor Listener with Mynewt.
        //  Pass the associated listener to the unsafe Mynewt API.
        unsafe { sensor_register_listener(sensor, &mut SENSOR_LISTENERS[arg].listener) };
 8001e82:	02b785b3          	mul	a1,a5,a1
 8001e86:	95b2                	add	a1,a1,a2
 8001e88:	05a1                	addi	a1,a1,8
 8001e8a:	a805                	j	8001eba <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0x10e>
 8001e8c:	200006b7          	lui	a3,0x20000
    } else {
        //  TODO: Allocate a Wrapped Sensor Listener.
        //  If not found, copy the listener and register the copied Sensor Listener with Mynewt.
        unsafe { assert_eq!(LISTENER_INTERNAL.sl_sensor_type, 0, "reg lis") };  //  Make sure it's not used.
 8001e90:	0686a703          	lw	a4,104(a3) # 20000068 <_ZN6mynewt2hw6sensor17LISTENER_INTERNAL17h60706dd8781b8b6dE>
 8001e94:	06868613          	addi	a2,a3,104
 8001e98:	425c                	lw	a5,4(a2)
 8001e9a:	8f5d                	or	a4,a4,a5
 8001e9c:	e71d                	bnez	a4,8001eca <_ZN6mynewt2hw6sensor17register_listener17hd64d0c3ec01fbcabE+0x11e>
        //  Copy the caller's listener to the internal listener.
        unsafe { LISTENER_INTERNAL = listener };
 8001e9e:	4198                	lw	a4,0(a1)
 8001ea0:	06e6a423          	sw	a4,104(a3)
 8001ea4:	49d4                	lw	a3,20(a1)
 8001ea6:	ca54                	sw	a3,20(a2)
 8001ea8:	4994                	lw	a3,16(a1)
 8001eaa:	ca14                	sw	a3,16(a2)
 8001eac:	45d4                	lw	a3,12(a1)
 8001eae:	c654                	sw	a3,12(a2)
 8001eb0:	4594                	lw	a3,8(a1)
 8001eb2:	c614                	sw	a3,8(a2)
 8001eb4:	41cc                	lw	a1,4(a1)
 8001eb6:	c24c                	sw	a1,4(a2)
        //  Pass the internal listener to the unsafe Mynewt API.
        unsafe { sensor_register_listener(sensor, &mut LISTENER_INTERNAL) };
 8001eb8:	85b2                	mv	a1,a2
 8001eba:	00005097          	auipc	ra,0x5
 8001ebe:	e7c080e7          	jalr	-388(ra) # 8006d36 <sensor_register_listener>
 8001ec2:	4505                	li	a0,1
    }
    Ok(())
}
 8001ec4:	40f6                	lw	ra,92(sp)
 8001ec6:	6125                	addi	sp,sp,96
 8001ec8:	8082                	ret
        unsafe { assert_eq!(LISTENER_INTERNAL.sl_sensor_type, 0, "reg lis") };  //  Make sure it's not used.
 8001eca:	dc32                	sw	a2,56(sp)
 8001ecc:	0800c537          	lui	a0,0x800c
 8001ed0:	a2850513          	addi	a0,a0,-1496 # 800ba28 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x1d0>
 8001ed4:	de2a                	sw	a0,60(sp)
 8001ed6:	0800c537          	lui	a0,0x800c
 8001eda:	90c50513          	addi	a0,a0,-1780 # 800b90c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xb4>
 8001ede:	c8aa                	sw	a0,80(sp)
 8001ee0:	4505                	li	a0,1
 8001ee2:	c2aa                	sw	a0,68(sp)
 8001ee4:	0800c537          	lui	a0,0x800c
 8001ee8:	a4850513          	addi	a0,a0,-1464 # 800ba48 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x1f0>
 8001eec:	c0aa                	sw	a0,64(sp)
 8001eee:	08004537          	lui	a0,0x8004
 8001ef2:	92250513          	addi	a0,a0,-1758 # 8003922 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE>
 8001ef6:	da2a                	sw	a0,52(sp)
 8001ef8:	0088                	addi	a0,sp,64
 8001efa:	d82a                	sw	a0,48(sp)
 8001efc:	1868                	addi	a0,sp,60
 8001efe:	d42a                	sw	a0,40(sp)
 8001f00:	08002537          	lui	a0,0x8002
 8001f04:	bf050513          	addi	a0,a0,-1040 # 8001bf0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h50bf92a7c561a912E>
 8001f08:	d62a                	sw	a0,44(sp)
 8001f0a:	d22a                	sw	a0,36(sp)
 8001f0c:	1828                	addi	a0,sp,56
 8001f0e:	d02a                	sw	a0,32(sp)
 8001f10:	1008                	addi	a0,sp,32
 8001f12:	cc2a                	sw	a0,24(sp)
 8001f14:	ca82                	sw	zero,84(sp)
 8001f16:	c482                	sw	zero,72(sp)
 8001f18:	c802                	sw	zero,16(sp)
 8001f1a:	450d                	li	a0,3
 8001f1c:	ce2a                	sw	a0,28(sp)
 8001f1e:	c62a                	sw	a0,12(sp)
 8001f20:	0800c537          	lui	a0,0x800c
 8001f24:	8f450513          	addi	a0,a0,-1804 # 800b8f4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x9c>
 8001f28:	c42a                	sw	a0,8(sp)
 8001f2a:	0800c537          	lui	a0,0x800c
 8001f2e:	a5050593          	addi	a1,a0,-1456 # 800ba50 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x1f8>
 8001f32:	0028                	addi	a0,sp,8
 8001f34:	00001097          	auipc	ra,0x1
 8001f38:	fd4080e7          	jalr	-44(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8001f3c:	00009097          	auipc	ra,0x9
 8001f40:	6b4080e7          	jalr	1716(ra) # 800b5f0 <abort>

08001f44 <_ZN6mynewt2hw6sensor19new_sensor_listener17h28f0369dc17b732dE>:

///  Wrapped version of `sensor_data_func` used by Visual Embedded Rust
pub type SensorValueFunc = fn(sensor_value: &SensorValue) -> MynewtResult<()>;

///  Return a new `sensor_listener` with the sensor type and sensor value function. Called by Visual Embedded Rust.
pub fn new_sensor_listener(
 8001f44:	7179                	addi	sp,sp,-48
//! Contains the Mynewt Sensor API for Rust, including the safe version of the API.
 8001f46:	d606                	sw	ra,44(sp)
 8001f48:	d426                	sw	s1,40(sp)
 8001f4a:	d24a                	sw	s2,36(sp)
 8001f4c:	d04e                	sw	s3,32(sp)
 8001f4e:	ce52                	sw	s4,28(sp)
 8001f50:	cc56                	sw	s5,24(sp)
 8001f52:	ca5a                	sw	s6,20(sp)
 8001f54:	c85e                	sw	s7,16(sp)
 8001f56:	c662                	sw	s8,12(sp)
 8001f58:	8a3a                	mv	s4,a4
 8001f5a:	89b6                	mv	s3,a3
 8001f5c:	8932                	mv	s2,a2
 8001f5e:	8aae                	mv	s5,a1
 8001f60:	8b2a                	mv	s6,a0
        }
    }

    /// Return true if the string is empty
    pub fn is_empty(&self) -> bool {
        self.len() == 0
 8001f62:	852e                	mv	a0,a1
 8001f64:	00001097          	auipc	ra,0x1
 8001f68:	a22080e7          	jalr	-1502(ra) # 8002986 <_ZN6mynewt4Strn3len17h964375c316a460f8E>
    sensor_key:     &'static Strn,
    sensor_type:    sensor_type_t, 
    listener_func:  SensorValueFunc
) -> MynewtResult<sensor_listener> {
    assert!(!sensor_key.is_empty(), "missing sensor key");
 8001f6c:	c959                	beqz	a0,8002002 <_ZN6mynewt2hw6sensor19new_sensor_listener17h28f0369dc17b732dE+0xbe>
 8001f6e:	5bfd                	li	s7,-1
 8001f70:	20000537          	lui	a0,0x20000
 8001f74:	01450493          	addi	s1,a0,20 # 20000014 <_data+0x14>
 8001f78:	4c05                	li	s8,1
 8001f7a:	0b85                	addi	s7,s7,1
 8001f7c:	077c6763          	bltu	s8,s7,8001fea <_ZN6mynewt2hw6sensor19new_sensor_listener17h28f0369dc17b732dE+0xa6>
    //  Find an unused `sensor_listener_info`
    let mut arg = MAX_SENSOR_LISTENERS + 1;
    for i in 0 .. MAX_SENSOR_LISTENERS {
        let info = unsafe { SENSOR_LISTENERS[i] };
 8001f80:	50c8                	lw	a0,36(s1)
 8001f82:	00001097          	auipc	ra,0x1
 8001f86:	a04080e7          	jalr	-1532(ra) # 8002986 <_ZN6mynewt4Strn3len17h964375c316a460f8E>
        if info.sensor_key.is_empty() {
 8001f8a:	02848493          	addi	s1,s1,40
 8001f8e:	f575                	bnez	a0,8001f7a <_ZN6mynewt2hw6sensor19new_sensor_listener17h28f0369dc17b732dE+0x36>
        sl_func:        Some(wrap_sensor_listener),
        sl_arg:         arg as *mut c_void,
        ..fill_zero!(sensor_listener)
    };
    //  Allocate the `sensor_listener_info`
    unsafe { SENSOR_LISTENERS[arg] = sensor_listener_info {
 8001f90:	0144a023          	sw	s4,0(s1)
 8001f94:	ff54ae23          	sw	s5,-4(s1)
 8001f98:	fd24ae23          	sw	s2,-36(s1)
 8001f9c:	fe04aa23          	sw	zero,-12(s1)
 8001fa0:	ff74a823          	sw	s7,-16(s1)
 8001fa4:	ff24a223          	sw	s2,-28(s1)
 8001fa8:	ff34a023          	sw	s3,-32(s1)
 8001fac:	08002537          	lui	a0,0x8002
 8001fb0:	01a50513          	addi	a0,a0,26 # 800201a <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE>
 8001fb4:	fea4a623          	sw	a0,-20(s1)
 8001fb8:	ff34a423          	sw	s3,-24(s1)
        sensor_type,
        listener_func,
        listener,
    } };
    //  Return the Mynewt `sensor_listener`
    Ok(listener)
 8001fbc:	013b2623          	sw	s3,12(s6)
 8001fc0:	012b2423          	sw	s2,8(s6)
 8001fc4:	017b2a23          	sw	s7,20(s6)
 8001fc8:	00ab2823          	sw	a0,16(s6)
 8001fcc:	000b2c23          	sw	zero,24(s6)
 8001fd0:	000b2023          	sw	zero,0(s6)
}
 8001fd4:	4c32                	lw	s8,12(sp)
 8001fd6:	4bc2                	lw	s7,16(sp)
 8001fd8:	4b52                	lw	s6,20(sp)
 8001fda:	4ae2                	lw	s5,24(sp)
 8001fdc:	4a72                	lw	s4,28(sp)
 8001fde:	5982                	lw	s3,32(sp)
 8001fe0:	5912                	lw	s2,36(sp)
 8001fe2:	54a2                	lw	s1,40(sp)
 8001fe4:	50b2                	lw	ra,44(sp)
 8001fe6:	6145                	addi	sp,sp,48
 8001fe8:	8082                	ret
    assert!(arg < MAX_SENSOR_LISTENERS, "increase MAX_SENSOR_LISTENERS");  //  Too many listeners registered. Increase MAX_SENSOR_LISTENERS
 8001fea:	0800c537          	lui	a0,0x800c
 8001fee:	aac50513          	addi	a0,a0,-1364 # 800baac <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x254>
 8001ff2:	00001097          	auipc	ra,0x1
 8001ff6:	e88080e7          	jalr	-376(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8001ffa:	00009097          	auipc	ra,0x9
 8001ffe:	5f6080e7          	jalr	1526(ra) # 800b5f0 <abort>
    assert!(!sensor_key.is_empty(), "missing sensor key");
 8002002:	0800c537          	lui	a0,0x800c
 8002006:	a7450513          	addi	a0,a0,-1420 # 800ba74 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x21c>
 800200a:	00001097          	auipc	ra,0x1
 800200e:	e70080e7          	jalr	-400(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8002012:	00009097          	auipc	ra,0x9
 8002016:	5de080e7          	jalr	1502(ra) # 800b5f0 <abort>

0800201a <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE>:

///  Wrapped Sensor Listener that converts Mynewt `sensor_data` into our `sensor_value` format and calls the application's Listener Function
extern "C" fn wrap_sensor_listener(
 800201a:	7115                	addi	sp,sp,-224
//! Contains the Mynewt Sensor API for Rust, including the safe version of the API.
 800201c:	cf86                	sw	ra,220(sp)
 800201e:	cda6                	sw	s1,216(sp)
 8002020:	cbca                	sw	s2,212(sp)
 8002022:	c9ce                	sw	s3,208(sp)
 8002024:	c7d2                	sw	s4,204(sp)
 8002026:	c5d6                	sw	s5,200(sp)
 8002028:	c3da                	sw	s6,196(sp)
 800202a:	c1de                	sw	s7,192(sp)
 800202c:	84aa                	mv	s1,a0
 800202e:	4509                	li	a0,2
    sensor_data:   sensor_data_ptr,
    sensor_type:   sensor_type_t
) -> i32 {
    //  Use `arg` to fetch the `sensor_listener_info`
    let arg = arg as usize;
    assert!(arg < MAX_SENSOR_LISTENERS, "bad sensor arg");
 8002030:	12a5f163          	bgeu	a1,a0,8002152 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0x138>
 8002034:	8a3a                	mv	s4,a4
 8002036:	8ab6                	mv	s5,a3
 8002038:	8b32                	mv	s6,a2
 800203a:	02800513          	li	a0,40
    let info = unsafe { SENSOR_LISTENERS[arg] };
 800203e:	02a58533          	mul	a0,a1,a0
 8002042:	200005b7          	lui	a1,0x20000
 8002046:	01858593          	addi	a1,a1,24 # 20000018 <_ZN6mynewt2hw6sensor16SENSOR_LISTENERS17h3c8c0b2bfc384623E>
 800204a:	952e                	add	a0,a0,a1
 800204c:	02452b83          	lw	s7,36(a0)
 8002050:	02052983          	lw	s3,32(a0)
 8002054:	854e                	mv	a0,s3
 8002056:	00001097          	auipc	ra,0x1
 800205a:	930080e7          	jalr	-1744(ra) # 8002986 <_ZN6mynewt4Strn3len17h964375c316a460f8E>
    assert!(!info.sensor_key.is_empty(), "missing sensor key");
 800205e:	10050663          	beqz	a0,800216a <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0x150>
 8002062:	5979                	li	s2,-2

    //  Check that the sensor data is valid
    if sensor_data.is_null() { return SYS_EINVAL }  //  Exit if data is missing
 8002064:	0c0b0c63          	beqz	s6,800213c <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0x122>
    assert!(!sensor.is_null(), "null sensor");
 8002068:	10048d63          	beqz	s1,8002182 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0x168>
 800206c:	08000537          	lui	a0,0x8000
            SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW => {  //  If this is raw temperature...
 8002070:	00aac533          	xor	a0,s5,a0
 8002074:	01456533          	or	a0,a0,s4
 8002078:	cd05                	beqz	a0,80020b0 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0x96>
 800207a:	04000537          	lui	a0,0x4000
 800207e:	00aac533          	xor	a0,s5,a0
 8002082:	01456533          	or	a0,a0,s4
 8002086:	10051a63          	bnez	a0,800219a <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0x180>
                let mut rawtempdata = fill_zero!(sensor_temp_raw_data);
 800208a:	06010a23          	sb	zero,116(sp)
 800208e:	d882                	sw	zero,112(sp)
 8002090:	188c                	addi	a1,sp,112
                let rc = unsafe { get_temp_raw_data(sensor_data, &mut rawtempdata) };
 8002092:	855a                	mv	a0,s6
 8002094:	00007097          	auipc	ra,0x7
 8002098:	474080e7          	jalr	1140(ra) # 8009508 <get_temp_raw_data>
 800209c:	d6aa                	sw	a0,108(sp)
                assert_eq!(rc, 0, "rawtmp fail");
 800209e:	10051a63          	bnez	a0,80021b2 <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0x198>
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
 80020a2:	07414503          	lbu	a0,116(sp)
 80020a6:	18050463          	beqz	a0,800222e <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0x214>
 80020aa:	4505                	li	a0,1
                SensorValueType::Uint(rawtempdata.strd_temp_raw)  //  Raw Temperature in integer (0 to 4095)
 80020ac:	55c6                	lw	a1,112(sp)
 80020ae:	a0b9                	j	80020fc <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0xe2>
                let mut geolocation = fill_zero!(sensor_geolocation_data);
 80020b0:	06010523          	sb	zero,106(sp)
 80020b4:	06011423          	sh	zero,104(sp)
 80020b8:	d282                	sw	zero,100(sp)
 80020ba:	d082                	sw	zero,96(sp)
 80020bc:	ce82                	sw	zero,92(sp)
 80020be:	cc82                	sw	zero,88(sp)
 80020c0:	ca82                	sw	zero,84(sp)
 80020c2:	c882                	sw	zero,80(sp)
 80020c4:	088c                	addi	a1,sp,80
                let rc = unsafe { get_geolocation_data(sensor_data, &mut geolocation) };
 80020c6:	855a                	mv	a0,s6
 80020c8:	00007097          	auipc	ra,0x7
 80020cc:	48c080e7          	jalr	1164(ra) # 8009554 <get_geolocation_data>
 80020d0:	d6aa                	sw	a0,108(sp)
                assert_eq!(rc, 0, "geodata fail");
 80020d2:	1c051c63          	bnez	a0,80022aa <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0x290>
                if  geolocation.sgd_latitude_is_valid  != 0 &&
 80020d6:	06814503          	lbu	a0,104(sp)
 80020da:	c105                	beqz	a0,80020fa <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0xe0>
 80020dc:	06914503          	lbu	a0,105(sp)
 80020e0:	cd09                	beqz	a0,80020fa <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0xe0>
 80020e2:	06a14583          	lbu	a1,106(sp)
 80020e6:	4501                	li	a0,0
 80020e8:	c991                	beqz	a1,80020fc <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0xe2>
                        altitude:  geolocation.sgd_altitude,
 80020ea:	5716                	lw	a4,100(sp)
 80020ec:	5486                	lw	s1,96(sp)
                        longitude: geolocation.sgd_longitude,
 80020ee:	4676                	lw	a2,92(sp)
 80020f0:	47e6                	lw	a5,88(sp)
                        latitude:  geolocation.sgd_latitude,
 80020f2:	4856                	lw	a6,84(sp)
 80020f4:	46c6                	lw	a3,80(sp)
 80020f6:	450d                	li	a0,3
 80020f8:	a011                	j	80020fc <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0xe2>
 80020fa:	4501                	li	a0,0
    SensorValue {
 80020fc:	d026                	sw	s1,32(sp)
 80020fe:	cc3e                	sw	a5,24(sp)
 8002100:	c836                	sw	a3,16(sp)
 8002102:	c62e                	sw	a1,12(sp)
 8002104:	c4ce                	sw	s3,72(sp)
 8002106:	45c6                	lw	a1,80(sp)
 8002108:	d62e                	sw	a1,44(sp)
 800210a:	45d6                	lw	a1,84(sp)
 800210c:	d82e                	sw	a1,48(sp)
 800210e:	45e6                	lw	a1,88(sp)
 8002110:	da2e                	sw	a1,52(sp)
 8002112:	45f6                	lw	a1,92(sp)
 8002114:	dc2e                	sw	a1,56(sp)
 8002116:	5586                	lw	a1,96(sp)
 8002118:	de2e                	sw	a1,60(sp)
 800211a:	5596                	lw	a1,100(sp)
 800211c:	c0ae                	sw	a1,64(sp)
 800211e:	55a6                	lw	a1,104(sp)
 8002120:	c2ae                	sw	a1,68(sp)
 8002122:	d23a                	sw	a4,36(sp)
 8002124:	ce32                	sw	a2,28(sp)
 8002126:	ca42                	sw	a6,20(sp)
 8002128:	d402                	sw	zero,40(sp)
 800212a:	c42a                	sw	a0,8(sp)

    //  Convert the sensor data to sensor value
    let sensor_value = convert_sensor_data(sensor_data, info.sensor_key, sensor_type);
    if let SensorValueType::None = sensor_value.value { 
 800212c:	c901                	beqz	a0,800213c <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0x122>
 800212e:	0028                	addi	a0,sp,8
        return SYS_EINVAL;   //  Exit if sensor is not ready
    }

    //  Call the unwrapped listener function to hande the sensor value
    let res = (info.listener_func)(&sensor_value);
 8002130:	9b82                	jalr	s7
 8002132:	4585                	li	a1,1

    //  Check the result returned by the unwrapped listener function
    if let Err(_err) = res {
 8002134:	4901                	li	s2,0
 8002136:	00b50363          	beq	a0,a1,800213c <_ZN6mynewt2hw6sensor20wrap_sensor_listener17h5e91e4532531ebebE+0x122>
 800213a:	5979                	li	s2,-2
        SYS_EINVAL  //  Return error to Mynewt
    } else {
        0           //  Return 0 to Mynewt to indicate no error
    }
}
 800213c:	854a                	mv	a0,s2
 800213e:	4b8e                	lw	s7,192(sp)
 8002140:	4b1e                	lw	s6,196(sp)
 8002142:	4aae                	lw	s5,200(sp)
 8002144:	4a3e                	lw	s4,204(sp)
 8002146:	49ce                	lw	s3,208(sp)
 8002148:	495e                	lw	s2,212(sp)
 800214a:	44ee                	lw	s1,216(sp)
 800214c:	40fe                	lw	ra,220(sp)
 800214e:	612d                	addi	sp,sp,224
 8002150:	8082                	ret
    assert!(arg < MAX_SENSOR_LISTENERS, "bad sensor arg");
 8002152:	0800c537          	lui	a0,0x800c
 8002156:	ad450513          	addi	a0,a0,-1324 # 800bad4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x27c>
 800215a:	00001097          	auipc	ra,0x1
 800215e:	d20080e7          	jalr	-736(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8002162:	00009097          	auipc	ra,0x9
 8002166:	48e080e7          	jalr	1166(ra) # 800b5f0 <abort>
    assert!(!info.sensor_key.is_empty(), "missing sensor key");
 800216a:	0800c537          	lui	a0,0x800c
 800216e:	aec50513          	addi	a0,a0,-1300 # 800baec <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x294>
 8002172:	00001097          	auipc	ra,0x1
 8002176:	d08080e7          	jalr	-760(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 800217a:	00009097          	auipc	ra,0x9
 800217e:	476080e7          	jalr	1142(ra) # 800b5f0 <abort>
    assert!(!sensor.is_null(), "null sensor");
 8002182:	0800c537          	lui	a0,0x800c
 8002186:	b1050513          	addi	a0,a0,-1264 # 800bb10 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x2b8>
 800218a:	00001097          	auipc	ra,0x1
 800218e:	cf0080e7          	jalr	-784(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8002192:	00009097          	auipc	ra,0x9
 8002196:	45e080e7          	jalr	1118(ra) # 800b5f0 <abort>
            _ => { assert!(false, "sensor type"); SensorValueType::None }  //  Unknown type of sensor value
 800219a:	0800c537          	lui	a0,0x800c
 800219e:	95850513          	addi	a0,a0,-1704 # 800b958 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x100>
 80021a2:	00001097          	auipc	ra,0x1
 80021a6:	cd8080e7          	jalr	-808(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 80021aa:	00009097          	auipc	ra,0x9
 80021ae:	446080e7          	jalr	1094(ra) # 800b5f0 <abort>
 80021b2:	10e8                	addi	a0,sp,108
                assert_eq!(rc, 0, "rawtmp fail");
 80021b4:	d12a                	sw	a0,160(sp)
 80021b6:	0800c537          	lui	a0,0x800c
 80021ba:	91450513          	addi	a0,a0,-1772 # 800b914 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xbc>
 80021be:	d32a                	sw	a0,164(sp)
 80021c0:	0800c537          	lui	a0,0x800c
 80021c4:	90c50513          	addi	a0,a0,-1780 # 800b90c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xb4>
 80021c8:	d0aa                	sw	a0,96(sp)
 80021ca:	4505                	li	a0,1
 80021cc:	caaa                	sw	a0,84(sp)
 80021ce:	0800c537          	lui	a0,0x800c
 80021d2:	9a050513          	addi	a0,a0,-1632 # 800b9a0 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x148>
 80021d6:	c8aa                	sw	a0,80(sp)
 80021d8:	08004537          	lui	a0,0x8004
 80021dc:	92250513          	addi	a0,a0,-1758 # 8003922 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE>
 80021e0:	df2a                	sw	a0,188(sp)
 80021e2:	0888                	addi	a0,sp,80
 80021e4:	dd2a                	sw	a0,184(sp)
 80021e6:	1148                	addi	a0,sp,164
 80021e8:	d92a                	sw	a0,176(sp)
 80021ea:	08002537          	lui	a0,0x8002
 80021ee:	cf850513          	addi	a0,a0,-776 # 8001cf8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17had1dca1d29cad1bdE>
 80021f2:	db2a                	sw	a0,180(sp)
 80021f4:	d72a                	sw	a0,172(sp)
 80021f6:	1108                	addi	a0,sp,160
 80021f8:	d52a                	sw	a0,168(sp)
 80021fa:	1128                	addi	a0,sp,168
 80021fc:	cd2a                	sw	a0,152(sp)
 80021fe:	d282                	sw	zero,100(sp)
 8002200:	cc82                	sw	zero,88(sp)
 8002202:	c902                	sw	zero,144(sp)
 8002204:	450d                	li	a0,3
 8002206:	cf2a                	sw	a0,156(sp)
 8002208:	c72a                	sw	a0,140(sp)
 800220a:	0800c537          	lui	a0,0x800c
 800220e:	8f450513          	addi	a0,a0,-1804 # 800b8f4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x9c>
 8002212:	c52a                	sw	a0,136(sp)
 8002214:	0800c537          	lui	a0,0x800c
 8002218:	9a850593          	addi	a1,a0,-1624 # 800b9a8 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x150>
 800221c:	0128                	addi	a0,sp,136
 800221e:	00001097          	auipc	ra,0x1
 8002222:	cea080e7          	jalr	-790(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8002226:	00009097          	auipc	ra,0x9
 800222a:	3ca080e7          	jalr	970(ra) # 800b5f0 <abort>
 800222e:	18c8                	addi	a0,sp,116
                assert_ne!(rawtempdata.strd_temp_raw_is_valid, 0, "bad rawtmp");                
 8002230:	d12a                	sw	a0,160(sp)
 8002232:	0800c537          	lui	a0,0x800c
 8002236:	9b850513          	addi	a0,a0,-1608 # 800b9b8 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x160>
 800223a:	d32a                	sw	a0,164(sp)
 800223c:	0800c537          	lui	a0,0x800c
 8002240:	90c50513          	addi	a0,a0,-1780 # 800b90c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xb4>
 8002244:	d0aa                	sw	a0,96(sp)
 8002246:	4505                	li	a0,1
 8002248:	caaa                	sw	a0,84(sp)
 800224a:	0800c537          	lui	a0,0x800c
 800224e:	a0c50513          	addi	a0,a0,-1524 # 800ba0c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x1b4>
 8002252:	c8aa                	sw	a0,80(sp)
 8002254:	08004537          	lui	a0,0x8004
 8002258:	92250513          	addi	a0,a0,-1758 # 8003922 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE>
 800225c:	df2a                	sw	a0,188(sp)
 800225e:	0888                	addi	a0,sp,80
 8002260:	dd2a                	sw	a0,184(sp)
 8002262:	1148                	addi	a0,sp,164
 8002264:	d92a                	sw	a0,176(sp)
 8002266:	08002537          	lui	a0,0x8002
 800226a:	b9850513          	addi	a0,a0,-1128 # 8001b98 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1e150a86bad7eaceE>
 800226e:	db2a                	sw	a0,180(sp)
 8002270:	d72a                	sw	a0,172(sp)
 8002272:	1108                	addi	a0,sp,160
 8002274:	d52a                	sw	a0,168(sp)
 8002276:	1128                	addi	a0,sp,168
 8002278:	cd2a                	sw	a0,152(sp)
 800227a:	d282                	sw	zero,100(sp)
 800227c:	cc82                	sw	zero,88(sp)
 800227e:	c902                	sw	zero,144(sp)
 8002280:	450d                	li	a0,3
 8002282:	cf2a                	sw	a0,156(sp)
 8002284:	c72a                	sw	a0,140(sp)
 8002286:	0800c537          	lui	a0,0x800c
 800228a:	9e850513          	addi	a0,a0,-1560 # 800b9e8 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x190>
 800228e:	c52a                	sw	a0,136(sp)
 8002290:	0800c537          	lui	a0,0x800c
 8002294:	a1450593          	addi	a1,a0,-1516 # 800ba14 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x1bc>
 8002298:	0128                	addi	a0,sp,136
 800229a:	00001097          	auipc	ra,0x1
 800229e:	c6e080e7          	jalr	-914(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 80022a2:	00009097          	auipc	ra,0x9
 80022a6:	34e080e7          	jalr	846(ra) # 800b5f0 <abort>
 80022aa:	10e8                	addi	a0,sp,108
                assert_eq!(rc, 0, "geodata fail");
 80022ac:	d12a                	sw	a0,160(sp)
 80022ae:	0800c537          	lui	a0,0x800c
 80022b2:	91450513          	addi	a0,a0,-1772 # 800b914 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xbc>
 80022b6:	d32a                	sw	a0,164(sp)
 80022b8:	0800c537          	lui	a0,0x800c
 80022bc:	90c50513          	addi	a0,a0,-1780 # 800b90c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xb4>
 80022c0:	dd2a                	sw	a0,184(sp)
 80022c2:	4505                	li	a0,1
 80022c4:	d72a                	sw	a0,172(sp)
 80022c6:	0800c537          	lui	a0,0x800c
 80022ca:	97c50513          	addi	a0,a0,-1668 # 800b97c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x124>
 80022ce:	d52a                	sw	a0,168(sp)
 80022d0:	08004537          	lui	a0,0x8004
 80022d4:	92250513          	addi	a0,a0,-1758 # 8003922 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE>
 80022d8:	cf2a                	sw	a0,156(sp)
 80022da:	1128                	addi	a0,sp,168
 80022dc:	cd2a                	sw	a0,152(sp)
 80022de:	1148                	addi	a0,sp,164
 80022e0:	c92a                	sw	a0,144(sp)
 80022e2:	08002537          	lui	a0,0x8002
 80022e6:	cf850513          	addi	a0,a0,-776 # 8001cf8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17had1dca1d29cad1bdE>
 80022ea:	cb2a                	sw	a0,148(sp)
 80022ec:	c72a                	sw	a0,140(sp)
 80022ee:	1108                	addi	a0,sp,160
 80022f0:	c52a                	sw	a0,136(sp)
 80022f2:	0128                	addi	a0,sp,136
 80022f4:	c12a                	sw	a0,128(sp)
 80022f6:	df02                	sw	zero,188(sp)
 80022f8:	d902                	sw	zero,176(sp)
 80022fa:	dc82                	sw	zero,120(sp)
 80022fc:	450d                	li	a0,3
 80022fe:	c32a                	sw	a0,132(sp)
 8002300:	daaa                	sw	a0,116(sp)
 8002302:	0800c537          	lui	a0,0x800c
 8002306:	8f450513          	addi	a0,a0,-1804 # 800b8f4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x9c>
 800230a:	d8aa                	sw	a0,112(sp)
 800230c:	0800c537          	lui	a0,0x800c
 8002310:	98450593          	addi	a1,a0,-1660 # 800b984 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x12c>
 8002314:	1888                	addi	a0,sp,112
 8002316:	00001097          	auipc	ra,0x1
 800231a:	bf2080e7          	jalr	-1038(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 800231e:	00009097          	auipc	ra,0x9
 8002322:	2d2080e7          	jalr	722(ra) # 800b5f0 <abort>

08002326 <_ZN6mynewt2hw6sensor21null_sensor_data_func17h91935ae756f7e7bbE>:
extern fn null_sensor_data_func(
    _sensor: sensor_ptr, 
    _arg: sensor_arg, 
    _sensor_data: sensor_data_ptr, 
    _sensor_type: sensor_type_t) -> i32
    { 0 }
 8002326:	4501                	li	a0,0
 8002328:	8082                	ret

0800232a <_ZN6mynewt2hw6sensor22null_sensor_value_func17h905c06386558011eE>:

///  Define a default sensor value function in case there is none.
fn null_sensor_value_func(
 800232a:	4505                	li	a0,1
    _sensor_value: &SensorValue
    ) -> MynewtResult<()> 
    { Ok(()) }
 800232c:	8082                	ret

0800232e <_ZN6mynewt2hw10sensor_mgr14find_bydevname17h3b1f6b8f255d15acE>:
};

/// Returns an iterator of sensors that match the device name `devname`
pub fn find_bydevname(devname: &Strn) -> SensorsByDevname {
    SensorsByDevname { 
        devname: *devname,
 800232e:	4590                	lw	a2,8(a1)
 8002330:	c510                	sw	a2,8(a0)
 8002332:	41d0                	lw	a2,4(a1)
 8002334:	c150                	sw	a2,4(a0)
 8002336:	418c                	lw	a1,0(a1)
 8002338:	c10c                	sw	a1,0(a0)
    SensorsByDevname { 
 800233a:	00052623          	sw	zero,12(a0)
        previous: core::ptr::null_mut()
    }
    // MynewtResult<*mut sensor>
}
 800233e:	8082                	ret

08002340 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2413b8f055cbd3f6E>:
impl Iterator for SensorsByDevname {
    /// Iterator returns a pointer to a sensor
    type Item = sensor_ptr;

    /// Return the next sensor that matches the device name    
    fn next(&mut self) -> Option<sensor_ptr> {
 8002340:	7159                	addi	sp,sp,-112
/*
 8002342:	d686                	sw	ra,108(sp)
 8002344:	d4a6                	sw	s1,104(sp)
 8002346:	d2ca                	sw	s2,100(sp)
 8002348:	84aa                	mv	s1,a0
 800234a:	4148                	lw	a0,4(a0)
        //  Based on last iteration, find the next sensor with matching device name.
        let sensor = mgr_find_next_bydevname(&self.devname, self.previous)
 800234c:	44cc                	lw	a1,12(s1)
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
        match self.rep {
            StrnRep::ByteStr(bs) => {         
 800234e:	0004c603          	lbu	a2,0(s1)
 8002352:	4905                	li	s2,1
 8002354:	01260e63          	beq	a2,s2,8002370 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2413b8f055cbd3f6E+0x30>
 8002358:	4494                	lw	a3,8(s1)
 800235a:	fff68613          	addi	a2,a3,-1
 800235e:	02c6e863          	bltu	a3,a2,800238e <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2413b8f055cbd3f6E+0x4e>
 8002362:	02d67663          	bgeu	a2,a3,800238e <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2413b8f055cbd3f6E+0x4e>
 8002366:	962a                	add	a2,a2,a0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8002368:	c632                	sw	a2,12(sp)
 800236a:	00064603          	lbu	a2,0(a2)
 800236e:	e20d                	bnez	a2,8002390 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2413b8f055cbd3f6E+0x50>
    #[doc = ""]
    #[doc = " Return: A pointer to the sensor object matching that sensor type, or NULL if"]
    #[doc = "         none found."]
    pub fn sensor_mgr_find_next_bytype(type_: sensor_type_t, sensor: *mut sensor) -> *mut sensor;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8002370:	00004097          	auipc	ra,0x4
 8002374:	7ee080e7          	jalr	2030(ra) # 8006b5e <sensor_mgr_find_next_bydevname>
            .expect("find sensor");
        if sensor.is_null() { None }  //  If sensor not found, return None
 8002378:	c501                	beqz	a0,8002380 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2413b8f055cbd3f6E+0x40>
 800237a:	85aa                	mv	a1,a0
        else {
            //  If sensor found, remember this sensor for next iteration.
            self.previous = sensor;
 800237c:	c4c8                	sw	a0,12(s1)
 800237e:	a011                	j	8002382 <_ZN99_$LT$mynewt..hw..sensor_mgr..SensorsByDevname$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2413b8f055cbd3f6E+0x42>
 8002380:	4901                	li	s2,0
            Some(sensor)  //  Return the sensor
        }
    }
 8002382:	854a                	mv	a0,s2
 8002384:	5916                	lw	s2,100(sp)
 8002386:	54a6                	lw	s1,104(sp)
 8002388:	50b6                	lw	ra,108(sp)
 800238a:	6165                	addi	sp,sp,112
 800238c:	8082                	ret
 800238e:	c602                	sw	zero,12(sp)
 8002390:	0068                	addi	a0,sp,12
 8002392:	c0aa                	sw	a0,64(sp)
 8002394:	0800c537          	lui	a0,0x800c
 8002398:	bb450513          	addi	a0,a0,-1100 # 800bbb4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x35c>
 800239c:	c2aa                	sw	a0,68(sp)
 800239e:	0800c537          	lui	a0,0x800c
 80023a2:	90c50513          	addi	a0,a0,-1780 # 800b90c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xb4>
 80023a6:	ccaa                	sw	a0,88(sp)
 80023a8:	c6ca                	sw	s2,76(sp)
 80023aa:	0800c537          	lui	a0,0x800c
 80023ae:	c4050513          	addi	a0,a0,-960 # 800bc40 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x3e8>
 80023b2:	c4aa                	sw	a0,72(sp)
 80023b4:	08004537          	lui	a0,0x8004
 80023b8:	92250513          	addi	a0,a0,-1758 # 8003922 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE>
 80023bc:	de2a                	sw	a0,60(sp)
 80023be:	00a8                	addi	a0,sp,72
 80023c0:	dc2a                	sw	a0,56(sp)
 80023c2:	00c8                	addi	a0,sp,68
 80023c4:	d82a                	sw	a0,48(sp)
 80023c6:	08002537          	lui	a0,0x8002
 80023ca:	c9050513          	addi	a0,a0,-880 # 8001c90 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93bb0409688bd347E>
 80023ce:	da2a                	sw	a0,52(sp)
 80023d0:	d62a                	sw	a0,44(sp)
 80023d2:	0088                	addi	a0,sp,64
 80023d4:	d42a                	sw	a0,40(sp)
 80023d6:	1028                	addi	a0,sp,40
 80023d8:	d02a                	sw	a0,32(sp)
 80023da:	ce82                	sw	zero,92(sp)
 80023dc:	c882                	sw	zero,80(sp)
 80023de:	cc02                	sw	zero,24(sp)
 80023e0:	450d                	li	a0,3
 80023e2:	d22a                	sw	a0,36(sp)
 80023e4:	ca2a                	sw	a0,20(sp)
 80023e6:	0800c537          	lui	a0,0x800c
 80023ea:	8f450513          	addi	a0,a0,-1804 # 800b8f4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x9c>
 80023ee:	c82a                	sw	a0,16(sp)
 80023f0:	0800c537          	lui	a0,0x800c
 80023f4:	c9850593          	addi	a1,a0,-872 # 800bc98 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x440>
 80023f8:	0808                	addi	a0,sp,16
 80023fa:	00001097          	auipc	ra,0x1
 80023fe:	b0e080e7          	jalr	-1266(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8002402:	00009097          	auipc	ra,0x9
 8002406:	1ee080e7          	jalr	494(ra) # 800b5f0 <abort>

0800240a <_ZN6mynewt3sys7console5print17hd4cb89499f7dc1b1E>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn print(msg: &str) {
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
 800240a:	00003317          	auipc	t1,0x3
 800240e:	98c30067          	jr	-1652(t1) # 8004d96 <console_buffer>

08002412 <_ZN6mynewt3sys7console10print_strn17h04bd7e2a27ff349cE>:
}

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn print_strn(msg: &crate::Strn) {
 8002412:	1141                	addi	sp,sp,-16
//! Display messages on Arm Semihosting Console (via OpenOCD)
 8002414:	c606                	sw	ra,12(sp)
 8002416:	c426                	sw	s1,8(sp)
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
 8002418:	4144                	lw	s1,4(a0)
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
 800241a:	00000097          	auipc	ra,0x0
 800241e:	56c080e7          	jalr	1388(ra) # 8002986 <_ZN6mynewt4Strn3len17h964375c316a460f8E>
 8002422:	85aa                	mv	a1,a0
 8002424:	8526                	mv	a0,s1
 8002426:	44a2                	lw	s1,8(sp)
 8002428:	40b2                	lw	ra,12(sp)
 800242a:	0141                	addi	sp,sp,16
 800242c:	00003317          	auipc	t1,0x3
 8002430:	96a30067          	jr	-1686(t1) # 8004d96 <console_buffer>

08002434 <_ZN6mynewt3sys7console8printint17h7c7d7028aeda8dd2E>:
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    unsafe { console_printint(v); }
 8002434:	00003317          	auipc	t1,0x3
 8002438:	97a30067          	jr	-1670(t1) # 8004dae <console_printint>

0800243c <_ZN6mynewt3sys7console5flush17hbf393adbbaededb9E>:
    unsafe { console_printdouble(v); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    unsafe { console_flush(); }
 800243c:	00003317          	auipc	t1,0x3
 8002440:	93230067          	jr	-1742(t1) # 8004d6e <console_flush>

08002444 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE>:
    pub fn json_set_geolocation(&mut self, key: &Strn, lat_key: &Strn, long_key: &Strn, geo: SensorValueType) {
 8002444:	7179                	addi	sp,sp,-48
//! COAP encoder state used by CoAP encoding macros
 8002446:	d606                	sw	ra,44(sp)
 8002448:	d426                	sw	s1,40(sp)
 800244a:	d24a                	sw	s2,36(sp)
 800244c:	d04e                	sw	s3,32(sp)
 800244e:	ce52                	sw	s4,28(sp)
 8002450:	cc56                	sw	s5,24(sp)
 8002452:	ca5a                	sw	s6,20(sp)
 8002454:	c85e                	sw	s7,16(sp)
 8002456:	c662                	sw	s8,12(sp)
 8002458:	c466                	sw	s9,8(sp)
 800245a:	c26a                	sw	s10,4(sp)
 800245c:	c06e                	sw	s11,0(sp)
 800245e:	8cb2                	mv	s9,a2
 8002460:	862e                	mv	a2,a1
 8002462:	8c2a                	mv	s8,a0
        if let SensorValueType::Geolocation { latitude, longitude, .. } = geo {
 8002464:	4308                	lw	a0,0(a4)
 8002466:	458d                	li	a1,3
 8002468:	14b51c63          	bne	a0,a1,80025c0 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x17c>
 800246c:	8a36                	mv	s4,a3
 800246e:	01472903          	lw	s2,20(a4) # ff0014 <__stack_size+0xfef814>
 8002472:	01072983          	lw	s3,16(a4)
 8002476:	00c72b03          	lw	s6,12(a4)
 800247a:	00872b83          	lw	s7,8(a4)
            StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 800247e:	00064503          	lbu	a0,0(a2)
 8002482:	4d85                	li	s11,1
 8002484:	01b51463          	bne	a0,s11,800248c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x48>
            StrnRep::CStr(cstr)  => { cstr }
 8002488:	424c                	lw	a1,4(a2)
 800248a:	a82d                	j	80024c4 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x80>
            StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 800248c:	424c                	lw	a1,4(a2)
 800248e:	4604                	lw	s1,8(a2)
 8002490:	fff48513          	addi	a0,s1,-1
 8002494:	00957963          	bgeu	a0,s1,80024a6 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x62>
 8002498:	00a4b633          	sltu	a2,s1,a0
 800249c:	e609                	bnez	a2,80024a6 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x62>
 800249e:	952e                	add	a0,a0,a1
 80024a0:	00054503          	lbu	a0,0(a0)
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 80024a4:	c105                	beqz	a0,80024c4 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x80>
 80024a6:	02000513          	li	a0,32
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 80024aa:	12a4f963          	bgeu	s1,a0,80025dc <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x198>
 80024ae:	8562                	mv	a0,s8
 80024b0:	8626                	mv	a2,s1
 80024b2:	00006097          	auipc	ra,0x6
 80024b6:	706080e7          	jalr	1798(ra) # 8008bb8 <memcpy>
        self.key_buffer[s.len()] = 0;
 80024ba:	009c0533          	add	a0,s8,s1
 80024be:	00050023          	sb	zero,0(a0)
 80024c2:	85e2                	mv	a1,s8
            let rc = unsafe { json::json_encode_object_key(encoder, key_cstr as *mut u8) }; 
 80024c4:	20003537          	lui	a0,0x20003
 80024c8:	9f050a93          	addi	s5,a0,-1552 # 200029f0 <coap_json_encoder>
 80024cc:	8556                	mv	a0,s5
 80024ce:	00004097          	auipc	ra,0x4
 80024d2:	f10080e7          	jalr	-240(ra) # 80063de <json_encode_object_key>
            assert!(rc == 0);
 80024d6:	10051f63          	bnez	a0,80025f4 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x1b0>
            let rc = unsafe { json::json_encode_object_start(encoder) }; 
 80024da:	8556                	mv	a0,s5
 80024dc:	00004097          	auipc	ra,0x4
 80024e0:	eb4080e7          	jalr	-332(ra) # 8006390 <json_encode_object_start>
            assert!(rc == 0);
 80024e4:	12051463          	bnez	a0,800260c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x1c8>
            StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 80024e8:	000cc503          	lbu	a0,0(s9)
 80024ec:	01b51563          	bne	a0,s11,80024f6 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0xb2>
            StrnRep::CStr(cstr)  => { cstr }
 80024f0:	004cad03          	lw	s10,4(s9)
 80024f4:	a081                	j	8002534 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0xf0>
            StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 80024f6:	004cad03          	lw	s10,4(s9)
 80024fa:	008ca483          	lw	s1,8(s9)
 80024fe:	fff48513          	addi	a0,s1,-1
 8002502:	00957963          	bgeu	a0,s1,8002514 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0xd0>
 8002506:	00a4b5b3          	sltu	a1,s1,a0
 800250a:	e589                	bnez	a1,8002514 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0xd0>
 800250c:	956a                	add	a0,a0,s10
 800250e:	00054503          	lbu	a0,0(a0)
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 8002512:	c10d                	beqz	a0,8002534 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0xf0>
 8002514:	02000513          	li	a0,32
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 8002518:	0ca4f263          	bgeu	s1,a0,80025dc <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x198>
 800251c:	8562                	mv	a0,s8
 800251e:	85ea                	mv	a1,s10
 8002520:	8626                	mv	a2,s1
 8002522:	00006097          	auipc	ra,0x6
 8002526:	696080e7          	jalr	1686(ra) # 8008bb8 <memcpy>
        self.key_buffer[s.len()] = 0;
 800252a:	009c0533          	add	a0,s8,s1
 800252e:	00050023          	sb	zero,0(a0)
 8002532:	8d62                	mv	s10,s8
            unsafe { mynewt_rust::json_helper_set_float(notused, key_cstr, latitude as f32) };
 8002534:	855e                	mv	a0,s7
 8002536:	85da                	mv	a1,s6
 8002538:	00009097          	auipc	ra,0x9
 800253c:	ed8080e7          	jalr	-296(ra) # 800b410 <__truncdfsf2>
 8002540:	862a                	mv	a2,a0
 8002542:	8562                	mv	a0,s8
 8002544:	85ea                	mv	a1,s10
 8002546:	00007097          	auipc	ra,0x7
 800254a:	f12080e7          	jalr	-238(ra) # 8009458 <json_helper_set_float>
            StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 800254e:	000a4503          	lbu	a0,0(s4)
 8002552:	01b51563          	bne	a0,s11,800255c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x118>
            StrnRep::CStr(cstr)  => { cstr }
 8002556:	004a2b03          	lw	s6,4(s4)
 800255a:	a081                	j	800259a <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x156>
            StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 800255c:	004a2b03          	lw	s6,4(s4)
 8002560:	008a2483          	lw	s1,8(s4)
 8002564:	fff48513          	addi	a0,s1,-1
 8002568:	00957963          	bgeu	a0,s1,800257a <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x136>
 800256c:	00a4b5b3          	sltu	a1,s1,a0
 8002570:	e589                	bnez	a1,800257a <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x136>
 8002572:	955a                	add	a0,a0,s6
 8002574:	00054503          	lbu	a0,0(a0)
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 8002578:	c10d                	beqz	a0,800259a <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x156>
 800257a:	02000513          	li	a0,32
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 800257e:	04a4ff63          	bgeu	s1,a0,80025dc <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x198>
 8002582:	8562                	mv	a0,s8
 8002584:	85da                	mv	a1,s6
 8002586:	8626                	mv	a2,s1
 8002588:	00006097          	auipc	ra,0x6
 800258c:	630080e7          	jalr	1584(ra) # 8008bb8 <memcpy>
        self.key_buffer[s.len()] = 0;
 8002590:	009c0533          	add	a0,s8,s1
 8002594:	00050023          	sb	zero,0(a0)
 8002598:	8b62                	mv	s6,s8
            unsafe { mynewt_rust::json_helper_set_float(notused, key_cstr, longitude as f32) };
 800259a:	854e                	mv	a0,s3
 800259c:	85ca                	mv	a1,s2
 800259e:	00009097          	auipc	ra,0x9
 80025a2:	e72080e7          	jalr	-398(ra) # 800b410 <__truncdfsf2>
 80025a6:	862a                	mv	a2,a0
 80025a8:	8562                	mv	a0,s8
 80025aa:	85da                	mv	a1,s6
 80025ac:	00007097          	auipc	ra,0x7
 80025b0:	eac080e7          	jalr	-340(ra) # 8009458 <json_helper_set_float>
            let rc = unsafe { json::json_encode_object_finish(encoder) }; 
 80025b4:	8556                	mv	a0,s5
 80025b6:	00004097          	auipc	ra,0x4
 80025ba:	17e080e7          	jalr	382(ra) # 8006734 <json_encode_object_finish>
            assert!(rc == 0);
 80025be:	e13d                	bnez	a0,8002624 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_geolocation17h7e7ff0e5ef7c6ffdE+0x1e0>
    }
 80025c0:	4d82                	lw	s11,0(sp)
 80025c2:	4d12                	lw	s10,4(sp)
 80025c4:	4ca2                	lw	s9,8(sp)
 80025c6:	4c32                	lw	s8,12(sp)
 80025c8:	4bc2                	lw	s7,16(sp)
 80025ca:	4b52                	lw	s6,20(sp)
 80025cc:	4ae2                	lw	s5,24(sp)
 80025ce:	4a72                	lw	s4,28(sp)
 80025d0:	5982                	lw	s3,32(sp)
 80025d2:	5912                	lw	s2,36(sp)
 80025d4:	54a2                	lw	s1,40(sp)
 80025d6:	50b2                	lw	ra,44(sp)
 80025d8:	6145                	addi	sp,sp,48
 80025da:	8082                	ret
 80025dc:	0800c537          	lui	a0,0x800c
 80025e0:	bc050513          	addi	a0,a0,-1088 # 800bbc0 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x368>
 80025e4:	00001097          	auipc	ra,0x1
 80025e8:	896080e7          	jalr	-1898(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 80025ec:	00009097          	auipc	ra,0x9
 80025f0:	004080e7          	jalr	4(ra) # 800b5f0 <abort>
            assert!(rc == 0);
 80025f4:	0800c537          	lui	a0,0x800c
 80025f8:	b6c50513          	addi	a0,a0,-1172 # 800bb6c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x314>
 80025fc:	00001097          	auipc	ra,0x1
 8002600:	87e080e7          	jalr	-1922(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8002604:	00009097          	auipc	ra,0x9
 8002608:	fec080e7          	jalr	-20(ra) # 800b5f0 <abort>
            assert!(rc == 0);
 800260c:	0800c537          	lui	a0,0x800c
 8002610:	b8450513          	addi	a0,a0,-1148 # 800bb84 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x32c>
 8002614:	00001097          	auipc	ra,0x1
 8002618:	866080e7          	jalr	-1946(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 800261c:	00009097          	auipc	ra,0x9
 8002620:	fd4080e7          	jalr	-44(ra) # 800b5f0 <abort>
            assert!(rc == 0);
 8002624:	0800c537          	lui	a0,0x800c
 8002628:	b9c50513          	addi	a0,a0,-1124 # 800bb9c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x344>
 800262c:	00001097          	auipc	ra,0x1
 8002630:	84e080e7          	jalr	-1970(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8002634:	00009097          	auipc	ra,0x9
 8002638:	fbc080e7          	jalr	-68(ra) # 800b5f0 <abort>

0800263c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E>:
    pub fn json_set_text_string(&mut self, key: &Strn, value: &Strn) {
 800263c:	1101                	addi	sp,sp,-32
//! COAP encoder state used by CoAP encoding macros
 800263e:	ce06                	sw	ra,28(sp)
 8002640:	cc26                	sw	s1,24(sp)
 8002642:	ca4a                	sw	s2,20(sp)
 8002644:	c84e                	sw	s3,16(sp)
 8002646:	c652                	sw	s4,12(sp)
 8002648:	c456                	sw	s5,8(sp)
 800264a:	8a32                	mv	s4,a2
 800264c:	89aa                	mv	s3,a0
            StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 800264e:	0005c503          	lbu	a0,0(a1)
 8002652:	4a85                	li	s5,1
 8002654:	01551963          	bne	a0,s5,8002666 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E+0x2a>
            StrnRep::CStr(cstr)  => { cstr }
 8002658:	0045a903          	lw	s2,4(a1)
            StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 800265c:	000a4503          	lbu	a0,0(s4)
 8002660:	05550563          	beq	a0,s5,80026aa <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E+0x6e>
 8002664:	a0b1                	j	80026b0 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E+0x74>
            StrnRep::ByteStr(bs) => { self.key_to_cstr(bs) }
 8002666:	0045a903          	lw	s2,4(a1)
 800266a:	4584                	lw	s1,8(a1)
 800266c:	fff48513          	addi	a0,s1,-1
 8002670:	00957963          	bgeu	a0,s1,8002682 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E+0x46>
 8002674:	00a4b5b3          	sltu	a1,s1,a0
 8002678:	e589                	bnez	a1,8002682 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E+0x46>
 800267a:	954a                	add	a0,a0,s2
 800267c:	00054503          	lbu	a0,0(a0)
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 8002680:	c10d                	beqz	a0,80026a2 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E+0x66>
 8002682:	02000513          	li	a0,32
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 8002686:	08a4f363          	bgeu	s1,a0,800270c <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E+0xd0>
 800268a:	854e                	mv	a0,s3
 800268c:	85ca                	mv	a1,s2
 800268e:	8626                	mv	a2,s1
 8002690:	00006097          	auipc	ra,0x6
 8002694:	528080e7          	jalr	1320(ra) # 8008bb8 <memcpy>
        self.key_buffer[s.len()] = 0;
 8002698:	00998533          	add	a0,s3,s1
 800269c:	00050023          	sb	zero,0(a0)
 80026a0:	894e                	mv	s2,s3
            StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 80026a2:	000a4503          	lbu	a0,0(s4)
 80026a6:	01551563          	bne	a0,s5,80026b0 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E+0x74>
            StrnRep::CStr(cstr)  => { cstr }
 80026aa:	004a2603          	lw	a2,4(s4)
 80026ae:	a091                	j	80026f2 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E+0xb6>
            StrnRep::ByteStr(bs) => { self.value_to_cstr(bs) }
 80026b0:	004a2603          	lw	a2,4(s4)
 80026b4:	008a2483          	lw	s1,8(s4)
 80026b8:	fff48513          	addi	a0,s1,-1
 80026bc:	00957963          	bgeu	a0,s1,80026ce <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E+0x92>
 80026c0:	00a4b5b3          	sltu	a1,s1,a0
 80026c4:	e589                	bnez	a1,80026ce <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E+0x92>
 80026c6:	9532                	add	a0,a0,a2
 80026c8:	00054503          	lbu	a0,0(a0)
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 80026cc:	c11d                	beqz	a0,80026f2 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E+0xb6>
 80026ce:	02000513          	li	a0,32
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 80026d2:	04a4f963          	bgeu	s1,a0,8002724 <_ZN6mynewt8encoding12coap_context11CoapContext20json_set_text_string17h7840ecb859761e17E+0xe8>
 80026d6:	02098a13          	addi	s4,s3,32
 80026da:	8552                	mv	a0,s4
 80026dc:	85b2                	mv	a1,a2
 80026de:	8626                	mv	a2,s1
 80026e0:	00006097          	auipc	ra,0x6
 80026e4:	4d8080e7          	jalr	1240(ra) # 8008bb8 <memcpy>
        self.value_buffer[s.len()] = 0;
 80026e8:	009a0533          	add	a0,s4,s1
 80026ec:	00050023          	sb	zero,0(a0)
 80026f0:	8652                	mv	a2,s4
            mynewt_rust::json_helper_set_text_string(
 80026f2:	854e                	mv	a0,s3
 80026f4:	85ca                	mv	a1,s2
 80026f6:	4aa2                	lw	s5,8(sp)
 80026f8:	4a32                	lw	s4,12(sp)
 80026fa:	49c2                	lw	s3,16(sp)
 80026fc:	4952                	lw	s2,20(sp)
 80026fe:	44e2                	lw	s1,24(sp)
 8002700:	40f2                	lw	ra,28(sp)
 8002702:	6105                	addi	sp,sp,32
 8002704:	00007317          	auipc	t1,0x7
 8002708:	d8a30067          	jr	-630(t1) # 800948e <json_helper_set_text_string>
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 800270c:	0800c537          	lui	a0,0x800c
 8002710:	bc050513          	addi	a0,a0,-1088 # 800bbc0 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x368>
 8002714:	00000097          	auipc	ra,0x0
 8002718:	766080e7          	jalr	1894(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 800271c:	00009097          	auipc	ra,0x9
 8002720:	ed4080e7          	jalr	-300(ra) # 800b5f0 <abort>
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 8002724:	0800c537          	lui	a0,0x800c
 8002728:	be450513          	addi	a0,a0,-1052 # 800bbe4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x38c>
 800272c:	00000097          	auipc	ra,0x0
 8002730:	74e080e7          	jalr	1870(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8002734:	00009097          	auipc	ra,0x9
 8002738:	ebc080e7          	jalr	-324(ra) # 800b5f0 <abort>

0800273c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE>:
    pub fn key_to_cstr(&mut self, s: &[u8]) -> *const u8 {                
 800273c:	1141                	addi	sp,sp,-16
//! COAP encoder state used by CoAP encoding macros
 800273e:	c606                	sw	ra,12(sp)
 8002740:	c426                	sw	s1,8(sp)
 8002742:	c24a                	sw	s2,4(sp)
 8002744:	84b2                	mv	s1,a2
 8002746:	892a                	mv	s2,a0
 8002748:	fff60513          	addi	a0,a2,-1
 800274c:	00c57963          	bgeu	a0,a2,800275e <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE+0x22>
 8002750:	00a4b633          	sltu	a2,s1,a0
 8002754:	e609                	bnez	a2,800275e <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE+0x22>
 8002756:	952e                	add	a0,a0,a1
 8002758:	00054503          	lbu	a0,0(a0)
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 800275c:	c105                	beqz	a0,800277c <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE+0x40>
 800275e:	02000513          	li	a0,32
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 8002762:	02a4f363          	bgeu	s1,a0,8002788 <_ZN6mynewt8encoding12coap_context11CoapContext11key_to_cstr17hf1dc1a639a9fd65cE+0x4c>
 8002766:	854a                	mv	a0,s2
 8002768:	8626                	mv	a2,s1
 800276a:	00006097          	auipc	ra,0x6
 800276e:	44e080e7          	jalr	1102(ra) # 8008bb8 <memcpy>
        self.key_buffer[s.len()] = 0;
 8002772:	00990533          	add	a0,s2,s1
 8002776:	00050023          	sb	zero,0(a0)
 800277a:	85ca                	mv	a1,s2
    }
 800277c:	852e                	mv	a0,a1
 800277e:	4912                	lw	s2,4(sp)
 8002780:	44a2                	lw	s1,8(sp)
 8002782:	40b2                	lw	ra,12(sp)
 8002784:	0141                	addi	sp,sp,16
 8002786:	8082                	ret
        assert!(s.len() < COAP_KEY_SIZE, "big key");  //  Key too long
 8002788:	0800c537          	lui	a0,0x800c
 800278c:	bc050513          	addi	a0,a0,-1088 # 800bbc0 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x368>
 8002790:	00000097          	auipc	ra,0x0
 8002794:	6ea080e7          	jalr	1770(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8002798:	00009097          	auipc	ra,0x9
 800279c:	e58080e7          	jalr	-424(ra) # 800b5f0 <abort>

080027a0 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h6c075bbdd12e1839E>:
    pub fn value_to_cstr(&mut self, s: &[u8]) -> *const u8 {
 80027a0:	1141                	addi	sp,sp,-16
//! COAP encoder state used by CoAP encoding macros
 80027a2:	c606                	sw	ra,12(sp)
 80027a4:	c426                	sw	s1,8(sp)
 80027a6:	c24a                	sw	s2,4(sp)
 80027a8:	84b2                	mv	s1,a2
 80027aa:	167d                	addi	a2,a2,-1
 80027ac:	00967963          	bgeu	a2,s1,80027be <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h6c075bbdd12e1839E+0x1e>
 80027b0:	00c4b6b3          	sltu	a3,s1,a2
 80027b4:	e689                	bnez	a3,80027be <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h6c075bbdd12e1839E+0x1e>
 80027b6:	962e                	add	a2,a2,a1
 80027b8:	00064603          	lbu	a2,0(a2)
        if s.last() == Some(&0) { return s.as_ptr() as *const u8; }
 80027bc:	c215                	beqz	a2,80027e0 <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h6c075bbdd12e1839E+0x40>
 80027be:	02000613          	li	a2,32
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 80027c2:	02c4f563          	bgeu	s1,a2,80027ec <_ZN6mynewt8encoding12coap_context11CoapContext13value_to_cstr17h6c075bbdd12e1839E+0x4c>
 80027c6:	02050913          	addi	s2,a0,32
 80027ca:	854a                	mv	a0,s2
 80027cc:	8626                	mv	a2,s1
 80027ce:	00006097          	auipc	ra,0x6
 80027d2:	3ea080e7          	jalr	1002(ra) # 8008bb8 <memcpy>
        self.value_buffer[s.len()] = 0;
 80027d6:	00990533          	add	a0,s2,s1
 80027da:	00050023          	sb	zero,0(a0)
 80027de:	85ca                	mv	a1,s2
    }
 80027e0:	852e                	mv	a0,a1
 80027e2:	4912                	lw	s2,4(sp)
 80027e4:	44a2                	lw	s1,8(sp)
 80027e6:	40b2                	lw	ra,12(sp)
 80027e8:	0141                	addi	sp,sp,16
 80027ea:	8082                	ret
        assert!(s.len() < COAP_VALUE_SIZE, "big value");  //  Value too long
 80027ec:	0800c537          	lui	a0,0x800c
 80027f0:	be450513          	addi	a0,a0,-1052 # 800bbe4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x38c>
 80027f4:	00000097          	auipc	ra,0x0
 80027f8:	686080e7          	jalr	1670(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 80027fc:	00009097          	auipc	ra,0x9
 8002800:	df4080e7          	jalr	-524(ra) # 800b5f0 <abort>

08002804 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h18b2574d199d0ab3E>:
    pub fn fail(&mut self, err: CoapError) {
 8002804:	711d                	addi	sp,sp,-96
//! COAP encoder state used by CoAP encoding macros
 8002806:	ce86                	sw	ra,92(sp)
 8002808:	00b103a3          	sb	a1,7(sp)
        assert_eq!(err, CoapError::OK, "enc fail");
 800280c:	e581                	bnez	a1,8002814 <_ZN6mynewt8encoding12coap_context11CoapContext4fail17h18b2574d199d0ab3E+0x10>
    }
 800280e:	40f6                	lw	ra,92(sp)
 8002810:	6125                	addi	sp,sp,96
 8002812:	8082                	ret
 8002814:	00710513          	addi	a0,sp,7
        assert_eq!(err, CoapError::OK, "enc fail");
 8002818:	dc2a                	sw	a0,56(sp)
 800281a:	0800c537          	lui	a0,0x800c
 800281e:	9b850513          	addi	a0,a0,-1608 # 800b9b8 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x160>
 8002822:	de2a                	sw	a0,60(sp)
 8002824:	0800c537          	lui	a0,0x800c
 8002828:	90c50513          	addi	a0,a0,-1780 # 800b90c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xb4>
 800282c:	c8aa                	sw	a0,80(sp)
 800282e:	4505                	li	a0,1
 8002830:	c2aa                	sw	a0,68(sp)
 8002832:	0800c537          	lui	a0,0x800c
 8002836:	bfc50513          	addi	a0,a0,-1028 # 800bbfc <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x3a4>
 800283a:	c0aa                	sw	a0,64(sp)
 800283c:	08004537          	lui	a0,0x8004
 8002840:	92250513          	addi	a0,a0,-1758 # 8003922 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE>
 8002844:	da2a                	sw	a0,52(sp)
 8002846:	0088                	addi	a0,sp,64
 8002848:	d82a                	sw	a0,48(sp)
 800284a:	1868                	addi	a0,sp,60
 800284c:	d42a                	sw	a0,40(sp)
 800284e:	08002537          	lui	a0,0x8002
 8002852:	c4850513          	addi	a0,a0,-952 # 8001c48 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93b1ac6bb7dc1d44E>
 8002856:	d62a                	sw	a0,44(sp)
 8002858:	d22a                	sw	a0,36(sp)
 800285a:	1828                	addi	a0,sp,56
 800285c:	d02a                	sw	a0,32(sp)
 800285e:	1008                	addi	a0,sp,32
 8002860:	cc2a                	sw	a0,24(sp)
 8002862:	ca82                	sw	zero,84(sp)
 8002864:	c482                	sw	zero,72(sp)
 8002866:	c802                	sw	zero,16(sp)
 8002868:	450d                	li	a0,3
 800286a:	ce2a                	sw	a0,28(sp)
 800286c:	c62a                	sw	a0,12(sp)
 800286e:	0800c537          	lui	a0,0x800c
 8002872:	8f450513          	addi	a0,a0,-1804 # 800b8f4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x9c>
 8002876:	c42a                	sw	a0,8(sp)
 8002878:	0800c537          	lui	a0,0x800c
 800287c:	c0450593          	addi	a1,a0,-1020 # 800bc04 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x3ac>
 8002880:	0028                	addi	a0,sp,8
 8002882:	00000097          	auipc	ra,0x0
 8002886:	686080e7          	jalr	1670(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 800288a:	00009097          	auipc	ra,0x9
 800288e:	d66080e7          	jalr	-666(ra) # 800b5f0 <abort>

08002892 <_ZN6mynewt8encoding12coap_context11CoapContext11to_void_ptr17he7e29acd0362609bE>:
    }
 8002892:	8082                	ret

08002894 <_ZN75_$LT$str$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17h172354ca0391548fE>:
/// Convert the type to array of bytes that may or may not end with null
impl ToBytesOptionalNull for str {
    /// Convert the type to array of bytes that may or may not end with null
    fn to_bytes_optional_nul(&self) -> &[u8] {
        self.as_bytes()
    }
 8002894:	8082                	ret

08002896 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17hae64e8766a77e514E>:
}

/// Convert the type to array of bytes that may or may not end with null. Strn always ends with null.
impl ToBytesOptionalNull for crate::Strn {
    /// Convert the type to array of bytes that may or may not end with null. Strn always ends with null.
    fn to_bytes_optional_nul(&self) -> &[u8] {
 8002896:	1141                	addi	sp,sp,-16
//! COAP encoder state used by CoAP encoding macros
 8002898:	c606                	sw	ra,12(sp)
        match self.rep {
            StrnRep::ByteStr(bs) => { bs }
 800289a:	00054583          	lbu	a1,0(a0)
 800289e:	4605                	li	a2,1
 80028a0:	00c58863          	beq	a1,a2,80028b0 <_ZN84_$LT$mynewt..Strn$u20$as$u20$mynewt..encoding..coap_context..ToBytesOptionalNull$GT$21to_bytes_optional_nul17hae64e8766a77e514E+0x1a>
 80028a4:	4150                	lw	a2,4(a0)
 80028a6:	450c                	lw	a1,8(a0)
            StrnRep::CStr(_cstr)  => { assert!(false, "strn bytes"); &[] }
            //  TODO: unsafe { ::core::mem::transmute::<*const u8, &[u8]>(cstr) }
        }
    }
 80028a8:	8532                	mv	a0,a2
 80028aa:	40b2                	lw	ra,12(sp)
 80028ac:	0141                	addi	sp,sp,16
 80028ae:	8082                	ret
            StrnRep::CStr(_cstr)  => { assert!(false, "strn bytes"); &[] }
 80028b0:	0800c537          	lui	a0,0x800c
 80028b4:	c2050513          	addi	a0,a0,-992 # 800bc20 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x3c8>
 80028b8:	00000097          	auipc	ra,0x0
 80028bc:	5c2080e7          	jalr	1474(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 80028c0:	00009097          	auipc	ra,0x9
 80028c4:	d30080e7          	jalr	-720(ra) # 800b5f0 <abort>

080028c8 <_ZN6mynewt7sysinit17h46656f63b85c8fe0E>:
pub fn sysinit() {
 80028c8:	1141                	addi	sp,sp,-16
    unsafe { rust_sysinit(); }
 80028ca:	c606                	sw	ra,12(sp)
 80028cc:	00007097          	auipc	ra,0x7
 80028d0:	c28080e7          	jalr	-984(ra) # 80094f4 <rust_sysinit>
 80028d4:	40b2                	lw	ra,12(sp)
 80028d6:	0141                	addi	sp,sp,16
 80028d8:	00002317          	auipc	t1,0x2
 80028dc:	49630067          	jr	1174(t1) # 8004d6e <console_flush>

080028e0 <_ZN6mynewt4Strn3new17h505d7b5ee6564253E>:
    pub fn new(bs: &'static [u8]) -> Strn {
 80028e0:	711d                	addi	sp,sp,-96
//! Mynewt API for Rust. Contains Rust bindings for Mynewt API for C, generated by `bindgen`.
 80028e2:	ce86                	sw	ra,92(sp)
 80028e4:	fff60693          	addi	a3,a2,-1
 80028e8:	02d66063          	bltu	a2,a3,8002908 <_ZN6mynewt4Strn3new17h505d7b5ee6564253E+0x28>
 80028ec:	00c6fe63          	bgeu	a3,a2,8002908 <_ZN6mynewt4Strn3new17h505d7b5ee6564253E+0x28>
 80028f0:	96ae                	add	a3,a3,a1
        assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 80028f2:	c236                	sw	a3,4(sp)
 80028f4:	0006c683          	lbu	a3,0(a3)
 80028f8:	ea89                	bnez	a3,800290a <_ZN6mynewt4Strn3new17h505d7b5ee6564253E+0x2a>
        Strn { 
 80028fa:	c510                	sw	a2,8(a0)
 80028fc:	c14c                	sw	a1,4(a0)
 80028fe:	00050023          	sb	zero,0(a0)
    }
 8002902:	40f6                	lw	ra,92(sp)
 8002904:	6125                	addi	sp,sp,96
 8002906:	8082                	ret
        assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8002908:	c202                	sw	zero,4(sp)
 800290a:	0048                	addi	a0,sp,4
 800290c:	dc2a                	sw	a0,56(sp)
 800290e:	0800c537          	lui	a0,0x800c
 8002912:	bb450513          	addi	a0,a0,-1100 # 800bbb4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x35c>
 8002916:	de2a                	sw	a0,60(sp)
 8002918:	0800c537          	lui	a0,0x800c
 800291c:	90c50513          	addi	a0,a0,-1780 # 800b90c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xb4>
 8002920:	c8aa                	sw	a0,80(sp)
 8002922:	4505                	li	a0,1
 8002924:	c2aa                	sw	a0,68(sp)
 8002926:	0800c537          	lui	a0,0x800c
 800292a:	c4050513          	addi	a0,a0,-960 # 800bc40 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x3e8>
 800292e:	c0aa                	sw	a0,64(sp)
 8002930:	08004537          	lui	a0,0x8004
 8002934:	92250513          	addi	a0,a0,-1758 # 8003922 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE>
 8002938:	da2a                	sw	a0,52(sp)
 800293a:	0088                	addi	a0,sp,64
 800293c:	d82a                	sw	a0,48(sp)
 800293e:	1868                	addi	a0,sp,60
 8002940:	d42a                	sw	a0,40(sp)
 8002942:	08002537          	lui	a0,0x8002
 8002946:	c9050513          	addi	a0,a0,-880 # 8001c90 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93bb0409688bd347E>
 800294a:	d62a                	sw	a0,44(sp)
 800294c:	d22a                	sw	a0,36(sp)
 800294e:	1828                	addi	a0,sp,56
 8002950:	d02a                	sw	a0,32(sp)
 8002952:	1008                	addi	a0,sp,32
 8002954:	cc2a                	sw	a0,24(sp)
 8002956:	ca82                	sw	zero,84(sp)
 8002958:	c482                	sw	zero,72(sp)
 800295a:	c802                	sw	zero,16(sp)
 800295c:	450d                	li	a0,3
 800295e:	ce2a                	sw	a0,28(sp)
 8002960:	c62a                	sw	a0,12(sp)
 8002962:	0800c537          	lui	a0,0x800c
 8002966:	8f450513          	addi	a0,a0,-1804 # 800b8f4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x9c>
 800296a:	c42a                	sw	a0,8(sp)
 800296c:	0800c537          	lui	a0,0x800c
 8002970:	c6050593          	addi	a1,a0,-928 # 800bc60 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x408>
 8002974:	0028                	addi	a0,sp,8
 8002976:	00000097          	auipc	ra,0x0
 800297a:	592080e7          	jalr	1426(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 800297e:	00009097          	auipc	ra,0x9
 8002982:	c72080e7          	jalr	-910(ra) # 800b5f0 <abort>

08002986 <_ZN6mynewt4Strn3len17h964375c316a460f8E>:
    pub fn len(&self) -> usize {
 8002986:	711d                	addi	sp,sp,-96
//! Mynewt API for Rust. Contains Rust bindings for Mynewt API for C, generated by `bindgen`.
 8002988:	ce86                	sw	ra,92(sp)
 800298a:	85aa                	mv	a1,a0
            StrnRep::ByteStr(bs) => { 
 800298c:	00054503          	lbu	a0,0(a0)
 8002990:	4605                	li	a2,1
 8002992:	02c51463          	bne	a0,a2,80029ba <_ZN6mynewt4Strn3len17h964375c316a460f8E+0x34>
            StrnRep::CStr(cstr)  => { 
 8002996:	41c8                	lw	a0,4(a1)
                if cstr.is_null() { return 0; }
 8002998:	c129                	beqz	a0,80029da <_ZN6mynewt4Strn3len17h964375c316a460f8E+0x54>
 800299a:	07e00613          	li	a2,126
 800299e:	4581                	li	a1,0
 80029a0:	04b66163          	bltu	a2,a1,80029e2 <_ZN6mynewt4Strn3len17h964375c316a460f8E+0x5c>
                    let ptr: *const u8 =  ((cstr as u32) + len) as *const u8;
 80029a4:	00b506b3          	add	a3,a0,a1
 80029a8:	0585                	addi	a1,a1,1
                    if unsafe { *ptr } == 0 { return len as usize; }                    
 80029aa:	0006c683          	lbu	a3,0(a3)
 80029ae:	faed                	bnez	a3,80029a0 <_ZN6mynewt4Strn3len17h964375c316a460f8E+0x1a>
    }
 80029b0:	fff58513          	addi	a0,a1,-1
 80029b4:	40f6                	lw	ra,92(sp)
 80029b6:	6125                	addi	sp,sp,96
 80029b8:	8082                	ret
            StrnRep::ByteStr(bs) => { 
 80029ba:	4594                	lw	a3,8(a1)
 80029bc:	fff68513          	addi	a0,a3,-1
 80029c0:	02a6ed63          	bltu	a3,a0,80029fa <_ZN6mynewt4Strn3len17h964375c316a460f8E+0x74>
 80029c4:	02d57b63          	bgeu	a0,a3,80029fa <_ZN6mynewt4Strn3len17h964375c316a460f8E+0x74>
 80029c8:	41cc                	lw	a1,4(a1)
 80029ca:	95aa                	add	a1,a1,a0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 80029cc:	c22e                	sw	a1,4(sp)
 80029ce:	0005c583          	lbu	a1,0(a1)
 80029d2:	e58d                	bnez	a1,80029fc <_ZN6mynewt4Strn3len17h964375c316a460f8E+0x76>
    }
 80029d4:	40f6                	lw	ra,92(sp)
 80029d6:	6125                	addi	sp,sp,96
 80029d8:	8082                	ret
 80029da:	4501                	li	a0,0
 80029dc:	40f6                	lw	ra,92(sp)
 80029de:	6125                	addi	sp,sp,96
 80029e0:	8082                	ret
                assert!(false, "big strn");  //  String too long
 80029e2:	0800c537          	lui	a0,0x800c
 80029e6:	c7050513          	addi	a0,a0,-912 # 800bc70 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x418>
 80029ea:	00000097          	auipc	ra,0x0
 80029ee:	490080e7          	jalr	1168(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 80029f2:	00009097          	auipc	ra,0x9
 80029f6:	bfe080e7          	jalr	-1026(ra) # 800b5f0 <abort>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 80029fa:	c202                	sw	zero,4(sp)
 80029fc:	0048                	addi	a0,sp,4
 80029fe:	dc2a                	sw	a0,56(sp)
 8002a00:	0800c537          	lui	a0,0x800c
 8002a04:	bb450513          	addi	a0,a0,-1100 # 800bbb4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x35c>
 8002a08:	de2a                	sw	a0,60(sp)
 8002a0a:	0800c537          	lui	a0,0x800c
 8002a0e:	90c50513          	addi	a0,a0,-1780 # 800b90c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xb4>
 8002a12:	c8aa                	sw	a0,80(sp)
 8002a14:	c2b2                	sw	a2,68(sp)
 8002a16:	0800c537          	lui	a0,0x800c
 8002a1a:	c4050513          	addi	a0,a0,-960 # 800bc40 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x3e8>
 8002a1e:	c0aa                	sw	a0,64(sp)
 8002a20:	08004537          	lui	a0,0x8004
 8002a24:	92250513          	addi	a0,a0,-1758 # 8003922 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE>
 8002a28:	da2a                	sw	a0,52(sp)
 8002a2a:	0088                	addi	a0,sp,64
 8002a2c:	d82a                	sw	a0,48(sp)
 8002a2e:	1868                	addi	a0,sp,60
 8002a30:	d42a                	sw	a0,40(sp)
 8002a32:	08002537          	lui	a0,0x8002
 8002a36:	c9050513          	addi	a0,a0,-880 # 8001c90 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93bb0409688bd347E>
 8002a3a:	d62a                	sw	a0,44(sp)
 8002a3c:	d22a                	sw	a0,36(sp)
 8002a3e:	1828                	addi	a0,sp,56
 8002a40:	d02a                	sw	a0,32(sp)
 8002a42:	1008                	addi	a0,sp,32
 8002a44:	cc2a                	sw	a0,24(sp)
 8002a46:	ca82                	sw	zero,84(sp)
 8002a48:	c482                	sw	zero,72(sp)
 8002a4a:	c802                	sw	zero,16(sp)
 8002a4c:	450d                	li	a0,3
 8002a4e:	ce2a                	sw	a0,28(sp)
 8002a50:	c62a                	sw	a0,12(sp)
 8002a52:	0800c537          	lui	a0,0x800c
 8002a56:	8f450513          	addi	a0,a0,-1804 # 800b8f4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x9c>
 8002a5a:	c42a                	sw	a0,8(sp)
 8002a5c:	0800c537          	lui	a0,0x800c
 8002a60:	c8850593          	addi	a1,a0,-888 # 800bc88 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x430>
 8002a64:	0028                	addi	a0,sp,8
 8002a66:	00000097          	auipc	ra,0x0
 8002a6a:	4a2080e7          	jalr	1186(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8002a6e:	00009097          	auipc	ra,0x9
 8002a72:	b82080e7          	jalr	-1150(ra) # 800b5f0 <abort>

08002a76 <_ZN6mynewt6kernel2os10eventq_run17h6ac9d8384aa82ab0E>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8002a76:	1141                	addi	sp,sp,-16
/* automatically generated by rust-bindgen */
 8002a78:	c606                	sw	ra,12(sp)
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8002a7a:	00005097          	auipc	ra,0x5
 8002a7e:	cca080e7          	jalr	-822(ra) # 8007744 <os_eventq_run>
 8002a82:	4505                	li	a0,1
 8002a84:	40b2                	lw	ra,12(sp)
 8002a86:	0141                	addi	sp,sp,16
 8002a88:	8082                	ret

08002a8a <_ZN6mynewt6kernel2os15eventq_dflt_get17ha91431cf3cedfcd0E>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8002a8a:	1141                	addi	sp,sp,-16
 8002a8c:	c606                	sw	ra,12(sp)
 8002a8e:	c426                	sw	s1,8(sp)
 8002a90:	84aa                	mv	s1,a0
 8002a92:	00005097          	auipc	ra,0x5
 8002a96:	d22080e7          	jalr	-734(ra) # 80077b4 <os_eventq_dflt_get>
 8002a9a:	c0c8                	sw	a0,4(s1)
 8002a9c:	0004a023          	sw	zero,0(s1)
 8002aa0:	44a2                	lw	s1,8(sp)
 8002aa2:	40b2                	lw	ra,12(sp)
 8002aa4:	0141                	addi	sp,sp,16
 8002aa6:	8082                	ret

08002aa8 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h94e658dc8a8affe2E>:
    #[doc = " - __`arg`__: type to check"]
    #[doc = ""]
    #[doc = " Return: 1 if matches, 0 if it doesn't match."]
    pub fn sensor_mgr_match_bytype(sensor: *mut sensor, arg1: *mut ::cty::c_void) -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8002aa8:	711d                	addi	sp,sp,-96
/* automatically generated by rust-bindgen */
 8002aaa:	ce86                	sw	ra,92(sp)
 8002aac:	cca6                	sw	s1,88(sp)
 8002aae:	862a                	mv	a2,a0
 8002ab0:	4148                	lw	a0,4(a0)
            StrnRep::ByteStr(bs) => {         
 8002ab2:	00064683          	lbu	a3,0(a2)
 8002ab6:	4485                	li	s1,1
 8002ab8:	00968e63          	beq	a3,s1,8002ad4 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h94e658dc8a8affe2E+0x2c>
 8002abc:	4614                	lw	a3,8(a2)
 8002abe:	fff68613          	addi	a2,a3,-1
 8002ac2:	02c6e463          	bltu	a3,a2,8002aea <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h94e658dc8a8affe2E+0x42>
 8002ac6:	02d67263          	bgeu	a2,a3,8002aea <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h94e658dc8a8affe2E+0x42>
 8002aca:	962a                	add	a2,a2,a0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8002acc:	c232                	sw	a2,4(sp)
 8002ace:	00064603          	lbu	a2,0(a2)
 8002ad2:	ee09                	bnez	a2,8002aec <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h94e658dc8a8affe2E+0x44>
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8002ad4:	00004097          	auipc	ra,0x4
 8002ad8:	19a080e7          	jalr	410(ra) # 8006c6e <sensor_set_poll_rate_ms>
 8002adc:	c111                	beqz	a0,8002ae0 <_ZN6mynewt2hw6sensor8bindings16set_poll_rate_ms17h94e658dc8a8affe2E+0x38>
 8002ade:	84aa                	mv	s1,a0
 8002ae0:	8526                	mv	a0,s1
 8002ae2:	44e6                	lw	s1,88(sp)
 8002ae4:	40f6                	lw	ra,92(sp)
 8002ae6:	6125                	addi	sp,sp,96
 8002ae8:	8082                	ret
 8002aea:	c202                	sw	zero,4(sp)
 8002aec:	0048                	addi	a0,sp,4
 8002aee:	dc2a                	sw	a0,56(sp)
 8002af0:	0800c537          	lui	a0,0x800c
 8002af4:	bb450513          	addi	a0,a0,-1100 # 800bbb4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x35c>
 8002af8:	de2a                	sw	a0,60(sp)
 8002afa:	0800c537          	lui	a0,0x800c
 8002afe:	90c50513          	addi	a0,a0,-1780 # 800b90c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xb4>
 8002b02:	c8aa                	sw	a0,80(sp)
 8002b04:	c2a6                	sw	s1,68(sp)
 8002b06:	0800c537          	lui	a0,0x800c
 8002b0a:	c4050513          	addi	a0,a0,-960 # 800bc40 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x3e8>
 8002b0e:	c0aa                	sw	a0,64(sp)
 8002b10:	08004537          	lui	a0,0x8004
 8002b14:	92250513          	addi	a0,a0,-1758 # 8003922 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE>
 8002b18:	da2a                	sw	a0,52(sp)
 8002b1a:	0088                	addi	a0,sp,64
 8002b1c:	d82a                	sw	a0,48(sp)
 8002b1e:	1868                	addi	a0,sp,60
 8002b20:	d42a                	sw	a0,40(sp)
 8002b22:	08002537          	lui	a0,0x8002
 8002b26:	c9050513          	addi	a0,a0,-880 # 8001c90 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93bb0409688bd347E>
 8002b2a:	d62a                	sw	a0,44(sp)
 8002b2c:	d22a                	sw	a0,36(sp)
 8002b2e:	1828                	addi	a0,sp,56
 8002b30:	d02a                	sw	a0,32(sp)
 8002b32:	1008                	addi	a0,sp,32
 8002b34:	cc2a                	sw	a0,24(sp)
 8002b36:	ca82                	sw	zero,84(sp)
 8002b38:	c482                	sw	zero,72(sp)
 8002b3a:	c802                	sw	zero,16(sp)
 8002b3c:	450d                	li	a0,3
 8002b3e:	ce2a                	sw	a0,28(sp)
 8002b40:	c62a                	sw	a0,12(sp)
 8002b42:	0800c537          	lui	a0,0x800c
 8002b46:	8f450513          	addi	a0,a0,-1804 # 800b8f4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x9c>
 8002b4a:	c42a                	sw	a0,8(sp)
 8002b4c:	0800c537          	lui	a0,0x800c
 8002b50:	c9850593          	addi	a1,a0,-872 # 800bc98 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x440>
 8002b54:	0028                	addi	a0,sp,8
 8002b56:	00000097          	auipc	ra,0x0
 8002b5a:	3b2080e7          	jalr	946(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8002b5e:	00009097          	auipc	ra,0x9
 8002b62:	a92080e7          	jalr	-1390(ra) # 800b5f0 <abort>

08002b66 <_ZN6mynewt4libs14sensor_network16init_server_post17h8ae86e6b88fcde3eE>:
    pub fn register_collector_transport() -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    pub fn sensor_network_register_transport(iface_type: u8) -> ::cty::c_int;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8002b66:	711d                	addi	sp,sp,-96
/* automatically generated by rust-bindgen */
 8002b68:	ce86                	sw	ra,92(sp)
 8002b6a:	cca6                	sw	s1,88(sp)
 8002b6c:	84aa                	mv	s1,a0
 8002b6e:	41c8                	lw	a0,4(a1)
            StrnRep::ByteStr(bs) => {         
 8002b70:	0005c683          	lbu	a3,0(a1)
 8002b74:	4605                	li	a2,1
 8002b76:	00c68e63          	beq	a3,a2,8002b92 <_ZN6mynewt4libs14sensor_network16init_server_post17h8ae86e6b88fcde3eE+0x2c>
 8002b7a:	4594                	lw	a3,8(a1)
 8002b7c:	fff68593          	addi	a1,a3,-1
 8002b80:	02b6e563          	bltu	a3,a1,8002baa <_ZN6mynewt4libs14sensor_network16init_server_post17h8ae86e6b88fcde3eE+0x44>
 8002b84:	02d5f363          	bgeu	a1,a3,8002baa <_ZN6mynewt4libs14sensor_network16init_server_post17h8ae86e6b88fcde3eE+0x44>
 8002b88:	95aa                	add	a1,a1,a0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
 8002b8a:	c22e                	sw	a1,4(sp)
 8002b8c:	0005c583          	lbu	a1,0(a1)
 8002b90:	ed91                	bnez	a1,8002bac <_ZN6mynewt4libs14sensor_network16init_server_post17h8ae86e6b88fcde3eE+0x46>
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8002b92:	00003097          	auipc	ra,0x3
 8002b96:	95c080e7          	jalr	-1700(ra) # 80054ee <init_server_post>
 8002b9a:	00a480a3          	sb	a0,1(s1)
 8002b9e:	00048023          	sb	zero,0(s1)
 8002ba2:	44e6                	lw	s1,88(sp)
 8002ba4:	40f6                	lw	ra,92(sp)
 8002ba6:	6125                	addi	sp,sp,96
 8002ba8:	8082                	ret
 8002baa:	c202                	sw	zero,4(sp)
 8002bac:	0048                	addi	a0,sp,4
 8002bae:	dc2a                	sw	a0,56(sp)
 8002bb0:	0800c537          	lui	a0,0x800c
 8002bb4:	bb450513          	addi	a0,a0,-1100 # 800bbb4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x35c>
 8002bb8:	de2a                	sw	a0,60(sp)
 8002bba:	0800c537          	lui	a0,0x800c
 8002bbe:	90c50513          	addi	a0,a0,-1780 # 800b90c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xb4>
 8002bc2:	c8aa                	sw	a0,80(sp)
 8002bc4:	c2b2                	sw	a2,68(sp)
 8002bc6:	0800c537          	lui	a0,0x800c
 8002bca:	c4050513          	addi	a0,a0,-960 # 800bc40 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x3e8>
 8002bce:	c0aa                	sw	a0,64(sp)
 8002bd0:	08004537          	lui	a0,0x8004
 8002bd4:	92250513          	addi	a0,a0,-1758 # 8003922 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE>
 8002bd8:	da2a                	sw	a0,52(sp)
 8002bda:	0088                	addi	a0,sp,64
 8002bdc:	d82a                	sw	a0,48(sp)
 8002bde:	1868                	addi	a0,sp,60
 8002be0:	d42a                	sw	a0,40(sp)
 8002be2:	08002537          	lui	a0,0x8002
 8002be6:	c9050513          	addi	a0,a0,-880 # 8001c90 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h93bb0409688bd347E>
 8002bea:	d62a                	sw	a0,44(sp)
 8002bec:	d22a                	sw	a0,36(sp)
 8002bee:	1828                	addi	a0,sp,56
 8002bf0:	d02a                	sw	a0,32(sp)
 8002bf2:	1008                	addi	a0,sp,32
 8002bf4:	cc2a                	sw	a0,24(sp)
 8002bf6:	ca82                	sw	zero,84(sp)
 8002bf8:	c482                	sw	zero,72(sp)
 8002bfa:	c802                	sw	zero,16(sp)
 8002bfc:	450d                	li	a0,3
 8002bfe:	ce2a                	sw	a0,28(sp)
 8002c00:	c62a                	sw	a0,12(sp)
 8002c02:	0800c537          	lui	a0,0x800c
 8002c06:	8f450513          	addi	a0,a0,-1804 # 800b8f4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x9c>
 8002c0a:	c42a                	sw	a0,8(sp)
 8002c0c:	0800c537          	lui	a0,0x800c
 8002c10:	c9850593          	addi	a1,a0,-872 # 800bc98 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x440>
 8002c14:	0028                	addi	a0,sp,8
 8002c16:	00000097          	auipc	ra,0x0
 8002c1a:	2f2080e7          	jalr	754(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8002c1e:	00009097          	auipc	ra,0x9
 8002c22:	9d2080e7          	jalr	-1582(ra) # 800b5f0 <abort>

08002c26 <_ZN6mynewt4libs14sensor_network12prepare_post17hd02b64e4d7b637f9E>:
    pub fn init_collector_post() -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    pub fn sensor_network_init_post(iface_type: u8, uri: *const ::cty::c_char) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8002c26:	1141                	addi	sp,sp,-16
/* automatically generated by rust-bindgen */
 8002c28:	c606                	sw	ra,12(sp)
 8002c2a:	c426                	sw	s1,8(sp)
 8002c2c:	84aa                	mv	s1,a0
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8002c2e:	852e                	mv	a0,a1
 8002c30:	00003097          	auipc	ra,0x3
 8002c34:	8ce080e7          	jalr	-1842(ra) # 80054fe <sensor_network_prepare_post>
 8002c38:	00a480a3          	sb	a0,1(s1)
 8002c3c:	00048023          	sb	zero,0(s1)
 8002c40:	44a2                	lw	s1,8(sp)
 8002c42:	40b2                	lw	ra,12(sp)
 8002c44:	0141                	addi	sp,sp,16
 8002c46:	8082                	ret

08002c48 <_ZN6mynewt4libs14sensor_network14do_server_post17h26084f25b670f291E>:
    pub fn sensor_network_prepare_post(encoding: ::cty::c_int) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8002c48:	1141                	addi	sp,sp,-16
 8002c4a:	c606                	sw	ra,12(sp)
 8002c4c:	c426                	sw	s1,8(sp)
 8002c4e:	84aa                	mv	s1,a0
 8002c50:	00003097          	auipc	ra,0x3
 8002c54:	938080e7          	jalr	-1736(ra) # 8005588 <do_server_post>
 8002c58:	00a480a3          	sb	a0,1(s1)
 8002c5c:	00048023          	sb	zero,0(s1)
 8002c60:	44a2                	lw	s1,8(sp)
 8002c62:	40b2                	lw	ra,12(sp)
 8002c64:	0141                	addi	sp,sp,16
 8002c66:	8082                	ret

08002c68 <_ZN6mynewt4libs14sensor_network13get_device_id17hea5bbcf5456b66c0E>:
    pub fn should_send_to_collector(
        val: *mut sensor_value,
        device_name: *const ::cty::c_char,
    ) -> bool;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
 8002c68:	1141                	addi	sp,sp,-16
 8002c6a:	c606                	sw	ra,12(sp)
 8002c6c:	c426                	sw	s1,8(sp)
 8002c6e:	84aa                	mv	s1,a0
 8002c70:	00003097          	auipc	ra,0x3
 8002c74:	a08080e7          	jalr	-1528(ra) # 8005678 <get_device_id>
 8002c78:	c488                	sw	a0,8(s1)
 8002c7a:	4505                	li	a0,1
 8002c7c:	00a48223          	sb	a0,4(s1)
 8002c80:	0004a023          	sw	zero,0(s1)
 8002c84:	44a2                	lw	s1,8(sp)
 8002c86:	40b2                	lw	ra,12(sp)
 8002c88:	0141                	addi	sp,sp,16
 8002c8a:	8082                	ret

08002c8c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E>:
    #[derive(Debug, PartialEq)]
 8002c8c:	1101                	addi	sp,sp,-32
//! Mynewt API for Rust. Contains Rust bindings for Mynewt API for C, generated by `bindgen`.
 8002c8e:	ce06                	sw	ra,28(sp)
 8002c90:	cc26                	sw	s1,24(sp)
    #[derive(Debug, PartialEq)]
 8002c92:	4108                	lw	a0,0(a0)
 8002c94:	565d                	li	a2,-9
 8002c96:	02a64363          	blt	a2,a0,8002cbc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x30>
 8002c9a:	56cd                	li	a3,-13
 8002c9c:	04a6c063          	blt	a3,a0,8002cdc <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x50>
 8002ca0:	5645                	li	a2,-15
 8002ca2:	06a64763          	blt	a2,a0,8002d10 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x84>
 8002ca6:	76c1                	lui	a3,0xffff0
 8002ca8:	0685                	addi	a3,a3,1
 8002caa:	0ad50c63          	beq	a0,a3,8002d62 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0xd6>
 8002cae:	10c51c63          	bne	a0,a2,8002dc6 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x13a>
 8002cb2:	0800c537          	lui	a0,0x800c
 8002cb6:	cc450613          	addi	a2,a0,-828 # 800bcc4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x46c>
 8002cba:	a87d                	j	8002d78 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0xec>
 8002cbc:	566d                	li	a2,-5
 8002cbe:	02a64c63          	blt	a2,a0,8002cf6 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x6a>
 8002cc2:	56e5                	li	a3,-7
 8002cc4:	06a6c063          	blt	a3,a0,8002d24 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x98>
 8002cc8:	5661                	li	a2,-8
 8002cca:	0ac50363          	beq	a0,a2,8002d70 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0xe4>
 8002cce:	0ed51c63          	bne	a0,a3,8002dc6 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x13a>
 8002cd2:	0800c537          	lui	a0,0x800c
 8002cd6:	d1a50613          	addi	a2,a0,-742 # 800bd1a <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x4c2>
 8002cda:	a0dd                	j	8002dc0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x134>
 8002cdc:	56d5                	li	a3,-11
 8002cde:	04a6cd63          	blt	a3,a0,8002d38 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0xac>
 8002ce2:	5651                	li	a2,-12
 8002ce4:	08c50d63          	beq	a0,a2,8002d7e <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0xf2>
 8002ce8:	0cd51f63          	bne	a0,a3,8002dc6 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x13a>
 8002cec:	0800c537          	lui	a0,0x800c
 8002cf0:	cf150613          	addi	a2,a0,-783 # 800bcf1 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x499>
 8002cf4:	a89d                	j	8002d6a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0xde>
 8002cf6:	5675                	li	a2,-3
 8002cf8:	04a64a63          	blt	a2,a0,8002d4c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0xc0>
 8002cfc:	56f1                	li	a3,-4
 8002cfe:	08d50763          	beq	a0,a3,8002d8c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x100>
 8002d02:	0cc51263          	bne	a0,a2,8002dc6 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x13a>
 8002d06:	0800c537          	lui	a0,0x800c
 8002d0a:	d3f50613          	addi	a2,a0,-705 # 800bd3f <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x4e7>
 8002d0e:	a8b1                	j	8002d6a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0xde>
 8002d10:	5649                	li	a2,-14
 8002d12:	08c50263          	beq	a0,a2,8002d96 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x10a>
 8002d16:	0ad51863          	bne	a0,a3,8002dc6 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x13a>
 8002d1a:	0800c537          	lui	a0,0x800c
 8002d1e:	cda50613          	addi	a2,a0,-806 # 800bcda <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x482>
 8002d22:	a0a1                	j	8002d6a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0xde>
 8002d24:	56e9                	li	a3,-6
 8002d26:	06d50f63          	beq	a0,a3,8002da4 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x118>
 8002d2a:	08c51e63          	bne	a0,a2,8002dc6 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x13a>
 8002d2e:	0800c537          	lui	a0,0x800c
 8002d32:	d2e50613          	addi	a2,a0,-722 # 800bd2e <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x4d6>
 8002d36:	a861                	j	8002dce <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x142>
 8002d38:	56d9                	li	a3,-10
 8002d3a:	06d50a63          	beq	a0,a3,8002dae <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x122>
 8002d3e:	08c51463          	bne	a0,a2,8002dc6 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x13a>
 8002d42:	0800c537          	lui	a0,0x800c
 8002d46:	d0750613          	addi	a2,a0,-761 # 800bd07 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x4af>
 8002d4a:	a89d                	j	8002dc0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x134>
 8002d4c:	5679                	li	a2,-2
 8002d4e:	06c50563          	beq	a0,a2,8002db8 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x12c>
 8002d52:	567d                	li	a2,-1
 8002d54:	06c51963          	bne	a0,a2,8002dc6 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x13a>
 8002d58:	0800c537          	lui	a0,0x800c
 8002d5c:	d5550613          	addi	a2,a0,-683 # 800bd55 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x4fd>
 8002d60:	a085                	j	8002dc0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x134>
 8002d62:	0800c537          	lui	a0,0x800c
 8002d66:	cb850613          	addi	a2,a0,-840 # 800bcb8 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x460>
 8002d6a:	0024                	addi	s1,sp,8
 8002d6c:	46b1                	li	a3,12
 8002d6e:	a095                	j	8002dd2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x146>
 8002d70:	0800c537          	lui	a0,0x800c
 8002d74:	d1150613          	addi	a2,a0,-751 # 800bd11 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x4b9>
 8002d78:	0024                	addi	s1,sp,8
 8002d7a:	46a5                	li	a3,9
 8002d7c:	a899                	j	8002dd2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x146>
 8002d7e:	0800c537          	lui	a0,0x800c
 8002d82:	ce650613          	addi	a2,a0,-794 # 800bce6 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x48e>
 8002d86:	0024                	addi	s1,sp,8
 8002d88:	46ad                	li	a3,11
 8002d8a:	a0a1                	j	8002dd2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x146>
 8002d8c:	0800c537          	lui	a0,0x800c
 8002d90:	d3550613          	addi	a2,a0,-715 # 800bd35 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x4dd>
 8002d94:	a035                	j	8002dc0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x134>
 8002d96:	0800c537          	lui	a0,0x800c
 8002d9a:	ccd50613          	addi	a2,a0,-819 # 800bccd <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x475>
 8002d9e:	0024                	addi	s1,sp,8
 8002da0:	46b5                	li	a3,13
 8002da2:	a805                	j	8002dd2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x146>
 8002da4:	0800c537          	lui	a0,0x800c
 8002da8:	d2450613          	addi	a2,a0,-732 # 800bd24 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x4cc>
 8002dac:	a811                	j	8002dc0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x134>
 8002dae:	0800c537          	lui	a0,0x800c
 8002db2:	cfd50613          	addi	a2,a0,-771 # 800bcfd <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x4a5>
 8002db6:	a029                	j	8002dc0 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x134>
 8002db8:	0800c537          	lui	a0,0x800c
 8002dbc:	d4b50613          	addi	a2,a0,-693 # 800bd4b <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x4f3>
 8002dc0:	0024                	addi	s1,sp,8
 8002dc2:	46a9                	li	a3,10
 8002dc4:	a039                	j	8002dd2 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h4ea6aa97237e1e60E+0x146>
 8002dc6:	0800c537          	lui	a0,0x800c
 8002dca:	d5f50613          	addi	a2,a0,-673 # 800bd5f <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x507>
 8002dce:	0024                	addi	s1,sp,8
 8002dd0:	469d                	li	a3,7
 8002dd2:	8526                	mv	a0,s1
 8002dd4:	00001097          	auipc	ra,0x1
 8002dd8:	2b4080e7          	jalr	692(ra) # 8004088 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>
 8002ddc:	8526                	mv	a0,s1
 8002dde:	00001097          	auipc	ra,0x1
 8002de2:	98e080e7          	jalr	-1650(ra) # 800376c <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>
 8002de6:	44e2                	lw	s1,24(sp)
 8002de8:	40f2                	lw	ra,28(sp)
 8002dea:	6105                	addi	sp,sp,32
 8002dec:	8082                	ret

08002dee <_ZN4core3ptr18real_drop_in_place17h034ec8dd70295f85E>:
 8002dee:	8082                	ret

08002df0 <_ZN4core3ptr18real_drop_in_place17h0ef71ded6c57bedcE>:
 8002df0:	8082                	ret

08002df2 <_ZN4core3ptr18real_drop_in_place17h921869e295dffcdcE>:
 8002df2:	8082                	ret

08002df4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bd32f961ec2bdfaE>:
 8002df4:	7179                	addi	sp,sp,-48
 8002df6:	d606                	sw	ra,44(sp)
 8002df8:	d426                	sw	s1,40(sp)
 8002dfa:	d24a                	sw	s2,36(sp)
 8002dfc:	84ae                	mv	s1,a1
 8002dfe:	892a                	mv	s2,a0
 8002e00:	00001097          	auipc	ra,0x1
 8002e04:	7ac080e7          	jalr	1964(ra) # 80045ac <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E>
 8002e08:	e51d                	bnez	a0,8002e36 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bd32f961ec2bdfaE+0x42>
 8002e0a:	4ccc                	lw	a1,28(s1)
 8002e0c:	4c88                	lw	a0,24(s1)
 8002e0e:	0800c637          	lui	a2,0x800c
 8002e12:	d6860613          	addi	a2,a2,-664 # 800bd68 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x510>
 8002e16:	cc32                	sw	a2,24(sp)
 8002e18:	ce02                	sw	zero,28(sp)
 8002e1a:	c802                	sw	zero,16(sp)
 8002e1c:	4605                	li	a2,1
 8002e1e:	c632                	sw	a2,12(sp)
 8002e20:	0800c637          	lui	a2,0x800c
 8002e24:	dcc60613          	addi	a2,a2,-564 # 800bdcc <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x574>
 8002e28:	c432                	sw	a2,8(sp)
 8002e2a:	0030                	addi	a2,sp,8
 8002e2c:	00001097          	auipc	ra,0x1
 8002e30:	b2a080e7          	jalr	-1238(ra) # 8003956 <_ZN4core3fmt5write17h51826aee11d21b9bE>
 8002e34:	c519                	beqz	a0,8002e42 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bd32f961ec2bdfaE+0x4e>
 8002e36:	4505                	li	a0,1
 8002e38:	5912                	lw	s2,36(sp)
 8002e3a:	54a2                	lw	s1,40(sp)
 8002e3c:	50b2                	lw	ra,44(sp)
 8002e3e:	6145                	addi	sp,sp,48
 8002e40:	8082                	ret
 8002e42:	00490513          	addi	a0,s2,4
 8002e46:	85a6                	mv	a1,s1
 8002e48:	5912                	lw	s2,36(sp)
 8002e4a:	54a2                	lw	s1,40(sp)
 8002e4c:	50b2                	lw	ra,44(sp)
 8002e4e:	6145                	addi	sp,sp,48
 8002e50:	00001317          	auipc	t1,0x1
 8002e54:	75c30067          	jr	1884(t1) # 80045ac <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E>

08002e58 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h589f04726b9846deE>:
 8002e58:	f3471537          	lui	a0,0xf3471
 8002e5c:	f4d50513          	addi	a0,a0,-179 # f3470f4d <_sp+0xd346bf4d>
 8002e60:	b2aa05b7          	lui	a1,0xb2aa0
 8002e64:	73c58593          	addi	a1,a1,1852 # b2aa073c <_sp+0x92a9b73c>
 8002e68:	8082                	ret

08002e6a <_ZN4core5panic9PanicInfo8location17h5226165d8771f8a2E>:
 8002e6a:	0531                	addi	a0,a0,12
 8002e6c:	8082                	ret

08002e6e <_ZN4core5panic8Location4file17h94cc6af18de736c4E>:
 8002e6e:	4110                	lw	a2,0(a0)
 8002e70:	414c                	lw	a1,4(a0)
 8002e72:	8532                	mv	a0,a2
 8002e74:	8082                	ret

08002e76 <_ZN4core5panic8Location4line17h3ffc63f14d0a6636E>:
 8002e76:	4508                	lw	a0,8(a0)
 8002e78:	8082                	ret

08002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>:
 8002e7a:	7139                	addi	sp,sp,-64
 8002e7c:	de06                	sw	ra,60(sp)
 8002e7e:	450c                	lw	a1,8(a0)
 8002e80:	4550                	lw	a2,12(a0)
 8002e82:	4914                	lw	a3,16(a0)
 8002e84:	4958                	lw	a4,20(a0)
 8002e86:	411c                	lw	a5,0(a0)
 8002e88:	4148                	lw	a0,4(a0)
 8002e8a:	d22a                	sw	a0,36(sp)
 8002e8c:	d03e                	sw	a5,32(sp)
 8002e8e:	0800c537          	lui	a0,0x800c
 8002e92:	d6850513          	addi	a0,a0,-664 # 800bd68 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x510>
 8002e96:	cc2a                	sw	a0,24(sp)
 8002e98:	ce02                	sw	zero,28(sp)
 8002e9a:	c802                	sw	zero,16(sp)
 8002e9c:	4505                	li	a0,1
 8002e9e:	c62a                	sw	a0,12(sp)
 8002ea0:	1008                	addi	a0,sp,32
 8002ea2:	c42a                	sw	a0,8(sp)
 8002ea4:	da3a                	sw	a4,52(sp)
 8002ea6:	d836                	sw	a3,48(sp)
 8002ea8:	d632                	sw	a2,44(sp)
 8002eaa:	d42e                	sw	a1,40(sp)
 8002eac:	0028                	addi	a0,sp,8
 8002eae:	102c                	addi	a1,sp,40
 8002eb0:	00000097          	auipc	ra,0x0
 8002eb4:	058080e7          	jalr	88(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8002eb8:	00008097          	auipc	ra,0x8
 8002ebc:	738080e7          	jalr	1848(ra) # 800b5f0 <abort>

08002ec0 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>:
 8002ec0:	7139                	addi	sp,sp,-64
 8002ec2:	de06                	sw	ra,60(sp)
 8002ec4:	86aa                	mv	a3,a0
 8002ec6:	c632                	sw	a2,12(sp)
 8002ec8:	c42e                	sw	a1,8(sp)
 8002eca:	0028                	addi	a0,sp,8
 8002ecc:	d82a                	sw	a0,48(sp)
 8002ece:	08005537          	lui	a0,0x8005
 8002ed2:	af850513          	addi	a0,a0,-1288 # 8004af8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE>
 8002ed6:	da2a                	sw	a0,52(sp)
 8002ed8:	d62a                	sw	a0,44(sp)
 8002eda:	0068                	addi	a0,sp,12
 8002edc:	d42a                	sw	a0,40(sp)
 8002ede:	1028                	addi	a0,sp,40
 8002ee0:	d02a                	sw	a0,32(sp)
 8002ee2:	cc02                	sw	zero,24(sp)
 8002ee4:	4509                	li	a0,2
 8002ee6:	d22a                	sw	a0,36(sp)
 8002ee8:	ca2a                	sw	a0,20(sp)
 8002eea:	0800c537          	lui	a0,0x800c
 8002eee:	e4c50513          	addi	a0,a0,-436 # 800be4c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x5f4>
 8002ef2:	c82a                	sw	a0,16(sp)
 8002ef4:	0808                	addi	a0,sp,16
 8002ef6:	85b6                	mv	a1,a3
 8002ef8:	00000097          	auipc	ra,0x0
 8002efc:	010080e7          	jalr	16(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8002f00:	00008097          	auipc	ra,0x8
 8002f04:	6f0080e7          	jalr	1776(ra) # 800b5f0 <abort>

08002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>:
 8002f08:	1101                	addi	sp,sp,-32
 8002f0a:	ce06                	sw	ra,28(sp)
 8002f0c:	4190                	lw	a2,0(a1)
 8002f0e:	41d4                	lw	a3,4(a1)
 8002f10:	4598                	lw	a4,8(a1)
 8002f12:	45cc                	lw	a1,12(a1)
 8002f14:	cc2e                	sw	a1,24(sp)
 8002f16:	ca3a                	sw	a4,20(sp)
 8002f18:	c836                	sw	a3,16(sp)
 8002f1a:	c632                	sw	a2,12(sp)
 8002f1c:	c42a                	sw	a0,8(sp)
 8002f1e:	0800c537          	lui	a0,0x800c
 8002f22:	e2850513          	addi	a0,a0,-472 # 800be28 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x5d0>
 8002f26:	c22a                	sw	a0,4(sp)
 8002f28:	0800c537          	lui	a0,0x800c
 8002f2c:	d6850513          	addi	a0,a0,-664 # 800bd68 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x510>
 8002f30:	c02a                	sw	a0,0(sp)
 8002f32:	850a                	mv	a0,sp
 8002f34:	fffff097          	auipc	ra,0xfffff
 8002f38:	ba8080e7          	jalr	-1112(ra) # 8001adc <rust_begin_unwind>
 8002f3c:	00008097          	auipc	ra,0x8
 8002f40:	6b4080e7          	jalr	1716(ra) # 800b5f0 <abort>

08002f44 <_ZN4core6option13expect_failed17h3eeb96a257d935a1E>:
 8002f44:	7179                	addi	sp,sp,-48
 8002f46:	d606                	sw	ra,44(sp)
 8002f48:	c22e                	sw	a1,4(sp)
 8002f4a:	c02a                	sw	a0,0(sp)
 8002f4c:	08005537          	lui	a0,0x8005
 8002f50:	ce650513          	addi	a0,a0,-794 # 8004ce6 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h133134731e47c3ddE>
 8002f54:	d22a                	sw	a0,36(sp)
 8002f56:	850a                	mv	a0,sp
 8002f58:	d02a                	sw	a0,32(sp)
 8002f5a:	1008                	addi	a0,sp,32
 8002f5c:	cc2a                	sw	a0,24(sp)
 8002f5e:	c802                	sw	zero,16(sp)
 8002f60:	4505                	li	a0,1
 8002f62:	ce2a                	sw	a0,28(sp)
 8002f64:	c62a                	sw	a0,12(sp)
 8002f66:	0800c537          	lui	a0,0x800c
 8002f6a:	f3850513          	addi	a0,a0,-200 # 800bf38 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x6e0>
 8002f6e:	c42a                	sw	a0,8(sp)
 8002f70:	0800c537          	lui	a0,0x800c
 8002f74:	f4050593          	addi	a1,a0,-192 # 800bf40 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x6e8>
 8002f78:	0028                	addi	a0,sp,8
 8002f7a:	00000097          	auipc	ra,0x0
 8002f7e:	f8e080e7          	jalr	-114(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8002f82:	00008097          	auipc	ra,0x8
 8002f86:	66e080e7          	jalr	1646(ra) # 800b5f0 <abort>

08002f8a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E>:
 8002f8a:	1141                	addi	sp,sp,-16
 8002f8c:	c606                	sw	ra,12(sp)
 8002f8e:	882a                	mv	a6,a0
 8002f90:	0035f693          	andi	a3,a1,3
 8002f94:	4501                	li	a0,0
 8002f96:	c2dd                	beqz	a3,800303c <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb2>
 8002f98:	4711                	li	a4,4
 8002f9a:	40d706b3          	sub	a3,a4,a3
 8002f9e:	ced9                	beqz	a3,800303c <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb2>
 8002fa0:	8532                	mv	a0,a2
 8002fa2:	00d66363          	bltu	a2,a3,8002fa8 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1e>
 8002fa6:	8536                	mv	a0,a3
 8002fa8:	00a582b3          	add	t0,a1,a0
 8002fac:	430d                	li	t1,3
 8002fae:	0ff87893          	andi	a7,a6,255
 8002fb2:	83aa                	mv	t2,a0
 8002fb4:	87ae                	mv	a5,a1
 8002fb6:	4701                	li	a4,0
 8002fb8:	40f286b3          	sub	a3,t0,a5
 8002fbc:	04d37963          	bgeu	t1,a3,800300e <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x84>
 8002fc0:	0007ce03          	lbu	t3,0(a5)
 8002fc4:	011e46b3          	xor	a3,t3,a7
 8002fc8:	00d036b3          	snez	a3,a3
 8002fcc:	9736                	add	a4,a4,a3
 8002fce:	071e0563          	beq	t3,a7,8003038 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xae>
 8002fd2:	0017ce03          	lbu	t3,1(a5)
 8002fd6:	011e46b3          	xor	a3,t3,a7
 8002fda:	00d036b3          	snez	a3,a3
 8002fde:	9736                	add	a4,a4,a3
 8002fe0:	051e0c63          	beq	t3,a7,8003038 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xae>
 8002fe4:	0027ce03          	lbu	t3,2(a5)
 8002fe8:	011e46b3          	xor	a3,t3,a7
 8002fec:	00d036b3          	snez	a3,a3
 8002ff0:	9736                	add	a4,a4,a3
 8002ff2:	051e0363          	beq	t3,a7,8003038 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xae>
 8002ff6:	0037ce03          	lbu	t3,3(a5)
 8002ffa:	011e46b3          	xor	a3,t3,a7
 8002ffe:	00d036b3          	snez	a3,a3
 8003002:	9736                	add	a4,a4,a3
 8003004:	13f1                	addi	t2,t2,-4
 8003006:	0791                	addi	a5,a5,4
 8003008:	fb1e18e3          	bne	t3,a7,8002fb8 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x2e>
 800300c:	a035                	j	8003038 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xae>
 800300e:	4281                	li	t0,0
 8003010:	02038663          	beqz	t2,800303c <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xb2>
 8003014:	005786b3          	add	a3,a5,t0
 8003018:	13fd                	addi	t2,t2,-1
 800301a:	0285                	addi	t0,t0,1
 800301c:	0006c303          	lbu	t1,0(a3) # ffff0000 <_sp+0xdffeb000>
 8003020:	ff1318e3          	bne	t1,a7,8003010 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x86>
 8003024:	01134533          	xor	a0,t1,a7
 8003028:	00153513          	seqz	a0,a0
 800302c:	0505                	addi	a0,a0,1
 800302e:	8905                	andi	a0,a0,1
 8003030:	953a                	add	a0,a0,a4
 8003032:	9516                	add	a0,a0,t0
 8003034:	fff50713          	addi	a4,a0,-1
 8003038:	4585                	li	a1,1
 800303a:	a8ed                	j	8003134 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1aa>
 800303c:	0ff87e13          	andi	t3,a6,255
 8003040:	4721                	li	a4,8
 8003042:	06e66163          	bltu	a2,a4,80030a4 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x11a>
 8003046:	ff860813          	addi	a6,a2,-8
 800304a:	04a86d63          	bltu	a6,a0,80030a4 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x11a>
 800304e:	01010737          	lui	a4,0x1010
 8003052:	10170713          	addi	a4,a4,257 # 1010101 <__stack_size+0x100f901>
 8003056:	02ee02b3          	mul	t0,t3,a4
 800305a:	feff0737          	lui	a4,0xfeff0
 800305e:	eff70313          	addi	t1,a4,-257 # fefefeff <_sp+0xdefeaeff>
 8003062:	808087b7          	lui	a5,0x80808
 8003066:	08078893          	addi	a7,a5,128 # 80808080 <_sp+0x60803080>
 800306a:	00a587b3          	add	a5,a1,a0
 800306e:	4398                	lw	a4,0(a5)
 8003070:	00574733          	xor	a4,a4,t0
 8003074:	006703b3          	add	t2,a4,t1
 8003078:	fff74713          	not	a4,a4
 800307c:	007773b3          	and	t2,a4,t2
 8003080:	43dc                	lw	a5,4(a5)
 8003082:	0057c7b3          	xor	a5,a5,t0
 8003086:	00678733          	add	a4,a5,t1
 800308a:	fff7c793          	not	a5,a5
 800308e:	8f7d                	and	a4,a4,a5
 8003090:	00776733          	or	a4,a4,t2
 8003094:	01177733          	and	a4,a4,a7
 8003098:	e701                	bnez	a4,80030a0 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x116>
 800309a:	0521                	addi	a0,a0,8
 800309c:	fca877e3          	bgeu	a6,a0,800306a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0xe0>
 80030a0:	0aa66163          	bltu	a2,a0,8003142 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1b8>
 80030a4:	40a60733          	sub	a4,a2,a0
 80030a8:	00c588b3          	add	a7,a1,a2
 80030ac:	95aa                	add	a1,a1,a0
 80030ae:	480d                	li	a6,3
 80030b0:	4601                	li	a2,0
 80030b2:	40b887b3          	sub	a5,a7,a1
 80030b6:	04f87963          	bgeu	a6,a5,8003108 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x17e>
 80030ba:	0005c783          	lbu	a5,0(a1)
 80030be:	01c7c6b3          	xor	a3,a5,t3
 80030c2:	00d036b3          	snez	a3,a3
 80030c6:	9636                	add	a2,a2,a3
 80030c8:	07c78363          	beq	a5,t3,800312e <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1a4>
 80030cc:	0015c683          	lbu	a3,1(a1)
 80030d0:	01c6c7b3          	xor	a5,a3,t3
 80030d4:	00f037b3          	snez	a5,a5
 80030d8:	963e                	add	a2,a2,a5
 80030da:	05c68a63          	beq	a3,t3,800312e <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1a4>
 80030de:	0025c683          	lbu	a3,2(a1)
 80030e2:	01c6c7b3          	xor	a5,a3,t3
 80030e6:	00f037b3          	snez	a5,a5
 80030ea:	963e                	add	a2,a2,a5
 80030ec:	05c68163          	beq	a3,t3,800312e <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1a4>
 80030f0:	0035c683          	lbu	a3,3(a1)
 80030f4:	01c6c7b3          	xor	a5,a3,t3
 80030f8:	00f037b3          	snez	a5,a5
 80030fc:	963e                	add	a2,a2,a5
 80030fe:	1771                	addi	a4,a4,-4
 8003100:	0591                	addi	a1,a1,4
 8003102:	fbc698e3          	bne	a3,t3,80030b2 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x128>
 8003106:	a025                	j	800312e <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1a4>
 8003108:	cb1d                	beqz	a4,800313e <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1b4>
 800310a:	0605                	addi	a2,a2,1
 800310c:	177d                	addi	a4,a4,-1
 800310e:	00158693          	addi	a3,a1,1
 8003112:	0005c783          	lbu	a5,0(a1)
 8003116:	85b6                	mv	a1,a3
 8003118:	ffc798e3          	bne	a5,t3,8003108 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x17e>
 800311c:	01c7c5b3          	xor	a1,a5,t3
 8003120:	0015b593          	seqz	a1,a1
 8003124:	0585                	addi	a1,a1,1
 8003126:	8985                	andi	a1,a1,1
 8003128:	95b2                	add	a1,a1,a2
 800312a:	fff58613          	addi	a2,a1,-1
 800312e:	4585                	li	a1,1
 8003130:	00a60733          	add	a4,a2,a0
 8003134:	852e                	mv	a0,a1
 8003136:	85ba                	mv	a1,a4
 8003138:	40b2                	lw	ra,12(sp)
 800313a:	0141                	addi	sp,sp,16
 800313c:	8082                	ret
 800313e:	4581                	li	a1,0
 8003140:	bfc5                	j	8003130 <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E+0x1a6>
 8003142:	85b2                	mv	a1,a2
 8003144:	00000097          	auipc	ra,0x0
 8003148:	05c080e7          	jalr	92(ra) # 80031a0 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 800314c:	00008097          	auipc	ra,0x8
 8003150:	4a4080e7          	jalr	1188(ra) # 800b5f0 <abort>

08003154 <_ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E>:
 8003154:	7139                	addi	sp,sp,-64
 8003156:	de06                	sw	ra,60(sp)
 8003158:	c62e                	sw	a1,12(sp)
 800315a:	c42a                	sw	a0,8(sp)
 800315c:	0068                	addi	a0,sp,12
 800315e:	d82a                	sw	a0,48(sp)
 8003160:	08005537          	lui	a0,0x8005
 8003164:	af850513          	addi	a0,a0,-1288 # 8004af8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE>
 8003168:	da2a                	sw	a0,52(sp)
 800316a:	d62a                	sw	a0,44(sp)
 800316c:	0028                	addi	a0,sp,8
 800316e:	d42a                	sw	a0,40(sp)
 8003170:	1028                	addi	a0,sp,40
 8003172:	d02a                	sw	a0,32(sp)
 8003174:	cc02                	sw	zero,24(sp)
 8003176:	4509                	li	a0,2
 8003178:	d22a                	sw	a0,36(sp)
 800317a:	ca2a                	sw	a0,20(sp)
 800317c:	0800c537          	lui	a0,0x800c
 8003180:	f9050513          	addi	a0,a0,-112 # 800bf90 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x738>
 8003184:	c82a                	sw	a0,16(sp)
 8003186:	0800c537          	lui	a0,0x800c
 800318a:	fa050593          	addi	a1,a0,-96 # 800bfa0 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x748>
 800318e:	0808                	addi	a0,sp,16
 8003190:	00000097          	auipc	ra,0x0
 8003194:	d78080e7          	jalr	-648(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 8003198:	00008097          	auipc	ra,0x8
 800319c:	458080e7          	jalr	1112(ra) # 800b5f0 <abort>

080031a0 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>:
 80031a0:	7139                	addi	sp,sp,-64
 80031a2:	de06                	sw	ra,60(sp)
 80031a4:	c62e                	sw	a1,12(sp)
 80031a6:	c42a                	sw	a0,8(sp)
 80031a8:	0068                	addi	a0,sp,12
 80031aa:	d82a                	sw	a0,48(sp)
 80031ac:	08005537          	lui	a0,0x8005
 80031b0:	af850513          	addi	a0,a0,-1288 # 8004af8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE>
 80031b4:	da2a                	sw	a0,52(sp)
 80031b6:	d62a                	sw	a0,44(sp)
 80031b8:	0028                	addi	a0,sp,8
 80031ba:	d42a                	sw	a0,40(sp)
 80031bc:	1028                	addi	a0,sp,40
 80031be:	d02a                	sw	a0,32(sp)
 80031c0:	cc02                	sw	zero,24(sp)
 80031c2:	4509                	li	a0,2
 80031c4:	d22a                	sw	a0,36(sp)
 80031c6:	ca2a                	sw	a0,20(sp)
 80031c8:	0800c537          	lui	a0,0x800c
 80031cc:	fd450513          	addi	a0,a0,-44 # 800bfd4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x77c>
 80031d0:	c82a                	sw	a0,16(sp)
 80031d2:	0800c537          	lui	a0,0x800c
 80031d6:	fe450593          	addi	a1,a0,-28 # 800bfe4 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x78c>
 80031da:	0808                	addi	a0,sp,16
 80031dc:	00000097          	auipc	ra,0x0
 80031e0:	d2c080e7          	jalr	-724(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 80031e4:	00008097          	auipc	ra,0x8
 80031e8:	40c080e7          	jalr	1036(ra) # 800b5f0 <abort>

080031ec <_ZN4core3str16slice_error_fail17heb8f3fc076617590E>:
 80031ec:	7159                	addi	sp,sp,-112
 80031ee:	d686                	sw	ra,108(sp)
 80031f0:	c236                	sw	a3,4(sp)
 80031f2:	c032                	sw	a2,0(sp)
 80031f4:	10100713          	li	a4,257
 80031f8:	00e5f763          	bgeu	a1,a4,8003206 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1a>
 80031fc:	4805                	li	a6,1
 80031fe:	83ae                	mv	t2,a1
 8003200:	02080e63          	beqz	a6,800323c <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x50>
 8003204:	a881                	j	8003254 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x68>
 8003206:	40b008b3          	neg	a7,a1
 800320a:	10000713          	li	a4,256
 800320e:	fbf00293          	li	t0,-65
 8003212:	4305                	li	t1,1
 8003214:	4801                	li	a6,0
 8003216:	00b77863          	bgeu	a4,a1,8003226 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x3a>
 800321a:	00e507b3          	add	a5,a0,a4
 800321e:	00078783          	lb	a5,0(a5)
 8003222:	02f2c563          	blt	t0,a5,800324c <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x60>
 8003226:	fff70393          	addi	t2,a4,-1
 800322a:	0e670163          	beq	a4,t1,800330c <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x120>
 800322e:	00e887b3          	add	a5,a7,a4
 8003232:	871e                	mv	a4,t2
 8003234:	fe6791e3          	bne	a5,t1,8003216 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x2a>
 8003238:	00081e63          	bnez	a6,8003254 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x68>
 800323c:	0800c737          	lui	a4,0x800c
 8003240:	0aa70893          	addi	a7,a4,170 # 800c0aa <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x852>
 8003244:	4701                	li	a4,0
 8003246:	00080e63          	beqz	a6,8003262 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x76>
 800324a:	a829                	j	8003264 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x78>
 800324c:	83ba                	mv	t2,a4
 800324e:	4801                	li	a6,0
 8003250:	fe0806e3          	beqz	a6,800323c <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x50>
 8003254:	0800c737          	lui	a4,0x800c
 8003258:	d6870893          	addi	a7,a4,-664 # 800bd68 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x510>
 800325c:	4701                	li	a4,0
 800325e:	00081363          	bnez	a6,8003264 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x78>
 8003262:	4715                	li	a4,5
 8003264:	c61e                	sw	t2,12(sp)
 8003266:	c42a                	sw	a0,8(sp)
 8003268:	ca3a                	sw	a4,20(sp)
 800326a:	c846                	sw	a7,16(sp)
 800326c:	1ac5ed63          	bltu	a1,a2,8003426 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x23a>
 8003270:	1ad5eb63          	bltu	a1,a3,8003426 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x23a>
 8003274:	1ec6ee63          	bltu	a3,a2,8003470 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x284>
 8003278:	ce09                	beqz	a2,8003292 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xa6>
 800327a:	00c58c63          	beq	a1,a2,8003292 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xa6>
 800327e:	00b67b63          	bgeu	a2,a1,8003294 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xa8>
 8003282:	00c50733          	add	a4,a0,a2
 8003286:	00070703          	lb	a4,0(a4)
 800328a:	fc000793          	li	a5,-64
 800328e:	00f74363          	blt	a4,a5,8003294 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xa8>
 8003292:	8636                	mv	a2,a3
 8003294:	cc32                	sw	a2,24(sp)
 8003296:	ca0d                	beqz	a2,80032c8 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xdc>
 8003298:	02b60863          	beq	a2,a1,80032c8 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xdc>
 800329c:	00158693          	addi	a3,a1,1
 80032a0:	fc000813          	li	a6,-64
 80032a4:	4785                	li	a5,1
 80032a6:	8732                	mv	a4,a2
 80032a8:	00b67863          	bgeu	a2,a1,80032b8 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xcc>
 80032ac:	00e50633          	add	a2,a0,a4
 80032b0:	00060603          	lb	a2,0(a2)
 80032b4:	01065963          	bge	a2,a6,80032c6 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xda>
 80032b8:	fff70613          	addi	a2,a4,-1
 80032bc:	00f70663          	beq	a4,a5,80032c8 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xdc>
 80032c0:	fee693e3          	bne	a3,a4,80032a6 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xba>
 80032c4:	a011                	j	80032c8 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xdc>
 80032c6:	863a                	mv	a2,a4
 80032c8:	00b61e63          	bne	a2,a1,80032e4 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xf8>
 80032cc:	0800c537          	lui	a0,0x800c
 80032d0:	f2050513          	addi	a0,a0,-224 # 800bf20 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x6c8>
 80032d4:	00000097          	auipc	ra,0x0
 80032d8:	ba6080e7          	jalr	-1114(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 80032dc:	00008097          	auipc	ra,0x8
 80032e0:	314080e7          	jalr	788(ra) # 800b5f0 <abort>
 80032e4:	00c50733          	add	a4,a0,a2
 80032e8:	00070783          	lb	a5,0(a4)
 80032ec:	0ff7f693          	andi	a3,a5,255
 80032f0:	0007c663          	bltz	a5,80032fc <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x110>
 80032f4:	ce36                	sw	a3,28(sp)
 80032f6:	4585                	li	a1,1
 80032f8:	1008                	addi	a0,sp,32
 80032fa:	a86d                	j	80033b4 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1c8>
 80032fc:	952e                	add	a0,a0,a1
 80032fe:	00170593          	addi	a1,a4,1
 8003302:	00a59963          	bne	a1,a0,8003314 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x128>
 8003306:	87aa                	mv	a5,a0
 8003308:	4701                	li	a4,0
 800330a:	a819                	j	8003320 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x134>
 800330c:	4801                	li	a6,0
 800330e:	f20807e3          	beqz	a6,800323c <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x50>
 8003312:	b789                	j	8003254 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x68>
 8003314:	00270793          	addi	a5,a4,2
 8003318:	00174583          	lbu	a1,1(a4)
 800331c:	03f5f713          	andi	a4,a1,63
 8003320:	01f6f893          	andi	a7,a3,31
 8003324:	0e000593          	li	a1,224
 8003328:	00b6e763          	bltu	a3,a1,8003336 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x14a>
 800332c:	00a79a63          	bne	a5,a0,8003340 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x154>
 8003330:	882a                	mv	a6,a0
 8003332:	4781                	li	a5,0
 8003334:	a821                	j	800334c <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x160>
 8003336:	00689513          	slli	a0,a7,0x6
 800333a:	00a765b3          	or	a1,a4,a0
 800333e:	a889                	j	8003390 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1a4>
 8003340:	00178813          	addi	a6,a5,1
 8003344:	0007c583          	lbu	a1,0(a5)
 8003348:	03f5f793          	andi	a5,a1,63
 800334c:	00671593          	slli	a1,a4,0x6
 8003350:	00b7e733          	or	a4,a5,a1
 8003354:	0f000593          	li	a1,240
 8003358:	00b6e663          	bltu	a3,a1,8003364 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x178>
 800335c:	00a81963          	bne	a6,a0,800336e <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x182>
 8003360:	4501                	li	a0,0
 8003362:	a811                	j	8003376 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x18a>
 8003364:	00c89513          	slli	a0,a7,0xc
 8003368:	00a765b3          	or	a1,a4,a0
 800336c:	a015                	j	8003390 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1a4>
 800336e:	00084503          	lbu	a0,0(a6)
 8003372:	03f57513          	andi	a0,a0,63
 8003376:	01289593          	slli	a1,a7,0x12
 800337a:	001c06b7          	lui	a3,0x1c0
 800337e:	8df5                	and	a1,a1,a3
 8003380:	00671693          	slli	a3,a4,0x6
 8003384:	8dd5                	or	a1,a1,a3
 8003386:	8dc9                	or	a1,a1,a0
 8003388:	00110537          	lui	a0,0x110
 800338c:	f4a580e3          	beq	a1,a0,80032cc <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0xe0>
 8003390:	1008                	addi	a0,sp,32
 8003392:	ce2e                	sw	a1,28(sp)
 8003394:	08000693          	li	a3,128
 8003398:	00d5f463          	bgeu	a1,a3,80033a0 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1b4>
 800339c:	4585                	li	a1,1
 800339e:	a819                	j	80033b4 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1c8>
 80033a0:	00b5d693          	srli	a3,a1,0xb
 80033a4:	e299                	bnez	a3,80033aa <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1be>
 80033a6:	4589                	li	a1,2
 80033a8:	a031                	j	80033b4 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1c8>
 80033aa:	81c1                	srli	a1,a1,0x10
 80033ac:	c199                	beqz	a1,80033b2 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1c6>
 80033ae:	4591                	li	a1,4
 80033b0:	a011                	j	80033b4 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x1c8>
 80033b2:	458d                	li	a1,3
 80033b4:	d032                	sw	a2,32(sp)
 80033b6:	95b2                	add	a1,a1,a2
 80033b8:	d22e                	sw	a1,36(sp)
 80033ba:	080c                	addi	a1,sp,16
 80033bc:	d0ae                	sw	a1,96(sp)
 80033be:	080055b7          	lui	a1,0x8005
 80033c2:	ce658593          	addi	a1,a1,-794 # 8004ce6 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h133134731e47c3ddE>
 80033c6:	d2ae                	sw	a1,100(sp)
 80033c8:	ceae                	sw	a1,92(sp)
 80033ca:	002c                	addi	a1,sp,8
 80033cc:	ccae                	sw	a1,88(sp)
 80033ce:	080035b7          	lui	a1,0x8003
 80033d2:	df458593          	addi	a1,a1,-524 # 8002df4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h7bd32f961ec2bdfaE>
 80033d6:	caae                	sw	a1,84(sp)
 80033d8:	c8aa                	sw	a0,80(sp)
 80033da:	08004537          	lui	a0,0x8004
 80033de:	0d450513          	addi	a0,a0,212 # 80040d4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE>
 80033e2:	c6aa                	sw	a0,76(sp)
 80033e4:	0868                	addi	a0,sp,28
 80033e6:	c4aa                	sw	a0,72(sp)
 80033e8:	08005537          	lui	a0,0x8005
 80033ec:	af850513          	addi	a0,a0,-1288 # 8004af8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE>
 80033f0:	c2aa                	sw	a0,68(sp)
 80033f2:	0828                	addi	a0,sp,24
 80033f4:	c0aa                	sw	a0,64(sp)
 80033f6:	0088                	addi	a0,sp,64
 80033f8:	dc2a                	sw	a0,56(sp)
 80033fa:	d802                	sw	zero,48(sp)
 80033fc:	4515                	li	a0,5
 80033fe:	de2a                	sw	a0,60(sp)
 8003400:	d62a                	sw	a0,44(sp)
 8003402:	0800c537          	lui	a0,0x800c
 8003406:	16450513          	addi	a0,a0,356 # 800c164 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x90c>
 800340a:	d42a                	sw	a0,40(sp)
 800340c:	0800c537          	lui	a0,0x800c
 8003410:	18c50593          	addi	a1,a0,396 # 800c18c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x934>
 8003414:	1028                	addi	a0,sp,40
 8003416:	00000097          	auipc	ra,0x0
 800341a:	af2080e7          	jalr	-1294(ra) # 8002f08 <_ZN4core9panicking9panic_fmt17h6b4d8e87b0965449E>
 800341e:	00008097          	auipc	ra,0x8
 8003422:	1d2080e7          	jalr	466(ra) # 800b5f0 <abort>
 8003426:	00c5e363          	bltu	a1,a2,800342c <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x240>
 800342a:	8636                	mv	a2,a3
 800342c:	d032                	sw	a2,32(sp)
 800342e:	0808                	addi	a0,sp,16
 8003430:	c8aa                	sw	a0,80(sp)
 8003432:	08005537          	lui	a0,0x8005
 8003436:	ce650513          	addi	a0,a0,-794 # 8004ce6 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h133134731e47c3ddE>
 800343a:	caaa                	sw	a0,84(sp)
 800343c:	c6aa                	sw	a0,76(sp)
 800343e:	0028                	addi	a0,sp,8
 8003440:	c4aa                	sw	a0,72(sp)
 8003442:	08005537          	lui	a0,0x8005
 8003446:	af850513          	addi	a0,a0,-1288 # 8004af8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE>
 800344a:	c2aa                	sw	a0,68(sp)
 800344c:	1008                	addi	a0,sp,32
 800344e:	c0aa                	sw	a0,64(sp)
 8003450:	0088                	addi	a0,sp,64
 8003452:	dc2a                	sw	a0,56(sp)
 8003454:	d802                	sw	zero,48(sp)
 8003456:	450d                	li	a0,3
 8003458:	de2a                	sw	a0,60(sp)
 800345a:	d62a                	sw	a0,44(sp)
 800345c:	0800c537          	lui	a0,0x800c
 8003460:	0d050513          	addi	a0,a0,208 # 800c0d0 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x878>
 8003464:	d42a                	sw	a0,40(sp)
 8003466:	0800c537          	lui	a0,0x800c
 800346a:	0e850593          	addi	a1,a0,232 # 800c0e8 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x890>
 800346e:	b75d                	j	8003414 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x228>
 8003470:	0808                	addi	a0,sp,16
 8003472:	ccaa                	sw	a0,88(sp)
 8003474:	08005537          	lui	a0,0x8005
 8003478:	ce650513          	addi	a0,a0,-794 # 8004ce6 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h133134731e47c3ddE>
 800347c:	ceaa                	sw	a0,92(sp)
 800347e:	caaa                	sw	a0,84(sp)
 8003480:	0028                	addi	a0,sp,8
 8003482:	c8aa                	sw	a0,80(sp)
 8003484:	0048                	addi	a0,sp,4
 8003486:	c4aa                	sw	a0,72(sp)
 8003488:	08005537          	lui	a0,0x8005
 800348c:	af850513          	addi	a0,a0,-1288 # 8004af8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE>
 8003490:	c6aa                	sw	a0,76(sp)
 8003492:	c2aa                	sw	a0,68(sp)
 8003494:	850a                	mv	a0,sp
 8003496:	c0aa                	sw	a0,64(sp)
 8003498:	0088                	addi	a0,sp,64
 800349a:	dc2a                	sw	a0,56(sp)
 800349c:	d802                	sw	zero,48(sp)
 800349e:	4511                	li	a0,4
 80034a0:	de2a                	sw	a0,60(sp)
 80034a2:	d62a                	sw	a0,44(sp)
 80034a4:	0800c537          	lui	a0,0x800c
 80034a8:	10850513          	addi	a0,a0,264 # 800c108 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x8b0>
 80034ac:	d42a                	sw	a0,40(sp)
 80034ae:	0800c537          	lui	a0,0x800c
 80034b2:	12850593          	addi	a1,a0,296 # 800c128 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x8d0>
 80034b6:	bfb9                	j	8003414 <_ZN4core3str16slice_error_fail17heb8f3fc076617590E+0x228>

080034b8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E>:
 80034b8:	711d                	addi	sp,sp,-96
 80034ba:	ce86                	sw	ra,92(sp)
 80034bc:	cca6                	sw	s1,88(sp)
 80034be:	caca                	sw	s2,84(sp)
 80034c0:	c8ce                	sw	s3,80(sp)
 80034c2:	c6d2                	sw	s4,76(sp)
 80034c4:	c4d6                	sw	s5,72(sp)
 80034c6:	c2da                	sw	s6,68(sp)
 80034c8:	c0de                	sw	s7,64(sp)
 80034ca:	de62                	sw	s8,60(sp)
 80034cc:	dc66                	sw	s9,56(sp)
 80034ce:	da6a                	sw	s10,52(sp)
 80034d0:	d86e                	sw	s11,48(sp)
 80034d2:	12060b63          	beqz	a2,8003608 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x150>
 80034d6:	8cb2                	mv	s9,a2
 80034d8:	892e                	mv	s2,a1
 80034da:	8a2a                	mv	s4,a0
 80034dc:	02810a93          	addi	s5,sp,40
 80034e0:	4b29                	li	s6,10
 80034e2:	4985                	li	s3,1
 80034e4:	01010d13          	addi	s10,sp,16
 80034e8:	0800c537          	lui	a0,0x800c
 80034ec:	e6850513          	addi	a0,a0,-408 # 800be68 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x610>
 80034f0:	c62a                	sw	a0,12(sp)
 80034f2:	008a4503          	lbu	a0,8(s4)
 80034f6:	c919                	beqz	a0,800350c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x54>
 80034f8:	000a2503          	lw	a0,0(s4)
 80034fc:	004a2583          	lw	a1,4(s4)
 8003500:	45d4                	lw	a3,12(a1)
 8003502:	45b2                	lw	a1,12(sp)
 8003504:	4611                	li	a2,4
 8003506:	9682                	jalr	a3
 8003508:	10051163          	bnez	a0,800360a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x152>
 800350c:	cc02                	sw	zero,24(sp)
 800350e:	d45a                	sw	s6,40(sp)
 8003510:	d24e                	sw	s3,36(sp)
 8003512:	d05a                	sw	s6,32(sp)
 8003514:	ce66                	sw	s9,28(sp)
 8003516:	ca66                	sw	s9,20(sp)
 8003518:	c84a                	sw	s2,16(sp)
 800351a:	855a                	mv	a0,s6
 800351c:	85ca                	mv	a1,s2
 800351e:	8666                	mv	a2,s9
 8003520:	00000097          	auipc	ra,0x0
 8003524:	a6a080e7          	jalr	-1430(ra) # 8002f8a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E>
 8003528:	03350163          	beq	a0,s3,800354a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x92>
 800352c:	a0ad                	j	8003596 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xde>
 800352e:	45c2                	lw	a1,16(sp)
 8003530:	95e2                	add	a1,a1,s8
 8003532:	41850633          	sub	a2,a0,s8
 8003536:	009d0533          	add	a0,s10,s1
 800353a:	01750503          	lb	a0,23(a0)
 800353e:	00000097          	auipc	ra,0x0
 8003542:	a4c080e7          	jalr	-1460(ra) # 8002f8a <_ZN4core5slice6memchr6memchr17h94d07a4704a27026E>
 8003546:	05351863          	bne	a0,s3,8003596 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xde>
 800354a:	4562                	lw	a0,24(sp)
 800354c:	952e                	add	a0,a0,a1
 800354e:	00150c13          	addi	s8,a0,1
 8003552:	cc62                	sw	s8,24(sp)
 8003554:	5492                	lw	s1,36(sp)
 8003556:	009c7763          	bgeu	s8,s1,8003564 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xac>
 800355a:	4bd2                	lw	s7,20(sp)
 800355c:	4572                	lw	a0,28(sp)
 800355e:	03857963          	bgeu	a0,s8,8003590 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xd8>
 8003562:	a825                	j	800359a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xe2>
 8003564:	4bd2                	lw	s7,20(sp)
 8003566:	038be263          	bltu	s7,s8,800358a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xd2>
 800356a:	4515                	li	a0,5
 800356c:	0aa4fe63          	bgeu	s1,a0,8003628 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x170>
 8003570:	409c0db3          	sub	s11,s8,s1
 8003574:	4542                	lw	a0,16(sp)
 8003576:	956e                	add	a0,a0,s11
 8003578:	09550363          	beq	a0,s5,80035fe <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x146>
 800357c:	85d6                	mv	a1,s5
 800357e:	8626                	mv	a2,s1
 8003580:	00005097          	auipc	ra,0x5
 8003584:	610080e7          	jalr	1552(ra) # 8008b90 <memcmp>
 8003588:	c93d                	beqz	a0,80035fe <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x146>
 800358a:	4572                	lw	a0,28(sp)
 800358c:	01856763          	bltu	a0,s8,800359a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xe2>
 8003590:	f8abffe3          	bgeu	s7,a0,800352e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x76>
 8003594:	a019                	j	800359a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xe2>
 8003596:	4572                	lw	a0,28(sp)
 8003598:	cc2a                	sw	a0,24(sp)
 800359a:	000a0423          	sb	zero,8(s4)
 800359e:	84e6                	mv	s1,s9
 80035a0:	009cc533          	xor	a0,s9,s1
 80035a4:	00153513          	seqz	a0,a0
 80035a8:	0014b593          	seqz	a1,s1
 80035ac:	00a5ebb3          	or	s7,a1,a0
 80035b0:	004a2583          	lw	a1,4(s4)
 80035b4:	000a2503          	lw	a0,0(s4)
 80035b8:	000b9c63          	bnez	s7,80035d0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x118>
 80035bc:	0994f063          	bgeu	s1,s9,800363c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x184>
 80035c0:	00990633          	add	a2,s2,s1
 80035c4:	00060603          	lb	a2,0(a2)
 80035c8:	fbf00693          	li	a3,-65
 80035cc:	06c6d863          	bge	a3,a2,800363c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x184>
 80035d0:	45d4                	lw	a3,12(a1)
 80035d2:	85ca                	mv	a1,s2
 80035d4:	8626                	mv	a2,s1
 80035d6:	9682                	jalr	a3
 80035d8:	e90d                	bnez	a0,800360a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x152>
 80035da:	000b9c63          	bnez	s7,80035f2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x13a>
 80035de:	0794fb63          	bgeu	s1,s9,8003654 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x19c>
 80035e2:	00990533          	add	a0,s2,s1
 80035e6:	00050503          	lb	a0,0(a0)
 80035ea:	fbf00593          	li	a1,-65
 80035ee:	06a5d363          	bge	a1,a0,8003654 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x19c>
 80035f2:	9926                	add	s2,s2,s1
 80035f4:	409c8cb3          	sub	s9,s9,s1
 80035f8:	ee0c9de3          	bnez	s9,80034f2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x3a>
 80035fc:	a031                	j	8003608 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0x150>
 80035fe:	013a0423          	sb	s3,8(s4)
 8003602:	001d8493          	addi	s1,s11,1
 8003606:	bf69                	j	80035a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E+0xe8>
 8003608:	4981                	li	s3,0
 800360a:	854e                	mv	a0,s3
 800360c:	5dc2                	lw	s11,48(sp)
 800360e:	5d52                	lw	s10,52(sp)
 8003610:	5ce2                	lw	s9,56(sp)
 8003612:	5c72                	lw	s8,60(sp)
 8003614:	4b86                	lw	s7,64(sp)
 8003616:	4b16                	lw	s6,68(sp)
 8003618:	4aa6                	lw	s5,72(sp)
 800361a:	4a36                	lw	s4,76(sp)
 800361c:	49c6                	lw	s3,80(sp)
 800361e:	4956                	lw	s2,84(sp)
 8003620:	44e6                	lw	s1,88(sp)
 8003622:	40f6                	lw	ra,92(sp)
 8003624:	6125                	addi	sp,sp,96
 8003626:	8082                	ret
 8003628:	4591                	li	a1,4
 800362a:	8526                	mv	a0,s1
 800362c:	00000097          	auipc	ra,0x0
 8003630:	b28080e7          	jalr	-1240(ra) # 8003154 <_ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E>
 8003634:	00008097          	auipc	ra,0x8
 8003638:	fbc080e7          	jalr	-68(ra) # 800b5f0 <abort>
 800363c:	854a                	mv	a0,s2
 800363e:	85e6                	mv	a1,s9
 8003640:	4601                	li	a2,0
 8003642:	86a6                	mv	a3,s1
 8003644:	00000097          	auipc	ra,0x0
 8003648:	ba8080e7          	jalr	-1112(ra) # 80031ec <_ZN4core3str16slice_error_fail17heb8f3fc076617590E>
 800364c:	00008097          	auipc	ra,0x8
 8003650:	fa4080e7          	jalr	-92(ra) # 800b5f0 <abort>
 8003654:	854a                	mv	a0,s2
 8003656:	85e6                	mv	a1,s9
 8003658:	8626                	mv	a2,s1
 800365a:	86e6                	mv	a3,s9
 800365c:	00000097          	auipc	ra,0x0
 8003660:	b90080e7          	jalr	-1136(ra) # 80031ec <_ZN4core3str16slice_error_fail17heb8f3fc076617590E>
 8003664:	00008097          	auipc	ra,0x8
 8003668:	f8c080e7          	jalr	-116(ra) # 800b5f0 <abort>

0800366c <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E>:
 800366c:	711d                	addi	sp,sp,-96
 800366e:	ce86                	sw	ra,92(sp)
 8003670:	cca6                	sw	s1,88(sp)
 8003672:	caca                	sw	s2,84(sp)
 8003674:	c8ce                	sw	s3,80(sp)
 8003676:	c6d2                	sw	s4,76(sp)
 8003678:	84aa                	mv	s1,a0
 800367a:	4a05                	li	s4,1
 800367c:	00854503          	lbu	a0,8(a0)
 8003680:	e969                	bnez	a0,8003752 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xe6>
 8003682:	89b2                	mv	s3,a2
 8003684:	892e                	mv	s2,a1
 8003686:	40c8                	lw	a0,4(s1)
 8003688:	4094                	lw	a3,0(s1)
 800368a:	0006c583          	lbu	a1,0(a3) # 1c0000 <__stack_size+0x1bf800>
 800368e:	8991                	andi	a1,a1,4
 8003690:	e599                	bnez	a1,800369e <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0x32>
 8003692:	cd49                	beqz	a0,800372c <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xc0>
 8003694:	0800c5b7          	lui	a1,0x800c
 8003698:	28258593          	addi	a1,a1,642 # 800c282 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xa2a>
 800369c:	a861                	j	8003734 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xc8>
 800369e:	ed01                	bnez	a0,80036b6 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0x4a>
 80036a0:	4e88                	lw	a0,24(a3)
 80036a2:	4ecc                	lw	a1,28(a3)
 80036a4:	45d4                	lw	a3,12(a1)
 80036a6:	0800c5b7          	lui	a1,0x800c
 80036aa:	28458593          	addi	a1,a1,644 # 800c284 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xa2c>
 80036ae:	4609                	li	a2,2
 80036b0:	9682                	jalr	a3
 80036b2:	e145                	bnez	a0,8003752 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xe6>
 80036b4:	4094                	lw	a3,0(s1)
 80036b6:	4e88                	lw	a0,24(a3)
 80036b8:	4ecc                	lw	a1,28(a3)
 80036ba:	4a05                	li	s4,1
 80036bc:	01410823          	sb	s4,16(sp)
 80036c0:	c62e                	sw	a1,12(sp)
 80036c2:	c42a                	sw	a0,8(sp)
 80036c4:	0086a803          	lw	a6,8(a3)
 80036c8:	00c6a883          	lw	a7,12(a3)
 80036cc:	0106a283          	lw	t0,16(a3)
 80036d0:	0146a303          	lw	t1,20(a3)
 80036d4:	0206a383          	lw	t2,32(a3)
 80036d8:	52c8                	lw	a0,36(a3)
 80036da:	568c                	lw	a1,40(a3)
 80036dc:	56d0                	lw	a2,44(a3)
 80036de:	4298                	lw	a4,0(a3)
 80036e0:	42dc                	lw	a5,4(a3)
 80036e2:	03068683          	lb	a3,48(a3)
 80036e6:	04d10423          	sb	a3,72(sp)
 80036ea:	ce3e                	sw	a5,28(sp)
 80036ec:	cc3a                	sw	a4,24(sp)
 80036ee:	c2b2                	sw	a2,68(sp)
 80036f0:	c0ae                	sw	a1,64(sp)
 80036f2:	de2a                	sw	a0,60(sp)
 80036f4:	dc1e                	sw	t2,56(sp)
 80036f6:	0800c537          	lui	a0,0x800c
 80036fa:	26850513          	addi	a0,a0,616 # 800c268 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xa10>
 80036fe:	da2a                	sw	a0,52(sp)
 8003700:	0028                	addi	a0,sp,8
 8003702:	d82a                	sw	a0,48(sp)
 8003704:	d61a                	sw	t1,44(sp)
 8003706:	d416                	sw	t0,40(sp)
 8003708:	d246                	sw	a7,36(sp)
 800370a:	d042                	sw	a6,32(sp)
 800370c:	00c9a603          	lw	a2,12(s3)
 8003710:	082c                	addi	a1,sp,24
 8003712:	854a                	mv	a0,s2
 8003714:	9602                	jalr	a2
 8003716:	ed15                	bnez	a0,8003752 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xe6>
 8003718:	5552                	lw	a0,52(sp)
 800371a:	4554                	lw	a3,12(a0)
 800371c:	5542                	lw	a0,48(sp)
 800371e:	0800c5b7          	lui	a1,0x800c
 8003722:	28058593          	addi	a1,a1,640 # 800c280 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xa28>
 8003726:	4609                	li	a2,2
 8003728:	9682                	jalr	a3
 800372a:	a01d                	j	8003750 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xe4>
 800372c:	0800c5b7          	lui	a1,0x800c
 8003730:	28658593          	addi	a1,a1,646 # 800c286 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xa2e>
 8003734:	4a05                	li	s4,1
 8003736:	8652                	mv	a2,s4
 8003738:	c111                	beqz	a0,800373c <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xd0>
 800373a:	4609                	li	a2,2
 800373c:	4e88                	lw	a0,24(a3)
 800373e:	4ed4                	lw	a3,28(a3)
 8003740:	46d4                	lw	a3,12(a3)
 8003742:	9682                	jalr	a3
 8003744:	e519                	bnez	a0,8003752 <_ZN4core3fmt8builders10DebugTuple5field17h7da5ac79cde13c49E+0xe6>
 8003746:	00c9a603          	lw	a2,12(s3)
 800374a:	408c                	lw	a1,0(s1)
 800374c:	854a                	mv	a0,s2
 800374e:	9602                	jalr	a2
 8003750:	8a2a                	mv	s4,a0
 8003752:	01448423          	sb	s4,8(s1)
 8003756:	40c8                	lw	a0,4(s1)
 8003758:	0505                	addi	a0,a0,1
 800375a:	c0c8                	sw	a0,4(s1)
 800375c:	8526                	mv	a0,s1
 800375e:	4a36                	lw	s4,76(sp)
 8003760:	49c6                	lw	s3,80(sp)
 8003762:	4956                	lw	s2,84(sp)
 8003764:	44e6                	lw	s1,88(sp)
 8003766:	40f6                	lw	ra,92(sp)
 8003768:	6125                	addi	sp,sp,96
 800376a:	8082                	ret

0800376c <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE>:
 800376c:	1141                	addi	sp,sp,-16
 800376e:	c606                	sw	ra,12(sp)
 8003770:	c426                	sw	s1,8(sp)
 8003772:	c24a                	sw	s2,4(sp)
 8003774:	892a                	mv	s2,a0
 8003776:	00854483          	lbu	s1,8(a0)
 800377a:	4148                	lw	a0,4(a0)
 800377c:	c921                	beqz	a0,80037cc <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x60>
 800377e:	c099                	beqz	s1,8003784 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x18>
 8003780:	4485                	li	s1,1
 8003782:	a099                	j	80037c8 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x5c>
 8003784:	4485                	li	s1,1
 8003786:	02951563          	bne	a0,s1,80037b0 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x44>
 800378a:	00994503          	lbu	a0,9(s2)
 800378e:	c10d                	beqz	a0,80037b0 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x44>
 8003790:	00092583          	lw	a1,0(s2)
 8003794:	0005c503          	lbu	a0,0(a1)
 8003798:	8911                	andi	a0,a0,4
 800379a:	e919                	bnez	a0,80037b0 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x44>
 800379c:	4d88                	lw	a0,24(a1)
 800379e:	4dcc                	lw	a1,28(a1)
 80037a0:	45d4                	lw	a3,12(a1)
 80037a2:	0800c5b7          	lui	a1,0x800c
 80037a6:	28758593          	addi	a1,a1,647 # 800c287 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xa2f>
 80037aa:	8626                	mv	a2,s1
 80037ac:	9682                	jalr	a3
 80037ae:	ed09                	bnez	a0,80037c8 <_ZN4core3fmt8builders10DebugTuple6finish17h24d91625b3672e6dE+0x5c>
 80037b0:	00092583          	lw	a1,0(s2)
 80037b4:	4d88                	lw	a0,24(a1)
 80037b6:	4dcc                	lw	a1,28(a1)
 80037b8:	45d4                	lw	a3,12(a1)
 80037ba:	0800c5b7          	lui	a1,0x800c
 80037be:	28858593          	addi	a1,a1,648 # 800c288 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xa30>
 80037c2:	4605                	li	a2,1
 80037c4:	9682                	jalr	a3
 80037c6:	84aa                	mv	s1,a0
 80037c8:	00990423          	sb	s1,8(s2)
 80037cc:	00903533          	snez	a0,s1
 80037d0:	4912                	lw	s2,4(sp)
 80037d2:	44a2                	lw	s1,8(sp)
 80037d4:	40b2                	lw	ra,12(sp)
 80037d6:	0141                	addi	sp,sp,16
 80037d8:	8082                	ret

080037da <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E>:
 80037da:	1141                	addi	sp,sp,-16
 80037dc:	c606                	sw	ra,12(sp)
 80037de:	c402                	sw	zero,8(sp)
 80037e0:	07f00613          	li	a2,127
 80037e4:	00b66663          	bltu	a2,a1,80037f0 <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x16>
 80037e8:	00b10423          	sb	a1,8(sp)
 80037ec:	4605                	li	a2,1
 80037ee:	a841                	j	800387e <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0xa4>
 80037f0:	7ff00613          	li	a2,2047
 80037f4:	02b66063          	bltu	a2,a1,8003814 <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x3a>
 80037f8:	03f5f613          	andi	a2,a1,63
 80037fc:	08066613          	ori	a2,a2,128
 8003800:	00c104a3          	sb	a2,9(sp)
 8003804:	8199                	srli	a1,a1,0x6
 8003806:	89fd                	andi	a1,a1,31
 8003808:	0c05e593          	ori	a1,a1,192
 800380c:	00b10423          	sb	a1,8(sp)
 8003810:	4609                	li	a2,2
 8003812:	a0b5                	j	800387e <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0xa4>
 8003814:	0105d613          	srli	a2,a1,0x10
 8003818:	e61d                	bnez	a2,8003846 <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0x6c>
 800381a:	03f5f613          	andi	a2,a1,63
 800381e:	08066613          	ori	a2,a2,128
 8003822:	00c10523          	sb	a2,10(sp)
 8003826:	0065d613          	srli	a2,a1,0x6
 800382a:	03f67613          	andi	a2,a2,63
 800382e:	08066613          	ori	a2,a2,128
 8003832:	00c104a3          	sb	a2,9(sp)
 8003836:	81b1                	srli	a1,a1,0xc
 8003838:	89bd                	andi	a1,a1,15
 800383a:	0e05e593          	ori	a1,a1,224
 800383e:	00b10423          	sb	a1,8(sp)
 8003842:	460d                	li	a2,3
 8003844:	a82d                	j	800387e <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E+0xa4>
 8003846:	03f5f613          	andi	a2,a1,63
 800384a:	08066613          	ori	a2,a2,128
 800384e:	00c105a3          	sb	a2,11(sp)
 8003852:	0125d613          	srli	a2,a1,0x12
 8003856:	0f066613          	ori	a2,a2,240
 800385a:	00c10423          	sb	a2,8(sp)
 800385e:	0065d613          	srli	a2,a1,0x6
 8003862:	03f67613          	andi	a2,a2,63
 8003866:	08066613          	ori	a2,a2,128
 800386a:	00c10523          	sb	a2,10(sp)
 800386e:	81b1                	srli	a1,a1,0xc
 8003870:	03f5f593          	andi	a1,a1,63
 8003874:	0805e593          	ori	a1,a1,128
 8003878:	00b104a3          	sb	a1,9(sp)
 800387c:	4611                	li	a2,4
 800387e:	002c                	addi	a1,sp,8
 8003880:	00000097          	auipc	ra,0x0
 8003884:	c38080e7          	jalr	-968(ra) # 80034b8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E>
 8003888:	40b2                	lw	ra,12(sp)
 800388a:	0141                	addi	sp,sp,16
 800388c:	8082                	ret

0800388e <_ZN4core3fmt5Write9write_fmt17hd5d67e64151488d3E>:
 800388e:	7179                	addi	sp,sp,-48
 8003890:	d606                	sw	ra,44(sp)
 8003892:	c62a                	sw	a0,12(sp)
 8003894:	49c8                	lw	a0,20(a1)
 8003896:	d22a                	sw	a0,36(sp)
 8003898:	4988                	lw	a0,16(a1)
 800389a:	d02a                	sw	a0,32(sp)
 800389c:	45c8                	lw	a0,12(a1)
 800389e:	ce2a                	sw	a0,28(sp)
 80038a0:	4588                	lw	a0,8(a1)
 80038a2:	cc2a                	sw	a0,24(sp)
 80038a4:	41c8                	lw	a0,4(a1)
 80038a6:	ca2a                	sw	a0,20(sp)
 80038a8:	4188                	lw	a0,0(a1)
 80038aa:	c82a                	sw	a0,16(sp)
 80038ac:	0800c537          	lui	a0,0x800c
 80038b0:	28c50593          	addi	a1,a0,652 # 800c28c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xa34>
 80038b4:	0068                	addi	a0,sp,12
 80038b6:	0810                	addi	a2,sp,16
 80038b8:	00000097          	auipc	ra,0x0
 80038bc:	09e080e7          	jalr	158(ra) # 8003956 <_ZN4core3fmt5write17h51826aee11d21b9bE>
 80038c0:	50b2                	lw	ra,44(sp)
 80038c2:	6145                	addi	sp,sp,48
 80038c4:	8082                	ret

080038c6 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17hc9f594331d92d7bbE>:
 80038c6:	4108                	lw	a0,0(a0)
 80038c8:	00000317          	auipc	t1,0x0
 80038cc:	bf030067          	jr	-1040(t1) # 80034b8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17hdc7682df28e73d00E>

080038d0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h44c662229c53045aE>:
 80038d0:	4108                	lw	a0,0(a0)
 80038d2:	00000317          	auipc	t1,0x0
 80038d6:	f0830067          	jr	-248(t1) # 80037da <_ZN4core3fmt5Write10write_char17hcea4dac6dc1cee59E>

080038da <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h44a86feaf2f21d35E>:
 80038da:	7179                	addi	sp,sp,-48
 80038dc:	d606                	sw	ra,44(sp)
 80038de:	4108                	lw	a0,0(a0)
 80038e0:	c62a                	sw	a0,12(sp)
 80038e2:	49c8                	lw	a0,20(a1)
 80038e4:	d22a                	sw	a0,36(sp)
 80038e6:	4988                	lw	a0,16(a1)
 80038e8:	d02a                	sw	a0,32(sp)
 80038ea:	45c8                	lw	a0,12(a1)
 80038ec:	ce2a                	sw	a0,28(sp)
 80038ee:	4588                	lw	a0,8(a1)
 80038f0:	cc2a                	sw	a0,24(sp)
 80038f2:	41c8                	lw	a0,4(a1)
 80038f4:	ca2a                	sw	a0,20(sp)
 80038f6:	4188                	lw	a0,0(a1)
 80038f8:	c82a                	sw	a0,16(sp)
 80038fa:	0800c537          	lui	a0,0x800c
 80038fe:	28c50593          	addi	a1,a0,652 # 800c28c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0xa34>
 8003902:	0068                	addi	a0,sp,12
 8003904:	0810                	addi	a2,sp,16
 8003906:	00000097          	auipc	ra,0x0
 800390a:	050080e7          	jalr	80(ra) # 8003956 <_ZN4core3fmt5write17h51826aee11d21b9bE>
 800390e:	50b2                	lw	ra,44(sp)
 8003910:	6145                	addi	sp,sp,48
 8003912:	8082                	ret

08003914 <_ZN4core3fmt10ArgumentV110show_usize17h3c2fac3bad94a947E>:
 8003914:	862e                	mv	a2,a1
 8003916:	4108                	lw	a0,0(a0)
 8003918:	4585                	li	a1,1
 800391a:	00001317          	auipc	t1,0x1
 800391e:	05230067          	jr	82(t1) # 800496c <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

08003922 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h3e269ca172b8335aE>:
 8003922:	1101                	addi	sp,sp,-32
 8003924:	ce06                	sw	ra,28(sp)
 8003926:	4dd4                	lw	a3,28(a1)
 8003928:	4d8c                	lw	a1,24(a1)
 800392a:	4950                	lw	a2,20(a0)
 800392c:	ca32                	sw	a2,20(sp)
 800392e:	4910                	lw	a2,16(a0)
 8003930:	c832                	sw	a2,16(sp)
 8003932:	4550                	lw	a2,12(a0)
 8003934:	c632                	sw	a2,12(sp)
 8003936:	4510                	lw	a2,8(a0)
 8003938:	c432                	sw	a2,8(sp)
 800393a:	4150                	lw	a2,4(a0)
 800393c:	c232                	sw	a2,4(sp)
 800393e:	4108                	lw	a0,0(a0)
 8003940:	c02a                	sw	a0,0(sp)
 8003942:	860a                	mv	a2,sp
 8003944:	852e                	mv	a0,a1
 8003946:	85b6                	mv	a1,a3
 8003948:	00000097          	auipc	ra,0x0
 800394c:	00e080e7          	jalr	14(ra) # 8003956 <_ZN4core3fmt5write17h51826aee11d21b9bE>
 8003950:	40f2                	lw	ra,28(sp)
 8003952:	6105                	addi	sp,sp,32
 8003954:	8082                	ret

08003956 <_ZN4core3fmt5write17h51826aee11d21b9bE>:
 8003956:	7159                	addi	sp,sp,-112
 8003958:	d686                	sw	ra,108(sp)
 800395a:	d4a6                	sw	s1,104(sp)
 800395c:	d2ca                	sw	s2,100(sp)
 800395e:	d0ce                	sw	s3,96(sp)
 8003960:	ced2                	sw	s4,92(sp)
 8003962:	ccd6                	sw	s5,88(sp)
 8003964:	cada                	sw	s6,84(sp)
 8003966:	c8de                	sw	s7,80(sp)
 8003968:	c6e2                	sw	s8,76(sp)
 800396a:	c4e6                	sw	s9,72(sp)
 800396c:	c2ea                	sw	s10,68(sp)
 800396e:	c0ee                	sw	s11,64(sp)
 8003970:	01062a03          	lw	s4,16(a2)
 8003974:	4a54                	lw	a3,20(a2)
 8003976:	4a8d                	li	s5,3
 8003978:	03510c23          	sb	s5,56(sp)
 800397c:	02000713          	li	a4,32
 8003980:	c63a                	sw	a4,12(sp)
 8003982:	d22e                	sw	a1,36(sp)
 8003984:	d02a                	sw	a0,32(sp)
 8003986:	00369713          	slli	a4,a3,0x3
 800398a:	9752                	add	a4,a4,s4
 800398c:	d63a                	sw	a4,44(sp)
 800398e:	da36                	sw	a3,52(sp)
 8003990:	d852                	sw	s4,48(sp)
 8003992:	d452                	sw	s4,40(sp)
 8003994:	c402                	sw	zero,8(sp)
 8003996:	cc02                	sw	zero,24(sp)
 8003998:	c802                	sw	zero,16(sp)
 800399a:	4604                	lw	s1,8(a2)
 800399c:	14048163          	beqz	s1,8003ade <_ZN4core3fmt5write17h51826aee11d21b9bE+0x188>
 80039a0:	4654                	lw	a3,12(a2)
 80039a2:	00462903          	lw	s2,4(a2)
 80039a6:	8b4a                	mv	s6,s2
 80039a8:	00d96363          	bltu	s2,a3,80039ae <_ZN4core3fmt5write17h51826aee11d21b9bE+0x58>
 80039ac:	8b36                	mv	s6,a3
 80039ae:	00062983          	lw	s3,0(a2)
 80039b2:	180b0363          	beqz	s6,8003b38 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1e2>
 80039b6:	45d4                	lw	a3,12(a1)
 80039b8:	0049a603          	lw	a2,4(s3)
 80039bc:	0009a583          	lw	a1,0(s3)
 80039c0:	9682                	jalr	a3
 80039c2:	18051863          	bnez	a0,8003b52 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1fc>
 80039c6:	4b85                	li	s7,1
 80039c8:	00c98c13          	addi	s8,s3,12
 80039cc:	04c1                	addi	s1,s1,16
 80039ce:	08004537          	lui	a0,0x8004
 80039d2:	91450d13          	addi	s10,a0,-1772 # 8003914 <_ZN4core3fmt10ArgumentV110show_usize17h3c2fac3bad94a947E>
 80039d6:	00810a13          	addi	s4,sp,8
 80039da:	4d89                	li	s11,2
 80039dc:	8cde                	mv	s9,s7
 80039de:	ff84a503          	lw	a0,-8(s1)
 80039e2:	c62a                	sw	a0,12(sp)
 80039e4:	01048503          	lb	a0,16(s1)
 80039e8:	02a10c23          	sb	a0,56(sp)
 80039ec:	ffc4a503          	lw	a0,-4(s1)
 80039f0:	c42a                	sw	a0,8(sp)
 80039f2:	4488                	lw	a0,8(s1)
 80039f4:	03750463          	beq	a0,s7,8003a1c <_ZN4core3fmt5write17h51826aee11d21b9bE+0xc6>
 80039f8:	01b50663          	beq	a0,s11,8003a04 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xae>
 80039fc:	01550e63          	beq	a0,s5,8003a18 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xc2>
 8003a00:	44c8                	lw	a0,12(s1)
 8003a02:	a815                	j	8003a36 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xe0>
 8003a04:	5522                	lw	a0,40(sp)
 8003a06:	55b2                	lw	a1,44(sp)
 8003a08:	00b50863          	beq	a0,a1,8003a18 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xc2>
 8003a0c:	00850593          	addi	a1,a0,8
 8003a10:	d42e                	sw	a1,40(sp)
 8003a12:	414c                	lw	a1,4(a0)
 8003a14:	01a58f63          	beq	a1,s10,8003a32 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xdc>
 8003a18:	4581                	li	a1,0
 8003a1a:	a839                	j	8003a38 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xe2>
 8003a1c:	44cc                	lw	a1,12(s1)
 8003a1e:	5652                	lw	a2,52(sp)
 8003a20:	14c5fa63          	bgeu	a1,a2,8003b74 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x21e>
 8003a24:	00359513          	slli	a0,a1,0x3
 8003a28:	55c2                	lw	a1,48(sp)
 8003a2a:	952e                	add	a0,a0,a1
 8003a2c:	414c                	lw	a1,4(a0)
 8003a2e:	ffa595e3          	bne	a1,s10,8003a18 <_ZN4core3fmt5write17h51826aee11d21b9bE+0xc2>
 8003a32:	4108                	lw	a0,0(a0)
 8003a34:	4108                	lw	a0,0(a0)
 8003a36:	85de                	mv	a1,s7
 8003a38:	ca2a                	sw	a0,20(sp)
 8003a3a:	c82e                	sw	a1,16(sp)
 8003a3c:	4088                	lw	a0,0(s1)
 8003a3e:	03750463          	beq	a0,s7,8003a66 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x110>
 8003a42:	01b50663          	beq	a0,s11,8003a4e <_ZN4core3fmt5write17h51826aee11d21b9bE+0xf8>
 8003a46:	01550e63          	beq	a0,s5,8003a62 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x10c>
 8003a4a:	40c8                	lw	a0,4(s1)
 8003a4c:	a815                	j	8003a80 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x12a>
 8003a4e:	5522                	lw	a0,40(sp)
 8003a50:	55b2                	lw	a1,44(sp)
 8003a52:	00b50863          	beq	a0,a1,8003a62 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x10c>
 8003a56:	00850593          	addi	a1,a0,8
 8003a5a:	d42e                	sw	a1,40(sp)
 8003a5c:	414c                	lw	a1,4(a0)
 8003a5e:	01a58f63          	beq	a1,s10,8003a7c <_ZN4core3fmt5write17h51826aee11d21b9bE+0x126>
 8003a62:	4581                	li	a1,0
 8003a64:	a839                	j	8003a82 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x12c>
 8003a66:	40cc                	lw	a1,4(s1)
 8003a68:	5652                	lw	a2,52(sp)
 8003a6a:	10c5f563          	bgeu	a1,a2,8003b74 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x21e>
 8003a6e:	00359513          	slli	a0,a1,0x3
 8003a72:	55c2                	lw	a1,48(sp)
 8003a74:	952e                	add	a0,a0,a1
 8003a76:	414c                	lw	a1,4(a0)
 8003a78:	ffa595e3          	bne	a1,s10,8003a62 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x10c>
 8003a7c:	4108                	lw	a0,0(a0)
 8003a7e:	4108                	lw	a0,0(a0)
 8003a80:	85de                	mv	a1,s7
 8003a82:	ce2a                	sw	a0,28(sp)
 8003a84:	cc2e                	sw	a1,24(sp)
 8003a86:	ff04a503          	lw	a0,-16(s1)
 8003a8a:	01751c63          	bne	a0,s7,8003aa2 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x14c>
 8003a8e:	ff44a583          	lw	a1,-12(s1)
 8003a92:	5652                	lw	a2,52(sp)
 8003a94:	0ec5fc63          	bgeu	a1,a2,8003b8c <_ZN4core3fmt5write17h51826aee11d21b9bE+0x236>
 8003a98:	00359513          	slli	a0,a1,0x3
 8003a9c:	55c2                	lw	a1,48(sp)
 8003a9e:	952e                	add	a0,a0,a1
 8003aa0:	a801                	j	8003ab0 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x15a>
 8003aa2:	5522                	lw	a0,40(sp)
 8003aa4:	55b2                	lw	a1,44(sp)
 8003aa6:	0eb50f63          	beq	a0,a1,8003ba4 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x24e>
 8003aaa:	00850593          	addi	a1,a0,8
 8003aae:	d42e                	sw	a1,40(sp)
 8003ab0:	00450593          	addi	a1,a0,4
 8003ab4:	4190                	lw	a2,0(a1)
 8003ab6:	4108                	lw	a0,0(a0)
 8003ab8:	85d2                	mv	a1,s4
 8003aba:	9602                	jalr	a2
 8003abc:	e959                	bnez	a0,8003b52 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1fc>
 8003abe:	076cfe63          	bgeu	s9,s6,8003b3a <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1e4>
 8003ac2:	5512                	lw	a0,36(sp)
 8003ac4:	4554                	lw	a3,12(a0)
 8003ac6:	000c2603          	lw	a2,0(s8)
 8003aca:	ffcc2583          	lw	a1,-4(s8)
 8003ace:	5502                	lw	a0,32(sp)
 8003ad0:	9682                	jalr	a3
 8003ad2:	0c21                	addi	s8,s8,8
 8003ad4:	02448493          	addi	s1,s1,36
 8003ad8:	0c85                	addi	s9,s9,1
 8003ada:	d111                	beqz	a0,80039de <_ZN4core3fmt5write17h51826aee11d21b9bE+0x88>
 8003adc:	a89d                	j	8003b52 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1fc>
 8003ade:	00462903          	lw	s2,4(a2)
 8003ae2:	8aca                	mv	s5,s2
 8003ae4:	00d96363          	bltu	s2,a3,8003aea <_ZN4core3fmt5write17h51826aee11d21b9bE+0x194>
 8003ae8:	8ab6                	mv	s5,a3
 8003aea:	00062983          	lw	s3,0(a2)
 8003aee:	040a8563          	beqz	s5,8003b38 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1e2>
 8003af2:	45d4                	lw	a3,12(a1)
 8003af4:	0049a603          	lw	a2,4(s3)
 8003af8:	0009a583          	lw	a1,0(s3)
 8003afc:	9682                	jalr	a3
 8003afe:	e931                	bnez	a0,8003b52 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1fc>
 8003b00:	4c85                	li	s9,1
 8003b02:	00c98b13          	addi	s6,s3,12
 8003b06:	004a0493          	addi	s1,s4,4
 8003b0a:	00810a13          	addi	s4,sp,8
 8003b0e:	ffc4a503          	lw	a0,-4(s1)
 8003b12:	4090                	lw	a2,0(s1)
 8003b14:	85d2                	mv	a1,s4
 8003b16:	9602                	jalr	a2
 8003b18:	ed0d                	bnez	a0,8003b52 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1fc>
 8003b1a:	035cf063          	bgeu	s9,s5,8003b3a <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1e4>
 8003b1e:	5512                	lw	a0,36(sp)
 8003b20:	4554                	lw	a3,12(a0)
 8003b22:	000b2603          	lw	a2,0(s6)
 8003b26:	ffcb2583          	lw	a1,-4(s6)
 8003b2a:	5502                	lw	a0,32(sp)
 8003b2c:	9682                	jalr	a3
 8003b2e:	0b21                	addi	s6,s6,8
 8003b30:	04a1                	addi	s1,s1,8
 8003b32:	0c85                	addi	s9,s9,1
 8003b34:	dd69                	beqz	a0,8003b0e <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1b8>
 8003b36:	a831                	j	8003b52 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x1fc>
 8003b38:	4c81                	li	s9,0
 8003b3a:	012cfe63          	bgeu	s9,s2,8003b56 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x200>
 8003b3e:	003c9513          	slli	a0,s9,0x3
 8003b42:	954e                	add	a0,a0,s3
 8003b44:	4150                	lw	a2,4(a0)
 8003b46:	410c                	lw	a1,0(a0)
 8003b48:	5512                	lw	a0,36(sp)
 8003b4a:	4554                	lw	a3,12(a0)
 8003b4c:	5502                	lw	a0,32(sp)
 8003b4e:	9682                	jalr	a3
 8003b50:	c119                	beqz	a0,8003b56 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x200>
 8003b52:	4505                	li	a0,1
 8003b54:	a011                	j	8003b58 <_ZN4core3fmt5write17h51826aee11d21b9bE+0x202>
 8003b56:	4501                	li	a0,0
 8003b58:	4d86                	lw	s11,64(sp)
 8003b5a:	4d16                	lw	s10,68(sp)
 8003b5c:	4ca6                	lw	s9,72(sp)
 8003b5e:	4c36                	lw	s8,76(sp)
 8003b60:	4bc6                	lw	s7,80(sp)
 8003b62:	4b56                	lw	s6,84(sp)
 8003b64:	4ae6                	lw	s5,88(sp)
 8003b66:	4a76                	lw	s4,92(sp)
 8003b68:	5986                	lw	s3,96(sp)
 8003b6a:	5916                	lw	s2,100(sp)
 8003b6c:	54a6                	lw	s1,104(sp)
 8003b6e:	50b6                	lw	ra,108(sp)
 8003b70:	6165                	addi	sp,sp,112
 8003b72:	8082                	ret
 8003b74:	0800c537          	lui	a0,0x800c
 8003b78:	2d850513          	addi	a0,a0,728 # 800c2d8 <str.h+0x28>
 8003b7c:	fffff097          	auipc	ra,0xfffff
 8003b80:	344080e7          	jalr	836(ra) # 8002ec0 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
 8003b84:	00008097          	auipc	ra,0x8
 8003b88:	a6c080e7          	jalr	-1428(ra) # 800b5f0 <abort>
 8003b8c:	0800c537          	lui	a0,0x800c
 8003b90:	2c850513          	addi	a0,a0,712 # 800c2c8 <str.h+0x18>
 8003b94:	fffff097          	auipc	ra,0xfffff
 8003b98:	32c080e7          	jalr	812(ra) # 8002ec0 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
 8003b9c:	00008097          	auipc	ra,0x8
 8003ba0:	a54080e7          	jalr	-1452(ra) # 800b5f0 <abort>
 8003ba4:	0800c537          	lui	a0,0x800c
 8003ba8:	f2050513          	addi	a0,a0,-224 # 800bf20 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x6c8>
 8003bac:	fffff097          	auipc	ra,0xfffff
 8003bb0:	2ce080e7          	jalr	718(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 8003bb4:	00008097          	auipc	ra,0x8
 8003bb8:	a3c080e7          	jalr	-1476(ra) # 800b5f0 <abort>

08003bbc <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>:
 8003bbc:	7179                	addi	sp,sp,-48
 8003bbe:	d606                	sw	ra,44(sp)
 8003bc0:	d426                	sw	s1,40(sp)
 8003bc2:	d24a                	sw	s2,36(sp)
 8003bc4:	d04e                	sw	s3,32(sp)
 8003bc6:	ce52                	sw	s4,28(sp)
 8003bc8:	cc56                	sw	s5,24(sp)
 8003bca:	ca5a                	sw	s6,20(sp)
 8003bcc:	c85e                	sw	s7,16(sp)
 8003bce:	c662                	sw	s8,12(sp)
 8003bd0:	c466                	sw	s9,8(sp)
 8003bd2:	c26a                	sw	s10,4(sp)
 8003bd4:	893e                	mv	s2,a5
 8003bd6:	89ba                	mv	s3,a4
 8003bd8:	8ab6                	mv	s5,a3
 8003bda:	8b32                	mv	s6,a2
 8003bdc:	8d2a                	mv	s10,a0
 8003bde:	c989                	beqz	a1,8003bf0 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x34>
 8003be0:	000d2503          	lw	a0,0(s10)
 8003be4:	00157593          	andi	a1,a0,1
 8003be8:	c1a1                	beqz	a1,8003c28 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x6c>
 8003bea:	02b00b93          	li	s7,43
 8003bee:	a83d                	j	8003c2c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x70>
 8003bf0:	02d00b93          	li	s7,45
 8003bf4:	000d2503          	lw	a0,0(s10)
 8003bf8:	00190c13          	addi	s8,s2,1
 8003bfc:	00457593          	andi	a1,a0,4
 8003c00:	c99d                	beqz	a1,8003c36 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x7a>
 8003c02:	020a8c63          	beqz	s5,8003c3a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x7e>
 8003c06:	08000613          	li	a2,128
 8003c0a:	86d6                	mv	a3,s5
 8003c0c:	4581                	li	a1,0
 8003c0e:	875a                	mv	a4,s6
 8003c10:	00074783          	lbu	a5,0(a4)
 8003c14:	0c07f793          	andi	a5,a5,192
 8003c18:	8fb1                	xor	a5,a5,a2
 8003c1a:	0017b793          	seqz	a5,a5
 8003c1e:	95be                	add	a1,a1,a5
 8003c20:	0705                	addi	a4,a4,1
 8003c22:	16fd                	addi	a3,a3,-1
 8003c24:	f6f5                	bnez	a3,8003c10 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x54>
 8003c26:	a819                	j	8003c3c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x80>
 8003c28:	00110bb7          	lui	s7,0x110
 8003c2c:	01258c33          	add	s8,a1,s2
 8003c30:	00457593          	andi	a1,a0,4
 8003c34:	f5f9                	bnez	a1,8003c02 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x46>
 8003c36:	4b01                	li	s6,0
 8003c38:	a031                	j	8003c44 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x88>
 8003c3a:	4581                	li	a1,0
 8003c3c:	015c0633          	add	a2,s8,s5
 8003c40:	40b60c33          	sub	s8,a2,a1
 8003c44:	008d2583          	lw	a1,8(s10)
 8003c48:	4a05                	li	s4,1
 8003c4a:	03459863          	bne	a1,s4,8003c7a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xbe>
 8003c4e:	00cd2c83          	lw	s9,12(s10)
 8003c52:	039c7463          	bgeu	s8,s9,8003c7a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xbe>
 8003c56:	8921                	andi	a0,a0,8
 8003c58:	e12d                	bnez	a0,8003cba <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xfe>
 8003c5a:	030d4503          	lbu	a0,48(s10)
 8003c5e:	458d                	li	a1,3
 8003c60:	00b51363          	bne	a0,a1,8003c66 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xaa>
 8003c64:	4505                	li	a0,1
 8003c66:	418c8c33          	sub	s8,s9,s8
 8003c6a:	00357593          	andi	a1,a0,3
 8003c6e:	c5d1                	beqz	a1,8003cfa <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x13e>
 8003c70:	4589                	li	a1,2
 8003c72:	08b50763          	beq	a0,a1,8003d00 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x144>
 8003c76:	4c81                	li	s9,0
 8003c78:	a859                	j	8003d0e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x152>
 8003c7a:	856a                	mv	a0,s10
 8003c7c:	85de                	mv	a1,s7
 8003c7e:	865a                	mv	a2,s6
 8003c80:	86d6                	mv	a3,s5
 8003c82:	00000097          	auipc	ra,0x0
 8003c86:	15c080e7          	jalr	348(ra) # 8003dde <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>
 8003c8a:	e911                	bnez	a0,8003c9e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8003c8c:	018d2503          	lw	a0,24(s10)
 8003c90:	01cd2583          	lw	a1,28(s10)
 8003c94:	45d4                	lw	a3,12(a1)
 8003c96:	85ce                	mv	a1,s3
 8003c98:	864a                	mv	a2,s2
 8003c9a:	9682                	jalr	a3
 8003c9c:	8a2a                	mv	s4,a0
 8003c9e:	8552                	mv	a0,s4
 8003ca0:	4d12                	lw	s10,4(sp)
 8003ca2:	4ca2                	lw	s9,8(sp)
 8003ca4:	4c32                	lw	s8,12(sp)
 8003ca6:	4bc2                	lw	s7,16(sp)
 8003ca8:	4b52                	lw	s6,20(sp)
 8003caa:	4ae2                	lw	s5,24(sp)
 8003cac:	4a72                	lw	s4,28(sp)
 8003cae:	5982                	lw	s3,32(sp)
 8003cb0:	5912                	lw	s2,36(sp)
 8003cb2:	54a2                	lw	s1,40(sp)
 8003cb4:	50b2                	lw	ra,44(sp)
 8003cb6:	6145                	addi	sp,sp,48
 8003cb8:	8082                	ret
 8003cba:	03000513          	li	a0,48
 8003cbe:	00ad2223          	sw	a0,4(s10)
 8003cc2:	4a05                	li	s4,1
 8003cc4:	034d0823          	sb	s4,48(s10)
 8003cc8:	856a                	mv	a0,s10
 8003cca:	85de                	mv	a1,s7
 8003ccc:	865a                	mv	a2,s6
 8003cce:	86d6                	mv	a3,s5
 8003cd0:	00000097          	auipc	ra,0x0
 8003cd4:	10e080e7          	jalr	270(ra) # 8003dde <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>
 8003cd8:	f179                	bnez	a0,8003c9e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8003cda:	030d4503          	lbu	a0,48(s10)
 8003cde:	458d                	li	a1,3
 8003ce0:	00b51363          	bne	a0,a1,8003ce6 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x12a>
 8003ce4:	4505                	li	a0,1
 8003ce6:	418c8ab3          	sub	s5,s9,s8
 8003cea:	00357593          	andi	a1,a0,3
 8003cee:	c1d1                	beqz	a1,8003d72 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1b6>
 8003cf0:	4589                	li	a1,2
 8003cf2:	08b50363          	beq	a0,a1,8003d78 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1bc>
 8003cf6:	4b01                	li	s6,0
 8003cf8:	a079                	j	8003d86 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1ca>
 8003cfa:	8ce2                	mv	s9,s8
 8003cfc:	4c01                	li	s8,0
 8003cfe:	a801                	j	8003d0e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x152>
 8003d00:	001c5513          	srli	a0,s8,0x1
 8003d04:	001c0593          	addi	a1,s8,1
 8003d08:	0015dc93          	srli	s9,a1,0x1
 8003d0c:	8c2a                	mv	s8,a0
 8003d0e:	54fd                	li	s1,-1
 8003d10:	4a05                	li	s4,1
 8003d12:	0485                	addi	s1,s1,1
 8003d14:	0184fc63          	bgeu	s1,s8,8003d2c <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x170>
 8003d18:	004d2583          	lw	a1,4(s10)
 8003d1c:	018d2503          	lw	a0,24(s10)
 8003d20:	01cd2603          	lw	a2,28(s10)
 8003d24:	4a10                	lw	a2,16(a2)
 8003d26:	9602                	jalr	a2
 8003d28:	d56d                	beqz	a0,8003d12 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x156>
 8003d2a:	bf95                	j	8003c9e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8003d2c:	004d2c03          	lw	s8,4(s10)
 8003d30:	856a                	mv	a0,s10
 8003d32:	85de                	mv	a1,s7
 8003d34:	865a                	mv	a2,s6
 8003d36:	86d6                	mv	a3,s5
 8003d38:	00000097          	auipc	ra,0x0
 8003d3c:	0a6080e7          	jalr	166(ra) # 8003dde <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>
 8003d40:	fd39                	bnez	a0,8003c9e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8003d42:	018d2503          	lw	a0,24(s10)
 8003d46:	01cd2583          	lw	a1,28(s10)
 8003d4a:	45d4                	lw	a3,12(a1)
 8003d4c:	85ce                	mv	a1,s3
 8003d4e:	864a                	mv	a2,s2
 8003d50:	9682                	jalr	a3
 8003d52:	f531                	bnez	a0,8003c9e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8003d54:	54fd                	li	s1,-1
 8003d56:	01cd2983          	lw	s3,28(s10)
 8003d5a:	018d2903          	lw	s2,24(s10)
 8003d5e:	0485                	addi	s1,s1,1
 8003d60:	0794fd63          	bgeu	s1,s9,8003dda <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x21e>
 8003d64:	0109a603          	lw	a2,16(s3)
 8003d68:	854a                	mv	a0,s2
 8003d6a:	85e2                	mv	a1,s8
 8003d6c:	9602                	jalr	a2
 8003d6e:	d965                	beqz	a0,8003d5e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1a2>
 8003d70:	b73d                	j	8003c9e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8003d72:	8b56                	mv	s6,s5
 8003d74:	4a81                	li	s5,0
 8003d76:	a801                	j	8003d86 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1ca>
 8003d78:	001ad513          	srli	a0,s5,0x1
 8003d7c:	001a8593          	addi	a1,s5,1
 8003d80:	0015db13          	srli	s6,a1,0x1
 8003d84:	8aaa                	mv	s5,a0
 8003d86:	54fd                	li	s1,-1
 8003d88:	4a05                	li	s4,1
 8003d8a:	0485                	addi	s1,s1,1
 8003d8c:	0154fc63          	bgeu	s1,s5,8003da4 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1e8>
 8003d90:	004d2583          	lw	a1,4(s10)
 8003d94:	018d2503          	lw	a0,24(s10)
 8003d98:	01cd2603          	lw	a2,28(s10)
 8003d9c:	4a10                	lw	a2,16(a2)
 8003d9e:	9602                	jalr	a2
 8003da0:	d56d                	beqz	a0,8003d8a <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x1ce>
 8003da2:	bdf5                	j	8003c9e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8003da4:	004d2a83          	lw	s5,4(s10)
 8003da8:	018d2503          	lw	a0,24(s10)
 8003dac:	01cd2583          	lw	a1,28(s10)
 8003db0:	45d4                	lw	a3,12(a1)
 8003db2:	85ce                	mv	a1,s3
 8003db4:	864a                	mv	a2,s2
 8003db6:	9682                	jalr	a3
 8003db8:	ee0513e3          	bnez	a0,8003c9e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8003dbc:	54fd                	li	s1,-1
 8003dbe:	01cd2983          	lw	s3,28(s10)
 8003dc2:	018d2903          	lw	s2,24(s10)
 8003dc6:	0485                	addi	s1,s1,1
 8003dc8:	0164f963          	bgeu	s1,s6,8003dda <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x21e>
 8003dcc:	0109a603          	lw	a2,16(s3)
 8003dd0:	854a                	mv	a0,s2
 8003dd2:	85d6                	mv	a1,s5
 8003dd4:	9602                	jalr	a2
 8003dd6:	d965                	beqz	a0,8003dc6 <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0x20a>
 8003dd8:	b5d9                	j	8003c9e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>
 8003dda:	4a01                	li	s4,0
 8003ddc:	b5c9                	j	8003c9e <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E+0xe2>

08003dde <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE>:
 8003dde:	1141                	addi	sp,sp,-16
 8003de0:	c606                	sw	ra,12(sp)
 8003de2:	c426                	sw	s1,8(sp)
 8003de4:	c24a                	sw	s2,4(sp)
 8003de6:	c04e                	sw	s3,0(sp)
 8003de8:	8936                	mv	s2,a3
 8003dea:	89b2                	mv	s3,a2
 8003dec:	84aa                	mv	s1,a0
 8003dee:	00110537          	lui	a0,0x110
 8003df2:	00a58963          	beq	a1,a0,8003e04 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x26>
 8003df6:	4c88                	lw	a0,24(s1)
 8003df8:	4cd0                	lw	a2,28(s1)
 8003dfa:	4a10                	lw	a2,16(a2)
 8003dfc:	9602                	jalr	a2
 8003dfe:	c119                	beqz	a0,8003e04 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x26>
 8003e00:	4505                	li	a0,1
 8003e02:	a819                	j	8003e18 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x3a>
 8003e04:	00098963          	beqz	s3,8003e16 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x38>
 8003e08:	4c88                	lw	a0,24(s1)
 8003e0a:	4ccc                	lw	a1,28(s1)
 8003e0c:	45d4                	lw	a3,12(a1)
 8003e0e:	85ce                	mv	a1,s3
 8003e10:	864a                	mv	a2,s2
 8003e12:	9682                	jalr	a3
 8003e14:	a011                	j	8003e18 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h6c53284d01543c5dE+0x3a>
 8003e16:	4501                	li	a0,0
 8003e18:	4982                	lw	s3,0(sp)
 8003e1a:	4912                	lw	s2,4(sp)
 8003e1c:	44a2                	lw	s1,8(sp)
 8003e1e:	40b2                	lw	ra,12(sp)
 8003e20:	0141                	addi	sp,sp,16
 8003e22:	8082                	ret

08003e24 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE>:
 8003e24:	1101                	addi	sp,sp,-32
 8003e26:	ce06                	sw	ra,28(sp)
 8003e28:	cc26                	sw	s1,24(sp)
 8003e2a:	ca4a                	sw	s2,20(sp)
 8003e2c:	c84e                	sw	s3,16(sp)
 8003e2e:	c652                	sw	s4,12(sp)
 8003e30:	c456                	sw	s5,8(sp)
 8003e32:	c25a                	sw	s6,4(sp)
 8003e34:	c05e                	sw	s7,0(sp)
 8003e36:	8a32                	mv	s4,a2
 8003e38:	89ae                	mv	s3,a1
 8003e3a:	8baa                	mv	s7,a0
 8003e3c:	4908                	lw	a0,16(a0)
 8003e3e:	008ba383          	lw	t2,8(s7) # 110008 <__stack_size+0x10f808>
 8003e42:	4905                	li	s2,1
 8003e44:	01239463          	bne	t2,s2,8003e4c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x28>
 8003e48:	e501                	bnez	a0,8003e50 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x2c>
 8003e4a:	a0d5                	j	8003f2e <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x10a>
 8003e4c:	16050463          	beqz	a0,8003fb4 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x190>
 8003e50:	0c0a0c63          	beqz	s4,8003f28 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x104>
 8003e54:	01498f33          	add	t5,s3,s4
 8003e58:	014ba503          	lw	a0,20(s7)
 8003e5c:	fff54693          	not	a3,a0
 8003e60:	0e000313          	li	t1,224
 8003e64:	0f000293          	li	t0,240
 8003e68:	001c08b7          	lui	a7,0x1c0
 8003e6c:	00110837          	lui	a6,0x110
 8003e70:	4581                	li	a1,0
 8003e72:	87ce                	mv	a5,s3
 8003e74:	84ce                	mv	s1,s3
 8003e76:	00178513          	addi	a0,a5,1
 8003e7a:	00078603          	lb	a2,0(a5)
 8003e7e:	0ff67713          	andi	a4,a2,255
 8003e82:	06065863          	bgez	a2,8003ef2 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xce>
 8003e86:	03e50763          	beq	a0,t5,8003eb4 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x90>
 8003e8a:	00278513          	addi	a0,a5,2
 8003e8e:	0017c603          	lbu	a2,1(a5)
 8003e92:	03f67793          	andi	a5,a2,63
 8003e96:	862a                	mv	a2,a0
 8003e98:	01f77e13          	andi	t3,a4,31
 8003e9c:	02676263          	bltu	a4,t1,8003ec0 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x9c>
 8003ea0:	03e60563          	beq	a2,t5,8003eca <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xa6>
 8003ea4:	00160513          	addi	a0,a2,1
 8003ea8:	00064603          	lbu	a2,0(a2)
 8003eac:	03f67613          	andi	a2,a2,63
 8003eb0:	8faa                	mv	t6,a0
 8003eb2:	a831                	j	8003ece <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xaa>
 8003eb4:	867a                	mv	a2,t5
 8003eb6:	4781                	li	a5,0
 8003eb8:	01f77e13          	andi	t3,a4,31
 8003ebc:	fe6772e3          	bgeu	a4,t1,8003ea0 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x7c>
 8003ec0:	006e1613          	slli	a2,t3,0x6
 8003ec4:	00c7e733          	or	a4,a5,a2
 8003ec8:	a02d                	j	8003ef2 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xce>
 8003eca:	8ffa                	mv	t6,t5
 8003ecc:	4601                	li	a2,0
 8003ece:	079a                	slli	a5,a5,0x6
 8003ed0:	00f66eb3          	or	t4,a2,a5
 8003ed4:	00576b63          	bltu	a4,t0,8003eea <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xc6>
 8003ed8:	03ef8163          	beq	t6,t5,8003efa <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xd6>
 8003edc:	001f8793          	addi	a5,t6,1
 8003ee0:	000fc503          	lbu	a0,0(t6)
 8003ee4:	03f57513          	andi	a0,a0,63
 8003ee8:	a819                	j	8003efe <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xda>
 8003eea:	00ce1613          	slli	a2,t3,0xc
 8003eee:	00cee733          	or	a4,t4,a2
 8003ef2:	87aa                	mv	a5,a0
 8003ef4:	0685                	addi	a3,a3,1
 8003ef6:	e28d                	bnez	a3,8003f18 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0xf4>
 8003ef8:	a841                	j	8003f88 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x164>
 8003efa:	87aa                	mv	a5,a0
 8003efc:	4501                	li	a0,0
 8003efe:	012e1613          	slli	a2,t3,0x12
 8003f02:	01167633          	and	a2,a2,a7
 8003f06:	006e9713          	slli	a4,t4,0x6
 8003f0a:	8e59                	or	a2,a2,a4
 8003f0c:	00a66733          	or	a4,a2,a0
 8003f10:	0b070063          	beq	a4,a6,8003fb0 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x18c>
 8003f14:	0685                	addi	a3,a3,1
 8003f16:	caad                	beqz	a3,8003f88 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x164>
 8003f18:	40958533          	sub	a0,a1,s1
 8003f1c:	00f505b3          	add	a1,a0,a5
 8003f20:	84be                	mv	s1,a5
 8003f22:	f4ff1ae3          	bne	t5,a5,8003e76 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x52>
 8003f26:	a069                	j	8003fb0 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x18c>
 8003f28:	4a01                	li	s4,0
 8003f2a:	08038563          	beqz	t2,8003fb4 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x190>
 8003f2e:	020a0363          	beqz	s4,8003f54 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x130>
 8003f32:	08000593          	li	a1,128
 8003f36:	8652                	mv	a2,s4
 8003f38:	4501                	li	a0,0
 8003f3a:	86ce                	mv	a3,s3
 8003f3c:	0006c703          	lbu	a4,0(a3)
 8003f40:	0c077713          	andi	a4,a4,192
 8003f44:	8f2d                	xor	a4,a4,a1
 8003f46:	00173713          	seqz	a4,a4
 8003f4a:	953a                	add	a0,a0,a4
 8003f4c:	0685                	addi	a3,a3,1
 8003f4e:	167d                	addi	a2,a2,-1
 8003f50:	f675                	bnez	a2,8003f3c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x118>
 8003f52:	a011                	j	8003f56 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x132>
 8003f54:	4501                	li	a0,0
 8003f56:	40aa05b3          	sub	a1,s4,a0
 8003f5a:	00cba503          	lw	a0,12(s7)
 8003f5e:	04a5fb63          	bgeu	a1,a0,8003fb4 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x190>
 8003f62:	060a0d63          	beqz	s4,8003fdc <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1b8>
 8003f66:	08000613          	li	a2,128
 8003f6a:	86d2                	mv	a3,s4
 8003f6c:	4581                	li	a1,0
 8003f6e:	874e                	mv	a4,s3
 8003f70:	00074783          	lbu	a5,0(a4)
 8003f74:	0c07f793          	andi	a5,a5,192
 8003f78:	8fb1                	xor	a5,a5,a2
 8003f7a:	0017b793          	seqz	a5,a5
 8003f7e:	95be                	add	a1,a1,a5
 8003f80:	0705                	addi	a4,a4,1
 8003f82:	16fd                	addi	a3,a3,-1
 8003f84:	f6f5                	bnez	a3,8003f70 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x14c>
 8003f86:	a8a1                	j	8003fde <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1ba>
 8003f88:	03070463          	beq	a4,a6,8003fb0 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x18c>
 8003f8c:	cd89                	beqz	a1,8003fa6 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x182>
 8003f8e:	01458c63          	beq	a1,s4,8003fa6 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x182>
 8003f92:	0d45fd63          	bgeu	a1,s4,800406c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x248>
 8003f96:	00b98533          	add	a0,s3,a1
 8003f9a:	00050503          	lb	a0,0(a0) # 110000 <__stack_size+0x10f800>
 8003f9e:	fc000613          	li	a2,-64
 8003fa2:	0cc54563          	blt	a0,a2,800406c <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x248>
 8003fa6:	854e                	mv	a0,s3
 8003fa8:	c111                	beqz	a0,8003fac <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x188>
 8003faa:	8a2e                	mv	s4,a1
 8003fac:	c111                	beqz	a0,8003fb0 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x18c>
 8003fae:	89aa                	mv	s3,a0
 8003fb0:	f6039fe3          	bnez	t2,8003f2e <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x10a>
 8003fb4:	018ba503          	lw	a0,24(s7)
 8003fb8:	01cba583          	lw	a1,28(s7)
 8003fbc:	45d4                	lw	a3,12(a1)
 8003fbe:	85ce                	mv	a1,s3
 8003fc0:	8652                	mv	a2,s4
 8003fc2:	9682                	jalr	a3
 8003fc4:	892a                	mv	s2,a0
 8003fc6:	854a                	mv	a0,s2
 8003fc8:	4b82                	lw	s7,0(sp)
 8003fca:	4b12                	lw	s6,4(sp)
 8003fcc:	4aa2                	lw	s5,8(sp)
 8003fce:	4a32                	lw	s4,12(sp)
 8003fd0:	49c2                	lw	s3,16(sp)
 8003fd2:	4952                	lw	s2,20(sp)
 8003fd4:	44e2                	lw	s1,24(sp)
 8003fd6:	40f2                	lw	ra,28(sp)
 8003fd8:	6105                	addi	sp,sp,32
 8003fda:	8082                	ret
 8003fdc:	4581                	li	a1,0
 8003fde:	030bc683          	lbu	a3,48(s7)
 8003fe2:	470d                	li	a4,3
 8003fe4:	4601                	li	a2,0
 8003fe6:	00e68363          	beq	a3,a4,8003fec <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1c8>
 8003fea:	8636                	mv	a2,a3
 8003fec:	414585b3          	sub	a1,a1,s4
 8003ff0:	00a58ab3          	add	s5,a1,a0
 8003ff4:	00367513          	andi	a0,a2,3
 8003ff8:	c511                	beqz	a0,8004004 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1e0>
 8003ffa:	4509                	li	a0,2
 8003ffc:	00a60763          	beq	a2,a0,800400a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1e6>
 8004000:	4b01                	li	s6,0
 8004002:	a819                	j	8004018 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1f4>
 8004004:	8b56                	mv	s6,s5
 8004006:	4a81                	li	s5,0
 8004008:	a801                	j	8004018 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1f4>
 800400a:	001ad513          	srli	a0,s5,0x1
 800400e:	001a8593          	addi	a1,s5,1
 8004012:	0015db13          	srli	s6,a1,0x1
 8004016:	8aaa                	mv	s5,a0
 8004018:	54fd                	li	s1,-1
 800401a:	0485                	addi	s1,s1,1
 800401c:	0154fc63          	bgeu	s1,s5,8004034 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x210>
 8004020:	004ba583          	lw	a1,4(s7)
 8004024:	018ba503          	lw	a0,24(s7)
 8004028:	01cba603          	lw	a2,28(s7)
 800402c:	4a10                	lw	a2,16(a2)
 800402e:	9602                	jalr	a2
 8004030:	d56d                	beqz	a0,800401a <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1f6>
 8004032:	bf51                	j	8003fc6 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1a2>
 8004034:	004baa83          	lw	s5,4(s7)
 8004038:	018ba503          	lw	a0,24(s7)
 800403c:	01cba583          	lw	a1,28(s7)
 8004040:	45d4                	lw	a3,12(a1)
 8004042:	85ce                	mv	a1,s3
 8004044:	8652                	mv	a2,s4
 8004046:	9682                	jalr	a3
 8004048:	fd3d                	bnez	a0,8003fc6 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1a2>
 800404a:	54fd                	li	s1,-1
 800404c:	01cbaa03          	lw	s4,28(s7)
 8004050:	018ba983          	lw	s3,24(s7)
 8004054:	0485                	addi	s1,s1,1
 8004056:	0164f963          	bgeu	s1,s6,8004068 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x244>
 800405a:	010a2603          	lw	a2,16(s4)
 800405e:	854e                	mv	a0,s3
 8004060:	85d6                	mv	a1,s5
 8004062:	9602                	jalr	a2
 8004064:	d965                	beqz	a0,8004054 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x230>
 8004066:	b785                	j	8003fc6 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1a2>
 8004068:	4901                	li	s2,0
 800406a:	bfb1                	j	8003fc6 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x1a2>
 800406c:	4501                	li	a0,0
 800406e:	fd15                	bnez	a0,8003faa <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x186>
 8004070:	bf35                	j	8003fac <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE+0x188>

08004072 <_ZN4core3fmt9Formatter15debug_lower_hex17h6ead2f28bb05b574E>:
 8004072:	00054503          	lbu	a0,0(a0)
 8004076:	8941                	andi	a0,a0,16
 8004078:	8111                	srli	a0,a0,0x4
 800407a:	8082                	ret

0800407c <_ZN4core3fmt9Formatter15debug_upper_hex17hd6d96e6aa5cb78d8E>:
 800407c:	00054503          	lbu	a0,0(a0)
 8004080:	02057513          	andi	a0,a0,32
 8004084:	8115                	srli	a0,a0,0x5
 8004086:	8082                	ret

08004088 <_ZN4core3fmt9Formatter11debug_tuple17h793087e8ecab9022E>:
 8004088:	1141                	addi	sp,sp,-16
 800408a:	c606                	sw	ra,12(sp)
 800408c:	c426                	sw	s1,8(sp)
 800408e:	c24a                	sw	s2,4(sp)
 8004090:	c04e                	sw	s3,0(sp)
 8004092:	8936                	mv	s2,a3
 8004094:	89ae                	mv	s3,a1
 8004096:	84aa                	mv	s1,a0
 8004098:	4dc8                	lw	a0,28(a1)
 800409a:	4554                	lw	a3,12(a0)
 800409c:	4d88                	lw	a0,24(a1)
 800409e:	85b2                	mv	a1,a2
 80040a0:	864a                	mv	a2,s2
 80040a2:	9682                	jalr	a3
 80040a4:	00a48423          	sb	a0,8(s1)
 80040a8:	0134a023          	sw	s3,0(s1)
 80040ac:	00193513          	seqz	a0,s2
 80040b0:	00a484a3          	sb	a0,9(s1)
 80040b4:	0004a223          	sw	zero,4(s1)
 80040b8:	4982                	lw	s3,0(sp)
 80040ba:	4912                	lw	s2,4(sp)
 80040bc:	44a2                	lw	s1,8(sp)
 80040be:	40b2                	lw	ra,12(sp)
 80040c0:	0141                	addi	sp,sp,16
 80040c2:	8082                	ret

080040c4 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h3a34938e29ce59dcE>:
 80040c4:	86ae                	mv	a3,a1
 80040c6:	85aa                	mv	a1,a0
 80040c8:	8532                	mv	a0,a2
 80040ca:	8636                	mv	a2,a3
 80040cc:	00000317          	auipc	t1,0x0
 80040d0:	d5830067          	jr	-680(t1) # 8003e24 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE>

080040d4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE>:
 80040d4:	7139                	addi	sp,sp,-64
 80040d6:	de06                	sw	ra,60(sp)
 80040d8:	dc26                	sw	s1,56(sp)
 80040da:	da4a                	sw	s2,52(sp)
 80040dc:	d84e                	sw	s3,48(sp)
 80040de:	d652                	sw	s4,44(sp)
 80040e0:	d456                	sw	s5,40(sp)
 80040e2:	d25a                	sw	s6,36(sp)
 80040e4:	d05e                	sw	s7,32(sp)
 80040e6:	ce62                	sw	s8,28(sp)
 80040e8:	cc66                	sw	s9,24(sp)
 80040ea:	ca6a                	sw	s10,20(sp)
 80040ec:	c86e                	sw	s11,16(sp)
 80040ee:	89ae                	mv	s3,a1
 80040f0:	84aa                	mv	s1,a0
 80040f2:	4d88                	lw	a0,24(a1)
 80040f4:	4dcc                	lw	a1,28(a1)
 80040f6:	4990                	lw	a2,16(a1)
 80040f8:	02700a13          	li	s4,39
 80040fc:	85d2                	mv	a1,s4
 80040fe:	9602                	jalr	a2
 8004100:	c119                	beqz	a0,8004106 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x32>
 8004102:	4485                	li	s1,1
 8004104:	aaa9                	j	800425e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x18a>
 8004106:	4d89                	li	s11,2
 8004108:	0004a903          	lw	s2,0(s1)
 800410c:	02100513          	li	a0,33
 8004110:	01254e63          	blt	a0,s2,800412c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x58>
 8004114:	4525                	li	a0,9
 8004116:	06a90763          	beq	s2,a0,8004184 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xb0>
 800411a:	4529                	li	a0,10
 800411c:	06a90763          	beq	s2,a0,800418a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xb6>
 8004120:	4535                	li	a0,13
 8004122:	00a91f63          	bne	s2,a0,8004140 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x6c>
 8004126:	07200913          	li	s2,114
 800412a:	a095                	j	800418e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xba>
 800412c:	02200513          	li	a0,34
 8004130:	04a90f63          	beq	s2,a0,800418e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xba>
 8004134:	05490d63          	beq	s2,s4,800418e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xba>
 8004138:	05c00513          	li	a0,92
 800413c:	04a90963          	beq	s2,a0,800418e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xba>
 8004140:	0800d537          	lui	a0,0x800d
 8004144:	e8050513          	addi	a0,a0,-384 # 800ce80 <str.j+0xb90>
 8004148:	85ca                	mv	a1,s2
 800414a:	00000097          	auipc	ra,0x0
 800414e:	25c080e7          	jalr	604(ra) # 80043a6 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E>
 8004152:	16051063          	bnez	a0,80042b2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1de>
 8004156:	01095513          	srli	a0,s2,0x10
 800415a:	12051163          	bnez	a0,800427c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1a8>
 800415e:	0800c537          	lui	a0,0x800c
 8004162:	36050593          	addi	a1,a0,864 # 800c360 <str.j+0x70>
 8004166:	0800c537          	lui	a0,0x800c
 800416a:	3b050693          	addi	a3,a0,944 # 800c3b0 <str.j+0xc0>
 800416e:	0800c537          	lui	a0,0x800c
 8004172:	4df50793          	addi	a5,a0,1247 # 800c4df <str.j+0x1ef>
 8004176:	02800613          	li	a2,40
 800417a:	12f00713          	li	a4,303
 800417e:	13c00813          	li	a6,316
 8004182:	a215                	j	80042a6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1d2>
 8004184:	07400913          	li	s2,116
 8004188:	a019                	j	800418e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xba>
 800418a:	06e00913          	li	s2,110
 800418e:	8aee                	mv	s5,s11
 8004190:	05c00b93          	li	s7,92
 8004194:	4485                	li	s1,1
 8004196:	4c0d                	li	s8,3
 8004198:	4a11                	li	s4,4
 800419a:	07500d13          	li	s10,117
 800419e:	4c95                	li	s9,5
 80041a0:	029a8663          	beq	s5,s1,80041cc <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xf8>
 80041a4:	03ba8763          	beq	s5,s11,80041d2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xfe>
 80041a8:	0b8a9263          	bne	s5,s8,800424c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x178>
 80041ac:	0ffb7513          	andi	a0,s6,255
 80041b0:	02addb63          	bge	s11,a0,80041e6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x112>
 80041b4:	05850e63          	beq	a0,s8,8004210 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x13c>
 80041b8:	07450463          	beq	a0,s4,8004220 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x14c>
 80041bc:	09951863          	bne	a0,s9,800424c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x178>
 80041c0:	f00b7513          	andi	a0,s6,-256
 80041c4:	00456b13          	ori	s6,a0,4
 80041c8:	8ae2                	mv	s5,s8
 80041ca:	a029                	j	80041d4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x100>
 80041cc:	4a81                	li	s5,0
 80041ce:	85ca                	mv	a1,s2
 80041d0:	a019                	j	80041d6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x102>
 80041d2:	8aa6                	mv	s5,s1
 80041d4:	85de                	mv	a1,s7
 80041d6:	0189a503          	lw	a0,24(s3)
 80041da:	01c9a603          	lw	a2,28(s3)
 80041de:	4a10                	lw	a2,16(a2)
 80041e0:	9602                	jalr	a2
 80041e2:	dd5d                	beqz	a0,80041a0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xcc>
 80041e4:	a8ad                	j	800425e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x18a>
 80041e6:	04950463          	beq	a0,s1,800422e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x15a>
 80041ea:	07b51163          	bne	a0,s11,800424c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x178>
 80041ee:	4632                	lw	a2,12(sp)
 80041f0:	00261513          	slli	a0,a2,0x2
 80041f4:	8971                	andi	a0,a0,28
 80041f6:	00a95533          	srl	a0,s2,a0
 80041fa:	893d                	andi	a0,a0,15
 80041fc:	45a9                	li	a1,10
 80041fe:	02b56e63          	bltu	a0,a1,800423a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x166>
 8004202:	05750593          	addi	a1,a0,87
 8004206:	ce0d                	beqz	a2,8004240 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x16c>
 8004208:	167d                	addi	a2,a2,-1
 800420a:	c632                	sw	a2,12(sp)
 800420c:	8ae2                	mv	s5,s8
 800420e:	b7e1                	j	80041d6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x102>
 8004210:	f00b7513          	andi	a0,s6,-256
 8004214:	00256b13          	ori	s6,a0,2
 8004218:	8ae2                	mv	s5,s8
 800421a:	07b00593          	li	a1,123
 800421e:	bf65                	j	80041d6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x102>
 8004220:	f00b7513          	andi	a0,s6,-256
 8004224:	00356b13          	ori	s6,a0,3
 8004228:	8ae2                	mv	s5,s8
 800422a:	85ea                	mv	a1,s10
 800422c:	b76d                	j	80041d6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x102>
 800422e:	f00b7b13          	andi	s6,s6,-256
 8004232:	8ae2                	mv	s5,s8
 8004234:	07d00593          	li	a1,125
 8004238:	bf79                	j	80041d6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x102>
 800423a:	03056593          	ori	a1,a0,48
 800423e:	f669                	bnez	a2,8004208 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x134>
 8004240:	f00b7513          	andi	a0,s6,-256
 8004244:	00156b13          	ori	s6,a0,1
 8004248:	8ae2                	mv	s5,s8
 800424a:	b771                	j	80041d6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x102>
 800424c:	0189a503          	lw	a0,24(s3)
 8004250:	01c9a583          	lw	a1,28(s3)
 8004254:	4990                	lw	a2,16(a1)
 8004256:	02700593          	li	a1,39
 800425a:	9602                	jalr	a2
 800425c:	84aa                	mv	s1,a0
 800425e:	8526                	mv	a0,s1
 8004260:	4dc2                	lw	s11,16(sp)
 8004262:	4d52                	lw	s10,20(sp)
 8004264:	4ce2                	lw	s9,24(sp)
 8004266:	4c72                	lw	s8,28(sp)
 8004268:	5b82                	lw	s7,32(sp)
 800426a:	5b12                	lw	s6,36(sp)
 800426c:	5aa2                	lw	s5,40(sp)
 800426e:	5a32                	lw	s4,44(sp)
 8004270:	59c2                	lw	s3,48(sp)
 8004272:	5952                	lw	s2,52(sp)
 8004274:	54e2                	lw	s1,56(sp)
 8004276:	50f2                	lw	ra,60(sp)
 8004278:	6121                	addi	sp,sp,64
 800427a:	8082                	ret
 800427c:	01195513          	srli	a0,s2,0x11
 8004280:	e155                	bnez	a0,8004324 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x250>
 8004282:	0800c537          	lui	a0,0x800c
 8004286:	61b50593          	addi	a1,a0,1563 # 800c61b <str.j+0x32b>
 800428a:	0800c537          	lui	a0,0x800c
 800428e:	65d50693          	addi	a3,a0,1629 # 800c65d <str.j+0x36d>
 8004292:	0800c537          	lui	a0,0x800c
 8004296:	6fb50793          	addi	a5,a0,1787 # 800c6fb <str.j+0x40b>
 800429a:	02100613          	li	a2,33
 800429e:	09e00713          	li	a4,158
 80042a2:	17d00813          	li	a6,381
 80042a6:	854a                	mv	a0,s2
 80042a8:	00000097          	auipc	ra,0x0
 80042ac:	204080e7          	jalr	516(ra) # 80044ac <_ZN4core7unicode9printable5check17ha9e204e73497ee46E>
 80042b0:	e96d                	bnez	a0,80043a2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x2ce>
 80042b2:	00196513          	ori	a0,s2,1
 80042b6:	00155593          	srli	a1,a0,0x1
 80042ba:	8d4d                	or	a0,a0,a1
 80042bc:	00255593          	srli	a1,a0,0x2
 80042c0:	8d4d                	or	a0,a0,a1
 80042c2:	00455593          	srli	a1,a0,0x4
 80042c6:	8d4d                	or	a0,a0,a1
 80042c8:	00855593          	srli	a1,a0,0x8
 80042cc:	8d4d                	or	a0,a0,a1
 80042ce:	01055593          	srli	a1,a0,0x10
 80042d2:	8d4d                	or	a0,a0,a1
 80042d4:	555555b7          	lui	a1,0x55555
 80042d8:	55558593          	addi	a1,a1,1365 # 55555555 <_sp+0x35550555>
 80042dc:	fff54513          	not	a0,a0
 80042e0:	00155613          	srli	a2,a0,0x1
 80042e4:	8df1                	and	a1,a1,a2
 80042e6:	8d0d                	sub	a0,a0,a1
 80042e8:	333335b7          	lui	a1,0x33333
 80042ec:	33358593          	addi	a1,a1,819 # 33333333 <_sp+0x1332e333>
 80042f0:	00b57633          	and	a2,a0,a1
 80042f4:	8109                	srli	a0,a0,0x2
 80042f6:	8d6d                	and	a0,a0,a1
 80042f8:	9532                	add	a0,a0,a2
 80042fa:	00455593          	srli	a1,a0,0x4
 80042fe:	952e                	add	a0,a0,a1
 8004300:	0f0f15b7          	lui	a1,0xf0f1
 8004304:	f0f58593          	addi	a1,a1,-241 # f0f0f0f <_data_lma+0x70e360f>
 8004308:	8d6d                	and	a0,a0,a1
 800430a:	010105b7          	lui	a1,0x1010
 800430e:	10158593          	addi	a1,a1,257 # 1010101 <__stack_size+0x100f901>
 8004312:	02b50533          	mul	a0,a0,a1
 8004316:	4b15                	li	s6,5
 8004318:	4a8d                	li	s5,3
 800431a:	8169                	srli	a0,a0,0x1a
 800431c:	00754513          	xori	a0,a0,7
 8004320:	c62a                	sw	a0,12(sp)
 8004322:	b5bd                	j	8004190 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xbc>
 8004324:	000e0537          	lui	a0,0xe0
 8004328:	1ef50513          	addi	a0,a0,495 # e01ef <__stack_size+0xdf9ef>
 800432c:	f92563e3          	bltu	a0,s2,80042b2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1de>
 8004330:	fffd0537          	lui	a0,0xfffd0
 8004334:	5e250513          	addi	a0,a0,1506 # fffd05e2 <_sp+0xdffcb5e2>
 8004338:	954a                	add	a0,a0,s2
 800433a:	000b05b7          	lui	a1,0xb0
 800433e:	6e258593          	addi	a1,a1,1762 # b06e2 <__stack_size+0xafee2>
 8004342:	f6b568e3          	bltu	a0,a1,80042b2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1de>
 8004346:	fffd1537          	lui	a0,0xfffd1
 800434a:	41f50513          	addi	a0,a0,1055 # fffd141f <_sp+0xdffcc41f>
 800434e:	954a                	add	a0,a0,s2
 8004350:	6585                	lui	a1,0x1
 8004352:	c1f58593          	addi	a1,a1,-993 # c1f <__stack_size+0x41f>
 8004356:	f4b56ee3          	bltu	a0,a1,80042b2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1de>
 800435a:	fffd3537          	lui	a0,0xfffd3
 800435e:	15e50513          	addi	a0,a0,350 # fffd315e <_sp+0xdffce15e>
 8004362:	954a                	add	a0,a0,s2
 8004364:	45b9                	li	a1,14
 8004366:	f4b566e3          	bltu	a0,a1,80042b2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1de>
 800436a:	00200537          	lui	a0,0x200
 800436e:	1579                	addi	a0,a0,-2
 8004370:	00a97533          	and	a0,s2,a0
 8004374:	0002c5b7          	lui	a1,0x2c
 8004378:	81e58593          	addi	a1,a1,-2018 # 2b81e <__stack_size+0x2b01e>
 800437c:	f2b50be3          	beq	a0,a1,80042b2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1de>
 8004380:	fffd6537          	lui	a0,0xfffd6
 8004384:	92950513          	addi	a0,a0,-1751 # fffd5929 <_sp+0xdffd0929>
 8004388:	954a                	add	a0,a0,s2
 800438a:	02900593          	li	a1,41
 800438e:	f2b562e3          	bltu	a0,a1,80042b2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1de>
 8004392:	fffd5537          	lui	a0,0xfffd5
 8004396:	8cb50513          	addi	a0,a0,-1845 # fffd48cb <_sp+0xdffcf8cb>
 800439a:	954a                	add	a0,a0,s2
 800439c:	45a9                	li	a1,10
 800439e:	f0a5fae3          	bgeu	a1,a0,80042b2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0x1de>
 80043a2:	4a85                	li	s5,1
 80043a4:	b3f5                	j	8004190 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h2cc1da221d4ff9eeE+0xbc>

080043a6 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E>:
 80043a6:	1141                	addi	sp,sp,-16
 80043a8:	c606                	sw	ra,12(sp)
 80043aa:	c426                	sw	s1,8(sp)
 80043ac:	7ff00613          	li	a2,2047
 80043b0:	00b66963          	bltu	a2,a1,80043c2 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0x1c>
 80043b4:	20000637          	lui	a2,0x20000
 80043b8:	1661                	addi	a2,a2,-8
 80043ba:	0035d693          	srli	a3,a1,0x3
 80043be:	8e75                	and	a2,a2,a3
 80043c0:	a8a5                	j	8004438 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0x92>
 80043c2:	0105d613          	srli	a2,a1,0x10
 80043c6:	e615                	bnez	a2,80043f2 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0x4c>
 80043c8:	0065d613          	srli	a2,a1,0x6
 80043cc:	fe060693          	addi	a3,a2,-32 # 1fffffe0 <_data_lma+0x17ff26e0>
 80043d0:	3df00613          	li	a2,991
 80043d4:	08d66763          	bltu	a2,a3,8004462 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xbc>
 80043d8:	00d50633          	add	a2,a0,a3
 80043dc:	11864683          	lbu	a3,280(a2)
 80043e0:	10452603          	lw	a2,260(a0)
 80043e4:	08c6f663          	bgeu	a3,a2,8004470 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xca>
 80043e8:	00369613          	slli	a2,a3,0x3
 80043ec:	10052503          	lw	a0,256(a0)
 80043f0:	a0a1                	j	8004438 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0x92>
 80043f2:	00c5d613          	srli	a2,a1,0xc
 80043f6:	ff060693          	addi	a3,a2,-16
 80043fa:	0ff00613          	li	a2,255
 80043fe:	06d66e63          	bltu	a2,a3,800447a <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xd4>
 8004402:	00d50633          	add	a2,a0,a3
 8004406:	4f864603          	lbu	a2,1272(a2)
 800440a:	061a                	slli	a2,a2,0x6
 800440c:	0065d693          	srli	a3,a1,0x6
 8004410:	03f6f693          	andi	a3,a3,63
 8004414:	8ed1                	or	a3,a3,a2
 8004416:	10c52603          	lw	a2,268(a0)
 800441a:	06c6f763          	bgeu	a3,a2,8004488 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xe2>
 800441e:	10852603          	lw	a2,264(a0)
 8004422:	9636                	add	a2,a2,a3
 8004424:	00064683          	lbu	a3,0(a2)
 8004428:	11452603          	lw	a2,276(a0)
 800442c:	06c6f363          	bgeu	a3,a2,8004492 <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xec>
 8004430:	00369613          	slli	a2,a3,0x3
 8004434:	11052503          	lw	a0,272(a0)
 8004438:	00c504b3          	add	s1,a0,a2
 800443c:	03f5f613          	andi	a2,a1,63
 8004440:	4505                	li	a0,1
 8004442:	4581                	li	a1,0
 8004444:	00006097          	auipc	ra,0x6
 8004448:	4fc080e7          	jalr	1276(ra) # 800a940 <__ashldi3>
 800444c:	40d0                	lw	a2,4(s1)
 800444e:	8df1                	and	a1,a1,a2
 8004450:	4090                	lw	a2,0(s1)
 8004452:	8d71                	and	a0,a0,a2
 8004454:	8d4d                	or	a0,a0,a1
 8004456:	00a03533          	snez	a0,a0
 800445a:	44a2                	lw	s1,8(sp)
 800445c:	40b2                	lw	ra,12(sp)
 800445e:	0141                	addi	sp,sp,16
 8004460:	8082                	ret
 8004462:	0800c537          	lui	a0,0x800c
 8004466:	31050513          	addi	a0,a0,784 # 800c310 <str.j+0x20>
 800446a:	3e000613          	li	a2,992
 800446e:	a035                	j	800449a <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xf4>
 8004470:	0800c537          	lui	a0,0x800c
 8004474:	32050513          	addi	a0,a0,800 # 800c320 <str.j+0x30>
 8004478:	a00d                	j	800449a <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xf4>
 800447a:	0800c537          	lui	a0,0x800c
 800447e:	33050513          	addi	a0,a0,816 # 800c330 <str.j+0x40>
 8004482:	10000613          	li	a2,256
 8004486:	a811                	j	800449a <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xf4>
 8004488:	0800c537          	lui	a0,0x800c
 800448c:	34050513          	addi	a0,a0,832 # 800c340 <str.j+0x50>
 8004490:	a029                	j	800449a <_ZN4core7unicode9bool_trie8BoolTrie6lookup17h35a609aac8cea223E+0xf4>
 8004492:	0800c537          	lui	a0,0x800c
 8004496:	35050513          	addi	a0,a0,848 # 800c350 <str.j+0x60>
 800449a:	85b6                	mv	a1,a3
 800449c:	fffff097          	auipc	ra,0xfffff
 80044a0:	a24080e7          	jalr	-1500(ra) # 8002ec0 <_ZN4core9panicking18panic_bounds_check17h946762cd0671aec9E>
 80044a4:	00007097          	auipc	ra,0x7
 80044a8:	14c080e7          	jalr	332(ra) # 800b5f0 <abort>

080044ac <_ZN4core7unicode9printable5check17ha9e204e73497ee46E>:
 80044ac:	1141                	addi	sp,sp,-16
 80044ae:	c606                	sw	ra,12(sp)
 80044b0:	62c1                	lui	t0,0x10
 80044b2:	ce21                	beqz	a2,800450a <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x5e>
 80044b4:	0606                	slli	a2,a2,0x1
 80044b6:	00c58333          	add	t1,a1,a2
 80044ba:	f0028613          	addi	a2,t0,-256 # ff00 <__stack_size+0xf700>
 80044be:	8e69                	and	a2,a2,a0
 80044c0:	00865393          	srli	t2,a2,0x8
 80044c4:	0ff57f13          	andi	t5,a0,255
 80044c8:	4e01                	li	t3,0
 80044ca:	0015c603          	lbu	a2,1(a1)
 80044ce:	00ce08b3          	add	a7,t3,a2
 80044d2:	00258e93          	addi	t4,a1,2
 80044d6:	0005c583          	lbu	a1,0(a1)
 80044da:	02759263          	bne	a1,t2,80044fe <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x52>
 80044de:	0bc8e363          	bltu	a7,t3,8004584 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xd8>
 80044e2:	0b176b63          	bltu	a4,a7,8004598 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xec>
 80044e6:	01c685b3          	add	a1,a3,t3
 80044ea:	ce01                	beqz	a2,8004502 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x56>
 80044ec:	167d                	addi	a2,a2,-1
 80044ee:	00158e13          	addi	t3,a1,1
 80044f2:	0005cf83          	lbu	t6,0(a1)
 80044f6:	85f2                	mv	a1,t3
 80044f8:	ffef99e3          	bne	t6,t5,80044ea <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x3e>
 80044fc:	a08d                	j	800455e <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb2>
 80044fe:	00b3e663          	bltu	t2,a1,800450a <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x5e>
 8004502:	8e46                	mv	t3,a7
 8004504:	85f6                	mv	a1,t4
 8004506:	fc6e92e3          	bne	t4,t1,80044ca <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x1e>
 800450a:	04080c63          	beqz	a6,8004562 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb6>
 800450e:	010788b3          	add	a7,a5,a6
 8004512:	fff28593          	addi	a1,t0,-1
 8004516:	00b57633          	and	a2,a0,a1
 800451a:	4505                	li	a0,1
 800451c:	587d                	li	a6,-1
 800451e:	00178693          	addi	a3,a5,1
 8004522:	0007c703          	lbu	a4,0(a5)
 8004526:	01871593          	slli	a1,a4,0x18
 800452a:	85e1                	srai	a1,a1,0x18
 800452c:	00b85763          	bge	a6,a1,800453a <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x8e>
 8004530:	87b6                	mv	a5,a3
 8004532:	8e19                	sub	a2,a2,a4
 8004534:	02065063          	bgez	a2,8004554 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xa8>
 8004538:	a035                	j	8004564 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb8>
 800453a:	03168963          	beq	a3,a7,800456c <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xc0>
 800453e:	07f5f593          	andi	a1,a1,127
 8004542:	05a2                	slli	a1,a1,0x8
 8004544:	0017c683          	lbu	a3,1(a5)
 8004548:	00d5e733          	or	a4,a1,a3
 800454c:	0789                	addi	a5,a5,2
 800454e:	8e19                	sub	a2,a2,a4
 8004550:	00064a63          	bltz	a2,8004564 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb8>
 8004554:	00154513          	xori	a0,a0,1
 8004558:	fd1793e3          	bne	a5,a7,800451e <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0x72>
 800455c:	a021                	j	8004564 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb8>
 800455e:	4501                	li	a0,0
 8004560:	a011                	j	8004564 <_ZN4core7unicode9printable5check17ha9e204e73497ee46E+0xb8>
 8004562:	4505                	li	a0,1
 8004564:	8905                	andi	a0,a0,1
 8004566:	40b2                	lw	ra,12(sp)
 8004568:	0141                	addi	sp,sp,16
 800456a:	8082                	ret
 800456c:	0800c537          	lui	a0,0x800c
 8004570:	f2050513          	addi	a0,a0,-224 # 800bf20 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x6c8>
 8004574:	fffff097          	auipc	ra,0xfffff
 8004578:	906080e7          	jalr	-1786(ra) # 8002e7a <_ZN4core9panicking5panic17h53ca63c6ac6312f8E>
 800457c:	00007097          	auipc	ra,0x7
 8004580:	074080e7          	jalr	116(ra) # 800b5f0 <abort>
 8004584:	8572                	mv	a0,t3
 8004586:	85c6                	mv	a1,a7
 8004588:	fffff097          	auipc	ra,0xfffff
 800458c:	c18080e7          	jalr	-1000(ra) # 80031a0 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 8004590:	00007097          	auipc	ra,0x7
 8004594:	060080e7          	jalr	96(ra) # 800b5f0 <abort>
 8004598:	8546                	mv	a0,a7
 800459a:	85ba                	mv	a1,a4
 800459c:	fffff097          	auipc	ra,0xfffff
 80045a0:	bb8080e7          	jalr	-1096(ra) # 8003154 <_ZN4core5slice20slice_index_len_fail17hedb5bb240677a6b7E>
 80045a4:	00007097          	auipc	ra,0x7
 80045a8:	04c080e7          	jalr	76(ra) # 800b5f0 <abort>

080045ac <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E>:
 80045ac:	7175                	addi	sp,sp,-144
 80045ae:	c706                	sw	ra,140(sp)
 80045b0:	882e                	mv	a6,a1
 80045b2:	418c                	lw	a1,0(a1)
 80045b4:	0105f613          	andi	a2,a1,16
 80045b8:	ee01                	bnez	a2,80045d0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x24>
 80045ba:	4108                	lw	a0,0(a0)
 80045bc:	0205f593          	andi	a1,a1,32
 80045c0:	ed8d                	bnez	a1,80045fa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x4e>
 80045c2:	4585                	li	a1,1
 80045c4:	8642                	mv	a2,a6
 80045c6:	00000097          	auipc	ra,0x0
 80045ca:	3a6080e7          	jalr	934(ra) # 800496c <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>
 80045ce:	a041                	j	800464e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0xa2>
 80045d0:	4108                	lw	a0,0(a0)
 80045d2:	46a9                	li	a3,10
 80045d4:	0070                	addi	a2,sp,12
 80045d6:	4581                	li	a1,0
 80045d8:	00f57713          	andi	a4,a0,15
 80045dc:	00d76563          	bltu	a4,a3,80045e6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x3a>
 80045e0:	05770713          	addi	a4,a4,87
 80045e4:	a019                	j	80045ea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x3e>
 80045e6:	03076713          	ori	a4,a4,48
 80045ea:	00b607b3          	add	a5,a2,a1
 80045ee:	06e78fa3          	sb	a4,127(a5)
 80045f2:	15fd                	addi	a1,a1,-1
 80045f4:	8111                	srli	a0,a0,0x4
 80045f6:	f16d                	bnez	a0,80045d8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x2c>
 80045f8:	a025                	j	8004620 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x74>
 80045fa:	46a9                	li	a3,10
 80045fc:	0070                	addi	a2,sp,12
 80045fe:	4581                	li	a1,0
 8004600:	00f57713          	andi	a4,a0,15
 8004604:	00d76563          	bltu	a4,a3,800460e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x62>
 8004608:	03770713          	addi	a4,a4,55
 800460c:	a019                	j	8004612 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x66>
 800460e:	03076713          	ori	a4,a4,48
 8004612:	00b607b3          	add	a5,a2,a1
 8004616:	06e78fa3          	sb	a4,127(a5)
 800461a:	15fd                	addi	a1,a1,-1
 800461c:	8111                	srli	a0,a0,0x4
 800461e:	f16d                	bnez	a0,8004600 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0x54>
 8004620:	08058513          	addi	a0,a1,128
 8004624:	08100693          	li	a3,129
 8004628:	02d57663          	bgeu	a0,a3,8004654 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h4ad837c30b835d03E+0xa8>
 800462c:	00b60533          	add	a0,a2,a1
 8004630:	40b007b3          	neg	a5,a1
 8004634:	08050713          	addi	a4,a0,128
 8004638:	0800c537          	lui	a0,0x800c
 800463c:	19c50613          	addi	a2,a0,412 # 800c19c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x944>
 8004640:	4585                	li	a1,1
 8004642:	4689                	li	a3,2
 8004644:	8542                	mv	a0,a6
 8004646:	fffff097          	auipc	ra,0xfffff
 800464a:	576080e7          	jalr	1398(ra) # 8003bbc <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 800464e:	40ba                	lw	ra,140(sp)
 8004650:	6149                	addi	sp,sp,144
 8004652:	8082                	ret
 8004654:	08000593          	li	a1,128
 8004658:	fffff097          	auipc	ra,0xfffff
 800465c:	b48080e7          	jalr	-1208(ra) # 80031a0 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 8004660:	00007097          	auipc	ra,0x7
 8004664:	f90080e7          	jalr	-112(ra) # 800b5f0 <abort>

08004668 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE>:
 8004668:	7175                	addi	sp,sp,-144
 800466a:	c706                	sw	ra,140(sp)
 800466c:	882e                	mv	a6,a1
 800466e:	00054683          	lbu	a3,0(a0)
 8004672:	4529                	li	a0,10
 8004674:	0070                	addi	a2,sp,12
 8004676:	4581                	li	a1,0
 8004678:	00f6f713          	andi	a4,a3,15
 800467c:	00a76563          	bltu	a4,a0,8004686 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE+0x1e>
 8004680:	05770713          	addi	a4,a4,87
 8004684:	a019                	j	800468a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE+0x22>
 8004686:	03076713          	ori	a4,a4,48
 800468a:	00b607b3          	add	a5,a2,a1
 800468e:	06e78fa3          	sb	a4,127(a5)
 8004692:	15fd                	addi	a1,a1,-1
 8004694:	8291                	srli	a3,a3,0x4
 8004696:	8abd                	andi	a3,a3,15
 8004698:	f2e5                	bnez	a3,8004678 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE+0x10>
 800469a:	08058513          	addi	a0,a1,128
 800469e:	08100693          	li	a3,129
 80046a2:	02d57663          	bgeu	a0,a3,80046ce <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17heed14ddcd875f85bE+0x66>
 80046a6:	00b60533          	add	a0,a2,a1
 80046aa:	40b007b3          	neg	a5,a1
 80046ae:	08050713          	addi	a4,a0,128
 80046b2:	0800c537          	lui	a0,0x800c
 80046b6:	19c50613          	addi	a2,a0,412 # 800c19c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x944>
 80046ba:	4585                	li	a1,1
 80046bc:	4689                	li	a3,2
 80046be:	8542                	mv	a0,a6
 80046c0:	fffff097          	auipc	ra,0xfffff
 80046c4:	4fc080e7          	jalr	1276(ra) # 8003bbc <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 80046c8:	40ba                	lw	ra,140(sp)
 80046ca:	6149                	addi	sp,sp,144
 80046cc:	8082                	ret
 80046ce:	08000593          	li	a1,128
 80046d2:	fffff097          	auipc	ra,0xfffff
 80046d6:	ace080e7          	jalr	-1330(ra) # 80031a0 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 80046da:	00007097          	auipc	ra,0x7
 80046de:	f16080e7          	jalr	-234(ra) # 800b5f0 <abort>

080046e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E>:
 80046e2:	7175                	addi	sp,sp,-144
 80046e4:	c706                	sw	ra,140(sp)
 80046e6:	882e                	mv	a6,a1
 80046e8:	00054683          	lbu	a3,0(a0)
 80046ec:	4529                	li	a0,10
 80046ee:	0070                	addi	a2,sp,12
 80046f0:	4581                	li	a1,0
 80046f2:	00f6f713          	andi	a4,a3,15
 80046f6:	00a76563          	bltu	a4,a0,8004700 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E+0x1e>
 80046fa:	03770713          	addi	a4,a4,55
 80046fe:	a019                	j	8004704 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E+0x22>
 8004700:	03076713          	ori	a4,a4,48
 8004704:	00b607b3          	add	a5,a2,a1
 8004708:	06e78fa3          	sb	a4,127(a5)
 800470c:	15fd                	addi	a1,a1,-1
 800470e:	8291                	srli	a3,a3,0x4
 8004710:	8abd                	andi	a3,a3,15
 8004712:	f2e5                	bnez	a3,80046f2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E+0x10>
 8004714:	08058513          	addi	a0,a1,128
 8004718:	08100693          	li	a3,129
 800471c:	02d57663          	bgeu	a0,a3,8004748 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h33ff4d4021f61f61E+0x66>
 8004720:	00b60533          	add	a0,a2,a1
 8004724:	40b007b3          	neg	a5,a1
 8004728:	08050713          	addi	a4,a0,128
 800472c:	0800c537          	lui	a0,0x800c
 8004730:	19c50613          	addi	a2,a0,412 # 800c19c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x944>
 8004734:	4585                	li	a1,1
 8004736:	4689                	li	a3,2
 8004738:	8542                	mv	a0,a6
 800473a:	fffff097          	auipc	ra,0xfffff
 800473e:	482080e7          	jalr	1154(ra) # 8003bbc <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 8004742:	40ba                	lw	ra,140(sp)
 8004744:	6149                	addi	sp,sp,144
 8004746:	8082                	ret
 8004748:	08000593          	li	a1,128
 800474c:	fffff097          	auipc	ra,0xfffff
 8004750:	a54080e7          	jalr	-1452(ra) # 80031a0 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 8004754:	00007097          	auipc	ra,0x7
 8004758:	e9c080e7          	jalr	-356(ra) # 800b5f0 <abort>

0800475c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE>:
 800475c:	7175                	addi	sp,sp,-144
 800475e:	c706                	sw	ra,140(sp)
 8004760:	882e                	mv	a6,a1
 8004762:	4108                	lw	a0,0(a0)
 8004764:	46a9                	li	a3,10
 8004766:	0070                	addi	a2,sp,12
 8004768:	4581                	li	a1,0
 800476a:	00f57713          	andi	a4,a0,15
 800476e:	00d76563          	bltu	a4,a3,8004778 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0x1c>
 8004772:	05770713          	addi	a4,a4,87
 8004776:	a019                	j	800477c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0x20>
 8004778:	03076713          	ori	a4,a4,48
 800477c:	00b607b3          	add	a5,a2,a1
 8004780:	06e78fa3          	sb	a4,127(a5)
 8004784:	15fd                	addi	a1,a1,-1
 8004786:	8111                	srli	a0,a0,0x4
 8004788:	f16d                	bnez	a0,800476a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0xe>
 800478a:	08058513          	addi	a0,a1,128
 800478e:	08100693          	li	a3,129
 8004792:	02d57663          	bgeu	a0,a3,80047be <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hb2119167a92723afE+0x62>
 8004796:	00b60533          	add	a0,a2,a1
 800479a:	40b007b3          	neg	a5,a1
 800479e:	08050713          	addi	a4,a0,128
 80047a2:	0800c537          	lui	a0,0x800c
 80047a6:	19c50613          	addi	a2,a0,412 # 800c19c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x944>
 80047aa:	4585                	li	a1,1
 80047ac:	4689                	li	a3,2
 80047ae:	8542                	mv	a0,a6
 80047b0:	fffff097          	auipc	ra,0xfffff
 80047b4:	40c080e7          	jalr	1036(ra) # 8003bbc <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 80047b8:	40ba                	lw	ra,140(sp)
 80047ba:	6149                	addi	sp,sp,144
 80047bc:	8082                	ret
 80047be:	08000593          	li	a1,128
 80047c2:	fffff097          	auipc	ra,0xfffff
 80047c6:	9de080e7          	jalr	-1570(ra) # 80031a0 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 80047ca:	00007097          	auipc	ra,0x7
 80047ce:	e26080e7          	jalr	-474(ra) # 800b5f0 <abort>

080047d2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E>:
 80047d2:	7175                	addi	sp,sp,-144
 80047d4:	c706                	sw	ra,140(sp)
 80047d6:	882e                	mv	a6,a1
 80047d8:	4108                	lw	a0,0(a0)
 80047da:	46a9                	li	a3,10
 80047dc:	0070                	addi	a2,sp,12
 80047de:	4581                	li	a1,0
 80047e0:	00f57713          	andi	a4,a0,15
 80047e4:	00d76563          	bltu	a4,a3,80047ee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0x1c>
 80047e8:	03770713          	addi	a4,a4,55
 80047ec:	a019                	j	80047f2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0x20>
 80047ee:	03076713          	ori	a4,a4,48
 80047f2:	00b607b3          	add	a5,a2,a1
 80047f6:	06e78fa3          	sb	a4,127(a5)
 80047fa:	15fd                	addi	a1,a1,-1
 80047fc:	8111                	srli	a0,a0,0x4
 80047fe:	f16d                	bnez	a0,80047e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0xe>
 8004800:	08058513          	addi	a0,a1,128
 8004804:	08100693          	li	a3,129
 8004808:	02d57663          	bgeu	a0,a3,8004834 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hc44988ae29d24532E+0x62>
 800480c:	00b60533          	add	a0,a2,a1
 8004810:	40b007b3          	neg	a5,a1
 8004814:	08050713          	addi	a4,a0,128
 8004818:	0800c537          	lui	a0,0x800c
 800481c:	19c50613          	addi	a2,a0,412 # 800c19c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x944>
 8004820:	4585                	li	a1,1
 8004822:	4689                	li	a3,2
 8004824:	8542                	mv	a0,a6
 8004826:	fffff097          	auipc	ra,0xfffff
 800482a:	396080e7          	jalr	918(ra) # 8003bbc <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 800482e:	40ba                	lw	ra,140(sp)
 8004830:	6149                	addi	sp,sp,144
 8004832:	8082                	ret
 8004834:	08000593          	li	a1,128
 8004838:	fffff097          	auipc	ra,0xfffff
 800483c:	968080e7          	jalr	-1688(ra) # 80031a0 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 8004840:	00007097          	auipc	ra,0x7
 8004844:	db0080e7          	jalr	-592(ra) # 800b5f0 <abort>

08004848 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E>:
 8004848:	7175                	addi	sp,sp,-144
 800484a:	c706                	sw	ra,140(sp)
 800484c:	882e                	mv	a6,a1
 800484e:	07f00613          	li	a2,127
 8004852:	4154                	lw	a3,4(a0)
 8004854:	411c                	lw	a5,0(a0)
 8004856:	557d                	li	a0,-1
 8004858:	42a9                	li	t0,10
 800485a:	00c10893          	addi	a7,sp,12
 800485e:	02a60a63          	beq	a2,a0,8004892 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E+0x4a>
 8004862:	00f7f593          	andi	a1,a5,15
 8004866:	0055e563          	bltu	a1,t0,8004870 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E+0x28>
 800486a:	05758593          	addi	a1,a1,87
 800486e:	a019                	j	8004874 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E+0x2c>
 8004870:	0305e593          	ori	a1,a1,48
 8004874:	00c88733          	add	a4,a7,a2
 8004878:	00b70023          	sb	a1,0(a4)
 800487c:	0047d593          	srli	a1,a5,0x4
 8004880:	01c69713          	slli	a4,a3,0x1c
 8004884:	00e5e7b3          	or	a5,a1,a4
 8004888:	167d                	addi	a2,a2,-1
 800488a:	8291                	srli	a3,a3,0x4
 800488c:	00d7e5b3          	or	a1,a5,a3
 8004890:	f5f9                	bnez	a1,800485e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E+0x16>
 8004892:	00160513          	addi	a0,a2,1
 8004896:	08100593          	li	a1,129
 800489a:	02b57663          	bgeu	a0,a1,80048c6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h1aa219e6cfd94b25E+0x7e>
 800489e:	00a88733          	add	a4,a7,a0
 80048a2:	08000593          	li	a1,128
 80048a6:	40a587b3          	sub	a5,a1,a0
 80048aa:	0800c537          	lui	a0,0x800c
 80048ae:	19c50613          	addi	a2,a0,412 # 800c19c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x944>
 80048b2:	4585                	li	a1,1
 80048b4:	4689                	li	a3,2
 80048b6:	8542                	mv	a0,a6
 80048b8:	fffff097          	auipc	ra,0xfffff
 80048bc:	304080e7          	jalr	772(ra) # 8003bbc <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 80048c0:	40ba                	lw	ra,140(sp)
 80048c2:	6149                	addi	sp,sp,144
 80048c4:	8082                	ret
 80048c6:	08000593          	li	a1,128
 80048ca:	fffff097          	auipc	ra,0xfffff
 80048ce:	8d6080e7          	jalr	-1834(ra) # 80031a0 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 80048d2:	00007097          	auipc	ra,0x7
 80048d6:	d1e080e7          	jalr	-738(ra) # 800b5f0 <abort>

080048da <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE>:
 80048da:	7175                	addi	sp,sp,-144
 80048dc:	c706                	sw	ra,140(sp)
 80048de:	882e                	mv	a6,a1
 80048e0:	07f00613          	li	a2,127
 80048e4:	4154                	lw	a3,4(a0)
 80048e6:	411c                	lw	a5,0(a0)
 80048e8:	557d                	li	a0,-1
 80048ea:	42a9                	li	t0,10
 80048ec:	00c10893          	addi	a7,sp,12
 80048f0:	02a60a63          	beq	a2,a0,8004924 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE+0x4a>
 80048f4:	00f7f593          	andi	a1,a5,15
 80048f8:	0055e563          	bltu	a1,t0,8004902 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE+0x28>
 80048fc:	03758593          	addi	a1,a1,55
 8004900:	a019                	j	8004906 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE+0x2c>
 8004902:	0305e593          	ori	a1,a1,48
 8004906:	00c88733          	add	a4,a7,a2
 800490a:	00b70023          	sb	a1,0(a4)
 800490e:	0047d593          	srli	a1,a5,0x4
 8004912:	01c69713          	slli	a4,a3,0x1c
 8004916:	00e5e7b3          	or	a5,a1,a4
 800491a:	167d                	addi	a2,a2,-1
 800491c:	8291                	srli	a3,a3,0x4
 800491e:	00d7e5b3          	or	a1,a5,a3
 8004922:	f5f9                	bnez	a1,80048f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE+0x16>
 8004924:	00160513          	addi	a0,a2,1
 8004928:	08100593          	li	a1,129
 800492c:	02b57663          	bgeu	a0,a1,8004958 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h93ab4183a6d5feaaE+0x7e>
 8004930:	00a88733          	add	a4,a7,a0
 8004934:	08000593          	li	a1,128
 8004938:	40a587b3          	sub	a5,a1,a0
 800493c:	0800c537          	lui	a0,0x800c
 8004940:	19c50613          	addi	a2,a0,412 # 800c19c <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x944>
 8004944:	4585                	li	a1,1
 8004946:	4689                	li	a3,2
 8004948:	8542                	mv	a0,a6
 800494a:	fffff097          	auipc	ra,0xfffff
 800494e:	272080e7          	jalr	626(ra) # 8003bbc <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 8004952:	40ba                	lw	ra,140(sp)
 8004954:	6149                	addi	sp,sp,144
 8004956:	8082                	ret
 8004958:	08000593          	li	a1,128
 800495c:	fffff097          	auipc	ra,0xfffff
 8004960:	844080e7          	jalr	-1980(ra) # 80031a0 <_ZN4core5slice22slice_index_order_fail17h604ca25004a88762E>
 8004964:	00007097          	auipc	ra,0x7
 8004968:	c8c080e7          	jalr	-884(ra) # 800b5f0 <abort>

0800496c <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>:
 800496c:	7179                	addi	sp,sp,-48
 800496e:	d606                	sw	ra,44(sp)
 8004970:	d426                	sw	s1,40(sp)
 8004972:	8832                	mv	a6,a2
 8004974:	00455613          	srli	a2,a0,0x4
 8004978:	27100693          	li	a3,625
 800497c:	0ad66d63          	bltu	a2,a3,8004a36 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0xca>
 8004980:	d1b71637          	lui	a2,0xd1b71
 8004984:	75960313          	addi	t1,a2,1881 # d1b71759 <_sp+0xb1b6c759>
 8004988:	6609                	lui	a2,0x2
 800498a:	71060393          	addi	t2,a2,1808 # 2710 <__stack_size+0x1f10>
 800498e:	51eb8637          	lui	a2,0x51eb8
 8004992:	51f60e13          	addi	t3,a2,1311 # 51eb851f <_sp+0x31eb351f>
 8004996:	06400893          	li	a7,100
 800499a:	0800c637          	lui	a2,0x800c
 800499e:	19e60f13          	addi	t5,a2,414 # 800c19e <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x946>
 80049a2:	00110293          	addi	t0,sp,1
 80049a6:	05f5e637          	lui	a2,0x5f5e
 80049aa:	0ff60e93          	addi	t4,a2,255 # 5f5e0ff <__stack_size+0x5f5d8ff>
 80049ae:	4601                	li	a2,0
 80049b0:	8faa                	mv	t6,a0
 80049b2:	02653533          	mulhu	a0,a0,t1
 80049b6:	8135                	srli	a0,a0,0xd
 80049b8:	02750733          	mul	a4,a0,t2
 80049bc:	40ef8733          	sub	a4,t6,a4
 80049c0:	03c736b3          	mulhu	a3,a4,t3
 80049c4:	8295                	srli	a3,a3,0x5
 80049c6:	031687b3          	mul	a5,a3,a7
 80049ca:	8f1d                	sub	a4,a4,a5
 80049cc:	0706                	slli	a4,a4,0x1
 80049ce:	0686                	slli	a3,a3,0x1
 80049d0:	977a                	add	a4,a4,t5
 80049d2:	96fa                	add	a3,a3,t5
 80049d4:	00c287b3          	add	a5,t0,a2
 80049d8:	00168483          	lb	s1,1(a3)
 80049dc:	02978223          	sb	s1,36(a5)
 80049e0:	0006c683          	lbu	a3,0(a3)
 80049e4:	02d781a3          	sb	a3,35(a5)
 80049e8:	00170683          	lb	a3,1(a4)
 80049ec:	02d78323          	sb	a3,38(a5)
 80049f0:	00074683          	lbu	a3,0(a4)
 80049f4:	02d782a3          	sb	a3,37(a5)
 80049f8:	1671                	addi	a2,a2,-4
 80049fa:	fbfeebe3          	bltu	t4,t6,80049b0 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x44>
 80049fe:	02760613          	addi	a2,a2,39
 8004a02:	06300693          	li	a3,99
 8004a06:	02a6ce63          	blt	a3,a0,8004a42 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0xd6>
 8004a0a:	86aa                	mv	a3,a0
 8004a0c:	4525                	li	a0,9
 8004a0e:	08d55163          	bge	a0,a3,8004a90 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x124>
 8004a12:	0800c537          	lui	a0,0x800c
 8004a16:	19e50513          	addi	a0,a0,414 # 800c19e <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x946>
 8004a1a:	0686                	slli	a3,a3,0x1
 8004a1c:	96aa                	add	a3,a3,a0
 8004a1e:	ffe60513          	addi	a0,a2,-2
 8004a22:	00110613          	addi	a2,sp,1
 8004a26:	962a                	add	a2,a2,a0
 8004a28:	00168703          	lb	a4,1(a3)
 8004a2c:	00e600a3          	sb	a4,1(a2)
 8004a30:	0006c683          	lbu	a3,0(a3)
 8004a34:	a0ad                	j	8004a9e <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x132>
 8004a36:	02700613          	li	a2,39
 8004a3a:	06300693          	li	a3,99
 8004a3e:	fca6d6e3          	bge	a3,a0,8004a0a <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0x9e>
 8004a42:	6741                	lui	a4,0x10
 8004a44:	fff70693          	addi	a3,a4,-1 # ffff <__stack_size+0xf7ff>
 8004a48:	8ee9                	and	a3,a3,a0
 8004a4a:	51eb87b7          	lui	a5,0x51eb8
 8004a4e:	51f78793          	addi	a5,a5,1311 # 51eb851f <_sp+0x31eb351f>
 8004a52:	02f6b6b3          	mulhu	a3,a3,a5
 8004a56:	8295                	srli	a3,a3,0x5
 8004a58:	06400793          	li	a5,100
 8004a5c:	02f687b3          	mul	a5,a3,a5
 8004a60:	8d1d                	sub	a0,a0,a5
 8004a62:	0506                	slli	a0,a0,0x1
 8004a64:	1779                	addi	a4,a4,-2
 8004a66:	8d79                	and	a0,a0,a4
 8004a68:	0800c737          	lui	a4,0x800c
 8004a6c:	19e70713          	addi	a4,a4,414 # 800c19e <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x946>
 8004a70:	953a                	add	a0,a0,a4
 8004a72:	1679                	addi	a2,a2,-2
 8004a74:	00110713          	addi	a4,sp,1
 8004a78:	9732                	add	a4,a4,a2
 8004a7a:	00150783          	lb	a5,1(a0)
 8004a7e:	00f700a3          	sb	a5,1(a4)
 8004a82:	00054503          	lbu	a0,0(a0)
 8004a86:	00a70023          	sb	a0,0(a4)
 8004a8a:	4525                	li	a0,9
 8004a8c:	f8d543e3          	blt	a0,a3,8004a12 <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE+0xa6>
 8004a90:	fff60513          	addi	a0,a2,-1
 8004a94:	00110613          	addi	a2,sp,1
 8004a98:	962a                	add	a2,a2,a0
 8004a9a:	03068693          	addi	a3,a3,48
 8004a9e:	00d60023          	sb	a3,0(a2)
 8004aa2:	00110613          	addi	a2,sp,1
 8004aa6:	00a60733          	add	a4,a2,a0
 8004aaa:	02700613          	li	a2,39
 8004aae:	40a607b3          	sub	a5,a2,a0
 8004ab2:	0800c537          	lui	a0,0x800c
 8004ab6:	d6850613          	addi	a2,a0,-664 # 800bd68 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x510>
 8004aba:	8542                	mv	a0,a6
 8004abc:	4681                	li	a3,0
 8004abe:	fffff097          	auipc	ra,0xfffff
 8004ac2:	0fe080e7          	jalr	254(ra) # 8003bbc <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 8004ac6:	54a2                	lw	s1,40(sp)
 8004ac8:	50b2                	lw	ra,44(sp)
 8004aca:	6145                	addi	sp,sp,48
 8004acc:	8082                	ret

08004ace <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17heb4d046d241d78d0E>:
 8004ace:	862e                	mv	a2,a1
 8004ad0:	00054503          	lbu	a0,0(a0)
 8004ad4:	4585                	li	a1,1
 8004ad6:	00000317          	auipc	t1,0x0
 8004ada:	e9630067          	jr	-362(t1) # 800496c <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

08004ade <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h33b3bbdbc74b88baE>:
 8004ade:	862e                	mv	a2,a1
 8004ae0:	4108                	lw	a0,0(a0)
 8004ae2:	55fd                	li	a1,-1
 8004ae4:	00a5a5b3          	slt	a1,a1,a0
 8004ae8:	41f55693          	srai	a3,a0,0x1f
 8004aec:	9536                	add	a0,a0,a3
 8004aee:	8d35                	xor	a0,a0,a3
 8004af0:	00000317          	auipc	t1,0x0
 8004af4:	e7c30067          	jr	-388(t1) # 800496c <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

08004af8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17ha7805aa8d849f46cE>:
 8004af8:	862e                	mv	a2,a1
 8004afa:	4108                	lw	a0,0(a0)
 8004afc:	4585                	li	a1,1
 8004afe:	00000317          	auipc	t1,0x0
 8004b02:	e6e30067          	jr	-402(t1) # 800496c <_ZN4core3fmt3num3imp7fmt_u3217h4a6591ec3ef714beE>

08004b06 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE>:
 8004b06:	711d                	addi	sp,sp,-96
 8004b08:	ce86                	sw	ra,92(sp)
 8004b0a:	cca6                	sw	s1,88(sp)
 8004b0c:	caca                	sw	s2,84(sp)
 8004b0e:	c8ce                	sw	s3,80(sp)
 8004b10:	c6d2                	sw	s4,76(sp)
 8004b12:	c4d6                	sw	s5,72(sp)
 8004b14:	c2da                	sw	s6,68(sp)
 8004b16:	c0de                	sw	s7,64(sp)
 8004b18:	de62                	sw	s8,60(sp)
 8004b1a:	dc66                	sw	s9,56(sp)
 8004b1c:	da6a                	sw	s10,52(sp)
 8004b1e:	d86e                	sw	s11,48(sp)
 8004b20:	89b6                	mv	s3,a3
 8004b22:	8932                	mv	s2,a2
 8004b24:	8cae                	mv	s9,a1
 8004b26:	8aaa                	mv	s5,a0
 8004b28:	0045d513          	srli	a0,a1,0x4
 8004b2c:	cd15                	beqz	a0,8004b68 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x62>
 8004b2e:	4501                	li	a0,0
 8004b30:	c521                	beqz	a0,8004b78 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x72>
 8004b32:	02700593          	li	a1,39
 8004b36:	06300513          	li	a0,99
 8004b3a:	0d554e63          	blt	a0,s5,8004c16 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x110>
 8004b3e:	8556                	mv	a0,s5
 8004b40:	4625                	li	a2,9
 8004b42:	12a65363          	bge	a2,a0,8004c68 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x162>
 8004b46:	0800c637          	lui	a2,0x800c
 8004b4a:	19e60613          	addi	a2,a2,414 # 800c19e <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x946>
 8004b4e:	0506                	slli	a0,a0,0x1
 8004b50:	9532                	add	a0,a0,a2
 8004b52:	15f9                	addi	a1,a1,-2
 8004b54:	00910613          	addi	a2,sp,9
 8004b58:	962e                	add	a2,a2,a1
 8004b5a:	00150683          	lb	a3,1(a0)
 8004b5e:	00d600a3          	sb	a3,1(a2)
 8004b62:	00054503          	lbu	a0,0(a0)
 8004b66:	a239                	j	8004c74 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x16e>
 8004b68:	01cc9513          	slli	a0,s9,0x1c
 8004b6c:	004ad593          	srli	a1,s5,0x4
 8004b70:	8d4d                	or	a0,a0,a1
 8004b72:	27153513          	sltiu	a0,a0,625
 8004b76:	fd55                	bnez	a0,8004b32 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x2c>
 8004b78:	6509                	lui	a0,0x2
 8004b7a:	71050a13          	addi	s4,a0,1808 # 2710 <__stack_size+0x1f10>
 8004b7e:	05f5e537          	lui	a0,0x5f5e
 8004b82:	0ff50b13          	addi	s6,a0,255 # 5f5e0ff <__stack_size+0x5f5d8ff>
 8004b86:	51eb8537          	lui	a0,0x51eb8
 8004b8a:	51f50b93          	addi	s7,a0,1311 # 51eb851f <_sp+0x31eb351f>
 8004b8e:	06400c13          	li	s8,100
 8004b92:	0800c537          	lui	a0,0x800c
 8004b96:	19e50d13          	addi	s10,a0,414 # 800c19e <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x946>
 8004b9a:	00910d93          	addi	s11,sp,9
 8004b9e:	4481                	li	s1,0
 8004ba0:	8556                	mv	a0,s5
 8004ba2:	85e6                	mv	a1,s9
 8004ba4:	8652                	mv	a2,s4
 8004ba6:	4681                	li	a3,0
 8004ba8:	00006097          	auipc	ra,0x6
 8004bac:	dc4080e7          	jalr	-572(ra) # 800a96c <__udivdi3>
 8004bb0:	000c8563          	beqz	s9,8004bba <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0xb4>
 8004bb4:	01903833          	snez	a6,s9
 8004bb8:	a019                	j	8004bbe <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0xb8>
 8004bba:	015b3833          	sltu	a6,s6,s5
 8004bbe:	034506b3          	mul	a3,a0,s4
 8004bc2:	40da86b3          	sub	a3,s5,a3
 8004bc6:	0376b733          	mulhu	a4,a3,s7
 8004bca:	8315                	srli	a4,a4,0x5
 8004bcc:	038707b3          	mul	a5,a4,s8
 8004bd0:	8e9d                	sub	a3,a3,a5
 8004bd2:	0686                	slli	a3,a3,0x1
 8004bd4:	0706                	slli	a4,a4,0x1
 8004bd6:	96ea                	add	a3,a3,s10
 8004bd8:	976a                	add	a4,a4,s10
 8004bda:	009d87b3          	add	a5,s11,s1
 8004bde:	00170603          	lb	a2,1(a4)
 8004be2:	02c78223          	sb	a2,36(a5)
 8004be6:	00074603          	lbu	a2,0(a4)
 8004bea:	02c781a3          	sb	a2,35(a5)
 8004bee:	00168603          	lb	a2,1(a3)
 8004bf2:	02c78323          	sb	a2,38(a5)
 8004bf6:	0006c603          	lbu	a2,0(a3)
 8004bfa:	02c782a3          	sb	a2,37(a5)
 8004bfe:	14f1                	addi	s1,s1,-4
 8004c00:	8aaa                	mv	s5,a0
 8004c02:	8cae                	mv	s9,a1
 8004c04:	f8081ee3          	bnez	a6,8004ba0 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x9a>
 8004c08:	02748593          	addi	a1,s1,39
 8004c0c:	8aaa                	mv	s5,a0
 8004c0e:	06300513          	li	a0,99
 8004c12:	f35556e3          	bge	a0,s5,8004b3e <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x38>
 8004c16:	6641                	lui	a2,0x10
 8004c18:	fff60513          	addi	a0,a2,-1 # ffff <__stack_size+0xf7ff>
 8004c1c:	00aaf533          	and	a0,s5,a0
 8004c20:	51eb86b7          	lui	a3,0x51eb8
 8004c24:	51f68693          	addi	a3,a3,1311 # 51eb851f <_sp+0x31eb351f>
 8004c28:	02d53533          	mulhu	a0,a0,a3
 8004c2c:	8115                	srli	a0,a0,0x5
 8004c2e:	06400693          	li	a3,100
 8004c32:	02d506b3          	mul	a3,a0,a3
 8004c36:	40da86b3          	sub	a3,s5,a3
 8004c3a:	0686                	slli	a3,a3,0x1
 8004c3c:	1679                	addi	a2,a2,-2
 8004c3e:	8e75                	and	a2,a2,a3
 8004c40:	0800c6b7          	lui	a3,0x800c
 8004c44:	19e68693          	addi	a3,a3,414 # 800c19e <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x946>
 8004c48:	9636                	add	a2,a2,a3
 8004c4a:	15f9                	addi	a1,a1,-2
 8004c4c:	00910693          	addi	a3,sp,9
 8004c50:	96ae                	add	a3,a3,a1
 8004c52:	00160703          	lb	a4,1(a2)
 8004c56:	00e680a3          	sb	a4,1(a3)
 8004c5a:	00064603          	lbu	a2,0(a2)
 8004c5e:	00c68023          	sb	a2,0(a3)
 8004c62:	4625                	li	a2,9
 8004c64:	eea641e3          	blt	a2,a0,8004b46 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE+0x40>
 8004c68:	15fd                	addi	a1,a1,-1
 8004c6a:	00910613          	addi	a2,sp,9
 8004c6e:	962e                	add	a2,a2,a1
 8004c70:	03050513          	addi	a0,a0,48
 8004c74:	00a60023          	sb	a0,0(a2)
 8004c78:	00910513          	addi	a0,sp,9
 8004c7c:	00b50733          	add	a4,a0,a1
 8004c80:	02700513          	li	a0,39
 8004c84:	40b507b3          	sub	a5,a0,a1
 8004c88:	0800c537          	lui	a0,0x800c
 8004c8c:	d6850613          	addi	a2,a0,-664 # 800bd68 <_ZN3app10app_sensor13SENSOR_DEVICE17hf7071d50e0c44316E+0x510>
 8004c90:	854e                	mv	a0,s3
 8004c92:	85ca                	mv	a1,s2
 8004c94:	4681                	li	a3,0
 8004c96:	fffff097          	auipc	ra,0xfffff
 8004c9a:	f26080e7          	jalr	-218(ra) # 8003bbc <_ZN4core3fmt9Formatter12pad_integral17h871e0fa0b5ef9bc4E>
 8004c9e:	5dc2                	lw	s11,48(sp)
 8004ca0:	5d52                	lw	s10,52(sp)
 8004ca2:	5ce2                	lw	s9,56(sp)
 8004ca4:	5c72                	lw	s8,60(sp)
 8004ca6:	4b86                	lw	s7,64(sp)
 8004ca8:	4b16                	lw	s6,68(sp)
 8004caa:	4aa6                	lw	s5,72(sp)
 8004cac:	4a36                	lw	s4,76(sp)
 8004cae:	49c6                	lw	s3,80(sp)
 8004cb0:	4956                	lw	s2,84(sp)
 8004cb2:	44e6                	lw	s1,88(sp)
 8004cb4:	40f6                	lw	ra,92(sp)
 8004cb6:	6125                	addi	sp,sp,96
 8004cb8:	8082                	ret

08004cba <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i64$GT$3fmt17h97d3cc39ae689800E>:
 8004cba:	86ae                	mv	a3,a1
 8004cbc:	410c                	lw	a1,0(a0)
 8004cbe:	4148                	lw	a0,4(a0)
 8004cc0:	41f55713          	srai	a4,a0,0x1f
 8004cc4:	00e587b3          	add	a5,a1,a4
 8004cc8:	00b7b5b3          	sltu	a1,a5,a1
 8004ccc:	00e50633          	add	a2,a0,a4
 8004cd0:	95b2                	add	a1,a1,a2
 8004cd2:	567d                	li	a2,-1
 8004cd4:	00a62633          	slt	a2,a2,a0
 8004cd8:	8db9                	xor	a1,a1,a4
 8004cda:	00e7c533          	xor	a0,a5,a4
 8004cde:	00000317          	auipc	t1,0x0
 8004ce2:	e2830067          	jr	-472(t1) # 8004b06 <_ZN4core3fmt3num3imp7fmt_u6417h9ff4e337182d98bfE>

08004ce6 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h133134731e47c3ddE>:
 8004ce6:	86ae                	mv	a3,a1
 8004ce8:	4150                	lw	a2,4(a0)
 8004cea:	410c                	lw	a1,0(a0)
 8004cec:	8536                	mv	a0,a3
 8004cee:	fffff317          	auipc	t1,0xfffff
 8004cf2:	13630067          	jr	310(t1) # 8003e24 <_ZN4core3fmt9Formatter3pad17hce8f930322bbc04aE>

08004cf6 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
 8004cf6:	1141                	addi	sp,sp,-16
 8004cf8:	c606                	sw	ra,12(sp)
 8004cfa:	c422                	sw	s0,8(sp)
 8004cfc:	c226                	sw	s1,4(sp)
 8004cfe:	c04a                	sw	s2,0(sp)
 8004d00:	892a                	mv	s2,a0
 8004d02:	84ae                	mv	s1,a1
    int i;
    for (i = 0; i < cnt; i++) {
 8004d04:	4401                	li	s0,0
 8004d06:	00945c63          	bge	s0,s1,8004d1e <console_write+0x28>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
 8004d0a:	008907b3          	add	a5,s2,s0
 8004d0e:	0007c503          	lbu	a0,0(a5)
 8004d12:	20dd                	jal	8004df8 <console_out_nolock>
 8004d14:	57fd                	li	a5,-1
 8004d16:	00f50463          	beq	a0,a5,8004d1e <console_write+0x28>
    for (i = 0; i < cnt; i++) {
 8004d1a:	0405                	addi	s0,s0,1
 8004d1c:	b7ed                	j	8004d06 <console_write+0x10>
    }
}
 8004d1e:	40b2                	lw	ra,12(sp)
 8004d20:	4422                	lw	s0,8(sp)
 8004d22:	4492                	lw	s1,4(sp)
 8004d24:	4902                	lw	s2,0(sp)
 8004d26:	0141                	addi	sp,sp,16
 8004d28:	8082                	ret

08004d2a <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
 8004d2a:	1141                	addi	sp,sp,-16
 8004d2c:	c606                	sw	ra,12(sp)
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 8004d2e:	200037b7          	lui	a5,0x20003
 8004d32:	a707c783          	lbu	a5,-1424(a5) # 20002a70 <sysinit_active>
 8004d36:	c795                	beqz	a5,8004d62 <console_pkg_init+0x38>

    os_eventq_init(&avail_queue);
 8004d38:	90818513          	addi	a0,gp,-1784 # 20000628 <avail_queue>
 8004d3c:	0b9020ef          	jal	ra,80075f4 <os_eventq_init>
    os_mutex_init(&console_write_lock);
 8004d40:	91818513          	addi	a0,gp,-1768 # 20000638 <console_write_lock>
 8004d44:	292030ef          	jal	ra,8007fd6 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
 8004d48:	20c5                	jal	8004e28 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
 8004d4a:	c909                	beqz	a0,8004d5c <console_pkg_init+0x32>
 8004d4c:	8141a783          	lw	a5,-2028(gp) # 20000534 <sysinit_panic_cb>
 8004d50:	4701                	li	a4,0
 8004d52:	4681                	li	a3,0
 8004d54:	4601                	li	a2,0
 8004d56:	4581                	li	a1,0
 8004d58:	4501                	li	a0,0
 8004d5a:	9782                	jalr	a5
}
 8004d5c:	40b2                	lw	ra,12(sp)
 8004d5e:	0141                	addi	sp,sp,16
 8004d60:	8082                	ret
    SYSINIT_ASSERT_ACTIVE();
 8004d62:	4681                	li	a3,0
 8004d64:	4601                	li	a2,0
 8004d66:	4581                	li	a1,0
 8004d68:	4501                	li	a0,0
 8004d6a:	268020ef          	jal	ra,8006fd2 <__assert_func>

08004d6e <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
 8004d6e:	8101c783          	lbu	a5,-2032(gp) # 20000530 <log_enabled>
 8004d72:	c38d                	beqz	a5,8004d94 <console_flush+0x26>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
 8004d74:	8401a503          	lw	a0,-1984(gp) # 20000560 <semihost_mbuf>
 8004d78:	cd11                	beqz	a0,8004d94 <console_flush+0x26>
void console_flush(void) {
 8004d7a:	1141                	addi	sp,sp,-16
 8004d7c:	c606                	sw	ra,12(sp)
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
 8004d7e:	8401a023          	sw	zero,-1984(gp) # 20000560 <semihost_mbuf>

    struct os_mbuf *m = old;
 8004d82:	87aa                	mv	a5,a0
    while (m) {  //  For each mbuf in the chain...
 8004d84:	c399                	beqz	a5,8004d8a <console_flush+0x1c>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
 8004d86:	47dc                	lw	a5,12(a5)
 8004d88:	bff5                	j	8004d84 <console_flush+0x16>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
 8004d8a:	3ad020ef          	jal	ra,8007936 <os_mbuf_free_chain>
}
 8004d8e:	40b2                	lw	ra,12(sp)
 8004d90:	0141                	addi	sp,sp,16
 8004d92:	8082                	ret
 8004d94:	8082                	ret

08004d96 <console_buffer>:
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
 8004d96:	8082                	ret

08004d98 <console_printhex>:
    #define MAX_BYTE_LENGTH 2
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 8004d98:	47c1                	li	a5,16
    int length = 0;
 8004d9a:	4701                	li	a4,0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 8004d9c:	a011                	j	8004da0 <console_printhex+0x8>
 8004d9e:	8391                	srli	a5,a5,0x4
 8004da0:	c791                	beqz	a5,8004dac <console_printhex+0x14>
        char digit = '0' + (char)(v / divisor);
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
 8004da2:	4689                	li	a3,2
 8004da4:	fee6cde3          	blt	a3,a4,8004d9e <console_printhex+0x6>
                buffer[length++] = digit;
 8004da8:	0705                	addi	a4,a4,1
 8004daa:	bfd5                	j	8004d9e <console_printhex+0x6>
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
    console_buffer(buffer, strlen(buffer));
}
 8004dac:	8082                	ret

08004dae <console_printint>:

void console_printint(int i) {
 8004dae:	1141                	addi	sp,sp,-16
 8004db0:	c606                	sw	ra,12(sp)
    //  Write an int i the output buffer.
    console_printf("%d", i);
 8004db2:	85aa                	mv	a1,a0
 8004db4:	0800d537          	lui	a0,0x800d
 8004db8:	47850513          	addi	a0,a0,1144 # 800d478 <str.j+0x1188>
 8004dbc:	2885                	jal	8004e2c <console_printf>
}
 8004dbe:	40b2                	lw	ra,12(sp)
 8004dc0:	0141                	addi	sp,sp,16
 8004dc2:	8082                	ret

08004dc4 <console_dump>:
    console_printf("%s%d.%06d", neg ? "-" : "", i, d);   //  Combine the sign, integer and decimal parts
}

void console_dump(const uint8_t *buffer, unsigned int len) {
	//  Append "length" number of bytes from "buffer" to the output buffer in hex format.
    if (buffer == NULL || len == 0) { return; }
 8004dc4:	c90d                	beqz	a0,8004df6 <console_dump+0x32>
 8004dc6:	c985                	beqz	a1,8004df6 <console_dump+0x32>
void console_dump(const uint8_t *buffer, unsigned int len) {
 8004dc8:	1141                	addi	sp,sp,-16
 8004dca:	c606                	sw	ra,12(sp)
 8004dcc:	c422                	sw	s0,8(sp)
 8004dce:	c226                	sw	s1,4(sp)
 8004dd0:	c04a                	sw	s2,0(sp)
 8004dd2:	84ae                	mv	s1,a1
 8004dd4:	892a                	mv	s2,a0
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
 8004dd6:	4401                	li	s0,0
 8004dd8:	00947963          	bgeu	s0,s1,8004dea <console_dump+0x26>
 8004ddc:	008907b3          	add	a5,s2,s0
 8004de0:	0007c503          	lbu	a0,0(a5)
 8004de4:	3f55                	jal	8004d98 <console_printhex>
 8004de6:	0405                	addi	s0,s0,1
 8004de8:	bfc5                	j	8004dd8 <console_dump+0x14>
}
 8004dea:	40b2                	lw	ra,12(sp)
 8004dec:	4422                	lw	s0,8(sp)
 8004dee:	4492                	lw	s1,4(sp)
 8004df0:	4902                	lw	s2,0(sp)
 8004df2:	0141                	addi	sp,sp,16
 8004df4:	8082                	ret
 8004df6:	8082                	ret

08004df8 <console_out_nolock>:
    console_buffer(&c, 1);  //  Append the char to the output buffer.
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}

int console_out_nolock(int character) {
    char c = (char)character;
 8004df8:	0ff57713          	andi	a4,a0,255
    if (g_silence_console) { return c; }
 8004dfc:	200037b7          	lui	a5,0x20003
 8004e00:	9ed7c783          	lbu	a5,-1555(a5) # 200029ed <g_silence_console>
 8004e04:	eb91                	bnez	a5,8004e18 <console_out_nolock+0x20>
    if ('\n' == c) {
 8004e06:	47a9                	li	a5,10
 8004e08:	00f70b63          	beq	a4,a5,8004e1e <console_out_nolock+0x26>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
 8004e0c:	200037b7          	lui	a5,0x20003
 8004e10:	4705                	li	a4,1
 8004e12:	9ee7a423          	sw	a4,-1560(a5) # 200029e8 <console_is_midline>
    }
    semihosting_console_write_ch(c);
    return character;
}
 8004e16:	8082                	ret
    if (g_silence_console) { return c; }
 8004e18:	0ff57513          	andi	a0,a0,255
 8004e1c:	8082                	ret
        console_is_midline = 0;
 8004e1e:	200037b7          	lui	a5,0x20003
 8004e22:	9e07a423          	sw	zero,-1560(a5) # 200029e8 <console_is_midline>
 8004e26:	8082                	ret

08004e28 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
 8004e28:	4501                	li	a0,0
 8004e2a:	8082                	ret

08004e2c <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
 8004e2c:	7139                	addi	sp,sp,-64
 8004e2e:	ce06                	sw	ra,28(sp)
 8004e30:	cc22                	sw	s0,24(sp)
 8004e32:	ca26                	sw	s1,20(sp)
 8004e34:	84aa                	mv	s1,a0
 8004e36:	d22e                	sw	a1,36(sp)
 8004e38:	d432                	sw	a2,40(sp)
 8004e3a:	d636                	sw	a3,44(sp)
 8004e3c:	d83a                	sw	a4,48(sp)
 8004e3e:	da3e                	sw	a5,52(sp)
 8004e40:	dc42                	sw	a6,56(sp)
 8004e42:	de46                	sw	a7,60(sp)
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
 8004e44:	2081                	jal	8004e84 <console_get_ticks>
 8004e46:	c11d                	beqz	a0,8004e6c <console_printf+0x40>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
 8004e48:	200037b7          	lui	a5,0x20003
 8004e4c:	9e87a783          	lw	a5,-1560(a5) # 200029e8 <console_is_midline>
 8004e50:	c399                	beqz	a5,8004e56 <console_printf+0x2a>
    num_chars = 0;
 8004e52:	4401                	li	s0,0
 8004e54:	a829                	j	8004e6e <console_printf+0x42>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
 8004e56:	2b1030ef          	jal	ra,8008906 <os_time_get>
 8004e5a:	85aa                	mv	a1,a0
 8004e5c:	0800d537          	lui	a0,0x800d
 8004e60:	47c50513          	addi	a0,a0,1148 # 800d47c <str.j+0x118c>
 8004e64:	452040ef          	jal	ra,80092b6 <printf>
 8004e68:	842a                	mv	s0,a0
 8004e6a:	a011                	j	8004e6e <console_printf+0x42>
    num_chars = 0;
 8004e6c:	4401                	li	s0,0
        }
    }

    va_start(args, fmt);
 8004e6e:	104c                	addi	a1,sp,36
 8004e70:	c62e                	sw	a1,12(sp)
    num_chars += vprintf(fmt, args);
 8004e72:	8526                	mv	a0,s1
 8004e74:	4b8040ef          	jal	ra,800932c <vprintf>
    va_end(args);

    return num_chars;
}
 8004e78:	9522                	add	a0,a0,s0
 8004e7a:	40f2                	lw	ra,28(sp)
 8004e7c:	4462                	lw	s0,24(sp)
 8004e7e:	44d2                	lw	s1,20(sp)
 8004e80:	6121                	addi	sp,sp,64
 8004e82:	8082                	ret

08004e84 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
 8004e84:	8441c503          	lbu	a0,-1980(gp) # 20000564 <do_ticks>
 8004e88:	8082                	ret

08004e8a <split_float>:
err:
    return (rc);
}

///  Split the float f into 3 parts: neg is true if negative, the absolute integer part i, and the decimal part d, with 6 decimal places.
static void split_float(float f, bool *neg, int *i, int *d) {
 8004e8a:	1101                	addi	sp,sp,-32
 8004e8c:	ce06                	sw	ra,28(sp)
 8004e8e:	cc22                	sw	s0,24(sp)
 8004e90:	ca26                	sw	s1,20(sp)
 8004e92:	c84a                	sw	s2,16(sp)
 8004e94:	c64e                	sw	s3,12(sp)
 8004e96:	c452                	sw	s4,8(sp)
 8004e98:	842a                	mv	s0,a0
 8004e9a:	8a2e                	mv	s4,a1
 8004e9c:	89b2                	mv	s3,a2
 8004e9e:	8936                	mv	s2,a3
    *neg = (f < 0.0f);                    //  True if f is negative
 8004ea0:	4485                	li	s1,1
 8004ea2:	00000593          	li	a1,0
 8004ea6:	1ec060ef          	jal	ra,800b092 <__lesf2>
 8004eaa:	00054363          	bltz	a0,8004eb0 <split_float+0x26>
 8004eae:	4481                	li	s1,0
 8004eb0:	0ff4f793          	andi	a5,s1,255
 8004eb4:	009a0023          	sb	s1,0(s4)
    float f_abs = *neg ? -f : f;          //  Absolute value of f
 8004eb8:	c781                	beqz	a5,8004ec0 <split_float+0x36>
 8004eba:	800007b7          	lui	a5,0x80000
 8004ebe:	8c3d                	xor	s0,s0,a5
    *i = (int) f_abs;                     //  Integer part
 8004ec0:	8522                	mv	a0,s0
 8004ec2:	4ec060ef          	jal	ra,800b3ae <__fixsfsi>
 8004ec6:	00a9a023          	sw	a0,0(s3)
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  Six decimal places
 8004eca:	0800d7b7          	lui	a5,0x800d
 8004ece:	4c87a583          	lw	a1,1224(a5) # 800d4c8 <str.j+0x11d8>
 8004ed2:	8522                	mv	a0,s0
 8004ed4:	24a060ef          	jal	ra,800b11e <__mulsf3>
 8004ed8:	4d6060ef          	jal	ra,800b3ae <__fixsfsi>
 8004edc:	000f47b7          	lui	a5,0xf4
 8004ee0:	24078793          	addi	a5,a5,576 # f4240 <__stack_size+0xf3a40>
 8004ee4:	02f56533          	rem	a0,a0,a5
 8004ee8:	00a92023          	sw	a0,0(s2)
}
 8004eec:	40f2                	lw	ra,28(sp)
 8004eee:	4462                	lw	s0,24(sp)
 8004ef0:	44d2                	lw	s1,20(sp)
 8004ef2:	4942                	lw	s2,16(sp)
 8004ef4:	49b2                	lw	s3,12(sp)
 8004ef6:	4a22                	lw	s4,8(sp)
 8004ef8:	6105                	addi	sp,sp,32
 8004efa:	8082                	ret

08004efc <handle_coap_response>:
static void handle_coap_response(oc_client_response_t *data) {
 8004efc:	1141                	addi	sp,sp,-16
 8004efe:	c606                	sw	ra,12(sp)
    console_printf("handle_coap\n");
 8004f00:	0800d537          	lui	a0,0x800d
 8004f04:	48450513          	addi	a0,a0,1156 # 800d484 <str.j+0x1194>
 8004f08:	3715                	jal	8004e2c <console_printf>
}
 8004f0a:	40b2                	lw	ra,12(sp)
 8004f0c:	0141                	addi	sp,sp,16
 8004f0e:	8082                	ret

08004f10 <json_write_mbuf>:
    if (oc_content_format != APPLICATION_JSON) { return 0; }  //  Exit if we are encoding CBOR, not JSON.
 8004f10:	8541a703          	lw	a4,-1964(gp) # 20000574 <oc_content_format>
 8004f14:	03200793          	li	a5,50
 8004f18:	04f71163          	bne	a4,a5,8004f5a <json_write_mbuf+0x4a>
int json_write_mbuf(void *buf, char *data, int len) {
 8004f1c:	1141                	addi	sp,sp,-16
 8004f1e:	c606                	sw	ra,12(sp)
    assert(coap_json_mbuf);
 8004f20:	8481a503          	lw	a0,-1976(gp) # 20000568 <coap_json_mbuf>
 8004f24:	c919                	beqz	a0,8004f3a <json_write_mbuf+0x2a>
    assert(data);
 8004f26:	cd99                	beqz	a1,8004f44 <json_write_mbuf+0x34>
    int rc = os_mbuf_append(coap_json_mbuf, data, len);  assert(rc == 0);
 8004f28:	0642                	slli	a2,a2,0x10
 8004f2a:	8241                	srli	a2,a2,0x10
 8004f2c:	235020ef          	jal	ra,8007960 <os_mbuf_append>
 8004f30:	ed19                	bnez	a0,8004f4e <json_write_mbuf+0x3e>
}
 8004f32:	4501                	li	a0,0
 8004f34:	40b2                	lw	ra,12(sp)
 8004f36:	0141                	addi	sp,sp,16
 8004f38:	8082                	ret
    assert(coap_json_mbuf);
 8004f3a:	4681                	li	a3,0
 8004f3c:	4601                	li	a2,0
 8004f3e:	4581                	li	a1,0
 8004f40:	092020ef          	jal	ra,8006fd2 <__assert_func>
    assert(data);
 8004f44:	4681                	li	a3,0
 8004f46:	4601                	li	a2,0
 8004f48:	4501                	li	a0,0
 8004f4a:	088020ef          	jal	ra,8006fd2 <__assert_func>
    int rc = os_mbuf_append(coap_json_mbuf, data, len);  assert(rc == 0);
 8004f4e:	4681                	li	a3,0
 8004f50:	4601                	li	a2,0
 8004f52:	4581                	li	a1,0
 8004f54:	4501                	li	a0,0
 8004f56:	07c020ef          	jal	ra,8006fd2 <__assert_func>
}
 8004f5a:	4501                	li	a0,0
 8004f5c:	8082                	ret

08004f5e <json_encode_value_ext>:
{
 8004f5e:	1101                	addi	sp,sp,-32
 8004f60:	ce06                	sw	ra,28(sp)
 8004f62:	cc22                	sw	s0,24(sp)
 8004f64:	ca26                	sw	s1,20(sp)
    assert(encoder);  assert(jv);
 8004f66:	cd21                	beqz	a0,8004fbe <json_encode_value_ext+0x60>
 8004f68:	842a                	mv	s0,a0
 8004f6a:	87ae                	mv	a5,a1
 8004f6c:	cdb9                	beqz	a1,8004fca <json_encode_value_ext+0x6c>
    switch (jv->jv_type) {
 8004f6e:	0015c683          	lbu	a3,1(a1)
 8004f72:	4719                	li	a4,6
 8004f74:	06e69663          	bne	a3,a4,8004fe0 <json_encode_value_ext+0x82>
            split_float(f, &neg, &i, &d);  //  Split the float into neg, integer and decimal parts (6 decimal places)
 8004f78:	0074                	addi	a3,sp,12
 8004f7a:	0030                	addi	a2,sp,8
 8004f7c:	00710593          	addi	a1,sp,7
 8004f80:	4788                	lw	a0,8(a5)
 8004f82:	3721                	jal	8004e8a <split_float>
                encoder->je_encode_buf,
 8004f84:	00940493          	addi	s1,s0,9
                neg ? "-" : "",  //  Sign
 8004f88:	00714783          	lbu	a5,7(sp)
            len = sprintf(
 8004f8c:	c7a9                	beqz	a5,8004fd6 <json_encode_value_ext+0x78>
 8004f8e:	0800d637          	lui	a2,0x800d
 8004f92:	4a060613          	addi	a2,a2,1184 # 800d4a0 <str.j+0x11b0>
 8004f96:	4732                	lw	a4,12(sp)
 8004f98:	46a2                	lw	a3,8(sp)
 8004f9a:	0800d5b7          	lui	a1,0x800d
 8004f9e:	4a458593          	addi	a1,a1,1188 # 800d4a4 <str.j+0x11b4>
 8004fa2:	8526                	mv	a0,s1
 8004fa4:	443030ef          	jal	ra,8008be6 <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
 8004fa8:	401c                	lw	a5,0(s0)
 8004faa:	862a                	mv	a2,a0
 8004fac:	85a6                	mv	a1,s1
 8004fae:	4048                	lw	a0,4(s0)
 8004fb0:	9782                	jalr	a5
    return (0);
 8004fb2:	4501                	li	a0,0
}
 8004fb4:	40f2                	lw	ra,28(sp)
 8004fb6:	4462                	lw	s0,24(sp)
 8004fb8:	44d2                	lw	s1,20(sp)
 8004fba:	6105                	addi	sp,sp,32
 8004fbc:	8082                	ret
    assert(encoder);  assert(jv);
 8004fbe:	4681                	li	a3,0
 8004fc0:	4601                	li	a2,0
 8004fc2:	4581                	li	a1,0
 8004fc4:	4501                	li	a0,0
 8004fc6:	00c020ef          	jal	ra,8006fd2 <__assert_func>
 8004fca:	4681                	li	a3,0
 8004fcc:	4601                	li	a2,0
 8004fce:	4581                	li	a1,0
 8004fd0:	4501                	li	a0,0
 8004fd2:	000020ef          	jal	ra,8006fd2 <__assert_func>
            len = sprintf(
 8004fd6:	0800d637          	lui	a2,0x800d
 8004fda:	4c460613          	addi	a2,a2,1220 # 800d4c4 <str.j+0x11d4>
 8004fde:	bf65                	j	8004f96 <json_encode_value_ext+0x38>
    return (rc);
 8004fe0:	557d                	li	a0,-1
 8004fe2:	bfc9                	j	8004fb4 <json_encode_value_ext+0x56>

08004fe4 <init_sensor_coap>:
void init_sensor_coap(void) {
 8004fe4:	1141                	addi	sp,sp,-16
 8004fe6:	c606                	sw	ra,12(sp)
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
 8004fe8:	4585                	li	a1,1
 8004fea:	85818513          	addi	a0,gp,-1960 # 20000578 <oc_sem>
 8004fee:	5b4030ef          	jal	ra,80085a2 <os_sem_init>
    assert(rc == OS_OK);
 8004ff2:	e519                	bnez	a0,8005000 <init_sensor_coap+0x1c>
    oc_sensor_coap_ready = true;
 8004ff4:	4705                	li	a4,1
 8004ff6:	86e18023          	sb	a4,-1952(gp) # 20000580 <oc_sensor_coap_ready>
}
 8004ffa:	40b2                	lw	ra,12(sp)
 8004ffc:	0141                	addi	sp,sp,16
 8004ffe:	8082                	ret
    assert(rc == OS_OK);
 8005000:	4681                	li	a3,0
 8005002:	4601                	li	a2,0
 8005004:	4581                	li	a1,0
 8005006:	4501                	li	a0,0
 8005008:	7cb010ef          	jal	ra,8006fd2 <__assert_func>

0800500c <init_sensor_post>:
{
 800500c:	1141                	addi	sp,sp,-16
 800500e:	c606                	sw	ra,12(sp)
    assert(oc_sensor_coap_ready);  assert(server);
 8005010:	8601c783          	lbu	a5,-1952(gp) # 20000580 <oc_sensor_coap_ready>
 8005014:	cf81                	beqz	a5,800502c <init_sensor_post+0x20>
 8005016:	c10d                	beqz	a0,8005038 <init_sensor_post+0x2c>
    os_error_t rc = os_sem_pend(&oc_sem, OS_TIMEOUT_NEVER);  //  Allow only 1 task to be creating a sensor request at any time.
 8005018:	55fd                	li	a1,-1
 800501a:	85818513          	addi	a0,gp,-1960 # 20000578 <oc_sem>
 800501e:	61a030ef          	jal	ra,8008638 <os_sem_pend>
    assert(rc == OS_OK);
 8005022:	e105                	bnez	a0,8005042 <init_sensor_post+0x36>
}
 8005024:	4505                	li	a0,1
 8005026:	40b2                	lw	ra,12(sp)
 8005028:	0141                	addi	sp,sp,16
 800502a:	8082                	ret
    assert(oc_sensor_coap_ready);  assert(server);
 800502c:	4681                	li	a3,0
 800502e:	4601                	li	a2,0
 8005030:	4581                	li	a1,0
 8005032:	4501                	li	a0,0
 8005034:	79f010ef          	jal	ra,8006fd2 <__assert_func>
 8005038:	4681                	li	a3,0
 800503a:	4601                	li	a2,0
 800503c:	4581                	li	a1,0
 800503e:	795010ef          	jal	ra,8006fd2 <__assert_func>
    assert(rc == OS_OK);
 8005042:	4681                	li	a3,0
 8005044:	4601                	li	a2,0
 8005046:	4581                	li	a1,0
 8005048:	4501                	li	a0,0
 800504a:	789010ef          	jal	ra,8006fd2 <__assert_func>

0800504e <json_rep_reset>:
void json_rep_reset(void) {
 800504e:	1141                	addi	sp,sp,-16
 8005050:	c606                	sw	ra,12(sp)
    coap_json_mbuf = NULL;
 8005052:	8401a423          	sw	zero,-1976(gp) # 20000568 <coap_json_mbuf>
    memset(&coap_json_encoder, 0, sizeof(coap_json_encoder));  //  Erase the encoder.
 8005056:	04800613          	li	a2,72
 800505a:	4581                	li	a1,0
 800505c:	20003537          	lui	a0,0x20003
 8005060:	9f450513          	addi	a0,a0,-1548 # 200029f4 <coap_json_encoder+0x4>
 8005064:	36f030ef          	jal	ra,8008bd2 <memset>
    coap_json_encoder.je_write = json_write_mbuf;
 8005068:	20003737          	lui	a4,0x20003
 800506c:	080057b7          	lui	a5,0x8005
 8005070:	f1078793          	addi	a5,a5,-240 # 8004f10 <json_write_mbuf>
 8005074:	9ef72823          	sw	a5,-1552(a4) # 200029f0 <coap_json_encoder>
}
 8005078:	40b2                	lw	ra,12(sp)
 800507a:	0141                	addi	sp,sp,16
 800507c:	8082                	ret

0800507e <json_rep_new>:
void json_rep_new(struct os_mbuf *m) {
 800507e:	1141                	addi	sp,sp,-16
 8005080:	c606                	sw	ra,12(sp)
 8005082:	c422                	sw	s0,8(sp)
    assert(m);
 8005084:	c909                	beqz	a0,8005096 <json_rep_new+0x18>
 8005086:	842a                	mv	s0,a0
    json_rep_reset();  //  Erase the JSON encoder.
 8005088:	37d9                	jal	800504e <json_rep_reset>
    coap_json_mbuf = m;
 800508a:	8481a423          	sw	s0,-1976(gp) # 20000568 <coap_json_mbuf>
}
 800508e:	40b2                	lw	ra,12(sp)
 8005090:	4422                	lw	s0,8(sp)
 8005092:	0141                	addi	sp,sp,16
 8005094:	8082                	ret
    assert(m);
 8005096:	4681                	li	a3,0
 8005098:	4601                	li	a2,0
 800509a:	4581                	li	a1,0
 800509c:	4501                	li	a0,0
 800509e:	735010ef          	jal	ra,8006fd2 <__assert_func>

080050a2 <prepare_coap_request>:
{
 80050a2:	1141                	addi	sp,sp,-16
 80050a4:	c606                	sw	ra,12(sp)
 80050a6:	c422                	sw	s0,8(sp)
 80050a8:	c226                	sw	s1,4(sp)
 80050aa:	c04a                	sw	s2,0(sp)
 80050ac:	842a                	mv	s0,a0
 80050ae:	892e                	mv	s2,a1
    oc_c_rsp = os_msys_get_pkthdr(0, 0);
 80050b0:	4581                	li	a1,0
 80050b2:	4501                	li	a0,0
 80050b4:	6b3020ef          	jal	ra,8007f66 <os_msys_get_pkthdr>
 80050b8:	84a1a823          	sw	a0,-1968(gp) # 20000570 <oc_c_rsp>
    if (!oc_c_rsp) {
 80050bc:	0e050263          	beqz	a0,80051a0 <prepare_coap_request+0xfe>
    oc_c_message = oc_allocate_mbuf(&cb->server.endpoint);
 80050c0:	03840513          	addi	a0,s0,56
 80050c4:	78e000ef          	jal	ra,8005852 <oc_allocate_mbuf>
 80050c8:	84a1a623          	sw	a0,-1972(gp) # 2000056c <oc_c_message>
    if (!oc_c_message) {
 80050cc:	cd2d                	beqz	a0,8005146 <prepare_coap_request+0xa4>
    if (oc_content_format == APPLICATION_JSON) { 
 80050ce:	8541a783          	lw	a5,-1964(gp) # 20000574 <oc_content_format>
 80050d2:	03200713          	li	a4,50
 80050d6:	08e78163          	beq	a5,a4,8005158 <prepare_coap_request+0xb6>
    else if (oc_content_format == APPLICATION_CBOR) { 
 80050da:	03c00713          	li	a4,60
 80050de:	08e79163          	bne	a5,a4,8005160 <prepare_coap_request+0xbe>
    coap_init_message(oc_c_request, type, cb->method, cb->mid);
 80050e2:	03645683          	lhu	a3,54(s0)
 80050e6:	06444603          	lbu	a2,100(s0)
 80050ea:	4585                	li	a1,1
 80050ec:	92418513          	addi	a0,gp,-1756 # 20000644 <oc_c_request>
 80050f0:	3e3000ef          	jal	ra,8005cd2 <coap_init_message>
    coap_set_header_accept(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
 80050f4:	8541a583          	lw	a1,-1964(gp) # 20000574 <oc_content_format>
 80050f8:	92418513          	addi	a0,gp,-1756 # 20000644 <oc_c_request>
 80050fc:	076010ef          	jal	ra,8006172 <coap_set_header_accept>
    coap_set_token(oc_c_request, cb->token, cb->token_len);
 8005100:	03444603          	lbu	a2,52(s0)
 8005104:	02c40593          	addi	a1,s0,44
 8005108:	92418513          	addi	a0,gp,-1756 # 20000644 <oc_c_request>
 800510c:	02a010ef          	jal	ra,8006136 <coap_set_token>
    coap_set_header_uri_path(oc_c_request, oc_string(cb->uri));
 8005110:	540c                	lw	a1,40(s0)
 8005112:	92418513          	addi	a0,gp,-1756 # 20000644 <oc_c_request>
 8005116:	070010ef          	jal	ra,8006186 <coap_set_header_uri_path>
    if (cb->observe_seq != -1) {
 800511a:	4c2c                	lw	a1,88(s0)
 800511c:	57fd                	li	a5,-1
 800511e:	04f59763          	bne	a1,a5,800516c <prepare_coap_request+0xca>
    if (query && oc_string_len(*query)) {
 8005122:	00090763          	beqz	s2,8005130 <prepare_coap_request+0x8e>
 8005126:	00095703          	lhu	a4,0(s2)
 800512a:	4785                	li	a5,1
 800512c:	04e7e563          	bltu	a5,a4,8005176 <prepare_coap_request+0xd4>
    if (cb->observe_seq == -1 && cb->qos == LOW_QOS) {
 8005130:	4c38                	lw	a4,88(s0)
 8005132:	57fd                	li	a5,-1
 8005134:	04f70863          	beq	a4,a5,8005184 <prepare_coap_request+0xe2>
    return true;
 8005138:	4505                	li	a0,1
}
 800513a:	40b2                	lw	ra,12(sp)
 800513c:	4422                	lw	s0,8(sp)
 800513e:	4492                	lw	s1,4(sp)
 8005140:	4902                	lw	s2,0(sp)
 8005142:	0141                	addi	sp,sp,16
 8005144:	8082                	ret
    os_mbuf_free_chain(oc_c_rsp);
 8005146:	85018413          	addi	s0,gp,-1968 # 20000570 <oc_c_rsp>
 800514a:	4008                	lw	a0,0(s0)
 800514c:	7ea020ef          	jal	ra,8007936 <os_mbuf_free_chain>
    oc_c_rsp = NULL;
 8005150:	00042023          	sw	zero,0(s0)
    return false;
 8005154:	4501                	li	a0,0
 8005156:	b7d5                	j	800513a <prepare_coap_request+0x98>
        json_rep_new(oc_c_rsp); 
 8005158:	8501a503          	lw	a0,-1968(gp) # 20000570 <oc_c_rsp>
 800515c:	370d                	jal	800507e <json_rep_new>
 800515e:	b751                	j	80050e2 <prepare_coap_request+0x40>
    else { assert(0); }  //  Unknown CoAP content format.
 8005160:	4681                	li	a3,0
 8005162:	4601                	li	a2,0
 8005164:	4581                	li	a1,0
 8005166:	4501                	li	a0,0
 8005168:	66b010ef          	jal	ra,8006fd2 <__assert_func>
        coap_set_header_observe(oc_c_request, cb->observe_seq);
 800516c:	92418513          	addi	a0,gp,-1756 # 20000644 <oc_c_request>
 8005170:	08e010ef          	jal	ra,80061fe <coap_set_header_observe>
 8005174:	b77d                	j	8005122 <prepare_coap_request+0x80>
        coap_set_header_uri_query(oc_c_request, oc_string(*query));
 8005176:	00492583          	lw	a1,4(s2)
 800517a:	92418513          	addi	a0,gp,-1756 # 20000644 <oc_c_request>
 800517e:	044010ef          	jal	ra,80061c2 <coap_set_header_uri_query>
 8005182:	b77d                	j	8005130 <prepare_coap_request+0x8e>
    if (cb->observe_seq == -1 && cb->qos == LOW_QOS) {
 8005184:	5038                	lw	a4,96(s0)
 8005186:	4785                	li	a5,1
 8005188:	00f70463          	beq	a4,a5,8005190 <prepare_coap_request+0xee>
    return true;
 800518c:	4505                	li	a0,1
 800518e:	b775                	j	800513a <prepare_coap_request+0x98>
        os_callout_reset(&cb->callout,
 8005190:	20000593          	li	a1,512
 8005194:	00440513          	addi	a0,s0,4
 8005198:	112020ef          	jal	ra,80072aa <os_callout_reset>
    return true;
 800519c:	4505                	li	a0,1
 800519e:	bf71                	j	800513a <prepare_coap_request+0x98>
        return false;
 80051a0:	4501                	li	a0,0
 80051a2:	bf61                	j	800513a <prepare_coap_request+0x98>

080051a4 <prepare_sensor_post>:
{
 80051a4:	1141                	addi	sp,sp,-16
 80051a6:	c606                	sw	ra,12(sp)
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 80051a8:	8601c703          	lbu	a4,-1952(gp) # 20000580 <oc_sensor_coap_ready>
 80051ac:	cb0d                	beqz	a4,80051de <prepare_sensor_post+0x3a>
 80051ae:	87ae                	mv	a5,a1
 80051b0:	cd0d                	beqz	a0,80051ea <prepare_sensor_post+0x46>
 80051b2:	c1a9                	beqz	a1,80051f4 <prepare_sensor_post+0x50>
    if (coap_content_format == 0) { coap_content_format = COAP_CONTENT_FORMAT; }
 80051b4:	e219                	bnez	a2,80051ba <prepare_sensor_post+0x16>
 80051b6:	03200613          	li	a2,50
    oc_content_format = coap_content_format;
 80051ba:	84c1aa23          	sw	a2,-1964(gp) # 20000574 <oc_content_format>
    cb = oc_ri_alloc_client_cb(uri, server, OC_POST, handler, qos);
 80051be:	4705                	li	a4,1
 80051c0:	080056b7          	lui	a3,0x8005
 80051c4:	efc68693          	addi	a3,a3,-260 # 8004efc <handle_coap_response>
 80051c8:	4609                	li	a2,2
 80051ca:	85aa                	mv	a1,a0
 80051cc:	853e                	mv	a0,a5
 80051ce:	7fc000ef          	jal	ra,80059ca <oc_ri_alloc_client_cb>
    if (!cb) {
 80051d2:	c51d                	beqz	a0,8005200 <prepare_sensor_post+0x5c>
    status = prepare_coap_request(cb, NULL);
 80051d4:	4581                	li	a1,0
 80051d6:	35f1                	jal	80050a2 <prepare_coap_request>
}
 80051d8:	40b2                	lw	ra,12(sp)
 80051da:	0141                	addi	sp,sp,16
 80051dc:	8082                	ret
    assert(oc_sensor_coap_ready);  assert(server);  assert(uri);
 80051de:	4681                	li	a3,0
 80051e0:	4601                	li	a2,0
 80051e2:	4581                	li	a1,0
 80051e4:	4501                	li	a0,0
 80051e6:	5ed010ef          	jal	ra,8006fd2 <__assert_func>
 80051ea:	4681                	li	a3,0
 80051ec:	4601                	li	a2,0
 80051ee:	4581                	li	a1,0
 80051f0:	5e3010ef          	jal	ra,8006fd2 <__assert_func>
 80051f4:	4681                	li	a3,0
 80051f6:	4601                	li	a2,0
 80051f8:	4581                	li	a1,0
 80051fa:	4501                	li	a0,0
 80051fc:	5d7010ef          	jal	ra,8006fd2 <__assert_func>
        os_error_t rc = os_sem_release(&oc_sem);  //  Failed.  Release the semaphore.
 8005200:	85818513          	addi	a0,gp,-1960 # 20000578 <oc_sem>
 8005204:	3b0030ef          	jal	ra,80085b4 <os_sem_release>
        assert(rc == OS_OK);
 8005208:	e119                	bnez	a0,800520e <prepare_sensor_post+0x6a>
        return false;
 800520a:	4501                	li	a0,0
 800520c:	b7f1                	j	80051d8 <prepare_sensor_post+0x34>
        assert(rc == OS_OK);
 800520e:	4681                	li	a3,0
 8005210:	4601                	li	a2,0
 8005212:	4581                	li	a1,0
 8005214:	4501                	li	a0,0
 8005216:	5bd010ef          	jal	ra,8006fd2 <__assert_func>

0800521a <json_rep_finalize>:
int json_rep_finalize(void) {
 800521a:	1141                	addi	sp,sp,-16
 800521c:	c606                	sw	ra,12(sp)
 800521e:	c422                	sw	s0,8(sp)
 8005220:	c226                	sw	s1,4(sp)
    assert(coap_json_mbuf);
 8005222:	8481a783          	lw	a5,-1976(gp) # 20000568 <coap_json_mbuf>
 8005226:	c795                	beqz	a5,8005252 <json_rep_finalize+0x38>
    int size = OS_MBUF_PKTLEN(coap_json_mbuf);
 8005228:	0107d483          	lhu	s1,16(a5)
    console_printf("NET payload size %d\n", size); struct os_mbuf *m = coap_json_mbuf;
 800522c:	85a6                	mv	a1,s1
 800522e:	0800d537          	lui	a0,0x800d
 8005232:	4b050513          	addi	a0,a0,1200 # 800d4b0 <str.j+0x11c0>
 8005236:	3edd                	jal	8004e2c <console_printf>
 8005238:	8481a403          	lw	s0,-1976(gp) # 20000568 <coap_json_mbuf>
    while (m) {
 800523c:	c00d                	beqz	s0,800525e <json_rep_finalize+0x44>
        console_buffer((const char *) (m->om_databuf + m->om_pkthdr_len), m->om_len);
 800523e:	01040513          	addi	a0,s0,16
 8005242:	00544783          	lbu	a5,5(s0)
 8005246:	00645583          	lhu	a1,6(s0)
 800524a:	953e                	add	a0,a0,a5
 800524c:	36a9                	jal	8004d96 <console_buffer>
        m = m->om_next.sle_next;
 800524e:	4440                	lw	s0,12(s0)
 8005250:	b7f5                	j	800523c <json_rep_finalize+0x22>
    assert(coap_json_mbuf);
 8005252:	4681                	li	a3,0
 8005254:	4601                	li	a2,0
 8005256:	4581                	li	a1,0
 8005258:	4501                	li	a0,0
 800525a:	579010ef          	jal	ra,8006fd2 <__assert_func>
    } console_printf("\n");
 800525e:	0800d537          	lui	a0,0x800d
 8005262:	64050513          	addi	a0,a0,1600 # 800d640 <sensor_node_addresses+0x60>
 8005266:	36d9                	jal	8004e2c <console_printf>
    json_rep_reset();
 8005268:	33dd                	jal	800504e <json_rep_reset>
}
 800526a:	8526                	mv	a0,s1
 800526c:	40b2                	lw	ra,12(sp)
 800526e:	4422                	lw	s0,8(sp)
 8005270:	4492                	lw	s1,4(sp)
 8005272:	0141                	addi	sp,sp,16
 8005274:	8082                	ret

08005276 <dispatch_coap_request>:
{
 8005276:	1141                	addi	sp,sp,-16
 8005278:	c606                	sw	ra,12(sp)
 800527a:	c422                	sw	s0,8(sp)
    assert(oc_content_format);
 800527c:	8541a783          	lw	a5,-1964(gp) # 20000574 <oc_content_format>
 8005280:	cbb9                	beqz	a5,80052d6 <dispatch_coap_request+0x60>
        (oc_content_format == APPLICATION_JSON) ? json_rep_finalize() :
 8005282:	03200713          	li	a4,50
 8005286:	04e78e63          	beq	a5,a4,80052e2 <dispatch_coap_request+0x6c>
        os_mbuf_free_chain(oc_c_rsp);
 800528a:	8501a503          	lw	a0,-1968(gp) # 20000570 <oc_c_rsp>
 800528e:	6a8020ef          	jal	ra,8007936 <os_mbuf_free_chain>
    oc_c_rsp = NULL;
 8005292:	8401a823          	sw	zero,-1968(gp) # 20000570 <oc_c_rsp>
    if (oc_c_message) {
 8005296:	84c1a583          	lw	a1,-1972(gp) # 2000056c <oc_c_message>
 800529a:	c9ad                	beqz	a1,800530c <dispatch_coap_request+0x96>
        if (!coap_serialize_message(oc_c_request, oc_c_message)) {
 800529c:	92418513          	addi	a0,gp,-1756 # 20000644 <oc_c_request>
 80052a0:	26b000ef          	jal	ra,8005d0a <coap_serialize_message>
 80052a4:	ed39                	bnez	a0,8005302 <dispatch_coap_request+0x8c>
            coap_send_message(oc_c_message, 0);
 80052a6:	4581                	li	a1,0
 80052a8:	84c1a503          	lw	a0,-1972(gp) # 2000056c <oc_c_message>
 80052ac:	675000ef          	jal	ra,8006120 <coap_send_message>
        oc_ri_remove_client_cb_by_mid(oc_c_request->mid);
 80052b0:	92418793          	addi	a5,gp,-1756 # 20000644 <oc_c_request>
 80052b4:	00a7d503          	lhu	a0,10(a5)
 80052b8:	6ee000ef          	jal	ra,80059a6 <oc_ri_remove_client_cb_by_mid>
        oc_c_message = NULL;
 80052bc:	8401a623          	sw	zero,-1972(gp) # 2000056c <oc_c_message>
        ret = true;
 80052c0:	4405                	li	s0,1
    os_error_t rc = os_sem_release(&oc_sem);  //  Request completed.  Release the semaphore for another request.
 80052c2:	85818513          	addi	a0,gp,-1960 # 20000578 <oc_sem>
 80052c6:	2ee030ef          	jal	ra,80085b4 <os_sem_release>
    assert(rc == OS_OK);
 80052ca:	e139                	bnez	a0,8005310 <dispatch_coap_request+0x9a>
}
 80052cc:	8522                	mv	a0,s0
 80052ce:	40b2                	lw	ra,12(sp)
 80052d0:	4422                	lw	s0,8(sp)
 80052d2:	0141                	addi	sp,sp,16
 80052d4:	8082                	ret
    assert(oc_content_format);
 80052d6:	4681                	li	a3,0
 80052d8:	4601                	li	a2,0
 80052da:	4581                	li	a1,0
 80052dc:	4501                	li	a0,0
 80052de:	4f5010ef          	jal	ra,8006fd2 <__assert_func>
        (oc_content_format == APPLICATION_JSON) ? json_rep_finalize() :
 80052e2:	3f25                	jal	800521a <json_rep_finalize>
    if (response_length) {
 80052e4:	d15d                	beqz	a0,800528a <dispatch_coap_request+0x14>
        oc_c_request->payload_m = oc_c_rsp;
 80052e6:	92418713          	addi	a4,gp,-1756 # 20000644 <oc_c_request>
 80052ea:	8501a683          	lw	a3,-1968(gp) # 20000570 <oc_c_rsp>
 80052ee:	d774                	sw	a3,108(a4)
        oc_c_request->payload_len = response_length;
 80052f0:	06a71323          	sh	a0,102(a4)
        coap_set_header_content_format(oc_c_request, oc_content_format);  //  Either JSON or CBOR.
 80052f4:	8541a583          	lw	a1,-1964(gp) # 20000574 <oc_content_format>
 80052f8:	92418513          	addi	a0,gp,-1756 # 20000644 <oc_c_request>
 80052fc:	663000ef          	jal	ra,800615e <coap_set_header_content_format>
 8005300:	bf49                	j	8005292 <dispatch_coap_request+0x1c>
            os_mbuf_free_chain(oc_c_message);
 8005302:	84c1a503          	lw	a0,-1972(gp) # 2000056c <oc_c_message>
 8005306:	630020ef          	jal	ra,8007936 <os_mbuf_free_chain>
 800530a:	b75d                	j	80052b0 <dispatch_coap_request+0x3a>
    bool ret = false;
 800530c:	4401                	li	s0,0
 800530e:	bf55                	j	80052c2 <dispatch_coap_request+0x4c>
    assert(rc == OS_OK);
 8005310:	4681                	li	a3,0
 8005312:	4601                	li	a2,0
 8005314:	4581                	li	a1,0
 8005316:	4501                	li	a0,0
 8005318:	4bb010ef          	jal	ra,8006fd2 <__assert_func>

0800531c <do_sensor_post>:
{
 800531c:	1141                	addi	sp,sp,-16
 800531e:	c606                	sw	ra,12(sp)
    return dispatch_coap_request();
 8005320:	3f99                	jal	8005276 <dispatch_coap_request>
}
 8005322:	40b2                	lw	ra,12(sp)
 8005324:	0141                	addi	sp,sp,16
 8005326:	8082                	ret

08005328 <json_rep_start_root_object>:
void json_rep_start_root_object(void) {
 8005328:	1141                	addi	sp,sp,-16
 800532a:	c606                	sw	ra,12(sp)
    int rc = json_encode_object_start(&coap_json_encoder);  assert(rc == 0);
 800532c:	20003537          	lui	a0,0x20003
 8005330:	9f050513          	addi	a0,a0,-1552 # 200029f0 <coap_json_encoder>
 8005334:	05c010ef          	jal	ra,8006390 <json_encode_object_start>
 8005338:	e501                	bnez	a0,8005340 <json_rep_start_root_object+0x18>
}
 800533a:	40b2                	lw	ra,12(sp)
 800533c:	0141                	addi	sp,sp,16
 800533e:	8082                	ret
    int rc = json_encode_object_start(&coap_json_encoder);  assert(rc == 0);
 8005340:	4681                	li	a3,0
 8005342:	4601                	li	a2,0
 8005344:	4581                	li	a1,0
 8005346:	4501                	li	a0,0
 8005348:	48b010ef          	jal	ra,8006fd2 <__assert_func>

0800534c <json_rep_end_root_object>:
void json_rep_end_root_object(void) {
 800534c:	1141                	addi	sp,sp,-16
 800534e:	c606                	sw	ra,12(sp)
    int rc = json_encode_object_finish(&coap_json_encoder);  assert(rc == 0);
 8005350:	20003537          	lui	a0,0x20003
 8005354:	9f050513          	addi	a0,a0,-1552 # 200029f0 <coap_json_encoder>
 8005358:	3dc010ef          	jal	ra,8006734 <json_encode_object_finish>
 800535c:	e501                	bnez	a0,8005364 <json_rep_end_root_object+0x18>
}
 800535e:	40b2                	lw	ra,12(sp)
 8005360:	0141                	addi	sp,sp,16
 8005362:	8082                	ret
    int rc = json_encode_object_finish(&coap_json_encoder);  assert(rc == 0);
 8005364:	4681                	li	a3,0
 8005366:	4601                	li	a2,0
 8005368:	4581                	li	a1,0
 800536a:	4501                	li	a0,0
 800536c:	467010ef          	jal	ra,8006fd2 <__assert_func>

08005370 <json_encode_object_entry_ext>:
{
 8005370:	1101                	addi	sp,sp,-32
 8005372:	ce06                	sw	ra,28(sp)
 8005374:	cc22                	sw	s0,24(sp)
 8005376:	ca26                	sw	s1,20(sp)
 8005378:	c84a                	sw	s2,16(sp)
 800537a:	c64e                	sw	s3,12(sp)
    assert(encoder); assert(key); assert(val);
 800537c:	c149                	beqz	a0,80053fe <json_encode_object_entry_ext+0x8e>
 800537e:	842a                	mv	s0,a0
 8005380:	84ae                	mv	s1,a1
 8005382:	8932                	mv	s2,a2
 8005384:	c1d9                	beqz	a1,800540a <json_encode_object_entry_ext+0x9a>
 8005386:	ca41                	beqz	a2,8005416 <json_encode_object_entry_ext+0xa6>
    if (encoder->je_wr_commas) {
 8005388:	00854783          	lbu	a5,8(a0)
 800538c:	8b85                	andi	a5,a5,1
 800538e:	cf91                	beqz	a5,80053aa <json_encode_object_entry_ext+0x3a>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 8005390:	411c                	lw	a5,0(a0)
 8005392:	4605                	li	a2,1
 8005394:	0800d5b7          	lui	a1,0x800d
 8005398:	49458593          	addi	a1,a1,1172 # 800d494 <str.j+0x11a4>
 800539c:	4148                	lw	a0,4(a0)
 800539e:	9782                	jalr	a5
        encoder->je_wr_commas = 0;
 80053a0:	00844783          	lbu	a5,8(s0)
 80053a4:	9bf9                	andi	a5,a5,-2
 80053a6:	00f40423          	sb	a5,8(s0)
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 80053aa:	401c                	lw	a5,0(s0)
 80053ac:	4605                	li	a2,1
 80053ae:	0800d5b7          	lui	a1,0x800d
 80053b2:	49858593          	addi	a1,a1,1176 # 800d498 <str.j+0x11a8>
 80053b6:	4048                	lw	a0,4(s0)
 80053b8:	9782                	jalr	a5
    encoder->je_write(encoder->je_arg, key, strlen(key));
 80053ba:	00042983          	lw	s3,0(s0)
 80053be:	8526                	mv	a0,s1
 80053c0:	88efc0ef          	jal	ra,800144e <strlen>
 80053c4:	862a                	mv	a2,a0
 80053c6:	85a6                	mv	a1,s1
 80053c8:	4048                	lw	a0,4(s0)
 80053ca:	9982                	jalr	s3
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
 80053cc:	401c                	lw	a5,0(s0)
 80053ce:	460d                	li	a2,3
 80053d0:	0800d5b7          	lui	a1,0x800d
 80053d4:	49c58593          	addi	a1,a1,1180 # 800d49c <str.j+0x11ac>
 80053d8:	4048                	lw	a0,4(s0)
 80053da:	9782                	jalr	a5
    rc = json_encode_value_ext(encoder, val);
 80053dc:	85ca                	mv	a1,s2
 80053de:	8522                	mv	a0,s0
 80053e0:	3ebd                	jal	8004f5e <json_encode_value_ext>
    if (rc != 0) {
 80053e2:	e519                	bnez	a0,80053f0 <json_encode_object_entry_ext+0x80>
    encoder->je_wr_commas = 1;
 80053e4:	00844783          	lbu	a5,8(s0)
 80053e8:	0017e793          	ori	a5,a5,1
 80053ec:	00f40423          	sb	a5,8(s0)
}
 80053f0:	40f2                	lw	ra,28(sp)
 80053f2:	4462                	lw	s0,24(sp)
 80053f4:	44d2                	lw	s1,20(sp)
 80053f6:	4942                	lw	s2,16(sp)
 80053f8:	49b2                	lw	s3,12(sp)
 80053fa:	6105                	addi	sp,sp,32
 80053fc:	8082                	ret
    assert(encoder); assert(key); assert(val);
 80053fe:	4681                	li	a3,0
 8005400:	4601                	li	a2,0
 8005402:	4581                	li	a1,0
 8005404:	4501                	li	a0,0
 8005406:	3cd010ef          	jal	ra,8006fd2 <__assert_func>
 800540a:	4681                	li	a3,0
 800540c:	4601                	li	a2,0
 800540e:	4581                	li	a1,0
 8005410:	4501                	li	a0,0
 8005412:	3c1010ef          	jal	ra,8006fd2 <__assert_func>
 8005416:	4681                	li	a3,0
 8005418:	4601                	li	a2,0
 800541a:	4581                	li	a1,0
 800541c:	4501                	li	a0,0
 800541e:	3b5010ef          	jal	ra,8006fd2 <__assert_func>

08005422 <sensor_network_init_post>:

//  Interface type and URI of the CoAP message being composed.
static uint8_t current_iface_type = 0xff;
static const char *current_uri = NULL;

bool sensor_network_init_post(uint8_t iface_type, const char *uri) {
 8005422:	1141                	addi	sp,sp,-16
 8005424:	c606                	sw	ra,12(sp)
    //  Start composing the CoAP Server or Collector message with the sensor data in the payload.  This will 
    //  block other tasks from composing and posting CoAP messages (through a semaphore).
    //  We only have 1 memory buffer for composing CoAP messages so it needs to be locked.
    //  Return true if successful, false if network has not been registered.
    if (uri == NULL || uri[0] == 0) { uri = COAP_URI; }
 8005426:	c5b5                	beqz	a1,8005492 <sensor_network_init_post+0x70>
 8005428:	0005c783          	lbu	a5,0(a1)
 800542c:	cba5                	beqz	a5,800549c <sensor_network_init_post+0x7a>
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800542e:	cda5                	beqz	a1,80054a6 <sensor_network_init_post+0x84>
 8005430:	4785                	li	a5,1
 8005432:	06a7ef63          	bltu	a5,a0,80054b0 <sensor_network_init_post+0x8e>
    struct sensor_network_interface *iface = &sensor_network_interfaces[iface_type];
    if (!iface->transport_registered) {
 8005436:	00251713          	slli	a4,a0,0x2
 800543a:	972a                	add	a4,a4,a0
 800543c:	00271693          	slli	a3,a4,0x2
 8005440:	9e418793          	addi	a5,gp,-1564 # 20000704 <sensor_network_interfaces>
 8005444:	97b6                	add	a5,a5,a3
 8005446:	0107c783          	lbu	a5,16(a5)
 800544a:	cbad                	beqz	a5,80054bc <sensor_network_init_post+0x9a>
        //  If transport has not been registered, wait for the transport to be registered.
        console_printf("NET network not ready\n");
        return false;
    }
    void *endpoint = &sensor_network_endpoints[iface_type];
 800544c:	00451713          	slli	a4,a0,0x4
 8005450:	9c418793          	addi	a5,gp,-1596 # 200006e4 <sensor_network_endpoints>
 8005454:	973e                	add	a4,a4,a5
    assert(iface->network_device);  assert(iface->register_transport_func);  assert(endpoint);
 8005456:	00251693          	slli	a3,a0,0x2
 800545a:	96aa                	add	a3,a3,a0
 800545c:	00269613          	slli	a2,a3,0x2
 8005460:	9e418793          	addi	a5,gp,-1564 # 20000704 <sensor_network_interfaces>
 8005464:	97b2                	add	a5,a5,a2
 8005466:	43dc                	lw	a5,4(a5)
 8005468:	c3b5                	beqz	a5,80054cc <sensor_network_init_post+0xaa>
 800546a:	00251693          	slli	a3,a0,0x2
 800546e:	96aa                	add	a3,a3,a0
 8005470:	00269613          	slli	a2,a3,0x2
 8005474:	9e418793          	addi	a5,gp,-1564 # 20000704 <sensor_network_interfaces>
 8005478:	97b2                	add	a5,a5,a2
 800547a:	47dc                	lw	a5,12(a5)
 800547c:	cfb1                	beqz	a5,80054d8 <sensor_network_init_post+0xb6>
    current_iface_type = iface_type;
 800547e:	80a188a3          	sb	a0,-2031(gp) # 20000531 <current_iface_type>
    current_uri = uri;
 8005482:	86b1a223          	sw	a1,-1948(gp) # 20000584 <current_uri>
    bool status = init_sensor_post(endpoint);
 8005486:	853a                	mv	a0,a4
 8005488:	3651                	jal	800500c <init_sensor_post>
    assert(status);
 800548a:	cd29                	beqz	a0,80054e4 <sensor_network_init_post+0xc2>
    return status;
}
 800548c:	40b2                	lw	ra,12(sp)
 800548e:	0141                	addi	sp,sp,16
 8005490:	8082                	ret
    if (uri == NULL || uri[0] == 0) { uri = COAP_URI; }
 8005492:	0800d5b7          	lui	a1,0x800d
 8005496:	4cc58593          	addi	a1,a1,1228 # 800d4cc <COAP_URI>
 800549a:	bf51                	j	800542e <sensor_network_init_post+0xc>
 800549c:	0800d5b7          	lui	a1,0x800d
 80054a0:	4cc58593          	addi	a1,a1,1228 # 800d4cc <COAP_URI>
 80054a4:	b769                	j	800542e <sensor_network_init_post+0xc>
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 80054a6:	4681                	li	a3,0
 80054a8:	4601                	li	a2,0
 80054aa:	4501                	li	a0,0
 80054ac:	327010ef          	jal	ra,8006fd2 <__assert_func>
 80054b0:	4681                	li	a3,0
 80054b2:	4601                	li	a2,0
 80054b4:	4581                	li	a1,0
 80054b6:	4501                	li	a0,0
 80054b8:	31b010ef          	jal	ra,8006fd2 <__assert_func>
        console_printf("NET network not ready\n");
 80054bc:	0800d537          	lui	a0,0x800d
 80054c0:	5b450513          	addi	a0,a0,1460 # 800d5b4 <SENSOR_NODE_HW_IDS+0xa4>
 80054c4:	969ff0ef          	jal	ra,8004e2c <console_printf>
        return false;
 80054c8:	4501                	li	a0,0
 80054ca:	b7c9                	j	800548c <sensor_network_init_post+0x6a>
    assert(iface->network_device);  assert(iface->register_transport_func);  assert(endpoint);
 80054cc:	4681                	li	a3,0
 80054ce:	4601                	li	a2,0
 80054d0:	4581                	li	a1,0
 80054d2:	4501                	li	a0,0
 80054d4:	2ff010ef          	jal	ra,8006fd2 <__assert_func>
 80054d8:	4681                	li	a3,0
 80054da:	4601                	li	a2,0
 80054dc:	4581                	li	a1,0
 80054de:	4501                	li	a0,0
 80054e0:	2f3010ef          	jal	ra,8006fd2 <__assert_func>
    assert(status);
 80054e4:	4681                	li	a3,0
 80054e6:	4601                	li	a2,0
 80054e8:	4581                	li	a1,0
 80054ea:	2e9010ef          	jal	ra,8006fd2 <__assert_func>

080054ee <init_server_post>:
bool init_server_post(const char *uri) {
 80054ee:	1141                	addi	sp,sp,-16
 80054f0:	c606                	sw	ra,12(sp)
    bool status = sensor_network_init_post(i, uri);
 80054f2:	85aa                	mv	a1,a0
 80054f4:	4501                	li	a0,0
 80054f6:	3735                	jal	8005422 <sensor_network_init_post>
}
 80054f8:	40b2                	lw	ra,12(sp)
 80054fa:	0141                	addi	sp,sp,16
 80054fc:	8082                	ret

080054fe <sensor_network_prepare_post>:

bool sensor_network_prepare_post(int encoding) {
 80054fe:	1141                	addi	sp,sp,-16
 8005500:	c606                	sw	ra,12(sp)
    //  Set the encoding format for the CoAP message: APPLICATION_JSON or APPLICATION_CBOR.  If set to 0, use the default encoding format.
    //  Return true if successful.
    uint8_t iface_type = current_iface_type;
 8005502:	8111c683          	lbu	a3,-2031(gp) # 20000531 <current_iface_type>
    const char *uri = current_uri;
 8005506:	8641a583          	lw	a1,-1948(gp) # 20000584 <current_uri>
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800550a:	c195                	beqz	a1,800552e <sensor_network_prepare_post+0x30>
 800550c:	4785                	li	a5,1
 800550e:	02d7e563          	bltu	a5,a3,8005538 <sensor_network_prepare_post+0x3a>
    void *endpoint = &sensor_network_endpoints[iface_type];
 8005512:	00469793          	slli	a5,a3,0x4
 8005516:	9c418713          	addi	a4,gp,-1596 # 200006e4 <sensor_network_endpoints>
 800551a:	97ba                	add	a5,a5,a4
    assert(endpoint);

    //  Use the specified encoding. If not specified, select the default encoding for the interface type.
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
 800551c:	02a05463          	blez	a0,8005544 <sensor_network_prepare_post+0x46>
    bool status = prepare_sensor_post(endpoint, uri, enc);
 8005520:	862a                	mv	a2,a0
 8005522:	853e                	mv	a0,a5
 8005524:	3141                	jal	80051a4 <prepare_sensor_post>
    assert(status);
 8005526:	c51d                	beqz	a0,8005554 <sensor_network_prepare_post+0x56>
    return status;
}
 8005528:	40b2                	lw	ra,12(sp)
 800552a:	0141                	addi	sp,sp,16
 800552c:	8082                	ret
    assert(uri);  assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 800552e:	4681                	li	a3,0
 8005530:	4601                	li	a2,0
 8005532:	4501                	li	a0,0
 8005534:	29f010ef          	jal	ra,8006fd2 <__assert_func>
 8005538:	4681                	li	a3,0
 800553a:	4601                	li	a2,0
 800553c:	4581                	li	a1,0
 800553e:	4501                	li	a0,0
 8005540:	293010ef          	jal	ra,8006fd2 <__assert_func>
    int enc = (encoding > 0) ? encoding : sensor_network_encoding[iface_type];
 8005544:	068a                	slli	a3,a3,0x2
 8005546:	0800e737          	lui	a4,0x800e
 800554a:	8f070713          	addi	a4,a4,-1808 # 800d8f0 <sensor_network_encoding>
 800554e:	96ba                	add	a3,a3,a4
 8005550:	4288                	lw	a0,0(a3)
 8005552:	b7f9                	j	8005520 <sensor_network_prepare_post+0x22>
    assert(status);
 8005554:	4681                	li	a3,0
 8005556:	4601                	li	a2,0
 8005558:	4581                	li	a1,0
 800555a:	279010ef          	jal	ra,8006fd2 <__assert_func>

0800555e <sensor_network_do_post>:
    bool status = sensor_network_do_post(i);
    assert(status);
    return status;
}

bool sensor_network_do_post(uint8_t iface_type) {
 800555e:	1141                	addi	sp,sp,-16
 8005560:	c606                	sw	ra,12(sp)
    //  Post the CoAP Server or Collector message to the CoAP Background Task for transmission.  After posting the
    //  message to the background task, we release a semaphore that unblocks other requests
    //  to compose and post CoAP messages.
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 8005562:	4785                	li	a5,1
 8005564:	00a7e763          	bltu	a5,a0,8005572 <sensor_network_do_post+0x14>
    bool status = do_sensor_post();
 8005568:	3b55                	jal	800531c <do_sensor_post>
    assert(status);
 800556a:	c911                	beqz	a0,800557e <sensor_network_do_post+0x20>
    return status;
}
 800556c:	40b2                	lw	ra,12(sp)
 800556e:	0141                	addi	sp,sp,16
 8005570:	8082                	ret
    assert(iface_type >= 0 && iface_type < MAX_INTERFACE_TYPES);
 8005572:	4681                	li	a3,0
 8005574:	4601                	li	a2,0
 8005576:	4581                	li	a1,0
 8005578:	4501                	li	a0,0
 800557a:	259010ef          	jal	ra,8006fd2 <__assert_func>
    assert(status);
 800557e:	4681                	li	a3,0
 8005580:	4601                	li	a2,0
 8005582:	4581                	li	a1,0
 8005584:	24f010ef          	jal	ra,8006fd2 <__assert_func>

08005588 <do_server_post>:
bool do_server_post(void) {    
 8005588:	1141                	addi	sp,sp,-16
 800558a:	c606                	sw	ra,12(sp)
    bool status = sensor_network_do_post(i);
 800558c:	4501                	li	a0,0
 800558e:	3fc1                	jal	800555e <sensor_network_do_post>
    assert(status);
 8005590:	c501                	beqz	a0,8005598 <do_server_post+0x10>
}
 8005592:	40b2                	lw	ra,12(sp)
 8005594:	0141                	addi	sp,sp,16
 8005596:	8082                	ret
    assert(status);
 8005598:	4681                	li	a3,0
 800559a:	4601                	li	a2,0
 800559c:	4581                	li	a1,0
 800559e:	235010ef          	jal	ra,8006fd2 <__assert_func>

080055a2 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
 80055a2:	87018793          	addi	a5,gp,-1936 # 20000590 <sensor_node_address>
 80055a6:	4398                	lw	a4,0(a5)
 80055a8:	43d4                	lw	a3,4(a5)
 80055aa:	00d767b3          	or	a5,a4,a3
 80055ae:	e399                	bnez	a5,80055b4 <is_sensor_node+0x12>
    return false;
 80055b0:	4501                	li	a0,0
 80055b2:	8082                	ret
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
 80055b4:	4505                	li	a0,1
}
 80055b6:	8082                	ret

080055b8 <get_hardware_id>:
/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
 80055b8:	8681a783          	lw	a5,-1944(gp) # 20000588 <hw_id_len>
 80055bc:	c781                	beqz	a5,80055c4 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
 80055be:	9b818513          	addi	a0,gp,-1608 # 200006d8 <hw_id>
 80055c2:	8082                	ret
const uint8_t *get_hardware_id(void) {
 80055c4:	1141                	addi	sp,sp,-16
 80055c6:	c606                	sw	ra,12(sp)
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
 80055c8:	202010ef          	jal	ra,80067ca <hal_bsp_hw_id_len>
 80055cc:	86a1a423          	sw	a0,-1944(gp) # 20000588 <hw_id_len>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 80055d0:	47ad                	li	a5,11
 80055d2:	04a7f663          	bgeu	a5,a0,800561e <get_hardware_id+0x66>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 80055d6:	45b1                	li	a1,12
 80055d8:	9b818513          	addi	a0,gp,-1608 # 200006d8 <hw_id>
 80055dc:	1f2010ef          	jal	ra,80067ce <hal_bsp_hw_id>
 80055e0:	86a1a423          	sw	a0,-1944(gp) # 20000588 <hw_id_len>
 80055e4:	04a05363          	blez	a0,800562a <get_hardware_id+0x72>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
 80055e8:	0800d5b7          	lui	a1,0x800d
 80055ec:	5cc58593          	addi	a1,a1,1484 # 800d5cc <SENSOR_NODE_HW_IDS+0xbc>
 80055f0:	0800d537          	lui	a0,0x800d
 80055f4:	56c50513          	addi	a0,a0,1388 # 800d56c <SENSOR_NODE_HW_IDS+0x5c>
 80055f8:	835ff0ef          	jal	ra,8004e2c <console_printf>
 80055fc:	8681a583          	lw	a1,-1944(gp) # 20000588 <hw_id_len>
 8005600:	9b818513          	addi	a0,gp,-1608 # 200006d8 <hw_id>
 8005604:	fc0ff0ef          	jal	ra,8004dc4 <console_dump>
 8005608:	0800d537          	lui	a0,0x800d
 800560c:	64050513          	addi	a0,a0,1600 # 800d640 <sensor_node_addresses+0x60>
 8005610:	81dff0ef          	jal	ra,8004e2c <console_printf>
}
 8005614:	9b818513          	addi	a0,gp,-1608 # 200006d8 <hw_id>
 8005618:	40b2                	lw	ra,12(sp)
 800561a:	0141                	addi	sp,sp,16
 800561c:	8082                	ret
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
 800561e:	4681                	li	a3,0
 8005620:	4601                	li	a2,0
 8005622:	4581                	li	a1,0
 8005624:	4501                	li	a0,0
 8005626:	1ad010ef          	jal	ra,8006fd2 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
 800562a:	4681                	li	a3,0
 800562c:	4601                	li	a2,0
 800562e:	4581                	li	a1,0
 8005630:	4501                	li	a0,0
 8005632:	1a1010ef          	jal	ra,8006fd2 <__assert_func>

08005636 <is_collector_node>:
bool is_collector_node(void) {
 8005636:	1141                	addi	sp,sp,-16
 8005638:	c606                	sw	ra,12(sp)
    const uint8_t *hardware_id = get_hardware_id();
 800563a:	3fbd                	jal	80055b8 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
 800563c:	4631                	li	a2,12
 800563e:	0800d5b7          	lui	a1,0x800d
 8005642:	50458593          	addi	a1,a1,1284 # 800d504 <COLLECTOR_NODE_HW_ID>
 8005646:	54a030ef          	jal	ra,8008b90 <memcmp>
 800564a:	c509                	beqz	a0,8005654 <is_collector_node+0x1e>
    return false; 
 800564c:	4501                	li	a0,0
}
 800564e:	40b2                	lw	ra,12(sp)
 8005650:	0141                	addi	sp,sp,16
 8005652:	8082                	ret
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
 8005654:	4505                	li	a0,1
 8005656:	bfe5                	j	800564e <is_collector_node+0x18>

08005658 <is_standalone_node>:
bool is_standalone_node(void) {
 8005658:	1141                	addi	sp,sp,-16
 800565a:	c606                	sw	ra,12(sp)
 800565c:	c422                	sw	s0,8(sp)
    if (!is_collector_node() && !is_sensor_node()) { return true; }
 800565e:	3fe1                	jal	8005636 <is_collector_node>
 8005660:	e511                	bnez	a0,800566c <is_standalone_node+0x14>
 8005662:	842a                	mv	s0,a0
 8005664:	3f3d                	jal	80055a2 <is_sensor_node>
 8005666:	e501                	bnez	a0,800566e <is_standalone_node+0x16>
 8005668:	4405                	li	s0,1
 800566a:	a011                	j	800566e <is_standalone_node+0x16>
    return false;
 800566c:	4401                	li	s0,0
}
 800566e:	8522                	mv	a0,s0
 8005670:	40b2                	lw	ra,12(sp)
 8005672:	4422                	lw	s0,8(sp)
 8005674:	0141                	addi	sp,sp,16
 8005676:	8082                	ret

08005678 <get_device_id>:
//  Device Type e.g. l476
static const char *DEVICE_TYPE = MYNEWT_VAL(DEVICE_TYPE);

const char *get_device_id(void) {
    //  Get the randomly-generated Device ID that will be sent in every CoAP Server message.  Changes upon restart.
    if (device_id_text[0]) { return device_id_text; }
 8005678:	9941c783          	lbu	a5,-1644(gp) # 200006b4 <device_id_text>
 800567c:	ebb5                	bnez	a5,80056f0 <get_device_id+0x78>
const char *get_device_id(void) {
 800567e:	1141                	addi	sp,sp,-16
 8005680:	c606                	sw	ra,12(sp)
 8005682:	c422                	sw	s0,8(sp)
 8005684:	c226                	sw	s1,4(sp)
    //  Create a random device ID based on HMAC pseudorandom number generator e.g. 0xab 0xcd 0xef ...
    int rc = hmac_prng_generate(device_id, DEVICE_ID_LENGTH);  assert(rc == 0);
#endif  //  MYNEWT_VAL(HMAC_PRNG)
    char *s = device_id_text; int i;
    //  Convert to text e.g. abcdef...
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
 8005686:	4481                	li	s1,0
    char *s = device_id_text; int i;
 8005688:	99418413          	addi	s0,gp,-1644 # 200006b4 <device_id_text>
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
 800568c:	47bd                	li	a5,15
 800568e:	0097cd63          	blt	a5,s1,80056a8 <get_device_id+0x30>
        sprintf(s, "%02x", device_id[i]);
 8005692:	4601                	li	a2,0
 8005694:	0800d5b7          	lui	a1,0x800d
 8005698:	54c58593          	addi	a1,a1,1356 # 800d54c <SENSOR_NODE_HW_IDS+0x3c>
 800569c:	8522                	mv	a0,s0
 800569e:	548030ef          	jal	ra,8008be6 <sprintf>
        s += 2;
 80056a2:	0409                	addi	s0,s0,2
    for (i = 0; i < DEVICE_ID_LENGTH; i++) {
 80056a4:	0485                	addi	s1,s1,1
 80056a6:	b7dd                	j	800568c <get_device_id+0x14>
    }
    device_id_text[DEVICE_ID_TEXT_LENGTH - 1] = 0;
 80056a8:	99418793          	addi	a5,gp,-1644 # 200006b4 <device_id_text>
 80056ac:	02078023          	sb	zero,32(a5)
    //  Overwrite the start of the device ID by the device type followed by ",", e.g. "l476,010203".
    if (strlen(DEVICE_TYPE) > 0) {
        assert(strlen(DEVICE_TYPE) < DEVICE_ID_TEXT_LENGTH - 1);  //  DEVICE_TYPE too long
        strcpy(device_id_text, DEVICE_TYPE);
 80056b0:	35667737          	lui	a4,0x35667
 80056b4:	26e70713          	addi	a4,a4,622 # 3566726e <_sp+0x1566226e>
 80056b8:	c398                	sw	a4,0(a5)
 80056ba:	03200713          	li	a4,50
 80056be:	00e79223          	sh	a4,4(a5)
        device_id_text[strlen(DEVICE_TYPE)] = ',';
 80056c2:	02c00713          	li	a4,44
 80056c6:	00e782a3          	sb	a4,5(a5)
    }
    console_printf("%srandom device id %s\n", _net, device_id_text);
 80056ca:	99418613          	addi	a2,gp,-1644 # 200006b4 <device_id_text>
 80056ce:	0800d5b7          	lui	a1,0x800d
 80056d2:	5cc58593          	addi	a1,a1,1484 # 800d5cc <SENSOR_NODE_HW_IDS+0xbc>
 80056d6:	0800d537          	lui	a0,0x800d
 80056da:	55450513          	addi	a0,a0,1364 # 800d554 <SENSOR_NODE_HW_IDS+0x44>
 80056de:	f4eff0ef          	jal	ra,8004e2c <console_printf>
    return device_id_text;
}
 80056e2:	99418513          	addi	a0,gp,-1644 # 200006b4 <device_id_text>
 80056e6:	40b2                	lw	ra,12(sp)
 80056e8:	4422                	lw	s0,8(sp)
 80056ea:	4492                	lw	s1,4(sp)
 80056ec:	0141                	addi	sp,sp,16
 80056ee:	8082                	ret
 80056f0:	99418513          	addi	a0,gp,-1644 # 200006b4 <device_id_text>
 80056f4:	8082                	ret

080056f6 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
 80056f6:	1141                	addi	sp,sp,-16
 80056f8:	c606                	sw	ra,12(sp)
 80056fa:	c422                	sw	s0,8(sp)
 80056fc:	c226                	sw	s1,4(sp)
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 80056fe:	4401                	li	s0,0
 8005700:	4791                	li	a5,4
 8005702:	0487c463          	blt	a5,s0,800574a <sensor_network_init+0x54>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
 8005706:	00241793          	slli	a5,s0,0x2
 800570a:	20000737          	lui	a4,0x20000
 800570e:	08070713          	addi	a4,a4,128 # 20000080 <sensor_node_names>
 8005712:	97ba                	add	a5,a5,a4
 8005714:	00341713          	slli	a4,s0,0x3
 8005718:	0800d6b7          	lui	a3,0x800d
 800571c:	5e068693          	addi	a3,a3,1504 # 800d5e0 <sensor_node_addresses>
 8005720:	9736                	add	a4,a4,a3
 8005722:	4310                	lw	a2,0(a4)
 8005724:	4354                	lw	a3,4(a4)
 8005726:	0800d5b7          	lui	a1,0x800d
 800572a:	57458593          	addi	a1,a1,1396 # 800d574 <SENSOR_NODE_HW_IDS+0x64>
 800572e:	4388                	lw	a0,0(a5)
 8005730:	4b6030ef          	jal	ra,8008be6 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
 8005734:	47a9                	li	a5,10
 8005736:	00a7c463          	blt	a5,a0,800573e <sensor_network_init+0x48>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 800573a:	0405                	addi	s0,s0,1
 800573c:	b7d1                	j	8005700 <sensor_network_init+0xa>
        assert(len + 1 <= NODE_NAME_LENGTH);
 800573e:	4681                	li	a3,0
 8005740:	4601                	li	a2,0
 8005742:	4581                	li	a1,0
 8005744:	4501                	li	a0,0
 8005746:	08d010ef          	jal	ra,8006fd2 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
 800574a:	35bd                	jal	80055b8 <get_hardware_id>
 800574c:	84aa                	mv	s1,a0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 800574e:	4401                	li	s0,0
 8005750:	4791                	li	a5,4
 8005752:	0687c063          	blt	a5,s0,80057b2 <sensor_network_init+0xbc>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
 8005756:	00141793          	slli	a5,s0,0x1
 800575a:	97a2                	add	a5,a5,s0
 800575c:	00279593          	slli	a1,a5,0x2
 8005760:	4631                	li	a2,12
 8005762:	0800d7b7          	lui	a5,0x800d
 8005766:	51078793          	addi	a5,a5,1296 # 800d510 <SENSOR_NODE_HW_IDS>
 800576a:	95be                	add	a1,a1,a5
 800576c:	8526                	mv	a0,s1
 800576e:	422030ef          	jal	ra,8008b90 <memcmp>
 8005772:	c119                	beqz	a0,8005778 <sensor_network_init+0x82>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
 8005774:	0405                	addi	s0,s0,1
 8005776:	bfe9                	j	8005750 <sensor_network_init+0x5a>
            sensor_node_address = sensor_node_addresses[i];
 8005778:	00341713          	slli	a4,s0,0x3
 800577c:	0800d7b7          	lui	a5,0x800d
 8005780:	5e078793          	addi	a5,a5,1504 # 800d5e0 <sensor_node_addresses>
 8005784:	97ba                	add	a5,a5,a4
 8005786:	4390                	lw	a2,0(a5)
 8005788:	43d4                	lw	a3,4(a5)
 800578a:	86c1a823          	sw	a2,-1936(gp) # 20000590 <sensor_node_address>
 800578e:	86d1aa23          	sw	a3,-1932(gp) # 20000594 <sensor_node_address+0x4>
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
 8005792:	00140693          	addi	a3,s0,1
 8005796:	0800d637          	lui	a2,0x800d
 800579a:	57c60613          	addi	a2,a2,1404 # 800d57c <SENSOR_NODE_HW_IDS+0x6c>
 800579e:	0800d5b7          	lui	a1,0x800d
 80057a2:	5cc58593          	addi	a1,a1,1484 # 800d5cc <SENSOR_NODE_HW_IDS+0xbc>
 80057a6:	0800d537          	lui	a0,0x800d
 80057aa:	58450513          	addi	a0,a0,1412 # 800d584 <SENSOR_NODE_HW_IDS+0x74>
 80057ae:	e7eff0ef          	jal	ra,8004e2c <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
 80057b2:	3551                	jal	8005636 <is_collector_node>
 80057b4:	c505                	beqz	a0,80057dc <sensor_network_init+0xe6>
 80057b6:	0800d637          	lui	a2,0x800d
 80057ba:	57c60613          	addi	a2,a2,1404 # 800d57c <SENSOR_NODE_HW_IDS+0x6c>
 80057be:	0800d5b7          	lui	a1,0x800d
 80057c2:	5cc58593          	addi	a1,a1,1484 # 800d5cc <SENSOR_NODE_HW_IDS+0xbc>
 80057c6:	0800d537          	lui	a0,0x800d
 80057ca:	59450513          	addi	a0,a0,1428 # 800d594 <SENSOR_NODE_HW_IDS+0x84>
 80057ce:	e5eff0ef          	jal	ra,8004e2c <console_printf>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
}
 80057d2:	40b2                	lw	ra,12(sp)
 80057d4:	4422                	lw	s0,8(sp)
 80057d6:	4492                	lw	s1,4(sp)
 80057d8:	0141                	addi	sp,sp,16
 80057da:	8082                	ret
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
 80057dc:	3db5                	jal	8005658 <is_standalone_node>
 80057de:	d975                	beqz	a0,80057d2 <sensor_network_init+0xdc>
 80057e0:	0800d637          	lui	a2,0x800d
 80057e4:	57c60613          	addi	a2,a2,1404 # 800d57c <SENSOR_NODE_HW_IDS+0x6c>
 80057e8:	0800d5b7          	lui	a1,0x800d
 80057ec:	5cc58593          	addi	a1,a1,1484 # 800d5cc <SENSOR_NODE_HW_IDS+0xbc>
 80057f0:	0800d537          	lui	a0,0x800d
 80057f4:	5a450513          	addi	a0,a0,1444 # 800d5a4 <SENSOR_NODE_HW_IDS+0x94>
 80057f8:	e34ff0ef          	jal	ra,8004e2c <console_printf>
}
 80057fc:	bfd9                	j	80057d2 <sensor_network_init+0xdc>

080057fe <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
 80057fe:	1141                	addi	sp,sp,-16
 8005800:	c606                	sw	ra,12(sp)
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
 8005802:	a019                	j	8005808 <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
 8005804:	219000ef          	jal	ra,800621c <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
 8005808:	a5c18513          	addi	a0,gp,-1444 # 2000077c <oc_outq>
 800580c:	7e7010ef          	jal	ra,80077f2 <os_mqueue_get>
 8005810:	c919                	beqz	a0,8005826 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
 8005812:	00052a23          	sw	zero,20(a0)
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
 8005816:	01854783          	lbu	a5,24(a0)
 800581a:	838d                	srli	a5,a5,0x3
 800581c:	8b85                	andi	a5,a5,1
 800581e:	d3fd                	beqz	a5,8005804 <oc_buffer_tx+0x6>
            oc_send_multicast_message(m);
 8005820:	227000ef          	jal	ra,8006246 <oc_send_multicast_message>
 8005824:	b7d5                	j	8005808 <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
 8005826:	40b2                	lw	ra,12(sp)
 8005828:	0141                	addi	sp,sp,16
 800582a:	8082                	ret

0800582c <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
 800582c:	1101                	addi	sp,sp,-32
 800582e:	ce06                	sw	ra,28(sp)
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
 8005830:	a4418513          	addi	a0,gp,-1468 # 20000764 <oc_inq>
 8005834:	7bf010ef          	jal	ra,80077f2 <os_mqueue_get>
 8005838:	c62a                	sw	a0,12(sp)
 800583a:	c909                	beqz	a0,800584c <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
 800583c:	0068                	addi	a0,sp,12
 800583e:	33b000ef          	jal	ra,8006378 <__wrap_coap_receive>
#endif
        if (m) {
 8005842:	4532                	lw	a0,12(sp)
 8005844:	d575                	beqz	a0,8005830 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
 8005846:	0f0020ef          	jal	ra,8007936 <os_mbuf_free_chain>
 800584a:	b7dd                	j	8005830 <oc_buffer_rx+0x4>
        }
    }
}
 800584c:	40f2                	lw	ra,28(sp)
 800584e:	6105                	addi	sp,sp,32
 8005850:	8082                	ret

08005852 <oc_allocate_mbuf>:
{
 8005852:	1141                	addi	sp,sp,-16
 8005854:	c606                	sw	ra,12(sp)
 8005856:	c422                	sw	s0,8(sp)
 8005858:	c226                	sw	s1,4(sp)
 800585a:	c04a                	sw	s2,0(sp)
};

static inline int
oc_endpoint_size(struct oc_endpoint *oe)
{
    assert(oc_transports[oe->ep.oe_type]);
 800585c:	00054783          	lbu	a5,0(a0)
 8005860:	8b9d                	andi	a5,a5,7
 8005862:	078a                	slli	a5,a5,0x2
 8005864:	20003737          	lui	a4,0x20003
 8005868:	a5070713          	addi	a4,a4,-1456 # 20002a50 <oc_transports>
 800586c:	97ba                	add	a5,a5,a4
 800586e:	439c                	lw	a5,0(a5)
 8005870:	cb8d                	beqz	a5,80058a2 <oc_allocate_mbuf+0x50>
 8005872:	842a                	mv	s0,a0
    return oc_transports[oe->ep.oe_type]->ot_ep_size(oe);
 8005874:	43dc                	lw	a5,4(a5)
 8005876:	9782                	jalr	a5
 8005878:	892a                	mv	s2,a0
    m = os_msys_get_pkthdr(0, ep_size);
 800587a:	01051593          	slli	a1,a0,0x10
 800587e:	81c1                	srli	a1,a1,0x10
 8005880:	4501                	li	a0,0
 8005882:	6e4020ef          	jal	ra,8007f66 <os_msys_get_pkthdr>
 8005886:	84aa                	mv	s1,a0
    if (!m) {
 8005888:	c511                	beqz	a0,8005894 <oc_allocate_mbuf+0x42>
    memcpy(OC_MBUF_ENDPOINT(m), oe, ep_size);
 800588a:	864a                	mv	a2,s2
 800588c:	85a2                	mv	a1,s0
 800588e:	0561                	addi	a0,a0,24
 8005890:	328030ef          	jal	ra,8008bb8 <memcpy>
}
 8005894:	8526                	mv	a0,s1
 8005896:	40b2                	lw	ra,12(sp)
 8005898:	4422                	lw	s0,8(sp)
 800589a:	4492                	lw	s1,4(sp)
 800589c:	4902                	lw	s2,0(sp)
 800589e:	0141                	addi	sp,sp,16
 80058a0:	8082                	ret
    assert(oc_transports[oe->ep.oe_type]);
 80058a2:	4681                	li	a3,0
 80058a4:	4601                	li	a2,0
 80058a6:	4581                	li	a1,0
 80058a8:	4501                	li	a0,0
 80058aa:	728010ef          	jal	ra,8006fd2 <__assert_func>

080058ae <oc_send_message>:
{
 80058ae:	1141                	addi	sp,sp,-16
 80058b0:	c606                	sw	ra,12(sp)
 80058b2:	c422                	sw	s0,8(sp)
 80058b4:	842a                	mv	s0,a0
    rc = os_mqueue_put(&oc_outq, oc_evq_get(), m);
 80058b6:	15b000ef          	jal	ra,8006210 <oc_evq_get>
 80058ba:	8622                	mv	a2,s0
 80058bc:	85aa                	mv	a1,a0
 80058be:	a5c18513          	addi	a0,gp,-1444 # 2000077c <oc_outq>
 80058c2:	765010ef          	jal	ra,8007826 <os_mqueue_put>
    assert(rc == 0);
 80058c6:	e509                	bnez	a0,80058d0 <oc_send_message+0x22>
}
 80058c8:	40b2                	lw	ra,12(sp)
 80058ca:	4422                	lw	s0,8(sp)
 80058cc:	0141                	addi	sp,sp,16
 80058ce:	8082                	ret
    assert(rc == 0);
 80058d0:	4681                	li	a3,0
 80058d2:	4601                	li	a2,0
 80058d4:	4581                	li	a1,0
 80058d6:	4501                	li	a0,0
 80058d8:	6fa010ef          	jal	ra,8006fd2 <__assert_func>

080058dc <oc_buffer_init>:

void
oc_buffer_init(void)
{
 80058dc:	1141                	addi	sp,sp,-16
 80058de:	c606                	sw	ra,12(sp)
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
 80058e0:	4601                	li	a2,0
 80058e2:	080065b7          	lui	a1,0x8006
 80058e6:	82c58593          	addi	a1,a1,-2004 # 800582c <oc_buffer_rx>
 80058ea:	a4418513          	addi	a0,gp,-1468 # 20000764 <oc_inq>
 80058ee:	6d1010ef          	jal	ra,80077be <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
 80058f2:	4601                	li	a2,0
 80058f4:	080055b7          	lui	a1,0x8005
 80058f8:	7fe58593          	addi	a1,a1,2046 # 80057fe <oc_buffer_tx>
 80058fc:	a5c18513          	addi	a0,gp,-1444 # 2000077c <oc_outq>
 8005900:	6bf010ef          	jal	ra,80077be <os_mqueue_init>
}
 8005904:	40b2                	lw	ra,12(sp)
 8005906:	0141                	addi	sp,sp,16
 8005908:	8082                	ret

0800590a <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
 800590a:	1141                	addi	sp,sp,-16
 800590c:	c606                	sw	ra,12(sp)
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
 800590e:	0800d737          	lui	a4,0x800d
 8005912:	60870713          	addi	a4,a4,1544 # 800d608 <sensor_node_addresses+0x28>
 8005916:	a9018693          	addi	a3,gp,-1392 # 200007b0 <oc_rep_objects_area>
 800591a:	4661                	li	a2,24
 800591c:	4589                	li	a1,2
 800591e:	a7418513          	addi	a0,gp,-1420 # 20000794 <oc_rep_objects>
 8005922:	4ae020ef          	jal	ra,8007dd0 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
 8005926:	40b2                	lw	ra,12(sp)
 8005928:	0141                	addi	sp,sp,16
 800592a:	8082                	ret

0800592c <free_client_cb>:
}

#ifdef OC_CLIENT
static void
free_client_cb(oc_client_cb_t *cb)
{
 800592c:	1141                	addi	sp,sp,-16
 800592e:	c606                	sw	ra,12(sp)
 8005930:	c422                	sw	s0,8(sp)
 8005932:	842a                	mv	s0,a0
    os_callout_stop(&cb->callout);
 8005934:	0511                	addi	a0,a0,4
 8005936:	12d010ef          	jal	ra,8007262 <os_callout_stop>
    oc_free_string(&cb->uri);
 800593a:	02440513          	addi	a0,s0,36
 800593e:	203000ef          	jal	ra,8006340 <oc_free_string>
    SLIST_REMOVE(&oc_client_cbs, cb, oc_client_cb, next);
 8005942:	8781a703          	lw	a4,-1928(gp) # 20000598 <oc_client_cbs>
 8005946:	00871763          	bne	a4,s0,8005954 <free_client_cb+0x28>
 800594a:	4318                	lw	a4,0(a4)
 800594c:	86e1ac23          	sw	a4,-1928(gp) # 20000598 <oc_client_cbs>
 8005950:	a039                	j	800595e <free_client_cb+0x32>
 8005952:	873e                	mv	a4,a5
 8005954:	431c                	lw	a5,0(a4)
 8005956:	fe879ee3          	bne	a5,s0,8005952 <free_client_cb+0x26>
 800595a:	439c                	lw	a5,0(a5)
 800595c:	c31c                	sw	a5,0(a4)
    os_memblock_put(&oc_client_cb_pool, cb);
 800595e:	85a2                	mv	a1,s0
 8005960:	b9018513          	addi	a0,gp,-1136 # 200008b0 <oc_client_cb_pool>
 8005964:	4f6020ef          	jal	ra,8007e5a <os_memblock_put>
}
 8005968:	40b2                	lw	ra,12(sp)
 800596a:	4422                	lw	s0,8(sp)
 800596c:	0141                	addi	sp,sp,16
 800596e:	8082                	ret

08005970 <oc_ri_remove_cb>:
    return NULL;
}

static void
oc_ri_remove_cb(struct os_event *ev)
{
 8005970:	1141                	addi	sp,sp,-16
 8005972:	c606                	sw	ra,12(sp)
    struct oc_client_cb *cb;

    cb = ev->ev_arg;

    free_client_cb(cb);
 8005974:	4508                	lw	a0,8(a0)
 8005976:	3f5d                	jal	800592c <free_client_cb>
}
 8005978:	40b2                	lw	ra,12(sp)
 800597a:	0141                	addi	sp,sp,16
 800597c:	8082                	ret

0800597e <oc_ri_mem_init>:
{
 800597e:	1141                	addi	sp,sp,-16
 8005980:	c606                	sw	ra,12(sp)
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
 8005982:	0800d737          	lui	a4,0x800d
 8005986:	61470713          	addi	a4,a4,1556 # 800d614 <sensor_node_addresses+0x34>
 800598a:	ac018693          	addi	a3,gp,-1344 # 200007e0 <oc_client_cb_area>
 800598e:	06800613          	li	a2,104
 8005992:	4589                	li	a1,2
 8005994:	b9018513          	addi	a0,gp,-1136 # 200008b0 <oc_client_cb_pool>
 8005998:	438020ef          	jal	ra,8007dd0 <os_mempool_init>
    oc_rep_init();
 800599c:	37bd                	jal	800590a <oc_rep_init>
    oc_buffer_init();
 800599e:	3f3d                	jal	80058dc <oc_buffer_init>
}
 80059a0:	40b2                	lw	ra,12(sp)
 80059a2:	0141                	addi	sp,sp,16
 80059a4:	8082                	ret

080059a6 <oc_ri_remove_client_cb_by_mid>:
    SLIST_FOREACH(cb, &oc_client_cbs, next) {
 80059a6:	8781a783          	lw	a5,-1928(gp) # 20000598 <oc_client_cbs>
 80059aa:	c799                	beqz	a5,80059b8 <oc_ri_remove_client_cb_by_mid+0x12>
        if (cb->mid == mid) {
 80059ac:	0367d703          	lhu	a4,54(a5)
 80059b0:	00a70463          	beq	a4,a0,80059b8 <oc_ri_remove_client_cb_by_mid+0x12>
    SLIST_FOREACH(cb, &oc_client_cbs, next) {
 80059b4:	439c                	lw	a5,0(a5)
 80059b6:	bfd5                	j	80059aa <oc_ri_remove_client_cb_by_mid+0x4>
    if (cb) {
 80059b8:	cb81                	beqz	a5,80059c8 <oc_ri_remove_client_cb_by_mid+0x22>
{
 80059ba:	1141                	addi	sp,sp,-16
 80059bc:	c606                	sw	ra,12(sp)
        free_client_cb(cb);
 80059be:	853e                	mv	a0,a5
 80059c0:	37b5                	jal	800592c <free_client_cb>
}
 80059c2:	40b2                	lw	ra,12(sp)
 80059c4:	0141                	addi	sp,sp,16
 80059c6:	8082                	ret
 80059c8:	8082                	ret

080059ca <oc_ri_alloc_client_cb>:

oc_client_cb_t *
oc_ri_alloc_client_cb(const char *uri, oc_server_handle_t *server,
                      oc_method_t method, void *handler, oc_qos_t qos)
{
 80059ca:	7179                	addi	sp,sp,-48
 80059cc:	d606                	sw	ra,44(sp)
 80059ce:	d422                	sw	s0,40(sp)
 80059d0:	d226                	sw	s1,36(sp)
 80059d2:	d04a                	sw	s2,32(sp)
 80059d4:	ce4e                	sw	s3,28(sp)
 80059d6:	cc52                	sw	s4,24(sp)
 80059d8:	ca56                	sw	s5,20(sp)
 80059da:	8aaa                	mv	s5,a0
 80059dc:	892e                	mv	s2,a1
 80059de:	8a32                	mv	s4,a2
 80059e0:	84b6                	mv	s1,a3
 80059e2:	89ba                	mv	s3,a4
    oc_client_cb_t *cb;

    cb = os_memblock_get(&oc_client_cb_pool);
 80059e4:	b9018513          	addi	a0,gp,-1136 # 200008b0 <oc_client_cb_pool>
 80059e8:	3f8020ef          	jal	ra,8007de0 <os_memblock_get>
 80059ec:	842a                	mv	s0,a0
    if (!cb) {
 80059ee:	c159                	beqz	a0,8005a74 <oc_ri_alloc_client_cb+0xaa>
        return NULL;
    }
    cb->mid = coap_get_mid();
 80059f0:	24f9                	jal	8005cbe <coap_get_mid>
 80059f2:	02a41b23          	sh	a0,54(s0)
    oc_new_string(&cb->uri, uri);
 80059f6:	85d6                	mv	a1,s5
 80059f8:	02440513          	addi	a0,s0,36
 80059fc:	101000ef          	jal	ra,80062fc <oc_new_string>
    cb->method = method;
 8005a00:	07442223          	sw	s4,100(s0)
    cb->qos = qos;
 8005a04:	07342023          	sw	s3,96(s0)
    cb->handler = handler;
 8005a08:	c824                	sw	s1,80(s0)
    cb->token_len = 8;
 8005a0a:	47a1                	li	a5,8
 8005a0c:	02f40a23          	sb	a5,52(s0)
    int i = 0;
 8005a10:	4481                	li	s1,0
    uint16_t r;
    while (i < cb->token_len) {
 8005a12:	03444783          	lbu	a5,52(s0)
 8005a16:	02f4d163          	bge	s1,a5,8005a38 <oc_ri_alloc_client_cb+0x6e>
        r = oc_random_rand();
 8005a1a:	0d1000ef          	jal	ra,80062ea <oc_random_rand>
 8005a1e:	00a11723          	sh	a0,14(sp)
        memcpy(cb->token + i, &r, sizeof(r));
 8005a22:	02c40793          	addi	a5,s0,44
 8005a26:	97a6                	add	a5,a5,s1
 8005a28:	00a78023          	sb	a0,0(a5)
 8005a2c:	00f14703          	lbu	a4,15(sp)
 8005a30:	00e780a3          	sb	a4,1(a5)
        i += sizeof(r);
 8005a34:	0489                	addi	s1,s1,2
 8005a36:	bff1                	j	8005a12 <oc_ri_alloc_client_cb+0x48>
    }
    cb->discovery = false;
 8005a38:	04040a23          	sb	zero,84(s0)
    cb->timestamp = oc_clock_time();
 8005a3c:	0a1000ef          	jal	ra,80062dc <oc_clock_time>
 8005a40:	cc68                	sw	a0,92(s0)
    cb->observe_seq = -1;
 8005a42:	57fd                	li	a5,-1
 8005a44:	cc3c                	sw	a5,88(s0)
    memcpy(&cb->server, server, sizeof(oc_server_handle_t));
 8005a46:	4661                	li	a2,24
 8005a48:	85ca                	mv	a1,s2
 8005a4a:	03840513          	addi	a0,s0,56
 8005a4e:	16a030ef          	jal	ra,8008bb8 <memcpy>

    os_callout_init(&cb->callout, oc_evq_get(), oc_ri_remove_cb, cb);
 8005a52:	7be000ef          	jal	ra,8006210 <oc_evq_get>
 8005a56:	86a2                	mv	a3,s0
 8005a58:	08006637          	lui	a2,0x8006
 8005a5c:	97060613          	addi	a2,a2,-1680 # 8005970 <oc_ri_remove_cb>
 8005a60:	85aa                	mv	a1,a0
 8005a62:	00440513          	addi	a0,s0,4
 8005a66:	7c6010ef          	jal	ra,800722c <os_callout_init>

    SLIST_INSERT_HEAD(&oc_client_cbs, cb, next);
 8005a6a:	87818793          	addi	a5,gp,-1928 # 20000598 <oc_client_cbs>
 8005a6e:	4398                	lw	a4,0(a5)
 8005a70:	c018                	sw	a4,0(s0)
 8005a72:	c380                	sw	s0,0(a5)
    return cb;
}
 8005a74:	8522                	mv	a0,s0
 8005a76:	50b2                	lw	ra,44(sp)
 8005a78:	5422                	lw	s0,40(sp)
 8005a7a:	5492                	lw	s1,36(sp)
 8005a7c:	5902                	lw	s2,32(sp)
 8005a7e:	49f2                	lw	s3,28(sp)
 8005a80:	4a62                	lw	s4,24(sp)
 8005a82:	4ad2                	lw	s5,20(sp)
 8005a84:	6145                	addi	sp,sp,48
 8005a86:	8082                	ret

08005a88 <coap_log_2>:
/*---------------------------------------------------------------------------*/
/*- Local helper functions --------------------------------------------------*/
/*---------------------------------------------------------------------------*/
static uint16_t
coap_log_2(uint16_t value)
{
 8005a88:	872a                	mv	a4,a0
    uint16_t result = 0;
 8005a8a:	4501                	li	a0,0
 8005a8c:	a011                	j	8005a90 <coap_log_2+0x8>

    do {
        value = value >> 1;
        result++;
 8005a8e:	853e                	mv	a0,a5
        value = value >> 1;
 8005a90:	8305                	srli	a4,a4,0x1
        result++;
 8005a92:	00150793          	addi	a5,a0,1
 8005a96:	07c2                	slli	a5,a5,0x10
 8005a98:	83c1                	srli	a5,a5,0x10
    } while (value);
 8005a9a:	fb75                	bnez	a4,8005a8e <coap_log_2+0x6>

    return (result - 1);
}
 8005a9c:	8082                	ret

08005a9e <coap_option_nibble>:
}
/*---------------------------------------------------------------------------*/
static uint8_t
coap_option_nibble(unsigned int value)
{
    if (value < 13) {
 8005a9e:	47b1                	li	a5,12
 8005aa0:	00a7f863          	bgeu	a5,a0,8005ab0 <coap_option_nibble+0x12>
        return value;
    } else if (value <= 0xFF + 13) {
 8005aa4:	10c00793          	li	a5,268
 8005aa8:	00a7e763          	bltu	a5,a0,8005ab6 <coap_option_nibble+0x18>
        return 13;
 8005aac:	4535                	li	a0,13
 8005aae:	8082                	ret
        return value;
 8005ab0:	0ff57513          	andi	a0,a0,255
 8005ab4:	8082                	ret
    } else {
        return 14;
 8005ab6:	4539                	li	a0,14
    }
}
 8005ab8:	8082                	ret

08005aba <coap_append_opt_hdr>:
/*---------------------------------------------------------------------------*/

static int
coap_append_opt_hdr(struct os_mbuf *m, unsigned int delta, size_t length)
{
 8005aba:	7179                	addi	sp,sp,-48
 8005abc:	d606                	sw	ra,44(sp)
 8005abe:	d422                	sw	s0,40(sp)
 8005ac0:	d226                	sw	s1,36(sp)
 8005ac2:	d04a                	sw	s2,32(sp)
 8005ac4:	ce4e                	sw	s3,28(sp)
 8005ac6:	892a                	mv	s2,a0
 8005ac8:	84ae                	mv	s1,a1
 8005aca:	8432                	mv	s0,a2
    uint8_t buffer[4];
    size_t written = 0;

    buffer[0] = coap_option_nibble(delta) << 4 | coap_option_nibble(length);
 8005acc:	852e                	mv	a0,a1
 8005ace:	3fc1                	jal	8005a9e <coap_option_nibble>
 8005ad0:	00451993          	slli	s3,a0,0x4
 8005ad4:	8522                	mv	a0,s0
 8005ad6:	37e1                	jal	8005a9e <coap_option_nibble>
 8005ad8:	0562                	slli	a0,a0,0x18
 8005ada:	8561                	srai	a0,a0,0x18
 8005adc:	01356533          	or	a0,a0,s3
 8005ae0:	00a10623          	sb	a0,12(sp)

    if (delta > 268) {
 8005ae4:	10c00793          	li	a5,268
 8005ae8:	0497fa63          	bgeu	a5,s1,8005b3c <coap_append_opt_hdr+0x82>
        buffer[++written] = ((delta - 269) >> 8) & 0xff;
 8005aec:	ef348793          	addi	a5,s1,-269
 8005af0:	83a1                	srli	a5,a5,0x8
 8005af2:	00f106a3          	sb	a5,13(sp)
        buffer[++written] = (delta - 269) & 0xff;
 8005af6:	14cd                	addi	s1,s1,-13
 8005af8:	00910723          	sb	s1,14(sp)
 8005afc:	4609                	li	a2,2
    } else if (delta > 12) {
        buffer[++written] = (delta - 13);
    }

    if (length > 268) {
 8005afe:	10c00793          	li	a5,268
 8005b02:	0487f763          	bgeu	a5,s0,8005b50 <coap_append_opt_hdr+0x96>
        buffer[++written] = ((length - 269) >> 8) & 0xff;
 8005b06:	ef340793          	addi	a5,s0,-269
 8005b0a:	83a1                	srli	a5,a5,0x8
 8005b0c:	0818                	addi	a4,sp,16
 8005b0e:	9732                	add	a4,a4,a2
 8005b10:	fef70ea3          	sb	a5,-3(a4)
        buffer[++written] = (length - 269) & 0xff;
 8005b14:	0609                	addi	a2,a2,2
 8005b16:	144d                	addi	s0,s0,-13
 8005b18:	081c                	addi	a5,sp,16
 8005b1a:	97b2                	add	a5,a5,a2
 8005b1c:	fe878e23          	sb	s0,-4(a5)
    } else if (length > 12) {
        buffer[++written] = (length - 13);
    }

    return os_mbuf_append(m, buffer, written + 1);
 8005b20:	0605                	addi	a2,a2,1
 8005b22:	0642                	slli	a2,a2,0x10
 8005b24:	8241                	srli	a2,a2,0x10
 8005b26:	006c                	addi	a1,sp,12
 8005b28:	854a                	mv	a0,s2
 8005b2a:	637010ef          	jal	ra,8007960 <os_mbuf_append>
}
 8005b2e:	50b2                	lw	ra,44(sp)
 8005b30:	5422                	lw	s0,40(sp)
 8005b32:	5492                	lw	s1,36(sp)
 8005b34:	5902                	lw	s2,32(sp)
 8005b36:	49f2                	lw	s3,28(sp)
 8005b38:	6145                	addi	sp,sp,48
 8005b3a:	8082                	ret
    } else if (delta > 12) {
 8005b3c:	47b1                	li	a5,12
 8005b3e:	0097f763          	bgeu	a5,s1,8005b4c <coap_append_opt_hdr+0x92>
        buffer[++written] = (delta - 13);
 8005b42:	14cd                	addi	s1,s1,-13
 8005b44:	009106a3          	sb	s1,13(sp)
 8005b48:	4605                	li	a2,1
 8005b4a:	bf55                	j	8005afe <coap_append_opt_hdr+0x44>
    size_t written = 0;
 8005b4c:	4601                	li	a2,0
 8005b4e:	bf45                	j	8005afe <coap_append_opt_hdr+0x44>
    } else if (length > 12) {
 8005b50:	47b1                	li	a5,12
 8005b52:	fc87f7e3          	bgeu	a5,s0,8005b20 <coap_append_opt_hdr+0x66>
        buffer[++written] = (length - 13);
 8005b56:	0605                	addi	a2,a2,1
 8005b58:	144d                	addi	s0,s0,-13
 8005b5a:	081c                	addi	a5,sp,16
 8005b5c:	97b2                	add	a5,a5,a2
 8005b5e:	fe878e23          	sb	s0,-4(a5)
 8005b62:	bf7d                	j	8005b20 <coap_append_opt_hdr+0x66>

08005b64 <coap_append_array_opt>:
/*---------------------------------------------------------------------------*/
static int
coap_append_array_opt(struct os_mbuf *m,
                      unsigned int number, unsigned int current_number,
                      uint8_t *array, size_t length, char split_char)
{
 8005b64:	7179                	addi	sp,sp,-48
 8005b66:	d606                	sw	ra,44(sp)
 8005b68:	d422                	sw	s0,40(sp)
 8005b6a:	d226                	sw	s1,36(sp)
 8005b6c:	d04a                	sw	s2,32(sp)
 8005b6e:	ce4e                	sw	s3,28(sp)
 8005b70:	cc52                	sw	s4,24(sp)
 8005b72:	ca56                	sw	s5,20(sp)
 8005b74:	c85a                	sw	s6,16(sp)
 8005b76:	c65e                	sw	s7,12(sp)
 8005b78:	8b2a                	mv	s6,a0
 8005b7a:	8bae                	mv	s7,a1
 8005b7c:	85b2                	mv	a1,a2
 8005b7e:	89b6                	mv	s3,a3
 8005b80:	893a                	mv	s2,a4
    uint8_t *part_end = NULL;
    size_t blk;

    OC_LOG(DEBUG, "ARRAY type %u, len %zu\n", number, length);

    if (split_char != '\0') {
 8005b82:	c7a5                	beqz	a5,8005bea <coap_append_array_opt+0x86>
 8005b84:	8abe                	mv	s5,a5
    uint8_t *part_start = array;
 8005b86:	8a36                	mv	s4,a3
        for (j = 0; j <= length + 1; ++j) {
 8005b88:	4401                	li	s0,0
 8005b8a:	a035                	j	8005bb6 <coap_append_array_opt+0x52>
            if (array[j] == split_char || j == length) {
                part_end = array + j;
                blk = part_end - part_start;
 8005b8c:	414604b3          	sub	s1,a2,s4

                rc = coap_append_opt_hdr(m, number - current_number, blk);
 8005b90:	8626                	mv	a2,s1
 8005b92:	40bb85b3          	sub	a1,s7,a1
 8005b96:	855a                	mv	a0,s6
 8005b98:	370d                	jal	8005aba <coap_append_opt_hdr>
                if (rc) {
 8005b9a:	ed0d                	bnez	a0,8005bd4 <coap_append_array_opt+0x70>
                    return rc;
                }
                rc = os_mbuf_append(m, part_start, blk);
 8005b9c:	01049613          	slli	a2,s1,0x10
 8005ba0:	8241                	srli	a2,a2,0x10
 8005ba2:	85d2                	mv	a1,s4
 8005ba4:	855a                	mv	a0,s6
 8005ba6:	5bb010ef          	jal	ra,8007960 <os_mbuf_append>
                if (rc) {
 8005baa:	e50d                	bnez	a0,8005bd4 <coap_append_array_opt+0x70>
                }

                OC_LOG(DEBUG, "OPTION type %u, delta %u, len %zu\n", number,
                    number - current_number, (int)blk);

                ++j; /* skip the splitter */
 8005bac:	0405                	addi	s0,s0,1
                current_number = number;
                part_start = array + j;
 8005bae:	00898a33          	add	s4,s3,s0
                current_number = number;
 8005bb2:	85de                	mv	a1,s7
        for (j = 0; j <= length + 1; ++j) {
 8005bb4:	0405                	addi	s0,s0,1
 8005bb6:	00190793          	addi	a5,s2,1
 8005bba:	8722                	mv	a4,s0
 8005bbc:	0087eb63          	bltu	a5,s0,8005bd2 <coap_append_array_opt+0x6e>
            if (array[j] == split_char || j == length) {
 8005bc0:	00898633          	add	a2,s3,s0
 8005bc4:	00064783          	lbu	a5,0(a2)
 8005bc8:	fd5782e3          	beq	a5,s5,8005b8c <coap_append_array_opt+0x28>
 8005bcc:	ff2714e3          	bne	a4,s2,8005bb4 <coap_append_array_opt+0x50>
 8005bd0:	bf75                	j	8005b8c <coap_append_array_opt+0x28>

        OC_LOG(DEBUG, "OPTION type %u, delta %u, len %zu\n", number,
            number - current_number, length);
    }

    return 0;
 8005bd2:	4501                	li	a0,0
}
 8005bd4:	50b2                	lw	ra,44(sp)
 8005bd6:	5422                	lw	s0,40(sp)
 8005bd8:	5492                	lw	s1,36(sp)
 8005bda:	5902                	lw	s2,32(sp)
 8005bdc:	49f2                	lw	s3,28(sp)
 8005bde:	4a62                	lw	s4,24(sp)
 8005be0:	4ad2                	lw	s5,20(sp)
 8005be2:	4b42                	lw	s6,16(sp)
 8005be4:	4bb2                	lw	s7,12(sp)
 8005be6:	6145                	addi	sp,sp,48
 8005be8:	8082                	ret
        rc = coap_append_opt_hdr(m, number - current_number, length);
 8005bea:	863a                	mv	a2,a4
 8005bec:	40bb85b3          	sub	a1,s7,a1
 8005bf0:	35e9                	jal	8005aba <coap_append_opt_hdr>
        if (rc) {
 8005bf2:	f16d                	bnez	a0,8005bd4 <coap_append_array_opt+0x70>
        rc = os_mbuf_append(m, array, length);
 8005bf4:	01091613          	slli	a2,s2,0x10
 8005bf8:	8241                	srli	a2,a2,0x10
 8005bfa:	85ce                	mv	a1,s3
 8005bfc:	855a                	mv	a0,s6
 8005bfe:	563010ef          	jal	ra,8007960 <os_mbuf_append>
        if (rc) {
 8005c02:	bfc9                	j	8005bd4 <coap_append_array_opt+0x70>

08005c04 <coap_append_int_opt>:
{
 8005c04:	7139                	addi	sp,sp,-64
 8005c06:	de06                	sw	ra,60(sp)
 8005c08:	dc22                	sw	s0,56(sp)
 8005c0a:	da26                	sw	s1,52(sp)
 8005c0c:	d84a                	sw	s2,48(sp)
 8005c0e:	d64e                	sw	s3,44(sp)
 8005c10:	d452                	sw	s4,40(sp)
 8005c12:	d256                	sw	s5,36(sp)
 8005c14:	d05a                	sw	s6,32(sp)
 8005c16:	ce5e                	sw	s7,28(sp)
 8005c18:	cc62                	sw	s8,24(sp)
 8005c1a:	8b2a                	mv	s6,a0
 8005c1c:	87b2                	mv	a5,a2
 8005c1e:	8436                	mv	s0,a3
    if (0xFF000000 & value) {
 8005c20:	ff000937          	lui	s2,0xff000
 8005c24:	0126f933          	and	s2,a3,s2
 8005c28:	00091963          	bnez	s2,8005c3a <coap_append_int_opt+0x36>
    size_t i = 0;
 8005c2c:	4a81                	li	s5,0
    if (0xFFFF0000 & value) {
 8005c2e:	74c1                	lui	s1,0xffff0
 8005c30:	8ce1                	and	s1,s1,s0
 8005c32:	c491                	beqz	s1,8005c3e <coap_append_int_opt+0x3a>
        ++i;
 8005c34:	001a8a13          	addi	s4,s5,1
 8005c38:	a021                	j	8005c40 <coap_append_int_opt+0x3c>
        ++i;
 8005c3a:	4a85                	li	s5,1
 8005c3c:	bfcd                	j	8005c2e <coap_append_int_opt+0x2a>
 8005c3e:	8a56                	mv	s4,s5
    if (0xFFFFFF00 & value) {
 8005c40:	f0047c13          	andi	s8,s0,-256
 8005c44:	000c0563          	beqz	s8,8005c4e <coap_append_int_opt+0x4a>
        ++i;
 8005c48:	001a0993          	addi	s3,s4,1
 8005c4c:	a011                	j	8005c50 <coap_append_int_opt+0x4c>
 8005c4e:	89d2                	mv	s3,s4
    if (0xFFFFFFFF & value) {
 8005c50:	c401                	beqz	s0,8005c58 <coap_append_int_opt+0x54>
        ++i;
 8005c52:	00198b93          	addi	s7,s3,1
 8005c56:	a011                	j	8005c5a <coap_append_int_opt+0x56>
 8005c58:	8bce                	mv	s7,s3
    rc = coap_append_opt_hdr(m, number - current_number, i);
 8005c5a:	865e                	mv	a2,s7
 8005c5c:	8d9d                	sub	a1,a1,a5
 8005c5e:	855a                	mv	a0,s6
 8005c60:	3da9                	jal	8005aba <coap_append_opt_hdr>
    if (rc) {
 8005c62:	e131                	bnez	a0,8005ca6 <coap_append_int_opt+0xa2>
    if (0xFF000000 & value) {
 8005c64:	00090663          	beqz	s2,8005c70 <coap_append_int_opt+0x6c>
        buffer[i++] = (uint8_t)(value >> 24);
 8005c68:	01845793          	srli	a5,s0,0x18
 8005c6c:	00f10623          	sb	a5,12(sp)
    if (0xFFFF0000 & value) {
 8005c70:	c499                	beqz	s1,8005c7e <coap_append_int_opt+0x7a>
        buffer[i++] = (uint8_t)(value >> 16);
 8005c72:	01045793          	srli	a5,s0,0x10
 8005c76:	0818                	addi	a4,sp,16
 8005c78:	9aba                	add	s5,s5,a4
 8005c7a:	fefa8e23          	sb	a5,-4(s5)
    if (0xFFFFFF00 & value) {
 8005c7e:	000c0863          	beqz	s8,8005c8e <coap_append_int_opt+0x8a>
        buffer[i++] = (uint8_t)(value >> 8);
 8005c82:	00845793          	srli	a5,s0,0x8
 8005c86:	0818                	addi	a4,sp,16
 8005c88:	9a3a                	add	s4,s4,a4
 8005c8a:	fefa0e23          	sb	a5,-4(s4)
    if (0xFFFFFFFF & value) {
 8005c8e:	c409                	beqz	s0,8005c98 <coap_append_int_opt+0x94>
        buffer[i++] = (uint8_t)(value);
 8005c90:	081c                	addi	a5,sp,16
 8005c92:	99be                	add	s3,s3,a5
 8005c94:	fe898e23          	sb	s0,-4(s3)
    return os_mbuf_append(m, buffer, i);
 8005c98:	010b9613          	slli	a2,s7,0x10
 8005c9c:	8241                	srli	a2,a2,0x10
 8005c9e:	006c                	addi	a1,sp,12
 8005ca0:	855a                	mv	a0,s6
 8005ca2:	4bf010ef          	jal	ra,8007960 <os_mbuf_append>
}
 8005ca6:	50f2                	lw	ra,60(sp)
 8005ca8:	5462                	lw	s0,56(sp)
 8005caa:	54d2                	lw	s1,52(sp)
 8005cac:	5942                	lw	s2,48(sp)
 8005cae:	59b2                	lw	s3,44(sp)
 8005cb0:	5a22                	lw	s4,40(sp)
 8005cb2:	5a92                	lw	s5,36(sp)
 8005cb4:	5b02                	lw	s6,32(sp)
 8005cb6:	4bf2                	lw	s7,28(sp)
 8005cb8:	4c62                	lw	s8,24(sp)
 8005cba:	6121                	addi	sp,sp,64
 8005cbc:	8082                	ret

08005cbe <coap_get_mid>:
}
/*---------------------------------------------------------------------------*/
uint16_t
coap_get_mid(void)
{
    return ++current_mid;
 8005cbe:	87c18793          	addi	a5,gp,-1924 # 2000059c <current_mid>
 8005cc2:	0007d503          	lhu	a0,0(a5)
 8005cc6:	0505                	addi	a0,a0,1
 8005cc8:	0542                	slli	a0,a0,0x10
 8005cca:	8141                	srli	a0,a0,0x10
 8005ccc:	00a79023          	sh	a0,0(a5)
}
 8005cd0:	8082                	ret

08005cd2 <coap_init_message>:
/*---------------------------------------------------------------------------*/
void
coap_init_message(coap_packet_t *pkt, coap_message_type_t type,
                  uint8_t code, uint16_t mid)
{
 8005cd2:	1101                	addi	sp,sp,-32
 8005cd4:	ce06                	sw	ra,28(sp)
 8005cd6:	cc22                	sw	s0,24(sp)
 8005cd8:	ca26                	sw	s1,20(sp)
 8005cda:	c84a                	sw	s2,16(sp)
 8005cdc:	c64e                	sw	s3,12(sp)
 8005cde:	842a                	mv	s0,a0
 8005ce0:	89ae                	mv	s3,a1
 8005ce2:	8932                	mv	s2,a2
 8005ce4:	84b6                	mv	s1,a3
    /* Important thing */
    memset(pkt, 0, sizeof(coap_packet_t));
 8005ce6:	07000613          	li	a2,112
 8005cea:	4581                	li	a1,0
 8005cec:	6e7020ef          	jal	ra,8008bd2 <memset>

    pkt->type = type;
 8005cf0:	01342223          	sw	s3,4(s0)
    pkt->code = code;
 8005cf4:	01240423          	sb	s2,8(s0)
    pkt->mid = mid;
 8005cf8:	00941523          	sh	s1,10(s0)
}
 8005cfc:	40f2                	lw	ra,28(sp)
 8005cfe:	4462                	lw	s0,24(sp)
 8005d00:	44d2                	lw	s1,20(sp)
 8005d02:	4942                	lw	s2,16(sp)
 8005d04:	49b2                	lw	s3,12(sp)
 8005d06:	6105                	addi	sp,sp,32
 8005d08:	8082                	ret

08005d0a <coap_serialize_message>:

/*---------------------------------------------------------------------------*/

int
coap_serialize_message(coap_packet_t *pkt, struct os_mbuf *m)
{
 8005d0a:	7179                	addi	sp,sp,-48
 8005d0c:	d606                	sw	ra,44(sp)
 8005d0e:	d422                	sw	s0,40(sp)
 8005d10:	d226                	sw	s1,36(sp)
 8005d12:	d04a                	sw	s2,32(sp)
 8005d14:	ce4e                	sw	s3,28(sp)
 8005d16:	cc52                	sw	s4,24(sp)
 8005d18:	842a                	mv	s0,a0
 8005d1a:	84ae                	mv	s1,a1
    uint32_t u32;
    int tcp_hdr;
    int len, data_len;

    /* Initialize */
    pkt->version = 1;
 8005d1c:	4785                	li	a5,1
 8005d1e:	00f50023          	sb	a5,0(a0)
 * Whether transport uses TCP-style headers or not.
 */
static inline int
oc_endpoint_use_tcp(struct oc_endpoint *oe)
{
    return oc_transports[oe->ep.oe_type]->ot_flags & OC_TRANSPORT_USE_TCP;
 8005d22:	0185c783          	lbu	a5,24(a1)
 8005d26:	8b9d                	andi	a5,a5,7
 8005d28:	078a                	slli	a5,a5,0x2
 8005d2a:	20003737          	lui	a4,0x20003
 8005d2e:	a5070713          	addi	a4,a4,-1456 # 20002a50 <oc_transports>
 8005d32:	97ba                	add	a5,a5,a4
 8005d34:	439c                	lw	a5,0(a5)
 8005d36:	0007c983          	lbu	s3,0(a5)
 8005d3a:	0019f993          	andi	s3,s3,1

    /*
     * Move data pointer, leave enough space to insert coap header and
     * token before options.
     */
    m->om_data += (sizeof(struct coap_tcp_hdr32) + pkt->token_len);
 8005d3e:	00c54783          	lbu	a5,12(a0)
 8005d42:	00678713          	addi	a4,a5,6
 8005d46:	419c                	lw	a5,0(a1)
 8005d48:	97ba                	add	a5,a5,a4
 8005d4a:	c19c                	sw	a5,0(a1)
    COAP_SERIALIZE_BYTE_OPT(pkt, m, COAP_OPTION_ETAG, etag, "ETag");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_IF_NONE_MATCH,
        content_format - pkt-> content_format /* hack to get a zero field */,
                           "If-None-Match");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_OBSERVE, observe, "Observe");
 8005d4c:	01554783          	lbu	a5,21(a0)
 8005d50:	0407f793          	andi	a5,a5,64
 8005d54:	10079a63          	bnez	a5,8005e68 <coap_serialize_message+0x15e>
    current_number = 0;
 8005d58:	4901                	li	s2,0
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_URI_PORT, uri_port,
                              "Uri-Port");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_PATH,
                              location_path, '/', "Location-Path");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 8005d5a:	01644783          	lbu	a5,22(s0)
 8005d5e:	8ba1                	andi	a5,a5,8
 8005d60:	10079c63          	bnez	a5,8005e78 <coap_serialize_message+0x16e>
                              "Uri-Path");

    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_CONTENT_FORMAT, content_format,
 8005d64:	01644783          	lbu	a5,22(s0)
 8005d68:	8bc1                	andi	a5,a5,16
 8005d6a:	12079363          	bnez	a5,8005e90 <coap_serialize_message+0x186>
                           "Content-Format");
#if 0
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_MAX_AGE, max_age, "Max-Age");
#endif
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 8005d6e:	01640783          	lb	a5,22(s0)
 8005d72:	1207c863          	bltz	a5,8005ea2 <coap_serialize_message+0x198>
                              "Uri-Query");
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_ACCEPT, accept, "Accept");
 8005d76:	01744783          	lbu	a5,23(s0)
 8005d7a:	8b89                	andi	a5,a5,2
 8005d7c:	12079f63          	bnez	a5,8005eba <coap_serialize_message+0x1b0>
#if 0
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_LOCATION_QUERY,
                              location_query, '&', "Location-Query");
#endif
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
 8005d80:	01740783          	lb	a5,23(s0)
 8005d84:	1407c463          	bltz	a5,8005ecc <coap_serialize_message+0x1c2>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK1, block1, "Block1");
 8005d88:	01844783          	lbu	a5,24(s0)
 8005d8c:	8ba1                	andi	a5,a5,8
 8005d8e:	cb85                	beqz	a5,8005dbe <coap_serialize_message+0xb4>
 8005d90:	04842a03          	lw	s4,72(s0)
 8005d94:	0a12                	slli	s4,s4,0x4
 8005d96:	04c44783          	lbu	a5,76(s0)
 8005d9a:	c399                	beqz	a5,8005da0 <coap_serialize_message+0x96>
 8005d9c:	008a6a13          	ori	s4,s4,8
 8005da0:	04e45503          	lhu	a0,78(s0)
 8005da4:	8111                	srli	a0,a0,0x4
 8005da6:	31cd                	jal	8005a88 <coap_log_2>
 8005da8:	00f57693          	andi	a3,a0,15
 8005dac:	0146e6b3          	or	a3,a3,s4
 8005db0:	864a                	mv	a2,s2
 8005db2:	45ed                	li	a1,27
 8005db4:	8526                	mv	a0,s1
 8005db6:	35b9                	jal	8005c04 <coap_append_int_opt>
 8005db8:	16051263          	bnez	a0,8005f1c <coap_serialize_message+0x212>
 8005dbc:	496d                	li	s2,27
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE2, size2, "Size2");
 8005dbe:	01844783          	lbu	a5,24(s0)
 8005dc2:	8bc1                	andi	a5,a5,16
 8005dc4:	12079c63          	bnez	a5,8005efc <coap_serialize_message+0x1f2>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_URI, proxy_uri, '\0',
                              "Proxy-Uri");
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_PROXY_SCHEME, proxy_scheme,
                              '\0', "Proxy-Scheme");
#endif
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
 8005dc8:	01c44783          	lbu	a5,28(s0)
 8005dcc:	8bc1                	andi	a5,a5,16
 8005dce:	12079f63          	bnez	a5,8005f0c <coap_serialize_message+0x202>

    /* Payload marker */
    if (pkt->payload_len) {
 8005dd2:	06645783          	lhu	a5,102(s0)
 8005dd6:	16079163          	bnez	a5,8005f38 <coap_serialize_message+0x22e>
        if (os_mbuf_append(m, "\xff", 1)) {
            goto err_mem;
        }
    }
    data_len = OS_MBUF_PKTLEN(m) + pkt->payload_len;
 8005dda:	0104d903          	lhu	s2,16(s1) # ffff0010 <_sp+0xdffeb010>
 8005dde:	06645783          	lhu	a5,102(s0)
 8005de2:	993e                	add	s2,s2,a5

    /*
     * Set header fields, aka CoAP header alignment nightmare.
     */
    if (!tcp_hdr) {
 8005de4:	16098563          	beqz	s3,8005f4e <coap_serialize_message+0x244>
        cuh->code = pkt->code;
        u16 = htons(pkt->mid);
        memcpy(&cuh->id, &u16, sizeof(u16));
        memcpy(cuh + 1, pkt->token, pkt->token_len);
    } else {
        if (data_len < 13) {
 8005de8:	47b1                	li	a5,12
 8005dea:	2127d163          	bge	a5,s2,8005fec <coap_serialize_message+0x2e2>
            cth0 = (struct coap_tcp_hdr0 *)m->om_data;
            cth0->data_len = data_len;
            cth0->token_len = pkt->token_len;
            cth0->code = pkt->code;
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
        } else if (data_len < 269) {
 8005dee:	10c00793          	li	a5,268
 8005df2:	2527d163          	bge	a5,s2,8006034 <coap_serialize_message+0x32a>
            cth8->type = COAP_TCP_TYPE8;
            cth8->token_len = pkt->token_len;
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
            cth8->code = pkt->code;
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
        } else if (data_len < 65805) {
 8005df6:	67c1                	lui	a5,0x10
 8005df8:	10c78793          	addi	a5,a5,268 # 1010c <__stack_size+0xf90c>
 8005dfc:	2927c063          	blt	a5,s2,800607c <coap_serialize_message+0x372>
            len = sizeof(struct coap_tcp_hdr16) + pkt->token_len;
 8005e00:	00c44583          	lbu	a1,12(s0)
            os_mbuf_prepend(m, len);
 8005e04:	0591                	addi	a1,a1,4
 8005e06:	8526                	mv	a0,s1
 8005e08:	605010ef          	jal	ra,8007c0c <os_mbuf_prepend>
            cth16 = (struct coap_tcp_hdr16 *)m->om_data;
 8005e0c:	4088                	lw	a0,0(s1)
            cth16->type = COAP_TCP_TYPE16;
 8005e0e:	00054783          	lbu	a5,0(a0)
 8005e12:	8bbd                	andi	a5,a5,15
 8005e14:	fe07e793          	ori	a5,a5,-32
 8005e18:	00f50023          	sb	a5,0(a0)
            cth16->token_len = pkt->token_len;
 8005e1c:	00c44703          	lbu	a4,12(s0)
 8005e20:	8b3d                	andi	a4,a4,15
 8005e22:	9bc1                	andi	a5,a5,-16
 8005e24:	8fd9                	or	a5,a5,a4
 8005e26:	00f50023          	sb	a5,0(a0)
            u16 = htons(data_len - COAP_TCP_LENGTH16_OFF);
 8005e2a:	ef390913          	addi	s2,s2,-269 # fefffef3 <_sp+0xdeffaef3>
 8005e2e:	40895793          	srai	a5,s2,0x8
 8005e32:	0922                	slli	s2,s2,0x8
 8005e34:	0ff7f793          	andi	a5,a5,255
 8005e38:	0127e7b3          	or	a5,a5,s2
 8005e3c:	07c2                	slli	a5,a5,0x10
 8005e3e:	83c1                	srli	a5,a5,0x10
 8005e40:	00f11723          	sh	a5,14(sp)
            memcpy(&cth16->data_len, &u16, sizeof(u16));
 8005e44:	00f500a3          	sb	a5,1(a0)
 8005e48:	00f14783          	lbu	a5,15(sp)
 8005e4c:	00f50123          	sb	a5,2(a0)
            cth16->code = pkt->code;
 8005e50:	00844783          	lbu	a5,8(s0)
 8005e54:	00f501a3          	sb	a5,3(a0)
            memcpy(cth16 + 1, pkt->token, pkt->token_len);
 8005e58:	00c44603          	lbu	a2,12(s0)
 8005e5c:	00d40593          	addi	a1,s0,13
 8005e60:	0511                	addi	a0,a0,4
 8005e62:	557020ef          	jal	ra,8008bb8 <memcpy>
 8005e66:	a295                	j	8005fca <coap_serialize_message+0x2c0>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_OBSERVE, observe, "Observe");
 8005e68:	5954                	lw	a3,52(a0)
 8005e6a:	4601                	li	a2,0
 8005e6c:	4599                	li	a1,6
 8005e6e:	8526                	mv	a0,s1
 8005e70:	3b51                	jal	8005c04 <coap_append_int_opt>
 8005e72:	e54d                	bnez	a0,8005f1c <coap_serialize_message+0x212>
 8005e74:	4919                	li	s2,6
 8005e76:	b5d5                	j	8005d5a <coap_serialize_message+0x50>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_PATH, uri_path, '/',
 8005e78:	02f00793          	li	a5,47
 8005e7c:	02e45703          	lhu	a4,46(s0)
 8005e80:	5814                	lw	a3,48(s0)
 8005e82:	864a                	mv	a2,s2
 8005e84:	45ad                	li	a1,11
 8005e86:	8526                	mv	a0,s1
 8005e88:	39f1                	jal	8005b64 <coap_append_array_opt>
 8005e8a:	e949                	bnez	a0,8005f1c <coap_serialize_message+0x212>
 8005e8c:	492d                	li	s2,11
 8005e8e:	bdd9                	j	8005d64 <coap_serialize_message+0x5a>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_CONTENT_FORMAT, content_format,
 8005e90:	01e45683          	lhu	a3,30(s0)
 8005e94:	864a                	mv	a2,s2
 8005e96:	45b1                	li	a1,12
 8005e98:	8526                	mv	a0,s1
 8005e9a:	33ad                	jal	8005c04 <coap_append_int_opt>
 8005e9c:	e141                	bnez	a0,8005f1c <coap_serialize_message+0x212>
 8005e9e:	4931                	li	s2,12
 8005ea0:	b5f9                	j	8005d6e <coap_serialize_message+0x64>
    COAP_SERIALIZE_STRING_OPT(pkt, m, COAP_OPTION_URI_QUERY, uri_query, '&',
 8005ea2:	02600793          	li	a5,38
 8005ea6:	05c45703          	lhu	a4,92(s0)
 8005eaa:	5034                	lw	a3,96(s0)
 8005eac:	864a                	mv	a2,s2
 8005eae:	45bd                	li	a1,15
 8005eb0:	8526                	mv	a0,s1
 8005eb2:	394d                	jal	8005b64 <coap_append_array_opt>
 8005eb4:	e525                	bnez	a0,8005f1c <coap_serialize_message+0x212>
 8005eb6:	493d                	li	s2,15
 8005eb8:	bd7d                	j	8005d76 <coap_serialize_message+0x6c>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_ACCEPT, accept, "Accept");
 8005eba:	03845683          	lhu	a3,56(s0)
 8005ebe:	864a                	mv	a2,s2
 8005ec0:	45c5                	li	a1,17
 8005ec2:	8526                	mv	a0,s1
 8005ec4:	3381                	jal	8005c04 <coap_append_int_opt>
 8005ec6:	e939                	bnez	a0,8005f1c <coap_serialize_message+0x212>
 8005ec8:	4945                	li	s2,17
 8005eca:	bd5d                	j	8005d80 <coap_serialize_message+0x76>
    COAP_SERIALIZE_BLOCK_OPT(pkt, m, COAP_OPTION_BLOCK2, block2, "Block2");
 8005ecc:	03c42a03          	lw	s4,60(s0)
 8005ed0:	0a12                	slli	s4,s4,0x4
 8005ed2:	04044783          	lbu	a5,64(s0)
 8005ed6:	c399                	beqz	a5,8005edc <coap_serialize_message+0x1d2>
 8005ed8:	008a6a13          	ori	s4,s4,8
 8005edc:	04245503          	lhu	a0,66(s0)
 8005ee0:	8111                	srli	a0,a0,0x4
 8005ee2:	ba7ff0ef          	jal	ra,8005a88 <coap_log_2>
 8005ee6:	00f57693          	andi	a3,a0,15
 8005eea:	0146e6b3          	or	a3,a3,s4
 8005eee:	864a                	mv	a2,s2
 8005ef0:	45dd                	li	a1,23
 8005ef2:	8526                	mv	a0,s1
 8005ef4:	3b01                	jal	8005c04 <coap_append_int_opt>
 8005ef6:	e11d                	bnez	a0,8005f1c <coap_serialize_message+0x212>
 8005ef8:	495d                	li	s2,23
 8005efa:	b579                	j	8005d88 <coap_serialize_message+0x7e>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE2, size2, "Size2");
 8005efc:	4874                	lw	a3,84(s0)
 8005efe:	864a                	mv	a2,s2
 8005f00:	45f1                	li	a1,28
 8005f02:	8526                	mv	a0,s1
 8005f04:	3301                	jal	8005c04 <coap_append_int_opt>
 8005f06:	e919                	bnez	a0,8005f1c <coap_serialize_message+0x212>
 8005f08:	4971                	li	s2,28
 8005f0a:	bd7d                	j	8005dc8 <coap_serialize_message+0xbe>
    COAP_SERIALIZE_INT_OPT(pkt, m, COAP_OPTION_SIZE1, size1, "Size1");
 8005f0c:	4c34                	lw	a3,88(s0)
 8005f0e:	864a                	mv	a2,s2
 8005f10:	03c00593          	li	a1,60
 8005f14:	8526                	mv	a0,s1
 8005f16:	31fd                	jal	8005c04 <coap_append_int_opt>
 8005f18:	ea050de3          	beqz	a0,8005dd2 <coap_serialize_message+0xc8>
        OS_MBUF_PKTLEN(m), OS_MBUF_PKTLEN(m) - pkt->payload_len,
        pkt->payload_len);

    return 0;
err_mem:
    if (pkt->payload_m) {
 8005f1c:	5468                	lw	a0,108(s0)
 8005f1e:	1e050f63          	beqz	a0,800611c <coap_serialize_message+0x412>
        os_mbuf_free_chain(pkt->payload_m);
 8005f22:	215010ef          	jal	ra,8007936 <os_mbuf_free_chain>
    }
    STATS_INC(coap_stats, oerr);
    return -1;
 8005f26:	557d                	li	a0,-1
}
 8005f28:	50b2                	lw	ra,44(sp)
 8005f2a:	5422                	lw	s0,40(sp)
 8005f2c:	5492                	lw	s1,36(sp)
 8005f2e:	5902                	lw	s2,32(sp)
 8005f30:	49f2                	lw	s3,28(sp)
 8005f32:	4a62                	lw	s4,24(sp)
 8005f34:	6145                	addi	sp,sp,48
 8005f36:	8082                	ret
        if (os_mbuf_append(m, "\xff", 1)) {
 8005f38:	4605                	li	a2,1
 8005f3a:	0800d5b7          	lui	a1,0x800d
 8005f3e:	62058593          	addi	a1,a1,1568 # 800d620 <sensor_node_addresses+0x40>
 8005f42:	8526                	mv	a0,s1
 8005f44:	21d010ef          	jal	ra,8007960 <os_mbuf_append>
 8005f48:	e80509e3          	beqz	a0,8005dda <coap_serialize_message+0xd0>
 8005f4c:	bfc1                	j	8005f1c <coap_serialize_message+0x212>
        len = sizeof(struct coap_udp_hdr) + pkt->token_len;
 8005f4e:	00c44583          	lbu	a1,12(s0)
        os_mbuf_prepend(m, len);
 8005f52:	0591                	addi	a1,a1,4
 8005f54:	8526                	mv	a0,s1
 8005f56:	4b7010ef          	jal	ra,8007c0c <os_mbuf_prepend>
        cuh = (struct coap_udp_hdr *)m->om_data;
 8005f5a:	4088                	lw	a0,0(s1)
        cuh->version = pkt->version;
 8005f5c:	00044703          	lbu	a4,0(s0)
 8005f60:	8b0d                	andi	a4,a4,3
 8005f62:	00671793          	slli	a5,a4,0x6
 8005f66:	00054703          	lbu	a4,0(a0)
 8005f6a:	03f77713          	andi	a4,a4,63
 8005f6e:	8f5d                	or	a4,a4,a5
 8005f70:	00e50023          	sb	a4,0(a0)
        cuh->type = pkt->type;
 8005f74:	405c                	lw	a5,4(s0)
 8005f76:	8b8d                	andi	a5,a5,3
 8005f78:	00479693          	slli	a3,a5,0x4
 8005f7c:	fcf77793          	andi	a5,a4,-49
 8005f80:	8fd5                	or	a5,a5,a3
 8005f82:	00f50023          	sb	a5,0(a0)
        cuh->token_len = pkt->token_len;
 8005f86:	00c44703          	lbu	a4,12(s0)
 8005f8a:	8b3d                	andi	a4,a4,15
 8005f8c:	9bc1                	andi	a5,a5,-16
 8005f8e:	8fd9                	or	a5,a5,a4
 8005f90:	00f50023          	sb	a5,0(a0)
        cuh->code = pkt->code;
 8005f94:	00844783          	lbu	a5,8(s0)
 8005f98:	00f500a3          	sb	a5,1(a0)
        u16 = htons(pkt->mid);
 8005f9c:	00a45703          	lhu	a4,10(s0)
 8005fa0:	00875793          	srli	a5,a4,0x8
 8005fa4:	0722                	slli	a4,a4,0x8
 8005fa6:	8fd9                	or	a5,a5,a4
 8005fa8:	07c2                	slli	a5,a5,0x10
 8005faa:	83c1                	srli	a5,a5,0x10
 8005fac:	00f11723          	sh	a5,14(sp)
        memcpy(&cuh->id, &u16, sizeof(u16));
 8005fb0:	00f50123          	sb	a5,2(a0)
 8005fb4:	00f14783          	lbu	a5,15(sp)
 8005fb8:	00f501a3          	sb	a5,3(a0)
        memcpy(cuh + 1, pkt->token, pkt->token_len);
 8005fbc:	00c44603          	lbu	a2,12(s0)
 8005fc0:	00d40593          	addi	a1,s0,13
 8005fc4:	0511                	addi	a0,a0,4
 8005fc6:	3f3020ef          	jal	ra,8008bb8 <memcpy>
    if (pkt->payload_m) {
 8005fca:	5468                	lw	a0,108(s0)
 8005fcc:	14050663          	beqz	a0,8006118 <coap_serialize_message+0x40e>
        assert(pkt->payload_len <= OS_MBUF_PKTLEN(pkt->payload_m));
 8005fd0:	06645783          	lhu	a5,102(s0)
 8005fd4:	01055583          	lhu	a1,16(a0)
 8005fd8:	12f5e663          	bltu	a1,a5,8006104 <coap_serialize_message+0x3fa>
        if (pkt->payload_len < OS_MBUF_PKTLEN(pkt->payload_m)) {
 8005fdc:	12b7ea63          	bltu	a5,a1,8006110 <coap_serialize_message+0x406>
        os_mbuf_concat(m, pkt->payload_m);
 8005fe0:	546c                	lw	a1,108(s0)
 8005fe2:	8526                	mv	a0,s1
 8005fe4:	52f010ef          	jal	ra,8007d12 <os_mbuf_concat>
    return 0;
 8005fe8:	4501                	li	a0,0
 8005fea:	bf3d                	j	8005f28 <coap_serialize_message+0x21e>
            len = sizeof(struct coap_tcp_hdr0) + pkt->token_len;
 8005fec:	00c44583          	lbu	a1,12(s0)
            os_mbuf_prepend(m, len);
 8005ff0:	0589                	addi	a1,a1,2
 8005ff2:	8526                	mv	a0,s1
 8005ff4:	419010ef          	jal	ra,8007c0c <os_mbuf_prepend>
            cth0 = (struct coap_tcp_hdr0 *)m->om_data;
 8005ff8:	4088                	lw	a0,0(s1)
            cth0->data_len = data_len;
 8005ffa:	0912                	slli	s2,s2,0x4
 8005ffc:	00054783          	lbu	a5,0(a0)
 8006000:	8bbd                	andi	a5,a5,15
 8006002:	0127e933          	or	s2,a5,s2
 8006006:	01250023          	sb	s2,0(a0)
            cth0->token_len = pkt->token_len;
 800600a:	00c44783          	lbu	a5,12(s0)
 800600e:	8bbd                	andi	a5,a5,15
 8006010:	ff097913          	andi	s2,s2,-16
 8006014:	00f96933          	or	s2,s2,a5
 8006018:	01250023          	sb	s2,0(a0)
            cth0->code = pkt->code;
 800601c:	00844783          	lbu	a5,8(s0)
 8006020:	00f500a3          	sb	a5,1(a0)
            memcpy(cth0 + 1, pkt->token, pkt->token_len);
 8006024:	00c44603          	lbu	a2,12(s0)
 8006028:	00d40593          	addi	a1,s0,13
 800602c:	0509                	addi	a0,a0,2
 800602e:	38b020ef          	jal	ra,8008bb8 <memcpy>
 8006032:	bf61                	j	8005fca <coap_serialize_message+0x2c0>
            len = sizeof(struct coap_tcp_hdr8) + pkt->token_len;
 8006034:	00c44583          	lbu	a1,12(s0)
            os_mbuf_prepend(m, len);
 8006038:	058d                	addi	a1,a1,3
 800603a:	8526                	mv	a0,s1
 800603c:	3d1010ef          	jal	ra,8007c0c <os_mbuf_prepend>
            cth8 = (struct coap_tcp_hdr8 *)m->om_data;
 8006040:	4088                	lw	a0,0(s1)
            cth8->type = COAP_TCP_TYPE8;
 8006042:	00054783          	lbu	a5,0(a0)
 8006046:	8bbd                	andi	a5,a5,15
 8006048:	fd07e793          	ori	a5,a5,-48
 800604c:	00f50023          	sb	a5,0(a0)
            cth8->token_len = pkt->token_len;
 8006050:	00c44703          	lbu	a4,12(s0)
 8006054:	8b3d                	andi	a4,a4,15
 8006056:	9bc1                	andi	a5,a5,-16
 8006058:	8fd9                	or	a5,a5,a4
 800605a:	00f50023          	sb	a5,0(a0)
            cth8->data_len = data_len - COAP_TCP_LENGTH8_OFF;
 800605e:	194d                	addi	s2,s2,-13
 8006060:	012500a3          	sb	s2,1(a0)
            cth8->code = pkt->code;
 8006064:	00844783          	lbu	a5,8(s0)
 8006068:	00f50123          	sb	a5,2(a0)
            memcpy(cth8 + 1, pkt->token, pkt->token_len);
 800606c:	00c44603          	lbu	a2,12(s0)
 8006070:	00d40593          	addi	a1,s0,13
 8006074:	050d                	addi	a0,a0,3
 8006076:	343020ef          	jal	ra,8008bb8 <memcpy>
 800607a:	bf81                	j	8005fca <coap_serialize_message+0x2c0>
            len = sizeof(struct coap_tcp_hdr32) + pkt->token_len;
 800607c:	00c44583          	lbu	a1,12(s0)
            os_mbuf_prepend(m, len);
 8006080:	0599                	addi	a1,a1,6
 8006082:	8526                	mv	a0,s1
 8006084:	389010ef          	jal	ra,8007c0c <os_mbuf_prepend>
            cth32 = (struct coap_tcp_hdr32 *)m->om_data;
 8006088:	4088                	lw	a0,0(s1)
            cth32->type = COAP_TCP_TYPE32;
 800608a:	00054783          	lbu	a5,0(a0)
 800608e:	ff07e793          	ori	a5,a5,-16
 8006092:	00f50023          	sb	a5,0(a0)
            cth32->token_len = pkt->token_len;
 8006096:	00c44783          	lbu	a5,12(s0)
 800609a:	ff07e793          	ori	a5,a5,-16
 800609e:	00f50023          	sb	a5,0(a0)
            u32 = htonl(data_len - COAP_TCP_LENGTH32_OFF);
 80060a2:	77c1                	lui	a5,0xffff0
 80060a4:	ef378793          	addi	a5,a5,-269 # fffefef3 <_sp+0xdffeaef3>
 80060a8:	993e                	add	s2,s2,a5
 80060aa:	01895793          	srli	a5,s2,0x18
 80060ae:	40895713          	srai	a4,s2,0x8
 80060b2:	66c1                	lui	a3,0x10
 80060b4:	f0068693          	addi	a3,a3,-256 # ff00 <__stack_size+0xf700>
 80060b8:	8f75                	and	a4,a4,a3
 80060ba:	8fd9                	or	a5,a5,a4
 80060bc:	00891713          	slli	a4,s2,0x8
 80060c0:	00ff06b7          	lui	a3,0xff0
 80060c4:	8f75                	and	a4,a4,a3
 80060c6:	8fd9                	or	a5,a5,a4
 80060c8:	0962                	slli	s2,s2,0x18
 80060ca:	0127e933          	or	s2,a5,s2
 80060ce:	00895613          	srli	a2,s2,0x8
 80060d2:	01095693          	srli	a3,s2,0x10
 80060d6:	c44a                	sw	s2,8(sp)
            memcpy(&cth32->data_len, &u32, sizeof(u32));
 80060d8:	01895713          	srli	a4,s2,0x18
 80060dc:	012500a3          	sb	s2,1(a0)
 80060e0:	00c50123          	sb	a2,2(a0)
 80060e4:	00d501a3          	sb	a3,3(a0)
 80060e8:	00e50223          	sb	a4,4(a0)
            cth32->code = pkt->code;
 80060ec:	00844783          	lbu	a5,8(s0)
 80060f0:	00f502a3          	sb	a5,5(a0)
            memcpy(cth32 + 1, pkt->token, pkt->token_len);
 80060f4:	00c44603          	lbu	a2,12(s0)
 80060f8:	00d40593          	addi	a1,s0,13
 80060fc:	0519                	addi	a0,a0,6
 80060fe:	2bb020ef          	jal	ra,8008bb8 <memcpy>
 8006102:	b5e1                	j	8005fca <coap_serialize_message+0x2c0>
        assert(pkt->payload_len <= OS_MBUF_PKTLEN(pkt->payload_m));
 8006104:	4681                	li	a3,0
 8006106:	4601                	li	a2,0
 8006108:	4581                	li	a1,0
 800610a:	4501                	li	a0,0
 800610c:	6c7000ef          	jal	ra,8006fd2 <__assert_func>
            os_mbuf_adj(pkt->payload_m,
 8006110:	8d9d                	sub	a1,a1,a5
 8006112:	227010ef          	jal	ra,8007b38 <os_mbuf_adj>
 8006116:	b5e9                	j	8005fe0 <coap_serialize_message+0x2d6>
    return 0;
 8006118:	4501                	li	a0,0
 800611a:	b539                	j	8005f28 <coap_serialize_message+0x21e>
    return -1;
 800611c:	557d                	li	a0,-1
 800611e:	b529                	j	8005f28 <coap_serialize_message+0x21e>

08006120 <coap_send_message>:
/*---------------------------------------------------------------------------*/
void
coap_send_message(struct os_mbuf *m, int dup)
{
 8006120:	1141                	addi	sp,sp,-16
 8006122:	c606                	sw	ra,12(sp)
    OC_LOG(INFO, "coap_send_message(): (%u) %s\n", OS_MBUF_PKTLEN(m),
      dup ? "dup" : "");

    STATS_INC(coap_stats, oframe);

    if (dup) {
 8006124:	c581                	beqz	a1,800612c <coap_send_message+0xc>
        m = os_mbuf_dup(m);
 8006126:	11f010ef          	jal	ra,8007a44 <os_mbuf_dup>
        if (!m) {
 800612a:	c119                	beqz	a0,8006130 <coap_send_message+0x10>
            STATS_INC(coap_stats, oerr);
            return;
        }
    }
    oc_send_message(m);
 800612c:	f82ff0ef          	jal	ra,80058ae <oc_send_message>
}
 8006130:	40b2                	lw	ra,12(sp)
 8006132:	0141                	addi	sp,sp,16
 8006134:	8082                	ret

08006136 <coap_set_token>:
    }
}
/*---------------------------------------------------------------------------*/
int
coap_set_token(coap_packet_t *pkt, const uint8_t *token, size_t token_len)
{
 8006136:	1141                	addi	sp,sp,-16
 8006138:	c606                	sw	ra,12(sp)
 800613a:	c422                	sw	s0,8(sp)
    pkt->token_len = MIN(COAP_TOKEN_LEN, token_len);
 800613c:	47a1                	li	a5,8
 800613e:	00c7f363          	bgeu	a5,a2,8006144 <coap_set_token+0xe>
 8006142:	4621                	li	a2,8
 8006144:	0ff67413          	andi	s0,a2,255
 8006148:	00850623          	sb	s0,12(a0)
    memcpy(pkt->token, token, pkt->token_len);
 800614c:	8622                	mv	a2,s0
 800614e:	0535                	addi	a0,a0,13
 8006150:	269020ef          	jal	ra,8008bb8 <memcpy>

    return pkt->token_len;
}
 8006154:	8522                	mv	a0,s0
 8006156:	40b2                	lw	ra,12(sp)
 8006158:	4422                	lw	s0,8(sp)
 800615a:	0141                	addi	sp,sp,16
 800615c:	8082                	ret

0800615e <coap_set_header_content_format>:
}
#endif
int
coap_set_header_content_format(coap_packet_t *pkt, unsigned int format)
{
    pkt->content_format = format;
 800615e:	00b51f23          	sh	a1,30(a0)
    SET_OPTION(pkt, COAP_OPTION_CONTENT_FORMAT);
 8006162:	01654783          	lbu	a5,22(a0)
 8006166:	0107e793          	ori	a5,a5,16
 800616a:	00f50b23          	sb	a5,22(a0)
    return 1;
}
 800616e:	4505                	li	a0,1
 8006170:	8082                	ret

08006172 <coap_set_header_accept>:

#ifdef OC_CLIENT
int
coap_set_header_accept(coap_packet_t *pkt, unsigned int accept)
{
    pkt->accept = accept;
 8006172:	02b51c23          	sh	a1,56(a0)
    SET_OPTION(pkt, COAP_OPTION_ACCEPT);
 8006176:	01754783          	lbu	a5,23(a0)
 800617a:	0027e793          	ori	a5,a5,2
 800617e:	00f50ba3          	sb	a5,23(a0)
    return 1;
}
 8006182:	4505                	li	a0,1
 8006184:	8082                	ret

08006186 <coap_set_header_uri_path>:
    return maxlen;
}
#ifdef OC_CLIENT
int
coap_set_header_uri_path(coap_packet_t *pkt, const char *path)
{
 8006186:	1141                	addi	sp,sp,-16
 8006188:	c606                	sw	ra,12(sp)
 800618a:	c422                	sw	s0,8(sp)
 800618c:	842a                	mv	s0,a0
    while (path[0] == '/') {
 800618e:	0005c703          	lbu	a4,0(a1)
 8006192:	02f00793          	li	a5,47
 8006196:	00f71463          	bne	a4,a5,800619e <coap_set_header_uri_path+0x18>
        ++path;
 800619a:	0585                	addi	a1,a1,1
 800619c:	bfcd                	j	800618e <coap_set_header_uri_path+0x8>
    }
    pkt->uri_path = (char *)path;
 800619e:	d80c                	sw	a1,48(s0)
    pkt->uri_path_len = strlen(path);
 80061a0:	852e                	mv	a0,a1
 80061a2:	aacfb0ef          	jal	ra,800144e <strlen>
 80061a6:	0542                	slli	a0,a0,0x10
 80061a8:	8141                	srli	a0,a0,0x10
 80061aa:	02a41723          	sh	a0,46(s0)

    SET_OPTION(pkt, COAP_OPTION_URI_PATH);
 80061ae:	01644783          	lbu	a5,22(s0)
 80061b2:	0087e793          	ori	a5,a5,8
 80061b6:	00f40b23          	sb	a5,22(s0)
    return pkt->uri_path_len;
}
 80061ba:	40b2                	lw	ra,12(sp)
 80061bc:	4422                	lw	s0,8(sp)
 80061be:	0141                	addi	sp,sp,16
 80061c0:	8082                	ret

080061c2 <coap_set_header_uri_query>:
    return maxlen;
}
#ifdef OC_CLIENT
int
coap_set_header_uri_query(coap_packet_t *pkt, const char *query)
{
 80061c2:	1141                	addi	sp,sp,-16
 80061c4:	c606                	sw	ra,12(sp)
 80061c6:	c422                	sw	s0,8(sp)
 80061c8:	842a                	mv	s0,a0
    while (query[0] == '?') {
 80061ca:	0005c703          	lbu	a4,0(a1)
 80061ce:	03f00793          	li	a5,63
 80061d2:	00f71463          	bne	a4,a5,80061da <coap_set_header_uri_query+0x18>
        ++query;
 80061d6:	0585                	addi	a1,a1,1
 80061d8:	bfcd                	j	80061ca <coap_set_header_uri_query+0x8>
    }
    pkt->uri_query = (char *)query;
 80061da:	d02c                	sw	a1,96(s0)
    pkt->uri_query_len = strlen(query);
 80061dc:	852e                	mv	a0,a1
 80061de:	a70fb0ef          	jal	ra,800144e <strlen>
 80061e2:	0542                	slli	a0,a0,0x10
 80061e4:	8141                	srli	a0,a0,0x10
 80061e6:	04a41e23          	sh	a0,92(s0)

    SET_OPTION(pkt, COAP_OPTION_URI_QUERY);
 80061ea:	01644783          	lbu	a5,22(s0)
 80061ee:	f807e793          	ori	a5,a5,-128
 80061f2:	00f40b23          	sb	a5,22(s0)
    return pkt->uri_query_len;
}
 80061f6:	40b2                	lw	ra,12(sp)
 80061f8:	4422                	lw	s0,8(sp)
 80061fa:	0141                	addi	sp,sp,16
 80061fc:	8082                	ret

080061fe <coap_set_header_observe>:
}

int
coap_set_header_observe(coap_packet_t *pkt, uint32_t observe)
{
    pkt->observe = observe;
 80061fe:	d94c                	sw	a1,52(a0)
    SET_OPTION(pkt, COAP_OPTION_OBSERVE);
 8006200:	01554783          	lbu	a5,21(a0)
 8006204:	0407e793          	ori	a5,a5,64
 8006208:	00f50aa3          	sb	a5,21(a0)
    return 1;
}
 800620c:	4505                	li	a0,1
 800620e:	8082                	ret

08006210 <oc_evq_get>:

struct os_eventq *
oc_evq_get(void)
{
    return oc_evq;
}
 8006210:	8801a503          	lw	a0,-1920(gp) # 200005a0 <oc_evq>
 8006214:	8082                	ret

08006216 <oc_evq_set>:

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
 8006216:	88a1a023          	sw	a0,-1920(gp) # 200005a0 <oc_evq>
}
 800621a:	8082                	ret

0800621c <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
 800621c:	1141                	addi	sp,sp,-16
 800621e:	c606                	sw	ra,12(sp)
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
 8006220:	01854783          	lbu	a5,24(a0)
 8006224:	8b9d                	andi	a5,a5,7
 8006226:	078a                	slli	a5,a5,0x2
 8006228:	20003737          	lui	a4,0x20003
 800622c:	a5070713          	addi	a4,a4,-1456 # 20002a50 <oc_transports>
 8006230:	97ba                	add	a5,a5,a4
 8006232:	439c                	lw	a5,0(a5)
    if (ot) {
 8006234:	c791                	beqz	a5,8006240 <oc_send_buffer+0x24>
        ot->ot_tx_ucast(m);
 8006236:	47dc                	lw	a5,12(a5)
 8006238:	9782                	jalr	a5
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
 800623a:	40b2                	lw	ra,12(sp)
 800623c:	0141                	addi	sp,sp,16
 800623e:	8082                	ret
        os_mbuf_free_chain(m);
 8006240:	6f6010ef          	jal	ra,8007936 <os_mbuf_free_chain>
}
 8006244:	bfdd                	j	800623a <oc_send_buffer+0x1e>

08006246 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
 8006246:	1101                	addi	sp,sp,-32
 8006248:	ce06                	sw	ra,28(sp)
 800624a:	cc22                	sw	s0,24(sp)
 800624c:	ca26                	sw	s1,20(sp)
 800624e:	c84a                	sw	s2,16(sp)
 8006250:	c64e                	sw	s3,12(sp)
 8006252:	c452                	sw	s4,8(sp)
 8006254:	89aa                	mv	s3,a0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 8006256:	4401                	li	s0,0
    const struct oc_transport *prev = NULL;
 8006258:	4901                	li	s2,0
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
 800625a:	a021                	j	8006262 <oc_send_multicast_message+0x1c>
 800625c:	84ca                	mv	s1,s2
 800625e:	0405                	addi	s0,s0,1
 8006260:	8926                	mv	s2,s1
 8006262:	479d                	li	a5,7
 8006264:	0287c963          	blt	a5,s0,8006296 <oc_send_multicast_message+0x50>
        if (!oc_transports[i]) {
 8006268:	00241793          	slli	a5,s0,0x2
 800626c:	20003737          	lui	a4,0x20003
 8006270:	a5070713          	addi	a4,a4,-1456 # 20002a50 <oc_transports>
 8006274:	97ba                	add	a5,a5,a4
 8006276:	4384                	lw	s1,0(a5)
 8006278:	d0f5                	beqz	s1,800625c <oc_send_multicast_message+0x16>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
 800627a:	fe0902e3          	beqz	s2,800625e <oc_send_multicast_message+0x18>
            n = os_mbuf_dup(m);
 800627e:	854e                	mv	a0,s3
 8006280:	7c4010ef          	jal	ra,8007a44 <os_mbuf_dup>
 8006284:	8a2a                	mv	s4,a0
            prev->ot_tx_mcast(m);
 8006286:	01092783          	lw	a5,16(s2)
 800628a:	854e                	mv	a0,s3
 800628c:	9782                	jalr	a5
            if (!n) {
 800628e:	000a0a63          	beqz	s4,80062a2 <oc_send_multicast_message+0x5c>
                return;
            }
            m = n;
 8006292:	89d2                	mv	s3,s4
 8006294:	b7e9                	j	800625e <oc_send_multicast_message+0x18>
        }
        prev = ot;
    }
    if (prev) {
 8006296:	00090663          	beqz	s2,80062a2 <oc_send_multicast_message+0x5c>
        prev->ot_tx_mcast(m);
 800629a:	01092783          	lw	a5,16(s2)
 800629e:	854e                	mv	a0,s3
 80062a0:	9782                	jalr	a5
    }
}
 80062a2:	40f2                	lw	ra,28(sp)
 80062a4:	4462                	lw	s0,24(sp)
 80062a6:	44d2                	lw	s1,20(sp)
 80062a8:	4942                	lw	s2,16(sp)
 80062aa:	49b2                	lw	s3,12(sp)
 80062ac:	4a22                	lw	s4,8(sp)
 80062ae:	6105                	addi	sp,sp,32
 80062b0:	8082                	ret

080062b2 <oc_init>:
    return rc;
}

void
oc_init(void)
{
 80062b2:	1141                	addi	sp,sp,-16
 80062b4:	c606                	sw	ra,12(sp)
    SYSINIT_ASSERT_ACTIVE();
 80062b6:	200037b7          	lui	a5,0x20003
 80062ba:	a707c783          	lbu	a5,-1424(a5) # 20002a70 <sysinit_active>
 80062be:	cb89                	beqz	a5,80062d0 <oc_init+0x1e>
    oc_ri_mem_init();
 80062c0:	ebeff0ef          	jal	ra,800597e <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
 80062c4:	4f0010ef          	jal	ra,80077b4 <os_eventq_dflt_get>
 80062c8:	37b9                	jal	8006216 <oc_evq_set>
}
 80062ca:	40b2                	lw	ra,12(sp)
 80062cc:	0141                	addi	sp,sp,16
 80062ce:	8082                	ret
    SYSINIT_ASSERT_ACTIVE();
 80062d0:	4681                	li	a3,0
 80062d2:	4601                	li	a2,0
 80062d4:	4581                	li	a1,0
 80062d6:	4501                	li	a0,0
 80062d8:	4fb000ef          	jal	ra,8006fd2 <__assert_func>

080062dc <oc_clock_time>:
void oc_clock_init(void)
{
    /* in mynewt clock is initialized elsewhere */
}
oc_clock_time_t oc_clock_time(void)
{
 80062dc:	1141                	addi	sp,sp,-16
 80062de:	c606                	sw	ra,12(sp)
    return os_time_get();
 80062e0:	626020ef          	jal	ra,8008906 <os_time_get>
}
 80062e4:	40b2                	lw	ra,12(sp)
 80062e6:	0141                	addi	sp,sp,16
 80062e8:	8082                	ret

080062ea <oc_random_rand>:
{
    srand(seed);
}

unsigned short oc_random_rand(void)
{
 80062ea:	1141                	addi	sp,sp,-16
 80062ec:	c606                	sw	ra,12(sp)
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
 80062ee:	910fb0ef          	jal	ra,80013fe <lrand48>
    return rand();
}
 80062f2:	0542                	slli	a0,a0,0x10
 80062f4:	8141                	srli	a0,a0,0x10
 80062f6:	40b2                	lw	ra,12(sp)
 80062f8:	0141                	addi	sp,sp,16
 80062fa:	8082                	ret

080062fc <oc_new_string>:
#include "oic/port/mynewt/config.h"
#include "oic/oc_helpers.h"

void
oc_new_string(oc_string_t *os, const char str[])
{
 80062fc:	1141                	addi	sp,sp,-16
 80062fe:	c606                	sw	ra,12(sp)
 8006300:	c422                	sw	s0,8(sp)
 8006302:	c226                	sw	s1,4(sp)
 8006304:	c04a                	sw	s2,0(sp)
 8006306:	84aa                	mv	s1,a0
 8006308:	892e                	mv	s2,a1
    int len = strlen(str);
 800630a:	852e                	mv	a0,a1
 800630c:	942fb0ef          	jal	ra,800144e <strlen>
 8006310:	842a                	mv	s0,a0

    os->os_str = malloc(len + 1);
 8006312:	0505                	addi	a0,a0,1
 8006314:	7da020ef          	jal	ra,8008aee <malloc>
 8006318:	c0c8                	sw	a0,4(s1)
    if (os->os_str) {
 800631a:	cd09                	beqz	a0,8006334 <oc_new_string+0x38>
        os->os_sz = len + 1;
 800631c:	00140793          	addi	a5,s0,1
 8006320:	00f49023          	sh	a5,0(s1)
        memcpy(os->os_str, str, len);
 8006324:	8622                	mv	a2,s0
 8006326:	85ca                	mv	a1,s2
 8006328:	091020ef          	jal	ra,8008bb8 <memcpy>
        os->os_str[len] = '\0';
 800632c:	40dc                	lw	a5,4(s1)
 800632e:	943e                	add	s0,s0,a5
 8006330:	00040023          	sb	zero,0(s0)
    }
}
 8006334:	40b2                	lw	ra,12(sp)
 8006336:	4422                	lw	s0,8(sp)
 8006338:	4492                	lw	s1,4(sp)
 800633a:	4902                	lw	s2,0(sp)
 800633c:	0141                	addi	sp,sp,16
 800633e:	8082                	ret

08006340 <oc_free_string>:
    }
}

void
oc_free_string(oc_string_t *os)
{
 8006340:	1141                	addi	sp,sp,-16
 8006342:	c606                	sw	ra,12(sp)
 8006344:	c422                	sw	s0,8(sp)
 8006346:	842a                	mv	s0,a0
    free(os->os_str);
 8006348:	4148                	lw	a0,4(a0)
 800634a:	01b020ef          	jal	ra,8008b64 <free>
    os->os_sz = 0;
 800634e:	00041023          	sh	zero,0(s0)
}
 8006352:	40b2                	lw	ra,12(sp)
 8006354:	4422                	lw	s0,8(sp)
 8006356:	0141                	addi	sp,sp,16
 8006358:	8082                	ret

0800635a <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
 800635a:	1141                	addi	sp,sp,-16
 800635c:	c606                	sw	ra,12(sp)
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
 800635e:	475000ef          	jal	ra,8006fd2 <__assert_func>

08006362 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
 8006362:	200037b7          	lui	a5,0x20003
 8006366:	4705                	li	a4,1
 8006368:	a6e78823          	sb	a4,-1424(a5) # 20002a70 <sysinit_active>
}
 800636c:	8082                	ret

0800636e <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
 800636e:	200037b7          	lui	a5,0x20003
 8006372:	a6078823          	sb	zero,-1424(a5) # 20002a70 <sysinit_active>
}
 8006376:	8082                	ret

08006378 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
 8006378:	1141                	addi	sp,sp,-16
 800637a:	c606                	sw	ra,12(sp)
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
 800637c:	0800d537          	lui	a0,0x800d
 8006380:	62450513          	addi	a0,a0,1572 # 800d624 <sensor_node_addresses+0x44>
 8006384:	aa9fe0ef          	jal	ra,8004e2c <console_printf>
    return -1;
}
 8006388:	557d                	li	a0,-1
 800638a:	40b2                	lw	ra,12(sp)
 800638c:	0141                	addi	sp,sp,16
 800638e:	8082                	ret

08006390 <json_encode_object_start>:
    (__e)->je_write((__e)->je_arg, "]", sizeof("]")-1);


int
json_encode_object_start(struct json_encoder *encoder)
{
 8006390:	1141                	addi	sp,sp,-16
 8006392:	c606                	sw	ra,12(sp)
 8006394:	c422                	sw	s0,8(sp)
 8006396:	842a                	mv	s0,a0
    if (encoder->je_wr_commas) {
 8006398:	00854783          	lbu	a5,8(a0)
 800639c:	8b85                	andi	a5,a5,1
 800639e:	cf91                	beqz	a5,80063ba <json_encode_object_start+0x2a>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 80063a0:	411c                	lw	a5,0(a0)
 80063a2:	4605                	li	a2,1
 80063a4:	0800d5b7          	lui	a1,0x800d
 80063a8:	49458593          	addi	a1,a1,1172 # 800d494 <str.j+0x11a4>
 80063ac:	4148                	lw	a0,4(a0)
 80063ae:	9782                	jalr	a5
        encoder->je_wr_commas = 0;
 80063b0:	00844783          	lbu	a5,8(s0)
 80063b4:	9bf9                	andi	a5,a5,-2
 80063b6:	00f40423          	sb	a5,8(s0)
    }
    JSON_ENCODE_OBJECT_START(encoder);
 80063ba:	401c                	lw	a5,0(s0)
 80063bc:	4605                	li	a2,1
 80063be:	0800d5b7          	lui	a1,0x800d
 80063c2:	65c58593          	addi	a1,a1,1628 # 800d65c <sensor_node_addresses+0x7c>
 80063c6:	4048                	lw	a0,4(s0)
 80063c8:	9782                	jalr	a5
    encoder->je_wr_commas = 0;
 80063ca:	00844783          	lbu	a5,8(s0)
 80063ce:	9bf9                	andi	a5,a5,-2
 80063d0:	00f40423          	sb	a5,8(s0)

    return (0);
}
 80063d4:	4501                	li	a0,0
 80063d6:	40b2                	lw	ra,12(sp)
 80063d8:	4422                	lw	s0,8(sp)
 80063da:	0141                	addi	sp,sp,16
 80063dc:	8082                	ret

080063de <json_encode_object_key>:
    return (rc);
}

int
json_encode_object_key(struct json_encoder *encoder, char *key)
{
 80063de:	1141                	addi	sp,sp,-16
 80063e0:	c606                	sw	ra,12(sp)
 80063e2:	c422                	sw	s0,8(sp)
 80063e4:	c226                	sw	s1,4(sp)
 80063e6:	c04a                	sw	s2,0(sp)
 80063e8:	842a                	mv	s0,a0
 80063ea:	84ae                	mv	s1,a1
    if (encoder->je_wr_commas) {
 80063ec:	00854783          	lbu	a5,8(a0)
 80063f0:	8b85                	andi	a5,a5,1
 80063f2:	cf91                	beqz	a5,800640e <json_encode_object_key+0x30>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 80063f4:	411c                	lw	a5,0(a0)
 80063f6:	4605                	li	a2,1
 80063f8:	0800d5b7          	lui	a1,0x800d
 80063fc:	49458593          	addi	a1,a1,1172 # 800d494 <str.j+0x11a4>
 8006400:	4148                	lw	a0,4(a0)
 8006402:	9782                	jalr	a5
        encoder->je_wr_commas = 0;
 8006404:	00844783          	lbu	a5,8(s0)
 8006408:	9bf9                	andi	a5,a5,-2
 800640a:	00f40423          	sb	a5,8(s0)
    }

    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 800640e:	401c                	lw	a5,0(s0)
 8006410:	4605                	li	a2,1
 8006412:	0800d5b7          	lui	a1,0x800d
 8006416:	49858593          	addi	a1,a1,1176 # 800d498 <str.j+0x11a8>
 800641a:	4048                	lw	a0,4(s0)
 800641c:	9782                	jalr	a5
    encoder->je_write(encoder->je_arg, key, strlen(key));
 800641e:	00042903          	lw	s2,0(s0)
 8006422:	8526                	mv	a0,s1
 8006424:	82afb0ef          	jal	ra,800144e <strlen>
 8006428:	862a                	mv	a2,a0
 800642a:	85a6                	mv	a1,s1
 800642c:	4048                	lw	a0,4(s0)
 800642e:	9902                	jalr	s2
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
 8006430:	401c                	lw	a5,0(s0)
 8006432:	460d                	li	a2,3
 8006434:	0800d5b7          	lui	a1,0x800d
 8006438:	49c58593          	addi	a1,a1,1180 # 800d49c <str.j+0x11ac>
 800643c:	4048                	lw	a0,4(s0)
 800643e:	9782                	jalr	a5

    return (0);
}
 8006440:	4501                	li	a0,0
 8006442:	40b2                	lw	ra,12(sp)
 8006444:	4422                	lw	s0,8(sp)
 8006446:	4492                	lw	s1,4(sp)
 8006448:	4902                	lw	s2,0(sp)
 800644a:	0141                	addi	sp,sp,16
 800644c:	8082                	ret

0800644e <json_encode_object_entry>:

int
json_encode_object_entry(struct json_encoder *encoder, char *key,
        struct json_value *val)
{
 800644e:	1101                	addi	sp,sp,-32
 8006450:	ce06                	sw	ra,28(sp)
 8006452:	cc22                	sw	s0,24(sp)
 8006454:	ca26                	sw	s1,20(sp)
 8006456:	c84a                	sw	s2,16(sp)
 8006458:	c64e                	sw	s3,12(sp)
 800645a:	842a                	mv	s0,a0
 800645c:	84ae                	mv	s1,a1
 800645e:	8932                	mv	s2,a2
    int rc;

    if (encoder->je_wr_commas) {
 8006460:	00854783          	lbu	a5,8(a0)
 8006464:	8b85                	andi	a5,a5,1
 8006466:	cf91                	beqz	a5,8006482 <json_encode_object_entry+0x34>
        encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 8006468:	411c                	lw	a5,0(a0)
 800646a:	4605                	li	a2,1
 800646c:	0800d5b7          	lui	a1,0x800d
 8006470:	49458593          	addi	a1,a1,1172 # 800d494 <str.j+0x11a4>
 8006474:	4148                	lw	a0,4(a0)
 8006476:	9782                	jalr	a5
        encoder->je_wr_commas = 0;
 8006478:	00844783          	lbu	a5,8(s0)
 800647c:	9bf9                	andi	a5,a5,-2
 800647e:	00f40423          	sb	a5,8(s0)
    }
    /* Write the key entry */
    encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 8006482:	401c                	lw	a5,0(s0)
 8006484:	4605                	li	a2,1
 8006486:	0800d5b7          	lui	a1,0x800d
 800648a:	49858593          	addi	a1,a1,1176 # 800d498 <str.j+0x11a8>
 800648e:	4048                	lw	a0,4(s0)
 8006490:	9782                	jalr	a5
    encoder->je_write(encoder->je_arg, key, strlen(key));
 8006492:	00042983          	lw	s3,0(s0)
 8006496:	8526                	mv	a0,s1
 8006498:	fb7fa0ef          	jal	ra,800144e <strlen>
 800649c:	862a                	mv	a2,a0
 800649e:	85a6                	mv	a1,s1
 80064a0:	4048                	lw	a0,4(s0)
 80064a2:	9982                	jalr	s3
    encoder->je_write(encoder->je_arg, "\": ", sizeof("\": ")-1);
 80064a4:	401c                	lw	a5,0(s0)
 80064a6:	460d                	li	a2,3
 80064a8:	0800d5b7          	lui	a1,0x800d
 80064ac:	49c58593          	addi	a1,a1,1180 # 800d49c <str.j+0x11ac>
 80064b0:	4048                	lw	a0,4(s0)
 80064b2:	9782                	jalr	a5

    rc = json_encode_value(encoder, val);
 80064b4:	85ca                	mv	a1,s2
 80064b6:	8522                	mv	a0,s0
 80064b8:	2839                	jal	80064d6 <json_encode_value>
    if (rc != 0) {
 80064ba:	e519                	bnez	a0,80064c8 <json_encode_object_entry+0x7a>
        goto err;
    }
    encoder->je_wr_commas = 1;
 80064bc:	00844783          	lbu	a5,8(s0)
 80064c0:	0017e793          	ori	a5,a5,1
 80064c4:	00f40423          	sb	a5,8(s0)

    return (0);
err:
    return (rc);
}
 80064c8:	40f2                	lw	ra,28(sp)
 80064ca:	4462                	lw	s0,24(sp)
 80064cc:	44d2                	lw	s1,20(sp)
 80064ce:	4942                	lw	s2,16(sp)
 80064d0:	49b2                	lw	s3,12(sp)
 80064d2:	6105                	addi	sp,sp,32
 80064d4:	8082                	ret

080064d6 <json_encode_value>:
    switch (jv->jv_type) {
 80064d6:	0015c783          	lbu	a5,1(a1)
 80064da:	4715                	li	a4,5
 80064dc:	24f76a63          	bltu	a4,a5,8006730 <json_encode_value+0x25a>
{
 80064e0:	1101                	addi	sp,sp,-32
 80064e2:	ce06                	sw	ra,28(sp)
 80064e4:	cc22                	sw	s0,24(sp)
 80064e6:	ca26                	sw	s1,20(sp)
 80064e8:	c84a                	sw	s2,16(sp)
 80064ea:	c64e                	sw	s3,12(sp)
 80064ec:	842e                	mv	s0,a1
 80064ee:	84aa                	mv	s1,a0
    switch (jv->jv_type) {
 80064f0:	078a                	slli	a5,a5,0x2
 80064f2:	0800d737          	lui	a4,0x800d
 80064f6:	64470713          	addi	a4,a4,1604 # 800d644 <sensor_node_addresses+0x64>
 80064fa:	97ba                	add	a5,a5,a4
 80064fc:	439c                	lw	a5,0(a5)
 80064fe:	8782                	jr	a5
            len = sprintf(encoder->je_encode_buf, "%s",
 8006500:	00950913          	addi	s2,a0,9
                    jv->jv_val.u > 0 ? "true" : "false");
 8006504:	4598                	lw	a4,8(a1)
 8006506:	45d4                	lw	a3,12(a1)
            len = sprintf(encoder->je_encode_buf, "%s",
 8006508:	00d767b3          	or	a5,a4,a3
 800650c:	c39d                	beqz	a5,8006532 <json_encode_value+0x5c>
 800650e:	0800d637          	lui	a2,0x800d
 8006512:	66860613          	addi	a2,a2,1640 # 800d668 <sensor_node_addresses+0x88>
 8006516:	0800d5b7          	lui	a1,0x800d
 800651a:	67058593          	addi	a1,a1,1648 # 800d670 <sensor_node_addresses+0x90>
 800651e:	854a                	mv	a0,s2
 8006520:	6c6020ef          	jal	ra,8008be6 <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
 8006524:	409c                	lw	a5,0(s1)
 8006526:	862a                	mv	a2,a0
 8006528:	85ca                	mv	a1,s2
 800652a:	40c8                	lw	a0,4(s1)
 800652c:	9782                	jalr	a5
    return (0);
 800652e:	4501                	li	a0,0
            break;
 8006530:	a2b1                	j	800667c <json_encode_value+0x1a6>
            len = sprintf(encoder->je_encode_buf, "%s",
 8006532:	0800d637          	lui	a2,0x800d
 8006536:	66060613          	addi	a2,a2,1632 # 800d660 <sensor_node_addresses+0x80>
 800653a:	bff1                	j	8006516 <json_encode_value+0x40>
            len = sprintf(encoder->je_encode_buf, "%llu",
 800653c:	00950913          	addi	s2,a0,9
 8006540:	4590                	lw	a2,8(a1)
 8006542:	45d4                	lw	a3,12(a1)
 8006544:	0800d5b7          	lui	a1,0x800d
 8006548:	67458593          	addi	a1,a1,1652 # 800d674 <sensor_node_addresses+0x94>
 800654c:	854a                	mv	a0,s2
 800654e:	698020ef          	jal	ra,8008be6 <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
 8006552:	409c                	lw	a5,0(s1)
 8006554:	862a                	mv	a2,a0
 8006556:	85ca                	mv	a1,s2
 8006558:	40c8                	lw	a0,4(s1)
 800655a:	9782                	jalr	a5
    return (0);
 800655c:	4501                	li	a0,0
            break;
 800655e:	aa39                	j	800667c <json_encode_value+0x1a6>
            len = sprintf(encoder->je_encode_buf, "%lld",
 8006560:	00950913          	addi	s2,a0,9
 8006564:	4590                	lw	a2,8(a1)
 8006566:	45d4                	lw	a3,12(a1)
 8006568:	0800d5b7          	lui	a1,0x800d
 800656c:	67c58593          	addi	a1,a1,1660 # 800d67c <sensor_node_addresses+0x9c>
 8006570:	854a                	mv	a0,s2
 8006572:	674020ef          	jal	ra,8008be6 <sprintf>
            encoder->je_write(encoder->je_arg, encoder->je_encode_buf, len);
 8006576:	409c                	lw	a5,0(s1)
 8006578:	862a                	mv	a2,a0
 800657a:	85ca                	mv	a1,s2
 800657c:	40c8                	lw	a0,4(s1)
 800657e:	9782                	jalr	a5
    return (0);
 8006580:	4501                	li	a0,0
            break;
 8006582:	a8ed                	j	800667c <json_encode_value+0x1a6>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 8006584:	411c                	lw	a5,0(a0)
 8006586:	4605                	li	a2,1
 8006588:	0800d5b7          	lui	a1,0x800d
 800658c:	49858593          	addi	a1,a1,1176 # 800d498 <str.j+0x11a8>
 8006590:	4148                	lw	a0,4(a0)
 8006592:	9782                	jalr	a5
            for (i = 0; i < jv->jv_len; i++) {
 8006594:	4901                	li	s2,0
 8006596:	a891                	j	80065ea <json_encode_value+0x114>
 8006598:	02200713          	li	a4,34
 800659c:	02e78863          	beq	a5,a4,80065cc <json_encode_value+0xf6>
 80065a0:	00f76e63          	bltu	a4,a5,80065bc <json_encode_value+0xe6>
 80065a4:	4735                	li	a4,13
 80065a6:	06e79963          	bne	a5,a4,8006618 <json_encode_value+0x142>
                        encoder->je_write(encoder->je_arg, "\\r",
 80065aa:	409c                	lw	a5,0(s1)
 80065ac:	4609                	li	a2,2
 80065ae:	0800d5b7          	lui	a1,0x800d
 80065b2:	68c58593          	addi	a1,a1,1676 # 800d68c <sensor_node_addresses+0xac>
 80065b6:	40c8                	lw	a0,4(s1)
 80065b8:	9782                	jalr	a5
                        break;
 80065ba:	a03d                	j	80065e8 <json_encode_value+0x112>
 80065bc:	02f00713          	li	a4,47
 80065c0:	00e78663          	beq	a5,a4,80065cc <json_encode_value+0xf6>
 80065c4:	05c00713          	li	a4,92
 80065c8:	04e79863          	bne	a5,a4,8006618 <json_encode_value+0x142>
                        encoder->je_write(encoder->je_arg, "\\",
 80065cc:	409c                	lw	a5,0(s1)
 80065ce:	4605                	li	a2,1
 80065d0:	0800d5b7          	lui	a1,0x800d
 80065d4:	68458593          	addi	a1,a1,1668 # 800d684 <sensor_node_addresses+0xa4>
 80065d8:	40c8                	lw	a0,4(s1)
 80065da:	9782                	jalr	a5
                        encoder->je_write(encoder->je_arg,
 80065dc:	409c                	lw	a5,0(s1)
                                (char *) &jv->jv_val.str[i], 1);
 80065de:	440c                	lw	a1,8(s0)
                        encoder->je_write(encoder->je_arg,
 80065e0:	4605                	li	a2,1
 80065e2:	95ce                	add	a1,a1,s3
 80065e4:	40c8                	lw	a0,4(s1)
 80065e6:	9782                	jalr	a5
            for (i = 0; i < jv->jv_len; i++) {
 80065e8:	0905                	addi	s2,s2,1
 80065ea:	00245783          	lhu	a5,2(s0)
 80065ee:	06f95e63          	bge	s2,a5,800666a <json_encode_value+0x194>
                switch (jv->jv_val.str[i]) {
 80065f2:	440c                	lw	a1,8(s0)
 80065f4:	89ca                	mv	s3,s2
 80065f6:	95ca                	add	a1,a1,s2
 80065f8:	0005c783          	lbu	a5,0(a1)
 80065fc:	4731                	li	a4,12
 80065fe:	04e78463          	beq	a5,a4,8006646 <json_encode_value+0x170>
 8006602:	f8f76be3          	bltu	a4,a5,8006598 <json_encode_value+0xc2>
 8006606:	4725                	li	a4,9
 8006608:	00e78d63          	beq	a5,a4,8006622 <json_encode_value+0x14c>
 800660c:	4729                	li	a4,10
 800660e:	02e78363          	beq	a5,a4,8006634 <json_encode_value+0x15e>
 8006612:	4721                	li	a4,8
 8006614:	04e78263          	beq	a5,a4,8006658 <json_encode_value+0x182>
                        encoder->je_write(encoder->je_arg,
 8006618:	409c                	lw	a5,0(s1)
 800661a:	4605                	li	a2,1
 800661c:	40c8                	lw	a0,4(s1)
 800661e:	9782                	jalr	a5
                        break;
 8006620:	b7e1                	j	80065e8 <json_encode_value+0x112>
                        encoder->je_write(encoder->je_arg, "\\t",
 8006622:	409c                	lw	a5,0(s1)
 8006624:	4609                	li	a2,2
 8006626:	0800d5b7          	lui	a1,0x800d
 800662a:	68858593          	addi	a1,a1,1672 # 800d688 <sensor_node_addresses+0xa8>
 800662e:	40c8                	lw	a0,4(s1)
 8006630:	9782                	jalr	a5
                        break;
 8006632:	bf5d                	j	80065e8 <json_encode_value+0x112>
                        encoder->je_write(encoder->je_arg, "\\n",
 8006634:	409c                	lw	a5,0(s1)
 8006636:	4609                	li	a2,2
 8006638:	0800d5b7          	lui	a1,0x800d
 800663c:	69058593          	addi	a1,a1,1680 # 800d690 <sensor_node_addresses+0xb0>
 8006640:	40c8                	lw	a0,4(s1)
 8006642:	9782                	jalr	a5
                        break;
 8006644:	b755                	j	80065e8 <json_encode_value+0x112>
                        encoder->je_write(encoder->je_arg, "\\f",
 8006646:	409c                	lw	a5,0(s1)
 8006648:	4609                	li	a2,2
 800664a:	0800d5b7          	lui	a1,0x800d
 800664e:	69458593          	addi	a1,a1,1684 # 800d694 <sensor_node_addresses+0xb4>
 8006652:	40c8                	lw	a0,4(s1)
 8006654:	9782                	jalr	a5
                        break;
 8006656:	bf49                	j	80065e8 <json_encode_value+0x112>
                        encoder->je_write(encoder->je_arg, "\\b",
 8006658:	409c                	lw	a5,0(s1)
 800665a:	4609                	li	a2,2
 800665c:	0800d5b7          	lui	a1,0x800d
 8006660:	69858593          	addi	a1,a1,1688 # 800d698 <sensor_node_addresses+0xb8>
 8006664:	40c8                	lw	a0,4(s1)
 8006666:	9782                	jalr	a5
                        break;
 8006668:	b741                	j	80065e8 <json_encode_value+0x112>
            encoder->je_write(encoder->je_arg, "\"", sizeof("\"")-1);
 800666a:	409c                	lw	a5,0(s1)
 800666c:	4605                	li	a2,1
 800666e:	0800d5b7          	lui	a1,0x800d
 8006672:	49858593          	addi	a1,a1,1176 # 800d498 <str.j+0x11a8>
 8006676:	40c8                	lw	a0,4(s1)
 8006678:	9782                	jalr	a5
    return (0);
 800667a:	4501                	li	a0,0
}
 800667c:	40f2                	lw	ra,28(sp)
 800667e:	4462                	lw	s0,24(sp)
 8006680:	44d2                	lw	s1,20(sp)
 8006682:	4942                	lw	s2,16(sp)
 8006684:	49b2                	lw	s3,12(sp)
 8006686:	6105                	addi	sp,sp,32
 8006688:	8082                	ret
            JSON_ENCODE_ARRAY_START(encoder);
 800668a:	411c                	lw	a5,0(a0)
 800668c:	4605                	li	a2,1
 800668e:	0800d5b7          	lui	a1,0x800d
 8006692:	69c58593          	addi	a1,a1,1692 # 800d69c <sensor_node_addresses+0xbc>
 8006696:	4148                	lw	a0,4(a0)
 8006698:	9782                	jalr	a5
            for (i = 0; i < jv->jv_len; i++) {
 800669a:	4901                	li	s2,0
 800669c:	a811                	j	80066b0 <json_encode_value+0x1da>
                    encoder->je_write(encoder->je_arg, ",", sizeof(",")-1);
 800669e:	409c                	lw	a5,0(s1)
 80066a0:	4605                	li	a2,1
 80066a2:	0800d5b7          	lui	a1,0x800d
 80066a6:	49458593          	addi	a1,a1,1172 # 800d494 <str.j+0x11a4>
 80066aa:	40c8                	lw	a0,4(s1)
 80066ac:	9782                	jalr	a5
            for (i = 0; i < jv->jv_len; i++) {
 80066ae:	0905                	addi	s2,s2,1
 80066b0:	00245783          	lhu	a5,2(s0)
 80066b4:	02f95063          	bge	s2,a5,80066d4 <json_encode_value+0x1fe>
                rc = json_encode_value(encoder, jv->jv_val.composite.values[i]);
 80066b8:	445c                	lw	a5,12(s0)
 80066ba:	00291713          	slli	a4,s2,0x2
 80066be:	97ba                	add	a5,a5,a4
 80066c0:	438c                	lw	a1,0(a5)
 80066c2:	8526                	mv	a0,s1
 80066c4:	3d09                	jal	80064d6 <json_encode_value>
                if (rc != 0) {
 80066c6:	f95d                	bnez	a0,800667c <json_encode_value+0x1a6>
                if (i != jv->jv_len - 1) {
 80066c8:	00245783          	lhu	a5,2(s0)
 80066cc:	17fd                	addi	a5,a5,-1
 80066ce:	fd2798e3          	bne	a5,s2,800669e <json_encode_value+0x1c8>
 80066d2:	bff1                	j	80066ae <json_encode_value+0x1d8>
            JSON_ENCODE_ARRAY_END(encoder);
 80066d4:	409c                	lw	a5,0(s1)
 80066d6:	4605                	li	a2,1
 80066d8:	0800d5b7          	lui	a1,0x800d
 80066dc:	6a058593          	addi	a1,a1,1696 # 800d6a0 <sensor_node_addresses+0xc0>
 80066e0:	40c8                	lw	a0,4(s1)
 80066e2:	9782                	jalr	a5
    return (0);
 80066e4:	4501                	li	a0,0
            break;
 80066e6:	bf59                	j	800667c <json_encode_value+0x1a6>
            JSON_ENCODE_OBJECT_START(encoder);
 80066e8:	411c                	lw	a5,0(a0)
 80066ea:	4605                	li	a2,1
 80066ec:	0800d5b7          	lui	a1,0x800d
 80066f0:	65c58593          	addi	a1,a1,1628 # 800d65c <sensor_node_addresses+0x7c>
 80066f4:	4148                	lw	a0,4(a0)
 80066f6:	9782                	jalr	a5
            for (i = 0; i < jv->jv_len; i++) {
 80066f8:	4901                	li	s2,0
 80066fa:	00245783          	lhu	a5,2(s0)
 80066fe:	00f95f63          	bge	s2,a5,800671c <json_encode_value+0x246>
                        jv->jv_val.composite.keys[i],
 8006702:	441c                	lw	a5,8(s0)
 8006704:	00291693          	slli	a3,s2,0x2
 8006708:	97b6                	add	a5,a5,a3
                        jv->jv_val.composite.values[i]);
 800670a:	4458                	lw	a4,12(s0)
 800670c:	9736                	add	a4,a4,a3
                rc = json_encode_object_entry(encoder,
 800670e:	4310                	lw	a2,0(a4)
 8006710:	438c                	lw	a1,0(a5)
 8006712:	8526                	mv	a0,s1
 8006714:	3b2d                	jal	800644e <json_encode_object_entry>
                if (rc != 0) {
 8006716:	f13d                	bnez	a0,800667c <json_encode_value+0x1a6>
            for (i = 0; i < jv->jv_len; i++) {
 8006718:	0905                	addi	s2,s2,1
 800671a:	b7c5                	j	80066fa <json_encode_value+0x224>
            JSON_ENCODE_OBJECT_END(encoder);
 800671c:	409c                	lw	a5,0(s1)
 800671e:	4605                	li	a2,1
 8006720:	0800d5b7          	lui	a1,0x800d
 8006724:	6a458593          	addi	a1,a1,1700 # 800d6a4 <sensor_node_addresses+0xc4>
 8006728:	40c8                	lw	a0,4(s1)
 800672a:	9782                	jalr	a5
    return (0);
 800672c:	4501                	li	a0,0
            break;
 800672e:	b7b9                	j	800667c <json_encode_value+0x1a6>
            rc = -1;
 8006730:	557d                	li	a0,-1
}
 8006732:	8082                	ret

08006734 <json_encode_object_finish>:

int
json_encode_object_finish(struct json_encoder *encoder)
{
 8006734:	1141                	addi	sp,sp,-16
 8006736:	c606                	sw	ra,12(sp)
 8006738:	c422                	sw	s0,8(sp)
 800673a:	842a                	mv	s0,a0
    JSON_ENCODE_OBJECT_END(encoder);
 800673c:	411c                	lw	a5,0(a0)
 800673e:	4605                	li	a2,1
 8006740:	0800d5b7          	lui	a1,0x800d
 8006744:	6a458593          	addi	a1,a1,1700 # 800d6a4 <sensor_node_addresses+0xc4>
 8006748:	4148                	lw	a0,4(a0)
 800674a:	9782                	jalr	a5
    /* Useful in case of nested objects. */
    encoder->je_wr_commas = 1;
 800674c:	00844783          	lbu	a5,8(s0)
 8006750:	0017e793          	ori	a5,a5,1
 8006754:	00f40423          	sb	a5,8(s0)

    return (0);
}
 8006758:	4501                	li	a0,0
 800675a:	40b2                	lw	ra,12(sp)
 800675c:	4422                	lw	s0,8(sp)
 800675e:	0141                	addi	sp,sp,16
 8006760:	8082                	ret

08006762 <json_encode_array_name>:

int
json_encode_array_name(struct json_encoder *encoder, char *name)
{
 8006762:	1141                	addi	sp,sp,-16
 8006764:	c606                	sw	ra,12(sp)
    return json_encode_object_key(encoder, name);
 8006766:	c79ff0ef          	jal	ra,80063de <json_encode_object_key>
}
 800676a:	40b2                	lw	ra,12(sp)
 800676c:	0141                	addi	sp,sp,16
 800676e:	8082                	ret

08006770 <json_encode_array_start>:

int
json_encode_array_start(struct json_encoder *encoder)
{
 8006770:	1141                	addi	sp,sp,-16
 8006772:	c606                	sw	ra,12(sp)
 8006774:	c422                	sw	s0,8(sp)
 8006776:	842a                	mv	s0,a0
    JSON_ENCODE_ARRAY_START(encoder);
 8006778:	411c                	lw	a5,0(a0)
 800677a:	4605                	li	a2,1
 800677c:	0800d5b7          	lui	a1,0x800d
 8006780:	69c58593          	addi	a1,a1,1692 # 800d69c <sensor_node_addresses+0xbc>
 8006784:	4148                	lw	a0,4(a0)
 8006786:	9782                	jalr	a5
    encoder->je_wr_commas = 0;
 8006788:	00844783          	lbu	a5,8(s0)
 800678c:	9bf9                	andi	a5,a5,-2
 800678e:	00f40423          	sb	a5,8(s0)

    return (0);
}
 8006792:	4501                	li	a0,0
 8006794:	40b2                	lw	ra,12(sp)
 8006796:	4422                	lw	s0,8(sp)
 8006798:	0141                	addi	sp,sp,16
 800679a:	8082                	ret

0800679c <json_encode_array_finish>:
}


int
json_encode_array_finish(struct json_encoder *encoder)
{
 800679c:	1141                	addi	sp,sp,-16
 800679e:	c606                	sw	ra,12(sp)
    encoder->je_wr_commas = 1;
 80067a0:	00854783          	lbu	a5,8(a0)
 80067a4:	0017e793          	ori	a5,a5,1
 80067a8:	00f50423          	sb	a5,8(a0)
    JSON_ENCODE_ARRAY_END(encoder);
 80067ac:	411c                	lw	a5,0(a0)
 80067ae:	4605                	li	a2,1
 80067b0:	0800d5b7          	lui	a1,0x800d
 80067b4:	6a058593          	addi	a1,a1,1696 # 800d6a0 <sensor_node_addresses+0xc0>
 80067b8:	4148                	lw	a0,4(a0)
 80067ba:	9782                	jalr	a5

    return (0);
}
 80067bc:	4501                	li	a0,0
 80067be:	40b2                	lw	ra,12(sp)
 80067c0:	0141                	addi	sp,sp,16
 80067c2:	8082                	ret

080067c4 <_exit>:

void _exit(int status);

void
_exit(int status)
{
 80067c4:	1141                	addi	sp,sp,-16
 80067c6:	c606                	sw	ra,12(sp)
    hal_system_reset();
 80067c8:	280d                	jal	80067fa <hal_system_reset>

080067ca <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return GD32VF103_HW_ID_LEN;
}
 80067ca:	4531                	li	a0,12
 80067cc:	8082                	ret

080067ce <hal_bsp_hw_id>:

int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
 80067ce:	1141                	addi	sp,sp,-16
 80067d0:	c606                	sw	ra,12(sp)
 80067d2:	c422                	sw	s0,8(sp)
 80067d4:	842e                	mv	s0,a1
    int cnt;

    cnt = min(GD32VF103_HW_ID_LEN, max_len);
 80067d6:	47b1                	li	a5,12
 80067d8:	00b7d363          	bge	a5,a1,80067de <hal_bsp_hw_id+0x10>
 80067dc:	4431                	li	s0,12
    memcpy(id, (void *)UID_BASE, cnt);
 80067de:	8622                	mv	a2,s0
 80067e0:	1ffff5b7          	lui	a1,0x1ffff
 80067e4:	7e858593          	addi	a1,a1,2024 # 1ffff7e8 <_data_lma+0x17ff1ee8>
 80067e8:	3d0020ef          	jal	ra,8008bb8 <memcpy>

    return cnt;
}
 80067ec:	8522                	mv	a0,s0
 80067ee:	40b2                	lw	ra,12(sp)
 80067f0:	4422                	lw	s0,8(sp)
 80067f2:	0141                	addi	sp,sp,16
 80067f4:	8082                	ret

080067f6 <hal_debugger_connected>:

int
hal_debugger_connected(void)
{
    return 0;
}
 80067f6:	4501                	li	a0,0
 80067f8:	8082                	ret

080067fa <hal_system_reset>:
{
 80067fa:	1141                	addi	sp,sp,-16
 80067fc:	c606                	sw	ra,12(sp)
        if (hal_debugger_connected()) {
 80067fe:	3fe5                	jal	80067f6 <hal_debugger_connected>
 8006800:	dd7d                	beqz	a0,80067fe <hal_system_reset+0x4>
            asm ("ebreak");
 8006802:	9002                	ebreak
 8006804:	bfed                	j	80067fe <hal_system_reset+0x4>

08006806 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
 8006806:	200037b7          	lui	a5,0x20003
 800680a:	a7878793          	addi	a5,a5,-1416 # 20002a78 <sensor_mgr>
 800680e:	5b98                	lw	a4,48(a5)
 8006810:	00a71b63          	bne	a4,a0,8006826 <sensor_mgr_remove+0x20>
 8006814:	08072703          	lw	a4,128(a4)
 8006818:	200037b7          	lui	a5,0x20003
 800681c:	a7878793          	addi	a5,a5,-1416 # 20002a78 <sensor_mgr>
 8006820:	db98                	sw	a4,48(a5)
 8006822:	8082                	ret
 8006824:	873e                	mv	a4,a5
 8006826:	08072783          	lw	a5,128(a4)
 800682a:	fea79de3          	bne	a5,a0,8006824 <sensor_mgr_remove+0x1e>
 800682e:	0807a783          	lw	a5,128(a5)
 8006832:	08f72023          	sw	a5,128(a4)
}
 8006836:	8082                	ret

08006838 <sensor_mgr_insert>:
sensor_mgr_insert(struct sensor *sensor)
{
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
 8006838:	511c                	lw	a5,32(a0)
 800683a:	cb81                	beqz	a5,800684a <sensor_mgr_insert+0x12>
        }
        goto insert;
    }

    prev = cursor = NULL;
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800683c:	200037b7          	lui	a5,0x20003
 8006840:	a7878793          	addi	a5,a5,-1416 # 20002a78 <sensor_mgr>
 8006844:	5b9c                	lw	a5,48(a5)
    prev = cursor = NULL;
 8006846:	4681                	li	a3,0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 8006848:	a839                	j	8006866 <sensor_mgr_insert+0x2e>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800684a:	200037b7          	lui	a5,0x20003
 800684e:	a7878793          	addi	a5,a5,-1416 # 20002a78 <sensor_mgr>
 8006852:	5b9c                	lw	a5,48(a5)
    prev = cursor = NULL;
 8006854:	4681                	li	a3,0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 8006856:	c385                	beqz	a5,8006876 <sensor_mgr_insert+0x3e>
            prev = cursor;
 8006858:	86be                	mv	a3,a5
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 800685a:	0807a783          	lw	a5,128(a5)
 800685e:	bfe5                	j	8006856 <sensor_mgr_insert+0x1e>

        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
            break;
        }

        prev = cursor;
 8006860:	86be                	mv	a3,a5
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
 8006862:	0807a783          	lw	a5,128(a5)
 8006866:	cb81                	beqz	a5,8006876 <sensor_mgr_insert+0x3e>
        if (!cursor->s_poll_rate) {
 8006868:	5398                	lw	a4,32(a5)
 800686a:	c711                	beqz	a4,8006876 <sensor_mgr_insert+0x3e>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
 800686c:	5158                	lw	a4,36(a0)
 800686e:	53d0                	lw	a2,36(a5)
 8006870:	8f11                	sub	a4,a4,a2
 8006872:	fe0757e3          	bgez	a4,8006860 <sensor_mgr_insert+0x28>
    }

insert:
    if (prev == NULL) {
 8006876:	ca81                	beqz	a3,8006886 <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
 8006878:	0806a783          	lw	a5,128(a3) # ff0080 <__stack_size+0xfef880>
 800687c:	08f52023          	sw	a5,128(a0)
 8006880:	08a6a023          	sw	a0,128(a3)
    }
}
 8006884:	8082                	ret
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
 8006886:	200037b7          	lui	a5,0x20003
 800688a:	a7878793          	addi	a5,a5,-1416 # 20002a78 <sensor_mgr>
 800688e:	5b98                	lw	a4,48(a5)
 8006890:	08e52023          	sw	a4,128(a0)
 8006894:	db88                	sw	a0,48(a5)
 8006896:	8082                	ret

08006898 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
 8006898:	5d68                	lw	a0,124(a0)
}
 800689a:	00153513          	seqz	a0,a0
 800689e:	8082                	ret

080068a0 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
 80068a0:	200037b7          	lui	a5,0x20003
 80068a4:	a7878793          	addi	a5,a5,-1416 # 20002a78 <sensor_mgr>
 80068a8:	d7c8                	sw	a0,44(a5)
}
 80068aa:	8082                	ret

080068ac <sensor_mgr_match_bytype>:
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
 80068ac:	419c                	lw	a5,0(a1)
 80068ae:	41d8                	lw	a4,4(a1)
 80068b0:	4910                	lw	a2,16(a0)
 80068b2:	4954                	lw	a3,20(a0)
 80068b4:	8ff1                	and	a5,a5,a2
 80068b6:	8f75                	and	a4,a4,a3
 80068b8:	4d14                	lw	a3,24(a0)
 80068ba:	4d48                	lw	a0,28(a0)
 80068bc:	8ff5                	and	a5,a5,a3
 80068be:	8d79                	and	a0,a0,a4
 80068c0:	8d5d                	or	a0,a0,a5
}
 80068c2:	00a03533          	snez	a0,a0
 80068c6:	8082                	ret

080068c8 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
 80068c8:	1101                	addi	sp,sp,-32
 80068ca:	ce06                	sw	ra,28(sp)
 80068cc:	cc22                	sw	s0,24(sp)
 80068ce:	ca26                	sw	s1,20(sp)
 80068d0:	c84a                	sw	s2,16(sp)
 80068d2:	c64e                	sw	s3,12(sp)
 80068d4:	c452                	sw	s4,8(sp)
 80068d6:	c256                	sw	s5,4(sp)
 80068d8:	89aa                	mv	s3,a0
 80068da:	8aae                	mv	s5,a1
 80068dc:	8a32                	mv	s4,a2
 80068de:	8936                	mv	s2,a3
 80068e0:	84ba                	mv	s1,a4
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
 80068e2:	0045c703          	lbu	a4,4(a1)
 80068e6:	4785                	li	a5,1
 80068e8:	02f70663          	beq	a4,a5,8006914 <sensor_read_data_func+0x4c>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
 80068ec:	5560                	lw	s0,108(a0)
 80068ee:	a011                	j	80068f2 <sensor_read_data_func+0x2a>
 80068f0:	4800                	lw	s0,16(s0)
 80068f2:	c00d                	beqz	s0,8006914 <sensor_read_data_func+0x4c>
            if (listener->sl_sensor_type & type) {
 80068f4:	401c                	lw	a5,0(s0)
 80068f6:	4058                	lw	a4,4(s0)
 80068f8:	0127f7b3          	and	a5,a5,s2
 80068fc:	8f65                	and	a4,a4,s1
 80068fe:	00e7e6b3          	or	a3,a5,a4
 8006902:	d6fd                	beqz	a3,80068f0 <sensor_read_data_func+0x28>
                listener->sl_func(sensor, listener->sl_arg, data, type);
 8006904:	441c                	lw	a5,8(s0)
 8006906:	86ca                	mv	a3,s2
 8006908:	8726                	mv	a4,s1
 800690a:	8652                	mv	a2,s4
 800690c:	444c                	lw	a1,12(s0)
 800690e:	854e                	mv	a0,s3
 8006910:	9782                	jalr	a5
 8006912:	bff9                	j	80068f0 <sensor_read_data_func+0x28>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
 8006914:	000aa783          	lw	a5,0(s5)
 8006918:	c38d                	beqz	a5,800693a <sensor_read_data_func+0x72>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
 800691a:	86ca                	mv	a3,s2
 800691c:	8726                	mv	a4,s1
 800691e:	8652                	mv	a2,s4
 8006920:	004aa583          	lw	a1,4(s5)
 8006924:	854e                	mv	a0,s3
 8006926:	9782                	jalr	a5
    }

    return (0);
}
 8006928:	40f2                	lw	ra,28(sp)
 800692a:	4462                	lw	s0,24(sp)
 800692c:	44d2                	lw	s1,20(sp)
 800692e:	4942                	lw	s2,16(sp)
 8006930:	49b2                	lw	s3,12(sp)
 8006932:	4a22                	lw	s4,8(sp)
 8006934:	4a92                	lw	s5,4(sp)
 8006936:	6105                	addi	sp,sp,32
 8006938:	8082                	ret
    return (0);
 800693a:	4501                	li	a0,0
 800693c:	b7f5                	j	8006928 <sensor_read_data_func+0x60>

0800693e <sensor_mgr_match_bydevname>:
{
 800693e:	1141                	addi	sp,sp,-16
 8006940:	c606                	sw	ra,12(sp)
    if (!strcmp(sensor->s_dev->od_name, devname)) {
 8006942:	411c                	lw	a5,0(a0)
 8006944:	4fc8                	lw	a0,28(a5)
 8006946:	2c6020ef          	jal	ra,8008c0c <strcmp>
 800694a:	c509                	beqz	a0,8006954 <sensor_mgr_match_bydevname+0x16>
    return (0);
 800694c:	4501                	li	a0,0
}
 800694e:	40b2                	lw	ra,12(sp)
 8006950:	0141                	addi	sp,sp,16
 8006952:	8082                	ret
        return (1);
 8006954:	4505                	li	a0,1
 8006956:	bfe5                	j	800694e <sensor_mgr_match_bydevname+0x10>

08006958 <sensor_base_ts_update_event>:
{
 8006958:	7179                	addi	sp,sp,-48
 800695a:	d606                	sw	ra,44(sp)
 800695c:	d422                	sw	s0,40(sp)
 800695e:	d226                	sw	s1,36(sp)
    ticks = os_time_get();
 8006960:	7a7010ef          	jal	ra,8008906 <os_time_get>
 8006964:	84aa                	mv	s1,a0
    rc = os_gettimeofday(&ostv, &ostz);
 8006966:	006c                	addi	a1,sp,12
 8006968:	0808                	addi	a0,sp,16
 800696a:	7f7010ef          	jal	ra,8008960 <os_gettimeofday>
    if (rc) {
 800696e:	c10d                	beqz	a0,8006990 <sensor_base_ts_update_event+0x38>
        ticks += OS_TICKS_PER_SEC * 600;
 8006970:	67cd                	lui	a5,0x13
 8006972:	c0078793          	addi	a5,a5,-1024 # 12c00 <__stack_size+0x12400>
 8006976:	94be                	add	s1,s1,a5
    os_callout_reset(&st_up_osco, ticks);
 8006978:	85a6                	mv	a1,s1
 800697a:	20003537          	lui	a0,0x20003
 800697e:	aac50513          	addi	a0,a0,-1364 # 20002aac <st_up_osco>
 8006982:	129000ef          	jal	ra,80072aa <os_callout_reset>
}
 8006986:	50b2                	lw	ra,44(sp)
 8006988:	5422                	lw	s0,40(sp)
 800698a:	5492                	lw	s1,36(sp)
 800698c:	6145                	addi	sp,sp,48
 800698e:	8082                	ret
    ticks += OS_TICKS_PER_SEC * 2000;
 8006990:	0003f7b7          	lui	a5,0x3f
 8006994:	80078793          	addi	a5,a5,-2048 # 3e800 <__stack_size+0x3e000>
 8006998:	94be                	add	s1,s1,a5
    sensor_base_ts.st_ostv = ostv;
 800699a:	20003437          	lui	s0,0x20003
 800699e:	47c2                	lw	a5,16(sp)
 80069a0:	acf42823          	sw	a5,-1328(s0) # 20002ad0 <sensor_base_ts>
 80069a4:	ad040413          	addi	s0,s0,-1328
 80069a8:	47d2                	lw	a5,20(sp)
 80069aa:	c05c                	sw	a5,4(s0)
 80069ac:	47e2                	lw	a5,24(sp)
 80069ae:	c41c                	sw	a5,8(s0)
 80069b0:	47f2                	lw	a5,28(sp)
 80069b2:	c45c                	sw	a5,12(s0)
    sensor_base_ts.st_ostz = ostz;
 80069b4:	47b2                	lw	a5,12(sp)
 80069b6:	c81c                	sw	a5,16(s0)
    sensor_base_ts.st_cputime = os_cputime_get32();
 80069b8:	23d000ef          	jal	ra,80073f4 <os_cputime_get32>
 80069bc:	c848                	sw	a0,20(s0)
 80069be:	bf6d                	j	8006978 <sensor_base_ts_update_event+0x20>

080069c0 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
 80069c0:	1141                	addi	sp,sp,-16
 80069c2:	c606                	sw	ra,12(sp)
 80069c4:	c422                	sw	s0,8(sp)
 80069c6:	842a                	mv	s0,a0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
 80069c8:	22d000ef          	jal	ra,80073f4 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
 80069cc:	20003637          	lui	a2,0x20003
 80069d0:	ad060593          	addi	a1,a2,-1328 # 20002ad0 <sensor_base_ts>
 80069d4:	49dc                	lw	a5,20(a1)
 80069d6:	40f506b3          	sub	a3,a0,a5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
 80069da:	c068                	sw	a0,68(s0)
 80069dc:	c9c8                	sw	a0,20(a1)

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 80069de:	ad062703          	lw	a4,-1328(a2)
 80069e2:	ad462803          	lw	a6,-1324(a2)
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 80069e6:	459c                	lw	a5,8(a1)
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 80069e8:	97b6                	add	a5,a5,a3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
 80069ea:	000f4537          	lui	a0,0xf4
 80069ee:	24050513          	addi	a0,a0,576 # f4240 <__stack_size+0xf3a40>
 80069f2:	02a7d6b3          	divu	a3,a5,a0
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
 80069f6:	96ba                	add	a3,a3,a4
 80069f8:	00e6b733          	sltu	a4,a3,a4
 80069fc:	9742                	add	a4,a4,a6
 80069fe:	acd62823          	sw	a3,-1328(a2)
 8006a02:	ace62a23          	sw	a4,-1324(a2)
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
 8006a06:	d814                	sw	a3,48(s0)
 8006a08:	d858                	sw	a4,52(s0)

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
 8006a0a:	02a7f7b3          	remu	a5,a5,a0
    sensor_base_ts.st_ostv.tv_usec  =
 8006a0e:	c59c                	sw	a5,8(a1)
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
 8006a10:	dc1c                	sw	a5,56(s0)

}
 8006a12:	40b2                	lw	ra,12(sp)
 8006a14:	4422                	lw	s0,8(sp)
 8006a16:	0141                	addi	sp,sp,16
 8006a18:	8082                	ret

08006a1a <sensor_mgr_lock>:
{
 8006a1a:	1141                	addi	sp,sp,-16
 8006a1c:	c606                	sw	ra,12(sp)
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
 8006a1e:	55fd                	li	a1,-1
 8006a20:	20003537          	lui	a0,0x20003
 8006a24:	a7850513          	addi	a0,a0,-1416 # 20002a78 <sensor_mgr>
 8006a28:	6ae010ef          	jal	ra,80080d6 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 8006a2c:	c519                	beqz	a0,8006a3a <sensor_mgr_lock+0x20>
 8006a2e:	47a5                	li	a5,9
 8006a30:	00f50763          	beq	a0,a5,8006a3e <sensor_mgr_lock+0x24>
}
 8006a34:	40b2                	lw	ra,12(sp)
 8006a36:	0141                	addi	sp,sp,16
 8006a38:	8082                	ret
        return (0);
 8006a3a:	4501                	li	a0,0
 8006a3c:	bfe5                	j	8006a34 <sensor_mgr_lock+0x1a>
 8006a3e:	4501                	li	a0,0
 8006a40:	bfd5                	j	8006a34 <sensor_mgr_lock+0x1a>

08006a42 <sensor_mgr_unlock>:
{
 8006a42:	1141                	addi	sp,sp,-16
 8006a44:	c606                	sw	ra,12(sp)
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
 8006a46:	20003537          	lui	a0,0x20003
 8006a4a:	a7850513          	addi	a0,a0,-1416 # 20002a78 <sensor_mgr>
 8006a4e:	5a2010ef          	jal	ra,8007ff0 <os_mutex_release>
}
 8006a52:	40b2                	lw	ra,12(sp)
 8006a54:	0141                	addi	sp,sp,16
 8006a56:	8082                	ret

08006a58 <sensor_mgr_evq_get>:
    return (sensor_mgr.mgr_eventq);
 8006a58:	200037b7          	lui	a5,0x20003
}
 8006a5c:	a7878793          	addi	a5,a5,-1416 # 20002a78 <sensor_mgr>
 8006a60:	57c8                	lw	a0,44(a5)
 8006a62:	8082                	ret

08006a64 <sensor_mgr_init>:
{
 8006a64:	7179                	addi	sp,sp,-48
 8006a66:	d606                	sw	ra,44(sp)
 8006a68:	d422                	sw	s0,40(sp)
    sensor_mgr_evq_set(os_eventq_dflt_get());
 8006a6a:	54b000ef          	jal	ra,80077b4 <os_eventq_dflt_get>
 8006a6e:	3d0d                	jal	80068a0 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
 8006a70:	0800d737          	lui	a4,0x800d
 8006a74:	6a870713          	addi	a4,a4,1704 # 800d6a8 <sensor_node_addresses+0xc8>
 8006a78:	bac18693          	addi	a3,gp,-1108 # 200008cc <sensor_notify_evt_area>
 8006a7c:	4661                	li	a2,24
 8006a7e:	4595                	li	a1,5
 8006a80:	c2418513          	addi	a0,gp,-988 # 20000944 <sensor_notify_evt_pool>
 8006a84:	34c010ef          	jal	ra,8007dd0 <os_mempool_init>
    assert(rc == OS_OK);
 8006a88:	e149                	bnez	a0,8006b0a <sensor_mgr_init+0xa6>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
 8006a8a:	37f9                	jal	8006a58 <sensor_mgr_evq_get>
 8006a8c:	4681                	li	a3,0
 8006a8e:	08007637          	lui	a2,0x8007
 8006a92:	e7060613          	addi	a2,a2,-400 # 8006e70 <sensor_mgr_wakeup_event>
 8006a96:	85aa                	mv	a1,a0
 8006a98:	20003537          	lui	a0,0x20003
 8006a9c:	a8450513          	addi	a0,a0,-1404 # 20002a84 <sensor_mgr+0xc>
 8006aa0:	78c000ef          	jal	ra,800722c <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
 8006aa4:	006c                	addi	a1,sp,12
 8006aa6:	0808                	addi	a0,sp,16
 8006aa8:	6b9010ef          	jal	ra,8008960 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
 8006aac:	20003437          	lui	s0,0x20003
 8006ab0:	47c2                	lw	a5,16(sp)
 8006ab2:	acf42823          	sw	a5,-1328(s0) # 20002ad0 <sensor_base_ts>
 8006ab6:	ad040413          	addi	s0,s0,-1328
 8006aba:	47d2                	lw	a5,20(sp)
 8006abc:	c05c                	sw	a5,4(s0)
 8006abe:	47e2                	lw	a5,24(sp)
 8006ac0:	c41c                	sw	a5,8(s0)
 8006ac2:	47f2                	lw	a5,28(sp)
 8006ac4:	c45c                	sw	a5,12(s0)
    sensor_base_ts.st_ostz = ostz;
 8006ac6:	47b2                	lw	a5,12(sp)
 8006ac8:	c81c                	sw	a5,16(s0)
    sensor_base_ts.st_cputime = os_cputime_get32();
 8006aca:	12b000ef          	jal	ra,80073f4 <os_cputime_get32>
 8006ace:	c848                	sw	a0,20(s0)
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
 8006ad0:	3761                	jal	8006a58 <sensor_mgr_evq_get>
 8006ad2:	4681                	li	a3,0
 8006ad4:	08007637          	lui	a2,0x8007
 8006ad8:	95860613          	addi	a2,a2,-1704 # 8006958 <sensor_base_ts_update_event>
 8006adc:	85aa                	mv	a1,a0
 8006ade:	20003437          	lui	s0,0x20003
 8006ae2:	aac40513          	addi	a0,s0,-1364 # 20002aac <st_up_osco>
 8006ae6:	746000ef          	jal	ra,800722c <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
 8006aea:	08000593          	li	a1,128
 8006aee:	aac40513          	addi	a0,s0,-1364
 8006af2:	7b8000ef          	jal	ra,80072aa <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
 8006af6:	20003537          	lui	a0,0x20003
 8006afa:	a7850513          	addi	a0,a0,-1416 # 20002a78 <sensor_mgr>
 8006afe:	4d8010ef          	jal	ra,8007fd6 <os_mutex_init>
}
 8006b02:	50b2                	lw	ra,44(sp)
 8006b04:	5422                	lw	s0,40(sp)
 8006b06:	6145                	addi	sp,sp,48
 8006b08:	8082                	ret
    assert(rc == OS_OK);
 8006b0a:	4681                	li	a3,0
 8006b0c:	4601                	li	a2,0
 8006b0e:	4581                	li	a1,0
 8006b10:	4501                	li	a0,0
 8006b12:	21c1                	jal	8006fd2 <__assert_func>

08006b14 <sensor_mgr_find_next>:
{
 8006b14:	1141                	addi	sp,sp,-16
 8006b16:	c606                	sw	ra,12(sp)
 8006b18:	c422                	sw	s0,8(sp)
 8006b1a:	c226                	sw	s1,4(sp)
 8006b1c:	c04a                	sw	s2,0(sp)
 8006b1e:	84aa                	mv	s1,a0
 8006b20:	892e                	mv	s2,a1
 8006b22:	8432                	mv	s0,a2
    rc = sensor_mgr_lock();
 8006b24:	3ddd                	jal	8006a1a <sensor_mgr_lock>
    if (rc != 0) {
 8006b26:	e915                	bnez	a0,8006b5a <sensor_mgr_find_next+0x46>
    if (cursor == NULL) {
 8006b28:	c819                	beqz	s0,8006b3e <sensor_mgr_find_next+0x2a>
        cursor = SLIST_NEXT(prev_cursor, s_next);
 8006b2a:	08042403          	lw	s0,128(s0)
    while (cursor != NULL) {
 8006b2e:	cc11                	beqz	s0,8006b4a <sensor_mgr_find_next+0x36>
        if (compare_func(cursor, arg)) {
 8006b30:	85ca                	mv	a1,s2
 8006b32:	8522                	mv	a0,s0
 8006b34:	9482                	jalr	s1
 8006b36:	e911                	bnez	a0,8006b4a <sensor_mgr_find_next+0x36>
        cursor = SLIST_NEXT(cursor, s_next);
 8006b38:	08042403          	lw	s0,128(s0)
 8006b3c:	bfcd                	j	8006b2e <sensor_mgr_find_next+0x1a>
        cursor = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 8006b3e:	200037b7          	lui	a5,0x20003
 8006b42:	a7878793          	addi	a5,a5,-1416 # 20002a78 <sensor_mgr>
 8006b46:	5b80                	lw	s0,48(a5)
 8006b48:	b7dd                	j	8006b2e <sensor_mgr_find_next+0x1a>
    sensor_mgr_unlock();
 8006b4a:	3de5                	jal	8006a42 <sensor_mgr_unlock>
}
 8006b4c:	8522                	mv	a0,s0
 8006b4e:	40b2                	lw	ra,12(sp)
 8006b50:	4422                	lw	s0,8(sp)
 8006b52:	4492                	lw	s1,4(sp)
 8006b54:	4902                	lw	s2,0(sp)
 8006b56:	0141                	addi	sp,sp,16
 8006b58:	8082                	ret
    cursor = NULL;
 8006b5a:	4401                	li	s0,0
    return (cursor);
 8006b5c:	bfc5                	j	8006b4c <sensor_mgr_find_next+0x38>

08006b5e <sensor_mgr_find_next_bydevname>:
{
 8006b5e:	1141                	addi	sp,sp,-16
 8006b60:	c606                	sw	ra,12(sp)
    return (sensor_mgr_find_next(sensor_mgr_match_bydevname, (char *)devname,
 8006b62:	862e                	mv	a2,a1
 8006b64:	85aa                	mv	a1,a0
 8006b66:	08007537          	lui	a0,0x8007
 8006b6a:	93e50513          	addi	a0,a0,-1730 # 800693e <sensor_mgr_match_bydevname>
 8006b6e:	375d                	jal	8006b14 <sensor_mgr_find_next>
}
 8006b70:	40b2                	lw	ra,12(sp)
 8006b72:	0141                	addi	sp,sp,16
 8006b74:	8082                	ret

08006b76 <sensor_pkg_init>:
{
 8006b76:	1141                	addi	sp,sp,-16
 8006b78:	c606                	sw	ra,12(sp)
    sensor_mgr_init();
 8006b7a:	35ed                	jal	8006a64 <sensor_mgr_init>
}
 8006b7c:	40b2                	lw	ra,12(sp)
 8006b7e:	0141                	addi	sp,sp,16
 8006b80:	8082                	ret

08006b82 <sensor_lock>:
{
 8006b82:	1141                	addi	sp,sp,-16
 8006b84:	c606                	sw	ra,12(sp)
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
 8006b86:	55fd                	li	a1,-1
 8006b88:	0511                	addi	a0,a0,4
 8006b8a:	54c010ef          	jal	ra,80080d6 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
 8006b8e:	c519                	beqz	a0,8006b9c <sensor_lock+0x1a>
 8006b90:	47a5                	li	a5,9
 8006b92:	00f50763          	beq	a0,a5,8006ba0 <sensor_lock+0x1e>
}
 8006b96:	40b2                	lw	ra,12(sp)
 8006b98:	0141                	addi	sp,sp,16
 8006b9a:	8082                	ret
        return (0);
 8006b9c:	4501                	li	a0,0
 8006b9e:	bfe5                	j	8006b96 <sensor_lock+0x14>
 8006ba0:	4501                	li	a0,0
 8006ba2:	bfd5                	j	8006b96 <sensor_lock+0x14>

08006ba4 <sensor_unlock>:
{
 8006ba4:	1141                	addi	sp,sp,-16
 8006ba6:	c606                	sw	ra,12(sp)
    os_mutex_release(&sensor->s_lock);
 8006ba8:	0511                	addi	a0,a0,4
 8006baa:	446010ef          	jal	ra,8007ff0 <os_mutex_release>
}
 8006bae:	40b2                	lw	ra,12(sp)
 8006bb0:	0141                	addi	sp,sp,16
 8006bb2:	8082                	ret

08006bb4 <sensor_update_poll_rate>:
{
 8006bb4:	1141                	addi	sp,sp,-16
 8006bb6:	c606                	sw	ra,12(sp)
 8006bb8:	c422                	sw	s0,8(sp)
 8006bba:	c226                	sw	s1,4(sp)
 8006bbc:	842a                	mv	s0,a0
 8006bbe:	84ae                	mv	s1,a1
    sensor_lock(sensor);
 8006bc0:	37c9                	jal	8006b82 <sensor_lock>
    sensor->s_poll_rate = poll_rate;
 8006bc2:	d004                	sw	s1,32(s0)
    sensor_unlock(sensor);
 8006bc4:	8522                	mv	a0,s0
 8006bc6:	3ff9                	jal	8006ba4 <sensor_unlock>
}
 8006bc8:	40b2                	lw	ra,12(sp)
 8006bca:	4422                	lw	s0,8(sp)
 8006bcc:	4492                	lw	s1,4(sp)
 8006bce:	0141                	addi	sp,sp,16
 8006bd0:	8082                	ret

08006bd2 <sensor_update_nextrun>:
{
 8006bd2:	1101                	addi	sp,sp,-32
 8006bd4:	ce06                	sw	ra,28(sp)
 8006bd6:	cc22                	sw	s0,24(sp)
 8006bd8:	ca26                	sw	s1,20(sp)
 8006bda:	842a                	mv	s0,a0
 8006bdc:	84ae                	mv	s1,a1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
 8006bde:	006c                	addi	a1,sp,12
 8006be0:	5108                	lw	a0,32(a0)
 8006be2:	5db010ef          	jal	ra,80089bc <os_time_ms_to_ticks>
    sensor_lock(sensor);
 8006be6:	8522                	mv	a0,s0
 8006be8:	3f69                	jal	8006b82 <sensor_lock>
    sensor_mgr_remove(sensor);
 8006bea:	8522                	mv	a0,s0
 8006bec:	c1bff0ef          	jal	ra,8006806 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
 8006bf0:	47b2                	lw	a5,12(sp)
 8006bf2:	94be                	add	s1,s1,a5
 8006bf4:	d044                	sw	s1,36(s0)
    sensor_mgr_insert(sensor);
 8006bf6:	8522                	mv	a0,s0
 8006bf8:	c41ff0ef          	jal	ra,8006838 <sensor_mgr_insert>
    sensor_unlock(sensor);
 8006bfc:	8522                	mv	a0,s0
 8006bfe:	375d                	jal	8006ba4 <sensor_unlock>
}
 8006c00:	40f2                	lw	ra,28(sp)
 8006c02:	4462                	lw	s0,24(sp)
 8006c04:	44d2                	lw	s1,20(sp)
 8006c06:	6105                	addi	sp,sp,32
 8006c08:	8082                	ret

08006c0a <sensor_calc_nextrun_delta>:
{
 8006c0a:	1141                	addi	sp,sp,-16
 8006c0c:	c606                	sw	ra,12(sp)
 8006c0e:	c422                	sw	s0,8(sp)
 8006c10:	c226                	sw	s1,4(sp)
 8006c12:	c04a                	sw	s2,0(sp)
 8006c14:	84aa                	mv	s1,a0
 8006c16:	892e                	mv	s2,a1
    sensor_lock(sensor);
 8006c18:	37ad                	jal	8006b82 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
 8006c1a:	50c0                	lw	s0,36(s1)
 8006c1c:	41240433          	sub	s0,s0,s2
    if (delta < 0) {
 8006c20:	00044b63          	bltz	s0,8006c36 <sensor_calc_nextrun_delta+0x2c>
    sensor_unlock(sensor);
 8006c24:	8526                	mv	a0,s1
 8006c26:	3fbd                	jal	8006ba4 <sensor_unlock>
}
 8006c28:	8522                	mv	a0,s0
 8006c2a:	40b2                	lw	ra,12(sp)
 8006c2c:	4422                	lw	s0,8(sp)
 8006c2e:	4492                	lw	s1,4(sp)
 8006c30:	4902                	lw	s2,0(sp)
 8006c32:	0141                	addi	sp,sp,16
 8006c34:	8082                	ret
        sensor_ticks = 0;
 8006c36:	4401                	li	s0,0
 8006c38:	b7f5                	j	8006c24 <sensor_calc_nextrun_delta+0x1a>

08006c3a <sensor_find_min_nextrun_sensor>:
{
 8006c3a:	1141                	addi	sp,sp,-16
 8006c3c:	c606                	sw	ra,12(sp)
 8006c3e:	c422                	sw	s0,8(sp)
 8006c40:	c226                	sw	s1,4(sp)
 8006c42:	c04a                	sw	s2,0(sp)
 8006c44:	892a                	mv	s2,a0
 8006c46:	84ae                	mv	s1,a1
    sensor_mgr_lock();
 8006c48:	dd3ff0ef          	jal	ra,8006a1a <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
 8006c4c:	200037b7          	lui	a5,0x20003
 8006c50:	a7878793          	addi	a5,a5,-1416 # 20002a78 <sensor_mgr>
 8006c54:	5b80                	lw	s0,48(a5)
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
 8006c56:	85ca                	mv	a1,s2
 8006c58:	8522                	mv	a0,s0
 8006c5a:	3f45                	jal	8006c0a <sensor_calc_nextrun_delta>
 8006c5c:	c088                	sw	a0,0(s1)
    sensor_mgr_unlock();
 8006c5e:	33d5                	jal	8006a42 <sensor_mgr_unlock>
}
 8006c60:	8522                	mv	a0,s0
 8006c62:	40b2                	lw	ra,12(sp)
 8006c64:	4422                	lw	s0,8(sp)
 8006c66:	4492                	lw	s1,4(sp)
 8006c68:	4902                	lw	s2,0(sp)
 8006c6a:	0141                	addi	sp,sp,16
 8006c6c:	8082                	ret

08006c6e <sensor_set_poll_rate_ms>:
{
 8006c6e:	1101                	addi	sp,sp,-32
 8006c70:	ce06                	sw	ra,28(sp)
 8006c72:	cc22                	sw	s0,24(sp)
 8006c74:	ca26                	sw	s1,20(sp)
 8006c76:	c84a                	sw	s2,16(sp)
 8006c78:	842a                	mv	s0,a0
 8006c7a:	84ae                	mv	s1,a1
    os_callout_stop(&sensor_mgr.mgr_wakeup_callout);
 8006c7c:	20003537          	lui	a0,0x20003
 8006c80:	a8450513          	addi	a0,a0,-1404 # 20002a84 <sensor_mgr+0xc>
 8006c84:	2bf9                	jal	8007262 <os_callout_stop>
    sensor = sensor_mgr_find_next_bydevname(devname, NULL);
 8006c86:	4581                	li	a1,0
 8006c88:	8522                	mv	a0,s0
 8006c8a:	3dd1                	jal	8006b5e <sensor_mgr_find_next_bydevname>
    if (!sensor) {
 8006c8c:	c131                	beqz	a0,8006cd0 <sensor_set_poll_rate_ms+0x62>
 8006c8e:	842a                	mv	s0,a0
    sensor_lock(sensor);
 8006c90:	3dcd                	jal	8006b82 <sensor_lock>
    now = os_time_get();
 8006c92:	475010ef          	jal	ra,8008906 <os_time_get>
 8006c96:	892a                	mv	s2,a0
    os_time_ms_to_ticks(poll_rate, &next_wakeup);
 8006c98:	006c                	addi	a1,sp,12
 8006c9a:	8526                	mv	a0,s1
 8006c9c:	521010ef          	jal	ra,80089bc <os_time_ms_to_ticks>
    sensor_update_poll_rate(sensor, poll_rate);
 8006ca0:	85a6                	mv	a1,s1
 8006ca2:	8522                	mv	a0,s0
 8006ca4:	3f01                	jal	8006bb4 <sensor_update_poll_rate>
    sensor_update_nextrun(sensor, now);
 8006ca6:	85ca                	mv	a1,s2
 8006ca8:	8522                	mv	a0,s0
 8006caa:	3725                	jal	8006bd2 <sensor_update_nextrun>
    sensor_unlock(sensor);
 8006cac:	8522                	mv	a0,s0
 8006cae:	3ddd                	jal	8006ba4 <sensor_unlock>
    sensor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
 8006cb0:	006c                	addi	a1,sp,12
 8006cb2:	854a                	mv	a0,s2
 8006cb4:	3759                	jal	8006c3a <sensor_find_min_nextrun_sensor>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 8006cb6:	45b2                	lw	a1,12(sp)
 8006cb8:	20003537          	lui	a0,0x20003
 8006cbc:	a8450513          	addi	a0,a0,-1404 # 20002a84 <sensor_mgr+0xc>
 8006cc0:	23ed                	jal	80072aa <os_callout_reset>
    return 0;
 8006cc2:	4501                	li	a0,0
}
 8006cc4:	40f2                	lw	ra,28(sp)
 8006cc6:	4462                	lw	s0,24(sp)
 8006cc8:	44d2                	lw	s1,20(sp)
 8006cca:	4942                	lw	s2,16(sp)
 8006ccc:	6105                	addi	sp,sp,32
 8006cce:	8082                	ret
    return rc;
 8006cd0:	5579                	li	a0,-2
 8006cd2:	bfcd                	j	8006cc4 <sensor_set_poll_rate_ms+0x56>

08006cd4 <sensor_mgr_register>:
{
 8006cd4:	1141                	addi	sp,sp,-16
 8006cd6:	c606                	sw	ra,12(sp)
 8006cd8:	c422                	sw	s0,8(sp)
 8006cda:	c226                	sw	s1,4(sp)
 8006cdc:	84aa                	mv	s1,a0
    rc = sensor_mgr_lock();
 8006cde:	d3dff0ef          	jal	ra,8006a1a <sensor_mgr_lock>
 8006ce2:	842a                	mv	s0,a0
    if (rc != 0) {
 8006ce4:	c519                	beqz	a0,8006cf2 <sensor_mgr_register+0x1e>
}
 8006ce6:	8522                	mv	a0,s0
 8006ce8:	40b2                	lw	ra,12(sp)
 8006cea:	4422                	lw	s0,8(sp)
 8006cec:	4492                	lw	s1,4(sp)
 8006cee:	0141                	addi	sp,sp,16
 8006cf0:	8082                	ret
    rc = sensor_lock(sensor);
 8006cf2:	8526                	mv	a0,s1
 8006cf4:	3579                	jal	8006b82 <sensor_lock>
 8006cf6:	842a                	mv	s0,a0
    if (rc != 0) {
 8006cf8:	f57d                	bnez	a0,8006ce6 <sensor_mgr_register+0x12>
    sensor_mgr_insert(sensor);
 8006cfa:	8526                	mv	a0,s1
 8006cfc:	b3dff0ef          	jal	ra,8006838 <sensor_mgr_insert>
    sensor_unlock(sensor);
 8006d00:	8526                	mv	a0,s1
 8006d02:	354d                	jal	8006ba4 <sensor_unlock>
    sensor_mgr_unlock();
 8006d04:	d3fff0ef          	jal	ra,8006a42 <sensor_mgr_unlock>
    return (0);
 8006d08:	bff9                	j	8006ce6 <sensor_mgr_register+0x12>

08006d0a <sensor_init>:
{
 8006d0a:	1141                	addi	sp,sp,-16
 8006d0c:	c606                	sw	ra,12(sp)
 8006d0e:	c422                	sw	s0,8(sp)
 8006d10:	c226                	sw	s1,4(sp)
 8006d12:	842a                	mv	s0,a0
 8006d14:	84ae                	mv	s1,a1
    memset(sensor, 0, sizeof(*sensor));
 8006d16:	08800613          	li	a2,136
 8006d1a:	4581                	li	a1,0
 8006d1c:	6b7010ef          	jal	ra,8008bd2 <memset>
    rc = os_mutex_init(&sensor->s_lock);
 8006d20:	00440513          	addi	a0,s0,4
 8006d24:	2b2010ef          	jal	ra,8007fd6 <os_mutex_init>
    if (rc != 0) {
 8006d28:	e111                	bnez	a0,8006d2c <sensor_init+0x22>
    sensor->s_dev = dev;
 8006d2a:	c004                	sw	s1,0(s0)
}
 8006d2c:	40b2                	lw	ra,12(sp)
 8006d2e:	4422                	lw	s0,8(sp)
 8006d30:	4492                	lw	s1,4(sp)
 8006d32:	0141                	addi	sp,sp,16
 8006d34:	8082                	ret

08006d36 <sensor_register_listener>:
{
 8006d36:	1141                	addi	sp,sp,-16
 8006d38:	c606                	sw	ra,12(sp)
 8006d3a:	c422                	sw	s0,8(sp)
 8006d3c:	c226                	sw	s1,4(sp)
 8006d3e:	c04a                	sw	s2,0(sp)
 8006d40:	84aa                	mv	s1,a0
 8006d42:	892e                	mv	s2,a1
    rc = sensor_lock(sensor);
 8006d44:	e3fff0ef          	jal	ra,8006b82 <sensor_lock>
 8006d48:	842a                	mv	s0,a0
    if (rc != 0) {
 8006d4a:	c901                	beqz	a0,8006d5a <sensor_register_listener+0x24>
}
 8006d4c:	8522                	mv	a0,s0
 8006d4e:	40b2                	lw	ra,12(sp)
 8006d50:	4422                	lw	s0,8(sp)
 8006d52:	4492                	lw	s1,4(sp)
 8006d54:	4902                	lw	s2,0(sp)
 8006d56:	0141                	addi	sp,sp,16
 8006d58:	8082                	ret
    SLIST_INSERT_HEAD(&sensor->s_listener_list, listener, sl_next);
 8006d5a:	54fc                	lw	a5,108(s1)
 8006d5c:	00f92823          	sw	a5,16(s2)
 8006d60:	0724a623          	sw	s2,108(s1)
    sensor_unlock(sensor);
 8006d64:	8526                	mv	a0,s1
 8006d66:	e3fff0ef          	jal	ra,8006ba4 <sensor_unlock>
    return (0);
 8006d6a:	b7cd                	j	8006d4c <sensor_register_listener+0x16>

08006d6c <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
 8006d6c:	7139                	addi	sp,sp,-64
 8006d6e:	de06                	sw	ra,60(sp)
 8006d70:	dc22                	sw	s0,56(sp)
 8006d72:	da26                	sw	s1,52(sp)
 8006d74:	d84a                	sw	s2,48(sp)
 8006d76:	d64e                	sw	s3,44(sp)
 8006d78:	d452                	sw	s4,40(sp)
 8006d7a:	842a                	mv	s0,a0
 8006d7c:	c42e                	sw	a1,8(sp)
 8006d7e:	c632                	sw	a2,12(sp)
 8006d80:	89b6                	mv	s3,a3
 8006d82:	893a                	mv	s2,a4
 8006d84:	8a3e                	mv	s4,a5
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
 8006d86:	dfdff0ef          	jal	ra,8006b82 <sensor_lock>
 8006d8a:	84aa                	mv	s1,a0
    if (rc) {
 8006d8c:	e915                	bnez	a0,8006dc0 <sensor_read+0x54>
        goto err;
    }

    src.user_func = data_func;
 8006d8e:	cc4e                	sw	s3,24(sp)
    src.user_arg = arg;
 8006d90:	ce4a                	sw	s2,28(sp)

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
 8006d92:	002c                	addi	a1,sp,8
 8006d94:	8522                	mv	a0,s0
 8006d96:	b17ff0ef          	jal	ra,80068ac <sensor_mgr_match_bytype>
 8006d9a:	c531                	beqz	a0,8006de6 <sensor_read+0x7a>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
 8006d9c:	8522                	mv	a0,s0
 8006d9e:	c23ff0ef          	jal	ra,80069c0 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
 8006da2:	541c                	lw	a5,40(s0)
 8006da4:	0007a803          	lw	a6,0(a5)
 8006da8:	87d2                	mv	a5,s4
 8006daa:	0838                	addi	a4,sp,24
 8006dac:	080076b7          	lui	a3,0x8007
 8006db0:	8c868693          	addi	a3,a3,-1848 # 80068c8 <sensor_read_data_func>
 8006db4:	45a2                	lw	a1,8(sp)
 8006db6:	4632                	lw	a2,12(sp)
 8006db8:	8522                	mv	a0,s0
 8006dba:	9802                	jalr	a6
 8006dbc:	84aa                	mv	s1,a0
                                  timeout);
    if (rc) {
 8006dbe:	ed09                	bnez	a0,8006dd8 <sensor_read+0x6c>
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
 8006dc0:	8522                	mv	a0,s0
 8006dc2:	de3ff0ef          	jal	ra,8006ba4 <sensor_unlock>
    return (rc);
}
 8006dc6:	8526                	mv	a0,s1
 8006dc8:	50f2                	lw	ra,60(sp)
 8006dca:	5462                	lw	s0,56(sp)
 8006dcc:	54d2                	lw	s1,52(sp)
 8006dce:	5942                	lw	s2,48(sp)
 8006dd0:	59b2                	lw	s3,44(sp)
 8006dd2:	5a22                	lw	s4,40(sp)
 8006dd4:	6121                	addi	sp,sp,64
 8006dd6:	8082                	ret
        if (sensor->s_err_fn != NULL) {
 8006dd8:	583c                	lw	a5,112(s0)
 8006dda:	d3fd                	beqz	a5,8006dc0 <sensor_read+0x54>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
 8006ddc:	862a                	mv	a2,a0
 8006dde:	586c                	lw	a1,116(s0)
 8006de0:	8522                	mv	a0,s0
 8006de2:	9782                	jalr	a5
        goto err;
 8006de4:	bff1                	j	8006dc0 <sensor_read+0x54>
        rc = SYS_ENOENT;
 8006de6:	54f1                	li	s1,-4
 8006de8:	bfe1                	j	8006dc0 <sensor_read+0x54>

08006dea <sensor_mgr_poll_bytype>:
    if (!stt || !stt->stt_polls_left) {
 8006dea:	c681                	beqz	a3,8006df2 <sensor_mgr_poll_bytype+0x8>
 8006dec:	0146d783          	lhu	a5,20(a3)
 8006df0:	e3a1                	bnez	a5,8006e30 <sensor_mgr_poll_bytype+0x46>
{
 8006df2:	1141                	addi	sp,sp,-16
 8006df4:	c606                	sw	ra,12(sp)
 8006df6:	c422                	sw	s0,8(sp)
 8006df8:	c226                	sw	s1,4(sp)
 8006dfa:	8436                	mv	s0,a3
 8006dfc:	84aa                	mv	s1,a0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
 8006dfe:	57fd                	li	a5,-1
 8006e00:	4701                	li	a4,0
 8006e02:	4681                	li	a3,0
 8006e04:	37a5                	jal	8006d6c <sensor_read>
        sensor_lock(sensor);
 8006e06:	8526                	mv	a0,s1
 8006e08:	d7bff0ef          	jal	ra,8006b82 <sensor_lock>
        if (stt) {
 8006e0c:	c811                	beqz	s0,8006e20 <sensor_mgr_poll_bytype+0x36>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
 8006e0e:	01445783          	lhu	a5,20(s0)
 8006e12:	e799                	bnez	a5,8006e20 <sensor_mgr_poll_bytype+0x36>
 8006e14:	01245783          	lhu	a5,18(s0)
 8006e18:	c781                	beqz	a5,8006e20 <sensor_mgr_poll_bytype+0x36>
                stt->stt_polls_left--;
 8006e1a:	17fd                	addi	a5,a5,-1
 8006e1c:	00f41a23          	sh	a5,20(s0)
        sensor_unlock(sensor);
 8006e20:	8526                	mv	a0,s1
 8006e22:	d83ff0ef          	jal	ra,8006ba4 <sensor_unlock>
}
 8006e26:	40b2                	lw	ra,12(sp)
 8006e28:	4422                	lw	s0,8(sp)
 8006e2a:	4492                	lw	s1,4(sp)
 8006e2c:	0141                	addi	sp,sp,16
 8006e2e:	8082                	ret
        stt->stt_polls_left--;
 8006e30:	17fd                	addi	a5,a5,-1
 8006e32:	00f69a23          	sh	a5,20(a3)
 8006e36:	8082                	ret

08006e38 <sensor_poll_per_type_trait>:
{
 8006e38:	1141                	addi	sp,sp,-16
 8006e3a:	c606                	sw	ra,12(sp)
 8006e3c:	c422                	sw	s0,8(sp)
 8006e3e:	c226                	sw	s1,4(sp)
 8006e40:	c04a                	sw	s2,0(sp)
 8006e42:	84aa                	mv	s1,a0
 8006e44:	892e                	mv	s2,a1
    sensor_lock(sensor);
 8006e46:	d3dff0ef          	jal	ra,8006b82 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 8006e4a:	5ce0                	lw	s0,124(s1)
 8006e4c:	c809                	beqz	s0,8006e5e <sensor_poll_per_type_trait+0x26>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
 8006e4e:	874a                	mv	a4,s2
 8006e50:	86a2                	mv	a3,s0
 8006e52:	400c                	lw	a1,0(s0)
 8006e54:	4050                	lw	a2,4(s0)
 8006e56:	8526                	mv	a0,s1
 8006e58:	3f49                	jal	8006dea <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
 8006e5a:	5000                	lw	s0,32(s0)
 8006e5c:	bfc5                	j	8006e4c <sensor_poll_per_type_trait+0x14>
    sensor_unlock(sensor);
 8006e5e:	8526                	mv	a0,s1
 8006e60:	d45ff0ef          	jal	ra,8006ba4 <sensor_unlock>
}
 8006e64:	40b2                	lw	ra,12(sp)
 8006e66:	4422                	lw	s0,8(sp)
 8006e68:	4492                	lw	s1,4(sp)
 8006e6a:	4902                	lw	s2,0(sp)
 8006e6c:	0141                	addi	sp,sp,16
 8006e6e:	8082                	ret

08006e70 <sensor_mgr_wakeup_event>:
{
 8006e70:	1101                	addi	sp,sp,-32
 8006e72:	ce06                	sw	ra,28(sp)
 8006e74:	cc22                	sw	s0,24(sp)
 8006e76:	ca26                	sw	s1,20(sp)
 8006e78:	c84a                	sw	s2,16(sp)
    now = os_time_get();
 8006e7a:	28d010ef          	jal	ra,8008906 <os_time_get>
 8006e7e:	84aa                	mv	s1,a0
    sensor_mgr_lock();
 8006e80:	b9bff0ef          	jal	ra,8006a1a <sensor_mgr_lock>
    cursor = NULL;
 8006e84:	a03d                	j	8006eb2 <sensor_mgr_wakeup_event+0x42>
            sensor_unlock(cursor);
 8006e86:	8522                	mv	a0,s0
 8006e88:	d1dff0ef          	jal	ra,8006ba4 <sensor_unlock>
            sensor_mgr_unlock();
 8006e8c:	bb7ff0ef          	jal	ra,8006a42 <sensor_mgr_unlock>
}
 8006e90:	40f2                	lw	ra,28(sp)
 8006e92:	4462                	lw	s0,24(sp)
 8006e94:	44d2                	lw	s1,20(sp)
 8006e96:	4942                	lw	s2,16(sp)
 8006e98:	6105                	addi	sp,sp,32
 8006e9a:	8082                	ret
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
 8006e9c:	864a                	mv	a2,s2
 8006e9e:	85a6                	mv	a1,s1
 8006ea0:	8522                	mv	a0,s0
 8006ea2:	3f59                	jal	8006e38 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
 8006ea4:	85a6                	mv	a1,s1
 8006ea6:	8522                	mv	a0,s0
 8006ea8:	d2bff0ef          	jal	ra,8006bd2 <sensor_update_nextrun>
        sensor_unlock(cursor);
 8006eac:	8522                	mv	a0,s0
 8006eae:	cf7ff0ef          	jal	ra,8006ba4 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
 8006eb2:	006c                	addi	a1,sp,12
 8006eb4:	8526                	mv	a0,s1
 8006eb6:	d85ff0ef          	jal	ra,8006c3a <sensor_find_min_nextrun_sensor>
 8006eba:	842a                	mv	s0,a0
        sensor_lock(cursor);
 8006ebc:	cc7ff0ef          	jal	ra,8006b82 <sensor_lock>
        if (!cursor->s_poll_rate) {
 8006ec0:	501c                	lw	a5,32(s0)
 8006ec2:	d3f1                	beqz	a5,8006e86 <sensor_mgr_wakeup_event+0x16>
        if (next_wakeup > 0) {
 8006ec4:	4932                	lw	s2,12(sp)
 8006ec6:	00091d63          	bnez	s2,8006ee0 <sensor_mgr_wakeup_event+0x70>
        if (sensor_type_traits_empty(cursor)) {
 8006eca:	8522                	mv	a0,s0
 8006ecc:	9cdff0ef          	jal	ra,8006898 <sensor_type_traits_empty>
 8006ed0:	d571                	beqz	a0,8006e9c <sensor_mgr_wakeup_event+0x2c>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
 8006ed2:	8726                	mv	a4,s1
 8006ed4:	4681                	li	a3,0
 8006ed6:	4c0c                	lw	a1,24(s0)
 8006ed8:	4c50                	lw	a2,28(s0)
 8006eda:	8522                	mv	a0,s0
 8006edc:	3739                	jal	8006dea <sensor_mgr_poll_bytype>
 8006ede:	b7d9                	j	8006ea4 <sensor_mgr_wakeup_event+0x34>
    sensor_mgr_unlock();
 8006ee0:	b63ff0ef          	jal	ra,8006a42 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
 8006ee4:	45b2                	lw	a1,12(sp)
 8006ee6:	20003537          	lui	a0,0x20003
 8006eea:	a8450513          	addi	a0,a0,-1404 # 20002a84 <sensor_mgr+0xc>
 8006eee:	2e75                	jal	80072aa <os_callout_reset>
 8006ef0:	b745                	j	8006e90 <sensor_mgr_wakeup_event+0x20>

08006ef2 <os_in_isr>:
static int
os_in_isr(void)
{
    // TODO:
    return 0;
}
 8006ef2:	4501                	li	a0,0
 8006ef4:	8082                	ret

08006ef6 <os_arch_ctx_sw>:
    os_time_advance(1);
}

void
os_arch_ctx_sw(struct os_task *t)
{
 8006ef6:	1141                	addi	sp,sp,-16
 8006ef8:	c606                	sw	ra,12(sp)
 8006efa:	c422                	sw	s0,8(sp)
 8006efc:	842a                	mv	s0,a0
    if ((os_sched_get_current_task() != 0) && (t != 0)) {
 8006efe:	474010ef          	jal	ra,8008372 <os_sched_get_current_task>
 8006f02:	c509                	beqz	a0,8006f0c <os_arch_ctx_sw+0x16>
 8006f04:	c401                	beqz	s0,8006f0c <os_arch_ctx_sw+0x16>
        os_sched_ctx_sw_hook(t);
 8006f06:	8522                	mv	a0,s0
 8006f08:	43c010ef          	jal	ra,8008344 <os_sched_ctx_sw_hook>
    }

    /*
     * This request software interrupt that is used for contect switching
     */
    CLINT_REG(CLINT_MSIP) = 1;
 8006f0c:	d10017b7          	lui	a5,0xd1001
 8006f10:	4705                	li	a4,1
 8006f12:	fee7ae23          	sw	a4,-4(a5) # d1000ffc <_sp+0xb0ffbffc>
}
 8006f16:	40b2                	lw	ra,12(sp)
 8006f18:	4422                	lw	s0,8(sp)
 8006f1a:	0141                	addi	sp,sp,16
 8006f1c:	8082                	ret

08006f1e <os_arch_save_sr>:
os_sr_t
os_arch_save_sr(void)
{
    uint32_t isr_ctx;

    isr_ctx = clear_csr(mstatus, MSTATUS_MIE) & MSTATUS_MIE;
 8006f1e:	30047573          	csrrci	a0,mstatus,8

    return isr_ctx;
}
 8006f22:	8921                	andi	a0,a0,8
 8006f24:	8082                	ret

08006f26 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (isr_ctx) {
 8006f26:	c119                	beqz	a0,8006f2c <os_arch_restore_sr+0x6>
        set_csr(mstatus, MSTATUS_MIE);
 8006f28:	300467f3          	csrrsi	a5,mstatus,8
    }
}
 8006f2c:	8082                	ret

08006f2e <os_arch_in_critical>:

int
os_arch_in_critical(void)
{
    return !(read_csr(mstatus) & MSTATUS_MIE);
 8006f2e:	30002573          	csrr	a0,mstatus
 8006f32:	8921                	andi	a0,a0,8
}
 8006f34:	00153513          	seqz	a0,a0
 8006f38:	8082                	ret

08006f3a <os_arch_task_stack_init>:

/* assumes stack_top will be 8 aligned */

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
 8006f3a:	86aa                	mv	a3,a0
    struct context_switch_frame *sf;
    uint32_t *reg;

    /* Get stack frame pointer */
    sf = (struct context_switch_frame *) ((uint8_t *) stack_top - sizeof(*sf));
 8006f3c:	f8458513          	addi	a0,a1,-124
    reg = &sf->a7;
 8006f40:	ffc58793          	addi	a5,a1,-4

    /* Zero out registers except PC which will be set */
    while (reg != &sf->pc) {
 8006f44:	a021                	j	8006f4c <os_arch_task_stack_init+0x12>
        *reg-- = 0;
 8006f46:	0007a023          	sw	zero,0(a5)
 8006f4a:	17f1                	addi	a5,a5,-4
    while (reg != &sf->pc) {
 8006f4c:	f8458713          	addi	a4,a1,-124
 8006f50:	fef71be3          	bne	a4,a5,8006f46 <os_arch_task_stack_init+0xc>
    }

    /* Set remaining portions of stack frame */
    sf->pc = (uint32_t) t->t_func;
 8006f54:	4adc                	lw	a5,20(a3)
 8006f56:	f8f5a223          	sw	a5,-124(a1)
    sf->a0 = (uint32_t) t->t_arg;
 8006f5a:	4e9c                	lw	a5,24(a3)
 8006f5c:	fef5a023          	sw	a5,-32(a1)

    return (os_stack_t *) sf;
}
 8006f60:	8082                	ret

08006f62 <os_arch_init>:

void
os_arch_init(void)
{
 8006f62:	1141                	addi	sp,sp,-16
 8006f64:	c606                	sw	ra,12(sp)
    os_init_idle_task();
 8006f66:	2a89                	jal	80070b8 <os_init_idle_task>
}
 8006f68:	40b2                	lw	ra,12(sp)
 8006f6a:	0141                	addi	sp,sp,16
 8006f6c:	8082                	ret

08006f6e <os_arch_start>:
}
#endif  //  NOTUSED

uint32_t
os_arch_start(void)
{
 8006f6e:	711d                	addi	sp,sp,-96
 8006f70:	ce86                	sw	ra,92(sp)
 8006f72:	cca2                	sw	s0,88(sp)
    struct os_task *t;
    struct os_task fake_task;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
 8006f74:	5c6010ef          	jal	ra,800853a <os_sched_next_task>
 8006f78:	842a                	mv	s0,a0

    /* Clean software interrupt, and enable it */
    CLINT_REG(CLINT_MSIP) = 0;
 8006f7a:	d10017b7          	lui	a5,0xd1001
 8006f7e:	fe07ae23          	sw	zero,-4(a5) # d1000ffc <_sp+0xb0ffbffc>
    set_csr(mie, MIP_MSIP);
 8006f82:	304467f3          	csrrsi	a5,mie,8
    /* Enable external interrupts */
    set_csr(mie, MIP_MEIP);
 8006f86:	6785                	lui	a5,0x1
 8006f88:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
 8006f8c:	3047a7f3          	csrrs	a5,mie,a5

    /* Intitialize and start system clock timer, this enable timer interrupt */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
 8006f90:	4581                	li	a1,0
 8006f92:	08000513          	li	a0,128
 8006f96:	732020ef          	jal	ra,80096c8 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
 8006f9a:	200037b7          	lui	a5,0x20003
 8006f9e:	4705                	li	a4,1
 8006fa0:	b2e7ae23          	sw	a4,-1220(a5) # 20002b3c <g_os_started>

    /* Perform context switch */
    os_arch_ctx_sw(t);
 8006fa4:	8522                	mv	a0,s0
 8006fa6:	3f81                	jal	8006ef6 <os_arch_ctx_sw>
     * Having that will make context switch function work same for first
     * and every other time.
     * This fake SP will be used during initial context switch to store SP
     * that will never be used.
     */
    os_sched_set_current_task(&fake_task);
 8006fa8:	850a                	mv	a0,sp
 8006faa:	3d2010ef          	jal	ra,800837c <os_sched_set_current_task>

    /* Enable interrupts */
    set_csr(mstatus, MSTATUS_MIE);
 8006fae:	300467f3          	csrrsi	a5,mstatus,8

    /* This should not be reached */
    return (uint32_t) (t->t_arg);
}
 8006fb2:	4c08                	lw	a0,24(s0)
 8006fb4:	40f6                	lw	ra,92(sp)
 8006fb6:	4466                	lw	s0,88(sp)
 8006fb8:	6125                	addi	sp,sp,96
 8006fba:	8082                	ret

08006fbc <os_arch_os_start>:

os_error_t
os_arch_os_start(void)
{
 8006fbc:	1141                	addi	sp,sp,-16
 8006fbe:	c606                	sw	ra,12(sp)
    os_error_t err;

    err = OS_ERR_IN_ISR;
    if (os_in_isr() == 0) {
 8006fc0:	3f0d                	jal	8006ef2 <os_in_isr>
 8006fc2:	c509                	beqz	a0,8006fcc <os_arch_os_start+0x10>
    err = OS_ERR_IN_ISR;
 8006fc4:	451d                	li	a0,7
        /* should be in kernel mode here */
        os_arch_start();
    }

    return err;
}
 8006fc6:	40b2                	lw	ra,12(sp)
 8006fc8:	0141                	addi	sp,sp,16
 8006fca:	8082                	ret
        os_arch_start();
 8006fcc:	374d                	jal	8006f6e <os_arch_start>
        err = OS_OK;
 8006fce:	4501                	li	a0,0
 8006fd0:	bfdd                	j	8006fc6 <os_arch_os_start+0xa>

08006fd2 <__assert_func>:
#include "os_priv.h"
#include "hal/hal_system.h"

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
 8006fd2:	1141                	addi	sp,sp,-16
 8006fd4:	c606                	sw	ra,12(sp)

    OS_PRINT_ASSERT(file, line, func, e);
 8006fd6:	cd09                	beqz	a0,8006ff0 <__assert_func+0x1e>
 8006fd8:	86ae                	mv	a3,a1
 8006fda:	862a                	mv	a2,a0
 8006fdc:	8586                	mv	a1,ra
 8006fde:	0800d537          	lui	a0,0x800d
 8006fe2:	6cc50513          	addi	a0,a0,1740 # 800d6cc <sensor_node_addresses+0xec>
 8006fe6:	e47fd0ef          	jal	ra,8004e2c <console_printf>
#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif
    _exit(1);
 8006fea:	4505                	li	a0,1
 8006fec:	fd8ff0ef          	jal	ra,80067c4 <_exit>
    OS_PRINT_ASSERT(file, line, func, e);
 8006ff0:	8586                	mv	a1,ra
 8006ff2:	0800d537          	lui	a0,0x800d
 8006ff6:	6bc50513          	addi	a0,a0,1724 # 800d6bc <sensor_node_addresses+0xdc>
 8006ffa:	e33fd0ef          	jal	ra,8004e2c <console_printf>
 8006ffe:	b7f5                	j	8006fea <__assert_func+0x18>

08007000 <handle_trap>:
}

uintptr_t
handle_trap(uint32_t cause, void *fault_address, void *exception_frame)
{
 8007000:	1141                	addi	sp,sp,-16
 8007002:	c606                	sw	ra,12(sp)
    hal_system_reset();
 8007004:	ff6ff0ef          	jal	ra,80067fa <hal_system_reset>

08007008 <plic_default_isr>:
}

void plic_default_isr(int num)
{

}
 8007008:	8082                	ret

0800700a <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
 800700a:	1101                	addi	sp,sp,-32
 800700c:	ce06                	sw	ra,28(sp)
 800700e:	cc22                	sw	s0,24(sp)
 8007010:	ca26                	sw	s1,20(sp)
 8007012:	c84a                	sw	s2,16(sp)
 8007014:	c64e                	sw	s3,12(sp)
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
 8007016:	0b7020ef          	jal	ra,80098cc <hal_watchdog_tickle>
    sanity_last = 0;
 800701a:	4901                	li	s2,0
 800701c:	a821                	j	8007034 <os_idle_task+0x2a>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
 800701e:	242010ef          	jal	ra,8008260 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
 8007022:	0ab020ef          	jal	ra,80098cc <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
 8007026:	8922                	mv	s2,s0
 8007028:	a035                	j	8007054 <os_idle_task+0x4a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
 800702a:	4501                	li	a0,0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
 800702c:	71e020ef          	jal	ra,800974a <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
 8007030:	854e                	mv	a0,s3
 8007032:	3dd5                	jal	8006f26 <os_arch_restore_sr>
        ++g_os_idle_ctr;
 8007034:	20003737          	lui	a4,0x20003
 8007038:	b3872783          	lw	a5,-1224(a4) # 20002b38 <g_os_idle_ctr>
 800703c:	0785                	addi	a5,a5,1
 800703e:	b2f72c23          	sw	a5,-1224(a4)
        now = os_time_get();
 8007042:	0c5010ef          	jal	ra,8008906 <os_time_get>
 8007046:	842a                	mv	s0,a0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
 8007048:	78090793          	addi	a5,s2,1920
 800704c:	40f507b3          	sub	a5,a0,a5
 8007050:	fcf047e3          	bgtz	a5,800701e <os_idle_task+0x14>
        OS_ENTER_CRITICAL(sr);
 8007054:	ecbff0ef          	jal	ra,8006f1e <os_arch_save_sr>
 8007058:	89aa                	mv	s3,a0
        now = os_time_get();
 800705a:	0ad010ef          	jal	ra,8008906 <os_time_get>
 800705e:	84aa                	mv	s1,a0
        sticks = os_sched_wakeup_ticks(now);
 8007060:	498010ef          	jal	ra,80084f8 <os_sched_wakeup_ticks>
 8007064:	842a                	mv	s0,a0
        cticks = os_callout_wakeup_ticks(now);
 8007066:	8526                	mv	a0,s1
 8007068:	2681                	jal	80073a8 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
 800706a:	8722                	mv	a4,s0
 800706c:	00857363          	bgeu	a0,s0,8007072 <os_idle_task+0x68>
 8007070:	872a                	mv	a4,a0
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
 8007072:	78090793          	addi	a5,s2,1920
 8007076:	40978533          	sub	a0,a5,s1
 800707a:	00a77363          	bgeu	a4,a0,8007080 <os_idle_task+0x76>
 800707e:	853a                	mv	a0,a4
        if (iticks < MIN_IDLE_TICKS) {
 8007080:	47ad                	li	a5,11
 8007082:	faa7f4e3          	bgeu	a5,a0,800702a <os_idle_task+0x20>
        } else if (iticks > MAX_IDLE_TICKS) {
 8007086:	67cd                	lui	a5,0x13
 8007088:	c0078793          	addi	a5,a5,-1024 # 12c00 <__stack_size+0x12400>
 800708c:	faa7f0e3          	bgeu	a5,a0,800702c <os_idle_task+0x22>
            iticks = MAX_IDLE_TICKS;
 8007090:	654d                	lui	a0,0x13
 8007092:	c0050513          	addi	a0,a0,-1024 # 12c00 <__stack_size+0x12400>
 8007096:	bf59                	j	800702c <os_idle_task+0x22>

08007098 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
 8007098:	1141                	addi	sp,sp,-16
 800709a:	c606                	sw	ra,12(sp)
 800709c:	87aa                	mv	a5,a0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
 800709e:	4581                	li	a1,0
 80070a0:	4501                	li	a0,0
 80070a2:	9782                	jalr	a5
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
 80070a4:	4681                	li	a3,0
 80070a6:	4601                	li	a2,0
 80070a8:	4581                	li	a1,0
 80070aa:	4501                	li	a0,0
 80070ac:	371d                	jal	8006fd2 <__assert_func>

080070ae <os_started>:
}
 80070ae:	200037b7          	lui	a5,0x20003
 80070b2:	b3c7a503          	lw	a0,-1220(a5) # 20002b3c <g_os_started>
 80070b6:	8082                	ret

080070b8 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
 80070b8:	1141                	addi	sp,sp,-16
 80070ba:	c606                	sw	ra,12(sp)
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
 80070bc:	04000893          	li	a7,64
 80070c0:	c4018813          	addi	a6,gp,-960 # 20000960 <g_idle_task_stack>
 80070c4:	57fd                	li	a5,-1
 80070c6:	0ff00713          	li	a4,255
 80070ca:	4681                	li	a3,0
 80070cc:	08007637          	lui	a2,0x8007
 80070d0:	00a60613          	addi	a2,a2,10 # 800700a <os_idle_task>
 80070d4:	0800d5b7          	lui	a1,0x800d
 80070d8:	6ec58593          	addi	a1,a1,1772 # 800d6ec <sensor_node_addresses+0x10c>
 80070dc:	20003537          	lui	a0,0x20003
 80070e0:	ae850513          	addi	a0,a0,-1304 # 20002ae8 <g_idle_task>
 80070e4:	642010ef          	jal	ra,8008726 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
 80070e8:	ed09                	bnez	a0,8007102 <os_init_idle_task+0x4a>

    /* Initialize sanity */
    rc = os_sanity_init();
 80070ea:	1de010ef          	jal	ra,80082c8 <os_sanity_init>
    assert(rc == 0);
 80070ee:	e105                	bnez	a0,800710e <os_init_idle_task+0x56>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
 80070f0:	651d                	lui	a0,0x7
 80070f2:	53050513          	addi	a0,a0,1328 # 7530 <__stack_size+0x6d30>
 80070f6:	7d0020ef          	jal	ra,80098c6 <hal_watchdog_init>
    assert(rc == 0);
 80070fa:	e105                	bnez	a0,800711a <os_init_idle_task+0x62>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
 80070fc:	40b2                	lw	ra,12(sp)
 80070fe:	0141                	addi	sp,sp,16
 8007100:	8082                	ret
    assert(rc == 0);
 8007102:	4681                	li	a3,0
 8007104:	4601                	li	a2,0
 8007106:	4581                	li	a1,0
 8007108:	4501                	li	a0,0
 800710a:	ec9ff0ef          	jal	ra,8006fd2 <__assert_func>
    assert(rc == 0);
 800710e:	4681                	li	a3,0
 8007110:	4601                	li	a2,0
 8007112:	4581                	li	a1,0
 8007114:	4501                	li	a0,0
 8007116:	ebdff0ef          	jal	ra,8006fd2 <__assert_func>
    assert(rc == 0);
 800711a:	4681                	li	a3,0
 800711c:	4601                	li	a2,0
 800711e:	4581                	li	a1,0
 8007120:	4501                	li	a0,0
 8007122:	eb1ff0ef          	jal	ra,8006fd2 <__assert_func>

08007126 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
 8007126:	1141                	addi	sp,sp,-16
 8007128:	c606                	sw	ra,12(sp)
 800712a:	c422                	sw	s0,8(sp)
 800712c:	842a                	mv	s0,a0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
 800712e:	200037b7          	lui	a5,0x20003
 8007132:	b807a823          	sw	zero,-1136(a5) # 20002b90 <g_callout_list>
 8007136:	b9078793          	addi	a5,a5,-1136
 800713a:	c3dc                	sw	a5,4(a5)
    STAILQ_INIT(&g_os_task_list);
 800713c:	200037b7          	lui	a5,0x20003
 8007140:	ba07aa23          	sw	zero,-1100(a5) # 20002bb4 <g_os_task_list>
 8007144:	bb478793          	addi	a5,a5,-1100
 8007148:	c3dc                	sw	a5,4(a5)
    os_eventq_init(os_eventq_dflt_get());
 800714a:	25ad                	jal	80077b4 <os_eventq_dflt_get>
 800714c:	2165                	jal	80075f4 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
 800714e:	2969                	jal	80075e8 <os_dev_reset>

    err = os_arch_os_init();
 8007150:	77e020ef          	jal	ra,80098ce <os_arch_os_init>
    assert(err == OS_OK);
 8007154:	e539                	bnez	a0,80071a2 <os_init+0x7c>

    if (main_fn) {
 8007156:	c815                	beqz	s0,800718a <os_init+0x64>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
 8007158:	40000893          	li	a7,1024
 800715c:	20001837          	lui	a6,0x20001
 8007160:	a6080813          	addi	a6,a6,-1440 # 20000a60 <g_os_main_stack>
 8007164:	57fd                	li	a5,-1
 8007166:	07f00713          	li	a4,127
 800716a:	86a2                	mv	a3,s0
 800716c:	08007637          	lui	a2,0x8007
 8007170:	09860613          	addi	a2,a2,152 # 8007098 <os_main>
 8007174:	0800d5b7          	lui	a1,0x800d
 8007178:	6e458593          	addi	a1,a1,1764 # 800d6e4 <sensor_node_addresses+0x104>
 800717c:	20003537          	lui	a0,0x20003
 8007180:	b4050513          	addi	a0,a0,-1216 # 20002b40 <g_os_main_task>
 8007184:	5a2010ef          	jal	ra,8008726 <os_task_init>
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
 8007188:	e11d                	bnez	a0,80071ae <os_init+0x88>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
 800718a:	494020ef          	jal	ra,800961e <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
 800718e:	4505                	li	a0,1
 8007190:	2eb9                	jal	80074ee <os_dev_initialize_all>
    assert(err == OS_OK);
 8007192:	e505                	bnez	a0,80071ba <os_init+0x94>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
 8007194:	4509                	li	a0,2
 8007196:	2ea1                	jal	80074ee <os_dev_initialize_all>
    assert(err == OS_OK);
 8007198:	e51d                	bnez	a0,80071c6 <os_init+0xa0>
}
 800719a:	40b2                	lw	ra,12(sp)
 800719c:	4422                	lw	s0,8(sp)
 800719e:	0141                	addi	sp,sp,16
 80071a0:	8082                	ret
    assert(err == OS_OK);
 80071a2:	4681                	li	a3,0
 80071a4:	4601                	li	a2,0
 80071a6:	4581                	li	a1,0
 80071a8:	4501                	li	a0,0
 80071aa:	e29ff0ef          	jal	ra,8006fd2 <__assert_func>
        assert(err == 0);
 80071ae:	4681                	li	a3,0
 80071b0:	4601                	li	a2,0
 80071b2:	4581                	li	a1,0
 80071b4:	4501                	li	a0,0
 80071b6:	e1dff0ef          	jal	ra,8006fd2 <__assert_func>
    assert(err == OS_OK);
 80071ba:	4681                	li	a3,0
 80071bc:	4601                	li	a2,0
 80071be:	4581                	li	a1,0
 80071c0:	4501                	li	a0,0
 80071c2:	e11ff0ef          	jal	ra,8006fd2 <__assert_func>
    assert(err == OS_OK);
 80071c6:	4681                	li	a3,0
 80071c8:	4601                	li	a2,0
 80071ca:	4581                	li	a1,0
 80071cc:	4501                	li	a0,0
 80071ce:	e05ff0ef          	jal	ra,8006fd2 <__assert_func>

080071d2 <os_start>:

void
os_start(void)
{
 80071d2:	1141                	addi	sp,sp,-16
 80071d4:	c606                	sw	ra,12(sp)
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
 80071d6:	6f4020ef          	jal	ra,80098ca <hal_watchdog_enable>

    err = os_arch_os_start();
 80071da:	de3ff0ef          	jal	ra,8006fbc <os_arch_os_start>
    assert(err == OS_OK);
 80071de:	e501                	bnez	a0,80071e6 <os_start+0x14>
#else
    assert(0);
#endif
}
 80071e0:	40b2                	lw	ra,12(sp)
 80071e2:	0141                	addi	sp,sp,16
 80071e4:	8082                	ret
    assert(err == OS_OK);
 80071e6:	4681                	li	a3,0
 80071e8:	4601                	li	a2,0
 80071ea:	4581                	li	a1,0
 80071ec:	4501                	li	a0,0
 80071ee:	de5ff0ef          	jal	ra,8006fd2 <__assert_func>

080071f2 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
 80071f2:	1141                	addi	sp,sp,-16
 80071f4:	c606                	sw	ra,12(sp)
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 80071f6:	200037b7          	lui	a5,0x20003
 80071fa:	a707c783          	lbu	a5,-1424(a5) # 20002a70 <sysinit_active>
 80071fe:	cb99                	beqz	a5,8007214 <os_pkg_init+0x22>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
 8007200:	450d                	li	a0,3
 8007202:	24f5                	jal	80074ee <os_dev_initialize_all>
    assert(err == OS_OK);
 8007204:	ed11                	bnez	a0,8007220 <os_pkg_init+0x2e>

    os_mempool_module_init();
 8007206:	481000ef          	jal	ra,8007e86 <os_mempool_module_init>
    os_msys_init();
 800720a:	595000ef          	jal	ra,8007f9e <os_msys_init>
}
 800720e:	40b2                	lw	ra,12(sp)
 8007210:	0141                	addi	sp,sp,16
 8007212:	8082                	ret
    SYSINIT_ASSERT_ACTIVE();
 8007214:	4681                	li	a3,0
 8007216:	4601                	li	a2,0
 8007218:	4581                	li	a1,0
 800721a:	4501                	li	a0,0
 800721c:	db7ff0ef          	jal	ra,8006fd2 <__assert_func>
    assert(err == OS_OK);
 8007220:	4681                	li	a3,0
 8007222:	4601                	li	a2,0
 8007224:	4581                	li	a1,0
 8007226:	4501                	li	a0,0
 8007228:	dabff0ef          	jal	ra,8006fd2 <__assert_func>

0800722c <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
 800722c:	1101                	addi	sp,sp,-32
 800722e:	ce06                	sw	ra,28(sp)
 8007230:	cc22                	sw	s0,24(sp)
 8007232:	ca26                	sw	s1,20(sp)
 8007234:	c84a                	sw	s2,16(sp)
 8007236:	c64e                	sw	s3,12(sp)
 8007238:	842a                	mv	s0,a0
 800723a:	84ae                	mv	s1,a1
 800723c:	89b2                	mv	s3,a2
 800723e:	8936                	mv	s2,a3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
 8007240:	02000613          	li	a2,32
 8007244:	4581                	li	a1,0
 8007246:	18d010ef          	jal	ra,8008bd2 <memset>
    c->c_ev.ev_cb = ev_cb;
 800724a:	01342223          	sw	s3,4(s0)
    c->c_ev.ev_arg = ev_arg;
 800724e:	01242423          	sw	s2,8(s0)
    c->c_evq = evq;
 8007252:	c804                	sw	s1,16(s0)

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
 8007254:	40f2                	lw	ra,28(sp)
 8007256:	4462                	lw	s0,24(sp)
 8007258:	44d2                	lw	s1,20(sp)
 800725a:	4942                	lw	s2,16(sp)
 800725c:	49b2                	lw	s3,12(sp)
 800725e:	6105                	addi	sp,sp,32
 8007260:	8082                	ret

08007262 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
 8007262:	1141                	addi	sp,sp,-16
 8007264:	c606                	sw	ra,12(sp)
 8007266:	c422                	sw	s0,8(sp)
 8007268:	c226                	sw	s1,4(sp)
 800726a:	842a                	mv	s0,a0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
 800726c:	cb3ff0ef          	jal	ra,8006f1e <os_arch_save_sr>
 8007270:	84aa                	mv	s1,a0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
 8007272:	4c5c                	lw	a5,28(s0)

    if (os_callout_queued(c)) {
 8007274:	cb89                	beqz	a5,8007286 <os_callout_stop+0x24>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 8007276:	4c18                	lw	a4,24(s0)
 8007278:	c31d                	beqz	a4,800729e <os_callout_stop+0x3c>
 800727a:	cf5c                	sw	a5,28(a4)
 800727c:	4c5c                	lw	a5,28(s0)
 800727e:	4c18                	lw	a4,24(s0)
 8007280:	c398                	sw	a4,0(a5)
        c->c_next.tqe_prev = NULL;
 8007282:	00042e23          	sw	zero,28(s0)
    }

    if (c->c_evq) {
 8007286:	4808                	lw	a0,16(s0)
 8007288:	c119                	beqz	a0,800728e <os_callout_stop+0x2c>
        os_eventq_remove(c->c_evq, &c->c_ev);
 800728a:	85a2                	mv	a1,s0
 800728c:	29e1                	jal	8007764 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
 800728e:	8526                	mv	a0,s1
 8007290:	c97ff0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
 8007294:	40b2                	lw	ra,12(sp)
 8007296:	4422                	lw	s0,8(sp)
 8007298:	4492                	lw	s1,4(sp)
 800729a:	0141                	addi	sp,sp,16
 800729c:	8082                	ret
        TAILQ_REMOVE(&g_callout_list, c, c_next);
 800729e:	20003737          	lui	a4,0x20003
 80072a2:	b9070713          	addi	a4,a4,-1136 # 20002b90 <g_callout_list>
 80072a6:	c35c                	sw	a5,4(a4)
 80072a8:	bfd1                	j	800727c <os_callout_stop+0x1a>

080072aa <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
 80072aa:	1141                	addi	sp,sp,-16
 80072ac:	c606                	sw	ra,12(sp)
 80072ae:	c422                	sw	s0,8(sp)
 80072b0:	c226                	sw	s1,4(sp)
 80072b2:	c04a                	sw	s2,0(sp)
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
 80072b4:	491c                	lw	a5,16(a0)
 80072b6:	cf8d                	beqz	a5,80072f0 <os_callout_reset+0x46>
 80072b8:	84aa                	mv	s1,a0
 80072ba:	842e                	mv	s0,a1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
 80072bc:	0605ce63          	bltz	a1,8007338 <os_callout_reset+0x8e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
 80072c0:	c5fff0ef          	jal	ra,8006f1e <os_arch_save_sr>
 80072c4:	892a                	mv	s2,a0

    os_callout_stop(c);
 80072c6:	8526                	mv	a0,s1
 80072c8:	f9bff0ef          	jal	ra,8007262 <os_callout_stop>

    if (ticks == 0) {
 80072cc:	e011                	bnez	s0,80072d0 <os_callout_reset+0x26>
        ticks = 1;
 80072ce:	4405                	li	s0,1
    }

    c->c_ticks = os_time_get() + ticks;
 80072d0:	636010ef          	jal	ra,8008906 <os_time_get>
 80072d4:	9522                	add	a0,a0,s0
 80072d6:	c8c8                	sw	a0,20(s1)

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 80072d8:	200037b7          	lui	a5,0x20003
 80072dc:	b907a783          	lw	a5,-1136(a5) # 20002b90 <g_callout_list>
 80072e0:	cf91                	beqz	a5,80072fc <os_callout_reset+0x52>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
 80072e2:	4bd8                	lw	a4,20(a5)
 80072e4:	40e50733          	sub	a4,a0,a4
 80072e8:	00074a63          	bltz	a4,80072fc <os_callout_reset+0x52>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
 80072ec:	4f9c                	lw	a5,24(a5)
 80072ee:	bfcd                	j	80072e0 <os_callout_reset+0x36>
    assert(c->c_evq != NULL);
 80072f0:	4681                	li	a3,0
 80072f2:	4601                	li	a2,0
 80072f4:	4581                	li	a1,0
 80072f6:	4501                	li	a0,0
 80072f8:	cdbff0ef          	jal	ra,8006fd2 <__assert_func>
            break;
        }
    }

    if (entry) {
 80072fc:	c395                	beqz	a5,8007320 <os_callout_reset+0x76>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
 80072fe:	4fd8                	lw	a4,28(a5)
 8007300:	ccd8                	sw	a4,28(s1)
 8007302:	cc9c                	sw	a5,24(s1)
 8007304:	4fd8                	lw	a4,28(a5)
 8007306:	c304                	sw	s1,0(a4)
 8007308:	04e1                	addi	s1,s1,24
 800730a:	cfc4                	sw	s1,28(a5)
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
 800730c:	854a                	mv	a0,s2
 800730e:	c19ff0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    ret = OS_OK;
 8007312:	4501                	li	a0,0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
 8007314:	40b2                	lw	ra,12(sp)
 8007316:	4422                	lw	s0,8(sp)
 8007318:	4492                	lw	s1,4(sp)
 800731a:	4902                	lw	s2,0(sp)
 800731c:	0141                	addi	sp,sp,16
 800731e:	8082                	ret
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
 8007320:	0004ac23          	sw	zero,24(s1)
 8007324:	200037b7          	lui	a5,0x20003
 8007328:	b9078793          	addi	a5,a5,-1136 # 20002b90 <g_callout_list>
 800732c:	43d8                	lw	a4,4(a5)
 800732e:	ccd8                	sw	a4,28(s1)
 8007330:	c304                	sw	s1,0(a4)
 8007332:	04e1                	addi	s1,s1,24
 8007334:	c3c4                	sw	s1,4(a5)
 8007336:	bfd9                	j	800730c <os_callout_reset+0x62>
        ret = OS_EINVAL;
 8007338:	4509                	li	a0,2
    return ret;
 800733a:	bfe9                	j	8007314 <os_callout_reset+0x6a>

0800733c <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
 800733c:	1141                	addi	sp,sp,-16
 800733e:	c606                	sw	ra,12(sp)
 8007340:	c422                	sw	s0,8(sp)
 8007342:	c226                	sw	s1,4(sp)
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
 8007344:	5c2010ef          	jal	ra,8008906 <os_time_get>
 8007348:	84aa                	mv	s1,a0
 800734a:	a01d                	j	8007370 <os_callout_tick+0x34>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 800734c:	4c58                	lw	a4,28(s0)
 800734e:	200037b7          	lui	a5,0x20003
 8007352:	b9078793          	addi	a5,a5,-1136 # 20002b90 <g_callout_list>
 8007356:	c3d8                	sw	a4,4(a5)
 8007358:	4c5c                	lw	a5,28(s0)
 800735a:	4c18                	lw	a4,24(s0)
 800735c:	c398                	sw	a4,0(a5)
                c->c_next.tqe_prev = NULL;
 800735e:	00042e23          	sw	zero,28(s0)
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
 8007362:	bc5ff0ef          	jal	ra,8006f26 <os_arch_restore_sr>

        if (c) {
 8007366:	cc05                	beqz	s0,800739e <os_callout_tick+0x62>
            if (c->c_evq) {
 8007368:	4808                	lw	a0,16(s0)
 800736a:	c515                	beqz	a0,8007396 <os_callout_tick+0x5a>
                os_eventq_put(c->c_evq, &c->c_ev);
 800736c:	85a2                	mv	a1,s0
 800736e:	2c6d                	jal	8007628 <os_eventq_put>
        OS_ENTER_CRITICAL(sr);
 8007370:	bafff0ef          	jal	ra,8006f1e <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
 8007374:	200037b7          	lui	a5,0x20003
 8007378:	b907a403          	lw	s0,-1136(a5) # 20002b90 <g_callout_list>
        if (c) {
 800737c:	d07d                	beqz	s0,8007362 <os_callout_tick+0x26>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
 800737e:	485c                	lw	a5,20(s0)
 8007380:	40f487b3          	sub	a5,s1,a5
 8007384:	0007c763          	bltz	a5,8007392 <os_callout_tick+0x56>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
 8007388:	4c1c                	lw	a5,24(s0)
 800738a:	d3e9                	beqz	a5,800734c <os_callout_tick+0x10>
 800738c:	4c58                	lw	a4,28(s0)
 800738e:	cfd8                	sw	a4,28(a5)
 8007390:	b7e1                	j	8007358 <os_callout_tick+0x1c>
                c = NULL;
 8007392:	4401                	li	s0,0
 8007394:	b7f9                	j	8007362 <os_callout_tick+0x26>
            } else {
                c->c_ev.ev_cb(&c->c_ev);
 8007396:	405c                	lw	a5,4(s0)
 8007398:	8522                	mv	a0,s0
 800739a:	9782                	jalr	a5
 800739c:	bfd1                	j	8007370 <os_callout_tick+0x34>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
 800739e:	40b2                	lw	ra,12(sp)
 80073a0:	4422                	lw	s0,8(sp)
 80073a2:	4492                	lw	s1,4(sp)
 80073a4:	0141                	addi	sp,sp,16
 80073a6:	8082                	ret

080073a8 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
 80073a8:	1141                	addi	sp,sp,-16
 80073aa:	c606                	sw	ra,12(sp)
 80073ac:	c422                	sw	s0,8(sp)
 80073ae:	842a                	mv	s0,a0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
 80073b0:	b7fff0ef          	jal	ra,8006f2e <os_arch_in_critical>
 80073b4:	cd11                	beqz	a0,80073d0 <os_callout_wakeup_ticks+0x28>

    c = TAILQ_FIRST(&g_callout_list);
 80073b6:	200037b7          	lui	a5,0x20003
 80073ba:	b907a783          	lw	a5,-1136(a5) # 20002b90 <g_callout_list>
    if (c != NULL) {
 80073be:	c385                	beqz	a5,80073de <os_callout_wakeup_ticks+0x36>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
 80073c0:	4bc8                	lw	a0,20(a5)
 80073c2:	8d01                	sub	a0,a0,s0
 80073c4:	00054b63          	bltz	a0,80073da <os_callout_wakeup_ticks+0x32>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
 80073c8:	40b2                	lw	ra,12(sp)
 80073ca:	4422                	lw	s0,8(sp)
 80073cc:	0141                	addi	sp,sp,16
 80073ce:	8082                	ret
    OS_ASSERT_CRITICAL();
 80073d0:	4681                	li	a3,0
 80073d2:	4601                	li	a2,0
 80073d4:	4581                	li	a1,0
 80073d6:	bfdff0ef          	jal	ra,8006fd2 <__assert_func>
            rt = 0;     /* callout time is in the past */
 80073da:	4501                	li	a0,0
 80073dc:	b7f5                	j	80073c8 <os_callout_wakeup_ticks+0x20>
        rt = OS_TIMEOUT_NEVER;
 80073de:	557d                	li	a0,-1
    return (rt);
 80073e0:	b7e5                	j	80073c8 <os_callout_wakeup_ticks+0x20>

080073e2 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
 80073e2:	1141                	addi	sp,sp,-16
 80073e4:	c606                	sw	ra,12(sp)

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
 80073e6:	85aa                	mv	a1,a0
 80073e8:	4501                	li	a0,0
 80073ea:	3e2020ef          	jal	ra,80097cc <hal_timer_config>
    return rc;
}
 80073ee:	40b2                	lw	ra,12(sp)
 80073f0:	0141                	addi	sp,sp,16
 80073f2:	8082                	ret

080073f4 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
 80073f4:	1141                	addi	sp,sp,-16
 80073f6:	c606                	sw	ra,12(sp)
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
 80073f8:	4501                	li	a0,0
 80073fa:	49e020ef          	jal	ra,8009898 <hal_timer_read>
    return cpu_time;
}
 80073fe:	40b2                	lw	ra,12(sp)
 8007400:	0141                	addi	sp,sp,16
 8007402:	8082                	ret

08007404 <os_dev_add>:
{
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
 8007404:	8841a583          	lw	a1,-1916(gp) # 200005a4 <g_os_dev_list>
 8007408:	c581                	beqz	a1,8007410 <os_dev_add+0xc>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 800740a:	87ae                	mv	a5,a1
    prev_dev = NULL;
 800740c:	4601                	li	a2,0
 800740e:	a819                	j	8007424 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 8007410:	d10c                	sw	a1,32(a0)
 8007412:	02050713          	addi	a4,a0,32
 8007416:	88418793          	addi	a5,gp,-1916 # 200005a4 <g_os_dev_list>
 800741a:	c3d8                	sw	a4,4(a5)
 800741c:	c388                	sw	a0,0(a5)
        return (0);
 800741e:	a03d                	j	800744c <os_dev_add+0x48>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
 8007420:	863e                	mv	a2,a5
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
 8007422:	539c                	lw	a5,32(a5)
 8007424:	cf99                	beqz	a5,8007442 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
 8007426:	01854683          	lbu	a3,24(a0)
 800742a:	0187c703          	lbu	a4,24(a5)
 800742e:	00e6ea63          	bltu	a3,a4,8007442 <os_dev_add+0x3e>
 8007432:	fee697e3          	bne	a3,a4,8007420 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
 8007436:	01954683          	lbu	a3,25(a0)
 800743a:	0197c703          	lbu	a4,25(a5)
            ((dev->od_stage == cur_dev->od_stage) &&
 800743e:	fee6f1e3          	bgeu	a3,a4,8007420 <os_dev_add+0x1c>
    }

    if (prev_dev) {
 8007442:	ce09                	beqz	a2,800745c <os_dev_add+0x58>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 8007444:	521c                	lw	a5,32(a2)
 8007446:	d11c                	sw	a5,32(a0)
 8007448:	c781                	beqz	a5,8007450 <os_dev_add+0x4c>
 800744a:	d208                	sw	a0,32(a2)
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
 800744c:	4501                	li	a0,0
 800744e:	8082                	ret
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
 8007450:	02050713          	addi	a4,a0,32
 8007454:	88418793          	addi	a5,gp,-1916 # 200005a4 <g_os_dev_list>
 8007458:	c3d8                	sw	a4,4(a5)
 800745a:	bfc5                	j	800744a <os_dev_add+0x46>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
 800745c:	d10c                	sw	a1,32(a0)
 800745e:	88a1a223          	sw	a0,-1916(gp) # 200005a4 <g_os_dev_list>
 8007462:	b7ed                	j	800744c <os_dev_add+0x48>

08007464 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
 8007464:	1141                	addi	sp,sp,-16
 8007466:	c606                	sw	ra,12(sp)
 8007468:	c422                	sw	s0,8(sp)
 800746a:	842a                	mv	s0,a0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
 800746c:	491c                	lw	a5,16(a0)
 800746e:	494c                	lw	a1,20(a0)
 8007470:	9782                	jalr	a5
    if (rc != 0) {
 8007472:	c519                	beqz	a0,8007480 <os_dev_initialize+0x1c>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
 8007474:	01b44783          	lbu	a5,27(s0)
 8007478:	8ba1                	andi	a5,a5,8
 800747a:	eb89                	bnez	a5,800748c <os_dev_initialize+0x28>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
 800747c:	4501                	li	a0,0
 800747e:	a039                	j	800748c <os_dev_initialize+0x28>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
 8007480:	01b44783          	lbu	a5,27(s0)
 8007484:	0017e793          	ori	a5,a5,1
 8007488:	00f40da3          	sb	a5,27(s0)
err:
    return rc;
}
 800748c:	40b2                	lw	ra,12(sp)
 800748e:	4422                	lw	s0,8(sp)
 8007490:	0141                	addi	sp,sp,16
 8007492:	8082                	ret

08007494 <os_dev_init>:
{
 8007494:	1141                	addi	sp,sp,-16
 8007496:	c606                	sw	ra,12(sp)
    dev->od_name = name;
 8007498:	cd4c                	sw	a1,28(a0)
    dev->od_stage = stage;
 800749a:	00c50c23          	sb	a2,24(a0)
    dev->od_priority = priority;
 800749e:	00d50ca3          	sb	a3,25(a0)
    dev->od_flags = 0;
 80074a2:	00050da3          	sb	zero,27(a0)
    dev->od_open_ref = 0;
 80074a6:	00050d23          	sb	zero,26(a0)
    dev->od_init = od_init;
 80074aa:	c918                	sw	a4,16(a0)
    dev->od_init_arg = arg;
 80074ac:	c95c                	sw	a5,20(a0)
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
 80074ae:	4641                	li	a2,16
 80074b0:	4581                	li	a1,0
 80074b2:	720010ef          	jal	ra,8008bd2 <memset>
}
 80074b6:	4501                	li	a0,0
 80074b8:	40b2                	lw	ra,12(sp)
 80074ba:	0141                	addi	sp,sp,16
 80074bc:	8082                	ret

080074be <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
 80074be:	1141                	addi	sp,sp,-16
 80074c0:	c606                	sw	ra,12(sp)
 80074c2:	c422                	sw	s0,8(sp)
 80074c4:	842a                	mv	s0,a0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
 80074c6:	fcfff0ef          	jal	ra,8007494 <os_dev_init>
    if (rc != 0) {
 80074ca:	c509                	beqz	a0,80074d4 <os_dev_create+0x16>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
 80074cc:	40b2                	lw	ra,12(sp)
 80074ce:	4422                	lw	s0,8(sp)
 80074d0:	0141                	addi	sp,sp,16
 80074d2:	8082                	ret
    rc = os_dev_add(dev);
 80074d4:	8522                	mv	a0,s0
 80074d6:	f2fff0ef          	jal	ra,8007404 <os_dev_add>
    if (rc != 0) {
 80074da:	f96d                	bnez	a0,80074cc <os_dev_create+0xe>
    if (g_os_started) {
 80074dc:	200037b7          	lui	a5,0x20003
 80074e0:	b3c7a783          	lw	a5,-1220(a5) # 20002b3c <g_os_started>
 80074e4:	d7e5                	beqz	a5,80074cc <os_dev_create+0xe>
        rc = os_dev_initialize(dev);
 80074e6:	8522                	mv	a0,s0
 80074e8:	f7dff0ef          	jal	ra,8007464 <os_dev_initialize>
    return (rc);
 80074ec:	b7c5                	j	80074cc <os_dev_create+0xe>

080074ee <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
 80074ee:	1141                	addi	sp,sp,-16
 80074f0:	c606                	sw	ra,12(sp)
 80074f2:	c422                	sw	s0,8(sp)
 80074f4:	c226                	sw	s1,4(sp)
 80074f6:	84aa                	mv	s1,a0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 80074f8:	8841a403          	lw	s0,-1916(gp) # 200005a4 <g_os_dev_list>
    int rc = 0;
 80074fc:	4501                	li	a0,0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 80074fe:	a011                	j	8007502 <os_dev_initialize_all+0x14>
 8007500:	5000                	lw	s0,32(s0)
 8007502:	c809                	beqz	s0,8007514 <os_dev_initialize_all+0x26>
        if (dev->od_stage == stage) {
 8007504:	01844783          	lbu	a5,24(s0)
 8007508:	fe979ce3          	bne	a5,s1,8007500 <os_dev_initialize_all+0x12>
            rc = os_dev_initialize(dev);
 800750c:	8522                	mv	a0,s0
 800750e:	f57ff0ef          	jal	ra,8007464 <os_dev_initialize>
            if (rc) {
 8007512:	d57d                	beqz	a0,8007500 <os_dev_initialize_all+0x12>
            }
        }
    }

    return (rc);
}
 8007514:	40b2                	lw	ra,12(sp)
 8007516:	4422                	lw	s0,8(sp)
 8007518:	4492                	lw	s1,4(sp)
 800751a:	0141                	addi	sp,sp,16
 800751c:	8082                	ret

0800751e <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
 800751e:	1141                	addi	sp,sp,-16
 8007520:	c606                	sw	ra,12(sp)
 8007522:	c422                	sw	s0,8(sp)
 8007524:	c226                	sw	s1,4(sp)
 8007526:	84aa                	mv	s1,a0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8007528:	8841a403          	lw	s0,-1916(gp) # 200005a4 <g_os_dev_list>
 800752c:	c801                	beqz	s0,800753c <os_dev_lookup+0x1e>
        if (!strcmp(dev->od_name, name)) {
 800752e:	85a6                	mv	a1,s1
 8007530:	4c48                	lw	a0,28(s0)
 8007532:	6da010ef          	jal	ra,8008c0c <strcmp>
 8007536:	c119                	beqz	a0,800753c <os_dev_lookup+0x1e>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
 8007538:	5000                	lw	s0,32(s0)
 800753a:	bfcd                	j	800752c <os_dev_lookup+0xe>
            break;
        }
    }
    return (dev);
}
 800753c:	8522                	mv	a0,s0
 800753e:	40b2                	lw	ra,12(sp)
 8007540:	4422                	lw	s0,8(sp)
 8007542:	4492                	lw	s1,4(sp)
 8007544:	0141                	addi	sp,sp,16
 8007546:	8082                	ret

08007548 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
 8007548:	1141                	addi	sp,sp,-16
 800754a:	c606                	sw	ra,12(sp)
 800754c:	c422                	sw	s0,8(sp)
 800754e:	c226                	sw	s1,4(sp)
 8007550:	c04a                	sw	s2,0(sp)
 8007552:	84ae                	mv	s1,a1
 8007554:	8932                	mv	s2,a2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
 8007556:	fc9ff0ef          	jal	ra,800751e <os_dev_lookup>
 800755a:	842a                	mv	s0,a0
    if (dev == NULL) {
 800755c:	c915                	beqz	a0,8007590 <os_dev_open+0x48>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
 800755e:	01b54783          	lbu	a5,27(a0)
 8007562:	8b85                	andi	a5,a5,1
 8007564:	cf8d                	beqz	a5,800759e <os_dev_open+0x56>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
 8007566:	411c                	lw	a5,0(a0)
 8007568:	c789                	beqz	a5,8007572 <os_dev_open+0x2a>
        rc = dev->od_handlers.od_open(dev, timo, arg);
 800756a:	864a                	mv	a2,s2
 800756c:	85a6                	mv	a1,s1
 800756e:	9782                	jalr	a5
        if (rc != 0) {
 8007570:	e90d                	bnez	a0,80075a2 <os_dev_open+0x5a>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
 8007572:	9adff0ef          	jal	ra,8006f1e <os_arch_save_sr>
    ++dev->od_open_ref;
 8007576:	01a44783          	lbu	a5,26(s0)
 800757a:	0785                	addi	a5,a5,1
 800757c:	00f40d23          	sb	a5,26(s0)
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
 8007580:	01b44783          	lbu	a5,27(s0)
 8007584:	0027e793          	ori	a5,a5,2
 8007588:	00f40da3          	sb	a5,27(s0)
    OS_EXIT_CRITICAL(sr);
 800758c:	99bff0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
 8007590:	8522                	mv	a0,s0
 8007592:	40b2                	lw	ra,12(sp)
 8007594:	4422                	lw	s0,8(sp)
 8007596:	4492                	lw	s1,4(sp)
 8007598:	4902                	lw	s2,0(sp)
 800759a:	0141                	addi	sp,sp,16
 800759c:	8082                	ret
        return (NULL);
 800759e:	4401                	li	s0,0
 80075a0:	bfc5                	j	8007590 <os_dev_open+0x48>
    return (NULL);
 80075a2:	4401                	li	s0,0
 80075a4:	b7f5                	j	8007590 <os_dev_open+0x48>

080075a6 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
 80075a6:	cd1d                	beqz	a0,80075e4 <os_dev_close+0x3e>
{
 80075a8:	1141                	addi	sp,sp,-16
 80075aa:	c606                	sw	ra,12(sp)
 80075ac:	c422                	sw	s0,8(sp)
 80075ae:	842a                	mv	s0,a0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
 80075b0:	455c                	lw	a5,12(a0)
 80075b2:	c399                	beqz	a5,80075b8 <os_dev_close+0x12>
        rc = dev->od_handlers.od_close(dev);
 80075b4:	9782                	jalr	a5
        if (rc != 0) {
 80075b6:	e11d                	bnez	a0,80075dc <os_dev_close+0x36>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
 80075b8:	967ff0ef          	jal	ra,8006f1e <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
 80075bc:	01a44783          	lbu	a5,26(s0)
 80075c0:	17fd                	addi	a5,a5,-1
 80075c2:	0ff7f793          	andi	a5,a5,255
 80075c6:	00f40d23          	sb	a5,26(s0)
 80075ca:	e791                	bnez	a5,80075d6 <os_dev_close+0x30>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
 80075cc:	01b44783          	lbu	a5,27(s0)
 80075d0:	9be5                	andi	a5,a5,-7
 80075d2:	00f40da3          	sb	a5,27(s0)
    }
    OS_EXIT_CRITICAL(sr);
 80075d6:	951ff0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    return (0);
 80075da:	4501                	li	a0,0
err:
    return (rc);
}
 80075dc:	40b2                	lw	ra,12(sp)
 80075de:	4422                	lw	s0,8(sp)
 80075e0:	0141                	addi	sp,sp,16
 80075e2:	8082                	ret
        rc = OS_EINVAL;
 80075e4:	4509                	li	a0,2
}
 80075e6:	8082                	ret

080075e8 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
 80075e8:	88418793          	addi	a5,gp,-1916 # 200005a4 <g_os_dev_list>
 80075ec:	0007a023          	sw	zero,0(a5)
 80075f0:	c3dc                	sw	a5,4(a5)
}
 80075f2:	8082                	ret

080075f4 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
 80075f4:	00050023          	sb	zero,0(a0)
 80075f8:	000500a3          	sb	zero,1(a0)
 80075fc:	00050123          	sb	zero,2(a0)
 8007600:	000501a3          	sb	zero,3(a0)
 8007604:	00050223          	sb	zero,4(a0)
 8007608:	000502a3          	sb	zero,5(a0)
 800760c:	00050323          	sb	zero,6(a0)
 8007610:	000503a3          	sb	zero,7(a0)
    STAILQ_INIT(&evq->evq_list);
 8007614:	00052423          	sw	zero,8(a0)
 8007618:	00850793          	addi	a5,a0,8
 800761c:	c55c                	sw	a5,12(a0)
}
 800761e:	8082                	ret

08007620 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
 8007620:	4548                	lw	a0,12(a0)
}
 8007622:	00a03533          	snez	a0,a0
 8007626:	8082                	ret

08007628 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
 8007628:	1141                	addi	sp,sp,-16
 800762a:	c606                	sw	ra,12(sp)
 800762c:	c422                	sw	s0,8(sp)
 800762e:	c226                	sw	s1,4(sp)
 8007630:	c04a                	sw	s2,0(sp)
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
 8007632:	c929                	beqz	a0,8007684 <os_eventq_put+0x5c>
 8007634:	84aa                	mv	s1,a0
 8007636:	842e                	mv	s0,a1
 8007638:	fe9ff0ef          	jal	ra,8007620 <os_eventq_inited>
 800763c:	c521                	beqz	a0,8007684 <os_eventq_put+0x5c>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 800763e:	8e1ff0ef          	jal	ra,8006f1e <os_arch_save_sr>
 8007642:	892a                	mv	s2,a0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
 8007644:	00044783          	lbu	a5,0(s0)
 8007648:	e7a1                	bnez	a5,8007690 <os_eventq_put+0x68>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
 800764a:	4785                	li	a5,1
 800764c:	00f40023          	sb	a5,0(s0)
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
 8007650:	00042623          	sw	zero,12(s0)
 8007654:	44dc                	lw	a5,12(s1)
 8007656:	c380                	sw	s0,0(a5)
 8007658:	0431                	addi	s0,s0,12
 800765a:	c4c0                	sw	s0,12(s1)

    resched = 0;
    if (evq->evq_task) {
 800765c:	40c8                	lw	a0,4(s1)
 800765e:	c121                	beqz	a0,800769e <os_eventq_put+0x76>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
 8007660:	00c54703          	lbu	a4,12(a0)
 8007664:	4789                	li	a5,2
 8007666:	02f70863          	beq	a4,a5,8007696 <os_eventq_put+0x6e>
    resched = 0;
 800766a:	4401                	li	s0,0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
 800766c:	0004a223          	sw	zero,4(s1)
    }

    OS_EXIT_CRITICAL(sr);
 8007670:	854a                	mv	a0,s2
 8007672:	8b5ff0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    if (resched) {
 8007676:	e415                	bnez	s0,80076a2 <os_eventq_put+0x7a>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
 8007678:	40b2                	lw	ra,12(sp)
 800767a:	4422                	lw	s0,8(sp)
 800767c:	4492                	lw	s1,4(sp)
 800767e:	4902                	lw	s2,0(sp)
 8007680:	0141                	addi	sp,sp,16
 8007682:	8082                	ret
    assert(evq != NULL && os_eventq_inited(evq));
 8007684:	4681                	li	a3,0
 8007686:	4601                	li	a2,0
 8007688:	4581                	li	a1,0
 800768a:	4501                	li	a0,0
 800768c:	947ff0ef          	jal	ra,8006fd2 <__assert_func>
        OS_EXIT_CRITICAL(sr);
 8007690:	897ff0ef          	jal	ra,8006f26 <os_arch_restore_sr>
        return;
 8007694:	b7d5                	j	8007678 <os_eventq_put+0x50>
            os_sched_wakeup(evq->evq_task);
 8007696:	597000ef          	jal	ra,800842c <os_sched_wakeup>
            resched = 1;
 800769a:	4405                	li	s0,1
 800769c:	bfc1                	j	800766c <os_eventq_put+0x44>
    resched = 0;
 800769e:	4401                	li	s0,0
 80076a0:	bfc1                	j	8007670 <os_eventq_put+0x48>
        os_sched(NULL);
 80076a2:	4501                	li	a0,0
 80076a4:	69d000ef          	jal	ra,8008540 <os_sched>
 80076a8:	bfc1                	j	8007678 <os_eventq_put+0x50>

080076aa <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
 80076aa:	1101                	addi	sp,sp,-32
 80076ac:	ce06                	sw	ra,28(sp)
 80076ae:	cc22                	sw	s0,24(sp)
 80076b0:	ca26                	sw	s1,20(sp)
 80076b2:	c84a                	sw	s2,16(sp)
 80076b4:	c64e                	sw	s3,12(sp)
 80076b6:	84aa                	mv	s1,a0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
 80076b8:	4bb000ef          	jal	ra,8008372 <os_sched_get_current_task>
 80076bc:	842a                	mv	s0,a0
    if (evq->evq_owner != t) {
 80076be:	409c                	lw	a5,0(s1)
 80076c0:	00a78463          	beq	a5,a0,80076c8 <os_eventq_get+0x1e>
        if (evq->evq_owner == NULL) {
 80076c4:	e3a1                	bnez	a5,8007704 <os_eventq_get+0x5a>
            evq->evq_owner = t;
 80076c6:	c088                	sw	a0,0(s1)
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
 80076c8:	857ff0ef          	jal	ra,8006f1e <os_arch_save_sr>
 80076cc:	89aa                	mv	s3,a0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
 80076ce:	0084a903          	lw	s2,8(s1)
    if (ev) {
 80076d2:	02091f63          	bnez	s2,8007710 <os_eventq_get+0x66>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
 80076d6:	c0c0                	sw	s0,4(s1)
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
 80076d8:	55fd                	li	a1,-1
 80076da:	8522                	mv	a0,s0
 80076dc:	4ab000ef          	jal	ra,8008386 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
 80076e0:	00d44783          	lbu	a5,13(s0)
 80076e4:	0087e793          	ori	a5,a5,8
 80076e8:	00f406a3          	sb	a5,13(s0)
        OS_EXIT_CRITICAL(sr);
 80076ec:	854e                	mv	a0,s3
 80076ee:	839ff0ef          	jal	ra,8006f26 <os_arch_restore_sr>

        os_sched(NULL);
 80076f2:	4501                	li	a0,0
 80076f4:	64d000ef          	jal	ra,8008540 <os_sched>

        OS_ENTER_CRITICAL(sr);
 80076f8:	827ff0ef          	jal	ra,8006f1e <os_arch_save_sr>
 80076fc:	89aa                	mv	s3,a0
        evq->evq_task = NULL;
 80076fe:	0004a223          	sw	zero,4(s1)
        goto pull_one;
 8007702:	b7f1                	j	80076ce <os_eventq_get+0x24>
            assert(0);
 8007704:	4681                	li	a3,0
 8007706:	4601                	li	a2,0
 8007708:	4581                	li	a1,0
 800770a:	4501                	li	a0,0
 800770c:	8c7ff0ef          	jal	ra,8006fd2 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 8007710:	00c92783          	lw	a5,12(s2)
 8007714:	c49c                	sw	a5,8(s1)
 8007716:	c39d                	beqz	a5,800773c <os_eventq_get+0x92>
        ev->ev_queued = 0;
 8007718:	00090023          	sb	zero,0(s2)
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
 800771c:	00d44783          	lbu	a5,13(s0)
 8007720:	9bdd                	andi	a5,a5,-9
 8007722:	00f406a3          	sb	a5,13(s0)
    }
    OS_EXIT_CRITICAL(sr);
 8007726:	854e                	mv	a0,s3
 8007728:	ffeff0ef          	jal	ra,8006f26 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
 800772c:	854a                	mv	a0,s2
 800772e:	40f2                	lw	ra,28(sp)
 8007730:	4462                	lw	s0,24(sp)
 8007732:	44d2                	lw	s1,20(sp)
 8007734:	4942                	lw	s2,16(sp)
 8007736:	49b2                	lw	s3,12(sp)
 8007738:	6105                	addi	sp,sp,32
 800773a:	8082                	ret
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 800773c:	00848793          	addi	a5,s1,8
 8007740:	c4dc                	sw	a5,12(s1)
 8007742:	bfd9                	j	8007718 <os_eventq_get+0x6e>

08007744 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
 8007744:	1141                	addi	sp,sp,-16
 8007746:	c606                	sw	ra,12(sp)
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
 8007748:	f63ff0ef          	jal	ra,80076aa <os_eventq_get>
    assert(ev->ev_cb != NULL);
 800774c:	415c                	lw	a5,4(a0)
 800774e:	c789                	beqz	a5,8007758 <os_eventq_run+0x14>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
 8007750:	9782                	jalr	a5
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
 8007752:	40b2                	lw	ra,12(sp)
 8007754:	0141                	addi	sp,sp,16
 8007756:	8082                	ret
    assert(ev->ev_cb != NULL);
 8007758:	4681                	li	a3,0
 800775a:	4601                	li	a2,0
 800775c:	4581                	li	a1,0
 800775e:	4501                	li	a0,0
 8007760:	873ff0ef          	jal	ra,8006fd2 <__assert_func>

08007764 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
 8007764:	1141                	addi	sp,sp,-16
 8007766:	c606                	sw	ra,12(sp)
 8007768:	c422                	sw	s0,8(sp)
 800776a:	c226                	sw	s1,4(sp)
 800776c:	84aa                	mv	s1,a0
 800776e:	842e                	mv	s0,a1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
 8007770:	faeff0ef          	jal	ra,8006f1e <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
 8007774:	00044783          	lbu	a5,0(s0)
 8007778:	c395                	beqz	a5,800779c <os_eventq_remove+0x38>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 800777a:	4498                	lw	a4,8(s1)
 800777c:	00871a63          	bne	a4,s0,8007790 <os_eventq_remove+0x2c>
 8007780:	475c                	lw	a5,12(a4)
 8007782:	c49c                	sw	a5,8(s1)
 8007784:	ef81                	bnez	a5,800779c <os_eventq_remove+0x38>
 8007786:	00848793          	addi	a5,s1,8
 800778a:	c4dc                	sw	a5,12(s1)
 800778c:	a801                	j	800779c <os_eventq_remove+0x38>
 800778e:	873e                	mv	a4,a5
 8007790:	475c                	lw	a5,12(a4)
 8007792:	fe879ee3          	bne	a5,s0,800778e <os_eventq_remove+0x2a>
 8007796:	47dc                	lw	a5,12(a5)
 8007798:	c75c                	sw	a5,12(a4)
 800779a:	cb91                	beqz	a5,80077ae <os_eventq_remove+0x4a>
    }
    ev->ev_queued = 0;
 800779c:	00040023          	sb	zero,0(s0)
    OS_EXIT_CRITICAL(sr);
 80077a0:	f86ff0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
 80077a4:	40b2                	lw	ra,12(sp)
 80077a6:	4422                	lw	s0,8(sp)
 80077a8:	4492                	lw	s1,4(sp)
 80077aa:	0141                	addi	sp,sp,16
 80077ac:	8082                	ret
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
 80077ae:	0731                	addi	a4,a4,12
 80077b0:	c4d8                	sw	a4,12(s1)
 80077b2:	b7ed                	j	800779c <os_eventq_remove+0x38>

080077b4 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
 80077b4:	20002537          	lui	a0,0x20002
}
 80077b8:	a6050513          	addi	a0,a0,-1440 # 20001a60 <os_eventq_main>
 80077bc:	8082                	ret

080077be <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
 80077be:	1141                	addi	sp,sp,-16
 80077c0:	c606                	sw	ra,12(sp)
 80077c2:	c422                	sw	s0,8(sp)
 80077c4:	c226                	sw	s1,4(sp)
 80077c6:	c04a                	sw	s2,0(sp)
 80077c8:	842a                	mv	s0,a0
 80077ca:	892e                	mv	s2,a1
 80077cc:	84b2                	mv	s1,a2
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
 80077ce:	00052023          	sw	zero,0(a0)
 80077d2:	c048                	sw	a0,4(s0)

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
 80077d4:	4641                	li	a2,16
 80077d6:	4581                	li	a1,0
 80077d8:	0521                	addi	a0,a0,8
 80077da:	3f8010ef          	jal	ra,8008bd2 <memset>
    ev->ev_cb = ev_cb;
 80077de:	01242623          	sw	s2,12(s0)
    ev->ev_arg = arg;
 80077e2:	c804                	sw	s1,16(s0)

    return (0);
}
 80077e4:	4501                	li	a0,0
 80077e6:	40b2                	lw	ra,12(sp)
 80077e8:	4422                	lw	s0,8(sp)
 80077ea:	4492                	lw	s1,4(sp)
 80077ec:	4902                	lw	s2,0(sp)
 80077ee:	0141                	addi	sp,sp,16
 80077f0:	8082                	ret

080077f2 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
 80077f2:	1141                	addi	sp,sp,-16
 80077f4:	c606                	sw	ra,12(sp)
 80077f6:	c422                	sw	s0,8(sp)
 80077f8:	c226                	sw	s1,4(sp)
 80077fa:	84aa                	mv	s1,a0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
 80077fc:	f22ff0ef          	jal	ra,8006f1e <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
 8007800:	4080                	lw	s0,0(s1)
    if (mp) {
 8007802:	c401                	beqz	s0,800780a <os_mqueue_get+0x18>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
 8007804:	405c                	lw	a5,4(s0)
 8007806:	c09c                	sw	a5,0(s1)
 8007808:	cb99                	beqz	a5,800781e <os_mqueue_get+0x2c>
    }
    OS_EXIT_CRITICAL(sr);
 800780a:	f1cff0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    if (mp) {
 800780e:	c811                	beqz	s0,8007822 <os_mqueue_get+0x30>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
 8007810:	ff040513          	addi	a0,s0,-16
    } else {
        m = NULL;
    }

    return (m);
}
 8007814:	40b2                	lw	ra,12(sp)
 8007816:	4422                	lw	s0,8(sp)
 8007818:	4492                	lw	s1,4(sp)
 800781a:	0141                	addi	sp,sp,16
 800781c:	8082                	ret
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
 800781e:	c0c4                	sw	s1,4(s1)
 8007820:	b7ed                	j	800780a <os_mqueue_get+0x18>
        m = NULL;
 8007822:	4501                	li	a0,0
    return (m);
 8007824:	bfc5                	j	8007814 <os_mqueue_get+0x22>

08007826 <os_mqueue_put>:
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
 8007826:	00564703          	lbu	a4,5(a2)
 800782a:	479d                	li	a5,7
 800782c:	04e7f863          	bgeu	a5,a4,800787c <os_mqueue_put+0x56>
{
 8007830:	1101                	addi	sp,sp,-32
 8007832:	ce06                	sw	ra,28(sp)
 8007834:	cc22                	sw	s0,24(sp)
 8007836:	ca26                	sw	s1,20(sp)
 8007838:	c84a                	sw	s2,16(sp)
 800783a:	c64e                	sw	s3,12(sp)
 800783c:	8432                	mv	s0,a2
 800783e:	892e                	mv	s2,a1
 8007840:	84aa                	mv	s1,a0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
 8007842:	01060993          	addi	s3,a2,16

    OS_ENTER_CRITICAL(sr);
 8007846:	ed8ff0ef          	jal	ra,8006f1e <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
 800784a:	00042a23          	sw	zero,20(s0)
 800784e:	40dc                	lw	a5,4(s1)
 8007850:	0137a023          	sw	s3,0(a5)
 8007854:	01440613          	addi	a2,s0,20
 8007858:	c0d0                	sw	a2,4(s1)
    OS_EXIT_CRITICAL(sr);
 800785a:	eccff0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
 800785e:	02090163          	beqz	s2,8007880 <os_mqueue_put+0x5a>
        os_eventq_put(evq, &mq->mq_ev);
 8007862:	00848593          	addi	a1,s1,8
 8007866:	854a                	mv	a0,s2
 8007868:	dc1ff0ef          	jal	ra,8007628 <os_eventq_put>
    }

    return (0);
 800786c:	4501                	li	a0,0
err:
    return (rc);
}
 800786e:	40f2                	lw	ra,28(sp)
 8007870:	4462                	lw	s0,24(sp)
 8007872:	44d2                	lw	s1,20(sp)
 8007874:	4942                	lw	s2,16(sp)
 8007876:	49b2                	lw	s3,12(sp)
 8007878:	6105                	addi	sp,sp,32
 800787a:	8082                	ret
    return (rc);
 800787c:	4509                	li	a0,2
}
 800787e:	8082                	ret
    return (0);
 8007880:	4501                	li	a0,0
 8007882:	b7f5                	j	800786e <os_mqueue_put+0x48>

08007884 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
 8007884:	1641                	addi	a2,a2,-16
 8007886:	00c51023          	sh	a2,0(a0)
    omp->omp_pool = mp;
 800788a:	c14c                	sw	a1,4(a0)

    return (0);
}
 800788c:	4501                	li	a0,0
 800788e:	8082                	ret

08007890 <os_mbuf_get>:
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
 8007890:	00055783          	lhu	a5,0(a0)
 8007894:	02b7ed63          	bltu	a5,a1,80078ce <os_mbuf_get+0x3e>
{
 8007898:	1141                	addi	sp,sp,-16
 800789a:	c606                	sw	ra,12(sp)
 800789c:	c422                	sw	s0,8(sp)
 800789e:	c226                	sw	s1,4(sp)
 80078a0:	84ae                	mv	s1,a1
 80078a2:	842a                	mv	s0,a0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
 80078a4:	4148                	lw	a0,4(a0)
 80078a6:	2b2d                	jal	8007de0 <os_memblock_get>
    if (!om) {
 80078a8:	cd11                	beqz	a0,80078c4 <os_mbuf_get+0x34>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
 80078aa:	00052623          	sw	zero,12(a0)
    om->om_flags = 0;
 80078ae:	00050223          	sb	zero,4(a0)
    om->om_pkthdr_len = 0;
 80078b2:	000502a3          	sb	zero,5(a0)
    om->om_len = 0;
 80078b6:	00051323          	sh	zero,6(a0)
    om->om_data = (&om->om_databuf[0] + leadingspace);
 80078ba:	01050593          	addi	a1,a0,16
 80078be:	95a6                	add	a1,a1,s1
 80078c0:	c10c                	sw	a1,0(a0)
    om->om_omp = omp;
 80078c2:	c500                	sw	s0,8(a0)

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
 80078c4:	40b2                	lw	ra,12(sp)
 80078c6:	4422                	lw	s0,8(sp)
 80078c8:	4492                	lw	s1,4(sp)
 80078ca:	0141                	addi	sp,sp,16
 80078cc:	8082                	ret
        om = NULL;
 80078ce:	4501                	li	a0,0
}
 80078d0:	8082                	ret

080078d2 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
 80078d2:	1141                	addi	sp,sp,-16
 80078d4:	c606                	sw	ra,12(sp)
 80078d6:	c422                	sw	s0,8(sp)
 80078d8:	c226                	sw	s1,4(sp)

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
 80078da:	00858493          	addi	s1,a1,8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
 80078de:	00055783          	lhu	a5,0(a0)
 80078e2:	0297ea63          	bltu	a5,s1,8007916 <os_mbuf_get_pkthdr+0x44>
 80078e6:	0ff00793          	li	a5,255
 80078ea:	0297e863          	bltu	a5,s1,800791a <os_mbuf_get_pkthdr+0x48>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
 80078ee:	4581                	li	a1,0
 80078f0:	fa1ff0ef          	jal	ra,8007890 <os_mbuf_get>
    if (om) {
 80078f4:	cd01                	beqz	a0,800790c <os_mbuf_get_pkthdr+0x3a>
        om->om_pkthdr_len = pkthdr_len;
 80078f6:	009502a3          	sb	s1,5(a0)
        om->om_data += pkthdr_len;
 80078fa:	411c                	lw	a5,0(a0)
 80078fc:	94be                	add	s1,s1,a5
 80078fe:	c104                	sw	s1,0(a0)

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
 8007900:	00051823          	sh	zero,16(a0)
        pkthdr->omp_flags = 0;
 8007904:	00051923          	sh	zero,18(a0)
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
 8007908:	00052a23          	sw	zero,20(a0)
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
 800790c:	40b2                	lw	ra,12(sp)
 800790e:	4422                	lw	s0,8(sp)
 8007910:	4492                	lw	s1,4(sp)
 8007912:	0141                	addi	sp,sp,16
 8007914:	8082                	ret
        om = NULL;
 8007916:	4501                	li	a0,0
 8007918:	bfd5                	j	800790c <os_mbuf_get_pkthdr+0x3a>
 800791a:	4501                	li	a0,0
    return om;
 800791c:	bfc5                	j	800790c <os_mbuf_get_pkthdr+0x3a>

0800791e <os_mbuf_free>:
{
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
 800791e:	451c                	lw	a5,8(a0)
 8007920:	cb89                	beqz	a5,8007932 <os_mbuf_free+0x14>
{
 8007922:	1141                	addi	sp,sp,-16
 8007924:	c606                	sw	ra,12(sp)
 8007926:	85aa                	mv	a1,a0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
 8007928:	43c8                	lw	a0,4(a5)
 800792a:	2b05                	jal	8007e5a <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
 800792c:	40b2                	lw	ra,12(sp)
 800792e:	0141                	addi	sp,sp,16
 8007930:	8082                	ret
    rc = 0;
 8007932:	4501                	li	a0,0
}
 8007934:	8082                	ret

08007936 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
 8007936:	87aa                	mv	a5,a0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
 8007938:	c115                	beqz	a0,800795c <os_mbuf_free_chain+0x26>
{
 800793a:	1141                	addi	sp,sp,-16
 800793c:	c606                	sw	ra,12(sp)
 800793e:	c422                	sw	s0,8(sp)
 8007940:	a011                	j	8007944 <os_mbuf_free_chain+0xe>
    while (om != NULL) {
 8007942:	c819                	beqz	s0,8007958 <os_mbuf_free_chain+0x22>
        next = SLIST_NEXT(om, om_next);
 8007944:	47c0                	lw	s0,12(a5)

        rc = os_mbuf_free(om);
 8007946:	853e                	mv	a0,a5
 8007948:	fd7ff0ef          	jal	ra,800791e <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
 800794c:	87a2                	mv	a5,s0
        if (rc != 0) {
 800794e:	d975                	beqz	a0,8007942 <os_mbuf_free_chain+0xc>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
 8007950:	40b2                	lw	ra,12(sp)
 8007952:	4422                	lw	s0,8(sp)
 8007954:	0141                	addi	sp,sp,16
 8007956:	8082                	ret
    rc = 0;
 8007958:	4501                	li	a0,0
    return (rc);
 800795a:	bfdd                	j	8007950 <os_mbuf_free_chain+0x1a>
    rc = 0;
 800795c:	4501                	li	a0,0
}
 800795e:	8082                	ret

08007960 <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
 8007960:	1101                	addi	sp,sp,-32
 8007962:	ce06                	sw	ra,28(sp)
 8007964:	cc22                	sw	s0,24(sp)
 8007966:	ca26                	sw	s1,20(sp)
 8007968:	c84a                	sw	s2,16(sp)
 800796a:	c64e                	sw	s3,12(sp)
 800796c:	c452                	sw	s4,8(sp)
 800796e:	c256                	sw	s5,4(sp)
 8007970:	c05a                	sw	s6,0(sp)
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
 8007972:	c569                	beqz	a0,8007a3c <os_mbuf_append+0xdc>
 8007974:	8b2a                	mv	s6,a0
 8007976:	89ae                	mv	s3,a1
 8007978:	8ab2                	mv	s5,a2
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
 800797a:	00852a03          	lw	s4,8(a0)

    /* Scroll to last mbuf in the chain */
    last = om;
 800797e:	892a                	mv	s2,a0
    while (SLIST_NEXT(last, om_next) != NULL) {
 8007980:	a011                	j	8007984 <os_mbuf_append+0x24>
        last = SLIST_NEXT(last, om_next);
 8007982:	893e                	mv	s2,a5
    while (SLIST_NEXT(last, om_next) != NULL) {
 8007984:	00c92783          	lw	a5,12(s2)
 8007988:	ffed                	bnez	a5,8007982 <os_mbuf_append+0x22>
    }

    remainder = len;
 800798a:	84d6                	mv	s1,s5
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
 800798c:	00892783          	lw	a5,8(s2)

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 8007990:	01090413          	addi	s0,s2,16
 8007994:	0007d783          	lhu	a5,0(a5)
 8007998:	943e                	add	s0,s0,a5
      (om->om_data + om->om_len);
 800799a:	00092503          	lw	a0,0(s2)
 800799e:	00695783          	lhu	a5,6(s2)
 80079a2:	953e                	add	a0,a0,a5
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 80079a4:	8c09                	sub	s0,s0,a0
 80079a6:	0442                	slli	s0,s0,0x10
 80079a8:	8041                	srli	s0,s0,0x10
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
 80079aa:	04805163          	blez	s0,80079ec <os_mbuf_append+0x8c>
        if (space > remainder) {
 80079ae:	008ad363          	bge	s5,s0,80079b4 <os_mbuf_append+0x54>
            space = remainder;
 80079b2:	8456                	mv	s0,s5
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
 80079b4:	8622                	mv	a2,s0
 80079b6:	85ce                	mv	a1,s3
 80079b8:	200010ef          	jal	ra,8008bb8 <memcpy>

        last->om_len += space;
 80079bc:	00695783          	lhu	a5,6(s2)
 80079c0:	97a2                	add	a5,a5,s0
 80079c2:	00f91323          	sh	a5,6(s2)
        data += space;
 80079c6:	99a2                	add	s3,s3,s0
        remainder -= space;
 80079c8:	408a84b3          	sub	s1,s5,s0
 80079cc:	a005                	j	80079ec <os_mbuf_append+0x8c>
        new = os_mbuf_get(omp, 0);
        if (!new) {
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
 80079ce:	0642                	slli	a2,a2,0x10
 80079d0:	8241                	srli	a2,a2,0x10
 80079d2:	00c41323          	sh	a2,6(s0)
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
 80079d6:	85ce                	mv	a1,s3
 80079d8:	4008                	lw	a0,0(s0)
 80079da:	1de010ef          	jal	ra,8008bb8 <memcpy>
        data += new->om_len;
 80079de:	00645783          	lhu	a5,6(s0)
 80079e2:	99be                	add	s3,s3,a5
        remainder -= new->om_len;
 80079e4:	8c9d                	sub	s1,s1,a5
        SLIST_NEXT(last, om_next) = new;
 80079e6:	00892623          	sw	s0,12(s2)
        last = new;
 80079ea:	8922                	mv	s2,s0
    while (remainder > 0) {
 80079ec:	00905e63          	blez	s1,8007a08 <os_mbuf_append+0xa8>
        new = os_mbuf_get(omp, 0);
 80079f0:	4581                	li	a1,0
 80079f2:	8552                	mv	a0,s4
 80079f4:	e9dff0ef          	jal	ra,8007890 <os_mbuf_get>
 80079f8:	842a                	mv	s0,a0
        if (!new) {
 80079fa:	c519                	beqz	a0,8007a08 <os_mbuf_append+0xa8>
        new->om_len = min(omp->omp_databuf_len, remainder);
 80079fc:	000a5603          	lhu	a2,0(s4)
 8007a00:	fcc4d7e3          	bge	s1,a2,80079ce <os_mbuf_append+0x6e>
 8007a04:	8626                	mv	a2,s1
 8007a06:	b7e1                	j	80079ce <os_mbuf_append+0x6e>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
 8007a08:	005b4703          	lbu	a4,5(s6)
 8007a0c:	479d                	li	a5,7
 8007a0e:	00e7fb63          	bgeu	a5,a4,8007a24 <os_mbuf_append+0xc4>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
 8007a12:	409a87b3          	sub	a5,s5,s1
 8007a16:	07c2                	slli	a5,a5,0x10
 8007a18:	83c1                	srli	a5,a5,0x10
 8007a1a:	010b5703          	lhu	a4,16(s6)
 8007a1e:	97ba                	add	a5,a5,a4
 8007a20:	00fb1823          	sh	a5,16(s6)
    }

    if (remainder != 0) {
 8007a24:	ec91                	bnez	s1,8007a40 <os_mbuf_append+0xe0>


    return (0);
err:
    return (rc);
}
 8007a26:	8526                	mv	a0,s1
 8007a28:	40f2                	lw	ra,28(sp)
 8007a2a:	4462                	lw	s0,24(sp)
 8007a2c:	44d2                	lw	s1,20(sp)
 8007a2e:	4942                	lw	s2,16(sp)
 8007a30:	49b2                	lw	s3,12(sp)
 8007a32:	4a22                	lw	s4,8(sp)
 8007a34:	4a92                	lw	s5,4(sp)
 8007a36:	4b02                	lw	s6,0(sp)
 8007a38:	6105                	addi	sp,sp,32
 8007a3a:	8082                	ret
        rc = OS_EINVAL;
 8007a3c:	4489                	li	s1,2
 8007a3e:	b7e5                	j	8007a26 <os_mbuf_append+0xc6>
        rc = OS_ENOMEM;
 8007a40:	4485                	li	s1,1
 8007a42:	b7d5                	j	8007a26 <os_mbuf_append+0xc6>

08007a44 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
 8007a44:	1101                	addi	sp,sp,-32
 8007a46:	ce06                	sw	ra,28(sp)
 8007a48:	cc22                	sw	s0,24(sp)
 8007a4a:	ca26                	sw	s1,20(sp)
 8007a4c:	c84a                	sw	s2,16(sp)
 8007a4e:	c64e                	sw	s3,12(sp)
 8007a50:	c452                	sw	s4,8(sp)
 8007a52:	842a                	mv	s0,a0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
 8007a54:	00852983          	lw	s3,8(a0)

    head = NULL;
    copy = NULL;
 8007a58:	4a01                	li	s4,0
    head = NULL;
 8007a5a:	4901                	li	s2,0

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
 8007a5c:	a83d                	j	8007a9a <os_mbuf_dup+0x56>
    startoff = 0;
 8007a5e:	4581                	li	a1,0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8007a60:	401c                	lw	a5,0(s0)
        ((uint8_t *) &om->om_databuf[0] + startoff));
 8007a62:	01040713          	addi	a4,s0,16
 8007a66:	95ba                	add	a1,a1,a4
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8007a68:	40b785b3          	sub	a1,a5,a1
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
 8007a6c:	05c2                	slli	a1,a1,0x10
 8007a6e:	81c1                	srli	a1,a1,0x10
 8007a70:	854e                	mv	a0,s3
 8007a72:	e1fff0ef          	jal	ra,8007890 <os_mbuf_get>
 8007a76:	84aa                	mv	s1,a0
 8007a78:	00aa2623          	sw	a0,12(s4)
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
 8007a7c:	c915                	beqz	a0,8007ab0 <os_mbuf_dup+0x6c>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
 8007a7e:	00444783          	lbu	a5,4(s0)
 8007a82:	00f48223          	sb	a5,4(s1)
        copy->om_len = om->om_len;
 8007a86:	00645603          	lhu	a2,6(s0)
 8007a8a:	00c49323          	sh	a2,6(s1)
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
 8007a8e:	400c                	lw	a1,0(s0)
 8007a90:	4088                	lw	a0,0(s1)
 8007a92:	126010ef          	jal	ra,8008bb8 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
 8007a96:	4440                	lw	s0,12(s0)
 8007a98:	8a26                	mv	s4,s1
 8007a9a:	cc19                	beqz	s0,8007ab8 <os_mbuf_dup+0x74>
        if (head) {
 8007a9c:	02090763          	beqz	s2,8007aca <os_mbuf_dup+0x86>
    if (OS_MBUF_IS_PKTHDR(om)) {
 8007aa0:	00544583          	lbu	a1,5(s0)
 8007aa4:	479d                	li	a5,7
 8007aa6:	fab7fce3          	bgeu	a5,a1,8007a5e <os_mbuf_dup+0x1a>
        startoff = om->om_pkthdr_len;
 8007aaa:	05c2                	slli	a1,a1,0x10
 8007aac:	81c1                	srli	a1,a1,0x10
 8007aae:	bf4d                	j	8007a60 <os_mbuf_dup+0x1c>
                os_mbuf_free_chain(head);
 8007ab0:	854a                	mv	a0,s2
 8007ab2:	e85ff0ef          	jal	ra,8007936 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
 8007ab6:	8926                	mv	s2,s1
}
 8007ab8:	854a                	mv	a0,s2
 8007aba:	40f2                	lw	ra,28(sp)
 8007abc:	4462                	lw	s0,24(sp)
 8007abe:	44d2                	lw	s1,20(sp)
 8007ac0:	4942                	lw	s2,16(sp)
 8007ac2:	49b2                	lw	s3,12(sp)
 8007ac4:	4a22                	lw	s4,8(sp)
 8007ac6:	6105                	addi	sp,sp,32
 8007ac8:	8082                	ret
    if (OS_MBUF_IS_PKTHDR(om)) {
 8007aca:	00544783          	lbu	a5,5(s0)
 8007ace:	471d                	li	a4,7
 8007ad0:	02f77763          	bgeu	a4,a5,8007afe <os_mbuf_dup+0xba>
        startoff = om->om_pkthdr_len;
 8007ad4:	07c2                	slli	a5,a5,0x10
 8007ad6:	83c1                	srli	a5,a5,0x10
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8007ad8:	400c                	lw	a1,0(s0)
        ((uint8_t *) &om->om_databuf[0] + startoff));
 8007ada:	01040713          	addi	a4,s0,16
 8007ade:	97ba                	add	a5,a5,a4
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8007ae0:	8d9d                	sub	a1,a1,a5
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
 8007ae2:	05c2                	slli	a1,a1,0x10
 8007ae4:	81c1                	srli	a1,a1,0x10
 8007ae6:	854e                	mv	a0,s3
 8007ae8:	da9ff0ef          	jal	ra,8007890 <os_mbuf_get>
 8007aec:	892a                	mv	s2,a0
            if (!head) {
 8007aee:	d569                	beqz	a0,8007ab8 <os_mbuf_dup+0x74>
            if (OS_MBUF_IS_PKTHDR(om)) {
 8007af0:	00544703          	lbu	a4,5(s0)
 8007af4:	479d                	li	a5,7
 8007af6:	00e7e663          	bltu	a5,a4,8007b02 <os_mbuf_dup+0xbe>
            copy = head;
 8007afa:	84aa                	mv	s1,a0
 8007afc:	b749                	j	8007a7e <os_mbuf_dup+0x3a>
    startoff = 0;
 8007afe:	4781                	li	a5,0
 8007b00:	bfe1                	j	8007ad8 <os_mbuf_dup+0x94>
    assert(new_buf->om_len == 0);
 8007b02:	00655783          	lhu	a5,6(a0)
 8007b06:	e39d                	bnez	a5,8007b2c <os_mbuf_dup+0xe8>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
 8007b08:	01050493          	addi	s1,a0,16
 8007b0c:	00544603          	lbu	a2,5(s0)
 8007b10:	01040593          	addi	a1,s0,16
 8007b14:	8526                	mv	a0,s1
 8007b16:	0a2010ef          	jal	ra,8008bb8 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
 8007b1a:	00544783          	lbu	a5,5(s0)
 8007b1e:	00f902a3          	sb	a5,5(s2)
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
 8007b22:	94be                	add	s1,s1,a5
 8007b24:	00992023          	sw	s1,0(s2)
            copy = head;
 8007b28:	84ca                	mv	s1,s2
 8007b2a:	bf91                	j	8007a7e <os_mbuf_dup+0x3a>
    assert(new_buf->om_len == 0);
 8007b2c:	4681                	li	a3,0
 8007b2e:	4601                	li	a2,0
 8007b30:	4581                	li	a1,0
 8007b32:	4501                	li	a0,0
 8007b34:	c9eff0ef          	jal	ra,8006fd2 <__assert_func>

08007b38 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
 8007b38:	c969                	beqz	a0,8007c0a <os_mbuf_adj+0xd2>
{
 8007b3a:	1141                	addi	sp,sp,-16
 8007b3c:	c606                	sw	ra,12(sp)
 8007b3e:	c422                	sw	s0,8(sp)
 8007b40:	842a                	mv	s0,a0
        return;
    if (len >= 0) {
 8007b42:	0405c763          	bltz	a1,8007b90 <os_mbuf_adj+0x58>
    if ((m = mp) == NULL)
 8007b46:	87aa                	mv	a5,a0
    int len = req_len;
 8007b48:	872e                	mv	a4,a1
 8007b4a:	a801                	j	8007b5a <os_mbuf_adj+0x22>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
 8007b4c:	8e99                	sub	a3,a3,a4
 8007b4e:	00d79323          	sh	a3,6(a5)
                m->om_data += len;
 8007b52:	4394                	lw	a3,0(a5)
 8007b54:	9736                	add	a4,a4,a3
 8007b56:	c398                	sw	a4,0(a5)
                len = 0;
 8007b58:	4701                	li	a4,0
        while (m != NULL && len > 0) {
 8007b5a:	cf81                	beqz	a5,8007b72 <os_mbuf_adj+0x3a>
 8007b5c:	00e05b63          	blez	a4,8007b72 <os_mbuf_adj+0x3a>
            if (m->om_len <= len) {
 8007b60:	0067d683          	lhu	a3,6(a5)
 8007b64:	fed744e3          	blt	a4,a3,8007b4c <os_mbuf_adj+0x14>
                len -= m->om_len;
 8007b68:	8f15                	sub	a4,a4,a3
                m->om_len = 0;
 8007b6a:	00079323          	sh	zero,6(a5)
                m = SLIST_NEXT(m, om_next);
 8007b6e:	47dc                	lw	a5,12(a5)
 8007b70:	b7ed                	j	8007b5a <os_mbuf_adj+0x22>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
 8007b72:	00544683          	lbu	a3,5(s0)
 8007b76:	479d                	li	a5,7
 8007b78:	00d7f863          	bgeu	a5,a3,8007b88 <os_mbuf_adj+0x50>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
 8007b7c:	8f0d                	sub	a4,a4,a1
 8007b7e:	01045783          	lhu	a5,16(s0)
 8007b82:	973e                	add	a4,a4,a5
 8007b84:	00e41823          	sh	a4,16(s0)
                break;
            }
            count -= m->om_len;
        }
    }
}
 8007b88:	40b2                	lw	ra,12(sp)
 8007b8a:	4422                	lw	s0,8(sp)
 8007b8c:	0141                	addi	sp,sp,16
 8007b8e:	8082                	ret
        len = -len;
 8007b90:	40b00833          	neg	a6,a1
    if ((m = mp) == NULL)
 8007b94:	86aa                	mv	a3,a0
        count = 0;
 8007b96:	4701                	li	a4,0
 8007b98:	a011                	j	8007b9c <os_mbuf_adj+0x64>
            m = SLIST_NEXT(m, om_next);
 8007b9a:	86b2                	mv	a3,a2
            count += m->om_len;
 8007b9c:	0066d783          	lhu	a5,6(a3)
 8007ba0:	973e                	add	a4,a4,a5
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
 8007ba2:	46d0                	lw	a2,12(a3)
 8007ba4:	fa7d                	bnez	a2,8007b9a <os_mbuf_adj+0x62>
        if (m->om_len >= len) {
 8007ba6:	0307d463          	bge	a5,a6,8007bce <os_mbuf_adj+0x96>
        count -= len;
 8007baa:	972e                	add	a4,a4,a1
        if (count < 0)
 8007bac:	04074463          	bltz	a4,8007bf4 <os_mbuf_adj+0xbc>
        if (OS_MBUF_IS_PKTHDR(m))
 8007bb0:	00544683          	lbu	a3,5(s0)
 8007bb4:	479d                	li	a5,7
 8007bb6:	00d7f463          	bgeu	a5,a3,8007bbe <os_mbuf_adj+0x86>
            OS_MBUF_PKTHDR(m)->omp_len = count;
 8007bba:	00e41823          	sh	a4,16(s0)
        for (; m; m = SLIST_NEXT(m, om_next)) {
 8007bbe:	d469                	beqz	s0,8007b88 <os_mbuf_adj+0x50>
            if (m->om_len >= count) {
 8007bc0:	00645783          	lhu	a5,6(s0)
 8007bc4:	02e7da63          	bge	a5,a4,8007bf8 <os_mbuf_adj+0xc0>
            count -= m->om_len;
 8007bc8:	8f1d                	sub	a4,a4,a5
        for (; m; m = SLIST_NEXT(m, om_next)) {
 8007bca:	4440                	lw	s0,12(s0)
 8007bcc:	bfcd                	j	8007bbe <os_mbuf_adj+0x86>
            m->om_len -= len;
 8007bce:	0842                	slli	a6,a6,0x10
 8007bd0:	01085813          	srli	a6,a6,0x10
 8007bd4:	410787b3          	sub	a5,a5,a6
 8007bd8:	00f69323          	sh	a5,6(a3)
            if (OS_MBUF_IS_PKTHDR(mp))
 8007bdc:	00544703          	lbu	a4,5(s0)
 8007be0:	479d                	li	a5,7
 8007be2:	fae7f3e3          	bgeu	a5,a4,8007b88 <os_mbuf_adj+0x50>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
 8007be6:	01045783          	lhu	a5,16(s0)
 8007bea:	41078833          	sub	a6,a5,a6
 8007bee:	01041823          	sh	a6,16(s0)
            return;
 8007bf2:	bf59                	j	8007b88 <os_mbuf_adj+0x50>
            count = 0;
 8007bf4:	4701                	li	a4,0
 8007bf6:	bf6d                	j	8007bb0 <os_mbuf_adj+0x78>
                m->om_len = count;
 8007bf8:	00e41323          	sh	a4,6(s0)
                if (SLIST_NEXT(m, om_next) != NULL) {
 8007bfc:	4448                	lw	a0,12(s0)
 8007bfe:	d549                	beqz	a0,8007b88 <os_mbuf_adj+0x50>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
 8007c00:	d37ff0ef          	jal	ra,8007936 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
 8007c04:	00042623          	sw	zero,12(s0)
 8007c08:	b741                	j	8007b88 <os_mbuf_adj+0x50>
 8007c0a:	8082                	ret

08007c0c <os_mbuf_prepend>:
    }
}

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
 8007c0c:	1101                	addi	sp,sp,-32
 8007c0e:	ce06                	sw	ra,28(sp)
 8007c10:	cc22                	sw	s0,24(sp)
 8007c12:	ca26                	sw	s1,20(sp)
 8007c14:	c84a                	sw	s2,16(sp)
 8007c16:	c64e                	sw	s3,12(sp)
 8007c18:	842a                	mv	s0,a0
 8007c1a:	892e                	mv	s2,a1
 8007c1c:	a061                	j	8007ca4 <os_mbuf_prepend+0x98>
 8007c1e:	4681                	li	a3,0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8007c20:	4018                	lw	a4,0(s0)
        ((uint8_t *) &om->om_databuf[0] + startoff));
 8007c22:	01040793          	addi	a5,s0,16
 8007c26:	97b6                	add	a5,a5,a3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
 8007c28:	40f707b3          	sub	a5,a4,a5
    return (leadingspace);
 8007c2c:	07c2                	slli	a5,a5,0x10
 8007c2e:	83c1                	srli	a5,a5,0x10

    while (1) {
        /* Fill the available space at the front of the head of the chain, as
         * needed.
         */
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
 8007c30:	00f95363          	bge	s2,a5,8007c36 <os_mbuf_prepend+0x2a>
 8007c34:	87ca                	mv	a5,s2

        om->om_data -= leading;
 8007c36:	8f1d                	sub	a4,a4,a5
 8007c38:	c018                	sw	a4,0(s0)
        om->om_len += leading;
 8007c3a:	01079693          	slli	a3,a5,0x10
 8007c3e:	82c1                	srli	a3,a3,0x10
 8007c40:	00645703          	lhu	a4,6(s0)
 8007c44:	9736                	add	a4,a4,a3
 8007c46:	00e41323          	sh	a4,6(s0)
        if (OS_MBUF_IS_PKTHDR(om)) {
 8007c4a:	471d                	li	a4,7
 8007c4c:	00b77763          	bgeu	a4,a1,8007c5a <os_mbuf_prepend+0x4e>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
 8007c50:	01045703          	lhu	a4,16(s0)
 8007c54:	96ba                	add	a3,a3,a4
 8007c56:	00d41823          	sh	a3,16(s0)
        }

        len -= leading;
 8007c5a:	40f90933          	sub	s2,s2,a5
        if (len == 0) {
 8007c5e:	06090663          	beqz	s2,8007cca <os_mbuf_prepend+0xbe>
            break;
        }

        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
 8007c62:	479d                	li	a5,7
 8007c64:	04b7f963          	bgeu	a5,a1,8007cb6 <os_mbuf_prepend+0xaa>
            p = os_mbuf_get_pkthdr(om->om_omp,
 8007c68:	15e1                	addi	a1,a1,-8
 8007c6a:	0ff5f593          	andi	a1,a1,255
 8007c6e:	4408                	lw	a0,8(s0)
 8007c70:	c63ff0ef          	jal	ra,80078d2 <os_mbuf_get_pkthdr>
 8007c74:	84aa                	mv	s1,a0
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
        }
        if (p == NULL) {
 8007c76:	c4b1                	beqz	s1,8007cc2 <os_mbuf_prepend+0xb6>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
 8007c78:	00544703          	lbu	a4,5(s0)
 8007c7c:	479d                	li	a5,7
 8007c7e:	04e7ee63          	bltu	a5,a4,8007cda <os_mbuf_prepend+0xce>
    omp = om->om_omp;
 8007c82:	4498                	lw	a4,8(s1)
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 8007c84:	01048793          	addi	a5,s1,16
 8007c88:	00075703          	lhu	a4,0(a4)
 8007c8c:	97ba                	add	a5,a5,a4
      (om->om_data + om->om_len);
 8007c8e:	4098                	lw	a4,0(s1)
 8007c90:	0064d683          	lhu	a3,6(s1)
 8007c94:	96ba                	add	a3,a3,a4
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
 8007c96:	8f95                	sub	a5,a5,a3
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
 8007c98:	07c2                	slli	a5,a5,0x10
 8007c9a:	83c1                	srli	a5,a5,0x10
 8007c9c:	97ba                	add	a5,a5,a4
 8007c9e:	c09c                	sw	a5,0(s1)

        SLIST_NEXT(p, om_next) = om;
 8007ca0:	c4c0                	sw	s0,12(s1)
        om = p;
 8007ca2:	8426                	mv	s0,s1
    if (OS_MBUF_IS_PKTHDR(om)) {
 8007ca4:	00544583          	lbu	a1,5(s0)
 8007ca8:	479d                	li	a5,7
 8007caa:	f6b7fae3          	bgeu	a5,a1,8007c1e <os_mbuf_prepend+0x12>
        startoff = om->om_pkthdr_len;
 8007cae:	01059693          	slli	a3,a1,0x10
 8007cb2:	82c1                	srli	a3,a3,0x10
 8007cb4:	b7b5                	j	8007c20 <os_mbuf_prepend+0x14>
            p = os_mbuf_get(om->om_omp, 0);
 8007cb6:	4581                	li	a1,0
 8007cb8:	4408                	lw	a0,8(s0)
 8007cba:	bd7ff0ef          	jal	ra,8007890 <os_mbuf_get>
 8007cbe:	84aa                	mv	s1,a0
 8007cc0:	bf5d                	j	8007c76 <os_mbuf_prepend+0x6a>
            os_mbuf_free_chain(om);
 8007cc2:	8522                	mv	a0,s0
 8007cc4:	c73ff0ef          	jal	ra,8007936 <os_mbuf_free_chain>
            om = NULL;
 8007cc8:	8426                	mv	s0,s1
    }

    return om;
}
 8007cca:	8522                	mv	a0,s0
 8007ccc:	40f2                	lw	ra,28(sp)
 8007cce:	4462                	lw	s0,24(sp)
 8007cd0:	44d2                	lw	s1,20(sp)
 8007cd2:	4942                	lw	s2,16(sp)
 8007cd4:	49b2                	lw	s3,12(sp)
 8007cd6:	6105                	addi	sp,sp,32
 8007cd8:	8082                	ret
    assert(new_buf->om_len == 0);
 8007cda:	0064d783          	lhu	a5,6(s1)
 8007cde:	e785                	bnez	a5,8007d06 <os_mbuf_prepend+0xfa>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
 8007ce0:	01048993          	addi	s3,s1,16
 8007ce4:	00544603          	lbu	a2,5(s0)
 8007ce8:	01040593          	addi	a1,s0,16
 8007cec:	854e                	mv	a0,s3
 8007cee:	6cb000ef          	jal	ra,8008bb8 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
 8007cf2:	00544783          	lbu	a5,5(s0)
 8007cf6:	00f482a3          	sb	a5,5(s1)
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
 8007cfa:	99be                	add	s3,s3,a5
 8007cfc:	0134a023          	sw	s3,0(s1)
            om->om_pkthdr_len = 0;
 8007d00:	000402a3          	sb	zero,5(s0)
 8007d04:	bfbd                	j	8007c82 <os_mbuf_prepend+0x76>
    assert(new_buf->om_len == 0);
 8007d06:	4681                	li	a3,0
 8007d08:	4601                	li	a2,0
 8007d0a:	4581                	li	a1,0
 8007d0c:	4501                	li	a0,0
 8007d0e:	ac4ff0ef          	jal	ra,8006fd2 <__assert_func>

08007d12 <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
 8007d12:	872a                	mv	a4,a0
 8007d14:	a011                	j	8007d18 <os_mbuf_concat+0x6>
        next = SLIST_NEXT(cur, om_next);
        if (next == NULL) {
            break;
        }

        cur = next;
 8007d16:	873e                	mv	a4,a5
        next = SLIST_NEXT(cur, om_next);
 8007d18:	475c                	lw	a5,12(a4)
        if (next == NULL) {
 8007d1a:	fff5                	bnez	a5,8007d16 <os_mbuf_concat+0x4>
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
 8007d1c:	c74c                	sw	a1,12(a4)

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
 8007d1e:	00554703          	lbu	a4,5(a0)
 8007d22:	479d                	li	a5,7
 8007d24:	00e7fd63          	bgeu	a5,a4,8007d3e <os_mbuf_concat+0x2c>
        if (OS_MBUF_IS_PKTHDR(second)) {
 8007d28:	0055c703          	lbu	a4,5(a1)
 8007d2c:	02e7f663          	bgeu	a5,a4,8007d58 <os_mbuf_concat+0x46>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
 8007d30:	0105d783          	lhu	a5,16(a1)
 8007d34:	01055703          	lhu	a4,16(a0)
 8007d38:	97ba                	add	a5,a5,a4
 8007d3a:	00f51823          	sh	a5,16(a0)
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
            }
        }
    }

    second->om_pkthdr_len = 0;
 8007d3e:	000582a3          	sb	zero,5(a1)
}
 8007d42:	8082                	ret
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
 8007d44:	0067d703          	lhu	a4,6(a5)
 8007d48:	01055683          	lhu	a3,16(a0)
 8007d4c:	9736                	add	a4,a4,a3
 8007d4e:	00e51823          	sh	a4,16(a0)
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
 8007d52:	47dc                	lw	a5,12(a5)
 8007d54:	fbe5                	bnez	a5,8007d44 <os_mbuf_concat+0x32>
 8007d56:	b7e5                	j	8007d3e <os_mbuf_concat+0x2c>
 8007d58:	87ae                	mv	a5,a1
 8007d5a:	bfed                	j	8007d54 <os_mbuf_concat+0x42>

08007d5c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
 8007d5c:	c525                	beqz	a0,8007dc4 <os_mempool_init_internal+0x68>
 8007d5e:	c62d                	beqz	a2,8007dc8 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
 8007d60:	c2a9                	beqz	a3,8007da2 <os_mempool_init_internal+0x46>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
 8007d62:	c689                	beqz	a3,8007d6c <os_mempool_init_internal+0x10>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
 8007d64:	0036f813          	andi	a6,a3,3
 8007d68:	06081263          	bnez	a6,8007dcc <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
 8007d6c:	c110                	sw	a2,0(a0)
    mp->mp_num_free = blocks;
 8007d6e:	00b51323          	sh	a1,6(a0)
    mp->mp_min_free = blocks;
 8007d72:	00b51423          	sh	a1,8(a0)
    mp->mp_flags = flags;
 8007d76:	00f50523          	sb	a5,10(a0)
    mp->mp_num_blocks = blocks;
 8007d7a:	00b51223          	sh	a1,4(a0)
    mp->mp_membuf_addr = (uint32_t)membuf;
 8007d7e:	c554                	sw	a3,12(a0)
    mp->name = name;
 8007d80:	cd18                	sw	a4,24(a0)
    SLIST_FIRST(mp) = membuf;
 8007d82:	c954                	sw	a3,20(a0)

    if (blocks > 0) {
 8007d84:	c585                	beqz	a1,8007dac <os_mempool_init_internal+0x50>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
 8007d86:	00367793          	andi	a5,a2,3
 8007d8a:	c399                	beqz	a5,8007d90 <os_mempool_init_internal+0x34>
 8007d8c:	9a71                	andi	a2,a2,-4
 8007d8e:	0611                	addi	a2,a2,4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
 8007d90:	4785                	li	a5,1
 8007d92:	00b7db63          	bge	a5,a1,8007da8 <os_mempool_init_internal+0x4c>
            block_addr += true_block_size;
 8007d96:	00c68733          	add	a4,a3,a2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
 8007d9a:	c298                	sw	a4,0(a3)
        for (i = 1; i < blocks; i++) {
 8007d9c:	0785                	addi	a5,a5,1
            block_addr += true_block_size;
 8007d9e:	86ba                	mv	a3,a4
 8007da0:	bfcd                	j	8007d92 <os_mempool_init_internal+0x36>
    if ((!membuf) && (blocks != 0)) {
 8007da2:	d1e1                	beqz	a1,8007d62 <os_mempool_init_internal+0x6>
        return OS_INVALID_PARM;
 8007da4:	450d                	li	a0,3
 8007da6:	8082                	ret
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
 8007da8:	0006a023          	sw	zero,0(a3)
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
 8007dac:	00052823          	sw	zero,16(a0)
 8007db0:	200037b7          	lui	a5,0x20003
 8007db4:	b9878793          	addi	a5,a5,-1128 # 20002b98 <g_os_mempool_list>
 8007db8:	43d8                	lw	a4,4(a5)
 8007dba:	c308                	sw	a0,0(a4)
 8007dbc:	0541                	addi	a0,a0,16
 8007dbe:	c3c8                	sw	a0,4(a5)

    return OS_OK;
 8007dc0:	4501                	li	a0,0
 8007dc2:	8082                	ret
        return OS_INVALID_PARM;
 8007dc4:	450d                	li	a0,3
 8007dc6:	8082                	ret
 8007dc8:	450d                	li	a0,3
 8007dca:	8082                	ret
            return OS_MEM_NOT_ALIGNED;
 8007dcc:	4511                	li	a0,4
}
 8007dce:	8082                	ret

08007dd0 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
 8007dd0:	1141                	addi	sp,sp,-16
 8007dd2:	c606                	sw	ra,12(sp)
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
 8007dd4:	4781                	li	a5,0
 8007dd6:	f87ff0ef          	jal	ra,8007d5c <os_mempool_init_internal>
}
 8007dda:	40b2                	lw	ra,12(sp)
 8007ddc:	0141                	addi	sp,sp,16
 8007dde:	8082                	ret

08007de0 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
 8007de0:	1141                	addi	sp,sp,-16
 8007de2:	c606                	sw	ra,12(sp)
 8007de4:	c422                	sw	s0,8(sp)
 8007de6:	c226                	sw	s1,4(sp)

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
 8007de8:	cd1d                	beqz	a0,8007e26 <os_memblock_get+0x46>
 8007dea:	842a                	mv	s0,a0
        OS_ENTER_CRITICAL(sr);
 8007dec:	932ff0ef          	jal	ra,8006f1e <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
 8007df0:	00645783          	lhu	a5,6(s0)
 8007df4:	c385                	beqz	a5,8007e14 <os_memblock_get+0x34>
            /* Get a free block */
            block = SLIST_FIRST(mp);
 8007df6:	4844                	lw	s1,20(s0)

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
 8007df8:	4098                	lw	a4,0(s1)
 8007dfa:	c858                	sw	a4,20(s0)

            /* Decrement number free by 1 */
            mp->mp_num_free--;
 8007dfc:	17fd                	addi	a5,a5,-1
 8007dfe:	07c2                	slli	a5,a5,0x10
 8007e00:	83c1                	srli	a5,a5,0x10
 8007e02:	00f41323          	sh	a5,6(s0)
            if (mp->mp_min_free > mp->mp_num_free) {
 8007e06:	00845703          	lhu	a4,8(s0)
 8007e0a:	00e7f663          	bgeu	a5,a4,8007e16 <os_memblock_get+0x36>
                mp->mp_min_free = mp->mp_num_free;
 8007e0e:	00f41423          	sh	a5,8(s0)
 8007e12:	a011                	j	8007e16 <os_memblock_get+0x36>
    block = NULL;
 8007e14:	4481                	li	s1,0
            }
        }
        OS_EXIT_CRITICAL(sr);
 8007e16:	910ff0ef          	jal	ra,8006f26 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
 8007e1a:	8526                	mv	a0,s1
 8007e1c:	40b2                	lw	ra,12(sp)
 8007e1e:	4422                	lw	s0,8(sp)
 8007e20:	4492                	lw	s1,4(sp)
 8007e22:	0141                	addi	sp,sp,16
 8007e24:	8082                	ret
    block = NULL;
 8007e26:	4481                	li	s1,0
    return (void *)block;
 8007e28:	bfcd                	j	8007e1a <os_memblock_get+0x3a>

08007e2a <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
 8007e2a:	1141                	addi	sp,sp,-16
 8007e2c:	c606                	sw	ra,12(sp)
 8007e2e:	c422                	sw	s0,8(sp)
 8007e30:	c226                	sw	s1,4(sp)
 8007e32:	842a                	mv	s0,a0
 8007e34:	84ae                	mv	s1,a1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
 8007e36:	8e8ff0ef          	jal	ra,8006f1e <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
 8007e3a:	485c                	lw	a5,20(s0)
 8007e3c:	c09c                	sw	a5,0(s1)
    SLIST_FIRST(mp) = block;
 8007e3e:	c844                	sw	s1,20(s0)

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
 8007e40:	00645783          	lhu	a5,6(s0)
 8007e44:	0785                	addi	a5,a5,1
 8007e46:	00f41323          	sh	a5,6(s0)

    OS_EXIT_CRITICAL(sr);
 8007e4a:	8dcff0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
 8007e4e:	4501                	li	a0,0
 8007e50:	40b2                	lw	ra,12(sp)
 8007e52:	4422                	lw	s0,8(sp)
 8007e54:	4492                	lw	s1,4(sp)
 8007e56:	0141                	addi	sp,sp,16
 8007e58:	8082                	ret

08007e5a <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
 8007e5a:	c115                	beqz	a0,8007e7e <os_memblock_put+0x24>
 8007e5c:	c19d                	beqz	a1,8007e82 <os_memblock_put+0x28>
{
 8007e5e:	1141                	addi	sp,sp,-16
 8007e60:	c606                	sw	ra,12(sp)
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
 8007e62:	00a54783          	lbu	a5,10(a0)
 8007e66:	8b85                	andi	a5,a5,1
 8007e68:	c791                	beqz	a5,8007e74 <os_memblock_put+0x1a>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
 8007e6a:	4d5c                	lw	a5,28(a0)
 8007e6c:	c781                	beqz	a5,8007e74 <os_memblock_put+0x1a>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
 8007e6e:	5110                	lw	a2,32(a0)
 8007e70:	9782                	jalr	a5
            goto done;
 8007e72:	a019                	j	8007e78 <os_memblock_put+0x1e>
        }
    }

    /* No callback; free the block. */
    ret = os_memblock_put_from_cb(mp, block_addr);
 8007e74:	fb7ff0ef          	jal	ra,8007e2a <os_memblock_put_from_cb>

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
 8007e78:	40b2                	lw	ra,12(sp)
 8007e7a:	0141                	addi	sp,sp,16
 8007e7c:	8082                	ret
        ret = OS_INVALID_PARM;
 8007e7e:	450d                	li	a0,3
 8007e80:	8082                	ret
 8007e82:	450d                	li	a0,3
}
 8007e84:	8082                	ret

08007e86 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
 8007e86:	200037b7          	lui	a5,0x20003
 8007e8a:	b807ac23          	sw	zero,-1128(a5) # 20002b98 <g_os_mempool_list>
 8007e8e:	b9878793          	addi	a5,a5,-1128
 8007e92:	c3dc                	sw	a5,4(a5)
}
 8007e94:	8082                	ret

08007e96 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
 8007e96:	8181a503          	lw	a0,-2024(gp) # 20000538 <g_msys_pool_list>
 8007e9a:	c509                	beqz	a0,8007ea4 <os_msys_find_biggest_pool+0xe>
 8007e9c:	81818793          	addi	a5,gp,-2024 # 20000538 <g_msys_pool_list>
 8007ea0:	43c8                	lw	a0,4(a5)
 8007ea2:	1561                	addi	a0,a0,-8
}
 8007ea4:	8082                	ret

08007ea6 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 8007ea6:	8181a683          	lw	a3,-2024(gp) # 20000538 <g_msys_pool_list>
 8007eaa:	87b6                	mv	a5,a3
 8007eac:	c799                	beqz	a5,8007eba <os_msys_find_pool+0x14>
        if (dsize <= pool->omp_databuf_len) {
 8007eae:	0007d703          	lhu	a4,0(a5)
 8007eb2:	00a77463          	bgeu	a4,a0,8007eba <os_msys_find_pool+0x14>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 8007eb6:	479c                	lw	a5,8(a5)
 8007eb8:	bfd5                	j	8007eac <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
 8007eba:	c399                	beqz	a5,8007ec0 <os_msys_find_pool+0x1a>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
 8007ebc:	853e                	mv	a0,a5
 8007ebe:	8082                	ret
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
 8007ec0:	c691                	beqz	a3,8007ecc <os_msys_find_pool+0x26>
 8007ec2:	81818793          	addi	a5,gp,-2024 # 20000538 <g_msys_pool_list>
 8007ec6:	43dc                	lw	a5,4(a5)
 8007ec8:	17e1                	addi	a5,a5,-8
 8007eca:	bfcd                	j	8007ebc <os_msys_find_pool+0x16>
 8007ecc:	87b6                	mv	a5,a3
    return (pool);
 8007ece:	b7fd                	j	8007ebc <os_msys_find_pool+0x16>

08007ed0 <os_msys_register>:
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 8007ed0:	8181a583          	lw	a1,-2024(gp) # 20000538 <g_msys_pool_list>
 8007ed4:	87ae                	mv	a5,a1
    prev = NULL;
 8007ed6:	4601                	li	a2,0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 8007ed8:	cb91                	beqz	a5,8007eec <os_msys_register+0x1c>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
 8007eda:	00055683          	lhu	a3,0(a0)
 8007ede:	0007d703          	lhu	a4,0(a5)
 8007ee2:	00e6e563          	bltu	a3,a4,8007eec <os_msys_register+0x1c>
        prev = pool;
 8007ee6:	863e                	mv	a2,a5
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
 8007ee8:	479c                	lw	a5,8(a5)
 8007eea:	b7fd                	j	8007ed8 <os_msys_register+0x8>
    if (prev) {
 8007eec:	ce09                	beqz	a2,8007f06 <os_msys_register+0x36>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
 8007eee:	461c                	lw	a5,8(a2)
 8007ef0:	c51c                	sw	a5,8(a0)
 8007ef2:	c781                	beqz	a5,8007efa <os_msys_register+0x2a>
 8007ef4:	c608                	sw	a0,8(a2)
}
 8007ef6:	4501                	li	a0,0
 8007ef8:	8082                	ret
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
 8007efa:	00850713          	addi	a4,a0,8
 8007efe:	81818793          	addi	a5,gp,-2024 # 20000538 <g_msys_pool_list>
 8007f02:	c3d8                	sw	a4,4(a5)
 8007f04:	bfc5                	j	8007ef4 <os_msys_register+0x24>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
 8007f06:	c50c                	sw	a1,8(a0)
 8007f08:	c581                	beqz	a1,8007f10 <os_msys_register+0x40>
 8007f0a:	80a1ac23          	sw	a0,-2024(gp) # 20000538 <g_msys_pool_list>
 8007f0e:	b7e5                	j	8007ef6 <os_msys_register+0x26>
 8007f10:	00850713          	addi	a4,a0,8
 8007f14:	81818793          	addi	a5,gp,-2024 # 20000538 <g_msys_pool_list>
 8007f18:	c3d8                	sw	a4,4(a5)
 8007f1a:	bfc5                	j	8007f0a <os_msys_register+0x3a>

08007f1c <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
 8007f1c:	1141                	addi	sp,sp,-16
 8007f1e:	c606                	sw	ra,12(sp)
 8007f20:	c422                	sw	s0,8(sp)
 8007f22:	8432                	mv	s0,a2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
 8007f24:	662010ef          	jal	ra,8009586 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
 8007f28:	c909                	beqz	a0,8007f3a <os_msys_init_once+0x1e>
 8007f2a:	8141a783          	lw	a5,-2028(gp) # 20000534 <sysinit_panic_cb>
 8007f2e:	4701                	li	a4,0
 8007f30:	4681                	li	a3,0
 8007f32:	4601                	li	a2,0
 8007f34:	4581                	li	a1,0
 8007f36:	4501                	li	a0,0
 8007f38:	9782                	jalr	a5

    rc = os_msys_register(mbuf_pool);
 8007f3a:	8522                	mv	a0,s0
 8007f3c:	f95ff0ef          	jal	ra,8007ed0 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
 8007f40:	c909                	beqz	a0,8007f52 <os_msys_init_once+0x36>
 8007f42:	8141a783          	lw	a5,-2028(gp) # 20000534 <sysinit_panic_cb>
 8007f46:	4701                	li	a4,0
 8007f48:	4681                	li	a3,0
 8007f4a:	4601                	li	a2,0
 8007f4c:	4581                	li	a1,0
 8007f4e:	4501                	li	a0,0
 8007f50:	9782                	jalr	a5
}
 8007f52:	40b2                	lw	ra,12(sp)
 8007f54:	4422                	lw	s0,8(sp)
 8007f56:	0141                	addi	sp,sp,16
 8007f58:	8082                	ret

08007f5a <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
 8007f5a:	81818793          	addi	a5,gp,-2024 # 20000538 <g_msys_pool_list>
 8007f5e:	0007a023          	sw	zero,0(a5)
 8007f62:	c3dc                	sw	a5,4(a5)
}
 8007f64:	8082                	ret

08007f66 <os_msys_get_pkthdr>:
{
 8007f66:	1141                	addi	sp,sp,-16
 8007f68:	c606                	sw	ra,12(sp)
 8007f6a:	c422                	sw	s0,8(sp)
 8007f6c:	842e                	mv	s0,a1
    if (dsize == 0) {
 8007f6e:	ed01                	bnez	a0,8007f86 <os_msys_get_pkthdr+0x20>
        pool = os_msys_find_biggest_pool();
 8007f70:	f27ff0ef          	jal	ra,8007e96 <os_msys_find_biggest_pool>
    if (!pool) {
 8007f74:	c11d                	beqz	a0,8007f9a <os_msys_get_pkthdr+0x34>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
 8007f76:	0ff47593          	andi	a1,s0,255
 8007f7a:	959ff0ef          	jal	ra,80078d2 <os_mbuf_get_pkthdr>
}
 8007f7e:	40b2                	lw	ra,12(sp)
 8007f80:	4422                	lw	s0,8(sp)
 8007f82:	0141                	addi	sp,sp,16
 8007f84:	8082                	ret
 8007f86:	00858793          	addi	a5,a1,8
 8007f8a:	07c2                	slli	a5,a5,0x10
 8007f8c:	83c1                	srli	a5,a5,0x10
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
 8007f8e:	953e                	add	a0,a0,a5
 8007f90:	0542                	slli	a0,a0,0x10
 8007f92:	8141                	srli	a0,a0,0x10
 8007f94:	f13ff0ef          	jal	ra,8007ea6 <os_msys_find_pool>
 8007f98:	bff1                	j	8007f74 <os_msys_get_pkthdr+0xe>
    return (NULL);
 8007f9a:	4501                	li	a0,0
 8007f9c:	b7cd                	j	8007f7e <os_msys_get_pkthdr+0x18>

08007f9e <os_msys_init>:

void
os_msys_init(void)
{
 8007f9e:	1141                	addi	sp,sp,-16
 8007fa0:	c606                	sw	ra,12(sp)
    int rc;

    os_msys_reset();
 8007fa2:	fb9ff0ef          	jal	ra,8007f5a <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
 8007fa6:	0800d7b7          	lui	a5,0x800d
 8007faa:	6f478793          	addi	a5,a5,1780 # 800d6f4 <sensor_node_addresses+0x114>
 8007fae:	12400713          	li	a4,292
 8007fb2:	46b1                	li	a3,12
 8007fb4:	20003637          	lui	a2,0x20003
 8007fb8:	82060613          	addi	a2,a2,-2016 # 20002820 <os_msys_1_mbuf_pool>
 8007fbc:	200035b7          	lui	a1,0x20003
 8007fc0:	82c58593          	addi	a1,a1,-2004 # 2000282c <os_msys_1_mempool>
 8007fc4:	20002537          	lui	a0,0x20002
 8007fc8:	a7050513          	addi	a0,a0,-1424 # 20001a70 <os_msys_1_data>
 8007fcc:	f51ff0ef          	jal	ra,8007f1c <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
 8007fd0:	40b2                	lw	ra,12(sp)
 8007fd2:	0141                	addi	sp,sp,16
 8007fd4:	8082                	ret

08007fd6 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
 8007fd6:	c919                	beqz	a0,8007fec <os_mutex_init+0x16>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
 8007fd8:	000502a3          	sb	zero,5(a0)
    mu->mu_level = 0;
 8007fdc:	00051323          	sh	zero,6(a0)
    mu->mu_owner = NULL;
 8007fe0:	00052423          	sw	zero,8(a0)
    SLIST_FIRST(&mu->mu_head) = NULL;
 8007fe4:	00052023          	sw	zero,0(a0)

    ret = OS_OK;
 8007fe8:	4501                	li	a0,0
 8007fea:	8082                	ret
        ret = OS_INVALID_PARM;
 8007fec:	450d                	li	a0,3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
 8007fee:	8082                	ret

08007ff0 <os_mutex_release>:
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
 8007ff0:	200037b7          	lui	a5,0x20003
 8007ff4:	b3c7a783          	lw	a5,-1220(a5) # 20002b3c <g_os_started>
 8007ff8:	c7f9                	beqz	a5,80080c6 <os_mutex_release+0xd6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 8007ffa:	c961                	beqz	a0,80080ca <os_mutex_release+0xda>
{
 8007ffc:	1101                	addi	sp,sp,-32
 8007ffe:	ce06                	sw	ra,28(sp)
 8008000:	cc22                	sw	s0,24(sp)
 8008002:	ca26                	sw	s1,20(sp)
 8008004:	c84a                	sw	s2,16(sp)
 8008006:	c64e                	sw	s3,12(sp)
 8008008:	842a                	mv	s0,a0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
 800800a:	26a5                	jal	8008372 <os_sched_get_current_task>
 800800c:	84aa                	mv	s1,a0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
 800800e:	00645783          	lhu	a5,6(s0)
 8008012:	cfd5                	beqz	a5,80080ce <os_mutex_release+0xde>
 8008014:	4418                	lw	a4,8(s0)
 8008016:	0aa71e63          	bne	a4,a0,80080d2 <os_mutex_release+0xe2>
        ret = OS_BAD_MUTEX;
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
 800801a:	4705                	li	a4,1
 800801c:	00e78d63          	beq	a5,a4,8008036 <os_mutex_release+0x46>
        --mu->mu_level;
 8008020:	17fd                	addi	a5,a5,-1
 8008022:	00f41323          	sh	a5,6(s0)
        ret = OS_OK;
 8008026:	4501                	li	a0,0
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
 8008028:	40f2                	lw	ra,28(sp)
 800802a:	4462                	lw	s0,24(sp)
 800802c:	44d2                	lw	s1,20(sp)
 800802e:	4942                	lw	s2,16(sp)
 8008030:	49b2                	lw	s3,12(sp)
 8008032:	6105                	addi	sp,sp,32
 8008034:	8082                	ret
    OS_ENTER_CRITICAL(sr);
 8008036:	ee9fe0ef          	jal	ra,8006f1e <os_arch_save_sr>
 800803a:	89aa                	mv	s3,a0
    --mu->mu_level;
 800803c:	00645783          	lhu	a5,6(s0)
 8008040:	17fd                	addi	a5,a5,-1
 8008042:	00f41323          	sh	a5,6(s0)
    if (current->t_prio != mu->mu_prio) {
 8008046:	00b4c703          	lbu	a4,11(s1)
 800804a:	00544783          	lbu	a5,5(s0)
 800804e:	04f71b63          	bne	a4,a5,80080a4 <os_mutex_release+0xb4>
    rdy = SLIST_FIRST(&mu->mu_head);
 8008052:	00042903          	lw	s2,0(s0)
    if (rdy) {
 8008056:	00090e63          	beqz	s2,8008072 <os_mutex_release+0x82>
        assert(rdy->t_obj);
 800805a:	01c92783          	lw	a5,28(s2)
 800805e:	cba1                	beqz	a5,80080ae <os_mutex_release+0xbe>
        os_sched_wakeup(rdy);
 8008060:	854a                	mv	a0,s2
 8008062:	26e9                	jal	800842c <os_sched_wakeup>
        mu->mu_level = 1;
 8008064:	4785                	li	a5,1
 8008066:	00f41323          	sh	a5,6(s0)
        mu->mu_prio = rdy->t_prio;
 800806a:	00b94783          	lbu	a5,11(s2)
 800806e:	00f402a3          	sb	a5,5(s0)
    mu->mu_owner = rdy;
 8008072:	01242423          	sw	s2,8(s0)
    if (rdy) {
 8008076:	00090763          	beqz	s2,8008084 <os_mutex_release+0x94>
        rdy->t_lockcnt++;
 800807a:	00e94783          	lbu	a5,14(s2)
 800807e:	0785                	addi	a5,a5,1
 8008080:	00f90723          	sb	a5,14(s2)
    --current->t_lockcnt;
 8008084:	00e4c783          	lbu	a5,14(s1)
 8008088:	17fd                	addi	a5,a5,-1
 800808a:	00f48723          	sb	a5,14(s1)
    rdy = os_sched_next_task();
 800808e:	2175                	jal	800853a <os_sched_next_task>
 8008090:	842a                	mv	s0,a0
    if (rdy != current) {
 8008092:	02a48463          	beq	s1,a0,80080ba <os_mutex_release+0xca>
        resched = 1;
 8008096:	4485                	li	s1,1
    OS_EXIT_CRITICAL(sr);
 8008098:	854e                	mv	a0,s3
 800809a:	e8dfe0ef          	jal	ra,8006f26 <os_arch_restore_sr>
    if (resched) {
 800809e:	e085                	bnez	s1,80080be <os_mutex_release+0xce>
    ret = OS_OK;
 80080a0:	4501                	li	a0,0
    return ret;
 80080a2:	b759                	j	8008028 <os_mutex_release+0x38>
        current->t_prio = mu->mu_prio;
 80080a4:	00f485a3          	sb	a5,11(s1)
        os_sched_resort(current);
 80080a8:	8526                	mv	a0,s1
 80080aa:	21d9                	jal	8008570 <os_sched_resort>
 80080ac:	b75d                	j	8008052 <os_mutex_release+0x62>
        assert(rdy->t_obj);
 80080ae:	4681                	li	a3,0
 80080b0:	4601                	li	a2,0
 80080b2:	4581                	li	a1,0
 80080b4:	4501                	li	a0,0
 80080b6:	f1dfe0ef          	jal	ra,8006fd2 <__assert_func>
    resched = 0;
 80080ba:	4481                	li	s1,0
 80080bc:	bff1                	j	8008098 <os_mutex_release+0xa8>
        os_sched(rdy);
 80080be:	8522                	mv	a0,s0
 80080c0:	2141                	jal	8008540 <os_sched>
    ret = OS_OK;
 80080c2:	4501                	li	a0,0
 80080c4:	b795                	j	8008028 <os_mutex_release+0x38>
        ret = OS_NOT_STARTED;
 80080c6:	4525                	li	a0,9
 80080c8:	8082                	ret
        ret = OS_INVALID_PARM;
 80080ca:	450d                	li	a0,3
}
 80080cc:	8082                	ret
        ret = OS_BAD_MUTEX;
 80080ce:	4515                	li	a0,5
 80080d0:	bfa1                	j	8008028 <os_mutex_release+0x38>
 80080d2:	4515                	li	a0,5
 80080d4:	bf91                	j	8008028 <os_mutex_release+0x38>

080080d6 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
 80080d6:	200037b7          	lui	a5,0x20003
 80080da:	b3c7a783          	lw	a5,-1220(a5) # 20002b3c <g_os_started>
 80080de:	0e078d63          	beqz	a5,80081d8 <os_mutex_pend+0x102>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
 80080e2:	0e050d63          	beqz	a0,80081dc <os_mutex_pend+0x106>
{
 80080e6:	1101                	addi	sp,sp,-32
 80080e8:	ce06                	sw	ra,28(sp)
 80080ea:	cc22                	sw	s0,24(sp)
 80080ec:	ca26                	sw	s1,20(sp)
 80080ee:	c84a                	sw	s2,16(sp)
 80080f0:	c64e                	sw	s3,12(sp)
 80080f2:	892e                	mv	s2,a1
 80080f4:	84aa                	mv	s1,a0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
 80080f6:	e29fe0ef          	jal	ra,8006f1e <os_arch_save_sr>
 80080fa:	89aa                	mv	s3,a0

    /* Is this owned? */
    current = os_sched_get_current_task();
 80080fc:	2c9d                	jal	8008372 <os_sched_get_current_task>
 80080fe:	842a                	mv	s0,a0
    if (mu->mu_level == 0) {
 8008100:	0064d703          	lhu	a4,6(s1)
 8008104:	cb15                	beqz	a4,8008138 <os_mutex_pend+0x62>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
 8008106:	449c                	lw	a5,8(s1)
 8008108:	04a78a63          	beq	a5,a0,800815c <os_mutex_pend+0x86>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
 800810c:	06090063          	beqz	s2,800816c <os_mutex_pend+0x96>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
 8008110:	00b7c683          	lbu	a3,11(a5)
 8008114:	00b54703          	lbu	a4,11(a0)
 8008118:	04d76f63          	bltu	a4,a3,8008176 <os_mutex_pend+0xa0>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
 800811c:	408c                	lw	a1,0(s1)
 800811e:	c5b5                	beqz	a1,800818a <os_mutex_pend+0xb4>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 8008120:	87ae                	mv	a5,a1
    last = NULL;
 8008122:	4601                	li	a2,0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 8008124:	cfb1                	beqz	a5,8008180 <os_mutex_pend+0xaa>
            if (current->t_prio < entry->t_prio) {
 8008126:	00b44683          	lbu	a3,11(s0)
 800812a:	00b7c703          	lbu	a4,11(a5)
 800812e:	04e6e963          	bltu	a3,a4,8008180 <os_mutex_pend+0xaa>
                break;
            }
            last = entry;
 8008132:	863e                	mv	a2,a5
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
 8008134:	47fc                	lw	a5,76(a5)
 8008136:	b7fd                	j	8008124 <os_mutex_pend+0x4e>
        mu->mu_owner = current;
 8008138:	c488                	sw	a0,8(s1)
        mu->mu_prio  = current->t_prio;
 800813a:	00b54783          	lbu	a5,11(a0)
 800813e:	00f482a3          	sb	a5,5(s1)
        current->t_lockcnt++;
 8008142:	00e54783          	lbu	a5,14(a0)
 8008146:	0785                	addi	a5,a5,1
 8008148:	00f50723          	sb	a5,14(a0)
        mu->mu_level = 1;
 800814c:	4785                	li	a5,1
 800814e:	00f49323          	sh	a5,6(s1)
        OS_EXIT_CRITICAL(sr);
 8008152:	854e                	mv	a0,s3
 8008154:	dd3fe0ef          	jal	ra,8006f26 <os_arch_restore_sr>
        ret = OS_OK;
 8008158:	4501                	li	a0,0
        goto done;
 800815a:	a0b5                	j	80081c6 <os_mutex_pend+0xf0>
        ++mu->mu_level;
 800815c:	0705                	addi	a4,a4,1
 800815e:	00e49323          	sh	a4,6(s1)
        OS_EXIT_CRITICAL(sr);
 8008162:	854e                	mv	a0,s3
 8008164:	dc3fe0ef          	jal	ra,8006f26 <os_arch_restore_sr>
        ret = OS_OK;
 8008168:	4501                	li	a0,0
        goto done;
 800816a:	a8b1                	j	80081c6 <os_mutex_pend+0xf0>
        OS_EXIT_CRITICAL(sr);
 800816c:	854e                	mv	a0,s3
 800816e:	db9fe0ef          	jal	ra,8006f26 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
 8008172:	4519                	li	a0,6
        goto done;
 8008174:	a889                	j	80081c6 <os_mutex_pend+0xf0>
        mu->mu_owner->t_prio = current->t_prio;
 8008176:	00e785a3          	sb	a4,11(a5)
        os_sched_resort(mu->mu_owner);
 800817a:	4488                	lw	a0,8(s1)
 800817c:	2ed5                	jal	8008570 <os_sched_resort>
 800817e:	bf79                	j	800811c <os_mutex_pend+0x46>
        }
    }

    if (last) {
 8008180:	c609                	beqz	a2,800818a <os_mutex_pend+0xb4>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
 8008182:	467c                	lw	a5,76(a2)
 8008184:	c47c                	sw	a5,76(s0)
 8008186:	c660                	sw	s0,76(a2)
 8008188:	a019                	j	800818e <os_mutex_pend+0xb8>
    } else {
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
 800818a:	c46c                	sw	a1,76(s0)
 800818c:	c080                	sw	s0,0(s1)
    }

    /* Set mutex pointer in task */
    current->t_obj = mu;
 800818e:	cc44                	sw	s1,28(s0)
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
 8008190:	00d44783          	lbu	a5,13(s0)
 8008194:	0047e793          	ori	a5,a5,4
 8008198:	00f406a3          	sb	a5,13(s0)
    os_sched_sleep(current, timeout);
 800819c:	85ca                	mv	a1,s2
 800819e:	8522                	mv	a0,s0
 80081a0:	22dd                	jal	8008386 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
 80081a2:	854e                	mv	a0,s3
 80081a4:	d83fe0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    os_sched(NULL);
 80081a8:	4501                	li	a0,0
 80081aa:	2e59                	jal	8008540 <os_sched>

    OS_ENTER_CRITICAL(sr);
 80081ac:	d73fe0ef          	jal	ra,8006f1e <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
 80081b0:	00d44783          	lbu	a5,13(s0)
 80081b4:	9bed                	andi	a5,a5,-5
 80081b6:	00f406a3          	sb	a5,13(s0)
    OS_EXIT_CRITICAL(sr);
 80081ba:	d6dfe0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    /* If we are owner we did not time out. */
    if (mu->mu_owner == current) {
 80081be:	449c                	lw	a5,8(s1)
 80081c0:	00878a63          	beq	a5,s0,80081d4 <os_mutex_pend+0xfe>
        ret = OS_OK;
    } else {
        ret = OS_TIMEOUT;
 80081c4:	4519                	li	a0,6
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
 80081c6:	40f2                	lw	ra,28(sp)
 80081c8:	4462                	lw	s0,24(sp)
 80081ca:	44d2                	lw	s1,20(sp)
 80081cc:	4942                	lw	s2,16(sp)
 80081ce:	49b2                	lw	s3,12(sp)
 80081d0:	6105                	addi	sp,sp,32
 80081d2:	8082                	ret
        ret = OS_OK;
 80081d4:	4501                	li	a0,0
 80081d6:	bfc5                	j	80081c6 <os_mutex_pend+0xf0>
        ret = OS_NOT_STARTED;
 80081d8:	4525                	li	a0,9
 80081da:	8082                	ret
        ret = OS_INVALID_PARM;
 80081dc:	450d                	li	a0,3
}
 80081de:	8082                	ret

080081e0 <os_sanity_check_list_lock>:
static int
os_sanity_check_list_lock(void)
{
    int rc;

    if (!g_os_started) {
 80081e0:	200037b7          	lui	a5,0x20003
 80081e4:	b3c7a503          	lw	a0,-1220(a5) # 20002b3c <g_os_started>
 80081e8:	e111                	bnez	a0,80081ec <os_sanity_check_list_lock+0xc>
    }

    return (0);
err:
    return (rc);
}
 80081ea:	8082                	ret
{
 80081ec:	1141                	addi	sp,sp,-16
 80081ee:	c606                	sw	ra,12(sp)
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
 80081f0:	55fd                	li	a1,-1
 80081f2:	20003537          	lui	a0,0x20003
 80081f6:	ba050513          	addi	a0,a0,-1120 # 20002ba0 <g_os_sanity_check_mu>
 80081fa:	eddff0ef          	jal	ra,80080d6 <os_mutex_pend>
}
 80081fe:	40b2                	lw	ra,12(sp)
 8008200:	0141                	addi	sp,sp,16
 8008202:	8082                	ret

08008204 <os_sanity_check_list_unlock>:
static int
os_sanity_check_list_unlock(void)
{
    int rc;

    if (!g_os_started) {
 8008204:	200037b7          	lui	a5,0x20003
 8008208:	b3c7a503          	lw	a0,-1220(a5) # 20002b3c <g_os_started>
 800820c:	e111                	bnez	a0,8008210 <os_sanity_check_list_unlock+0xc>
    }

    return (0);
err:
    return (rc);
}
 800820e:	8082                	ret
{
 8008210:	1141                	addi	sp,sp,-16
 8008212:	c606                	sw	ra,12(sp)
    rc = os_mutex_release(&g_os_sanity_check_mu);
 8008214:	20003537          	lui	a0,0x20003
 8008218:	ba050513          	addi	a0,a0,-1120 # 20002ba0 <g_os_sanity_check_mu>
 800821c:	dd5ff0ef          	jal	ra,8007ff0 <os_mutex_release>
}
 8008220:	40b2                	lw	ra,12(sp)
 8008222:	0141                	addi	sp,sp,16
 8008224:	8082                	ret

08008226 <os_sanity_check_init>:
{
 8008226:	1141                	addi	sp,sp,-16
 8008228:	c606                	sw	ra,12(sp)
    memset(sc, 0, sizeof(*sc));
 800822a:	4651                	li	a2,20
 800822c:	4581                	li	a1,0
 800822e:	1a5000ef          	jal	ra,8008bd2 <memset>
}
 8008232:	4501                	li	a0,0
 8008234:	40b2                	lw	ra,12(sp)
 8008236:	0141                	addi	sp,sp,16
 8008238:	8082                	ret

0800823a <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
 800823a:	1141                	addi	sp,sp,-16
 800823c:	c606                	sw	ra,12(sp)
 800823e:	c422                	sw	s0,8(sp)
 8008240:	842a                	mv	s0,a0
    int rc;

    rc = os_sanity_check_list_lock();
 8008242:	f9fff0ef          	jal	ra,80081e0 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
 8008246:	c509                	beqz	a0,8008250 <os_sanity_check_register+0x16>
    }

    return (0);
err:
    return (rc);
}
 8008248:	40b2                	lw	ra,12(sp)
 800824a:	4422                	lw	s0,8(sp)
 800824c:	0141                	addi	sp,sp,16
 800824e:	8082                	ret
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
 8008250:	88c18793          	addi	a5,gp,-1908 # 200005ac <g_os_sanity_check_list>
 8008254:	4398                	lw	a4,0(a5)
 8008256:	c818                	sw	a4,16(s0)
 8008258:	c380                	sw	s0,0(a5)
    rc = os_sanity_check_list_unlock();
 800825a:	fabff0ef          	jal	ra,8008204 <os_sanity_check_list_unlock>
    if (rc != OS_OK) {
 800825e:	b7ed                	j	8008248 <os_sanity_check_register+0xe>

08008260 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
 8008260:	1141                	addi	sp,sp,-16
 8008262:	c606                	sw	ra,12(sp)
 8008264:	c422                	sw	s0,8(sp)
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
 8008266:	f7bff0ef          	jal	ra,80081e0 <os_sanity_check_list_lock>
    if (rc != 0) {
 800826a:	e501                	bnez	a0,8008272 <os_sanity_run+0x12>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 800826c:	88c1a403          	lw	s0,-1908(gp) # 200005ac <g_os_sanity_check_list>
 8008270:	a839                	j	800828e <os_sanity_run+0x2e>
        assert(0);
 8008272:	4681                	li	a3,0
 8008274:	4601                	li	a2,0
 8008276:	4581                	li	a1,0
 8008278:	4501                	li	a0,0
 800827a:	d59fe0ef          	jal	ra,8006fd2 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
 800827e:	2561                	jal	8008906 <os_time_get>
 8008280:	401c                	lw	a5,0(s0)
 8008282:	4058                	lw	a4,4(s0)
 8008284:	97ba                	add	a5,a5,a4
 8008286:	8d1d                	sub	a0,a0,a5
 8008288:	00a04d63          	bgtz	a0,80082a2 <os_sanity_run+0x42>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
 800828c:	4800                	lw	s0,16(s0)
 800828e:	c005                	beqz	s0,80082ae <os_sanity_run+0x4e>
        if (sc->sc_func) {
 8008290:	441c                	lw	a5,8(s0)
 8008292:	d7f5                	beqz	a5,800827e <os_sanity_run+0x1e>
            rc = sc->sc_func(sc, sc->sc_arg);
 8008294:	444c                	lw	a1,12(s0)
 8008296:	8522                	mv	a0,s0
 8008298:	9782                	jalr	a5
            if (rc == OS_OK) {
 800829a:	f175                	bnez	a0,800827e <os_sanity_run+0x1e>
                sc->sc_checkin_last = os_time_get();
 800829c:	25ad                	jal	8008906 <os_time_get>
 800829e:	c008                	sw	a0,0(s0)
                continue;
 80082a0:	b7f5                	j	800828c <os_sanity_run+0x2c>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
 80082a2:	4681                	li	a3,0
 80082a4:	4601                	li	a2,0
 80082a6:	4581                	li	a1,0
 80082a8:	4501                	li	a0,0
 80082aa:	d29fe0ef          	jal	ra,8006fd2 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
 80082ae:	f57ff0ef          	jal	ra,8008204 <os_sanity_check_list_unlock>
    if (rc != 0) {
 80082b2:	e509                	bnez	a0,80082bc <os_sanity_run+0x5c>
        assert(0);
    }
}
 80082b4:	40b2                	lw	ra,12(sp)
 80082b6:	4422                	lw	s0,8(sp)
 80082b8:	0141                	addi	sp,sp,16
 80082ba:	8082                	ret
        assert(0);
 80082bc:	4681                	li	a3,0
 80082be:	4601                	li	a2,0
 80082c0:	4581                	li	a1,0
 80082c2:	4501                	li	a0,0
 80082c4:	d0ffe0ef          	jal	ra,8006fd2 <__assert_func>

080082c8 <os_sanity_init>:

int
os_sanity_init(void)
{
 80082c8:	1141                	addi	sp,sp,-16
 80082ca:	c606                	sw	ra,12(sp)
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
 80082cc:	20003537          	lui	a0,0x20003
 80082d0:	ba050513          	addi	a0,a0,-1120 # 20002ba0 <g_os_sanity_check_mu>
 80082d4:	d03ff0ef          	jal	ra,8007fd6 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
 80082d8:	40b2                	lw	ra,12(sp)
 80082da:	0141                	addi	sp,sp,16
 80082dc:	8082                	ret

080082de <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
 80082de:	00c54703          	lbu	a4,12(a0)
 80082e2:	4785                	li	a5,1
 80082e4:	00f70463          	beq	a4,a5,80082ec <os_sched_insert+0xe>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
 80082e8:	4509                	li	a0,2
}
 80082ea:	8082                	ret
{
 80082ec:	1141                	addi	sp,sp,-16
 80082ee:	c606                	sw	ra,12(sp)
 80082f0:	c422                	sw	s0,8(sp)
 80082f2:	842a                	mv	s0,a0
    OS_ENTER_CRITICAL(sr);
 80082f4:	c2bfe0ef          	jal	ra,8006f1e <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 80082f8:	8201a783          	lw	a5,-2016(gp) # 20000540 <g_os_run_list>
 80082fc:	cb89                	beqz	a5,800830e <os_sched_insert+0x30>
        if (t->t_prio < entry->t_prio) {
 80082fe:	00b44683          	lbu	a3,11(s0)
 8008302:	00b7c703          	lbu	a4,11(a5)
 8008306:	00e6e463          	bltu	a3,a4,800830e <os_sched_insert+0x30>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
 800830a:	43fc                	lw	a5,68(a5)
 800830c:	bfc5                	j	80082fc <os_sched_insert+0x1e>
    if (entry) {
 800830e:	c385                	beqz	a5,800832e <os_sched_insert+0x50>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
 8008310:	47b8                	lw	a4,72(a5)
 8008312:	c438                	sw	a4,72(s0)
 8008314:	c07c                	sw	a5,68(s0)
 8008316:	47b8                	lw	a4,72(a5)
 8008318:	c300                	sw	s0,0(a4)
 800831a:	04440413          	addi	s0,s0,68
 800831e:	c7a0                	sw	s0,72(a5)
    OS_EXIT_CRITICAL(sr);
 8008320:	c07fe0ef          	jal	ra,8006f26 <os_arch_restore_sr>
    return (0);
 8008324:	4501                	li	a0,0
}
 8008326:	40b2                	lw	ra,12(sp)
 8008328:	4422                	lw	s0,8(sp)
 800832a:	0141                	addi	sp,sp,16
 800832c:	8082                	ret
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
 800832e:	04042223          	sw	zero,68(s0)
 8008332:	82018793          	addi	a5,gp,-2016 # 20000540 <g_os_run_list>
 8008336:	43d8                	lw	a4,4(a5)
 8008338:	c438                	sw	a4,72(s0)
 800833a:	c300                	sw	s0,0(a4)
 800833c:	04440413          	addi	s0,s0,68
 8008340:	c3c0                	sw	s0,4(a5)
 8008342:	bff9                	j	8008320 <os_sched_insert+0x42>

08008344 <os_sched_ctx_sw_hook>:
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
 8008344:	5d5c                	lw	a5,60(a0)
 8008346:	0785                	addi	a5,a5,1
 8008348:	dd5c                	sw	a5,60(a0)
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
 800834a:	200037b7          	lui	a5,0x20003
 800834e:	bac7a583          	lw	a1,-1108(a5) # 20002bac <g_current_task>
 8008352:	200037b7          	lui	a5,0x20003
 8008356:	bc07a603          	lw	a2,-1088(a5) # 20002bc0 <g_os_time>
 800835a:	200036b7          	lui	a3,0x20003
 800835e:	bb06a783          	lw	a5,-1104(a3) # 20002bb0 <g_os_last_ctx_sw_time>
 8008362:	40f60733          	sub	a4,a2,a5
 8008366:	5d9c                	lw	a5,56(a1)
 8008368:	97ba                	add	a5,a5,a4
 800836a:	dd9c                	sw	a5,56(a1)
    g_os_last_ctx_sw_time = g_os_time;
 800836c:	bac6a823          	sw	a2,-1104(a3)
}
 8008370:	8082                	ret

08008372 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
 8008372:	200037b7          	lui	a5,0x20003
 8008376:	bac7a503          	lw	a0,-1108(a5) # 20002bac <g_current_task>
 800837a:	8082                	ret

0800837c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
 800837c:	200037b7          	lui	a5,0x20003
 8008380:	baa7a623          	sw	a0,-1108(a5) # 20002bac <g_current_task>
}
 8008384:	8082                	ret

08008386 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
 8008386:	1141                	addi	sp,sp,-16
 8008388:	c606                	sw	ra,12(sp)
 800838a:	c422                	sw	s0,8(sp)
 800838c:	c226                	sw	s1,4(sp)
 800838e:	842a                	mv	s0,a0
 8008390:	84ae                	mv	s1,a1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8008392:	417c                	lw	a5,68(a0)
 8008394:	c395                	beqz	a5,80083b8 <os_sched_sleep+0x32>
 8008396:	4538                	lw	a4,72(a0)
 8008398:	c7b8                	sw	a4,72(a5)
 800839a:	443c                	lw	a5,72(s0)
 800839c:	4078                	lw	a4,68(s0)
 800839e:	c398                	sw	a4,0(a5)
    t->t_state = OS_TASK_SLEEP;
 80083a0:	4789                	li	a5,2
 80083a2:	00f40623          	sb	a5,12(s0)
    t->t_next_wakeup = os_time_get() + nticks;
 80083a6:	2385                	jal	8008906 <os_time_get>
 80083a8:	9526                	add	a0,a0,s1
 80083aa:	d848                	sw	a0,52(s0)
    if (nticks == OS_TIMEOUT_NEVER) {
 80083ac:	57fd                	li	a5,-1
 80083ae:	00f48a63          	beq	s1,a5,80083c2 <os_sched_sleep+0x3c>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 80083b2:	8281a783          	lw	a5,-2008(gp) # 20000548 <g_os_sleep_list>
 80083b6:	a805                	j	80083e6 <os_sched_sleep+0x60>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 80083b8:	4538                	lw	a4,72(a0)
 80083ba:	82018793          	addi	a5,gp,-2016 # 20000540 <g_os_run_list>
 80083be:	c3d8                	sw	a4,4(a5)
 80083c0:	bfe9                	j	800839a <os_sched_sleep+0x14>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
 80083c2:	00d44783          	lbu	a5,13(s0)
 80083c6:	0017e793          	ori	a5,a5,1
 80083ca:	00f406a3          	sb	a5,13(s0)
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 80083ce:	04042223          	sw	zero,68(s0)
 80083d2:	82818793          	addi	a5,gp,-2008 # 20000548 <g_os_sleep_list>
 80083d6:	43d8                	lw	a4,4(a5)
 80083d8:	c438                	sw	a4,72(s0)
 80083da:	c300                	sw	s0,0(a4)
 80083dc:	04440413          	addi	s0,s0,68
 80083e0:	c3c0                	sw	s0,4(a5)
 80083e2:	a025                	j	800840a <os_sched_sleep+0x84>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
 80083e4:	43fc                	lw	a5,68(a5)
 80083e6:	cb89                	beqz	a5,80083f8 <os_sched_sleep+0x72>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 80083e8:	00d7c703          	lbu	a4,13(a5)
 80083ec:	8b05                	andi	a4,a4,1
 80083ee:	e709                	bnez	a4,80083f8 <os_sched_sleep+0x72>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
 80083f0:	5bd8                	lw	a4,52(a5)
 80083f2:	8f09                	sub	a4,a4,a0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
 80083f4:	fee058e3          	blez	a4,80083e4 <os_sched_sleep+0x5e>
                break;
            }
        }
        if (entry) {
 80083f8:	cf99                	beqz	a5,8008416 <os_sched_sleep+0x90>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
 80083fa:	47b8                	lw	a4,72(a5)
 80083fc:	c438                	sw	a4,72(s0)
 80083fe:	c07c                	sw	a5,68(s0)
 8008400:	47b8                	lw	a4,72(a5)
 8008402:	c300                	sw	s0,0(a4)
 8008404:	04440413          	addi	s0,s0,68
 8008408:	c7a0                	sw	s0,72(a5)
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
 800840a:	4501                	li	a0,0
 800840c:	40b2                	lw	ra,12(sp)
 800840e:	4422                	lw	s0,8(sp)
 8008410:	4492                	lw	s1,4(sp)
 8008412:	0141                	addi	sp,sp,16
 8008414:	8082                	ret
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
 8008416:	04042223          	sw	zero,68(s0)
 800841a:	82818793          	addi	a5,gp,-2008 # 20000548 <g_os_sleep_list>
 800841e:	43d8                	lw	a4,4(a5)
 8008420:	c438                	sw	a4,72(s0)
 8008422:	c300                	sw	s0,0(a4)
 8008424:	04440413          	addi	s0,s0,68
 8008428:	c3c0                	sw	s0,4(a5)
 800842a:	b7c5                	j	800840a <os_sched_sleep+0x84>

0800842c <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
 800842c:	1141                	addi	sp,sp,-16
 800842e:	c606                	sw	ra,12(sp)
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
 8008430:	00c54703          	lbu	a4,12(a0)
 8008434:	4789                	li	a5,2
 8008436:	00f71b63          	bne	a4,a5,800844c <os_sched_wakeup+0x20>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
 800843a:	4d5c                	lw	a5,28(a0)
 800843c:	cf95                	beqz	a5,8008478 <os_sched_wakeup+0x4c>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
 800843e:	4398                	lw	a4,0(a5)
 8008440:	cf01                	beqz	a4,8008458 <os_sched_wakeup+0x2c>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 8008442:	02a71263          	bne	a4,a0,8008466 <os_sched_wakeup+0x3a>
 8008446:	4778                	lw	a4,76(a4)
 8008448:	c398                	sw	a4,0(a5)
 800844a:	a01d                	j	8008470 <os_sched_wakeup+0x44>
    assert(t->t_state == OS_TASK_SLEEP);
 800844c:	4681                	li	a3,0
 800844e:	4601                	li	a2,0
 8008450:	4581                	li	a1,0
 8008452:	4501                	li	a0,0
 8008454:	b7ffe0ef          	jal	ra,8006fd2 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
 8008458:	4681                	li	a3,0
 800845a:	4601                	li	a2,0
 800845c:	4581                	li	a1,0
 800845e:	4501                	li	a0,0
 8008460:	b73fe0ef          	jal	ra,8006fd2 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
 8008464:	873e                	mv	a4,a5
 8008466:	477c                	lw	a5,76(a4)
 8008468:	fea79ee3          	bne	a5,a0,8008464 <os_sched_wakeup+0x38>
 800846c:	47fc                	lw	a5,76(a5)
 800846e:	c77c                	sw	a5,76(a4)
        SLIST_NEXT(t, t_obj_list) = NULL;
 8008470:	04052623          	sw	zero,76(a0)
        t->t_obj = NULL;
 8008474:	00052e23          	sw	zero,28(a0)
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
 8008478:	4785                	li	a5,1
 800847a:	00f50623          	sb	a5,12(a0)
    t->t_next_wakeup = 0;
 800847e:	02052a23          	sw	zero,52(a0)
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
 8008482:	00d54783          	lbu	a5,13(a0)
 8008486:	9bf9                	andi	a5,a5,-2
 8008488:	00f506a3          	sb	a5,13(a0)
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 800848c:	417c                	lw	a5,68(a0)
 800848e:	cf81                	beqz	a5,80084a6 <os_sched_wakeup+0x7a>
 8008490:	4538                	lw	a4,72(a0)
 8008492:	c7b8                	sw	a4,72(a5)
 8008494:	453c                	lw	a5,72(a0)
 8008496:	4178                	lw	a4,68(a0)
 8008498:	c398                	sw	a4,0(a5)
    os_sched_insert(t);
 800849a:	e45ff0ef          	jal	ra,80082de <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
 800849e:	4501                	li	a0,0
 80084a0:	40b2                	lw	ra,12(sp)
 80084a2:	0141                	addi	sp,sp,16
 80084a4:	8082                	ret
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
 80084a6:	4538                	lw	a4,72(a0)
 80084a8:	82818793          	addi	a5,gp,-2008 # 20000548 <g_os_sleep_list>
 80084ac:	c3d8                	sw	a4,4(a5)
 80084ae:	b7dd                	j	8008494 <os_sched_wakeup+0x68>

080084b0 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
 80084b0:	1141                	addi	sp,sp,-16
 80084b2:	c606                	sw	ra,12(sp)
 80084b4:	c422                	sw	s0,8(sp)
 80084b6:	c226                	sw	s1,4(sp)
 80084b8:	c04a                	sw	s2,0(sp)
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
 80084ba:	21b1                	jal	8008906 <os_time_get>
 80084bc:	84aa                	mv	s1,a0

    OS_ENTER_CRITICAL(sr);
 80084be:	a61fe0ef          	jal	ra,8006f1e <os_arch_save_sr>
 80084c2:	892a                	mv	s2,a0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
 80084c4:	8281a503          	lw	a0,-2008(gp) # 20000548 <g_os_sleep_list>
    while (t) {
 80084c8:	cd19                	beqz	a0,80084e6 <os_sched_os_timer_exp+0x36>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
 80084ca:	00d54783          	lbu	a5,13(a0)
 80084ce:	8b85                	andi	a5,a5,1
 80084d0:	eb99                	bnez	a5,80084e6 <os_sched_os_timer_exp+0x36>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
 80084d2:	4160                	lw	s0,68(a0)
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
 80084d4:	595c                	lw	a5,52(a0)
 80084d6:	40f487b3          	sub	a5,s1,a5
 80084da:	0007c663          	bltz	a5,80084e6 <os_sched_os_timer_exp+0x36>
            os_sched_wakeup(t);
 80084de:	f4fff0ef          	jal	ra,800842c <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
 80084e2:	8522                	mv	a0,s0
 80084e4:	b7d5                	j	80084c8 <os_sched_os_timer_exp+0x18>
    }

    OS_EXIT_CRITICAL(sr);
 80084e6:	854a                	mv	a0,s2
 80084e8:	a3ffe0ef          	jal	ra,8006f26 <os_arch_restore_sr>
}
 80084ec:	40b2                	lw	ra,12(sp)
 80084ee:	4422                	lw	s0,8(sp)
 80084f0:	4492                	lw	s1,4(sp)
 80084f2:	4902                	lw	s2,0(sp)
 80084f4:	0141                	addi	sp,sp,16
 80084f6:	8082                	ret

080084f8 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
 80084f8:	1141                	addi	sp,sp,-16
 80084fa:	c606                	sw	ra,12(sp)
 80084fc:	c422                	sw	s0,8(sp)
 80084fe:	842a                	mv	s0,a0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
 8008500:	a2ffe0ef          	jal	ra,8006f2e <os_arch_in_critical>
 8008504:	c105                	beqz	a0,8008524 <os_sched_wakeup_ticks+0x2c>

    t = TAILQ_FIRST(&g_os_sleep_list);
 8008506:	8281a783          	lw	a5,-2008(gp) # 20000548 <g_os_sleep_list>
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
 800850a:	c785                	beqz	a5,8008532 <os_sched_wakeup_ticks+0x3a>
 800850c:	00d7c703          	lbu	a4,13(a5)
 8008510:	8b05                	andi	a4,a4,1
 8008512:	e315                	bnez	a4,8008536 <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
 8008514:	5bc8                	lw	a0,52(a5)
 8008516:	8d01                	sub	a0,a0,s0
 8008518:	00054b63          	bltz	a0,800852e <os_sched_wakeup_ticks+0x36>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
 800851c:	40b2                	lw	ra,12(sp)
 800851e:	4422                	lw	s0,8(sp)
 8008520:	0141                	addi	sp,sp,16
 8008522:	8082                	ret
    OS_ASSERT_CRITICAL();
 8008524:	4681                	li	a3,0
 8008526:	4601                	li	a2,0
 8008528:	4581                	li	a1,0
 800852a:	aa9fe0ef          	jal	ra,8006fd2 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
 800852e:	4501                	li	a0,0
 8008530:	b7f5                	j	800851c <os_sched_wakeup_ticks+0x24>
        rt = OS_TIMEOUT_NEVER;
 8008532:	557d                	li	a0,-1
 8008534:	b7e5                	j	800851c <os_sched_wakeup_ticks+0x24>
 8008536:	557d                	li	a0,-1
    return (rt);
 8008538:	b7d5                	j	800851c <os_sched_wakeup_ticks+0x24>

0800853a <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
 800853a:	8201a503          	lw	a0,-2016(gp) # 20000540 <g_os_run_list>
 800853e:	8082                	ret

08008540 <os_sched>:
{
 8008540:	1141                	addi	sp,sp,-16
 8008542:	c606                	sw	ra,12(sp)
 8008544:	c422                	sw	s0,8(sp)
 8008546:	c226                	sw	s1,4(sp)
 8008548:	842a                	mv	s0,a0
    OS_ENTER_CRITICAL(sr);
 800854a:	9d5fe0ef          	jal	ra,8006f1e <os_arch_save_sr>
 800854e:	84aa                	mv	s1,a0
    if (!next_t) {
 8008550:	cc01                	beqz	s0,8008568 <os_sched+0x28>
    os_arch_ctx_sw(next_t);
 8008552:	8522                	mv	a0,s0
 8008554:	9a3fe0ef          	jal	ra,8006ef6 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
 8008558:	8526                	mv	a0,s1
 800855a:	9cdfe0ef          	jal	ra,8006f26 <os_arch_restore_sr>
}
 800855e:	40b2                	lw	ra,12(sp)
 8008560:	4422                	lw	s0,8(sp)
 8008562:	4492                	lw	s1,4(sp)
 8008564:	0141                	addi	sp,sp,16
 8008566:	8082                	ret
        next_t = os_sched_next_task();
 8008568:	fd3ff0ef          	jal	ra,800853a <os_sched_next_task>
 800856c:	842a                	mv	s0,a0
 800856e:	b7d5                	j	8008552 <os_sched+0x12>

08008570 <os_sched_resort>:
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    if (t->t_state == OS_TASK_READY) {
 8008570:	00c54703          	lbu	a4,12(a0)
 8008574:	4785                	li	a5,1
 8008576:	00f70363          	beq	a4,a5,800857c <os_sched_resort+0xc>
 800857a:	8082                	ret
{
 800857c:	1141                	addi	sp,sp,-16
 800857e:	c606                	sw	ra,12(sp)
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8008580:	417c                	lw	a5,68(a0)
 8008582:	cb99                	beqz	a5,8008598 <os_sched_resort+0x28>
 8008584:	4538                	lw	a4,72(a0)
 8008586:	c7b8                	sw	a4,72(a5)
 8008588:	453c                	lw	a5,72(a0)
 800858a:	4178                	lw	a4,68(a0)
 800858c:	c398                	sw	a4,0(a5)
        os_sched_insert(t);
 800858e:	d51ff0ef          	jal	ra,80082de <os_sched_insert>
    }
}
 8008592:	40b2                	lw	ra,12(sp)
 8008594:	0141                	addi	sp,sp,16
 8008596:	8082                	ret
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
 8008598:	4538                	lw	a4,72(a0)
 800859a:	82018793          	addi	a5,gp,-2016 # 20000540 <g_os_run_list>
 800859e:	c3d8                	sw	a4,4(a5)
 80085a0:	b7e5                	j	8008588 <os_sched_resort+0x18>

080085a2 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
 80085a2:	c519                	beqz	a0,80085b0 <os_sem_init+0xe>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
 80085a4:	00b51323          	sh	a1,6(a0)
    SLIST_FIRST(&sem->sem_head) = NULL;
 80085a8:	00052023          	sw	zero,0(a0)

    ret = OS_OK;
 80085ac:	4501                	li	a0,0
 80085ae:	8082                	ret
        ret = OS_INVALID_PARM;
 80085b0:	450d                	li	a0,3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
 80085b2:	8082                	ret

080085b4 <os_sem_release>:
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
 80085b4:	200037b7          	lui	a5,0x20003
 80085b8:	b3c7a783          	lw	a5,-1220(a5) # 20002b3c <g_os_started>
 80085bc:	cbb5                	beqz	a5,8008630 <os_sem_release+0x7c>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 80085be:	c93d                	beqz	a0,8008634 <os_sem_release+0x80>
{
 80085c0:	1101                	addi	sp,sp,-32
 80085c2:	ce06                	sw	ra,28(sp)
 80085c4:	cc22                	sw	s0,24(sp)
 80085c6:	ca26                	sw	s1,20(sp)
 80085c8:	c84a                	sw	s2,16(sp)
 80085ca:	c64e                	sw	s3,12(sp)
 80085cc:	842a                	mv	s0,a0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
 80085ce:	da5ff0ef          	jal	ra,8008372 <os_sched_get_current_task>
 80085d2:	89aa                	mv	s3,a0

    OS_ENTER_CRITICAL(sr);
 80085d4:	94bfe0ef          	jal	ra,8006f1e <os_arch_save_sr>
 80085d8:	892a                	mv	s2,a0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
 80085da:	4004                	lw	s1,0(s0)
    if (rdy) {
 80085dc:	c08d                	beqz	s1,80085fe <os_sem_release+0x4a>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 80085de:	00d4c783          	lbu	a5,13(s1)
 80085e2:	9bf5                	andi	a5,a5,-3
 80085e4:	00f486a3          	sb	a5,13(s1)
        os_sched_wakeup(rdy);
 80085e8:	8526                	mv	a0,s1
 80085ea:	e43ff0ef          	jal	ra,800842c <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
 80085ee:	00b9c703          	lbu	a4,11(s3)
 80085f2:	00b4c783          	lbu	a5,11(s1)
 80085f6:	02e7e663          	bltu	a5,a4,8008622 <os_sem_release+0x6e>
    resched = 0;
 80085fa:	4401                	li	s0,0
 80085fc:	a039                	j	800860a <os_sem_release+0x56>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
 80085fe:	00645783          	lhu	a5,6(s0)
 8008602:	0785                	addi	a5,a5,1
 8008604:	00f41323          	sh	a5,6(s0)
    resched = 0;
 8008608:	4401                	li	s0,0
    }

    OS_EXIT_CRITICAL(sr);
 800860a:	854a                	mv	a0,s2
 800860c:	91bfe0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
 8008610:	e819                	bnez	s0,8008626 <os_sem_release+0x72>
        os_sched(rdy);
    }

    ret = OS_OK;
 8008612:	4501                	li	a0,0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
 8008614:	40f2                	lw	ra,28(sp)
 8008616:	4462                	lw	s0,24(sp)
 8008618:	44d2                	lw	s1,20(sp)
 800861a:	4942                	lw	s2,16(sp)
 800861c:	49b2                	lw	s3,12(sp)
 800861e:	6105                	addi	sp,sp,32
 8008620:	8082                	ret
            resched = 1;
 8008622:	4405                	li	s0,1
 8008624:	b7dd                	j	800860a <os_sem_release+0x56>
        os_sched(rdy);
 8008626:	8526                	mv	a0,s1
 8008628:	f19ff0ef          	jal	ra,8008540 <os_sched>
    ret = OS_OK;
 800862c:	4501                	li	a0,0
 800862e:	b7dd                	j	8008614 <os_sem_release+0x60>
        ret = OS_NOT_STARTED;
 8008630:	4525                	li	a0,9
 8008632:	8082                	ret
        ret = OS_INVALID_PARM;
 8008634:	450d                	li	a0,3
}
 8008636:	8082                	ret

08008638 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
 8008638:	1101                	addi	sp,sp,-32
 800863a:	ce06                	sw	ra,28(sp)
 800863c:	cc22                	sw	s0,24(sp)
 800863e:	ca26                	sw	s1,20(sp)
 8008640:	c84a                	sw	s2,16(sp)
 8008642:	c64e                	sw	s3,12(sp)
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
 8008644:	200037b7          	lui	a5,0x20003
 8008648:	b3c7a783          	lw	a5,-1220(a5) # 20002b3c <g_os_started>
 800864c:	cbdd                	beqz	a5,8008702 <os_sem_pend+0xca>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
 800864e:	cd45                	beqz	a0,8008706 <os_sem_pend+0xce>
 8008650:	892e                	mv	s2,a1
 8008652:	842a                	mv	s0,a0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
 8008654:	d1fff0ef          	jal	ra,8008372 <os_sched_get_current_task>
 8008658:	84aa                	mv	s1,a0

    OS_ENTER_CRITICAL(sr);
 800865a:	8c5fe0ef          	jal	ra,8006f1e <os_arch_save_sr>
 800865e:	89aa                	mv	s3,a0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
 8008660:	00645783          	lhu	a5,6(s0)
 8008664:	c39d                	beqz	a5,800868a <os_sem_pend+0x52>
        sem->sem_tokens--;
 8008666:	17fd                	addi	a5,a5,-1
 8008668:	00f41323          	sh	a5,6(s0)
        ret = OS_OK;
 800866c:	4401                	li	s0,0
    sched = 0;
 800866e:	4901                	li	s2,0
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
 8008670:	854e                	mv	a0,s3
 8008672:	8b5fe0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    if (sched) {
 8008676:	06091263          	bnez	s2,80086da <os_sem_pend+0xa2>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
 800867a:	8522                	mv	a0,s0
 800867c:	40f2                	lw	ra,28(sp)
 800867e:	4462                	lw	s0,24(sp)
 8008680:	44d2                	lw	s1,20(sp)
 8008682:	4942                	lw	s2,16(sp)
 8008684:	49b2                	lw	s3,12(sp)
 8008686:	6105                	addi	sp,sp,32
 8008688:	8082                	ret
    } else if (timeout == 0) {
 800868a:	04090563          	beqz	s2,80086d4 <os_sem_pend+0x9c>
        current->t_obj = sem;
 800868e:	ccc0                	sw	s0,28(s1)
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
 8008690:	00d4c783          	lbu	a5,13(s1)
 8008694:	0027e793          	ori	a5,a5,2
 8008698:	00f486a3          	sb	a5,13(s1)
        if (!SLIST_EMPTY(&sem->sem_head)) {
 800869c:	400c                	lw	a1,0(s0)
 800869e:	c195                	beqz	a1,80086c2 <os_sem_pend+0x8a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 80086a0:	87ae                	mv	a5,a1
        last = NULL;
 80086a2:	4601                	li	a2,0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 80086a4:	cb91                	beqz	a5,80086b8 <os_sem_pend+0x80>
                if (current->t_prio < entry->t_prio) {
 80086a6:	00b4c683          	lbu	a3,11(s1)
 80086aa:	00b7c703          	lbu	a4,11(a5)
 80086ae:	00e6e563          	bltu	a3,a4,80086b8 <os_sem_pend+0x80>
                last = entry;
 80086b2:	863e                	mv	a2,a5
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
 80086b4:	47fc                	lw	a5,76(a5)
 80086b6:	b7fd                	j	80086a4 <os_sem_pend+0x6c>
        if (last) {
 80086b8:	c609                	beqz	a2,80086c2 <os_sem_pend+0x8a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
 80086ba:	467c                	lw	a5,76(a2)
 80086bc:	c4fc                	sw	a5,76(s1)
 80086be:	c664                	sw	s1,76(a2)
 80086c0:	a019                	j	80086c6 <os_sem_pend+0x8e>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
 80086c2:	c4ec                	sw	a1,76(s1)
 80086c4:	c004                	sw	s1,0(s0)
        os_sched_sleep(current, timeout);
 80086c6:	85ca                	mv	a1,s2
 80086c8:	8526                	mv	a0,s1
 80086ca:	cbdff0ef          	jal	ra,8008386 <os_sched_sleep>
        ret = OS_OK;
 80086ce:	4401                	li	s0,0
        sched = 1;
 80086d0:	4905                	li	s2,1
 80086d2:	bf79                	j	8008670 <os_sem_pend+0x38>
        ret = OS_TIMEOUT;
 80086d4:	4419                	li	s0,6
    sched = 0;
 80086d6:	4901                	li	s2,0
 80086d8:	bf61                	j	8008670 <os_sem_pend+0x38>
        os_sched(NULL);
 80086da:	4501                	li	a0,0
 80086dc:	e65ff0ef          	jal	ra,8008540 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
 80086e0:	00d4c783          	lbu	a5,13(s1)
 80086e4:	8b89                	andi	a5,a5,2
 80086e6:	e399                	bnez	a5,80086ec <os_sem_pend+0xb4>
            ret = OS_OK;
 80086e8:	4401                	li	s0,0
    return ret;
 80086ea:	bf41                	j	800867a <os_sem_pend+0x42>
            OS_ENTER_CRITICAL(sr);
 80086ec:	833fe0ef          	jal	ra,8006f1e <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
 80086f0:	00d4c783          	lbu	a5,13(s1)
 80086f4:	9bf5                	andi	a5,a5,-3
 80086f6:	00f486a3          	sb	a5,13(s1)
            OS_EXIT_CRITICAL(sr);
 80086fa:	82dfe0ef          	jal	ra,8006f26 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
 80086fe:	4419                	li	s0,6
 8008700:	bfad                	j	800867a <os_sem_pend+0x42>
        ret = OS_NOT_STARTED;
 8008702:	4425                	li	s0,9
 8008704:	bf9d                	j	800867a <os_sem_pend+0x42>
        ret = OS_INVALID_PARM;
 8008706:	440d                	li	s0,3
 8008708:	bf8d                	j	800867a <os_sem_pend+0x42>

0800870a <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
 800870a:	4781                	li	a5,0
 800870c:	00b7dc63          	bge	a5,a1,8008724 <_clear_stack+0x1a>
        stack_bottom[i] = OS_STACK_PATTERN;
 8008710:	00279713          	slli	a4,a5,0x2
 8008714:	972a                	add	a4,a4,a0
 8008716:	deadc6b7          	lui	a3,0xdeadc
 800871a:	eef68693          	addi	a3,a3,-273 # deadbeef <_sp+0xbead6eef>
 800871e:	c314                	sw	a3,0(a4)
    for (i = 0; i < size; i++) {
 8008720:	0785                	addi	a5,a5,1
 8008722:	b7ed                	j	800870c <_clear_stack+0x2>
    }
}
 8008724:	8082                	ret

08008726 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
 8008726:	7179                	addi	sp,sp,-48
 8008728:	d606                	sw	ra,44(sp)
 800872a:	d422                	sw	s0,40(sp)
 800872c:	d226                	sw	s1,36(sp)
 800872e:	d04a                	sw	s2,32(sp)
 8008730:	ce4e                	sw	s3,28(sp)
 8008732:	cc52                	sw	s4,24(sp)
 8008734:	ca56                	sw	s5,20(sp)
 8008736:	c85a                	sw	s6,16(sp)
 8008738:	c65e                	sw	s7,12(sp)
 800873a:	842a                	mv	s0,a0
 800873c:	8a2e                	mv	s4,a1
 800873e:	8bb2                	mv	s7,a2
 8008740:	84b6                	mv	s1,a3
 8008742:	8b3a                	mv	s6,a4
 8008744:	8abe                	mv	s5,a5
 8008746:	8942                	mv	s2,a6
 8008748:	89c6                	mv	s3,a7
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
 800874a:	05000613          	li	a2,80
 800874e:	4581                	li	a1,0
 8008750:	2149                	jal	8008bd2 <memset>

    t->t_func = func;
 8008752:	01742a23          	sw	s7,20(s0)
    t->t_arg = arg;
 8008756:	cc04                	sw	s1,24(s0)
    OS_ENTER_CRITICAL(sr);
 8008758:	fc6fe0ef          	jal	ra,8006f1e <os_arch_save_sr>
    rc = g_task_id;
 800875c:	200037b7          	lui	a5,0x20003
 8008760:	bbc7c483          	lbu	s1,-1092(a5) # 20002bbc <g_task_id>
    g_task_id++;
 8008764:	00148713          	addi	a4,s1,1
 8008768:	bae78e23          	sb	a4,-1092(a5)
    OS_EXIT_CRITICAL(sr);
 800876c:	fbafe0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
 8008770:	00940523          	sb	s1,10(s0)
    t->t_prio = prio;
 8008774:	016405a3          	sb	s6,11(s0)

    t->t_state = OS_TASK_READY;
 8008778:	4785                	li	a5,1
 800877a:	00f40623          	sb	a5,12(s0)
    t->t_name = name;
 800877e:	01442823          	sw	s4,16(s0)
    t->t_next_wakeup = 0;
 8008782:	02042a23          	sw	zero,52(s0)

    rc = os_sanity_check_init(&t->t_sanity_check);
 8008786:	02040a13          	addi	s4,s0,32
 800878a:	8552                	mv	a0,s4
 800878c:	a9bff0ef          	jal	ra,8008226 <os_sanity_check_init>
 8008790:	84aa                	mv	s1,a0
    if (rc != OS_OK) {
 8008792:	ed2d                	bnez	a0,800880c <os_task_init+0xe6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
 8008794:	57fd                	li	a5,-1
 8008796:	00fa8963          	beq	s5,a5,80087a8 <os_task_init+0x82>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
 800879a:	03542223          	sw	s5,36(s0)

        rc = os_sanity_check_register(sc);
 800879e:	8552                	mv	a0,s4
 80087a0:	a9bff0ef          	jal	ra,800823a <os_sanity_check_register>
 80087a4:	84aa                	mv	s1,a0
        if (rc != OS_OK) {
 80087a6:	e13d                	bnez	a0,800880c <os_task_init+0xe6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
 80087a8:	85ce                	mv	a1,s3
 80087aa:	854a                	mv	a0,s2
 80087ac:	f5fff0ef          	jal	ra,800870a <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
 80087b0:	00299593          	slli	a1,s3,0x2
 80087b4:	95ca                	add	a1,a1,s2
 80087b6:	c04c                	sw	a1,4(s0)
    t->t_stacksize = stack_size;
 80087b8:	01341423          	sh	s3,8(s0)
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
 80087bc:	864e                	mv	a2,s3
 80087be:	8522                	mv	a0,s0
 80087c0:	f7afe0ef          	jal	ra,8006f3a <os_arch_task_stack_init>
 80087c4:	c008                	sw	a0,0(s0)
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 80087c6:	200037b7          	lui	a5,0x20003
 80087ca:	bb47a783          	lw	a5,-1100(a5) # 20002bb4 <g_os_task_list>
 80087ce:	cf99                	beqz	a5,80087ec <os_task_init+0xc6>
        assert(t->t_prio != task->t_prio);
 80087d0:	00b44683          	lbu	a3,11(s0)
 80087d4:	00b7c703          	lbu	a4,11(a5)
 80087d8:	00e68463          	beq	a3,a4,80087e0 <os_task_init+0xba>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
 80087dc:	43bc                	lw	a5,64(a5)
 80087de:	bfc5                	j	80087ce <os_task_init+0xa8>
        assert(t->t_prio != task->t_prio);
 80087e0:	4681                	li	a3,0
 80087e2:	4601                	li	a2,0
 80087e4:	4581                	li	a1,0
 80087e6:	4501                	li	a0,0
 80087e8:	feafe0ef          	jal	ra,8006fd2 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
 80087ec:	04042023          	sw	zero,64(s0)
 80087f0:	200037b7          	lui	a5,0x20003
 80087f4:	bb478793          	addi	a5,a5,-1100 # 20002bb4 <g_os_task_list>
 80087f8:	43d8                	lw	a4,4(a5)
 80087fa:	c300                	sw	s0,0(a4)
 80087fc:	04040713          	addi	a4,s0,64
 8008800:	c3d8                	sw	a4,4(a5)

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
 8008802:	8522                	mv	a0,s0
 8008804:	adbff0ef          	jal	ra,80082de <os_sched_insert>
 8008808:	84aa                	mv	s1,a0
    if (rc != OS_OK) {
 800880a:	cd09                	beqz	a0,8008824 <os_task_init+0xfe>
    }

    return (0);
err:
    return (rc);
}
 800880c:	8526                	mv	a0,s1
 800880e:	50b2                	lw	ra,44(sp)
 8008810:	5422                	lw	s0,40(sp)
 8008812:	5492                	lw	s1,36(sp)
 8008814:	5902                	lw	s2,32(sp)
 8008816:	49f2                	lw	s3,28(sp)
 8008818:	4a62                	lw	s4,24(sp)
 800881a:	4ad2                	lw	s5,20(sp)
 800881c:	4b42                	lw	s6,16(sp)
 800881e:	4bb2                	lw	s7,12(sp)
 8008820:	6145                	addi	sp,sp,48
 8008822:	8082                	ret
    if (os_started()) {
 8008824:	88bfe0ef          	jal	ra,80070ae <os_started>
 8008828:	e119                	bnez	a0,800882e <os_task_init+0x108>
    return (0);
 800882a:	84aa                	mv	s1,a0
 800882c:	b7c5                	j	800880c <os_task_init+0xe6>
        os_sched(NULL);
 800882e:	4501                	li	a0,0
 8008830:	d11ff0ef          	jal	ra,8008540 <os_sched>
 8008834:	bfe1                	j	800880c <os_task_init+0xe6>

08008836 <os_deltatime>:
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
 8008836:	00755713          	srli	a4,a0,0x7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
 800883a:	07f57513          	andi	a0,a0,127
 800883e:	6789                	lui	a5,0x2
 8008840:	e8478793          	addi	a5,a5,-380 # 1e84 <__stack_size+0x1684>
 8008844:	02f50533          	mul	a0,a0,a5
    os_timeradd(base, &tvdelta, result);
 8008848:	419c                	lw	a5,0(a1)
 800884a:	41d4                	lw	a3,4(a1)
 800884c:	97ba                	add	a5,a5,a4
 800884e:	00e7b733          	sltu	a4,a5,a4
 8008852:	9736                	add	a4,a4,a3
 8008854:	c21c                	sw	a5,0(a2)
 8008856:	c258                	sw	a4,4(a2)
 8008858:	4594                	lw	a3,8(a1)
 800885a:	9536                	add	a0,a0,a3
 800885c:	c608                	sw	a0,8(a2)
 800885e:	000f46b7          	lui	a3,0xf4
 8008862:	23f68693          	addi	a3,a3,575 # f423f <__stack_size+0xf3a3f>
 8008866:	00a6df63          	bge	a3,a0,8008884 <os_deltatime+0x4e>
 800886a:	00178693          	addi	a3,a5,1
 800886e:	00f6b7b3          	sltu	a5,a3,a5
 8008872:	97ba                	add	a5,a5,a4
 8008874:	c214                	sw	a3,0(a2)
 8008876:	c25c                	sw	a5,4(a2)
 8008878:	fff0c7b7          	lui	a5,0xfff0c
 800887c:	dc078793          	addi	a5,a5,-576 # fff0bdc0 <_sp+0xdff06dc0>
 8008880:	953e                	add	a0,a0,a5
 8008882:	c608                	sw	a0,8(a2)
}
 8008884:	8082                	ret

08008886 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
 8008886:	1141                	addi	sp,sp,-16
 8008888:	c606                	sw	ra,12(sp)
 800888a:	c422                	sw	s0,8(sp)
 800888c:	c226                	sw	s1,4(sp)
 800888e:	c04a                	sw	s2,0(sp)
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
 8008890:	02054a63          	bltz	a0,80088c4 <os_time_tick+0x3e>
 8008894:	842a                	mv	s0,a0

    OS_ENTER_CRITICAL(sr);
 8008896:	e88fe0ef          	jal	ra,8006f1e <os_arch_save_sr>
 800889a:	84aa                	mv	s1,a0
    prev_os_time = g_os_time;
 800889c:	20003737          	lui	a4,0x20003
 80088a0:	bc072783          	lw	a5,-1088(a4) # 20002bc0 <g_os_time>
    g_os_time += ticks;
 80088a4:	00f40533          	add	a0,s0,a5
 80088a8:	bca72023          	sw	a0,-1088(a4)

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
 80088ac:	8fa9                	xor	a5,a5,a0
 80088ae:	0207c163          	bltz	a5,80088d0 <os_time_tick+0x4a>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
 80088b2:	8526                	mv	a0,s1
 80088b4:	e72fe0ef          	jal	ra,8006f26 <os_arch_restore_sr>
}
 80088b8:	40b2                	lw	ra,12(sp)
 80088ba:	4422                	lw	s0,8(sp)
 80088bc:	4492                	lw	s1,4(sp)
 80088be:	4902                	lw	s2,0(sp)
 80088c0:	0141                	addi	sp,sp,16
 80088c2:	8082                	ret
    assert(ticks >= 0);
 80088c4:	4681                	li	a3,0
 80088c6:	4601                	li	a2,0
 80088c8:	4581                	li	a1,0
 80088ca:	4501                	li	a0,0
 80088cc:	f06fe0ef          	jal	ra,8006fd2 <__assert_func>
        delta = g_os_time - basetod.ostime;
 80088d0:	20003937          	lui	s2,0x20003
 80088d4:	84890913          	addi	s2,s2,-1976 # 20002848 <basetod>
 80088d8:	00092403          	lw	s0,0(s2)
 80088dc:	40850433          	sub	s0,a0,s0
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
 80088e0:	00890593          	addi	a1,s2,8
 80088e4:	862e                	mv	a2,a1
 80088e6:	8522                	mv	a0,s0
 80088e8:	f4fff0ef          	jal	ra,8008836 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
 80088ec:	01890593          	addi	a1,s2,24
 80088f0:	862e                	mv	a2,a1
 80088f2:	8522                	mv	a0,s0
 80088f4:	f43ff0ef          	jal	ra,8008836 <os_deltatime>
        basetod.ostime = g_os_time;
 80088f8:	200037b7          	lui	a5,0x20003
 80088fc:	bc07a783          	lw	a5,-1088(a5) # 20002bc0 <g_os_time>
 8008900:	00f92023          	sw	a5,0(s2)
 8008904:	b77d                	j	80088b2 <os_time_tick+0x2c>

08008906 <os_time_get>:
}
 8008906:	200037b7          	lui	a5,0x20003
 800890a:	bc07a503          	lw	a0,-1088(a5) # 20002bc0 <g_os_time>
 800890e:	8082                	ret

08008910 <os_time_advance>:

void
os_time_advance(int ticks)
{
 8008910:	1141                	addi	sp,sp,-16
 8008912:	c606                	sw	ra,12(sp)
 8008914:	c422                	sw	s0,8(sp)
    assert(ticks >= 0);
 8008916:	00054963          	bltz	a0,8008928 <os_time_advance+0x18>
 800891a:	842a                	mv	s0,a0

    if (ticks > 0) {
 800891c:	00a04c63          	bgtz	a0,8008934 <os_time_advance+0x24>
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
 8008920:	40b2                	lw	ra,12(sp)
 8008922:	4422                	lw	s0,8(sp)
 8008924:	0141                	addi	sp,sp,16
 8008926:	8082                	ret
    assert(ticks >= 0);
 8008928:	4681                	li	a3,0
 800892a:	4601                	li	a2,0
 800892c:	4581                	li	a1,0
 800892e:	4501                	li	a0,0
 8008930:	ea2fe0ef          	jal	ra,8006fd2 <__assert_func>
        if (!os_started()) {
 8008934:	f7afe0ef          	jal	ra,80070ae <os_started>
 8008938:	e909                	bnez	a0,800894a <os_time_advance+0x3a>
            g_os_time += ticks;
 800893a:	20003737          	lui	a4,0x20003
 800893e:	bc072783          	lw	a5,-1088(a4) # 20002bc0 <g_os_time>
 8008942:	943e                	add	s0,s0,a5
 8008944:	bc872023          	sw	s0,-1088(a4)
 8008948:	bfe1                	j	8008920 <os_time_advance+0x10>
            os_time_tick(ticks);
 800894a:	8522                	mv	a0,s0
 800894c:	f3bff0ef          	jal	ra,8008886 <os_time_tick>
            os_callout_tick();
 8008950:	9edfe0ef          	jal	ra,800733c <os_callout_tick>
            os_sched_os_timer_exp();
 8008954:	b5dff0ef          	jal	ra,80084b0 <os_sched_os_timer_exp>
            os_sched(NULL);
 8008958:	4501                	li	a0,0
 800895a:	be7ff0ef          	jal	ra,8008540 <os_sched>
}
 800895e:	b7c9                	j	8008920 <os_time_advance+0x10>

08008960 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
 8008960:	1141                	addi	sp,sp,-16
 8008962:	c606                	sw	ra,12(sp)
 8008964:	c422                	sw	s0,8(sp)
 8008966:	c226                	sw	s1,4(sp)
 8008968:	c04a                	sw	s2,0(sp)
 800896a:	84aa                	mv	s1,a0
 800896c:	842e                	mv	s0,a1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
 800896e:	db0fe0ef          	jal	ra,8006f1e <os_arch_save_sr>
 8008972:	892a                	mv	s2,a0
    if (tv != NULL) {
 8008974:	cc89                	beqz	s1,800898e <os_gettimeofday+0x2e>
        delta = os_time_get() - basetod.ostime;
 8008976:	f91ff0ef          	jal	ra,8008906 <os_time_get>
 800897a:	200035b7          	lui	a1,0x20003
 800897e:	84858593          	addi	a1,a1,-1976 # 20002848 <basetod>
 8008982:	419c                	lw	a5,0(a1)
        os_deltatime(delta, &basetod.utctime, tv);
 8008984:	8626                	mv	a2,s1
 8008986:	05e1                	addi	a1,a1,24
 8008988:	8d1d                	sub	a0,a0,a5
 800898a:	eadff0ef          	jal	ra,8008836 <os_deltatime>
    }

    if (tz != NULL) {
 800898e:	cc09                	beqz	s0,80089a8 <os_gettimeofday+0x48>
        *tz = basetod.timezone;
 8008990:	200037b7          	lui	a5,0x20003
 8008994:	84878793          	addi	a5,a5,-1976 # 20002848 <basetod>
 8008998:	0287d703          	lhu	a4,40(a5)
 800899c:	00e41023          	sh	a4,0(s0)
 80089a0:	02a7d783          	lhu	a5,42(a5)
 80089a4:	00f41123          	sh	a5,2(s0)
    }
    OS_EXIT_CRITICAL(sr);
 80089a8:	854a                	mv	a0,s2
 80089aa:	d7cfe0ef          	jal	ra,8006f26 <os_arch_restore_sr>

    return (0);
}
 80089ae:	4501                	li	a0,0
 80089b0:	40b2                	lw	ra,12(sp)
 80089b2:	4422                	lw	s0,8(sp)
 80089b4:	4492                	lw	s1,4(sp)
 80089b6:	4902                	lw	s2,0(sp)
 80089b8:	0141                	addi	sp,sp,16
 80089ba:	8082                	ret

080089bc <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
 80089bc:	1141                	addi	sp,sp,-16
 80089be:	c606                	sw	ra,12(sp)
 80089c0:	c422                	sw	s0,8(sp)
 80089c2:	87aa                	mv	a5,a0
 80089c4:	842e                	mv	s0,a1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
 80089c6:	3e800613          	li	a2,1000
 80089ca:	4681                	li	a3,0
 80089cc:	051e                	slli	a0,a0,0x7
 80089ce:	0197d593          	srli	a1,a5,0x19
 80089d2:	79b010ef          	jal	ra,800a96c <__udivdi3>
    if (ticks > UINT32_MAX) {
        return OS_EINVAL;
    }

    *out_ticks = ticks;
 80089d6:	c008                	sw	a0,0(s0)
    return 0;
}
 80089d8:	4501                	li	a0,0
 80089da:	40b2                	lw	ra,12(sp)
 80089dc:	4422                	lw	s0,8(sp)
 80089de:	0141                	addi	sp,sp,16
 80089e0:	8082                	ret

080089e2 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
 80089e2:	4505                	li	a0,1
 80089e4:	8082                	ret

080089e6 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
 80089e6:	8082                	ret

080089e8 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
 80089e8:	4158                	lw	a4,4(a0)

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
 80089ea:	02058793          	addi	a5,a1,32
 80089ee:	02f76863          	bltu	a4,a5,8008a1e <__malloc_from_block+0x36>
        /* Bigger block than required -- split block */
        nfp = (struct free_arena_header *)((char *)fp + size);
 80089f2:	00b507b3          	add	a5,a0,a1
        na = fp->a.next;
 80089f6:	4514                	lw	a3,8(a0)

        nfp->a.type = ARENA_TYPE_FREE;
 80089f8:	4605                	li	a2,1
 80089fa:	c390                	sw	a2,0(a5)
        nfp->a.size = fsize - size;
 80089fc:	8f0d                	sub	a4,a4,a1
 80089fe:	c3d8                	sw	a4,4(a5)
        fp->a.type = ARENA_TYPE_USED;
 8008a00:	00052023          	sw	zero,0(a0)
        fp->a.size = size;
 8008a04:	c14c                	sw	a1,4(a0)

        /* Insert into all-block chain */
        nfp->a.prev = fp;
 8008a06:	c7c8                	sw	a0,12(a5)
        nfp->a.next = na;
 8008a08:	c794                	sw	a3,8(a5)
        na->a.prev = nfp;
 8008a0a:	c6dc                	sw	a5,12(a3)
        fp->a.next = nfp;
 8008a0c:	c51c                	sw	a5,8(a0)

        /* Replace current block on free chain */
        nfp->next_free = fpn = fp->next_free;
 8008a0e:	4914                	lw	a3,16(a0)
 8008a10:	cb94                	sw	a3,16(a5)
        nfp->prev_free = fpp = fp->prev_free;
 8008a12:	4958                	lw	a4,20(a0)
 8008a14:	cbd8                	sw	a4,20(a5)
        fpn->prev_free = nfp;
 8008a16:	cadc                	sw	a5,20(a3)
        fpp->next_free = nfp;
 8008a18:	cb1c                	sw	a5,16(a4)
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
 8008a1a:	0541                	addi	a0,a0,16
 8008a1c:	8082                	ret
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
 8008a1e:	00052023          	sw	zero,0(a0)
    ap = ah->prev_free;
 8008a22:	4958                	lw	a4,20(a0)
    an = ah->next_free;
 8008a24:	491c                	lw	a5,16(a0)
    ap->next_free = an;
 8008a26:	cb1c                	sw	a5,16(a4)
    an->prev_free = ap;
 8008a28:	cbd8                	sw	a4,20(a5)
 8008a2a:	bfc5                	j	8008a1a <__malloc_from_block+0x32>

08008a2c <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
 8008a2c:	87aa                	mv	a5,a0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
 8008a2e:	4548                	lw	a0,12(a0)
    nah = ah->a.next;
 8008a30:	4794                	lw	a3,8(a5)
    if (pah->a.type == ARENA_TYPE_FREE &&
 8008a32:	4110                	lw	a2,0(a0)
 8008a34:	4705                	li	a4,1
 8008a36:	02e60463          	beq	a2,a4,8008a5e <__free_block+0x32>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
 8008a3a:	4705                	li	a4,1
 8008a3c:	c398                	sw	a4,0(a5)

        ah->next_free = __malloc_head.next_free;
 8008a3e:	20000737          	lui	a4,0x20000
 8008a42:	09470713          	addi	a4,a4,148 # 20000094 <__malloc_head>
 8008a46:	4b10                	lw	a2,16(a4)
 8008a48:	cb90                	sw	a2,16(a5)
        ah->prev_free = &__malloc_head;
 8008a4a:	cbd8                	sw	a4,20(a5)
        __malloc_head.next_free = ah;
 8008a4c:	cb1c                	sw	a5,16(a4)
        ah->next_free->prev_free = ah;
 8008a4e:	4b98                	lw	a4,16(a5)
 8008a50:	cb5c                	sw	a5,20(a4)
 8008a52:	853e                	mv	a0,a5
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
 8008a54:	4298                	lw	a4,0(a3)
 8008a56:	4785                	li	a5,1
 8008a58:	00f70e63          	beq	a4,a5,8008a74 <__free_block+0x48>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
 8008a5c:	8082                	ret
        (char *)pah + pah->a.size == (char *)ah) {
 8008a5e:	4158                	lw	a4,4(a0)
 8008a60:	00e50633          	add	a2,a0,a4
    if (pah->a.type == ARENA_TYPE_FREE &&
 8008a64:	fcf61be3          	bne	a2,a5,8008a3a <__free_block+0xe>
        pah->a.size += ah->a.size;
 8008a68:	43dc                	lw	a5,4(a5)
 8008a6a:	973e                	add	a4,a4,a5
 8008a6c:	c158                	sw	a4,4(a0)
        pah->a.next = nah;
 8008a6e:	c514                	sw	a3,8(a0)
        nah->a.prev = pah;
 8008a70:	c6c8                	sw	a0,12(a3)
        pah = ah->a.prev;
 8008a72:	b7cd                	j	8008a54 <__free_block+0x28>
        (char *)ah + ah->a.size == (char *)nah) {
 8008a74:	415c                	lw	a5,4(a0)
 8008a76:	00f50733          	add	a4,a0,a5
    if (nah->a.type == ARENA_TYPE_FREE &&
 8008a7a:	fed711e3          	bne	a4,a3,8008a5c <__free_block+0x30>
        ah->a.size += nah->a.size;
 8008a7e:	42d8                	lw	a4,4(a3)
 8008a80:	97ba                	add	a5,a5,a4
 8008a82:	c15c                	sw	a5,4(a0)
    ap = ah->prev_free;
 8008a84:	4ad8                	lw	a4,20(a3)
    an = ah->next_free;
 8008a86:	4a9c                	lw	a5,16(a3)
    ap->next_free = an;
 8008a88:	cb1c                	sw	a5,16(a4)
    an->prev_free = ap;
 8008a8a:	cbd8                	sw	a4,20(a5)
    ap = ah->a.prev;
 8008a8c:	46d8                	lw	a4,12(a3)
    an = ah->a.next;
 8008a8e:	469c                	lw	a5,8(a3)
    ap->a.next = an;
 8008a90:	c71c                	sw	a5,8(a4)
    an->a.prev = ap;
 8008a92:	c7d8                	sw	a4,12(a5)
    return ah;
 8008a94:	b7e1                	j	8008a5c <__free_block+0x30>

08008a96 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
 8008a96:	47dd                	li	a5,23
 8008a98:	04b7fa63          	bgeu	a5,a1,8008aec <add_malloc_block+0x56>
{
 8008a9c:	1141                	addi	sp,sp,-16
 8008a9e:	c606                	sw	ra,12(sp)
 8008aa0:	c422                	sw	s0,8(sp)
 8008aa2:	842a                	mv	s0,a0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
 8008aa4:	4785                	li	a5,1
 8008aa6:	c11c                	sw	a5,0(a0)
    fp->a.size = size;
 8008aa8:	c14c                	sw	a1,4(a0)

    if (!malloc_lock())
 8008aaa:	8301a783          	lw	a5,-2000(gp) # 20000550 <malloc_lock>
 8008aae:	9782                	jalr	a5
 8008ab0:	c915                	beqz	a0,8008ae4 <add_malloc_block+0x4e>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
 8008ab2:	200007b7          	lui	a5,0x20000
 8008ab6:	09478793          	addi	a5,a5,148 # 20000094 <__malloc_head>
 8008aba:	47dc                	lw	a5,12(a5)
 8008abc:	4394                	lw	a3,0(a5)
 8008abe:	4709                	li	a4,2
 8008ac0:	00e68663          	beq	a3,a4,8008acc <add_malloc_block+0x36>
         pah = pah->a.prev) {
        if (pah < fp)
 8008ac4:	0087e463          	bltu	a5,s0,8008acc <add_malloc_block+0x36>
         pah = pah->a.prev) {
 8008ac8:	47dc                	lw	a5,12(a5)
 8008aca:	bfcd                	j	8008abc <add_malloc_block+0x26>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
 8008acc:	4798                	lw	a4,8(a5)
 8008ace:	c418                	sw	a4,8(s0)
    fp->a.prev = pah;
 8008ad0:	c45c                	sw	a5,12(s0)
    pah->a.next = fp;
 8008ad2:	c780                	sw	s0,8(a5)
    fp->a.next->a.prev = fp;
 8008ad4:	441c                	lw	a5,8(s0)
 8008ad6:	c7c0                	sw	s0,12(a5)

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
 8008ad8:	8522                	mv	a0,s0
 8008ada:	f53ff0ef          	jal	ra,8008a2c <__free_block>

    malloc_unlock();
 8008ade:	8341a783          	lw	a5,-1996(gp) # 20000554 <malloc_unlock>
 8008ae2:	9782                	jalr	a5
}
 8008ae4:	40b2                	lw	ra,12(sp)
 8008ae6:	4422                	lw	s0,8(sp)
 8008ae8:	0141                	addi	sp,sp,16
 8008aea:	8082                	ret
 8008aec:	8082                	ret

08008aee <malloc>:
{
 8008aee:	1141                	addi	sp,sp,-16
 8008af0:	c606                	sw	ra,12(sp)
 8008af2:	c422                	sw	s0,8(sp)
 8008af4:	c226                	sw	s1,4(sp)
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
 8008af6:	fff50713          	addi	a4,a0,-1
 8008afa:	57b9                	li	a5,-18
 8008afc:	06e7e063          	bltu	a5,a4,8008b5c <malloc+0x6e>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
 8008b00:	01f50413          	addi	s0,a0,31
 8008b04:	9841                	andi	s0,s0,-16
    if (!malloc_lock())
 8008b06:	8301a783          	lw	a5,-2000(gp) # 20000550 <malloc_lock>
 8008b0a:	9782                	jalr	a5
 8008b0c:	c931                	beqz	a0,8008b60 <malloc+0x72>
    void *result = NULL;
 8008b0e:	4481                	li	s1,0
 8008b10:	a839                	j	8008b2e <malloc+0x40>
            result = __malloc_from_block(fp, size);
 8008b12:	85a2                	mv	a1,s0
 8008b14:	ed5ff0ef          	jal	ra,80089e8 <__malloc_from_block>
 8008b18:	84aa                	mv	s1,a0
    if (result == NULL) {
 8008b1a:	e885                	bnez	s1,8008b4a <malloc+0x5c>
        more_mem = _sbrk(size);
 8008b1c:	8522                	mv	a0,s0
 8008b1e:	30d000ef          	jal	ra,800962a <_sbrk>
        if (more_mem != (void *)-1) {
 8008b22:	57fd                	li	a5,-1
 8008b24:	02f50363          	beq	a0,a5,8008b4a <malloc+0x5c>
            add_malloc_block(more_mem, size);
 8008b28:	85a2                	mv	a1,s0
 8008b2a:	f6dff0ef          	jal	ra,8008a96 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
 8008b2e:	200007b7          	lui	a5,0x20000
 8008b32:	09478793          	addi	a5,a5,148 # 20000094 <__malloc_head>
 8008b36:	4b88                	lw	a0,16(a5)
 8008b38:	4118                	lw	a4,0(a0)
 8008b3a:	4789                	li	a5,2
 8008b3c:	fcf70fe3          	beq	a4,a5,8008b1a <malloc+0x2c>
        if (fp->a.size >= size) {
 8008b40:	415c                	lw	a5,4(a0)
 8008b42:	fc87f8e3          	bgeu	a5,s0,8008b12 <malloc+0x24>
         fp = fp->next_free) {
 8008b46:	4908                	lw	a0,16(a0)
 8008b48:	bfc5                	j	8008b38 <malloc+0x4a>
    malloc_unlock();
 8008b4a:	8341a783          	lw	a5,-1996(gp) # 20000554 <malloc_unlock>
 8008b4e:	9782                	jalr	a5
}
 8008b50:	8526                	mv	a0,s1
 8008b52:	40b2                	lw	ra,12(sp)
 8008b54:	4422                	lw	s0,8(sp)
 8008b56:	4492                	lw	s1,4(sp)
 8008b58:	0141                	addi	sp,sp,16
 8008b5a:	8082                	ret
        return NULL;
 8008b5c:	4481                	li	s1,0
 8008b5e:	bfcd                	j	8008b50 <malloc+0x62>
        return NULL;
 8008b60:	4481                	li	s1,0
 8008b62:	b7fd                	j	8008b50 <malloc+0x62>

08008b64 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
 8008b64:	c50d                	beqz	a0,8008b8e <free+0x2a>
{
 8008b66:	1141                	addi	sp,sp,-16
 8008b68:	c606                	sw	ra,12(sp)
 8008b6a:	c422                	sw	s0,8(sp)
        return;

    ah = (struct free_arena_header *)
 8008b6c:	ff050413          	addi	s0,a0,-16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
 8008b70:	8301a783          	lw	a5,-2000(gp) # 20000550 <malloc_lock>
 8008b74:	9782                	jalr	a5
 8008b76:	e509                	bnez	a0,8008b80 <free+0x1c>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
 8008b78:	40b2                	lw	ra,12(sp)
 8008b7a:	4422                	lw	s0,8(sp)
 8008b7c:	0141                	addi	sp,sp,16
 8008b7e:	8082                	ret
    ah = __free_block(ah);
 8008b80:	8522                	mv	a0,s0
 8008b82:	eabff0ef          	jal	ra,8008a2c <__free_block>
    malloc_unlock();
 8008b86:	8341a783          	lw	a5,-1996(gp) # 20000554 <malloc_unlock>
 8008b8a:	9782                	jalr	a5
 8008b8c:	b7f5                	j	8008b78 <free+0x14>
 8008b8e:	8082                	ret

08008b90 <memcmp>:

#include <string.h>

int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;
 8008b90:	4781                	li	a5,0
         : [res] "=r" (d)
        );
#else
	const unsigned char *c1 = s1, *c2 = s2;

	while (n--) {
 8008b92:	fff60713          	addi	a4,a2,-1
 8008b96:	ce19                	beqz	a2,8008bb4 <memcmp+0x24>
		d = (int)*c1++ - (int)*c2++;
 8008b98:	00150693          	addi	a3,a0,1
 8008b9c:	00054783          	lbu	a5,0(a0)
 8008ba0:	00158813          	addi	a6,a1,1
 8008ba4:	0005c503          	lbu	a0,0(a1)
 8008ba8:	8f89                	sub	a5,a5,a0
	while (n--) {
 8008baa:	863a                	mv	a2,a4
		if (d)
 8008bac:	e781                	bnez	a5,8008bb4 <memcmp+0x24>
		d = (int)*c1++ - (int)*c2++;
 8008bae:	85c2                	mv	a1,a6
 8008bb0:	8536                	mv	a0,a3
 8008bb2:	b7c5                	j	8008b92 <memcmp+0x2>
			break;
	}
#endif

	return d;
}
 8008bb4:	853e                	mv	a0,a5
 8008bb6:	8082                	ret

08008bb8 <memcpy>:
#include <stdint.h>

void *memcpy(void *dst, const void *src, size_t n)
{
	const char *p = src;
	char *q = dst;
 8008bb8:	87aa                	mv	a5,a0
             "       strb r3, [r0, r2]  \n"
             "test2: subs r2, #1        \n"
             "       bpl  loop2         \n"
            );
#else
	while (n--) {
 8008bba:	fff60713          	addi	a4,a2,-1
 8008bbe:	ca09                	beqz	a2,8008bd0 <memcpy+0x18>
		*q++ = *p++;
 8008bc0:	0005c683          	lbu	a3,0(a1)
 8008bc4:	00d78023          	sb	a3,0(a5)
 8008bc8:	0785                	addi	a5,a5,1
 8008bca:	0585                	addi	a1,a1,1
	while (n--) {
 8008bcc:	863a                	mv	a2,a4
 8008bce:	b7f5                	j	8008bba <memcpy+0x2>
	}
#endif

	return dst;
}
 8008bd0:	8082                	ret

08008bd2 <memset>:
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
	char *q = dst;
 8008bd2:	87aa                	mv	a5,a0
                  : [buf] "+r" (q), [val] "+r" (c), [len] "+r" (n)
                  :
                  : "r3", "r4", "memory"
                 );
#else
	while (n--) {
 8008bd4:	fff60713          	addi	a4,a2,-1
 8008bd8:	c611                	beqz	a2,8008be4 <memset+0x12>
		*q++ = c;
 8008bda:	00b78023          	sb	a1,0(a5)
 8008bde:	0785                	addi	a5,a5,1
	while (n--) {
 8008be0:	863a                	mv	a2,a4
 8008be2:	bfcd                	j	8008bd4 <memset+0x2>
	}
#endif

	return dst;
}
 8008be4:	8082                	ret

08008be6 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
 8008be6:	7139                	addi	sp,sp,-64
 8008be8:	ce06                	sw	ra,28(sp)
 8008bea:	d432                	sw	a2,40(sp)
 8008bec:	d636                	sw	a3,44(sp)
 8008bee:	d83a                	sw	a4,48(sp)
 8008bf0:	da3e                	sw	a5,52(sp)
 8008bf2:	dc42                	sw	a6,56(sp)
 8008bf4:	de46                	sw	a7,60(sp)
	va_list ap;
	int rv;

	va_start(ap, format);
 8008bf6:	1034                	addi	a3,sp,40
 8008bf8:	c636                	sw	a3,12(sp)
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
 8008bfa:	862e                	mv	a2,a1
 8008bfc:	800005b7          	lui	a1,0x80000
 8008c00:	fff5c593          	not	a1,a1
 8008c04:	2df1                	jal	80092e0 <vsnprintf>
	va_end(ap);

	return rv;
}
 8008c06:	40f2                	lw	ra,28(sp)
 8008c08:	6121                	addi	sp,sp,64
 8008c0a:	8082                	ret

08008c0c <strcmp>:
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
 8008c0c:	00150613          	addi	a2,a0,1
 8008c10:	00054703          	lbu	a4,0(a0)
 8008c14:	00158693          	addi	a3,a1,1 # 80000001 <_sp+0x5fffb001>
 8008c18:	0005c783          	lbu	a5,0(a1)
 8008c1c:	40f707b3          	sub	a5,a4,a5
		if (d || !ch)
 8008c20:	e781                	bnez	a5,8008c28 <strcmp+0x1c>
		d = (int)(ch = *c1++) - (int)*c2++;
 8008c22:	8532                	mv	a0,a2
 8008c24:	85b6                	mv	a1,a3
		if (d || !ch)
 8008c26:	f37d                	bnez	a4,8008c0c <strcmp>
			break;
	}

	return d;
}
 8008c28:	853e                	mv	a0,a5
 8008c2a:	8082                	ret

08008c2c <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
 8008c2c:	715d                	addi	sp,sp,-80
 8008c2e:	c686                	sw	ra,76(sp)
 8008c30:	c4a2                	sw	s0,72(sp)
 8008c32:	c2a6                	sw	s1,68(sp)
 8008c34:	c0ca                	sw	s2,64(sp)
 8008c36:	de4e                	sw	s3,60(sp)
 8008c38:	dc52                	sw	s4,56(sp)
 8008c3a:	da56                	sw	s5,52(sp)
 8008c3c:	d85a                	sw	s6,48(sp)
 8008c3e:	d65e                	sw	s7,44(sp)
 8008c40:	d462                	sw	s8,40(sp)
 8008c42:	d266                	sw	s9,36(sp)
 8008c44:	d06a                	sw	s10,32(sp)
 8008c46:	ce6e                	sw	s11,28(sp)
 8008c48:	89aa                	mv	s3,a0
 8008c4a:	892e                	mv	s2,a1
 8008c4c:	8c32                	mv	s8,a2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
 8008c4e:	00462b83          	lw	s7,4(a2)
    unsigned long long int d = 1;
 8008c52:	4485                	li	s1,1
 8008c54:	4401                	li	s0,0
    while (num / d >= p->base)
 8008c56:	8626                	mv	a2,s1
 8008c58:	86a2                	mv	a3,s0
 8008c5a:	854e                	mv	a0,s3
 8008c5c:	85ca                	mv	a1,s2
 8008c5e:	50f010ef          	jal	ra,800a96c <__udivdi3>
 8008c62:	003c4783          	lbu	a5,3(s8)
 8008c66:	c989                	beqz	a1,8008c78 <ui2a+0x4c>
        d *= p->base;
 8008c68:	02f40733          	mul	a4,s0,a5
 8008c6c:	02f4b433          	mulhu	s0,s1,a5
 8008c70:	02f484b3          	mul	s1,s1,a5
 8008c74:	943a                	add	s0,s0,a4
 8008c76:	b7c5                	j	8008c56 <ui2a+0x2a>
    while (num / d >= p->base)
 8008c78:	fef578e3          	bgeu	a0,a5,8008c68 <ui2a+0x3c>
    int n = 0;
 8008c7c:	4b01                	li	s6,0
 8008c7e:	a821                	j	8008c96 <ui2a+0x6a>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 8008c80:	03000793          	li	a5,48
 8008c84:	9abe                	add	s5,s5,a5
 8008c86:	015b8023          	sb	s5,0(s7)
            ++n;
 8008c8a:	0b05                	addi	s6,s6,1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 8008c8c:	0b85                	addi	s7,s7,1
 8008c8e:	84aa                	mv	s1,a0
 8008c90:	842e                	mv	s0,a1
 8008c92:	49a2                	lw	s3,8(sp)
 8008c94:	4932                	lw	s2,12(sp)
    while (d != 0) {
 8008c96:	0084e7b3          	or	a5,s1,s0
 8008c9a:	cbb5                	beqz	a5,8008d0e <ui2a+0xe2>
        unsigned long long  dgt = num / d;
 8008c9c:	8626                	mv	a2,s1
 8008c9e:	86a2                	mv	a3,s0
 8008ca0:	854e                	mv	a0,s3
 8008ca2:	85ca                	mv	a1,s2
 8008ca4:	4c9010ef          	jal	ra,800a96c <__udivdi3>
 8008ca8:	8aaa                	mv	s5,a0
 8008caa:	8d2a                	mv	s10,a0
 8008cac:	8a2e                	mv	s4,a1
        num %= d;
 8008cae:	8626                	mv	a2,s1
 8008cb0:	86a2                	mv	a3,s0
 8008cb2:	854e                	mv	a0,s3
 8008cb4:	85ca                	mv	a1,s2
 8008cb6:	04e020ef          	jal	ra,800ad04 <__umoddi3>
 8008cba:	c42a                	sw	a0,8(sp)
 8008cbc:	c62e                	sw	a1,12(sp)
        d /= p->base;
 8008cbe:	003c4c83          	lbu	s9,3(s8)
 8008cc2:	4d81                	li	s11,0
 8008cc4:	8666                	mv	a2,s9
 8008cc6:	4681                	li	a3,0
 8008cc8:	8526                	mv	a0,s1
 8008cca:	85a2                	mv	a1,s0
 8008ccc:	4a1010ef          	jal	ra,800a96c <__udivdi3>
        if (n || dgt > 0 || d == 0) {
 8008cd0:	000b1e63          	bnez	s6,8008cec <ui2a+0xc0>
 8008cd4:	00896663          	bltu	s2,s0,8008ce0 <ui2a+0xb4>
 8008cd8:	01241a63          	bne	s0,s2,8008cec <ui2a+0xc0>
 8008cdc:	0099f863          	bgeu	s3,s1,8008cec <ui2a+0xc0>
 8008ce0:	01b46663          	bltu	s0,s11,8008cec <ui2a+0xc0>
 8008ce4:	fa8d95e3          	bne	s11,s0,8008c8e <ui2a+0x62>
 8008ce8:	fb94f3e3          	bgeu	s1,s9,8008c8e <ui2a+0x62>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
 8008cec:	000a1763          	bnez	s4,8008cfa <ui2a+0xce>
 8008cf0:	f80a18e3          	bnez	s4,8008c80 <ui2a+0x54>
 8008cf4:	47a5                	li	a5,9
 8008cf6:	f9a7f5e3          	bgeu	a5,s10,8008c80 <ui2a+0x54>
 8008cfa:	002c4783          	lbu	a5,2(s8)
 8008cfe:	8b91                	andi	a5,a5,4
 8008d00:	c781                	beqz	a5,8008d08 <ui2a+0xdc>
 8008d02:	03700793          	li	a5,55
 8008d06:	bfbd                	j	8008c84 <ui2a+0x58>
 8008d08:	05700793          	li	a5,87
 8008d0c:	bfa5                	j	8008c84 <ui2a+0x58>
        }
    }
    *bf = 0;
 8008d0e:	000b8023          	sb	zero,0(s7)
}
 8008d12:	40b6                	lw	ra,76(sp)
 8008d14:	4426                	lw	s0,72(sp)
 8008d16:	4496                	lw	s1,68(sp)
 8008d18:	4906                	lw	s2,64(sp)
 8008d1a:	59f2                	lw	s3,60(sp)
 8008d1c:	5a62                	lw	s4,56(sp)
 8008d1e:	5ad2                	lw	s5,52(sp)
 8008d20:	5b42                	lw	s6,48(sp)
 8008d22:	5bb2                	lw	s7,44(sp)
 8008d24:	5c22                	lw	s8,40(sp)
 8008d26:	5c92                	lw	s9,36(sp)
 8008d28:	5d02                	lw	s10,32(sp)
 8008d2a:	4df2                	lw	s11,28(sp)
 8008d2c:	6161                	addi	sp,sp,80
 8008d2e:	8082                	ret

08008d30 <i2a>:

static void i2a(long long int num, struct param *p)
{
 8008d30:	1141                	addi	sp,sp,-16
 8008d32:	c606                	sw	ra,12(sp)
    if (num < 0) {
 8008d34:	0005c763          	bltz	a1,8008d42 <i2a+0x12>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
 8008d38:	ef5ff0ef          	jal	ra,8008c2c <ui2a>
}
 8008d3c:	40b2                	lw	ra,12(sp)
 8008d3e:	0141                	addi	sp,sp,16
 8008d40:	8082                	ret
        num = -num;
 8008d42:	40a00533          	neg	a0,a0
 8008d46:	00a03733          	snez	a4,a0
 8008d4a:	40b007b3          	neg	a5,a1
 8008d4e:	40e785b3          	sub	a1,a5,a4
        p->sign = 1;
 8008d52:	00264783          	lbu	a5,2(a2)
 8008d56:	0017e793          	ori	a5,a5,1
 8008d5a:	00f60123          	sb	a5,2(a2)
 8008d5e:	bfe9                	j	8008d38 <i2a+0x8>

08008d60 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
 8008d60:	fd050793          	addi	a5,a0,-48
 8008d64:	0ff7f793          	andi	a5,a5,255
 8008d68:	4725                	li	a4,9
 8008d6a:	02f77363          	bgeu	a4,a5,8008d90 <a2d+0x30>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
 8008d6e:	f9f50793          	addi	a5,a0,-97
 8008d72:	0ff7f793          	andi	a5,a5,255
 8008d76:	4715                	li	a4,5
 8008d78:	00f77f63          	bgeu	a4,a5,8008d96 <a2d+0x36>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
 8008d7c:	fbf50793          	addi	a5,a0,-65
 8008d80:	0ff7f793          	andi	a5,a5,255
 8008d84:	4715                	li	a4,5
 8008d86:	00f76b63          	bltu	a4,a5,8008d9c <a2d+0x3c>
        return ch - 'A' + 10;
 8008d8a:	fc950513          	addi	a0,a0,-55
 8008d8e:	8082                	ret
        return ch - '0';
 8008d90:	fd050513          	addi	a0,a0,-48
 8008d94:	8082                	ret
        return ch - 'a' + 10;
 8008d96:	fa950513          	addi	a0,a0,-87
 8008d9a:	8082                	ret
    else
        return -1;
 8008d9c:	557d                	li	a0,-1
}
 8008d9e:	8082                	ret

08008da0 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
 8008da0:	1101                	addi	sp,sp,-32
 8008da2:	ce06                	sw	ra,28(sp)
 8008da4:	cc22                	sw	s0,24(sp)
 8008da6:	ca26                	sw	s1,20(sp)
 8008da8:	c84a                	sw	s2,16(sp)
 8008daa:	c64e                	sw	s3,12(sp)
 8008dac:	c452                	sw	s4,8(sp)
 8008dae:	c256                	sw	s5,4(sp)
 8008db0:	892a                	mv	s2,a0
 8008db2:	8a2e                	mv	s4,a1
 8008db4:	89b2                	mv	s3,a2
 8008db6:	8ab6                	mv	s5,a3
    const char *p = *src;
 8008db8:	4184                	lw	s1,0(a1)
    int num = 0;
 8008dba:	4401                	li	s0,0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
 8008dbc:	854a                	mv	a0,s2
 8008dbe:	fa3ff0ef          	jal	ra,8008d60 <a2d>
 8008dc2:	00054b63          	bltz	a0,8008dd8 <a2i+0x38>
        if (digit > base)
 8008dc6:	00a9c963          	blt	s3,a0,8008dd8 <a2i+0x38>
            break;
        num = num * base + digit;
 8008dca:	03340433          	mul	s0,s0,s3
 8008dce:	942a                	add	s0,s0,a0
        ch = *p++;
 8008dd0:	0004c903          	lbu	s2,0(s1)
 8008dd4:	0485                	addi	s1,s1,1
 8008dd6:	b7dd                	j	8008dbc <a2i+0x1c>
    }
    *src = p;
 8008dd8:	009a2023          	sw	s1,0(s4)
    *nump = num;
 8008ddc:	008a8023          	sb	s0,0(s5)
    return ch;
}
 8008de0:	854a                	mv	a0,s2
 8008de2:	40f2                	lw	ra,28(sp)
 8008de4:	4462                	lw	s0,24(sp)
 8008de6:	44d2                	lw	s1,20(sp)
 8008de8:	4942                	lw	s2,16(sp)
 8008dea:	49b2                	lw	s3,12(sp)
 8008dec:	4a22                	lw	s4,8(sp)
 8008dee:	4a92                	lw	s5,4(sp)
 8008df0:	6105                	addi	sp,sp,32
 8008df2:	8082                	ret

08008df4 <putf>:

static int putf(FILE *putp, char c)
{
 8008df4:	1101                	addi	sp,sp,-32
 8008df6:	ce06                	sw	ra,28(sp)
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
 8008df8:	00b107a3          	sb	a1,15(sp)
    if (stream->vmt->write == NULL) return 0;
 8008dfc:	411c                	lw	a5,0(a0)
 8008dfe:	439c                	lw	a5,0(a5)
 8008e00:	cf81                	beqz	a5,8008e18 <putf+0x24>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
 8008e02:	4605                	li	a2,1
 8008e04:	00f10593          	addi	a1,sp,15
 8008e08:	9782                	jalr	a5
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
 8008e0a:	4785                	li	a5,1
 8008e0c:	00f51663          	bne	a0,a5,8008e18 <putf+0x24>
    if (fputc(c, putp) == EOF)
        return 0;
    else
        return 1;
 8008e10:	4505                	li	a0,1
}
 8008e12:	40f2                	lw	ra,28(sp)
 8008e14:	6105                	addi	sp,sp,32
 8008e16:	8082                	ret
        return 0;
 8008e18:	4501                	li	a0,0
 8008e1a:	bfe5                	j	8008e12 <putf+0x1e>

08008e1c <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
 8008e1c:	1101                	addi	sp,sp,-32
 8008e1e:	ce06                	sw	ra,28(sp)
 8008e20:	cc22                	sw	s0,24(sp)
 8008e22:	ca26                	sw	s1,20(sp)
 8008e24:	c84a                	sw	s2,16(sp)
 8008e26:	c64e                	sw	s3,12(sp)
 8008e28:	c452                	sw	s4,8(sp)
 8008e2a:	892a                	mv	s2,a0
 8008e2c:	8a2e                	mv	s4,a1
    unsigned written = 0;
    char ch;
    int n = p->width;
 8008e2e:	0005c403          	lbu	s0,0(a1)
    char *bf = p->bf;
 8008e32:	41dc                	lw	a5,4(a1)

    /* Number of filling characters */
    while (*bf++ && n > 0)
 8008e34:	00178713          	addi	a4,a5,1
 8008e38:	0007c783          	lbu	a5,0(a5)
 8008e3c:	c791                	beqz	a5,8008e48 <putchw+0x2c>
 8008e3e:	00805563          	blez	s0,8008e48 <putchw+0x2c>
        n--;
 8008e42:	147d                	addi	s0,s0,-1
    while (*bf++ && n > 0)
 8008e44:	87ba                	mv	a5,a4
 8008e46:	b7fd                	j	8008e34 <putchw+0x18>
    if (p->sign)
 8008e48:	002a4783          	lbu	a5,2(s4)
 8008e4c:	8b85                	andi	a5,a5,1
 8008e4e:	c391                	beqz	a5,8008e52 <putchw+0x36>
        n--;
 8008e50:	147d                	addi	s0,s0,-1
    if (p->alt && p->base == 16)
 8008e52:	000a2483          	lw	s1,0(s4)
 8008e56:	ff0207b7          	lui	a5,0xff020
 8008e5a:	8fe5                	and	a5,a5,s1
 8008e5c:	10020737          	lui	a4,0x10020
 8008e60:	04e78e63          	beq	a5,a4,8008ebc <putchw+0xa0>
        n -= 2;
    else if (p->alt && p->base == 8)
 8008e64:	08020737          	lui	a4,0x8020
 8008e68:	04e78c63          	beq	a5,a4,8008ec0 <putchw+0xa4>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
 8008e6c:	000907b7          	lui	a5,0x90
 8008e70:	f0078793          	addi	a5,a5,-256 # 8ff00 <__stack_size+0x8f700>
 8008e74:	8cfd                	and	s1,s1,a5
 8008e76:	c4b9                	beqz	s1,8008ec4 <putchw+0xa8>
    unsigned written = 0;
 8008e78:	4481                	li	s1,0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
 8008e7a:	002a4783          	lbu	a5,2(s4)
 8008e7e:	8b85                	andi	a5,a5,1
 8008e80:	e3a5                	bnez	a5,8008ee0 <putchw+0xc4>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
 8008e82:	000a2703          	lw	a4,0(s4)
 8008e86:	ff0207b7          	lui	a5,0xff020
 8008e8a:	8ff9                	and	a5,a5,a4
 8008e8c:	10020737          	lui	a4,0x10020
 8008e90:	04e78f63          	beq	a5,a4,8008eee <putchw+0xd2>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
 8008e94:	08020737          	lui	a4,0x8020
 8008e98:	06e78f63          	beq	a5,a4,8008f16 <putchw+0xfa>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
 8008e9c:	001a4783          	lbu	a5,1(s4)
 8008ea0:	ebc9                	bnez	a5,8008f32 <putchw+0x116>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
 8008ea2:	004a2783          	lw	a5,4(s4)
    while ((ch = *bf++))
 8008ea6:	00178993          	addi	s3,a5,1 # ff020001 <_sp+0xdf01b001>
 8008eaa:	0007c583          	lbu	a1,0(a5)
 8008eae:	c9c1                	beqz	a1,8008f3e <putchw+0x122>
        written += putf(putp, ch);
 8008eb0:	854a                	mv	a0,s2
 8008eb2:	f43ff0ef          	jal	ra,8008df4 <putf>
 8008eb6:	94aa                	add	s1,s1,a0
    while ((ch = *bf++))
 8008eb8:	87ce                	mv	a5,s3
 8008eba:	b7f5                	j	8008ea6 <putchw+0x8a>
        n -= 2;
 8008ebc:	1479                	addi	s0,s0,-2
 8008ebe:	b77d                	j	8008e6c <putchw+0x50>
        n--;
 8008ec0:	147d                	addi	s0,s0,-1
 8008ec2:	b76d                	j	8008e6c <putchw+0x50>
        while (n-- > 0)
 8008ec4:	fff40993          	addi	s3,s0,-1
 8008ec8:	00805a63          	blez	s0,8008edc <putchw+0xc0>
            written += putf(putp, ' ');
 8008ecc:	02000593          	li	a1,32
 8008ed0:	854a                	mv	a0,s2
 8008ed2:	f23ff0ef          	jal	ra,8008df4 <putf>
 8008ed6:	94aa                	add	s1,s1,a0
        while (n-- > 0)
 8008ed8:	844e                	mv	s0,s3
 8008eda:	b7ed                	j	8008ec4 <putchw+0xa8>
 8008edc:	844e                	mv	s0,s3
 8008ede:	bf71                	j	8008e7a <putchw+0x5e>
        written += putf(putp, '-');
 8008ee0:	02d00593          	li	a1,45
 8008ee4:	854a                	mv	a0,s2
 8008ee6:	f0fff0ef          	jal	ra,8008df4 <putf>
 8008eea:	94aa                	add	s1,s1,a0
 8008eec:	bf59                	j	8008e82 <putchw+0x66>
        written += putf(putp, '0');
 8008eee:	03000593          	li	a1,48
 8008ef2:	854a                	mv	a0,s2
 8008ef4:	f01ff0ef          	jal	ra,8008df4 <putf>
 8008ef8:	94aa                	add	s1,s1,a0
        written += putf(putp, (p->uc ? 'X' : 'x'));
 8008efa:	002a4783          	lbu	a5,2(s4)
 8008efe:	8b91                	andi	a5,a5,4
 8008f00:	cb81                	beqz	a5,8008f10 <putchw+0xf4>
 8008f02:	05800593          	li	a1,88
 8008f06:	854a                	mv	a0,s2
 8008f08:	eedff0ef          	jal	ra,8008df4 <putf>
 8008f0c:	94aa                	add	s1,s1,a0
 8008f0e:	b779                	j	8008e9c <putchw+0x80>
 8008f10:	07800593          	li	a1,120
 8008f14:	bfcd                	j	8008f06 <putchw+0xea>
        written += putf(putp, '0');
 8008f16:	03000593          	li	a1,48
 8008f1a:	854a                	mv	a0,s2
 8008f1c:	ed9ff0ef          	jal	ra,8008df4 <putf>
 8008f20:	94aa                	add	s1,s1,a0
 8008f22:	bfad                	j	8008e9c <putchw+0x80>
            written += putf(putp, '0');
 8008f24:	03000593          	li	a1,48
 8008f28:	854a                	mv	a0,s2
 8008f2a:	ecbff0ef          	jal	ra,8008df4 <putf>
 8008f2e:	94aa                	add	s1,s1,a0
        while (n-- > 0)
 8008f30:	844e                	mv	s0,s3
 8008f32:	fff40993          	addi	s3,s0,-1
 8008f36:	fe8047e3          	bgtz	s0,8008f24 <putchw+0x108>
 8008f3a:	844e                	mv	s0,s3
 8008f3c:	b79d                	j	8008ea2 <putchw+0x86>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
 8008f3e:	002a4783          	lbu	a5,2(s4)
 8008f42:	8ba1                	andi	a5,a5,8
 8008f44:	e38d                	bnez	a5,8008f66 <putchw+0x14a>
        while (n-- > 0)
            written += putf(putp, ' ');
    }
    
    return written;
}
 8008f46:	8526                	mv	a0,s1
 8008f48:	40f2                	lw	ra,28(sp)
 8008f4a:	4462                	lw	s0,24(sp)
 8008f4c:	44d2                	lw	s1,20(sp)
 8008f4e:	4942                	lw	s2,16(sp)
 8008f50:	49b2                	lw	s3,12(sp)
 8008f52:	4a22                	lw	s4,8(sp)
 8008f54:	6105                	addi	sp,sp,32
 8008f56:	8082                	ret
            written += putf(putp, ' ');
 8008f58:	02000593          	li	a1,32
 8008f5c:	854a                	mv	a0,s2
 8008f5e:	e97ff0ef          	jal	ra,8008df4 <putf>
 8008f62:	94aa                	add	s1,s1,a0
        while (n-- > 0)
 8008f64:	844e                	mv	s0,s3
 8008f66:	fff40993          	addi	s3,s0,-1
 8008f6a:	fe8047e3          	bgtz	s0,8008f58 <putchw+0x13c>
 8008f6e:	bfe1                	j	8008f46 <putchw+0x12a>

08008f70 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
 8008f70:	cd11                	beqz	a0,8008f8c <intarg+0x1c>
 8008f72:	4785                	li	a5,1
 8008f74:	02f50c63          	beq	a0,a5,8008fac <intarg+0x3c>
        }
        break;

    case 2:
    default:
        if (sign) {
 8008f78:	c9b1                	beqz	a1,8008fcc <intarg+0x5c>
            val = va_arg(*va, long long);
 8008f7a:	421c                	lw	a5,0(a2)
 8008f7c:	079d                	addi	a5,a5,7
 8008f7e:	9be1                	andi	a5,a5,-8
 8008f80:	00878713          	addi	a4,a5,8
 8008f84:	c218                	sw	a4,0(a2)
 8008f86:	4388                	lw	a0,0(a5)
 8008f88:	43cc                	lw	a1,4(a5)
 8008f8a:	8082                	ret
        if (sign) {
 8008f8c:	c989                	beqz	a1,8008f9e <intarg+0x2e>
            val = va_arg(*va, int);
 8008f8e:	421c                	lw	a5,0(a2)
 8008f90:	00478713          	addi	a4,a5,4
 8008f94:	c218                	sw	a4,0(a2)
 8008f96:	4388                	lw	a0,0(a5)
 8008f98:	41f55593          	srai	a1,a0,0x1f
 8008f9c:	8082                	ret
            val = va_arg(*va, unsigned int);
 8008f9e:	421c                	lw	a5,0(a2)
 8008fa0:	00478713          	addi	a4,a5,4
 8008fa4:	c218                	sw	a4,0(a2)
 8008fa6:	4388                	lw	a0,0(a5)
 8008fa8:	4581                	li	a1,0
 8008faa:	8082                	ret
        if (sign) {
 8008fac:	c989                	beqz	a1,8008fbe <intarg+0x4e>
            val = va_arg(*va, long);
 8008fae:	421c                	lw	a5,0(a2)
 8008fb0:	00478713          	addi	a4,a5,4
 8008fb4:	c218                	sw	a4,0(a2)
 8008fb6:	4388                	lw	a0,0(a5)
 8008fb8:	41f55593          	srai	a1,a0,0x1f
 8008fbc:	8082                	ret
            val = va_arg(*va, unsigned long);
 8008fbe:	421c                	lw	a5,0(a2)
 8008fc0:	00478713          	addi	a4,a5,4
 8008fc4:	c218                	sw	a4,0(a2)
 8008fc6:	4388                	lw	a0,0(a5)
 8008fc8:	4581                	li	a1,0
 8008fca:	8082                	ret
        } else {
            val = va_arg(*va, unsigned long long);
 8008fcc:	421c                	lw	a5,0(a2)
 8008fce:	079d                	addi	a5,a5,7
 8008fd0:	9be1                	andi	a5,a5,-8
 8008fd2:	00878713          	addi	a4,a5,8
 8008fd6:	c218                	sw	a4,0(a2)
 8008fd8:	4388                	lw	a0,0(a5)
 8008fda:	43cc                	lw	a1,4(a5)
        }
        break;
    }

    return val;
}
 8008fdc:	8082                	ret

08008fde <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
 8008fde:	7139                	addi	sp,sp,-64
 8008fe0:	de06                	sw	ra,60(sp)
 8008fe2:	dc22                	sw	s0,56(sp)
 8008fe4:	da26                	sw	s1,52(sp)
 8008fe6:	84aa                	mv	s1,a0
 8008fe8:	c62e                	sw	a1,12(sp)
 8008fea:	c432                	sw	a2,8(sp)
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
 8008fec:	081c                	addi	a5,sp,16
 8008fee:	d63e                	sw	a5,44(sp)
    size_t written = 0;
 8008ff0:	4401                	li	s0,0

    while ((ch = *(fmt++))) {
 8008ff2:	47b2                	lw	a5,12(sp)
 8008ff4:	00178713          	addi	a4,a5,1
 8008ff8:	c63a                	sw	a4,12(sp)
 8008ffa:	0007c583          	lbu	a1,0(a5)
 8008ffe:	28058f63          	beqz	a1,800929c <tfp_format+0x2be>
        if (ch != '%') {
 8009002:	02500793          	li	a5,37
 8009006:	00f58763          	beq	a1,a5,8009014 <tfp_format+0x36>
            written += putf(putp, ch);
 800900a:	8526                	mv	a0,s1
 800900c:	de9ff0ef          	jal	ra,8008df4 <putf>
 8009010:	942a                	add	s0,s0,a0
 8009012:	b7c5                	j	8008ff2 <tfp_format+0x14>
        } else {
            /* Init parameter struct */
            p.lz = 0;
 8009014:	020104a3          	sb	zero,41(sp)
            p.alt = 0;
 8009018:	02a14783          	lbu	a5,42(sp)
            p.width = 0;
 800901c:	02010423          	sb	zero,40(sp)
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
 8009020:	0f07f793          	andi	a5,a5,240
 8009024:	02f10523          	sb	a5,42(sp)
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
 8009028:	47b2                	lw	a5,12(sp)
 800902a:	00178713          	addi	a4,a5,1
 800902e:	c63a                	sw	a4,12(sp)
 8009030:	0007c503          	lbu	a0,0(a5)
 8009034:	cd09                	beqz	a0,800904e <tfp_format+0x70>
                switch (ch) {
 8009036:	02d00793          	li	a5,45
 800903a:	0cf50563          	beq	a0,a5,8009104 <tfp_format+0x126>
 800903e:	03000793          	li	a5,48
 8009042:	0af50263          	beq	a0,a5,80090e6 <tfp_format+0x108>
 8009046:	02300793          	li	a5,35
 800904a:	0af50663          	beq	a0,a5,80090f6 <tfp_format+0x118>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
 800904e:	02a00793          	li	a5,42
 8009052:	0cf50263          	beq	a0,a5,8009116 <tfp_format+0x138>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
 8009056:	fd050793          	addi	a5,a0,-48
 800905a:	0ff7f793          	andi	a5,a5,255
 800905e:	4725                	li	a4,9
 8009060:	0ef77363          	bgeu	a4,a5,8009146 <tfp_format+0x168>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
 8009064:	06c00793          	li	a5,108
 8009068:	0ef50563          	beq	a0,a5,8009152 <tfp_format+0x174>
            lng = 0;
 800906c:	4701                	li	a4,0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
 800906e:	07a00793          	li	a5,122
 8009072:	10f50363          	beq	a0,a5,8009178 <tfp_format+0x19a>
                ch = *(fmt++);
            }

            switch (ch) {
 8009076:	06900793          	li	a5,105
 800907a:	14f50b63          	beq	a0,a5,80091d0 <tfp_format+0x1f2>
 800907e:	10a7f463          	bgeu	a5,a0,8009186 <tfp_format+0x1a8>
 8009082:	07300793          	li	a5,115
 8009086:	1ef50d63          	beq	a0,a5,8009280 <tfp_format+0x2a2>
 800908a:	16a7e463          	bltu	a5,a0,80091f2 <tfp_format+0x214>
 800908e:	06f00793          	li	a5,111
 8009092:	1cf50663          	beq	a0,a5,800925e <tfp_format+0x280>
 8009096:	07000793          	li	a5,112
 800909a:	f4f51ce3          	bne	a0,a5,8008ff2 <tfp_format+0x14>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
 800909e:	47a2                	lw	a5,8(sp)
 80090a0:	00478713          	addi	a4,a5,4
 80090a4:	c43a                	sw	a4,8(sp)
 80090a6:	4388                	lw	a0,0(a5)
                p.base = 16;
 80090a8:	47c1                	li	a5,16
 80090aa:	02f105a3          	sb	a5,43(sp)
                ui2a((uintptr_t)v, &p);
 80090ae:	1030                	addi	a2,sp,40
 80090b0:	4581                	li	a1,0
 80090b2:	b7bff0ef          	jal	ra,8008c2c <ui2a>
                p.width = 2 * sizeof(void*);
 80090b6:	47a1                	li	a5,8
 80090b8:	02f10423          	sb	a5,40(sp)
                p.lz = 1;
 80090bc:	4785                	li	a5,1
 80090be:	02f104a3          	sb	a5,41(sp)
                written += putf(putp, '0');
 80090c2:	03000593          	li	a1,48
 80090c6:	8526                	mv	a0,s1
 80090c8:	d2dff0ef          	jal	ra,8008df4 <putf>
 80090cc:	942a                	add	s0,s0,a0
                written += putf(putp, 'x');
 80090ce:	07800593          	li	a1,120
 80090d2:	8526                	mv	a0,s1
 80090d4:	d21ff0ef          	jal	ra,8008df4 <putf>
 80090d8:	942a                	add	s0,s0,a0
                written += putchw(putp, &p);
 80090da:	102c                	addi	a1,sp,40
 80090dc:	8526                	mv	a0,s1
 80090de:	d3fff0ef          	jal	ra,8008e1c <putchw>
 80090e2:	942a                	add	s0,s0,a0
                break;
 80090e4:	b739                	j	8008ff2 <tfp_format+0x14>
                    if (!p.left) {
 80090e6:	02a14783          	lbu	a5,42(sp)
 80090ea:	8ba1                	andi	a5,a5,8
 80090ec:	ff95                	bnez	a5,8009028 <tfp_format+0x4a>
                        p.lz = 1;
 80090ee:	4785                	li	a5,1
 80090f0:	02f104a3          	sb	a5,41(sp)
                    continue;
 80090f4:	bf15                	j	8009028 <tfp_format+0x4a>
                    p.alt = 1;
 80090f6:	02a14783          	lbu	a5,42(sp)
 80090fa:	0027e793          	ori	a5,a5,2
 80090fe:	02f10523          	sb	a5,42(sp)
                    continue;
 8009102:	b71d                	j	8009028 <tfp_format+0x4a>
                    p.left = 1;
 8009104:	02a14783          	lbu	a5,42(sp)
 8009108:	0087e793          	ori	a5,a5,8
 800910c:	02f10523          	sb	a5,42(sp)
                    p.lz = 0;
 8009110:	020104a3          	sb	zero,41(sp)
                    continue;
 8009114:	bf11                	j	8009028 <tfp_format+0x4a>
                i = intarg(0, 1, &va);
 8009116:	0030                	addi	a2,sp,8
 8009118:	4585                	li	a1,1
 800911a:	4501                	li	a0,0
 800911c:	e55ff0ef          	jal	ra,8008f70 <intarg>
                if (i > UCHAR_MAX) {
 8009120:	0ff00793          	li	a5,255
 8009124:	00a7dc63          	bge	a5,a0,800913c <tfp_format+0x15e>
                    p.width = UCHAR_MAX;
 8009128:	57fd                	li	a5,-1
 800912a:	02f10423          	sb	a5,40(sp)
                ch = *(fmt++);
 800912e:	47b2                	lw	a5,12(sp)
 8009130:	00178713          	addi	a4,a5,1
 8009134:	c63a                	sw	a4,12(sp)
 8009136:	0007c503          	lbu	a0,0(a5)
 800913a:	b72d                	j	8009064 <tfp_format+0x86>
                } else if (i > 0) {
 800913c:	fea059e3          	blez	a0,800912e <tfp_format+0x150>
                    p.width = i;
 8009140:	02a10423          	sb	a0,40(sp)
 8009144:	b7ed                	j	800912e <tfp_format+0x150>
                ch = a2i(ch, &fmt, 10, &(p.width));
 8009146:	1034                	addi	a3,sp,40
 8009148:	4629                	li	a2,10
 800914a:	006c                	addi	a1,sp,12
 800914c:	c55ff0ef          	jal	ra,8008da0 <a2i>
 8009150:	bf11                	j	8009064 <tfp_format+0x86>
                ch = *(fmt++);
 8009152:	47b2                	lw	a5,12(sp)
 8009154:	00178713          	addi	a4,a5,1
 8009158:	c63a                	sw	a4,12(sp)
 800915a:	0007c503          	lbu	a0,0(a5)
                if (ch == 'l') {
 800915e:	06c00693          	li	a3,108
 8009162:	00d50463          	beq	a0,a3,800916a <tfp_format+0x18c>
                lng = 1;
 8009166:	4705                	li	a4,1
 8009168:	b719                	j	800906e <tfp_format+0x90>
                    ch = *(fmt++);
 800916a:	00278713          	addi	a4,a5,2
 800916e:	c63a                	sw	a4,12(sp)
 8009170:	0017c503          	lbu	a0,1(a5)
                    lng = 2;
 8009174:	4709                	li	a4,2
 8009176:	bde5                	j	800906e <tfp_format+0x90>
                ch = *(fmt++);
 8009178:	47b2                	lw	a5,12(sp)
 800917a:	00178693          	addi	a3,a5,1
 800917e:	c636                	sw	a3,12(sp)
 8009180:	0007c503          	lbu	a0,0(a5)
 8009184:	bdcd                	j	8009076 <tfp_format+0x98>
 8009186:	05800793          	li	a5,88
 800918a:	08f50d63          	beq	a0,a5,8009224 <tfp_format+0x246>
 800918e:	00a7ee63          	bltu	a5,a0,80091aa <tfp_format+0x1cc>
 8009192:	10050563          	beqz	a0,800929c <tfp_format+0x2be>
 8009196:	02500793          	li	a5,37
 800919a:	e4f51ce3          	bne	a0,a5,8008ff2 <tfp_format+0x14>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
 800919e:	85aa                	mv	a1,a0
 80091a0:	8526                	mv	a0,s1
 80091a2:	c53ff0ef          	jal	ra,8008df4 <putf>
 80091a6:	942a                	add	s0,s0,a0
                break;
 80091a8:	b5a9                	j	8008ff2 <tfp_format+0x14>
 80091aa:	06300793          	li	a5,99
 80091ae:	00f51d63          	bne	a0,a5,80091c8 <tfp_format+0x1ea>
                written += putf(putp, (char)(va_arg(va, int)));
 80091b2:	47a2                	lw	a5,8(sp)
 80091b4:	00478713          	addi	a4,a5,4
 80091b8:	c43a                	sw	a4,8(sp)
 80091ba:	0007c583          	lbu	a1,0(a5)
 80091be:	8526                	mv	a0,s1
 80091c0:	c35ff0ef          	jal	ra,8008df4 <putf>
 80091c4:	942a                	add	s0,s0,a0
                break;
 80091c6:	b535                	j	8008ff2 <tfp_format+0x14>
 80091c8:	06400793          	li	a5,100
 80091cc:	e2f513e3          	bne	a0,a5,8008ff2 <tfp_format+0x14>
                p.base = 10;
 80091d0:	47a9                	li	a5,10
 80091d2:	02f105a3          	sb	a5,43(sp)
                i2a(intarg(lng, 1, &va), &p);
 80091d6:	0030                	addi	a2,sp,8
 80091d8:	4585                	li	a1,1
 80091da:	853a                	mv	a0,a4
 80091dc:	d95ff0ef          	jal	ra,8008f70 <intarg>
 80091e0:	1030                	addi	a2,sp,40
 80091e2:	b4fff0ef          	jal	ra,8008d30 <i2a>
                written += putchw(putp, &p);
 80091e6:	102c                	addi	a1,sp,40
 80091e8:	8526                	mv	a0,s1
 80091ea:	c33ff0ef          	jal	ra,8008e1c <putchw>
 80091ee:	942a                	add	s0,s0,a0
                break;
 80091f0:	b509                	j	8008ff2 <tfp_format+0x14>
 80091f2:	07500793          	li	a5,117
 80091f6:	02f51363          	bne	a0,a5,800921c <tfp_format+0x23e>
                p.base = 10;
 80091fa:	47a9                	li	a5,10
 80091fc:	02f105a3          	sb	a5,43(sp)
                ui2a(intarg(lng, 0, &va), &p);
 8009200:	0030                	addi	a2,sp,8
 8009202:	4581                	li	a1,0
 8009204:	853a                	mv	a0,a4
 8009206:	d6bff0ef          	jal	ra,8008f70 <intarg>
 800920a:	1030                	addi	a2,sp,40
 800920c:	a21ff0ef          	jal	ra,8008c2c <ui2a>
                written += putchw(putp, &p);
 8009210:	102c                	addi	a1,sp,40
 8009212:	8526                	mv	a0,s1
 8009214:	c09ff0ef          	jal	ra,8008e1c <putchw>
 8009218:	942a                	add	s0,s0,a0
                break;
 800921a:	bbe1                	j	8008ff2 <tfp_format+0x14>
 800921c:	07800793          	li	a5,120
 8009220:	dcf519e3          	bne	a0,a5,8008ff2 <tfp_format+0x14>
                p.base = 16;
 8009224:	47c1                	li	a5,16
 8009226:	02f105a3          	sb	a5,43(sp)
                p.uc = (ch == 'X');
 800922a:	fa850793          	addi	a5,a0,-88
 800922e:	0017b793          	seqz	a5,a5
 8009232:	00279693          	slli	a3,a5,0x2
 8009236:	02a14783          	lbu	a5,42(sp)
 800923a:	9bed                	andi	a5,a5,-5
 800923c:	8fd5                	or	a5,a5,a3
 800923e:	02f10523          	sb	a5,42(sp)
                ui2a(intarg(lng, 0, &va), &p);
 8009242:	0030                	addi	a2,sp,8
 8009244:	4581                	li	a1,0
 8009246:	853a                	mv	a0,a4
 8009248:	d29ff0ef          	jal	ra,8008f70 <intarg>
 800924c:	1030                	addi	a2,sp,40
 800924e:	9dfff0ef          	jal	ra,8008c2c <ui2a>
                written += putchw(putp, &p);
 8009252:	102c                	addi	a1,sp,40
 8009254:	8526                	mv	a0,s1
 8009256:	bc7ff0ef          	jal	ra,8008e1c <putchw>
 800925a:	942a                	add	s0,s0,a0
                break;
 800925c:	bb59                	j	8008ff2 <tfp_format+0x14>
                p.base = 8;
 800925e:	47a1                	li	a5,8
 8009260:	02f105a3          	sb	a5,43(sp)
                ui2a(intarg(lng, 0, &va), &p);
 8009264:	0030                	addi	a2,sp,8
 8009266:	4581                	li	a1,0
 8009268:	853a                	mv	a0,a4
 800926a:	d07ff0ef          	jal	ra,8008f70 <intarg>
 800926e:	1030                	addi	a2,sp,40
 8009270:	9bdff0ef          	jal	ra,8008c2c <ui2a>
                written += putchw(putp, &p);
 8009274:	102c                	addi	a1,sp,40
 8009276:	8526                	mv	a0,s1
 8009278:	ba5ff0ef          	jal	ra,8008e1c <putchw>
 800927c:	942a                	add	s0,s0,a0
                break;
 800927e:	bb95                	j	8008ff2 <tfp_format+0x14>
                p.bf = va_arg(va, char *);
 8009280:	47a2                	lw	a5,8(sp)
 8009282:	00478713          	addi	a4,a5,4
 8009286:	c43a                	sw	a4,8(sp)
 8009288:	439c                	lw	a5,0(a5)
 800928a:	d63e                	sw	a5,44(sp)
                written += putchw(putp, &p);
 800928c:	102c                	addi	a1,sp,40
 800928e:	8526                	mv	a0,s1
 8009290:	b8dff0ef          	jal	ra,8008e1c <putchw>
 8009294:	942a                	add	s0,s0,a0
                p.bf = bf;
 8009296:	081c                	addi	a5,sp,16
 8009298:	d63e                	sw	a5,44(sp)
                break;
 800929a:	bba1                	j	8008ff2 <tfp_format+0x14>
        }
    }
 abort:;
 
 return written;
}
 800929c:	8522                	mv	a0,s0
 800929e:	50f2                	lw	ra,60(sp)
 80092a0:	5462                	lw	s0,56(sp)
 80092a2:	54d2                	lw	s1,52(sp)
 80092a4:	6121                	addi	sp,sp,64
 80092a6:	8082                	ret

080092a8 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
 80092a8:	1141                	addi	sp,sp,-16
 80092aa:	c606                	sw	ra,12(sp)
    return tfp_format(f, fmt, va);
 80092ac:	d33ff0ef          	jal	ra,8008fde <tfp_format>
}
 80092b0:	40b2                	lw	ra,12(sp)
 80092b2:	0141                	addi	sp,sp,16
 80092b4:	8082                	ret

080092b6 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
 80092b6:	7139                	addi	sp,sp,-64
 80092b8:	ce06                	sw	ra,28(sp)
 80092ba:	d22e                	sw	a1,36(sp)
 80092bc:	d432                	sw	a2,40(sp)
 80092be:	d636                	sw	a3,44(sp)
 80092c0:	d83a                	sw	a4,48(sp)
 80092c2:	da3e                	sw	a5,52(sp)
 80092c4:	dc42                	sw	a6,56(sp)
 80092c6:	de46                	sw	a7,60(sp)
    va_list va;
    va_start(va, fmt);
 80092c8:	1050                	addi	a2,sp,36
 80092ca:	c632                	sw	a2,12(sp)
    int rv = vfprintf(stdout, fmt, va);
 80092cc:	85aa                	mv	a1,a0
 80092ce:	0800e7b7          	lui	a5,0x800e
 80092d2:	8ec7a503          	lw	a0,-1812(a5) # 800d8ec <stdout>
 80092d6:	fd3ff0ef          	jal	ra,80092a8 <vfprintf>
    va_end(va);
    return rv;
}
 80092da:	40f2                	lw	ra,28(sp)
 80092dc:	6121                	addi	sp,sp,64
 80092de:	8082                	ret

080092e0 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
 80092e0:	7179                	addi	sp,sp,-48
 80092e2:	d606                	sw	ra,44(sp)
 80092e4:	d422                	sw	s0,40(sp)
 80092e6:	d226                	sw	s1,36(sp)
 80092e8:	d04a                	sw	s2,32(sp)
 80092ea:	ce4e                	sw	s3,28(sp)
 80092ec:	84aa                	mv	s1,a0
 80092ee:	842e                	mv	s0,a1
 80092f0:	8932                	mv	s2,a2
 80092f2:	89b6                	mv	s3,a3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
 80092f4:	862e                	mv	a2,a1
 80092f6:	85aa                	mv	a1,a0
 80092f8:	850a                	mv	a0,sp
 80092fa:	28bd                	jal	8009378 <fmemopen_w>
    tfp_format(f, fmt, va);
 80092fc:	864e                	mv	a2,s3
 80092fe:	85ca                	mv	a1,s2
 8009300:	cdfff0ef          	jal	ra,8008fde <tfp_format>
    if (size > 0) {
 8009304:	c419                	beqz	s0,8009312 <vsnprintf+0x32>
        if (state.bytes_written < size) {
 8009306:	47a2                	lw	a5,8(sp)
 8009308:	0087fd63          	bgeu	a5,s0,8009322 <vsnprintf+0x42>
            *(state.buffer) = '\0';
 800930c:	4792                	lw	a5,4(sp)
 800930e:	00078023          	sb	zero,0(a5)
        } else {
            str[size - 1] = '\0';
        }
    }
    return state.bytes_written;
}
 8009312:	4522                	lw	a0,8(sp)
 8009314:	50b2                	lw	ra,44(sp)
 8009316:	5422                	lw	s0,40(sp)
 8009318:	5492                	lw	s1,36(sp)
 800931a:	5902                	lw	s2,32(sp)
 800931c:	49f2                	lw	s3,28(sp)
 800931e:	6145                	addi	sp,sp,48
 8009320:	8082                	ret
            str[size - 1] = '\0';
 8009322:	147d                	addi	s0,s0,-1
 8009324:	9426                	add	s0,s0,s1
 8009326:	00040023          	sb	zero,0(s0)
 800932a:	b7e5                	j	8009312 <vsnprintf+0x32>

0800932c <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
 800932c:	1141                	addi	sp,sp,-16
 800932e:	c606                	sw	ra,12(sp)
	return vfprintf(stdout, format, ap);
 8009330:	862e                	mv	a2,a1
 8009332:	85aa                	mv	a1,a0
 8009334:	0800e7b7          	lui	a5,0x800e
 8009338:	8ec7a503          	lw	a0,-1812(a5) # 800d8ec <stdout>
 800933c:	f6dff0ef          	jal	ra,80092a8 <vfprintf>
}
 8009340:	40b2                	lw	ra,12(sp)
 8009342:	0141                	addi	sp,sp,16
 8009344:	8082                	ret

08009346 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
 8009346:	872a                	mv	a4,a0
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
 8009348:	4501                	li	a0,0
    
    while (n--)
 800934a:	a011                	j	800934e <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
 800934c:	8636                	mv	a2,a3
    while (n--)
 800934e:	fff60693          	addi	a3,a2,-1
 8009352:	c215                	beqz	a2,8009376 <memfile_write+0x30>
        f->bytes_written++;
 8009354:	471c                	lw	a5,8(a4)
 8009356:	0785                	addi	a5,a5,1
 8009358:	c71c                	sw	a5,8(a4)
        if (f->bytes_written <= f->size)
 800935a:	4750                	lw	a2,12(a4)
 800935c:	fef668e3          	bltu	a2,a5,800934c <memfile_write+0x6>
            *f->buffer++ = *bp++;
 8009360:	435c                	lw	a5,4(a4)
 8009362:	00178613          	addi	a2,a5,1
 8009366:	c350                	sw	a2,4(a4)
 8009368:	0005c603          	lbu	a2,0(a1)
 800936c:	00c78023          	sb	a2,0(a5)
            i++;
 8009370:	0505                	addi	a0,a0,1
            *f->buffer++ = *bp++;
 8009372:	0585                	addi	a1,a1,1
 8009374:	bfe1                	j	800934c <memfile_write+0x6>
        }
    }
    
    return i;
}
 8009376:	8082                	ret

08009378 <fmemopen_w>:
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
    storage->file.vmt = &MemFile_methods;
 8009378:	0800e737          	lui	a4,0x800e
 800937c:	8f870713          	addi	a4,a4,-1800 # 800d8f8 <MemFile_methods>
 8009380:	c118                	sw	a4,0(a0)
    storage->buffer = buffer;
 8009382:	c14c                	sw	a1,4(a0)
    storage->bytes_written = 0;
 8009384:	00052423          	sw	zero,8(a0)
    storage->size = size;
 8009388:	c550                	sw	a2,12(a0)
    return (FILE*)storage;
}
 800938a:	8082                	ret

0800938c <json_helper_set_array>:
#include <sensor_coap/sensor_coap.h>
#include <mynewt_rust/json_helper.h>

//  Assume we are writing an object now.  Write the key name and start a child array.
//  {a:b --> {a:b, key:[
void json_helper_set_array(void *object, const char *key) {
 800938c:	1141                	addi	sp,sp,-16
 800938e:	c606                	sw	ra,12(sp)
 8009390:	c422                	sw	s0,8(sp)
    assert(key);
 8009392:	cd99                	beqz	a1,80093b0 <json_helper_set_array+0x24>
    //  console_printf("json_helper_set_array: %s\n", key); ////
    json_rep_set_array_k(object, (char *) key);
 8009394:	20003437          	lui	s0,0x20003
 8009398:	9f040513          	addi	a0,s0,-1552 # 200029f0 <coap_json_encoder>
 800939c:	bc6fd0ef          	jal	ra,8006762 <json_encode_array_name>
 80093a0:	9f040513          	addi	a0,s0,-1552
 80093a4:	bccfd0ef          	jal	ra,8006770 <json_encode_array_start>
}
 80093a8:	40b2                	lw	ra,12(sp)
 80093aa:	4422                	lw	s0,8(sp)
 80093ac:	0141                	addi	sp,sp,16
 80093ae:	8082                	ret
    assert(key);
 80093b0:	4681                	li	a3,0
 80093b2:	4601                	li	a2,0
 80093b4:	4501                	li	a0,0
 80093b6:	c1dfd0ef          	jal	ra,8006fd2 <__assert_func>

080093ba <json_helper_close_array>:

//  End the child array and resume writing the parent object.
//  {a:b, key:[... --> {a:b, key:[...]
void json_helper_close_array(void *object, const char *key) {
 80093ba:	1141                	addi	sp,sp,-16
 80093bc:	c606                	sw	ra,12(sp)
    assert(key);
 80093be:	c991                	beqz	a1,80093d2 <json_helper_close_array+0x18>
    json_rep_close_array(object, key);
 80093c0:	20003537          	lui	a0,0x20003
 80093c4:	9f050513          	addi	a0,a0,-1552 # 200029f0 <coap_json_encoder>
 80093c8:	bd4fd0ef          	jal	ra,800679c <json_encode_array_finish>
}
 80093cc:	40b2                	lw	ra,12(sp)
 80093ce:	0141                	addi	sp,sp,16
 80093d0:	8082                	ret
    assert(key);
 80093d2:	4681                	li	a3,0
 80093d4:	4601                	li	a2,0
 80093d6:	4501                	li	a0,0
 80093d8:	bfbfd0ef          	jal	ra,8006fd2 <__assert_func>

080093dc <json_helper_object_array_start_item>:

//  Assume we have called set_array.  Start an array item, assumed to be an object.
//  [... --> [...,
void json_helper_object_array_start_item(const char *key) {
 80093dc:	1141                	addi	sp,sp,-16
 80093de:	c606                	sw	ra,12(sp)
    assert(key);
 80093e0:	c911                	beqz	a0,80093f4 <json_helper_object_array_start_item+0x18>
    //  console_printf("json_helper_object_array_start_item: %s\n", key); ////
    json_rep_object_array_start_item(key);
 80093e2:	20003537          	lui	a0,0x20003
 80093e6:	9f050513          	addi	a0,a0,-1552 # 200029f0 <coap_json_encoder>
 80093ea:	fa7fc0ef          	jal	ra,8006390 <json_encode_object_start>
}
 80093ee:	40b2                	lw	ra,12(sp)
 80093f0:	0141                	addi	sp,sp,16
 80093f2:	8082                	ret
    assert(key);
 80093f4:	4681                	li	a3,0
 80093f6:	4601                	li	a2,0
 80093f8:	4581                	li	a1,0
 80093fa:	bd9fd0ef          	jal	ra,8006fd2 <__assert_func>

080093fe <json_helper_object_array_end_item>:

//  End an array item, assumed to be an object.
//  [... --> [...,
void json_helper_object_array_end_item(const char *key) {
 80093fe:	1141                	addi	sp,sp,-16
 8009400:	c606                	sw	ra,12(sp)
    assert(key);
 8009402:	c911                	beqz	a0,8009416 <json_helper_object_array_end_item+0x18>
    json_rep_object_array_end_item(key);
 8009404:	20003537          	lui	a0,0x20003
 8009408:	9f050513          	addi	a0,a0,-1552 # 200029f0 <coap_json_encoder>
 800940c:	b28fd0ef          	jal	ra,8006734 <json_encode_object_finish>
}
 8009410:	40b2                	lw	ra,12(sp)
 8009412:	0141                	addi	sp,sp,16
 8009414:	8082                	ret
    assert(key);
 8009416:	4681                	li	a3,0
 8009418:	4601                	li	a2,0
 800941a:	4581                	li	a1,0
 800941c:	bb7fd0ef          	jal	ra,8006fd2 <__assert_func>

08009420 <json_helper_set_int>:

//  Encode a value into JSON: int, unsigned int, float, text, ...
void json_helper_set_int(void *object, const char *key, uint64_t value) {
 8009420:	1141                	addi	sp,sp,-16
 8009422:	c606                	sw	ra,12(sp)
    assert(key);
 8009424:	c58d                	beqz	a1,800944e <json_helper_set_int+0x2e>
    //  console_printf("json_helper_set_int: %s\n", key); ////
    json_rep_set_int_k(object, (char *) key, value);
 8009426:	200037b7          	lui	a5,0x20003
 800942a:	a4078713          	addi	a4,a5,-1472 # 20002a40 <coap_json_value>
 800942e:	4509                	li	a0,2
 8009430:	00a700a3          	sb	a0,1(a4)
 8009434:	c710                	sw	a2,8(a4)
 8009436:	c754                	sw	a3,12(a4)
 8009438:	a4078613          	addi	a2,a5,-1472
 800943c:	20003537          	lui	a0,0x20003
 8009440:	9f050513          	addi	a0,a0,-1552 # 200029f0 <coap_json_encoder>
 8009444:	80afd0ef          	jal	ra,800644e <json_encode_object_entry>
}
 8009448:	40b2                	lw	ra,12(sp)
 800944a:	0141                	addi	sp,sp,16
 800944c:	8082                	ret
    assert(key);
 800944e:	4681                	li	a3,0
 8009450:	4601                	li	a2,0
 8009452:	4501                	li	a0,0
 8009454:	b7ffd0ef          	jal	ra,8006fd2 <__assert_func>

08009458 <json_helper_set_float>:
void json_helper_set_uint(void *object, const char *key, uint64_t value) {
    assert(key);
    json_rep_set_uint_k(object, (char *) key, value);
}

void json_helper_set_float(void *object, const char *key, float value) {
 8009458:	1141                	addi	sp,sp,-16
 800945a:	c606                	sw	ra,12(sp)
    assert(key);
 800945c:	c585                	beqz	a1,8009484 <json_helper_set_float+0x2c>
    json_rep_set_float_k(object, (char *) key, value);
 800945e:	200037b7          	lui	a5,0x20003
 8009462:	a4078713          	addi	a4,a5,-1472 # 20002a40 <coap_json_value>
 8009466:	4699                	li	a3,6
 8009468:	00d700a3          	sb	a3,1(a4)
 800946c:	c710                	sw	a2,8(a4)
 800946e:	a4078613          	addi	a2,a5,-1472
 8009472:	20003537          	lui	a0,0x20003
 8009476:	9f050513          	addi	a0,a0,-1552 # 200029f0 <coap_json_encoder>
 800947a:	ef7fb0ef          	jal	ra,8005370 <json_encode_object_entry_ext>
}
 800947e:	40b2                	lw	ra,12(sp)
 8009480:	0141                	addi	sp,sp,16
 8009482:	8082                	ret
    assert(key);
 8009484:	4681                	li	a3,0
 8009486:	4601                	li	a2,0
 8009488:	4501                	li	a0,0
 800948a:	b49fd0ef          	jal	ra,8006fd2 <__assert_func>

0800948e <json_helper_set_text_string>:

void json_helper_set_text_string(void *object, const char *key, const char *value) {
 800948e:	1101                	addi	sp,sp,-32
 8009490:	ce06                	sw	ra,28(sp)
 8009492:	cc22                	sw	s0,24(sp)
 8009494:	ca26                	sw	s1,20(sp)
 8009496:	c84a                	sw	s2,16(sp)
 8009498:	c64e                	sw	s3,12(sp)
    assert(key);
 800949a:	c1a9                	beqz	a1,80094dc <json_helper_set_text_string+0x4e>
 800949c:	892e                	mv	s2,a1
 800949e:	8432                	mv	s0,a2
    assert(value);
 80094a0:	c621                	beqz	a2,80094e8 <json_helper_set_text_string+0x5a>
    //  console_printf("json_helper_set_text_string: %s\n", key); ////
    json_rep_set_text_string_k(object, (char *) key, value);
 80094a2:	200039b7          	lui	s3,0x20003
 80094a6:	a4098493          	addi	s1,s3,-1472 # 20002a40 <coap_json_value>
 80094aa:	478d                	li	a5,3
 80094ac:	00f480a3          	sb	a5,1(s1)
 80094b0:	8532                	mv	a0,a2
 80094b2:	f9df70ef          	jal	ra,800144e <strlen>
 80094b6:	00a49123          	sh	a0,2(s1)
 80094ba:	c480                	sw	s0,8(s1)
 80094bc:	a4098613          	addi	a2,s3,-1472
 80094c0:	85ca                	mv	a1,s2
 80094c2:	20003537          	lui	a0,0x20003
 80094c6:	9f050513          	addi	a0,a0,-1552 # 200029f0 <coap_json_encoder>
 80094ca:	f85fc0ef          	jal	ra,800644e <json_encode_object_entry>
}
 80094ce:	40f2                	lw	ra,28(sp)
 80094d0:	4462                	lw	s0,24(sp)
 80094d2:	44d2                	lw	s1,20(sp)
 80094d4:	4942                	lw	s2,16(sp)
 80094d6:	49b2                	lw	s3,12(sp)
 80094d8:	6105                	addi	sp,sp,32
 80094da:	8082                	ret
    assert(key);
 80094dc:	4681                	li	a3,0
 80094de:	4601                	li	a2,0
 80094e0:	4581                	li	a1,0
 80094e2:	4501                	li	a0,0
 80094e4:	aeffd0ef          	jal	ra,8006fd2 <__assert_func>
    assert(value);
 80094e8:	4681                	li	a3,0
 80094ea:	4601                	li	a2,0
 80094ec:	4581                	li	a1,0
 80094ee:	4501                	li	a0,0
 80094f0:	ae3fd0ef          	jal	ra,8006fd2 <__assert_func>

080094f4 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
 80094f4:	1141                	addi	sp,sp,-16
 80094f6:	c606                	sw	ra,12(sp)
    sysinit();
 80094f8:	e6bfc0ef          	jal	ra,8006362 <sysinit_start>
 80094fc:	28d1                	jal	80095d0 <sysinit_app>
 80094fe:	e71fc0ef          	jal	ra,800636e <sysinit_end>
}
 8009502:	40b2                	lw	ra,12(sp)
 8009504:	0141                	addi	sp,sp,16
 8009506:	8082                	ret

08009508 <get_temp_raw_data>:
#include <custom_sensor/custom_sensor.h>
#include <mynewt_rust/sensor_helper.h>

///  Interpret `sensor_data` as a `sensor_temp_raw_data` struct that contains raw temp.
///  Copy the sensor data into `dest`.  Return 0 if successful.
int get_temp_raw_data(void *sensor_data, struct sensor_temp_raw_data *dest) {
 8009508:	1141                	addi	sp,sp,-16
 800950a:	c606                	sw	ra,12(sp)
    assert(sensor_data); assert(dest);
 800950c:	c915                	beqz	a0,8009540 <get_temp_raw_data+0x38>
 800950e:	cd95                	beqz	a1,800954a <get_temp_raw_data+0x42>
    struct sensor_temp_raw_data *src = (struct sensor_temp_raw_data *) sensor_data;
    memcpy(dest, src, sizeof(struct sensor_temp_raw_data));
 8009510:	00054803          	lbu	a6,0(a0)
 8009514:	00154603          	lbu	a2,1(a0)
 8009518:	00254683          	lbu	a3,2(a0)
 800951c:	00354703          	lbu	a4,3(a0)
 8009520:	00454783          	lbu	a5,4(a0)
 8009524:	01058023          	sb	a6,0(a1)
 8009528:	00c580a3          	sb	a2,1(a1)
 800952c:	00d58123          	sb	a3,2(a1)
 8009530:	00e581a3          	sb	a4,3(a1)
 8009534:	00f58223          	sb	a5,4(a1)
    return 0;
}
 8009538:	4501                	li	a0,0
 800953a:	40b2                	lw	ra,12(sp)
 800953c:	0141                	addi	sp,sp,16
 800953e:	8082                	ret
    assert(sensor_data); assert(dest);
 8009540:	4681                	li	a3,0
 8009542:	4601                	li	a2,0
 8009544:	4581                	li	a1,0
 8009546:	a8dfd0ef          	jal	ra,8006fd2 <__assert_func>
 800954a:	4681                	li	a3,0
 800954c:	4601                	li	a2,0
 800954e:	4501                	li	a0,0
 8009550:	a83fd0ef          	jal	ra,8006fd2 <__assert_func>

08009554 <get_geolocation_data>:
    return 0;
}

///  Interpret `sensor_data` as a `sensor_geolocation_data` struct that contains geolocation.
///  Copy the sensor data into `dest`.  Return 0 if successful.
int get_geolocation_data(void *sensor_data, struct sensor_geolocation_data *dest) {
 8009554:	1141                	addi	sp,sp,-16
 8009556:	c606                	sw	ra,12(sp)
    assert(sensor_data); assert(dest);
 8009558:	cd01                	beqz	a0,8009570 <get_geolocation_data+0x1c>
 800955a:	87ae                	mv	a5,a1
 800955c:	cd99                	beqz	a1,800957a <get_geolocation_data+0x26>
    struct sensor_geolocation_data *src = (struct sensor_geolocation_data *) sensor_data;
    memcpy(dest, src, sizeof(struct sensor_geolocation_data));
 800955e:	466d                	li	a2,27
 8009560:	85aa                	mv	a1,a0
 8009562:	853e                	mv	a0,a5
 8009564:	e54ff0ef          	jal	ra,8008bb8 <memcpy>
    return 0;
}
 8009568:	4501                	li	a0,0
 800956a:	40b2                	lw	ra,12(sp)
 800956c:	0141                	addi	sp,sp,16
 800956e:	8082                	ret
    assert(sensor_data); assert(dest);
 8009570:	4681                	li	a3,0
 8009572:	4601                	li	a2,0
 8009574:	4581                	li	a1,0
 8009576:	a5dfd0ef          	jal	ra,8006fd2 <__assert_func>
 800957a:	4681                	li	a3,0
 800957c:	4601                	li	a2,0
 800957e:	4581                	li	a1,0
 8009580:	4501                	li	a0,0
 8009582:	a51fd0ef          	jal	ra,8006fd2 <__assert_func>

08009586 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
 8009586:	1101                	addi	sp,sp,-32
 8009588:	ce06                	sw	ra,28(sp)
 800958a:	cc22                	sw	s0,24(sp)
 800958c:	ca26                	sw	s1,20(sp)
 800958e:	c84a                	sw	s2,16(sp)
 8009590:	c64e                	sw	s3,12(sp)
 8009592:	842e                	mv	s0,a1
 8009594:	89b2                	mv	s3,a2
 8009596:	84ba                	mv	s1,a4
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
 8009598:	01069913          	slli	s2,a3,0x10
 800959c:	01095913          	srli	s2,s2,0x10
 80095a0:	873e                	mv	a4,a5
 80095a2:	86aa                	mv	a3,a0
 80095a4:	8626                	mv	a2,s1
 80095a6:	85ca                	mv	a1,s2
 80095a8:	8522                	mv	a0,s0
 80095aa:	827fe0ef          	jal	ra,8007dd0 <os_mempool_init>
    if (rc != 0) {
 80095ae:	c901                	beqz	a0,80095be <mem_init_mbuf_pool+0x38>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
 80095b0:	40f2                	lw	ra,28(sp)
 80095b2:	4462                	lw	s0,24(sp)
 80095b4:	44d2                	lw	s1,20(sp)
 80095b6:	4942                	lw	s2,16(sp)
 80095b8:	49b2                	lw	s3,12(sp)
 80095ba:	6105                	addi	sp,sp,32
 80095bc:	8082                	ret
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
 80095be:	86ca                	mv	a3,s2
 80095c0:	01049613          	slli	a2,s1,0x10
 80095c4:	8241                	srli	a2,a2,0x10
 80095c6:	85a2                	mv	a1,s0
 80095c8:	854e                	mv	a0,s3
 80095ca:	abafe0ef          	jal	ra,8007884 <os_mbuf_pool_init>
    if (rc != 0) {
 80095ce:	b7cd                	j	80095b0 <mem_init_mbuf_pool+0x2a>

080095d0 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
 80095d0:	1141                	addi	sp,sp,-16
 80095d2:	c606                	sw	ra,12(sp)
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
 80095d4:	c1ffd0ef          	jal	ra,80071f2 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
 80095d8:	739000ef          	jal	ra,800a510 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
 80095dc:	f4efb0ef          	jal	ra,8004d2a <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
 80095e0:	222010ef          	jal	ra,800a802 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
 80095e4:	7ab000ef          	jal	ra,800a58e <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
 80095e8:	ccbfc0ef          	jal	ra,80062b2 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
 80095ec:	623000ef          	jal	ra,800a40e <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
 80095f0:	621000ef          	jal	ra,800a410 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
 80095f4:	61f000ef          	jal	ra,800a412 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
 80095f8:	61d000ef          	jal	ra,800a414 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
 80095fc:	61b000ef          	jal	ra,800a416 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
 8009600:	265000ef          	jal	ra,800a064 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
 8009604:	d72fd0ef          	jal	ra,8006b76 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
 8009608:	3f7000ef          	jal	ra,800a1fe <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
 800960c:	8eafc0ef          	jal	ra,80056f6 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
 8009610:	9d5fb0ef          	jal	ra,8004fe4 <init_sensor_coap>
}
 8009614:	40b2                	lw	ra,12(sp)
 8009616:	0141                	addi	sp,sp,16
 8009618:	8082                	ret

0800961a <hal_bsp_flash_dev>:
    if (id >= ARRAY_SIZE(flash_devs)) {
        return NULL;
    }

    return flash_devs[id];
}
 800961a:	4501                	li	a0,0
 800961c:	8082                	ret

0800961e <hal_bsp_init>:
    return dump_cfg;
}

void
hal_bsp_init(void)
{
 800961e:	1141                	addi	sp,sp,-16
 8009620:	c606                	sw	ra,12(sp)
    int rc;

    (void)rc;
    gd32vf103_periph_create();
 8009622:	2069                	jal	80096ac <gd32vf103_periph_create>
        MYNEWT_VAL(BSP_FLASH_SPI_NAME), &flash_spi_cfg);

    assert(rc == 0);
#endif
#endif
}
 8009624:	40b2                	lw	ra,12(sp)
 8009626:	0141                	addi	sp,sp,16
 8009628:	8082                	ret

0800962a <_sbrk>:
    brk = base;
}

void *
_sbrk(int incr)
{
 800962a:	87aa                	mv	a5,a0
    void *prev_brk;

    if (incr < 0) {
 800962c:	02054263          	bltz	a0,8009650 <_sbrk+0x26>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
 8009630:	20000737          	lui	a4,0x20000
 8009634:	0ac70713          	addi	a4,a4,172 # 200000ac <sbrkBase>
 8009638:	4708                	lw	a0,8(a4)
 800963a:	4358                	lw	a4,4(a4)
 800963c:	8f09                	sub	a4,a4,a0
 800963e:	02f74a63          	blt	a4,a5,8009672 <_sbrk+0x48>
            prev_brk = brk;
            brk += incr;
 8009642:	97aa                	add	a5,a5,a0
 8009644:	20000737          	lui	a4,0x20000
 8009648:	0ac70713          	addi	a4,a4,172 # 200000ac <sbrkBase>
 800964c:	c71c                	sw	a5,8(a4)
 800964e:	8082                	ret
        if (brk - incr < sbrkBase) {
 8009650:	20000737          	lui	a4,0x20000
 8009654:	0ac70713          	addi	a4,a4,172 # 200000ac <sbrkBase>
 8009658:	4708                	lw	a0,8(a4)
 800965a:	97aa                	add	a5,a5,a0
 800965c:	4318                	lw	a4,0(a4)
 800965e:	00e7e863          	bltu	a5,a4,800966e <_sbrk+0x44>
            brk -= incr;
 8009662:	20000737          	lui	a4,0x20000
 8009666:	0ac70713          	addi	a4,a4,172 # 200000ac <sbrkBase>
 800966a:	c71c                	sw	a5,8(a4)
 800966c:	8082                	ret
            prev_brk = (void *)-1;
 800966e:	557d                	li	a0,-1
 8009670:	8082                	ret
        } else {
            prev_brk = (void *)-1;
 8009672:	557d                	li	a0,-1
        }
    }

    return prev_brk;
}
 8009674:	8082                	ret

08009676 <gd32vf103_periph_create_timers>:
#endif
#endif

static void
gd32vf103_periph_create_timers(void)
{
 8009676:	1141                	addi	sp,sp,-16
 8009678:	c606                	sw	ra,12(sp)
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    hal_timer_init(0, NULL);
 800967a:	4581                	li	a1,0
 800967c:	4501                	li	a0,0
 800967e:	222d                	jal	80097a8 <hal_timer_init>
#endif

#if MYNEWT_VAL(TIMER_1)
    hal_timer_init(1, NULL);
 8009680:	4581                	li	a1,0
 8009682:	4505                	li	a0,1
 8009684:	2215                	jal	80097a8 <hal_timer_init>
#endif

#if MYNEWT_VAL(TIMER_2)
    hal_timer_init(2, NULL);
 8009686:	4581                	li	a1,0
 8009688:	4509                	li	a0,2
 800968a:	2a39                	jal	80097a8 <hal_timer_init>
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
 800968c:	000f4537          	lui	a0,0xf4
 8009690:	24050513          	addi	a0,a0,576 # f4240 <__stack_size+0xf3a40>
 8009694:	d4ffd0ef          	jal	ra,80073e2 <os_cputime_init>
    assert(rc == 0);
 8009698:	e501                	bnez	a0,80096a0 <gd32vf103_periph_create_timers+0x2a>
#endif
}
 800969a:	40b2                	lw	ra,12(sp)
 800969c:	0141                	addi	sp,sp,16
 800969e:	8082                	ret
    assert(rc == 0);
 80096a0:	4681                	li	a3,0
 80096a2:	4601                	li	a2,0
 80096a4:	4581                	li	a1,0
 80096a6:	4501                	li	a0,0
 80096a8:	92bfd0ef          	jal	ra,8006fd2 <__assert_func>

080096ac <gd32vf103_periph_create>:
#endif
}

void
gd32vf103_periph_create(void)
{
 80096ac:	1141                	addi	sp,sp,-16
 80096ae:	c606                	sw	ra,12(sp)
    gd32vf103_periph_create_timers();
 80096b0:	fc7ff0ef          	jal	ra,8009676 <gd32vf103_periph_create_timers>
    gd32vf103_periph_create_uart();
    gd32vf103_periph_create_spi();
}
 80096b4:	40b2                	lw	ra,12(sp)
 80096b6:	0141                	addi	sp,sp,16
 80096b8:	8082                	ret

080096ba <set_mtimecmp>:

//  From repos/apache-mynewt-core/kernel/os/src/arch/rv32imac/os_arch_rv32imac.c
void
set_mtimecmp(uint64_t time)
{
    CLINT_REG(CLINT_MTIMECMP + 4) = -1;
 80096ba:	d10007b7          	lui	a5,0xd1000
 80096be:	577d                	li	a4,-1
 80096c0:	c7d8                	sw	a4,12(a5)
    CLINT_REG(CLINT_MTIMECMP) = (uint32_t) time;
 80096c2:	c788                	sw	a0,8(a5)
    CLINT_REG(CLINT_MTIMECMP + 4) = (uint32_t) (time >> 32);
 80096c4:	c7cc                	sw	a1,12(a5)
}
 80096c6:	8082                	ret

080096c8 <os_tick_init>:
{
 80096c8:	1141                	addi	sp,sp,-16
 80096ca:	c606                	sw	ra,12(sp)
 80096cc:	c422                	sw	s0,8(sp)
    ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
 80096ce:	67a1                	lui	a5,0x8
 80096d0:	02a7d533          	divu	a0,a5,a0
 80096d4:	89818413          	addi	s0,gp,-1896 # 200005b8 <ticks_per_ostick>
 80096d8:	c008                	sw	a0,0(s0)
    last_tick_time = get_timer_value();
 80096da:	7ee000ef          	jal	ra,8009ec8 <get_timer_value>
 80096de:	89018793          	addi	a5,gp,-1904 # 200005b0 <last_tick_time>
 80096e2:	c388                	sw	a0,0(a5)
 80096e4:	c3cc                	sw	a1,4(a5)
    set_mtimecmp(last_tick_time + ticks_per_ostick);
 80096e6:	401c                	lw	a5,0(s0)
 80096e8:	953e                	add	a0,a0,a5
 80096ea:	00f537b3          	sltu	a5,a0,a5
 80096ee:	95be                	add	a1,a1,a5
 80096f0:	fcbff0ef          	jal	ra,80096ba <set_mtimecmp>
    set_csr(mie, MIP_MTIP);
 80096f4:	08000793          	li	a5,128
 80096f8:	3047a7f3          	csrrs	a5,mie,a5
}
 80096fc:	40b2                	lw	ra,12(sp)
 80096fe:	4422                	lw	s0,8(sp)
 8009700:	0141                	addi	sp,sp,16
 8009702:	8082                	ret

08009704 <timer_interrupt_handler>:
{
 8009704:	1141                	addi	sp,sp,-16
 8009706:	c606                	sw	ra,12(sp)
 8009708:	c422                	sw	s0,8(sp)
    uint64_t time = get_timer_value();
 800970a:	7be000ef          	jal	ra,8009ec8 <get_timer_value>
    delta = (int)(time - last_tick_time);
 800970e:	89018713          	addi	a4,gp,-1904 # 200005b0 <last_tick_time>
 8009712:	431c                	lw	a5,0(a4)
 8009714:	4354                	lw	a3,4(a4)
 8009716:	8d1d                	sub	a0,a0,a5
    ticks = (int)(delta / ticks_per_ostick);
 8009718:	8981a583          	lw	a1,-1896(gp) # 200005b8 <ticks_per_ostick>
 800971c:	02b55433          	divu	s0,a0,a1
    last_tick_time += ticks * ticks_per_ostick;
 8009720:	02858533          	mul	a0,a1,s0
 8009724:	953e                	add	a0,a0,a5
 8009726:	00f537b3          	sltu	a5,a0,a5
 800972a:	97b6                	add	a5,a5,a3
 800972c:	c308                	sw	a0,0(a4)
 800972e:	c35c                	sw	a5,4(a4)
    set_mtimecmp(last_tick_time + ticks_per_ostick);
 8009730:	952e                	add	a0,a0,a1
 8009732:	00b535b3          	sltu	a1,a0,a1
 8009736:	95be                	add	a1,a1,a5
 8009738:	f83ff0ef          	jal	ra,80096ba <set_mtimecmp>
    os_time_advance(ticks);
 800973c:	8522                	mv	a0,s0
 800973e:	9d2ff0ef          	jal	ra,8008910 <os_time_advance>
}
 8009742:	40b2                	lw	ra,12(sp)
 8009744:	4422                	lw	s0,8(sp)
 8009746:	0141                	addi	sp,sp,16
 8009748:	8082                	ret

0800974a <os_tick_idle>:
{
 800974a:	1141                	addi	sp,sp,-16
 800974c:	c606                	sw	ra,12(sp)
 800974e:	c422                	sw	s0,8(sp)
 8009750:	842a                	mv	s0,a0
    if (MYNEWT_VAL(OS_TICKLESS_SLEEP) && ticks > 1) {
 8009752:	4785                	li	a5,1
 8009754:	00a7e963          	bltu	a5,a0,8009766 <os_tick_idle+0x1c>
    if (MYNEWT_VAL(OS_TICKLESS_SLEEP) && ticks > 1) {
 8009758:	4785                	li	a5,1
 800975a:	0287e563          	bltu	a5,s0,8009784 <os_tick_idle+0x3a>
}
 800975e:	40b2                	lw	ra,12(sp)
 8009760:	4422                	lw	s0,8(sp)
 8009762:	0141                	addi	sp,sp,16
 8009764:	8082                	ret
        set_mtimecmp(last_tick_time + ticks_per_ostick * ticks);
 8009766:	8981a783          	lw	a5,-1896(gp) # 200005b8 <ticks_per_ostick>
 800976a:	02f507b3          	mul	a5,a0,a5
 800976e:	89018713          	addi	a4,gp,-1904 # 200005b0 <last_tick_time>
 8009772:	4308                	lw	a0,0(a4)
 8009774:	434c                	lw	a1,4(a4)
 8009776:	953e                	add	a0,a0,a5
 8009778:	00f537b3          	sltu	a5,a0,a5
 800977c:	95be                	add	a1,a1,a5
 800977e:	f3dff0ef          	jal	ra,80096ba <set_mtimecmp>
 8009782:	bfd9                	j	8009758 <os_tick_idle+0xe>
        timer_interrupt_handler();
 8009784:	f81ff0ef          	jal	ra,8009704 <timer_interrupt_handler>
}
 8009788:	bfd9                	j	800975e <os_tick_idle+0x14>

0800978a <hal_timer_cnt>:
    return NSEC_PER_SEC / (SystemCoreClock / prescaler);
}

static uint32_t
hal_timer_cnt(struct gd32vf103_hal_tmr *tmr)
{
 800978a:	1141                	addi	sp,sp,-16
 800978c:	c606                	sw	ra,12(sp)
 800978e:	c422                	sw	s0,8(sp)
    uint32_t cnt;
    int sr;

    __HAL_DISABLE_INTERRUPTS(sr);
 8009790:	30047473          	csrrci	s0,mstatus,8
 8009794:	8821                	andi	s0,s0,8
    if (tmr->sht_regs->SR & TIM_SR_UIF) {
        tmr->sht_oflow += STM32_OFLOW_VALUE;
        tmr->sht_regs->SR &= ~TIM_SR_UIF;
    }
    cnt = tmr->sht_oflow + tmr->sht_regs->CNT; */
    cnt = timer_counter_read(tmr->periph);
 8009796:	4108                	lw	a0,0(a0)
 8009798:	2ec5                	jal	8009b88 <timer_counter_read>
    __HAL_ENABLE_INTERRUPTS(sr);
 800979a:	c019                	beqz	s0,80097a0 <hal_timer_cnt+0x16>
 800979c:	300467f3          	csrrsi	a5,mstatus,8

    return cnt;
}
 80097a0:	40b2                	lw	ra,12(sp)
 80097a2:	4422                	lw	s0,8(sp)
 80097a4:	0141                	addi	sp,sp,16
 80097a6:	8082                	ret

080097a8 <hal_timer_init>:
    if (timer_num >= GD32VF103_HAL_TIMER_MAX 
 80097a8:	4789                	li	a5,2
 80097aa:	00a7cd63          	blt	a5,a0,80097c4 <hal_timer_init+0x1c>
        || !(tmr = gd32vf103_tmr_devs[timer_num])) {
 80097ae:	00251793          	slli	a5,a0,0x2
 80097b2:	0800d537          	lui	a0,0x800d
 80097b6:	6fc50513          	addi	a0,a0,1788 # 800d6fc <gd32vf103_tmr_devs>
 80097ba:	953e                	add	a0,a0,a5
 80097bc:	411c                	lw	a5,0(a0)
 80097be:	c789                	beqz	a5,80097c8 <hal_timer_init+0x20>
    return 0;
 80097c0:	4501                	li	a0,0
 80097c2:	8082                	ret
        return -1;
 80097c4:	557d                	li	a0,-1
 80097c6:	8082                	ret
 80097c8:	557d                	li	a0,-1
}
 80097ca:	8082                	ret

080097cc <hal_timer_config>:
    if (timer_num >= GD32VF103_HAL_TIMER_MAX || !(tmr = gd32vf103_tmr_devs[timer_num])) {
 80097cc:	4789                	li	a5,2
 80097ce:	0ca7c163          	blt	a5,a0,8009890 <hal_timer_config+0xc4>
{
 80097d2:	7179                	addi	sp,sp,-48
 80097d4:	d606                	sw	ra,44(sp)
 80097d6:	d422                	sw	s0,40(sp)
 80097d8:	d226                	sw	s1,36(sp)
 80097da:	d04a                	sw	s2,32(sp)
    if (timer_num >= GD32VF103_HAL_TIMER_MAX || !(tmr = gd32vf103_tmr_devs[timer_num])) {
 80097dc:	00251793          	slli	a5,a0,0x2
 80097e0:	0800d537          	lui	a0,0x800d
 80097e4:	6fc50513          	addi	a0,a0,1788 # 800d6fc <gd32vf103_tmr_devs>
 80097e8:	953e                	add	a0,a0,a5
 80097ea:	4100                	lw	s0,0(a0)
 80097ec:	c445                	beqz	s0,8009894 <hal_timer_config+0xc8>
 80097ee:	892e                	mv	s2,a1
    eclic_global_interrupt_enable();
 80097f0:	2ab9                	jal	800994e <eclic_global_interrupt_enable>
    eclic_set_nlbits(ECLIC_GROUP_LEVEL3_PRIO1);
 80097f2:	450d                	li	a0,3
 80097f4:	780000ef          	jal	ra,8009f74 <eclic_set_nlbits>
    eclic_irq_enable(tmr->irq, 1, 0);
 80097f8:	4601                	li	a2,0
 80097fa:	4585                	li	a1,1
 80097fc:	4408                	lw	a0,8(s0)
 80097fe:	2a99                	jal	8009954 <eclic_irq_enable>
    uint32_t prescaler = SystemCoreClock / freq_hz;
 8009800:	200007b7          	lui	a5,0x20000
 8009804:	5207a483          	lw	s1,1312(a5) # 20000520 <SystemCoreClock>
 8009808:	0324d4b3          	divu	s1,s1,s2
    if (prescaler > 0xffff) {
 800980c:	67c1                	lui	a5,0x10
 800980e:	06f4fb63          	bgeu	s1,a5,8009884 <hal_timer_config+0xb8>
    rcu_periph_clock_enable(tmr->rcu);
 8009812:	4048                	lw	a0,4(s0)
 8009814:	22ad                	jal	800997e <rcu_periph_clock_enable>
    timer_deinit(tmr->periph);
 8009816:	4008                	lw	a0,0(s0)
 8009818:	2a4d                	jal	80099ca <timer_deinit>
    timer_struct_para_init(&timer_initpara);
 800981a:	0808                	addi	a0,sp,16
 800981c:	2479                	jal	8009aaa <timer_struct_para_init>
    timer_initpara.prescaler         = prescaler;         //  Previously 5399
 800981e:	00911823          	sh	s1,16(sp)
    timer_initpara.alignedmode       = TIMER_COUNTER_EDGE;
 8009822:	00011923          	sh	zero,18(sp)
    timer_initpara.counterdirection  = TIMER_COUNTER_UP;  //  Count starts from 0
 8009826:	00011a23          	sh	zero,20(sp)
    timer_initpara.period            = 1;                 //  Count ends at 1, previously 4000
 800982a:	4485                	li	s1,1
 800982c:	cc26                	sw	s1,24(sp)
    timer_initpara.clockdivision     = TIMER_CKDIV_DIV1;
 800982e:	00011e23          	sh	zero,28(sp)
    timer_init(tmr->periph, &timer_initpara);
 8009832:	080c                	addi	a1,sp,16
 8009834:	4008                	lw	a0,0(s0)
 8009836:	2c41                	jal	8009ac6 <timer_init>
    timer_channel_output_struct_para_init(&timer_ocinitpara);
 8009838:	0048                	addi	a0,sp,4
 800983a:	2e89                	jal	8009b8c <timer_channel_output_struct_para_init>
    timer_ocinitpara.outputstate  = TIMER_CCX_ENABLE;
 800983c:	00911223          	sh	s1,4(sp)
    timer_ocinitpara.ocpolarity   = TIMER_OC_POLARITY_HIGH;
 8009840:	00011423          	sh	zero,8(sp)
    timer_ocinitpara.ocidlestate  = TIMER_OC_IDLE_STATE_LOW;
 8009844:	00011623          	sh	zero,12(sp)
    timer_channel_output_config(            tmr->periph, TIMER_CH_0, &timer_ocinitpara);
 8009848:	0050                	addi	a2,sp,4
 800984a:	4581                	li	a1,0
 800984c:	4008                	lw	a0,0(s0)
 800984e:	2ea1                	jal	8009ba6 <timer_channel_output_config>
    timer_channel_output_pulse_value_config(tmr->periph, TIMER_CH_0, 2000);  //  TODO: Why 2000
 8009850:	7d000613          	li	a2,2000
 8009854:	4581                	li	a1,0
 8009856:	4008                	lw	a0,0(s0)
 8009858:	23e1                	jal	8009e20 <timer_channel_output_pulse_value_config>
    timer_channel_output_mode_config(       tmr->periph, TIMER_CH_0, TIMER_OC_MODE_TIMING);
 800985a:	4601                	li	a2,0
 800985c:	4581                	li	a1,0
 800985e:	4008                	lw	a0,0(s0)
 8009860:	2bb1                	jal	8009dbc <timer_channel_output_mode_config>
    timer_channel_output_shadow_config(     TIMER1, TIMER_CH_0, TIMER_OC_SHADOW_DISABLE);
 8009862:	4601                	li	a2,0
 8009864:	4581                	li	a1,0
 8009866:	40000537          	lui	a0,0x40000
 800986a:	23cd                	jal	8009e4c <timer_channel_output_shadow_config>
    timer_interrupt_enable(                 tmr->periph, TIMER_INT_CH0);
 800986c:	4589                	li	a1,2
 800986e:	4008                	lw	a0,0(s0)
 8009870:	2581                	jal	8009eb0 <timer_interrupt_enable>
    timer_enable(                           tmr->periph);
 8009872:	4008                	lw	a0,0(s0)
 8009874:	2629                	jal	8009b7e <timer_enable>
    return 0;
 8009876:	4501                	li	a0,0
}
 8009878:	50b2                	lw	ra,44(sp)
 800987a:	5422                	lw	s0,40(sp)
 800987c:	5492                	lw	s1,36(sp)
 800987e:	5902                	lw	s2,32(sp)
 8009880:	6145                	addi	sp,sp,48
 8009882:	8082                	ret
        assert(0);
 8009884:	4681                	li	a3,0
 8009886:	4601                	li	a2,0
 8009888:	4581                	li	a1,0
 800988a:	4501                	li	a0,0
 800988c:	f46fd0ef          	jal	ra,8006fd2 <__assert_func>
        return -1;
 8009890:	557d                	li	a0,-1
}
 8009892:	8082                	ret
        return -1;
 8009894:	557d                	li	a0,-1
 8009896:	b7cd                	j	8009878 <hal_timer_config+0xac>

08009898 <hal_timer_read>:
uint32_t
hal_timer_read(int timer_num)
{
    struct gd32vf103_hal_tmr *tmr;

    if (timer_num >= GD32VF103_HAL_TIMER_MAX || !(tmr = gd32vf103_tmr_devs[timer_num])) {
 8009898:	4789                	li	a5,2
 800989a:	02a7c263          	blt	a5,a0,80098be <hal_timer_read+0x26>
 800989e:	00251793          	slli	a5,a0,0x2
 80098a2:	0800d537          	lui	a0,0x800d
 80098a6:	6fc50513          	addi	a0,a0,1788 # 800d6fc <gd32vf103_tmr_devs>
 80098aa:	953e                	add	a0,a0,a5
 80098ac:	4108                	lw	a0,0(a0)
 80098ae:	c911                	beqz	a0,80098c2 <hal_timer_read+0x2a>
{
 80098b0:	1141                	addi	sp,sp,-16
 80098b2:	c606                	sw	ra,12(sp)
        return -1;
    }

    return hal_timer_cnt(tmr);
 80098b4:	ed7ff0ef          	jal	ra,800978a <hal_timer_cnt>
}
 80098b8:	40b2                	lw	ra,12(sp)
 80098ba:	0141                	addi	sp,sp,16
 80098bc:	8082                	ret
        return -1;
 80098be:	557d                	li	a0,-1
 80098c0:	8082                	ret
 80098c2:	557d                	li	a0,-1
}
 80098c4:	8082                	ret

080098c6 <hal_watchdog_init>:
    AON_REG(AON_WDOGCMP) = (uint32_t)expiration;
#endif /* WATCHDOG_STUB */
#endif  //  TODO

    return 0;
}
 80098c6:	4501                	li	a0,0
 80098c8:	8082                	ret

080098ca <hal_watchdog_enable>:
#ifdef TODO  ////
    AON_REG(AON_WDOGKEY) = AON_WDOGKEY_VALUE;
    AON_REG(AON_WDOGCFG) |= AON_WDOGCFG_ENCOREAWAKE;
#endif  //  TODO
#endif
}
 80098ca:	8082                	ret

080098cc <hal_watchdog_tickle>:
#ifdef TODO  ////
    AON_REG(AON_WDOGKEY) = AON_WDOGKEY_VALUE;
    AON_REG(AON_WDOGFEED) = AON_WDOGFEED_VALUE;
#endif  //  TODO
#endif
}
 80098cc:	8082                	ret

080098ce <os_arch_os_init>:

#define OS_TICK_PRIO 0

os_error_t
os_arch_os_init(void)
{
 80098ce:	1141                	addi	sp,sp,-16
 80098d0:	c606                	sw	ra,12(sp)
 80098d2:	c422                	sw	s0,8(sp)
    os_error_t err = OS_OK;

	//  Enable the ECLIC unit for handling interrupts.
	eclic_init(ECLIC_NUM_INTERRUPTS);
 80098d4:	05700513          	li	a0,87
 80098d8:	2d29                	jal	8009ef2 <eclic_init>
	eclic_mode_enable();
 80098da:	778000ef          	jal	ra,800a052 <eclic_mode_enable>
	//  printf("After ECLIC mode enabled, the mtvec value is %x \n\n\r", read_csr(mtvec));

    //  Before enter into main, add the cycle/instret disable by default to save power,
    //  only use them when needed to measure the cycle/instret
	disable_mcycle_minstret();
 80098de:	949f70ef          	jal	ra,8001226 <disable_mcycle_minstret>
    processing mode, please refer to Section 5.13.1 */

    //  Set all external interrupts to default handler. 
    //  For External Interrupts we are using trap_entry() at mtvec.
    int i;
    for (i = 0; i < ECLIC_NUM_INTERRUPTS; ++i) {
 80098e2:	4401                	li	s0,0
 80098e4:	05600793          	li	a5,86
 80098e8:	0287c363          	blt	a5,s0,800990e <os_arch_os_init+0x40>
        plic_interrupts[i] = plic_default_isr;
 80098ec:	00241793          	slli	a5,s0,0x2
 80098f0:	20003737          	lui	a4,0x20003
 80098f4:	bc470713          	addi	a4,a4,-1084 # 20002bc4 <plic_interrupts>
 80098f8:	97ba                	add	a5,a5,a4
 80098fa:	08007737          	lui	a4,0x8007
 80098fe:	00870713          	addi	a4,a4,8 # 8007008 <plic_default_isr>
 8009902:	c398                	sw	a4,0(a5)
        //  Default priority set to 0, never interrupt
        eclic_set_irq_priority(i, 0);
 8009904:	4581                	li	a1,0
 8009906:	8522                	mv	a0,s0
 8009908:	2dd5                	jal	8009ffc <eclic_set_irq_priority>
    for (i = 0; i < ECLIC_NUM_INTERRUPTS; ++i) {
 800990a:	0405                	addi	s0,s0,1
 800990c:	bfe1                	j	80098e4 <os_arch_os_init+0x16>
    }

    //  Disable all interrupts
    for (i = 0; i < ECLIC_NUM_INTERRUPTS; ++i) {
 800990e:	4401                	li	s0,0
 8009910:	05600793          	li	a5,86
 8009914:	0087c663          	blt	a5,s0,8009920 <os_arch_os_init+0x52>
        eclic_disable_interrupt(i);
 8009918:	8522                	mv	a0,s0
 800991a:	2531                	jal	8009f26 <eclic_disable_interrupt>
    for (i = 0; i < ECLIC_NUM_INTERRUPTS; ++i) {
 800991c:	0405                	addi	s0,s0,1
 800991e:	bfcd                	j	8009910 <os_arch_os_init+0x42>
    }

    //  Enable interrupts at 0 level (min threshold = 0)
    eclic_set_mth(0);
 8009920:	4501                	li	a0,0
 8009922:	25a1                	jal	8009f6a <eclic_set_mth>

    //  Set main trap handler, which will call external_interrupt_handler() for external interrupts.
    write_csr(mtvec, &trap_entry);
 8009924:	0800a7b7          	lui	a5,0x800a
 8009928:	06878793          	addi	a5,a5,104 # 800a068 <trap_entry>
 800992c:	30579073          	csrw	mtvec,a5

    os_arch_init();
 8009930:	e32fd0ef          	jal	ra,8006f62 <os_arch_init>

    return err;
}
 8009934:	4501                	li	a0,0
 8009936:	40b2                	lw	ra,12(sp)
 8009938:	4422                	lw	s0,8(sp)
 800993a:	0141                	addi	sp,sp,16
 800993c:	8082                	ret

0800993e <external_interrupt_handler>:
    }
}

void
external_interrupt_handler(uintptr_t mcause)
{
 800993e:	1141                	addi	sp,sp,-16
 8009940:	c606                	sw	ra,12(sp)
    assert(0);  //  TODO: Handle external interrupt
 8009942:	4681                	li	a3,0
 8009944:	4601                	li	a2,0
 8009946:	4581                	li	a1,0
 8009948:	4501                	li	a0,0
 800994a:	e88fd0ef          	jal	ra,8006fd2 <__assert_func>

0800994e <eclic_global_interrupt_enable>:
    \retval     none
*/
void eclic_global_interrupt_enable(void)
{
    /* set machine interrupt enable bit */
    set_csr(mstatus, MSTATUS_MIE);
 800994e:	300467f3          	csrrsi	a5,mstatus,8
}
 8009952:	8082                	ret

08009954 <eclic_irq_enable>:
    \param[in]  priority: the priority needed to set (maximum is 15, refer to the priority group)
    \param[out] none
    \retval     none
*/
void eclic_irq_enable(uint32_t source, uint8_t level, uint8_t priority)
{
 8009954:	1141                	addi	sp,sp,-16
 8009956:	c606                	sw	ra,12(sp)
 8009958:	c422                	sw	s0,8(sp)
 800995a:	c226                	sw	s1,4(sp)
 800995c:	c04a                	sw	s2,0(sp)
 800995e:	842a                	mv	s0,a0
 8009960:	892e                	mv	s2,a1
 8009962:	84b2                	mv	s1,a2
    eclic_enable_interrupt(source);
 8009964:	2b45                	jal	8009f14 <eclic_enable_interrupt>
    eclic_set_irq_lvl_abs(source, level);
 8009966:	85ca                	mv	a1,s2
 8009968:	8522                	mv	a0,s0
 800996a:	2581                	jal	8009faa <eclic_set_irq_lvl_abs>
    eclic_set_irq_priority(source, priority);
 800996c:	85a6                	mv	a1,s1
 800996e:	8522                	mv	a0,s0
 8009970:	2571                	jal	8009ffc <eclic_set_irq_priority>
}
 8009972:	40b2                	lw	ra,12(sp)
 8009974:	4422                	lw	s0,8(sp)
 8009976:	4492                	lw	s1,4(sp)
 8009978:	4902                	lw	s2,0(sp)
 800997a:	0141                	addi	sp,sp,16
 800997c:	8082                	ret

0800997e <rcu_periph_clock_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_clock_enable(rcu_periph_enum periph)
{
    RCU_REG_VAL(periph) |= BIT(RCU_BIT_POS(periph));
 800997e:	00655793          	srli	a5,a0,0x6
 8009982:	40021737          	lui	a4,0x40021
 8009986:	97ba                	add	a5,a5,a4
 8009988:	4398                	lw	a4,0(a5)
 800998a:	4685                	li	a3,1
 800998c:	00a696b3          	sll	a3,a3,a0
 8009990:	8f55                	or	a4,a4,a3
 8009992:	c398                	sw	a4,0(a5)
}
 8009994:	8082                	ret

08009996 <rcu_periph_reset_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_reset_enable(rcu_periph_reset_enum periph_reset)
{
    RCU_REG_VAL(periph_reset) |= BIT(RCU_BIT_POS(periph_reset));
 8009996:	00655793          	srli	a5,a0,0x6
 800999a:	40021737          	lui	a4,0x40021
 800999e:	97ba                	add	a5,a5,a4
 80099a0:	4398                	lw	a4,0(a5)
 80099a2:	4685                	li	a3,1
 80099a4:	00a696b3          	sll	a3,a3,a0
 80099a8:	8f55                	or	a4,a4,a3
 80099aa:	c398                	sw	a4,0(a5)
}
 80099ac:	8082                	ret

080099ae <rcu_periph_reset_disable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_reset_disable(rcu_periph_reset_enum periph_reset)
{
    RCU_REG_VAL(periph_reset) &= ~BIT(RCU_BIT_POS(periph_reset));
 80099ae:	00655713          	srli	a4,a0,0x6
 80099b2:	400217b7          	lui	a5,0x40021
 80099b6:	973e                	add	a4,a4,a5
 80099b8:	4314                	lw	a3,0(a4)
 80099ba:	4785                	li	a5,1
 80099bc:	00a797b3          	sll	a5,a5,a0
 80099c0:	fff7c793          	not	a5,a5
 80099c4:	8ff5                	and	a5,a5,a3
 80099c6:	c31c                	sw	a5,0(a4)
}
 80099c8:	8082                	ret

080099ca <timer_deinit>:
    \param[in]  timer_periph: TIMERx(x=0..6)
    \param[out] none
    \retval     none
*/
void timer_deinit(uint32_t timer_periph)
{
 80099ca:	1141                	addi	sp,sp,-16
 80099cc:	c606                	sw	ra,12(sp)
    switch(timer_periph){
 80099ce:	400017b7          	lui	a5,0x40001
 80099d2:	c0078793          	addi	a5,a5,-1024 # 40000c00 <_sp+0x1fffbc00>
 80099d6:	0af50863          	beq	a0,a5,8009a86 <timer_deinit+0xbc>
 80099da:	400017b7          	lui	a5,0x40001
 80099de:	c0078793          	addi	a5,a5,-1024 # 40000c00 <_sp+0x1fffbc00>
 80099e2:	02a7e563          	bltu	a5,a0,8009a0c <timer_deinit+0x42>
 80099e6:	400007b7          	lui	a5,0x40000
 80099ea:	40078793          	addi	a5,a5,1024 # 40000400 <_sp+0x1fffb400>
 80099ee:	06f50a63          	beq	a0,a5,8009a62 <timer_deinit+0x98>
 80099f2:	400017b7          	lui	a5,0x40001
 80099f6:	80078793          	addi	a5,a5,-2048 # 40000800 <_sp+0x1fffb800>
 80099fa:	06f50d63          	beq	a0,a5,8009a74 <timer_deinit+0xaa>
 80099fe:	400007b7          	lui	a5,0x40000
 8009a02:	04f50763          	beq	a0,a5,8009a50 <timer_deinit+0x86>
        break;

    default:
        break;
    }
}
 8009a06:	40b2                	lw	ra,12(sp)
 8009a08:	0141                	addi	sp,sp,16
 8009a0a:	8082                	ret
 8009a0c:	400017b7          	lui	a5,0x40001
 8009a10:	40078793          	addi	a5,a5,1024 # 40001400 <_sp+0x1fffc400>
 8009a14:	08f50263          	beq	a0,a5,8009a98 <timer_deinit+0xce>
 8009a18:	400137b7          	lui	a5,0x40013
 8009a1c:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_sp+0x2000dc00>
 8009a20:	00f50f63          	beq	a0,a5,8009a3e <timer_deinit+0x74>
 8009a24:	400017b7          	lui	a5,0x40001
 8009a28:	fcf51fe3          	bne	a0,a5,8009a06 <timer_deinit+0x3c>
        rcu_periph_reset_enable(RCU_TIMER5RST);
 8009a2c:	40400513          	li	a0,1028
 8009a30:	f67ff0ef          	jal	ra,8009996 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER5RST);
 8009a34:	40400513          	li	a0,1028
 8009a38:	f77ff0ef          	jal	ra,80099ae <rcu_periph_reset_disable>
        break;
 8009a3c:	b7e9                	j	8009a06 <timer_deinit+0x3c>
        rcu_periph_reset_enable(RCU_TIMER0RST);
 8009a3e:	30b00513          	li	a0,779
 8009a42:	f55ff0ef          	jal	ra,8009996 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER0RST);
 8009a46:	30b00513          	li	a0,779
 8009a4a:	f65ff0ef          	jal	ra,80099ae <rcu_periph_reset_disable>
        break;
 8009a4e:	bf65                	j	8009a06 <timer_deinit+0x3c>
        rcu_periph_reset_enable(RCU_TIMER1RST);
 8009a50:	40000513          	li	a0,1024
 8009a54:	f43ff0ef          	jal	ra,8009996 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER1RST);
 8009a58:	40000513          	li	a0,1024
 8009a5c:	f53ff0ef          	jal	ra,80099ae <rcu_periph_reset_disable>
        break;
 8009a60:	b75d                	j	8009a06 <timer_deinit+0x3c>
        rcu_periph_reset_enable(RCU_TIMER2RST);
 8009a62:	40100513          	li	a0,1025
 8009a66:	f31ff0ef          	jal	ra,8009996 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER2RST);
 8009a6a:	40100513          	li	a0,1025
 8009a6e:	f41ff0ef          	jal	ra,80099ae <rcu_periph_reset_disable>
        break;
 8009a72:	bf51                	j	8009a06 <timer_deinit+0x3c>
        rcu_periph_reset_enable(RCU_TIMER3RST);
 8009a74:	40200513          	li	a0,1026
 8009a78:	f1fff0ef          	jal	ra,8009996 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER3RST);
 8009a7c:	40200513          	li	a0,1026
 8009a80:	f2fff0ef          	jal	ra,80099ae <rcu_periph_reset_disable>
        break;
 8009a84:	b749                	j	8009a06 <timer_deinit+0x3c>
        rcu_periph_reset_enable(RCU_TIMER4RST);
 8009a86:	40300513          	li	a0,1027
 8009a8a:	f0dff0ef          	jal	ra,8009996 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER4RST);
 8009a8e:	40300513          	li	a0,1027
 8009a92:	f1dff0ef          	jal	ra,80099ae <rcu_periph_reset_disable>
        break;
 8009a96:	bf85                	j	8009a06 <timer_deinit+0x3c>
        rcu_periph_reset_enable(RCU_TIMER6RST);
 8009a98:	40500513          	li	a0,1029
 8009a9c:	efbff0ef          	jal	ra,8009996 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_TIMER6RST);
 8009aa0:	40500513          	li	a0,1029
 8009aa4:	f0bff0ef          	jal	ra,80099ae <rcu_periph_reset_disable>
}
 8009aa8:	bfb9                	j	8009a06 <timer_deinit+0x3c>

08009aaa <timer_struct_para_init>:
    \retval     none
*/
void timer_struct_para_init(timer_parameter_struct* initpara)
{
    /* initialize the init parameter struct member with the default value */
    initpara->prescaler         = 0U;
 8009aaa:	00051023          	sh	zero,0(a0)
    initpara->alignedmode       = TIMER_COUNTER_EDGE;
 8009aae:	00051123          	sh	zero,2(a0)
    initpara->counterdirection  = TIMER_COUNTER_UP;
 8009ab2:	00051223          	sh	zero,4(a0)
    initpara->period            = 65535U;
 8009ab6:	67c1                	lui	a5,0x10
 8009ab8:	17fd                	addi	a5,a5,-1
 8009aba:	c51c                	sw	a5,8(a0)
    initpara->clockdivision     = TIMER_CKDIV_DIV1;
 8009abc:	00051623          	sh	zero,12(a0)
    initpara->repetitioncounter = 0U;
 8009ac0:	00050723          	sb	zero,14(a0)
}
 8009ac4:	8082                	ret

08009ac6 <timer_init>:
    \retval     none
*/
void timer_init(uint32_t timer_periph, timer_parameter_struct* initpara)
{
    /* configure the counter prescaler value */
    TIMER_PSC(timer_periph) = (uint16_t)initpara->prescaler;
 8009ac6:	0005d783          	lhu	a5,0(a1)
 8009aca:	d51c                	sw	a5,40(a0)

    /* configure the counter direction and aligned mode */
    if((TIMER0 == timer_periph) || (TIMER1 == timer_periph) || (TIMER2 == timer_periph)
 8009acc:	400137b7          	lui	a5,0x40013
 8009ad0:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_sp+0x2000dc00>
 8009ad4:	04f50063          	beq	a0,a5,8009b14 <timer_init+0x4e>
 8009ad8:	400007b7          	lui	a5,0x40000
 8009adc:	02f50c63          	beq	a0,a5,8009b14 <timer_init+0x4e>
 8009ae0:	40078793          	addi	a5,a5,1024 # 40000400 <_sp+0x1fffb400>
 8009ae4:	02f50863          	beq	a0,a5,8009b14 <timer_init+0x4e>
        || (TIMER3 == timer_periph) || (TIMER4 == timer_periph) ){
 8009ae8:	400017b7          	lui	a5,0x40001
 8009aec:	80078793          	addi	a5,a5,-2048 # 40000800 <_sp+0x1fffb800>
 8009af0:	02f50263          	beq	a0,a5,8009b14 <timer_init+0x4e>
 8009af4:	400017b7          	lui	a5,0x40001
 8009af8:	c0078793          	addi	a5,a5,-1024 # 40000c00 <_sp+0x1fffbc00>
 8009afc:	00f50c63          	beq	a0,a5,8009b14 <timer_init+0x4e>
        TIMER_CTL0(timer_periph) &= (~(uint32_t)(TIMER_CTL0_DIR | TIMER_CTL0_CAM));
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->alignedmode & ALIGNEDMODE_MASK);
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->counterdirection & COUNTERDIRECTION_MASK);            
    }else{
        TIMER_CTL0(timer_periph) &= (uint32_t)(~ TIMER_CTL0_DIR);
 8009b00:	411c                	lw	a5,0(a0)
 8009b02:	9bbd                	andi	a5,a5,-17
 8009b04:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->counterdirection & COUNTERDIRECTION_MASK); 
 8009b06:	411c                	lw	a5,0(a0)
 8009b08:	0045d703          	lhu	a4,4(a1)
 8009b0c:	8b41                	andi	a4,a4,16
 8009b0e:	8fd9                	or	a5,a5,a4
 8009b10:	c11c                	sw	a5,0(a0)
 8009b12:	a015                	j	8009b36 <timer_init+0x70>
        TIMER_CTL0(timer_periph) &= (~(uint32_t)(TIMER_CTL0_DIR | TIMER_CTL0_CAM));
 8009b14:	411c                	lw	a5,0(a0)
 8009b16:	f8f7f793          	andi	a5,a5,-113
 8009b1a:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->alignedmode & ALIGNEDMODE_MASK);
 8009b1c:	411c                	lw	a5,0(a0)
 8009b1e:	0025d703          	lhu	a4,2(a1)
 8009b22:	06077713          	andi	a4,a4,96
 8009b26:	8fd9                	or	a5,a5,a4
 8009b28:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->counterdirection & COUNTERDIRECTION_MASK);            
 8009b2a:	411c                	lw	a5,0(a0)
 8009b2c:	0045d703          	lhu	a4,4(a1)
 8009b30:	8b41                	andi	a4,a4,16
 8009b32:	8fd9                	or	a5,a5,a4
 8009b34:	c11c                	sw	a5,0(a0)
    }
    
    /* configure the autoreload value */
    TIMER_CAR(timer_periph) = (uint32_t)initpara->period;
 8009b36:	459c                	lw	a5,8(a1)
 8009b38:	d55c                	sw	a5,44(a0)

    if((TIMER5 != timer_periph) && (TIMER6 != timer_periph)){
 8009b3a:	400017b7          	lui	a5,0x40001
 8009b3e:	02f50163          	beq	a0,a5,8009b60 <timer_init+0x9a>
 8009b42:	40078793          	addi	a5,a5,1024 # 40001400 <_sp+0x1fffc400>
 8009b46:	00f50d63          	beq	a0,a5,8009b60 <timer_init+0x9a>
        /* reset the CKDIV bit */
        TIMER_CTL0(timer_periph) &= (~(uint32_t)TIMER_CTL0_CKDIV);
 8009b4a:	411c                	lw	a5,0(a0)
 8009b4c:	cff7f793          	andi	a5,a5,-769
 8009b50:	c11c                	sw	a5,0(a0)
        TIMER_CTL0(timer_periph) |= (uint32_t)(initpara->clockdivision & CLOCKDIVISION_MASK);
 8009b52:	411c                	lw	a5,0(a0)
 8009b54:	00c5d703          	lhu	a4,12(a1)
 8009b58:	30077713          	andi	a4,a4,768
 8009b5c:	8fd9                	or	a5,a5,a4
 8009b5e:	c11c                	sw	a5,0(a0)
    }

    if (TIMER0 == timer_periph) {
 8009b60:	400137b7          	lui	a5,0x40013
 8009b64:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_sp+0x2000dc00>
 8009b68:	00f50763          	beq	a0,a5,8009b76 <timer_init+0xb0>
        /* configure the repetition counter value */
        TIMER_CREP(timer_periph) = (uint32_t)initpara->repetitioncounter;
    }

    /* generate an update event */
    TIMER_SWEVG(timer_periph) |= (uint32_t)TIMER_SWEVG_UPG;
 8009b6c:	495c                	lw	a5,20(a0)
 8009b6e:	0017e793          	ori	a5,a5,1
 8009b72:	c95c                	sw	a5,20(a0)
}
 8009b74:	8082                	ret
        TIMER_CREP(timer_periph) = (uint32_t)initpara->repetitioncounter;
 8009b76:	00e5c783          	lbu	a5,14(a1)
 8009b7a:	d91c                	sw	a5,48(a0)
 8009b7c:	bfc5                	j	8009b6c <timer_init+0xa6>

08009b7e <timer_enable>:
    \param[out] none
    \retval     none
*/
void timer_enable(uint32_t timer_periph)
{
    TIMER_CTL0(timer_periph) |= (uint32_t)TIMER_CTL0_CEN;
 8009b7e:	411c                	lw	a5,0(a0)
 8009b80:	0017e793          	ori	a5,a5,1
 8009b84:	c11c                	sw	a5,0(a0)
}
 8009b86:	8082                	ret

08009b88 <timer_counter_read>:
    \retval     counter value
*/         
uint32_t timer_counter_read(uint32_t timer_periph)
{
    uint32_t count_value = 0U;
    count_value = TIMER_CNT(timer_periph);
 8009b88:	5148                	lw	a0,36(a0)
    return (count_value);
}
 8009b8a:	8082                	ret

08009b8c <timer_channel_output_struct_para_init>:
    \retval     none
*/
void timer_channel_output_struct_para_init(timer_oc_parameter_struct* ocpara)
{
    /* initialize the channel output parameter struct member with the default value */
    ocpara->outputstate  = TIMER_CCX_DISABLE;
 8009b8c:	00051023          	sh	zero,0(a0)
    ocpara->outputnstate = TIMER_CCXN_DISABLE;
 8009b90:	00051123          	sh	zero,2(a0)
    ocpara->ocpolarity   = TIMER_OC_POLARITY_HIGH;
 8009b94:	00051223          	sh	zero,4(a0)
    ocpara->ocnpolarity  = TIMER_OCN_POLARITY_HIGH;
 8009b98:	00051323          	sh	zero,6(a0)
    ocpara->ocidlestate  = TIMER_OC_IDLE_STATE_LOW;
 8009b9c:	00051423          	sh	zero,8(a0)
    ocpara->ocnidlestate = TIMER_OCN_IDLE_STATE_LOW;
 8009ba0:	00051523          	sh	zero,10(a0)
}
 8009ba4:	8082                	ret

08009ba6 <timer_channel_output_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_config(uint32_t timer_periph, uint16_t channel, timer_oc_parameter_struct* ocpara)
{
    switch(channel){
 8009ba6:	4785                	li	a5,1
 8009ba8:	08f58a63          	beq	a1,a5,8009c3c <timer_channel_output_config+0x96>
 8009bac:	01059793          	slli	a5,a1,0x10
 8009bb0:	87c1                	srai	a5,a5,0x10
 8009bb2:	cb81                	beqz	a5,8009bc2 <timer_channel_output_config+0x1c>
 8009bb4:	4789                	li	a5,2
 8009bb6:	10f58c63          	beq	a1,a5,8009cce <timer_channel_output_config+0x128>
 8009bba:	478d                	li	a5,3
 8009bbc:	1af58363          	beq	a1,a5,8009d62 <timer_channel_output_config+0x1bc>
 8009bc0:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        /* reset the CH0EN bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0EN);
 8009bc2:	511c                	lw	a5,32(a0)
 8009bc4:	9bf9                	andi	a5,a5,-2
 8009bc6:	d11c                	sw	a5,32(a0)
        /* set the CH0EN bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->outputstate;
 8009bc8:	511c                	lw	a5,32(a0)
 8009bca:	00065703          	lhu	a4,0(a2)
 8009bce:	8fd9                	or	a5,a5,a4
 8009bd0:	d11c                	sw	a5,32(a0)
        /* reset the CH0P bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0P);
 8009bd2:	511c                	lw	a5,32(a0)
 8009bd4:	9bf5                	andi	a5,a5,-3
 8009bd6:	d11c                	sw	a5,32(a0)
        /* set the CH0P bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->ocpolarity;
 8009bd8:	511c                	lw	a5,32(a0)
 8009bda:	00465703          	lhu	a4,4(a2)
 8009bde:	8fd9                	or	a5,a5,a4
 8009be0:	d11c                	sw	a5,32(a0)

        if (TIMER0 == timer_periph) {
 8009be2:	400137b7          	lui	a5,0x40013
 8009be6:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_sp+0x2000dc00>
 8009bea:	00f50663          	beq	a0,a5,8009bf6 <timer_channel_output_config+0x50>
            /* reset the ISO0N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO0N);
            /* set the ISO0N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)ocpara->ocnidlestate;
        }
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH0MS;
 8009bee:	4d1c                	lw	a5,24(a0)
 8009bf0:	9bf1                	andi	a5,a5,-4
 8009bf2:	cd1c                	sw	a5,24(a0)
        break;
 8009bf4:	8082                	ret
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NEN);
 8009bf6:	511c                	lw	a5,32(a0)
 8009bf8:	9bed                	andi	a5,a5,-5
 8009bfa:	d11c                	sw	a5,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->outputnstate;
 8009bfc:	511c                	lw	a5,32(a0)
 8009bfe:	00265703          	lhu	a4,2(a2)
 8009c02:	8fd9                	or	a5,a5,a4
 8009c04:	d11c                	sw	a5,32(a0)
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH0NP);
 8009c06:	511c                	lw	a5,32(a0)
 8009c08:	9bdd                	andi	a5,a5,-9
 8009c0a:	d11c                	sw	a5,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)ocpara->ocnpolarity;
 8009c0c:	511c                	lw	a5,32(a0)
 8009c0e:	00665703          	lhu	a4,6(a2)
 8009c12:	8fd9                	or	a5,a5,a4
 8009c14:	d11c                	sw	a5,32(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO0);
 8009c16:	415c                	lw	a5,4(a0)
 8009c18:	eff7f793          	andi	a5,a5,-257
 8009c1c:	c15c                	sw	a5,4(a0)
            TIMER_CTL1(timer_periph) |= (uint32_t)ocpara->ocidlestate;
 8009c1e:	415c                	lw	a5,4(a0)
 8009c20:	00865703          	lhu	a4,8(a2)
 8009c24:	8fd9                	or	a5,a5,a4
 8009c26:	c15c                	sw	a5,4(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO0N);
 8009c28:	415c                	lw	a5,4(a0)
 8009c2a:	dff7f793          	andi	a5,a5,-513
 8009c2e:	c15c                	sw	a5,4(a0)
            TIMER_CTL1(timer_periph) |= (uint32_t)ocpara->ocnidlestate;
 8009c30:	415c                	lw	a5,4(a0)
 8009c32:	00a65703          	lhu	a4,10(a2)
 8009c36:	8fd9                	or	a5,a5,a4
 8009c38:	c15c                	sw	a5,4(a0)
 8009c3a:	bf55                	j	8009bee <timer_channel_output_config+0x48>
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        /* reset the CH1EN bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1EN);
 8009c3c:	511c                	lw	a5,32(a0)
 8009c3e:	9bbd                	andi	a5,a5,-17
 8009c40:	d11c                	sw	a5,32(a0)
        /* set the CH1EN bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 4U);
 8009c42:	511c                	lw	a5,32(a0)
 8009c44:	00065703          	lhu	a4,0(a2)
 8009c48:	0712                	slli	a4,a4,0x4
 8009c4a:	8fd9                	or	a5,a5,a4
 8009c4c:	d11c                	sw	a5,32(a0)
        /* reset the CH1P bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1P);
 8009c4e:	511c                	lw	a5,32(a0)
 8009c50:	fdf7f793          	andi	a5,a5,-33
 8009c54:	d11c                	sw	a5,32(a0)
        /* set the CH1P bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 4U);
 8009c56:	511c                	lw	a5,32(a0)
 8009c58:	00465703          	lhu	a4,4(a2)
 8009c5c:	0712                	slli	a4,a4,0x4
 8009c5e:	8fd9                	or	a5,a5,a4
 8009c60:	d11c                	sw	a5,32(a0)

        if (TIMER0 == timer_periph) {
 8009c62:	400137b7          	lui	a5,0x40013
 8009c66:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_sp+0x2000dc00>
 8009c6a:	00f50763          	beq	a0,a5,8009c78 <timer_channel_output_config+0xd2>
            /* reset the ISO1N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1N);
            /* set the ISO1N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 2U);
        }
        TIMER_CHCTL0(timer_periph) &= ~(uint32_t)TIMER_CHCTL0_CH1MS;
 8009c6e:	4d1c                	lw	a5,24(a0)
 8009c70:	cff7f793          	andi	a5,a5,-769
 8009c74:	cd1c                	sw	a5,24(a0)
        break;
 8009c76:	8082                	ret
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NEN);
 8009c78:	511c                	lw	a5,32(a0)
 8009c7a:	fbf7f793          	andi	a5,a5,-65
 8009c7e:	d11c                	sw	a5,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputnstate) << 4U);
 8009c80:	511c                	lw	a5,32(a0)
 8009c82:	00265703          	lhu	a4,2(a2)
 8009c86:	0712                	slli	a4,a4,0x4
 8009c88:	8fd9                	or	a5,a5,a4
 8009c8a:	d11c                	sw	a5,32(a0)
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH1NP);
 8009c8c:	511c                	lw	a5,32(a0)
 8009c8e:	f7f7f793          	andi	a5,a5,-129
 8009c92:	d11c                	sw	a5,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 4U);
 8009c94:	511c                	lw	a5,32(a0)
 8009c96:	00665703          	lhu	a4,6(a2)
 8009c9a:	0712                	slli	a4,a4,0x4
 8009c9c:	8fd9                	or	a5,a5,a4
 8009c9e:	d11c                	sw	a5,32(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1);
 8009ca0:	415c                	lw	a5,4(a0)
 8009ca2:	bff7f793          	andi	a5,a5,-1025
 8009ca6:	c15c                	sw	a5,4(a0)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 2U);
 8009ca8:	415c                	lw	a5,4(a0)
 8009caa:	00865703          	lhu	a4,8(a2)
 8009cae:	070a                	slli	a4,a4,0x2
 8009cb0:	8fd9                	or	a5,a5,a4
 8009cb2:	c15c                	sw	a5,4(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO1N);
 8009cb4:	415c                	lw	a5,4(a0)
 8009cb6:	777d                	lui	a4,0xfffff
 8009cb8:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfffa7ff>
 8009cbc:	8ff9                	and	a5,a5,a4
 8009cbe:	c15c                	sw	a5,4(a0)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 2U);
 8009cc0:	415c                	lw	a5,4(a0)
 8009cc2:	00a65703          	lhu	a4,10(a2)
 8009cc6:	070a                	slli	a4,a4,0x2
 8009cc8:	8fd9                	or	a5,a5,a4
 8009cca:	c15c                	sw	a5,4(a0)
 8009ccc:	b74d                	j	8009c6e <timer_channel_output_config+0xc8>
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        /* reset the CH2EN bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2EN);
 8009cce:	511c                	lw	a5,32(a0)
 8009cd0:	eff7f793          	andi	a5,a5,-257
 8009cd4:	d11c                	sw	a5,32(a0)
        /* set the CH2EN bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 8U);
 8009cd6:	511c                	lw	a5,32(a0)
 8009cd8:	00065703          	lhu	a4,0(a2)
 8009cdc:	0722                	slli	a4,a4,0x8
 8009cde:	8fd9                	or	a5,a5,a4
 8009ce0:	d11c                	sw	a5,32(a0)
        /* reset the CH2P bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2P);
 8009ce2:	511c                	lw	a5,32(a0)
 8009ce4:	dff7f793          	andi	a5,a5,-513
 8009ce8:	d11c                	sw	a5,32(a0)
        /* set the CH2P bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 8U);
 8009cea:	511c                	lw	a5,32(a0)
 8009cec:	00465703          	lhu	a4,4(a2)
 8009cf0:	0722                	slli	a4,a4,0x8
 8009cf2:	8fd9                	or	a5,a5,a4
 8009cf4:	d11c                	sw	a5,32(a0)

        if (TIMER0 == timer_periph) {
 8009cf6:	400137b7          	lui	a5,0x40013
 8009cfa:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_sp+0x2000dc00>
 8009cfe:	00f50663          	beq	a0,a5,8009d0a <timer_channel_output_config+0x164>
            /* reset the ISO2N bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2N);
            /* set the ISO2N bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 4U);
        }
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH2MS;
 8009d02:	4d5c                	lw	a5,28(a0)
 8009d04:	9bf1                	andi	a5,a5,-4
 8009d06:	cd5c                	sw	a5,28(a0)
        break;
 8009d08:	8082                	ret
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NEN);
 8009d0a:	511c                	lw	a5,32(a0)
 8009d0c:	bff7f793          	andi	a5,a5,-1025
 8009d10:	d11c                	sw	a5,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputnstate) << 8U);
 8009d12:	511c                	lw	a5,32(a0)
 8009d14:	00265703          	lhu	a4,2(a2)
 8009d18:	0722                	slli	a4,a4,0x8
 8009d1a:	8fd9                	or	a5,a5,a4
 8009d1c:	d11c                	sw	a5,32(a0)
            TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH2NP);
 8009d1e:	5118                	lw	a4,32(a0)
 8009d20:	77fd                	lui	a5,0xfffff
 8009d22:	7ff78693          	addi	a3,a5,2047 # fffff7ff <_sp+0xdfffa7ff>
 8009d26:	8f75                	and	a4,a4,a3
 8009d28:	d118                	sw	a4,32(a0)
            TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnpolarity) << 8U);
 8009d2a:	5118                	lw	a4,32(a0)
 8009d2c:	00665683          	lhu	a3,6(a2)
 8009d30:	06a2                	slli	a3,a3,0x8
 8009d32:	8f55                	or	a4,a4,a3
 8009d34:	d118                	sw	a4,32(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2);
 8009d36:	4158                	lw	a4,4(a0)
 8009d38:	17fd                	addi	a5,a5,-1
 8009d3a:	8ff9                	and	a5,a5,a4
 8009d3c:	c15c                	sw	a5,4(a0)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 4U);
 8009d3e:	415c                	lw	a5,4(a0)
 8009d40:	00865703          	lhu	a4,8(a2)
 8009d44:	0712                	slli	a4,a4,0x4
 8009d46:	8fd9                	or	a5,a5,a4
 8009d48:	c15c                	sw	a5,4(a0)
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO2N);
 8009d4a:	415c                	lw	a5,4(a0)
 8009d4c:	7779                	lui	a4,0xffffe
 8009d4e:	177d                	addi	a4,a4,-1
 8009d50:	8ff9                	and	a5,a5,a4
 8009d52:	c15c                	sw	a5,4(a0)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocnidlestate) << 4U);
 8009d54:	415c                	lw	a5,4(a0)
 8009d56:	00a65703          	lhu	a4,10(a2)
 8009d5a:	0712                	slli	a4,a4,0x4
 8009d5c:	8fd9                	or	a5,a5,a4
 8009d5e:	c15c                	sw	a5,4(a0)
 8009d60:	b74d                	j	8009d02 <timer_channel_output_config+0x15c>
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
        /* reset the CH3EN bit */
        TIMER_CHCTL2(timer_periph) &=(~(uint32_t)TIMER_CHCTL2_CH3EN);
 8009d62:	511c                	lw	a5,32(a0)
 8009d64:	777d                	lui	a4,0xfffff
 8009d66:	177d                	addi	a4,a4,-1
 8009d68:	8ff9                	and	a5,a5,a4
 8009d6a:	d11c                	sw	a5,32(a0)
        /* set the CH3EN bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->outputstate) << 12U);
 8009d6c:	511c                	lw	a5,32(a0)
 8009d6e:	00065703          	lhu	a4,0(a2)
 8009d72:	0732                	slli	a4,a4,0xc
 8009d74:	8fd9                	or	a5,a5,a4
 8009d76:	d11c                	sw	a5,32(a0)
        /* reset the CH3P bit */
        TIMER_CHCTL2(timer_periph) &= (~(uint32_t)TIMER_CHCTL2_CH3P);
 8009d78:	511c                	lw	a5,32(a0)
 8009d7a:	7779                	lui	a4,0xffffe
 8009d7c:	177d                	addi	a4,a4,-1
 8009d7e:	8ff9                	and	a5,a5,a4
 8009d80:	d11c                	sw	a5,32(a0)
        /* set the CH3P bit */
        TIMER_CHCTL2(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocpolarity) << 12U);
 8009d82:	511c                	lw	a5,32(a0)
 8009d84:	00465703          	lhu	a4,4(a2)
 8009d88:	0732                	slli	a4,a4,0xc
 8009d8a:	8fd9                	or	a5,a5,a4
 8009d8c:	d11c                	sw	a5,32(a0)

        if (TIMER0 == timer_periph) {
 8009d8e:	400137b7          	lui	a5,0x40013
 8009d92:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_sp+0x2000dc00>
 8009d96:	00f50763          	beq	a0,a5,8009da4 <timer_channel_output_config+0x1fe>
            /* reset the ISO3 bit */
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO3);
            /* set the ISO3 bit */
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 6U);
        }
        TIMER_CHCTL1(timer_periph) &= ~(uint32_t)TIMER_CHCTL1_CH3MS;
 8009d9a:	4d5c                	lw	a5,28(a0)
 8009d9c:	cff7f793          	andi	a5,a5,-769
 8009da0:	cd5c                	sw	a5,28(a0)
        break;
    default:
        break;
    }
}
 8009da2:	8082                	ret
            TIMER_CTL1(timer_periph) &= (~(uint32_t)TIMER_CTL1_ISO3);
 8009da4:	415c                	lw	a5,4(a0)
 8009da6:	7771                	lui	a4,0xffffc
 8009da8:	177d                	addi	a4,a4,-1
 8009daa:	8ff9                	and	a5,a5,a4
 8009dac:	c15c                	sw	a5,4(a0)
            TIMER_CTL1(timer_periph) |= (uint32_t)((uint32_t)(ocpara->ocidlestate) << 6U);
 8009dae:	415c                	lw	a5,4(a0)
 8009db0:	00865703          	lhu	a4,8(a2)
 8009db4:	071a                	slli	a4,a4,0x6
 8009db6:	8fd9                	or	a5,a5,a4
 8009db8:	c15c                	sw	a5,4(a0)
 8009dba:	b7c5                	j	8009d9a <timer_channel_output_config+0x1f4>

08009dbc <timer_channel_output_mode_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_mode_config(uint32_t timer_periph, uint16_t channel, uint16_t ocmode)
{
    switch(channel){
 8009dbc:	4785                	li	a5,1
 8009dbe:	02f58563          	beq	a1,a5,8009de8 <timer_channel_output_mode_config+0x2c>
 8009dc2:	01059793          	slli	a5,a1,0x10
 8009dc6:	87c1                	srai	a5,a5,0x10
 8009dc8:	cb81                	beqz	a5,8009dd8 <timer_channel_output_mode_config+0x1c>
 8009dca:	4789                	li	a5,2
 8009dcc:	02f58863          	beq	a1,a5,8009dfc <timer_channel_output_mode_config+0x40>
 8009dd0:	478d                	li	a5,3
 8009dd2:	02f58d63          	beq	a1,a5,8009e0c <timer_channel_output_mode_config+0x50>
 8009dd6:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMCTL);
 8009dd8:	4d1c                	lw	a5,24(a0)
 8009dda:	f8f7f793          	andi	a5,a5,-113
 8009dde:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)ocmode;
 8009de0:	4d1c                	lw	a5,24(a0)
 8009de2:	8e5d                	or	a2,a2,a5
 8009de4:	cd10                	sw	a2,24(a0)
        break;
 8009de6:	8082                	ret
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMCTL);
 8009de8:	4d1c                	lw	a5,24(a0)
 8009dea:	7765                	lui	a4,0xffff9
 8009dec:	177d                	addi	a4,a4,-1
 8009dee:	8ff9                	and	a5,a5,a4
 8009df0:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 8009df2:	4d1c                	lw	a5,24(a0)
 8009df4:	0622                	slli	a2,a2,0x8
 8009df6:	8e5d                	or	a2,a2,a5
 8009df8:	cd10                	sw	a2,24(a0)
        break;
 8009dfa:	8082                	ret
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMCTL);
 8009dfc:	4d5c                	lw	a5,28(a0)
 8009dfe:	f8f7f793          	andi	a5,a5,-113
 8009e02:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)ocmode;
 8009e04:	4d5c                	lw	a5,28(a0)
 8009e06:	8e5d                	or	a2,a2,a5
 8009e08:	cd50                	sw	a2,28(a0)
        break;
 8009e0a:	8082                	ret
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMCTL);
 8009e0c:	4d5c                	lw	a5,28(a0)
 8009e0e:	7765                	lui	a4,0xffff9
 8009e10:	177d                	addi	a4,a4,-1
 8009e12:	8ff9                	and	a5,a5,a4
 8009e14:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocmode) << 8U);
 8009e16:	4d5c                	lw	a5,28(a0)
 8009e18:	0622                	slli	a2,a2,0x8
 8009e1a:	8e5d                	or	a2,a2,a5
 8009e1c:	cd50                	sw	a2,28(a0)
        break;
    default:
        break;
    }
}
 8009e1e:	8082                	ret

08009e20 <timer_channel_output_pulse_value_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_pulse_value_config(uint32_t timer_periph, uint16_t channel, uint32_t pulse)
{
    switch(channel){
 8009e20:	4785                	li	a5,1
 8009e22:	00f58f63          	beq	a1,a5,8009e40 <timer_channel_output_pulse_value_config+0x20>
 8009e26:	01059793          	slli	a5,a1,0x10
 8009e2a:	87c1                	srai	a5,a5,0x10
 8009e2c:	cb81                	beqz	a5,8009e3c <timer_channel_output_pulse_value_config+0x1c>
 8009e2e:	4789                	li	a5,2
 8009e30:	00f58a63          	beq	a1,a5,8009e44 <timer_channel_output_pulse_value_config+0x24>
 8009e34:	478d                	li	a5,3
 8009e36:	00f58963          	beq	a1,a5,8009e48 <timer_channel_output_pulse_value_config+0x28>
 8009e3a:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CH0CV(timer_periph) = (uint32_t)pulse;
 8009e3c:	d950                	sw	a2,52(a0)
        break;
 8009e3e:	8082                	ret
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CH1CV(timer_periph) = (uint32_t)pulse;
 8009e40:	dd10                	sw	a2,56(a0)
        break;
 8009e42:	8082                	ret
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CH2CV(timer_periph) = (uint32_t)pulse;
 8009e44:	dd50                	sw	a2,60(a0)
        break;
 8009e46:	8082                	ret
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
         TIMER_CH3CV(timer_periph) = (uint32_t)pulse;
 8009e48:	c130                	sw	a2,64(a0)
        break;
    default:
        break;
    }
}
 8009e4a:	8082                	ret

08009e4c <timer_channel_output_shadow_config>:
    \param[out] none
    \retval     none
*/
void timer_channel_output_shadow_config(uint32_t timer_periph, uint16_t channel, uint16_t ocshadow)
{
    switch(channel){
 8009e4c:	4785                	li	a5,1
 8009e4e:	02f58463          	beq	a1,a5,8009e76 <timer_channel_output_shadow_config+0x2a>
 8009e52:	01059793          	slli	a5,a1,0x10
 8009e56:	87c1                	srai	a5,a5,0x10
 8009e58:	cb81                	beqz	a5,8009e68 <timer_channel_output_shadow_config+0x1c>
 8009e5a:	4789                	li	a5,2
 8009e5c:	02f58863          	beq	a1,a5,8009e8c <timer_channel_output_shadow_config+0x40>
 8009e60:	478d                	li	a5,3
 8009e62:	02f58c63          	beq	a1,a5,8009e9a <timer_channel_output_shadow_config+0x4e>
 8009e66:	8082                	ret
    /* configure TIMER_CH_0 */
    case TIMER_CH_0:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH0COMSEN);
 8009e68:	4d1c                	lw	a5,24(a0)
 8009e6a:	9bdd                	andi	a5,a5,-9
 8009e6c:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)ocshadow;
 8009e6e:	4d1c                	lw	a5,24(a0)
 8009e70:	8e5d                	or	a2,a2,a5
 8009e72:	cd10                	sw	a2,24(a0)
        break;
 8009e74:	8082                	ret
    /* configure TIMER_CH_1 */
    case TIMER_CH_1:
        TIMER_CHCTL0(timer_periph) &= (~(uint32_t)TIMER_CHCTL0_CH1COMSEN);
 8009e76:	4d1c                	lw	a5,24(a0)
 8009e78:	777d                	lui	a4,0xfffff
 8009e7a:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfffa7ff>
 8009e7e:	8ff9                	and	a5,a5,a4
 8009e80:	cd1c                	sw	a5,24(a0)
        TIMER_CHCTL0(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8009e82:	4d1c                	lw	a5,24(a0)
 8009e84:	0622                	slli	a2,a2,0x8
 8009e86:	8e5d                	or	a2,a2,a5
 8009e88:	cd10                	sw	a2,24(a0)
        break;
 8009e8a:	8082                	ret
    /* configure TIMER_CH_2 */
    case TIMER_CH_2:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH2COMSEN);
 8009e8c:	4d5c                	lw	a5,28(a0)
 8009e8e:	9bdd                	andi	a5,a5,-9
 8009e90:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)ocshadow;
 8009e92:	4d5c                	lw	a5,28(a0)
 8009e94:	8e5d                	or	a2,a2,a5
 8009e96:	cd50                	sw	a2,28(a0)
        break;
 8009e98:	8082                	ret
    /* configure TIMER_CH_3 */
    case TIMER_CH_3:
        TIMER_CHCTL1(timer_periph) &= (~(uint32_t)TIMER_CHCTL1_CH3COMSEN);
 8009e9a:	4d5c                	lw	a5,28(a0)
 8009e9c:	777d                	lui	a4,0xfffff
 8009e9e:	7ff70713          	addi	a4,a4,2047 # fffff7ff <_sp+0xdfffa7ff>
 8009ea2:	8ff9                	and	a5,a5,a4
 8009ea4:	cd5c                	sw	a5,28(a0)
        TIMER_CHCTL1(timer_periph) |= (uint32_t)((uint32_t)(ocshadow) << 8U);
 8009ea6:	4d5c                	lw	a5,28(a0)
 8009ea8:	0622                	slli	a2,a2,0x8
 8009eaa:	8e5d                	or	a2,a2,a5
 8009eac:	cd50                	sw	a2,28(a0)
        break;
    default:
        break;
    }
}
 8009eae:	8082                	ret

08009eb0 <timer_interrupt_enable>:
    \param[out] none
    \retval     none
*/
void timer_interrupt_enable(uint32_t timer_periph, uint32_t interrupt)
{
    TIMER_DMAINTEN(timer_periph) |= (uint32_t) interrupt; 
 8009eb0:	455c                	lw	a5,12(a0)
 8009eb2:	8ddd                	or	a1,a1,a5
 8009eb4:	c54c                	sw	a1,12(a0)
}
 8009eb6:	8082                	ret

08009eb8 <mtime_lo>:
    asm volatile ("1:":::);
} 

uint32_t mtime_lo(void)
{
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME);
 8009eb8:	d10007b7          	lui	a5,0xd1000
 8009ebc:	4388                	lw	a0,0(a5)
}
 8009ebe:	8082                	ret

08009ec0 <mtime_hi>:


uint32_t mtime_hi(void)
{
  return *(volatile uint32_t *)(TIMER_CTRL_ADDR + TIMER_MTIME + 4);
 8009ec0:	d10007b7          	lui	a5,0xd1000
 8009ec4:	43c8                	lw	a0,4(a5)
}
 8009ec6:	8082                	ret

08009ec8 <get_timer_value>:

uint64_t get_timer_value()
{
 8009ec8:	1141                	addi	sp,sp,-16
 8009eca:	c606                	sw	ra,12(sp)
 8009ecc:	c422                	sw	s0,8(sp)
 8009ece:	c226                	sw	s1,4(sp)
  while (1) {
    uint32_t hi = mtime_hi();
 8009ed0:	ff1ff0ef          	jal	ra,8009ec0 <mtime_hi>
 8009ed4:	842a                	mv	s0,a0
    uint32_t lo = mtime_lo();
 8009ed6:	fe3ff0ef          	jal	ra,8009eb8 <mtime_lo>
 8009eda:	84aa                	mv	s1,a0
    if (hi == mtime_hi())
 8009edc:	fe5ff0ef          	jal	ra,8009ec0 <mtime_hi>
 8009ee0:	fe8518e3          	bne	a0,s0,8009ed0 <get_timer_value+0x8>
      return ((uint64_t)hi << 32) | lo;
  }
}
 8009ee4:	8526                	mv	a0,s1
 8009ee6:	85a2                	mv	a1,s0
 8009ee8:	40b2                	lw	ra,12(sp)
 8009eea:	4422                	lw	s0,8(sp)
 8009eec:	4492                	lw	s1,4(sp)
 8009eee:	0141                	addi	sp,sp,16
 8009ef0:	8082                	ret

08009ef2 <eclic_init>:
{

  typedef volatile uint32_t vuint32_t;

  //clear cfg register 
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET)=0;
 8009ef2:	d20007b7          	lui	a5,0xd2000
 8009ef6:	00078023          	sb	zero,0(a5) # d2000000 <_sp+0xb1ffb000>

  //clear minthresh register 
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_MTH_OFFSET)=0;
 8009efa:	000785a3          	sb	zero,11(a5)

  //clear all IP/IE/ATTR/CTRL bits for all interrupt sources
  vuint32_t * ptr;

  vuint32_t * base = (vuint32_t*)(ECLIC_ADDR_BASE + ECLIC_INT_IP_OFFSET);
  vuint32_t * upper = (vuint32_t*)(base + num_irq*4);
 8009efe:	0512                	slli	a0,a0,0x4
 8009f00:	d20017b7          	lui	a5,0xd2001
 8009f04:	953e                	add	a0,a0,a5

  for (ptr = base; ptr < upper; ptr=ptr+4){
 8009f06:	00a7f663          	bgeu	a5,a0,8009f12 <eclic_init+0x20>
    *ptr = 0;
 8009f0a:	0007a023          	sw	zero,0(a5) # d2001000 <_sp+0xb1ffc000>
  for (ptr = base; ptr < upper; ptr=ptr+4){
 8009f0e:	07c1                	addi	a5,a5,16
 8009f10:	bfdd                	j	8009f06 <eclic_init+0x14>
  }
}
 8009f12:	8082                	ret

08009f14 <eclic_enable_interrupt>:



void eclic_enable_interrupt (uint32_t source) {
    *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_IE_OFFSET+source*4) = 1;
 8009f14:	050a                	slli	a0,a0,0x2
 8009f16:	d20017b7          	lui	a5,0xd2001
 8009f1a:	0785                	addi	a5,a5,1
 8009f1c:	953e                	add	a0,a0,a5
 8009f1e:	4785                	li	a5,1
 8009f20:	00f50023          	sb	a5,0(a0)
}
 8009f24:	8082                	ret

08009f26 <eclic_disable_interrupt>:

void eclic_disable_interrupt (uint32_t source){
    *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_IE_OFFSET+source*4) = 0;
 8009f26:	050a                	slli	a0,a0,0x2
 8009f28:	d20017b7          	lui	a5,0xd2001
 8009f2c:	0785                	addi	a5,a5,1
 8009f2e:	953e                	add	a0,a0,a5
 8009f30:	00050023          	sb	zero,0(a0)
}
 8009f34:	8082                	ret

08009f36 <eclic_set_intctrl>:
void eclic_clear_pending(uint32_t source){
    *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_IP_OFFSET+source*4) = 0;
}

void eclic_set_intctrl (uint32_t source, uint8_t intctrl){
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4) = intctrl;
 8009f36:	050a                	slli	a0,a0,0x2
 8009f38:	d20017b7          	lui	a5,0xd2001
 8009f3c:	078d                	addi	a5,a5,3
 8009f3e:	953e                	add	a0,a0,a5
 8009f40:	00b50023          	sb	a1,0(a0)
}
 8009f44:	8082                	ret

08009f46 <eclic_get_intctrl>:

uint8_t eclic_get_intctrl  (uint32_t source){
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_CTRL_OFFSET+source*4);
 8009f46:	050a                	slli	a0,a0,0x2
 8009f48:	d20017b7          	lui	a5,0xd2001
 8009f4c:	078d                	addi	a5,a5,3
 8009f4e:	953e                	add	a0,a0,a5
 8009f50:	00054503          	lbu	a0,0(a0)
}
 8009f54:	8082                	ret

08009f56 <eclic_set_cliccfg>:
uint8_t eclic_get_intattr  (uint32_t source){
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_INT_ATTR_OFFSET+source*4);
}

void eclic_set_cliccfg (uint8_t cliccfg){
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET) = cliccfg;
 8009f56:	d20007b7          	lui	a5,0xd2000
 8009f5a:	00a78023          	sb	a0,0(a5) # d2000000 <_sp+0xb1ffb000>
}
 8009f5e:	8082                	ret

08009f60 <eclic_get_cliccfg>:

uint8_t eclic_get_cliccfg  (){
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_CFG_OFFSET);
 8009f60:	d20007b7          	lui	a5,0xd2000
 8009f64:	0007c503          	lbu	a0,0(a5) # d2000000 <_sp+0xb1ffb000>
}
 8009f68:	8082                	ret

08009f6a <eclic_set_mth>:

void eclic_set_mth (uint8_t mth){
  *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_MTH_OFFSET) = mth;
 8009f6a:	d20007b7          	lui	a5,0xd2000
 8009f6e:	00a785a3          	sb	a0,11(a5) # d200000b <_sp+0xb1ffb00b>
}
 8009f72:	8082                	ret

08009f74 <eclic_set_nlbits>:
uint8_t eclic_get_mth  (){
  return *(volatile uint8_t*)(ECLIC_ADDR_BASE+ECLIC_MTH_OFFSET);
}

//sets nlbits 
void eclic_set_nlbits(uint8_t nlbits) {
 8009f74:	1141                	addi	sp,sp,-16
 8009f76:	c606                	sw	ra,12(sp)
 8009f78:	c422                	sw	s0,8(sp)
  //shift nlbits to correct position
  uint8_t nlbits_shifted = nlbits << ECLIC_CFG_NLBITS_LSB;
 8009f7a:	0506                	slli	a0,a0,0x1
 8009f7c:	0ff57413          	andi	s0,a0,255

  //read the current cliccfg 
  uint8_t old_cliccfg = eclic_get_cliccfg();
 8009f80:	fe1ff0ef          	jal	ra,8009f60 <eclic_get_cliccfg>
  uint8_t new_cliccfg = (old_cliccfg & (~ECLIC_CFG_NLBITS_MASK)) | (ECLIC_CFG_NLBITS_MASK & nlbits_shifted); 
 8009f84:	0e157513          	andi	a0,a0,225
 8009f88:	8879                	andi	s0,s0,30

  eclic_set_cliccfg(new_cliccfg);
 8009f8a:	8d41                	or	a0,a0,s0
 8009f8c:	fcbff0ef          	jal	ra,8009f56 <eclic_set_cliccfg>
}
 8009f90:	40b2                	lw	ra,12(sp)
 8009f92:	4422                	lw	s0,8(sp)
 8009f94:	0141                	addi	sp,sp,16
 8009f96:	8082                	ret

08009f98 <eclic_get_nlbits>:

//get nlbits 
uint8_t eclic_get_nlbits(void) {
 8009f98:	1141                	addi	sp,sp,-16
 8009f9a:	c606                	sw	ra,12(sp)
  //extract nlbits
  uint8_t nlbits = eclic_get_cliccfg();
 8009f9c:	fc5ff0ef          	jal	ra,8009f60 <eclic_get_cliccfg>
  nlbits = (nlbits & ECLIC_CFG_NLBITS_MASK) >> ECLIC_CFG_NLBITS_LSB;
 8009fa0:	8105                	srli	a0,a0,0x1
  return nlbits;
}
 8009fa2:	893d                	andi	a0,a0,15
 8009fa4:	40b2                	lw	ra,12(sp)
 8009fa6:	0141                	addi	sp,sp,16
 8009fa8:	8082                	ret

08009faa <eclic_set_irq_lvl_abs>:
  uint8_t lvl = intctrl << (8-nlbits);

  return lvl;
}

void eclic_set_irq_lvl_abs(uint32_t source, uint8_t lvl_abs) {
 8009faa:	1141                	addi	sp,sp,-16
 8009fac:	c606                	sw	ra,12(sp)
 8009fae:	c422                	sw	s0,8(sp)
 8009fb0:	c226                	sw	s1,4(sp)
 8009fb2:	c04a                	sw	s2,0(sp)
 8009fb4:	892a                	mv	s2,a0
 8009fb6:	842e                	mv	s0,a1
  //extract nlbits
  uint8_t nlbits = eclic_get_nlbits();
 8009fb8:	fe1ff0ef          	jal	ra,8009f98 <eclic_get_nlbits>
 8009fbc:	84aa                	mv	s1,a0
  if (nlbits > ECLICINTCTLBITS) {
 8009fbe:	4791                	li	a5,4
 8009fc0:	00a7f363          	bgeu	a5,a0,8009fc6 <eclic_set_irq_lvl_abs+0x1c>
    nlbits = ECLICINTCTLBITS;
 8009fc4:	4491                	li	s1,4
  }

  //shift lvl_abs into correct bit position
  uint8_t lvl = lvl_abs << (8-nlbits);
 8009fc6:	47a1                	li	a5,8
 8009fc8:	8f85                	sub	a5,a5,s1
 8009fca:	00f41433          	sll	s0,s0,a5
 8009fce:	0ff47413          	andi	s0,s0,255
 
  //write to clicintctrl
  uint8_t current_intctrl = eclic_get_intctrl(source);
 8009fd2:	854a                	mv	a0,s2
 8009fd4:	f73ff0ef          	jal	ra,8009f46 <eclic_get_intctrl>
  //shift intctrl left to mask off unused bits
  current_intctrl = current_intctrl << nlbits;
 8009fd8:	009515b3          	sll	a1,a0,s1
  //shift intctrl into correct bit position
  current_intctrl = current_intctrl >> nlbits;
 8009fdc:	0ff5f593          	andi	a1,a1,255
 8009fe0:	4095d5b3          	sra	a1,a1,s1
 8009fe4:	0ff5f593          	andi	a1,a1,255

  eclic_set_intctrl(source, (current_intctrl | lvl));
 8009fe8:	8dc1                	or	a1,a1,s0
 8009fea:	854a                	mv	a0,s2
 8009fec:	f4bff0ef          	jal	ra,8009f36 <eclic_set_intctrl>
}
 8009ff0:	40b2                	lw	ra,12(sp)
 8009ff2:	4422                	lw	s0,8(sp)
 8009ff4:	4492                	lw	s1,4(sp)
 8009ff6:	4902                	lw	s2,0(sp)
 8009ff8:	0141                	addi	sp,sp,16
 8009ffa:	8082                	ret

08009ffc <eclic_set_irq_priority>:

  return lvl_abs;
}

//sets an interrupt priority based encoding of nlbits and ECLICINTCTLBITS
uint8_t eclic_set_irq_priority(uint32_t source, uint8_t priority) {
 8009ffc:	1141                	addi	sp,sp,-16
 8009ffe:	c606                	sw	ra,12(sp)
 800a000:	c422                	sw	s0,8(sp)
 800a002:	c226                	sw	s1,4(sp)
 800a004:	c04a                	sw	s2,0(sp)
 800a006:	892a                	mv	s2,a0
 800a008:	842e                	mv	s0,a1
	//extract nlbits
	uint8_t nlbits = eclic_get_nlbits();
 800a00a:	f8fff0ef          	jal	ra,8009f98 <eclic_get_nlbits>
	if (nlbits >= ECLICINTCTLBITS) {
 800a00e:	478d                	li	a5,3
 800a010:	00a7fa63          	bgeu	a5,a0,800a024 <eclic_set_irq_priority+0x28>
		nlbits = ECLICINTCTLBITS;
		return 0;
 800a014:	4401                	li	s0,0
	current_intctrl = current_intctrl << (8-nlbits);

	eclic_set_intctrl(source, (current_intctrl | priority));

	return priority;
}
 800a016:	8522                	mv	a0,s0
 800a018:	40b2                	lw	ra,12(sp)
 800a01a:	4422                	lw	s0,8(sp)
 800a01c:	4492                	lw	s1,4(sp)
 800a01e:	4902                	lw	s2,0(sp)
 800a020:	0141                	addi	sp,sp,16
 800a022:	8082                	ret
 800a024:	84aa                	mv	s1,a0
	priority = priority << (8 - ECLICINTCTLBITS);
 800a026:	0412                	slli	s0,s0,0x4
 800a028:	0ff47413          	andi	s0,s0,255
	uint8_t current_intctrl = eclic_get_intctrl(source);
 800a02c:	854a                	mv	a0,s2
 800a02e:	f19ff0ef          	jal	ra,8009f46 <eclic_get_intctrl>
	current_intctrl = current_intctrl >> (8-nlbits);
 800a032:	45a1                	li	a1,8
 800a034:	409584b3          	sub	s1,a1,s1
 800a038:	409555b3          	sra	a1,a0,s1
	current_intctrl = current_intctrl << (8-nlbits);
 800a03c:	0ff5f593          	andi	a1,a1,255
 800a040:	009595b3          	sll	a1,a1,s1
 800a044:	0ff5f593          	andi	a1,a1,255
	eclic_set_intctrl(source, (current_intctrl | priority));
 800a048:	8dc1                	or	a1,a1,s0
 800a04a:	854a                	mv	a0,s2
 800a04c:	eebff0ef          	jal	ra,8009f36 <eclic_set_intctrl>
	return priority;
 800a050:	b7d9                	j	800a016 <eclic_set_irq_priority+0x1a>

0800a052 <eclic_mode_enable>:

	return priority;
}

void eclic_mode_enable() {
  uint32_t mtvec_value = read_csr(mtvec);
 800a052:	305027f3          	csrr	a5,mtvec
  mtvec_value = mtvec_value & 0xFFFFFFC0;
 800a056:	fc07f793          	andi	a5,a5,-64
  mtvec_value = mtvec_value | 0x00000003;
 800a05a:	0037e793          	ori	a5,a5,3
  write_csr(mtvec,mtvec_value);
 800a05e:	30579073          	csrw	mtvec,a5
}
 800a062:	8082                	ret

0800a064 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
 800a064:	8082                	ret
	...

0800a068 <trap_entry>:

    .section      .text.trap_entry
    .align 2
    .global trap_entry
trap_entry:
    addi sp, sp, -caller_saved_size
 800a068:	fb810113          	addi	sp,sp,-72
    sw ra, ra_offset(sp)
 800a06c:	c006                	sw	ra,0(sp)
    sw gp, gp_offset(sp)
 800a06e:	c20e                	sw	gp,4(sp)
    sw tp, tp_offset(sp)
 800a070:	c412                	sw	tp,8(sp)
    sw t0, t0_offset(sp)
 800a072:	c616                	sw	t0,12(sp)
    sw t1, t1_offset(sp)
 800a074:	c81a                	sw	t1,16(sp)
    sw t2, t2_offset(sp)
 800a076:	ca1e                	sw	t2,20(sp)
    sw t3, t3_offset(sp)
 800a078:	cc72                	sw	t3,24(sp)
    sw t4, t4_offset(sp)
 800a07a:	ce76                	sw	t4,28(sp)
    sw t5, t5_offset(sp)
 800a07c:	d07a                	sw	t5,32(sp)
    sw t6, t6_offset(sp)
 800a07e:	d27e                	sw	t6,36(sp)
    sw a0, a0_offset(sp)
 800a080:	d42a                	sw	a0,40(sp)
    sw a1, a1_offset(sp)
 800a082:	d62e                	sw	a1,44(sp)
    sw a2, a2_offset(sp)
 800a084:	d832                	sw	a2,48(sp)
    sw a3, a3_offset(sp)
 800a086:	da36                	sw	a3,52(sp)
    sw a4, a4_offset(sp)
 800a088:	dc3a                	sw	a4,56(sp)
    sw a5, a5_offset(sp)
 800a08a:	de3e                	sw	a5,60(sp)
    sw a6, a6_offset(sp)
 800a08c:	c0c2                	sw	a6,64(sp)
    sw a7, a7_offset(sp)
 800a08e:	c2c6                	sw	a7,68(sp)

    csrr a0, mcause           /* a0 = Trap cause */
 800a090:	34202573          	csrr	a0,mcause
    csrr a1, mepc             /* a1 = Return address */
 800a094:	341025f3          	csrr	a1,mepc
    bltz a0, async_interrupt  /* highest bit set => interrupt */
 800a098:	0a054163          	bltz	a0,800a13a <async_interrupt>

    /* Save all registers for exception handler */
    call save_callee_responsible_registers
 800a09c:	208d                	jal	800a0fe <save_callee_responsible_registers>
    mv a2, sp
 800a09e:	860a                	mv	a2,sp
    call handle_trap          /* Call handle_trap(cuase, mepc, sp) */
 800a0a0:	f61fc0ef          	jal	ra,8007000 <handle_trap>
    call restore_callee_responsible_registers
 800a0a4:	28a5                	jal	800a11c <restore_callee_responsible_registers>

.Lfinish_trap_with_return_address:
    csrw mepc, a0             /* Set return address to what handle_trap returned */
 800a0a6:	34151073          	csrw	mepc,a0
.Lfinish_trap:
    /* lw gp, gp_offset(sp) */
    /* lw tp, tp_offset(sp) */
    lw t3, t3_offset(sp)
 800a0aa:	4e62                	lw	t3,24(sp)
    lw t4, t4_offset(sp)
 800a0ac:	4ef2                	lw	t4,28(sp)
    lw t5, t5_offset(sp)
 800a0ae:	5f02                	lw	t5,32(sp)
    lw t6, t6_offset(sp)
 800a0b0:	5f92                	lw	t6,36(sp)
    lw a2, a2_offset(sp)
 800a0b2:	5642                	lw	a2,48(sp)
    lw a3, a3_offset(sp)
 800a0b4:	56d2                	lw	a3,52(sp)
    lw a4, a4_offset(sp)
 800a0b6:	5762                	lw	a4,56(sp)
    lw a5, a5_offset(sp)
 800a0b8:	57f2                	lw	a5,60(sp)
    lw a6, a6_offset(sp)
 800a0ba:	4806                	lw	a6,64(sp)
    lw a7, a7_offset(sp)
 800a0bc:	4896                	lw	a7,68(sp)

0800a0be <fast_finish_context_switch>:
    /*
     * In case of context switch that did not found new task to run only
     * few registers were actually touched.
     */
fast_finish_context_switch:
    lw ra, ra_offset(sp)
 800a0be:	4082                	lw	ra,0(sp)
    lw a0, a0_offset(sp)
 800a0c0:	5522                	lw	a0,40(sp)
    lw a1, a1_offset(sp)
 800a0c2:	55b2                	lw	a1,44(sp)
    lw t0, t0_offset(sp)
 800a0c4:	42b2                	lw	t0,12(sp)
    lw t1, t1_offset(sp)
 800a0c6:	4342                	lw	t1,16(sp)
    lw t2, t2_offset(sp)
 800a0c8:	43d2                	lw	t2,20(sp)
    addi sp, sp, caller_saved_size
 800a0ca:	04810113          	addi	sp,sp,72
    mret
 800a0ce:	30200073          	mret

0800a0d2 <context_switch>:

context_switch:
    /* Do context switch only if highest priority task changed */
    lw t2, g_os_run_list     /* Get highest priority task ready to run */
 800a0d2:	8201a383          	lw	t2,-2016(gp) # 20000540 <g_os_run_list>
    la t1, g_current_task    /* Get current task address */
 800a0d6:	17ff9317          	auipc	t1,0x17ff9
 800a0da:	ad630313          	addi	t1,t1,-1322 # 20002bac <g_current_task>
    lw t0, (t1)              /* Get current task */
 800a0de:	00032283          	lw	t0,0(t1)
    beq t0, t2, fast_finish_context_switch  /* No context switch needed */
 800a0e2:	fc728ee3          	beq	t0,t2,800a0be <fast_finish_context_switch>

    /* Task needs to be changed, save calle responsible registers */
    call save_callee_responsible_registers
 800a0e6:	2821                	jal	800a0fe <save_callee_responsible_registers>

#if CONTEXT_SWITCH_ON_ECALL
    addi a1, a1, 4                /* Get address of instruction after ECALL */
#endif
    sw a1, mepc_offset(sp)
 800a0e8:	c02e                	sw	a1,0(sp)

    sw sp, sp_offset(t0)          /* Store SP in os_task */
 800a0ea:	0022a023          	sw	sp,0(t0)

    lw sp, sp_offset(t2)          /* Switch to SP of highest priority task */
 800a0ee:	0003a103          	lw	sp,0(t2)

    lw a0, mepc_offset(sp)        /* Restore PC */
 800a0f2:	4502                	lw	a0,0(sp)

    call restore_callee_responsible_registers
 800a0f4:	2025                	jal	800a11c <restore_callee_responsible_registers>

    sw t2, (t1)                   /* Set g_current_task */
 800a0f6:	00732023          	sw	t2,0(t1)
    mv tp, t2
 800a0fa:	821e                	mv	tp,t2
    j .Lfinish_trap_with_return_address
 800a0fc:	b76d                	j	800a0a6 <trap_entry+0x3e>

0800a0fe <save_callee_responsible_registers>:

save_callee_responsible_registers:
    addi sp, sp, -callee_saved_size
 800a0fe:	fcc10113          	addi	sp,sp,-52
    sw s0, s0_offset(sp)
 800a102:	c222                	sw	s0,4(sp)
    sw s1, s1_offset(sp)
 800a104:	c426                	sw	s1,8(sp)
    sw s2, s2_offset(sp)
 800a106:	c64a                	sw	s2,12(sp)
    sw s3, s3_offset(sp)
 800a108:	c84e                	sw	s3,16(sp)
    sw s4, s4_offset(sp)
 800a10a:	ca52                	sw	s4,20(sp)
    sw s5, s5_offset(sp)
 800a10c:	cc56                	sw	s5,24(sp)
    sw s6, s6_offset(sp)
 800a10e:	ce5a                	sw	s6,28(sp)
    sw s7, s7_offset(sp)
 800a110:	d05e                	sw	s7,32(sp)
    sw s8, s8_offset(sp)
 800a112:	d262                	sw	s8,36(sp)
    sw s9, s9_offset(sp)
 800a114:	d466                	sw	s9,40(sp)
    sw s10, s10_offset(sp)
 800a116:	d66a                	sw	s10,44(sp)
    sw s11, s11_offset(sp)
 800a118:	d86e                	sw	s11,48(sp)
    ret
 800a11a:	8082                	ret

0800a11c <restore_callee_responsible_registers>:

restore_callee_responsible_registers:
    lw s0, s0_offset(sp)
 800a11c:	4412                	lw	s0,4(sp)
    lw s1, s1_offset(sp)
 800a11e:	44a2                	lw	s1,8(sp)
    lw s2, s2_offset(sp)
 800a120:	4932                	lw	s2,12(sp)
    lw s3, s3_offset(sp)
 800a122:	49c2                	lw	s3,16(sp)
    lw s4, s4_offset(sp)
 800a124:	4a52                	lw	s4,20(sp)
    lw s5, s5_offset(sp)
 800a126:	4ae2                	lw	s5,24(sp)
    lw s6, s6_offset(sp)
 800a128:	4b72                	lw	s6,28(sp)
    lw s7, s7_offset(sp)
 800a12a:	5b82                	lw	s7,32(sp)
    lw s8, s8_offset(sp)
 800a12c:	5c12                	lw	s8,36(sp)
    lw s9, s9_offset(sp)
 800a12e:	5ca2                	lw	s9,40(sp)
    lw s10, s10_offset(sp)
 800a130:	5d32                	lw	s10,44(sp)
    lw s11, s11_offset(sp)
 800a132:	5dc2                	lw	s11,48(sp)

    /* Change SP to interrupt like */
    addi sp, sp, callee_saved_size
 800a134:	03410113          	addi	sp,sp,52
    ret
 800a138:	8082                	ret

0800a13a <async_interrupt>:

async_interrupt:
    /* Software interrupt */
    li t0, 0x80000003
 800a13a:	800002b7          	lui	t0,0x80000
 800a13e:	00328293          	addi	t0,t0,3 # 80000003 <_sp+0x5fffb003>
    bne a0, t0, 1f
 800a142:	00551963          	bne	a0,t0,800a154 <async_interrupt+0x1a>

    /* Clear software interrupt */
    li t0, CLINT_CTRL_ADDR
 800a146:	d10012b7          	lui	t0,0xd1001
 800a14a:	ffc28293          	addi	t0,t0,-4 # d1000ffc <_sp+0xb0ffbffc>
    sw x0, (t0)
 800a14e:	0002a023          	sw	zero,0(t0)
    j context_switch
 800a152:	b741                	j	800a0d2 <context_switch>
1:
    /* Return to Lfinish_trap when system stack was already in use */
    la ra, .Lfinish_trap
 800a154:	00000097          	auipc	ra,0x0
 800a158:	f5608093          	addi	ra,ra,-170 # 800a0aa <trap_entry+0x42>

    /* If current task is set, switch SP and clear the task */
    beqz tp, 2f
 800a15c:	02020163          	beqz	tp,800a17e <async_interrupt+0x44>
    /* On system stack save task and task stack */
    la t1, _sp - 8
 800a160:	17ffb317          	auipc	t1,0x17ffb
 800a164:	e9830313          	addi	t1,t1,-360 # 20004ff8 <_end+0x22c8>
    sw sp, (t1)
 800a168:	00232023          	sw	sp,0(t1)
    sw tp, 4(t1)
 800a16c:	00432223          	sw	tp,4(t1)
    /* Switch to system stack */
    mv sp, t1
 800a170:	811a                	mv	sp,t1
    mv tp, x0
 800a172:	00000213          	li	tp,0
    /* In this case restore system stack and tp register after handler */
    la ra, .Lrestore_task_stack
 800a176:	00000097          	auipc	ra,0x0
 800a17a:	02c08093          	addi	ra,ra,44 # 800a1a2 <async_interrupt+0x68>
     * For external and timer interrupt return address is already set
     * to .Lrestore_task_stack or .Lfinish_trap, hence beq tail jumps.
     */

    /* External interrupt */
    li t0, 0x8000000B
 800a17e:	800002b7          	lui	t0,0x80000
 800a182:	00b28293          	addi	t0,t0,11 # 8000000b <_sp+0x5fffb00b>
    beq a0, t0, external_interrupt_handler
 800a186:	00551463          	bne	a0,t0,800a18e <async_interrupt+0x54>
 800a18a:	fb4ff06f          	j	800993e <external_interrupt_handler>

    /* Timer interrupt */
    li t0, 0x80000007
 800a18e:	800002b7          	lui	t0,0x80000
 800a192:	00728293          	addi	t0,t0,7 # 80000007 <_sp+0x5fffb007>
    beq a0, t0, timer_interrupt_handler
 800a196:	00551463          	bne	a0,t0,800a19e <async_interrupt+0x64>
 800a19a:	d6aff06f          	j	8009704 <timer_interrupt_handler>
3:
    /* This should not happen */
    bne a0, t0, 3b
 800a19e:	00551063          	bne	a0,t0,800a19e <async_interrupt+0x64>

.Lrestore_task_stack:
    lw tp, 4(sp)
 800a1a2:	4212                	lw	tp,4(sp)
    lw sp, (sp)
 800a1a4:	4102                	lw	sp,0(sp)
    j .Lfinish_trap
 800a1a6:	b711                	j	800a0aa <trap_entry+0x42>
	...

0800a1aa <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
 800a1aa:	1101                	addi	sp,sp,-32
 800a1ac:	ce06                	sw	ra,28(sp)
 800a1ae:	cc22                	sw	s0,24(sp)
 800a1b0:	ca26                	sw	s1,20(sp)
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
 800a1b2:	4601                	li	a2,0
 800a1b4:	55fd                	li	a1,-1
 800a1b6:	0800d537          	lui	a0,0x800d
 800a1ba:	70850513          	addi	a0,a0,1800 # 800d708 <gd32vf103_tmr_devs+0xc>
 800a1be:	b8afd0ef          	jal	ra,8007548 <os_dev_open>
    assert(dev != NULL);
 800a1c2:	c115                	beqz	a0,800a1e6 <config_device+0x3c>
 800a1c4:	842a                	mv	s0,a0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
 800a1c6:	0028                	addi	a0,sp,8
 800a1c8:	28f9                	jal	800a2a6 <temp_stub_default_cfg>
    assert(rc == 0);
 800a1ca:	e505                	bnez	a0,800a1f2 <config_device+0x48>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
 800a1cc:	002c                	addi	a1,sp,8
 800a1ce:	8522                	mv	a0,s0
 800a1d0:	2c11                	jal	800a3e4 <temp_stub_config>
 800a1d2:	84aa                	mv	s1,a0
    os_dev_close(dev);
 800a1d4:	8522                	mv	a0,s0
 800a1d6:	bd0fd0ef          	jal	ra,80075a6 <os_dev_close>
    return rc;
}
 800a1da:	8526                	mv	a0,s1
 800a1dc:	40f2                	lw	ra,28(sp)
 800a1de:	4462                	lw	s0,24(sp)
 800a1e0:	44d2                	lw	s1,20(sp)
 800a1e2:	6105                	addi	sp,sp,32
 800a1e4:	8082                	ret
    assert(dev != NULL);
 800a1e6:	4681                	li	a3,0
 800a1e8:	4601                	li	a2,0
 800a1ea:	4581                	li	a1,0
 800a1ec:	4501                	li	a0,0
 800a1ee:	de5fc0ef          	jal	ra,8006fd2 <__assert_func>
    assert(rc == 0);
 800a1f2:	4681                	li	a3,0
 800a1f4:	4601                	li	a2,0
 800a1f6:	4581                	li	a1,0
 800a1f8:	4501                	li	a0,0
 800a1fa:	dd9fc0ef          	jal	ra,8006fd2 <__assert_func>

0800a1fe <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
 800a1fe:	1141                	addi	sp,sp,-16
 800a200:	c606                	sw	ra,12(sp)
 800a202:	c422                	sw	s0,8(sp)
    console_printf("TMP create %s\n", DEVICE_NAME);
 800a204:	0800d437          	lui	s0,0x800d
 800a208:	70840593          	addi	a1,s0,1800 # 800d708 <gd32vf103_tmr_devs+0xc>
 800a20c:	0800d537          	lui	a0,0x800d
 800a210:	71450513          	addi	a0,a0,1812 # 800d714 <gd32vf103_tmr_devs+0x18>
 800a214:	c19fa0ef          	jal	ra,8004e2c <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
 800a218:	200037b7          	lui	a5,0x20003
 800a21c:	87878793          	addi	a5,a5,-1928 # 20002878 <adc_1_itf_temp_stub>
 800a220:	0800a737          	lui	a4,0x800a
 800a224:	2b270713          	addi	a4,a4,690 # 800a2b2 <temp_stub_init>
 800a228:	4681                	li	a3,0
 800a22a:	4605                	li	a2,1
 800a22c:	70840593          	addi	a1,s0,1800
 800a230:	20003537          	lui	a0,0x20003
 800a234:	89050513          	addi	a0,a0,-1904 # 20002890 <temp_stub_dev>
 800a238:	a86fd0ef          	jal	ra,80074be <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
 800a23c:	e901                	bnez	a0,800a24c <temp_stub_create+0x4e>

    //  Configure the device.
    rc = config_device();
 800a23e:	f6dff0ef          	jal	ra,800a1aa <config_device>
    assert(rc == 0);
 800a242:	e919                	bnez	a0,800a258 <temp_stub_create+0x5a>
}
 800a244:	40b2                	lw	ra,12(sp)
 800a246:	4422                	lw	s0,8(sp)
 800a248:	0141                	addi	sp,sp,16
 800a24a:	8082                	ret
    assert(rc == 0);
 800a24c:	4681                	li	a3,0
 800a24e:	4601                	li	a2,0
 800a250:	4581                	li	a1,0
 800a252:	4501                	li	a0,0
 800a254:	d7ffc0ef          	jal	ra,8006fd2 <__assert_func>
    assert(rc == 0);
 800a258:	4681                	li	a3,0
 800a25a:	4601                	li	a2,0
 800a25c:	4581                	li	a1,0
 800a25e:	4501                	li	a0,0
 800a260:	d73fc0ef          	jal	ra,8006fd2 <__assert_func>

0800a264 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
 800a264:	4501                	li	a0,0
 800a266:	8082                	ret

0800a268 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
 800a268:	040007b7          	lui	a5,0x4000
 800a26c:	8dfd                	and	a1,a1,a5
 800a26e:	c591                	beqz	a1,800a27a <temp_stub_sensor_get_config+0x12>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
 800a270:	4785                	li	a5,1
 800a272:	00f68023          	sb	a5,0(a3)
    return (0);
 800a276:	4501                	li	a0,0
 800a278:	8082                	ret
err:
    return (rc);
 800a27a:	5579                	li	a0,-2
}
 800a27c:	8082                	ret

0800a27e <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
 800a27e:	1141                	addi	sp,sp,-16
 800a280:	c606                	sw	ra,12(sp)
    dev = (struct temp_stub *) dev0;  assert(dev);  
 800a282:	c901                	beqz	a0,800a292 <temp_stub_open+0x14>
    cfg = &dev->cfg; assert(cfg);
 800a284:	0b050513          	addi	a0,a0,176
 800a288:	c911                	beqz	a0,800a29c <temp_stub_open+0x1e>
}
 800a28a:	4501                	li	a0,0
 800a28c:	40b2                	lw	ra,12(sp)
 800a28e:	0141                	addi	sp,sp,16
 800a290:	8082                	ret
    dev = (struct temp_stub *) dev0;  assert(dev);  
 800a292:	4681                	li	a3,0
 800a294:	4601                	li	a2,0
 800a296:	4581                	li	a1,0
 800a298:	d3bfc0ef          	jal	ra,8006fd2 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
 800a29c:	4681                	li	a3,0
 800a29e:	4601                	li	a2,0
 800a2a0:	4581                	li	a1,0
 800a2a2:	d31fc0ef          	jal	ra,8006fd2 <__assert_func>

0800a2a6 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
 800a2a6:	577d                	li	a4,-1
 800a2a8:	4781                	li	a5,0
 800a2aa:	c118                	sw	a4,0(a0)
 800a2ac:	c15c                	sw	a5,4(a0)
}
 800a2ae:	4501                	li	a0,0
 800a2b0:	8082                	ret

0800a2b2 <temp_stub_init>:
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 800a2b2:	c9b5                	beqz	a1,800a326 <temp_stub_init+0x74>
 800a2b4:	c93d                	beqz	a0,800a32a <temp_stub_init+0x78>
int temp_stub_init(struct os_dev *dev0, void *arg) {
 800a2b6:	1141                	addi	sp,sp,-16
 800a2b8:	c606                	sw	ra,12(sp)
 800a2ba:	c422                	sw	s0,8(sp)
 800a2bc:	c226                	sw	s1,4(sp)
 800a2be:	c04a                	sw	s2,0(sp)
 800a2c0:	84ae                	mv	s1,a1
 800a2c2:	842a                	mv	s0,a0
    rc = temp_stub_default_cfg(&dev->cfg);
 800a2c4:	0b050513          	addi	a0,a0,176
 800a2c8:	fdfff0ef          	jal	ra,800a2a6 <temp_stub_default_cfg>
    if (rc) { goto err; }
 800a2cc:	c519                	beqz	a0,800a2da <temp_stub_init+0x28>
}
 800a2ce:	40b2                	lw	ra,12(sp)
 800a2d0:	4422                	lw	s0,8(sp)
 800a2d2:	4492                	lw	s1,4(sp)
 800a2d4:	4902                	lw	s2,0(sp)
 800a2d6:	0141                	addi	sp,sp,16
 800a2d8:	8082                	ret
    sensor = &dev->sensor;
 800a2da:	02840913          	addi	s2,s0,40
    rc = sensor_init(sensor, dev0);
 800a2de:	85a2                	mv	a1,s0
 800a2e0:	854a                	mv	a0,s2
 800a2e2:	a29fc0ef          	jal	ra,8006d0a <sensor_init>
    if (rc != 0) { goto err; }
 800a2e6:	f565                	bnez	a0,800a2ce <temp_stub_init+0x1c>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
 800a2e8:	0800d7b7          	lui	a5,0x800d
 800a2ec:	72478793          	addi	a5,a5,1828 # 800d724 <g_temp_stub_sensor_driver>
 800a2f0:	c83c                	sw	a5,80(s0)
    sensor->s_types = type;
 800a2f2:	04000737          	lui	a4,0x4000
 800a2f6:	4781                	li	a5,0
 800a2f8:	dc18                	sw	a4,56(s0)
 800a2fa:	dc5c                	sw	a5,60(s0)
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
 800a2fc:	4651                	li	a2,20
 800a2fe:	85a6                	mv	a1,s1
 800a300:	07040513          	addi	a0,s0,112
 800a304:	8b5fe0ef          	jal	ra,8008bb8 <memcpy>
    rc = sensor_mgr_register(sensor);
 800a308:	854a                	mv	a0,s2
 800a30a:	9cbfc0ef          	jal	ra,8006cd4 <sensor_mgr_register>
    if (rc != 0) { goto err; }
 800a30e:	f161                	bnez	a0,800a2ce <temp_stub_init+0x1c>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
 800a310:	0800a7b7          	lui	a5,0x800a
 800a314:	27e78793          	addi	a5,a5,638 # 800a27e <temp_stub_open>
 800a318:	c01c                	sw	a5,0(s0)
 800a31a:	0800a7b7          	lui	a5,0x800a
 800a31e:	26478793          	addi	a5,a5,612 # 800a264 <temp_stub_close>
 800a322:	c45c                	sw	a5,12(s0)
    return (0);
 800a324:	b76d                	j	800a2ce <temp_stub_init+0x1c>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
 800a326:	555d                	li	a0,-9
 800a328:	8082                	ret
 800a32a:	555d                	li	a0,-9
}
 800a32c:	8082                	ret

0800a32e <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
 800a32e:	1141                	addi	sp,sp,-16
 800a330:	c606                	sw	ra,12(sp)
 800a332:	c422                	sw	s0,8(sp)
 800a334:	c226                	sw	s1,4(sp)
 800a336:	842e                	mv	s0,a1
 800a338:	84b2                	mv	s1,a2
    console_printf("STB read temp sensor\n");  ////
 800a33a:	0800d537          	lui	a0,0x800d
 800a33e:	74c50513          	addi	a0,a0,1868 # 800d74c <g_temp_stub_sensor_driver+0x28>
 800a342:	aebfa0ef          	jal	ra,8004e2c <console_printf>
    assert(temp_sum);
 800a346:	cc81                	beqz	s1,800a35e <temp_stub_get_raw_temperature+0x30>
    *temp_sum = 1757 * num_readings;
 800a348:	6dd00793          	li	a5,1757
 800a34c:	02f40433          	mul	s0,s0,a5
 800a350:	c080                	sw	s0,0(s1)
}
 800a352:	4501                	li	a0,0
 800a354:	40b2                	lw	ra,12(sp)
 800a356:	4422                	lw	s0,8(sp)
 800a358:	4492                	lw	s1,4(sp)
 800a35a:	0141                	addi	sp,sp,16
 800a35c:	8082                	ret
    assert(temp_sum);
 800a35e:	4681                	li	a3,0
 800a360:	4601                	li	a2,0
 800a362:	4581                	li	a1,0
 800a364:	4501                	li	a0,0
 800a366:	c6dfc0ef          	jal	ra,8006fd2 <__assert_func>

0800a36a <temp_stub_sensor_read>:
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 800a36a:	040007b7          	lui	a5,0x4000
 800a36e:	8fed                	and	a5,a5,a1
 800a370:	cba5                	beqz	a5,800a3e0 <temp_stub_sensor_read+0x76>
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
 800a372:	7179                	addi	sp,sp,-48
 800a374:	d606                	sw	ra,44(sp)
 800a376:	d422                	sw	s0,40(sp)
 800a378:	d226                	sw	s1,36(sp)
 800a37a:	d04a                	sw	s2,32(sp)
 800a37c:	ce4e                	sw	s3,28(sp)
 800a37e:	89ba                	mv	s3,a4
 800a380:	84b6                	mv	s1,a3
 800a382:	842a                	mv	s0,a0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
 800a384:	00052903          	lw	s2,0(a0)
 800a388:	02090163          	beqz	s2,800a3aa <temp_stub_sensor_read+0x40>
    rawtemp = -1;
 800a38c:	57fd                	li	a5,-1
 800a38e:	c23e                	sw	a5,4(sp)
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
 800a390:	4601                	li	a2,0
 800a392:	4581                	li	a1,0
 800a394:	854a                	mv	a0,s2
 800a396:	ee9ff0ef          	jal	ra,800a27e <temp_stub_open>
        if (rc) { goto err; }
 800a39a:	cd11                	beqz	a0,800a3b6 <temp_stub_sensor_read+0x4c>
}
 800a39c:	50b2                	lw	ra,44(sp)
 800a39e:	5422                	lw	s0,40(sp)
 800a3a0:	5492                	lw	s1,36(sp)
 800a3a2:	5902                	lw	s2,32(sp)
 800a3a4:	49f2                	lw	s3,28(sp)
 800a3a6:	6145                	addi	sp,sp,48
 800a3a8:	8082                	ret
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
 800a3aa:	4681                	li	a3,0
 800a3ac:	4601                	li	a2,0
 800a3ae:	4581                	li	a1,0
 800a3b0:	4501                	li	a0,0
 800a3b2:	c21fc0ef          	jal	ra,8006fd2 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
 800a3b6:	4681                	li	a3,0
 800a3b8:	0050                	addi	a2,sp,4
 800a3ba:	4585                	li	a1,1
 800a3bc:	854a                	mv	a0,s2
 800a3be:	f71ff0ef          	jal	ra,800a32e <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
 800a3c2:	fd69                	bnez	a0,800a39c <temp_stub_sensor_read+0x32>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
 800a3c4:	4792                	lw	a5,4(sp)
 800a3c6:	c43e                	sw	a5,8(sp)
    temp_data->strd_temp_raw_is_valid = 1;
 800a3c8:	4785                	li	a5,1
 800a3ca:	00f10623          	sb	a5,12(sp)
    if (data_func) {  //  Call the Listener Function to process the sensor data.
 800a3ce:	d4f9                	beqz	s1,800a39c <temp_stub_sensor_read+0x32>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
 800a3d0:	040006b7          	lui	a3,0x4000
 800a3d4:	4701                	li	a4,0
 800a3d6:	0030                	addi	a2,sp,8
 800a3d8:	85ce                	mv	a1,s3
 800a3da:	8522                	mv	a0,s0
 800a3dc:	9482                	jalr	s1
        if (rc) { goto err; }
 800a3de:	bf7d                	j	800a39c <temp_stub_sensor_read+0x32>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
 800a3e0:	5579                	li	a0,-2
}
 800a3e2:	8082                	ret

0800a3e4 <temp_stub_config>:
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 800a3e4:	07050793          	addi	a5,a0,112
 800a3e8:	cb99                	beqz	a5,800a3fe <temp_stub_config+0x1a>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
 800a3ea:	4198                	lw	a4,0(a1)
 800a3ec:	41dc                	lw	a5,4(a1)
    sensor->s_mask = mask;
 800a3ee:	c138                	sw	a4,64(a0)
 800a3f0:	c17c                	sw	a5,68(a0)
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
 800a3f2:	0ae52823          	sw	a4,176(a0)
 800a3f6:	0af52a23          	sw	a5,180(a0)
    return 0;
err:
    return (rc);
}
 800a3fa:	4501                	li	a0,0
 800a3fc:	8082                	ret
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
 800a3fe:	1141                	addi	sp,sp,-16
 800a400:	c606                	sw	ra,12(sp)
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
 800a402:	4681                	li	a3,0
 800a404:	4601                	li	a2,0
 800a406:	4581                	li	a1,0
 800a408:	4501                	li	a0,0
 800a40a:	bc9fc0ef          	jal	ra,8006fd2 <__assert_func>

0800a40e <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
 800a40e:	8082                	ret

0800a410 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
 800a410:	8082                	ret

0800a412 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
 800a412:	8082                	ret

0800a414 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
 800a414:	8082                	ret

0800a416 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
 800a416:	8082                	ret

0800a418 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
 800a418:	7179                	addi	sp,sp,-48
 800a41a:	d606                	sw	ra,44(sp)
 800a41c:	d422                	sw	s0,40(sp)
 800a41e:	d226                	sw	s1,36(sp)
 800a420:	d04a                	sw	s2,32(sp)
 800a422:	84aa                	mv	s1,a0
 800a424:	892e                	mv	s2,a1
 800a426:	8432                	mv	s0,a2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
 800a428:	00062023          	sw	zero,0(a2)

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
 800a42c:	2ed9                	jal	800a802 <mfg_init>

    mfg_open(&reader);
 800a42e:	0068                	addi	a0,sp,12
 800a430:	2131                	jal	800a83c <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
 800a432:	401c                	lw	a5,0(s0)
 800a434:	0697d163          	bge	a5,s1,800a496 <flash_map_read_mfg+0x7e>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
 800a438:	4589                	li	a1,2
 800a43a:	0068                	addi	a0,sp,12
 800a43c:	2641                	jal	800a7bc <mfg_seek_next_with_type>
        switch (rc) {
 800a43e:	57c5                	li	a5,-15
 800a440:	04f50d63          	beq	a0,a5,800a49a <flash_map_read_mfg+0x82>
 800a444:	ed21                	bnez	a0,800a49c <flash_map_read_mfg+0x84>
            return 0;
        default:
            return rc;
        }

        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
 800a446:	084c                	addi	a1,sp,20
 800a448:	0068                	addi	a0,sp,12
 800a44a:	2e61                	jal	800a7e2 <mfg_read_tlv_flash_area>
        if (rc != 0) {
 800a44c:	e921                	bnez	a0,800a49c <flash_map_read_mfg+0x84>
            return rc;
        }

        fap = out_areas + *out_num_areas;
 800a44e:	401c                	lw	a5,0(s0)
 800a450:	00179713          	slli	a4,a5,0x1
 800a454:	973e                	add	a4,a4,a5
 800a456:	00271793          	slli	a5,a4,0x2
 800a45a:	97ca                	add	a5,a5,s2
        fap->fa_id = meta_flash_area.area_id;
 800a45c:	01414703          	lbu	a4,20(sp)
 800a460:	00e78023          	sb	a4,0(a5) # 4000000 <__stack_size+0x3fff800>
        fap->fa_device_id = meta_flash_area.device_id;
 800a464:	01514703          	lbu	a4,21(sp)
 800a468:	00e780a3          	sb	a4,1(a5)
        fap->fa_off = meta_flash_area.offset;
 800a46c:	01615503          	lhu	a0,22(sp)
 800a470:	4662                	lw	a2,24(sp)
 800a472:	6741                	lui	a4,0x10
 800a474:	fff70593          	addi	a1,a4,-1 # ffff <__stack_size+0xf7ff>
 800a478:	00b676b3          	and	a3,a2,a1
 800a47c:	06c2                	slli	a3,a3,0x10
 800a47e:	8ec9                	or	a3,a3,a0
 800a480:	c3d4                	sw	a3,4(a5)
        fap->fa_size = meta_flash_area.size;
 800a482:	8241                	srli	a2,a2,0x10
 800a484:	4772                	lw	a4,28(sp)
 800a486:	8f6d                	and	a4,a4,a1
 800a488:	0742                	slli	a4,a4,0x10
 800a48a:	8f51                	or	a4,a4,a2
 800a48c:	c798                	sw	a4,8(a5)

        (*out_num_areas)++;
 800a48e:	401c                	lw	a5,0(s0)
 800a490:	0785                	addi	a5,a5,1
 800a492:	c01c                	sw	a5,0(s0)
        if (*out_num_areas >= max_areas) {
 800a494:	bf79                	j	800a432 <flash_map_read_mfg+0x1a>
            return -1;
 800a496:	557d                	li	a0,-1
 800a498:	a011                	j	800a49c <flash_map_read_mfg+0x84>
            return 0;
 800a49a:	4501                	li	a0,0
    }
}
 800a49c:	50b2                	lw	ra,44(sp)
 800a49e:	5422                	lw	s0,40(sp)
 800a4a0:	5492                	lw	s1,36(sp)
 800a4a2:	5902                	lw	s2,32(sp)
 800a4a4:	6145                	addi	sp,sp,48
 800a4a6:	8082                	ret

0800a4a8 <flash_area_open>:
    if (flash_map == NULL) {
 800a4a8:	200037b7          	lui	a5,0x20003
 800a4ac:	d207a603          	lw	a2,-736(a5) # 20002d20 <flash_map>
 800a4b0:	ca0d                	beqz	a2,800a4e2 <flash_area_open+0x3a>
    for (i = 0; i < flash_map_entries; i++) {
 800a4b2:	4781                	li	a5,0
 800a4b4:	20003737          	lui	a4,0x20003
 800a4b8:	d2472703          	lw	a4,-732(a4) # 20002d24 <flash_map_entries>
 800a4bc:	02e7d163          	bge	a5,a4,800a4de <flash_area_open+0x36>
        area = flash_map + i;
 800a4c0:	00179693          	slli	a3,a5,0x1
 800a4c4:	96be                	add	a3,a3,a5
 800a4c6:	00269713          	slli	a4,a3,0x2
 800a4ca:	9732                	add	a4,a4,a2
        if (area->fa_id == id) {
 800a4cc:	00074683          	lbu	a3,0(a4)
 800a4d0:	00a68463          	beq	a3,a0,800a4d8 <flash_area_open+0x30>
    for (i = 0; i < flash_map_entries; i++) {
 800a4d4:	0785                	addi	a5,a5,1
 800a4d6:	bff9                	j	800a4b4 <flash_area_open+0xc>
            *fap = area;
 800a4d8:	c198                	sw	a4,0(a1)
            return 0;
 800a4da:	4501                	li	a0,0
 800a4dc:	8082                	ret
    return SYS_ENOENT;
 800a4de:	5571                	li	a0,-4
 800a4e0:	8082                	ret
        return SYS_EACCES;
 800a4e2:	5565                	li	a0,-7
}
 800a4e4:	8082                	ret

0800a4e6 <flash_area_read>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
 800a4e6:	451c                	lw	a5,8(a0)
 800a4e8:	02b7e063          	bltu	a5,a1,800a508 <flash_area_read+0x22>
 800a4ec:	00d58733          	add	a4,a1,a3
 800a4f0:	00e7ee63          	bltu	a5,a4,800a50c <flash_area_read+0x26>
{
 800a4f4:	1141                	addi	sp,sp,-16
 800a4f6:	c606                	sw	ra,12(sp)
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
 800a4f8:	415c                	lw	a5,4(a0)
 800a4fa:	95be                	add	a1,a1,a5
 800a4fc:	00154503          	lbu	a0,1(a0)
 800a500:	26d5                	jal	800a8e4 <hal_flash_read>
}
 800a502:	40b2                	lw	ra,12(sp)
 800a504:	0141                	addi	sp,sp,16
 800a506:	8082                	ret
        return -1;
 800a508:	557d                	li	a0,-1
 800a50a:	8082                	ret
 800a50c:	557d                	li	a0,-1
}
 800a50e:	8082                	ret

0800a510 <flash_map_init>:

void
flash_map_init(void)
{
 800a510:	1101                	addi	sp,sp,-32
 800a512:	ce06                	sw	ra,28(sp)

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 800a514:	200037b7          	lui	a5,0x20003
 800a518:	a707c783          	lbu	a5,-1424(a5) # 20002a70 <sysinit_active>
 800a51c:	c3bd                	beqz	a5,800a582 <flash_map_init+0x72>

    rc = hal_flash_init();
 800a51e:	2e49                	jal	800a8b0 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
 800a520:	c909                	beqz	a0,800a532 <flash_map_init+0x22>
 800a522:	8141a783          	lw	a5,-2028(gp) # 20000534 <sysinit_panic_cb>
 800a526:	4701                	li	a4,0
 800a528:	4681                	li	a3,0
 800a52a:	4601                	li	a2,0
 800a52c:	4581                	li	a1,0
 800a52e:	4501                	li	a0,0
 800a530:	9782                	jalr	a5
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
 800a532:	20003737          	lui	a4,0x20003
 800a536:	0800d7b7          	lui	a5,0x800d
 800a53a:	76478793          	addi	a5,a5,1892 # 800d764 <sysflash_map_dflt>
 800a53e:	d2f72023          	sw	a5,-736(a4) # 20002d20 <flash_map>
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
 800a542:	200037b7          	lui	a5,0x20003
 800a546:	4719                	li	a4,6
 800a548:	d2e7a223          	sw	a4,-732(a5) # 20002d24 <flash_map_entries>

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
 800a54c:	0070                	addi	a2,sp,12
 800a54e:	200035b7          	lui	a1,0x20003
 800a552:	95058593          	addi	a1,a1,-1712 # 20002950 <mfg_areas.3100>
 800a556:	4529                	li	a0,10
 800a558:	ec1ff0ef          	jal	ra,800a418 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
 800a55c:	e105                	bnez	a0,800a57c <flash_map_init+0x6c>
 800a55e:	47b2                	lw	a5,12(sp)
 800a560:	00f05e63          	blez	a5,800a57c <flash_map_init+0x6c>
        flash_map = mfg_areas;
 800a564:	200036b7          	lui	a3,0x20003
 800a568:	20003737          	lui	a4,0x20003
 800a56c:	95070713          	addi	a4,a4,-1712 # 20002950 <mfg_areas.3100>
 800a570:	d2e6a023          	sw	a4,-736(a3) # 20002d20 <flash_map>
        flash_map_entries = num_areas;
 800a574:	20003737          	lui	a4,0x20003
 800a578:	d2f72223          	sw	a5,-732(a4) # 20002d24 <flash_map_entries>
    }
}
 800a57c:	40f2                	lw	ra,28(sp)
 800a57e:	6105                	addi	sp,sp,32
 800a580:	8082                	ret
    SYSINIT_ASSERT_ACTIVE();
 800a582:	4681                	li	a3,0
 800a584:	4601                	li	a2,0
 800a586:	4581                	li	a1,0
 800a588:	4501                	li	a0,0
 800a58a:	a49fc0ef          	jal	ra,8006fd2 <__assert_func>

0800a58e <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
 800a58e:	8082                	ret

0800a590 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
 800a590:	1101                	addi	sp,sp,-32
 800a592:	ce06                	sw	ra,28(sp)
 800a594:	cc22                	sw	s0,24(sp)
 800a596:	ca26                	sw	s1,20(sp)
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
 800a598:	00254483          	lbu	s1,2(a0)
 800a59c:	8a01a783          	lw	a5,-1888(gp) # 200005c0 <mfg_num_mmrs>
 800a5a0:	08f4d763          	bge	s1,a5,800a62e <mfg_seek_next_aux+0x9e>
 800a5a4:	842a                	mv	s0,a0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
 800a5a6:	00149713          	slli	a4,s1,0x1
 800a5aa:	9726                	add	a4,a4,s1
 800a5ac:	00271693          	slli	a3,a4,0x2
 800a5b0:	200037b7          	lui	a5,0x20003
 800a5b4:	9c878793          	addi	a5,a5,-1592 # 200029c8 <mfg_mmrs>
 800a5b8:	97b6                	add	a5,a5,a3
 800a5ba:	006c                	addi	a1,sp,12
 800a5bc:	0007c503          	lbu	a0,0(a5)
 800a5c0:	ee9ff0ef          	jal	ra,800a4a8 <flash_area_open>
    if (rc != 0) {
 800a5c4:	e53d                	bnez	a0,800a632 <mfg_seek_next_aux+0xa2>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
 800a5c6:	4058                	lw	a4,4(s0)
 800a5c8:	e329                	bnez	a4,800a60a <mfg_seek_next_aux+0x7a>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
 800a5ca:	00149793          	slli	a5,s1,0x1
 800a5ce:	94be                	add	s1,s1,a5
 800a5d0:	00249713          	slli	a4,s1,0x2
 800a5d4:	200037b7          	lui	a5,0x20003
 800a5d8:	9c878793          	addi	a5,a5,-1592 # 200029c8 <mfg_mmrs>
 800a5dc:	97ba                	add	a5,a5,a4
 800a5de:	43dc                	lw	a5,4(a5)
 800a5e0:	c05c                	sw	a5,4(s0)
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
 800a5e2:	404c                	lw	a1,4(s0)
 800a5e4:	4532                	lw	a0,12(sp)
 800a5e6:	451c                	lw	a5,8(a0)
 800a5e8:	17e1                	addi	a5,a5,-8
 800a5ea:	02f5e863          	bltu	a1,a5,800a61a <mfg_seek_next_aux+0x8a>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
 800a5ee:	00244783          	lbu	a5,2(s0)
 800a5f2:	00178693          	addi	a3,a5,1
 800a5f6:	8a01a703          	lw	a4,-1888(gp) # 200005c0 <mfg_num_mmrs>
 800a5fa:	00e6de63          	bge	a3,a4,800a616 <mfg_seek_next_aux+0x86>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
 800a5fe:	00042223          	sw	zero,4(s0)
            reader->mmr_idx++;
 800a602:	00d40123          	sb	a3,2(s0)
            rc = SYS_EAGAIN;
 800a606:	5569                	li	a0,-6
 800a608:	a831                	j	800a624 <mfg_seek_next_aux+0x94>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
 800a60a:	00144783          	lbu	a5,1(s0)
 800a60e:	97ba                	add	a5,a5,a4
 800a610:	0789                	addi	a5,a5,2
 800a612:	c05c                	sw	a5,4(s0)
 800a614:	b7f9                	j	800a5e2 <mfg_seek_next_aux+0x52>
            rc = SYS_EDONE;
 800a616:	5545                	li	a0,-15
        }
        goto done;
 800a618:	a031                	j	800a624 <mfg_seek_next_aux+0x94>
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
 800a61a:	4689                	li	a3,2
 800a61c:	8622                	mv	a2,s0
 800a61e:	ec9ff0ef          	jal	ra,800a4e6 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
 800a622:	e911                	bnez	a0,800a636 <mfg_seek_next_aux+0xa6>
    }

done:
    flash_area_close(fap);
    return rc;
}
 800a624:	40f2                	lw	ra,28(sp)
 800a626:	4462                	lw	s0,24(sp)
 800a628:	44d2                	lw	s1,20(sp)
 800a62a:	6105                	addi	sp,sp,32
 800a62c:	8082                	ret
        return SYS_EINVAL;
 800a62e:	5579                	li	a0,-2
 800a630:	bfd5                	j	800a624 <mfg_seek_next_aux+0x94>
        return SYS_EIO;
 800a632:	556d                	li	a0,-5
 800a634:	bfc5                	j	800a624 <mfg_seek_next_aux+0x94>
        rc = SYS_EIO;
 800a636:	556d                	li	a0,-5
 800a638:	b7f5                	j	800a624 <mfg_seek_next_aux+0x94>

0800a63a <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
 800a63a:	1101                	addi	sp,sp,-32
 800a63c:	ce06                	sw	ra,28(sp)
 800a63e:	cc22                	sw	s0,24(sp)
 800a640:	ca26                	sw	s1,20(sp)
 800a642:	84aa                	mv	s1,a0
 800a644:	842e                	mv	s0,a1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
 800a646:	006c                	addi	a1,sp,12
 800a648:	e61ff0ef          	jal	ra,800a4a8 <flash_area_open>
    if (rc != 0) {
 800a64c:	e529                	bnez	a0,800a696 <mfg_read_mmr+0x5c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
 800a64e:	4532                	lw	a0,12(sp)
 800a650:	450c                	lw	a1,8(a0)
 800a652:	46a1                	li	a3,8
 800a654:	0050                	addi	a2,sp,4
 800a656:	15e1                	addi	a1,a1,-8
 800a658:	e8fff0ef          	jal	ra,800a4e6 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
 800a65c:	ed1d                	bnez	a0,800a69a <mfg_read_mmr+0x60>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
 800a65e:	4722                	lw	a4,8(sp)
 800a660:	3bb2a7b7          	lui	a5,0x3bb2a
 800a664:	26978793          	addi	a5,a5,617 # 3bb2a269 <_sp+0x1bb25269>
 800a668:	02f71b63          	bne	a4,a5,800a69e <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
 800a66c:	00614703          	lbu	a4,6(sp)
 800a670:	4789                	li	a5,2
 800a672:	02f71863          	bne	a4,a5,800a6a2 <mfg_read_mmr+0x68>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
 800a676:	00415703          	lhu	a4,4(sp)
 800a67a:	47b2                	lw	a5,12(sp)
 800a67c:	479c                	lw	a5,8(a5)
 800a67e:	02e7e463          	bltu	a5,a4,800a6a6 <mfg_read_mmr+0x6c>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
 800a682:	8f99                	sub	a5,a5,a4
    *out_mmr = (struct mfg_mmr) {
 800a684:	00940023          	sb	s1,0(s0)
 800a688:	c05c                	sw	a5,4(s0)
 800a68a:	c418                	sw	a4,8(s0)
        .size = ftr.size,
    };

    return 0;
}
 800a68c:	40f2                	lw	ra,28(sp)
 800a68e:	4462                	lw	s0,24(sp)
 800a690:	44d2                	lw	s1,20(sp)
 800a692:	6105                	addi	sp,sp,32
 800a694:	8082                	ret
        return SYS_EIO;
 800a696:	556d                	li	a0,-5
 800a698:	bfd5                	j	800a68c <mfg_read_mmr+0x52>
        return SYS_EIO;
 800a69a:	556d                	li	a0,-5
 800a69c:	bfc5                	j	800a68c <mfg_read_mmr+0x52>
        return SYS_ENODEV;
 800a69e:	555d                	li	a0,-9
 800a6a0:	b7f5                	j	800a68c <mfg_read_mmr+0x52>
        return SYS_ENOTSUP;
 800a6a2:	5551                	li	a0,-12
 800a6a4:	b7e5                	j	800a68c <mfg_read_mmr+0x52>
        return SYS_ENODEV;
 800a6a6:	555d                	li	a0,-9
 800a6a8:	b7d5                	j	800a68c <mfg_read_mmr+0x52>

0800a6aa <mfg_read_next_mmr>:
{
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
 800a6aa:	4701                	li	a4,0
 800a6ac:	8a01a783          	lw	a5,-1888(gp) # 200005c0 <mfg_num_mmrs>
 800a6b0:	02f75263          	bge	a4,a5,800a6d4 <mfg_read_next_mmr+0x2a>
        if (mfg_mmrs[i].area_id == area_id) {
 800a6b4:	00171693          	slli	a3,a4,0x1
 800a6b8:	96ba                	add	a3,a3,a4
 800a6ba:	00269613          	slli	a2,a3,0x2
 800a6be:	200037b7          	lui	a5,0x20003
 800a6c2:	9c878793          	addi	a5,a5,-1592 # 200029c8 <mfg_mmrs>
 800a6c6:	97b2                	add	a5,a5,a2
 800a6c8:	0007c783          	lbu	a5,0(a5)
 800a6cc:	02a78e63          	beq	a5,a0,800a708 <mfg_read_next_mmr+0x5e>
    for (i = 0; i < mfg_num_mmrs; i++) {
 800a6d0:	0705                	addi	a4,a4,1
 800a6d2:	bfe9                	j	800a6ac <mfg_read_next_mmr+0x2>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
 800a6d4:	4705                	li	a4,1
 800a6d6:	02f74b63          	blt	a4,a5,800a70c <mfg_read_next_mmr+0x62>
{
 800a6da:	1141                	addi	sp,sp,-16
 800a6dc:	c606                	sw	ra,12(sp)
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
 800a6de:	00179713          	slli	a4,a5,0x1
 800a6e2:	97ba                	add	a5,a5,a4
 800a6e4:	00279593          	slli	a1,a5,0x2
 800a6e8:	200037b7          	lui	a5,0x20003
 800a6ec:	9c878793          	addi	a5,a5,-1592 # 200029c8 <mfg_mmrs>
 800a6f0:	95be                	add	a1,a1,a5
 800a6f2:	f49ff0ef          	jal	ra,800a63a <mfg_read_mmr>
    if (rc != 0) {
 800a6f6:	e511                	bnez	a0,800a702 <mfg_read_next_mmr+0x58>
        return rc;
    }

    mfg_num_mmrs++;
 800a6f8:	8a018793          	addi	a5,gp,-1888 # 200005c0 <mfg_num_mmrs>
 800a6fc:	4398                	lw	a4,0(a5)
 800a6fe:	0705                	addi	a4,a4,1
 800a700:	c398                	sw	a4,0(a5)
    return 0;
}
 800a702:	40b2                	lw	ra,12(sp)
 800a704:	0141                	addi	sp,sp,16
 800a706:	8082                	ret
            return SYS_EALREADY;
 800a708:	5555                	li	a0,-11
 800a70a:	8082                	ret
        return SYS_ENOMEM;
 800a70c:	557d                	li	a0,-1
}
 800a70e:	8082                	ret

0800a710 <mfg_open_flash_area>:
{
 800a710:	1141                	addi	sp,sp,-16
 800a712:	c606                	sw	ra,12(sp)
    assert(reader->mmr_idx < mfg_num_mmrs);
 800a714:	00254783          	lbu	a5,2(a0)
 800a718:	8a01a703          	lw	a4,-1888(gp) # 200005c0 <mfg_num_mmrs>
 800a71c:	02e7d463          	bge	a5,a4,800a744 <mfg_open_flash_area+0x34>
    rc = flash_area_open(mmr->area_id, fap);
 800a720:	00179713          	slli	a4,a5,0x1
 800a724:	973e                	add	a4,a4,a5
 800a726:	00271693          	slli	a3,a4,0x2
 800a72a:	200037b7          	lui	a5,0x20003
 800a72e:	9c878793          	addi	a5,a5,-1592 # 200029c8 <mfg_mmrs>
 800a732:	97b6                	add	a5,a5,a3
 800a734:	0007c503          	lbu	a0,0(a5)
 800a738:	d71ff0ef          	jal	ra,800a4a8 <flash_area_open>
    if (rc != 0) {
 800a73c:	e911                	bnez	a0,800a750 <mfg_open_flash_area+0x40>
}
 800a73e:	40b2                	lw	ra,12(sp)
 800a740:	0141                	addi	sp,sp,16
 800a742:	8082                	ret
    assert(reader->mmr_idx < mfg_num_mmrs);
 800a744:	4681                	li	a3,0
 800a746:	4601                	li	a2,0
 800a748:	4581                	li	a1,0
 800a74a:	4501                	li	a0,0
 800a74c:	887fc0ef          	jal	ra,8006fd2 <__assert_func>
        return SYS_EIO;
 800a750:	556d                	li	a0,-5
 800a752:	b7f5                	j	800a73e <mfg_open_flash_area+0x2e>

0800a754 <mfg_read_tlv_body>:
{
 800a754:	1101                	addi	sp,sp,-32
 800a756:	ce06                	sw	ra,28(sp)
 800a758:	cc22                	sw	s0,24(sp)
 800a75a:	ca26                	sw	s1,20(sp)
 800a75c:	c84a                	sw	s2,16(sp)
 800a75e:	892a                	mv	s2,a0
 800a760:	84ae                	mv	s1,a1
 800a762:	8432                	mv	s0,a2
    rc = mfg_open_flash_area(reader, &fap);
 800a764:	006c                	addi	a1,sp,12
 800a766:	fabff0ef          	jal	ra,800a710 <mfg_open_flash_area>
    if (rc != 0) {
 800a76a:	c519                	beqz	a0,800a778 <mfg_read_tlv_body+0x24>
}
 800a76c:	40f2                	lw	ra,28(sp)
 800a76e:	4462                	lw	s0,24(sp)
 800a770:	44d2                	lw	s1,20(sp)
 800a772:	4942                	lw	s2,16(sp)
 800a774:	6105                	addi	sp,sp,32
 800a776:	8082                	ret
    memset(dst, 0, max_size);
 800a778:	8622                	mv	a2,s0
 800a77a:	4581                	li	a1,0
 800a77c:	8526                	mv	a0,s1
 800a77e:	c54fe0ef          	jal	ra,8008bd2 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
 800a782:	00194683          	lbu	a3,1(s2)
 800a786:	00d45363          	bge	s0,a3,800a78c <mfg_read_tlv_body+0x38>
 800a78a:	86a2                	mv	a3,s0
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
 800a78c:	00492583          	lw	a1,4(s2)
 800a790:	8626                	mv	a2,s1
 800a792:	0589                	addi	a1,a1,2
 800a794:	4532                	lw	a0,12(sp)
 800a796:	d51ff0ef          	jal	ra,800a4e6 <flash_area_read>
    if (rc != 0) {
 800a79a:	d969                	beqz	a0,800a76c <mfg_read_tlv_body+0x18>
        return SYS_EIO;
 800a79c:	556d                	li	a0,-5
 800a79e:	b7f9                	j	800a76c <mfg_read_tlv_body+0x18>

0800a7a0 <mfg_seek_next>:
{
 800a7a0:	1141                	addi	sp,sp,-16
 800a7a2:	c606                	sw	ra,12(sp)
 800a7a4:	c422                	sw	s0,8(sp)
 800a7a6:	842a                	mv	s0,a0
        rc = mfg_seek_next_aux(reader);
 800a7a8:	8522                	mv	a0,s0
 800a7aa:	de7ff0ef          	jal	ra,800a590 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
 800a7ae:	57e9                	li	a5,-6
 800a7b0:	fef50ce3          	beq	a0,a5,800a7a8 <mfg_seek_next+0x8>
}
 800a7b4:	40b2                	lw	ra,12(sp)
 800a7b6:	4422                	lw	s0,8(sp)
 800a7b8:	0141                	addi	sp,sp,16
 800a7ba:	8082                	ret

0800a7bc <mfg_seek_next_with_type>:
{
 800a7bc:	1141                	addi	sp,sp,-16
 800a7be:	c606                	sw	ra,12(sp)
 800a7c0:	c422                	sw	s0,8(sp)
 800a7c2:	c226                	sw	s1,4(sp)
 800a7c4:	842a                	mv	s0,a0
 800a7c6:	84ae                	mv	s1,a1
        rc = mfg_seek_next(reader);
 800a7c8:	8522                	mv	a0,s0
 800a7ca:	fd7ff0ef          	jal	ra,800a7a0 <mfg_seek_next>
        if (rc != 0) {
 800a7ce:	e509                	bnez	a0,800a7d8 <mfg_seek_next_with_type+0x1c>
        if (reader->cur_tlv.type == type) {
 800a7d0:	00044783          	lbu	a5,0(s0)
 800a7d4:	fe979ae3          	bne	a5,s1,800a7c8 <mfg_seek_next_with_type+0xc>
}
 800a7d8:	40b2                	lw	ra,12(sp)
 800a7da:	4422                	lw	s0,8(sp)
 800a7dc:	4492                	lw	s1,4(sp)
 800a7de:	0141                	addi	sp,sp,16
 800a7e0:	8082                	ret

0800a7e2 <mfg_read_tlv_flash_area>:
{
 800a7e2:	1141                	addi	sp,sp,-16
 800a7e4:	c606                	sw	ra,12(sp)
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
 800a7e6:	4629                	li	a2,10
 800a7e8:	f6dff0ef          	jal	ra,800a754 <mfg_read_tlv_body>
}
 800a7ec:	40b2                	lw	ra,12(sp)
 800a7ee:	0141                	addi	sp,sp,16
 800a7f0:	8082                	ret

0800a7f2 <mfg_read_tlv_mmr_ref>:
{
 800a7f2:	1141                	addi	sp,sp,-16
 800a7f4:	c606                	sw	ra,12(sp)
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
 800a7f6:	4605                	li	a2,1
 800a7f8:	f5dff0ef          	jal	ra,800a754 <mfg_read_tlv_body>
}
 800a7fc:	40b2                	lw	ra,12(sp)
 800a7fe:	0141                	addi	sp,sp,16
 800a800:	8082                	ret

0800a802 <mfg_init>:
void
mfg_init(void)
{
    int rc;

    if (mfg_initialized) {
 800a802:	89c1c783          	lbu	a5,-1892(gp) # 200005bc <mfg_initialized>
 800a806:	eb95                	bnez	a5,800a83a <mfg_init+0x38>
{
 800a808:	1141                	addi	sp,sp,-16
 800a80a:	c606                	sw	ra,12(sp)
        return;
    }
    mfg_initialized = true;
 800a80c:	4705                	li	a4,1
 800a80e:	88e18e23          	sb	a4,-1892(gp) # 200005bc <mfg_initialized>

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
 800a812:	200037b7          	lui	a5,0x20003
 800a816:	a707c783          	lbu	a5,-1424(a5) # 20002a70 <sysinit_active>
 800a81a:	cb81                	beqz	a5,800a82a <mfg_init+0x28>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
 800a81c:	4501                	li	a0,0
 800a81e:	e8dff0ef          	jal	ra,800a6aa <mfg_read_next_mmr>
    if (rc != 0) {
 800a822:	c911                	beqz	a0,800a836 <mfg_init+0x34>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
 800a824:	40b2                	lw	ra,12(sp)
 800a826:	0141                	addi	sp,sp,16
 800a828:	8082                	ret
    SYSINIT_ASSERT_ACTIVE();
 800a82a:	4681                	li	a3,0
 800a82c:	4601                	li	a2,0
 800a82e:	4581                	li	a1,0
 800a830:	4501                	li	a0,0
 800a832:	fa0fc0ef          	jal	ra,8006fd2 <__assert_func>
    rc = mfg_read_mmr_refs();
 800a836:	200d                	jal	800a858 <mfg_read_mmr_refs>
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
 800a838:	b7f5                	j	800a824 <mfg_init+0x22>
 800a83a:	8082                	ret

0800a83c <mfg_open>:
{
 800a83c:	1141                	addi	sp,sp,-16
 800a83e:	c606                	sw	ra,12(sp)
 800a840:	c422                	sw	s0,8(sp)
 800a842:	842a                	mv	s0,a0
    mfg_init();
 800a844:	fbfff0ef          	jal	ra,800a802 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
 800a848:	00042023          	sw	zero,0(s0)
 800a84c:	00042223          	sw	zero,4(s0)
}
 800a850:	40b2                	lw	ra,12(sp)
 800a852:	4422                	lw	s0,8(sp)
 800a854:	0141                	addi	sp,sp,16
 800a856:	8082                	ret

0800a858 <mfg_read_mmr_refs>:
{
 800a858:	1101                	addi	sp,sp,-32
 800a85a:	ce06                	sw	ra,28(sp)
    mfg_open(&reader);
 800a85c:	0048                	addi	a0,sp,4
 800a85e:	fdfff0ef          	jal	ra,800a83c <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
 800a862:	4591                	li	a1,4
 800a864:	0048                	addi	a0,sp,4
 800a866:	f57ff0ef          	jal	ra,800a7bc <mfg_seek_next_with_type>
        switch (rc) {
 800a86a:	57c5                	li	a5,-15
 800a86c:	02f50163          	beq	a0,a5,800a88e <mfg_read_mmr_refs+0x36>
 800a870:	e105                	bnez	a0,800a890 <mfg_read_mmr_refs+0x38>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
 800a872:	006c                	addi	a1,sp,12
 800a874:	0048                	addi	a0,sp,4
 800a876:	f7dff0ef          	jal	ra,800a7f2 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
 800a87a:	e919                	bnez	a0,800a890 <mfg_read_mmr_refs+0x38>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
 800a87c:	00c14503          	lbu	a0,12(sp)
 800a880:	e2bff0ef          	jal	ra,800a6aa <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
 800a884:	dd79                	beqz	a0,800a862 <mfg_read_mmr_refs+0xa>
 800a886:	57d5                	li	a5,-11
 800a888:	fcf50de3          	beq	a0,a5,800a862 <mfg_read_mmr_refs+0xa>
 800a88c:	a011                	j	800a890 <mfg_read_mmr_refs+0x38>
            return 0;
 800a88e:	4501                	li	a0,0
}
 800a890:	40f2                	lw	ra,28(sp)
 800a892:	6105                	addi	sp,sp,32
 800a894:	8082                	ret

0800a896 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
 800a896:	415c                	lw	a5,4(a0)
 800a898:	00f5e863          	bltu	a1,a5,800a8a8 <hal_flash_check_addr+0x12>
 800a89c:	4518                	lw	a4,8(a0)
 800a89e:	97ba                	add	a5,a5,a4
 800a8a0:	00b7e663          	bltu	a5,a1,800a8ac <hal_flash_check_addr+0x16>
        return SYS_EINVAL;
    }
    return 0;
 800a8a4:	4501                	li	a0,0
 800a8a6:	8082                	ret
        return SYS_EINVAL;
 800a8a8:	5579                	li	a0,-2
 800a8aa:	8082                	ret
 800a8ac:	5579                	li	a0,-2
}
 800a8ae:	8082                	ret

0800a8b0 <hal_flash_init>:
{
 800a8b0:	1141                	addi	sp,sp,-16
 800a8b2:	c606                	sw	ra,12(sp)
 800a8b4:	c422                	sw	s0,8(sp)
 800a8b6:	c226                	sw	s1,4(sp)
    int rc = 0;
 800a8b8:	4481                	li	s1,0
    for (i = 0; ; i++) {
 800a8ba:	4401                	li	s0,0
 800a8bc:	a021                	j	800a8c4 <hal_flash_init+0x14>
 800a8be:	0405                	addi	s0,s0,1
 800a8c0:	0ff47413          	andi	s0,s0,255
        hf = hal_bsp_flash_dev(i);
 800a8c4:	8522                	mv	a0,s0
 800a8c6:	d55fe0ef          	jal	ra,800961a <hal_bsp_flash_dev>
        if (!hf) {
 800a8ca:	c519                	beqz	a0,800a8d8 <hal_flash_init+0x28>
        if (hf->hf_itf->hff_init(hf)) {
 800a8cc:	411c                	lw	a5,0(a0)
 800a8ce:	4bdc                	lw	a5,20(a5)
 800a8d0:	9782                	jalr	a5
 800a8d2:	d575                	beqz	a0,800a8be <hal_flash_init+0xe>
            rc = SYS_EIO;
 800a8d4:	54ed                	li	s1,-5
 800a8d6:	b7e5                	j	800a8be <hal_flash_init+0xe>
}
 800a8d8:	8526                	mv	a0,s1
 800a8da:	40b2                	lw	ra,12(sp)
 800a8dc:	4422                	lw	s0,8(sp)
 800a8de:	4492                	lw	s1,4(sp)
 800a8e0:	0141                	addi	sp,sp,16
 800a8e2:	8082                	ret

0800a8e4 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
 800a8e4:	1101                	addi	sp,sp,-32
 800a8e6:	ce06                	sw	ra,28(sp)
 800a8e8:	cc22                	sw	s0,24(sp)
 800a8ea:	ca26                	sw	s1,20(sp)
 800a8ec:	c84a                	sw	s2,16(sp)
 800a8ee:	c64e                	sw	s3,12(sp)
 800a8f0:	84ae                	mv	s1,a1
 800a8f2:	89b2                	mv	s3,a2
 800a8f4:	8936                	mv	s2,a3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
 800a8f6:	d25fe0ef          	jal	ra,800961a <hal_bsp_flash_dev>
    if (!hf) {
 800a8fa:	c91d                	beqz	a0,800a930 <hal_flash_read+0x4c>
 800a8fc:	842a                	mv	s0,a0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
 800a8fe:	85a6                	mv	a1,s1
 800a900:	f97ff0ef          	jal	ra,800a896 <hal_flash_check_addr>
 800a904:	e905                	bnez	a0,800a934 <hal_flash_read+0x50>
      hal_flash_check_addr(hf, address + num_bytes)) {
 800a906:	012485b3          	add	a1,s1,s2
 800a90a:	8522                	mv	a0,s0
 800a90c:	f8bff0ef          	jal	ra,800a896 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
 800a910:	e505                	bnez	a0,800a938 <hal_flash_read+0x54>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
 800a912:	401c                	lw	a5,0(s0)
 800a914:	439c                	lw	a5,0(a5)
 800a916:	86ca                	mv	a3,s2
 800a918:	864e                	mv	a2,s3
 800a91a:	85a6                	mv	a1,s1
 800a91c:	8522                	mv	a0,s0
 800a91e:	9782                	jalr	a5
    if (rc != 0) {
 800a920:	ed11                	bnez	a0,800a93c <hal_flash_read+0x58>
        return SYS_EIO;
    }

    return 0;
}
 800a922:	40f2                	lw	ra,28(sp)
 800a924:	4462                	lw	s0,24(sp)
 800a926:	44d2                	lw	s1,20(sp)
 800a928:	4942                	lw	s2,16(sp)
 800a92a:	49b2                	lw	s3,12(sp)
 800a92c:	6105                	addi	sp,sp,32
 800a92e:	8082                	ret
        return SYS_EINVAL;
 800a930:	5579                	li	a0,-2
 800a932:	bfc5                	j	800a922 <hal_flash_read+0x3e>
        return SYS_EINVAL;
 800a934:	5579                	li	a0,-2
 800a936:	b7f5                	j	800a922 <hal_flash_read+0x3e>
 800a938:	5579                	li	a0,-2
 800a93a:	b7e5                	j	800a922 <hal_flash_read+0x3e>
        return SYS_EIO;
 800a93c:	556d                	li	a0,-5
 800a93e:	b7d5                	j	800a922 <hal_flash_read+0x3e>

0800a940 <__ashldi3>:
 800a940:	ce11                	beqz	a2,800a95c <__ashldi3+0x1c>
 800a942:	02000793          	li	a5,32
 800a946:	8f91                	sub	a5,a5,a2
 800a948:	00f05b63          	blez	a5,800a95e <__ashldi3+0x1e>
 800a94c:	00c595b3          	sll	a1,a1,a2
 800a950:	00f557b3          	srl	a5,a0,a5
 800a954:	00c51633          	sll	a2,a0,a2
 800a958:	8ddd                	or	a1,a1,a5
 800a95a:	8532                	mv	a0,a2
 800a95c:	8082                	ret
 800a95e:	fe060593          	addi	a1,a2,-32
 800a962:	4601                	li	a2,0
 800a964:	00b515b3          	sll	a1,a0,a1
 800a968:	8532                	mv	a0,a2
 800a96a:	bfcd                	j	800a95c <__ashldi3+0x1c>

0800a96c <__udivdi3>:
 800a96c:	87b6                	mv	a5,a3
 800a96e:	88b2                	mv	a7,a2
 800a970:	832a                	mv	t1,a0
 800a972:	882e                	mv	a6,a1
 800a974:	14069d63          	bnez	a3,800aace <__udivdi3+0x162>
 800a978:	0ac5f963          	bgeu	a1,a2,800aa2a <__udivdi3+0xbe>
 800a97c:	6741                	lui	a4,0x10
 800a97e:	1ae66e63          	bltu	a2,a4,800ab3a <__udivdi3+0x1ce>
 800a982:	010007b7          	lui	a5,0x1000
 800a986:	34f66363          	bltu	a2,a5,800accc <__udivdi3+0x360>
 800a98a:	01865693          	srli	a3,a2,0x18
 800a98e:	47e1                	li	a5,24
 800a990:	00003717          	auipc	a4,0x3
 800a994:	e5c70713          	addi	a4,a4,-420 # 800d7ec <__clz_tab>
 800a998:	9736                	add	a4,a4,a3
 800a99a:	00074703          	lbu	a4,0(a4)
 800a99e:	97ba                	add	a5,a5,a4
 800a9a0:	02000713          	li	a4,32
 800a9a4:	8f1d                	sub	a4,a4,a5
 800a9a6:	cb19                	beqz	a4,800a9bc <__udivdi3+0x50>
 800a9a8:	00e59833          	sll	a6,a1,a4
 800a9ac:	00f557b3          	srl	a5,a0,a5
 800a9b0:	00e618b3          	sll	a7,a2,a4
 800a9b4:	0107e833          	or	a6,a5,a6
 800a9b8:	00e51333          	sll	t1,a0,a4
 800a9bc:	0108d613          	srli	a2,a7,0x10
 800a9c0:	02c85533          	divu	a0,a6,a2
 800a9c4:	01089693          	slli	a3,a7,0x10
 800a9c8:	82c1                	srli	a3,a3,0x10
 800a9ca:	01035793          	srli	a5,t1,0x10
 800a9ce:	02c87733          	remu	a4,a6,a2
 800a9d2:	02a685b3          	mul	a1,a3,a0
 800a9d6:	0742                	slli	a4,a4,0x10
 800a9d8:	00f76833          	or	a6,a4,a5
 800a9dc:	00b87a63          	bgeu	a6,a1,800a9f0 <__udivdi3+0x84>
 800a9e0:	9846                	add	a6,a6,a7
 800a9e2:	fff50793          	addi	a5,a0,-1
 800a9e6:	01186463          	bltu	a6,a7,800a9ee <__udivdi3+0x82>
 800a9ea:	30b86763          	bltu	a6,a1,800acf8 <__udivdi3+0x38c>
 800a9ee:	853e                	mv	a0,a5
 800a9f0:	40b80833          	sub	a6,a6,a1
 800a9f4:	02c85733          	divu	a4,a6,a2
 800a9f8:	0342                	slli	t1,t1,0x10
 800a9fa:	01035313          	srli	t1,t1,0x10
 800a9fe:	02c87833          	remu	a6,a6,a2
 800aa02:	02e686b3          	mul	a3,a3,a4
 800aa06:	0842                	slli	a6,a6,0x10
 800aa08:	00686833          	or	a6,a6,t1
 800aa0c:	00d87b63          	bgeu	a6,a3,800aa22 <__udivdi3+0xb6>
 800aa10:	9846                	add	a6,a6,a7
 800aa12:	fff70793          	addi	a5,a4,-1
 800aa16:	01186563          	bltu	a6,a7,800aa20 <__udivdi3+0xb4>
 800aa1a:	1779                	addi	a4,a4,-2
 800aa1c:	00d86363          	bltu	a6,a3,800aa22 <__udivdi3+0xb6>
 800aa20:	873e                	mv	a4,a5
 800aa22:	0542                	slli	a0,a0,0x10
 800aa24:	8d59                	or	a0,a0,a4
 800aa26:	4581                	li	a1,0
 800aa28:	8082                	ret
 800aa2a:	e601                	bnez	a2,800aa32 <__udivdi3+0xc6>
 800aa2c:	4705                	li	a4,1
 800aa2e:	02c758b3          	divu	a7,a4,a2
 800aa32:	6741                	lui	a4,0x10
 800aa34:	0ee8ea63          	bltu	a7,a4,800ab28 <__udivdi3+0x1bc>
 800aa38:	010007b7          	lui	a5,0x1000
 800aa3c:	28f8ec63          	bltu	a7,a5,800acd4 <__udivdi3+0x368>
 800aa40:	0188d693          	srli	a3,a7,0x18
 800aa44:	47e1                	li	a5,24
 800aa46:	00003717          	auipc	a4,0x3
 800aa4a:	da670713          	addi	a4,a4,-602 # 800d7ec <__clz_tab>
 800aa4e:	9736                	add	a4,a4,a3
 800aa50:	00074683          	lbu	a3,0(a4)
 800aa54:	96be                	add	a3,a3,a5
 800aa56:	02000793          	li	a5,32
 800aa5a:	8f95                	sub	a5,a5,a3
 800aa5c:	ebe5                	bnez	a5,800ab4c <__udivdi3+0x1e0>
 800aa5e:	01089e93          	slli	t4,a7,0x10
 800aa62:	41158733          	sub	a4,a1,a7
 800aa66:	0108df13          	srli	t5,a7,0x10
 800aa6a:	010ede93          	srli	t4,t4,0x10
 800aa6e:	4585                	li	a1,1
 800aa70:	01035793          	srli	a5,t1,0x10
 800aa74:	03e75533          	divu	a0,a4,t5
 800aa78:	03e77733          	remu	a4,a4,t5
 800aa7c:	03d506b3          	mul	a3,a0,t4
 800aa80:	0742                	slli	a4,a4,0x10
 800aa82:	8fd9                	or	a5,a5,a4
 800aa84:	00d7fa63          	bgeu	a5,a3,800aa98 <__udivdi3+0x12c>
 800aa88:	97c6                	add	a5,a5,a7
 800aa8a:	fff50713          	addi	a4,a0,-1
 800aa8e:	0117e463          	bltu	a5,a7,800aa96 <__udivdi3+0x12a>
 800aa92:	26d7e663          	bltu	a5,a3,800acfe <__udivdi3+0x392>
 800aa96:	853a                	mv	a0,a4
 800aa98:	8f95                	sub	a5,a5,a3
 800aa9a:	03e7d733          	divu	a4,a5,t5
 800aa9e:	0342                	slli	t1,t1,0x10
 800aaa0:	01035313          	srli	t1,t1,0x10
 800aaa4:	03e7f7b3          	remu	a5,a5,t5
 800aaa8:	03d70eb3          	mul	t4,a4,t4
 800aaac:	07c2                	slli	a5,a5,0x10
 800aaae:	0067e7b3          	or	a5,a5,t1
 800aab2:	01d7fb63          	bgeu	a5,t4,800aac8 <__udivdi3+0x15c>
 800aab6:	97c6                	add	a5,a5,a7
 800aab8:	fff70693          	addi	a3,a4,-1
 800aabc:	0117e563          	bltu	a5,a7,800aac6 <__udivdi3+0x15a>
 800aac0:	1779                	addi	a4,a4,-2
 800aac2:	01d7e363          	bltu	a5,t4,800aac8 <__udivdi3+0x15c>
 800aac6:	8736                	mv	a4,a3
 800aac8:	0542                	slli	a0,a0,0x10
 800aaca:	8d59                	or	a0,a0,a4
 800aacc:	8082                	ret
 800aace:	04d5e263          	bltu	a1,a3,800ab12 <__udivdi3+0x1a6>
 800aad2:	67c1                	lui	a5,0x10
 800aad4:	04f6e263          	bltu	a3,a5,800ab18 <__udivdi3+0x1ac>
 800aad8:	010007b7          	lui	a5,0x1000
 800aadc:	1ef6e463          	bltu	a3,a5,800acc4 <__udivdi3+0x358>
 800aae0:	0186d713          	srli	a4,a3,0x18
 800aae4:	4861                	li	a6,24
 800aae6:	00003797          	auipc	a5,0x3
 800aaea:	d0678793          	addi	a5,a5,-762 # 800d7ec <__clz_tab>
 800aaee:	97ba                	add	a5,a5,a4
 800aaf0:	0007c703          	lbu	a4,0(a5)
 800aaf4:	02000e13          	li	t3,32
 800aaf8:	9742                	add	a4,a4,a6
 800aafa:	40ee0e33          	sub	t3,t3,a4
 800aafe:	0c0e1a63          	bnez	t3,800abd2 <__udivdi3+0x266>
 800ab02:	1cb6ed63          	bltu	a3,a1,800acdc <__udivdi3+0x370>
 800ab06:	00c53533          	sltu	a0,a0,a2
 800ab0a:	00154513          	xori	a0,a0,1
 800ab0e:	4581                	li	a1,0
 800ab10:	8082                	ret
 800ab12:	4581                	li	a1,0
 800ab14:	4501                	li	a0,0
 800ab16:	8082                	ret
 800ab18:	0ff00793          	li	a5,255
 800ab1c:	1cd7f363          	bgeu	a5,a3,800ace2 <__udivdi3+0x376>
 800ab20:	0086d713          	srli	a4,a3,0x8
 800ab24:	4821                	li	a6,8
 800ab26:	b7c1                	j	800aae6 <__udivdi3+0x17a>
 800ab28:	0ff00713          	li	a4,255
 800ab2c:	86c6                	mv	a3,a7
 800ab2e:	f1177ce3          	bgeu	a4,a7,800aa46 <__udivdi3+0xda>
 800ab32:	0088d693          	srli	a3,a7,0x8
 800ab36:	47a1                	li	a5,8
 800ab38:	b739                	j	800aa46 <__udivdi3+0xda>
 800ab3a:	0ff00713          	li	a4,255
 800ab3e:	86b2                	mv	a3,a2
 800ab40:	e4c778e3          	bgeu	a4,a2,800a990 <__udivdi3+0x24>
 800ab44:	00865693          	srli	a3,a2,0x8
 800ab48:	47a1                	li	a5,8
 800ab4a:	b599                	j	800a990 <__udivdi3+0x24>
 800ab4c:	00f898b3          	sll	a7,a7,a5
 800ab50:	00d5d633          	srl	a2,a1,a3
 800ab54:	0108df13          	srli	t5,a7,0x10
 800ab58:	03e65e33          	divu	t3,a2,t5
 800ab5c:	00f59733          	sll	a4,a1,a5
 800ab60:	00d556b3          	srl	a3,a0,a3
 800ab64:	8f55                	or	a4,a4,a3
 800ab66:	01089e93          	slli	t4,a7,0x10
 800ab6a:	010ede93          	srli	t4,t4,0x10
 800ab6e:	00f51333          	sll	t1,a0,a5
 800ab72:	01075593          	srli	a1,a4,0x10
 800ab76:	03e676b3          	remu	a3,a2,t5
 800ab7a:	03ce87b3          	mul	a5,t4,t3
 800ab7e:	06c2                	slli	a3,a3,0x10
 800ab80:	8ecd                	or	a3,a3,a1
 800ab82:	00f6fb63          	bgeu	a3,a5,800ab98 <__udivdi3+0x22c>
 800ab86:	96c6                	add	a3,a3,a7
 800ab88:	fffe0613          	addi	a2,t3,-1
 800ab8c:	1716e463          	bltu	a3,a7,800acf4 <__udivdi3+0x388>
 800ab90:	16f6f263          	bgeu	a3,a5,800acf4 <__udivdi3+0x388>
 800ab94:	1e79                	addi	t3,t3,-2
 800ab96:	96c6                	add	a3,a3,a7
 800ab98:	8e9d                	sub	a3,a3,a5
 800ab9a:	03e6d633          	divu	a2,a3,t5
 800ab9e:	01071793          	slli	a5,a4,0x10
 800aba2:	83c1                	srli	a5,a5,0x10
 800aba4:	03e6f6b3          	remu	a3,a3,t5
 800aba8:	02ce8533          	mul	a0,t4,a2
 800abac:	01069713          	slli	a4,a3,0x10
 800abb0:	8f5d                	or	a4,a4,a5
 800abb2:	00a77b63          	bgeu	a4,a0,800abc8 <__udivdi3+0x25c>
 800abb6:	9746                	add	a4,a4,a7
 800abb8:	fff60793          	addi	a5,a2,-1
 800abbc:	13176863          	bltu	a4,a7,800acec <__udivdi3+0x380>
 800abc0:	12a77663          	bgeu	a4,a0,800acec <__udivdi3+0x380>
 800abc4:	1679                	addi	a2,a2,-2
 800abc6:	9746                	add	a4,a4,a7
 800abc8:	010e1593          	slli	a1,t3,0x10
 800abcc:	8f09                	sub	a4,a4,a0
 800abce:	8dd1                	or	a1,a1,a2
 800abd0:	b545                	j	800aa70 <__udivdi3+0x104>
 800abd2:	00e657b3          	srl	a5,a2,a4
 800abd6:	01c696b3          	sll	a3,a3,t3
 800abda:	8edd                	or	a3,a3,a5
 800abdc:	00e5d333          	srl	t1,a1,a4
 800abe0:	0106df13          	srli	t5,a3,0x10
 800abe4:	03e357b3          	divu	a5,t1,t5
 800abe8:	01069e93          	slli	t4,a3,0x10
 800abec:	010ede93          	srli	t4,t4,0x10
 800abf0:	01c59833          	sll	a6,a1,t3
 800abf4:	00e55733          	srl	a4,a0,a4
 800abf8:	01076833          	or	a6,a4,a6
 800abfc:	01085893          	srli	a7,a6,0x10
 800ac00:	01c61633          	sll	a2,a2,t3
 800ac04:	03e37333          	remu	t1,t1,t5
 800ac08:	02fe85b3          	mul	a1,t4,a5
 800ac0c:	0342                	slli	t1,t1,0x10
 800ac0e:	011368b3          	or	a7,t1,a7
 800ac12:	00b8fb63          	bgeu	a7,a1,800ac28 <__udivdi3+0x2bc>
 800ac16:	98b6                	add	a7,a7,a3
 800ac18:	fff78713          	addi	a4,a5,-1
 800ac1c:	0cd8ea63          	bltu	a7,a3,800acf0 <__udivdi3+0x384>
 800ac20:	0cb8f863          	bgeu	a7,a1,800acf0 <__udivdi3+0x384>
 800ac24:	17f9                	addi	a5,a5,-2
 800ac26:	98b6                	add	a7,a7,a3
 800ac28:	40b888b3          	sub	a7,a7,a1
 800ac2c:	03e8d733          	divu	a4,a7,t5
 800ac30:	0842                	slli	a6,a6,0x10
 800ac32:	01085813          	srli	a6,a6,0x10
 800ac36:	03e8f8b3          	remu	a7,a7,t5
 800ac3a:	02ee8333          	mul	t1,t4,a4
 800ac3e:	08c2                	slli	a7,a7,0x10
 800ac40:	0108e5b3          	or	a1,a7,a6
 800ac44:	0065fb63          	bgeu	a1,t1,800ac5a <__udivdi3+0x2ee>
 800ac48:	95b6                	add	a1,a1,a3
 800ac4a:	fff70813          	addi	a6,a4,-1
 800ac4e:	08d5ed63          	bltu	a1,a3,800ace8 <__udivdi3+0x37c>
 800ac52:	0865fb63          	bgeu	a1,t1,800ace8 <__udivdi3+0x37c>
 800ac56:	1779                	addi	a4,a4,-2
 800ac58:	95b6                	add	a1,a1,a3
 800ac5a:	07c2                	slli	a5,a5,0x10
 800ac5c:	6f41                	lui	t5,0x10
 800ac5e:	8fd9                	or	a5,a5,a4
 800ac60:	ffff0713          	addi	a4,t5,-1 # ffff <__stack_size+0xf7ff>
 800ac64:	00e7f6b3          	and	a3,a5,a4
 800ac68:	0107d893          	srli	a7,a5,0x10
 800ac6c:	8f71                	and	a4,a4,a2
 800ac6e:	8241                	srli	a2,a2,0x10
 800ac70:	02e68eb3          	mul	t4,a3,a4
 800ac74:	406585b3          	sub	a1,a1,t1
 800ac78:	02c686b3          	mul	a3,a3,a2
 800ac7c:	010ed813          	srli	a6,t4,0x10
 800ac80:	02e88733          	mul	a4,a7,a4
 800ac84:	96ba                	add	a3,a3,a4
 800ac86:	96c2                	add	a3,a3,a6
 800ac88:	02c88633          	mul	a2,a7,a2
 800ac8c:	00e6f363          	bgeu	a3,a4,800ac92 <__udivdi3+0x326>
 800ac90:	967a                	add	a2,a2,t5
 800ac92:	0106d893          	srli	a7,a3,0x10
 800ac96:	9646                	add	a2,a2,a7
 800ac98:	02c5e263          	bltu	a1,a2,800acbc <__udivdi3+0x350>
 800ac9c:	00c58563          	beq	a1,a2,800aca6 <__udivdi3+0x33a>
 800aca0:	853e                	mv	a0,a5
 800aca2:	4581                	li	a1,0
 800aca4:	8082                	ret
 800aca6:	6741                	lui	a4,0x10
 800aca8:	177d                	addi	a4,a4,-1
 800acaa:	8ef9                	and	a3,a3,a4
 800acac:	06c2                	slli	a3,a3,0x10
 800acae:	00eefeb3          	and	t4,t4,a4
 800acb2:	01c51533          	sll	a0,a0,t3
 800acb6:	96f6                	add	a3,a3,t4
 800acb8:	fed574e3          	bgeu	a0,a3,800aca0 <__udivdi3+0x334>
 800acbc:	fff78513          	addi	a0,a5,-1
 800acc0:	4581                	li	a1,0
 800acc2:	8082                	ret
 800acc4:	0106d713          	srli	a4,a3,0x10
 800acc8:	4841                	li	a6,16
 800acca:	bd31                	j	800aae6 <__udivdi3+0x17a>
 800accc:	01065693          	srli	a3,a2,0x10
 800acd0:	47c1                	li	a5,16
 800acd2:	b97d                	j	800a990 <__udivdi3+0x24>
 800acd4:	0108d693          	srli	a3,a7,0x10
 800acd8:	47c1                	li	a5,16
 800acda:	b3b5                	j	800aa46 <__udivdi3+0xda>
 800acdc:	4581                	li	a1,0
 800acde:	4505                	li	a0,1
 800ace0:	8082                	ret
 800ace2:	8736                	mv	a4,a3
 800ace4:	4801                	li	a6,0
 800ace6:	b501                	j	800aae6 <__udivdi3+0x17a>
 800ace8:	8742                	mv	a4,a6
 800acea:	bf85                	j	800ac5a <__udivdi3+0x2ee>
 800acec:	863e                	mv	a2,a5
 800acee:	bde9                	j	800abc8 <__udivdi3+0x25c>
 800acf0:	87ba                	mv	a5,a4
 800acf2:	bf1d                	j	800ac28 <__udivdi3+0x2bc>
 800acf4:	8e32                	mv	t3,a2
 800acf6:	b54d                	j	800ab98 <__udivdi3+0x22c>
 800acf8:	1579                	addi	a0,a0,-2
 800acfa:	9846                	add	a6,a6,a7
 800acfc:	b9d5                	j	800a9f0 <__udivdi3+0x84>
 800acfe:	1579                	addi	a0,a0,-2
 800ad00:	97c6                	add	a5,a5,a7
 800ad02:	bb59                	j	800aa98 <__udivdi3+0x12c>

0800ad04 <__umoddi3>:
 800ad04:	87b6                	mv	a5,a3
 800ad06:	8832                	mv	a6,a2
 800ad08:	832a                	mv	t1,a0
 800ad0a:	872e                	mv	a4,a1
 800ad0c:	8e2e                	mv	t3,a1
 800ad0e:	14069363          	bnez	a3,800ae54 <__umoddi3+0x150>
 800ad12:	0ac5f163          	bgeu	a1,a2,800adb4 <__umoddi3+0xb0>
 800ad16:	6741                	lui	a4,0x10
 800ad18:	1ae67863          	bgeu	a2,a4,800aec8 <__umoddi3+0x1c4>
 800ad1c:	0ff00713          	li	a4,255
 800ad20:	86b2                	mv	a3,a2
 800ad22:	00c77563          	bgeu	a4,a2,800ad2c <__umoddi3+0x28>
 800ad26:	00865693          	srli	a3,a2,0x8
 800ad2a:	47a1                	li	a5,8
 800ad2c:	00003717          	auipc	a4,0x3
 800ad30:	ac070713          	addi	a4,a4,-1344 # 800d7ec <__clz_tab>
 800ad34:	9736                	add	a4,a4,a3
 800ad36:	00074703          	lbu	a4,0(a4)
 800ad3a:	02000893          	li	a7,32
 800ad3e:	97ba                	add	a5,a5,a4
 800ad40:	40f888b3          	sub	a7,a7,a5
 800ad44:	00088c63          	beqz	a7,800ad5c <__umoddi3+0x58>
 800ad48:	011595b3          	sll	a1,a1,a7
 800ad4c:	00f557b3          	srl	a5,a0,a5
 800ad50:	01161833          	sll	a6,a2,a7
 800ad54:	00b7ee33          	or	t3,a5,a1
 800ad58:	01151333          	sll	t1,a0,a7
 800ad5c:	01085613          	srli	a2,a6,0x10
 800ad60:	02ce57b3          	divu	a5,t3,a2
 800ad64:	01081513          	slli	a0,a6,0x10
 800ad68:	8141                	srli	a0,a0,0x10
 800ad6a:	01035693          	srli	a3,t1,0x10
 800ad6e:	02ce7e33          	remu	t3,t3,a2
 800ad72:	02f507b3          	mul	a5,a0,a5
 800ad76:	0e42                	slli	t3,t3,0x10
 800ad78:	00de6733          	or	a4,t3,a3
 800ad7c:	00f77863          	bgeu	a4,a5,800ad8c <__umoddi3+0x88>
 800ad80:	9742                	add	a4,a4,a6
 800ad82:	01076563          	bltu	a4,a6,800ad8c <__umoddi3+0x88>
 800ad86:	00f77363          	bgeu	a4,a5,800ad8c <__umoddi3+0x88>
 800ad8a:	9742                	add	a4,a4,a6
 800ad8c:	8f1d                	sub	a4,a4,a5
 800ad8e:	02c756b3          	divu	a3,a4,a2
 800ad92:	01031793          	slli	a5,t1,0x10
 800ad96:	83c1                	srli	a5,a5,0x10
 800ad98:	02c77733          	remu	a4,a4,a2
 800ad9c:	02d50533          	mul	a0,a0,a3
 800ada0:	0742                	slli	a4,a4,0x10
 800ada2:	8fd9                	or	a5,a5,a4
 800ada4:	08a7ec63          	bltu	a5,a0,800ae3c <__umoddi3+0x138>
 800ada8:	40a78533          	sub	a0,a5,a0
 800adac:	01155533          	srl	a0,a0,a7
 800adb0:	4581                	li	a1,0
 800adb2:	8082                	ret
 800adb4:	e601                	bnez	a2,800adbc <__umoddi3+0xb8>
 800adb6:	4705                	li	a4,1
 800adb8:	02c75833          	divu	a6,a4,a2
 800adbc:	6741                	lui	a4,0x10
 800adbe:	0ee86c63          	bltu	a6,a4,800aeb6 <__umoddi3+0x1b2>
 800adc2:	010007b7          	lui	a5,0x1000
 800adc6:	2af86563          	bltu	a6,a5,800b070 <__umoddi3+0x36c>
 800adca:	01885693          	srli	a3,a6,0x18
 800adce:	47e1                	li	a5,24
 800add0:	00003717          	auipc	a4,0x3
 800add4:	a1c70713          	addi	a4,a4,-1508 # 800d7ec <__clz_tab>
 800add8:	9736                	add	a4,a4,a3
 800adda:	00074703          	lbu	a4,0(a4)
 800adde:	02000893          	li	a7,32
 800ade2:	97ba                	add	a5,a5,a4
 800ade4:	40f888b3          	sub	a7,a7,a5
 800ade8:	1e089a63          	bnez	a7,800afdc <__umoddi3+0x2d8>
 800adec:	01081e13          	slli	t3,a6,0x10
 800adf0:	410585b3          	sub	a1,a1,a6
 800adf4:	01085613          	srli	a2,a6,0x10
 800adf8:	010e5e13          	srli	t3,t3,0x10
 800adfc:	01035713          	srli	a4,t1,0x10
 800ae00:	02c5d6b3          	divu	a3,a1,a2
 800ae04:	02c5f5b3          	remu	a1,a1,a2
 800ae08:	03c686b3          	mul	a3,a3,t3
 800ae0c:	05c2                	slli	a1,a1,0x10
 800ae0e:	8f4d                	or	a4,a4,a1
 800ae10:	00d77763          	bgeu	a4,a3,800ae1e <__umoddi3+0x11a>
 800ae14:	9742                	add	a4,a4,a6
 800ae16:	01076463          	bltu	a4,a6,800ae1e <__umoddi3+0x11a>
 800ae1a:	26d76a63          	bltu	a4,a3,800b08e <__umoddi3+0x38a>
 800ae1e:	8f15                	sub	a4,a4,a3
 800ae20:	02c75533          	divu	a0,a4,a2
 800ae24:	0342                	slli	t1,t1,0x10
 800ae26:	01035313          	srli	t1,t1,0x10
 800ae2a:	02c77733          	remu	a4,a4,a2
 800ae2e:	03c50533          	mul	a0,a0,t3
 800ae32:	0742                	slli	a4,a4,0x10
 800ae34:	006767b3          	or	a5,a4,t1
 800ae38:	00a7f863          	bgeu	a5,a0,800ae48 <__umoddi3+0x144>
 800ae3c:	97c2                	add	a5,a5,a6
 800ae3e:	0107e563          	bltu	a5,a6,800ae48 <__umoddi3+0x144>
 800ae42:	00a7f363          	bgeu	a5,a0,800ae48 <__umoddi3+0x144>
 800ae46:	97c2                	add	a5,a5,a6
 800ae48:	40a78533          	sub	a0,a5,a0
 800ae4c:	01155533          	srl	a0,a0,a7
 800ae50:	4581                	li	a1,0
 800ae52:	8082                	ret
 800ae54:	882a                	mv	a6,a0
 800ae56:	f4d5eee3          	bltu	a1,a3,800adb2 <__umoddi3+0xae>
 800ae5a:	67c1                	lui	a5,0x10
 800ae5c:	04f6e563          	bltu	a3,a5,800aea6 <__umoddi3+0x1a2>
 800ae60:	010007b7          	lui	a5,0x1000
 800ae64:	20f6e263          	bltu	a3,a5,800b068 <__umoddi3+0x364>
 800ae68:	0186d313          	srli	t1,a3,0x18
 800ae6c:	48e1                	li	a7,24
 800ae6e:	00003797          	auipc	a5,0x3
 800ae72:	97e78793          	addi	a5,a5,-1666 # 800d7ec <__clz_tab>
 800ae76:	979a                	add	a5,a5,t1
 800ae78:	0007ce03          	lbu	t3,0(a5)
 800ae7c:	02000313          	li	t1,32
 800ae80:	9e46                	add	t3,t3,a7
 800ae82:	41c30333          	sub	t1,t1,t3
 800ae86:	04031963          	bnez	t1,800aed8 <__umoddi3+0x1d4>
 800ae8a:	00b6e463          	bltu	a3,a1,800ae92 <__umoddi3+0x18e>
 800ae8e:	00c56963          	bltu	a0,a2,800aea0 <__umoddi3+0x19c>
 800ae92:	40c50833          	sub	a6,a0,a2
 800ae96:	8d95                	sub	a1,a1,a3
 800ae98:	01053733          	sltu	a4,a0,a6
 800ae9c:	40e58733          	sub	a4,a1,a4
 800aea0:	8542                	mv	a0,a6
 800aea2:	85ba                	mv	a1,a4
 800aea4:	8082                	ret
 800aea6:	0ff00793          	li	a5,255
 800aeaa:	1cd7fb63          	bgeu	a5,a3,800b080 <__umoddi3+0x37c>
 800aeae:	0086d313          	srli	t1,a3,0x8
 800aeb2:	48a1                	li	a7,8
 800aeb4:	bf6d                	j	800ae6e <__umoddi3+0x16a>
 800aeb6:	0ff00713          	li	a4,255
 800aeba:	86c2                	mv	a3,a6
 800aebc:	f1077ae3          	bgeu	a4,a6,800add0 <__umoddi3+0xcc>
 800aec0:	00885693          	srli	a3,a6,0x8
 800aec4:	47a1                	li	a5,8
 800aec6:	b729                	j	800add0 <__umoddi3+0xcc>
 800aec8:	010007b7          	lui	a5,0x1000
 800aecc:	1af66663          	bltu	a2,a5,800b078 <__umoddi3+0x374>
 800aed0:	01865693          	srli	a3,a2,0x18
 800aed4:	47e1                	li	a5,24
 800aed6:	bd99                	j	800ad2c <__umoddi3+0x28>
 800aed8:	01c657b3          	srl	a5,a2,t3
 800aedc:	006696b3          	sll	a3,a3,t1
 800aee0:	8edd                	or	a3,a3,a5
 800aee2:	01c5d8b3          	srl	a7,a1,t3
 800aee6:	0106d713          	srli	a4,a3,0x10
 800aeea:	02e8deb3          	divu	t4,a7,a4
 800aeee:	01069f13          	slli	t5,a3,0x10
 800aef2:	01c557b3          	srl	a5,a0,t3
 800aef6:	010f5f13          	srli	t5,t5,0x10
 800aefa:	006595b3          	sll	a1,a1,t1
 800aefe:	8ddd                	or	a1,a1,a5
 800af00:	0105d813          	srli	a6,a1,0x10
 800af04:	00661633          	sll	a2,a2,t1
 800af08:	00651533          	sll	a0,a0,t1
 800af0c:	02e8f8b3          	remu	a7,a7,a4
 800af10:	03df07b3          	mul	a5,t5,t4
 800af14:	08c2                	slli	a7,a7,0x10
 800af16:	0108e833          	or	a6,a7,a6
 800af1a:	00f87b63          	bgeu	a6,a5,800af30 <__umoddi3+0x22c>
 800af1e:	9836                	add	a6,a6,a3
 800af20:	fffe8893          	addi	a7,t4,-1
 800af24:	16d86363          	bltu	a6,a3,800b08a <__umoddi3+0x386>
 800af28:	16f87163          	bgeu	a6,a5,800b08a <__umoddi3+0x386>
 800af2c:	1ef9                	addi	t4,t4,-2
 800af2e:	9836                	add	a6,a6,a3
 800af30:	40f80833          	sub	a6,a6,a5
 800af34:	02e857b3          	divu	a5,a6,a4
 800af38:	05c2                	slli	a1,a1,0x10
 800af3a:	81c1                	srli	a1,a1,0x10
 800af3c:	02e87833          	remu	a6,a6,a4
 800af40:	02ff0f33          	mul	t5,t5,a5
 800af44:	01081713          	slli	a4,a6,0x10
 800af48:	8f4d                	or	a4,a4,a1
 800af4a:	01e77b63          	bgeu	a4,t5,800af60 <__umoddi3+0x25c>
 800af4e:	9736                	add	a4,a4,a3
 800af50:	fff78593          	addi	a1,a5,-1 # ffffff <__stack_size+0xfff7ff>
 800af54:	12d76963          	bltu	a4,a3,800b086 <__umoddi3+0x382>
 800af58:	13e77763          	bgeu	a4,t5,800b086 <__umoddi3+0x382>
 800af5c:	17f9                	addi	a5,a5,-2
 800af5e:	9736                	add	a4,a4,a3
 800af60:	0ec2                	slli	t4,t4,0x10
 800af62:	62c1                	lui	t0,0x10
 800af64:	00feeeb3          	or	t4,t4,a5
 800af68:	fff28813          	addi	a6,t0,-1 # ffff <__stack_size+0xf7ff>
 800af6c:	010ef8b3          	and	a7,t4,a6
 800af70:	01065593          	srli	a1,a2,0x10
 800af74:	010ede93          	srli	t4,t4,0x10
 800af78:	01067833          	and	a6,a2,a6
 800af7c:	03088fb3          	mul	t6,a7,a6
 800af80:	41e70733          	sub	a4,a4,t5
 800af84:	030e8833          	mul	a6,t4,a6
 800af88:	010fd793          	srli	a5,t6,0x10
 800af8c:	02b888b3          	mul	a7,a7,a1
 800af90:	98c2                	add	a7,a7,a6
 800af92:	97c6                	add	a5,a5,a7
 800af94:	02be8eb3          	mul	t4,t4,a1
 800af98:	0107f363          	bgeu	a5,a6,800af9e <__umoddi3+0x29a>
 800af9c:	9e96                	add	t4,t4,t0
 800af9e:	6841                	lui	a6,0x10
 800afa0:	187d                	addi	a6,a6,-1
 800afa2:	0107d593          	srli	a1,a5,0x10
 800afa6:	0107f7b3          	and	a5,a5,a6
 800afaa:	07c2                	slli	a5,a5,0x10
 800afac:	010fffb3          	and	t6,t6,a6
 800afb0:	95f6                	add	a1,a1,t4
 800afb2:	97fe                	add	a5,a5,t6
 800afb4:	0ab76263          	bltu	a4,a1,800b058 <__umoddi3+0x354>
 800afb8:	08b70e63          	beq	a4,a1,800b054 <__umoddi3+0x350>
 800afbc:	40f507b3          	sub	a5,a0,a5
 800afc0:	00f53533          	sltu	a0,a0,a5
 800afc4:	40b705b3          	sub	a1,a4,a1
 800afc8:	8d89                	sub	a1,a1,a0
 800afca:	01c59e33          	sll	t3,a1,t3
 800afce:	0067d533          	srl	a0,a5,t1
 800afd2:	00ae6533          	or	a0,t3,a0
 800afd6:	0065d5b3          	srl	a1,a1,t1
 800afda:	8082                	ret
 800afdc:	01181833          	sll	a6,a6,a7
 800afe0:	00f5d733          	srl	a4,a1,a5
 800afe4:	01085613          	srli	a2,a6,0x10
 800afe8:	02c756b3          	divu	a3,a4,a2
 800afec:	01081e13          	slli	t3,a6,0x10
 800aff0:	00f557b3          	srl	a5,a0,a5
 800aff4:	010e5e13          	srli	t3,t3,0x10
 800aff8:	011595b3          	sll	a1,a1,a7
 800affc:	8ddd                	or	a1,a1,a5
 800affe:	0105de93          	srli	t4,a1,0x10
 800b002:	01151333          	sll	t1,a0,a7
 800b006:	02c77733          	remu	a4,a4,a2
 800b00a:	02de07b3          	mul	a5,t3,a3
 800b00e:	01071693          	slli	a3,a4,0x10
 800b012:	01d6e6b3          	or	a3,a3,t4
 800b016:	00f6f863          	bgeu	a3,a5,800b026 <__umoddi3+0x322>
 800b01a:	96c2                	add	a3,a3,a6
 800b01c:	0106e563          	bltu	a3,a6,800b026 <__umoddi3+0x322>
 800b020:	00f6f363          	bgeu	a3,a5,800b026 <__umoddi3+0x322>
 800b024:	96c2                	add	a3,a3,a6
 800b026:	8e9d                	sub	a3,a3,a5
 800b028:	02c6d733          	divu	a4,a3,a2
 800b02c:	01059793          	slli	a5,a1,0x10
 800b030:	83c1                	srli	a5,a5,0x10
 800b032:	02c6f6b3          	remu	a3,a3,a2
 800b036:	02ee0733          	mul	a4,t3,a4
 800b03a:	01069593          	slli	a1,a3,0x10
 800b03e:	8ddd                	or	a1,a1,a5
 800b040:	00e5f863          	bgeu	a1,a4,800b050 <__umoddi3+0x34c>
 800b044:	95c2                	add	a1,a1,a6
 800b046:	0105e563          	bltu	a1,a6,800b050 <__umoddi3+0x34c>
 800b04a:	00e5f363          	bgeu	a1,a4,800b050 <__umoddi3+0x34c>
 800b04e:	95c2                	add	a1,a1,a6
 800b050:	8d99                	sub	a1,a1,a4
 800b052:	b36d                	j	800adfc <__umoddi3+0xf8>
 800b054:	f6f574e3          	bgeu	a0,a5,800afbc <__umoddi3+0x2b8>
 800b058:	40c78633          	sub	a2,a5,a2
 800b05c:	00c7b7b3          	sltu	a5,a5,a2
 800b060:	97b6                	add	a5,a5,a3
 800b062:	8d9d                	sub	a1,a1,a5
 800b064:	87b2                	mv	a5,a2
 800b066:	bf99                	j	800afbc <__umoddi3+0x2b8>
 800b068:	0106d313          	srli	t1,a3,0x10
 800b06c:	48c1                	li	a7,16
 800b06e:	b501                	j	800ae6e <__umoddi3+0x16a>
 800b070:	01085693          	srli	a3,a6,0x10
 800b074:	47c1                	li	a5,16
 800b076:	bba9                	j	800add0 <__umoddi3+0xcc>
 800b078:	01065693          	srli	a3,a2,0x10
 800b07c:	47c1                	li	a5,16
 800b07e:	b17d                	j	800ad2c <__umoddi3+0x28>
 800b080:	8336                	mv	t1,a3
 800b082:	4881                	li	a7,0
 800b084:	b3ed                	j	800ae6e <__umoddi3+0x16a>
 800b086:	87ae                	mv	a5,a1
 800b088:	bde1                	j	800af60 <__umoddi3+0x25c>
 800b08a:	8ec6                	mv	t4,a7
 800b08c:	b555                	j	800af30 <__umoddi3+0x22c>
 800b08e:	9742                	add	a4,a4,a6
 800b090:	b379                	j	800ae1e <__umoddi3+0x11a>

0800b092 <__lesf2>:
 800b092:	01755693          	srli	a3,a0,0x17
 800b096:	008007b7          	lui	a5,0x800
 800b09a:	17fd                	addi	a5,a5,-1
 800b09c:	0175d613          	srli	a2,a1,0x17
 800b0a0:	0ff6f693          	andi	a3,a3,255
 800b0a4:	0ff00813          	li	a6,255
 800b0a8:	00a7f8b3          	and	a7,a5,a0
 800b0ac:	01f55713          	srli	a4,a0,0x1f
 800b0b0:	8fed                	and	a5,a5,a1
 800b0b2:	0ff67613          	andi	a2,a2,255
 800b0b6:	81fd                	srli	a1,a1,0x1f
 800b0b8:	03068763          	beq	a3,a6,800b0e6 <__lesf2+0x54>
 800b0bc:	01060963          	beq	a2,a6,800b0ce <__lesf2+0x3c>
 800b0c0:	ea85                	bnez	a3,800b0f0 <__lesf2+0x5e>
 800b0c2:	ea11                	bnez	a2,800b0d6 <__lesf2+0x44>
 800b0c4:	eb89                	bnez	a5,800b0d6 <__lesf2+0x44>
 800b0c6:	4501                	li	a0,0
 800b0c8:	00089b63          	bnez	a7,800b0de <__lesf2+0x4c>
 800b0cc:	8082                	ret
 800b0ce:	4509                	li	a0,2
 800b0d0:	fff5                	bnez	a5,800b0cc <__lesf2+0x3a>
 800b0d2:	dae5                	beqz	a3,800b0c2 <__lesf2+0x30>
 800b0d4:	a831                	j	800b0f0 <__lesf2+0x5e>
 800b0d6:	02088c63          	beqz	a7,800b10e <__lesf2+0x7c>
 800b0da:	04b70063          	beq	a4,a1,800b11a <__lesf2+0x88>
 800b0de:	4505                	li	a0,1
 800b0e0:	d775                	beqz	a4,800b0cc <__lesf2+0x3a>
 800b0e2:	557d                	li	a0,-1
 800b0e4:	8082                	ret
 800b0e6:	4509                	li	a0,2
 800b0e8:	02089863          	bnez	a7,800b118 <__lesf2+0x86>
 800b0ec:	02d60463          	beq	a2,a3,800b114 <__lesf2+0x82>
 800b0f0:	e211                	bnez	a2,800b0f4 <__lesf2+0x62>
 800b0f2:	d7f5                	beqz	a5,800b0de <__lesf2+0x4c>
 800b0f4:	feb715e3          	bne	a4,a1,800b0de <__lesf2+0x4c>
 800b0f8:	fed643e3          	blt	a2,a3,800b0de <__lesf2+0x4c>
 800b0fc:	00c6c763          	blt	a3,a2,800b10a <__lesf2+0x78>
 800b100:	fd17efe3          	bltu	a5,a7,800b0de <__lesf2+0x4c>
 800b104:	4501                	li	a0,0
 800b106:	fcf8f3e3          	bgeu	a7,a5,800b0cc <__lesf2+0x3a>
 800b10a:	e319                	bnez	a4,800b110 <__lesf2+0x7e>
 800b10c:	bfd9                	j	800b0e2 <__lesf2+0x50>
 800b10e:	d9f1                	beqz	a1,800b0e2 <__lesf2+0x50>
 800b110:	4505                	li	a0,1
 800b112:	8082                	ret
 800b114:	d3e5                	beqz	a5,800b0f4 <__lesf2+0x62>
 800b116:	8082                	ret
 800b118:	8082                	ret
 800b11a:	4681                	li	a3,0
 800b11c:	b7c5                	j	800b0fc <__lesf2+0x6a>

0800b11e <__mulsf3>:
 800b11e:	7179                	addi	sp,sp,-48
 800b120:	d422                	sw	s0,40(sp)
 800b122:	01755413          	srli	s0,a0,0x17
 800b126:	ce4e                	sw	s3,28(sp)
 800b128:	cc52                	sw	s4,24(sp)
 800b12a:	00951993          	slli	s3,a0,0x9
 800b12e:	d606                	sw	ra,44(sp)
 800b130:	d226                	sw	s1,36(sp)
 800b132:	d04a                	sw	s2,32(sp)
 800b134:	ca56                	sw	s5,20(sp)
 800b136:	c85a                	sw	s6,16(sp)
 800b138:	0ff47413          	andi	s0,s0,255
 800b13c:	0099d993          	srli	s3,s3,0x9
 800b140:	01f55a13          	srli	s4,a0,0x1f
 800b144:	c469                	beqz	s0,800b20e <__mulsf3+0xf0>
 800b146:	0ff00793          	li	a5,255
 800b14a:	0ef40863          	beq	s0,a5,800b23a <__mulsf3+0x11c>
 800b14e:	00399793          	slli	a5,s3,0x3
 800b152:	04000737          	lui	a4,0x4000
 800b156:	00e7e9b3          	or	s3,a5,a4
 800b15a:	f8140413          	addi	s0,s0,-127
 800b15e:	4481                	li	s1,0
 800b160:	4b01                	li	s6,0
 800b162:	0175d713          	srli	a4,a1,0x17
 800b166:	00959a93          	slli	s5,a1,0x9
 800b16a:	0ff77713          	andi	a4,a4,255
 800b16e:	009ada93          	srli	s5,s5,0x9
 800b172:	01f5d913          	srli	s2,a1,0x1f
 800b176:	cf45                	beqz	a4,800b22e <__mulsf3+0x110>
 800b178:	0ff00793          	li	a5,255
 800b17c:	02f70c63          	beq	a4,a5,800b1b4 <__mulsf3+0x96>
 800b180:	0a8e                	slli	s5,s5,0x3
 800b182:	f8170713          	addi	a4,a4,-127 # 3ffff81 <__stack_size+0x3fff781>
 800b186:	040007b7          	lui	a5,0x4000
 800b18a:	00faeab3          	or	s5,s5,a5
 800b18e:	943a                	add	s0,s0,a4
 800b190:	4601                	li	a2,0
 800b192:	012a4533          	xor	a0,s4,s2
 800b196:	47bd                	li	a5,15
 800b198:	86aa                	mv	a3,a0
 800b19a:	00140593          	addi	a1,s0,1
 800b19e:	1097e063          	bltu	a5,s1,800b29e <__mulsf3+0x180>
 800b1a2:	00002717          	auipc	a4,0x2
 800b1a6:	60a70713          	addi	a4,a4,1546 # 800d7ac <sysflash_map_dflt+0x48>
 800b1aa:	048a                	slli	s1,s1,0x2
 800b1ac:	94ba                	add	s1,s1,a4
 800b1ae:	409c                	lw	a5,0(s1)
 800b1b0:	97ba                	add	a5,a5,a4
 800b1b2:	8782                	jr	a5
 800b1b4:	0ff40413          	addi	s0,s0,255
 800b1b8:	0c0a9663          	bnez	s5,800b284 <__mulsf3+0x166>
 800b1bc:	0024e493          	ori	s1,s1,2
 800b1c0:	4609                	li	a2,2
 800b1c2:	bfc1                	j	800b192 <__mulsf3+0x74>
 800b1c4:	4501                	li	a0,0
 800b1c6:	0ff00713          	li	a4,255
 800b1ca:	004007b7          	lui	a5,0x400
 800b1ce:	50b2                	lw	ra,44(sp)
 800b1d0:	5422                	lw	s0,40(sp)
 800b1d2:	07a6                	slli	a5,a5,0x9
 800b1d4:	075e                	slli	a4,a4,0x17
 800b1d6:	83a5                	srli	a5,a5,0x9
 800b1d8:	057e                	slli	a0,a0,0x1f
 800b1da:	8fd9                	or	a5,a5,a4
 800b1dc:	5492                	lw	s1,36(sp)
 800b1de:	5902                	lw	s2,32(sp)
 800b1e0:	49f2                	lw	s3,28(sp)
 800b1e2:	4a62                	lw	s4,24(sp)
 800b1e4:	4ad2                	lw	s5,20(sp)
 800b1e6:	4b42                	lw	s6,16(sp)
 800b1e8:	8d5d                	or	a0,a0,a5
 800b1ea:	6145                	addi	sp,sp,48
 800b1ec:	8082                	ret
 800b1ee:	86ca                	mv	a3,s2
 800b1f0:	89d6                	mv	s3,s5
 800b1f2:	8b32                	mv	s6,a2
 800b1f4:	4789                	li	a5,2
 800b1f6:	08fb0f63          	beq	s6,a5,800b294 <__mulsf3+0x176>
 800b1fa:	478d                	li	a5,3
 800b1fc:	fcfb04e3          	beq	s6,a5,800b1c4 <__mulsf3+0xa6>
 800b200:	4785                	li	a5,1
 800b202:	8536                	mv	a0,a3
 800b204:	1afb1063          	bne	s6,a5,800b3a4 <__mulsf3+0x286>
 800b208:	4701                	li	a4,0
 800b20a:	4781                	li	a5,0
 800b20c:	b7c9                	j	800b1ce <__mulsf3+0xb0>
 800b20e:	04099d63          	bnez	s3,800b268 <__mulsf3+0x14a>
 800b212:	0175d713          	srli	a4,a1,0x17
 800b216:	00959a93          	slli	s5,a1,0x9
 800b21a:	0ff77713          	andi	a4,a4,255
 800b21e:	4491                	li	s1,4
 800b220:	4401                	li	s0,0
 800b222:	4b05                	li	s6,1
 800b224:	009ada93          	srli	s5,s5,0x9
 800b228:	01f5d913          	srli	s2,a1,0x1f
 800b22c:	f731                	bnez	a4,800b178 <__mulsf3+0x5a>
 800b22e:	000a9d63          	bnez	s5,800b248 <__mulsf3+0x12a>
 800b232:	0014e493          	ori	s1,s1,1
 800b236:	4605                	li	a2,1
 800b238:	bfa9                	j	800b192 <__mulsf3+0x74>
 800b23a:	02099263          	bnez	s3,800b25e <__mulsf3+0x140>
 800b23e:	44a1                	li	s1,8
 800b240:	0ff00413          	li	s0,255
 800b244:	4b09                	li	s6,2
 800b246:	bf31                	j	800b162 <__mulsf3+0x44>
 800b248:	8556                	mv	a0,s5
 800b24a:	2e05                	jal	800b57a <__clzsi2>
 800b24c:	ffb50793          	addi	a5,a0,-5
 800b250:	8c09                	sub	s0,s0,a0
 800b252:	00fa9ab3          	sll	s5,s5,a5
 800b256:	f8a40413          	addi	s0,s0,-118
 800b25a:	4601                	li	a2,0
 800b25c:	bf1d                	j	800b192 <__mulsf3+0x74>
 800b25e:	44b1                	li	s1,12
 800b260:	0ff00413          	li	s0,255
 800b264:	4b0d                	li	s6,3
 800b266:	bdf5                	j	800b162 <__mulsf3+0x44>
 800b268:	854e                	mv	a0,s3
 800b26a:	c62e                	sw	a1,12(sp)
 800b26c:	2639                	jal	800b57a <__clzsi2>
 800b26e:	ffb50793          	addi	a5,a0,-5
 800b272:	f8a00413          	li	s0,-118
 800b276:	00f999b3          	sll	s3,s3,a5
 800b27a:	8c09                	sub	s0,s0,a0
 800b27c:	4481                	li	s1,0
 800b27e:	4b01                	li	s6,0
 800b280:	45b2                	lw	a1,12(sp)
 800b282:	b5c5                	j	800b162 <__mulsf3+0x44>
 800b284:	0034e493          	ori	s1,s1,3
 800b288:	460d                	li	a2,3
 800b28a:	b721                	j	800b192 <__mulsf3+0x74>
 800b28c:	4789                	li	a5,2
 800b28e:	86d2                	mv	a3,s4
 800b290:	f6fb15e3          	bne	s6,a5,800b1fa <__mulsf3+0xdc>
 800b294:	8536                	mv	a0,a3
 800b296:	0ff00713          	li	a4,255
 800b29a:	4781                	li	a5,0
 800b29c:	bf0d                	j	800b1ce <__mulsf3+0xb0>
 800b29e:	6341                	lui	t1,0x10
 800b2a0:	fff30693          	addi	a3,t1,-1 # ffff <__stack_size+0xf7ff>
 800b2a4:	0109d613          	srli	a2,s3,0x10
 800b2a8:	010ad893          	srli	a7,s5,0x10
 800b2ac:	00d9f7b3          	and	a5,s3,a3
 800b2b0:	00dafab3          	and	s5,s5,a3
 800b2b4:	03578833          	mul	a6,a5,s5
 800b2b8:	02f889b3          	mul	s3,a7,a5
 800b2bc:	01085713          	srli	a4,a6,0x10
 800b2c0:	03560ab3          	mul	s5,a2,s5
 800b2c4:	99d6                	add	s3,s3,s5
 800b2c6:	974e                	add	a4,a4,s3
 800b2c8:	03160633          	mul	a2,a2,a7
 800b2cc:	01577363          	bgeu	a4,s5,800b2d2 <__mulsf3+0x1b4>
 800b2d0:	961a                	add	a2,a2,t1
 800b2d2:	67c1                	lui	a5,0x10
 800b2d4:	17fd                	addi	a5,a5,-1
 800b2d6:	00f776b3          	and	a3,a4,a5
 800b2da:	00f87833          	and	a6,a6,a5
 800b2de:	06c2                	slli	a3,a3,0x10
 800b2e0:	96c2                	add	a3,a3,a6
 800b2e2:	00669993          	slli	s3,a3,0x6
 800b2e6:	01075793          	srli	a5,a4,0x10
 800b2ea:	013039b3          	snez	s3,s3
 800b2ee:	82e9                	srli	a3,a3,0x1a
 800b2f0:	97b2                	add	a5,a5,a2
 800b2f2:	079a                	slli	a5,a5,0x6
 800b2f4:	00d9e6b3          	or	a3,s3,a3
 800b2f8:	00d7e9b3          	or	s3,a5,a3
 800b2fc:	00499793          	slli	a5,s3,0x4
 800b300:	0007d963          	bgez	a5,800b312 <__mulsf3+0x1f4>
 800b304:	0019d713          	srli	a4,s3,0x1
 800b308:	0019f793          	andi	a5,s3,1
 800b30c:	00f769b3          	or	s3,a4,a5
 800b310:	842e                	mv	s0,a1
 800b312:	07f40713          	addi	a4,s0,127
 800b316:	04e05063          	blez	a4,800b356 <__mulsf3+0x238>
 800b31a:	0079f793          	andi	a5,s3,7
 800b31e:	c799                	beqz	a5,800b32c <__mulsf3+0x20e>
 800b320:	00f9f793          	andi	a5,s3,15
 800b324:	4691                	li	a3,4
 800b326:	00d78363          	beq	a5,a3,800b32c <__mulsf3+0x20e>
 800b32a:	0991                	addi	s3,s3,4
 800b32c:	00499793          	slli	a5,s3,0x4
 800b330:	0007d963          	bgez	a5,800b342 <__mulsf3+0x224>
 800b334:	f80007b7          	lui	a5,0xf8000
 800b338:	17fd                	addi	a5,a5,-1
 800b33a:	00f9f9b3          	and	s3,s3,a5
 800b33e:	08040713          	addi	a4,s0,128
 800b342:	0fe00793          	li	a5,254
 800b346:	04e7cb63          	blt	a5,a4,800b39c <__mulsf3+0x27e>
 800b34a:	00699793          	slli	a5,s3,0x6
 800b34e:	83a5                	srli	a5,a5,0x9
 800b350:	0ff77713          	andi	a4,a4,255
 800b354:	bdad                	j	800b1ce <__mulsf3+0xb0>
 800b356:	4785                	li	a5,1
 800b358:	40e786b3          	sub	a3,a5,a4
 800b35c:	c711                	beqz	a4,800b368 <__mulsf3+0x24a>
 800b35e:	466d                	li	a2,27
 800b360:	4701                	li	a4,0
 800b362:	4781                	li	a5,0
 800b364:	e6d645e3          	blt	a2,a3,800b1ce <__mulsf3+0xb0>
 800b368:	09e40713          	addi	a4,s0,158
 800b36c:	00e99733          	sll	a4,s3,a4
 800b370:	00e03733          	snez	a4,a4
 800b374:	00d9d7b3          	srl	a5,s3,a3
 800b378:	8fd9                	or	a5,a5,a4
 800b37a:	0077f713          	andi	a4,a5,7
 800b37e:	c719                	beqz	a4,800b38c <__mulsf3+0x26e>
 800b380:	00f7f713          	andi	a4,a5,15
 800b384:	4691                	li	a3,4
 800b386:	00d70363          	beq	a4,a3,800b38c <__mulsf3+0x26e>
 800b38a:	0791                	addi	a5,a5,4
 800b38c:	00579713          	slli	a4,a5,0x5
 800b390:	00074c63          	bltz	a4,800b3a8 <__mulsf3+0x28a>
 800b394:	079a                	slli	a5,a5,0x6
 800b396:	83a5                	srli	a5,a5,0x9
 800b398:	4701                	li	a4,0
 800b39a:	bd15                	j	800b1ce <__mulsf3+0xb0>
 800b39c:	0ff00713          	li	a4,255
 800b3a0:	4781                	li	a5,0
 800b3a2:	b535                	j	800b1ce <__mulsf3+0xb0>
 800b3a4:	842e                	mv	s0,a1
 800b3a6:	b7b5                	j	800b312 <__mulsf3+0x1f4>
 800b3a8:	4705                	li	a4,1
 800b3aa:	4781                	li	a5,0
 800b3ac:	b50d                	j	800b1ce <__mulsf3+0xb0>

0800b3ae <__fixsfsi>:
 800b3ae:	00800637          	lui	a2,0x800
 800b3b2:	01755713          	srli	a4,a0,0x17
 800b3b6:	fff60793          	addi	a5,a2,-1 # 7fffff <__stack_size+0x7ff7ff>
 800b3ba:	0ff77713          	andi	a4,a4,255
 800b3be:	07e00593          	li	a1,126
 800b3c2:	00a7f6b3          	and	a3,a5,a0
 800b3c6:	01f55793          	srli	a5,a0,0x1f
 800b3ca:	00e5fc63          	bgeu	a1,a4,800b3e2 <__fixsfsi+0x34>
 800b3ce:	09d00593          	li	a1,157
 800b3d2:	00e5fa63          	bgeu	a1,a4,800b3e6 <__fixsfsi+0x38>
 800b3d6:	80000537          	lui	a0,0x80000
 800b3da:	fff54513          	not	a0,a0
 800b3de:	953e                	add	a0,a0,a5
 800b3e0:	8082                	ret
 800b3e2:	4501                	li	a0,0
 800b3e4:	8082                	ret
 800b3e6:	09500593          	li	a1,149
 800b3ea:	8ed1                	or	a3,a3,a2
 800b3ec:	00e5cd63          	blt	a1,a4,800b406 <__fixsfsi+0x58>
 800b3f0:	09600613          	li	a2,150
 800b3f4:	40e60733          	sub	a4,a2,a4
 800b3f8:	00e6d733          	srl	a4,a3,a4
 800b3fc:	40e00533          	neg	a0,a4
 800b400:	f3f5                	bnez	a5,800b3e4 <__fixsfsi+0x36>
 800b402:	853a                	mv	a0,a4
 800b404:	8082                	ret
 800b406:	f6a70713          	addi	a4,a4,-150
 800b40a:	00e69733          	sll	a4,a3,a4
 800b40e:	b7fd                	j	800b3fc <__fixsfsi+0x4e>

0800b410 <__truncdfsf2>:
 800b410:	0145d693          	srli	a3,a1,0x14
 800b414:	00c59793          	slli	a5,a1,0xc
 800b418:	7ff6f693          	andi	a3,a3,2047
 800b41c:	83b1                	srli	a5,a5,0xc
 800b41e:	00168613          	addi	a2,a3,1
 800b422:	078e                	slli	a5,a5,0x3
 800b424:	01d55713          	srli	a4,a0,0x1d
 800b428:	7fe67613          	andi	a2,a2,2046
 800b42c:	81fd                	srli	a1,a1,0x1f
 800b42e:	8f5d                	or	a4,a4,a5
 800b430:	00351893          	slli	a7,a0,0x3
 800b434:	ce35                	beqz	a2,800b4b0 <__truncdfsf2+0xa0>
 800b436:	c8068813          	addi	a6,a3,-896
 800b43a:	0fe00793          	li	a5,254
 800b43e:	0107dd63          	bge	a5,a6,800b458 <__truncdfsf2+0x48>
 800b442:	4781                	li	a5,0
 800b444:	00979513          	slli	a0,a5,0x9
 800b448:	0ff00693          	li	a3,255
 800b44c:	06de                	slli	a3,a3,0x17
 800b44e:	8125                	srli	a0,a0,0x9
 800b450:	05fe                	slli	a1,a1,0x1f
 800b452:	8d55                	or	a0,a0,a3
 800b454:	8d4d                	or	a0,a0,a1
 800b456:	8082                	ret
 800b458:	0b005563          	blez	a6,800b502 <__truncdfsf2+0xf2>
 800b45c:	00651793          	slli	a5,a0,0x6
 800b460:	070e                	slli	a4,a4,0x3
 800b462:	00f037b3          	snez	a5,a5
 800b466:	8fd9                	or	a5,a5,a4
 800b468:	01d8d893          	srli	a7,a7,0x1d
 800b46c:	0117e7b3          	or	a5,a5,a7
 800b470:	0077f713          	andi	a4,a5,7
 800b474:	10070163          	beqz	a4,800b576 <__truncdfsf2+0x166>
 800b478:	00f7f713          	andi	a4,a5,15
 800b47c:	4691                	li	a3,4
 800b47e:	00d70363          	beq	a4,a3,800b484 <__truncdfsf2+0x74>
 800b482:	0791                	addi	a5,a5,4
 800b484:	04000737          	lui	a4,0x4000
 800b488:	8f7d                	and	a4,a4,a5
 800b48a:	c775                	beqz	a4,800b576 <__truncdfsf2+0x166>
 800b48c:	00180713          	addi	a4,a6,1 # 10001 <__stack_size+0xf801>
 800b490:	0ff00613          	li	a2,255
 800b494:	0ff77693          	andi	a3,a4,255
 800b498:	fac705e3          	beq	a4,a2,800b442 <__truncdfsf2+0x32>
 800b49c:	079a                	slli	a5,a5,0x6
 800b49e:	83a5                	srli	a5,a5,0x9
 800b4a0:	00979513          	slli	a0,a5,0x9
 800b4a4:	06de                	slli	a3,a3,0x17
 800b4a6:	8125                	srli	a0,a0,0x9
 800b4a8:	05fe                	slli	a1,a1,0x1f
 800b4aa:	8d55                	or	a0,a0,a3
 800b4ac:	8d4d                	or	a0,a0,a1
 800b4ae:	8082                	ret
 800b4b0:	011767b3          	or	a5,a4,a7
 800b4b4:	ee99                	bnez	a3,800b4d2 <__truncdfsf2+0xc2>
 800b4b6:	cf85                	beqz	a5,800b4ee <__truncdfsf2+0xde>
 800b4b8:	4795                	li	a5,5
 800b4ba:	079a                	slli	a5,a5,0x6
 800b4bc:	83a5                	srli	a5,a5,0x9
 800b4be:	00979513          	slli	a0,a5,0x9
 800b4c2:	0ff6f693          	andi	a3,a3,255
 800b4c6:	06de                	slli	a3,a3,0x17
 800b4c8:	8125                	srli	a0,a0,0x9
 800b4ca:	05fe                	slli	a1,a1,0x1f
 800b4cc:	8d55                	or	a0,a0,a3
 800b4ce:	8d4d                	or	a0,a0,a1
 800b4d0:	8082                	ret
 800b4d2:	dba5                	beqz	a5,800b442 <__truncdfsf2+0x32>
 800b4d4:	004007b7          	lui	a5,0x400
 800b4d8:	00979513          	slli	a0,a5,0x9
 800b4dc:	0ff00693          	li	a3,255
 800b4e0:	06de                	slli	a3,a3,0x17
 800b4e2:	4581                	li	a1,0
 800b4e4:	8125                	srli	a0,a0,0x9
 800b4e6:	05fe                	slli	a1,a1,0x1f
 800b4e8:	8d55                	or	a0,a0,a3
 800b4ea:	8d4d                	or	a0,a0,a1
 800b4ec:	8082                	ret
 800b4ee:	4781                	li	a5,0
 800b4f0:	00979513          	slli	a0,a5,0x9
 800b4f4:	4681                	li	a3,0
 800b4f6:	06de                	slli	a3,a3,0x17
 800b4f8:	8125                	srli	a0,a0,0x9
 800b4fa:	05fe                	slli	a1,a1,0x1f
 800b4fc:	8d55                	or	a0,a0,a3
 800b4fe:	8d4d                	or	a0,a0,a1
 800b500:	8082                	ret
 800b502:	57a5                	li	a5,-23
 800b504:	04f84863          	blt	a6,a5,800b554 <__truncdfsf2+0x144>
 800b508:	47f9                	li	a5,30
 800b50a:	00800637          	lui	a2,0x800
 800b50e:	410787b3          	sub	a5,a5,a6
 800b512:	457d                	li	a0,31
 800b514:	8e59                	or	a2,a2,a4
 800b516:	04f55163          	bge	a0,a5,800b558 <__truncdfsf2+0x148>
 800b51a:	5779                	li	a4,-2
 800b51c:	41070733          	sub	a4,a4,a6
 800b520:	02000513          	li	a0,32
 800b524:	00e65733          	srl	a4,a2,a4
 800b528:	00a78863          	beq	a5,a0,800b538 <__truncdfsf2+0x128>
 800b52c:	ca268693          	addi	a3,a3,-862
 800b530:	00d616b3          	sll	a3,a2,a3
 800b534:	00d8e8b3          	or	a7,a7,a3
 800b538:	011037b3          	snez	a5,a7
 800b53c:	8fd9                	or	a5,a5,a4
 800b53e:	0077f713          	andi	a4,a5,7
 800b542:	4801                	li	a6,0
 800b544:	fb15                	bnez	a4,800b478 <__truncdfsf2+0x68>
 800b546:	00579713          	slli	a4,a5,0x5
 800b54a:	4685                	li	a3,1
 800b54c:	f40748e3          	bltz	a4,800b49c <__truncdfsf2+0x8c>
 800b550:	4681                	li	a3,0
 800b552:	b7a5                	j	800b4ba <__truncdfsf2+0xaa>
 800b554:	4681                	li	a3,0
 800b556:	b78d                	j	800b4b8 <__truncdfsf2+0xa8>
 800b558:	c8268693          	addi	a3,a3,-894
 800b55c:	00d89733          	sll	a4,a7,a3
 800b560:	00e03733          	snez	a4,a4
 800b564:	00d616b3          	sll	a3,a2,a3
 800b568:	00f8d8b3          	srl	a7,a7,a5
 800b56c:	00d767b3          	or	a5,a4,a3
 800b570:	00f8e7b3          	or	a5,a7,a5
 800b574:	b7e9                	j	800b53e <__truncdfsf2+0x12e>
 800b576:	86c2                	mv	a3,a6
 800b578:	b789                	j	800b4ba <__truncdfsf2+0xaa>

0800b57a <__clzsi2>:
 800b57a:	67c1                	lui	a5,0x10
 800b57c:	02f57e63          	bgeu	a0,a5,800b5b8 <__clzsi2+0x3e>
 800b580:	0ff00793          	li	a5,255
 800b584:	02000713          	li	a4,32
 800b588:	00a7ec63          	bltu	a5,a0,800b5a0 <__clzsi2+0x26>
 800b58c:	00002797          	auipc	a5,0x2
 800b590:	26078793          	addi	a5,a5,608 # 800d7ec <__clz_tab>
 800b594:	97aa                	add	a5,a5,a0
 800b596:	0007c503          	lbu	a0,0(a5)
 800b59a:	40a70533          	sub	a0,a4,a0
 800b59e:	8082                	ret
 800b5a0:	8121                	srli	a0,a0,0x8
 800b5a2:	00002797          	auipc	a5,0x2
 800b5a6:	24a78793          	addi	a5,a5,586 # 800d7ec <__clz_tab>
 800b5aa:	97aa                	add	a5,a5,a0
 800b5ac:	0007c503          	lbu	a0,0(a5)
 800b5b0:	4761                	li	a4,24
 800b5b2:	40a70533          	sub	a0,a4,a0
 800b5b6:	8082                	ret
 800b5b8:	010007b7          	lui	a5,0x1000
 800b5bc:	00f56e63          	bltu	a0,a5,800b5d8 <__clzsi2+0x5e>
 800b5c0:	8161                	srli	a0,a0,0x18
 800b5c2:	00002797          	auipc	a5,0x2
 800b5c6:	22a78793          	addi	a5,a5,554 # 800d7ec <__clz_tab>
 800b5ca:	97aa                	add	a5,a5,a0
 800b5cc:	0007c503          	lbu	a0,0(a5)
 800b5d0:	4721                	li	a4,8
 800b5d2:	40a70533          	sub	a0,a4,a0
 800b5d6:	8082                	ret
 800b5d8:	8141                	srli	a0,a0,0x10
 800b5da:	00002797          	auipc	a5,0x2
 800b5de:	21278793          	addi	a5,a5,530 # 800d7ec <__clz_tab>
 800b5e2:	97aa                	add	a5,a5,a0
 800b5e4:	0007c503          	lbu	a0,0(a5)
 800b5e8:	4741                	li	a4,16
 800b5ea:	40a70533          	sub	a0,a4,a0
 800b5ee:	8082                	ret

0800b5f0 <abort>:
 800b5f0:	1141                	addi	sp,sp,-16
 800b5f2:	4519                	li	a0,6
 800b5f4:	c606                	sw	ra,12(sp)
 800b5f6:	2049                	jal	800b678 <raise>
 800b5f8:	4505                	li	a0,1
 800b5fa:	9cafb0ef          	jal	ra,80067c4 <_exit>

0800b5fe <_raise_r>:
 800b5fe:	47fd                	li	a5,31
 800b600:	06b7e863          	bltu	a5,a1,800b670 <_raise_r+0x72>
 800b604:	2dc52783          	lw	a5,732(a0) # 800002dc <_sp+0x5fffb2dc>
 800b608:	1141                	addi	sp,sp,-16
 800b60a:	c422                	sw	s0,8(sp)
 800b60c:	c226                	sw	s1,4(sp)
 800b60e:	c606                	sw	ra,12(sp)
 800b610:	84aa                	mv	s1,a0
 800b612:	842e                	mv	s0,a1
 800b614:	c795                	beqz	a5,800b640 <_raise_r+0x42>
 800b616:	00259713          	slli	a4,a1,0x2
 800b61a:	97ba                	add	a5,a5,a4
 800b61c:	4398                	lw	a4,0(a5)
 800b61e:	c30d                	beqz	a4,800b640 <_raise_r+0x42>
 800b620:	4685                	li	a3,1
 800b622:	04d70163          	beq	a4,a3,800b664 <_raise_r+0x66>
 800b626:	56fd                	li	a3,-1
 800b628:	02d70663          	beq	a4,a3,800b654 <_raise_r+0x56>
 800b62c:	852e                	mv	a0,a1
 800b62e:	0007a023          	sw	zero,0(a5)
 800b632:	9702                	jalr	a4
 800b634:	40b2                	lw	ra,12(sp)
 800b636:	4422                	lw	s0,8(sp)
 800b638:	4492                	lw	s1,4(sp)
 800b63a:	4501                	li	a0,0
 800b63c:	0141                	addi	sp,sp,16
 800b63e:	8082                	ret
 800b640:	8526                	mv	a0,s1
 800b642:	28bd                	jal	800b6c0 <_getpid_r>
 800b644:	8622                	mv	a2,s0
 800b646:	4422                	lw	s0,8(sp)
 800b648:	40b2                	lw	ra,12(sp)
 800b64a:	85aa                	mv	a1,a0
 800b64c:	8526                	mv	a0,s1
 800b64e:	4492                	lw	s1,4(sp)
 800b650:	0141                	addi	sp,sp,16
 800b652:	a80d                	j	800b684 <_kill_r>
 800b654:	40b2                	lw	ra,12(sp)
 800b656:	4422                	lw	s0,8(sp)
 800b658:	47d9                	li	a5,22
 800b65a:	c11c                	sw	a5,0(a0)
 800b65c:	4492                	lw	s1,4(sp)
 800b65e:	4505                	li	a0,1
 800b660:	0141                	addi	sp,sp,16
 800b662:	8082                	ret
 800b664:	40b2                	lw	ra,12(sp)
 800b666:	4422                	lw	s0,8(sp)
 800b668:	4492                	lw	s1,4(sp)
 800b66a:	4501                	li	a0,0
 800b66c:	0141                	addi	sp,sp,16
 800b66e:	8082                	ret
 800b670:	47d9                	li	a5,22
 800b672:	c11c                	sw	a5,0(a0)
 800b674:	557d                	li	a0,-1
 800b676:	8082                	ret

0800b678 <raise>:
 800b678:	83818793          	addi	a5,gp,-1992 # 20000558 <_impure_ptr>
 800b67c:	85aa                	mv	a1,a0
 800b67e:	4388                	lw	a0,0(a5)
 800b680:	f7fff06f          	j	800b5fe <_raise_r>

0800b684 <_kill_r>:
 800b684:	87ae                	mv	a5,a1
 800b686:	1141                	addi	sp,sp,-16
 800b688:	c422                	sw	s0,8(sp)
 800b68a:	85b2                	mv	a1,a2
 800b68c:	842a                	mv	s0,a0
 800b68e:	853e                	mv	a0,a5
 800b690:	c606                	sw	ra,12(sp)
 800b692:	17ff7797          	auipc	a5,0x17ff7
 800b696:	6807ab23          	sw	zero,1686(a5) # 20002d28 <errno>
 800b69a:	2825                	jal	800b6d2 <_kill>
 800b69c:	57fd                	li	a5,-1
 800b69e:	00f50663          	beq	a0,a5,800b6aa <_kill_r+0x26>
 800b6a2:	40b2                	lw	ra,12(sp)
 800b6a4:	4422                	lw	s0,8(sp)
 800b6a6:	0141                	addi	sp,sp,16
 800b6a8:	8082                	ret
 800b6aa:	17ff7797          	auipc	a5,0x17ff7
 800b6ae:	67e78793          	addi	a5,a5,1662 # 20002d28 <errno>
 800b6b2:	439c                	lw	a5,0(a5)
 800b6b4:	d7fd                	beqz	a5,800b6a2 <_kill_r+0x1e>
 800b6b6:	c01c                	sw	a5,0(s0)
 800b6b8:	40b2                	lw	ra,12(sp)
 800b6ba:	4422                	lw	s0,8(sp)
 800b6bc:	0141                	addi	sp,sp,16
 800b6be:	8082                	ret

0800b6c0 <_getpid_r>:
 800b6c0:	a009                	j	800b6c2 <_getpid>

0800b6c2 <_getpid>:
 800b6c2:	05800793          	li	a5,88
 800b6c6:	17ff7717          	auipc	a4,0x17ff7
 800b6ca:	66f72123          	sw	a5,1634(a4) # 20002d28 <errno>
 800b6ce:	557d                	li	a0,-1
 800b6d0:	8082                	ret

0800b6d2 <_kill>:
 800b6d2:	05800793          	li	a5,88
 800b6d6:	17ff7717          	auipc	a4,0x17ff7
 800b6da:	64f72923          	sw	a5,1618(a4) # 20002d28 <errno>
 800b6de:	557d                	li	a0,-1
 800b6e0:	8082                	ret
   text	   data	    bss	    dec	    hex	filename
  51410	   1372	  12268	  65050	   fe1a	/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/bin/targets/gd32vf103c-start_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
