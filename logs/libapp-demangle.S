In archive target/thumbv7m-none-eabi/release/libapp.rlib:

app-65c720a40574e4de.app.o6vxcoia-cgu.0.rcgu.o:     file format elf32-littlearm

SYMBOL TABLE:
00000000 l    df *ABS*	00000000 app.o6vxcoia-cgu.0
0000221e l       .debug_str	00000000 
00002b08 l       .debug_str	00000000 
00002b32 l       .debug_str	00000000 
00002b3b l       .debug_str	00000000 
00002bab l       .debug_str	00000000 
00002bfe l       .debug_str	00000000 
00002c4d l       .debug_str	00000000 
00002c8d l       .debug_str	00000000 
00002cb4 l       .debug_str	00000000 
00002cb6 l       .debug_str	00000000 
00002cb8 l       .debug_str	00000000 
00002cc2 l       .debug_str	00000000 
00002ccb l       .debug_str	00000000 
00002cd4 l       .debug_str	00000000 
00002cdf l       .debug_str	00000000 
00002ce9 l       .debug_str	00000000 
00002d10 l       .debug_str	00000000 
00002d28 l       .debug_str	00000000 
00002d32 l       .debug_str	00000000 
00002d55 l       .debug_str	00000000 
00002d9d l       .debug_str	00000000 
00002ddd l       .debug_str	00000000 
00002e24 l       .debug_str	00000000 
00002e2d l       .debug_str	00000000 
00002e31 l       .debug_str	00000000 
00002e5b l       .debug_str	00000000 
00002e60 l       .debug_str	00000000 
00002e63 l       .debug_str	00000000 
00002ead l       .debug_str	00000000 
00002eb6 l       .debug_str	00000000 
00002ee9 l       .debug_str	00000000 
00002f14 l       .debug_str	00000000 
00002f16 l       .debug_str	00000000 
00002f52 l       .debug_str	00000000 
00002f65 l       .debug_str	00000000 
00002f6a l       .debug_str	00000000 
00002f7c l       .debug_str	00000000 
00002f82 l       .debug_str	00000000 
00002f88 l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f90 l       .debug_str	00000000 
00002f95 l       .debug_str	00000000 
00002fa2 l       .debug_str	00000000 
00002fa7 l       .debug_str	00000000 
00002faf l       .debug_str	00000000 
00002fb3 l       .debug_str	00000000 
00002fb8 l       .debug_str	00000000 
00002fc0 l       .debug_str	00000000 
00002fd6 l       .debug_str	00000000 
00002ff4 l       .debug_str	00000000 
00002ffd l       .debug_str	00000000 
00003002 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000300b l       .debug_str	00000000 
00003014 l       .debug_str	00000000 
0000301e l       .debug_str	00000000 
00003036 l       .debug_str	00000000 
00000000 l       .debug_str	00000000 
00000041 l       .debug_str	00000000 
00000055 l       .debug_str	00000000 
00000085 l       .debug_str	00000000 
00000089 l       .debug_str	00000000 
00000094 l       .debug_str	00000000 
000000a2 l       .debug_str	00000000 
000000a9 l       .debug_str	00000000 
000000b1 l       .debug_str	00000000 
000000ba l       .debug_str	00000000 
000000bd l       .debug_str	00000000 
000000c7 l       .debug_str	00000000 
000000ce l       .debug_str	00000000 
000000d4 l       .debug_str	00000000 
000000da l       .debug_str	00000000 
000000df l       .debug_str	00000000 
00000116 l       .debug_str	00000000 
0000011b l       .debug_str	00000000 
00000122 l       .debug_str	00000000 
00000125 l       .debug_str	00000000 
00000129 l       .debug_str	00000000 
00000130 l       .debug_str	00000000 
00000134 l       .debug_str	00000000 
00000137 l       .debug_str	00000000 
0000013a l       .debug_str	00000000 
0000013f l       .debug_str	00000000 
00000145 l       .debug_str	00000000 
0000014c l       .debug_str	00000000 
00000154 l       .debug_str	00000000 
0000015e l       .debug_str	00000000 
00000162 l       .debug_str	00000000 
0000016a l       .debug_str	00000000 
00000175 l       .debug_str	00000000 
00000180 l       .debug_str	00000000 
0000018d l       .debug_str	00000000 
00000198 l       .debug_str	00000000 
000001a0 l       .debug_str	00000000 
000001ab l       .debug_str	00000000 
000001b6 l       .debug_str	00000000 
000001c0 l       .debug_str	00000000 
000001cb l       .debug_str	00000000 
000001d6 l       .debug_str	00000000 
000001e3 l       .debug_str	00000000 
000001ef l       .debug_str	00000000 
000001fc l       .debug_str	00000000 
0000020a l       .debug_str	00000000 
00000214 l       .debug_str	00000000 
00000221 l       .debug_str	00000000 
0000022d l       .debug_str	00000000 
00000231 l       .debug_str	00000000 
0000023c l       .debug_str	00000000 
00000247 l       .debug_str	00000000 
0000024e l       .debug_str	00000000 
00000257 l       .debug_str	00000000 
0000025e l       .debug_str	00000000 
00000263 l       .debug_str	00000000 
0000026f l       .debug_str	00000000 
00000277 l       .debug_str	00000000 
0000027e l       .debug_str	00000000 
00000282 l       .debug_str	00000000 
00000287 l       .debug_str	00000000 
00000290 l       .debug_str	00000000 
00000295 l       .debug_str	00000000 
00000298 l       .debug_str	00000000 
0000029c l       .debug_str	00000000 
000002a5 l       .debug_str	00000000 
000002ac l       .debug_str	00000000 
000002b1 l       .debug_str	00000000 
000002b6 l       .debug_str	00000000 
000002bc l       .debug_str	00000000 
000002c2 l       .debug_str	00000000 
000002cc l       .debug_str	00000000 
000002cf l       .debug_str	00000000 
000002d5 l       .debug_str	00000000 
000002df l       .debug_str	00000000 
000002e7 l       .debug_str	00000000 
000002ed l       .debug_str	00000000 
000002f3 l       .debug_str	00000000 
000002fe l       .debug_str	00000000 
00000307 l       .debug_str	00000000 
0000032a l       .debug_str	00000000 
00000349 l       .debug_str	00000000 
0000034b l       .debug_str	00000000 
00000350 l       .debug_str	00000000 
00000377 l       .debug_str	00000000 
0000037c l       .debug_str	00000000 
00000382 l       .debug_str	00000000 
00000388 l       .debug_str	00000000 
0000038b l       .debug_str	00000000 
0000039a l       .debug_str	00000000 
000003a1 l       .debug_str	00000000 
000003a5 l       .debug_str	00000000 
000003ae l       .debug_str	00000000 
000003b6 l       .debug_str	00000000 
000003be l       .debug_str	00000000 
000003c5 l       .debug_str	00000000 
000003d9 l       .debug_str	00000000 
000003e5 l       .debug_str	00000000 
000003f1 l       .debug_str	00000000 
0000040a l       .debug_str	00000000 
0000040f l       .debug_str	00000000 
00000420 l       .debug_str	00000000 
0000042a l       .debug_str	00000000 
00000438 l       .debug_str	00000000 
0000043c l       .debug_str	00000000 
00000447 l       .debug_str	00000000 
0000044e l       .debug_str	00000000 
00000454 l       .debug_str	00000000 
00000458 l       .debug_str	00000000 
0000045c l       .debug_str	00000000 
00000464 l       .debug_str	00000000 
0000047b l       .debug_str	00000000 
0000049f l       .debug_str	00000000 
000004bb l       .debug_str	00000000 
000004c5 l       .debug_str	00000000 
000004df l       .debug_str	00000000 
0000053d l       .debug_str	00000000 
00000548 l       .debug_str	00000000 
00000565 l       .debug_str	00000000 
0000057e l       .debug_str	00000000 
00000588 l       .debug_str	00000000 
000005ba l       .debug_str	00000000 
000005c1 l       .debug_str	00000000 
000005ca l       .debug_str	00000000 
000005fe l       .debug_str	00000000 
0000060c l       .debug_str	00000000 
00000610 l       .debug_str	00000000 
00000614 l       .debug_str	00000000 
0000064d l       .debug_str	00000000 
0000065d l       .debug_str	00000000 
00000661 l       .debug_str	00000000 
00000665 l       .debug_str	00000000 
0000066a l       .debug_str	00000000 
00000670 l       .debug_str	00000000 
00000674 l       .debug_str	00000000 
00000684 l       .debug_str	00000000 
00000690 l       .debug_str	00000000 
0000069c l       .debug_str	00000000 
000006b3 l       .debug_str	00000000 
000006bf l       .debug_str	00000000 
000006c3 l       .debug_str	00000000 
000006d0 l       .debug_str	00000000 
000006dc l       .debug_str	00000000 
000006ea l       .debug_str	00000000 
00000701 l       .debug_str	00000000 
00000716 l       .debug_str	00000000 
00000719 l       .debug_str	00000000 
00000739 l       .debug_str	00000000 
00000742 l       .debug_str	00000000 
00000745 l       .debug_str	00000000 
0000074c l       .debug_str	00000000 
00000755 l       .debug_str	00000000 
0000075e l       .debug_str	00000000 
0000076a l       .debug_str	00000000 
00000772 l       .debug_str	00000000 
0000077a l       .debug_str	00000000 
00000780 l       .debug_str	00000000 
000007a3 l       .debug_str	00000000 
000007b4 l       .debug_str	00000000 
000007c0 l       .debug_str	00000000 
000007fb l       .debug_str	00000000 
0000080c l       .debug_str	00000000 
0000080e l       .debug_str	00000000 
00000836 l       .debug_str	00000000 
00000852 l       .debug_str	00000000 
00000857 l       .debug_str	00000000 
00000865 l       .debug_str	00000000 
00000877 l       .debug_str	00000000 
0000088b l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00000898 l       .debug_str	00000000 
0000089c l       .debug_str	00000000 
0000090c l       .debug_str	00000000 
0000093a l       .debug_str	00000000 
00000964 l       .debug_str	00000000 
00000969 l       .debug_str	00000000 
000009a8 l       .debug_str	00000000 
000009be l       .debug_str	00000000 
000009c4 l       .debug_str	00000000 
000009cb l       .debug_str	00000000 
000009ce l       .debug_str	00000000 
000009da l       .debug_str	00000000 
000009e2 l       .debug_str	00000000 
00000a3c l       .debug_str	00000000 
00000a9e l       .debug_str	00000000 
00000aa9 l       .debug_str	00000000 
00000af0 l       .debug_str	00000000 
00000b3f l       .debug_str	00000000 
00000b49 l       .debug_str	00000000 
00000b86 l       .debug_str	00000000 
00000bcb l       .debug_str	00000000 
00000bd4 l       .debug_str	00000000 
00000be4 l       .debug_str	00000000 
00000bec l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000c9e l       .debug_str	00000000 
00000caa l       .debug_str	00000000 
00000cb3 l       .debug_str	00000000 
00000cbf l       .debug_str	00000000 
00000ccb l       .debug_str	00000000 
00000cd4 l       .debug_str	00000000 
00000cdc l       .debug_str	00000000 
00000ce4 l       .debug_str	00000000 
00000cee l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000d0a l       .debug_str	00000000 
00000d2a l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d39 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d4e l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d62 l       .debug_str	00000000 
00000d6e l       .debug_str	00000000 
00000d72 l       .debug_str	00000000 
00000d7b l       .debug_str	00000000 
00000d82 l       .debug_str	00000000 
00000d8a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000d9c l       .debug_str	00000000 
00000da2 l       .debug_str	00000000 
00000da9 l       .debug_str	00000000 
00000db0 l       .debug_str	00000000 
00000ddd l       .debug_str	00000000 
00000e12 l       .debug_str	00000000 
00000e18 l       .debug_str	00000000 
00000e1e l       .debug_str	00000000 
00000e2d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000e4d l       .debug_str	00000000 
00000e55 l       .debug_str	00000000 
00000e7e l       .debug_str	00000000 
00000edc l       .debug_str	00000000 
00000f42 l       .debug_str	00000000 
00000f49 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f5a l       .debug_str	00000000 
00000f78 l       .debug_str	00000000 
00000f88 l       .debug_str	00000000 
00000f96 l       .debug_str	00000000 
00000fa1 l       .debug_str	00000000 
00000fae l       .debug_str	00000000 
00000fbd l       .debug_str	00000000 
00000fd3 l       .debug_str	00000000 
00000fdd l       .debug_str	00000000 
00000fe6 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00001015 l       .debug_str	00000000 
0000102b l       .debug_str	00000000 
00001036 l       .debug_str	00000000 
0000104c l       .debug_str	00000000 
00001054 l       .debug_str	00000000 
00001075 l       .debug_str	00000000 
0000108c l       .debug_str	00000000 
00001091 l       .debug_str	00000000 
00001099 l       .debug_str	00000000 
000010a2 l       .debug_str	00000000 
000010ab l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010bc l       .debug_str	00000000 
000010c3 l       .debug_str	00000000 
000010cf l       .debug_str	00000000 
000010da l       .debug_str	00000000 
000010e2 l       .debug_str	00000000 
000010ea l       .debug_str	00000000 
00001166 l       .debug_str	00000000 
000011ea l       .debug_str	00000000 
000012e6 l       .debug_str	00000000 
000013ea l       .debug_str	00000000 
000013f8 l       .debug_str	00000000 
00001403 l       .debug_str	00000000 
0000140d l       .debug_str	00000000 
00001418 l       .debug_str	00000000 
00001446 l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
00001544 l       .debug_str	00000000 
00001552 l       .debug_str	00000000 
000015b1 l       .debug_str	00000000 
00001618 l       .debug_str	00000000 
0000162e l       .debug_str	00000000 
0000163e l       .debug_str	00000000 
0000164d l       .debug_str	00000000 
00001651 l       .debug_str	00000000 
00001657 l       .debug_str	00000000 
0000165d l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
00001673 l       .debug_str	00000000 
000016a6 l       .debug_str	00000000 
000016e6 l       .debug_str	00000000 
0000172e l       .debug_str	00000000 
00001732 l       .debug_str	00000000 
00001738 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
00001744 l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000178b l       .debug_str	00000000 
000017cd l       .debug_str	00000000 
00001817 l       .debug_str	00000000 
0000181b l       .debug_str	00000000 
00001821 l       .debug_str	00000000 
00001827 l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000183f l       .debug_str	00000000 
00001874 l       .debug_str	00000000 
000018b6 l       .debug_str	00000000 
00001900 l       .debug_str	00000000 
00001904 l       .debug_str	00000000 
0000190a l       .debug_str	00000000 
00001910 l       .debug_str	00000000 
00001916 l       .debug_str	00000000 
0000191c l       .debug_str	00000000 
0000192d l       .debug_str	00000000 
00001961 l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019eb l       .debug_str	00000000 
000019f0 l       .debug_str	00000000 
000019f5 l       .debug_str	00000000 
000019f9 l       .debug_str	00000000 
000019ff l       .debug_str	00000000 
00001a05 l       .debug_str	00000000 
00001a0b l       .debug_str	00000000 
00001a1c l       .debug_str	00000000 
00001a50 l       .debug_str	00000000 
00001a91 l       .debug_str	00000000 
00001ada l       .debug_str	00000000 
00001ade l       .debug_str	00000000 
00001b12 l       .debug_str	00000000 
00001b53 l       .debug_str	00000000 
00001b9c l       .debug_str	00000000 
00001ba1 l       .debug_str	00000000 
00001ba5 l       .debug_str	00000000 
00001bae l       .debug_str	00000000 
00001bb5 l       .debug_str	00000000 
00001bbd l       .debug_str	00000000 
00001bcf l       .debug_str	00000000 
00001c04 l       .debug_str	00000000 
00001c46 l       .debug_str	00000000 
00001c90 l       .debug_str	00000000 
00001c94 l       .debug_str	00000000 
00001c9a l       .debug_str	00000000 
00001ca0 l       .debug_str	00000000 
00001ca6 l       .debug_str	00000000 
00001cac l       .debug_str	00000000 
00001cb4 l       .debug_str	00000000 
00001cc2 l       .debug_str	00000000 
00001cd1 l       .debug_str	00000000 
00001ce2 l       .debug_str	00000000 
00001ced l       .debug_str	00000000 
00001cf8 l       .debug_str	00000000 
00001d03 l       .debug_str	00000000 
00001d0a l       .debug_str	00000000 
00001d2d l       .debug_str	00000000 
00001d3f l       .debug_str	00000000 
00001d74 l       .debug_str	00000000 
00001db6 l       .debug_str	00000000 
00001e00 l       .debug_str	00000000 
00001e04 l       .debug_str	00000000 
00001e0e l       .debug_str	00000000 
00001e20 l       .debug_str	00000000 
00001e55 l       .debug_str	00000000 
00001e97 l       .debug_str	00000000 
00001ee1 l       .debug_str	00000000 
00001ee6 l       .debug_str	00000000 
00001ef0 l       .debug_str	00000000 
00001f02 l       .debug_str	00000000 
00001f37 l       .debug_str	00000000 
00001f79 l       .debug_str	00000000 
00001fc3 l       .debug_str	00000000 
00001fd7 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00001ff5 l       .debug_str	00000000 
00001ffe l       .debug_str	00000000 
00002009 l       .debug_str	00000000 
00002018 l       .debug_str	00000000 
0000202d l       .debug_str	00000000 
0000205e l       .debug_str	00000000 
000020fb l       .debug_str	00000000 
000021a0 l       .debug_str	00000000 
000021ab l       .debug_str	00000000 
000021b4 l       .debug_str	00000000 
000021d5 l       .debug_str	00000000 
000021e8 l       .debug_str	00000000 
000022a1 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002348 l       .debug_str	00000000 
00002394 l       .debug_str	00000000 
000023e8 l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
00002419 l       .debug_str	00000000 
00002465 l       .debug_str	00000000 
000024b9 l       .debug_str	00000000 
000024cf l       .debug_str	00000000 
000024e3 l       .debug_str	00000000 
0000252a l       .debug_str	00000000 
00002579 l       .debug_str	00000000 
00002582 l       .debug_str	00000000 
00002590 l       .debug_str	00000000 
000025c1 l       .debug_str	00000000 
000025c7 l       .debug_str	00000000 
000025cf l       .debug_str	00000000 
000025d6 l       .debug_str	00000000 
000025de l       .debug_str	00000000 
000025e9 l       .debug_str	00000000 
000025f1 l       .debug_str	00000000 
00002600 l       .debug_str	00000000 
00002604 l       .debug_str	00000000 
0000260f l       .debug_str	00000000 
0000261b l       .debug_str	00000000 
00002626 l       .debug_str	00000000 
00002637 l       .debug_str	00000000 
0000263d l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
0000264c l       .debug_str	00000000 
00002656 l       .debug_str	00000000 
0000265e l       .debug_str	00000000 
00002666 l       .debug_str	00000000 
00002688 l       .debug_str	00000000 
00002693 l       .debug_str	00000000 
0000269f l       .debug_str	00000000 
000026a7 l       .debug_str	00000000 
000026b0 l       .debug_str	00000000 
000026bb l       .debug_str	00000000 
000026c2 l       .debug_str	00000000 
000026cd l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
000026e8 l       .debug_str	00000000 
000026f2 l       .debug_str	00000000 
000026f8 l       .debug_str	00000000 
0000271a l       .debug_str	00000000 
00002752 l       .debug_str	00000000 
00002792 l       .debug_str	00000000 
00002799 l       .debug_str	00000000 
000027a1 l       .debug_str	00000000 
000027b8 l       .debug_str	00000000 
000027c1 l       .debug_str	00000000 
000027d1 l       .debug_str	00000000 
000027e0 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
000027ef l       .debug_str	00000000 
000027f7 l       .debug_str	00000000 
00002815 l       .debug_str	00000000 
00002825 l       .debug_str	00000000 
00002858 l       .debug_str	00000000 
0000286d l       .debug_str	00000000 
00002876 l       .debug_str	00000000 
000028d3 l       .debug_str	00000000 
00002938 l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002952 l       .debug_str	00000000 
00002967 l       .debug_str	00000000 
0000296f l       .debug_str	00000000 
000029d3 l       .debug_str	00000000 
00002a3f l       .debug_str	00000000 
00002a46 l       .debug_str	00000000 
00002a4e l       .debug_str	00000000 
00002a6c l       .debug_str	00000000 
00002a7c l       .debug_str	00000000 
00002aaf l       .debug_str	00000000 
00002ac4 l       .debug_str	00000000 
00002ad7 l       .debug_str	00000000 
00002aec l       .debug_str	00000000 
00002af3 l       .debug_str	00000000 
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.10	00000018 .Lanon.3ed011473997af99b525cde47c9eaaac.10
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.11	00000018 .Lanon.3ed011473997af99b525cde47c9eaaac.11
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.13	00000018 .Lanon.3ed011473997af99b525cde47c9eaaac.13
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.14	00000016 .Lanon.3ed011473997af99b525cde47c9eaaac.14
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.16	00000018 .Lanon.3ed011473997af99b525cde47c9eaaac.16
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.17	00000018 .Lanon.3ed011473997af99b525cde47c9eaaac.17
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.18	00000019 .Lanon.3ed011473997af99b525cde47c9eaaac.18
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.19	00000001 .Lanon.3ed011473997af99b525cde47c9eaaac.19
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.2	00000010 .Lanon.3ed011473997af99b525cde47c9eaaac.2
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.20	00000016 .Lanon.3ed011473997af99b525cde47c9eaaac.20
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.21	00000001 .Lanon.3ed011473997af99b525cde47c9eaaac.21
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.22	00000007 .Lanon.3ed011473997af99b525cde47c9eaaac.22
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.23	0000000d .Lanon.3ed011473997af99b525cde47c9eaaac.23
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.24	00000003 .Lanon.3ed011473997af99b525cde47c9eaaac.24
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.25	00000005 .Lanon.3ed011473997af99b525cde47c9eaaac.25
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.26	0000004b .Lanon.3ed011473997af99b525cde47c9eaaac.26
00000000 l     O .rodata.cst8	00000008 .Lanon.3ed011473997af99b525cde47c9eaaac.27
00000008 l     O .rodata.cst8	00000008 .Lanon.3ed011473997af99b525cde47c9eaaac.28
00000010 l     O .rodata.cst8	00000008 .Lanon.3ed011473997af99b525cde47c9eaaac.29
00000018 l     O .rodata.cst8	00000008 .Lanon.3ed011473997af99b525cde47c9eaaac.30
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.31	00000012 .Lanon.3ed011473997af99b525cde47c9eaaac.31
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.32	00000009 .Lanon.3ed011473997af99b525cde47c9eaaac.32
00000020 l     O .rodata.cst8	00000008 .Lanon.3ed011473997af99b525cde47c9eaaac.33
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.34	00000001 .Lanon.3ed011473997af99b525cde47c9eaaac.34
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.4	00000010 .Lanon.3ed011473997af99b525cde47c9eaaac.4
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.6	0000000f .Lanon.3ed011473997af99b525cde47c9eaaac.6
00000000 l     O .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.9	00000018 .Lanon.3ed011473997af99b525cde47c9eaaac.9
00000000 l     O .rodata._ZN3app10app_sensor13SENSOR_DEVICE17hf13677561c0ef3d6E	00000008 app::app_sensor::SENSOR_DEVICE
00000000 l     F .text._ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E	0000027a app::app_sensor::handle_sensor_data
00000000 l     F .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h422d517eccc73a15E	0000000c <&T as core::fmt::Display>::fmt
00000000 l     F .text._ZN4core6result13unwrap_failed17h4b64b7a78ab076d1E	00000050 core::result::unwrap_failed
00000000 l    d  .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h422d517eccc73a15E	00000000 .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h422d517eccc73a15E
00000000 l    d  .text._ZN4core6result13unwrap_failed17h4b64b7a78ab076d1E	00000000 .text._ZN4core6result13unwrap_failed17h4b64b7a78ab076d1E
00000000 l    d  .text._ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E	00000000 .text._ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E
00000000 l    d  .text.main	00000000 .text.main
00000000 l    d  .text.rust_begin_unwind	00000000 .text.rust_begin_unwind
00000000 l    d  .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.0	00000000 .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.0
00000000 l    d  .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.1	00000000 .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.1
00000000 l    d  .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.3	00000000 .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.3
00000000 l    d  .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.5	00000000 .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.5
00000000 l    d  .rodata._ZN3app10app_sensor13SENSOR_DEVICE17hf13677561c0ef3d6E	00000000 .rodata._ZN3app10app_sensor13SENSOR_DEVICE17hf13677561c0ef3d6E
00000000 l    d  .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.7	00000000 .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.7
00000000 l    d  .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.8	00000000 .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.8
00000000 l    d  .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.12	00000000 .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.12
00000000 l    d  .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.15	00000000 .rodata..Lanon.3ed011473997af99b525cde47c9eaaac.15
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line	00000000 .debug_line
00000000         *UND*	00000000 <str as core::fmt::Display>::fmt
00000000         *UND*	00000000 core::panic::Location::file
00000000         *UND*	00000000 core::panic::Location::line
00000000         *UND*	00000000 core::panic::PanicInfo::location
00000000         *UND*	00000000 core::panicking::panic
00000000         *UND*	00000000 core::panicking::panic_fmt
00000000         *UND*	00000000 <mynewt::result::MynewtError as core::fmt::Debug>::fmt
00000000         *UND*	00000000 mynewt::hw::sensor::as_untyped
00000000         *UND*	00000000 mynewt::hw::sensor::register_listener
00000000         *UND*	00000000 mynewt::hw::sensor::bindings::set_poll_rate_ms
00000000         *UND*	00000000 mynewt::hw::sensor::bindings::mgr_find_next_bydevname
00000000         *UND*	00000000 mynewt::Strn::new
00000000         *UND*	00000000 mynewt::libs::sensor_network::do_server_post
00000000         *UND*	00000000 mynewt::libs::sensor_network::init_server_post
00000000         *UND*	00000000 mynewt::libs::sensor_network::start_server_transport
00000000         *UND*	00000000 mynewt::kernel::os::eventq_run
00000000         *UND*	00000000 mynewt::kernel::os::eventq_dflt_get
00000000         *UND*	00000000 mynewt::encoding::coap_context::CoapContext::key_to_cstr
00000000         *UND*	00000000 mynewt::encoding::coap_context::CoapContext::to_void_ptr
00000000         *UND*	00000000 mynewt::encoding::coap_context::CoapContext::value_to_cstr
00000000         *UND*	00000000 mynewt::encoding::coap_context::CoapContext::fail
00000000         *UND*	00000000 mynewt::encoding::coap_context::COAP_CONTEXT
00000000         *UND*	00000000 <str as mynewt::encoding::coap_context::ToBytesOptionalNull>::to_bytes_optional_nul
00000000         *UND*	00000000 __bkpt
00000000         *UND*	00000000 console_buffer
00000000         *UND*	00000000 console_flush
00000000         *UND*	00000000 console_printhex
00000000         *UND*	00000000 get_temp_data
00000000         *UND*	00000000 get_temp_raw_data
00000000         *UND*	00000000 is_null_sensor
00000000         *UND*	00000000 is_null_sensor_data
00000000         *UND*	00000000 json_helper_close_array
00000000         *UND*	00000000 json_helper_object_array_end_item
00000000         *UND*	00000000 json_helper_object_array_start_item
00000000         *UND*	00000000 json_helper_set_array
00000000         *UND*	00000000 json_helper_set_int
00000000         *UND*	00000000 json_helper_set_text_string
00000000         *UND*	00000000 json_rep_end_root_object
00000000         *UND*	00000000 json_rep_start_root_object
00000000 g     F .text.main	000000f0 main
00000000         *UND*	00000000 null_sensor
00000000 g     F .text.rust_begin_unwind	00000072 rust_begin_unwind
00000000         *UND*	00000000 rust_sysinit



Disassembly of section .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h422d517eccc73a15E:

00000000 <<&T as core::fmt::Display>::fmt>:
_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h422d517eccc73a15E():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/fmt/mod.rs:1914
   0:	460a      	mov	r2, r1
   2:	e9d0 3100 	ldrd	r3, r1, [r0]
   6:	4618      	mov	r0, r3
   8:	f7ff bffe 	b.w	0 <<str as core::fmt::Display>::fmt>

Disassembly of section .text._ZN4core6result13unwrap_failed17h4b64b7a78ab076d1E:

00000000 <core::result::unwrap_failed>:
_ZN4core6result13unwrap_failed17h4b64b7a78ab076d1E():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/result.rs:998
   0:	b08e      	sub	sp, #56	; 0x38
   2:	2208      	movs	r2, #8
   4:	e9cd 0201 	strd	r0, r2, [sp, #4]
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/result.rs:999
   8:	f240 0000 	movw	r0, #0
   c:	f2c0 0000 	movt	r0, #0
  10:	9103      	str	r1, [sp, #12]
  12:	900d      	str	r0, [sp, #52]	; 0x34
  14:	a803      	add	r0, sp, #12
  16:	900c      	str	r0, [sp, #48]	; 0x30
  18:	f240 0000 	movw	r0, #0
  1c:	f2c0 0000 	movt	r0, #0
  20:	a90a      	add	r1, sp, #40	; 0x28
  22:	900b      	str	r0, [sp, #44]	; 0x2c
  24:	a801      	add	r0, sp, #4
  26:	900a      	str	r0, [sp, #40]	; 0x28
  28:	2002      	movs	r0, #2
_ZN4core3fmt9Arguments6new_v117ha99294a9defa432aE():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/fmt/mod.rs:316
  2a:	9009      	str	r0, [sp, #36]	; 0x24
  2c:	9108      	str	r1, [sp, #32]
  2e:	2100      	movs	r1, #0
  30:	9107      	str	r1, [sp, #28]
  32:	e9cd 0105 	strd	r0, r1, [sp, #20]
  36:	f240 0000 	movw	r0, #0
  3a:	f2c0 0000 	movt	r0, #0
_ZN4core6result13unwrap_failed17h4b64b7a78ab076d1E():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/macros.rs:18
  3e:	f240 0100 	movw	r1, #0
_ZN4core3fmt9Arguments6new_v117ha99294a9defa432aE():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/fmt/mod.rs:316
  42:	9004      	str	r0, [sp, #16]
  44:	a804      	add	r0, sp, #16
_ZN4core6result13unwrap_failed17h4b64b7a78ab076d1E():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/macros.rs:18
  46:	f2c0 0100 	movt	r1, #0
  4a:	f7ff fffe 	bl	0 <core::panicking::panic_fmt>
  4e:	defe      	udf	#254	; 0xfe

Disassembly of section .text._ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E:

00000000 <app::app_sensor::handle_sensor_data>:
_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:74
    Ok(())
}

///  This listener function is called every 10 seconds by Mynewt to handle the polled sensor data.
///  Return 0 if we have handled the sensor data successfully.
extern fn handle_sensor_data(sensor: sensor_ptr, _arg: sensor_arg, 
   0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4:	b085      	sub	sp, #20
   6:	4605      	mov	r5, r0
_ZN3app8app_base13console_print17h1db64f4bd159062eE():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:18
///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
pub fn console_print(msg: &[u8]) {
    let len = msg.len();
    unsafe {
        //  Call the Semihosting Console API, which is unsafe.
        console_buffer(msg.as_ptr(), len as u32);
   8:	f240 0000 	movw	r0, #0
   c:	f2c0 0000 	movt	r0, #0
  10:	2118      	movs	r1, #24
  12:	4614      	mov	r4, r2
  14:	f7ff fffe 	bl	0 <console_buffer>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:19
        console_flush();  //  TODO: Remove this.
  18:	f7ff fffe 	bl	0 <console_flush>
_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:79
    sensor_data: sensor_data_ptr, sensor_type: sensor_type_t) -> MynewtError {
    console_print(b"Rust handle_sensor_data\n");
    //  Check that the temperature data is valid.
    //  TODO
    if unsafe { is_null_sensor_data(sensor_data) } { return MynewtError::SYS_EINVAL; }  //  Exit if data is missing
  1c:	4620      	mov	r0, r4
  1e:	f7ff fffe 	bl	0 <is_null_sensor_data>
  22:	b120      	cbz	r0, 2e <app::app_sensor::handle_sensor_data+0x2e>
  24:	f06f 0001 	mvn.w	r0, #1
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:102
            return MynewtError::SYS_EOK; 
        }            
    }
    //  Return 0 to Mynewt to indicate no error.  Should not end with a semicolon (;).
    MynewtError::SYS_EOK
}
  28:	b005      	add	sp, #20
  2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:80
    assert!(unsafe { !is_null_sensor(sensor) });
  2e:	4628      	mov	r0, r5
  30:	f7ff fffe 	bl	0 <is_null_sensor>
  34:	2800      	cmp	r0, #0
  36:	f040 8104 	bne.w	242 <app::app_sensor::handle_sensor_data+0x242>
  3a:	e9dd 100e 	ldrd	r1, r0, [sp, #56]	; 0x38
_ZN3app10app_sensor15get_temperature17h6296b9e58d842b05E():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:112
#[allow(unreachable_patterns)]
#[allow(unused_variables)]
fn get_temperature(sensor_data: sensor_data_ptr, sensor_type: sensor_type_t) -> SensorValue {
    let mut return_value = SensorValue::default();
    match sensor_type {                           //  Is this raw or computed temperature?
        SENSOR_TYPE_AMBIENT_TEMPERATURE_RAW => {  //  If this is raw temperature...
  3e:	f081 6180 	eor.w	r1, r1, #67108864	; 0x4000000
  42:	4308      	orrs	r0, r1
  44:	d11c      	bne.n	80 <app::app_sensor::handle_sensor_data+0x80>
  46:	2000      	movs	r0, #0
  48:	a902      	add	r1, sp, #8
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:114
            //  Interpret the sensor data as a sensor_temp_raw_data struct that contains raw temp.
            let mut rawtempdata = fill_zero!(sensor_temp_raw_data);
  4a:	f88d 000c 	strb.w	r0, [sp, #12]
  4e:	9002      	str	r0, [sp, #8]
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:115
            let rc = unsafe { get_temp_raw_data(sensor_data, &mut rawtempdata) };
  50:	4620      	mov	r0, r4
  52:	f7ff fffe 	bl	0 <get_temp_raw_data>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:116
            assert!(rc == 0);
  56:	2800      	cmp	r0, #0
  58:	f040 8101 	bne.w	25e <app::app_sensor::handle_sensor_data+0x25e>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:119

            //  Check that the raw temperature data is valid.
            if rawtempdata.strd_temp_raw_is_valid == 0 { return return_value; }  //  Exit if data is not valid
  5c:	f89d 000c 	ldrb.w	r0, [sp, #12]
  60:	2800      	cmp	r0, #0
  62:	f000 80f5 	beq.w	250 <app::app_sensor::handle_sensor_data+0x250>
_ZN3app8app_base13console_print17h1db64f4bd159062eE():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:18
        console_buffer(msg.as_ptr(), len as u32);
  66:	f240 0000 	movw	r0, #0
  6a:	2119      	movs	r1, #25
  6c:	f2c0 0000 	movt	r0, #0
_ZN3app10app_sensor15get_temperature17h6296b9e58d842b05E():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:122

            //  Raw temperature data is valid.  Copy and display it.
            return_value.val = SensorValueType::Uint(rawtempdata.strd_temp_raw);  //  Raw Temperature in integer (0 to 4095)
  70:	f8dd a008 	ldr.w	sl, [sp, #8]
_ZN3app8app_base13console_print17h1db64f4bd159062eE():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:18
  74:	f7ff fffe 	bl	0 <console_buffer>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:19
        console_flush();  //  TODO: Remove this.
  78:	f7ff fffe 	bl	0 <console_flush>
  7c:	2401      	movs	r4, #1
  7e:	e012      	b.n	a6 <app::app_sensor::handle_sensor_data+0xa6>
_ZN3app10app_sensor15get_temperature17h6296b9e58d842b05E():
  80:	2000      	movs	r0, #0
  82:	a902      	add	r1, sp, #8
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:127
            console_print(b"TMP listener got rawtmp \n");  // return_value->int_val);
        },
        SENSOR_TYPE_AMBIENT_TEMPERATURE => {      //  If this is computed temperature...
            //  Interpret the sensor data as a sensor_temp_data struct that contains computed temp.
            let mut tempdata = fill_zero!(sensor_temp_data);
  84:	f88d 000c 	strb.w	r0, [sp, #12]
  88:	9002      	str	r0, [sp, #8]
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:128
            let rc = unsafe { get_temp_data(sensor_data, &mut tempdata) };
  8a:	4620      	mov	r0, r4
  8c:	f7ff fffe 	bl	0 <get_temp_data>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:129
            assert!(rc == 0);
  90:	2800      	cmp	r0, #0
  92:	f040 80eb 	bne.w	26c <app::app_sensor::handle_sensor_data+0x26c>
  96:	f89d 000c 	ldrb.w	r0, [sp, #12]
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:132

            //  Check that the computed temperature data is valid.
            if tempdata.std_temp_is_valid() == 0 { return return_value; }  //  Exit if data is not valid
  9a:	07c0      	lsls	r0, r0, #31
  9c:	f000 80d8 	beq.w	250 <app::app_sensor::handle_sensor_data+0x250>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:135

            //  Computed temperature data is valid.  Copy and display it.
            return_value.val = SensorValueType::Float(tempdata.std_temp);  //  Temperature in floating point.
  a0:	f8dd a008 	ldr.w	sl, [sp, #8]
  a4:	2402      	movs	r4, #2
_ZN3app8app_base13console_print17h1db64f4bd159062eE():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:18
        console_buffer(msg.as_ptr(), len as u32);
  a6:	f240 0000 	movw	r0, #0
  aa:	2116      	movs	r1, #22
  ac:	f2c0 0000 	movt	r0, #0
  b0:	f7ff fffe 	bl	0 <console_buffer>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:19
        console_flush();  //  TODO: Remove this.
  b4:	f7ff fffe 	bl	0 <console_flush>
_ZN3app11app_network16send_sensor_data17h66b8c89222084710E():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_network.rs:76
    if let SensorValueType::None = val.val { assert!(false); }

    //  Start composing the CoAP Server message with the sensor data in the payload.  This will 
    //  block other tasks from composing and posting CoAP messages (through a semaphore).
    //  We only have 1 memory buffer for composing CoAP messages so it needs to be locked.
    let rc = sensor_network::init_server_post(strn!("")) ? ;
  b8:	f240 0000 	movw	r0, #0
  bc:	2101      	movs	r1, #1
  be:	f2c0 0000 	movt	r0, #0
  c2:	f7ff fffe 	bl	0 <mynewt::Strn::new>
  c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  ca:	a902      	add	r1, sp, #8
  cc:	4668      	mov	r0, sp
  ce:	f7ff fffe 	bl	0 <mynewt::libs::sensor_network::init_server_post>
_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hfc45991b9511dbacE():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/result.rs:1283
  d2:	9800      	ldr	r0, [sp, #0]
  d4:	b2c1      	uxtb	r1, r0
_ZN3app11app_network16send_sensor_data17h66b8c89222084710E():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_network.rs:76
  d6:	2901      	cmp	r1, #1
  d8:	d107      	bne.n	ea <app::app_sensor::handle_sensor_data+0xea>
  da:	9801      	ldr	r0, [sp, #4]
_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:94
    if let Err(err) = rc {  //  `if let` will assign `err` to the error code inside `rc`
  dc:	3006      	adds	r0, #6
  de:	f000 809d 	beq.w	21c <app::app_sensor::handle_sensor_data+0x21c>
  e2:	2000      	movs	r0, #0
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:102
}
  e4:	b005      	add	sp, #20
  e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_ZN3app11app_network16send_sensor_data17h66b8c89222084710E():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_network.rs:77
    if !rc { return Err(MynewtError::SYS_EAGAIN); }  //  If network transport not ready, tell caller (Sensor Listener) to try again later.
  ea:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
  ee:	f000 8095 	beq.w	21c <app::app_sensor::handle_sensor_data+0x21c>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_network.rs:80

    //  Compose the CoAP Payload in JSON using the coap!() macro.
    let _payload = coap!(@json {
  f2:	f7ff fffe 	bl	0 <json_rep_start_root_object>
  f6:	f240 0500 	movw	r5, #0
  fa:	f2c0 0500 	movt	r5, #0
  fe:	4628      	mov	r0, r5
 100:	f7ff fffe 	bl	0 <mynewt::encoding::coap_context::CoapContext::to_void_ptr>
 104:	f240 0100 	movw	r1, #0
 108:	4606      	mov	r6, r0
 10a:	f2c0 0100 	movt	r1, #0
 10e:	4628      	mov	r0, r5
 110:	2207      	movs	r2, #7
 112:	f7ff fffe 	bl	0 <mynewt::encoding::coap_context::CoapContext::key_to_cstr>
 116:	4601      	mov	r1, r0
 118:	4630      	mov	r0, r6
 11a:	f7ff fffe 	bl	0 <json_helper_set_array>
 11e:	2c01      	cmp	r4, #1
 120:	d154      	bne.n	1cc <app::app_sensor::handle_sensor_data+0x1cc>
 122:	f240 0900 	movw	r9, #0
 126:	f240 0800 	movw	r8, #0
 12a:	f2c0 0900 	movt	r9, #0
 12e:	f2c0 0800 	movt	r8, #0
 132:	4648      	mov	r0, r9
 134:	4641      	mov	r1, r8
 136:	220d      	movs	r2, #13
 138:	f7ff fffe 	bl	0 <mynewt::encoding::coap_context::CoapContext::key_to_cstr>
 13c:	f7ff fffe 	bl	0 <json_helper_object_array_start_item>
 140:	f240 0000 	movw	r0, #0
 144:	2103      	movs	r1, #3
 146:	f2c0 0000 	movt	r0, #0
 14a:	f7ff fffe 	bl	0 <<str as mynewt::encoding::coap_context::ToBytesOptionalNull>::to_bytes_optional_nul>
 14e:	4607      	mov	r7, r0
 150:	f240 0000 	movw	r0, #0
 154:	468b      	mov	fp, r1
 156:	f2c0 0000 	movt	r0, #0
 15a:	2101      	movs	r1, #1
 15c:	f7ff fffe 	bl	0 <<str as mynewt::encoding::coap_context::ToBytesOptionalNull>::to_bytes_optional_nul>
 160:	4605      	mov	r5, r0
 162:	4648      	mov	r0, r9
 164:	460c      	mov	r4, r1
 166:	f7ff fffe 	bl	0 <mynewt::encoding::coap_context::CoapContext::to_void_ptr>
 16a:	4606      	mov	r6, r0
 16c:	4648      	mov	r0, r9
 16e:	4639      	mov	r1, r7
 170:	465a      	mov	r2, fp
 172:	f7ff fffe 	bl	0 <mynewt::encoding::coap_context::CoapContext::key_to_cstr>
 176:	4607      	mov	r7, r0
 178:	4648      	mov	r0, r9
 17a:	4629      	mov	r1, r5
 17c:	4622      	mov	r2, r4
 17e:	f7ff fffe 	bl	0 <mynewt::encoding::coap_context::CoapContext::value_to_cstr>
 182:	4602      	mov	r2, r0
 184:	4630      	mov	r0, r6
 186:	4639      	mov	r1, r7
 188:	f7ff fffe 	bl	0 <json_helper_set_text_string>
 18c:	f240 0000 	movw	r0, #0
 190:	2105      	movs	r1, #5
 192:	f2c0 0000 	movt	r0, #0
 196:	f7ff fffe 	bl	0 <<str as mynewt::encoding::coap_context::ToBytesOptionalNull>::to_bytes_optional_nul>
 19a:	4604      	mov	r4, r0
 19c:	4648      	mov	r0, r9
 19e:	460d      	mov	r5, r1
 1a0:	f7ff fffe 	bl	0 <mynewt::encoding::coap_context::CoapContext::to_void_ptr>
 1a4:	4606      	mov	r6, r0
 1a6:	4648      	mov	r0, r9
 1a8:	4621      	mov	r1, r4
 1aa:	462a      	mov	r2, r5
 1ac:	f7ff fffe 	bl	0 <mynewt::encoding::coap_context::CoapContext::key_to_cstr>
 1b0:	4601      	mov	r1, r0
 1b2:	4630      	mov	r0, r6
 1b4:	4652      	mov	r2, sl
 1b6:	2300      	movs	r3, #0
 1b8:	f7ff fffe 	bl	0 <json_helper_set_int>
 1bc:	4648      	mov	r0, r9
 1be:	4641      	mov	r1, r8
 1c0:	220d      	movs	r2, #13
 1c2:	f7ff fffe 	bl	0 <mynewt::encoding::coap_context::CoapContext::key_to_cstr>
 1c6:	f7ff fffe 	bl	0 <json_helper_object_array_end_item>
 1ca:	e006      	b.n	10 <mynewt::encoding::coap_context::COAP_CONTEXT+0x10>
 1cc:	f240 0000 	movw	r0, #0
 1d0:	2101      	movs	r1, #1
 1d2:	f2c0 0000 	movt	r0, #0
 1d6:	f7ff fffe 	bl	0 <mynewt::encoding::coap_context::CoapContext::fail>
 1da:	f240 0400 	movw	r4, #0
 1de:	f2c0 0400 	movt	r4, #0
 1e2:	4620      	mov	r0, r4
 1e4:	f7ff fffe 	bl	0 <mynewt::encoding::coap_context::CoapContext::to_void_ptr>
 1e8:	f240 0100 	movw	r1, #0
 1ec:	4605      	mov	r5, r0
 1ee:	f2c0 0100 	movt	r1, #0
 1f2:	4620      	mov	r0, r4
 1f4:	2207      	movs	r2, #7
 1f6:	f7ff fffe 	bl	0 <mynewt::encoding::coap_context::CoapContext::key_to_cstr>
 1fa:	4601      	mov	r1, r0
 1fc:	4628      	mov	r0, r5
 1fe:	f7ff fffe 	bl	0 <json_helper_close_array>
 202:	f7ff fffe 	bl	0 <json_rep_end_root_object>
 206:	a802      	add	r0, sp, #8
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_network.rs:94
    });

    //  Post the CoAP Server message to the CoAP Background Task for transmission.  After posting the
    //  message to the background task, we release a semaphore that unblocks other requests
    //  to compose and post CoAP messages.
    sensor_network::do_server_post() ? ;
 208:	f7ff fffe 	bl	0 <mynewt::libs::sensor_network::do_server_post>
_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hfc45991b9511dbacE():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/result.rs:1283
 20c:	f89d 0008 	ldrb.w	r0, [sp, #8]
_ZN3app11app_network16send_sensor_data17h66b8c89222084710E():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_network.rs:94
 210:	2801      	cmp	r0, #1
 212:	d109      	bne.n	228 <app::app_sensor::handle_sensor_data+0x228>
_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E():
 214:	9803      	ldr	r0, [sp, #12]
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:94
    if let Err(err) = rc {  //  `if let` will assign `err` to the error code inside `rc`
 216:	3006      	adds	r0, #6
 218:	f47f af63 	bne.w	e2 <app::app_sensor::handle_sensor_data+0xe2>
_ZN3app8app_base13console_print17h1db64f4bd159062eE():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:18
        console_buffer(msg.as_ptr(), len as u32);
 21c:	f240 0000 	movw	r0, #0
 220:	2116      	movs	r1, #22
 222:	f2c0 0000 	movt	r0, #0
 226:	e004      	b.n	c <app::app_sensor::handle_sensor_data+0xc>
 228:	f240 0000 	movw	r0, #0
 22c:	214b      	movs	r1, #75	; 0x4b
 22e:	f2c0 0000 	movt	r0, #0
_ZN3app10app_sensor18handle_sensor_data17hce4161ccff29c081E():
 232:	f7ff fffe 	bl	0 <console_buffer>
 236:	f7ff fffe 	bl	0 <console_flush>
 23a:	2000      	movs	r0, #0
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:102
}
 23c:	b005      	add	sp, #20
 23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:80
    assert!(unsafe { !is_null_sensor(sensor) });
 242:	f240 0000 	movw	r0, #0
 246:	f2c0 0000 	movt	r0, #0
 24a:	f7ff fffe 	bl	0 <core::panicking::panic>
 24e:	defe      	udf	#254	; 0xfe
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:84
    if let SensorValueType::None = sensor_value.val { assert!(false); }  //  Invalid type
 250:	f240 0000 	movw	r0, #0
 254:	f2c0 0000 	movt	r0, #0
 258:	f7ff fffe 	bl	0 <core::panicking::panic>
 25c:	defe      	udf	#254	; 0xfe
_ZN3app10app_sensor15get_temperature17h6296b9e58d842b05E():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:116
            assert!(rc == 0);
 25e:	f240 0000 	movw	r0, #0
 262:	f2c0 0000 	movt	r0, #0
 266:	f7ff fffe 	bl	0 <core::panicking::panic>
 26a:	defe      	udf	#254	; 0xfe
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:129
            assert!(rc == 0);
 26c:	f240 0000 	movw	r0, #0
 270:	f2c0 0000 	movt	r0, #0
 274:	f7ff fffe 	bl	0 <core::panicking::panic>
 278:	defe      	udf	#254	; 0xfe

Disassembly of section .text.main:

00000000 <main>:
main():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/lib.rs:50
use crate::app_base::*;             //  Import `app_base.rs` for common declarations

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                     //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
   0:	b086      	sub	sp, #24
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/lib.rs:56
    //  Initialise the Mynewt packages and BME280 / temp_stm32 temperature sensor driver.
    //  Start the CoAP / OIC Background Task to transmit CoAP messages.  Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/bluepill_my_sensor/generated/src/bluepill_my_sensor-sysinit-app.c
    unsafe { app_base::rust_sysinit(); console_flush() };
   2:	f7ff fffe 	bl	0 <rust_sysinit>
   6:	f7ff fffe 	bl	0 <console_flush>
_ZN3app8app_base13console_print17h1db64f4bd159062eE():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:18
   a:	f240 0000 	movw	r0, #0
   e:	210f      	movs	r1, #15
  10:	f2c0 0000 	movt	r0, #0
  14:	f7ff fffe 	bl	0 <console_buffer>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:19
        console_flush();  //  TODO: Remove this.
  18:	f7ff fffe 	bl	0 <console_flush>
_ZN3app10app_sensor21start_sensor_listener17h6305ebcaba950138E():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:52
    sensor::set_poll_rate_ms(&SENSOR_DEVICE, SENSOR_POLL_TIME) ? ;
  1c:	f240 0000 	movw	r0, #0
  20:	f242 7110 	movw	r1, #10000	; 0x2710
  24:	f2c0 0000 	movt	r0, #0
  28:	f7ff fffe 	bl	0 <mynewt::hw::sensor::bindings::set_poll_rate_ms>
  2c:	2801      	cmp	r0, #1
  2e:	d147      	bne.n	c0 <main+0xc0>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:55
    let sensor = sensor::mgr_find_next_bydevname(&SENSOR_DEVICE, unsafe { null_sensor() }) ? ;
  30:	f7ff fffe 	bl	0 <null_sensor>
  34:	f240 0100 	movw	r1, #0
  38:	4602      	mov	r2, r0
  3a:	4668      	mov	r0, sp
  3c:	f2c0 0100 	movt	r1, #0
  40:	f7ff fffe 	bl	0 <mynewt::hw::sensor::bindings::mgr_find_next_bydevname>
_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h43143ffffefcd0f1E():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/result.rs:1283
  44:	e9dd 0400 	ldrd	r0, r4, [sp]
_ZN3app10app_sensor21start_sensor_listener17h6305ebcaba950138E():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:55
  48:	2801      	cmp	r0, #1
  4a:	d017      	beq.n	7c <main+0x7c>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:56
    assert!(unsafe{ !is_null_sensor(sensor) });
  4c:	4620      	mov	r0, r4
  4e:	f7ff fffe 	bl	0 <is_null_sensor>
  52:	2800      	cmp	r0, #0
  54:	d145      	bne.n	e2 <main+0xe2>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:61
        sl_func       : sensor::as_untyped(handle_sensor_data),  //  Listener function
  56:	f240 0000 	movw	r0, #0
  5a:	f2c0 0000 	movt	r0, #0
  5e:	f7ff fffe 	bl	0 <mynewt::hw::sensor::as_untyped>
  62:	2100      	movs	r1, #0
  64:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:66
    sensor::register_listener(sensor, listener)?;  //  `?` means in case of error, return error now.
  68:	9101      	str	r1, [sp, #4]
  6a:	9200      	str	r2, [sp, #0]
  6c:	9104      	str	r1, [sp, #16]
  6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  72:	4669      	mov	r1, sp
  74:	4620      	mov	r0, r4
  76:	f7ff fffe 	bl	0 <mynewt::hw::sensor::register_listener>
  7a:	4604      	mov	r4, r0
_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1415bf1e9cd2cea1E():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/result.rs:826
  7c:	2c01      	cmp	r4, #1
  7e:	d120      	bne.n	c2 <main+0xc2>
main():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/lib.rs:63
    //  Starting polling the temperature sensor every 10 seconds in the background.
    app_sensor::start_sensor_listener()
        .expect("TMP fail");

    //  Start the Server Transport for sending sensor data to CoAP Server over NB-IoT.
    sensor_network::start_server_transport()
  80:	f7ff fffe 	bl	0 <mynewt::libs::sensor_network::start_server_transport>
_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1415bf1e9cd2cea1E():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/result.rs:826
  84:	2801      	cmp	r0, #1
  86:	d124      	bne.n	d2 <main+0xd2>
main():
  88:	466c      	mov	r4, sp
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/lib.rs:69
        .expect("NET fail");

    //  Main event loop
    loop {                            //  Loop forever...
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
  8a:	4620      	mov	r0, r4
  8c:	f7ff fffe 	bl	0 <mynewt::kernel::os::eventq_dflt_get>
_ZN4core6result19Result$LT$T$C$E$GT$6expect17h7103b9525d683fe6E():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/result.rs:826
  90:	9800      	ldr	r0, [sp, #0]
  92:	2801      	cmp	r0, #1
  94:	d00c      	beq.n	b0 <main+0xb0>
  96:	9801      	ldr	r0, [sp, #4]
main():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/lib.rs:68
        os::eventq_run(               //  Processing events...
  98:	f7ff fffe 	bl	0 <mynewt::kernel::os::eventq_run>
_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1415bf1e9cd2cea1E():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/result.rs:826
  9c:	2801      	cmp	r0, #1
  9e:	d0f4      	beq.n	8a <main+0x8a>
main():
  a0:	4601      	mov	r1, r0
_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1415bf1e9cd2cea1E():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/result.rs:827
  a2:	f240 0000 	movw	r0, #0
  a6:	f2c0 0000 	movt	r0, #0
  aa:	f7ff fffe 	bl	0 <main>
  ae:	defe      	udf	#254	; 0xfe
_ZN4core6result19Result$LT$T$C$E$GT$6expect17h7103b9525d683fe6E():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/result.rs:827
  b0:	9901      	ldr	r1, [sp, #4]
  b2:	f240 0000 	movw	r0, #0
  b6:	f2c0 0000 	movt	r0, #0
  ba:	f7ff fffe 	bl	0 <main>
  be:	defe      	udf	#254	; 0xfe
main():
  c0:	4604      	mov	r4, r0
_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1415bf1e9cd2cea1E():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/result.rs:827
  c2:	f240 0000 	movw	r0, #0
  c6:	4621      	mov	r1, r4
  c8:	f2c0 0000 	movt	r0, #0
  cc:	f7ff fffe 	bl	0 <main>
  d0:	defe      	udf	#254	; 0xfe
main():
  d2:	4601      	mov	r1, r0
_ZN4core6result19Result$LT$T$C$E$GT$6expect17h1415bf1e9cd2cea1E():
/rustc/50a0defd5a93523067ef239936cc2e0755220904/src/libcore/result.rs:827
  d4:	f240 0000 	movw	r0, #0
  d8:	f2c0 0000 	movt	r0, #0
  dc:	f7ff fffe 	bl	0 <main>
  e0:	defe      	udf	#254	; 0xfe
_ZN3app10app_sensor21start_sensor_listener17h6305ebcaba950138E():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_sensor.rs:56
    assert!(unsafe{ !is_null_sensor(sensor) });
  e2:	f240 0000 	movw	r0, #0
  e6:	f2c0 0000 	movt	r0, #0
  ea:	f7ff fffe 	bl	0 <core::panicking::panic>
  ee:	defe      	udf	#254	; 0xfe

Disassembly of section .text.rust_begin_unwind:

00000000 <rust_begin_unwind>:
rust_begin_unwind():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/lib.rs:80

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    //  Display the filename and line number to the Semihosting Console.
    if let Some(location) = info.location() {
   0:	f7ff fffe 	bl	0 <core::panic::PanicInfo::location>
   4:	b338      	cbz	r0, 56 <rust_begin_unwind+0x56>
   6:	4604      	mov	r4, r0
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/lib.rs:81
        let file = location.file();
   8:	f7ff fffe 	bl	0 <core::panic::Location::file>
   c:	4605      	mov	r5, r0
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/lib.rs:82
        let line = location.line();
   e:	4620      	mov	r0, r4
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/lib.rs:81
        let file = location.file();
  10:	460e      	mov	r6, r1
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/lib.rs:82
        let line = location.line();
  12:	f7ff fffe 	bl	0 <core::panic::Location::line>
  16:	4604      	mov	r4, r0
_ZN3app8app_base13console_print17h1db64f4bd159062eE():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:18
        console_buffer(msg.as_ptr(), len as u32);
  18:	f240 0000 	movw	r0, #0
  1c:	f2c0 0000 	movt	r0, #0
  20:	2109      	movs	r1, #9
  22:	f7ff fffe 	bl	0 <console_buffer>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:19
        console_flush();  //  TODO: Remove this.
  26:	f7ff fffe 	bl	0 <console_flush>
rust_begin_unwind():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/lib.rs:84
        console_print(b"panic at ");
        unsafe { console_buffer(file.as_ptr(), file.len() as u32) }
  2a:	4628      	mov	r0, r5
  2c:	4631      	mov	r1, r6
  2e:	f7ff fffe 	bl	0 <console_buffer>
_ZN3app8app_base13console_print17h1db64f4bd159062eE():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:18
        console_buffer(msg.as_ptr(), len as u32);
  32:	f240 0000 	movw	r0, #0
  36:	2108      	movs	r1, #8
  38:	f2c0 0000 	movt	r0, #0
  3c:	f7ff fffe 	bl	0 <console_buffer>
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:19
        console_flush();  //  TODO: Remove this.
  40:	f7ff fffe 	bl	0 <console_flush>
rust_begin_unwind():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/lib.rs:86
        console_print(b" line 0x");
        unsafe { console_printhex(line as u8) }  //  TODO: Print in decimal not hex. Allow more than 255 lines.
  44:	b2e0      	uxtb	r0, r4
  46:	f7ff fffe 	bl	0 <console_printhex>
_ZN3app8app_base13console_print17h1db64f4bd159062eE():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/app_base.rs:18
        console_buffer(msg.as_ptr(), len as u32);
  4a:	f240 0000 	movw	r0, #0
  4e:	2101      	movs	r1, #1
  50:	f2c0 0000 	movt	r0, #0
  54:	e004      	b.n	c <rust_begin_unwind+0xc>
  56:	f240 0000 	movw	r0, #0
  5a:	2112      	movs	r1, #18
  5c:	f2c0 0000 	movt	r0, #0
rust_begin_unwind():
  60:	f7ff fffe 	bl	0 <console_buffer>
  64:	f7ff fffe 	bl	0 <console_flush>
  68:	f7ff fffe 	bl	0 <console_flush>
_ZN8cortex_m3asm4bkpt17h756c5667fd4cf09cE():
/Users/Luppy/.cargo/registry/src/github.com-1ecc6299db9ec823/cortex-m-0.6.0/src/asm.rs:19
        () => unsafe {
            extern "C" {
                fn __bkpt();
            }

            __bkpt();
  6c:	f7ff fffe 	bl	0 <__bkpt>
rust_begin_unwind():
/Users/Luppy/mynewt/stm32bluepill-mynewt-sensor/rust/app/src/lib.rs:96
        unsafe { console_flush() }
    }
    //  Pause in the debugger.
    bkpt();
    //  Loop forever so that device won't restart.
    loop {}
  70:	e7fe      	b.n	70 <rust_begin_unwind+0x70>
arm-none-eabi-objdump: rust.metadata.bin: File format not recognized
arm-none-eabi-objdump: app-65c720a40574e4de.app.o6vxcoia-cgu.0.rcgu.bc.z: File format not recognized
